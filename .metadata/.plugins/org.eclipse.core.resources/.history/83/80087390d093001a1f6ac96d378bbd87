/*
 * BiasOutput.c
 *
 *  Created on: 9 May 2020
 *      Author: chris
 */

#include "BiasOutput.h"

#include "gpio.h"
#include "dac.h"

#include "SignalManager.h"

eBias_Polarity eBiasPolarity = NORMALBIAS;


/*
 *
 *
 *
 */
eBias_Polarity BO_GetBiasPolarity()
{
	return eBiasPolarity;
}

/*
 *
 *
 *
 */
void BO_ModifyOutput()
{
	// apply negative dc bias
	if(SM_GetEncoderValue(ENCODER_REVERSE) < BIAS_CENTER) {

		eBiasPolarity = INVERSEBIAS;

		HAL_DAC_SetValue(	&hdac1,
							DAC1_CHANNEL_2,
							DAC_ALIGN_12B_R,
							(BIAS_CENTER - SM_GetEncoderValue(ENCODER_REVERSE)) * BIAS_MAG);

		HAL_GPIO_WritePin(	DCBIAS_INVERT_GPIO_Port,
							DCBIAS_INVERT_Pin,
							GPIO_PIN_SET);
	}
	// apply positive dc bias
	if(SM_GetEncoderValue(ENCODER_REVERSE) >= BIAS_CENTER) {

		eBiasPolarity = NORMALBIAS;

		HAL_DAC_SetValue(	&hdac1,
							DAC1_CHANNEL_2,
							DAC_ALIGN_12B_R,
							(SM_GetEncoderValue(ENCODER_REVERSE) - BIAS_CENTER) * BIAS_MAG);

		HAL_GPIO_WritePin(	DCBIAS_INVERT_GPIO_Port,
							DCBIAS_INVERT_Pin,
							GPIO_PIN_RESET);
	}
}

/*
 *
 *
 *
 */
uint32_t BO_GetOutputBias()
{
	return HAL_DAC_GetValue(&hdac1, DAC1_CHANNEL_2);
}


uint8_t BO_GetOutputBiasInVolts()
{
	char bias[5] = "";
	//snprintf(bias, sizeof(bias), "%u", (uint8_t)BO_GetOutputBias());
	if(DM_AddDigitPadding((uint16_t)BO_GetOutputBias(), bias, sizeof(bias)) == 0)
	{
		if(BO_GetBiasPolarity())
		{
			char symbol[2] = "+\0";
			//char test[10] = strcat(symbol, "10");
			ILI9341_Draw_Text(strcat(symbol, bias), 250, 150, WHITE, 1, BLACK);
		}
		else
		{
			char symbol[2] = "-\0";
			ILI9341_Draw_Text(strcat(symbol, bias), 250, 150, WHITE, 1, BLACK);
		}
	}
}

