/*
 * EventManager.c
 *
 *  Created on: May 8, 2020
 *      Author: chris
 */


#include "EventManager.h"
#include "DisplayManager.h"

#include "dac.h"

#include <stdio.h>

#include "pysine.h"
#include "pysquare.h"
#include "pyunitimpulse.h"
#include "pysaw.h"
#include "pysaw_rev.h"
#include "pytriangle.h"

// public function prototypes
void EM_SetNewEvent(eSystemEvent pEvent);
eOutput_mode EM_GetOutputMode();

// private function prototypes
void _ClearEvent();
eSystemState _FuncAdjustHandler(void);
eSystemState _FreqAdjustHandler(void);
eSystemState _AmplAdjustHandler(void);
eSystemState _BiasAdjustHandler(void);
eSystemState _AdjustConfirmedHandler(void);

// state machine
eSystemState eNextState = Idle_State;
eSystemEvent eNewEvent;

// function output mode
eOutput_mode eNewOutMode = Sine_Out_Mode;

// rotary encoder value
uint32_t newRotEncoderValue = 0;
uint32_t oldRotaryEncoderValue = 0;

/*
 *
 * 	Main state machine for event process
 *
 */
void EM_ProcessEvent()
{

	switch(eNextState)
	{
		case Idle_State:
			if(eNewEvent == Func_Menu_Event)
			{
				eNextState = _FuncMenuHandler();
			}
			if(eNewEvent == Freq_Menu_Event)
			{
				eNextState = _FreqMenuHandler();
			}
			if(eNewEvent == Ampl_Menu_Event)
			{
				eNextState = _AmplMenuHandler();
			}
			if(eNewEvent == Bias_Menu_Event)
			{
				eNextState = _BiasMenuHandler();
			}
			if(eNewEvent == Adjust_Confirmed_Event)
			{
				eNextState = _AdjustConfirmedHandler();
			}
			break;

		case Func_Menu_State:
			if(eNewEvent == Func)
		default:
			break;
	}

}

/*
 *
 *	Business logic for FunctionAdjust events
 *
 */
eSystemState _FuncMenuHandler(void)
{
#ifdef EM_SWV_DEBUG
	printf("FunctionAdjust Event captured\n");
#endif

	DM_ShowFuncSelectMenu(1);

	if(newRotEncoderValue > oldRotEncoderValue)
	{

	}
	else
	{

	}
	//HAL_DAC_Stop_DMA(&hdac1, DAC1_CHANNEL_1);
	//HAL_DAC_Start_DMA(&hdac1, DAC1_CHANNEL_1, triangle_data_table, SINE_DATA_SIZE, DAC_ALIGN_12B_R);
	//_ClearEvent();
	oldRotEncoderValue = newRotEncoderValue;
	return Func_Menu_State;
}

eSystemState _FuncMenuHandler(void)
{
#ifdef EM_SWV_DEBUG
	printf("FunctionAdjust Event captured\n");
#endif

	DM_ShowFuncSelectMenu(1);

	if(newRotEncoderValue > oldRotEncoderValue)
	{

	}
	else
	{

	}
	//HAL_DAC_Stop_DMA(&hdac1, DAC1_CHANNEL_1);
	//HAL_DAC_Start_DMA(&hdac1, DAC1_CHANNEL_1, triangle_data_table, SINE_DATA_SIZE, DAC_ALIGN_12B_R);
	//_ClearEvent();
	oldRotEncoderValue = newRotEncoderValue;
	return Idle_State;
}

/*
 *
 *	Business logic for FreqAdjust events
 *
 */
eSystemState _FreqMenuHandler(void)
{
#ifdef EM_SWV_DEBUG
	printf("FreqAdjust Event captured\n");
#endif
	_ClearEvent();
	return Idle_State;
}

/*
 *
 *	Business logic for AmplitudeAdjust events
 *
 */
eSystemState _AmplMenuHandler(void)
{
#ifdef EM_SWV_DEBUG
	printf("AmplitudeAdjust Event captured\n");
#endif
	_ClearEvent();
	return Idle_State;
}

/*
 *
 *	Business logic for BiasAdjust events
 *
 */
eSystemState _BiasMenuHandler(void)
{
#ifdef EM_SWV_DEBUG
	printf("BiasAdjust Event captured\n");
#endif
	_ClearEvent();
	return Idle_State;
}

/*
 *
 *	Business logic for AdjustConfirmed events
 *
 */
eSystemState _AdjustConfirmedHandler(void)
{
#ifdef EM_SWV_DEBUG
	printf("AdjustConfirmed Event captured\n");
#endif
	_ClearEvent();
	return Idle_State;
}


/*
 *
 * 	Set by NVIC interrupt handlers
 *
 */
void EM_SetNewEvent(eSystemEvent pEvent)
{
	eNewEvent = pEvent;
}

/*
 *
 * Reset the eNewEvent member back to idle
 *
 */
void _ClearEvent()
{
	eNewEvent = Idle_Event;
}

/*
 *
 *
 *
 */
eOutput_mode EM_GetOutputMode()
{
	return eNewOutMode;
}

/*
 *
 *
 *
 */
eSystemState EM_GetSystemState()
{
	return eNextState;
}

/*
 *
 *
 *
 */
void EM_SetEncoderValue(uint32_t pValue)
{
	newRotEncoderValue = pValue;


}
