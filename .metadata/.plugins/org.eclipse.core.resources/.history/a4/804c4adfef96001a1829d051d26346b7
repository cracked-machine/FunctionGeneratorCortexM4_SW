/*
 * SignalManager.c
 *
 *  Created on: 9 May 2020
 *      Author: chris
 */


#include "SignalManager.h"
#include <math.h>


sOutputChannel_t SignalChannel = { SIGNAL_CHANNEL, 0, 0, sine_data_table_3600[i] };
sOutputChannel_t SyncChannel = { SYNC_CHANNEL, 0, 0, 0 };


void SM_Init()
{
	SignalChannel.type = SIGNAL_CHANNEL;
	SignalChannel.pRefDataTable = aFuncPresetEncoderPos[SINE_FUNC_MODE].lookup_table_data;
	SignalChannel.pFuncPreset = &aFuncPresetEncoderPos[SINE_FUNC_MODE];
	for(int i = 0; i < SINE_DATA_SIZE; i++)
		SignalChannel.aModDataTable[i] = sine_data_table_3600[i];

	SyncChannel.type = SYNC_CHANNEL;
	SyncChannel.pRefDataTable = aFuncPresetEncoderPos[SINE_FUNC_MODE].lookup_table_data;
	SyncChannel.pFuncPreset = &aFuncPresetEncoderPos[SINE_FUNC_MODE];
	for(int i = 0; i < SINE_DATA_SIZE; i++)
		SyncChannel.aModDataTable[i] = sine_data_table_3600[i];
}

sOutputChannel_t * SM_GetOutputChannel(eOutputChannel_t pChannel)
{
	if(!pChannel)
		return &SignalChannel;
	else
		return &SyncChannel;
}

/*
 *
 *	@brief
 *
 *	@param None
 *	@retval None
 *
 */
uint16_t SM_GetEncoderValue(eEncoder_Direction direction)
{
	if(direction)
	{
		return ENCODER_TIMER->ARR - ENCODER_TIMER->CNT;
	}
	else
	{
		return ENCODER_TIMER->CNT;
	}
}

/*
 *
 *	@brief
 *
 *	@param None
 *	@retval None
 *
 */
float SM_GetOutputInHertz()
{
	volatile float tim8_psc;
	volatile float tim8_arr;

	// safe-guard against divide by zero
	(TIM8->PSC == 0) ? (tim8_psc = 1) : (tim8_psc = TIM8->PSC);
	(TIM8->ARR == 0) ? (tim8_arr = 1) : (tim8_arr = TIM8->ARR);

	float tim8_freq = SM_MCLK / (tim8_psc * tim8_arr);


	return tim8_freq / SM_FSAMP;
}


