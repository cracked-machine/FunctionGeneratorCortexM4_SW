/*
 * VoltPeakPeakOutput.c
 *
 *  Created on: 14 May 2020
 *      Author: chris
 */

#include "VoltPeakPeakOutput.h"
#include "DisplayManager.h"
#include "SignalManager.h"

#include "pysine.h"

/*
 *	Array of objects for Function Presets and their encoder positions for func preset menu
 */
VppEncoderPreset_t aVppEncoderPresets[MAX_VPP_PRESETS] =
{
		{	VPP01	,	0.1	,	1	,	"0 dB"	,	0.08	,	4	},
		{	VPP02	,	0.2	,	1	,	"0 dB"	,	0.15	,	8	},
		{	VPP03	,	0.3	,	1	,	"0 dB"	,	0.23	,	12	},
		{	VPP04	,	0.4	,	1	,	"0 dB"	,	0.31	,	16	},
		{	VPP05	,	0.5	,	1	,	"0 dB"	,	0.38	,	20	},
		{	VPP06	,	0.6	,	1	,	"0 dB"	,	0.46	,	24	},
		{	VPP07	,	0.7	,	1	,	"0 dB"	,	0.54	,	28	},
		{	VPP08	,	0.8	,	1	,	"0 dB"	,	0.62	,	32	},
		{	VPP09	,	0.9	,	1	,	"0 dB"	,	0.69	,	36	},
		{	VPP10	,	1.0	,	1	,	"0 dB"	,	0.77	,	40	},
		{	VPP11	,	1.1	,	1	,	"0 dB"	,	0.85	,	44	},
		{	VPP12	,	1.2	,	1	,	"0 dB"	,	0.92	,	48	},
		{	VPP13	,	1.3	,	1	,	"0 dB"	,	1.00	,	52	},
		{	VPP14	,	1.4	,	1	,	"0 dB"	,	1.08	,	56	},
		{	VPP15	,	1.5	,	2	,	"+6 dB"	,	0.58	,	60	},
		{	VPP16	,	1.6	,	2	,	"+6 dB"	,	0.62	,	64	},
		{	VPP17	,	1.7	,	2	,	"+6 dB"	,	0.65	,	68	},
		{	VPP18	,	1.8	,	2	,	"+6 dB"	,	0.69	,	72	},
		{	VPP19	,	1.9	,	2	,	"+6 dB"	,	0.73	,	76	},
		{	VPP20	,	2.0	,	2	,	"+6 dB"	,	0.77	,	80	},
		{	VPP21	,	2.1	,	2	,	"+6 dB"	,	0.81	,	84	},
		{	VPP22	,	2.2	,	2	,	"+6 dB"	,	0.85	,	88	},
		{	VPP23	,	2.3	,	2	,	"+6 dB"	,	0.88	,	92	},
		{	VPP24	,	2.4	,	2	,	"+6 dB"	,	0.92	,	96	},
		{	VPP25	,	2.5	,	2	,	"+6 dB"	,	0.96	,	100	},
		{	VPP26	,	2.6	,	2	,	"+6 dB"	,	1.00	,	104	},
		{	VPP27	,	2.7	,	2	,	"+6 dB"	,	1.04	,	108	},
		{	VPP28	,	2.8	,	2	,	"+6 dB"	,	1.08	,	112	},
		{	VPP29	,	2.9	,	3	,	"+9 dB"	,	0.74	,	116	},
		{	VPP30	,	3.0	,	3	,	"+9 dB"	,	0.77	,	120	},
		{	VPP31	,	3.1	,	3	,	"+9 dB"	,	0.79	,	124	},
		{	VPP32	,	3.2	,	3	,	"+9 dB"	,	0.82	,	128	},
		{	VPP33	,	3.3	,	3	,	"+9 dB"	,	0.85	,	132	},
		{	VPP34	,	3.4	,	3	,	"+9 dB"	,	0.87	,	136	},
		{	VPP35	,	3.5	,	3	,	"+9 dB"	,	0.90	,	140	},
		{	VPP36	,	3.6	,	3	,	"+9 dB"	,	0.92	,	144	},
		{	VPP37	,	3.7	,	3	,	"+9 dB"	,	0.95	,	148	},
		{	VPP38	,	3.8	,	3	,	"+9 dB"	,	0.97	,	152	},
		{	VPP39	,	3.9	,	3	,	"+9 dB"	,	1.00	,	156	},
		{	VPP40	,	4.0	,	3	,	"+9 dB"	,	1.03	,	160	},
		{	VPP41	,	4.1	,	3	,	"+9 dB"	,	1.05	,	164	},
		{	VPP42	,	4.2	,	3	,	"+9 dB"	,	1.08	,	168	},
		{	VPP43	,	4.3	,	4	,	"+12 dB"	,	0.83	,	172	},
		{	VPP44	,	4.4	,	4	,	"+12 dB"	,	0.85	,	176	},
		{	VPP45	,	4.5	,	4	,	"+12 dB"	,	0.87	,	180	},
		{	VPP46	,	4.6	,	4	,	"+12 dB"	,	0.88	,	184	},
		{	VPP47	,	4.7	,	4	,	"+12 dB"	,	0.90	,	188	},
		{	VPP48	,	4.8	,	4	,	"+12 dB"	,	0.92	,	192	},
		{	VPP49	,	4.9	,	4	,	"+12 dB"	,	0.94	,	196	},
		{	VPP50	,	5.0	,	4	,	"+12 dB"	,	0.96	,	200	},
		{	VPP51	,	5.1	,	4	,	"+12 dB"	,	0.98	,	204	},
		{	VPP52	,	5.2	,	4	,	"+12 dB"	,	1.00	,	208	},
		{	VPP53	,	5.3	,	4	,	"+12 dB"	,	1.02	,	212	},
		{	VPP54	,	5.4	,	4	,	"+12 dB"	,	1.04	,	216	},
		{	VPP55	,	5.5	,	4	,	"+12 dB"	,	1.06	,	220	},
		{	VPP56	,	5.6	,	4	,	"+12 dB"	,	1.08	,	224	},
		{	VPP57	,	5.7	,	5	,	"+15 dB"	,	0.88	,	228	},
		{	VPP58	,	5.8	,	5	,	"+14 dB"	,	0.89	,	232	},
		{	VPP59	,	5.9	,	5	,	"+14 dB"	,	0.91	,	236	},
		{	VPP60	,	6.0	,	5	,	"+14 dB"	,	0.92	,	240	},
		{	VPP61	,	6.1	,	5	,	"+14 dB"	,	0.94	,	244	},
		{	VPP62	,	6.2	,	5	,	"+14 dB"	,	0.95	,	248	},
		{	VPP63	,	6.3	,	5	,	"+14 dB"	,	0.97	,	252	},
		{	VPP64	,	6.4	,	5	,	"+14 dB"	,	0.98	,	256	},
		{	VPP65	,	6.5	,	5	,	"+14 dB"	,	1.00	,	260	},
		{	VPP66	,	6.6	,	5	,	"+14 dB"	,	1.02	,	264	},
		{	VPP67	,	6.7	,	5	,	"+14 dB"	,	1.03	,	268	},
		{	VPP68	,	6.8	,	5	,	"+14 dB"	,	1.05	,	272	},
		{	VPP69	,	6.9	,	5	,	"+14 dB"	,	1.06	,	276	},
		{	VPP70	,	7.0	,	5	,	"+14 dB"	,	1.08	,	280	},
		{	VPP71	,	7.1	,	6	,	"+16 dB"	,	0.91	,	284	},
		{	VPP72	,	7.2	,	6	,	"+16 dB"	,	0.92	,	288	},
		{	VPP73	,	7.3	,	6	,	"+16 dB"	,	0.94	,	292	},
		{	VPP74	,	7.4	,	6	,	"+16 dB"	,	0.95	,	296	},
		{	VPP75	,	7.5	,	6	,	"+16 dB"	,	0.96	,	300	},
		{	VPP76	,	7.6	,	6	,	"+16 dB"	,	0.97	,	304	},
		{	VPP77	,	7.7	,	6	,	"+16 dB"	,	0.99	,	308	},
		{	VPP78	,	7.8	,	6	,	"+16 dB"	,	1.00	,	312	},
		{	VPP79	,	7.9	,	6	,	"+16 dB"	,	1.01	,	316	},
		{	VPP80	,	8.0	,	6	,	"+16 dB"	,	1.03	,	320	},
		{	VPP81	,	8.1	,	6	,	"+16 dB"	,	1.04	,	324	},
		{	VPP82	,	8.2	,	6	,	"+16 dB"	,	1.05	,	328	},
		{	VPP83	,	8.3	,	6	,	"+16 dB"	,	1.06	,	332	},
		{	VPP84	,	8.4	,	6	,	"+16 dB"	,	1.08	,	336	},
		{	VPP85	,	8.5	,	7	,	"+18 dB"	,	0.93	,	340	},
		{	VPP86	,	8.6	,	7	,	"+18 dB"	,	0.95	,	344	},
		{	VPP87	,	8.7	,	7	,	"+18 dB"	,	0.96	,	348	},
		{	VPP88	,	8.8	,	7	,	"+18 dB"	,	0.97	,	352	},
		{	VPP89	,	8.9	,	7	,	"+18 dB"	,	0.98	,	356	},
		{	VPP90	,	9.0	,	7	,	"+18 dB"	,	0.99	,	360	},
		{	VPP91	,	9.1	,	7	,	"+18 dB"	,	1.00	,	364	},
		{	VPP92	,	9.2	,	7	,	"+18 dB"	,	1.01	,	368	},
		{	VPP93	,	9.3	,	7	,	"+18 dB"	,	1.02	,	372	},
		{	VPP94	,	9.4	,	7	,	"+18 dB"	,	1.03	,	376	},
		{	VPP95	,	9.5	,	7	,	"+18 dB"	,	1.04	,	380	},
		{	VPP96	,	9.6	,	7	,	"+18 dB"	,	1.05	,	384	},
		{	VPP97	,	9.7	,	7	,	"+18 dB"	,	1.07	,	388	},
		{	VPP98	,	9.8	,	7	,	"+18 dB"	,	1.08	,	MAX_VPP_ENCODER_RANGE	}

};


VppEncoderPreset_t* pVppEncoderPreset = &aVppEncoderPresets[eDefaultVppPreset];



void VPP_ModifyOutput(uint16_t pEncoderValue)
{
	switch(pEncoderValue)
	{
		case 0	:
		case 1	:
		case 2	:
		case 3	:
		case 4	:
		case 5	:
		case 6	:
		case 7	:
		case 8	:
		case 9	:
		case 10	:
		case 11	:
		case 12	:
		case 13	:
		case 14	:
		case 15	:
		case 16	:
		case 17	:
		case 18	:
		case 19	:
		case 20	:
		case 21	:
		case 22	:
		case 23	:
		case 24	:
		case 25	:
		case 26	:
		case 27	:
		case 28	:
		case 29	:
		case 30	:
		case 31	:
		case 32	:
		case 33	:
		case 34	:
		case 35	:
		case 36	:
		case 37	:
		case 38	:
		case 39	:
		case 40	:
		case 41	:
		case 42	:
		case 43	:
		case 44	:
		case 45	:
		case 46	:
		case 47	:
		case 48	:
		case 49	:
		case 50	:
		case 51	:
		case 52	:
		case 53	:
		case 54	:
		case 55	:
		case 56	:
		case 57	:
		case 58	:
		case 59	:
		case 60	:
		case 61	:
		case 62	:
		case 63	:
		case 64	:
		case 65	:
		case 66	:
		case 67	:
		case 68	:
		case 69	:
		case 70	:
		case 71	:
		case 72	:
		case 73	:
		case 74	:
		case 75	:
		case 76	:
		case 77	:
		case 78	:
		case 79	:
		case 80	:
		case 81	:
		case 82	:
		case 83	:
		case 84	:
		case 85	:
		case 86	:
		case 87	:
		case 88	:
		case 89	:
		case 90	:
		case 91	:
		case 92	:
		case 93	:
		case 94	:
		case 95	:
		case 96	:
		case 97	:
		case 98	:
		case 99	:
		case 100	:
		case 101	:
		case 102	:
		case 103	:
		case 104	:
		case 105	:
		case 106	:
		case 107	:
		case 108	:
		case 109	:
		case 110	:
		case 111	:
		case 112	:
		case 113	:
		case 114	:
		case 115	:
		case 116	:
		case 117	:
		case 118	:
		case 119	:
		case 120	:
		case 121	:
		case 122	:
		case 123	:
		case 124	:
		case 125	:
		case 126	:
		case 127	:
		case 128	:
		case 129	:
		case 130	:
		case 131	:
		case 132	:
		case 133	:
		case 134	:
		case 135	:
		case 136	:
		case 137	:
		case 138	:
		case 139	:
		case 140	:
		case 141	:
		case 142	:
		case 143	:
		case 144	:
		case 145	:
		case 146	:
		case 147	:
		case 148	:
		case 149	:
		case 150	:
		case 151	:
		case 152	:
		case 153	:
		case 154	:
		case 155	:
		case 156	:
		case 157	:
		case 158	:
		case 159	:
		case 160	:
		case 161	:
		case 162	:
		case 163	:
		case 164	:
		case 165	:
		case 166	:
		case 167	:
		case 168	:
		case 169	:
		case 170	:
		case 171	:
		case 172	:
		case 173	:
		case 174	:
		case 175	:
		case 176	:
		case 177	:
		case 178	:
		case 179	:
		case 180	:
		case 181	:
		case 182	:
		case 183	:
		case 184	:
		case 185	:
		case 186	:
		case 187	:
		case 188	:
		case 189	:
		case 190	:
		case 191	:
		case 192	:
		case 193	:
		case 194	:
		case 195	:
		case 196	:
		case 197	:
		case 198	:
		case 199	:
		case 200	:
		case 201	:
		case 202	:
		case 203	:
		case 204	:
		case 205	:
		case 206	:
		case 207	:
		case 208	:
		case 209	:
		case 210	:
		case 211	:
		case 212	:
		case 213	:
		case 214	:
		case 215	:
		case 216	:
		case 217	:
		case 218	:
		case 219	:
		case 220	:
		case 221	:
		case 222	:
		case 223	:
		case 224	:
		case 225	:
		case 226	:
		case 227	:
		case 228	:
		case 229	:
		case 230	:
		case 231	:
		case 232	:
		case 233	:
		case 234	:
		case 235	:
		case 236	:
		case 237	:
		case 238	:
		case 239	:
		case 240	:
		case 241	:
		case 242	:
		case 243	:
		case 244	:
		case 245	:
		case 246	:
		case 247	:
		case 248	:
		case 249	:
		case 250	:
		case 251	:
		case 252	:
		case 253	:
		case 254	:
		case 255	:
		case 256	:
		case 257	:
		case 258	:
		case 259	:
		case 260	:
		case 261	:
		case 262	:
		case 263	:
		case 264	:
		case 265	:
		case 266	:
		case 267	:
		case 268	:
		case 269	:
		case 270	:
		case 271	:
		case 272	:
		case 273	:
		case 274	:
		case 275	:
		case 276	:
		case 277	:
		case 278	:
		case 279	:
		case 280	:
		case 281	:
		case 282	:
		case 283	:
		case 284	:
		case 285	:
		case 286	:
		case 287	:
		case 288	:
		case 289	:
		case 290	:
		case 291	:
		case 292	:
		case 293	:
		case 294	:
		case 295	:
		case 296	:
		case 297	:
		case 298	:
		case 299	:
		case 300	:
		case 301	:
		case 302	:
		case 303	:
		case 304	:
		case 305	:
		case 306	:
		case 307	:
		case 308	:
		case 309	:
		case 310	:
		case 311	:
		case 312	:
		case 313	:
		case 314	:
		case 315	:
		case 316	:
		case 317	:
		case 318	:
		case 319	:
		case 320	:
		case 321	:
		case 322	:
		case 323	:
		case 324	:
		case 325	:
		case 326	:
		case 327	:
		case 328	:
		case 329	:
		case 330	:
		case 331	:
		case 332	:
		case 333	:
		case 334	:
		case 335	:
		case 336	:
		case 337	:
		case 338	:
		case 339	:
		case 340	:
		case 341	:
		case 342	:
		case 343	:
		case 344	:
		case 345	:
		case 346	:
		case 347	:
		case 348	:
		case 349	:
		case 350	:
		case 351	:
		case 352	:
		case 353	:
		case 354	:
		case 355	:
		case 356	:
		case 357	:
		case 358	:
		case 359	:
		case 360	:
		case 361	:
		case 362	:
		case 363	:
		case 364	:
		case 365	:
		case 366	:
		case 367	:
		case 368	:
		case 369	:
		case 370	:
		case 371	:
		case 372	:
		case 373	:
		case 374	:
		case 375	:
		case 376	:
		case 377	:
		case 378	:
		case 379	:
		case 380	:
		case 381	:
		case 382	:
		case 383	:
		case 384	:
		case 385	:
		case 386	:
		case 387	:
		case 388	:
		case 389	:
		case 390	:
		case 391	:
		case 392	:
			break;
	}
}

void VPP_ApplyPreset_Fast(eVppPreset_t pPresetEnum)
{

}

/*
 *
 *	@brief Get VPP preset pointer
 *
 *	@param None
 *	@retval pointer to VppEncoderPreset_t struct
 *
 */
VppEncoderPreset_t * VPP_GetVppPresetObject()
{
	return pVppEncoderPreset;
}


/*
 *
 *	@brief Search array of structs for preset
 *
 *	@param Search criteria. Should be one of the following:
 *
 *	VPP01, 	VPP02,	VPP03,	VPP04,	VPP05,	VPP06,	VPP07,	VPP08,	VPP09,	VPP10,	VPP11,	VPP12,	VPP13,	VPP14,	VPP15,
	VPP16,	VPP17,	VPP18,	VPP19,	VPP20,	VPP21,	VPP22,	VPP23,	VPP24,	VPP25,	VPP26,	VPP27,	VPP28,	VPP29,	VPP30,
	VPP31,	VPP32,	VPP33,	VPP34,	VPP35,	VPP36,	VPP37,	VPP38,	VPP39,	VPP40,	VPP41,  VPP42,  VPP43,	VPP44,	VPP45,
	VPP46,	VPP47,	VPP48,	VPP49,	VPP50,	VPP51,	VPP52,	VPP53,	VPP54,	VPP55,	VPP56,	VPP57,	VPP58,	VPP59,	VPP60,
	VPP61,	VPP62,	VPP63,	VPP64,	VPP65,	VPP66,	VPP67,	VPP68,	VPP69,	VPP70,	VPP71,	VPP72,	VPP73,  VPP74,	VPP75,
	VPP76,	VPP77,	VPP78,	VPP79,	VPP80,	VPP81,	VPP82,	VPP83,	VPP84,	VPP85,	VPP86,	VPP87,	VPP88,	VPP89,	VPP90,
	VPP91,	VPP92,	VPP93,	VPP94,	VPP95,	VPP96,	VPP97,	VPP98,

 *	@retval pointer to VppEncoderPreset_t struct
 *
 */
VppEncoderPreset_t * VPP_FindVppPresetObject(eVppPreset_t pEnum)
{
	for(int i = 0; i < MAX_VPP_PRESETS; i++ )
	{
		if(aVppEncoderPresets[i].Vpp_literal == pEnum)
		{
			return &aVppEncoderPresets[i];
		}
	}
	// error!
	DM_SetErrorDebugMsg("VPP_FindVppPresetObject(): VppEncoderPreset_t obj not found");
	return 0;
}





