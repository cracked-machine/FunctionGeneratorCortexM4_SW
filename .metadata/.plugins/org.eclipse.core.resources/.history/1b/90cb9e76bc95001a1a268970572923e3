/*
 * VoltPeakPeakOutput.c
 *
 *  Created on: 14 May 2020
 *      Author: chris
 */

#include "VoltPeakPeakOutput.h"
#include "DisplayManager.h"


/*
 *	Array of objects for Function Presets and their encoder positions for func preset menu
 */
VppEncoderPreset_t aVppEncoderPresets[MAX_NUM_VPP_PRESETS] =
{
		{	VPP01	,	0.1	,	1	,	0.08	,	4	},
		{	VPP02	,	0.2	,	1	,	0.15	,	8	},
		{	VPP03	,	0.3	,	1	,	0.23	,	12	},
		{	VPP04	,	0.4	,	1	,	0.31	,	16	},
		{	VPP05	,	0.5	,	1	,	0.38	,	20	},
		{	VPP06	,	0.6	,	1	,	0.46	,	24	},
		{	VPP07	,	0.7	,	1	,	0.54	,	28	},
		{	VPP08	,	0.8	,	1	,	0.62	,	32	},
		{	VPP09	,	0.9	,	1	,	0.69	,	36	},
		{	VPP10	,	1.0	,	1	,	0.77	,	40	},
		{	VPP11	,	1.1	,	1	,	0.85	,	44	},
		{	VPP12	,	1.2	,	1	,	0.92	,	48	},
		{	VPP13	,	1.3	,	1	,	1.00	,	52	},
		{	VPP14	,	1.4	,	1	,	1.08	,	56	},
		{	VPP15	,	1.5	,	2	,	0.58	,	60	},
		{	VPP16	,	1.6	,	2	,	0.62	,	64	},
		{	VPP17	,	1.7	,	2	,	0.65	,	68	},
		{	VPP18	,	1.8	,	2	,	0.69	,	72	},
		{	VPP19	,	1.9	,	2	,	0.73	,	76	},
		{	VPP20	,	2.0	,	2	,	0.77	,	80	},
		{	VPP21	,	2.1	,	2	,	0.81	,	84	},
		{	VPP22	,	2.2	,	2	,	0.85	,	88	},
		{	VPP23	,	2.3	,	2	,	0.88	,	92	},
		{	VPP24	,	2.4	,	2	,	0.92	,	96	},
		{	VPP25	,	2.5	,	2	,	0.96	,	100	},
		{	VPP26	,	2.6	,	2	,	1.00	,	104	},
		{	VPP27	,	2.7	,	2	,	1.04	,	108	},
		{	VPP28	,	2.8	,	2	,	1.08	,	112	},
		{	VPP29	,	2.9	,	3	,	0.74	,	116	},
		{	VPP30	,	3.0	,	3	,	0.77	,	120	},
		{	VPP31	,	3.1	,	3	,	0.79	,	124	},
		{	VPP32	,	3.2	,	3	,	0.82	,	128	},
		{	VPP33	,	3.3	,	3	,	0.85	,	132	},
		{	VPP34	,	3.4	,	3	,	0.87	,	136	},
		{	VPP35	,	3.5	,	3	,	0.90	,	140	},
		{	VPP36	,	3.6	,	3	,	0.92	,	144	},
		{	VPP37	,	3.7	,	3	,	0.95	,	148	},
		{	VPP38	,	3.8	,	3	,	0.97	,	152	},
		{	VPP39	,	3.9	,	3	,	1.00	,	156	},
		{	VPP40	,	4.0	,	3	,	1.03	,	160	},
		{	VPP41	,	4.1	,	3	,	1.05	,	164	},
		{	VPP42	,	4.2	,	3	,	1.08	,	168	},
		{	VPP43	,	4.3	,	4	,	0.83	,	172	},
		{	VPP44	,	4.4	,	4	,	0.85	,	176	},
		{	VPP45	,	4.5	,	4	,	0.87	,	180	},
		{	VPP46	,	4.6	,	4	,	0.88	,	184	},
		{	VPP47	,	4.7	,	4	,	0.90	,	188	},
		{	VPP48	,	4.8	,	4	,	0.92	,	192	},
		{	VPP49	,	4.9	,	4	,	0.94	,	196	},
		{	VPP50	,	5.0	,	4	,	0.96	,	200	},
		{	VPP51	,	5.1	,	4	,	0.98	,	204	},
		{	VPP52	,	5.2	,	4	,	1.00	,	208	},
		{	VPP53	,	5.3	,	4	,	1.02	,	212	},
		{	VPP54	,	5.4	,	4	,	1.04	,	216	},
		{	VPP55	,	5.5	,	4	,	1.06	,	220	},
		{	VPP56	,	5.6	,	4	,	1.08	,	224	},
		{	VPP57	,	5.7	,	5	,	0.88	,	228	},
		{	VPP58	,	5.8	,	5	,	0.89	,	232	},
		{	VPP59	,	5.9	,	5	,	0.91	,	236	},
		{	VPP60	,	6.0	,	5	,	0.92	,	240	},
		{	VPP61	,	6.1	,	5	,	0.94	,	244	},
		{	VPP62	,	6.2	,	5	,	0.95	,	248	},
		{	VPP63	,	6.3	,	5	,	0.97	,	252	},
		{	VPP64	,	6.4	,	5	,	0.98	,	256	},
		{	VPP65	,	6.5	,	5	,	1.00	,	260	},
		{	VPP66	,	6.6	,	5	,	1.02	,	264	},
		{	VPP67	,	6.7	,	5	,	1.03	,	268	},
		{	VPP68	,	6.8	,	5	,	1.05	,	272	},
		{	VPP69	,	6.9	,	5	,	1.06	,	276	},
		{	VPP70	,	7.0	,	5	,	1.08	,	280	},
		{	VPP71	,	7.1	,	6	,	0.91	,	284	},
		{	VPP72	,	7.2	,	6	,	0.92	,	288	},
		{	VPP73	,	7.3	,	6	,	0.94	,	292	},
		{	VPP74	,	7.4	,	6	,	0.95	,	296	},
		{	VPP75	,	7.5	,	6	,	0.96	,	300	},
		{	VPP76	,	7.6	,	6	,	0.97	,	304	},
		{	VPP77	,	7.7	,	6	,	0.99	,	308	},
		{	VPP78	,	7.8	,	6	,	1.00	,	312	},
		{	VPP79	,	7.9	,	6	,	1.01	,	316	},
		{	VPP80	,	8.0	,	6	,	1.03	,	320	},
		{	VPP81	,	8.1	,	6	,	1.04	,	324	},
		{	VPP82	,	8.2	,	6	,	1.05	,	328	},
		{	VPP83	,	8.3	,	6	,	1.06	,	332	},
		{	VPP84	,	8.4	,	6	,	1.08	,	336	},
		{	VPP85	,	8.5	,	7	,	0.93	,	340	},
		{	VPP86	,	8.6	,	7	,	0.95	,	344	},
		{	VPP87	,	8.7	,	7	,	0.96	,	348	},
		{	VPP88	,	8.8	,	7	,	0.97	,	352	},
		{	VPP89	,	8.9	,	7	,	0.98	,	356	},
		{	VPP90	,	9.0	,	7	,	0.99	,	360	},
		{	VPP91	,	9.1	,	7	,	1.00	,	364	},
		{	VPP92	,	9.2	,	7	,	1.01	,	368	},
		{	VPP93	,	9.3	,	7	,	1.02	,	372	},
		{	VPP94	,	9.4	,	7	,	1.03	,	376	},
		{	VPP95	,	9.5	,	7	,	1.04	,	380	},
		{	VPP96	,	9.6	,	7	,	1.05	,	384	},
		{	VPP97	,	9.7	,	7	,	1.07	,	388	},
		{	VPP98	,	9.8	,	7	,	1.08	,	392	}

};



/*
 *
 *	@brief Get VPP preset pointer
 *
 *	@param None
 *	@retval pointer to VppEncoderPreset_t struct
 *
 */
VppEncoderPreset_t * VPP_GetVppPresetObject()
{
	return pVppEncoderPreset;
}


/*
 *
 *	@brief Search array of structs for preset
 *
 *	@param Search criteria. Should be one of the following:
 *
 *	VPP01, 	VPP02,	VPP03,	VPP04,	VPP05,	VPP06,	VPP07,	VPP08,	VPP09,	VPP10,	VPP11,	VPP12,	VPP13,	VPP14,	VPP15,
	VPP16,	VPP17,	VPP18,	VPP19,	VPP20,	VPP21,	VPP22,	VPP23,	VPP24,	VPP25,	VPP26,	VPP27,	VPP28,	VPP29,	VPP30,
	VPP31,	VPP32,	VPP33,	VPP34,	VPP35,	VPP36,	VPP37,	VPP38,	VPP39,	VPP40,	VPP41,  VPP42,  VPP43,	VPP44,	VPP45,
	VPP46,	VPP47,	VPP48,	VPP49,	VPP50,	VPP51,	VPP52,	VPP53,	VPP54,	VPP55,	VPP56,	VPP57,	VPP58,	VPP59,	VPP60,
	VPP61,	VPP62,	VPP63,	VPP64,	VPP65,	VPP66,	VPP67,	VPP68,	VPP69,	VPP70,	VPP71,	VPP72,	VPP73,  VPP74,	VPP75,
	VPP76,	VPP77,	VPP78,	VPP79,	VPP80,	VPP81,	VPP82,	VPP83,	VPP84,	VPP85,	VPP86,	VPP87,	VPP88,	VPP89,	VPP90,
	VPP91,	VPP92,	VPP93,	VPP94,	VPP95,	VPP96,	VPP97,	VPP98,

 *	@retval pointer to VppEncoderPreset_t struct
 *
 */
VppEncoderPreset_t * VPP_FindVppPresetObject(eVppPreset_t pEnum)
{
	for(int i = 0; i < MAX_NUM_VPP_PRESETS; i++ )
	{
		if(aVppEncoderPresets[i].Vpp_literal == pEnum)
		{
			return &aVppEncoderPresets[i];
		}
	}
	// error!
	DM_SetErrorDebugMsg("FuncO_FindFPresetObject(): no FPreset obj found");
	return 0;
}



/*
 *
 *	@brief	Get range value for rotary encoder
 *
 *	@param None
 *	@retval uint8_t
 *
 */
uint8_t VPP_GetVppEncoderPresetRange()
{
	return VppEncoderPresetRange;
}


