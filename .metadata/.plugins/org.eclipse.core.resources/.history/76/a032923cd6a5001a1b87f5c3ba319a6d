/*
 * OutputMenuStateHandler.c
 *
 *  Created on: 15 May 2020
 *      Author: chris
 */

#include "DisplayManager.h"
//#include "SignalManager.h"
#include <stdio.h>
#include <ToplevelMenuStateHandler.h>



#include "comp.h"
#include "dac.h"
#include "adc.h"




eToplevelMenu_Status eNextToplevelMenuStatus = 	ENABLE_TOPLEVEL_MAIN_MENU;



eToplevelMenu_Status ToplevelMenu_getStatus()
{
	return eNextToplevelMenuStatus;
}

void ToplevelMenu_setStatus(eToplevelMenu_Status pStatus)
{
	eNextToplevelMenuStatus = pStatus;
}

/*
 *
 *	@brief
 *
 *	@param None
 *	@retval None
 *
 */
eSystemState ToplevelMainMenuEntryHandler()
{
	#ifdef EVENT_MENU_DEBUG
		printf("ToplevelMainMenuEntryHandler Event captured\n");
	#endif

	DM_RefreshScreen();

	eNextToplevelMenuStatus = ENABLE_TOPLEVEL_MAIN_MENU;

	// stay in this state
	eNewEvent = evIdle;
	return Toplevel_Main_Menu_State;
}


/*
 *
 *	@brief
 *
 *	@param None
 *	@retval None
 *
 */
eSystemState ToplevelMainMenuInputHandler()
{
	#ifdef EVENT_MENU_DEBUG
		printf("ToplevelMainMenuInputHandler Event captured\n");
	#endif


	return Toplevel_Main_Menu_State;
}


/*
 *
 *	@brief
 *
 *	@param None
 *	@retval None
 *
 */
eSystemState ToplevelMainMenuExitHandler()
{
	#ifdef EVENT_MENU_DEBUG
		printf("ToplevelMainMenuExitHandler Event captured\n");
	#endif


	// disable the menu
	eNextToplevelMenuStatus = DISABLE_TOPLEVEL_MENU;

	// reset the encoder range

	DM_RefreshScreen();

	#ifdef EVENT_MENU_DEBUG
		  printf("returning to Idle State\n");
	#endif

	eNewEvent = evIdle;
	return Idle_State;
}

/*
 *
 *	@brief
 *
 *	@param None
 *	@retval None
 *
 */
eSystemState ToplevelOutputMenuEntryHandler()
{
	#ifdef EVENT_MENU_DEBUG
		printf("ToplevelOutputMenuEntryHandler Event captured\n");
	#endif

	DM_RefreshScreen();

	eNextToplevelMenuStatus = ENABLE_TOPLEVEL_OUTPUT_MENU;




	// stay in this state
	eNewEvent = evIdle;
	return Toplevel_Output_Menu_State;
}


/*
 *
 *	@brief
 *
 *	@param None
 *	@retval None
 *
 */
eSystemState ToplevelOutputMenuInputHandler()
{
	#ifdef EVENT_MENU_DEBUG
		printf("ToplevelOutputMenuInputHandler Event captured\n");
	#endif


	// stay in this state
	eNewEvent = evIdle;
	return Toplevel_Output_Menu_State;
}

/*
 *
 *	@brief
 *
 *	@param None
 *	@retval None
 *
 */
eSystemState ToplevelOutputMenuExitHandler()
{
	#ifdef EVENT_MENU_DEBUG
		printf("ToplevelOutputMenuExitHandler Event captured\n");
	#endif

	DM_RefreshScreen();

	// disable the menu
	eNextToplevelMenuStatus = ENABLE_TOPLEVEL_MAIN_MENU;

	// back to main freq menu
	eNewEvent = evIdle;
	return Idle_State;
}

/*
 *
 *	@brief
 *
 *	@param None
 *	@retval None
 *
 */
eSystemState ToplevelInputMenuEntryHandler()
{
	#ifdef EVENT_MENU_DEBUG
		printf("ToplevelInputMenuEntryHandler Event captured\n");
	#endif

	DM_RefreshScreen();

	eNextToplevelMenuStatus = ENABLE_TOPLEVEL_INPUT_MENU;




	// stay in this state
	eNewEvent = evIdle;
	return Toplevel_Input_Menu_State;
}


/*
 *
 *	@brief
 *
 *	@param None
 *	@retval None
 *
 */
eSystemState ToplevelInputMenuInputHandler(eSystemEvent pEvent)
{
	#ifdef EVENT_MENU_DEBUG
		printf("ToplevelInputMenuInputHandler Event captured\n");
	#endif


		switch(pEvent)
		{

			case evBlueBtn:
				// disable the trigger input
				if(IT_GetTriggerStatus())
				{
					// disable timer external clock source
					OUTPUT_TIMER->SMCR &= ~(TIM_SMCR_ECE);
					// disable timer enable "Filtered timer input 1" (tim_ti1fp1)
					OUTPUT_TIMER->SMCR &= ~(TIM_TS_TI1FP1);
					// disable timer reset trigger mode
					OUTPUT_TIMER->SMCR &= ~(TIM_SMCR_SMS_2);
					// set status to disabled

					// disable the comparator
					HAL_COMP_Stop(&hcomp1);

					// stop the ADC
					HAL_ADC_Stop_DMA(&hadc1);

					GPIOA->AFR[0] &= ~(GPIO_AF1_TIM2);
					GPIOA->AFR[0] &= ~(GPIO_AF8_COMP1);


					IT_SetTriggerStatus(DISABLE_TRIGGER_INPUT);

					FuncO_ApplyProfileToSignal(eDefaultFuncPreset);
				}
				// enable the trigger input
				else
				{
					// select the pin to use for trigger input
					switch(IT_GetActiveTriggerMode())
					{
						case INPUT_TRIGGER_TIM:

							// TS5A3357 -> PA0
							HAL_GPIO_WritePin(TRIGMUX1_GPIO_Port, TRIGMUX1_Pin, GPIO_PIN_SET);		// TS5A3357 Pin6
							HAL_GPIO_WritePin(TRIGMUX2_GPIO_Port, TRIGMUX2_Pin, GPIO_PIN_RESET); 	// TS5A3357 Pin5

							// ALT FUNC PIN INIT
							GPIOA->MODER &= ~(GPIO_MODER_MODE0_0 | GPIO_MODER_MODE0_1);	// reset
							GPIOA->MODER |= (GPIO_MODER_MODE0_1);	// set port mode to AF
							GPIOA->AFR[0] &= ~((1 << 0x04) | (1 << 0x03) | (1 << 0x02) | (1 << 0x01));	// reset
							GPIOA->AFR[0] |= GPIO_AF1_TIM2;	// set alt pin function to TIM2 CH1

							// TIMER SLAVE MODE INIT
							OUTPUT_TIMER->SMCR |= (TIM_SMCR_ECE);		// enable timer external clock source
							OUTPUT_TIMER->SMCR |= (TIM_TS_TI1FP1);		// enable timer "Filtered timer input 1" (tim_ti1fp1)
							OUTPUT_TIMER->SMCR |= (TIM_SMCR_SMS_2);		// enable timer reset trigger mode

							break;
						case INPUT_TRIGGER_COMP:
							// TS5A3357 -> PA1
							HAL_GPIO_WritePin(TRIGMUX1_GPIO_Port, TRIGMUX1_Pin, GPIO_PIN_RESET);	// TS5A3357 Pin6
							HAL_GPIO_WritePin(TRIGMUX2_GPIO_Port, TRIGMUX2_Pin, GPIO_PIN_SET); 		// TS5A3357 Pin5

							//HAL_COMP_Start(&hcomp1);
							COMP1->CSR |= COMP_CSR_EN;
							// set alt pin function to COMP1 OUT
							GPIOA->AFR[0] &= ~((1 << 0x04) | (1 << 0x03) | (1 << 0x02) | (1 << 0x01));	// reset
							GPIOA->AFR[0] |= (GPIO_AF8_COMP1);

							// enable timer external clock source
							//OUTPUT_TIMER->SMCR |= (TIM_SMCR_ECE);
							// enable timer "Filtered timer input 1" (tim_ti1fp1)
							//OUTPUT_TIMER->SMCR |= (TIM_TS_TI1FP1);
							// enable timer reset trigger mode
							//OUTPUT_TIMER->SMCR |= (TIM_SMCR_SMS_2);


							// pause timer to reAux both outputs
							OUTPUT_TIMER->CR1 &= ~(TIM_CR1_CEN);
							//HAL_TIM_Base_Stop(&htim2);

							// restart the DAC with the new data
							HAL_DAC_Stop_DMA(&hdac1, DAC1_CHANNEL_1);
							HAL_DAC_Start_DMA(&hdac1, DAC1_CHANNEL_1, comp1_output_value, 1, DAC_ALIGN_12B_R);

							// resume timer to reAux both outputs
							//HAL_TIM_Base_Start(&htim2);
							OUTPUT_TIMER->CR1 |= (TIM_CR1_CEN);


							break;
						case INPUT_TRIGGER_ADC:
							// TS5A3357 -> PA2
							HAL_GPIO_WritePin(TRIGMUX1_GPIO_Port, TRIGMUX1_Pin, GPIO_PIN_SET);		// TS5A3357 Pin6
							HAL_GPIO_WritePin(TRIGMUX2_GPIO_Port, TRIGMUX2_Pin, GPIO_PIN_SET);		// TS5A3357 Pin5

							HAL_ADC_Start_DMA(&hadc1, trigger_input, TRIGGER_DATA_SIZE);

							// pause timer to reAux both outputs
							OUTPUT_TIMER->CR1 &= ~(TIM_CR1_CEN);
							//HAL_TIM_Base_Stop(&htim2);

							// restart the DAC with the new data
							HAL_DAC_Stop_DMA(&hdac1, DAC1_CHANNEL_1);
							HAL_DAC_Start_DMA(&hdac1, DAC1_CHANNEL_1, trigger_input, TRIGGER_DATA_SIZE, DAC_ALIGN_12B_R);

							// resume timer to reAux both outputs
							//HAL_TIM_Base_Start(&htim2);
							OUTPUT_TIMER->CR1 |= (TIM_CR1_CEN);

							//TODO enable ADC trigger input

							break;

						default:
							break;

					}
					// set status to enabled
					IT_SetTriggerStatus(ENABLE_TRIGGER_INPUT);
				}




				break;

			case evGreenBtn:

				IT_ChangeInputTriggerMode();

				// disable and reset the trigger input
				ToplevelInputMenuInputHandler(evBlueBtn);
				// re-enable the trigger input for new mode
				ToplevelInputMenuInputHandler(evBlueBtn);
				break;

			default:
				break;
		}
	// stay in this state
	eNewEvent = evIdle;
	return Toplevel_Input_Menu_State;
}

/*
 *
 *	@brief
 *
 *	@param None
 *	@retval None
 *
 */
eSystemState ToplevelInputMenuExitHandler()
{
	#ifdef EVENT_MENU_DEBUG
		printf("ToplevelInputMenuExitHandler Event captured\n");
	#endif

	DM_RefreshScreen();

	// disable the menu
	eNextToplevelMenuStatus = ENABLE_TOPLEVEL_MAIN_MENU;

	// back to main freq menu
	eNewEvent = evIdle;
	return Idle_State;
}
