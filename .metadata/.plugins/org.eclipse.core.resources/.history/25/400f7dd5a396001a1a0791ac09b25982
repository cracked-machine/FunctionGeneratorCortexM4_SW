/*
 * EventManager.c
 *
 *  Created on: May 8, 2020
 *      Author: chris
 */


#include "EventManager.h"
#include "DisplayManager.h"
#include "SignalManager.h"



//#include "pysine.h"

#include "dac.h"
#include "tim.h"

#include <stdio.h>
#include <string.h>

uint32_t last_enc_value = 0;

// public function prototypes
void EM_SetNewEvent(eSystemEvent pEvent);



// private function prototypes



eSystemState _BiasMenuEntryHandler();
eSystemState BiasMenuInputHandler();
eSystemState BiasMenuExitHandler();

void EM_RefreshDisplay();

uint32_t tmpDataTable[SINE_DATA_SIZE];

// state machine
eSystemState eNextState = Idle_State;
eSystemEvent eNewEvent = evIdle;


uint32_t EM_GetLastEncoderValue()
{
	return last_enc_value;
}
void EM_SetLastEncoderValue(uint32_t _value)
{
	last_enc_value = _value;
}

///////////////////////////////////////////////////////
////// 			   SYSTEM STATEMACHINE			///////
///////////////////////////////////////////////////////

/*
 *
 *	@brief
 *
 *	@param None
 *	@retval None
 *
 */
void EM_ProcessEvent()
{

	switch(eNextState)
	{

// MAIN MENU

		case Idle_State:

//			TIM1->ARR = 12;

			if(eNewEvent == evBlueBtn)
			{
				eNextState = FuncMainMenuEntryHandler();
			}
			if(eNewEvent == evGreenBtn)
			{
				eNextState = FreqMainMenuEntryHandler();
			}
			if(eNewEvent == evYellowBtn)
			{
				eNextState = GainMainMenuEntryHandler();
			}
			if(eNewEvent == evRedBtn)
			{
				eNextState = _BiasMenuEntryHandler();
			}
			break;

// FUNC MENUS

		case Func_Main_Menu_State:

			if(eNewEvent == evEncoderSet)
			{
				// No menu action
			}
			if(eNewEvent == evEncoderPush)
			{
				eNextState = FuncMainMenuExitHandler();
			}
			if(eNewEvent == evBlueBtn)
			{
				eNextState = FuncSignalMenuEntryHandler();
			}
			if(eNewEvent == evGreenBtn)
			{
				eNextState = FuncSyncMenuEntryHandler();
			}

			break;

		case Func_Signal_Menu_State:

			if(eNewEvent == evEncoderSet)
			{
				eNextState = FuncSignalMenuInputHandler();
			}
			if(eNewEvent == evEncoderPush)
			{
				eNextState = FuncSignalMenuExitHandler();
			}

			break;

		case Func_Sync_Menu_State:

			if(eNewEvent == evEncoderSet)
			{
				eNextState = FuncSyncMenuInputHandler();
			}
			if(eNewEvent == evEncoderPush)
			{
				eNextState = FuncSyncMenuExitHandler();
			}

			break;

// GAIN MENUS

		case Gain_Main_Menu_State:

			if(eNewEvent == evEncoderSet)
			{
				// No menu action
			}
			if(eNewEvent == evEncoderPush)
			{
				eNextState = GainMainMenuExitHandler();
			}
			if(eNewEvent == evBlueBtn)
			{
				eNextState = GainSignalMenuEntryHandler();
			}
			if(eNewEvent == evGreenBtn)
			{
				eNextState = GainSyncMenuEntryHandler();
			}

			break;

		case Gain_Signal_Menu_State:

			if(eNewEvent == evEncoderSet)
			{
				eNextState = GainSignalMenuInputHandler();
			}
			if(eNewEvent == evEncoderPush)
			{
				eNextState = GainSignalMenuExitHandler();
			}

			break;

		case Gain_Sync_Menu_State:

			if(eNewEvent == evEncoderSet)
			{
				eNextState = GainSyncMenuInputHandler();
			}
			if(eNewEvent == evEncoderPush)
			{
				eNextState = GainSyncMenuExitHandler();
			}

			break;

// FREQ MENUS

		case Freq_Main_Menu_State:

			if(eNewEvent == evEncoderPush)
			{
				eNextState = FreqMainMenuExitHandler();
			}
			if(eNewEvent == evBlueBtn)
			{
				eNextState = FreqPresetMenuEntryHandler();
			}
			if(eNewEvent == evGreenBtn)
			{
				eNextState = FreqAdjustMenuEntryHandler();
			}
			if(eNewEvent == evYellowBtn)
			{
				eNextState = FreqSweepMenuEntryHandler();
			}

			break;

		case Freq_Preset_Menu_State:
			if(eNewEvent == evEncoderSet)
			{
				eNextState = FreqPresetMenuInputHandler();
			}
			if(eNewEvent == evEncoderPush)
			{
				eNextState = FreqPresetMenuExitHandler();
			}
			break;

		case Freq_Adjust_Menu_State:
			if(eNewEvent == evEncoderSet)
			{
				eNextState = FreqAdjustMenuInputHandler();
			}
			if(eNewEvent == evEncoderPush)
			{
				eNextState = FreqAdjustMenuExitHandler();
			}
			break;

		case Freq_Sweep_Menu_State:

			if(eNewEvent == evEncoderPush)
			{
				eNextState = FreqSweepMenuExitHandler();
			}
			break;

// BIAS MENUS

		case Bias_Menu_State:
			if(eNewEvent == evEncoderSet)
			{
				eNextState = BiasMenuInputHandler();
			}
			if(eNewEvent == evEncoderPush)
			{
				eNextState = BiasMenuExitHandler();
			}

			break;

		default:
			break;
	}

}






/*
 *
 *	@brief
 *
 *	@param None
 *	@retval None
 *
 */
void EM_SetNewEvent(eSystemEvent pEvent)
{
	eNewEvent = pEvent;
}


/*
 *
 *	@brief
 *
 *	@param None
 *	@retval None
 *
 */
eSystemState EM_GetSystemState()
{
	return eNextState;
}


/*
 *
 *	@brief
 *
 *	@param None
 *	@retval None
 *
 */
void EM_RefreshDisplay()
{
	// don't let the DisplayManager interrupt the LCD refresh
	HAL_TIM_Base_Stop_IT(&htim15);
	{
		DM_RefreshBackgroundLayout();
	}
	HAL_TIM_Base_Start_IT(&htim15);
}




