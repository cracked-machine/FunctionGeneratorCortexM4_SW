
FunctionGeneratorCortexM4_SW_V1.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000732c  080001d8  080001d8  000101d8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000002e4  08007504  08007504  00017504  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080077e8  080077e8  00020078  2**0
                  CONTENTS
  4 .ARM          00000000  080077e8  080077e8  00020078  2**0
                  CONTENTS
  5 .preinit_array 00000000  080077e8  080077e8  00020078  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080077e8  080077e8  000177e8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080077ec  080077ec  000177ec  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000078  20000000  080077f0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000002f8  20000078  08007868  00020078  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000370  08007868  00020370  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020078  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001f489  00000000  00000000  000200a8  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00003f04  00000000  00000000  0003f531  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00001978  00000000  00000000  00043438  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00001760  00000000  00000000  00044db0  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  0002bf95  00000000  00000000  00046510  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   00018048  00000000  00000000  000724a5  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    001179b8  00000000  00000000  0008a4ed  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  001a1ea5  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00006fa0  00000000  00000000  001a1f20  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001d8 <__do_global_dtors_aux>:
 80001d8:	b510      	push	{r4, lr}
 80001da:	4c05      	ldr	r4, [pc, #20]	; (80001f0 <__do_global_dtors_aux+0x18>)
 80001dc:	7823      	ldrb	r3, [r4, #0]
 80001de:	b933      	cbnz	r3, 80001ee <__do_global_dtors_aux+0x16>
 80001e0:	4b04      	ldr	r3, [pc, #16]	; (80001f4 <__do_global_dtors_aux+0x1c>)
 80001e2:	b113      	cbz	r3, 80001ea <__do_global_dtors_aux+0x12>
 80001e4:	4804      	ldr	r0, [pc, #16]	; (80001f8 <__do_global_dtors_aux+0x20>)
 80001e6:	f3af 8000 	nop.w
 80001ea:	2301      	movs	r3, #1
 80001ec:	7023      	strb	r3, [r4, #0]
 80001ee:	bd10      	pop	{r4, pc}
 80001f0:	20000078 	.word	0x20000078
 80001f4:	00000000 	.word	0x00000000
 80001f8:	080074ec 	.word	0x080074ec

080001fc <frame_dummy>:
 80001fc:	b508      	push	{r3, lr}
 80001fe:	4b03      	ldr	r3, [pc, #12]	; (800020c <frame_dummy+0x10>)
 8000200:	b11b      	cbz	r3, 800020a <frame_dummy+0xe>
 8000202:	4903      	ldr	r1, [pc, #12]	; (8000210 <frame_dummy+0x14>)
 8000204:	4803      	ldr	r0, [pc, #12]	; (8000214 <frame_dummy+0x18>)
 8000206:	f3af 8000 	nop.w
 800020a:	bd08      	pop	{r3, pc}
 800020c:	00000000 	.word	0x00000000
 8000210:	2000007c 	.word	0x2000007c
 8000214:	080074ec 	.word	0x080074ec

08000218 <MX_ADC1_Init>:
ADC_HandleTypeDef hadc1;
DMA_HandleTypeDef hdma_adc1;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 8000218:	b580      	push	{r7, lr}
 800021a:	b08c      	sub	sp, #48	; 0x30
 800021c:	af00      	add	r7, sp, #0
  ADC_MultiModeTypeDef multimode = {0};
 800021e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000222:	2200      	movs	r2, #0
 8000224:	601a      	str	r2, [r3, #0]
 8000226:	605a      	str	r2, [r3, #4]
 8000228:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 800022a:	1d3b      	adds	r3, r7, #4
 800022c:	2220      	movs	r2, #32
 800022e:	2100      	movs	r1, #0
 8000230:	4618      	mov	r0, r3
 8000232:	f006 fceb 	bl	8006c0c <memset>

  /** Common config 
  */
  hadc1.Instance = ADC1;
 8000236:	4b32      	ldr	r3, [pc, #200]	; (8000300 <MX_ADC1_Init+0xe8>)
 8000238:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 800023c:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 800023e:	4b30      	ldr	r3, [pc, #192]	; (8000300 <MX_ADC1_Init+0xe8>)
 8000240:	2200      	movs	r2, #0
 8000242:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8000244:	4b2e      	ldr	r3, [pc, #184]	; (8000300 <MX_ADC1_Init+0xe8>)
 8000246:	2200      	movs	r2, #0
 8000248:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800024a:	4b2d      	ldr	r3, [pc, #180]	; (8000300 <MX_ADC1_Init+0xe8>)
 800024c:	2200      	movs	r2, #0
 800024e:	60da      	str	r2, [r3, #12]
  hadc1.Init.GainCompensation = 0;
 8000250:	4b2b      	ldr	r3, [pc, #172]	; (8000300 <MX_ADC1_Init+0xe8>)
 8000252:	2200      	movs	r2, #0
 8000254:	611a      	str	r2, [r3, #16]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8000256:	4b2a      	ldr	r3, [pc, #168]	; (8000300 <MX_ADC1_Init+0xe8>)
 8000258:	2200      	movs	r2, #0
 800025a:	615a      	str	r2, [r3, #20]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 800025c:	4b28      	ldr	r3, [pc, #160]	; (8000300 <MX_ADC1_Init+0xe8>)
 800025e:	2204      	movs	r2, #4
 8000260:	619a      	str	r2, [r3, #24]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8000262:	4b27      	ldr	r3, [pc, #156]	; (8000300 <MX_ADC1_Init+0xe8>)
 8000264:	2200      	movs	r2, #0
 8000266:	771a      	strb	r2, [r3, #28]
  hadc1.Init.ContinuousConvMode = ENABLE;
 8000268:	4b25      	ldr	r3, [pc, #148]	; (8000300 <MX_ADC1_Init+0xe8>)
 800026a:	2201      	movs	r2, #1
 800026c:	775a      	strb	r2, [r3, #29]
  hadc1.Init.NbrOfConversion = 1;
 800026e:	4b24      	ldr	r3, [pc, #144]	; (8000300 <MX_ADC1_Init+0xe8>)
 8000270:	2201      	movs	r2, #1
 8000272:	621a      	str	r2, [r3, #32]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000274:	4b22      	ldr	r3, [pc, #136]	; (8000300 <MX_ADC1_Init+0xe8>)
 8000276:	2200      	movs	r2, #0
 8000278:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 800027c:	4b20      	ldr	r3, [pc, #128]	; (8000300 <MX_ADC1_Init+0xe8>)
 800027e:	2200      	movs	r2, #0
 8000280:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000282:	4b1f      	ldr	r3, [pc, #124]	; (8000300 <MX_ADC1_Init+0xe8>)
 8000284:	2200      	movs	r2, #0
 8000286:	631a      	str	r2, [r3, #48]	; 0x30
  hadc1.Init.DMAContinuousRequests = ENABLE;
 8000288:	4b1d      	ldr	r3, [pc, #116]	; (8000300 <MX_ADC1_Init+0xe8>)
 800028a:	2201      	movs	r2, #1
 800028c:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hadc1.Init.Overrun = ADC_OVR_DATA_OVERWRITTEN;
 8000290:	4b1b      	ldr	r3, [pc, #108]	; (8000300 <MX_ADC1_Init+0xe8>)
 8000292:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8000296:	63da      	str	r2, [r3, #60]	; 0x3c
  hadc1.Init.OversamplingMode = DISABLE;
 8000298:	4b19      	ldr	r3, [pc, #100]	; (8000300 <MX_ADC1_Init+0xe8>)
 800029a:	2200      	movs	r2, #0
 800029c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80002a0:	4817      	ldr	r0, [pc, #92]	; (8000300 <MX_ADC1_Init+0xe8>)
 80002a2:	f001 fb27 	bl	80018f4 <HAL_ADC_Init>
 80002a6:	4603      	mov	r3, r0
 80002a8:	2b00      	cmp	r3, #0
 80002aa:	d001      	beq.n	80002b0 <MX_ADC1_Init+0x98>
  {
    Error_Handler();
 80002ac:	f000 fcad 	bl	8000c0a <Error_Handler>
  }
  /** Configure the ADC multi-mode 
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 80002b0:	2300      	movs	r3, #0
 80002b2:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 80002b4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80002b8:	4619      	mov	r1, r3
 80002ba:	4811      	ldr	r0, [pc, #68]	; (8000300 <MX_ADC1_Init+0xe8>)
 80002bc:	f002 f8b0 	bl	8002420 <HAL_ADCEx_MultiModeConfigChannel>
 80002c0:	4603      	mov	r3, r0
 80002c2:	2b00      	cmp	r3, #0
 80002c4:	d001      	beq.n	80002ca <MX_ADC1_Init+0xb2>
  {
    Error_Handler();
 80002c6:	f000 fca0 	bl	8000c0a <Error_Handler>
  }
  /** Configure Regular Channel 
  */
  sConfig.Channel = ADC_CHANNEL_3;
 80002ca:	4b0e      	ldr	r3, [pc, #56]	; (8000304 <MX_ADC1_Init+0xec>)
 80002cc:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 80002ce:	2306      	movs	r3, #6
 80002d0:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 80002d2:	2300      	movs	r3, #0
 80002d4:	60fb      	str	r3, [r7, #12]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 80002d6:	237f      	movs	r3, #127	; 0x7f
 80002d8:	613b      	str	r3, [r7, #16]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 80002da:	2304      	movs	r3, #4
 80002dc:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 80002de:	2300      	movs	r3, #0
 80002e0:	61bb      	str	r3, [r7, #24]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80002e2:	1d3b      	adds	r3, r7, #4
 80002e4:	4619      	mov	r1, r3
 80002e6:	4806      	ldr	r0, [pc, #24]	; (8000300 <MX_ADC1_Init+0xe8>)
 80002e8:	f001 fcc4 	bl	8001c74 <HAL_ADC_ConfigChannel>
 80002ec:	4603      	mov	r3, r0
 80002ee:	2b00      	cmp	r3, #0
 80002f0:	d001      	beq.n	80002f6 <MX_ADC1_Init+0xde>
  {
    Error_Handler();
 80002f2:	f000 fc8a 	bl	8000c0a <Error_Handler>
  }

}
 80002f6:	bf00      	nop
 80002f8:	3730      	adds	r7, #48	; 0x30
 80002fa:	46bd      	mov	sp, r7
 80002fc:	bd80      	pop	{r7, pc}
 80002fe:	bf00      	nop
 8000300:	200000a8 	.word	0x200000a8
 8000304:	0c900008 	.word	0x0c900008

08000308 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 8000308:	b580      	push	{r7, lr}
 800030a:	b08a      	sub	sp, #40	; 0x28
 800030c:	af00      	add	r7, sp, #0
 800030e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000310:	f107 0314 	add.w	r3, r7, #20
 8000314:	2200      	movs	r2, #0
 8000316:	601a      	str	r2, [r3, #0]
 8000318:	605a      	str	r2, [r3, #4]
 800031a:	609a      	str	r2, [r3, #8]
 800031c:	60da      	str	r2, [r3, #12]
 800031e:	611a      	str	r2, [r3, #16]
  if(adcHandle->Instance==ADC1)
 8000320:	687b      	ldr	r3, [r7, #4]
 8000322:	681b      	ldr	r3, [r3, #0]
 8000324:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8000328:	d14f      	bne.n	80003ca <HAL_ADC_MspInit+0xc2>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* ADC1 clock enable */
    __HAL_RCC_ADC12_CLK_ENABLE();
 800032a:	4b2a      	ldr	r3, [pc, #168]	; (80003d4 <HAL_ADC_MspInit+0xcc>)
 800032c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800032e:	4a29      	ldr	r2, [pc, #164]	; (80003d4 <HAL_ADC_MspInit+0xcc>)
 8000330:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8000334:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000336:	4b27      	ldr	r3, [pc, #156]	; (80003d4 <HAL_ADC_MspInit+0xcc>)
 8000338:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800033a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800033e:	613b      	str	r3, [r7, #16]
 8000340:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000342:	4b24      	ldr	r3, [pc, #144]	; (80003d4 <HAL_ADC_MspInit+0xcc>)
 8000344:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000346:	4a23      	ldr	r2, [pc, #140]	; (80003d4 <HAL_ADC_MspInit+0xcc>)
 8000348:	f043 0301 	orr.w	r3, r3, #1
 800034c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800034e:	4b21      	ldr	r3, [pc, #132]	; (80003d4 <HAL_ADC_MspInit+0xcc>)
 8000350:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000352:	f003 0301 	and.w	r3, r3, #1
 8000356:	60fb      	str	r3, [r7, #12]
 8000358:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration    
    PA2     ------> ADC1_IN3 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 800035a:	2304      	movs	r3, #4
 800035c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800035e:	2303      	movs	r3, #3
 8000360:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000362:	2300      	movs	r3, #0
 8000364:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000366:	f107 0314 	add.w	r3, r7, #20
 800036a:	4619      	mov	r1, r3
 800036c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000370:	f003 f988 	bl	8003684 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Channel1;
 8000374:	4b18      	ldr	r3, [pc, #96]	; (80003d8 <HAL_ADC_MspInit+0xd0>)
 8000376:	4a19      	ldr	r2, [pc, #100]	; (80003dc <HAL_ADC_MspInit+0xd4>)
 8000378:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Request = DMA_REQUEST_ADC1;
 800037a:	4b17      	ldr	r3, [pc, #92]	; (80003d8 <HAL_ADC_MspInit+0xd0>)
 800037c:	2205      	movs	r2, #5
 800037e:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000380:	4b15      	ldr	r3, [pc, #84]	; (80003d8 <HAL_ADC_MspInit+0xd0>)
 8000382:	2200      	movs	r2, #0
 8000384:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8000386:	4b14      	ldr	r3, [pc, #80]	; (80003d8 <HAL_ADC_MspInit+0xd0>)
 8000388:	2200      	movs	r2, #0
 800038a:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 800038c:	4b12      	ldr	r3, [pc, #72]	; (80003d8 <HAL_ADC_MspInit+0xd0>)
 800038e:	2280      	movs	r2, #128	; 0x80
 8000390:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8000392:	4b11      	ldr	r3, [pc, #68]	; (80003d8 <HAL_ADC_MspInit+0xd0>)
 8000394:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000398:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 800039a:	4b0f      	ldr	r3, [pc, #60]	; (80003d8 <HAL_ADC_MspInit+0xd0>)
 800039c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80003a0:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 80003a2:	4b0d      	ldr	r3, [pc, #52]	; (80003d8 <HAL_ADC_MspInit+0xd0>)
 80003a4:	2220      	movs	r2, #32
 80003a6:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 80003a8:	4b0b      	ldr	r3, [pc, #44]	; (80003d8 <HAL_ADC_MspInit+0xd0>)
 80003aa:	2200      	movs	r2, #0
 80003ac:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 80003ae:	480a      	ldr	r0, [pc, #40]	; (80003d8 <HAL_ADC_MspInit+0xd0>)
 80003b0:	f002 ffae 	bl	8003310 <HAL_DMA_Init>
 80003b4:	4603      	mov	r3, r0
 80003b6:	2b00      	cmp	r3, #0
 80003b8:	d001      	beq.n	80003be <HAL_ADC_MspInit+0xb6>
    {
      Error_Handler();
 80003ba:	f000 fc26 	bl	8000c0a <Error_Handler>
    }

    __HAL_LINKDMA(adcHandle,DMA_Handle,hdma_adc1);
 80003be:	687b      	ldr	r3, [r7, #4]
 80003c0:	4a05      	ldr	r2, [pc, #20]	; (80003d8 <HAL_ADC_MspInit+0xd0>)
 80003c2:	655a      	str	r2, [r3, #84]	; 0x54
 80003c4:	4a04      	ldr	r2, [pc, #16]	; (80003d8 <HAL_ADC_MspInit+0xd0>)
 80003c6:	687b      	ldr	r3, [r7, #4]
 80003c8:	6293      	str	r3, [r2, #40]	; 0x28

  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 80003ca:	bf00      	nop
 80003cc:	3728      	adds	r7, #40	; 0x28
 80003ce:	46bd      	mov	sp, r7
 80003d0:	bd80      	pop	{r7, pc}
 80003d2:	bf00      	nop
 80003d4:	40021000 	.word	0x40021000
 80003d8:	20000114 	.word	0x20000114
 80003dc:	40020008 	.word	0x40020008

080003e0 <MX_COMP1_Init>:

COMP_HandleTypeDef hcomp1;

/* COMP1 init function */
void MX_COMP1_Init(void)
{
 80003e0:	b580      	push	{r7, lr}
 80003e2:	af00      	add	r7, sp, #0

  hcomp1.Instance = COMP1;
 80003e4:	4b0f      	ldr	r3, [pc, #60]	; (8000424 <MX_COMP1_Init+0x44>)
 80003e6:	4a10      	ldr	r2, [pc, #64]	; (8000428 <MX_COMP1_Init+0x48>)
 80003e8:	601a      	str	r2, [r3, #0]
  hcomp1.Init.InputPlus = COMP_INPUT_PLUS_IO1;
 80003ea:	4b0e      	ldr	r3, [pc, #56]	; (8000424 <MX_COMP1_Init+0x44>)
 80003ec:	2200      	movs	r2, #0
 80003ee:	605a      	str	r2, [r3, #4]
  hcomp1.Init.InputMinus = COMP_INPUT_MINUS_VREFINT;
 80003f0:	4b0c      	ldr	r3, [pc, #48]	; (8000424 <MX_COMP1_Init+0x44>)
 80003f2:	4a0e      	ldr	r2, [pc, #56]	; (800042c <MX_COMP1_Init+0x4c>)
 80003f4:	609a      	str	r2, [r3, #8]
  hcomp1.Init.OutputPol = COMP_OUTPUTPOL_NONINVERTED;
 80003f6:	4b0b      	ldr	r3, [pc, #44]	; (8000424 <MX_COMP1_Init+0x44>)
 80003f8:	2200      	movs	r2, #0
 80003fa:	611a      	str	r2, [r3, #16]
  hcomp1.Init.Hysteresis = COMP_HYSTERESIS_NONE;
 80003fc:	4b09      	ldr	r3, [pc, #36]	; (8000424 <MX_COMP1_Init+0x44>)
 80003fe:	2200      	movs	r2, #0
 8000400:	60da      	str	r2, [r3, #12]
  hcomp1.Init.BlankingSrce = COMP_BLANKINGSRC_NONE;
 8000402:	4b08      	ldr	r3, [pc, #32]	; (8000424 <MX_COMP1_Init+0x44>)
 8000404:	2200      	movs	r2, #0
 8000406:	615a      	str	r2, [r3, #20]
  hcomp1.Init.TriggerMode = COMP_TRIGGERMODE_NONE;
 8000408:	4b06      	ldr	r3, [pc, #24]	; (8000424 <MX_COMP1_Init+0x44>)
 800040a:	2200      	movs	r2, #0
 800040c:	619a      	str	r2, [r3, #24]
  if (HAL_COMP_Init(&hcomp1) != HAL_OK)
 800040e:	4805      	ldr	r0, [pc, #20]	; (8000424 <MX_COMP1_Init+0x44>)
 8000410:	f002 fa5a 	bl	80028c8 <HAL_COMP_Init>
 8000414:	4603      	mov	r3, r0
 8000416:	2b00      	cmp	r3, #0
 8000418:	d001      	beq.n	800041e <MX_COMP1_Init+0x3e>
  {
    Error_Handler();
 800041a:	f000 fbf6 	bl	8000c0a <Error_Handler>
  }

}
 800041e:	bf00      	nop
 8000420:	bd80      	pop	{r7, pc}
 8000422:	bf00      	nop
 8000424:	20000174 	.word	0x20000174
 8000428:	40010200 	.word	0x40010200
 800042c:	00800030 	.word	0x00800030

08000430 <HAL_COMP_MspInit>:

void HAL_COMP_MspInit(COMP_HandleTypeDef* compHandle)
{
 8000430:	b580      	push	{r7, lr}
 8000432:	b088      	sub	sp, #32
 8000434:	af00      	add	r7, sp, #0
 8000436:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000438:	f107 030c 	add.w	r3, r7, #12
 800043c:	2200      	movs	r2, #0
 800043e:	601a      	str	r2, [r3, #0]
 8000440:	605a      	str	r2, [r3, #4]
 8000442:	609a      	str	r2, [r3, #8]
 8000444:	60da      	str	r2, [r3, #12]
 8000446:	611a      	str	r2, [r3, #16]
  if(compHandle->Instance==COMP1)
 8000448:	687b      	ldr	r3, [r7, #4]
 800044a:	681b      	ldr	r3, [r3, #0]
 800044c:	4a0f      	ldr	r2, [pc, #60]	; (800048c <HAL_COMP_MspInit+0x5c>)
 800044e:	4293      	cmp	r3, r2
 8000450:	d118      	bne.n	8000484 <HAL_COMP_MspInit+0x54>
  {
  /* USER CODE BEGIN COMP1_MspInit 0 */

  /* USER CODE END COMP1_MspInit 0 */
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000452:	4b0f      	ldr	r3, [pc, #60]	; (8000490 <HAL_COMP_MspInit+0x60>)
 8000454:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000456:	4a0e      	ldr	r2, [pc, #56]	; (8000490 <HAL_COMP_MspInit+0x60>)
 8000458:	f043 0301 	orr.w	r3, r3, #1
 800045c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800045e:	4b0c      	ldr	r3, [pc, #48]	; (8000490 <HAL_COMP_MspInit+0x60>)
 8000460:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000462:	f003 0301 	and.w	r3, r3, #1
 8000466:	60bb      	str	r3, [r7, #8]
 8000468:	68bb      	ldr	r3, [r7, #8]
    /**COMP1 GPIO Configuration    
    PA1     ------> COMP1_INP 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 800046a:	2302      	movs	r3, #2
 800046c:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800046e:	2303      	movs	r3, #3
 8000470:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000472:	2300      	movs	r3, #0
 8000474:	617b      	str	r3, [r7, #20]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000476:	f107 030c 	add.w	r3, r7, #12
 800047a:	4619      	mov	r1, r3
 800047c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000480:	f003 f900 	bl	8003684 <HAL_GPIO_Init>

  /* USER CODE BEGIN COMP1_MspInit 1 */

  /* USER CODE END COMP1_MspInit 1 */
  }
}
 8000484:	bf00      	nop
 8000486:	3720      	adds	r7, #32
 8000488:	46bd      	mov	sp, r7
 800048a:	bd80      	pop	{r7, pc}
 800048c:	40010200 	.word	0x40010200
 8000490:	40021000 	.word	0x40021000

08000494 <MX_DAC1_Init>:
DAC_HandleTypeDef hdac1;
DAC_HandleTypeDef hdac2;

/* DAC1 init function */
void MX_DAC1_Init(void)
{
 8000494:	b580      	push	{r7, lr}
 8000496:	b08c      	sub	sp, #48	; 0x30
 8000498:	af00      	add	r7, sp, #0
  DAC_ChannelConfTypeDef sConfig = {0};
 800049a:	463b      	mov	r3, r7
 800049c:	2230      	movs	r2, #48	; 0x30
 800049e:	2100      	movs	r1, #0
 80004a0:	4618      	mov	r0, r3
 80004a2:	f006 fbb3 	bl	8006c0c <memset>

  /** DAC Initialization 
  */
  hdac1.Instance = DAC1;
 80004a6:	4b23      	ldr	r3, [pc, #140]	; (8000534 <MX_DAC1_Init+0xa0>)
 80004a8:	4a23      	ldr	r2, [pc, #140]	; (8000538 <MX_DAC1_Init+0xa4>)
 80004aa:	601a      	str	r2, [r3, #0]
  if (HAL_DAC_Init(&hdac1) != HAL_OK)
 80004ac:	4821      	ldr	r0, [pc, #132]	; (8000534 <MX_DAC1_Init+0xa0>)
 80004ae:	f002 fcae 	bl	8002e0e <HAL_DAC_Init>
 80004b2:	4603      	mov	r3, r0
 80004b4:	2b00      	cmp	r3, #0
 80004b6:	d001      	beq.n	80004bc <MX_DAC1_Init+0x28>
  {
    Error_Handler();
 80004b8:	f000 fba7 	bl	8000c0a <Error_Handler>
  }
  /** DAC channel OUT1 config 
  */
  sConfig.DAC_HighFrequency = DAC_HIGH_FREQUENCY_INTERFACE_MODE_AUTOMATIC;
 80004bc:	2302      	movs	r3, #2
 80004be:	603b      	str	r3, [r7, #0]
  sConfig.DAC_DMADoubleDataMode = DISABLE;
 80004c0:	2300      	movs	r3, #0
 80004c2:	713b      	strb	r3, [r7, #4]
  sConfig.DAC_SignedFormat = DISABLE;
 80004c4:	2300      	movs	r3, #0
 80004c6:	717b      	strb	r3, [r7, #5]
  sConfig.DAC_SampleAndHold = DAC_SAMPLEANDHOLD_DISABLE;
 80004c8:	2300      	movs	r3, #0
 80004ca:	60bb      	str	r3, [r7, #8]
  sConfig.DAC_Trigger = DAC_TRIGGER_T6_TRGO;
 80004cc:	231e      	movs	r3, #30
 80004ce:	60fb      	str	r3, [r7, #12]
  sConfig.DAC_Trigger2 = DAC_TRIGGER_NONE;
 80004d0:	2300      	movs	r3, #0
 80004d2:	613b      	str	r3, [r7, #16]
  sConfig.DAC_OutputBuffer = DAC_OUTPUTBUFFER_ENABLE;
 80004d4:	2300      	movs	r3, #0
 80004d6:	617b      	str	r3, [r7, #20]
  sConfig.DAC_ConnectOnChipPeripheral = DAC_CHIPCONNECT_DISABLE;
 80004d8:	2301      	movs	r3, #1
 80004da:	61bb      	str	r3, [r7, #24]
  sConfig.DAC_UserTrimming = DAC_TRIMMING_FACTORY;
 80004dc:	2300      	movs	r3, #0
 80004de:	61fb      	str	r3, [r7, #28]
  if (HAL_DAC_ConfigChannel(&hdac1, &sConfig, DAC_CHANNEL_1) != HAL_OK)
 80004e0:	463b      	mov	r3, r7
 80004e2:	2200      	movs	r2, #0
 80004e4:	4619      	mov	r1, r3
 80004e6:	4813      	ldr	r0, [pc, #76]	; (8000534 <MX_DAC1_Init+0xa0>)
 80004e8:	f002 fd2e 	bl	8002f48 <HAL_DAC_ConfigChannel>
 80004ec:	4603      	mov	r3, r0
 80004ee:	2b00      	cmp	r3, #0
 80004f0:	d001      	beq.n	80004f6 <MX_DAC1_Init+0x62>
  {
    Error_Handler();
 80004f2:	f000 fb8a 	bl	8000c0a <Error_Handler>
  }
  /** Configure Triangle wave generation on DAC OUT1 
  */
  if (HAL_DACEx_TriangleWaveGenerate(&hdac1, DAC_CHANNEL_1, DAC_TRIANGLEAMPLITUDE_4095) != HAL_OK)
 80004f6:	f44f 6230 	mov.w	r2, #2816	; 0xb00
 80004fa:	2100      	movs	r1, #0
 80004fc:	480d      	ldr	r0, [pc, #52]	; (8000534 <MX_DAC1_Init+0xa0>)
 80004fe:	f002 fecf 	bl	80032a0 <HAL_DACEx_TriangleWaveGenerate>
 8000502:	4603      	mov	r3, r0
 8000504:	2b00      	cmp	r3, #0
 8000506:	d001      	beq.n	800050c <MX_DAC1_Init+0x78>
  {
    Error_Handler();
 8000508:	f000 fb7f 	bl	8000c0a <Error_Handler>
  }
  /** DAC channel OUT2 config 
  */
  sConfig.DAC_Trigger = DAC_TRIGGER_NONE;
 800050c:	2300      	movs	r3, #0
 800050e:	60fb      	str	r3, [r7, #12]
  sConfig.DAC_ConnectOnChipPeripheral = DAC_CHIPCONNECT_DISABLE;
 8000510:	2301      	movs	r3, #1
 8000512:	61bb      	str	r3, [r7, #24]
  if (HAL_DAC_ConfigChannel(&hdac1, &sConfig, DAC_CHANNEL_2) != HAL_OK)
 8000514:	463b      	mov	r3, r7
 8000516:	2210      	movs	r2, #16
 8000518:	4619      	mov	r1, r3
 800051a:	4806      	ldr	r0, [pc, #24]	; (8000534 <MX_DAC1_Init+0xa0>)
 800051c:	f002 fd14 	bl	8002f48 <HAL_DAC_ConfigChannel>
 8000520:	4603      	mov	r3, r0
 8000522:	2b00      	cmp	r3, #0
 8000524:	d001      	beq.n	800052a <MX_DAC1_Init+0x96>
  {
    Error_Handler();
 8000526:	f000 fb70 	bl	8000c0a <Error_Handler>
  }

}
 800052a:	bf00      	nop
 800052c:	3730      	adds	r7, #48	; 0x30
 800052e:	46bd      	mov	sp, r7
 8000530:	bd80      	pop	{r7, pc}
 8000532:	bf00      	nop
 8000534:	200001ac 	.word	0x200001ac
 8000538:	50000800 	.word	0x50000800

0800053c <MX_DAC2_Init>:
/* DAC2 init function */
void MX_DAC2_Init(void)
{
 800053c:	b580      	push	{r7, lr}
 800053e:	b08c      	sub	sp, #48	; 0x30
 8000540:	af00      	add	r7, sp, #0
  DAC_ChannelConfTypeDef sConfig = {0};
 8000542:	463b      	mov	r3, r7
 8000544:	2230      	movs	r2, #48	; 0x30
 8000546:	2100      	movs	r1, #0
 8000548:	4618      	mov	r0, r3
 800054a:	f006 fb5f 	bl	8006c0c <memset>

  /** DAC Initialization 
  */
  hdac2.Instance = DAC2;
 800054e:	4b1b      	ldr	r3, [pc, #108]	; (80005bc <MX_DAC2_Init+0x80>)
 8000550:	4a1b      	ldr	r2, [pc, #108]	; (80005c0 <MX_DAC2_Init+0x84>)
 8000552:	601a      	str	r2, [r3, #0]
  if (HAL_DAC_Init(&hdac2) != HAL_OK)
 8000554:	4819      	ldr	r0, [pc, #100]	; (80005bc <MX_DAC2_Init+0x80>)
 8000556:	f002 fc5a 	bl	8002e0e <HAL_DAC_Init>
 800055a:	4603      	mov	r3, r0
 800055c:	2b00      	cmp	r3, #0
 800055e:	d001      	beq.n	8000564 <MX_DAC2_Init+0x28>
  {
    Error_Handler();
 8000560:	f000 fb53 	bl	8000c0a <Error_Handler>
  }
  /** DAC channel OUT1 config 
  */
  sConfig.DAC_HighFrequency = DAC_HIGH_FREQUENCY_INTERFACE_MODE_AUTOMATIC;
 8000564:	2302      	movs	r3, #2
 8000566:	603b      	str	r3, [r7, #0]
  sConfig.DAC_DMADoubleDataMode = DISABLE;
 8000568:	2300      	movs	r3, #0
 800056a:	713b      	strb	r3, [r7, #4]
  sConfig.DAC_SignedFormat = DISABLE;
 800056c:	2300      	movs	r3, #0
 800056e:	717b      	strb	r3, [r7, #5]
  sConfig.DAC_SampleAndHold = DAC_SAMPLEANDHOLD_DISABLE;
 8000570:	2300      	movs	r3, #0
 8000572:	60bb      	str	r3, [r7, #8]
  sConfig.DAC_Trigger = DAC_TRIGGER_T6_TRGO;
 8000574:	231e      	movs	r3, #30
 8000576:	60fb      	str	r3, [r7, #12]
  sConfig.DAC_Trigger2 = DAC_TRIGGER_NONE;
 8000578:	2300      	movs	r3, #0
 800057a:	613b      	str	r3, [r7, #16]
  sConfig.DAC_OutputBuffer = DAC_OUTPUTBUFFER_ENABLE;
 800057c:	2300      	movs	r3, #0
 800057e:	617b      	str	r3, [r7, #20]
  sConfig.DAC_ConnectOnChipPeripheral = DAC_CHIPCONNECT_DISABLE;
 8000580:	2301      	movs	r3, #1
 8000582:	61bb      	str	r3, [r7, #24]
  sConfig.DAC_UserTrimming = DAC_TRIMMING_FACTORY;
 8000584:	2300      	movs	r3, #0
 8000586:	61fb      	str	r3, [r7, #28]
  if (HAL_DAC_ConfigChannel(&hdac2, &sConfig, DAC_CHANNEL_1) != HAL_OK)
 8000588:	463b      	mov	r3, r7
 800058a:	2200      	movs	r2, #0
 800058c:	4619      	mov	r1, r3
 800058e:	480b      	ldr	r0, [pc, #44]	; (80005bc <MX_DAC2_Init+0x80>)
 8000590:	f002 fcda 	bl	8002f48 <HAL_DAC_ConfigChannel>
 8000594:	4603      	mov	r3, r0
 8000596:	2b00      	cmp	r3, #0
 8000598:	d001      	beq.n	800059e <MX_DAC2_Init+0x62>
  {
    Error_Handler();
 800059a:	f000 fb36 	bl	8000c0a <Error_Handler>
  }
  /** Configure Triangle wave generation on DAC OUT1 
  */
  if (HAL_DACEx_TriangleWaveGenerate(&hdac2, DAC_CHANNEL_1, DAC_TRIANGLEAMPLITUDE_4095) != HAL_OK)
 800059e:	f44f 6230 	mov.w	r2, #2816	; 0xb00
 80005a2:	2100      	movs	r1, #0
 80005a4:	4805      	ldr	r0, [pc, #20]	; (80005bc <MX_DAC2_Init+0x80>)
 80005a6:	f002 fe7b 	bl	80032a0 <HAL_DACEx_TriangleWaveGenerate>
 80005aa:	4603      	mov	r3, r0
 80005ac:	2b00      	cmp	r3, #0
 80005ae:	d001      	beq.n	80005b4 <MX_DAC2_Init+0x78>
  {
    Error_Handler();
 80005b0:	f000 fb2b 	bl	8000c0a <Error_Handler>
  }

}
 80005b4:	bf00      	nop
 80005b6:	3730      	adds	r7, #48	; 0x30
 80005b8:	46bd      	mov	sp, r7
 80005ba:	bd80      	pop	{r7, pc}
 80005bc:	20000198 	.word	0x20000198
 80005c0:	50000c00 	.word	0x50000c00

080005c4 <HAL_DAC_MspInit>:

void HAL_DAC_MspInit(DAC_HandleTypeDef* dacHandle)
{
 80005c4:	b580      	push	{r7, lr}
 80005c6:	b08c      	sub	sp, #48	; 0x30
 80005c8:	af00      	add	r7, sp, #0
 80005ca:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80005cc:	f107 031c 	add.w	r3, r7, #28
 80005d0:	2200      	movs	r2, #0
 80005d2:	601a      	str	r2, [r3, #0]
 80005d4:	605a      	str	r2, [r3, #4]
 80005d6:	609a      	str	r2, [r3, #8]
 80005d8:	60da      	str	r2, [r3, #12]
 80005da:	611a      	str	r2, [r3, #16]
  if(dacHandle->Instance==DAC1)
 80005dc:	687b      	ldr	r3, [r7, #4]
 80005de:	681b      	ldr	r3, [r3, #0]
 80005e0:	4a2b      	ldr	r2, [pc, #172]	; (8000690 <HAL_DAC_MspInit+0xcc>)
 80005e2:	4293      	cmp	r3, r2
 80005e4:	d125      	bne.n	8000632 <HAL_DAC_MspInit+0x6e>
  {
  /* USER CODE BEGIN DAC1_MspInit 0 */

  /* USER CODE END DAC1_MspInit 0 */
    /* DAC1 clock enable */
    __HAL_RCC_DAC1_CLK_ENABLE();
 80005e6:	4b2b      	ldr	r3, [pc, #172]	; (8000694 <HAL_DAC_MspInit+0xd0>)
 80005e8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80005ea:	4a2a      	ldr	r2, [pc, #168]	; (8000694 <HAL_DAC_MspInit+0xd0>)
 80005ec:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80005f0:	64d3      	str	r3, [r2, #76]	; 0x4c
 80005f2:	4b28      	ldr	r3, [pc, #160]	; (8000694 <HAL_DAC_MspInit+0xd0>)
 80005f4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80005f6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80005fa:	61bb      	str	r3, [r7, #24]
 80005fc:	69bb      	ldr	r3, [r7, #24]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80005fe:	4b25      	ldr	r3, [pc, #148]	; (8000694 <HAL_DAC_MspInit+0xd0>)
 8000600:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000602:	4a24      	ldr	r2, [pc, #144]	; (8000694 <HAL_DAC_MspInit+0xd0>)
 8000604:	f043 0301 	orr.w	r3, r3, #1
 8000608:	64d3      	str	r3, [r2, #76]	; 0x4c
 800060a:	4b22      	ldr	r3, [pc, #136]	; (8000694 <HAL_DAC_MspInit+0xd0>)
 800060c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800060e:	f003 0301 	and.w	r3, r3, #1
 8000612:	617b      	str	r3, [r7, #20]
 8000614:	697b      	ldr	r3, [r7, #20]
    /**DAC1 GPIO Configuration    
    PA4     ------> DAC1_OUT1
    PA5     ------> DAC1_OUT2 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 8000616:	2330      	movs	r3, #48	; 0x30
 8000618:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800061a:	2303      	movs	r3, #3
 800061c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800061e:	2300      	movs	r3, #0
 8000620:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000622:	f107 031c 	add.w	r3, r7, #28
 8000626:	4619      	mov	r1, r3
 8000628:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800062c:	f003 f82a 	bl	8003684 <HAL_GPIO_Init>

  /* USER CODE BEGIN DAC2_MspInit 1 */

  /* USER CODE END DAC2_MspInit 1 */
  }
}
 8000630:	e029      	b.n	8000686 <HAL_DAC_MspInit+0xc2>
  else if(dacHandle->Instance==DAC2)
 8000632:	687b      	ldr	r3, [r7, #4]
 8000634:	681b      	ldr	r3, [r3, #0]
 8000636:	4a18      	ldr	r2, [pc, #96]	; (8000698 <HAL_DAC_MspInit+0xd4>)
 8000638:	4293      	cmp	r3, r2
 800063a:	d124      	bne.n	8000686 <HAL_DAC_MspInit+0xc2>
    __HAL_RCC_DAC2_CLK_ENABLE();
 800063c:	4b15      	ldr	r3, [pc, #84]	; (8000694 <HAL_DAC_MspInit+0xd0>)
 800063e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000640:	4a14      	ldr	r2, [pc, #80]	; (8000694 <HAL_DAC_MspInit+0xd0>)
 8000642:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000646:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000648:	4b12      	ldr	r3, [pc, #72]	; (8000694 <HAL_DAC_MspInit+0xd0>)
 800064a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800064c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000650:	613b      	str	r3, [r7, #16]
 8000652:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000654:	4b0f      	ldr	r3, [pc, #60]	; (8000694 <HAL_DAC_MspInit+0xd0>)
 8000656:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000658:	4a0e      	ldr	r2, [pc, #56]	; (8000694 <HAL_DAC_MspInit+0xd0>)
 800065a:	f043 0301 	orr.w	r3, r3, #1
 800065e:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000660:	4b0c      	ldr	r3, [pc, #48]	; (8000694 <HAL_DAC_MspInit+0xd0>)
 8000662:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000664:	f003 0301 	and.w	r3, r3, #1
 8000668:	60fb      	str	r3, [r7, #12]
 800066a:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 800066c:	2340      	movs	r3, #64	; 0x40
 800066e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000670:	2303      	movs	r3, #3
 8000672:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000674:	2300      	movs	r3, #0
 8000676:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000678:	f107 031c 	add.w	r3, r7, #28
 800067c:	4619      	mov	r1, r3
 800067e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000682:	f002 ffff 	bl	8003684 <HAL_GPIO_Init>
}
 8000686:	bf00      	nop
 8000688:	3730      	adds	r7, #48	; 0x30
 800068a:	46bd      	mov	sp, r7
 800068c:	bd80      	pop	{r7, pc}
 800068e:	bf00      	nop
 8000690:	50000800 	.word	0x50000800
 8000694:	40021000 	.word	0x40021000
 8000698:	50000c00 	.word	0x50000c00

0800069c <MX_DMA_Init>:

/** 
  * Enable DMA controller clock
  */
void MX_DMA_Init(void) 
{
 800069c:	b580      	push	{r7, lr}
 800069e:	b082      	sub	sp, #8
 80006a0:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMAMUX1_CLK_ENABLE();
 80006a2:	4b12      	ldr	r3, [pc, #72]	; (80006ec <MX_DMA_Init+0x50>)
 80006a4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80006a6:	4a11      	ldr	r2, [pc, #68]	; (80006ec <MX_DMA_Init+0x50>)
 80006a8:	f043 0304 	orr.w	r3, r3, #4
 80006ac:	6493      	str	r3, [r2, #72]	; 0x48
 80006ae:	4b0f      	ldr	r3, [pc, #60]	; (80006ec <MX_DMA_Init+0x50>)
 80006b0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80006b2:	f003 0304 	and.w	r3, r3, #4
 80006b6:	607b      	str	r3, [r7, #4]
 80006b8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA1_CLK_ENABLE();
 80006ba:	4b0c      	ldr	r3, [pc, #48]	; (80006ec <MX_DMA_Init+0x50>)
 80006bc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80006be:	4a0b      	ldr	r2, [pc, #44]	; (80006ec <MX_DMA_Init+0x50>)
 80006c0:	f043 0301 	orr.w	r3, r3, #1
 80006c4:	6493      	str	r3, [r2, #72]	; 0x48
 80006c6:	4b09      	ldr	r3, [pc, #36]	; (80006ec <MX_DMA_Init+0x50>)
 80006c8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80006ca:	f003 0301 	and.w	r3, r3, #1
 80006ce:	603b      	str	r3, [r7, #0]
 80006d0:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 1, 0);
 80006d2:	2200      	movs	r2, #0
 80006d4:	2101      	movs	r1, #1
 80006d6:	200b      	movs	r0, #11
 80006d8:	f002 fb65 	bl	8002da6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 80006dc:	200b      	movs	r0, #11
 80006de:	f002 fb7c 	bl	8002dda <HAL_NVIC_EnableIRQ>

}
 80006e2:	bf00      	nop
 80006e4:	3708      	adds	r7, #8
 80006e6:	46bd      	mov	sp, r7
 80006e8:	bd80      	pop	{r7, pc}
 80006ea:	bf00      	nop
 80006ec:	40021000 	.word	0x40021000

080006f0 <update_dc_bias_sweep>:
uint16_t dcbias = 0;
int dcbias_dir = 1;
int dcinverted = 0;

void update_dc_bias_sweep()
{
 80006f0:	b580      	push	{r7, lr}
 80006f2:	af00      	add	r7, sp, #0
	  // up=1, down=0
	  (dcbias_dir) ? (dcbias++) : (dcbias--);
 80006f4:	4b20      	ldr	r3, [pc, #128]	; (8000778 <update_dc_bias_sweep+0x88>)
 80006f6:	681b      	ldr	r3, [r3, #0]
 80006f8:	2b00      	cmp	r3, #0
 80006fa:	d006      	beq.n	800070a <update_dc_bias_sweep+0x1a>
 80006fc:	4b1f      	ldr	r3, [pc, #124]	; (800077c <update_dc_bias_sweep+0x8c>)
 80006fe:	881b      	ldrh	r3, [r3, #0]
 8000700:	3301      	adds	r3, #1
 8000702:	b29a      	uxth	r2, r3
 8000704:	4b1d      	ldr	r3, [pc, #116]	; (800077c <update_dc_bias_sweep+0x8c>)
 8000706:	801a      	strh	r2, [r3, #0]
 8000708:	e005      	b.n	8000716 <update_dc_bias_sweep+0x26>
 800070a:	4b1c      	ldr	r3, [pc, #112]	; (800077c <update_dc_bias_sweep+0x8c>)
 800070c:	881b      	ldrh	r3, [r3, #0]
 800070e:	3b01      	subs	r3, #1
 8000710:	b29a      	uxth	r2, r3
 8000712:	4b1a      	ldr	r3, [pc, #104]	; (800077c <update_dc_bias_sweep+0x8c>)
 8000714:	801a      	strh	r2, [r3, #0]

	  // invert the bias signal at zero crossing
	  if(dcbias < 1) {
 8000716:	4b19      	ldr	r3, [pc, #100]	; (800077c <update_dc_bias_sweep+0x8c>)
 8000718:	881b      	ldrh	r3, [r3, #0]
 800071a:	2b00      	cmp	r3, #0
 800071c:	d10a      	bne.n	8000734 <update_dc_bias_sweep+0x44>
		(dcinverted) ? (dcinverted=0) : (dcinverted=1);
 800071e:	4b18      	ldr	r3, [pc, #96]	; (8000780 <update_dc_bias_sweep+0x90>)
 8000720:	681b      	ldr	r3, [r3, #0]
 8000722:	2b00      	cmp	r3, #0
 8000724:	d003      	beq.n	800072e <update_dc_bias_sweep+0x3e>
 8000726:	4b16      	ldr	r3, [pc, #88]	; (8000780 <update_dc_bias_sweep+0x90>)
 8000728:	2200      	movs	r2, #0
 800072a:	601a      	str	r2, [r3, #0]
 800072c:	e002      	b.n	8000734 <update_dc_bias_sweep+0x44>
 800072e:	4b14      	ldr	r3, [pc, #80]	; (8000780 <update_dc_bias_sweep+0x90>)
 8000730:	2201      	movs	r2, #1
 8000732:	601a      	str	r2, [r3, #0]
	  }

	  // change direction if dac limits are reached
	  if(dcbias < 1) 	{ dcbias_dir = 1; }
 8000734:	4b11      	ldr	r3, [pc, #68]	; (800077c <update_dc_bias_sweep+0x8c>)
 8000736:	881b      	ldrh	r3, [r3, #0]
 8000738:	2b00      	cmp	r3, #0
 800073a:	d102      	bne.n	8000742 <update_dc_bias_sweep+0x52>
 800073c:	4b0e      	ldr	r3, [pc, #56]	; (8000778 <update_dc_bias_sweep+0x88>)
 800073e:	2201      	movs	r2, #1
 8000740:	601a      	str	r2, [r3, #0]
	  if(dcbias > 4095) { dcbias_dir = 0; }
 8000742:	4b0e      	ldr	r3, [pc, #56]	; (800077c <update_dc_bias_sweep+0x8c>)
 8000744:	881b      	ldrh	r3, [r3, #0]
 8000746:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800074a:	d302      	bcc.n	8000752 <update_dc_bias_sweep+0x62>
 800074c:	4b0a      	ldr	r3, [pc, #40]	; (8000778 <update_dc_bias_sweep+0x88>)
 800074e:	2200      	movs	r2, #0
 8000750:	601a      	str	r2, [r3, #0]


	  HAL_GPIO_WritePin(DCBIAS_INVERT_GPIO_Port, DCBIAS_INVERT_Pin, dcinverted);
 8000752:	4b0b      	ldr	r3, [pc, #44]	; (8000780 <update_dc_bias_sweep+0x90>)
 8000754:	681b      	ldr	r3, [r3, #0]
 8000756:	b2db      	uxtb	r3, r3
 8000758:	461a      	mov	r2, r3
 800075a:	2108      	movs	r1, #8
 800075c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000760:	f003 f912 	bl	8003988 <HAL_GPIO_WritePin>
	  HAL_DAC_SetValue(&hdac1, DAC1_CHANNEL_2, DAC_ALIGN_12B_R, dcbias);
 8000764:	4b05      	ldr	r3, [pc, #20]	; (800077c <update_dc_bias_sweep+0x8c>)
 8000766:	881b      	ldrh	r3, [r3, #0]
 8000768:	2200      	movs	r2, #0
 800076a:	2110      	movs	r1, #16
 800076c:	4805      	ldr	r0, [pc, #20]	; (8000784 <update_dc_bias_sweep+0x94>)
 800076e:	f002 fbc3 	bl	8002ef8 <HAL_DAC_SetValue>
}
 8000772:	bf00      	nop
 8000774:	bd80      	pop	{r7, pc}
 8000776:	bf00      	nop
 8000778:	20000000 	.word	0x20000000
 800077c:	20000094 	.word	0x20000094
 8000780:	20000098 	.word	0x20000098
 8000784:	200001ac 	.word	0x200001ac

08000788 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8000788:	b580      	push	{r7, lr}
 800078a:	b088      	sub	sp, #32
 800078c:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800078e:	f107 030c 	add.w	r3, r7, #12
 8000792:	2200      	movs	r2, #0
 8000794:	601a      	str	r2, [r3, #0]
 8000796:	605a      	str	r2, [r3, #4]
 8000798:	609a      	str	r2, [r3, #8]
 800079a:	60da      	str	r2, [r3, #12]
 800079c:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800079e:	4b4b      	ldr	r3, [pc, #300]	; (80008cc <MX_GPIO_Init+0x144>)
 80007a0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80007a2:	4a4a      	ldr	r2, [pc, #296]	; (80008cc <MX_GPIO_Init+0x144>)
 80007a4:	f043 0304 	orr.w	r3, r3, #4
 80007a8:	64d3      	str	r3, [r2, #76]	; 0x4c
 80007aa:	4b48      	ldr	r3, [pc, #288]	; (80008cc <MX_GPIO_Init+0x144>)
 80007ac:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80007ae:	f003 0304 	and.w	r3, r3, #4
 80007b2:	60bb      	str	r3, [r7, #8]
 80007b4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80007b6:	4b45      	ldr	r3, [pc, #276]	; (80008cc <MX_GPIO_Init+0x144>)
 80007b8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80007ba:	4a44      	ldr	r2, [pc, #272]	; (80008cc <MX_GPIO_Init+0x144>)
 80007bc:	f043 0301 	orr.w	r3, r3, #1
 80007c0:	64d3      	str	r3, [r2, #76]	; 0x4c
 80007c2:	4b42      	ldr	r3, [pc, #264]	; (80008cc <MX_GPIO_Init+0x144>)
 80007c4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80007c6:	f003 0301 	and.w	r3, r3, #1
 80007ca:	607b      	str	r3, [r7, #4]
 80007cc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80007ce:	4b3f      	ldr	r3, [pc, #252]	; (80008cc <MX_GPIO_Init+0x144>)
 80007d0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80007d2:	4a3e      	ldr	r2, [pc, #248]	; (80008cc <MX_GPIO_Init+0x144>)
 80007d4:	f043 0302 	orr.w	r3, r3, #2
 80007d8:	64d3      	str	r3, [r2, #76]	; 0x4c
 80007da:	4b3c      	ldr	r3, [pc, #240]	; (80008cc <MX_GPIO_Init+0x144>)
 80007dc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80007de:	f003 0302 	and.w	r3, r3, #2
 80007e2:	603b      	str	r3, [r7, #0]
 80007e4:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, LED_TEST_Pin|TRIGMODE_Pin|SG2_Pin|SG1_Pin, GPIO_PIN_RESET);
 80007e6:	2200      	movs	r2, #0
 80007e8:	f244 0138 	movw	r1, #16440	; 0x4038
 80007ec:	4838      	ldr	r0, [pc, #224]	; (80008d0 <MX_GPIO_Init+0x148>)
 80007ee:	f003 f8cb 	bl	8003988 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(DCBIAS_INVERT_GPIO_Port, DCBIAS_INVERT_Pin, GPIO_PIN_RESET);
 80007f2:	2200      	movs	r2, #0
 80007f4:	2108      	movs	r1, #8
 80007f6:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80007fa:	f003 f8c5 	bl	8003988 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, SG0_Pin|DC_Pin|CS_Pin|RST_Pin, GPIO_PIN_RESET);
 80007fe:	2200      	movs	r2, #0
 8000800:	f240 21c1 	movw	r1, #705	; 0x2c1
 8000804:	4833      	ldr	r0, [pc, #204]	; (80008d4 <MX_GPIO_Init+0x14c>)
 8000806:	f003 f8bf 	bl	8003988 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PCPin PCPin PCPin */
  GPIO_InitStruct.Pin = LED_TEST_Pin|SG2_Pin|SG1_Pin;
 800080a:	f244 0330 	movw	r3, #16432	; 0x4030
 800080e:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000810:	2301      	movs	r3, #1
 8000812:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000814:	2300      	movs	r3, #0
 8000816:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000818:	2300      	movs	r3, #0
 800081a:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800081c:	f107 030c 	add.w	r3, r7, #12
 8000820:	4619      	mov	r1, r3
 8000822:	482b      	ldr	r0, [pc, #172]	; (80008d0 <MX_GPIO_Init+0x148>)
 8000824:	f002 ff2e 	bl	8003684 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = ENC_SW_Pin;
 8000828:	2304      	movs	r3, #4
 800082a:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 800082c:	4b2a      	ldr	r3, [pc, #168]	; (80008d8 <MX_GPIO_Init+0x150>)
 800082e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000830:	2301      	movs	r3, #1
 8000832:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(ENC_SW_GPIO_Port, &GPIO_InitStruct);
 8000834:	f107 030c 	add.w	r3, r7, #12
 8000838:	4619      	mov	r1, r3
 800083a:	4825      	ldr	r0, [pc, #148]	; (80008d0 <MX_GPIO_Init+0x148>)
 800083c:	f002 ff22 	bl	8003684 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = TRIGMODE_Pin;
 8000840:	2308      	movs	r3, #8
 8000842:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000844:	2301      	movs	r3, #1
 8000846:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8000848:	2302      	movs	r3, #2
 800084a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800084c:	2300      	movs	r3, #0
 800084e:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(TRIGMODE_GPIO_Port, &GPIO_InitStruct);
 8000850:	f107 030c 	add.w	r3, r7, #12
 8000854:	4619      	mov	r1, r3
 8000856:	481e      	ldr	r0, [pc, #120]	; (80008d0 <MX_GPIO_Init+0x148>)
 8000858:	f002 ff14 	bl	8003684 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = DCBIAS_INVERT_Pin;
 800085c:	2308      	movs	r3, #8
 800085e:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000860:	2301      	movs	r3, #1
 8000862:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000864:	2300      	movs	r3, #0
 8000866:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000868:	2300      	movs	r3, #0
 800086a:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(DCBIAS_INVERT_GPIO_Port, &GPIO_InitStruct);
 800086c:	f107 030c 	add.w	r3, r7, #12
 8000870:	4619      	mov	r1, r3
 8000872:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000876:	f002 ff05 	bl	8003684 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = SG0_Pin;
 800087a:	2301      	movs	r3, #1
 800087c:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800087e:	2301      	movs	r3, #1
 8000880:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000882:	2300      	movs	r3, #0
 8000884:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000886:	2300      	movs	r3, #0
 8000888:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(SG0_GPIO_Port, &GPIO_InitStruct);
 800088a:	f107 030c 	add.w	r3, r7, #12
 800088e:	4619      	mov	r1, r3
 8000890:	4810      	ldr	r0, [pc, #64]	; (80008d4 <MX_GPIO_Init+0x14c>)
 8000892:	f002 fef7 	bl	8003684 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin PBPin */
  GPIO_InitStruct.Pin = DC_Pin|CS_Pin|RST_Pin;
 8000896:	f44f 7330 	mov.w	r3, #704	; 0x2c0
 800089a:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800089c:	2301      	movs	r3, #1
 800089e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008a0:	2300      	movs	r3, #0
 80008a2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80008a4:	2303      	movs	r3, #3
 80008a6:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80008a8:	f107 030c 	add.w	r3, r7, #12
 80008ac:	4619      	mov	r1, r3
 80008ae:	4809      	ldr	r0, [pc, #36]	; (80008d4 <MX_GPIO_Init+0x14c>)
 80008b0:	f002 fee8 	bl	8003684 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI2_IRQn, 0, 0);
 80008b4:	2200      	movs	r2, #0
 80008b6:	2100      	movs	r1, #0
 80008b8:	2008      	movs	r0, #8
 80008ba:	f002 fa74 	bl	8002da6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI2_IRQn);
 80008be:	2008      	movs	r0, #8
 80008c0:	f002 fa8b 	bl	8002dda <HAL_NVIC_EnableIRQ>

}
 80008c4:	bf00      	nop
 80008c6:	3720      	adds	r7, #32
 80008c8:	46bd      	mov	sp, r7
 80008ca:	bd80      	pop	{r7, pc}
 80008cc:	40021000 	.word	0x40021000
 80008d0:	48000800 	.word	0x48000800
 80008d4:	48000400 	.word	0x48000400
 80008d8:	10210000 	.word	0x10210000

080008dc <ITM_SendChar>:
           \li Is blocking when a debugger is connected, but the previous character sent has not been transmitted.
  \param [in]     ch  Character to transmit.
  \returns            Character to transmit.
 */
__STATIC_INLINE uint32_t ITM_SendChar (uint32_t ch)
{
 80008dc:	b480      	push	{r7}
 80008de:	b083      	sub	sp, #12
 80008e0:	af00      	add	r7, sp, #0
 80008e2:	6078      	str	r0, [r7, #4]
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 80008e4:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 80008e8:	f8d3 3e80 	ldr.w	r3, [r3, #3712]	; 0xe80
 80008ec:	f003 0301 	and.w	r3, r3, #1
 80008f0:	2b00      	cmp	r3, #0
 80008f2:	d013      	beq.n	800091c <ITM_SendChar+0x40>
      ((ITM->TER & 1UL               ) != 0UL)   )     /* ITM Port #0 enabled */
 80008f4:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 80008f8:	f8d3 3e00 	ldr.w	r3, [r3, #3584]	; 0xe00
 80008fc:	f003 0301 	and.w	r3, r3, #1
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 8000900:	2b00      	cmp	r3, #0
 8000902:	d00b      	beq.n	800091c <ITM_SendChar+0x40>
  {
    while (ITM->PORT[0U].u32 == 0UL)
 8000904:	e000      	b.n	8000908 <ITM_SendChar+0x2c>
    {
      __NOP();
 8000906:	bf00      	nop
    while (ITM->PORT[0U].u32 == 0UL)
 8000908:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 800090c:	681b      	ldr	r3, [r3, #0]
 800090e:	2b00      	cmp	r3, #0
 8000910:	d0f9      	beq.n	8000906 <ITM_SendChar+0x2a>
    }
    ITM->PORT[0U].u8 = (uint8_t)ch;
 8000912:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8000916:	687a      	ldr	r2, [r7, #4]
 8000918:	b2d2      	uxtb	r2, r2
 800091a:	701a      	strb	r2, [r3, #0]
  }
  return (ch);
 800091c:	687b      	ldr	r3, [r7, #4]
}
 800091e:	4618      	mov	r0, r3
 8000920:	370c      	adds	r7, #12
 8000922:	46bd      	mov	sp, r7
 8000924:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000928:	4770      	bx	lr

0800092a <_write>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
int _write(int file, char *ptr, int len)
{
 800092a:	b580      	push	{r7, lr}
 800092c:	b086      	sub	sp, #24
 800092e:	af00      	add	r7, sp, #0
 8000930:	60f8      	str	r0, [r7, #12]
 8000932:	60b9      	str	r1, [r7, #8]
 8000934:	607a      	str	r2, [r7, #4]
  /* Implement your write code here, this is used by puts and printf for example */
  int i=0;
 8000936:	2300      	movs	r3, #0
 8000938:	617b      	str	r3, [r7, #20]
  for(i=0 ; i<len ; i++)
 800093a:	2300      	movs	r3, #0
 800093c:	617b      	str	r3, [r7, #20]
 800093e:	e009      	b.n	8000954 <_write+0x2a>
    ITM_SendChar((*ptr++));
 8000940:	68bb      	ldr	r3, [r7, #8]
 8000942:	1c5a      	adds	r2, r3, #1
 8000944:	60ba      	str	r2, [r7, #8]
 8000946:	781b      	ldrb	r3, [r3, #0]
 8000948:	4618      	mov	r0, r3
 800094a:	f7ff ffc7 	bl	80008dc <ITM_SendChar>
  for(i=0 ; i<len ; i++)
 800094e:	697b      	ldr	r3, [r7, #20]
 8000950:	3301      	adds	r3, #1
 8000952:	617b      	str	r3, [r7, #20]
 8000954:	697a      	ldr	r2, [r7, #20]
 8000956:	687b      	ldr	r3, [r7, #4]
 8000958:	429a      	cmp	r2, r3
 800095a:	dbf1      	blt.n	8000940 <_write+0x16>
  return len;
 800095c:	687b      	ldr	r3, [r7, #4]
}
 800095e:	4618      	mov	r0, r3
 8000960:	3718      	adds	r7, #24
 8000962:	46bd      	mov	sp, r7
 8000964:	bd80      	pop	{r7, pc}
	...

08000968 <update_tft>:

void update_tft()
{
 8000968:	b580      	push	{r7, lr}
 800096a:	b084      	sub	sp, #16
 800096c:	af00      	add	r7, sp, #0
	  //----------------------------------------------------------FILLED CIRCLES EXAMPLE


				uint32_t random_num = 0;
 800096e:	2300      	movs	r3, #0
 8000970:	607b      	str	r3, [r7, #4]
	  			uint16_t xr = 0;
 8000972:	2300      	movs	r3, #0
 8000974:	81fb      	strh	r3, [r7, #14]
	  			uint16_t yr = 0;
 8000976:	2300      	movs	r3, #0
 8000978:	81bb      	strh	r3, [r7, #12]
	  			uint16_t radiusr = 0;
 800097a:	2300      	movs	r3, #0
 800097c:	817b      	strh	r3, [r7, #10]
	  			uint16_t colourr = 0;
 800097e:	2300      	movs	r3, #0
 8000980:	813b      	strh	r3, [r7, #8]
	  			HAL_RNG_GenerateRandomNumber(&hrng, &random_num);
 8000982:	1d3b      	adds	r3, r7, #4
 8000984:	4619      	mov	r1, r3
 8000986:	4819      	ldr	r0, [pc, #100]	; (80009ec <update_tft+0x84>)
 8000988:	f004 f881 	bl	8004a8e <HAL_RNG_GenerateRandomNumber>
	  			xr = random_num;
 800098c:	687b      	ldr	r3, [r7, #4]
 800098e:	81fb      	strh	r3, [r7, #14]
	  			HAL_RNG_GenerateRandomNumber(&hrng, &random_num);
 8000990:	1d3b      	adds	r3, r7, #4
 8000992:	4619      	mov	r1, r3
 8000994:	4815      	ldr	r0, [pc, #84]	; (80009ec <update_tft+0x84>)
 8000996:	f004 f87a 	bl	8004a8e <HAL_RNG_GenerateRandomNumber>
	  			yr = random_num;
 800099a:	687b      	ldr	r3, [r7, #4]
 800099c:	81bb      	strh	r3, [r7, #12]
	  			HAL_RNG_GenerateRandomNumber(&hrng, &random_num);
 800099e:	1d3b      	adds	r3, r7, #4
 80009a0:	4619      	mov	r1, r3
 80009a2:	4812      	ldr	r0, [pc, #72]	; (80009ec <update_tft+0x84>)
 80009a4:	f004 f873 	bl	8004a8e <HAL_RNG_GenerateRandomNumber>
	  			radiusr = random_num;
 80009a8:	687b      	ldr	r3, [r7, #4]
 80009aa:	817b      	strh	r3, [r7, #10]
	  			HAL_RNG_GenerateRandomNumber(&hrng, &random_num);
 80009ac:	1d3b      	adds	r3, r7, #4
 80009ae:	4619      	mov	r1, r3
 80009b0:	480e      	ldr	r0, [pc, #56]	; (80009ec <update_tft+0x84>)
 80009b2:	f004 f86c 	bl	8004a8e <HAL_RNG_GenerateRandomNumber>
	  			colourr = random_num;
 80009b6:	687b      	ldr	r3, [r7, #4]
 80009b8:	813b      	strh	r3, [r7, #8]

	  			xr &= 0x01FF;
 80009ba:	89fb      	ldrh	r3, [r7, #14]
 80009bc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80009c0:	81fb      	strh	r3, [r7, #14]
	  			yr &= 0x01FF;
 80009c2:	89bb      	ldrh	r3, [r7, #12]
 80009c4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80009c8:	81bb      	strh	r3, [r7, #12]
	  			radiusr &= 0x001F;
 80009ca:	897b      	ldrh	r3, [r7, #10]
 80009cc:	f003 031f 	and.w	r3, r3, #31
 80009d0:	817b      	strh	r3, [r7, #10]
	  			//ili9341_drawpixel(xr, yr, WHITE);
	  			ILI9341_Draw_Filled_Circle(xr, yr, radiusr/2, colourr);
 80009d2:	897b      	ldrh	r3, [r7, #10]
 80009d4:	085b      	lsrs	r3, r3, #1
 80009d6:	b29a      	uxth	r2, r3
 80009d8:	893b      	ldrh	r3, [r7, #8]
 80009da:	89b9      	ldrh	r1, [r7, #12]
 80009dc:	89f8      	ldrh	r0, [r7, #14]
 80009de:	f005 fb8d 	bl	80060fc <ILI9341_Draw_Filled_Circle>

	  		//HAL_Delay(1);
}
 80009e2:	bf00      	nop
 80009e4:	3710      	adds	r7, #16
 80009e6:	46bd      	mov	sp, r7
 80009e8:	bd80      	pop	{r7, pc}
 80009ea:	bf00      	nop
 80009ec:	200001c0 	.word	0x200001c0

080009f0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80009f0:	b580      	push	{r7, lr}
 80009f2:	b082      	sub	sp, #8
 80009f4:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80009f6:	f000 fd28 	bl	800144a <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80009fa:	f000 f899 	bl	8000b30 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80009fe:	f7ff fec3 	bl	8000788 <MX_GPIO_Init>
  MX_DMA_Init();
 8000a02:	f7ff fe4b 	bl	800069c <MX_DMA_Init>
  MX_DAC1_Init();
 8000a06:	f7ff fd45 	bl	8000494 <MX_DAC1_Init>
  MX_TIM6_Init();
 8000a0a:	f000 fbcd 	bl	80011a8 <MX_TIM6_Init>
  MX_DAC2_Init();
 8000a0e:	f7ff fd95 	bl	800053c <MX_DAC2_Init>
  MX_ADC1_Init();
 8000a12:	f7ff fc01 	bl	8000218 <MX_ADC1_Init>
  MX_COMP1_Init();
 8000a16:	f7ff fce3 	bl	80003e0 <MX_COMP1_Init>
  MX_TIM2_Init();
 8000a1a:	f000 fb5b 	bl	80010d4 <MX_TIM2_Init>
  MX_TIM17_Init();
 8000a1e:	f000 fbf9 	bl	8001214 <MX_TIM17_Init>
  MX_SPI3_Init();
 8000a22:	f000 f92f 	bl	8000c84 <MX_SPI3_Init>
  MX_RNG_Init();
 8000a26:	f000 f8f7 	bl	8000c18 <MX_RNG_Init>
  MX_TIM1_Init();
 8000a2a:	f000 fae3 	bl	8000ff4 <MX_TIM1_Init>
  /* USER CODE BEGIN 2 */

  // main signal function output (external)
  HAL_DAC_Start(&hdac1, DAC1_CHANNEL_1);
 8000a2e:	2100      	movs	r1, #0
 8000a30:	4835      	ldr	r0, [pc, #212]	; (8000b08 <main+0x118>)
 8000a32:	f002 fa0e 	bl	8002e52 <HAL_DAC_Start>
  // DC bias output (internal)
  HAL_DAC_Start(&hdac1, DAC1_CHANNEL_2);
 8000a36:	2110      	movs	r1, #16
 8000a38:	4833      	ldr	r0, [pc, #204]	; (8000b08 <main+0x118>)
 8000a3a:	f002 fa0a 	bl	8002e52 <HAL_DAC_Start>
  // auxilliary signal sync output (external)
  HAL_DAC_Start(&hdac2, DAC2_CHANNEL_1);
 8000a3e:	2100      	movs	r1, #0
 8000a40:	4832      	ldr	r0, [pc, #200]	; (8000b0c <main+0x11c>)
 8000a42:	f002 fa06 	bl	8002e52 <HAL_DAC_Start>
  //HAL_DAC_Start_DMA(&hdac2, DAC2_CHANNEL_1, trigger_input, TRIGGER_DATA_SIZE, DAC_ALIGN_12B_R);
  // single clock to run all DAC channels. TODO add independent clocks
  HAL_TIM_Base_Start(&htim6);
 8000a46:	4832      	ldr	r0, [pc, #200]	; (8000b10 <main+0x120>)
 8000a48:	f004 fbdc 	bl	8005204 <HAL_TIM_Base_Start>

  // DC bias inversion
  HAL_GPIO_WritePin(DCBIAS_INVERT_GPIO_Port, DCBIAS_INVERT_Pin, GPIO_PIN_SET);
 8000a4c:	2201      	movs	r2, #1
 8000a4e:	2108      	movs	r1, #8
 8000a50:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000a54:	f002 ff98 	bl	8003988 <HAL_GPIO_WritePin>

  // PGA gain
  HAL_GPIO_WritePin(SG0_GPIO_Port, SG0_Pin, GPIO_PIN_SET);
 8000a58:	2201      	movs	r2, #1
 8000a5a:	2101      	movs	r1, #1
 8000a5c:	482d      	ldr	r0, [pc, #180]	; (8000b14 <main+0x124>)
 8000a5e:	f002 ff93 	bl	8003988 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(SG1_GPIO_Port, SG1_Pin, GPIO_PIN_RESET);
 8000a62:	2200      	movs	r2, #0
 8000a64:	2120      	movs	r1, #32
 8000a66:	482c      	ldr	r0, [pc, #176]	; (8000b18 <main+0x128>)
 8000a68:	f002 ff8e 	bl	8003988 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(SG2_GPIO_Port, SG2_Pin, GPIO_PIN_RESET);
 8000a6c:	2200      	movs	r2, #0
 8000a6e:	2110      	movs	r1, #16
 8000a70:	4829      	ldr	r0, [pc, #164]	; (8000b18 <main+0x128>)
 8000a72:	f002 ff89 	bl	8003988 <HAL_GPIO_WritePin>


  // start test routine (update_dc_bias_sweep())
  HAL_TIM_Base_Start_IT(&htim17);
 8000a76:	4829      	ldr	r0, [pc, #164]	; (8000b1c <main+0x12c>)
 8000a78:	f004 fbf2 	bl	8005260 <HAL_TIM_Base_Start_IT>
  HAL_ADC_Start_DMA(&hadc1, trigger_input, TRIGGER_DATA_SIZE);
#else
  // input capture on in TIM2 slave-mode TF1FP1

  // set HW switch to direct ext. trigger input to TIM pin
  HAL_GPIO_WritePin(TRIGMODE_GPIO_Port, TRIGMODE_Pin, GPIO_PIN_SET);
 8000a7c:	2201      	movs	r2, #1
 8000a7e:	2108      	movs	r1, #8
 8000a80:	4825      	ldr	r0, [pc, #148]	; (8000b18 <main+0x128>)
 8000a82:	f002 ff81 	bl	8003988 <HAL_GPIO_WritePin>

  // clear slave mode select reg
  TIM2->SMCR &= ~(TIM_SMCR_SMS_0 | TIM_SMCR_SMS_1 | TIM_SMCR_SMS_2);
 8000a86:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000a8a:	689b      	ldr	r3, [r3, #8]
 8000a8c:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000a90:	f023 0307 	bic.w	r3, r3, #7
 8000a94:	6093      	str	r3, [r2, #8]

  // slave mode
  //TIM2->SMCR |= TIM_SMCR_SMS_2;						// SLAVE MODE: RESET
  TIM2->SMCR |= TIM_SMCR_SMS_0 | TIM_SMCR_SMS_2;	// SLAVE MODE: GATED
 8000a96:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000a9a:	689b      	ldr	r3, [r3, #8]
 8000a9c:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000aa0:	f043 0305 	orr.w	r3, r3, #5
 8000aa4:	6093      	str	r3, [r2, #8]
  //TIM2->SMCR |= TIM_SMCR_SMS_1 | TIM_SMCR_SMS_2;	// SLAVE MODE: TRIGGER

  HAL_TIM_Base_Start_IT(&htim2);
 8000aa6:	481e      	ldr	r0, [pc, #120]	; (8000b20 <main+0x130>)
 8000aa8:	f004 fbda 	bl	8005260 <HAL_TIM_Base_Start_IT>
#endif

  // encoder input
  HAL_TIM_Base_Start(&htim1);
 8000aac:	481d      	ldr	r0, [pc, #116]	; (8000b24 <main+0x134>)
 8000aae:	f004 fba9 	bl	8005204 <HAL_TIM_Base_Start>

  // TFT lib enable
  ILI9341_Init();
 8000ab2:	f005 fd91 	bl	80065d8 <ILI9341_Init>


	ILI9341_Fill_Screen(WHITE);
 8000ab6:	f64f 70ff 	movw	r0, #65535	; 0xffff
 8000aba:	f005 ff31 	bl	8006920 <ILI9341_Fill_Screen>
	ILI9341_Set_Rotation(SCREEN_HORIZONTAL_2);
 8000abe:	2003      	movs	r0, #3
 8000ac0:	f005 fd30 	bl	8006524 <ILI9341_Set_Rotation>
	ILI9341_Draw_Text("Randomly placed and sized", 10, 10, BLACK, 1, WHITE);
 8000ac4:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000ac8:	9301      	str	r3, [sp, #4]
 8000aca:	2301      	movs	r3, #1
 8000acc:	9300      	str	r3, [sp, #0]
 8000ace:	2300      	movs	r3, #0
 8000ad0:	220a      	movs	r2, #10
 8000ad2:	210a      	movs	r1, #10
 8000ad4:	4814      	ldr	r0, [pc, #80]	; (8000b28 <main+0x138>)
 8000ad6:	f005 fc33 	bl	8006340 <ILI9341_Draw_Text>
	ILI9341_Draw_Text("Filled Circles", 10, 20, BLACK, 1, WHITE);
 8000ada:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000ade:	9301      	str	r3, [sp, #4]
 8000ae0:	2301      	movs	r3, #1
 8000ae2:	9300      	str	r3, [sp, #0]
 8000ae4:	2300      	movs	r3, #0
 8000ae6:	2214      	movs	r2, #20
 8000ae8:	210a      	movs	r1, #10
 8000aea:	4810      	ldr	r0, [pc, #64]	; (8000b2c <main+0x13c>)
 8000aec:	f005 fc28 	bl	8006340 <ILI9341_Draw_Text>
	HAL_Delay(2000);
 8000af0:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8000af4:	f000 fd1a 	bl	800152c <HAL_Delay>
	ILI9341_Fill_Screen(WHITE);
 8000af8:	f64f 70ff 	movw	r0, #65535	; 0xffff
 8000afc:	f005 ff10 	bl	8006920 <ILI9341_Fill_Screen>
  /* USER CODE BEGIN WHILE */
  while (1)
  {

	//printf("TFT\n");
	update_tft();
 8000b00:	f7ff ff32 	bl	8000968 <update_tft>
 8000b04:	e7fc      	b.n	8000b00 <main+0x110>
 8000b06:	bf00      	nop
 8000b08:	200001ac 	.word	0x200001ac
 8000b0c:	20000198 	.word	0x20000198
 8000b10:	20000284 	.word	0x20000284
 8000b14:	48000400 	.word	0x48000400
 8000b18:	48000800 	.word	0x48000800
 8000b1c:	20000238 	.word	0x20000238
 8000b20:	2000031c 	.word	0x2000031c
 8000b24:	200002d0 	.word	0x200002d0
 8000b28:	08007504 	.word	0x08007504
 8000b2c:	08007520 	.word	0x08007520

08000b30 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000b30:	b580      	push	{r7, lr}
 8000b32:	b0a8      	sub	sp, #160	; 0xa0
 8000b34:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000b36:	f107 0368 	add.w	r3, r7, #104	; 0x68
 8000b3a:	2238      	movs	r2, #56	; 0x38
 8000b3c:	2100      	movs	r1, #0
 8000b3e:	4618      	mov	r0, r3
 8000b40:	f006 f864 	bl	8006c0c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000b44:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8000b48:	2200      	movs	r2, #0
 8000b4a:	601a      	str	r2, [r3, #0]
 8000b4c:	605a      	str	r2, [r3, #4]
 8000b4e:	609a      	str	r2, [r3, #8]
 8000b50:	60da      	str	r2, [r3, #12]
 8000b52:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000b54:	463b      	mov	r3, r7
 8000b56:	2254      	movs	r2, #84	; 0x54
 8000b58:	2100      	movs	r1, #0
 8000b5a:	4618      	mov	r0, r3
 8000b5c:	f006 f856 	bl	8006c0c <memset>

  /** Configure the main internal regulator output voltage 
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000b60:	f44f 7000 	mov.w	r0, #512	; 0x200
 8000b64:	f002 ff66 	bl	8003a34 <HAL_PWREx_ControlVoltageScaling>
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000b68:	2302      	movs	r3, #2
 8000b6a:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000b6c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000b70:	677b      	str	r3, [r7, #116]	; 0x74
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000b72:	2340      	movs	r3, #64	; 0x40
 8000b74:	67bb      	str	r3, [r7, #120]	; 0x78
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000b76:	2302      	movs	r3, #2
 8000b78:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000b7c:	2302      	movs	r3, #2
 8000b7e:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV2;
 8000b82:	2302      	movs	r3, #2
 8000b84:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  RCC_OscInitStruct.PLL.PLLN = 12;
 8000b88:	230c      	movs	r3, #12
 8000b8a:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000b8e:	2302      	movs	r3, #2
 8000b90:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV8;
 8000b94:	2308      	movs	r3, #8
 8000b96:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8000b9a:	2302      	movs	r3, #2
 8000b9c:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000ba0:	f107 0368 	add.w	r3, r7, #104	; 0x68
 8000ba4:	4618      	mov	r0, r3
 8000ba6:	f002 ffe9 	bl	8003b7c <HAL_RCC_OscConfig>
 8000baa:	4603      	mov	r3, r0
 8000bac:	2b00      	cmp	r3, #0
 8000bae:	d001      	beq.n	8000bb4 <SystemClock_Config+0x84>
  {
    Error_Handler();
 8000bb0:	f000 f82b 	bl	8000c0a <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000bb4:	230f      	movs	r3, #15
 8000bb6:	657b      	str	r3, [r7, #84]	; 0x54
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000bb8:	2303      	movs	r3, #3
 8000bba:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000bbc:	2300      	movs	r3, #0
 8000bbe:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000bc0:	2300      	movs	r3, #0
 8000bc2:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000bc4:	2300      	movs	r3, #0
 8000bc6:	667b      	str	r3, [r7, #100]	; 0x64

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000bc8:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8000bcc:	2102      	movs	r1, #2
 8000bce:	4618      	mov	r0, r3
 8000bd0:	f003 faec 	bl	80041ac <HAL_RCC_ClockConfig>
 8000bd4:	4603      	mov	r3, r0
 8000bd6:	2b00      	cmp	r3, #0
 8000bd8:	d001      	beq.n	8000bde <SystemClock_Config+0xae>
  {
    Error_Handler();
 8000bda:	f000 f816 	bl	8000c0a <Error_Handler>
  }
  /** Initializes the peripherals clocks 
  */
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_RNG|RCC_PERIPHCLK_ADC12;
 8000bde:	f44f 4340 	mov.w	r3, #49152	; 0xc000
 8000be2:	603b      	str	r3, [r7, #0]
  PeriphClkInit.RngClockSelection = RCC_RNGCLKSOURCE_PLL;
 8000be4:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8000be8:	643b      	str	r3, [r7, #64]	; 0x40
  PeriphClkInit.Adc12ClockSelection = RCC_ADC12CLKSOURCE_SYSCLK;
 8000bea:	f04f 5300 	mov.w	r3, #536870912	; 0x20000000
 8000bee:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000bf0:	463b      	mov	r3, r7
 8000bf2:	4618      	mov	r0, r3
 8000bf4:	f003 fcca 	bl	800458c <HAL_RCCEx_PeriphCLKConfig>
 8000bf8:	4603      	mov	r3, r0
 8000bfa:	2b00      	cmp	r3, #0
 8000bfc:	d001      	beq.n	8000c02 <SystemClock_Config+0xd2>
  {
    Error_Handler();
 8000bfe:	f000 f804 	bl	8000c0a <Error_Handler>
  }
}
 8000c02:	bf00      	nop
 8000c04:	37a0      	adds	r7, #160	; 0xa0
 8000c06:	46bd      	mov	sp, r7
 8000c08:	bd80      	pop	{r7, pc}

08000c0a <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000c0a:	b480      	push	{r7}
 8000c0c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8000c0e:	bf00      	nop
 8000c10:	46bd      	mov	sp, r7
 8000c12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c16:	4770      	bx	lr

08000c18 <MX_RNG_Init>:

RNG_HandleTypeDef hrng;

/* RNG init function */
void MX_RNG_Init(void)
{
 8000c18:	b580      	push	{r7, lr}
 8000c1a:	af00      	add	r7, sp, #0

  hrng.Instance = RNG;
 8000c1c:	4b07      	ldr	r3, [pc, #28]	; (8000c3c <MX_RNG_Init+0x24>)
 8000c1e:	4a08      	ldr	r2, [pc, #32]	; (8000c40 <MX_RNG_Init+0x28>)
 8000c20:	601a      	str	r2, [r3, #0]
  hrng.Init.ClockErrorDetection = RNG_CED_ENABLE;
 8000c22:	4b06      	ldr	r3, [pc, #24]	; (8000c3c <MX_RNG_Init+0x24>)
 8000c24:	2200      	movs	r2, #0
 8000c26:	605a      	str	r2, [r3, #4]
  if (HAL_RNG_Init(&hrng) != HAL_OK)
 8000c28:	4804      	ldr	r0, [pc, #16]	; (8000c3c <MX_RNG_Init+0x24>)
 8000c2a:	f003 fefb 	bl	8004a24 <HAL_RNG_Init>
 8000c2e:	4603      	mov	r3, r0
 8000c30:	2b00      	cmp	r3, #0
 8000c32:	d001      	beq.n	8000c38 <MX_RNG_Init+0x20>
  {
    Error_Handler();
 8000c34:	f7ff ffe9 	bl	8000c0a <Error_Handler>
  }

}
 8000c38:	bf00      	nop
 8000c3a:	bd80      	pop	{r7, pc}
 8000c3c:	200001c0 	.word	0x200001c0
 8000c40:	50060800 	.word	0x50060800

08000c44 <HAL_RNG_MspInit>:

void HAL_RNG_MspInit(RNG_HandleTypeDef* rngHandle)
{
 8000c44:	b480      	push	{r7}
 8000c46:	b085      	sub	sp, #20
 8000c48:	af00      	add	r7, sp, #0
 8000c4a:	6078      	str	r0, [r7, #4]

  if(rngHandle->Instance==RNG)
 8000c4c:	687b      	ldr	r3, [r7, #4]
 8000c4e:	681b      	ldr	r3, [r3, #0]
 8000c50:	4a0a      	ldr	r2, [pc, #40]	; (8000c7c <HAL_RNG_MspInit+0x38>)
 8000c52:	4293      	cmp	r3, r2
 8000c54:	d10b      	bne.n	8000c6e <HAL_RNG_MspInit+0x2a>
  {
  /* USER CODE BEGIN RNG_MspInit 0 */

  /* USER CODE END RNG_MspInit 0 */
    /* RNG clock enable */
    __HAL_RCC_RNG_CLK_ENABLE();
 8000c56:	4b0a      	ldr	r3, [pc, #40]	; (8000c80 <HAL_RNG_MspInit+0x3c>)
 8000c58:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000c5a:	4a09      	ldr	r2, [pc, #36]	; (8000c80 <HAL_RNG_MspInit+0x3c>)
 8000c5c:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8000c60:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000c62:	4b07      	ldr	r3, [pc, #28]	; (8000c80 <HAL_RNG_MspInit+0x3c>)
 8000c64:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000c66:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8000c6a:	60fb      	str	r3, [r7, #12]
 8000c6c:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN RNG_MspInit 1 */

  /* USER CODE END RNG_MspInit 1 */
  }
}
 8000c6e:	bf00      	nop
 8000c70:	3714      	adds	r7, #20
 8000c72:	46bd      	mov	sp, r7
 8000c74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c78:	4770      	bx	lr
 8000c7a:	bf00      	nop
 8000c7c:	50060800 	.word	0x50060800
 8000c80:	40021000 	.word	0x40021000

08000c84 <MX_SPI3_Init>:

SPI_HandleTypeDef hspi3;

/* SPI3 init function */
void MX_SPI3_Init(void)
{
 8000c84:	b580      	push	{r7, lr}
 8000c86:	af00      	add	r7, sp, #0

  hspi3.Instance = SPI3;
 8000c88:	4b1b      	ldr	r3, [pc, #108]	; (8000cf8 <MX_SPI3_Init+0x74>)
 8000c8a:	4a1c      	ldr	r2, [pc, #112]	; (8000cfc <MX_SPI3_Init+0x78>)
 8000c8c:	601a      	str	r2, [r3, #0]
  hspi3.Init.Mode = SPI_MODE_MASTER;
 8000c8e:	4b1a      	ldr	r3, [pc, #104]	; (8000cf8 <MX_SPI3_Init+0x74>)
 8000c90:	f44f 7282 	mov.w	r2, #260	; 0x104
 8000c94:	605a      	str	r2, [r3, #4]
  hspi3.Init.Direction = SPI_DIRECTION_2LINES;
 8000c96:	4b18      	ldr	r3, [pc, #96]	; (8000cf8 <MX_SPI3_Init+0x74>)
 8000c98:	2200      	movs	r2, #0
 8000c9a:	609a      	str	r2, [r3, #8]
  hspi3.Init.DataSize = SPI_DATASIZE_8BIT;
 8000c9c:	4b16      	ldr	r3, [pc, #88]	; (8000cf8 <MX_SPI3_Init+0x74>)
 8000c9e:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 8000ca2:	60da      	str	r2, [r3, #12]
  hspi3.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000ca4:	4b14      	ldr	r3, [pc, #80]	; (8000cf8 <MX_SPI3_Init+0x74>)
 8000ca6:	2200      	movs	r2, #0
 8000ca8:	611a      	str	r2, [r3, #16]
  hspi3.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000caa:	4b13      	ldr	r3, [pc, #76]	; (8000cf8 <MX_SPI3_Init+0x74>)
 8000cac:	2200      	movs	r2, #0
 8000cae:	615a      	str	r2, [r3, #20]
  hspi3.Init.NSS = SPI_NSS_SOFT;
 8000cb0:	4b11      	ldr	r3, [pc, #68]	; (8000cf8 <MX_SPI3_Init+0x74>)
 8000cb2:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000cb6:	619a      	str	r2, [r3, #24]
  hspi3.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8000cb8:	4b0f      	ldr	r3, [pc, #60]	; (8000cf8 <MX_SPI3_Init+0x74>)
 8000cba:	2200      	movs	r2, #0
 8000cbc:	61da      	str	r2, [r3, #28]
  hspi3.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000cbe:	4b0e      	ldr	r3, [pc, #56]	; (8000cf8 <MX_SPI3_Init+0x74>)
 8000cc0:	2200      	movs	r2, #0
 8000cc2:	621a      	str	r2, [r3, #32]
  hspi3.Init.TIMode = SPI_TIMODE_DISABLE;
 8000cc4:	4b0c      	ldr	r3, [pc, #48]	; (8000cf8 <MX_SPI3_Init+0x74>)
 8000cc6:	2200      	movs	r2, #0
 8000cc8:	625a      	str	r2, [r3, #36]	; 0x24
  hspi3.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000cca:	4b0b      	ldr	r3, [pc, #44]	; (8000cf8 <MX_SPI3_Init+0x74>)
 8000ccc:	2200      	movs	r2, #0
 8000cce:	629a      	str	r2, [r3, #40]	; 0x28
  hspi3.Init.CRCPolynomial = 7;
 8000cd0:	4b09      	ldr	r3, [pc, #36]	; (8000cf8 <MX_SPI3_Init+0x74>)
 8000cd2:	2207      	movs	r2, #7
 8000cd4:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi3.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8000cd6:	4b08      	ldr	r3, [pc, #32]	; (8000cf8 <MX_SPI3_Init+0x74>)
 8000cd8:	2200      	movs	r2, #0
 8000cda:	631a      	str	r2, [r3, #48]	; 0x30
  hspi3.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8000cdc:	4b06      	ldr	r3, [pc, #24]	; (8000cf8 <MX_SPI3_Init+0x74>)
 8000cde:	2208      	movs	r2, #8
 8000ce0:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi3) != HAL_OK)
 8000ce2:	4805      	ldr	r0, [pc, #20]	; (8000cf8 <MX_SPI3_Init+0x74>)
 8000ce4:	f003 ff22 	bl	8004b2c <HAL_SPI_Init>
 8000ce8:	4603      	mov	r3, r0
 8000cea:	2b00      	cmp	r3, #0
 8000cec:	d001      	beq.n	8000cf2 <MX_SPI3_Init+0x6e>
  {
    Error_Handler();
 8000cee:	f7ff ff8c 	bl	8000c0a <Error_Handler>
  }

}
 8000cf2:	bf00      	nop
 8000cf4:	bd80      	pop	{r7, pc}
 8000cf6:	bf00      	nop
 8000cf8:	200001d4 	.word	0x200001d4
 8000cfc:	40003c00 	.word	0x40003c00

08000d00 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8000d00:	b580      	push	{r7, lr}
 8000d02:	b08a      	sub	sp, #40	; 0x28
 8000d04:	af00      	add	r7, sp, #0
 8000d06:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d08:	f107 0314 	add.w	r3, r7, #20
 8000d0c:	2200      	movs	r2, #0
 8000d0e:	601a      	str	r2, [r3, #0]
 8000d10:	605a      	str	r2, [r3, #4]
 8000d12:	609a      	str	r2, [r3, #8]
 8000d14:	60da      	str	r2, [r3, #12]
 8000d16:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI3)
 8000d18:	687b      	ldr	r3, [r7, #4]
 8000d1a:	681b      	ldr	r3, [r3, #0]
 8000d1c:	4a17      	ldr	r2, [pc, #92]	; (8000d7c <HAL_SPI_MspInit+0x7c>)
 8000d1e:	4293      	cmp	r3, r2
 8000d20:	d128      	bne.n	8000d74 <HAL_SPI_MspInit+0x74>
  {
  /* USER CODE BEGIN SPI3_MspInit 0 */

  /* USER CODE END SPI3_MspInit 0 */
    /* SPI3 clock enable */
    __HAL_RCC_SPI3_CLK_ENABLE();
 8000d22:	4b17      	ldr	r3, [pc, #92]	; (8000d80 <HAL_SPI_MspInit+0x80>)
 8000d24:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000d26:	4a16      	ldr	r2, [pc, #88]	; (8000d80 <HAL_SPI_MspInit+0x80>)
 8000d28:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8000d2c:	6593      	str	r3, [r2, #88]	; 0x58
 8000d2e:	4b14      	ldr	r3, [pc, #80]	; (8000d80 <HAL_SPI_MspInit+0x80>)
 8000d30:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000d32:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8000d36:	613b      	str	r3, [r7, #16]
 8000d38:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000d3a:	4b11      	ldr	r3, [pc, #68]	; (8000d80 <HAL_SPI_MspInit+0x80>)
 8000d3c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000d3e:	4a10      	ldr	r2, [pc, #64]	; (8000d80 <HAL_SPI_MspInit+0x80>)
 8000d40:	f043 0304 	orr.w	r3, r3, #4
 8000d44:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000d46:	4b0e      	ldr	r3, [pc, #56]	; (8000d80 <HAL_SPI_MspInit+0x80>)
 8000d48:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000d4a:	f003 0304 	and.w	r3, r3, #4
 8000d4e:	60fb      	str	r3, [r7, #12]
 8000d50:	68fb      	ldr	r3, [r7, #12]
    /**SPI3 GPIO Configuration    
    PC10     ------> SPI3_SCK
    PC11     ------> SPI3_MISO
    PC12     ------> SPI3_MOSI 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12;
 8000d52:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 8000d56:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d58:	2302      	movs	r3, #2
 8000d5a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d5c:	2300      	movs	r3, #0
 8000d5e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d60:	2300      	movs	r3, #0
 8000d62:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8000d64:	2306      	movs	r3, #6
 8000d66:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000d68:	f107 0314 	add.w	r3, r7, #20
 8000d6c:	4619      	mov	r1, r3
 8000d6e:	4805      	ldr	r0, [pc, #20]	; (8000d84 <HAL_SPI_MspInit+0x84>)
 8000d70:	f002 fc88 	bl	8003684 <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }
}
 8000d74:	bf00      	nop
 8000d76:	3728      	adds	r7, #40	; 0x28
 8000d78:	46bd      	mov	sp, r7
 8000d7a:	bd80      	pop	{r7, pc}
 8000d7c:	40003c00 	.word	0x40003c00
 8000d80:	40021000 	.word	0x40021000
 8000d84:	48000800 	.word	0x48000800

08000d88 <LL_PWR_DisableUCPDDeadBattery>:
  *         control to the UCPD (which should therefore be initialized before doing the disable).
  * @rmtoll CR3          UCPD_DBDIS           LL_PWR_DisableUCPDDeadBattery
  * @retval None
  */
__STATIC_INLINE void LL_PWR_DisableUCPDDeadBattery(void)
{
 8000d88:	b480      	push	{r7}
 8000d8a:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR3, PWR_CR3_UCPD_DBDIS);
 8000d8c:	4b05      	ldr	r3, [pc, #20]	; (8000da4 <LL_PWR_DisableUCPDDeadBattery+0x1c>)
 8000d8e:	689b      	ldr	r3, [r3, #8]
 8000d90:	4a04      	ldr	r2, [pc, #16]	; (8000da4 <LL_PWR_DisableUCPDDeadBattery+0x1c>)
 8000d92:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000d96:	6093      	str	r3, [r2, #8]
}
 8000d98:	bf00      	nop
 8000d9a:	46bd      	mov	sp, r7
 8000d9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000da0:	4770      	bx	lr
 8000da2:	bf00      	nop
 8000da4:	40007000 	.word	0x40007000

08000da8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000da8:	b580      	push	{r7, lr}
 8000daa:	b082      	sub	sp, #8
 8000dac:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000dae:	4b0f      	ldr	r3, [pc, #60]	; (8000dec <HAL_MspInit+0x44>)
 8000db0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000db2:	4a0e      	ldr	r2, [pc, #56]	; (8000dec <HAL_MspInit+0x44>)
 8000db4:	f043 0301 	orr.w	r3, r3, #1
 8000db8:	6613      	str	r3, [r2, #96]	; 0x60
 8000dba:	4b0c      	ldr	r3, [pc, #48]	; (8000dec <HAL_MspInit+0x44>)
 8000dbc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000dbe:	f003 0301 	and.w	r3, r3, #1
 8000dc2:	607b      	str	r3, [r7, #4]
 8000dc4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000dc6:	4b09      	ldr	r3, [pc, #36]	; (8000dec <HAL_MspInit+0x44>)
 8000dc8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000dca:	4a08      	ldr	r2, [pc, #32]	; (8000dec <HAL_MspInit+0x44>)
 8000dcc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000dd0:	6593      	str	r3, [r2, #88]	; 0x58
 8000dd2:	4b06      	ldr	r3, [pc, #24]	; (8000dec <HAL_MspInit+0x44>)
 8000dd4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000dd6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000dda:	603b      	str	r3, [r7, #0]
 8000ddc:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral 
  */
  LL_PWR_DisableDeadBatteryPD();
 8000dde:	f7ff ffd3 	bl	8000d88 <LL_PWR_DisableUCPDDeadBattery>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000de2:	bf00      	nop
 8000de4:	3708      	adds	r7, #8
 8000de6:	46bd      	mov	sp, r7
 8000de8:	bd80      	pop	{r7, pc}
 8000dea:	bf00      	nop
 8000dec:	40021000 	.word	0x40021000

08000df0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000df0:	b480      	push	{r7}
 8000df2:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8000df4:	bf00      	nop
 8000df6:	46bd      	mov	sp, r7
 8000df8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dfc:	4770      	bx	lr

08000dfe <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000dfe:	b480      	push	{r7}
 8000e00:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000e02:	e7fe      	b.n	8000e02 <HardFault_Handler+0x4>

08000e04 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000e04:	b480      	push	{r7}
 8000e06:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000e08:	e7fe      	b.n	8000e08 <MemManage_Handler+0x4>

08000e0a <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000e0a:	b480      	push	{r7}
 8000e0c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000e0e:	e7fe      	b.n	8000e0e <BusFault_Handler+0x4>

08000e10 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000e10:	b480      	push	{r7}
 8000e12:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000e14:	e7fe      	b.n	8000e14 <UsageFault_Handler+0x4>

08000e16 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000e16:	b480      	push	{r7}
 8000e18:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000e1a:	bf00      	nop
 8000e1c:	46bd      	mov	sp, r7
 8000e1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e22:	4770      	bx	lr

08000e24 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000e24:	b480      	push	{r7}
 8000e26:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000e28:	bf00      	nop
 8000e2a:	46bd      	mov	sp, r7
 8000e2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e30:	4770      	bx	lr

08000e32 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000e32:	b480      	push	{r7}
 8000e34:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000e36:	bf00      	nop
 8000e38:	46bd      	mov	sp, r7
 8000e3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e3e:	4770      	bx	lr

08000e40 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000e40:	b580      	push	{r7, lr}
 8000e42:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000e44:	f000 fb54 	bl	80014f0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000e48:	bf00      	nop
 8000e4a:	bd80      	pop	{r7, pc}

08000e4c <EXTI2_IRQHandler>:

/**
  * @brief This function handles EXTI line2 interrupt.
  */
void EXTI2_IRQHandler(void)
{
 8000e4c:	b580      	push	{r7, lr}
 8000e4e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI2_IRQn 0 */
	printf("SW\n");
 8000e50:	4803      	ldr	r0, [pc, #12]	; (8000e60 <EXTI2_IRQHandler+0x14>)
 8000e52:	f005 ff3f 	bl	8006cd4 <puts>
  /* USER CODE END EXTI2_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_2);
 8000e56:	2004      	movs	r0, #4
 8000e58:	f002 fdc8 	bl	80039ec <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI2_IRQn 1 */

  /* USER CODE END EXTI2_IRQn 1 */
}
 8000e5c:	bf00      	nop
 8000e5e:	bd80      	pop	{r7, pc}
 8000e60:	08007530 	.word	0x08007530

08000e64 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 8000e64:	b580      	push	{r7, lr}
 8000e66:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */
	//printf("Test\n");
	//printf("%lu\n", trigger_input[0]);
  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8000e68:	4802      	ldr	r0, [pc, #8]	; (8000e74 <DMA1_Channel1_IRQHandler+0x10>)
 8000e6a:	f002 faf9 	bl	8003460 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 8000e6e:	bf00      	nop
 8000e70:	bd80      	pop	{r7, pc}
 8000e72:	bf00      	nop
 8000e74:	20000114 	.word	0x20000114

08000e78 <TIM1_UP_TIM16_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM16 global interrupt.
  */
void TIM1_UP_TIM16_IRQHandler(void)
{
 8000e78:	b580      	push	{r7, lr}
 8000e7a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8000e7c:	4802      	ldr	r0, [pc, #8]	; (8000e88 <TIM1_UP_TIM16_IRQHandler+0x10>)
 8000e7e:	f004 facb 	bl	8005418 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 1 */
}
 8000e82:	bf00      	nop
 8000e84:	bd80      	pop	{r7, pc}
 8000e86:	bf00      	nop
 8000e88:	200002d0 	.word	0x200002d0

08000e8c <TIM1_TRG_COM_TIM17_IRQHandler>:

/**
  * @brief This function handles TIM1 trigger and commutation interrupts and TIM17 global interrupt.
  */
void TIM1_TRG_COM_TIM17_IRQHandler(void)
{
 8000e8c:	b580      	push	{r7, lr}
 8000e8e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_TRG_COM_TIM17_IRQn 0 */
	update_dc_bias_sweep();
 8000e90:	f7ff fc2e 	bl	80006f0 <update_dc_bias_sweep>
	//printf("%lu\n", TIM1->CNT);
  /* USER CODE END TIM1_TRG_COM_TIM17_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8000e94:	4803      	ldr	r0, [pc, #12]	; (8000ea4 <TIM1_TRG_COM_TIM17_IRQHandler+0x18>)
 8000e96:	f004 fabf 	bl	8005418 <HAL_TIM_IRQHandler>
  HAL_TIM_IRQHandler(&htim17);
 8000e9a:	4803      	ldr	r0, [pc, #12]	; (8000ea8 <TIM1_TRG_COM_TIM17_IRQHandler+0x1c>)
 8000e9c:	f004 fabc 	bl	8005418 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_TRG_COM_TIM17_IRQn 1 */

  /* USER CODE END TIM1_TRG_COM_TIM17_IRQn 1 */
}
 8000ea0:	bf00      	nop
 8000ea2:	bd80      	pop	{r7, pc}
 8000ea4:	200002d0 	.word	0x200002d0
 8000ea8:	20000238 	.word	0x20000238

08000eac <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8000eac:	b580      	push	{r7, lr}
 8000eae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */
	HAL_GPIO_TogglePin(LED_TEST_GPIO_Port, LED_TEST_Pin);
 8000eb0:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000eb4:	4803      	ldr	r0, [pc, #12]	; (8000ec4 <TIM2_IRQHandler+0x18>)
 8000eb6:	f002 fd7f 	bl	80039b8 <HAL_GPIO_TogglePin>
  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8000eba:	4803      	ldr	r0, [pc, #12]	; (8000ec8 <TIM2_IRQHandler+0x1c>)
 8000ebc:	f004 faac 	bl	8005418 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8000ec0:	bf00      	nop
 8000ec2:	bd80      	pop	{r7, pc}
 8000ec4:	48000800 	.word	0x48000800
 8000ec8:	2000031c 	.word	0x2000031c

08000ecc <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000ecc:	b580      	push	{r7, lr}
 8000ece:	b086      	sub	sp, #24
 8000ed0:	af00      	add	r7, sp, #0
 8000ed2:	60f8      	str	r0, [r7, #12]
 8000ed4:	60b9      	str	r1, [r7, #8]
 8000ed6:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000ed8:	2300      	movs	r3, #0
 8000eda:	617b      	str	r3, [r7, #20]
 8000edc:	e00a      	b.n	8000ef4 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8000ede:	f3af 8000 	nop.w
 8000ee2:	4601      	mov	r1, r0
 8000ee4:	68bb      	ldr	r3, [r7, #8]
 8000ee6:	1c5a      	adds	r2, r3, #1
 8000ee8:	60ba      	str	r2, [r7, #8]
 8000eea:	b2ca      	uxtb	r2, r1
 8000eec:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000eee:	697b      	ldr	r3, [r7, #20]
 8000ef0:	3301      	adds	r3, #1
 8000ef2:	617b      	str	r3, [r7, #20]
 8000ef4:	697a      	ldr	r2, [r7, #20]
 8000ef6:	687b      	ldr	r3, [r7, #4]
 8000ef8:	429a      	cmp	r2, r3
 8000efa:	dbf0      	blt.n	8000ede <_read+0x12>
	}

return len;
 8000efc:	687b      	ldr	r3, [r7, #4]
}
 8000efe:	4618      	mov	r0, r3
 8000f00:	3718      	adds	r7, #24
 8000f02:	46bd      	mov	sp, r7
 8000f04:	bd80      	pop	{r7, pc}

08000f06 <_close>:
	}
	return len;
}

int _close(int file)
{
 8000f06:	b480      	push	{r7}
 8000f08:	b083      	sub	sp, #12
 8000f0a:	af00      	add	r7, sp, #0
 8000f0c:	6078      	str	r0, [r7, #4]
	return -1;
 8000f0e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8000f12:	4618      	mov	r0, r3
 8000f14:	370c      	adds	r7, #12
 8000f16:	46bd      	mov	sp, r7
 8000f18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f1c:	4770      	bx	lr

08000f1e <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000f1e:	b480      	push	{r7}
 8000f20:	b083      	sub	sp, #12
 8000f22:	af00      	add	r7, sp, #0
 8000f24:	6078      	str	r0, [r7, #4]
 8000f26:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8000f28:	683b      	ldr	r3, [r7, #0]
 8000f2a:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000f2e:	605a      	str	r2, [r3, #4]
	return 0;
 8000f30:	2300      	movs	r3, #0
}
 8000f32:	4618      	mov	r0, r3
 8000f34:	370c      	adds	r7, #12
 8000f36:	46bd      	mov	sp, r7
 8000f38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f3c:	4770      	bx	lr

08000f3e <_isatty>:

int _isatty(int file)
{
 8000f3e:	b480      	push	{r7}
 8000f40:	b083      	sub	sp, #12
 8000f42:	af00      	add	r7, sp, #0
 8000f44:	6078      	str	r0, [r7, #4]
	return 1;
 8000f46:	2301      	movs	r3, #1
}
 8000f48:	4618      	mov	r0, r3
 8000f4a:	370c      	adds	r7, #12
 8000f4c:	46bd      	mov	sp, r7
 8000f4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f52:	4770      	bx	lr

08000f54 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000f54:	b480      	push	{r7}
 8000f56:	b085      	sub	sp, #20
 8000f58:	af00      	add	r7, sp, #0
 8000f5a:	60f8      	str	r0, [r7, #12]
 8000f5c:	60b9      	str	r1, [r7, #8]
 8000f5e:	607a      	str	r2, [r7, #4]
	return 0;
 8000f60:	2300      	movs	r3, #0
}
 8000f62:	4618      	mov	r0, r3
 8000f64:	3714      	adds	r7, #20
 8000f66:	46bd      	mov	sp, r7
 8000f68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f6c:	4770      	bx	lr
	...

08000f70 <_sbrk>:
/**
 _sbrk
 Increase program data space. Malloc and related functions depend on this
**/
caddr_t _sbrk(int incr)
{
 8000f70:	b580      	push	{r7, lr}
 8000f72:	b084      	sub	sp, #16
 8000f74:	af00      	add	r7, sp, #0
 8000f76:	6078      	str	r0, [r7, #4]
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 8000f78:	4b11      	ldr	r3, [pc, #68]	; (8000fc0 <_sbrk+0x50>)
 8000f7a:	681b      	ldr	r3, [r3, #0]
 8000f7c:	2b00      	cmp	r3, #0
 8000f7e:	d102      	bne.n	8000f86 <_sbrk+0x16>
		heap_end = &end;
 8000f80:	4b0f      	ldr	r3, [pc, #60]	; (8000fc0 <_sbrk+0x50>)
 8000f82:	4a10      	ldr	r2, [pc, #64]	; (8000fc4 <_sbrk+0x54>)
 8000f84:	601a      	str	r2, [r3, #0]

	prev_heap_end = heap_end;
 8000f86:	4b0e      	ldr	r3, [pc, #56]	; (8000fc0 <_sbrk+0x50>)
 8000f88:	681b      	ldr	r3, [r3, #0]
 8000f8a:	60fb      	str	r3, [r7, #12]
	if (heap_end + incr > stack_ptr)
 8000f8c:	4b0c      	ldr	r3, [pc, #48]	; (8000fc0 <_sbrk+0x50>)
 8000f8e:	681a      	ldr	r2, [r3, #0]
 8000f90:	687b      	ldr	r3, [r7, #4]
 8000f92:	4413      	add	r3, r2
 8000f94:	466a      	mov	r2, sp
 8000f96:	4293      	cmp	r3, r2
 8000f98:	d907      	bls.n	8000faa <_sbrk+0x3a>
	{
		errno = ENOMEM;
 8000f9a:	f005 fe0d 	bl	8006bb8 <__errno>
 8000f9e:	4602      	mov	r2, r0
 8000fa0:	230c      	movs	r3, #12
 8000fa2:	6013      	str	r3, [r2, #0]
		return (caddr_t) -1;
 8000fa4:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8000fa8:	e006      	b.n	8000fb8 <_sbrk+0x48>
	}

	heap_end += incr;
 8000faa:	4b05      	ldr	r3, [pc, #20]	; (8000fc0 <_sbrk+0x50>)
 8000fac:	681a      	ldr	r2, [r3, #0]
 8000fae:	687b      	ldr	r3, [r7, #4]
 8000fb0:	4413      	add	r3, r2
 8000fb2:	4a03      	ldr	r2, [pc, #12]	; (8000fc0 <_sbrk+0x50>)
 8000fb4:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap_end;
 8000fb6:	68fb      	ldr	r3, [r7, #12]
}
 8000fb8:	4618      	mov	r0, r3
 8000fba:	3710      	adds	r7, #16
 8000fbc:	46bd      	mov	sp, r7
 8000fbe:	bd80      	pop	{r7, pc}
 8000fc0:	2000009c 	.word	0x2000009c
 8000fc4:	20000370 	.word	0x20000370

08000fc8 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 8000fc8:	b480      	push	{r7}
 8000fca:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8000fcc:	4b08      	ldr	r3, [pc, #32]	; (8000ff0 <SystemInit+0x28>)
 8000fce:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000fd2:	4a07      	ldr	r2, [pc, #28]	; (8000ff0 <SystemInit+0x28>)
 8000fd4:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000fd8:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8000fdc:	4b04      	ldr	r3, [pc, #16]	; (8000ff0 <SystemInit+0x28>)
 8000fde:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8000fe2:	609a      	str	r2, [r3, #8]
#endif
}
 8000fe4:	bf00      	nop
 8000fe6:	46bd      	mov	sp, r7
 8000fe8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fec:	4770      	bx	lr
 8000fee:	bf00      	nop
 8000ff0:	e000ed00 	.word	0xe000ed00

08000ff4 <MX_TIM1_Init>:
TIM_HandleTypeDef htim6;
TIM_HandleTypeDef htim17;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 8000ff4:	b580      	push	{r7, lr}
 8000ff6:	b09a      	sub	sp, #104	; 0x68
 8000ff8:	af00      	add	r7, sp, #0
  TIM_Encoder_InitTypeDef sConfig = {0};
 8000ffa:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8000ffe:	2224      	movs	r2, #36	; 0x24
 8001000:	2100      	movs	r1, #0
 8001002:	4618      	mov	r0, r3
 8001004:	f005 fe02 	bl	8006c0c <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001008:	f107 0338 	add.w	r3, r7, #56	; 0x38
 800100c:	2200      	movs	r2, #0
 800100e:	601a      	str	r2, [r3, #0]
 8001010:	605a      	str	r2, [r3, #4]
 8001012:	609a      	str	r2, [r3, #8]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8001014:	1d3b      	adds	r3, r7, #4
 8001016:	2234      	movs	r2, #52	; 0x34
 8001018:	2100      	movs	r1, #0
 800101a:	4618      	mov	r0, r3
 800101c:	f005 fdf6 	bl	8006c0c <memset>

  htim1.Instance = TIM1;
 8001020:	4b2a      	ldr	r3, [pc, #168]	; (80010cc <MX_TIM1_Init+0xd8>)
 8001022:	4a2b      	ldr	r2, [pc, #172]	; (80010d0 <MX_TIM1_Init+0xdc>)
 8001024:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 8001026:	4b29      	ldr	r3, [pc, #164]	; (80010cc <MX_TIM1_Init+0xd8>)
 8001028:	2200      	movs	r2, #0
 800102a:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 800102c:	4b27      	ldr	r3, [pc, #156]	; (80010cc <MX_TIM1_Init+0xd8>)
 800102e:	2200      	movs	r2, #0
 8001030:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 255;
 8001032:	4b26      	ldr	r3, [pc, #152]	; (80010cc <MX_TIM1_Init+0xd8>)
 8001034:	22ff      	movs	r2, #255	; 0xff
 8001036:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001038:	4b24      	ldr	r3, [pc, #144]	; (80010cc <MX_TIM1_Init+0xd8>)
 800103a:	2200      	movs	r2, #0
 800103c:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 800103e:	4b23      	ldr	r3, [pc, #140]	; (80010cc <MX_TIM1_Init+0xd8>)
 8001040:	2200      	movs	r2, #0
 8001042:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001044:	4b21      	ldr	r3, [pc, #132]	; (80010cc <MX_TIM1_Init+0xd8>)
 8001046:	2200      	movs	r2, #0
 8001048:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 800104a:	2303      	movs	r3, #3
 800104c:	647b      	str	r3, [r7, #68]	; 0x44
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 800104e:	2300      	movs	r3, #0
 8001050:	64bb      	str	r3, [r7, #72]	; 0x48
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8001052:	2301      	movs	r3, #1
 8001054:	64fb      	str	r3, [r7, #76]	; 0x4c
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8001056:	2300      	movs	r3, #0
 8001058:	653b      	str	r3, [r7, #80]	; 0x50
  sConfig.IC1Filter = 0;
 800105a:	2300      	movs	r3, #0
 800105c:	657b      	str	r3, [r7, #84]	; 0x54
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 800105e:	2300      	movs	r3, #0
 8001060:	65bb      	str	r3, [r7, #88]	; 0x58
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8001062:	2301      	movs	r3, #1
 8001064:	65fb      	str	r3, [r7, #92]	; 0x5c
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8001066:	2300      	movs	r3, #0
 8001068:	663b      	str	r3, [r7, #96]	; 0x60
  sConfig.IC2Filter = 0;
 800106a:	2300      	movs	r3, #0
 800106c:	667b      	str	r3, [r7, #100]	; 0x64
  if (HAL_TIM_Encoder_Init(&htim1, &sConfig) != HAL_OK)
 800106e:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8001072:	4619      	mov	r1, r3
 8001074:	4815      	ldr	r0, [pc, #84]	; (80010cc <MX_TIM1_Init+0xd8>)
 8001076:	f004 f929 	bl	80052cc <HAL_TIM_Encoder_Init>
 800107a:	4603      	mov	r3, r0
 800107c:	2b00      	cmp	r3, #0
 800107e:	d001      	beq.n	8001084 <MX_TIM1_Init+0x90>
  {
    Error_Handler();
 8001080:	f7ff fdc3 	bl	8000c0a <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001084:	2300      	movs	r3, #0
 8001086:	63bb      	str	r3, [r7, #56]	; 0x38
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8001088:	2300      	movs	r3, #0
 800108a:	63fb      	str	r3, [r7, #60]	; 0x3c
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800108c:	2300      	movs	r3, #0
 800108e:	643b      	str	r3, [r7, #64]	; 0x40
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8001090:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8001094:	4619      	mov	r1, r3
 8001096:	480d      	ldr	r0, [pc, #52]	; (80010cc <MX_TIM1_Init+0xd8>)
 8001098:	f004 fea2 	bl	8005de0 <HAL_TIMEx_MasterConfigSynchronization>
 800109c:	4603      	mov	r3, r0
 800109e:	2b00      	cmp	r3, #0
 80010a0:	d001      	beq.n	80010a6 <MX_TIM1_Init+0xb2>
  {
    Error_Handler();
 80010a2:	f7ff fdb2 	bl	8000c0a <Error_Handler>
  }
  sBreakDeadTimeConfig.BreakAFMode = TIM_BREAK_AFMODE_INPUT;
 80010a6:	2300      	movs	r3, #0
 80010a8:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2AFMode = TIM_BREAK_AFMODE_INPUT;
 80010aa:	2300      	movs	r3, #0
 80010ac:	633b      	str	r3, [r7, #48]	; 0x30
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 80010ae:	1d3b      	adds	r3, r7, #4
 80010b0:	4619      	mov	r1, r3
 80010b2:	4806      	ldr	r0, [pc, #24]	; (80010cc <MX_TIM1_Init+0xd8>)
 80010b4:	f004 ff2a 	bl	8005f0c <HAL_TIMEx_ConfigBreakDeadTime>
 80010b8:	4603      	mov	r3, r0
 80010ba:	2b00      	cmp	r3, #0
 80010bc:	d001      	beq.n	80010c2 <MX_TIM1_Init+0xce>
  {
    Error_Handler();
 80010be:	f7ff fda4 	bl	8000c0a <Error_Handler>
  }

}
 80010c2:	bf00      	nop
 80010c4:	3768      	adds	r7, #104	; 0x68
 80010c6:	46bd      	mov	sp, r7
 80010c8:	bd80      	pop	{r7, pc}
 80010ca:	bf00      	nop
 80010cc:	200002d0 	.word	0x200002d0
 80010d0:	40012c00 	.word	0x40012c00

080010d4 <MX_TIM2_Init>:
/* TIM2 init function */
void MX_TIM2_Init(void)
{
 80010d4:	b580      	push	{r7, lr}
 80010d6:	b08c      	sub	sp, #48	; 0x30
 80010d8:	af00      	add	r7, sp, #0
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80010da:	f107 0320 	add.w	r3, r7, #32
 80010de:	2200      	movs	r2, #0
 80010e0:	601a      	str	r2, [r3, #0]
 80010e2:	605a      	str	r2, [r3, #4]
 80010e4:	609a      	str	r2, [r3, #8]
 80010e6:	60da      	str	r2, [r3, #12]
  TIM_SlaveConfigTypeDef sSlaveConfig = {0};
 80010e8:	f107 030c 	add.w	r3, r7, #12
 80010ec:	2200      	movs	r2, #0
 80010ee:	601a      	str	r2, [r3, #0]
 80010f0:	605a      	str	r2, [r3, #4]
 80010f2:	609a      	str	r2, [r3, #8]
 80010f4:	60da      	str	r2, [r3, #12]
 80010f6:	611a      	str	r2, [r3, #16]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80010f8:	463b      	mov	r3, r7
 80010fa:	2200      	movs	r2, #0
 80010fc:	601a      	str	r2, [r3, #0]
 80010fe:	605a      	str	r2, [r3, #4]
 8001100:	609a      	str	r2, [r3, #8]

  htim2.Instance = TIM2;
 8001102:	4b28      	ldr	r3, [pc, #160]	; (80011a4 <MX_TIM2_Init+0xd0>)
 8001104:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001108:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 2047;
 800110a:	4b26      	ldr	r3, [pc, #152]	; (80011a4 <MX_TIM2_Init+0xd0>)
 800110c:	f240 72ff 	movw	r2, #2047	; 0x7ff
 8001110:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001112:	4b24      	ldr	r3, [pc, #144]	; (80011a4 <MX_TIM2_Init+0xd0>)
 8001114:	2200      	movs	r2, #0
 8001116:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 1024;
 8001118:	4b22      	ldr	r3, [pc, #136]	; (80011a4 <MX_TIM2_Init+0xd0>)
 800111a:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800111e:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001120:	4b20      	ldr	r3, [pc, #128]	; (80011a4 <MX_TIM2_Init+0xd0>)
 8001122:	2200      	movs	r2, #0
 8001124:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001126:	4b1f      	ldr	r3, [pc, #124]	; (80011a4 <MX_TIM2_Init+0xd0>)
 8001128:	2200      	movs	r2, #0
 800112a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 800112c:	481d      	ldr	r0, [pc, #116]	; (80011a4 <MX_TIM2_Init+0xd0>)
 800112e:	f004 f812 	bl	8005156 <HAL_TIM_Base_Init>
 8001132:	4603      	mov	r3, r0
 8001134:	2b00      	cmp	r3, #0
 8001136:	d001      	beq.n	800113c <MX_TIM2_Init+0x68>
  {
    Error_Handler();
 8001138:	f7ff fd67 	bl	8000c0a <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800113c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001140:	623b      	str	r3, [r7, #32]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8001142:	f107 0320 	add.w	r3, r7, #32
 8001146:	4619      	mov	r1, r3
 8001148:	4816      	ldr	r0, [pc, #88]	; (80011a4 <MX_TIM2_Init+0xd0>)
 800114a:	f004 fae5 	bl	8005718 <HAL_TIM_ConfigClockSource>
 800114e:	4603      	mov	r3, r0
 8001150:	2b00      	cmp	r3, #0
 8001152:	d001      	beq.n	8001158 <MX_TIM2_Init+0x84>
  {
    Error_Handler();
 8001154:	f7ff fd59 	bl	8000c0a <Error_Handler>
  }
  sSlaveConfig.SlaveMode = TIM_SLAVEMODE_GATED;
 8001158:	2305      	movs	r3, #5
 800115a:	60fb      	str	r3, [r7, #12]
  sSlaveConfig.InputTrigger = TIM_TS_TI1FP1;
 800115c:	2350      	movs	r3, #80	; 0x50
 800115e:	613b      	str	r3, [r7, #16]
  sSlaveConfig.TriggerPolarity = TIM_TRIGGERPOLARITY_RISING;
 8001160:	2300      	movs	r3, #0
 8001162:	617b      	str	r3, [r7, #20]
  sSlaveConfig.TriggerFilter = 0;
 8001164:	2300      	movs	r3, #0
 8001166:	61fb      	str	r3, [r7, #28]
  if (HAL_TIM_SlaveConfigSynchro(&htim2, &sSlaveConfig) != HAL_OK)
 8001168:	f107 030c 	add.w	r3, r7, #12
 800116c:	4619      	mov	r1, r3
 800116e:	480d      	ldr	r0, [pc, #52]	; (80011a4 <MX_TIM2_Init+0xd0>)
 8001170:	f004 fbc2 	bl	80058f8 <HAL_TIM_SlaveConfigSynchro>
 8001174:	4603      	mov	r3, r0
 8001176:	2b00      	cmp	r3, #0
 8001178:	d001      	beq.n	800117e <MX_TIM2_Init+0xaa>
  {
    Error_Handler();
 800117a:	f7ff fd46 	bl	8000c0a <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800117e:	2300      	movs	r3, #0
 8001180:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001182:	2300      	movs	r3, #0
 8001184:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001186:	463b      	mov	r3, r7
 8001188:	4619      	mov	r1, r3
 800118a:	4806      	ldr	r0, [pc, #24]	; (80011a4 <MX_TIM2_Init+0xd0>)
 800118c:	f004 fe28 	bl	8005de0 <HAL_TIMEx_MasterConfigSynchronization>
 8001190:	4603      	mov	r3, r0
 8001192:	2b00      	cmp	r3, #0
 8001194:	d001      	beq.n	800119a <MX_TIM2_Init+0xc6>
  {
    Error_Handler();
 8001196:	f7ff fd38 	bl	8000c0a <Error_Handler>
  }

}
 800119a:	bf00      	nop
 800119c:	3730      	adds	r7, #48	; 0x30
 800119e:	46bd      	mov	sp, r7
 80011a0:	bd80      	pop	{r7, pc}
 80011a2:	bf00      	nop
 80011a4:	2000031c 	.word	0x2000031c

080011a8 <MX_TIM6_Init>:
/* TIM6 init function */
void MX_TIM6_Init(void)
{
 80011a8:	b580      	push	{r7, lr}
 80011aa:	b084      	sub	sp, #16
 80011ac:	af00      	add	r7, sp, #0
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80011ae:	1d3b      	adds	r3, r7, #4
 80011b0:	2200      	movs	r2, #0
 80011b2:	601a      	str	r2, [r3, #0]
 80011b4:	605a      	str	r2, [r3, #4]
 80011b6:	609a      	str	r2, [r3, #8]

  htim6.Instance = TIM6;
 80011b8:	4b14      	ldr	r3, [pc, #80]	; (800120c <MX_TIM6_Init+0x64>)
 80011ba:	4a15      	ldr	r2, [pc, #84]	; (8001210 <MX_TIM6_Init+0x68>)
 80011bc:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 0;
 80011be:	4b13      	ldr	r3, [pc, #76]	; (800120c <MX_TIM6_Init+0x64>)
 80011c0:	2200      	movs	r2, #0
 80011c2:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 80011c4:	4b11      	ldr	r3, [pc, #68]	; (800120c <MX_TIM6_Init+0x64>)
 80011c6:	2200      	movs	r2, #0
 80011c8:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 1;
 80011ca:	4b10      	ldr	r3, [pc, #64]	; (800120c <MX_TIM6_Init+0x64>)
 80011cc:	2201      	movs	r2, #1
 80011ce:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80011d0:	4b0e      	ldr	r3, [pc, #56]	; (800120c <MX_TIM6_Init+0x64>)
 80011d2:	2200      	movs	r2, #0
 80011d4:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 80011d6:	480d      	ldr	r0, [pc, #52]	; (800120c <MX_TIM6_Init+0x64>)
 80011d8:	f003 ffbd 	bl	8005156 <HAL_TIM_Base_Init>
 80011dc:	4603      	mov	r3, r0
 80011de:	2b00      	cmp	r3, #0
 80011e0:	d001      	beq.n	80011e6 <MX_TIM6_Init+0x3e>
  {
    Error_Handler();
 80011e2:	f7ff fd12 	bl	8000c0a <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 80011e6:	2320      	movs	r3, #32
 80011e8:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80011ea:	2300      	movs	r3, #0
 80011ec:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 80011ee:	1d3b      	adds	r3, r7, #4
 80011f0:	4619      	mov	r1, r3
 80011f2:	4806      	ldr	r0, [pc, #24]	; (800120c <MX_TIM6_Init+0x64>)
 80011f4:	f004 fdf4 	bl	8005de0 <HAL_TIMEx_MasterConfigSynchronization>
 80011f8:	4603      	mov	r3, r0
 80011fa:	2b00      	cmp	r3, #0
 80011fc:	d001      	beq.n	8001202 <MX_TIM6_Init+0x5a>
  {
    Error_Handler();
 80011fe:	f7ff fd04 	bl	8000c0a <Error_Handler>
  }

}
 8001202:	bf00      	nop
 8001204:	3710      	adds	r7, #16
 8001206:	46bd      	mov	sp, r7
 8001208:	bd80      	pop	{r7, pc}
 800120a:	bf00      	nop
 800120c:	20000284 	.word	0x20000284
 8001210:	40001000 	.word	0x40001000

08001214 <MX_TIM17_Init>:
/* TIM17 init function */
void MX_TIM17_Init(void)
{
 8001214:	b580      	push	{r7, lr}
 8001216:	af00      	add	r7, sp, #0

  htim17.Instance = TIM17;
 8001218:	4b0f      	ldr	r3, [pc, #60]	; (8001258 <MX_TIM17_Init+0x44>)
 800121a:	4a10      	ldr	r2, [pc, #64]	; (800125c <MX_TIM17_Init+0x48>)
 800121c:	601a      	str	r2, [r3, #0]
  htim17.Init.Prescaler = 2047;
 800121e:	4b0e      	ldr	r3, [pc, #56]	; (8001258 <MX_TIM17_Init+0x44>)
 8001220:	f240 72ff 	movw	r2, #2047	; 0x7ff
 8001224:	605a      	str	r2, [r3, #4]
  htim17.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001226:	4b0c      	ldr	r3, [pc, #48]	; (8001258 <MX_TIM17_Init+0x44>)
 8001228:	2200      	movs	r2, #0
 800122a:	609a      	str	r2, [r3, #8]
  htim17.Init.Period = 64;
 800122c:	4b0a      	ldr	r3, [pc, #40]	; (8001258 <MX_TIM17_Init+0x44>)
 800122e:	2240      	movs	r2, #64	; 0x40
 8001230:	60da      	str	r2, [r3, #12]
  htim17.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001232:	4b09      	ldr	r3, [pc, #36]	; (8001258 <MX_TIM17_Init+0x44>)
 8001234:	2200      	movs	r2, #0
 8001236:	611a      	str	r2, [r3, #16]
  htim17.Init.RepetitionCounter = 0;
 8001238:	4b07      	ldr	r3, [pc, #28]	; (8001258 <MX_TIM17_Init+0x44>)
 800123a:	2200      	movs	r2, #0
 800123c:	615a      	str	r2, [r3, #20]
  htim17.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800123e:	4b06      	ldr	r3, [pc, #24]	; (8001258 <MX_TIM17_Init+0x44>)
 8001240:	2200      	movs	r2, #0
 8001242:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim17) != HAL_OK)
 8001244:	4804      	ldr	r0, [pc, #16]	; (8001258 <MX_TIM17_Init+0x44>)
 8001246:	f003 ff86 	bl	8005156 <HAL_TIM_Base_Init>
 800124a:	4603      	mov	r3, r0
 800124c:	2b00      	cmp	r3, #0
 800124e:	d001      	beq.n	8001254 <MX_TIM17_Init+0x40>
  {
    Error_Handler();
 8001250:	f7ff fcdb 	bl	8000c0a <Error_Handler>
  }

}
 8001254:	bf00      	nop
 8001256:	bd80      	pop	{r7, pc}
 8001258:	20000238 	.word	0x20000238
 800125c:	40014800 	.word	0x40014800

08001260 <HAL_TIM_Encoder_MspInit>:

void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* tim_encoderHandle)
{
 8001260:	b580      	push	{r7, lr}
 8001262:	b08a      	sub	sp, #40	; 0x28
 8001264:	af00      	add	r7, sp, #0
 8001266:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001268:	f107 0314 	add.w	r3, r7, #20
 800126c:	2200      	movs	r2, #0
 800126e:	601a      	str	r2, [r3, #0]
 8001270:	605a      	str	r2, [r3, #4]
 8001272:	609a      	str	r2, [r3, #8]
 8001274:	60da      	str	r2, [r3, #12]
 8001276:	611a      	str	r2, [r3, #16]
  if(tim_encoderHandle->Instance==TIM1)
 8001278:	687b      	ldr	r3, [r7, #4]
 800127a:	681b      	ldr	r3, [r3, #0]
 800127c:	4a1f      	ldr	r2, [pc, #124]	; (80012fc <HAL_TIM_Encoder_MspInit+0x9c>)
 800127e:	4293      	cmp	r3, r2
 8001280:	d137      	bne.n	80012f2 <HAL_TIM_Encoder_MspInit+0x92>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8001282:	4b1f      	ldr	r3, [pc, #124]	; (8001300 <HAL_TIM_Encoder_MspInit+0xa0>)
 8001284:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001286:	4a1e      	ldr	r2, [pc, #120]	; (8001300 <HAL_TIM_Encoder_MspInit+0xa0>)
 8001288:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 800128c:	6613      	str	r3, [r2, #96]	; 0x60
 800128e:	4b1c      	ldr	r3, [pc, #112]	; (8001300 <HAL_TIM_Encoder_MspInit+0xa0>)
 8001290:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001292:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001296:	613b      	str	r3, [r7, #16]
 8001298:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800129a:	4b19      	ldr	r3, [pc, #100]	; (8001300 <HAL_TIM_Encoder_MspInit+0xa0>)
 800129c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800129e:	4a18      	ldr	r2, [pc, #96]	; (8001300 <HAL_TIM_Encoder_MspInit+0xa0>)
 80012a0:	f043 0304 	orr.w	r3, r3, #4
 80012a4:	64d3      	str	r3, [r2, #76]	; 0x4c
 80012a6:	4b16      	ldr	r3, [pc, #88]	; (8001300 <HAL_TIM_Encoder_MspInit+0xa0>)
 80012a8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80012aa:	f003 0304 	and.w	r3, r3, #4
 80012ae:	60fb      	str	r3, [r7, #12]
 80012b0:	68fb      	ldr	r3, [r7, #12]
    /**TIM1 GPIO Configuration    
    PC0     ------> TIM1_CH1
    PC1     ------> TIM1_CH2 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 80012b2:	2303      	movs	r3, #3
 80012b4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80012b6:	2302      	movs	r3, #2
 80012b8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012ba:	2300      	movs	r3, #0
 80012bc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80012be:	2300      	movs	r3, #0
 80012c0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM1;
 80012c2:	2302      	movs	r3, #2
 80012c4:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80012c6:	f107 0314 	add.w	r3, r7, #20
 80012ca:	4619      	mov	r1, r3
 80012cc:	480d      	ldr	r0, [pc, #52]	; (8001304 <HAL_TIM_Encoder_MspInit+0xa4>)
 80012ce:	f002 f9d9 	bl	8003684 <HAL_GPIO_Init>

    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_UP_TIM16_IRQn, 0, 0);
 80012d2:	2200      	movs	r2, #0
 80012d4:	2100      	movs	r1, #0
 80012d6:	2019      	movs	r0, #25
 80012d8:	f001 fd65 	bl	8002da6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM16_IRQn);
 80012dc:	2019      	movs	r0, #25
 80012de:	f001 fd7c 	bl	8002dda <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM1_TRG_COM_TIM17_IRQn, 1, 0);
 80012e2:	2200      	movs	r2, #0
 80012e4:	2101      	movs	r1, #1
 80012e6:	201a      	movs	r0, #26
 80012e8:	f001 fd5d 	bl	8002da6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_TRG_COM_TIM17_IRQn);
 80012ec:	201a      	movs	r0, #26
 80012ee:	f001 fd74 	bl	8002dda <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }
}
 80012f2:	bf00      	nop
 80012f4:	3728      	adds	r7, #40	; 0x28
 80012f6:	46bd      	mov	sp, r7
 80012f8:	bd80      	pop	{r7, pc}
 80012fa:	bf00      	nop
 80012fc:	40012c00 	.word	0x40012c00
 8001300:	40021000 	.word	0x40021000
 8001304:	48000800 	.word	0x48000800

08001308 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8001308:	b580      	push	{r7, lr}
 800130a:	b08c      	sub	sp, #48	; 0x30
 800130c:	af00      	add	r7, sp, #0
 800130e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001310:	f107 031c 	add.w	r3, r7, #28
 8001314:	2200      	movs	r2, #0
 8001316:	601a      	str	r2, [r3, #0]
 8001318:	605a      	str	r2, [r3, #4]
 800131a:	609a      	str	r2, [r3, #8]
 800131c:	60da      	str	r2, [r3, #12]
 800131e:	611a      	str	r2, [r3, #16]
  if(tim_baseHandle->Instance==TIM2)
 8001320:	687b      	ldr	r3, [r7, #4]
 8001322:	681b      	ldr	r3, [r3, #0]
 8001324:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001328:	d131      	bne.n	800138e <HAL_TIM_Base_MspInit+0x86>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 800132a:	4b30      	ldr	r3, [pc, #192]	; (80013ec <HAL_TIM_Base_MspInit+0xe4>)
 800132c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800132e:	4a2f      	ldr	r2, [pc, #188]	; (80013ec <HAL_TIM_Base_MspInit+0xe4>)
 8001330:	f043 0301 	orr.w	r3, r3, #1
 8001334:	6593      	str	r3, [r2, #88]	; 0x58
 8001336:	4b2d      	ldr	r3, [pc, #180]	; (80013ec <HAL_TIM_Base_MspInit+0xe4>)
 8001338:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800133a:	f003 0301 	and.w	r3, r3, #1
 800133e:	61bb      	str	r3, [r7, #24]
 8001340:	69bb      	ldr	r3, [r7, #24]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001342:	4b2a      	ldr	r3, [pc, #168]	; (80013ec <HAL_TIM_Base_MspInit+0xe4>)
 8001344:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001346:	4a29      	ldr	r2, [pc, #164]	; (80013ec <HAL_TIM_Base_MspInit+0xe4>)
 8001348:	f043 0301 	orr.w	r3, r3, #1
 800134c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800134e:	4b27      	ldr	r3, [pc, #156]	; (80013ec <HAL_TIM_Base_MspInit+0xe4>)
 8001350:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001352:	f003 0301 	and.w	r3, r3, #1
 8001356:	617b      	str	r3, [r7, #20]
 8001358:	697b      	ldr	r3, [r7, #20]
    /**TIM2 GPIO Configuration    
    PA0     ------> TIM2_CH1 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 800135a:	2301      	movs	r3, #1
 800135c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800135e:	2302      	movs	r3, #2
 8001360:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001362:	2300      	movs	r3, #0
 8001364:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001366:	2300      	movs	r3, #0
 8001368:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 800136a:	2301      	movs	r3, #1
 800136c:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800136e:	f107 031c 	add.w	r3, r7, #28
 8001372:	4619      	mov	r1, r3
 8001374:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001378:	f002 f984 	bl	8003684 <HAL_GPIO_Init>

    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 1, 0);
 800137c:	2200      	movs	r2, #0
 800137e:	2101      	movs	r1, #1
 8001380:	201c      	movs	r0, #28
 8001382:	f001 fd10 	bl	8002da6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8001386:	201c      	movs	r0, #28
 8001388:	f001 fd27 	bl	8002dda <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(TIM1_TRG_COM_TIM17_IRQn);
  /* USER CODE BEGIN TIM17_MspInit 1 */

  /* USER CODE END TIM17_MspInit 1 */
  }
}
 800138c:	e02a      	b.n	80013e4 <HAL_TIM_Base_MspInit+0xdc>
  else if(tim_baseHandle->Instance==TIM6)
 800138e:	687b      	ldr	r3, [r7, #4]
 8001390:	681b      	ldr	r3, [r3, #0]
 8001392:	4a17      	ldr	r2, [pc, #92]	; (80013f0 <HAL_TIM_Base_MspInit+0xe8>)
 8001394:	4293      	cmp	r3, r2
 8001396:	d10c      	bne.n	80013b2 <HAL_TIM_Base_MspInit+0xaa>
    __HAL_RCC_TIM6_CLK_ENABLE();
 8001398:	4b14      	ldr	r3, [pc, #80]	; (80013ec <HAL_TIM_Base_MspInit+0xe4>)
 800139a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800139c:	4a13      	ldr	r2, [pc, #76]	; (80013ec <HAL_TIM_Base_MspInit+0xe4>)
 800139e:	f043 0310 	orr.w	r3, r3, #16
 80013a2:	6593      	str	r3, [r2, #88]	; 0x58
 80013a4:	4b11      	ldr	r3, [pc, #68]	; (80013ec <HAL_TIM_Base_MspInit+0xe4>)
 80013a6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80013a8:	f003 0310 	and.w	r3, r3, #16
 80013ac:	613b      	str	r3, [r7, #16]
 80013ae:	693b      	ldr	r3, [r7, #16]
}
 80013b0:	e018      	b.n	80013e4 <HAL_TIM_Base_MspInit+0xdc>
  else if(tim_baseHandle->Instance==TIM17)
 80013b2:	687b      	ldr	r3, [r7, #4]
 80013b4:	681b      	ldr	r3, [r3, #0]
 80013b6:	4a0f      	ldr	r2, [pc, #60]	; (80013f4 <HAL_TIM_Base_MspInit+0xec>)
 80013b8:	4293      	cmp	r3, r2
 80013ba:	d113      	bne.n	80013e4 <HAL_TIM_Base_MspInit+0xdc>
    __HAL_RCC_TIM17_CLK_ENABLE();
 80013bc:	4b0b      	ldr	r3, [pc, #44]	; (80013ec <HAL_TIM_Base_MspInit+0xe4>)
 80013be:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80013c0:	4a0a      	ldr	r2, [pc, #40]	; (80013ec <HAL_TIM_Base_MspInit+0xe4>)
 80013c2:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80013c6:	6613      	str	r3, [r2, #96]	; 0x60
 80013c8:	4b08      	ldr	r3, [pc, #32]	; (80013ec <HAL_TIM_Base_MspInit+0xe4>)
 80013ca:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80013cc:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80013d0:	60fb      	str	r3, [r7, #12]
 80013d2:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_SetPriority(TIM1_TRG_COM_TIM17_IRQn, 1, 0);
 80013d4:	2200      	movs	r2, #0
 80013d6:	2101      	movs	r1, #1
 80013d8:	201a      	movs	r0, #26
 80013da:	f001 fce4 	bl	8002da6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_TRG_COM_TIM17_IRQn);
 80013de:	201a      	movs	r0, #26
 80013e0:	f001 fcfb 	bl	8002dda <HAL_NVIC_EnableIRQ>
}
 80013e4:	bf00      	nop
 80013e6:	3730      	adds	r7, #48	; 0x30
 80013e8:	46bd      	mov	sp, r7
 80013ea:	bd80      	pop	{r7, pc}
 80013ec:	40021000 	.word	0x40021000
 80013f0:	40001000 	.word	0x40001000
 80013f4:	40014800 	.word	0x40014800

080013f8 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 80013f8:	480d      	ldr	r0, [pc, #52]	; (8001430 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 80013fa:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80013fc:	480d      	ldr	r0, [pc, #52]	; (8001434 <LoopForever+0x6>)
  ldr r1, =_edata
 80013fe:	490e      	ldr	r1, [pc, #56]	; (8001438 <LoopForever+0xa>)
  ldr r2, =_sidata
 8001400:	4a0e      	ldr	r2, [pc, #56]	; (800143c <LoopForever+0xe>)
  movs r3, #0
 8001402:	2300      	movs	r3, #0
  b	LoopCopyDataInit
 8001404:	e002      	b.n	800140c <LoopCopyDataInit>

08001406 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001406:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001408:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800140a:	3304      	adds	r3, #4

0800140c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800140c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800140e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001410:	d3f9      	bcc.n	8001406 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001412:	4a0b      	ldr	r2, [pc, #44]	; (8001440 <LoopForever+0x12>)
  ldr r4, =_ebss
 8001414:	4c0b      	ldr	r4, [pc, #44]	; (8001444 <LoopForever+0x16>)
  movs r3, #0
 8001416:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001418:	e001      	b.n	800141e <LoopFillZerobss>

0800141a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800141a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800141c:	3204      	adds	r2, #4

0800141e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800141e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001420:	d3fb      	bcc.n	800141a <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8001422:	f7ff fdd1 	bl	8000fc8 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001426:	f005 fbcd 	bl	8006bc4 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 800142a:	f7ff fae1 	bl	80009f0 <main>

0800142e <LoopForever>:

LoopForever:
    b LoopForever
 800142e:	e7fe      	b.n	800142e <LoopForever>
  ldr   r0, =_estack
 8001430:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8001434:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001438:	20000078 	.word	0x20000078
  ldr r2, =_sidata
 800143c:	080077f0 	.word	0x080077f0
  ldr r2, =_sbss
 8001440:	20000078 	.word	0x20000078
  ldr r4, =_ebss
 8001444:	20000370 	.word	0x20000370

08001448 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8001448:	e7fe      	b.n	8001448 <ADC1_2_IRQHandler>

0800144a <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800144a:	b580      	push	{r7, lr}
 800144c:	b082      	sub	sp, #8
 800144e:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8001450:	2300      	movs	r3, #0
 8001452:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001454:	2003      	movs	r0, #3
 8001456:	f001 fc9b 	bl	8002d90 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800145a:	2000      	movs	r0, #0
 800145c:	f000 f80e 	bl	800147c <HAL_InitTick>
 8001460:	4603      	mov	r3, r0
 8001462:	2b00      	cmp	r3, #0
 8001464:	d002      	beq.n	800146c <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8001466:	2301      	movs	r3, #1
 8001468:	71fb      	strb	r3, [r7, #7]
 800146a:	e001      	b.n	8001470 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 800146c:	f7ff fc9c 	bl	8000da8 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8001470:	79fb      	ldrb	r3, [r7, #7]

}
 8001472:	4618      	mov	r0, r3
 8001474:	3708      	adds	r7, #8
 8001476:	46bd      	mov	sp, r7
 8001478:	bd80      	pop	{r7, pc}
	...

0800147c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800147c:	b580      	push	{r7, lr}
 800147e:	b084      	sub	sp, #16
 8001480:	af00      	add	r7, sp, #0
 8001482:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8001484:	2300      	movs	r3, #0
 8001486:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 8001488:	4b16      	ldr	r3, [pc, #88]	; (80014e4 <HAL_InitTick+0x68>)
 800148a:	681b      	ldr	r3, [r3, #0]
 800148c:	2b00      	cmp	r3, #0
 800148e:	d022      	beq.n	80014d6 <HAL_InitTick+0x5a>
  {
    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 8001490:	4b15      	ldr	r3, [pc, #84]	; (80014e8 <HAL_InitTick+0x6c>)
 8001492:	681a      	ldr	r2, [r3, #0]
 8001494:	4b13      	ldr	r3, [pc, #76]	; (80014e4 <HAL_InitTick+0x68>)
 8001496:	681b      	ldr	r3, [r3, #0]
 8001498:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 800149c:	fbb1 f3f3 	udiv	r3, r1, r3
 80014a0:	fbb2 f3f3 	udiv	r3, r2, r3
 80014a4:	4618      	mov	r0, r3
 80014a6:	f001 fca6 	bl	8002df6 <HAL_SYSTICK_Config>
 80014aa:	4603      	mov	r3, r0
 80014ac:	2b00      	cmp	r3, #0
 80014ae:	d10f      	bne.n	80014d0 <HAL_InitTick+0x54>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80014b0:	687b      	ldr	r3, [r7, #4]
 80014b2:	2b0f      	cmp	r3, #15
 80014b4:	d809      	bhi.n	80014ca <HAL_InitTick+0x4e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80014b6:	2200      	movs	r2, #0
 80014b8:	6879      	ldr	r1, [r7, #4]
 80014ba:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80014be:	f001 fc72 	bl	8002da6 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80014c2:	4a0a      	ldr	r2, [pc, #40]	; (80014ec <HAL_InitTick+0x70>)
 80014c4:	687b      	ldr	r3, [r7, #4]
 80014c6:	6013      	str	r3, [r2, #0]
 80014c8:	e007      	b.n	80014da <HAL_InitTick+0x5e>
      }
      else
      {
        status = HAL_ERROR;
 80014ca:	2301      	movs	r3, #1
 80014cc:	73fb      	strb	r3, [r7, #15]
 80014ce:	e004      	b.n	80014da <HAL_InitTick+0x5e>
      }
    }
    else
    {
      status = HAL_ERROR;
 80014d0:	2301      	movs	r3, #1
 80014d2:	73fb      	strb	r3, [r7, #15]
 80014d4:	e001      	b.n	80014da <HAL_InitTick+0x5e>
    }
  }
  else
  {
    status = HAL_ERROR;
 80014d6:	2301      	movs	r3, #1
 80014d8:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 80014da:	7bfb      	ldrb	r3, [r7, #15]
}
 80014dc:	4618      	mov	r0, r3
 80014de:	3710      	adds	r7, #16
 80014e0:	46bd      	mov	sp, r7
 80014e2:	bd80      	pop	{r7, pc}
 80014e4:	2000000c 	.word	0x2000000c
 80014e8:	20000004 	.word	0x20000004
 80014ec:	20000008 	.word	0x20000008

080014f0 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80014f0:	b480      	push	{r7}
 80014f2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80014f4:	4b05      	ldr	r3, [pc, #20]	; (800150c <HAL_IncTick+0x1c>)
 80014f6:	681a      	ldr	r2, [r3, #0]
 80014f8:	4b05      	ldr	r3, [pc, #20]	; (8001510 <HAL_IncTick+0x20>)
 80014fa:	681b      	ldr	r3, [r3, #0]
 80014fc:	4413      	add	r3, r2
 80014fe:	4a03      	ldr	r2, [pc, #12]	; (800150c <HAL_IncTick+0x1c>)
 8001500:	6013      	str	r3, [r2, #0]
}
 8001502:	bf00      	nop
 8001504:	46bd      	mov	sp, r7
 8001506:	f85d 7b04 	ldr.w	r7, [sp], #4
 800150a:	4770      	bx	lr
 800150c:	20000368 	.word	0x20000368
 8001510:	2000000c 	.word	0x2000000c

08001514 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001514:	b480      	push	{r7}
 8001516:	af00      	add	r7, sp, #0
  return uwTick;
 8001518:	4b03      	ldr	r3, [pc, #12]	; (8001528 <HAL_GetTick+0x14>)
 800151a:	681b      	ldr	r3, [r3, #0]
}
 800151c:	4618      	mov	r0, r3
 800151e:	46bd      	mov	sp, r7
 8001520:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001524:	4770      	bx	lr
 8001526:	bf00      	nop
 8001528:	20000368 	.word	0x20000368

0800152c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800152c:	b580      	push	{r7, lr}
 800152e:	b084      	sub	sp, #16
 8001530:	af00      	add	r7, sp, #0
 8001532:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001534:	f7ff ffee 	bl	8001514 <HAL_GetTick>
 8001538:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800153a:	687b      	ldr	r3, [r7, #4]
 800153c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800153e:	68fb      	ldr	r3, [r7, #12]
 8001540:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8001544:	d004      	beq.n	8001550 <HAL_Delay+0x24>
  {
    wait += (uint32_t)(uwTickFreq);
 8001546:	4b09      	ldr	r3, [pc, #36]	; (800156c <HAL_Delay+0x40>)
 8001548:	681b      	ldr	r3, [r3, #0]
 800154a:	68fa      	ldr	r2, [r7, #12]
 800154c:	4413      	add	r3, r2
 800154e:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001550:	bf00      	nop
 8001552:	f7ff ffdf 	bl	8001514 <HAL_GetTick>
 8001556:	4602      	mov	r2, r0
 8001558:	68bb      	ldr	r3, [r7, #8]
 800155a:	1ad3      	subs	r3, r2, r3
 800155c:	68fa      	ldr	r2, [r7, #12]
 800155e:	429a      	cmp	r2, r3
 8001560:	d8f7      	bhi.n	8001552 <HAL_Delay+0x26>
  {
  }
}
 8001562:	bf00      	nop
 8001564:	3710      	adds	r7, #16
 8001566:	46bd      	mov	sp, r7
 8001568:	bd80      	pop	{r7, pc}
 800156a:	bf00      	nop
 800156c:	2000000c 	.word	0x2000000c

08001570 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 8001570:	b480      	push	{r7}
 8001572:	b083      	sub	sp, #12
 8001574:	af00      	add	r7, sp, #0
 8001576:	6078      	str	r0, [r7, #4]
 8001578:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 800157a:	687b      	ldr	r3, [r7, #4]
 800157c:	689b      	ldr	r3, [r3, #8]
 800157e:	f423 127c 	bic.w	r2, r3, #4128768	; 0x3f0000
 8001582:	683b      	ldr	r3, [r7, #0]
 8001584:	431a      	orrs	r2, r3
 8001586:	687b      	ldr	r3, [r7, #4]
 8001588:	609a      	str	r2, [r3, #8]
}
 800158a:	bf00      	nop
 800158c:	370c      	adds	r7, #12
 800158e:	46bd      	mov	sp, r7
 8001590:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001594:	4770      	bx	lr

08001596 <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 8001596:	b480      	push	{r7}
 8001598:	b083      	sub	sp, #12
 800159a:	af00      	add	r7, sp, #0
 800159c:	6078      	str	r0, [r7, #4]
 800159e:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL, PathInternal);
 80015a0:	687b      	ldr	r3, [r7, #4]
 80015a2:	689b      	ldr	r3, [r3, #8]
 80015a4:	f023 72e0 	bic.w	r2, r3, #29360128	; 0x1c00000
 80015a8:	683b      	ldr	r3, [r7, #0]
 80015aa:	431a      	orrs	r2, r3
 80015ac:	687b      	ldr	r3, [r7, #4]
 80015ae:	609a      	str	r2, [r3, #8]
}
 80015b0:	bf00      	nop
 80015b2:	370c      	adds	r7, #12
 80015b4:	46bd      	mov	sp, r7
 80015b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015ba:	4770      	bx	lr

080015bc <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON)
{
 80015bc:	b480      	push	{r7}
 80015be:	b083      	sub	sp, #12
 80015c0:	af00      	add	r7, sp, #0
 80015c2:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL));
 80015c4:	687b      	ldr	r3, [r7, #4]
 80015c6:	689b      	ldr	r3, [r3, #8]
 80015c8:	f003 73e0 	and.w	r3, r3, #29360128	; 0x1c00000
}
 80015cc:	4618      	mov	r0, r3
 80015ce:	370c      	adds	r7, #12
 80015d0:	46bd      	mov	sp, r7
 80015d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015d6:	4770      	bx	lr

080015d8 <LL_ADC_SetOffset>:
  *             Other channels are slow channels  allows: 6.5 (sampling) + 12.5 (conversion) = 19 ADC clock cycles (fADC) to convert in 12-bit resolution.\n
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 80015d8:	b490      	push	{r4, r7}
 80015da:	b084      	sub	sp, #16
 80015dc:	af00      	add	r7, sp, #0
 80015de:	60f8      	str	r0, [r7, #12]
 80015e0:	60b9      	str	r1, [r7, #8]
 80015e2:	607a      	str	r2, [r7, #4]
 80015e4:	603b      	str	r3, [r7, #0]
  register __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80015e6:	68fb      	ldr	r3, [r7, #12]
 80015e8:	3360      	adds	r3, #96	; 0x60
 80015ea:	461a      	mov	r2, r3
 80015ec:	68bb      	ldr	r3, [r7, #8]
 80015ee:	009b      	lsls	r3, r3, #2
 80015f0:	4413      	add	r3, r2
 80015f2:	461c      	mov	r4, r3

  MODIFY_REG(*preg,
 80015f4:	6822      	ldr	r2, [r4, #0]
 80015f6:	4b08      	ldr	r3, [pc, #32]	; (8001618 <LL_ADC_SetOffset+0x40>)
 80015f8:	4013      	ands	r3, r2
 80015fa:	687a      	ldr	r2, [r7, #4]
 80015fc:	f002 41f8 	and.w	r1, r2, #2080374784	; 0x7c000000
 8001600:	683a      	ldr	r2, [r7, #0]
 8001602:	430a      	orrs	r2, r1
 8001604:	4313      	orrs	r3, r2
 8001606:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800160a:	6023      	str	r3, [r4, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 800160c:	bf00      	nop
 800160e:	3710      	adds	r7, #16
 8001610:	46bd      	mov	sp, r7
 8001612:	bc90      	pop	{r4, r7}
 8001614:	4770      	bx	lr
 8001616:	bf00      	nop
 8001618:	03fff000 	.word	0x03fff000

0800161c <LL_ADC_GetOffsetChannel>:
  *         (1, 2, 3, 4, 5, 7) For ADC channel read back from ADC register,
  *                      comparison with internal channel parameter to be done
  *                      using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(ADC_TypeDef *ADCx, uint32_t Offsety)
{
 800161c:	b490      	push	{r4, r7}
 800161e:	b082      	sub	sp, #8
 8001620:	af00      	add	r7, sp, #0
 8001622:	6078      	str	r0, [r7, #4]
 8001624:	6039      	str	r1, [r7, #0]
  register const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001626:	687b      	ldr	r3, [r7, #4]
 8001628:	3360      	adds	r3, #96	; 0x60
 800162a:	461a      	mov	r2, r3
 800162c:	683b      	ldr	r3, [r7, #0]
 800162e:	009b      	lsls	r3, r3, #2
 8001630:	4413      	add	r3, r2
 8001632:	461c      	mov	r4, r3

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8001634:	6823      	ldr	r3, [r4, #0]
 8001636:	f003 43f8 	and.w	r3, r3, #2080374784	; 0x7c000000
}
 800163a:	4618      	mov	r0, r3
 800163c:	3708      	adds	r7, #8
 800163e:	46bd      	mov	sp, r7
 8001640:	bc90      	pop	{r4, r7}
 8001642:	4770      	bx	lr

08001644 <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 8001644:	b490      	push	{r4, r7}
 8001646:	b084      	sub	sp, #16
 8001648:	af00      	add	r7, sp, #0
 800164a:	60f8      	str	r0, [r7, #12]
 800164c:	60b9      	str	r1, [r7, #8]
 800164e:	607a      	str	r2, [r7, #4]
  register __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001650:	68fb      	ldr	r3, [r7, #12]
 8001652:	3360      	adds	r3, #96	; 0x60
 8001654:	461a      	mov	r2, r3
 8001656:	68bb      	ldr	r3, [r7, #8]
 8001658:	009b      	lsls	r3, r3, #2
 800165a:	4413      	add	r3, r2
 800165c:	461c      	mov	r4, r3

  MODIFY_REG(*preg,
 800165e:	6823      	ldr	r3, [r4, #0]
 8001660:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8001664:	687b      	ldr	r3, [r7, #4]
 8001666:	4313      	orrs	r3, r2
 8001668:	6023      	str	r3, [r4, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 800166a:	bf00      	nop
 800166c:	3710      	adds	r7, #16
 800166e:	46bd      	mov	sp, r7
 8001670:	bc90      	pop	{r4, r7}
 8001672:	4770      	bx	lr

08001674 <LL_ADC_SetOffsetSign>:
  *         @arg @ref LL_ADC_OFFSET_SIGN_NEGATIVE
  *         @arg @ref LL_ADC_OFFSET_SIGN_POSITIVE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSign(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSign)
{
 8001674:	b490      	push	{r4, r7}
 8001676:	b084      	sub	sp, #16
 8001678:	af00      	add	r7, sp, #0
 800167a:	60f8      	str	r0, [r7, #12]
 800167c:	60b9      	str	r1, [r7, #8]
 800167e:	607a      	str	r2, [r7, #4]
  register __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001680:	68fb      	ldr	r3, [r7, #12]
 8001682:	3360      	adds	r3, #96	; 0x60
 8001684:	461a      	mov	r2, r3
 8001686:	68bb      	ldr	r3, [r7, #8]
 8001688:	009b      	lsls	r3, r3, #2
 800168a:	4413      	add	r3, r2
 800168c:	461c      	mov	r4, r3

  MODIFY_REG(*preg,
 800168e:	6823      	ldr	r3, [r4, #0]
 8001690:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 8001694:	687b      	ldr	r3, [r7, #4]
 8001696:	4313      	orrs	r3, r2
 8001698:	6023      	str	r3, [r4, #0]
             ADC_OFR1_OFFSETPOS,
             OffsetSign);
}
 800169a:	bf00      	nop
 800169c:	3710      	adds	r7, #16
 800169e:	46bd      	mov	sp, r7
 80016a0:	bc90      	pop	{r4, r7}
 80016a2:	4770      	bx	lr

080016a4 <LL_ADC_SetOffsetSaturation>:
  *         @arg @ref LL_ADC_OFFSET_SATURATION_ENABLE
  *         @arg @ref LL_ADC_OFFSET_SATURATION_DISABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSaturation(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSaturation)
{
 80016a4:	b490      	push	{r4, r7}
 80016a6:	b084      	sub	sp, #16
 80016a8:	af00      	add	r7, sp, #0
 80016aa:	60f8      	str	r0, [r7, #12]
 80016ac:	60b9      	str	r1, [r7, #8]
 80016ae:	607a      	str	r2, [r7, #4]
  register __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80016b0:	68fb      	ldr	r3, [r7, #12]
 80016b2:	3360      	adds	r3, #96	; 0x60
 80016b4:	461a      	mov	r2, r3
 80016b6:	68bb      	ldr	r3, [r7, #8]
 80016b8:	009b      	lsls	r3, r3, #2
 80016ba:	4413      	add	r3, r2
 80016bc:	461c      	mov	r4, r3

  MODIFY_REG(*preg,
 80016be:	6823      	ldr	r3, [r4, #0]
 80016c0:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 80016c4:	687b      	ldr	r3, [r7, #4]
 80016c6:	4313      	orrs	r3, r2
 80016c8:	6023      	str	r3, [r4, #0]
             ADC_OFR1_SATEN,
             OffsetSaturation);
}
 80016ca:	bf00      	nop
 80016cc:	3710      	adds	r7, #16
 80016ce:	46bd      	mov	sp, r7
 80016d0:	bc90      	pop	{r4, r7}
 80016d2:	4770      	bx	lr

080016d4 <LL_ADC_SetSamplingTimeCommonConfig>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_DEFAULT
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetSamplingTimeCommonConfig(ADC_TypeDef *ADCx, uint32_t SamplingTimeCommonConfig)
{
 80016d4:	b480      	push	{r7}
 80016d6:	b083      	sub	sp, #12
 80016d8:	af00      	add	r7, sp, #0
 80016da:	6078      	str	r0, [r7, #4]
 80016dc:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->SMPR1, ADC_SMPR1_SMPPLUS, SamplingTimeCommonConfig);
 80016de:	687b      	ldr	r3, [r7, #4]
 80016e0:	695b      	ldr	r3, [r3, #20]
 80016e2:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 80016e6:	683b      	ldr	r3, [r7, #0]
 80016e8:	431a      	orrs	r2, r3
 80016ea:	687b      	ldr	r3, [r7, #4]
 80016ec:	615a      	str	r2, [r3, #20]
}
 80016ee:	bf00      	nop
 80016f0:	370c      	adds	r7, #12
 80016f2:	46bd      	mov	sp, r7
 80016f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016f8:	4770      	bx	lr

080016fa <LL_ADC_REG_SetSequencerRanks>:
  *         (8) On STM32G4, fast channel allows: 2.5 (sampling) + 12.5 (conversion) = 15 ADC clock cycles (fADC) to convert in 12-bit resolution.
  *             Other channels are slow channels  allows: 6.5 (sampling) + 12.5 (conversion) = 19 ADC clock cycles (fADC) to convert in 12-bit resolution.\n
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 80016fa:	b490      	push	{r4, r7}
 80016fc:	b084      	sub	sp, #16
 80016fe:	af00      	add	r7, sp, #0
 8001700:	60f8      	str	r0, [r7, #12]
 8001702:	60b9      	str	r1, [r7, #8]
 8001704:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  register __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 8001706:	68fb      	ldr	r3, [r7, #12]
 8001708:	3330      	adds	r3, #48	; 0x30
 800170a:	461a      	mov	r2, r3
 800170c:	68bb      	ldr	r3, [r7, #8]
 800170e:	0a1b      	lsrs	r3, r3, #8
 8001710:	009b      	lsls	r3, r3, #2
 8001712:	f003 030c 	and.w	r3, r3, #12
 8001716:	4413      	add	r3, r2
 8001718:	461c      	mov	r4, r3

  MODIFY_REG(*preg,
 800171a:	6822      	ldr	r2, [r4, #0]
 800171c:	68bb      	ldr	r3, [r7, #8]
 800171e:	f003 031f 	and.w	r3, r3, #31
 8001722:	211f      	movs	r1, #31
 8001724:	fa01 f303 	lsl.w	r3, r1, r3
 8001728:	43db      	mvns	r3, r3
 800172a:	401a      	ands	r2, r3
 800172c:	687b      	ldr	r3, [r7, #4]
 800172e:	0e9b      	lsrs	r3, r3, #26
 8001730:	f003 011f 	and.w	r1, r3, #31
 8001734:	68bb      	ldr	r3, [r7, #8]
 8001736:	f003 031f 	and.w	r3, r3, #31
 800173a:	fa01 f303 	lsl.w	r3, r1, r3
 800173e:	4313      	orrs	r3, r2
 8001740:	6023      	str	r3, [r4, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS) << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 8001742:	bf00      	nop
 8001744:	3710      	adds	r7, #16
 8001746:	46bd      	mov	sp, r7
 8001748:	bc90      	pop	{r4, r7}
 800174a:	4770      	bx	lr

0800174c <LL_ADC_SetChannelSamplingTime>:
  *             can be replaced by 3.5 ADC clock cycles.
  *             Refer to function @ref LL_ADC_SetSamplingTimeCommonConfig().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 800174c:	b490      	push	{r4, r7}
 800174e:	b084      	sub	sp, #16
 8001750:	af00      	add	r7, sp, #0
 8001752:	60f8      	str	r0, [r7, #12]
 8001754:	60b9      	str	r1, [r7, #8]
 8001756:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  register __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 8001758:	68fb      	ldr	r3, [r7, #12]
 800175a:	3314      	adds	r3, #20
 800175c:	461a      	mov	r2, r3
 800175e:	68bb      	ldr	r3, [r7, #8]
 8001760:	0e5b      	lsrs	r3, r3, #25
 8001762:	009b      	lsls	r3, r3, #2
 8001764:	f003 0304 	and.w	r3, r3, #4
 8001768:	4413      	add	r3, r2
 800176a:	461c      	mov	r4, r3

  MODIFY_REG(*preg,
 800176c:	6822      	ldr	r2, [r4, #0]
 800176e:	68bb      	ldr	r3, [r7, #8]
 8001770:	0d1b      	lsrs	r3, r3, #20
 8001772:	f003 031f 	and.w	r3, r3, #31
 8001776:	2107      	movs	r1, #7
 8001778:	fa01 f303 	lsl.w	r3, r1, r3
 800177c:	43db      	mvns	r3, r3
 800177e:	401a      	ands	r2, r3
 8001780:	68bb      	ldr	r3, [r7, #8]
 8001782:	0d1b      	lsrs	r3, r3, #20
 8001784:	f003 031f 	and.w	r3, r3, #31
 8001788:	6879      	ldr	r1, [r7, #4]
 800178a:	fa01 f303 	lsl.w	r3, r1, r3
 800178e:	4313      	orrs	r3, r2
 8001790:	6023      	str	r3, [r4, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 8001792:	bf00      	nop
 8001794:	3710      	adds	r7, #16
 8001796:	46bd      	mov	sp, r7
 8001798:	bc90      	pop	{r4, r7}
 800179a:	4770      	bx	lr

0800179c <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 800179c:	b480      	push	{r7}
 800179e:	b085      	sub	sp, #20
 80017a0:	af00      	add	r7, sp, #0
 80017a2:	60f8      	str	r0, [r7, #12]
 80017a4:	60b9      	str	r1, [r7, #8]
 80017a6:	607a      	str	r2, [r7, #4]
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 80017a8:	68fb      	ldr	r3, [r7, #12]
 80017aa:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 80017ae:	68bb      	ldr	r3, [r7, #8]
 80017b0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80017b4:	43db      	mvns	r3, r3
 80017b6:	401a      	ands	r2, r3
 80017b8:	687b      	ldr	r3, [r7, #4]
 80017ba:	f003 0318 	and.w	r3, r3, #24
 80017be:	4908      	ldr	r1, [pc, #32]	; (80017e0 <LL_ADC_SetChannelSingleDiff+0x44>)
 80017c0:	40d9      	lsrs	r1, r3
 80017c2:	68bb      	ldr	r3, [r7, #8]
 80017c4:	400b      	ands	r3, r1
 80017c6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80017ca:	431a      	orrs	r2, r3
 80017cc:	68fb      	ldr	r3, [r7, #12]
 80017ce:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK) & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
}
 80017d2:	bf00      	nop
 80017d4:	3714      	adds	r7, #20
 80017d6:	46bd      	mov	sp, r7
 80017d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017dc:	4770      	bx	lr
 80017de:	bf00      	nop
 80017e0:	0007ffff 	.word	0x0007ffff

080017e4 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 80017e4:	b480      	push	{r7}
 80017e6:	b083      	sub	sp, #12
 80017e8:	af00      	add	r7, sp, #0
 80017ea:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 80017ec:	687b      	ldr	r3, [r7, #4]
 80017ee:	689b      	ldr	r3, [r3, #8]
 80017f0:	f023 4320 	bic.w	r3, r3, #2684354560	; 0xa0000000
 80017f4:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 80017f8:	687a      	ldr	r2, [r7, #4]
 80017fa:	6093      	str	r3, [r2, #8]
}
 80017fc:	bf00      	nop
 80017fe:	370c      	adds	r7, #12
 8001800:	46bd      	mov	sp, r7
 8001802:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001806:	4770      	bx	lr

08001808 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(ADC_TypeDef *ADCx)
{
 8001808:	b480      	push	{r7}
 800180a:	b083      	sub	sp, #12
 800180c:	af00      	add	r7, sp, #0
 800180e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8001810:	687b      	ldr	r3, [r7, #4]
 8001812:	689b      	ldr	r3, [r3, #8]
 8001814:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8001818:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800181c:	d101      	bne.n	8001822 <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 800181e:	2301      	movs	r3, #1
 8001820:	e000      	b.n	8001824 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 8001822:	2300      	movs	r3, #0
}
 8001824:	4618      	mov	r0, r3
 8001826:	370c      	adds	r7, #12
 8001828:	46bd      	mov	sp, r7
 800182a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800182e:	4770      	bx	lr

08001830 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8001830:	b480      	push	{r7}
 8001832:	b083      	sub	sp, #12
 8001834:	af00      	add	r7, sp, #0
 8001836:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001838:	687b      	ldr	r3, [r7, #4]
 800183a:	689b      	ldr	r3, [r3, #8]
 800183c:	f023 4310 	bic.w	r3, r3, #2415919104	; 0x90000000
 8001840:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8001844:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8001848:	687b      	ldr	r3, [r7, #4]
 800184a:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 800184c:	bf00      	nop
 800184e:	370c      	adds	r7, #12
 8001850:	46bd      	mov	sp, r7
 8001852:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001856:	4770      	bx	lr

08001858 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
{
 8001858:	b480      	push	{r7}
 800185a:	b083      	sub	sp, #12
 800185c:	af00      	add	r7, sp, #0
 800185e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8001860:	687b      	ldr	r3, [r7, #4]
 8001862:	689b      	ldr	r3, [r3, #8]
 8001864:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001868:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800186c:	d101      	bne.n	8001872 <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 800186e:	2301      	movs	r3, #1
 8001870:	e000      	b.n	8001874 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 8001872:	2300      	movs	r3, #0
}
 8001874:	4618      	mov	r0, r3
 8001876:	370c      	adds	r7, #12
 8001878:	46bd      	mov	sp, r7
 800187a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800187e:	4770      	bx	lr

08001880 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
 8001880:	b480      	push	{r7}
 8001882:	b083      	sub	sp, #12
 8001884:	af00      	add	r7, sp, #0
 8001886:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8001888:	687b      	ldr	r3, [r7, #4]
 800188a:	689b      	ldr	r3, [r3, #8]
 800188c:	f003 0301 	and.w	r3, r3, #1
 8001890:	2b01      	cmp	r3, #1
 8001892:	d101      	bne.n	8001898 <LL_ADC_IsEnabled+0x18>
 8001894:	2301      	movs	r3, #1
 8001896:	e000      	b.n	800189a <LL_ADC_IsEnabled+0x1a>
 8001898:	2300      	movs	r3, #0
}
 800189a:	4618      	mov	r0, r3
 800189c:	370c      	adds	r7, #12
 800189e:	46bd      	mov	sp, r7
 80018a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018a4:	4770      	bx	lr

080018a6 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 80018a6:	b480      	push	{r7}
 80018a8:	b083      	sub	sp, #12
 80018aa:	af00      	add	r7, sp, #0
 80018ac:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 80018ae:	687b      	ldr	r3, [r7, #4]
 80018b0:	689b      	ldr	r3, [r3, #8]
 80018b2:	f003 0304 	and.w	r3, r3, #4
 80018b6:	2b04      	cmp	r3, #4
 80018b8:	d101      	bne.n	80018be <LL_ADC_REG_IsConversionOngoing+0x18>
 80018ba:	2301      	movs	r3, #1
 80018bc:	e000      	b.n	80018c0 <LL_ADC_REG_IsConversionOngoing+0x1a>
 80018be:	2300      	movs	r3, #0
}
 80018c0:	4618      	mov	r0, r3
 80018c2:	370c      	adds	r7, #12
 80018c4:	46bd      	mov	sp, r7
 80018c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018ca:	4770      	bx	lr

080018cc <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 80018cc:	b480      	push	{r7}
 80018ce:	b083      	sub	sp, #12
 80018d0:	af00      	add	r7, sp, #0
 80018d2:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 80018d4:	687b      	ldr	r3, [r7, #4]
 80018d6:	689b      	ldr	r3, [r3, #8]
 80018d8:	f003 0308 	and.w	r3, r3, #8
 80018dc:	2b08      	cmp	r3, #8
 80018de:	d101      	bne.n	80018e4 <LL_ADC_INJ_IsConversionOngoing+0x18>
 80018e0:	2301      	movs	r3, #1
 80018e2:	e000      	b.n	80018e6 <LL_ADC_INJ_IsConversionOngoing+0x1a>
 80018e4:	2300      	movs	r3, #0
}
 80018e6:	4618      	mov	r0, r3
 80018e8:	370c      	adds	r7, #12
 80018ea:	46bd      	mov	sp, r7
 80018ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018f0:	4770      	bx	lr
	...

080018f4 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 80018f4:	b590      	push	{r4, r7, lr}
 80018f6:	b089      	sub	sp, #36	; 0x24
 80018f8:	af00      	add	r7, sp, #0
 80018fa:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80018fc:	2300      	movs	r3, #0
 80018fe:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpCFGR;
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 8001900:	2300      	movs	r3, #0
 8001902:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;

  /* Check ADC handle */
  if (hadc == NULL)
 8001904:	687b      	ldr	r3, [r7, #4]
 8001906:	2b00      	cmp	r3, #0
 8001908:	d101      	bne.n	800190e <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 800190a:	2301      	movs	r3, #1
 800190c:	e1ad      	b.n	8001c6a <HAL_ADC_Init+0x376>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 800190e:	687b      	ldr	r3, [r7, #4]
 8001910:	695b      	ldr	r3, [r3, #20]
 8001912:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8001914:	687b      	ldr	r3, [r7, #4]
 8001916:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001918:	2b00      	cmp	r3, #0
 800191a:	d109      	bne.n	8001930 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 800191c:	6878      	ldr	r0, [r7, #4]
 800191e:	f7fe fcf3 	bl	8000308 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8001922:	687b      	ldr	r3, [r7, #4]
 8001924:	2200      	movs	r2, #0
 8001926:	661a      	str	r2, [r3, #96]	; 0x60

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8001928:	687b      	ldr	r3, [r7, #4]
 800192a:	2200      	movs	r2, #0
 800192c:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8001930:	687b      	ldr	r3, [r7, #4]
 8001932:	681b      	ldr	r3, [r3, #0]
 8001934:	4618      	mov	r0, r3
 8001936:	f7ff ff67 	bl	8001808 <LL_ADC_IsDeepPowerDownEnabled>
 800193a:	4603      	mov	r3, r0
 800193c:	2b00      	cmp	r3, #0
 800193e:	d004      	beq.n	800194a <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 8001940:	687b      	ldr	r3, [r7, #4]
 8001942:	681b      	ldr	r3, [r3, #0]
 8001944:	4618      	mov	r0, r3
 8001946:	f7ff ff4d 	bl	80017e4 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 800194a:	687b      	ldr	r3, [r7, #4]
 800194c:	681b      	ldr	r3, [r3, #0]
 800194e:	4618      	mov	r0, r3
 8001950:	f7ff ff82 	bl	8001858 <LL_ADC_IsInternalRegulatorEnabled>
 8001954:	4603      	mov	r3, r0
 8001956:	2b00      	cmp	r3, #0
 8001958:	d113      	bne.n	8001982 <HAL_ADC_Init+0x8e>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 800195a:	687b      	ldr	r3, [r7, #4]
 800195c:	681b      	ldr	r3, [r3, #0]
 800195e:	4618      	mov	r0, r3
 8001960:	f7ff ff66 	bl	8001830 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * (SystemCoreClock / (100000UL * 2UL)));
 8001964:	4b9e      	ldr	r3, [pc, #632]	; (8001be0 <HAL_ADC_Init+0x2ec>)
 8001966:	681b      	ldr	r3, [r3, #0]
 8001968:	099b      	lsrs	r3, r3, #6
 800196a:	4a9e      	ldr	r2, [pc, #632]	; (8001be4 <HAL_ADC_Init+0x2f0>)
 800196c:	fba2 2303 	umull	r2, r3, r2, r3
 8001970:	099b      	lsrs	r3, r3, #6
 8001972:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8001974:	e002      	b.n	800197c <HAL_ADC_Init+0x88>
    {
      wait_loop_index--;
 8001976:	68bb      	ldr	r3, [r7, #8]
 8001978:	3b01      	subs	r3, #1
 800197a:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 800197c:	68bb      	ldr	r3, [r7, #8]
 800197e:	2b00      	cmp	r3, #0
 8001980:	d1f9      	bne.n	8001976 <HAL_ADC_Init+0x82>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8001982:	687b      	ldr	r3, [r7, #4]
 8001984:	681b      	ldr	r3, [r3, #0]
 8001986:	4618      	mov	r0, r3
 8001988:	f7ff ff66 	bl	8001858 <LL_ADC_IsInternalRegulatorEnabled>
 800198c:	4603      	mov	r3, r0
 800198e:	2b00      	cmp	r3, #0
 8001990:	d10d      	bne.n	80019ae <HAL_ADC_Init+0xba>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001992:	687b      	ldr	r3, [r7, #4]
 8001994:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001996:	f043 0210 	orr.w	r2, r3, #16
 800199a:	687b      	ldr	r3, [r7, #4]
 800199c:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800199e:	687b      	ldr	r3, [r7, #4]
 80019a0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80019a2:	f043 0201 	orr.w	r2, r3, #1
 80019a6:	687b      	ldr	r3, [r7, #4]
 80019a8:	661a      	str	r2, [r3, #96]	; 0x60

    tmp_hal_status = HAL_ERROR;
 80019aa:	2301      	movs	r3, #1
 80019ac:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80019ae:	687b      	ldr	r3, [r7, #4]
 80019b0:	681b      	ldr	r3, [r3, #0]
 80019b2:	4618      	mov	r0, r3
 80019b4:	f7ff ff77 	bl	80018a6 <LL_ADC_REG_IsConversionOngoing>
 80019b8:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 80019ba:	687b      	ldr	r3, [r7, #4]
 80019bc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80019be:	f003 0310 	and.w	r3, r3, #16
 80019c2:	2b00      	cmp	r3, #0
 80019c4:	f040 8148 	bne.w	8001c58 <HAL_ADC_Init+0x364>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 80019c8:	697b      	ldr	r3, [r7, #20]
 80019ca:	2b00      	cmp	r3, #0
 80019cc:	f040 8144 	bne.w	8001c58 <HAL_ADC_Init+0x364>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80019d0:	687b      	ldr	r3, [r7, #4]
 80019d2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80019d4:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 80019d8:	f043 0202 	orr.w	r2, r3, #2
 80019dc:	687b      	ldr	r3, [r7, #4]
 80019de:	65da      	str	r2, [r3, #92]	; 0x5c
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80019e0:	687b      	ldr	r3, [r7, #4]
 80019e2:	681b      	ldr	r3, [r3, #0]
 80019e4:	4618      	mov	r0, r3
 80019e6:	f7ff ff4b 	bl	8001880 <LL_ADC_IsEnabled>
 80019ea:	4603      	mov	r3, r0
 80019ec:	2b00      	cmp	r3, #0
 80019ee:	d141      	bne.n	8001a74 <HAL_ADC_Init+0x180>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 80019f0:	687b      	ldr	r3, [r7, #4]
 80019f2:	681b      	ldr	r3, [r3, #0]
 80019f4:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80019f8:	d004      	beq.n	8001a04 <HAL_ADC_Init+0x110>
 80019fa:	687b      	ldr	r3, [r7, #4]
 80019fc:	681b      	ldr	r3, [r3, #0]
 80019fe:	4a7a      	ldr	r2, [pc, #488]	; (8001be8 <HAL_ADC_Init+0x2f4>)
 8001a00:	4293      	cmp	r3, r2
 8001a02:	d10f      	bne.n	8001a24 <HAL_ADC_Init+0x130>
 8001a04:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
 8001a08:	f7ff ff3a 	bl	8001880 <LL_ADC_IsEnabled>
 8001a0c:	4604      	mov	r4, r0
 8001a0e:	4876      	ldr	r0, [pc, #472]	; (8001be8 <HAL_ADC_Init+0x2f4>)
 8001a10:	f7ff ff36 	bl	8001880 <LL_ADC_IsEnabled>
 8001a14:	4603      	mov	r3, r0
 8001a16:	4323      	orrs	r3, r4
 8001a18:	2b00      	cmp	r3, #0
 8001a1a:	bf0c      	ite	eq
 8001a1c:	2301      	moveq	r3, #1
 8001a1e:	2300      	movne	r3, #0
 8001a20:	b2db      	uxtb	r3, r3
 8001a22:	e012      	b.n	8001a4a <HAL_ADC_Init+0x156>
 8001a24:	4871      	ldr	r0, [pc, #452]	; (8001bec <HAL_ADC_Init+0x2f8>)
 8001a26:	f7ff ff2b 	bl	8001880 <LL_ADC_IsEnabled>
 8001a2a:	4604      	mov	r4, r0
 8001a2c:	4870      	ldr	r0, [pc, #448]	; (8001bf0 <HAL_ADC_Init+0x2fc>)
 8001a2e:	f7ff ff27 	bl	8001880 <LL_ADC_IsEnabled>
 8001a32:	4603      	mov	r3, r0
 8001a34:	431c      	orrs	r4, r3
 8001a36:	486f      	ldr	r0, [pc, #444]	; (8001bf4 <HAL_ADC_Init+0x300>)
 8001a38:	f7ff ff22 	bl	8001880 <LL_ADC_IsEnabled>
 8001a3c:	4603      	mov	r3, r0
 8001a3e:	4323      	orrs	r3, r4
 8001a40:	2b00      	cmp	r3, #0
 8001a42:	bf0c      	ite	eq
 8001a44:	2301      	moveq	r3, #1
 8001a46:	2300      	movne	r3, #0
 8001a48:	b2db      	uxtb	r3, r3
 8001a4a:	2b00      	cmp	r3, #0
 8001a4c:	d012      	beq.n	8001a74 <HAL_ADC_Init+0x180>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 8001a4e:	687b      	ldr	r3, [r7, #4]
 8001a50:	681b      	ldr	r3, [r3, #0]
 8001a52:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8001a56:	d004      	beq.n	8001a62 <HAL_ADC_Init+0x16e>
 8001a58:	687b      	ldr	r3, [r7, #4]
 8001a5a:	681b      	ldr	r3, [r3, #0]
 8001a5c:	4a62      	ldr	r2, [pc, #392]	; (8001be8 <HAL_ADC_Init+0x2f4>)
 8001a5e:	4293      	cmp	r3, r2
 8001a60:	d101      	bne.n	8001a66 <HAL_ADC_Init+0x172>
 8001a62:	4a65      	ldr	r2, [pc, #404]	; (8001bf8 <HAL_ADC_Init+0x304>)
 8001a64:	e000      	b.n	8001a68 <HAL_ADC_Init+0x174>
 8001a66:	4a65      	ldr	r2, [pc, #404]	; (8001bfc <HAL_ADC_Init+0x308>)
 8001a68:	687b      	ldr	r3, [r7, #4]
 8001a6a:	685b      	ldr	r3, [r3, #4]
 8001a6c:	4619      	mov	r1, r3
 8001a6e:	4610      	mov	r0, r2
 8001a70:	f7ff fd7e 	bl	8001570 <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8001a74:	687b      	ldr	r3, [r7, #4]
 8001a76:	7f5b      	ldrb	r3, [r3, #29]
 8001a78:	035a      	lsls	r2, r3, #13
                hadc->Init.Overrun                                                     |
 8001a7a:	687b      	ldr	r3, [r7, #4]
 8001a7c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8001a7e:	431a      	orrs	r2, r3
                hadc->Init.DataAlign                                                   |
 8001a80:	687b      	ldr	r3, [r7, #4]
 8001a82:	68db      	ldr	r3, [r3, #12]
                hadc->Init.Overrun                                                     |
 8001a84:	431a      	orrs	r2, r3
                hadc->Init.Resolution                                                  |
 8001a86:	687b      	ldr	r3, [r7, #4]
 8001a88:	689b      	ldr	r3, [r3, #8]
                hadc->Init.DataAlign                                                   |
 8001a8a:	431a      	orrs	r2, r3
                ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8001a8c:	687b      	ldr	r3, [r7, #4]
 8001a8e:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8001a92:	041b      	lsls	r3, r3, #16
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8001a94:	4313      	orrs	r3, r2
 8001a96:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8001a98:	687b      	ldr	r3, [r7, #4]
 8001a9a:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8001a9e:	2b01      	cmp	r3, #1
 8001aa0:	d106      	bne.n	8001ab0 <HAL_ADC_Init+0x1bc>
    {
      tmpCFGR |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 8001aa2:	687b      	ldr	r3, [r7, #4]
 8001aa4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001aa6:	3b01      	subs	r3, #1
 8001aa8:	045b      	lsls	r3, r3, #17
 8001aaa:	69ba      	ldr	r2, [r7, #24]
 8001aac:	4313      	orrs	r3, r2
 8001aae:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8001ab0:	687b      	ldr	r3, [r7, #4]
 8001ab2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001ab4:	2b00      	cmp	r3, #0
 8001ab6:	d009      	beq.n	8001acc <HAL_ADC_Init+0x1d8>
    {
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8001ab8:	687b      	ldr	r3, [r7, #4]
 8001aba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001abc:	f403 7278 	and.w	r2, r3, #992	; 0x3e0
                  | hadc->Init.ExternalTrigConvEdge
 8001ac0:	687b      	ldr	r3, [r7, #4]
 8001ac2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ac4:	4313      	orrs	r3, r2
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8001ac6:	69ba      	ldr	r2, [r7, #24]
 8001ac8:	4313      	orrs	r3, r2
 8001aca:	61bb      	str	r3, [r7, #24]
                 );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
 8001acc:	687b      	ldr	r3, [r7, #4]
 8001ace:	681b      	ldr	r3, [r3, #0]
 8001ad0:	68da      	ldr	r2, [r3, #12]
 8001ad2:	4b4b      	ldr	r3, [pc, #300]	; (8001c00 <HAL_ADC_Init+0x30c>)
 8001ad4:	4013      	ands	r3, r2
 8001ad6:	687a      	ldr	r2, [r7, #4]
 8001ad8:	6812      	ldr	r2, [r2, #0]
 8001ada:	69b9      	ldr	r1, [r7, #24]
 8001adc:	430b      	orrs	r3, r1
 8001ade:	60d3      	str	r3, [r2, #12]

    /* Configuration of sampling mode */
    MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_BULB | ADC_CFGR2_SMPTRIG, hadc->Init.SamplingMode);
 8001ae0:	687b      	ldr	r3, [r7, #4]
 8001ae2:	681b      	ldr	r3, [r3, #0]
 8001ae4:	691b      	ldr	r3, [r3, #16]
 8001ae6:	f023 6140 	bic.w	r1, r3, #201326592	; 0xc000000
 8001aea:	687b      	ldr	r3, [r7, #4]
 8001aec:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001aee:	687b      	ldr	r3, [r7, #4]
 8001af0:	681b      	ldr	r3, [r3, #0]
 8001af2:	430a      	orrs	r2, r1
 8001af4:	611a      	str	r2, [r3, #16]
    /* conversion on going on regular and injected groups:                    */
    /*  - Gain Compensation               Init.GainCompensation               */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8001af6:	687b      	ldr	r3, [r7, #4]
 8001af8:	681b      	ldr	r3, [r3, #0]
 8001afa:	4618      	mov	r0, r3
 8001afc:	f7ff fed3 	bl	80018a6 <LL_ADC_REG_IsConversionOngoing>
 8001b00:	6138      	str	r0, [r7, #16]
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8001b02:	687b      	ldr	r3, [r7, #4]
 8001b04:	681b      	ldr	r3, [r3, #0]
 8001b06:	4618      	mov	r0, r3
 8001b08:	f7ff fee0 	bl	80018cc <LL_ADC_INJ_IsConversionOngoing>
 8001b0c:	60f8      	str	r0, [r7, #12]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8001b0e:	693b      	ldr	r3, [r7, #16]
 8001b10:	2b00      	cmp	r3, #0
 8001b12:	d17f      	bne.n	8001c14 <HAL_ADC_Init+0x320>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8001b14:	68fb      	ldr	r3, [r7, #12]
 8001b16:	2b00      	cmp	r3, #0
 8001b18:	d17c      	bne.n	8001c14 <HAL_ADC_Init+0x320>
       )
    {
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
                 ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8001b1a:	687b      	ldr	r3, [r7, #4]
 8001b1c:	7f1b      	ldrb	r3, [r3, #28]
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 8001b1e:	039a      	lsls	r2, r3, #14
                 ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 8001b20:	687b      	ldr	r3, [r7, #4]
 8001b22:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8001b26:	005b      	lsls	r3, r3, #1
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 8001b28:	4313      	orrs	r3, r2
 8001b2a:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 8001b2c:	687b      	ldr	r3, [r7, #4]
 8001b2e:	681b      	ldr	r3, [r3, #0]
 8001b30:	68db      	ldr	r3, [r3, #12]
 8001b32:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8001b36:	f023 0302 	bic.w	r3, r3, #2
 8001b3a:	687a      	ldr	r2, [r7, #4]
 8001b3c:	6812      	ldr	r2, [r2, #0]
 8001b3e:	69b9      	ldr	r1, [r7, #24]
 8001b40:	430b      	orrs	r3, r1
 8001b42:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.GainCompensation != 0UL)
 8001b44:	687b      	ldr	r3, [r7, #4]
 8001b46:	691b      	ldr	r3, [r3, #16]
 8001b48:	2b00      	cmp	r3, #0
 8001b4a:	d017      	beq.n	8001b7c <HAL_ADC_Init+0x288>
      {
        SET_BIT(hadc->Instance->CFGR2, ADC_CFGR2_GCOMP);
 8001b4c:	687b      	ldr	r3, [r7, #4]
 8001b4e:	681b      	ldr	r3, [r3, #0]
 8001b50:	691a      	ldr	r2, [r3, #16]
 8001b52:	687b      	ldr	r3, [r7, #4]
 8001b54:	681b      	ldr	r3, [r3, #0]
 8001b56:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 8001b5a:	611a      	str	r2, [r3, #16]
        MODIFY_REG(hadc->Instance->GCOMP, ADC_GCOMP_GCOMPCOEFF, hadc->Init.GainCompensation);
 8001b5c:	687b      	ldr	r3, [r7, #4]
 8001b5e:	681b      	ldr	r3, [r3, #0]
 8001b60:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 8001b64:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 8001b68:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8001b6c:	687a      	ldr	r2, [r7, #4]
 8001b6e:	6911      	ldr	r1, [r2, #16]
 8001b70:	687a      	ldr	r2, [r7, #4]
 8001b72:	6812      	ldr	r2, [r2, #0]
 8001b74:	430b      	orrs	r3, r1
 8001b76:	f8c2 30c0 	str.w	r3, [r2, #192]	; 0xc0
 8001b7a:	e013      	b.n	8001ba4 <HAL_ADC_Init+0x2b0>
      }
      else
      {
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_GCOMP);
 8001b7c:	687b      	ldr	r3, [r7, #4]
 8001b7e:	681b      	ldr	r3, [r3, #0]
 8001b80:	691a      	ldr	r2, [r3, #16]
 8001b82:	687b      	ldr	r3, [r7, #4]
 8001b84:	681b      	ldr	r3, [r3, #0]
 8001b86:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8001b8a:	611a      	str	r2, [r3, #16]
        MODIFY_REG(hadc->Instance->GCOMP, ADC_GCOMP_GCOMPCOEFF, 0UL);
 8001b8c:	687b      	ldr	r3, [r7, #4]
 8001b8e:	681b      	ldr	r3, [r3, #0]
 8001b90:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 8001b94:	687a      	ldr	r2, [r7, #4]
 8001b96:	6812      	ldr	r2, [r2, #0]
 8001b98:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 8001b9c:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8001ba0:	f8c2 30c0 	str.w	r3, [r2, #192]	; 0xc0
      }

      if (hadc->Init.OversamplingMode == ENABLE)
 8001ba4:	687b      	ldr	r3, [r7, #4]
 8001ba6:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8001baa:	2b01      	cmp	r3, #1
 8001bac:	d12a      	bne.n	8001c04 <HAL_ADC_Init+0x310>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 8001bae:	687b      	ldr	r3, [r7, #4]
 8001bb0:	681b      	ldr	r3, [r3, #0]
 8001bb2:	691b      	ldr	r3, [r3, #16]
 8001bb4:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 8001bb8:	f023 0304 	bic.w	r3, r3, #4
 8001bbc:	687a      	ldr	r2, [r7, #4]
 8001bbe:	6c51      	ldr	r1, [r2, #68]	; 0x44
 8001bc0:	687a      	ldr	r2, [r7, #4]
 8001bc2:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8001bc4:	4311      	orrs	r1, r2
 8001bc6:	687a      	ldr	r2, [r7, #4]
 8001bc8:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 8001bca:	4311      	orrs	r1, r2
 8001bcc:	687a      	ldr	r2, [r7, #4]
 8001bce:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8001bd0:	430a      	orrs	r2, r1
 8001bd2:	431a      	orrs	r2, r3
 8001bd4:	687b      	ldr	r3, [r7, #4]
 8001bd6:	681b      	ldr	r3, [r3, #0]
 8001bd8:	f042 0201 	orr.w	r2, r2, #1
 8001bdc:	611a      	str	r2, [r3, #16]
 8001bde:	e019      	b.n	8001c14 <HAL_ADC_Init+0x320>
 8001be0:	20000004 	.word	0x20000004
 8001be4:	053e2d63 	.word	0x053e2d63
 8001be8:	50000100 	.word	0x50000100
 8001bec:	50000400 	.word	0x50000400
 8001bf0:	50000500 	.word	0x50000500
 8001bf4:	50000600 	.word	0x50000600
 8001bf8:	50000300 	.word	0x50000300
 8001bfc:	50000700 	.word	0x50000700
 8001c00:	fff04007 	.word	0xfff04007
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 8001c04:	687b      	ldr	r3, [r7, #4]
 8001c06:	681b      	ldr	r3, [r3, #0]
 8001c08:	691a      	ldr	r2, [r3, #16]
 8001c0a:	687b      	ldr	r3, [r7, #4]
 8001c0c:	681b      	ldr	r3, [r3, #0]
 8001c0e:	f022 0201 	bic.w	r2, r2, #1
 8001c12:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8001c14:	687b      	ldr	r3, [r7, #4]
 8001c16:	695b      	ldr	r3, [r3, #20]
 8001c18:	2b01      	cmp	r3, #1
 8001c1a:	d10c      	bne.n	8001c36 <HAL_ADC_Init+0x342>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 8001c1c:	687b      	ldr	r3, [r7, #4]
 8001c1e:	681b      	ldr	r3, [r3, #0]
 8001c20:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c22:	f023 010f 	bic.w	r1, r3, #15
 8001c26:	687b      	ldr	r3, [r7, #4]
 8001c28:	6a1b      	ldr	r3, [r3, #32]
 8001c2a:	1e5a      	subs	r2, r3, #1
 8001c2c:	687b      	ldr	r3, [r7, #4]
 8001c2e:	681b      	ldr	r3, [r3, #0]
 8001c30:	430a      	orrs	r2, r1
 8001c32:	631a      	str	r2, [r3, #48]	; 0x30
 8001c34:	e007      	b.n	8001c46 <HAL_ADC_Init+0x352>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8001c36:	687b      	ldr	r3, [r7, #4]
 8001c38:	681b      	ldr	r3, [r3, #0]
 8001c3a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001c3c:	687b      	ldr	r3, [r7, #4]
 8001c3e:	681b      	ldr	r3, [r3, #0]
 8001c40:	f022 020f 	bic.w	r2, r2, #15
 8001c44:	631a      	str	r2, [r3, #48]	; 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 8001c46:	687b      	ldr	r3, [r7, #4]
 8001c48:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001c4a:	f023 0303 	bic.w	r3, r3, #3
 8001c4e:	f043 0201 	orr.w	r2, r3, #1
 8001c52:	687b      	ldr	r3, [r7, #4]
 8001c54:	65da      	str	r2, [r3, #92]	; 0x5c
 8001c56:	e007      	b.n	8001c68 <HAL_ADC_Init+0x374>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001c58:	687b      	ldr	r3, [r7, #4]
 8001c5a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001c5c:	f043 0210 	orr.w	r2, r3, #16
 8001c60:	687b      	ldr	r3, [r7, #4]
 8001c62:	65da      	str	r2, [r3, #92]	; 0x5c

    tmp_hal_status = HAL_ERROR;
 8001c64:	2301      	movs	r3, #1
 8001c66:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 8001c68:	7ffb      	ldrb	r3, [r7, #31]
}
 8001c6a:	4618      	mov	r0, r3
 8001c6c:	3724      	adds	r7, #36	; 0x24
 8001c6e:	46bd      	mov	sp, r7
 8001c70:	bd90      	pop	{r4, r7, pc}
 8001c72:	bf00      	nop

08001c74 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 8001c74:	b580      	push	{r7, lr}
 8001c76:	b0a6      	sub	sp, #152	; 0x98
 8001c78:	af00      	add	r7, sp, #0
 8001c7a:	6078      	str	r0, [r7, #4]
 8001c7c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001c7e:	2300      	movs	r3, #0
 8001c80:	f887 3097 	strb.w	r3, [r7, #151]	; 0x97
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0;
 8001c84:	2300      	movs	r3, #0
 8001c86:	60bb      	str	r3, [r7, #8]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, sConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8001c88:	687b      	ldr	r3, [r7, #4]
 8001c8a:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 8001c8e:	2b01      	cmp	r3, #1
 8001c90:	d101      	bne.n	8001c96 <HAL_ADC_ConfigChannel+0x22>
 8001c92:	2302      	movs	r3, #2
 8001c94:	e38e      	b.n	80023b4 <HAL_ADC_ConfigChannel+0x740>
 8001c96:	687b      	ldr	r3, [r7, #4]
 8001c98:	2201      	movs	r2, #1
 8001c9a:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8001c9e:	687b      	ldr	r3, [r7, #4]
 8001ca0:	681b      	ldr	r3, [r3, #0]
 8001ca2:	4618      	mov	r0, r3
 8001ca4:	f7ff fdff 	bl	80018a6 <LL_ADC_REG_IsConversionOngoing>
 8001ca8:	4603      	mov	r3, r0
 8001caa:	2b00      	cmp	r3, #0
 8001cac:	f040 836f 	bne.w	800238e <HAL_ADC_ConfigChannel+0x71a>
  {
    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, sConfig->Rank, sConfig->Channel);
 8001cb0:	687b      	ldr	r3, [r7, #4]
 8001cb2:	6818      	ldr	r0, [r3, #0]
 8001cb4:	683b      	ldr	r3, [r7, #0]
 8001cb6:	6859      	ldr	r1, [r3, #4]
 8001cb8:	683b      	ldr	r3, [r7, #0]
 8001cba:	681b      	ldr	r3, [r3, #0]
 8001cbc:	461a      	mov	r2, r3
 8001cbe:	f7ff fd1c 	bl	80016fa <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8001cc2:	687b      	ldr	r3, [r7, #4]
 8001cc4:	681b      	ldr	r3, [r3, #0]
 8001cc6:	4618      	mov	r0, r3
 8001cc8:	f7ff fded 	bl	80018a6 <LL_ADC_REG_IsConversionOngoing>
 8001ccc:	f8c7 0090 	str.w	r0, [r7, #144]	; 0x90
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8001cd0:	687b      	ldr	r3, [r7, #4]
 8001cd2:	681b      	ldr	r3, [r3, #0]
 8001cd4:	4618      	mov	r0, r3
 8001cd6:	f7ff fdf9 	bl	80018cc <LL_ADC_INJ_IsConversionOngoing>
 8001cda:	f8c7 008c 	str.w	r0, [r7, #140]	; 0x8c
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8001cde:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8001ce2:	2b00      	cmp	r3, #0
 8001ce4:	f040 817b 	bne.w	8001fde <HAL_ADC_ConfigChannel+0x36a>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8001ce8:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8001cec:	2b00      	cmp	r3, #0
 8001cee:	f040 8176 	bne.w	8001fde <HAL_ADC_ConfigChannel+0x36a>
       )
    {
      /* Manage specific case of sampling time 3.5 cycles replacing 2.5 cyles */
      if (sConfig->SamplingTime == ADC_SAMPLETIME_3CYCLES_5)
 8001cf2:	683b      	ldr	r3, [r7, #0]
 8001cf4:	689b      	ldr	r3, [r3, #8]
 8001cf6:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8001cfa:	d10f      	bne.n	8001d1c <HAL_ADC_ConfigChannel+0xa8>
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, LL_ADC_SAMPLINGTIME_2CYCLES_5);
 8001cfc:	687b      	ldr	r3, [r7, #4]
 8001cfe:	6818      	ldr	r0, [r3, #0]
 8001d00:	683b      	ldr	r3, [r7, #0]
 8001d02:	681b      	ldr	r3, [r3, #0]
 8001d04:	2200      	movs	r2, #0
 8001d06:	4619      	mov	r1, r3
 8001d08:	f7ff fd20 	bl	800174c <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5);
 8001d0c:	687b      	ldr	r3, [r7, #4]
 8001d0e:	681b      	ldr	r3, [r3, #0]
 8001d10:	f04f 4100 	mov.w	r1, #2147483648	; 0x80000000
 8001d14:	4618      	mov	r0, r3
 8001d16:	f7ff fcdd 	bl	80016d4 <LL_ADC_SetSamplingTimeCommonConfig>
 8001d1a:	e00e      	b.n	8001d3a <HAL_ADC_ConfigChannel+0xc6>
      }
      else
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, sConfig->SamplingTime);
 8001d1c:	687b      	ldr	r3, [r7, #4]
 8001d1e:	6818      	ldr	r0, [r3, #0]
 8001d20:	683b      	ldr	r3, [r7, #0]
 8001d22:	6819      	ldr	r1, [r3, #0]
 8001d24:	683b      	ldr	r3, [r7, #0]
 8001d26:	689b      	ldr	r3, [r3, #8]
 8001d28:	461a      	mov	r2, r3
 8001d2a:	f7ff fd0f 	bl	800174c <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
 8001d2e:	687b      	ldr	r3, [r7, #4]
 8001d30:	681b      	ldr	r3, [r3, #0]
 8001d32:	2100      	movs	r1, #0
 8001d34:	4618      	mov	r0, r3
 8001d36:	f7ff fccd 	bl	80016d4 <LL_ADC_SetSamplingTimeCommonConfig>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 8001d3a:	683b      	ldr	r3, [r7, #0]
 8001d3c:	695a      	ldr	r2, [r3, #20]
 8001d3e:	687b      	ldr	r3, [r7, #4]
 8001d40:	681b      	ldr	r3, [r3, #0]
 8001d42:	68db      	ldr	r3, [r3, #12]
 8001d44:	08db      	lsrs	r3, r3, #3
 8001d46:	f003 0303 	and.w	r3, r3, #3
 8001d4a:	005b      	lsls	r3, r3, #1
 8001d4c:	fa02 f303 	lsl.w	r3, r2, r3
 8001d50:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88

      if (sConfig->OffsetNumber != ADC_OFFSET_NONE)
 8001d54:	683b      	ldr	r3, [r7, #0]
 8001d56:	691b      	ldr	r3, [r3, #16]
 8001d58:	2b04      	cmp	r3, #4
 8001d5a:	d022      	beq.n	8001da2 <HAL_ADC_ConfigChannel+0x12e>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, sConfig->OffsetNumber, sConfig->Channel, tmpOffsetShifted);
 8001d5c:	687b      	ldr	r3, [r7, #4]
 8001d5e:	6818      	ldr	r0, [r3, #0]
 8001d60:	683b      	ldr	r3, [r7, #0]
 8001d62:	6919      	ldr	r1, [r3, #16]
 8001d64:	683b      	ldr	r3, [r7, #0]
 8001d66:	681a      	ldr	r2, [r3, #0]
 8001d68:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8001d6c:	f7ff fc34 	bl	80015d8 <LL_ADC_SetOffset>

        assert_param(IS_ADC_OFFSET_SIGN(sConfig->OffsetSign));
        assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetSaturation));
        /* Set ADC selected offset sign & saturation */
        LL_ADC_SetOffsetSign(hadc->Instance, sConfig->OffsetNumber, sConfig->OffsetSign);
 8001d70:	687b      	ldr	r3, [r7, #4]
 8001d72:	6818      	ldr	r0, [r3, #0]
 8001d74:	683b      	ldr	r3, [r7, #0]
 8001d76:	6919      	ldr	r1, [r3, #16]
 8001d78:	683b      	ldr	r3, [r7, #0]
 8001d7a:	699b      	ldr	r3, [r3, #24]
 8001d7c:	461a      	mov	r2, r3
 8001d7e:	f7ff fc79 	bl	8001674 <LL_ADC_SetOffsetSign>
        LL_ADC_SetOffsetSaturation(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetSaturation == ENABLE) ? LL_ADC_OFFSET_SATURATION_ENABLE : LL_ADC_OFFSET_SATURATION_DISABLE);
 8001d82:	687b      	ldr	r3, [r7, #4]
 8001d84:	6818      	ldr	r0, [r3, #0]
 8001d86:	683b      	ldr	r3, [r7, #0]
 8001d88:	6919      	ldr	r1, [r3, #16]
 8001d8a:	683b      	ldr	r3, [r7, #0]
 8001d8c:	7f1b      	ldrb	r3, [r3, #28]
 8001d8e:	2b01      	cmp	r3, #1
 8001d90:	d102      	bne.n	8001d98 <HAL_ADC_ConfigChannel+0x124>
 8001d92:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001d96:	e000      	b.n	8001d9a <HAL_ADC_ConfigChannel+0x126>
 8001d98:	2300      	movs	r3, #0
 8001d9a:	461a      	mov	r2, r3
 8001d9c:	f7ff fc82 	bl	80016a4 <LL_ADC_SetOffsetSaturation>
 8001da0:	e11d      	b.n	8001fde <HAL_ADC_ConfigChannel+0x36a>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if(__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8001da2:	687b      	ldr	r3, [r7, #4]
 8001da4:	681b      	ldr	r3, [r3, #0]
 8001da6:	2100      	movs	r1, #0
 8001da8:	4618      	mov	r0, r3
 8001daa:	f7ff fc37 	bl	800161c <LL_ADC_GetOffsetChannel>
 8001dae:	4603      	mov	r3, r0
 8001db0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001db4:	2b00      	cmp	r3, #0
 8001db6:	d10a      	bne.n	8001dce <HAL_ADC_ConfigChannel+0x15a>
 8001db8:	687b      	ldr	r3, [r7, #4]
 8001dba:	681b      	ldr	r3, [r3, #0]
 8001dbc:	2100      	movs	r1, #0
 8001dbe:	4618      	mov	r0, r3
 8001dc0:	f7ff fc2c 	bl	800161c <LL_ADC_GetOffsetChannel>
 8001dc4:	4603      	mov	r3, r0
 8001dc6:	0e9b      	lsrs	r3, r3, #26
 8001dc8:	f003 021f 	and.w	r2, r3, #31
 8001dcc:	e012      	b.n	8001df4 <HAL_ADC_ConfigChannel+0x180>
 8001dce:	687b      	ldr	r3, [r7, #4]
 8001dd0:	681b      	ldr	r3, [r3, #0]
 8001dd2:	2100      	movs	r1, #0
 8001dd4:	4618      	mov	r0, r3
 8001dd6:	f7ff fc21 	bl	800161c <LL_ADC_GetOffsetChannel>
 8001dda:	4603      	mov	r3, r0
 8001ddc:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001de0:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8001de4:	fa93 f3a3 	rbit	r3, r3
 8001de8:	67fb      	str	r3, [r7, #124]	; 0x7c
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8001dea:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8001dec:	fab3 f383 	clz	r3, r3
 8001df0:	b2db      	uxtb	r3, r3
 8001df2:	461a      	mov	r2, r3
 8001df4:	683b      	ldr	r3, [r7, #0]
 8001df6:	681b      	ldr	r3, [r3, #0]
 8001df8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001dfc:	2b00      	cmp	r3, #0
 8001dfe:	d105      	bne.n	8001e0c <HAL_ADC_ConfigChannel+0x198>
 8001e00:	683b      	ldr	r3, [r7, #0]
 8001e02:	681b      	ldr	r3, [r3, #0]
 8001e04:	0e9b      	lsrs	r3, r3, #26
 8001e06:	f003 031f 	and.w	r3, r3, #31
 8001e0a:	e00a      	b.n	8001e22 <HAL_ADC_ConfigChannel+0x1ae>
 8001e0c:	683b      	ldr	r3, [r7, #0]
 8001e0e:	681b      	ldr	r3, [r3, #0]
 8001e10:	67bb      	str	r3, [r7, #120]	; 0x78
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001e12:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8001e14:	fa93 f3a3 	rbit	r3, r3
 8001e18:	677b      	str	r3, [r7, #116]	; 0x74
  return result;
 8001e1a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8001e1c:	fab3 f383 	clz	r3, r3
 8001e20:	b2db      	uxtb	r3, r3
 8001e22:	429a      	cmp	r2, r3
 8001e24:	d106      	bne.n	8001e34 <HAL_ADC_ConfigChannel+0x1c0>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 8001e26:	687b      	ldr	r3, [r7, #4]
 8001e28:	681b      	ldr	r3, [r3, #0]
 8001e2a:	2200      	movs	r2, #0
 8001e2c:	2100      	movs	r1, #0
 8001e2e:	4618      	mov	r0, r3
 8001e30:	f7ff fc08 	bl	8001644 <LL_ADC_SetOffsetState>
        }
        if(__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8001e34:	687b      	ldr	r3, [r7, #4]
 8001e36:	681b      	ldr	r3, [r3, #0]
 8001e38:	2101      	movs	r1, #1
 8001e3a:	4618      	mov	r0, r3
 8001e3c:	f7ff fbee 	bl	800161c <LL_ADC_GetOffsetChannel>
 8001e40:	4603      	mov	r3, r0
 8001e42:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001e46:	2b00      	cmp	r3, #0
 8001e48:	d10a      	bne.n	8001e60 <HAL_ADC_ConfigChannel+0x1ec>
 8001e4a:	687b      	ldr	r3, [r7, #4]
 8001e4c:	681b      	ldr	r3, [r3, #0]
 8001e4e:	2101      	movs	r1, #1
 8001e50:	4618      	mov	r0, r3
 8001e52:	f7ff fbe3 	bl	800161c <LL_ADC_GetOffsetChannel>
 8001e56:	4603      	mov	r3, r0
 8001e58:	0e9b      	lsrs	r3, r3, #26
 8001e5a:	f003 021f 	and.w	r2, r3, #31
 8001e5e:	e010      	b.n	8001e82 <HAL_ADC_ConfigChannel+0x20e>
 8001e60:	687b      	ldr	r3, [r7, #4]
 8001e62:	681b      	ldr	r3, [r3, #0]
 8001e64:	2101      	movs	r1, #1
 8001e66:	4618      	mov	r0, r3
 8001e68:	f7ff fbd8 	bl	800161c <LL_ADC_GetOffsetChannel>
 8001e6c:	4603      	mov	r3, r0
 8001e6e:	673b      	str	r3, [r7, #112]	; 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001e70:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8001e72:	fa93 f3a3 	rbit	r3, r3
 8001e76:	66fb      	str	r3, [r7, #108]	; 0x6c
  return result;
 8001e78:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8001e7a:	fab3 f383 	clz	r3, r3
 8001e7e:	b2db      	uxtb	r3, r3
 8001e80:	461a      	mov	r2, r3
 8001e82:	683b      	ldr	r3, [r7, #0]
 8001e84:	681b      	ldr	r3, [r3, #0]
 8001e86:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001e8a:	2b00      	cmp	r3, #0
 8001e8c:	d105      	bne.n	8001e9a <HAL_ADC_ConfigChannel+0x226>
 8001e8e:	683b      	ldr	r3, [r7, #0]
 8001e90:	681b      	ldr	r3, [r3, #0]
 8001e92:	0e9b      	lsrs	r3, r3, #26
 8001e94:	f003 031f 	and.w	r3, r3, #31
 8001e98:	e00a      	b.n	8001eb0 <HAL_ADC_ConfigChannel+0x23c>
 8001e9a:	683b      	ldr	r3, [r7, #0]
 8001e9c:	681b      	ldr	r3, [r3, #0]
 8001e9e:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001ea0:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8001ea2:	fa93 f3a3 	rbit	r3, r3
 8001ea6:	667b      	str	r3, [r7, #100]	; 0x64
  return result;
 8001ea8:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8001eaa:	fab3 f383 	clz	r3, r3
 8001eae:	b2db      	uxtb	r3, r3
 8001eb0:	429a      	cmp	r2, r3
 8001eb2:	d106      	bne.n	8001ec2 <HAL_ADC_ConfigChannel+0x24e>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 8001eb4:	687b      	ldr	r3, [r7, #4]
 8001eb6:	681b      	ldr	r3, [r3, #0]
 8001eb8:	2200      	movs	r2, #0
 8001eba:	2101      	movs	r1, #1
 8001ebc:	4618      	mov	r0, r3
 8001ebe:	f7ff fbc1 	bl	8001644 <LL_ADC_SetOffsetState>
        }
        if(__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8001ec2:	687b      	ldr	r3, [r7, #4]
 8001ec4:	681b      	ldr	r3, [r3, #0]
 8001ec6:	2102      	movs	r1, #2
 8001ec8:	4618      	mov	r0, r3
 8001eca:	f7ff fba7 	bl	800161c <LL_ADC_GetOffsetChannel>
 8001ece:	4603      	mov	r3, r0
 8001ed0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001ed4:	2b00      	cmp	r3, #0
 8001ed6:	d10a      	bne.n	8001eee <HAL_ADC_ConfigChannel+0x27a>
 8001ed8:	687b      	ldr	r3, [r7, #4]
 8001eda:	681b      	ldr	r3, [r3, #0]
 8001edc:	2102      	movs	r1, #2
 8001ede:	4618      	mov	r0, r3
 8001ee0:	f7ff fb9c 	bl	800161c <LL_ADC_GetOffsetChannel>
 8001ee4:	4603      	mov	r3, r0
 8001ee6:	0e9b      	lsrs	r3, r3, #26
 8001ee8:	f003 021f 	and.w	r2, r3, #31
 8001eec:	e010      	b.n	8001f10 <HAL_ADC_ConfigChannel+0x29c>
 8001eee:	687b      	ldr	r3, [r7, #4]
 8001ef0:	681b      	ldr	r3, [r3, #0]
 8001ef2:	2102      	movs	r1, #2
 8001ef4:	4618      	mov	r0, r3
 8001ef6:	f7ff fb91 	bl	800161c <LL_ADC_GetOffsetChannel>
 8001efa:	4603      	mov	r3, r0
 8001efc:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001efe:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8001f00:	fa93 f3a3 	rbit	r3, r3
 8001f04:	65fb      	str	r3, [r7, #92]	; 0x5c
  return result;
 8001f06:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001f08:	fab3 f383 	clz	r3, r3
 8001f0c:	b2db      	uxtb	r3, r3
 8001f0e:	461a      	mov	r2, r3
 8001f10:	683b      	ldr	r3, [r7, #0]
 8001f12:	681b      	ldr	r3, [r3, #0]
 8001f14:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001f18:	2b00      	cmp	r3, #0
 8001f1a:	d105      	bne.n	8001f28 <HAL_ADC_ConfigChannel+0x2b4>
 8001f1c:	683b      	ldr	r3, [r7, #0]
 8001f1e:	681b      	ldr	r3, [r3, #0]
 8001f20:	0e9b      	lsrs	r3, r3, #26
 8001f22:	f003 031f 	and.w	r3, r3, #31
 8001f26:	e00a      	b.n	8001f3e <HAL_ADC_ConfigChannel+0x2ca>
 8001f28:	683b      	ldr	r3, [r7, #0]
 8001f2a:	681b      	ldr	r3, [r3, #0]
 8001f2c:	65bb      	str	r3, [r7, #88]	; 0x58
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001f2e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8001f30:	fa93 f3a3 	rbit	r3, r3
 8001f34:	657b      	str	r3, [r7, #84]	; 0x54
  return result;
 8001f36:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001f38:	fab3 f383 	clz	r3, r3
 8001f3c:	b2db      	uxtb	r3, r3
 8001f3e:	429a      	cmp	r2, r3
 8001f40:	d106      	bne.n	8001f50 <HAL_ADC_ConfigChannel+0x2dc>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 8001f42:	687b      	ldr	r3, [r7, #4]
 8001f44:	681b      	ldr	r3, [r3, #0]
 8001f46:	2200      	movs	r2, #0
 8001f48:	2102      	movs	r1, #2
 8001f4a:	4618      	mov	r0, r3
 8001f4c:	f7ff fb7a 	bl	8001644 <LL_ADC_SetOffsetState>
        }
        if(__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8001f50:	687b      	ldr	r3, [r7, #4]
 8001f52:	681b      	ldr	r3, [r3, #0]
 8001f54:	2103      	movs	r1, #3
 8001f56:	4618      	mov	r0, r3
 8001f58:	f7ff fb60 	bl	800161c <LL_ADC_GetOffsetChannel>
 8001f5c:	4603      	mov	r3, r0
 8001f5e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001f62:	2b00      	cmp	r3, #0
 8001f64:	d10a      	bne.n	8001f7c <HAL_ADC_ConfigChannel+0x308>
 8001f66:	687b      	ldr	r3, [r7, #4]
 8001f68:	681b      	ldr	r3, [r3, #0]
 8001f6a:	2103      	movs	r1, #3
 8001f6c:	4618      	mov	r0, r3
 8001f6e:	f7ff fb55 	bl	800161c <LL_ADC_GetOffsetChannel>
 8001f72:	4603      	mov	r3, r0
 8001f74:	0e9b      	lsrs	r3, r3, #26
 8001f76:	f003 021f 	and.w	r2, r3, #31
 8001f7a:	e010      	b.n	8001f9e <HAL_ADC_ConfigChannel+0x32a>
 8001f7c:	687b      	ldr	r3, [r7, #4]
 8001f7e:	681b      	ldr	r3, [r3, #0]
 8001f80:	2103      	movs	r1, #3
 8001f82:	4618      	mov	r0, r3
 8001f84:	f7ff fb4a 	bl	800161c <LL_ADC_GetOffsetChannel>
 8001f88:	4603      	mov	r3, r0
 8001f8a:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001f8c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8001f8e:	fa93 f3a3 	rbit	r3, r3
 8001f92:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 8001f94:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001f96:	fab3 f383 	clz	r3, r3
 8001f9a:	b2db      	uxtb	r3, r3
 8001f9c:	461a      	mov	r2, r3
 8001f9e:	683b      	ldr	r3, [r7, #0]
 8001fa0:	681b      	ldr	r3, [r3, #0]
 8001fa2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001fa6:	2b00      	cmp	r3, #0
 8001fa8:	d105      	bne.n	8001fb6 <HAL_ADC_ConfigChannel+0x342>
 8001faa:	683b      	ldr	r3, [r7, #0]
 8001fac:	681b      	ldr	r3, [r3, #0]
 8001fae:	0e9b      	lsrs	r3, r3, #26
 8001fb0:	f003 031f 	and.w	r3, r3, #31
 8001fb4:	e00a      	b.n	8001fcc <HAL_ADC_ConfigChannel+0x358>
 8001fb6:	683b      	ldr	r3, [r7, #0]
 8001fb8:	681b      	ldr	r3, [r3, #0]
 8001fba:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001fbc:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8001fbe:	fa93 f3a3 	rbit	r3, r3
 8001fc2:	647b      	str	r3, [r7, #68]	; 0x44
  return result;
 8001fc4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001fc6:	fab3 f383 	clz	r3, r3
 8001fca:	b2db      	uxtb	r3, r3
 8001fcc:	429a      	cmp	r2, r3
 8001fce:	d106      	bne.n	8001fde <HAL_ADC_ConfigChannel+0x36a>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 8001fd0:	687b      	ldr	r3, [r7, #4]
 8001fd2:	681b      	ldr	r3, [r3, #0]
 8001fd4:	2200      	movs	r2, #0
 8001fd6:	2103      	movs	r1, #3
 8001fd8:	4618      	mov	r0, r3
 8001fda:	f7ff fb33 	bl	8001644 <LL_ADC_SetOffsetState>
    }

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8001fde:	687b      	ldr	r3, [r7, #4]
 8001fe0:	681b      	ldr	r3, [r3, #0]
 8001fe2:	4618      	mov	r0, r3
 8001fe4:	f7ff fc4c 	bl	8001880 <LL_ADC_IsEnabled>
 8001fe8:	4603      	mov	r3, r0
 8001fea:	2b00      	cmp	r3, #0
 8001fec:	f040 810c 	bne.w	8002208 <HAL_ADC_ConfigChannel+0x594>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfig->Channel, sConfig->SingleDiff);
 8001ff0:	687b      	ldr	r3, [r7, #4]
 8001ff2:	6818      	ldr	r0, [r3, #0]
 8001ff4:	683b      	ldr	r3, [r7, #0]
 8001ff6:	6819      	ldr	r1, [r3, #0]
 8001ff8:	683b      	ldr	r3, [r7, #0]
 8001ffa:	68db      	ldr	r3, [r3, #12]
 8001ffc:	461a      	mov	r2, r3
 8001ffe:	f7ff fbcd 	bl	800179c <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (sConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 8002002:	683b      	ldr	r3, [r7, #0]
 8002004:	68db      	ldr	r3, [r3, #12]
 8002006:	4aaf      	ldr	r2, [pc, #700]	; (80022c4 <HAL_ADC_ConfigChannel+0x650>)
 8002008:	4293      	cmp	r3, r2
 800200a:	f040 80fd 	bne.w	8002208 <HAL_ADC_ConfigChannel+0x594>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 800200e:	687b      	ldr	r3, [r7, #4]
 8002010:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8002012:	683b      	ldr	r3, [r7, #0]
 8002014:	681b      	ldr	r3, [r3, #0]
 8002016:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800201a:	2b00      	cmp	r3, #0
 800201c:	d10b      	bne.n	8002036 <HAL_ADC_ConfigChannel+0x3c2>
 800201e:	683b      	ldr	r3, [r7, #0]
 8002020:	681b      	ldr	r3, [r3, #0]
 8002022:	0e9b      	lsrs	r3, r3, #26
 8002024:	3301      	adds	r3, #1
 8002026:	f003 031f 	and.w	r3, r3, #31
 800202a:	2b09      	cmp	r3, #9
 800202c:	bf94      	ite	ls
 800202e:	2301      	movls	r3, #1
 8002030:	2300      	movhi	r3, #0
 8002032:	b2db      	uxtb	r3, r3
 8002034:	e012      	b.n	800205c <HAL_ADC_ConfigChannel+0x3e8>
 8002036:	683b      	ldr	r3, [r7, #0]
 8002038:	681b      	ldr	r3, [r3, #0]
 800203a:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800203c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800203e:	fa93 f3a3 	rbit	r3, r3
 8002042:	63fb      	str	r3, [r7, #60]	; 0x3c
  return result;
 8002044:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002046:	fab3 f383 	clz	r3, r3
 800204a:	b2db      	uxtb	r3, r3
 800204c:	3301      	adds	r3, #1
 800204e:	f003 031f 	and.w	r3, r3, #31
 8002052:	2b09      	cmp	r3, #9
 8002054:	bf94      	ite	ls
 8002056:	2301      	movls	r3, #1
 8002058:	2300      	movhi	r3, #0
 800205a:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 800205c:	2b00      	cmp	r3, #0
 800205e:	d064      	beq.n	800212a <HAL_ADC_ConfigChannel+0x4b6>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8002060:	683b      	ldr	r3, [r7, #0]
 8002062:	681b      	ldr	r3, [r3, #0]
 8002064:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002068:	2b00      	cmp	r3, #0
 800206a:	d107      	bne.n	800207c <HAL_ADC_ConfigChannel+0x408>
 800206c:	683b      	ldr	r3, [r7, #0]
 800206e:	681b      	ldr	r3, [r3, #0]
 8002070:	0e9b      	lsrs	r3, r3, #26
 8002072:	3301      	adds	r3, #1
 8002074:	069b      	lsls	r3, r3, #26
 8002076:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 800207a:	e00e      	b.n	800209a <HAL_ADC_ConfigChannel+0x426>
 800207c:	683b      	ldr	r3, [r7, #0]
 800207e:	681b      	ldr	r3, [r3, #0]
 8002080:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002082:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002084:	fa93 f3a3 	rbit	r3, r3
 8002088:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 800208a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800208c:	fab3 f383 	clz	r3, r3
 8002090:	b2db      	uxtb	r3, r3
 8002092:	3301      	adds	r3, #1
 8002094:	069b      	lsls	r3, r3, #26
 8002096:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 800209a:	683b      	ldr	r3, [r7, #0]
 800209c:	681b      	ldr	r3, [r3, #0]
 800209e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80020a2:	2b00      	cmp	r3, #0
 80020a4:	d109      	bne.n	80020ba <HAL_ADC_ConfigChannel+0x446>
 80020a6:	683b      	ldr	r3, [r7, #0]
 80020a8:	681b      	ldr	r3, [r3, #0]
 80020aa:	0e9b      	lsrs	r3, r3, #26
 80020ac:	3301      	adds	r3, #1
 80020ae:	f003 031f 	and.w	r3, r3, #31
 80020b2:	2101      	movs	r1, #1
 80020b4:	fa01 f303 	lsl.w	r3, r1, r3
 80020b8:	e010      	b.n	80020dc <HAL_ADC_ConfigChannel+0x468>
 80020ba:	683b      	ldr	r3, [r7, #0]
 80020bc:	681b      	ldr	r3, [r3, #0]
 80020be:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80020c0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80020c2:	fa93 f3a3 	rbit	r3, r3
 80020c6:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 80020c8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80020ca:	fab3 f383 	clz	r3, r3
 80020ce:	b2db      	uxtb	r3, r3
 80020d0:	3301      	adds	r3, #1
 80020d2:	f003 031f 	and.w	r3, r3, #31
 80020d6:	2101      	movs	r1, #1
 80020d8:	fa01 f303 	lsl.w	r3, r1, r3
 80020dc:	ea42 0103 	orr.w	r1, r2, r3
 80020e0:	683b      	ldr	r3, [r7, #0]
 80020e2:	681b      	ldr	r3, [r3, #0]
 80020e4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80020e8:	2b00      	cmp	r3, #0
 80020ea:	d10a      	bne.n	8002102 <HAL_ADC_ConfigChannel+0x48e>
 80020ec:	683b      	ldr	r3, [r7, #0]
 80020ee:	681b      	ldr	r3, [r3, #0]
 80020f0:	0e9b      	lsrs	r3, r3, #26
 80020f2:	3301      	adds	r3, #1
 80020f4:	f003 021f 	and.w	r2, r3, #31
 80020f8:	4613      	mov	r3, r2
 80020fa:	005b      	lsls	r3, r3, #1
 80020fc:	4413      	add	r3, r2
 80020fe:	051b      	lsls	r3, r3, #20
 8002100:	e011      	b.n	8002126 <HAL_ADC_ConfigChannel+0x4b2>
 8002102:	683b      	ldr	r3, [r7, #0]
 8002104:	681b      	ldr	r3, [r3, #0]
 8002106:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002108:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800210a:	fa93 f3a3 	rbit	r3, r3
 800210e:	627b      	str	r3, [r7, #36]	; 0x24
  return result;
 8002110:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002112:	fab3 f383 	clz	r3, r3
 8002116:	b2db      	uxtb	r3, r3
 8002118:	3301      	adds	r3, #1
 800211a:	f003 021f 	and.w	r2, r3, #31
 800211e:	4613      	mov	r3, r2
 8002120:	005b      	lsls	r3, r3, #1
 8002122:	4413      	add	r3, r2
 8002124:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002126:	430b      	orrs	r3, r1
 8002128:	e069      	b.n	80021fe <HAL_ADC_ConfigChannel+0x58a>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 800212a:	683b      	ldr	r3, [r7, #0]
 800212c:	681b      	ldr	r3, [r3, #0]
 800212e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002132:	2b00      	cmp	r3, #0
 8002134:	d107      	bne.n	8002146 <HAL_ADC_ConfigChannel+0x4d2>
 8002136:	683b      	ldr	r3, [r7, #0]
 8002138:	681b      	ldr	r3, [r3, #0]
 800213a:	0e9b      	lsrs	r3, r3, #26
 800213c:	3301      	adds	r3, #1
 800213e:	069b      	lsls	r3, r3, #26
 8002140:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002144:	e00e      	b.n	8002164 <HAL_ADC_ConfigChannel+0x4f0>
 8002146:	683b      	ldr	r3, [r7, #0]
 8002148:	681b      	ldr	r3, [r3, #0]
 800214a:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800214c:	6a3b      	ldr	r3, [r7, #32]
 800214e:	fa93 f3a3 	rbit	r3, r3
 8002152:	61fb      	str	r3, [r7, #28]
  return result;
 8002154:	69fb      	ldr	r3, [r7, #28]
 8002156:	fab3 f383 	clz	r3, r3
 800215a:	b2db      	uxtb	r3, r3
 800215c:	3301      	adds	r3, #1
 800215e:	069b      	lsls	r3, r3, #26
 8002160:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002164:	683b      	ldr	r3, [r7, #0]
 8002166:	681b      	ldr	r3, [r3, #0]
 8002168:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800216c:	2b00      	cmp	r3, #0
 800216e:	d109      	bne.n	8002184 <HAL_ADC_ConfigChannel+0x510>
 8002170:	683b      	ldr	r3, [r7, #0]
 8002172:	681b      	ldr	r3, [r3, #0]
 8002174:	0e9b      	lsrs	r3, r3, #26
 8002176:	3301      	adds	r3, #1
 8002178:	f003 031f 	and.w	r3, r3, #31
 800217c:	2101      	movs	r1, #1
 800217e:	fa01 f303 	lsl.w	r3, r1, r3
 8002182:	e010      	b.n	80021a6 <HAL_ADC_ConfigChannel+0x532>
 8002184:	683b      	ldr	r3, [r7, #0]
 8002186:	681b      	ldr	r3, [r3, #0]
 8002188:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800218a:	69bb      	ldr	r3, [r7, #24]
 800218c:	fa93 f3a3 	rbit	r3, r3
 8002190:	617b      	str	r3, [r7, #20]
  return result;
 8002192:	697b      	ldr	r3, [r7, #20]
 8002194:	fab3 f383 	clz	r3, r3
 8002198:	b2db      	uxtb	r3, r3
 800219a:	3301      	adds	r3, #1
 800219c:	f003 031f 	and.w	r3, r3, #31
 80021a0:	2101      	movs	r1, #1
 80021a2:	fa01 f303 	lsl.w	r3, r1, r3
 80021a6:	ea42 0103 	orr.w	r1, r2, r3
 80021aa:	683b      	ldr	r3, [r7, #0]
 80021ac:	681b      	ldr	r3, [r3, #0]
 80021ae:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80021b2:	2b00      	cmp	r3, #0
 80021b4:	d10d      	bne.n	80021d2 <HAL_ADC_ConfigChannel+0x55e>
 80021b6:	683b      	ldr	r3, [r7, #0]
 80021b8:	681b      	ldr	r3, [r3, #0]
 80021ba:	0e9b      	lsrs	r3, r3, #26
 80021bc:	3301      	adds	r3, #1
 80021be:	f003 021f 	and.w	r2, r3, #31
 80021c2:	4613      	mov	r3, r2
 80021c4:	005b      	lsls	r3, r3, #1
 80021c6:	4413      	add	r3, r2
 80021c8:	3b1e      	subs	r3, #30
 80021ca:	051b      	lsls	r3, r3, #20
 80021cc:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80021d0:	e014      	b.n	80021fc <HAL_ADC_ConfigChannel+0x588>
 80021d2:	683b      	ldr	r3, [r7, #0]
 80021d4:	681b      	ldr	r3, [r3, #0]
 80021d6:	613b      	str	r3, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80021d8:	693b      	ldr	r3, [r7, #16]
 80021da:	fa93 f3a3 	rbit	r3, r3
 80021de:	60fb      	str	r3, [r7, #12]
  return result;
 80021e0:	68fb      	ldr	r3, [r7, #12]
 80021e2:	fab3 f383 	clz	r3, r3
 80021e6:	b2db      	uxtb	r3, r3
 80021e8:	3301      	adds	r3, #1
 80021ea:	f003 021f 	and.w	r2, r3, #31
 80021ee:	4613      	mov	r3, r2
 80021f0:	005b      	lsls	r3, r3, #1
 80021f2:	4413      	add	r3, r2
 80021f4:	3b1e      	subs	r3, #30
 80021f6:	051b      	lsls	r3, r3, #20
 80021f8:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80021fc:	430b      	orrs	r3, r1
 80021fe:	683a      	ldr	r2, [r7, #0]
 8002200:	6892      	ldr	r2, [r2, #8]
 8002202:	4619      	mov	r1, r3
 8002204:	f7ff faa2 	bl	800174c <LL_ADC_SetChannelSamplingTime>
    /* If internal channel selected, enable dedicated internal buffers and    */
    /* paths.                                                                 */
    /* Note: these internal measurement paths can be disabled using           */
    /* HAL_ADC_DeInit().                                                      */

    if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 8002208:	683b      	ldr	r3, [r7, #0]
 800220a:	681a      	ldr	r2, [r3, #0]
 800220c:	4b2e      	ldr	r3, [pc, #184]	; (80022c8 <HAL_ADC_ConfigChannel+0x654>)
 800220e:	4013      	ands	r3, r2
 8002210:	2b00      	cmp	r3, #0
 8002212:	f000 80c9 	beq.w	80023a8 <HAL_ADC_ConfigChannel+0x734>
    {
      tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8002216:	687b      	ldr	r3, [r7, #4]
 8002218:	681b      	ldr	r3, [r3, #0]
 800221a:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800221e:	d004      	beq.n	800222a <HAL_ADC_ConfigChannel+0x5b6>
 8002220:	687b      	ldr	r3, [r7, #4]
 8002222:	681b      	ldr	r3, [r3, #0]
 8002224:	4a29      	ldr	r2, [pc, #164]	; (80022cc <HAL_ADC_ConfigChannel+0x658>)
 8002226:	4293      	cmp	r3, r2
 8002228:	d101      	bne.n	800222e <HAL_ADC_ConfigChannel+0x5ba>
 800222a:	4b29      	ldr	r3, [pc, #164]	; (80022d0 <HAL_ADC_ConfigChannel+0x65c>)
 800222c:	e000      	b.n	8002230 <HAL_ADC_ConfigChannel+0x5bc>
 800222e:	4b29      	ldr	r3, [pc, #164]	; (80022d4 <HAL_ADC_ConfigChannel+0x660>)
 8002230:	4618      	mov	r0, r3
 8002232:	f7ff f9c3 	bl	80015bc <LL_ADC_GetCommonPathInternalCh>
 8002236:	f8c7 0084 	str.w	r0, [r7, #132]	; 0x84

      /* If the requested internal measurement path has already been enabled, */
      /* bypass the configuration processing.                                 */
      if (((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR_ADC1) || (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR_ADC5))
 800223a:	683b      	ldr	r3, [r7, #0]
 800223c:	681b      	ldr	r3, [r3, #0]
 800223e:	4a26      	ldr	r2, [pc, #152]	; (80022d8 <HAL_ADC_ConfigChannel+0x664>)
 8002240:	4293      	cmp	r3, r2
 8002242:	d004      	beq.n	800224e <HAL_ADC_ConfigChannel+0x5da>
 8002244:	683b      	ldr	r3, [r7, #0]
 8002246:	681b      	ldr	r3, [r3, #0]
 8002248:	4a24      	ldr	r2, [pc, #144]	; (80022dc <HAL_ADC_ConfigChannel+0x668>)
 800224a:	4293      	cmp	r3, r2
 800224c:	d14e      	bne.n	80022ec <HAL_ADC_ConfigChannel+0x678>
          && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 800224e:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8002252:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8002256:	2b00      	cmp	r3, #0
 8002258:	d148      	bne.n	80022ec <HAL_ADC_ConfigChannel+0x678>
      {
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 800225a:	687b      	ldr	r3, [r7, #4]
 800225c:	681b      	ldr	r3, [r3, #0]
 800225e:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002262:	d005      	beq.n	8002270 <HAL_ADC_ConfigChannel+0x5fc>
 8002264:	687b      	ldr	r3, [r7, #4]
 8002266:	681b      	ldr	r3, [r3, #0]
 8002268:	4a1d      	ldr	r2, [pc, #116]	; (80022e0 <HAL_ADC_ConfigChannel+0x66c>)
 800226a:	4293      	cmp	r3, r2
 800226c:	f040 8099 	bne.w	80023a2 <HAL_ADC_ConfigChannel+0x72e>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8002270:	687b      	ldr	r3, [r7, #4]
 8002272:	681b      	ldr	r3, [r3, #0]
 8002274:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002278:	d004      	beq.n	8002284 <HAL_ADC_ConfigChannel+0x610>
 800227a:	687b      	ldr	r3, [r7, #4]
 800227c:	681b      	ldr	r3, [r3, #0]
 800227e:	4a13      	ldr	r2, [pc, #76]	; (80022cc <HAL_ADC_ConfigChannel+0x658>)
 8002280:	4293      	cmp	r3, r2
 8002282:	d101      	bne.n	8002288 <HAL_ADC_ConfigChannel+0x614>
 8002284:	4a12      	ldr	r2, [pc, #72]	; (80022d0 <HAL_ADC_ConfigChannel+0x65c>)
 8002286:	e000      	b.n	800228a <HAL_ADC_ConfigChannel+0x616>
 8002288:	4a12      	ldr	r2, [pc, #72]	; (80022d4 <HAL_ADC_ConfigChannel+0x660>)
 800228a:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800228e:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8002292:	4619      	mov	r1, r3
 8002294:	4610      	mov	r0, r2
 8002296:	f7ff f97e 	bl	8001596 <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * (SystemCoreClock / (100000UL * 2UL)));
 800229a:	4b12      	ldr	r3, [pc, #72]	; (80022e4 <HAL_ADC_ConfigChannel+0x670>)
 800229c:	681b      	ldr	r3, [r3, #0]
 800229e:	099b      	lsrs	r3, r3, #6
 80022a0:	4a11      	ldr	r2, [pc, #68]	; (80022e8 <HAL_ADC_ConfigChannel+0x674>)
 80022a2:	fba2 2303 	umull	r2, r3, r2, r3
 80022a6:	099a      	lsrs	r2, r3, #6
 80022a8:	4613      	mov	r3, r2
 80022aa:	005b      	lsls	r3, r3, #1
 80022ac:	4413      	add	r3, r2
 80022ae:	009b      	lsls	r3, r3, #2
 80022b0:	60bb      	str	r3, [r7, #8]
          while (wait_loop_index != 0UL)
 80022b2:	e002      	b.n	80022ba <HAL_ADC_ConfigChannel+0x646>
          {
            wait_loop_index--;
 80022b4:	68bb      	ldr	r3, [r7, #8]
 80022b6:	3b01      	subs	r3, #1
 80022b8:	60bb      	str	r3, [r7, #8]
          while (wait_loop_index != 0UL)
 80022ba:	68bb      	ldr	r3, [r7, #8]
 80022bc:	2b00      	cmp	r3, #0
 80022be:	d1f9      	bne.n	80022b4 <HAL_ADC_ConfigChannel+0x640>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 80022c0:	e06f      	b.n	80023a2 <HAL_ADC_ConfigChannel+0x72e>
 80022c2:	bf00      	nop
 80022c4:	407f0000 	.word	0x407f0000
 80022c8:	80080000 	.word	0x80080000
 80022cc:	50000100 	.word	0x50000100
 80022d0:	50000300 	.word	0x50000300
 80022d4:	50000700 	.word	0x50000700
 80022d8:	c3210000 	.word	0xc3210000
 80022dc:	90c00010 	.word	0x90c00010
 80022e0:	50000600 	.word	0x50000600
 80022e4:	20000004 	.word	0x20000004
 80022e8:	053e2d63 	.word	0x053e2d63
          }
        }
      }
      else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 80022ec:	683b      	ldr	r3, [r7, #0]
 80022ee:	681b      	ldr	r3, [r3, #0]
 80022f0:	4a32      	ldr	r2, [pc, #200]	; (80023bc <HAL_ADC_ConfigChannel+0x748>)
 80022f2:	4293      	cmp	r3, r2
 80022f4:	d125      	bne.n	8002342 <HAL_ADC_ConfigChannel+0x6ce>
 80022f6:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80022fa:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80022fe:	2b00      	cmp	r3, #0
 8002300:	d11f      	bne.n	8002342 <HAL_ADC_ConfigChannel+0x6ce>
      {
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8002302:	687b      	ldr	r3, [r7, #4]
 8002304:	681b      	ldr	r3, [r3, #0]
 8002306:	4a2e      	ldr	r2, [pc, #184]	; (80023c0 <HAL_ADC_ConfigChannel+0x74c>)
 8002308:	4293      	cmp	r3, r2
 800230a:	d104      	bne.n	8002316 <HAL_ADC_ConfigChannel+0x6a2>
 800230c:	687b      	ldr	r3, [r7, #4]
 800230e:	681b      	ldr	r3, [r3, #0]
 8002310:	4a2c      	ldr	r2, [pc, #176]	; (80023c4 <HAL_ADC_ConfigChannel+0x750>)
 8002312:	4293      	cmp	r3, r2
 8002314:	d047      	beq.n	80023a6 <HAL_ADC_ConfigChannel+0x732>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8002316:	687b      	ldr	r3, [r7, #4]
 8002318:	681b      	ldr	r3, [r3, #0]
 800231a:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800231e:	d004      	beq.n	800232a <HAL_ADC_ConfigChannel+0x6b6>
 8002320:	687b      	ldr	r3, [r7, #4]
 8002322:	681b      	ldr	r3, [r3, #0]
 8002324:	4a26      	ldr	r2, [pc, #152]	; (80023c0 <HAL_ADC_ConfigChannel+0x74c>)
 8002326:	4293      	cmp	r3, r2
 8002328:	d101      	bne.n	800232e <HAL_ADC_ConfigChannel+0x6ba>
 800232a:	4a27      	ldr	r2, [pc, #156]	; (80023c8 <HAL_ADC_ConfigChannel+0x754>)
 800232c:	e000      	b.n	8002330 <HAL_ADC_ConfigChannel+0x6bc>
 800232e:	4a27      	ldr	r2, [pc, #156]	; (80023cc <HAL_ADC_ConfigChannel+0x758>)
 8002330:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8002334:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002338:	4619      	mov	r1, r3
 800233a:	4610      	mov	r0, r2
 800233c:	f7ff f92b 	bl	8001596 <LL_ADC_SetCommonPathInternalCh>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8002340:	e031      	b.n	80023a6 <HAL_ADC_ConfigChannel+0x732>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
      }
      else if ((sConfig->Channel == ADC_CHANNEL_VREFINT)
 8002342:	683b      	ldr	r3, [r7, #0]
 8002344:	681b      	ldr	r3, [r3, #0]
 8002346:	4a22      	ldr	r2, [pc, #136]	; (80023d0 <HAL_ADC_ConfigChannel+0x75c>)
 8002348:	4293      	cmp	r3, r2
 800234a:	d12d      	bne.n	80023a8 <HAL_ADC_ConfigChannel+0x734>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 800234c:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8002350:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002354:	2b00      	cmp	r3, #0
 8002356:	d127      	bne.n	80023a8 <HAL_ADC_ConfigChannel+0x734>
      {
        if (ADC_VREFINT_INSTANCE(hadc))
 8002358:	687b      	ldr	r3, [r7, #4]
 800235a:	681b      	ldr	r3, [r3, #0]
 800235c:	4a18      	ldr	r2, [pc, #96]	; (80023c0 <HAL_ADC_ConfigChannel+0x74c>)
 800235e:	4293      	cmp	r3, r2
 8002360:	d022      	beq.n	80023a8 <HAL_ADC_ConfigChannel+0x734>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8002362:	687b      	ldr	r3, [r7, #4]
 8002364:	681b      	ldr	r3, [r3, #0]
 8002366:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800236a:	d004      	beq.n	8002376 <HAL_ADC_ConfigChannel+0x702>
 800236c:	687b      	ldr	r3, [r7, #4]
 800236e:	681b      	ldr	r3, [r3, #0]
 8002370:	4a13      	ldr	r2, [pc, #76]	; (80023c0 <HAL_ADC_ConfigChannel+0x74c>)
 8002372:	4293      	cmp	r3, r2
 8002374:	d101      	bne.n	800237a <HAL_ADC_ConfigChannel+0x706>
 8002376:	4a14      	ldr	r2, [pc, #80]	; (80023c8 <HAL_ADC_ConfigChannel+0x754>)
 8002378:	e000      	b.n	800237c <HAL_ADC_ConfigChannel+0x708>
 800237a:	4a14      	ldr	r2, [pc, #80]	; (80023cc <HAL_ADC_ConfigChannel+0x758>)
 800237c:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8002380:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8002384:	4619      	mov	r1, r3
 8002386:	4610      	mov	r0, r2
 8002388:	f7ff f905 	bl	8001596 <LL_ADC_SetCommonPathInternalCh>
 800238c:	e00c      	b.n	80023a8 <HAL_ADC_ConfigChannel+0x734>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800238e:	687b      	ldr	r3, [r7, #4]
 8002390:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002392:	f043 0220 	orr.w	r2, r3, #32
 8002396:	687b      	ldr	r3, [r7, #4]
 8002398:	65da      	str	r2, [r3, #92]	; 0x5c

    tmp_hal_status = HAL_ERROR;
 800239a:	2301      	movs	r3, #1
 800239c:	f887 3097 	strb.w	r3, [r7, #151]	; 0x97
 80023a0:	e002      	b.n	80023a8 <HAL_ADC_ConfigChannel+0x734>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 80023a2:	bf00      	nop
 80023a4:	e000      	b.n	80023a8 <HAL_ADC_ConfigChannel+0x734>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 80023a6:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80023a8:	687b      	ldr	r3, [r7, #4]
 80023aa:	2200      	movs	r2, #0
 80023ac:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

  /* Return function status */
  return tmp_hal_status;
 80023b0:	f897 3097 	ldrb.w	r3, [r7, #151]	; 0x97
}
 80023b4:	4618      	mov	r0, r3
 80023b6:	3798      	adds	r7, #152	; 0x98
 80023b8:	46bd      	mov	sp, r7
 80023ba:	bd80      	pop	{r7, pc}
 80023bc:	c7520000 	.word	0xc7520000
 80023c0:	50000100 	.word	0x50000100
 80023c4:	50000500 	.word	0x50000500
 80023c8:	50000300 	.word	0x50000300
 80023cc:	50000700 	.word	0x50000700
 80023d0:	cb840000 	.word	0xcb840000

080023d4 <LL_ADC_IsEnabled>:
{
 80023d4:	b480      	push	{r7}
 80023d6:	b083      	sub	sp, #12
 80023d8:	af00      	add	r7, sp, #0
 80023da:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 80023dc:	687b      	ldr	r3, [r7, #4]
 80023de:	689b      	ldr	r3, [r3, #8]
 80023e0:	f003 0301 	and.w	r3, r3, #1
 80023e4:	2b01      	cmp	r3, #1
 80023e6:	d101      	bne.n	80023ec <LL_ADC_IsEnabled+0x18>
 80023e8:	2301      	movs	r3, #1
 80023ea:	e000      	b.n	80023ee <LL_ADC_IsEnabled+0x1a>
 80023ec:	2300      	movs	r3, #0
}
 80023ee:	4618      	mov	r0, r3
 80023f0:	370c      	adds	r7, #12
 80023f2:	46bd      	mov	sp, r7
 80023f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023f8:	4770      	bx	lr

080023fa <LL_ADC_REG_IsConversionOngoing>:
{
 80023fa:	b480      	push	{r7}
 80023fc:	b083      	sub	sp, #12
 80023fe:	af00      	add	r7, sp, #0
 8002400:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8002402:	687b      	ldr	r3, [r7, #4]
 8002404:	689b      	ldr	r3, [r3, #8]
 8002406:	f003 0304 	and.w	r3, r3, #4
 800240a:	2b04      	cmp	r3, #4
 800240c:	d101      	bne.n	8002412 <LL_ADC_REG_IsConversionOngoing+0x18>
 800240e:	2301      	movs	r3, #1
 8002410:	e000      	b.n	8002414 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8002412:	2300      	movs	r3, #0
}
 8002414:	4618      	mov	r0, r3
 8002416:	370c      	adds	r7, #12
 8002418:	46bd      	mov	sp, r7
 800241a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800241e:	4770      	bx	lr

08002420 <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param multimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, ADC_MultiModeTypeDef *multimode)
{
 8002420:	b590      	push	{r4, r7, lr}
 8002422:	b0a1      	sub	sp, #132	; 0x84
 8002424:	af00      	add	r7, sp, #0
 8002426:	6078      	str	r0, [r7, #4]
 8002428:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800242a:	2300      	movs	r3, #0
 800242c:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
    assert_param(IS_ADC_DMA_ACCESS_MULTIMODE(multimode->DMAAccessMode));
    assert_param(IS_ADC_SAMPLING_DELAY(multimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8002430:	687b      	ldr	r3, [r7, #4]
 8002432:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 8002436:	2b01      	cmp	r3, #1
 8002438:	d101      	bne.n	800243e <HAL_ADCEx_MultiModeConfigChannel+0x1e>
 800243a:	2302      	movs	r3, #2
 800243c:	e0e3      	b.n	8002606 <HAL_ADCEx_MultiModeConfigChannel+0x1e6>
 800243e:	687b      	ldr	r3, [r7, #4]
 8002440:	2201      	movs	r2, #1
 8002442:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

  ADC_MULTI_SLAVE(hadc, &tmphadcSlave);
 8002446:	687b      	ldr	r3, [r7, #4]
 8002448:	681b      	ldr	r3, [r3, #0]
 800244a:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800244e:	d102      	bne.n	8002456 <HAL_ADCEx_MultiModeConfigChannel+0x36>
 8002450:	4b6f      	ldr	r3, [pc, #444]	; (8002610 <HAL_ADCEx_MultiModeConfigChannel+0x1f0>)
 8002452:	60bb      	str	r3, [r7, #8]
 8002454:	e009      	b.n	800246a <HAL_ADCEx_MultiModeConfigChannel+0x4a>
 8002456:	687b      	ldr	r3, [r7, #4]
 8002458:	681b      	ldr	r3, [r3, #0]
 800245a:	4a6e      	ldr	r2, [pc, #440]	; (8002614 <HAL_ADCEx_MultiModeConfigChannel+0x1f4>)
 800245c:	4293      	cmp	r3, r2
 800245e:	d102      	bne.n	8002466 <HAL_ADCEx_MultiModeConfigChannel+0x46>
 8002460:	4b6d      	ldr	r3, [pc, #436]	; (8002618 <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 8002462:	60bb      	str	r3, [r7, #8]
 8002464:	e001      	b.n	800246a <HAL_ADCEx_MultiModeConfigChannel+0x4a>
 8002466:	2300      	movs	r3, #0
 8002468:	60bb      	str	r3, [r7, #8]

  if (tmphadcSlave.Instance == NULL)
 800246a:	68bb      	ldr	r3, [r7, #8]
 800246c:	2b00      	cmp	r3, #0
 800246e:	d10b      	bne.n	8002488 <HAL_ADCEx_MultiModeConfigChannel+0x68>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002470:	687b      	ldr	r3, [r7, #4]
 8002472:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002474:	f043 0220 	orr.w	r2, r3, #32
 8002478:	687b      	ldr	r3, [r7, #4]
 800247a:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 800247c:	687b      	ldr	r3, [r7, #4]
 800247e:	2200      	movs	r2, #0
 8002480:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

    return HAL_ERROR;
 8002484:	2301      	movs	r3, #1
 8002486:	e0be      	b.n	8002606 <HAL_ADCEx_MultiModeConfigChannel+0x1e6>
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DMA configuration                                           */
  /*  - Multimode DMA mode                                                    */
  tmphadcSlave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmphadcSlave)->Instance);
 8002488:	68bb      	ldr	r3, [r7, #8]
 800248a:	4618      	mov	r0, r3
 800248c:	f7ff ffb5 	bl	80023fa <LL_ADC_REG_IsConversionOngoing>
 8002490:	67b8      	str	r0, [r7, #120]	; 0x78
  if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8002492:	687b      	ldr	r3, [r7, #4]
 8002494:	681b      	ldr	r3, [r3, #0]
 8002496:	4618      	mov	r0, r3
 8002498:	f7ff ffaf 	bl	80023fa <LL_ADC_REG_IsConversionOngoing>
 800249c:	4603      	mov	r3, r0
 800249e:	2b00      	cmp	r3, #0
 80024a0:	f040 80a0 	bne.w	80025e4 <HAL_ADCEx_MultiModeConfigChannel+0x1c4>
      && (tmphadcSlave_conversion_on_going == 0UL))
 80024a4:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80024a6:	2b00      	cmp	r3, #0
 80024a8:	f040 809c 	bne.w	80025e4 <HAL_ADCEx_MultiModeConfigChannel+0x1c4>
  {
    /* Pointer to the common control register */
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 80024ac:	687b      	ldr	r3, [r7, #4]
 80024ae:	681b      	ldr	r3, [r3, #0]
 80024b0:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80024b4:	d004      	beq.n	80024c0 <HAL_ADCEx_MultiModeConfigChannel+0xa0>
 80024b6:	687b      	ldr	r3, [r7, #4]
 80024b8:	681b      	ldr	r3, [r3, #0]
 80024ba:	4a55      	ldr	r2, [pc, #340]	; (8002610 <HAL_ADCEx_MultiModeConfigChannel+0x1f0>)
 80024bc:	4293      	cmp	r3, r2
 80024be:	d101      	bne.n	80024c4 <HAL_ADCEx_MultiModeConfigChannel+0xa4>
 80024c0:	4b56      	ldr	r3, [pc, #344]	; (800261c <HAL_ADCEx_MultiModeConfigChannel+0x1fc>)
 80024c2:	e000      	b.n	80024c6 <HAL_ADCEx_MultiModeConfigChannel+0xa6>
 80024c4:	4b56      	ldr	r3, [pc, #344]	; (8002620 <HAL_ADCEx_MultiModeConfigChannel+0x200>)
 80024c6:	677b      	str	r3, [r7, #116]	; 0x74

    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 80024c8:	683b      	ldr	r3, [r7, #0]
 80024ca:	681b      	ldr	r3, [r3, #0]
 80024cc:	2b00      	cmp	r3, #0
 80024ce:	d04b      	beq.n	8002568 <HAL_ADCEx_MultiModeConfigChannel+0x148>
    {
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG,
 80024d0:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80024d2:	689b      	ldr	r3, [r3, #8]
 80024d4:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80024d8:	683b      	ldr	r3, [r7, #0]
 80024da:	6859      	ldr	r1, [r3, #4]
 80024dc:	687b      	ldr	r3, [r7, #4]
 80024de:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 80024e2:	035b      	lsls	r3, r3, #13
 80024e4:	430b      	orrs	r3, r1
 80024e6:	431a      	orrs	r2, r3
 80024e8:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80024ea:	609a      	str	r2, [r3, #8]
      /*      from 1 to 10 clock cycles for 10 bits,                              */
      /*      from 1 to 8 clock cycles for 8 bits                                 */
      /*      from 1 to 6 clock cycles for 6 bits                                 */
      /*    If a higher delay is selected, it will be clipped to maximum delay    */
      /*    range                                                                 */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 80024ec:	687b      	ldr	r3, [r7, #4]
 80024ee:	681b      	ldr	r3, [r3, #0]
 80024f0:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80024f4:	d004      	beq.n	8002500 <HAL_ADCEx_MultiModeConfigChannel+0xe0>
 80024f6:	687b      	ldr	r3, [r7, #4]
 80024f8:	681b      	ldr	r3, [r3, #0]
 80024fa:	4a45      	ldr	r2, [pc, #276]	; (8002610 <HAL_ADCEx_MultiModeConfigChannel+0x1f0>)
 80024fc:	4293      	cmp	r3, r2
 80024fe:	d10f      	bne.n	8002520 <HAL_ADCEx_MultiModeConfigChannel+0x100>
 8002500:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
 8002504:	f7ff ff66 	bl	80023d4 <LL_ADC_IsEnabled>
 8002508:	4604      	mov	r4, r0
 800250a:	4841      	ldr	r0, [pc, #260]	; (8002610 <HAL_ADCEx_MultiModeConfigChannel+0x1f0>)
 800250c:	f7ff ff62 	bl	80023d4 <LL_ADC_IsEnabled>
 8002510:	4603      	mov	r3, r0
 8002512:	4323      	orrs	r3, r4
 8002514:	2b00      	cmp	r3, #0
 8002516:	bf0c      	ite	eq
 8002518:	2301      	moveq	r3, #1
 800251a:	2300      	movne	r3, #0
 800251c:	b2db      	uxtb	r3, r3
 800251e:	e012      	b.n	8002546 <HAL_ADCEx_MultiModeConfigChannel+0x126>
 8002520:	483c      	ldr	r0, [pc, #240]	; (8002614 <HAL_ADCEx_MultiModeConfigChannel+0x1f4>)
 8002522:	f7ff ff57 	bl	80023d4 <LL_ADC_IsEnabled>
 8002526:	4604      	mov	r4, r0
 8002528:	483b      	ldr	r0, [pc, #236]	; (8002618 <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 800252a:	f7ff ff53 	bl	80023d4 <LL_ADC_IsEnabled>
 800252e:	4603      	mov	r3, r0
 8002530:	431c      	orrs	r4, r3
 8002532:	483c      	ldr	r0, [pc, #240]	; (8002624 <HAL_ADCEx_MultiModeConfigChannel+0x204>)
 8002534:	f7ff ff4e 	bl	80023d4 <LL_ADC_IsEnabled>
 8002538:	4603      	mov	r3, r0
 800253a:	4323      	orrs	r3, r4
 800253c:	2b00      	cmp	r3, #0
 800253e:	bf0c      	ite	eq
 8002540:	2301      	moveq	r3, #1
 8002542:	2300      	movne	r3, #0
 8002544:	b2db      	uxtb	r3, r3
 8002546:	2b00      	cmp	r3, #0
 8002548:	d056      	beq.n	80025f8 <HAL_ADCEx_MultiModeConfigChannel+0x1d8>
      {
        MODIFY_REG(tmpADC_Common->CCR,
 800254a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800254c:	689b      	ldr	r3, [r3, #8]
 800254e:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 8002552:	f023 030f 	bic.w	r3, r3, #15
 8002556:	683a      	ldr	r2, [r7, #0]
 8002558:	6811      	ldr	r1, [r2, #0]
 800255a:	683a      	ldr	r2, [r7, #0]
 800255c:	6892      	ldr	r2, [r2, #8]
 800255e:	430a      	orrs	r2, r1
 8002560:	431a      	orrs	r2, r3
 8002562:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002564:	609a      	str	r2, [r3, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8002566:	e047      	b.n	80025f8 <HAL_ADCEx_MultiModeConfigChannel+0x1d8>
                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG);
 8002568:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800256a:	689b      	ldr	r3, [r3, #8]
 800256c:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8002570:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002572:	609a      	str	r2, [r3, #8]

      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8002574:	687b      	ldr	r3, [r7, #4]
 8002576:	681b      	ldr	r3, [r3, #0]
 8002578:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800257c:	d004      	beq.n	8002588 <HAL_ADCEx_MultiModeConfigChannel+0x168>
 800257e:	687b      	ldr	r3, [r7, #4]
 8002580:	681b      	ldr	r3, [r3, #0]
 8002582:	4a23      	ldr	r2, [pc, #140]	; (8002610 <HAL_ADCEx_MultiModeConfigChannel+0x1f0>)
 8002584:	4293      	cmp	r3, r2
 8002586:	d10f      	bne.n	80025a8 <HAL_ADCEx_MultiModeConfigChannel+0x188>
 8002588:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
 800258c:	f7ff ff22 	bl	80023d4 <LL_ADC_IsEnabled>
 8002590:	4604      	mov	r4, r0
 8002592:	481f      	ldr	r0, [pc, #124]	; (8002610 <HAL_ADCEx_MultiModeConfigChannel+0x1f0>)
 8002594:	f7ff ff1e 	bl	80023d4 <LL_ADC_IsEnabled>
 8002598:	4603      	mov	r3, r0
 800259a:	4323      	orrs	r3, r4
 800259c:	2b00      	cmp	r3, #0
 800259e:	bf0c      	ite	eq
 80025a0:	2301      	moveq	r3, #1
 80025a2:	2300      	movne	r3, #0
 80025a4:	b2db      	uxtb	r3, r3
 80025a6:	e012      	b.n	80025ce <HAL_ADCEx_MultiModeConfigChannel+0x1ae>
 80025a8:	481a      	ldr	r0, [pc, #104]	; (8002614 <HAL_ADCEx_MultiModeConfigChannel+0x1f4>)
 80025aa:	f7ff ff13 	bl	80023d4 <LL_ADC_IsEnabled>
 80025ae:	4604      	mov	r4, r0
 80025b0:	4819      	ldr	r0, [pc, #100]	; (8002618 <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 80025b2:	f7ff ff0f 	bl	80023d4 <LL_ADC_IsEnabled>
 80025b6:	4603      	mov	r3, r0
 80025b8:	431c      	orrs	r4, r3
 80025ba:	481a      	ldr	r0, [pc, #104]	; (8002624 <HAL_ADCEx_MultiModeConfigChannel+0x204>)
 80025bc:	f7ff ff0a 	bl	80023d4 <LL_ADC_IsEnabled>
 80025c0:	4603      	mov	r3, r0
 80025c2:	4323      	orrs	r3, r4
 80025c4:	2b00      	cmp	r3, #0
 80025c6:	bf0c      	ite	eq
 80025c8:	2301      	moveq	r3, #1
 80025ca:	2300      	movne	r3, #0
 80025cc:	b2db      	uxtb	r3, r3
 80025ce:	2b00      	cmp	r3, #0
 80025d0:	d012      	beq.n	80025f8 <HAL_ADCEx_MultiModeConfigChannel+0x1d8>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 80025d2:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80025d4:	689b      	ldr	r3, [r3, #8]
 80025d6:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 80025da:	f023 030f 	bic.w	r3, r3, #15
 80025de:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 80025e0:	6093      	str	r3, [r2, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 80025e2:	e009      	b.n	80025f8 <HAL_ADCEx_MultiModeConfigChannel+0x1d8>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80025e4:	687b      	ldr	r3, [r7, #4]
 80025e6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80025e8:	f043 0220 	orr.w	r2, r3, #32
 80025ec:	687b      	ldr	r3, [r7, #4]
 80025ee:	65da      	str	r2, [r3, #92]	; 0x5c

    tmp_hal_status = HAL_ERROR;
 80025f0:	2301      	movs	r3, #1
 80025f2:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
 80025f6:	e000      	b.n	80025fa <HAL_ADCEx_MultiModeConfigChannel+0x1da>
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 80025f8:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80025fa:	687b      	ldr	r3, [r7, #4]
 80025fc:	2200      	movs	r2, #0
 80025fe:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

  /* Return function status */
  return tmp_hal_status;
 8002602:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
}
 8002606:	4618      	mov	r0, r3
 8002608:	3784      	adds	r7, #132	; 0x84
 800260a:	46bd      	mov	sp, r7
 800260c:	bd90      	pop	{r4, r7, pc}
 800260e:	bf00      	nop
 8002610:	50000100 	.word	0x50000100
 8002614:	50000400 	.word	0x50000400
 8002618:	50000500 	.word	0x50000500
 800261c:	50000300 	.word	0x50000300
 8002620:	50000700 	.word	0x50000700
 8002624:	50000600 	.word	0x50000600

08002628 <LL_EXTI_EnableIT_0_31>:
  * @note   (*): Available in some devices
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableIT_0_31(uint32_t ExtiLine)
{
 8002628:	b480      	push	{r7}
 800262a:	b083      	sub	sp, #12
 800262c:	af00      	add	r7, sp, #0
 800262e:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->IMR1, ExtiLine);
 8002630:	4b05      	ldr	r3, [pc, #20]	; (8002648 <LL_EXTI_EnableIT_0_31+0x20>)
 8002632:	681a      	ldr	r2, [r3, #0]
 8002634:	4904      	ldr	r1, [pc, #16]	; (8002648 <LL_EXTI_EnableIT_0_31+0x20>)
 8002636:	687b      	ldr	r3, [r7, #4]
 8002638:	4313      	orrs	r3, r2
 800263a:	600b      	str	r3, [r1, #0]
}
 800263c:	bf00      	nop
 800263e:	370c      	adds	r7, #12
 8002640:	46bd      	mov	sp, r7
 8002642:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002646:	4770      	bx	lr
 8002648:	40010400 	.word	0x40010400

0800264c <LL_EXTI_EnableIT_32_63>:
  *         @arg @ref LL_EXTI_LINE_ALL_32_63
  * @note   (*): Available in some devices
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableIT_32_63(uint32_t ExtiLine)
{
 800264c:	b480      	push	{r7}
 800264e:	b083      	sub	sp, #12
 8002650:	af00      	add	r7, sp, #0
 8002652:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->IMR2, ExtiLine);
 8002654:	4b05      	ldr	r3, [pc, #20]	; (800266c <LL_EXTI_EnableIT_32_63+0x20>)
 8002656:	6a1a      	ldr	r2, [r3, #32]
 8002658:	4904      	ldr	r1, [pc, #16]	; (800266c <LL_EXTI_EnableIT_32_63+0x20>)
 800265a:	687b      	ldr	r3, [r7, #4]
 800265c:	4313      	orrs	r3, r2
 800265e:	620b      	str	r3, [r1, #32]
}
 8002660:	bf00      	nop
 8002662:	370c      	adds	r7, #12
 8002664:	46bd      	mov	sp, r7
 8002666:	f85d 7b04 	ldr.w	r7, [sp], #4
 800266a:	4770      	bx	lr
 800266c:	40010400 	.word	0x40010400

08002670 <LL_EXTI_DisableIT_0_31>:
  * @note   (*): Available in some devices
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_DisableIT_0_31(uint32_t ExtiLine)
{
 8002670:	b480      	push	{r7}
 8002672:	b083      	sub	sp, #12
 8002674:	af00      	add	r7, sp, #0
 8002676:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->IMR1, ExtiLine);
 8002678:	4b06      	ldr	r3, [pc, #24]	; (8002694 <LL_EXTI_DisableIT_0_31+0x24>)
 800267a:	681a      	ldr	r2, [r3, #0]
 800267c:	687b      	ldr	r3, [r7, #4]
 800267e:	43db      	mvns	r3, r3
 8002680:	4904      	ldr	r1, [pc, #16]	; (8002694 <LL_EXTI_DisableIT_0_31+0x24>)
 8002682:	4013      	ands	r3, r2
 8002684:	600b      	str	r3, [r1, #0]
}
 8002686:	bf00      	nop
 8002688:	370c      	adds	r7, #12
 800268a:	46bd      	mov	sp, r7
 800268c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002690:	4770      	bx	lr
 8002692:	bf00      	nop
 8002694:	40010400 	.word	0x40010400

08002698 <LL_EXTI_DisableIT_32_63>:
  *         @arg @ref LL_EXTI_LINE_ALL_32_63
  * @note   (*): Available in some devices
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_DisableIT_32_63(uint32_t ExtiLine)
{
 8002698:	b480      	push	{r7}
 800269a:	b083      	sub	sp, #12
 800269c:	af00      	add	r7, sp, #0
 800269e:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->IMR2, ExtiLine);
 80026a0:	4b06      	ldr	r3, [pc, #24]	; (80026bc <LL_EXTI_DisableIT_32_63+0x24>)
 80026a2:	6a1a      	ldr	r2, [r3, #32]
 80026a4:	687b      	ldr	r3, [r7, #4]
 80026a6:	43db      	mvns	r3, r3
 80026a8:	4904      	ldr	r1, [pc, #16]	; (80026bc <LL_EXTI_DisableIT_32_63+0x24>)
 80026aa:	4013      	ands	r3, r2
 80026ac:	620b      	str	r3, [r1, #32]
}
 80026ae:	bf00      	nop
 80026b0:	370c      	adds	r7, #12
 80026b2:	46bd      	mov	sp, r7
 80026b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026b8:	4770      	bx	lr
 80026ba:	bf00      	nop
 80026bc:	40010400 	.word	0x40010400

080026c0 <LL_EXTI_EnableEvent_0_31>:
  * @note   (*): Available in some devices
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableEvent_0_31(uint32_t ExtiLine)
{
 80026c0:	b480      	push	{r7}
 80026c2:	b083      	sub	sp, #12
 80026c4:	af00      	add	r7, sp, #0
 80026c6:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->EMR1, ExtiLine);
 80026c8:	4b05      	ldr	r3, [pc, #20]	; (80026e0 <LL_EXTI_EnableEvent_0_31+0x20>)
 80026ca:	685a      	ldr	r2, [r3, #4]
 80026cc:	4904      	ldr	r1, [pc, #16]	; (80026e0 <LL_EXTI_EnableEvent_0_31+0x20>)
 80026ce:	687b      	ldr	r3, [r7, #4]
 80026d0:	4313      	orrs	r3, r2
 80026d2:	604b      	str	r3, [r1, #4]

}
 80026d4:	bf00      	nop
 80026d6:	370c      	adds	r7, #12
 80026d8:	46bd      	mov	sp, r7
 80026da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026de:	4770      	bx	lr
 80026e0:	40010400 	.word	0x40010400

080026e4 <LL_EXTI_EnableEvent_32_63>:
  *         @arg @ref LL_EXTI_LINE_ALL_32_63
  * @note   (*): Available in some devices
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableEvent_32_63(uint32_t ExtiLine)
{
 80026e4:	b480      	push	{r7}
 80026e6:	b083      	sub	sp, #12
 80026e8:	af00      	add	r7, sp, #0
 80026ea:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->EMR2, ExtiLine);
 80026ec:	4b05      	ldr	r3, [pc, #20]	; (8002704 <LL_EXTI_EnableEvent_32_63+0x20>)
 80026ee:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80026f0:	4904      	ldr	r1, [pc, #16]	; (8002704 <LL_EXTI_EnableEvent_32_63+0x20>)
 80026f2:	687b      	ldr	r3, [r7, #4]
 80026f4:	4313      	orrs	r3, r2
 80026f6:	624b      	str	r3, [r1, #36]	; 0x24
}
 80026f8:	bf00      	nop
 80026fa:	370c      	adds	r7, #12
 80026fc:	46bd      	mov	sp, r7
 80026fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002702:	4770      	bx	lr
 8002704:	40010400 	.word	0x40010400

08002708 <LL_EXTI_DisableEvent_0_31>:
  * @note   (*): Available in some devices
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_DisableEvent_0_31(uint32_t ExtiLine)
{
 8002708:	b480      	push	{r7}
 800270a:	b083      	sub	sp, #12
 800270c:	af00      	add	r7, sp, #0
 800270e:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->EMR1, ExtiLine);
 8002710:	4b06      	ldr	r3, [pc, #24]	; (800272c <LL_EXTI_DisableEvent_0_31+0x24>)
 8002712:	685a      	ldr	r2, [r3, #4]
 8002714:	687b      	ldr	r3, [r7, #4]
 8002716:	43db      	mvns	r3, r3
 8002718:	4904      	ldr	r1, [pc, #16]	; (800272c <LL_EXTI_DisableEvent_0_31+0x24>)
 800271a:	4013      	ands	r3, r2
 800271c:	604b      	str	r3, [r1, #4]
}
 800271e:	bf00      	nop
 8002720:	370c      	adds	r7, #12
 8002722:	46bd      	mov	sp, r7
 8002724:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002728:	4770      	bx	lr
 800272a:	bf00      	nop
 800272c:	40010400 	.word	0x40010400

08002730 <LL_EXTI_DisableEvent_32_63>:
  *         @arg @ref LL_EXTI_LINE_ALL_32_63
  * @note   (*): Available in some devices
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_DisableEvent_32_63(uint32_t ExtiLine)
{
 8002730:	b480      	push	{r7}
 8002732:	b083      	sub	sp, #12
 8002734:	af00      	add	r7, sp, #0
 8002736:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->EMR2, ExtiLine);
 8002738:	4b06      	ldr	r3, [pc, #24]	; (8002754 <LL_EXTI_DisableEvent_32_63+0x24>)
 800273a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800273c:	687b      	ldr	r3, [r7, #4]
 800273e:	43db      	mvns	r3, r3
 8002740:	4904      	ldr	r1, [pc, #16]	; (8002754 <LL_EXTI_DisableEvent_32_63+0x24>)
 8002742:	4013      	ands	r3, r2
 8002744:	624b      	str	r3, [r1, #36]	; 0x24
}
 8002746:	bf00      	nop
 8002748:	370c      	adds	r7, #12
 800274a:	46bd      	mov	sp, r7
 800274c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002750:	4770      	bx	lr
 8002752:	bf00      	nop
 8002754:	40010400 	.word	0x40010400

08002758 <LL_EXTI_EnableRisingTrig_0_31>:
  * @note   (*): Available in some devices
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableRisingTrig_0_31(uint32_t ExtiLine)
{
 8002758:	b480      	push	{r7}
 800275a:	b083      	sub	sp, #12
 800275c:	af00      	add	r7, sp, #0
 800275e:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->RTSR1, ExtiLine);
 8002760:	4b05      	ldr	r3, [pc, #20]	; (8002778 <LL_EXTI_EnableRisingTrig_0_31+0x20>)
 8002762:	689a      	ldr	r2, [r3, #8]
 8002764:	4904      	ldr	r1, [pc, #16]	; (8002778 <LL_EXTI_EnableRisingTrig_0_31+0x20>)
 8002766:	687b      	ldr	r3, [r7, #4]
 8002768:	4313      	orrs	r3, r2
 800276a:	608b      	str	r3, [r1, #8]

}
 800276c:	bf00      	nop
 800276e:	370c      	adds	r7, #12
 8002770:	46bd      	mov	sp, r7
 8002772:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002776:	4770      	bx	lr
 8002778:	40010400 	.word	0x40010400

0800277c <LL_EXTI_EnableRisingTrig_32_63>:
  *         @arg @ref LL_EXTI_LINE_41
  * @note   (*): Available in some devices
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableRisingTrig_32_63(uint32_t ExtiLine)
{
 800277c:	b480      	push	{r7}
 800277e:	b083      	sub	sp, #12
 8002780:	af00      	add	r7, sp, #0
 8002782:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->RTSR2, ExtiLine);
 8002784:	4b05      	ldr	r3, [pc, #20]	; (800279c <LL_EXTI_EnableRisingTrig_32_63+0x20>)
 8002786:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002788:	4904      	ldr	r1, [pc, #16]	; (800279c <LL_EXTI_EnableRisingTrig_32_63+0x20>)
 800278a:	687b      	ldr	r3, [r7, #4]
 800278c:	4313      	orrs	r3, r2
 800278e:	628b      	str	r3, [r1, #40]	; 0x28
}
 8002790:	bf00      	nop
 8002792:	370c      	adds	r7, #12
 8002794:	46bd      	mov	sp, r7
 8002796:	f85d 7b04 	ldr.w	r7, [sp], #4
 800279a:	4770      	bx	lr
 800279c:	40010400 	.word	0x40010400

080027a0 <LL_EXTI_DisableRisingTrig_0_31>:
  * @note   (*): Available in some devices
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_DisableRisingTrig_0_31(uint32_t ExtiLine)
{
 80027a0:	b480      	push	{r7}
 80027a2:	b083      	sub	sp, #12
 80027a4:	af00      	add	r7, sp, #0
 80027a6:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->RTSR1, ExtiLine);
 80027a8:	4b06      	ldr	r3, [pc, #24]	; (80027c4 <LL_EXTI_DisableRisingTrig_0_31+0x24>)
 80027aa:	689a      	ldr	r2, [r3, #8]
 80027ac:	687b      	ldr	r3, [r7, #4]
 80027ae:	43db      	mvns	r3, r3
 80027b0:	4904      	ldr	r1, [pc, #16]	; (80027c4 <LL_EXTI_DisableRisingTrig_0_31+0x24>)
 80027b2:	4013      	ands	r3, r2
 80027b4:	608b      	str	r3, [r1, #8]

}
 80027b6:	bf00      	nop
 80027b8:	370c      	adds	r7, #12
 80027ba:	46bd      	mov	sp, r7
 80027bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027c0:	4770      	bx	lr
 80027c2:	bf00      	nop
 80027c4:	40010400 	.word	0x40010400

080027c8 <LL_EXTI_DisableRisingTrig_32_63>:
  *         @arg @ref LL_EXTI_LINE_41
  * @note   (*): Available in some devices
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_DisableRisingTrig_32_63(uint32_t ExtiLine)
{
 80027c8:	b480      	push	{r7}
 80027ca:	b083      	sub	sp, #12
 80027cc:	af00      	add	r7, sp, #0
 80027ce:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->RTSR2, ExtiLine);
 80027d0:	4b06      	ldr	r3, [pc, #24]	; (80027ec <LL_EXTI_DisableRisingTrig_32_63+0x24>)
 80027d2:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80027d4:	687b      	ldr	r3, [r7, #4]
 80027d6:	43db      	mvns	r3, r3
 80027d8:	4904      	ldr	r1, [pc, #16]	; (80027ec <LL_EXTI_DisableRisingTrig_32_63+0x24>)
 80027da:	4013      	ands	r3, r2
 80027dc:	628b      	str	r3, [r1, #40]	; 0x28
}
 80027de:	bf00      	nop
 80027e0:	370c      	adds	r7, #12
 80027e2:	46bd      	mov	sp, r7
 80027e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027e8:	4770      	bx	lr
 80027ea:	bf00      	nop
 80027ec:	40010400 	.word	0x40010400

080027f0 <LL_EXTI_EnableFallingTrig_0_31>:
  * @note   (*): Available in some devices
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableFallingTrig_0_31(uint32_t ExtiLine)
{
 80027f0:	b480      	push	{r7}
 80027f2:	b083      	sub	sp, #12
 80027f4:	af00      	add	r7, sp, #0
 80027f6:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->FTSR1, ExtiLine);
 80027f8:	4b05      	ldr	r3, [pc, #20]	; (8002810 <LL_EXTI_EnableFallingTrig_0_31+0x20>)
 80027fa:	68da      	ldr	r2, [r3, #12]
 80027fc:	4904      	ldr	r1, [pc, #16]	; (8002810 <LL_EXTI_EnableFallingTrig_0_31+0x20>)
 80027fe:	687b      	ldr	r3, [r7, #4]
 8002800:	4313      	orrs	r3, r2
 8002802:	60cb      	str	r3, [r1, #12]
}
 8002804:	bf00      	nop
 8002806:	370c      	adds	r7, #12
 8002808:	46bd      	mov	sp, r7
 800280a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800280e:	4770      	bx	lr
 8002810:	40010400 	.word	0x40010400

08002814 <LL_EXTI_EnableFallingTrig_32_63>:
  *         @arg @ref LL_EXTI_LINE_41
  * @note   (*): Available in some devices
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableFallingTrig_32_63(uint32_t ExtiLine)
{
 8002814:	b480      	push	{r7}
 8002816:	b083      	sub	sp, #12
 8002818:	af00      	add	r7, sp, #0
 800281a:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->FTSR2, ExtiLine);
 800281c:	4b05      	ldr	r3, [pc, #20]	; (8002834 <LL_EXTI_EnableFallingTrig_32_63+0x20>)
 800281e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002820:	4904      	ldr	r1, [pc, #16]	; (8002834 <LL_EXTI_EnableFallingTrig_32_63+0x20>)
 8002822:	687b      	ldr	r3, [r7, #4]
 8002824:	4313      	orrs	r3, r2
 8002826:	62cb      	str	r3, [r1, #44]	; 0x2c
}
 8002828:	bf00      	nop
 800282a:	370c      	adds	r7, #12
 800282c:	46bd      	mov	sp, r7
 800282e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002832:	4770      	bx	lr
 8002834:	40010400 	.word	0x40010400

08002838 <LL_EXTI_DisableFallingTrig_0_31>:
  * @note   (*): Available in some devices
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_DisableFallingTrig_0_31(uint32_t ExtiLine)
{
 8002838:	b480      	push	{r7}
 800283a:	b083      	sub	sp, #12
 800283c:	af00      	add	r7, sp, #0
 800283e:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->FTSR1, ExtiLine);
 8002840:	4b06      	ldr	r3, [pc, #24]	; (800285c <LL_EXTI_DisableFallingTrig_0_31+0x24>)
 8002842:	68da      	ldr	r2, [r3, #12]
 8002844:	687b      	ldr	r3, [r7, #4]
 8002846:	43db      	mvns	r3, r3
 8002848:	4904      	ldr	r1, [pc, #16]	; (800285c <LL_EXTI_DisableFallingTrig_0_31+0x24>)
 800284a:	4013      	ands	r3, r2
 800284c:	60cb      	str	r3, [r1, #12]
}
 800284e:	bf00      	nop
 8002850:	370c      	adds	r7, #12
 8002852:	46bd      	mov	sp, r7
 8002854:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002858:	4770      	bx	lr
 800285a:	bf00      	nop
 800285c:	40010400 	.word	0x40010400

08002860 <LL_EXTI_DisableFallingTrig_32_63>:
  *         @arg @ref LL_EXTI_LINE_41
  * @note   (*): Available in some devices
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_DisableFallingTrig_32_63(uint32_t ExtiLine)
{
 8002860:	b480      	push	{r7}
 8002862:	b083      	sub	sp, #12
 8002864:	af00      	add	r7, sp, #0
 8002866:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->FTSR2, ExtiLine);
 8002868:	4b06      	ldr	r3, [pc, #24]	; (8002884 <LL_EXTI_DisableFallingTrig_32_63+0x24>)
 800286a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800286c:	687b      	ldr	r3, [r7, #4]
 800286e:	43db      	mvns	r3, r3
 8002870:	4904      	ldr	r1, [pc, #16]	; (8002884 <LL_EXTI_DisableFallingTrig_32_63+0x24>)
 8002872:	4013      	ands	r3, r2
 8002874:	62cb      	str	r3, [r1, #44]	; 0x2c
}
 8002876:	bf00      	nop
 8002878:	370c      	adds	r7, #12
 800287a:	46bd      	mov	sp, r7
 800287c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002880:	4770      	bx	lr
 8002882:	bf00      	nop
 8002884:	40010400 	.word	0x40010400

08002888 <LL_EXTI_ClearFlag_0_31>:
  * @note   (*): Available in some devices
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_ClearFlag_0_31(uint32_t ExtiLine)
{
 8002888:	b480      	push	{r7}
 800288a:	b083      	sub	sp, #12
 800288c:	af00      	add	r7, sp, #0
 800288e:	6078      	str	r0, [r7, #4]
  WRITE_REG(EXTI->PR1, ExtiLine);
 8002890:	4a04      	ldr	r2, [pc, #16]	; (80028a4 <LL_EXTI_ClearFlag_0_31+0x1c>)
 8002892:	687b      	ldr	r3, [r7, #4]
 8002894:	6153      	str	r3, [r2, #20]
}
 8002896:	bf00      	nop
 8002898:	370c      	adds	r7, #12
 800289a:	46bd      	mov	sp, r7
 800289c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028a0:	4770      	bx	lr
 80028a2:	bf00      	nop
 80028a4:	40010400 	.word	0x40010400

080028a8 <LL_EXTI_ClearFlag_32_63>:
  *         @arg @ref LL_EXTI_LINE_41
  * @note   (*): Available in some devices
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_ClearFlag_32_63(uint32_t ExtiLine)
{
 80028a8:	b480      	push	{r7}
 80028aa:	b083      	sub	sp, #12
 80028ac:	af00      	add	r7, sp, #0
 80028ae:	6078      	str	r0, [r7, #4]
  WRITE_REG(EXTI->PR2, ExtiLine);
 80028b0:	4a04      	ldr	r2, [pc, #16]	; (80028c4 <LL_EXTI_ClearFlag_32_63+0x1c>)
 80028b2:	687b      	ldr	r3, [r7, #4]
 80028b4:	6353      	str	r3, [r2, #52]	; 0x34
}
 80028b6:	bf00      	nop
 80028b8:	370c      	adds	r7, #12
 80028ba:	46bd      	mov	sp, r7
 80028bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028c0:	4770      	bx	lr
 80028c2:	bf00      	nop
 80028c4:	40010400 	.word	0x40010400

080028c8 <HAL_COMP_Init>:
  *         To unlock the configuration, perform a system reset.
  * @param  hcomp  COMP handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_COMP_Init(COMP_HandleTypeDef *hcomp)
{
 80028c8:	b580      	push	{r7, lr}
 80028ca:	b088      	sub	sp, #32
 80028cc:	af00      	add	r7, sp, #0
 80028ce:	6078      	str	r0, [r7, #4]
  uint32_t tmp_csr;
  uint32_t exti_line;
  uint32_t comp_voltage_scaler_initialized; /* Value "0" if comparator voltage scaler is not initialized */
  __IO uint32_t wait_loop_index = 0UL;
 80028d0:	2300      	movs	r3, #0
 80028d2:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef status = HAL_OK;
 80028d4:	2300      	movs	r3, #0
 80028d6:	77fb      	strb	r3, [r7, #31]

  /* Check the COMP handle allocation and lock status */
  if(hcomp == NULL)
 80028d8:	687b      	ldr	r3, [r7, #4]
 80028da:	2b00      	cmp	r3, #0
 80028dc:	d102      	bne.n	80028e4 <HAL_COMP_Init+0x1c>
  {
    status = HAL_ERROR;
 80028de:	2301      	movs	r3, #1
 80028e0:	77fb      	strb	r3, [r7, #31]
 80028e2:	e180      	b.n	8002be6 <HAL_COMP_Init+0x31e>
  }
  else if(__HAL_COMP_IS_LOCKED(hcomp))
 80028e4:	687b      	ldr	r3, [r7, #4]
 80028e6:	681b      	ldr	r3, [r3, #0]
 80028e8:	681b      	ldr	r3, [r3, #0]
 80028ea:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80028ee:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80028f2:	d102      	bne.n	80028fa <HAL_COMP_Init+0x32>
  {
    status = HAL_ERROR;
 80028f4:	2301      	movs	r3, #1
 80028f6:	77fb      	strb	r3, [r7, #31]
 80028f8:	e175      	b.n	8002be6 <HAL_COMP_Init+0x31e>
    assert_param(IS_COMP_OUTPUTPOL(hcomp->Init.OutputPol));
    assert_param(IS_COMP_HYSTERESIS(hcomp->Init.Hysteresis));
    assert_param(IS_COMP_BLANKINGSRC_INSTANCE(hcomp->Instance, hcomp->Init.BlankingSrce));
    assert_param(IS_COMP_TRIGGERMODE(hcomp->Init.TriggerMode));

    if(hcomp->State == HAL_COMP_STATE_RESET)
 80028fa:	687b      	ldr	r3, [r7, #4]
 80028fc:	7f5b      	ldrb	r3, [r3, #29]
 80028fe:	b2db      	uxtb	r3, r3
 8002900:	2b00      	cmp	r3, #0
 8002902:	d108      	bne.n	8002916 <HAL_COMP_Init+0x4e>
    {
      /* Allocate lock resource and initialize it */
      hcomp->Lock = HAL_UNLOCKED;
 8002904:	687b      	ldr	r3, [r7, #4]
 8002906:	2200      	movs	r2, #0
 8002908:	771a      	strb	r2, [r3, #28]

      /* Set COMP error code to none */
      COMP_CLEAR_ERRORCODE(hcomp);
 800290a:	687b      	ldr	r3, [r7, #4]
 800290c:	2200      	movs	r2, #0
 800290e:	621a      	str	r2, [r3, #32]
#else
      /* Init the low level hardware */
      /* Note: Internal control clock of the comparators must                 */
      /*       be enabled in "HAL_COMP_MspInit()"                             */
      /*       using "__HAL_RCC_SYSCFG_CLK_ENABLE()".                         */
      HAL_COMP_MspInit(hcomp);
 8002910:	6878      	ldr	r0, [r7, #4]
 8002912:	f7fd fd8d 	bl	8000430 <HAL_COMP_MspInit>
#endif /* USE_HAL_COMP_REGISTER_CALLBACKS */
    }

    /* Memorize voltage scaler state before initialization */
    comp_voltage_scaler_initialized = READ_BIT(hcomp->Instance->CSR, COMP_CSR_SCALEN);
 8002916:	687b      	ldr	r3, [r7, #4]
 8002918:	681b      	ldr	r3, [r3, #0]
 800291a:	681b      	ldr	r3, [r3, #0]
 800291c:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8002920:	61bb      	str	r3, [r7, #24]

    /* Set COMP parameters */
    tmp_csr = (  hcomp->Init.InputMinus
 8002922:	687b      	ldr	r3, [r7, #4]
 8002924:	689a      	ldr	r2, [r3, #8]
               | hcomp->Init.InputPlus
 8002926:	687b      	ldr	r3, [r7, #4]
 8002928:	685b      	ldr	r3, [r3, #4]
 800292a:	431a      	orrs	r2, r3
               | hcomp->Init.BlankingSrce
 800292c:	687b      	ldr	r3, [r7, #4]
 800292e:	695b      	ldr	r3, [r3, #20]
 8002930:	431a      	orrs	r2, r3
               | hcomp->Init.Hysteresis
 8002932:	687b      	ldr	r3, [r7, #4]
 8002934:	68db      	ldr	r3, [r3, #12]
 8002936:	431a      	orrs	r2, r3
               | hcomp->Init.OutputPol
 8002938:	687b      	ldr	r3, [r7, #4]
 800293a:	691b      	ldr	r3, [r3, #16]
    tmp_csr = (  hcomp->Init.InputMinus
 800293c:	4313      	orrs	r3, r2
 800293e:	617b      	str	r3, [r7, #20]
              );

    /* Set parameters in COMP register */
    /* Note: Update all bits except read-only, lock and enable bits */
    MODIFY_REG(hcomp->Instance->CSR,
 8002940:	687b      	ldr	r3, [r7, #4]
 8002942:	681b      	ldr	r3, [r3, #0]
 8002944:	681a      	ldr	r2, [r3, #0]
 8002946:	4b98      	ldr	r3, [pc, #608]	; (8002ba8 <HAL_COMP_Init+0x2e0>)
 8002948:	4013      	ands	r3, r2
 800294a:	687a      	ldr	r2, [r7, #4]
 800294c:	6812      	ldr	r2, [r2, #0]
 800294e:	6979      	ldr	r1, [r7, #20]
 8002950:	430b      	orrs	r3, r1
 8002952:	6013      	str	r3, [r2, #0]
               tmp_csr
              );

    /* Delay for COMP scaler bridge voltage stabilization */
    /* Apply the delay if voltage scaler bridge is required and not already enabled */
    if ((READ_BIT(hcomp->Instance->CSR, COMP_CSR_SCALEN) != 0UL) &&
 8002954:	687b      	ldr	r3, [r7, #4]
 8002956:	681b      	ldr	r3, [r3, #0]
 8002958:	681b      	ldr	r3, [r3, #0]
 800295a:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800295e:	2b00      	cmp	r3, #0
 8002960:	d015      	beq.n	800298e <HAL_COMP_Init+0xc6>
 8002962:	69bb      	ldr	r3, [r7, #24]
 8002964:	2b00      	cmp	r3, #0
 8002966:	d112      	bne.n	800298e <HAL_COMP_Init+0xc6>
    {
      /* Wait loop initialization and execution */
      /* Note: Variable divided by 2 to compensate partially              */
      /*       CPU processing cycles, scaling in us split to not          */
      /*       exceed 32 bits register capacity and handle low frequency. */
      wait_loop_index = ((COMP_DELAY_VOLTAGE_SCALER_STAB_US / 10UL) * (SystemCoreClock / (100000UL * 2UL)));
 8002968:	4b90      	ldr	r3, [pc, #576]	; (8002bac <HAL_COMP_Init+0x2e4>)
 800296a:	681b      	ldr	r3, [r3, #0]
 800296c:	099b      	lsrs	r3, r3, #6
 800296e:	4a90      	ldr	r2, [pc, #576]	; (8002bb0 <HAL_COMP_Init+0x2e8>)
 8002970:	fba2 2303 	umull	r2, r3, r2, r3
 8002974:	099a      	lsrs	r2, r3, #6
 8002976:	4613      	mov	r3, r2
 8002978:	009b      	lsls	r3, r3, #2
 800297a:	4413      	add	r3, r2
 800297c:	009b      	lsls	r3, r3, #2
 800297e:	60fb      	str	r3, [r7, #12]
      while(wait_loop_index != 0UL)
 8002980:	e002      	b.n	8002988 <HAL_COMP_Init+0xc0>
      {
        wait_loop_index--;
 8002982:	68fb      	ldr	r3, [r7, #12]
 8002984:	3b01      	subs	r3, #1
 8002986:	60fb      	str	r3, [r7, #12]
      while(wait_loop_index != 0UL)
 8002988:	68fb      	ldr	r3, [r7, #12]
 800298a:	2b00      	cmp	r3, #0
 800298c:	d1f9      	bne.n	8002982 <HAL_COMP_Init+0xba>
      }
    }

    /* Get the EXTI line corresponding to the selected COMP instance */
    exti_line = COMP_GET_EXTI_LINE(hcomp->Instance);
 800298e:	687b      	ldr	r3, [r7, #4]
 8002990:	681b      	ldr	r3, [r3, #0]
 8002992:	4a88      	ldr	r2, [pc, #544]	; (8002bb4 <HAL_COMP_Init+0x2ec>)
 8002994:	4293      	cmp	r3, r2
 8002996:	d028      	beq.n	80029ea <HAL_COMP_Init+0x122>
 8002998:	687b      	ldr	r3, [r7, #4]
 800299a:	681b      	ldr	r3, [r3, #0]
 800299c:	4a86      	ldr	r2, [pc, #536]	; (8002bb8 <HAL_COMP_Init+0x2f0>)
 800299e:	4293      	cmp	r3, r2
 80029a0:	d020      	beq.n	80029e4 <HAL_COMP_Init+0x11c>
 80029a2:	687b      	ldr	r3, [r7, #4]
 80029a4:	681b      	ldr	r3, [r3, #0]
 80029a6:	4a85      	ldr	r2, [pc, #532]	; (8002bbc <HAL_COMP_Init+0x2f4>)
 80029a8:	4293      	cmp	r3, r2
 80029aa:	d018      	beq.n	80029de <HAL_COMP_Init+0x116>
 80029ac:	687b      	ldr	r3, [r7, #4]
 80029ae:	681b      	ldr	r3, [r3, #0]
 80029b0:	4a83      	ldr	r2, [pc, #524]	; (8002bc0 <HAL_COMP_Init+0x2f8>)
 80029b2:	4293      	cmp	r3, r2
 80029b4:	d010      	beq.n	80029d8 <HAL_COMP_Init+0x110>
 80029b6:	687b      	ldr	r3, [r7, #4]
 80029b8:	681b      	ldr	r3, [r3, #0]
 80029ba:	4a82      	ldr	r2, [pc, #520]	; (8002bc4 <HAL_COMP_Init+0x2fc>)
 80029bc:	4293      	cmp	r3, r2
 80029be:	d008      	beq.n	80029d2 <HAL_COMP_Init+0x10a>
 80029c0:	687b      	ldr	r3, [r7, #4]
 80029c2:	681b      	ldr	r3, [r3, #0]
 80029c4:	4a80      	ldr	r2, [pc, #512]	; (8002bc8 <HAL_COMP_Init+0x300>)
 80029c6:	4293      	cmp	r3, r2
 80029c8:	d101      	bne.n	80029ce <HAL_COMP_Init+0x106>
 80029ca:	2301      	movs	r3, #1
 80029cc:	e00f      	b.n	80029ee <HAL_COMP_Init+0x126>
 80029ce:	2302      	movs	r3, #2
 80029d0:	e00d      	b.n	80029ee <HAL_COMP_Init+0x126>
 80029d2:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 80029d6:	e00a      	b.n	80029ee <HAL_COMP_Init+0x126>
 80029d8:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80029dc:	e007      	b.n	80029ee <HAL_COMP_Init+0x126>
 80029de:	f04f 5300 	mov.w	r3, #536870912	; 0x20000000
 80029e2:	e004      	b.n	80029ee <HAL_COMP_Init+0x126>
 80029e4:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80029e8:	e001      	b.n	80029ee <HAL_COMP_Init+0x126>
 80029ea:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 80029ee:	613b      	str	r3, [r7, #16]

    /* Manage EXTI settings */
    if((hcomp->Init.TriggerMode & (COMP_EXTI_IT | COMP_EXTI_EVENT)) != 0UL)
 80029f0:	687b      	ldr	r3, [r7, #4]
 80029f2:	699b      	ldr	r3, [r3, #24]
 80029f4:	f003 0303 	and.w	r3, r3, #3
 80029f8:	2b00      	cmp	r3, #0
 80029fa:	f000 80b6 	beq.w	8002b6a <HAL_COMP_Init+0x2a2>
    {
      /* Configure EXTI rising edge */
      if((hcomp->Init.TriggerMode & COMP_EXTI_RISING) != 0UL)
 80029fe:	687b      	ldr	r3, [r7, #4]
 8002a00:	699b      	ldr	r3, [r3, #24]
 8002a02:	f003 0310 	and.w	r3, r3, #16
 8002a06:	2b00      	cmp	r3, #0
 8002a08:	d011      	beq.n	8002a2e <HAL_COMP_Init+0x166>
      {
#if defined(STM32G474xx) || defined(STM32G484xx) || defined(STM32G473xx) || defined(STM32G483xx)
        if((hcomp->Instance == COMP6) || (hcomp->Instance == COMP7))
 8002a0a:	687b      	ldr	r3, [r7, #4]
 8002a0c:	681b      	ldr	r3, [r3, #0]
 8002a0e:	4a6e      	ldr	r2, [pc, #440]	; (8002bc8 <HAL_COMP_Init+0x300>)
 8002a10:	4293      	cmp	r3, r2
 8002a12:	d004      	beq.n	8002a1e <HAL_COMP_Init+0x156>
 8002a14:	687b      	ldr	r3, [r7, #4]
 8002a16:	681b      	ldr	r3, [r3, #0]
 8002a18:	4a6c      	ldr	r2, [pc, #432]	; (8002bcc <HAL_COMP_Init+0x304>)
 8002a1a:	4293      	cmp	r3, r2
 8002a1c:	d103      	bne.n	8002a26 <HAL_COMP_Init+0x15e>
        {
          LL_EXTI_EnableRisingTrig_32_63(exti_line);
 8002a1e:	6938      	ldr	r0, [r7, #16]
 8002a20:	f7ff feac 	bl	800277c <LL_EXTI_EnableRisingTrig_32_63>
 8002a24:	e014      	b.n	8002a50 <HAL_COMP_Init+0x188>
        }
        else
        {
          LL_EXTI_EnableRisingTrig_0_31(exti_line);
 8002a26:	6938      	ldr	r0, [r7, #16]
 8002a28:	f7ff fe96 	bl	8002758 <LL_EXTI_EnableRisingTrig_0_31>
 8002a2c:	e010      	b.n	8002a50 <HAL_COMP_Init+0x188>
#endif
      }
      else
      {
#if defined(STM32G474xx) || defined(STM32G484xx) || defined(STM32G473xx) || defined(STM32G483xx)
        if((hcomp->Instance == COMP6) || (hcomp->Instance == COMP7))
 8002a2e:	687b      	ldr	r3, [r7, #4]
 8002a30:	681b      	ldr	r3, [r3, #0]
 8002a32:	4a65      	ldr	r2, [pc, #404]	; (8002bc8 <HAL_COMP_Init+0x300>)
 8002a34:	4293      	cmp	r3, r2
 8002a36:	d004      	beq.n	8002a42 <HAL_COMP_Init+0x17a>
 8002a38:	687b      	ldr	r3, [r7, #4]
 8002a3a:	681b      	ldr	r3, [r3, #0]
 8002a3c:	4a63      	ldr	r2, [pc, #396]	; (8002bcc <HAL_COMP_Init+0x304>)
 8002a3e:	4293      	cmp	r3, r2
 8002a40:	d103      	bne.n	8002a4a <HAL_COMP_Init+0x182>
        {
          LL_EXTI_DisableRisingTrig_32_63(exti_line);
 8002a42:	6938      	ldr	r0, [r7, #16]
 8002a44:	f7ff fec0 	bl	80027c8 <LL_EXTI_DisableRisingTrig_32_63>
 8002a48:	e002      	b.n	8002a50 <HAL_COMP_Init+0x188>
        }
        else
        {
          LL_EXTI_DisableRisingTrig_0_31(exti_line);
 8002a4a:	6938      	ldr	r0, [r7, #16]
 8002a4c:	f7ff fea8 	bl	80027a0 <LL_EXTI_DisableRisingTrig_0_31>
        LL_EXTI_DisableRisingTrig_0_31(exti_line);
#endif
      }

      /* Configure EXTI falling edge */
      if((hcomp->Init.TriggerMode & COMP_EXTI_FALLING) != 0UL)
 8002a50:	687b      	ldr	r3, [r7, #4]
 8002a52:	699b      	ldr	r3, [r3, #24]
 8002a54:	f003 0320 	and.w	r3, r3, #32
 8002a58:	2b00      	cmp	r3, #0
 8002a5a:	d011      	beq.n	8002a80 <HAL_COMP_Init+0x1b8>
      {
#if defined(STM32G474xx) || defined(STM32G484xx) || defined(STM32G473xx) || defined(STM32G483xx)
        if((hcomp->Instance == COMP6) || (hcomp->Instance == COMP7))
 8002a5c:	687b      	ldr	r3, [r7, #4]
 8002a5e:	681b      	ldr	r3, [r3, #0]
 8002a60:	4a59      	ldr	r2, [pc, #356]	; (8002bc8 <HAL_COMP_Init+0x300>)
 8002a62:	4293      	cmp	r3, r2
 8002a64:	d004      	beq.n	8002a70 <HAL_COMP_Init+0x1a8>
 8002a66:	687b      	ldr	r3, [r7, #4]
 8002a68:	681b      	ldr	r3, [r3, #0]
 8002a6a:	4a58      	ldr	r2, [pc, #352]	; (8002bcc <HAL_COMP_Init+0x304>)
 8002a6c:	4293      	cmp	r3, r2
 8002a6e:	d103      	bne.n	8002a78 <HAL_COMP_Init+0x1b0>
        {
          LL_EXTI_EnableFallingTrig_32_63(exti_line);
 8002a70:	6938      	ldr	r0, [r7, #16]
 8002a72:	f7ff fecf 	bl	8002814 <LL_EXTI_EnableFallingTrig_32_63>
 8002a76:	e014      	b.n	8002aa2 <HAL_COMP_Init+0x1da>
        }
        else
        {
          LL_EXTI_EnableFallingTrig_0_31(exti_line);
 8002a78:	6938      	ldr	r0, [r7, #16]
 8002a7a:	f7ff feb9 	bl	80027f0 <LL_EXTI_EnableFallingTrig_0_31>
 8002a7e:	e010      	b.n	8002aa2 <HAL_COMP_Init+0x1da>
#endif
      }
      else
      {
#if defined(STM32G474xx) || defined(STM32G484xx) || defined(STM32G473xx) || defined(STM32G483xx)
        if((hcomp->Instance == COMP6) || (hcomp->Instance == COMP7))
 8002a80:	687b      	ldr	r3, [r7, #4]
 8002a82:	681b      	ldr	r3, [r3, #0]
 8002a84:	4a50      	ldr	r2, [pc, #320]	; (8002bc8 <HAL_COMP_Init+0x300>)
 8002a86:	4293      	cmp	r3, r2
 8002a88:	d004      	beq.n	8002a94 <HAL_COMP_Init+0x1cc>
 8002a8a:	687b      	ldr	r3, [r7, #4]
 8002a8c:	681b      	ldr	r3, [r3, #0]
 8002a8e:	4a4f      	ldr	r2, [pc, #316]	; (8002bcc <HAL_COMP_Init+0x304>)
 8002a90:	4293      	cmp	r3, r2
 8002a92:	d103      	bne.n	8002a9c <HAL_COMP_Init+0x1d4>
        {
          LL_EXTI_DisableFallingTrig_32_63(exti_line);
 8002a94:	6938      	ldr	r0, [r7, #16]
 8002a96:	f7ff fee3 	bl	8002860 <LL_EXTI_DisableFallingTrig_32_63>
 8002a9a:	e002      	b.n	8002aa2 <HAL_COMP_Init+0x1da>
        }
        else
        {
          LL_EXTI_DisableFallingTrig_0_31(exti_line);
 8002a9c:	6938      	ldr	r0, [r7, #16]
 8002a9e:	f7ff fecb 	bl	8002838 <LL_EXTI_DisableFallingTrig_0_31>
#endif
      }

      /* Clear COMP EXTI pending bit (if any) */
#if defined(STM32G474xx) || defined(STM32G484xx) || defined(STM32G473xx) || defined(STM32G483xx)
      if((hcomp->Instance == COMP6) || (hcomp->Instance == COMP7))
 8002aa2:	687b      	ldr	r3, [r7, #4]
 8002aa4:	681b      	ldr	r3, [r3, #0]
 8002aa6:	4a48      	ldr	r2, [pc, #288]	; (8002bc8 <HAL_COMP_Init+0x300>)
 8002aa8:	4293      	cmp	r3, r2
 8002aaa:	d004      	beq.n	8002ab6 <HAL_COMP_Init+0x1ee>
 8002aac:	687b      	ldr	r3, [r7, #4]
 8002aae:	681b      	ldr	r3, [r3, #0]
 8002ab0:	4a46      	ldr	r2, [pc, #280]	; (8002bcc <HAL_COMP_Init+0x304>)
 8002ab2:	4293      	cmp	r3, r2
 8002ab4:	d103      	bne.n	8002abe <HAL_COMP_Init+0x1f6>
      {
        LL_EXTI_ClearFlag_32_63(exti_line);
 8002ab6:	6938      	ldr	r0, [r7, #16]
 8002ab8:	f7ff fef6 	bl	80028a8 <LL_EXTI_ClearFlag_32_63>
 8002abc:	e002      	b.n	8002ac4 <HAL_COMP_Init+0x1fc>
      }
      else
      {
        LL_EXTI_ClearFlag_0_31(exti_line);
 8002abe:	6938      	ldr	r0, [r7, #16]
 8002ac0:	f7ff fee2 	bl	8002888 <LL_EXTI_ClearFlag_0_31>
#else
      LL_EXTI_ClearFlag_0_31(exti_line);
#endif

      /* Configure EXTI event mode */
      if((hcomp->Init.TriggerMode & COMP_EXTI_EVENT) != 0UL)
 8002ac4:	687b      	ldr	r3, [r7, #4]
 8002ac6:	699b      	ldr	r3, [r3, #24]
 8002ac8:	f003 0302 	and.w	r3, r3, #2
 8002acc:	2b00      	cmp	r3, #0
 8002ace:	d011      	beq.n	8002af4 <HAL_COMP_Init+0x22c>
      {
#if defined(STM32G474xx) || defined(STM32G484xx) || defined(STM32G473xx) || defined(STM32G483xx)
        if((hcomp->Instance == COMP6) || (hcomp->Instance == COMP7))
 8002ad0:	687b      	ldr	r3, [r7, #4]
 8002ad2:	681b      	ldr	r3, [r3, #0]
 8002ad4:	4a3c      	ldr	r2, [pc, #240]	; (8002bc8 <HAL_COMP_Init+0x300>)
 8002ad6:	4293      	cmp	r3, r2
 8002ad8:	d004      	beq.n	8002ae4 <HAL_COMP_Init+0x21c>
 8002ada:	687b      	ldr	r3, [r7, #4]
 8002adc:	681b      	ldr	r3, [r3, #0]
 8002ade:	4a3b      	ldr	r2, [pc, #236]	; (8002bcc <HAL_COMP_Init+0x304>)
 8002ae0:	4293      	cmp	r3, r2
 8002ae2:	d103      	bne.n	8002aec <HAL_COMP_Init+0x224>
        {
          LL_EXTI_EnableEvent_32_63(exti_line);
 8002ae4:	6938      	ldr	r0, [r7, #16]
 8002ae6:	f7ff fdfd 	bl	80026e4 <LL_EXTI_EnableEvent_32_63>
 8002aea:	e014      	b.n	8002b16 <HAL_COMP_Init+0x24e>
        }
        else
        {
          LL_EXTI_EnableEvent_0_31(exti_line);
 8002aec:	6938      	ldr	r0, [r7, #16]
 8002aee:	f7ff fde7 	bl	80026c0 <LL_EXTI_EnableEvent_0_31>
 8002af2:	e010      	b.n	8002b16 <HAL_COMP_Init+0x24e>
#endif
      }
      else
      {
#if defined(STM32G474xx) || defined(STM32G484xx) || defined(STM32G473xx) || defined(STM32G483xx)
        if((hcomp->Instance == COMP6) || (hcomp->Instance == COMP7))
 8002af4:	687b      	ldr	r3, [r7, #4]
 8002af6:	681b      	ldr	r3, [r3, #0]
 8002af8:	4a33      	ldr	r2, [pc, #204]	; (8002bc8 <HAL_COMP_Init+0x300>)
 8002afa:	4293      	cmp	r3, r2
 8002afc:	d004      	beq.n	8002b08 <HAL_COMP_Init+0x240>
 8002afe:	687b      	ldr	r3, [r7, #4]
 8002b00:	681b      	ldr	r3, [r3, #0]
 8002b02:	4a32      	ldr	r2, [pc, #200]	; (8002bcc <HAL_COMP_Init+0x304>)
 8002b04:	4293      	cmp	r3, r2
 8002b06:	d103      	bne.n	8002b10 <HAL_COMP_Init+0x248>
        {
          LL_EXTI_DisableEvent_32_63(exti_line);
 8002b08:	6938      	ldr	r0, [r7, #16]
 8002b0a:	f7ff fe11 	bl	8002730 <LL_EXTI_DisableEvent_32_63>
 8002b0e:	e002      	b.n	8002b16 <HAL_COMP_Init+0x24e>
        }
        else
        {
          LL_EXTI_DisableEvent_0_31(exti_line);
 8002b10:	6938      	ldr	r0, [r7, #16]
 8002b12:	f7ff fdf9 	bl	8002708 <LL_EXTI_DisableEvent_0_31>
        LL_EXTI_DisableEvent_0_31(exti_line);
#endif
      }

      /* Configure EXTI interrupt mode */
      if((hcomp->Init.TriggerMode & COMP_EXTI_IT) != 0UL)
 8002b16:	687b      	ldr	r3, [r7, #4]
 8002b18:	699b      	ldr	r3, [r3, #24]
 8002b1a:	f003 0301 	and.w	r3, r3, #1
 8002b1e:	2b00      	cmp	r3, #0
 8002b20:	d011      	beq.n	8002b46 <HAL_COMP_Init+0x27e>
      {
#if defined(STM32G474xx) || defined(STM32G484xx) || defined(STM32G473xx) || defined(STM32G483xx)
        if((hcomp->Instance == COMP6) || (hcomp->Instance == COMP7))
 8002b22:	687b      	ldr	r3, [r7, #4]
 8002b24:	681b      	ldr	r3, [r3, #0]
 8002b26:	4a28      	ldr	r2, [pc, #160]	; (8002bc8 <HAL_COMP_Init+0x300>)
 8002b28:	4293      	cmp	r3, r2
 8002b2a:	d004      	beq.n	8002b36 <HAL_COMP_Init+0x26e>
 8002b2c:	687b      	ldr	r3, [r7, #4]
 8002b2e:	681b      	ldr	r3, [r3, #0]
 8002b30:	4a26      	ldr	r2, [pc, #152]	; (8002bcc <HAL_COMP_Init+0x304>)
 8002b32:	4293      	cmp	r3, r2
 8002b34:	d103      	bne.n	8002b3e <HAL_COMP_Init+0x276>
        {
          LL_EXTI_EnableIT_32_63(exti_line);
 8002b36:	6938      	ldr	r0, [r7, #16]
 8002b38:	f7ff fd88 	bl	800264c <LL_EXTI_EnableIT_32_63>
 8002b3c:	e04b      	b.n	8002bd6 <HAL_COMP_Init+0x30e>
        }
        else
        {
          LL_EXTI_EnableIT_0_31(exti_line);
 8002b3e:	6938      	ldr	r0, [r7, #16]
 8002b40:	f7ff fd72 	bl	8002628 <LL_EXTI_EnableIT_0_31>
 8002b44:	e047      	b.n	8002bd6 <HAL_COMP_Init+0x30e>
#endif
      }
      else
      {
#if defined(STM32G474xx) || defined(STM32G484xx) || defined(STM32G473xx) || defined(STM32G483xx)
        if((hcomp->Instance == COMP6) || (hcomp->Instance == COMP7))
 8002b46:	687b      	ldr	r3, [r7, #4]
 8002b48:	681b      	ldr	r3, [r3, #0]
 8002b4a:	4a1f      	ldr	r2, [pc, #124]	; (8002bc8 <HAL_COMP_Init+0x300>)
 8002b4c:	4293      	cmp	r3, r2
 8002b4e:	d004      	beq.n	8002b5a <HAL_COMP_Init+0x292>
 8002b50:	687b      	ldr	r3, [r7, #4]
 8002b52:	681b      	ldr	r3, [r3, #0]
 8002b54:	4a1d      	ldr	r2, [pc, #116]	; (8002bcc <HAL_COMP_Init+0x304>)
 8002b56:	4293      	cmp	r3, r2
 8002b58:	d103      	bne.n	8002b62 <HAL_COMP_Init+0x29a>
        {
          LL_EXTI_DisableIT_32_63(exti_line);
 8002b5a:	6938      	ldr	r0, [r7, #16]
 8002b5c:	f7ff fd9c 	bl	8002698 <LL_EXTI_DisableIT_32_63>
 8002b60:	e039      	b.n	8002bd6 <HAL_COMP_Init+0x30e>
        }
        else
        {
          LL_EXTI_DisableIT_0_31(exti_line);
 8002b62:	6938      	ldr	r0, [r7, #16]
 8002b64:	f7ff fd84 	bl	8002670 <LL_EXTI_DisableIT_0_31>
 8002b68:	e035      	b.n	8002bd6 <HAL_COMP_Init+0x30e>
    }
    else
    {
      /* Disable EXTI event mode */
#if defined(STM32G474xx) || defined(STM32G484xx) || defined(STM32G473xx) || defined(STM32G483xx)
      if((hcomp->Instance == COMP6) || (hcomp->Instance == COMP7))
 8002b6a:	687b      	ldr	r3, [r7, #4]
 8002b6c:	681b      	ldr	r3, [r3, #0]
 8002b6e:	4a16      	ldr	r2, [pc, #88]	; (8002bc8 <HAL_COMP_Init+0x300>)
 8002b70:	4293      	cmp	r3, r2
 8002b72:	d004      	beq.n	8002b7e <HAL_COMP_Init+0x2b6>
 8002b74:	687b      	ldr	r3, [r7, #4]
 8002b76:	681b      	ldr	r3, [r3, #0]
 8002b78:	4a14      	ldr	r2, [pc, #80]	; (8002bcc <HAL_COMP_Init+0x304>)
 8002b7a:	4293      	cmp	r3, r2
 8002b7c:	d103      	bne.n	8002b86 <HAL_COMP_Init+0x2be>
      {
        LL_EXTI_DisableEvent_32_63(exti_line);
 8002b7e:	6938      	ldr	r0, [r7, #16]
 8002b80:	f7ff fdd6 	bl	8002730 <LL_EXTI_DisableEvent_32_63>
 8002b84:	e002      	b.n	8002b8c <HAL_COMP_Init+0x2c4>
      }
      else
      {
        LL_EXTI_DisableEvent_0_31(exti_line);
 8002b86:	6938      	ldr	r0, [r7, #16]
 8002b88:	f7ff fdbe 	bl	8002708 <LL_EXTI_DisableEvent_0_31>
      LL_EXTI_DisableEvent_0_31(exti_line);
#endif

      /* Disable EXTI interrupt mode */
#if defined(STM32G474xx) || defined(STM32G484xx) || defined(STM32G473xx) || defined(STM32G483xx)
      if((hcomp->Instance == COMP6) || (hcomp->Instance == COMP7))
 8002b8c:	687b      	ldr	r3, [r7, #4]
 8002b8e:	681b      	ldr	r3, [r3, #0]
 8002b90:	4a0d      	ldr	r2, [pc, #52]	; (8002bc8 <HAL_COMP_Init+0x300>)
 8002b92:	4293      	cmp	r3, r2
 8002b94:	d004      	beq.n	8002ba0 <HAL_COMP_Init+0x2d8>
 8002b96:	687b      	ldr	r3, [r7, #4]
 8002b98:	681b      	ldr	r3, [r3, #0]
 8002b9a:	4a0c      	ldr	r2, [pc, #48]	; (8002bcc <HAL_COMP_Init+0x304>)
 8002b9c:	4293      	cmp	r3, r2
 8002b9e:	d117      	bne.n	8002bd0 <HAL_COMP_Init+0x308>
      {
        LL_EXTI_DisableIT_32_63(exti_line);
 8002ba0:	6938      	ldr	r0, [r7, #16]
 8002ba2:	f7ff fd79 	bl	8002698 <LL_EXTI_DisableIT_32_63>
 8002ba6:	e016      	b.n	8002bd6 <HAL_COMP_Init+0x30e>
 8002ba8:	ff007e0f 	.word	0xff007e0f
 8002bac:	20000004 	.word	0x20000004
 8002bb0:	053e2d63 	.word	0x053e2d63
 8002bb4:	40010200 	.word	0x40010200
 8002bb8:	40010204 	.word	0x40010204
 8002bbc:	40010208 	.word	0x40010208
 8002bc0:	4001020c 	.word	0x4001020c
 8002bc4:	40010210 	.word	0x40010210
 8002bc8:	40010214 	.word	0x40010214
 8002bcc:	40010218 	.word	0x40010218
      }
      else
      {
        LL_EXTI_DisableIT_0_31(exti_line);
 8002bd0:	6938      	ldr	r0, [r7, #16]
 8002bd2:	f7ff fd4d 	bl	8002670 <LL_EXTI_DisableIT_0_31>
    }

    /* Set HAL COMP handle state */
    /* Note: Transition from state reset to state ready,                      */
    /*       otherwise (coming from state ready or busy) no state update.     */
    if (hcomp->State == HAL_COMP_STATE_RESET)
 8002bd6:	687b      	ldr	r3, [r7, #4]
 8002bd8:	7f5b      	ldrb	r3, [r3, #29]
 8002bda:	b2db      	uxtb	r3, r3
 8002bdc:	2b00      	cmp	r3, #0
 8002bde:	d102      	bne.n	8002be6 <HAL_COMP_Init+0x31e>
    {
      hcomp->State = HAL_COMP_STATE_READY;
 8002be0:	687b      	ldr	r3, [r7, #4]
 8002be2:	2201      	movs	r2, #1
 8002be4:	775a      	strb	r2, [r3, #29]
    }
  }

  return status;
 8002be6:	7ffb      	ldrb	r3, [r7, #31]
}
 8002be8:	4618      	mov	r0, r3
 8002bea:	3720      	adds	r7, #32
 8002bec:	46bd      	mov	sp, r7
 8002bee:	bd80      	pop	{r7, pc}

08002bf0 <__NVIC_SetPriorityGrouping>:
{
 8002bf0:	b480      	push	{r7}
 8002bf2:	b085      	sub	sp, #20
 8002bf4:	af00      	add	r7, sp, #0
 8002bf6:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002bf8:	687b      	ldr	r3, [r7, #4]
 8002bfa:	f003 0307 	and.w	r3, r3, #7
 8002bfe:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002c00:	4b0c      	ldr	r3, [pc, #48]	; (8002c34 <__NVIC_SetPriorityGrouping+0x44>)
 8002c02:	68db      	ldr	r3, [r3, #12]
 8002c04:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002c06:	68ba      	ldr	r2, [r7, #8]
 8002c08:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002c0c:	4013      	ands	r3, r2
 8002c0e:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002c10:	68fb      	ldr	r3, [r7, #12]
 8002c12:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002c14:	68bb      	ldr	r3, [r7, #8]
 8002c16:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002c18:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002c1c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002c20:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002c22:	4a04      	ldr	r2, [pc, #16]	; (8002c34 <__NVIC_SetPriorityGrouping+0x44>)
 8002c24:	68bb      	ldr	r3, [r7, #8]
 8002c26:	60d3      	str	r3, [r2, #12]
}
 8002c28:	bf00      	nop
 8002c2a:	3714      	adds	r7, #20
 8002c2c:	46bd      	mov	sp, r7
 8002c2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c32:	4770      	bx	lr
 8002c34:	e000ed00 	.word	0xe000ed00

08002c38 <__NVIC_GetPriorityGrouping>:
{
 8002c38:	b480      	push	{r7}
 8002c3a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002c3c:	4b04      	ldr	r3, [pc, #16]	; (8002c50 <__NVIC_GetPriorityGrouping+0x18>)
 8002c3e:	68db      	ldr	r3, [r3, #12]
 8002c40:	0a1b      	lsrs	r3, r3, #8
 8002c42:	f003 0307 	and.w	r3, r3, #7
}
 8002c46:	4618      	mov	r0, r3
 8002c48:	46bd      	mov	sp, r7
 8002c4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c4e:	4770      	bx	lr
 8002c50:	e000ed00 	.word	0xe000ed00

08002c54 <__NVIC_EnableIRQ>:
{
 8002c54:	b480      	push	{r7}
 8002c56:	b083      	sub	sp, #12
 8002c58:	af00      	add	r7, sp, #0
 8002c5a:	4603      	mov	r3, r0
 8002c5c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002c5e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002c62:	2b00      	cmp	r3, #0
 8002c64:	db0b      	blt.n	8002c7e <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002c66:	79fb      	ldrb	r3, [r7, #7]
 8002c68:	f003 021f 	and.w	r2, r3, #31
 8002c6c:	4907      	ldr	r1, [pc, #28]	; (8002c8c <__NVIC_EnableIRQ+0x38>)
 8002c6e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002c72:	095b      	lsrs	r3, r3, #5
 8002c74:	2001      	movs	r0, #1
 8002c76:	fa00 f202 	lsl.w	r2, r0, r2
 8002c7a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8002c7e:	bf00      	nop
 8002c80:	370c      	adds	r7, #12
 8002c82:	46bd      	mov	sp, r7
 8002c84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c88:	4770      	bx	lr
 8002c8a:	bf00      	nop
 8002c8c:	e000e100 	.word	0xe000e100

08002c90 <__NVIC_SetPriority>:
{
 8002c90:	b480      	push	{r7}
 8002c92:	b083      	sub	sp, #12
 8002c94:	af00      	add	r7, sp, #0
 8002c96:	4603      	mov	r3, r0
 8002c98:	6039      	str	r1, [r7, #0]
 8002c9a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002c9c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002ca0:	2b00      	cmp	r3, #0
 8002ca2:	db0a      	blt.n	8002cba <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002ca4:	683b      	ldr	r3, [r7, #0]
 8002ca6:	b2da      	uxtb	r2, r3
 8002ca8:	490c      	ldr	r1, [pc, #48]	; (8002cdc <__NVIC_SetPriority+0x4c>)
 8002caa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002cae:	0112      	lsls	r2, r2, #4
 8002cb0:	b2d2      	uxtb	r2, r2
 8002cb2:	440b      	add	r3, r1
 8002cb4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8002cb8:	e00a      	b.n	8002cd0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002cba:	683b      	ldr	r3, [r7, #0]
 8002cbc:	b2da      	uxtb	r2, r3
 8002cbe:	4908      	ldr	r1, [pc, #32]	; (8002ce0 <__NVIC_SetPriority+0x50>)
 8002cc0:	79fb      	ldrb	r3, [r7, #7]
 8002cc2:	f003 030f 	and.w	r3, r3, #15
 8002cc6:	3b04      	subs	r3, #4
 8002cc8:	0112      	lsls	r2, r2, #4
 8002cca:	b2d2      	uxtb	r2, r2
 8002ccc:	440b      	add	r3, r1
 8002cce:	761a      	strb	r2, [r3, #24]
}
 8002cd0:	bf00      	nop
 8002cd2:	370c      	adds	r7, #12
 8002cd4:	46bd      	mov	sp, r7
 8002cd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cda:	4770      	bx	lr
 8002cdc:	e000e100 	.word	0xe000e100
 8002ce0:	e000ed00 	.word	0xe000ed00

08002ce4 <NVIC_EncodePriority>:
{
 8002ce4:	b480      	push	{r7}
 8002ce6:	b089      	sub	sp, #36	; 0x24
 8002ce8:	af00      	add	r7, sp, #0
 8002cea:	60f8      	str	r0, [r7, #12]
 8002cec:	60b9      	str	r1, [r7, #8]
 8002cee:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002cf0:	68fb      	ldr	r3, [r7, #12]
 8002cf2:	f003 0307 	and.w	r3, r3, #7
 8002cf6:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002cf8:	69fb      	ldr	r3, [r7, #28]
 8002cfa:	f1c3 0307 	rsb	r3, r3, #7
 8002cfe:	2b04      	cmp	r3, #4
 8002d00:	bf28      	it	cs
 8002d02:	2304      	movcs	r3, #4
 8002d04:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002d06:	69fb      	ldr	r3, [r7, #28]
 8002d08:	3304      	adds	r3, #4
 8002d0a:	2b06      	cmp	r3, #6
 8002d0c:	d902      	bls.n	8002d14 <NVIC_EncodePriority+0x30>
 8002d0e:	69fb      	ldr	r3, [r7, #28]
 8002d10:	3b03      	subs	r3, #3
 8002d12:	e000      	b.n	8002d16 <NVIC_EncodePriority+0x32>
 8002d14:	2300      	movs	r3, #0
 8002d16:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002d18:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8002d1c:	69bb      	ldr	r3, [r7, #24]
 8002d1e:	fa02 f303 	lsl.w	r3, r2, r3
 8002d22:	43da      	mvns	r2, r3
 8002d24:	68bb      	ldr	r3, [r7, #8]
 8002d26:	401a      	ands	r2, r3
 8002d28:	697b      	ldr	r3, [r7, #20]
 8002d2a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002d2c:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8002d30:	697b      	ldr	r3, [r7, #20]
 8002d32:	fa01 f303 	lsl.w	r3, r1, r3
 8002d36:	43d9      	mvns	r1, r3
 8002d38:	687b      	ldr	r3, [r7, #4]
 8002d3a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002d3c:	4313      	orrs	r3, r2
}
 8002d3e:	4618      	mov	r0, r3
 8002d40:	3724      	adds	r7, #36	; 0x24
 8002d42:	46bd      	mov	sp, r7
 8002d44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d48:	4770      	bx	lr
	...

08002d4c <SysTick_Config>:
{
 8002d4c:	b580      	push	{r7, lr}
 8002d4e:	b082      	sub	sp, #8
 8002d50:	af00      	add	r7, sp, #0
 8002d52:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002d54:	687b      	ldr	r3, [r7, #4]
 8002d56:	3b01      	subs	r3, #1
 8002d58:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002d5c:	d301      	bcc.n	8002d62 <SysTick_Config+0x16>
    return (1UL);                                                   /* Reload value impossible */
 8002d5e:	2301      	movs	r3, #1
 8002d60:	e00f      	b.n	8002d82 <SysTick_Config+0x36>
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002d62:	4a0a      	ldr	r2, [pc, #40]	; (8002d8c <SysTick_Config+0x40>)
 8002d64:	687b      	ldr	r3, [r7, #4]
 8002d66:	3b01      	subs	r3, #1
 8002d68:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002d6a:	210f      	movs	r1, #15
 8002d6c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8002d70:	f7ff ff8e 	bl	8002c90 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002d74:	4b05      	ldr	r3, [pc, #20]	; (8002d8c <SysTick_Config+0x40>)
 8002d76:	2200      	movs	r2, #0
 8002d78:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002d7a:	4b04      	ldr	r3, [pc, #16]	; (8002d8c <SysTick_Config+0x40>)
 8002d7c:	2207      	movs	r2, #7
 8002d7e:	601a      	str	r2, [r3, #0]
  return (0UL);                                                     /* Function successful */
 8002d80:	2300      	movs	r3, #0
}
 8002d82:	4618      	mov	r0, r3
 8002d84:	3708      	adds	r7, #8
 8002d86:	46bd      	mov	sp, r7
 8002d88:	bd80      	pop	{r7, pc}
 8002d8a:	bf00      	nop
 8002d8c:	e000e010 	.word	0xe000e010

08002d90 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002d90:	b580      	push	{r7, lr}
 8002d92:	b082      	sub	sp, #8
 8002d94:	af00      	add	r7, sp, #0
 8002d96:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002d98:	6878      	ldr	r0, [r7, #4]
 8002d9a:	f7ff ff29 	bl	8002bf0 <__NVIC_SetPriorityGrouping>
}
 8002d9e:	bf00      	nop
 8002da0:	3708      	adds	r7, #8
 8002da2:	46bd      	mov	sp, r7
 8002da4:	bd80      	pop	{r7, pc}

08002da6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002da6:	b580      	push	{r7, lr}
 8002da8:	b086      	sub	sp, #24
 8002daa:	af00      	add	r7, sp, #0
 8002dac:	4603      	mov	r3, r0
 8002dae:	60b9      	str	r1, [r7, #8]
 8002db0:	607a      	str	r2, [r7, #4]
 8002db2:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8002db4:	f7ff ff40 	bl	8002c38 <__NVIC_GetPriorityGrouping>
 8002db8:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002dba:	687a      	ldr	r2, [r7, #4]
 8002dbc:	68b9      	ldr	r1, [r7, #8]
 8002dbe:	6978      	ldr	r0, [r7, #20]
 8002dc0:	f7ff ff90 	bl	8002ce4 <NVIC_EncodePriority>
 8002dc4:	4602      	mov	r2, r0
 8002dc6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002dca:	4611      	mov	r1, r2
 8002dcc:	4618      	mov	r0, r3
 8002dce:	f7ff ff5f 	bl	8002c90 <__NVIC_SetPriority>
}
 8002dd2:	bf00      	nop
 8002dd4:	3718      	adds	r7, #24
 8002dd6:	46bd      	mov	sp, r7
 8002dd8:	bd80      	pop	{r7, pc}

08002dda <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002dda:	b580      	push	{r7, lr}
 8002ddc:	b082      	sub	sp, #8
 8002dde:	af00      	add	r7, sp, #0
 8002de0:	4603      	mov	r3, r0
 8002de2:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002de4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002de8:	4618      	mov	r0, r3
 8002dea:	f7ff ff33 	bl	8002c54 <__NVIC_EnableIRQ>
}
 8002dee:	bf00      	nop
 8002df0:	3708      	adds	r7, #8
 8002df2:	46bd      	mov	sp, r7
 8002df4:	bd80      	pop	{r7, pc}

08002df6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002df6:	b580      	push	{r7, lr}
 8002df8:	b082      	sub	sp, #8
 8002dfa:	af00      	add	r7, sp, #0
 8002dfc:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002dfe:	6878      	ldr	r0, [r7, #4]
 8002e00:	f7ff ffa4 	bl	8002d4c <SysTick_Config>
 8002e04:	4603      	mov	r3, r0
}
 8002e06:	4618      	mov	r0, r3
 8002e08:	3708      	adds	r7, #8
 8002e0a:	46bd      	mov	sp, r7
 8002e0c:	bd80      	pop	{r7, pc}

08002e0e <HAL_DAC_Init>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Init(DAC_HandleTypeDef *hdac)
{
 8002e0e:	b580      	push	{r7, lr}
 8002e10:	b082      	sub	sp, #8
 8002e12:	af00      	add	r7, sp, #0
 8002e14:	6078      	str	r0, [r7, #4]
  /* Check DAC handle */
  if (hdac == NULL)
 8002e16:	687b      	ldr	r3, [r7, #4]
 8002e18:	2b00      	cmp	r3, #0
 8002e1a:	d101      	bne.n	8002e20 <HAL_DAC_Init+0x12>
  {
    return HAL_ERROR;
 8002e1c:	2301      	movs	r3, #1
 8002e1e:	e014      	b.n	8002e4a <HAL_DAC_Init+0x3c>
  }
  /* Check the parameters */
  assert_param(IS_DAC_ALL_INSTANCE(hdac->Instance));

  if (hdac->State == HAL_DAC_STATE_RESET)
 8002e20:	687b      	ldr	r3, [r7, #4]
 8002e22:	791b      	ldrb	r3, [r3, #4]
 8002e24:	b2db      	uxtb	r3, r3
 8002e26:	2b00      	cmp	r3, #0
 8002e28:	d105      	bne.n	8002e36 <HAL_DAC_Init+0x28>
      hdac->MspInitCallback             = HAL_DAC_MspInit;
    }
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

    /* Allocate lock resource and initialize it */
    hdac->Lock = HAL_UNLOCKED;
 8002e2a:	687b      	ldr	r3, [r7, #4]
 8002e2c:	2200      	movs	r2, #0
 8002e2e:	715a      	strb	r2, [r3, #5]
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
    /* Init the low level hardware */
    hdac->MspInitCallback(hdac);
#else
    /* Init the low level hardware */
    HAL_DAC_MspInit(hdac);
 8002e30:	6878      	ldr	r0, [r7, #4]
 8002e32:	f7fd fbc7 	bl	80005c4 <HAL_DAC_MspInit>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
  }

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_BUSY;
 8002e36:	687b      	ldr	r3, [r7, #4]
 8002e38:	2202      	movs	r2, #2
 8002e3a:	711a      	strb	r2, [r3, #4]

  /* Set DAC error code to none */
  hdac->ErrorCode = HAL_DAC_ERROR_NONE;
 8002e3c:	687b      	ldr	r3, [r7, #4]
 8002e3e:	2200      	movs	r2, #0
 8002e40:	611a      	str	r2, [r3, #16]

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_READY;
 8002e42:	687b      	ldr	r3, [r7, #4]
 8002e44:	2201      	movs	r2, #1
 8002e46:	711a      	strb	r2, [r3, #4]

  /* Return function status */
  return HAL_OK;
 8002e48:	2300      	movs	r3, #0
}
 8002e4a:	4618      	mov	r0, r3
 8002e4c:	3708      	adds	r7, #8
 8002e4e:	46bd      	mov	sp, r7
 8002e50:	bd80      	pop	{r7, pc}

08002e52 <HAL_DAC_Start>:
  *         (1) On this STM32 serie, parameter not available on all instances.
  *             Refer to device datasheet for channels availability.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Start(DAC_HandleTypeDef *hdac, uint32_t Channel)
{
 8002e52:	b580      	push	{r7, lr}
 8002e54:	b082      	sub	sp, #8
 8002e56:	af00      	add	r7, sp, #0
 8002e58:	6078      	str	r0, [r7, #4]
 8002e5a:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(hdac->Instance, Channel));

  /* Process locked */
  __HAL_LOCK(hdac);
 8002e5c:	687b      	ldr	r3, [r7, #4]
 8002e5e:	795b      	ldrb	r3, [r3, #5]
 8002e60:	2b01      	cmp	r3, #1
 8002e62:	d101      	bne.n	8002e68 <HAL_DAC_Start+0x16>
 8002e64:	2302      	movs	r3, #2
 8002e66:	e043      	b.n	8002ef0 <HAL_DAC_Start+0x9e>
 8002e68:	687b      	ldr	r3, [r7, #4]
 8002e6a:	2201      	movs	r2, #1
 8002e6c:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 8002e6e:	687b      	ldr	r3, [r7, #4]
 8002e70:	2202      	movs	r2, #2
 8002e72:	711a      	strb	r2, [r3, #4]

  /* Enable the Peripheral */
  __HAL_DAC_ENABLE(hdac, Channel);
 8002e74:	687b      	ldr	r3, [r7, #4]
 8002e76:	681b      	ldr	r3, [r3, #0]
 8002e78:	6819      	ldr	r1, [r3, #0]
 8002e7a:	683b      	ldr	r3, [r7, #0]
 8002e7c:	f003 0310 	and.w	r3, r3, #16
 8002e80:	2201      	movs	r2, #1
 8002e82:	409a      	lsls	r2, r3
 8002e84:	687b      	ldr	r3, [r7, #4]
 8002e86:	681b      	ldr	r3, [r3, #0]
 8002e88:	430a      	orrs	r2, r1
 8002e8a:	601a      	str	r2, [r3, #0]
  /* Ensure minimum wait before using peripheral after enabling it */
  HAL_Delay(1);
 8002e8c:	2001      	movs	r0, #1
 8002e8e:	f7fe fb4d 	bl	800152c <HAL_Delay>

  if (Channel == DAC_CHANNEL_1)
 8002e92:	683b      	ldr	r3, [r7, #0]
 8002e94:	2b00      	cmp	r3, #0
 8002e96:	d10f      	bne.n	8002eb8 <HAL_DAC_Start+0x66>
  {
    /* Check if software trigger enabled */
    if ((hdac->Instance->CR & (DAC_CR_TEN1 | DAC_CR_TSEL1)) == DAC_TRIGGER_SOFTWARE)
 8002e98:	687b      	ldr	r3, [r7, #4]
 8002e9a:	681b      	ldr	r3, [r3, #0]
 8002e9c:	681b      	ldr	r3, [r3, #0]
 8002e9e:	f003 033e 	and.w	r3, r3, #62	; 0x3e
 8002ea2:	2b02      	cmp	r3, #2
 8002ea4:	d11d      	bne.n	8002ee2 <HAL_DAC_Start+0x90>
    {
      /* Enable the selected DAC software conversion */
      SET_BIT(hdac->Instance->SWTRIGR, DAC_SWTRIGR_SWTRIG1);
 8002ea6:	687b      	ldr	r3, [r7, #4]
 8002ea8:	681b      	ldr	r3, [r3, #0]
 8002eaa:	685a      	ldr	r2, [r3, #4]
 8002eac:	687b      	ldr	r3, [r7, #4]
 8002eae:	681b      	ldr	r3, [r3, #0]
 8002eb0:	f042 0201 	orr.w	r2, r2, #1
 8002eb4:	605a      	str	r2, [r3, #4]
 8002eb6:	e014      	b.n	8002ee2 <HAL_DAC_Start+0x90>
    }
  }
  else
  {
    /* Check if software trigger enabled */
    if ((hdac->Instance->CR & (DAC_CR_TEN2 | DAC_CR_TSEL2)) == (DAC_TRIGGER_SOFTWARE << (Channel & 0x10UL)))
 8002eb8:	687b      	ldr	r3, [r7, #4]
 8002eba:	681b      	ldr	r3, [r3, #0]
 8002ebc:	681b      	ldr	r3, [r3, #0]
 8002ebe:	f403 1278 	and.w	r2, r3, #4063232	; 0x3e0000
 8002ec2:	683b      	ldr	r3, [r7, #0]
 8002ec4:	f003 0310 	and.w	r3, r3, #16
 8002ec8:	2102      	movs	r1, #2
 8002eca:	fa01 f303 	lsl.w	r3, r1, r3
 8002ece:	429a      	cmp	r2, r3
 8002ed0:	d107      	bne.n	8002ee2 <HAL_DAC_Start+0x90>
    {
      /* Enable the selected DAC software conversion*/
      SET_BIT(hdac->Instance->SWTRIGR, DAC_SWTRIGR_SWTRIG2);
 8002ed2:	687b      	ldr	r3, [r7, #4]
 8002ed4:	681b      	ldr	r3, [r3, #0]
 8002ed6:	685a      	ldr	r2, [r3, #4]
 8002ed8:	687b      	ldr	r3, [r7, #4]
 8002eda:	681b      	ldr	r3, [r3, #0]
 8002edc:	f042 0202 	orr.w	r2, r2, #2
 8002ee0:	605a      	str	r2, [r3, #4]
    }
  }

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 8002ee2:	687b      	ldr	r3, [r7, #4]
 8002ee4:	2201      	movs	r2, #1
 8002ee6:	711a      	strb	r2, [r3, #4]

  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 8002ee8:	687b      	ldr	r3, [r7, #4]
 8002eea:	2200      	movs	r2, #0
 8002eec:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 8002eee:	2300      	movs	r3, #0
}
 8002ef0:	4618      	mov	r0, r3
 8002ef2:	3708      	adds	r7, #8
 8002ef4:	46bd      	mov	sp, r7
 8002ef6:	bd80      	pop	{r7, pc}

08002ef8 <HAL_DAC_SetValue>:
  *            @arg DAC_ALIGN_12B_R: 12bit right data alignment selected
  * @param  Data Data to be loaded in the selected data holding register.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_SetValue(DAC_HandleTypeDef *hdac, uint32_t Channel, uint32_t Alignment, uint32_t Data)
{
 8002ef8:	b480      	push	{r7}
 8002efa:	b087      	sub	sp, #28
 8002efc:	af00      	add	r7, sp, #0
 8002efe:	60f8      	str	r0, [r7, #12]
 8002f00:	60b9      	str	r1, [r7, #8]
 8002f02:	607a      	str	r2, [r7, #4]
 8002f04:	603b      	str	r3, [r7, #0]
  __IO uint32_t tmp = 0;
 8002f06:	2300      	movs	r3, #0
 8002f08:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(hdac->Instance, Channel));
  assert_param(IS_DAC_ALIGN(Alignment));
  /* In case DMA Double data mode is activated, DATA range is almost full uin32_t one: no check */
  if ((hdac->Instance->MCR & (DAC_MCR_DMADOUBLE1 << (Channel & 0x10UL))) == 0UL)
 8002f0a:	68fb      	ldr	r3, [r7, #12]
 8002f0c:	681b      	ldr	r3, [r3, #0]
 8002f0e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
  {
    assert_param(IS_DAC_DATA(Data));
  }

  tmp = (uint32_t)hdac->Instance;
 8002f10:	68fb      	ldr	r3, [r7, #12]
 8002f12:	681b      	ldr	r3, [r3, #0]
 8002f14:	617b      	str	r3, [r7, #20]
  if (Channel == DAC_CHANNEL_1)
 8002f16:	68bb      	ldr	r3, [r7, #8]
 8002f18:	2b00      	cmp	r3, #0
 8002f1a:	d105      	bne.n	8002f28 <HAL_DAC_SetValue+0x30>
  {
    tmp += DAC_DHR12R1_ALIGNMENT(Alignment);
 8002f1c:	697a      	ldr	r2, [r7, #20]
 8002f1e:	687b      	ldr	r3, [r7, #4]
 8002f20:	4413      	add	r3, r2
 8002f22:	3308      	adds	r3, #8
 8002f24:	617b      	str	r3, [r7, #20]
 8002f26:	e004      	b.n	8002f32 <HAL_DAC_SetValue+0x3a>
  }
  else
  {
    tmp += DAC_DHR12R2_ALIGNMENT(Alignment);
 8002f28:	697a      	ldr	r2, [r7, #20]
 8002f2a:	687b      	ldr	r3, [r7, #4]
 8002f2c:	4413      	add	r3, r2
 8002f2e:	3314      	adds	r3, #20
 8002f30:	617b      	str	r3, [r7, #20]
  }

  /* Set the DAC channel selected data holding register */
  *(__IO uint32_t *) tmp = Data;
 8002f32:	697b      	ldr	r3, [r7, #20]
 8002f34:	461a      	mov	r2, r3
 8002f36:	683b      	ldr	r3, [r7, #0]
 8002f38:	6013      	str	r3, [r2, #0]

  /* Return function status */
  return HAL_OK;
 8002f3a:	2300      	movs	r3, #0
}
 8002f3c:	4618      	mov	r0, r3
 8002f3e:	371c      	adds	r7, #28
 8002f40:	46bd      	mov	sp, r7
 8002f42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f46:	4770      	bx	lr

08002f48 <HAL_DAC_ConfigChannel>:
  *         (1) On this STM32 serie, parameter not available on all instances.
  *             Refer to device datasheet for channels availability.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_ConfigChannel(DAC_HandleTypeDef *hdac, DAC_ChannelConfTypeDef *sConfig, uint32_t Channel)
{
 8002f48:	b580      	push	{r7, lr}
 8002f4a:	b08a      	sub	sp, #40	; 0x28
 8002f4c:	af00      	add	r7, sp, #0
 8002f4e:	60f8      	str	r0, [r7, #12]
 8002f50:	60b9      	str	r1, [r7, #8]
 8002f52:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg1;
  uint32_t tmpreg2;
  uint32_t tickstart = 0U;
 8002f54:	2300      	movs	r3, #0
 8002f56:	61fb      	str	r3, [r7, #28]
  assert_param(IS_DAC_CHANNEL(hdac->Instance, Channel));
  assert_param(IS_FUNCTIONAL_STATE(sConfig->DAC_DMADoubleDataMode));
  assert_param(IS_FUNCTIONAL_STATE(sConfig->DAC_SignedFormat));

  /* Process locked */
  __HAL_LOCK(hdac);
 8002f58:	68fb      	ldr	r3, [r7, #12]
 8002f5a:	795b      	ldrb	r3, [r3, #5]
 8002f5c:	2b01      	cmp	r3, #1
 8002f5e:	d101      	bne.n	8002f64 <HAL_DAC_ConfigChannel+0x1c>
 8002f60:	2302      	movs	r3, #2
 8002f62:	e194      	b.n	800328e <HAL_DAC_ConfigChannel+0x346>
 8002f64:	68fb      	ldr	r3, [r7, #12]
 8002f66:	2201      	movs	r2, #1
 8002f68:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 8002f6a:	68fb      	ldr	r3, [r7, #12]
 8002f6c:	2202      	movs	r2, #2
 8002f6e:	711a      	strb	r2, [r3, #4]

  if (sConfig->DAC_SampleAndHold == DAC_SAMPLEANDHOLD_ENABLE)
 8002f70:	68bb      	ldr	r3, [r7, #8]
 8002f72:	689b      	ldr	r3, [r3, #8]
 8002f74:	2b04      	cmp	r3, #4
 8002f76:	d174      	bne.n	8003062 <HAL_DAC_ConfigChannel+0x11a>
    /* Sample on old configuration */
  {
    /* SampleTime */
    if (Channel == DAC_CHANNEL_1)
 8002f78:	687b      	ldr	r3, [r7, #4]
 8002f7a:	2b00      	cmp	r3, #0
 8002f7c:	d137      	bne.n	8002fee <HAL_DAC_ConfigChannel+0xa6>
    {
      /* Get timeout */
      tickstart = HAL_GetTick();
 8002f7e:	f7fe fac9 	bl	8001514 <HAL_GetTick>
 8002f82:	61f8      	str	r0, [r7, #28]

      /* SHSR1 can be written when BWST1 is cleared */
      while (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 8002f84:	e011      	b.n	8002faa <HAL_DAC_ConfigChannel+0x62>
      {
        /* Check for the Timeout */
        if ((HAL_GetTick() - tickstart) > TIMEOUT_DAC_CALIBCONFIG)
 8002f86:	f7fe fac5 	bl	8001514 <HAL_GetTick>
 8002f8a:	4602      	mov	r2, r0
 8002f8c:	69fb      	ldr	r3, [r7, #28]
 8002f8e:	1ad3      	subs	r3, r2, r3
 8002f90:	2b01      	cmp	r3, #1
 8002f92:	d90a      	bls.n	8002faa <HAL_DAC_ConfigChannel+0x62>
        {
          /* Update error code */
          SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_TIMEOUT);
 8002f94:	68fb      	ldr	r3, [r7, #12]
 8002f96:	691b      	ldr	r3, [r3, #16]
 8002f98:	f043 0208 	orr.w	r2, r3, #8
 8002f9c:	68fb      	ldr	r3, [r7, #12]
 8002f9e:	611a      	str	r2, [r3, #16]

          /* Change the DMA state */
          hdac->State = HAL_DAC_STATE_TIMEOUT;
 8002fa0:	68fb      	ldr	r3, [r7, #12]
 8002fa2:	2203      	movs	r2, #3
 8002fa4:	711a      	strb	r2, [r3, #4]

          return HAL_TIMEOUT;
 8002fa6:	2303      	movs	r3, #3
 8002fa8:	e171      	b.n	800328e <HAL_DAC_ConfigChannel+0x346>
      while (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 8002faa:	68fb      	ldr	r3, [r7, #12]
 8002fac:	681b      	ldr	r3, [r3, #0]
 8002fae:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002fb0:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002fb4:	2b00      	cmp	r3, #0
 8002fb6:	d1e6      	bne.n	8002f86 <HAL_DAC_ConfigChannel+0x3e>
        }
      }
      HAL_Delay(1);
 8002fb8:	2001      	movs	r0, #1
 8002fba:	f7fe fab7 	bl	800152c <HAL_Delay>
      hdac->Instance->SHSR1 = sConfig->DAC_SampleAndHoldConfig.DAC_SampleTime;
 8002fbe:	68fb      	ldr	r3, [r7, #12]
 8002fc0:	681b      	ldr	r3, [r3, #0]
 8002fc2:	68ba      	ldr	r2, [r7, #8]
 8002fc4:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8002fc6:	641a      	str	r2, [r3, #64]	; 0x40
 8002fc8:	e01e      	b.n	8003008 <HAL_DAC_ConfigChannel+0xc0>
      /* SHSR2 can be written when BWST2 is cleared */

      while (((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
      {
        /* Check for the Timeout */
        if ((HAL_GetTick() - tickstart) > TIMEOUT_DAC_CALIBCONFIG)
 8002fca:	f7fe faa3 	bl	8001514 <HAL_GetTick>
 8002fce:	4602      	mov	r2, r0
 8002fd0:	69fb      	ldr	r3, [r7, #28]
 8002fd2:	1ad3      	subs	r3, r2, r3
 8002fd4:	2b01      	cmp	r3, #1
 8002fd6:	d90a      	bls.n	8002fee <HAL_DAC_ConfigChannel+0xa6>
        {
          /* Update error code */
          SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_TIMEOUT);
 8002fd8:	68fb      	ldr	r3, [r7, #12]
 8002fda:	691b      	ldr	r3, [r3, #16]
 8002fdc:	f043 0208 	orr.w	r2, r3, #8
 8002fe0:	68fb      	ldr	r3, [r7, #12]
 8002fe2:	611a      	str	r2, [r3, #16]

          /* Change the DMA state */
          hdac->State = HAL_DAC_STATE_TIMEOUT;
 8002fe4:	68fb      	ldr	r3, [r7, #12]
 8002fe6:	2203      	movs	r2, #3
 8002fe8:	711a      	strb	r2, [r3, #4]

          return HAL_TIMEOUT;
 8002fea:	2303      	movs	r3, #3
 8002fec:	e14f      	b.n	800328e <HAL_DAC_ConfigChannel+0x346>
      while (((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
 8002fee:	68fb      	ldr	r3, [r7, #12]
 8002ff0:	681b      	ldr	r3, [r3, #0]
 8002ff2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002ff4:	2b00      	cmp	r3, #0
 8002ff6:	dbe8      	blt.n	8002fca <HAL_DAC_ConfigChannel+0x82>
        }
      }
      HAL_Delay(1U);
 8002ff8:	2001      	movs	r0, #1
 8002ffa:	f7fe fa97 	bl	800152c <HAL_Delay>
      hdac->Instance->SHSR2 = sConfig->DAC_SampleAndHoldConfig.DAC_SampleTime;
 8002ffe:	68fb      	ldr	r3, [r7, #12]
 8003000:	681b      	ldr	r3, [r3, #0]
 8003002:	68ba      	ldr	r2, [r7, #8]
 8003004:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8003006:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* HoldTime */
    MODIFY_REG(hdac->Instance->SHHR, DAC_SHHR_THOLD1 << (Channel & 0x10UL), (sConfig->DAC_SampleAndHoldConfig.DAC_HoldTime) << (Channel & 0x10UL));
 8003008:	68fb      	ldr	r3, [r7, #12]
 800300a:	681b      	ldr	r3, [r3, #0]
 800300c:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800300e:	687b      	ldr	r3, [r7, #4]
 8003010:	f003 0310 	and.w	r3, r3, #16
 8003014:	f240 31ff 	movw	r1, #1023	; 0x3ff
 8003018:	fa01 f303 	lsl.w	r3, r1, r3
 800301c:	43db      	mvns	r3, r3
 800301e:	ea02 0103 	and.w	r1, r2, r3
 8003022:	68bb      	ldr	r3, [r7, #8]
 8003024:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8003026:	687b      	ldr	r3, [r7, #4]
 8003028:	f003 0310 	and.w	r3, r3, #16
 800302c:	409a      	lsls	r2, r3
 800302e:	68fb      	ldr	r3, [r7, #12]
 8003030:	681b      	ldr	r3, [r3, #0]
 8003032:	430a      	orrs	r2, r1
 8003034:	649a      	str	r2, [r3, #72]	; 0x48
    /* RefreshTime */
    MODIFY_REG(hdac->Instance->SHRR, DAC_SHRR_TREFRESH1 << (Channel & 0x10UL), (sConfig->DAC_SampleAndHoldConfig.DAC_RefreshTime) << (Channel & 0x10UL));
 8003036:	68fb      	ldr	r3, [r7, #12]
 8003038:	681b      	ldr	r3, [r3, #0]
 800303a:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800303c:	687b      	ldr	r3, [r7, #4]
 800303e:	f003 0310 	and.w	r3, r3, #16
 8003042:	21ff      	movs	r1, #255	; 0xff
 8003044:	fa01 f303 	lsl.w	r3, r1, r3
 8003048:	43db      	mvns	r3, r3
 800304a:	ea02 0103 	and.w	r1, r2, r3
 800304e:	68bb      	ldr	r3, [r7, #8]
 8003050:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003052:	687b      	ldr	r3, [r7, #4]
 8003054:	f003 0310 	and.w	r3, r3, #16
 8003058:	409a      	lsls	r2, r3
 800305a:	68fb      	ldr	r3, [r7, #12]
 800305c:	681b      	ldr	r3, [r3, #0]
 800305e:	430a      	orrs	r2, r1
 8003060:	64da      	str	r2, [r3, #76]	; 0x4c
  }

  if (sConfig->DAC_UserTrimming == DAC_TRIMMING_USER)
 8003062:	68bb      	ldr	r3, [r7, #8]
 8003064:	69db      	ldr	r3, [r3, #28]
 8003066:	2b01      	cmp	r3, #1
 8003068:	d11d      	bne.n	80030a6 <HAL_DAC_ConfigChannel+0x15e>
    /* USER TRIMMING */
  {
    /* Get the DAC CCR value */
    tmpreg1 = hdac->Instance->CCR;
 800306a:	68fb      	ldr	r3, [r7, #12]
 800306c:	681b      	ldr	r3, [r3, #0]
 800306e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003070:	627b      	str	r3, [r7, #36]	; 0x24
    /* Clear trimming value */
    tmpreg1 &= ~(((uint32_t)(DAC_CCR_OTRIM1)) << (Channel & 0x10UL));
 8003072:	687b      	ldr	r3, [r7, #4]
 8003074:	f003 0310 	and.w	r3, r3, #16
 8003078:	221f      	movs	r2, #31
 800307a:	fa02 f303 	lsl.w	r3, r2, r3
 800307e:	43db      	mvns	r3, r3
 8003080:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003082:	4013      	ands	r3, r2
 8003084:	627b      	str	r3, [r7, #36]	; 0x24
    /* Configure for the selected trimming offset */
    tmpreg2 = sConfig->DAC_TrimmingValue;
 8003086:	68bb      	ldr	r3, [r7, #8]
 8003088:	6a1b      	ldr	r3, [r3, #32]
 800308a:	61bb      	str	r3, [r7, #24]
    /* Calculate CCR register value depending on DAC_Channel */
    tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 800308c:	687b      	ldr	r3, [r7, #4]
 800308e:	f003 0310 	and.w	r3, r3, #16
 8003092:	69ba      	ldr	r2, [r7, #24]
 8003094:	fa02 f303 	lsl.w	r3, r2, r3
 8003098:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800309a:	4313      	orrs	r3, r2
 800309c:	627b      	str	r3, [r7, #36]	; 0x24
    /* Write to DAC CCR */
    hdac->Instance->CCR = tmpreg1;
 800309e:	68fb      	ldr	r3, [r7, #12]
 80030a0:	681b      	ldr	r3, [r3, #0]
 80030a2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80030a4:	639a      	str	r2, [r3, #56]	; 0x38
  }
  /* else factory trimming is used (factory setting are available at reset)*/
  /* SW Nothing has nothing to do */

  /* Get the DAC MCR value */
  tmpreg1 = hdac->Instance->MCR;
 80030a6:	68fb      	ldr	r3, [r7, #12]
 80030a8:	681b      	ldr	r3, [r3, #0]
 80030aa:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80030ac:	627b      	str	r3, [r7, #36]	; 0x24
  /* Clear DAC_MCR_MODEx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_MCR_MODE1)) << (Channel & 0x10UL));
 80030ae:	687b      	ldr	r3, [r7, #4]
 80030b0:	f003 0310 	and.w	r3, r3, #16
 80030b4:	2207      	movs	r2, #7
 80030b6:	fa02 f303 	lsl.w	r3, r2, r3
 80030ba:	43db      	mvns	r3, r3
 80030bc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80030be:	4013      	ands	r3, r2
 80030c0:	627b      	str	r3, [r7, #36]	; 0x24
  /* Configure for the selected DAC channel: mode, buffer output & on chip peripheral connect */
  if ((sConfig->DAC_ConnectOnChipPeripheral & DAC_CHIPCONNECT_EXTERNAL) == DAC_CHIPCONNECT_EXTERNAL)
 80030c2:	68bb      	ldr	r3, [r7, #8]
 80030c4:	699b      	ldr	r3, [r3, #24]
 80030c6:	f003 0301 	and.w	r3, r3, #1
 80030ca:	2b00      	cmp	r3, #0
 80030cc:	d002      	beq.n	80030d4 <HAL_DAC_ConfigChannel+0x18c>
  {
    connectOnChip = 0x00000000UL;
 80030ce:	2300      	movs	r3, #0
 80030d0:	623b      	str	r3, [r7, #32]
 80030d2:	e011      	b.n	80030f8 <HAL_DAC_ConfigChannel+0x1b0>
  }
  else if ((sConfig->DAC_ConnectOnChipPeripheral & DAC_CHIPCONNECT_INTERNAL) == DAC_CHIPCONNECT_INTERNAL)
 80030d4:	68bb      	ldr	r3, [r7, #8]
 80030d6:	699b      	ldr	r3, [r3, #24]
 80030d8:	f003 0302 	and.w	r3, r3, #2
 80030dc:	2b00      	cmp	r3, #0
 80030de:	d002      	beq.n	80030e6 <HAL_DAC_ConfigChannel+0x19e>
  {
    connectOnChip = DAC_MCR_MODE1_0;
 80030e0:	2301      	movs	r3, #1
 80030e2:	623b      	str	r3, [r7, #32]
 80030e4:	e008      	b.n	80030f8 <HAL_DAC_ConfigChannel+0x1b0>
  }
  else /* (sConfig->DAC_ConnectOnChipPeripheral & DAC_CHIPCONNECT_BOTH) == DAC_CHIPCONNECT_BOTH */
  {
    if (sConfig->DAC_OutputBuffer == DAC_OUTPUTBUFFER_ENABLE)
 80030e6:	68bb      	ldr	r3, [r7, #8]
 80030e8:	695b      	ldr	r3, [r3, #20]
 80030ea:	2b00      	cmp	r3, #0
 80030ec:	d102      	bne.n	80030f4 <HAL_DAC_ConfigChannel+0x1ac>
    {
      connectOnChip = DAC_MCR_MODE1_0;
 80030ee:	2301      	movs	r3, #1
 80030f0:	623b      	str	r3, [r7, #32]
 80030f2:	e001      	b.n	80030f8 <HAL_DAC_ConfigChannel+0x1b0>
    }
    else
    {
      connectOnChip = 0x00000000UL;
 80030f4:	2300      	movs	r3, #0
 80030f6:	623b      	str	r3, [r7, #32]
    }
  }
  tmpreg2 = (sConfig->DAC_SampleAndHold | sConfig->DAC_OutputBuffer | connectOnChip);
 80030f8:	68bb      	ldr	r3, [r7, #8]
 80030fa:	689a      	ldr	r2, [r3, #8]
 80030fc:	68bb      	ldr	r3, [r7, #8]
 80030fe:	695b      	ldr	r3, [r3, #20]
 8003100:	4313      	orrs	r3, r2
 8003102:	6a3a      	ldr	r2, [r7, #32]
 8003104:	4313      	orrs	r3, r2
 8003106:	61bb      	str	r3, [r7, #24]
  /* Clear DAC_MCR_DMADOUBLEx */
  tmpreg1 &= ~(((uint32_t)(DAC_MCR_DMADOUBLE1)) << (Channel & 0x10UL));
 8003108:	687b      	ldr	r3, [r7, #4]
 800310a:	f003 0310 	and.w	r3, r3, #16
 800310e:	f44f 7280 	mov.w	r2, #256	; 0x100
 8003112:	fa02 f303 	lsl.w	r3, r2, r3
 8003116:	43db      	mvns	r3, r3
 8003118:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800311a:	4013      	ands	r3, r2
 800311c:	627b      	str	r3, [r7, #36]	; 0x24
  /* Configure for the selected DAC channel: DMA double data mode */
  tmpreg2 |= (sConfig->DAC_DMADoubleDataMode == ENABLE) ? DAC_MCR_DMADOUBLE1 : 0UL;
 800311e:	68bb      	ldr	r3, [r7, #8]
 8003120:	791b      	ldrb	r3, [r3, #4]
 8003122:	2b01      	cmp	r3, #1
 8003124:	d102      	bne.n	800312c <HAL_DAC_ConfigChannel+0x1e4>
 8003126:	f44f 7380 	mov.w	r3, #256	; 0x100
 800312a:	e000      	b.n	800312e <HAL_DAC_ConfigChannel+0x1e6>
 800312c:	2300      	movs	r3, #0
 800312e:	69ba      	ldr	r2, [r7, #24]
 8003130:	4313      	orrs	r3, r2
 8003132:	61bb      	str	r3, [r7, #24]
  /* Clear DAC_MCR_SINFORMATx */
  tmpreg1 &= ~(((uint32_t)(DAC_MCR_SINFORMAT1)) << (Channel & 0x10UL));
 8003134:	687b      	ldr	r3, [r7, #4]
 8003136:	f003 0310 	and.w	r3, r3, #16
 800313a:	f44f 7200 	mov.w	r2, #512	; 0x200
 800313e:	fa02 f303 	lsl.w	r3, r2, r3
 8003142:	43db      	mvns	r3, r3
 8003144:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003146:	4013      	ands	r3, r2
 8003148:	627b      	str	r3, [r7, #36]	; 0x24
  /* Configure for the selected DAC channel: Signed format */
  tmpreg2 |= (sConfig->DAC_SignedFormat == ENABLE) ? DAC_MCR_SINFORMAT1 : 0UL;
 800314a:	68bb      	ldr	r3, [r7, #8]
 800314c:	795b      	ldrb	r3, [r3, #5]
 800314e:	2b01      	cmp	r3, #1
 8003150:	d102      	bne.n	8003158 <HAL_DAC_ConfigChannel+0x210>
 8003152:	f44f 7300 	mov.w	r3, #512	; 0x200
 8003156:	e000      	b.n	800315a <HAL_DAC_ConfigChannel+0x212>
 8003158:	2300      	movs	r3, #0
 800315a:	69ba      	ldr	r2, [r7, #24]
 800315c:	4313      	orrs	r3, r2
 800315e:	61bb      	str	r3, [r7, #24]
  /* Clear DAC_MCR_HFSEL bits */
  tmpreg1 &= ~(DAC_MCR_HFSEL);
 8003160:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003162:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8003166:	627b      	str	r3, [r7, #36]	; 0x24
  /* Configure for both DAC channels: high frequency mode */
  if (DAC_HIGH_FREQUENCY_INTERFACE_MODE_AUTOMATIC == sConfig->DAC_HighFrequency)
 8003168:	68bb      	ldr	r3, [r7, #8]
 800316a:	681b      	ldr	r3, [r3, #0]
 800316c:	2b02      	cmp	r3, #2
 800316e:	d114      	bne.n	800319a <HAL_DAC_ConfigChannel+0x252>
  {
    hclkfreq = HAL_RCC_GetHCLKFreq();
 8003170:	f001 f9ba 	bl	80044e8 <HAL_RCC_GetHCLKFreq>
 8003174:	6178      	str	r0, [r7, #20]
    if (hclkfreq > HFSEL_ENABLE_THRESHOLD_160MHZ)
 8003176:	697b      	ldr	r3, [r7, #20]
 8003178:	4a47      	ldr	r2, [pc, #284]	; (8003298 <HAL_DAC_ConfigChannel+0x350>)
 800317a:	4293      	cmp	r3, r2
 800317c:	d904      	bls.n	8003188 <HAL_DAC_ConfigChannel+0x240>
    {
      tmpreg1 |= DAC_HIGH_FREQUENCY_INTERFACE_MODE_ABOVE_160MHZ;
 800317e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003180:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003184:	627b      	str	r3, [r7, #36]	; 0x24
 8003186:	e00d      	b.n	80031a4 <HAL_DAC_ConfigChannel+0x25c>
    }
    else if (hclkfreq > HFSEL_ENABLE_THRESHOLD_80MHZ)
 8003188:	697b      	ldr	r3, [r7, #20]
 800318a:	4a44      	ldr	r2, [pc, #272]	; (800329c <HAL_DAC_ConfigChannel+0x354>)
 800318c:	4293      	cmp	r3, r2
 800318e:	d909      	bls.n	80031a4 <HAL_DAC_ConfigChannel+0x25c>
    {
      tmpreg1 |= DAC_HIGH_FREQUENCY_INTERFACE_MODE_ABOVE_80MHZ;
 8003190:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003192:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003196:	627b      	str	r3, [r7, #36]	; 0x24
 8003198:	e004      	b.n	80031a4 <HAL_DAC_ConfigChannel+0x25c>
      tmpreg1 |= DAC_HIGH_FREQUENCY_INTERFACE_MODE_DISABLE;
    }
  }
  else
  {
    tmpreg1 |= sConfig->DAC_HighFrequency;
 800319a:	68bb      	ldr	r3, [r7, #8]
 800319c:	681b      	ldr	r3, [r3, #0]
 800319e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80031a0:	4313      	orrs	r3, r2
 80031a2:	627b      	str	r3, [r7, #36]	; 0x24
  }
  /* Calculate MCR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 80031a4:	687b      	ldr	r3, [r7, #4]
 80031a6:	f003 0310 	and.w	r3, r3, #16
 80031aa:	69ba      	ldr	r2, [r7, #24]
 80031ac:	fa02 f303 	lsl.w	r3, r2, r3
 80031b0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80031b2:	4313      	orrs	r3, r2
 80031b4:	627b      	str	r3, [r7, #36]	; 0x24
  /* Write to DAC MCR */
  hdac->Instance->MCR = tmpreg1;
 80031b6:	68fb      	ldr	r3, [r7, #12]
 80031b8:	681b      	ldr	r3, [r3, #0]
 80031ba:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80031bc:	63da      	str	r2, [r3, #60]	; 0x3c

  /* DAC in normal operating mode hence clear DAC_CR_CENx bit */
  CLEAR_BIT(hdac->Instance->CR, DAC_CR_CEN1 << (Channel & 0x10UL));
 80031be:	68fb      	ldr	r3, [r7, #12]
 80031c0:	681b      	ldr	r3, [r3, #0]
 80031c2:	6819      	ldr	r1, [r3, #0]
 80031c4:	687b      	ldr	r3, [r7, #4]
 80031c6:	f003 0310 	and.w	r3, r3, #16
 80031ca:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80031ce:	fa02 f303 	lsl.w	r3, r2, r3
 80031d2:	43da      	mvns	r2, r3
 80031d4:	68fb      	ldr	r3, [r7, #12]
 80031d6:	681b      	ldr	r3, [r3, #0]
 80031d8:	400a      	ands	r2, r1
 80031da:	601a      	str	r2, [r3, #0]

  /* Get the DAC CR value */
  tmpreg1 = hdac->Instance->CR;
 80031dc:	68fb      	ldr	r3, [r7, #12]
 80031de:	681b      	ldr	r3, [r3, #0]
 80031e0:	681b      	ldr	r3, [r3, #0]
 80031e2:	627b      	str	r3, [r7, #36]	; 0x24
  /* Clear TENx, TSELx, WAVEx and MAMPx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1)) << (Channel & 0x10UL));
 80031e4:	687b      	ldr	r3, [r7, #4]
 80031e6:	f003 0310 	and.w	r3, r3, #16
 80031ea:	f640 72fe 	movw	r2, #4094	; 0xffe
 80031ee:	fa02 f303 	lsl.w	r3, r2, r3
 80031f2:	43db      	mvns	r3, r3
 80031f4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80031f6:	4013      	ands	r3, r2
 80031f8:	627b      	str	r3, [r7, #36]	; 0x24
  /* Configure for the selected DAC channel: trigger */
  /* Set TSELx and TENx bits according to DAC_Trigger value */
  tmpreg2 = sConfig->DAC_Trigger;
 80031fa:	68bb      	ldr	r3, [r7, #8]
 80031fc:	68db      	ldr	r3, [r3, #12]
 80031fe:	61bb      	str	r3, [r7, #24]
  /* Calculate CR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 8003200:	687b      	ldr	r3, [r7, #4]
 8003202:	f003 0310 	and.w	r3, r3, #16
 8003206:	69ba      	ldr	r2, [r7, #24]
 8003208:	fa02 f303 	lsl.w	r3, r2, r3
 800320c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800320e:	4313      	orrs	r3, r2
 8003210:	627b      	str	r3, [r7, #36]	; 0x24
  /* Write to DAC CR */
  hdac->Instance->CR = tmpreg1;
 8003212:	68fb      	ldr	r3, [r7, #12]
 8003214:	681b      	ldr	r3, [r3, #0]
 8003216:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003218:	601a      	str	r2, [r3, #0]
  /* Disable wave generation */
  hdac->Instance->CR &= ~(DAC_CR_WAVE1 << (Channel & 0x10UL));
 800321a:	68fb      	ldr	r3, [r7, #12]
 800321c:	681b      	ldr	r3, [r3, #0]
 800321e:	6819      	ldr	r1, [r3, #0]
 8003220:	687b      	ldr	r3, [r7, #4]
 8003222:	f003 0310 	and.w	r3, r3, #16
 8003226:	22c0      	movs	r2, #192	; 0xc0
 8003228:	fa02 f303 	lsl.w	r3, r2, r3
 800322c:	43da      	mvns	r2, r3
 800322e:	68fb      	ldr	r3, [r7, #12]
 8003230:	681b      	ldr	r3, [r3, #0]
 8003232:	400a      	ands	r2, r1
 8003234:	601a      	str	r2, [r3, #0]

  /* Set STRSTTRIGSELx and STINCTRIGSELx bits according to DAC_Trigger & DAC_Trigger2 values */
  tmpreg2 = ((sConfig->DAC_Trigger & DAC_CR_TSEL1) >> DAC_CR_TSEL1_Pos) << DAC_STMODR_STRSTTRIGSEL1_Pos;
 8003236:	68bb      	ldr	r3, [r7, #8]
 8003238:	68db      	ldr	r3, [r3, #12]
 800323a:	089b      	lsrs	r3, r3, #2
 800323c:	f003 030f 	and.w	r3, r3, #15
 8003240:	61bb      	str	r3, [r7, #24]
  tmpreg2 |= ((sConfig->DAC_Trigger2 & DAC_CR_TSEL1) >> DAC_CR_TSEL1_Pos) << DAC_STMODR_STINCTRIGSEL1_Pos;
 8003242:	68bb      	ldr	r3, [r7, #8]
 8003244:	691b      	ldr	r3, [r3, #16]
 8003246:	089b      	lsrs	r3, r3, #2
 8003248:	021b      	lsls	r3, r3, #8
 800324a:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 800324e:	69ba      	ldr	r2, [r7, #24]
 8003250:	4313      	orrs	r3, r2
 8003252:	61bb      	str	r3, [r7, #24]
  /* Modify STMODR register value depending on DAC_Channel */
  MODIFY_REG(hdac->Instance->STMODR, (DAC_STMODR_STINCTRIGSEL1 | DAC_STMODR_STRSTTRIGSEL1) << (Channel & 0x10UL), tmpreg2 << (Channel & 0x10UL));
 8003254:	68fb      	ldr	r3, [r7, #12]
 8003256:	681b      	ldr	r3, [r3, #0]
 8003258:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 800325a:	687b      	ldr	r3, [r7, #4]
 800325c:	f003 0310 	and.w	r3, r3, #16
 8003260:	f640 710f 	movw	r1, #3855	; 0xf0f
 8003264:	fa01 f303 	lsl.w	r3, r1, r3
 8003268:	43db      	mvns	r3, r3
 800326a:	ea02 0103 	and.w	r1, r2, r3
 800326e:	687b      	ldr	r3, [r7, #4]
 8003270:	f003 0310 	and.w	r3, r3, #16
 8003274:	69ba      	ldr	r2, [r7, #24]
 8003276:	409a      	lsls	r2, r3
 8003278:	68fb      	ldr	r3, [r7, #12]
 800327a:	681b      	ldr	r3, [r3, #0]
 800327c:	430a      	orrs	r2, r1
 800327e:	661a      	str	r2, [r3, #96]	; 0x60
  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 8003280:	68fb      	ldr	r3, [r7, #12]
 8003282:	2201      	movs	r2, #1
 8003284:	711a      	strb	r2, [r3, #4]

  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 8003286:	68fb      	ldr	r3, [r7, #12]
 8003288:	2200      	movs	r2, #0
 800328a:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 800328c:	2300      	movs	r3, #0
}
 800328e:	4618      	mov	r0, r3
 8003290:	3728      	adds	r7, #40	; 0x28
 8003292:	46bd      	mov	sp, r7
 8003294:	bd80      	pop	{r7, pc}
 8003296:	bf00      	nop
 8003298:	09896800 	.word	0x09896800
 800329c:	04c4b400 	.word	0x04c4b400

080032a0 <HAL_DACEx_TriangleWaveGenerate>:
  *            @arg DAC_TRIANGLEAMPLITUDE_2047: Select max triangle amplitude of 2047
  *            @arg DAC_TRIANGLEAMPLITUDE_4095: Select max triangle amplitude of 4095
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DACEx_TriangleWaveGenerate(DAC_HandleTypeDef *hdac, uint32_t Channel, uint32_t Amplitude)
{
 80032a0:	b480      	push	{r7}
 80032a2:	b085      	sub	sp, #20
 80032a4:	af00      	add	r7, sp, #0
 80032a6:	60f8      	str	r0, [r7, #12]
 80032a8:	60b9      	str	r1, [r7, #8]
 80032aa:	607a      	str	r2, [r7, #4]
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(hdac->Instance, Channel));
  assert_param(IS_DAC_LFSR_UNMASK_TRIANGLE_AMPLITUDE(Amplitude));

  /* Process locked */
  __HAL_LOCK(hdac);
 80032ac:	68fb      	ldr	r3, [r7, #12]
 80032ae:	795b      	ldrb	r3, [r3, #5]
 80032b0:	2b01      	cmp	r3, #1
 80032b2:	d101      	bne.n	80032b8 <HAL_DACEx_TriangleWaveGenerate+0x18>
 80032b4:	2302      	movs	r3, #2
 80032b6:	e024      	b.n	8003302 <HAL_DACEx_TriangleWaveGenerate+0x62>
 80032b8:	68fb      	ldr	r3, [r7, #12]
 80032ba:	2201      	movs	r2, #1
 80032bc:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 80032be:	68fb      	ldr	r3, [r7, #12]
 80032c0:	2202      	movs	r2, #2
 80032c2:	711a      	strb	r2, [r3, #4]

  /* Enable the triangle wave generation for the selected DAC channel */
  MODIFY_REG(hdac->Instance->CR, ((DAC_CR_WAVE1) | (DAC_CR_MAMP1)) << (Channel & 0x10UL), (DAC_CR_WAVE1_1 | Amplitude) << (Channel & 0x10UL));
 80032c4:	68fb      	ldr	r3, [r7, #12]
 80032c6:	681b      	ldr	r3, [r3, #0]
 80032c8:	681a      	ldr	r2, [r3, #0]
 80032ca:	68bb      	ldr	r3, [r7, #8]
 80032cc:	f003 0310 	and.w	r3, r3, #16
 80032d0:	f44f 617c 	mov.w	r1, #4032	; 0xfc0
 80032d4:	fa01 f303 	lsl.w	r3, r1, r3
 80032d8:	43db      	mvns	r3, r3
 80032da:	ea02 0103 	and.w	r1, r2, r3
 80032de:	687b      	ldr	r3, [r7, #4]
 80032e0:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 80032e4:	68bb      	ldr	r3, [r7, #8]
 80032e6:	f003 0310 	and.w	r3, r3, #16
 80032ea:	409a      	lsls	r2, r3
 80032ec:	68fb      	ldr	r3, [r7, #12]
 80032ee:	681b      	ldr	r3, [r3, #0]
 80032f0:	430a      	orrs	r2, r1
 80032f2:	601a      	str	r2, [r3, #0]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 80032f4:	68fb      	ldr	r3, [r7, #12]
 80032f6:	2201      	movs	r2, #1
 80032f8:	711a      	strb	r2, [r3, #4]

  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 80032fa:	68fb      	ldr	r3, [r7, #12]
 80032fc:	2200      	movs	r2, #0
 80032fe:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 8003300:	2300      	movs	r3, #0
}
 8003302:	4618      	mov	r0, r3
 8003304:	3714      	adds	r7, #20
 8003306:	46bd      	mov	sp, r7
 8003308:	f85d 7b04 	ldr.w	r7, [sp], #4
 800330c:	4770      	bx	lr
	...

08003310 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8003310:	b580      	push	{r7, lr}
 8003312:	b084      	sub	sp, #16
 8003314:	af00      	add	r7, sp, #0
 8003316:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if (hdma == NULL)
 8003318:	687b      	ldr	r3, [r7, #4]
 800331a:	2b00      	cmp	r3, #0
 800331c:	d101      	bne.n	8003322 <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 800331e:	2301      	movs	r3, #1
 8003320:	e08d      	b.n	800343e <HAL_DMA_Init+0x12e>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 8003322:	687b      	ldr	r3, [r7, #4]
 8003324:	681b      	ldr	r3, [r3, #0]
 8003326:	461a      	mov	r2, r3
 8003328:	4b47      	ldr	r3, [pc, #284]	; (8003448 <HAL_DMA_Init+0x138>)
 800332a:	429a      	cmp	r2, r3
 800332c:	d80f      	bhi.n	800334e <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 800332e:	687b      	ldr	r3, [r7, #4]
 8003330:	681b      	ldr	r3, [r3, #0]
 8003332:	461a      	mov	r2, r3
 8003334:	4b45      	ldr	r3, [pc, #276]	; (800344c <HAL_DMA_Init+0x13c>)
 8003336:	4413      	add	r3, r2
 8003338:	4a45      	ldr	r2, [pc, #276]	; (8003450 <HAL_DMA_Init+0x140>)
 800333a:	fba2 2303 	umull	r2, r3, r2, r3
 800333e:	091b      	lsrs	r3, r3, #4
 8003340:	009a      	lsls	r2, r3, #2
 8003342:	687b      	ldr	r3, [r7, #4]
 8003344:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA1;
 8003346:	687b      	ldr	r3, [r7, #4]
 8003348:	4a42      	ldr	r2, [pc, #264]	; (8003454 <HAL_DMA_Init+0x144>)
 800334a:	641a      	str	r2, [r3, #64]	; 0x40
 800334c:	e00e      	b.n	800336c <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
 800334e:	687b      	ldr	r3, [r7, #4]
 8003350:	681b      	ldr	r3, [r3, #0]
 8003352:	461a      	mov	r2, r3
 8003354:	4b40      	ldr	r3, [pc, #256]	; (8003458 <HAL_DMA_Init+0x148>)
 8003356:	4413      	add	r3, r2
 8003358:	4a3d      	ldr	r2, [pc, #244]	; (8003450 <HAL_DMA_Init+0x140>)
 800335a:	fba2 2303 	umull	r2, r3, r2, r3
 800335e:	091b      	lsrs	r3, r3, #4
 8003360:	009a      	lsls	r2, r3, #2
 8003362:	687b      	ldr	r3, [r7, #4]
 8003364:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA2;
 8003366:	687b      	ldr	r3, [r7, #4]
 8003368:	4a3c      	ldr	r2, [pc, #240]	; (800345c <HAL_DMA_Init+0x14c>)
 800336a:	641a      	str	r2, [r3, #64]	; 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 800336c:	687b      	ldr	r3, [r7, #4]
 800336e:	2202      	movs	r2, #2
 8003370:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8003374:	687b      	ldr	r3, [r7, #4]
 8003376:	681b      	ldr	r3, [r3, #0]
 8003378:	681b      	ldr	r3, [r3, #0]
 800337a:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 800337c:	68fb      	ldr	r3, [r7, #12]
 800337e:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 8003382:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003386:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8003388:	687b      	ldr	r3, [r7, #4]
 800338a:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800338c:	687b      	ldr	r3, [r7, #4]
 800338e:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 8003390:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003392:	687b      	ldr	r3, [r7, #4]
 8003394:	691b      	ldr	r3, [r3, #16]
 8003396:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003398:	687b      	ldr	r3, [r7, #4]
 800339a:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800339c:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800339e:	687b      	ldr	r3, [r7, #4]
 80033a0:	699b      	ldr	r3, [r3, #24]
 80033a2:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80033a4:	687b      	ldr	r3, [r7, #4]
 80033a6:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80033a8:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80033aa:	687b      	ldr	r3, [r7, #4]
 80033ac:	6a1b      	ldr	r3, [r3, #32]
 80033ae:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 80033b0:	68fa      	ldr	r2, [r7, #12]
 80033b2:	4313      	orrs	r3, r2
 80033b4:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 80033b6:	687b      	ldr	r3, [r7, #4]
 80033b8:	681b      	ldr	r3, [r3, #0]
 80033ba:	68fa      	ldr	r2, [r7, #12]
 80033bc:	601a      	str	r2, [r3, #0]

  /* Initialize parameters for DMAMUX channel :
     DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
  */
  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 80033be:	6878      	ldr	r0, [r7, #4]
 80033c0:	f000 f8fe 	bl	80035c0 <DMA_CalcDMAMUXChannelBaseAndMask>

  if (hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 80033c4:	687b      	ldr	r3, [r7, #4]
 80033c6:	689b      	ldr	r3, [r3, #8]
 80033c8:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80033cc:	d102      	bne.n	80033d4 <HAL_DMA_Init+0xc4>
  {
    /* if memory to memory force the request to 0*/
    hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 80033ce:	687b      	ldr	r3, [r7, #4]
 80033d0:	2200      	movs	r2, #0
 80033d2:	605a      	str	r2, [r3, #4]
  }

  /* Set peripheral request  to DMAMUX channel */
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 80033d4:	687b      	ldr	r3, [r7, #4]
 80033d6:	685a      	ldr	r2, [r3, #4]
 80033d8:	687b      	ldr	r3, [r7, #4]
 80033da:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80033dc:	b2d2      	uxtb	r2, r2
 80033de:	601a      	str	r2, [r3, #0]

  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80033e0:	687b      	ldr	r3, [r7, #4]
 80033e2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80033e4:	687a      	ldr	r2, [r7, #4]
 80033e6:	6d12      	ldr	r2, [r2, #80]	; 0x50
 80033e8:	605a      	str	r2, [r3, #4]

  if (((hdma->Init.Request >  0U) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 80033ea:	687b      	ldr	r3, [r7, #4]
 80033ec:	685b      	ldr	r3, [r3, #4]
 80033ee:	2b00      	cmp	r3, #0
 80033f0:	d010      	beq.n	8003414 <HAL_DMA_Init+0x104>
 80033f2:	687b      	ldr	r3, [r7, #4]
 80033f4:	685b      	ldr	r3, [r3, #4]
 80033f6:	2b04      	cmp	r3, #4
 80033f8:	d80c      	bhi.n	8003414 <HAL_DMA_Init+0x104>
  {
    /* Initialize parameters for DMAMUX request generator :
       DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask
    */
    DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 80033fa:	6878      	ldr	r0, [r7, #4]
 80033fc:	f000 f91e 	bl	800363c <DMA_CalcDMAMUXRequestGenBaseAndMask>

    /* Reset the DMAMUX request generator register*/
    hdma->DMAmuxRequestGen->RGCR = 0U;
 8003400:	687b      	ldr	r3, [r7, #4]
 8003402:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003404:	2200      	movs	r2, #0
 8003406:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8003408:	687b      	ldr	r3, [r7, #4]
 800340a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800340c:	687a      	ldr	r2, [r7, #4]
 800340e:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 8003410:	605a      	str	r2, [r3, #4]
 8003412:	e008      	b.n	8003426 <HAL_DMA_Init+0x116>
  }
  else
  {
    hdma->DMAmuxRequestGen = 0U;
 8003414:	687b      	ldr	r3, [r7, #4]
 8003416:	2200      	movs	r2, #0
 8003418:	655a      	str	r2, [r3, #84]	; 0x54
    hdma->DMAmuxRequestGenStatus = 0U;
 800341a:	687b      	ldr	r3, [r7, #4]
 800341c:	2200      	movs	r2, #0
 800341e:	659a      	str	r2, [r3, #88]	; 0x58
    hdma->DMAmuxRequestGenStatusMask = 0U;
 8003420:	687b      	ldr	r3, [r7, #4]
 8003422:	2200      	movs	r2, #0
 8003424:	65da      	str	r2, [r3, #92]	; 0x5c
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003426:	687b      	ldr	r3, [r7, #4]
 8003428:	2200      	movs	r2, #0
 800342a:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA state*/
  hdma->State  = HAL_DMA_STATE_READY;
 800342c:	687b      	ldr	r3, [r7, #4]
 800342e:	2201      	movs	r2, #1
 8003430:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8003434:	687b      	ldr	r3, [r7, #4]
 8003436:	2200      	movs	r2, #0
 8003438:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  return HAL_OK;
 800343c:	2300      	movs	r3, #0
}
 800343e:	4618      	mov	r0, r3
 8003440:	3710      	adds	r7, #16
 8003442:	46bd      	mov	sp, r7
 8003444:	bd80      	pop	{r7, pc}
 8003446:	bf00      	nop
 8003448:	40020407 	.word	0x40020407
 800344c:	bffdfff8 	.word	0xbffdfff8
 8003450:	cccccccd 	.word	0xcccccccd
 8003454:	40020000 	.word	0x40020000
 8003458:	bffdfbf8 	.word	0xbffdfbf8
 800345c:	40020400 	.word	0x40020400

08003460 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8003460:	b580      	push	{r7, lr}
 8003462:	b084      	sub	sp, #16
 8003464:	af00      	add	r7, sp, #0
 8003466:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8003468:	687b      	ldr	r3, [r7, #4]
 800346a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800346c:	681b      	ldr	r3, [r3, #0]
 800346e:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8003470:	687b      	ldr	r3, [r7, #4]
 8003472:	681b      	ldr	r3, [r3, #0]
 8003474:	681b      	ldr	r3, [r3, #0]
 8003476:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if ((0U != (flag_it & ((uint32_t)DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1FU)))) && (0U != (source_it & DMA_IT_HT)))
 8003478:	687b      	ldr	r3, [r7, #4]
 800347a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800347c:	f003 031f 	and.w	r3, r3, #31
 8003480:	2204      	movs	r2, #4
 8003482:	409a      	lsls	r2, r3
 8003484:	68fb      	ldr	r3, [r7, #12]
 8003486:	4013      	ands	r3, r2
 8003488:	2b00      	cmp	r3, #0
 800348a:	d026      	beq.n	80034da <HAL_DMA_IRQHandler+0x7a>
 800348c:	68bb      	ldr	r3, [r7, #8]
 800348e:	f003 0304 	and.w	r3, r3, #4
 8003492:	2b00      	cmp	r3, #0
 8003494:	d021      	beq.n	80034da <HAL_DMA_IRQHandler+0x7a>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8003496:	687b      	ldr	r3, [r7, #4]
 8003498:	681b      	ldr	r3, [r3, #0]
 800349a:	681b      	ldr	r3, [r3, #0]
 800349c:	f003 0320 	and.w	r3, r3, #32
 80034a0:	2b00      	cmp	r3, #0
 80034a2:	d107      	bne.n	80034b4 <HAL_DMA_IRQHandler+0x54>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80034a4:	687b      	ldr	r3, [r7, #4]
 80034a6:	681b      	ldr	r3, [r3, #0]
 80034a8:	681a      	ldr	r2, [r3, #0]
 80034aa:	687b      	ldr	r3, [r7, #4]
 80034ac:	681b      	ldr	r3, [r3, #0]
 80034ae:	f022 0204 	bic.w	r2, r2, #4
 80034b2:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1FU));
 80034b4:	687b      	ldr	r3, [r7, #4]
 80034b6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80034b8:	f003 021f 	and.w	r2, r3, #31
 80034bc:	687b      	ldr	r3, [r7, #4]
 80034be:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80034c0:	2104      	movs	r1, #4
 80034c2:	fa01 f202 	lsl.w	r2, r1, r2
 80034c6:	605a      	str	r2, [r3, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if (hdma->XferHalfCpltCallback != NULL)
 80034c8:	687b      	ldr	r3, [r7, #4]
 80034ca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80034cc:	2b00      	cmp	r3, #0
 80034ce:	d071      	beq.n	80035b4 <HAL_DMA_IRQHandler+0x154>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 80034d0:	687b      	ldr	r3, [r7, #4]
 80034d2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80034d4:	6878      	ldr	r0, [r7, #4]
 80034d6:	4798      	blx	r3
    if (hdma->XferHalfCpltCallback != NULL)
 80034d8:	e06c      	b.n	80035b4 <HAL_DMA_IRQHandler+0x154>
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  else if ((0U != (flag_it & ((uint32_t)DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1FU))))
 80034da:	687b      	ldr	r3, [r7, #4]
 80034dc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80034de:	f003 031f 	and.w	r3, r3, #31
 80034e2:	2202      	movs	r2, #2
 80034e4:	409a      	lsls	r2, r3
 80034e6:	68fb      	ldr	r3, [r7, #12]
 80034e8:	4013      	ands	r3, r2
 80034ea:	2b00      	cmp	r3, #0
 80034ec:	d02e      	beq.n	800354c <HAL_DMA_IRQHandler+0xec>
           && (0U != (source_it & DMA_IT_TC)))
 80034ee:	68bb      	ldr	r3, [r7, #8]
 80034f0:	f003 0302 	and.w	r3, r3, #2
 80034f4:	2b00      	cmp	r3, #0
 80034f6:	d029      	beq.n	800354c <HAL_DMA_IRQHandler+0xec>
  {
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80034f8:	687b      	ldr	r3, [r7, #4]
 80034fa:	681b      	ldr	r3, [r3, #0]
 80034fc:	681b      	ldr	r3, [r3, #0]
 80034fe:	f003 0320 	and.w	r3, r3, #32
 8003502:	2b00      	cmp	r3, #0
 8003504:	d10b      	bne.n	800351e <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8003506:	687b      	ldr	r3, [r7, #4]
 8003508:	681b      	ldr	r3, [r3, #0]
 800350a:	681a      	ldr	r2, [r3, #0]
 800350c:	687b      	ldr	r3, [r7, #4]
 800350e:	681b      	ldr	r3, [r3, #0]
 8003510:	f022 020a 	bic.w	r2, r2, #10
 8003514:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8003516:	687b      	ldr	r3, [r7, #4]
 8003518:	2201      	movs	r2, #1
 800351a:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1FU));
 800351e:	687b      	ldr	r3, [r7, #4]
 8003520:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003522:	f003 021f 	and.w	r2, r3, #31
 8003526:	687b      	ldr	r3, [r7, #4]
 8003528:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800352a:	2102      	movs	r1, #2
 800352c:	fa01 f202 	lsl.w	r2, r1, r2
 8003530:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003532:	687b      	ldr	r3, [r7, #4]
 8003534:	2200      	movs	r2, #0
 8003536:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferCpltCallback != NULL)
 800353a:	687b      	ldr	r3, [r7, #4]
 800353c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800353e:	2b00      	cmp	r3, #0
 8003540:	d038      	beq.n	80035b4 <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8003542:	687b      	ldr	r3, [r7, #4]
 8003544:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003546:	6878      	ldr	r0, [r7, #4]
 8003548:	4798      	blx	r3
    if (hdma->XferCpltCallback != NULL)
 800354a:	e033      	b.n	80035b4 <HAL_DMA_IRQHandler+0x154>
    }
  }
  /* Transfer Error Interrupt management **************************************/
  else if ((0U != (flag_it & ((uint32_t)DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1FU))))
 800354c:	687b      	ldr	r3, [r7, #4]
 800354e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003550:	f003 031f 	and.w	r3, r3, #31
 8003554:	2208      	movs	r2, #8
 8003556:	409a      	lsls	r2, r3
 8003558:	68fb      	ldr	r3, [r7, #12]
 800355a:	4013      	ands	r3, r2
 800355c:	2b00      	cmp	r3, #0
 800355e:	d02a      	beq.n	80035b6 <HAL_DMA_IRQHandler+0x156>
           && (0U != (source_it & DMA_IT_TE)))
 8003560:	68bb      	ldr	r3, [r7, #8]
 8003562:	f003 0308 	and.w	r3, r3, #8
 8003566:	2b00      	cmp	r3, #0
 8003568:	d025      	beq.n	80035b6 <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800356a:	687b      	ldr	r3, [r7, #4]
 800356c:	681b      	ldr	r3, [r3, #0]
 800356e:	681a      	ldr	r2, [r3, #0]
 8003570:	687b      	ldr	r3, [r7, #4]
 8003572:	681b      	ldr	r3, [r3, #0]
 8003574:	f022 020e 	bic.w	r2, r2, #14
 8003578:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 800357a:	687b      	ldr	r3, [r7, #4]
 800357c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800357e:	f003 021f 	and.w	r2, r3, #31
 8003582:	687b      	ldr	r3, [r7, #4]
 8003584:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003586:	2101      	movs	r1, #1
 8003588:	fa01 f202 	lsl.w	r2, r1, r2
 800358c:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 800358e:	687b      	ldr	r3, [r7, #4]
 8003590:	2201      	movs	r2, #1
 8003592:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8003594:	687b      	ldr	r3, [r7, #4]
 8003596:	2201      	movs	r2, #1
 8003598:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800359c:	687b      	ldr	r3, [r7, #4]
 800359e:	2200      	movs	r2, #0
 80035a0:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferErrorCallback != NULL)
 80035a4:	687b      	ldr	r3, [r7, #4]
 80035a6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80035a8:	2b00      	cmp	r3, #0
 80035aa:	d004      	beq.n	80035b6 <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 80035ac:	687b      	ldr	r3, [r7, #4]
 80035ae:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80035b0:	6878      	ldr	r0, [r7, #4]
 80035b2:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 80035b4:	bf00      	nop
 80035b6:	bf00      	nop
}
 80035b8:	3710      	adds	r7, #16
 80035ba:	46bd      	mov	sp, r7
 80035bc:	bd80      	pop	{r7, pc}
	...

080035c0 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma        pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval None
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 80035c0:	b480      	push	{r7}
 80035c2:	b087      	sub	sp, #28
 80035c4:	af00      	add	r7, sp, #0
 80035c6:	6078      	str	r0, [r7, #4]
  uint32_t dmamux_base_addr;
  uint32_t channel_number;
  DMAMUX_Channel_TypeDef *DMAMUX1_ChannelBase;

  /* check if instance is not outside the DMA channel range */
  if ((uint32_t)hdma->Instance < (uint32_t)DMA2_Channel1)
 80035c8:	687b      	ldr	r3, [r7, #4]
 80035ca:	681b      	ldr	r3, [r3, #0]
 80035cc:	461a      	mov	r2, r3
 80035ce:	4b16      	ldr	r3, [pc, #88]	; (8003628 <DMA_CalcDMAMUXChannelBaseAndMask+0x68>)
 80035d0:	429a      	cmp	r2, r3
 80035d2:	d802      	bhi.n	80035da <DMA_CalcDMAMUXChannelBaseAndMask+0x1a>
  {
    /* DMA1 */
    DMAMUX1_ChannelBase = DMAMUX1_Channel0;
 80035d4:	4b15      	ldr	r3, [pc, #84]	; (800362c <DMA_CalcDMAMUXChannelBaseAndMask+0x6c>)
 80035d6:	617b      	str	r3, [r7, #20]
 80035d8:	e001      	b.n	80035de <DMA_CalcDMAMUXChannelBaseAndMask+0x1e>
  }
  else
  {
    /* DMA2 */
#if defined (STM32G471xx) || defined (STM32G473xx) || defined (STM32G474xx) || defined (STM32G483xx) || defined (STM32G484xx)
    DMAMUX1_ChannelBase = DMAMUX1_Channel8;
 80035da:	4b15      	ldr	r3, [pc, #84]	; (8003630 <DMA_CalcDMAMUXChannelBaseAndMask+0x70>)
 80035dc:	617b      	str	r3, [r7, #20]
    DMAMUX1_ChannelBase = DMAMUX1_Channel6;
#else
    DMAMUX1_ChannelBase = DMAMUX1_Channel7;
#endif /* STM32G4x1xx) */
  }
  dmamux_base_addr = (uint32_t)DMAMUX1_ChannelBase;
 80035de:	697b      	ldr	r3, [r7, #20]
 80035e0:	613b      	str	r3, [r7, #16]
  channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 80035e2:	687b      	ldr	r3, [r7, #4]
 80035e4:	681b      	ldr	r3, [r3, #0]
 80035e6:	b2db      	uxtb	r3, r3
 80035e8:	3b08      	subs	r3, #8
 80035ea:	4a12      	ldr	r2, [pc, #72]	; (8003634 <DMA_CalcDMAMUXChannelBaseAndMask+0x74>)
 80035ec:	fba2 2303 	umull	r2, r3, r2, r3
 80035f0:	091b      	lsrs	r3, r3, #4
 80035f2:	60fb      	str	r3, [r7, #12]
  hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)(uint32_t)(dmamux_base_addr + ((hdma->ChannelIndex >> 2U) * ((uint32_t)DMAMUX1_Channel1 - (uint32_t)DMAMUX1_Channel0)));
 80035f4:	687b      	ldr	r3, [r7, #4]
 80035f6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80035f8:	089b      	lsrs	r3, r3, #2
 80035fa:	009a      	lsls	r2, r3, #2
 80035fc:	693b      	ldr	r3, [r7, #16]
 80035fe:	4413      	add	r3, r2
 8003600:	461a      	mov	r2, r3
 8003602:	687b      	ldr	r3, [r7, #4]
 8003604:	649a      	str	r2, [r3, #72]	; 0x48
  hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 8003606:	687b      	ldr	r3, [r7, #4]
 8003608:	4a0b      	ldr	r2, [pc, #44]	; (8003638 <DMA_CalcDMAMUXChannelBaseAndMask+0x78>)
 800360a:	64da      	str	r2, [r3, #76]	; 0x4c
  hdma->DMAmuxChannelStatusMask = 1UL << (channel_number & 0x1FU);
 800360c:	68fb      	ldr	r3, [r7, #12]
 800360e:	f003 031f 	and.w	r3, r3, #31
 8003612:	2201      	movs	r2, #1
 8003614:	409a      	lsls	r2, r3
 8003616:	687b      	ldr	r3, [r7, #4]
 8003618:	651a      	str	r2, [r3, #80]	; 0x50
}
 800361a:	bf00      	nop
 800361c:	371c      	adds	r7, #28
 800361e:	46bd      	mov	sp, r7
 8003620:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003624:	4770      	bx	lr
 8003626:	bf00      	nop
 8003628:	40020407 	.word	0x40020407
 800362c:	40020800 	.word	0x40020800
 8003630:	40020820 	.word	0x40020820
 8003634:	cccccccd 	.word	0xcccccccd
 8003638:	40020880 	.word	0x40020880

0800363c <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  *                     the configuration information for the specified DMA Channel.
  * @retval None
  */

static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 800363c:	b480      	push	{r7}
 800363e:	b085      	sub	sp, #20
 8003640:	af00      	add	r7, sp, #0
 8003642:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 8003644:	687b      	ldr	r3, [r7, #4]
 8003646:	685b      	ldr	r3, [r3, #4]
 8003648:	b2db      	uxtb	r3, r3
 800364a:	60fb      	str	r3, [r7, #12]

  /* DMA Channels are connected to DMAMUX1 request generator blocks*/
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 800364c:	68fa      	ldr	r2, [r7, #12]
 800364e:	4b0b      	ldr	r3, [pc, #44]	; (800367c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x40>)
 8003650:	4413      	add	r3, r2
 8003652:	009b      	lsls	r3, r3, #2
 8003654:	461a      	mov	r2, r3
 8003656:	687b      	ldr	r3, [r7, #4]
 8003658:	655a      	str	r2, [r3, #84]	; 0x54

  hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 800365a:	687b      	ldr	r3, [r7, #4]
 800365c:	4a08      	ldr	r2, [pc, #32]	; (8003680 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x44>)
 800365e:	659a      	str	r2, [r3, #88]	; 0x58

  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x1FU);
 8003660:	68fb      	ldr	r3, [r7, #12]
 8003662:	3b01      	subs	r3, #1
 8003664:	f003 031f 	and.w	r3, r3, #31
 8003668:	2201      	movs	r2, #1
 800366a:	409a      	lsls	r2, r3
 800366c:	687b      	ldr	r3, [r7, #4]
 800366e:	65da      	str	r2, [r3, #92]	; 0x5c
}
 8003670:	bf00      	nop
 8003672:	3714      	adds	r7, #20
 8003674:	46bd      	mov	sp, r7
 8003676:	f85d 7b04 	ldr.w	r7, [sp], #4
 800367a:	4770      	bx	lr
 800367c:	1000823f 	.word	0x1000823f
 8003680:	40020940 	.word	0x40020940

08003684 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003684:	b480      	push	{r7}
 8003686:	b087      	sub	sp, #28
 8003688:	af00      	add	r7, sp, #0
 800368a:	6078      	str	r0, [r7, #4]
 800368c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 800368e:	2300      	movs	r3, #0
 8003690:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 8003692:	e15a      	b.n	800394a <HAL_GPIO_Init+0x2c6>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8003694:	683b      	ldr	r3, [r7, #0]
 8003696:	681a      	ldr	r2, [r3, #0]
 8003698:	2101      	movs	r1, #1
 800369a:	697b      	ldr	r3, [r7, #20]
 800369c:	fa01 f303 	lsl.w	r3, r1, r3
 80036a0:	4013      	ands	r3, r2
 80036a2:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80036a4:	68fb      	ldr	r3, [r7, #12]
 80036a6:	2b00      	cmp	r3, #0
 80036a8:	f000 814c 	beq.w	8003944 <HAL_GPIO_Init+0x2c0>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80036ac:	683b      	ldr	r3, [r7, #0]
 80036ae:	685b      	ldr	r3, [r3, #4]
 80036b0:	2b01      	cmp	r3, #1
 80036b2:	d00b      	beq.n	80036cc <HAL_GPIO_Init+0x48>
 80036b4:	683b      	ldr	r3, [r7, #0]
 80036b6:	685b      	ldr	r3, [r3, #4]
 80036b8:	2b02      	cmp	r3, #2
 80036ba:	d007      	beq.n	80036cc <HAL_GPIO_Init+0x48>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80036bc:	683b      	ldr	r3, [r7, #0]
 80036be:	685b      	ldr	r3, [r3, #4]
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80036c0:	2b11      	cmp	r3, #17
 80036c2:	d003      	beq.n	80036cc <HAL_GPIO_Init+0x48>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80036c4:	683b      	ldr	r3, [r7, #0]
 80036c6:	685b      	ldr	r3, [r3, #4]
 80036c8:	2b12      	cmp	r3, #18
 80036ca:	d130      	bne.n	800372e <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80036cc:	687b      	ldr	r3, [r7, #4]
 80036ce:	689b      	ldr	r3, [r3, #8]
 80036d0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 80036d2:	697b      	ldr	r3, [r7, #20]
 80036d4:	005b      	lsls	r3, r3, #1
 80036d6:	2203      	movs	r2, #3
 80036d8:	fa02 f303 	lsl.w	r3, r2, r3
 80036dc:	43db      	mvns	r3, r3
 80036de:	693a      	ldr	r2, [r7, #16]
 80036e0:	4013      	ands	r3, r2
 80036e2:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80036e4:	683b      	ldr	r3, [r7, #0]
 80036e6:	68da      	ldr	r2, [r3, #12]
 80036e8:	697b      	ldr	r3, [r7, #20]
 80036ea:	005b      	lsls	r3, r3, #1
 80036ec:	fa02 f303 	lsl.w	r3, r2, r3
 80036f0:	693a      	ldr	r2, [r7, #16]
 80036f2:	4313      	orrs	r3, r2
 80036f4:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80036f6:	687b      	ldr	r3, [r7, #4]
 80036f8:	693a      	ldr	r2, [r7, #16]
 80036fa:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80036fc:	687b      	ldr	r3, [r7, #4]
 80036fe:	685b      	ldr	r3, [r3, #4]
 8003700:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8003702:	2201      	movs	r2, #1
 8003704:	697b      	ldr	r3, [r7, #20]
 8003706:	fa02 f303 	lsl.w	r3, r2, r3
 800370a:	43db      	mvns	r3, r3
 800370c:	693a      	ldr	r2, [r7, #16]
 800370e:	4013      	ands	r3, r2
 8003710:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8003712:	683b      	ldr	r3, [r7, #0]
 8003714:	685b      	ldr	r3, [r3, #4]
 8003716:	091b      	lsrs	r3, r3, #4
 8003718:	f003 0201 	and.w	r2, r3, #1
 800371c:	697b      	ldr	r3, [r7, #20]
 800371e:	fa02 f303 	lsl.w	r3, r2, r3
 8003722:	693a      	ldr	r2, [r7, #16]
 8003724:	4313      	orrs	r3, r2
 8003726:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8003728:	687b      	ldr	r3, [r7, #4]
 800372a:	693a      	ldr	r2, [r7, #16]
 800372c:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 800372e:	687b      	ldr	r3, [r7, #4]
 8003730:	68db      	ldr	r3, [r3, #12]
 8003732:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8003734:	697b      	ldr	r3, [r7, #20]
 8003736:	005b      	lsls	r3, r3, #1
 8003738:	2203      	movs	r2, #3
 800373a:	fa02 f303 	lsl.w	r3, r2, r3
 800373e:	43db      	mvns	r3, r3
 8003740:	693a      	ldr	r2, [r7, #16]
 8003742:	4013      	ands	r3, r2
 8003744:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8003746:	683b      	ldr	r3, [r7, #0]
 8003748:	689a      	ldr	r2, [r3, #8]
 800374a:	697b      	ldr	r3, [r7, #20]
 800374c:	005b      	lsls	r3, r3, #1
 800374e:	fa02 f303 	lsl.w	r3, r2, r3
 8003752:	693a      	ldr	r2, [r7, #16]
 8003754:	4313      	orrs	r3, r2
 8003756:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 8003758:	687b      	ldr	r3, [r7, #4]
 800375a:	693a      	ldr	r2, [r7, #16]
 800375c:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800375e:	683b      	ldr	r3, [r7, #0]
 8003760:	685b      	ldr	r3, [r3, #4]
 8003762:	2b02      	cmp	r3, #2
 8003764:	d003      	beq.n	800376e <HAL_GPIO_Init+0xea>
 8003766:	683b      	ldr	r3, [r7, #0]
 8003768:	685b      	ldr	r3, [r3, #4]
 800376a:	2b12      	cmp	r3, #18
 800376c:	d123      	bne.n	80037b6 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800376e:	697b      	ldr	r3, [r7, #20]
 8003770:	08da      	lsrs	r2, r3, #3
 8003772:	687b      	ldr	r3, [r7, #4]
 8003774:	3208      	adds	r2, #8
 8003776:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800377a:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 800377c:	697b      	ldr	r3, [r7, #20]
 800377e:	f003 0307 	and.w	r3, r3, #7
 8003782:	009b      	lsls	r3, r3, #2
 8003784:	220f      	movs	r2, #15
 8003786:	fa02 f303 	lsl.w	r3, r2, r3
 800378a:	43db      	mvns	r3, r3
 800378c:	693a      	ldr	r2, [r7, #16]
 800378e:	4013      	ands	r3, r2
 8003790:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8003792:	683b      	ldr	r3, [r7, #0]
 8003794:	691a      	ldr	r2, [r3, #16]
 8003796:	697b      	ldr	r3, [r7, #20]
 8003798:	f003 0307 	and.w	r3, r3, #7
 800379c:	009b      	lsls	r3, r3, #2
 800379e:	fa02 f303 	lsl.w	r3, r2, r3
 80037a2:	693a      	ldr	r2, [r7, #16]
 80037a4:	4313      	orrs	r3, r2
 80037a6:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 80037a8:	697b      	ldr	r3, [r7, #20]
 80037aa:	08da      	lsrs	r2, r3, #3
 80037ac:	687b      	ldr	r3, [r7, #4]
 80037ae:	3208      	adds	r2, #8
 80037b0:	6939      	ldr	r1, [r7, #16]
 80037b2:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80037b6:	687b      	ldr	r3, [r7, #4]
 80037b8:	681b      	ldr	r3, [r3, #0]
 80037ba:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 80037bc:	697b      	ldr	r3, [r7, #20]
 80037be:	005b      	lsls	r3, r3, #1
 80037c0:	2203      	movs	r2, #3
 80037c2:	fa02 f303 	lsl.w	r3, r2, r3
 80037c6:	43db      	mvns	r3, r3
 80037c8:	693a      	ldr	r2, [r7, #16]
 80037ca:	4013      	ands	r3, r2
 80037cc:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80037ce:	683b      	ldr	r3, [r7, #0]
 80037d0:	685b      	ldr	r3, [r3, #4]
 80037d2:	f003 0203 	and.w	r2, r3, #3
 80037d6:	697b      	ldr	r3, [r7, #20]
 80037d8:	005b      	lsls	r3, r3, #1
 80037da:	fa02 f303 	lsl.w	r3, r2, r3
 80037de:	693a      	ldr	r2, [r7, #16]
 80037e0:	4313      	orrs	r3, r2
 80037e2:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80037e4:	687b      	ldr	r3, [r7, #4]
 80037e6:	693a      	ldr	r2, [r7, #16]
 80037e8:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80037ea:	683b      	ldr	r3, [r7, #0]
 80037ec:	685b      	ldr	r3, [r3, #4]
 80037ee:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80037f2:	2b00      	cmp	r3, #0
 80037f4:	f000 80a6 	beq.w	8003944 <HAL_GPIO_Init+0x2c0>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80037f8:	4b5b      	ldr	r3, [pc, #364]	; (8003968 <HAL_GPIO_Init+0x2e4>)
 80037fa:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80037fc:	4a5a      	ldr	r2, [pc, #360]	; (8003968 <HAL_GPIO_Init+0x2e4>)
 80037fe:	f043 0301 	orr.w	r3, r3, #1
 8003802:	6613      	str	r3, [r2, #96]	; 0x60
 8003804:	4b58      	ldr	r3, [pc, #352]	; (8003968 <HAL_GPIO_Init+0x2e4>)
 8003806:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003808:	f003 0301 	and.w	r3, r3, #1
 800380c:	60bb      	str	r3, [r7, #8]
 800380e:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2U];
 8003810:	4a56      	ldr	r2, [pc, #344]	; (800396c <HAL_GPIO_Init+0x2e8>)
 8003812:	697b      	ldr	r3, [r7, #20]
 8003814:	089b      	lsrs	r3, r3, #2
 8003816:	3302      	adds	r3, #2
 8003818:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800381c:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 800381e:	697b      	ldr	r3, [r7, #20]
 8003820:	f003 0303 	and.w	r3, r3, #3
 8003824:	009b      	lsls	r3, r3, #2
 8003826:	220f      	movs	r2, #15
 8003828:	fa02 f303 	lsl.w	r3, r2, r3
 800382c:	43db      	mvns	r3, r3
 800382e:	693a      	ldr	r2, [r7, #16]
 8003830:	4013      	ands	r3, r2
 8003832:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8003834:	687b      	ldr	r3, [r7, #4]
 8003836:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 800383a:	d01f      	beq.n	800387c <HAL_GPIO_Init+0x1f8>
 800383c:	687b      	ldr	r3, [r7, #4]
 800383e:	4a4c      	ldr	r2, [pc, #304]	; (8003970 <HAL_GPIO_Init+0x2ec>)
 8003840:	4293      	cmp	r3, r2
 8003842:	d019      	beq.n	8003878 <HAL_GPIO_Init+0x1f4>
 8003844:	687b      	ldr	r3, [r7, #4]
 8003846:	4a4b      	ldr	r2, [pc, #300]	; (8003974 <HAL_GPIO_Init+0x2f0>)
 8003848:	4293      	cmp	r3, r2
 800384a:	d013      	beq.n	8003874 <HAL_GPIO_Init+0x1f0>
 800384c:	687b      	ldr	r3, [r7, #4]
 800384e:	4a4a      	ldr	r2, [pc, #296]	; (8003978 <HAL_GPIO_Init+0x2f4>)
 8003850:	4293      	cmp	r3, r2
 8003852:	d00d      	beq.n	8003870 <HAL_GPIO_Init+0x1ec>
 8003854:	687b      	ldr	r3, [r7, #4]
 8003856:	4a49      	ldr	r2, [pc, #292]	; (800397c <HAL_GPIO_Init+0x2f8>)
 8003858:	4293      	cmp	r3, r2
 800385a:	d007      	beq.n	800386c <HAL_GPIO_Init+0x1e8>
 800385c:	687b      	ldr	r3, [r7, #4]
 800385e:	4a48      	ldr	r2, [pc, #288]	; (8003980 <HAL_GPIO_Init+0x2fc>)
 8003860:	4293      	cmp	r3, r2
 8003862:	d101      	bne.n	8003868 <HAL_GPIO_Init+0x1e4>
 8003864:	2305      	movs	r3, #5
 8003866:	e00a      	b.n	800387e <HAL_GPIO_Init+0x1fa>
 8003868:	2306      	movs	r3, #6
 800386a:	e008      	b.n	800387e <HAL_GPIO_Init+0x1fa>
 800386c:	2304      	movs	r3, #4
 800386e:	e006      	b.n	800387e <HAL_GPIO_Init+0x1fa>
 8003870:	2303      	movs	r3, #3
 8003872:	e004      	b.n	800387e <HAL_GPIO_Init+0x1fa>
 8003874:	2302      	movs	r3, #2
 8003876:	e002      	b.n	800387e <HAL_GPIO_Init+0x1fa>
 8003878:	2301      	movs	r3, #1
 800387a:	e000      	b.n	800387e <HAL_GPIO_Init+0x1fa>
 800387c:	2300      	movs	r3, #0
 800387e:	697a      	ldr	r2, [r7, #20]
 8003880:	f002 0203 	and.w	r2, r2, #3
 8003884:	0092      	lsls	r2, r2, #2
 8003886:	4093      	lsls	r3, r2
 8003888:	693a      	ldr	r2, [r7, #16]
 800388a:	4313      	orrs	r3, r2
 800388c:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800388e:	4937      	ldr	r1, [pc, #220]	; (800396c <HAL_GPIO_Init+0x2e8>)
 8003890:	697b      	ldr	r3, [r7, #20]
 8003892:	089b      	lsrs	r3, r3, #2
 8003894:	3302      	adds	r3, #2
 8003896:	693a      	ldr	r2, [r7, #16]
 8003898:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 800389c:	4b39      	ldr	r3, [pc, #228]	; (8003984 <HAL_GPIO_Init+0x300>)
 800389e:	681b      	ldr	r3, [r3, #0]
 80038a0:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80038a2:	68fb      	ldr	r3, [r7, #12]
 80038a4:	43db      	mvns	r3, r3
 80038a6:	693a      	ldr	r2, [r7, #16]
 80038a8:	4013      	ands	r3, r2
 80038aa:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80038ac:	683b      	ldr	r3, [r7, #0]
 80038ae:	685b      	ldr	r3, [r3, #4]
 80038b0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80038b4:	2b00      	cmp	r3, #0
 80038b6:	d003      	beq.n	80038c0 <HAL_GPIO_Init+0x23c>
        {
          temp |= iocurrent;
 80038b8:	693a      	ldr	r2, [r7, #16]
 80038ba:	68fb      	ldr	r3, [r7, #12]
 80038bc:	4313      	orrs	r3, r2
 80038be:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 80038c0:	4a30      	ldr	r2, [pc, #192]	; (8003984 <HAL_GPIO_Init+0x300>)
 80038c2:	693b      	ldr	r3, [r7, #16]
 80038c4:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR1;
 80038c6:	4b2f      	ldr	r3, [pc, #188]	; (8003984 <HAL_GPIO_Init+0x300>)
 80038c8:	685b      	ldr	r3, [r3, #4]
 80038ca:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80038cc:	68fb      	ldr	r3, [r7, #12]
 80038ce:	43db      	mvns	r3, r3
 80038d0:	693a      	ldr	r2, [r7, #16]
 80038d2:	4013      	ands	r3, r2
 80038d4:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80038d6:	683b      	ldr	r3, [r7, #0]
 80038d8:	685b      	ldr	r3, [r3, #4]
 80038da:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80038de:	2b00      	cmp	r3, #0
 80038e0:	d003      	beq.n	80038ea <HAL_GPIO_Init+0x266>
        {
          temp |= iocurrent;
 80038e2:	693a      	ldr	r2, [r7, #16]
 80038e4:	68fb      	ldr	r3, [r7, #12]
 80038e6:	4313      	orrs	r3, r2
 80038e8:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 80038ea:	4a26      	ldr	r2, [pc, #152]	; (8003984 <HAL_GPIO_Init+0x300>)
 80038ec:	693b      	ldr	r3, [r7, #16]
 80038ee:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80038f0:	4b24      	ldr	r3, [pc, #144]	; (8003984 <HAL_GPIO_Init+0x300>)
 80038f2:	689b      	ldr	r3, [r3, #8]
 80038f4:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80038f6:	68fb      	ldr	r3, [r7, #12]
 80038f8:	43db      	mvns	r3, r3
 80038fa:	693a      	ldr	r2, [r7, #16]
 80038fc:	4013      	ands	r3, r2
 80038fe:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8003900:	683b      	ldr	r3, [r7, #0]
 8003902:	685b      	ldr	r3, [r3, #4]
 8003904:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003908:	2b00      	cmp	r3, #0
 800390a:	d003      	beq.n	8003914 <HAL_GPIO_Init+0x290>
        {
          temp |= iocurrent;
 800390c:	693a      	ldr	r2, [r7, #16]
 800390e:	68fb      	ldr	r3, [r7, #12]
 8003910:	4313      	orrs	r3, r2
 8003912:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8003914:	4a1b      	ldr	r2, [pc, #108]	; (8003984 <HAL_GPIO_Init+0x300>)
 8003916:	693b      	ldr	r3, [r7, #16]
 8003918:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 800391a:	4b1a      	ldr	r3, [pc, #104]	; (8003984 <HAL_GPIO_Init+0x300>)
 800391c:	68db      	ldr	r3, [r3, #12]
 800391e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003920:	68fb      	ldr	r3, [r7, #12]
 8003922:	43db      	mvns	r3, r3
 8003924:	693a      	ldr	r2, [r7, #16]
 8003926:	4013      	ands	r3, r2
 8003928:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 800392a:	683b      	ldr	r3, [r7, #0]
 800392c:	685b      	ldr	r3, [r3, #4]
 800392e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003932:	2b00      	cmp	r3, #0
 8003934:	d003      	beq.n	800393e <HAL_GPIO_Init+0x2ba>
        {
          temp |= iocurrent;
 8003936:	693a      	ldr	r2, [r7, #16]
 8003938:	68fb      	ldr	r3, [r7, #12]
 800393a:	4313      	orrs	r3, r2
 800393c:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 800393e:	4a11      	ldr	r2, [pc, #68]	; (8003984 <HAL_GPIO_Init+0x300>)
 8003940:	693b      	ldr	r3, [r7, #16]
 8003942:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 8003944:	697b      	ldr	r3, [r7, #20]
 8003946:	3301      	adds	r3, #1
 8003948:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0U)
 800394a:	683b      	ldr	r3, [r7, #0]
 800394c:	681a      	ldr	r2, [r3, #0]
 800394e:	697b      	ldr	r3, [r7, #20]
 8003950:	fa22 f303 	lsr.w	r3, r2, r3
 8003954:	2b00      	cmp	r3, #0
 8003956:	f47f ae9d 	bne.w	8003694 <HAL_GPIO_Init+0x10>
  }
}
 800395a:	bf00      	nop
 800395c:	371c      	adds	r7, #28
 800395e:	46bd      	mov	sp, r7
 8003960:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003964:	4770      	bx	lr
 8003966:	bf00      	nop
 8003968:	40021000 	.word	0x40021000
 800396c:	40010000 	.word	0x40010000
 8003970:	48000400 	.word	0x48000400
 8003974:	48000800 	.word	0x48000800
 8003978:	48000c00 	.word	0x48000c00
 800397c:	48001000 	.word	0x48001000
 8003980:	48001400 	.word	0x48001400
 8003984:	40010400 	.word	0x40010400

08003988 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003988:	b480      	push	{r7}
 800398a:	b083      	sub	sp, #12
 800398c:	af00      	add	r7, sp, #0
 800398e:	6078      	str	r0, [r7, #4]
 8003990:	460b      	mov	r3, r1
 8003992:	807b      	strh	r3, [r7, #2]
 8003994:	4613      	mov	r3, r2
 8003996:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8003998:	787b      	ldrb	r3, [r7, #1]
 800399a:	2b00      	cmp	r3, #0
 800399c:	d003      	beq.n	80039a6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800399e:	887a      	ldrh	r2, [r7, #2]
 80039a0:	687b      	ldr	r3, [r7, #4]
 80039a2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80039a4:	e002      	b.n	80039ac <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80039a6:	887a      	ldrh	r2, [r7, #2]
 80039a8:	687b      	ldr	r3, [r7, #4]
 80039aa:	629a      	str	r2, [r3, #40]	; 0x28
}
 80039ac:	bf00      	nop
 80039ae:	370c      	adds	r7, #12
 80039b0:	46bd      	mov	sp, r7
 80039b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039b6:	4770      	bx	lr

080039b8 <HAL_GPIO_TogglePin>:
  * @param  GPIO_Pin specifies the pin to be toggled.
  *         This parameter can be any combination of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 80039b8:	b480      	push	{r7}
 80039ba:	b083      	sub	sp, #12
 80039bc:	af00      	add	r7, sp, #0
 80039be:	6078      	str	r0, [r7, #4]
 80039c0:	460b      	mov	r3, r1
 80039c2:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->ODR & GPIO_Pin) != 0x00u)
 80039c4:	687b      	ldr	r3, [r7, #4]
 80039c6:	695a      	ldr	r2, [r3, #20]
 80039c8:	887b      	ldrh	r3, [r7, #2]
 80039ca:	4013      	ands	r3, r2
 80039cc:	2b00      	cmp	r3, #0
 80039ce:	d003      	beq.n	80039d8 <HAL_GPIO_TogglePin+0x20>
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80039d0:	887a      	ldrh	r2, [r7, #2]
 80039d2:	687b      	ldr	r3, [r7, #4]
 80039d4:	629a      	str	r2, [r3, #40]	; 0x28
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
  }
}
 80039d6:	e002      	b.n	80039de <HAL_GPIO_TogglePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80039d8:	887a      	ldrh	r2, [r7, #2]
 80039da:	687b      	ldr	r3, [r7, #4]
 80039dc:	619a      	str	r2, [r3, #24]
}
 80039de:	bf00      	nop
 80039e0:	370c      	adds	r7, #12
 80039e2:	46bd      	mov	sp, r7
 80039e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039e8:	4770      	bx	lr
	...

080039ec <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80039ec:	b580      	push	{r7, lr}
 80039ee:	b082      	sub	sp, #8
 80039f0:	af00      	add	r7, sp, #0
 80039f2:	4603      	mov	r3, r0
 80039f4:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 80039f6:	4b08      	ldr	r3, [pc, #32]	; (8003a18 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80039f8:	695a      	ldr	r2, [r3, #20]
 80039fa:	88fb      	ldrh	r3, [r7, #6]
 80039fc:	4013      	ands	r3, r2
 80039fe:	2b00      	cmp	r3, #0
 8003a00:	d006      	beq.n	8003a10 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8003a02:	4a05      	ldr	r2, [pc, #20]	; (8003a18 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8003a04:	88fb      	ldrh	r3, [r7, #6]
 8003a06:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8003a08:	88fb      	ldrh	r3, [r7, #6]
 8003a0a:	4618      	mov	r0, r3
 8003a0c:	f000 f806 	bl	8003a1c <HAL_GPIO_EXTI_Callback>
  }
}
 8003a10:	bf00      	nop
 8003a12:	3708      	adds	r7, #8
 8003a14:	46bd      	mov	sp, r7
 8003a16:	bd80      	pop	{r7, pc}
 8003a18:	40010400 	.word	0x40010400

08003a1c <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callback.
  * @param  GPIO_Pin: Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8003a1c:	b480      	push	{r7}
 8003a1e:	b083      	sub	sp, #12
 8003a20:	af00      	add	r7, sp, #0
 8003a22:	4603      	mov	r3, r0
 8003a24:	80fb      	strh	r3, [r7, #6]
  UNUSED(GPIO_Pin);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 8003a26:	bf00      	nop
 8003a28:	370c      	adds	r7, #12
 8003a2a:	46bd      	mov	sp, r7
 8003a2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a30:	4770      	bx	lr
	...

08003a34 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8003a34:	b480      	push	{r7}
 8003a36:	b085      	sub	sp, #20
 8003a38:	af00      	add	r7, sp, #0
 8003a3a:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 8003a3c:	687b      	ldr	r3, [r7, #4]
 8003a3e:	2b00      	cmp	r3, #0
 8003a40:	d141      	bne.n	8003ac6 <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8003a42:	4b4b      	ldr	r3, [pc, #300]	; (8003b70 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003a44:	681b      	ldr	r3, [r3, #0]
 8003a46:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8003a4a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003a4e:	d131      	bne.n	8003ab4 <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8003a50:	4b47      	ldr	r3, [pc, #284]	; (8003b70 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003a52:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003a56:	4a46      	ldr	r2, [pc, #280]	; (8003b70 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003a58:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003a5c:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8003a60:	4b43      	ldr	r3, [pc, #268]	; (8003b70 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003a62:	681b      	ldr	r3, [r3, #0]
 8003a64:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8003a68:	4a41      	ldr	r2, [pc, #260]	; (8003b70 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003a6a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8003a6e:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8003a70:	4b40      	ldr	r3, [pc, #256]	; (8003b74 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8003a72:	681b      	ldr	r3, [r3, #0]
 8003a74:	2232      	movs	r2, #50	; 0x32
 8003a76:	fb02 f303 	mul.w	r3, r2, r3
 8003a7a:	4a3f      	ldr	r2, [pc, #252]	; (8003b78 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8003a7c:	fba2 2303 	umull	r2, r3, r2, r3
 8003a80:	0c9b      	lsrs	r3, r3, #18
 8003a82:	3301      	adds	r3, #1
 8003a84:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8003a86:	e002      	b.n	8003a8e <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 8003a88:	68fb      	ldr	r3, [r7, #12]
 8003a8a:	3b01      	subs	r3, #1
 8003a8c:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8003a8e:	4b38      	ldr	r3, [pc, #224]	; (8003b70 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003a90:	695b      	ldr	r3, [r3, #20]
 8003a92:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003a96:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003a9a:	d102      	bne.n	8003aa2 <HAL_PWREx_ControlVoltageScaling+0x6e>
 8003a9c:	68fb      	ldr	r3, [r7, #12]
 8003a9e:	2b00      	cmp	r3, #0
 8003aa0:	d1f2      	bne.n	8003a88 <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8003aa2:	4b33      	ldr	r3, [pc, #204]	; (8003b70 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003aa4:	695b      	ldr	r3, [r3, #20]
 8003aa6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003aaa:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003aae:	d158      	bne.n	8003b62 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8003ab0:	2303      	movs	r3, #3
 8003ab2:	e057      	b.n	8003b64 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8003ab4:	4b2e      	ldr	r3, [pc, #184]	; (8003b70 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003ab6:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003aba:	4a2d      	ldr	r2, [pc, #180]	; (8003b70 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003abc:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003ac0:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 8003ac4:	e04d      	b.n	8003b62 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8003ac6:	687b      	ldr	r3, [r7, #4]
 8003ac8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003acc:	d141      	bne.n	8003b52 <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8003ace:	4b28      	ldr	r3, [pc, #160]	; (8003b70 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003ad0:	681b      	ldr	r3, [r3, #0]
 8003ad2:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8003ad6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003ada:	d131      	bne.n	8003b40 <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8003adc:	4b24      	ldr	r3, [pc, #144]	; (8003b70 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003ade:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003ae2:	4a23      	ldr	r2, [pc, #140]	; (8003b70 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003ae4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003ae8:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8003aec:	4b20      	ldr	r3, [pc, #128]	; (8003b70 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003aee:	681b      	ldr	r3, [r3, #0]
 8003af0:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8003af4:	4a1e      	ldr	r2, [pc, #120]	; (8003b70 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003af6:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8003afa:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8003afc:	4b1d      	ldr	r3, [pc, #116]	; (8003b74 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8003afe:	681b      	ldr	r3, [r3, #0]
 8003b00:	2232      	movs	r2, #50	; 0x32
 8003b02:	fb02 f303 	mul.w	r3, r2, r3
 8003b06:	4a1c      	ldr	r2, [pc, #112]	; (8003b78 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8003b08:	fba2 2303 	umull	r2, r3, r2, r3
 8003b0c:	0c9b      	lsrs	r3, r3, #18
 8003b0e:	3301      	adds	r3, #1
 8003b10:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8003b12:	e002      	b.n	8003b1a <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 8003b14:	68fb      	ldr	r3, [r7, #12]
 8003b16:	3b01      	subs	r3, #1
 8003b18:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8003b1a:	4b15      	ldr	r3, [pc, #84]	; (8003b70 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003b1c:	695b      	ldr	r3, [r3, #20]
 8003b1e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003b22:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003b26:	d102      	bne.n	8003b2e <HAL_PWREx_ControlVoltageScaling+0xfa>
 8003b28:	68fb      	ldr	r3, [r7, #12]
 8003b2a:	2b00      	cmp	r3, #0
 8003b2c:	d1f2      	bne.n	8003b14 <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8003b2e:	4b10      	ldr	r3, [pc, #64]	; (8003b70 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003b30:	695b      	ldr	r3, [r3, #20]
 8003b32:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003b36:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003b3a:	d112      	bne.n	8003b62 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8003b3c:	2303      	movs	r3, #3
 8003b3e:	e011      	b.n	8003b64 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8003b40:	4b0b      	ldr	r3, [pc, #44]	; (8003b70 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003b42:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003b46:	4a0a      	ldr	r2, [pc, #40]	; (8003b70 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003b48:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003b4c:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 8003b50:	e007      	b.n	8003b62 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8003b52:	4b07      	ldr	r3, [pc, #28]	; (8003b70 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003b54:	681b      	ldr	r3, [r3, #0]
 8003b56:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8003b5a:	4a05      	ldr	r2, [pc, #20]	; (8003b70 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003b5c:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8003b60:	6013      	str	r3, [r2, #0]
    /* No need to wait for VOSF to be cleared for this transition */
    /* PWR_CR5_R1MODE bit setting has no effect in Range 2        */
  }

  return HAL_OK;
 8003b62:	2300      	movs	r3, #0
}
 8003b64:	4618      	mov	r0, r3
 8003b66:	3714      	adds	r7, #20
 8003b68:	46bd      	mov	sp, r7
 8003b6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b6e:	4770      	bx	lr
 8003b70:	40007000 	.word	0x40007000
 8003b74:	20000004 	.word	0x20000004
 8003b78:	431bde83 	.word	0x431bde83

08003b7c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003b7c:	b580      	push	{r7, lr}
 8003b7e:	b088      	sub	sp, #32
 8003b80:	af00      	add	r7, sp, #0
 8003b82:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8003b84:	687b      	ldr	r3, [r7, #4]
 8003b86:	2b00      	cmp	r3, #0
 8003b88:	d101      	bne.n	8003b8e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003b8a:	2301      	movs	r3, #1
 8003b8c:	e308      	b.n	80041a0 <HAL_RCC_OscConfig+0x624>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003b8e:	687b      	ldr	r3, [r7, #4]
 8003b90:	681b      	ldr	r3, [r3, #0]
 8003b92:	f003 0301 	and.w	r3, r3, #1
 8003b96:	2b00      	cmp	r3, #0
 8003b98:	d075      	beq.n	8003c86 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003b9a:	4ba3      	ldr	r3, [pc, #652]	; (8003e28 <HAL_RCC_OscConfig+0x2ac>)
 8003b9c:	689b      	ldr	r3, [r3, #8]
 8003b9e:	f003 030c 	and.w	r3, r3, #12
 8003ba2:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8003ba4:	4ba0      	ldr	r3, [pc, #640]	; (8003e28 <HAL_RCC_OscConfig+0x2ac>)
 8003ba6:	68db      	ldr	r3, [r3, #12]
 8003ba8:	f003 0303 	and.w	r3, r3, #3
 8003bac:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 8003bae:	69bb      	ldr	r3, [r7, #24]
 8003bb0:	2b0c      	cmp	r3, #12
 8003bb2:	d102      	bne.n	8003bba <HAL_RCC_OscConfig+0x3e>
 8003bb4:	697b      	ldr	r3, [r7, #20]
 8003bb6:	2b03      	cmp	r3, #3
 8003bb8:	d002      	beq.n	8003bc0 <HAL_RCC_OscConfig+0x44>
 8003bba:	69bb      	ldr	r3, [r7, #24]
 8003bbc:	2b08      	cmp	r3, #8
 8003bbe:	d10b      	bne.n	8003bd8 <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003bc0:	4b99      	ldr	r3, [pc, #612]	; (8003e28 <HAL_RCC_OscConfig+0x2ac>)
 8003bc2:	681b      	ldr	r3, [r3, #0]
 8003bc4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003bc8:	2b00      	cmp	r3, #0
 8003bca:	d05b      	beq.n	8003c84 <HAL_RCC_OscConfig+0x108>
 8003bcc:	687b      	ldr	r3, [r7, #4]
 8003bce:	685b      	ldr	r3, [r3, #4]
 8003bd0:	2b00      	cmp	r3, #0
 8003bd2:	d157      	bne.n	8003c84 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8003bd4:	2301      	movs	r3, #1
 8003bd6:	e2e3      	b.n	80041a0 <HAL_RCC_OscConfig+0x624>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003bd8:	687b      	ldr	r3, [r7, #4]
 8003bda:	685b      	ldr	r3, [r3, #4]
 8003bdc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003be0:	d106      	bne.n	8003bf0 <HAL_RCC_OscConfig+0x74>
 8003be2:	4b91      	ldr	r3, [pc, #580]	; (8003e28 <HAL_RCC_OscConfig+0x2ac>)
 8003be4:	681b      	ldr	r3, [r3, #0]
 8003be6:	4a90      	ldr	r2, [pc, #576]	; (8003e28 <HAL_RCC_OscConfig+0x2ac>)
 8003be8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003bec:	6013      	str	r3, [r2, #0]
 8003bee:	e01d      	b.n	8003c2c <HAL_RCC_OscConfig+0xb0>
 8003bf0:	687b      	ldr	r3, [r7, #4]
 8003bf2:	685b      	ldr	r3, [r3, #4]
 8003bf4:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003bf8:	d10c      	bne.n	8003c14 <HAL_RCC_OscConfig+0x98>
 8003bfa:	4b8b      	ldr	r3, [pc, #556]	; (8003e28 <HAL_RCC_OscConfig+0x2ac>)
 8003bfc:	681b      	ldr	r3, [r3, #0]
 8003bfe:	4a8a      	ldr	r2, [pc, #552]	; (8003e28 <HAL_RCC_OscConfig+0x2ac>)
 8003c00:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003c04:	6013      	str	r3, [r2, #0]
 8003c06:	4b88      	ldr	r3, [pc, #544]	; (8003e28 <HAL_RCC_OscConfig+0x2ac>)
 8003c08:	681b      	ldr	r3, [r3, #0]
 8003c0a:	4a87      	ldr	r2, [pc, #540]	; (8003e28 <HAL_RCC_OscConfig+0x2ac>)
 8003c0c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003c10:	6013      	str	r3, [r2, #0]
 8003c12:	e00b      	b.n	8003c2c <HAL_RCC_OscConfig+0xb0>
 8003c14:	4b84      	ldr	r3, [pc, #528]	; (8003e28 <HAL_RCC_OscConfig+0x2ac>)
 8003c16:	681b      	ldr	r3, [r3, #0]
 8003c18:	4a83      	ldr	r2, [pc, #524]	; (8003e28 <HAL_RCC_OscConfig+0x2ac>)
 8003c1a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003c1e:	6013      	str	r3, [r2, #0]
 8003c20:	4b81      	ldr	r3, [pc, #516]	; (8003e28 <HAL_RCC_OscConfig+0x2ac>)
 8003c22:	681b      	ldr	r3, [r3, #0]
 8003c24:	4a80      	ldr	r2, [pc, #512]	; (8003e28 <HAL_RCC_OscConfig+0x2ac>)
 8003c26:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003c2a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003c2c:	687b      	ldr	r3, [r7, #4]
 8003c2e:	685b      	ldr	r3, [r3, #4]
 8003c30:	2b00      	cmp	r3, #0
 8003c32:	d013      	beq.n	8003c5c <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003c34:	f7fd fc6e 	bl	8001514 <HAL_GetTick>
 8003c38:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003c3a:	e008      	b.n	8003c4e <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003c3c:	f7fd fc6a 	bl	8001514 <HAL_GetTick>
 8003c40:	4602      	mov	r2, r0
 8003c42:	693b      	ldr	r3, [r7, #16]
 8003c44:	1ad3      	subs	r3, r2, r3
 8003c46:	2b64      	cmp	r3, #100	; 0x64
 8003c48:	d901      	bls.n	8003c4e <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8003c4a:	2303      	movs	r3, #3
 8003c4c:	e2a8      	b.n	80041a0 <HAL_RCC_OscConfig+0x624>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003c4e:	4b76      	ldr	r3, [pc, #472]	; (8003e28 <HAL_RCC_OscConfig+0x2ac>)
 8003c50:	681b      	ldr	r3, [r3, #0]
 8003c52:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003c56:	2b00      	cmp	r3, #0
 8003c58:	d0f0      	beq.n	8003c3c <HAL_RCC_OscConfig+0xc0>
 8003c5a:	e014      	b.n	8003c86 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003c5c:	f7fd fc5a 	bl	8001514 <HAL_GetTick>
 8003c60:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8003c62:	e008      	b.n	8003c76 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003c64:	f7fd fc56 	bl	8001514 <HAL_GetTick>
 8003c68:	4602      	mov	r2, r0
 8003c6a:	693b      	ldr	r3, [r7, #16]
 8003c6c:	1ad3      	subs	r3, r2, r3
 8003c6e:	2b64      	cmp	r3, #100	; 0x64
 8003c70:	d901      	bls.n	8003c76 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8003c72:	2303      	movs	r3, #3
 8003c74:	e294      	b.n	80041a0 <HAL_RCC_OscConfig+0x624>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8003c76:	4b6c      	ldr	r3, [pc, #432]	; (8003e28 <HAL_RCC_OscConfig+0x2ac>)
 8003c78:	681b      	ldr	r3, [r3, #0]
 8003c7a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003c7e:	2b00      	cmp	r3, #0
 8003c80:	d1f0      	bne.n	8003c64 <HAL_RCC_OscConfig+0xe8>
 8003c82:	e000      	b.n	8003c86 <HAL_RCC_OscConfig+0x10a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003c84:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003c86:	687b      	ldr	r3, [r7, #4]
 8003c88:	681b      	ldr	r3, [r3, #0]
 8003c8a:	f003 0302 	and.w	r3, r3, #2
 8003c8e:	2b00      	cmp	r3, #0
 8003c90:	d075      	beq.n	8003d7e <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003c92:	4b65      	ldr	r3, [pc, #404]	; (8003e28 <HAL_RCC_OscConfig+0x2ac>)
 8003c94:	689b      	ldr	r3, [r3, #8]
 8003c96:	f003 030c 	and.w	r3, r3, #12
 8003c9a:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8003c9c:	4b62      	ldr	r3, [pc, #392]	; (8003e28 <HAL_RCC_OscConfig+0x2ac>)
 8003c9e:	68db      	ldr	r3, [r3, #12]
 8003ca0:	f003 0303 	and.w	r3, r3, #3
 8003ca4:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 8003ca6:	69bb      	ldr	r3, [r7, #24]
 8003ca8:	2b0c      	cmp	r3, #12
 8003caa:	d102      	bne.n	8003cb2 <HAL_RCC_OscConfig+0x136>
 8003cac:	697b      	ldr	r3, [r7, #20]
 8003cae:	2b02      	cmp	r3, #2
 8003cb0:	d002      	beq.n	8003cb8 <HAL_RCC_OscConfig+0x13c>
 8003cb2:	69bb      	ldr	r3, [r7, #24]
 8003cb4:	2b04      	cmp	r3, #4
 8003cb6:	d11f      	bne.n	8003cf8 <HAL_RCC_OscConfig+0x17c>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003cb8:	4b5b      	ldr	r3, [pc, #364]	; (8003e28 <HAL_RCC_OscConfig+0x2ac>)
 8003cba:	681b      	ldr	r3, [r3, #0]
 8003cbc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003cc0:	2b00      	cmp	r3, #0
 8003cc2:	d005      	beq.n	8003cd0 <HAL_RCC_OscConfig+0x154>
 8003cc4:	687b      	ldr	r3, [r7, #4]
 8003cc6:	68db      	ldr	r3, [r3, #12]
 8003cc8:	2b00      	cmp	r3, #0
 8003cca:	d101      	bne.n	8003cd0 <HAL_RCC_OscConfig+0x154>
      {
        return HAL_ERROR;
 8003ccc:	2301      	movs	r3, #1
 8003cce:	e267      	b.n	80041a0 <HAL_RCC_OscConfig+0x624>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003cd0:	4b55      	ldr	r3, [pc, #340]	; (8003e28 <HAL_RCC_OscConfig+0x2ac>)
 8003cd2:	685b      	ldr	r3, [r3, #4]
 8003cd4:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8003cd8:	687b      	ldr	r3, [r7, #4]
 8003cda:	691b      	ldr	r3, [r3, #16]
 8003cdc:	061b      	lsls	r3, r3, #24
 8003cde:	4952      	ldr	r1, [pc, #328]	; (8003e28 <HAL_RCC_OscConfig+0x2ac>)
 8003ce0:	4313      	orrs	r3, r2
 8003ce2:	604b      	str	r3, [r1, #4]

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8003ce4:	4b51      	ldr	r3, [pc, #324]	; (8003e2c <HAL_RCC_OscConfig+0x2b0>)
 8003ce6:	681b      	ldr	r3, [r3, #0]
 8003ce8:	4618      	mov	r0, r3
 8003cea:	f7fd fbc7 	bl	800147c <HAL_InitTick>
 8003cee:	4603      	mov	r3, r0
 8003cf0:	2b00      	cmp	r3, #0
 8003cf2:	d043      	beq.n	8003d7c <HAL_RCC_OscConfig+0x200>
        {
          return HAL_ERROR;
 8003cf4:	2301      	movs	r3, #1
 8003cf6:	e253      	b.n	80041a0 <HAL_RCC_OscConfig+0x624>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8003cf8:	687b      	ldr	r3, [r7, #4]
 8003cfa:	68db      	ldr	r3, [r3, #12]
 8003cfc:	2b00      	cmp	r3, #0
 8003cfe:	d023      	beq.n	8003d48 <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003d00:	4b49      	ldr	r3, [pc, #292]	; (8003e28 <HAL_RCC_OscConfig+0x2ac>)
 8003d02:	681b      	ldr	r3, [r3, #0]
 8003d04:	4a48      	ldr	r2, [pc, #288]	; (8003e28 <HAL_RCC_OscConfig+0x2ac>)
 8003d06:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003d0a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003d0c:	f7fd fc02 	bl	8001514 <HAL_GetTick>
 8003d10:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003d12:	e008      	b.n	8003d26 <HAL_RCC_OscConfig+0x1aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003d14:	f7fd fbfe 	bl	8001514 <HAL_GetTick>
 8003d18:	4602      	mov	r2, r0
 8003d1a:	693b      	ldr	r3, [r7, #16]
 8003d1c:	1ad3      	subs	r3, r2, r3
 8003d1e:	2b02      	cmp	r3, #2
 8003d20:	d901      	bls.n	8003d26 <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 8003d22:	2303      	movs	r3, #3
 8003d24:	e23c      	b.n	80041a0 <HAL_RCC_OscConfig+0x624>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003d26:	4b40      	ldr	r3, [pc, #256]	; (8003e28 <HAL_RCC_OscConfig+0x2ac>)
 8003d28:	681b      	ldr	r3, [r3, #0]
 8003d2a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003d2e:	2b00      	cmp	r3, #0
 8003d30:	d0f0      	beq.n	8003d14 <HAL_RCC_OscConfig+0x198>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003d32:	4b3d      	ldr	r3, [pc, #244]	; (8003e28 <HAL_RCC_OscConfig+0x2ac>)
 8003d34:	685b      	ldr	r3, [r3, #4]
 8003d36:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8003d3a:	687b      	ldr	r3, [r7, #4]
 8003d3c:	691b      	ldr	r3, [r3, #16]
 8003d3e:	061b      	lsls	r3, r3, #24
 8003d40:	4939      	ldr	r1, [pc, #228]	; (8003e28 <HAL_RCC_OscConfig+0x2ac>)
 8003d42:	4313      	orrs	r3, r2
 8003d44:	604b      	str	r3, [r1, #4]
 8003d46:	e01a      	b.n	8003d7e <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003d48:	4b37      	ldr	r3, [pc, #220]	; (8003e28 <HAL_RCC_OscConfig+0x2ac>)
 8003d4a:	681b      	ldr	r3, [r3, #0]
 8003d4c:	4a36      	ldr	r2, [pc, #216]	; (8003e28 <HAL_RCC_OscConfig+0x2ac>)
 8003d4e:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003d52:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003d54:	f7fd fbde 	bl	8001514 <HAL_GetTick>
 8003d58:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8003d5a:	e008      	b.n	8003d6e <HAL_RCC_OscConfig+0x1f2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003d5c:	f7fd fbda 	bl	8001514 <HAL_GetTick>
 8003d60:	4602      	mov	r2, r0
 8003d62:	693b      	ldr	r3, [r7, #16]
 8003d64:	1ad3      	subs	r3, r2, r3
 8003d66:	2b02      	cmp	r3, #2
 8003d68:	d901      	bls.n	8003d6e <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 8003d6a:	2303      	movs	r3, #3
 8003d6c:	e218      	b.n	80041a0 <HAL_RCC_OscConfig+0x624>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8003d6e:	4b2e      	ldr	r3, [pc, #184]	; (8003e28 <HAL_RCC_OscConfig+0x2ac>)
 8003d70:	681b      	ldr	r3, [r3, #0]
 8003d72:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003d76:	2b00      	cmp	r3, #0
 8003d78:	d1f0      	bne.n	8003d5c <HAL_RCC_OscConfig+0x1e0>
 8003d7a:	e000      	b.n	8003d7e <HAL_RCC_OscConfig+0x202>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003d7c:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003d7e:	687b      	ldr	r3, [r7, #4]
 8003d80:	681b      	ldr	r3, [r3, #0]
 8003d82:	f003 0308 	and.w	r3, r3, #8
 8003d86:	2b00      	cmp	r3, #0
 8003d88:	d03c      	beq.n	8003e04 <HAL_RCC_OscConfig+0x288>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8003d8a:	687b      	ldr	r3, [r7, #4]
 8003d8c:	695b      	ldr	r3, [r3, #20]
 8003d8e:	2b00      	cmp	r3, #0
 8003d90:	d01c      	beq.n	8003dcc <HAL_RCC_OscConfig+0x250>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003d92:	4b25      	ldr	r3, [pc, #148]	; (8003e28 <HAL_RCC_OscConfig+0x2ac>)
 8003d94:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003d98:	4a23      	ldr	r2, [pc, #140]	; (8003e28 <HAL_RCC_OscConfig+0x2ac>)
 8003d9a:	f043 0301 	orr.w	r3, r3, #1
 8003d9e:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003da2:	f7fd fbb7 	bl	8001514 <HAL_GetTick>
 8003da6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8003da8:	e008      	b.n	8003dbc <HAL_RCC_OscConfig+0x240>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003daa:	f7fd fbb3 	bl	8001514 <HAL_GetTick>
 8003dae:	4602      	mov	r2, r0
 8003db0:	693b      	ldr	r3, [r7, #16]
 8003db2:	1ad3      	subs	r3, r2, r3
 8003db4:	2b02      	cmp	r3, #2
 8003db6:	d901      	bls.n	8003dbc <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8003db8:	2303      	movs	r3, #3
 8003dba:	e1f1      	b.n	80041a0 <HAL_RCC_OscConfig+0x624>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8003dbc:	4b1a      	ldr	r3, [pc, #104]	; (8003e28 <HAL_RCC_OscConfig+0x2ac>)
 8003dbe:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003dc2:	f003 0302 	and.w	r3, r3, #2
 8003dc6:	2b00      	cmp	r3, #0
 8003dc8:	d0ef      	beq.n	8003daa <HAL_RCC_OscConfig+0x22e>
 8003dca:	e01b      	b.n	8003e04 <HAL_RCC_OscConfig+0x288>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003dcc:	4b16      	ldr	r3, [pc, #88]	; (8003e28 <HAL_RCC_OscConfig+0x2ac>)
 8003dce:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003dd2:	4a15      	ldr	r2, [pc, #84]	; (8003e28 <HAL_RCC_OscConfig+0x2ac>)
 8003dd4:	f023 0301 	bic.w	r3, r3, #1
 8003dd8:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003ddc:	f7fd fb9a 	bl	8001514 <HAL_GetTick>
 8003de0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8003de2:	e008      	b.n	8003df6 <HAL_RCC_OscConfig+0x27a>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003de4:	f7fd fb96 	bl	8001514 <HAL_GetTick>
 8003de8:	4602      	mov	r2, r0
 8003dea:	693b      	ldr	r3, [r7, #16]
 8003dec:	1ad3      	subs	r3, r2, r3
 8003dee:	2b02      	cmp	r3, #2
 8003df0:	d901      	bls.n	8003df6 <HAL_RCC_OscConfig+0x27a>
        {
          return HAL_TIMEOUT;
 8003df2:	2303      	movs	r3, #3
 8003df4:	e1d4      	b.n	80041a0 <HAL_RCC_OscConfig+0x624>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8003df6:	4b0c      	ldr	r3, [pc, #48]	; (8003e28 <HAL_RCC_OscConfig+0x2ac>)
 8003df8:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003dfc:	f003 0302 	and.w	r3, r3, #2
 8003e00:	2b00      	cmp	r3, #0
 8003e02:	d1ef      	bne.n	8003de4 <HAL_RCC_OscConfig+0x268>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003e04:	687b      	ldr	r3, [r7, #4]
 8003e06:	681b      	ldr	r3, [r3, #0]
 8003e08:	f003 0304 	and.w	r3, r3, #4
 8003e0c:	2b00      	cmp	r3, #0
 8003e0e:	f000 80ab 	beq.w	8003f68 <HAL_RCC_OscConfig+0x3ec>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003e12:	2300      	movs	r3, #0
 8003e14:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain if necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8003e16:	4b04      	ldr	r3, [pc, #16]	; (8003e28 <HAL_RCC_OscConfig+0x2ac>)
 8003e18:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003e1a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003e1e:	2b00      	cmp	r3, #0
 8003e20:	d106      	bne.n	8003e30 <HAL_RCC_OscConfig+0x2b4>
 8003e22:	2301      	movs	r3, #1
 8003e24:	e005      	b.n	8003e32 <HAL_RCC_OscConfig+0x2b6>
 8003e26:	bf00      	nop
 8003e28:	40021000 	.word	0x40021000
 8003e2c:	20000008 	.word	0x20000008
 8003e30:	2300      	movs	r3, #0
 8003e32:	2b00      	cmp	r3, #0
 8003e34:	d00d      	beq.n	8003e52 <HAL_RCC_OscConfig+0x2d6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003e36:	4baf      	ldr	r3, [pc, #700]	; (80040f4 <HAL_RCC_OscConfig+0x578>)
 8003e38:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003e3a:	4aae      	ldr	r2, [pc, #696]	; (80040f4 <HAL_RCC_OscConfig+0x578>)
 8003e3c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003e40:	6593      	str	r3, [r2, #88]	; 0x58
 8003e42:	4bac      	ldr	r3, [pc, #688]	; (80040f4 <HAL_RCC_OscConfig+0x578>)
 8003e44:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003e46:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003e4a:	60fb      	str	r3, [r7, #12]
 8003e4c:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8003e4e:	2301      	movs	r3, #1
 8003e50:	77fb      	strb	r3, [r7, #31]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003e52:	4ba9      	ldr	r3, [pc, #676]	; (80040f8 <HAL_RCC_OscConfig+0x57c>)
 8003e54:	681b      	ldr	r3, [r3, #0]
 8003e56:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003e5a:	2b00      	cmp	r3, #0
 8003e5c:	d118      	bne.n	8003e90 <HAL_RCC_OscConfig+0x314>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003e5e:	4ba6      	ldr	r3, [pc, #664]	; (80040f8 <HAL_RCC_OscConfig+0x57c>)
 8003e60:	681b      	ldr	r3, [r3, #0]
 8003e62:	4aa5      	ldr	r2, [pc, #660]	; (80040f8 <HAL_RCC_OscConfig+0x57c>)
 8003e64:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003e68:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003e6a:	f7fd fb53 	bl	8001514 <HAL_GetTick>
 8003e6e:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003e70:	e008      	b.n	8003e84 <HAL_RCC_OscConfig+0x308>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003e72:	f7fd fb4f 	bl	8001514 <HAL_GetTick>
 8003e76:	4602      	mov	r2, r0
 8003e78:	693b      	ldr	r3, [r7, #16]
 8003e7a:	1ad3      	subs	r3, r2, r3
 8003e7c:	2b02      	cmp	r3, #2
 8003e7e:	d901      	bls.n	8003e84 <HAL_RCC_OscConfig+0x308>
        {
          return HAL_TIMEOUT;
 8003e80:	2303      	movs	r3, #3
 8003e82:	e18d      	b.n	80041a0 <HAL_RCC_OscConfig+0x624>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003e84:	4b9c      	ldr	r3, [pc, #624]	; (80040f8 <HAL_RCC_OscConfig+0x57c>)
 8003e86:	681b      	ldr	r3, [r3, #0]
 8003e88:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003e8c:	2b00      	cmp	r3, #0
 8003e8e:	d0f0      	beq.n	8003e72 <HAL_RCC_OscConfig+0x2f6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003e90:	687b      	ldr	r3, [r7, #4]
 8003e92:	689b      	ldr	r3, [r3, #8]
 8003e94:	2b01      	cmp	r3, #1
 8003e96:	d108      	bne.n	8003eaa <HAL_RCC_OscConfig+0x32e>
 8003e98:	4b96      	ldr	r3, [pc, #600]	; (80040f4 <HAL_RCC_OscConfig+0x578>)
 8003e9a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003e9e:	4a95      	ldr	r2, [pc, #596]	; (80040f4 <HAL_RCC_OscConfig+0x578>)
 8003ea0:	f043 0301 	orr.w	r3, r3, #1
 8003ea4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8003ea8:	e024      	b.n	8003ef4 <HAL_RCC_OscConfig+0x378>
 8003eaa:	687b      	ldr	r3, [r7, #4]
 8003eac:	689b      	ldr	r3, [r3, #8]
 8003eae:	2b05      	cmp	r3, #5
 8003eb0:	d110      	bne.n	8003ed4 <HAL_RCC_OscConfig+0x358>
 8003eb2:	4b90      	ldr	r3, [pc, #576]	; (80040f4 <HAL_RCC_OscConfig+0x578>)
 8003eb4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003eb8:	4a8e      	ldr	r2, [pc, #568]	; (80040f4 <HAL_RCC_OscConfig+0x578>)
 8003eba:	f043 0304 	orr.w	r3, r3, #4
 8003ebe:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8003ec2:	4b8c      	ldr	r3, [pc, #560]	; (80040f4 <HAL_RCC_OscConfig+0x578>)
 8003ec4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003ec8:	4a8a      	ldr	r2, [pc, #552]	; (80040f4 <HAL_RCC_OscConfig+0x578>)
 8003eca:	f043 0301 	orr.w	r3, r3, #1
 8003ece:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8003ed2:	e00f      	b.n	8003ef4 <HAL_RCC_OscConfig+0x378>
 8003ed4:	4b87      	ldr	r3, [pc, #540]	; (80040f4 <HAL_RCC_OscConfig+0x578>)
 8003ed6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003eda:	4a86      	ldr	r2, [pc, #536]	; (80040f4 <HAL_RCC_OscConfig+0x578>)
 8003edc:	f023 0301 	bic.w	r3, r3, #1
 8003ee0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8003ee4:	4b83      	ldr	r3, [pc, #524]	; (80040f4 <HAL_RCC_OscConfig+0x578>)
 8003ee6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003eea:	4a82      	ldr	r2, [pc, #520]	; (80040f4 <HAL_RCC_OscConfig+0x578>)
 8003eec:	f023 0304 	bic.w	r3, r3, #4
 8003ef0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8003ef4:	687b      	ldr	r3, [r7, #4]
 8003ef6:	689b      	ldr	r3, [r3, #8]
 8003ef8:	2b00      	cmp	r3, #0
 8003efa:	d016      	beq.n	8003f2a <HAL_RCC_OscConfig+0x3ae>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003efc:	f7fd fb0a 	bl	8001514 <HAL_GetTick>
 8003f00:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003f02:	e00a      	b.n	8003f1a <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003f04:	f7fd fb06 	bl	8001514 <HAL_GetTick>
 8003f08:	4602      	mov	r2, r0
 8003f0a:	693b      	ldr	r3, [r7, #16]
 8003f0c:	1ad3      	subs	r3, r2, r3
 8003f0e:	f241 3288 	movw	r2, #5000	; 0x1388
 8003f12:	4293      	cmp	r3, r2
 8003f14:	d901      	bls.n	8003f1a <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 8003f16:	2303      	movs	r3, #3
 8003f18:	e142      	b.n	80041a0 <HAL_RCC_OscConfig+0x624>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003f1a:	4b76      	ldr	r3, [pc, #472]	; (80040f4 <HAL_RCC_OscConfig+0x578>)
 8003f1c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003f20:	f003 0302 	and.w	r3, r3, #2
 8003f24:	2b00      	cmp	r3, #0
 8003f26:	d0ed      	beq.n	8003f04 <HAL_RCC_OscConfig+0x388>
 8003f28:	e015      	b.n	8003f56 <HAL_RCC_OscConfig+0x3da>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003f2a:	f7fd faf3 	bl	8001514 <HAL_GetTick>
 8003f2e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8003f30:	e00a      	b.n	8003f48 <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003f32:	f7fd faef 	bl	8001514 <HAL_GetTick>
 8003f36:	4602      	mov	r2, r0
 8003f38:	693b      	ldr	r3, [r7, #16]
 8003f3a:	1ad3      	subs	r3, r2, r3
 8003f3c:	f241 3288 	movw	r2, #5000	; 0x1388
 8003f40:	4293      	cmp	r3, r2
 8003f42:	d901      	bls.n	8003f48 <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 8003f44:	2303      	movs	r3, #3
 8003f46:	e12b      	b.n	80041a0 <HAL_RCC_OscConfig+0x624>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8003f48:	4b6a      	ldr	r3, [pc, #424]	; (80040f4 <HAL_RCC_OscConfig+0x578>)
 8003f4a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003f4e:	f003 0302 	and.w	r3, r3, #2
 8003f52:	2b00      	cmp	r3, #0
 8003f54:	d1ed      	bne.n	8003f32 <HAL_RCC_OscConfig+0x3b6>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8003f56:	7ffb      	ldrb	r3, [r7, #31]
 8003f58:	2b01      	cmp	r3, #1
 8003f5a:	d105      	bne.n	8003f68 <HAL_RCC_OscConfig+0x3ec>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003f5c:	4b65      	ldr	r3, [pc, #404]	; (80040f4 <HAL_RCC_OscConfig+0x578>)
 8003f5e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003f60:	4a64      	ldr	r2, [pc, #400]	; (80040f4 <HAL_RCC_OscConfig+0x578>)
 8003f62:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003f66:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8003f68:	687b      	ldr	r3, [r7, #4]
 8003f6a:	681b      	ldr	r3, [r3, #0]
 8003f6c:	f003 0320 	and.w	r3, r3, #32
 8003f70:	2b00      	cmp	r3, #0
 8003f72:	d03c      	beq.n	8003fee <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8003f74:	687b      	ldr	r3, [r7, #4]
 8003f76:	699b      	ldr	r3, [r3, #24]
 8003f78:	2b00      	cmp	r3, #0
 8003f7a:	d01c      	beq.n	8003fb6 <HAL_RCC_OscConfig+0x43a>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8003f7c:	4b5d      	ldr	r3, [pc, #372]	; (80040f4 <HAL_RCC_OscConfig+0x578>)
 8003f7e:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8003f82:	4a5c      	ldr	r2, [pc, #368]	; (80040f4 <HAL_RCC_OscConfig+0x578>)
 8003f84:	f043 0301 	orr.w	r3, r3, #1
 8003f88:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003f8c:	f7fd fac2 	bl	8001514 <HAL_GetTick>
 8003f90:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8003f92:	e008      	b.n	8003fa6 <HAL_RCC_OscConfig+0x42a>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8003f94:	f7fd fabe 	bl	8001514 <HAL_GetTick>
 8003f98:	4602      	mov	r2, r0
 8003f9a:	693b      	ldr	r3, [r7, #16]
 8003f9c:	1ad3      	subs	r3, r2, r3
 8003f9e:	2b02      	cmp	r3, #2
 8003fa0:	d901      	bls.n	8003fa6 <HAL_RCC_OscConfig+0x42a>
        {
          return HAL_TIMEOUT;
 8003fa2:	2303      	movs	r3, #3
 8003fa4:	e0fc      	b.n	80041a0 <HAL_RCC_OscConfig+0x624>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8003fa6:	4b53      	ldr	r3, [pc, #332]	; (80040f4 <HAL_RCC_OscConfig+0x578>)
 8003fa8:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8003fac:	f003 0302 	and.w	r3, r3, #2
 8003fb0:	2b00      	cmp	r3, #0
 8003fb2:	d0ef      	beq.n	8003f94 <HAL_RCC_OscConfig+0x418>
 8003fb4:	e01b      	b.n	8003fee <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8003fb6:	4b4f      	ldr	r3, [pc, #316]	; (80040f4 <HAL_RCC_OscConfig+0x578>)
 8003fb8:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8003fbc:	4a4d      	ldr	r2, [pc, #308]	; (80040f4 <HAL_RCC_OscConfig+0x578>)
 8003fbe:	f023 0301 	bic.w	r3, r3, #1
 8003fc2:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003fc6:	f7fd faa5 	bl	8001514 <HAL_GetTick>
 8003fca:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8003fcc:	e008      	b.n	8003fe0 <HAL_RCC_OscConfig+0x464>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8003fce:	f7fd faa1 	bl	8001514 <HAL_GetTick>
 8003fd2:	4602      	mov	r2, r0
 8003fd4:	693b      	ldr	r3, [r7, #16]
 8003fd6:	1ad3      	subs	r3, r2, r3
 8003fd8:	2b02      	cmp	r3, #2
 8003fda:	d901      	bls.n	8003fe0 <HAL_RCC_OscConfig+0x464>
        {
          return HAL_TIMEOUT;
 8003fdc:	2303      	movs	r3, #3
 8003fde:	e0df      	b.n	80041a0 <HAL_RCC_OscConfig+0x624>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8003fe0:	4b44      	ldr	r3, [pc, #272]	; (80040f4 <HAL_RCC_OscConfig+0x578>)
 8003fe2:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8003fe6:	f003 0302 	and.w	r3, r3, #2
 8003fea:	2b00      	cmp	r3, #0
 8003fec:	d1ef      	bne.n	8003fce <HAL_RCC_OscConfig+0x452>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8003fee:	687b      	ldr	r3, [r7, #4]
 8003ff0:	69db      	ldr	r3, [r3, #28]
 8003ff2:	2b00      	cmp	r3, #0
 8003ff4:	f000 80d3 	beq.w	800419e <HAL_RCC_OscConfig+0x622>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8003ff8:	4b3e      	ldr	r3, [pc, #248]	; (80040f4 <HAL_RCC_OscConfig+0x578>)
 8003ffa:	689b      	ldr	r3, [r3, #8]
 8003ffc:	f003 030c 	and.w	r3, r3, #12
 8004000:	2b0c      	cmp	r3, #12
 8004002:	f000 808d 	beq.w	8004120 <HAL_RCC_OscConfig+0x5a4>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8004006:	687b      	ldr	r3, [r7, #4]
 8004008:	69db      	ldr	r3, [r3, #28]
 800400a:	2b02      	cmp	r3, #2
 800400c:	d15a      	bne.n	80040c4 <HAL_RCC_OscConfig+0x548>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800400e:	4b39      	ldr	r3, [pc, #228]	; (80040f4 <HAL_RCC_OscConfig+0x578>)
 8004010:	681b      	ldr	r3, [r3, #0]
 8004012:	4a38      	ldr	r2, [pc, #224]	; (80040f4 <HAL_RCC_OscConfig+0x578>)
 8004014:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8004018:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800401a:	f7fd fa7b 	bl	8001514 <HAL_GetTick>
 800401e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004020:	e008      	b.n	8004034 <HAL_RCC_OscConfig+0x4b8>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004022:	f7fd fa77 	bl	8001514 <HAL_GetTick>
 8004026:	4602      	mov	r2, r0
 8004028:	693b      	ldr	r3, [r7, #16]
 800402a:	1ad3      	subs	r3, r2, r3
 800402c:	2b02      	cmp	r3, #2
 800402e:	d901      	bls.n	8004034 <HAL_RCC_OscConfig+0x4b8>
          {
            return HAL_TIMEOUT;
 8004030:	2303      	movs	r3, #3
 8004032:	e0b5      	b.n	80041a0 <HAL_RCC_OscConfig+0x624>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004034:	4b2f      	ldr	r3, [pc, #188]	; (80040f4 <HAL_RCC_OscConfig+0x578>)
 8004036:	681b      	ldr	r3, [r3, #0]
 8004038:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800403c:	2b00      	cmp	r3, #0
 800403e:	d1f0      	bne.n	8004022 <HAL_RCC_OscConfig+0x4a6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8004040:	4b2c      	ldr	r3, [pc, #176]	; (80040f4 <HAL_RCC_OscConfig+0x578>)
 8004042:	68da      	ldr	r2, [r3, #12]
 8004044:	4b2d      	ldr	r3, [pc, #180]	; (80040fc <HAL_RCC_OscConfig+0x580>)
 8004046:	4013      	ands	r3, r2
 8004048:	687a      	ldr	r2, [r7, #4]
 800404a:	6a11      	ldr	r1, [r2, #32]
 800404c:	687a      	ldr	r2, [r7, #4]
 800404e:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8004050:	3a01      	subs	r2, #1
 8004052:	0112      	lsls	r2, r2, #4
 8004054:	4311      	orrs	r1, r2
 8004056:	687a      	ldr	r2, [r7, #4]
 8004058:	6a92      	ldr	r2, [r2, #40]	; 0x28
 800405a:	0212      	lsls	r2, r2, #8
 800405c:	4311      	orrs	r1, r2
 800405e:	687a      	ldr	r2, [r7, #4]
 8004060:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8004062:	0852      	lsrs	r2, r2, #1
 8004064:	3a01      	subs	r2, #1
 8004066:	0552      	lsls	r2, r2, #21
 8004068:	4311      	orrs	r1, r2
 800406a:	687a      	ldr	r2, [r7, #4]
 800406c:	6b52      	ldr	r2, [r2, #52]	; 0x34
 800406e:	0852      	lsrs	r2, r2, #1
 8004070:	3a01      	subs	r2, #1
 8004072:	0652      	lsls	r2, r2, #25
 8004074:	4311      	orrs	r1, r2
 8004076:	687a      	ldr	r2, [r7, #4]
 8004078:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 800407a:	06d2      	lsls	r2, r2, #27
 800407c:	430a      	orrs	r2, r1
 800407e:	491d      	ldr	r1, [pc, #116]	; (80040f4 <HAL_RCC_OscConfig+0x578>)
 8004080:	4313      	orrs	r3, r2
 8004082:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004084:	4b1b      	ldr	r3, [pc, #108]	; (80040f4 <HAL_RCC_OscConfig+0x578>)
 8004086:	681b      	ldr	r3, [r3, #0]
 8004088:	4a1a      	ldr	r2, [pc, #104]	; (80040f4 <HAL_RCC_OscConfig+0x578>)
 800408a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800408e:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8004090:	4b18      	ldr	r3, [pc, #96]	; (80040f4 <HAL_RCC_OscConfig+0x578>)
 8004092:	68db      	ldr	r3, [r3, #12]
 8004094:	4a17      	ldr	r2, [pc, #92]	; (80040f4 <HAL_RCC_OscConfig+0x578>)
 8004096:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800409a:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800409c:	f7fd fa3a 	bl	8001514 <HAL_GetTick>
 80040a0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80040a2:	e008      	b.n	80040b6 <HAL_RCC_OscConfig+0x53a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80040a4:	f7fd fa36 	bl	8001514 <HAL_GetTick>
 80040a8:	4602      	mov	r2, r0
 80040aa:	693b      	ldr	r3, [r7, #16]
 80040ac:	1ad3      	subs	r3, r2, r3
 80040ae:	2b02      	cmp	r3, #2
 80040b0:	d901      	bls.n	80040b6 <HAL_RCC_OscConfig+0x53a>
          {
            return HAL_TIMEOUT;
 80040b2:	2303      	movs	r3, #3
 80040b4:	e074      	b.n	80041a0 <HAL_RCC_OscConfig+0x624>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80040b6:	4b0f      	ldr	r3, [pc, #60]	; (80040f4 <HAL_RCC_OscConfig+0x578>)
 80040b8:	681b      	ldr	r3, [r3, #0]
 80040ba:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80040be:	2b00      	cmp	r3, #0
 80040c0:	d0f0      	beq.n	80040a4 <HAL_RCC_OscConfig+0x528>
 80040c2:	e06c      	b.n	800419e <HAL_RCC_OscConfig+0x622>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80040c4:	4b0b      	ldr	r3, [pc, #44]	; (80040f4 <HAL_RCC_OscConfig+0x578>)
 80040c6:	681b      	ldr	r3, [r3, #0]
 80040c8:	4a0a      	ldr	r2, [pc, #40]	; (80040f4 <HAL_RCC_OscConfig+0x578>)
 80040ca:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80040ce:	6013      	str	r3, [r2, #0]

        /* Disable all PLL outputs to save power if no PLLs on */
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 80040d0:	4b08      	ldr	r3, [pc, #32]	; (80040f4 <HAL_RCC_OscConfig+0x578>)
 80040d2:	68db      	ldr	r3, [r3, #12]
 80040d4:	4a07      	ldr	r2, [pc, #28]	; (80040f4 <HAL_RCC_OscConfig+0x578>)
 80040d6:	f023 0303 	bic.w	r3, r3, #3
 80040da:	60d3      	str	r3, [r2, #12]
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_ADCCLK);
 80040dc:	4b05      	ldr	r3, [pc, #20]	; (80040f4 <HAL_RCC_OscConfig+0x578>)
 80040de:	68db      	ldr	r3, [r3, #12]
 80040e0:	4a04      	ldr	r2, [pc, #16]	; (80040f4 <HAL_RCC_OscConfig+0x578>)
 80040e2:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 80040e6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80040ea:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80040ec:	f7fd fa12 	bl	8001514 <HAL_GetTick>
 80040f0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80040f2:	e00e      	b.n	8004112 <HAL_RCC_OscConfig+0x596>
 80040f4:	40021000 	.word	0x40021000
 80040f8:	40007000 	.word	0x40007000
 80040fc:	019f800c 	.word	0x019f800c
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004100:	f7fd fa08 	bl	8001514 <HAL_GetTick>
 8004104:	4602      	mov	r2, r0
 8004106:	693b      	ldr	r3, [r7, #16]
 8004108:	1ad3      	subs	r3, r2, r3
 800410a:	2b02      	cmp	r3, #2
 800410c:	d901      	bls.n	8004112 <HAL_RCC_OscConfig+0x596>
          {
            return HAL_TIMEOUT;
 800410e:	2303      	movs	r3, #3
 8004110:	e046      	b.n	80041a0 <HAL_RCC_OscConfig+0x624>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004112:	4b25      	ldr	r3, [pc, #148]	; (80041a8 <HAL_RCC_OscConfig+0x62c>)
 8004114:	681b      	ldr	r3, [r3, #0]
 8004116:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800411a:	2b00      	cmp	r3, #0
 800411c:	d1f0      	bne.n	8004100 <HAL_RCC_OscConfig+0x584>
 800411e:	e03e      	b.n	800419e <HAL_RCC_OscConfig+0x622>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8004120:	687b      	ldr	r3, [r7, #4]
 8004122:	69db      	ldr	r3, [r3, #28]
 8004124:	2b01      	cmp	r3, #1
 8004126:	d101      	bne.n	800412c <HAL_RCC_OscConfig+0x5b0>
      {
        return HAL_ERROR;
 8004128:	2301      	movs	r3, #1
 800412a:	e039      	b.n	80041a0 <HAL_RCC_OscConfig+0x624>
      }
      else
      {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp_pllckcfg = RCC->PLLCFGR;
 800412c:	4b1e      	ldr	r3, [pc, #120]	; (80041a8 <HAL_RCC_OscConfig+0x62c>)
 800412e:	68db      	ldr	r3, [r3, #12]
 8004130:	617b      	str	r3, [r7, #20]
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004132:	697b      	ldr	r3, [r7, #20]
 8004134:	f003 0203 	and.w	r2, r3, #3
 8004138:	687b      	ldr	r3, [r7, #4]
 800413a:	6a1b      	ldr	r3, [r3, #32]
 800413c:	429a      	cmp	r2, r3
 800413e:	d12c      	bne.n	800419a <HAL_RCC_OscConfig+0x61e>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8004140:	697b      	ldr	r3, [r7, #20]
 8004142:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8004146:	687b      	ldr	r3, [r7, #4]
 8004148:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800414a:	3b01      	subs	r3, #1
 800414c:	011b      	lsls	r3, r3, #4
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800414e:	429a      	cmp	r2, r3
 8004150:	d123      	bne.n	800419a <HAL_RCC_OscConfig+0x61e>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8004152:	697b      	ldr	r3, [r7, #20]
 8004154:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8004158:	687b      	ldr	r3, [r7, #4]
 800415a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800415c:	021b      	lsls	r3, r3, #8
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800415e:	429a      	cmp	r2, r3
 8004160:	d11b      	bne.n	800419a <HAL_RCC_OscConfig+0x61e>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8004162:	697b      	ldr	r3, [r7, #20]
 8004164:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 8004168:	687b      	ldr	r3, [r7, #4]
 800416a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800416c:	06db      	lsls	r3, r3, #27
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 800416e:	429a      	cmp	r2, r3
 8004170:	d113      	bne.n	800419a <HAL_RCC_OscConfig+0x61e>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8004172:	697b      	ldr	r3, [r7, #20]
 8004174:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8004178:	687b      	ldr	r3, [r7, #4]
 800417a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800417c:	085b      	lsrs	r3, r3, #1
 800417e:	3b01      	subs	r3, #1
 8004180:	055b      	lsls	r3, r3, #21
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8004182:	429a      	cmp	r2, r3
 8004184:	d109      	bne.n	800419a <HAL_RCC_OscConfig+0x61e>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8004186:	697b      	ldr	r3, [r7, #20]
 8004188:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 800418c:	687b      	ldr	r3, [r7, #4]
 800418e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004190:	085b      	lsrs	r3, r3, #1
 8004192:	3b01      	subs	r3, #1
 8004194:	065b      	lsls	r3, r3, #25
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8004196:	429a      	cmp	r2, r3
 8004198:	d001      	beq.n	800419e <HAL_RCC_OscConfig+0x622>
      {
        return HAL_ERROR;
 800419a:	2301      	movs	r3, #1
 800419c:	e000      	b.n	80041a0 <HAL_RCC_OscConfig+0x624>
      }
    }
  }
  }

  return HAL_OK;
 800419e:	2300      	movs	r3, #0
}
 80041a0:	4618      	mov	r0, r3
 80041a2:	3720      	adds	r7, #32
 80041a4:	46bd      	mov	sp, r7
 80041a6:	bd80      	pop	{r7, pc}
 80041a8:	40021000 	.word	0x40021000

080041ac <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80041ac:	b580      	push	{r7, lr}
 80041ae:	b086      	sub	sp, #24
 80041b0:	af00      	add	r7, sp, #0
 80041b2:	6078      	str	r0, [r7, #4]
 80041b4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t pllfreq;
  uint32_t hpre = RCC_SYSCLK_DIV1;
 80041b6:	2300      	movs	r3, #0
 80041b8:	617b      	str	r3, [r7, #20]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80041ba:	687b      	ldr	r3, [r7, #4]
 80041bc:	2b00      	cmp	r3, #0
 80041be:	d101      	bne.n	80041c4 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 80041c0:	2301      	movs	r3, #1
 80041c2:	e11e      	b.n	8004402 <HAL_RCC_ClockConfig+0x256>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80041c4:	4b91      	ldr	r3, [pc, #580]	; (800440c <HAL_RCC_ClockConfig+0x260>)
 80041c6:	681b      	ldr	r3, [r3, #0]
 80041c8:	f003 030f 	and.w	r3, r3, #15
 80041cc:	683a      	ldr	r2, [r7, #0]
 80041ce:	429a      	cmp	r2, r3
 80041d0:	d910      	bls.n	80041f4 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80041d2:	4b8e      	ldr	r3, [pc, #568]	; (800440c <HAL_RCC_ClockConfig+0x260>)
 80041d4:	681b      	ldr	r3, [r3, #0]
 80041d6:	f023 020f 	bic.w	r2, r3, #15
 80041da:	498c      	ldr	r1, [pc, #560]	; (800440c <HAL_RCC_ClockConfig+0x260>)
 80041dc:	683b      	ldr	r3, [r7, #0]
 80041de:	4313      	orrs	r3, r2
 80041e0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80041e2:	4b8a      	ldr	r3, [pc, #552]	; (800440c <HAL_RCC_ClockConfig+0x260>)
 80041e4:	681b      	ldr	r3, [r3, #0]
 80041e6:	f003 030f 	and.w	r3, r3, #15
 80041ea:	683a      	ldr	r2, [r7, #0]
 80041ec:	429a      	cmp	r2, r3
 80041ee:	d001      	beq.n	80041f4 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 80041f0:	2301      	movs	r3, #1
 80041f2:	e106      	b.n	8004402 <HAL_RCC_ClockConfig+0x256>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80041f4:	687b      	ldr	r3, [r7, #4]
 80041f6:	681b      	ldr	r3, [r3, #0]
 80041f8:	f003 0301 	and.w	r3, r3, #1
 80041fc:	2b00      	cmp	r3, #0
 80041fe:	d073      	beq.n	80042e8 <HAL_RCC_ClockConfig+0x13c>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8004200:	687b      	ldr	r3, [r7, #4]
 8004202:	685b      	ldr	r3, [r3, #4]
 8004204:	2b03      	cmp	r3, #3
 8004206:	d129      	bne.n	800425c <HAL_RCC_ClockConfig+0xb0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004208:	4b81      	ldr	r3, [pc, #516]	; (8004410 <HAL_RCC_ClockConfig+0x264>)
 800420a:	681b      	ldr	r3, [r3, #0]
 800420c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004210:	2b00      	cmp	r3, #0
 8004212:	d101      	bne.n	8004218 <HAL_RCC_ClockConfig+0x6c>
      {
        return HAL_ERROR;
 8004214:	2301      	movs	r3, #1
 8004216:	e0f4      	b.n	8004402 <HAL_RCC_ClockConfig+0x256>
      }
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      pllfreq = RCC_GetSysClockFreqFromPLLSource();
 8004218:	f000 f972 	bl	8004500 <RCC_GetSysClockFreqFromPLLSource>
 800421c:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
      if(pllfreq > 80000000U)
 800421e:	693b      	ldr	r3, [r7, #16]
 8004220:	4a7c      	ldr	r2, [pc, #496]	; (8004414 <HAL_RCC_ClockConfig+0x268>)
 8004222:	4293      	cmp	r3, r2
 8004224:	d93f      	bls.n	80042a6 <HAL_RCC_ClockConfig+0xfa>
      {
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8004226:	4b7a      	ldr	r3, [pc, #488]	; (8004410 <HAL_RCC_ClockConfig+0x264>)
 8004228:	689b      	ldr	r3, [r3, #8]
 800422a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800422e:	2b00      	cmp	r3, #0
 8004230:	d009      	beq.n	8004246 <HAL_RCC_ClockConfig+0x9a>
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8004232:	687b      	ldr	r3, [r7, #4]
 8004234:	681b      	ldr	r3, [r3, #0]
 8004236:	f003 0302 	and.w	r3, r3, #2
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 800423a:	2b00      	cmp	r3, #0
 800423c:	d033      	beq.n	80042a6 <HAL_RCC_ClockConfig+0xfa>
              (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))))
 800423e:	687b      	ldr	r3, [r7, #4]
 8004240:	689b      	ldr	r3, [r3, #8]
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8004242:	2b00      	cmp	r3, #0
 8004244:	d12f      	bne.n	80042a6 <HAL_RCC_ClockConfig+0xfa>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8004246:	4b72      	ldr	r3, [pc, #456]	; (8004410 <HAL_RCC_ClockConfig+0x264>)
 8004248:	689b      	ldr	r3, [r3, #8]
 800424a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800424e:	4a70      	ldr	r2, [pc, #448]	; (8004410 <HAL_RCC_ClockConfig+0x264>)
 8004250:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004254:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 8004256:	2380      	movs	r3, #128	; 0x80
 8004258:	617b      	str	r3, [r7, #20]
 800425a:	e024      	b.n	80042a6 <HAL_RCC_ClockConfig+0xfa>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800425c:	687b      	ldr	r3, [r7, #4]
 800425e:	685b      	ldr	r3, [r3, #4]
 8004260:	2b02      	cmp	r3, #2
 8004262:	d107      	bne.n	8004274 <HAL_RCC_ClockConfig+0xc8>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8004264:	4b6a      	ldr	r3, [pc, #424]	; (8004410 <HAL_RCC_ClockConfig+0x264>)
 8004266:	681b      	ldr	r3, [r3, #0]
 8004268:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800426c:	2b00      	cmp	r3, #0
 800426e:	d109      	bne.n	8004284 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8004270:	2301      	movs	r3, #1
 8004272:	e0c6      	b.n	8004402 <HAL_RCC_ClockConfig+0x256>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8004274:	4b66      	ldr	r3, [pc, #408]	; (8004410 <HAL_RCC_ClockConfig+0x264>)
 8004276:	681b      	ldr	r3, [r3, #0]
 8004278:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800427c:	2b00      	cmp	r3, #0
 800427e:	d101      	bne.n	8004284 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8004280:	2301      	movs	r3, #1
 8004282:	e0be      	b.n	8004402 <HAL_RCC_ClockConfig+0x256>
        }
      }
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      pllfreq = HAL_RCC_GetSysClockFreq();
 8004284:	f000 f8ce 	bl	8004424 <HAL_RCC_GetSysClockFreq>
 8004288:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
      if(pllfreq > 80000000U)
 800428a:	693b      	ldr	r3, [r7, #16]
 800428c:	4a61      	ldr	r2, [pc, #388]	; (8004414 <HAL_RCC_ClockConfig+0x268>)
 800428e:	4293      	cmp	r3, r2
 8004290:	d909      	bls.n	80042a6 <HAL_RCC_ClockConfig+0xfa>
      {
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8004292:	4b5f      	ldr	r3, [pc, #380]	; (8004410 <HAL_RCC_ClockConfig+0x264>)
 8004294:	689b      	ldr	r3, [r3, #8]
 8004296:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800429a:	4a5d      	ldr	r2, [pc, #372]	; (8004410 <HAL_RCC_ClockConfig+0x264>)
 800429c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80042a0:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 80042a2:	2380      	movs	r3, #128	; 0x80
 80042a4:	617b      	str	r3, [r7, #20]
      }

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80042a6:	4b5a      	ldr	r3, [pc, #360]	; (8004410 <HAL_RCC_ClockConfig+0x264>)
 80042a8:	689b      	ldr	r3, [r3, #8]
 80042aa:	f023 0203 	bic.w	r2, r3, #3
 80042ae:	687b      	ldr	r3, [r7, #4]
 80042b0:	685b      	ldr	r3, [r3, #4]
 80042b2:	4957      	ldr	r1, [pc, #348]	; (8004410 <HAL_RCC_ClockConfig+0x264>)
 80042b4:	4313      	orrs	r3, r2
 80042b6:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80042b8:	f7fd f92c 	bl	8001514 <HAL_GetTick>
 80042bc:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80042be:	e00a      	b.n	80042d6 <HAL_RCC_ClockConfig+0x12a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80042c0:	f7fd f928 	bl	8001514 <HAL_GetTick>
 80042c4:	4602      	mov	r2, r0
 80042c6:	68fb      	ldr	r3, [r7, #12]
 80042c8:	1ad3      	subs	r3, r2, r3
 80042ca:	f241 3288 	movw	r2, #5000	; 0x1388
 80042ce:	4293      	cmp	r3, r2
 80042d0:	d901      	bls.n	80042d6 <HAL_RCC_ClockConfig+0x12a>
      {
        return HAL_TIMEOUT;
 80042d2:	2303      	movs	r3, #3
 80042d4:	e095      	b.n	8004402 <HAL_RCC_ClockConfig+0x256>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80042d6:	4b4e      	ldr	r3, [pc, #312]	; (8004410 <HAL_RCC_ClockConfig+0x264>)
 80042d8:	689b      	ldr	r3, [r3, #8]
 80042da:	f003 020c 	and.w	r2, r3, #12
 80042de:	687b      	ldr	r3, [r7, #4]
 80042e0:	685b      	ldr	r3, [r3, #4]
 80042e2:	009b      	lsls	r3, r3, #2
 80042e4:	429a      	cmp	r2, r3
 80042e6:	d1eb      	bne.n	80042c0 <HAL_RCC_ClockConfig+0x114>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80042e8:	687b      	ldr	r3, [r7, #4]
 80042ea:	681b      	ldr	r3, [r3, #0]
 80042ec:	f003 0302 	and.w	r3, r3, #2
 80042f0:	2b00      	cmp	r3, #0
 80042f2:	d023      	beq.n	800433c <HAL_RCC_ClockConfig+0x190>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80042f4:	687b      	ldr	r3, [r7, #4]
 80042f6:	681b      	ldr	r3, [r3, #0]
 80042f8:	f003 0304 	and.w	r3, r3, #4
 80042fc:	2b00      	cmp	r3, #0
 80042fe:	d005      	beq.n	800430c <HAL_RCC_ClockConfig+0x160>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8004300:	4b43      	ldr	r3, [pc, #268]	; (8004410 <HAL_RCC_ClockConfig+0x264>)
 8004302:	689b      	ldr	r3, [r3, #8]
 8004304:	4a42      	ldr	r2, [pc, #264]	; (8004410 <HAL_RCC_ClockConfig+0x264>)
 8004306:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 800430a:	6093      	str	r3, [r2, #8]
    }
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800430c:	687b      	ldr	r3, [r7, #4]
 800430e:	681b      	ldr	r3, [r3, #0]
 8004310:	f003 0308 	and.w	r3, r3, #8
 8004314:	2b00      	cmp	r3, #0
 8004316:	d007      	beq.n	8004328 <HAL_RCC_ClockConfig+0x17c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, RCC_HCLK_DIV16);
 8004318:	4b3d      	ldr	r3, [pc, #244]	; (8004410 <HAL_RCC_ClockConfig+0x264>)
 800431a:	689b      	ldr	r3, [r3, #8]
 800431c:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8004320:	4a3b      	ldr	r2, [pc, #236]	; (8004410 <HAL_RCC_ClockConfig+0x264>)
 8004322:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8004326:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004328:	4b39      	ldr	r3, [pc, #228]	; (8004410 <HAL_RCC_ClockConfig+0x264>)
 800432a:	689b      	ldr	r3, [r3, #8]
 800432c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004330:	687b      	ldr	r3, [r7, #4]
 8004332:	689b      	ldr	r3, [r3, #8]
 8004334:	4936      	ldr	r1, [pc, #216]	; (8004410 <HAL_RCC_ClockConfig+0x264>)
 8004336:	4313      	orrs	r3, r2
 8004338:	608b      	str	r3, [r1, #8]
 800433a:	e008      	b.n	800434e <HAL_RCC_ClockConfig+0x1a2>
  }
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if(hpre == RCC_SYSCLK_DIV2)
 800433c:	697b      	ldr	r3, [r7, #20]
 800433e:	2b80      	cmp	r3, #128	; 0x80
 8004340:	d105      	bne.n	800434e <HAL_RCC_ClockConfig+0x1a2>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 8004342:	4b33      	ldr	r3, [pc, #204]	; (8004410 <HAL_RCC_ClockConfig+0x264>)
 8004344:	689b      	ldr	r3, [r3, #8]
 8004346:	4a32      	ldr	r2, [pc, #200]	; (8004410 <HAL_RCC_ClockConfig+0x264>)
 8004348:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800434c:	6093      	str	r3, [r2, #8]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800434e:	4b2f      	ldr	r3, [pc, #188]	; (800440c <HAL_RCC_ClockConfig+0x260>)
 8004350:	681b      	ldr	r3, [r3, #0]
 8004352:	f003 030f 	and.w	r3, r3, #15
 8004356:	683a      	ldr	r2, [r7, #0]
 8004358:	429a      	cmp	r2, r3
 800435a:	d21d      	bcs.n	8004398 <HAL_RCC_ClockConfig+0x1ec>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800435c:	4b2b      	ldr	r3, [pc, #172]	; (800440c <HAL_RCC_ClockConfig+0x260>)
 800435e:	681b      	ldr	r3, [r3, #0]
 8004360:	f023 020f 	bic.w	r2, r3, #15
 8004364:	4929      	ldr	r1, [pc, #164]	; (800440c <HAL_RCC_ClockConfig+0x260>)
 8004366:	683b      	ldr	r3, [r7, #0]
 8004368:	4313      	orrs	r3, r2
 800436a:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 800436c:	f7fd f8d2 	bl	8001514 <HAL_GetTick>
 8004370:	60f8      	str	r0, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004372:	e00a      	b.n	800438a <HAL_RCC_ClockConfig+0x1de>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004374:	f7fd f8ce 	bl	8001514 <HAL_GetTick>
 8004378:	4602      	mov	r2, r0
 800437a:	68fb      	ldr	r3, [r7, #12]
 800437c:	1ad3      	subs	r3, r2, r3
 800437e:	f241 3288 	movw	r2, #5000	; 0x1388
 8004382:	4293      	cmp	r3, r2
 8004384:	d901      	bls.n	800438a <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_TIMEOUT;
 8004386:	2303      	movs	r3, #3
 8004388:	e03b      	b.n	8004402 <HAL_RCC_ClockConfig+0x256>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 800438a:	4b20      	ldr	r3, [pc, #128]	; (800440c <HAL_RCC_ClockConfig+0x260>)
 800438c:	681b      	ldr	r3, [r3, #0]
 800438e:	f003 030f 	and.w	r3, r3, #15
 8004392:	683a      	ldr	r2, [r7, #0]
 8004394:	429a      	cmp	r2, r3
 8004396:	d1ed      	bne.n	8004374 <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004398:	687b      	ldr	r3, [r7, #4]
 800439a:	681b      	ldr	r3, [r3, #0]
 800439c:	f003 0304 	and.w	r3, r3, #4
 80043a0:	2b00      	cmp	r3, #0
 80043a2:	d008      	beq.n	80043b6 <HAL_RCC_ClockConfig+0x20a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80043a4:	4b1a      	ldr	r3, [pc, #104]	; (8004410 <HAL_RCC_ClockConfig+0x264>)
 80043a6:	689b      	ldr	r3, [r3, #8]
 80043a8:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80043ac:	687b      	ldr	r3, [r7, #4]
 80043ae:	68db      	ldr	r3, [r3, #12]
 80043b0:	4917      	ldr	r1, [pc, #92]	; (8004410 <HAL_RCC_ClockConfig+0x264>)
 80043b2:	4313      	orrs	r3, r2
 80043b4:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80043b6:	687b      	ldr	r3, [r7, #4]
 80043b8:	681b      	ldr	r3, [r3, #0]
 80043ba:	f003 0308 	and.w	r3, r3, #8
 80043be:	2b00      	cmp	r3, #0
 80043c0:	d009      	beq.n	80043d6 <HAL_RCC_ClockConfig+0x22a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80043c2:	4b13      	ldr	r3, [pc, #76]	; (8004410 <HAL_RCC_ClockConfig+0x264>)
 80043c4:	689b      	ldr	r3, [r3, #8]
 80043c6:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80043ca:	687b      	ldr	r3, [r7, #4]
 80043cc:	691b      	ldr	r3, [r3, #16]
 80043ce:	00db      	lsls	r3, r3, #3
 80043d0:	490f      	ldr	r1, [pc, #60]	; (8004410 <HAL_RCC_ClockConfig+0x264>)
 80043d2:	4313      	orrs	r3, r2
 80043d4:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80043d6:	f000 f825 	bl	8004424 <HAL_RCC_GetSysClockFreq>
 80043da:	4601      	mov	r1, r0
 80043dc:	4b0c      	ldr	r3, [pc, #48]	; (8004410 <HAL_RCC_ClockConfig+0x264>)
 80043de:	689b      	ldr	r3, [r3, #8]
 80043e0:	091b      	lsrs	r3, r3, #4
 80043e2:	f003 030f 	and.w	r3, r3, #15
 80043e6:	4a0c      	ldr	r2, [pc, #48]	; (8004418 <HAL_RCC_ClockConfig+0x26c>)
 80043e8:	5cd3      	ldrb	r3, [r2, r3]
 80043ea:	f003 031f 	and.w	r3, r3, #31
 80043ee:	fa21 f303 	lsr.w	r3, r1, r3
 80043f2:	4a0a      	ldr	r2, [pc, #40]	; (800441c <HAL_RCC_ClockConfig+0x270>)
 80043f4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 80043f6:	4b0a      	ldr	r3, [pc, #40]	; (8004420 <HAL_RCC_ClockConfig+0x274>)
 80043f8:	681b      	ldr	r3, [r3, #0]
 80043fa:	4618      	mov	r0, r3
 80043fc:	f7fd f83e 	bl	800147c <HAL_InitTick>
 8004400:	4603      	mov	r3, r0
}
 8004402:	4618      	mov	r0, r3
 8004404:	3718      	adds	r7, #24
 8004406:	46bd      	mov	sp, r7
 8004408:	bd80      	pop	{r7, pc}
 800440a:	bf00      	nop
 800440c:	40022000 	.word	0x40022000
 8004410:	40021000 	.word	0x40021000
 8004414:	04c4b400 	.word	0x04c4b400
 8004418:	08007534 	.word	0x08007534
 800441c:	20000004 	.word	0x20000004
 8004420:	20000008 	.word	0x20000008

08004424 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004424:	b480      	push	{r7}
 8004426:	b087      	sub	sp, #28
 8004428:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 800442a:	4b2c      	ldr	r3, [pc, #176]	; (80044dc <HAL_RCC_GetSysClockFreq+0xb8>)
 800442c:	689b      	ldr	r3, [r3, #8]
 800442e:	f003 030c 	and.w	r3, r3, #12
 8004432:	2b04      	cmp	r3, #4
 8004434:	d102      	bne.n	800443c <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8004436:	4b2a      	ldr	r3, [pc, #168]	; (80044e0 <HAL_RCC_GetSysClockFreq+0xbc>)
 8004438:	613b      	str	r3, [r7, #16]
 800443a:	e047      	b.n	80044cc <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 800443c:	4b27      	ldr	r3, [pc, #156]	; (80044dc <HAL_RCC_GetSysClockFreq+0xb8>)
 800443e:	689b      	ldr	r3, [r3, #8]
 8004440:	f003 030c 	and.w	r3, r3, #12
 8004444:	2b08      	cmp	r3, #8
 8004446:	d102      	bne.n	800444e <HAL_RCC_GetSysClockFreq+0x2a>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8004448:	4b26      	ldr	r3, [pc, #152]	; (80044e4 <HAL_RCC_GetSysClockFreq+0xc0>)
 800444a:	613b      	str	r3, [r7, #16]
 800444c:	e03e      	b.n	80044cc <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 800444e:	4b23      	ldr	r3, [pc, #140]	; (80044dc <HAL_RCC_GetSysClockFreq+0xb8>)
 8004450:	689b      	ldr	r3, [r3, #8]
 8004452:	f003 030c 	and.w	r3, r3, #12
 8004456:	2b0c      	cmp	r3, #12
 8004458:	d136      	bne.n	80044c8 <HAL_RCC_GetSysClockFreq+0xa4>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 800445a:	4b20      	ldr	r3, [pc, #128]	; (80044dc <HAL_RCC_GetSysClockFreq+0xb8>)
 800445c:	68db      	ldr	r3, [r3, #12]
 800445e:	f003 0303 	and.w	r3, r3, #3
 8004462:	60fb      	str	r3, [r7, #12]
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8004464:	4b1d      	ldr	r3, [pc, #116]	; (80044dc <HAL_RCC_GetSysClockFreq+0xb8>)
 8004466:	68db      	ldr	r3, [r3, #12]
 8004468:	091b      	lsrs	r3, r3, #4
 800446a:	f003 030f 	and.w	r3, r3, #15
 800446e:	3301      	adds	r3, #1
 8004470:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8004472:	68fb      	ldr	r3, [r7, #12]
 8004474:	2b03      	cmp	r3, #3
 8004476:	d10c      	bne.n	8004492 <HAL_RCC_GetSysClockFreq+0x6e>
    {
    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8004478:	4a1a      	ldr	r2, [pc, #104]	; (80044e4 <HAL_RCC_GetSysClockFreq+0xc0>)
 800447a:	68bb      	ldr	r3, [r7, #8]
 800447c:	fbb2 f3f3 	udiv	r3, r2, r3
 8004480:	4a16      	ldr	r2, [pc, #88]	; (80044dc <HAL_RCC_GetSysClockFreq+0xb8>)
 8004482:	68d2      	ldr	r2, [r2, #12]
 8004484:	0a12      	lsrs	r2, r2, #8
 8004486:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 800448a:	fb02 f303 	mul.w	r3, r2, r3
 800448e:	617b      	str	r3, [r7, #20]
      break;
 8004490:	e00c      	b.n	80044ac <HAL_RCC_GetSysClockFreq+0x88>

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    default:
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8004492:	4a13      	ldr	r2, [pc, #76]	; (80044e0 <HAL_RCC_GetSysClockFreq+0xbc>)
 8004494:	68bb      	ldr	r3, [r7, #8]
 8004496:	fbb2 f3f3 	udiv	r3, r2, r3
 800449a:	4a10      	ldr	r2, [pc, #64]	; (80044dc <HAL_RCC_GetSysClockFreq+0xb8>)
 800449c:	68d2      	ldr	r2, [r2, #12]
 800449e:	0a12      	lsrs	r2, r2, #8
 80044a0:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 80044a4:	fb02 f303 	mul.w	r3, r2, r3
 80044a8:	617b      	str	r3, [r7, #20]
      break;
 80044aa:	bf00      	nop
    }
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 80044ac:	4b0b      	ldr	r3, [pc, #44]	; (80044dc <HAL_RCC_GetSysClockFreq+0xb8>)
 80044ae:	68db      	ldr	r3, [r3, #12]
 80044b0:	0e5b      	lsrs	r3, r3, #25
 80044b2:	f003 0303 	and.w	r3, r3, #3
 80044b6:	3301      	adds	r3, #1
 80044b8:	005b      	lsls	r3, r3, #1
 80044ba:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco/pllr;
 80044bc:	697a      	ldr	r2, [r7, #20]
 80044be:	687b      	ldr	r3, [r7, #4]
 80044c0:	fbb2 f3f3 	udiv	r3, r2, r3
 80044c4:	613b      	str	r3, [r7, #16]
 80044c6:	e001      	b.n	80044cc <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else
  {
    sysclockfreq = 0U;
 80044c8:	2300      	movs	r3, #0
 80044ca:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 80044cc:	693b      	ldr	r3, [r7, #16]
}
 80044ce:	4618      	mov	r0, r3
 80044d0:	371c      	adds	r7, #28
 80044d2:	46bd      	mov	sp, r7
 80044d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044d8:	4770      	bx	lr
 80044da:	bf00      	nop
 80044dc:	40021000 	.word	0x40021000
 80044e0:	00f42400 	.word	0x00f42400
 80044e4:	007a1200 	.word	0x007a1200

080044e8 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80044e8:	b480      	push	{r7}
 80044ea:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80044ec:	4b03      	ldr	r3, [pc, #12]	; (80044fc <HAL_RCC_GetHCLKFreq+0x14>)
 80044ee:	681b      	ldr	r3, [r3, #0]
}
 80044f0:	4618      	mov	r0, r3
 80044f2:	46bd      	mov	sp, r7
 80044f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044f8:	4770      	bx	lr
 80044fa:	bf00      	nop
 80044fc:	20000004 	.word	0x20000004

08004500 <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 8004500:	b480      	push	{r7}
 8004502:	b087      	sub	sp, #28
 8004504:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8004506:	4b1e      	ldr	r3, [pc, #120]	; (8004580 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8004508:	68db      	ldr	r3, [r3, #12]
 800450a:	f003 0303 	and.w	r3, r3, #3
 800450e:	613b      	str	r3, [r7, #16]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8004510:	4b1b      	ldr	r3, [pc, #108]	; (8004580 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8004512:	68db      	ldr	r3, [r3, #12]
 8004514:	091b      	lsrs	r3, r3, #4
 8004516:	f003 030f 	and.w	r3, r3, #15
 800451a:	3301      	adds	r3, #1
 800451c:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 800451e:	693b      	ldr	r3, [r7, #16]
 8004520:	2b03      	cmp	r3, #3
 8004522:	d10c      	bne.n	800453e <RCC_GetSysClockFreqFromPLLSource+0x3e>
  {
  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8004524:	4a17      	ldr	r2, [pc, #92]	; (8004584 <RCC_GetSysClockFreqFromPLLSource+0x84>)
 8004526:	68fb      	ldr	r3, [r7, #12]
 8004528:	fbb2 f3f3 	udiv	r3, r2, r3
 800452c:	4a14      	ldr	r2, [pc, #80]	; (8004580 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 800452e:	68d2      	ldr	r2, [r2, #12]
 8004530:	0a12      	lsrs	r2, r2, #8
 8004532:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8004536:	fb02 f303 	mul.w	r3, r2, r3
 800453a:	617b      	str	r3, [r7, #20]
    break;
 800453c:	e00c      	b.n	8004558 <RCC_GetSysClockFreqFromPLLSource+0x58>

  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
  default:
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 800453e:	4a12      	ldr	r2, [pc, #72]	; (8004588 <RCC_GetSysClockFreqFromPLLSource+0x88>)
 8004540:	68fb      	ldr	r3, [r7, #12]
 8004542:	fbb2 f3f3 	udiv	r3, r2, r3
 8004546:	4a0e      	ldr	r2, [pc, #56]	; (8004580 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8004548:	68d2      	ldr	r2, [r2, #12]
 800454a:	0a12      	lsrs	r2, r2, #8
 800454c:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8004550:	fb02 f303 	mul.w	r3, r2, r3
 8004554:	617b      	str	r3, [r7, #20]
    break;
 8004556:	bf00      	nop
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8004558:	4b09      	ldr	r3, [pc, #36]	; (8004580 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 800455a:	68db      	ldr	r3, [r3, #12]
 800455c:	0e5b      	lsrs	r3, r3, #25
 800455e:	f003 0303 	and.w	r3, r3, #3
 8004562:	3301      	adds	r3, #1
 8004564:	005b      	lsls	r3, r3, #1
 8004566:	60bb      	str	r3, [r7, #8]
  sysclockfreq = pllvco/pllr;
 8004568:	697a      	ldr	r2, [r7, #20]
 800456a:	68bb      	ldr	r3, [r7, #8]
 800456c:	fbb2 f3f3 	udiv	r3, r2, r3
 8004570:	607b      	str	r3, [r7, #4]

  return sysclockfreq;
 8004572:	687b      	ldr	r3, [r7, #4]
}
 8004574:	4618      	mov	r0, r3
 8004576:	371c      	adds	r7, #28
 8004578:	46bd      	mov	sp, r7
 800457a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800457e:	4770      	bx	lr
 8004580:	40021000 	.word	0x40021000
 8004584:	007a1200 	.word	0x007a1200
 8004588:	00f42400 	.word	0x00f42400

0800458c <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800458c:	b580      	push	{r7, lr}
 800458e:	b086      	sub	sp, #24
 8004590:	af00      	add	r7, sp, #0
 8004592:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8004594:	2300      	movs	r3, #0
 8004596:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8004598:	2300      	movs	r3, #0
 800459a:	74bb      	strb	r3, [r7, #18]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 800459c:	687b      	ldr	r3, [r7, #4]
 800459e:	681b      	ldr	r3, [r3, #0]
 80045a0:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80045a4:	2b00      	cmp	r3, #0
 80045a6:	f000 8098 	beq.w	80046da <HAL_RCCEx_PeriphCLKConfig+0x14e>
  {
    FlagStatus       pwrclkchanged = RESET;
 80045aa:	2300      	movs	r3, #0
 80045ac:	747b      	strb	r3, [r7, #17]
    
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80045ae:	4b43      	ldr	r3, [pc, #268]	; (80046bc <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80045b0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80045b2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80045b6:	2b00      	cmp	r3, #0
 80045b8:	d10d      	bne.n	80045d6 <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80045ba:	4b40      	ldr	r3, [pc, #256]	; (80046bc <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80045bc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80045be:	4a3f      	ldr	r2, [pc, #252]	; (80046bc <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80045c0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80045c4:	6593      	str	r3, [r2, #88]	; 0x58
 80045c6:	4b3d      	ldr	r3, [pc, #244]	; (80046bc <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80045c8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80045ca:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80045ce:	60bb      	str	r3, [r7, #8]
 80045d0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80045d2:	2301      	movs	r3, #1
 80045d4:	747b      	strb	r3, [r7, #17]
    }
      
    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80045d6:	4b3a      	ldr	r3, [pc, #232]	; (80046c0 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 80045d8:	681b      	ldr	r3, [r3, #0]
 80045da:	4a39      	ldr	r2, [pc, #228]	; (80046c0 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 80045dc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80045e0:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80045e2:	f7fc ff97 	bl	8001514 <HAL_GetTick>
 80045e6:	60f8      	str	r0, [r7, #12]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80045e8:	e009      	b.n	80045fe <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80045ea:	f7fc ff93 	bl	8001514 <HAL_GetTick>
 80045ee:	4602      	mov	r2, r0
 80045f0:	68fb      	ldr	r3, [r7, #12]
 80045f2:	1ad3      	subs	r3, r2, r3
 80045f4:	2b02      	cmp	r3, #2
 80045f6:	d902      	bls.n	80045fe <HAL_RCCEx_PeriphCLKConfig+0x72>
      {
        ret = HAL_TIMEOUT;
 80045f8:	2303      	movs	r3, #3
 80045fa:	74fb      	strb	r3, [r7, #19]
        break;
 80045fc:	e005      	b.n	800460a <HAL_RCCEx_PeriphCLKConfig+0x7e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80045fe:	4b30      	ldr	r3, [pc, #192]	; (80046c0 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8004600:	681b      	ldr	r3, [r3, #0]
 8004602:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004606:	2b00      	cmp	r3, #0
 8004608:	d0ef      	beq.n	80045ea <HAL_RCCEx_PeriphCLKConfig+0x5e>
      }
    }

    if(ret == HAL_OK)
 800460a:	7cfb      	ldrb	r3, [r7, #19]
 800460c:	2b00      	cmp	r3, #0
 800460e:	d159      	bne.n	80046c4 <HAL_RCCEx_PeriphCLKConfig+0x138>
    { 
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8004610:	4b2a      	ldr	r3, [pc, #168]	; (80046bc <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004612:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004616:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800461a:	617b      	str	r3, [r7, #20]
      
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 800461c:	697b      	ldr	r3, [r7, #20]
 800461e:	2b00      	cmp	r3, #0
 8004620:	d01e      	beq.n	8004660 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 8004622:	687b      	ldr	r3, [r7, #4]
 8004624:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004626:	697a      	ldr	r2, [r7, #20]
 8004628:	429a      	cmp	r2, r3
 800462a:	d019      	beq.n	8004660 <HAL_RCCEx_PeriphCLKConfig+0xd4>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 800462c:	4b23      	ldr	r3, [pc, #140]	; (80046bc <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800462e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004632:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004636:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8004638:	4b20      	ldr	r3, [pc, #128]	; (80046bc <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800463a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800463e:	4a1f      	ldr	r2, [pc, #124]	; (80046bc <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004640:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004644:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8004648:	4b1c      	ldr	r3, [pc, #112]	; (80046bc <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800464a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800464e:	4a1b      	ldr	r2, [pc, #108]	; (80046bc <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004650:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004654:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8004658:	4a18      	ldr	r2, [pc, #96]	; (80046bc <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800465a:	697b      	ldr	r3, [r7, #20]
 800465c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8004660:	697b      	ldr	r3, [r7, #20]
 8004662:	f003 0301 	and.w	r3, r3, #1
 8004666:	2b00      	cmp	r3, #0
 8004668:	d016      	beq.n	8004698 <HAL_RCCEx_PeriphCLKConfig+0x10c>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800466a:	f7fc ff53 	bl	8001514 <HAL_GetTick>
 800466e:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004670:	e00b      	b.n	800468a <HAL_RCCEx_PeriphCLKConfig+0xfe>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004672:	f7fc ff4f 	bl	8001514 <HAL_GetTick>
 8004676:	4602      	mov	r2, r0
 8004678:	68fb      	ldr	r3, [r7, #12]
 800467a:	1ad3      	subs	r3, r2, r3
 800467c:	f241 3288 	movw	r2, #5000	; 0x1388
 8004680:	4293      	cmp	r3, r2
 8004682:	d902      	bls.n	800468a <HAL_RCCEx_PeriphCLKConfig+0xfe>
          {
            ret = HAL_TIMEOUT;
 8004684:	2303      	movs	r3, #3
 8004686:	74fb      	strb	r3, [r7, #19]
            break;
 8004688:	e006      	b.n	8004698 <HAL_RCCEx_PeriphCLKConfig+0x10c>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800468a:	4b0c      	ldr	r3, [pc, #48]	; (80046bc <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800468c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004690:	f003 0302 	and.w	r3, r3, #2
 8004694:	2b00      	cmp	r3, #0
 8004696:	d0ec      	beq.n	8004672 <HAL_RCCEx_PeriphCLKConfig+0xe6>
          }
        }
      }
      
      if(ret == HAL_OK)
 8004698:	7cfb      	ldrb	r3, [r7, #19]
 800469a:	2b00      	cmp	r3, #0
 800469c:	d10b      	bne.n	80046b6 <HAL_RCCEx_PeriphCLKConfig+0x12a>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800469e:	4b07      	ldr	r3, [pc, #28]	; (80046bc <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80046a0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80046a4:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80046a8:	687b      	ldr	r3, [r7, #4]
 80046aa:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80046ac:	4903      	ldr	r1, [pc, #12]	; (80046bc <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80046ae:	4313      	orrs	r3, r2
 80046b0:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 80046b4:	e008      	b.n	80046c8 <HAL_RCCEx_PeriphCLKConfig+0x13c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 80046b6:	7cfb      	ldrb	r3, [r7, #19]
 80046b8:	74bb      	strb	r3, [r7, #18]
 80046ba:	e005      	b.n	80046c8 <HAL_RCCEx_PeriphCLKConfig+0x13c>
 80046bc:	40021000 	.word	0x40021000
 80046c0:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 80046c4:	7cfb      	ldrb	r3, [r7, #19]
 80046c6:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80046c8:	7c7b      	ldrb	r3, [r7, #17]
 80046ca:	2b01      	cmp	r3, #1
 80046cc:	d105      	bne.n	80046da <HAL_RCCEx_PeriphCLKConfig+0x14e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80046ce:	4baf      	ldr	r3, [pc, #700]	; (800498c <HAL_RCCEx_PeriphCLKConfig+0x400>)
 80046d0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80046d2:	4aae      	ldr	r2, [pc, #696]	; (800498c <HAL_RCCEx_PeriphCLKConfig+0x400>)
 80046d4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80046d8:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80046da:	687b      	ldr	r3, [r7, #4]
 80046dc:	681b      	ldr	r3, [r3, #0]
 80046de:	f003 0301 	and.w	r3, r3, #1
 80046e2:	2b00      	cmp	r3, #0
 80046e4:	d00a      	beq.n	80046fc <HAL_RCCEx_PeriphCLKConfig+0x170>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80046e6:	4ba9      	ldr	r3, [pc, #676]	; (800498c <HAL_RCCEx_PeriphCLKConfig+0x400>)
 80046e8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80046ec:	f023 0203 	bic.w	r2, r3, #3
 80046f0:	687b      	ldr	r3, [r7, #4]
 80046f2:	685b      	ldr	r3, [r3, #4]
 80046f4:	49a5      	ldr	r1, [pc, #660]	; (800498c <HAL_RCCEx_PeriphCLKConfig+0x400>)
 80046f6:	4313      	orrs	r3, r2
 80046f8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80046fc:	687b      	ldr	r3, [r7, #4]
 80046fe:	681b      	ldr	r3, [r3, #0]
 8004700:	f003 0302 	and.w	r3, r3, #2
 8004704:	2b00      	cmp	r3, #0
 8004706:	d00a      	beq.n	800471e <HAL_RCCEx_PeriphCLKConfig+0x192>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8004708:	4ba0      	ldr	r3, [pc, #640]	; (800498c <HAL_RCCEx_PeriphCLKConfig+0x400>)
 800470a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800470e:	f023 020c 	bic.w	r2, r3, #12
 8004712:	687b      	ldr	r3, [r7, #4]
 8004714:	689b      	ldr	r3, [r3, #8]
 8004716:	499d      	ldr	r1, [pc, #628]	; (800498c <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8004718:	4313      	orrs	r3, r2
 800471a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 800471e:	687b      	ldr	r3, [r7, #4]
 8004720:	681b      	ldr	r3, [r3, #0]
 8004722:	f003 0304 	and.w	r3, r3, #4
 8004726:	2b00      	cmp	r3, #0
 8004728:	d00a      	beq.n	8004740 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 800472a:	4b98      	ldr	r3, [pc, #608]	; (800498c <HAL_RCCEx_PeriphCLKConfig+0x400>)
 800472c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004730:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8004734:	687b      	ldr	r3, [r7, #4]
 8004736:	68db      	ldr	r3, [r3, #12]
 8004738:	4994      	ldr	r1, [pc, #592]	; (800498c <HAL_RCCEx_PeriphCLKConfig+0x400>)
 800473a:	4313      	orrs	r3, r2
 800473c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(UART4)
  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8004740:	687b      	ldr	r3, [r7, #4]
 8004742:	681b      	ldr	r3, [r3, #0]
 8004744:	f003 0308 	and.w	r3, r3, #8
 8004748:	2b00      	cmp	r3, #0
 800474a:	d00a      	beq.n	8004762 <HAL_RCCEx_PeriphCLKConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 800474c:	4b8f      	ldr	r3, [pc, #572]	; (800498c <HAL_RCCEx_PeriphCLKConfig+0x400>)
 800474e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004752:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8004756:	687b      	ldr	r3, [r7, #4]
 8004758:	691b      	ldr	r3, [r3, #16]
 800475a:	498c      	ldr	r1, [pc, #560]	; (800498c <HAL_RCCEx_PeriphCLKConfig+0x400>)
 800475c:	4313      	orrs	r3, r2
 800475e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8004762:	687b      	ldr	r3, [r7, #4]
 8004764:	681b      	ldr	r3, [r3, #0]
 8004766:	f003 0310 	and.w	r3, r3, #16
 800476a:	2b00      	cmp	r3, #0
 800476c:	d00a      	beq.n	8004784 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 800476e:	4b87      	ldr	r3, [pc, #540]	; (800498c <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8004770:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004774:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8004778:	687b      	ldr	r3, [r7, #4]
 800477a:	695b      	ldr	r3, [r3, #20]
 800477c:	4983      	ldr	r1, [pc, #524]	; (800498c <HAL_RCCEx_PeriphCLKConfig+0x400>)
 800477e:	4313      	orrs	r3, r2
 8004780:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8004784:	687b      	ldr	r3, [r7, #4]
 8004786:	681b      	ldr	r3, [r3, #0]
 8004788:	f003 0320 	and.w	r3, r3, #32
 800478c:	2b00      	cmp	r3, #0
 800478e:	d00a      	beq.n	80047a6 <HAL_RCCEx_PeriphCLKConfig+0x21a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8004790:	4b7e      	ldr	r3, [pc, #504]	; (800498c <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8004792:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004796:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 800479a:	687b      	ldr	r3, [r7, #4]
 800479c:	699b      	ldr	r3, [r3, #24]
 800479e:	497b      	ldr	r1, [pc, #492]	; (800498c <HAL_RCCEx_PeriphCLKConfig+0x400>)
 80047a0:	4313      	orrs	r3, r2
 80047a2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80047a6:	687b      	ldr	r3, [r7, #4]
 80047a8:	681b      	ldr	r3, [r3, #0]
 80047aa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80047ae:	2b00      	cmp	r3, #0
 80047b0:	d00a      	beq.n	80047c8 <HAL_RCCEx_PeriphCLKConfig+0x23c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80047b2:	4b76      	ldr	r3, [pc, #472]	; (800498c <HAL_RCCEx_PeriphCLKConfig+0x400>)
 80047b4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80047b8:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 80047bc:	687b      	ldr	r3, [r7, #4]
 80047be:	69db      	ldr	r3, [r3, #28]
 80047c0:	4972      	ldr	r1, [pc, #456]	; (800498c <HAL_RCCEx_PeriphCLKConfig+0x400>)
 80047c2:	4313      	orrs	r3, r2
 80047c4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80047c8:	687b      	ldr	r3, [r7, #4]
 80047ca:	681b      	ldr	r3, [r3, #0]
 80047cc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80047d0:	2b00      	cmp	r3, #0
 80047d2:	d00a      	beq.n	80047ea <HAL_RCCEx_PeriphCLKConfig+0x25e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 80047d4:	4b6d      	ldr	r3, [pc, #436]	; (800498c <HAL_RCCEx_PeriphCLKConfig+0x400>)
 80047d6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80047da:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 80047de:	687b      	ldr	r3, [r7, #4]
 80047e0:	6a1b      	ldr	r3, [r3, #32]
 80047e2:	496a      	ldr	r1, [pc, #424]	; (800498c <HAL_RCCEx_PeriphCLKConfig+0x400>)
 80047e4:	4313      	orrs	r3, r2
 80047e6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80047ea:	687b      	ldr	r3, [r7, #4]
 80047ec:	681b      	ldr	r3, [r3, #0]
 80047ee:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80047f2:	2b00      	cmp	r3, #0
 80047f4:	d00a      	beq.n	800480c <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80047f6:	4b65      	ldr	r3, [pc, #404]	; (800498c <HAL_RCCEx_PeriphCLKConfig+0x400>)
 80047f8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80047fc:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8004800:	687b      	ldr	r3, [r7, #4]
 8004802:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004804:	4961      	ldr	r1, [pc, #388]	; (800498c <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8004806:	4313      	orrs	r3, r2
 8004808:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C4)  

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 800480c:	687b      	ldr	r3, [r7, #4]
 800480e:	681b      	ldr	r3, [r3, #0]
 8004810:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004814:	2b00      	cmp	r3, #0
 8004816:	d00a      	beq.n	800482e <HAL_RCCEx_PeriphCLKConfig+0x2a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8004818:	4b5c      	ldr	r3, [pc, #368]	; (800498c <HAL_RCCEx_PeriphCLKConfig+0x400>)
 800481a:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800481e:	f023 0203 	bic.w	r2, r3, #3
 8004822:	687b      	ldr	r3, [r7, #4]
 8004824:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004826:	4959      	ldr	r1, [pc, #356]	; (800498c <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8004828:	4313      	orrs	r3, r2
 800482a:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
  }

#endif /* I2C4 */

  /*-------------------------- LPTIM1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 800482e:	687b      	ldr	r3, [r7, #4]
 8004830:	681b      	ldr	r3, [r3, #0]
 8004832:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004836:	2b00      	cmp	r3, #0
 8004838:	d00a      	beq.n	8004850 <HAL_RCCEx_PeriphCLKConfig+0x2c4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800483a:	4b54      	ldr	r3, [pc, #336]	; (800498c <HAL_RCCEx_PeriphCLKConfig+0x400>)
 800483c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004840:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8004844:	687b      	ldr	r3, [r7, #4]
 8004846:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004848:	4950      	ldr	r1, [pc, #320]	; (800498c <HAL_RCCEx_PeriphCLKConfig+0x400>)
 800484a:	4313      	orrs	r3, r2
 800484c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8004850:	687b      	ldr	r3, [r7, #4]
 8004852:	681b      	ldr	r3, [r3, #0]
 8004854:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004858:	2b00      	cmp	r3, #0
 800485a:	d015      	beq.n	8004888 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure the SAI1 interface clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800485c:	4b4b      	ldr	r3, [pc, #300]	; (800498c <HAL_RCCEx_PeriphCLKConfig+0x400>)
 800485e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004862:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8004866:	687b      	ldr	r3, [r7, #4]
 8004868:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800486a:	4948      	ldr	r1, [pc, #288]	; (800498c <HAL_RCCEx_PeriphCLKConfig+0x400>)
 800486c:	4313      	orrs	r3, r2
 800486e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLL)
 8004872:	687b      	ldr	r3, [r7, #4]
 8004874:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004876:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800487a:	d105      	bne.n	8004888 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800487c:	4b43      	ldr	r3, [pc, #268]	; (800498c <HAL_RCCEx_PeriphCLKConfig+0x400>)
 800487e:	68db      	ldr	r3, [r3, #12]
 8004880:	4a42      	ldr	r2, [pc, #264]	; (800498c <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8004882:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8004886:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- I2S clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 8004888:	687b      	ldr	r3, [r7, #4]
 800488a:	681b      	ldr	r3, [r3, #0]
 800488c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004890:	2b00      	cmp	r3, #0
 8004892:	d015      	beq.n	80048c0 <HAL_RCCEx_PeriphCLKConfig+0x334>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure the I2S interface clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8004894:	4b3d      	ldr	r3, [pc, #244]	; (800498c <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8004896:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800489a:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 800489e:	687b      	ldr	r3, [r7, #4]
 80048a0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80048a2:	493a      	ldr	r1, [pc, #232]	; (800498c <HAL_RCCEx_PeriphCLKConfig+0x400>)
 80048a4:	4313      	orrs	r3, r2
 80048a6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLL)
 80048aa:	687b      	ldr	r3, [r7, #4]
 80048ac:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80048ae:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80048b2:	d105      	bne.n	80048c0 <HAL_RCCEx_PeriphCLKConfig+0x334>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80048b4:	4b35      	ldr	r3, [pc, #212]	; (800498c <HAL_RCCEx_PeriphCLKConfig+0x400>)
 80048b6:	68db      	ldr	r3, [r3, #12]
 80048b8:	4a34      	ldr	r2, [pc, #208]	; (800498c <HAL_RCCEx_PeriphCLKConfig+0x400>)
 80048ba:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80048be:	60d3      	str	r3, [r2, #12]
    }
  }

#if defined(FDCAN1)
  /*-------------------------- FDCAN clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 80048c0:	687b      	ldr	r3, [r7, #4]
 80048c2:	681b      	ldr	r3, [r3, #0]
 80048c4:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80048c8:	2b00      	cmp	r3, #0
 80048ca:	d015      	beq.n	80048f8 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN interface clock source */
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 80048cc:	4b2f      	ldr	r3, [pc, #188]	; (800498c <HAL_RCCEx_PeriphCLKConfig+0x400>)
 80048ce:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80048d2:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 80048d6:	687b      	ldr	r3, [r7, #4]
 80048d8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80048da:	492c      	ldr	r1, [pc, #176]	; (800498c <HAL_RCCEx_PeriphCLKConfig+0x400>)
 80048dc:	4313      	orrs	r3, r2
 80048de:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 80048e2:	687b      	ldr	r3, [r7, #4]
 80048e4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80048e6:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80048ea:	d105      	bne.n	80048f8 <HAL_RCCEx_PeriphCLKConfig+0x36c>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80048ec:	4b27      	ldr	r3, [pc, #156]	; (800498c <HAL_RCCEx_PeriphCLKConfig+0x400>)
 80048ee:	68db      	ldr	r3, [r3, #12]
 80048f0:	4a26      	ldr	r2, [pc, #152]	; (800498c <HAL_RCCEx_PeriphCLKConfig+0x400>)
 80048f2:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80048f6:	60d3      	str	r3, [r2, #12]
#endif /* FDCAN1 */

#if defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 80048f8:	687b      	ldr	r3, [r7, #4]
 80048fa:	681b      	ldr	r3, [r3, #0]
 80048fc:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8004900:	2b00      	cmp	r3, #0
 8004902:	d015      	beq.n	8004930 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8004904:	4b21      	ldr	r3, [pc, #132]	; (800498c <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8004906:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800490a:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 800490e:	687b      	ldr	r3, [r7, #4]
 8004910:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004912:	491e      	ldr	r1, [pc, #120]	; (800498c <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8004914:	4313      	orrs	r3, r2
 8004916:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 800491a:	687b      	ldr	r3, [r7, #4]
 800491c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800491e:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004922:	d105      	bne.n	8004930 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004924:	4b19      	ldr	r3, [pc, #100]	; (800498c <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8004926:	68db      	ldr	r3, [r3, #12]
 8004928:	4a18      	ldr	r2, [pc, #96]	; (800498c <HAL_RCCEx_PeriphCLKConfig+0x400>)
 800492a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800492e:	60d3      	str	r3, [r2, #12]
  }

#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8004930:	687b      	ldr	r3, [r7, #4]
 8004932:	681b      	ldr	r3, [r3, #0]
 8004934:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004938:	2b00      	cmp	r3, #0
 800493a:	d015      	beq.n	8004968 <HAL_RCCEx_PeriphCLKConfig+0x3dc>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 800493c:	4b13      	ldr	r3, [pc, #76]	; (800498c <HAL_RCCEx_PeriphCLKConfig+0x400>)
 800493e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004942:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8004946:	687b      	ldr	r3, [r7, #4]
 8004948:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800494a:	4910      	ldr	r1, [pc, #64]	; (800498c <HAL_RCCEx_PeriphCLKConfig+0x400>)
 800494c:	4313      	orrs	r3, r2
 800494e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8004952:	687b      	ldr	r3, [r7, #4]
 8004954:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004956:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800495a:	d105      	bne.n	8004968 <HAL_RCCEx_PeriphCLKConfig+0x3dc>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800495c:	4b0b      	ldr	r3, [pc, #44]	; (800498c <HAL_RCCEx_PeriphCLKConfig+0x400>)
 800495e:	68db      	ldr	r3, [r3, #12]
 8004960:	4a0a      	ldr	r2, [pc, #40]	; (800498c <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8004962:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8004966:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- ADC12 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 8004968:	687b      	ldr	r3, [r7, #4]
 800496a:	681b      	ldr	r3, [r3, #0]
 800496c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8004970:	2b00      	cmp	r3, #0
 8004972:	d018      	beq.n	80049a6 <HAL_RCCEx_PeriphCLKConfig+0x41a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12CLKSOURCE(PeriphClkInit->Adc12ClockSelection));

    /* Configure the ADC12 interface clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 8004974:	4b05      	ldr	r3, [pc, #20]	; (800498c <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8004976:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800497a:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 800497e:	687b      	ldr	r3, [r7, #4]
 8004980:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004982:	4902      	ldr	r1, [pc, #8]	; (800498c <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8004984:	4313      	orrs	r3, r2
 8004986:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 800498a:	e001      	b.n	8004990 <HAL_RCCEx_PeriphCLKConfig+0x404>
 800498c:	40021000 	.word	0x40021000
    
    if(PeriphClkInit->Adc12ClockSelection == RCC_ADC12CLKSOURCE_PLL)
 8004990:	687b      	ldr	r3, [r7, #4]
 8004992:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004994:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8004998:	d105      	bne.n	80049a6 <HAL_RCCEx_PeriphCLKConfig+0x41a>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 800499a:	4b21      	ldr	r3, [pc, #132]	; (8004a20 <HAL_RCCEx_PeriphCLKConfig+0x494>)
 800499c:	68db      	ldr	r3, [r3, #12]
 800499e:	4a20      	ldr	r2, [pc, #128]	; (8004a20 <HAL_RCCEx_PeriphCLKConfig+0x494>)
 80049a0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80049a4:	60d3      	str	r3, [r2, #12]
    }
  }
  
#if defined(ADC345_COMMON)
  /*-------------------------- ADC345 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC345) == RCC_PERIPHCLK_ADC345)
 80049a6:	687b      	ldr	r3, [r7, #4]
 80049a8:	681b      	ldr	r3, [r3, #0]
 80049aa:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80049ae:	2b00      	cmp	r3, #0
 80049b0:	d015      	beq.n	80049de <HAL_RCCEx_PeriphCLKConfig+0x452>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC345CLKSOURCE(PeriphClkInit->Adc345ClockSelection));

    /* Configure the ADC345 interface clock source */
    __HAL_RCC_ADC345_CONFIG(PeriphClkInit->Adc345ClockSelection);
 80049b2:	4b1b      	ldr	r3, [pc, #108]	; (8004a20 <HAL_RCCEx_PeriphCLKConfig+0x494>)
 80049b4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80049b8:	f023 4240 	bic.w	r2, r3, #3221225472	; 0xc0000000
 80049bc:	687b      	ldr	r3, [r7, #4]
 80049be:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80049c0:	4917      	ldr	r1, [pc, #92]	; (8004a20 <HAL_RCCEx_PeriphCLKConfig+0x494>)
 80049c2:	4313      	orrs	r3, r2
 80049c4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Adc345ClockSelection == RCC_ADC345CLKSOURCE_PLL)
 80049c8:	687b      	ldr	r3, [r7, #4]
 80049ca:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80049cc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80049d0:	d105      	bne.n	80049de <HAL_RCCEx_PeriphCLKConfig+0x452>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 80049d2:	4b13      	ldr	r3, [pc, #76]	; (8004a20 <HAL_RCCEx_PeriphCLKConfig+0x494>)
 80049d4:	68db      	ldr	r3, [r3, #12]
 80049d6:	4a12      	ldr	r2, [pc, #72]	; (8004a20 <HAL_RCCEx_PeriphCLKConfig+0x494>)
 80049d8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80049dc:	60d3      	str	r3, [r2, #12]
#endif /* ADC345_COMMON */

#if defined(QUADSPI)

  /*-------------------------- QuadSPIx clock source configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 80049de:	687b      	ldr	r3, [r7, #4]
 80049e0:	681b      	ldr	r3, [r3, #0]
 80049e2:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80049e6:	2b00      	cmp	r3, #0
 80049e8:	d015      	beq.n	8004a16 <HAL_RCCEx_PeriphCLKConfig+0x48a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_QSPICLKSOURCE(PeriphClkInit->QspiClockSelection));

    /* Configure the QuadSPI clock source */
    __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 80049ea:	4b0d      	ldr	r3, [pc, #52]	; (8004a20 <HAL_RCCEx_PeriphCLKConfig+0x494>)
 80049ec:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80049f0:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80049f4:	687b      	ldr	r3, [r7, #4]
 80049f6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80049f8:	4909      	ldr	r1, [pc, #36]	; (8004a20 <HAL_RCCEx_PeriphCLKConfig+0x494>)
 80049fa:	4313      	orrs	r3, r2
 80049fc:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c

    if(PeriphClkInit->QspiClockSelection == RCC_QSPICLKSOURCE_PLL)
 8004a00:	687b      	ldr	r3, [r7, #4]
 8004a02:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004a04:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8004a08:	d105      	bne.n	8004a16 <HAL_RCCEx_PeriphCLKConfig+0x48a>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004a0a:	4b05      	ldr	r3, [pc, #20]	; (8004a20 <HAL_RCCEx_PeriphCLKConfig+0x494>)
 8004a0c:	68db      	ldr	r3, [r3, #12]
 8004a0e:	4a04      	ldr	r2, [pc, #16]	; (8004a20 <HAL_RCCEx_PeriphCLKConfig+0x494>)
 8004a10:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8004a14:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* QUADSPI */

  return status;
 8004a16:	7cbb      	ldrb	r3, [r7, #18]
}
 8004a18:	4618      	mov	r0, r3
 8004a1a:	3718      	adds	r7, #24
 8004a1c:	46bd      	mov	sp, r7
 8004a1e:	bd80      	pop	{r7, pc}
 8004a20:	40021000 	.word	0x40021000

08004a24 <HAL_RNG_Init>:
  * @param  hrng pointer to a RNG_HandleTypeDef structure that contains
  *                the configuration information for RNG.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RNG_Init(RNG_HandleTypeDef *hrng)
{
 8004a24:	b580      	push	{r7, lr}
 8004a26:	b082      	sub	sp, #8
 8004a28:	af00      	add	r7, sp, #0
 8004a2a:	6078      	str	r0, [r7, #4]
  /* Check the RNG handle allocation */
  if (hrng == NULL)
 8004a2c:	687b      	ldr	r3, [r7, #4]
 8004a2e:	2b00      	cmp	r3, #0
 8004a30:	d101      	bne.n	8004a36 <HAL_RNG_Init+0x12>
  {
    return HAL_ERROR;
 8004a32:	2301      	movs	r3, #1
 8004a34:	e027      	b.n	8004a86 <HAL_RNG_Init+0x62>

    /* Init the low level hardware */
    hrng->MspInitCallback(hrng);
  }
#else
  if (hrng->State == HAL_RNG_STATE_RESET)
 8004a36:	687b      	ldr	r3, [r7, #4]
 8004a38:	7a5b      	ldrb	r3, [r3, #9]
 8004a3a:	b2db      	uxtb	r3, r3
 8004a3c:	2b00      	cmp	r3, #0
 8004a3e:	d105      	bne.n	8004a4c <HAL_RNG_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hrng->Lock = HAL_UNLOCKED;
 8004a40:	687b      	ldr	r3, [r7, #4]
 8004a42:	2200      	movs	r2, #0
 8004a44:	721a      	strb	r2, [r3, #8]

    /* Init the low level hardware */
    HAL_RNG_MspInit(hrng);
 8004a46:	6878      	ldr	r0, [r7, #4]
 8004a48:	f7fc f8fc 	bl	8000c44 <HAL_RNG_MspInit>
  }
#endif /* USE_HAL_RNG_REGISTER_CALLBACKS */

  /* Change RNG peripheral state */
  hrng->State = HAL_RNG_STATE_BUSY;
 8004a4c:	687b      	ldr	r3, [r7, #4]
 8004a4e:	2202      	movs	r2, #2
 8004a50:	725a      	strb	r2, [r3, #9]

  /* Clock Error Detection Configuration */
  MODIFY_REG(hrng->Instance->CR, RNG_CR_CED, hrng->Init.ClockErrorDetection);
 8004a52:	687b      	ldr	r3, [r7, #4]
 8004a54:	681b      	ldr	r3, [r3, #0]
 8004a56:	681b      	ldr	r3, [r3, #0]
 8004a58:	f023 0108 	bic.w	r1, r3, #8
 8004a5c:	687b      	ldr	r3, [r7, #4]
 8004a5e:	685a      	ldr	r2, [r3, #4]
 8004a60:	687b      	ldr	r3, [r7, #4]
 8004a62:	681b      	ldr	r3, [r3, #0]
 8004a64:	430a      	orrs	r2, r1
 8004a66:	601a      	str	r2, [r3, #0]

  /* Enable the RNG Peripheral */
  __HAL_RNG_ENABLE(hrng);
 8004a68:	687b      	ldr	r3, [r7, #4]
 8004a6a:	681b      	ldr	r3, [r3, #0]
 8004a6c:	681a      	ldr	r2, [r3, #0]
 8004a6e:	687b      	ldr	r3, [r7, #4]
 8004a70:	681b      	ldr	r3, [r3, #0]
 8004a72:	f042 0204 	orr.w	r2, r2, #4
 8004a76:	601a      	str	r2, [r3, #0]

  /* Initialize the RNG state */
  hrng->State = HAL_RNG_STATE_READY;
 8004a78:	687b      	ldr	r3, [r7, #4]
 8004a7a:	2201      	movs	r2, #1
 8004a7c:	725a      	strb	r2, [r3, #9]

  /* Initialise the error code */
  hrng->ErrorCode = HAL_RNG_ERROR_NONE;
 8004a7e:	687b      	ldr	r3, [r7, #4]
 8004a80:	2200      	movs	r2, #0
 8004a82:	60da      	str	r2, [r3, #12]

  /* Return function status */
  return HAL_OK;
 8004a84:	2300      	movs	r3, #0
}
 8004a86:	4618      	mov	r0, r3
 8004a88:	3708      	adds	r7, #8
 8004a8a:	46bd      	mov	sp, r7
 8004a8c:	bd80      	pop	{r7, pc}

08004a8e <HAL_RNG_GenerateRandomNumber>:
  * @param  random32bit pointer to generated random number variable if successful.
  * @retval HAL status
  */

HAL_StatusTypeDef HAL_RNG_GenerateRandomNumber(RNG_HandleTypeDef *hrng, uint32_t *random32bit)
{
 8004a8e:	b580      	push	{r7, lr}
 8004a90:	b084      	sub	sp, #16
 8004a92:	af00      	add	r7, sp, #0
 8004a94:	6078      	str	r0, [r7, #4]
 8004a96:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8004a98:	2300      	movs	r3, #0
 8004a9a:	73fb      	strb	r3, [r7, #15]

  /* Process Locked */
  __HAL_LOCK(hrng);
 8004a9c:	687b      	ldr	r3, [r7, #4]
 8004a9e:	7a1b      	ldrb	r3, [r3, #8]
 8004aa0:	2b01      	cmp	r3, #1
 8004aa2:	d101      	bne.n	8004aa8 <HAL_RNG_GenerateRandomNumber+0x1a>
 8004aa4:	2302      	movs	r3, #2
 8004aa6:	e03d      	b.n	8004b24 <HAL_RNG_GenerateRandomNumber+0x96>
 8004aa8:	687b      	ldr	r3, [r7, #4]
 8004aaa:	2201      	movs	r2, #1
 8004aac:	721a      	strb	r2, [r3, #8]

  /* Check RNG peripheral state */
  if (hrng->State == HAL_RNG_STATE_READY)
 8004aae:	687b      	ldr	r3, [r7, #4]
 8004ab0:	7a5b      	ldrb	r3, [r3, #9]
 8004ab2:	b2db      	uxtb	r3, r3
 8004ab4:	2b01      	cmp	r3, #1
 8004ab6:	d12c      	bne.n	8004b12 <HAL_RNG_GenerateRandomNumber+0x84>
  {
    /* Change RNG peripheral state */
    hrng->State = HAL_RNG_STATE_BUSY;
 8004ab8:	687b      	ldr	r3, [r7, #4]
 8004aba:	2202      	movs	r2, #2
 8004abc:	725a      	strb	r2, [r3, #9]

    /* Get tick */
    tickstart = HAL_GetTick();
 8004abe:	f7fc fd29 	bl	8001514 <HAL_GetTick>
 8004ac2:	60b8      	str	r0, [r7, #8]

    /* Check if data register contains valid random data */
    while (__HAL_RNG_GET_FLAG(hrng, RNG_FLAG_DRDY) == RESET)
 8004ac4:	e011      	b.n	8004aea <HAL_RNG_GenerateRandomNumber+0x5c>
    {
      if ((HAL_GetTick() - tickstart) > RNG_TIMEOUT_VALUE)
 8004ac6:	f7fc fd25 	bl	8001514 <HAL_GetTick>
 8004aca:	4602      	mov	r2, r0
 8004acc:	68bb      	ldr	r3, [r7, #8]
 8004ace:	1ad3      	subs	r3, r2, r3
 8004ad0:	2b02      	cmp	r3, #2
 8004ad2:	d90a      	bls.n	8004aea <HAL_RNG_GenerateRandomNumber+0x5c>
      {
        hrng->State = HAL_RNG_STATE_READY;
 8004ad4:	687b      	ldr	r3, [r7, #4]
 8004ad6:	2201      	movs	r2, #1
 8004ad8:	725a      	strb	r2, [r3, #9]
        hrng->ErrorCode = HAL_RNG_ERROR_TIMEOUT;
 8004ada:	687b      	ldr	r3, [r7, #4]
 8004adc:	2202      	movs	r2, #2
 8004ade:	60da      	str	r2, [r3, #12]
        /* Process Unlocked */
        __HAL_UNLOCK(hrng);
 8004ae0:	687b      	ldr	r3, [r7, #4]
 8004ae2:	2200      	movs	r2, #0
 8004ae4:	721a      	strb	r2, [r3, #8]
        return HAL_ERROR;
 8004ae6:	2301      	movs	r3, #1
 8004ae8:	e01c      	b.n	8004b24 <HAL_RNG_GenerateRandomNumber+0x96>
    while (__HAL_RNG_GET_FLAG(hrng, RNG_FLAG_DRDY) == RESET)
 8004aea:	687b      	ldr	r3, [r7, #4]
 8004aec:	681b      	ldr	r3, [r3, #0]
 8004aee:	685b      	ldr	r3, [r3, #4]
 8004af0:	f003 0301 	and.w	r3, r3, #1
 8004af4:	2b01      	cmp	r3, #1
 8004af6:	d1e6      	bne.n	8004ac6 <HAL_RNG_GenerateRandomNumber+0x38>
      }
    }

    /* Get a 32bit Random number */
    hrng->RandomNumber = hrng->Instance->DR;
 8004af8:	687b      	ldr	r3, [r7, #4]
 8004afa:	681b      	ldr	r3, [r3, #0]
 8004afc:	689a      	ldr	r2, [r3, #8]
 8004afe:	687b      	ldr	r3, [r7, #4]
 8004b00:	611a      	str	r2, [r3, #16]
    *random32bit = hrng->RandomNumber;
 8004b02:	687b      	ldr	r3, [r7, #4]
 8004b04:	691a      	ldr	r2, [r3, #16]
 8004b06:	683b      	ldr	r3, [r7, #0]
 8004b08:	601a      	str	r2, [r3, #0]

    hrng->State = HAL_RNG_STATE_READY;
 8004b0a:	687b      	ldr	r3, [r7, #4]
 8004b0c:	2201      	movs	r2, #1
 8004b0e:	725a      	strb	r2, [r3, #9]
 8004b10:	e004      	b.n	8004b1c <HAL_RNG_GenerateRandomNumber+0x8e>
  }
  else
  {
    hrng->ErrorCode = HAL_RNG_ERROR_BUSY;
 8004b12:	687b      	ldr	r3, [r7, #4]
 8004b14:	2204      	movs	r2, #4
 8004b16:	60da      	str	r2, [r3, #12]
    status = HAL_ERROR;
 8004b18:	2301      	movs	r3, #1
 8004b1a:	73fb      	strb	r3, [r7, #15]
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hrng);
 8004b1c:	687b      	ldr	r3, [r7, #4]
 8004b1e:	2200      	movs	r2, #0
 8004b20:	721a      	strb	r2, [r3, #8]

  return status;
 8004b22:	7bfb      	ldrb	r3, [r7, #15]
}
 8004b24:	4618      	mov	r0, r3
 8004b26:	3710      	adds	r7, #16
 8004b28:	46bd      	mov	sp, r7
 8004b2a:	bd80      	pop	{r7, pc}

08004b2c <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8004b2c:	b580      	push	{r7, lr}
 8004b2e:	b084      	sub	sp, #16
 8004b30:	af00      	add	r7, sp, #0
 8004b32:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8004b34:	687b      	ldr	r3, [r7, #4]
 8004b36:	2b00      	cmp	r3, #0
 8004b38:	d101      	bne.n	8004b3e <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8004b3a:	2301      	movs	r3, #1
 8004b3c:	e084      	b.n	8004c48 <HAL_SPI_Init+0x11c>
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8004b3e:	687b      	ldr	r3, [r7, #4]
 8004b40:	2200      	movs	r2, #0
 8004b42:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8004b44:	687b      	ldr	r3, [r7, #4]
 8004b46:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8004b4a:	b2db      	uxtb	r3, r3
 8004b4c:	2b00      	cmp	r3, #0
 8004b4e:	d106      	bne.n	8004b5e <HAL_SPI_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8004b50:	687b      	ldr	r3, [r7, #4]
 8004b52:	2200      	movs	r2, #0
 8004b54:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8004b58:	6878      	ldr	r0, [r7, #4]
 8004b5a:	f7fc f8d1 	bl	8000d00 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8004b5e:	687b      	ldr	r3, [r7, #4]
 8004b60:	2202      	movs	r2, #2
 8004b62:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8004b66:	687b      	ldr	r3, [r7, #4]
 8004b68:	681b      	ldr	r3, [r3, #0]
 8004b6a:	681a      	ldr	r2, [r3, #0]
 8004b6c:	687b      	ldr	r3, [r7, #4]
 8004b6e:	681b      	ldr	r3, [r3, #0]
 8004b70:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004b74:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8004b76:	687b      	ldr	r3, [r7, #4]
 8004b78:	68db      	ldr	r3, [r3, #12]
 8004b7a:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8004b7e:	d902      	bls.n	8004b86 <HAL_SPI_Init+0x5a>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8004b80:	2300      	movs	r3, #0
 8004b82:	60fb      	str	r3, [r7, #12]
 8004b84:	e002      	b.n	8004b8c <HAL_SPI_Init+0x60>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8004b86:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8004b8a:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8004b8c:	687b      	ldr	r3, [r7, #4]
 8004b8e:	68db      	ldr	r3, [r3, #12]
 8004b90:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 8004b94:	d007      	beq.n	8004ba6 <HAL_SPI_Init+0x7a>
 8004b96:	687b      	ldr	r3, [r7, #4]
 8004b98:	68db      	ldr	r3, [r3, #12]
 8004b9a:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8004b9e:	d002      	beq.n	8004ba6 <HAL_SPI_Init+0x7a>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8004ba0:	687b      	ldr	r3, [r7, #4]
 8004ba2:	2200      	movs	r2, #0
 8004ba4:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Align the CRC Length on the data size */
  if (hspi->Init.CRCLength == SPI_CRC_LENGTH_DATASIZE)
 8004ba6:	687b      	ldr	r3, [r7, #4]
 8004ba8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004baa:	2b00      	cmp	r3, #0
 8004bac:	d10b      	bne.n	8004bc6 <HAL_SPI_Init+0x9a>
  {
    /* CRC Length aligned on the data size : value set by default */
    if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8004bae:	687b      	ldr	r3, [r7, #4]
 8004bb0:	68db      	ldr	r3, [r3, #12]
 8004bb2:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8004bb6:	d903      	bls.n	8004bc0 <HAL_SPI_Init+0x94>
    {
      hspi->Init.CRCLength = SPI_CRC_LENGTH_16BIT;
 8004bb8:	687b      	ldr	r3, [r7, #4]
 8004bba:	2202      	movs	r2, #2
 8004bbc:	631a      	str	r2, [r3, #48]	; 0x30
 8004bbe:	e002      	b.n	8004bc6 <HAL_SPI_Init+0x9a>
    }
    else
    {
      hspi->Init.CRCLength = SPI_CRC_LENGTH_8BIT;
 8004bc0:	687b      	ldr	r3, [r7, #4]
 8004bc2:	2201      	movs	r2, #1
 8004bc4:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction |
 8004bc6:	687b      	ldr	r3, [r7, #4]
 8004bc8:	685a      	ldr	r2, [r3, #4]
 8004bca:	687b      	ldr	r3, [r7, #4]
 8004bcc:	689b      	ldr	r3, [r3, #8]
 8004bce:	431a      	orrs	r2, r3
 8004bd0:	687b      	ldr	r3, [r7, #4]
 8004bd2:	691b      	ldr	r3, [r3, #16]
 8004bd4:	431a      	orrs	r2, r3
 8004bd6:	687b      	ldr	r3, [r7, #4]
 8004bd8:	695b      	ldr	r3, [r3, #20]
 8004bda:	431a      	orrs	r2, r3
 8004bdc:	687b      	ldr	r3, [r7, #4]
 8004bde:	699b      	ldr	r3, [r3, #24]
 8004be0:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004be4:	431a      	orrs	r2, r3
 8004be6:	687b      	ldr	r3, [r7, #4]
 8004be8:	69db      	ldr	r3, [r3, #28]
 8004bea:	431a      	orrs	r2, r3
 8004bec:	687b      	ldr	r3, [r7, #4]
 8004bee:	6a1b      	ldr	r3, [r3, #32]
 8004bf0:	ea42 0103 	orr.w	r1, r2, r3
 8004bf4:	687b      	ldr	r3, [r7, #4]
 8004bf6:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8004bf8:	687b      	ldr	r3, [r7, #4]
 8004bfa:	681b      	ldr	r3, [r3, #0]
 8004bfc:	430a      	orrs	r2, r1
 8004bfe:	601a      	str	r2, [r3, #0]
    hspi->Instance->CR1 |= SPI_CR1_CRCL;
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | hspi->Init.TIMode |
 8004c00:	687b      	ldr	r3, [r7, #4]
 8004c02:	699b      	ldr	r3, [r3, #24]
 8004c04:	0c1b      	lsrs	r3, r3, #16
 8004c06:	f003 0204 	and.w	r2, r3, #4
 8004c0a:	687b      	ldr	r3, [r7, #4]
 8004c0c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004c0e:	431a      	orrs	r2, r3
 8004c10:	687b      	ldr	r3, [r7, #4]
 8004c12:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004c14:	431a      	orrs	r2, r3
 8004c16:	687b      	ldr	r3, [r7, #4]
 8004c18:	68db      	ldr	r3, [r3, #12]
 8004c1a:	ea42 0103 	orr.w	r1, r2, r3
 8004c1e:	687b      	ldr	r3, [r7, #4]
 8004c20:	681b      	ldr	r3, [r3, #0]
 8004c22:	68fa      	ldr	r2, [r7, #12]
 8004c24:	430a      	orrs	r2, r1
 8004c26:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8004c28:	687b      	ldr	r3, [r7, #4]
 8004c2a:	681b      	ldr	r3, [r3, #0]
 8004c2c:	69da      	ldr	r2, [r3, #28]
 8004c2e:	687b      	ldr	r3, [r7, #4]
 8004c30:	681b      	ldr	r3, [r3, #0]
 8004c32:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004c36:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8004c38:	687b      	ldr	r3, [r7, #4]
 8004c3a:	2200      	movs	r2, #0
 8004c3c:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8004c3e:	687b      	ldr	r3, [r7, #4]
 8004c40:	2201      	movs	r2, #1
 8004c42:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 8004c46:	2300      	movs	r3, #0
}
 8004c48:	4618      	mov	r0, r3
 8004c4a:	3710      	adds	r7, #16
 8004c4c:	46bd      	mov	sp, r7
 8004c4e:	bd80      	pop	{r7, pc}

08004c50 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004c50:	b580      	push	{r7, lr}
 8004c52:	b088      	sub	sp, #32
 8004c54:	af00      	add	r7, sp, #0
 8004c56:	60f8      	str	r0, [r7, #12]
 8004c58:	60b9      	str	r1, [r7, #8]
 8004c5a:	603b      	str	r3, [r7, #0]
 8004c5c:	4613      	mov	r3, r2
 8004c5e:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8004c60:	2300      	movs	r3, #0
 8004c62:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8004c64:	68fb      	ldr	r3, [r7, #12]
 8004c66:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8004c6a:	2b01      	cmp	r3, #1
 8004c6c:	d101      	bne.n	8004c72 <HAL_SPI_Transmit+0x22>
 8004c6e:	2302      	movs	r3, #2
 8004c70:	e150      	b.n	8004f14 <HAL_SPI_Transmit+0x2c4>
 8004c72:	68fb      	ldr	r3, [r7, #12]
 8004c74:	2201      	movs	r2, #1
 8004c76:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8004c7a:	f7fc fc4b 	bl	8001514 <HAL_GetTick>
 8004c7e:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8004c80:	88fb      	ldrh	r3, [r7, #6]
 8004c82:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8004c84:	68fb      	ldr	r3, [r7, #12]
 8004c86:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8004c8a:	b2db      	uxtb	r3, r3
 8004c8c:	2b01      	cmp	r3, #1
 8004c8e:	d002      	beq.n	8004c96 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8004c90:	2302      	movs	r3, #2
 8004c92:	77fb      	strb	r3, [r7, #31]
    goto error;
 8004c94:	e135      	b.n	8004f02 <HAL_SPI_Transmit+0x2b2>
  }

  if ((pData == NULL) || (Size == 0U))
 8004c96:	68bb      	ldr	r3, [r7, #8]
 8004c98:	2b00      	cmp	r3, #0
 8004c9a:	d002      	beq.n	8004ca2 <HAL_SPI_Transmit+0x52>
 8004c9c:	88fb      	ldrh	r3, [r7, #6]
 8004c9e:	2b00      	cmp	r3, #0
 8004ca0:	d102      	bne.n	8004ca8 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8004ca2:	2301      	movs	r3, #1
 8004ca4:	77fb      	strb	r3, [r7, #31]
    goto error;
 8004ca6:	e12c      	b.n	8004f02 <HAL_SPI_Transmit+0x2b2>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8004ca8:	68fb      	ldr	r3, [r7, #12]
 8004caa:	2203      	movs	r2, #3
 8004cac:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8004cb0:	68fb      	ldr	r3, [r7, #12]
 8004cb2:	2200      	movs	r2, #0
 8004cb4:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8004cb6:	68fb      	ldr	r3, [r7, #12]
 8004cb8:	68ba      	ldr	r2, [r7, #8]
 8004cba:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = Size;
 8004cbc:	68fb      	ldr	r3, [r7, #12]
 8004cbe:	88fa      	ldrh	r2, [r7, #6]
 8004cc0:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = Size;
 8004cc2:	68fb      	ldr	r3, [r7, #12]
 8004cc4:	88fa      	ldrh	r2, [r7, #6]
 8004cc6:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8004cc8:	68fb      	ldr	r3, [r7, #12]
 8004cca:	2200      	movs	r2, #0
 8004ccc:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = 0U;
 8004cce:	68fb      	ldr	r3, [r7, #12]
 8004cd0:	2200      	movs	r2, #0
 8004cd2:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->RxXferCount = 0U;
 8004cd6:	68fb      	ldr	r3, [r7, #12]
 8004cd8:	2200      	movs	r2, #0
 8004cda:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->TxISR       = NULL;
 8004cde:	68fb      	ldr	r3, [r7, #12]
 8004ce0:	2200      	movs	r2, #0
 8004ce2:	651a      	str	r2, [r3, #80]	; 0x50
  hspi->RxISR       = NULL;
 8004ce4:	68fb      	ldr	r3, [r7, #12]
 8004ce6:	2200      	movs	r2, #0
 8004ce8:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004cea:	68fb      	ldr	r3, [r7, #12]
 8004cec:	689b      	ldr	r3, [r3, #8]
 8004cee:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004cf2:	d107      	bne.n	8004d04 <HAL_SPI_Transmit+0xb4>
  {
    SPI_1LINE_TX(hspi);
 8004cf4:	68fb      	ldr	r3, [r7, #12]
 8004cf6:	681b      	ldr	r3, [r3, #0]
 8004cf8:	681a      	ldr	r2, [r3, #0]
 8004cfa:	68fb      	ldr	r3, [r7, #12]
 8004cfc:	681b      	ldr	r3, [r3, #0]
 8004cfe:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8004d02:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8004d04:	68fb      	ldr	r3, [r7, #12]
 8004d06:	681b      	ldr	r3, [r3, #0]
 8004d08:	681b      	ldr	r3, [r3, #0]
 8004d0a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004d0e:	2b40      	cmp	r3, #64	; 0x40
 8004d10:	d007      	beq.n	8004d22 <HAL_SPI_Transmit+0xd2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8004d12:	68fb      	ldr	r3, [r7, #12]
 8004d14:	681b      	ldr	r3, [r3, #0]
 8004d16:	681a      	ldr	r2, [r3, #0]
 8004d18:	68fb      	ldr	r3, [r7, #12]
 8004d1a:	681b      	ldr	r3, [r3, #0]
 8004d1c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004d20:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8004d22:	68fb      	ldr	r3, [r7, #12]
 8004d24:	68db      	ldr	r3, [r3, #12]
 8004d26:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8004d2a:	d94b      	bls.n	8004dc4 <HAL_SPI_Transmit+0x174>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8004d2c:	68fb      	ldr	r3, [r7, #12]
 8004d2e:	685b      	ldr	r3, [r3, #4]
 8004d30:	2b00      	cmp	r3, #0
 8004d32:	d002      	beq.n	8004d3a <HAL_SPI_Transmit+0xea>
 8004d34:	8afb      	ldrh	r3, [r7, #22]
 8004d36:	2b01      	cmp	r3, #1
 8004d38:	d13e      	bne.n	8004db8 <HAL_SPI_Transmit+0x168>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004d3a:	68fb      	ldr	r3, [r7, #12]
 8004d3c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004d3e:	881a      	ldrh	r2, [r3, #0]
 8004d40:	68fb      	ldr	r3, [r7, #12]
 8004d42:	681b      	ldr	r3, [r3, #0]
 8004d44:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8004d46:	68fb      	ldr	r3, [r7, #12]
 8004d48:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004d4a:	1c9a      	adds	r2, r3, #2
 8004d4c:	68fb      	ldr	r3, [r7, #12]
 8004d4e:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 8004d50:	68fb      	ldr	r3, [r7, #12]
 8004d52:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004d54:	b29b      	uxth	r3, r3
 8004d56:	3b01      	subs	r3, #1
 8004d58:	b29a      	uxth	r2, r3
 8004d5a:	68fb      	ldr	r3, [r7, #12]
 8004d5c:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8004d5e:	e02b      	b.n	8004db8 <HAL_SPI_Transmit+0x168>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8004d60:	68fb      	ldr	r3, [r7, #12]
 8004d62:	681b      	ldr	r3, [r3, #0]
 8004d64:	689b      	ldr	r3, [r3, #8]
 8004d66:	f003 0302 	and.w	r3, r3, #2
 8004d6a:	2b02      	cmp	r3, #2
 8004d6c:	d112      	bne.n	8004d94 <HAL_SPI_Transmit+0x144>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004d6e:	68fb      	ldr	r3, [r7, #12]
 8004d70:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004d72:	881a      	ldrh	r2, [r3, #0]
 8004d74:	68fb      	ldr	r3, [r7, #12]
 8004d76:	681b      	ldr	r3, [r3, #0]
 8004d78:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8004d7a:	68fb      	ldr	r3, [r7, #12]
 8004d7c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004d7e:	1c9a      	adds	r2, r3, #2
 8004d80:	68fb      	ldr	r3, [r7, #12]
 8004d82:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8004d84:	68fb      	ldr	r3, [r7, #12]
 8004d86:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004d88:	b29b      	uxth	r3, r3
 8004d8a:	3b01      	subs	r3, #1
 8004d8c:	b29a      	uxth	r2, r3
 8004d8e:	68fb      	ldr	r3, [r7, #12]
 8004d90:	87da      	strh	r2, [r3, #62]	; 0x3e
 8004d92:	e011      	b.n	8004db8 <HAL_SPI_Transmit+0x168>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8004d94:	f7fc fbbe 	bl	8001514 <HAL_GetTick>
 8004d98:	4602      	mov	r2, r0
 8004d9a:	69bb      	ldr	r3, [r7, #24]
 8004d9c:	1ad3      	subs	r3, r2, r3
 8004d9e:	683a      	ldr	r2, [r7, #0]
 8004da0:	429a      	cmp	r2, r3
 8004da2:	d803      	bhi.n	8004dac <HAL_SPI_Transmit+0x15c>
 8004da4:	683b      	ldr	r3, [r7, #0]
 8004da6:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8004daa:	d102      	bne.n	8004db2 <HAL_SPI_Transmit+0x162>
 8004dac:	683b      	ldr	r3, [r7, #0]
 8004dae:	2b00      	cmp	r3, #0
 8004db0:	d102      	bne.n	8004db8 <HAL_SPI_Transmit+0x168>
        {
          errorcode = HAL_TIMEOUT;
 8004db2:	2303      	movs	r3, #3
 8004db4:	77fb      	strb	r3, [r7, #31]
          goto error;
 8004db6:	e0a4      	b.n	8004f02 <HAL_SPI_Transmit+0x2b2>
    while (hspi->TxXferCount > 0U)
 8004db8:	68fb      	ldr	r3, [r7, #12]
 8004dba:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004dbc:	b29b      	uxth	r3, r3
 8004dbe:	2b00      	cmp	r3, #0
 8004dc0:	d1ce      	bne.n	8004d60 <HAL_SPI_Transmit+0x110>
 8004dc2:	e07c      	b.n	8004ebe <HAL_SPI_Transmit+0x26e>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8004dc4:	68fb      	ldr	r3, [r7, #12]
 8004dc6:	685b      	ldr	r3, [r3, #4]
 8004dc8:	2b00      	cmp	r3, #0
 8004dca:	d002      	beq.n	8004dd2 <HAL_SPI_Transmit+0x182>
 8004dcc:	8afb      	ldrh	r3, [r7, #22]
 8004dce:	2b01      	cmp	r3, #1
 8004dd0:	d170      	bne.n	8004eb4 <HAL_SPI_Transmit+0x264>
    {
      if (hspi->TxXferCount > 1U)
 8004dd2:	68fb      	ldr	r3, [r7, #12]
 8004dd4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004dd6:	b29b      	uxth	r3, r3
 8004dd8:	2b01      	cmp	r3, #1
 8004dda:	d912      	bls.n	8004e02 <HAL_SPI_Transmit+0x1b2>
      {
        /* write on the data register in packing mode */
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004ddc:	68fb      	ldr	r3, [r7, #12]
 8004dde:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004de0:	881a      	ldrh	r2, [r3, #0]
 8004de2:	68fb      	ldr	r3, [r7, #12]
 8004de4:	681b      	ldr	r3, [r3, #0]
 8004de6:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8004de8:	68fb      	ldr	r3, [r7, #12]
 8004dea:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004dec:	1c9a      	adds	r2, r3, #2
 8004dee:	68fb      	ldr	r3, [r7, #12]
 8004df0:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount -= 2U;
 8004df2:	68fb      	ldr	r3, [r7, #12]
 8004df4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004df6:	b29b      	uxth	r3, r3
 8004df8:	3b02      	subs	r3, #2
 8004dfa:	b29a      	uxth	r2, r3
 8004dfc:	68fb      	ldr	r3, [r7, #12]
 8004dfe:	87da      	strh	r2, [r3, #62]	; 0x3e
 8004e00:	e058      	b.n	8004eb4 <HAL_SPI_Transmit+0x264>
      }
      else
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8004e02:	68fb      	ldr	r3, [r7, #12]
 8004e04:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004e06:	68fb      	ldr	r3, [r7, #12]
 8004e08:	681b      	ldr	r3, [r3, #0]
 8004e0a:	330c      	adds	r3, #12
 8004e0c:	7812      	ldrb	r2, [r2, #0]
 8004e0e:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr ++;
 8004e10:	68fb      	ldr	r3, [r7, #12]
 8004e12:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004e14:	1c5a      	adds	r2, r3, #1
 8004e16:	68fb      	ldr	r3, [r7, #12]
 8004e18:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8004e1a:	68fb      	ldr	r3, [r7, #12]
 8004e1c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004e1e:	b29b      	uxth	r3, r3
 8004e20:	3b01      	subs	r3, #1
 8004e22:	b29a      	uxth	r2, r3
 8004e24:	68fb      	ldr	r3, [r7, #12]
 8004e26:	87da      	strh	r2, [r3, #62]	; 0x3e
      }
    }
    while (hspi->TxXferCount > 0U)
 8004e28:	e044      	b.n	8004eb4 <HAL_SPI_Transmit+0x264>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8004e2a:	68fb      	ldr	r3, [r7, #12]
 8004e2c:	681b      	ldr	r3, [r3, #0]
 8004e2e:	689b      	ldr	r3, [r3, #8]
 8004e30:	f003 0302 	and.w	r3, r3, #2
 8004e34:	2b02      	cmp	r3, #2
 8004e36:	d12b      	bne.n	8004e90 <HAL_SPI_Transmit+0x240>
      {
        if (hspi->TxXferCount > 1U)
 8004e38:	68fb      	ldr	r3, [r7, #12]
 8004e3a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004e3c:	b29b      	uxth	r3, r3
 8004e3e:	2b01      	cmp	r3, #1
 8004e40:	d912      	bls.n	8004e68 <HAL_SPI_Transmit+0x218>
        {
          /* write on the data register in packing mode */
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004e42:	68fb      	ldr	r3, [r7, #12]
 8004e44:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004e46:	881a      	ldrh	r2, [r3, #0]
 8004e48:	68fb      	ldr	r3, [r7, #12]
 8004e4a:	681b      	ldr	r3, [r3, #0]
 8004e4c:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8004e4e:	68fb      	ldr	r3, [r7, #12]
 8004e50:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004e52:	1c9a      	adds	r2, r3, #2
 8004e54:	68fb      	ldr	r3, [r7, #12]
 8004e56:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount -= 2U;
 8004e58:	68fb      	ldr	r3, [r7, #12]
 8004e5a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004e5c:	b29b      	uxth	r3, r3
 8004e5e:	3b02      	subs	r3, #2
 8004e60:	b29a      	uxth	r2, r3
 8004e62:	68fb      	ldr	r3, [r7, #12]
 8004e64:	87da      	strh	r2, [r3, #62]	; 0x3e
 8004e66:	e025      	b.n	8004eb4 <HAL_SPI_Transmit+0x264>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8004e68:	68fb      	ldr	r3, [r7, #12]
 8004e6a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004e6c:	68fb      	ldr	r3, [r7, #12]
 8004e6e:	681b      	ldr	r3, [r3, #0]
 8004e70:	330c      	adds	r3, #12
 8004e72:	7812      	ldrb	r2, [r2, #0]
 8004e74:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 8004e76:	68fb      	ldr	r3, [r7, #12]
 8004e78:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004e7a:	1c5a      	adds	r2, r3, #1
 8004e7c:	68fb      	ldr	r3, [r7, #12]
 8004e7e:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount--;
 8004e80:	68fb      	ldr	r3, [r7, #12]
 8004e82:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004e84:	b29b      	uxth	r3, r3
 8004e86:	3b01      	subs	r3, #1
 8004e88:	b29a      	uxth	r2, r3
 8004e8a:	68fb      	ldr	r3, [r7, #12]
 8004e8c:	87da      	strh	r2, [r3, #62]	; 0x3e
 8004e8e:	e011      	b.n	8004eb4 <HAL_SPI_Transmit+0x264>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8004e90:	f7fc fb40 	bl	8001514 <HAL_GetTick>
 8004e94:	4602      	mov	r2, r0
 8004e96:	69bb      	ldr	r3, [r7, #24]
 8004e98:	1ad3      	subs	r3, r2, r3
 8004e9a:	683a      	ldr	r2, [r7, #0]
 8004e9c:	429a      	cmp	r2, r3
 8004e9e:	d803      	bhi.n	8004ea8 <HAL_SPI_Transmit+0x258>
 8004ea0:	683b      	ldr	r3, [r7, #0]
 8004ea2:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8004ea6:	d102      	bne.n	8004eae <HAL_SPI_Transmit+0x25e>
 8004ea8:	683b      	ldr	r3, [r7, #0]
 8004eaa:	2b00      	cmp	r3, #0
 8004eac:	d102      	bne.n	8004eb4 <HAL_SPI_Transmit+0x264>
        {
          errorcode = HAL_TIMEOUT;
 8004eae:	2303      	movs	r3, #3
 8004eb0:	77fb      	strb	r3, [r7, #31]
          goto error;
 8004eb2:	e026      	b.n	8004f02 <HAL_SPI_Transmit+0x2b2>
    while (hspi->TxXferCount > 0U)
 8004eb4:	68fb      	ldr	r3, [r7, #12]
 8004eb6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004eb8:	b29b      	uxth	r3, r3
 8004eba:	2b00      	cmp	r3, #0
 8004ebc:	d1b5      	bne.n	8004e2a <HAL_SPI_Transmit+0x1da>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8004ebe:	69ba      	ldr	r2, [r7, #24]
 8004ec0:	6839      	ldr	r1, [r7, #0]
 8004ec2:	68f8      	ldr	r0, [r7, #12]
 8004ec4:	f000 f901 	bl	80050ca <SPI_EndRxTxTransaction>
 8004ec8:	4603      	mov	r3, r0
 8004eca:	2b00      	cmp	r3, #0
 8004ecc:	d002      	beq.n	8004ed4 <HAL_SPI_Transmit+0x284>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8004ece:	68fb      	ldr	r3, [r7, #12]
 8004ed0:	2220      	movs	r2, #32
 8004ed2:	661a      	str	r2, [r3, #96]	; 0x60
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8004ed4:	68fb      	ldr	r3, [r7, #12]
 8004ed6:	689b      	ldr	r3, [r3, #8]
 8004ed8:	2b00      	cmp	r3, #0
 8004eda:	d10a      	bne.n	8004ef2 <HAL_SPI_Transmit+0x2a2>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8004edc:	2300      	movs	r3, #0
 8004ede:	613b      	str	r3, [r7, #16]
 8004ee0:	68fb      	ldr	r3, [r7, #12]
 8004ee2:	681b      	ldr	r3, [r3, #0]
 8004ee4:	68db      	ldr	r3, [r3, #12]
 8004ee6:	613b      	str	r3, [r7, #16]
 8004ee8:	68fb      	ldr	r3, [r7, #12]
 8004eea:	681b      	ldr	r3, [r3, #0]
 8004eec:	689b      	ldr	r3, [r3, #8]
 8004eee:	613b      	str	r3, [r7, #16]
 8004ef0:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8004ef2:	68fb      	ldr	r3, [r7, #12]
 8004ef4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004ef6:	2b00      	cmp	r3, #0
 8004ef8:	d002      	beq.n	8004f00 <HAL_SPI_Transmit+0x2b0>
  {
    errorcode = HAL_ERROR;
 8004efa:	2301      	movs	r3, #1
 8004efc:	77fb      	strb	r3, [r7, #31]
 8004efe:	e000      	b.n	8004f02 <HAL_SPI_Transmit+0x2b2>
  }

error:
 8004f00:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8004f02:	68fb      	ldr	r3, [r7, #12]
 8004f04:	2201      	movs	r2, #1
 8004f06:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8004f0a:	68fb      	ldr	r3, [r7, #12]
 8004f0c:	2200      	movs	r2, #0
 8004f0e:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 8004f12:	7ffb      	ldrb	r3, [r7, #31]
}
 8004f14:	4618      	mov	r0, r3
 8004f16:	3720      	adds	r7, #32
 8004f18:	46bd      	mov	sp, r7
 8004f1a:	bd80      	pop	{r7, pc}

08004f1c <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8004f1c:	b580      	push	{r7, lr}
 8004f1e:	b084      	sub	sp, #16
 8004f20:	af00      	add	r7, sp, #0
 8004f22:	60f8      	str	r0, [r7, #12]
 8004f24:	60b9      	str	r1, [r7, #8]
 8004f26:	603b      	str	r3, [r7, #0]
 8004f28:	4613      	mov	r3, r2
 8004f2a:	71fb      	strb	r3, [r7, #7]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8004f2c:	e04c      	b.n	8004fc8 <SPI_WaitFlagStateUntilTimeout+0xac>
  {
    if (Timeout != HAL_MAX_DELAY)
 8004f2e:	683b      	ldr	r3, [r7, #0]
 8004f30:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8004f34:	d048      	beq.n	8004fc8 <SPI_WaitFlagStateUntilTimeout+0xac>
    {
      if (((HAL_GetTick() - Tickstart) >= Timeout) || (Timeout == 0U))
 8004f36:	f7fc faed 	bl	8001514 <HAL_GetTick>
 8004f3a:	4602      	mov	r2, r0
 8004f3c:	69bb      	ldr	r3, [r7, #24]
 8004f3e:	1ad3      	subs	r3, r2, r3
 8004f40:	683a      	ldr	r2, [r7, #0]
 8004f42:	429a      	cmp	r2, r3
 8004f44:	d902      	bls.n	8004f4c <SPI_WaitFlagStateUntilTimeout+0x30>
 8004f46:	683b      	ldr	r3, [r7, #0]
 8004f48:	2b00      	cmp	r3, #0
 8004f4a:	d13d      	bne.n	8004fc8 <SPI_WaitFlagStateUntilTimeout+0xac>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
        on both master and slave sides in order to resynchronize the master
        and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8004f4c:	68fb      	ldr	r3, [r7, #12]
 8004f4e:	681b      	ldr	r3, [r3, #0]
 8004f50:	685a      	ldr	r2, [r3, #4]
 8004f52:	68fb      	ldr	r3, [r7, #12]
 8004f54:	681b      	ldr	r3, [r3, #0]
 8004f56:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8004f5a:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004f5c:	68fb      	ldr	r3, [r7, #12]
 8004f5e:	685b      	ldr	r3, [r3, #4]
 8004f60:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004f64:	d111      	bne.n	8004f8a <SPI_WaitFlagStateUntilTimeout+0x6e>
 8004f66:	68fb      	ldr	r3, [r7, #12]
 8004f68:	689b      	ldr	r3, [r3, #8]
 8004f6a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004f6e:	d004      	beq.n	8004f7a <SPI_WaitFlagStateUntilTimeout+0x5e>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8004f70:	68fb      	ldr	r3, [r7, #12]
 8004f72:	689b      	ldr	r3, [r3, #8]
 8004f74:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004f78:	d107      	bne.n	8004f8a <SPI_WaitFlagStateUntilTimeout+0x6e>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8004f7a:	68fb      	ldr	r3, [r7, #12]
 8004f7c:	681b      	ldr	r3, [r3, #0]
 8004f7e:	681a      	ldr	r2, [r3, #0]
 8004f80:	68fb      	ldr	r3, [r7, #12]
 8004f82:	681b      	ldr	r3, [r3, #0]
 8004f84:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004f88:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8004f8a:	68fb      	ldr	r3, [r7, #12]
 8004f8c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004f8e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004f92:	d10f      	bne.n	8004fb4 <SPI_WaitFlagStateUntilTimeout+0x98>
        {
          SPI_RESET_CRC(hspi);
 8004f94:	68fb      	ldr	r3, [r7, #12]
 8004f96:	681b      	ldr	r3, [r3, #0]
 8004f98:	681a      	ldr	r2, [r3, #0]
 8004f9a:	68fb      	ldr	r3, [r7, #12]
 8004f9c:	681b      	ldr	r3, [r3, #0]
 8004f9e:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8004fa2:	601a      	str	r2, [r3, #0]
 8004fa4:	68fb      	ldr	r3, [r7, #12]
 8004fa6:	681b      	ldr	r3, [r3, #0]
 8004fa8:	681a      	ldr	r2, [r3, #0]
 8004faa:	68fb      	ldr	r3, [r7, #12]
 8004fac:	681b      	ldr	r3, [r3, #0]
 8004fae:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8004fb2:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8004fb4:	68fb      	ldr	r3, [r7, #12]
 8004fb6:	2201      	movs	r2, #1
 8004fb8:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8004fbc:	68fb      	ldr	r3, [r7, #12]
 8004fbe:	2200      	movs	r2, #0
 8004fc0:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 8004fc4:	2303      	movs	r3, #3
 8004fc6:	e00f      	b.n	8004fe8 <SPI_WaitFlagStateUntilTimeout+0xcc>
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8004fc8:	68fb      	ldr	r3, [r7, #12]
 8004fca:	681b      	ldr	r3, [r3, #0]
 8004fcc:	689a      	ldr	r2, [r3, #8]
 8004fce:	68bb      	ldr	r3, [r7, #8]
 8004fd0:	4013      	ands	r3, r2
 8004fd2:	68ba      	ldr	r2, [r7, #8]
 8004fd4:	429a      	cmp	r2, r3
 8004fd6:	bf0c      	ite	eq
 8004fd8:	2301      	moveq	r3, #1
 8004fda:	2300      	movne	r3, #0
 8004fdc:	b2db      	uxtb	r3, r3
 8004fde:	461a      	mov	r2, r3
 8004fe0:	79fb      	ldrb	r3, [r7, #7]
 8004fe2:	429a      	cmp	r2, r3
 8004fe4:	d1a3      	bne.n	8004f2e <SPI_WaitFlagStateUntilTimeout+0x12>
      }
    }
  }

  return HAL_OK;
 8004fe6:	2300      	movs	r3, #0
}
 8004fe8:	4618      	mov	r0, r3
 8004fea:	3710      	adds	r7, #16
 8004fec:	46bd      	mov	sp, r7
 8004fee:	bd80      	pop	{r7, pc}

08004ff0 <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8004ff0:	b580      	push	{r7, lr}
 8004ff2:	b084      	sub	sp, #16
 8004ff4:	af00      	add	r7, sp, #0
 8004ff6:	60f8      	str	r0, [r7, #12]
 8004ff8:	60b9      	str	r1, [r7, #8]
 8004ffa:	607a      	str	r2, [r7, #4]
 8004ffc:	603b      	str	r3, [r7, #0]
  while ((hspi->Instance->SR & Fifo) != State)
 8004ffe:	e057      	b.n	80050b0 <SPI_WaitFifoStateUntilTimeout+0xc0>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 8005000:	68bb      	ldr	r3, [r7, #8]
 8005002:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 8005006:	d106      	bne.n	8005016 <SPI_WaitFifoStateUntilTimeout+0x26>
 8005008:	687b      	ldr	r3, [r7, #4]
 800500a:	2b00      	cmp	r3, #0
 800500c:	d103      	bne.n	8005016 <SPI_WaitFifoStateUntilTimeout+0x26>
    {
      /* Read 8bit CRC to flush Data Register */
      READ_REG(*((__IO uint8_t *)&hspi->Instance->DR));
 800500e:	68fb      	ldr	r3, [r7, #12]
 8005010:	681b      	ldr	r3, [r3, #0]
 8005012:	330c      	adds	r3, #12
 8005014:	781b      	ldrb	r3, [r3, #0]
    }

    if (Timeout != HAL_MAX_DELAY)
 8005016:	683b      	ldr	r3, [r7, #0]
 8005018:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800501c:	d048      	beq.n	80050b0 <SPI_WaitFifoStateUntilTimeout+0xc0>
    {
      if (((HAL_GetTick() - Tickstart) >= Timeout) || (Timeout == 0U))
 800501e:	f7fc fa79 	bl	8001514 <HAL_GetTick>
 8005022:	4602      	mov	r2, r0
 8005024:	69bb      	ldr	r3, [r7, #24]
 8005026:	1ad3      	subs	r3, r2, r3
 8005028:	683a      	ldr	r2, [r7, #0]
 800502a:	429a      	cmp	r2, r3
 800502c:	d902      	bls.n	8005034 <SPI_WaitFifoStateUntilTimeout+0x44>
 800502e:	683b      	ldr	r3, [r7, #0]
 8005030:	2b00      	cmp	r3, #0
 8005032:	d13d      	bne.n	80050b0 <SPI_WaitFifoStateUntilTimeout+0xc0>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8005034:	68fb      	ldr	r3, [r7, #12]
 8005036:	681b      	ldr	r3, [r3, #0]
 8005038:	685a      	ldr	r2, [r3, #4]
 800503a:	68fb      	ldr	r3, [r7, #12]
 800503c:	681b      	ldr	r3, [r3, #0]
 800503e:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8005042:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005044:	68fb      	ldr	r3, [r7, #12]
 8005046:	685b      	ldr	r3, [r3, #4]
 8005048:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800504c:	d111      	bne.n	8005072 <SPI_WaitFifoStateUntilTimeout+0x82>
 800504e:	68fb      	ldr	r3, [r7, #12]
 8005050:	689b      	ldr	r3, [r3, #8]
 8005052:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005056:	d004      	beq.n	8005062 <SPI_WaitFifoStateUntilTimeout+0x72>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8005058:	68fb      	ldr	r3, [r7, #12]
 800505a:	689b      	ldr	r3, [r3, #8]
 800505c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005060:	d107      	bne.n	8005072 <SPI_WaitFifoStateUntilTimeout+0x82>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8005062:	68fb      	ldr	r3, [r7, #12]
 8005064:	681b      	ldr	r3, [r3, #0]
 8005066:	681a      	ldr	r2, [r3, #0]
 8005068:	68fb      	ldr	r3, [r7, #12]
 800506a:	681b      	ldr	r3, [r3, #0]
 800506c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005070:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8005072:	68fb      	ldr	r3, [r7, #12]
 8005074:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005076:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800507a:	d10f      	bne.n	800509c <SPI_WaitFifoStateUntilTimeout+0xac>
        {
          SPI_RESET_CRC(hspi);
 800507c:	68fb      	ldr	r3, [r7, #12]
 800507e:	681b      	ldr	r3, [r3, #0]
 8005080:	681a      	ldr	r2, [r3, #0]
 8005082:	68fb      	ldr	r3, [r7, #12]
 8005084:	681b      	ldr	r3, [r3, #0]
 8005086:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800508a:	601a      	str	r2, [r3, #0]
 800508c:	68fb      	ldr	r3, [r7, #12]
 800508e:	681b      	ldr	r3, [r3, #0]
 8005090:	681a      	ldr	r2, [r3, #0]
 8005092:	68fb      	ldr	r3, [r7, #12]
 8005094:	681b      	ldr	r3, [r3, #0]
 8005096:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800509a:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800509c:	68fb      	ldr	r3, [r7, #12]
 800509e:	2201      	movs	r2, #1
 80050a0:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80050a4:	68fb      	ldr	r3, [r7, #12]
 80050a6:	2200      	movs	r2, #0
 80050a8:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 80050ac:	2303      	movs	r3, #3
 80050ae:	e008      	b.n	80050c2 <SPI_WaitFifoStateUntilTimeout+0xd2>
  while ((hspi->Instance->SR & Fifo) != State)
 80050b0:	68fb      	ldr	r3, [r7, #12]
 80050b2:	681b      	ldr	r3, [r3, #0]
 80050b4:	689a      	ldr	r2, [r3, #8]
 80050b6:	68bb      	ldr	r3, [r7, #8]
 80050b8:	4013      	ands	r3, r2
 80050ba:	687a      	ldr	r2, [r7, #4]
 80050bc:	429a      	cmp	r2, r3
 80050be:	d19f      	bne.n	8005000 <SPI_WaitFifoStateUntilTimeout+0x10>
      }
    }
  }

  return HAL_OK;
 80050c0:	2300      	movs	r3, #0
}
 80050c2:	4618      	mov	r0, r3
 80050c4:	3710      	adds	r7, #16
 80050c6:	46bd      	mov	sp, r7
 80050c8:	bd80      	pop	{r7, pc}

080050ca <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 80050ca:	b580      	push	{r7, lr}
 80050cc:	b086      	sub	sp, #24
 80050ce:	af02      	add	r7, sp, #8
 80050d0:	60f8      	str	r0, [r7, #12]
 80050d2:	60b9      	str	r1, [r7, #8]
 80050d4:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 80050d6:	687b      	ldr	r3, [r7, #4]
 80050d8:	9300      	str	r3, [sp, #0]
 80050da:	68bb      	ldr	r3, [r7, #8]
 80050dc:	2200      	movs	r2, #0
 80050de:	f44f 51c0 	mov.w	r1, #6144	; 0x1800
 80050e2:	68f8      	ldr	r0, [r7, #12]
 80050e4:	f7ff ff84 	bl	8004ff0 <SPI_WaitFifoStateUntilTimeout>
 80050e8:	4603      	mov	r3, r0
 80050ea:	2b00      	cmp	r3, #0
 80050ec:	d007      	beq.n	80050fe <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80050ee:	68fb      	ldr	r3, [r7, #12]
 80050f0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80050f2:	f043 0220 	orr.w	r2, r3, #32
 80050f6:	68fb      	ldr	r3, [r7, #12]
 80050f8:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 80050fa:	2303      	movs	r3, #3
 80050fc:	e027      	b.n	800514e <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80050fe:	687b      	ldr	r3, [r7, #4]
 8005100:	9300      	str	r3, [sp, #0]
 8005102:	68bb      	ldr	r3, [r7, #8]
 8005104:	2200      	movs	r2, #0
 8005106:	2180      	movs	r1, #128	; 0x80
 8005108:	68f8      	ldr	r0, [r7, #12]
 800510a:	f7ff ff07 	bl	8004f1c <SPI_WaitFlagStateUntilTimeout>
 800510e:	4603      	mov	r3, r0
 8005110:	2b00      	cmp	r3, #0
 8005112:	d007      	beq.n	8005124 <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005114:	68fb      	ldr	r3, [r7, #12]
 8005116:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005118:	f043 0220 	orr.w	r2, r3, #32
 800511c:	68fb      	ldr	r3, [r7, #12]
 800511e:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8005120:	2303      	movs	r3, #3
 8005122:	e014      	b.n	800514e <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8005124:	687b      	ldr	r3, [r7, #4]
 8005126:	9300      	str	r3, [sp, #0]
 8005128:	68bb      	ldr	r3, [r7, #8]
 800512a:	2200      	movs	r2, #0
 800512c:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 8005130:	68f8      	ldr	r0, [r7, #12]
 8005132:	f7ff ff5d 	bl	8004ff0 <SPI_WaitFifoStateUntilTimeout>
 8005136:	4603      	mov	r3, r0
 8005138:	2b00      	cmp	r3, #0
 800513a:	d007      	beq.n	800514c <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800513c:	68fb      	ldr	r3, [r7, #12]
 800513e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005140:	f043 0220 	orr.w	r2, r3, #32
 8005144:	68fb      	ldr	r3, [r7, #12]
 8005146:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8005148:	2303      	movs	r3, #3
 800514a:	e000      	b.n	800514e <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 800514c:	2300      	movs	r3, #0
}
 800514e:	4618      	mov	r0, r3
 8005150:	3710      	adds	r7, #16
 8005152:	46bd      	mov	sp, r7
 8005154:	bd80      	pop	{r7, pc}

08005156 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8005156:	b580      	push	{r7, lr}
 8005158:	b082      	sub	sp, #8
 800515a:	af00      	add	r7, sp, #0
 800515c:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800515e:	687b      	ldr	r3, [r7, #4]
 8005160:	2b00      	cmp	r3, #0
 8005162:	d101      	bne.n	8005168 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8005164:	2301      	movs	r3, #1
 8005166:	e049      	b.n	80051fc <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005168:	687b      	ldr	r3, [r7, #4]
 800516a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800516e:	b2db      	uxtb	r3, r3
 8005170:	2b00      	cmp	r3, #0
 8005172:	d106      	bne.n	8005182 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005174:	687b      	ldr	r3, [r7, #4]
 8005176:	2200      	movs	r2, #0
 8005178:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800517c:	6878      	ldr	r0, [r7, #4]
 800517e:	f7fc f8c3 	bl	8001308 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005182:	687b      	ldr	r3, [r7, #4]
 8005184:	2202      	movs	r2, #2
 8005186:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800518a:	687b      	ldr	r3, [r7, #4]
 800518c:	681a      	ldr	r2, [r3, #0]
 800518e:	687b      	ldr	r3, [r7, #4]
 8005190:	3304      	adds	r3, #4
 8005192:	4619      	mov	r1, r3
 8005194:	4610      	mov	r0, r2
 8005196:	f000 fc23 	bl	80059e0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800519a:	687b      	ldr	r3, [r7, #4]
 800519c:	2201      	movs	r2, #1
 800519e:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80051a2:	687b      	ldr	r3, [r7, #4]
 80051a4:	2201      	movs	r2, #1
 80051a6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80051aa:	687b      	ldr	r3, [r7, #4]
 80051ac:	2201      	movs	r2, #1
 80051ae:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80051b2:	687b      	ldr	r3, [r7, #4]
 80051b4:	2201      	movs	r2, #1
 80051b6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80051ba:	687b      	ldr	r3, [r7, #4]
 80051bc:	2201      	movs	r2, #1
 80051be:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80051c2:	687b      	ldr	r3, [r7, #4]
 80051c4:	2201      	movs	r2, #1
 80051c6:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80051ca:	687b      	ldr	r3, [r7, #4]
 80051cc:	2201      	movs	r2, #1
 80051ce:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80051d2:	687b      	ldr	r3, [r7, #4]
 80051d4:	2201      	movs	r2, #1
 80051d6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80051da:	687b      	ldr	r3, [r7, #4]
 80051dc:	2201      	movs	r2, #1
 80051de:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80051e2:	687b      	ldr	r3, [r7, #4]
 80051e4:	2201      	movs	r2, #1
 80051e6:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 80051ea:	687b      	ldr	r3, [r7, #4]
 80051ec:	2201      	movs	r2, #1
 80051ee:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80051f2:	687b      	ldr	r3, [r7, #4]
 80051f4:	2201      	movs	r2, #1
 80051f6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80051fa:	2300      	movs	r3, #0
}
 80051fc:	4618      	mov	r0, r3
 80051fe:	3708      	adds	r7, #8
 8005200:	46bd      	mov	sp, r7
 8005202:	bd80      	pop	{r7, pc}

08005204 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8005204:	b480      	push	{r7}
 8005206:	b085      	sub	sp, #20
 8005208:	af00      	add	r7, sp, #0
 800520a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800520c:	687b      	ldr	r3, [r7, #4]
 800520e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005212:	b2db      	uxtb	r3, r3
 8005214:	2b01      	cmp	r3, #1
 8005216:	d001      	beq.n	800521c <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8005218:	2301      	movs	r3, #1
 800521a:	e019      	b.n	8005250 <HAL_TIM_Base_Start+0x4c>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800521c:	687b      	ldr	r3, [r7, #4]
 800521e:	2202      	movs	r2, #2
 8005220:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005224:	687b      	ldr	r3, [r7, #4]
 8005226:	681b      	ldr	r3, [r3, #0]
 8005228:	689a      	ldr	r2, [r3, #8]
 800522a:	4b0c      	ldr	r3, [pc, #48]	; (800525c <HAL_TIM_Base_Start+0x58>)
 800522c:	4013      	ands	r3, r2
 800522e:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005230:	68fb      	ldr	r3, [r7, #12]
 8005232:	2b06      	cmp	r3, #6
 8005234:	d00b      	beq.n	800524e <HAL_TIM_Base_Start+0x4a>
 8005236:	68fb      	ldr	r3, [r7, #12]
 8005238:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800523c:	d007      	beq.n	800524e <HAL_TIM_Base_Start+0x4a>
  {
    __HAL_TIM_ENABLE(htim);
 800523e:	687b      	ldr	r3, [r7, #4]
 8005240:	681b      	ldr	r3, [r3, #0]
 8005242:	681a      	ldr	r2, [r3, #0]
 8005244:	687b      	ldr	r3, [r7, #4]
 8005246:	681b      	ldr	r3, [r3, #0]
 8005248:	f042 0201 	orr.w	r2, r2, #1
 800524c:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800524e:	2300      	movs	r3, #0
}
 8005250:	4618      	mov	r0, r3
 8005252:	3714      	adds	r7, #20
 8005254:	46bd      	mov	sp, r7
 8005256:	f85d 7b04 	ldr.w	r7, [sp], #4
 800525a:	4770      	bx	lr
 800525c:	00010007 	.word	0x00010007

08005260 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8005260:	b480      	push	{r7}
 8005262:	b085      	sub	sp, #20
 8005264:	af00      	add	r7, sp, #0
 8005266:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8005268:	687b      	ldr	r3, [r7, #4]
 800526a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800526e:	b2db      	uxtb	r3, r3
 8005270:	2b01      	cmp	r3, #1
 8005272:	d001      	beq.n	8005278 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8005274:	2301      	movs	r3, #1
 8005276:	e021      	b.n	80052bc <HAL_TIM_Base_Start_IT+0x5c>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005278:	687b      	ldr	r3, [r7, #4]
 800527a:	2202      	movs	r2, #2
 800527c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8005280:	687b      	ldr	r3, [r7, #4]
 8005282:	681b      	ldr	r3, [r3, #0]
 8005284:	68da      	ldr	r2, [r3, #12]
 8005286:	687b      	ldr	r3, [r7, #4]
 8005288:	681b      	ldr	r3, [r3, #0]
 800528a:	f042 0201 	orr.w	r2, r2, #1
 800528e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005290:	687b      	ldr	r3, [r7, #4]
 8005292:	681b      	ldr	r3, [r3, #0]
 8005294:	689a      	ldr	r2, [r3, #8]
 8005296:	4b0c      	ldr	r3, [pc, #48]	; (80052c8 <HAL_TIM_Base_Start_IT+0x68>)
 8005298:	4013      	ands	r3, r2
 800529a:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800529c:	68fb      	ldr	r3, [r7, #12]
 800529e:	2b06      	cmp	r3, #6
 80052a0:	d00b      	beq.n	80052ba <HAL_TIM_Base_Start_IT+0x5a>
 80052a2:	68fb      	ldr	r3, [r7, #12]
 80052a4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80052a8:	d007      	beq.n	80052ba <HAL_TIM_Base_Start_IT+0x5a>
  {
    __HAL_TIM_ENABLE(htim);
 80052aa:	687b      	ldr	r3, [r7, #4]
 80052ac:	681b      	ldr	r3, [r3, #0]
 80052ae:	681a      	ldr	r2, [r3, #0]
 80052b0:	687b      	ldr	r3, [r7, #4]
 80052b2:	681b      	ldr	r3, [r3, #0]
 80052b4:	f042 0201 	orr.w	r2, r2, #1
 80052b8:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80052ba:	2300      	movs	r3, #0
}
 80052bc:	4618      	mov	r0, r3
 80052be:	3714      	adds	r7, #20
 80052c0:	46bd      	mov	sp, r7
 80052c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052c6:	4770      	bx	lr
 80052c8:	00010007 	.word	0x00010007

080052cc <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim,  TIM_Encoder_InitTypeDef *sConfig)
{
 80052cc:	b580      	push	{r7, lr}
 80052ce:	b086      	sub	sp, #24
 80052d0:	af00      	add	r7, sp, #0
 80052d2:	6078      	str	r0, [r7, #4]
 80052d4:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 80052d6:	687b      	ldr	r3, [r7, #4]
 80052d8:	2b00      	cmp	r3, #0
 80052da:	d101      	bne.n	80052e0 <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 80052dc:	2301      	movs	r3, #1
 80052de:	e097      	b.n	8005410 <HAL_TIM_Encoder_Init+0x144>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC1Prescaler));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));

  if (htim->State == HAL_TIM_STATE_RESET)
 80052e0:	687b      	ldr	r3, [r7, #4]
 80052e2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80052e6:	b2db      	uxtb	r3, r3
 80052e8:	2b00      	cmp	r3, #0
 80052ea:	d106      	bne.n	80052fa <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80052ec:	687b      	ldr	r3, [r7, #4]
 80052ee:	2200      	movs	r2, #0
 80052f0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 80052f4:	6878      	ldr	r0, [r7, #4]
 80052f6:	f7fb ffb3 	bl	8001260 <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80052fa:	687b      	ldr	r3, [r7, #4]
 80052fc:	2202      	movs	r2, #2
 80052fe:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 8005302:	687b      	ldr	r3, [r7, #4]
 8005304:	681b      	ldr	r3, [r3, #0]
 8005306:	689b      	ldr	r3, [r3, #8]
 8005308:	687a      	ldr	r2, [r7, #4]
 800530a:	6812      	ldr	r2, [r2, #0]
 800530c:	f423 33a0 	bic.w	r3, r3, #81920	; 0x14000
 8005310:	f023 0307 	bic.w	r3, r3, #7
 8005314:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005316:	687b      	ldr	r3, [r7, #4]
 8005318:	681a      	ldr	r2, [r3, #0]
 800531a:	687b      	ldr	r3, [r7, #4]
 800531c:	3304      	adds	r3, #4
 800531e:	4619      	mov	r1, r3
 8005320:	4610      	mov	r0, r2
 8005322:	f000 fb5d 	bl	80059e0 <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8005326:	687b      	ldr	r3, [r7, #4]
 8005328:	681b      	ldr	r3, [r3, #0]
 800532a:	689b      	ldr	r3, [r3, #8]
 800532c:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 800532e:	687b      	ldr	r3, [r7, #4]
 8005330:	681b      	ldr	r3, [r3, #0]
 8005332:	699b      	ldr	r3, [r3, #24]
 8005334:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 8005336:	687b      	ldr	r3, [r7, #4]
 8005338:	681b      	ldr	r3, [r3, #0]
 800533a:	6a1b      	ldr	r3, [r3, #32]
 800533c:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 800533e:	683b      	ldr	r3, [r7, #0]
 8005340:	681b      	ldr	r3, [r3, #0]
 8005342:	697a      	ldr	r2, [r7, #20]
 8005344:	4313      	orrs	r3, r2
 8005346:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 8005348:	693b      	ldr	r3, [r7, #16]
 800534a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800534e:	f023 0303 	bic.w	r3, r3, #3
 8005352:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 8005354:	683b      	ldr	r3, [r7, #0]
 8005356:	689a      	ldr	r2, [r3, #8]
 8005358:	683b      	ldr	r3, [r7, #0]
 800535a:	699b      	ldr	r3, [r3, #24]
 800535c:	021b      	lsls	r3, r3, #8
 800535e:	4313      	orrs	r3, r2
 8005360:	693a      	ldr	r2, [r7, #16]
 8005362:	4313      	orrs	r3, r2
 8005364:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 8005366:	693b      	ldr	r3, [r7, #16]
 8005368:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 800536c:	f023 030c 	bic.w	r3, r3, #12
 8005370:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 8005372:	693b      	ldr	r3, [r7, #16]
 8005374:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8005378:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800537c:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 800537e:	683b      	ldr	r3, [r7, #0]
 8005380:	68da      	ldr	r2, [r3, #12]
 8005382:	683b      	ldr	r3, [r7, #0]
 8005384:	69db      	ldr	r3, [r3, #28]
 8005386:	021b      	lsls	r3, r3, #8
 8005388:	4313      	orrs	r3, r2
 800538a:	693a      	ldr	r2, [r7, #16]
 800538c:	4313      	orrs	r3, r2
 800538e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 8005390:	683b      	ldr	r3, [r7, #0]
 8005392:	691b      	ldr	r3, [r3, #16]
 8005394:	011a      	lsls	r2, r3, #4
 8005396:	683b      	ldr	r3, [r7, #0]
 8005398:	6a1b      	ldr	r3, [r3, #32]
 800539a:	031b      	lsls	r3, r3, #12
 800539c:	4313      	orrs	r3, r2
 800539e:	693a      	ldr	r2, [r7, #16]
 80053a0:	4313      	orrs	r3, r2
 80053a2:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 80053a4:	68fb      	ldr	r3, [r7, #12]
 80053a6:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 80053aa:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 80053ac:	68fb      	ldr	r3, [r7, #12]
 80053ae:	f023 0388 	bic.w	r3, r3, #136	; 0x88
 80053b2:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 80053b4:	683b      	ldr	r3, [r7, #0]
 80053b6:	685a      	ldr	r2, [r3, #4]
 80053b8:	683b      	ldr	r3, [r7, #0]
 80053ba:	695b      	ldr	r3, [r3, #20]
 80053bc:	011b      	lsls	r3, r3, #4
 80053be:	4313      	orrs	r3, r2
 80053c0:	68fa      	ldr	r2, [r7, #12]
 80053c2:	4313      	orrs	r3, r2
 80053c4:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 80053c6:	687b      	ldr	r3, [r7, #4]
 80053c8:	681b      	ldr	r3, [r3, #0]
 80053ca:	697a      	ldr	r2, [r7, #20]
 80053cc:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 80053ce:	687b      	ldr	r3, [r7, #4]
 80053d0:	681b      	ldr	r3, [r3, #0]
 80053d2:	693a      	ldr	r2, [r7, #16]
 80053d4:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 80053d6:	687b      	ldr	r3, [r7, #4]
 80053d8:	681b      	ldr	r3, [r3, #0]
 80053da:	68fa      	ldr	r2, [r7, #12]
 80053dc:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80053de:	687b      	ldr	r3, [r7, #4]
 80053e0:	2201      	movs	r2, #1
 80053e2:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 80053e6:	687b      	ldr	r3, [r7, #4]
 80053e8:	2201      	movs	r2, #1
 80053ea:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 80053ee:	687b      	ldr	r3, [r7, #4]
 80053f0:	2201      	movs	r2, #1
 80053f2:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 80053f6:	687b      	ldr	r3, [r7, #4]
 80053f8:	2201      	movs	r2, #1
 80053fa:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 80053fe:	687b      	ldr	r3, [r7, #4]
 8005400:	2201      	movs	r2, #1
 8005402:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005406:	687b      	ldr	r3, [r7, #4]
 8005408:	2201      	movs	r2, #1
 800540a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800540e:	2300      	movs	r3, #0
}
 8005410:	4618      	mov	r0, r3
 8005412:	3718      	adds	r7, #24
 8005414:	46bd      	mov	sp, r7
 8005416:	bd80      	pop	{r7, pc}

08005418 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8005418:	b580      	push	{r7, lr}
 800541a:	b082      	sub	sp, #8
 800541c:	af00      	add	r7, sp, #0
 800541e:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8005420:	687b      	ldr	r3, [r7, #4]
 8005422:	681b      	ldr	r3, [r3, #0]
 8005424:	691b      	ldr	r3, [r3, #16]
 8005426:	f003 0302 	and.w	r3, r3, #2
 800542a:	2b02      	cmp	r3, #2
 800542c:	d122      	bne.n	8005474 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800542e:	687b      	ldr	r3, [r7, #4]
 8005430:	681b      	ldr	r3, [r3, #0]
 8005432:	68db      	ldr	r3, [r3, #12]
 8005434:	f003 0302 	and.w	r3, r3, #2
 8005438:	2b02      	cmp	r3, #2
 800543a:	d11b      	bne.n	8005474 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800543c:	687b      	ldr	r3, [r7, #4]
 800543e:	681b      	ldr	r3, [r3, #0]
 8005440:	f06f 0202 	mvn.w	r2, #2
 8005444:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8005446:	687b      	ldr	r3, [r7, #4]
 8005448:	2201      	movs	r2, #1
 800544a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800544c:	687b      	ldr	r3, [r7, #4]
 800544e:	681b      	ldr	r3, [r3, #0]
 8005450:	699b      	ldr	r3, [r3, #24]
 8005452:	f003 0303 	and.w	r3, r3, #3
 8005456:	2b00      	cmp	r3, #0
 8005458:	d003      	beq.n	8005462 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800545a:	6878      	ldr	r0, [r7, #4]
 800545c:	f000 faa2 	bl	80059a4 <HAL_TIM_IC_CaptureCallback>
 8005460:	e005      	b.n	800546e <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8005462:	6878      	ldr	r0, [r7, #4]
 8005464:	f000 fa94 	bl	8005990 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005468:	6878      	ldr	r0, [r7, #4]
 800546a:	f000 faa5 	bl	80059b8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800546e:	687b      	ldr	r3, [r7, #4]
 8005470:	2200      	movs	r2, #0
 8005472:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8005474:	687b      	ldr	r3, [r7, #4]
 8005476:	681b      	ldr	r3, [r3, #0]
 8005478:	691b      	ldr	r3, [r3, #16]
 800547a:	f003 0304 	and.w	r3, r3, #4
 800547e:	2b04      	cmp	r3, #4
 8005480:	d122      	bne.n	80054c8 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8005482:	687b      	ldr	r3, [r7, #4]
 8005484:	681b      	ldr	r3, [r3, #0]
 8005486:	68db      	ldr	r3, [r3, #12]
 8005488:	f003 0304 	and.w	r3, r3, #4
 800548c:	2b04      	cmp	r3, #4
 800548e:	d11b      	bne.n	80054c8 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8005490:	687b      	ldr	r3, [r7, #4]
 8005492:	681b      	ldr	r3, [r3, #0]
 8005494:	f06f 0204 	mvn.w	r2, #4
 8005498:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800549a:	687b      	ldr	r3, [r7, #4]
 800549c:	2202      	movs	r2, #2
 800549e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80054a0:	687b      	ldr	r3, [r7, #4]
 80054a2:	681b      	ldr	r3, [r3, #0]
 80054a4:	699b      	ldr	r3, [r3, #24]
 80054a6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80054aa:	2b00      	cmp	r3, #0
 80054ac:	d003      	beq.n	80054b6 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80054ae:	6878      	ldr	r0, [r7, #4]
 80054b0:	f000 fa78 	bl	80059a4 <HAL_TIM_IC_CaptureCallback>
 80054b4:	e005      	b.n	80054c2 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80054b6:	6878      	ldr	r0, [r7, #4]
 80054b8:	f000 fa6a 	bl	8005990 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80054bc:	6878      	ldr	r0, [r7, #4]
 80054be:	f000 fa7b 	bl	80059b8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80054c2:	687b      	ldr	r3, [r7, #4]
 80054c4:	2200      	movs	r2, #0
 80054c6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80054c8:	687b      	ldr	r3, [r7, #4]
 80054ca:	681b      	ldr	r3, [r3, #0]
 80054cc:	691b      	ldr	r3, [r3, #16]
 80054ce:	f003 0308 	and.w	r3, r3, #8
 80054d2:	2b08      	cmp	r3, #8
 80054d4:	d122      	bne.n	800551c <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80054d6:	687b      	ldr	r3, [r7, #4]
 80054d8:	681b      	ldr	r3, [r3, #0]
 80054da:	68db      	ldr	r3, [r3, #12]
 80054dc:	f003 0308 	and.w	r3, r3, #8
 80054e0:	2b08      	cmp	r3, #8
 80054e2:	d11b      	bne.n	800551c <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80054e4:	687b      	ldr	r3, [r7, #4]
 80054e6:	681b      	ldr	r3, [r3, #0]
 80054e8:	f06f 0208 	mvn.w	r2, #8
 80054ec:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80054ee:	687b      	ldr	r3, [r7, #4]
 80054f0:	2204      	movs	r2, #4
 80054f2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80054f4:	687b      	ldr	r3, [r7, #4]
 80054f6:	681b      	ldr	r3, [r3, #0]
 80054f8:	69db      	ldr	r3, [r3, #28]
 80054fa:	f003 0303 	and.w	r3, r3, #3
 80054fe:	2b00      	cmp	r3, #0
 8005500:	d003      	beq.n	800550a <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005502:	6878      	ldr	r0, [r7, #4]
 8005504:	f000 fa4e 	bl	80059a4 <HAL_TIM_IC_CaptureCallback>
 8005508:	e005      	b.n	8005516 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800550a:	6878      	ldr	r0, [r7, #4]
 800550c:	f000 fa40 	bl	8005990 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005510:	6878      	ldr	r0, [r7, #4]
 8005512:	f000 fa51 	bl	80059b8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005516:	687b      	ldr	r3, [r7, #4]
 8005518:	2200      	movs	r2, #0
 800551a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800551c:	687b      	ldr	r3, [r7, #4]
 800551e:	681b      	ldr	r3, [r3, #0]
 8005520:	691b      	ldr	r3, [r3, #16]
 8005522:	f003 0310 	and.w	r3, r3, #16
 8005526:	2b10      	cmp	r3, #16
 8005528:	d122      	bne.n	8005570 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800552a:	687b      	ldr	r3, [r7, #4]
 800552c:	681b      	ldr	r3, [r3, #0]
 800552e:	68db      	ldr	r3, [r3, #12]
 8005530:	f003 0310 	and.w	r3, r3, #16
 8005534:	2b10      	cmp	r3, #16
 8005536:	d11b      	bne.n	8005570 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8005538:	687b      	ldr	r3, [r7, #4]
 800553a:	681b      	ldr	r3, [r3, #0]
 800553c:	f06f 0210 	mvn.w	r2, #16
 8005540:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8005542:	687b      	ldr	r3, [r7, #4]
 8005544:	2208      	movs	r2, #8
 8005546:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8005548:	687b      	ldr	r3, [r7, #4]
 800554a:	681b      	ldr	r3, [r3, #0]
 800554c:	69db      	ldr	r3, [r3, #28]
 800554e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005552:	2b00      	cmp	r3, #0
 8005554:	d003      	beq.n	800555e <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005556:	6878      	ldr	r0, [r7, #4]
 8005558:	f000 fa24 	bl	80059a4 <HAL_TIM_IC_CaptureCallback>
 800555c:	e005      	b.n	800556a <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800555e:	6878      	ldr	r0, [r7, #4]
 8005560:	f000 fa16 	bl	8005990 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005564:	6878      	ldr	r0, [r7, #4]
 8005566:	f000 fa27 	bl	80059b8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800556a:	687b      	ldr	r3, [r7, #4]
 800556c:	2200      	movs	r2, #0
 800556e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8005570:	687b      	ldr	r3, [r7, #4]
 8005572:	681b      	ldr	r3, [r3, #0]
 8005574:	691b      	ldr	r3, [r3, #16]
 8005576:	f003 0301 	and.w	r3, r3, #1
 800557a:	2b01      	cmp	r3, #1
 800557c:	d10e      	bne.n	800559c <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800557e:	687b      	ldr	r3, [r7, #4]
 8005580:	681b      	ldr	r3, [r3, #0]
 8005582:	68db      	ldr	r3, [r3, #12]
 8005584:	f003 0301 	and.w	r3, r3, #1
 8005588:	2b01      	cmp	r3, #1
 800558a:	d107      	bne.n	800559c <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800558c:	687b      	ldr	r3, [r7, #4]
 800558e:	681b      	ldr	r3, [r3, #0]
 8005590:	f06f 0201 	mvn.w	r2, #1
 8005594:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8005596:	6878      	ldr	r0, [r7, #4]
 8005598:	f000 f9f0 	bl	800597c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800559c:	687b      	ldr	r3, [r7, #4]
 800559e:	681b      	ldr	r3, [r3, #0]
 80055a0:	691b      	ldr	r3, [r3, #16]
 80055a2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80055a6:	2b80      	cmp	r3, #128	; 0x80
 80055a8:	d10e      	bne.n	80055c8 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80055aa:	687b      	ldr	r3, [r7, #4]
 80055ac:	681b      	ldr	r3, [r3, #0]
 80055ae:	68db      	ldr	r3, [r3, #12]
 80055b0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80055b4:	2b80      	cmp	r3, #128	; 0x80
 80055b6:	d107      	bne.n	80055c8 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80055b8:	687b      	ldr	r3, [r7, #4]
 80055ba:	681b      	ldr	r3, [r3, #0]
 80055bc:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80055c0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80055c2:	6878      	ldr	r0, [r7, #4]
 80055c4:	f000 fd5e 	bl	8006084 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 80055c8:	687b      	ldr	r3, [r7, #4]
 80055ca:	681b      	ldr	r3, [r3, #0]
 80055cc:	691b      	ldr	r3, [r3, #16]
 80055ce:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80055d2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80055d6:	d10e      	bne.n	80055f6 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80055d8:	687b      	ldr	r3, [r7, #4]
 80055da:	681b      	ldr	r3, [r3, #0]
 80055dc:	68db      	ldr	r3, [r3, #12]
 80055de:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80055e2:	2b80      	cmp	r3, #128	; 0x80
 80055e4:	d107      	bne.n	80055f6 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 80055e6:	687b      	ldr	r3, [r7, #4]
 80055e8:	681b      	ldr	r3, [r3, #0]
 80055ea:	f46f 7280 	mvn.w	r2, #256	; 0x100
 80055ee:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 80055f0:	6878      	ldr	r0, [r7, #4]
 80055f2:	f000 fd51 	bl	8006098 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80055f6:	687b      	ldr	r3, [r7, #4]
 80055f8:	681b      	ldr	r3, [r3, #0]
 80055fa:	691b      	ldr	r3, [r3, #16]
 80055fc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005600:	2b40      	cmp	r3, #64	; 0x40
 8005602:	d10e      	bne.n	8005622 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8005604:	687b      	ldr	r3, [r7, #4]
 8005606:	681b      	ldr	r3, [r3, #0]
 8005608:	68db      	ldr	r3, [r3, #12]
 800560a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800560e:	2b40      	cmp	r3, #64	; 0x40
 8005610:	d107      	bne.n	8005622 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8005612:	687b      	ldr	r3, [r7, #4]
 8005614:	681b      	ldr	r3, [r3, #0]
 8005616:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800561a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800561c:	6878      	ldr	r0, [r7, #4]
 800561e:	f000 f9d5 	bl	80059cc <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8005622:	687b      	ldr	r3, [r7, #4]
 8005624:	681b      	ldr	r3, [r3, #0]
 8005626:	691b      	ldr	r3, [r3, #16]
 8005628:	f003 0320 	and.w	r3, r3, #32
 800562c:	2b20      	cmp	r3, #32
 800562e:	d10e      	bne.n	800564e <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8005630:	687b      	ldr	r3, [r7, #4]
 8005632:	681b      	ldr	r3, [r3, #0]
 8005634:	68db      	ldr	r3, [r3, #12]
 8005636:	f003 0320 	and.w	r3, r3, #32
 800563a:	2b20      	cmp	r3, #32
 800563c:	d107      	bne.n	800564e <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800563e:	687b      	ldr	r3, [r7, #4]
 8005640:	681b      	ldr	r3, [r3, #0]
 8005642:	f06f 0220 	mvn.w	r2, #32
 8005646:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8005648:	6878      	ldr	r0, [r7, #4]
 800564a:	f000 fd11 	bl	8006070 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Encoder index event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_IDX) != RESET)
 800564e:	687b      	ldr	r3, [r7, #4]
 8005650:	681b      	ldr	r3, [r3, #0]
 8005652:	691b      	ldr	r3, [r3, #16]
 8005654:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8005658:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800565c:	d10f      	bne.n	800567e <HAL_TIM_IRQHandler+0x266>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_IDX) != RESET)
 800565e:	687b      	ldr	r3, [r7, #4]
 8005660:	681b      	ldr	r3, [r3, #0]
 8005662:	68db      	ldr	r3, [r3, #12]
 8005664:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8005668:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800566c:	d107      	bne.n	800567e <HAL_TIM_IRQHandler+0x266>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_IDX);
 800566e:	687b      	ldr	r3, [r7, #4]
 8005670:	681b      	ldr	r3, [r3, #0]
 8005672:	f46f 1280 	mvn.w	r2, #1048576	; 0x100000
 8005676:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->EncoderIndexCallback(htim);
#else
      HAL_TIMEx_EncoderIndexCallback(htim);
 8005678:	6878      	ldr	r0, [r7, #4]
 800567a:	f000 fd17 	bl	80060ac <HAL_TIMEx_EncoderIndexCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Direction change event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_DIR) != RESET)
 800567e:	687b      	ldr	r3, [r7, #4]
 8005680:	681b      	ldr	r3, [r3, #0]
 8005682:	691b      	ldr	r3, [r3, #16]
 8005684:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8005688:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800568c:	d10f      	bne.n	80056ae <HAL_TIM_IRQHandler+0x296>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_DIR) != RESET)
 800568e:	687b      	ldr	r3, [r7, #4]
 8005690:	681b      	ldr	r3, [r3, #0]
 8005692:	68db      	ldr	r3, [r3, #12]
 8005694:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8005698:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800569c:	d107      	bne.n	80056ae <HAL_TIM_IRQHandler+0x296>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_DIR);
 800569e:	687b      	ldr	r3, [r7, #4]
 80056a0:	681b      	ldr	r3, [r3, #0]
 80056a2:	f46f 1200 	mvn.w	r2, #2097152	; 0x200000
 80056a6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->DirectionChangeCallback(htim);
#else
      HAL_TIMEx_DirectionChangeCallback(htim);
 80056a8:	6878      	ldr	r0, [r7, #4]
 80056aa:	f000 fd09 	bl	80060c0 <HAL_TIMEx_DirectionChangeCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Index error event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_IERR) != RESET)
 80056ae:	687b      	ldr	r3, [r7, #4]
 80056b0:	681b      	ldr	r3, [r3, #0]
 80056b2:	691b      	ldr	r3, [r3, #16]
 80056b4:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80056b8:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80056bc:	d10f      	bne.n	80056de <HAL_TIM_IRQHandler+0x2c6>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_IERR) != RESET)
 80056be:	687b      	ldr	r3, [r7, #4]
 80056c0:	681b      	ldr	r3, [r3, #0]
 80056c2:	68db      	ldr	r3, [r3, #12]
 80056c4:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80056c8:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80056cc:	d107      	bne.n	80056de <HAL_TIM_IRQHandler+0x2c6>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_IERR);
 80056ce:	687b      	ldr	r3, [r7, #4]
 80056d0:	681b      	ldr	r3, [r3, #0]
 80056d2:	f46f 0280 	mvn.w	r2, #4194304	; 0x400000
 80056d6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->IndexErrorCallback(htim);
#else
      HAL_TIMEx_IndexErrorCallback(htim);
 80056d8:	6878      	ldr	r0, [r7, #4]
 80056da:	f000 fcfb 	bl	80060d4 <HAL_TIMEx_IndexErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Transition error event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TERR) != RESET)
 80056de:	687b      	ldr	r3, [r7, #4]
 80056e0:	681b      	ldr	r3, [r3, #0]
 80056e2:	691b      	ldr	r3, [r3, #16]
 80056e4:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80056e8:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80056ec:	d10f      	bne.n	800570e <HAL_TIM_IRQHandler+0x2f6>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TERR) != RESET)
 80056ee:	687b      	ldr	r3, [r7, #4]
 80056f0:	681b      	ldr	r3, [r3, #0]
 80056f2:	68db      	ldr	r3, [r3, #12]
 80056f4:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80056f8:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80056fc:	d107      	bne.n	800570e <HAL_TIM_IRQHandler+0x2f6>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_TERR);
 80056fe:	687b      	ldr	r3, [r7, #4]
 8005700:	681b      	ldr	r3, [r3, #0]
 8005702:	f46f 0200 	mvn.w	r2, #8388608	; 0x800000
 8005706:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TransitionErrorCallback(htim);
#else
      HAL_TIMEx_TransitionErrorCallback(htim);
 8005708:	6878      	ldr	r0, [r7, #4]
 800570a:	f000 fced 	bl	80060e8 <HAL_TIMEx_TransitionErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800570e:	bf00      	nop
 8005710:	3708      	adds	r7, #8
 8005712:	46bd      	mov	sp, r7
 8005714:	bd80      	pop	{r7, pc}
	...

08005718 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8005718:	b580      	push	{r7, lr}
 800571a:	b084      	sub	sp, #16
 800571c:	af00      	add	r7, sp, #0
 800571e:	6078      	str	r0, [r7, #4]
 8005720:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8005722:	687b      	ldr	r3, [r7, #4]
 8005724:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005728:	2b01      	cmp	r3, #1
 800572a:	d101      	bne.n	8005730 <HAL_TIM_ConfigClockSource+0x18>
 800572c:	2302      	movs	r3, #2
 800572e:	e0d2      	b.n	80058d6 <HAL_TIM_ConfigClockSource+0x1be>
 8005730:	687b      	ldr	r3, [r7, #4]
 8005732:	2201      	movs	r2, #1
 8005734:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8005738:	687b      	ldr	r3, [r7, #4]
 800573a:	2202      	movs	r2, #2
 800573c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8005740:	687b      	ldr	r3, [r7, #4]
 8005742:	681b      	ldr	r3, [r3, #0]
 8005744:	689b      	ldr	r3, [r3, #8]
 8005746:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8005748:	68fb      	ldr	r3, [r7, #12]
 800574a:	f423 1344 	bic.w	r3, r3, #3211264	; 0x310000
 800574e:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8005752:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005754:	68fb      	ldr	r3, [r7, #12]
 8005756:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800575a:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 800575c:	687b      	ldr	r3, [r7, #4]
 800575e:	681b      	ldr	r3, [r3, #0]
 8005760:	68fa      	ldr	r2, [r7, #12]
 8005762:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8005764:	683b      	ldr	r3, [r7, #0]
 8005766:	681b      	ldr	r3, [r3, #0]
 8005768:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800576c:	f000 80a9 	beq.w	80058c2 <HAL_TIM_ConfigClockSource+0x1aa>
 8005770:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005774:	d81a      	bhi.n	80057ac <HAL_TIM_ConfigClockSource+0x94>
 8005776:	2b30      	cmp	r3, #48	; 0x30
 8005778:	f000 809a 	beq.w	80058b0 <HAL_TIM_ConfigClockSource+0x198>
 800577c:	2b30      	cmp	r3, #48	; 0x30
 800577e:	d809      	bhi.n	8005794 <HAL_TIM_ConfigClockSource+0x7c>
 8005780:	2b10      	cmp	r3, #16
 8005782:	f000 8095 	beq.w	80058b0 <HAL_TIM_ConfigClockSource+0x198>
 8005786:	2b20      	cmp	r3, #32
 8005788:	f000 8092 	beq.w	80058b0 <HAL_TIM_ConfigClockSource+0x198>
 800578c:	2b00      	cmp	r3, #0
 800578e:	f000 808f 	beq.w	80058b0 <HAL_TIM_ConfigClockSource+0x198>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
      break;
    }

    default:
      break;
 8005792:	e097      	b.n	80058c4 <HAL_TIM_ConfigClockSource+0x1ac>
  switch (sClockSourceConfig->ClockSource)
 8005794:	2b50      	cmp	r3, #80	; 0x50
 8005796:	d05b      	beq.n	8005850 <HAL_TIM_ConfigClockSource+0x138>
 8005798:	2b50      	cmp	r3, #80	; 0x50
 800579a:	d802      	bhi.n	80057a2 <HAL_TIM_ConfigClockSource+0x8a>
 800579c:	2b40      	cmp	r3, #64	; 0x40
 800579e:	d077      	beq.n	8005890 <HAL_TIM_ConfigClockSource+0x178>
      break;
 80057a0:	e090      	b.n	80058c4 <HAL_TIM_ConfigClockSource+0x1ac>
  switch (sClockSourceConfig->ClockSource)
 80057a2:	2b60      	cmp	r3, #96	; 0x60
 80057a4:	d064      	beq.n	8005870 <HAL_TIM_ConfigClockSource+0x158>
 80057a6:	2b70      	cmp	r3, #112	; 0x70
 80057a8:	d028      	beq.n	80057fc <HAL_TIM_ConfigClockSource+0xe4>
      break;
 80057aa:	e08b      	b.n	80058c4 <HAL_TIM_ConfigClockSource+0x1ac>
  switch (sClockSourceConfig->ClockSource)
 80057ac:	4a4c      	ldr	r2, [pc, #304]	; (80058e0 <HAL_TIM_ConfigClockSource+0x1c8>)
 80057ae:	4293      	cmp	r3, r2
 80057b0:	d07e      	beq.n	80058b0 <HAL_TIM_ConfigClockSource+0x198>
 80057b2:	4a4b      	ldr	r2, [pc, #300]	; (80058e0 <HAL_TIM_ConfigClockSource+0x1c8>)
 80057b4:	4293      	cmp	r3, r2
 80057b6:	d810      	bhi.n	80057da <HAL_TIM_ConfigClockSource+0xc2>
 80057b8:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80057bc:	d078      	beq.n	80058b0 <HAL_TIM_ConfigClockSource+0x198>
 80057be:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80057c2:	d803      	bhi.n	80057cc <HAL_TIM_ConfigClockSource+0xb4>
 80057c4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80057c8:	d02f      	beq.n	800582a <HAL_TIM_ConfigClockSource+0x112>
      break;
 80057ca:	e07b      	b.n	80058c4 <HAL_TIM_ConfigClockSource+0x1ac>
  switch (sClockSourceConfig->ClockSource)
 80057cc:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 80057d0:	d06e      	beq.n	80058b0 <HAL_TIM_ConfigClockSource+0x198>
 80057d2:	4a44      	ldr	r2, [pc, #272]	; (80058e4 <HAL_TIM_ConfigClockSource+0x1cc>)
 80057d4:	4293      	cmp	r3, r2
 80057d6:	d06b      	beq.n	80058b0 <HAL_TIM_ConfigClockSource+0x198>
      break;
 80057d8:	e074      	b.n	80058c4 <HAL_TIM_ConfigClockSource+0x1ac>
  switch (sClockSourceConfig->ClockSource)
 80057da:	4a43      	ldr	r2, [pc, #268]	; (80058e8 <HAL_TIM_ConfigClockSource+0x1d0>)
 80057dc:	4293      	cmp	r3, r2
 80057de:	d067      	beq.n	80058b0 <HAL_TIM_ConfigClockSource+0x198>
 80057e0:	4a41      	ldr	r2, [pc, #260]	; (80058e8 <HAL_TIM_ConfigClockSource+0x1d0>)
 80057e2:	4293      	cmp	r3, r2
 80057e4:	d803      	bhi.n	80057ee <HAL_TIM_ConfigClockSource+0xd6>
 80057e6:	4a41      	ldr	r2, [pc, #260]	; (80058ec <HAL_TIM_ConfigClockSource+0x1d4>)
 80057e8:	4293      	cmp	r3, r2
 80057ea:	d061      	beq.n	80058b0 <HAL_TIM_ConfigClockSource+0x198>
      break;
 80057ec:	e06a      	b.n	80058c4 <HAL_TIM_ConfigClockSource+0x1ac>
  switch (sClockSourceConfig->ClockSource)
 80057ee:	4a40      	ldr	r2, [pc, #256]	; (80058f0 <HAL_TIM_ConfigClockSource+0x1d8>)
 80057f0:	4293      	cmp	r3, r2
 80057f2:	d05d      	beq.n	80058b0 <HAL_TIM_ConfigClockSource+0x198>
 80057f4:	4a3f      	ldr	r2, [pc, #252]	; (80058f4 <HAL_TIM_ConfigClockSource+0x1dc>)
 80057f6:	4293      	cmp	r3, r2
 80057f8:	d05a      	beq.n	80058b0 <HAL_TIM_ConfigClockSource+0x198>
      break;
 80057fa:	e063      	b.n	80058c4 <HAL_TIM_ConfigClockSource+0x1ac>
      TIM_ETR_SetConfig(htim->Instance,
 80057fc:	687b      	ldr	r3, [r7, #4]
 80057fe:	6818      	ldr	r0, [r3, #0]
 8005800:	683b      	ldr	r3, [r7, #0]
 8005802:	6899      	ldr	r1, [r3, #8]
 8005804:	683b      	ldr	r3, [r7, #0]
 8005806:	685a      	ldr	r2, [r3, #4]
 8005808:	683b      	ldr	r3, [r7, #0]
 800580a:	68db      	ldr	r3, [r3, #12]
 800580c:	f000 fac8 	bl	8005da0 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8005810:	687b      	ldr	r3, [r7, #4]
 8005812:	681b      	ldr	r3, [r3, #0]
 8005814:	689b      	ldr	r3, [r3, #8]
 8005816:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8005818:	68fb      	ldr	r3, [r7, #12]
 800581a:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 800581e:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 8005820:	687b      	ldr	r3, [r7, #4]
 8005822:	681b      	ldr	r3, [r3, #0]
 8005824:	68fa      	ldr	r2, [r7, #12]
 8005826:	609a      	str	r2, [r3, #8]
      break;
 8005828:	e04c      	b.n	80058c4 <HAL_TIM_ConfigClockSource+0x1ac>
      TIM_ETR_SetConfig(htim->Instance,
 800582a:	687b      	ldr	r3, [r7, #4]
 800582c:	6818      	ldr	r0, [r3, #0]
 800582e:	683b      	ldr	r3, [r7, #0]
 8005830:	6899      	ldr	r1, [r3, #8]
 8005832:	683b      	ldr	r3, [r7, #0]
 8005834:	685a      	ldr	r2, [r3, #4]
 8005836:	683b      	ldr	r3, [r7, #0]
 8005838:	68db      	ldr	r3, [r3, #12]
 800583a:	f000 fab1 	bl	8005da0 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800583e:	687b      	ldr	r3, [r7, #4]
 8005840:	681b      	ldr	r3, [r3, #0]
 8005842:	689a      	ldr	r2, [r3, #8]
 8005844:	687b      	ldr	r3, [r7, #4]
 8005846:	681b      	ldr	r3, [r3, #0]
 8005848:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800584c:	609a      	str	r2, [r3, #8]
      break;
 800584e:	e039      	b.n	80058c4 <HAL_TIM_ConfigClockSource+0x1ac>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8005850:	687b      	ldr	r3, [r7, #4]
 8005852:	6818      	ldr	r0, [r3, #0]
 8005854:	683b      	ldr	r3, [r7, #0]
 8005856:	6859      	ldr	r1, [r3, #4]
 8005858:	683b      	ldr	r3, [r7, #0]
 800585a:	68db      	ldr	r3, [r3, #12]
 800585c:	461a      	mov	r2, r3
 800585e:	f000 fa23 	bl	8005ca8 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8005862:	687b      	ldr	r3, [r7, #4]
 8005864:	681b      	ldr	r3, [r3, #0]
 8005866:	2150      	movs	r1, #80	; 0x50
 8005868:	4618      	mov	r0, r3
 800586a:	f000 fa7c 	bl	8005d66 <TIM_ITRx_SetConfig>
      break;
 800586e:	e029      	b.n	80058c4 <HAL_TIM_ConfigClockSource+0x1ac>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8005870:	687b      	ldr	r3, [r7, #4]
 8005872:	6818      	ldr	r0, [r3, #0]
 8005874:	683b      	ldr	r3, [r7, #0]
 8005876:	6859      	ldr	r1, [r3, #4]
 8005878:	683b      	ldr	r3, [r7, #0]
 800587a:	68db      	ldr	r3, [r3, #12]
 800587c:	461a      	mov	r2, r3
 800587e:	f000 fa42 	bl	8005d06 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8005882:	687b      	ldr	r3, [r7, #4]
 8005884:	681b      	ldr	r3, [r3, #0]
 8005886:	2160      	movs	r1, #96	; 0x60
 8005888:	4618      	mov	r0, r3
 800588a:	f000 fa6c 	bl	8005d66 <TIM_ITRx_SetConfig>
      break;
 800588e:	e019      	b.n	80058c4 <HAL_TIM_ConfigClockSource+0x1ac>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8005890:	687b      	ldr	r3, [r7, #4]
 8005892:	6818      	ldr	r0, [r3, #0]
 8005894:	683b      	ldr	r3, [r7, #0]
 8005896:	6859      	ldr	r1, [r3, #4]
 8005898:	683b      	ldr	r3, [r7, #0]
 800589a:	68db      	ldr	r3, [r3, #12]
 800589c:	461a      	mov	r2, r3
 800589e:	f000 fa03 	bl	8005ca8 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80058a2:	687b      	ldr	r3, [r7, #4]
 80058a4:	681b      	ldr	r3, [r3, #0]
 80058a6:	2140      	movs	r1, #64	; 0x40
 80058a8:	4618      	mov	r0, r3
 80058aa:	f000 fa5c 	bl	8005d66 <TIM_ITRx_SetConfig>
      break;
 80058ae:	e009      	b.n	80058c4 <HAL_TIM_ConfigClockSource+0x1ac>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80058b0:	687b      	ldr	r3, [r7, #4]
 80058b2:	681a      	ldr	r2, [r3, #0]
 80058b4:	683b      	ldr	r3, [r7, #0]
 80058b6:	681b      	ldr	r3, [r3, #0]
 80058b8:	4619      	mov	r1, r3
 80058ba:	4610      	mov	r0, r2
 80058bc:	f000 fa53 	bl	8005d66 <TIM_ITRx_SetConfig>
      break;
 80058c0:	e000      	b.n	80058c4 <HAL_TIM_ConfigClockSource+0x1ac>
      break;
 80058c2:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80058c4:	687b      	ldr	r3, [r7, #4]
 80058c6:	2201      	movs	r2, #1
 80058c8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80058cc:	687b      	ldr	r3, [r7, #4]
 80058ce:	2200      	movs	r2, #0
 80058d0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80058d4:	2300      	movs	r3, #0
}
 80058d6:	4618      	mov	r0, r3
 80058d8:	3710      	adds	r7, #16
 80058da:	46bd      	mov	sp, r7
 80058dc:	bd80      	pop	{r7, pc}
 80058de:	bf00      	nop
 80058e0:	00100030 	.word	0x00100030
 80058e4:	00100020 	.word	0x00100020
 80058e8:	00100050 	.word	0x00100050
 80058ec:	00100040 	.word	0x00100040
 80058f0:	00100060 	.word	0x00100060
 80058f4:	00100070 	.word	0x00100070

080058f8 <HAL_TIM_SlaveConfigSynchro>:
  *         timer input or external trigger input) and the Slave mode
  *         (Disable, Reset, Gated, Trigger, External clock mode 1, Reset + Trigger, Gated + Reset).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_SlaveConfigSynchro(TIM_HandleTypeDef *htim, TIM_SlaveConfigTypeDef *sSlaveConfig)
{
 80058f8:	b580      	push	{r7, lr}
 80058fa:	b082      	sub	sp, #8
 80058fc:	af00      	add	r7, sp, #0
 80058fe:	6078      	str	r0, [r7, #4]
 8005900:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_SLAVE_INSTANCE(htim->Instance));
  assert_param(IS_TIM_SLAVE_MODE(sSlaveConfig->SlaveMode));
  assert_param(IS_TIM_TRIGGER_INSTANCE(htim->Instance, sSlaveConfig->InputTrigger));

  __HAL_LOCK(htim);
 8005902:	687b      	ldr	r3, [r7, #4]
 8005904:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005908:	2b01      	cmp	r3, #1
 800590a:	d101      	bne.n	8005910 <HAL_TIM_SlaveConfigSynchro+0x18>
 800590c:	2302      	movs	r3, #2
 800590e:	e031      	b.n	8005974 <HAL_TIM_SlaveConfigSynchro+0x7c>
 8005910:	687b      	ldr	r3, [r7, #4]
 8005912:	2201      	movs	r2, #1
 8005914:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8005918:	687b      	ldr	r3, [r7, #4]
 800591a:	2202      	movs	r2, #2
 800591c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  if (TIM_SlaveTimer_SetConfig(htim, sSlaveConfig) != HAL_OK)
 8005920:	6839      	ldr	r1, [r7, #0]
 8005922:	6878      	ldr	r0, [r7, #4]
 8005924:	f000 f904 	bl	8005b30 <TIM_SlaveTimer_SetConfig>
 8005928:	4603      	mov	r3, r0
 800592a:	2b00      	cmp	r3, #0
 800592c:	d009      	beq.n	8005942 <HAL_TIM_SlaveConfigSynchro+0x4a>
  {
    htim->State = HAL_TIM_STATE_READY;
 800592e:	687b      	ldr	r3, [r7, #4]
 8005930:	2201      	movs	r2, #1
 8005932:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    __HAL_UNLOCK(htim);
 8005936:	687b      	ldr	r3, [r7, #4]
 8005938:	2200      	movs	r2, #0
 800593a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    return HAL_ERROR;
 800593e:	2301      	movs	r3, #1
 8005940:	e018      	b.n	8005974 <HAL_TIM_SlaveConfigSynchro+0x7c>
  }

  /* Disable Trigger Interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_TRIGGER);
 8005942:	687b      	ldr	r3, [r7, #4]
 8005944:	681b      	ldr	r3, [r3, #0]
 8005946:	68da      	ldr	r2, [r3, #12]
 8005948:	687b      	ldr	r3, [r7, #4]
 800594a:	681b      	ldr	r3, [r3, #0]
 800594c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005950:	60da      	str	r2, [r3, #12]

  /* Disable Trigger DMA request */
  __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_TRIGGER);
 8005952:	687b      	ldr	r3, [r7, #4]
 8005954:	681b      	ldr	r3, [r3, #0]
 8005956:	68da      	ldr	r2, [r3, #12]
 8005958:	687b      	ldr	r3, [r7, #4]
 800595a:	681b      	ldr	r3, [r3, #0]
 800595c:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8005960:	60da      	str	r2, [r3, #12]

  htim->State = HAL_TIM_STATE_READY;
 8005962:	687b      	ldr	r3, [r7, #4]
 8005964:	2201      	movs	r2, #1
 8005966:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800596a:	687b      	ldr	r3, [r7, #4]
 800596c:	2200      	movs	r2, #0
 800596e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8005972:	2300      	movs	r3, #0
}
 8005974:	4618      	mov	r0, r3
 8005976:	3708      	adds	r7, #8
 8005978:	46bd      	mov	sp, r7
 800597a:	bd80      	pop	{r7, pc}

0800597c <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 800597c:	b480      	push	{r7}
 800597e:	b083      	sub	sp, #12
 8005980:	af00      	add	r7, sp, #0
 8005982:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 8005984:	bf00      	nop
 8005986:	370c      	adds	r7, #12
 8005988:	46bd      	mov	sp, r7
 800598a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800598e:	4770      	bx	lr

08005990 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8005990:	b480      	push	{r7}
 8005992:	b083      	sub	sp, #12
 8005994:	af00      	add	r7, sp, #0
 8005996:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8005998:	bf00      	nop
 800599a:	370c      	adds	r7, #12
 800599c:	46bd      	mov	sp, r7
 800599e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059a2:	4770      	bx	lr

080059a4 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80059a4:	b480      	push	{r7}
 80059a6:	b083      	sub	sp, #12
 80059a8:	af00      	add	r7, sp, #0
 80059aa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80059ac:	bf00      	nop
 80059ae:	370c      	adds	r7, #12
 80059b0:	46bd      	mov	sp, r7
 80059b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059b6:	4770      	bx	lr

080059b8 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80059b8:	b480      	push	{r7}
 80059ba:	b083      	sub	sp, #12
 80059bc:	af00      	add	r7, sp, #0
 80059be:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80059c0:	bf00      	nop
 80059c2:	370c      	adds	r7, #12
 80059c4:	46bd      	mov	sp, r7
 80059c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059ca:	4770      	bx	lr

080059cc <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80059cc:	b480      	push	{r7}
 80059ce:	b083      	sub	sp, #12
 80059d0:	af00      	add	r7, sp, #0
 80059d2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80059d4:	bf00      	nop
 80059d6:	370c      	adds	r7, #12
 80059d8:	46bd      	mov	sp, r7
 80059da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059de:	4770      	bx	lr

080059e0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80059e0:	b480      	push	{r7}
 80059e2:	b085      	sub	sp, #20
 80059e4:	af00      	add	r7, sp, #0
 80059e6:	6078      	str	r0, [r7, #4]
 80059e8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80059ea:	687b      	ldr	r3, [r7, #4]
 80059ec:	681b      	ldr	r3, [r3, #0]
 80059ee:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80059f0:	687b      	ldr	r3, [r7, #4]
 80059f2:	4a46      	ldr	r2, [pc, #280]	; (8005b0c <TIM_Base_SetConfig+0x12c>)
 80059f4:	4293      	cmp	r3, r2
 80059f6:	d017      	beq.n	8005a28 <TIM_Base_SetConfig+0x48>
 80059f8:	687b      	ldr	r3, [r7, #4]
 80059fa:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80059fe:	d013      	beq.n	8005a28 <TIM_Base_SetConfig+0x48>
 8005a00:	687b      	ldr	r3, [r7, #4]
 8005a02:	4a43      	ldr	r2, [pc, #268]	; (8005b10 <TIM_Base_SetConfig+0x130>)
 8005a04:	4293      	cmp	r3, r2
 8005a06:	d00f      	beq.n	8005a28 <TIM_Base_SetConfig+0x48>
 8005a08:	687b      	ldr	r3, [r7, #4]
 8005a0a:	4a42      	ldr	r2, [pc, #264]	; (8005b14 <TIM_Base_SetConfig+0x134>)
 8005a0c:	4293      	cmp	r3, r2
 8005a0e:	d00b      	beq.n	8005a28 <TIM_Base_SetConfig+0x48>
 8005a10:	687b      	ldr	r3, [r7, #4]
 8005a12:	4a41      	ldr	r2, [pc, #260]	; (8005b18 <TIM_Base_SetConfig+0x138>)
 8005a14:	4293      	cmp	r3, r2
 8005a16:	d007      	beq.n	8005a28 <TIM_Base_SetConfig+0x48>
 8005a18:	687b      	ldr	r3, [r7, #4]
 8005a1a:	4a40      	ldr	r2, [pc, #256]	; (8005b1c <TIM_Base_SetConfig+0x13c>)
 8005a1c:	4293      	cmp	r3, r2
 8005a1e:	d003      	beq.n	8005a28 <TIM_Base_SetConfig+0x48>
 8005a20:	687b      	ldr	r3, [r7, #4]
 8005a22:	4a3f      	ldr	r2, [pc, #252]	; (8005b20 <TIM_Base_SetConfig+0x140>)
 8005a24:	4293      	cmp	r3, r2
 8005a26:	d108      	bne.n	8005a3a <TIM_Base_SetConfig+0x5a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005a28:	68fb      	ldr	r3, [r7, #12]
 8005a2a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005a2e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8005a30:	683b      	ldr	r3, [r7, #0]
 8005a32:	685b      	ldr	r3, [r3, #4]
 8005a34:	68fa      	ldr	r2, [r7, #12]
 8005a36:	4313      	orrs	r3, r2
 8005a38:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8005a3a:	687b      	ldr	r3, [r7, #4]
 8005a3c:	4a33      	ldr	r2, [pc, #204]	; (8005b0c <TIM_Base_SetConfig+0x12c>)
 8005a3e:	4293      	cmp	r3, r2
 8005a40:	d023      	beq.n	8005a8a <TIM_Base_SetConfig+0xaa>
 8005a42:	687b      	ldr	r3, [r7, #4]
 8005a44:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005a48:	d01f      	beq.n	8005a8a <TIM_Base_SetConfig+0xaa>
 8005a4a:	687b      	ldr	r3, [r7, #4]
 8005a4c:	4a30      	ldr	r2, [pc, #192]	; (8005b10 <TIM_Base_SetConfig+0x130>)
 8005a4e:	4293      	cmp	r3, r2
 8005a50:	d01b      	beq.n	8005a8a <TIM_Base_SetConfig+0xaa>
 8005a52:	687b      	ldr	r3, [r7, #4]
 8005a54:	4a2f      	ldr	r2, [pc, #188]	; (8005b14 <TIM_Base_SetConfig+0x134>)
 8005a56:	4293      	cmp	r3, r2
 8005a58:	d017      	beq.n	8005a8a <TIM_Base_SetConfig+0xaa>
 8005a5a:	687b      	ldr	r3, [r7, #4]
 8005a5c:	4a2e      	ldr	r2, [pc, #184]	; (8005b18 <TIM_Base_SetConfig+0x138>)
 8005a5e:	4293      	cmp	r3, r2
 8005a60:	d013      	beq.n	8005a8a <TIM_Base_SetConfig+0xaa>
 8005a62:	687b      	ldr	r3, [r7, #4]
 8005a64:	4a2d      	ldr	r2, [pc, #180]	; (8005b1c <TIM_Base_SetConfig+0x13c>)
 8005a66:	4293      	cmp	r3, r2
 8005a68:	d00f      	beq.n	8005a8a <TIM_Base_SetConfig+0xaa>
 8005a6a:	687b      	ldr	r3, [r7, #4]
 8005a6c:	4a2d      	ldr	r2, [pc, #180]	; (8005b24 <TIM_Base_SetConfig+0x144>)
 8005a6e:	4293      	cmp	r3, r2
 8005a70:	d00b      	beq.n	8005a8a <TIM_Base_SetConfig+0xaa>
 8005a72:	687b      	ldr	r3, [r7, #4]
 8005a74:	4a2c      	ldr	r2, [pc, #176]	; (8005b28 <TIM_Base_SetConfig+0x148>)
 8005a76:	4293      	cmp	r3, r2
 8005a78:	d007      	beq.n	8005a8a <TIM_Base_SetConfig+0xaa>
 8005a7a:	687b      	ldr	r3, [r7, #4]
 8005a7c:	4a2b      	ldr	r2, [pc, #172]	; (8005b2c <TIM_Base_SetConfig+0x14c>)
 8005a7e:	4293      	cmp	r3, r2
 8005a80:	d003      	beq.n	8005a8a <TIM_Base_SetConfig+0xaa>
 8005a82:	687b      	ldr	r3, [r7, #4]
 8005a84:	4a26      	ldr	r2, [pc, #152]	; (8005b20 <TIM_Base_SetConfig+0x140>)
 8005a86:	4293      	cmp	r3, r2
 8005a88:	d108      	bne.n	8005a9c <TIM_Base_SetConfig+0xbc>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8005a8a:	68fb      	ldr	r3, [r7, #12]
 8005a8c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005a90:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8005a92:	683b      	ldr	r3, [r7, #0]
 8005a94:	68db      	ldr	r3, [r3, #12]
 8005a96:	68fa      	ldr	r2, [r7, #12]
 8005a98:	4313      	orrs	r3, r2
 8005a9a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005a9c:	68fb      	ldr	r3, [r7, #12]
 8005a9e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8005aa2:	683b      	ldr	r3, [r7, #0]
 8005aa4:	695b      	ldr	r3, [r3, #20]
 8005aa6:	4313      	orrs	r3, r2
 8005aa8:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8005aaa:	687b      	ldr	r3, [r7, #4]
 8005aac:	68fa      	ldr	r2, [r7, #12]
 8005aae:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005ab0:	683b      	ldr	r3, [r7, #0]
 8005ab2:	689a      	ldr	r2, [r3, #8]
 8005ab4:	687b      	ldr	r3, [r7, #4]
 8005ab6:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8005ab8:	683b      	ldr	r3, [r7, #0]
 8005aba:	681a      	ldr	r2, [r3, #0]
 8005abc:	687b      	ldr	r3, [r7, #4]
 8005abe:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8005ac0:	687b      	ldr	r3, [r7, #4]
 8005ac2:	4a12      	ldr	r2, [pc, #72]	; (8005b0c <TIM_Base_SetConfig+0x12c>)
 8005ac4:	4293      	cmp	r3, r2
 8005ac6:	d013      	beq.n	8005af0 <TIM_Base_SetConfig+0x110>
 8005ac8:	687b      	ldr	r3, [r7, #4]
 8005aca:	4a14      	ldr	r2, [pc, #80]	; (8005b1c <TIM_Base_SetConfig+0x13c>)
 8005acc:	4293      	cmp	r3, r2
 8005ace:	d00f      	beq.n	8005af0 <TIM_Base_SetConfig+0x110>
 8005ad0:	687b      	ldr	r3, [r7, #4]
 8005ad2:	4a14      	ldr	r2, [pc, #80]	; (8005b24 <TIM_Base_SetConfig+0x144>)
 8005ad4:	4293      	cmp	r3, r2
 8005ad6:	d00b      	beq.n	8005af0 <TIM_Base_SetConfig+0x110>
 8005ad8:	687b      	ldr	r3, [r7, #4]
 8005ada:	4a13      	ldr	r2, [pc, #76]	; (8005b28 <TIM_Base_SetConfig+0x148>)
 8005adc:	4293      	cmp	r3, r2
 8005ade:	d007      	beq.n	8005af0 <TIM_Base_SetConfig+0x110>
 8005ae0:	687b      	ldr	r3, [r7, #4]
 8005ae2:	4a12      	ldr	r2, [pc, #72]	; (8005b2c <TIM_Base_SetConfig+0x14c>)
 8005ae4:	4293      	cmp	r3, r2
 8005ae6:	d003      	beq.n	8005af0 <TIM_Base_SetConfig+0x110>
 8005ae8:	687b      	ldr	r3, [r7, #4]
 8005aea:	4a0d      	ldr	r2, [pc, #52]	; (8005b20 <TIM_Base_SetConfig+0x140>)
 8005aec:	4293      	cmp	r3, r2
 8005aee:	d103      	bne.n	8005af8 <TIM_Base_SetConfig+0x118>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8005af0:	683b      	ldr	r3, [r7, #0]
 8005af2:	691a      	ldr	r2, [r3, #16]
 8005af4:	687b      	ldr	r3, [r7, #4]
 8005af6:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8005af8:	687b      	ldr	r3, [r7, #4]
 8005afa:	2201      	movs	r2, #1
 8005afc:	615a      	str	r2, [r3, #20]
}
 8005afe:	bf00      	nop
 8005b00:	3714      	adds	r7, #20
 8005b02:	46bd      	mov	sp, r7
 8005b04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b08:	4770      	bx	lr
 8005b0a:	bf00      	nop
 8005b0c:	40012c00 	.word	0x40012c00
 8005b10:	40000400 	.word	0x40000400
 8005b14:	40000800 	.word	0x40000800
 8005b18:	40000c00 	.word	0x40000c00
 8005b1c:	40013400 	.word	0x40013400
 8005b20:	40015000 	.word	0x40015000
 8005b24:	40014000 	.word	0x40014000
 8005b28:	40014400 	.word	0x40014400
 8005b2c:	40014800 	.word	0x40014800

08005b30 <TIM_SlaveTimer_SetConfig>:
  * @param  sSlaveConfig Slave timer configuration
  * @retval None
  */
static HAL_StatusTypeDef TIM_SlaveTimer_SetConfig(TIM_HandleTypeDef *htim,
                                                  TIM_SlaveConfigTypeDef *sSlaveConfig)
{
 8005b30:	b580      	push	{r7, lr}
 8005b32:	b086      	sub	sp, #24
 8005b34:	af00      	add	r7, sp, #0
 8005b36:	6078      	str	r0, [r7, #4]
 8005b38:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8005b3a:	687b      	ldr	r3, [r7, #4]
 8005b3c:	681b      	ldr	r3, [r3, #0]
 8005b3e:	689b      	ldr	r3, [r3, #8]
 8005b40:	617b      	str	r3, [r7, #20]

  /* Reset the Trigger Selection Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8005b42:	697b      	ldr	r3, [r7, #20]
 8005b44:	f423 1340 	bic.w	r3, r3, #3145728	; 0x300000
 8005b48:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005b4c:	617b      	str	r3, [r7, #20]
  /* Set the Input Trigger source */
  tmpsmcr |= sSlaveConfig->InputTrigger;
 8005b4e:	683b      	ldr	r3, [r7, #0]
 8005b50:	685b      	ldr	r3, [r3, #4]
 8005b52:	697a      	ldr	r2, [r7, #20]
 8005b54:	4313      	orrs	r3, r2
 8005b56:	617b      	str	r3, [r7, #20]

  /* Reset the slave mode Bits */
  tmpsmcr &= ~TIM_SMCR_SMS;
 8005b58:	697b      	ldr	r3, [r7, #20]
 8005b5a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005b5e:	f023 0307 	bic.w	r3, r3, #7
 8005b62:	617b      	str	r3, [r7, #20]
  /* Set the slave mode */
  tmpsmcr |= sSlaveConfig->SlaveMode;
 8005b64:	683b      	ldr	r3, [r7, #0]
 8005b66:	681b      	ldr	r3, [r3, #0]
 8005b68:	697a      	ldr	r2, [r7, #20]
 8005b6a:	4313      	orrs	r3, r2
 8005b6c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8005b6e:	687b      	ldr	r3, [r7, #4]
 8005b70:	681b      	ldr	r3, [r3, #0]
 8005b72:	697a      	ldr	r2, [r7, #20]
 8005b74:	609a      	str	r2, [r3, #8]

  /* Configure the trigger prescaler, filter, and polarity */
  switch (sSlaveConfig->InputTrigger)
 8005b76:	683b      	ldr	r3, [r7, #0]
 8005b78:	685b      	ldr	r3, [r3, #4]
 8005b7a:	2b70      	cmp	r3, #112	; 0x70
 8005b7c:	d034      	beq.n	8005be8 <TIM_SlaveTimer_SetConfig+0xb8>
 8005b7e:	2b70      	cmp	r3, #112	; 0x70
 8005b80:	d811      	bhi.n	8005ba6 <TIM_SlaveTimer_SetConfig+0x76>
 8005b82:	2b30      	cmp	r3, #48	; 0x30
 8005b84:	d07d      	beq.n	8005c82 <TIM_SlaveTimer_SetConfig+0x152>
 8005b86:	2b30      	cmp	r3, #48	; 0x30
 8005b88:	d806      	bhi.n	8005b98 <TIM_SlaveTimer_SetConfig+0x68>
 8005b8a:	2b10      	cmp	r3, #16
 8005b8c:	d079      	beq.n	8005c82 <TIM_SlaveTimer_SetConfig+0x152>
 8005b8e:	2b20      	cmp	r3, #32
 8005b90:	d077      	beq.n	8005c82 <TIM_SlaveTimer_SetConfig+0x152>
 8005b92:	2b00      	cmp	r3, #0
 8005b94:	d075      	beq.n	8005c82 <TIM_SlaveTimer_SetConfig+0x152>
      assert_param(IS_TIM_INTERNAL_TRIGGEREVENT_INSTANCE((htim->Instance), sSlaveConfig->InputTrigger));
      break;
    }

    default:
      break;
 8005b96:	e075      	b.n	8005c84 <TIM_SlaveTimer_SetConfig+0x154>
  switch (sSlaveConfig->InputTrigger)
 8005b98:	2b50      	cmp	r3, #80	; 0x50
 8005b9a:	d05e      	beq.n	8005c5a <TIM_SlaveTimer_SetConfig+0x12a>
 8005b9c:	2b60      	cmp	r3, #96	; 0x60
 8005b9e:	d066      	beq.n	8005c6e <TIM_SlaveTimer_SetConfig+0x13e>
 8005ba0:	2b40      	cmp	r3, #64	; 0x40
 8005ba2:	d02c      	beq.n	8005bfe <TIM_SlaveTimer_SetConfig+0xce>
      break;
 8005ba4:	e06e      	b.n	8005c84 <TIM_SlaveTimer_SetConfig+0x154>
  switch (sSlaveConfig->InputTrigger)
 8005ba6:	4a3a      	ldr	r2, [pc, #232]	; (8005c90 <TIM_SlaveTimer_SetConfig+0x160>)
 8005ba8:	4293      	cmp	r3, r2
 8005baa:	d06a      	beq.n	8005c82 <TIM_SlaveTimer_SetConfig+0x152>
 8005bac:	4a38      	ldr	r2, [pc, #224]	; (8005c90 <TIM_SlaveTimer_SetConfig+0x160>)
 8005bae:	4293      	cmp	r3, r2
 8005bb0:	d809      	bhi.n	8005bc6 <TIM_SlaveTimer_SetConfig+0x96>
 8005bb2:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 8005bb6:	d064      	beq.n	8005c82 <TIM_SlaveTimer_SetConfig+0x152>
 8005bb8:	4a36      	ldr	r2, [pc, #216]	; (8005c94 <TIM_SlaveTimer_SetConfig+0x164>)
 8005bba:	4293      	cmp	r3, r2
 8005bbc:	d061      	beq.n	8005c82 <TIM_SlaveTimer_SetConfig+0x152>
 8005bbe:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005bc2:	d05e      	beq.n	8005c82 <TIM_SlaveTimer_SetConfig+0x152>
      break;
 8005bc4:	e05e      	b.n	8005c84 <TIM_SlaveTimer_SetConfig+0x154>
  switch (sSlaveConfig->InputTrigger)
 8005bc6:	4a34      	ldr	r2, [pc, #208]	; (8005c98 <TIM_SlaveTimer_SetConfig+0x168>)
 8005bc8:	4293      	cmp	r3, r2
 8005bca:	d05a      	beq.n	8005c82 <TIM_SlaveTimer_SetConfig+0x152>
 8005bcc:	4a32      	ldr	r2, [pc, #200]	; (8005c98 <TIM_SlaveTimer_SetConfig+0x168>)
 8005bce:	4293      	cmp	r3, r2
 8005bd0:	d803      	bhi.n	8005bda <TIM_SlaveTimer_SetConfig+0xaa>
 8005bd2:	4a32      	ldr	r2, [pc, #200]	; (8005c9c <TIM_SlaveTimer_SetConfig+0x16c>)
 8005bd4:	4293      	cmp	r3, r2
 8005bd6:	d054      	beq.n	8005c82 <TIM_SlaveTimer_SetConfig+0x152>
      break;
 8005bd8:	e054      	b.n	8005c84 <TIM_SlaveTimer_SetConfig+0x154>
  switch (sSlaveConfig->InputTrigger)
 8005bda:	4a31      	ldr	r2, [pc, #196]	; (8005ca0 <TIM_SlaveTimer_SetConfig+0x170>)
 8005bdc:	4293      	cmp	r3, r2
 8005bde:	d050      	beq.n	8005c82 <TIM_SlaveTimer_SetConfig+0x152>
 8005be0:	4a30      	ldr	r2, [pc, #192]	; (8005ca4 <TIM_SlaveTimer_SetConfig+0x174>)
 8005be2:	4293      	cmp	r3, r2
 8005be4:	d04d      	beq.n	8005c82 <TIM_SlaveTimer_SetConfig+0x152>
      break;
 8005be6:	e04d      	b.n	8005c84 <TIM_SlaveTimer_SetConfig+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 8005be8:	687b      	ldr	r3, [r7, #4]
 8005bea:	6818      	ldr	r0, [r3, #0]
 8005bec:	683b      	ldr	r3, [r7, #0]
 8005bee:	68d9      	ldr	r1, [r3, #12]
 8005bf0:	683b      	ldr	r3, [r7, #0]
 8005bf2:	689a      	ldr	r2, [r3, #8]
 8005bf4:	683b      	ldr	r3, [r7, #0]
 8005bf6:	691b      	ldr	r3, [r3, #16]
 8005bf8:	f000 f8d2 	bl	8005da0 <TIM_ETR_SetConfig>
      break;
 8005bfc:	e042      	b.n	8005c84 <TIM_SlaveTimer_SetConfig+0x154>
      if ((sSlaveConfig->SlaveMode == TIM_SLAVEMODE_GATED) || (sSlaveConfig->SlaveMode == TIM_SLAVEMODE_COMBINED_GATEDRESET))
 8005bfe:	683b      	ldr	r3, [r7, #0]
 8005c00:	681b      	ldr	r3, [r3, #0]
 8005c02:	2b05      	cmp	r3, #5
 8005c04:	d004      	beq.n	8005c10 <TIM_SlaveTimer_SetConfig+0xe0>
 8005c06:	683b      	ldr	r3, [r7, #0]
 8005c08:	681b      	ldr	r3, [r3, #0]
 8005c0a:	f1b3 1f01 	cmp.w	r3, #65537	; 0x10001
 8005c0e:	d101      	bne.n	8005c14 <TIM_SlaveTimer_SetConfig+0xe4>
        return HAL_ERROR;
 8005c10:	2301      	movs	r3, #1
 8005c12:	e038      	b.n	8005c86 <TIM_SlaveTimer_SetConfig+0x156>
      tmpccer = htim->Instance->CCER;
 8005c14:	687b      	ldr	r3, [r7, #4]
 8005c16:	681b      	ldr	r3, [r3, #0]
 8005c18:	6a1b      	ldr	r3, [r3, #32]
 8005c1a:	613b      	str	r3, [r7, #16]
      htim->Instance->CCER &= ~TIM_CCER_CC1E;
 8005c1c:	687b      	ldr	r3, [r7, #4]
 8005c1e:	681b      	ldr	r3, [r3, #0]
 8005c20:	6a1a      	ldr	r2, [r3, #32]
 8005c22:	687b      	ldr	r3, [r7, #4]
 8005c24:	681b      	ldr	r3, [r3, #0]
 8005c26:	f022 0201 	bic.w	r2, r2, #1
 8005c2a:	621a      	str	r2, [r3, #32]
      tmpccmr1 = htim->Instance->CCMR1;
 8005c2c:	687b      	ldr	r3, [r7, #4]
 8005c2e:	681b      	ldr	r3, [r3, #0]
 8005c30:	699b      	ldr	r3, [r3, #24]
 8005c32:	60fb      	str	r3, [r7, #12]
      tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8005c34:	68fb      	ldr	r3, [r7, #12]
 8005c36:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8005c3a:	60fb      	str	r3, [r7, #12]
      tmpccmr1 |= ((sSlaveConfig->TriggerFilter) << 4U);
 8005c3c:	683b      	ldr	r3, [r7, #0]
 8005c3e:	691b      	ldr	r3, [r3, #16]
 8005c40:	011b      	lsls	r3, r3, #4
 8005c42:	68fa      	ldr	r2, [r7, #12]
 8005c44:	4313      	orrs	r3, r2
 8005c46:	60fb      	str	r3, [r7, #12]
      htim->Instance->CCMR1 = tmpccmr1;
 8005c48:	687b      	ldr	r3, [r7, #4]
 8005c4a:	681b      	ldr	r3, [r3, #0]
 8005c4c:	68fa      	ldr	r2, [r7, #12]
 8005c4e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCER = tmpccer;
 8005c50:	687b      	ldr	r3, [r7, #4]
 8005c52:	681b      	ldr	r3, [r3, #0]
 8005c54:	693a      	ldr	r2, [r7, #16]
 8005c56:	621a      	str	r2, [r3, #32]
      break;
 8005c58:	e014      	b.n	8005c84 <TIM_SlaveTimer_SetConfig+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8005c5a:	687b      	ldr	r3, [r7, #4]
 8005c5c:	6818      	ldr	r0, [r3, #0]
 8005c5e:	683b      	ldr	r3, [r7, #0]
 8005c60:	6899      	ldr	r1, [r3, #8]
 8005c62:	683b      	ldr	r3, [r7, #0]
 8005c64:	691b      	ldr	r3, [r3, #16]
 8005c66:	461a      	mov	r2, r3
 8005c68:	f000 f81e 	bl	8005ca8 <TIM_TI1_ConfigInputStage>
      break;
 8005c6c:	e00a      	b.n	8005c84 <TIM_SlaveTimer_SetConfig+0x154>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8005c6e:	687b      	ldr	r3, [r7, #4]
 8005c70:	6818      	ldr	r0, [r3, #0]
 8005c72:	683b      	ldr	r3, [r7, #0]
 8005c74:	6899      	ldr	r1, [r3, #8]
 8005c76:	683b      	ldr	r3, [r7, #0]
 8005c78:	691b      	ldr	r3, [r3, #16]
 8005c7a:	461a      	mov	r2, r3
 8005c7c:	f000 f843 	bl	8005d06 <TIM_TI2_ConfigInputStage>
      break;
 8005c80:	e000      	b.n	8005c84 <TIM_SlaveTimer_SetConfig+0x154>
      break;
 8005c82:	bf00      	nop
  }
  return HAL_OK;
 8005c84:	2300      	movs	r3, #0
}
 8005c86:	4618      	mov	r0, r3
 8005c88:	3718      	adds	r7, #24
 8005c8a:	46bd      	mov	sp, r7
 8005c8c:	bd80      	pop	{r7, pc}
 8005c8e:	bf00      	nop
 8005c90:	00100030 	.word	0x00100030
 8005c94:	00100020 	.word	0x00100020
 8005c98:	00100050 	.word	0x00100050
 8005c9c:	00100040 	.word	0x00100040
 8005ca0:	00100060 	.word	0x00100060
 8005ca4:	00100070 	.word	0x00100070

08005ca8 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005ca8:	b480      	push	{r7}
 8005caa:	b087      	sub	sp, #28
 8005cac:	af00      	add	r7, sp, #0
 8005cae:	60f8      	str	r0, [r7, #12]
 8005cb0:	60b9      	str	r1, [r7, #8]
 8005cb2:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8005cb4:	68fb      	ldr	r3, [r7, #12]
 8005cb6:	6a1b      	ldr	r3, [r3, #32]
 8005cb8:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005cba:	68fb      	ldr	r3, [r7, #12]
 8005cbc:	6a1b      	ldr	r3, [r3, #32]
 8005cbe:	f023 0201 	bic.w	r2, r3, #1
 8005cc2:	68fb      	ldr	r3, [r7, #12]
 8005cc4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005cc6:	68fb      	ldr	r3, [r7, #12]
 8005cc8:	699b      	ldr	r3, [r3, #24]
 8005cca:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8005ccc:	693b      	ldr	r3, [r7, #16]
 8005cce:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8005cd2:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8005cd4:	687b      	ldr	r3, [r7, #4]
 8005cd6:	011b      	lsls	r3, r3, #4
 8005cd8:	693a      	ldr	r2, [r7, #16]
 8005cda:	4313      	orrs	r3, r2
 8005cdc:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8005cde:	697b      	ldr	r3, [r7, #20]
 8005ce0:	f023 030a 	bic.w	r3, r3, #10
 8005ce4:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8005ce6:	697a      	ldr	r2, [r7, #20]
 8005ce8:	68bb      	ldr	r3, [r7, #8]
 8005cea:	4313      	orrs	r3, r2
 8005cec:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8005cee:	68fb      	ldr	r3, [r7, #12]
 8005cf0:	693a      	ldr	r2, [r7, #16]
 8005cf2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005cf4:	68fb      	ldr	r3, [r7, #12]
 8005cf6:	697a      	ldr	r2, [r7, #20]
 8005cf8:	621a      	str	r2, [r3, #32]
}
 8005cfa:	bf00      	nop
 8005cfc:	371c      	adds	r7, #28
 8005cfe:	46bd      	mov	sp, r7
 8005d00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d04:	4770      	bx	lr

08005d06 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005d06:	b480      	push	{r7}
 8005d08:	b087      	sub	sp, #28
 8005d0a:	af00      	add	r7, sp, #0
 8005d0c:	60f8      	str	r0, [r7, #12]
 8005d0e:	60b9      	str	r1, [r7, #8]
 8005d10:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005d12:	68fb      	ldr	r3, [r7, #12]
 8005d14:	6a1b      	ldr	r3, [r3, #32]
 8005d16:	f023 0210 	bic.w	r2, r3, #16
 8005d1a:	68fb      	ldr	r3, [r7, #12]
 8005d1c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005d1e:	68fb      	ldr	r3, [r7, #12]
 8005d20:	699b      	ldr	r3, [r3, #24]
 8005d22:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8005d24:	68fb      	ldr	r3, [r7, #12]
 8005d26:	6a1b      	ldr	r3, [r3, #32]
 8005d28:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8005d2a:	697b      	ldr	r3, [r7, #20]
 8005d2c:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8005d30:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8005d32:	687b      	ldr	r3, [r7, #4]
 8005d34:	031b      	lsls	r3, r3, #12
 8005d36:	697a      	ldr	r2, [r7, #20]
 8005d38:	4313      	orrs	r3, r2
 8005d3a:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8005d3c:	693b      	ldr	r3, [r7, #16]
 8005d3e:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8005d42:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8005d44:	68bb      	ldr	r3, [r7, #8]
 8005d46:	011b      	lsls	r3, r3, #4
 8005d48:	693a      	ldr	r2, [r7, #16]
 8005d4a:	4313      	orrs	r3, r2
 8005d4c:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8005d4e:	68fb      	ldr	r3, [r7, #12]
 8005d50:	697a      	ldr	r2, [r7, #20]
 8005d52:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005d54:	68fb      	ldr	r3, [r7, #12]
 8005d56:	693a      	ldr	r2, [r7, #16]
 8005d58:	621a      	str	r2, [r3, #32]
}
 8005d5a:	bf00      	nop
 8005d5c:	371c      	adds	r7, #28
 8005d5e:	46bd      	mov	sp, r7
 8005d60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d64:	4770      	bx	lr

08005d66 <TIM_ITRx_SetConfig>:
  *       (*)  Value not defined in all devices.
  *
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8005d66:	b480      	push	{r7}
 8005d68:	b085      	sub	sp, #20
 8005d6a:	af00      	add	r7, sp, #0
 8005d6c:	6078      	str	r0, [r7, #4]
 8005d6e:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8005d70:	687b      	ldr	r3, [r7, #4]
 8005d72:	689b      	ldr	r3, [r3, #8]
 8005d74:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8005d76:	68fb      	ldr	r3, [r7, #12]
 8005d78:	f423 1340 	bic.w	r3, r3, #3145728	; 0x300000
 8005d7c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005d80:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8005d82:	683a      	ldr	r2, [r7, #0]
 8005d84:	68fb      	ldr	r3, [r7, #12]
 8005d86:	4313      	orrs	r3, r2
 8005d88:	f043 0307 	orr.w	r3, r3, #7
 8005d8c:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005d8e:	687b      	ldr	r3, [r7, #4]
 8005d90:	68fa      	ldr	r2, [r7, #12]
 8005d92:	609a      	str	r2, [r3, #8]
}
 8005d94:	bf00      	nop
 8005d96:	3714      	adds	r7, #20
 8005d98:	46bd      	mov	sp, r7
 8005d9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d9e:	4770      	bx	lr

08005da0 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8005da0:	b480      	push	{r7}
 8005da2:	b087      	sub	sp, #28
 8005da4:	af00      	add	r7, sp, #0
 8005da6:	60f8      	str	r0, [r7, #12]
 8005da8:	60b9      	str	r1, [r7, #8]
 8005daa:	607a      	str	r2, [r7, #4]
 8005dac:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8005dae:	68fb      	ldr	r3, [r7, #12]
 8005db0:	689b      	ldr	r3, [r3, #8]
 8005db2:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005db4:	697b      	ldr	r3, [r7, #20]
 8005db6:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8005dba:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8005dbc:	683b      	ldr	r3, [r7, #0]
 8005dbe:	021a      	lsls	r2, r3, #8
 8005dc0:	687b      	ldr	r3, [r7, #4]
 8005dc2:	431a      	orrs	r2, r3
 8005dc4:	68bb      	ldr	r3, [r7, #8]
 8005dc6:	4313      	orrs	r3, r2
 8005dc8:	697a      	ldr	r2, [r7, #20]
 8005dca:	4313      	orrs	r3, r2
 8005dcc:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005dce:	68fb      	ldr	r3, [r7, #12]
 8005dd0:	697a      	ldr	r2, [r7, #20]
 8005dd2:	609a      	str	r2, [r3, #8]
}
 8005dd4:	bf00      	nop
 8005dd6:	371c      	adds	r7, #28
 8005dd8:	46bd      	mov	sp, r7
 8005dda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005dde:	4770      	bx	lr

08005de0 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8005de0:	b480      	push	{r7}
 8005de2:	b085      	sub	sp, #20
 8005de4:	af00      	add	r7, sp, #0
 8005de6:	6078      	str	r0, [r7, #4]
 8005de8:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8005dea:	687b      	ldr	r3, [r7, #4]
 8005dec:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005df0:	2b01      	cmp	r3, #1
 8005df2:	d101      	bne.n	8005df8 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8005df4:	2302      	movs	r3, #2
 8005df6:	e074      	b.n	8005ee2 <HAL_TIMEx_MasterConfigSynchronization+0x102>
 8005df8:	687b      	ldr	r3, [r7, #4]
 8005dfa:	2201      	movs	r2, #1
 8005dfc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005e00:	687b      	ldr	r3, [r7, #4]
 8005e02:	2202      	movs	r2, #2
 8005e04:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8005e08:	687b      	ldr	r3, [r7, #4]
 8005e0a:	681b      	ldr	r3, [r3, #0]
 8005e0c:	685b      	ldr	r3, [r3, #4]
 8005e0e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8005e10:	687b      	ldr	r3, [r7, #4]
 8005e12:	681b      	ldr	r3, [r3, #0]
 8005e14:	689b      	ldr	r3, [r3, #8]
 8005e16:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8005e18:	687b      	ldr	r3, [r7, #4]
 8005e1a:	681b      	ldr	r3, [r3, #0]
 8005e1c:	4a34      	ldr	r2, [pc, #208]	; (8005ef0 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 8005e1e:	4293      	cmp	r3, r2
 8005e20:	d009      	beq.n	8005e36 <HAL_TIMEx_MasterConfigSynchronization+0x56>
 8005e22:	687b      	ldr	r3, [r7, #4]
 8005e24:	681b      	ldr	r3, [r3, #0]
 8005e26:	4a33      	ldr	r2, [pc, #204]	; (8005ef4 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 8005e28:	4293      	cmp	r3, r2
 8005e2a:	d004      	beq.n	8005e36 <HAL_TIMEx_MasterConfigSynchronization+0x56>
 8005e2c:	687b      	ldr	r3, [r7, #4]
 8005e2e:	681b      	ldr	r3, [r3, #0]
 8005e30:	4a31      	ldr	r2, [pc, #196]	; (8005ef8 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 8005e32:	4293      	cmp	r3, r2
 8005e34:	d108      	bne.n	8005e48 <HAL_TIMEx_MasterConfigSynchronization+0x68>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8005e36:	68fb      	ldr	r3, [r7, #12]
 8005e38:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8005e3c:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8005e3e:	683b      	ldr	r3, [r7, #0]
 8005e40:	685b      	ldr	r3, [r3, #4]
 8005e42:	68fa      	ldr	r2, [r7, #12]
 8005e44:	4313      	orrs	r3, r2
 8005e46:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8005e48:	68fb      	ldr	r3, [r7, #12]
 8005e4a:	f023 7300 	bic.w	r3, r3, #33554432	; 0x2000000
 8005e4e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005e52:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8005e54:	683b      	ldr	r3, [r7, #0]
 8005e56:	681b      	ldr	r3, [r3, #0]
 8005e58:	68fa      	ldr	r2, [r7, #12]
 8005e5a:	4313      	orrs	r3, r2
 8005e5c:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8005e5e:	687b      	ldr	r3, [r7, #4]
 8005e60:	681b      	ldr	r3, [r3, #0]
 8005e62:	68fa      	ldr	r2, [r7, #12]
 8005e64:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005e66:	687b      	ldr	r3, [r7, #4]
 8005e68:	681b      	ldr	r3, [r3, #0]
 8005e6a:	4a21      	ldr	r2, [pc, #132]	; (8005ef0 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 8005e6c:	4293      	cmp	r3, r2
 8005e6e:	d022      	beq.n	8005eb6 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8005e70:	687b      	ldr	r3, [r7, #4]
 8005e72:	681b      	ldr	r3, [r3, #0]
 8005e74:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005e78:	d01d      	beq.n	8005eb6 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8005e7a:	687b      	ldr	r3, [r7, #4]
 8005e7c:	681b      	ldr	r3, [r3, #0]
 8005e7e:	4a1f      	ldr	r2, [pc, #124]	; (8005efc <HAL_TIMEx_MasterConfigSynchronization+0x11c>)
 8005e80:	4293      	cmp	r3, r2
 8005e82:	d018      	beq.n	8005eb6 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8005e84:	687b      	ldr	r3, [r7, #4]
 8005e86:	681b      	ldr	r3, [r3, #0]
 8005e88:	4a1d      	ldr	r2, [pc, #116]	; (8005f00 <HAL_TIMEx_MasterConfigSynchronization+0x120>)
 8005e8a:	4293      	cmp	r3, r2
 8005e8c:	d013      	beq.n	8005eb6 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8005e8e:	687b      	ldr	r3, [r7, #4]
 8005e90:	681b      	ldr	r3, [r3, #0]
 8005e92:	4a1c      	ldr	r2, [pc, #112]	; (8005f04 <HAL_TIMEx_MasterConfigSynchronization+0x124>)
 8005e94:	4293      	cmp	r3, r2
 8005e96:	d00e      	beq.n	8005eb6 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8005e98:	687b      	ldr	r3, [r7, #4]
 8005e9a:	681b      	ldr	r3, [r3, #0]
 8005e9c:	4a15      	ldr	r2, [pc, #84]	; (8005ef4 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 8005e9e:	4293      	cmp	r3, r2
 8005ea0:	d009      	beq.n	8005eb6 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8005ea2:	687b      	ldr	r3, [r7, #4]
 8005ea4:	681b      	ldr	r3, [r3, #0]
 8005ea6:	4a18      	ldr	r2, [pc, #96]	; (8005f08 <HAL_TIMEx_MasterConfigSynchronization+0x128>)
 8005ea8:	4293      	cmp	r3, r2
 8005eaa:	d004      	beq.n	8005eb6 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8005eac:	687b      	ldr	r3, [r7, #4]
 8005eae:	681b      	ldr	r3, [r3, #0]
 8005eb0:	4a11      	ldr	r2, [pc, #68]	; (8005ef8 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 8005eb2:	4293      	cmp	r3, r2
 8005eb4:	d10c      	bne.n	8005ed0 <HAL_TIMEx_MasterConfigSynchronization+0xf0>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8005eb6:	68bb      	ldr	r3, [r7, #8]
 8005eb8:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005ebc:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8005ebe:	683b      	ldr	r3, [r7, #0]
 8005ec0:	689b      	ldr	r3, [r3, #8]
 8005ec2:	68ba      	ldr	r2, [r7, #8]
 8005ec4:	4313      	orrs	r3, r2
 8005ec6:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8005ec8:	687b      	ldr	r3, [r7, #4]
 8005eca:	681b      	ldr	r3, [r3, #0]
 8005ecc:	68ba      	ldr	r2, [r7, #8]
 8005ece:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8005ed0:	687b      	ldr	r3, [r7, #4]
 8005ed2:	2201      	movs	r2, #1
 8005ed4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8005ed8:	687b      	ldr	r3, [r7, #4]
 8005eda:	2200      	movs	r2, #0
 8005edc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8005ee0:	2300      	movs	r3, #0
}
 8005ee2:	4618      	mov	r0, r3
 8005ee4:	3714      	adds	r7, #20
 8005ee6:	46bd      	mov	sp, r7
 8005ee8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005eec:	4770      	bx	lr
 8005eee:	bf00      	nop
 8005ef0:	40012c00 	.word	0x40012c00
 8005ef4:	40013400 	.word	0x40013400
 8005ef8:	40015000 	.word	0x40015000
 8005efc:	40000400 	.word	0x40000400
 8005f00:	40000800 	.word	0x40000800
 8005f04:	40000c00 	.word	0x40000c00
 8005f08:	40014000 	.word	0x40014000

08005f0c <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8005f0c:	b480      	push	{r7}
 8005f0e:	b085      	sub	sp, #20
 8005f10:	af00      	add	r7, sp, #0
 8005f12:	6078      	str	r0, [r7, #4]
 8005f14:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8005f16:	2300      	movs	r3, #0
 8005f18:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8005f1a:	687b      	ldr	r3, [r7, #4]
 8005f1c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005f20:	2b01      	cmp	r3, #1
 8005f22:	d101      	bne.n	8005f28 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8005f24:	2302      	movs	r3, #2
 8005f26:	e096      	b.n	8006056 <HAL_TIMEx_ConfigBreakDeadTime+0x14a>
 8005f28:	687b      	ldr	r3, [r7, #4]
 8005f2a:	2201      	movs	r2, #1
 8005f2c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8005f30:	68fb      	ldr	r3, [r7, #12]
 8005f32:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8005f36:	683b      	ldr	r3, [r7, #0]
 8005f38:	68db      	ldr	r3, [r3, #12]
 8005f3a:	4313      	orrs	r3, r2
 8005f3c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8005f3e:	68fb      	ldr	r3, [r7, #12]
 8005f40:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8005f44:	683b      	ldr	r3, [r7, #0]
 8005f46:	689b      	ldr	r3, [r3, #8]
 8005f48:	4313      	orrs	r3, r2
 8005f4a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8005f4c:	68fb      	ldr	r3, [r7, #12]
 8005f4e:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8005f52:	683b      	ldr	r3, [r7, #0]
 8005f54:	685b      	ldr	r3, [r3, #4]
 8005f56:	4313      	orrs	r3, r2
 8005f58:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8005f5a:	68fb      	ldr	r3, [r7, #12]
 8005f5c:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8005f60:	683b      	ldr	r3, [r7, #0]
 8005f62:	681b      	ldr	r3, [r3, #0]
 8005f64:	4313      	orrs	r3, r2
 8005f66:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8005f68:	68fb      	ldr	r3, [r7, #12]
 8005f6a:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8005f6e:	683b      	ldr	r3, [r7, #0]
 8005f70:	691b      	ldr	r3, [r3, #16]
 8005f72:	4313      	orrs	r3, r2
 8005f74:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8005f76:	68fb      	ldr	r3, [r7, #12]
 8005f78:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8005f7c:	683b      	ldr	r3, [r7, #0]
 8005f7e:	695b      	ldr	r3, [r3, #20]
 8005f80:	4313      	orrs	r3, r2
 8005f82:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8005f84:	68fb      	ldr	r3, [r7, #12]
 8005f86:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8005f8a:	683b      	ldr	r3, [r7, #0]
 8005f8c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005f8e:	4313      	orrs	r3, r2
 8005f90:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 8005f92:	68fb      	ldr	r3, [r7, #12]
 8005f94:	f423 2270 	bic.w	r2, r3, #983040	; 0xf0000
 8005f98:	683b      	ldr	r3, [r7, #0]
 8005f9a:	699b      	ldr	r3, [r3, #24]
 8005f9c:	041b      	lsls	r3, r3, #16
 8005f9e:	4313      	orrs	r3, r2
 8005fa0:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_ADVANCED_INSTANCE(htim->Instance))
 8005fa2:	687b      	ldr	r3, [r7, #4]
 8005fa4:	681b      	ldr	r3, [r3, #0]
 8005fa6:	4a2f      	ldr	r2, [pc, #188]	; (8006064 <HAL_TIMEx_ConfigBreakDeadTime+0x158>)
 8005fa8:	4293      	cmp	r3, r2
 8005faa:	d009      	beq.n	8005fc0 <HAL_TIMEx_ConfigBreakDeadTime+0xb4>
 8005fac:	687b      	ldr	r3, [r7, #4]
 8005fae:	681b      	ldr	r3, [r3, #0]
 8005fb0:	4a2d      	ldr	r2, [pc, #180]	; (8006068 <HAL_TIMEx_ConfigBreakDeadTime+0x15c>)
 8005fb2:	4293      	cmp	r3, r2
 8005fb4:	d004      	beq.n	8005fc0 <HAL_TIMEx_ConfigBreakDeadTime+0xb4>
 8005fb6:	687b      	ldr	r3, [r7, #4]
 8005fb8:	681b      	ldr	r3, [r3, #0]
 8005fba:	4a2c      	ldr	r2, [pc, #176]	; (800606c <HAL_TIMEx_ConfigBreakDeadTime+0x160>)
 8005fbc:	4293      	cmp	r3, r2
 8005fbe:	d106      	bne.n	8005fce <HAL_TIMEx_ConfigBreakDeadTime+0xc2>
  {
    /* Check the parameters */
    assert_param(IS_TIM_BREAK_AFMODE(sBreakDeadTimeConfig->BreakAFMode));

    /* Set BREAK AF mode */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BKBID, sBreakDeadTimeConfig->BreakAFMode);
 8005fc0:	68fb      	ldr	r3, [r7, #12]
 8005fc2:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 8005fc6:	683b      	ldr	r3, [r7, #0]
 8005fc8:	69db      	ldr	r3, [r3, #28]
 8005fca:	4313      	orrs	r3, r2
 8005fcc:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 8005fce:	687b      	ldr	r3, [r7, #4]
 8005fd0:	681b      	ldr	r3, [r3, #0]
 8005fd2:	4a24      	ldr	r2, [pc, #144]	; (8006064 <HAL_TIMEx_ConfigBreakDeadTime+0x158>)
 8005fd4:	4293      	cmp	r3, r2
 8005fd6:	d009      	beq.n	8005fec <HAL_TIMEx_ConfigBreakDeadTime+0xe0>
 8005fd8:	687b      	ldr	r3, [r7, #4]
 8005fda:	681b      	ldr	r3, [r3, #0]
 8005fdc:	4a22      	ldr	r2, [pc, #136]	; (8006068 <HAL_TIMEx_ConfigBreakDeadTime+0x15c>)
 8005fde:	4293      	cmp	r3, r2
 8005fe0:	d004      	beq.n	8005fec <HAL_TIMEx_ConfigBreakDeadTime+0xe0>
 8005fe2:	687b      	ldr	r3, [r7, #4]
 8005fe4:	681b      	ldr	r3, [r3, #0]
 8005fe6:	4a21      	ldr	r2, [pc, #132]	; (800606c <HAL_TIMEx_ConfigBreakDeadTime+0x160>)
 8005fe8:	4293      	cmp	r3, r2
 8005fea:	d12b      	bne.n	8006044 <HAL_TIMEx_ConfigBreakDeadTime+0x138>
    assert_param(IS_TIM_BREAK2_STATE(sBreakDeadTimeConfig->Break2State));
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 8005fec:	68fb      	ldr	r3, [r7, #12]
 8005fee:	f423 0270 	bic.w	r2, r3, #15728640	; 0xf00000
 8005ff2:	683b      	ldr	r3, [r7, #0]
 8005ff4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005ff6:	051b      	lsls	r3, r3, #20
 8005ff8:	4313      	orrs	r3, r2
 8005ffa:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 8005ffc:	68fb      	ldr	r3, [r7, #12]
 8005ffe:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 8006002:	683b      	ldr	r3, [r7, #0]
 8006004:	6a1b      	ldr	r3, [r3, #32]
 8006006:	4313      	orrs	r3, r2
 8006008:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 800600a:	68fb      	ldr	r3, [r7, #12]
 800600c:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 8006010:	683b      	ldr	r3, [r7, #0]
 8006012:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006014:	4313      	orrs	r3, r2
 8006016:	60fb      	str	r3, [r7, #12]

    if (IS_TIM_ADVANCED_INSTANCE(htim->Instance))
 8006018:	687b      	ldr	r3, [r7, #4]
 800601a:	681b      	ldr	r3, [r3, #0]
 800601c:	4a11      	ldr	r2, [pc, #68]	; (8006064 <HAL_TIMEx_ConfigBreakDeadTime+0x158>)
 800601e:	4293      	cmp	r3, r2
 8006020:	d009      	beq.n	8006036 <HAL_TIMEx_ConfigBreakDeadTime+0x12a>
 8006022:	687b      	ldr	r3, [r7, #4]
 8006024:	681b      	ldr	r3, [r3, #0]
 8006026:	4a10      	ldr	r2, [pc, #64]	; (8006068 <HAL_TIMEx_ConfigBreakDeadTime+0x15c>)
 8006028:	4293      	cmp	r3, r2
 800602a:	d004      	beq.n	8006036 <HAL_TIMEx_ConfigBreakDeadTime+0x12a>
 800602c:	687b      	ldr	r3, [r7, #4]
 800602e:	681b      	ldr	r3, [r3, #0]
 8006030:	4a0e      	ldr	r2, [pc, #56]	; (800606c <HAL_TIMEx_ConfigBreakDeadTime+0x160>)
 8006032:	4293      	cmp	r3, r2
 8006034:	d106      	bne.n	8006044 <HAL_TIMEx_ConfigBreakDeadTime+0x138>
    {
      /* Check the parameters */
      assert_param(IS_TIM_BREAK2_AFMODE(sBreakDeadTimeConfig->Break2AFMode));

      /* Set BREAK2 AF mode */
      MODIFY_REG(tmpbdtr, TIM_BDTR_BK2BID, sBreakDeadTimeConfig->Break2AFMode);
 8006036:	68fb      	ldr	r3, [r7, #12]
 8006038:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
 800603c:	683b      	ldr	r3, [r7, #0]
 800603e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006040:	4313      	orrs	r3, r2
 8006042:	60fb      	str	r3, [r7, #12]
    }
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8006044:	687b      	ldr	r3, [r7, #4]
 8006046:	681b      	ldr	r3, [r3, #0]
 8006048:	68fa      	ldr	r2, [r7, #12]
 800604a:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 800604c:	687b      	ldr	r3, [r7, #4]
 800604e:	2200      	movs	r2, #0
 8006050:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8006054:	2300      	movs	r3, #0
}
 8006056:	4618      	mov	r0, r3
 8006058:	3714      	adds	r7, #20
 800605a:	46bd      	mov	sp, r7
 800605c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006060:	4770      	bx	lr
 8006062:	bf00      	nop
 8006064:	40012c00 	.word	0x40012c00
 8006068:	40013400 	.word	0x40013400
 800606c:	40015000 	.word	0x40015000

08006070 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8006070:	b480      	push	{r7}
 8006072:	b083      	sub	sp, #12
 8006074:	af00      	add	r7, sp, #0
 8006076:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8006078:	bf00      	nop
 800607a:	370c      	adds	r7, #12
 800607c:	46bd      	mov	sp, r7
 800607e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006082:	4770      	bx	lr

08006084 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8006084:	b480      	push	{r7}
 8006086:	b083      	sub	sp, #12
 8006088:	af00      	add	r7, sp, #0
 800608a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800608c:	bf00      	nop
 800608e:	370c      	adds	r7, #12
 8006090:	46bd      	mov	sp, r7
 8006092:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006096:	4770      	bx	lr

08006098 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8006098:	b480      	push	{r7}
 800609a:	b083      	sub	sp, #12
 800609c:	af00      	add	r7, sp, #0
 800609e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 80060a0:	bf00      	nop
 80060a2:	370c      	adds	r7, #12
 80060a4:	46bd      	mov	sp, r7
 80060a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060aa:	4770      	bx	lr

080060ac <HAL_TIMEx_EncoderIndexCallback>:
  * @brief  Encoder index callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_EncoderIndexCallback(TIM_HandleTypeDef *htim)
{
 80060ac:	b480      	push	{r7}
 80060ae:	b083      	sub	sp, #12
 80060b0:	af00      	add	r7, sp, #0
 80060b2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_EncoderIndexCallback could be implemented in the user file
   */
}
 80060b4:	bf00      	nop
 80060b6:	370c      	adds	r7, #12
 80060b8:	46bd      	mov	sp, r7
 80060ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060be:	4770      	bx	lr

080060c0 <HAL_TIMEx_DirectionChangeCallback>:
  * @brief  Direction change callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_DirectionChangeCallback(TIM_HandleTypeDef *htim)
{
 80060c0:	b480      	push	{r7}
 80060c2:	b083      	sub	sp, #12
 80060c4:	af00      	add	r7, sp, #0
 80060c6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_DirectionChangeCallback could be implemented in the user file
   */
}
 80060c8:	bf00      	nop
 80060ca:	370c      	adds	r7, #12
 80060cc:	46bd      	mov	sp, r7
 80060ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060d2:	4770      	bx	lr

080060d4 <HAL_TIMEx_IndexErrorCallback>:
  * @brief  Index error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_IndexErrorCallback(TIM_HandleTypeDef *htim)
{
 80060d4:	b480      	push	{r7}
 80060d6:	b083      	sub	sp, #12
 80060d8:	af00      	add	r7, sp, #0
 80060da:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_IndexErrorCallback could be implemented in the user file
   */
}
 80060dc:	bf00      	nop
 80060de:	370c      	adds	r7, #12
 80060e0:	46bd      	mov	sp, r7
 80060e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060e6:	4770      	bx	lr

080060e8 <HAL_TIMEx_TransitionErrorCallback>:
  * @brief  Transition error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_TransitionErrorCallback(TIM_HandleTypeDef *htim)
{
 80060e8:	b480      	push	{r7}
 80060ea:	b083      	sub	sp, #12
 80060ec:	af00      	add	r7, sp, #0
 80060ee:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_TransitionErrorCallback could be implemented in the user file
   */
}
 80060f0:	bf00      	nop
 80060f2:	370c      	adds	r7, #12
 80060f4:	46bd      	mov	sp, r7
 80060f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060fa:	4770      	bx	lr

080060fc <ILI9341_Draw_Filled_Circle>:
    }
}

/*Draw filled circle at X,Y location with specified radius and colour. X and Y represent circles center */
void ILI9341_Draw_Filled_Circle(uint16_t X, uint16_t Y, uint16_t Radius, uint16_t Colour)
{
 80060fc:	b590      	push	{r4, r7, lr}
 80060fe:	b08b      	sub	sp, #44	; 0x2c
 8006100:	af00      	add	r7, sp, #0
 8006102:	4604      	mov	r4, r0
 8006104:	4608      	mov	r0, r1
 8006106:	4611      	mov	r1, r2
 8006108:	461a      	mov	r2, r3
 800610a:	4623      	mov	r3, r4
 800610c:	80fb      	strh	r3, [r7, #6]
 800610e:	4603      	mov	r3, r0
 8006110:	80bb      	strh	r3, [r7, #4]
 8006112:	460b      	mov	r3, r1
 8006114:	807b      	strh	r3, [r7, #2]
 8006116:	4613      	mov	r3, r2
 8006118:	803b      	strh	r3, [r7, #0]
	
		int x = Radius;
 800611a:	887b      	ldrh	r3, [r7, #2]
 800611c:	627b      	str	r3, [r7, #36]	; 0x24
    int y = 0;
 800611e:	2300      	movs	r3, #0
 8006120:	623b      	str	r3, [r7, #32]
    int xChange = 1 - (Radius << 1);
 8006122:	887b      	ldrh	r3, [r7, #2]
 8006124:	005b      	lsls	r3, r3, #1
 8006126:	f1c3 0301 	rsb	r3, r3, #1
 800612a:	61fb      	str	r3, [r7, #28]
    int yChange = 0;
 800612c:	2300      	movs	r3, #0
 800612e:	61bb      	str	r3, [r7, #24]
    int radiusError = 0;
 8006130:	2300      	movs	r3, #0
 8006132:	617b      	str	r3, [r7, #20]

    while (x >= y)
 8006134:	e061      	b.n	80061fa <ILI9341_Draw_Filled_Circle+0xfe>
    {
        for (int i = X - x; i <= X + x; i++)
 8006136:	88fa      	ldrh	r2, [r7, #6]
 8006138:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800613a:	1ad3      	subs	r3, r2, r3
 800613c:	613b      	str	r3, [r7, #16]
 800613e:	e018      	b.n	8006172 <ILI9341_Draw_Filled_Circle+0x76>
        {
            ILI9341_Draw_Pixel(i, Y + y,Colour);
 8006140:	693b      	ldr	r3, [r7, #16]
 8006142:	b298      	uxth	r0, r3
 8006144:	6a3b      	ldr	r3, [r7, #32]
 8006146:	b29a      	uxth	r2, r3
 8006148:	88bb      	ldrh	r3, [r7, #4]
 800614a:	4413      	add	r3, r2
 800614c:	b29b      	uxth	r3, r3
 800614e:	883a      	ldrh	r2, [r7, #0]
 8006150:	4619      	mov	r1, r3
 8006152:	f000 fc0b 	bl	800696c <ILI9341_Draw_Pixel>
            ILI9341_Draw_Pixel(i, Y - y,Colour);
 8006156:	693b      	ldr	r3, [r7, #16]
 8006158:	b298      	uxth	r0, r3
 800615a:	6a3b      	ldr	r3, [r7, #32]
 800615c:	b29b      	uxth	r3, r3
 800615e:	88ba      	ldrh	r2, [r7, #4]
 8006160:	1ad3      	subs	r3, r2, r3
 8006162:	b29b      	uxth	r3, r3
 8006164:	883a      	ldrh	r2, [r7, #0]
 8006166:	4619      	mov	r1, r3
 8006168:	f000 fc00 	bl	800696c <ILI9341_Draw_Pixel>
        for (int i = X - x; i <= X + x; i++)
 800616c:	693b      	ldr	r3, [r7, #16]
 800616e:	3301      	adds	r3, #1
 8006170:	613b      	str	r3, [r7, #16]
 8006172:	88fa      	ldrh	r2, [r7, #6]
 8006174:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006176:	4413      	add	r3, r2
 8006178:	693a      	ldr	r2, [r7, #16]
 800617a:	429a      	cmp	r2, r3
 800617c:	dde0      	ble.n	8006140 <ILI9341_Draw_Filled_Circle+0x44>
        }
        for (int i = X - y; i <= X + y; i++)
 800617e:	88fa      	ldrh	r2, [r7, #6]
 8006180:	6a3b      	ldr	r3, [r7, #32]
 8006182:	1ad3      	subs	r3, r2, r3
 8006184:	60fb      	str	r3, [r7, #12]
 8006186:	e018      	b.n	80061ba <ILI9341_Draw_Filled_Circle+0xbe>
        {
            ILI9341_Draw_Pixel(i, Y + x,Colour);
 8006188:	68fb      	ldr	r3, [r7, #12]
 800618a:	b298      	uxth	r0, r3
 800618c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800618e:	b29a      	uxth	r2, r3
 8006190:	88bb      	ldrh	r3, [r7, #4]
 8006192:	4413      	add	r3, r2
 8006194:	b29b      	uxth	r3, r3
 8006196:	883a      	ldrh	r2, [r7, #0]
 8006198:	4619      	mov	r1, r3
 800619a:	f000 fbe7 	bl	800696c <ILI9341_Draw_Pixel>
            ILI9341_Draw_Pixel(i, Y - x,Colour);
 800619e:	68fb      	ldr	r3, [r7, #12]
 80061a0:	b298      	uxth	r0, r3
 80061a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80061a4:	b29b      	uxth	r3, r3
 80061a6:	88ba      	ldrh	r2, [r7, #4]
 80061a8:	1ad3      	subs	r3, r2, r3
 80061aa:	b29b      	uxth	r3, r3
 80061ac:	883a      	ldrh	r2, [r7, #0]
 80061ae:	4619      	mov	r1, r3
 80061b0:	f000 fbdc 	bl	800696c <ILI9341_Draw_Pixel>
        for (int i = X - y; i <= X + y; i++)
 80061b4:	68fb      	ldr	r3, [r7, #12]
 80061b6:	3301      	adds	r3, #1
 80061b8:	60fb      	str	r3, [r7, #12]
 80061ba:	88fa      	ldrh	r2, [r7, #6]
 80061bc:	6a3b      	ldr	r3, [r7, #32]
 80061be:	4413      	add	r3, r2
 80061c0:	68fa      	ldr	r2, [r7, #12]
 80061c2:	429a      	cmp	r2, r3
 80061c4:	dde0      	ble.n	8006188 <ILI9341_Draw_Filled_Circle+0x8c>
        }

        y++;
 80061c6:	6a3b      	ldr	r3, [r7, #32]
 80061c8:	3301      	adds	r3, #1
 80061ca:	623b      	str	r3, [r7, #32]
        radiusError += yChange;
 80061cc:	697a      	ldr	r2, [r7, #20]
 80061ce:	69bb      	ldr	r3, [r7, #24]
 80061d0:	4413      	add	r3, r2
 80061d2:	617b      	str	r3, [r7, #20]
        yChange += 2;
 80061d4:	69bb      	ldr	r3, [r7, #24]
 80061d6:	3302      	adds	r3, #2
 80061d8:	61bb      	str	r3, [r7, #24]
        if (((radiusError << 1) + xChange) > 0)
 80061da:	697b      	ldr	r3, [r7, #20]
 80061dc:	005a      	lsls	r2, r3, #1
 80061de:	69fb      	ldr	r3, [r7, #28]
 80061e0:	4413      	add	r3, r2
 80061e2:	2b00      	cmp	r3, #0
 80061e4:	dd09      	ble.n	80061fa <ILI9341_Draw_Filled_Circle+0xfe>
        {
            x--;
 80061e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80061e8:	3b01      	subs	r3, #1
 80061ea:	627b      	str	r3, [r7, #36]	; 0x24
            radiusError += xChange;
 80061ec:	697a      	ldr	r2, [r7, #20]
 80061ee:	69fb      	ldr	r3, [r7, #28]
 80061f0:	4413      	add	r3, r2
 80061f2:	617b      	str	r3, [r7, #20]
            xChange += 2;
 80061f4:	69fb      	ldr	r3, [r7, #28]
 80061f6:	3302      	adds	r3, #2
 80061f8:	61fb      	str	r3, [r7, #28]
    while (x >= y)
 80061fa:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80061fc:	6a3b      	ldr	r3, [r7, #32]
 80061fe:	429a      	cmp	r2, r3
 8006200:	da99      	bge.n	8006136 <ILI9341_Draw_Filled_Circle+0x3a>
        }
    }
		//Really slow implementation, will require future overhaul
		//TODO:	https://stackoverflow.com/questions/1201200/fast-algorithm-for-drawing-filled-circles	
}
 8006202:	bf00      	nop
 8006204:	372c      	adds	r7, #44	; 0x2c
 8006206:	46bd      	mov	sp, r7
 8006208:	bd90      	pop	{r4, r7, pc}
	...

0800620c <ILI9341_Draw_Char>:
}

/*Draws a character (fonts imported from fonts.h) at X,Y location with specified font colour, size and Background colour*/
/*See fonts.h implementation of font on what is required for changing to a different font when switching fonts libraries*/
void ILI9341_Draw_Char(char Character, uint8_t X, uint8_t Y, uint16_t Colour, uint16_t Size, uint16_t Background_Colour) 
{
 800620c:	b590      	push	{r4, r7, lr}
 800620e:	b089      	sub	sp, #36	; 0x24
 8006210:	af02      	add	r7, sp, #8
 8006212:	4604      	mov	r4, r0
 8006214:	4608      	mov	r0, r1
 8006216:	4611      	mov	r1, r2
 8006218:	461a      	mov	r2, r3
 800621a:	4623      	mov	r3, r4
 800621c:	71fb      	strb	r3, [r7, #7]
 800621e:	4603      	mov	r3, r0
 8006220:	71bb      	strb	r3, [r7, #6]
 8006222:	460b      	mov	r3, r1
 8006224:	717b      	strb	r3, [r7, #5]
 8006226:	4613      	mov	r3, r2
 8006228:	807b      	strh	r3, [r7, #2]
		uint8_t 	function_char;
    uint8_t 	i,j;
		
		function_char = Character;
 800622a:	79fb      	ldrb	r3, [r7, #7]
 800622c:	75fb      	strb	r3, [r7, #23]
		
    if (function_char < ' ') {
 800622e:	7dfb      	ldrb	r3, [r7, #23]
 8006230:	2b1f      	cmp	r3, #31
 8006232:	d802      	bhi.n	800623a <ILI9341_Draw_Char+0x2e>
        Character = 0;
 8006234:	2300      	movs	r3, #0
 8006236:	71fb      	strb	r3, [r7, #7]
 8006238:	e002      	b.n	8006240 <ILI9341_Draw_Char+0x34>
    } else {
        function_char -= 32;
 800623a:	7dfb      	ldrb	r3, [r7, #23]
 800623c:	3b20      	subs	r3, #32
 800623e:	75fb      	strb	r3, [r7, #23]
		}
   	
		char temp[CHAR_WIDTH];
		for(uint8_t k = 0; k<CHAR_WIDTH; k++)
 8006240:	2300      	movs	r3, #0
 8006242:	753b      	strb	r3, [r7, #20]
 8006244:	e012      	b.n	800626c <ILI9341_Draw_Char+0x60>
		{
		temp[k] = font[function_char][k];
 8006246:	7dfa      	ldrb	r2, [r7, #23]
 8006248:	7d38      	ldrb	r0, [r7, #20]
 800624a:	7d39      	ldrb	r1, [r7, #20]
 800624c:	4c3b      	ldr	r4, [pc, #236]	; (800633c <ILI9341_Draw_Char+0x130>)
 800624e:	4613      	mov	r3, r2
 8006250:	005b      	lsls	r3, r3, #1
 8006252:	4413      	add	r3, r2
 8006254:	005b      	lsls	r3, r3, #1
 8006256:	4423      	add	r3, r4
 8006258:	4403      	add	r3, r0
 800625a:	781a      	ldrb	r2, [r3, #0]
 800625c:	f107 0318 	add.w	r3, r7, #24
 8006260:	440b      	add	r3, r1
 8006262:	f803 2c0c 	strb.w	r2, [r3, #-12]
		for(uint8_t k = 0; k<CHAR_WIDTH; k++)
 8006266:	7d3b      	ldrb	r3, [r7, #20]
 8006268:	3301      	adds	r3, #1
 800626a:	753b      	strb	r3, [r7, #20]
 800626c:	7d3b      	ldrb	r3, [r7, #20]
 800626e:	2b05      	cmp	r3, #5
 8006270:	d9e9      	bls.n	8006246 <ILI9341_Draw_Char+0x3a>
		}
		
    // Draw pixels
		ILI9341_Draw_Rectangle(X, Y, CHAR_WIDTH*Size, CHAR_HEIGHT*Size, Background_Colour);
 8006272:	79bb      	ldrb	r3, [r7, #6]
 8006274:	b298      	uxth	r0, r3
 8006276:	797b      	ldrb	r3, [r7, #5]
 8006278:	b299      	uxth	r1, r3
 800627a:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 800627c:	461a      	mov	r2, r3
 800627e:	0052      	lsls	r2, r2, #1
 8006280:	4413      	add	r3, r2
 8006282:	005b      	lsls	r3, r3, #1
 8006284:	b29a      	uxth	r2, r3
 8006286:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8006288:	00db      	lsls	r3, r3, #3
 800628a:	b29c      	uxth	r4, r3
 800628c:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 800628e:	9300      	str	r3, [sp, #0]
 8006290:	4623      	mov	r3, r4
 8006292:	f000 fc33 	bl	8006afc <ILI9341_Draw_Rectangle>
    for (j=0; j<CHAR_WIDTH; j++) {
 8006296:	2300      	movs	r3, #0
 8006298:	757b      	strb	r3, [r7, #21]
 800629a:	e048      	b.n	800632e <ILI9341_Draw_Char+0x122>
        for (i=0; i<CHAR_HEIGHT; i++) {
 800629c:	2300      	movs	r3, #0
 800629e:	75bb      	strb	r3, [r7, #22]
 80062a0:	e03f      	b.n	8006322 <ILI9341_Draw_Char+0x116>
            if (temp[j] & (1<<i)) {			
 80062a2:	7d7b      	ldrb	r3, [r7, #21]
 80062a4:	f107 0218 	add.w	r2, r7, #24
 80062a8:	4413      	add	r3, r2
 80062aa:	f813 3c0c 	ldrb.w	r3, [r3, #-12]
 80062ae:	461a      	mov	r2, r3
 80062b0:	7dbb      	ldrb	r3, [r7, #22]
 80062b2:	fa42 f303 	asr.w	r3, r2, r3
 80062b6:	f003 0301 	and.w	r3, r3, #1
 80062ba:	2b00      	cmp	r3, #0
 80062bc:	d02e      	beq.n	800631c <ILI9341_Draw_Char+0x110>
							if(Size == 1)
 80062be:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 80062c0:	2b01      	cmp	r3, #1
 80062c2:	d110      	bne.n	80062e6 <ILI9341_Draw_Char+0xda>
							{
              ILI9341_Draw_Pixel(X+j, Y+i, Colour);
 80062c4:	79bb      	ldrb	r3, [r7, #6]
 80062c6:	b29a      	uxth	r2, r3
 80062c8:	7d7b      	ldrb	r3, [r7, #21]
 80062ca:	b29b      	uxth	r3, r3
 80062cc:	4413      	add	r3, r2
 80062ce:	b298      	uxth	r0, r3
 80062d0:	797b      	ldrb	r3, [r7, #5]
 80062d2:	b29a      	uxth	r2, r3
 80062d4:	7dbb      	ldrb	r3, [r7, #22]
 80062d6:	b29b      	uxth	r3, r3
 80062d8:	4413      	add	r3, r2
 80062da:	b29b      	uxth	r3, r3
 80062dc:	887a      	ldrh	r2, [r7, #2]
 80062de:	4619      	mov	r1, r3
 80062e0:	f000 fb44 	bl	800696c <ILI9341_Draw_Pixel>
 80062e4:	e01a      	b.n	800631c <ILI9341_Draw_Char+0x110>
							}
							else
							{
							ILI9341_Draw_Rectangle(X+(j*Size), Y+(i*Size), Size, Size, Colour);
 80062e6:	79bb      	ldrb	r3, [r7, #6]
 80062e8:	b29a      	uxth	r2, r3
 80062ea:	7d7b      	ldrb	r3, [r7, #21]
 80062ec:	b29b      	uxth	r3, r3
 80062ee:	8d39      	ldrh	r1, [r7, #40]	; 0x28
 80062f0:	fb11 f303 	smulbb	r3, r1, r3
 80062f4:	b29b      	uxth	r3, r3
 80062f6:	4413      	add	r3, r2
 80062f8:	b298      	uxth	r0, r3
 80062fa:	797b      	ldrb	r3, [r7, #5]
 80062fc:	b29a      	uxth	r2, r3
 80062fe:	7dbb      	ldrb	r3, [r7, #22]
 8006300:	b29b      	uxth	r3, r3
 8006302:	8d39      	ldrh	r1, [r7, #40]	; 0x28
 8006304:	fb11 f303 	smulbb	r3, r1, r3
 8006308:	b29b      	uxth	r3, r3
 800630a:	4413      	add	r3, r2
 800630c:	b299      	uxth	r1, r3
 800630e:	8d3c      	ldrh	r4, [r7, #40]	; 0x28
 8006310:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 8006312:	887b      	ldrh	r3, [r7, #2]
 8006314:	9300      	str	r3, [sp, #0]
 8006316:	4623      	mov	r3, r4
 8006318:	f000 fbf0 	bl	8006afc <ILI9341_Draw_Rectangle>
        for (i=0; i<CHAR_HEIGHT; i++) {
 800631c:	7dbb      	ldrb	r3, [r7, #22]
 800631e:	3301      	adds	r3, #1
 8006320:	75bb      	strb	r3, [r7, #22]
 8006322:	7dbb      	ldrb	r3, [r7, #22]
 8006324:	2b07      	cmp	r3, #7
 8006326:	d9bc      	bls.n	80062a2 <ILI9341_Draw_Char+0x96>
    for (j=0; j<CHAR_WIDTH; j++) {
 8006328:	7d7b      	ldrb	r3, [r7, #21]
 800632a:	3301      	adds	r3, #1
 800632c:	757b      	strb	r3, [r7, #21]
 800632e:	7d7b      	ldrb	r3, [r7, #21]
 8006330:	2b05      	cmp	r3, #5
 8006332:	d9b3      	bls.n	800629c <ILI9341_Draw_Char+0x90>
							}
            }						
        }
    }
}
 8006334:	bf00      	nop
 8006336:	371c      	adds	r7, #28
 8006338:	46bd      	mov	sp, r7
 800633a:	bd90      	pop	{r4, r7, pc}
 800633c:	08007544 	.word	0x08007544

08006340 <ILI9341_Draw_Text>:

/*Draws an array of characters (fonts imported from fonts.h) at X,Y location with specified font colour, size and Background colour*/
/*See fonts.h implementation of font on what is required for changing to a different font when switching fonts libraries*/
void ILI9341_Draw_Text(const char* Text, uint8_t X, uint8_t Y, uint16_t Colour, uint16_t Size, uint16_t Background_Colour)
{
 8006340:	b590      	push	{r4, r7, lr}
 8006342:	b085      	sub	sp, #20
 8006344:	af02      	add	r7, sp, #8
 8006346:	6078      	str	r0, [r7, #4]
 8006348:	4608      	mov	r0, r1
 800634a:	4611      	mov	r1, r2
 800634c:	461a      	mov	r2, r3
 800634e:	4603      	mov	r3, r0
 8006350:	70fb      	strb	r3, [r7, #3]
 8006352:	460b      	mov	r3, r1
 8006354:	70bb      	strb	r3, [r7, #2]
 8006356:	4613      	mov	r3, r2
 8006358:	803b      	strh	r3, [r7, #0]
    while (*Text) {
 800635a:	e017      	b.n	800638c <ILI9341_Draw_Text+0x4c>
        ILI9341_Draw_Char(*Text++, X, Y, Colour, Size, Background_Colour);
 800635c:	687b      	ldr	r3, [r7, #4]
 800635e:	1c5a      	adds	r2, r3, #1
 8006360:	607a      	str	r2, [r7, #4]
 8006362:	7818      	ldrb	r0, [r3, #0]
 8006364:	883c      	ldrh	r4, [r7, #0]
 8006366:	78ba      	ldrb	r2, [r7, #2]
 8006368:	78f9      	ldrb	r1, [r7, #3]
 800636a:	8bbb      	ldrh	r3, [r7, #28]
 800636c:	9301      	str	r3, [sp, #4]
 800636e:	8b3b      	ldrh	r3, [r7, #24]
 8006370:	9300      	str	r3, [sp, #0]
 8006372:	4623      	mov	r3, r4
 8006374:	f7ff ff4a 	bl	800620c <ILI9341_Draw_Char>
        X += CHAR_WIDTH*Size;
 8006378:	8b3b      	ldrh	r3, [r7, #24]
 800637a:	b2db      	uxtb	r3, r3
 800637c:	461a      	mov	r2, r3
 800637e:	0052      	lsls	r2, r2, #1
 8006380:	4413      	add	r3, r2
 8006382:	005b      	lsls	r3, r3, #1
 8006384:	b2da      	uxtb	r2, r3
 8006386:	78fb      	ldrb	r3, [r7, #3]
 8006388:	4413      	add	r3, r2
 800638a:	70fb      	strb	r3, [r7, #3]
    while (*Text) {
 800638c:	687b      	ldr	r3, [r7, #4]
 800638e:	781b      	ldrb	r3, [r3, #0]
 8006390:	2b00      	cmp	r3, #0
 8006392:	d1e3      	bne.n	800635c <ILI9341_Draw_Text+0x1c>
    }
}
 8006394:	bf00      	nop
 8006396:	370c      	adds	r7, #12
 8006398:	46bd      	mov	sp, r7
 800639a:	bd90      	pop	{r4, r7, pc}

0800639c <ILI9341_SPI_Init>:
volatile uint16_t LCD_HEIGHT = ILI9341_SCREEN_HEIGHT;
volatile uint16_t LCD_WIDTH	 = ILI9341_SCREEN_WIDTH;

/* Initialize SPI */
void ILI9341_SPI_Init(void)
{																							//GPIO INIT
 800639c:	b580      	push	{r7, lr}
 800639e:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_RESET);	//CS OFF
 80063a0:	2200      	movs	r2, #0
 80063a2:	2180      	movs	r1, #128	; 0x80
 80063a4:	4802      	ldr	r0, [pc, #8]	; (80063b0 <ILI9341_SPI_Init+0x14>)
 80063a6:	f7fd faef 	bl	8003988 <HAL_GPIO_WritePin>
}
 80063aa:	bf00      	nop
 80063ac:	bd80      	pop	{r7, pc}
 80063ae:	bf00      	nop
 80063b0:	48000400 	.word	0x48000400

080063b4 <ILI9341_SPI_Send>:

/*Send data (char) to LCD*/
void ILI9341_SPI_Send(unsigned char SPI_Data)
{
 80063b4:	b580      	push	{r7, lr}
 80063b6:	b082      	sub	sp, #8
 80063b8:	af00      	add	r7, sp, #0
 80063ba:	4603      	mov	r3, r0
 80063bc:	71fb      	strb	r3, [r7, #7]
HAL_SPI_Transmit(HSPI_INSTANCE, &SPI_Data, 1, 1);
 80063be:	1df9      	adds	r1, r7, #7
 80063c0:	2301      	movs	r3, #1
 80063c2:	2201      	movs	r2, #1
 80063c4:	4803      	ldr	r0, [pc, #12]	; (80063d4 <ILI9341_SPI_Send+0x20>)
 80063c6:	f7fe fc43 	bl	8004c50 <HAL_SPI_Transmit>
}
 80063ca:	bf00      	nop
 80063cc:	3708      	adds	r7, #8
 80063ce:	46bd      	mov	sp, r7
 80063d0:	bd80      	pop	{r7, pc}
 80063d2:	bf00      	nop
 80063d4:	200001d4 	.word	0x200001d4

080063d8 <ILI9341_Write_Command>:

/* Send command (char) to LCD */
void ILI9341_Write_Command(uint8_t Command)
{
 80063d8:	b580      	push	{r7, lr}
 80063da:	b082      	sub	sp, #8
 80063dc:	af00      	add	r7, sp, #0
 80063de:	4603      	mov	r3, r0
 80063e0:	71fb      	strb	r3, [r7, #7]
HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_RESET);
 80063e2:	2200      	movs	r2, #0
 80063e4:	2180      	movs	r1, #128	; 0x80
 80063e6:	480a      	ldr	r0, [pc, #40]	; (8006410 <ILI9341_Write_Command+0x38>)
 80063e8:	f7fd face 	bl	8003988 <HAL_GPIO_WritePin>
HAL_GPIO_WritePin(LCD_DC_PORT, LCD_DC_PIN, GPIO_PIN_RESET);	
 80063ec:	2200      	movs	r2, #0
 80063ee:	2140      	movs	r1, #64	; 0x40
 80063f0:	4807      	ldr	r0, [pc, #28]	; (8006410 <ILI9341_Write_Command+0x38>)
 80063f2:	f7fd fac9 	bl	8003988 <HAL_GPIO_WritePin>
ILI9341_SPI_Send(Command);
 80063f6:	79fb      	ldrb	r3, [r7, #7]
 80063f8:	4618      	mov	r0, r3
 80063fa:	f7ff ffdb 	bl	80063b4 <ILI9341_SPI_Send>
HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_SET);		
 80063fe:	2201      	movs	r2, #1
 8006400:	2180      	movs	r1, #128	; 0x80
 8006402:	4803      	ldr	r0, [pc, #12]	; (8006410 <ILI9341_Write_Command+0x38>)
 8006404:	f7fd fac0 	bl	8003988 <HAL_GPIO_WritePin>
}
 8006408:	bf00      	nop
 800640a:	3708      	adds	r7, #8
 800640c:	46bd      	mov	sp, r7
 800640e:	bd80      	pop	{r7, pc}
 8006410:	48000400 	.word	0x48000400

08006414 <ILI9341_Write_Data>:

/* Send Data (char) to LCD */
void ILI9341_Write_Data(uint8_t Data)
{
 8006414:	b580      	push	{r7, lr}
 8006416:	b082      	sub	sp, #8
 8006418:	af00      	add	r7, sp, #0
 800641a:	4603      	mov	r3, r0
 800641c:	71fb      	strb	r3, [r7, #7]
HAL_GPIO_WritePin(LCD_DC_PORT, LCD_DC_PIN, GPIO_PIN_SET);	
 800641e:	2201      	movs	r2, #1
 8006420:	2140      	movs	r1, #64	; 0x40
 8006422:	480a      	ldr	r0, [pc, #40]	; (800644c <ILI9341_Write_Data+0x38>)
 8006424:	f7fd fab0 	bl	8003988 <HAL_GPIO_WritePin>
HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_RESET);
 8006428:	2200      	movs	r2, #0
 800642a:	2180      	movs	r1, #128	; 0x80
 800642c:	4807      	ldr	r0, [pc, #28]	; (800644c <ILI9341_Write_Data+0x38>)
 800642e:	f7fd faab 	bl	8003988 <HAL_GPIO_WritePin>
ILI9341_SPI_Send(Data);	
 8006432:	79fb      	ldrb	r3, [r7, #7]
 8006434:	4618      	mov	r0, r3
 8006436:	f7ff ffbd 	bl	80063b4 <ILI9341_SPI_Send>
HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_SET);
 800643a:	2201      	movs	r2, #1
 800643c:	2180      	movs	r1, #128	; 0x80
 800643e:	4803      	ldr	r0, [pc, #12]	; (800644c <ILI9341_Write_Data+0x38>)
 8006440:	f7fd faa2 	bl	8003988 <HAL_GPIO_WritePin>
}
 8006444:	bf00      	nop
 8006446:	3708      	adds	r7, #8
 8006448:	46bd      	mov	sp, r7
 800644a:	bd80      	pop	{r7, pc}
 800644c:	48000400 	.word	0x48000400

08006450 <ILI9341_Set_Address>:

/* Set Address - Location block - to draw into */
void ILI9341_Set_Address(uint16_t X1, uint16_t Y1, uint16_t X2, uint16_t Y2)
{
 8006450:	b590      	push	{r4, r7, lr}
 8006452:	b083      	sub	sp, #12
 8006454:	af00      	add	r7, sp, #0
 8006456:	4604      	mov	r4, r0
 8006458:	4608      	mov	r0, r1
 800645a:	4611      	mov	r1, r2
 800645c:	461a      	mov	r2, r3
 800645e:	4623      	mov	r3, r4
 8006460:	80fb      	strh	r3, [r7, #6]
 8006462:	4603      	mov	r3, r0
 8006464:	80bb      	strh	r3, [r7, #4]
 8006466:	460b      	mov	r3, r1
 8006468:	807b      	strh	r3, [r7, #2]
 800646a:	4613      	mov	r3, r2
 800646c:	803b      	strh	r3, [r7, #0]
ILI9341_Write_Command(0x2A);
 800646e:	202a      	movs	r0, #42	; 0x2a
 8006470:	f7ff ffb2 	bl	80063d8 <ILI9341_Write_Command>
ILI9341_Write_Data(X1>>8);
 8006474:	88fb      	ldrh	r3, [r7, #6]
 8006476:	0a1b      	lsrs	r3, r3, #8
 8006478:	b29b      	uxth	r3, r3
 800647a:	b2db      	uxtb	r3, r3
 800647c:	4618      	mov	r0, r3
 800647e:	f7ff ffc9 	bl	8006414 <ILI9341_Write_Data>
ILI9341_Write_Data(X1);
 8006482:	88fb      	ldrh	r3, [r7, #6]
 8006484:	b2db      	uxtb	r3, r3
 8006486:	4618      	mov	r0, r3
 8006488:	f7ff ffc4 	bl	8006414 <ILI9341_Write_Data>
ILI9341_Write_Data(X2>>8);
 800648c:	887b      	ldrh	r3, [r7, #2]
 800648e:	0a1b      	lsrs	r3, r3, #8
 8006490:	b29b      	uxth	r3, r3
 8006492:	b2db      	uxtb	r3, r3
 8006494:	4618      	mov	r0, r3
 8006496:	f7ff ffbd 	bl	8006414 <ILI9341_Write_Data>
ILI9341_Write_Data(X2);
 800649a:	887b      	ldrh	r3, [r7, #2]
 800649c:	b2db      	uxtb	r3, r3
 800649e:	4618      	mov	r0, r3
 80064a0:	f7ff ffb8 	bl	8006414 <ILI9341_Write_Data>

ILI9341_Write_Command(0x2B);
 80064a4:	202b      	movs	r0, #43	; 0x2b
 80064a6:	f7ff ff97 	bl	80063d8 <ILI9341_Write_Command>
ILI9341_Write_Data(Y1>>8);
 80064aa:	88bb      	ldrh	r3, [r7, #4]
 80064ac:	0a1b      	lsrs	r3, r3, #8
 80064ae:	b29b      	uxth	r3, r3
 80064b0:	b2db      	uxtb	r3, r3
 80064b2:	4618      	mov	r0, r3
 80064b4:	f7ff ffae 	bl	8006414 <ILI9341_Write_Data>
ILI9341_Write_Data(Y1);
 80064b8:	88bb      	ldrh	r3, [r7, #4]
 80064ba:	b2db      	uxtb	r3, r3
 80064bc:	4618      	mov	r0, r3
 80064be:	f7ff ffa9 	bl	8006414 <ILI9341_Write_Data>
ILI9341_Write_Data(Y2>>8);
 80064c2:	883b      	ldrh	r3, [r7, #0]
 80064c4:	0a1b      	lsrs	r3, r3, #8
 80064c6:	b29b      	uxth	r3, r3
 80064c8:	b2db      	uxtb	r3, r3
 80064ca:	4618      	mov	r0, r3
 80064cc:	f7ff ffa2 	bl	8006414 <ILI9341_Write_Data>
ILI9341_Write_Data(Y2);
 80064d0:	883b      	ldrh	r3, [r7, #0]
 80064d2:	b2db      	uxtb	r3, r3
 80064d4:	4618      	mov	r0, r3
 80064d6:	f7ff ff9d 	bl	8006414 <ILI9341_Write_Data>

ILI9341_Write_Command(0x2C);
 80064da:	202c      	movs	r0, #44	; 0x2c
 80064dc:	f7ff ff7c 	bl	80063d8 <ILI9341_Write_Command>
}
 80064e0:	bf00      	nop
 80064e2:	370c      	adds	r7, #12
 80064e4:	46bd      	mov	sp, r7
 80064e6:	bd90      	pop	{r4, r7, pc}

080064e8 <ILI9341_Reset>:

/*HARDWARE RESET*/
void ILI9341_Reset(void)
{
 80064e8:	b580      	push	{r7, lr}
 80064ea:	af00      	add	r7, sp, #0
HAL_GPIO_WritePin(LCD_RST_PORT, LCD_RST_PIN, GPIO_PIN_RESET);
 80064ec:	2200      	movs	r2, #0
 80064ee:	f44f 7100 	mov.w	r1, #512	; 0x200
 80064f2:	480b      	ldr	r0, [pc, #44]	; (8006520 <ILI9341_Reset+0x38>)
 80064f4:	f7fd fa48 	bl	8003988 <HAL_GPIO_WritePin>
HAL_Delay(200);
 80064f8:	20c8      	movs	r0, #200	; 0xc8
 80064fa:	f7fb f817 	bl	800152c <HAL_Delay>
HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_RESET);
 80064fe:	2200      	movs	r2, #0
 8006500:	2180      	movs	r1, #128	; 0x80
 8006502:	4807      	ldr	r0, [pc, #28]	; (8006520 <ILI9341_Reset+0x38>)
 8006504:	f7fd fa40 	bl	8003988 <HAL_GPIO_WritePin>
HAL_Delay(200);
 8006508:	20c8      	movs	r0, #200	; 0xc8
 800650a:	f7fb f80f 	bl	800152c <HAL_Delay>
HAL_GPIO_WritePin(LCD_RST_PORT, LCD_RST_PIN, GPIO_PIN_SET);	
 800650e:	2201      	movs	r2, #1
 8006510:	f44f 7100 	mov.w	r1, #512	; 0x200
 8006514:	4802      	ldr	r0, [pc, #8]	; (8006520 <ILI9341_Reset+0x38>)
 8006516:	f7fd fa37 	bl	8003988 <HAL_GPIO_WritePin>
}
 800651a:	bf00      	nop
 800651c:	bd80      	pop	{r7, pc}
 800651e:	bf00      	nop
 8006520:	48000400 	.word	0x48000400

08006524 <ILI9341_Set_Rotation>:

/*Ser rotation of the screen - changes x0 and y0*/
void ILI9341_Set_Rotation(uint8_t Rotation) 
{
 8006524:	b580      	push	{r7, lr}
 8006526:	b084      	sub	sp, #16
 8006528:	af00      	add	r7, sp, #0
 800652a:	4603      	mov	r3, r0
 800652c:	71fb      	strb	r3, [r7, #7]
	
uint8_t screen_rotation = Rotation;
 800652e:	79fb      	ldrb	r3, [r7, #7]
 8006530:	73fb      	strb	r3, [r7, #15]

ILI9341_Write_Command(0x36);
 8006532:	2036      	movs	r0, #54	; 0x36
 8006534:	f7ff ff50 	bl	80063d8 <ILI9341_Write_Command>
//HAL_Delay(1);
	
switch(screen_rotation) 
 8006538:	7bfb      	ldrb	r3, [r7, #15]
 800653a:	2b03      	cmp	r3, #3
 800653c:	d836      	bhi.n	80065ac <ILI9341_Set_Rotation+0x88>
 800653e:	a201      	add	r2, pc, #4	; (adr r2, 8006544 <ILI9341_Set_Rotation+0x20>)
 8006540:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006544:	08006555 	.word	0x08006555
 8006548:	0800656b 	.word	0x0800656b
 800654c:	08006581 	.word	0x08006581
 8006550:	08006597 	.word	0x08006597
	{
		case SCREEN_VERTICAL_1:
			ILI9341_Write_Data(0x40|0x08);
 8006554:	2048      	movs	r0, #72	; 0x48
 8006556:	f7ff ff5d 	bl	8006414 <ILI9341_Write_Data>
			LCD_WIDTH = 240;
 800655a:	4b17      	ldr	r3, [pc, #92]	; (80065b8 <ILI9341_Set_Rotation+0x94>)
 800655c:	22f0      	movs	r2, #240	; 0xf0
 800655e:	801a      	strh	r2, [r3, #0]
			LCD_HEIGHT = 320;
 8006560:	4b16      	ldr	r3, [pc, #88]	; (80065bc <ILI9341_Set_Rotation+0x98>)
 8006562:	f44f 72a0 	mov.w	r2, #320	; 0x140
 8006566:	801a      	strh	r2, [r3, #0]
			break;
 8006568:	e021      	b.n	80065ae <ILI9341_Set_Rotation+0x8a>
		case SCREEN_HORIZONTAL_1:
			ILI9341_Write_Data(0x20|0x08);
 800656a:	2028      	movs	r0, #40	; 0x28
 800656c:	f7ff ff52 	bl	8006414 <ILI9341_Write_Data>
			LCD_WIDTH  = 320;
 8006570:	4b11      	ldr	r3, [pc, #68]	; (80065b8 <ILI9341_Set_Rotation+0x94>)
 8006572:	f44f 72a0 	mov.w	r2, #320	; 0x140
 8006576:	801a      	strh	r2, [r3, #0]
			LCD_HEIGHT = 240;
 8006578:	4b10      	ldr	r3, [pc, #64]	; (80065bc <ILI9341_Set_Rotation+0x98>)
 800657a:	22f0      	movs	r2, #240	; 0xf0
 800657c:	801a      	strh	r2, [r3, #0]
			break;
 800657e:	e016      	b.n	80065ae <ILI9341_Set_Rotation+0x8a>
		case SCREEN_VERTICAL_2:
			ILI9341_Write_Data(0x80|0x08);
 8006580:	2088      	movs	r0, #136	; 0x88
 8006582:	f7ff ff47 	bl	8006414 <ILI9341_Write_Data>
			LCD_WIDTH  = 240;
 8006586:	4b0c      	ldr	r3, [pc, #48]	; (80065b8 <ILI9341_Set_Rotation+0x94>)
 8006588:	22f0      	movs	r2, #240	; 0xf0
 800658a:	801a      	strh	r2, [r3, #0]
			LCD_HEIGHT = 320;
 800658c:	4b0b      	ldr	r3, [pc, #44]	; (80065bc <ILI9341_Set_Rotation+0x98>)
 800658e:	f44f 72a0 	mov.w	r2, #320	; 0x140
 8006592:	801a      	strh	r2, [r3, #0]
			break;
 8006594:	e00b      	b.n	80065ae <ILI9341_Set_Rotation+0x8a>
		case SCREEN_HORIZONTAL_2:
			ILI9341_Write_Data(0x40|0x80|0x20|0x08);
 8006596:	20e8      	movs	r0, #232	; 0xe8
 8006598:	f7ff ff3c 	bl	8006414 <ILI9341_Write_Data>
			LCD_WIDTH  = 320;
 800659c:	4b06      	ldr	r3, [pc, #24]	; (80065b8 <ILI9341_Set_Rotation+0x94>)
 800659e:	f44f 72a0 	mov.w	r2, #320	; 0x140
 80065a2:	801a      	strh	r2, [r3, #0]
			LCD_HEIGHT = 240;
 80065a4:	4b05      	ldr	r3, [pc, #20]	; (80065bc <ILI9341_Set_Rotation+0x98>)
 80065a6:	22f0      	movs	r2, #240	; 0xf0
 80065a8:	801a      	strh	r2, [r3, #0]
			break;
 80065aa:	e000      	b.n	80065ae <ILI9341_Set_Rotation+0x8a>
		default:
			//EXIT IF SCREEN ROTATION NOT VALID!
			break;
 80065ac:	bf00      	nop
	}
}
 80065ae:	bf00      	nop
 80065b0:	3710      	adds	r7, #16
 80065b2:	46bd      	mov	sp, r7
 80065b4:	bd80      	pop	{r7, pc}
 80065b6:	bf00      	nop
 80065b8:	20000012 	.word	0x20000012
 80065bc:	20000010 	.word	0x20000010

080065c0 <ILI9341_Enable>:

/*Enable LCD display*/
void ILI9341_Enable(void)
{
 80065c0:	b580      	push	{r7, lr}
 80065c2:	af00      	add	r7, sp, #0
HAL_GPIO_WritePin(LCD_RST_PORT, LCD_RST_PIN, GPIO_PIN_SET);
 80065c4:	2201      	movs	r2, #1
 80065c6:	f44f 7100 	mov.w	r1, #512	; 0x200
 80065ca:	4802      	ldr	r0, [pc, #8]	; (80065d4 <ILI9341_Enable+0x14>)
 80065cc:	f7fd f9dc 	bl	8003988 <HAL_GPIO_WritePin>
}
 80065d0:	bf00      	nop
 80065d2:	bd80      	pop	{r7, pc}
 80065d4:	48000400 	.word	0x48000400

080065d8 <ILI9341_Init>:

/*Initialize LCD display*/
void ILI9341_Init(void)
{
 80065d8:	b580      	push	{r7, lr}
 80065da:	af00      	add	r7, sp, #0

ILI9341_Enable();
 80065dc:	f7ff fff0 	bl	80065c0 <ILI9341_Enable>
ILI9341_SPI_Init();
 80065e0:	f7ff fedc 	bl	800639c <ILI9341_SPI_Init>
ILI9341_Reset();
 80065e4:	f7ff ff80 	bl	80064e8 <ILI9341_Reset>

//SOFTWARE RESET
ILI9341_Write_Command(0x01);
 80065e8:	2001      	movs	r0, #1
 80065ea:	f7ff fef5 	bl	80063d8 <ILI9341_Write_Command>
HAL_Delay(1000);
 80065ee:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80065f2:	f7fa ff9b 	bl	800152c <HAL_Delay>
	
//POWER CONTROL A
ILI9341_Write_Command(0xCB);
 80065f6:	20cb      	movs	r0, #203	; 0xcb
 80065f8:	f7ff feee 	bl	80063d8 <ILI9341_Write_Command>
ILI9341_Write_Data(0x39);
 80065fc:	2039      	movs	r0, #57	; 0x39
 80065fe:	f7ff ff09 	bl	8006414 <ILI9341_Write_Data>
ILI9341_Write_Data(0x2C);
 8006602:	202c      	movs	r0, #44	; 0x2c
 8006604:	f7ff ff06 	bl	8006414 <ILI9341_Write_Data>
ILI9341_Write_Data(0x00);
 8006608:	2000      	movs	r0, #0
 800660a:	f7ff ff03 	bl	8006414 <ILI9341_Write_Data>
ILI9341_Write_Data(0x34);
 800660e:	2034      	movs	r0, #52	; 0x34
 8006610:	f7ff ff00 	bl	8006414 <ILI9341_Write_Data>
ILI9341_Write_Data(0x02);
 8006614:	2002      	movs	r0, #2
 8006616:	f7ff fefd 	bl	8006414 <ILI9341_Write_Data>

//POWER CONTROL B
ILI9341_Write_Command(0xCF);
 800661a:	20cf      	movs	r0, #207	; 0xcf
 800661c:	f7ff fedc 	bl	80063d8 <ILI9341_Write_Command>
ILI9341_Write_Data(0x00);
 8006620:	2000      	movs	r0, #0
 8006622:	f7ff fef7 	bl	8006414 <ILI9341_Write_Data>
ILI9341_Write_Data(0xC1);
 8006626:	20c1      	movs	r0, #193	; 0xc1
 8006628:	f7ff fef4 	bl	8006414 <ILI9341_Write_Data>
ILI9341_Write_Data(0x30);
 800662c:	2030      	movs	r0, #48	; 0x30
 800662e:	f7ff fef1 	bl	8006414 <ILI9341_Write_Data>

//DRIVER TIMING CONTROL A
ILI9341_Write_Command(0xE8);
 8006632:	20e8      	movs	r0, #232	; 0xe8
 8006634:	f7ff fed0 	bl	80063d8 <ILI9341_Write_Command>
ILI9341_Write_Data(0x85);
 8006638:	2085      	movs	r0, #133	; 0x85
 800663a:	f7ff feeb 	bl	8006414 <ILI9341_Write_Data>
ILI9341_Write_Data(0x00);
 800663e:	2000      	movs	r0, #0
 8006640:	f7ff fee8 	bl	8006414 <ILI9341_Write_Data>
ILI9341_Write_Data(0x78);
 8006644:	2078      	movs	r0, #120	; 0x78
 8006646:	f7ff fee5 	bl	8006414 <ILI9341_Write_Data>

//DRIVER TIMING CONTROL B
ILI9341_Write_Command(0xEA);
 800664a:	20ea      	movs	r0, #234	; 0xea
 800664c:	f7ff fec4 	bl	80063d8 <ILI9341_Write_Command>
ILI9341_Write_Data(0x00);
 8006650:	2000      	movs	r0, #0
 8006652:	f7ff fedf 	bl	8006414 <ILI9341_Write_Data>
ILI9341_Write_Data(0x00);
 8006656:	2000      	movs	r0, #0
 8006658:	f7ff fedc 	bl	8006414 <ILI9341_Write_Data>

//POWER ON SEQUENCE CONTROL
ILI9341_Write_Command(0xED);
 800665c:	20ed      	movs	r0, #237	; 0xed
 800665e:	f7ff febb 	bl	80063d8 <ILI9341_Write_Command>
ILI9341_Write_Data(0x64);
 8006662:	2064      	movs	r0, #100	; 0x64
 8006664:	f7ff fed6 	bl	8006414 <ILI9341_Write_Data>
ILI9341_Write_Data(0x03);
 8006668:	2003      	movs	r0, #3
 800666a:	f7ff fed3 	bl	8006414 <ILI9341_Write_Data>
ILI9341_Write_Data(0x12);
 800666e:	2012      	movs	r0, #18
 8006670:	f7ff fed0 	bl	8006414 <ILI9341_Write_Data>
ILI9341_Write_Data(0x81);
 8006674:	2081      	movs	r0, #129	; 0x81
 8006676:	f7ff fecd 	bl	8006414 <ILI9341_Write_Data>

//PUMP RATIO CONTROL
ILI9341_Write_Command(0xF7);
 800667a:	20f7      	movs	r0, #247	; 0xf7
 800667c:	f7ff feac 	bl	80063d8 <ILI9341_Write_Command>
ILI9341_Write_Data(0x20);
 8006680:	2020      	movs	r0, #32
 8006682:	f7ff fec7 	bl	8006414 <ILI9341_Write_Data>

//POWER CONTROL,VRH[5:0]
ILI9341_Write_Command(0xC0);
 8006686:	20c0      	movs	r0, #192	; 0xc0
 8006688:	f7ff fea6 	bl	80063d8 <ILI9341_Write_Command>
ILI9341_Write_Data(0x23);
 800668c:	2023      	movs	r0, #35	; 0x23
 800668e:	f7ff fec1 	bl	8006414 <ILI9341_Write_Data>

//POWER CONTROL,SAP[2:0];BT[3:0]
ILI9341_Write_Command(0xC1);
 8006692:	20c1      	movs	r0, #193	; 0xc1
 8006694:	f7ff fea0 	bl	80063d8 <ILI9341_Write_Command>
ILI9341_Write_Data(0x10);
 8006698:	2010      	movs	r0, #16
 800669a:	f7ff febb 	bl	8006414 <ILI9341_Write_Data>

//VCM CONTROL
ILI9341_Write_Command(0xC5);
 800669e:	20c5      	movs	r0, #197	; 0xc5
 80066a0:	f7ff fe9a 	bl	80063d8 <ILI9341_Write_Command>
ILI9341_Write_Data(0x3E);
 80066a4:	203e      	movs	r0, #62	; 0x3e
 80066a6:	f7ff feb5 	bl	8006414 <ILI9341_Write_Data>
ILI9341_Write_Data(0x28);
 80066aa:	2028      	movs	r0, #40	; 0x28
 80066ac:	f7ff feb2 	bl	8006414 <ILI9341_Write_Data>

//VCM CONTROL 2
ILI9341_Write_Command(0xC7);
 80066b0:	20c7      	movs	r0, #199	; 0xc7
 80066b2:	f7ff fe91 	bl	80063d8 <ILI9341_Write_Command>
ILI9341_Write_Data(0x86);
 80066b6:	2086      	movs	r0, #134	; 0x86
 80066b8:	f7ff feac 	bl	8006414 <ILI9341_Write_Data>

//MEMORY ACCESS CONTROL
ILI9341_Write_Command(0x36);
 80066bc:	2036      	movs	r0, #54	; 0x36
 80066be:	f7ff fe8b 	bl	80063d8 <ILI9341_Write_Command>
ILI9341_Write_Data(0x48);
 80066c2:	2048      	movs	r0, #72	; 0x48
 80066c4:	f7ff fea6 	bl	8006414 <ILI9341_Write_Data>

//PIXEL FORMAT
ILI9341_Write_Command(0x3A);
 80066c8:	203a      	movs	r0, #58	; 0x3a
 80066ca:	f7ff fe85 	bl	80063d8 <ILI9341_Write_Command>
ILI9341_Write_Data(0x55);
 80066ce:	2055      	movs	r0, #85	; 0x55
 80066d0:	f7ff fea0 	bl	8006414 <ILI9341_Write_Data>

//FRAME RATIO CONTROL, STANDARD RGB COLOR
ILI9341_Write_Command(0xB1);
 80066d4:	20b1      	movs	r0, #177	; 0xb1
 80066d6:	f7ff fe7f 	bl	80063d8 <ILI9341_Write_Command>
ILI9341_Write_Data(0x00);
 80066da:	2000      	movs	r0, #0
 80066dc:	f7ff fe9a 	bl	8006414 <ILI9341_Write_Data>
ILI9341_Write_Data(0x18);
 80066e0:	2018      	movs	r0, #24
 80066e2:	f7ff fe97 	bl	8006414 <ILI9341_Write_Data>

//DISPLAY FUNCTION CONTROL
ILI9341_Write_Command(0xB6);
 80066e6:	20b6      	movs	r0, #182	; 0xb6
 80066e8:	f7ff fe76 	bl	80063d8 <ILI9341_Write_Command>
ILI9341_Write_Data(0x08);
 80066ec:	2008      	movs	r0, #8
 80066ee:	f7ff fe91 	bl	8006414 <ILI9341_Write_Data>
ILI9341_Write_Data(0x82);
 80066f2:	2082      	movs	r0, #130	; 0x82
 80066f4:	f7ff fe8e 	bl	8006414 <ILI9341_Write_Data>
ILI9341_Write_Data(0x27);
 80066f8:	2027      	movs	r0, #39	; 0x27
 80066fa:	f7ff fe8b 	bl	8006414 <ILI9341_Write_Data>

//3GAMMA FUNCTION DISABLE
ILI9341_Write_Command(0xF2);
 80066fe:	20f2      	movs	r0, #242	; 0xf2
 8006700:	f7ff fe6a 	bl	80063d8 <ILI9341_Write_Command>
ILI9341_Write_Data(0x00);
 8006704:	2000      	movs	r0, #0
 8006706:	f7ff fe85 	bl	8006414 <ILI9341_Write_Data>

//GAMMA CURVE SELECTED
ILI9341_Write_Command(0x26);
 800670a:	2026      	movs	r0, #38	; 0x26
 800670c:	f7ff fe64 	bl	80063d8 <ILI9341_Write_Command>
ILI9341_Write_Data(0x01);
 8006710:	2001      	movs	r0, #1
 8006712:	f7ff fe7f 	bl	8006414 <ILI9341_Write_Data>

//POSITIVE GAMMA CORRECTION
ILI9341_Write_Command(0xE0);
 8006716:	20e0      	movs	r0, #224	; 0xe0
 8006718:	f7ff fe5e 	bl	80063d8 <ILI9341_Write_Command>
ILI9341_Write_Data(0x0F);
 800671c:	200f      	movs	r0, #15
 800671e:	f7ff fe79 	bl	8006414 <ILI9341_Write_Data>
ILI9341_Write_Data(0x31);
 8006722:	2031      	movs	r0, #49	; 0x31
 8006724:	f7ff fe76 	bl	8006414 <ILI9341_Write_Data>
ILI9341_Write_Data(0x2B);
 8006728:	202b      	movs	r0, #43	; 0x2b
 800672a:	f7ff fe73 	bl	8006414 <ILI9341_Write_Data>
ILI9341_Write_Data(0x0C);
 800672e:	200c      	movs	r0, #12
 8006730:	f7ff fe70 	bl	8006414 <ILI9341_Write_Data>
ILI9341_Write_Data(0x0E);
 8006734:	200e      	movs	r0, #14
 8006736:	f7ff fe6d 	bl	8006414 <ILI9341_Write_Data>
ILI9341_Write_Data(0x08);
 800673a:	2008      	movs	r0, #8
 800673c:	f7ff fe6a 	bl	8006414 <ILI9341_Write_Data>
ILI9341_Write_Data(0x4E);
 8006740:	204e      	movs	r0, #78	; 0x4e
 8006742:	f7ff fe67 	bl	8006414 <ILI9341_Write_Data>
ILI9341_Write_Data(0xF1);
 8006746:	20f1      	movs	r0, #241	; 0xf1
 8006748:	f7ff fe64 	bl	8006414 <ILI9341_Write_Data>
ILI9341_Write_Data(0x37);
 800674c:	2037      	movs	r0, #55	; 0x37
 800674e:	f7ff fe61 	bl	8006414 <ILI9341_Write_Data>
ILI9341_Write_Data(0x07);
 8006752:	2007      	movs	r0, #7
 8006754:	f7ff fe5e 	bl	8006414 <ILI9341_Write_Data>
ILI9341_Write_Data(0x10);
 8006758:	2010      	movs	r0, #16
 800675a:	f7ff fe5b 	bl	8006414 <ILI9341_Write_Data>
ILI9341_Write_Data(0x03);
 800675e:	2003      	movs	r0, #3
 8006760:	f7ff fe58 	bl	8006414 <ILI9341_Write_Data>
ILI9341_Write_Data(0x0E);
 8006764:	200e      	movs	r0, #14
 8006766:	f7ff fe55 	bl	8006414 <ILI9341_Write_Data>
ILI9341_Write_Data(0x09);
 800676a:	2009      	movs	r0, #9
 800676c:	f7ff fe52 	bl	8006414 <ILI9341_Write_Data>
ILI9341_Write_Data(0x00);
 8006770:	2000      	movs	r0, #0
 8006772:	f7ff fe4f 	bl	8006414 <ILI9341_Write_Data>

//NEGATIVE GAMMA CORRECTION
ILI9341_Write_Command(0xE1);
 8006776:	20e1      	movs	r0, #225	; 0xe1
 8006778:	f7ff fe2e 	bl	80063d8 <ILI9341_Write_Command>
ILI9341_Write_Data(0x00);
 800677c:	2000      	movs	r0, #0
 800677e:	f7ff fe49 	bl	8006414 <ILI9341_Write_Data>
ILI9341_Write_Data(0x0E);
 8006782:	200e      	movs	r0, #14
 8006784:	f7ff fe46 	bl	8006414 <ILI9341_Write_Data>
ILI9341_Write_Data(0x14);
 8006788:	2014      	movs	r0, #20
 800678a:	f7ff fe43 	bl	8006414 <ILI9341_Write_Data>
ILI9341_Write_Data(0x03);
 800678e:	2003      	movs	r0, #3
 8006790:	f7ff fe40 	bl	8006414 <ILI9341_Write_Data>
ILI9341_Write_Data(0x11);
 8006794:	2011      	movs	r0, #17
 8006796:	f7ff fe3d 	bl	8006414 <ILI9341_Write_Data>
ILI9341_Write_Data(0x07);
 800679a:	2007      	movs	r0, #7
 800679c:	f7ff fe3a 	bl	8006414 <ILI9341_Write_Data>
ILI9341_Write_Data(0x31);
 80067a0:	2031      	movs	r0, #49	; 0x31
 80067a2:	f7ff fe37 	bl	8006414 <ILI9341_Write_Data>
ILI9341_Write_Data(0xC1);
 80067a6:	20c1      	movs	r0, #193	; 0xc1
 80067a8:	f7ff fe34 	bl	8006414 <ILI9341_Write_Data>
ILI9341_Write_Data(0x48);
 80067ac:	2048      	movs	r0, #72	; 0x48
 80067ae:	f7ff fe31 	bl	8006414 <ILI9341_Write_Data>
ILI9341_Write_Data(0x08);
 80067b2:	2008      	movs	r0, #8
 80067b4:	f7ff fe2e 	bl	8006414 <ILI9341_Write_Data>
ILI9341_Write_Data(0x0F);
 80067b8:	200f      	movs	r0, #15
 80067ba:	f7ff fe2b 	bl	8006414 <ILI9341_Write_Data>
ILI9341_Write_Data(0x0C);
 80067be:	200c      	movs	r0, #12
 80067c0:	f7ff fe28 	bl	8006414 <ILI9341_Write_Data>
ILI9341_Write_Data(0x31);
 80067c4:	2031      	movs	r0, #49	; 0x31
 80067c6:	f7ff fe25 	bl	8006414 <ILI9341_Write_Data>
ILI9341_Write_Data(0x36);
 80067ca:	2036      	movs	r0, #54	; 0x36
 80067cc:	f7ff fe22 	bl	8006414 <ILI9341_Write_Data>
ILI9341_Write_Data(0x0F);
 80067d0:	200f      	movs	r0, #15
 80067d2:	f7ff fe1f 	bl	8006414 <ILI9341_Write_Data>

//EXIT SLEEP
ILI9341_Write_Command(0x11);
 80067d6:	2011      	movs	r0, #17
 80067d8:	f7ff fdfe 	bl	80063d8 <ILI9341_Write_Command>
HAL_Delay(120);
 80067dc:	2078      	movs	r0, #120	; 0x78
 80067de:	f7fa fea5 	bl	800152c <HAL_Delay>

//TURN ON DISPLAY
ILI9341_Write_Command(0x29);
 80067e2:	2029      	movs	r0, #41	; 0x29
 80067e4:	f7ff fdf8 	bl	80063d8 <ILI9341_Write_Command>

//STARTING ROTATION
ILI9341_Set_Rotation(SCREEN_VERTICAL_1);
 80067e8:	2000      	movs	r0, #0
 80067ea:	f7ff fe9b 	bl	8006524 <ILI9341_Set_Rotation>
}
 80067ee:	bf00      	nop
 80067f0:	bd80      	pop	{r7, pc}
	...

080067f4 <ILI9341_Draw_Colour_Burst>:
}

//INTERNAL FUNCTION OF LIBRARY
/*Sends block colour information to LCD*/
void ILI9341_Draw_Colour_Burst(uint16_t Colour, uint32_t Size)
{
 80067f4:	b5b0      	push	{r4, r5, r7, lr}
 80067f6:	b08c      	sub	sp, #48	; 0x30
 80067f8:	af00      	add	r7, sp, #0
 80067fa:	4603      	mov	r3, r0
 80067fc:	6039      	str	r1, [r7, #0]
 80067fe:	80fb      	strh	r3, [r7, #6]
 8006800:	466b      	mov	r3, sp
 8006802:	461d      	mov	r5, r3
//SENDS COLOUR
uint32_t Buffer_Size = 0;
 8006804:	2300      	movs	r3, #0
 8006806:	627b      	str	r3, [r7, #36]	; 0x24
if((Size*2) < BURST_MAX_SIZE)
 8006808:	683b      	ldr	r3, [r7, #0]
 800680a:	005b      	lsls	r3, r3, #1
 800680c:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8006810:	d202      	bcs.n	8006818 <ILI9341_Draw_Colour_Burst+0x24>
{
	Buffer_Size = Size;
 8006812:	683b      	ldr	r3, [r7, #0]
 8006814:	627b      	str	r3, [r7, #36]	; 0x24
 8006816:	e002      	b.n	800681e <ILI9341_Draw_Colour_Burst+0x2a>
}
else
{
	Buffer_Size = BURST_MAX_SIZE;
 8006818:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 800681c:	627b      	str	r3, [r7, #36]	; 0x24
}
	
HAL_GPIO_WritePin(LCD_DC_PORT, LCD_DC_PIN, GPIO_PIN_SET);	
 800681e:	2201      	movs	r2, #1
 8006820:	2140      	movs	r1, #64	; 0x40
 8006822:	483d      	ldr	r0, [pc, #244]	; (8006918 <ILI9341_Draw_Colour_Burst+0x124>)
 8006824:	f7fd f8b0 	bl	8003988 <HAL_GPIO_WritePin>
HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_RESET);
 8006828:	2200      	movs	r2, #0
 800682a:	2180      	movs	r1, #128	; 0x80
 800682c:	483a      	ldr	r0, [pc, #232]	; (8006918 <ILI9341_Draw_Colour_Burst+0x124>)
 800682e:	f7fd f8ab 	bl	8003988 <HAL_GPIO_WritePin>

unsigned char chifted = 	Colour>>8;;
 8006832:	88fb      	ldrh	r3, [r7, #6]
 8006834:	0a1b      	lsrs	r3, r3, #8
 8006836:	b29b      	uxth	r3, r3
 8006838:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
unsigned char burst_buffer[Buffer_Size];
 800683c:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800683e:	4603      	mov	r3, r0
 8006840:	3b01      	subs	r3, #1
 8006842:	61fb      	str	r3, [r7, #28]
 8006844:	4601      	mov	r1, r0
 8006846:	f04f 0200 	mov.w	r2, #0
 800684a:	f04f 0300 	mov.w	r3, #0
 800684e:	f04f 0400 	mov.w	r4, #0
 8006852:	00d4      	lsls	r4, r2, #3
 8006854:	ea44 7451 	orr.w	r4, r4, r1, lsr #29
 8006858:	00cb      	lsls	r3, r1, #3
 800685a:	4601      	mov	r1, r0
 800685c:	f04f 0200 	mov.w	r2, #0
 8006860:	f04f 0300 	mov.w	r3, #0
 8006864:	f04f 0400 	mov.w	r4, #0
 8006868:	00d4      	lsls	r4, r2, #3
 800686a:	ea44 7451 	orr.w	r4, r4, r1, lsr #29
 800686e:	00cb      	lsls	r3, r1, #3
 8006870:	1dc3      	adds	r3, r0, #7
 8006872:	08db      	lsrs	r3, r3, #3
 8006874:	00db      	lsls	r3, r3, #3
 8006876:	ebad 0d03 	sub.w	sp, sp, r3
 800687a:	466b      	mov	r3, sp
 800687c:	3300      	adds	r3, #0
 800687e:	61bb      	str	r3, [r7, #24]
for(uint32_t j = 0; j < Buffer_Size; j+=2)
 8006880:	2300      	movs	r3, #0
 8006882:	62bb      	str	r3, [r7, #40]	; 0x28
 8006884:	e00e      	b.n	80068a4 <ILI9341_Draw_Colour_Burst+0xb0>
	{
		burst_buffer[j] = 	chifted;
 8006886:	69ba      	ldr	r2, [r7, #24]
 8006888:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800688a:	4413      	add	r3, r2
 800688c:	f897 2023 	ldrb.w	r2, [r7, #35]	; 0x23
 8006890:	701a      	strb	r2, [r3, #0]
		burst_buffer[j+1] = Colour;
 8006892:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006894:	3301      	adds	r3, #1
 8006896:	88fa      	ldrh	r2, [r7, #6]
 8006898:	b2d1      	uxtb	r1, r2
 800689a:	69ba      	ldr	r2, [r7, #24]
 800689c:	54d1      	strb	r1, [r2, r3]
for(uint32_t j = 0; j < Buffer_Size; j+=2)
 800689e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80068a0:	3302      	adds	r3, #2
 80068a2:	62bb      	str	r3, [r7, #40]	; 0x28
 80068a4:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80068a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80068a8:	429a      	cmp	r2, r3
 80068aa:	d3ec      	bcc.n	8006886 <ILI9341_Draw_Colour_Burst+0x92>
	}

uint32_t Sending_Size = Size*2;
 80068ac:	683b      	ldr	r3, [r7, #0]
 80068ae:	005b      	lsls	r3, r3, #1
 80068b0:	617b      	str	r3, [r7, #20]
uint32_t Sending_in_Block = Sending_Size/Buffer_Size;
 80068b2:	697a      	ldr	r2, [r7, #20]
 80068b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80068b6:	fbb2 f3f3 	udiv	r3, r2, r3
 80068ba:	613b      	str	r3, [r7, #16]
uint32_t Remainder_from_block = Sending_Size%Buffer_Size;
 80068bc:	697b      	ldr	r3, [r7, #20]
 80068be:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80068c0:	fbb3 f2f2 	udiv	r2, r3, r2
 80068c4:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80068c6:	fb01 f202 	mul.w	r2, r1, r2
 80068ca:	1a9b      	subs	r3, r3, r2
 80068cc:	60fb      	str	r3, [r7, #12]

if(Sending_in_Block != 0)
 80068ce:	693b      	ldr	r3, [r7, #16]
 80068d0:	2b00      	cmp	r3, #0
 80068d2:	d010      	beq.n	80068f6 <ILI9341_Draw_Colour_Burst+0x102>
{
	for(uint32_t j = 0; j < (Sending_in_Block); j++)
 80068d4:	2300      	movs	r3, #0
 80068d6:	62fb      	str	r3, [r7, #44]	; 0x2c
 80068d8:	e009      	b.n	80068ee <ILI9341_Draw_Colour_Burst+0xfa>
		{
		HAL_SPI_Transmit(HSPI_INSTANCE, (unsigned char *)burst_buffer, Buffer_Size, 10);	
 80068da:	69b9      	ldr	r1, [r7, #24]
 80068dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80068de:	b29a      	uxth	r2, r3
 80068e0:	230a      	movs	r3, #10
 80068e2:	480e      	ldr	r0, [pc, #56]	; (800691c <ILI9341_Draw_Colour_Burst+0x128>)
 80068e4:	f7fe f9b4 	bl	8004c50 <HAL_SPI_Transmit>
	for(uint32_t j = 0; j < (Sending_in_Block); j++)
 80068e8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80068ea:	3301      	adds	r3, #1
 80068ec:	62fb      	str	r3, [r7, #44]	; 0x2c
 80068ee:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80068f0:	693b      	ldr	r3, [r7, #16]
 80068f2:	429a      	cmp	r2, r3
 80068f4:	d3f1      	bcc.n	80068da <ILI9341_Draw_Colour_Burst+0xe6>
		}
}

//REMAINDER!
HAL_SPI_Transmit(HSPI_INSTANCE, (unsigned char *)burst_buffer, Remainder_from_block, 10);	
 80068f6:	69b9      	ldr	r1, [r7, #24]
 80068f8:	68fb      	ldr	r3, [r7, #12]
 80068fa:	b29a      	uxth	r2, r3
 80068fc:	230a      	movs	r3, #10
 80068fe:	4807      	ldr	r0, [pc, #28]	; (800691c <ILI9341_Draw_Colour_Burst+0x128>)
 8006900:	f7fe f9a6 	bl	8004c50 <HAL_SPI_Transmit>
	
HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_SET);
 8006904:	2201      	movs	r2, #1
 8006906:	2180      	movs	r1, #128	; 0x80
 8006908:	4803      	ldr	r0, [pc, #12]	; (8006918 <ILI9341_Draw_Colour_Burst+0x124>)
 800690a:	f7fd f83d 	bl	8003988 <HAL_GPIO_WritePin>
 800690e:	46ad      	mov	sp, r5
}
 8006910:	bf00      	nop
 8006912:	3730      	adds	r7, #48	; 0x30
 8006914:	46bd      	mov	sp, r7
 8006916:	bdb0      	pop	{r4, r5, r7, pc}
 8006918:	48000400 	.word	0x48000400
 800691c:	200001d4 	.word	0x200001d4

08006920 <ILI9341_Fill_Screen>:

//FILL THE ENTIRE SCREEN WITH SELECTED COLOUR (either #define-d ones or custom 16bit)
/*Sets address (entire screen) and Sends Height*Width ammount of colour information to LCD*/
void ILI9341_Fill_Screen(uint16_t Colour)
{
 8006920:	b580      	push	{r7, lr}
 8006922:	b082      	sub	sp, #8
 8006924:	af00      	add	r7, sp, #0
 8006926:	4603      	mov	r3, r0
 8006928:	80fb      	strh	r3, [r7, #6]
ILI9341_Set_Address(0,0,LCD_WIDTH,LCD_HEIGHT);	
 800692a:	4b0e      	ldr	r3, [pc, #56]	; (8006964 <ILI9341_Fill_Screen+0x44>)
 800692c:	881b      	ldrh	r3, [r3, #0]
 800692e:	b29a      	uxth	r2, r3
 8006930:	4b0d      	ldr	r3, [pc, #52]	; (8006968 <ILI9341_Fill_Screen+0x48>)
 8006932:	881b      	ldrh	r3, [r3, #0]
 8006934:	b29b      	uxth	r3, r3
 8006936:	2100      	movs	r1, #0
 8006938:	2000      	movs	r0, #0
 800693a:	f7ff fd89 	bl	8006450 <ILI9341_Set_Address>
ILI9341_Draw_Colour_Burst(Colour, LCD_WIDTH*LCD_HEIGHT);	
 800693e:	4b09      	ldr	r3, [pc, #36]	; (8006964 <ILI9341_Fill_Screen+0x44>)
 8006940:	881b      	ldrh	r3, [r3, #0]
 8006942:	b29b      	uxth	r3, r3
 8006944:	461a      	mov	r2, r3
 8006946:	4b08      	ldr	r3, [pc, #32]	; (8006968 <ILI9341_Fill_Screen+0x48>)
 8006948:	881b      	ldrh	r3, [r3, #0]
 800694a:	b29b      	uxth	r3, r3
 800694c:	fb03 f302 	mul.w	r3, r3, r2
 8006950:	461a      	mov	r2, r3
 8006952:	88fb      	ldrh	r3, [r7, #6]
 8006954:	4611      	mov	r1, r2
 8006956:	4618      	mov	r0, r3
 8006958:	f7ff ff4c 	bl	80067f4 <ILI9341_Draw_Colour_Burst>
}
 800695c:	bf00      	nop
 800695e:	3708      	adds	r7, #8
 8006960:	46bd      	mov	sp, r7
 8006962:	bd80      	pop	{r7, pc}
 8006964:	20000012 	.word	0x20000012
 8006968:	20000010 	.word	0x20000010

0800696c <ILI9341_Draw_Pixel>:
//Location is dependant on screen orientation. x0 and y0 locations change with orientations.
//Using pixels to draw big simple structures is not recommended as it is really slow
//Try using either rectangles or lines if possible
//
void ILI9341_Draw_Pixel(uint16_t X,uint16_t Y,uint16_t Colour) 
{
 800696c:	b580      	push	{r7, lr}
 800696e:	b086      	sub	sp, #24
 8006970:	af00      	add	r7, sp, #0
 8006972:	4603      	mov	r3, r0
 8006974:	80fb      	strh	r3, [r7, #6]
 8006976:	460b      	mov	r3, r1
 8006978:	80bb      	strh	r3, [r7, #4]
 800697a:	4613      	mov	r3, r2
 800697c:	807b      	strh	r3, [r7, #2]
if((X >=LCD_WIDTH) || (Y >=LCD_HEIGHT)) return;	//OUT OF BOUNDS!
 800697e:	4b5b      	ldr	r3, [pc, #364]	; (8006aec <ILI9341_Draw_Pixel+0x180>)
 8006980:	881b      	ldrh	r3, [r3, #0]
 8006982:	b29b      	uxth	r3, r3
 8006984:	88fa      	ldrh	r2, [r7, #6]
 8006986:	429a      	cmp	r2, r3
 8006988:	f080 80ac 	bcs.w	8006ae4 <ILI9341_Draw_Pixel+0x178>
 800698c:	4b58      	ldr	r3, [pc, #352]	; (8006af0 <ILI9341_Draw_Pixel+0x184>)
 800698e:	881b      	ldrh	r3, [r3, #0]
 8006990:	b29b      	uxth	r3, r3
 8006992:	88ba      	ldrh	r2, [r7, #4]
 8006994:	429a      	cmp	r2, r3
 8006996:	f080 80a5 	bcs.w	8006ae4 <ILI9341_Draw_Pixel+0x178>
	
//ADDRESS
HAL_GPIO_WritePin(LCD_DC_PORT, LCD_DC_PIN, GPIO_PIN_RESET);	
 800699a:	2200      	movs	r2, #0
 800699c:	2140      	movs	r1, #64	; 0x40
 800699e:	4855      	ldr	r0, [pc, #340]	; (8006af4 <ILI9341_Draw_Pixel+0x188>)
 80069a0:	f7fc fff2 	bl	8003988 <HAL_GPIO_WritePin>
HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_RESET);
 80069a4:	2200      	movs	r2, #0
 80069a6:	2180      	movs	r1, #128	; 0x80
 80069a8:	4852      	ldr	r0, [pc, #328]	; (8006af4 <ILI9341_Draw_Pixel+0x188>)
 80069aa:	f7fc ffed 	bl	8003988 <HAL_GPIO_WritePin>
ILI9341_SPI_Send(0x2A);
 80069ae:	202a      	movs	r0, #42	; 0x2a
 80069b0:	f7ff fd00 	bl	80063b4 <ILI9341_SPI_Send>
HAL_GPIO_WritePin(LCD_DC_PORT, LCD_DC_PIN, GPIO_PIN_SET);	
 80069b4:	2201      	movs	r2, #1
 80069b6:	2140      	movs	r1, #64	; 0x40
 80069b8:	484e      	ldr	r0, [pc, #312]	; (8006af4 <ILI9341_Draw_Pixel+0x188>)
 80069ba:	f7fc ffe5 	bl	8003988 <HAL_GPIO_WritePin>
HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_SET);		
 80069be:	2201      	movs	r2, #1
 80069c0:	2180      	movs	r1, #128	; 0x80
 80069c2:	484c      	ldr	r0, [pc, #304]	; (8006af4 <ILI9341_Draw_Pixel+0x188>)
 80069c4:	f7fc ffe0 	bl	8003988 <HAL_GPIO_WritePin>

//XDATA
HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_RESET);	
 80069c8:	2200      	movs	r2, #0
 80069ca:	2180      	movs	r1, #128	; 0x80
 80069cc:	4849      	ldr	r0, [pc, #292]	; (8006af4 <ILI9341_Draw_Pixel+0x188>)
 80069ce:	f7fc ffdb 	bl	8003988 <HAL_GPIO_WritePin>
unsigned char Temp_Buffer[4] = {X>>8,X, (X+1)>>8, (X+1)};
 80069d2:	88fb      	ldrh	r3, [r7, #6]
 80069d4:	0a1b      	lsrs	r3, r3, #8
 80069d6:	b29b      	uxth	r3, r3
 80069d8:	b2db      	uxtb	r3, r3
 80069da:	753b      	strb	r3, [r7, #20]
 80069dc:	88fb      	ldrh	r3, [r7, #6]
 80069de:	b2db      	uxtb	r3, r3
 80069e0:	757b      	strb	r3, [r7, #21]
 80069e2:	88fb      	ldrh	r3, [r7, #6]
 80069e4:	3301      	adds	r3, #1
 80069e6:	121b      	asrs	r3, r3, #8
 80069e8:	b2db      	uxtb	r3, r3
 80069ea:	75bb      	strb	r3, [r7, #22]
 80069ec:	88fb      	ldrh	r3, [r7, #6]
 80069ee:	b2db      	uxtb	r3, r3
 80069f0:	3301      	adds	r3, #1
 80069f2:	b2db      	uxtb	r3, r3
 80069f4:	75fb      	strb	r3, [r7, #23]
HAL_SPI_Transmit(HSPI_INSTANCE, Temp_Buffer, 4, 1);
 80069f6:	f107 0114 	add.w	r1, r7, #20
 80069fa:	2301      	movs	r3, #1
 80069fc:	2204      	movs	r2, #4
 80069fe:	483e      	ldr	r0, [pc, #248]	; (8006af8 <ILI9341_Draw_Pixel+0x18c>)
 8006a00:	f7fe f926 	bl	8004c50 <HAL_SPI_Transmit>
HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_SET);
 8006a04:	2201      	movs	r2, #1
 8006a06:	2180      	movs	r1, #128	; 0x80
 8006a08:	483a      	ldr	r0, [pc, #232]	; (8006af4 <ILI9341_Draw_Pixel+0x188>)
 8006a0a:	f7fc ffbd 	bl	8003988 <HAL_GPIO_WritePin>

//ADDRESS
HAL_GPIO_WritePin(LCD_DC_PORT, LCD_DC_PIN, GPIO_PIN_RESET);	
 8006a0e:	2200      	movs	r2, #0
 8006a10:	2140      	movs	r1, #64	; 0x40
 8006a12:	4838      	ldr	r0, [pc, #224]	; (8006af4 <ILI9341_Draw_Pixel+0x188>)
 8006a14:	f7fc ffb8 	bl	8003988 <HAL_GPIO_WritePin>
HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_RESET);	
 8006a18:	2200      	movs	r2, #0
 8006a1a:	2180      	movs	r1, #128	; 0x80
 8006a1c:	4835      	ldr	r0, [pc, #212]	; (8006af4 <ILI9341_Draw_Pixel+0x188>)
 8006a1e:	f7fc ffb3 	bl	8003988 <HAL_GPIO_WritePin>
ILI9341_SPI_Send(0x2B);
 8006a22:	202b      	movs	r0, #43	; 0x2b
 8006a24:	f7ff fcc6 	bl	80063b4 <ILI9341_SPI_Send>
HAL_GPIO_WritePin(LCD_DC_PORT, LCD_DC_PIN, GPIO_PIN_SET);			
 8006a28:	2201      	movs	r2, #1
 8006a2a:	2140      	movs	r1, #64	; 0x40
 8006a2c:	4831      	ldr	r0, [pc, #196]	; (8006af4 <ILI9341_Draw_Pixel+0x188>)
 8006a2e:	f7fc ffab 	bl	8003988 <HAL_GPIO_WritePin>
HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_SET);			
 8006a32:	2201      	movs	r2, #1
 8006a34:	2180      	movs	r1, #128	; 0x80
 8006a36:	482f      	ldr	r0, [pc, #188]	; (8006af4 <ILI9341_Draw_Pixel+0x188>)
 8006a38:	f7fc ffa6 	bl	8003988 <HAL_GPIO_WritePin>

//YDATA
HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_RESET);
 8006a3c:	2200      	movs	r2, #0
 8006a3e:	2180      	movs	r1, #128	; 0x80
 8006a40:	482c      	ldr	r0, [pc, #176]	; (8006af4 <ILI9341_Draw_Pixel+0x188>)
 8006a42:	f7fc ffa1 	bl	8003988 <HAL_GPIO_WritePin>
unsigned char Temp_Buffer1[4] = {Y>>8,Y, (Y+1)>>8, (Y+1)};
 8006a46:	88bb      	ldrh	r3, [r7, #4]
 8006a48:	0a1b      	lsrs	r3, r3, #8
 8006a4a:	b29b      	uxth	r3, r3
 8006a4c:	b2db      	uxtb	r3, r3
 8006a4e:	743b      	strb	r3, [r7, #16]
 8006a50:	88bb      	ldrh	r3, [r7, #4]
 8006a52:	b2db      	uxtb	r3, r3
 8006a54:	747b      	strb	r3, [r7, #17]
 8006a56:	88bb      	ldrh	r3, [r7, #4]
 8006a58:	3301      	adds	r3, #1
 8006a5a:	121b      	asrs	r3, r3, #8
 8006a5c:	b2db      	uxtb	r3, r3
 8006a5e:	74bb      	strb	r3, [r7, #18]
 8006a60:	88bb      	ldrh	r3, [r7, #4]
 8006a62:	b2db      	uxtb	r3, r3
 8006a64:	3301      	adds	r3, #1
 8006a66:	b2db      	uxtb	r3, r3
 8006a68:	74fb      	strb	r3, [r7, #19]
HAL_SPI_Transmit(HSPI_INSTANCE, Temp_Buffer1, 4, 1);
 8006a6a:	f107 0110 	add.w	r1, r7, #16
 8006a6e:	2301      	movs	r3, #1
 8006a70:	2204      	movs	r2, #4
 8006a72:	4821      	ldr	r0, [pc, #132]	; (8006af8 <ILI9341_Draw_Pixel+0x18c>)
 8006a74:	f7fe f8ec 	bl	8004c50 <HAL_SPI_Transmit>
HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_SET);
 8006a78:	2201      	movs	r2, #1
 8006a7a:	2180      	movs	r1, #128	; 0x80
 8006a7c:	481d      	ldr	r0, [pc, #116]	; (8006af4 <ILI9341_Draw_Pixel+0x188>)
 8006a7e:	f7fc ff83 	bl	8003988 <HAL_GPIO_WritePin>

//ADDRESS	
HAL_GPIO_WritePin(LCD_DC_PORT, LCD_DC_PIN, GPIO_PIN_RESET);	
 8006a82:	2200      	movs	r2, #0
 8006a84:	2140      	movs	r1, #64	; 0x40
 8006a86:	481b      	ldr	r0, [pc, #108]	; (8006af4 <ILI9341_Draw_Pixel+0x188>)
 8006a88:	f7fc ff7e 	bl	8003988 <HAL_GPIO_WritePin>
HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_RESET);	
 8006a8c:	2200      	movs	r2, #0
 8006a8e:	2180      	movs	r1, #128	; 0x80
 8006a90:	4818      	ldr	r0, [pc, #96]	; (8006af4 <ILI9341_Draw_Pixel+0x188>)
 8006a92:	f7fc ff79 	bl	8003988 <HAL_GPIO_WritePin>
ILI9341_SPI_Send(0x2C);
 8006a96:	202c      	movs	r0, #44	; 0x2c
 8006a98:	f7ff fc8c 	bl	80063b4 <ILI9341_SPI_Send>
HAL_GPIO_WritePin(LCD_DC_PORT, LCD_DC_PIN, GPIO_PIN_SET);			
 8006a9c:	2201      	movs	r2, #1
 8006a9e:	2140      	movs	r1, #64	; 0x40
 8006aa0:	4814      	ldr	r0, [pc, #80]	; (8006af4 <ILI9341_Draw_Pixel+0x188>)
 8006aa2:	f7fc ff71 	bl	8003988 <HAL_GPIO_WritePin>
HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_SET);			
 8006aa6:	2201      	movs	r2, #1
 8006aa8:	2180      	movs	r1, #128	; 0x80
 8006aaa:	4812      	ldr	r0, [pc, #72]	; (8006af4 <ILI9341_Draw_Pixel+0x188>)
 8006aac:	f7fc ff6c 	bl	8003988 <HAL_GPIO_WritePin>

//COLOUR	
HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_RESET);
 8006ab0:	2200      	movs	r2, #0
 8006ab2:	2180      	movs	r1, #128	; 0x80
 8006ab4:	480f      	ldr	r0, [pc, #60]	; (8006af4 <ILI9341_Draw_Pixel+0x188>)
 8006ab6:	f7fc ff67 	bl	8003988 <HAL_GPIO_WritePin>
unsigned char Temp_Buffer2[2] = {Colour>>8, Colour};
 8006aba:	887b      	ldrh	r3, [r7, #2]
 8006abc:	0a1b      	lsrs	r3, r3, #8
 8006abe:	b29b      	uxth	r3, r3
 8006ac0:	b2db      	uxtb	r3, r3
 8006ac2:	733b      	strb	r3, [r7, #12]
 8006ac4:	887b      	ldrh	r3, [r7, #2]
 8006ac6:	b2db      	uxtb	r3, r3
 8006ac8:	737b      	strb	r3, [r7, #13]
HAL_SPI_Transmit(HSPI_INSTANCE, Temp_Buffer2, 2, 1);
 8006aca:	f107 010c 	add.w	r1, r7, #12
 8006ace:	2301      	movs	r3, #1
 8006ad0:	2202      	movs	r2, #2
 8006ad2:	4809      	ldr	r0, [pc, #36]	; (8006af8 <ILI9341_Draw_Pixel+0x18c>)
 8006ad4:	f7fe f8bc 	bl	8004c50 <HAL_SPI_Transmit>
HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_SET);
 8006ad8:	2201      	movs	r2, #1
 8006ada:	2180      	movs	r1, #128	; 0x80
 8006adc:	4805      	ldr	r0, [pc, #20]	; (8006af4 <ILI9341_Draw_Pixel+0x188>)
 8006ade:	f7fc ff53 	bl	8003988 <HAL_GPIO_WritePin>
 8006ae2:	e000      	b.n	8006ae6 <ILI9341_Draw_Pixel+0x17a>
if((X >=LCD_WIDTH) || (Y >=LCD_HEIGHT)) return;	//OUT OF BOUNDS!
 8006ae4:	bf00      	nop
	
}
 8006ae6:	3718      	adds	r7, #24
 8006ae8:	46bd      	mov	sp, r7
 8006aea:	bd80      	pop	{r7, pc}
 8006aec:	20000012 	.word	0x20000012
 8006af0:	20000010 	.word	0x20000010
 8006af4:	48000400 	.word	0x48000400
 8006af8:	200001d4 	.word	0x200001d4

08006afc <ILI9341_Draw_Rectangle>:
//Rectangle is hollow. X and Y positions mark the upper left corner of rectangle
//As with all other draw calls x0 and y0 locations dependant on screen orientation
//

void ILI9341_Draw_Rectangle(uint16_t X, uint16_t Y, uint16_t Width, uint16_t Height, uint16_t Colour)
{
 8006afc:	b590      	push	{r4, r7, lr}
 8006afe:	b083      	sub	sp, #12
 8006b00:	af00      	add	r7, sp, #0
 8006b02:	4604      	mov	r4, r0
 8006b04:	4608      	mov	r0, r1
 8006b06:	4611      	mov	r1, r2
 8006b08:	461a      	mov	r2, r3
 8006b0a:	4623      	mov	r3, r4
 8006b0c:	80fb      	strh	r3, [r7, #6]
 8006b0e:	4603      	mov	r3, r0
 8006b10:	80bb      	strh	r3, [r7, #4]
 8006b12:	460b      	mov	r3, r1
 8006b14:	807b      	strh	r3, [r7, #2]
 8006b16:	4613      	mov	r3, r2
 8006b18:	803b      	strh	r3, [r7, #0]
if((X >=LCD_WIDTH) || (Y >=LCD_HEIGHT)) return;
 8006b1a:	4b25      	ldr	r3, [pc, #148]	; (8006bb0 <ILI9341_Draw_Rectangle+0xb4>)
 8006b1c:	881b      	ldrh	r3, [r3, #0]
 8006b1e:	b29b      	uxth	r3, r3
 8006b20:	88fa      	ldrh	r2, [r7, #6]
 8006b22:	429a      	cmp	r2, r3
 8006b24:	d23f      	bcs.n	8006ba6 <ILI9341_Draw_Rectangle+0xaa>
 8006b26:	4b23      	ldr	r3, [pc, #140]	; (8006bb4 <ILI9341_Draw_Rectangle+0xb8>)
 8006b28:	881b      	ldrh	r3, [r3, #0]
 8006b2a:	b29b      	uxth	r3, r3
 8006b2c:	88ba      	ldrh	r2, [r7, #4]
 8006b2e:	429a      	cmp	r2, r3
 8006b30:	d239      	bcs.n	8006ba6 <ILI9341_Draw_Rectangle+0xaa>
if((X+Width-1)>=LCD_WIDTH)
 8006b32:	88fa      	ldrh	r2, [r7, #6]
 8006b34:	887b      	ldrh	r3, [r7, #2]
 8006b36:	4413      	add	r3, r2
 8006b38:	3b01      	subs	r3, #1
 8006b3a:	4a1d      	ldr	r2, [pc, #116]	; (8006bb0 <ILI9341_Draw_Rectangle+0xb4>)
 8006b3c:	8812      	ldrh	r2, [r2, #0]
 8006b3e:	b292      	uxth	r2, r2
 8006b40:	4293      	cmp	r3, r2
 8006b42:	db05      	blt.n	8006b50 <ILI9341_Draw_Rectangle+0x54>
	{
		Width=LCD_WIDTH-X;
 8006b44:	4b1a      	ldr	r3, [pc, #104]	; (8006bb0 <ILI9341_Draw_Rectangle+0xb4>)
 8006b46:	881b      	ldrh	r3, [r3, #0]
 8006b48:	b29a      	uxth	r2, r3
 8006b4a:	88fb      	ldrh	r3, [r7, #6]
 8006b4c:	1ad3      	subs	r3, r2, r3
 8006b4e:	807b      	strh	r3, [r7, #2]
	}
if((Y+Height-1)>=LCD_HEIGHT)
 8006b50:	88ba      	ldrh	r2, [r7, #4]
 8006b52:	883b      	ldrh	r3, [r7, #0]
 8006b54:	4413      	add	r3, r2
 8006b56:	3b01      	subs	r3, #1
 8006b58:	4a16      	ldr	r2, [pc, #88]	; (8006bb4 <ILI9341_Draw_Rectangle+0xb8>)
 8006b5a:	8812      	ldrh	r2, [r2, #0]
 8006b5c:	b292      	uxth	r2, r2
 8006b5e:	4293      	cmp	r3, r2
 8006b60:	db05      	blt.n	8006b6e <ILI9341_Draw_Rectangle+0x72>
	{
		Height=LCD_HEIGHT-Y;
 8006b62:	4b14      	ldr	r3, [pc, #80]	; (8006bb4 <ILI9341_Draw_Rectangle+0xb8>)
 8006b64:	881b      	ldrh	r3, [r3, #0]
 8006b66:	b29a      	uxth	r2, r3
 8006b68:	88bb      	ldrh	r3, [r7, #4]
 8006b6a:	1ad3      	subs	r3, r2, r3
 8006b6c:	803b      	strh	r3, [r7, #0]
	}
ILI9341_Set_Address(X, Y, X+Width-1, Y+Height-1);
 8006b6e:	88fa      	ldrh	r2, [r7, #6]
 8006b70:	887b      	ldrh	r3, [r7, #2]
 8006b72:	4413      	add	r3, r2
 8006b74:	b29b      	uxth	r3, r3
 8006b76:	3b01      	subs	r3, #1
 8006b78:	b29c      	uxth	r4, r3
 8006b7a:	88ba      	ldrh	r2, [r7, #4]
 8006b7c:	883b      	ldrh	r3, [r7, #0]
 8006b7e:	4413      	add	r3, r2
 8006b80:	b29b      	uxth	r3, r3
 8006b82:	3b01      	subs	r3, #1
 8006b84:	b29b      	uxth	r3, r3
 8006b86:	88b9      	ldrh	r1, [r7, #4]
 8006b88:	88f8      	ldrh	r0, [r7, #6]
 8006b8a:	4622      	mov	r2, r4
 8006b8c:	f7ff fc60 	bl	8006450 <ILI9341_Set_Address>
ILI9341_Draw_Colour_Burst(Colour, Height*Width);
 8006b90:	883b      	ldrh	r3, [r7, #0]
 8006b92:	887a      	ldrh	r2, [r7, #2]
 8006b94:	fb02 f303 	mul.w	r3, r2, r3
 8006b98:	461a      	mov	r2, r3
 8006b9a:	8b3b      	ldrh	r3, [r7, #24]
 8006b9c:	4611      	mov	r1, r2
 8006b9e:	4618      	mov	r0, r3
 8006ba0:	f7ff fe28 	bl	80067f4 <ILI9341_Draw_Colour_Burst>
 8006ba4:	e000      	b.n	8006ba8 <ILI9341_Draw_Rectangle+0xac>
if((X >=LCD_WIDTH) || (Y >=LCD_HEIGHT)) return;
 8006ba6:	bf00      	nop
}
 8006ba8:	370c      	adds	r7, #12
 8006baa:	46bd      	mov	sp, r7
 8006bac:	bd90      	pop	{r4, r7, pc}
 8006bae:	bf00      	nop
 8006bb0:	20000012 	.word	0x20000012
 8006bb4:	20000010 	.word	0x20000010

08006bb8 <__errno>:
 8006bb8:	4b01      	ldr	r3, [pc, #4]	; (8006bc0 <__errno+0x8>)
 8006bba:	6818      	ldr	r0, [r3, #0]
 8006bbc:	4770      	bx	lr
 8006bbe:	bf00      	nop
 8006bc0:	20000014 	.word	0x20000014

08006bc4 <__libc_init_array>:
 8006bc4:	b570      	push	{r4, r5, r6, lr}
 8006bc6:	4e0d      	ldr	r6, [pc, #52]	; (8006bfc <__libc_init_array+0x38>)
 8006bc8:	4c0d      	ldr	r4, [pc, #52]	; (8006c00 <__libc_init_array+0x3c>)
 8006bca:	1ba4      	subs	r4, r4, r6
 8006bcc:	10a4      	asrs	r4, r4, #2
 8006bce:	2500      	movs	r5, #0
 8006bd0:	42a5      	cmp	r5, r4
 8006bd2:	d109      	bne.n	8006be8 <__libc_init_array+0x24>
 8006bd4:	4e0b      	ldr	r6, [pc, #44]	; (8006c04 <__libc_init_array+0x40>)
 8006bd6:	4c0c      	ldr	r4, [pc, #48]	; (8006c08 <__libc_init_array+0x44>)
 8006bd8:	f000 fc88 	bl	80074ec <_init>
 8006bdc:	1ba4      	subs	r4, r4, r6
 8006bde:	10a4      	asrs	r4, r4, #2
 8006be0:	2500      	movs	r5, #0
 8006be2:	42a5      	cmp	r5, r4
 8006be4:	d105      	bne.n	8006bf2 <__libc_init_array+0x2e>
 8006be6:	bd70      	pop	{r4, r5, r6, pc}
 8006be8:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8006bec:	4798      	blx	r3
 8006bee:	3501      	adds	r5, #1
 8006bf0:	e7ee      	b.n	8006bd0 <__libc_init_array+0xc>
 8006bf2:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8006bf6:	4798      	blx	r3
 8006bf8:	3501      	adds	r5, #1
 8006bfa:	e7f2      	b.n	8006be2 <__libc_init_array+0x1e>
 8006bfc:	080077e8 	.word	0x080077e8
 8006c00:	080077e8 	.word	0x080077e8
 8006c04:	080077e8 	.word	0x080077e8
 8006c08:	080077ec 	.word	0x080077ec

08006c0c <memset>:
 8006c0c:	4402      	add	r2, r0
 8006c0e:	4603      	mov	r3, r0
 8006c10:	4293      	cmp	r3, r2
 8006c12:	d100      	bne.n	8006c16 <memset+0xa>
 8006c14:	4770      	bx	lr
 8006c16:	f803 1b01 	strb.w	r1, [r3], #1
 8006c1a:	e7f9      	b.n	8006c10 <memset+0x4>

08006c1c <_puts_r>:
 8006c1c:	b570      	push	{r4, r5, r6, lr}
 8006c1e:	460e      	mov	r6, r1
 8006c20:	4605      	mov	r5, r0
 8006c22:	b118      	cbz	r0, 8006c2c <_puts_r+0x10>
 8006c24:	6983      	ldr	r3, [r0, #24]
 8006c26:	b90b      	cbnz	r3, 8006c2c <_puts_r+0x10>
 8006c28:	f000 fa0c 	bl	8007044 <__sinit>
 8006c2c:	69ab      	ldr	r3, [r5, #24]
 8006c2e:	68ac      	ldr	r4, [r5, #8]
 8006c30:	b913      	cbnz	r3, 8006c38 <_puts_r+0x1c>
 8006c32:	4628      	mov	r0, r5
 8006c34:	f000 fa06 	bl	8007044 <__sinit>
 8006c38:	4b23      	ldr	r3, [pc, #140]	; (8006cc8 <_puts_r+0xac>)
 8006c3a:	429c      	cmp	r4, r3
 8006c3c:	d117      	bne.n	8006c6e <_puts_r+0x52>
 8006c3e:	686c      	ldr	r4, [r5, #4]
 8006c40:	89a3      	ldrh	r3, [r4, #12]
 8006c42:	071b      	lsls	r3, r3, #28
 8006c44:	d51d      	bpl.n	8006c82 <_puts_r+0x66>
 8006c46:	6923      	ldr	r3, [r4, #16]
 8006c48:	b1db      	cbz	r3, 8006c82 <_puts_r+0x66>
 8006c4a:	3e01      	subs	r6, #1
 8006c4c:	68a3      	ldr	r3, [r4, #8]
 8006c4e:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8006c52:	3b01      	subs	r3, #1
 8006c54:	60a3      	str	r3, [r4, #8]
 8006c56:	b9e9      	cbnz	r1, 8006c94 <_puts_r+0x78>
 8006c58:	2b00      	cmp	r3, #0
 8006c5a:	da2e      	bge.n	8006cba <_puts_r+0x9e>
 8006c5c:	4622      	mov	r2, r4
 8006c5e:	210a      	movs	r1, #10
 8006c60:	4628      	mov	r0, r5
 8006c62:	f000 f83f 	bl	8006ce4 <__swbuf_r>
 8006c66:	3001      	adds	r0, #1
 8006c68:	d011      	beq.n	8006c8e <_puts_r+0x72>
 8006c6a:	200a      	movs	r0, #10
 8006c6c:	e011      	b.n	8006c92 <_puts_r+0x76>
 8006c6e:	4b17      	ldr	r3, [pc, #92]	; (8006ccc <_puts_r+0xb0>)
 8006c70:	429c      	cmp	r4, r3
 8006c72:	d101      	bne.n	8006c78 <_puts_r+0x5c>
 8006c74:	68ac      	ldr	r4, [r5, #8]
 8006c76:	e7e3      	b.n	8006c40 <_puts_r+0x24>
 8006c78:	4b15      	ldr	r3, [pc, #84]	; (8006cd0 <_puts_r+0xb4>)
 8006c7a:	429c      	cmp	r4, r3
 8006c7c:	bf08      	it	eq
 8006c7e:	68ec      	ldreq	r4, [r5, #12]
 8006c80:	e7de      	b.n	8006c40 <_puts_r+0x24>
 8006c82:	4621      	mov	r1, r4
 8006c84:	4628      	mov	r0, r5
 8006c86:	f000 f87f 	bl	8006d88 <__swsetup_r>
 8006c8a:	2800      	cmp	r0, #0
 8006c8c:	d0dd      	beq.n	8006c4a <_puts_r+0x2e>
 8006c8e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8006c92:	bd70      	pop	{r4, r5, r6, pc}
 8006c94:	2b00      	cmp	r3, #0
 8006c96:	da04      	bge.n	8006ca2 <_puts_r+0x86>
 8006c98:	69a2      	ldr	r2, [r4, #24]
 8006c9a:	429a      	cmp	r2, r3
 8006c9c:	dc06      	bgt.n	8006cac <_puts_r+0x90>
 8006c9e:	290a      	cmp	r1, #10
 8006ca0:	d004      	beq.n	8006cac <_puts_r+0x90>
 8006ca2:	6823      	ldr	r3, [r4, #0]
 8006ca4:	1c5a      	adds	r2, r3, #1
 8006ca6:	6022      	str	r2, [r4, #0]
 8006ca8:	7019      	strb	r1, [r3, #0]
 8006caa:	e7cf      	b.n	8006c4c <_puts_r+0x30>
 8006cac:	4622      	mov	r2, r4
 8006cae:	4628      	mov	r0, r5
 8006cb0:	f000 f818 	bl	8006ce4 <__swbuf_r>
 8006cb4:	3001      	adds	r0, #1
 8006cb6:	d1c9      	bne.n	8006c4c <_puts_r+0x30>
 8006cb8:	e7e9      	b.n	8006c8e <_puts_r+0x72>
 8006cba:	6823      	ldr	r3, [r4, #0]
 8006cbc:	200a      	movs	r0, #10
 8006cbe:	1c5a      	adds	r2, r3, #1
 8006cc0:	6022      	str	r2, [r4, #0]
 8006cc2:	7018      	strb	r0, [r3, #0]
 8006cc4:	e7e5      	b.n	8006c92 <_puts_r+0x76>
 8006cc6:	bf00      	nop
 8006cc8:	080077a8 	.word	0x080077a8
 8006ccc:	080077c8 	.word	0x080077c8
 8006cd0:	08007788 	.word	0x08007788

08006cd4 <puts>:
 8006cd4:	4b02      	ldr	r3, [pc, #8]	; (8006ce0 <puts+0xc>)
 8006cd6:	4601      	mov	r1, r0
 8006cd8:	6818      	ldr	r0, [r3, #0]
 8006cda:	f7ff bf9f 	b.w	8006c1c <_puts_r>
 8006cde:	bf00      	nop
 8006ce0:	20000014 	.word	0x20000014

08006ce4 <__swbuf_r>:
 8006ce4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006ce6:	460e      	mov	r6, r1
 8006ce8:	4614      	mov	r4, r2
 8006cea:	4605      	mov	r5, r0
 8006cec:	b118      	cbz	r0, 8006cf6 <__swbuf_r+0x12>
 8006cee:	6983      	ldr	r3, [r0, #24]
 8006cf0:	b90b      	cbnz	r3, 8006cf6 <__swbuf_r+0x12>
 8006cf2:	f000 f9a7 	bl	8007044 <__sinit>
 8006cf6:	4b21      	ldr	r3, [pc, #132]	; (8006d7c <__swbuf_r+0x98>)
 8006cf8:	429c      	cmp	r4, r3
 8006cfa:	d12a      	bne.n	8006d52 <__swbuf_r+0x6e>
 8006cfc:	686c      	ldr	r4, [r5, #4]
 8006cfe:	69a3      	ldr	r3, [r4, #24]
 8006d00:	60a3      	str	r3, [r4, #8]
 8006d02:	89a3      	ldrh	r3, [r4, #12]
 8006d04:	071a      	lsls	r2, r3, #28
 8006d06:	d52e      	bpl.n	8006d66 <__swbuf_r+0x82>
 8006d08:	6923      	ldr	r3, [r4, #16]
 8006d0a:	b363      	cbz	r3, 8006d66 <__swbuf_r+0x82>
 8006d0c:	6923      	ldr	r3, [r4, #16]
 8006d0e:	6820      	ldr	r0, [r4, #0]
 8006d10:	1ac0      	subs	r0, r0, r3
 8006d12:	6963      	ldr	r3, [r4, #20]
 8006d14:	b2f6      	uxtb	r6, r6
 8006d16:	4283      	cmp	r3, r0
 8006d18:	4637      	mov	r7, r6
 8006d1a:	dc04      	bgt.n	8006d26 <__swbuf_r+0x42>
 8006d1c:	4621      	mov	r1, r4
 8006d1e:	4628      	mov	r0, r5
 8006d20:	f000 f926 	bl	8006f70 <_fflush_r>
 8006d24:	bb28      	cbnz	r0, 8006d72 <__swbuf_r+0x8e>
 8006d26:	68a3      	ldr	r3, [r4, #8]
 8006d28:	3b01      	subs	r3, #1
 8006d2a:	60a3      	str	r3, [r4, #8]
 8006d2c:	6823      	ldr	r3, [r4, #0]
 8006d2e:	1c5a      	adds	r2, r3, #1
 8006d30:	6022      	str	r2, [r4, #0]
 8006d32:	701e      	strb	r6, [r3, #0]
 8006d34:	6963      	ldr	r3, [r4, #20]
 8006d36:	3001      	adds	r0, #1
 8006d38:	4283      	cmp	r3, r0
 8006d3a:	d004      	beq.n	8006d46 <__swbuf_r+0x62>
 8006d3c:	89a3      	ldrh	r3, [r4, #12]
 8006d3e:	07db      	lsls	r3, r3, #31
 8006d40:	d519      	bpl.n	8006d76 <__swbuf_r+0x92>
 8006d42:	2e0a      	cmp	r6, #10
 8006d44:	d117      	bne.n	8006d76 <__swbuf_r+0x92>
 8006d46:	4621      	mov	r1, r4
 8006d48:	4628      	mov	r0, r5
 8006d4a:	f000 f911 	bl	8006f70 <_fflush_r>
 8006d4e:	b190      	cbz	r0, 8006d76 <__swbuf_r+0x92>
 8006d50:	e00f      	b.n	8006d72 <__swbuf_r+0x8e>
 8006d52:	4b0b      	ldr	r3, [pc, #44]	; (8006d80 <__swbuf_r+0x9c>)
 8006d54:	429c      	cmp	r4, r3
 8006d56:	d101      	bne.n	8006d5c <__swbuf_r+0x78>
 8006d58:	68ac      	ldr	r4, [r5, #8]
 8006d5a:	e7d0      	b.n	8006cfe <__swbuf_r+0x1a>
 8006d5c:	4b09      	ldr	r3, [pc, #36]	; (8006d84 <__swbuf_r+0xa0>)
 8006d5e:	429c      	cmp	r4, r3
 8006d60:	bf08      	it	eq
 8006d62:	68ec      	ldreq	r4, [r5, #12]
 8006d64:	e7cb      	b.n	8006cfe <__swbuf_r+0x1a>
 8006d66:	4621      	mov	r1, r4
 8006d68:	4628      	mov	r0, r5
 8006d6a:	f000 f80d 	bl	8006d88 <__swsetup_r>
 8006d6e:	2800      	cmp	r0, #0
 8006d70:	d0cc      	beq.n	8006d0c <__swbuf_r+0x28>
 8006d72:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 8006d76:	4638      	mov	r0, r7
 8006d78:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006d7a:	bf00      	nop
 8006d7c:	080077a8 	.word	0x080077a8
 8006d80:	080077c8 	.word	0x080077c8
 8006d84:	08007788 	.word	0x08007788

08006d88 <__swsetup_r>:
 8006d88:	4b32      	ldr	r3, [pc, #200]	; (8006e54 <__swsetup_r+0xcc>)
 8006d8a:	b570      	push	{r4, r5, r6, lr}
 8006d8c:	681d      	ldr	r5, [r3, #0]
 8006d8e:	4606      	mov	r6, r0
 8006d90:	460c      	mov	r4, r1
 8006d92:	b125      	cbz	r5, 8006d9e <__swsetup_r+0x16>
 8006d94:	69ab      	ldr	r3, [r5, #24]
 8006d96:	b913      	cbnz	r3, 8006d9e <__swsetup_r+0x16>
 8006d98:	4628      	mov	r0, r5
 8006d9a:	f000 f953 	bl	8007044 <__sinit>
 8006d9e:	4b2e      	ldr	r3, [pc, #184]	; (8006e58 <__swsetup_r+0xd0>)
 8006da0:	429c      	cmp	r4, r3
 8006da2:	d10f      	bne.n	8006dc4 <__swsetup_r+0x3c>
 8006da4:	686c      	ldr	r4, [r5, #4]
 8006da6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006daa:	b29a      	uxth	r2, r3
 8006dac:	0715      	lsls	r5, r2, #28
 8006dae:	d42c      	bmi.n	8006e0a <__swsetup_r+0x82>
 8006db0:	06d0      	lsls	r0, r2, #27
 8006db2:	d411      	bmi.n	8006dd8 <__swsetup_r+0x50>
 8006db4:	2209      	movs	r2, #9
 8006db6:	6032      	str	r2, [r6, #0]
 8006db8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006dbc:	81a3      	strh	r3, [r4, #12]
 8006dbe:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8006dc2:	e03e      	b.n	8006e42 <__swsetup_r+0xba>
 8006dc4:	4b25      	ldr	r3, [pc, #148]	; (8006e5c <__swsetup_r+0xd4>)
 8006dc6:	429c      	cmp	r4, r3
 8006dc8:	d101      	bne.n	8006dce <__swsetup_r+0x46>
 8006dca:	68ac      	ldr	r4, [r5, #8]
 8006dcc:	e7eb      	b.n	8006da6 <__swsetup_r+0x1e>
 8006dce:	4b24      	ldr	r3, [pc, #144]	; (8006e60 <__swsetup_r+0xd8>)
 8006dd0:	429c      	cmp	r4, r3
 8006dd2:	bf08      	it	eq
 8006dd4:	68ec      	ldreq	r4, [r5, #12]
 8006dd6:	e7e6      	b.n	8006da6 <__swsetup_r+0x1e>
 8006dd8:	0751      	lsls	r1, r2, #29
 8006dda:	d512      	bpl.n	8006e02 <__swsetup_r+0x7a>
 8006ddc:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8006dde:	b141      	cbz	r1, 8006df2 <__swsetup_r+0x6a>
 8006de0:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8006de4:	4299      	cmp	r1, r3
 8006de6:	d002      	beq.n	8006dee <__swsetup_r+0x66>
 8006de8:	4630      	mov	r0, r6
 8006dea:	f000 fa19 	bl	8007220 <_free_r>
 8006dee:	2300      	movs	r3, #0
 8006df0:	6363      	str	r3, [r4, #52]	; 0x34
 8006df2:	89a3      	ldrh	r3, [r4, #12]
 8006df4:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8006df8:	81a3      	strh	r3, [r4, #12]
 8006dfa:	2300      	movs	r3, #0
 8006dfc:	6063      	str	r3, [r4, #4]
 8006dfe:	6923      	ldr	r3, [r4, #16]
 8006e00:	6023      	str	r3, [r4, #0]
 8006e02:	89a3      	ldrh	r3, [r4, #12]
 8006e04:	f043 0308 	orr.w	r3, r3, #8
 8006e08:	81a3      	strh	r3, [r4, #12]
 8006e0a:	6923      	ldr	r3, [r4, #16]
 8006e0c:	b94b      	cbnz	r3, 8006e22 <__swsetup_r+0x9a>
 8006e0e:	89a3      	ldrh	r3, [r4, #12]
 8006e10:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8006e14:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006e18:	d003      	beq.n	8006e22 <__swsetup_r+0x9a>
 8006e1a:	4621      	mov	r1, r4
 8006e1c:	4630      	mov	r0, r6
 8006e1e:	f000 f9bf 	bl	80071a0 <__smakebuf_r>
 8006e22:	89a2      	ldrh	r2, [r4, #12]
 8006e24:	f012 0301 	ands.w	r3, r2, #1
 8006e28:	d00c      	beq.n	8006e44 <__swsetup_r+0xbc>
 8006e2a:	2300      	movs	r3, #0
 8006e2c:	60a3      	str	r3, [r4, #8]
 8006e2e:	6963      	ldr	r3, [r4, #20]
 8006e30:	425b      	negs	r3, r3
 8006e32:	61a3      	str	r3, [r4, #24]
 8006e34:	6923      	ldr	r3, [r4, #16]
 8006e36:	b953      	cbnz	r3, 8006e4e <__swsetup_r+0xc6>
 8006e38:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006e3c:	f013 0080 	ands.w	r0, r3, #128	; 0x80
 8006e40:	d1ba      	bne.n	8006db8 <__swsetup_r+0x30>
 8006e42:	bd70      	pop	{r4, r5, r6, pc}
 8006e44:	0792      	lsls	r2, r2, #30
 8006e46:	bf58      	it	pl
 8006e48:	6963      	ldrpl	r3, [r4, #20]
 8006e4a:	60a3      	str	r3, [r4, #8]
 8006e4c:	e7f2      	b.n	8006e34 <__swsetup_r+0xac>
 8006e4e:	2000      	movs	r0, #0
 8006e50:	e7f7      	b.n	8006e42 <__swsetup_r+0xba>
 8006e52:	bf00      	nop
 8006e54:	20000014 	.word	0x20000014
 8006e58:	080077a8 	.word	0x080077a8
 8006e5c:	080077c8 	.word	0x080077c8
 8006e60:	08007788 	.word	0x08007788

08006e64 <__sflush_r>:
 8006e64:	898a      	ldrh	r2, [r1, #12]
 8006e66:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006e6a:	4605      	mov	r5, r0
 8006e6c:	0710      	lsls	r0, r2, #28
 8006e6e:	460c      	mov	r4, r1
 8006e70:	d458      	bmi.n	8006f24 <__sflush_r+0xc0>
 8006e72:	684b      	ldr	r3, [r1, #4]
 8006e74:	2b00      	cmp	r3, #0
 8006e76:	dc05      	bgt.n	8006e84 <__sflush_r+0x20>
 8006e78:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8006e7a:	2b00      	cmp	r3, #0
 8006e7c:	dc02      	bgt.n	8006e84 <__sflush_r+0x20>
 8006e7e:	2000      	movs	r0, #0
 8006e80:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006e84:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8006e86:	2e00      	cmp	r6, #0
 8006e88:	d0f9      	beq.n	8006e7e <__sflush_r+0x1a>
 8006e8a:	2300      	movs	r3, #0
 8006e8c:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8006e90:	682f      	ldr	r7, [r5, #0]
 8006e92:	6a21      	ldr	r1, [r4, #32]
 8006e94:	602b      	str	r3, [r5, #0]
 8006e96:	d032      	beq.n	8006efe <__sflush_r+0x9a>
 8006e98:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8006e9a:	89a3      	ldrh	r3, [r4, #12]
 8006e9c:	075a      	lsls	r2, r3, #29
 8006e9e:	d505      	bpl.n	8006eac <__sflush_r+0x48>
 8006ea0:	6863      	ldr	r3, [r4, #4]
 8006ea2:	1ac0      	subs	r0, r0, r3
 8006ea4:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8006ea6:	b10b      	cbz	r3, 8006eac <__sflush_r+0x48>
 8006ea8:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8006eaa:	1ac0      	subs	r0, r0, r3
 8006eac:	2300      	movs	r3, #0
 8006eae:	4602      	mov	r2, r0
 8006eb0:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8006eb2:	6a21      	ldr	r1, [r4, #32]
 8006eb4:	4628      	mov	r0, r5
 8006eb6:	47b0      	blx	r6
 8006eb8:	1c43      	adds	r3, r0, #1
 8006eba:	89a3      	ldrh	r3, [r4, #12]
 8006ebc:	d106      	bne.n	8006ecc <__sflush_r+0x68>
 8006ebe:	6829      	ldr	r1, [r5, #0]
 8006ec0:	291d      	cmp	r1, #29
 8006ec2:	d848      	bhi.n	8006f56 <__sflush_r+0xf2>
 8006ec4:	4a29      	ldr	r2, [pc, #164]	; (8006f6c <__sflush_r+0x108>)
 8006ec6:	40ca      	lsrs	r2, r1
 8006ec8:	07d6      	lsls	r6, r2, #31
 8006eca:	d544      	bpl.n	8006f56 <__sflush_r+0xf2>
 8006ecc:	2200      	movs	r2, #0
 8006ece:	6062      	str	r2, [r4, #4]
 8006ed0:	04d9      	lsls	r1, r3, #19
 8006ed2:	6922      	ldr	r2, [r4, #16]
 8006ed4:	6022      	str	r2, [r4, #0]
 8006ed6:	d504      	bpl.n	8006ee2 <__sflush_r+0x7e>
 8006ed8:	1c42      	adds	r2, r0, #1
 8006eda:	d101      	bne.n	8006ee0 <__sflush_r+0x7c>
 8006edc:	682b      	ldr	r3, [r5, #0]
 8006ede:	b903      	cbnz	r3, 8006ee2 <__sflush_r+0x7e>
 8006ee0:	6560      	str	r0, [r4, #84]	; 0x54
 8006ee2:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8006ee4:	602f      	str	r7, [r5, #0]
 8006ee6:	2900      	cmp	r1, #0
 8006ee8:	d0c9      	beq.n	8006e7e <__sflush_r+0x1a>
 8006eea:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8006eee:	4299      	cmp	r1, r3
 8006ef0:	d002      	beq.n	8006ef8 <__sflush_r+0x94>
 8006ef2:	4628      	mov	r0, r5
 8006ef4:	f000 f994 	bl	8007220 <_free_r>
 8006ef8:	2000      	movs	r0, #0
 8006efa:	6360      	str	r0, [r4, #52]	; 0x34
 8006efc:	e7c0      	b.n	8006e80 <__sflush_r+0x1c>
 8006efe:	2301      	movs	r3, #1
 8006f00:	4628      	mov	r0, r5
 8006f02:	47b0      	blx	r6
 8006f04:	1c41      	adds	r1, r0, #1
 8006f06:	d1c8      	bne.n	8006e9a <__sflush_r+0x36>
 8006f08:	682b      	ldr	r3, [r5, #0]
 8006f0a:	2b00      	cmp	r3, #0
 8006f0c:	d0c5      	beq.n	8006e9a <__sflush_r+0x36>
 8006f0e:	2b1d      	cmp	r3, #29
 8006f10:	d001      	beq.n	8006f16 <__sflush_r+0xb2>
 8006f12:	2b16      	cmp	r3, #22
 8006f14:	d101      	bne.n	8006f1a <__sflush_r+0xb6>
 8006f16:	602f      	str	r7, [r5, #0]
 8006f18:	e7b1      	b.n	8006e7e <__sflush_r+0x1a>
 8006f1a:	89a3      	ldrh	r3, [r4, #12]
 8006f1c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006f20:	81a3      	strh	r3, [r4, #12]
 8006f22:	e7ad      	b.n	8006e80 <__sflush_r+0x1c>
 8006f24:	690f      	ldr	r7, [r1, #16]
 8006f26:	2f00      	cmp	r7, #0
 8006f28:	d0a9      	beq.n	8006e7e <__sflush_r+0x1a>
 8006f2a:	0793      	lsls	r3, r2, #30
 8006f2c:	680e      	ldr	r6, [r1, #0]
 8006f2e:	bf08      	it	eq
 8006f30:	694b      	ldreq	r3, [r1, #20]
 8006f32:	600f      	str	r7, [r1, #0]
 8006f34:	bf18      	it	ne
 8006f36:	2300      	movne	r3, #0
 8006f38:	eba6 0807 	sub.w	r8, r6, r7
 8006f3c:	608b      	str	r3, [r1, #8]
 8006f3e:	f1b8 0f00 	cmp.w	r8, #0
 8006f42:	dd9c      	ble.n	8006e7e <__sflush_r+0x1a>
 8006f44:	4643      	mov	r3, r8
 8006f46:	463a      	mov	r2, r7
 8006f48:	6a21      	ldr	r1, [r4, #32]
 8006f4a:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8006f4c:	4628      	mov	r0, r5
 8006f4e:	47b0      	blx	r6
 8006f50:	2800      	cmp	r0, #0
 8006f52:	dc06      	bgt.n	8006f62 <__sflush_r+0xfe>
 8006f54:	89a3      	ldrh	r3, [r4, #12]
 8006f56:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006f5a:	81a3      	strh	r3, [r4, #12]
 8006f5c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8006f60:	e78e      	b.n	8006e80 <__sflush_r+0x1c>
 8006f62:	4407      	add	r7, r0
 8006f64:	eba8 0800 	sub.w	r8, r8, r0
 8006f68:	e7e9      	b.n	8006f3e <__sflush_r+0xda>
 8006f6a:	bf00      	nop
 8006f6c:	20400001 	.word	0x20400001

08006f70 <_fflush_r>:
 8006f70:	b538      	push	{r3, r4, r5, lr}
 8006f72:	690b      	ldr	r3, [r1, #16]
 8006f74:	4605      	mov	r5, r0
 8006f76:	460c      	mov	r4, r1
 8006f78:	b1db      	cbz	r3, 8006fb2 <_fflush_r+0x42>
 8006f7a:	b118      	cbz	r0, 8006f84 <_fflush_r+0x14>
 8006f7c:	6983      	ldr	r3, [r0, #24]
 8006f7e:	b90b      	cbnz	r3, 8006f84 <_fflush_r+0x14>
 8006f80:	f000 f860 	bl	8007044 <__sinit>
 8006f84:	4b0c      	ldr	r3, [pc, #48]	; (8006fb8 <_fflush_r+0x48>)
 8006f86:	429c      	cmp	r4, r3
 8006f88:	d109      	bne.n	8006f9e <_fflush_r+0x2e>
 8006f8a:	686c      	ldr	r4, [r5, #4]
 8006f8c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006f90:	b17b      	cbz	r3, 8006fb2 <_fflush_r+0x42>
 8006f92:	4621      	mov	r1, r4
 8006f94:	4628      	mov	r0, r5
 8006f96:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8006f9a:	f7ff bf63 	b.w	8006e64 <__sflush_r>
 8006f9e:	4b07      	ldr	r3, [pc, #28]	; (8006fbc <_fflush_r+0x4c>)
 8006fa0:	429c      	cmp	r4, r3
 8006fa2:	d101      	bne.n	8006fa8 <_fflush_r+0x38>
 8006fa4:	68ac      	ldr	r4, [r5, #8]
 8006fa6:	e7f1      	b.n	8006f8c <_fflush_r+0x1c>
 8006fa8:	4b05      	ldr	r3, [pc, #20]	; (8006fc0 <_fflush_r+0x50>)
 8006faa:	429c      	cmp	r4, r3
 8006fac:	bf08      	it	eq
 8006fae:	68ec      	ldreq	r4, [r5, #12]
 8006fb0:	e7ec      	b.n	8006f8c <_fflush_r+0x1c>
 8006fb2:	2000      	movs	r0, #0
 8006fb4:	bd38      	pop	{r3, r4, r5, pc}
 8006fb6:	bf00      	nop
 8006fb8:	080077a8 	.word	0x080077a8
 8006fbc:	080077c8 	.word	0x080077c8
 8006fc0:	08007788 	.word	0x08007788

08006fc4 <std>:
 8006fc4:	2300      	movs	r3, #0
 8006fc6:	b510      	push	{r4, lr}
 8006fc8:	4604      	mov	r4, r0
 8006fca:	e9c0 3300 	strd	r3, r3, [r0]
 8006fce:	6083      	str	r3, [r0, #8]
 8006fd0:	8181      	strh	r1, [r0, #12]
 8006fd2:	6643      	str	r3, [r0, #100]	; 0x64
 8006fd4:	81c2      	strh	r2, [r0, #14]
 8006fd6:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8006fda:	6183      	str	r3, [r0, #24]
 8006fdc:	4619      	mov	r1, r3
 8006fde:	2208      	movs	r2, #8
 8006fe0:	305c      	adds	r0, #92	; 0x5c
 8006fe2:	f7ff fe13 	bl	8006c0c <memset>
 8006fe6:	4b05      	ldr	r3, [pc, #20]	; (8006ffc <std+0x38>)
 8006fe8:	6263      	str	r3, [r4, #36]	; 0x24
 8006fea:	4b05      	ldr	r3, [pc, #20]	; (8007000 <std+0x3c>)
 8006fec:	62a3      	str	r3, [r4, #40]	; 0x28
 8006fee:	4b05      	ldr	r3, [pc, #20]	; (8007004 <std+0x40>)
 8006ff0:	62e3      	str	r3, [r4, #44]	; 0x2c
 8006ff2:	4b05      	ldr	r3, [pc, #20]	; (8007008 <std+0x44>)
 8006ff4:	6224      	str	r4, [r4, #32]
 8006ff6:	6323      	str	r3, [r4, #48]	; 0x30
 8006ff8:	bd10      	pop	{r4, pc}
 8006ffa:	bf00      	nop
 8006ffc:	08007391 	.word	0x08007391
 8007000:	080073b3 	.word	0x080073b3
 8007004:	080073eb 	.word	0x080073eb
 8007008:	0800740f 	.word	0x0800740f

0800700c <_cleanup_r>:
 800700c:	4901      	ldr	r1, [pc, #4]	; (8007014 <_cleanup_r+0x8>)
 800700e:	f000 b885 	b.w	800711c <_fwalk_reent>
 8007012:	bf00      	nop
 8007014:	08006f71 	.word	0x08006f71

08007018 <__sfmoreglue>:
 8007018:	b570      	push	{r4, r5, r6, lr}
 800701a:	1e4a      	subs	r2, r1, #1
 800701c:	2568      	movs	r5, #104	; 0x68
 800701e:	4355      	muls	r5, r2
 8007020:	460e      	mov	r6, r1
 8007022:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8007026:	f000 f949 	bl	80072bc <_malloc_r>
 800702a:	4604      	mov	r4, r0
 800702c:	b140      	cbz	r0, 8007040 <__sfmoreglue+0x28>
 800702e:	2100      	movs	r1, #0
 8007030:	e9c0 1600 	strd	r1, r6, [r0]
 8007034:	300c      	adds	r0, #12
 8007036:	60a0      	str	r0, [r4, #8]
 8007038:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800703c:	f7ff fde6 	bl	8006c0c <memset>
 8007040:	4620      	mov	r0, r4
 8007042:	bd70      	pop	{r4, r5, r6, pc}

08007044 <__sinit>:
 8007044:	6983      	ldr	r3, [r0, #24]
 8007046:	b510      	push	{r4, lr}
 8007048:	4604      	mov	r4, r0
 800704a:	bb33      	cbnz	r3, 800709a <__sinit+0x56>
 800704c:	e9c0 3312 	strd	r3, r3, [r0, #72]	; 0x48
 8007050:	6503      	str	r3, [r0, #80]	; 0x50
 8007052:	4b12      	ldr	r3, [pc, #72]	; (800709c <__sinit+0x58>)
 8007054:	4a12      	ldr	r2, [pc, #72]	; (80070a0 <__sinit+0x5c>)
 8007056:	681b      	ldr	r3, [r3, #0]
 8007058:	6282      	str	r2, [r0, #40]	; 0x28
 800705a:	4298      	cmp	r0, r3
 800705c:	bf04      	itt	eq
 800705e:	2301      	moveq	r3, #1
 8007060:	6183      	streq	r3, [r0, #24]
 8007062:	f000 f81f 	bl	80070a4 <__sfp>
 8007066:	6060      	str	r0, [r4, #4]
 8007068:	4620      	mov	r0, r4
 800706a:	f000 f81b 	bl	80070a4 <__sfp>
 800706e:	60a0      	str	r0, [r4, #8]
 8007070:	4620      	mov	r0, r4
 8007072:	f000 f817 	bl	80070a4 <__sfp>
 8007076:	2200      	movs	r2, #0
 8007078:	60e0      	str	r0, [r4, #12]
 800707a:	2104      	movs	r1, #4
 800707c:	6860      	ldr	r0, [r4, #4]
 800707e:	f7ff ffa1 	bl	8006fc4 <std>
 8007082:	2201      	movs	r2, #1
 8007084:	2109      	movs	r1, #9
 8007086:	68a0      	ldr	r0, [r4, #8]
 8007088:	f7ff ff9c 	bl	8006fc4 <std>
 800708c:	2202      	movs	r2, #2
 800708e:	2112      	movs	r1, #18
 8007090:	68e0      	ldr	r0, [r4, #12]
 8007092:	f7ff ff97 	bl	8006fc4 <std>
 8007096:	2301      	movs	r3, #1
 8007098:	61a3      	str	r3, [r4, #24]
 800709a:	bd10      	pop	{r4, pc}
 800709c:	08007784 	.word	0x08007784
 80070a0:	0800700d 	.word	0x0800700d

080070a4 <__sfp>:
 80070a4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80070a6:	4b1b      	ldr	r3, [pc, #108]	; (8007114 <__sfp+0x70>)
 80070a8:	681e      	ldr	r6, [r3, #0]
 80070aa:	69b3      	ldr	r3, [r6, #24]
 80070ac:	4607      	mov	r7, r0
 80070ae:	b913      	cbnz	r3, 80070b6 <__sfp+0x12>
 80070b0:	4630      	mov	r0, r6
 80070b2:	f7ff ffc7 	bl	8007044 <__sinit>
 80070b6:	3648      	adds	r6, #72	; 0x48
 80070b8:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 80070bc:	3b01      	subs	r3, #1
 80070be:	d503      	bpl.n	80070c8 <__sfp+0x24>
 80070c0:	6833      	ldr	r3, [r6, #0]
 80070c2:	b133      	cbz	r3, 80070d2 <__sfp+0x2e>
 80070c4:	6836      	ldr	r6, [r6, #0]
 80070c6:	e7f7      	b.n	80070b8 <__sfp+0x14>
 80070c8:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 80070cc:	b16d      	cbz	r5, 80070ea <__sfp+0x46>
 80070ce:	3468      	adds	r4, #104	; 0x68
 80070d0:	e7f4      	b.n	80070bc <__sfp+0x18>
 80070d2:	2104      	movs	r1, #4
 80070d4:	4638      	mov	r0, r7
 80070d6:	f7ff ff9f 	bl	8007018 <__sfmoreglue>
 80070da:	6030      	str	r0, [r6, #0]
 80070dc:	2800      	cmp	r0, #0
 80070de:	d1f1      	bne.n	80070c4 <__sfp+0x20>
 80070e0:	230c      	movs	r3, #12
 80070e2:	603b      	str	r3, [r7, #0]
 80070e4:	4604      	mov	r4, r0
 80070e6:	4620      	mov	r0, r4
 80070e8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80070ea:	4b0b      	ldr	r3, [pc, #44]	; (8007118 <__sfp+0x74>)
 80070ec:	6665      	str	r5, [r4, #100]	; 0x64
 80070ee:	e9c4 5500 	strd	r5, r5, [r4]
 80070f2:	60a5      	str	r5, [r4, #8]
 80070f4:	e9c4 3503 	strd	r3, r5, [r4, #12]
 80070f8:	e9c4 5505 	strd	r5, r5, [r4, #20]
 80070fc:	2208      	movs	r2, #8
 80070fe:	4629      	mov	r1, r5
 8007100:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8007104:	f7ff fd82 	bl	8006c0c <memset>
 8007108:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800710c:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8007110:	e7e9      	b.n	80070e6 <__sfp+0x42>
 8007112:	bf00      	nop
 8007114:	08007784 	.word	0x08007784
 8007118:	ffff0001 	.word	0xffff0001

0800711c <_fwalk_reent>:
 800711c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007120:	4680      	mov	r8, r0
 8007122:	4689      	mov	r9, r1
 8007124:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8007128:	2600      	movs	r6, #0
 800712a:	b914      	cbnz	r4, 8007132 <_fwalk_reent+0x16>
 800712c:	4630      	mov	r0, r6
 800712e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007132:	e9d4 7501 	ldrd	r7, r5, [r4, #4]
 8007136:	3f01      	subs	r7, #1
 8007138:	d501      	bpl.n	800713e <_fwalk_reent+0x22>
 800713a:	6824      	ldr	r4, [r4, #0]
 800713c:	e7f5      	b.n	800712a <_fwalk_reent+0xe>
 800713e:	89ab      	ldrh	r3, [r5, #12]
 8007140:	2b01      	cmp	r3, #1
 8007142:	d907      	bls.n	8007154 <_fwalk_reent+0x38>
 8007144:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8007148:	3301      	adds	r3, #1
 800714a:	d003      	beq.n	8007154 <_fwalk_reent+0x38>
 800714c:	4629      	mov	r1, r5
 800714e:	4640      	mov	r0, r8
 8007150:	47c8      	blx	r9
 8007152:	4306      	orrs	r6, r0
 8007154:	3568      	adds	r5, #104	; 0x68
 8007156:	e7ee      	b.n	8007136 <_fwalk_reent+0x1a>

08007158 <__swhatbuf_r>:
 8007158:	b570      	push	{r4, r5, r6, lr}
 800715a:	460e      	mov	r6, r1
 800715c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007160:	2900      	cmp	r1, #0
 8007162:	b096      	sub	sp, #88	; 0x58
 8007164:	4614      	mov	r4, r2
 8007166:	461d      	mov	r5, r3
 8007168:	da07      	bge.n	800717a <__swhatbuf_r+0x22>
 800716a:	2300      	movs	r3, #0
 800716c:	602b      	str	r3, [r5, #0]
 800716e:	89b3      	ldrh	r3, [r6, #12]
 8007170:	061a      	lsls	r2, r3, #24
 8007172:	d410      	bmi.n	8007196 <__swhatbuf_r+0x3e>
 8007174:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8007178:	e00e      	b.n	8007198 <__swhatbuf_r+0x40>
 800717a:	466a      	mov	r2, sp
 800717c:	f000 f96e 	bl	800745c <_fstat_r>
 8007180:	2800      	cmp	r0, #0
 8007182:	dbf2      	blt.n	800716a <__swhatbuf_r+0x12>
 8007184:	9a01      	ldr	r2, [sp, #4]
 8007186:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800718a:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800718e:	425a      	negs	r2, r3
 8007190:	415a      	adcs	r2, r3
 8007192:	602a      	str	r2, [r5, #0]
 8007194:	e7ee      	b.n	8007174 <__swhatbuf_r+0x1c>
 8007196:	2340      	movs	r3, #64	; 0x40
 8007198:	2000      	movs	r0, #0
 800719a:	6023      	str	r3, [r4, #0]
 800719c:	b016      	add	sp, #88	; 0x58
 800719e:	bd70      	pop	{r4, r5, r6, pc}

080071a0 <__smakebuf_r>:
 80071a0:	898b      	ldrh	r3, [r1, #12]
 80071a2:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80071a4:	079d      	lsls	r5, r3, #30
 80071a6:	4606      	mov	r6, r0
 80071a8:	460c      	mov	r4, r1
 80071aa:	d507      	bpl.n	80071bc <__smakebuf_r+0x1c>
 80071ac:	f104 0347 	add.w	r3, r4, #71	; 0x47
 80071b0:	6023      	str	r3, [r4, #0]
 80071b2:	6123      	str	r3, [r4, #16]
 80071b4:	2301      	movs	r3, #1
 80071b6:	6163      	str	r3, [r4, #20]
 80071b8:	b002      	add	sp, #8
 80071ba:	bd70      	pop	{r4, r5, r6, pc}
 80071bc:	ab01      	add	r3, sp, #4
 80071be:	466a      	mov	r2, sp
 80071c0:	f7ff ffca 	bl	8007158 <__swhatbuf_r>
 80071c4:	9900      	ldr	r1, [sp, #0]
 80071c6:	4605      	mov	r5, r0
 80071c8:	4630      	mov	r0, r6
 80071ca:	f000 f877 	bl	80072bc <_malloc_r>
 80071ce:	b948      	cbnz	r0, 80071e4 <__smakebuf_r+0x44>
 80071d0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80071d4:	059a      	lsls	r2, r3, #22
 80071d6:	d4ef      	bmi.n	80071b8 <__smakebuf_r+0x18>
 80071d8:	f023 0303 	bic.w	r3, r3, #3
 80071dc:	f043 0302 	orr.w	r3, r3, #2
 80071e0:	81a3      	strh	r3, [r4, #12]
 80071e2:	e7e3      	b.n	80071ac <__smakebuf_r+0xc>
 80071e4:	4b0d      	ldr	r3, [pc, #52]	; (800721c <__smakebuf_r+0x7c>)
 80071e6:	62b3      	str	r3, [r6, #40]	; 0x28
 80071e8:	89a3      	ldrh	r3, [r4, #12]
 80071ea:	6020      	str	r0, [r4, #0]
 80071ec:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80071f0:	81a3      	strh	r3, [r4, #12]
 80071f2:	9b00      	ldr	r3, [sp, #0]
 80071f4:	6163      	str	r3, [r4, #20]
 80071f6:	9b01      	ldr	r3, [sp, #4]
 80071f8:	6120      	str	r0, [r4, #16]
 80071fa:	b15b      	cbz	r3, 8007214 <__smakebuf_r+0x74>
 80071fc:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8007200:	4630      	mov	r0, r6
 8007202:	f000 f93d 	bl	8007480 <_isatty_r>
 8007206:	b128      	cbz	r0, 8007214 <__smakebuf_r+0x74>
 8007208:	89a3      	ldrh	r3, [r4, #12]
 800720a:	f023 0303 	bic.w	r3, r3, #3
 800720e:	f043 0301 	orr.w	r3, r3, #1
 8007212:	81a3      	strh	r3, [r4, #12]
 8007214:	89a3      	ldrh	r3, [r4, #12]
 8007216:	431d      	orrs	r5, r3
 8007218:	81a5      	strh	r5, [r4, #12]
 800721a:	e7cd      	b.n	80071b8 <__smakebuf_r+0x18>
 800721c:	0800700d 	.word	0x0800700d

08007220 <_free_r>:
 8007220:	b538      	push	{r3, r4, r5, lr}
 8007222:	4605      	mov	r5, r0
 8007224:	2900      	cmp	r1, #0
 8007226:	d045      	beq.n	80072b4 <_free_r+0x94>
 8007228:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800722c:	1f0c      	subs	r4, r1, #4
 800722e:	2b00      	cmp	r3, #0
 8007230:	bfb8      	it	lt
 8007232:	18e4      	addlt	r4, r4, r3
 8007234:	f000 f946 	bl	80074c4 <__malloc_lock>
 8007238:	4a1f      	ldr	r2, [pc, #124]	; (80072b8 <_free_r+0x98>)
 800723a:	6813      	ldr	r3, [r2, #0]
 800723c:	4610      	mov	r0, r2
 800723e:	b933      	cbnz	r3, 800724e <_free_r+0x2e>
 8007240:	6063      	str	r3, [r4, #4]
 8007242:	6014      	str	r4, [r2, #0]
 8007244:	4628      	mov	r0, r5
 8007246:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800724a:	f000 b93c 	b.w	80074c6 <__malloc_unlock>
 800724e:	42a3      	cmp	r3, r4
 8007250:	d90c      	bls.n	800726c <_free_r+0x4c>
 8007252:	6821      	ldr	r1, [r4, #0]
 8007254:	1862      	adds	r2, r4, r1
 8007256:	4293      	cmp	r3, r2
 8007258:	bf04      	itt	eq
 800725a:	681a      	ldreq	r2, [r3, #0]
 800725c:	685b      	ldreq	r3, [r3, #4]
 800725e:	6063      	str	r3, [r4, #4]
 8007260:	bf04      	itt	eq
 8007262:	1852      	addeq	r2, r2, r1
 8007264:	6022      	streq	r2, [r4, #0]
 8007266:	6004      	str	r4, [r0, #0]
 8007268:	e7ec      	b.n	8007244 <_free_r+0x24>
 800726a:	4613      	mov	r3, r2
 800726c:	685a      	ldr	r2, [r3, #4]
 800726e:	b10a      	cbz	r2, 8007274 <_free_r+0x54>
 8007270:	42a2      	cmp	r2, r4
 8007272:	d9fa      	bls.n	800726a <_free_r+0x4a>
 8007274:	6819      	ldr	r1, [r3, #0]
 8007276:	1858      	adds	r0, r3, r1
 8007278:	42a0      	cmp	r0, r4
 800727a:	d10b      	bne.n	8007294 <_free_r+0x74>
 800727c:	6820      	ldr	r0, [r4, #0]
 800727e:	4401      	add	r1, r0
 8007280:	1858      	adds	r0, r3, r1
 8007282:	4282      	cmp	r2, r0
 8007284:	6019      	str	r1, [r3, #0]
 8007286:	d1dd      	bne.n	8007244 <_free_r+0x24>
 8007288:	6810      	ldr	r0, [r2, #0]
 800728a:	6852      	ldr	r2, [r2, #4]
 800728c:	605a      	str	r2, [r3, #4]
 800728e:	4401      	add	r1, r0
 8007290:	6019      	str	r1, [r3, #0]
 8007292:	e7d7      	b.n	8007244 <_free_r+0x24>
 8007294:	d902      	bls.n	800729c <_free_r+0x7c>
 8007296:	230c      	movs	r3, #12
 8007298:	602b      	str	r3, [r5, #0]
 800729a:	e7d3      	b.n	8007244 <_free_r+0x24>
 800729c:	6820      	ldr	r0, [r4, #0]
 800729e:	1821      	adds	r1, r4, r0
 80072a0:	428a      	cmp	r2, r1
 80072a2:	bf04      	itt	eq
 80072a4:	6811      	ldreq	r1, [r2, #0]
 80072a6:	6852      	ldreq	r2, [r2, #4]
 80072a8:	6062      	str	r2, [r4, #4]
 80072aa:	bf04      	itt	eq
 80072ac:	1809      	addeq	r1, r1, r0
 80072ae:	6021      	streq	r1, [r4, #0]
 80072b0:	605c      	str	r4, [r3, #4]
 80072b2:	e7c7      	b.n	8007244 <_free_r+0x24>
 80072b4:	bd38      	pop	{r3, r4, r5, pc}
 80072b6:	bf00      	nop
 80072b8:	200000a0 	.word	0x200000a0

080072bc <_malloc_r>:
 80072bc:	b570      	push	{r4, r5, r6, lr}
 80072be:	1ccd      	adds	r5, r1, #3
 80072c0:	f025 0503 	bic.w	r5, r5, #3
 80072c4:	3508      	adds	r5, #8
 80072c6:	2d0c      	cmp	r5, #12
 80072c8:	bf38      	it	cc
 80072ca:	250c      	movcc	r5, #12
 80072cc:	2d00      	cmp	r5, #0
 80072ce:	4606      	mov	r6, r0
 80072d0:	db01      	blt.n	80072d6 <_malloc_r+0x1a>
 80072d2:	42a9      	cmp	r1, r5
 80072d4:	d903      	bls.n	80072de <_malloc_r+0x22>
 80072d6:	230c      	movs	r3, #12
 80072d8:	6033      	str	r3, [r6, #0]
 80072da:	2000      	movs	r0, #0
 80072dc:	bd70      	pop	{r4, r5, r6, pc}
 80072de:	f000 f8f1 	bl	80074c4 <__malloc_lock>
 80072e2:	4a21      	ldr	r2, [pc, #132]	; (8007368 <_malloc_r+0xac>)
 80072e4:	6814      	ldr	r4, [r2, #0]
 80072e6:	4621      	mov	r1, r4
 80072e8:	b991      	cbnz	r1, 8007310 <_malloc_r+0x54>
 80072ea:	4c20      	ldr	r4, [pc, #128]	; (800736c <_malloc_r+0xb0>)
 80072ec:	6823      	ldr	r3, [r4, #0]
 80072ee:	b91b      	cbnz	r3, 80072f8 <_malloc_r+0x3c>
 80072f0:	4630      	mov	r0, r6
 80072f2:	f000 f83d 	bl	8007370 <_sbrk_r>
 80072f6:	6020      	str	r0, [r4, #0]
 80072f8:	4629      	mov	r1, r5
 80072fa:	4630      	mov	r0, r6
 80072fc:	f000 f838 	bl	8007370 <_sbrk_r>
 8007300:	1c43      	adds	r3, r0, #1
 8007302:	d124      	bne.n	800734e <_malloc_r+0x92>
 8007304:	230c      	movs	r3, #12
 8007306:	6033      	str	r3, [r6, #0]
 8007308:	4630      	mov	r0, r6
 800730a:	f000 f8dc 	bl	80074c6 <__malloc_unlock>
 800730e:	e7e4      	b.n	80072da <_malloc_r+0x1e>
 8007310:	680b      	ldr	r3, [r1, #0]
 8007312:	1b5b      	subs	r3, r3, r5
 8007314:	d418      	bmi.n	8007348 <_malloc_r+0x8c>
 8007316:	2b0b      	cmp	r3, #11
 8007318:	d90f      	bls.n	800733a <_malloc_r+0x7e>
 800731a:	600b      	str	r3, [r1, #0]
 800731c:	50cd      	str	r5, [r1, r3]
 800731e:	18cc      	adds	r4, r1, r3
 8007320:	4630      	mov	r0, r6
 8007322:	f000 f8d0 	bl	80074c6 <__malloc_unlock>
 8007326:	f104 000b 	add.w	r0, r4, #11
 800732a:	1d23      	adds	r3, r4, #4
 800732c:	f020 0007 	bic.w	r0, r0, #7
 8007330:	1ac3      	subs	r3, r0, r3
 8007332:	d0d3      	beq.n	80072dc <_malloc_r+0x20>
 8007334:	425a      	negs	r2, r3
 8007336:	50e2      	str	r2, [r4, r3]
 8007338:	e7d0      	b.n	80072dc <_malloc_r+0x20>
 800733a:	428c      	cmp	r4, r1
 800733c:	684b      	ldr	r3, [r1, #4]
 800733e:	bf16      	itet	ne
 8007340:	6063      	strne	r3, [r4, #4]
 8007342:	6013      	streq	r3, [r2, #0]
 8007344:	460c      	movne	r4, r1
 8007346:	e7eb      	b.n	8007320 <_malloc_r+0x64>
 8007348:	460c      	mov	r4, r1
 800734a:	6849      	ldr	r1, [r1, #4]
 800734c:	e7cc      	b.n	80072e8 <_malloc_r+0x2c>
 800734e:	1cc4      	adds	r4, r0, #3
 8007350:	f024 0403 	bic.w	r4, r4, #3
 8007354:	42a0      	cmp	r0, r4
 8007356:	d005      	beq.n	8007364 <_malloc_r+0xa8>
 8007358:	1a21      	subs	r1, r4, r0
 800735a:	4630      	mov	r0, r6
 800735c:	f000 f808 	bl	8007370 <_sbrk_r>
 8007360:	3001      	adds	r0, #1
 8007362:	d0cf      	beq.n	8007304 <_malloc_r+0x48>
 8007364:	6025      	str	r5, [r4, #0]
 8007366:	e7db      	b.n	8007320 <_malloc_r+0x64>
 8007368:	200000a0 	.word	0x200000a0
 800736c:	200000a4 	.word	0x200000a4

08007370 <_sbrk_r>:
 8007370:	b538      	push	{r3, r4, r5, lr}
 8007372:	4c06      	ldr	r4, [pc, #24]	; (800738c <_sbrk_r+0x1c>)
 8007374:	2300      	movs	r3, #0
 8007376:	4605      	mov	r5, r0
 8007378:	4608      	mov	r0, r1
 800737a:	6023      	str	r3, [r4, #0]
 800737c:	f7f9 fdf8 	bl	8000f70 <_sbrk>
 8007380:	1c43      	adds	r3, r0, #1
 8007382:	d102      	bne.n	800738a <_sbrk_r+0x1a>
 8007384:	6823      	ldr	r3, [r4, #0]
 8007386:	b103      	cbz	r3, 800738a <_sbrk_r+0x1a>
 8007388:	602b      	str	r3, [r5, #0]
 800738a:	bd38      	pop	{r3, r4, r5, pc}
 800738c:	2000036c 	.word	0x2000036c

08007390 <__sread>:
 8007390:	b510      	push	{r4, lr}
 8007392:	460c      	mov	r4, r1
 8007394:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007398:	f000 f896 	bl	80074c8 <_read_r>
 800739c:	2800      	cmp	r0, #0
 800739e:	bfab      	itete	ge
 80073a0:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 80073a2:	89a3      	ldrhlt	r3, [r4, #12]
 80073a4:	181b      	addge	r3, r3, r0
 80073a6:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 80073aa:	bfac      	ite	ge
 80073ac:	6563      	strge	r3, [r4, #84]	; 0x54
 80073ae:	81a3      	strhlt	r3, [r4, #12]
 80073b0:	bd10      	pop	{r4, pc}

080073b2 <__swrite>:
 80073b2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80073b6:	461f      	mov	r7, r3
 80073b8:	898b      	ldrh	r3, [r1, #12]
 80073ba:	05db      	lsls	r3, r3, #23
 80073bc:	4605      	mov	r5, r0
 80073be:	460c      	mov	r4, r1
 80073c0:	4616      	mov	r6, r2
 80073c2:	d505      	bpl.n	80073d0 <__swrite+0x1e>
 80073c4:	2302      	movs	r3, #2
 80073c6:	2200      	movs	r2, #0
 80073c8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80073cc:	f000 f868 	bl	80074a0 <_lseek_r>
 80073d0:	89a3      	ldrh	r3, [r4, #12]
 80073d2:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80073d6:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80073da:	81a3      	strh	r3, [r4, #12]
 80073dc:	4632      	mov	r2, r6
 80073de:	463b      	mov	r3, r7
 80073e0:	4628      	mov	r0, r5
 80073e2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80073e6:	f000 b817 	b.w	8007418 <_write_r>

080073ea <__sseek>:
 80073ea:	b510      	push	{r4, lr}
 80073ec:	460c      	mov	r4, r1
 80073ee:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80073f2:	f000 f855 	bl	80074a0 <_lseek_r>
 80073f6:	1c43      	adds	r3, r0, #1
 80073f8:	89a3      	ldrh	r3, [r4, #12]
 80073fa:	bf15      	itete	ne
 80073fc:	6560      	strne	r0, [r4, #84]	; 0x54
 80073fe:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8007402:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8007406:	81a3      	strheq	r3, [r4, #12]
 8007408:	bf18      	it	ne
 800740a:	81a3      	strhne	r3, [r4, #12]
 800740c:	bd10      	pop	{r4, pc}

0800740e <__sclose>:
 800740e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007412:	f000 b813 	b.w	800743c <_close_r>
	...

08007418 <_write_r>:
 8007418:	b538      	push	{r3, r4, r5, lr}
 800741a:	4c07      	ldr	r4, [pc, #28]	; (8007438 <_write_r+0x20>)
 800741c:	4605      	mov	r5, r0
 800741e:	4608      	mov	r0, r1
 8007420:	4611      	mov	r1, r2
 8007422:	2200      	movs	r2, #0
 8007424:	6022      	str	r2, [r4, #0]
 8007426:	461a      	mov	r2, r3
 8007428:	f7f9 fa7f 	bl	800092a <_write>
 800742c:	1c43      	adds	r3, r0, #1
 800742e:	d102      	bne.n	8007436 <_write_r+0x1e>
 8007430:	6823      	ldr	r3, [r4, #0]
 8007432:	b103      	cbz	r3, 8007436 <_write_r+0x1e>
 8007434:	602b      	str	r3, [r5, #0]
 8007436:	bd38      	pop	{r3, r4, r5, pc}
 8007438:	2000036c 	.word	0x2000036c

0800743c <_close_r>:
 800743c:	b538      	push	{r3, r4, r5, lr}
 800743e:	4c06      	ldr	r4, [pc, #24]	; (8007458 <_close_r+0x1c>)
 8007440:	2300      	movs	r3, #0
 8007442:	4605      	mov	r5, r0
 8007444:	4608      	mov	r0, r1
 8007446:	6023      	str	r3, [r4, #0]
 8007448:	f7f9 fd5d 	bl	8000f06 <_close>
 800744c:	1c43      	adds	r3, r0, #1
 800744e:	d102      	bne.n	8007456 <_close_r+0x1a>
 8007450:	6823      	ldr	r3, [r4, #0]
 8007452:	b103      	cbz	r3, 8007456 <_close_r+0x1a>
 8007454:	602b      	str	r3, [r5, #0]
 8007456:	bd38      	pop	{r3, r4, r5, pc}
 8007458:	2000036c 	.word	0x2000036c

0800745c <_fstat_r>:
 800745c:	b538      	push	{r3, r4, r5, lr}
 800745e:	4c07      	ldr	r4, [pc, #28]	; (800747c <_fstat_r+0x20>)
 8007460:	2300      	movs	r3, #0
 8007462:	4605      	mov	r5, r0
 8007464:	4608      	mov	r0, r1
 8007466:	4611      	mov	r1, r2
 8007468:	6023      	str	r3, [r4, #0]
 800746a:	f7f9 fd58 	bl	8000f1e <_fstat>
 800746e:	1c43      	adds	r3, r0, #1
 8007470:	d102      	bne.n	8007478 <_fstat_r+0x1c>
 8007472:	6823      	ldr	r3, [r4, #0]
 8007474:	b103      	cbz	r3, 8007478 <_fstat_r+0x1c>
 8007476:	602b      	str	r3, [r5, #0]
 8007478:	bd38      	pop	{r3, r4, r5, pc}
 800747a:	bf00      	nop
 800747c:	2000036c 	.word	0x2000036c

08007480 <_isatty_r>:
 8007480:	b538      	push	{r3, r4, r5, lr}
 8007482:	4c06      	ldr	r4, [pc, #24]	; (800749c <_isatty_r+0x1c>)
 8007484:	2300      	movs	r3, #0
 8007486:	4605      	mov	r5, r0
 8007488:	4608      	mov	r0, r1
 800748a:	6023      	str	r3, [r4, #0]
 800748c:	f7f9 fd57 	bl	8000f3e <_isatty>
 8007490:	1c43      	adds	r3, r0, #1
 8007492:	d102      	bne.n	800749a <_isatty_r+0x1a>
 8007494:	6823      	ldr	r3, [r4, #0]
 8007496:	b103      	cbz	r3, 800749a <_isatty_r+0x1a>
 8007498:	602b      	str	r3, [r5, #0]
 800749a:	bd38      	pop	{r3, r4, r5, pc}
 800749c:	2000036c 	.word	0x2000036c

080074a0 <_lseek_r>:
 80074a0:	b538      	push	{r3, r4, r5, lr}
 80074a2:	4c07      	ldr	r4, [pc, #28]	; (80074c0 <_lseek_r+0x20>)
 80074a4:	4605      	mov	r5, r0
 80074a6:	4608      	mov	r0, r1
 80074a8:	4611      	mov	r1, r2
 80074aa:	2200      	movs	r2, #0
 80074ac:	6022      	str	r2, [r4, #0]
 80074ae:	461a      	mov	r2, r3
 80074b0:	f7f9 fd50 	bl	8000f54 <_lseek>
 80074b4:	1c43      	adds	r3, r0, #1
 80074b6:	d102      	bne.n	80074be <_lseek_r+0x1e>
 80074b8:	6823      	ldr	r3, [r4, #0]
 80074ba:	b103      	cbz	r3, 80074be <_lseek_r+0x1e>
 80074bc:	602b      	str	r3, [r5, #0]
 80074be:	bd38      	pop	{r3, r4, r5, pc}
 80074c0:	2000036c 	.word	0x2000036c

080074c4 <__malloc_lock>:
 80074c4:	4770      	bx	lr

080074c6 <__malloc_unlock>:
 80074c6:	4770      	bx	lr

080074c8 <_read_r>:
 80074c8:	b538      	push	{r3, r4, r5, lr}
 80074ca:	4c07      	ldr	r4, [pc, #28]	; (80074e8 <_read_r+0x20>)
 80074cc:	4605      	mov	r5, r0
 80074ce:	4608      	mov	r0, r1
 80074d0:	4611      	mov	r1, r2
 80074d2:	2200      	movs	r2, #0
 80074d4:	6022      	str	r2, [r4, #0]
 80074d6:	461a      	mov	r2, r3
 80074d8:	f7f9 fcf8 	bl	8000ecc <_read>
 80074dc:	1c43      	adds	r3, r0, #1
 80074de:	d102      	bne.n	80074e6 <_read_r+0x1e>
 80074e0:	6823      	ldr	r3, [r4, #0]
 80074e2:	b103      	cbz	r3, 80074e6 <_read_r+0x1e>
 80074e4:	602b      	str	r3, [r5, #0]
 80074e6:	bd38      	pop	{r3, r4, r5, pc}
 80074e8:	2000036c 	.word	0x2000036c

080074ec <_init>:
 80074ec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80074ee:	bf00      	nop
 80074f0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80074f2:	bc08      	pop	{r3}
 80074f4:	469e      	mov	lr, r3
 80074f6:	4770      	bx	lr

080074f8 <_fini>:
 80074f8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80074fa:	bf00      	nop
 80074fc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80074fe:	bc08      	pop	{r3}
 8007500:	469e      	mov	lr, r3
 8007502:	4770      	bx	lr
