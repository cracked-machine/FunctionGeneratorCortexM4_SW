
FunctionGeneratorCortexM4_SW_V1.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000a5e0  080001e0  080001e0  000101e0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000570  0800a7c0  0800a7c0  0001a7c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800ad30  0800ad30  000210c8  2**0
                  CONTENTS
  4 .ARM          00000000  0800ad30  0800ad30  000210c8  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800ad30  0800ad30  000210c8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800ad30  0800ad30  0001ad30  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800ad34  0800ad34  0001ad34  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000010c8  20000000  0800ad38  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000004a0  200010c8  0800be00  000210c8  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20001568  0800be00  00021568  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000210c8  2**0
                  CONTENTS, READONLY
 12 .debug_info   000285f1  00000000  00000000  000210f8  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 000054f4  00000000  00000000  000496e9  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00001d80  00000000  00000000  0004ebe0  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00001a40  00000000  00000000  00050960  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  0002ffe0  00000000  00000000  000523a0  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   000200dc  00000000  00000000  00082380  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    00124417  00000000  00000000  000a245c  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  001c6873  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00007e10  00000000  00000000  001c68f0  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001e0 <__do_global_dtors_aux>:
 80001e0:	b510      	push	{r4, lr}
 80001e2:	4c05      	ldr	r4, [pc, #20]	; (80001f8 <__do_global_dtors_aux+0x18>)
 80001e4:	7823      	ldrb	r3, [r4, #0]
 80001e6:	b933      	cbnz	r3, 80001f6 <__do_global_dtors_aux+0x16>
 80001e8:	4b04      	ldr	r3, [pc, #16]	; (80001fc <__do_global_dtors_aux+0x1c>)
 80001ea:	b113      	cbz	r3, 80001f2 <__do_global_dtors_aux+0x12>
 80001ec:	4804      	ldr	r0, [pc, #16]	; (8000200 <__do_global_dtors_aux+0x20>)
 80001ee:	f3af 8000 	nop.w
 80001f2:	2301      	movs	r3, #1
 80001f4:	7023      	strb	r3, [r4, #0]
 80001f6:	bd10      	pop	{r4, pc}
 80001f8:	200010c8 	.word	0x200010c8
 80001fc:	00000000 	.word	0x00000000
 8000200:	0800a7a8 	.word	0x0800a7a8

08000204 <frame_dummy>:
 8000204:	b508      	push	{r3, lr}
 8000206:	4b03      	ldr	r3, [pc, #12]	; (8000214 <frame_dummy+0x10>)
 8000208:	b11b      	cbz	r3, 8000212 <frame_dummy+0xe>
 800020a:	4903      	ldr	r1, [pc, #12]	; (8000218 <frame_dummy+0x14>)
 800020c:	4803      	ldr	r0, [pc, #12]	; (800021c <frame_dummy+0x18>)
 800020e:	f3af 8000 	nop.w
 8000212:	bd08      	pop	{r3, pc}
 8000214:	00000000 	.word	0x00000000
 8000218:	200010cc 	.word	0x200010cc
 800021c:	0800a7a8 	.word	0x0800a7a8

08000220 <memchr>:
 8000220:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000224:	2a10      	cmp	r2, #16
 8000226:	db2b      	blt.n	8000280 <memchr+0x60>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	d008      	beq.n	8000240 <memchr+0x20>
 800022e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000232:	3a01      	subs	r2, #1
 8000234:	428b      	cmp	r3, r1
 8000236:	d02d      	beq.n	8000294 <memchr+0x74>
 8000238:	f010 0f07 	tst.w	r0, #7
 800023c:	b342      	cbz	r2, 8000290 <memchr+0x70>
 800023e:	d1f6      	bne.n	800022e <memchr+0xe>
 8000240:	b4f0      	push	{r4, r5, r6, r7}
 8000242:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000246:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800024a:	f022 0407 	bic.w	r4, r2, #7
 800024e:	f07f 0700 	mvns.w	r7, #0
 8000252:	2300      	movs	r3, #0
 8000254:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000258:	3c08      	subs	r4, #8
 800025a:	ea85 0501 	eor.w	r5, r5, r1
 800025e:	ea86 0601 	eor.w	r6, r6, r1
 8000262:	fa85 f547 	uadd8	r5, r5, r7
 8000266:	faa3 f587 	sel	r5, r3, r7
 800026a:	fa86 f647 	uadd8	r6, r6, r7
 800026e:	faa5 f687 	sel	r6, r5, r7
 8000272:	b98e      	cbnz	r6, 8000298 <memchr+0x78>
 8000274:	d1ee      	bne.n	8000254 <memchr+0x34>
 8000276:	bcf0      	pop	{r4, r5, r6, r7}
 8000278:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800027c:	f002 0207 	and.w	r2, r2, #7
 8000280:	b132      	cbz	r2, 8000290 <memchr+0x70>
 8000282:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000286:	3a01      	subs	r2, #1
 8000288:	ea83 0301 	eor.w	r3, r3, r1
 800028c:	b113      	cbz	r3, 8000294 <memchr+0x74>
 800028e:	d1f8      	bne.n	8000282 <memchr+0x62>
 8000290:	2000      	movs	r0, #0
 8000292:	4770      	bx	lr
 8000294:	3801      	subs	r0, #1
 8000296:	4770      	bx	lr
 8000298:	2d00      	cmp	r5, #0
 800029a:	bf06      	itte	eq
 800029c:	4635      	moveq	r5, r6
 800029e:	3803      	subeq	r0, #3
 80002a0:	3807      	subne	r0, #7
 80002a2:	f015 0f01 	tst.w	r5, #1
 80002a6:	d107      	bne.n	80002b8 <memchr+0x98>
 80002a8:	3001      	adds	r0, #1
 80002aa:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002ae:	bf02      	ittt	eq
 80002b0:	3001      	addeq	r0, #1
 80002b2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002b6:	3001      	addeq	r0, #1
 80002b8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ba:	3801      	subs	r0, #1
 80002bc:	4770      	bx	lr
 80002be:	bf00      	nop

080002c0 <DM_Init>:
 *
 *
 *
 */
void DM_Init()
{
 80002c0:	b580      	push	{r7, lr}
 80002c2:	af00      	add	r7, sp, #0
	  ILI9341_Init();
 80002c4:	f008 fcb8 	bl	8008c38 <ILI9341_Init>
	  ILI9341_Set_Rotation(SCREEN_HORIZONTAL_2);
 80002c8:	2003      	movs	r0, #3
 80002ca:	f009 f8a5 	bl	8009418 <ILI9341_Set_Rotation>
	  ILI9341_Fill_Screen(WHITE);
 80002ce:	f64f 70ff 	movw	r0, #65535	; 0xffff
 80002d2:	f008 feb9 	bl	8009048 <ILI9341_Fill_Screen>

}
 80002d6:	bf00      	nop
 80002d8:	bd80      	pop	{r7, pc}
	...

080002dc <DM_PostInit>:
 *
 *
 *
 */
void DM_PostInit()
{
 80002dc:	b580      	push	{r7, lr}
 80002de:	b082      	sub	sp, #8
 80002e0:	af02      	add	r7, sp, #8

	  ILI9341_Draw_Text("Initialising", 10, 10, BLACK, 1, WHITE);
 80002e2:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80002e6:	9301      	str	r3, [sp, #4]
 80002e8:	2301      	movs	r3, #1
 80002ea:	9300      	str	r3, [sp, #0]
 80002ec:	2300      	movs	r3, #0
 80002ee:	220a      	movs	r2, #10
 80002f0:	210a      	movs	r1, #10
 80002f2:	4807      	ldr	r0, [pc, #28]	; (8000310 <DM_PostInit+0x34>)
 80002f4:	f008 fc4e 	bl	8008b94 <ILI9341_Draw_Text>
	  HAL_Delay(500);
 80002f8:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80002fc:	f002 ff3c 	bl	8003178 <HAL_Delay>

	  DM_RefreshBackgroundLayout();
 8000300:	f000 fb96 	bl	8000a30 <DM_RefreshBackgroundLayout>
	  printf("Init Completed\n");
 8000304:	4803      	ldr	r0, [pc, #12]	; (8000314 <DM_PostInit+0x38>)
 8000306:	f009 fad3 	bl	80098b0 <puts>
}
 800030a:	bf00      	nop
 800030c:	46bd      	mov	sp, r7
 800030e:	bd80      	pop	{r7, pc}
 8000310:	0800a7c0 	.word	0x0800a7c0
 8000314:	0800a7d0 	.word	0x0800a7d0

08000318 <DM_UpdateDisplay>:
 *
 *
 */

void DM_UpdateDisplay()
{
 8000318:	b580      	push	{r7, lr}
 800031a:	b084      	sub	sp, #16
 800031c:	af02      	add	r7, sp, #8



	if(eNextFuncMenuStatus)		//  == ENABLE_FUNCMENU
 800031e:	4b4a      	ldr	r3, [pc, #296]	; (8000448 <DM_UpdateDisplay+0x130>)
 8000320:	781b      	ldrb	r3, [r3, #0]
 8000322:	2b00      	cmp	r3, #0
 8000324:	d002      	beq.n	800032c <DM_UpdateDisplay+0x14>
 		ILI9341_Draw_Text("    ", 10, 210, BLACK, 2, DARKCYAN);
		ILI9341_Draw_Text("    ", 100, 210, BLACK, 2, DARKGREEN);
		ILI9341_Draw_Text("    ", 175, 210, BLACK, 2, YELLOW);
		ILI9341_Draw_Text("    ", 260, 210, BLACK, 2, RED);
*/
		_DrawFuncSelectMenu();
 8000326:	f000 f8b9 	bl	800049c <_DrawFuncSelectMenu>
 800032a:	e06d      	b.n	8000408 <DM_UpdateDisplay+0xf0>
	}
	else if(eNextGainMenuStatus)		//  == ENABLE_GAINMENU
 800032c:	4b47      	ldr	r3, [pc, #284]	; (800044c <DM_UpdateDisplay+0x134>)
 800032e:	781b      	ldrb	r3, [r3, #0]
 8000330:	2b00      	cmp	r3, #0
 8000332:	d002      	beq.n	800033a <DM_UpdateDisplay+0x22>
		ILI9341_Draw_Text("    ", 10, 210, BLACK, 2, DARKCYAN);
		ILI9341_Draw_Text("    ", 100, 210, BLACK, 2, DARKGREEN);
		ILI9341_Draw_Text("    ", 175, 210, BLACK, 2, YELLOW);
		ILI9341_Draw_Text("    ", 260, 210, BLACK, 2, RED);
*/
		_DrawGainSelectMenu();
 8000334:	f000 fa7c 	bl	8000830 <_DrawGainSelectMenu>
 8000338:	e066      	b.n	8000408 <DM_UpdateDisplay+0xf0>
	}
	else if(eNextFreqMenuStatus)		//  == ENABLE_FREQMENU
 800033a:	4b45      	ldr	r3, [pc, #276]	; (8000450 <DM_UpdateDisplay+0x138>)
 800033c:	781b      	ldrb	r3, [r3, #0]
 800033e:	2b00      	cmp	r3, #0
 8000340:	d02e      	beq.n	80003a0 <DM_UpdateDisplay+0x88>
	{
		ILI9341_Draw_Text("1Hz", 24, 210, BLACK, 2, DARKCYAN);
 8000342:	f240 33ef 	movw	r3, #1007	; 0x3ef
 8000346:	9301      	str	r3, [sp, #4]
 8000348:	2302      	movs	r3, #2
 800034a:	9300      	str	r3, [sp, #0]
 800034c:	2300      	movs	r3, #0
 800034e:	22d2      	movs	r2, #210	; 0xd2
 8000350:	2118      	movs	r1, #24
 8000352:	4840      	ldr	r0, [pc, #256]	; (8000454 <DM_UpdateDisplay+0x13c>)
 8000354:	f008 fc1e 	bl	8008b94 <ILI9341_Draw_Text>
		ILI9341_Draw_Text("100Hz", 93, 210, BLACK, 2, DARKGREEN);
 8000358:	f44f 7378 	mov.w	r3, #992	; 0x3e0
 800035c:	9301      	str	r3, [sp, #4]
 800035e:	2302      	movs	r3, #2
 8000360:	9300      	str	r3, [sp, #0]
 8000362:	2300      	movs	r3, #0
 8000364:	22d2      	movs	r2, #210	; 0xd2
 8000366:	215d      	movs	r1, #93	; 0x5d
 8000368:	483b      	ldr	r0, [pc, #236]	; (8000458 <DM_UpdateDisplay+0x140>)
 800036a:	f008 fc13 	bl	8008b94 <ILI9341_Draw_Text>
		ILI9341_Draw_Text("1KHz", 175, 210, BLACK, 2, YELLOW);
 800036e:	f64f 73e0 	movw	r3, #65504	; 0xffe0
 8000372:	9301      	str	r3, [sp, #4]
 8000374:	2302      	movs	r3, #2
 8000376:	9300      	str	r3, [sp, #0]
 8000378:	2300      	movs	r3, #0
 800037a:	22d2      	movs	r2, #210	; 0xd2
 800037c:	21af      	movs	r1, #175	; 0xaf
 800037e:	4837      	ldr	r0, [pc, #220]	; (800045c <DM_UpdateDisplay+0x144>)
 8000380:	f008 fc08 	bl	8008b94 <ILI9341_Draw_Text>
		ILI9341_Draw_Text("100KHz", 247, 210, BLACK, 2, RED);
 8000384:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8000388:	9301      	str	r3, [sp, #4]
 800038a:	2302      	movs	r3, #2
 800038c:	9300      	str	r3, [sp, #0]
 800038e:	2300      	movs	r3, #0
 8000390:	22d2      	movs	r2, #210	; 0xd2
 8000392:	21f7      	movs	r1, #247	; 0xf7
 8000394:	4832      	ldr	r0, [pc, #200]	; (8000460 <DM_UpdateDisplay+0x148>)
 8000396:	f008 fbfd 	bl	8008b94 <ILI9341_Draw_Text>

		_DrawFreqSelectMenu();
 800039a:	f000 fa87 	bl	80008ac <_DrawFreqSelectMenu>
 800039e:	e033      	b.n	8000408 <DM_UpdateDisplay+0xf0>
	}
	else if(eNextBiasMenuStatus)		//  == ENABLE_BIASMENU
 80003a0:	4b30      	ldr	r3, [pc, #192]	; (8000464 <DM_UpdateDisplay+0x14c>)
 80003a2:	781b      	ldrb	r3, [r3, #0]
 80003a4:	2b00      	cmp	r3, #0
 80003a6:	d002      	beq.n	80003ae <DM_UpdateDisplay+0x96>
		ILI9341_Draw_Text("    ", 10, 210, BLACK, 2, DARKCYAN);
		ILI9341_Draw_Text("    ", 100, 210, BLACK, 2, DARKGREEN);
		ILI9341_Draw_Text("    ", 175, 210, BLACK, 2, YELLOW);
		ILI9341_Draw_Text("    ", 260, 210, BLACK, 2, RED);
*/
		_DrawBiasSelectMenu();
 80003a8:	f000 fac0 	bl	800092c <_DrawBiasSelectMenu>
 80003ac:	e02c      	b.n	8000408 <DM_UpdateDisplay+0xf0>
	}
	else
	{
		ILI9341_Draw_Text("FUNC", 10, 210, BLACK, 2, DARKCYAN);
 80003ae:	f240 33ef 	movw	r3, #1007	; 0x3ef
 80003b2:	9301      	str	r3, [sp, #4]
 80003b4:	2302      	movs	r3, #2
 80003b6:	9300      	str	r3, [sp, #0]
 80003b8:	2300      	movs	r3, #0
 80003ba:	22d2      	movs	r2, #210	; 0xd2
 80003bc:	210a      	movs	r1, #10
 80003be:	482a      	ldr	r0, [pc, #168]	; (8000468 <DM_UpdateDisplay+0x150>)
 80003c0:	f008 fbe8 	bl	8008b94 <ILI9341_Draw_Text>
		ILI9341_Draw_Text("FREQ", 100, 210, BLACK, 2, DARKGREEN);
 80003c4:	f44f 7378 	mov.w	r3, #992	; 0x3e0
 80003c8:	9301      	str	r3, [sp, #4]
 80003ca:	2302      	movs	r3, #2
 80003cc:	9300      	str	r3, [sp, #0]
 80003ce:	2300      	movs	r3, #0
 80003d0:	22d2      	movs	r2, #210	; 0xd2
 80003d2:	2164      	movs	r1, #100	; 0x64
 80003d4:	4825      	ldr	r0, [pc, #148]	; (800046c <DM_UpdateDisplay+0x154>)
 80003d6:	f008 fbdd 	bl	8008b94 <ILI9341_Draw_Text>
		ILI9341_Draw_Text("GAIN", 175, 210, BLACK, 2, YELLOW);
 80003da:	f64f 73e0 	movw	r3, #65504	; 0xffe0
 80003de:	9301      	str	r3, [sp, #4]
 80003e0:	2302      	movs	r3, #2
 80003e2:	9300      	str	r3, [sp, #0]
 80003e4:	2300      	movs	r3, #0
 80003e6:	22d2      	movs	r2, #210	; 0xd2
 80003e8:	21af      	movs	r1, #175	; 0xaf
 80003ea:	4821      	ldr	r0, [pc, #132]	; (8000470 <DM_UpdateDisplay+0x158>)
 80003ec:	f008 fbd2 	bl	8008b94 <ILI9341_Draw_Text>
		ILI9341_Draw_Text("BIAS", 260, 210, BLACK, 2, RED);
 80003f0:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 80003f4:	9301      	str	r3, [sp, #4]
 80003f6:	2302      	movs	r3, #2
 80003f8:	9300      	str	r3, [sp, #0]
 80003fa:	2300      	movs	r3, #0
 80003fc:	22d2      	movs	r2, #210	; 0xd2
 80003fe:	f44f 7182 	mov.w	r1, #260	; 0x104
 8000402:	481c      	ldr	r0, [pc, #112]	; (8000474 <DM_UpdateDisplay+0x15c>)
 8000404:	f008 fbc6 	bl	8008b94 <ILI9341_Draw_Text>
	}

#ifdef ENCODER_DEBUG
	char tim1tmp[5] = "";
 8000408:	2300      	movs	r3, #0
 800040a:	603b      	str	r3, [r7, #0]
 800040c:	2300      	movs	r3, #0
 800040e:	713b      	strb	r3, [r7, #4]
	//snprintf(tim1tmp, sizeof(tim1tmp), "%lu", ENCODER_TIMER->CNT);
	if(DM_AddDigitPadding(ENCODER_TIMER->CNT, tim1tmp, sizeof(tim1tmp)) == 0)
 8000410:	4b19      	ldr	r3, [pc, #100]	; (8000478 <DM_UpdateDisplay+0x160>)
 8000412:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000414:	b29b      	uxth	r3, r3
 8000416:	4639      	mov	r1, r7
 8000418:	2205      	movs	r2, #5
 800041a:	4618      	mov	r0, r3
 800041c:	f000 fb4a 	bl	8000ab4 <DM_AddDigitPadding>
 8000420:	4603      	mov	r3, r0
 8000422:	2b00      	cmp	r3, #0
 8000424:	d10b      	bne.n	800043e <DM_UpdateDisplay+0x126>
		ILI9341_Draw_Text(tim1tmp, 260, 50, BLACK, 2, RED);
 8000426:	4638      	mov	r0, r7
 8000428:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 800042c:	9301      	str	r3, [sp, #4]
 800042e:	2302      	movs	r3, #2
 8000430:	9300      	str	r3, [sp, #0]
 8000432:	2300      	movs	r3, #0
 8000434:	2232      	movs	r2, #50	; 0x32
 8000436:	f44f 7182 	mov.w	r1, #260	; 0x104
 800043a:	f008 fbab 	bl	8008b94 <ILI9341_Draw_Text>
/*
	if((TIM1->SR & TIM_SR_IDXF) == TIM_SR_IDXF)
	{
		TIM1->SR &= ~(TIM_SR_IDXF);
	}*/
}
 800043e:	bf00      	nop
 8000440:	3708      	adds	r7, #8
 8000442:	46bd      	mov	sp, r7
 8000444:	bd80      	pop	{r7, pc}
 8000446:	bf00      	nop
 8000448:	200010e4 	.word	0x200010e4
 800044c:	200010e5 	.word	0x200010e5
 8000450:	200010e6 	.word	0x200010e6
 8000454:	0800a7e0 	.word	0x0800a7e0
 8000458:	0800a7e4 	.word	0x0800a7e4
 800045c:	0800a7ec 	.word	0x0800a7ec
 8000460:	0800a7f4 	.word	0x0800a7f4
 8000464:	200010e7 	.word	0x200010e7
 8000468:	0800a7fc 	.word	0x0800a7fc
 800046c:	0800a804 	.word	0x0800a804
 8000470:	0800a80c 	.word	0x0800a80c
 8000474:	0800a814 	.word	0x0800a814
 8000478:	40012c00 	.word	0x40012c00

0800047c <DM_ShowFuncSelectMenu>:
 *
 *
 *
 */
void DM_ShowFuncSelectMenu(eFuncMenu_Status pValue)
{
 800047c:	b480      	push	{r7}
 800047e:	b083      	sub	sp, #12
 8000480:	af00      	add	r7, sp, #0
 8000482:	4603      	mov	r3, r0
 8000484:	71fb      	strb	r3, [r7, #7]
	eNextFuncMenuStatus = pValue;
 8000486:	4a04      	ldr	r2, [pc, #16]	; (8000498 <DM_ShowFuncSelectMenu+0x1c>)
 8000488:	79fb      	ldrb	r3, [r7, #7]
 800048a:	7013      	strb	r3, [r2, #0]
}
 800048c:	bf00      	nop
 800048e:	370c      	adds	r7, #12
 8000490:	46bd      	mov	sp, r7
 8000492:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000496:	4770      	bx	lr
 8000498:	200010e4 	.word	0x200010e4

0800049c <_DrawFuncSelectMenu>:
 *
 *
 *
 */
void _DrawFuncSelectMenu()
{
 800049c:	b580      	push	{r7, lr}
 800049e:	b082      	sub	sp, #8
 80004a0:	af02      	add	r7, sp, #8

	switch(FuncO_GetOutputMode())
 80004a2:	f000 ff1d 	bl	80012e0 <FuncO_GetOutputMode>
 80004a6:	4603      	mov	r3, r0
 80004a8:	2b05      	cmp	r3, #5
 80004aa:	f200 81a1 	bhi.w	80007f0 <_DrawFuncSelectMenu+0x354>
 80004ae:	a201      	add	r2, pc, #4	; (adr r2, 80004b4 <_DrawFuncSelectMenu+0x18>)
 80004b0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80004b4:	080004cd 	.word	0x080004cd
 80004b8:	08000553 	.word	0x08000553
 80004bc:	080005d9 	.word	0x080005d9
 80004c0:	0800065f 	.word	0x0800065f
 80004c4:	080006e5 	.word	0x080006e5
 80004c8:	0800076b 	.word	0x0800076b
	{
		case Sine_Out_Mode:
			ILI9341_Draw_Text("- SINE", 	10, 30, WHITE, 2, BLACK);
 80004cc:	2300      	movs	r3, #0
 80004ce:	9301      	str	r3, [sp, #4]
 80004d0:	2302      	movs	r3, #2
 80004d2:	9300      	str	r3, [sp, #0]
 80004d4:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80004d8:	221e      	movs	r2, #30
 80004da:	210a      	movs	r1, #10
 80004dc:	48c6      	ldr	r0, [pc, #792]	; (80007f8 <_DrawFuncSelectMenu+0x35c>)
 80004de:	f008 fb59 	bl	8008b94 <ILI9341_Draw_Text>
			ILI9341_Draw_Text("- SQUARE", 	10, 50, BLACK, 2, WHITE);
 80004e2:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80004e6:	9301      	str	r3, [sp, #4]
 80004e8:	2302      	movs	r3, #2
 80004ea:	9300      	str	r3, [sp, #0]
 80004ec:	2300      	movs	r3, #0
 80004ee:	2232      	movs	r2, #50	; 0x32
 80004f0:	210a      	movs	r1, #10
 80004f2:	48c2      	ldr	r0, [pc, #776]	; (80007fc <_DrawFuncSelectMenu+0x360>)
 80004f4:	f008 fb4e 	bl	8008b94 <ILI9341_Draw_Text>
			ILI9341_Draw_Text("- SAW", 		10, 70, BLACK, 2, WHITE);
 80004f8:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80004fc:	9301      	str	r3, [sp, #4]
 80004fe:	2302      	movs	r3, #2
 8000500:	9300      	str	r3, [sp, #0]
 8000502:	2300      	movs	r3, #0
 8000504:	2246      	movs	r2, #70	; 0x46
 8000506:	210a      	movs	r1, #10
 8000508:	48bd      	ldr	r0, [pc, #756]	; (8000800 <_DrawFuncSelectMenu+0x364>)
 800050a:	f008 fb43 	bl	8008b94 <ILI9341_Draw_Text>
			ILI9341_Draw_Text("- REV SAW", 	10, 90, BLACK, 2, WHITE);
 800050e:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000512:	9301      	str	r3, [sp, #4]
 8000514:	2302      	movs	r3, #2
 8000516:	9300      	str	r3, [sp, #0]
 8000518:	2300      	movs	r3, #0
 800051a:	225a      	movs	r2, #90	; 0x5a
 800051c:	210a      	movs	r1, #10
 800051e:	48b9      	ldr	r0, [pc, #740]	; (8000804 <_DrawFuncSelectMenu+0x368>)
 8000520:	f008 fb38 	bl	8008b94 <ILI9341_Draw_Text>
			ILI9341_Draw_Text("- TRIANGLE",	10, 110, BLACK, 2, WHITE);
 8000524:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000528:	9301      	str	r3, [sp, #4]
 800052a:	2302      	movs	r3, #2
 800052c:	9300      	str	r3, [sp, #0]
 800052e:	2300      	movs	r3, #0
 8000530:	226e      	movs	r2, #110	; 0x6e
 8000532:	210a      	movs	r1, #10
 8000534:	48b4      	ldr	r0, [pc, #720]	; (8000808 <_DrawFuncSelectMenu+0x36c>)
 8000536:	f008 fb2d 	bl	8008b94 <ILI9341_Draw_Text>
			ILI9341_Draw_Text("- UNIT", 	10, 130, BLACK, 2, WHITE);
 800053a:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800053e:	9301      	str	r3, [sp, #4]
 8000540:	2302      	movs	r3, #2
 8000542:	9300      	str	r3, [sp, #0]
 8000544:	2300      	movs	r3, #0
 8000546:	2282      	movs	r2, #130	; 0x82
 8000548:	210a      	movs	r1, #10
 800054a:	48b0      	ldr	r0, [pc, #704]	; (800080c <_DrawFuncSelectMenu+0x370>)
 800054c:	f008 fb22 	bl	8008b94 <ILI9341_Draw_Text>
			break;
 8000550:	e14e      	b.n	80007f0 <_DrawFuncSelectMenu+0x354>
		case Square_Out_Mode:
			ILI9341_Draw_Text("- SINE", 	10, 30, BLACK, 2, WHITE);
 8000552:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000556:	9301      	str	r3, [sp, #4]
 8000558:	2302      	movs	r3, #2
 800055a:	9300      	str	r3, [sp, #0]
 800055c:	2300      	movs	r3, #0
 800055e:	221e      	movs	r2, #30
 8000560:	210a      	movs	r1, #10
 8000562:	48a5      	ldr	r0, [pc, #660]	; (80007f8 <_DrawFuncSelectMenu+0x35c>)
 8000564:	f008 fb16 	bl	8008b94 <ILI9341_Draw_Text>
			ILI9341_Draw_Text("- SQUARE", 	10, 50, WHITE, 2, BLACK);
 8000568:	2300      	movs	r3, #0
 800056a:	9301      	str	r3, [sp, #4]
 800056c:	2302      	movs	r3, #2
 800056e:	9300      	str	r3, [sp, #0]
 8000570:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000574:	2232      	movs	r2, #50	; 0x32
 8000576:	210a      	movs	r1, #10
 8000578:	48a0      	ldr	r0, [pc, #640]	; (80007fc <_DrawFuncSelectMenu+0x360>)
 800057a:	f008 fb0b 	bl	8008b94 <ILI9341_Draw_Text>
			ILI9341_Draw_Text("- SAW", 		10, 70, BLACK, 2, WHITE);
 800057e:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000582:	9301      	str	r3, [sp, #4]
 8000584:	2302      	movs	r3, #2
 8000586:	9300      	str	r3, [sp, #0]
 8000588:	2300      	movs	r3, #0
 800058a:	2246      	movs	r2, #70	; 0x46
 800058c:	210a      	movs	r1, #10
 800058e:	489c      	ldr	r0, [pc, #624]	; (8000800 <_DrawFuncSelectMenu+0x364>)
 8000590:	f008 fb00 	bl	8008b94 <ILI9341_Draw_Text>
			ILI9341_Draw_Text("- REV SAW", 	10, 90, BLACK, 2, WHITE);
 8000594:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000598:	9301      	str	r3, [sp, #4]
 800059a:	2302      	movs	r3, #2
 800059c:	9300      	str	r3, [sp, #0]
 800059e:	2300      	movs	r3, #0
 80005a0:	225a      	movs	r2, #90	; 0x5a
 80005a2:	210a      	movs	r1, #10
 80005a4:	4897      	ldr	r0, [pc, #604]	; (8000804 <_DrawFuncSelectMenu+0x368>)
 80005a6:	f008 faf5 	bl	8008b94 <ILI9341_Draw_Text>
			ILI9341_Draw_Text("- TRIANGLE",	10, 110, BLACK, 2, WHITE);
 80005aa:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80005ae:	9301      	str	r3, [sp, #4]
 80005b0:	2302      	movs	r3, #2
 80005b2:	9300      	str	r3, [sp, #0]
 80005b4:	2300      	movs	r3, #0
 80005b6:	226e      	movs	r2, #110	; 0x6e
 80005b8:	210a      	movs	r1, #10
 80005ba:	4893      	ldr	r0, [pc, #588]	; (8000808 <_DrawFuncSelectMenu+0x36c>)
 80005bc:	f008 faea 	bl	8008b94 <ILI9341_Draw_Text>
			ILI9341_Draw_Text("- UNIT", 	10, 130, BLACK, 2, WHITE);
 80005c0:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80005c4:	9301      	str	r3, [sp, #4]
 80005c6:	2302      	movs	r3, #2
 80005c8:	9300      	str	r3, [sp, #0]
 80005ca:	2300      	movs	r3, #0
 80005cc:	2282      	movs	r2, #130	; 0x82
 80005ce:	210a      	movs	r1, #10
 80005d0:	488e      	ldr	r0, [pc, #568]	; (800080c <_DrawFuncSelectMenu+0x370>)
 80005d2:	f008 fadf 	bl	8008b94 <ILI9341_Draw_Text>
			break;
 80005d6:	e10b      	b.n	80007f0 <_DrawFuncSelectMenu+0x354>
		case Saw_Out_Mode:
			ILI9341_Draw_Text("- SINE", 	10, 30, BLACK, 2, WHITE);
 80005d8:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80005dc:	9301      	str	r3, [sp, #4]
 80005de:	2302      	movs	r3, #2
 80005e0:	9300      	str	r3, [sp, #0]
 80005e2:	2300      	movs	r3, #0
 80005e4:	221e      	movs	r2, #30
 80005e6:	210a      	movs	r1, #10
 80005e8:	4883      	ldr	r0, [pc, #524]	; (80007f8 <_DrawFuncSelectMenu+0x35c>)
 80005ea:	f008 fad3 	bl	8008b94 <ILI9341_Draw_Text>
			ILI9341_Draw_Text("- SQUARE", 	10, 50, BLACK, 2, WHITE);
 80005ee:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80005f2:	9301      	str	r3, [sp, #4]
 80005f4:	2302      	movs	r3, #2
 80005f6:	9300      	str	r3, [sp, #0]
 80005f8:	2300      	movs	r3, #0
 80005fa:	2232      	movs	r2, #50	; 0x32
 80005fc:	210a      	movs	r1, #10
 80005fe:	487f      	ldr	r0, [pc, #508]	; (80007fc <_DrawFuncSelectMenu+0x360>)
 8000600:	f008 fac8 	bl	8008b94 <ILI9341_Draw_Text>
			ILI9341_Draw_Text("- SAW", 		10, 70, WHITE, 2, BLACK);
 8000604:	2300      	movs	r3, #0
 8000606:	9301      	str	r3, [sp, #4]
 8000608:	2302      	movs	r3, #2
 800060a:	9300      	str	r3, [sp, #0]
 800060c:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000610:	2246      	movs	r2, #70	; 0x46
 8000612:	210a      	movs	r1, #10
 8000614:	487a      	ldr	r0, [pc, #488]	; (8000800 <_DrawFuncSelectMenu+0x364>)
 8000616:	f008 fabd 	bl	8008b94 <ILI9341_Draw_Text>
			ILI9341_Draw_Text("- REV SAW", 	10, 90, BLACK, 2, WHITE);
 800061a:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800061e:	9301      	str	r3, [sp, #4]
 8000620:	2302      	movs	r3, #2
 8000622:	9300      	str	r3, [sp, #0]
 8000624:	2300      	movs	r3, #0
 8000626:	225a      	movs	r2, #90	; 0x5a
 8000628:	210a      	movs	r1, #10
 800062a:	4876      	ldr	r0, [pc, #472]	; (8000804 <_DrawFuncSelectMenu+0x368>)
 800062c:	f008 fab2 	bl	8008b94 <ILI9341_Draw_Text>
			ILI9341_Draw_Text("- TRIANGLE",	10, 110, BLACK, 2, WHITE);
 8000630:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000634:	9301      	str	r3, [sp, #4]
 8000636:	2302      	movs	r3, #2
 8000638:	9300      	str	r3, [sp, #0]
 800063a:	2300      	movs	r3, #0
 800063c:	226e      	movs	r2, #110	; 0x6e
 800063e:	210a      	movs	r1, #10
 8000640:	4871      	ldr	r0, [pc, #452]	; (8000808 <_DrawFuncSelectMenu+0x36c>)
 8000642:	f008 faa7 	bl	8008b94 <ILI9341_Draw_Text>
			ILI9341_Draw_Text("- UNIT", 	10, 130, BLACK, 2, WHITE);
 8000646:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800064a:	9301      	str	r3, [sp, #4]
 800064c:	2302      	movs	r3, #2
 800064e:	9300      	str	r3, [sp, #0]
 8000650:	2300      	movs	r3, #0
 8000652:	2282      	movs	r2, #130	; 0x82
 8000654:	210a      	movs	r1, #10
 8000656:	486d      	ldr	r0, [pc, #436]	; (800080c <_DrawFuncSelectMenu+0x370>)
 8000658:	f008 fa9c 	bl	8008b94 <ILI9341_Draw_Text>
			break;
 800065c:	e0c8      	b.n	80007f0 <_DrawFuncSelectMenu+0x354>
		case RevSaw_Out_Mode:
			ILI9341_Draw_Text("- SINE", 	10, 30, BLACK, 2, WHITE);
 800065e:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000662:	9301      	str	r3, [sp, #4]
 8000664:	2302      	movs	r3, #2
 8000666:	9300      	str	r3, [sp, #0]
 8000668:	2300      	movs	r3, #0
 800066a:	221e      	movs	r2, #30
 800066c:	210a      	movs	r1, #10
 800066e:	4862      	ldr	r0, [pc, #392]	; (80007f8 <_DrawFuncSelectMenu+0x35c>)
 8000670:	f008 fa90 	bl	8008b94 <ILI9341_Draw_Text>
			ILI9341_Draw_Text("- SQUARE", 	10, 50, BLACK, 2, WHITE);
 8000674:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000678:	9301      	str	r3, [sp, #4]
 800067a:	2302      	movs	r3, #2
 800067c:	9300      	str	r3, [sp, #0]
 800067e:	2300      	movs	r3, #0
 8000680:	2232      	movs	r2, #50	; 0x32
 8000682:	210a      	movs	r1, #10
 8000684:	485d      	ldr	r0, [pc, #372]	; (80007fc <_DrawFuncSelectMenu+0x360>)
 8000686:	f008 fa85 	bl	8008b94 <ILI9341_Draw_Text>
			ILI9341_Draw_Text("- SAW", 		10, 70, BLACK, 2, WHITE);
 800068a:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800068e:	9301      	str	r3, [sp, #4]
 8000690:	2302      	movs	r3, #2
 8000692:	9300      	str	r3, [sp, #0]
 8000694:	2300      	movs	r3, #0
 8000696:	2246      	movs	r2, #70	; 0x46
 8000698:	210a      	movs	r1, #10
 800069a:	4859      	ldr	r0, [pc, #356]	; (8000800 <_DrawFuncSelectMenu+0x364>)
 800069c:	f008 fa7a 	bl	8008b94 <ILI9341_Draw_Text>
			ILI9341_Draw_Text("- REV SAW", 	10, 90, WHITE, 2, BLACK);
 80006a0:	2300      	movs	r3, #0
 80006a2:	9301      	str	r3, [sp, #4]
 80006a4:	2302      	movs	r3, #2
 80006a6:	9300      	str	r3, [sp, #0]
 80006a8:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80006ac:	225a      	movs	r2, #90	; 0x5a
 80006ae:	210a      	movs	r1, #10
 80006b0:	4854      	ldr	r0, [pc, #336]	; (8000804 <_DrawFuncSelectMenu+0x368>)
 80006b2:	f008 fa6f 	bl	8008b94 <ILI9341_Draw_Text>
			ILI9341_Draw_Text("- TRIANGLE",	10, 110, BLACK, 2, WHITE);
 80006b6:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80006ba:	9301      	str	r3, [sp, #4]
 80006bc:	2302      	movs	r3, #2
 80006be:	9300      	str	r3, [sp, #0]
 80006c0:	2300      	movs	r3, #0
 80006c2:	226e      	movs	r2, #110	; 0x6e
 80006c4:	210a      	movs	r1, #10
 80006c6:	4850      	ldr	r0, [pc, #320]	; (8000808 <_DrawFuncSelectMenu+0x36c>)
 80006c8:	f008 fa64 	bl	8008b94 <ILI9341_Draw_Text>
			ILI9341_Draw_Text("- UNIT", 	10, 130, BLACK, 2, WHITE);
 80006cc:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80006d0:	9301      	str	r3, [sp, #4]
 80006d2:	2302      	movs	r3, #2
 80006d4:	9300      	str	r3, [sp, #0]
 80006d6:	2300      	movs	r3, #0
 80006d8:	2282      	movs	r2, #130	; 0x82
 80006da:	210a      	movs	r1, #10
 80006dc:	484b      	ldr	r0, [pc, #300]	; (800080c <_DrawFuncSelectMenu+0x370>)
 80006de:	f008 fa59 	bl	8008b94 <ILI9341_Draw_Text>
			break;
 80006e2:	e085      	b.n	80007f0 <_DrawFuncSelectMenu+0x354>
		case Triangle_Out_Mode:
			ILI9341_Draw_Text("- SINE", 	10, 30, BLACK, 2, WHITE);
 80006e4:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80006e8:	9301      	str	r3, [sp, #4]
 80006ea:	2302      	movs	r3, #2
 80006ec:	9300      	str	r3, [sp, #0]
 80006ee:	2300      	movs	r3, #0
 80006f0:	221e      	movs	r2, #30
 80006f2:	210a      	movs	r1, #10
 80006f4:	4840      	ldr	r0, [pc, #256]	; (80007f8 <_DrawFuncSelectMenu+0x35c>)
 80006f6:	f008 fa4d 	bl	8008b94 <ILI9341_Draw_Text>
			ILI9341_Draw_Text("- SQUARE", 	10, 50, BLACK, 2, WHITE);
 80006fa:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80006fe:	9301      	str	r3, [sp, #4]
 8000700:	2302      	movs	r3, #2
 8000702:	9300      	str	r3, [sp, #0]
 8000704:	2300      	movs	r3, #0
 8000706:	2232      	movs	r2, #50	; 0x32
 8000708:	210a      	movs	r1, #10
 800070a:	483c      	ldr	r0, [pc, #240]	; (80007fc <_DrawFuncSelectMenu+0x360>)
 800070c:	f008 fa42 	bl	8008b94 <ILI9341_Draw_Text>
			ILI9341_Draw_Text("- SAW", 		10, 70, BLACK, 2, WHITE);
 8000710:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000714:	9301      	str	r3, [sp, #4]
 8000716:	2302      	movs	r3, #2
 8000718:	9300      	str	r3, [sp, #0]
 800071a:	2300      	movs	r3, #0
 800071c:	2246      	movs	r2, #70	; 0x46
 800071e:	210a      	movs	r1, #10
 8000720:	4837      	ldr	r0, [pc, #220]	; (8000800 <_DrawFuncSelectMenu+0x364>)
 8000722:	f008 fa37 	bl	8008b94 <ILI9341_Draw_Text>
			ILI9341_Draw_Text("- REV SAW", 	10, 90, BLACK, 2, WHITE);
 8000726:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800072a:	9301      	str	r3, [sp, #4]
 800072c:	2302      	movs	r3, #2
 800072e:	9300      	str	r3, [sp, #0]
 8000730:	2300      	movs	r3, #0
 8000732:	225a      	movs	r2, #90	; 0x5a
 8000734:	210a      	movs	r1, #10
 8000736:	4833      	ldr	r0, [pc, #204]	; (8000804 <_DrawFuncSelectMenu+0x368>)
 8000738:	f008 fa2c 	bl	8008b94 <ILI9341_Draw_Text>
			ILI9341_Draw_Text("- TRIANGLE",	10, 110, WHITE, 2, BLACK);
 800073c:	2300      	movs	r3, #0
 800073e:	9301      	str	r3, [sp, #4]
 8000740:	2302      	movs	r3, #2
 8000742:	9300      	str	r3, [sp, #0]
 8000744:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000748:	226e      	movs	r2, #110	; 0x6e
 800074a:	210a      	movs	r1, #10
 800074c:	482e      	ldr	r0, [pc, #184]	; (8000808 <_DrawFuncSelectMenu+0x36c>)
 800074e:	f008 fa21 	bl	8008b94 <ILI9341_Draw_Text>
			ILI9341_Draw_Text("- UNIT", 	10, 130, BLACK, 2, WHITE);
 8000752:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000756:	9301      	str	r3, [sp, #4]
 8000758:	2302      	movs	r3, #2
 800075a:	9300      	str	r3, [sp, #0]
 800075c:	2300      	movs	r3, #0
 800075e:	2282      	movs	r2, #130	; 0x82
 8000760:	210a      	movs	r1, #10
 8000762:	482a      	ldr	r0, [pc, #168]	; (800080c <_DrawFuncSelectMenu+0x370>)
 8000764:	f008 fa16 	bl	8008b94 <ILI9341_Draw_Text>
			break;
 8000768:	e042      	b.n	80007f0 <_DrawFuncSelectMenu+0x354>
		case Impulse_Out_Mode:
			ILI9341_Draw_Text("- SINE", 	10, 30, BLACK, 2, WHITE);
 800076a:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800076e:	9301      	str	r3, [sp, #4]
 8000770:	2302      	movs	r3, #2
 8000772:	9300      	str	r3, [sp, #0]
 8000774:	2300      	movs	r3, #0
 8000776:	221e      	movs	r2, #30
 8000778:	210a      	movs	r1, #10
 800077a:	481f      	ldr	r0, [pc, #124]	; (80007f8 <_DrawFuncSelectMenu+0x35c>)
 800077c:	f008 fa0a 	bl	8008b94 <ILI9341_Draw_Text>
			ILI9341_Draw_Text("- SQUARE", 	10, 50, BLACK, 2, WHITE);
 8000780:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000784:	9301      	str	r3, [sp, #4]
 8000786:	2302      	movs	r3, #2
 8000788:	9300      	str	r3, [sp, #0]
 800078a:	2300      	movs	r3, #0
 800078c:	2232      	movs	r2, #50	; 0x32
 800078e:	210a      	movs	r1, #10
 8000790:	481a      	ldr	r0, [pc, #104]	; (80007fc <_DrawFuncSelectMenu+0x360>)
 8000792:	f008 f9ff 	bl	8008b94 <ILI9341_Draw_Text>
			ILI9341_Draw_Text("- SAW", 		10, 70, BLACK, 2, WHITE);
 8000796:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800079a:	9301      	str	r3, [sp, #4]
 800079c:	2302      	movs	r3, #2
 800079e:	9300      	str	r3, [sp, #0]
 80007a0:	2300      	movs	r3, #0
 80007a2:	2246      	movs	r2, #70	; 0x46
 80007a4:	210a      	movs	r1, #10
 80007a6:	4816      	ldr	r0, [pc, #88]	; (8000800 <_DrawFuncSelectMenu+0x364>)
 80007a8:	f008 f9f4 	bl	8008b94 <ILI9341_Draw_Text>
			ILI9341_Draw_Text("- REV SAW", 	10, 90, BLACK, 2, WHITE);
 80007ac:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80007b0:	9301      	str	r3, [sp, #4]
 80007b2:	2302      	movs	r3, #2
 80007b4:	9300      	str	r3, [sp, #0]
 80007b6:	2300      	movs	r3, #0
 80007b8:	225a      	movs	r2, #90	; 0x5a
 80007ba:	210a      	movs	r1, #10
 80007bc:	4811      	ldr	r0, [pc, #68]	; (8000804 <_DrawFuncSelectMenu+0x368>)
 80007be:	f008 f9e9 	bl	8008b94 <ILI9341_Draw_Text>
			ILI9341_Draw_Text("- TRIANGLE",	10, 110, BLACK, 2, WHITE);
 80007c2:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80007c6:	9301      	str	r3, [sp, #4]
 80007c8:	2302      	movs	r3, #2
 80007ca:	9300      	str	r3, [sp, #0]
 80007cc:	2300      	movs	r3, #0
 80007ce:	226e      	movs	r2, #110	; 0x6e
 80007d0:	210a      	movs	r1, #10
 80007d2:	480d      	ldr	r0, [pc, #52]	; (8000808 <_DrawFuncSelectMenu+0x36c>)
 80007d4:	f008 f9de 	bl	8008b94 <ILI9341_Draw_Text>
			ILI9341_Draw_Text("- UNIT", 	10, 130, WHITE, 2, BLACK);
 80007d8:	2300      	movs	r3, #0
 80007da:	9301      	str	r3, [sp, #4]
 80007dc:	2302      	movs	r3, #2
 80007de:	9300      	str	r3, [sp, #0]
 80007e0:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80007e4:	2282      	movs	r2, #130	; 0x82
 80007e6:	210a      	movs	r1, #10
 80007e8:	4808      	ldr	r0, [pc, #32]	; (800080c <_DrawFuncSelectMenu+0x370>)
 80007ea:	f008 f9d3 	bl	8008b94 <ILI9341_Draw_Text>
			break;
 80007ee:	bf00      	nop

	}

}
 80007f0:	bf00      	nop
 80007f2:	46bd      	mov	sp, r7
 80007f4:	bd80      	pop	{r7, pc}
 80007f6:	bf00      	nop
 80007f8:	0800a81c 	.word	0x0800a81c
 80007fc:	0800a824 	.word	0x0800a824
 8000800:	0800a830 	.word	0x0800a830
 8000804:	0800a838 	.word	0x0800a838
 8000808:	0800a844 	.word	0x0800a844
 800080c:	0800a850 	.word	0x0800a850

08000810 <DM_ShowGainSelectMenu>:
 *
 *
 *
 */
void DM_ShowGainSelectMenu(eGainMenu_Status pValue)
{
 8000810:	b480      	push	{r7}
 8000812:	b083      	sub	sp, #12
 8000814:	af00      	add	r7, sp, #0
 8000816:	4603      	mov	r3, r0
 8000818:	71fb      	strb	r3, [r7, #7]
	eNextGainMenuStatus = pValue;
 800081a:	4a04      	ldr	r2, [pc, #16]	; (800082c <DM_ShowGainSelectMenu+0x1c>)
 800081c:	79fb      	ldrb	r3, [r7, #7]
 800081e:	7013      	strb	r3, [r2, #0]
}
 8000820:	bf00      	nop
 8000822:	370c      	adds	r7, #12
 8000824:	46bd      	mov	sp, r7
 8000826:	f85d 7b04 	ldr.w	r7, [sp], #4
 800082a:	4770      	bx	lr
 800082c:	200010e5 	.word	0x200010e5

08000830 <_DrawGainSelectMenu>:
 *
 *
 *
 */
void _DrawGainSelectMenu()
{
 8000830:	b580      	push	{r7, lr}
 8000832:	b084      	sub	sp, #16
 8000834:	af02      	add	r7, sp, #8

	ILI9341_Draw_Text("Output Signal Gain: ", 	10, 120, BLACK, 2, WHITE);
 8000836:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800083a:	9301      	str	r3, [sp, #4]
 800083c:	2302      	movs	r3, #2
 800083e:	9300      	str	r3, [sp, #0]
 8000840:	2300      	movs	r3, #0
 8000842:	2278      	movs	r2, #120	; 0x78
 8000844:	210a      	movs	r1, #10
 8000846:	4810      	ldr	r0, [pc, #64]	; (8000888 <_DrawGainSelectMenu+0x58>)
 8000848:	f008 f9a4 	bl	8008b94 <ILI9341_Draw_Text>

	char gain[4] = "";
 800084c:	2300      	movs	r3, #0
 800084e:	607b      	str	r3, [r7, #4]
	//snprintf(gain, sizeof(gain), "%u", GO_GetOutputGain());
	if(DM_AddDigitPadding((uint16_t)GO_GetOutputGain(), gain, sizeof(gain)) == 0)
 8000850:	f000 fe40 	bl	80014d4 <GO_GetOutputGain>
 8000854:	4603      	mov	r3, r0
 8000856:	b29b      	uxth	r3, r3
 8000858:	1d39      	adds	r1, r7, #4
 800085a:	2204      	movs	r2, #4
 800085c:	4618      	mov	r0, r3
 800085e:	f000 f929 	bl	8000ab4 <DM_AddDigitPadding>
 8000862:	4603      	mov	r3, r0
 8000864:	2b00      	cmp	r3, #0
 8000866:	d10a      	bne.n	800087e <_DrawGainSelectMenu+0x4e>
		ILI9341_Draw_Text(gain, 250, 120, WHITE, 2, BLACK);
 8000868:	1d38      	adds	r0, r7, #4
 800086a:	2300      	movs	r3, #0
 800086c:	9301      	str	r3, [sp, #4]
 800086e:	2302      	movs	r3, #2
 8000870:	9300      	str	r3, [sp, #0]
 8000872:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000876:	2278      	movs	r2, #120	; 0x78
 8000878:	21fa      	movs	r1, #250	; 0xfa
 800087a:	f008 f98b 	bl	8008b94 <ILI9341_Draw_Text>

}
 800087e:	bf00      	nop
 8000880:	3708      	adds	r7, #8
 8000882:	46bd      	mov	sp, r7
 8000884:	bd80      	pop	{r7, pc}
 8000886:	bf00      	nop
 8000888:	0800a858 	.word	0x0800a858

0800088c <DM_ShowFreqSelectMenu>:
 *
 *
 *
 */
void DM_ShowFreqSelectMenu(eFreqMenu_Status pValue)
{
 800088c:	b480      	push	{r7}
 800088e:	b083      	sub	sp, #12
 8000890:	af00      	add	r7, sp, #0
 8000892:	4603      	mov	r3, r0
 8000894:	71fb      	strb	r3, [r7, #7]
	eNextFreqMenuStatus = pValue;
 8000896:	4a04      	ldr	r2, [pc, #16]	; (80008a8 <DM_ShowFreqSelectMenu+0x1c>)
 8000898:	79fb      	ldrb	r3, [r7, #7]
 800089a:	7013      	strb	r3, [r2, #0]
}
 800089c:	bf00      	nop
 800089e:	370c      	adds	r7, #12
 80008a0:	46bd      	mov	sp, r7
 80008a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008a6:	4770      	bx	lr
 80008a8:	200010e6 	.word	0x200010e6

080008ac <_DrawFreqSelectMenu>:
 *
 *
 *
 */
void _DrawFreqSelectMenu()
{
 80008ac:	b580      	push	{r7, lr}
 80008ae:	b084      	sub	sp, #16
 80008b0:	af02      	add	r7, sp, #8
	ILI9341_Draw_Text("Output Signal Freq: ", 	10, 120, BLACK, 2, WHITE);
 80008b2:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80008b6:	9301      	str	r3, [sp, #4]
 80008b8:	2302      	movs	r3, #2
 80008ba:	9300      	str	r3, [sp, #0]
 80008bc:	2300      	movs	r3, #0
 80008be:	2278      	movs	r2, #120	; 0x78
 80008c0:	210a      	movs	r1, #10
 80008c2:	4811      	ldr	r0, [pc, #68]	; (8000908 <_DrawFreqSelectMenu+0x5c>)
 80008c4:	f008 f966 	bl	8008b94 <ILI9341_Draw_Text>

	char freq[6] = "";
 80008c8:	2300      	movs	r3, #0
 80008ca:	603b      	str	r3, [r7, #0]
 80008cc:	2300      	movs	r3, #0
 80008ce:	80bb      	strh	r3, [r7, #4]
	//snprintf(freq, sizeof(freq), "%u", (uint8_t)FreqO_GetOutputFreq());
	if(DM_AddDigitPadding((uint16_t)FreqO_GetOutputFreq(), freq, sizeof(freq)) == 0)
 80008d0:	f000 fbfa 	bl	80010c8 <FreqO_GetOutputFreq>
 80008d4:	4603      	mov	r3, r0
 80008d6:	b29b      	uxth	r3, r3
 80008d8:	4639      	mov	r1, r7
 80008da:	2206      	movs	r2, #6
 80008dc:	4618      	mov	r0, r3
 80008de:	f000 f8e9 	bl	8000ab4 <DM_AddDigitPadding>
 80008e2:	4603      	mov	r3, r0
 80008e4:	2b00      	cmp	r3, #0
 80008e6:	d10a      	bne.n	80008fe <_DrawFreqSelectMenu+0x52>
		ILI9341_Draw_Text(freq, 250, 120, WHITE, 2, BLACK);
 80008e8:	4638      	mov	r0, r7
 80008ea:	2300      	movs	r3, #0
 80008ec:	9301      	str	r3, [sp, #4]
 80008ee:	2302      	movs	r3, #2
 80008f0:	9300      	str	r3, [sp, #0]
 80008f2:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80008f6:	2278      	movs	r2, #120	; 0x78
 80008f8:	21fa      	movs	r1, #250	; 0xfa
 80008fa:	f008 f94b 	bl	8008b94 <ILI9341_Draw_Text>
}
 80008fe:	bf00      	nop
 8000900:	3708      	adds	r7, #8
 8000902:	46bd      	mov	sp, r7
 8000904:	bd80      	pop	{r7, pc}
 8000906:	bf00      	nop
 8000908:	0800a870 	.word	0x0800a870

0800090c <DM_ShowBiasSelectMenu>:
 *
 *
 *
 */
void DM_ShowBiasSelectMenu(eBiasMenu_Status pValue)
{
 800090c:	b480      	push	{r7}
 800090e:	b083      	sub	sp, #12
 8000910:	af00      	add	r7, sp, #0
 8000912:	4603      	mov	r3, r0
 8000914:	71fb      	strb	r3, [r7, #7]
	eNextBiasMenuStatus = pValue;
 8000916:	4a04      	ldr	r2, [pc, #16]	; (8000928 <DM_ShowBiasSelectMenu+0x1c>)
 8000918:	79fb      	ldrb	r3, [r7, #7]
 800091a:	7013      	strb	r3, [r2, #0]
}
 800091c:	bf00      	nop
 800091e:	370c      	adds	r7, #12
 8000920:	46bd      	mov	sp, r7
 8000922:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000926:	4770      	bx	lr
 8000928:	200010e7 	.word	0x200010e7

0800092c <_DrawBiasSelectMenu>:
 *
 *
 *
 */
void _DrawBiasSelectMenu()
{
 800092c:	b580      	push	{r7, lr}
 800092e:	b086      	sub	sp, #24
 8000930:	af02      	add	r7, sp, #8
	ILI9341_Draw_Text("Output Signal Bias: ", 	10, 120, BLACK, 2, WHITE);
 8000932:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000936:	9301      	str	r3, [sp, #4]
 8000938:	2302      	movs	r3, #2
 800093a:	9300      	str	r3, [sp, #0]
 800093c:	2300      	movs	r3, #0
 800093e:	2278      	movs	r2, #120	; 0x78
 8000940:	210a      	movs	r1, #10
 8000942:	4823      	ldr	r0, [pc, #140]	; (80009d0 <_DrawBiasSelectMenu+0xa4>)
 8000944:	f008 f926 	bl	8008b94 <ILI9341_Draw_Text>

	char bias[5] = "";
 8000948:	2300      	movs	r3, #0
 800094a:	60bb      	str	r3, [r7, #8]
 800094c:	2300      	movs	r3, #0
 800094e:	733b      	strb	r3, [r7, #12]
	//snprintf(bias, sizeof(bias), "%u", (uint8_t)BO_GetOutputBias());
	if(DM_AddDigitPadding((uint16_t)BO_GetOutputBias(), bias, sizeof(bias)) == 0)
 8000950:	f000 fba0 	bl	8001094 <BO_GetOutputBias>
 8000954:	4603      	mov	r3, r0
 8000956:	b29b      	uxth	r3, r3
 8000958:	f107 0108 	add.w	r1, r7, #8
 800095c:	2205      	movs	r2, #5
 800095e:	4618      	mov	r0, r3
 8000960:	f000 f8a8 	bl	8000ab4 <DM_AddDigitPadding>
 8000964:	4603      	mov	r3, r0
 8000966:	2b00      	cmp	r3, #0
 8000968:	d12d      	bne.n	80009c6 <_DrawBiasSelectMenu+0x9a>
	{
		if(BO_GetBiasPolarity())
 800096a:	f000 fb41 	bl	8000ff0 <BO_GetBiasPolarity>
 800096e:	4603      	mov	r3, r0
 8000970:	2b00      	cmp	r3, #0
 8000972:	d014      	beq.n	800099e <_DrawBiasSelectMenu+0x72>
		{
			char symbol[2] = "+\0";
 8000974:	4b17      	ldr	r3, [pc, #92]	; (80009d4 <_DrawBiasSelectMenu+0xa8>)
 8000976:	881b      	ldrh	r3, [r3, #0]
 8000978:	80bb      	strh	r3, [r7, #4]
			//char test[10] = strcat(symbol, "10");
			ILI9341_Draw_Text(strcat(symbol, bias), 250, 120, WHITE, 2, BLACK);
 800097a:	f107 0208 	add.w	r2, r7, #8
 800097e:	1d3b      	adds	r3, r7, #4
 8000980:	4611      	mov	r1, r2
 8000982:	4618      	mov	r0, r3
 8000984:	f008 ffd0 	bl	8009928 <strcat>
 8000988:	2300      	movs	r3, #0
 800098a:	9301      	str	r3, [sp, #4]
 800098c:	2302      	movs	r3, #2
 800098e:	9300      	str	r3, [sp, #0]
 8000990:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000994:	2278      	movs	r2, #120	; 0x78
 8000996:	21fa      	movs	r1, #250	; 0xfa
 8000998:	f008 f8fc 	bl	8008b94 <ILI9341_Draw_Text>
			char symbol[2] = "-\0";
			ILI9341_Draw_Text(strcat(symbol, bias), 250, 120, WHITE, 2, BLACK);
		}
	}

}
 800099c:	e013      	b.n	80009c6 <_DrawBiasSelectMenu+0x9a>
			char symbol[2] = "-\0";
 800099e:	4b0e      	ldr	r3, [pc, #56]	; (80009d8 <_DrawBiasSelectMenu+0xac>)
 80009a0:	881b      	ldrh	r3, [r3, #0]
 80009a2:	803b      	strh	r3, [r7, #0]
			ILI9341_Draw_Text(strcat(symbol, bias), 250, 120, WHITE, 2, BLACK);
 80009a4:	f107 0208 	add.w	r2, r7, #8
 80009a8:	463b      	mov	r3, r7
 80009aa:	4611      	mov	r1, r2
 80009ac:	4618      	mov	r0, r3
 80009ae:	f008 ffbb 	bl	8009928 <strcat>
 80009b2:	2300      	movs	r3, #0
 80009b4:	9301      	str	r3, [sp, #4]
 80009b6:	2302      	movs	r3, #2
 80009b8:	9300      	str	r3, [sp, #0]
 80009ba:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80009be:	2278      	movs	r2, #120	; 0x78
 80009c0:	21fa      	movs	r1, #250	; 0xfa
 80009c2:	f008 f8e7 	bl	8008b94 <ILI9341_Draw_Text>
}
 80009c6:	bf00      	nop
 80009c8:	3710      	adds	r7, #16
 80009ca:	46bd      	mov	sp, r7
 80009cc:	bd80      	pop	{r7, pc}
 80009ce:	bf00      	nop
 80009d0:	0800a888 	.word	0x0800a888
 80009d4:	0800a8a0 	.word	0x0800a8a0
 80009d8:	0800a8a4 	.word	0x0800a8a4

080009dc <DM_DigitCount>:
 *
 *
 *
 */
int DM_DigitCount(int num)
{
 80009dc:	b480      	push	{r7}
 80009de:	b083      	sub	sp, #12
 80009e0:	af00      	add	r7, sp, #0
 80009e2:	6078      	str	r0, [r7, #4]
	if(num < 10)
 80009e4:	687b      	ldr	r3, [r7, #4]
 80009e6:	2b09      	cmp	r3, #9
 80009e8:	dc01      	bgt.n	80009ee <DM_DigitCount+0x12>
		return 1;
 80009ea:	2301      	movs	r3, #1
 80009ec:	e018      	b.n	8000a20 <DM_DigitCount+0x44>
	if(num < 100)
 80009ee:	687b      	ldr	r3, [r7, #4]
 80009f0:	2b63      	cmp	r3, #99	; 0x63
 80009f2:	dc01      	bgt.n	80009f8 <DM_DigitCount+0x1c>
		return 2;
 80009f4:	2302      	movs	r3, #2
 80009f6:	e013      	b.n	8000a20 <DM_DigitCount+0x44>
	if(num < 1000)
 80009f8:	687b      	ldr	r3, [r7, #4]
 80009fa:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80009fe:	da01      	bge.n	8000a04 <DM_DigitCount+0x28>
		return 3;
 8000a00:	2303      	movs	r3, #3
 8000a02:	e00d      	b.n	8000a20 <DM_DigitCount+0x44>
	if(num < 10000)
 8000a04:	687b      	ldr	r3, [r7, #4]
 8000a06:	f242 720f 	movw	r2, #9999	; 0x270f
 8000a0a:	4293      	cmp	r3, r2
 8000a0c:	dc01      	bgt.n	8000a12 <DM_DigitCount+0x36>
		return 4;
 8000a0e:	2304      	movs	r3, #4
 8000a10:	e006      	b.n	8000a20 <DM_DigitCount+0x44>
	if(num < 100000)
 8000a12:	687b      	ldr	r3, [r7, #4]
 8000a14:	4a05      	ldr	r2, [pc, #20]	; (8000a2c <DM_DigitCount+0x50>)
 8000a16:	4293      	cmp	r3, r2
 8000a18:	dc01      	bgt.n	8000a1e <DM_DigitCount+0x42>
		return 5;
 8000a1a:	2305      	movs	r3, #5
 8000a1c:	e000      	b.n	8000a20 <DM_DigitCount+0x44>
	else
		return 0;
 8000a1e:	2300      	movs	r3, #0
}
 8000a20:	4618      	mov	r0, r3
 8000a22:	370c      	adds	r7, #12
 8000a24:	46bd      	mov	sp, r7
 8000a26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a2a:	4770      	bx	lr
 8000a2c:	0001869f 	.word	0x0001869f

08000a30 <DM_RefreshBackgroundLayout>:
 * Call this only once during init.
 *
 *
 */
void DM_RefreshBackgroundLayout()
{
 8000a30:	b580      	push	{r7, lr}
 8000a32:	b084      	sub	sp, #16
 8000a34:	af04      	add	r7, sp, #16


	//ILI9341_Fill_Screen(WHITE);
	ILI9341_FillScreenGradient();
 8000a36:	f008 f8db 	bl	8008bf0 <ILI9341_FillScreenGradient>

	ILI9341_Draw_Bordered_Filled_Rectangle_Coord(	btn_x_pos[0],
 8000a3a:	4b1d      	ldr	r3, [pc, #116]	; (8000ab0 <DM_RefreshBackgroundLayout+0x80>)
 8000a3c:	8818      	ldrh	r0, [r3, #0]
 8000a3e:	2300      	movs	r3, #0
 8000a40:	9302      	str	r3, [sp, #8]
 8000a42:	2302      	movs	r3, #2
 8000a44:	9301      	str	r3, [sp, #4]
 8000a46:	f240 33ef 	movw	r3, #1007	; 0x3ef
 8000a4a:	9300      	str	r3, [sp, #0]
 8000a4c:	2332      	movs	r3, #50	; 0x32
 8000a4e:	2250      	movs	r2, #80	; 0x50
 8000a50:	21c8      	movs	r1, #200	; 0xc8
 8000a52:	f007 ff35 	bl	80088c0 <ILI9341_Draw_Bordered_Filled_Rectangle_Coord>
													BTN_HEIGHT,
													DARKCYAN,
													BORDER_SIZE,
													BLACK);

	ILI9341_Draw_Bordered_Filled_Rectangle_Coord(	btn_x_pos[1],
 8000a56:	4b16      	ldr	r3, [pc, #88]	; (8000ab0 <DM_RefreshBackgroundLayout+0x80>)
 8000a58:	8858      	ldrh	r0, [r3, #2]
 8000a5a:	2300      	movs	r3, #0
 8000a5c:	9302      	str	r3, [sp, #8]
 8000a5e:	2302      	movs	r3, #2
 8000a60:	9301      	str	r3, [sp, #4]
 8000a62:	f44f 7378 	mov.w	r3, #992	; 0x3e0
 8000a66:	9300      	str	r3, [sp, #0]
 8000a68:	2332      	movs	r3, #50	; 0x32
 8000a6a:	2250      	movs	r2, #80	; 0x50
 8000a6c:	21c8      	movs	r1, #200	; 0xc8
 8000a6e:	f007 ff27 	bl	80088c0 <ILI9341_Draw_Bordered_Filled_Rectangle_Coord>
													BTN_HEIGHT,
													DARKGREEN,
													BORDER_SIZE,
													BLACK);

	ILI9341_Draw_Bordered_Filled_Rectangle_Coord(	btn_x_pos[2],
 8000a72:	4b0f      	ldr	r3, [pc, #60]	; (8000ab0 <DM_RefreshBackgroundLayout+0x80>)
 8000a74:	8898      	ldrh	r0, [r3, #4]
 8000a76:	2300      	movs	r3, #0
 8000a78:	9302      	str	r3, [sp, #8]
 8000a7a:	2302      	movs	r3, #2
 8000a7c:	9301      	str	r3, [sp, #4]
 8000a7e:	f64f 73e0 	movw	r3, #65504	; 0xffe0
 8000a82:	9300      	str	r3, [sp, #0]
 8000a84:	2332      	movs	r3, #50	; 0x32
 8000a86:	2250      	movs	r2, #80	; 0x50
 8000a88:	21c8      	movs	r1, #200	; 0xc8
 8000a8a:	f007 ff19 	bl	80088c0 <ILI9341_Draw_Bordered_Filled_Rectangle_Coord>
													BTN_HEIGHT,
													YELLOW,
													BORDER_SIZE,
													BLACK);

	ILI9341_Draw_Bordered_Filled_Rectangle_Coord(	btn_x_pos[3],
 8000a8e:	4b08      	ldr	r3, [pc, #32]	; (8000ab0 <DM_RefreshBackgroundLayout+0x80>)
 8000a90:	88d8      	ldrh	r0, [r3, #6]
 8000a92:	2300      	movs	r3, #0
 8000a94:	9302      	str	r3, [sp, #8]
 8000a96:	2302      	movs	r3, #2
 8000a98:	9301      	str	r3, [sp, #4]
 8000a9a:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8000a9e:	9300      	str	r3, [sp, #0]
 8000aa0:	2332      	movs	r3, #50	; 0x32
 8000aa2:	2250      	movs	r2, #80	; 0x50
 8000aa4:	21c8      	movs	r1, #200	; 0xc8
 8000aa6:	f007 ff0b 	bl	80088c0 <ILI9341_Draw_Bordered_Filled_Rectangle_Coord>
													BTN_WIDTH,
													BTN_HEIGHT,
													RED,
													BORDER_SIZE,
													BLACK);
}
 8000aaa:	bf00      	nop
 8000aac:	46bd      	mov	sp, r7
 8000aae:	bd80      	pop	{r7, pc}
 8000ab0:	20000000 	.word	0x20000000

08000ab4 <DM_AddDigitPadding>:
 *				1 if buflen is invalid size
 *				2 unknown error
 *
 */
int DM_AddDigitPadding(uint16_t num, char *buffer, uint16_t buflen)
{
 8000ab4:	b580      	push	{r7, lr}
 8000ab6:	b084      	sub	sp, #16
 8000ab8:	af00      	add	r7, sp, #0
 8000aba:	4603      	mov	r3, r0
 8000abc:	6039      	str	r1, [r7, #0]
 8000abe:	80fb      	strh	r3, [r7, #6]
 8000ac0:	4613      	mov	r3, r2
 8000ac2:	80bb      	strh	r3, [r7, #4]
	if((buflen < 1) || (buflen > 6))
 8000ac4:	88bb      	ldrh	r3, [r7, #4]
 8000ac6:	2b00      	cmp	r3, #0
 8000ac8:	d002      	beq.n	8000ad0 <DM_AddDigitPadding+0x1c>
 8000aca:	88bb      	ldrh	r3, [r7, #4]
 8000acc:	2b06      	cmp	r3, #6
 8000ace:	d901      	bls.n	8000ad4 <DM_AddDigitPadding+0x20>
		return 1;
 8000ad0:	2301      	movs	r3, #1
 8000ad2:	e048      	b.n	8000b66 <DM_AddDigitPadding+0xb2>

	//char* tmpbuf = malloc(sizeof(buffer) * buflen);

	uint16_t tmpcnt = num;
 8000ad4:	88fb      	ldrh	r3, [r7, #6]
 8000ad6:	81fb      	strh	r3, [r7, #14]
	switch(DM_DigitCount(tmpcnt))
 8000ad8:	89fb      	ldrh	r3, [r7, #14]
 8000ada:	4618      	mov	r0, r3
 8000adc:	f7ff ff7e 	bl	80009dc <DM_DigitCount>
 8000ae0:	4603      	mov	r3, r0
 8000ae2:	2b05      	cmp	r3, #5
 8000ae4:	d83e      	bhi.n	8000b64 <DM_AddDigitPadding+0xb0>
 8000ae6:	a201      	add	r2, pc, #4	; (adr r2, 8000aec <DM_AddDigitPadding+0x38>)
 8000ae8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000aec:	08000b05 	.word	0x08000b05
 8000af0:	08000b15 	.word	0x08000b15
 8000af4:	08000b25 	.word	0x08000b25
 8000af8:	08000b35 	.word	0x08000b35
 8000afc:	08000b45 	.word	0x08000b45
 8000b00:	08000b55 	.word	0x08000b55
	{

		case 0:
			snprintf(buffer,buflen, "     ");
 8000b04:	88bb      	ldrh	r3, [r7, #4]
 8000b06:	4a1a      	ldr	r2, [pc, #104]	; (8000b70 <DM_AddDigitPadding+0xbc>)
 8000b08:	4619      	mov	r1, r3
 8000b0a:	6838      	ldr	r0, [r7, #0]
 8000b0c:	f008 fed8 	bl	80098c0 <sniprintf>
			return 0;
 8000b10:	2300      	movs	r3, #0
 8000b12:	e028      	b.n	8000b66 <DM_AddDigitPadding+0xb2>
		case 1:
			snprintf(buffer, buflen, "%u    ", tmpcnt);
 8000b14:	88b9      	ldrh	r1, [r7, #4]
 8000b16:	89fb      	ldrh	r3, [r7, #14]
 8000b18:	4a16      	ldr	r2, [pc, #88]	; (8000b74 <DM_AddDigitPadding+0xc0>)
 8000b1a:	6838      	ldr	r0, [r7, #0]
 8000b1c:	f008 fed0 	bl	80098c0 <sniprintf>
			return 0;
 8000b20:	2300      	movs	r3, #0
 8000b22:	e020      	b.n	8000b66 <DM_AddDigitPadding+0xb2>
		case 2:
			snprintf(buffer, buflen, "%u   ", tmpcnt);
 8000b24:	88b9      	ldrh	r1, [r7, #4]
 8000b26:	89fb      	ldrh	r3, [r7, #14]
 8000b28:	4a13      	ldr	r2, [pc, #76]	; (8000b78 <DM_AddDigitPadding+0xc4>)
 8000b2a:	6838      	ldr	r0, [r7, #0]
 8000b2c:	f008 fec8 	bl	80098c0 <sniprintf>
			return 0;
 8000b30:	2300      	movs	r3, #0
 8000b32:	e018      	b.n	8000b66 <DM_AddDigitPadding+0xb2>
		case 3:
			snprintf(buffer, buflen, "%u  ", tmpcnt);
 8000b34:	88b9      	ldrh	r1, [r7, #4]
 8000b36:	89fb      	ldrh	r3, [r7, #14]
 8000b38:	4a10      	ldr	r2, [pc, #64]	; (8000b7c <DM_AddDigitPadding+0xc8>)
 8000b3a:	6838      	ldr	r0, [r7, #0]
 8000b3c:	f008 fec0 	bl	80098c0 <sniprintf>
			return 0;
 8000b40:	2300      	movs	r3, #0
 8000b42:	e010      	b.n	8000b66 <DM_AddDigitPadding+0xb2>
		case 4:
			snprintf(buffer, buflen, "%u ", tmpcnt);
 8000b44:	88b9      	ldrh	r1, [r7, #4]
 8000b46:	89fb      	ldrh	r3, [r7, #14]
 8000b48:	4a0d      	ldr	r2, [pc, #52]	; (8000b80 <DM_AddDigitPadding+0xcc>)
 8000b4a:	6838      	ldr	r0, [r7, #0]
 8000b4c:	f008 feb8 	bl	80098c0 <sniprintf>
			return 0;
 8000b50:	2300      	movs	r3, #0
 8000b52:	e008      	b.n	8000b66 <DM_AddDigitPadding+0xb2>
		case 5:
			snprintf(buffer, buflen, "%u", tmpcnt);
 8000b54:	88b9      	ldrh	r1, [r7, #4]
 8000b56:	89fb      	ldrh	r3, [r7, #14]
 8000b58:	4a0a      	ldr	r2, [pc, #40]	; (8000b84 <DM_AddDigitPadding+0xd0>)
 8000b5a:	6838      	ldr	r0, [r7, #0]
 8000b5c:	f008 feb0 	bl	80098c0 <sniprintf>
			return 0;
 8000b60:	2300      	movs	r3, #0
 8000b62:	e000      	b.n	8000b66 <DM_AddDigitPadding+0xb2>

	}

	return 2;
 8000b64:	2302      	movs	r3, #2


}
 8000b66:	4618      	mov	r0, r3
 8000b68:	3710      	adds	r7, #16
 8000b6a:	46bd      	mov	sp, r7
 8000b6c:	bd80      	pop	{r7, pc}
 8000b6e:	bf00      	nop
 8000b70:	0800a8e0 	.word	0x0800a8e0
 8000b74:	0800a8e8 	.word	0x0800a8e8
 8000b78:	0800a8f0 	.word	0x0800a8f0
 8000b7c:	0800a8f8 	.word	0x0800a8f8
 8000b80:	0800a900 	.word	0x0800a900
 8000b84:	0800a904 	.word	0x0800a904

08000b88 <EM_ProcessEvent>:
 *
 * 	Main state machine for event process
 *
 */
void EM_ProcessEvent()
{
 8000b88:	b580      	push	{r7, lr}
 8000b8a:	af00      	add	r7, sp, #0

	switch(eNextState)
 8000b8c:	4b62      	ldr	r3, [pc, #392]	; (8000d18 <EM_ProcessEvent+0x190>)
 8000b8e:	781b      	ldrb	r3, [r3, #0]
 8000b90:	2b04      	cmp	r3, #4
 8000b92:	f200 80b3 	bhi.w	8000cfc <EM_ProcessEvent+0x174>
 8000b96:	a201      	add	r2, pc, #4	; (adr r2, 8000b9c <EM_ProcessEvent+0x14>)
 8000b98:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000b9c:	08000bb1 	.word	0x08000bb1
 8000ba0:	08000c05 	.word	0x08000c05
 8000ba4:	08000c2f 	.word	0x08000c2f
 8000ba8:	08000c59 	.word	0x08000c59
 8000bac:	08000cd3 	.word	0x08000cd3
	{
		case Idle_State:
			if(eNewEvent == evBlueBtn)
 8000bb0:	4b5a      	ldr	r3, [pc, #360]	; (8000d1c <EM_ProcessEvent+0x194>)
 8000bb2:	781b      	ldrb	r3, [r3, #0]
 8000bb4:	2b01      	cmp	r3, #1
 8000bb6:	d105      	bne.n	8000bc4 <EM_ProcessEvent+0x3c>
			{
				eNextState = _FuncMenuHandler();
 8000bb8:	f000 f8b2 	bl	8000d20 <_FuncMenuHandler>
 8000bbc:	4603      	mov	r3, r0
 8000bbe:	461a      	mov	r2, r3
 8000bc0:	4b55      	ldr	r3, [pc, #340]	; (8000d18 <EM_ProcessEvent+0x190>)
 8000bc2:	701a      	strb	r2, [r3, #0]
			}
			if(eNewEvent == evGreenBtn)
 8000bc4:	4b55      	ldr	r3, [pc, #340]	; (8000d1c <EM_ProcessEvent+0x194>)
 8000bc6:	781b      	ldrb	r3, [r3, #0]
 8000bc8:	2b02      	cmp	r3, #2
 8000bca:	d105      	bne.n	8000bd8 <EM_ProcessEvent+0x50>
			{
				eNextState = _FreqMenuHandler();
 8000bcc:	f000 f9ae 	bl	8000f2c <_FreqMenuHandler>
 8000bd0:	4603      	mov	r3, r0
 8000bd2:	461a      	mov	r2, r3
 8000bd4:	4b50      	ldr	r3, [pc, #320]	; (8000d18 <EM_ProcessEvent+0x190>)
 8000bd6:	701a      	strb	r2, [r3, #0]
			}
			if(eNewEvent == evYellowBtn)
 8000bd8:	4b50      	ldr	r3, [pc, #320]	; (8000d1c <EM_ProcessEvent+0x194>)
 8000bda:	781b      	ldrb	r3, [r3, #0]
 8000bdc:	2b03      	cmp	r3, #3
 8000bde:	d105      	bne.n	8000bec <EM_ProcessEvent+0x64>
			{
				eNextState = _GainMenuHandler();
 8000be0:	f000 f8f2 	bl	8000dc8 <_GainMenuHandler>
 8000be4:	4603      	mov	r3, r0
 8000be6:	461a      	mov	r2, r3
 8000be8:	4b4b      	ldr	r3, [pc, #300]	; (8000d18 <EM_ProcessEvent+0x190>)
 8000bea:	701a      	strb	r2, [r3, #0]
			}
			if(eNewEvent == evRedBtn)
 8000bec:	4b4b      	ldr	r3, [pc, #300]	; (8000d1c <EM_ProcessEvent+0x194>)
 8000bee:	781b      	ldrb	r3, [r3, #0]
 8000bf0:	2b04      	cmp	r3, #4
 8000bf2:	f040 8085 	bne.w	8000d00 <EM_ProcessEvent+0x178>
			{
				eNextState = _BiasMenuHandler();
 8000bf6:	f000 f943 	bl	8000e80 <_BiasMenuHandler>
 8000bfa:	4603      	mov	r3, r0
 8000bfc:	461a      	mov	r2, r3
 8000bfe:	4b46      	ldr	r3, [pc, #280]	; (8000d18 <EM_ProcessEvent+0x190>)
 8000c00:	701a      	strb	r2, [r3, #0]
			}

			break;
 8000c02:	e07d      	b.n	8000d00 <EM_ProcessEvent+0x178>

		case Func_Menu_State:
			if(eNewEvent == evEncoderSet)
 8000c04:	4b45      	ldr	r3, [pc, #276]	; (8000d1c <EM_ProcessEvent+0x194>)
 8000c06:	781b      	ldrb	r3, [r3, #0]
 8000c08:	2b05      	cmp	r3, #5
 8000c0a:	d105      	bne.n	8000c18 <EM_ProcessEvent+0x90>
			{
				eNextState = _FuncSetHandler();
 8000c0c:	f000 f8a8 	bl	8000d60 <_FuncSetHandler>
 8000c10:	4603      	mov	r3, r0
 8000c12:	461a      	mov	r2, r3
 8000c14:	4b40      	ldr	r3, [pc, #256]	; (8000d18 <EM_ProcessEvent+0x190>)
 8000c16:	701a      	strb	r2, [r3, #0]
			}
			if(eNewEvent == evEncoderPush)
 8000c18:	4b40      	ldr	r3, [pc, #256]	; (8000d1c <EM_ProcessEvent+0x194>)
 8000c1a:	781b      	ldrb	r3, [r3, #0]
 8000c1c:	2b06      	cmp	r3, #6
 8000c1e:	d171      	bne.n	8000d04 <EM_ProcessEvent+0x17c>
			{
				eNextState = _ExitFuncMenuHandler();
 8000c20:	f000 f8b0 	bl	8000d84 <_ExitFuncMenuHandler>
 8000c24:	4603      	mov	r3, r0
 8000c26:	461a      	mov	r2, r3
 8000c28:	4b3b      	ldr	r3, [pc, #236]	; (8000d18 <EM_ProcessEvent+0x190>)
 8000c2a:	701a      	strb	r2, [r3, #0]
			}
			break;
 8000c2c:	e06a      	b.n	8000d04 <EM_ProcessEvent+0x17c>

		case Gain_Menu_State:
			if(eNewEvent == evEncoderSet)
 8000c2e:	4b3b      	ldr	r3, [pc, #236]	; (8000d1c <EM_ProcessEvent+0x194>)
 8000c30:	781b      	ldrb	r3, [r3, #0]
 8000c32:	2b05      	cmp	r3, #5
 8000c34:	d105      	bne.n	8000c42 <EM_ProcessEvent+0xba>
			{
				eNextState = _GainSetHandler();
 8000c36:	f000 f8e9 	bl	8000e0c <_GainSetHandler>
 8000c3a:	4603      	mov	r3, r0
 8000c3c:	461a      	mov	r2, r3
 8000c3e:	4b36      	ldr	r3, [pc, #216]	; (8000d18 <EM_ProcessEvent+0x190>)
 8000c40:	701a      	strb	r2, [r3, #0]
			}
			if(eNewEvent == evEncoderPush)
 8000c42:	4b36      	ldr	r3, [pc, #216]	; (8000d1c <EM_ProcessEvent+0x194>)
 8000c44:	781b      	ldrb	r3, [r3, #0]
 8000c46:	2b06      	cmp	r3, #6
 8000c48:	d15e      	bne.n	8000d08 <EM_ProcessEvent+0x180>
			{
				eNextState = _ExitGainMenuHandler();
 8000c4a:	f000 f8f7 	bl	8000e3c <_ExitGainMenuHandler>
 8000c4e:	4603      	mov	r3, r0
 8000c50:	461a      	mov	r2, r3
 8000c52:	4b31      	ldr	r3, [pc, #196]	; (8000d18 <EM_ProcessEvent+0x190>)
 8000c54:	701a      	strb	r2, [r3, #0]
			}
			break;
 8000c56:	e057      	b.n	8000d08 <EM_ProcessEvent+0x180>

		case Freq_Menu_State:
			if(eNewEvent == evEncoderSet)
 8000c58:	4b30      	ldr	r3, [pc, #192]	; (8000d1c <EM_ProcessEvent+0x194>)
 8000c5a:	781b      	ldrb	r3, [r3, #0]
 8000c5c:	2b05      	cmp	r3, #5
 8000c5e:	d105      	bne.n	8000c6c <EM_ProcessEvent+0xe4>
			{
				eNextState = _FreqSetHandler();
 8000c60:	f000 f988 	bl	8000f74 <_FreqSetHandler>
 8000c64:	4603      	mov	r3, r0
 8000c66:	461a      	mov	r2, r3
 8000c68:	4b2b      	ldr	r3, [pc, #172]	; (8000d18 <EM_ProcessEvent+0x190>)
 8000c6a:	701a      	strb	r2, [r3, #0]
			}
			if(eNewEvent == evEncoderPush)
 8000c6c:	4b2b      	ldr	r3, [pc, #172]	; (8000d1c <EM_ProcessEvent+0x194>)
 8000c6e:	781b      	ldrb	r3, [r3, #0]
 8000c70:	2b06      	cmp	r3, #6
 8000c72:	d105      	bne.n	8000c80 <EM_ProcessEvent+0xf8>
			{
				eNextState = _ExitFreqMenuHandler();
 8000c74:	f000 f98a 	bl	8000f8c <_ExitFreqMenuHandler>
 8000c78:	4603      	mov	r3, r0
 8000c7a:	461a      	mov	r2, r3
 8000c7c:	4b26      	ldr	r3, [pc, #152]	; (8000d18 <EM_ProcessEvent+0x190>)
 8000c7e:	701a      	strb	r2, [r3, #0]
			}
			if(eNewEvent == evBlueBtn)
 8000c80:	4b26      	ldr	r3, [pc, #152]	; (8000d1c <EM_ProcessEvent+0x194>)
 8000c82:	781b      	ldrb	r3, [r3, #0]
 8000c84:	2b01      	cmp	r3, #1
 8000c86:	d105      	bne.n	8000c94 <EM_ProcessEvent+0x10c>
			{
				FreqO_ApplyPreset(FPRESET_1HZ);
 8000c88:	2000      	movs	r0, #0
 8000c8a:	f000 fa29 	bl	80010e0 <FreqO_ApplyPreset>
				eNextState = Freq_Menu_State;
 8000c8e:	4b22      	ldr	r3, [pc, #136]	; (8000d18 <EM_ProcessEvent+0x190>)
 8000c90:	2203      	movs	r2, #3
 8000c92:	701a      	strb	r2, [r3, #0]
			}
			if(eNewEvent == evGreenBtn)
 8000c94:	4b21      	ldr	r3, [pc, #132]	; (8000d1c <EM_ProcessEvent+0x194>)
 8000c96:	781b      	ldrb	r3, [r3, #0]
 8000c98:	2b02      	cmp	r3, #2
 8000c9a:	d105      	bne.n	8000ca8 <EM_ProcessEvent+0x120>
			{
				FreqO_ApplyPreset(FPRESET_100HZ);
 8000c9c:	2001      	movs	r0, #1
 8000c9e:	f000 fa1f 	bl	80010e0 <FreqO_ApplyPreset>
				eNextState = Freq_Menu_State;
 8000ca2:	4b1d      	ldr	r3, [pc, #116]	; (8000d18 <EM_ProcessEvent+0x190>)
 8000ca4:	2203      	movs	r2, #3
 8000ca6:	701a      	strb	r2, [r3, #0]
			}
			if(eNewEvent == evYellowBtn)
 8000ca8:	4b1c      	ldr	r3, [pc, #112]	; (8000d1c <EM_ProcessEvent+0x194>)
 8000caa:	781b      	ldrb	r3, [r3, #0]
 8000cac:	2b03      	cmp	r3, #3
 8000cae:	d105      	bne.n	8000cbc <EM_ProcessEvent+0x134>
			{
				FreqO_ApplyPreset(FPRESET_1KHZ);
 8000cb0:	2002      	movs	r0, #2
 8000cb2:	f000 fa15 	bl	80010e0 <FreqO_ApplyPreset>
				eNextState = Freq_Menu_State;
 8000cb6:	4b18      	ldr	r3, [pc, #96]	; (8000d18 <EM_ProcessEvent+0x190>)
 8000cb8:	2203      	movs	r2, #3
 8000cba:	701a      	strb	r2, [r3, #0]
			}
			if(eNewEvent == evRedBtn)
 8000cbc:	4b17      	ldr	r3, [pc, #92]	; (8000d1c <EM_ProcessEvent+0x194>)
 8000cbe:	781b      	ldrb	r3, [r3, #0]
 8000cc0:	2b04      	cmp	r3, #4
 8000cc2:	d123      	bne.n	8000d0c <EM_ProcessEvent+0x184>
			{
				FreqO_ApplyPreset(FPRESET_100KHZ);
 8000cc4:	2003      	movs	r0, #3
 8000cc6:	f000 fa0b 	bl	80010e0 <FreqO_ApplyPreset>
				eNextState = Freq_Menu_State;
 8000cca:	4b13      	ldr	r3, [pc, #76]	; (8000d18 <EM_ProcessEvent+0x190>)
 8000ccc:	2203      	movs	r2, #3
 8000cce:	701a      	strb	r2, [r3, #0]
			}
			break;
 8000cd0:	e01c      	b.n	8000d0c <EM_ProcessEvent+0x184>

		case Bias_Menu_State:
			if(eNewEvent == evEncoderSet)
 8000cd2:	4b12      	ldr	r3, [pc, #72]	; (8000d1c <EM_ProcessEvent+0x194>)
 8000cd4:	781b      	ldrb	r3, [r3, #0]
 8000cd6:	2b05      	cmp	r3, #5
 8000cd8:	d105      	bne.n	8000ce6 <EM_ProcessEvent+0x15e>
			{
				eNextState = _BiasSetHandler();
 8000cda:	f000 f8f3 	bl	8000ec4 <_BiasSetHandler>
 8000cde:	4603      	mov	r3, r0
 8000ce0:	461a      	mov	r2, r3
 8000ce2:	4b0d      	ldr	r3, [pc, #52]	; (8000d18 <EM_ProcessEvent+0x190>)
 8000ce4:	701a      	strb	r2, [r3, #0]
			}
			if(eNewEvent == evEncoderPush)
 8000ce6:	4b0d      	ldr	r3, [pc, #52]	; (8000d1c <EM_ProcessEvent+0x194>)
 8000ce8:	781b      	ldrb	r3, [r3, #0]
 8000cea:	2b06      	cmp	r3, #6
 8000cec:	d110      	bne.n	8000d10 <EM_ProcessEvent+0x188>
			{
				eNextState = _ExitBiasMenuHandler();
 8000cee:	f000 f8fb 	bl	8000ee8 <_ExitBiasMenuHandler>
 8000cf2:	4603      	mov	r3, r0
 8000cf4:	461a      	mov	r2, r3
 8000cf6:	4b08      	ldr	r3, [pc, #32]	; (8000d18 <EM_ProcessEvent+0x190>)
 8000cf8:	701a      	strb	r2, [r3, #0]
			}

			break;
 8000cfa:	e009      	b.n	8000d10 <EM_ProcessEvent+0x188>

		default:
			break;
 8000cfc:	bf00      	nop
 8000cfe:	e008      	b.n	8000d12 <EM_ProcessEvent+0x18a>
			break;
 8000d00:	bf00      	nop
 8000d02:	e006      	b.n	8000d12 <EM_ProcessEvent+0x18a>
			break;
 8000d04:	bf00      	nop
 8000d06:	e004      	b.n	8000d12 <EM_ProcessEvent+0x18a>
			break;
 8000d08:	bf00      	nop
 8000d0a:	e002      	b.n	8000d12 <EM_ProcessEvent+0x18a>
			break;
 8000d0c:	bf00      	nop
 8000d0e:	e000      	b.n	8000d12 <EM_ProcessEvent+0x18a>
			break;
 8000d10:	bf00      	nop
	}

}
 8000d12:	bf00      	nop
 8000d14:	bd80      	pop	{r7, pc}
 8000d16:	bf00      	nop
 8000d18:	200010e8 	.word	0x200010e8
 8000d1c:	200010e9 	.word	0x200010e9

08000d20 <_FuncMenuHandler>:
 *
 *	Business logic for evFunctionMenu events
 *
 */
eSystemState _FuncMenuHandler(void)
{
 8000d20:	b580      	push	{r7, lr}
 8000d22:	af00      	add	r7, sp, #0
#ifdef EM_SWV_DEBUG
	printf("FunctionMenu Event captured\n");
 8000d24:	480b      	ldr	r0, [pc, #44]	; (8000d54 <_FuncMenuHandler+0x34>)
 8000d26:	f008 fdc3 	bl	80098b0 <puts>
#endif

	// don't let the DisplayManager interrupt the LCD refresh
	HAL_TIM_Base_Stop_IT(&htim15);
 8000d2a:	480b      	ldr	r0, [pc, #44]	; (8000d58 <_FuncMenuHandler+0x38>)
 8000d2c:	f006 faf0 	bl	8007310 <HAL_TIM_Base_Stop_IT>
	{
		DM_RefreshBackgroundLayout();
 8000d30:	f7ff fe7e 	bl	8000a30 <DM_RefreshBackgroundLayout>
	}
	HAL_TIM_Base_Start_IT(&htim15);
 8000d34:	4808      	ldr	r0, [pc, #32]	; (8000d58 <_FuncMenuHandler+0x38>)
 8000d36:	f006 fab5 	bl	80072a4 <HAL_TIM_Base_Start_IT>

	DM_ShowFuncSelectMenu(ENABLE_FUNCMENU);
 8000d3a:	2001      	movs	r0, #1
 8000d3c:	f7ff fb9e 	bl	800047c <DM_ShowFuncSelectMenu>

	// set the rotary encoder limits to 0-20 for this menu
	ENCODER_TIMER->CNT = 20;
 8000d40:	4b06      	ldr	r3, [pc, #24]	; (8000d5c <_FuncMenuHandler+0x3c>)
 8000d42:	2214      	movs	r2, #20
 8000d44:	625a      	str	r2, [r3, #36]	; 0x24
	ENCODER_TIMER->ARR = 20;
 8000d46:	4b05      	ldr	r3, [pc, #20]	; (8000d5c <_FuncMenuHandler+0x3c>)
 8000d48:	2214      	movs	r2, #20
 8000d4a:	62da      	str	r2, [r3, #44]	; 0x2c

	return Func_Menu_State;
 8000d4c:	2301      	movs	r3, #1
}
 8000d4e:	4618      	mov	r0, r3
 8000d50:	bd80      	pop	{r7, pc}
 8000d52:	bf00      	nop
 8000d54:	0800a908 	.word	0x0800a908
 8000d58:	20001398 	.word	0x20001398
 8000d5c:	40012c00 	.word	0x40012c00

08000d60 <_FuncSetHandler>:
 *
 *	Business logic for evFunctionSet events
 *
 */
eSystemState _FuncSetHandler(void)
{
 8000d60:	b580      	push	{r7, lr}
 8000d62:	af00      	add	r7, sp, #0
#ifdef EM_SWV_DEBUG
	printf("FunctionAdjust Event captured\n");
 8000d64:	4805      	ldr	r0, [pc, #20]	; (8000d7c <_FuncSetHandler+0x1c>)
 8000d66:	f008 fda3 	bl	80098b0 <puts>
#endif


	FuncO_ModifyOutput();
 8000d6a:	f000 fa07 	bl	800117c <FuncO_ModifyOutput>
	eNewEvent = evBlueBtn;
 8000d6e:	4b04      	ldr	r3, [pc, #16]	; (8000d80 <_FuncSetHandler+0x20>)
 8000d70:	2201      	movs	r2, #1
 8000d72:	701a      	strb	r2, [r3, #0]
	return Func_Menu_State;
 8000d74:	2301      	movs	r3, #1
}
 8000d76:	4618      	mov	r0, r3
 8000d78:	bd80      	pop	{r7, pc}
 8000d7a:	bf00      	nop
 8000d7c:	0800a924 	.word	0x0800a924
 8000d80:	200010e9 	.word	0x200010e9

08000d84 <_ExitFuncMenuHandler>:
 *
 *
 *
 */
eSystemState _ExitFuncMenuHandler()
{
 8000d84:	b580      	push	{r7, lr}
 8000d86:	af00      	add	r7, sp, #0
#ifdef EM_SWV_DEBUG
	printf("ExitFuncMenu Event captured\n");
 8000d88:	480b      	ldr	r0, [pc, #44]	; (8000db8 <_ExitFuncMenuHandler+0x34>)
 8000d8a:	f008 fd91 	bl	80098b0 <puts>
#endif

	// disable the menu

	DM_ShowFuncSelectMenu(DISABLE_FUNCMENU);
 8000d8e:	2000      	movs	r0, #0
 8000d90:	f7ff fb74 	bl	800047c <DM_ShowFuncSelectMenu>

	// reset the encoder range

	ENCODER_TIMER->ARR = 1024;
 8000d94:	4b09      	ldr	r3, [pc, #36]	; (8000dbc <_ExitFuncMenuHandler+0x38>)
 8000d96:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000d9a:	62da      	str	r2, [r3, #44]	; 0x2c

	// don't let the DisplayManager interrupt the LCD refresh
	HAL_TIM_Base_Stop_IT(&htim15);
 8000d9c:	4808      	ldr	r0, [pc, #32]	; (8000dc0 <_ExitFuncMenuHandler+0x3c>)
 8000d9e:	f006 fab7 	bl	8007310 <HAL_TIM_Base_Stop_IT>
	{
		DM_RefreshBackgroundLayout();
 8000da2:	f7ff fe45 	bl	8000a30 <DM_RefreshBackgroundLayout>
	}
	HAL_TIM_Base_Start_IT(&htim15);
 8000da6:	4806      	ldr	r0, [pc, #24]	; (8000dc0 <_ExitFuncMenuHandler+0x3c>)
 8000da8:	f006 fa7c 	bl	80072a4 <HAL_TIM_Base_Start_IT>

	eNewEvent = evIdle;
 8000dac:	4b05      	ldr	r3, [pc, #20]	; (8000dc4 <_ExitFuncMenuHandler+0x40>)
 8000dae:	2200      	movs	r2, #0
 8000db0:	701a      	strb	r2, [r3, #0]
	return Idle_State;
 8000db2:	2300      	movs	r3, #0
}
 8000db4:	4618      	mov	r0, r3
 8000db6:	bd80      	pop	{r7, pc}
 8000db8:	0800a944 	.word	0x0800a944
 8000dbc:	40012c00 	.word	0x40012c00
 8000dc0:	20001398 	.word	0x20001398
 8000dc4:	200010e9 	.word	0x200010e9

08000dc8 <_GainMenuHandler>:
 *
 *	Business logic for AmplitudeAdjust events
 *
 */
eSystemState _GainMenuHandler()
{
 8000dc8:	b580      	push	{r7, lr}
 8000dca:	af00      	add	r7, sp, #0
#ifdef EM_SWV_DEBUG
	printf("GainMenu Event captured\n");
 8000dcc:	480c      	ldr	r0, [pc, #48]	; (8000e00 <_GainMenuHandler+0x38>)
 8000dce:	f008 fd6f 	bl	80098b0 <puts>
#endif

	// don't let the DisplayManager interrupt the LCD refresh
	HAL_TIM_Base_Stop_IT(&htim15);
 8000dd2:	480c      	ldr	r0, [pc, #48]	; (8000e04 <_GainMenuHandler+0x3c>)
 8000dd4:	f006 fa9c 	bl	8007310 <HAL_TIM_Base_Stop_IT>
	{
		DM_RefreshBackgroundLayout();
 8000dd8:	f7ff fe2a 	bl	8000a30 <DM_RefreshBackgroundLayout>
	}
	HAL_TIM_Base_Start_IT(&htim15);
 8000ddc:	4809      	ldr	r0, [pc, #36]	; (8000e04 <_GainMenuHandler+0x3c>)
 8000dde:	f006 fa61 	bl	80072a4 <HAL_TIM_Base_Start_IT>

	DM_ShowGainSelectMenu(ENABLE_GAINMENU);
 8000de2:	2001      	movs	r0, #1
 8000de4:	f7ff fd14 	bl	8000810 <DM_ShowGainSelectMenu>

	// set the rotary encoder limits to 0-32 for this menu
	ENCODER_TIMER->CNT = GO_GetOutputGain();
 8000de8:	f000 fb74 	bl	80014d4 <GO_GetOutputGain>
 8000dec:	4603      	mov	r3, r0
 8000dee:	461a      	mov	r2, r3
 8000df0:	4b05      	ldr	r3, [pc, #20]	; (8000e08 <_GainMenuHandler+0x40>)
 8000df2:	625a      	str	r2, [r3, #36]	; 0x24
	ENCODER_TIMER->ARR = 32;
 8000df4:	4b04      	ldr	r3, [pc, #16]	; (8000e08 <_GainMenuHandler+0x40>)
 8000df6:	2220      	movs	r2, #32
 8000df8:	62da      	str	r2, [r3, #44]	; 0x2c

	return Gain_Menu_State;
 8000dfa:	2302      	movs	r3, #2
}
 8000dfc:	4618      	mov	r0, r3
 8000dfe:	bd80      	pop	{r7, pc}
 8000e00:	0800a960 	.word	0x0800a960
 8000e04:	20001398 	.word	0x20001398
 8000e08:	40012c00 	.word	0x40012c00

08000e0c <_GainSetHandler>:
 *
 *
 *
 */
eSystemState _GainSetHandler()
{
 8000e0c:	b580      	push	{r7, lr}
 8000e0e:	af00      	add	r7, sp, #0
#ifdef EM_SWV_DEBUG
	printf("GainSet Event captured\n");
 8000e10:	4808      	ldr	r0, [pc, #32]	; (8000e34 <_GainSetHandler+0x28>)
 8000e12:	f008 fd4d 	bl	80098b0 <puts>
#endif

	GO_SetOutputToEncoder(SM_GetEncoderValue(ENCODER_REVERSE));
 8000e16:	2001      	movs	r0, #1
 8000e18:	f000 fb68 	bl	80014ec <SM_GetEncoderValue>
 8000e1c:	4603      	mov	r3, r0
 8000e1e:	b2db      	uxtb	r3, r3
 8000e20:	4618      	mov	r0, r3
 8000e22:	f000 fa69 	bl	80012f8 <GO_SetOutputToEncoder>

	eNewEvent = evYellowBtn;
 8000e26:	4b04      	ldr	r3, [pc, #16]	; (8000e38 <_GainSetHandler+0x2c>)
 8000e28:	2203      	movs	r2, #3
 8000e2a:	701a      	strb	r2, [r3, #0]
	return Gain_Menu_State;
 8000e2c:	2302      	movs	r3, #2
}
 8000e2e:	4618      	mov	r0, r3
 8000e30:	bd80      	pop	{r7, pc}
 8000e32:	bf00      	nop
 8000e34:	0800a978 	.word	0x0800a978
 8000e38:	200010e9 	.word	0x200010e9

08000e3c <_ExitGainMenuHandler>:
 *
 *
 *
 */
eSystemState _ExitGainMenuHandler()
{
 8000e3c:	b580      	push	{r7, lr}
 8000e3e:	af00      	add	r7, sp, #0
#ifdef EM_SWV_DEBUG
	printf("ExitGainMenu Event captured\n");
 8000e40:	480b      	ldr	r0, [pc, #44]	; (8000e70 <_ExitGainMenuHandler+0x34>)
 8000e42:	f008 fd35 	bl	80098b0 <puts>
#endif


	// disable the menu
	DM_ShowGainSelectMenu(DISABLE_GAINMENU);
 8000e46:	2000      	movs	r0, #0
 8000e48:	f7ff fce2 	bl	8000810 <DM_ShowGainSelectMenu>

	// reset the encoder range

	ENCODER_TIMER->ARR = 1024;
 8000e4c:	4b09      	ldr	r3, [pc, #36]	; (8000e74 <_ExitGainMenuHandler+0x38>)
 8000e4e:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000e52:	62da      	str	r2, [r3, #44]	; 0x2c

	// don't let the DisplayManager interrupt the LCD refresh
	HAL_TIM_Base_Stop_IT(&htim15);
 8000e54:	4808      	ldr	r0, [pc, #32]	; (8000e78 <_ExitGainMenuHandler+0x3c>)
 8000e56:	f006 fa5b 	bl	8007310 <HAL_TIM_Base_Stop_IT>
	{
		DM_RefreshBackgroundLayout();
 8000e5a:	f7ff fde9 	bl	8000a30 <DM_RefreshBackgroundLayout>
	}
	HAL_TIM_Base_Start_IT(&htim15);
 8000e5e:	4806      	ldr	r0, [pc, #24]	; (8000e78 <_ExitGainMenuHandler+0x3c>)
 8000e60:	f006 fa20 	bl	80072a4 <HAL_TIM_Base_Start_IT>

	eNewEvent = evIdle;
 8000e64:	4b05      	ldr	r3, [pc, #20]	; (8000e7c <_ExitGainMenuHandler+0x40>)
 8000e66:	2200      	movs	r2, #0
 8000e68:	701a      	strb	r2, [r3, #0]
	return Idle_State;
 8000e6a:	2300      	movs	r3, #0
}
 8000e6c:	4618      	mov	r0, r3
 8000e6e:	bd80      	pop	{r7, pc}
 8000e70:	0800a990 	.word	0x0800a990
 8000e74:	40012c00 	.word	0x40012c00
 8000e78:	20001398 	.word	0x20001398
 8000e7c:	200010e9 	.word	0x200010e9

08000e80 <_BiasMenuHandler>:
 *
 *	Business logic for BiasMenu events
 *
 */
eSystemState _BiasMenuHandler()
{
 8000e80:	b580      	push	{r7, lr}
 8000e82:	af00      	add	r7, sp, #0
#ifdef EM_SWV_DEBUG
	printf("BiasMenu Event captured\n");
 8000e84:	480c      	ldr	r0, [pc, #48]	; (8000eb8 <_BiasMenuHandler+0x38>)
 8000e86:	f008 fd13 	bl	80098b0 <puts>
#endif

	// don't let the DisplayManager interrupt the LCD refresh
	HAL_TIM_Base_Stop_IT(&htim15);
 8000e8a:	480c      	ldr	r0, [pc, #48]	; (8000ebc <_BiasMenuHandler+0x3c>)
 8000e8c:	f006 fa40 	bl	8007310 <HAL_TIM_Base_Stop_IT>
	{
		DM_RefreshBackgroundLayout();
 8000e90:	f7ff fdce 	bl	8000a30 <DM_RefreshBackgroundLayout>
	}
	HAL_TIM_Base_Start_IT(&htim15);
 8000e94:	4809      	ldr	r0, [pc, #36]	; (8000ebc <_BiasMenuHandler+0x3c>)
 8000e96:	f006 fa05 	bl	80072a4 <HAL_TIM_Base_Start_IT>

	DM_ShowBiasSelectMenu(ENABLE_BIASMENU);
 8000e9a:	2001      	movs	r0, #1
 8000e9c:	f7ff fd36 	bl	800090c <DM_ShowBiasSelectMenu>

	// set the rotary encoder limits to 0-20 for this menu


	ENCODER_TIMER->ARR = BIAS_MAX;
 8000ea0:	4b07      	ldr	r3, [pc, #28]	; (8000ec0 <_BiasMenuHandler+0x40>)
 8000ea2:	f44f 7248 	mov.w	r2, #800	; 0x320
 8000ea6:	62da      	str	r2, [r3, #44]	; 0x2c
	ENCODER_TIMER->CNT = BIAS_CENTER;
 8000ea8:	4b05      	ldr	r3, [pc, #20]	; (8000ec0 <_BiasMenuHandler+0x40>)
 8000eaa:	f44f 72c8 	mov.w	r2, #400	; 0x190
 8000eae:	625a      	str	r2, [r3, #36]	; 0x24

	return Bias_Menu_State;
 8000eb0:	2304      	movs	r3, #4
}
 8000eb2:	4618      	mov	r0, r3
 8000eb4:	bd80      	pop	{r7, pc}
 8000eb6:	bf00      	nop
 8000eb8:	0800a9ac 	.word	0x0800a9ac
 8000ebc:	20001398 	.word	0x20001398
 8000ec0:	40012c00 	.word	0x40012c00

08000ec4 <_BiasSetHandler>:
 *
 *
 *
 */
eSystemState _BiasSetHandler()
{
 8000ec4:	b580      	push	{r7, lr}
 8000ec6:	af00      	add	r7, sp, #0
#ifdef EM_SWV_DEBUG
	printf("BiasSet Event captured\n");
 8000ec8:	4805      	ldr	r0, [pc, #20]	; (8000ee0 <_BiasSetHandler+0x1c>)
 8000eca:	f008 fcf1 	bl	80098b0 <puts>
#endif

	BO_ModifyOutput();
 8000ece:	f000 f89b 	bl	8001008 <BO_ModifyOutput>

	eNewEvent = evRedBtn;
 8000ed2:	4b04      	ldr	r3, [pc, #16]	; (8000ee4 <_BiasSetHandler+0x20>)
 8000ed4:	2204      	movs	r2, #4
 8000ed6:	701a      	strb	r2, [r3, #0]
	return Bias_Menu_State;
 8000ed8:	2304      	movs	r3, #4
}
 8000eda:	4618      	mov	r0, r3
 8000edc:	bd80      	pop	{r7, pc}
 8000ede:	bf00      	nop
 8000ee0:	0800a9c4 	.word	0x0800a9c4
 8000ee4:	200010e9 	.word	0x200010e9

08000ee8 <_ExitBiasMenuHandler>:
 *
 *
 *
 */
eSystemState _ExitBiasMenuHandler()
{
 8000ee8:	b580      	push	{r7, lr}
 8000eea:	af00      	add	r7, sp, #0
#ifdef EM_SWV_DEBUG
	printf("ExitBiasMenu Event captured\n");
 8000eec:	480b      	ldr	r0, [pc, #44]	; (8000f1c <_ExitBiasMenuHandler+0x34>)
 8000eee:	f008 fcdf 	bl	80098b0 <puts>
#endif


	// disable the menu
	DM_ShowBiasSelectMenu(DISABLE_BIASMENU);
 8000ef2:	2000      	movs	r0, #0
 8000ef4:	f7ff fd0a 	bl	800090c <DM_ShowBiasSelectMenu>

	// reset the encoder range

	ENCODER_TIMER->ARR = 1024;
 8000ef8:	4b09      	ldr	r3, [pc, #36]	; (8000f20 <_ExitBiasMenuHandler+0x38>)
 8000efa:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000efe:	62da      	str	r2, [r3, #44]	; 0x2c

	// don't let the DisplayManager interrupt the LCD refresh
	HAL_TIM_Base_Stop_IT(&htim15);
 8000f00:	4808      	ldr	r0, [pc, #32]	; (8000f24 <_ExitBiasMenuHandler+0x3c>)
 8000f02:	f006 fa05 	bl	8007310 <HAL_TIM_Base_Stop_IT>
	{
		DM_RefreshBackgroundLayout();
 8000f06:	f7ff fd93 	bl	8000a30 <DM_RefreshBackgroundLayout>
	}
	HAL_TIM_Base_Start_IT(&htim15);
 8000f0a:	4806      	ldr	r0, [pc, #24]	; (8000f24 <_ExitBiasMenuHandler+0x3c>)
 8000f0c:	f006 f9ca 	bl	80072a4 <HAL_TIM_Base_Start_IT>

	eNewEvent = evIdle;
 8000f10:	4b05      	ldr	r3, [pc, #20]	; (8000f28 <_ExitBiasMenuHandler+0x40>)
 8000f12:	2200      	movs	r2, #0
 8000f14:	701a      	strb	r2, [r3, #0]
	return Idle_State;
 8000f16:	2300      	movs	r3, #0
}
 8000f18:	4618      	mov	r0, r3
 8000f1a:	bd80      	pop	{r7, pc}
 8000f1c:	0800a9dc 	.word	0x0800a9dc
 8000f20:	40012c00 	.word	0x40012c00
 8000f24:	20001398 	.word	0x20001398
 8000f28:	200010e9 	.word	0x200010e9

08000f2c <_FreqMenuHandler>:
 *
 *	Business logic for FREQ MENU events
 *
 */
eSystemState _FreqMenuHandler()
{
 8000f2c:	b580      	push	{r7, lr}
 8000f2e:	af00      	add	r7, sp, #0
#ifdef EM_SWV_DEBUG
	printf("FreqMenu Event captured\n");
 8000f30:	480c      	ldr	r0, [pc, #48]	; (8000f64 <_FreqMenuHandler+0x38>)
 8000f32:	f008 fcbd 	bl	80098b0 <puts>
#endif

	// don't let the DisplayManager interrupt the LCD refresh
	HAL_TIM_Base_Stop_IT(&htim15);
 8000f36:	480c      	ldr	r0, [pc, #48]	; (8000f68 <_FreqMenuHandler+0x3c>)
 8000f38:	f006 f9ea 	bl	8007310 <HAL_TIM_Base_Stop_IT>
	{
		DM_RefreshBackgroundLayout();
 8000f3c:	f7ff fd78 	bl	8000a30 <DM_RefreshBackgroundLayout>
	}
	HAL_TIM_Base_Start_IT(&htim15);
 8000f40:	4809      	ldr	r0, [pc, #36]	; (8000f68 <_FreqMenuHandler+0x3c>)
 8000f42:	f006 f9af 	bl	80072a4 <HAL_TIM_Base_Start_IT>

	DM_ShowFreqSelectMenu(ENABLE_FREQMENU);
 8000f46:	2001      	movs	r0, #1
 8000f48:	f7ff fca0 	bl	800088c <DM_ShowFreqSelectMenu>

	// set the rotary encoder limits to 0-20 for this menu
	ENCODER_TIMER->CNT = TIM8->ARR;
 8000f4c:	4b07      	ldr	r3, [pc, #28]	; (8000f6c <_FreqMenuHandler+0x40>)
 8000f4e:	4a08      	ldr	r2, [pc, #32]	; (8000f70 <_FreqMenuHandler+0x44>)
 8000f50:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000f52:	6253      	str	r3, [r2, #36]	; 0x24
	ENCODER_TIMER->ARR = FREQ_ENCODER_MAX;
 8000f54:	4b06      	ldr	r3, [pc, #24]	; (8000f70 <_FreqMenuHandler+0x44>)
 8000f56:	f44f 72c0 	mov.w	r2, #384	; 0x180
 8000f5a:	62da      	str	r2, [r3, #44]	; 0x2c

	return Freq_Menu_State;
 8000f5c:	2303      	movs	r3, #3
}
 8000f5e:	4618      	mov	r0, r3
 8000f60:	bd80      	pop	{r7, pc}
 8000f62:	bf00      	nop
 8000f64:	0800a9f8 	.word	0x0800a9f8
 8000f68:	20001398 	.word	0x20001398
 8000f6c:	40013400 	.word	0x40013400
 8000f70:	40012c00 	.word	0x40012c00

08000f74 <_FreqSetHandler>:
 *
 *
 *
 */
eSystemState _FreqSetHandler()
{
 8000f74:	b580      	push	{r7, lr}
 8000f76:	af00      	add	r7, sp, #0
#ifdef EM_SWV_DEBUG
	printf("FreqSet Event captured\n");
 8000f78:	4803      	ldr	r0, [pc, #12]	; (8000f88 <_FreqSetHandler+0x14>)
 8000f7a:	f008 fc99 	bl	80098b0 <puts>
#endif

	FreqO_ModifyOutput();
 8000f7e:	f000 f895 	bl	80010ac <FreqO_ModifyOutput>

	//eNewEvent = evGreenBtn;
	return Freq_Menu_State;
 8000f82:	2303      	movs	r3, #3
}
 8000f84:	4618      	mov	r0, r3
 8000f86:	bd80      	pop	{r7, pc}
 8000f88:	0800aa10 	.word	0x0800aa10

08000f8c <_ExitFreqMenuHandler>:
 *
 *
 *
 */
eSystemState _ExitFreqMenuHandler()
{
 8000f8c:	b580      	push	{r7, lr}
 8000f8e:	af00      	add	r7, sp, #0
#ifdef EM_SWV_DEBUG
	printf("ExitFreqMenu Event captured\n");
 8000f90:	480b      	ldr	r0, [pc, #44]	; (8000fc0 <_ExitFreqMenuHandler+0x34>)
 8000f92:	f008 fc8d 	bl	80098b0 <puts>
#endif


	// disable the menu
	DM_ShowFreqSelectMenu(DISABLE_FREQMENU);
 8000f96:	2000      	movs	r0, #0
 8000f98:	f7ff fc78 	bl	800088c <DM_ShowFreqSelectMenu>

	// reset the encoder range

	ENCODER_TIMER->ARR = 1024;
 8000f9c:	4b09      	ldr	r3, [pc, #36]	; (8000fc4 <_ExitFreqMenuHandler+0x38>)
 8000f9e:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000fa2:	62da      	str	r2, [r3, #44]	; 0x2c

	// don't let the DisplayManager interrupt the LCD refresh
	HAL_TIM_Base_Stop_IT(&htim15);
 8000fa4:	4808      	ldr	r0, [pc, #32]	; (8000fc8 <_ExitFreqMenuHandler+0x3c>)
 8000fa6:	f006 f9b3 	bl	8007310 <HAL_TIM_Base_Stop_IT>
	{
		DM_RefreshBackgroundLayout();
 8000faa:	f7ff fd41 	bl	8000a30 <DM_RefreshBackgroundLayout>
	}
	HAL_TIM_Base_Start_IT(&htim15);
 8000fae:	4806      	ldr	r0, [pc, #24]	; (8000fc8 <_ExitFreqMenuHandler+0x3c>)
 8000fb0:	f006 f978 	bl	80072a4 <HAL_TIM_Base_Start_IT>

	eNewEvent = evIdle;
 8000fb4:	4b05      	ldr	r3, [pc, #20]	; (8000fcc <_ExitFreqMenuHandler+0x40>)
 8000fb6:	2200      	movs	r2, #0
 8000fb8:	701a      	strb	r2, [r3, #0]
	return Idle_State;
 8000fba:	2300      	movs	r3, #0
}
 8000fbc:	4618      	mov	r0, r3
 8000fbe:	bd80      	pop	{r7, pc}
 8000fc0:	0800aa28 	.word	0x0800aa28
 8000fc4:	40012c00 	.word	0x40012c00
 8000fc8:	20001398 	.word	0x20001398
 8000fcc:	200010e9 	.word	0x200010e9

08000fd0 <EM_SetNewEvent>:
 *
 * 	Set by NVIC interrupt handlers
 *
 */
void EM_SetNewEvent(eSystemEvent pEvent)
{
 8000fd0:	b480      	push	{r7}
 8000fd2:	b083      	sub	sp, #12
 8000fd4:	af00      	add	r7, sp, #0
 8000fd6:	4603      	mov	r3, r0
 8000fd8:	71fb      	strb	r3, [r7, #7]
	eNewEvent = pEvent;
 8000fda:	4a04      	ldr	r2, [pc, #16]	; (8000fec <EM_SetNewEvent+0x1c>)
 8000fdc:	79fb      	ldrb	r3, [r7, #7]
 8000fde:	7013      	strb	r3, [r2, #0]
}
 8000fe0:	bf00      	nop
 8000fe2:	370c      	adds	r7, #12
 8000fe4:	46bd      	mov	sp, r7
 8000fe6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fea:	4770      	bx	lr
 8000fec:	200010e9 	.word	0x200010e9

08000ff0 <BO_GetBiasPolarity>:
 *
 *
 *
 */
eBias_Polarity BO_GetBiasPolarity()
{
 8000ff0:	b480      	push	{r7}
 8000ff2:	af00      	add	r7, sp, #0
	return eBiasPolarity;
 8000ff4:	4b03      	ldr	r3, [pc, #12]	; (8001004 <BO_GetBiasPolarity+0x14>)
 8000ff6:	781b      	ldrb	r3, [r3, #0]
}
 8000ff8:	4618      	mov	r0, r3
 8000ffa:	46bd      	mov	sp, r7
 8000ffc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001000:	4770      	bx	lr
 8001002:	bf00      	nop
 8001004:	20000008 	.word	0x20000008

08001008 <BO_ModifyOutput>:
 *
 *
 *
 */
void BO_ModifyOutput()
{
 8001008:	b580      	push	{r7, lr}
 800100a:	af00      	add	r7, sp, #0
	// apply negative dc bias
	if(SM_GetEncoderValue(ENCODER_REVERSE) < BIAS_CENTER) {
 800100c:	2001      	movs	r0, #1
 800100e:	f000 fa6d 	bl	80014ec <SM_GetEncoderValue>
 8001012:	4603      	mov	r3, r0
 8001014:	f5b3 7fc8 	cmp.w	r3, #400	; 0x190
 8001018:	d217      	bcs.n	800104a <BO_ModifyOutput+0x42>

		eBiasPolarity = INVERSEBIAS;
 800101a:	4b1c      	ldr	r3, [pc, #112]	; (800108c <BO_ModifyOutput+0x84>)
 800101c:	2200      	movs	r2, #0
 800101e:	701a      	strb	r2, [r3, #0]

		HAL_DAC_SetValue(	&hdac1,
							DAC1_CHANNEL_2,
							DAC_ALIGN_12B_R,
							(BIAS_CENTER - SM_GetEncoderValue(ENCODER_REVERSE)) * BIAS_MAG);
 8001020:	2001      	movs	r0, #1
 8001022:	f000 fa63 	bl	80014ec <SM_GetEncoderValue>
 8001026:	4603      	mov	r3, r0
 8001028:	f5c3 72c8 	rsb	r2, r3, #400	; 0x190
 800102c:	4613      	mov	r3, r2
 800102e:	009b      	lsls	r3, r3, #2
 8001030:	4413      	add	r3, r2
 8001032:	005b      	lsls	r3, r3, #1
		HAL_DAC_SetValue(	&hdac1,
 8001034:	2200      	movs	r2, #0
 8001036:	2110      	movs	r1, #16
 8001038:	4815      	ldr	r0, [pc, #84]	; (8001090 <BO_ModifyOutput+0x88>)
 800103a:	f003 fe9b 	bl	8004d74 <HAL_DAC_SetValue>

		HAL_GPIO_WritePin(	DCBIAS_INVERT_GPIO_Port,
 800103e:	2201      	movs	r2, #1
 8001040:	2108      	movs	r1, #8
 8001042:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001046:	f004 fd83 	bl	8005b50 <HAL_GPIO_WritePin>
							DCBIAS_INVERT_Pin,
							GPIO_PIN_SET);
	}
	// apply positive dc bias
	if(SM_GetEncoderValue(ENCODER_REVERSE) >= BIAS_CENTER) {
 800104a:	2001      	movs	r0, #1
 800104c:	f000 fa4e 	bl	80014ec <SM_GetEncoderValue>
 8001050:	4603      	mov	r3, r0
 8001052:	f5b3 7fc8 	cmp.w	r3, #400	; 0x190
 8001056:	d317      	bcc.n	8001088 <BO_ModifyOutput+0x80>

		eBiasPolarity = NORMALBIAS;
 8001058:	4b0c      	ldr	r3, [pc, #48]	; (800108c <BO_ModifyOutput+0x84>)
 800105a:	2201      	movs	r2, #1
 800105c:	701a      	strb	r2, [r3, #0]

		HAL_DAC_SetValue(	&hdac1,
							DAC1_CHANNEL_2,
							DAC_ALIGN_12B_R,
							(SM_GetEncoderValue(ENCODER_REVERSE) - BIAS_CENTER) * BIAS_MAG);
 800105e:	2001      	movs	r0, #1
 8001060:	f000 fa44 	bl	80014ec <SM_GetEncoderValue>
 8001064:	4603      	mov	r3, r0
 8001066:	f5a3 72c8 	sub.w	r2, r3, #400	; 0x190
 800106a:	4613      	mov	r3, r2
 800106c:	009b      	lsls	r3, r3, #2
 800106e:	4413      	add	r3, r2
 8001070:	005b      	lsls	r3, r3, #1
		HAL_DAC_SetValue(	&hdac1,
 8001072:	2200      	movs	r2, #0
 8001074:	2110      	movs	r1, #16
 8001076:	4806      	ldr	r0, [pc, #24]	; (8001090 <BO_ModifyOutput+0x88>)
 8001078:	f003 fe7c 	bl	8004d74 <HAL_DAC_SetValue>

		HAL_GPIO_WritePin(	DCBIAS_INVERT_GPIO_Port,
 800107c:	2200      	movs	r2, #0
 800107e:	2108      	movs	r1, #8
 8001080:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001084:	f004 fd64 	bl	8005b50 <HAL_GPIO_WritePin>
							DCBIAS_INVERT_Pin,
							GPIO_PIN_RESET);
	}
}
 8001088:	bf00      	nop
 800108a:	bd80      	pop	{r7, pc}
 800108c:	20000008 	.word	0x20000008
 8001090:	20001214 	.word	0x20001214

08001094 <BO_GetOutputBias>:
 *
 *
 *
 */
uint32_t BO_GetOutputBias()
{
 8001094:	b580      	push	{r7, lr}
 8001096:	af00      	add	r7, sp, #0
	return HAL_DAC_GetValue(&hdac1, DAC1_CHANNEL_2);
 8001098:	2110      	movs	r1, #16
 800109a:	4803      	ldr	r0, [pc, #12]	; (80010a8 <BO_GetOutputBias+0x14>)
 800109c:	f003 fea6 	bl	8004dec <HAL_DAC_GetValue>
 80010a0:	4603      	mov	r3, r0
}
 80010a2:	4618      	mov	r0, r3
 80010a4:	bd80      	pop	{r7, pc}
 80010a6:	bf00      	nop
 80010a8:	20001214 	.word	0x20001214

080010ac <FreqO_ModifyOutput>:
 *
 *
 *
 */
void FreqO_ModifyOutput()
{
 80010ac:	b580      	push	{r7, lr}
 80010ae:	af00      	add	r7, sp, #0
	TIM8->ARR = SM_GetEncoderValue(ENCODER_FORWARD) * FREQ_ENCODER_MAG;
 80010b0:	2000      	movs	r0, #0
 80010b2:	f000 fa1b 	bl	80014ec <SM_GetEncoderValue>
 80010b6:	4603      	mov	r3, r0
 80010b8:	461a      	mov	r2, r3
 80010ba:	4b02      	ldr	r3, [pc, #8]	; (80010c4 <FreqO_ModifyOutput+0x18>)
 80010bc:	62da      	str	r2, [r3, #44]	; 0x2c
}
 80010be:	bf00      	nop
 80010c0:	bd80      	pop	{r7, pc}
 80010c2:	bf00      	nop
 80010c4:	40013400 	.word	0x40013400

080010c8 <FreqO_GetOutputFreq>:
 *
 *
 *
 */
uint32_t FreqO_GetOutputFreq()
{
 80010c8:	b480      	push	{r7}
 80010ca:	af00      	add	r7, sp, #0
	return TIM8->ARR;
 80010cc:	4b03      	ldr	r3, [pc, #12]	; (80010dc <FreqO_GetOutputFreq+0x14>)
 80010ce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
}
 80010d0:	4618      	mov	r0, r3
 80010d2:	46bd      	mov	sp, r7
 80010d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010d8:	4770      	bx	lr
 80010da:	bf00      	nop
 80010dc:	40013400 	.word	0x40013400

080010e0 <FreqO_ApplyPreset>:
 *
 *
 *
 */
void FreqO_ApplyPreset(eFreq_Preset pPreset)
{
 80010e0:	b480      	push	{r7}
 80010e2:	b083      	sub	sp, #12
 80010e4:	af00      	add	r7, sp, #0
 80010e6:	4603      	mov	r3, r0
 80010e8:	71fb      	strb	r3, [r7, #7]
	switch(pPreset)
 80010ea:	79fb      	ldrb	r3, [r7, #7]
 80010ec:	2b03      	cmp	r3, #3
 80010ee:	d83a      	bhi.n	8001166 <FreqO_ApplyPreset+0x86>
 80010f0:	a201      	add	r2, pc, #4	; (adr r2, 80010f8 <FreqO_ApplyPreset+0x18>)
 80010f2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80010f6:	bf00      	nop
 80010f8:	08001109 	.word	0x08001109
 80010fc:	08001121 	.word	0x08001121
 8001100:	08001139 	.word	0x08001139
 8001104:	08001151 	.word	0x08001151
	{
		case FPRESET_1HZ:
			TIM8->PSC = 0x0002;
 8001108:	4b1a      	ldr	r3, [pc, #104]	; (8001174 <FreqO_ApplyPreset+0x94>)
 800110a:	2202      	movs	r2, #2
 800110c:	629a      	str	r2, [r3, #40]	; 0x28
			TIM8->ARR = 0xb5ff;
 800110e:	4b19      	ldr	r3, [pc, #100]	; (8001174 <FreqO_ApplyPreset+0x94>)
 8001110:	f24b 52ff 	movw	r2, #46591	; 0xb5ff
 8001114:	62da      	str	r2, [r3, #44]	; 0x2c
			ENCODER_TIMER->CNT = TIM8->ARR;
 8001116:	4b17      	ldr	r3, [pc, #92]	; (8001174 <FreqO_ApplyPreset+0x94>)
 8001118:	4a17      	ldr	r2, [pc, #92]	; (8001178 <FreqO_ApplyPreset+0x98>)
 800111a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800111c:	6253      	str	r3, [r2, #36]	; 0x24
			break;
 800111e:	e022      	b.n	8001166 <FreqO_ApplyPreset+0x86>
		case FPRESET_100HZ:
			TIM8->PSC = 0x0000;
 8001120:	4b14      	ldr	r3, [pc, #80]	; (8001174 <FreqO_ApplyPreset+0x94>)
 8001122:	2200      	movs	r2, #0
 8001124:	629a      	str	r2, [r3, #40]	; 0x28
			TIM8->ARR = 0x36bf;
 8001126:	4b13      	ldr	r3, [pc, #76]	; (8001174 <FreqO_ApplyPreset+0x94>)
 8001128:	f243 62bf 	movw	r2, #14015	; 0x36bf
 800112c:	62da      	str	r2, [r3, #44]	; 0x2c
			ENCODER_TIMER->CNT = TIM8->ARR;
 800112e:	4b11      	ldr	r3, [pc, #68]	; (8001174 <FreqO_ApplyPreset+0x94>)
 8001130:	4a11      	ldr	r2, [pc, #68]	; (8001178 <FreqO_ApplyPreset+0x98>)
 8001132:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001134:	6253      	str	r3, [r2, #36]	; 0x24
			break;
 8001136:	e016      	b.n	8001166 <FreqO_ApplyPreset+0x86>
		case FPRESET_1KHZ:
			TIM8->PSC = 0x0000;
 8001138:	4b0e      	ldr	r3, [pc, #56]	; (8001174 <FreqO_ApplyPreset+0x94>)
 800113a:	2200      	movs	r2, #0
 800113c:	629a      	str	r2, [r3, #40]	; 0x28
			TIM8->ARR = 0x0570;
 800113e:	4b0d      	ldr	r3, [pc, #52]	; (8001174 <FreqO_ApplyPreset+0x94>)
 8001140:	f44f 62ae 	mov.w	r2, #1392	; 0x570
 8001144:	62da      	str	r2, [r3, #44]	; 0x2c
			ENCODER_TIMER->CNT = TIM8->ARR;
 8001146:	4b0b      	ldr	r3, [pc, #44]	; (8001174 <FreqO_ApplyPreset+0x94>)
 8001148:	4a0b      	ldr	r2, [pc, #44]	; (8001178 <FreqO_ApplyPreset+0x98>)
 800114a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800114c:	6253      	str	r3, [r2, #36]	; 0x24
			break;
 800114e:	e00a      	b.n	8001166 <FreqO_ApplyPreset+0x86>
		case FPRESET_100KHZ:
			TIM8->PSC = 0x0000;
 8001150:	4b08      	ldr	r3, [pc, #32]	; (8001174 <FreqO_ApplyPreset+0x94>)
 8001152:	2200      	movs	r2, #0
 8001154:	629a      	str	r2, [r3, #40]	; 0x28
			TIM8->ARR = 0x0008;
 8001156:	4b07      	ldr	r3, [pc, #28]	; (8001174 <FreqO_ApplyPreset+0x94>)
 8001158:	2208      	movs	r2, #8
 800115a:	62da      	str	r2, [r3, #44]	; 0x2c
			ENCODER_TIMER->CNT = TIM8->ARR;
 800115c:	4b05      	ldr	r3, [pc, #20]	; (8001174 <FreqO_ApplyPreset+0x94>)
 800115e:	4a06      	ldr	r2, [pc, #24]	; (8001178 <FreqO_ApplyPreset+0x98>)
 8001160:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001162:	6253      	str	r3, [r2, #36]	; 0x24
			break;
 8001164:	bf00      	nop
	}
}
 8001166:	bf00      	nop
 8001168:	370c      	adds	r7, #12
 800116a:	46bd      	mov	sp, r7
 800116c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001170:	4770      	bx	lr
 8001172:	bf00      	nop
 8001174:	40013400 	.word	0x40013400
 8001178:	40012c00 	.word	0x40012c00

0800117c <FuncO_ModifyOutput>:

// signal output function
eOutput_mode eNewOutMode = Sine_Out_Mode;

void FuncO_ModifyOutput()
{
 800117c:	b580      	push	{r7, lr}
 800117e:	b082      	sub	sp, #8
 8001180:	af02      	add	r7, sp, #8


	switch(SM_GetEncoderValue(ENCODER_REVERSE))
 8001182:	2001      	movs	r0, #1
 8001184:	f000 f9b2 	bl	80014ec <SM_GetEncoderValue>
 8001188:	4603      	mov	r3, r0
 800118a:	2b17      	cmp	r3, #23
 800118c:	f200 8094 	bhi.w	80012b8 <FuncO_ModifyOutput+0x13c>
 8001190:	a201      	add	r2, pc, #4	; (adr r2, 8001198 <FuncO_ModifyOutput+0x1c>)
 8001192:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001196:	bf00      	nop
 8001198:	080011f9 	.word	0x080011f9
 800119c:	080011f9 	.word	0x080011f9
 80011a0:	080011f9 	.word	0x080011f9
 80011a4:	08001219 	.word	0x08001219
 80011a8:	08001219 	.word	0x08001219
 80011ac:	08001219 	.word	0x08001219
 80011b0:	08001219 	.word	0x08001219
 80011b4:	08001239 	.word	0x08001239
 80011b8:	08001239 	.word	0x08001239
 80011bc:	08001239 	.word	0x08001239
 80011c0:	08001239 	.word	0x08001239
 80011c4:	08001259 	.word	0x08001259
 80011c8:	08001259 	.word	0x08001259
 80011cc:	08001259 	.word	0x08001259
 80011d0:	08001259 	.word	0x08001259
 80011d4:	08001279 	.word	0x08001279
 80011d8:	08001279 	.word	0x08001279
 80011dc:	08001279 	.word	0x08001279
 80011e0:	08001279 	.word	0x08001279
 80011e4:	08001299 	.word	0x08001299
 80011e8:	08001299 	.word	0x08001299
 80011ec:	08001299 	.word	0x08001299
 80011f0:	08001299 	.word	0x08001299
 80011f4:	08001299 	.word	0x08001299
	{
		case 0:
		case 1:
		case 2:

			eNewOutMode = Sine_Out_Mode;
 80011f8:	4b31      	ldr	r3, [pc, #196]	; (80012c0 <FuncO_ModifyOutput+0x144>)
 80011fa:	2200      	movs	r2, #0
 80011fc:	701a      	strb	r2, [r3, #0]
			HAL_DAC_Stop_DMA(&hdac1, DAC1_CHANNEL_1);
 80011fe:	2100      	movs	r1, #0
 8001200:	4830      	ldr	r0, [pc, #192]	; (80012c4 <FuncO_ModifyOutput+0x148>)
 8001202:	f003 fd61 	bl	8004cc8 <HAL_DAC_Stop_DMA>
			HAL_DAC_Start_DMA(&hdac1, DAC1_CHANNEL_1, sine_data_table, SINE_DATA_SIZE, DAC_ALIGN_12B_R);
 8001206:	2300      	movs	r3, #0
 8001208:	9300      	str	r3, [sp, #0]
 800120a:	2378      	movs	r3, #120	; 0x78
 800120c:	4a2e      	ldr	r2, [pc, #184]	; (80012c8 <FuncO_ModifyOutput+0x14c>)
 800120e:	2100      	movs	r1, #0
 8001210:	482c      	ldr	r0, [pc, #176]	; (80012c4 <FuncO_ModifyOutput+0x148>)
 8001212:	f003 fc97 	bl	8004b44 <HAL_DAC_Start_DMA>
			break;
 8001216:	e04f      	b.n	80012b8 <FuncO_ModifyOutput+0x13c>
		case 3:
		case 4:
		case 5:
		case 6:

			eNewOutMode = Square_Out_Mode;
 8001218:	4b29      	ldr	r3, [pc, #164]	; (80012c0 <FuncO_ModifyOutput+0x144>)
 800121a:	2201      	movs	r2, #1
 800121c:	701a      	strb	r2, [r3, #0]
			HAL_DAC_Stop_DMA(&hdac1, DAC1_CHANNEL_1);
 800121e:	2100      	movs	r1, #0
 8001220:	4828      	ldr	r0, [pc, #160]	; (80012c4 <FuncO_ModifyOutput+0x148>)
 8001222:	f003 fd51 	bl	8004cc8 <HAL_DAC_Stop_DMA>
			HAL_DAC_Start_DMA(&hdac1, DAC1_CHANNEL_1, square_data_table, SQUARE_DATA_SIZE, DAC_ALIGN_12B_R);
 8001226:	2300      	movs	r3, #0
 8001228:	9300      	str	r3, [sp, #0]
 800122a:	2378      	movs	r3, #120	; 0x78
 800122c:	4a27      	ldr	r2, [pc, #156]	; (80012cc <FuncO_ModifyOutput+0x150>)
 800122e:	2100      	movs	r1, #0
 8001230:	4824      	ldr	r0, [pc, #144]	; (80012c4 <FuncO_ModifyOutput+0x148>)
 8001232:	f003 fc87 	bl	8004b44 <HAL_DAC_Start_DMA>

			break;
 8001236:	e03f      	b.n	80012b8 <FuncO_ModifyOutput+0x13c>
		case 7:
		case 8:
		case 9:
		case 10:

			eNewOutMode = Saw_Out_Mode;
 8001238:	4b21      	ldr	r3, [pc, #132]	; (80012c0 <FuncO_ModifyOutput+0x144>)
 800123a:	2202      	movs	r2, #2
 800123c:	701a      	strb	r2, [r3, #0]
			HAL_DAC_Stop_DMA(&hdac1, DAC1_CHANNEL_1);
 800123e:	2100      	movs	r1, #0
 8001240:	4820      	ldr	r0, [pc, #128]	; (80012c4 <FuncO_ModifyOutput+0x148>)
 8001242:	f003 fd41 	bl	8004cc8 <HAL_DAC_Stop_DMA>
			HAL_DAC_Start_DMA(&hdac1, DAC1_CHANNEL_1, saw_data_table, SAW_DATA_SIZE, DAC_ALIGN_12B_R);
 8001246:	2300      	movs	r3, #0
 8001248:	9300      	str	r3, [sp, #0]
 800124a:	2378      	movs	r3, #120	; 0x78
 800124c:	4a20      	ldr	r2, [pc, #128]	; (80012d0 <FuncO_ModifyOutput+0x154>)
 800124e:	2100      	movs	r1, #0
 8001250:	481c      	ldr	r0, [pc, #112]	; (80012c4 <FuncO_ModifyOutput+0x148>)
 8001252:	f003 fc77 	bl	8004b44 <HAL_DAC_Start_DMA>
			break;
 8001256:	e02f      	b.n	80012b8 <FuncO_ModifyOutput+0x13c>
		case 11:
		case 12:
		case 13:
		case 14:

			eNewOutMode = RevSaw_Out_Mode;
 8001258:	4b19      	ldr	r3, [pc, #100]	; (80012c0 <FuncO_ModifyOutput+0x144>)
 800125a:	2203      	movs	r2, #3
 800125c:	701a      	strb	r2, [r3, #0]
			HAL_DAC_Stop_DMA(&hdac1, DAC1_CHANNEL_1);
 800125e:	2100      	movs	r1, #0
 8001260:	4818      	ldr	r0, [pc, #96]	; (80012c4 <FuncO_ModifyOutput+0x148>)
 8001262:	f003 fd31 	bl	8004cc8 <HAL_DAC_Stop_DMA>
			HAL_DAC_Start_DMA(&hdac1, DAC1_CHANNEL_1, saw_rev_data_table, SAW_REV_DATA_SIZE, DAC_ALIGN_12B_R);
 8001266:	2300      	movs	r3, #0
 8001268:	9300      	str	r3, [sp, #0]
 800126a:	2378      	movs	r3, #120	; 0x78
 800126c:	4a19      	ldr	r2, [pc, #100]	; (80012d4 <FuncO_ModifyOutput+0x158>)
 800126e:	2100      	movs	r1, #0
 8001270:	4814      	ldr	r0, [pc, #80]	; (80012c4 <FuncO_ModifyOutput+0x148>)
 8001272:	f003 fc67 	bl	8004b44 <HAL_DAC_Start_DMA>
			break;
 8001276:	e01f      	b.n	80012b8 <FuncO_ModifyOutput+0x13c>
		case 15:
		case 16:
		case 17:
		case 18:

			eNewOutMode = Triangle_Out_Mode;
 8001278:	4b11      	ldr	r3, [pc, #68]	; (80012c0 <FuncO_ModifyOutput+0x144>)
 800127a:	2204      	movs	r2, #4
 800127c:	701a      	strb	r2, [r3, #0]
			HAL_DAC_Stop_DMA(&hdac1, DAC1_CHANNEL_1);
 800127e:	2100      	movs	r1, #0
 8001280:	4810      	ldr	r0, [pc, #64]	; (80012c4 <FuncO_ModifyOutput+0x148>)
 8001282:	f003 fd21 	bl	8004cc8 <HAL_DAC_Stop_DMA>
			HAL_DAC_Start_DMA(&hdac1, DAC1_CHANNEL_1, triangle_data_table, TRIANGLE_DATA_SIZE, DAC_ALIGN_12B_R);
 8001286:	2300      	movs	r3, #0
 8001288:	9300      	str	r3, [sp, #0]
 800128a:	2378      	movs	r3, #120	; 0x78
 800128c:	4a12      	ldr	r2, [pc, #72]	; (80012d8 <FuncO_ModifyOutput+0x15c>)
 800128e:	2100      	movs	r1, #0
 8001290:	480c      	ldr	r0, [pc, #48]	; (80012c4 <FuncO_ModifyOutput+0x148>)
 8001292:	f003 fc57 	bl	8004b44 <HAL_DAC_Start_DMA>
			break;
 8001296:	e00f      	b.n	80012b8 <FuncO_ModifyOutput+0x13c>
		case 20:
		case 21:
		case 22:
		case 23:

			eNewOutMode = Impulse_Out_Mode;
 8001298:	4b09      	ldr	r3, [pc, #36]	; (80012c0 <FuncO_ModifyOutput+0x144>)
 800129a:	2205      	movs	r2, #5
 800129c:	701a      	strb	r2, [r3, #0]
			HAL_DAC_Stop_DMA(&hdac1, DAC1_CHANNEL_1);
 800129e:	2100      	movs	r1, #0
 80012a0:	4808      	ldr	r0, [pc, #32]	; (80012c4 <FuncO_ModifyOutput+0x148>)
 80012a2:	f003 fd11 	bl	8004cc8 <HAL_DAC_Stop_DMA>
			HAL_DAC_Start_DMA(&hdac1, DAC1_CHANNEL_1, unitimpulse_data_table, UNITIMPULSE_DATA_SIZE, DAC_ALIGN_12B_R);
 80012a6:	2300      	movs	r3, #0
 80012a8:	9300      	str	r3, [sp, #0]
 80012aa:	2378      	movs	r3, #120	; 0x78
 80012ac:	4a0b      	ldr	r2, [pc, #44]	; (80012dc <FuncO_ModifyOutput+0x160>)
 80012ae:	2100      	movs	r1, #0
 80012b0:	4804      	ldr	r0, [pc, #16]	; (80012c4 <FuncO_ModifyOutput+0x148>)
 80012b2:	f003 fc47 	bl	8004b44 <HAL_DAC_Start_DMA>
			break;
 80012b6:	bf00      	nop
	}
}
 80012b8:	bf00      	nop
 80012ba:	46bd      	mov	sp, r7
 80012bc:	bd80      	pop	{r7, pc}
 80012be:	bf00      	nop
 80012c0:	200010ea 	.word	0x200010ea
 80012c4:	20001214 	.word	0x20001214
 80012c8:	200008e4 	.word	0x200008e4
 80012cc:	20000ac4 	.word	0x20000ac4
 80012d0:	20000524 	.word	0x20000524
 80012d4:	20000704 	.word	0x20000704
 80012d8:	20000ca4 	.word	0x20000ca4
 80012dc:	20000e84 	.word	0x20000e84

080012e0 <FuncO_GetOutputMode>:
 *
 *
 *
 */
eOutput_mode FuncO_GetOutputMode()
{
 80012e0:	b480      	push	{r7}
 80012e2:	af00      	add	r7, sp, #0
	return eNewOutMode;
 80012e4:	4b03      	ldr	r3, [pc, #12]	; (80012f4 <FuncO_GetOutputMode+0x14>)
 80012e6:	781b      	ldrb	r3, [r3, #0]
}
 80012e8:	4618      	mov	r0, r3
 80012ea:	46bd      	mov	sp, r7
 80012ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012f0:	4770      	bx	lr
 80012f2:	bf00      	nop
 80012f4:	200010ea 	.word	0x200010ea

080012f8 <GO_SetOutputToEncoder>:
 *
 *
 *
 */
void GO_SetOutputToEncoder(uint8_t pGain)
{
 80012f8:	b580      	push	{r7, lr}
 80012fa:	b082      	sub	sp, #8
 80012fc:	af00      	add	r7, sp, #0
 80012fe:	4603      	mov	r3, r0
 8001300:	71fb      	strb	r3, [r7, #7]

	// PGA Truth table for LTC6910:
	// https://www.analog.com/media/en/technical-documentation/data-sheets/6910fb.pdf
	switch(pGain)
 8001302:	79fb      	ldrb	r3, [r7, #7]
 8001304:	2b1f      	cmp	r3, #31
 8001306:	f200 80db 	bhi.w	80014c0 <GO_SetOutputToEncoder+0x1c8>
 800130a:	a201      	add	r2, pc, #4	; (adr r2, 8001310 <GO_SetOutputToEncoder+0x18>)
 800130c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001310:	08001391 	.word	0x08001391
 8001314:	08001391 	.word	0x08001391
 8001318:	08001391 	.word	0x08001391
 800131c:	08001391 	.word	0x08001391
 8001320:	080013b7 	.word	0x080013b7
 8001324:	080013b7 	.word	0x080013b7
 8001328:	080013b7 	.word	0x080013b7
 800132c:	080013b7 	.word	0x080013b7
 8001330:	080013dd 	.word	0x080013dd
 8001334:	080013dd 	.word	0x080013dd
 8001338:	080013dd 	.word	0x080013dd
 800133c:	080013dd 	.word	0x080013dd
 8001340:	08001403 	.word	0x08001403
 8001344:	08001403 	.word	0x08001403
 8001348:	08001403 	.word	0x08001403
 800134c:	08001403 	.word	0x08001403
 8001350:	08001429 	.word	0x08001429
 8001354:	08001429 	.word	0x08001429
 8001358:	08001429 	.word	0x08001429
 800135c:	08001429 	.word	0x08001429
 8001360:	0800144f 	.word	0x0800144f
 8001364:	0800144f 	.word	0x0800144f
 8001368:	0800144f 	.word	0x0800144f
 800136c:	0800144f 	.word	0x0800144f
 8001370:	08001475 	.word	0x08001475
 8001374:	08001475 	.word	0x08001475
 8001378:	08001475 	.word	0x08001475
 800137c:	08001475 	.word	0x08001475
 8001380:	0800149b 	.word	0x0800149b
 8001384:	0800149b 	.word	0x0800149b
 8001388:	0800149b 	.word	0x0800149b
 800138c:	0800149b 	.word	0x0800149b
	{
		case 0:
		case 1:
		case 2:
		case 3:
			HAL_GPIO_WritePin(SG0_GPIO_Port, SG0_Pin, GPIO_PIN_RESET);
 8001390:	2200      	movs	r2, #0
 8001392:	2101      	movs	r1, #1
 8001394:	484c      	ldr	r0, [pc, #304]	; (80014c8 <GO_SetOutputToEncoder+0x1d0>)
 8001396:	f004 fbdb 	bl	8005b50 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(SG1_GPIO_Port, SG1_Pin, GPIO_PIN_RESET);
 800139a:	2200      	movs	r2, #0
 800139c:	2120      	movs	r1, #32
 800139e:	484b      	ldr	r0, [pc, #300]	; (80014cc <GO_SetOutputToEncoder+0x1d4>)
 80013a0:	f004 fbd6 	bl	8005b50 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(SG2_GPIO_Port, SG2_Pin, GPIO_PIN_RESET);
 80013a4:	2200      	movs	r2, #0
 80013a6:	2110      	movs	r1, #16
 80013a8:	4848      	ldr	r0, [pc, #288]	; (80014cc <GO_SetOutputToEncoder+0x1d4>)
 80013aa:	f004 fbd1 	bl	8005b50 <HAL_GPIO_WritePin>
			eNewOutGain = Zero_Gain;
 80013ae:	4b48      	ldr	r3, [pc, #288]	; (80014d0 <GO_SetOutputToEncoder+0x1d8>)
 80013b0:	2200      	movs	r2, #0
 80013b2:	701a      	strb	r2, [r3, #0]
			break;
 80013b4:	e084      	b.n	80014c0 <GO_SetOutputToEncoder+0x1c8>
		case 4:
		case 5:
		case 6:
		case 7:
			HAL_GPIO_WritePin(SG0_GPIO_Port, SG0_Pin, GPIO_PIN_SET);
 80013b6:	2201      	movs	r2, #1
 80013b8:	2101      	movs	r1, #1
 80013ba:	4843      	ldr	r0, [pc, #268]	; (80014c8 <GO_SetOutputToEncoder+0x1d0>)
 80013bc:	f004 fbc8 	bl	8005b50 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(SG1_GPIO_Port, SG1_Pin, GPIO_PIN_RESET);
 80013c0:	2200      	movs	r2, #0
 80013c2:	2120      	movs	r1, #32
 80013c4:	4841      	ldr	r0, [pc, #260]	; (80014cc <GO_SetOutputToEncoder+0x1d4>)
 80013c6:	f004 fbc3 	bl	8005b50 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(SG2_GPIO_Port, SG2_Pin, GPIO_PIN_RESET);
 80013ca:	2200      	movs	r2, #0
 80013cc:	2110      	movs	r1, #16
 80013ce:	483f      	ldr	r0, [pc, #252]	; (80014cc <GO_SetOutputToEncoder+0x1d4>)
 80013d0:	f004 fbbe 	bl	8005b50 <HAL_GPIO_WritePin>
			eNewOutGain = One_Gain;
 80013d4:	4b3e      	ldr	r3, [pc, #248]	; (80014d0 <GO_SetOutputToEncoder+0x1d8>)
 80013d6:	2201      	movs	r2, #1
 80013d8:	701a      	strb	r2, [r3, #0]
			break;
 80013da:	e071      	b.n	80014c0 <GO_SetOutputToEncoder+0x1c8>
		case 8:
		case 9:
		case 10:
		case 11:
			HAL_GPIO_WritePin(SG0_GPIO_Port, SG0_Pin, GPIO_PIN_RESET);
 80013dc:	2200      	movs	r2, #0
 80013de:	2101      	movs	r1, #1
 80013e0:	4839      	ldr	r0, [pc, #228]	; (80014c8 <GO_SetOutputToEncoder+0x1d0>)
 80013e2:	f004 fbb5 	bl	8005b50 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(SG1_GPIO_Port, SG1_Pin, GPIO_PIN_SET);
 80013e6:	2201      	movs	r2, #1
 80013e8:	2120      	movs	r1, #32
 80013ea:	4838      	ldr	r0, [pc, #224]	; (80014cc <GO_SetOutputToEncoder+0x1d4>)
 80013ec:	f004 fbb0 	bl	8005b50 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(SG2_GPIO_Port, SG2_Pin, GPIO_PIN_RESET);
 80013f0:	2200      	movs	r2, #0
 80013f2:	2110      	movs	r1, #16
 80013f4:	4835      	ldr	r0, [pc, #212]	; (80014cc <GO_SetOutputToEncoder+0x1d4>)
 80013f6:	f004 fbab 	bl	8005b50 <HAL_GPIO_WritePin>
			eNewOutGain = Two_Gain;
 80013fa:	4b35      	ldr	r3, [pc, #212]	; (80014d0 <GO_SetOutputToEncoder+0x1d8>)
 80013fc:	2202      	movs	r2, #2
 80013fe:	701a      	strb	r2, [r3, #0]
			break;
 8001400:	e05e      	b.n	80014c0 <GO_SetOutputToEncoder+0x1c8>
		case 12:
		case 13:
		case 14:
		case 15:
			HAL_GPIO_WritePin(SG0_GPIO_Port, SG0_Pin, GPIO_PIN_SET);
 8001402:	2201      	movs	r2, #1
 8001404:	2101      	movs	r1, #1
 8001406:	4830      	ldr	r0, [pc, #192]	; (80014c8 <GO_SetOutputToEncoder+0x1d0>)
 8001408:	f004 fba2 	bl	8005b50 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(SG1_GPIO_Port, SG1_Pin, GPIO_PIN_SET);
 800140c:	2201      	movs	r2, #1
 800140e:	2120      	movs	r1, #32
 8001410:	482e      	ldr	r0, [pc, #184]	; (80014cc <GO_SetOutputToEncoder+0x1d4>)
 8001412:	f004 fb9d 	bl	8005b50 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(SG2_GPIO_Port, SG2_Pin, GPIO_PIN_RESET);
 8001416:	2200      	movs	r2, #0
 8001418:	2110      	movs	r1, #16
 800141a:	482c      	ldr	r0, [pc, #176]	; (80014cc <GO_SetOutputToEncoder+0x1d4>)
 800141c:	f004 fb98 	bl	8005b50 <HAL_GPIO_WritePin>
			eNewOutGain = Three_Gain;
 8001420:	4b2b      	ldr	r3, [pc, #172]	; (80014d0 <GO_SetOutputToEncoder+0x1d8>)
 8001422:	2203      	movs	r2, #3
 8001424:	701a      	strb	r2, [r3, #0]
			break;
 8001426:	e04b      	b.n	80014c0 <GO_SetOutputToEncoder+0x1c8>
		case 16:
		case 17:
		case 18:
		case 19:
			HAL_GPIO_WritePin(SG0_GPIO_Port, SG0_Pin, GPIO_PIN_RESET);
 8001428:	2200      	movs	r2, #0
 800142a:	2101      	movs	r1, #1
 800142c:	4826      	ldr	r0, [pc, #152]	; (80014c8 <GO_SetOutputToEncoder+0x1d0>)
 800142e:	f004 fb8f 	bl	8005b50 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(SG1_GPIO_Port, SG1_Pin, GPIO_PIN_RESET);
 8001432:	2200      	movs	r2, #0
 8001434:	2120      	movs	r1, #32
 8001436:	4825      	ldr	r0, [pc, #148]	; (80014cc <GO_SetOutputToEncoder+0x1d4>)
 8001438:	f004 fb8a 	bl	8005b50 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(SG2_GPIO_Port, SG2_Pin, GPIO_PIN_SET);
 800143c:	2201      	movs	r2, #1
 800143e:	2110      	movs	r1, #16
 8001440:	4822      	ldr	r0, [pc, #136]	; (80014cc <GO_SetOutputToEncoder+0x1d4>)
 8001442:	f004 fb85 	bl	8005b50 <HAL_GPIO_WritePin>
			eNewOutGain = Four_Gain;
 8001446:	4b22      	ldr	r3, [pc, #136]	; (80014d0 <GO_SetOutputToEncoder+0x1d8>)
 8001448:	2204      	movs	r2, #4
 800144a:	701a      	strb	r2, [r3, #0]
			break;
 800144c:	e038      	b.n	80014c0 <GO_SetOutputToEncoder+0x1c8>
		case 20:
		case 21:
		case 22:
		case 23:
			HAL_GPIO_WritePin(SG0_GPIO_Port, SG0_Pin, GPIO_PIN_SET);
 800144e:	2201      	movs	r2, #1
 8001450:	2101      	movs	r1, #1
 8001452:	481d      	ldr	r0, [pc, #116]	; (80014c8 <GO_SetOutputToEncoder+0x1d0>)
 8001454:	f004 fb7c 	bl	8005b50 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(SG1_GPIO_Port, SG1_Pin, GPIO_PIN_RESET);
 8001458:	2200      	movs	r2, #0
 800145a:	2120      	movs	r1, #32
 800145c:	481b      	ldr	r0, [pc, #108]	; (80014cc <GO_SetOutputToEncoder+0x1d4>)
 800145e:	f004 fb77 	bl	8005b50 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(SG2_GPIO_Port, SG2_Pin, GPIO_PIN_SET);
 8001462:	2201      	movs	r2, #1
 8001464:	2110      	movs	r1, #16
 8001466:	4819      	ldr	r0, [pc, #100]	; (80014cc <GO_SetOutputToEncoder+0x1d4>)
 8001468:	f004 fb72 	bl	8005b50 <HAL_GPIO_WritePin>
			eNewOutGain = Five_Gain;
 800146c:	4b18      	ldr	r3, [pc, #96]	; (80014d0 <GO_SetOutputToEncoder+0x1d8>)
 800146e:	2205      	movs	r2, #5
 8001470:	701a      	strb	r2, [r3, #0]
			break;
 8001472:	e025      	b.n	80014c0 <GO_SetOutputToEncoder+0x1c8>
		case 24:
		case 25:
		case 26:
		case 27:
			HAL_GPIO_WritePin(SG0_GPIO_Port, SG0_Pin, GPIO_PIN_RESET);
 8001474:	2200      	movs	r2, #0
 8001476:	2101      	movs	r1, #1
 8001478:	4813      	ldr	r0, [pc, #76]	; (80014c8 <GO_SetOutputToEncoder+0x1d0>)
 800147a:	f004 fb69 	bl	8005b50 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(SG1_GPIO_Port, SG1_Pin, GPIO_PIN_SET);
 800147e:	2201      	movs	r2, #1
 8001480:	2120      	movs	r1, #32
 8001482:	4812      	ldr	r0, [pc, #72]	; (80014cc <GO_SetOutputToEncoder+0x1d4>)
 8001484:	f004 fb64 	bl	8005b50 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(SG2_GPIO_Port, SG2_Pin, GPIO_PIN_SET);
 8001488:	2201      	movs	r2, #1
 800148a:	2110      	movs	r1, #16
 800148c:	480f      	ldr	r0, [pc, #60]	; (80014cc <GO_SetOutputToEncoder+0x1d4>)
 800148e:	f004 fb5f 	bl	8005b50 <HAL_GPIO_WritePin>
			eNewOutGain = Six_Gain;
 8001492:	4b0f      	ldr	r3, [pc, #60]	; (80014d0 <GO_SetOutputToEncoder+0x1d8>)
 8001494:	2206      	movs	r2, #6
 8001496:	701a      	strb	r2, [r3, #0]
			break;
 8001498:	e012      	b.n	80014c0 <GO_SetOutputToEncoder+0x1c8>
		case 28:
		case 29:
		case 30:
		case 31:
			HAL_GPIO_WritePin(SG0_GPIO_Port, SG0_Pin, GPIO_PIN_SET);
 800149a:	2201      	movs	r2, #1
 800149c:	2101      	movs	r1, #1
 800149e:	480a      	ldr	r0, [pc, #40]	; (80014c8 <GO_SetOutputToEncoder+0x1d0>)
 80014a0:	f004 fb56 	bl	8005b50 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(SG1_GPIO_Port, SG1_Pin, GPIO_PIN_SET);
 80014a4:	2201      	movs	r2, #1
 80014a6:	2120      	movs	r1, #32
 80014a8:	4808      	ldr	r0, [pc, #32]	; (80014cc <GO_SetOutputToEncoder+0x1d4>)
 80014aa:	f004 fb51 	bl	8005b50 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(SG2_GPIO_Port, SG2_Pin, GPIO_PIN_SET);
 80014ae:	2201      	movs	r2, #1
 80014b0:	2110      	movs	r1, #16
 80014b2:	4806      	ldr	r0, [pc, #24]	; (80014cc <GO_SetOutputToEncoder+0x1d4>)
 80014b4:	f004 fb4c 	bl	8005b50 <HAL_GPIO_WritePin>
			eNewOutGain = Seven_Gain;
 80014b8:	4b05      	ldr	r3, [pc, #20]	; (80014d0 <GO_SetOutputToEncoder+0x1d8>)
 80014ba:	2207      	movs	r2, #7
 80014bc:	701a      	strb	r2, [r3, #0]
			break;
 80014be:	bf00      	nop
	}

}
 80014c0:	bf00      	nop
 80014c2:	3708      	adds	r7, #8
 80014c4:	46bd      	mov	sp, r7
 80014c6:	bd80      	pop	{r7, pc}
 80014c8:	48000400 	.word	0x48000400
 80014cc:	48000800 	.word	0x48000800
 80014d0:	20000009 	.word	0x20000009

080014d4 <GO_GetOutputGain>:
 *
 *
 *
 */
uint8_t GO_GetOutputGain()
{
 80014d4:	b480      	push	{r7}
 80014d6:	af00      	add	r7, sp, #0
	return (uint8_t)eNewOutGain;
 80014d8:	4b03      	ldr	r3, [pc, #12]	; (80014e8 <GO_GetOutputGain+0x14>)
 80014da:	781b      	ldrb	r3, [r3, #0]
}
 80014dc:	4618      	mov	r0, r3
 80014de:	46bd      	mov	sp, r7
 80014e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014e4:	4770      	bx	lr
 80014e6:	bf00      	nop
 80014e8:	20000009 	.word	0x20000009

080014ec <SM_GetEncoderValue>:

#include "SignalManager.h"


uint16_t SM_GetEncoderValue(eEncoder_Direction direction)
{
 80014ec:	b480      	push	{r7}
 80014ee:	b083      	sub	sp, #12
 80014f0:	af00      	add	r7, sp, #0
 80014f2:	4603      	mov	r3, r0
 80014f4:	71fb      	strb	r3, [r7, #7]
	if(direction)
 80014f6:	79fb      	ldrb	r3, [r7, #7]
 80014f8:	2b00      	cmp	r3, #0
 80014fa:	d008      	beq.n	800150e <SM_GetEncoderValue+0x22>
	{
		return ENCODER_TIMER->ARR - ENCODER_TIMER->CNT;
 80014fc:	4b08      	ldr	r3, [pc, #32]	; (8001520 <SM_GetEncoderValue+0x34>)
 80014fe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001500:	b29a      	uxth	r2, r3
 8001502:	4b07      	ldr	r3, [pc, #28]	; (8001520 <SM_GetEncoderValue+0x34>)
 8001504:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001506:	b29b      	uxth	r3, r3
 8001508:	1ad3      	subs	r3, r2, r3
 800150a:	b29b      	uxth	r3, r3
 800150c:	e002      	b.n	8001514 <SM_GetEncoderValue+0x28>
	}
	else
	{
		return ENCODER_TIMER->CNT;
 800150e:	4b04      	ldr	r3, [pc, #16]	; (8001520 <SM_GetEncoderValue+0x34>)
 8001510:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001512:	b29b      	uxth	r3, r3
	}
}
 8001514:	4618      	mov	r0, r3
 8001516:	370c      	adds	r7, #12
 8001518:	46bd      	mov	sp, r7
 800151a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800151e:	4770      	bx	lr
 8001520:	40012c00 	.word	0x40012c00

08001524 <MX_ADC1_Init>:
ADC_HandleTypeDef hadc1;
DMA_HandleTypeDef hdma_adc1;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 8001524:	b580      	push	{r7, lr}
 8001526:	b08c      	sub	sp, #48	; 0x30
 8001528:	af00      	add	r7, sp, #0
  ADC_MultiModeTypeDef multimode = {0};
 800152a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800152e:	2200      	movs	r2, #0
 8001530:	601a      	str	r2, [r3, #0]
 8001532:	605a      	str	r2, [r3, #4]
 8001534:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 8001536:	1d3b      	adds	r3, r7, #4
 8001538:	2220      	movs	r2, #32
 800153a:	2100      	movs	r1, #0
 800153c:	4618      	mov	r0, r3
 800153e:	f008 f953 	bl	80097e8 <memset>

  /** Common config 
  */
  hadc1.Instance = ADC1;
 8001542:	4b32      	ldr	r3, [pc, #200]	; (800160c <MX_ADC1_Init+0xe8>)
 8001544:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8001548:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 800154a:	4b30      	ldr	r3, [pc, #192]	; (800160c <MX_ADC1_Init+0xe8>)
 800154c:	2200      	movs	r2, #0
 800154e:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8001550:	4b2e      	ldr	r3, [pc, #184]	; (800160c <MX_ADC1_Init+0xe8>)
 8001552:	2200      	movs	r2, #0
 8001554:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8001556:	4b2d      	ldr	r3, [pc, #180]	; (800160c <MX_ADC1_Init+0xe8>)
 8001558:	2200      	movs	r2, #0
 800155a:	60da      	str	r2, [r3, #12]
  hadc1.Init.GainCompensation = 0;
 800155c:	4b2b      	ldr	r3, [pc, #172]	; (800160c <MX_ADC1_Init+0xe8>)
 800155e:	2200      	movs	r2, #0
 8001560:	611a      	str	r2, [r3, #16]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8001562:	4b2a      	ldr	r3, [pc, #168]	; (800160c <MX_ADC1_Init+0xe8>)
 8001564:	2200      	movs	r2, #0
 8001566:	615a      	str	r2, [r3, #20]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8001568:	4b28      	ldr	r3, [pc, #160]	; (800160c <MX_ADC1_Init+0xe8>)
 800156a:	2204      	movs	r2, #4
 800156c:	619a      	str	r2, [r3, #24]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 800156e:	4b27      	ldr	r3, [pc, #156]	; (800160c <MX_ADC1_Init+0xe8>)
 8001570:	2200      	movs	r2, #0
 8001572:	771a      	strb	r2, [r3, #28]
  hadc1.Init.ContinuousConvMode = ENABLE;
 8001574:	4b25      	ldr	r3, [pc, #148]	; (800160c <MX_ADC1_Init+0xe8>)
 8001576:	2201      	movs	r2, #1
 8001578:	775a      	strb	r2, [r3, #29]
  hadc1.Init.NbrOfConversion = 1;
 800157a:	4b24      	ldr	r3, [pc, #144]	; (800160c <MX_ADC1_Init+0xe8>)
 800157c:	2201      	movs	r2, #1
 800157e:	621a      	str	r2, [r3, #32]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8001580:	4b22      	ldr	r3, [pc, #136]	; (800160c <MX_ADC1_Init+0xe8>)
 8001582:	2200      	movs	r2, #0
 8001584:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8001588:	4b20      	ldr	r3, [pc, #128]	; (800160c <MX_ADC1_Init+0xe8>)
 800158a:	2200      	movs	r2, #0
 800158c:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 800158e:	4b1f      	ldr	r3, [pc, #124]	; (800160c <MX_ADC1_Init+0xe8>)
 8001590:	2200      	movs	r2, #0
 8001592:	631a      	str	r2, [r3, #48]	; 0x30
  hadc1.Init.DMAContinuousRequests = ENABLE;
 8001594:	4b1d      	ldr	r3, [pc, #116]	; (800160c <MX_ADC1_Init+0xe8>)
 8001596:	2201      	movs	r2, #1
 8001598:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hadc1.Init.Overrun = ADC_OVR_DATA_OVERWRITTEN;
 800159c:	4b1b      	ldr	r3, [pc, #108]	; (800160c <MX_ADC1_Init+0xe8>)
 800159e:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80015a2:	63da      	str	r2, [r3, #60]	; 0x3c
  hadc1.Init.OversamplingMode = DISABLE;
 80015a4:	4b19      	ldr	r3, [pc, #100]	; (800160c <MX_ADC1_Init+0xe8>)
 80015a6:	2200      	movs	r2, #0
 80015a8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80015ac:	4817      	ldr	r0, [pc, #92]	; (800160c <MX_ADC1_Init+0xe8>)
 80015ae:	f001 ffc7 	bl	8003540 <HAL_ADC_Init>
 80015b2:	4603      	mov	r3, r0
 80015b4:	2b00      	cmp	r3, #0
 80015b6:	d001      	beq.n	80015bc <MX_ADC1_Init+0x98>
  {
    Error_Handler();
 80015b8:	f000 ff40 	bl	800243c <Error_Handler>
  }
  /** Configure the ADC multi-mode 
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 80015bc:	2300      	movs	r3, #0
 80015be:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 80015c0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80015c4:	4619      	mov	r1, r3
 80015c6:	4811      	ldr	r0, [pc, #68]	; (800160c <MX_ADC1_Init+0xe8>)
 80015c8:	f002 fd50 	bl	800406c <HAL_ADCEx_MultiModeConfigChannel>
 80015cc:	4603      	mov	r3, r0
 80015ce:	2b00      	cmp	r3, #0
 80015d0:	d001      	beq.n	80015d6 <MX_ADC1_Init+0xb2>
  {
    Error_Handler();
 80015d2:	f000 ff33 	bl	800243c <Error_Handler>
  }
  /** Configure Regular Channel 
  */
  sConfig.Channel = ADC_CHANNEL_3;
 80015d6:	4b0e      	ldr	r3, [pc, #56]	; (8001610 <MX_ADC1_Init+0xec>)
 80015d8:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 80015da:	2306      	movs	r3, #6
 80015dc:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 80015de:	2300      	movs	r3, #0
 80015e0:	60fb      	str	r3, [r7, #12]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 80015e2:	237f      	movs	r3, #127	; 0x7f
 80015e4:	613b      	str	r3, [r7, #16]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 80015e6:	2304      	movs	r3, #4
 80015e8:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 80015ea:	2300      	movs	r3, #0
 80015ec:	61bb      	str	r3, [r7, #24]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80015ee:	1d3b      	adds	r3, r7, #4
 80015f0:	4619      	mov	r1, r3
 80015f2:	4806      	ldr	r0, [pc, #24]	; (800160c <MX_ADC1_Init+0xe8>)
 80015f4:	f002 f964 	bl	80038c0 <HAL_ADC_ConfigChannel>
 80015f8:	4603      	mov	r3, r0
 80015fa:	2b00      	cmp	r3, #0
 80015fc:	d001      	beq.n	8001602 <MX_ADC1_Init+0xde>
  {
    Error_Handler();
 80015fe:	f000 ff1d 	bl	800243c <Error_Handler>
  }

}
 8001602:	bf00      	nop
 8001604:	3730      	adds	r7, #48	; 0x30
 8001606:	46bd      	mov	sp, r7
 8001608:	bd80      	pop	{r7, pc}
 800160a:	bf00      	nop
 800160c:	20001110 	.word	0x20001110
 8001610:	0c900008 	.word	0x0c900008

08001614 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 8001614:	b580      	push	{r7, lr}
 8001616:	b08a      	sub	sp, #40	; 0x28
 8001618:	af00      	add	r7, sp, #0
 800161a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800161c:	f107 0314 	add.w	r3, r7, #20
 8001620:	2200      	movs	r2, #0
 8001622:	601a      	str	r2, [r3, #0]
 8001624:	605a      	str	r2, [r3, #4]
 8001626:	609a      	str	r2, [r3, #8]
 8001628:	60da      	str	r2, [r3, #12]
 800162a:	611a      	str	r2, [r3, #16]
  if(adcHandle->Instance==ADC1)
 800162c:	687b      	ldr	r3, [r7, #4]
 800162e:	681b      	ldr	r3, [r3, #0]
 8001630:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8001634:	d14f      	bne.n	80016d6 <HAL_ADC_MspInit+0xc2>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* ADC1 clock enable */
    __HAL_RCC_ADC12_CLK_ENABLE();
 8001636:	4b2a      	ldr	r3, [pc, #168]	; (80016e0 <HAL_ADC_MspInit+0xcc>)
 8001638:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800163a:	4a29      	ldr	r2, [pc, #164]	; (80016e0 <HAL_ADC_MspInit+0xcc>)
 800163c:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8001640:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001642:	4b27      	ldr	r3, [pc, #156]	; (80016e0 <HAL_ADC_MspInit+0xcc>)
 8001644:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001646:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800164a:	613b      	str	r3, [r7, #16]
 800164c:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800164e:	4b24      	ldr	r3, [pc, #144]	; (80016e0 <HAL_ADC_MspInit+0xcc>)
 8001650:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001652:	4a23      	ldr	r2, [pc, #140]	; (80016e0 <HAL_ADC_MspInit+0xcc>)
 8001654:	f043 0301 	orr.w	r3, r3, #1
 8001658:	64d3      	str	r3, [r2, #76]	; 0x4c
 800165a:	4b21      	ldr	r3, [pc, #132]	; (80016e0 <HAL_ADC_MspInit+0xcc>)
 800165c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800165e:	f003 0301 	and.w	r3, r3, #1
 8001662:	60fb      	str	r3, [r7, #12]
 8001664:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration    
    PA2     ------> ADC1_IN3 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8001666:	2304      	movs	r3, #4
 8001668:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800166a:	2303      	movs	r3, #3
 800166c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800166e:	2300      	movs	r3, #0
 8001670:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001672:	f107 0314 	add.w	r3, r7, #20
 8001676:	4619      	mov	r1, r3
 8001678:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800167c:	f004 f8ce 	bl	800581c <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Channel1;
 8001680:	4b18      	ldr	r3, [pc, #96]	; (80016e4 <HAL_ADC_MspInit+0xd0>)
 8001682:	4a19      	ldr	r2, [pc, #100]	; (80016e8 <HAL_ADC_MspInit+0xd4>)
 8001684:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Request = DMA_REQUEST_ADC1;
 8001686:	4b17      	ldr	r3, [pc, #92]	; (80016e4 <HAL_ADC_MspInit+0xd0>)
 8001688:	2205      	movs	r2, #5
 800168a:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800168c:	4b15      	ldr	r3, [pc, #84]	; (80016e4 <HAL_ADC_MspInit+0xd0>)
 800168e:	2200      	movs	r2, #0
 8001690:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8001692:	4b14      	ldr	r3, [pc, #80]	; (80016e4 <HAL_ADC_MspInit+0xd0>)
 8001694:	2200      	movs	r2, #0
 8001696:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8001698:	4b12      	ldr	r3, [pc, #72]	; (80016e4 <HAL_ADC_MspInit+0xd0>)
 800169a:	2280      	movs	r2, #128	; 0x80
 800169c:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 800169e:	4b11      	ldr	r3, [pc, #68]	; (80016e4 <HAL_ADC_MspInit+0xd0>)
 80016a0:	f44f 7200 	mov.w	r2, #512	; 0x200
 80016a4:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 80016a6:	4b0f      	ldr	r3, [pc, #60]	; (80016e4 <HAL_ADC_MspInit+0xd0>)
 80016a8:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80016ac:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 80016ae:	4b0d      	ldr	r3, [pc, #52]	; (80016e4 <HAL_ADC_MspInit+0xd0>)
 80016b0:	2220      	movs	r2, #32
 80016b2:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 80016b4:	4b0b      	ldr	r3, [pc, #44]	; (80016e4 <HAL_ADC_MspInit+0xd0>)
 80016b6:	2200      	movs	r2, #0
 80016b8:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 80016ba:	480a      	ldr	r0, [pc, #40]	; (80016e4 <HAL_ADC_MspInit+0xd0>)
 80016bc:	f003 fde2 	bl	8005284 <HAL_DMA_Init>
 80016c0:	4603      	mov	r3, r0
 80016c2:	2b00      	cmp	r3, #0
 80016c4:	d001      	beq.n	80016ca <HAL_ADC_MspInit+0xb6>
    {
      Error_Handler();
 80016c6:	f000 feb9 	bl	800243c <Error_Handler>
    }

    __HAL_LINKDMA(adcHandle,DMA_Handle,hdma_adc1);
 80016ca:	687b      	ldr	r3, [r7, #4]
 80016cc:	4a05      	ldr	r2, [pc, #20]	; (80016e4 <HAL_ADC_MspInit+0xd0>)
 80016ce:	655a      	str	r2, [r3, #84]	; 0x54
 80016d0:	4a04      	ldr	r2, [pc, #16]	; (80016e4 <HAL_ADC_MspInit+0xd0>)
 80016d2:	687b      	ldr	r3, [r7, #4]
 80016d4:	6293      	str	r3, [r2, #40]	; 0x28

  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 80016d6:	bf00      	nop
 80016d8:	3728      	adds	r7, #40	; 0x28
 80016da:	46bd      	mov	sp, r7
 80016dc:	bd80      	pop	{r7, pc}
 80016de:	bf00      	nop
 80016e0:	40021000 	.word	0x40021000
 80016e4:	2000117c 	.word	0x2000117c
 80016e8:	40020008 	.word	0x40020008

080016ec <MX_COMP1_Init>:

COMP_HandleTypeDef hcomp1;

/* COMP1 init function */
void MX_COMP1_Init(void)
{
 80016ec:	b580      	push	{r7, lr}
 80016ee:	af00      	add	r7, sp, #0

  hcomp1.Instance = COMP1;
 80016f0:	4b0f      	ldr	r3, [pc, #60]	; (8001730 <MX_COMP1_Init+0x44>)
 80016f2:	4a10      	ldr	r2, [pc, #64]	; (8001734 <MX_COMP1_Init+0x48>)
 80016f4:	601a      	str	r2, [r3, #0]
  hcomp1.Init.InputPlus = COMP_INPUT_PLUS_IO1;
 80016f6:	4b0e      	ldr	r3, [pc, #56]	; (8001730 <MX_COMP1_Init+0x44>)
 80016f8:	2200      	movs	r2, #0
 80016fa:	605a      	str	r2, [r3, #4]
  hcomp1.Init.InputMinus = COMP_INPUT_MINUS_VREFINT;
 80016fc:	4b0c      	ldr	r3, [pc, #48]	; (8001730 <MX_COMP1_Init+0x44>)
 80016fe:	4a0e      	ldr	r2, [pc, #56]	; (8001738 <MX_COMP1_Init+0x4c>)
 8001700:	609a      	str	r2, [r3, #8]
  hcomp1.Init.OutputPol = COMP_OUTPUTPOL_NONINVERTED;
 8001702:	4b0b      	ldr	r3, [pc, #44]	; (8001730 <MX_COMP1_Init+0x44>)
 8001704:	2200      	movs	r2, #0
 8001706:	611a      	str	r2, [r3, #16]
  hcomp1.Init.Hysteresis = COMP_HYSTERESIS_NONE;
 8001708:	4b09      	ldr	r3, [pc, #36]	; (8001730 <MX_COMP1_Init+0x44>)
 800170a:	2200      	movs	r2, #0
 800170c:	60da      	str	r2, [r3, #12]
  hcomp1.Init.BlankingSrce = COMP_BLANKINGSRC_NONE;
 800170e:	4b08      	ldr	r3, [pc, #32]	; (8001730 <MX_COMP1_Init+0x44>)
 8001710:	2200      	movs	r2, #0
 8001712:	615a      	str	r2, [r3, #20]
  hcomp1.Init.TriggerMode = COMP_TRIGGERMODE_NONE;
 8001714:	4b06      	ldr	r3, [pc, #24]	; (8001730 <MX_COMP1_Init+0x44>)
 8001716:	2200      	movs	r2, #0
 8001718:	619a      	str	r2, [r3, #24]
  if (HAL_COMP_Init(&hcomp1) != HAL_OK)
 800171a:	4805      	ldr	r0, [pc, #20]	; (8001730 <MX_COMP1_Init+0x44>)
 800171c:	f002 fefa 	bl	8004514 <HAL_COMP_Init>
 8001720:	4603      	mov	r3, r0
 8001722:	2b00      	cmp	r3, #0
 8001724:	d001      	beq.n	800172a <MX_COMP1_Init+0x3e>
  {
    Error_Handler();
 8001726:	f000 fe89 	bl	800243c <Error_Handler>
  }

}
 800172a:	bf00      	nop
 800172c:	bd80      	pop	{r7, pc}
 800172e:	bf00      	nop
 8001730:	200011dc 	.word	0x200011dc
 8001734:	40010200 	.word	0x40010200
 8001738:	00800030 	.word	0x00800030

0800173c <HAL_COMP_MspInit>:

void HAL_COMP_MspInit(COMP_HandleTypeDef* compHandle)
{
 800173c:	b580      	push	{r7, lr}
 800173e:	b088      	sub	sp, #32
 8001740:	af00      	add	r7, sp, #0
 8001742:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001744:	f107 030c 	add.w	r3, r7, #12
 8001748:	2200      	movs	r2, #0
 800174a:	601a      	str	r2, [r3, #0]
 800174c:	605a      	str	r2, [r3, #4]
 800174e:	609a      	str	r2, [r3, #8]
 8001750:	60da      	str	r2, [r3, #12]
 8001752:	611a      	str	r2, [r3, #16]
  if(compHandle->Instance==COMP1)
 8001754:	687b      	ldr	r3, [r7, #4]
 8001756:	681b      	ldr	r3, [r3, #0]
 8001758:	4a0f      	ldr	r2, [pc, #60]	; (8001798 <HAL_COMP_MspInit+0x5c>)
 800175a:	4293      	cmp	r3, r2
 800175c:	d118      	bne.n	8001790 <HAL_COMP_MspInit+0x54>
  {
  /* USER CODE BEGIN COMP1_MspInit 0 */

  /* USER CODE END COMP1_MspInit 0 */
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800175e:	4b0f      	ldr	r3, [pc, #60]	; (800179c <HAL_COMP_MspInit+0x60>)
 8001760:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001762:	4a0e      	ldr	r2, [pc, #56]	; (800179c <HAL_COMP_MspInit+0x60>)
 8001764:	f043 0301 	orr.w	r3, r3, #1
 8001768:	64d3      	str	r3, [r2, #76]	; 0x4c
 800176a:	4b0c      	ldr	r3, [pc, #48]	; (800179c <HAL_COMP_MspInit+0x60>)
 800176c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800176e:	f003 0301 	and.w	r3, r3, #1
 8001772:	60bb      	str	r3, [r7, #8]
 8001774:	68bb      	ldr	r3, [r7, #8]
    /**COMP1 GPIO Configuration    
    PA1     ------> COMP1_INP 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 8001776:	2302      	movs	r3, #2
 8001778:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800177a:	2303      	movs	r3, #3
 800177c:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800177e:	2300      	movs	r3, #0
 8001780:	617b      	str	r3, [r7, #20]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001782:	f107 030c 	add.w	r3, r7, #12
 8001786:	4619      	mov	r1, r3
 8001788:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800178c:	f004 f846 	bl	800581c <HAL_GPIO_Init>

  /* USER CODE BEGIN COMP1_MspInit 1 */

  /* USER CODE END COMP1_MspInit 1 */
  }
}
 8001790:	bf00      	nop
 8001792:	3720      	adds	r7, #32
 8001794:	46bd      	mov	sp, r7
 8001796:	bd80      	pop	{r7, pc}
 8001798:	40010200 	.word	0x40010200
 800179c:	40021000 	.word	0x40021000

080017a0 <MX_DAC1_Init>:
DMA_HandleTypeDef hdma_dac1_ch1;
DMA_HandleTypeDef hdma_dac2_ch1;

/* DAC1 init function */
void MX_DAC1_Init(void)
{
 80017a0:	b580      	push	{r7, lr}
 80017a2:	b08c      	sub	sp, #48	; 0x30
 80017a4:	af00      	add	r7, sp, #0
  DAC_ChannelConfTypeDef sConfig = {0};
 80017a6:	463b      	mov	r3, r7
 80017a8:	2230      	movs	r2, #48	; 0x30
 80017aa:	2100      	movs	r1, #0
 80017ac:	4618      	mov	r0, r3
 80017ae:	f008 f81b 	bl	80097e8 <memset>

  /** DAC Initialization 
  */
  hdac1.Instance = DAC1;
 80017b2:	4b1e      	ldr	r3, [pc, #120]	; (800182c <MX_DAC1_Init+0x8c>)
 80017b4:	4a1e      	ldr	r2, [pc, #120]	; (8001830 <MX_DAC1_Init+0x90>)
 80017b6:	601a      	str	r2, [r3, #0]
  if (HAL_DAC_Init(&hdac1) != HAL_OK)
 80017b8:	481c      	ldr	r0, [pc, #112]	; (800182c <MX_DAC1_Init+0x8c>)
 80017ba:	f003 f94e 	bl	8004a5a <HAL_DAC_Init>
 80017be:	4603      	mov	r3, r0
 80017c0:	2b00      	cmp	r3, #0
 80017c2:	d001      	beq.n	80017c8 <MX_DAC1_Init+0x28>
  {
    Error_Handler();
 80017c4:	f000 fe3a 	bl	800243c <Error_Handler>
  }
  /** DAC channel OUT1 config 
  */
  sConfig.DAC_HighFrequency = DAC_HIGH_FREQUENCY_INTERFACE_MODE_ABOVE_80MHZ;
 80017c8:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80017cc:	603b      	str	r3, [r7, #0]
  sConfig.DAC_DMADoubleDataMode = DISABLE;
 80017ce:	2300      	movs	r3, #0
 80017d0:	713b      	strb	r3, [r7, #4]
  sConfig.DAC_SignedFormat = DISABLE;
 80017d2:	2300      	movs	r3, #0
 80017d4:	717b      	strb	r3, [r7, #5]
  sConfig.DAC_SampleAndHold = DAC_SAMPLEANDHOLD_DISABLE;
 80017d6:	2300      	movs	r3, #0
 80017d8:	60bb      	str	r3, [r7, #8]
  sConfig.DAC_Trigger = DAC_TRIGGER_T8_TRGO;
 80017da:	2306      	movs	r3, #6
 80017dc:	60fb      	str	r3, [r7, #12]
  sConfig.DAC_Trigger2 = DAC_TRIGGER_NONE;
 80017de:	2300      	movs	r3, #0
 80017e0:	613b      	str	r3, [r7, #16]
  sConfig.DAC_OutputBuffer = DAC_OUTPUTBUFFER_ENABLE;
 80017e2:	2300      	movs	r3, #0
 80017e4:	617b      	str	r3, [r7, #20]
  sConfig.DAC_ConnectOnChipPeripheral = DAC_CHIPCONNECT_DISABLE;
 80017e6:	2301      	movs	r3, #1
 80017e8:	61bb      	str	r3, [r7, #24]
  sConfig.DAC_UserTrimming = DAC_TRIMMING_FACTORY;
 80017ea:	2300      	movs	r3, #0
 80017ec:	61fb      	str	r3, [r7, #28]
  if (HAL_DAC_ConfigChannel(&hdac1, &sConfig, DAC_CHANNEL_1) != HAL_OK)
 80017ee:	463b      	mov	r3, r7
 80017f0:	2200      	movs	r2, #0
 80017f2:	4619      	mov	r1, r3
 80017f4:	480d      	ldr	r0, [pc, #52]	; (800182c <MX_DAC1_Init+0x8c>)
 80017f6:	f003 fb0f 	bl	8004e18 <HAL_DAC_ConfigChannel>
 80017fa:	4603      	mov	r3, r0
 80017fc:	2b00      	cmp	r3, #0
 80017fe:	d001      	beq.n	8001804 <MX_DAC1_Init+0x64>
  {
    Error_Handler();
 8001800:	f000 fe1c 	bl	800243c <Error_Handler>
  }
  /** DAC channel OUT2 config 
  */
  sConfig.DAC_Trigger = DAC_TRIGGER_NONE;
 8001804:	2300      	movs	r3, #0
 8001806:	60fb      	str	r3, [r7, #12]
  sConfig.DAC_ConnectOnChipPeripheral = DAC_CHIPCONNECT_DISABLE;
 8001808:	2301      	movs	r3, #1
 800180a:	61bb      	str	r3, [r7, #24]
  if (HAL_DAC_ConfigChannel(&hdac1, &sConfig, DAC_CHANNEL_2) != HAL_OK)
 800180c:	463b      	mov	r3, r7
 800180e:	2210      	movs	r2, #16
 8001810:	4619      	mov	r1, r3
 8001812:	4806      	ldr	r0, [pc, #24]	; (800182c <MX_DAC1_Init+0x8c>)
 8001814:	f003 fb00 	bl	8004e18 <HAL_DAC_ConfigChannel>
 8001818:	4603      	mov	r3, r0
 800181a:	2b00      	cmp	r3, #0
 800181c:	d001      	beq.n	8001822 <MX_DAC1_Init+0x82>
  {
    Error_Handler();
 800181e:	f000 fe0d 	bl	800243c <Error_Handler>
  }

}
 8001822:	bf00      	nop
 8001824:	3730      	adds	r7, #48	; 0x30
 8001826:	46bd      	mov	sp, r7
 8001828:	bd80      	pop	{r7, pc}
 800182a:	bf00      	nop
 800182c:	20001214 	.word	0x20001214
 8001830:	50000800 	.word	0x50000800

08001834 <MX_DAC2_Init>:
/* DAC2 init function */
void MX_DAC2_Init(void)
{
 8001834:	b580      	push	{r7, lr}
 8001836:	b08c      	sub	sp, #48	; 0x30
 8001838:	af00      	add	r7, sp, #0
  DAC_ChannelConfTypeDef sConfig = {0};
 800183a:	463b      	mov	r3, r7
 800183c:	2230      	movs	r2, #48	; 0x30
 800183e:	2100      	movs	r1, #0
 8001840:	4618      	mov	r0, r3
 8001842:	f007 ffd1 	bl	80097e8 <memset>

  /** DAC Initialization 
  */
  hdac2.Instance = DAC2;
 8001846:	4b16      	ldr	r3, [pc, #88]	; (80018a0 <MX_DAC2_Init+0x6c>)
 8001848:	4a16      	ldr	r2, [pc, #88]	; (80018a4 <MX_DAC2_Init+0x70>)
 800184a:	601a      	str	r2, [r3, #0]
  if (HAL_DAC_Init(&hdac2) != HAL_OK)
 800184c:	4814      	ldr	r0, [pc, #80]	; (80018a0 <MX_DAC2_Init+0x6c>)
 800184e:	f003 f904 	bl	8004a5a <HAL_DAC_Init>
 8001852:	4603      	mov	r3, r0
 8001854:	2b00      	cmp	r3, #0
 8001856:	d001      	beq.n	800185c <MX_DAC2_Init+0x28>
  {
    Error_Handler();
 8001858:	f000 fdf0 	bl	800243c <Error_Handler>
  }
  /** DAC channel OUT1 config 
  */
  sConfig.DAC_HighFrequency = DAC_HIGH_FREQUENCY_INTERFACE_MODE_ABOVE_80MHZ;
 800185c:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8001860:	603b      	str	r3, [r7, #0]
  sConfig.DAC_DMADoubleDataMode = DISABLE;
 8001862:	2300      	movs	r3, #0
 8001864:	713b      	strb	r3, [r7, #4]
  sConfig.DAC_SignedFormat = DISABLE;
 8001866:	2300      	movs	r3, #0
 8001868:	717b      	strb	r3, [r7, #5]
  sConfig.DAC_SampleAndHold = DAC_SAMPLEANDHOLD_DISABLE;
 800186a:	2300      	movs	r3, #0
 800186c:	60bb      	str	r3, [r7, #8]
  sConfig.DAC_Trigger = DAC_TRIGGER_T8_TRGO;
 800186e:	2306      	movs	r3, #6
 8001870:	60fb      	str	r3, [r7, #12]
  sConfig.DAC_Trigger2 = DAC_TRIGGER_NONE;
 8001872:	2300      	movs	r3, #0
 8001874:	613b      	str	r3, [r7, #16]
  sConfig.DAC_OutputBuffer = DAC_OUTPUTBUFFER_ENABLE;
 8001876:	2300      	movs	r3, #0
 8001878:	617b      	str	r3, [r7, #20]
  sConfig.DAC_ConnectOnChipPeripheral = DAC_CHIPCONNECT_DISABLE;
 800187a:	2301      	movs	r3, #1
 800187c:	61bb      	str	r3, [r7, #24]
  sConfig.DAC_UserTrimming = DAC_TRIMMING_FACTORY;
 800187e:	2300      	movs	r3, #0
 8001880:	61fb      	str	r3, [r7, #28]
  if (HAL_DAC_ConfigChannel(&hdac2, &sConfig, DAC_CHANNEL_1) != HAL_OK)
 8001882:	463b      	mov	r3, r7
 8001884:	2200      	movs	r2, #0
 8001886:	4619      	mov	r1, r3
 8001888:	4805      	ldr	r0, [pc, #20]	; (80018a0 <MX_DAC2_Init+0x6c>)
 800188a:	f003 fac5 	bl	8004e18 <HAL_DAC_ConfigChannel>
 800188e:	4603      	mov	r3, r0
 8001890:	2b00      	cmp	r3, #0
 8001892:	d001      	beq.n	8001898 <MX_DAC2_Init+0x64>
  {
    Error_Handler();
 8001894:	f000 fdd2 	bl	800243c <Error_Handler>
  }

}
 8001898:	bf00      	nop
 800189a:	3730      	adds	r7, #48	; 0x30
 800189c:	46bd      	mov	sp, r7
 800189e:	bd80      	pop	{r7, pc}
 80018a0:	20001200 	.word	0x20001200
 80018a4:	50000c00 	.word	0x50000c00

080018a8 <HAL_DAC_MspInit>:

void HAL_DAC_MspInit(DAC_HandleTypeDef* dacHandle)
{
 80018a8:	b580      	push	{r7, lr}
 80018aa:	b08c      	sub	sp, #48	; 0x30
 80018ac:	af00      	add	r7, sp, #0
 80018ae:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80018b0:	f107 031c 	add.w	r3, r7, #28
 80018b4:	2200      	movs	r2, #0
 80018b6:	601a      	str	r2, [r3, #0]
 80018b8:	605a      	str	r2, [r3, #4]
 80018ba:	609a      	str	r2, [r3, #8]
 80018bc:	60da      	str	r2, [r3, #12]
 80018be:	611a      	str	r2, [r3, #16]
  if(dacHandle->Instance==DAC1)
 80018c0:	687b      	ldr	r3, [r7, #4]
 80018c2:	681b      	ldr	r3, [r3, #0]
 80018c4:	4a56      	ldr	r2, [pc, #344]	; (8001a20 <HAL_DAC_MspInit+0x178>)
 80018c6:	4293      	cmp	r3, r2
 80018c8:	d150      	bne.n	800196c <HAL_DAC_MspInit+0xc4>
  {
  /* USER CODE BEGIN DAC1_MspInit 0 */

  /* USER CODE END DAC1_MspInit 0 */
    /* DAC1 clock enable */
    __HAL_RCC_DAC1_CLK_ENABLE();
 80018ca:	4b56      	ldr	r3, [pc, #344]	; (8001a24 <HAL_DAC_MspInit+0x17c>)
 80018cc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80018ce:	4a55      	ldr	r2, [pc, #340]	; (8001a24 <HAL_DAC_MspInit+0x17c>)
 80018d0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80018d4:	64d3      	str	r3, [r2, #76]	; 0x4c
 80018d6:	4b53      	ldr	r3, [pc, #332]	; (8001a24 <HAL_DAC_MspInit+0x17c>)
 80018d8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80018da:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80018de:	61bb      	str	r3, [r7, #24]
 80018e0:	69bb      	ldr	r3, [r7, #24]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80018e2:	4b50      	ldr	r3, [pc, #320]	; (8001a24 <HAL_DAC_MspInit+0x17c>)
 80018e4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80018e6:	4a4f      	ldr	r2, [pc, #316]	; (8001a24 <HAL_DAC_MspInit+0x17c>)
 80018e8:	f043 0301 	orr.w	r3, r3, #1
 80018ec:	64d3      	str	r3, [r2, #76]	; 0x4c
 80018ee:	4b4d      	ldr	r3, [pc, #308]	; (8001a24 <HAL_DAC_MspInit+0x17c>)
 80018f0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80018f2:	f003 0301 	and.w	r3, r3, #1
 80018f6:	617b      	str	r3, [r7, #20]
 80018f8:	697b      	ldr	r3, [r7, #20]
    /**DAC1 GPIO Configuration    
    PA4     ------> DAC1_OUT1
    PA5     ------> DAC1_OUT2 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 80018fa:	2330      	movs	r3, #48	; 0x30
 80018fc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80018fe:	2303      	movs	r3, #3
 8001900:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001902:	2300      	movs	r3, #0
 8001904:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001906:	f107 031c 	add.w	r3, r7, #28
 800190a:	4619      	mov	r1, r3
 800190c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001910:	f003 ff84 	bl	800581c <HAL_GPIO_Init>

    /* DAC1 DMA Init */
    /* DAC1_CH1 Init */
    hdma_dac1_ch1.Instance = DMA1_Channel2;
 8001914:	4b44      	ldr	r3, [pc, #272]	; (8001a28 <HAL_DAC_MspInit+0x180>)
 8001916:	4a45      	ldr	r2, [pc, #276]	; (8001a2c <HAL_DAC_MspInit+0x184>)
 8001918:	601a      	str	r2, [r3, #0]
    hdma_dac1_ch1.Init.Request = DMA_REQUEST_DAC1_CHANNEL1;
 800191a:	4b43      	ldr	r3, [pc, #268]	; (8001a28 <HAL_DAC_MspInit+0x180>)
 800191c:	2206      	movs	r2, #6
 800191e:	605a      	str	r2, [r3, #4]
    hdma_dac1_ch1.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8001920:	4b41      	ldr	r3, [pc, #260]	; (8001a28 <HAL_DAC_MspInit+0x180>)
 8001922:	2210      	movs	r2, #16
 8001924:	609a      	str	r2, [r3, #8]
    hdma_dac1_ch1.Init.PeriphInc = DMA_PINC_DISABLE;
 8001926:	4b40      	ldr	r3, [pc, #256]	; (8001a28 <HAL_DAC_MspInit+0x180>)
 8001928:	2200      	movs	r2, #0
 800192a:	60da      	str	r2, [r3, #12]
    hdma_dac1_ch1.Init.MemInc = DMA_MINC_ENABLE;
 800192c:	4b3e      	ldr	r3, [pc, #248]	; (8001a28 <HAL_DAC_MspInit+0x180>)
 800192e:	2280      	movs	r2, #128	; 0x80
 8001930:	611a      	str	r2, [r3, #16]
    hdma_dac1_ch1.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8001932:	4b3d      	ldr	r3, [pc, #244]	; (8001a28 <HAL_DAC_MspInit+0x180>)
 8001934:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001938:	615a      	str	r2, [r3, #20]
    hdma_dac1_ch1.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 800193a:	4b3b      	ldr	r3, [pc, #236]	; (8001a28 <HAL_DAC_MspInit+0x180>)
 800193c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8001940:	619a      	str	r2, [r3, #24]
    hdma_dac1_ch1.Init.Mode = DMA_CIRCULAR;
 8001942:	4b39      	ldr	r3, [pc, #228]	; (8001a28 <HAL_DAC_MspInit+0x180>)
 8001944:	2220      	movs	r2, #32
 8001946:	61da      	str	r2, [r3, #28]
    hdma_dac1_ch1.Init.Priority = DMA_PRIORITY_LOW;
 8001948:	4b37      	ldr	r3, [pc, #220]	; (8001a28 <HAL_DAC_MspInit+0x180>)
 800194a:	2200      	movs	r2, #0
 800194c:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_dac1_ch1) != HAL_OK)
 800194e:	4836      	ldr	r0, [pc, #216]	; (8001a28 <HAL_DAC_MspInit+0x180>)
 8001950:	f003 fc98 	bl	8005284 <HAL_DMA_Init>
 8001954:	4603      	mov	r3, r0
 8001956:	2b00      	cmp	r3, #0
 8001958:	d001      	beq.n	800195e <HAL_DAC_MspInit+0xb6>
    {
      Error_Handler();
 800195a:	f000 fd6f 	bl	800243c <Error_Handler>
    }

    __HAL_LINKDMA(dacHandle,DMA_Handle1,hdma_dac1_ch1);
 800195e:	687b      	ldr	r3, [r7, #4]
 8001960:	4a31      	ldr	r2, [pc, #196]	; (8001a28 <HAL_DAC_MspInit+0x180>)
 8001962:	609a      	str	r2, [r3, #8]
 8001964:	4a30      	ldr	r2, [pc, #192]	; (8001a28 <HAL_DAC_MspInit+0x180>)
 8001966:	687b      	ldr	r3, [r7, #4]
 8001968:	6293      	str	r3, [r2, #40]	; 0x28

  /* USER CODE BEGIN DAC2_MspInit 1 */

  /* USER CODE END DAC2_MspInit 1 */
  }
}
 800196a:	e054      	b.n	8001a16 <HAL_DAC_MspInit+0x16e>
  else if(dacHandle->Instance==DAC2)
 800196c:	687b      	ldr	r3, [r7, #4]
 800196e:	681b      	ldr	r3, [r3, #0]
 8001970:	4a2f      	ldr	r2, [pc, #188]	; (8001a30 <HAL_DAC_MspInit+0x188>)
 8001972:	4293      	cmp	r3, r2
 8001974:	d14f      	bne.n	8001a16 <HAL_DAC_MspInit+0x16e>
    __HAL_RCC_DAC2_CLK_ENABLE();
 8001976:	4b2b      	ldr	r3, [pc, #172]	; (8001a24 <HAL_DAC_MspInit+0x17c>)
 8001978:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800197a:	4a2a      	ldr	r2, [pc, #168]	; (8001a24 <HAL_DAC_MspInit+0x17c>)
 800197c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001980:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001982:	4b28      	ldr	r3, [pc, #160]	; (8001a24 <HAL_DAC_MspInit+0x17c>)
 8001984:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001986:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800198a:	613b      	str	r3, [r7, #16]
 800198c:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800198e:	4b25      	ldr	r3, [pc, #148]	; (8001a24 <HAL_DAC_MspInit+0x17c>)
 8001990:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001992:	4a24      	ldr	r2, [pc, #144]	; (8001a24 <HAL_DAC_MspInit+0x17c>)
 8001994:	f043 0301 	orr.w	r3, r3, #1
 8001998:	64d3      	str	r3, [r2, #76]	; 0x4c
 800199a:	4b22      	ldr	r3, [pc, #136]	; (8001a24 <HAL_DAC_MspInit+0x17c>)
 800199c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800199e:	f003 0301 	and.w	r3, r3, #1
 80019a2:	60fb      	str	r3, [r7, #12]
 80019a4:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 80019a6:	2340      	movs	r3, #64	; 0x40
 80019a8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80019aa:	2303      	movs	r3, #3
 80019ac:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80019ae:	2300      	movs	r3, #0
 80019b0:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80019b2:	f107 031c 	add.w	r3, r7, #28
 80019b6:	4619      	mov	r1, r3
 80019b8:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80019bc:	f003 ff2e 	bl	800581c <HAL_GPIO_Init>
    hdma_dac2_ch1.Instance = DMA1_Channel3;
 80019c0:	4b1c      	ldr	r3, [pc, #112]	; (8001a34 <HAL_DAC_MspInit+0x18c>)
 80019c2:	4a1d      	ldr	r2, [pc, #116]	; (8001a38 <HAL_DAC_MspInit+0x190>)
 80019c4:	601a      	str	r2, [r3, #0]
    hdma_dac2_ch1.Init.Request = DMA_REQUEST_DAC2_CHANNEL1;
 80019c6:	4b1b      	ldr	r3, [pc, #108]	; (8001a34 <HAL_DAC_MspInit+0x18c>)
 80019c8:	2229      	movs	r2, #41	; 0x29
 80019ca:	605a      	str	r2, [r3, #4]
    hdma_dac2_ch1.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80019cc:	4b19      	ldr	r3, [pc, #100]	; (8001a34 <HAL_DAC_MspInit+0x18c>)
 80019ce:	2210      	movs	r2, #16
 80019d0:	609a      	str	r2, [r3, #8]
    hdma_dac2_ch1.Init.PeriphInc = DMA_PINC_DISABLE;
 80019d2:	4b18      	ldr	r3, [pc, #96]	; (8001a34 <HAL_DAC_MspInit+0x18c>)
 80019d4:	2200      	movs	r2, #0
 80019d6:	60da      	str	r2, [r3, #12]
    hdma_dac2_ch1.Init.MemInc = DMA_MINC_ENABLE;
 80019d8:	4b16      	ldr	r3, [pc, #88]	; (8001a34 <HAL_DAC_MspInit+0x18c>)
 80019da:	2280      	movs	r2, #128	; 0x80
 80019dc:	611a      	str	r2, [r3, #16]
    hdma_dac2_ch1.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 80019de:	4b15      	ldr	r3, [pc, #84]	; (8001a34 <HAL_DAC_MspInit+0x18c>)
 80019e0:	f44f 7200 	mov.w	r2, #512	; 0x200
 80019e4:	615a      	str	r2, [r3, #20]
    hdma_dac2_ch1.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 80019e6:	4b13      	ldr	r3, [pc, #76]	; (8001a34 <HAL_DAC_MspInit+0x18c>)
 80019e8:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80019ec:	619a      	str	r2, [r3, #24]
    hdma_dac2_ch1.Init.Mode = DMA_CIRCULAR;
 80019ee:	4b11      	ldr	r3, [pc, #68]	; (8001a34 <HAL_DAC_MspInit+0x18c>)
 80019f0:	2220      	movs	r2, #32
 80019f2:	61da      	str	r2, [r3, #28]
    hdma_dac2_ch1.Init.Priority = DMA_PRIORITY_LOW;
 80019f4:	4b0f      	ldr	r3, [pc, #60]	; (8001a34 <HAL_DAC_MspInit+0x18c>)
 80019f6:	2200      	movs	r2, #0
 80019f8:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_dac2_ch1) != HAL_OK)
 80019fa:	480e      	ldr	r0, [pc, #56]	; (8001a34 <HAL_DAC_MspInit+0x18c>)
 80019fc:	f003 fc42 	bl	8005284 <HAL_DMA_Init>
 8001a00:	4603      	mov	r3, r0
 8001a02:	2b00      	cmp	r3, #0
 8001a04:	d001      	beq.n	8001a0a <HAL_DAC_MspInit+0x162>
      Error_Handler();
 8001a06:	f000 fd19 	bl	800243c <Error_Handler>
    __HAL_LINKDMA(dacHandle,DMA_Handle1,hdma_dac2_ch1);
 8001a0a:	687b      	ldr	r3, [r7, #4]
 8001a0c:	4a09      	ldr	r2, [pc, #36]	; (8001a34 <HAL_DAC_MspInit+0x18c>)
 8001a0e:	609a      	str	r2, [r3, #8]
 8001a10:	4a08      	ldr	r2, [pc, #32]	; (8001a34 <HAL_DAC_MspInit+0x18c>)
 8001a12:	687b      	ldr	r3, [r7, #4]
 8001a14:	6293      	str	r3, [r2, #40]	; 0x28
}
 8001a16:	bf00      	nop
 8001a18:	3730      	adds	r7, #48	; 0x30
 8001a1a:	46bd      	mov	sp, r7
 8001a1c:	bd80      	pop	{r7, pc}
 8001a1e:	bf00      	nop
 8001a20:	50000800 	.word	0x50000800
 8001a24:	40021000 	.word	0x40021000
 8001a28:	20001228 	.word	0x20001228
 8001a2c:	4002001c 	.word	0x4002001c
 8001a30:	50000c00 	.word	0x50000c00
 8001a34:	20001288 	.word	0x20001288
 8001a38:	40020030 	.word	0x40020030

08001a3c <MX_DMA_Init>:

/** 
  * Enable DMA controller clock
  */
void MX_DMA_Init(void) 
{
 8001a3c:	b580      	push	{r7, lr}
 8001a3e:	b082      	sub	sp, #8
 8001a40:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMAMUX1_CLK_ENABLE();
 8001a42:	4b1a      	ldr	r3, [pc, #104]	; (8001aac <MX_DMA_Init+0x70>)
 8001a44:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001a46:	4a19      	ldr	r2, [pc, #100]	; (8001aac <MX_DMA_Init+0x70>)
 8001a48:	f043 0304 	orr.w	r3, r3, #4
 8001a4c:	6493      	str	r3, [r2, #72]	; 0x48
 8001a4e:	4b17      	ldr	r3, [pc, #92]	; (8001aac <MX_DMA_Init+0x70>)
 8001a50:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001a52:	f003 0304 	and.w	r3, r3, #4
 8001a56:	607b      	str	r3, [r7, #4]
 8001a58:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA1_CLK_ENABLE();
 8001a5a:	4b14      	ldr	r3, [pc, #80]	; (8001aac <MX_DMA_Init+0x70>)
 8001a5c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001a5e:	4a13      	ldr	r2, [pc, #76]	; (8001aac <MX_DMA_Init+0x70>)
 8001a60:	f043 0301 	orr.w	r3, r3, #1
 8001a64:	6493      	str	r3, [r2, #72]	; 0x48
 8001a66:	4b11      	ldr	r3, [pc, #68]	; (8001aac <MX_DMA_Init+0x70>)
 8001a68:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001a6a:	f003 0301 	and.w	r3, r3, #1
 8001a6e:	603b      	str	r3, [r7, #0]
 8001a70:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 1, 0);
 8001a72:	2200      	movs	r2, #0
 8001a74:	2101      	movs	r1, #1
 8001a76:	200b      	movs	r0, #11
 8001a78:	f002 ffbb 	bl	80049f2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 8001a7c:	200b      	movs	r0, #11
 8001a7e:	f002 ffd2 	bl	8004a26 <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel2_IRQn, 0, 0);
 8001a82:	2200      	movs	r2, #0
 8001a84:	2100      	movs	r1, #0
 8001a86:	200c      	movs	r0, #12
 8001a88:	f002 ffb3 	bl	80049f2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel2_IRQn);
 8001a8c:	200c      	movs	r0, #12
 8001a8e:	f002 ffca 	bl	8004a26 <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel3_IRQn, 0, 0);
 8001a92:	2200      	movs	r2, #0
 8001a94:	2100      	movs	r1, #0
 8001a96:	200d      	movs	r0, #13
 8001a98:	f002 ffab 	bl	80049f2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel3_IRQn);
 8001a9c:	200d      	movs	r0, #13
 8001a9e:	f002 ffc2 	bl	8004a26 <HAL_NVIC_EnableIRQ>

}
 8001aa2:	bf00      	nop
 8001aa4:	3708      	adds	r7, #8
 8001aa6:	46bd      	mov	sp, r7
 8001aa8:	bd80      	pop	{r7, pc}
 8001aaa:	bf00      	nop
 8001aac:	40021000 	.word	0x40021000

08001ab0 <update_dc_bias_sweep>:
uint16_t dcbias = 0;
int dcbias_dir = 1;
int dcinverted = 0;

void update_dc_bias_sweep()
{
 8001ab0:	b580      	push	{r7, lr}
 8001ab2:	af00      	add	r7, sp, #0
	  // up=1, down=0
	  (dcbias_dir) ? (dcbias++) : (dcbias--);
 8001ab4:	4b20      	ldr	r3, [pc, #128]	; (8001b38 <update_dc_bias_sweep+0x88>)
 8001ab6:	681b      	ldr	r3, [r3, #0]
 8001ab8:	2b00      	cmp	r3, #0
 8001aba:	d006      	beq.n	8001aca <update_dc_bias_sweep+0x1a>
 8001abc:	4b1f      	ldr	r3, [pc, #124]	; (8001b3c <update_dc_bias_sweep+0x8c>)
 8001abe:	881b      	ldrh	r3, [r3, #0]
 8001ac0:	3301      	adds	r3, #1
 8001ac2:	b29a      	uxth	r2, r3
 8001ac4:	4b1d      	ldr	r3, [pc, #116]	; (8001b3c <update_dc_bias_sweep+0x8c>)
 8001ac6:	801a      	strh	r2, [r3, #0]
 8001ac8:	e005      	b.n	8001ad6 <update_dc_bias_sweep+0x26>
 8001aca:	4b1c      	ldr	r3, [pc, #112]	; (8001b3c <update_dc_bias_sweep+0x8c>)
 8001acc:	881b      	ldrh	r3, [r3, #0]
 8001ace:	3b01      	subs	r3, #1
 8001ad0:	b29a      	uxth	r2, r3
 8001ad2:	4b1a      	ldr	r3, [pc, #104]	; (8001b3c <update_dc_bias_sweep+0x8c>)
 8001ad4:	801a      	strh	r2, [r3, #0]

	  // invert the bias signal at zero crossing
	  if(dcbias < 1) {
 8001ad6:	4b19      	ldr	r3, [pc, #100]	; (8001b3c <update_dc_bias_sweep+0x8c>)
 8001ad8:	881b      	ldrh	r3, [r3, #0]
 8001ada:	2b00      	cmp	r3, #0
 8001adc:	d10a      	bne.n	8001af4 <update_dc_bias_sweep+0x44>
		(dcinverted) ? (dcinverted=0) : (dcinverted=1);
 8001ade:	4b18      	ldr	r3, [pc, #96]	; (8001b40 <update_dc_bias_sweep+0x90>)
 8001ae0:	681b      	ldr	r3, [r3, #0]
 8001ae2:	2b00      	cmp	r3, #0
 8001ae4:	d003      	beq.n	8001aee <update_dc_bias_sweep+0x3e>
 8001ae6:	4b16      	ldr	r3, [pc, #88]	; (8001b40 <update_dc_bias_sweep+0x90>)
 8001ae8:	2200      	movs	r2, #0
 8001aea:	601a      	str	r2, [r3, #0]
 8001aec:	e002      	b.n	8001af4 <update_dc_bias_sweep+0x44>
 8001aee:	4b14      	ldr	r3, [pc, #80]	; (8001b40 <update_dc_bias_sweep+0x90>)
 8001af0:	2201      	movs	r2, #1
 8001af2:	601a      	str	r2, [r3, #0]
	  }

	  // change direction if dac limits are reached
	  if(dcbias < 1) 	{ dcbias_dir = 1; }
 8001af4:	4b11      	ldr	r3, [pc, #68]	; (8001b3c <update_dc_bias_sweep+0x8c>)
 8001af6:	881b      	ldrh	r3, [r3, #0]
 8001af8:	2b00      	cmp	r3, #0
 8001afa:	d102      	bne.n	8001b02 <update_dc_bias_sweep+0x52>
 8001afc:	4b0e      	ldr	r3, [pc, #56]	; (8001b38 <update_dc_bias_sweep+0x88>)
 8001afe:	2201      	movs	r2, #1
 8001b00:	601a      	str	r2, [r3, #0]
	  if(dcbias > 4095) { dcbias_dir = 0; }
 8001b02:	4b0e      	ldr	r3, [pc, #56]	; (8001b3c <update_dc_bias_sweep+0x8c>)
 8001b04:	881b      	ldrh	r3, [r3, #0]
 8001b06:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001b0a:	d302      	bcc.n	8001b12 <update_dc_bias_sweep+0x62>
 8001b0c:	4b0a      	ldr	r3, [pc, #40]	; (8001b38 <update_dc_bias_sweep+0x88>)
 8001b0e:	2200      	movs	r2, #0
 8001b10:	601a      	str	r2, [r3, #0]


	  HAL_GPIO_WritePin(DCBIAS_INVERT_GPIO_Port, DCBIAS_INVERT_Pin, dcinverted);
 8001b12:	4b0b      	ldr	r3, [pc, #44]	; (8001b40 <update_dc_bias_sweep+0x90>)
 8001b14:	681b      	ldr	r3, [r3, #0]
 8001b16:	b2db      	uxtb	r3, r3
 8001b18:	461a      	mov	r2, r3
 8001b1a:	2108      	movs	r1, #8
 8001b1c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001b20:	f004 f816 	bl	8005b50 <HAL_GPIO_WritePin>
	  HAL_DAC_SetValue(&hdac1, DAC1_CHANNEL_2, DAC_ALIGN_12B_R, dcbias);
 8001b24:	4b05      	ldr	r3, [pc, #20]	; (8001b3c <update_dc_bias_sweep+0x8c>)
 8001b26:	881b      	ldrh	r3, [r3, #0]
 8001b28:	2200      	movs	r2, #0
 8001b2a:	2110      	movs	r1, #16
 8001b2c:	4805      	ldr	r0, [pc, #20]	; (8001b44 <update_dc_bias_sweep+0x94>)
 8001b2e:	f003 f921 	bl	8004d74 <HAL_DAC_SetValue>
}
 8001b32:	bf00      	nop
 8001b34:	bd80      	pop	{r7, pc}
 8001b36:	bf00      	nop
 8001b38:	2000000c 	.word	0x2000000c
 8001b3c:	200010ec 	.word	0x200010ec
 8001b40:	200010f0 	.word	0x200010f0
 8001b44:	20001214 	.word	0x20001214

08001b48 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001b48:	b480      	push	{r7}
 8001b4a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001b4c:	4b04      	ldr	r3, [pc, #16]	; (8001b60 <__NVIC_GetPriorityGrouping+0x18>)
 8001b4e:	68db      	ldr	r3, [r3, #12]
 8001b50:	0a1b      	lsrs	r3, r3, #8
 8001b52:	f003 0307 	and.w	r3, r3, #7
}
 8001b56:	4618      	mov	r0, r3
 8001b58:	46bd      	mov	sp, r7
 8001b5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b5e:	4770      	bx	lr
 8001b60:	e000ed00 	.word	0xe000ed00

08001b64 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001b64:	b480      	push	{r7}
 8001b66:	b083      	sub	sp, #12
 8001b68:	af00      	add	r7, sp, #0
 8001b6a:	4603      	mov	r3, r0
 8001b6c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001b6e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001b72:	2b00      	cmp	r3, #0
 8001b74:	db0b      	blt.n	8001b8e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001b76:	79fb      	ldrb	r3, [r7, #7]
 8001b78:	f003 021f 	and.w	r2, r3, #31
 8001b7c:	4907      	ldr	r1, [pc, #28]	; (8001b9c <__NVIC_EnableIRQ+0x38>)
 8001b7e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001b82:	095b      	lsrs	r3, r3, #5
 8001b84:	2001      	movs	r0, #1
 8001b86:	fa00 f202 	lsl.w	r2, r0, r2
 8001b8a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001b8e:	bf00      	nop
 8001b90:	370c      	adds	r7, #12
 8001b92:	46bd      	mov	sp, r7
 8001b94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b98:	4770      	bx	lr
 8001b9a:	bf00      	nop
 8001b9c:	e000e100 	.word	0xe000e100

08001ba0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001ba0:	b480      	push	{r7}
 8001ba2:	b083      	sub	sp, #12
 8001ba4:	af00      	add	r7, sp, #0
 8001ba6:	4603      	mov	r3, r0
 8001ba8:	6039      	str	r1, [r7, #0]
 8001baa:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001bac:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001bb0:	2b00      	cmp	r3, #0
 8001bb2:	db0a      	blt.n	8001bca <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001bb4:	683b      	ldr	r3, [r7, #0]
 8001bb6:	b2da      	uxtb	r2, r3
 8001bb8:	490c      	ldr	r1, [pc, #48]	; (8001bec <__NVIC_SetPriority+0x4c>)
 8001bba:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001bbe:	0112      	lsls	r2, r2, #4
 8001bc0:	b2d2      	uxtb	r2, r2
 8001bc2:	440b      	add	r3, r1
 8001bc4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001bc8:	e00a      	b.n	8001be0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001bca:	683b      	ldr	r3, [r7, #0]
 8001bcc:	b2da      	uxtb	r2, r3
 8001bce:	4908      	ldr	r1, [pc, #32]	; (8001bf0 <__NVIC_SetPriority+0x50>)
 8001bd0:	79fb      	ldrb	r3, [r7, #7]
 8001bd2:	f003 030f 	and.w	r3, r3, #15
 8001bd6:	3b04      	subs	r3, #4
 8001bd8:	0112      	lsls	r2, r2, #4
 8001bda:	b2d2      	uxtb	r2, r2
 8001bdc:	440b      	add	r3, r1
 8001bde:	761a      	strb	r2, [r3, #24]
}
 8001be0:	bf00      	nop
 8001be2:	370c      	adds	r7, #12
 8001be4:	46bd      	mov	sp, r7
 8001be6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bea:	4770      	bx	lr
 8001bec:	e000e100 	.word	0xe000e100
 8001bf0:	e000ed00 	.word	0xe000ed00

08001bf4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001bf4:	b480      	push	{r7}
 8001bf6:	b089      	sub	sp, #36	; 0x24
 8001bf8:	af00      	add	r7, sp, #0
 8001bfa:	60f8      	str	r0, [r7, #12]
 8001bfc:	60b9      	str	r1, [r7, #8]
 8001bfe:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001c00:	68fb      	ldr	r3, [r7, #12]
 8001c02:	f003 0307 	and.w	r3, r3, #7
 8001c06:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001c08:	69fb      	ldr	r3, [r7, #28]
 8001c0a:	f1c3 0307 	rsb	r3, r3, #7
 8001c0e:	2b04      	cmp	r3, #4
 8001c10:	bf28      	it	cs
 8001c12:	2304      	movcs	r3, #4
 8001c14:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001c16:	69fb      	ldr	r3, [r7, #28]
 8001c18:	3304      	adds	r3, #4
 8001c1a:	2b06      	cmp	r3, #6
 8001c1c:	d902      	bls.n	8001c24 <NVIC_EncodePriority+0x30>
 8001c1e:	69fb      	ldr	r3, [r7, #28]
 8001c20:	3b03      	subs	r3, #3
 8001c22:	e000      	b.n	8001c26 <NVIC_EncodePriority+0x32>
 8001c24:	2300      	movs	r3, #0
 8001c26:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001c28:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8001c2c:	69bb      	ldr	r3, [r7, #24]
 8001c2e:	fa02 f303 	lsl.w	r3, r2, r3
 8001c32:	43da      	mvns	r2, r3
 8001c34:	68bb      	ldr	r3, [r7, #8]
 8001c36:	401a      	ands	r2, r3
 8001c38:	697b      	ldr	r3, [r7, #20]
 8001c3a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001c3c:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8001c40:	697b      	ldr	r3, [r7, #20]
 8001c42:	fa01 f303 	lsl.w	r3, r1, r3
 8001c46:	43d9      	mvns	r1, r3
 8001c48:	687b      	ldr	r3, [r7, #4]
 8001c4a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001c4c:	4313      	orrs	r3, r2
         );
}
 8001c4e:	4618      	mov	r0, r3
 8001c50:	3724      	adds	r7, #36	; 0x24
 8001c52:	46bd      	mov	sp, r7
 8001c54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c58:	4770      	bx	lr
	...

08001c5c <LL_SYSCFG_SetEXTISource>:
  *         @arg @ref LL_SYSCFG_EXTI_LINE14
  *         @arg @ref LL_SYSCFG_EXTI_LINE15
  * @retval None
  */
__STATIC_INLINE void LL_SYSCFG_SetEXTISource(uint32_t Port, uint32_t Line)
{
 8001c5c:	b480      	push	{r7}
 8001c5e:	b085      	sub	sp, #20
 8001c60:	af00      	add	r7, sp, #0
 8001c62:	6078      	str	r0, [r7, #4]
 8001c64:	6039      	str	r1, [r7, #0]
  MODIFY_REG(SYSCFG->EXTICR[Line & 0x3U], (Line >> 16U), Port << (POSITION_VAL((Line >> 16U)) & 0x1FU) );
 8001c66:	4a14      	ldr	r2, [pc, #80]	; (8001cb8 <LL_SYSCFG_SetEXTISource+0x5c>)
 8001c68:	683b      	ldr	r3, [r7, #0]
 8001c6a:	f003 0303 	and.w	r3, r3, #3
 8001c6e:	3302      	adds	r3, #2
 8001c70:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8001c74:	683b      	ldr	r3, [r7, #0]
 8001c76:	0c1b      	lsrs	r3, r3, #16
 8001c78:	43db      	mvns	r3, r3
 8001c7a:	ea02 0103 	and.w	r1, r2, r3
 8001c7e:	683b      	ldr	r3, [r7, #0]
 8001c80:	0c1b      	lsrs	r3, r3, #16
 8001c82:	60fb      	str	r3, [r7, #12]
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001c84:	68fb      	ldr	r3, [r7, #12]
 8001c86:	fa93 f3a3 	rbit	r3, r3
 8001c8a:	60bb      	str	r3, [r7, #8]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8001c8c:	68bb      	ldr	r3, [r7, #8]
 8001c8e:	fab3 f383 	clz	r3, r3
 8001c92:	b2db      	uxtb	r3, r3
 8001c94:	f003 031f 	and.w	r3, r3, #31
 8001c98:	687a      	ldr	r2, [r7, #4]
 8001c9a:	409a      	lsls	r2, r3
 8001c9c:	4806      	ldr	r0, [pc, #24]	; (8001cb8 <LL_SYSCFG_SetEXTISource+0x5c>)
 8001c9e:	683b      	ldr	r3, [r7, #0]
 8001ca0:	f003 0303 	and.w	r3, r3, #3
 8001ca4:	430a      	orrs	r2, r1
 8001ca6:	3302      	adds	r3, #2
 8001ca8:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
}
 8001cac:	bf00      	nop
 8001cae:	3714      	adds	r7, #20
 8001cb0:	46bd      	mov	sp, r7
 8001cb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cb6:	4770      	bx	lr
 8001cb8:	40010000 	.word	0x40010000

08001cbc <LL_GPIO_SetPinMode>:
  *         @arg @ref LL_GPIO_MODE_ALTERNATE
  *         @arg @ref LL_GPIO_MODE_ANALOG
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetPinMode(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t Mode)
{
 8001cbc:	b480      	push	{r7}
 8001cbe:	b089      	sub	sp, #36	; 0x24
 8001cc0:	af00      	add	r7, sp, #0
 8001cc2:	60f8      	str	r0, [r7, #12]
 8001cc4:	60b9      	str	r1, [r7, #8]
 8001cc6:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->MODER, (GPIO_MODER_MODE0 << (POSITION_VAL(Pin) * 2U)), (Mode << (POSITION_VAL(Pin) * 2U)));
 8001cc8:	68fb      	ldr	r3, [r7, #12]
 8001cca:	681a      	ldr	r2, [r3, #0]
 8001ccc:	68bb      	ldr	r3, [r7, #8]
 8001cce:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001cd0:	697b      	ldr	r3, [r7, #20]
 8001cd2:	fa93 f3a3 	rbit	r3, r3
 8001cd6:	613b      	str	r3, [r7, #16]
  return result;
 8001cd8:	693b      	ldr	r3, [r7, #16]
 8001cda:	fab3 f383 	clz	r3, r3
 8001cde:	b2db      	uxtb	r3, r3
 8001ce0:	005b      	lsls	r3, r3, #1
 8001ce2:	2103      	movs	r1, #3
 8001ce4:	fa01 f303 	lsl.w	r3, r1, r3
 8001ce8:	43db      	mvns	r3, r3
 8001cea:	401a      	ands	r2, r3
 8001cec:	68bb      	ldr	r3, [r7, #8]
 8001cee:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001cf0:	69fb      	ldr	r3, [r7, #28]
 8001cf2:	fa93 f3a3 	rbit	r3, r3
 8001cf6:	61bb      	str	r3, [r7, #24]
  return result;
 8001cf8:	69bb      	ldr	r3, [r7, #24]
 8001cfa:	fab3 f383 	clz	r3, r3
 8001cfe:	b2db      	uxtb	r3, r3
 8001d00:	005b      	lsls	r3, r3, #1
 8001d02:	6879      	ldr	r1, [r7, #4]
 8001d04:	fa01 f303 	lsl.w	r3, r1, r3
 8001d08:	431a      	orrs	r2, r3
 8001d0a:	68fb      	ldr	r3, [r7, #12]
 8001d0c:	601a      	str	r2, [r3, #0]
}
 8001d0e:	bf00      	nop
 8001d10:	3724      	adds	r7, #36	; 0x24
 8001d12:	46bd      	mov	sp, r7
 8001d14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d18:	4770      	bx	lr

08001d1a <LL_GPIO_SetPinPull>:
  *         @arg @ref LL_GPIO_PULL_UP
  *         @arg @ref LL_GPIO_PULL_DOWN
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetPinPull(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t Pull)
{
 8001d1a:	b480      	push	{r7}
 8001d1c:	b089      	sub	sp, #36	; 0x24
 8001d1e:	af00      	add	r7, sp, #0
 8001d20:	60f8      	str	r0, [r7, #12]
 8001d22:	60b9      	str	r1, [r7, #8]
 8001d24:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->PUPDR, (GPIO_PUPDR_PUPD0 << (POSITION_VAL(Pin) * 2U)), (Pull << (POSITION_VAL(Pin) * 2U)));
 8001d26:	68fb      	ldr	r3, [r7, #12]
 8001d28:	68da      	ldr	r2, [r3, #12]
 8001d2a:	68bb      	ldr	r3, [r7, #8]
 8001d2c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001d2e:	697b      	ldr	r3, [r7, #20]
 8001d30:	fa93 f3a3 	rbit	r3, r3
 8001d34:	613b      	str	r3, [r7, #16]
  return result;
 8001d36:	693b      	ldr	r3, [r7, #16]
 8001d38:	fab3 f383 	clz	r3, r3
 8001d3c:	b2db      	uxtb	r3, r3
 8001d3e:	005b      	lsls	r3, r3, #1
 8001d40:	2103      	movs	r1, #3
 8001d42:	fa01 f303 	lsl.w	r3, r1, r3
 8001d46:	43db      	mvns	r3, r3
 8001d48:	401a      	ands	r2, r3
 8001d4a:	68bb      	ldr	r3, [r7, #8]
 8001d4c:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001d4e:	69fb      	ldr	r3, [r7, #28]
 8001d50:	fa93 f3a3 	rbit	r3, r3
 8001d54:	61bb      	str	r3, [r7, #24]
  return result;
 8001d56:	69bb      	ldr	r3, [r7, #24]
 8001d58:	fab3 f383 	clz	r3, r3
 8001d5c:	b2db      	uxtb	r3, r3
 8001d5e:	005b      	lsls	r3, r3, #1
 8001d60:	6879      	ldr	r1, [r7, #4]
 8001d62:	fa01 f303 	lsl.w	r3, r1, r3
 8001d66:	431a      	orrs	r2, r3
 8001d68:	68fb      	ldr	r3, [r7, #12]
 8001d6a:	60da      	str	r2, [r3, #12]
}
 8001d6c:	bf00      	nop
 8001d6e:	3724      	adds	r7, #36	; 0x24
 8001d70:	46bd      	mov	sp, r7
 8001d72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d76:	4770      	bx	lr

08001d78 <LL_GPIO_ResetOutputPin>:
  *         @arg @ref LL_GPIO_PIN_15
  *         @arg @ref LL_GPIO_PIN_ALL
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_ResetOutputPin(GPIO_TypeDef *GPIOx, uint32_t PinMask)
{
 8001d78:	b480      	push	{r7}
 8001d7a:	b083      	sub	sp, #12
 8001d7c:	af00      	add	r7, sp, #0
 8001d7e:	6078      	str	r0, [r7, #4]
 8001d80:	6039      	str	r1, [r7, #0]
  WRITE_REG(GPIOx->BRR, PinMask);
 8001d82:	687b      	ldr	r3, [r7, #4]
 8001d84:	683a      	ldr	r2, [r7, #0]
 8001d86:	629a      	str	r2, [r3, #40]	; 0x28
}
 8001d88:	bf00      	nop
 8001d8a:	370c      	adds	r7, #12
 8001d8c:	46bd      	mov	sp, r7
 8001d8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d92:	4770      	bx	lr

08001d94 <LL_AHB2_GRP1_EnableClock>:
  *
  *         (*) value not defined in all devices.
  * @retval None
  */
__STATIC_INLINE void LL_AHB2_GRP1_EnableClock(uint32_t Periphs)
{
 8001d94:	b480      	push	{r7}
 8001d96:	b085      	sub	sp, #20
 8001d98:	af00      	add	r7, sp, #0
 8001d9a:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->AHB2ENR, Periphs);
 8001d9c:	4b08      	ldr	r3, [pc, #32]	; (8001dc0 <LL_AHB2_GRP1_EnableClock+0x2c>)
 8001d9e:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8001da0:	4907      	ldr	r1, [pc, #28]	; (8001dc0 <LL_AHB2_GRP1_EnableClock+0x2c>)
 8001da2:	687b      	ldr	r3, [r7, #4]
 8001da4:	4313      	orrs	r3, r2
 8001da6:	64cb      	str	r3, [r1, #76]	; 0x4c
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 8001da8:	4b05      	ldr	r3, [pc, #20]	; (8001dc0 <LL_AHB2_GRP1_EnableClock+0x2c>)
 8001daa:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8001dac:	687b      	ldr	r3, [r7, #4]
 8001dae:	4013      	ands	r3, r2
 8001db0:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8001db2:	68fb      	ldr	r3, [r7, #12]
}
 8001db4:	bf00      	nop
 8001db6:	3714      	adds	r7, #20
 8001db8:	46bd      	mov	sp, r7
 8001dba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dbe:	4770      	bx	lr
 8001dc0:	40021000 	.word	0x40021000

08001dc4 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8001dc4:	b580      	push	{r7, lr}
 8001dc6:	b08a      	sub	sp, #40	; 0x28
 8001dc8:	af00      	add	r7, sp, #0

  LL_EXTI_InitTypeDef EXTI_InitStruct = {0};
 8001dca:	f107 031c 	add.w	r3, r7, #28
 8001dce:	2200      	movs	r2, #0
 8001dd0:	601a      	str	r2, [r3, #0]
 8001dd2:	605a      	str	r2, [r3, #4]
 8001dd4:	609a      	str	r2, [r3, #8]
  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001dd6:	1d3b      	adds	r3, r7, #4
 8001dd8:	2200      	movs	r2, #0
 8001dda:	601a      	str	r2, [r3, #0]
 8001ddc:	605a      	str	r2, [r3, #4]
 8001dde:	609a      	str	r2, [r3, #8]
 8001de0:	60da      	str	r2, [r3, #12]
 8001de2:	611a      	str	r2, [r3, #16]
 8001de4:	615a      	str	r2, [r3, #20]

  /* GPIO Ports Clock Enable */
  LL_AHB2_GRP1_EnableClock(LL_AHB2_GRP1_PERIPH_GPIOC);
 8001de6:	2004      	movs	r0, #4
 8001de8:	f7ff ffd4 	bl	8001d94 <LL_AHB2_GRP1_EnableClock>
  LL_AHB2_GRP1_EnableClock(LL_AHB2_GRP1_PERIPH_GPIOF);
 8001dec:	2020      	movs	r0, #32
 8001dee:	f7ff ffd1 	bl	8001d94 <LL_AHB2_GRP1_EnableClock>
  LL_AHB2_GRP1_EnableClock(LL_AHB2_GRP1_PERIPH_GPIOA);
 8001df2:	2001      	movs	r0, #1
 8001df4:	f7ff ffce 	bl	8001d94 <LL_AHB2_GRP1_EnableClock>
  LL_AHB2_GRP1_EnableClock(LL_AHB2_GRP1_PERIPH_GPIOB);
 8001df8:	2002      	movs	r0, #2
 8001dfa:	f7ff ffcb 	bl	8001d94 <LL_AHB2_GRP1_EnableClock>

  /**/
  LL_GPIO_ResetOutputPin(TRIGMODE_GPIO_Port, TRIGMODE_Pin);
 8001dfe:	2108      	movs	r1, #8
 8001e00:	48d3      	ldr	r0, [pc, #844]	; (8002150 <MX_GPIO_Init+0x38c>)
 8001e02:	f7ff ffb9 	bl	8001d78 <LL_GPIO_ResetOutputPin>

  /**/
  LL_GPIO_ResetOutputPin(DCBIAS_INVERT_GPIO_Port, DCBIAS_INVERT_Pin);
 8001e06:	2108      	movs	r1, #8
 8001e08:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001e0c:	f7ff ffb4 	bl	8001d78 <LL_GPIO_ResetOutputPin>

  /**/
  LL_GPIO_ResetOutputPin(SG2_GPIO_Port, SG2_Pin);
 8001e10:	2110      	movs	r1, #16
 8001e12:	48cf      	ldr	r0, [pc, #828]	; (8002150 <MX_GPIO_Init+0x38c>)
 8001e14:	f7ff ffb0 	bl	8001d78 <LL_GPIO_ResetOutputPin>

  /**/
  LL_GPIO_ResetOutputPin(SG1_GPIO_Port, SG1_Pin);
 8001e18:	2120      	movs	r1, #32
 8001e1a:	48cd      	ldr	r0, [pc, #820]	; (8002150 <MX_GPIO_Init+0x38c>)
 8001e1c:	f7ff ffac 	bl	8001d78 <LL_GPIO_ResetOutputPin>

  /**/
  LL_GPIO_ResetOutputPin(SG0_GPIO_Port, SG0_Pin);
 8001e20:	2101      	movs	r1, #1
 8001e22:	48cc      	ldr	r0, [pc, #816]	; (8002154 <MX_GPIO_Init+0x390>)
 8001e24:	f7ff ffa8 	bl	8001d78 <LL_GPIO_ResetOutputPin>

  /**/
  LL_GPIO_ResetOutputPin(TRIGMUX1_GPIO_Port, TRIGMUX1_Pin);
 8001e28:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001e2c:	48c8      	ldr	r0, [pc, #800]	; (8002150 <MX_GPIO_Init+0x38c>)
 8001e2e:	f7ff ffa3 	bl	8001d78 <LL_GPIO_ResetOutputPin>

  /**/
  LL_GPIO_ResetOutputPin(TRIGMUX2_GPIO_Port, TRIGMUX2_Pin);
 8001e32:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001e36:	48c6      	ldr	r0, [pc, #792]	; (8002150 <MX_GPIO_Init+0x38c>)
 8001e38:	f7ff ff9e 	bl	8001d78 <LL_GPIO_ResetOutputPin>

  /**/
  LL_GPIO_ResetOutputPin(DC_GPIO_Port, DC_Pin);
 8001e3c:	2140      	movs	r1, #64	; 0x40
 8001e3e:	48c5      	ldr	r0, [pc, #788]	; (8002154 <MX_GPIO_Init+0x390>)
 8001e40:	f7ff ff9a 	bl	8001d78 <LL_GPIO_ResetOutputPin>

  /**/
  LL_GPIO_ResetOutputPin(CS_GPIO_Port, CS_Pin);
 8001e44:	2180      	movs	r1, #128	; 0x80
 8001e46:	48c3      	ldr	r0, [pc, #780]	; (8002154 <MX_GPIO_Init+0x390>)
 8001e48:	f7ff ff96 	bl	8001d78 <LL_GPIO_ResetOutputPin>

  /**/
  LL_GPIO_ResetOutputPin(RST_GPIO_Port, RST_Pin);
 8001e4c:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001e50:	48c0      	ldr	r0, [pc, #768]	; (8002154 <MX_GPIO_Init+0x390>)
 8001e52:	f7ff ff91 	bl	8001d78 <LL_GPIO_ResetOutputPin>

  /**/
  LL_SYSCFG_SetEXTISource(LL_SYSCFG_EXTI_PORTC, LL_SYSCFG_EXTI_LINE14);
 8001e56:	49c0      	ldr	r1, [pc, #768]	; (8002158 <MX_GPIO_Init+0x394>)
 8001e58:	2002      	movs	r0, #2
 8001e5a:	f7ff feff 	bl	8001c5c <LL_SYSCFG_SetEXTISource>

  /**/
  LL_SYSCFG_SetEXTISource(LL_SYSCFG_EXTI_PORTC, LL_SYSCFG_EXTI_LINE15);
 8001e5e:	49bf      	ldr	r1, [pc, #764]	; (800215c <MX_GPIO_Init+0x398>)
 8001e60:	2002      	movs	r0, #2
 8001e62:	f7ff fefb 	bl	8001c5c <LL_SYSCFG_SetEXTISource>

  /**/
  LL_SYSCFG_SetEXTISource(LL_SYSCFG_EXTI_PORTF, LL_SYSCFG_EXTI_LINE0);
 8001e66:	f44f 2170 	mov.w	r1, #983040	; 0xf0000
 8001e6a:	2005      	movs	r0, #5
 8001e6c:	f7ff fef6 	bl	8001c5c <LL_SYSCFG_SetEXTISource>

  /**/
  LL_SYSCFG_SetEXTISource(LL_SYSCFG_EXTI_PORTF, LL_SYSCFG_EXTI_LINE1);
 8001e70:	f44f 0170 	mov.w	r1, #15728640	; 0xf00000
 8001e74:	2005      	movs	r0, #5
 8001e76:	f7ff fef1 	bl	8001c5c <LL_SYSCFG_SetEXTISource>

  /**/
  LL_SYSCFG_SetEXTISource(LL_SYSCFG_EXTI_PORTC, LL_SYSCFG_EXTI_LINE2);
 8001e7a:	f04f 6170 	mov.w	r1, #251658240	; 0xf000000
 8001e7e:	2002      	movs	r0, #2
 8001e80:	f7ff feec 	bl	8001c5c <LL_SYSCFG_SetEXTISource>

  /**/
  EXTI_InitStruct.Line_0_31 = LL_EXTI_LINE_14;
 8001e84:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8001e88:	61fb      	str	r3, [r7, #28]
  EXTI_InitStruct.LineCommand = ENABLE;
 8001e8a:	2301      	movs	r3, #1
 8001e8c:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
  EXTI_InitStruct.Mode = LL_EXTI_MODE_IT;
 8001e90:	2300      	movs	r3, #0
 8001e92:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
  EXTI_InitStruct.Trigger = LL_EXTI_TRIGGER_FALLING;
 8001e96:	2302      	movs	r3, #2
 8001e98:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
  LL_EXTI_Init(&EXTI_InitStruct);
 8001e9c:	f107 031c 	add.w	r3, r7, #28
 8001ea0:	4618      	mov	r0, r3
 8001ea2:	f006 faab 	bl	80083fc <LL_EXTI_Init>

  /**/
  EXTI_InitStruct.Line_0_31 = LL_EXTI_LINE_15;
 8001ea6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8001eaa:	61fb      	str	r3, [r7, #28]
  EXTI_InitStruct.LineCommand = ENABLE;
 8001eac:	2301      	movs	r3, #1
 8001eae:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
  EXTI_InitStruct.Mode = LL_EXTI_MODE_IT;
 8001eb2:	2300      	movs	r3, #0
 8001eb4:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
  EXTI_InitStruct.Trigger = LL_EXTI_TRIGGER_FALLING;
 8001eb8:	2302      	movs	r3, #2
 8001eba:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
  LL_EXTI_Init(&EXTI_InitStruct);
 8001ebe:	f107 031c 	add.w	r3, r7, #28
 8001ec2:	4618      	mov	r0, r3
 8001ec4:	f006 fa9a 	bl	80083fc <LL_EXTI_Init>

  /**/
  EXTI_InitStruct.Line_0_31 = LL_EXTI_LINE_0;
 8001ec8:	2301      	movs	r3, #1
 8001eca:	61fb      	str	r3, [r7, #28]
  EXTI_InitStruct.LineCommand = ENABLE;
 8001ecc:	2301      	movs	r3, #1
 8001ece:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
  EXTI_InitStruct.Mode = LL_EXTI_MODE_IT;
 8001ed2:	2300      	movs	r3, #0
 8001ed4:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
  EXTI_InitStruct.Trigger = LL_EXTI_TRIGGER_FALLING;
 8001ed8:	2302      	movs	r3, #2
 8001eda:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
  LL_EXTI_Init(&EXTI_InitStruct);
 8001ede:	f107 031c 	add.w	r3, r7, #28
 8001ee2:	4618      	mov	r0, r3
 8001ee4:	f006 fa8a 	bl	80083fc <LL_EXTI_Init>

  /**/
  EXTI_InitStruct.Line_0_31 = LL_EXTI_LINE_1;
 8001ee8:	2302      	movs	r3, #2
 8001eea:	61fb      	str	r3, [r7, #28]
  EXTI_InitStruct.LineCommand = ENABLE;
 8001eec:	2301      	movs	r3, #1
 8001eee:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
  EXTI_InitStruct.Mode = LL_EXTI_MODE_IT;
 8001ef2:	2300      	movs	r3, #0
 8001ef4:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
  EXTI_InitStruct.Trigger = LL_EXTI_TRIGGER_FALLING;
 8001ef8:	2302      	movs	r3, #2
 8001efa:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
  LL_EXTI_Init(&EXTI_InitStruct);
 8001efe:	f107 031c 	add.w	r3, r7, #28
 8001f02:	4618      	mov	r0, r3
 8001f04:	f006 fa7a 	bl	80083fc <LL_EXTI_Init>

  /**/
  EXTI_InitStruct.Line_0_31 = LL_EXTI_LINE_2;
 8001f08:	2304      	movs	r3, #4
 8001f0a:	61fb      	str	r3, [r7, #28]
  EXTI_InitStruct.LineCommand = ENABLE;
 8001f0c:	2301      	movs	r3, #1
 8001f0e:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
  EXTI_InitStruct.Mode = LL_EXTI_MODE_IT;
 8001f12:	2300      	movs	r3, #0
 8001f14:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
  EXTI_InitStruct.Trigger = LL_EXTI_TRIGGER_FALLING;
 8001f18:	2302      	movs	r3, #2
 8001f1a:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
  LL_EXTI_Init(&EXTI_InitStruct);
 8001f1e:	f107 031c 	add.w	r3, r7, #28
 8001f22:	4618      	mov	r0, r3
 8001f24:	f006 fa6a 	bl	80083fc <LL_EXTI_Init>

  /**/
  LL_GPIO_SetPinPull(BTN1_EXTI14_GPIO_Port, BTN1_EXTI14_Pin, LL_GPIO_PULL_UP);
 8001f28:	2201      	movs	r2, #1
 8001f2a:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001f2e:	4888      	ldr	r0, [pc, #544]	; (8002150 <MX_GPIO_Init+0x38c>)
 8001f30:	f7ff fef3 	bl	8001d1a <LL_GPIO_SetPinPull>

  /**/
  LL_GPIO_SetPinPull(BTN2_EXTI15_GPIO_Port, BTN2_EXTI15_Pin, LL_GPIO_PULL_UP);
 8001f34:	2201      	movs	r2, #1
 8001f36:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001f3a:	4885      	ldr	r0, [pc, #532]	; (8002150 <MX_GPIO_Init+0x38c>)
 8001f3c:	f7ff feed 	bl	8001d1a <LL_GPIO_SetPinPull>

  /**/
  LL_GPIO_SetPinPull(BTN3_EXTI0_GPIO_Port, BTN3_EXTI0_Pin, LL_GPIO_PULL_UP);
 8001f40:	2201      	movs	r2, #1
 8001f42:	2101      	movs	r1, #1
 8001f44:	4886      	ldr	r0, [pc, #536]	; (8002160 <MX_GPIO_Init+0x39c>)
 8001f46:	f7ff fee8 	bl	8001d1a <LL_GPIO_SetPinPull>

  /**/
  LL_GPIO_SetPinPull(BTN4_EXTI1_GPIO_Port, BTN4_EXTI1_Pin, LL_GPIO_PULL_UP);
 8001f4a:	2201      	movs	r2, #1
 8001f4c:	2102      	movs	r1, #2
 8001f4e:	4884      	ldr	r0, [pc, #528]	; (8002160 <MX_GPIO_Init+0x39c>)
 8001f50:	f7ff fee3 	bl	8001d1a <LL_GPIO_SetPinPull>

  /**/
  LL_GPIO_SetPinPull(ENC_EXTI2_GPIO_Port, ENC_EXTI2_Pin, LL_GPIO_PULL_UP);
 8001f54:	2201      	movs	r2, #1
 8001f56:	2104      	movs	r1, #4
 8001f58:	487d      	ldr	r0, [pc, #500]	; (8002150 <MX_GPIO_Init+0x38c>)
 8001f5a:	f7ff fede 	bl	8001d1a <LL_GPIO_SetPinPull>

  /**/
  LL_GPIO_SetPinMode(BTN1_EXTI14_GPIO_Port, BTN1_EXTI14_Pin, LL_GPIO_MODE_INPUT);
 8001f5e:	2200      	movs	r2, #0
 8001f60:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001f64:	487a      	ldr	r0, [pc, #488]	; (8002150 <MX_GPIO_Init+0x38c>)
 8001f66:	f7ff fea9 	bl	8001cbc <LL_GPIO_SetPinMode>

  /**/
  LL_GPIO_SetPinMode(BTN2_EXTI15_GPIO_Port, BTN2_EXTI15_Pin, LL_GPIO_MODE_INPUT);
 8001f6a:	2200      	movs	r2, #0
 8001f6c:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001f70:	4877      	ldr	r0, [pc, #476]	; (8002150 <MX_GPIO_Init+0x38c>)
 8001f72:	f7ff fea3 	bl	8001cbc <LL_GPIO_SetPinMode>

  /**/
  LL_GPIO_SetPinMode(BTN3_EXTI0_GPIO_Port, BTN3_EXTI0_Pin, LL_GPIO_MODE_INPUT);
 8001f76:	2200      	movs	r2, #0
 8001f78:	2101      	movs	r1, #1
 8001f7a:	4879      	ldr	r0, [pc, #484]	; (8002160 <MX_GPIO_Init+0x39c>)
 8001f7c:	f7ff fe9e 	bl	8001cbc <LL_GPIO_SetPinMode>

  /**/
  LL_GPIO_SetPinMode(BTN4_EXTI1_GPIO_Port, BTN4_EXTI1_Pin, LL_GPIO_MODE_INPUT);
 8001f80:	2200      	movs	r2, #0
 8001f82:	2102      	movs	r1, #2
 8001f84:	4876      	ldr	r0, [pc, #472]	; (8002160 <MX_GPIO_Init+0x39c>)
 8001f86:	f7ff fe99 	bl	8001cbc <LL_GPIO_SetPinMode>

  /**/
  LL_GPIO_SetPinMode(ENC_EXTI2_GPIO_Port, ENC_EXTI2_Pin, LL_GPIO_MODE_INPUT);
 8001f8a:	2200      	movs	r2, #0
 8001f8c:	2104      	movs	r1, #4
 8001f8e:	4870      	ldr	r0, [pc, #448]	; (8002150 <MX_GPIO_Init+0x38c>)
 8001f90:	f7ff fe94 	bl	8001cbc <LL_GPIO_SetPinMode>

  /**/
  GPIO_InitStruct.Pin = TRIGMODE_Pin;
 8001f94:	2308      	movs	r3, #8
 8001f96:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 8001f98:	2301      	movs	r3, #1
 8001f9a:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 8001f9c:	2300      	movs	r3, #0
 8001f9e:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8001fa0:	2300      	movs	r3, #0
 8001fa2:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_DOWN;
 8001fa4:	2302      	movs	r3, #2
 8001fa6:	617b      	str	r3, [r7, #20]
  LL_GPIO_Init(TRIGMODE_GPIO_Port, &GPIO_InitStruct);
 8001fa8:	1d3b      	adds	r3, r7, #4
 8001faa:	4619      	mov	r1, r3
 8001fac:	4868      	ldr	r0, [pc, #416]	; (8002150 <MX_GPIO_Init+0x38c>)
 8001fae:	f006 fc18 	bl	80087e2 <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = DCBIAS_INVERT_Pin;
 8001fb2:	2308      	movs	r3, #8
 8001fb4:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 8001fb6:	2301      	movs	r3, #1
 8001fb8:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 8001fba:	2300      	movs	r3, #0
 8001fbc:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8001fbe:	2300      	movs	r3, #0
 8001fc0:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8001fc2:	2300      	movs	r3, #0
 8001fc4:	617b      	str	r3, [r7, #20]
  LL_GPIO_Init(DCBIAS_INVERT_GPIO_Port, &GPIO_InitStruct);
 8001fc6:	1d3b      	adds	r3, r7, #4
 8001fc8:	4619      	mov	r1, r3
 8001fca:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001fce:	f006 fc08 	bl	80087e2 <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = SG2_Pin;
 8001fd2:	2310      	movs	r3, #16
 8001fd4:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 8001fd6:	2301      	movs	r3, #1
 8001fd8:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 8001fda:	2300      	movs	r3, #0
 8001fdc:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8001fde:	2300      	movs	r3, #0
 8001fe0:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8001fe2:	2300      	movs	r3, #0
 8001fe4:	617b      	str	r3, [r7, #20]
  LL_GPIO_Init(SG2_GPIO_Port, &GPIO_InitStruct);
 8001fe6:	1d3b      	adds	r3, r7, #4
 8001fe8:	4619      	mov	r1, r3
 8001fea:	4859      	ldr	r0, [pc, #356]	; (8002150 <MX_GPIO_Init+0x38c>)
 8001fec:	f006 fbf9 	bl	80087e2 <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = SG1_Pin;
 8001ff0:	2320      	movs	r3, #32
 8001ff2:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 8001ff4:	2301      	movs	r3, #1
 8001ff6:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 8001ff8:	2300      	movs	r3, #0
 8001ffa:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8001ffc:	2300      	movs	r3, #0
 8001ffe:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8002000:	2300      	movs	r3, #0
 8002002:	617b      	str	r3, [r7, #20]
  LL_GPIO_Init(SG1_GPIO_Port, &GPIO_InitStruct);
 8002004:	1d3b      	adds	r3, r7, #4
 8002006:	4619      	mov	r1, r3
 8002008:	4851      	ldr	r0, [pc, #324]	; (8002150 <MX_GPIO_Init+0x38c>)
 800200a:	f006 fbea 	bl	80087e2 <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = SG0_Pin;
 800200e:	2301      	movs	r3, #1
 8002010:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 8002012:	2301      	movs	r3, #1
 8002014:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 8002016:	2300      	movs	r3, #0
 8002018:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 800201a:	2300      	movs	r3, #0
 800201c:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 800201e:	2300      	movs	r3, #0
 8002020:	617b      	str	r3, [r7, #20]
  LL_GPIO_Init(SG0_GPIO_Port, &GPIO_InitStruct);
 8002022:	1d3b      	adds	r3, r7, #4
 8002024:	4619      	mov	r1, r3
 8002026:	484b      	ldr	r0, [pc, #300]	; (8002154 <MX_GPIO_Init+0x390>)
 8002028:	f006 fbdb 	bl	80087e2 <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = TRIGMUX1_Pin;
 800202c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002030:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 8002032:	2301      	movs	r3, #1
 8002034:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 8002036:	2300      	movs	r3, #0
 8002038:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 800203a:	2300      	movs	r3, #0
 800203c:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 800203e:	2300      	movs	r3, #0
 8002040:	617b      	str	r3, [r7, #20]
  LL_GPIO_Init(TRIGMUX1_GPIO_Port, &GPIO_InitStruct);
 8002042:	1d3b      	adds	r3, r7, #4
 8002044:	4619      	mov	r1, r3
 8002046:	4842      	ldr	r0, [pc, #264]	; (8002150 <MX_GPIO_Init+0x38c>)
 8002048:	f006 fbcb 	bl	80087e2 <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = TRIGMUX2_Pin;
 800204c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002050:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 8002052:	2301      	movs	r3, #1
 8002054:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 8002056:	2300      	movs	r3, #0
 8002058:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 800205a:	2300      	movs	r3, #0
 800205c:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 800205e:	2300      	movs	r3, #0
 8002060:	617b      	str	r3, [r7, #20]
  LL_GPIO_Init(TRIGMUX2_GPIO_Port, &GPIO_InitStruct);
 8002062:	1d3b      	adds	r3, r7, #4
 8002064:	4619      	mov	r1, r3
 8002066:	483a      	ldr	r0, [pc, #232]	; (8002150 <MX_GPIO_Init+0x38c>)
 8002068:	f006 fbbb 	bl	80087e2 <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = DC_Pin;
 800206c:	2340      	movs	r3, #64	; 0x40
 800206e:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 8002070:	2301      	movs	r3, #1
 8002072:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_VERY_HIGH;
 8002074:	2303      	movs	r3, #3
 8002076:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8002078:	2300      	movs	r3, #0
 800207a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 800207c:	2300      	movs	r3, #0
 800207e:	617b      	str	r3, [r7, #20]
  LL_GPIO_Init(DC_GPIO_Port, &GPIO_InitStruct);
 8002080:	1d3b      	adds	r3, r7, #4
 8002082:	4619      	mov	r1, r3
 8002084:	4833      	ldr	r0, [pc, #204]	; (8002154 <MX_GPIO_Init+0x390>)
 8002086:	f006 fbac 	bl	80087e2 <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = CS_Pin;
 800208a:	2380      	movs	r3, #128	; 0x80
 800208c:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 800208e:	2301      	movs	r3, #1
 8002090:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_VERY_HIGH;
 8002092:	2303      	movs	r3, #3
 8002094:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8002096:	2300      	movs	r3, #0
 8002098:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 800209a:	2300      	movs	r3, #0
 800209c:	617b      	str	r3, [r7, #20]
  LL_GPIO_Init(CS_GPIO_Port, &GPIO_InitStruct);
 800209e:	1d3b      	adds	r3, r7, #4
 80020a0:	4619      	mov	r1, r3
 80020a2:	482c      	ldr	r0, [pc, #176]	; (8002154 <MX_GPIO_Init+0x390>)
 80020a4:	f006 fb9d 	bl	80087e2 <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = RST_Pin;
 80020a8:	f44f 7300 	mov.w	r3, #512	; 0x200
 80020ac:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 80020ae:	2301      	movs	r3, #1
 80020b0:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_VERY_HIGH;
 80020b2:	2303      	movs	r3, #3
 80020b4:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 80020b6:	2300      	movs	r3, #0
 80020b8:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 80020ba:	2300      	movs	r3, #0
 80020bc:	617b      	str	r3, [r7, #20]
  LL_GPIO_Init(RST_GPIO_Port, &GPIO_InitStruct);
 80020be:	1d3b      	adds	r3, r7, #4
 80020c0:	4619      	mov	r1, r3
 80020c2:	4824      	ldr	r0, [pc, #144]	; (8002154 <MX_GPIO_Init+0x390>)
 80020c4:	f006 fb8d 	bl	80087e2 <LL_GPIO_Init>

  /* EXTI interrupt init*/
  NVIC_SetPriority(EXTI0_IRQn, NVIC_EncodePriority(NVIC_GetPriorityGrouping(),0, 0));
 80020c8:	f7ff fd3e 	bl	8001b48 <__NVIC_GetPriorityGrouping>
 80020cc:	4603      	mov	r3, r0
 80020ce:	2200      	movs	r2, #0
 80020d0:	2100      	movs	r1, #0
 80020d2:	4618      	mov	r0, r3
 80020d4:	f7ff fd8e 	bl	8001bf4 <NVIC_EncodePriority>
 80020d8:	4603      	mov	r3, r0
 80020da:	4619      	mov	r1, r3
 80020dc:	2006      	movs	r0, #6
 80020de:	f7ff fd5f 	bl	8001ba0 <__NVIC_SetPriority>
  NVIC_EnableIRQ(EXTI0_IRQn);
 80020e2:	2006      	movs	r0, #6
 80020e4:	f7ff fd3e 	bl	8001b64 <__NVIC_EnableIRQ>
  NVIC_SetPriority(EXTI1_IRQn, NVIC_EncodePriority(NVIC_GetPriorityGrouping(),0, 0));
 80020e8:	f7ff fd2e 	bl	8001b48 <__NVIC_GetPriorityGrouping>
 80020ec:	4603      	mov	r3, r0
 80020ee:	2200      	movs	r2, #0
 80020f0:	2100      	movs	r1, #0
 80020f2:	4618      	mov	r0, r3
 80020f4:	f7ff fd7e 	bl	8001bf4 <NVIC_EncodePriority>
 80020f8:	4603      	mov	r3, r0
 80020fa:	4619      	mov	r1, r3
 80020fc:	2007      	movs	r0, #7
 80020fe:	f7ff fd4f 	bl	8001ba0 <__NVIC_SetPriority>
  NVIC_EnableIRQ(EXTI1_IRQn);
 8002102:	2007      	movs	r0, #7
 8002104:	f7ff fd2e 	bl	8001b64 <__NVIC_EnableIRQ>
  NVIC_SetPriority(EXTI2_IRQn, NVIC_EncodePriority(NVIC_GetPriorityGrouping(),0, 0));
 8002108:	f7ff fd1e 	bl	8001b48 <__NVIC_GetPriorityGrouping>
 800210c:	4603      	mov	r3, r0
 800210e:	2200      	movs	r2, #0
 8002110:	2100      	movs	r1, #0
 8002112:	4618      	mov	r0, r3
 8002114:	f7ff fd6e 	bl	8001bf4 <NVIC_EncodePriority>
 8002118:	4603      	mov	r3, r0
 800211a:	4619      	mov	r1, r3
 800211c:	2008      	movs	r0, #8
 800211e:	f7ff fd3f 	bl	8001ba0 <__NVIC_SetPriority>
  NVIC_EnableIRQ(EXTI2_IRQn);
 8002122:	2008      	movs	r0, #8
 8002124:	f7ff fd1e 	bl	8001b64 <__NVIC_EnableIRQ>
  NVIC_SetPriority(EXTI15_10_IRQn, NVIC_EncodePriority(NVIC_GetPriorityGrouping(),0, 0));
 8002128:	f7ff fd0e 	bl	8001b48 <__NVIC_GetPriorityGrouping>
 800212c:	4603      	mov	r3, r0
 800212e:	2200      	movs	r2, #0
 8002130:	2100      	movs	r1, #0
 8002132:	4618      	mov	r0, r3
 8002134:	f7ff fd5e 	bl	8001bf4 <NVIC_EncodePriority>
 8002138:	4603      	mov	r3, r0
 800213a:	4619      	mov	r1, r3
 800213c:	2028      	movs	r0, #40	; 0x28
 800213e:	f7ff fd2f 	bl	8001ba0 <__NVIC_SetPriority>
  NVIC_EnableIRQ(EXTI15_10_IRQn);
 8002142:	2028      	movs	r0, #40	; 0x28
 8002144:	f7ff fd0e 	bl	8001b64 <__NVIC_EnableIRQ>

}
 8002148:	bf00      	nop
 800214a:	3728      	adds	r7, #40	; 0x28
 800214c:	46bd      	mov	sp, r7
 800214e:	e009      	b.n	8002164 <MX_GPIO_Init+0x3a0>
 8002150:	48000800 	.word	0x48000800
 8002154:	48000400 	.word	0x48000400
 8002158:	0f000003 	.word	0x0f000003
 800215c:	f0000003 	.word	0xf0000003
 8002160:	48001400 	.word	0x48001400
 8002164:	bd80      	pop	{r7, pc}
 8002166:	bf00      	nop

08002168 <ITM_SendChar>:
           \li Is blocking when a debugger is connected, but the previous character sent has not been transmitted.
  \param [in]     ch  Character to transmit.
  \returns            Character to transmit.
 */
__STATIC_INLINE uint32_t ITM_SendChar (uint32_t ch)
{
 8002168:	b480      	push	{r7}
 800216a:	b083      	sub	sp, #12
 800216c:	af00      	add	r7, sp, #0
 800216e:	6078      	str	r0, [r7, #4]
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 8002170:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8002174:	f8d3 3e80 	ldr.w	r3, [r3, #3712]	; 0xe80
 8002178:	f003 0301 	and.w	r3, r3, #1
 800217c:	2b00      	cmp	r3, #0
 800217e:	d013      	beq.n	80021a8 <ITM_SendChar+0x40>
      ((ITM->TER & 1UL               ) != 0UL)   )     /* ITM Port #0 enabled */
 8002180:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8002184:	f8d3 3e00 	ldr.w	r3, [r3, #3584]	; 0xe00
 8002188:	f003 0301 	and.w	r3, r3, #1
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 800218c:	2b00      	cmp	r3, #0
 800218e:	d00b      	beq.n	80021a8 <ITM_SendChar+0x40>
  {
    while (ITM->PORT[0U].u32 == 0UL)
 8002190:	e000      	b.n	8002194 <ITM_SendChar+0x2c>
    {
      __NOP();
 8002192:	bf00      	nop
    while (ITM->PORT[0U].u32 == 0UL)
 8002194:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8002198:	681b      	ldr	r3, [r3, #0]
 800219a:	2b00      	cmp	r3, #0
 800219c:	d0f9      	beq.n	8002192 <ITM_SendChar+0x2a>
    }
    ITM->PORT[0U].u8 = (uint8_t)ch;
 800219e:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 80021a2:	687a      	ldr	r2, [r7, #4]
 80021a4:	b2d2      	uxtb	r2, r2
 80021a6:	701a      	strb	r2, [r3, #0]
  }
  return (ch);
 80021a8:	687b      	ldr	r3, [r7, #4]
}
 80021aa:	4618      	mov	r0, r3
 80021ac:	370c      	adds	r7, #12
 80021ae:	46bd      	mov	sp, r7
 80021b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021b4:	4770      	bx	lr

080021b6 <_write>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
int _write(int file, char *ptr, int len)
{
 80021b6:	b580      	push	{r7, lr}
 80021b8:	b086      	sub	sp, #24
 80021ba:	af00      	add	r7, sp, #0
 80021bc:	60f8      	str	r0, [r7, #12]
 80021be:	60b9      	str	r1, [r7, #8]
 80021c0:	607a      	str	r2, [r7, #4]
  /* Implement your write code here, this is used by puts and printf for example */
  int i=0;
 80021c2:	2300      	movs	r3, #0
 80021c4:	617b      	str	r3, [r7, #20]
  for(i=0 ; i<len ; i++)
 80021c6:	2300      	movs	r3, #0
 80021c8:	617b      	str	r3, [r7, #20]
 80021ca:	e009      	b.n	80021e0 <_write+0x2a>
    ITM_SendChar((*ptr++));
 80021cc:	68bb      	ldr	r3, [r7, #8]
 80021ce:	1c5a      	adds	r2, r3, #1
 80021d0:	60ba      	str	r2, [r7, #8]
 80021d2:	781b      	ldrb	r3, [r3, #0]
 80021d4:	4618      	mov	r0, r3
 80021d6:	f7ff ffc7 	bl	8002168 <ITM_SendChar>
  for(i=0 ; i<len ; i++)
 80021da:	697b      	ldr	r3, [r7, #20]
 80021dc:	3301      	adds	r3, #1
 80021de:	617b      	str	r3, [r7, #20]
 80021e0:	697a      	ldr	r2, [r7, #20]
 80021e2:	687b      	ldr	r3, [r7, #4]
 80021e4:	429a      	cmp	r2, r3
 80021e6:	dbf1      	blt.n	80021cc <_write+0x16>
  return len;
 80021e8:	687b      	ldr	r3, [r7, #4]
}
 80021ea:	4618      	mov	r0, r3
 80021ec:	3718      	adds	r7, #24
 80021ee:	46bd      	mov	sp, r7
 80021f0:	bd80      	pop	{r7, pc}

080021f2 <HAL_DAC_ErrorCallbackCh1>:

void HAL_DAC_ErrorCallbackCh1(DAC_HandleTypeDef *hdac)
{
 80021f2:	b480      	push	{r7}
 80021f4:	b083      	sub	sp, #12
 80021f6:	af00      	add	r7, sp, #0
 80021f8:	6078      	str	r0, [r7, #4]
	// do something
}
 80021fa:	bf00      	nop
 80021fc:	370c      	adds	r7, #12
 80021fe:	46bd      	mov	sp, r7
 8002200:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002204:	4770      	bx	lr
	...

08002208 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8002208:	b580      	push	{r7, lr}
 800220a:	b082      	sub	sp, #8
 800220c:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800220e:	f000 ff42 	bl	8003096 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8002212:	f000 f8a5 	bl	8002360 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8002216:	f7ff fdd5 	bl	8001dc4 <MX_GPIO_Init>
  MX_DMA_Init();
 800221a:	f7ff fc0f 	bl	8001a3c <MX_DMA_Init>
  MX_DAC1_Init();
 800221e:	f7ff fabf 	bl	80017a0 <MX_DAC1_Init>
  MX_DAC2_Init();
 8002222:	f7ff fb07 	bl	8001834 <MX_DAC2_Init>
  MX_ADC1_Init();
 8002226:	f7ff f97d 	bl	8001524 <MX_ADC1_Init>
  MX_COMP1_Init();
 800222a:	f7ff fa5f 	bl	80016ec <MX_COMP1_Init>
  MX_TIM2_Init();
 800222e:	f000 fc29 	bl	8002a84 <MX_TIM2_Init>
  MX_TIM17_Init();
 8002232:	f000 fdc1 	bl	8002db8 <MX_TIM17_Init>
  MX_SPI3_Init();
 8002236:	f000 f93f 	bl	80024b8 <MX_SPI3_Init>
  MX_RNG_Init();
 800223a:	f000 f92f 	bl	800249c <MX_RNG_Init>
  MX_TIM1_Init();
 800223e:	f000 fbb1 	bl	80029a4 <MX_TIM1_Init>
  MX_TIM8_Init();
 8002242:	f000 fcd9 	bl	8002bf8 <MX_TIM8_Init>
  MX_TIM16_Init();
 8002246:	f000 fd91 	bl	8002d6c <MX_TIM16_Init>
  MX_TIM15_Init();
 800224a:	f000 fd3d 	bl	8002cc8 <MX_TIM15_Init>
  MX_TIM5_Init();
 800224e:	f000 fc83 	bl	8002b58 <MX_TIM5_Init>
  /* USER CODE BEGIN 2 */

  // main signal function output (external)
  HAL_DAC_Start_DMA(&hdac1, DAC1_CHANNEL_1, sine_data_table, SINE_DATA_SIZE, DAC_ALIGN_12B_R);
 8002252:	2300      	movs	r3, #0
 8002254:	9300      	str	r3, [sp, #0]
 8002256:	2378      	movs	r3, #120	; 0x78
 8002258:	4a34      	ldr	r2, [pc, #208]	; (800232c <main+0x124>)
 800225a:	2100      	movs	r1, #0
 800225c:	4834      	ldr	r0, [pc, #208]	; (8002330 <main+0x128>)
 800225e:	f002 fc71 	bl	8004b44 <HAL_DAC_Start_DMA>
  //TIM8->ARR = sin1_max_arr;

  // DC bias output (internal)
  HAL_DAC_Start(&hdac1, DAC1_CHANNEL_2);
 8002262:	2110      	movs	r1, #16
 8002264:	4832      	ldr	r0, [pc, #200]	; (8002330 <main+0x128>)
 8002266:	f002 fc1a 	bl	8004a9e <HAL_DAC_Start>
  //HAL_DAC_Start_DMA(&hdac2, DAC2_CHANNEL_1, sine_data_table, SINE_DATA_SIZE, DAC_ALIGN_12B_R);
  //HAL_DAC_Start_DMA(&hdac2, DAC2_CHANNEL_1, square_data_table, SQUARE_DATA_SIZE, DAC_ALIGN_12B_R);
  //HAL_DAC_Start_DMA(&hdac2, DAC2_CHANNEL_1, unitimpulse_data_table, UNITIMPULSE_DATA_SIZE, DAC_ALIGN_12B_R);
  //HAL_DAC_Start_DMA(&hdac2, DAC2_CHANNEL_1, saw_data_table, SAW_DATA_SIZE, DAC_ALIGN_12B_R);
  //HAL_DAC_Start_DMA(&hdac2, DAC2_CHANNEL_1, saw_rev_data_table, SAW_REV_DATA_SIZE, DAC_ALIGN_12B_R);
  HAL_DAC_Start_DMA(&hdac2, DAC2_CHANNEL_1, triangle_data_table, TRIANGLE_DATA_SIZE, DAC_ALIGN_12B_R);
 800226a:	2300      	movs	r3, #0
 800226c:	9300      	str	r3, [sp, #0]
 800226e:	2378      	movs	r3, #120	; 0x78
 8002270:	4a30      	ldr	r2, [pc, #192]	; (8002334 <main+0x12c>)
 8002272:	2100      	movs	r1, #0
 8002274:	4830      	ldr	r0, [pc, #192]	; (8002338 <main+0x130>)
 8002276:	f002 fc65 	bl	8004b44 <HAL_DAC_Start_DMA>

  //HAL_DAC_Start_DMA(&hdac2, DAC2_CHANNEL_1, trigger_input, TRIGGER_DATA_SIZE, DAC_ALIGN_12B_R);
#ifndef DISABLE_ALL_TIMERS
  // single clock to run all DAC channels. TODO add independent clocks
  HAL_TIM_Base_Start(&htim8);
 800227a:	4830      	ldr	r0, [pc, #192]	; (800233c <main+0x134>)
 800227c:	f004 ffe4 	bl	8007248 <HAL_TIM_Base_Start>
  TIM8->ARR = 14015;			// 100Hz
 8002280:	4b2f      	ldr	r3, [pc, #188]	; (8002340 <main+0x138>)
 8002282:	f243 62bf 	movw	r2, #14015	; 0x36bf
 8002286:	62da      	str	r2, [r3, #44]	; 0x2c
  //TIM8->ARR = 65535;
#endif //DISABLE_ALL_TIMERS

  // DC bias inversion
  HAL_GPIO_WritePin(DCBIAS_INVERT_GPIO_Port, DCBIAS_INVERT_Pin, GPIO_PIN_SET);
 8002288:	2201      	movs	r2, #1
 800228a:	2108      	movs	r1, #8
 800228c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002290:	f003 fc5e 	bl	8005b50 <HAL_GPIO_WritePin>

  // PGA gain
  HAL_GPIO_WritePin(SG0_GPIO_Port, SG0_Pin, GPIO_PIN_SET);
 8002294:	2201      	movs	r2, #1
 8002296:	2101      	movs	r1, #1
 8002298:	482a      	ldr	r0, [pc, #168]	; (8002344 <main+0x13c>)
 800229a:	f003 fc59 	bl	8005b50 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(SG1_GPIO_Port, SG1_Pin, GPIO_PIN_SET);
 800229e:	2201      	movs	r2, #1
 80022a0:	2120      	movs	r1, #32
 80022a2:	4829      	ldr	r0, [pc, #164]	; (8002348 <main+0x140>)
 80022a4:	f003 fc54 	bl	8005b50 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(SG2_GPIO_Port, SG2_Pin, GPIO_PIN_SET);
 80022a8:	2201      	movs	r2, #1
 80022aa:	2110      	movs	r1, #16
 80022ac:	4826      	ldr	r0, [pc, #152]	; (8002348 <main+0x140>)
 80022ae:	f003 fc4f 	bl	8005b50 <HAL_GPIO_WritePin>
  //HAL_TIM_Base_Start_IT(&htim17);
#endif	//DISABLE_ALL_TIMERS


// http://www.ti.com/lit/ds/symlink/ts5a3357.pdf
  HAL_GPIO_WritePin(TRIGMUX1_GPIO_Port, TRIGMUX1_Pin, GPIO_PIN_RESET);	// TS5A3357 Pin6
 80022b2:	2200      	movs	r2, #0
 80022b4:	f44f 7180 	mov.w	r1, #256	; 0x100
 80022b8:	4823      	ldr	r0, [pc, #140]	; (8002348 <main+0x140>)
 80022ba:	f003 fc49 	bl	8005b50 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(TRIGMUX2_GPIO_Port, TRIGMUX2_Pin, GPIO_PIN_RESET);	// TS5A3357 Pin5
 80022be:	2200      	movs	r2, #0
 80022c0:	f44f 7100 	mov.w	r1, #512	; 0x200
 80022c4:	4820      	ldr	r0, [pc, #128]	; (8002348 <main+0x140>)
 80022c6:	f003 fc43 	bl	8005b50 <HAL_GPIO_WritePin>

#ifdef TIM_TRIGGER_MODE
  // input capture on in TIM2 slave-mode TF1FP1

  // set HW switch to direct ext. trigger input to TIM pin
  HAL_GPIO_WritePin(TRIGMODE_GPIO_Port, TRIGMODE_Pin, GPIO_PIN_SET);
 80022ca:	2201      	movs	r2, #1
 80022cc:	2108      	movs	r1, #8
 80022ce:	481e      	ldr	r0, [pc, #120]	; (8002348 <main+0x140>)
 80022d0:	f003 fc3e 	bl	8005b50 <HAL_GPIO_WritePin>
  //HAL_GPIO_WritePin(TRIGMUX1_GPIO_Port, TRIGMUX1_Pin, GPIO_PIN_SET);	// TS5A3357 Pin6
  //HAL_GPIO_WritePin(TRIGMUX2_GPIO_Port, TRIGMUX2_Pin, GPIO_PIN_RESET); // TS5A3357 Pin5

  // clear slave mode select reg
  TIM2->SMCR &= ~(TIM_SMCR_SMS_0 | TIM_SMCR_SMS_1 | TIM_SMCR_SMS_2);
 80022d4:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80022d8:	689b      	ldr	r3, [r3, #8]
 80022da:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80022de:	f023 0307 	bic.w	r3, r3, #7
 80022e2:	6093      	str	r3, [r2, #8]

  // slave mode
  //TIM2->SMCR |= TIM_SMCR_SMS_2;						// SLAVE MODE: RESET
  TIM2->SMCR |= TIM_SMCR_SMS_0 | TIM_SMCR_SMS_2;	// SLAVE MODE: GATED
 80022e4:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80022e8:	689b      	ldr	r3, [r3, #8]
 80022ea:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80022ee:	f043 0305 	orr.w	r3, r3, #5
 80022f2:	6093      	str	r3, [r2, #8]
  //TIM2->SMCR |= TIM_SMCR_SMS_1 | TIM_SMCR_SMS_2;	// SLAVE MODE: TRIGGER

#ifndef DISABLE_ALL_TIMERS
  HAL_TIM_Base_Start_IT(&htim2);
 80022f4:	4815      	ldr	r0, [pc, #84]	; (800234c <main+0x144>)
 80022f6:	f004 ffd5 	bl	80072a4 <HAL_TIM_Base_Start_IT>



#ifndef DISABLE_ALL_TIMERS
  // encoder input
  HAL_TIM_Base_Start(&htim1);		// enable encoder timer
 80022fa:	4815      	ldr	r0, [pc, #84]	; (8002350 <main+0x148>)
 80022fc:	f004 ffa4 	bl	8007248 <HAL_TIM_Base_Start>
  //TIM1->DIER |= TIM_DIER_IDXIE;		// enable index interrupts

#endif	//DISABLE_ALL_TIMERS

  TIM6->PSC = 65535;
 8002300:	4b14      	ldr	r3, [pc, #80]	; (8002354 <main+0x14c>)
 8002302:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8002306:	629a      	str	r2, [r3, #40]	; 0x28
  TIM6->ARR = 65535;
 8002308:	4b12      	ldr	r3, [pc, #72]	; (8002354 <main+0x14c>)
 800230a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800230e:	62da      	str	r2, [r3, #44]	; 0x2c



  // TFT lib enable
  DM_Init();
 8002310:	f7fd ffd6 	bl	80002c0 <DM_Init>
  DM_PostInit();
 8002314:	f7fd ffe2 	bl	80002dc <DM_PostInit>


  HAL_TIM_Base_Start_IT(&htim15);
 8002318:	480f      	ldr	r0, [pc, #60]	; (8002358 <main+0x150>)
 800231a:	f004 ffc3 	bl	80072a4 <HAL_TIM_Base_Start_IT>
  HAL_TIM_Base_Start(&htim5);
 800231e:	480f      	ldr	r0, [pc, #60]	; (800235c <main+0x154>)
 8002320:	f004 ff92 	bl	8007248 <HAL_TIM_Base_Start>
  /* USER CODE BEGIN WHILE */
  while (1)
  {


	EM_ProcessEvent();
 8002324:	f7fe fc30 	bl	8000b88 <EM_ProcessEvent>
 8002328:	e7fc      	b.n	8002324 <main+0x11c>
 800232a:	bf00      	nop
 800232c:	200008e4 	.word	0x200008e4
 8002330:	20001214 	.word	0x20001214
 8002334:	20000ca4 	.word	0x20000ca4
 8002338:	20001200 	.word	0x20001200
 800233c:	2000134c 	.word	0x2000134c
 8002340:	40013400 	.word	0x40013400
 8002344:	48000400 	.word	0x48000400
 8002348:	48000800 	.word	0x48000800
 800234c:	200014c8 	.word	0x200014c8
 8002350:	2000147c 	.word	0x2000147c
 8002354:	40001000 	.word	0x40001000
 8002358:	20001398 	.word	0x20001398
 800235c:	20001430 	.word	0x20001430

08002360 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8002360:	b580      	push	{r7, lr}
 8002362:	b0a8      	sub	sp, #160	; 0xa0
 8002364:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8002366:	f107 0368 	add.w	r3, r7, #104	; 0x68
 800236a:	2238      	movs	r2, #56	; 0x38
 800236c:	2100      	movs	r1, #0
 800236e:	4618      	mov	r0, r3
 8002370:	f007 fa3a 	bl	80097e8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8002374:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8002378:	2200      	movs	r2, #0
 800237a:	601a      	str	r2, [r3, #0]
 800237c:	605a      	str	r2, [r3, #4]
 800237e:	609a      	str	r2, [r3, #8]
 8002380:	60da      	str	r2, [r3, #12]
 8002382:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8002384:	463b      	mov	r3, r7
 8002386:	2254      	movs	r2, #84	; 0x54
 8002388:	2100      	movs	r1, #0
 800238a:	4618      	mov	r0, r3
 800238c:	f007 fa2c 	bl	80097e8 <memset>

  /** Configure the main internal regulator output voltage 
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1_BOOST);
 8002390:	2000      	movs	r0, #0
 8002392:	f003 fbf5 	bl	8005b80 <HAL_PWREx_ControlVoltageScaling>
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_HSI48;
 8002396:	2322      	movs	r3, #34	; 0x22
 8002398:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800239a:	f44f 7380 	mov.w	r3, #256	; 0x100
 800239e:	677b      	str	r3, [r7, #116]	; 0x74
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80023a0:	2340      	movs	r3, #64	; 0x40
 80023a2:	67bb      	str	r3, [r7, #120]	; 0x78
  RCC_OscInitStruct.HSI48State = RCC_HSI48_ON;
 80023a4:	2301      	movs	r3, #1
 80023a6:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80023aa:	2302      	movs	r3, #2
 80023ac:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80023b0:	2302      	movs	r3, #2
 80023b2:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV2;
 80023b6:	2302      	movs	r3, #2
 80023b8:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  RCC_OscInitStruct.PLL.PLLN = 42;
 80023bc:	232a      	movs	r3, #42	; 0x2a
 80023be:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80023c2:	2302      	movs	r3, #2
 80023c4:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV4;
 80023c8:	2304      	movs	r3, #4
 80023ca:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 80023ce:	2302      	movs	r3, #2
 80023d0:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80023d4:	f107 0368 	add.w	r3, r7, #104	; 0x68
 80023d8:	4618      	mov	r0, r3
 80023da:	f003 fc75 	bl	8005cc8 <HAL_RCC_OscConfig>
 80023de:	4603      	mov	r3, r0
 80023e0:	2b00      	cmp	r3, #0
 80023e2:	d001      	beq.n	80023e8 <SystemClock_Config+0x88>
  {
    Error_Handler();
 80023e4:	f000 f82a 	bl	800243c <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80023e8:	230f      	movs	r3, #15
 80023ea:	657b      	str	r3, [r7, #84]	; 0x54
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80023ec:	2303      	movs	r3, #3
 80023ee:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80023f0:	2300      	movs	r3, #0
 80023f2:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80023f4:	2300      	movs	r3, #0
 80023f6:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80023f8:	2300      	movs	r3, #0
 80023fa:	667b      	str	r3, [r7, #100]	; 0x64

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_8) != HAL_OK)
 80023fc:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8002400:	2108      	movs	r1, #8
 8002402:	4618      	mov	r0, r3
 8002404:	f003 ff78 	bl	80062f8 <HAL_RCC_ClockConfig>
 8002408:	4603      	mov	r3, r0
 800240a:	2b00      	cmp	r3, #0
 800240c:	d001      	beq.n	8002412 <SystemClock_Config+0xb2>
  {
    Error_Handler();
 800240e:	f000 f815 	bl	800243c <Error_Handler>
  }
  /** Initializes the peripherals clocks 
  */
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_RNG|RCC_PERIPHCLK_ADC12;
 8002412:	f44f 4340 	mov.w	r3, #49152	; 0xc000
 8002416:	603b      	str	r3, [r7, #0]
  PeriphClkInit.RngClockSelection = RCC_RNGCLKSOURCE_HSI48;
 8002418:	2300      	movs	r3, #0
 800241a:	643b      	str	r3, [r7, #64]	; 0x40
  PeriphClkInit.Adc12ClockSelection = RCC_ADC12CLKSOURCE_SYSCLK;
 800241c:	f04f 5300 	mov.w	r3, #536870912	; 0x20000000
 8002420:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8002422:	463b      	mov	r3, r7
 8002424:	4618      	mov	r0, r3
 8002426:	f004 f957 	bl	80066d8 <HAL_RCCEx_PeriphCLKConfig>
 800242a:	4603      	mov	r3, r0
 800242c:	2b00      	cmp	r3, #0
 800242e:	d001      	beq.n	8002434 <SystemClock_Config+0xd4>
  {
    Error_Handler();
 8002430:	f000 f804 	bl	800243c <Error_Handler>
  }
}
 8002434:	bf00      	nop
 8002436:	37a0      	adds	r7, #160	; 0xa0
 8002438:	46bd      	mov	sp, r7
 800243a:	bd80      	pop	{r7, pc}

0800243c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800243c:	b480      	push	{r7}
 800243e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8002440:	bf00      	nop
 8002442:	46bd      	mov	sp, r7
 8002444:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002448:	4770      	bx	lr

0800244a <LL_RNG_Enable>:
  * @rmtoll CR           RNGEN         LL_RNG_Enable
  * @param  RNGx RNG Instance
  * @retval None
  */
__STATIC_INLINE void LL_RNG_Enable(RNG_TypeDef *RNGx)
{
 800244a:	b480      	push	{r7}
 800244c:	b083      	sub	sp, #12
 800244e:	af00      	add	r7, sp, #0
 8002450:	6078      	str	r0, [r7, #4]
  SET_BIT(RNGx->CR, RNG_CR_RNGEN);
 8002452:	687b      	ldr	r3, [r7, #4]
 8002454:	681b      	ldr	r3, [r3, #0]
 8002456:	f043 0204 	orr.w	r2, r3, #4
 800245a:	687b      	ldr	r3, [r7, #4]
 800245c:	601a      	str	r2, [r3, #0]
}
 800245e:	bf00      	nop
 8002460:	370c      	adds	r7, #12
 8002462:	46bd      	mov	sp, r7
 8002464:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002468:	4770      	bx	lr
	...

0800246c <LL_AHB2_GRP1_EnableClock>:
{
 800246c:	b480      	push	{r7}
 800246e:	b085      	sub	sp, #20
 8002470:	af00      	add	r7, sp, #0
 8002472:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB2ENR, Periphs);
 8002474:	4b08      	ldr	r3, [pc, #32]	; (8002498 <LL_AHB2_GRP1_EnableClock+0x2c>)
 8002476:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8002478:	4907      	ldr	r1, [pc, #28]	; (8002498 <LL_AHB2_GRP1_EnableClock+0x2c>)
 800247a:	687b      	ldr	r3, [r7, #4]
 800247c:	4313      	orrs	r3, r2
 800247e:	64cb      	str	r3, [r1, #76]	; 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 8002480:	4b05      	ldr	r3, [pc, #20]	; (8002498 <LL_AHB2_GRP1_EnableClock+0x2c>)
 8002482:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8002484:	687b      	ldr	r3, [r7, #4]
 8002486:	4013      	ands	r3, r2
 8002488:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 800248a:	68fb      	ldr	r3, [r7, #12]
}
 800248c:	bf00      	nop
 800248e:	3714      	adds	r7, #20
 8002490:	46bd      	mov	sp, r7
 8002492:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002496:	4770      	bx	lr
 8002498:	40021000 	.word	0x40021000

0800249c <MX_RNG_Init>:

/* USER CODE END 0 */

/* RNG init function */
void MX_RNG_Init(void)
{
 800249c:	b580      	push	{r7, lr}
 800249e:	af00      	add	r7, sp, #0

  /* Peripheral clock enable */
  LL_AHB2_GRP1_EnableClock(LL_AHB2_GRP1_PERIPH_RNG);
 80024a0:	f04f 6080 	mov.w	r0, #67108864	; 0x4000000
 80024a4:	f7ff ffe2 	bl	800246c <LL_AHB2_GRP1_EnableClock>

  LL_RNG_Enable(RNG);
 80024a8:	4802      	ldr	r0, [pc, #8]	; (80024b4 <MX_RNG_Init+0x18>)
 80024aa:	f7ff ffce 	bl	800244a <LL_RNG_Enable>

}
 80024ae:	bf00      	nop
 80024b0:	bd80      	pop	{r7, pc}
 80024b2:	bf00      	nop
 80024b4:	50060800 	.word	0x50060800

080024b8 <MX_SPI3_Init>:

SPI_HandleTypeDef hspi3;

/* SPI3 init function */
void MX_SPI3_Init(void)
{
 80024b8:	b580      	push	{r7, lr}
 80024ba:	af00      	add	r7, sp, #0

  hspi3.Instance = SPI3;
 80024bc:	4b1b      	ldr	r3, [pc, #108]	; (800252c <MX_SPI3_Init+0x74>)
 80024be:	4a1c      	ldr	r2, [pc, #112]	; (8002530 <MX_SPI3_Init+0x78>)
 80024c0:	601a      	str	r2, [r3, #0]
  hspi3.Init.Mode = SPI_MODE_MASTER;
 80024c2:	4b1a      	ldr	r3, [pc, #104]	; (800252c <MX_SPI3_Init+0x74>)
 80024c4:	f44f 7282 	mov.w	r2, #260	; 0x104
 80024c8:	605a      	str	r2, [r3, #4]
  hspi3.Init.Direction = SPI_DIRECTION_2LINES;
 80024ca:	4b18      	ldr	r3, [pc, #96]	; (800252c <MX_SPI3_Init+0x74>)
 80024cc:	2200      	movs	r2, #0
 80024ce:	609a      	str	r2, [r3, #8]
  hspi3.Init.DataSize = SPI_DATASIZE_8BIT;
 80024d0:	4b16      	ldr	r3, [pc, #88]	; (800252c <MX_SPI3_Init+0x74>)
 80024d2:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 80024d6:	60da      	str	r2, [r3, #12]
  hspi3.Init.CLKPolarity = SPI_POLARITY_LOW;
 80024d8:	4b14      	ldr	r3, [pc, #80]	; (800252c <MX_SPI3_Init+0x74>)
 80024da:	2200      	movs	r2, #0
 80024dc:	611a      	str	r2, [r3, #16]
  hspi3.Init.CLKPhase = SPI_PHASE_1EDGE;
 80024de:	4b13      	ldr	r3, [pc, #76]	; (800252c <MX_SPI3_Init+0x74>)
 80024e0:	2200      	movs	r2, #0
 80024e2:	615a      	str	r2, [r3, #20]
  hspi3.Init.NSS = SPI_NSS_SOFT;
 80024e4:	4b11      	ldr	r3, [pc, #68]	; (800252c <MX_SPI3_Init+0x74>)
 80024e6:	f44f 7200 	mov.w	r2, #512	; 0x200
 80024ea:	619a      	str	r2, [r3, #24]
  hspi3.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_8;
 80024ec:	4b0f      	ldr	r3, [pc, #60]	; (800252c <MX_SPI3_Init+0x74>)
 80024ee:	2210      	movs	r2, #16
 80024f0:	61da      	str	r2, [r3, #28]
  hspi3.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80024f2:	4b0e      	ldr	r3, [pc, #56]	; (800252c <MX_SPI3_Init+0x74>)
 80024f4:	2200      	movs	r2, #0
 80024f6:	621a      	str	r2, [r3, #32]
  hspi3.Init.TIMode = SPI_TIMODE_DISABLE;
 80024f8:	4b0c      	ldr	r3, [pc, #48]	; (800252c <MX_SPI3_Init+0x74>)
 80024fa:	2200      	movs	r2, #0
 80024fc:	625a      	str	r2, [r3, #36]	; 0x24
  hspi3.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80024fe:	4b0b      	ldr	r3, [pc, #44]	; (800252c <MX_SPI3_Init+0x74>)
 8002500:	2200      	movs	r2, #0
 8002502:	629a      	str	r2, [r3, #40]	; 0x28
  hspi3.Init.CRCPolynomial = 7;
 8002504:	4b09      	ldr	r3, [pc, #36]	; (800252c <MX_SPI3_Init+0x74>)
 8002506:	2207      	movs	r2, #7
 8002508:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi3.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 800250a:	4b08      	ldr	r3, [pc, #32]	; (800252c <MX_SPI3_Init+0x74>)
 800250c:	2200      	movs	r2, #0
 800250e:	631a      	str	r2, [r3, #48]	; 0x30
  hspi3.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8002510:	4b06      	ldr	r3, [pc, #24]	; (800252c <MX_SPI3_Init+0x74>)
 8002512:	2208      	movs	r2, #8
 8002514:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi3) != HAL_OK)
 8002516:	4805      	ldr	r0, [pc, #20]	; (800252c <MX_SPI3_Init+0x74>)
 8002518:	f004 fb2a 	bl	8006b70 <HAL_SPI_Init>
 800251c:	4603      	mov	r3, r0
 800251e:	2b00      	cmp	r3, #0
 8002520:	d001      	beq.n	8002526 <MX_SPI3_Init+0x6e>
  {
    Error_Handler();
 8002522:	f7ff ff8b 	bl	800243c <Error_Handler>
  }

}
 8002526:	bf00      	nop
 8002528:	bd80      	pop	{r7, pc}
 800252a:	bf00      	nop
 800252c:	200012e8 	.word	0x200012e8
 8002530:	40003c00 	.word	0x40003c00

08002534 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8002534:	b580      	push	{r7, lr}
 8002536:	b08a      	sub	sp, #40	; 0x28
 8002538:	af00      	add	r7, sp, #0
 800253a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800253c:	f107 0314 	add.w	r3, r7, #20
 8002540:	2200      	movs	r2, #0
 8002542:	601a      	str	r2, [r3, #0]
 8002544:	605a      	str	r2, [r3, #4]
 8002546:	609a      	str	r2, [r3, #8]
 8002548:	60da      	str	r2, [r3, #12]
 800254a:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI3)
 800254c:	687b      	ldr	r3, [r7, #4]
 800254e:	681b      	ldr	r3, [r3, #0]
 8002550:	4a17      	ldr	r2, [pc, #92]	; (80025b0 <HAL_SPI_MspInit+0x7c>)
 8002552:	4293      	cmp	r3, r2
 8002554:	d128      	bne.n	80025a8 <HAL_SPI_MspInit+0x74>
  {
  /* USER CODE BEGIN SPI3_MspInit 0 */

  /* USER CODE END SPI3_MspInit 0 */
    /* SPI3 clock enable */
    __HAL_RCC_SPI3_CLK_ENABLE();
 8002556:	4b17      	ldr	r3, [pc, #92]	; (80025b4 <HAL_SPI_MspInit+0x80>)
 8002558:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800255a:	4a16      	ldr	r2, [pc, #88]	; (80025b4 <HAL_SPI_MspInit+0x80>)
 800255c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002560:	6593      	str	r3, [r2, #88]	; 0x58
 8002562:	4b14      	ldr	r3, [pc, #80]	; (80025b4 <HAL_SPI_MspInit+0x80>)
 8002564:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002566:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800256a:	613b      	str	r3, [r7, #16]
 800256c:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800256e:	4b11      	ldr	r3, [pc, #68]	; (80025b4 <HAL_SPI_MspInit+0x80>)
 8002570:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002572:	4a10      	ldr	r2, [pc, #64]	; (80025b4 <HAL_SPI_MspInit+0x80>)
 8002574:	f043 0304 	orr.w	r3, r3, #4
 8002578:	64d3      	str	r3, [r2, #76]	; 0x4c
 800257a:	4b0e      	ldr	r3, [pc, #56]	; (80025b4 <HAL_SPI_MspInit+0x80>)
 800257c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800257e:	f003 0304 	and.w	r3, r3, #4
 8002582:	60fb      	str	r3, [r7, #12]
 8002584:	68fb      	ldr	r3, [r7, #12]
    /**SPI3 GPIO Configuration    
    PC10     ------> SPI3_SCK
    PC11     ------> SPI3_MISO
    PC12     ------> SPI3_MOSI 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12;
 8002586:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 800258a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800258c:	2302      	movs	r3, #2
 800258e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002590:	2300      	movs	r3, #0
 8002592:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002594:	2300      	movs	r3, #0
 8002596:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8002598:	2306      	movs	r3, #6
 800259a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800259c:	f107 0314 	add.w	r3, r7, #20
 80025a0:	4619      	mov	r1, r3
 80025a2:	4805      	ldr	r0, [pc, #20]	; (80025b8 <HAL_SPI_MspInit+0x84>)
 80025a4:	f003 f93a 	bl	800581c <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }
}
 80025a8:	bf00      	nop
 80025aa:	3728      	adds	r7, #40	; 0x28
 80025ac:	46bd      	mov	sp, r7
 80025ae:	bd80      	pop	{r7, pc}
 80025b0:	40003c00 	.word	0x40003c00
 80025b4:	40021000 	.word	0x40021000
 80025b8:	48000800 	.word	0x48000800

080025bc <LL_PWR_DisableUCPDDeadBattery>:
  *         control to the UCPD (which should therefore be initialized before doing the disable).
  * @rmtoll CR3          UCPD_DBDIS           LL_PWR_DisableUCPDDeadBattery
  * @retval None
  */
__STATIC_INLINE void LL_PWR_DisableUCPDDeadBattery(void)
{
 80025bc:	b480      	push	{r7}
 80025be:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR3, PWR_CR3_UCPD_DBDIS);
 80025c0:	4b05      	ldr	r3, [pc, #20]	; (80025d8 <LL_PWR_DisableUCPDDeadBattery+0x1c>)
 80025c2:	689b      	ldr	r3, [r3, #8]
 80025c4:	4a04      	ldr	r2, [pc, #16]	; (80025d8 <LL_PWR_DisableUCPDDeadBattery+0x1c>)
 80025c6:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80025ca:	6093      	str	r3, [r2, #8]
}
 80025cc:	bf00      	nop
 80025ce:	46bd      	mov	sp, r7
 80025d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025d4:	4770      	bx	lr
 80025d6:	bf00      	nop
 80025d8:	40007000 	.word	0x40007000

080025dc <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80025dc:	b580      	push	{r7, lr}
 80025de:	b082      	sub	sp, #8
 80025e0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80025e2:	4b0f      	ldr	r3, [pc, #60]	; (8002620 <HAL_MspInit+0x44>)
 80025e4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80025e6:	4a0e      	ldr	r2, [pc, #56]	; (8002620 <HAL_MspInit+0x44>)
 80025e8:	f043 0301 	orr.w	r3, r3, #1
 80025ec:	6613      	str	r3, [r2, #96]	; 0x60
 80025ee:	4b0c      	ldr	r3, [pc, #48]	; (8002620 <HAL_MspInit+0x44>)
 80025f0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80025f2:	f003 0301 	and.w	r3, r3, #1
 80025f6:	607b      	str	r3, [r7, #4]
 80025f8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80025fa:	4b09      	ldr	r3, [pc, #36]	; (8002620 <HAL_MspInit+0x44>)
 80025fc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80025fe:	4a08      	ldr	r2, [pc, #32]	; (8002620 <HAL_MspInit+0x44>)
 8002600:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002604:	6593      	str	r3, [r2, #88]	; 0x58
 8002606:	4b06      	ldr	r3, [pc, #24]	; (8002620 <HAL_MspInit+0x44>)
 8002608:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800260a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800260e:	603b      	str	r3, [r7, #0]
 8002610:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral 
  */
  LL_PWR_DisableDeadBatteryPD();
 8002612:	f7ff ffd3 	bl	80025bc <LL_PWR_DisableUCPDDeadBattery>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002616:	bf00      	nop
 8002618:	3708      	adds	r7, #8
 800261a:	46bd      	mov	sp, r7
 800261c:	bd80      	pop	{r7, pc}
 800261e:	bf00      	nop
 8002620:	40021000 	.word	0x40021000

08002624 <LL_EXTI_IsActiveFlag_0_31>:
  * @note   (*): Available in some devices
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_EXTI_IsActiveFlag_0_31(uint32_t ExtiLine)
{
 8002624:	b480      	push	{r7}
 8002626:	b083      	sub	sp, #12
 8002628:	af00      	add	r7, sp, #0
 800262a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(EXTI->PR1, ExtiLine) == (ExtiLine)) ? 1UL : 0UL);
 800262c:	4b07      	ldr	r3, [pc, #28]	; (800264c <LL_EXTI_IsActiveFlag_0_31+0x28>)
 800262e:	695a      	ldr	r2, [r3, #20]
 8002630:	687b      	ldr	r3, [r7, #4]
 8002632:	4013      	ands	r3, r2
 8002634:	687a      	ldr	r2, [r7, #4]
 8002636:	429a      	cmp	r2, r3
 8002638:	d101      	bne.n	800263e <LL_EXTI_IsActiveFlag_0_31+0x1a>
 800263a:	2301      	movs	r3, #1
 800263c:	e000      	b.n	8002640 <LL_EXTI_IsActiveFlag_0_31+0x1c>
 800263e:	2300      	movs	r3, #0
}
 8002640:	4618      	mov	r0, r3
 8002642:	370c      	adds	r7, #12
 8002644:	46bd      	mov	sp, r7
 8002646:	f85d 7b04 	ldr.w	r7, [sp], #4
 800264a:	4770      	bx	lr
 800264c:	40010400 	.word	0x40010400

08002650 <LL_EXTI_ClearFlag_0_31>:
  * @note   (*): Available in some devices
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_ClearFlag_0_31(uint32_t ExtiLine)
{
 8002650:	b480      	push	{r7}
 8002652:	b083      	sub	sp, #12
 8002654:	af00      	add	r7, sp, #0
 8002656:	6078      	str	r0, [r7, #4]
  WRITE_REG(EXTI->PR1, ExtiLine);
 8002658:	4a04      	ldr	r2, [pc, #16]	; (800266c <LL_EXTI_ClearFlag_0_31+0x1c>)
 800265a:	687b      	ldr	r3, [r7, #4]
 800265c:	6153      	str	r3, [r2, #20]
}
 800265e:	bf00      	nop
 8002660:	370c      	adds	r7, #12
 8002662:	46bd      	mov	sp, r7
 8002664:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002668:	4770      	bx	lr
 800266a:	bf00      	nop
 800266c:	40010400 	.word	0x40010400

08002670 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002670:	b480      	push	{r7}
 8002672:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8002674:	bf00      	nop
 8002676:	46bd      	mov	sp, r7
 8002678:	f85d 7b04 	ldr.w	r7, [sp], #4
 800267c:	4770      	bx	lr

0800267e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800267e:	b480      	push	{r7}
 8002680:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002682:	e7fe      	b.n	8002682 <HardFault_Handler+0x4>

08002684 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002684:	b480      	push	{r7}
 8002686:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002688:	e7fe      	b.n	8002688 <MemManage_Handler+0x4>

0800268a <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800268a:	b480      	push	{r7}
 800268c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800268e:	e7fe      	b.n	800268e <BusFault_Handler+0x4>

08002690 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002690:	b480      	push	{r7}
 8002692:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002694:	e7fe      	b.n	8002694 <UsageFault_Handler+0x4>

08002696 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002696:	b480      	push	{r7}
 8002698:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800269a:	bf00      	nop
 800269c:	46bd      	mov	sp, r7
 800269e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026a2:	4770      	bx	lr

080026a4 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80026a4:	b480      	push	{r7}
 80026a6:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80026a8:	bf00      	nop
 80026aa:	46bd      	mov	sp, r7
 80026ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026b0:	4770      	bx	lr

080026b2 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80026b2:	b480      	push	{r7}
 80026b4:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80026b6:	bf00      	nop
 80026b8:	46bd      	mov	sp, r7
 80026ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026be:	4770      	bx	lr

080026c0 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80026c0:	b580      	push	{r7, lr}
 80026c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80026c4:	f000 fd3a 	bl	800313c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80026c8:	bf00      	nop
 80026ca:	bd80      	pop	{r7, pc}

080026cc <EXTI0_IRQHandler>:

/**
  * @brief This function handles EXTI line0 interrupt.
  */
void EXTI0_IRQHandler(void)
{
 80026cc:	b580      	push	{r7, lr}
 80026ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI0_IRQn 0 */

//	if(HAL_GPIO_ReadPin(BTN3_EXTI0_GPIO_Port, BTN3_EXTI0_Pin))
//	{
		//snprintf(control_pressed, sizeof(control_pressed), "BTN3");
		EM_SetNewEvent(evRedBtn);
 80026d0:	2004      	movs	r0, #4
 80026d2:	f7fe fc7d 	bl	8000fd0 <EM_SetNewEvent>
 		//printf("BTN3_EXTI0_Pin\n");
//	}

  /* USER CODE END EXTI0_IRQn 0 */
  if (LL_EXTI_IsActiveFlag_0_31(LL_EXTI_LINE_0) != RESET)
 80026d6:	2001      	movs	r0, #1
 80026d8:	f7ff ffa4 	bl	8002624 <LL_EXTI_IsActiveFlag_0_31>
 80026dc:	4603      	mov	r3, r0
 80026de:	2b00      	cmp	r3, #0
 80026e0:	d002      	beq.n	80026e8 <EXTI0_IRQHandler+0x1c>
  {
    LL_EXTI_ClearFlag_0_31(LL_EXTI_LINE_0);
 80026e2:	2001      	movs	r0, #1
 80026e4:	f7ff ffb4 	bl	8002650 <LL_EXTI_ClearFlag_0_31>
    /* USER CODE END LL_EXTI_LINE_0 */
  }
  /* USER CODE BEGIN EXTI0_IRQn 1 */

  /* USER CODE END EXTI0_IRQn 1 */
}
 80026e8:	bf00      	nop
 80026ea:	bd80      	pop	{r7, pc}

080026ec <EXTI1_IRQHandler>:

/**
  * @brief This function handles EXTI line1 interrupt.
  */
void EXTI1_IRQHandler(void)
{
 80026ec:	b580      	push	{r7, lr}
 80026ee:	af00      	add	r7, sp, #0

//	if(HAL_GPIO_ReadPin(BTN4_EXTI1_GPIO_Port, BTN4_EXTI1_Pin))
//	{
		//snprintf(control_pressed, sizeof(control_pressed), "BTN4");
		//printf("BTN4_EXTI1_Pin\n");
		EM_SetNewEvent(evGreenBtn);
 80026f0:	2002      	movs	r0, #2
 80026f2:	f7fe fc6d 	bl	8000fd0 <EM_SetNewEvent>
//	}

  /* USER CODE END EXTI1_IRQn 0 */
  if (LL_EXTI_IsActiveFlag_0_31(LL_EXTI_LINE_1) != RESET)
 80026f6:	2002      	movs	r0, #2
 80026f8:	f7ff ff94 	bl	8002624 <LL_EXTI_IsActiveFlag_0_31>
 80026fc:	4603      	mov	r3, r0
 80026fe:	2b00      	cmp	r3, #0
 8002700:	d002      	beq.n	8002708 <EXTI1_IRQHandler+0x1c>
  {
    LL_EXTI_ClearFlag_0_31(LL_EXTI_LINE_1);
 8002702:	2002      	movs	r0, #2
 8002704:	f7ff ffa4 	bl	8002650 <LL_EXTI_ClearFlag_0_31>
    /* USER CODE END LL_EXTI_LINE_1 */
  }
  /* USER CODE BEGIN EXTI1_IRQn 1 */

  /* USER CODE END EXTI1_IRQn 1 */
}
 8002708:	bf00      	nop
 800270a:	bd80      	pop	{r7, pc}

0800270c <EXTI2_IRQHandler>:

/**
  * @brief This function handles EXTI line2 interrupt.
  */
void EXTI2_IRQHandler(void)
{
 800270c:	b580      	push	{r7, lr}
 800270e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI2_IRQn 0 */


		//snprintf(control_pressed, sizeof(control_pressed), "ENC_BTN");
		//printf("ENC_EXTI2_Pin\n");
		EM_SetNewEvent(evEncoderPush);
 8002710:	2006      	movs	r0, #6
 8002712:	f7fe fc5d 	bl	8000fd0 <EM_SetNewEvent>



  /* USER CODE END EXTI2_IRQn 0 */
  if (LL_EXTI_IsActiveFlag_0_31(LL_EXTI_LINE_2) != RESET)
 8002716:	2004      	movs	r0, #4
 8002718:	f7ff ff84 	bl	8002624 <LL_EXTI_IsActiveFlag_0_31>
 800271c:	4603      	mov	r3, r0
 800271e:	2b00      	cmp	r3, #0
 8002720:	d002      	beq.n	8002728 <EXTI2_IRQHandler+0x1c>
  {
    LL_EXTI_ClearFlag_0_31(LL_EXTI_LINE_2);
 8002722:	2004      	movs	r0, #4
 8002724:	f7ff ff94 	bl	8002650 <LL_EXTI_ClearFlag_0_31>
    /* USER CODE END LL_EXTI_LINE_2 */
  }
  /* USER CODE BEGIN EXTI2_IRQn 1 */

  /* USER CODE END EXTI2_IRQn 1 */
}
 8002728:	bf00      	nop
 800272a:	bd80      	pop	{r7, pc}

0800272c <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 800272c:	b580      	push	{r7, lr}
 800272e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */
	//printf("Test\n");
	//printf("%lu\n", trigger_input[0]);
  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8002730:	4802      	ldr	r0, [pc, #8]	; (800273c <DMA1_Channel1_IRQHandler+0x10>)
 8002732:	f002 ff23 	bl	800557c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 8002736:	bf00      	nop
 8002738:	bd80      	pop	{r7, pc}
 800273a:	bf00      	nop
 800273c:	2000117c 	.word	0x2000117c

08002740 <DMA1_Channel2_IRQHandler>:

/**
  * @brief This function handles DMA1 channel2 global interrupt.
  */
void DMA1_Channel2_IRQHandler(void)
{
 8002740:	b580      	push	{r7, lr}
 8002742:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel2_IRQn 0 */

  /* USER CODE END DMA1_Channel2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_dac1_ch1);
 8002744:	4802      	ldr	r0, [pc, #8]	; (8002750 <DMA1_Channel2_IRQHandler+0x10>)
 8002746:	f002 ff19 	bl	800557c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel2_IRQn 1 */

  /* USER CODE END DMA1_Channel2_IRQn 1 */
}
 800274a:	bf00      	nop
 800274c:	bd80      	pop	{r7, pc}
 800274e:	bf00      	nop
 8002750:	20001228 	.word	0x20001228

08002754 <DMA1_Channel3_IRQHandler>:

/**
  * @brief This function handles DMA1 channel3 global interrupt.
  */
void DMA1_Channel3_IRQHandler(void)
{
 8002754:	b580      	push	{r7, lr}
 8002756:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel3_IRQn 0 */

  /* USER CODE END DMA1_Channel3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_dac2_ch1);
 8002758:	4802      	ldr	r0, [pc, #8]	; (8002764 <DMA1_Channel3_IRQHandler+0x10>)
 800275a:	f002 ff0f 	bl	800557c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel3_IRQn 1 */

  /* USER CODE END DMA1_Channel3_IRQn 1 */
}
 800275e:	bf00      	nop
 8002760:	bd80      	pop	{r7, pc}
 8002762:	bf00      	nop
 8002764:	20001288 	.word	0x20001288

08002768 <TIM1_BRK_TIM15_IRQHandler>:

/**
  * @brief This function handles TIM1 break interrupt and TIM15 global interrupt.
  */
void TIM1_BRK_TIM15_IRQHandler(void)
{
 8002768:	b580      	push	{r7, lr}
 800276a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_BRK_TIM15_IRQn 0 */
	DM_UpdateDisplay();
 800276c:	f7fd fdd4 	bl	8000318 <DM_UpdateDisplay>
	//DM_TestScreen();

	if((TIM1->CNT < last_enc_value) || (TIM1->CNT > last_enc_value))
 8002770:	4b0d      	ldr	r3, [pc, #52]	; (80027a8 <TIM1_BRK_TIM15_IRQHandler+0x40>)
 8002772:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002774:	4a0d      	ldr	r2, [pc, #52]	; (80027ac <TIM1_BRK_TIM15_IRQHandler+0x44>)
 8002776:	8812      	ldrh	r2, [r2, #0]
 8002778:	4293      	cmp	r3, r2
 800277a:	d305      	bcc.n	8002788 <TIM1_BRK_TIM15_IRQHandler+0x20>
 800277c:	4b0a      	ldr	r3, [pc, #40]	; (80027a8 <TIM1_BRK_TIM15_IRQHandler+0x40>)
 800277e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002780:	4a0a      	ldr	r2, [pc, #40]	; (80027ac <TIM1_BRK_TIM15_IRQHandler+0x44>)
 8002782:	8812      	ldrh	r2, [r2, #0]
 8002784:	4293      	cmp	r3, r2
 8002786:	d902      	bls.n	800278e <TIM1_BRK_TIM15_IRQHandler+0x26>
	{

		EM_SetNewEvent(evEncoderSet);
 8002788:	2005      	movs	r0, #5
 800278a:	f7fe fc21 	bl	8000fd0 <EM_SetNewEvent>

	}
	last_enc_value = TIM1->CNT;
 800278e:	4b06      	ldr	r3, [pc, #24]	; (80027a8 <TIM1_BRK_TIM15_IRQHandler+0x40>)
 8002790:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002792:	b29a      	uxth	r2, r3
 8002794:	4b05      	ldr	r3, [pc, #20]	; (80027ac <TIM1_BRK_TIM15_IRQHandler+0x44>)
 8002796:	801a      	strh	r2, [r3, #0]

  /* USER CODE END TIM1_BRK_TIM15_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8002798:	4805      	ldr	r0, [pc, #20]	; (80027b0 <TIM1_BRK_TIM15_IRQHandler+0x48>)
 800279a:	f004 fe8e 	bl	80074ba <HAL_TIM_IRQHandler>
  HAL_TIM_IRQHandler(&htim15);
 800279e:	4805      	ldr	r0, [pc, #20]	; (80027b4 <TIM1_BRK_TIM15_IRQHandler+0x4c>)
 80027a0:	f004 fe8b 	bl	80074ba <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_BRK_TIM15_IRQn 1 */

  /* USER CODE END TIM1_BRK_TIM15_IRQn 1 */
}
 80027a4:	bf00      	nop
 80027a6:	bd80      	pop	{r7, pc}
 80027a8:	40012c00 	.word	0x40012c00
 80027ac:	200010f4 	.word	0x200010f4
 80027b0:	2000147c 	.word	0x2000147c
 80027b4:	20001398 	.word	0x20001398

080027b8 <TIM1_UP_TIM16_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM16 global interrupt.
  */
void TIM1_UP_TIM16_IRQHandler(void)
{
 80027b8:	b580      	push	{r7, lr}
 80027ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 0 */
	snprintf(control_pressed, sizeof(control_pressed), " ");
 80027bc:	4a05      	ldr	r2, [pc, #20]	; (80027d4 <TIM1_UP_TIM16_IRQHandler+0x1c>)
 80027be:	4b06      	ldr	r3, [pc, #24]	; (80027d8 <TIM1_UP_TIM16_IRQHandler+0x20>)
 80027c0:	881b      	ldrh	r3, [r3, #0]
 80027c2:	8013      	strh	r3, [r2, #0]
  /* USER CODE END TIM1_UP_TIM16_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 80027c4:	4805      	ldr	r0, [pc, #20]	; (80027dc <TIM1_UP_TIM16_IRQHandler+0x24>)
 80027c6:	f004 fe78 	bl	80074ba <HAL_TIM_IRQHandler>
  HAL_TIM_IRQHandler(&htim16);
 80027ca:	4805      	ldr	r0, [pc, #20]	; (80027e0 <TIM1_UP_TIM16_IRQHandler+0x28>)
 80027cc:	f004 fe75 	bl	80074ba <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 1 */
}
 80027d0:	bf00      	nop
 80027d2:	bd80      	pop	{r7, pc}
 80027d4:	20001104 	.word	0x20001104
 80027d8:	0800aa44 	.word	0x0800aa44
 80027dc:	2000147c 	.word	0x2000147c
 80027e0:	20001514 	.word	0x20001514

080027e4 <TIM1_TRG_COM_TIM17_IRQHandler>:

/**
  * @brief This function handles TIM1 trigger and commutation interrupts and TIM17 global interrupt.
  */
void TIM1_TRG_COM_TIM17_IRQHandler(void)
{
 80027e4:	b580      	push	{r7, lr}
 80027e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_TRG_COM_TIM17_IRQn 0 */
	update_dc_bias_sweep();
 80027e8:	f7ff f962 	bl	8001ab0 <update_dc_bias_sweep>




  /* USER CODE END TIM1_TRG_COM_TIM17_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 80027ec:	4803      	ldr	r0, [pc, #12]	; (80027fc <TIM1_TRG_COM_TIM17_IRQHandler+0x18>)
 80027ee:	f004 fe64 	bl	80074ba <HAL_TIM_IRQHandler>
  HAL_TIM_IRQHandler(&htim17);
 80027f2:	4803      	ldr	r0, [pc, #12]	; (8002800 <TIM1_TRG_COM_TIM17_IRQHandler+0x1c>)
 80027f4:	f004 fe61 	bl	80074ba <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_TRG_COM_TIM17_IRQn 1 */

  /* USER CODE END TIM1_TRG_COM_TIM17_IRQn 1 */
}
 80027f8:	bf00      	nop
 80027fa:	bd80      	pop	{r7, pc}
 80027fc:	2000147c 	.word	0x2000147c
 8002800:	200013e4 	.word	0x200013e4

08002804 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8002804:	b580      	push	{r7, lr}
 8002806:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8002808:	4802      	ldr	r0, [pc, #8]	; (8002814 <TIM2_IRQHandler+0x10>)
 800280a:	f004 fe56 	bl	80074ba <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 800280e:	bf00      	nop
 8002810:	bd80      	pop	{r7, pc}
 8002812:	bf00      	nop
 8002814:	200014c8 	.word	0x200014c8

08002818 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8002818:	b580      	push	{r7, lr}
 800281a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

	if(HAL_GPIO_ReadPin(BTN1_EXTI14_GPIO_Port, BTN1_EXTI14_Pin))
 800281c:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8002820:	4815      	ldr	r0, [pc, #84]	; (8002878 <EXTI15_10_IRQHandler+0x60>)
 8002822:	f003 f97d 	bl	8005b20 <HAL_GPIO_ReadPin>
 8002826:	4603      	mov	r3, r0
 8002828:	2b00      	cmp	r3, #0
 800282a:	d002      	beq.n	8002832 <EXTI15_10_IRQHandler+0x1a>
	{
		EM_SetNewEvent(evYellowBtn);
 800282c:	2003      	movs	r0, #3
 800282e:	f7fe fbcf 	bl	8000fd0 <EM_SetNewEvent>
		//snprintf(control_pressed, sizeof(control_pressed), "BTN1");
		//printf("BTN1_EXTI14_Pin\n");
	}
	if(HAL_GPIO_ReadPin(BTN2_EXTI15_GPIO_Port, BTN2_EXTI15_Pin))
 8002832:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8002836:	4810      	ldr	r0, [pc, #64]	; (8002878 <EXTI15_10_IRQHandler+0x60>)
 8002838:	f003 f972 	bl	8005b20 <HAL_GPIO_ReadPin>
 800283c:	4603      	mov	r3, r0
 800283e:	2b00      	cmp	r3, #0
 8002840:	d002      	beq.n	8002848 <EXTI15_10_IRQHandler+0x30>
	{
		EM_SetNewEvent(evBlueBtn);
 8002842:	2001      	movs	r0, #1
 8002844:	f7fe fbc4 	bl	8000fd0 <EM_SetNewEvent>
		//snprintf(control_pressed, sizeof(control_pressed), "BTN2");
		//printf("BTN2_EXTI15_Pin\n");
	}

  /* USER CODE END EXTI15_10_IRQn 0 */
  if (LL_EXTI_IsActiveFlag_0_31(LL_EXTI_LINE_14) != RESET)
 8002848:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 800284c:	f7ff feea 	bl	8002624 <LL_EXTI_IsActiveFlag_0_31>
 8002850:	4603      	mov	r3, r0
 8002852:	2b00      	cmp	r3, #0
 8002854:	d003      	beq.n	800285e <EXTI15_10_IRQHandler+0x46>
  {
    LL_EXTI_ClearFlag_0_31(LL_EXTI_LINE_14);
 8002856:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 800285a:	f7ff fef9 	bl	8002650 <LL_EXTI_ClearFlag_0_31>
    /* USER CODE BEGIN LL_EXTI_LINE_14 */
    
    /* USER CODE END LL_EXTI_LINE_14 */
  }
  if (LL_EXTI_IsActiveFlag_0_31(LL_EXTI_LINE_15) != RESET)
 800285e:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 8002862:	f7ff fedf 	bl	8002624 <LL_EXTI_IsActiveFlag_0_31>
 8002866:	4603      	mov	r3, r0
 8002868:	2b00      	cmp	r3, #0
 800286a:	d003      	beq.n	8002874 <EXTI15_10_IRQHandler+0x5c>
  {
    LL_EXTI_ClearFlag_0_31(LL_EXTI_LINE_15);
 800286c:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 8002870:	f7ff feee 	bl	8002650 <LL_EXTI_ClearFlag_0_31>
    /* USER CODE END LL_EXTI_LINE_15 */
  }
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8002874:	bf00      	nop
 8002876:	bd80      	pop	{r7, pc}
 8002878:	48000800 	.word	0x48000800

0800287c <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 800287c:	b580      	push	{r7, lr}
 800287e:	b086      	sub	sp, #24
 8002880:	af00      	add	r7, sp, #0
 8002882:	60f8      	str	r0, [r7, #12]
 8002884:	60b9      	str	r1, [r7, #8]
 8002886:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002888:	2300      	movs	r3, #0
 800288a:	617b      	str	r3, [r7, #20]
 800288c:	e00a      	b.n	80028a4 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 800288e:	f3af 8000 	nop.w
 8002892:	4601      	mov	r1, r0
 8002894:	68bb      	ldr	r3, [r7, #8]
 8002896:	1c5a      	adds	r2, r3, #1
 8002898:	60ba      	str	r2, [r7, #8]
 800289a:	b2ca      	uxtb	r2, r1
 800289c:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800289e:	697b      	ldr	r3, [r7, #20]
 80028a0:	3301      	adds	r3, #1
 80028a2:	617b      	str	r3, [r7, #20]
 80028a4:	697a      	ldr	r2, [r7, #20]
 80028a6:	687b      	ldr	r3, [r7, #4]
 80028a8:	429a      	cmp	r2, r3
 80028aa:	dbf0      	blt.n	800288e <_read+0x12>
	}

return len;
 80028ac:	687b      	ldr	r3, [r7, #4]
}
 80028ae:	4618      	mov	r0, r3
 80028b0:	3718      	adds	r7, #24
 80028b2:	46bd      	mov	sp, r7
 80028b4:	bd80      	pop	{r7, pc}

080028b6 <_close>:
	}
	return len;
}

int _close(int file)
{
 80028b6:	b480      	push	{r7}
 80028b8:	b083      	sub	sp, #12
 80028ba:	af00      	add	r7, sp, #0
 80028bc:	6078      	str	r0, [r7, #4]
	return -1;
 80028be:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 80028c2:	4618      	mov	r0, r3
 80028c4:	370c      	adds	r7, #12
 80028c6:	46bd      	mov	sp, r7
 80028c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028cc:	4770      	bx	lr

080028ce <_fstat>:


int _fstat(int file, struct stat *st)
{
 80028ce:	b480      	push	{r7}
 80028d0:	b083      	sub	sp, #12
 80028d2:	af00      	add	r7, sp, #0
 80028d4:	6078      	str	r0, [r7, #4]
 80028d6:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 80028d8:	683b      	ldr	r3, [r7, #0]
 80028da:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80028de:	605a      	str	r2, [r3, #4]
	return 0;
 80028e0:	2300      	movs	r3, #0
}
 80028e2:	4618      	mov	r0, r3
 80028e4:	370c      	adds	r7, #12
 80028e6:	46bd      	mov	sp, r7
 80028e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028ec:	4770      	bx	lr

080028ee <_isatty>:

int _isatty(int file)
{
 80028ee:	b480      	push	{r7}
 80028f0:	b083      	sub	sp, #12
 80028f2:	af00      	add	r7, sp, #0
 80028f4:	6078      	str	r0, [r7, #4]
	return 1;
 80028f6:	2301      	movs	r3, #1
}
 80028f8:	4618      	mov	r0, r3
 80028fa:	370c      	adds	r7, #12
 80028fc:	46bd      	mov	sp, r7
 80028fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002902:	4770      	bx	lr

08002904 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8002904:	b480      	push	{r7}
 8002906:	b085      	sub	sp, #20
 8002908:	af00      	add	r7, sp, #0
 800290a:	60f8      	str	r0, [r7, #12]
 800290c:	60b9      	str	r1, [r7, #8]
 800290e:	607a      	str	r2, [r7, #4]
	return 0;
 8002910:	2300      	movs	r3, #0
}
 8002912:	4618      	mov	r0, r3
 8002914:	3714      	adds	r7, #20
 8002916:	46bd      	mov	sp, r7
 8002918:	f85d 7b04 	ldr.w	r7, [sp], #4
 800291c:	4770      	bx	lr
	...

08002920 <_sbrk>:
/**
 _sbrk
 Increase program data space. Malloc and related functions depend on this
**/
caddr_t _sbrk(int incr)
{
 8002920:	b580      	push	{r7, lr}
 8002922:	b084      	sub	sp, #16
 8002924:	af00      	add	r7, sp, #0
 8002926:	6078      	str	r0, [r7, #4]
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 8002928:	4b11      	ldr	r3, [pc, #68]	; (8002970 <_sbrk+0x50>)
 800292a:	681b      	ldr	r3, [r3, #0]
 800292c:	2b00      	cmp	r3, #0
 800292e:	d102      	bne.n	8002936 <_sbrk+0x16>
		heap_end = &end;
 8002930:	4b0f      	ldr	r3, [pc, #60]	; (8002970 <_sbrk+0x50>)
 8002932:	4a10      	ldr	r2, [pc, #64]	; (8002974 <_sbrk+0x54>)
 8002934:	601a      	str	r2, [r3, #0]

	prev_heap_end = heap_end;
 8002936:	4b0e      	ldr	r3, [pc, #56]	; (8002970 <_sbrk+0x50>)
 8002938:	681b      	ldr	r3, [r3, #0]
 800293a:	60fb      	str	r3, [r7, #12]
	if (heap_end + incr > stack_ptr)
 800293c:	4b0c      	ldr	r3, [pc, #48]	; (8002970 <_sbrk+0x50>)
 800293e:	681a      	ldr	r2, [r3, #0]
 8002940:	687b      	ldr	r3, [r7, #4]
 8002942:	4413      	add	r3, r2
 8002944:	466a      	mov	r2, sp
 8002946:	4293      	cmp	r3, r2
 8002948:	d907      	bls.n	800295a <_sbrk+0x3a>
	{
		errno = ENOMEM;
 800294a:	f006 ff23 	bl	8009794 <__errno>
 800294e:	4602      	mov	r2, r0
 8002950:	230c      	movs	r3, #12
 8002952:	6013      	str	r3, [r2, #0]
		return (caddr_t) -1;
 8002954:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8002958:	e006      	b.n	8002968 <_sbrk+0x48>
	}

	heap_end += incr;
 800295a:	4b05      	ldr	r3, [pc, #20]	; (8002970 <_sbrk+0x50>)
 800295c:	681a      	ldr	r2, [r3, #0]
 800295e:	687b      	ldr	r3, [r7, #4]
 8002960:	4413      	add	r3, r2
 8002962:	4a03      	ldr	r2, [pc, #12]	; (8002970 <_sbrk+0x50>)
 8002964:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap_end;
 8002966:	68fb      	ldr	r3, [r7, #12]
}
 8002968:	4618      	mov	r0, r3
 800296a:	3710      	adds	r7, #16
 800296c:	46bd      	mov	sp, r7
 800296e:	bd80      	pop	{r7, pc}
 8002970:	200010f8 	.word	0x200010f8
 8002974:	20001568 	.word	0x20001568

08002978 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 8002978:	b480      	push	{r7}
 800297a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 800297c:	4b08      	ldr	r3, [pc, #32]	; (80029a0 <SystemInit+0x28>)
 800297e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002982:	4a07      	ldr	r2, [pc, #28]	; (80029a0 <SystemInit+0x28>)
 8002984:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8002988:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 800298c:	4b04      	ldr	r3, [pc, #16]	; (80029a0 <SystemInit+0x28>)
 800298e:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8002992:	609a      	str	r2, [r3, #8]
#endif
}
 8002994:	bf00      	nop
 8002996:	46bd      	mov	sp, r7
 8002998:	f85d 7b04 	ldr.w	r7, [sp], #4
 800299c:	4770      	bx	lr
 800299e:	bf00      	nop
 80029a0:	e000ed00 	.word	0xe000ed00

080029a4 <MX_TIM1_Init>:
TIM_HandleTypeDef htim16;
TIM_HandleTypeDef htim17;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 80029a4:	b580      	push	{r7, lr}
 80029a6:	b09a      	sub	sp, #104	; 0x68
 80029a8:	af00      	add	r7, sp, #0
  TIM_Encoder_InitTypeDef sConfig = {0};
 80029aa:	f107 0344 	add.w	r3, r7, #68	; 0x44
 80029ae:	2224      	movs	r2, #36	; 0x24
 80029b0:	2100      	movs	r1, #0
 80029b2:	4618      	mov	r0, r3
 80029b4:	f006 ff18 	bl	80097e8 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80029b8:	f107 0338 	add.w	r3, r7, #56	; 0x38
 80029bc:	2200      	movs	r2, #0
 80029be:	601a      	str	r2, [r3, #0]
 80029c0:	605a      	str	r2, [r3, #4]
 80029c2:	609a      	str	r2, [r3, #8]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 80029c4:	1d3b      	adds	r3, r7, #4
 80029c6:	2234      	movs	r2, #52	; 0x34
 80029c8:	2100      	movs	r1, #0
 80029ca:	4618      	mov	r0, r3
 80029cc:	f006 ff0c 	bl	80097e8 <memset>

  htim1.Instance = TIM1;
 80029d0:	4b2a      	ldr	r3, [pc, #168]	; (8002a7c <MX_TIM1_Init+0xd8>)
 80029d2:	4a2b      	ldr	r2, [pc, #172]	; (8002a80 <MX_TIM1_Init+0xdc>)
 80029d4:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 80029d6:	4b29      	ldr	r3, [pc, #164]	; (8002a7c <MX_TIM1_Init+0xd8>)
 80029d8:	2200      	movs	r2, #0
 80029da:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_CENTERALIGNED2;
 80029dc:	4b27      	ldr	r3, [pc, #156]	; (8002a7c <MX_TIM1_Init+0xd8>)
 80029de:	2240      	movs	r2, #64	; 0x40
 80029e0:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 1024;
 80029e2:	4b26      	ldr	r3, [pc, #152]	; (8002a7c <MX_TIM1_Init+0xd8>)
 80029e4:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80029e8:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80029ea:	4b24      	ldr	r3, [pc, #144]	; (8002a7c <MX_TIM1_Init+0xd8>)
 80029ec:	2200      	movs	r2, #0
 80029ee:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 80029f0:	4b22      	ldr	r3, [pc, #136]	; (8002a7c <MX_TIM1_Init+0xd8>)
 80029f2:	2200      	movs	r2, #0
 80029f4:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80029f6:	4b21      	ldr	r3, [pc, #132]	; (8002a7c <MX_TIM1_Init+0xd8>)
 80029f8:	2200      	movs	r2, #0
 80029fa:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 80029fc:	2303      	movs	r3, #3
 80029fe:	647b      	str	r3, [r7, #68]	; 0x44
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8002a00:	2300      	movs	r3, #0
 8002a02:	64bb      	str	r3, [r7, #72]	; 0x48
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8002a04:	2301      	movs	r3, #1
 8002a06:	64fb      	str	r3, [r7, #76]	; 0x4c
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8002a08:	2300      	movs	r3, #0
 8002a0a:	653b      	str	r3, [r7, #80]	; 0x50
  sConfig.IC1Filter = 0;
 8002a0c:	2300      	movs	r3, #0
 8002a0e:	657b      	str	r3, [r7, #84]	; 0x54
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8002a10:	2300      	movs	r3, #0
 8002a12:	65bb      	str	r3, [r7, #88]	; 0x58
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8002a14:	2301      	movs	r3, #1
 8002a16:	65fb      	str	r3, [r7, #92]	; 0x5c
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8002a18:	2300      	movs	r3, #0
 8002a1a:	663b      	str	r3, [r7, #96]	; 0x60
  sConfig.IC2Filter = 0;
 8002a1c:	2300      	movs	r3, #0
 8002a1e:	667b      	str	r3, [r7, #100]	; 0x64
  if (HAL_TIM_Encoder_Init(&htim1, &sConfig) != HAL_OK)
 8002a20:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8002a24:	4619      	mov	r1, r3
 8002a26:	4815      	ldr	r0, [pc, #84]	; (8002a7c <MX_TIM1_Init+0xd8>)
 8002a28:	f004 fca1 	bl	800736e <HAL_TIM_Encoder_Init>
 8002a2c:	4603      	mov	r3, r0
 8002a2e:	2b00      	cmp	r3, #0
 8002a30:	d001      	beq.n	8002a36 <MX_TIM1_Init+0x92>
  {
    Error_Handler();
 8002a32:	f7ff fd03 	bl	800243c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002a36:	2300      	movs	r3, #0
 8002a38:	63bb      	str	r3, [r7, #56]	; 0x38
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8002a3a:	2300      	movs	r3, #0
 8002a3c:	63fb      	str	r3, [r7, #60]	; 0x3c
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002a3e:	2300      	movs	r3, #0
 8002a40:	643b      	str	r3, [r7, #64]	; 0x40
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8002a42:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8002a46:	4619      	mov	r1, r3
 8002a48:	480c      	ldr	r0, [pc, #48]	; (8002a7c <MX_TIM1_Init+0xd8>)
 8002a4a:	f005 fa19 	bl	8007e80 <HAL_TIMEx_MasterConfigSynchronization>
 8002a4e:	4603      	mov	r3, r0
 8002a50:	2b00      	cmp	r3, #0
 8002a52:	d001      	beq.n	8002a58 <MX_TIM1_Init+0xb4>
  {
    Error_Handler();
 8002a54:	f7ff fcf2 	bl	800243c <Error_Handler>
  }
  sBreakDeadTimeConfig.BreakAFMode = TIM_BREAK_AFMODE_INPUT;
 8002a58:	2300      	movs	r3, #0
 8002a5a:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2AFMode = TIM_BREAK_AFMODE_INPUT;
 8002a5c:	2300      	movs	r3, #0
 8002a5e:	633b      	str	r3, [r7, #48]	; 0x30
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8002a60:	1d3b      	adds	r3, r7, #4
 8002a62:	4619      	mov	r1, r3
 8002a64:	4805      	ldr	r0, [pc, #20]	; (8002a7c <MX_TIM1_Init+0xd8>)
 8002a66:	f005 faa1 	bl	8007fac <HAL_TIMEx_ConfigBreakDeadTime>
 8002a6a:	4603      	mov	r3, r0
 8002a6c:	2b00      	cmp	r3, #0
 8002a6e:	d001      	beq.n	8002a74 <MX_TIM1_Init+0xd0>
  {
    Error_Handler();
 8002a70:	f7ff fce4 	bl	800243c <Error_Handler>
  }

}
 8002a74:	bf00      	nop
 8002a76:	3768      	adds	r7, #104	; 0x68
 8002a78:	46bd      	mov	sp, r7
 8002a7a:	bd80      	pop	{r7, pc}
 8002a7c:	2000147c 	.word	0x2000147c
 8002a80:	40012c00 	.word	0x40012c00

08002a84 <MX_TIM2_Init>:
/* TIM2 init function */
void MX_TIM2_Init(void)
{
 8002a84:	b580      	push	{r7, lr}
 8002a86:	b08c      	sub	sp, #48	; 0x30
 8002a88:	af00      	add	r7, sp, #0
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8002a8a:	f107 0320 	add.w	r3, r7, #32
 8002a8e:	2200      	movs	r2, #0
 8002a90:	601a      	str	r2, [r3, #0]
 8002a92:	605a      	str	r2, [r3, #4]
 8002a94:	609a      	str	r2, [r3, #8]
 8002a96:	60da      	str	r2, [r3, #12]
  TIM_SlaveConfigTypeDef sSlaveConfig = {0};
 8002a98:	f107 030c 	add.w	r3, r7, #12
 8002a9c:	2200      	movs	r2, #0
 8002a9e:	601a      	str	r2, [r3, #0]
 8002aa0:	605a      	str	r2, [r3, #4]
 8002aa2:	609a      	str	r2, [r3, #8]
 8002aa4:	60da      	str	r2, [r3, #12]
 8002aa6:	611a      	str	r2, [r3, #16]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002aa8:	463b      	mov	r3, r7
 8002aaa:	2200      	movs	r2, #0
 8002aac:	601a      	str	r2, [r3, #0]
 8002aae:	605a      	str	r2, [r3, #4]
 8002ab0:	609a      	str	r2, [r3, #8]

  htim2.Instance = TIM2;
 8002ab2:	4b28      	ldr	r3, [pc, #160]	; (8002b54 <MX_TIM2_Init+0xd0>)
 8002ab4:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8002ab8:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 2047;
 8002aba:	4b26      	ldr	r3, [pc, #152]	; (8002b54 <MX_TIM2_Init+0xd0>)
 8002abc:	f240 72ff 	movw	r2, #2047	; 0x7ff
 8002ac0:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002ac2:	4b24      	ldr	r3, [pc, #144]	; (8002b54 <MX_TIM2_Init+0xd0>)
 8002ac4:	2200      	movs	r2, #0
 8002ac6:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 1024;
 8002ac8:	4b22      	ldr	r3, [pc, #136]	; (8002b54 <MX_TIM2_Init+0xd0>)
 8002aca:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002ace:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002ad0:	4b20      	ldr	r3, [pc, #128]	; (8002b54 <MX_TIM2_Init+0xd0>)
 8002ad2:	2200      	movs	r2, #0
 8002ad4:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002ad6:	4b1f      	ldr	r3, [pc, #124]	; (8002b54 <MX_TIM2_Init+0xd0>)
 8002ad8:	2200      	movs	r2, #0
 8002ada:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8002adc:	481d      	ldr	r0, [pc, #116]	; (8002b54 <MX_TIM2_Init+0xd0>)
 8002ade:	f004 fb5c 	bl	800719a <HAL_TIM_Base_Init>
 8002ae2:	4603      	mov	r3, r0
 8002ae4:	2b00      	cmp	r3, #0
 8002ae6:	d001      	beq.n	8002aec <MX_TIM2_Init+0x68>
  {
    Error_Handler();
 8002ae8:	f7ff fca8 	bl	800243c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002aec:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002af0:	623b      	str	r3, [r7, #32]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8002af2:	f107 0320 	add.w	r3, r7, #32
 8002af6:	4619      	mov	r1, r3
 8002af8:	4816      	ldr	r0, [pc, #88]	; (8002b54 <MX_TIM2_Init+0xd0>)
 8002afa:	f004 fe5d 	bl	80077b8 <HAL_TIM_ConfigClockSource>
 8002afe:	4603      	mov	r3, r0
 8002b00:	2b00      	cmp	r3, #0
 8002b02:	d001      	beq.n	8002b08 <MX_TIM2_Init+0x84>
  {
    Error_Handler();
 8002b04:	f7ff fc9a 	bl	800243c <Error_Handler>
  }
  sSlaveConfig.SlaveMode = TIM_SLAVEMODE_GATED;
 8002b08:	2305      	movs	r3, #5
 8002b0a:	60fb      	str	r3, [r7, #12]
  sSlaveConfig.InputTrigger = TIM_TS_TI1FP1;
 8002b0c:	2350      	movs	r3, #80	; 0x50
 8002b0e:	613b      	str	r3, [r7, #16]
  sSlaveConfig.TriggerPolarity = TIM_TRIGGERPOLARITY_RISING;
 8002b10:	2300      	movs	r3, #0
 8002b12:	617b      	str	r3, [r7, #20]
  sSlaveConfig.TriggerFilter = 0;
 8002b14:	2300      	movs	r3, #0
 8002b16:	61fb      	str	r3, [r7, #28]
  if (HAL_TIM_SlaveConfigSynchro(&htim2, &sSlaveConfig) != HAL_OK)
 8002b18:	f107 030c 	add.w	r3, r7, #12
 8002b1c:	4619      	mov	r1, r3
 8002b1e:	480d      	ldr	r0, [pc, #52]	; (8002b54 <MX_TIM2_Init+0xd0>)
 8002b20:	f004 ff3a 	bl	8007998 <HAL_TIM_SlaveConfigSynchro>
 8002b24:	4603      	mov	r3, r0
 8002b26:	2b00      	cmp	r3, #0
 8002b28:	d001      	beq.n	8002b2e <MX_TIM2_Init+0xaa>
  {
    Error_Handler();
 8002b2a:	f7ff fc87 	bl	800243c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002b2e:	2300      	movs	r3, #0
 8002b30:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002b32:	2300      	movs	r3, #0
 8002b34:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8002b36:	463b      	mov	r3, r7
 8002b38:	4619      	mov	r1, r3
 8002b3a:	4806      	ldr	r0, [pc, #24]	; (8002b54 <MX_TIM2_Init+0xd0>)
 8002b3c:	f005 f9a0 	bl	8007e80 <HAL_TIMEx_MasterConfigSynchronization>
 8002b40:	4603      	mov	r3, r0
 8002b42:	2b00      	cmp	r3, #0
 8002b44:	d001      	beq.n	8002b4a <MX_TIM2_Init+0xc6>
  {
    Error_Handler();
 8002b46:	f7ff fc79 	bl	800243c <Error_Handler>
  }

}
 8002b4a:	bf00      	nop
 8002b4c:	3730      	adds	r7, #48	; 0x30
 8002b4e:	46bd      	mov	sp, r7
 8002b50:	bd80      	pop	{r7, pc}
 8002b52:	bf00      	nop
 8002b54:	200014c8 	.word	0x200014c8

08002b58 <MX_TIM5_Init>:
/* TIM5 init function */
void MX_TIM5_Init(void)
{
 8002b58:	b580      	push	{r7, lr}
 8002b5a:	b088      	sub	sp, #32
 8002b5c:	af00      	add	r7, sp, #0
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8002b5e:	f107 0310 	add.w	r3, r7, #16
 8002b62:	2200      	movs	r2, #0
 8002b64:	601a      	str	r2, [r3, #0]
 8002b66:	605a      	str	r2, [r3, #4]
 8002b68:	609a      	str	r2, [r3, #8]
 8002b6a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002b6c:	1d3b      	adds	r3, r7, #4
 8002b6e:	2200      	movs	r2, #0
 8002b70:	601a      	str	r2, [r3, #0]
 8002b72:	605a      	str	r2, [r3, #4]
 8002b74:	609a      	str	r2, [r3, #8]

  htim5.Instance = TIM5;
 8002b76:	4b1e      	ldr	r3, [pc, #120]	; (8002bf0 <MX_TIM5_Init+0x98>)
 8002b78:	4a1e      	ldr	r2, [pc, #120]	; (8002bf4 <MX_TIM5_Init+0x9c>)
 8002b7a:	601a      	str	r2, [r3, #0]
  htim5.Init.Prescaler = 65535;
 8002b7c:	4b1c      	ldr	r3, [pc, #112]	; (8002bf0 <MX_TIM5_Init+0x98>)
 8002b7e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8002b82:	605a      	str	r2, [r3, #4]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002b84:	4b1a      	ldr	r3, [pc, #104]	; (8002bf0 <MX_TIM5_Init+0x98>)
 8002b86:	2200      	movs	r2, #0
 8002b88:	609a      	str	r2, [r3, #8]
  htim5.Init.Period = 65535;
 8002b8a:	4b19      	ldr	r3, [pc, #100]	; (8002bf0 <MX_TIM5_Init+0x98>)
 8002b8c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8002b90:	60da      	str	r2, [r3, #12]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV4;
 8002b92:	4b17      	ldr	r3, [pc, #92]	; (8002bf0 <MX_TIM5_Init+0x98>)
 8002b94:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002b98:	611a      	str	r2, [r3, #16]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002b9a:	4b15      	ldr	r3, [pc, #84]	; (8002bf0 <MX_TIM5_Init+0x98>)
 8002b9c:	2200      	movs	r2, #0
 8002b9e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim5) != HAL_OK)
 8002ba0:	4813      	ldr	r0, [pc, #76]	; (8002bf0 <MX_TIM5_Init+0x98>)
 8002ba2:	f004 fafa 	bl	800719a <HAL_TIM_Base_Init>
 8002ba6:	4603      	mov	r3, r0
 8002ba8:	2b00      	cmp	r3, #0
 8002baa:	d001      	beq.n	8002bb0 <MX_TIM5_Init+0x58>
  {
    Error_Handler();
 8002bac:	f7ff fc46 	bl	800243c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002bb0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002bb4:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim5, &sClockSourceConfig) != HAL_OK)
 8002bb6:	f107 0310 	add.w	r3, r7, #16
 8002bba:	4619      	mov	r1, r3
 8002bbc:	480c      	ldr	r0, [pc, #48]	; (8002bf0 <MX_TIM5_Init+0x98>)
 8002bbe:	f004 fdfb 	bl	80077b8 <HAL_TIM_ConfigClockSource>
 8002bc2:	4603      	mov	r3, r0
 8002bc4:	2b00      	cmp	r3, #0
 8002bc6:	d001      	beq.n	8002bcc <MX_TIM5_Init+0x74>
  {
    Error_Handler();
 8002bc8:	f7ff fc38 	bl	800243c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002bcc:	2300      	movs	r3, #0
 8002bce:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002bd0:	2300      	movs	r3, #0
 8002bd2:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 8002bd4:	1d3b      	adds	r3, r7, #4
 8002bd6:	4619      	mov	r1, r3
 8002bd8:	4805      	ldr	r0, [pc, #20]	; (8002bf0 <MX_TIM5_Init+0x98>)
 8002bda:	f005 f951 	bl	8007e80 <HAL_TIMEx_MasterConfigSynchronization>
 8002bde:	4603      	mov	r3, r0
 8002be0:	2b00      	cmp	r3, #0
 8002be2:	d001      	beq.n	8002be8 <MX_TIM5_Init+0x90>
  {
    Error_Handler();
 8002be4:	f7ff fc2a 	bl	800243c <Error_Handler>
  }

}
 8002be8:	bf00      	nop
 8002bea:	3720      	adds	r7, #32
 8002bec:	46bd      	mov	sp, r7
 8002bee:	bd80      	pop	{r7, pc}
 8002bf0:	20001430 	.word	0x20001430
 8002bf4:	40000c00 	.word	0x40000c00

08002bf8 <MX_TIM8_Init>:
/* TIM8 init function */
void MX_TIM8_Init(void)
{
 8002bf8:	b580      	push	{r7, lr}
 8002bfa:	b094      	sub	sp, #80	; 0x50
 8002bfc:	af00      	add	r7, sp, #0
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8002bfe:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8002c02:	2200      	movs	r2, #0
 8002c04:	601a      	str	r2, [r3, #0]
 8002c06:	605a      	str	r2, [r3, #4]
 8002c08:	609a      	str	r2, [r3, #8]
 8002c0a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002c0c:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8002c10:	2200      	movs	r2, #0
 8002c12:	601a      	str	r2, [r3, #0]
 8002c14:	605a      	str	r2, [r3, #4]
 8002c16:	609a      	str	r2, [r3, #8]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8002c18:	463b      	mov	r3, r7
 8002c1a:	2234      	movs	r2, #52	; 0x34
 8002c1c:	2100      	movs	r1, #0
 8002c1e:	4618      	mov	r0, r3
 8002c20:	f006 fde2 	bl	80097e8 <memset>

  htim8.Instance = TIM8;
 8002c24:	4b26      	ldr	r3, [pc, #152]	; (8002cc0 <MX_TIM8_Init+0xc8>)
 8002c26:	4a27      	ldr	r2, [pc, #156]	; (8002cc4 <MX_TIM8_Init+0xcc>)
 8002c28:	601a      	str	r2, [r3, #0]
  htim8.Init.Prescaler = 0;
 8002c2a:	4b25      	ldr	r3, [pc, #148]	; (8002cc0 <MX_TIM8_Init+0xc8>)
 8002c2c:	2200      	movs	r2, #0
 8002c2e:	605a      	str	r2, [r3, #4]
  htim8.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002c30:	4b23      	ldr	r3, [pc, #140]	; (8002cc0 <MX_TIM8_Init+0xc8>)
 8002c32:	2200      	movs	r2, #0
 8002c34:	609a      	str	r2, [r3, #8]
  htim8.Init.Period = 1;
 8002c36:	4b22      	ldr	r3, [pc, #136]	; (8002cc0 <MX_TIM8_Init+0xc8>)
 8002c38:	2201      	movs	r2, #1
 8002c3a:	60da      	str	r2, [r3, #12]
  htim8.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002c3c:	4b20      	ldr	r3, [pc, #128]	; (8002cc0 <MX_TIM8_Init+0xc8>)
 8002c3e:	2200      	movs	r2, #0
 8002c40:	611a      	str	r2, [r3, #16]
  htim8.Init.RepetitionCounter = 0;
 8002c42:	4b1f      	ldr	r3, [pc, #124]	; (8002cc0 <MX_TIM8_Init+0xc8>)
 8002c44:	2200      	movs	r2, #0
 8002c46:	615a      	str	r2, [r3, #20]
  htim8.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002c48:	4b1d      	ldr	r3, [pc, #116]	; (8002cc0 <MX_TIM8_Init+0xc8>)
 8002c4a:	2200      	movs	r2, #0
 8002c4c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim8) != HAL_OK)
 8002c4e:	481c      	ldr	r0, [pc, #112]	; (8002cc0 <MX_TIM8_Init+0xc8>)
 8002c50:	f004 faa3 	bl	800719a <HAL_TIM_Base_Init>
 8002c54:	4603      	mov	r3, r0
 8002c56:	2b00      	cmp	r3, #0
 8002c58:	d001      	beq.n	8002c5e <MX_TIM8_Init+0x66>
  {
    Error_Handler();
 8002c5a:	f7ff fbef 	bl	800243c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002c5e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002c62:	643b      	str	r3, [r7, #64]	; 0x40
  if (HAL_TIM_ConfigClockSource(&htim8, &sClockSourceConfig) != HAL_OK)
 8002c64:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8002c68:	4619      	mov	r1, r3
 8002c6a:	4815      	ldr	r0, [pc, #84]	; (8002cc0 <MX_TIM8_Init+0xc8>)
 8002c6c:	f004 fda4 	bl	80077b8 <HAL_TIM_ConfigClockSource>
 8002c70:	4603      	mov	r3, r0
 8002c72:	2b00      	cmp	r3, #0
 8002c74:	d001      	beq.n	8002c7a <MX_TIM8_Init+0x82>
  {
    Error_Handler();
 8002c76:	f7ff fbe1 	bl	800243c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 8002c7a:	2320      	movs	r3, #32
 8002c7c:	637b      	str	r3, [r7, #52]	; 0x34
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8002c7e:	2300      	movs	r3, #0
 8002c80:	63bb      	str	r3, [r7, #56]	; 0x38
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002c82:	2300      	movs	r3, #0
 8002c84:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_TIMEx_MasterConfigSynchronization(&htim8, &sMasterConfig) != HAL_OK)
 8002c86:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8002c8a:	4619      	mov	r1, r3
 8002c8c:	480c      	ldr	r0, [pc, #48]	; (8002cc0 <MX_TIM8_Init+0xc8>)
 8002c8e:	f005 f8f7 	bl	8007e80 <HAL_TIMEx_MasterConfigSynchronization>
 8002c92:	4603      	mov	r3, r0
 8002c94:	2b00      	cmp	r3, #0
 8002c96:	d001      	beq.n	8002c9c <MX_TIM8_Init+0xa4>
  {
    Error_Handler();
 8002c98:	f7ff fbd0 	bl	800243c <Error_Handler>
  }
  sBreakDeadTimeConfig.BreakAFMode = TIM_BREAK_AFMODE_INPUT;
 8002c9c:	2300      	movs	r3, #0
 8002c9e:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.Break2AFMode = TIM_BREAK_AFMODE_INPUT;
 8002ca0:	2300      	movs	r3, #0
 8002ca2:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim8, &sBreakDeadTimeConfig) != HAL_OK)
 8002ca4:	463b      	mov	r3, r7
 8002ca6:	4619      	mov	r1, r3
 8002ca8:	4805      	ldr	r0, [pc, #20]	; (8002cc0 <MX_TIM8_Init+0xc8>)
 8002caa:	f005 f97f 	bl	8007fac <HAL_TIMEx_ConfigBreakDeadTime>
 8002cae:	4603      	mov	r3, r0
 8002cb0:	2b00      	cmp	r3, #0
 8002cb2:	d001      	beq.n	8002cb8 <MX_TIM8_Init+0xc0>
  {
    Error_Handler();
 8002cb4:	f7ff fbc2 	bl	800243c <Error_Handler>
  }

}
 8002cb8:	bf00      	nop
 8002cba:	3750      	adds	r7, #80	; 0x50
 8002cbc:	46bd      	mov	sp, r7
 8002cbe:	bd80      	pop	{r7, pc}
 8002cc0:	2000134c 	.word	0x2000134c
 8002cc4:	40013400 	.word	0x40013400

08002cc8 <MX_TIM15_Init>:
/* TIM15 init function */
void MX_TIM15_Init(void)
{
 8002cc8:	b580      	push	{r7, lr}
 8002cca:	b088      	sub	sp, #32
 8002ccc:	af00      	add	r7, sp, #0
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8002cce:	f107 0310 	add.w	r3, r7, #16
 8002cd2:	2200      	movs	r2, #0
 8002cd4:	601a      	str	r2, [r3, #0]
 8002cd6:	605a      	str	r2, [r3, #4]
 8002cd8:	609a      	str	r2, [r3, #8]
 8002cda:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002cdc:	1d3b      	adds	r3, r7, #4
 8002cde:	2200      	movs	r2, #0
 8002ce0:	601a      	str	r2, [r3, #0]
 8002ce2:	605a      	str	r2, [r3, #4]
 8002ce4:	609a      	str	r2, [r3, #8]

  htim15.Instance = TIM15;
 8002ce6:	4b1f      	ldr	r3, [pc, #124]	; (8002d64 <MX_TIM15_Init+0x9c>)
 8002ce8:	4a1f      	ldr	r2, [pc, #124]	; (8002d68 <MX_TIM15_Init+0xa0>)
 8002cea:	601a      	str	r2, [r3, #0]
  htim15.Init.Prescaler = 1024;
 8002cec:	4b1d      	ldr	r3, [pc, #116]	; (8002d64 <MX_TIM15_Init+0x9c>)
 8002cee:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002cf2:	605a      	str	r2, [r3, #4]
  htim15.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002cf4:	4b1b      	ldr	r3, [pc, #108]	; (8002d64 <MX_TIM15_Init+0x9c>)
 8002cf6:	2200      	movs	r2, #0
 8002cf8:	609a      	str	r2, [r3, #8]
  htim15.Init.Period = 1024;
 8002cfa:	4b1a      	ldr	r3, [pc, #104]	; (8002d64 <MX_TIM15_Init+0x9c>)
 8002cfc:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002d00:	60da      	str	r2, [r3, #12]
  htim15.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002d02:	4b18      	ldr	r3, [pc, #96]	; (8002d64 <MX_TIM15_Init+0x9c>)
 8002d04:	2200      	movs	r2, #0
 8002d06:	611a      	str	r2, [r3, #16]
  htim15.Init.RepetitionCounter = 0;
 8002d08:	4b16      	ldr	r3, [pc, #88]	; (8002d64 <MX_TIM15_Init+0x9c>)
 8002d0a:	2200      	movs	r2, #0
 8002d0c:	615a      	str	r2, [r3, #20]
  htim15.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002d0e:	4b15      	ldr	r3, [pc, #84]	; (8002d64 <MX_TIM15_Init+0x9c>)
 8002d10:	2200      	movs	r2, #0
 8002d12:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim15) != HAL_OK)
 8002d14:	4813      	ldr	r0, [pc, #76]	; (8002d64 <MX_TIM15_Init+0x9c>)
 8002d16:	f004 fa40 	bl	800719a <HAL_TIM_Base_Init>
 8002d1a:	4603      	mov	r3, r0
 8002d1c:	2b00      	cmp	r3, #0
 8002d1e:	d001      	beq.n	8002d24 <MX_TIM15_Init+0x5c>
  {
    Error_Handler();
 8002d20:	f7ff fb8c 	bl	800243c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002d24:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002d28:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim15, &sClockSourceConfig) != HAL_OK)
 8002d2a:	f107 0310 	add.w	r3, r7, #16
 8002d2e:	4619      	mov	r1, r3
 8002d30:	480c      	ldr	r0, [pc, #48]	; (8002d64 <MX_TIM15_Init+0x9c>)
 8002d32:	f004 fd41 	bl	80077b8 <HAL_TIM_ConfigClockSource>
 8002d36:	4603      	mov	r3, r0
 8002d38:	2b00      	cmp	r3, #0
 8002d3a:	d001      	beq.n	8002d40 <MX_TIM15_Init+0x78>
  {
    Error_Handler();
 8002d3c:	f7ff fb7e 	bl	800243c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002d40:	2300      	movs	r3, #0
 8002d42:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002d44:	2300      	movs	r3, #0
 8002d46:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim15, &sMasterConfig) != HAL_OK)
 8002d48:	1d3b      	adds	r3, r7, #4
 8002d4a:	4619      	mov	r1, r3
 8002d4c:	4805      	ldr	r0, [pc, #20]	; (8002d64 <MX_TIM15_Init+0x9c>)
 8002d4e:	f005 f897 	bl	8007e80 <HAL_TIMEx_MasterConfigSynchronization>
 8002d52:	4603      	mov	r3, r0
 8002d54:	2b00      	cmp	r3, #0
 8002d56:	d001      	beq.n	8002d5c <MX_TIM15_Init+0x94>
  {
    Error_Handler();
 8002d58:	f7ff fb70 	bl	800243c <Error_Handler>
  }

}
 8002d5c:	bf00      	nop
 8002d5e:	3720      	adds	r7, #32
 8002d60:	46bd      	mov	sp, r7
 8002d62:	bd80      	pop	{r7, pc}
 8002d64:	20001398 	.word	0x20001398
 8002d68:	40014000 	.word	0x40014000

08002d6c <MX_TIM16_Init>:
/* TIM16 init function */
void MX_TIM16_Init(void)
{
 8002d6c:	b580      	push	{r7, lr}
 8002d6e:	af00      	add	r7, sp, #0

  htim16.Instance = TIM16;
 8002d70:	4b0f      	ldr	r3, [pc, #60]	; (8002db0 <MX_TIM16_Init+0x44>)
 8002d72:	4a10      	ldr	r2, [pc, #64]	; (8002db4 <MX_TIM16_Init+0x48>)
 8002d74:	601a      	str	r2, [r3, #0]
  htim16.Init.Prescaler = 0;
 8002d76:	4b0e      	ldr	r3, [pc, #56]	; (8002db0 <MX_TIM16_Init+0x44>)
 8002d78:	2200      	movs	r2, #0
 8002d7a:	605a      	str	r2, [r3, #4]
  htim16.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002d7c:	4b0c      	ldr	r3, [pc, #48]	; (8002db0 <MX_TIM16_Init+0x44>)
 8002d7e:	2200      	movs	r2, #0
 8002d80:	609a      	str	r2, [r3, #8]
  htim16.Init.Period = 8191;
 8002d82:	4b0b      	ldr	r3, [pc, #44]	; (8002db0 <MX_TIM16_Init+0x44>)
 8002d84:	f641 72ff 	movw	r2, #8191	; 0x1fff
 8002d88:	60da      	str	r2, [r3, #12]
  htim16.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002d8a:	4b09      	ldr	r3, [pc, #36]	; (8002db0 <MX_TIM16_Init+0x44>)
 8002d8c:	2200      	movs	r2, #0
 8002d8e:	611a      	str	r2, [r3, #16]
  htim16.Init.RepetitionCounter = 0;
 8002d90:	4b07      	ldr	r3, [pc, #28]	; (8002db0 <MX_TIM16_Init+0x44>)
 8002d92:	2200      	movs	r2, #0
 8002d94:	615a      	str	r2, [r3, #20]
  htim16.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002d96:	4b06      	ldr	r3, [pc, #24]	; (8002db0 <MX_TIM16_Init+0x44>)
 8002d98:	2200      	movs	r2, #0
 8002d9a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim16) != HAL_OK)
 8002d9c:	4804      	ldr	r0, [pc, #16]	; (8002db0 <MX_TIM16_Init+0x44>)
 8002d9e:	f004 f9fc 	bl	800719a <HAL_TIM_Base_Init>
 8002da2:	4603      	mov	r3, r0
 8002da4:	2b00      	cmp	r3, #0
 8002da6:	d001      	beq.n	8002dac <MX_TIM16_Init+0x40>
  {
    Error_Handler();
 8002da8:	f7ff fb48 	bl	800243c <Error_Handler>
  }

}
 8002dac:	bf00      	nop
 8002dae:	bd80      	pop	{r7, pc}
 8002db0:	20001514 	.word	0x20001514
 8002db4:	40014400 	.word	0x40014400

08002db8 <MX_TIM17_Init>:
/* TIM17 init function */
void MX_TIM17_Init(void)
{
 8002db8:	b580      	push	{r7, lr}
 8002dba:	af00      	add	r7, sp, #0

  htim17.Instance = TIM17;
 8002dbc:	4b0f      	ldr	r3, [pc, #60]	; (8002dfc <MX_TIM17_Init+0x44>)
 8002dbe:	4a10      	ldr	r2, [pc, #64]	; (8002e00 <MX_TIM17_Init+0x48>)
 8002dc0:	601a      	str	r2, [r3, #0]
  htim17.Init.Prescaler = 1023;
 8002dc2:	4b0e      	ldr	r3, [pc, #56]	; (8002dfc <MX_TIM17_Init+0x44>)
 8002dc4:	f240 32ff 	movw	r2, #1023	; 0x3ff
 8002dc8:	605a      	str	r2, [r3, #4]
  htim17.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002dca:	4b0c      	ldr	r3, [pc, #48]	; (8002dfc <MX_TIM17_Init+0x44>)
 8002dcc:	2200      	movs	r2, #0
 8002dce:	609a      	str	r2, [r3, #8]
  htim17.Init.Period = 64;
 8002dd0:	4b0a      	ldr	r3, [pc, #40]	; (8002dfc <MX_TIM17_Init+0x44>)
 8002dd2:	2240      	movs	r2, #64	; 0x40
 8002dd4:	60da      	str	r2, [r3, #12]
  htim17.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002dd6:	4b09      	ldr	r3, [pc, #36]	; (8002dfc <MX_TIM17_Init+0x44>)
 8002dd8:	2200      	movs	r2, #0
 8002dda:	611a      	str	r2, [r3, #16]
  htim17.Init.RepetitionCounter = 0;
 8002ddc:	4b07      	ldr	r3, [pc, #28]	; (8002dfc <MX_TIM17_Init+0x44>)
 8002dde:	2200      	movs	r2, #0
 8002de0:	615a      	str	r2, [r3, #20]
  htim17.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002de2:	4b06      	ldr	r3, [pc, #24]	; (8002dfc <MX_TIM17_Init+0x44>)
 8002de4:	2200      	movs	r2, #0
 8002de6:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim17) != HAL_OK)
 8002de8:	4804      	ldr	r0, [pc, #16]	; (8002dfc <MX_TIM17_Init+0x44>)
 8002dea:	f004 f9d6 	bl	800719a <HAL_TIM_Base_Init>
 8002dee:	4603      	mov	r3, r0
 8002df0:	2b00      	cmp	r3, #0
 8002df2:	d001      	beq.n	8002df8 <MX_TIM17_Init+0x40>
  {
    Error_Handler();
 8002df4:	f7ff fb22 	bl	800243c <Error_Handler>
  }

}
 8002df8:	bf00      	nop
 8002dfa:	bd80      	pop	{r7, pc}
 8002dfc:	200013e4 	.word	0x200013e4
 8002e00:	40014800 	.word	0x40014800

08002e04 <HAL_TIM_Encoder_MspInit>:

void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* tim_encoderHandle)
{
 8002e04:	b580      	push	{r7, lr}
 8002e06:	b08a      	sub	sp, #40	; 0x28
 8002e08:	af00      	add	r7, sp, #0
 8002e0a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002e0c:	f107 0314 	add.w	r3, r7, #20
 8002e10:	2200      	movs	r2, #0
 8002e12:	601a      	str	r2, [r3, #0]
 8002e14:	605a      	str	r2, [r3, #4]
 8002e16:	609a      	str	r2, [r3, #8]
 8002e18:	60da      	str	r2, [r3, #12]
 8002e1a:	611a      	str	r2, [r3, #16]
  if(tim_encoderHandle->Instance==TIM1)
 8002e1c:	687b      	ldr	r3, [r7, #4]
 8002e1e:	681b      	ldr	r3, [r3, #0]
 8002e20:	4a23      	ldr	r2, [pc, #140]	; (8002eb0 <HAL_TIM_Encoder_MspInit+0xac>)
 8002e22:	4293      	cmp	r3, r2
 8002e24:	d13f      	bne.n	8002ea6 <HAL_TIM_Encoder_MspInit+0xa2>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8002e26:	4b23      	ldr	r3, [pc, #140]	; (8002eb4 <HAL_TIM_Encoder_MspInit+0xb0>)
 8002e28:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002e2a:	4a22      	ldr	r2, [pc, #136]	; (8002eb4 <HAL_TIM_Encoder_MspInit+0xb0>)
 8002e2c:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8002e30:	6613      	str	r3, [r2, #96]	; 0x60
 8002e32:	4b20      	ldr	r3, [pc, #128]	; (8002eb4 <HAL_TIM_Encoder_MspInit+0xb0>)
 8002e34:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002e36:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002e3a:	613b      	str	r3, [r7, #16]
 8002e3c:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002e3e:	4b1d      	ldr	r3, [pc, #116]	; (8002eb4 <HAL_TIM_Encoder_MspInit+0xb0>)
 8002e40:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002e42:	4a1c      	ldr	r2, [pc, #112]	; (8002eb4 <HAL_TIM_Encoder_MspInit+0xb0>)
 8002e44:	f043 0304 	orr.w	r3, r3, #4
 8002e48:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002e4a:	4b1a      	ldr	r3, [pc, #104]	; (8002eb4 <HAL_TIM_Encoder_MspInit+0xb0>)
 8002e4c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002e4e:	f003 0304 	and.w	r3, r3, #4
 8002e52:	60fb      	str	r3, [r7, #12]
 8002e54:	68fb      	ldr	r3, [r7, #12]
    /**TIM1 GPIO Configuration    
    PC0     ------> TIM1_CH1
    PC1     ------> TIM1_CH2 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8002e56:	2303      	movs	r3, #3
 8002e58:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002e5a:	2302      	movs	r3, #2
 8002e5c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002e5e:	2300      	movs	r3, #0
 8002e60:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002e62:	2300      	movs	r3, #0
 8002e64:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM1;
 8002e66:	2302      	movs	r3, #2
 8002e68:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002e6a:	f107 0314 	add.w	r3, r7, #20
 8002e6e:	4619      	mov	r1, r3
 8002e70:	4811      	ldr	r0, [pc, #68]	; (8002eb8 <HAL_TIM_Encoder_MspInit+0xb4>)
 8002e72:	f002 fcd3 	bl	800581c <HAL_GPIO_Init>

    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_BRK_TIM15_IRQn, 0, 0);
 8002e76:	2200      	movs	r2, #0
 8002e78:	2100      	movs	r1, #0
 8002e7a:	2018      	movs	r0, #24
 8002e7c:	f001 fdb9 	bl	80049f2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_BRK_TIM15_IRQn);
 8002e80:	2018      	movs	r0, #24
 8002e82:	f001 fdd0 	bl	8004a26 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM1_UP_TIM16_IRQn, 1, 0);
 8002e86:	2200      	movs	r2, #0
 8002e88:	2101      	movs	r1, #1
 8002e8a:	2019      	movs	r0, #25
 8002e8c:	f001 fdb1 	bl	80049f2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM16_IRQn);
 8002e90:	2019      	movs	r0, #25
 8002e92:	f001 fdc8 	bl	8004a26 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM1_TRG_COM_TIM17_IRQn, 1, 0);
 8002e96:	2200      	movs	r2, #0
 8002e98:	2101      	movs	r1, #1
 8002e9a:	201a      	movs	r0, #26
 8002e9c:	f001 fda9 	bl	80049f2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_TRG_COM_TIM17_IRQn);
 8002ea0:	201a      	movs	r0, #26
 8002ea2:	f001 fdc0 	bl	8004a26 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }
}
 8002ea6:	bf00      	nop
 8002ea8:	3728      	adds	r7, #40	; 0x28
 8002eaa:	46bd      	mov	sp, r7
 8002eac:	bd80      	pop	{r7, pc}
 8002eae:	bf00      	nop
 8002eb0:	40012c00 	.word	0x40012c00
 8002eb4:	40021000 	.word	0x40021000
 8002eb8:	48000800 	.word	0x48000800

08002ebc <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8002ebc:	b580      	push	{r7, lr}
 8002ebe:	b08e      	sub	sp, #56	; 0x38
 8002ec0:	af00      	add	r7, sp, #0
 8002ec2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002ec4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002ec8:	2200      	movs	r2, #0
 8002eca:	601a      	str	r2, [r3, #0]
 8002ecc:	605a      	str	r2, [r3, #4]
 8002ece:	609a      	str	r2, [r3, #8]
 8002ed0:	60da      	str	r2, [r3, #12]
 8002ed2:	611a      	str	r2, [r3, #16]
  if(tim_baseHandle->Instance==TIM2)
 8002ed4:	687b      	ldr	r3, [r7, #4]
 8002ed6:	681b      	ldr	r3, [r3, #0]
 8002ed8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002edc:	d131      	bne.n	8002f42 <HAL_TIM_Base_MspInit+0x86>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8002ede:	4b53      	ldr	r3, [pc, #332]	; (800302c <HAL_TIM_Base_MspInit+0x170>)
 8002ee0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002ee2:	4a52      	ldr	r2, [pc, #328]	; (800302c <HAL_TIM_Base_MspInit+0x170>)
 8002ee4:	f043 0301 	orr.w	r3, r3, #1
 8002ee8:	6593      	str	r3, [r2, #88]	; 0x58
 8002eea:	4b50      	ldr	r3, [pc, #320]	; (800302c <HAL_TIM_Base_MspInit+0x170>)
 8002eec:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002eee:	f003 0301 	and.w	r3, r3, #1
 8002ef2:	623b      	str	r3, [r7, #32]
 8002ef4:	6a3b      	ldr	r3, [r7, #32]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002ef6:	4b4d      	ldr	r3, [pc, #308]	; (800302c <HAL_TIM_Base_MspInit+0x170>)
 8002ef8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002efa:	4a4c      	ldr	r2, [pc, #304]	; (800302c <HAL_TIM_Base_MspInit+0x170>)
 8002efc:	f043 0301 	orr.w	r3, r3, #1
 8002f00:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002f02:	4b4a      	ldr	r3, [pc, #296]	; (800302c <HAL_TIM_Base_MspInit+0x170>)
 8002f04:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002f06:	f003 0301 	and.w	r3, r3, #1
 8002f0a:	61fb      	str	r3, [r7, #28]
 8002f0c:	69fb      	ldr	r3, [r7, #28]
    /**TIM2 GPIO Configuration    
    PA0     ------> TIM2_CH1 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8002f0e:	2301      	movs	r3, #1
 8002f10:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002f12:	2302      	movs	r3, #2
 8002f14:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002f16:	2300      	movs	r3, #0
 8002f18:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002f1a:	2300      	movs	r3, #0
 8002f1c:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8002f1e:	2301      	movs	r3, #1
 8002f20:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002f22:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002f26:	4619      	mov	r1, r3
 8002f28:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002f2c:	f002 fc76 	bl	800581c <HAL_GPIO_Init>

    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 1, 0);
 8002f30:	2200      	movs	r2, #0
 8002f32:	2101      	movs	r1, #1
 8002f34:	201c      	movs	r0, #28
 8002f36:	f001 fd5c 	bl	80049f2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8002f3a:	201c      	movs	r0, #28
 8002f3c:	f001 fd73 	bl	8004a26 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(TIM1_TRG_COM_TIM17_IRQn);
  /* USER CODE BEGIN TIM17_MspInit 1 */

  /* USER CODE END TIM17_MspInit 1 */
  }
}
 8002f40:	e070      	b.n	8003024 <HAL_TIM_Base_MspInit+0x168>
  else if(tim_baseHandle->Instance==TIM5)
 8002f42:	687b      	ldr	r3, [r7, #4]
 8002f44:	681b      	ldr	r3, [r3, #0]
 8002f46:	4a3a      	ldr	r2, [pc, #232]	; (8003030 <HAL_TIM_Base_MspInit+0x174>)
 8002f48:	4293      	cmp	r3, r2
 8002f4a:	d10c      	bne.n	8002f66 <HAL_TIM_Base_MspInit+0xaa>
    __HAL_RCC_TIM5_CLK_ENABLE();
 8002f4c:	4b37      	ldr	r3, [pc, #220]	; (800302c <HAL_TIM_Base_MspInit+0x170>)
 8002f4e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002f50:	4a36      	ldr	r2, [pc, #216]	; (800302c <HAL_TIM_Base_MspInit+0x170>)
 8002f52:	f043 0308 	orr.w	r3, r3, #8
 8002f56:	6593      	str	r3, [r2, #88]	; 0x58
 8002f58:	4b34      	ldr	r3, [pc, #208]	; (800302c <HAL_TIM_Base_MspInit+0x170>)
 8002f5a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002f5c:	f003 0308 	and.w	r3, r3, #8
 8002f60:	61bb      	str	r3, [r7, #24]
 8002f62:	69bb      	ldr	r3, [r7, #24]
}
 8002f64:	e05e      	b.n	8003024 <HAL_TIM_Base_MspInit+0x168>
  else if(tim_baseHandle->Instance==TIM8)
 8002f66:	687b      	ldr	r3, [r7, #4]
 8002f68:	681b      	ldr	r3, [r3, #0]
 8002f6a:	4a32      	ldr	r2, [pc, #200]	; (8003034 <HAL_TIM_Base_MspInit+0x178>)
 8002f6c:	4293      	cmp	r3, r2
 8002f6e:	d10c      	bne.n	8002f8a <HAL_TIM_Base_MspInit+0xce>
    __HAL_RCC_TIM8_CLK_ENABLE();
 8002f70:	4b2e      	ldr	r3, [pc, #184]	; (800302c <HAL_TIM_Base_MspInit+0x170>)
 8002f72:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002f74:	4a2d      	ldr	r2, [pc, #180]	; (800302c <HAL_TIM_Base_MspInit+0x170>)
 8002f76:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8002f7a:	6613      	str	r3, [r2, #96]	; 0x60
 8002f7c:	4b2b      	ldr	r3, [pc, #172]	; (800302c <HAL_TIM_Base_MspInit+0x170>)
 8002f7e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002f80:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002f84:	617b      	str	r3, [r7, #20]
 8002f86:	697b      	ldr	r3, [r7, #20]
}
 8002f88:	e04c      	b.n	8003024 <HAL_TIM_Base_MspInit+0x168>
  else if(tim_baseHandle->Instance==TIM15)
 8002f8a:	687b      	ldr	r3, [r7, #4]
 8002f8c:	681b      	ldr	r3, [r3, #0]
 8002f8e:	4a2a      	ldr	r2, [pc, #168]	; (8003038 <HAL_TIM_Base_MspInit+0x17c>)
 8002f90:	4293      	cmp	r3, r2
 8002f92:	d114      	bne.n	8002fbe <HAL_TIM_Base_MspInit+0x102>
    __HAL_RCC_TIM15_CLK_ENABLE();
 8002f94:	4b25      	ldr	r3, [pc, #148]	; (800302c <HAL_TIM_Base_MspInit+0x170>)
 8002f96:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002f98:	4a24      	ldr	r2, [pc, #144]	; (800302c <HAL_TIM_Base_MspInit+0x170>)
 8002f9a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002f9e:	6613      	str	r3, [r2, #96]	; 0x60
 8002fa0:	4b22      	ldr	r3, [pc, #136]	; (800302c <HAL_TIM_Base_MspInit+0x170>)
 8002fa2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002fa4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002fa8:	613b      	str	r3, [r7, #16]
 8002faa:	693b      	ldr	r3, [r7, #16]
    HAL_NVIC_SetPriority(TIM1_BRK_TIM15_IRQn, 0, 0);
 8002fac:	2200      	movs	r2, #0
 8002fae:	2100      	movs	r1, #0
 8002fb0:	2018      	movs	r0, #24
 8002fb2:	f001 fd1e 	bl	80049f2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_BRK_TIM15_IRQn);
 8002fb6:	2018      	movs	r0, #24
 8002fb8:	f001 fd35 	bl	8004a26 <HAL_NVIC_EnableIRQ>
}
 8002fbc:	e032      	b.n	8003024 <HAL_TIM_Base_MspInit+0x168>
  else if(tim_baseHandle->Instance==TIM16)
 8002fbe:	687b      	ldr	r3, [r7, #4]
 8002fc0:	681b      	ldr	r3, [r3, #0]
 8002fc2:	4a1e      	ldr	r2, [pc, #120]	; (800303c <HAL_TIM_Base_MspInit+0x180>)
 8002fc4:	4293      	cmp	r3, r2
 8002fc6:	d114      	bne.n	8002ff2 <HAL_TIM_Base_MspInit+0x136>
    __HAL_RCC_TIM16_CLK_ENABLE();
 8002fc8:	4b18      	ldr	r3, [pc, #96]	; (800302c <HAL_TIM_Base_MspInit+0x170>)
 8002fca:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002fcc:	4a17      	ldr	r2, [pc, #92]	; (800302c <HAL_TIM_Base_MspInit+0x170>)
 8002fce:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002fd2:	6613      	str	r3, [r2, #96]	; 0x60
 8002fd4:	4b15      	ldr	r3, [pc, #84]	; (800302c <HAL_TIM_Base_MspInit+0x170>)
 8002fd6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002fd8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002fdc:	60fb      	str	r3, [r7, #12]
 8002fde:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_SetPriority(TIM1_UP_TIM16_IRQn, 1, 0);
 8002fe0:	2200      	movs	r2, #0
 8002fe2:	2101      	movs	r1, #1
 8002fe4:	2019      	movs	r0, #25
 8002fe6:	f001 fd04 	bl	80049f2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM16_IRQn);
 8002fea:	2019      	movs	r0, #25
 8002fec:	f001 fd1b 	bl	8004a26 <HAL_NVIC_EnableIRQ>
}
 8002ff0:	e018      	b.n	8003024 <HAL_TIM_Base_MspInit+0x168>
  else if(tim_baseHandle->Instance==TIM17)
 8002ff2:	687b      	ldr	r3, [r7, #4]
 8002ff4:	681b      	ldr	r3, [r3, #0]
 8002ff6:	4a12      	ldr	r2, [pc, #72]	; (8003040 <HAL_TIM_Base_MspInit+0x184>)
 8002ff8:	4293      	cmp	r3, r2
 8002ffa:	d113      	bne.n	8003024 <HAL_TIM_Base_MspInit+0x168>
    __HAL_RCC_TIM17_CLK_ENABLE();
 8002ffc:	4b0b      	ldr	r3, [pc, #44]	; (800302c <HAL_TIM_Base_MspInit+0x170>)
 8002ffe:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003000:	4a0a      	ldr	r2, [pc, #40]	; (800302c <HAL_TIM_Base_MspInit+0x170>)
 8003002:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003006:	6613      	str	r3, [r2, #96]	; 0x60
 8003008:	4b08      	ldr	r3, [pc, #32]	; (800302c <HAL_TIM_Base_MspInit+0x170>)
 800300a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800300c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003010:	60bb      	str	r3, [r7, #8]
 8003012:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM1_TRG_COM_TIM17_IRQn, 1, 0);
 8003014:	2200      	movs	r2, #0
 8003016:	2101      	movs	r1, #1
 8003018:	201a      	movs	r0, #26
 800301a:	f001 fcea 	bl	80049f2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_TRG_COM_TIM17_IRQn);
 800301e:	201a      	movs	r0, #26
 8003020:	f001 fd01 	bl	8004a26 <HAL_NVIC_EnableIRQ>
}
 8003024:	bf00      	nop
 8003026:	3738      	adds	r7, #56	; 0x38
 8003028:	46bd      	mov	sp, r7
 800302a:	bd80      	pop	{r7, pc}
 800302c:	40021000 	.word	0x40021000
 8003030:	40000c00 	.word	0x40000c00
 8003034:	40013400 	.word	0x40013400
 8003038:	40014000 	.word	0x40014000
 800303c:	40014400 	.word	0x40014400
 8003040:	40014800 	.word	0x40014800

08003044 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8003044:	480d      	ldr	r0, [pc, #52]	; (800307c <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8003046:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8003048:	480d      	ldr	r0, [pc, #52]	; (8003080 <LoopForever+0x6>)
  ldr r1, =_edata
 800304a:	490e      	ldr	r1, [pc, #56]	; (8003084 <LoopForever+0xa>)
  ldr r2, =_sidata
 800304c:	4a0e      	ldr	r2, [pc, #56]	; (8003088 <LoopForever+0xe>)
  movs r3, #0
 800304e:	2300      	movs	r3, #0
  b	LoopCopyDataInit
 8003050:	e002      	b.n	8003058 <LoopCopyDataInit>

08003052 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8003052:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8003054:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8003056:	3304      	adds	r3, #4

08003058 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8003058:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800305a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800305c:	d3f9      	bcc.n	8003052 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800305e:	4a0b      	ldr	r2, [pc, #44]	; (800308c <LoopForever+0x12>)
  ldr r4, =_ebss
 8003060:	4c0b      	ldr	r4, [pc, #44]	; (8003090 <LoopForever+0x16>)
  movs r3, #0
 8003062:	2300      	movs	r3, #0
  b LoopFillZerobss
 8003064:	e001      	b.n	800306a <LoopFillZerobss>

08003066 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8003066:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8003068:	3204      	adds	r2, #4

0800306a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800306a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800306c:	d3fb      	bcc.n	8003066 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 800306e:	f7ff fc83 	bl	8002978 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8003072:	f006 fb95 	bl	80097a0 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8003076:	f7ff f8c7 	bl	8002208 <main>

0800307a <LoopForever>:

LoopForever:
    b LoopForever
 800307a:	e7fe      	b.n	800307a <LoopForever>
  ldr   r0, =_estack
 800307c:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8003080:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8003084:	200010c8 	.word	0x200010c8
  ldr r2, =_sidata
 8003088:	0800ad38 	.word	0x0800ad38
  ldr r2, =_sbss
 800308c:	200010c8 	.word	0x200010c8
  ldr r4, =_ebss
 8003090:	20001568 	.word	0x20001568

08003094 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8003094:	e7fe      	b.n	8003094 <ADC1_2_IRQHandler>

08003096 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8003096:	b580      	push	{r7, lr}
 8003098:	b082      	sub	sp, #8
 800309a:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 800309c:	2300      	movs	r3, #0
 800309e:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80030a0:	2003      	movs	r0, #3
 80030a2:	f001 fc9b 	bl	80049dc <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80030a6:	2000      	movs	r0, #0
 80030a8:	f000 f80e 	bl	80030c8 <HAL_InitTick>
 80030ac:	4603      	mov	r3, r0
 80030ae:	2b00      	cmp	r3, #0
 80030b0:	d002      	beq.n	80030b8 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 80030b2:	2301      	movs	r3, #1
 80030b4:	71fb      	strb	r3, [r7, #7]
 80030b6:	e001      	b.n	80030bc <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 80030b8:	f7ff fa90 	bl	80025dc <HAL_MspInit>
  }

  /* Return function status */
  return status;
 80030bc:	79fb      	ldrb	r3, [r7, #7]

}
 80030be:	4618      	mov	r0, r3
 80030c0:	3708      	adds	r7, #8
 80030c2:	46bd      	mov	sp, r7
 80030c4:	bd80      	pop	{r7, pc}
	...

080030c8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80030c8:	b580      	push	{r7, lr}
 80030ca:	b084      	sub	sp, #16
 80030cc:	af00      	add	r7, sp, #0
 80030ce:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 80030d0:	2300      	movs	r3, #0
 80030d2:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 80030d4:	4b16      	ldr	r3, [pc, #88]	; (8003130 <HAL_InitTick+0x68>)
 80030d6:	681b      	ldr	r3, [r3, #0]
 80030d8:	2b00      	cmp	r3, #0
 80030da:	d022      	beq.n	8003122 <HAL_InitTick+0x5a>
  {
    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 80030dc:	4b15      	ldr	r3, [pc, #84]	; (8003134 <HAL_InitTick+0x6c>)
 80030de:	681a      	ldr	r2, [r3, #0]
 80030e0:	4b13      	ldr	r3, [pc, #76]	; (8003130 <HAL_InitTick+0x68>)
 80030e2:	681b      	ldr	r3, [r3, #0]
 80030e4:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 80030e8:	fbb1 f3f3 	udiv	r3, r1, r3
 80030ec:	fbb2 f3f3 	udiv	r3, r2, r3
 80030f0:	4618      	mov	r0, r3
 80030f2:	f001 fca6 	bl	8004a42 <HAL_SYSTICK_Config>
 80030f6:	4603      	mov	r3, r0
 80030f8:	2b00      	cmp	r3, #0
 80030fa:	d10f      	bne.n	800311c <HAL_InitTick+0x54>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80030fc:	687b      	ldr	r3, [r7, #4]
 80030fe:	2b0f      	cmp	r3, #15
 8003100:	d809      	bhi.n	8003116 <HAL_InitTick+0x4e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8003102:	2200      	movs	r2, #0
 8003104:	6879      	ldr	r1, [r7, #4]
 8003106:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800310a:	f001 fc72 	bl	80049f2 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 800310e:	4a0a      	ldr	r2, [pc, #40]	; (8003138 <HAL_InitTick+0x70>)
 8003110:	687b      	ldr	r3, [r7, #4]
 8003112:	6013      	str	r3, [r2, #0]
 8003114:	e007      	b.n	8003126 <HAL_InitTick+0x5e>
      }
      else
      {
        status = HAL_ERROR;
 8003116:	2301      	movs	r3, #1
 8003118:	73fb      	strb	r3, [r7, #15]
 800311a:	e004      	b.n	8003126 <HAL_InitTick+0x5e>
      }
    }
    else
    {
      status = HAL_ERROR;
 800311c:	2301      	movs	r3, #1
 800311e:	73fb      	strb	r3, [r7, #15]
 8003120:	e001      	b.n	8003126 <HAL_InitTick+0x5e>
    }
  }
  else
  {
    status = HAL_ERROR;
 8003122:	2301      	movs	r3, #1
 8003124:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8003126:	7bfb      	ldrb	r3, [r7, #15]
}
 8003128:	4618      	mov	r0, r3
 800312a:	3710      	adds	r7, #16
 800312c:	46bd      	mov	sp, r7
 800312e:	bd80      	pop	{r7, pc}
 8003130:	20000018 	.word	0x20000018
 8003134:	20000010 	.word	0x20000010
 8003138:	20000014 	.word	0x20000014

0800313c <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800313c:	b480      	push	{r7}
 800313e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8003140:	4b05      	ldr	r3, [pc, #20]	; (8003158 <HAL_IncTick+0x1c>)
 8003142:	681a      	ldr	r2, [r3, #0]
 8003144:	4b05      	ldr	r3, [pc, #20]	; (800315c <HAL_IncTick+0x20>)
 8003146:	681b      	ldr	r3, [r3, #0]
 8003148:	4413      	add	r3, r2
 800314a:	4a03      	ldr	r2, [pc, #12]	; (8003158 <HAL_IncTick+0x1c>)
 800314c:	6013      	str	r3, [r2, #0]
}
 800314e:	bf00      	nop
 8003150:	46bd      	mov	sp, r7
 8003152:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003156:	4770      	bx	lr
 8003158:	20001560 	.word	0x20001560
 800315c:	20000018 	.word	0x20000018

08003160 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8003160:	b480      	push	{r7}
 8003162:	af00      	add	r7, sp, #0
  return uwTick;
 8003164:	4b03      	ldr	r3, [pc, #12]	; (8003174 <HAL_GetTick+0x14>)
 8003166:	681b      	ldr	r3, [r3, #0]
}
 8003168:	4618      	mov	r0, r3
 800316a:	46bd      	mov	sp, r7
 800316c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003170:	4770      	bx	lr
 8003172:	bf00      	nop
 8003174:	20001560 	.word	0x20001560

08003178 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8003178:	b580      	push	{r7, lr}
 800317a:	b084      	sub	sp, #16
 800317c:	af00      	add	r7, sp, #0
 800317e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8003180:	f7ff ffee 	bl	8003160 <HAL_GetTick>
 8003184:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8003186:	687b      	ldr	r3, [r7, #4]
 8003188:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800318a:	68fb      	ldr	r3, [r7, #12]
 800318c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003190:	d004      	beq.n	800319c <HAL_Delay+0x24>
  {
    wait += (uint32_t)(uwTickFreq);
 8003192:	4b09      	ldr	r3, [pc, #36]	; (80031b8 <HAL_Delay+0x40>)
 8003194:	681b      	ldr	r3, [r3, #0]
 8003196:	68fa      	ldr	r2, [r7, #12]
 8003198:	4413      	add	r3, r2
 800319a:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800319c:	bf00      	nop
 800319e:	f7ff ffdf 	bl	8003160 <HAL_GetTick>
 80031a2:	4602      	mov	r2, r0
 80031a4:	68bb      	ldr	r3, [r7, #8]
 80031a6:	1ad3      	subs	r3, r2, r3
 80031a8:	68fa      	ldr	r2, [r7, #12]
 80031aa:	429a      	cmp	r2, r3
 80031ac:	d8f7      	bhi.n	800319e <HAL_Delay+0x26>
  {
  }
}
 80031ae:	bf00      	nop
 80031b0:	3710      	adds	r7, #16
 80031b2:	46bd      	mov	sp, r7
 80031b4:	bd80      	pop	{r7, pc}
 80031b6:	bf00      	nop
 80031b8:	20000018 	.word	0x20000018

080031bc <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 80031bc:	b480      	push	{r7}
 80031be:	b083      	sub	sp, #12
 80031c0:	af00      	add	r7, sp, #0
 80031c2:	6078      	str	r0, [r7, #4]
 80031c4:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 80031c6:	687b      	ldr	r3, [r7, #4]
 80031c8:	689b      	ldr	r3, [r3, #8]
 80031ca:	f423 127c 	bic.w	r2, r3, #4128768	; 0x3f0000
 80031ce:	683b      	ldr	r3, [r7, #0]
 80031d0:	431a      	orrs	r2, r3
 80031d2:	687b      	ldr	r3, [r7, #4]
 80031d4:	609a      	str	r2, [r3, #8]
}
 80031d6:	bf00      	nop
 80031d8:	370c      	adds	r7, #12
 80031da:	46bd      	mov	sp, r7
 80031dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031e0:	4770      	bx	lr

080031e2 <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 80031e2:	b480      	push	{r7}
 80031e4:	b083      	sub	sp, #12
 80031e6:	af00      	add	r7, sp, #0
 80031e8:	6078      	str	r0, [r7, #4]
 80031ea:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL, PathInternal);
 80031ec:	687b      	ldr	r3, [r7, #4]
 80031ee:	689b      	ldr	r3, [r3, #8]
 80031f0:	f023 72e0 	bic.w	r2, r3, #29360128	; 0x1c00000
 80031f4:	683b      	ldr	r3, [r7, #0]
 80031f6:	431a      	orrs	r2, r3
 80031f8:	687b      	ldr	r3, [r7, #4]
 80031fa:	609a      	str	r2, [r3, #8]
}
 80031fc:	bf00      	nop
 80031fe:	370c      	adds	r7, #12
 8003200:	46bd      	mov	sp, r7
 8003202:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003206:	4770      	bx	lr

08003208 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8003208:	b480      	push	{r7}
 800320a:	b083      	sub	sp, #12
 800320c:	af00      	add	r7, sp, #0
 800320e:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL));
 8003210:	687b      	ldr	r3, [r7, #4]
 8003212:	689b      	ldr	r3, [r3, #8]
 8003214:	f003 73e0 	and.w	r3, r3, #29360128	; 0x1c00000
}
 8003218:	4618      	mov	r0, r3
 800321a:	370c      	adds	r7, #12
 800321c:	46bd      	mov	sp, r7
 800321e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003222:	4770      	bx	lr

08003224 <LL_ADC_SetOffset>:
  *             Other channels are slow channels  allows: 6.5 (sampling) + 12.5 (conversion) = 19 ADC clock cycles (fADC) to convert in 12-bit resolution.\n
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 8003224:	b490      	push	{r4, r7}
 8003226:	b084      	sub	sp, #16
 8003228:	af00      	add	r7, sp, #0
 800322a:	60f8      	str	r0, [r7, #12]
 800322c:	60b9      	str	r1, [r7, #8]
 800322e:	607a      	str	r2, [r7, #4]
 8003230:	603b      	str	r3, [r7, #0]
  register __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8003232:	68fb      	ldr	r3, [r7, #12]
 8003234:	3360      	adds	r3, #96	; 0x60
 8003236:	461a      	mov	r2, r3
 8003238:	68bb      	ldr	r3, [r7, #8]
 800323a:	009b      	lsls	r3, r3, #2
 800323c:	4413      	add	r3, r2
 800323e:	461c      	mov	r4, r3

  MODIFY_REG(*preg,
 8003240:	6822      	ldr	r2, [r4, #0]
 8003242:	4b08      	ldr	r3, [pc, #32]	; (8003264 <LL_ADC_SetOffset+0x40>)
 8003244:	4013      	ands	r3, r2
 8003246:	687a      	ldr	r2, [r7, #4]
 8003248:	f002 41f8 	and.w	r1, r2, #2080374784	; 0x7c000000
 800324c:	683a      	ldr	r2, [r7, #0]
 800324e:	430a      	orrs	r2, r1
 8003250:	4313      	orrs	r3, r2
 8003252:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8003256:	6023      	str	r3, [r4, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 8003258:	bf00      	nop
 800325a:	3710      	adds	r7, #16
 800325c:	46bd      	mov	sp, r7
 800325e:	bc90      	pop	{r4, r7}
 8003260:	4770      	bx	lr
 8003262:	bf00      	nop
 8003264:	03fff000 	.word	0x03fff000

08003268 <LL_ADC_GetOffsetChannel>:
  *         (1, 2, 3, 4, 5, 7) For ADC channel read back from ADC register,
  *                      comparison with internal channel parameter to be done
  *                      using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(ADC_TypeDef *ADCx, uint32_t Offsety)
{
 8003268:	b490      	push	{r4, r7}
 800326a:	b082      	sub	sp, #8
 800326c:	af00      	add	r7, sp, #0
 800326e:	6078      	str	r0, [r7, #4]
 8003270:	6039      	str	r1, [r7, #0]
  register const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8003272:	687b      	ldr	r3, [r7, #4]
 8003274:	3360      	adds	r3, #96	; 0x60
 8003276:	461a      	mov	r2, r3
 8003278:	683b      	ldr	r3, [r7, #0]
 800327a:	009b      	lsls	r3, r3, #2
 800327c:	4413      	add	r3, r2
 800327e:	461c      	mov	r4, r3

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8003280:	6823      	ldr	r3, [r4, #0]
 8003282:	f003 43f8 	and.w	r3, r3, #2080374784	; 0x7c000000
}
 8003286:	4618      	mov	r0, r3
 8003288:	3708      	adds	r7, #8
 800328a:	46bd      	mov	sp, r7
 800328c:	bc90      	pop	{r4, r7}
 800328e:	4770      	bx	lr

08003290 <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 8003290:	b490      	push	{r4, r7}
 8003292:	b084      	sub	sp, #16
 8003294:	af00      	add	r7, sp, #0
 8003296:	60f8      	str	r0, [r7, #12]
 8003298:	60b9      	str	r1, [r7, #8]
 800329a:	607a      	str	r2, [r7, #4]
  register __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 800329c:	68fb      	ldr	r3, [r7, #12]
 800329e:	3360      	adds	r3, #96	; 0x60
 80032a0:	461a      	mov	r2, r3
 80032a2:	68bb      	ldr	r3, [r7, #8]
 80032a4:	009b      	lsls	r3, r3, #2
 80032a6:	4413      	add	r3, r2
 80032a8:	461c      	mov	r4, r3

  MODIFY_REG(*preg,
 80032aa:	6823      	ldr	r3, [r4, #0]
 80032ac:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 80032b0:	687b      	ldr	r3, [r7, #4]
 80032b2:	4313      	orrs	r3, r2
 80032b4:	6023      	str	r3, [r4, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 80032b6:	bf00      	nop
 80032b8:	3710      	adds	r7, #16
 80032ba:	46bd      	mov	sp, r7
 80032bc:	bc90      	pop	{r4, r7}
 80032be:	4770      	bx	lr

080032c0 <LL_ADC_SetOffsetSign>:
  *         @arg @ref LL_ADC_OFFSET_SIGN_NEGATIVE
  *         @arg @ref LL_ADC_OFFSET_SIGN_POSITIVE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSign(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSign)
{
 80032c0:	b490      	push	{r4, r7}
 80032c2:	b084      	sub	sp, #16
 80032c4:	af00      	add	r7, sp, #0
 80032c6:	60f8      	str	r0, [r7, #12]
 80032c8:	60b9      	str	r1, [r7, #8]
 80032ca:	607a      	str	r2, [r7, #4]
  register __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80032cc:	68fb      	ldr	r3, [r7, #12]
 80032ce:	3360      	adds	r3, #96	; 0x60
 80032d0:	461a      	mov	r2, r3
 80032d2:	68bb      	ldr	r3, [r7, #8]
 80032d4:	009b      	lsls	r3, r3, #2
 80032d6:	4413      	add	r3, r2
 80032d8:	461c      	mov	r4, r3

  MODIFY_REG(*preg,
 80032da:	6823      	ldr	r3, [r4, #0]
 80032dc:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 80032e0:	687b      	ldr	r3, [r7, #4]
 80032e2:	4313      	orrs	r3, r2
 80032e4:	6023      	str	r3, [r4, #0]
             ADC_OFR1_OFFSETPOS,
             OffsetSign);
}
 80032e6:	bf00      	nop
 80032e8:	3710      	adds	r7, #16
 80032ea:	46bd      	mov	sp, r7
 80032ec:	bc90      	pop	{r4, r7}
 80032ee:	4770      	bx	lr

080032f0 <LL_ADC_SetOffsetSaturation>:
  *         @arg @ref LL_ADC_OFFSET_SATURATION_ENABLE
  *         @arg @ref LL_ADC_OFFSET_SATURATION_DISABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSaturation(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSaturation)
{
 80032f0:	b490      	push	{r4, r7}
 80032f2:	b084      	sub	sp, #16
 80032f4:	af00      	add	r7, sp, #0
 80032f6:	60f8      	str	r0, [r7, #12]
 80032f8:	60b9      	str	r1, [r7, #8]
 80032fa:	607a      	str	r2, [r7, #4]
  register __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80032fc:	68fb      	ldr	r3, [r7, #12]
 80032fe:	3360      	adds	r3, #96	; 0x60
 8003300:	461a      	mov	r2, r3
 8003302:	68bb      	ldr	r3, [r7, #8]
 8003304:	009b      	lsls	r3, r3, #2
 8003306:	4413      	add	r3, r2
 8003308:	461c      	mov	r4, r3

  MODIFY_REG(*preg,
 800330a:	6823      	ldr	r3, [r4, #0]
 800330c:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 8003310:	687b      	ldr	r3, [r7, #4]
 8003312:	4313      	orrs	r3, r2
 8003314:	6023      	str	r3, [r4, #0]
             ADC_OFR1_SATEN,
             OffsetSaturation);
}
 8003316:	bf00      	nop
 8003318:	3710      	adds	r7, #16
 800331a:	46bd      	mov	sp, r7
 800331c:	bc90      	pop	{r4, r7}
 800331e:	4770      	bx	lr

08003320 <LL_ADC_SetSamplingTimeCommonConfig>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_DEFAULT
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetSamplingTimeCommonConfig(ADC_TypeDef *ADCx, uint32_t SamplingTimeCommonConfig)
{
 8003320:	b480      	push	{r7}
 8003322:	b083      	sub	sp, #12
 8003324:	af00      	add	r7, sp, #0
 8003326:	6078      	str	r0, [r7, #4]
 8003328:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->SMPR1, ADC_SMPR1_SMPPLUS, SamplingTimeCommonConfig);
 800332a:	687b      	ldr	r3, [r7, #4]
 800332c:	695b      	ldr	r3, [r3, #20]
 800332e:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8003332:	683b      	ldr	r3, [r7, #0]
 8003334:	431a      	orrs	r2, r3
 8003336:	687b      	ldr	r3, [r7, #4]
 8003338:	615a      	str	r2, [r3, #20]
}
 800333a:	bf00      	nop
 800333c:	370c      	adds	r7, #12
 800333e:	46bd      	mov	sp, r7
 8003340:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003344:	4770      	bx	lr

08003346 <LL_ADC_REG_SetSequencerRanks>:
  *         (8) On STM32G4, fast channel allows: 2.5 (sampling) + 12.5 (conversion) = 15 ADC clock cycles (fADC) to convert in 12-bit resolution.
  *             Other channels are slow channels  allows: 6.5 (sampling) + 12.5 (conversion) = 19 ADC clock cycles (fADC) to convert in 12-bit resolution.\n
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8003346:	b490      	push	{r4, r7}
 8003348:	b084      	sub	sp, #16
 800334a:	af00      	add	r7, sp, #0
 800334c:	60f8      	str	r0, [r7, #12]
 800334e:	60b9      	str	r1, [r7, #8]
 8003350:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  register __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 8003352:	68fb      	ldr	r3, [r7, #12]
 8003354:	3330      	adds	r3, #48	; 0x30
 8003356:	461a      	mov	r2, r3
 8003358:	68bb      	ldr	r3, [r7, #8]
 800335a:	0a1b      	lsrs	r3, r3, #8
 800335c:	009b      	lsls	r3, r3, #2
 800335e:	f003 030c 	and.w	r3, r3, #12
 8003362:	4413      	add	r3, r2
 8003364:	461c      	mov	r4, r3

  MODIFY_REG(*preg,
 8003366:	6822      	ldr	r2, [r4, #0]
 8003368:	68bb      	ldr	r3, [r7, #8]
 800336a:	f003 031f 	and.w	r3, r3, #31
 800336e:	211f      	movs	r1, #31
 8003370:	fa01 f303 	lsl.w	r3, r1, r3
 8003374:	43db      	mvns	r3, r3
 8003376:	401a      	ands	r2, r3
 8003378:	687b      	ldr	r3, [r7, #4]
 800337a:	0e9b      	lsrs	r3, r3, #26
 800337c:	f003 011f 	and.w	r1, r3, #31
 8003380:	68bb      	ldr	r3, [r7, #8]
 8003382:	f003 031f 	and.w	r3, r3, #31
 8003386:	fa01 f303 	lsl.w	r3, r1, r3
 800338a:	4313      	orrs	r3, r2
 800338c:	6023      	str	r3, [r4, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS) << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 800338e:	bf00      	nop
 8003390:	3710      	adds	r7, #16
 8003392:	46bd      	mov	sp, r7
 8003394:	bc90      	pop	{r4, r7}
 8003396:	4770      	bx	lr

08003398 <LL_ADC_SetChannelSamplingTime>:
  *             can be replaced by 3.5 ADC clock cycles.
  *             Refer to function @ref LL_ADC_SetSamplingTimeCommonConfig().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 8003398:	b490      	push	{r4, r7}
 800339a:	b084      	sub	sp, #16
 800339c:	af00      	add	r7, sp, #0
 800339e:	60f8      	str	r0, [r7, #12]
 80033a0:	60b9      	str	r1, [r7, #8]
 80033a2:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  register __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 80033a4:	68fb      	ldr	r3, [r7, #12]
 80033a6:	3314      	adds	r3, #20
 80033a8:	461a      	mov	r2, r3
 80033aa:	68bb      	ldr	r3, [r7, #8]
 80033ac:	0e5b      	lsrs	r3, r3, #25
 80033ae:	009b      	lsls	r3, r3, #2
 80033b0:	f003 0304 	and.w	r3, r3, #4
 80033b4:	4413      	add	r3, r2
 80033b6:	461c      	mov	r4, r3

  MODIFY_REG(*preg,
 80033b8:	6822      	ldr	r2, [r4, #0]
 80033ba:	68bb      	ldr	r3, [r7, #8]
 80033bc:	0d1b      	lsrs	r3, r3, #20
 80033be:	f003 031f 	and.w	r3, r3, #31
 80033c2:	2107      	movs	r1, #7
 80033c4:	fa01 f303 	lsl.w	r3, r1, r3
 80033c8:	43db      	mvns	r3, r3
 80033ca:	401a      	ands	r2, r3
 80033cc:	68bb      	ldr	r3, [r7, #8]
 80033ce:	0d1b      	lsrs	r3, r3, #20
 80033d0:	f003 031f 	and.w	r3, r3, #31
 80033d4:	6879      	ldr	r1, [r7, #4]
 80033d6:	fa01 f303 	lsl.w	r3, r1, r3
 80033da:	4313      	orrs	r3, r2
 80033dc:	6023      	str	r3, [r4, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 80033de:	bf00      	nop
 80033e0:	3710      	adds	r7, #16
 80033e2:	46bd      	mov	sp, r7
 80033e4:	bc90      	pop	{r4, r7}
 80033e6:	4770      	bx	lr

080033e8 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 80033e8:	b480      	push	{r7}
 80033ea:	b085      	sub	sp, #20
 80033ec:	af00      	add	r7, sp, #0
 80033ee:	60f8      	str	r0, [r7, #12]
 80033f0:	60b9      	str	r1, [r7, #8]
 80033f2:	607a      	str	r2, [r7, #4]
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 80033f4:	68fb      	ldr	r3, [r7, #12]
 80033f6:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 80033fa:	68bb      	ldr	r3, [r7, #8]
 80033fc:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003400:	43db      	mvns	r3, r3
 8003402:	401a      	ands	r2, r3
 8003404:	687b      	ldr	r3, [r7, #4]
 8003406:	f003 0318 	and.w	r3, r3, #24
 800340a:	4908      	ldr	r1, [pc, #32]	; (800342c <LL_ADC_SetChannelSingleDiff+0x44>)
 800340c:	40d9      	lsrs	r1, r3
 800340e:	68bb      	ldr	r3, [r7, #8]
 8003410:	400b      	ands	r3, r1
 8003412:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003416:	431a      	orrs	r2, r3
 8003418:	68fb      	ldr	r3, [r7, #12]
 800341a:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK) & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
}
 800341e:	bf00      	nop
 8003420:	3714      	adds	r7, #20
 8003422:	46bd      	mov	sp, r7
 8003424:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003428:	4770      	bx	lr
 800342a:	bf00      	nop
 800342c:	0007ffff 	.word	0x0007ffff

08003430 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 8003430:	b480      	push	{r7}
 8003432:	b083      	sub	sp, #12
 8003434:	af00      	add	r7, sp, #0
 8003436:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8003438:	687b      	ldr	r3, [r7, #4]
 800343a:	689b      	ldr	r3, [r3, #8]
 800343c:	f023 4320 	bic.w	r3, r3, #2684354560	; 0xa0000000
 8003440:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8003444:	687a      	ldr	r2, [r7, #4]
 8003446:	6093      	str	r3, [r2, #8]
}
 8003448:	bf00      	nop
 800344a:	370c      	adds	r7, #12
 800344c:	46bd      	mov	sp, r7
 800344e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003452:	4770      	bx	lr

08003454 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(ADC_TypeDef *ADCx)
{
 8003454:	b480      	push	{r7}
 8003456:	b083      	sub	sp, #12
 8003458:	af00      	add	r7, sp, #0
 800345a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 800345c:	687b      	ldr	r3, [r7, #4]
 800345e:	689b      	ldr	r3, [r3, #8]
 8003460:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8003464:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003468:	d101      	bne.n	800346e <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 800346a:	2301      	movs	r3, #1
 800346c:	e000      	b.n	8003470 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 800346e:	2300      	movs	r3, #0
}
 8003470:	4618      	mov	r0, r3
 8003472:	370c      	adds	r7, #12
 8003474:	46bd      	mov	sp, r7
 8003476:	f85d 7b04 	ldr.w	r7, [sp], #4
 800347a:	4770      	bx	lr

0800347c <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 800347c:	b480      	push	{r7}
 800347e:	b083      	sub	sp, #12
 8003480:	af00      	add	r7, sp, #0
 8003482:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8003484:	687b      	ldr	r3, [r7, #4]
 8003486:	689b      	ldr	r3, [r3, #8]
 8003488:	f023 4310 	bic.w	r3, r3, #2415919104	; 0x90000000
 800348c:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8003490:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8003494:	687b      	ldr	r3, [r7, #4]
 8003496:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8003498:	bf00      	nop
 800349a:	370c      	adds	r7, #12
 800349c:	46bd      	mov	sp, r7
 800349e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034a2:	4770      	bx	lr

080034a4 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
{
 80034a4:	b480      	push	{r7}
 80034a6:	b083      	sub	sp, #12
 80034a8:	af00      	add	r7, sp, #0
 80034aa:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 80034ac:	687b      	ldr	r3, [r7, #4]
 80034ae:	689b      	ldr	r3, [r3, #8]
 80034b0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80034b4:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80034b8:	d101      	bne.n	80034be <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 80034ba:	2301      	movs	r3, #1
 80034bc:	e000      	b.n	80034c0 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 80034be:	2300      	movs	r3, #0
}
 80034c0:	4618      	mov	r0, r3
 80034c2:	370c      	adds	r7, #12
 80034c4:	46bd      	mov	sp, r7
 80034c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034ca:	4770      	bx	lr

080034cc <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
 80034cc:	b480      	push	{r7}
 80034ce:	b083      	sub	sp, #12
 80034d0:	af00      	add	r7, sp, #0
 80034d2:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 80034d4:	687b      	ldr	r3, [r7, #4]
 80034d6:	689b      	ldr	r3, [r3, #8]
 80034d8:	f003 0301 	and.w	r3, r3, #1
 80034dc:	2b01      	cmp	r3, #1
 80034de:	d101      	bne.n	80034e4 <LL_ADC_IsEnabled+0x18>
 80034e0:	2301      	movs	r3, #1
 80034e2:	e000      	b.n	80034e6 <LL_ADC_IsEnabled+0x1a>
 80034e4:	2300      	movs	r3, #0
}
 80034e6:	4618      	mov	r0, r3
 80034e8:	370c      	adds	r7, #12
 80034ea:	46bd      	mov	sp, r7
 80034ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034f0:	4770      	bx	lr

080034f2 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 80034f2:	b480      	push	{r7}
 80034f4:	b083      	sub	sp, #12
 80034f6:	af00      	add	r7, sp, #0
 80034f8:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 80034fa:	687b      	ldr	r3, [r7, #4]
 80034fc:	689b      	ldr	r3, [r3, #8]
 80034fe:	f003 0304 	and.w	r3, r3, #4
 8003502:	2b04      	cmp	r3, #4
 8003504:	d101      	bne.n	800350a <LL_ADC_REG_IsConversionOngoing+0x18>
 8003506:	2301      	movs	r3, #1
 8003508:	e000      	b.n	800350c <LL_ADC_REG_IsConversionOngoing+0x1a>
 800350a:	2300      	movs	r3, #0
}
 800350c:	4618      	mov	r0, r3
 800350e:	370c      	adds	r7, #12
 8003510:	46bd      	mov	sp, r7
 8003512:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003516:	4770      	bx	lr

08003518 <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8003518:	b480      	push	{r7}
 800351a:	b083      	sub	sp, #12
 800351c:	af00      	add	r7, sp, #0
 800351e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8003520:	687b      	ldr	r3, [r7, #4]
 8003522:	689b      	ldr	r3, [r3, #8]
 8003524:	f003 0308 	and.w	r3, r3, #8
 8003528:	2b08      	cmp	r3, #8
 800352a:	d101      	bne.n	8003530 <LL_ADC_INJ_IsConversionOngoing+0x18>
 800352c:	2301      	movs	r3, #1
 800352e:	e000      	b.n	8003532 <LL_ADC_INJ_IsConversionOngoing+0x1a>
 8003530:	2300      	movs	r3, #0
}
 8003532:	4618      	mov	r0, r3
 8003534:	370c      	adds	r7, #12
 8003536:	46bd      	mov	sp, r7
 8003538:	f85d 7b04 	ldr.w	r7, [sp], #4
 800353c:	4770      	bx	lr
	...

08003540 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8003540:	b590      	push	{r4, r7, lr}
 8003542:	b089      	sub	sp, #36	; 0x24
 8003544:	af00      	add	r7, sp, #0
 8003546:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003548:	2300      	movs	r3, #0
 800354a:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpCFGR;
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 800354c:	2300      	movs	r3, #0
 800354e:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;

  /* Check ADC handle */
  if (hadc == NULL)
 8003550:	687b      	ldr	r3, [r7, #4]
 8003552:	2b00      	cmp	r3, #0
 8003554:	d101      	bne.n	800355a <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 8003556:	2301      	movs	r3, #1
 8003558:	e1ad      	b.n	80038b6 <HAL_ADC_Init+0x376>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 800355a:	687b      	ldr	r3, [r7, #4]
 800355c:	695b      	ldr	r3, [r3, #20]
 800355e:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8003560:	687b      	ldr	r3, [r7, #4]
 8003562:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003564:	2b00      	cmp	r3, #0
 8003566:	d109      	bne.n	800357c <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8003568:	6878      	ldr	r0, [r7, #4]
 800356a:	f7fe f853 	bl	8001614 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 800356e:	687b      	ldr	r3, [r7, #4]
 8003570:	2200      	movs	r2, #0
 8003572:	661a      	str	r2, [r3, #96]	; 0x60

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8003574:	687b      	ldr	r3, [r7, #4]
 8003576:	2200      	movs	r2, #0
 8003578:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 800357c:	687b      	ldr	r3, [r7, #4]
 800357e:	681b      	ldr	r3, [r3, #0]
 8003580:	4618      	mov	r0, r3
 8003582:	f7ff ff67 	bl	8003454 <LL_ADC_IsDeepPowerDownEnabled>
 8003586:	4603      	mov	r3, r0
 8003588:	2b00      	cmp	r3, #0
 800358a:	d004      	beq.n	8003596 <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 800358c:	687b      	ldr	r3, [r7, #4]
 800358e:	681b      	ldr	r3, [r3, #0]
 8003590:	4618      	mov	r0, r3
 8003592:	f7ff ff4d 	bl	8003430 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8003596:	687b      	ldr	r3, [r7, #4]
 8003598:	681b      	ldr	r3, [r3, #0]
 800359a:	4618      	mov	r0, r3
 800359c:	f7ff ff82 	bl	80034a4 <LL_ADC_IsInternalRegulatorEnabled>
 80035a0:	4603      	mov	r3, r0
 80035a2:	2b00      	cmp	r3, #0
 80035a4:	d113      	bne.n	80035ce <HAL_ADC_Init+0x8e>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 80035a6:	687b      	ldr	r3, [r7, #4]
 80035a8:	681b      	ldr	r3, [r3, #0]
 80035aa:	4618      	mov	r0, r3
 80035ac:	f7ff ff66 	bl	800347c <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * (SystemCoreClock / (100000UL * 2UL)));
 80035b0:	4b9e      	ldr	r3, [pc, #632]	; (800382c <HAL_ADC_Init+0x2ec>)
 80035b2:	681b      	ldr	r3, [r3, #0]
 80035b4:	099b      	lsrs	r3, r3, #6
 80035b6:	4a9e      	ldr	r2, [pc, #632]	; (8003830 <HAL_ADC_Init+0x2f0>)
 80035b8:	fba2 2303 	umull	r2, r3, r2, r3
 80035bc:	099b      	lsrs	r3, r3, #6
 80035be:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 80035c0:	e002      	b.n	80035c8 <HAL_ADC_Init+0x88>
    {
      wait_loop_index--;
 80035c2:	68bb      	ldr	r3, [r7, #8]
 80035c4:	3b01      	subs	r3, #1
 80035c6:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 80035c8:	68bb      	ldr	r3, [r7, #8]
 80035ca:	2b00      	cmp	r3, #0
 80035cc:	d1f9      	bne.n	80035c2 <HAL_ADC_Init+0x82>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 80035ce:	687b      	ldr	r3, [r7, #4]
 80035d0:	681b      	ldr	r3, [r3, #0]
 80035d2:	4618      	mov	r0, r3
 80035d4:	f7ff ff66 	bl	80034a4 <LL_ADC_IsInternalRegulatorEnabled>
 80035d8:	4603      	mov	r3, r0
 80035da:	2b00      	cmp	r3, #0
 80035dc:	d10d      	bne.n	80035fa <HAL_ADC_Init+0xba>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80035de:	687b      	ldr	r3, [r7, #4]
 80035e0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80035e2:	f043 0210 	orr.w	r2, r3, #16
 80035e6:	687b      	ldr	r3, [r7, #4]
 80035e8:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80035ea:	687b      	ldr	r3, [r7, #4]
 80035ec:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80035ee:	f043 0201 	orr.w	r2, r3, #1
 80035f2:	687b      	ldr	r3, [r7, #4]
 80035f4:	661a      	str	r2, [r3, #96]	; 0x60

    tmp_hal_status = HAL_ERROR;
 80035f6:	2301      	movs	r3, #1
 80035f8:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80035fa:	687b      	ldr	r3, [r7, #4]
 80035fc:	681b      	ldr	r3, [r3, #0]
 80035fe:	4618      	mov	r0, r3
 8003600:	f7ff ff77 	bl	80034f2 <LL_ADC_REG_IsConversionOngoing>
 8003604:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8003606:	687b      	ldr	r3, [r7, #4]
 8003608:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800360a:	f003 0310 	and.w	r3, r3, #16
 800360e:	2b00      	cmp	r3, #0
 8003610:	f040 8148 	bne.w	80038a4 <HAL_ADC_Init+0x364>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 8003614:	697b      	ldr	r3, [r7, #20]
 8003616:	2b00      	cmp	r3, #0
 8003618:	f040 8144 	bne.w	80038a4 <HAL_ADC_Init+0x364>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800361c:	687b      	ldr	r3, [r7, #4]
 800361e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003620:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 8003624:	f043 0202 	orr.w	r2, r3, #2
 8003628:	687b      	ldr	r3, [r7, #4]
 800362a:	65da      	str	r2, [r3, #92]	; 0x5c
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 800362c:	687b      	ldr	r3, [r7, #4]
 800362e:	681b      	ldr	r3, [r3, #0]
 8003630:	4618      	mov	r0, r3
 8003632:	f7ff ff4b 	bl	80034cc <LL_ADC_IsEnabled>
 8003636:	4603      	mov	r3, r0
 8003638:	2b00      	cmp	r3, #0
 800363a:	d141      	bne.n	80036c0 <HAL_ADC_Init+0x180>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 800363c:	687b      	ldr	r3, [r7, #4]
 800363e:	681b      	ldr	r3, [r3, #0]
 8003640:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8003644:	d004      	beq.n	8003650 <HAL_ADC_Init+0x110>
 8003646:	687b      	ldr	r3, [r7, #4]
 8003648:	681b      	ldr	r3, [r3, #0]
 800364a:	4a7a      	ldr	r2, [pc, #488]	; (8003834 <HAL_ADC_Init+0x2f4>)
 800364c:	4293      	cmp	r3, r2
 800364e:	d10f      	bne.n	8003670 <HAL_ADC_Init+0x130>
 8003650:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
 8003654:	f7ff ff3a 	bl	80034cc <LL_ADC_IsEnabled>
 8003658:	4604      	mov	r4, r0
 800365a:	4876      	ldr	r0, [pc, #472]	; (8003834 <HAL_ADC_Init+0x2f4>)
 800365c:	f7ff ff36 	bl	80034cc <LL_ADC_IsEnabled>
 8003660:	4603      	mov	r3, r0
 8003662:	4323      	orrs	r3, r4
 8003664:	2b00      	cmp	r3, #0
 8003666:	bf0c      	ite	eq
 8003668:	2301      	moveq	r3, #1
 800366a:	2300      	movne	r3, #0
 800366c:	b2db      	uxtb	r3, r3
 800366e:	e012      	b.n	8003696 <HAL_ADC_Init+0x156>
 8003670:	4871      	ldr	r0, [pc, #452]	; (8003838 <HAL_ADC_Init+0x2f8>)
 8003672:	f7ff ff2b 	bl	80034cc <LL_ADC_IsEnabled>
 8003676:	4604      	mov	r4, r0
 8003678:	4870      	ldr	r0, [pc, #448]	; (800383c <HAL_ADC_Init+0x2fc>)
 800367a:	f7ff ff27 	bl	80034cc <LL_ADC_IsEnabled>
 800367e:	4603      	mov	r3, r0
 8003680:	431c      	orrs	r4, r3
 8003682:	486f      	ldr	r0, [pc, #444]	; (8003840 <HAL_ADC_Init+0x300>)
 8003684:	f7ff ff22 	bl	80034cc <LL_ADC_IsEnabled>
 8003688:	4603      	mov	r3, r0
 800368a:	4323      	orrs	r3, r4
 800368c:	2b00      	cmp	r3, #0
 800368e:	bf0c      	ite	eq
 8003690:	2301      	moveq	r3, #1
 8003692:	2300      	movne	r3, #0
 8003694:	b2db      	uxtb	r3, r3
 8003696:	2b00      	cmp	r3, #0
 8003698:	d012      	beq.n	80036c0 <HAL_ADC_Init+0x180>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 800369a:	687b      	ldr	r3, [r7, #4]
 800369c:	681b      	ldr	r3, [r3, #0]
 800369e:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80036a2:	d004      	beq.n	80036ae <HAL_ADC_Init+0x16e>
 80036a4:	687b      	ldr	r3, [r7, #4]
 80036a6:	681b      	ldr	r3, [r3, #0]
 80036a8:	4a62      	ldr	r2, [pc, #392]	; (8003834 <HAL_ADC_Init+0x2f4>)
 80036aa:	4293      	cmp	r3, r2
 80036ac:	d101      	bne.n	80036b2 <HAL_ADC_Init+0x172>
 80036ae:	4a65      	ldr	r2, [pc, #404]	; (8003844 <HAL_ADC_Init+0x304>)
 80036b0:	e000      	b.n	80036b4 <HAL_ADC_Init+0x174>
 80036b2:	4a65      	ldr	r2, [pc, #404]	; (8003848 <HAL_ADC_Init+0x308>)
 80036b4:	687b      	ldr	r3, [r7, #4]
 80036b6:	685b      	ldr	r3, [r3, #4]
 80036b8:	4619      	mov	r1, r3
 80036ba:	4610      	mov	r0, r2
 80036bc:	f7ff fd7e 	bl	80031bc <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 80036c0:	687b      	ldr	r3, [r7, #4]
 80036c2:	7f5b      	ldrb	r3, [r3, #29]
 80036c4:	035a      	lsls	r2, r3, #13
                hadc->Init.Overrun                                                     |
 80036c6:	687b      	ldr	r3, [r7, #4]
 80036c8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 80036ca:	431a      	orrs	r2, r3
                hadc->Init.DataAlign                                                   |
 80036cc:	687b      	ldr	r3, [r7, #4]
 80036ce:	68db      	ldr	r3, [r3, #12]
                hadc->Init.Overrun                                                     |
 80036d0:	431a      	orrs	r2, r3
                hadc->Init.Resolution                                                  |
 80036d2:	687b      	ldr	r3, [r7, #4]
 80036d4:	689b      	ldr	r3, [r3, #8]
                hadc->Init.DataAlign                                                   |
 80036d6:	431a      	orrs	r2, r3
                ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 80036d8:	687b      	ldr	r3, [r7, #4]
 80036da:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80036de:	041b      	lsls	r3, r3, #16
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 80036e0:	4313      	orrs	r3, r2
 80036e2:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 80036e4:	687b      	ldr	r3, [r7, #4]
 80036e6:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80036ea:	2b01      	cmp	r3, #1
 80036ec:	d106      	bne.n	80036fc <HAL_ADC_Init+0x1bc>
    {
      tmpCFGR |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 80036ee:	687b      	ldr	r3, [r7, #4]
 80036f0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80036f2:	3b01      	subs	r3, #1
 80036f4:	045b      	lsls	r3, r3, #17
 80036f6:	69ba      	ldr	r2, [r7, #24]
 80036f8:	4313      	orrs	r3, r2
 80036fa:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80036fc:	687b      	ldr	r3, [r7, #4]
 80036fe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003700:	2b00      	cmp	r3, #0
 8003702:	d009      	beq.n	8003718 <HAL_ADC_Init+0x1d8>
    {
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8003704:	687b      	ldr	r3, [r7, #4]
 8003706:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003708:	f403 7278 	and.w	r2, r3, #992	; 0x3e0
                  | hadc->Init.ExternalTrigConvEdge
 800370c:	687b      	ldr	r3, [r7, #4]
 800370e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003710:	4313      	orrs	r3, r2
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8003712:	69ba      	ldr	r2, [r7, #24]
 8003714:	4313      	orrs	r3, r2
 8003716:	61bb      	str	r3, [r7, #24]
                 );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
 8003718:	687b      	ldr	r3, [r7, #4]
 800371a:	681b      	ldr	r3, [r3, #0]
 800371c:	68da      	ldr	r2, [r3, #12]
 800371e:	4b4b      	ldr	r3, [pc, #300]	; (800384c <HAL_ADC_Init+0x30c>)
 8003720:	4013      	ands	r3, r2
 8003722:	687a      	ldr	r2, [r7, #4]
 8003724:	6812      	ldr	r2, [r2, #0]
 8003726:	69b9      	ldr	r1, [r7, #24]
 8003728:	430b      	orrs	r3, r1
 800372a:	60d3      	str	r3, [r2, #12]

    /* Configuration of sampling mode */
    MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_BULB | ADC_CFGR2_SMPTRIG, hadc->Init.SamplingMode);
 800372c:	687b      	ldr	r3, [r7, #4]
 800372e:	681b      	ldr	r3, [r3, #0]
 8003730:	691b      	ldr	r3, [r3, #16]
 8003732:	f023 6140 	bic.w	r1, r3, #201326592	; 0xc000000
 8003736:	687b      	ldr	r3, [r7, #4]
 8003738:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800373a:	687b      	ldr	r3, [r7, #4]
 800373c:	681b      	ldr	r3, [r3, #0]
 800373e:	430a      	orrs	r2, r1
 8003740:	611a      	str	r2, [r3, #16]
    /* conversion on going on regular and injected groups:                    */
    /*  - Gain Compensation               Init.GainCompensation               */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8003742:	687b      	ldr	r3, [r7, #4]
 8003744:	681b      	ldr	r3, [r3, #0]
 8003746:	4618      	mov	r0, r3
 8003748:	f7ff fed3 	bl	80034f2 <LL_ADC_REG_IsConversionOngoing>
 800374c:	6138      	str	r0, [r7, #16]
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 800374e:	687b      	ldr	r3, [r7, #4]
 8003750:	681b      	ldr	r3, [r3, #0]
 8003752:	4618      	mov	r0, r3
 8003754:	f7ff fee0 	bl	8003518 <LL_ADC_INJ_IsConversionOngoing>
 8003758:	60f8      	str	r0, [r7, #12]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 800375a:	693b      	ldr	r3, [r7, #16]
 800375c:	2b00      	cmp	r3, #0
 800375e:	d17f      	bne.n	8003860 <HAL_ADC_Init+0x320>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8003760:	68fb      	ldr	r3, [r7, #12]
 8003762:	2b00      	cmp	r3, #0
 8003764:	d17c      	bne.n	8003860 <HAL_ADC_Init+0x320>
       )
    {
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
                 ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8003766:	687b      	ldr	r3, [r7, #4]
 8003768:	7f1b      	ldrb	r3, [r3, #28]
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 800376a:	039a      	lsls	r2, r3, #14
                 ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 800376c:	687b      	ldr	r3, [r7, #4]
 800376e:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8003772:	005b      	lsls	r3, r3, #1
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 8003774:	4313      	orrs	r3, r2
 8003776:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 8003778:	687b      	ldr	r3, [r7, #4]
 800377a:	681b      	ldr	r3, [r3, #0]
 800377c:	68db      	ldr	r3, [r3, #12]
 800377e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8003782:	f023 0302 	bic.w	r3, r3, #2
 8003786:	687a      	ldr	r2, [r7, #4]
 8003788:	6812      	ldr	r2, [r2, #0]
 800378a:	69b9      	ldr	r1, [r7, #24]
 800378c:	430b      	orrs	r3, r1
 800378e:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.GainCompensation != 0UL)
 8003790:	687b      	ldr	r3, [r7, #4]
 8003792:	691b      	ldr	r3, [r3, #16]
 8003794:	2b00      	cmp	r3, #0
 8003796:	d017      	beq.n	80037c8 <HAL_ADC_Init+0x288>
      {
        SET_BIT(hadc->Instance->CFGR2, ADC_CFGR2_GCOMP);
 8003798:	687b      	ldr	r3, [r7, #4]
 800379a:	681b      	ldr	r3, [r3, #0]
 800379c:	691a      	ldr	r2, [r3, #16]
 800379e:	687b      	ldr	r3, [r7, #4]
 80037a0:	681b      	ldr	r3, [r3, #0]
 80037a2:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 80037a6:	611a      	str	r2, [r3, #16]
        MODIFY_REG(hadc->Instance->GCOMP, ADC_GCOMP_GCOMPCOEFF, hadc->Init.GainCompensation);
 80037a8:	687b      	ldr	r3, [r7, #4]
 80037aa:	681b      	ldr	r3, [r3, #0]
 80037ac:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 80037b0:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 80037b4:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 80037b8:	687a      	ldr	r2, [r7, #4]
 80037ba:	6911      	ldr	r1, [r2, #16]
 80037bc:	687a      	ldr	r2, [r7, #4]
 80037be:	6812      	ldr	r2, [r2, #0]
 80037c0:	430b      	orrs	r3, r1
 80037c2:	f8c2 30c0 	str.w	r3, [r2, #192]	; 0xc0
 80037c6:	e013      	b.n	80037f0 <HAL_ADC_Init+0x2b0>
      }
      else
      {
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_GCOMP);
 80037c8:	687b      	ldr	r3, [r7, #4]
 80037ca:	681b      	ldr	r3, [r3, #0]
 80037cc:	691a      	ldr	r2, [r3, #16]
 80037ce:	687b      	ldr	r3, [r7, #4]
 80037d0:	681b      	ldr	r3, [r3, #0]
 80037d2:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 80037d6:	611a      	str	r2, [r3, #16]
        MODIFY_REG(hadc->Instance->GCOMP, ADC_GCOMP_GCOMPCOEFF, 0UL);
 80037d8:	687b      	ldr	r3, [r7, #4]
 80037da:	681b      	ldr	r3, [r3, #0]
 80037dc:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 80037e0:	687a      	ldr	r2, [r7, #4]
 80037e2:	6812      	ldr	r2, [r2, #0]
 80037e4:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 80037e8:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 80037ec:	f8c2 30c0 	str.w	r3, [r2, #192]	; 0xc0
      }

      if (hadc->Init.OversamplingMode == ENABLE)
 80037f0:	687b      	ldr	r3, [r7, #4]
 80037f2:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80037f6:	2b01      	cmp	r3, #1
 80037f8:	d12a      	bne.n	8003850 <HAL_ADC_Init+0x310>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 80037fa:	687b      	ldr	r3, [r7, #4]
 80037fc:	681b      	ldr	r3, [r3, #0]
 80037fe:	691b      	ldr	r3, [r3, #16]
 8003800:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 8003804:	f023 0304 	bic.w	r3, r3, #4
 8003808:	687a      	ldr	r2, [r7, #4]
 800380a:	6c51      	ldr	r1, [r2, #68]	; 0x44
 800380c:	687a      	ldr	r2, [r7, #4]
 800380e:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8003810:	4311      	orrs	r1, r2
 8003812:	687a      	ldr	r2, [r7, #4]
 8003814:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 8003816:	4311      	orrs	r1, r2
 8003818:	687a      	ldr	r2, [r7, #4]
 800381a:	6d12      	ldr	r2, [r2, #80]	; 0x50
 800381c:	430a      	orrs	r2, r1
 800381e:	431a      	orrs	r2, r3
 8003820:	687b      	ldr	r3, [r7, #4]
 8003822:	681b      	ldr	r3, [r3, #0]
 8003824:	f042 0201 	orr.w	r2, r2, #1
 8003828:	611a      	str	r2, [r3, #16]
 800382a:	e019      	b.n	8003860 <HAL_ADC_Init+0x320>
 800382c:	20000010 	.word	0x20000010
 8003830:	053e2d63 	.word	0x053e2d63
 8003834:	50000100 	.word	0x50000100
 8003838:	50000400 	.word	0x50000400
 800383c:	50000500 	.word	0x50000500
 8003840:	50000600 	.word	0x50000600
 8003844:	50000300 	.word	0x50000300
 8003848:	50000700 	.word	0x50000700
 800384c:	fff04007 	.word	0xfff04007
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 8003850:	687b      	ldr	r3, [r7, #4]
 8003852:	681b      	ldr	r3, [r3, #0]
 8003854:	691a      	ldr	r2, [r3, #16]
 8003856:	687b      	ldr	r3, [r7, #4]
 8003858:	681b      	ldr	r3, [r3, #0]
 800385a:	f022 0201 	bic.w	r2, r2, #1
 800385e:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8003860:	687b      	ldr	r3, [r7, #4]
 8003862:	695b      	ldr	r3, [r3, #20]
 8003864:	2b01      	cmp	r3, #1
 8003866:	d10c      	bne.n	8003882 <HAL_ADC_Init+0x342>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 8003868:	687b      	ldr	r3, [r7, #4]
 800386a:	681b      	ldr	r3, [r3, #0]
 800386c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800386e:	f023 010f 	bic.w	r1, r3, #15
 8003872:	687b      	ldr	r3, [r7, #4]
 8003874:	6a1b      	ldr	r3, [r3, #32]
 8003876:	1e5a      	subs	r2, r3, #1
 8003878:	687b      	ldr	r3, [r7, #4]
 800387a:	681b      	ldr	r3, [r3, #0]
 800387c:	430a      	orrs	r2, r1
 800387e:	631a      	str	r2, [r3, #48]	; 0x30
 8003880:	e007      	b.n	8003892 <HAL_ADC_Init+0x352>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8003882:	687b      	ldr	r3, [r7, #4]
 8003884:	681b      	ldr	r3, [r3, #0]
 8003886:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003888:	687b      	ldr	r3, [r7, #4]
 800388a:	681b      	ldr	r3, [r3, #0]
 800388c:	f022 020f 	bic.w	r2, r2, #15
 8003890:	631a      	str	r2, [r3, #48]	; 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 8003892:	687b      	ldr	r3, [r7, #4]
 8003894:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003896:	f023 0303 	bic.w	r3, r3, #3
 800389a:	f043 0201 	orr.w	r2, r3, #1
 800389e:	687b      	ldr	r3, [r7, #4]
 80038a0:	65da      	str	r2, [r3, #92]	; 0x5c
 80038a2:	e007      	b.n	80038b4 <HAL_ADC_Init+0x374>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80038a4:	687b      	ldr	r3, [r7, #4]
 80038a6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80038a8:	f043 0210 	orr.w	r2, r3, #16
 80038ac:	687b      	ldr	r3, [r7, #4]
 80038ae:	65da      	str	r2, [r3, #92]	; 0x5c

    tmp_hal_status = HAL_ERROR;
 80038b0:	2301      	movs	r3, #1
 80038b2:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 80038b4:	7ffb      	ldrb	r3, [r7, #31]
}
 80038b6:	4618      	mov	r0, r3
 80038b8:	3724      	adds	r7, #36	; 0x24
 80038ba:	46bd      	mov	sp, r7
 80038bc:	bd90      	pop	{r4, r7, pc}
 80038be:	bf00      	nop

080038c0 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 80038c0:	b580      	push	{r7, lr}
 80038c2:	b0a6      	sub	sp, #152	; 0x98
 80038c4:	af00      	add	r7, sp, #0
 80038c6:	6078      	str	r0, [r7, #4]
 80038c8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80038ca:	2300      	movs	r3, #0
 80038cc:	f887 3097 	strb.w	r3, [r7, #151]	; 0x97
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0;
 80038d0:	2300      	movs	r3, #0
 80038d2:	60bb      	str	r3, [r7, #8]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, sConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 80038d4:	687b      	ldr	r3, [r7, #4]
 80038d6:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 80038da:	2b01      	cmp	r3, #1
 80038dc:	d101      	bne.n	80038e2 <HAL_ADC_ConfigChannel+0x22>
 80038de:	2302      	movs	r3, #2
 80038e0:	e38e      	b.n	8004000 <HAL_ADC_ConfigChannel+0x740>
 80038e2:	687b      	ldr	r3, [r7, #4]
 80038e4:	2201      	movs	r2, #1
 80038e6:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80038ea:	687b      	ldr	r3, [r7, #4]
 80038ec:	681b      	ldr	r3, [r3, #0]
 80038ee:	4618      	mov	r0, r3
 80038f0:	f7ff fdff 	bl	80034f2 <LL_ADC_REG_IsConversionOngoing>
 80038f4:	4603      	mov	r3, r0
 80038f6:	2b00      	cmp	r3, #0
 80038f8:	f040 836f 	bne.w	8003fda <HAL_ADC_ConfigChannel+0x71a>
  {
    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, sConfig->Rank, sConfig->Channel);
 80038fc:	687b      	ldr	r3, [r7, #4]
 80038fe:	6818      	ldr	r0, [r3, #0]
 8003900:	683b      	ldr	r3, [r7, #0]
 8003902:	6859      	ldr	r1, [r3, #4]
 8003904:	683b      	ldr	r3, [r7, #0]
 8003906:	681b      	ldr	r3, [r3, #0]
 8003908:	461a      	mov	r2, r3
 800390a:	f7ff fd1c 	bl	8003346 <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 800390e:	687b      	ldr	r3, [r7, #4]
 8003910:	681b      	ldr	r3, [r3, #0]
 8003912:	4618      	mov	r0, r3
 8003914:	f7ff fded 	bl	80034f2 <LL_ADC_REG_IsConversionOngoing>
 8003918:	f8c7 0090 	str.w	r0, [r7, #144]	; 0x90
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 800391c:	687b      	ldr	r3, [r7, #4]
 800391e:	681b      	ldr	r3, [r3, #0]
 8003920:	4618      	mov	r0, r3
 8003922:	f7ff fdf9 	bl	8003518 <LL_ADC_INJ_IsConversionOngoing>
 8003926:	f8c7 008c 	str.w	r0, [r7, #140]	; 0x8c
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 800392a:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800392e:	2b00      	cmp	r3, #0
 8003930:	f040 817b 	bne.w	8003c2a <HAL_ADC_ConfigChannel+0x36a>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8003934:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8003938:	2b00      	cmp	r3, #0
 800393a:	f040 8176 	bne.w	8003c2a <HAL_ADC_ConfigChannel+0x36a>
       )
    {
      /* Manage specific case of sampling time 3.5 cycles replacing 2.5 cyles */
      if (sConfig->SamplingTime == ADC_SAMPLETIME_3CYCLES_5)
 800393e:	683b      	ldr	r3, [r7, #0]
 8003940:	689b      	ldr	r3, [r3, #8]
 8003942:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8003946:	d10f      	bne.n	8003968 <HAL_ADC_ConfigChannel+0xa8>
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, LL_ADC_SAMPLINGTIME_2CYCLES_5);
 8003948:	687b      	ldr	r3, [r7, #4]
 800394a:	6818      	ldr	r0, [r3, #0]
 800394c:	683b      	ldr	r3, [r7, #0]
 800394e:	681b      	ldr	r3, [r3, #0]
 8003950:	2200      	movs	r2, #0
 8003952:	4619      	mov	r1, r3
 8003954:	f7ff fd20 	bl	8003398 <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5);
 8003958:	687b      	ldr	r3, [r7, #4]
 800395a:	681b      	ldr	r3, [r3, #0]
 800395c:	f04f 4100 	mov.w	r1, #2147483648	; 0x80000000
 8003960:	4618      	mov	r0, r3
 8003962:	f7ff fcdd 	bl	8003320 <LL_ADC_SetSamplingTimeCommonConfig>
 8003966:	e00e      	b.n	8003986 <HAL_ADC_ConfigChannel+0xc6>
      }
      else
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, sConfig->SamplingTime);
 8003968:	687b      	ldr	r3, [r7, #4]
 800396a:	6818      	ldr	r0, [r3, #0]
 800396c:	683b      	ldr	r3, [r7, #0]
 800396e:	6819      	ldr	r1, [r3, #0]
 8003970:	683b      	ldr	r3, [r7, #0]
 8003972:	689b      	ldr	r3, [r3, #8]
 8003974:	461a      	mov	r2, r3
 8003976:	f7ff fd0f 	bl	8003398 <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
 800397a:	687b      	ldr	r3, [r7, #4]
 800397c:	681b      	ldr	r3, [r3, #0]
 800397e:	2100      	movs	r1, #0
 8003980:	4618      	mov	r0, r3
 8003982:	f7ff fccd 	bl	8003320 <LL_ADC_SetSamplingTimeCommonConfig>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 8003986:	683b      	ldr	r3, [r7, #0]
 8003988:	695a      	ldr	r2, [r3, #20]
 800398a:	687b      	ldr	r3, [r7, #4]
 800398c:	681b      	ldr	r3, [r3, #0]
 800398e:	68db      	ldr	r3, [r3, #12]
 8003990:	08db      	lsrs	r3, r3, #3
 8003992:	f003 0303 	and.w	r3, r3, #3
 8003996:	005b      	lsls	r3, r3, #1
 8003998:	fa02 f303 	lsl.w	r3, r2, r3
 800399c:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88

      if (sConfig->OffsetNumber != ADC_OFFSET_NONE)
 80039a0:	683b      	ldr	r3, [r7, #0]
 80039a2:	691b      	ldr	r3, [r3, #16]
 80039a4:	2b04      	cmp	r3, #4
 80039a6:	d022      	beq.n	80039ee <HAL_ADC_ConfigChannel+0x12e>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, sConfig->OffsetNumber, sConfig->Channel, tmpOffsetShifted);
 80039a8:	687b      	ldr	r3, [r7, #4]
 80039aa:	6818      	ldr	r0, [r3, #0]
 80039ac:	683b      	ldr	r3, [r7, #0]
 80039ae:	6919      	ldr	r1, [r3, #16]
 80039b0:	683b      	ldr	r3, [r7, #0]
 80039b2:	681a      	ldr	r2, [r3, #0]
 80039b4:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80039b8:	f7ff fc34 	bl	8003224 <LL_ADC_SetOffset>

        assert_param(IS_ADC_OFFSET_SIGN(sConfig->OffsetSign));
        assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetSaturation));
        /* Set ADC selected offset sign & saturation */
        LL_ADC_SetOffsetSign(hadc->Instance, sConfig->OffsetNumber, sConfig->OffsetSign);
 80039bc:	687b      	ldr	r3, [r7, #4]
 80039be:	6818      	ldr	r0, [r3, #0]
 80039c0:	683b      	ldr	r3, [r7, #0]
 80039c2:	6919      	ldr	r1, [r3, #16]
 80039c4:	683b      	ldr	r3, [r7, #0]
 80039c6:	699b      	ldr	r3, [r3, #24]
 80039c8:	461a      	mov	r2, r3
 80039ca:	f7ff fc79 	bl	80032c0 <LL_ADC_SetOffsetSign>
        LL_ADC_SetOffsetSaturation(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetSaturation == ENABLE) ? LL_ADC_OFFSET_SATURATION_ENABLE : LL_ADC_OFFSET_SATURATION_DISABLE);
 80039ce:	687b      	ldr	r3, [r7, #4]
 80039d0:	6818      	ldr	r0, [r3, #0]
 80039d2:	683b      	ldr	r3, [r7, #0]
 80039d4:	6919      	ldr	r1, [r3, #16]
 80039d6:	683b      	ldr	r3, [r7, #0]
 80039d8:	7f1b      	ldrb	r3, [r3, #28]
 80039da:	2b01      	cmp	r3, #1
 80039dc:	d102      	bne.n	80039e4 <HAL_ADC_ConfigChannel+0x124>
 80039de:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80039e2:	e000      	b.n	80039e6 <HAL_ADC_ConfigChannel+0x126>
 80039e4:	2300      	movs	r3, #0
 80039e6:	461a      	mov	r2, r3
 80039e8:	f7ff fc82 	bl	80032f0 <LL_ADC_SetOffsetSaturation>
 80039ec:	e11d      	b.n	8003c2a <HAL_ADC_ConfigChannel+0x36a>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if(__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 80039ee:	687b      	ldr	r3, [r7, #4]
 80039f0:	681b      	ldr	r3, [r3, #0]
 80039f2:	2100      	movs	r1, #0
 80039f4:	4618      	mov	r0, r3
 80039f6:	f7ff fc37 	bl	8003268 <LL_ADC_GetOffsetChannel>
 80039fa:	4603      	mov	r3, r0
 80039fc:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003a00:	2b00      	cmp	r3, #0
 8003a02:	d10a      	bne.n	8003a1a <HAL_ADC_ConfigChannel+0x15a>
 8003a04:	687b      	ldr	r3, [r7, #4]
 8003a06:	681b      	ldr	r3, [r3, #0]
 8003a08:	2100      	movs	r1, #0
 8003a0a:	4618      	mov	r0, r3
 8003a0c:	f7ff fc2c 	bl	8003268 <LL_ADC_GetOffsetChannel>
 8003a10:	4603      	mov	r3, r0
 8003a12:	0e9b      	lsrs	r3, r3, #26
 8003a14:	f003 021f 	and.w	r2, r3, #31
 8003a18:	e012      	b.n	8003a40 <HAL_ADC_ConfigChannel+0x180>
 8003a1a:	687b      	ldr	r3, [r7, #4]
 8003a1c:	681b      	ldr	r3, [r3, #0]
 8003a1e:	2100      	movs	r1, #0
 8003a20:	4618      	mov	r0, r3
 8003a22:	f7ff fc21 	bl	8003268 <LL_ADC_GetOffsetChannel>
 8003a26:	4603      	mov	r3, r0
 8003a28:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003a2c:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8003a30:	fa93 f3a3 	rbit	r3, r3
 8003a34:	67fb      	str	r3, [r7, #124]	; 0x7c
  return result;
 8003a36:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8003a38:	fab3 f383 	clz	r3, r3
 8003a3c:	b2db      	uxtb	r3, r3
 8003a3e:	461a      	mov	r2, r3
 8003a40:	683b      	ldr	r3, [r7, #0]
 8003a42:	681b      	ldr	r3, [r3, #0]
 8003a44:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003a48:	2b00      	cmp	r3, #0
 8003a4a:	d105      	bne.n	8003a58 <HAL_ADC_ConfigChannel+0x198>
 8003a4c:	683b      	ldr	r3, [r7, #0]
 8003a4e:	681b      	ldr	r3, [r3, #0]
 8003a50:	0e9b      	lsrs	r3, r3, #26
 8003a52:	f003 031f 	and.w	r3, r3, #31
 8003a56:	e00a      	b.n	8003a6e <HAL_ADC_ConfigChannel+0x1ae>
 8003a58:	683b      	ldr	r3, [r7, #0]
 8003a5a:	681b      	ldr	r3, [r3, #0]
 8003a5c:	67bb      	str	r3, [r7, #120]	; 0x78
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003a5e:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8003a60:	fa93 f3a3 	rbit	r3, r3
 8003a64:	677b      	str	r3, [r7, #116]	; 0x74
  return result;
 8003a66:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003a68:	fab3 f383 	clz	r3, r3
 8003a6c:	b2db      	uxtb	r3, r3
 8003a6e:	429a      	cmp	r2, r3
 8003a70:	d106      	bne.n	8003a80 <HAL_ADC_ConfigChannel+0x1c0>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 8003a72:	687b      	ldr	r3, [r7, #4]
 8003a74:	681b      	ldr	r3, [r3, #0]
 8003a76:	2200      	movs	r2, #0
 8003a78:	2100      	movs	r1, #0
 8003a7a:	4618      	mov	r0, r3
 8003a7c:	f7ff fc08 	bl	8003290 <LL_ADC_SetOffsetState>
        }
        if(__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8003a80:	687b      	ldr	r3, [r7, #4]
 8003a82:	681b      	ldr	r3, [r3, #0]
 8003a84:	2101      	movs	r1, #1
 8003a86:	4618      	mov	r0, r3
 8003a88:	f7ff fbee 	bl	8003268 <LL_ADC_GetOffsetChannel>
 8003a8c:	4603      	mov	r3, r0
 8003a8e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003a92:	2b00      	cmp	r3, #0
 8003a94:	d10a      	bne.n	8003aac <HAL_ADC_ConfigChannel+0x1ec>
 8003a96:	687b      	ldr	r3, [r7, #4]
 8003a98:	681b      	ldr	r3, [r3, #0]
 8003a9a:	2101      	movs	r1, #1
 8003a9c:	4618      	mov	r0, r3
 8003a9e:	f7ff fbe3 	bl	8003268 <LL_ADC_GetOffsetChannel>
 8003aa2:	4603      	mov	r3, r0
 8003aa4:	0e9b      	lsrs	r3, r3, #26
 8003aa6:	f003 021f 	and.w	r2, r3, #31
 8003aaa:	e010      	b.n	8003ace <HAL_ADC_ConfigChannel+0x20e>
 8003aac:	687b      	ldr	r3, [r7, #4]
 8003aae:	681b      	ldr	r3, [r3, #0]
 8003ab0:	2101      	movs	r1, #1
 8003ab2:	4618      	mov	r0, r3
 8003ab4:	f7ff fbd8 	bl	8003268 <LL_ADC_GetOffsetChannel>
 8003ab8:	4603      	mov	r3, r0
 8003aba:	673b      	str	r3, [r7, #112]	; 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003abc:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8003abe:	fa93 f3a3 	rbit	r3, r3
 8003ac2:	66fb      	str	r3, [r7, #108]	; 0x6c
  return result;
 8003ac4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003ac6:	fab3 f383 	clz	r3, r3
 8003aca:	b2db      	uxtb	r3, r3
 8003acc:	461a      	mov	r2, r3
 8003ace:	683b      	ldr	r3, [r7, #0]
 8003ad0:	681b      	ldr	r3, [r3, #0]
 8003ad2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003ad6:	2b00      	cmp	r3, #0
 8003ad8:	d105      	bne.n	8003ae6 <HAL_ADC_ConfigChannel+0x226>
 8003ada:	683b      	ldr	r3, [r7, #0]
 8003adc:	681b      	ldr	r3, [r3, #0]
 8003ade:	0e9b      	lsrs	r3, r3, #26
 8003ae0:	f003 031f 	and.w	r3, r3, #31
 8003ae4:	e00a      	b.n	8003afc <HAL_ADC_ConfigChannel+0x23c>
 8003ae6:	683b      	ldr	r3, [r7, #0]
 8003ae8:	681b      	ldr	r3, [r3, #0]
 8003aea:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003aec:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8003aee:	fa93 f3a3 	rbit	r3, r3
 8003af2:	667b      	str	r3, [r7, #100]	; 0x64
  return result;
 8003af4:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8003af6:	fab3 f383 	clz	r3, r3
 8003afa:	b2db      	uxtb	r3, r3
 8003afc:	429a      	cmp	r2, r3
 8003afe:	d106      	bne.n	8003b0e <HAL_ADC_ConfigChannel+0x24e>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 8003b00:	687b      	ldr	r3, [r7, #4]
 8003b02:	681b      	ldr	r3, [r3, #0]
 8003b04:	2200      	movs	r2, #0
 8003b06:	2101      	movs	r1, #1
 8003b08:	4618      	mov	r0, r3
 8003b0a:	f7ff fbc1 	bl	8003290 <LL_ADC_SetOffsetState>
        }
        if(__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8003b0e:	687b      	ldr	r3, [r7, #4]
 8003b10:	681b      	ldr	r3, [r3, #0]
 8003b12:	2102      	movs	r1, #2
 8003b14:	4618      	mov	r0, r3
 8003b16:	f7ff fba7 	bl	8003268 <LL_ADC_GetOffsetChannel>
 8003b1a:	4603      	mov	r3, r0
 8003b1c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003b20:	2b00      	cmp	r3, #0
 8003b22:	d10a      	bne.n	8003b3a <HAL_ADC_ConfigChannel+0x27a>
 8003b24:	687b      	ldr	r3, [r7, #4]
 8003b26:	681b      	ldr	r3, [r3, #0]
 8003b28:	2102      	movs	r1, #2
 8003b2a:	4618      	mov	r0, r3
 8003b2c:	f7ff fb9c 	bl	8003268 <LL_ADC_GetOffsetChannel>
 8003b30:	4603      	mov	r3, r0
 8003b32:	0e9b      	lsrs	r3, r3, #26
 8003b34:	f003 021f 	and.w	r2, r3, #31
 8003b38:	e010      	b.n	8003b5c <HAL_ADC_ConfigChannel+0x29c>
 8003b3a:	687b      	ldr	r3, [r7, #4]
 8003b3c:	681b      	ldr	r3, [r3, #0]
 8003b3e:	2102      	movs	r1, #2
 8003b40:	4618      	mov	r0, r3
 8003b42:	f7ff fb91 	bl	8003268 <LL_ADC_GetOffsetChannel>
 8003b46:	4603      	mov	r3, r0
 8003b48:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003b4a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8003b4c:	fa93 f3a3 	rbit	r3, r3
 8003b50:	65fb      	str	r3, [r7, #92]	; 0x5c
  return result;
 8003b52:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003b54:	fab3 f383 	clz	r3, r3
 8003b58:	b2db      	uxtb	r3, r3
 8003b5a:	461a      	mov	r2, r3
 8003b5c:	683b      	ldr	r3, [r7, #0]
 8003b5e:	681b      	ldr	r3, [r3, #0]
 8003b60:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003b64:	2b00      	cmp	r3, #0
 8003b66:	d105      	bne.n	8003b74 <HAL_ADC_ConfigChannel+0x2b4>
 8003b68:	683b      	ldr	r3, [r7, #0]
 8003b6a:	681b      	ldr	r3, [r3, #0]
 8003b6c:	0e9b      	lsrs	r3, r3, #26
 8003b6e:	f003 031f 	and.w	r3, r3, #31
 8003b72:	e00a      	b.n	8003b8a <HAL_ADC_ConfigChannel+0x2ca>
 8003b74:	683b      	ldr	r3, [r7, #0]
 8003b76:	681b      	ldr	r3, [r3, #0]
 8003b78:	65bb      	str	r3, [r7, #88]	; 0x58
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003b7a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8003b7c:	fa93 f3a3 	rbit	r3, r3
 8003b80:	657b      	str	r3, [r7, #84]	; 0x54
  return result;
 8003b82:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003b84:	fab3 f383 	clz	r3, r3
 8003b88:	b2db      	uxtb	r3, r3
 8003b8a:	429a      	cmp	r2, r3
 8003b8c:	d106      	bne.n	8003b9c <HAL_ADC_ConfigChannel+0x2dc>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 8003b8e:	687b      	ldr	r3, [r7, #4]
 8003b90:	681b      	ldr	r3, [r3, #0]
 8003b92:	2200      	movs	r2, #0
 8003b94:	2102      	movs	r1, #2
 8003b96:	4618      	mov	r0, r3
 8003b98:	f7ff fb7a 	bl	8003290 <LL_ADC_SetOffsetState>
        }
        if(__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8003b9c:	687b      	ldr	r3, [r7, #4]
 8003b9e:	681b      	ldr	r3, [r3, #0]
 8003ba0:	2103      	movs	r1, #3
 8003ba2:	4618      	mov	r0, r3
 8003ba4:	f7ff fb60 	bl	8003268 <LL_ADC_GetOffsetChannel>
 8003ba8:	4603      	mov	r3, r0
 8003baa:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003bae:	2b00      	cmp	r3, #0
 8003bb0:	d10a      	bne.n	8003bc8 <HAL_ADC_ConfigChannel+0x308>
 8003bb2:	687b      	ldr	r3, [r7, #4]
 8003bb4:	681b      	ldr	r3, [r3, #0]
 8003bb6:	2103      	movs	r1, #3
 8003bb8:	4618      	mov	r0, r3
 8003bba:	f7ff fb55 	bl	8003268 <LL_ADC_GetOffsetChannel>
 8003bbe:	4603      	mov	r3, r0
 8003bc0:	0e9b      	lsrs	r3, r3, #26
 8003bc2:	f003 021f 	and.w	r2, r3, #31
 8003bc6:	e010      	b.n	8003bea <HAL_ADC_ConfigChannel+0x32a>
 8003bc8:	687b      	ldr	r3, [r7, #4]
 8003bca:	681b      	ldr	r3, [r3, #0]
 8003bcc:	2103      	movs	r1, #3
 8003bce:	4618      	mov	r0, r3
 8003bd0:	f7ff fb4a 	bl	8003268 <LL_ADC_GetOffsetChannel>
 8003bd4:	4603      	mov	r3, r0
 8003bd6:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003bd8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003bda:	fa93 f3a3 	rbit	r3, r3
 8003bde:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 8003be0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003be2:	fab3 f383 	clz	r3, r3
 8003be6:	b2db      	uxtb	r3, r3
 8003be8:	461a      	mov	r2, r3
 8003bea:	683b      	ldr	r3, [r7, #0]
 8003bec:	681b      	ldr	r3, [r3, #0]
 8003bee:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003bf2:	2b00      	cmp	r3, #0
 8003bf4:	d105      	bne.n	8003c02 <HAL_ADC_ConfigChannel+0x342>
 8003bf6:	683b      	ldr	r3, [r7, #0]
 8003bf8:	681b      	ldr	r3, [r3, #0]
 8003bfa:	0e9b      	lsrs	r3, r3, #26
 8003bfc:	f003 031f 	and.w	r3, r3, #31
 8003c00:	e00a      	b.n	8003c18 <HAL_ADC_ConfigChannel+0x358>
 8003c02:	683b      	ldr	r3, [r7, #0]
 8003c04:	681b      	ldr	r3, [r3, #0]
 8003c06:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003c08:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003c0a:	fa93 f3a3 	rbit	r3, r3
 8003c0e:	647b      	str	r3, [r7, #68]	; 0x44
  return result;
 8003c10:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003c12:	fab3 f383 	clz	r3, r3
 8003c16:	b2db      	uxtb	r3, r3
 8003c18:	429a      	cmp	r2, r3
 8003c1a:	d106      	bne.n	8003c2a <HAL_ADC_ConfigChannel+0x36a>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 8003c1c:	687b      	ldr	r3, [r7, #4]
 8003c1e:	681b      	ldr	r3, [r3, #0]
 8003c20:	2200      	movs	r2, #0
 8003c22:	2103      	movs	r1, #3
 8003c24:	4618      	mov	r0, r3
 8003c26:	f7ff fb33 	bl	8003290 <LL_ADC_SetOffsetState>
    }

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8003c2a:	687b      	ldr	r3, [r7, #4]
 8003c2c:	681b      	ldr	r3, [r3, #0]
 8003c2e:	4618      	mov	r0, r3
 8003c30:	f7ff fc4c 	bl	80034cc <LL_ADC_IsEnabled>
 8003c34:	4603      	mov	r3, r0
 8003c36:	2b00      	cmp	r3, #0
 8003c38:	f040 810c 	bne.w	8003e54 <HAL_ADC_ConfigChannel+0x594>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfig->Channel, sConfig->SingleDiff);
 8003c3c:	687b      	ldr	r3, [r7, #4]
 8003c3e:	6818      	ldr	r0, [r3, #0]
 8003c40:	683b      	ldr	r3, [r7, #0]
 8003c42:	6819      	ldr	r1, [r3, #0]
 8003c44:	683b      	ldr	r3, [r7, #0]
 8003c46:	68db      	ldr	r3, [r3, #12]
 8003c48:	461a      	mov	r2, r3
 8003c4a:	f7ff fbcd 	bl	80033e8 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (sConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 8003c4e:	683b      	ldr	r3, [r7, #0]
 8003c50:	68db      	ldr	r3, [r3, #12]
 8003c52:	4aaf      	ldr	r2, [pc, #700]	; (8003f10 <HAL_ADC_ConfigChannel+0x650>)
 8003c54:	4293      	cmp	r3, r2
 8003c56:	f040 80fd 	bne.w	8003e54 <HAL_ADC_ConfigChannel+0x594>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8003c5a:	687b      	ldr	r3, [r7, #4]
 8003c5c:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8003c5e:	683b      	ldr	r3, [r7, #0]
 8003c60:	681b      	ldr	r3, [r3, #0]
 8003c62:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003c66:	2b00      	cmp	r3, #0
 8003c68:	d10b      	bne.n	8003c82 <HAL_ADC_ConfigChannel+0x3c2>
 8003c6a:	683b      	ldr	r3, [r7, #0]
 8003c6c:	681b      	ldr	r3, [r3, #0]
 8003c6e:	0e9b      	lsrs	r3, r3, #26
 8003c70:	3301      	adds	r3, #1
 8003c72:	f003 031f 	and.w	r3, r3, #31
 8003c76:	2b09      	cmp	r3, #9
 8003c78:	bf94      	ite	ls
 8003c7a:	2301      	movls	r3, #1
 8003c7c:	2300      	movhi	r3, #0
 8003c7e:	b2db      	uxtb	r3, r3
 8003c80:	e012      	b.n	8003ca8 <HAL_ADC_ConfigChannel+0x3e8>
 8003c82:	683b      	ldr	r3, [r7, #0]
 8003c84:	681b      	ldr	r3, [r3, #0]
 8003c86:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003c88:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003c8a:	fa93 f3a3 	rbit	r3, r3
 8003c8e:	63fb      	str	r3, [r7, #60]	; 0x3c
  return result;
 8003c90:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003c92:	fab3 f383 	clz	r3, r3
 8003c96:	b2db      	uxtb	r3, r3
 8003c98:	3301      	adds	r3, #1
 8003c9a:	f003 031f 	and.w	r3, r3, #31
 8003c9e:	2b09      	cmp	r3, #9
 8003ca0:	bf94      	ite	ls
 8003ca2:	2301      	movls	r3, #1
 8003ca4:	2300      	movhi	r3, #0
 8003ca6:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8003ca8:	2b00      	cmp	r3, #0
 8003caa:	d064      	beq.n	8003d76 <HAL_ADC_ConfigChannel+0x4b6>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8003cac:	683b      	ldr	r3, [r7, #0]
 8003cae:	681b      	ldr	r3, [r3, #0]
 8003cb0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003cb4:	2b00      	cmp	r3, #0
 8003cb6:	d107      	bne.n	8003cc8 <HAL_ADC_ConfigChannel+0x408>
 8003cb8:	683b      	ldr	r3, [r7, #0]
 8003cba:	681b      	ldr	r3, [r3, #0]
 8003cbc:	0e9b      	lsrs	r3, r3, #26
 8003cbe:	3301      	adds	r3, #1
 8003cc0:	069b      	lsls	r3, r3, #26
 8003cc2:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8003cc6:	e00e      	b.n	8003ce6 <HAL_ADC_ConfigChannel+0x426>
 8003cc8:	683b      	ldr	r3, [r7, #0]
 8003cca:	681b      	ldr	r3, [r3, #0]
 8003ccc:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003cce:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003cd0:	fa93 f3a3 	rbit	r3, r3
 8003cd4:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 8003cd6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003cd8:	fab3 f383 	clz	r3, r3
 8003cdc:	b2db      	uxtb	r3, r3
 8003cde:	3301      	adds	r3, #1
 8003ce0:	069b      	lsls	r3, r3, #26
 8003ce2:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8003ce6:	683b      	ldr	r3, [r7, #0]
 8003ce8:	681b      	ldr	r3, [r3, #0]
 8003cea:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003cee:	2b00      	cmp	r3, #0
 8003cf0:	d109      	bne.n	8003d06 <HAL_ADC_ConfigChannel+0x446>
 8003cf2:	683b      	ldr	r3, [r7, #0]
 8003cf4:	681b      	ldr	r3, [r3, #0]
 8003cf6:	0e9b      	lsrs	r3, r3, #26
 8003cf8:	3301      	adds	r3, #1
 8003cfa:	f003 031f 	and.w	r3, r3, #31
 8003cfe:	2101      	movs	r1, #1
 8003d00:	fa01 f303 	lsl.w	r3, r1, r3
 8003d04:	e010      	b.n	8003d28 <HAL_ADC_ConfigChannel+0x468>
 8003d06:	683b      	ldr	r3, [r7, #0]
 8003d08:	681b      	ldr	r3, [r3, #0]
 8003d0a:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003d0c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003d0e:	fa93 f3a3 	rbit	r3, r3
 8003d12:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 8003d14:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003d16:	fab3 f383 	clz	r3, r3
 8003d1a:	b2db      	uxtb	r3, r3
 8003d1c:	3301      	adds	r3, #1
 8003d1e:	f003 031f 	and.w	r3, r3, #31
 8003d22:	2101      	movs	r1, #1
 8003d24:	fa01 f303 	lsl.w	r3, r1, r3
 8003d28:	ea42 0103 	orr.w	r1, r2, r3
 8003d2c:	683b      	ldr	r3, [r7, #0]
 8003d2e:	681b      	ldr	r3, [r3, #0]
 8003d30:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003d34:	2b00      	cmp	r3, #0
 8003d36:	d10a      	bne.n	8003d4e <HAL_ADC_ConfigChannel+0x48e>
 8003d38:	683b      	ldr	r3, [r7, #0]
 8003d3a:	681b      	ldr	r3, [r3, #0]
 8003d3c:	0e9b      	lsrs	r3, r3, #26
 8003d3e:	3301      	adds	r3, #1
 8003d40:	f003 021f 	and.w	r2, r3, #31
 8003d44:	4613      	mov	r3, r2
 8003d46:	005b      	lsls	r3, r3, #1
 8003d48:	4413      	add	r3, r2
 8003d4a:	051b      	lsls	r3, r3, #20
 8003d4c:	e011      	b.n	8003d72 <HAL_ADC_ConfigChannel+0x4b2>
 8003d4e:	683b      	ldr	r3, [r7, #0]
 8003d50:	681b      	ldr	r3, [r3, #0]
 8003d52:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003d54:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003d56:	fa93 f3a3 	rbit	r3, r3
 8003d5a:	627b      	str	r3, [r7, #36]	; 0x24
  return result;
 8003d5c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d5e:	fab3 f383 	clz	r3, r3
 8003d62:	b2db      	uxtb	r3, r3
 8003d64:	3301      	adds	r3, #1
 8003d66:	f003 021f 	and.w	r2, r3, #31
 8003d6a:	4613      	mov	r3, r2
 8003d6c:	005b      	lsls	r3, r3, #1
 8003d6e:	4413      	add	r3, r2
 8003d70:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8003d72:	430b      	orrs	r3, r1
 8003d74:	e069      	b.n	8003e4a <HAL_ADC_ConfigChannel+0x58a>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8003d76:	683b      	ldr	r3, [r7, #0]
 8003d78:	681b      	ldr	r3, [r3, #0]
 8003d7a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003d7e:	2b00      	cmp	r3, #0
 8003d80:	d107      	bne.n	8003d92 <HAL_ADC_ConfigChannel+0x4d2>
 8003d82:	683b      	ldr	r3, [r7, #0]
 8003d84:	681b      	ldr	r3, [r3, #0]
 8003d86:	0e9b      	lsrs	r3, r3, #26
 8003d88:	3301      	adds	r3, #1
 8003d8a:	069b      	lsls	r3, r3, #26
 8003d8c:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8003d90:	e00e      	b.n	8003db0 <HAL_ADC_ConfigChannel+0x4f0>
 8003d92:	683b      	ldr	r3, [r7, #0]
 8003d94:	681b      	ldr	r3, [r3, #0]
 8003d96:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003d98:	6a3b      	ldr	r3, [r7, #32]
 8003d9a:	fa93 f3a3 	rbit	r3, r3
 8003d9e:	61fb      	str	r3, [r7, #28]
  return result;
 8003da0:	69fb      	ldr	r3, [r7, #28]
 8003da2:	fab3 f383 	clz	r3, r3
 8003da6:	b2db      	uxtb	r3, r3
 8003da8:	3301      	adds	r3, #1
 8003daa:	069b      	lsls	r3, r3, #26
 8003dac:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8003db0:	683b      	ldr	r3, [r7, #0]
 8003db2:	681b      	ldr	r3, [r3, #0]
 8003db4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003db8:	2b00      	cmp	r3, #0
 8003dba:	d109      	bne.n	8003dd0 <HAL_ADC_ConfigChannel+0x510>
 8003dbc:	683b      	ldr	r3, [r7, #0]
 8003dbe:	681b      	ldr	r3, [r3, #0]
 8003dc0:	0e9b      	lsrs	r3, r3, #26
 8003dc2:	3301      	adds	r3, #1
 8003dc4:	f003 031f 	and.w	r3, r3, #31
 8003dc8:	2101      	movs	r1, #1
 8003dca:	fa01 f303 	lsl.w	r3, r1, r3
 8003dce:	e010      	b.n	8003df2 <HAL_ADC_ConfigChannel+0x532>
 8003dd0:	683b      	ldr	r3, [r7, #0]
 8003dd2:	681b      	ldr	r3, [r3, #0]
 8003dd4:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003dd6:	69bb      	ldr	r3, [r7, #24]
 8003dd8:	fa93 f3a3 	rbit	r3, r3
 8003ddc:	617b      	str	r3, [r7, #20]
  return result;
 8003dde:	697b      	ldr	r3, [r7, #20]
 8003de0:	fab3 f383 	clz	r3, r3
 8003de4:	b2db      	uxtb	r3, r3
 8003de6:	3301      	adds	r3, #1
 8003de8:	f003 031f 	and.w	r3, r3, #31
 8003dec:	2101      	movs	r1, #1
 8003dee:	fa01 f303 	lsl.w	r3, r1, r3
 8003df2:	ea42 0103 	orr.w	r1, r2, r3
 8003df6:	683b      	ldr	r3, [r7, #0]
 8003df8:	681b      	ldr	r3, [r3, #0]
 8003dfa:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003dfe:	2b00      	cmp	r3, #0
 8003e00:	d10d      	bne.n	8003e1e <HAL_ADC_ConfigChannel+0x55e>
 8003e02:	683b      	ldr	r3, [r7, #0]
 8003e04:	681b      	ldr	r3, [r3, #0]
 8003e06:	0e9b      	lsrs	r3, r3, #26
 8003e08:	3301      	adds	r3, #1
 8003e0a:	f003 021f 	and.w	r2, r3, #31
 8003e0e:	4613      	mov	r3, r2
 8003e10:	005b      	lsls	r3, r3, #1
 8003e12:	4413      	add	r3, r2
 8003e14:	3b1e      	subs	r3, #30
 8003e16:	051b      	lsls	r3, r3, #20
 8003e18:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8003e1c:	e014      	b.n	8003e48 <HAL_ADC_ConfigChannel+0x588>
 8003e1e:	683b      	ldr	r3, [r7, #0]
 8003e20:	681b      	ldr	r3, [r3, #0]
 8003e22:	613b      	str	r3, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003e24:	693b      	ldr	r3, [r7, #16]
 8003e26:	fa93 f3a3 	rbit	r3, r3
 8003e2a:	60fb      	str	r3, [r7, #12]
  return result;
 8003e2c:	68fb      	ldr	r3, [r7, #12]
 8003e2e:	fab3 f383 	clz	r3, r3
 8003e32:	b2db      	uxtb	r3, r3
 8003e34:	3301      	adds	r3, #1
 8003e36:	f003 021f 	and.w	r2, r3, #31
 8003e3a:	4613      	mov	r3, r2
 8003e3c:	005b      	lsls	r3, r3, #1
 8003e3e:	4413      	add	r3, r2
 8003e40:	3b1e      	subs	r3, #30
 8003e42:	051b      	lsls	r3, r3, #20
 8003e44:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8003e48:	430b      	orrs	r3, r1
 8003e4a:	683a      	ldr	r2, [r7, #0]
 8003e4c:	6892      	ldr	r2, [r2, #8]
 8003e4e:	4619      	mov	r1, r3
 8003e50:	f7ff faa2 	bl	8003398 <LL_ADC_SetChannelSamplingTime>
    /* If internal channel selected, enable dedicated internal buffers and    */
    /* paths.                                                                 */
    /* Note: these internal measurement paths can be disabled using           */
    /* HAL_ADC_DeInit().                                                      */

    if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 8003e54:	683b      	ldr	r3, [r7, #0]
 8003e56:	681a      	ldr	r2, [r3, #0]
 8003e58:	4b2e      	ldr	r3, [pc, #184]	; (8003f14 <HAL_ADC_ConfigChannel+0x654>)
 8003e5a:	4013      	ands	r3, r2
 8003e5c:	2b00      	cmp	r3, #0
 8003e5e:	f000 80c9 	beq.w	8003ff4 <HAL_ADC_ConfigChannel+0x734>
    {
      tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8003e62:	687b      	ldr	r3, [r7, #4]
 8003e64:	681b      	ldr	r3, [r3, #0]
 8003e66:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8003e6a:	d004      	beq.n	8003e76 <HAL_ADC_ConfigChannel+0x5b6>
 8003e6c:	687b      	ldr	r3, [r7, #4]
 8003e6e:	681b      	ldr	r3, [r3, #0]
 8003e70:	4a29      	ldr	r2, [pc, #164]	; (8003f18 <HAL_ADC_ConfigChannel+0x658>)
 8003e72:	4293      	cmp	r3, r2
 8003e74:	d101      	bne.n	8003e7a <HAL_ADC_ConfigChannel+0x5ba>
 8003e76:	4b29      	ldr	r3, [pc, #164]	; (8003f1c <HAL_ADC_ConfigChannel+0x65c>)
 8003e78:	e000      	b.n	8003e7c <HAL_ADC_ConfigChannel+0x5bc>
 8003e7a:	4b29      	ldr	r3, [pc, #164]	; (8003f20 <HAL_ADC_ConfigChannel+0x660>)
 8003e7c:	4618      	mov	r0, r3
 8003e7e:	f7ff f9c3 	bl	8003208 <LL_ADC_GetCommonPathInternalCh>
 8003e82:	f8c7 0084 	str.w	r0, [r7, #132]	; 0x84

      /* If the requested internal measurement path has already been enabled, */
      /* bypass the configuration processing.                                 */
      if (((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR_ADC1) || (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR_ADC5))
 8003e86:	683b      	ldr	r3, [r7, #0]
 8003e88:	681b      	ldr	r3, [r3, #0]
 8003e8a:	4a26      	ldr	r2, [pc, #152]	; (8003f24 <HAL_ADC_ConfigChannel+0x664>)
 8003e8c:	4293      	cmp	r3, r2
 8003e8e:	d004      	beq.n	8003e9a <HAL_ADC_ConfigChannel+0x5da>
 8003e90:	683b      	ldr	r3, [r7, #0]
 8003e92:	681b      	ldr	r3, [r3, #0]
 8003e94:	4a24      	ldr	r2, [pc, #144]	; (8003f28 <HAL_ADC_ConfigChannel+0x668>)
 8003e96:	4293      	cmp	r3, r2
 8003e98:	d14e      	bne.n	8003f38 <HAL_ADC_ConfigChannel+0x678>
          && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8003e9a:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8003e9e:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8003ea2:	2b00      	cmp	r3, #0
 8003ea4:	d148      	bne.n	8003f38 <HAL_ADC_ConfigChannel+0x678>
      {
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8003ea6:	687b      	ldr	r3, [r7, #4]
 8003ea8:	681b      	ldr	r3, [r3, #0]
 8003eaa:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8003eae:	d005      	beq.n	8003ebc <HAL_ADC_ConfigChannel+0x5fc>
 8003eb0:	687b      	ldr	r3, [r7, #4]
 8003eb2:	681b      	ldr	r3, [r3, #0]
 8003eb4:	4a1d      	ldr	r2, [pc, #116]	; (8003f2c <HAL_ADC_ConfigChannel+0x66c>)
 8003eb6:	4293      	cmp	r3, r2
 8003eb8:	f040 8099 	bne.w	8003fee <HAL_ADC_ConfigChannel+0x72e>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8003ebc:	687b      	ldr	r3, [r7, #4]
 8003ebe:	681b      	ldr	r3, [r3, #0]
 8003ec0:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8003ec4:	d004      	beq.n	8003ed0 <HAL_ADC_ConfigChannel+0x610>
 8003ec6:	687b      	ldr	r3, [r7, #4]
 8003ec8:	681b      	ldr	r3, [r3, #0]
 8003eca:	4a13      	ldr	r2, [pc, #76]	; (8003f18 <HAL_ADC_ConfigChannel+0x658>)
 8003ecc:	4293      	cmp	r3, r2
 8003ece:	d101      	bne.n	8003ed4 <HAL_ADC_ConfigChannel+0x614>
 8003ed0:	4a12      	ldr	r2, [pc, #72]	; (8003f1c <HAL_ADC_ConfigChannel+0x65c>)
 8003ed2:	e000      	b.n	8003ed6 <HAL_ADC_ConfigChannel+0x616>
 8003ed4:	4a12      	ldr	r2, [pc, #72]	; (8003f20 <HAL_ADC_ConfigChannel+0x660>)
 8003ed6:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8003eda:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8003ede:	4619      	mov	r1, r3
 8003ee0:	4610      	mov	r0, r2
 8003ee2:	f7ff f97e 	bl	80031e2 <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * (SystemCoreClock / (100000UL * 2UL)));
 8003ee6:	4b12      	ldr	r3, [pc, #72]	; (8003f30 <HAL_ADC_ConfigChannel+0x670>)
 8003ee8:	681b      	ldr	r3, [r3, #0]
 8003eea:	099b      	lsrs	r3, r3, #6
 8003eec:	4a11      	ldr	r2, [pc, #68]	; (8003f34 <HAL_ADC_ConfigChannel+0x674>)
 8003eee:	fba2 2303 	umull	r2, r3, r2, r3
 8003ef2:	099a      	lsrs	r2, r3, #6
 8003ef4:	4613      	mov	r3, r2
 8003ef6:	005b      	lsls	r3, r3, #1
 8003ef8:	4413      	add	r3, r2
 8003efa:	009b      	lsls	r3, r3, #2
 8003efc:	60bb      	str	r3, [r7, #8]
          while (wait_loop_index != 0UL)
 8003efe:	e002      	b.n	8003f06 <HAL_ADC_ConfigChannel+0x646>
          {
            wait_loop_index--;
 8003f00:	68bb      	ldr	r3, [r7, #8]
 8003f02:	3b01      	subs	r3, #1
 8003f04:	60bb      	str	r3, [r7, #8]
          while (wait_loop_index != 0UL)
 8003f06:	68bb      	ldr	r3, [r7, #8]
 8003f08:	2b00      	cmp	r3, #0
 8003f0a:	d1f9      	bne.n	8003f00 <HAL_ADC_ConfigChannel+0x640>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8003f0c:	e06f      	b.n	8003fee <HAL_ADC_ConfigChannel+0x72e>
 8003f0e:	bf00      	nop
 8003f10:	407f0000 	.word	0x407f0000
 8003f14:	80080000 	.word	0x80080000
 8003f18:	50000100 	.word	0x50000100
 8003f1c:	50000300 	.word	0x50000300
 8003f20:	50000700 	.word	0x50000700
 8003f24:	c3210000 	.word	0xc3210000
 8003f28:	90c00010 	.word	0x90c00010
 8003f2c:	50000600 	.word	0x50000600
 8003f30:	20000010 	.word	0x20000010
 8003f34:	053e2d63 	.word	0x053e2d63
          }
        }
      }
      else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8003f38:	683b      	ldr	r3, [r7, #0]
 8003f3a:	681b      	ldr	r3, [r3, #0]
 8003f3c:	4a32      	ldr	r2, [pc, #200]	; (8004008 <HAL_ADC_ConfigChannel+0x748>)
 8003f3e:	4293      	cmp	r3, r2
 8003f40:	d125      	bne.n	8003f8e <HAL_ADC_ConfigChannel+0x6ce>
 8003f42:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8003f46:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003f4a:	2b00      	cmp	r3, #0
 8003f4c:	d11f      	bne.n	8003f8e <HAL_ADC_ConfigChannel+0x6ce>
      {
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8003f4e:	687b      	ldr	r3, [r7, #4]
 8003f50:	681b      	ldr	r3, [r3, #0]
 8003f52:	4a2e      	ldr	r2, [pc, #184]	; (800400c <HAL_ADC_ConfigChannel+0x74c>)
 8003f54:	4293      	cmp	r3, r2
 8003f56:	d104      	bne.n	8003f62 <HAL_ADC_ConfigChannel+0x6a2>
 8003f58:	687b      	ldr	r3, [r7, #4]
 8003f5a:	681b      	ldr	r3, [r3, #0]
 8003f5c:	4a2c      	ldr	r2, [pc, #176]	; (8004010 <HAL_ADC_ConfigChannel+0x750>)
 8003f5e:	4293      	cmp	r3, r2
 8003f60:	d047      	beq.n	8003ff2 <HAL_ADC_ConfigChannel+0x732>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8003f62:	687b      	ldr	r3, [r7, #4]
 8003f64:	681b      	ldr	r3, [r3, #0]
 8003f66:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8003f6a:	d004      	beq.n	8003f76 <HAL_ADC_ConfigChannel+0x6b6>
 8003f6c:	687b      	ldr	r3, [r7, #4]
 8003f6e:	681b      	ldr	r3, [r3, #0]
 8003f70:	4a26      	ldr	r2, [pc, #152]	; (800400c <HAL_ADC_ConfigChannel+0x74c>)
 8003f72:	4293      	cmp	r3, r2
 8003f74:	d101      	bne.n	8003f7a <HAL_ADC_ConfigChannel+0x6ba>
 8003f76:	4a27      	ldr	r2, [pc, #156]	; (8004014 <HAL_ADC_ConfigChannel+0x754>)
 8003f78:	e000      	b.n	8003f7c <HAL_ADC_ConfigChannel+0x6bc>
 8003f7a:	4a27      	ldr	r2, [pc, #156]	; (8004018 <HAL_ADC_ConfigChannel+0x758>)
 8003f7c:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8003f80:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003f84:	4619      	mov	r1, r3
 8003f86:	4610      	mov	r0, r2
 8003f88:	f7ff f92b 	bl	80031e2 <LL_ADC_SetCommonPathInternalCh>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8003f8c:	e031      	b.n	8003ff2 <HAL_ADC_ConfigChannel+0x732>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
      }
      else if ((sConfig->Channel == ADC_CHANNEL_VREFINT)
 8003f8e:	683b      	ldr	r3, [r7, #0]
 8003f90:	681b      	ldr	r3, [r3, #0]
 8003f92:	4a22      	ldr	r2, [pc, #136]	; (800401c <HAL_ADC_ConfigChannel+0x75c>)
 8003f94:	4293      	cmp	r3, r2
 8003f96:	d12d      	bne.n	8003ff4 <HAL_ADC_ConfigChannel+0x734>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8003f98:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8003f9c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003fa0:	2b00      	cmp	r3, #0
 8003fa2:	d127      	bne.n	8003ff4 <HAL_ADC_ConfigChannel+0x734>
      {
        if (ADC_VREFINT_INSTANCE(hadc))
 8003fa4:	687b      	ldr	r3, [r7, #4]
 8003fa6:	681b      	ldr	r3, [r3, #0]
 8003fa8:	4a18      	ldr	r2, [pc, #96]	; (800400c <HAL_ADC_ConfigChannel+0x74c>)
 8003faa:	4293      	cmp	r3, r2
 8003fac:	d022      	beq.n	8003ff4 <HAL_ADC_ConfigChannel+0x734>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8003fae:	687b      	ldr	r3, [r7, #4]
 8003fb0:	681b      	ldr	r3, [r3, #0]
 8003fb2:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8003fb6:	d004      	beq.n	8003fc2 <HAL_ADC_ConfigChannel+0x702>
 8003fb8:	687b      	ldr	r3, [r7, #4]
 8003fba:	681b      	ldr	r3, [r3, #0]
 8003fbc:	4a13      	ldr	r2, [pc, #76]	; (800400c <HAL_ADC_ConfigChannel+0x74c>)
 8003fbe:	4293      	cmp	r3, r2
 8003fc0:	d101      	bne.n	8003fc6 <HAL_ADC_ConfigChannel+0x706>
 8003fc2:	4a14      	ldr	r2, [pc, #80]	; (8004014 <HAL_ADC_ConfigChannel+0x754>)
 8003fc4:	e000      	b.n	8003fc8 <HAL_ADC_ConfigChannel+0x708>
 8003fc6:	4a14      	ldr	r2, [pc, #80]	; (8004018 <HAL_ADC_ConfigChannel+0x758>)
 8003fc8:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8003fcc:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8003fd0:	4619      	mov	r1, r3
 8003fd2:	4610      	mov	r0, r2
 8003fd4:	f7ff f905 	bl	80031e2 <LL_ADC_SetCommonPathInternalCh>
 8003fd8:	e00c      	b.n	8003ff4 <HAL_ADC_ConfigChannel+0x734>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003fda:	687b      	ldr	r3, [r7, #4]
 8003fdc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003fde:	f043 0220 	orr.w	r2, r3, #32
 8003fe2:	687b      	ldr	r3, [r7, #4]
 8003fe4:	65da      	str	r2, [r3, #92]	; 0x5c

    tmp_hal_status = HAL_ERROR;
 8003fe6:	2301      	movs	r3, #1
 8003fe8:	f887 3097 	strb.w	r3, [r7, #151]	; 0x97
 8003fec:	e002      	b.n	8003ff4 <HAL_ADC_ConfigChannel+0x734>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8003fee:	bf00      	nop
 8003ff0:	e000      	b.n	8003ff4 <HAL_ADC_ConfigChannel+0x734>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8003ff2:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8003ff4:	687b      	ldr	r3, [r7, #4]
 8003ff6:	2200      	movs	r2, #0
 8003ff8:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

  /* Return function status */
  return tmp_hal_status;
 8003ffc:	f897 3097 	ldrb.w	r3, [r7, #151]	; 0x97
}
 8004000:	4618      	mov	r0, r3
 8004002:	3798      	adds	r7, #152	; 0x98
 8004004:	46bd      	mov	sp, r7
 8004006:	bd80      	pop	{r7, pc}
 8004008:	c7520000 	.word	0xc7520000
 800400c:	50000100 	.word	0x50000100
 8004010:	50000500 	.word	0x50000500
 8004014:	50000300 	.word	0x50000300
 8004018:	50000700 	.word	0x50000700
 800401c:	cb840000 	.word	0xcb840000

08004020 <LL_ADC_IsEnabled>:
{
 8004020:	b480      	push	{r7}
 8004022:	b083      	sub	sp, #12
 8004024:	af00      	add	r7, sp, #0
 8004026:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8004028:	687b      	ldr	r3, [r7, #4]
 800402a:	689b      	ldr	r3, [r3, #8]
 800402c:	f003 0301 	and.w	r3, r3, #1
 8004030:	2b01      	cmp	r3, #1
 8004032:	d101      	bne.n	8004038 <LL_ADC_IsEnabled+0x18>
 8004034:	2301      	movs	r3, #1
 8004036:	e000      	b.n	800403a <LL_ADC_IsEnabled+0x1a>
 8004038:	2300      	movs	r3, #0
}
 800403a:	4618      	mov	r0, r3
 800403c:	370c      	adds	r7, #12
 800403e:	46bd      	mov	sp, r7
 8004040:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004044:	4770      	bx	lr

08004046 <LL_ADC_REG_IsConversionOngoing>:
{
 8004046:	b480      	push	{r7}
 8004048:	b083      	sub	sp, #12
 800404a:	af00      	add	r7, sp, #0
 800404c:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 800404e:	687b      	ldr	r3, [r7, #4]
 8004050:	689b      	ldr	r3, [r3, #8]
 8004052:	f003 0304 	and.w	r3, r3, #4
 8004056:	2b04      	cmp	r3, #4
 8004058:	d101      	bne.n	800405e <LL_ADC_REG_IsConversionOngoing+0x18>
 800405a:	2301      	movs	r3, #1
 800405c:	e000      	b.n	8004060 <LL_ADC_REG_IsConversionOngoing+0x1a>
 800405e:	2300      	movs	r3, #0
}
 8004060:	4618      	mov	r0, r3
 8004062:	370c      	adds	r7, #12
 8004064:	46bd      	mov	sp, r7
 8004066:	f85d 7b04 	ldr.w	r7, [sp], #4
 800406a:	4770      	bx	lr

0800406c <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param multimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, ADC_MultiModeTypeDef *multimode)
{
 800406c:	b590      	push	{r4, r7, lr}
 800406e:	b0a1      	sub	sp, #132	; 0x84
 8004070:	af00      	add	r7, sp, #0
 8004072:	6078      	str	r0, [r7, #4]
 8004074:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8004076:	2300      	movs	r3, #0
 8004078:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
    assert_param(IS_ADC_DMA_ACCESS_MULTIMODE(multimode->DMAAccessMode));
    assert_param(IS_ADC_SAMPLING_DELAY(multimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 800407c:	687b      	ldr	r3, [r7, #4]
 800407e:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 8004082:	2b01      	cmp	r3, #1
 8004084:	d101      	bne.n	800408a <HAL_ADCEx_MultiModeConfigChannel+0x1e>
 8004086:	2302      	movs	r3, #2
 8004088:	e0e3      	b.n	8004252 <HAL_ADCEx_MultiModeConfigChannel+0x1e6>
 800408a:	687b      	ldr	r3, [r7, #4]
 800408c:	2201      	movs	r2, #1
 800408e:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

  ADC_MULTI_SLAVE(hadc, &tmphadcSlave);
 8004092:	687b      	ldr	r3, [r7, #4]
 8004094:	681b      	ldr	r3, [r3, #0]
 8004096:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800409a:	d102      	bne.n	80040a2 <HAL_ADCEx_MultiModeConfigChannel+0x36>
 800409c:	4b6f      	ldr	r3, [pc, #444]	; (800425c <HAL_ADCEx_MultiModeConfigChannel+0x1f0>)
 800409e:	60bb      	str	r3, [r7, #8]
 80040a0:	e009      	b.n	80040b6 <HAL_ADCEx_MultiModeConfigChannel+0x4a>
 80040a2:	687b      	ldr	r3, [r7, #4]
 80040a4:	681b      	ldr	r3, [r3, #0]
 80040a6:	4a6e      	ldr	r2, [pc, #440]	; (8004260 <HAL_ADCEx_MultiModeConfigChannel+0x1f4>)
 80040a8:	4293      	cmp	r3, r2
 80040aa:	d102      	bne.n	80040b2 <HAL_ADCEx_MultiModeConfigChannel+0x46>
 80040ac:	4b6d      	ldr	r3, [pc, #436]	; (8004264 <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 80040ae:	60bb      	str	r3, [r7, #8]
 80040b0:	e001      	b.n	80040b6 <HAL_ADCEx_MultiModeConfigChannel+0x4a>
 80040b2:	2300      	movs	r3, #0
 80040b4:	60bb      	str	r3, [r7, #8]

  if (tmphadcSlave.Instance == NULL)
 80040b6:	68bb      	ldr	r3, [r7, #8]
 80040b8:	2b00      	cmp	r3, #0
 80040ba:	d10b      	bne.n	80040d4 <HAL_ADCEx_MultiModeConfigChannel+0x68>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80040bc:	687b      	ldr	r3, [r7, #4]
 80040be:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80040c0:	f043 0220 	orr.w	r2, r3, #32
 80040c4:	687b      	ldr	r3, [r7, #4]
 80040c6:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 80040c8:	687b      	ldr	r3, [r7, #4]
 80040ca:	2200      	movs	r2, #0
 80040cc:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

    return HAL_ERROR;
 80040d0:	2301      	movs	r3, #1
 80040d2:	e0be      	b.n	8004252 <HAL_ADCEx_MultiModeConfigChannel+0x1e6>
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DMA configuration                                           */
  /*  - Multimode DMA mode                                                    */
  tmphadcSlave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmphadcSlave)->Instance);
 80040d4:	68bb      	ldr	r3, [r7, #8]
 80040d6:	4618      	mov	r0, r3
 80040d8:	f7ff ffb5 	bl	8004046 <LL_ADC_REG_IsConversionOngoing>
 80040dc:	67b8      	str	r0, [r7, #120]	; 0x78
  if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80040de:	687b      	ldr	r3, [r7, #4]
 80040e0:	681b      	ldr	r3, [r3, #0]
 80040e2:	4618      	mov	r0, r3
 80040e4:	f7ff ffaf 	bl	8004046 <LL_ADC_REG_IsConversionOngoing>
 80040e8:	4603      	mov	r3, r0
 80040ea:	2b00      	cmp	r3, #0
 80040ec:	f040 80a0 	bne.w	8004230 <HAL_ADCEx_MultiModeConfigChannel+0x1c4>
      && (tmphadcSlave_conversion_on_going == 0UL))
 80040f0:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80040f2:	2b00      	cmp	r3, #0
 80040f4:	f040 809c 	bne.w	8004230 <HAL_ADCEx_MultiModeConfigChannel+0x1c4>
  {
    /* Pointer to the common control register */
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 80040f8:	687b      	ldr	r3, [r7, #4]
 80040fa:	681b      	ldr	r3, [r3, #0]
 80040fc:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8004100:	d004      	beq.n	800410c <HAL_ADCEx_MultiModeConfigChannel+0xa0>
 8004102:	687b      	ldr	r3, [r7, #4]
 8004104:	681b      	ldr	r3, [r3, #0]
 8004106:	4a55      	ldr	r2, [pc, #340]	; (800425c <HAL_ADCEx_MultiModeConfigChannel+0x1f0>)
 8004108:	4293      	cmp	r3, r2
 800410a:	d101      	bne.n	8004110 <HAL_ADCEx_MultiModeConfigChannel+0xa4>
 800410c:	4b56      	ldr	r3, [pc, #344]	; (8004268 <HAL_ADCEx_MultiModeConfigChannel+0x1fc>)
 800410e:	e000      	b.n	8004112 <HAL_ADCEx_MultiModeConfigChannel+0xa6>
 8004110:	4b56      	ldr	r3, [pc, #344]	; (800426c <HAL_ADCEx_MultiModeConfigChannel+0x200>)
 8004112:	677b      	str	r3, [r7, #116]	; 0x74

    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8004114:	683b      	ldr	r3, [r7, #0]
 8004116:	681b      	ldr	r3, [r3, #0]
 8004118:	2b00      	cmp	r3, #0
 800411a:	d04b      	beq.n	80041b4 <HAL_ADCEx_MultiModeConfigChannel+0x148>
    {
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG,
 800411c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800411e:	689b      	ldr	r3, [r3, #8]
 8004120:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8004124:	683b      	ldr	r3, [r7, #0]
 8004126:	6859      	ldr	r1, [r3, #4]
 8004128:	687b      	ldr	r3, [r7, #4]
 800412a:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 800412e:	035b      	lsls	r3, r3, #13
 8004130:	430b      	orrs	r3, r1
 8004132:	431a      	orrs	r2, r3
 8004134:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004136:	609a      	str	r2, [r3, #8]
      /*      from 1 to 10 clock cycles for 10 bits,                              */
      /*      from 1 to 8 clock cycles for 8 bits                                 */
      /*      from 1 to 6 clock cycles for 6 bits                                 */
      /*    If a higher delay is selected, it will be clipped to maximum delay    */
      /*    range                                                                 */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8004138:	687b      	ldr	r3, [r7, #4]
 800413a:	681b      	ldr	r3, [r3, #0]
 800413c:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8004140:	d004      	beq.n	800414c <HAL_ADCEx_MultiModeConfigChannel+0xe0>
 8004142:	687b      	ldr	r3, [r7, #4]
 8004144:	681b      	ldr	r3, [r3, #0]
 8004146:	4a45      	ldr	r2, [pc, #276]	; (800425c <HAL_ADCEx_MultiModeConfigChannel+0x1f0>)
 8004148:	4293      	cmp	r3, r2
 800414a:	d10f      	bne.n	800416c <HAL_ADCEx_MultiModeConfigChannel+0x100>
 800414c:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
 8004150:	f7ff ff66 	bl	8004020 <LL_ADC_IsEnabled>
 8004154:	4604      	mov	r4, r0
 8004156:	4841      	ldr	r0, [pc, #260]	; (800425c <HAL_ADCEx_MultiModeConfigChannel+0x1f0>)
 8004158:	f7ff ff62 	bl	8004020 <LL_ADC_IsEnabled>
 800415c:	4603      	mov	r3, r0
 800415e:	4323      	orrs	r3, r4
 8004160:	2b00      	cmp	r3, #0
 8004162:	bf0c      	ite	eq
 8004164:	2301      	moveq	r3, #1
 8004166:	2300      	movne	r3, #0
 8004168:	b2db      	uxtb	r3, r3
 800416a:	e012      	b.n	8004192 <HAL_ADCEx_MultiModeConfigChannel+0x126>
 800416c:	483c      	ldr	r0, [pc, #240]	; (8004260 <HAL_ADCEx_MultiModeConfigChannel+0x1f4>)
 800416e:	f7ff ff57 	bl	8004020 <LL_ADC_IsEnabled>
 8004172:	4604      	mov	r4, r0
 8004174:	483b      	ldr	r0, [pc, #236]	; (8004264 <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 8004176:	f7ff ff53 	bl	8004020 <LL_ADC_IsEnabled>
 800417a:	4603      	mov	r3, r0
 800417c:	431c      	orrs	r4, r3
 800417e:	483c      	ldr	r0, [pc, #240]	; (8004270 <HAL_ADCEx_MultiModeConfigChannel+0x204>)
 8004180:	f7ff ff4e 	bl	8004020 <LL_ADC_IsEnabled>
 8004184:	4603      	mov	r3, r0
 8004186:	4323      	orrs	r3, r4
 8004188:	2b00      	cmp	r3, #0
 800418a:	bf0c      	ite	eq
 800418c:	2301      	moveq	r3, #1
 800418e:	2300      	movne	r3, #0
 8004190:	b2db      	uxtb	r3, r3
 8004192:	2b00      	cmp	r3, #0
 8004194:	d056      	beq.n	8004244 <HAL_ADCEx_MultiModeConfigChannel+0x1d8>
      {
        MODIFY_REG(tmpADC_Common->CCR,
 8004196:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004198:	689b      	ldr	r3, [r3, #8]
 800419a:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 800419e:	f023 030f 	bic.w	r3, r3, #15
 80041a2:	683a      	ldr	r2, [r7, #0]
 80041a4:	6811      	ldr	r1, [r2, #0]
 80041a6:	683a      	ldr	r2, [r7, #0]
 80041a8:	6892      	ldr	r2, [r2, #8]
 80041aa:	430a      	orrs	r2, r1
 80041ac:	431a      	orrs	r2, r3
 80041ae:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80041b0:	609a      	str	r2, [r3, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 80041b2:	e047      	b.n	8004244 <HAL_ADCEx_MultiModeConfigChannel+0x1d8>
                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG);
 80041b4:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80041b6:	689b      	ldr	r3, [r3, #8]
 80041b8:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80041bc:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80041be:	609a      	str	r2, [r3, #8]

      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 80041c0:	687b      	ldr	r3, [r7, #4]
 80041c2:	681b      	ldr	r3, [r3, #0]
 80041c4:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80041c8:	d004      	beq.n	80041d4 <HAL_ADCEx_MultiModeConfigChannel+0x168>
 80041ca:	687b      	ldr	r3, [r7, #4]
 80041cc:	681b      	ldr	r3, [r3, #0]
 80041ce:	4a23      	ldr	r2, [pc, #140]	; (800425c <HAL_ADCEx_MultiModeConfigChannel+0x1f0>)
 80041d0:	4293      	cmp	r3, r2
 80041d2:	d10f      	bne.n	80041f4 <HAL_ADCEx_MultiModeConfigChannel+0x188>
 80041d4:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
 80041d8:	f7ff ff22 	bl	8004020 <LL_ADC_IsEnabled>
 80041dc:	4604      	mov	r4, r0
 80041de:	481f      	ldr	r0, [pc, #124]	; (800425c <HAL_ADCEx_MultiModeConfigChannel+0x1f0>)
 80041e0:	f7ff ff1e 	bl	8004020 <LL_ADC_IsEnabled>
 80041e4:	4603      	mov	r3, r0
 80041e6:	4323      	orrs	r3, r4
 80041e8:	2b00      	cmp	r3, #0
 80041ea:	bf0c      	ite	eq
 80041ec:	2301      	moveq	r3, #1
 80041ee:	2300      	movne	r3, #0
 80041f0:	b2db      	uxtb	r3, r3
 80041f2:	e012      	b.n	800421a <HAL_ADCEx_MultiModeConfigChannel+0x1ae>
 80041f4:	481a      	ldr	r0, [pc, #104]	; (8004260 <HAL_ADCEx_MultiModeConfigChannel+0x1f4>)
 80041f6:	f7ff ff13 	bl	8004020 <LL_ADC_IsEnabled>
 80041fa:	4604      	mov	r4, r0
 80041fc:	4819      	ldr	r0, [pc, #100]	; (8004264 <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 80041fe:	f7ff ff0f 	bl	8004020 <LL_ADC_IsEnabled>
 8004202:	4603      	mov	r3, r0
 8004204:	431c      	orrs	r4, r3
 8004206:	481a      	ldr	r0, [pc, #104]	; (8004270 <HAL_ADCEx_MultiModeConfigChannel+0x204>)
 8004208:	f7ff ff0a 	bl	8004020 <LL_ADC_IsEnabled>
 800420c:	4603      	mov	r3, r0
 800420e:	4323      	orrs	r3, r4
 8004210:	2b00      	cmp	r3, #0
 8004212:	bf0c      	ite	eq
 8004214:	2301      	moveq	r3, #1
 8004216:	2300      	movne	r3, #0
 8004218:	b2db      	uxtb	r3, r3
 800421a:	2b00      	cmp	r3, #0
 800421c:	d012      	beq.n	8004244 <HAL_ADCEx_MultiModeConfigChannel+0x1d8>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 800421e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004220:	689b      	ldr	r3, [r3, #8]
 8004222:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 8004226:	f023 030f 	bic.w	r3, r3, #15
 800422a:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 800422c:	6093      	str	r3, [r2, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 800422e:	e009      	b.n	8004244 <HAL_ADCEx_MultiModeConfigChannel+0x1d8>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8004230:	687b      	ldr	r3, [r7, #4]
 8004232:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004234:	f043 0220 	orr.w	r2, r3, #32
 8004238:	687b      	ldr	r3, [r7, #4]
 800423a:	65da      	str	r2, [r3, #92]	; 0x5c

    tmp_hal_status = HAL_ERROR;
 800423c:	2301      	movs	r3, #1
 800423e:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
 8004242:	e000      	b.n	8004246 <HAL_ADCEx_MultiModeConfigChannel+0x1da>
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8004244:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8004246:	687b      	ldr	r3, [r7, #4]
 8004248:	2200      	movs	r2, #0
 800424a:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

  /* Return function status */
  return tmp_hal_status;
 800424e:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
}
 8004252:	4618      	mov	r0, r3
 8004254:	3784      	adds	r7, #132	; 0x84
 8004256:	46bd      	mov	sp, r7
 8004258:	bd90      	pop	{r4, r7, pc}
 800425a:	bf00      	nop
 800425c:	50000100 	.word	0x50000100
 8004260:	50000400 	.word	0x50000400
 8004264:	50000500 	.word	0x50000500
 8004268:	50000300 	.word	0x50000300
 800426c:	50000700 	.word	0x50000700
 8004270:	50000600 	.word	0x50000600

08004274 <LL_EXTI_EnableIT_0_31>:
{
 8004274:	b480      	push	{r7}
 8004276:	b083      	sub	sp, #12
 8004278:	af00      	add	r7, sp, #0
 800427a:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->IMR1, ExtiLine);
 800427c:	4b05      	ldr	r3, [pc, #20]	; (8004294 <LL_EXTI_EnableIT_0_31+0x20>)
 800427e:	681a      	ldr	r2, [r3, #0]
 8004280:	4904      	ldr	r1, [pc, #16]	; (8004294 <LL_EXTI_EnableIT_0_31+0x20>)
 8004282:	687b      	ldr	r3, [r7, #4]
 8004284:	4313      	orrs	r3, r2
 8004286:	600b      	str	r3, [r1, #0]
}
 8004288:	bf00      	nop
 800428a:	370c      	adds	r7, #12
 800428c:	46bd      	mov	sp, r7
 800428e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004292:	4770      	bx	lr
 8004294:	40010400 	.word	0x40010400

08004298 <LL_EXTI_EnableIT_32_63>:
{
 8004298:	b480      	push	{r7}
 800429a:	b083      	sub	sp, #12
 800429c:	af00      	add	r7, sp, #0
 800429e:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->IMR2, ExtiLine);
 80042a0:	4b05      	ldr	r3, [pc, #20]	; (80042b8 <LL_EXTI_EnableIT_32_63+0x20>)
 80042a2:	6a1a      	ldr	r2, [r3, #32]
 80042a4:	4904      	ldr	r1, [pc, #16]	; (80042b8 <LL_EXTI_EnableIT_32_63+0x20>)
 80042a6:	687b      	ldr	r3, [r7, #4]
 80042a8:	4313      	orrs	r3, r2
 80042aa:	620b      	str	r3, [r1, #32]
}
 80042ac:	bf00      	nop
 80042ae:	370c      	adds	r7, #12
 80042b0:	46bd      	mov	sp, r7
 80042b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042b6:	4770      	bx	lr
 80042b8:	40010400 	.word	0x40010400

080042bc <LL_EXTI_DisableIT_0_31>:
{
 80042bc:	b480      	push	{r7}
 80042be:	b083      	sub	sp, #12
 80042c0:	af00      	add	r7, sp, #0
 80042c2:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->IMR1, ExtiLine);
 80042c4:	4b06      	ldr	r3, [pc, #24]	; (80042e0 <LL_EXTI_DisableIT_0_31+0x24>)
 80042c6:	681a      	ldr	r2, [r3, #0]
 80042c8:	687b      	ldr	r3, [r7, #4]
 80042ca:	43db      	mvns	r3, r3
 80042cc:	4904      	ldr	r1, [pc, #16]	; (80042e0 <LL_EXTI_DisableIT_0_31+0x24>)
 80042ce:	4013      	ands	r3, r2
 80042d0:	600b      	str	r3, [r1, #0]
}
 80042d2:	bf00      	nop
 80042d4:	370c      	adds	r7, #12
 80042d6:	46bd      	mov	sp, r7
 80042d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042dc:	4770      	bx	lr
 80042de:	bf00      	nop
 80042e0:	40010400 	.word	0x40010400

080042e4 <LL_EXTI_DisableIT_32_63>:
{
 80042e4:	b480      	push	{r7}
 80042e6:	b083      	sub	sp, #12
 80042e8:	af00      	add	r7, sp, #0
 80042ea:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->IMR2, ExtiLine);
 80042ec:	4b06      	ldr	r3, [pc, #24]	; (8004308 <LL_EXTI_DisableIT_32_63+0x24>)
 80042ee:	6a1a      	ldr	r2, [r3, #32]
 80042f0:	687b      	ldr	r3, [r7, #4]
 80042f2:	43db      	mvns	r3, r3
 80042f4:	4904      	ldr	r1, [pc, #16]	; (8004308 <LL_EXTI_DisableIT_32_63+0x24>)
 80042f6:	4013      	ands	r3, r2
 80042f8:	620b      	str	r3, [r1, #32]
}
 80042fa:	bf00      	nop
 80042fc:	370c      	adds	r7, #12
 80042fe:	46bd      	mov	sp, r7
 8004300:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004304:	4770      	bx	lr
 8004306:	bf00      	nop
 8004308:	40010400 	.word	0x40010400

0800430c <LL_EXTI_EnableEvent_0_31>:
{
 800430c:	b480      	push	{r7}
 800430e:	b083      	sub	sp, #12
 8004310:	af00      	add	r7, sp, #0
 8004312:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->EMR1, ExtiLine);
 8004314:	4b05      	ldr	r3, [pc, #20]	; (800432c <LL_EXTI_EnableEvent_0_31+0x20>)
 8004316:	685a      	ldr	r2, [r3, #4]
 8004318:	4904      	ldr	r1, [pc, #16]	; (800432c <LL_EXTI_EnableEvent_0_31+0x20>)
 800431a:	687b      	ldr	r3, [r7, #4]
 800431c:	4313      	orrs	r3, r2
 800431e:	604b      	str	r3, [r1, #4]
}
 8004320:	bf00      	nop
 8004322:	370c      	adds	r7, #12
 8004324:	46bd      	mov	sp, r7
 8004326:	f85d 7b04 	ldr.w	r7, [sp], #4
 800432a:	4770      	bx	lr
 800432c:	40010400 	.word	0x40010400

08004330 <LL_EXTI_EnableEvent_32_63>:
{
 8004330:	b480      	push	{r7}
 8004332:	b083      	sub	sp, #12
 8004334:	af00      	add	r7, sp, #0
 8004336:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->EMR2, ExtiLine);
 8004338:	4b05      	ldr	r3, [pc, #20]	; (8004350 <LL_EXTI_EnableEvent_32_63+0x20>)
 800433a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800433c:	4904      	ldr	r1, [pc, #16]	; (8004350 <LL_EXTI_EnableEvent_32_63+0x20>)
 800433e:	687b      	ldr	r3, [r7, #4]
 8004340:	4313      	orrs	r3, r2
 8004342:	624b      	str	r3, [r1, #36]	; 0x24
}
 8004344:	bf00      	nop
 8004346:	370c      	adds	r7, #12
 8004348:	46bd      	mov	sp, r7
 800434a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800434e:	4770      	bx	lr
 8004350:	40010400 	.word	0x40010400

08004354 <LL_EXTI_DisableEvent_0_31>:
{
 8004354:	b480      	push	{r7}
 8004356:	b083      	sub	sp, #12
 8004358:	af00      	add	r7, sp, #0
 800435a:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->EMR1, ExtiLine);
 800435c:	4b06      	ldr	r3, [pc, #24]	; (8004378 <LL_EXTI_DisableEvent_0_31+0x24>)
 800435e:	685a      	ldr	r2, [r3, #4]
 8004360:	687b      	ldr	r3, [r7, #4]
 8004362:	43db      	mvns	r3, r3
 8004364:	4904      	ldr	r1, [pc, #16]	; (8004378 <LL_EXTI_DisableEvent_0_31+0x24>)
 8004366:	4013      	ands	r3, r2
 8004368:	604b      	str	r3, [r1, #4]
}
 800436a:	bf00      	nop
 800436c:	370c      	adds	r7, #12
 800436e:	46bd      	mov	sp, r7
 8004370:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004374:	4770      	bx	lr
 8004376:	bf00      	nop
 8004378:	40010400 	.word	0x40010400

0800437c <LL_EXTI_DisableEvent_32_63>:
{
 800437c:	b480      	push	{r7}
 800437e:	b083      	sub	sp, #12
 8004380:	af00      	add	r7, sp, #0
 8004382:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->EMR2, ExtiLine);
 8004384:	4b06      	ldr	r3, [pc, #24]	; (80043a0 <LL_EXTI_DisableEvent_32_63+0x24>)
 8004386:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8004388:	687b      	ldr	r3, [r7, #4]
 800438a:	43db      	mvns	r3, r3
 800438c:	4904      	ldr	r1, [pc, #16]	; (80043a0 <LL_EXTI_DisableEvent_32_63+0x24>)
 800438e:	4013      	ands	r3, r2
 8004390:	624b      	str	r3, [r1, #36]	; 0x24
}
 8004392:	bf00      	nop
 8004394:	370c      	adds	r7, #12
 8004396:	46bd      	mov	sp, r7
 8004398:	f85d 7b04 	ldr.w	r7, [sp], #4
 800439c:	4770      	bx	lr
 800439e:	bf00      	nop
 80043a0:	40010400 	.word	0x40010400

080043a4 <LL_EXTI_EnableRisingTrig_0_31>:
{
 80043a4:	b480      	push	{r7}
 80043a6:	b083      	sub	sp, #12
 80043a8:	af00      	add	r7, sp, #0
 80043aa:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->RTSR1, ExtiLine);
 80043ac:	4b05      	ldr	r3, [pc, #20]	; (80043c4 <LL_EXTI_EnableRisingTrig_0_31+0x20>)
 80043ae:	689a      	ldr	r2, [r3, #8]
 80043b0:	4904      	ldr	r1, [pc, #16]	; (80043c4 <LL_EXTI_EnableRisingTrig_0_31+0x20>)
 80043b2:	687b      	ldr	r3, [r7, #4]
 80043b4:	4313      	orrs	r3, r2
 80043b6:	608b      	str	r3, [r1, #8]
}
 80043b8:	bf00      	nop
 80043ba:	370c      	adds	r7, #12
 80043bc:	46bd      	mov	sp, r7
 80043be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043c2:	4770      	bx	lr
 80043c4:	40010400 	.word	0x40010400

080043c8 <LL_EXTI_EnableRisingTrig_32_63>:
{
 80043c8:	b480      	push	{r7}
 80043ca:	b083      	sub	sp, #12
 80043cc:	af00      	add	r7, sp, #0
 80043ce:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->RTSR2, ExtiLine);
 80043d0:	4b05      	ldr	r3, [pc, #20]	; (80043e8 <LL_EXTI_EnableRisingTrig_32_63+0x20>)
 80043d2:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80043d4:	4904      	ldr	r1, [pc, #16]	; (80043e8 <LL_EXTI_EnableRisingTrig_32_63+0x20>)
 80043d6:	687b      	ldr	r3, [r7, #4]
 80043d8:	4313      	orrs	r3, r2
 80043da:	628b      	str	r3, [r1, #40]	; 0x28
}
 80043dc:	bf00      	nop
 80043de:	370c      	adds	r7, #12
 80043e0:	46bd      	mov	sp, r7
 80043e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043e6:	4770      	bx	lr
 80043e8:	40010400 	.word	0x40010400

080043ec <LL_EXTI_DisableRisingTrig_0_31>:
{
 80043ec:	b480      	push	{r7}
 80043ee:	b083      	sub	sp, #12
 80043f0:	af00      	add	r7, sp, #0
 80043f2:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->RTSR1, ExtiLine);
 80043f4:	4b06      	ldr	r3, [pc, #24]	; (8004410 <LL_EXTI_DisableRisingTrig_0_31+0x24>)
 80043f6:	689a      	ldr	r2, [r3, #8]
 80043f8:	687b      	ldr	r3, [r7, #4]
 80043fa:	43db      	mvns	r3, r3
 80043fc:	4904      	ldr	r1, [pc, #16]	; (8004410 <LL_EXTI_DisableRisingTrig_0_31+0x24>)
 80043fe:	4013      	ands	r3, r2
 8004400:	608b      	str	r3, [r1, #8]
}
 8004402:	bf00      	nop
 8004404:	370c      	adds	r7, #12
 8004406:	46bd      	mov	sp, r7
 8004408:	f85d 7b04 	ldr.w	r7, [sp], #4
 800440c:	4770      	bx	lr
 800440e:	bf00      	nop
 8004410:	40010400 	.word	0x40010400

08004414 <LL_EXTI_DisableRisingTrig_32_63>:
{
 8004414:	b480      	push	{r7}
 8004416:	b083      	sub	sp, #12
 8004418:	af00      	add	r7, sp, #0
 800441a:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->RTSR2, ExtiLine);
 800441c:	4b06      	ldr	r3, [pc, #24]	; (8004438 <LL_EXTI_DisableRisingTrig_32_63+0x24>)
 800441e:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8004420:	687b      	ldr	r3, [r7, #4]
 8004422:	43db      	mvns	r3, r3
 8004424:	4904      	ldr	r1, [pc, #16]	; (8004438 <LL_EXTI_DisableRisingTrig_32_63+0x24>)
 8004426:	4013      	ands	r3, r2
 8004428:	628b      	str	r3, [r1, #40]	; 0x28
}
 800442a:	bf00      	nop
 800442c:	370c      	adds	r7, #12
 800442e:	46bd      	mov	sp, r7
 8004430:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004434:	4770      	bx	lr
 8004436:	bf00      	nop
 8004438:	40010400 	.word	0x40010400

0800443c <LL_EXTI_EnableFallingTrig_0_31>:
{
 800443c:	b480      	push	{r7}
 800443e:	b083      	sub	sp, #12
 8004440:	af00      	add	r7, sp, #0
 8004442:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->FTSR1, ExtiLine);
 8004444:	4b05      	ldr	r3, [pc, #20]	; (800445c <LL_EXTI_EnableFallingTrig_0_31+0x20>)
 8004446:	68da      	ldr	r2, [r3, #12]
 8004448:	4904      	ldr	r1, [pc, #16]	; (800445c <LL_EXTI_EnableFallingTrig_0_31+0x20>)
 800444a:	687b      	ldr	r3, [r7, #4]
 800444c:	4313      	orrs	r3, r2
 800444e:	60cb      	str	r3, [r1, #12]
}
 8004450:	bf00      	nop
 8004452:	370c      	adds	r7, #12
 8004454:	46bd      	mov	sp, r7
 8004456:	f85d 7b04 	ldr.w	r7, [sp], #4
 800445a:	4770      	bx	lr
 800445c:	40010400 	.word	0x40010400

08004460 <LL_EXTI_EnableFallingTrig_32_63>:
{
 8004460:	b480      	push	{r7}
 8004462:	b083      	sub	sp, #12
 8004464:	af00      	add	r7, sp, #0
 8004466:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->FTSR2, ExtiLine);
 8004468:	4b05      	ldr	r3, [pc, #20]	; (8004480 <LL_EXTI_EnableFallingTrig_32_63+0x20>)
 800446a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800446c:	4904      	ldr	r1, [pc, #16]	; (8004480 <LL_EXTI_EnableFallingTrig_32_63+0x20>)
 800446e:	687b      	ldr	r3, [r7, #4]
 8004470:	4313      	orrs	r3, r2
 8004472:	62cb      	str	r3, [r1, #44]	; 0x2c
}
 8004474:	bf00      	nop
 8004476:	370c      	adds	r7, #12
 8004478:	46bd      	mov	sp, r7
 800447a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800447e:	4770      	bx	lr
 8004480:	40010400 	.word	0x40010400

08004484 <LL_EXTI_DisableFallingTrig_0_31>:
{
 8004484:	b480      	push	{r7}
 8004486:	b083      	sub	sp, #12
 8004488:	af00      	add	r7, sp, #0
 800448a:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->FTSR1, ExtiLine);
 800448c:	4b06      	ldr	r3, [pc, #24]	; (80044a8 <LL_EXTI_DisableFallingTrig_0_31+0x24>)
 800448e:	68da      	ldr	r2, [r3, #12]
 8004490:	687b      	ldr	r3, [r7, #4]
 8004492:	43db      	mvns	r3, r3
 8004494:	4904      	ldr	r1, [pc, #16]	; (80044a8 <LL_EXTI_DisableFallingTrig_0_31+0x24>)
 8004496:	4013      	ands	r3, r2
 8004498:	60cb      	str	r3, [r1, #12]
}
 800449a:	bf00      	nop
 800449c:	370c      	adds	r7, #12
 800449e:	46bd      	mov	sp, r7
 80044a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044a4:	4770      	bx	lr
 80044a6:	bf00      	nop
 80044a8:	40010400 	.word	0x40010400

080044ac <LL_EXTI_DisableFallingTrig_32_63>:
{
 80044ac:	b480      	push	{r7}
 80044ae:	b083      	sub	sp, #12
 80044b0:	af00      	add	r7, sp, #0
 80044b2:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->FTSR2, ExtiLine);
 80044b4:	4b06      	ldr	r3, [pc, #24]	; (80044d0 <LL_EXTI_DisableFallingTrig_32_63+0x24>)
 80044b6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80044b8:	687b      	ldr	r3, [r7, #4]
 80044ba:	43db      	mvns	r3, r3
 80044bc:	4904      	ldr	r1, [pc, #16]	; (80044d0 <LL_EXTI_DisableFallingTrig_32_63+0x24>)
 80044be:	4013      	ands	r3, r2
 80044c0:	62cb      	str	r3, [r1, #44]	; 0x2c
}
 80044c2:	bf00      	nop
 80044c4:	370c      	adds	r7, #12
 80044c6:	46bd      	mov	sp, r7
 80044c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044cc:	4770      	bx	lr
 80044ce:	bf00      	nop
 80044d0:	40010400 	.word	0x40010400

080044d4 <LL_EXTI_ClearFlag_0_31>:
{
 80044d4:	b480      	push	{r7}
 80044d6:	b083      	sub	sp, #12
 80044d8:	af00      	add	r7, sp, #0
 80044da:	6078      	str	r0, [r7, #4]
  WRITE_REG(EXTI->PR1, ExtiLine);
 80044dc:	4a04      	ldr	r2, [pc, #16]	; (80044f0 <LL_EXTI_ClearFlag_0_31+0x1c>)
 80044de:	687b      	ldr	r3, [r7, #4]
 80044e0:	6153      	str	r3, [r2, #20]
}
 80044e2:	bf00      	nop
 80044e4:	370c      	adds	r7, #12
 80044e6:	46bd      	mov	sp, r7
 80044e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044ec:	4770      	bx	lr
 80044ee:	bf00      	nop
 80044f0:	40010400 	.word	0x40010400

080044f4 <LL_EXTI_ClearFlag_32_63>:
  *         @arg @ref LL_EXTI_LINE_41
  * @note   (*): Available in some devices
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_ClearFlag_32_63(uint32_t ExtiLine)
{
 80044f4:	b480      	push	{r7}
 80044f6:	b083      	sub	sp, #12
 80044f8:	af00      	add	r7, sp, #0
 80044fa:	6078      	str	r0, [r7, #4]
  WRITE_REG(EXTI->PR2, ExtiLine);
 80044fc:	4a04      	ldr	r2, [pc, #16]	; (8004510 <LL_EXTI_ClearFlag_32_63+0x1c>)
 80044fe:	687b      	ldr	r3, [r7, #4]
 8004500:	6353      	str	r3, [r2, #52]	; 0x34
}
 8004502:	bf00      	nop
 8004504:	370c      	adds	r7, #12
 8004506:	46bd      	mov	sp, r7
 8004508:	f85d 7b04 	ldr.w	r7, [sp], #4
 800450c:	4770      	bx	lr
 800450e:	bf00      	nop
 8004510:	40010400 	.word	0x40010400

08004514 <HAL_COMP_Init>:
  *         To unlock the configuration, perform a system reset.
  * @param  hcomp  COMP handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_COMP_Init(COMP_HandleTypeDef *hcomp)
{
 8004514:	b580      	push	{r7, lr}
 8004516:	b088      	sub	sp, #32
 8004518:	af00      	add	r7, sp, #0
 800451a:	6078      	str	r0, [r7, #4]
  uint32_t tmp_csr;
  uint32_t exti_line;
  uint32_t comp_voltage_scaler_initialized; /* Value "0" if comparator voltage scaler is not initialized */
  __IO uint32_t wait_loop_index = 0UL;
 800451c:	2300      	movs	r3, #0
 800451e:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef status = HAL_OK;
 8004520:	2300      	movs	r3, #0
 8004522:	77fb      	strb	r3, [r7, #31]

  /* Check the COMP handle allocation and lock status */
  if(hcomp == NULL)
 8004524:	687b      	ldr	r3, [r7, #4]
 8004526:	2b00      	cmp	r3, #0
 8004528:	d102      	bne.n	8004530 <HAL_COMP_Init+0x1c>
  {
    status = HAL_ERROR;
 800452a:	2301      	movs	r3, #1
 800452c:	77fb      	strb	r3, [r7, #31]
 800452e:	e180      	b.n	8004832 <HAL_COMP_Init+0x31e>
  }
  else if(__HAL_COMP_IS_LOCKED(hcomp))
 8004530:	687b      	ldr	r3, [r7, #4]
 8004532:	681b      	ldr	r3, [r3, #0]
 8004534:	681b      	ldr	r3, [r3, #0]
 8004536:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800453a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800453e:	d102      	bne.n	8004546 <HAL_COMP_Init+0x32>
  {
    status = HAL_ERROR;
 8004540:	2301      	movs	r3, #1
 8004542:	77fb      	strb	r3, [r7, #31]
 8004544:	e175      	b.n	8004832 <HAL_COMP_Init+0x31e>
    assert_param(IS_COMP_OUTPUTPOL(hcomp->Init.OutputPol));
    assert_param(IS_COMP_HYSTERESIS(hcomp->Init.Hysteresis));
    assert_param(IS_COMP_BLANKINGSRC_INSTANCE(hcomp->Instance, hcomp->Init.BlankingSrce));
    assert_param(IS_COMP_TRIGGERMODE(hcomp->Init.TriggerMode));

    if(hcomp->State == HAL_COMP_STATE_RESET)
 8004546:	687b      	ldr	r3, [r7, #4]
 8004548:	7f5b      	ldrb	r3, [r3, #29]
 800454a:	b2db      	uxtb	r3, r3
 800454c:	2b00      	cmp	r3, #0
 800454e:	d108      	bne.n	8004562 <HAL_COMP_Init+0x4e>
    {
      /* Allocate lock resource and initialize it */
      hcomp->Lock = HAL_UNLOCKED;
 8004550:	687b      	ldr	r3, [r7, #4]
 8004552:	2200      	movs	r2, #0
 8004554:	771a      	strb	r2, [r3, #28]

      /* Set COMP error code to none */
      COMP_CLEAR_ERRORCODE(hcomp);
 8004556:	687b      	ldr	r3, [r7, #4]
 8004558:	2200      	movs	r2, #0
 800455a:	621a      	str	r2, [r3, #32]
#else
      /* Init the low level hardware */
      /* Note: Internal control clock of the comparators must                 */
      /*       be enabled in "HAL_COMP_MspInit()"                             */
      /*       using "__HAL_RCC_SYSCFG_CLK_ENABLE()".                         */
      HAL_COMP_MspInit(hcomp);
 800455c:	6878      	ldr	r0, [r7, #4]
 800455e:	f7fd f8ed 	bl	800173c <HAL_COMP_MspInit>
#endif /* USE_HAL_COMP_REGISTER_CALLBACKS */
    }

    /* Memorize voltage scaler state before initialization */
    comp_voltage_scaler_initialized = READ_BIT(hcomp->Instance->CSR, COMP_CSR_SCALEN);
 8004562:	687b      	ldr	r3, [r7, #4]
 8004564:	681b      	ldr	r3, [r3, #0]
 8004566:	681b      	ldr	r3, [r3, #0]
 8004568:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800456c:	61bb      	str	r3, [r7, #24]

    /* Set COMP parameters */
    tmp_csr = (  hcomp->Init.InputMinus
 800456e:	687b      	ldr	r3, [r7, #4]
 8004570:	689a      	ldr	r2, [r3, #8]
               | hcomp->Init.InputPlus
 8004572:	687b      	ldr	r3, [r7, #4]
 8004574:	685b      	ldr	r3, [r3, #4]
 8004576:	431a      	orrs	r2, r3
               | hcomp->Init.BlankingSrce
 8004578:	687b      	ldr	r3, [r7, #4]
 800457a:	695b      	ldr	r3, [r3, #20]
 800457c:	431a      	orrs	r2, r3
               | hcomp->Init.Hysteresis
 800457e:	687b      	ldr	r3, [r7, #4]
 8004580:	68db      	ldr	r3, [r3, #12]
 8004582:	431a      	orrs	r2, r3
               | hcomp->Init.OutputPol
 8004584:	687b      	ldr	r3, [r7, #4]
 8004586:	691b      	ldr	r3, [r3, #16]
    tmp_csr = (  hcomp->Init.InputMinus
 8004588:	4313      	orrs	r3, r2
 800458a:	617b      	str	r3, [r7, #20]
              );

    /* Set parameters in COMP register */
    /* Note: Update all bits except read-only, lock and enable bits */
    MODIFY_REG(hcomp->Instance->CSR,
 800458c:	687b      	ldr	r3, [r7, #4]
 800458e:	681b      	ldr	r3, [r3, #0]
 8004590:	681a      	ldr	r2, [r3, #0]
 8004592:	4b98      	ldr	r3, [pc, #608]	; (80047f4 <HAL_COMP_Init+0x2e0>)
 8004594:	4013      	ands	r3, r2
 8004596:	687a      	ldr	r2, [r7, #4]
 8004598:	6812      	ldr	r2, [r2, #0]
 800459a:	6979      	ldr	r1, [r7, #20]
 800459c:	430b      	orrs	r3, r1
 800459e:	6013      	str	r3, [r2, #0]
               tmp_csr
              );

    /* Delay for COMP scaler bridge voltage stabilization */
    /* Apply the delay if voltage scaler bridge is required and not already enabled */
    if ((READ_BIT(hcomp->Instance->CSR, COMP_CSR_SCALEN) != 0UL) &&
 80045a0:	687b      	ldr	r3, [r7, #4]
 80045a2:	681b      	ldr	r3, [r3, #0]
 80045a4:	681b      	ldr	r3, [r3, #0]
 80045a6:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80045aa:	2b00      	cmp	r3, #0
 80045ac:	d015      	beq.n	80045da <HAL_COMP_Init+0xc6>
 80045ae:	69bb      	ldr	r3, [r7, #24]
 80045b0:	2b00      	cmp	r3, #0
 80045b2:	d112      	bne.n	80045da <HAL_COMP_Init+0xc6>
    {
      /* Wait loop initialization and execution */
      /* Note: Variable divided by 2 to compensate partially              */
      /*       CPU processing cycles, scaling in us split to not          */
      /*       exceed 32 bits register capacity and handle low frequency. */
      wait_loop_index = ((COMP_DELAY_VOLTAGE_SCALER_STAB_US / 10UL) * (SystemCoreClock / (100000UL * 2UL)));
 80045b4:	4b90      	ldr	r3, [pc, #576]	; (80047f8 <HAL_COMP_Init+0x2e4>)
 80045b6:	681b      	ldr	r3, [r3, #0]
 80045b8:	099b      	lsrs	r3, r3, #6
 80045ba:	4a90      	ldr	r2, [pc, #576]	; (80047fc <HAL_COMP_Init+0x2e8>)
 80045bc:	fba2 2303 	umull	r2, r3, r2, r3
 80045c0:	099a      	lsrs	r2, r3, #6
 80045c2:	4613      	mov	r3, r2
 80045c4:	009b      	lsls	r3, r3, #2
 80045c6:	4413      	add	r3, r2
 80045c8:	009b      	lsls	r3, r3, #2
 80045ca:	60fb      	str	r3, [r7, #12]
      while(wait_loop_index != 0UL)
 80045cc:	e002      	b.n	80045d4 <HAL_COMP_Init+0xc0>
      {
        wait_loop_index--;
 80045ce:	68fb      	ldr	r3, [r7, #12]
 80045d0:	3b01      	subs	r3, #1
 80045d2:	60fb      	str	r3, [r7, #12]
      while(wait_loop_index != 0UL)
 80045d4:	68fb      	ldr	r3, [r7, #12]
 80045d6:	2b00      	cmp	r3, #0
 80045d8:	d1f9      	bne.n	80045ce <HAL_COMP_Init+0xba>
      }
    }

    /* Get the EXTI line corresponding to the selected COMP instance */
    exti_line = COMP_GET_EXTI_LINE(hcomp->Instance);
 80045da:	687b      	ldr	r3, [r7, #4]
 80045dc:	681b      	ldr	r3, [r3, #0]
 80045de:	4a88      	ldr	r2, [pc, #544]	; (8004800 <HAL_COMP_Init+0x2ec>)
 80045e0:	4293      	cmp	r3, r2
 80045e2:	d028      	beq.n	8004636 <HAL_COMP_Init+0x122>
 80045e4:	687b      	ldr	r3, [r7, #4]
 80045e6:	681b      	ldr	r3, [r3, #0]
 80045e8:	4a86      	ldr	r2, [pc, #536]	; (8004804 <HAL_COMP_Init+0x2f0>)
 80045ea:	4293      	cmp	r3, r2
 80045ec:	d020      	beq.n	8004630 <HAL_COMP_Init+0x11c>
 80045ee:	687b      	ldr	r3, [r7, #4]
 80045f0:	681b      	ldr	r3, [r3, #0]
 80045f2:	4a85      	ldr	r2, [pc, #532]	; (8004808 <HAL_COMP_Init+0x2f4>)
 80045f4:	4293      	cmp	r3, r2
 80045f6:	d018      	beq.n	800462a <HAL_COMP_Init+0x116>
 80045f8:	687b      	ldr	r3, [r7, #4]
 80045fa:	681b      	ldr	r3, [r3, #0]
 80045fc:	4a83      	ldr	r2, [pc, #524]	; (800480c <HAL_COMP_Init+0x2f8>)
 80045fe:	4293      	cmp	r3, r2
 8004600:	d010      	beq.n	8004624 <HAL_COMP_Init+0x110>
 8004602:	687b      	ldr	r3, [r7, #4]
 8004604:	681b      	ldr	r3, [r3, #0]
 8004606:	4a82      	ldr	r2, [pc, #520]	; (8004810 <HAL_COMP_Init+0x2fc>)
 8004608:	4293      	cmp	r3, r2
 800460a:	d008      	beq.n	800461e <HAL_COMP_Init+0x10a>
 800460c:	687b      	ldr	r3, [r7, #4]
 800460e:	681b      	ldr	r3, [r3, #0]
 8004610:	4a80      	ldr	r2, [pc, #512]	; (8004814 <HAL_COMP_Init+0x300>)
 8004612:	4293      	cmp	r3, r2
 8004614:	d101      	bne.n	800461a <HAL_COMP_Init+0x106>
 8004616:	2301      	movs	r3, #1
 8004618:	e00f      	b.n	800463a <HAL_COMP_Init+0x126>
 800461a:	2302      	movs	r3, #2
 800461c:	e00d      	b.n	800463a <HAL_COMP_Init+0x126>
 800461e:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8004622:	e00a      	b.n	800463a <HAL_COMP_Init+0x126>
 8004624:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8004628:	e007      	b.n	800463a <HAL_COMP_Init+0x126>
 800462a:	f04f 5300 	mov.w	r3, #536870912	; 0x20000000
 800462e:	e004      	b.n	800463a <HAL_COMP_Init+0x126>
 8004630:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8004634:	e001      	b.n	800463a <HAL_COMP_Init+0x126>
 8004636:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 800463a:	613b      	str	r3, [r7, #16]

    /* Manage EXTI settings */
    if((hcomp->Init.TriggerMode & (COMP_EXTI_IT | COMP_EXTI_EVENT)) != 0UL)
 800463c:	687b      	ldr	r3, [r7, #4]
 800463e:	699b      	ldr	r3, [r3, #24]
 8004640:	f003 0303 	and.w	r3, r3, #3
 8004644:	2b00      	cmp	r3, #0
 8004646:	f000 80b6 	beq.w	80047b6 <HAL_COMP_Init+0x2a2>
    {
      /* Configure EXTI rising edge */
      if((hcomp->Init.TriggerMode & COMP_EXTI_RISING) != 0UL)
 800464a:	687b      	ldr	r3, [r7, #4]
 800464c:	699b      	ldr	r3, [r3, #24]
 800464e:	f003 0310 	and.w	r3, r3, #16
 8004652:	2b00      	cmp	r3, #0
 8004654:	d011      	beq.n	800467a <HAL_COMP_Init+0x166>
      {
#if defined(STM32G474xx) || defined(STM32G484xx) || defined(STM32G473xx) || defined(STM32G483xx)
        if((hcomp->Instance == COMP6) || (hcomp->Instance == COMP7))
 8004656:	687b      	ldr	r3, [r7, #4]
 8004658:	681b      	ldr	r3, [r3, #0]
 800465a:	4a6e      	ldr	r2, [pc, #440]	; (8004814 <HAL_COMP_Init+0x300>)
 800465c:	4293      	cmp	r3, r2
 800465e:	d004      	beq.n	800466a <HAL_COMP_Init+0x156>
 8004660:	687b      	ldr	r3, [r7, #4]
 8004662:	681b      	ldr	r3, [r3, #0]
 8004664:	4a6c      	ldr	r2, [pc, #432]	; (8004818 <HAL_COMP_Init+0x304>)
 8004666:	4293      	cmp	r3, r2
 8004668:	d103      	bne.n	8004672 <HAL_COMP_Init+0x15e>
        {
          LL_EXTI_EnableRisingTrig_32_63(exti_line);
 800466a:	6938      	ldr	r0, [r7, #16]
 800466c:	f7ff feac 	bl	80043c8 <LL_EXTI_EnableRisingTrig_32_63>
 8004670:	e014      	b.n	800469c <HAL_COMP_Init+0x188>
        }
        else
        {
          LL_EXTI_EnableRisingTrig_0_31(exti_line);
 8004672:	6938      	ldr	r0, [r7, #16]
 8004674:	f7ff fe96 	bl	80043a4 <LL_EXTI_EnableRisingTrig_0_31>
 8004678:	e010      	b.n	800469c <HAL_COMP_Init+0x188>
#endif
      }
      else
      {
#if defined(STM32G474xx) || defined(STM32G484xx) || defined(STM32G473xx) || defined(STM32G483xx)
        if((hcomp->Instance == COMP6) || (hcomp->Instance == COMP7))
 800467a:	687b      	ldr	r3, [r7, #4]
 800467c:	681b      	ldr	r3, [r3, #0]
 800467e:	4a65      	ldr	r2, [pc, #404]	; (8004814 <HAL_COMP_Init+0x300>)
 8004680:	4293      	cmp	r3, r2
 8004682:	d004      	beq.n	800468e <HAL_COMP_Init+0x17a>
 8004684:	687b      	ldr	r3, [r7, #4]
 8004686:	681b      	ldr	r3, [r3, #0]
 8004688:	4a63      	ldr	r2, [pc, #396]	; (8004818 <HAL_COMP_Init+0x304>)
 800468a:	4293      	cmp	r3, r2
 800468c:	d103      	bne.n	8004696 <HAL_COMP_Init+0x182>
        {
          LL_EXTI_DisableRisingTrig_32_63(exti_line);
 800468e:	6938      	ldr	r0, [r7, #16]
 8004690:	f7ff fec0 	bl	8004414 <LL_EXTI_DisableRisingTrig_32_63>
 8004694:	e002      	b.n	800469c <HAL_COMP_Init+0x188>
        }
        else
        {
          LL_EXTI_DisableRisingTrig_0_31(exti_line);
 8004696:	6938      	ldr	r0, [r7, #16]
 8004698:	f7ff fea8 	bl	80043ec <LL_EXTI_DisableRisingTrig_0_31>
        LL_EXTI_DisableRisingTrig_0_31(exti_line);
#endif
      }

      /* Configure EXTI falling edge */
      if((hcomp->Init.TriggerMode & COMP_EXTI_FALLING) != 0UL)
 800469c:	687b      	ldr	r3, [r7, #4]
 800469e:	699b      	ldr	r3, [r3, #24]
 80046a0:	f003 0320 	and.w	r3, r3, #32
 80046a4:	2b00      	cmp	r3, #0
 80046a6:	d011      	beq.n	80046cc <HAL_COMP_Init+0x1b8>
      {
#if defined(STM32G474xx) || defined(STM32G484xx) || defined(STM32G473xx) || defined(STM32G483xx)
        if((hcomp->Instance == COMP6) || (hcomp->Instance == COMP7))
 80046a8:	687b      	ldr	r3, [r7, #4]
 80046aa:	681b      	ldr	r3, [r3, #0]
 80046ac:	4a59      	ldr	r2, [pc, #356]	; (8004814 <HAL_COMP_Init+0x300>)
 80046ae:	4293      	cmp	r3, r2
 80046b0:	d004      	beq.n	80046bc <HAL_COMP_Init+0x1a8>
 80046b2:	687b      	ldr	r3, [r7, #4]
 80046b4:	681b      	ldr	r3, [r3, #0]
 80046b6:	4a58      	ldr	r2, [pc, #352]	; (8004818 <HAL_COMP_Init+0x304>)
 80046b8:	4293      	cmp	r3, r2
 80046ba:	d103      	bne.n	80046c4 <HAL_COMP_Init+0x1b0>
        {
          LL_EXTI_EnableFallingTrig_32_63(exti_line);
 80046bc:	6938      	ldr	r0, [r7, #16]
 80046be:	f7ff fecf 	bl	8004460 <LL_EXTI_EnableFallingTrig_32_63>
 80046c2:	e014      	b.n	80046ee <HAL_COMP_Init+0x1da>
        }
        else
        {
          LL_EXTI_EnableFallingTrig_0_31(exti_line);
 80046c4:	6938      	ldr	r0, [r7, #16]
 80046c6:	f7ff feb9 	bl	800443c <LL_EXTI_EnableFallingTrig_0_31>
 80046ca:	e010      	b.n	80046ee <HAL_COMP_Init+0x1da>
#endif
      }
      else
      {
#if defined(STM32G474xx) || defined(STM32G484xx) || defined(STM32G473xx) || defined(STM32G483xx)
        if((hcomp->Instance == COMP6) || (hcomp->Instance == COMP7))
 80046cc:	687b      	ldr	r3, [r7, #4]
 80046ce:	681b      	ldr	r3, [r3, #0]
 80046d0:	4a50      	ldr	r2, [pc, #320]	; (8004814 <HAL_COMP_Init+0x300>)
 80046d2:	4293      	cmp	r3, r2
 80046d4:	d004      	beq.n	80046e0 <HAL_COMP_Init+0x1cc>
 80046d6:	687b      	ldr	r3, [r7, #4]
 80046d8:	681b      	ldr	r3, [r3, #0]
 80046da:	4a4f      	ldr	r2, [pc, #316]	; (8004818 <HAL_COMP_Init+0x304>)
 80046dc:	4293      	cmp	r3, r2
 80046de:	d103      	bne.n	80046e8 <HAL_COMP_Init+0x1d4>
        {
          LL_EXTI_DisableFallingTrig_32_63(exti_line);
 80046e0:	6938      	ldr	r0, [r7, #16]
 80046e2:	f7ff fee3 	bl	80044ac <LL_EXTI_DisableFallingTrig_32_63>
 80046e6:	e002      	b.n	80046ee <HAL_COMP_Init+0x1da>
        }
        else
        {
          LL_EXTI_DisableFallingTrig_0_31(exti_line);
 80046e8:	6938      	ldr	r0, [r7, #16]
 80046ea:	f7ff fecb 	bl	8004484 <LL_EXTI_DisableFallingTrig_0_31>
#endif
      }

      /* Clear COMP EXTI pending bit (if any) */
#if defined(STM32G474xx) || defined(STM32G484xx) || defined(STM32G473xx) || defined(STM32G483xx)
      if((hcomp->Instance == COMP6) || (hcomp->Instance == COMP7))
 80046ee:	687b      	ldr	r3, [r7, #4]
 80046f0:	681b      	ldr	r3, [r3, #0]
 80046f2:	4a48      	ldr	r2, [pc, #288]	; (8004814 <HAL_COMP_Init+0x300>)
 80046f4:	4293      	cmp	r3, r2
 80046f6:	d004      	beq.n	8004702 <HAL_COMP_Init+0x1ee>
 80046f8:	687b      	ldr	r3, [r7, #4]
 80046fa:	681b      	ldr	r3, [r3, #0]
 80046fc:	4a46      	ldr	r2, [pc, #280]	; (8004818 <HAL_COMP_Init+0x304>)
 80046fe:	4293      	cmp	r3, r2
 8004700:	d103      	bne.n	800470a <HAL_COMP_Init+0x1f6>
      {
        LL_EXTI_ClearFlag_32_63(exti_line);
 8004702:	6938      	ldr	r0, [r7, #16]
 8004704:	f7ff fef6 	bl	80044f4 <LL_EXTI_ClearFlag_32_63>
 8004708:	e002      	b.n	8004710 <HAL_COMP_Init+0x1fc>
      }
      else
      {
        LL_EXTI_ClearFlag_0_31(exti_line);
 800470a:	6938      	ldr	r0, [r7, #16]
 800470c:	f7ff fee2 	bl	80044d4 <LL_EXTI_ClearFlag_0_31>
#else
      LL_EXTI_ClearFlag_0_31(exti_line);
#endif

      /* Configure EXTI event mode */
      if((hcomp->Init.TriggerMode & COMP_EXTI_EVENT) != 0UL)
 8004710:	687b      	ldr	r3, [r7, #4]
 8004712:	699b      	ldr	r3, [r3, #24]
 8004714:	f003 0302 	and.w	r3, r3, #2
 8004718:	2b00      	cmp	r3, #0
 800471a:	d011      	beq.n	8004740 <HAL_COMP_Init+0x22c>
      {
#if defined(STM32G474xx) || defined(STM32G484xx) || defined(STM32G473xx) || defined(STM32G483xx)
        if((hcomp->Instance == COMP6) || (hcomp->Instance == COMP7))
 800471c:	687b      	ldr	r3, [r7, #4]
 800471e:	681b      	ldr	r3, [r3, #0]
 8004720:	4a3c      	ldr	r2, [pc, #240]	; (8004814 <HAL_COMP_Init+0x300>)
 8004722:	4293      	cmp	r3, r2
 8004724:	d004      	beq.n	8004730 <HAL_COMP_Init+0x21c>
 8004726:	687b      	ldr	r3, [r7, #4]
 8004728:	681b      	ldr	r3, [r3, #0]
 800472a:	4a3b      	ldr	r2, [pc, #236]	; (8004818 <HAL_COMP_Init+0x304>)
 800472c:	4293      	cmp	r3, r2
 800472e:	d103      	bne.n	8004738 <HAL_COMP_Init+0x224>
        {
          LL_EXTI_EnableEvent_32_63(exti_line);
 8004730:	6938      	ldr	r0, [r7, #16]
 8004732:	f7ff fdfd 	bl	8004330 <LL_EXTI_EnableEvent_32_63>
 8004736:	e014      	b.n	8004762 <HAL_COMP_Init+0x24e>
        }
        else
        {
          LL_EXTI_EnableEvent_0_31(exti_line);
 8004738:	6938      	ldr	r0, [r7, #16]
 800473a:	f7ff fde7 	bl	800430c <LL_EXTI_EnableEvent_0_31>
 800473e:	e010      	b.n	8004762 <HAL_COMP_Init+0x24e>
#endif
      }
      else
      {
#if defined(STM32G474xx) || defined(STM32G484xx) || defined(STM32G473xx) || defined(STM32G483xx)
        if((hcomp->Instance == COMP6) || (hcomp->Instance == COMP7))
 8004740:	687b      	ldr	r3, [r7, #4]
 8004742:	681b      	ldr	r3, [r3, #0]
 8004744:	4a33      	ldr	r2, [pc, #204]	; (8004814 <HAL_COMP_Init+0x300>)
 8004746:	4293      	cmp	r3, r2
 8004748:	d004      	beq.n	8004754 <HAL_COMP_Init+0x240>
 800474a:	687b      	ldr	r3, [r7, #4]
 800474c:	681b      	ldr	r3, [r3, #0]
 800474e:	4a32      	ldr	r2, [pc, #200]	; (8004818 <HAL_COMP_Init+0x304>)
 8004750:	4293      	cmp	r3, r2
 8004752:	d103      	bne.n	800475c <HAL_COMP_Init+0x248>
        {
          LL_EXTI_DisableEvent_32_63(exti_line);
 8004754:	6938      	ldr	r0, [r7, #16]
 8004756:	f7ff fe11 	bl	800437c <LL_EXTI_DisableEvent_32_63>
 800475a:	e002      	b.n	8004762 <HAL_COMP_Init+0x24e>
        }
        else
        {
          LL_EXTI_DisableEvent_0_31(exti_line);
 800475c:	6938      	ldr	r0, [r7, #16]
 800475e:	f7ff fdf9 	bl	8004354 <LL_EXTI_DisableEvent_0_31>
        LL_EXTI_DisableEvent_0_31(exti_line);
#endif
      }

      /* Configure EXTI interrupt mode */
      if((hcomp->Init.TriggerMode & COMP_EXTI_IT) != 0UL)
 8004762:	687b      	ldr	r3, [r7, #4]
 8004764:	699b      	ldr	r3, [r3, #24]
 8004766:	f003 0301 	and.w	r3, r3, #1
 800476a:	2b00      	cmp	r3, #0
 800476c:	d011      	beq.n	8004792 <HAL_COMP_Init+0x27e>
      {
#if defined(STM32G474xx) || defined(STM32G484xx) || defined(STM32G473xx) || defined(STM32G483xx)
        if((hcomp->Instance == COMP6) || (hcomp->Instance == COMP7))
 800476e:	687b      	ldr	r3, [r7, #4]
 8004770:	681b      	ldr	r3, [r3, #0]
 8004772:	4a28      	ldr	r2, [pc, #160]	; (8004814 <HAL_COMP_Init+0x300>)
 8004774:	4293      	cmp	r3, r2
 8004776:	d004      	beq.n	8004782 <HAL_COMP_Init+0x26e>
 8004778:	687b      	ldr	r3, [r7, #4]
 800477a:	681b      	ldr	r3, [r3, #0]
 800477c:	4a26      	ldr	r2, [pc, #152]	; (8004818 <HAL_COMP_Init+0x304>)
 800477e:	4293      	cmp	r3, r2
 8004780:	d103      	bne.n	800478a <HAL_COMP_Init+0x276>
        {
          LL_EXTI_EnableIT_32_63(exti_line);
 8004782:	6938      	ldr	r0, [r7, #16]
 8004784:	f7ff fd88 	bl	8004298 <LL_EXTI_EnableIT_32_63>
 8004788:	e04b      	b.n	8004822 <HAL_COMP_Init+0x30e>
        }
        else
        {
          LL_EXTI_EnableIT_0_31(exti_line);
 800478a:	6938      	ldr	r0, [r7, #16]
 800478c:	f7ff fd72 	bl	8004274 <LL_EXTI_EnableIT_0_31>
 8004790:	e047      	b.n	8004822 <HAL_COMP_Init+0x30e>
#endif
      }
      else
      {
#if defined(STM32G474xx) || defined(STM32G484xx) || defined(STM32G473xx) || defined(STM32G483xx)
        if((hcomp->Instance == COMP6) || (hcomp->Instance == COMP7))
 8004792:	687b      	ldr	r3, [r7, #4]
 8004794:	681b      	ldr	r3, [r3, #0]
 8004796:	4a1f      	ldr	r2, [pc, #124]	; (8004814 <HAL_COMP_Init+0x300>)
 8004798:	4293      	cmp	r3, r2
 800479a:	d004      	beq.n	80047a6 <HAL_COMP_Init+0x292>
 800479c:	687b      	ldr	r3, [r7, #4]
 800479e:	681b      	ldr	r3, [r3, #0]
 80047a0:	4a1d      	ldr	r2, [pc, #116]	; (8004818 <HAL_COMP_Init+0x304>)
 80047a2:	4293      	cmp	r3, r2
 80047a4:	d103      	bne.n	80047ae <HAL_COMP_Init+0x29a>
        {
          LL_EXTI_DisableIT_32_63(exti_line);
 80047a6:	6938      	ldr	r0, [r7, #16]
 80047a8:	f7ff fd9c 	bl	80042e4 <LL_EXTI_DisableIT_32_63>
 80047ac:	e039      	b.n	8004822 <HAL_COMP_Init+0x30e>
        }
        else
        {
          LL_EXTI_DisableIT_0_31(exti_line);
 80047ae:	6938      	ldr	r0, [r7, #16]
 80047b0:	f7ff fd84 	bl	80042bc <LL_EXTI_DisableIT_0_31>
 80047b4:	e035      	b.n	8004822 <HAL_COMP_Init+0x30e>
    }
    else
    {
      /* Disable EXTI event mode */
#if defined(STM32G474xx) || defined(STM32G484xx) || defined(STM32G473xx) || defined(STM32G483xx)
      if((hcomp->Instance == COMP6) || (hcomp->Instance == COMP7))
 80047b6:	687b      	ldr	r3, [r7, #4]
 80047b8:	681b      	ldr	r3, [r3, #0]
 80047ba:	4a16      	ldr	r2, [pc, #88]	; (8004814 <HAL_COMP_Init+0x300>)
 80047bc:	4293      	cmp	r3, r2
 80047be:	d004      	beq.n	80047ca <HAL_COMP_Init+0x2b6>
 80047c0:	687b      	ldr	r3, [r7, #4]
 80047c2:	681b      	ldr	r3, [r3, #0]
 80047c4:	4a14      	ldr	r2, [pc, #80]	; (8004818 <HAL_COMP_Init+0x304>)
 80047c6:	4293      	cmp	r3, r2
 80047c8:	d103      	bne.n	80047d2 <HAL_COMP_Init+0x2be>
      {
        LL_EXTI_DisableEvent_32_63(exti_line);
 80047ca:	6938      	ldr	r0, [r7, #16]
 80047cc:	f7ff fdd6 	bl	800437c <LL_EXTI_DisableEvent_32_63>
 80047d0:	e002      	b.n	80047d8 <HAL_COMP_Init+0x2c4>
      }
      else
      {
        LL_EXTI_DisableEvent_0_31(exti_line);
 80047d2:	6938      	ldr	r0, [r7, #16]
 80047d4:	f7ff fdbe 	bl	8004354 <LL_EXTI_DisableEvent_0_31>
      LL_EXTI_DisableEvent_0_31(exti_line);
#endif

      /* Disable EXTI interrupt mode */
#if defined(STM32G474xx) || defined(STM32G484xx) || defined(STM32G473xx) || defined(STM32G483xx)
      if((hcomp->Instance == COMP6) || (hcomp->Instance == COMP7))
 80047d8:	687b      	ldr	r3, [r7, #4]
 80047da:	681b      	ldr	r3, [r3, #0]
 80047dc:	4a0d      	ldr	r2, [pc, #52]	; (8004814 <HAL_COMP_Init+0x300>)
 80047de:	4293      	cmp	r3, r2
 80047e0:	d004      	beq.n	80047ec <HAL_COMP_Init+0x2d8>
 80047e2:	687b      	ldr	r3, [r7, #4]
 80047e4:	681b      	ldr	r3, [r3, #0]
 80047e6:	4a0c      	ldr	r2, [pc, #48]	; (8004818 <HAL_COMP_Init+0x304>)
 80047e8:	4293      	cmp	r3, r2
 80047ea:	d117      	bne.n	800481c <HAL_COMP_Init+0x308>
      {
        LL_EXTI_DisableIT_32_63(exti_line);
 80047ec:	6938      	ldr	r0, [r7, #16]
 80047ee:	f7ff fd79 	bl	80042e4 <LL_EXTI_DisableIT_32_63>
 80047f2:	e016      	b.n	8004822 <HAL_COMP_Init+0x30e>
 80047f4:	ff007e0f 	.word	0xff007e0f
 80047f8:	20000010 	.word	0x20000010
 80047fc:	053e2d63 	.word	0x053e2d63
 8004800:	40010200 	.word	0x40010200
 8004804:	40010204 	.word	0x40010204
 8004808:	40010208 	.word	0x40010208
 800480c:	4001020c 	.word	0x4001020c
 8004810:	40010210 	.word	0x40010210
 8004814:	40010214 	.word	0x40010214
 8004818:	40010218 	.word	0x40010218
      }
      else
      {
        LL_EXTI_DisableIT_0_31(exti_line);
 800481c:	6938      	ldr	r0, [r7, #16]
 800481e:	f7ff fd4d 	bl	80042bc <LL_EXTI_DisableIT_0_31>
    }

    /* Set HAL COMP handle state */
    /* Note: Transition from state reset to state ready,                      */
    /*       otherwise (coming from state ready or busy) no state update.     */
    if (hcomp->State == HAL_COMP_STATE_RESET)
 8004822:	687b      	ldr	r3, [r7, #4]
 8004824:	7f5b      	ldrb	r3, [r3, #29]
 8004826:	b2db      	uxtb	r3, r3
 8004828:	2b00      	cmp	r3, #0
 800482a:	d102      	bne.n	8004832 <HAL_COMP_Init+0x31e>
    {
      hcomp->State = HAL_COMP_STATE_READY;
 800482c:	687b      	ldr	r3, [r7, #4]
 800482e:	2201      	movs	r2, #1
 8004830:	775a      	strb	r2, [r3, #29]
    }
  }

  return status;
 8004832:	7ffb      	ldrb	r3, [r7, #31]
}
 8004834:	4618      	mov	r0, r3
 8004836:	3720      	adds	r7, #32
 8004838:	46bd      	mov	sp, r7
 800483a:	bd80      	pop	{r7, pc}

0800483c <__NVIC_SetPriorityGrouping>:
{
 800483c:	b480      	push	{r7}
 800483e:	b085      	sub	sp, #20
 8004840:	af00      	add	r7, sp, #0
 8004842:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8004844:	687b      	ldr	r3, [r7, #4]
 8004846:	f003 0307 	and.w	r3, r3, #7
 800484a:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800484c:	4b0c      	ldr	r3, [pc, #48]	; (8004880 <__NVIC_SetPriorityGrouping+0x44>)
 800484e:	68db      	ldr	r3, [r3, #12]
 8004850:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8004852:	68ba      	ldr	r2, [r7, #8]
 8004854:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8004858:	4013      	ands	r3, r2
 800485a:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800485c:	68fb      	ldr	r3, [r7, #12]
 800485e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8004860:	68bb      	ldr	r3, [r7, #8]
 8004862:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8004864:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8004868:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800486c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800486e:	4a04      	ldr	r2, [pc, #16]	; (8004880 <__NVIC_SetPriorityGrouping+0x44>)
 8004870:	68bb      	ldr	r3, [r7, #8]
 8004872:	60d3      	str	r3, [r2, #12]
}
 8004874:	bf00      	nop
 8004876:	3714      	adds	r7, #20
 8004878:	46bd      	mov	sp, r7
 800487a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800487e:	4770      	bx	lr
 8004880:	e000ed00 	.word	0xe000ed00

08004884 <__NVIC_GetPriorityGrouping>:
{
 8004884:	b480      	push	{r7}
 8004886:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8004888:	4b04      	ldr	r3, [pc, #16]	; (800489c <__NVIC_GetPriorityGrouping+0x18>)
 800488a:	68db      	ldr	r3, [r3, #12]
 800488c:	0a1b      	lsrs	r3, r3, #8
 800488e:	f003 0307 	and.w	r3, r3, #7
}
 8004892:	4618      	mov	r0, r3
 8004894:	46bd      	mov	sp, r7
 8004896:	f85d 7b04 	ldr.w	r7, [sp], #4
 800489a:	4770      	bx	lr
 800489c:	e000ed00 	.word	0xe000ed00

080048a0 <__NVIC_EnableIRQ>:
{
 80048a0:	b480      	push	{r7}
 80048a2:	b083      	sub	sp, #12
 80048a4:	af00      	add	r7, sp, #0
 80048a6:	4603      	mov	r3, r0
 80048a8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80048aa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80048ae:	2b00      	cmp	r3, #0
 80048b0:	db0b      	blt.n	80048ca <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80048b2:	79fb      	ldrb	r3, [r7, #7]
 80048b4:	f003 021f 	and.w	r2, r3, #31
 80048b8:	4907      	ldr	r1, [pc, #28]	; (80048d8 <__NVIC_EnableIRQ+0x38>)
 80048ba:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80048be:	095b      	lsrs	r3, r3, #5
 80048c0:	2001      	movs	r0, #1
 80048c2:	fa00 f202 	lsl.w	r2, r0, r2
 80048c6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 80048ca:	bf00      	nop
 80048cc:	370c      	adds	r7, #12
 80048ce:	46bd      	mov	sp, r7
 80048d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048d4:	4770      	bx	lr
 80048d6:	bf00      	nop
 80048d8:	e000e100 	.word	0xe000e100

080048dc <__NVIC_SetPriority>:
{
 80048dc:	b480      	push	{r7}
 80048de:	b083      	sub	sp, #12
 80048e0:	af00      	add	r7, sp, #0
 80048e2:	4603      	mov	r3, r0
 80048e4:	6039      	str	r1, [r7, #0]
 80048e6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80048e8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80048ec:	2b00      	cmp	r3, #0
 80048ee:	db0a      	blt.n	8004906 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80048f0:	683b      	ldr	r3, [r7, #0]
 80048f2:	b2da      	uxtb	r2, r3
 80048f4:	490c      	ldr	r1, [pc, #48]	; (8004928 <__NVIC_SetPriority+0x4c>)
 80048f6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80048fa:	0112      	lsls	r2, r2, #4
 80048fc:	b2d2      	uxtb	r2, r2
 80048fe:	440b      	add	r3, r1
 8004900:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8004904:	e00a      	b.n	800491c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004906:	683b      	ldr	r3, [r7, #0]
 8004908:	b2da      	uxtb	r2, r3
 800490a:	4908      	ldr	r1, [pc, #32]	; (800492c <__NVIC_SetPriority+0x50>)
 800490c:	79fb      	ldrb	r3, [r7, #7]
 800490e:	f003 030f 	and.w	r3, r3, #15
 8004912:	3b04      	subs	r3, #4
 8004914:	0112      	lsls	r2, r2, #4
 8004916:	b2d2      	uxtb	r2, r2
 8004918:	440b      	add	r3, r1
 800491a:	761a      	strb	r2, [r3, #24]
}
 800491c:	bf00      	nop
 800491e:	370c      	adds	r7, #12
 8004920:	46bd      	mov	sp, r7
 8004922:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004926:	4770      	bx	lr
 8004928:	e000e100 	.word	0xe000e100
 800492c:	e000ed00 	.word	0xe000ed00

08004930 <NVIC_EncodePriority>:
{
 8004930:	b480      	push	{r7}
 8004932:	b089      	sub	sp, #36	; 0x24
 8004934:	af00      	add	r7, sp, #0
 8004936:	60f8      	str	r0, [r7, #12]
 8004938:	60b9      	str	r1, [r7, #8]
 800493a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800493c:	68fb      	ldr	r3, [r7, #12]
 800493e:	f003 0307 	and.w	r3, r3, #7
 8004942:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8004944:	69fb      	ldr	r3, [r7, #28]
 8004946:	f1c3 0307 	rsb	r3, r3, #7
 800494a:	2b04      	cmp	r3, #4
 800494c:	bf28      	it	cs
 800494e:	2304      	movcs	r3, #4
 8004950:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8004952:	69fb      	ldr	r3, [r7, #28]
 8004954:	3304      	adds	r3, #4
 8004956:	2b06      	cmp	r3, #6
 8004958:	d902      	bls.n	8004960 <NVIC_EncodePriority+0x30>
 800495a:	69fb      	ldr	r3, [r7, #28]
 800495c:	3b03      	subs	r3, #3
 800495e:	e000      	b.n	8004962 <NVIC_EncodePriority+0x32>
 8004960:	2300      	movs	r3, #0
 8004962:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004964:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8004968:	69bb      	ldr	r3, [r7, #24]
 800496a:	fa02 f303 	lsl.w	r3, r2, r3
 800496e:	43da      	mvns	r2, r3
 8004970:	68bb      	ldr	r3, [r7, #8]
 8004972:	401a      	ands	r2, r3
 8004974:	697b      	ldr	r3, [r7, #20]
 8004976:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8004978:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 800497c:	697b      	ldr	r3, [r7, #20]
 800497e:	fa01 f303 	lsl.w	r3, r1, r3
 8004982:	43d9      	mvns	r1, r3
 8004984:	687b      	ldr	r3, [r7, #4]
 8004986:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004988:	4313      	orrs	r3, r2
}
 800498a:	4618      	mov	r0, r3
 800498c:	3724      	adds	r7, #36	; 0x24
 800498e:	46bd      	mov	sp, r7
 8004990:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004994:	4770      	bx	lr
	...

08004998 <SysTick_Config>:
{
 8004998:	b580      	push	{r7, lr}
 800499a:	b082      	sub	sp, #8
 800499c:	af00      	add	r7, sp, #0
 800499e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80049a0:	687b      	ldr	r3, [r7, #4]
 80049a2:	3b01      	subs	r3, #1
 80049a4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80049a8:	d301      	bcc.n	80049ae <SysTick_Config+0x16>
    return (1UL);                                                   /* Reload value impossible */
 80049aa:	2301      	movs	r3, #1
 80049ac:	e00f      	b.n	80049ce <SysTick_Config+0x36>
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80049ae:	4a0a      	ldr	r2, [pc, #40]	; (80049d8 <SysTick_Config+0x40>)
 80049b0:	687b      	ldr	r3, [r7, #4]
 80049b2:	3b01      	subs	r3, #1
 80049b4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80049b6:	210f      	movs	r1, #15
 80049b8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80049bc:	f7ff ff8e 	bl	80048dc <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80049c0:	4b05      	ldr	r3, [pc, #20]	; (80049d8 <SysTick_Config+0x40>)
 80049c2:	2200      	movs	r2, #0
 80049c4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80049c6:	4b04      	ldr	r3, [pc, #16]	; (80049d8 <SysTick_Config+0x40>)
 80049c8:	2207      	movs	r2, #7
 80049ca:	601a      	str	r2, [r3, #0]
  return (0UL);                                                     /* Function successful */
 80049cc:	2300      	movs	r3, #0
}
 80049ce:	4618      	mov	r0, r3
 80049d0:	3708      	adds	r7, #8
 80049d2:	46bd      	mov	sp, r7
 80049d4:	bd80      	pop	{r7, pc}
 80049d6:	bf00      	nop
 80049d8:	e000e010 	.word	0xe000e010

080049dc <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80049dc:	b580      	push	{r7, lr}
 80049de:	b082      	sub	sp, #8
 80049e0:	af00      	add	r7, sp, #0
 80049e2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80049e4:	6878      	ldr	r0, [r7, #4]
 80049e6:	f7ff ff29 	bl	800483c <__NVIC_SetPriorityGrouping>
}
 80049ea:	bf00      	nop
 80049ec:	3708      	adds	r7, #8
 80049ee:	46bd      	mov	sp, r7
 80049f0:	bd80      	pop	{r7, pc}

080049f2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80049f2:	b580      	push	{r7, lr}
 80049f4:	b086      	sub	sp, #24
 80049f6:	af00      	add	r7, sp, #0
 80049f8:	4603      	mov	r3, r0
 80049fa:	60b9      	str	r1, [r7, #8]
 80049fc:	607a      	str	r2, [r7, #4]
 80049fe:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8004a00:	f7ff ff40 	bl	8004884 <__NVIC_GetPriorityGrouping>
 8004a04:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8004a06:	687a      	ldr	r2, [r7, #4]
 8004a08:	68b9      	ldr	r1, [r7, #8]
 8004a0a:	6978      	ldr	r0, [r7, #20]
 8004a0c:	f7ff ff90 	bl	8004930 <NVIC_EncodePriority>
 8004a10:	4602      	mov	r2, r0
 8004a12:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004a16:	4611      	mov	r1, r2
 8004a18:	4618      	mov	r0, r3
 8004a1a:	f7ff ff5f 	bl	80048dc <__NVIC_SetPriority>
}
 8004a1e:	bf00      	nop
 8004a20:	3718      	adds	r7, #24
 8004a22:	46bd      	mov	sp, r7
 8004a24:	bd80      	pop	{r7, pc}

08004a26 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004a26:	b580      	push	{r7, lr}
 8004a28:	b082      	sub	sp, #8
 8004a2a:	af00      	add	r7, sp, #0
 8004a2c:	4603      	mov	r3, r0
 8004a2e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8004a30:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004a34:	4618      	mov	r0, r3
 8004a36:	f7ff ff33 	bl	80048a0 <__NVIC_EnableIRQ>
}
 8004a3a:	bf00      	nop
 8004a3c:	3708      	adds	r7, #8
 8004a3e:	46bd      	mov	sp, r7
 8004a40:	bd80      	pop	{r7, pc}

08004a42 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8004a42:	b580      	push	{r7, lr}
 8004a44:	b082      	sub	sp, #8
 8004a46:	af00      	add	r7, sp, #0
 8004a48:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8004a4a:	6878      	ldr	r0, [r7, #4]
 8004a4c:	f7ff ffa4 	bl	8004998 <SysTick_Config>
 8004a50:	4603      	mov	r3, r0
}
 8004a52:	4618      	mov	r0, r3
 8004a54:	3708      	adds	r7, #8
 8004a56:	46bd      	mov	sp, r7
 8004a58:	bd80      	pop	{r7, pc}

08004a5a <HAL_DAC_Init>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Init(DAC_HandleTypeDef *hdac)
{
 8004a5a:	b580      	push	{r7, lr}
 8004a5c:	b082      	sub	sp, #8
 8004a5e:	af00      	add	r7, sp, #0
 8004a60:	6078      	str	r0, [r7, #4]
  /* Check DAC handle */
  if (hdac == NULL)
 8004a62:	687b      	ldr	r3, [r7, #4]
 8004a64:	2b00      	cmp	r3, #0
 8004a66:	d101      	bne.n	8004a6c <HAL_DAC_Init+0x12>
  {
    return HAL_ERROR;
 8004a68:	2301      	movs	r3, #1
 8004a6a:	e014      	b.n	8004a96 <HAL_DAC_Init+0x3c>
  }
  /* Check the parameters */
  assert_param(IS_DAC_ALL_INSTANCE(hdac->Instance));

  if (hdac->State == HAL_DAC_STATE_RESET)
 8004a6c:	687b      	ldr	r3, [r7, #4]
 8004a6e:	791b      	ldrb	r3, [r3, #4]
 8004a70:	b2db      	uxtb	r3, r3
 8004a72:	2b00      	cmp	r3, #0
 8004a74:	d105      	bne.n	8004a82 <HAL_DAC_Init+0x28>
      hdac->MspInitCallback             = HAL_DAC_MspInit;
    }
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

    /* Allocate lock resource and initialize it */
    hdac->Lock = HAL_UNLOCKED;
 8004a76:	687b      	ldr	r3, [r7, #4]
 8004a78:	2200      	movs	r2, #0
 8004a7a:	715a      	strb	r2, [r3, #5]
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
    /* Init the low level hardware */
    hdac->MspInitCallback(hdac);
#else
    /* Init the low level hardware */
    HAL_DAC_MspInit(hdac);
 8004a7c:	6878      	ldr	r0, [r7, #4]
 8004a7e:	f7fc ff13 	bl	80018a8 <HAL_DAC_MspInit>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
  }

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_BUSY;
 8004a82:	687b      	ldr	r3, [r7, #4]
 8004a84:	2202      	movs	r2, #2
 8004a86:	711a      	strb	r2, [r3, #4]

  /* Set DAC error code to none */
  hdac->ErrorCode = HAL_DAC_ERROR_NONE;
 8004a88:	687b      	ldr	r3, [r7, #4]
 8004a8a:	2200      	movs	r2, #0
 8004a8c:	611a      	str	r2, [r3, #16]

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_READY;
 8004a8e:	687b      	ldr	r3, [r7, #4]
 8004a90:	2201      	movs	r2, #1
 8004a92:	711a      	strb	r2, [r3, #4]

  /* Return function status */
  return HAL_OK;
 8004a94:	2300      	movs	r3, #0
}
 8004a96:	4618      	mov	r0, r3
 8004a98:	3708      	adds	r7, #8
 8004a9a:	46bd      	mov	sp, r7
 8004a9c:	bd80      	pop	{r7, pc}

08004a9e <HAL_DAC_Start>:
  *         (1) On this STM32 serie, parameter not available on all instances.
  *             Refer to device datasheet for channels availability.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Start(DAC_HandleTypeDef *hdac, uint32_t Channel)
{
 8004a9e:	b580      	push	{r7, lr}
 8004aa0:	b082      	sub	sp, #8
 8004aa2:	af00      	add	r7, sp, #0
 8004aa4:	6078      	str	r0, [r7, #4]
 8004aa6:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(hdac->Instance, Channel));

  /* Process locked */
  __HAL_LOCK(hdac);
 8004aa8:	687b      	ldr	r3, [r7, #4]
 8004aaa:	795b      	ldrb	r3, [r3, #5]
 8004aac:	2b01      	cmp	r3, #1
 8004aae:	d101      	bne.n	8004ab4 <HAL_DAC_Start+0x16>
 8004ab0:	2302      	movs	r3, #2
 8004ab2:	e043      	b.n	8004b3c <HAL_DAC_Start+0x9e>
 8004ab4:	687b      	ldr	r3, [r7, #4]
 8004ab6:	2201      	movs	r2, #1
 8004ab8:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 8004aba:	687b      	ldr	r3, [r7, #4]
 8004abc:	2202      	movs	r2, #2
 8004abe:	711a      	strb	r2, [r3, #4]

  /* Enable the Peripheral */
  __HAL_DAC_ENABLE(hdac, Channel);
 8004ac0:	687b      	ldr	r3, [r7, #4]
 8004ac2:	681b      	ldr	r3, [r3, #0]
 8004ac4:	6819      	ldr	r1, [r3, #0]
 8004ac6:	683b      	ldr	r3, [r7, #0]
 8004ac8:	f003 0310 	and.w	r3, r3, #16
 8004acc:	2201      	movs	r2, #1
 8004ace:	409a      	lsls	r2, r3
 8004ad0:	687b      	ldr	r3, [r7, #4]
 8004ad2:	681b      	ldr	r3, [r3, #0]
 8004ad4:	430a      	orrs	r2, r1
 8004ad6:	601a      	str	r2, [r3, #0]
  /* Ensure minimum wait before using peripheral after enabling it */
  HAL_Delay(1);
 8004ad8:	2001      	movs	r0, #1
 8004ada:	f7fe fb4d 	bl	8003178 <HAL_Delay>

  if (Channel == DAC_CHANNEL_1)
 8004ade:	683b      	ldr	r3, [r7, #0]
 8004ae0:	2b00      	cmp	r3, #0
 8004ae2:	d10f      	bne.n	8004b04 <HAL_DAC_Start+0x66>
  {
    /* Check if software trigger enabled */
    if ((hdac->Instance->CR & (DAC_CR_TEN1 | DAC_CR_TSEL1)) == DAC_TRIGGER_SOFTWARE)
 8004ae4:	687b      	ldr	r3, [r7, #4]
 8004ae6:	681b      	ldr	r3, [r3, #0]
 8004ae8:	681b      	ldr	r3, [r3, #0]
 8004aea:	f003 033e 	and.w	r3, r3, #62	; 0x3e
 8004aee:	2b02      	cmp	r3, #2
 8004af0:	d11d      	bne.n	8004b2e <HAL_DAC_Start+0x90>
    {
      /* Enable the selected DAC software conversion */
      SET_BIT(hdac->Instance->SWTRIGR, DAC_SWTRIGR_SWTRIG1);
 8004af2:	687b      	ldr	r3, [r7, #4]
 8004af4:	681b      	ldr	r3, [r3, #0]
 8004af6:	685a      	ldr	r2, [r3, #4]
 8004af8:	687b      	ldr	r3, [r7, #4]
 8004afa:	681b      	ldr	r3, [r3, #0]
 8004afc:	f042 0201 	orr.w	r2, r2, #1
 8004b00:	605a      	str	r2, [r3, #4]
 8004b02:	e014      	b.n	8004b2e <HAL_DAC_Start+0x90>
    }
  }
  else
  {
    /* Check if software trigger enabled */
    if ((hdac->Instance->CR & (DAC_CR_TEN2 | DAC_CR_TSEL2)) == (DAC_TRIGGER_SOFTWARE << (Channel & 0x10UL)))
 8004b04:	687b      	ldr	r3, [r7, #4]
 8004b06:	681b      	ldr	r3, [r3, #0]
 8004b08:	681b      	ldr	r3, [r3, #0]
 8004b0a:	f403 1278 	and.w	r2, r3, #4063232	; 0x3e0000
 8004b0e:	683b      	ldr	r3, [r7, #0]
 8004b10:	f003 0310 	and.w	r3, r3, #16
 8004b14:	2102      	movs	r1, #2
 8004b16:	fa01 f303 	lsl.w	r3, r1, r3
 8004b1a:	429a      	cmp	r2, r3
 8004b1c:	d107      	bne.n	8004b2e <HAL_DAC_Start+0x90>
    {
      /* Enable the selected DAC software conversion*/
      SET_BIT(hdac->Instance->SWTRIGR, DAC_SWTRIGR_SWTRIG2);
 8004b1e:	687b      	ldr	r3, [r7, #4]
 8004b20:	681b      	ldr	r3, [r3, #0]
 8004b22:	685a      	ldr	r2, [r3, #4]
 8004b24:	687b      	ldr	r3, [r7, #4]
 8004b26:	681b      	ldr	r3, [r3, #0]
 8004b28:	f042 0202 	orr.w	r2, r2, #2
 8004b2c:	605a      	str	r2, [r3, #4]
    }
  }

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 8004b2e:	687b      	ldr	r3, [r7, #4]
 8004b30:	2201      	movs	r2, #1
 8004b32:	711a      	strb	r2, [r3, #4]

  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 8004b34:	687b      	ldr	r3, [r7, #4]
 8004b36:	2200      	movs	r2, #0
 8004b38:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 8004b3a:	2300      	movs	r3, #0
}
 8004b3c:	4618      	mov	r0, r3
 8004b3e:	3708      	adds	r7, #8
 8004b40:	46bd      	mov	sp, r7
 8004b42:	bd80      	pop	{r7, pc}

08004b44 <HAL_DAC_Start_DMA>:
  *            @arg DAC_ALIGN_12B_R: 12bit right data alignment selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Start_DMA(DAC_HandleTypeDef *hdac, uint32_t Channel, uint32_t *pData, uint32_t Length,
                                    uint32_t Alignment)
{
 8004b44:	b580      	push	{r7, lr}
 8004b46:	b086      	sub	sp, #24
 8004b48:	af00      	add	r7, sp, #0
 8004b4a:	60f8      	str	r0, [r7, #12]
 8004b4c:	60b9      	str	r1, [r7, #8]
 8004b4e:	607a      	str	r2, [r7, #4]
 8004b50:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status;
  uint32_t tmpreg = 0U;
 8004b52:	2300      	movs	r3, #0
 8004b54:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(hdac->Instance, Channel));
  assert_param(IS_DAC_ALIGN(Alignment));

  /* Process locked */
  __HAL_LOCK(hdac);
 8004b56:	68fb      	ldr	r3, [r7, #12]
 8004b58:	795b      	ldrb	r3, [r3, #5]
 8004b5a:	2b01      	cmp	r3, #1
 8004b5c:	d101      	bne.n	8004b62 <HAL_DAC_Start_DMA+0x1e>
 8004b5e:	2302      	movs	r3, #2
 8004b60:	e0a1      	b.n	8004ca6 <HAL_DAC_Start_DMA+0x162>
 8004b62:	68fb      	ldr	r3, [r7, #12]
 8004b64:	2201      	movs	r2, #1
 8004b66:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 8004b68:	68fb      	ldr	r3, [r7, #12]
 8004b6a:	2202      	movs	r2, #2
 8004b6c:	711a      	strb	r2, [r3, #4]

  if (Channel == DAC_CHANNEL_1)
 8004b6e:	68bb      	ldr	r3, [r7, #8]
 8004b70:	2b00      	cmp	r3, #0
 8004b72:	d12a      	bne.n	8004bca <HAL_DAC_Start_DMA+0x86>
  {
    /* Set the DMA transfer complete callback for channel1 */
    hdac->DMA_Handle1->XferCpltCallback = DAC_DMAConvCpltCh1;
 8004b74:	68fb      	ldr	r3, [r7, #12]
 8004b76:	689b      	ldr	r3, [r3, #8]
 8004b78:	4a4d      	ldr	r2, [pc, #308]	; (8004cb0 <HAL_DAC_Start_DMA+0x16c>)
 8004b7a:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Set the DMA half transfer complete callback for channel1 */
    hdac->DMA_Handle1->XferHalfCpltCallback = DAC_DMAHalfConvCpltCh1;
 8004b7c:	68fb      	ldr	r3, [r7, #12]
 8004b7e:	689b      	ldr	r3, [r3, #8]
 8004b80:	4a4c      	ldr	r2, [pc, #304]	; (8004cb4 <HAL_DAC_Start_DMA+0x170>)
 8004b82:	631a      	str	r2, [r3, #48]	; 0x30

    /* Set the DMA error callback for channel1 */
    hdac->DMA_Handle1->XferErrorCallback = DAC_DMAErrorCh1;
 8004b84:	68fb      	ldr	r3, [r7, #12]
 8004b86:	689b      	ldr	r3, [r3, #8]
 8004b88:	4a4b      	ldr	r2, [pc, #300]	; (8004cb8 <HAL_DAC_Start_DMA+0x174>)
 8004b8a:	635a      	str	r2, [r3, #52]	; 0x34

    /* Enable the selected DAC channel1 DMA request */
    SET_BIT(hdac->Instance->CR, DAC_CR_DMAEN1);
 8004b8c:	68fb      	ldr	r3, [r7, #12]
 8004b8e:	681b      	ldr	r3, [r3, #0]
 8004b90:	681a      	ldr	r2, [r3, #0]
 8004b92:	68fb      	ldr	r3, [r7, #12]
 8004b94:	681b      	ldr	r3, [r3, #0]
 8004b96:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8004b9a:	601a      	str	r2, [r3, #0]

    /* Case of use of channel 1 */
    switch (Alignment)
 8004b9c:	6a3b      	ldr	r3, [r7, #32]
 8004b9e:	2b04      	cmp	r3, #4
 8004ba0:	d009      	beq.n	8004bb6 <HAL_DAC_Start_DMA+0x72>
 8004ba2:	2b08      	cmp	r3, #8
 8004ba4:	d00c      	beq.n	8004bc0 <HAL_DAC_Start_DMA+0x7c>
 8004ba6:	2b00      	cmp	r3, #0
 8004ba8:	d000      	beq.n	8004bac <HAL_DAC_Start_DMA+0x68>
      case DAC_ALIGN_8B_R:
        /* Get DHR8R1 address */
        tmpreg = (uint32_t)&hdac->Instance->DHR8R1;
        break;
      default:
        break;
 8004baa:	e039      	b.n	8004c20 <HAL_DAC_Start_DMA+0xdc>
        tmpreg = (uint32_t)&hdac->Instance->DHR12R1;
 8004bac:	68fb      	ldr	r3, [r7, #12]
 8004bae:	681b      	ldr	r3, [r3, #0]
 8004bb0:	3308      	adds	r3, #8
 8004bb2:	613b      	str	r3, [r7, #16]
        break;
 8004bb4:	e034      	b.n	8004c20 <HAL_DAC_Start_DMA+0xdc>
        tmpreg = (uint32_t)&hdac->Instance->DHR12L1;
 8004bb6:	68fb      	ldr	r3, [r7, #12]
 8004bb8:	681b      	ldr	r3, [r3, #0]
 8004bba:	330c      	adds	r3, #12
 8004bbc:	613b      	str	r3, [r7, #16]
        break;
 8004bbe:	e02f      	b.n	8004c20 <HAL_DAC_Start_DMA+0xdc>
        tmpreg = (uint32_t)&hdac->Instance->DHR8R1;
 8004bc0:	68fb      	ldr	r3, [r7, #12]
 8004bc2:	681b      	ldr	r3, [r3, #0]
 8004bc4:	3310      	adds	r3, #16
 8004bc6:	613b      	str	r3, [r7, #16]
        break;
 8004bc8:	e02a      	b.n	8004c20 <HAL_DAC_Start_DMA+0xdc>
    }
  }
  else
  {
    /* Set the DMA transfer complete callback for channel2 */
    hdac->DMA_Handle2->XferCpltCallback = DAC_DMAConvCpltCh2;
 8004bca:	68fb      	ldr	r3, [r7, #12]
 8004bcc:	68db      	ldr	r3, [r3, #12]
 8004bce:	4a3b      	ldr	r2, [pc, #236]	; (8004cbc <HAL_DAC_Start_DMA+0x178>)
 8004bd0:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Set the DMA half transfer complete callback for channel2 */
    hdac->DMA_Handle2->XferHalfCpltCallback = DAC_DMAHalfConvCpltCh2;
 8004bd2:	68fb      	ldr	r3, [r7, #12]
 8004bd4:	68db      	ldr	r3, [r3, #12]
 8004bd6:	4a3a      	ldr	r2, [pc, #232]	; (8004cc0 <HAL_DAC_Start_DMA+0x17c>)
 8004bd8:	631a      	str	r2, [r3, #48]	; 0x30

    /* Set the DMA error callback for channel2 */
    hdac->DMA_Handle2->XferErrorCallback = DAC_DMAErrorCh2;
 8004bda:	68fb      	ldr	r3, [r7, #12]
 8004bdc:	68db      	ldr	r3, [r3, #12]
 8004bde:	4a39      	ldr	r2, [pc, #228]	; (8004cc4 <HAL_DAC_Start_DMA+0x180>)
 8004be0:	635a      	str	r2, [r3, #52]	; 0x34

    /* Enable the selected DAC channel2 DMA request */
    SET_BIT(hdac->Instance->CR, DAC_CR_DMAEN2);
 8004be2:	68fb      	ldr	r3, [r7, #12]
 8004be4:	681b      	ldr	r3, [r3, #0]
 8004be6:	681a      	ldr	r2, [r3, #0]
 8004be8:	68fb      	ldr	r3, [r7, #12]
 8004bea:	681b      	ldr	r3, [r3, #0]
 8004bec:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8004bf0:	601a      	str	r2, [r3, #0]

    /* Case of use of channel 2 */
    switch (Alignment)
 8004bf2:	6a3b      	ldr	r3, [r7, #32]
 8004bf4:	2b04      	cmp	r3, #4
 8004bf6:	d009      	beq.n	8004c0c <HAL_DAC_Start_DMA+0xc8>
 8004bf8:	2b08      	cmp	r3, #8
 8004bfa:	d00c      	beq.n	8004c16 <HAL_DAC_Start_DMA+0xd2>
 8004bfc:	2b00      	cmp	r3, #0
 8004bfe:	d000      	beq.n	8004c02 <HAL_DAC_Start_DMA+0xbe>
      case DAC_ALIGN_8B_R:
        /* Get DHR8R2 address */
        tmpreg = (uint32_t)&hdac->Instance->DHR8R2;
        break;
      default:
        break;
 8004c00:	e00e      	b.n	8004c20 <HAL_DAC_Start_DMA+0xdc>
        tmpreg = (uint32_t)&hdac->Instance->DHR12R2;
 8004c02:	68fb      	ldr	r3, [r7, #12]
 8004c04:	681b      	ldr	r3, [r3, #0]
 8004c06:	3314      	adds	r3, #20
 8004c08:	613b      	str	r3, [r7, #16]
        break;
 8004c0a:	e009      	b.n	8004c20 <HAL_DAC_Start_DMA+0xdc>
        tmpreg = (uint32_t)&hdac->Instance->DHR12L2;
 8004c0c:	68fb      	ldr	r3, [r7, #12]
 8004c0e:	681b      	ldr	r3, [r3, #0]
 8004c10:	3318      	adds	r3, #24
 8004c12:	613b      	str	r3, [r7, #16]
        break;
 8004c14:	e004      	b.n	8004c20 <HAL_DAC_Start_DMA+0xdc>
        tmpreg = (uint32_t)&hdac->Instance->DHR8R2;
 8004c16:	68fb      	ldr	r3, [r7, #12]
 8004c18:	681b      	ldr	r3, [r3, #0]
 8004c1a:	331c      	adds	r3, #28
 8004c1c:	613b      	str	r3, [r7, #16]
        break;
 8004c1e:	bf00      	nop
    }
  }

  /* Enable the DMA channel */
  if (Channel == DAC_CHANNEL_1)
 8004c20:	68bb      	ldr	r3, [r7, #8]
 8004c22:	2b00      	cmp	r3, #0
 8004c24:	d111      	bne.n	8004c4a <HAL_DAC_Start_DMA+0x106>
  {
    /* Enable the DAC DMA underrun interrupt */
    __HAL_DAC_ENABLE_IT(hdac, DAC_IT_DMAUDR1);
 8004c26:	68fb      	ldr	r3, [r7, #12]
 8004c28:	681b      	ldr	r3, [r3, #0]
 8004c2a:	681a      	ldr	r2, [r3, #0]
 8004c2c:	68fb      	ldr	r3, [r7, #12]
 8004c2e:	681b      	ldr	r3, [r3, #0]
 8004c30:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8004c34:	601a      	str	r2, [r3, #0]

    /* Enable the DMA channel */
    status = HAL_DMA_Start_IT(hdac->DMA_Handle1, (uint32_t)pData, tmpreg, Length);
 8004c36:	68fb      	ldr	r3, [r7, #12]
 8004c38:	6898      	ldr	r0, [r3, #8]
 8004c3a:	6879      	ldr	r1, [r7, #4]
 8004c3c:	683b      	ldr	r3, [r7, #0]
 8004c3e:	693a      	ldr	r2, [r7, #16]
 8004c40:	f000 fbc8 	bl	80053d4 <HAL_DMA_Start_IT>
 8004c44:	4603      	mov	r3, r0
 8004c46:	75fb      	strb	r3, [r7, #23]
 8004c48:	e010      	b.n	8004c6c <HAL_DAC_Start_DMA+0x128>
  }
  else
  {
    /* Enable the DAC DMA underrun interrupt */
    __HAL_DAC_ENABLE_IT(hdac, DAC_IT_DMAUDR2);
 8004c4a:	68fb      	ldr	r3, [r7, #12]
 8004c4c:	681b      	ldr	r3, [r3, #0]
 8004c4e:	681a      	ldr	r2, [r3, #0]
 8004c50:	68fb      	ldr	r3, [r7, #12]
 8004c52:	681b      	ldr	r3, [r3, #0]
 8004c54:	f042 5200 	orr.w	r2, r2, #536870912	; 0x20000000
 8004c58:	601a      	str	r2, [r3, #0]

    /* Enable the DMA channel */
    status = HAL_DMA_Start_IT(hdac->DMA_Handle2, (uint32_t)pData, tmpreg, Length);
 8004c5a:	68fb      	ldr	r3, [r7, #12]
 8004c5c:	68d8      	ldr	r0, [r3, #12]
 8004c5e:	6879      	ldr	r1, [r7, #4]
 8004c60:	683b      	ldr	r3, [r7, #0]
 8004c62:	693a      	ldr	r2, [r7, #16]
 8004c64:	f000 fbb6 	bl	80053d4 <HAL_DMA_Start_IT>
 8004c68:	4603      	mov	r3, r0
 8004c6a:	75fb      	strb	r3, [r7, #23]
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hdac);
 8004c6c:	68fb      	ldr	r3, [r7, #12]
 8004c6e:	2200      	movs	r2, #0
 8004c70:	715a      	strb	r2, [r3, #5]

  if (status == HAL_OK)
 8004c72:	7dfb      	ldrb	r3, [r7, #23]
 8004c74:	2b00      	cmp	r3, #0
 8004c76:	d10f      	bne.n	8004c98 <HAL_DAC_Start_DMA+0x154>
  {
    /* Enable the Peripheral */
    __HAL_DAC_ENABLE(hdac, Channel);
 8004c78:	68fb      	ldr	r3, [r7, #12]
 8004c7a:	681b      	ldr	r3, [r3, #0]
 8004c7c:	6819      	ldr	r1, [r3, #0]
 8004c7e:	68bb      	ldr	r3, [r7, #8]
 8004c80:	f003 0310 	and.w	r3, r3, #16
 8004c84:	2201      	movs	r2, #1
 8004c86:	409a      	lsls	r2, r3
 8004c88:	68fb      	ldr	r3, [r7, #12]
 8004c8a:	681b      	ldr	r3, [r3, #0]
 8004c8c:	430a      	orrs	r2, r1
 8004c8e:	601a      	str	r2, [r3, #0]
    /* Ensure minimum wait before using peripheral after enabling it */
    HAL_Delay(1);
 8004c90:	2001      	movs	r0, #1
 8004c92:	f7fe fa71 	bl	8003178 <HAL_Delay>
 8004c96:	e005      	b.n	8004ca4 <HAL_DAC_Start_DMA+0x160>
  }
  else
  {
    hdac->ErrorCode |= HAL_DAC_ERROR_DMA;
 8004c98:	68fb      	ldr	r3, [r7, #12]
 8004c9a:	691b      	ldr	r3, [r3, #16]
 8004c9c:	f043 0204 	orr.w	r2, r3, #4
 8004ca0:	68fb      	ldr	r3, [r7, #12]
 8004ca2:	611a      	str	r2, [r3, #16]
  }

  /* Return function status */
  return status;
 8004ca4:	7dfb      	ldrb	r3, [r7, #23]
}
 8004ca6:	4618      	mov	r0, r3
 8004ca8:	3718      	adds	r7, #24
 8004caa:	46bd      	mov	sp, r7
 8004cac:	bd80      	pop	{r7, pc}
 8004cae:	bf00      	nop
 8004cb0:	08005171 	.word	0x08005171
 8004cb4:	08005193 	.word	0x08005193
 8004cb8:	080051af 	.word	0x080051af
 8004cbc:	08005219 	.word	0x08005219
 8004cc0:	0800523b 	.word	0x0800523b
 8004cc4:	08005257 	.word	0x08005257

08004cc8 <HAL_DAC_Stop_DMA>:
  *         (1) On this STM32 serie, parameter not available on all instances.
  *             Refer to device datasheet for channels availability.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Stop_DMA(DAC_HandleTypeDef *hdac, uint32_t Channel)
{
 8004cc8:	b580      	push	{r7, lr}
 8004cca:	b084      	sub	sp, #16
 8004ccc:	af00      	add	r7, sp, #0
 8004cce:	6078      	str	r0, [r7, #4]
 8004cd0:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(hdac->Instance, Channel));

  /* Disable the selected DAC channel DMA request */
  hdac->Instance->CR &= ~(DAC_CR_DMAEN1 << (Channel & 0x10UL));
 8004cd2:	687b      	ldr	r3, [r7, #4]
 8004cd4:	681b      	ldr	r3, [r3, #0]
 8004cd6:	6819      	ldr	r1, [r3, #0]
 8004cd8:	683b      	ldr	r3, [r7, #0]
 8004cda:	f003 0310 	and.w	r3, r3, #16
 8004cde:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8004ce2:	fa02 f303 	lsl.w	r3, r2, r3
 8004ce6:	43da      	mvns	r2, r3
 8004ce8:	687b      	ldr	r3, [r7, #4]
 8004cea:	681b      	ldr	r3, [r3, #0]
 8004cec:	400a      	ands	r2, r1
 8004cee:	601a      	str	r2, [r3, #0]

  /* Disable the Peripheral */
  __HAL_DAC_DISABLE(hdac, Channel);
 8004cf0:	687b      	ldr	r3, [r7, #4]
 8004cf2:	681b      	ldr	r3, [r3, #0]
 8004cf4:	6819      	ldr	r1, [r3, #0]
 8004cf6:	683b      	ldr	r3, [r7, #0]
 8004cf8:	f003 0310 	and.w	r3, r3, #16
 8004cfc:	2201      	movs	r2, #1
 8004cfe:	fa02 f303 	lsl.w	r3, r2, r3
 8004d02:	43da      	mvns	r2, r3
 8004d04:	687b      	ldr	r3, [r7, #4]
 8004d06:	681b      	ldr	r3, [r3, #0]
 8004d08:	400a      	ands	r2, r1
 8004d0a:	601a      	str	r2, [r3, #0]
  /* Ensure minimum wait before enabling peripheral after disabling it */
  HAL_Delay(1);
 8004d0c:	2001      	movs	r0, #1
 8004d0e:	f7fe fa33 	bl	8003178 <HAL_Delay>

  /* Disable the DMA channel */

  /* Channel1 is used */
  if (Channel == DAC_CHANNEL_1)
 8004d12:	683b      	ldr	r3, [r7, #0]
 8004d14:	2b00      	cmp	r3, #0
 8004d16:	d10f      	bne.n	8004d38 <HAL_DAC_Stop_DMA+0x70>
  {
    /* Disable the DMA channel */
    status = HAL_DMA_Abort(hdac->DMA_Handle1);
 8004d18:	687b      	ldr	r3, [r7, #4]
 8004d1a:	689b      	ldr	r3, [r3, #8]
 8004d1c:	4618      	mov	r0, r3
 8004d1e:	f000 fbd4 	bl	80054ca <HAL_DMA_Abort>
 8004d22:	4603      	mov	r3, r0
 8004d24:	73fb      	strb	r3, [r7, #15]

    /* Disable the DAC DMA underrun interrupt */
    __HAL_DAC_DISABLE_IT(hdac, DAC_IT_DMAUDR1);
 8004d26:	687b      	ldr	r3, [r7, #4]
 8004d28:	681b      	ldr	r3, [r3, #0]
 8004d2a:	681a      	ldr	r2, [r3, #0]
 8004d2c:	687b      	ldr	r3, [r7, #4]
 8004d2e:	681b      	ldr	r3, [r3, #0]
 8004d30:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8004d34:	601a      	str	r2, [r3, #0]
 8004d36:	e00e      	b.n	8004d56 <HAL_DAC_Stop_DMA+0x8e>
  }
  else /* Channel2 is used for */
  {
    /* Disable the DMA channel */
    status = HAL_DMA_Abort(hdac->DMA_Handle2);
 8004d38:	687b      	ldr	r3, [r7, #4]
 8004d3a:	68db      	ldr	r3, [r3, #12]
 8004d3c:	4618      	mov	r0, r3
 8004d3e:	f000 fbc4 	bl	80054ca <HAL_DMA_Abort>
 8004d42:	4603      	mov	r3, r0
 8004d44:	73fb      	strb	r3, [r7, #15]

    /* Disable the DAC DMA underrun interrupt */
    __HAL_DAC_DISABLE_IT(hdac, DAC_IT_DMAUDR2);
 8004d46:	687b      	ldr	r3, [r7, #4]
 8004d48:	681b      	ldr	r3, [r3, #0]
 8004d4a:	681a      	ldr	r2, [r3, #0]
 8004d4c:	687b      	ldr	r3, [r7, #4]
 8004d4e:	681b      	ldr	r3, [r3, #0]
 8004d50:	f022 5200 	bic.w	r2, r2, #536870912	; 0x20000000
 8004d54:	601a      	str	r2, [r3, #0]
  }

  /* Check if DMA Channel effectively disabled */
  if (status != HAL_OK)
 8004d56:	7bfb      	ldrb	r3, [r7, #15]
 8004d58:	2b00      	cmp	r3, #0
 8004d5a:	d003      	beq.n	8004d64 <HAL_DAC_Stop_DMA+0x9c>
  {
    /* Update DAC state machine to error */
    hdac->State = HAL_DAC_STATE_ERROR;
 8004d5c:	687b      	ldr	r3, [r7, #4]
 8004d5e:	2204      	movs	r2, #4
 8004d60:	711a      	strb	r2, [r3, #4]
 8004d62:	e002      	b.n	8004d6a <HAL_DAC_Stop_DMA+0xa2>
  }
  else
  {
    /* Change DAC state */
    hdac->State = HAL_DAC_STATE_READY;
 8004d64:	687b      	ldr	r3, [r7, #4]
 8004d66:	2201      	movs	r2, #1
 8004d68:	711a      	strb	r2, [r3, #4]
  }

  /* Return function status */
  return status;
 8004d6a:	7bfb      	ldrb	r3, [r7, #15]
}
 8004d6c:	4618      	mov	r0, r3
 8004d6e:	3710      	adds	r7, #16
 8004d70:	46bd      	mov	sp, r7
 8004d72:	bd80      	pop	{r7, pc}

08004d74 <HAL_DAC_SetValue>:
  *            @arg DAC_ALIGN_12B_R: 12bit right data alignment selected
  * @param  Data Data to be loaded in the selected data holding register.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_SetValue(DAC_HandleTypeDef *hdac, uint32_t Channel, uint32_t Alignment, uint32_t Data)
{
 8004d74:	b480      	push	{r7}
 8004d76:	b087      	sub	sp, #28
 8004d78:	af00      	add	r7, sp, #0
 8004d7a:	60f8      	str	r0, [r7, #12]
 8004d7c:	60b9      	str	r1, [r7, #8]
 8004d7e:	607a      	str	r2, [r7, #4]
 8004d80:	603b      	str	r3, [r7, #0]
  __IO uint32_t tmp = 0;
 8004d82:	2300      	movs	r3, #0
 8004d84:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(hdac->Instance, Channel));
  assert_param(IS_DAC_ALIGN(Alignment));
  /* In case DMA Double data mode is activated, DATA range is almost full uin32_t one: no check */
  if ((hdac->Instance->MCR & (DAC_MCR_DMADOUBLE1 << (Channel & 0x10UL))) == 0UL)
 8004d86:	68fb      	ldr	r3, [r7, #12]
 8004d88:	681b      	ldr	r3, [r3, #0]
 8004d8a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
  {
    assert_param(IS_DAC_DATA(Data));
  }

  tmp = (uint32_t)hdac->Instance;
 8004d8c:	68fb      	ldr	r3, [r7, #12]
 8004d8e:	681b      	ldr	r3, [r3, #0]
 8004d90:	617b      	str	r3, [r7, #20]
  if (Channel == DAC_CHANNEL_1)
 8004d92:	68bb      	ldr	r3, [r7, #8]
 8004d94:	2b00      	cmp	r3, #0
 8004d96:	d105      	bne.n	8004da4 <HAL_DAC_SetValue+0x30>
  {
    tmp += DAC_DHR12R1_ALIGNMENT(Alignment);
 8004d98:	697a      	ldr	r2, [r7, #20]
 8004d9a:	687b      	ldr	r3, [r7, #4]
 8004d9c:	4413      	add	r3, r2
 8004d9e:	3308      	adds	r3, #8
 8004da0:	617b      	str	r3, [r7, #20]
 8004da2:	e004      	b.n	8004dae <HAL_DAC_SetValue+0x3a>
  }
  else
  {
    tmp += DAC_DHR12R2_ALIGNMENT(Alignment);
 8004da4:	697a      	ldr	r2, [r7, #20]
 8004da6:	687b      	ldr	r3, [r7, #4]
 8004da8:	4413      	add	r3, r2
 8004daa:	3314      	adds	r3, #20
 8004dac:	617b      	str	r3, [r7, #20]
  }

  /* Set the DAC channel selected data holding register */
  *(__IO uint32_t *) tmp = Data;
 8004dae:	697b      	ldr	r3, [r7, #20]
 8004db0:	461a      	mov	r2, r3
 8004db2:	683b      	ldr	r3, [r7, #0]
 8004db4:	6013      	str	r3, [r2, #0]

  /* Return function status */
  return HAL_OK;
 8004db6:	2300      	movs	r3, #0
}
 8004db8:	4618      	mov	r0, r3
 8004dba:	371c      	adds	r7, #28
 8004dbc:	46bd      	mov	sp, r7
 8004dbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004dc2:	4770      	bx	lr

08004dc4 <HAL_DAC_ConvCpltCallbackCh1>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DAC_ConvCpltCallbackCh1(DAC_HandleTypeDef *hdac)
{
 8004dc4:	b480      	push	{r7}
 8004dc6:	b083      	sub	sp, #12
 8004dc8:	af00      	add	r7, sp, #0
 8004dca:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DAC_ConvCpltCallbackCh1 could be implemented in the user file
   */
}
 8004dcc:	bf00      	nop
 8004dce:	370c      	adds	r7, #12
 8004dd0:	46bd      	mov	sp, r7
 8004dd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004dd6:	4770      	bx	lr

08004dd8 <HAL_DAC_ConvHalfCpltCallbackCh1>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DAC_ConvHalfCpltCallbackCh1(DAC_HandleTypeDef *hdac)
{
 8004dd8:	b480      	push	{r7}
 8004dda:	b083      	sub	sp, #12
 8004ddc:	af00      	add	r7, sp, #0
 8004dde:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DAC_ConvHalfCpltCallbackCh1 could be implemented in the user file
   */
}
 8004de0:	bf00      	nop
 8004de2:	370c      	adds	r7, #12
 8004de4:	46bd      	mov	sp, r7
 8004de6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004dea:	4770      	bx	lr

08004dec <HAL_DAC_GetValue>:
  *         (1) On this STM32 serie, parameter not available on all instances.
  *             Refer to device datasheet for channels availability.
  * @retval The selected DAC channel data output value.
  */
uint32_t HAL_DAC_GetValue(DAC_HandleTypeDef *hdac, uint32_t Channel)
{
 8004dec:	b480      	push	{r7}
 8004dee:	b083      	sub	sp, #12
 8004df0:	af00      	add	r7, sp, #0
 8004df2:	6078      	str	r0, [r7, #4]
 8004df4:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(hdac->Instance, Channel));

  /* Returns the DAC channel data output register value */
  if (Channel == DAC_CHANNEL_1)
 8004df6:	683b      	ldr	r3, [r7, #0]
 8004df8:	2b00      	cmp	r3, #0
 8004dfa:	d103      	bne.n	8004e04 <HAL_DAC_GetValue+0x18>
  {
    return hdac->Instance->DOR1;
 8004dfc:	687b      	ldr	r3, [r7, #4]
 8004dfe:	681b      	ldr	r3, [r3, #0]
 8004e00:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004e02:	e002      	b.n	8004e0a <HAL_DAC_GetValue+0x1e>
  }
  else
  {
    return hdac->Instance->DOR2;
 8004e04:	687b      	ldr	r3, [r7, #4]
 8004e06:	681b      	ldr	r3, [r3, #0]
 8004e08:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  }
}
 8004e0a:	4618      	mov	r0, r3
 8004e0c:	370c      	adds	r7, #12
 8004e0e:	46bd      	mov	sp, r7
 8004e10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e14:	4770      	bx	lr
	...

08004e18 <HAL_DAC_ConfigChannel>:
  *         (1) On this STM32 serie, parameter not available on all instances.
  *             Refer to device datasheet for channels availability.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_ConfigChannel(DAC_HandleTypeDef *hdac, DAC_ChannelConfTypeDef *sConfig, uint32_t Channel)
{
 8004e18:	b580      	push	{r7, lr}
 8004e1a:	b08a      	sub	sp, #40	; 0x28
 8004e1c:	af00      	add	r7, sp, #0
 8004e1e:	60f8      	str	r0, [r7, #12]
 8004e20:	60b9      	str	r1, [r7, #8]
 8004e22:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg1;
  uint32_t tmpreg2;
  uint32_t tickstart = 0U;
 8004e24:	2300      	movs	r3, #0
 8004e26:	61fb      	str	r3, [r7, #28]
  assert_param(IS_DAC_CHANNEL(hdac->Instance, Channel));
  assert_param(IS_FUNCTIONAL_STATE(sConfig->DAC_DMADoubleDataMode));
  assert_param(IS_FUNCTIONAL_STATE(sConfig->DAC_SignedFormat));

  /* Process locked */
  __HAL_LOCK(hdac);
 8004e28:	68fb      	ldr	r3, [r7, #12]
 8004e2a:	795b      	ldrb	r3, [r3, #5]
 8004e2c:	2b01      	cmp	r3, #1
 8004e2e:	d101      	bne.n	8004e34 <HAL_DAC_ConfigChannel+0x1c>
 8004e30:	2302      	movs	r3, #2
 8004e32:	e194      	b.n	800515e <HAL_DAC_ConfigChannel+0x346>
 8004e34:	68fb      	ldr	r3, [r7, #12]
 8004e36:	2201      	movs	r2, #1
 8004e38:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 8004e3a:	68fb      	ldr	r3, [r7, #12]
 8004e3c:	2202      	movs	r2, #2
 8004e3e:	711a      	strb	r2, [r3, #4]

  if (sConfig->DAC_SampleAndHold == DAC_SAMPLEANDHOLD_ENABLE)
 8004e40:	68bb      	ldr	r3, [r7, #8]
 8004e42:	689b      	ldr	r3, [r3, #8]
 8004e44:	2b04      	cmp	r3, #4
 8004e46:	d174      	bne.n	8004f32 <HAL_DAC_ConfigChannel+0x11a>
    /* Sample on old configuration */
  {
    /* SampleTime */
    if (Channel == DAC_CHANNEL_1)
 8004e48:	687b      	ldr	r3, [r7, #4]
 8004e4a:	2b00      	cmp	r3, #0
 8004e4c:	d137      	bne.n	8004ebe <HAL_DAC_ConfigChannel+0xa6>
    {
      /* Get timeout */
      tickstart = HAL_GetTick();
 8004e4e:	f7fe f987 	bl	8003160 <HAL_GetTick>
 8004e52:	61f8      	str	r0, [r7, #28]

      /* SHSR1 can be written when BWST1 is cleared */
      while (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 8004e54:	e011      	b.n	8004e7a <HAL_DAC_ConfigChannel+0x62>
      {
        /* Check for the Timeout */
        if ((HAL_GetTick() - tickstart) > TIMEOUT_DAC_CALIBCONFIG)
 8004e56:	f7fe f983 	bl	8003160 <HAL_GetTick>
 8004e5a:	4602      	mov	r2, r0
 8004e5c:	69fb      	ldr	r3, [r7, #28]
 8004e5e:	1ad3      	subs	r3, r2, r3
 8004e60:	2b01      	cmp	r3, #1
 8004e62:	d90a      	bls.n	8004e7a <HAL_DAC_ConfigChannel+0x62>
        {
          /* Update error code */
          SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_TIMEOUT);
 8004e64:	68fb      	ldr	r3, [r7, #12]
 8004e66:	691b      	ldr	r3, [r3, #16]
 8004e68:	f043 0208 	orr.w	r2, r3, #8
 8004e6c:	68fb      	ldr	r3, [r7, #12]
 8004e6e:	611a      	str	r2, [r3, #16]

          /* Change the DMA state */
          hdac->State = HAL_DAC_STATE_TIMEOUT;
 8004e70:	68fb      	ldr	r3, [r7, #12]
 8004e72:	2203      	movs	r2, #3
 8004e74:	711a      	strb	r2, [r3, #4]

          return HAL_TIMEOUT;
 8004e76:	2303      	movs	r3, #3
 8004e78:	e171      	b.n	800515e <HAL_DAC_ConfigChannel+0x346>
      while (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 8004e7a:	68fb      	ldr	r3, [r7, #12]
 8004e7c:	681b      	ldr	r3, [r3, #0]
 8004e7e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004e80:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8004e84:	2b00      	cmp	r3, #0
 8004e86:	d1e6      	bne.n	8004e56 <HAL_DAC_ConfigChannel+0x3e>
        }
      }
      HAL_Delay(1);
 8004e88:	2001      	movs	r0, #1
 8004e8a:	f7fe f975 	bl	8003178 <HAL_Delay>
      hdac->Instance->SHSR1 = sConfig->DAC_SampleAndHoldConfig.DAC_SampleTime;
 8004e8e:	68fb      	ldr	r3, [r7, #12]
 8004e90:	681b      	ldr	r3, [r3, #0]
 8004e92:	68ba      	ldr	r2, [r7, #8]
 8004e94:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8004e96:	641a      	str	r2, [r3, #64]	; 0x40
 8004e98:	e01e      	b.n	8004ed8 <HAL_DAC_ConfigChannel+0xc0>
      /* SHSR2 can be written when BWST2 is cleared */

      while (((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
      {
        /* Check for the Timeout */
        if ((HAL_GetTick() - tickstart) > TIMEOUT_DAC_CALIBCONFIG)
 8004e9a:	f7fe f961 	bl	8003160 <HAL_GetTick>
 8004e9e:	4602      	mov	r2, r0
 8004ea0:	69fb      	ldr	r3, [r7, #28]
 8004ea2:	1ad3      	subs	r3, r2, r3
 8004ea4:	2b01      	cmp	r3, #1
 8004ea6:	d90a      	bls.n	8004ebe <HAL_DAC_ConfigChannel+0xa6>
        {
          /* Update error code */
          SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_TIMEOUT);
 8004ea8:	68fb      	ldr	r3, [r7, #12]
 8004eaa:	691b      	ldr	r3, [r3, #16]
 8004eac:	f043 0208 	orr.w	r2, r3, #8
 8004eb0:	68fb      	ldr	r3, [r7, #12]
 8004eb2:	611a      	str	r2, [r3, #16]

          /* Change the DMA state */
          hdac->State = HAL_DAC_STATE_TIMEOUT;
 8004eb4:	68fb      	ldr	r3, [r7, #12]
 8004eb6:	2203      	movs	r2, #3
 8004eb8:	711a      	strb	r2, [r3, #4]

          return HAL_TIMEOUT;
 8004eba:	2303      	movs	r3, #3
 8004ebc:	e14f      	b.n	800515e <HAL_DAC_ConfigChannel+0x346>
      while (((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
 8004ebe:	68fb      	ldr	r3, [r7, #12]
 8004ec0:	681b      	ldr	r3, [r3, #0]
 8004ec2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004ec4:	2b00      	cmp	r3, #0
 8004ec6:	dbe8      	blt.n	8004e9a <HAL_DAC_ConfigChannel+0x82>
        }
      }
      HAL_Delay(1U);
 8004ec8:	2001      	movs	r0, #1
 8004eca:	f7fe f955 	bl	8003178 <HAL_Delay>
      hdac->Instance->SHSR2 = sConfig->DAC_SampleAndHoldConfig.DAC_SampleTime;
 8004ece:	68fb      	ldr	r3, [r7, #12]
 8004ed0:	681b      	ldr	r3, [r3, #0]
 8004ed2:	68ba      	ldr	r2, [r7, #8]
 8004ed4:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8004ed6:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* HoldTime */
    MODIFY_REG(hdac->Instance->SHHR, DAC_SHHR_THOLD1 << (Channel & 0x10UL), (sConfig->DAC_SampleAndHoldConfig.DAC_HoldTime) << (Channel & 0x10UL));
 8004ed8:	68fb      	ldr	r3, [r7, #12]
 8004eda:	681b      	ldr	r3, [r3, #0]
 8004edc:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8004ede:	687b      	ldr	r3, [r7, #4]
 8004ee0:	f003 0310 	and.w	r3, r3, #16
 8004ee4:	f240 31ff 	movw	r1, #1023	; 0x3ff
 8004ee8:	fa01 f303 	lsl.w	r3, r1, r3
 8004eec:	43db      	mvns	r3, r3
 8004eee:	ea02 0103 	and.w	r1, r2, r3
 8004ef2:	68bb      	ldr	r3, [r7, #8]
 8004ef4:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8004ef6:	687b      	ldr	r3, [r7, #4]
 8004ef8:	f003 0310 	and.w	r3, r3, #16
 8004efc:	409a      	lsls	r2, r3
 8004efe:	68fb      	ldr	r3, [r7, #12]
 8004f00:	681b      	ldr	r3, [r3, #0]
 8004f02:	430a      	orrs	r2, r1
 8004f04:	649a      	str	r2, [r3, #72]	; 0x48
    /* RefreshTime */
    MODIFY_REG(hdac->Instance->SHRR, DAC_SHRR_TREFRESH1 << (Channel & 0x10UL), (sConfig->DAC_SampleAndHoldConfig.DAC_RefreshTime) << (Channel & 0x10UL));
 8004f06:	68fb      	ldr	r3, [r7, #12]
 8004f08:	681b      	ldr	r3, [r3, #0]
 8004f0a:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8004f0c:	687b      	ldr	r3, [r7, #4]
 8004f0e:	f003 0310 	and.w	r3, r3, #16
 8004f12:	21ff      	movs	r1, #255	; 0xff
 8004f14:	fa01 f303 	lsl.w	r3, r1, r3
 8004f18:	43db      	mvns	r3, r3
 8004f1a:	ea02 0103 	and.w	r1, r2, r3
 8004f1e:	68bb      	ldr	r3, [r7, #8]
 8004f20:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004f22:	687b      	ldr	r3, [r7, #4]
 8004f24:	f003 0310 	and.w	r3, r3, #16
 8004f28:	409a      	lsls	r2, r3
 8004f2a:	68fb      	ldr	r3, [r7, #12]
 8004f2c:	681b      	ldr	r3, [r3, #0]
 8004f2e:	430a      	orrs	r2, r1
 8004f30:	64da      	str	r2, [r3, #76]	; 0x4c
  }

  if (sConfig->DAC_UserTrimming == DAC_TRIMMING_USER)
 8004f32:	68bb      	ldr	r3, [r7, #8]
 8004f34:	69db      	ldr	r3, [r3, #28]
 8004f36:	2b01      	cmp	r3, #1
 8004f38:	d11d      	bne.n	8004f76 <HAL_DAC_ConfigChannel+0x15e>
    /* USER TRIMMING */
  {
    /* Get the DAC CCR value */
    tmpreg1 = hdac->Instance->CCR;
 8004f3a:	68fb      	ldr	r3, [r7, #12]
 8004f3c:	681b      	ldr	r3, [r3, #0]
 8004f3e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004f40:	627b      	str	r3, [r7, #36]	; 0x24
    /* Clear trimming value */
    tmpreg1 &= ~(((uint32_t)(DAC_CCR_OTRIM1)) << (Channel & 0x10UL));
 8004f42:	687b      	ldr	r3, [r7, #4]
 8004f44:	f003 0310 	and.w	r3, r3, #16
 8004f48:	221f      	movs	r2, #31
 8004f4a:	fa02 f303 	lsl.w	r3, r2, r3
 8004f4e:	43db      	mvns	r3, r3
 8004f50:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004f52:	4013      	ands	r3, r2
 8004f54:	627b      	str	r3, [r7, #36]	; 0x24
    /* Configure for the selected trimming offset */
    tmpreg2 = sConfig->DAC_TrimmingValue;
 8004f56:	68bb      	ldr	r3, [r7, #8]
 8004f58:	6a1b      	ldr	r3, [r3, #32]
 8004f5a:	61bb      	str	r3, [r7, #24]
    /* Calculate CCR register value depending on DAC_Channel */
    tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 8004f5c:	687b      	ldr	r3, [r7, #4]
 8004f5e:	f003 0310 	and.w	r3, r3, #16
 8004f62:	69ba      	ldr	r2, [r7, #24]
 8004f64:	fa02 f303 	lsl.w	r3, r2, r3
 8004f68:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004f6a:	4313      	orrs	r3, r2
 8004f6c:	627b      	str	r3, [r7, #36]	; 0x24
    /* Write to DAC CCR */
    hdac->Instance->CCR = tmpreg1;
 8004f6e:	68fb      	ldr	r3, [r7, #12]
 8004f70:	681b      	ldr	r3, [r3, #0]
 8004f72:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004f74:	639a      	str	r2, [r3, #56]	; 0x38
  }
  /* else factory trimming is used (factory setting are available at reset)*/
  /* SW Nothing has nothing to do */

  /* Get the DAC MCR value */
  tmpreg1 = hdac->Instance->MCR;
 8004f76:	68fb      	ldr	r3, [r7, #12]
 8004f78:	681b      	ldr	r3, [r3, #0]
 8004f7a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004f7c:	627b      	str	r3, [r7, #36]	; 0x24
  /* Clear DAC_MCR_MODEx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_MCR_MODE1)) << (Channel & 0x10UL));
 8004f7e:	687b      	ldr	r3, [r7, #4]
 8004f80:	f003 0310 	and.w	r3, r3, #16
 8004f84:	2207      	movs	r2, #7
 8004f86:	fa02 f303 	lsl.w	r3, r2, r3
 8004f8a:	43db      	mvns	r3, r3
 8004f8c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004f8e:	4013      	ands	r3, r2
 8004f90:	627b      	str	r3, [r7, #36]	; 0x24
  /* Configure for the selected DAC channel: mode, buffer output & on chip peripheral connect */
  if ((sConfig->DAC_ConnectOnChipPeripheral & DAC_CHIPCONNECT_EXTERNAL) == DAC_CHIPCONNECT_EXTERNAL)
 8004f92:	68bb      	ldr	r3, [r7, #8]
 8004f94:	699b      	ldr	r3, [r3, #24]
 8004f96:	f003 0301 	and.w	r3, r3, #1
 8004f9a:	2b00      	cmp	r3, #0
 8004f9c:	d002      	beq.n	8004fa4 <HAL_DAC_ConfigChannel+0x18c>
  {
    connectOnChip = 0x00000000UL;
 8004f9e:	2300      	movs	r3, #0
 8004fa0:	623b      	str	r3, [r7, #32]
 8004fa2:	e011      	b.n	8004fc8 <HAL_DAC_ConfigChannel+0x1b0>
  }
  else if ((sConfig->DAC_ConnectOnChipPeripheral & DAC_CHIPCONNECT_INTERNAL) == DAC_CHIPCONNECT_INTERNAL)
 8004fa4:	68bb      	ldr	r3, [r7, #8]
 8004fa6:	699b      	ldr	r3, [r3, #24]
 8004fa8:	f003 0302 	and.w	r3, r3, #2
 8004fac:	2b00      	cmp	r3, #0
 8004fae:	d002      	beq.n	8004fb6 <HAL_DAC_ConfigChannel+0x19e>
  {
    connectOnChip = DAC_MCR_MODE1_0;
 8004fb0:	2301      	movs	r3, #1
 8004fb2:	623b      	str	r3, [r7, #32]
 8004fb4:	e008      	b.n	8004fc8 <HAL_DAC_ConfigChannel+0x1b0>
  }
  else /* (sConfig->DAC_ConnectOnChipPeripheral & DAC_CHIPCONNECT_BOTH) == DAC_CHIPCONNECT_BOTH */
  {
    if (sConfig->DAC_OutputBuffer == DAC_OUTPUTBUFFER_ENABLE)
 8004fb6:	68bb      	ldr	r3, [r7, #8]
 8004fb8:	695b      	ldr	r3, [r3, #20]
 8004fba:	2b00      	cmp	r3, #0
 8004fbc:	d102      	bne.n	8004fc4 <HAL_DAC_ConfigChannel+0x1ac>
    {
      connectOnChip = DAC_MCR_MODE1_0;
 8004fbe:	2301      	movs	r3, #1
 8004fc0:	623b      	str	r3, [r7, #32]
 8004fc2:	e001      	b.n	8004fc8 <HAL_DAC_ConfigChannel+0x1b0>
    }
    else
    {
      connectOnChip = 0x00000000UL;
 8004fc4:	2300      	movs	r3, #0
 8004fc6:	623b      	str	r3, [r7, #32]
    }
  }
  tmpreg2 = (sConfig->DAC_SampleAndHold | sConfig->DAC_OutputBuffer | connectOnChip);
 8004fc8:	68bb      	ldr	r3, [r7, #8]
 8004fca:	689a      	ldr	r2, [r3, #8]
 8004fcc:	68bb      	ldr	r3, [r7, #8]
 8004fce:	695b      	ldr	r3, [r3, #20]
 8004fd0:	4313      	orrs	r3, r2
 8004fd2:	6a3a      	ldr	r2, [r7, #32]
 8004fd4:	4313      	orrs	r3, r2
 8004fd6:	61bb      	str	r3, [r7, #24]
  /* Clear DAC_MCR_DMADOUBLEx */
  tmpreg1 &= ~(((uint32_t)(DAC_MCR_DMADOUBLE1)) << (Channel & 0x10UL));
 8004fd8:	687b      	ldr	r3, [r7, #4]
 8004fda:	f003 0310 	and.w	r3, r3, #16
 8004fde:	f44f 7280 	mov.w	r2, #256	; 0x100
 8004fe2:	fa02 f303 	lsl.w	r3, r2, r3
 8004fe6:	43db      	mvns	r3, r3
 8004fe8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004fea:	4013      	ands	r3, r2
 8004fec:	627b      	str	r3, [r7, #36]	; 0x24
  /* Configure for the selected DAC channel: DMA double data mode */
  tmpreg2 |= (sConfig->DAC_DMADoubleDataMode == ENABLE) ? DAC_MCR_DMADOUBLE1 : 0UL;
 8004fee:	68bb      	ldr	r3, [r7, #8]
 8004ff0:	791b      	ldrb	r3, [r3, #4]
 8004ff2:	2b01      	cmp	r3, #1
 8004ff4:	d102      	bne.n	8004ffc <HAL_DAC_ConfigChannel+0x1e4>
 8004ff6:	f44f 7380 	mov.w	r3, #256	; 0x100
 8004ffa:	e000      	b.n	8004ffe <HAL_DAC_ConfigChannel+0x1e6>
 8004ffc:	2300      	movs	r3, #0
 8004ffe:	69ba      	ldr	r2, [r7, #24]
 8005000:	4313      	orrs	r3, r2
 8005002:	61bb      	str	r3, [r7, #24]
  /* Clear DAC_MCR_SINFORMATx */
  tmpreg1 &= ~(((uint32_t)(DAC_MCR_SINFORMAT1)) << (Channel & 0x10UL));
 8005004:	687b      	ldr	r3, [r7, #4]
 8005006:	f003 0310 	and.w	r3, r3, #16
 800500a:	f44f 7200 	mov.w	r2, #512	; 0x200
 800500e:	fa02 f303 	lsl.w	r3, r2, r3
 8005012:	43db      	mvns	r3, r3
 8005014:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005016:	4013      	ands	r3, r2
 8005018:	627b      	str	r3, [r7, #36]	; 0x24
  /* Configure for the selected DAC channel: Signed format */
  tmpreg2 |= (sConfig->DAC_SignedFormat == ENABLE) ? DAC_MCR_SINFORMAT1 : 0UL;
 800501a:	68bb      	ldr	r3, [r7, #8]
 800501c:	795b      	ldrb	r3, [r3, #5]
 800501e:	2b01      	cmp	r3, #1
 8005020:	d102      	bne.n	8005028 <HAL_DAC_ConfigChannel+0x210>
 8005022:	f44f 7300 	mov.w	r3, #512	; 0x200
 8005026:	e000      	b.n	800502a <HAL_DAC_ConfigChannel+0x212>
 8005028:	2300      	movs	r3, #0
 800502a:	69ba      	ldr	r2, [r7, #24]
 800502c:	4313      	orrs	r3, r2
 800502e:	61bb      	str	r3, [r7, #24]
  /* Clear DAC_MCR_HFSEL bits */
  tmpreg1 &= ~(DAC_MCR_HFSEL);
 8005030:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005032:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8005036:	627b      	str	r3, [r7, #36]	; 0x24
  /* Configure for both DAC channels: high frequency mode */
  if (DAC_HIGH_FREQUENCY_INTERFACE_MODE_AUTOMATIC == sConfig->DAC_HighFrequency)
 8005038:	68bb      	ldr	r3, [r7, #8]
 800503a:	681b      	ldr	r3, [r3, #0]
 800503c:	2b02      	cmp	r3, #2
 800503e:	d114      	bne.n	800506a <HAL_DAC_ConfigChannel+0x252>
  {
    hclkfreq = HAL_RCC_GetHCLKFreq();
 8005040:	f001 faf8 	bl	8006634 <HAL_RCC_GetHCLKFreq>
 8005044:	6178      	str	r0, [r7, #20]
    if (hclkfreq > HFSEL_ENABLE_THRESHOLD_160MHZ)
 8005046:	697b      	ldr	r3, [r7, #20]
 8005048:	4a47      	ldr	r2, [pc, #284]	; (8005168 <HAL_DAC_ConfigChannel+0x350>)
 800504a:	4293      	cmp	r3, r2
 800504c:	d904      	bls.n	8005058 <HAL_DAC_ConfigChannel+0x240>
    {
      tmpreg1 |= DAC_HIGH_FREQUENCY_INTERFACE_MODE_ABOVE_160MHZ;
 800504e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005050:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005054:	627b      	str	r3, [r7, #36]	; 0x24
 8005056:	e00d      	b.n	8005074 <HAL_DAC_ConfigChannel+0x25c>
    }
    else if (hclkfreq > HFSEL_ENABLE_THRESHOLD_80MHZ)
 8005058:	697b      	ldr	r3, [r7, #20]
 800505a:	4a44      	ldr	r2, [pc, #272]	; (800516c <HAL_DAC_ConfigChannel+0x354>)
 800505c:	4293      	cmp	r3, r2
 800505e:	d909      	bls.n	8005074 <HAL_DAC_ConfigChannel+0x25c>
    {
      tmpreg1 |= DAC_HIGH_FREQUENCY_INTERFACE_MODE_ABOVE_80MHZ;
 8005060:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005062:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8005066:	627b      	str	r3, [r7, #36]	; 0x24
 8005068:	e004      	b.n	8005074 <HAL_DAC_ConfigChannel+0x25c>
      tmpreg1 |= DAC_HIGH_FREQUENCY_INTERFACE_MODE_DISABLE;
    }
  }
  else
  {
    tmpreg1 |= sConfig->DAC_HighFrequency;
 800506a:	68bb      	ldr	r3, [r7, #8]
 800506c:	681b      	ldr	r3, [r3, #0]
 800506e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005070:	4313      	orrs	r3, r2
 8005072:	627b      	str	r3, [r7, #36]	; 0x24
  }
  /* Calculate MCR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 8005074:	687b      	ldr	r3, [r7, #4]
 8005076:	f003 0310 	and.w	r3, r3, #16
 800507a:	69ba      	ldr	r2, [r7, #24]
 800507c:	fa02 f303 	lsl.w	r3, r2, r3
 8005080:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005082:	4313      	orrs	r3, r2
 8005084:	627b      	str	r3, [r7, #36]	; 0x24
  /* Write to DAC MCR */
  hdac->Instance->MCR = tmpreg1;
 8005086:	68fb      	ldr	r3, [r7, #12]
 8005088:	681b      	ldr	r3, [r3, #0]
 800508a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800508c:	63da      	str	r2, [r3, #60]	; 0x3c

  /* DAC in normal operating mode hence clear DAC_CR_CENx bit */
  CLEAR_BIT(hdac->Instance->CR, DAC_CR_CEN1 << (Channel & 0x10UL));
 800508e:	68fb      	ldr	r3, [r7, #12]
 8005090:	681b      	ldr	r3, [r3, #0]
 8005092:	6819      	ldr	r1, [r3, #0]
 8005094:	687b      	ldr	r3, [r7, #4]
 8005096:	f003 0310 	and.w	r3, r3, #16
 800509a:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800509e:	fa02 f303 	lsl.w	r3, r2, r3
 80050a2:	43da      	mvns	r2, r3
 80050a4:	68fb      	ldr	r3, [r7, #12]
 80050a6:	681b      	ldr	r3, [r3, #0]
 80050a8:	400a      	ands	r2, r1
 80050aa:	601a      	str	r2, [r3, #0]

  /* Get the DAC CR value */
  tmpreg1 = hdac->Instance->CR;
 80050ac:	68fb      	ldr	r3, [r7, #12]
 80050ae:	681b      	ldr	r3, [r3, #0]
 80050b0:	681b      	ldr	r3, [r3, #0]
 80050b2:	627b      	str	r3, [r7, #36]	; 0x24
  /* Clear TENx, TSELx, WAVEx and MAMPx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1)) << (Channel & 0x10UL));
 80050b4:	687b      	ldr	r3, [r7, #4]
 80050b6:	f003 0310 	and.w	r3, r3, #16
 80050ba:	f640 72fe 	movw	r2, #4094	; 0xffe
 80050be:	fa02 f303 	lsl.w	r3, r2, r3
 80050c2:	43db      	mvns	r3, r3
 80050c4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80050c6:	4013      	ands	r3, r2
 80050c8:	627b      	str	r3, [r7, #36]	; 0x24
  /* Configure for the selected DAC channel: trigger */
  /* Set TSELx and TENx bits according to DAC_Trigger value */
  tmpreg2 = sConfig->DAC_Trigger;
 80050ca:	68bb      	ldr	r3, [r7, #8]
 80050cc:	68db      	ldr	r3, [r3, #12]
 80050ce:	61bb      	str	r3, [r7, #24]
  /* Calculate CR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 80050d0:	687b      	ldr	r3, [r7, #4]
 80050d2:	f003 0310 	and.w	r3, r3, #16
 80050d6:	69ba      	ldr	r2, [r7, #24]
 80050d8:	fa02 f303 	lsl.w	r3, r2, r3
 80050dc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80050de:	4313      	orrs	r3, r2
 80050e0:	627b      	str	r3, [r7, #36]	; 0x24
  /* Write to DAC CR */
  hdac->Instance->CR = tmpreg1;
 80050e2:	68fb      	ldr	r3, [r7, #12]
 80050e4:	681b      	ldr	r3, [r3, #0]
 80050e6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80050e8:	601a      	str	r2, [r3, #0]
  /* Disable wave generation */
  hdac->Instance->CR &= ~(DAC_CR_WAVE1 << (Channel & 0x10UL));
 80050ea:	68fb      	ldr	r3, [r7, #12]
 80050ec:	681b      	ldr	r3, [r3, #0]
 80050ee:	6819      	ldr	r1, [r3, #0]
 80050f0:	687b      	ldr	r3, [r7, #4]
 80050f2:	f003 0310 	and.w	r3, r3, #16
 80050f6:	22c0      	movs	r2, #192	; 0xc0
 80050f8:	fa02 f303 	lsl.w	r3, r2, r3
 80050fc:	43da      	mvns	r2, r3
 80050fe:	68fb      	ldr	r3, [r7, #12]
 8005100:	681b      	ldr	r3, [r3, #0]
 8005102:	400a      	ands	r2, r1
 8005104:	601a      	str	r2, [r3, #0]

  /* Set STRSTTRIGSELx and STINCTRIGSELx bits according to DAC_Trigger & DAC_Trigger2 values */
  tmpreg2 = ((sConfig->DAC_Trigger & DAC_CR_TSEL1) >> DAC_CR_TSEL1_Pos) << DAC_STMODR_STRSTTRIGSEL1_Pos;
 8005106:	68bb      	ldr	r3, [r7, #8]
 8005108:	68db      	ldr	r3, [r3, #12]
 800510a:	089b      	lsrs	r3, r3, #2
 800510c:	f003 030f 	and.w	r3, r3, #15
 8005110:	61bb      	str	r3, [r7, #24]
  tmpreg2 |= ((sConfig->DAC_Trigger2 & DAC_CR_TSEL1) >> DAC_CR_TSEL1_Pos) << DAC_STMODR_STINCTRIGSEL1_Pos;
 8005112:	68bb      	ldr	r3, [r7, #8]
 8005114:	691b      	ldr	r3, [r3, #16]
 8005116:	089b      	lsrs	r3, r3, #2
 8005118:	021b      	lsls	r3, r3, #8
 800511a:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 800511e:	69ba      	ldr	r2, [r7, #24]
 8005120:	4313      	orrs	r3, r2
 8005122:	61bb      	str	r3, [r7, #24]
  /* Modify STMODR register value depending on DAC_Channel */
  MODIFY_REG(hdac->Instance->STMODR, (DAC_STMODR_STINCTRIGSEL1 | DAC_STMODR_STRSTTRIGSEL1) << (Channel & 0x10UL), tmpreg2 << (Channel & 0x10UL));
 8005124:	68fb      	ldr	r3, [r7, #12]
 8005126:	681b      	ldr	r3, [r3, #0]
 8005128:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 800512a:	687b      	ldr	r3, [r7, #4]
 800512c:	f003 0310 	and.w	r3, r3, #16
 8005130:	f640 710f 	movw	r1, #3855	; 0xf0f
 8005134:	fa01 f303 	lsl.w	r3, r1, r3
 8005138:	43db      	mvns	r3, r3
 800513a:	ea02 0103 	and.w	r1, r2, r3
 800513e:	687b      	ldr	r3, [r7, #4]
 8005140:	f003 0310 	and.w	r3, r3, #16
 8005144:	69ba      	ldr	r2, [r7, #24]
 8005146:	409a      	lsls	r2, r3
 8005148:	68fb      	ldr	r3, [r7, #12]
 800514a:	681b      	ldr	r3, [r3, #0]
 800514c:	430a      	orrs	r2, r1
 800514e:	661a      	str	r2, [r3, #96]	; 0x60
  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 8005150:	68fb      	ldr	r3, [r7, #12]
 8005152:	2201      	movs	r2, #1
 8005154:	711a      	strb	r2, [r3, #4]

  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 8005156:	68fb      	ldr	r3, [r7, #12]
 8005158:	2200      	movs	r2, #0
 800515a:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 800515c:	2300      	movs	r3, #0
}
 800515e:	4618      	mov	r0, r3
 8005160:	3728      	adds	r7, #40	; 0x28
 8005162:	46bd      	mov	sp, r7
 8005164:	bd80      	pop	{r7, pc}
 8005166:	bf00      	nop
 8005168:	09896800 	.word	0x09896800
 800516c:	04c4b400 	.word	0x04c4b400

08005170 <DAC_DMAConvCpltCh1>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAConvCpltCh1(DMA_HandleTypeDef *hdma)
{
 8005170:	b580      	push	{r7, lr}
 8005172:	b084      	sub	sp, #16
 8005174:	af00      	add	r7, sp, #0
 8005176:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8005178:	687b      	ldr	r3, [r7, #4]
 800517a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800517c:	60fb      	str	r3, [r7, #12]

#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvCpltCallbackCh1(hdac);
#else
  HAL_DAC_ConvCpltCallbackCh1(hdac);
 800517e:	68f8      	ldr	r0, [r7, #12]
 8005180:	f7ff fe20 	bl	8004dc4 <HAL_DAC_ConvCpltCallbackCh1>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

  hdac->State = HAL_DAC_STATE_READY;
 8005184:	68fb      	ldr	r3, [r7, #12]
 8005186:	2201      	movs	r2, #1
 8005188:	711a      	strb	r2, [r3, #4]
}
 800518a:	bf00      	nop
 800518c:	3710      	adds	r7, #16
 800518e:	46bd      	mov	sp, r7
 8005190:	bd80      	pop	{r7, pc}

08005192 <DAC_DMAHalfConvCpltCh1>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAHalfConvCpltCh1(DMA_HandleTypeDef *hdma)
{
 8005192:	b580      	push	{r7, lr}
 8005194:	b084      	sub	sp, #16
 8005196:	af00      	add	r7, sp, #0
 8005198:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800519a:	687b      	ldr	r3, [r7, #4]
 800519c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800519e:	60fb      	str	r3, [r7, #12]
  /* Conversion complete callback */
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvHalfCpltCallbackCh1(hdac);
#else
  HAL_DAC_ConvHalfCpltCallbackCh1(hdac);
 80051a0:	68f8      	ldr	r0, [r7, #12]
 80051a2:	f7ff fe19 	bl	8004dd8 <HAL_DAC_ConvHalfCpltCallbackCh1>
#endif  /* USE_HAL_DAC_REGISTER_CALLBACKS */
}
 80051a6:	bf00      	nop
 80051a8:	3710      	adds	r7, #16
 80051aa:	46bd      	mov	sp, r7
 80051ac:	bd80      	pop	{r7, pc}

080051ae <DAC_DMAErrorCh1>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAErrorCh1(DMA_HandleTypeDef *hdma)
{
 80051ae:	b580      	push	{r7, lr}
 80051b0:	b084      	sub	sp, #16
 80051b2:	af00      	add	r7, sp, #0
 80051b4:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80051b6:	687b      	ldr	r3, [r7, #4]
 80051b8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80051ba:	60fb      	str	r3, [r7, #12]

  /* Set DAC error code to DMA error */
  hdac->ErrorCode |= HAL_DAC_ERROR_DMA;
 80051bc:	68fb      	ldr	r3, [r7, #12]
 80051be:	691b      	ldr	r3, [r3, #16]
 80051c0:	f043 0204 	orr.w	r2, r3, #4
 80051c4:	68fb      	ldr	r3, [r7, #12]
 80051c6:	611a      	str	r2, [r3, #16]

#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ErrorCallbackCh1(hdac);
#else
  HAL_DAC_ErrorCallbackCh1(hdac);
 80051c8:	68f8      	ldr	r0, [r7, #12]
 80051ca:	f7fd f812 	bl	80021f2 <HAL_DAC_ErrorCallbackCh1>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

  hdac->State = HAL_DAC_STATE_READY;
 80051ce:	68fb      	ldr	r3, [r7, #12]
 80051d0:	2201      	movs	r2, #1
 80051d2:	711a      	strb	r2, [r3, #4]
}
 80051d4:	bf00      	nop
 80051d6:	3710      	adds	r7, #16
 80051d8:	46bd      	mov	sp, r7
 80051da:	bd80      	pop	{r7, pc}

080051dc <HAL_DACEx_ConvCpltCallbackCh2>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DACEx_ConvCpltCallbackCh2(DAC_HandleTypeDef *hdac)
{
 80051dc:	b480      	push	{r7}
 80051de:	b083      	sub	sp, #12
 80051e0:	af00      	add	r7, sp, #0
 80051e2:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DACEx_ConvCpltCallbackCh2 could be implemented in the user file
   */
}
 80051e4:	bf00      	nop
 80051e6:	370c      	adds	r7, #12
 80051e8:	46bd      	mov	sp, r7
 80051ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051ee:	4770      	bx	lr

080051f0 <HAL_DACEx_ConvHalfCpltCallbackCh2>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DACEx_ConvHalfCpltCallbackCh2(DAC_HandleTypeDef *hdac)
{
 80051f0:	b480      	push	{r7}
 80051f2:	b083      	sub	sp, #12
 80051f4:	af00      	add	r7, sp, #0
 80051f6:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DACEx_ConvHalfCpltCallbackCh2 could be implemented in the user file
   */
}
 80051f8:	bf00      	nop
 80051fa:	370c      	adds	r7, #12
 80051fc:	46bd      	mov	sp, r7
 80051fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005202:	4770      	bx	lr

08005204 <HAL_DACEx_ErrorCallbackCh2>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DACEx_ErrorCallbackCh2(DAC_HandleTypeDef *hdac)
{
 8005204:	b480      	push	{r7}
 8005206:	b083      	sub	sp, #12
 8005208:	af00      	add	r7, sp, #0
 800520a:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DACEx_ErrorCallbackCh2 could be implemented in the user file
   */
}
 800520c:	bf00      	nop
 800520e:	370c      	adds	r7, #12
 8005210:	46bd      	mov	sp, r7
 8005212:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005216:	4770      	bx	lr

08005218 <DAC_DMAConvCpltCh2>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAConvCpltCh2(DMA_HandleTypeDef *hdma)
{
 8005218:	b580      	push	{r7, lr}
 800521a:	b084      	sub	sp, #16
 800521c:	af00      	add	r7, sp, #0
 800521e:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8005220:	687b      	ldr	r3, [r7, #4]
 8005222:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005224:	60fb      	str	r3, [r7, #12]

#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvCpltCallbackCh2(hdac);
#else
  HAL_DACEx_ConvCpltCallbackCh2(hdac);
 8005226:	68f8      	ldr	r0, [r7, #12]
 8005228:	f7ff ffd8 	bl	80051dc <HAL_DACEx_ConvCpltCallbackCh2>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

  hdac->State = HAL_DAC_STATE_READY;
 800522c:	68fb      	ldr	r3, [r7, #12]
 800522e:	2201      	movs	r2, #1
 8005230:	711a      	strb	r2, [r3, #4]
}
 8005232:	bf00      	nop
 8005234:	3710      	adds	r7, #16
 8005236:	46bd      	mov	sp, r7
 8005238:	bd80      	pop	{r7, pc}

0800523a <DAC_DMAHalfConvCpltCh2>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAHalfConvCpltCh2(DMA_HandleTypeDef *hdma)
{
 800523a:	b580      	push	{r7, lr}
 800523c:	b084      	sub	sp, #16
 800523e:	af00      	add	r7, sp, #0
 8005240:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8005242:	687b      	ldr	r3, [r7, #4]
 8005244:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005246:	60fb      	str	r3, [r7, #12]
  /* Conversion complete callback */
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvHalfCpltCallbackCh2(hdac);
#else
  HAL_DACEx_ConvHalfCpltCallbackCh2(hdac);
 8005248:	68f8      	ldr	r0, [r7, #12]
 800524a:	f7ff ffd1 	bl	80051f0 <HAL_DACEx_ConvHalfCpltCallbackCh2>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
}
 800524e:	bf00      	nop
 8005250:	3710      	adds	r7, #16
 8005252:	46bd      	mov	sp, r7
 8005254:	bd80      	pop	{r7, pc}

08005256 <DAC_DMAErrorCh2>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAErrorCh2(DMA_HandleTypeDef *hdma)
{
 8005256:	b580      	push	{r7, lr}
 8005258:	b084      	sub	sp, #16
 800525a:	af00      	add	r7, sp, #0
 800525c:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800525e:	687b      	ldr	r3, [r7, #4]
 8005260:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005262:	60fb      	str	r3, [r7, #12]

  /* Set DAC error code to DMA error */
  hdac->ErrorCode |= HAL_DAC_ERROR_DMA;
 8005264:	68fb      	ldr	r3, [r7, #12]
 8005266:	691b      	ldr	r3, [r3, #16]
 8005268:	f043 0204 	orr.w	r2, r3, #4
 800526c:	68fb      	ldr	r3, [r7, #12]
 800526e:	611a      	str	r2, [r3, #16]

#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ErrorCallbackCh2(hdac);
#else
  HAL_DACEx_ErrorCallbackCh2(hdac);
 8005270:	68f8      	ldr	r0, [r7, #12]
 8005272:	f7ff ffc7 	bl	8005204 <HAL_DACEx_ErrorCallbackCh2>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

  hdac->State = HAL_DAC_STATE_READY;
 8005276:	68fb      	ldr	r3, [r7, #12]
 8005278:	2201      	movs	r2, #1
 800527a:	711a      	strb	r2, [r3, #4]
}
 800527c:	bf00      	nop
 800527e:	3710      	adds	r7, #16
 8005280:	46bd      	mov	sp, r7
 8005282:	bd80      	pop	{r7, pc}

08005284 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8005284:	b580      	push	{r7, lr}
 8005286:	b084      	sub	sp, #16
 8005288:	af00      	add	r7, sp, #0
 800528a:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if (hdma == NULL)
 800528c:	687b      	ldr	r3, [r7, #4]
 800528e:	2b00      	cmp	r3, #0
 8005290:	d101      	bne.n	8005296 <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 8005292:	2301      	movs	r3, #1
 8005294:	e08d      	b.n	80053b2 <HAL_DMA_Init+0x12e>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 8005296:	687b      	ldr	r3, [r7, #4]
 8005298:	681b      	ldr	r3, [r3, #0]
 800529a:	461a      	mov	r2, r3
 800529c:	4b47      	ldr	r3, [pc, #284]	; (80053bc <HAL_DMA_Init+0x138>)
 800529e:	429a      	cmp	r2, r3
 80052a0:	d80f      	bhi.n	80052c2 <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 80052a2:	687b      	ldr	r3, [r7, #4]
 80052a4:	681b      	ldr	r3, [r3, #0]
 80052a6:	461a      	mov	r2, r3
 80052a8:	4b45      	ldr	r3, [pc, #276]	; (80053c0 <HAL_DMA_Init+0x13c>)
 80052aa:	4413      	add	r3, r2
 80052ac:	4a45      	ldr	r2, [pc, #276]	; (80053c4 <HAL_DMA_Init+0x140>)
 80052ae:	fba2 2303 	umull	r2, r3, r2, r3
 80052b2:	091b      	lsrs	r3, r3, #4
 80052b4:	009a      	lsls	r2, r3, #2
 80052b6:	687b      	ldr	r3, [r7, #4]
 80052b8:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA1;
 80052ba:	687b      	ldr	r3, [r7, #4]
 80052bc:	4a42      	ldr	r2, [pc, #264]	; (80053c8 <HAL_DMA_Init+0x144>)
 80052be:	641a      	str	r2, [r3, #64]	; 0x40
 80052c0:	e00e      	b.n	80052e0 <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
 80052c2:	687b      	ldr	r3, [r7, #4]
 80052c4:	681b      	ldr	r3, [r3, #0]
 80052c6:	461a      	mov	r2, r3
 80052c8:	4b40      	ldr	r3, [pc, #256]	; (80053cc <HAL_DMA_Init+0x148>)
 80052ca:	4413      	add	r3, r2
 80052cc:	4a3d      	ldr	r2, [pc, #244]	; (80053c4 <HAL_DMA_Init+0x140>)
 80052ce:	fba2 2303 	umull	r2, r3, r2, r3
 80052d2:	091b      	lsrs	r3, r3, #4
 80052d4:	009a      	lsls	r2, r3, #2
 80052d6:	687b      	ldr	r3, [r7, #4]
 80052d8:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA2;
 80052da:	687b      	ldr	r3, [r7, #4]
 80052dc:	4a3c      	ldr	r2, [pc, #240]	; (80053d0 <HAL_DMA_Init+0x14c>)
 80052de:	641a      	str	r2, [r3, #64]	; 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80052e0:	687b      	ldr	r3, [r7, #4]
 80052e2:	2202      	movs	r2, #2
 80052e4:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 80052e8:	687b      	ldr	r3, [r7, #4]
 80052ea:	681b      	ldr	r3, [r3, #0]
 80052ec:	681b      	ldr	r3, [r3, #0]
 80052ee:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 80052f0:	68fb      	ldr	r3, [r7, #12]
 80052f2:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 80052f6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80052fa:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 80052fc:	687b      	ldr	r3, [r7, #4]
 80052fe:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8005300:	687b      	ldr	r3, [r7, #4]
 8005302:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 8005304:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8005306:	687b      	ldr	r3, [r7, #4]
 8005308:	691b      	ldr	r3, [r3, #16]
 800530a:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800530c:	687b      	ldr	r3, [r7, #4]
 800530e:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8005310:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8005312:	687b      	ldr	r3, [r7, #4]
 8005314:	699b      	ldr	r3, [r3, #24]
 8005316:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8005318:	687b      	ldr	r3, [r7, #4]
 800531a:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800531c:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800531e:	687b      	ldr	r3, [r7, #4]
 8005320:	6a1b      	ldr	r3, [r3, #32]
 8005322:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8005324:	68fa      	ldr	r2, [r7, #12]
 8005326:	4313      	orrs	r3, r2
 8005328:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 800532a:	687b      	ldr	r3, [r7, #4]
 800532c:	681b      	ldr	r3, [r3, #0]
 800532e:	68fa      	ldr	r2, [r7, #12]
 8005330:	601a      	str	r2, [r3, #0]

  /* Initialize parameters for DMAMUX channel :
     DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
  */
  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 8005332:	6878      	ldr	r0, [r7, #4]
 8005334:	f000 fa10 	bl	8005758 <DMA_CalcDMAMUXChannelBaseAndMask>

  if (hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8005338:	687b      	ldr	r3, [r7, #4]
 800533a:	689b      	ldr	r3, [r3, #8]
 800533c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8005340:	d102      	bne.n	8005348 <HAL_DMA_Init+0xc4>
  {
    /* if memory to memory force the request to 0*/
    hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 8005342:	687b      	ldr	r3, [r7, #4]
 8005344:	2200      	movs	r2, #0
 8005346:	605a      	str	r2, [r3, #4]
  }

  /* Set peripheral request  to DMAMUX channel */
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8005348:	687b      	ldr	r3, [r7, #4]
 800534a:	685a      	ldr	r2, [r3, #4]
 800534c:	687b      	ldr	r3, [r7, #4]
 800534e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005350:	b2d2      	uxtb	r2, r2
 8005352:	601a      	str	r2, [r3, #0]

  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8005354:	687b      	ldr	r3, [r7, #4]
 8005356:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005358:	687a      	ldr	r2, [r7, #4]
 800535a:	6d12      	ldr	r2, [r2, #80]	; 0x50
 800535c:	605a      	str	r2, [r3, #4]

  if (((hdma->Init.Request >  0U) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 800535e:	687b      	ldr	r3, [r7, #4]
 8005360:	685b      	ldr	r3, [r3, #4]
 8005362:	2b00      	cmp	r3, #0
 8005364:	d010      	beq.n	8005388 <HAL_DMA_Init+0x104>
 8005366:	687b      	ldr	r3, [r7, #4]
 8005368:	685b      	ldr	r3, [r3, #4]
 800536a:	2b04      	cmp	r3, #4
 800536c:	d80c      	bhi.n	8005388 <HAL_DMA_Init+0x104>
  {
    /* Initialize parameters for DMAMUX request generator :
       DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask
    */
    DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 800536e:	6878      	ldr	r0, [r7, #4]
 8005370:	f000 fa30 	bl	80057d4 <DMA_CalcDMAMUXRequestGenBaseAndMask>

    /* Reset the DMAMUX request generator register*/
    hdma->DMAmuxRequestGen->RGCR = 0U;
 8005374:	687b      	ldr	r3, [r7, #4]
 8005376:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005378:	2200      	movs	r2, #0
 800537a:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800537c:	687b      	ldr	r3, [r7, #4]
 800537e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005380:	687a      	ldr	r2, [r7, #4]
 8005382:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 8005384:	605a      	str	r2, [r3, #4]
 8005386:	e008      	b.n	800539a <HAL_DMA_Init+0x116>
  }
  else
  {
    hdma->DMAmuxRequestGen = 0U;
 8005388:	687b      	ldr	r3, [r7, #4]
 800538a:	2200      	movs	r2, #0
 800538c:	655a      	str	r2, [r3, #84]	; 0x54
    hdma->DMAmuxRequestGenStatus = 0U;
 800538e:	687b      	ldr	r3, [r7, #4]
 8005390:	2200      	movs	r2, #0
 8005392:	659a      	str	r2, [r3, #88]	; 0x58
    hdma->DMAmuxRequestGenStatusMask = 0U;
 8005394:	687b      	ldr	r3, [r7, #4]
 8005396:	2200      	movs	r2, #0
 8005398:	65da      	str	r2, [r3, #92]	; 0x5c
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800539a:	687b      	ldr	r3, [r7, #4]
 800539c:	2200      	movs	r2, #0
 800539e:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA state*/
  hdma->State  = HAL_DMA_STATE_READY;
 80053a0:	687b      	ldr	r3, [r7, #4]
 80053a2:	2201      	movs	r2, #1
 80053a4:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 80053a8:	687b      	ldr	r3, [r7, #4]
 80053aa:	2200      	movs	r2, #0
 80053ac:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  return HAL_OK;
 80053b0:	2300      	movs	r3, #0
}
 80053b2:	4618      	mov	r0, r3
 80053b4:	3710      	adds	r7, #16
 80053b6:	46bd      	mov	sp, r7
 80053b8:	bd80      	pop	{r7, pc}
 80053ba:	bf00      	nop
 80053bc:	40020407 	.word	0x40020407
 80053c0:	bffdfff8 	.word	0xbffdfff8
 80053c4:	cccccccd 	.word	0xcccccccd
 80053c8:	40020000 	.word	0x40020000
 80053cc:	bffdfbf8 	.word	0xbffdfbf8
 80053d0:	40020400 	.word	0x40020400

080053d4 <HAL_DMA_Start_IT>:
  * @param  DataLength The length of data to be transferred from source to destination (up to 256Kbytes-1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress,
                                   uint32_t DataLength)
{
 80053d4:	b580      	push	{r7, lr}
 80053d6:	b086      	sub	sp, #24
 80053d8:	af00      	add	r7, sp, #0
 80053da:	60f8      	str	r0, [r7, #12]
 80053dc:	60b9      	str	r1, [r7, #8]
 80053de:	607a      	str	r2, [r7, #4]
 80053e0:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80053e2:	2300      	movs	r3, #0
 80053e4:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 80053e6:	68fb      	ldr	r3, [r7, #12]
 80053e8:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80053ec:	2b01      	cmp	r3, #1
 80053ee:	d101      	bne.n	80053f4 <HAL_DMA_Start_IT+0x20>
 80053f0:	2302      	movs	r3, #2
 80053f2:	e066      	b.n	80054c2 <HAL_DMA_Start_IT+0xee>
 80053f4:	68fb      	ldr	r3, [r7, #12]
 80053f6:	2201      	movs	r2, #1
 80053f8:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  if (HAL_DMA_STATE_READY == hdma->State)
 80053fc:	68fb      	ldr	r3, [r7, #12]
 80053fe:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8005402:	b2db      	uxtb	r3, r3
 8005404:	2b01      	cmp	r3, #1
 8005406:	d155      	bne.n	80054b4 <HAL_DMA_Start_IT+0xe0>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8005408:	68fb      	ldr	r3, [r7, #12]
 800540a:	2202      	movs	r2, #2
 800540c:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8005410:	68fb      	ldr	r3, [r7, #12]
 8005412:	2200      	movs	r2, #0
 8005414:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8005416:	68fb      	ldr	r3, [r7, #12]
 8005418:	681b      	ldr	r3, [r3, #0]
 800541a:	681a      	ldr	r2, [r3, #0]
 800541c:	68fb      	ldr	r3, [r7, #12]
 800541e:	681b      	ldr	r3, [r3, #0]
 8005420:	f022 0201 	bic.w	r2, r2, #1
 8005424:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8005426:	683b      	ldr	r3, [r7, #0]
 8005428:	687a      	ldr	r2, [r7, #4]
 800542a:	68b9      	ldr	r1, [r7, #8]
 800542c:	68f8      	ldr	r0, [r7, #12]
 800542e:	f000 f954 	bl	80056da <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if (NULL != hdma->XferHalfCpltCallback)
 8005432:	68fb      	ldr	r3, [r7, #12]
 8005434:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005436:	2b00      	cmp	r3, #0
 8005438:	d008      	beq.n	800544c <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800543a:	68fb      	ldr	r3, [r7, #12]
 800543c:	681b      	ldr	r3, [r3, #0]
 800543e:	681a      	ldr	r2, [r3, #0]
 8005440:	68fb      	ldr	r3, [r7, #12]
 8005442:	681b      	ldr	r3, [r3, #0]
 8005444:	f042 020e 	orr.w	r2, r2, #14
 8005448:	601a      	str	r2, [r3, #0]
 800544a:	e00f      	b.n	800546c <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 800544c:	68fb      	ldr	r3, [r7, #12]
 800544e:	681b      	ldr	r3, [r3, #0]
 8005450:	681a      	ldr	r2, [r3, #0]
 8005452:	68fb      	ldr	r3, [r7, #12]
 8005454:	681b      	ldr	r3, [r3, #0]
 8005456:	f022 0204 	bic.w	r2, r2, #4
 800545a:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 800545c:	68fb      	ldr	r3, [r7, #12]
 800545e:	681b      	ldr	r3, [r3, #0]
 8005460:	681a      	ldr	r2, [r3, #0]
 8005462:	68fb      	ldr	r3, [r7, #12]
 8005464:	681b      	ldr	r3, [r3, #0]
 8005466:	f042 020a 	orr.w	r2, r2, #10
 800546a:	601a      	str	r2, [r3, #0]
    }

    /* Check if DMAMUX Synchronization is enabled*/
    if ((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 800546c:	68fb      	ldr	r3, [r7, #12]
 800546e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005470:	681b      	ldr	r3, [r3, #0]
 8005472:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005476:	2b00      	cmp	r3, #0
 8005478:	d007      	beq.n	800548a <HAL_DMA_Start_IT+0xb6>
    {
      /* Enable DMAMUX sync overrun IT*/
      hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 800547a:	68fb      	ldr	r3, [r7, #12]
 800547c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800547e:	681a      	ldr	r2, [r3, #0]
 8005480:	68fb      	ldr	r3, [r7, #12]
 8005482:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005484:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8005488:	601a      	str	r2, [r3, #0]
    }

    if (hdma->DMAmuxRequestGen != 0U)
 800548a:	68fb      	ldr	r3, [r7, #12]
 800548c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800548e:	2b00      	cmp	r3, #0
 8005490:	d007      	beq.n	80054a2 <HAL_DMA_Start_IT+0xce>
    {
      /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
      /* enable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 8005492:	68fb      	ldr	r3, [r7, #12]
 8005494:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005496:	681a      	ldr	r2, [r3, #0]
 8005498:	68fb      	ldr	r3, [r7, #12]
 800549a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800549c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80054a0:	601a      	str	r2, [r3, #0]
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 80054a2:	68fb      	ldr	r3, [r7, #12]
 80054a4:	681b      	ldr	r3, [r3, #0]
 80054a6:	681a      	ldr	r2, [r3, #0]
 80054a8:	68fb      	ldr	r3, [r7, #12]
 80054aa:	681b      	ldr	r3, [r3, #0]
 80054ac:	f042 0201 	orr.w	r2, r2, #1
 80054b0:	601a      	str	r2, [r3, #0]
 80054b2:	e005      	b.n	80054c0 <HAL_DMA_Start_IT+0xec>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80054b4:	68fb      	ldr	r3, [r7, #12]
 80054b6:	2200      	movs	r2, #0
 80054b8:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Remain BUSY */
    status = HAL_BUSY;
 80054bc:	2302      	movs	r3, #2
 80054be:	75fb      	strb	r3, [r7, #23]
  }
  return status;
 80054c0:	7dfb      	ldrb	r3, [r7, #23]
}
 80054c2:	4618      	mov	r0, r3
 80054c4:	3718      	adds	r7, #24
 80054c6:	46bd      	mov	sp, r7
 80054c8:	bd80      	pop	{r7, pc}

080054ca <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80054ca:	b480      	push	{r7}
 80054cc:	b085      	sub	sp, #20
 80054ce:	af00      	add	r7, sp, #0
 80054d0:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80054d2:	2300      	movs	r3, #0
 80054d4:	73fb      	strb	r3, [r7, #15]

  if(hdma->State != HAL_DMA_STATE_BUSY)
 80054d6:	687b      	ldr	r3, [r7, #4]
 80054d8:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 80054dc:	b2db      	uxtb	r3, r3
 80054de:	2b02      	cmp	r3, #2
 80054e0:	d005      	beq.n	80054ee <HAL_DMA_Abort+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80054e2:	687b      	ldr	r3, [r7, #4]
 80054e4:	2204      	movs	r2, #4
 80054e6:	63da      	str	r2, [r3, #60]	; 0x3c

    status = HAL_ERROR;
 80054e8:	2301      	movs	r3, #1
 80054ea:	73fb      	strb	r3, [r7, #15]
 80054ec:	e037      	b.n	800555e <HAL_DMA_Abort+0x94>
  }
  else
  {
     /* Disable DMA IT */
     __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80054ee:	687b      	ldr	r3, [r7, #4]
 80054f0:	681b      	ldr	r3, [r3, #0]
 80054f2:	681a      	ldr	r2, [r3, #0]
 80054f4:	687b      	ldr	r3, [r7, #4]
 80054f6:	681b      	ldr	r3, [r3, #0]
 80054f8:	f022 020e 	bic.w	r2, r2, #14
 80054fc:	601a      	str	r2, [r3, #0]
     
     /* disable the DMAMUX sync overrun IT*/
     hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 80054fe:	687b      	ldr	r3, [r7, #4]
 8005500:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005502:	681a      	ldr	r2, [r3, #0]
 8005504:	687b      	ldr	r3, [r7, #4]
 8005506:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005508:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800550c:	601a      	str	r2, [r3, #0]
     
     /* Disable the channel */
     __HAL_DMA_DISABLE(hdma);
 800550e:	687b      	ldr	r3, [r7, #4]
 8005510:	681b      	ldr	r3, [r3, #0]
 8005512:	681a      	ldr	r2, [r3, #0]
 8005514:	687b      	ldr	r3, [r7, #4]
 8005516:	681b      	ldr	r3, [r3, #0]
 8005518:	f022 0201 	bic.w	r2, r2, #1
 800551c:	601a      	str	r2, [r3, #0]
     
     /* Clear all flags */
     hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 800551e:	687b      	ldr	r3, [r7, #4]
 8005520:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005522:	f003 021f 	and.w	r2, r3, #31
 8005526:	687b      	ldr	r3, [r7, #4]
 8005528:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800552a:	2101      	movs	r1, #1
 800552c:	fa01 f202 	lsl.w	r2, r1, r2
 8005530:	605a      	str	r2, [r3, #4]
     
     /* Clear the DMAMUX synchro overrun flag */
     hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8005532:	687b      	ldr	r3, [r7, #4]
 8005534:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005536:	687a      	ldr	r2, [r7, #4]
 8005538:	6d12      	ldr	r2, [r2, #80]	; 0x50
 800553a:	605a      	str	r2, [r3, #4]
     
     if (hdma->DMAmuxRequestGen != 0U)
 800553c:	687b      	ldr	r3, [r7, #4]
 800553e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005540:	2b00      	cmp	r3, #0
 8005542:	d00c      	beq.n	800555e <HAL_DMA_Abort+0x94>
     {
       /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
       /* disable the request gen overrun IT*/
       hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8005544:	687b      	ldr	r3, [r7, #4]
 8005546:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005548:	681a      	ldr	r2, [r3, #0]
 800554a:	687b      	ldr	r3, [r7, #4]
 800554c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800554e:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8005552:	601a      	str	r2, [r3, #0]
     
       /* Clear the DMAMUX request generator overrun flag */
       hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8005554:	687b      	ldr	r3, [r7, #4]
 8005556:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005558:	687a      	ldr	r2, [r7, #4]
 800555a:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 800555c:	605a      	str	r2, [r3, #4]
     }
  }  
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 800555e:	687b      	ldr	r3, [r7, #4]
 8005560:	2201      	movs	r2, #1
 8005562:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);
 8005566:	687b      	ldr	r3, [r7, #4]
 8005568:	2200      	movs	r2, #0
 800556a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  return status;
 800556e:	7bfb      	ldrb	r3, [r7, #15]
}
 8005570:	4618      	mov	r0, r3
 8005572:	3714      	adds	r7, #20
 8005574:	46bd      	mov	sp, r7
 8005576:	f85d 7b04 	ldr.w	r7, [sp], #4
 800557a:	4770      	bx	lr

0800557c <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 800557c:	b580      	push	{r7, lr}
 800557e:	b084      	sub	sp, #16
 8005580:	af00      	add	r7, sp, #0
 8005582:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8005584:	687b      	ldr	r3, [r7, #4]
 8005586:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005588:	681b      	ldr	r3, [r3, #0]
 800558a:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 800558c:	687b      	ldr	r3, [r7, #4]
 800558e:	681b      	ldr	r3, [r3, #0]
 8005590:	681b      	ldr	r3, [r3, #0]
 8005592:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if ((0U != (flag_it & ((uint32_t)DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1FU)))) && (0U != (source_it & DMA_IT_HT)))
 8005594:	687b      	ldr	r3, [r7, #4]
 8005596:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005598:	f003 031f 	and.w	r3, r3, #31
 800559c:	2204      	movs	r2, #4
 800559e:	409a      	lsls	r2, r3
 80055a0:	68fb      	ldr	r3, [r7, #12]
 80055a2:	4013      	ands	r3, r2
 80055a4:	2b00      	cmp	r3, #0
 80055a6:	d026      	beq.n	80055f6 <HAL_DMA_IRQHandler+0x7a>
 80055a8:	68bb      	ldr	r3, [r7, #8]
 80055aa:	f003 0304 	and.w	r3, r3, #4
 80055ae:	2b00      	cmp	r3, #0
 80055b0:	d021      	beq.n	80055f6 <HAL_DMA_IRQHandler+0x7a>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80055b2:	687b      	ldr	r3, [r7, #4]
 80055b4:	681b      	ldr	r3, [r3, #0]
 80055b6:	681b      	ldr	r3, [r3, #0]
 80055b8:	f003 0320 	and.w	r3, r3, #32
 80055bc:	2b00      	cmp	r3, #0
 80055be:	d107      	bne.n	80055d0 <HAL_DMA_IRQHandler+0x54>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80055c0:	687b      	ldr	r3, [r7, #4]
 80055c2:	681b      	ldr	r3, [r3, #0]
 80055c4:	681a      	ldr	r2, [r3, #0]
 80055c6:	687b      	ldr	r3, [r7, #4]
 80055c8:	681b      	ldr	r3, [r3, #0]
 80055ca:	f022 0204 	bic.w	r2, r2, #4
 80055ce:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1FU));
 80055d0:	687b      	ldr	r3, [r7, #4]
 80055d2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80055d4:	f003 021f 	and.w	r2, r3, #31
 80055d8:	687b      	ldr	r3, [r7, #4]
 80055da:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80055dc:	2104      	movs	r1, #4
 80055de:	fa01 f202 	lsl.w	r2, r1, r2
 80055e2:	605a      	str	r2, [r3, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if (hdma->XferHalfCpltCallback != NULL)
 80055e4:	687b      	ldr	r3, [r7, #4]
 80055e6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80055e8:	2b00      	cmp	r3, #0
 80055ea:	d071      	beq.n	80056d0 <HAL_DMA_IRQHandler+0x154>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 80055ec:	687b      	ldr	r3, [r7, #4]
 80055ee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80055f0:	6878      	ldr	r0, [r7, #4]
 80055f2:	4798      	blx	r3
    if (hdma->XferHalfCpltCallback != NULL)
 80055f4:	e06c      	b.n	80056d0 <HAL_DMA_IRQHandler+0x154>
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  else if ((0U != (flag_it & ((uint32_t)DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1FU))))
 80055f6:	687b      	ldr	r3, [r7, #4]
 80055f8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80055fa:	f003 031f 	and.w	r3, r3, #31
 80055fe:	2202      	movs	r2, #2
 8005600:	409a      	lsls	r2, r3
 8005602:	68fb      	ldr	r3, [r7, #12]
 8005604:	4013      	ands	r3, r2
 8005606:	2b00      	cmp	r3, #0
 8005608:	d02e      	beq.n	8005668 <HAL_DMA_IRQHandler+0xec>
           && (0U != (source_it & DMA_IT_TC)))
 800560a:	68bb      	ldr	r3, [r7, #8]
 800560c:	f003 0302 	and.w	r3, r3, #2
 8005610:	2b00      	cmp	r3, #0
 8005612:	d029      	beq.n	8005668 <HAL_DMA_IRQHandler+0xec>
  {
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8005614:	687b      	ldr	r3, [r7, #4]
 8005616:	681b      	ldr	r3, [r3, #0]
 8005618:	681b      	ldr	r3, [r3, #0]
 800561a:	f003 0320 	and.w	r3, r3, #32
 800561e:	2b00      	cmp	r3, #0
 8005620:	d10b      	bne.n	800563a <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8005622:	687b      	ldr	r3, [r7, #4]
 8005624:	681b      	ldr	r3, [r3, #0]
 8005626:	681a      	ldr	r2, [r3, #0]
 8005628:	687b      	ldr	r3, [r7, #4]
 800562a:	681b      	ldr	r3, [r3, #0]
 800562c:	f022 020a 	bic.w	r2, r2, #10
 8005630:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8005632:	687b      	ldr	r3, [r7, #4]
 8005634:	2201      	movs	r2, #1
 8005636:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1FU));
 800563a:	687b      	ldr	r3, [r7, #4]
 800563c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800563e:	f003 021f 	and.w	r2, r3, #31
 8005642:	687b      	ldr	r3, [r7, #4]
 8005644:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005646:	2102      	movs	r1, #2
 8005648:	fa01 f202 	lsl.w	r2, r1, r2
 800564c:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800564e:	687b      	ldr	r3, [r7, #4]
 8005650:	2200      	movs	r2, #0
 8005652:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferCpltCallback != NULL)
 8005656:	687b      	ldr	r3, [r7, #4]
 8005658:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800565a:	2b00      	cmp	r3, #0
 800565c:	d038      	beq.n	80056d0 <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 800565e:	687b      	ldr	r3, [r7, #4]
 8005660:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005662:	6878      	ldr	r0, [r7, #4]
 8005664:	4798      	blx	r3
    if (hdma->XferCpltCallback != NULL)
 8005666:	e033      	b.n	80056d0 <HAL_DMA_IRQHandler+0x154>
    }
  }
  /* Transfer Error Interrupt management **************************************/
  else if ((0U != (flag_it & ((uint32_t)DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1FU))))
 8005668:	687b      	ldr	r3, [r7, #4]
 800566a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800566c:	f003 031f 	and.w	r3, r3, #31
 8005670:	2208      	movs	r2, #8
 8005672:	409a      	lsls	r2, r3
 8005674:	68fb      	ldr	r3, [r7, #12]
 8005676:	4013      	ands	r3, r2
 8005678:	2b00      	cmp	r3, #0
 800567a:	d02a      	beq.n	80056d2 <HAL_DMA_IRQHandler+0x156>
           && (0U != (source_it & DMA_IT_TE)))
 800567c:	68bb      	ldr	r3, [r7, #8]
 800567e:	f003 0308 	and.w	r3, r3, #8
 8005682:	2b00      	cmp	r3, #0
 8005684:	d025      	beq.n	80056d2 <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8005686:	687b      	ldr	r3, [r7, #4]
 8005688:	681b      	ldr	r3, [r3, #0]
 800568a:	681a      	ldr	r2, [r3, #0]
 800568c:	687b      	ldr	r3, [r7, #4]
 800568e:	681b      	ldr	r3, [r3, #0]
 8005690:	f022 020e 	bic.w	r2, r2, #14
 8005694:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 8005696:	687b      	ldr	r3, [r7, #4]
 8005698:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800569a:	f003 021f 	and.w	r2, r3, #31
 800569e:	687b      	ldr	r3, [r7, #4]
 80056a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80056a2:	2101      	movs	r1, #1
 80056a4:	fa01 f202 	lsl.w	r2, r1, r2
 80056a8:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 80056aa:	687b      	ldr	r3, [r7, #4]
 80056ac:	2201      	movs	r2, #1
 80056ae:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80056b0:	687b      	ldr	r3, [r7, #4]
 80056b2:	2201      	movs	r2, #1
 80056b4:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80056b8:	687b      	ldr	r3, [r7, #4]
 80056ba:	2200      	movs	r2, #0
 80056bc:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferErrorCallback != NULL)
 80056c0:	687b      	ldr	r3, [r7, #4]
 80056c2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80056c4:	2b00      	cmp	r3, #0
 80056c6:	d004      	beq.n	80056d2 <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 80056c8:	687b      	ldr	r3, [r7, #4]
 80056ca:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80056cc:	6878      	ldr	r0, [r7, #4]
 80056ce:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 80056d0:	bf00      	nop
 80056d2:	bf00      	nop
}
 80056d4:	3710      	adds	r7, #16
 80056d6:	46bd      	mov	sp, r7
 80056d8:	bd80      	pop	{r7, pc}

080056da <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80056da:	b480      	push	{r7}
 80056dc:	b085      	sub	sp, #20
 80056de:	af00      	add	r7, sp, #0
 80056e0:	60f8      	str	r0, [r7, #12]
 80056e2:	60b9      	str	r1, [r7, #8]
 80056e4:	607a      	str	r2, [r7, #4]
 80056e6:	603b      	str	r3, [r7, #0]
  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80056e8:	68fb      	ldr	r3, [r7, #12]
 80056ea:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80056ec:	68fa      	ldr	r2, [r7, #12]
 80056ee:	6d12      	ldr	r2, [r2, #80]	; 0x50
 80056f0:	605a      	str	r2, [r3, #4]

  if (hdma->DMAmuxRequestGen != 0U)
 80056f2:	68fb      	ldr	r3, [r7, #12]
 80056f4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80056f6:	2b00      	cmp	r3, #0
 80056f8:	d004      	beq.n	8005704 <DMA_SetConfig+0x2a>
  {
    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80056fa:	68fb      	ldr	r3, [r7, #12]
 80056fc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80056fe:	68fa      	ldr	r2, [r7, #12]
 8005700:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 8005702:	605a      	str	r2, [r3, #4]
  }

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 8005704:	68fb      	ldr	r3, [r7, #12]
 8005706:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005708:	f003 021f 	and.w	r2, r3, #31
 800570c:	68fb      	ldr	r3, [r7, #12]
 800570e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005710:	2101      	movs	r1, #1
 8005712:	fa01 f202 	lsl.w	r2, r1, r2
 8005716:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8005718:	68fb      	ldr	r3, [r7, #12]
 800571a:	681b      	ldr	r3, [r3, #0]
 800571c:	683a      	ldr	r2, [r7, #0]
 800571e:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if ((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8005720:	68fb      	ldr	r3, [r7, #12]
 8005722:	689b      	ldr	r3, [r3, #8]
 8005724:	2b10      	cmp	r3, #16
 8005726:	d108      	bne.n	800573a <DMA_SetConfig+0x60>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8005728:	68fb      	ldr	r3, [r7, #12]
 800572a:	681b      	ldr	r3, [r3, #0]
 800572c:	687a      	ldr	r2, [r7, #4]
 800572e:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8005730:	68fb      	ldr	r3, [r7, #12]
 8005732:	681b      	ldr	r3, [r3, #0]
 8005734:	68ba      	ldr	r2, [r7, #8]
 8005736:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8005738:	e007      	b.n	800574a <DMA_SetConfig+0x70>
    hdma->Instance->CPAR = SrcAddress;
 800573a:	68fb      	ldr	r3, [r7, #12]
 800573c:	681b      	ldr	r3, [r3, #0]
 800573e:	68ba      	ldr	r2, [r7, #8]
 8005740:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8005742:	68fb      	ldr	r3, [r7, #12]
 8005744:	681b      	ldr	r3, [r3, #0]
 8005746:	687a      	ldr	r2, [r7, #4]
 8005748:	60da      	str	r2, [r3, #12]
}
 800574a:	bf00      	nop
 800574c:	3714      	adds	r7, #20
 800574e:	46bd      	mov	sp, r7
 8005750:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005754:	4770      	bx	lr
	...

08005758 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma        pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval None
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8005758:	b480      	push	{r7}
 800575a:	b087      	sub	sp, #28
 800575c:	af00      	add	r7, sp, #0
 800575e:	6078      	str	r0, [r7, #4]
  uint32_t dmamux_base_addr;
  uint32_t channel_number;
  DMAMUX_Channel_TypeDef *DMAMUX1_ChannelBase;

  /* check if instance is not outside the DMA channel range */
  if ((uint32_t)hdma->Instance < (uint32_t)DMA2_Channel1)
 8005760:	687b      	ldr	r3, [r7, #4]
 8005762:	681b      	ldr	r3, [r3, #0]
 8005764:	461a      	mov	r2, r3
 8005766:	4b16      	ldr	r3, [pc, #88]	; (80057c0 <DMA_CalcDMAMUXChannelBaseAndMask+0x68>)
 8005768:	429a      	cmp	r2, r3
 800576a:	d802      	bhi.n	8005772 <DMA_CalcDMAMUXChannelBaseAndMask+0x1a>
  {
    /* DMA1 */
    DMAMUX1_ChannelBase = DMAMUX1_Channel0;
 800576c:	4b15      	ldr	r3, [pc, #84]	; (80057c4 <DMA_CalcDMAMUXChannelBaseAndMask+0x6c>)
 800576e:	617b      	str	r3, [r7, #20]
 8005770:	e001      	b.n	8005776 <DMA_CalcDMAMUXChannelBaseAndMask+0x1e>
  }
  else
  {
    /* DMA2 */
#if defined (STM32G471xx) || defined (STM32G473xx) || defined (STM32G474xx) || defined (STM32G483xx) || defined (STM32G484xx)
    DMAMUX1_ChannelBase = DMAMUX1_Channel8;
 8005772:	4b15      	ldr	r3, [pc, #84]	; (80057c8 <DMA_CalcDMAMUXChannelBaseAndMask+0x70>)
 8005774:	617b      	str	r3, [r7, #20]
    DMAMUX1_ChannelBase = DMAMUX1_Channel6;
#else
    DMAMUX1_ChannelBase = DMAMUX1_Channel7;
#endif /* STM32G4x1xx) */
  }
  dmamux_base_addr = (uint32_t)DMAMUX1_ChannelBase;
 8005776:	697b      	ldr	r3, [r7, #20]
 8005778:	613b      	str	r3, [r7, #16]
  channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 800577a:	687b      	ldr	r3, [r7, #4]
 800577c:	681b      	ldr	r3, [r3, #0]
 800577e:	b2db      	uxtb	r3, r3
 8005780:	3b08      	subs	r3, #8
 8005782:	4a12      	ldr	r2, [pc, #72]	; (80057cc <DMA_CalcDMAMUXChannelBaseAndMask+0x74>)
 8005784:	fba2 2303 	umull	r2, r3, r2, r3
 8005788:	091b      	lsrs	r3, r3, #4
 800578a:	60fb      	str	r3, [r7, #12]
  hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)(uint32_t)(dmamux_base_addr + ((hdma->ChannelIndex >> 2U) * ((uint32_t)DMAMUX1_Channel1 - (uint32_t)DMAMUX1_Channel0)));
 800578c:	687b      	ldr	r3, [r7, #4]
 800578e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005790:	089b      	lsrs	r3, r3, #2
 8005792:	009a      	lsls	r2, r3, #2
 8005794:	693b      	ldr	r3, [r7, #16]
 8005796:	4413      	add	r3, r2
 8005798:	461a      	mov	r2, r3
 800579a:	687b      	ldr	r3, [r7, #4]
 800579c:	649a      	str	r2, [r3, #72]	; 0x48
  hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 800579e:	687b      	ldr	r3, [r7, #4]
 80057a0:	4a0b      	ldr	r2, [pc, #44]	; (80057d0 <DMA_CalcDMAMUXChannelBaseAndMask+0x78>)
 80057a2:	64da      	str	r2, [r3, #76]	; 0x4c
  hdma->DMAmuxChannelStatusMask = 1UL << (channel_number & 0x1FU);
 80057a4:	68fb      	ldr	r3, [r7, #12]
 80057a6:	f003 031f 	and.w	r3, r3, #31
 80057aa:	2201      	movs	r2, #1
 80057ac:	409a      	lsls	r2, r3
 80057ae:	687b      	ldr	r3, [r7, #4]
 80057b0:	651a      	str	r2, [r3, #80]	; 0x50
}
 80057b2:	bf00      	nop
 80057b4:	371c      	adds	r7, #28
 80057b6:	46bd      	mov	sp, r7
 80057b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057bc:	4770      	bx	lr
 80057be:	bf00      	nop
 80057c0:	40020407 	.word	0x40020407
 80057c4:	40020800 	.word	0x40020800
 80057c8:	40020820 	.word	0x40020820
 80057cc:	cccccccd 	.word	0xcccccccd
 80057d0:	40020880 	.word	0x40020880

080057d4 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  *                     the configuration information for the specified DMA Channel.
  * @retval None
  */

static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 80057d4:	b480      	push	{r7}
 80057d6:	b085      	sub	sp, #20
 80057d8:	af00      	add	r7, sp, #0
 80057da:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 80057dc:	687b      	ldr	r3, [r7, #4]
 80057de:	685b      	ldr	r3, [r3, #4]
 80057e0:	b2db      	uxtb	r3, r3
 80057e2:	60fb      	str	r3, [r7, #12]

  /* DMA Channels are connected to DMAMUX1 request generator blocks*/
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 80057e4:	68fa      	ldr	r2, [r7, #12]
 80057e6:	4b0b      	ldr	r3, [pc, #44]	; (8005814 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x40>)
 80057e8:	4413      	add	r3, r2
 80057ea:	009b      	lsls	r3, r3, #2
 80057ec:	461a      	mov	r2, r3
 80057ee:	687b      	ldr	r3, [r7, #4]
 80057f0:	655a      	str	r2, [r3, #84]	; 0x54

  hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 80057f2:	687b      	ldr	r3, [r7, #4]
 80057f4:	4a08      	ldr	r2, [pc, #32]	; (8005818 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x44>)
 80057f6:	659a      	str	r2, [r3, #88]	; 0x58

  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x1FU);
 80057f8:	68fb      	ldr	r3, [r7, #12]
 80057fa:	3b01      	subs	r3, #1
 80057fc:	f003 031f 	and.w	r3, r3, #31
 8005800:	2201      	movs	r2, #1
 8005802:	409a      	lsls	r2, r3
 8005804:	687b      	ldr	r3, [r7, #4]
 8005806:	65da      	str	r2, [r3, #92]	; 0x5c
}
 8005808:	bf00      	nop
 800580a:	3714      	adds	r7, #20
 800580c:	46bd      	mov	sp, r7
 800580e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005812:	4770      	bx	lr
 8005814:	1000823f 	.word	0x1000823f
 8005818:	40020940 	.word	0x40020940

0800581c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800581c:	b480      	push	{r7}
 800581e:	b087      	sub	sp, #28
 8005820:	af00      	add	r7, sp, #0
 8005822:	6078      	str	r0, [r7, #4]
 8005824:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8005826:	2300      	movs	r3, #0
 8005828:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 800582a:	e15a      	b.n	8005ae2 <HAL_GPIO_Init+0x2c6>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 800582c:	683b      	ldr	r3, [r7, #0]
 800582e:	681a      	ldr	r2, [r3, #0]
 8005830:	2101      	movs	r1, #1
 8005832:	697b      	ldr	r3, [r7, #20]
 8005834:	fa01 f303 	lsl.w	r3, r1, r3
 8005838:	4013      	ands	r3, r2
 800583a:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 800583c:	68fb      	ldr	r3, [r7, #12]
 800583e:	2b00      	cmp	r3, #0
 8005840:	f000 814c 	beq.w	8005adc <HAL_GPIO_Init+0x2c0>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8005844:	683b      	ldr	r3, [r7, #0]
 8005846:	685b      	ldr	r3, [r3, #4]
 8005848:	2b01      	cmp	r3, #1
 800584a:	d00b      	beq.n	8005864 <HAL_GPIO_Init+0x48>
 800584c:	683b      	ldr	r3, [r7, #0]
 800584e:	685b      	ldr	r3, [r3, #4]
 8005850:	2b02      	cmp	r3, #2
 8005852:	d007      	beq.n	8005864 <HAL_GPIO_Init+0x48>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8005854:	683b      	ldr	r3, [r7, #0]
 8005856:	685b      	ldr	r3, [r3, #4]
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8005858:	2b11      	cmp	r3, #17
 800585a:	d003      	beq.n	8005864 <HAL_GPIO_Init+0x48>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800585c:	683b      	ldr	r3, [r7, #0]
 800585e:	685b      	ldr	r3, [r3, #4]
 8005860:	2b12      	cmp	r3, #18
 8005862:	d130      	bne.n	80058c6 <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8005864:	687b      	ldr	r3, [r7, #4]
 8005866:	689b      	ldr	r3, [r3, #8]
 8005868:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 800586a:	697b      	ldr	r3, [r7, #20]
 800586c:	005b      	lsls	r3, r3, #1
 800586e:	2203      	movs	r2, #3
 8005870:	fa02 f303 	lsl.w	r3, r2, r3
 8005874:	43db      	mvns	r3, r3
 8005876:	693a      	ldr	r2, [r7, #16]
 8005878:	4013      	ands	r3, r2
 800587a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800587c:	683b      	ldr	r3, [r7, #0]
 800587e:	68da      	ldr	r2, [r3, #12]
 8005880:	697b      	ldr	r3, [r7, #20]
 8005882:	005b      	lsls	r3, r3, #1
 8005884:	fa02 f303 	lsl.w	r3, r2, r3
 8005888:	693a      	ldr	r2, [r7, #16]
 800588a:	4313      	orrs	r3, r2
 800588c:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800588e:	687b      	ldr	r3, [r7, #4]
 8005890:	693a      	ldr	r2, [r7, #16]
 8005892:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8005894:	687b      	ldr	r3, [r7, #4]
 8005896:	685b      	ldr	r3, [r3, #4]
 8005898:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800589a:	2201      	movs	r2, #1
 800589c:	697b      	ldr	r3, [r7, #20]
 800589e:	fa02 f303 	lsl.w	r3, r2, r3
 80058a2:	43db      	mvns	r3, r3
 80058a4:	693a      	ldr	r2, [r7, #16]
 80058a6:	4013      	ands	r3, r2
 80058a8:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 80058aa:	683b      	ldr	r3, [r7, #0]
 80058ac:	685b      	ldr	r3, [r3, #4]
 80058ae:	091b      	lsrs	r3, r3, #4
 80058b0:	f003 0201 	and.w	r2, r3, #1
 80058b4:	697b      	ldr	r3, [r7, #20]
 80058b6:	fa02 f303 	lsl.w	r3, r2, r3
 80058ba:	693a      	ldr	r2, [r7, #16]
 80058bc:	4313      	orrs	r3, r2
 80058be:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80058c0:	687b      	ldr	r3, [r7, #4]
 80058c2:	693a      	ldr	r2, [r7, #16]
 80058c4:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 80058c6:	687b      	ldr	r3, [r7, #4]
 80058c8:	68db      	ldr	r3, [r3, #12]
 80058ca:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80058cc:	697b      	ldr	r3, [r7, #20]
 80058ce:	005b      	lsls	r3, r3, #1
 80058d0:	2203      	movs	r2, #3
 80058d2:	fa02 f303 	lsl.w	r3, r2, r3
 80058d6:	43db      	mvns	r3, r3
 80058d8:	693a      	ldr	r2, [r7, #16]
 80058da:	4013      	ands	r3, r2
 80058dc:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 80058de:	683b      	ldr	r3, [r7, #0]
 80058e0:	689a      	ldr	r2, [r3, #8]
 80058e2:	697b      	ldr	r3, [r7, #20]
 80058e4:	005b      	lsls	r3, r3, #1
 80058e6:	fa02 f303 	lsl.w	r3, r2, r3
 80058ea:	693a      	ldr	r2, [r7, #16]
 80058ec:	4313      	orrs	r3, r2
 80058ee:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 80058f0:	687b      	ldr	r3, [r7, #4]
 80058f2:	693a      	ldr	r2, [r7, #16]
 80058f4:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80058f6:	683b      	ldr	r3, [r7, #0]
 80058f8:	685b      	ldr	r3, [r3, #4]
 80058fa:	2b02      	cmp	r3, #2
 80058fc:	d003      	beq.n	8005906 <HAL_GPIO_Init+0xea>
 80058fe:	683b      	ldr	r3, [r7, #0]
 8005900:	685b      	ldr	r3, [r3, #4]
 8005902:	2b12      	cmp	r3, #18
 8005904:	d123      	bne.n	800594e <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8005906:	697b      	ldr	r3, [r7, #20]
 8005908:	08da      	lsrs	r2, r3, #3
 800590a:	687b      	ldr	r3, [r7, #4]
 800590c:	3208      	adds	r2, #8
 800590e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005912:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8005914:	697b      	ldr	r3, [r7, #20]
 8005916:	f003 0307 	and.w	r3, r3, #7
 800591a:	009b      	lsls	r3, r3, #2
 800591c:	220f      	movs	r2, #15
 800591e:	fa02 f303 	lsl.w	r3, r2, r3
 8005922:	43db      	mvns	r3, r3
 8005924:	693a      	ldr	r2, [r7, #16]
 8005926:	4013      	ands	r3, r2
 8005928:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 800592a:	683b      	ldr	r3, [r7, #0]
 800592c:	691a      	ldr	r2, [r3, #16]
 800592e:	697b      	ldr	r3, [r7, #20]
 8005930:	f003 0307 	and.w	r3, r3, #7
 8005934:	009b      	lsls	r3, r3, #2
 8005936:	fa02 f303 	lsl.w	r3, r2, r3
 800593a:	693a      	ldr	r2, [r7, #16]
 800593c:	4313      	orrs	r3, r2
 800593e:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 8005940:	697b      	ldr	r3, [r7, #20]
 8005942:	08da      	lsrs	r2, r3, #3
 8005944:	687b      	ldr	r3, [r7, #4]
 8005946:	3208      	adds	r2, #8
 8005948:	6939      	ldr	r1, [r7, #16]
 800594a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800594e:	687b      	ldr	r3, [r7, #4]
 8005950:	681b      	ldr	r3, [r3, #0]
 8005952:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8005954:	697b      	ldr	r3, [r7, #20]
 8005956:	005b      	lsls	r3, r3, #1
 8005958:	2203      	movs	r2, #3
 800595a:	fa02 f303 	lsl.w	r3, r2, r3
 800595e:	43db      	mvns	r3, r3
 8005960:	693a      	ldr	r2, [r7, #16]
 8005962:	4013      	ands	r3, r2
 8005964:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8005966:	683b      	ldr	r3, [r7, #0]
 8005968:	685b      	ldr	r3, [r3, #4]
 800596a:	f003 0203 	and.w	r2, r3, #3
 800596e:	697b      	ldr	r3, [r7, #20]
 8005970:	005b      	lsls	r3, r3, #1
 8005972:	fa02 f303 	lsl.w	r3, r2, r3
 8005976:	693a      	ldr	r2, [r7, #16]
 8005978:	4313      	orrs	r3, r2
 800597a:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 800597c:	687b      	ldr	r3, [r7, #4]
 800597e:	693a      	ldr	r2, [r7, #16]
 8005980:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8005982:	683b      	ldr	r3, [r7, #0]
 8005984:	685b      	ldr	r3, [r3, #4]
 8005986:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800598a:	2b00      	cmp	r3, #0
 800598c:	f000 80a6 	beq.w	8005adc <HAL_GPIO_Init+0x2c0>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8005990:	4b5b      	ldr	r3, [pc, #364]	; (8005b00 <HAL_GPIO_Init+0x2e4>)
 8005992:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005994:	4a5a      	ldr	r2, [pc, #360]	; (8005b00 <HAL_GPIO_Init+0x2e4>)
 8005996:	f043 0301 	orr.w	r3, r3, #1
 800599a:	6613      	str	r3, [r2, #96]	; 0x60
 800599c:	4b58      	ldr	r3, [pc, #352]	; (8005b00 <HAL_GPIO_Init+0x2e4>)
 800599e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80059a0:	f003 0301 	and.w	r3, r3, #1
 80059a4:	60bb      	str	r3, [r7, #8]
 80059a6:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2U];
 80059a8:	4a56      	ldr	r2, [pc, #344]	; (8005b04 <HAL_GPIO_Init+0x2e8>)
 80059aa:	697b      	ldr	r3, [r7, #20]
 80059ac:	089b      	lsrs	r3, r3, #2
 80059ae:	3302      	adds	r3, #2
 80059b0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80059b4:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 80059b6:	697b      	ldr	r3, [r7, #20]
 80059b8:	f003 0303 	and.w	r3, r3, #3
 80059bc:	009b      	lsls	r3, r3, #2
 80059be:	220f      	movs	r2, #15
 80059c0:	fa02 f303 	lsl.w	r3, r2, r3
 80059c4:	43db      	mvns	r3, r3
 80059c6:	693a      	ldr	r2, [r7, #16]
 80059c8:	4013      	ands	r3, r2
 80059ca:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 80059cc:	687b      	ldr	r3, [r7, #4]
 80059ce:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 80059d2:	d01f      	beq.n	8005a14 <HAL_GPIO_Init+0x1f8>
 80059d4:	687b      	ldr	r3, [r7, #4]
 80059d6:	4a4c      	ldr	r2, [pc, #304]	; (8005b08 <HAL_GPIO_Init+0x2ec>)
 80059d8:	4293      	cmp	r3, r2
 80059da:	d019      	beq.n	8005a10 <HAL_GPIO_Init+0x1f4>
 80059dc:	687b      	ldr	r3, [r7, #4]
 80059de:	4a4b      	ldr	r2, [pc, #300]	; (8005b0c <HAL_GPIO_Init+0x2f0>)
 80059e0:	4293      	cmp	r3, r2
 80059e2:	d013      	beq.n	8005a0c <HAL_GPIO_Init+0x1f0>
 80059e4:	687b      	ldr	r3, [r7, #4]
 80059e6:	4a4a      	ldr	r2, [pc, #296]	; (8005b10 <HAL_GPIO_Init+0x2f4>)
 80059e8:	4293      	cmp	r3, r2
 80059ea:	d00d      	beq.n	8005a08 <HAL_GPIO_Init+0x1ec>
 80059ec:	687b      	ldr	r3, [r7, #4]
 80059ee:	4a49      	ldr	r2, [pc, #292]	; (8005b14 <HAL_GPIO_Init+0x2f8>)
 80059f0:	4293      	cmp	r3, r2
 80059f2:	d007      	beq.n	8005a04 <HAL_GPIO_Init+0x1e8>
 80059f4:	687b      	ldr	r3, [r7, #4]
 80059f6:	4a48      	ldr	r2, [pc, #288]	; (8005b18 <HAL_GPIO_Init+0x2fc>)
 80059f8:	4293      	cmp	r3, r2
 80059fa:	d101      	bne.n	8005a00 <HAL_GPIO_Init+0x1e4>
 80059fc:	2305      	movs	r3, #5
 80059fe:	e00a      	b.n	8005a16 <HAL_GPIO_Init+0x1fa>
 8005a00:	2306      	movs	r3, #6
 8005a02:	e008      	b.n	8005a16 <HAL_GPIO_Init+0x1fa>
 8005a04:	2304      	movs	r3, #4
 8005a06:	e006      	b.n	8005a16 <HAL_GPIO_Init+0x1fa>
 8005a08:	2303      	movs	r3, #3
 8005a0a:	e004      	b.n	8005a16 <HAL_GPIO_Init+0x1fa>
 8005a0c:	2302      	movs	r3, #2
 8005a0e:	e002      	b.n	8005a16 <HAL_GPIO_Init+0x1fa>
 8005a10:	2301      	movs	r3, #1
 8005a12:	e000      	b.n	8005a16 <HAL_GPIO_Init+0x1fa>
 8005a14:	2300      	movs	r3, #0
 8005a16:	697a      	ldr	r2, [r7, #20]
 8005a18:	f002 0203 	and.w	r2, r2, #3
 8005a1c:	0092      	lsls	r2, r2, #2
 8005a1e:	4093      	lsls	r3, r2
 8005a20:	693a      	ldr	r2, [r7, #16]
 8005a22:	4313      	orrs	r3, r2
 8005a24:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8005a26:	4937      	ldr	r1, [pc, #220]	; (8005b04 <HAL_GPIO_Init+0x2e8>)
 8005a28:	697b      	ldr	r3, [r7, #20]
 8005a2a:	089b      	lsrs	r3, r3, #2
 8005a2c:	3302      	adds	r3, #2
 8005a2e:	693a      	ldr	r2, [r7, #16]
 8005a30:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8005a34:	4b39      	ldr	r3, [pc, #228]	; (8005b1c <HAL_GPIO_Init+0x300>)
 8005a36:	681b      	ldr	r3, [r3, #0]
 8005a38:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8005a3a:	68fb      	ldr	r3, [r7, #12]
 8005a3c:	43db      	mvns	r3, r3
 8005a3e:	693a      	ldr	r2, [r7, #16]
 8005a40:	4013      	ands	r3, r2
 8005a42:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8005a44:	683b      	ldr	r3, [r7, #0]
 8005a46:	685b      	ldr	r3, [r3, #4]
 8005a48:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005a4c:	2b00      	cmp	r3, #0
 8005a4e:	d003      	beq.n	8005a58 <HAL_GPIO_Init+0x23c>
        {
          temp |= iocurrent;
 8005a50:	693a      	ldr	r2, [r7, #16]
 8005a52:	68fb      	ldr	r3, [r7, #12]
 8005a54:	4313      	orrs	r3, r2
 8005a56:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8005a58:	4a30      	ldr	r2, [pc, #192]	; (8005b1c <HAL_GPIO_Init+0x300>)
 8005a5a:	693b      	ldr	r3, [r7, #16]
 8005a5c:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR1;
 8005a5e:	4b2f      	ldr	r3, [pc, #188]	; (8005b1c <HAL_GPIO_Init+0x300>)
 8005a60:	685b      	ldr	r3, [r3, #4]
 8005a62:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8005a64:	68fb      	ldr	r3, [r7, #12]
 8005a66:	43db      	mvns	r3, r3
 8005a68:	693a      	ldr	r2, [r7, #16]
 8005a6a:	4013      	ands	r3, r2
 8005a6c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8005a6e:	683b      	ldr	r3, [r7, #0]
 8005a70:	685b      	ldr	r3, [r3, #4]
 8005a72:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005a76:	2b00      	cmp	r3, #0
 8005a78:	d003      	beq.n	8005a82 <HAL_GPIO_Init+0x266>
        {
          temp |= iocurrent;
 8005a7a:	693a      	ldr	r2, [r7, #16]
 8005a7c:	68fb      	ldr	r3, [r7, #12]
 8005a7e:	4313      	orrs	r3, r2
 8005a80:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8005a82:	4a26      	ldr	r2, [pc, #152]	; (8005b1c <HAL_GPIO_Init+0x300>)
 8005a84:	693b      	ldr	r3, [r7, #16]
 8005a86:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8005a88:	4b24      	ldr	r3, [pc, #144]	; (8005b1c <HAL_GPIO_Init+0x300>)
 8005a8a:	689b      	ldr	r3, [r3, #8]
 8005a8c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8005a8e:	68fb      	ldr	r3, [r7, #12]
 8005a90:	43db      	mvns	r3, r3
 8005a92:	693a      	ldr	r2, [r7, #16]
 8005a94:	4013      	ands	r3, r2
 8005a96:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8005a98:	683b      	ldr	r3, [r7, #0]
 8005a9a:	685b      	ldr	r3, [r3, #4]
 8005a9c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8005aa0:	2b00      	cmp	r3, #0
 8005aa2:	d003      	beq.n	8005aac <HAL_GPIO_Init+0x290>
        {
          temp |= iocurrent;
 8005aa4:	693a      	ldr	r2, [r7, #16]
 8005aa6:	68fb      	ldr	r3, [r7, #12]
 8005aa8:	4313      	orrs	r3, r2
 8005aaa:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8005aac:	4a1b      	ldr	r2, [pc, #108]	; (8005b1c <HAL_GPIO_Init+0x300>)
 8005aae:	693b      	ldr	r3, [r7, #16]
 8005ab0:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8005ab2:	4b1a      	ldr	r3, [pc, #104]	; (8005b1c <HAL_GPIO_Init+0x300>)
 8005ab4:	68db      	ldr	r3, [r3, #12]
 8005ab6:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8005ab8:	68fb      	ldr	r3, [r7, #12]
 8005aba:	43db      	mvns	r3, r3
 8005abc:	693a      	ldr	r2, [r7, #16]
 8005abe:	4013      	ands	r3, r2
 8005ac0:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8005ac2:	683b      	ldr	r3, [r7, #0]
 8005ac4:	685b      	ldr	r3, [r3, #4]
 8005ac6:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8005aca:	2b00      	cmp	r3, #0
 8005acc:	d003      	beq.n	8005ad6 <HAL_GPIO_Init+0x2ba>
        {
          temp |= iocurrent;
 8005ace:	693a      	ldr	r2, [r7, #16]
 8005ad0:	68fb      	ldr	r3, [r7, #12]
 8005ad2:	4313      	orrs	r3, r2
 8005ad4:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8005ad6:	4a11      	ldr	r2, [pc, #68]	; (8005b1c <HAL_GPIO_Init+0x300>)
 8005ad8:	693b      	ldr	r3, [r7, #16]
 8005ada:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 8005adc:	697b      	ldr	r3, [r7, #20]
 8005ade:	3301      	adds	r3, #1
 8005ae0:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0U)
 8005ae2:	683b      	ldr	r3, [r7, #0]
 8005ae4:	681a      	ldr	r2, [r3, #0]
 8005ae6:	697b      	ldr	r3, [r7, #20]
 8005ae8:	fa22 f303 	lsr.w	r3, r2, r3
 8005aec:	2b00      	cmp	r3, #0
 8005aee:	f47f ae9d 	bne.w	800582c <HAL_GPIO_Init+0x10>
  }
}
 8005af2:	bf00      	nop
 8005af4:	371c      	adds	r7, #28
 8005af6:	46bd      	mov	sp, r7
 8005af8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005afc:	4770      	bx	lr
 8005afe:	bf00      	nop
 8005b00:	40021000 	.word	0x40021000
 8005b04:	40010000 	.word	0x40010000
 8005b08:	48000400 	.word	0x48000400
 8005b0c:	48000800 	.word	0x48000800
 8005b10:	48000c00 	.word	0x48000c00
 8005b14:	48001000 	.word	0x48001000
 8005b18:	48001400 	.word	0x48001400
 8005b1c:	40010400 	.word	0x40010400

08005b20 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be any combination of GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8005b20:	b480      	push	{r7}
 8005b22:	b085      	sub	sp, #20
 8005b24:	af00      	add	r7, sp, #0
 8005b26:	6078      	str	r0, [r7, #4]
 8005b28:	460b      	mov	r3, r1
 8005b2a:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00U)
 8005b2c:	687b      	ldr	r3, [r7, #4]
 8005b2e:	691a      	ldr	r2, [r3, #16]
 8005b30:	887b      	ldrh	r3, [r7, #2]
 8005b32:	4013      	ands	r3, r2
 8005b34:	2b00      	cmp	r3, #0
 8005b36:	d002      	beq.n	8005b3e <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8005b38:	2301      	movs	r3, #1
 8005b3a:	73fb      	strb	r3, [r7, #15]
 8005b3c:	e001      	b.n	8005b42 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8005b3e:	2300      	movs	r3, #0
 8005b40:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8005b42:	7bfb      	ldrb	r3, [r7, #15]
}
 8005b44:	4618      	mov	r0, r3
 8005b46:	3714      	adds	r7, #20
 8005b48:	46bd      	mov	sp, r7
 8005b4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b4e:	4770      	bx	lr

08005b50 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8005b50:	b480      	push	{r7}
 8005b52:	b083      	sub	sp, #12
 8005b54:	af00      	add	r7, sp, #0
 8005b56:	6078      	str	r0, [r7, #4]
 8005b58:	460b      	mov	r3, r1
 8005b5a:	807b      	strh	r3, [r7, #2]
 8005b5c:	4613      	mov	r3, r2
 8005b5e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8005b60:	787b      	ldrb	r3, [r7, #1]
 8005b62:	2b00      	cmp	r3, #0
 8005b64:	d003      	beq.n	8005b6e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8005b66:	887a      	ldrh	r2, [r7, #2]
 8005b68:	687b      	ldr	r3, [r7, #4]
 8005b6a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8005b6c:	e002      	b.n	8005b74 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8005b6e:	887a      	ldrh	r2, [r7, #2]
 8005b70:	687b      	ldr	r3, [r7, #4]
 8005b72:	629a      	str	r2, [r3, #40]	; 0x28
}
 8005b74:	bf00      	nop
 8005b76:	370c      	adds	r7, #12
 8005b78:	46bd      	mov	sp, r7
 8005b7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b7e:	4770      	bx	lr

08005b80 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8005b80:	b480      	push	{r7}
 8005b82:	b085      	sub	sp, #20
 8005b84:	af00      	add	r7, sp, #0
 8005b86:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 8005b88:	687b      	ldr	r3, [r7, #4]
 8005b8a:	2b00      	cmp	r3, #0
 8005b8c:	d141      	bne.n	8005c12 <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8005b8e:	4b4b      	ldr	r3, [pc, #300]	; (8005cbc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005b90:	681b      	ldr	r3, [r3, #0]
 8005b92:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8005b96:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005b9a:	d131      	bne.n	8005c00 <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8005b9c:	4b47      	ldr	r3, [pc, #284]	; (8005cbc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005b9e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8005ba2:	4a46      	ldr	r2, [pc, #280]	; (8005cbc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005ba4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005ba8:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8005bac:	4b43      	ldr	r3, [pc, #268]	; (8005cbc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005bae:	681b      	ldr	r3, [r3, #0]
 8005bb0:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8005bb4:	4a41      	ldr	r2, [pc, #260]	; (8005cbc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005bb6:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8005bba:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8005bbc:	4b40      	ldr	r3, [pc, #256]	; (8005cc0 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8005bbe:	681b      	ldr	r3, [r3, #0]
 8005bc0:	2232      	movs	r2, #50	; 0x32
 8005bc2:	fb02 f303 	mul.w	r3, r2, r3
 8005bc6:	4a3f      	ldr	r2, [pc, #252]	; (8005cc4 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8005bc8:	fba2 2303 	umull	r2, r3, r2, r3
 8005bcc:	0c9b      	lsrs	r3, r3, #18
 8005bce:	3301      	adds	r3, #1
 8005bd0:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8005bd2:	e002      	b.n	8005bda <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 8005bd4:	68fb      	ldr	r3, [r7, #12]
 8005bd6:	3b01      	subs	r3, #1
 8005bd8:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8005bda:	4b38      	ldr	r3, [pc, #224]	; (8005cbc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005bdc:	695b      	ldr	r3, [r3, #20]
 8005bde:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005be2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005be6:	d102      	bne.n	8005bee <HAL_PWREx_ControlVoltageScaling+0x6e>
 8005be8:	68fb      	ldr	r3, [r7, #12]
 8005bea:	2b00      	cmp	r3, #0
 8005bec:	d1f2      	bne.n	8005bd4 <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8005bee:	4b33      	ldr	r3, [pc, #204]	; (8005cbc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005bf0:	695b      	ldr	r3, [r3, #20]
 8005bf2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005bf6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005bfa:	d158      	bne.n	8005cae <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8005bfc:	2303      	movs	r3, #3
 8005bfe:	e057      	b.n	8005cb0 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8005c00:	4b2e      	ldr	r3, [pc, #184]	; (8005cbc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005c02:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8005c06:	4a2d      	ldr	r2, [pc, #180]	; (8005cbc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005c08:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005c0c:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 8005c10:	e04d      	b.n	8005cae <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8005c12:	687b      	ldr	r3, [r7, #4]
 8005c14:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005c18:	d141      	bne.n	8005c9e <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8005c1a:	4b28      	ldr	r3, [pc, #160]	; (8005cbc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005c1c:	681b      	ldr	r3, [r3, #0]
 8005c1e:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8005c22:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005c26:	d131      	bne.n	8005c8c <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8005c28:	4b24      	ldr	r3, [pc, #144]	; (8005cbc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005c2a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8005c2e:	4a23      	ldr	r2, [pc, #140]	; (8005cbc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005c30:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005c34:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8005c38:	4b20      	ldr	r3, [pc, #128]	; (8005cbc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005c3a:	681b      	ldr	r3, [r3, #0]
 8005c3c:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8005c40:	4a1e      	ldr	r2, [pc, #120]	; (8005cbc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005c42:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8005c46:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8005c48:	4b1d      	ldr	r3, [pc, #116]	; (8005cc0 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8005c4a:	681b      	ldr	r3, [r3, #0]
 8005c4c:	2232      	movs	r2, #50	; 0x32
 8005c4e:	fb02 f303 	mul.w	r3, r2, r3
 8005c52:	4a1c      	ldr	r2, [pc, #112]	; (8005cc4 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8005c54:	fba2 2303 	umull	r2, r3, r2, r3
 8005c58:	0c9b      	lsrs	r3, r3, #18
 8005c5a:	3301      	adds	r3, #1
 8005c5c:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8005c5e:	e002      	b.n	8005c66 <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 8005c60:	68fb      	ldr	r3, [r7, #12]
 8005c62:	3b01      	subs	r3, #1
 8005c64:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8005c66:	4b15      	ldr	r3, [pc, #84]	; (8005cbc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005c68:	695b      	ldr	r3, [r3, #20]
 8005c6a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005c6e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005c72:	d102      	bne.n	8005c7a <HAL_PWREx_ControlVoltageScaling+0xfa>
 8005c74:	68fb      	ldr	r3, [r7, #12]
 8005c76:	2b00      	cmp	r3, #0
 8005c78:	d1f2      	bne.n	8005c60 <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8005c7a:	4b10      	ldr	r3, [pc, #64]	; (8005cbc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005c7c:	695b      	ldr	r3, [r3, #20]
 8005c7e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005c82:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005c86:	d112      	bne.n	8005cae <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8005c88:	2303      	movs	r3, #3
 8005c8a:	e011      	b.n	8005cb0 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8005c8c:	4b0b      	ldr	r3, [pc, #44]	; (8005cbc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005c8e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8005c92:	4a0a      	ldr	r2, [pc, #40]	; (8005cbc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005c94:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005c98:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 8005c9c:	e007      	b.n	8005cae <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8005c9e:	4b07      	ldr	r3, [pc, #28]	; (8005cbc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005ca0:	681b      	ldr	r3, [r3, #0]
 8005ca2:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8005ca6:	4a05      	ldr	r2, [pc, #20]	; (8005cbc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005ca8:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8005cac:	6013      	str	r3, [r2, #0]
    /* No need to wait for VOSF to be cleared for this transition */
    /* PWR_CR5_R1MODE bit setting has no effect in Range 2        */
  }

  return HAL_OK;
 8005cae:	2300      	movs	r3, #0
}
 8005cb0:	4618      	mov	r0, r3
 8005cb2:	3714      	adds	r7, #20
 8005cb4:	46bd      	mov	sp, r7
 8005cb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cba:	4770      	bx	lr
 8005cbc:	40007000 	.word	0x40007000
 8005cc0:	20000010 	.word	0x20000010
 8005cc4:	431bde83 	.word	0x431bde83

08005cc8 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8005cc8:	b580      	push	{r7, lr}
 8005cca:	b088      	sub	sp, #32
 8005ccc:	af00      	add	r7, sp, #0
 8005cce:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8005cd0:	687b      	ldr	r3, [r7, #4]
 8005cd2:	2b00      	cmp	r3, #0
 8005cd4:	d101      	bne.n	8005cda <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8005cd6:	2301      	movs	r3, #1
 8005cd8:	e308      	b.n	80062ec <HAL_RCC_OscConfig+0x624>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8005cda:	687b      	ldr	r3, [r7, #4]
 8005cdc:	681b      	ldr	r3, [r3, #0]
 8005cde:	f003 0301 	and.w	r3, r3, #1
 8005ce2:	2b00      	cmp	r3, #0
 8005ce4:	d075      	beq.n	8005dd2 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8005ce6:	4ba3      	ldr	r3, [pc, #652]	; (8005f74 <HAL_RCC_OscConfig+0x2ac>)
 8005ce8:	689b      	ldr	r3, [r3, #8]
 8005cea:	f003 030c 	and.w	r3, r3, #12
 8005cee:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8005cf0:	4ba0      	ldr	r3, [pc, #640]	; (8005f74 <HAL_RCC_OscConfig+0x2ac>)
 8005cf2:	68db      	ldr	r3, [r3, #12]
 8005cf4:	f003 0303 	and.w	r3, r3, #3
 8005cf8:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 8005cfa:	69bb      	ldr	r3, [r7, #24]
 8005cfc:	2b0c      	cmp	r3, #12
 8005cfe:	d102      	bne.n	8005d06 <HAL_RCC_OscConfig+0x3e>
 8005d00:	697b      	ldr	r3, [r7, #20]
 8005d02:	2b03      	cmp	r3, #3
 8005d04:	d002      	beq.n	8005d0c <HAL_RCC_OscConfig+0x44>
 8005d06:	69bb      	ldr	r3, [r7, #24]
 8005d08:	2b08      	cmp	r3, #8
 8005d0a:	d10b      	bne.n	8005d24 <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005d0c:	4b99      	ldr	r3, [pc, #612]	; (8005f74 <HAL_RCC_OscConfig+0x2ac>)
 8005d0e:	681b      	ldr	r3, [r3, #0]
 8005d10:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005d14:	2b00      	cmp	r3, #0
 8005d16:	d05b      	beq.n	8005dd0 <HAL_RCC_OscConfig+0x108>
 8005d18:	687b      	ldr	r3, [r7, #4]
 8005d1a:	685b      	ldr	r3, [r3, #4]
 8005d1c:	2b00      	cmp	r3, #0
 8005d1e:	d157      	bne.n	8005dd0 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8005d20:	2301      	movs	r3, #1
 8005d22:	e2e3      	b.n	80062ec <HAL_RCC_OscConfig+0x624>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8005d24:	687b      	ldr	r3, [r7, #4]
 8005d26:	685b      	ldr	r3, [r3, #4]
 8005d28:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005d2c:	d106      	bne.n	8005d3c <HAL_RCC_OscConfig+0x74>
 8005d2e:	4b91      	ldr	r3, [pc, #580]	; (8005f74 <HAL_RCC_OscConfig+0x2ac>)
 8005d30:	681b      	ldr	r3, [r3, #0]
 8005d32:	4a90      	ldr	r2, [pc, #576]	; (8005f74 <HAL_RCC_OscConfig+0x2ac>)
 8005d34:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005d38:	6013      	str	r3, [r2, #0]
 8005d3a:	e01d      	b.n	8005d78 <HAL_RCC_OscConfig+0xb0>
 8005d3c:	687b      	ldr	r3, [r7, #4]
 8005d3e:	685b      	ldr	r3, [r3, #4]
 8005d40:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8005d44:	d10c      	bne.n	8005d60 <HAL_RCC_OscConfig+0x98>
 8005d46:	4b8b      	ldr	r3, [pc, #556]	; (8005f74 <HAL_RCC_OscConfig+0x2ac>)
 8005d48:	681b      	ldr	r3, [r3, #0]
 8005d4a:	4a8a      	ldr	r2, [pc, #552]	; (8005f74 <HAL_RCC_OscConfig+0x2ac>)
 8005d4c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8005d50:	6013      	str	r3, [r2, #0]
 8005d52:	4b88      	ldr	r3, [pc, #544]	; (8005f74 <HAL_RCC_OscConfig+0x2ac>)
 8005d54:	681b      	ldr	r3, [r3, #0]
 8005d56:	4a87      	ldr	r2, [pc, #540]	; (8005f74 <HAL_RCC_OscConfig+0x2ac>)
 8005d58:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005d5c:	6013      	str	r3, [r2, #0]
 8005d5e:	e00b      	b.n	8005d78 <HAL_RCC_OscConfig+0xb0>
 8005d60:	4b84      	ldr	r3, [pc, #528]	; (8005f74 <HAL_RCC_OscConfig+0x2ac>)
 8005d62:	681b      	ldr	r3, [r3, #0]
 8005d64:	4a83      	ldr	r2, [pc, #524]	; (8005f74 <HAL_RCC_OscConfig+0x2ac>)
 8005d66:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005d6a:	6013      	str	r3, [r2, #0]
 8005d6c:	4b81      	ldr	r3, [pc, #516]	; (8005f74 <HAL_RCC_OscConfig+0x2ac>)
 8005d6e:	681b      	ldr	r3, [r3, #0]
 8005d70:	4a80      	ldr	r2, [pc, #512]	; (8005f74 <HAL_RCC_OscConfig+0x2ac>)
 8005d72:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8005d76:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8005d78:	687b      	ldr	r3, [r7, #4]
 8005d7a:	685b      	ldr	r3, [r3, #4]
 8005d7c:	2b00      	cmp	r3, #0
 8005d7e:	d013      	beq.n	8005da8 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005d80:	f7fd f9ee 	bl	8003160 <HAL_GetTick>
 8005d84:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8005d86:	e008      	b.n	8005d9a <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8005d88:	f7fd f9ea 	bl	8003160 <HAL_GetTick>
 8005d8c:	4602      	mov	r2, r0
 8005d8e:	693b      	ldr	r3, [r7, #16]
 8005d90:	1ad3      	subs	r3, r2, r3
 8005d92:	2b64      	cmp	r3, #100	; 0x64
 8005d94:	d901      	bls.n	8005d9a <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8005d96:	2303      	movs	r3, #3
 8005d98:	e2a8      	b.n	80062ec <HAL_RCC_OscConfig+0x624>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8005d9a:	4b76      	ldr	r3, [pc, #472]	; (8005f74 <HAL_RCC_OscConfig+0x2ac>)
 8005d9c:	681b      	ldr	r3, [r3, #0]
 8005d9e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005da2:	2b00      	cmp	r3, #0
 8005da4:	d0f0      	beq.n	8005d88 <HAL_RCC_OscConfig+0xc0>
 8005da6:	e014      	b.n	8005dd2 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005da8:	f7fd f9da 	bl	8003160 <HAL_GetTick>
 8005dac:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8005dae:	e008      	b.n	8005dc2 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8005db0:	f7fd f9d6 	bl	8003160 <HAL_GetTick>
 8005db4:	4602      	mov	r2, r0
 8005db6:	693b      	ldr	r3, [r7, #16]
 8005db8:	1ad3      	subs	r3, r2, r3
 8005dba:	2b64      	cmp	r3, #100	; 0x64
 8005dbc:	d901      	bls.n	8005dc2 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8005dbe:	2303      	movs	r3, #3
 8005dc0:	e294      	b.n	80062ec <HAL_RCC_OscConfig+0x624>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8005dc2:	4b6c      	ldr	r3, [pc, #432]	; (8005f74 <HAL_RCC_OscConfig+0x2ac>)
 8005dc4:	681b      	ldr	r3, [r3, #0]
 8005dc6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005dca:	2b00      	cmp	r3, #0
 8005dcc:	d1f0      	bne.n	8005db0 <HAL_RCC_OscConfig+0xe8>
 8005dce:	e000      	b.n	8005dd2 <HAL_RCC_OscConfig+0x10a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005dd0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8005dd2:	687b      	ldr	r3, [r7, #4]
 8005dd4:	681b      	ldr	r3, [r3, #0]
 8005dd6:	f003 0302 	and.w	r3, r3, #2
 8005dda:	2b00      	cmp	r3, #0
 8005ddc:	d075      	beq.n	8005eca <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8005dde:	4b65      	ldr	r3, [pc, #404]	; (8005f74 <HAL_RCC_OscConfig+0x2ac>)
 8005de0:	689b      	ldr	r3, [r3, #8]
 8005de2:	f003 030c 	and.w	r3, r3, #12
 8005de6:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8005de8:	4b62      	ldr	r3, [pc, #392]	; (8005f74 <HAL_RCC_OscConfig+0x2ac>)
 8005dea:	68db      	ldr	r3, [r3, #12]
 8005dec:	f003 0303 	and.w	r3, r3, #3
 8005df0:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 8005df2:	69bb      	ldr	r3, [r7, #24]
 8005df4:	2b0c      	cmp	r3, #12
 8005df6:	d102      	bne.n	8005dfe <HAL_RCC_OscConfig+0x136>
 8005df8:	697b      	ldr	r3, [r7, #20]
 8005dfa:	2b02      	cmp	r3, #2
 8005dfc:	d002      	beq.n	8005e04 <HAL_RCC_OscConfig+0x13c>
 8005dfe:	69bb      	ldr	r3, [r7, #24]
 8005e00:	2b04      	cmp	r3, #4
 8005e02:	d11f      	bne.n	8005e44 <HAL_RCC_OscConfig+0x17c>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8005e04:	4b5b      	ldr	r3, [pc, #364]	; (8005f74 <HAL_RCC_OscConfig+0x2ac>)
 8005e06:	681b      	ldr	r3, [r3, #0]
 8005e08:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005e0c:	2b00      	cmp	r3, #0
 8005e0e:	d005      	beq.n	8005e1c <HAL_RCC_OscConfig+0x154>
 8005e10:	687b      	ldr	r3, [r7, #4]
 8005e12:	68db      	ldr	r3, [r3, #12]
 8005e14:	2b00      	cmp	r3, #0
 8005e16:	d101      	bne.n	8005e1c <HAL_RCC_OscConfig+0x154>
      {
        return HAL_ERROR;
 8005e18:	2301      	movs	r3, #1
 8005e1a:	e267      	b.n	80062ec <HAL_RCC_OscConfig+0x624>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005e1c:	4b55      	ldr	r3, [pc, #340]	; (8005f74 <HAL_RCC_OscConfig+0x2ac>)
 8005e1e:	685b      	ldr	r3, [r3, #4]
 8005e20:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8005e24:	687b      	ldr	r3, [r7, #4]
 8005e26:	691b      	ldr	r3, [r3, #16]
 8005e28:	061b      	lsls	r3, r3, #24
 8005e2a:	4952      	ldr	r1, [pc, #328]	; (8005f74 <HAL_RCC_OscConfig+0x2ac>)
 8005e2c:	4313      	orrs	r3, r2
 8005e2e:	604b      	str	r3, [r1, #4]

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8005e30:	4b51      	ldr	r3, [pc, #324]	; (8005f78 <HAL_RCC_OscConfig+0x2b0>)
 8005e32:	681b      	ldr	r3, [r3, #0]
 8005e34:	4618      	mov	r0, r3
 8005e36:	f7fd f947 	bl	80030c8 <HAL_InitTick>
 8005e3a:	4603      	mov	r3, r0
 8005e3c:	2b00      	cmp	r3, #0
 8005e3e:	d043      	beq.n	8005ec8 <HAL_RCC_OscConfig+0x200>
        {
          return HAL_ERROR;
 8005e40:	2301      	movs	r3, #1
 8005e42:	e253      	b.n	80062ec <HAL_RCC_OscConfig+0x624>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8005e44:	687b      	ldr	r3, [r7, #4]
 8005e46:	68db      	ldr	r3, [r3, #12]
 8005e48:	2b00      	cmp	r3, #0
 8005e4a:	d023      	beq.n	8005e94 <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8005e4c:	4b49      	ldr	r3, [pc, #292]	; (8005f74 <HAL_RCC_OscConfig+0x2ac>)
 8005e4e:	681b      	ldr	r3, [r3, #0]
 8005e50:	4a48      	ldr	r2, [pc, #288]	; (8005f74 <HAL_RCC_OscConfig+0x2ac>)
 8005e52:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005e56:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005e58:	f7fd f982 	bl	8003160 <HAL_GetTick>
 8005e5c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8005e5e:	e008      	b.n	8005e72 <HAL_RCC_OscConfig+0x1aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8005e60:	f7fd f97e 	bl	8003160 <HAL_GetTick>
 8005e64:	4602      	mov	r2, r0
 8005e66:	693b      	ldr	r3, [r7, #16]
 8005e68:	1ad3      	subs	r3, r2, r3
 8005e6a:	2b02      	cmp	r3, #2
 8005e6c:	d901      	bls.n	8005e72 <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 8005e6e:	2303      	movs	r3, #3
 8005e70:	e23c      	b.n	80062ec <HAL_RCC_OscConfig+0x624>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8005e72:	4b40      	ldr	r3, [pc, #256]	; (8005f74 <HAL_RCC_OscConfig+0x2ac>)
 8005e74:	681b      	ldr	r3, [r3, #0]
 8005e76:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005e7a:	2b00      	cmp	r3, #0
 8005e7c:	d0f0      	beq.n	8005e60 <HAL_RCC_OscConfig+0x198>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005e7e:	4b3d      	ldr	r3, [pc, #244]	; (8005f74 <HAL_RCC_OscConfig+0x2ac>)
 8005e80:	685b      	ldr	r3, [r3, #4]
 8005e82:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8005e86:	687b      	ldr	r3, [r7, #4]
 8005e88:	691b      	ldr	r3, [r3, #16]
 8005e8a:	061b      	lsls	r3, r3, #24
 8005e8c:	4939      	ldr	r1, [pc, #228]	; (8005f74 <HAL_RCC_OscConfig+0x2ac>)
 8005e8e:	4313      	orrs	r3, r2
 8005e90:	604b      	str	r3, [r1, #4]
 8005e92:	e01a      	b.n	8005eca <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8005e94:	4b37      	ldr	r3, [pc, #220]	; (8005f74 <HAL_RCC_OscConfig+0x2ac>)
 8005e96:	681b      	ldr	r3, [r3, #0]
 8005e98:	4a36      	ldr	r2, [pc, #216]	; (8005f74 <HAL_RCC_OscConfig+0x2ac>)
 8005e9a:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005e9e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005ea0:	f7fd f95e 	bl	8003160 <HAL_GetTick>
 8005ea4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8005ea6:	e008      	b.n	8005eba <HAL_RCC_OscConfig+0x1f2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8005ea8:	f7fd f95a 	bl	8003160 <HAL_GetTick>
 8005eac:	4602      	mov	r2, r0
 8005eae:	693b      	ldr	r3, [r7, #16]
 8005eb0:	1ad3      	subs	r3, r2, r3
 8005eb2:	2b02      	cmp	r3, #2
 8005eb4:	d901      	bls.n	8005eba <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 8005eb6:	2303      	movs	r3, #3
 8005eb8:	e218      	b.n	80062ec <HAL_RCC_OscConfig+0x624>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8005eba:	4b2e      	ldr	r3, [pc, #184]	; (8005f74 <HAL_RCC_OscConfig+0x2ac>)
 8005ebc:	681b      	ldr	r3, [r3, #0]
 8005ebe:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005ec2:	2b00      	cmp	r3, #0
 8005ec4:	d1f0      	bne.n	8005ea8 <HAL_RCC_OscConfig+0x1e0>
 8005ec6:	e000      	b.n	8005eca <HAL_RCC_OscConfig+0x202>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8005ec8:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8005eca:	687b      	ldr	r3, [r7, #4]
 8005ecc:	681b      	ldr	r3, [r3, #0]
 8005ece:	f003 0308 	and.w	r3, r3, #8
 8005ed2:	2b00      	cmp	r3, #0
 8005ed4:	d03c      	beq.n	8005f50 <HAL_RCC_OscConfig+0x288>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8005ed6:	687b      	ldr	r3, [r7, #4]
 8005ed8:	695b      	ldr	r3, [r3, #20]
 8005eda:	2b00      	cmp	r3, #0
 8005edc:	d01c      	beq.n	8005f18 <HAL_RCC_OscConfig+0x250>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8005ede:	4b25      	ldr	r3, [pc, #148]	; (8005f74 <HAL_RCC_OscConfig+0x2ac>)
 8005ee0:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8005ee4:	4a23      	ldr	r2, [pc, #140]	; (8005f74 <HAL_RCC_OscConfig+0x2ac>)
 8005ee6:	f043 0301 	orr.w	r3, r3, #1
 8005eea:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005eee:	f7fd f937 	bl	8003160 <HAL_GetTick>
 8005ef2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8005ef4:	e008      	b.n	8005f08 <HAL_RCC_OscConfig+0x240>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8005ef6:	f7fd f933 	bl	8003160 <HAL_GetTick>
 8005efa:	4602      	mov	r2, r0
 8005efc:	693b      	ldr	r3, [r7, #16]
 8005efe:	1ad3      	subs	r3, r2, r3
 8005f00:	2b02      	cmp	r3, #2
 8005f02:	d901      	bls.n	8005f08 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8005f04:	2303      	movs	r3, #3
 8005f06:	e1f1      	b.n	80062ec <HAL_RCC_OscConfig+0x624>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8005f08:	4b1a      	ldr	r3, [pc, #104]	; (8005f74 <HAL_RCC_OscConfig+0x2ac>)
 8005f0a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8005f0e:	f003 0302 	and.w	r3, r3, #2
 8005f12:	2b00      	cmp	r3, #0
 8005f14:	d0ef      	beq.n	8005ef6 <HAL_RCC_OscConfig+0x22e>
 8005f16:	e01b      	b.n	8005f50 <HAL_RCC_OscConfig+0x288>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8005f18:	4b16      	ldr	r3, [pc, #88]	; (8005f74 <HAL_RCC_OscConfig+0x2ac>)
 8005f1a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8005f1e:	4a15      	ldr	r2, [pc, #84]	; (8005f74 <HAL_RCC_OscConfig+0x2ac>)
 8005f20:	f023 0301 	bic.w	r3, r3, #1
 8005f24:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005f28:	f7fd f91a 	bl	8003160 <HAL_GetTick>
 8005f2c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8005f2e:	e008      	b.n	8005f42 <HAL_RCC_OscConfig+0x27a>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8005f30:	f7fd f916 	bl	8003160 <HAL_GetTick>
 8005f34:	4602      	mov	r2, r0
 8005f36:	693b      	ldr	r3, [r7, #16]
 8005f38:	1ad3      	subs	r3, r2, r3
 8005f3a:	2b02      	cmp	r3, #2
 8005f3c:	d901      	bls.n	8005f42 <HAL_RCC_OscConfig+0x27a>
        {
          return HAL_TIMEOUT;
 8005f3e:	2303      	movs	r3, #3
 8005f40:	e1d4      	b.n	80062ec <HAL_RCC_OscConfig+0x624>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8005f42:	4b0c      	ldr	r3, [pc, #48]	; (8005f74 <HAL_RCC_OscConfig+0x2ac>)
 8005f44:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8005f48:	f003 0302 	and.w	r3, r3, #2
 8005f4c:	2b00      	cmp	r3, #0
 8005f4e:	d1ef      	bne.n	8005f30 <HAL_RCC_OscConfig+0x268>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8005f50:	687b      	ldr	r3, [r7, #4]
 8005f52:	681b      	ldr	r3, [r3, #0]
 8005f54:	f003 0304 	and.w	r3, r3, #4
 8005f58:	2b00      	cmp	r3, #0
 8005f5a:	f000 80ab 	beq.w	80060b4 <HAL_RCC_OscConfig+0x3ec>
  {
    FlagStatus       pwrclkchanged = RESET;
 8005f5e:	2300      	movs	r3, #0
 8005f60:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain if necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8005f62:	4b04      	ldr	r3, [pc, #16]	; (8005f74 <HAL_RCC_OscConfig+0x2ac>)
 8005f64:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005f66:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005f6a:	2b00      	cmp	r3, #0
 8005f6c:	d106      	bne.n	8005f7c <HAL_RCC_OscConfig+0x2b4>
 8005f6e:	2301      	movs	r3, #1
 8005f70:	e005      	b.n	8005f7e <HAL_RCC_OscConfig+0x2b6>
 8005f72:	bf00      	nop
 8005f74:	40021000 	.word	0x40021000
 8005f78:	20000014 	.word	0x20000014
 8005f7c:	2300      	movs	r3, #0
 8005f7e:	2b00      	cmp	r3, #0
 8005f80:	d00d      	beq.n	8005f9e <HAL_RCC_OscConfig+0x2d6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8005f82:	4baf      	ldr	r3, [pc, #700]	; (8006240 <HAL_RCC_OscConfig+0x578>)
 8005f84:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005f86:	4aae      	ldr	r2, [pc, #696]	; (8006240 <HAL_RCC_OscConfig+0x578>)
 8005f88:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005f8c:	6593      	str	r3, [r2, #88]	; 0x58
 8005f8e:	4bac      	ldr	r3, [pc, #688]	; (8006240 <HAL_RCC_OscConfig+0x578>)
 8005f90:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005f92:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005f96:	60fb      	str	r3, [r7, #12]
 8005f98:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8005f9a:	2301      	movs	r3, #1
 8005f9c:	77fb      	strb	r3, [r7, #31]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8005f9e:	4ba9      	ldr	r3, [pc, #676]	; (8006244 <HAL_RCC_OscConfig+0x57c>)
 8005fa0:	681b      	ldr	r3, [r3, #0]
 8005fa2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005fa6:	2b00      	cmp	r3, #0
 8005fa8:	d118      	bne.n	8005fdc <HAL_RCC_OscConfig+0x314>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8005faa:	4ba6      	ldr	r3, [pc, #664]	; (8006244 <HAL_RCC_OscConfig+0x57c>)
 8005fac:	681b      	ldr	r3, [r3, #0]
 8005fae:	4aa5      	ldr	r2, [pc, #660]	; (8006244 <HAL_RCC_OscConfig+0x57c>)
 8005fb0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005fb4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8005fb6:	f7fd f8d3 	bl	8003160 <HAL_GetTick>
 8005fba:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8005fbc:	e008      	b.n	8005fd0 <HAL_RCC_OscConfig+0x308>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005fbe:	f7fd f8cf 	bl	8003160 <HAL_GetTick>
 8005fc2:	4602      	mov	r2, r0
 8005fc4:	693b      	ldr	r3, [r7, #16]
 8005fc6:	1ad3      	subs	r3, r2, r3
 8005fc8:	2b02      	cmp	r3, #2
 8005fca:	d901      	bls.n	8005fd0 <HAL_RCC_OscConfig+0x308>
        {
          return HAL_TIMEOUT;
 8005fcc:	2303      	movs	r3, #3
 8005fce:	e18d      	b.n	80062ec <HAL_RCC_OscConfig+0x624>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8005fd0:	4b9c      	ldr	r3, [pc, #624]	; (8006244 <HAL_RCC_OscConfig+0x57c>)
 8005fd2:	681b      	ldr	r3, [r3, #0]
 8005fd4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005fd8:	2b00      	cmp	r3, #0
 8005fda:	d0f0      	beq.n	8005fbe <HAL_RCC_OscConfig+0x2f6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8005fdc:	687b      	ldr	r3, [r7, #4]
 8005fde:	689b      	ldr	r3, [r3, #8]
 8005fe0:	2b01      	cmp	r3, #1
 8005fe2:	d108      	bne.n	8005ff6 <HAL_RCC_OscConfig+0x32e>
 8005fe4:	4b96      	ldr	r3, [pc, #600]	; (8006240 <HAL_RCC_OscConfig+0x578>)
 8005fe6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005fea:	4a95      	ldr	r2, [pc, #596]	; (8006240 <HAL_RCC_OscConfig+0x578>)
 8005fec:	f043 0301 	orr.w	r3, r3, #1
 8005ff0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8005ff4:	e024      	b.n	8006040 <HAL_RCC_OscConfig+0x378>
 8005ff6:	687b      	ldr	r3, [r7, #4]
 8005ff8:	689b      	ldr	r3, [r3, #8]
 8005ffa:	2b05      	cmp	r3, #5
 8005ffc:	d110      	bne.n	8006020 <HAL_RCC_OscConfig+0x358>
 8005ffe:	4b90      	ldr	r3, [pc, #576]	; (8006240 <HAL_RCC_OscConfig+0x578>)
 8006000:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006004:	4a8e      	ldr	r2, [pc, #568]	; (8006240 <HAL_RCC_OscConfig+0x578>)
 8006006:	f043 0304 	orr.w	r3, r3, #4
 800600a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800600e:	4b8c      	ldr	r3, [pc, #560]	; (8006240 <HAL_RCC_OscConfig+0x578>)
 8006010:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006014:	4a8a      	ldr	r2, [pc, #552]	; (8006240 <HAL_RCC_OscConfig+0x578>)
 8006016:	f043 0301 	orr.w	r3, r3, #1
 800601a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800601e:	e00f      	b.n	8006040 <HAL_RCC_OscConfig+0x378>
 8006020:	4b87      	ldr	r3, [pc, #540]	; (8006240 <HAL_RCC_OscConfig+0x578>)
 8006022:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006026:	4a86      	ldr	r2, [pc, #536]	; (8006240 <HAL_RCC_OscConfig+0x578>)
 8006028:	f023 0301 	bic.w	r3, r3, #1
 800602c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8006030:	4b83      	ldr	r3, [pc, #524]	; (8006240 <HAL_RCC_OscConfig+0x578>)
 8006032:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006036:	4a82      	ldr	r2, [pc, #520]	; (8006240 <HAL_RCC_OscConfig+0x578>)
 8006038:	f023 0304 	bic.w	r3, r3, #4
 800603c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8006040:	687b      	ldr	r3, [r7, #4]
 8006042:	689b      	ldr	r3, [r3, #8]
 8006044:	2b00      	cmp	r3, #0
 8006046:	d016      	beq.n	8006076 <HAL_RCC_OscConfig+0x3ae>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006048:	f7fd f88a 	bl	8003160 <HAL_GetTick>
 800604c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800604e:	e00a      	b.n	8006066 <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006050:	f7fd f886 	bl	8003160 <HAL_GetTick>
 8006054:	4602      	mov	r2, r0
 8006056:	693b      	ldr	r3, [r7, #16]
 8006058:	1ad3      	subs	r3, r2, r3
 800605a:	f241 3288 	movw	r2, #5000	; 0x1388
 800605e:	4293      	cmp	r3, r2
 8006060:	d901      	bls.n	8006066 <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 8006062:	2303      	movs	r3, #3
 8006064:	e142      	b.n	80062ec <HAL_RCC_OscConfig+0x624>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8006066:	4b76      	ldr	r3, [pc, #472]	; (8006240 <HAL_RCC_OscConfig+0x578>)
 8006068:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800606c:	f003 0302 	and.w	r3, r3, #2
 8006070:	2b00      	cmp	r3, #0
 8006072:	d0ed      	beq.n	8006050 <HAL_RCC_OscConfig+0x388>
 8006074:	e015      	b.n	80060a2 <HAL_RCC_OscConfig+0x3da>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006076:	f7fd f873 	bl	8003160 <HAL_GetTick>
 800607a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800607c:	e00a      	b.n	8006094 <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800607e:	f7fd f86f 	bl	8003160 <HAL_GetTick>
 8006082:	4602      	mov	r2, r0
 8006084:	693b      	ldr	r3, [r7, #16]
 8006086:	1ad3      	subs	r3, r2, r3
 8006088:	f241 3288 	movw	r2, #5000	; 0x1388
 800608c:	4293      	cmp	r3, r2
 800608e:	d901      	bls.n	8006094 <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 8006090:	2303      	movs	r3, #3
 8006092:	e12b      	b.n	80062ec <HAL_RCC_OscConfig+0x624>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8006094:	4b6a      	ldr	r3, [pc, #424]	; (8006240 <HAL_RCC_OscConfig+0x578>)
 8006096:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800609a:	f003 0302 	and.w	r3, r3, #2
 800609e:	2b00      	cmp	r3, #0
 80060a0:	d1ed      	bne.n	800607e <HAL_RCC_OscConfig+0x3b6>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 80060a2:	7ffb      	ldrb	r3, [r7, #31]
 80060a4:	2b01      	cmp	r3, #1
 80060a6:	d105      	bne.n	80060b4 <HAL_RCC_OscConfig+0x3ec>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80060a8:	4b65      	ldr	r3, [pc, #404]	; (8006240 <HAL_RCC_OscConfig+0x578>)
 80060aa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80060ac:	4a64      	ldr	r2, [pc, #400]	; (8006240 <HAL_RCC_OscConfig+0x578>)
 80060ae:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80060b2:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 80060b4:	687b      	ldr	r3, [r7, #4]
 80060b6:	681b      	ldr	r3, [r3, #0]
 80060b8:	f003 0320 	and.w	r3, r3, #32
 80060bc:	2b00      	cmp	r3, #0
 80060be:	d03c      	beq.n	800613a <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 80060c0:	687b      	ldr	r3, [r7, #4]
 80060c2:	699b      	ldr	r3, [r3, #24]
 80060c4:	2b00      	cmp	r3, #0
 80060c6:	d01c      	beq.n	8006102 <HAL_RCC_OscConfig+0x43a>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 80060c8:	4b5d      	ldr	r3, [pc, #372]	; (8006240 <HAL_RCC_OscConfig+0x578>)
 80060ca:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80060ce:	4a5c      	ldr	r2, [pc, #368]	; (8006240 <HAL_RCC_OscConfig+0x578>)
 80060d0:	f043 0301 	orr.w	r3, r3, #1
 80060d4:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80060d8:	f7fd f842 	bl	8003160 <HAL_GetTick>
 80060dc:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 80060de:	e008      	b.n	80060f2 <HAL_RCC_OscConfig+0x42a>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80060e0:	f7fd f83e 	bl	8003160 <HAL_GetTick>
 80060e4:	4602      	mov	r2, r0
 80060e6:	693b      	ldr	r3, [r7, #16]
 80060e8:	1ad3      	subs	r3, r2, r3
 80060ea:	2b02      	cmp	r3, #2
 80060ec:	d901      	bls.n	80060f2 <HAL_RCC_OscConfig+0x42a>
        {
          return HAL_TIMEOUT;
 80060ee:	2303      	movs	r3, #3
 80060f0:	e0fc      	b.n	80062ec <HAL_RCC_OscConfig+0x624>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 80060f2:	4b53      	ldr	r3, [pc, #332]	; (8006240 <HAL_RCC_OscConfig+0x578>)
 80060f4:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80060f8:	f003 0302 	and.w	r3, r3, #2
 80060fc:	2b00      	cmp	r3, #0
 80060fe:	d0ef      	beq.n	80060e0 <HAL_RCC_OscConfig+0x418>
 8006100:	e01b      	b.n	800613a <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8006102:	4b4f      	ldr	r3, [pc, #316]	; (8006240 <HAL_RCC_OscConfig+0x578>)
 8006104:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8006108:	4a4d      	ldr	r2, [pc, #308]	; (8006240 <HAL_RCC_OscConfig+0x578>)
 800610a:	f023 0301 	bic.w	r3, r3, #1
 800610e:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006112:	f7fd f825 	bl	8003160 <HAL_GetTick>
 8006116:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8006118:	e008      	b.n	800612c <HAL_RCC_OscConfig+0x464>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800611a:	f7fd f821 	bl	8003160 <HAL_GetTick>
 800611e:	4602      	mov	r2, r0
 8006120:	693b      	ldr	r3, [r7, #16]
 8006122:	1ad3      	subs	r3, r2, r3
 8006124:	2b02      	cmp	r3, #2
 8006126:	d901      	bls.n	800612c <HAL_RCC_OscConfig+0x464>
        {
          return HAL_TIMEOUT;
 8006128:	2303      	movs	r3, #3
 800612a:	e0df      	b.n	80062ec <HAL_RCC_OscConfig+0x624>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 800612c:	4b44      	ldr	r3, [pc, #272]	; (8006240 <HAL_RCC_OscConfig+0x578>)
 800612e:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8006132:	f003 0302 	and.w	r3, r3, #2
 8006136:	2b00      	cmp	r3, #0
 8006138:	d1ef      	bne.n	800611a <HAL_RCC_OscConfig+0x452>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 800613a:	687b      	ldr	r3, [r7, #4]
 800613c:	69db      	ldr	r3, [r3, #28]
 800613e:	2b00      	cmp	r3, #0
 8006140:	f000 80d3 	beq.w	80062ea <HAL_RCC_OscConfig+0x622>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8006144:	4b3e      	ldr	r3, [pc, #248]	; (8006240 <HAL_RCC_OscConfig+0x578>)
 8006146:	689b      	ldr	r3, [r3, #8]
 8006148:	f003 030c 	and.w	r3, r3, #12
 800614c:	2b0c      	cmp	r3, #12
 800614e:	f000 808d 	beq.w	800626c <HAL_RCC_OscConfig+0x5a4>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8006152:	687b      	ldr	r3, [r7, #4]
 8006154:	69db      	ldr	r3, [r3, #28]
 8006156:	2b02      	cmp	r3, #2
 8006158:	d15a      	bne.n	8006210 <HAL_RCC_OscConfig+0x548>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800615a:	4b39      	ldr	r3, [pc, #228]	; (8006240 <HAL_RCC_OscConfig+0x578>)
 800615c:	681b      	ldr	r3, [r3, #0]
 800615e:	4a38      	ldr	r2, [pc, #224]	; (8006240 <HAL_RCC_OscConfig+0x578>)
 8006160:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8006164:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006166:	f7fc fffb 	bl	8003160 <HAL_GetTick>
 800616a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800616c:	e008      	b.n	8006180 <HAL_RCC_OscConfig+0x4b8>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800616e:	f7fc fff7 	bl	8003160 <HAL_GetTick>
 8006172:	4602      	mov	r2, r0
 8006174:	693b      	ldr	r3, [r7, #16]
 8006176:	1ad3      	subs	r3, r2, r3
 8006178:	2b02      	cmp	r3, #2
 800617a:	d901      	bls.n	8006180 <HAL_RCC_OscConfig+0x4b8>
          {
            return HAL_TIMEOUT;
 800617c:	2303      	movs	r3, #3
 800617e:	e0b5      	b.n	80062ec <HAL_RCC_OscConfig+0x624>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8006180:	4b2f      	ldr	r3, [pc, #188]	; (8006240 <HAL_RCC_OscConfig+0x578>)
 8006182:	681b      	ldr	r3, [r3, #0]
 8006184:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006188:	2b00      	cmp	r3, #0
 800618a:	d1f0      	bne.n	800616e <HAL_RCC_OscConfig+0x4a6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800618c:	4b2c      	ldr	r3, [pc, #176]	; (8006240 <HAL_RCC_OscConfig+0x578>)
 800618e:	68da      	ldr	r2, [r3, #12]
 8006190:	4b2d      	ldr	r3, [pc, #180]	; (8006248 <HAL_RCC_OscConfig+0x580>)
 8006192:	4013      	ands	r3, r2
 8006194:	687a      	ldr	r2, [r7, #4]
 8006196:	6a11      	ldr	r1, [r2, #32]
 8006198:	687a      	ldr	r2, [r7, #4]
 800619a:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800619c:	3a01      	subs	r2, #1
 800619e:	0112      	lsls	r2, r2, #4
 80061a0:	4311      	orrs	r1, r2
 80061a2:	687a      	ldr	r2, [r7, #4]
 80061a4:	6a92      	ldr	r2, [r2, #40]	; 0x28
 80061a6:	0212      	lsls	r2, r2, #8
 80061a8:	4311      	orrs	r1, r2
 80061aa:	687a      	ldr	r2, [r7, #4]
 80061ac:	6b12      	ldr	r2, [r2, #48]	; 0x30
 80061ae:	0852      	lsrs	r2, r2, #1
 80061b0:	3a01      	subs	r2, #1
 80061b2:	0552      	lsls	r2, r2, #21
 80061b4:	4311      	orrs	r1, r2
 80061b6:	687a      	ldr	r2, [r7, #4]
 80061b8:	6b52      	ldr	r2, [r2, #52]	; 0x34
 80061ba:	0852      	lsrs	r2, r2, #1
 80061bc:	3a01      	subs	r2, #1
 80061be:	0652      	lsls	r2, r2, #25
 80061c0:	4311      	orrs	r1, r2
 80061c2:	687a      	ldr	r2, [r7, #4]
 80061c4:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 80061c6:	06d2      	lsls	r2, r2, #27
 80061c8:	430a      	orrs	r2, r1
 80061ca:	491d      	ldr	r1, [pc, #116]	; (8006240 <HAL_RCC_OscConfig+0x578>)
 80061cc:	4313      	orrs	r3, r2
 80061ce:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80061d0:	4b1b      	ldr	r3, [pc, #108]	; (8006240 <HAL_RCC_OscConfig+0x578>)
 80061d2:	681b      	ldr	r3, [r3, #0]
 80061d4:	4a1a      	ldr	r2, [pc, #104]	; (8006240 <HAL_RCC_OscConfig+0x578>)
 80061d6:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80061da:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80061dc:	4b18      	ldr	r3, [pc, #96]	; (8006240 <HAL_RCC_OscConfig+0x578>)
 80061de:	68db      	ldr	r3, [r3, #12]
 80061e0:	4a17      	ldr	r2, [pc, #92]	; (8006240 <HAL_RCC_OscConfig+0x578>)
 80061e2:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80061e6:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80061e8:	f7fc ffba 	bl	8003160 <HAL_GetTick>
 80061ec:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80061ee:	e008      	b.n	8006202 <HAL_RCC_OscConfig+0x53a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80061f0:	f7fc ffb6 	bl	8003160 <HAL_GetTick>
 80061f4:	4602      	mov	r2, r0
 80061f6:	693b      	ldr	r3, [r7, #16]
 80061f8:	1ad3      	subs	r3, r2, r3
 80061fa:	2b02      	cmp	r3, #2
 80061fc:	d901      	bls.n	8006202 <HAL_RCC_OscConfig+0x53a>
          {
            return HAL_TIMEOUT;
 80061fe:	2303      	movs	r3, #3
 8006200:	e074      	b.n	80062ec <HAL_RCC_OscConfig+0x624>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8006202:	4b0f      	ldr	r3, [pc, #60]	; (8006240 <HAL_RCC_OscConfig+0x578>)
 8006204:	681b      	ldr	r3, [r3, #0]
 8006206:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800620a:	2b00      	cmp	r3, #0
 800620c:	d0f0      	beq.n	80061f0 <HAL_RCC_OscConfig+0x528>
 800620e:	e06c      	b.n	80062ea <HAL_RCC_OscConfig+0x622>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006210:	4b0b      	ldr	r3, [pc, #44]	; (8006240 <HAL_RCC_OscConfig+0x578>)
 8006212:	681b      	ldr	r3, [r3, #0]
 8006214:	4a0a      	ldr	r2, [pc, #40]	; (8006240 <HAL_RCC_OscConfig+0x578>)
 8006216:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800621a:	6013      	str	r3, [r2, #0]

        /* Disable all PLL outputs to save power if no PLLs on */
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 800621c:	4b08      	ldr	r3, [pc, #32]	; (8006240 <HAL_RCC_OscConfig+0x578>)
 800621e:	68db      	ldr	r3, [r3, #12]
 8006220:	4a07      	ldr	r2, [pc, #28]	; (8006240 <HAL_RCC_OscConfig+0x578>)
 8006222:	f023 0303 	bic.w	r3, r3, #3
 8006226:	60d3      	str	r3, [r2, #12]
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_ADCCLK);
 8006228:	4b05      	ldr	r3, [pc, #20]	; (8006240 <HAL_RCC_OscConfig+0x578>)
 800622a:	68db      	ldr	r3, [r3, #12]
 800622c:	4a04      	ldr	r2, [pc, #16]	; (8006240 <HAL_RCC_OscConfig+0x578>)
 800622e:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 8006232:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006236:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006238:	f7fc ff92 	bl	8003160 <HAL_GetTick>
 800623c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800623e:	e00e      	b.n	800625e <HAL_RCC_OscConfig+0x596>
 8006240:	40021000 	.word	0x40021000
 8006244:	40007000 	.word	0x40007000
 8006248:	019f800c 	.word	0x019f800c
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800624c:	f7fc ff88 	bl	8003160 <HAL_GetTick>
 8006250:	4602      	mov	r2, r0
 8006252:	693b      	ldr	r3, [r7, #16]
 8006254:	1ad3      	subs	r3, r2, r3
 8006256:	2b02      	cmp	r3, #2
 8006258:	d901      	bls.n	800625e <HAL_RCC_OscConfig+0x596>
          {
            return HAL_TIMEOUT;
 800625a:	2303      	movs	r3, #3
 800625c:	e046      	b.n	80062ec <HAL_RCC_OscConfig+0x624>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800625e:	4b25      	ldr	r3, [pc, #148]	; (80062f4 <HAL_RCC_OscConfig+0x62c>)
 8006260:	681b      	ldr	r3, [r3, #0]
 8006262:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006266:	2b00      	cmp	r3, #0
 8006268:	d1f0      	bne.n	800624c <HAL_RCC_OscConfig+0x584>
 800626a:	e03e      	b.n	80062ea <HAL_RCC_OscConfig+0x622>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800626c:	687b      	ldr	r3, [r7, #4]
 800626e:	69db      	ldr	r3, [r3, #28]
 8006270:	2b01      	cmp	r3, #1
 8006272:	d101      	bne.n	8006278 <HAL_RCC_OscConfig+0x5b0>
      {
        return HAL_ERROR;
 8006274:	2301      	movs	r3, #1
 8006276:	e039      	b.n	80062ec <HAL_RCC_OscConfig+0x624>
      }
      else
      {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp_pllckcfg = RCC->PLLCFGR;
 8006278:	4b1e      	ldr	r3, [pc, #120]	; (80062f4 <HAL_RCC_OscConfig+0x62c>)
 800627a:	68db      	ldr	r3, [r3, #12]
 800627c:	617b      	str	r3, [r7, #20]
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800627e:	697b      	ldr	r3, [r7, #20]
 8006280:	f003 0203 	and.w	r2, r3, #3
 8006284:	687b      	ldr	r3, [r7, #4]
 8006286:	6a1b      	ldr	r3, [r3, #32]
 8006288:	429a      	cmp	r2, r3
 800628a:	d12c      	bne.n	80062e6 <HAL_RCC_OscConfig+0x61e>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800628c:	697b      	ldr	r3, [r7, #20]
 800628e:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8006292:	687b      	ldr	r3, [r7, #4]
 8006294:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006296:	3b01      	subs	r3, #1
 8006298:	011b      	lsls	r3, r3, #4
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800629a:	429a      	cmp	r2, r3
 800629c:	d123      	bne.n	80062e6 <HAL_RCC_OscConfig+0x61e>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 800629e:	697b      	ldr	r3, [r7, #20]
 80062a0:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 80062a4:	687b      	ldr	r3, [r7, #4]
 80062a6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80062a8:	021b      	lsls	r3, r3, #8
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80062aa:	429a      	cmp	r2, r3
 80062ac:	d11b      	bne.n	80062e6 <HAL_RCC_OscConfig+0x61e>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 80062ae:	697b      	ldr	r3, [r7, #20]
 80062b0:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 80062b4:	687b      	ldr	r3, [r7, #4]
 80062b6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80062b8:	06db      	lsls	r3, r3, #27
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 80062ba:	429a      	cmp	r2, r3
 80062bc:	d113      	bne.n	80062e6 <HAL_RCC_OscConfig+0x61e>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80062be:	697b      	ldr	r3, [r7, #20]
 80062c0:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 80062c4:	687b      	ldr	r3, [r7, #4]
 80062c6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80062c8:	085b      	lsrs	r3, r3, #1
 80062ca:	3b01      	subs	r3, #1
 80062cc:	055b      	lsls	r3, r3, #21
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 80062ce:	429a      	cmp	r2, r3
 80062d0:	d109      	bne.n	80062e6 <HAL_RCC_OscConfig+0x61e>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 80062d2:	697b      	ldr	r3, [r7, #20]
 80062d4:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 80062d8:	687b      	ldr	r3, [r7, #4]
 80062da:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80062dc:	085b      	lsrs	r3, r3, #1
 80062de:	3b01      	subs	r3, #1
 80062e0:	065b      	lsls	r3, r3, #25
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80062e2:	429a      	cmp	r2, r3
 80062e4:	d001      	beq.n	80062ea <HAL_RCC_OscConfig+0x622>
      {
        return HAL_ERROR;
 80062e6:	2301      	movs	r3, #1
 80062e8:	e000      	b.n	80062ec <HAL_RCC_OscConfig+0x624>
      }
    }
  }
  }

  return HAL_OK;
 80062ea:	2300      	movs	r3, #0
}
 80062ec:	4618      	mov	r0, r3
 80062ee:	3720      	adds	r7, #32
 80062f0:	46bd      	mov	sp, r7
 80062f2:	bd80      	pop	{r7, pc}
 80062f4:	40021000 	.word	0x40021000

080062f8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80062f8:	b580      	push	{r7, lr}
 80062fa:	b086      	sub	sp, #24
 80062fc:	af00      	add	r7, sp, #0
 80062fe:	6078      	str	r0, [r7, #4]
 8006300:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t pllfreq;
  uint32_t hpre = RCC_SYSCLK_DIV1;
 8006302:	2300      	movs	r3, #0
 8006304:	617b      	str	r3, [r7, #20]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8006306:	687b      	ldr	r3, [r7, #4]
 8006308:	2b00      	cmp	r3, #0
 800630a:	d101      	bne.n	8006310 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 800630c:	2301      	movs	r3, #1
 800630e:	e11e      	b.n	800654e <HAL_RCC_ClockConfig+0x256>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8006310:	4b91      	ldr	r3, [pc, #580]	; (8006558 <HAL_RCC_ClockConfig+0x260>)
 8006312:	681b      	ldr	r3, [r3, #0]
 8006314:	f003 030f 	and.w	r3, r3, #15
 8006318:	683a      	ldr	r2, [r7, #0]
 800631a:	429a      	cmp	r2, r3
 800631c:	d910      	bls.n	8006340 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800631e:	4b8e      	ldr	r3, [pc, #568]	; (8006558 <HAL_RCC_ClockConfig+0x260>)
 8006320:	681b      	ldr	r3, [r3, #0]
 8006322:	f023 020f 	bic.w	r2, r3, #15
 8006326:	498c      	ldr	r1, [pc, #560]	; (8006558 <HAL_RCC_ClockConfig+0x260>)
 8006328:	683b      	ldr	r3, [r7, #0]
 800632a:	4313      	orrs	r3, r2
 800632c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800632e:	4b8a      	ldr	r3, [pc, #552]	; (8006558 <HAL_RCC_ClockConfig+0x260>)
 8006330:	681b      	ldr	r3, [r3, #0]
 8006332:	f003 030f 	and.w	r3, r3, #15
 8006336:	683a      	ldr	r2, [r7, #0]
 8006338:	429a      	cmp	r2, r3
 800633a:	d001      	beq.n	8006340 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 800633c:	2301      	movs	r3, #1
 800633e:	e106      	b.n	800654e <HAL_RCC_ClockConfig+0x256>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8006340:	687b      	ldr	r3, [r7, #4]
 8006342:	681b      	ldr	r3, [r3, #0]
 8006344:	f003 0301 	and.w	r3, r3, #1
 8006348:	2b00      	cmp	r3, #0
 800634a:	d073      	beq.n	8006434 <HAL_RCC_ClockConfig+0x13c>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800634c:	687b      	ldr	r3, [r7, #4]
 800634e:	685b      	ldr	r3, [r3, #4]
 8006350:	2b03      	cmp	r3, #3
 8006352:	d129      	bne.n	80063a8 <HAL_RCC_ClockConfig+0xb0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8006354:	4b81      	ldr	r3, [pc, #516]	; (800655c <HAL_RCC_ClockConfig+0x264>)
 8006356:	681b      	ldr	r3, [r3, #0]
 8006358:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800635c:	2b00      	cmp	r3, #0
 800635e:	d101      	bne.n	8006364 <HAL_RCC_ClockConfig+0x6c>
      {
        return HAL_ERROR;
 8006360:	2301      	movs	r3, #1
 8006362:	e0f4      	b.n	800654e <HAL_RCC_ClockConfig+0x256>
      }
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      pllfreq = RCC_GetSysClockFreqFromPLLSource();
 8006364:	f000 f972 	bl	800664c <RCC_GetSysClockFreqFromPLLSource>
 8006368:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
      if(pllfreq > 80000000U)
 800636a:	693b      	ldr	r3, [r7, #16]
 800636c:	4a7c      	ldr	r2, [pc, #496]	; (8006560 <HAL_RCC_ClockConfig+0x268>)
 800636e:	4293      	cmp	r3, r2
 8006370:	d93f      	bls.n	80063f2 <HAL_RCC_ClockConfig+0xfa>
      {
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8006372:	4b7a      	ldr	r3, [pc, #488]	; (800655c <HAL_RCC_ClockConfig+0x264>)
 8006374:	689b      	ldr	r3, [r3, #8]
 8006376:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800637a:	2b00      	cmp	r3, #0
 800637c:	d009      	beq.n	8006392 <HAL_RCC_ClockConfig+0x9a>
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 800637e:	687b      	ldr	r3, [r7, #4]
 8006380:	681b      	ldr	r3, [r3, #0]
 8006382:	f003 0302 	and.w	r3, r3, #2
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8006386:	2b00      	cmp	r3, #0
 8006388:	d033      	beq.n	80063f2 <HAL_RCC_ClockConfig+0xfa>
              (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))))
 800638a:	687b      	ldr	r3, [r7, #4]
 800638c:	689b      	ldr	r3, [r3, #8]
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 800638e:	2b00      	cmp	r3, #0
 8006390:	d12f      	bne.n	80063f2 <HAL_RCC_ClockConfig+0xfa>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8006392:	4b72      	ldr	r3, [pc, #456]	; (800655c <HAL_RCC_ClockConfig+0x264>)
 8006394:	689b      	ldr	r3, [r3, #8]
 8006396:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800639a:	4a70      	ldr	r2, [pc, #448]	; (800655c <HAL_RCC_ClockConfig+0x264>)
 800639c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80063a0:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 80063a2:	2380      	movs	r3, #128	; 0x80
 80063a4:	617b      	str	r3, [r7, #20]
 80063a6:	e024      	b.n	80063f2 <HAL_RCC_ClockConfig+0xfa>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80063a8:	687b      	ldr	r3, [r7, #4]
 80063aa:	685b      	ldr	r3, [r3, #4]
 80063ac:	2b02      	cmp	r3, #2
 80063ae:	d107      	bne.n	80063c0 <HAL_RCC_ClockConfig+0xc8>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80063b0:	4b6a      	ldr	r3, [pc, #424]	; (800655c <HAL_RCC_ClockConfig+0x264>)
 80063b2:	681b      	ldr	r3, [r3, #0]
 80063b4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80063b8:	2b00      	cmp	r3, #0
 80063ba:	d109      	bne.n	80063d0 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 80063bc:	2301      	movs	r3, #1
 80063be:	e0c6      	b.n	800654e <HAL_RCC_ClockConfig+0x256>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80063c0:	4b66      	ldr	r3, [pc, #408]	; (800655c <HAL_RCC_ClockConfig+0x264>)
 80063c2:	681b      	ldr	r3, [r3, #0]
 80063c4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80063c8:	2b00      	cmp	r3, #0
 80063ca:	d101      	bne.n	80063d0 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 80063cc:	2301      	movs	r3, #1
 80063ce:	e0be      	b.n	800654e <HAL_RCC_ClockConfig+0x256>
        }
      }
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      pllfreq = HAL_RCC_GetSysClockFreq();
 80063d0:	f000 f8ce 	bl	8006570 <HAL_RCC_GetSysClockFreq>
 80063d4:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
      if(pllfreq > 80000000U)
 80063d6:	693b      	ldr	r3, [r7, #16]
 80063d8:	4a61      	ldr	r2, [pc, #388]	; (8006560 <HAL_RCC_ClockConfig+0x268>)
 80063da:	4293      	cmp	r3, r2
 80063dc:	d909      	bls.n	80063f2 <HAL_RCC_ClockConfig+0xfa>
      {
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 80063de:	4b5f      	ldr	r3, [pc, #380]	; (800655c <HAL_RCC_ClockConfig+0x264>)
 80063e0:	689b      	ldr	r3, [r3, #8]
 80063e2:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80063e6:	4a5d      	ldr	r2, [pc, #372]	; (800655c <HAL_RCC_ClockConfig+0x264>)
 80063e8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80063ec:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 80063ee:	2380      	movs	r3, #128	; 0x80
 80063f0:	617b      	str	r3, [r7, #20]
      }

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80063f2:	4b5a      	ldr	r3, [pc, #360]	; (800655c <HAL_RCC_ClockConfig+0x264>)
 80063f4:	689b      	ldr	r3, [r3, #8]
 80063f6:	f023 0203 	bic.w	r2, r3, #3
 80063fa:	687b      	ldr	r3, [r7, #4]
 80063fc:	685b      	ldr	r3, [r3, #4]
 80063fe:	4957      	ldr	r1, [pc, #348]	; (800655c <HAL_RCC_ClockConfig+0x264>)
 8006400:	4313      	orrs	r3, r2
 8006402:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8006404:	f7fc feac 	bl	8003160 <HAL_GetTick>
 8006408:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800640a:	e00a      	b.n	8006422 <HAL_RCC_ClockConfig+0x12a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800640c:	f7fc fea8 	bl	8003160 <HAL_GetTick>
 8006410:	4602      	mov	r2, r0
 8006412:	68fb      	ldr	r3, [r7, #12]
 8006414:	1ad3      	subs	r3, r2, r3
 8006416:	f241 3288 	movw	r2, #5000	; 0x1388
 800641a:	4293      	cmp	r3, r2
 800641c:	d901      	bls.n	8006422 <HAL_RCC_ClockConfig+0x12a>
      {
        return HAL_TIMEOUT;
 800641e:	2303      	movs	r3, #3
 8006420:	e095      	b.n	800654e <HAL_RCC_ClockConfig+0x256>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006422:	4b4e      	ldr	r3, [pc, #312]	; (800655c <HAL_RCC_ClockConfig+0x264>)
 8006424:	689b      	ldr	r3, [r3, #8]
 8006426:	f003 020c 	and.w	r2, r3, #12
 800642a:	687b      	ldr	r3, [r7, #4]
 800642c:	685b      	ldr	r3, [r3, #4]
 800642e:	009b      	lsls	r3, r3, #2
 8006430:	429a      	cmp	r2, r3
 8006432:	d1eb      	bne.n	800640c <HAL_RCC_ClockConfig+0x114>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8006434:	687b      	ldr	r3, [r7, #4]
 8006436:	681b      	ldr	r3, [r3, #0]
 8006438:	f003 0302 	and.w	r3, r3, #2
 800643c:	2b00      	cmp	r3, #0
 800643e:	d023      	beq.n	8006488 <HAL_RCC_ClockConfig+0x190>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006440:	687b      	ldr	r3, [r7, #4]
 8006442:	681b      	ldr	r3, [r3, #0]
 8006444:	f003 0304 	and.w	r3, r3, #4
 8006448:	2b00      	cmp	r3, #0
 800644a:	d005      	beq.n	8006458 <HAL_RCC_ClockConfig+0x160>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800644c:	4b43      	ldr	r3, [pc, #268]	; (800655c <HAL_RCC_ClockConfig+0x264>)
 800644e:	689b      	ldr	r3, [r3, #8]
 8006450:	4a42      	ldr	r2, [pc, #264]	; (800655c <HAL_RCC_ClockConfig+0x264>)
 8006452:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8006456:	6093      	str	r3, [r2, #8]
    }
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006458:	687b      	ldr	r3, [r7, #4]
 800645a:	681b      	ldr	r3, [r3, #0]
 800645c:	f003 0308 	and.w	r3, r3, #8
 8006460:	2b00      	cmp	r3, #0
 8006462:	d007      	beq.n	8006474 <HAL_RCC_ClockConfig+0x17c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, RCC_HCLK_DIV16);
 8006464:	4b3d      	ldr	r3, [pc, #244]	; (800655c <HAL_RCC_ClockConfig+0x264>)
 8006466:	689b      	ldr	r3, [r3, #8]
 8006468:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 800646c:	4a3b      	ldr	r2, [pc, #236]	; (800655c <HAL_RCC_ClockConfig+0x264>)
 800646e:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8006472:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8006474:	4b39      	ldr	r3, [pc, #228]	; (800655c <HAL_RCC_ClockConfig+0x264>)
 8006476:	689b      	ldr	r3, [r3, #8]
 8006478:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800647c:	687b      	ldr	r3, [r7, #4]
 800647e:	689b      	ldr	r3, [r3, #8]
 8006480:	4936      	ldr	r1, [pc, #216]	; (800655c <HAL_RCC_ClockConfig+0x264>)
 8006482:	4313      	orrs	r3, r2
 8006484:	608b      	str	r3, [r1, #8]
 8006486:	e008      	b.n	800649a <HAL_RCC_ClockConfig+0x1a2>
  }
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if(hpre == RCC_SYSCLK_DIV2)
 8006488:	697b      	ldr	r3, [r7, #20]
 800648a:	2b80      	cmp	r3, #128	; 0x80
 800648c:	d105      	bne.n	800649a <HAL_RCC_ClockConfig+0x1a2>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 800648e:	4b33      	ldr	r3, [pc, #204]	; (800655c <HAL_RCC_ClockConfig+0x264>)
 8006490:	689b      	ldr	r3, [r3, #8]
 8006492:	4a32      	ldr	r2, [pc, #200]	; (800655c <HAL_RCC_ClockConfig+0x264>)
 8006494:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8006498:	6093      	str	r3, [r2, #8]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800649a:	4b2f      	ldr	r3, [pc, #188]	; (8006558 <HAL_RCC_ClockConfig+0x260>)
 800649c:	681b      	ldr	r3, [r3, #0]
 800649e:	f003 030f 	and.w	r3, r3, #15
 80064a2:	683a      	ldr	r2, [r7, #0]
 80064a4:	429a      	cmp	r2, r3
 80064a6:	d21d      	bcs.n	80064e4 <HAL_RCC_ClockConfig+0x1ec>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80064a8:	4b2b      	ldr	r3, [pc, #172]	; (8006558 <HAL_RCC_ClockConfig+0x260>)
 80064aa:	681b      	ldr	r3, [r3, #0]
 80064ac:	f023 020f 	bic.w	r2, r3, #15
 80064b0:	4929      	ldr	r1, [pc, #164]	; (8006558 <HAL_RCC_ClockConfig+0x260>)
 80064b2:	683b      	ldr	r3, [r7, #0]
 80064b4:	4313      	orrs	r3, r2
 80064b6:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 80064b8:	f7fc fe52 	bl	8003160 <HAL_GetTick>
 80064bc:	60f8      	str	r0, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80064be:	e00a      	b.n	80064d6 <HAL_RCC_ClockConfig+0x1de>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80064c0:	f7fc fe4e 	bl	8003160 <HAL_GetTick>
 80064c4:	4602      	mov	r2, r0
 80064c6:	68fb      	ldr	r3, [r7, #12]
 80064c8:	1ad3      	subs	r3, r2, r3
 80064ca:	f241 3288 	movw	r2, #5000	; 0x1388
 80064ce:	4293      	cmp	r3, r2
 80064d0:	d901      	bls.n	80064d6 <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_TIMEOUT;
 80064d2:	2303      	movs	r3, #3
 80064d4:	e03b      	b.n	800654e <HAL_RCC_ClockConfig+0x256>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80064d6:	4b20      	ldr	r3, [pc, #128]	; (8006558 <HAL_RCC_ClockConfig+0x260>)
 80064d8:	681b      	ldr	r3, [r3, #0]
 80064da:	f003 030f 	and.w	r3, r3, #15
 80064de:	683a      	ldr	r2, [r7, #0]
 80064e0:	429a      	cmp	r2, r3
 80064e2:	d1ed      	bne.n	80064c0 <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80064e4:	687b      	ldr	r3, [r7, #4]
 80064e6:	681b      	ldr	r3, [r3, #0]
 80064e8:	f003 0304 	and.w	r3, r3, #4
 80064ec:	2b00      	cmp	r3, #0
 80064ee:	d008      	beq.n	8006502 <HAL_RCC_ClockConfig+0x20a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80064f0:	4b1a      	ldr	r3, [pc, #104]	; (800655c <HAL_RCC_ClockConfig+0x264>)
 80064f2:	689b      	ldr	r3, [r3, #8]
 80064f4:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80064f8:	687b      	ldr	r3, [r7, #4]
 80064fa:	68db      	ldr	r3, [r3, #12]
 80064fc:	4917      	ldr	r1, [pc, #92]	; (800655c <HAL_RCC_ClockConfig+0x264>)
 80064fe:	4313      	orrs	r3, r2
 8006500:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006502:	687b      	ldr	r3, [r7, #4]
 8006504:	681b      	ldr	r3, [r3, #0]
 8006506:	f003 0308 	and.w	r3, r3, #8
 800650a:	2b00      	cmp	r3, #0
 800650c:	d009      	beq.n	8006522 <HAL_RCC_ClockConfig+0x22a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800650e:	4b13      	ldr	r3, [pc, #76]	; (800655c <HAL_RCC_ClockConfig+0x264>)
 8006510:	689b      	ldr	r3, [r3, #8]
 8006512:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8006516:	687b      	ldr	r3, [r7, #4]
 8006518:	691b      	ldr	r3, [r3, #16]
 800651a:	00db      	lsls	r3, r3, #3
 800651c:	490f      	ldr	r1, [pc, #60]	; (800655c <HAL_RCC_ClockConfig+0x264>)
 800651e:	4313      	orrs	r3, r2
 8006520:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8006522:	f000 f825 	bl	8006570 <HAL_RCC_GetSysClockFreq>
 8006526:	4601      	mov	r1, r0
 8006528:	4b0c      	ldr	r3, [pc, #48]	; (800655c <HAL_RCC_ClockConfig+0x264>)
 800652a:	689b      	ldr	r3, [r3, #8]
 800652c:	091b      	lsrs	r3, r3, #4
 800652e:	f003 030f 	and.w	r3, r3, #15
 8006532:	4a0c      	ldr	r2, [pc, #48]	; (8006564 <HAL_RCC_ClockConfig+0x26c>)
 8006534:	5cd3      	ldrb	r3, [r2, r3]
 8006536:	f003 031f 	and.w	r3, r3, #31
 800653a:	fa21 f303 	lsr.w	r3, r1, r3
 800653e:	4a0a      	ldr	r2, [pc, #40]	; (8006568 <HAL_RCC_ClockConfig+0x270>)
 8006540:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 8006542:	4b0a      	ldr	r3, [pc, #40]	; (800656c <HAL_RCC_ClockConfig+0x274>)
 8006544:	681b      	ldr	r3, [r3, #0]
 8006546:	4618      	mov	r0, r3
 8006548:	f7fc fdbe 	bl	80030c8 <HAL_InitTick>
 800654c:	4603      	mov	r3, r0
}
 800654e:	4618      	mov	r0, r3
 8006550:	3718      	adds	r7, #24
 8006552:	46bd      	mov	sp, r7
 8006554:	bd80      	pop	{r7, pc}
 8006556:	bf00      	nop
 8006558:	40022000 	.word	0x40022000
 800655c:	40021000 	.word	0x40021000
 8006560:	04c4b400 	.word	0x04c4b400
 8006564:	0800aa48 	.word	0x0800aa48
 8006568:	20000010 	.word	0x20000010
 800656c:	20000014 	.word	0x20000014

08006570 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8006570:	b480      	push	{r7}
 8006572:	b087      	sub	sp, #28
 8006574:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 8006576:	4b2c      	ldr	r3, [pc, #176]	; (8006628 <HAL_RCC_GetSysClockFreq+0xb8>)
 8006578:	689b      	ldr	r3, [r3, #8]
 800657a:	f003 030c 	and.w	r3, r3, #12
 800657e:	2b04      	cmp	r3, #4
 8006580:	d102      	bne.n	8006588 <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8006582:	4b2a      	ldr	r3, [pc, #168]	; (800662c <HAL_RCC_GetSysClockFreq+0xbc>)
 8006584:	613b      	str	r3, [r7, #16]
 8006586:	e047      	b.n	8006618 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 8006588:	4b27      	ldr	r3, [pc, #156]	; (8006628 <HAL_RCC_GetSysClockFreq+0xb8>)
 800658a:	689b      	ldr	r3, [r3, #8]
 800658c:	f003 030c 	and.w	r3, r3, #12
 8006590:	2b08      	cmp	r3, #8
 8006592:	d102      	bne.n	800659a <HAL_RCC_GetSysClockFreq+0x2a>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8006594:	4b26      	ldr	r3, [pc, #152]	; (8006630 <HAL_RCC_GetSysClockFreq+0xc0>)
 8006596:	613b      	str	r3, [r7, #16]
 8006598:	e03e      	b.n	8006618 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 800659a:	4b23      	ldr	r3, [pc, #140]	; (8006628 <HAL_RCC_GetSysClockFreq+0xb8>)
 800659c:	689b      	ldr	r3, [r3, #8]
 800659e:	f003 030c 	and.w	r3, r3, #12
 80065a2:	2b0c      	cmp	r3, #12
 80065a4:	d136      	bne.n	8006614 <HAL_RCC_GetSysClockFreq+0xa4>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 80065a6:	4b20      	ldr	r3, [pc, #128]	; (8006628 <HAL_RCC_GetSysClockFreq+0xb8>)
 80065a8:	68db      	ldr	r3, [r3, #12]
 80065aa:	f003 0303 	and.w	r3, r3, #3
 80065ae:	60fb      	str	r3, [r7, #12]
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80065b0:	4b1d      	ldr	r3, [pc, #116]	; (8006628 <HAL_RCC_GetSysClockFreq+0xb8>)
 80065b2:	68db      	ldr	r3, [r3, #12]
 80065b4:	091b      	lsrs	r3, r3, #4
 80065b6:	f003 030f 	and.w	r3, r3, #15
 80065ba:	3301      	adds	r3, #1
 80065bc:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 80065be:	68fb      	ldr	r3, [r7, #12]
 80065c0:	2b03      	cmp	r3, #3
 80065c2:	d10c      	bne.n	80065de <HAL_RCC_GetSysClockFreq+0x6e>
    {
    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80065c4:	4a1a      	ldr	r2, [pc, #104]	; (8006630 <HAL_RCC_GetSysClockFreq+0xc0>)
 80065c6:	68bb      	ldr	r3, [r7, #8]
 80065c8:	fbb2 f3f3 	udiv	r3, r2, r3
 80065cc:	4a16      	ldr	r2, [pc, #88]	; (8006628 <HAL_RCC_GetSysClockFreq+0xb8>)
 80065ce:	68d2      	ldr	r2, [r2, #12]
 80065d0:	0a12      	lsrs	r2, r2, #8
 80065d2:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 80065d6:	fb02 f303 	mul.w	r3, r2, r3
 80065da:	617b      	str	r3, [r7, #20]
      break;
 80065dc:	e00c      	b.n	80065f8 <HAL_RCC_GetSysClockFreq+0x88>

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    default:
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80065de:	4a13      	ldr	r2, [pc, #76]	; (800662c <HAL_RCC_GetSysClockFreq+0xbc>)
 80065e0:	68bb      	ldr	r3, [r7, #8]
 80065e2:	fbb2 f3f3 	udiv	r3, r2, r3
 80065e6:	4a10      	ldr	r2, [pc, #64]	; (8006628 <HAL_RCC_GetSysClockFreq+0xb8>)
 80065e8:	68d2      	ldr	r2, [r2, #12]
 80065ea:	0a12      	lsrs	r2, r2, #8
 80065ec:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 80065f0:	fb02 f303 	mul.w	r3, r2, r3
 80065f4:	617b      	str	r3, [r7, #20]
      break;
 80065f6:	bf00      	nop
    }
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 80065f8:	4b0b      	ldr	r3, [pc, #44]	; (8006628 <HAL_RCC_GetSysClockFreq+0xb8>)
 80065fa:	68db      	ldr	r3, [r3, #12]
 80065fc:	0e5b      	lsrs	r3, r3, #25
 80065fe:	f003 0303 	and.w	r3, r3, #3
 8006602:	3301      	adds	r3, #1
 8006604:	005b      	lsls	r3, r3, #1
 8006606:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco/pllr;
 8006608:	697a      	ldr	r2, [r7, #20]
 800660a:	687b      	ldr	r3, [r7, #4]
 800660c:	fbb2 f3f3 	udiv	r3, r2, r3
 8006610:	613b      	str	r3, [r7, #16]
 8006612:	e001      	b.n	8006618 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else
  {
    sysclockfreq = 0U;
 8006614:	2300      	movs	r3, #0
 8006616:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 8006618:	693b      	ldr	r3, [r7, #16]
}
 800661a:	4618      	mov	r0, r3
 800661c:	371c      	adds	r7, #28
 800661e:	46bd      	mov	sp, r7
 8006620:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006624:	4770      	bx	lr
 8006626:	bf00      	nop
 8006628:	40021000 	.word	0x40021000
 800662c:	00f42400 	.word	0x00f42400
 8006630:	007a1200 	.word	0x007a1200

08006634 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8006634:	b480      	push	{r7}
 8006636:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8006638:	4b03      	ldr	r3, [pc, #12]	; (8006648 <HAL_RCC_GetHCLKFreq+0x14>)
 800663a:	681b      	ldr	r3, [r3, #0]
}
 800663c:	4618      	mov	r0, r3
 800663e:	46bd      	mov	sp, r7
 8006640:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006644:	4770      	bx	lr
 8006646:	bf00      	nop
 8006648:	20000010 	.word	0x20000010

0800664c <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 800664c:	b480      	push	{r7}
 800664e:	b087      	sub	sp, #28
 8006650:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8006652:	4b1e      	ldr	r3, [pc, #120]	; (80066cc <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8006654:	68db      	ldr	r3, [r3, #12]
 8006656:	f003 0303 	and.w	r3, r3, #3
 800665a:	613b      	str	r3, [r7, #16]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 800665c:	4b1b      	ldr	r3, [pc, #108]	; (80066cc <RCC_GetSysClockFreqFromPLLSource+0x80>)
 800665e:	68db      	ldr	r3, [r3, #12]
 8006660:	091b      	lsrs	r3, r3, #4
 8006662:	f003 030f 	and.w	r3, r3, #15
 8006666:	3301      	adds	r3, #1
 8006668:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 800666a:	693b      	ldr	r3, [r7, #16]
 800666c:	2b03      	cmp	r3, #3
 800666e:	d10c      	bne.n	800668a <RCC_GetSysClockFreqFromPLLSource+0x3e>
  {
  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8006670:	4a17      	ldr	r2, [pc, #92]	; (80066d0 <RCC_GetSysClockFreqFromPLLSource+0x84>)
 8006672:	68fb      	ldr	r3, [r7, #12]
 8006674:	fbb2 f3f3 	udiv	r3, r2, r3
 8006678:	4a14      	ldr	r2, [pc, #80]	; (80066cc <RCC_GetSysClockFreqFromPLLSource+0x80>)
 800667a:	68d2      	ldr	r2, [r2, #12]
 800667c:	0a12      	lsrs	r2, r2, #8
 800667e:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8006682:	fb02 f303 	mul.w	r3, r2, r3
 8006686:	617b      	str	r3, [r7, #20]
    break;
 8006688:	e00c      	b.n	80066a4 <RCC_GetSysClockFreqFromPLLSource+0x58>

  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
  default:
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 800668a:	4a12      	ldr	r2, [pc, #72]	; (80066d4 <RCC_GetSysClockFreqFromPLLSource+0x88>)
 800668c:	68fb      	ldr	r3, [r7, #12]
 800668e:	fbb2 f3f3 	udiv	r3, r2, r3
 8006692:	4a0e      	ldr	r2, [pc, #56]	; (80066cc <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8006694:	68d2      	ldr	r2, [r2, #12]
 8006696:	0a12      	lsrs	r2, r2, #8
 8006698:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 800669c:	fb02 f303 	mul.w	r3, r2, r3
 80066a0:	617b      	str	r3, [r7, #20]
    break;
 80066a2:	bf00      	nop
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 80066a4:	4b09      	ldr	r3, [pc, #36]	; (80066cc <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80066a6:	68db      	ldr	r3, [r3, #12]
 80066a8:	0e5b      	lsrs	r3, r3, #25
 80066aa:	f003 0303 	and.w	r3, r3, #3
 80066ae:	3301      	adds	r3, #1
 80066b0:	005b      	lsls	r3, r3, #1
 80066b2:	60bb      	str	r3, [r7, #8]
  sysclockfreq = pllvco/pllr;
 80066b4:	697a      	ldr	r2, [r7, #20]
 80066b6:	68bb      	ldr	r3, [r7, #8]
 80066b8:	fbb2 f3f3 	udiv	r3, r2, r3
 80066bc:	607b      	str	r3, [r7, #4]

  return sysclockfreq;
 80066be:	687b      	ldr	r3, [r7, #4]
}
 80066c0:	4618      	mov	r0, r3
 80066c2:	371c      	adds	r7, #28
 80066c4:	46bd      	mov	sp, r7
 80066c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066ca:	4770      	bx	lr
 80066cc:	40021000 	.word	0x40021000
 80066d0:	007a1200 	.word	0x007a1200
 80066d4:	00f42400 	.word	0x00f42400

080066d8 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80066d8:	b580      	push	{r7, lr}
 80066da:	b086      	sub	sp, #24
 80066dc:	af00      	add	r7, sp, #0
 80066de:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 80066e0:	2300      	movs	r3, #0
 80066e2:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 80066e4:	2300      	movs	r3, #0
 80066e6:	74bb      	strb	r3, [r7, #18]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80066e8:	687b      	ldr	r3, [r7, #4]
 80066ea:	681b      	ldr	r3, [r3, #0]
 80066ec:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80066f0:	2b00      	cmp	r3, #0
 80066f2:	f000 8098 	beq.w	8006826 <HAL_RCCEx_PeriphCLKConfig+0x14e>
  {
    FlagStatus       pwrclkchanged = RESET;
 80066f6:	2300      	movs	r3, #0
 80066f8:	747b      	strb	r3, [r7, #17]
    
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80066fa:	4b43      	ldr	r3, [pc, #268]	; (8006808 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80066fc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80066fe:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006702:	2b00      	cmp	r3, #0
 8006704:	d10d      	bne.n	8006722 <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8006706:	4b40      	ldr	r3, [pc, #256]	; (8006808 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8006708:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800670a:	4a3f      	ldr	r2, [pc, #252]	; (8006808 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800670c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006710:	6593      	str	r3, [r2, #88]	; 0x58
 8006712:	4b3d      	ldr	r3, [pc, #244]	; (8006808 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8006714:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006716:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800671a:	60bb      	str	r3, [r7, #8]
 800671c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800671e:	2301      	movs	r3, #1
 8006720:	747b      	strb	r3, [r7, #17]
    }
      
    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8006722:	4b3a      	ldr	r3, [pc, #232]	; (800680c <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8006724:	681b      	ldr	r3, [r3, #0]
 8006726:	4a39      	ldr	r2, [pc, #228]	; (800680c <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8006728:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800672c:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800672e:	f7fc fd17 	bl	8003160 <HAL_GetTick>
 8006732:	60f8      	str	r0, [r7, #12]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8006734:	e009      	b.n	800674a <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8006736:	f7fc fd13 	bl	8003160 <HAL_GetTick>
 800673a:	4602      	mov	r2, r0
 800673c:	68fb      	ldr	r3, [r7, #12]
 800673e:	1ad3      	subs	r3, r2, r3
 8006740:	2b02      	cmp	r3, #2
 8006742:	d902      	bls.n	800674a <HAL_RCCEx_PeriphCLKConfig+0x72>
      {
        ret = HAL_TIMEOUT;
 8006744:	2303      	movs	r3, #3
 8006746:	74fb      	strb	r3, [r7, #19]
        break;
 8006748:	e005      	b.n	8006756 <HAL_RCCEx_PeriphCLKConfig+0x7e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800674a:	4b30      	ldr	r3, [pc, #192]	; (800680c <HAL_RCCEx_PeriphCLKConfig+0x134>)
 800674c:	681b      	ldr	r3, [r3, #0]
 800674e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006752:	2b00      	cmp	r3, #0
 8006754:	d0ef      	beq.n	8006736 <HAL_RCCEx_PeriphCLKConfig+0x5e>
      }
    }

    if(ret == HAL_OK)
 8006756:	7cfb      	ldrb	r3, [r7, #19]
 8006758:	2b00      	cmp	r3, #0
 800675a:	d159      	bne.n	8006810 <HAL_RCCEx_PeriphCLKConfig+0x138>
    { 
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 800675c:	4b2a      	ldr	r3, [pc, #168]	; (8006808 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800675e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006762:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006766:	617b      	str	r3, [r7, #20]
      
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8006768:	697b      	ldr	r3, [r7, #20]
 800676a:	2b00      	cmp	r3, #0
 800676c:	d01e      	beq.n	80067ac <HAL_RCCEx_PeriphCLKConfig+0xd4>
 800676e:	687b      	ldr	r3, [r7, #4]
 8006770:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006772:	697a      	ldr	r2, [r7, #20]
 8006774:	429a      	cmp	r2, r3
 8006776:	d019      	beq.n	80067ac <HAL_RCCEx_PeriphCLKConfig+0xd4>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8006778:	4b23      	ldr	r3, [pc, #140]	; (8006808 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800677a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800677e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006782:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8006784:	4b20      	ldr	r3, [pc, #128]	; (8006808 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8006786:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800678a:	4a1f      	ldr	r2, [pc, #124]	; (8006808 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800678c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006790:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8006794:	4b1c      	ldr	r3, [pc, #112]	; (8006808 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8006796:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800679a:	4a1b      	ldr	r2, [pc, #108]	; (8006808 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800679c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80067a0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 80067a4:	4a18      	ldr	r2, [pc, #96]	; (8006808 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80067a6:	697b      	ldr	r3, [r7, #20]
 80067a8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 80067ac:	697b      	ldr	r3, [r7, #20]
 80067ae:	f003 0301 	and.w	r3, r3, #1
 80067b2:	2b00      	cmp	r3, #0
 80067b4:	d016      	beq.n	80067e4 <HAL_RCCEx_PeriphCLKConfig+0x10c>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80067b6:	f7fc fcd3 	bl	8003160 <HAL_GetTick>
 80067ba:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80067bc:	e00b      	b.n	80067d6 <HAL_RCCEx_PeriphCLKConfig+0xfe>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80067be:	f7fc fccf 	bl	8003160 <HAL_GetTick>
 80067c2:	4602      	mov	r2, r0
 80067c4:	68fb      	ldr	r3, [r7, #12]
 80067c6:	1ad3      	subs	r3, r2, r3
 80067c8:	f241 3288 	movw	r2, #5000	; 0x1388
 80067cc:	4293      	cmp	r3, r2
 80067ce:	d902      	bls.n	80067d6 <HAL_RCCEx_PeriphCLKConfig+0xfe>
          {
            ret = HAL_TIMEOUT;
 80067d0:	2303      	movs	r3, #3
 80067d2:	74fb      	strb	r3, [r7, #19]
            break;
 80067d4:	e006      	b.n	80067e4 <HAL_RCCEx_PeriphCLKConfig+0x10c>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80067d6:	4b0c      	ldr	r3, [pc, #48]	; (8006808 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80067d8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80067dc:	f003 0302 	and.w	r3, r3, #2
 80067e0:	2b00      	cmp	r3, #0
 80067e2:	d0ec      	beq.n	80067be <HAL_RCCEx_PeriphCLKConfig+0xe6>
          }
        }
      }
      
      if(ret == HAL_OK)
 80067e4:	7cfb      	ldrb	r3, [r7, #19]
 80067e6:	2b00      	cmp	r3, #0
 80067e8:	d10b      	bne.n	8006802 <HAL_RCCEx_PeriphCLKConfig+0x12a>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80067ea:	4b07      	ldr	r3, [pc, #28]	; (8006808 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80067ec:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80067f0:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80067f4:	687b      	ldr	r3, [r7, #4]
 80067f6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80067f8:	4903      	ldr	r1, [pc, #12]	; (8006808 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80067fa:	4313      	orrs	r3, r2
 80067fc:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8006800:	e008      	b.n	8006814 <HAL_RCCEx_PeriphCLKConfig+0x13c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8006802:	7cfb      	ldrb	r3, [r7, #19]
 8006804:	74bb      	strb	r3, [r7, #18]
 8006806:	e005      	b.n	8006814 <HAL_RCCEx_PeriphCLKConfig+0x13c>
 8006808:	40021000 	.word	0x40021000
 800680c:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006810:	7cfb      	ldrb	r3, [r7, #19]
 8006812:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8006814:	7c7b      	ldrb	r3, [r7, #17]
 8006816:	2b01      	cmp	r3, #1
 8006818:	d105      	bne.n	8006826 <HAL_RCCEx_PeriphCLKConfig+0x14e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800681a:	4baf      	ldr	r3, [pc, #700]	; (8006ad8 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 800681c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800681e:	4aae      	ldr	r2, [pc, #696]	; (8006ad8 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8006820:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8006824:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8006826:	687b      	ldr	r3, [r7, #4]
 8006828:	681b      	ldr	r3, [r3, #0]
 800682a:	f003 0301 	and.w	r3, r3, #1
 800682e:	2b00      	cmp	r3, #0
 8006830:	d00a      	beq.n	8006848 <HAL_RCCEx_PeriphCLKConfig+0x170>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8006832:	4ba9      	ldr	r3, [pc, #676]	; (8006ad8 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8006834:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006838:	f023 0203 	bic.w	r2, r3, #3
 800683c:	687b      	ldr	r3, [r7, #4]
 800683e:	685b      	ldr	r3, [r3, #4]
 8006840:	49a5      	ldr	r1, [pc, #660]	; (8006ad8 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8006842:	4313      	orrs	r3, r2
 8006844:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8006848:	687b      	ldr	r3, [r7, #4]
 800684a:	681b      	ldr	r3, [r3, #0]
 800684c:	f003 0302 	and.w	r3, r3, #2
 8006850:	2b00      	cmp	r3, #0
 8006852:	d00a      	beq.n	800686a <HAL_RCCEx_PeriphCLKConfig+0x192>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8006854:	4ba0      	ldr	r3, [pc, #640]	; (8006ad8 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8006856:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800685a:	f023 020c 	bic.w	r2, r3, #12
 800685e:	687b      	ldr	r3, [r7, #4]
 8006860:	689b      	ldr	r3, [r3, #8]
 8006862:	499d      	ldr	r1, [pc, #628]	; (8006ad8 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8006864:	4313      	orrs	r3, r2
 8006866:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 800686a:	687b      	ldr	r3, [r7, #4]
 800686c:	681b      	ldr	r3, [r3, #0]
 800686e:	f003 0304 	and.w	r3, r3, #4
 8006872:	2b00      	cmp	r3, #0
 8006874:	d00a      	beq.n	800688c <HAL_RCCEx_PeriphCLKConfig+0x1b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8006876:	4b98      	ldr	r3, [pc, #608]	; (8006ad8 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8006878:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800687c:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8006880:	687b      	ldr	r3, [r7, #4]
 8006882:	68db      	ldr	r3, [r3, #12]
 8006884:	4994      	ldr	r1, [pc, #592]	; (8006ad8 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8006886:	4313      	orrs	r3, r2
 8006888:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(UART4)
  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 800688c:	687b      	ldr	r3, [r7, #4]
 800688e:	681b      	ldr	r3, [r3, #0]
 8006890:	f003 0308 	and.w	r3, r3, #8
 8006894:	2b00      	cmp	r3, #0
 8006896:	d00a      	beq.n	80068ae <HAL_RCCEx_PeriphCLKConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8006898:	4b8f      	ldr	r3, [pc, #572]	; (8006ad8 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 800689a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800689e:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 80068a2:	687b      	ldr	r3, [r7, #4]
 80068a4:	691b      	ldr	r3, [r3, #16]
 80068a6:	498c      	ldr	r1, [pc, #560]	; (8006ad8 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 80068a8:	4313      	orrs	r3, r2
 80068aa:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 80068ae:	687b      	ldr	r3, [r7, #4]
 80068b0:	681b      	ldr	r3, [r3, #0]
 80068b2:	f003 0310 	and.w	r3, r3, #16
 80068b6:	2b00      	cmp	r3, #0
 80068b8:	d00a      	beq.n	80068d0 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 80068ba:	4b87      	ldr	r3, [pc, #540]	; (8006ad8 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 80068bc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80068c0:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80068c4:	687b      	ldr	r3, [r7, #4]
 80068c6:	695b      	ldr	r3, [r3, #20]
 80068c8:	4983      	ldr	r1, [pc, #524]	; (8006ad8 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 80068ca:	4313      	orrs	r3, r2
 80068cc:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80068d0:	687b      	ldr	r3, [r7, #4]
 80068d2:	681b      	ldr	r3, [r3, #0]
 80068d4:	f003 0320 	and.w	r3, r3, #32
 80068d8:	2b00      	cmp	r3, #0
 80068da:	d00a      	beq.n	80068f2 <HAL_RCCEx_PeriphCLKConfig+0x21a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80068dc:	4b7e      	ldr	r3, [pc, #504]	; (8006ad8 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 80068de:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80068e2:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 80068e6:	687b      	ldr	r3, [r7, #4]
 80068e8:	699b      	ldr	r3, [r3, #24]
 80068ea:	497b      	ldr	r1, [pc, #492]	; (8006ad8 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 80068ec:	4313      	orrs	r3, r2
 80068ee:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80068f2:	687b      	ldr	r3, [r7, #4]
 80068f4:	681b      	ldr	r3, [r3, #0]
 80068f6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80068fa:	2b00      	cmp	r3, #0
 80068fc:	d00a      	beq.n	8006914 <HAL_RCCEx_PeriphCLKConfig+0x23c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80068fe:	4b76      	ldr	r3, [pc, #472]	; (8006ad8 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8006900:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006904:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8006908:	687b      	ldr	r3, [r7, #4]
 800690a:	69db      	ldr	r3, [r3, #28]
 800690c:	4972      	ldr	r1, [pc, #456]	; (8006ad8 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 800690e:	4313      	orrs	r3, r2
 8006910:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8006914:	687b      	ldr	r3, [r7, #4]
 8006916:	681b      	ldr	r3, [r3, #0]
 8006918:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800691c:	2b00      	cmp	r3, #0
 800691e:	d00a      	beq.n	8006936 <HAL_RCCEx_PeriphCLKConfig+0x25e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8006920:	4b6d      	ldr	r3, [pc, #436]	; (8006ad8 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8006922:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006926:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 800692a:	687b      	ldr	r3, [r7, #4]
 800692c:	6a1b      	ldr	r3, [r3, #32]
 800692e:	496a      	ldr	r1, [pc, #424]	; (8006ad8 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8006930:	4313      	orrs	r3, r2
 8006932:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8006936:	687b      	ldr	r3, [r7, #4]
 8006938:	681b      	ldr	r3, [r3, #0]
 800693a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800693e:	2b00      	cmp	r3, #0
 8006940:	d00a      	beq.n	8006958 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8006942:	4b65      	ldr	r3, [pc, #404]	; (8006ad8 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8006944:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006948:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 800694c:	687b      	ldr	r3, [r7, #4]
 800694e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006950:	4961      	ldr	r1, [pc, #388]	; (8006ad8 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8006952:	4313      	orrs	r3, r2
 8006954:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C4)  

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8006958:	687b      	ldr	r3, [r7, #4]
 800695a:	681b      	ldr	r3, [r3, #0]
 800695c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006960:	2b00      	cmp	r3, #0
 8006962:	d00a      	beq.n	800697a <HAL_RCCEx_PeriphCLKConfig+0x2a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8006964:	4b5c      	ldr	r3, [pc, #368]	; (8006ad8 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8006966:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800696a:	f023 0203 	bic.w	r2, r3, #3
 800696e:	687b      	ldr	r3, [r7, #4]
 8006970:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006972:	4959      	ldr	r1, [pc, #356]	; (8006ad8 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8006974:	4313      	orrs	r3, r2
 8006976:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
  }

#endif /* I2C4 */

  /*-------------------------- LPTIM1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 800697a:	687b      	ldr	r3, [r7, #4]
 800697c:	681b      	ldr	r3, [r3, #0]
 800697e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8006982:	2b00      	cmp	r3, #0
 8006984:	d00a      	beq.n	800699c <HAL_RCCEx_PeriphCLKConfig+0x2c4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8006986:	4b54      	ldr	r3, [pc, #336]	; (8006ad8 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8006988:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800698c:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8006990:	687b      	ldr	r3, [r7, #4]
 8006992:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006994:	4950      	ldr	r1, [pc, #320]	; (8006ad8 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8006996:	4313      	orrs	r3, r2
 8006998:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 800699c:	687b      	ldr	r3, [r7, #4]
 800699e:	681b      	ldr	r3, [r3, #0]
 80069a0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80069a4:	2b00      	cmp	r3, #0
 80069a6:	d015      	beq.n	80069d4 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure the SAI1 interface clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80069a8:	4b4b      	ldr	r3, [pc, #300]	; (8006ad8 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 80069aa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80069ae:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80069b2:	687b      	ldr	r3, [r7, #4]
 80069b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80069b6:	4948      	ldr	r1, [pc, #288]	; (8006ad8 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 80069b8:	4313      	orrs	r3, r2
 80069ba:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLL)
 80069be:	687b      	ldr	r3, [r7, #4]
 80069c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80069c2:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80069c6:	d105      	bne.n	80069d4 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80069c8:	4b43      	ldr	r3, [pc, #268]	; (8006ad8 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 80069ca:	68db      	ldr	r3, [r3, #12]
 80069cc:	4a42      	ldr	r2, [pc, #264]	; (8006ad8 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 80069ce:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80069d2:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- I2S clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 80069d4:	687b      	ldr	r3, [r7, #4]
 80069d6:	681b      	ldr	r3, [r3, #0]
 80069d8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80069dc:	2b00      	cmp	r3, #0
 80069de:	d015      	beq.n	8006a0c <HAL_RCCEx_PeriphCLKConfig+0x334>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure the I2S interface clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 80069e0:	4b3d      	ldr	r3, [pc, #244]	; (8006ad8 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 80069e2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80069e6:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 80069ea:	687b      	ldr	r3, [r7, #4]
 80069ec:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80069ee:	493a      	ldr	r1, [pc, #232]	; (8006ad8 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 80069f0:	4313      	orrs	r3, r2
 80069f2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLL)
 80069f6:	687b      	ldr	r3, [r7, #4]
 80069f8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80069fa:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80069fe:	d105      	bne.n	8006a0c <HAL_RCCEx_PeriphCLKConfig+0x334>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8006a00:	4b35      	ldr	r3, [pc, #212]	; (8006ad8 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8006a02:	68db      	ldr	r3, [r3, #12]
 8006a04:	4a34      	ldr	r2, [pc, #208]	; (8006ad8 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8006a06:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8006a0a:	60d3      	str	r3, [r2, #12]
    }
  }

#if defined(FDCAN1)
  /*-------------------------- FDCAN clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8006a0c:	687b      	ldr	r3, [r7, #4]
 8006a0e:	681b      	ldr	r3, [r3, #0]
 8006a10:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8006a14:	2b00      	cmp	r3, #0
 8006a16:	d015      	beq.n	8006a44 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN interface clock source */
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8006a18:	4b2f      	ldr	r3, [pc, #188]	; (8006ad8 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8006a1a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006a1e:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8006a22:	687b      	ldr	r3, [r7, #4]
 8006a24:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006a26:	492c      	ldr	r1, [pc, #176]	; (8006ad8 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8006a28:	4313      	orrs	r3, r2
 8006a2a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 8006a2e:	687b      	ldr	r3, [r7, #4]
 8006a30:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006a32:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8006a36:	d105      	bne.n	8006a44 <HAL_RCCEx_PeriphCLKConfig+0x36c>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8006a38:	4b27      	ldr	r3, [pc, #156]	; (8006ad8 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8006a3a:	68db      	ldr	r3, [r3, #12]
 8006a3c:	4a26      	ldr	r2, [pc, #152]	; (8006ad8 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8006a3e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8006a42:	60d3      	str	r3, [r2, #12]
#endif /* FDCAN1 */

#if defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8006a44:	687b      	ldr	r3, [r7, #4]
 8006a46:	681b      	ldr	r3, [r3, #0]
 8006a48:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8006a4c:	2b00      	cmp	r3, #0
 8006a4e:	d015      	beq.n	8006a7c <HAL_RCCEx_PeriphCLKConfig+0x3a4>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8006a50:	4b21      	ldr	r3, [pc, #132]	; (8006ad8 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8006a52:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006a56:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8006a5a:	687b      	ldr	r3, [r7, #4]
 8006a5c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006a5e:	491e      	ldr	r1, [pc, #120]	; (8006ad8 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8006a60:	4313      	orrs	r3, r2
 8006a62:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8006a66:	687b      	ldr	r3, [r7, #4]
 8006a68:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006a6a:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8006a6e:	d105      	bne.n	8006a7c <HAL_RCCEx_PeriphCLKConfig+0x3a4>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8006a70:	4b19      	ldr	r3, [pc, #100]	; (8006ad8 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8006a72:	68db      	ldr	r3, [r3, #12]
 8006a74:	4a18      	ldr	r2, [pc, #96]	; (8006ad8 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8006a76:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8006a7a:	60d3      	str	r3, [r2, #12]
  }

#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8006a7c:	687b      	ldr	r3, [r7, #4]
 8006a7e:	681b      	ldr	r3, [r3, #0]
 8006a80:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8006a84:	2b00      	cmp	r3, #0
 8006a86:	d015      	beq.n	8006ab4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8006a88:	4b13      	ldr	r3, [pc, #76]	; (8006ad8 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8006a8a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006a8e:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8006a92:	687b      	ldr	r3, [r7, #4]
 8006a94:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006a96:	4910      	ldr	r1, [pc, #64]	; (8006ad8 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8006a98:	4313      	orrs	r3, r2
 8006a9a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8006a9e:	687b      	ldr	r3, [r7, #4]
 8006aa0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006aa2:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8006aa6:	d105      	bne.n	8006ab4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8006aa8:	4b0b      	ldr	r3, [pc, #44]	; (8006ad8 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8006aaa:	68db      	ldr	r3, [r3, #12]
 8006aac:	4a0a      	ldr	r2, [pc, #40]	; (8006ad8 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8006aae:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8006ab2:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- ADC12 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 8006ab4:	687b      	ldr	r3, [r7, #4]
 8006ab6:	681b      	ldr	r3, [r3, #0]
 8006ab8:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8006abc:	2b00      	cmp	r3, #0
 8006abe:	d018      	beq.n	8006af2 <HAL_RCCEx_PeriphCLKConfig+0x41a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12CLKSOURCE(PeriphClkInit->Adc12ClockSelection));

    /* Configure the ADC12 interface clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 8006ac0:	4b05      	ldr	r3, [pc, #20]	; (8006ad8 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8006ac2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006ac6:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8006aca:	687b      	ldr	r3, [r7, #4]
 8006acc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006ace:	4902      	ldr	r1, [pc, #8]	; (8006ad8 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8006ad0:	4313      	orrs	r3, r2
 8006ad2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 8006ad6:	e001      	b.n	8006adc <HAL_RCCEx_PeriphCLKConfig+0x404>
 8006ad8:	40021000 	.word	0x40021000
    
    if(PeriphClkInit->Adc12ClockSelection == RCC_ADC12CLKSOURCE_PLL)
 8006adc:	687b      	ldr	r3, [r7, #4]
 8006ade:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006ae0:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8006ae4:	d105      	bne.n	8006af2 <HAL_RCCEx_PeriphCLKConfig+0x41a>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8006ae6:	4b21      	ldr	r3, [pc, #132]	; (8006b6c <HAL_RCCEx_PeriphCLKConfig+0x494>)
 8006ae8:	68db      	ldr	r3, [r3, #12]
 8006aea:	4a20      	ldr	r2, [pc, #128]	; (8006b6c <HAL_RCCEx_PeriphCLKConfig+0x494>)
 8006aec:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006af0:	60d3      	str	r3, [r2, #12]
    }
  }
  
#if defined(ADC345_COMMON)
  /*-------------------------- ADC345 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC345) == RCC_PERIPHCLK_ADC345)
 8006af2:	687b      	ldr	r3, [r7, #4]
 8006af4:	681b      	ldr	r3, [r3, #0]
 8006af6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8006afa:	2b00      	cmp	r3, #0
 8006afc:	d015      	beq.n	8006b2a <HAL_RCCEx_PeriphCLKConfig+0x452>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC345CLKSOURCE(PeriphClkInit->Adc345ClockSelection));

    /* Configure the ADC345 interface clock source */
    __HAL_RCC_ADC345_CONFIG(PeriphClkInit->Adc345ClockSelection);
 8006afe:	4b1b      	ldr	r3, [pc, #108]	; (8006b6c <HAL_RCCEx_PeriphCLKConfig+0x494>)
 8006b00:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006b04:	f023 4240 	bic.w	r2, r3, #3221225472	; 0xc0000000
 8006b08:	687b      	ldr	r3, [r7, #4]
 8006b0a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006b0c:	4917      	ldr	r1, [pc, #92]	; (8006b6c <HAL_RCCEx_PeriphCLKConfig+0x494>)
 8006b0e:	4313      	orrs	r3, r2
 8006b10:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Adc345ClockSelection == RCC_ADC345CLKSOURCE_PLL)
 8006b14:	687b      	ldr	r3, [r7, #4]
 8006b16:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006b18:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006b1c:	d105      	bne.n	8006b2a <HAL_RCCEx_PeriphCLKConfig+0x452>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8006b1e:	4b13      	ldr	r3, [pc, #76]	; (8006b6c <HAL_RCCEx_PeriphCLKConfig+0x494>)
 8006b20:	68db      	ldr	r3, [r3, #12]
 8006b22:	4a12      	ldr	r2, [pc, #72]	; (8006b6c <HAL_RCCEx_PeriphCLKConfig+0x494>)
 8006b24:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006b28:	60d3      	str	r3, [r2, #12]
#endif /* ADC345_COMMON */

#if defined(QUADSPI)

  /*-------------------------- QuadSPIx clock source configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 8006b2a:	687b      	ldr	r3, [r7, #4]
 8006b2c:	681b      	ldr	r3, [r3, #0]
 8006b2e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8006b32:	2b00      	cmp	r3, #0
 8006b34:	d015      	beq.n	8006b62 <HAL_RCCEx_PeriphCLKConfig+0x48a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_QSPICLKSOURCE(PeriphClkInit->QspiClockSelection));

    /* Configure the QuadSPI clock source */
    __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 8006b36:	4b0d      	ldr	r3, [pc, #52]	; (8006b6c <HAL_RCCEx_PeriphCLKConfig+0x494>)
 8006b38:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8006b3c:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8006b40:	687b      	ldr	r3, [r7, #4]
 8006b42:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006b44:	4909      	ldr	r1, [pc, #36]	; (8006b6c <HAL_RCCEx_PeriphCLKConfig+0x494>)
 8006b46:	4313      	orrs	r3, r2
 8006b48:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c

    if(PeriphClkInit->QspiClockSelection == RCC_QSPICLKSOURCE_PLL)
 8006b4c:	687b      	ldr	r3, [r7, #4]
 8006b4e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006b50:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8006b54:	d105      	bne.n	8006b62 <HAL_RCCEx_PeriphCLKConfig+0x48a>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8006b56:	4b05      	ldr	r3, [pc, #20]	; (8006b6c <HAL_RCCEx_PeriphCLKConfig+0x494>)
 8006b58:	68db      	ldr	r3, [r3, #12]
 8006b5a:	4a04      	ldr	r2, [pc, #16]	; (8006b6c <HAL_RCCEx_PeriphCLKConfig+0x494>)
 8006b5c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8006b60:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* QUADSPI */

  return status;
 8006b62:	7cbb      	ldrb	r3, [r7, #18]
}
 8006b64:	4618      	mov	r0, r3
 8006b66:	3718      	adds	r7, #24
 8006b68:	46bd      	mov	sp, r7
 8006b6a:	bd80      	pop	{r7, pc}
 8006b6c:	40021000 	.word	0x40021000

08006b70 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8006b70:	b580      	push	{r7, lr}
 8006b72:	b084      	sub	sp, #16
 8006b74:	af00      	add	r7, sp, #0
 8006b76:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8006b78:	687b      	ldr	r3, [r7, #4]
 8006b7a:	2b00      	cmp	r3, #0
 8006b7c:	d101      	bne.n	8006b82 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8006b7e:	2301      	movs	r3, #1
 8006b80:	e084      	b.n	8006c8c <HAL_SPI_Init+0x11c>
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8006b82:	687b      	ldr	r3, [r7, #4]
 8006b84:	2200      	movs	r2, #0
 8006b86:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8006b88:	687b      	ldr	r3, [r7, #4]
 8006b8a:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8006b8e:	b2db      	uxtb	r3, r3
 8006b90:	2b00      	cmp	r3, #0
 8006b92:	d106      	bne.n	8006ba2 <HAL_SPI_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8006b94:	687b      	ldr	r3, [r7, #4]
 8006b96:	2200      	movs	r2, #0
 8006b98:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8006b9c:	6878      	ldr	r0, [r7, #4]
 8006b9e:	f7fb fcc9 	bl	8002534 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8006ba2:	687b      	ldr	r3, [r7, #4]
 8006ba4:	2202      	movs	r2, #2
 8006ba6:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8006baa:	687b      	ldr	r3, [r7, #4]
 8006bac:	681b      	ldr	r3, [r3, #0]
 8006bae:	681a      	ldr	r2, [r3, #0]
 8006bb0:	687b      	ldr	r3, [r7, #4]
 8006bb2:	681b      	ldr	r3, [r3, #0]
 8006bb4:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006bb8:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8006bba:	687b      	ldr	r3, [r7, #4]
 8006bbc:	68db      	ldr	r3, [r3, #12]
 8006bbe:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8006bc2:	d902      	bls.n	8006bca <HAL_SPI_Init+0x5a>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8006bc4:	2300      	movs	r3, #0
 8006bc6:	60fb      	str	r3, [r7, #12]
 8006bc8:	e002      	b.n	8006bd0 <HAL_SPI_Init+0x60>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8006bca:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8006bce:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8006bd0:	687b      	ldr	r3, [r7, #4]
 8006bd2:	68db      	ldr	r3, [r3, #12]
 8006bd4:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 8006bd8:	d007      	beq.n	8006bea <HAL_SPI_Init+0x7a>
 8006bda:	687b      	ldr	r3, [r7, #4]
 8006bdc:	68db      	ldr	r3, [r3, #12]
 8006bde:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8006be2:	d002      	beq.n	8006bea <HAL_SPI_Init+0x7a>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8006be4:	687b      	ldr	r3, [r7, #4]
 8006be6:	2200      	movs	r2, #0
 8006be8:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Align the CRC Length on the data size */
  if (hspi->Init.CRCLength == SPI_CRC_LENGTH_DATASIZE)
 8006bea:	687b      	ldr	r3, [r7, #4]
 8006bec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006bee:	2b00      	cmp	r3, #0
 8006bf0:	d10b      	bne.n	8006c0a <HAL_SPI_Init+0x9a>
  {
    /* CRC Length aligned on the data size : value set by default */
    if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8006bf2:	687b      	ldr	r3, [r7, #4]
 8006bf4:	68db      	ldr	r3, [r3, #12]
 8006bf6:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8006bfa:	d903      	bls.n	8006c04 <HAL_SPI_Init+0x94>
    {
      hspi->Init.CRCLength = SPI_CRC_LENGTH_16BIT;
 8006bfc:	687b      	ldr	r3, [r7, #4]
 8006bfe:	2202      	movs	r2, #2
 8006c00:	631a      	str	r2, [r3, #48]	; 0x30
 8006c02:	e002      	b.n	8006c0a <HAL_SPI_Init+0x9a>
    }
    else
    {
      hspi->Init.CRCLength = SPI_CRC_LENGTH_8BIT;
 8006c04:	687b      	ldr	r3, [r7, #4]
 8006c06:	2201      	movs	r2, #1
 8006c08:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction |
 8006c0a:	687b      	ldr	r3, [r7, #4]
 8006c0c:	685a      	ldr	r2, [r3, #4]
 8006c0e:	687b      	ldr	r3, [r7, #4]
 8006c10:	689b      	ldr	r3, [r3, #8]
 8006c12:	431a      	orrs	r2, r3
 8006c14:	687b      	ldr	r3, [r7, #4]
 8006c16:	691b      	ldr	r3, [r3, #16]
 8006c18:	431a      	orrs	r2, r3
 8006c1a:	687b      	ldr	r3, [r7, #4]
 8006c1c:	695b      	ldr	r3, [r3, #20]
 8006c1e:	431a      	orrs	r2, r3
 8006c20:	687b      	ldr	r3, [r7, #4]
 8006c22:	699b      	ldr	r3, [r3, #24]
 8006c24:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8006c28:	431a      	orrs	r2, r3
 8006c2a:	687b      	ldr	r3, [r7, #4]
 8006c2c:	69db      	ldr	r3, [r3, #28]
 8006c2e:	431a      	orrs	r2, r3
 8006c30:	687b      	ldr	r3, [r7, #4]
 8006c32:	6a1b      	ldr	r3, [r3, #32]
 8006c34:	ea42 0103 	orr.w	r1, r2, r3
 8006c38:	687b      	ldr	r3, [r7, #4]
 8006c3a:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8006c3c:	687b      	ldr	r3, [r7, #4]
 8006c3e:	681b      	ldr	r3, [r3, #0]
 8006c40:	430a      	orrs	r2, r1
 8006c42:	601a      	str	r2, [r3, #0]
    hspi->Instance->CR1 |= SPI_CR1_CRCL;
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | hspi->Init.TIMode |
 8006c44:	687b      	ldr	r3, [r7, #4]
 8006c46:	699b      	ldr	r3, [r3, #24]
 8006c48:	0c1b      	lsrs	r3, r3, #16
 8006c4a:	f003 0204 	and.w	r2, r3, #4
 8006c4e:	687b      	ldr	r3, [r7, #4]
 8006c50:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006c52:	431a      	orrs	r2, r3
 8006c54:	687b      	ldr	r3, [r7, #4]
 8006c56:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006c58:	431a      	orrs	r2, r3
 8006c5a:	687b      	ldr	r3, [r7, #4]
 8006c5c:	68db      	ldr	r3, [r3, #12]
 8006c5e:	ea42 0103 	orr.w	r1, r2, r3
 8006c62:	687b      	ldr	r3, [r7, #4]
 8006c64:	681b      	ldr	r3, [r3, #0]
 8006c66:	68fa      	ldr	r2, [r7, #12]
 8006c68:	430a      	orrs	r2, r1
 8006c6a:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8006c6c:	687b      	ldr	r3, [r7, #4]
 8006c6e:	681b      	ldr	r3, [r3, #0]
 8006c70:	69da      	ldr	r2, [r3, #28]
 8006c72:	687b      	ldr	r3, [r7, #4]
 8006c74:	681b      	ldr	r3, [r3, #0]
 8006c76:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8006c7a:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8006c7c:	687b      	ldr	r3, [r7, #4]
 8006c7e:	2200      	movs	r2, #0
 8006c80:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8006c82:	687b      	ldr	r3, [r7, #4]
 8006c84:	2201      	movs	r2, #1
 8006c86:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 8006c8a:	2300      	movs	r3, #0
}
 8006c8c:	4618      	mov	r0, r3
 8006c8e:	3710      	adds	r7, #16
 8006c90:	46bd      	mov	sp, r7
 8006c92:	bd80      	pop	{r7, pc}

08006c94 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006c94:	b580      	push	{r7, lr}
 8006c96:	b088      	sub	sp, #32
 8006c98:	af00      	add	r7, sp, #0
 8006c9a:	60f8      	str	r0, [r7, #12]
 8006c9c:	60b9      	str	r1, [r7, #8]
 8006c9e:	603b      	str	r3, [r7, #0]
 8006ca0:	4613      	mov	r3, r2
 8006ca2:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8006ca4:	2300      	movs	r3, #0
 8006ca6:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8006ca8:	68fb      	ldr	r3, [r7, #12]
 8006caa:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8006cae:	2b01      	cmp	r3, #1
 8006cb0:	d101      	bne.n	8006cb6 <HAL_SPI_Transmit+0x22>
 8006cb2:	2302      	movs	r3, #2
 8006cb4:	e150      	b.n	8006f58 <HAL_SPI_Transmit+0x2c4>
 8006cb6:	68fb      	ldr	r3, [r7, #12]
 8006cb8:	2201      	movs	r2, #1
 8006cba:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8006cbe:	f7fc fa4f 	bl	8003160 <HAL_GetTick>
 8006cc2:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8006cc4:	88fb      	ldrh	r3, [r7, #6]
 8006cc6:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8006cc8:	68fb      	ldr	r3, [r7, #12]
 8006cca:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8006cce:	b2db      	uxtb	r3, r3
 8006cd0:	2b01      	cmp	r3, #1
 8006cd2:	d002      	beq.n	8006cda <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8006cd4:	2302      	movs	r3, #2
 8006cd6:	77fb      	strb	r3, [r7, #31]
    goto error;
 8006cd8:	e135      	b.n	8006f46 <HAL_SPI_Transmit+0x2b2>
  }

  if ((pData == NULL) || (Size == 0U))
 8006cda:	68bb      	ldr	r3, [r7, #8]
 8006cdc:	2b00      	cmp	r3, #0
 8006cde:	d002      	beq.n	8006ce6 <HAL_SPI_Transmit+0x52>
 8006ce0:	88fb      	ldrh	r3, [r7, #6]
 8006ce2:	2b00      	cmp	r3, #0
 8006ce4:	d102      	bne.n	8006cec <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8006ce6:	2301      	movs	r3, #1
 8006ce8:	77fb      	strb	r3, [r7, #31]
    goto error;
 8006cea:	e12c      	b.n	8006f46 <HAL_SPI_Transmit+0x2b2>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8006cec:	68fb      	ldr	r3, [r7, #12]
 8006cee:	2203      	movs	r2, #3
 8006cf0:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8006cf4:	68fb      	ldr	r3, [r7, #12]
 8006cf6:	2200      	movs	r2, #0
 8006cf8:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8006cfa:	68fb      	ldr	r3, [r7, #12]
 8006cfc:	68ba      	ldr	r2, [r7, #8]
 8006cfe:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = Size;
 8006d00:	68fb      	ldr	r3, [r7, #12]
 8006d02:	88fa      	ldrh	r2, [r7, #6]
 8006d04:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = Size;
 8006d06:	68fb      	ldr	r3, [r7, #12]
 8006d08:	88fa      	ldrh	r2, [r7, #6]
 8006d0a:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8006d0c:	68fb      	ldr	r3, [r7, #12]
 8006d0e:	2200      	movs	r2, #0
 8006d10:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = 0U;
 8006d12:	68fb      	ldr	r3, [r7, #12]
 8006d14:	2200      	movs	r2, #0
 8006d16:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->RxXferCount = 0U;
 8006d1a:	68fb      	ldr	r3, [r7, #12]
 8006d1c:	2200      	movs	r2, #0
 8006d1e:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->TxISR       = NULL;
 8006d22:	68fb      	ldr	r3, [r7, #12]
 8006d24:	2200      	movs	r2, #0
 8006d26:	651a      	str	r2, [r3, #80]	; 0x50
  hspi->RxISR       = NULL;
 8006d28:	68fb      	ldr	r3, [r7, #12]
 8006d2a:	2200      	movs	r2, #0
 8006d2c:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8006d2e:	68fb      	ldr	r3, [r7, #12]
 8006d30:	689b      	ldr	r3, [r3, #8]
 8006d32:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006d36:	d107      	bne.n	8006d48 <HAL_SPI_Transmit+0xb4>
  {
    SPI_1LINE_TX(hspi);
 8006d38:	68fb      	ldr	r3, [r7, #12]
 8006d3a:	681b      	ldr	r3, [r3, #0]
 8006d3c:	681a      	ldr	r2, [r3, #0]
 8006d3e:	68fb      	ldr	r3, [r7, #12]
 8006d40:	681b      	ldr	r3, [r3, #0]
 8006d42:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8006d46:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8006d48:	68fb      	ldr	r3, [r7, #12]
 8006d4a:	681b      	ldr	r3, [r3, #0]
 8006d4c:	681b      	ldr	r3, [r3, #0]
 8006d4e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006d52:	2b40      	cmp	r3, #64	; 0x40
 8006d54:	d007      	beq.n	8006d66 <HAL_SPI_Transmit+0xd2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8006d56:	68fb      	ldr	r3, [r7, #12]
 8006d58:	681b      	ldr	r3, [r3, #0]
 8006d5a:	681a      	ldr	r2, [r3, #0]
 8006d5c:	68fb      	ldr	r3, [r7, #12]
 8006d5e:	681b      	ldr	r3, [r3, #0]
 8006d60:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8006d64:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8006d66:	68fb      	ldr	r3, [r7, #12]
 8006d68:	68db      	ldr	r3, [r3, #12]
 8006d6a:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8006d6e:	d94b      	bls.n	8006e08 <HAL_SPI_Transmit+0x174>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8006d70:	68fb      	ldr	r3, [r7, #12]
 8006d72:	685b      	ldr	r3, [r3, #4]
 8006d74:	2b00      	cmp	r3, #0
 8006d76:	d002      	beq.n	8006d7e <HAL_SPI_Transmit+0xea>
 8006d78:	8afb      	ldrh	r3, [r7, #22]
 8006d7a:	2b01      	cmp	r3, #1
 8006d7c:	d13e      	bne.n	8006dfc <HAL_SPI_Transmit+0x168>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8006d7e:	68fb      	ldr	r3, [r7, #12]
 8006d80:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006d82:	881a      	ldrh	r2, [r3, #0]
 8006d84:	68fb      	ldr	r3, [r7, #12]
 8006d86:	681b      	ldr	r3, [r3, #0]
 8006d88:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8006d8a:	68fb      	ldr	r3, [r7, #12]
 8006d8c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006d8e:	1c9a      	adds	r2, r3, #2
 8006d90:	68fb      	ldr	r3, [r7, #12]
 8006d92:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 8006d94:	68fb      	ldr	r3, [r7, #12]
 8006d96:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006d98:	b29b      	uxth	r3, r3
 8006d9a:	3b01      	subs	r3, #1
 8006d9c:	b29a      	uxth	r2, r3
 8006d9e:	68fb      	ldr	r3, [r7, #12]
 8006da0:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8006da2:	e02b      	b.n	8006dfc <HAL_SPI_Transmit+0x168>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8006da4:	68fb      	ldr	r3, [r7, #12]
 8006da6:	681b      	ldr	r3, [r3, #0]
 8006da8:	689b      	ldr	r3, [r3, #8]
 8006daa:	f003 0302 	and.w	r3, r3, #2
 8006dae:	2b02      	cmp	r3, #2
 8006db0:	d112      	bne.n	8006dd8 <HAL_SPI_Transmit+0x144>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8006db2:	68fb      	ldr	r3, [r7, #12]
 8006db4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006db6:	881a      	ldrh	r2, [r3, #0]
 8006db8:	68fb      	ldr	r3, [r7, #12]
 8006dba:	681b      	ldr	r3, [r3, #0]
 8006dbc:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8006dbe:	68fb      	ldr	r3, [r7, #12]
 8006dc0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006dc2:	1c9a      	adds	r2, r3, #2
 8006dc4:	68fb      	ldr	r3, [r7, #12]
 8006dc6:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8006dc8:	68fb      	ldr	r3, [r7, #12]
 8006dca:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006dcc:	b29b      	uxth	r3, r3
 8006dce:	3b01      	subs	r3, #1
 8006dd0:	b29a      	uxth	r2, r3
 8006dd2:	68fb      	ldr	r3, [r7, #12]
 8006dd4:	87da      	strh	r2, [r3, #62]	; 0x3e
 8006dd6:	e011      	b.n	8006dfc <HAL_SPI_Transmit+0x168>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8006dd8:	f7fc f9c2 	bl	8003160 <HAL_GetTick>
 8006ddc:	4602      	mov	r2, r0
 8006dde:	69bb      	ldr	r3, [r7, #24]
 8006de0:	1ad3      	subs	r3, r2, r3
 8006de2:	683a      	ldr	r2, [r7, #0]
 8006de4:	429a      	cmp	r2, r3
 8006de6:	d803      	bhi.n	8006df0 <HAL_SPI_Transmit+0x15c>
 8006de8:	683b      	ldr	r3, [r7, #0]
 8006dea:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8006dee:	d102      	bne.n	8006df6 <HAL_SPI_Transmit+0x162>
 8006df0:	683b      	ldr	r3, [r7, #0]
 8006df2:	2b00      	cmp	r3, #0
 8006df4:	d102      	bne.n	8006dfc <HAL_SPI_Transmit+0x168>
        {
          errorcode = HAL_TIMEOUT;
 8006df6:	2303      	movs	r3, #3
 8006df8:	77fb      	strb	r3, [r7, #31]
          goto error;
 8006dfa:	e0a4      	b.n	8006f46 <HAL_SPI_Transmit+0x2b2>
    while (hspi->TxXferCount > 0U)
 8006dfc:	68fb      	ldr	r3, [r7, #12]
 8006dfe:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006e00:	b29b      	uxth	r3, r3
 8006e02:	2b00      	cmp	r3, #0
 8006e04:	d1ce      	bne.n	8006da4 <HAL_SPI_Transmit+0x110>
 8006e06:	e07c      	b.n	8006f02 <HAL_SPI_Transmit+0x26e>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8006e08:	68fb      	ldr	r3, [r7, #12]
 8006e0a:	685b      	ldr	r3, [r3, #4]
 8006e0c:	2b00      	cmp	r3, #0
 8006e0e:	d002      	beq.n	8006e16 <HAL_SPI_Transmit+0x182>
 8006e10:	8afb      	ldrh	r3, [r7, #22]
 8006e12:	2b01      	cmp	r3, #1
 8006e14:	d170      	bne.n	8006ef8 <HAL_SPI_Transmit+0x264>
    {
      if (hspi->TxXferCount > 1U)
 8006e16:	68fb      	ldr	r3, [r7, #12]
 8006e18:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006e1a:	b29b      	uxth	r3, r3
 8006e1c:	2b01      	cmp	r3, #1
 8006e1e:	d912      	bls.n	8006e46 <HAL_SPI_Transmit+0x1b2>
      {
        /* write on the data register in packing mode */
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8006e20:	68fb      	ldr	r3, [r7, #12]
 8006e22:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006e24:	881a      	ldrh	r2, [r3, #0]
 8006e26:	68fb      	ldr	r3, [r7, #12]
 8006e28:	681b      	ldr	r3, [r3, #0]
 8006e2a:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8006e2c:	68fb      	ldr	r3, [r7, #12]
 8006e2e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006e30:	1c9a      	adds	r2, r3, #2
 8006e32:	68fb      	ldr	r3, [r7, #12]
 8006e34:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount -= 2U;
 8006e36:	68fb      	ldr	r3, [r7, #12]
 8006e38:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006e3a:	b29b      	uxth	r3, r3
 8006e3c:	3b02      	subs	r3, #2
 8006e3e:	b29a      	uxth	r2, r3
 8006e40:	68fb      	ldr	r3, [r7, #12]
 8006e42:	87da      	strh	r2, [r3, #62]	; 0x3e
 8006e44:	e058      	b.n	8006ef8 <HAL_SPI_Transmit+0x264>
      }
      else
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8006e46:	68fb      	ldr	r3, [r7, #12]
 8006e48:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006e4a:	68fb      	ldr	r3, [r7, #12]
 8006e4c:	681b      	ldr	r3, [r3, #0]
 8006e4e:	330c      	adds	r3, #12
 8006e50:	7812      	ldrb	r2, [r2, #0]
 8006e52:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr ++;
 8006e54:	68fb      	ldr	r3, [r7, #12]
 8006e56:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006e58:	1c5a      	adds	r2, r3, #1
 8006e5a:	68fb      	ldr	r3, [r7, #12]
 8006e5c:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8006e5e:	68fb      	ldr	r3, [r7, #12]
 8006e60:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006e62:	b29b      	uxth	r3, r3
 8006e64:	3b01      	subs	r3, #1
 8006e66:	b29a      	uxth	r2, r3
 8006e68:	68fb      	ldr	r3, [r7, #12]
 8006e6a:	87da      	strh	r2, [r3, #62]	; 0x3e
      }
    }
    while (hspi->TxXferCount > 0U)
 8006e6c:	e044      	b.n	8006ef8 <HAL_SPI_Transmit+0x264>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8006e6e:	68fb      	ldr	r3, [r7, #12]
 8006e70:	681b      	ldr	r3, [r3, #0]
 8006e72:	689b      	ldr	r3, [r3, #8]
 8006e74:	f003 0302 	and.w	r3, r3, #2
 8006e78:	2b02      	cmp	r3, #2
 8006e7a:	d12b      	bne.n	8006ed4 <HAL_SPI_Transmit+0x240>
      {
        if (hspi->TxXferCount > 1U)
 8006e7c:	68fb      	ldr	r3, [r7, #12]
 8006e7e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006e80:	b29b      	uxth	r3, r3
 8006e82:	2b01      	cmp	r3, #1
 8006e84:	d912      	bls.n	8006eac <HAL_SPI_Transmit+0x218>
        {
          /* write on the data register in packing mode */
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8006e86:	68fb      	ldr	r3, [r7, #12]
 8006e88:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006e8a:	881a      	ldrh	r2, [r3, #0]
 8006e8c:	68fb      	ldr	r3, [r7, #12]
 8006e8e:	681b      	ldr	r3, [r3, #0]
 8006e90:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8006e92:	68fb      	ldr	r3, [r7, #12]
 8006e94:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006e96:	1c9a      	adds	r2, r3, #2
 8006e98:	68fb      	ldr	r3, [r7, #12]
 8006e9a:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount -= 2U;
 8006e9c:	68fb      	ldr	r3, [r7, #12]
 8006e9e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006ea0:	b29b      	uxth	r3, r3
 8006ea2:	3b02      	subs	r3, #2
 8006ea4:	b29a      	uxth	r2, r3
 8006ea6:	68fb      	ldr	r3, [r7, #12]
 8006ea8:	87da      	strh	r2, [r3, #62]	; 0x3e
 8006eaa:	e025      	b.n	8006ef8 <HAL_SPI_Transmit+0x264>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8006eac:	68fb      	ldr	r3, [r7, #12]
 8006eae:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006eb0:	68fb      	ldr	r3, [r7, #12]
 8006eb2:	681b      	ldr	r3, [r3, #0]
 8006eb4:	330c      	adds	r3, #12
 8006eb6:	7812      	ldrb	r2, [r2, #0]
 8006eb8:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 8006eba:	68fb      	ldr	r3, [r7, #12]
 8006ebc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006ebe:	1c5a      	adds	r2, r3, #1
 8006ec0:	68fb      	ldr	r3, [r7, #12]
 8006ec2:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount--;
 8006ec4:	68fb      	ldr	r3, [r7, #12]
 8006ec6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006ec8:	b29b      	uxth	r3, r3
 8006eca:	3b01      	subs	r3, #1
 8006ecc:	b29a      	uxth	r2, r3
 8006ece:	68fb      	ldr	r3, [r7, #12]
 8006ed0:	87da      	strh	r2, [r3, #62]	; 0x3e
 8006ed2:	e011      	b.n	8006ef8 <HAL_SPI_Transmit+0x264>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8006ed4:	f7fc f944 	bl	8003160 <HAL_GetTick>
 8006ed8:	4602      	mov	r2, r0
 8006eda:	69bb      	ldr	r3, [r7, #24]
 8006edc:	1ad3      	subs	r3, r2, r3
 8006ede:	683a      	ldr	r2, [r7, #0]
 8006ee0:	429a      	cmp	r2, r3
 8006ee2:	d803      	bhi.n	8006eec <HAL_SPI_Transmit+0x258>
 8006ee4:	683b      	ldr	r3, [r7, #0]
 8006ee6:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8006eea:	d102      	bne.n	8006ef2 <HAL_SPI_Transmit+0x25e>
 8006eec:	683b      	ldr	r3, [r7, #0]
 8006eee:	2b00      	cmp	r3, #0
 8006ef0:	d102      	bne.n	8006ef8 <HAL_SPI_Transmit+0x264>
        {
          errorcode = HAL_TIMEOUT;
 8006ef2:	2303      	movs	r3, #3
 8006ef4:	77fb      	strb	r3, [r7, #31]
          goto error;
 8006ef6:	e026      	b.n	8006f46 <HAL_SPI_Transmit+0x2b2>
    while (hspi->TxXferCount > 0U)
 8006ef8:	68fb      	ldr	r3, [r7, #12]
 8006efa:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006efc:	b29b      	uxth	r3, r3
 8006efe:	2b00      	cmp	r3, #0
 8006f00:	d1b5      	bne.n	8006e6e <HAL_SPI_Transmit+0x1da>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8006f02:	69ba      	ldr	r2, [r7, #24]
 8006f04:	6839      	ldr	r1, [r7, #0]
 8006f06:	68f8      	ldr	r0, [r7, #12]
 8006f08:	f000 f901 	bl	800710e <SPI_EndRxTxTransaction>
 8006f0c:	4603      	mov	r3, r0
 8006f0e:	2b00      	cmp	r3, #0
 8006f10:	d002      	beq.n	8006f18 <HAL_SPI_Transmit+0x284>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8006f12:	68fb      	ldr	r3, [r7, #12]
 8006f14:	2220      	movs	r2, #32
 8006f16:	661a      	str	r2, [r3, #96]	; 0x60
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8006f18:	68fb      	ldr	r3, [r7, #12]
 8006f1a:	689b      	ldr	r3, [r3, #8]
 8006f1c:	2b00      	cmp	r3, #0
 8006f1e:	d10a      	bne.n	8006f36 <HAL_SPI_Transmit+0x2a2>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8006f20:	2300      	movs	r3, #0
 8006f22:	613b      	str	r3, [r7, #16]
 8006f24:	68fb      	ldr	r3, [r7, #12]
 8006f26:	681b      	ldr	r3, [r3, #0]
 8006f28:	68db      	ldr	r3, [r3, #12]
 8006f2a:	613b      	str	r3, [r7, #16]
 8006f2c:	68fb      	ldr	r3, [r7, #12]
 8006f2e:	681b      	ldr	r3, [r3, #0]
 8006f30:	689b      	ldr	r3, [r3, #8]
 8006f32:	613b      	str	r3, [r7, #16]
 8006f34:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8006f36:	68fb      	ldr	r3, [r7, #12]
 8006f38:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006f3a:	2b00      	cmp	r3, #0
 8006f3c:	d002      	beq.n	8006f44 <HAL_SPI_Transmit+0x2b0>
  {
    errorcode = HAL_ERROR;
 8006f3e:	2301      	movs	r3, #1
 8006f40:	77fb      	strb	r3, [r7, #31]
 8006f42:	e000      	b.n	8006f46 <HAL_SPI_Transmit+0x2b2>
  }

error:
 8006f44:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8006f46:	68fb      	ldr	r3, [r7, #12]
 8006f48:	2201      	movs	r2, #1
 8006f4a:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8006f4e:	68fb      	ldr	r3, [r7, #12]
 8006f50:	2200      	movs	r2, #0
 8006f52:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 8006f56:	7ffb      	ldrb	r3, [r7, #31]
}
 8006f58:	4618      	mov	r0, r3
 8006f5a:	3720      	adds	r7, #32
 8006f5c:	46bd      	mov	sp, r7
 8006f5e:	bd80      	pop	{r7, pc}

08006f60 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8006f60:	b580      	push	{r7, lr}
 8006f62:	b084      	sub	sp, #16
 8006f64:	af00      	add	r7, sp, #0
 8006f66:	60f8      	str	r0, [r7, #12]
 8006f68:	60b9      	str	r1, [r7, #8]
 8006f6a:	603b      	str	r3, [r7, #0]
 8006f6c:	4613      	mov	r3, r2
 8006f6e:	71fb      	strb	r3, [r7, #7]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8006f70:	e04c      	b.n	800700c <SPI_WaitFlagStateUntilTimeout+0xac>
  {
    if (Timeout != HAL_MAX_DELAY)
 8006f72:	683b      	ldr	r3, [r7, #0]
 8006f74:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8006f78:	d048      	beq.n	800700c <SPI_WaitFlagStateUntilTimeout+0xac>
    {
      if (((HAL_GetTick() - Tickstart) >= Timeout) || (Timeout == 0U))
 8006f7a:	f7fc f8f1 	bl	8003160 <HAL_GetTick>
 8006f7e:	4602      	mov	r2, r0
 8006f80:	69bb      	ldr	r3, [r7, #24]
 8006f82:	1ad3      	subs	r3, r2, r3
 8006f84:	683a      	ldr	r2, [r7, #0]
 8006f86:	429a      	cmp	r2, r3
 8006f88:	d902      	bls.n	8006f90 <SPI_WaitFlagStateUntilTimeout+0x30>
 8006f8a:	683b      	ldr	r3, [r7, #0]
 8006f8c:	2b00      	cmp	r3, #0
 8006f8e:	d13d      	bne.n	800700c <SPI_WaitFlagStateUntilTimeout+0xac>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
        on both master and slave sides in order to resynchronize the master
        and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8006f90:	68fb      	ldr	r3, [r7, #12]
 8006f92:	681b      	ldr	r3, [r3, #0]
 8006f94:	685a      	ldr	r2, [r3, #4]
 8006f96:	68fb      	ldr	r3, [r7, #12]
 8006f98:	681b      	ldr	r3, [r3, #0]
 8006f9a:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8006f9e:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8006fa0:	68fb      	ldr	r3, [r7, #12]
 8006fa2:	685b      	ldr	r3, [r3, #4]
 8006fa4:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8006fa8:	d111      	bne.n	8006fce <SPI_WaitFlagStateUntilTimeout+0x6e>
 8006faa:	68fb      	ldr	r3, [r7, #12]
 8006fac:	689b      	ldr	r3, [r3, #8]
 8006fae:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006fb2:	d004      	beq.n	8006fbe <SPI_WaitFlagStateUntilTimeout+0x5e>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8006fb4:	68fb      	ldr	r3, [r7, #12]
 8006fb6:	689b      	ldr	r3, [r3, #8]
 8006fb8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006fbc:	d107      	bne.n	8006fce <SPI_WaitFlagStateUntilTimeout+0x6e>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8006fbe:	68fb      	ldr	r3, [r7, #12]
 8006fc0:	681b      	ldr	r3, [r3, #0]
 8006fc2:	681a      	ldr	r2, [r3, #0]
 8006fc4:	68fb      	ldr	r3, [r7, #12]
 8006fc6:	681b      	ldr	r3, [r3, #0]
 8006fc8:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006fcc:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8006fce:	68fb      	ldr	r3, [r7, #12]
 8006fd0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006fd2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006fd6:	d10f      	bne.n	8006ff8 <SPI_WaitFlagStateUntilTimeout+0x98>
        {
          SPI_RESET_CRC(hspi);
 8006fd8:	68fb      	ldr	r3, [r7, #12]
 8006fda:	681b      	ldr	r3, [r3, #0]
 8006fdc:	681a      	ldr	r2, [r3, #0]
 8006fde:	68fb      	ldr	r3, [r7, #12]
 8006fe0:	681b      	ldr	r3, [r3, #0]
 8006fe2:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8006fe6:	601a      	str	r2, [r3, #0]
 8006fe8:	68fb      	ldr	r3, [r7, #12]
 8006fea:	681b      	ldr	r3, [r3, #0]
 8006fec:	681a      	ldr	r2, [r3, #0]
 8006fee:	68fb      	ldr	r3, [r7, #12]
 8006ff0:	681b      	ldr	r3, [r3, #0]
 8006ff2:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8006ff6:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8006ff8:	68fb      	ldr	r3, [r7, #12]
 8006ffa:	2201      	movs	r2, #1
 8006ffc:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8007000:	68fb      	ldr	r3, [r7, #12]
 8007002:	2200      	movs	r2, #0
 8007004:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 8007008:	2303      	movs	r3, #3
 800700a:	e00f      	b.n	800702c <SPI_WaitFlagStateUntilTimeout+0xcc>
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800700c:	68fb      	ldr	r3, [r7, #12]
 800700e:	681b      	ldr	r3, [r3, #0]
 8007010:	689a      	ldr	r2, [r3, #8]
 8007012:	68bb      	ldr	r3, [r7, #8]
 8007014:	4013      	ands	r3, r2
 8007016:	68ba      	ldr	r2, [r7, #8]
 8007018:	429a      	cmp	r2, r3
 800701a:	bf0c      	ite	eq
 800701c:	2301      	moveq	r3, #1
 800701e:	2300      	movne	r3, #0
 8007020:	b2db      	uxtb	r3, r3
 8007022:	461a      	mov	r2, r3
 8007024:	79fb      	ldrb	r3, [r7, #7]
 8007026:	429a      	cmp	r2, r3
 8007028:	d1a3      	bne.n	8006f72 <SPI_WaitFlagStateUntilTimeout+0x12>
      }
    }
  }

  return HAL_OK;
 800702a:	2300      	movs	r3, #0
}
 800702c:	4618      	mov	r0, r3
 800702e:	3710      	adds	r7, #16
 8007030:	46bd      	mov	sp, r7
 8007032:	bd80      	pop	{r7, pc}

08007034 <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8007034:	b580      	push	{r7, lr}
 8007036:	b084      	sub	sp, #16
 8007038:	af00      	add	r7, sp, #0
 800703a:	60f8      	str	r0, [r7, #12]
 800703c:	60b9      	str	r1, [r7, #8]
 800703e:	607a      	str	r2, [r7, #4]
 8007040:	603b      	str	r3, [r7, #0]
  while ((hspi->Instance->SR & Fifo) != State)
 8007042:	e057      	b.n	80070f4 <SPI_WaitFifoStateUntilTimeout+0xc0>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 8007044:	68bb      	ldr	r3, [r7, #8]
 8007046:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 800704a:	d106      	bne.n	800705a <SPI_WaitFifoStateUntilTimeout+0x26>
 800704c:	687b      	ldr	r3, [r7, #4]
 800704e:	2b00      	cmp	r3, #0
 8007050:	d103      	bne.n	800705a <SPI_WaitFifoStateUntilTimeout+0x26>
    {
      /* Read 8bit CRC to flush Data Register */
      READ_REG(*((__IO uint8_t *)&hspi->Instance->DR));
 8007052:	68fb      	ldr	r3, [r7, #12]
 8007054:	681b      	ldr	r3, [r3, #0]
 8007056:	330c      	adds	r3, #12
 8007058:	781b      	ldrb	r3, [r3, #0]
    }

    if (Timeout != HAL_MAX_DELAY)
 800705a:	683b      	ldr	r3, [r7, #0]
 800705c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8007060:	d048      	beq.n	80070f4 <SPI_WaitFifoStateUntilTimeout+0xc0>
    {
      if (((HAL_GetTick() - Tickstart) >= Timeout) || (Timeout == 0U))
 8007062:	f7fc f87d 	bl	8003160 <HAL_GetTick>
 8007066:	4602      	mov	r2, r0
 8007068:	69bb      	ldr	r3, [r7, #24]
 800706a:	1ad3      	subs	r3, r2, r3
 800706c:	683a      	ldr	r2, [r7, #0]
 800706e:	429a      	cmp	r2, r3
 8007070:	d902      	bls.n	8007078 <SPI_WaitFifoStateUntilTimeout+0x44>
 8007072:	683b      	ldr	r3, [r7, #0]
 8007074:	2b00      	cmp	r3, #0
 8007076:	d13d      	bne.n	80070f4 <SPI_WaitFifoStateUntilTimeout+0xc0>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8007078:	68fb      	ldr	r3, [r7, #12]
 800707a:	681b      	ldr	r3, [r3, #0]
 800707c:	685a      	ldr	r2, [r3, #4]
 800707e:	68fb      	ldr	r3, [r7, #12]
 8007080:	681b      	ldr	r3, [r3, #0]
 8007082:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8007086:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8007088:	68fb      	ldr	r3, [r7, #12]
 800708a:	685b      	ldr	r3, [r3, #4]
 800708c:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8007090:	d111      	bne.n	80070b6 <SPI_WaitFifoStateUntilTimeout+0x82>
 8007092:	68fb      	ldr	r3, [r7, #12]
 8007094:	689b      	ldr	r3, [r3, #8]
 8007096:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800709a:	d004      	beq.n	80070a6 <SPI_WaitFifoStateUntilTimeout+0x72>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800709c:	68fb      	ldr	r3, [r7, #12]
 800709e:	689b      	ldr	r3, [r3, #8]
 80070a0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80070a4:	d107      	bne.n	80070b6 <SPI_WaitFifoStateUntilTimeout+0x82>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 80070a6:	68fb      	ldr	r3, [r7, #12]
 80070a8:	681b      	ldr	r3, [r3, #0]
 80070aa:	681a      	ldr	r2, [r3, #0]
 80070ac:	68fb      	ldr	r3, [r7, #12]
 80070ae:	681b      	ldr	r3, [r3, #0]
 80070b0:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80070b4:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80070b6:	68fb      	ldr	r3, [r7, #12]
 80070b8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80070ba:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80070be:	d10f      	bne.n	80070e0 <SPI_WaitFifoStateUntilTimeout+0xac>
        {
          SPI_RESET_CRC(hspi);
 80070c0:	68fb      	ldr	r3, [r7, #12]
 80070c2:	681b      	ldr	r3, [r3, #0]
 80070c4:	681a      	ldr	r2, [r3, #0]
 80070c6:	68fb      	ldr	r3, [r7, #12]
 80070c8:	681b      	ldr	r3, [r3, #0]
 80070ca:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80070ce:	601a      	str	r2, [r3, #0]
 80070d0:	68fb      	ldr	r3, [r7, #12]
 80070d2:	681b      	ldr	r3, [r3, #0]
 80070d4:	681a      	ldr	r2, [r3, #0]
 80070d6:	68fb      	ldr	r3, [r7, #12]
 80070d8:	681b      	ldr	r3, [r3, #0]
 80070da:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80070de:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 80070e0:	68fb      	ldr	r3, [r7, #12]
 80070e2:	2201      	movs	r2, #1
 80070e4:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80070e8:	68fb      	ldr	r3, [r7, #12]
 80070ea:	2200      	movs	r2, #0
 80070ec:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 80070f0:	2303      	movs	r3, #3
 80070f2:	e008      	b.n	8007106 <SPI_WaitFifoStateUntilTimeout+0xd2>
  while ((hspi->Instance->SR & Fifo) != State)
 80070f4:	68fb      	ldr	r3, [r7, #12]
 80070f6:	681b      	ldr	r3, [r3, #0]
 80070f8:	689a      	ldr	r2, [r3, #8]
 80070fa:	68bb      	ldr	r3, [r7, #8]
 80070fc:	4013      	ands	r3, r2
 80070fe:	687a      	ldr	r2, [r7, #4]
 8007100:	429a      	cmp	r2, r3
 8007102:	d19f      	bne.n	8007044 <SPI_WaitFifoStateUntilTimeout+0x10>
      }
    }
  }

  return HAL_OK;
 8007104:	2300      	movs	r3, #0
}
 8007106:	4618      	mov	r0, r3
 8007108:	3710      	adds	r7, #16
 800710a:	46bd      	mov	sp, r7
 800710c:	bd80      	pop	{r7, pc}

0800710e <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 800710e:	b580      	push	{r7, lr}
 8007110:	b086      	sub	sp, #24
 8007112:	af02      	add	r7, sp, #8
 8007114:	60f8      	str	r0, [r7, #12]
 8007116:	60b9      	str	r1, [r7, #8]
 8007118:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 800711a:	687b      	ldr	r3, [r7, #4]
 800711c:	9300      	str	r3, [sp, #0]
 800711e:	68bb      	ldr	r3, [r7, #8]
 8007120:	2200      	movs	r2, #0
 8007122:	f44f 51c0 	mov.w	r1, #6144	; 0x1800
 8007126:	68f8      	ldr	r0, [r7, #12]
 8007128:	f7ff ff84 	bl	8007034 <SPI_WaitFifoStateUntilTimeout>
 800712c:	4603      	mov	r3, r0
 800712e:	2b00      	cmp	r3, #0
 8007130:	d007      	beq.n	8007142 <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8007132:	68fb      	ldr	r3, [r7, #12]
 8007134:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007136:	f043 0220 	orr.w	r2, r3, #32
 800713a:	68fb      	ldr	r3, [r7, #12]
 800713c:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 800713e:	2303      	movs	r3, #3
 8007140:	e027      	b.n	8007192 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8007142:	687b      	ldr	r3, [r7, #4]
 8007144:	9300      	str	r3, [sp, #0]
 8007146:	68bb      	ldr	r3, [r7, #8]
 8007148:	2200      	movs	r2, #0
 800714a:	2180      	movs	r1, #128	; 0x80
 800714c:	68f8      	ldr	r0, [r7, #12]
 800714e:	f7ff ff07 	bl	8006f60 <SPI_WaitFlagStateUntilTimeout>
 8007152:	4603      	mov	r3, r0
 8007154:	2b00      	cmp	r3, #0
 8007156:	d007      	beq.n	8007168 <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8007158:	68fb      	ldr	r3, [r7, #12]
 800715a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800715c:	f043 0220 	orr.w	r2, r3, #32
 8007160:	68fb      	ldr	r3, [r7, #12]
 8007162:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8007164:	2303      	movs	r3, #3
 8007166:	e014      	b.n	8007192 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8007168:	687b      	ldr	r3, [r7, #4]
 800716a:	9300      	str	r3, [sp, #0]
 800716c:	68bb      	ldr	r3, [r7, #8]
 800716e:	2200      	movs	r2, #0
 8007170:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 8007174:	68f8      	ldr	r0, [r7, #12]
 8007176:	f7ff ff5d 	bl	8007034 <SPI_WaitFifoStateUntilTimeout>
 800717a:	4603      	mov	r3, r0
 800717c:	2b00      	cmp	r3, #0
 800717e:	d007      	beq.n	8007190 <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8007180:	68fb      	ldr	r3, [r7, #12]
 8007182:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007184:	f043 0220 	orr.w	r2, r3, #32
 8007188:	68fb      	ldr	r3, [r7, #12]
 800718a:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 800718c:	2303      	movs	r3, #3
 800718e:	e000      	b.n	8007192 <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 8007190:	2300      	movs	r3, #0
}
 8007192:	4618      	mov	r0, r3
 8007194:	3710      	adds	r7, #16
 8007196:	46bd      	mov	sp, r7
 8007198:	bd80      	pop	{r7, pc}

0800719a <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800719a:	b580      	push	{r7, lr}
 800719c:	b082      	sub	sp, #8
 800719e:	af00      	add	r7, sp, #0
 80071a0:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80071a2:	687b      	ldr	r3, [r7, #4]
 80071a4:	2b00      	cmp	r3, #0
 80071a6:	d101      	bne.n	80071ac <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80071a8:	2301      	movs	r3, #1
 80071aa:	e049      	b.n	8007240 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80071ac:	687b      	ldr	r3, [r7, #4]
 80071ae:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80071b2:	b2db      	uxtb	r3, r3
 80071b4:	2b00      	cmp	r3, #0
 80071b6:	d106      	bne.n	80071c6 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80071b8:	687b      	ldr	r3, [r7, #4]
 80071ba:	2200      	movs	r2, #0
 80071bc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80071c0:	6878      	ldr	r0, [r7, #4]
 80071c2:	f7fb fe7b 	bl	8002ebc <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80071c6:	687b      	ldr	r3, [r7, #4]
 80071c8:	2202      	movs	r2, #2
 80071ca:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80071ce:	687b      	ldr	r3, [r7, #4]
 80071d0:	681a      	ldr	r2, [r3, #0]
 80071d2:	687b      	ldr	r3, [r7, #4]
 80071d4:	3304      	adds	r3, #4
 80071d6:	4619      	mov	r1, r3
 80071d8:	4610      	mov	r0, r2
 80071da:	f000 fc51 	bl	8007a80 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80071de:	687b      	ldr	r3, [r7, #4]
 80071e0:	2201      	movs	r2, #1
 80071e2:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80071e6:	687b      	ldr	r3, [r7, #4]
 80071e8:	2201      	movs	r2, #1
 80071ea:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80071ee:	687b      	ldr	r3, [r7, #4]
 80071f0:	2201      	movs	r2, #1
 80071f2:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80071f6:	687b      	ldr	r3, [r7, #4]
 80071f8:	2201      	movs	r2, #1
 80071fa:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80071fe:	687b      	ldr	r3, [r7, #4]
 8007200:	2201      	movs	r2, #1
 8007202:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8007206:	687b      	ldr	r3, [r7, #4]
 8007208:	2201      	movs	r2, #1
 800720a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800720e:	687b      	ldr	r3, [r7, #4]
 8007210:	2201      	movs	r2, #1
 8007212:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007216:	687b      	ldr	r3, [r7, #4]
 8007218:	2201      	movs	r2, #1
 800721a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800721e:	687b      	ldr	r3, [r7, #4]
 8007220:	2201      	movs	r2, #1
 8007222:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8007226:	687b      	ldr	r3, [r7, #4]
 8007228:	2201      	movs	r2, #1
 800722a:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800722e:	687b      	ldr	r3, [r7, #4]
 8007230:	2201      	movs	r2, #1
 8007232:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8007236:	687b      	ldr	r3, [r7, #4]
 8007238:	2201      	movs	r2, #1
 800723a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800723e:	2300      	movs	r3, #0
}
 8007240:	4618      	mov	r0, r3
 8007242:	3708      	adds	r7, #8
 8007244:	46bd      	mov	sp, r7
 8007246:	bd80      	pop	{r7, pc}

08007248 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8007248:	b480      	push	{r7}
 800724a:	b085      	sub	sp, #20
 800724c:	af00      	add	r7, sp, #0
 800724e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8007250:	687b      	ldr	r3, [r7, #4]
 8007252:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007256:	b2db      	uxtb	r3, r3
 8007258:	2b01      	cmp	r3, #1
 800725a:	d001      	beq.n	8007260 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 800725c:	2301      	movs	r3, #1
 800725e:	e019      	b.n	8007294 <HAL_TIM_Base_Start+0x4c>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007260:	687b      	ldr	r3, [r7, #4]
 8007262:	2202      	movs	r2, #2
 8007264:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8007268:	687b      	ldr	r3, [r7, #4]
 800726a:	681b      	ldr	r3, [r3, #0]
 800726c:	689a      	ldr	r2, [r3, #8]
 800726e:	4b0c      	ldr	r3, [pc, #48]	; (80072a0 <HAL_TIM_Base_Start+0x58>)
 8007270:	4013      	ands	r3, r2
 8007272:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007274:	68fb      	ldr	r3, [r7, #12]
 8007276:	2b06      	cmp	r3, #6
 8007278:	d00b      	beq.n	8007292 <HAL_TIM_Base_Start+0x4a>
 800727a:	68fb      	ldr	r3, [r7, #12]
 800727c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007280:	d007      	beq.n	8007292 <HAL_TIM_Base_Start+0x4a>
  {
    __HAL_TIM_ENABLE(htim);
 8007282:	687b      	ldr	r3, [r7, #4]
 8007284:	681b      	ldr	r3, [r3, #0]
 8007286:	681a      	ldr	r2, [r3, #0]
 8007288:	687b      	ldr	r3, [r7, #4]
 800728a:	681b      	ldr	r3, [r3, #0]
 800728c:	f042 0201 	orr.w	r2, r2, #1
 8007290:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8007292:	2300      	movs	r3, #0
}
 8007294:	4618      	mov	r0, r3
 8007296:	3714      	adds	r7, #20
 8007298:	46bd      	mov	sp, r7
 800729a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800729e:	4770      	bx	lr
 80072a0:	00010007 	.word	0x00010007

080072a4 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80072a4:	b480      	push	{r7}
 80072a6:	b085      	sub	sp, #20
 80072a8:	af00      	add	r7, sp, #0
 80072aa:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80072ac:	687b      	ldr	r3, [r7, #4]
 80072ae:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80072b2:	b2db      	uxtb	r3, r3
 80072b4:	2b01      	cmp	r3, #1
 80072b6:	d001      	beq.n	80072bc <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80072b8:	2301      	movs	r3, #1
 80072ba:	e021      	b.n	8007300 <HAL_TIM_Base_Start_IT+0x5c>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80072bc:	687b      	ldr	r3, [r7, #4]
 80072be:	2202      	movs	r2, #2
 80072c0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80072c4:	687b      	ldr	r3, [r7, #4]
 80072c6:	681b      	ldr	r3, [r3, #0]
 80072c8:	68da      	ldr	r2, [r3, #12]
 80072ca:	687b      	ldr	r3, [r7, #4]
 80072cc:	681b      	ldr	r3, [r3, #0]
 80072ce:	f042 0201 	orr.w	r2, r2, #1
 80072d2:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80072d4:	687b      	ldr	r3, [r7, #4]
 80072d6:	681b      	ldr	r3, [r3, #0]
 80072d8:	689a      	ldr	r2, [r3, #8]
 80072da:	4b0c      	ldr	r3, [pc, #48]	; (800730c <HAL_TIM_Base_Start_IT+0x68>)
 80072dc:	4013      	ands	r3, r2
 80072de:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80072e0:	68fb      	ldr	r3, [r7, #12]
 80072e2:	2b06      	cmp	r3, #6
 80072e4:	d00b      	beq.n	80072fe <HAL_TIM_Base_Start_IT+0x5a>
 80072e6:	68fb      	ldr	r3, [r7, #12]
 80072e8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80072ec:	d007      	beq.n	80072fe <HAL_TIM_Base_Start_IT+0x5a>
  {
    __HAL_TIM_ENABLE(htim);
 80072ee:	687b      	ldr	r3, [r7, #4]
 80072f0:	681b      	ldr	r3, [r3, #0]
 80072f2:	681a      	ldr	r2, [r3, #0]
 80072f4:	687b      	ldr	r3, [r7, #4]
 80072f6:	681b      	ldr	r3, [r3, #0]
 80072f8:	f042 0201 	orr.w	r2, r2, #1
 80072fc:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80072fe:	2300      	movs	r3, #0
}
 8007300:	4618      	mov	r0, r3
 8007302:	3714      	adds	r7, #20
 8007304:	46bd      	mov	sp, r7
 8007306:	f85d 7b04 	ldr.w	r7, [sp], #4
 800730a:	4770      	bx	lr
 800730c:	00010007 	.word	0x00010007

08007310 <HAL_TIM_Base_Stop_IT>:
  * @brief  Stops the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop_IT(TIM_HandleTypeDef *htim)
{
 8007310:	b480      	push	{r7}
 8007312:	b083      	sub	sp, #12
 8007314:	af00      	add	r7, sp, #0
 8007316:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  
  /* Disable the TIM Update interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_UPDATE);
 8007318:	687b      	ldr	r3, [r7, #4]
 800731a:	681b      	ldr	r3, [r3, #0]
 800731c:	68da      	ldr	r2, [r3, #12]
 800731e:	687b      	ldr	r3, [r7, #4]
 8007320:	681b      	ldr	r3, [r3, #0]
 8007322:	f022 0201 	bic.w	r2, r2, #1
 8007326:	60da      	str	r2, [r3, #12]

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8007328:	687b      	ldr	r3, [r7, #4]
 800732a:	681b      	ldr	r3, [r3, #0]
 800732c:	6a1a      	ldr	r2, [r3, #32]
 800732e:	f241 1311 	movw	r3, #4369	; 0x1111
 8007332:	4013      	ands	r3, r2
 8007334:	2b00      	cmp	r3, #0
 8007336:	d10f      	bne.n	8007358 <HAL_TIM_Base_Stop_IT+0x48>
 8007338:	687b      	ldr	r3, [r7, #4]
 800733a:	681b      	ldr	r3, [r3, #0]
 800733c:	6a1a      	ldr	r2, [r3, #32]
 800733e:	f244 4344 	movw	r3, #17476	; 0x4444
 8007342:	4013      	ands	r3, r2
 8007344:	2b00      	cmp	r3, #0
 8007346:	d107      	bne.n	8007358 <HAL_TIM_Base_Stop_IT+0x48>
 8007348:	687b      	ldr	r3, [r7, #4]
 800734a:	681b      	ldr	r3, [r3, #0]
 800734c:	681a      	ldr	r2, [r3, #0]
 800734e:	687b      	ldr	r3, [r7, #4]
 8007350:	681b      	ldr	r3, [r3, #0]
 8007352:	f022 0201 	bic.w	r2, r2, #1
 8007356:	601a      	str	r2, [r3, #0]

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 8007358:	687b      	ldr	r3, [r7, #4]
 800735a:	2201      	movs	r2, #1
 800735c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Return function status */
  return HAL_OK;
 8007360:	2300      	movs	r3, #0
}
 8007362:	4618      	mov	r0, r3
 8007364:	370c      	adds	r7, #12
 8007366:	46bd      	mov	sp, r7
 8007368:	f85d 7b04 	ldr.w	r7, [sp], #4
 800736c:	4770      	bx	lr

0800736e <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim,  TIM_Encoder_InitTypeDef *sConfig)
{
 800736e:	b580      	push	{r7, lr}
 8007370:	b086      	sub	sp, #24
 8007372:	af00      	add	r7, sp, #0
 8007374:	6078      	str	r0, [r7, #4]
 8007376:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 8007378:	687b      	ldr	r3, [r7, #4]
 800737a:	2b00      	cmp	r3, #0
 800737c:	d101      	bne.n	8007382 <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 800737e:	2301      	movs	r3, #1
 8007380:	e097      	b.n	80074b2 <HAL_TIM_Encoder_Init+0x144>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC1Prescaler));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));

  if (htim->State == HAL_TIM_STATE_RESET)
 8007382:	687b      	ldr	r3, [r7, #4]
 8007384:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007388:	b2db      	uxtb	r3, r3
 800738a:	2b00      	cmp	r3, #0
 800738c:	d106      	bne.n	800739c <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800738e:	687b      	ldr	r3, [r7, #4]
 8007390:	2200      	movs	r2, #0
 8007392:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 8007396:	6878      	ldr	r0, [r7, #4]
 8007398:	f7fb fd34 	bl	8002e04 <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800739c:	687b      	ldr	r3, [r7, #4]
 800739e:	2202      	movs	r2, #2
 80073a0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 80073a4:	687b      	ldr	r3, [r7, #4]
 80073a6:	681b      	ldr	r3, [r3, #0]
 80073a8:	689b      	ldr	r3, [r3, #8]
 80073aa:	687a      	ldr	r2, [r7, #4]
 80073ac:	6812      	ldr	r2, [r2, #0]
 80073ae:	f423 33a0 	bic.w	r3, r3, #81920	; 0x14000
 80073b2:	f023 0307 	bic.w	r3, r3, #7
 80073b6:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80073b8:	687b      	ldr	r3, [r7, #4]
 80073ba:	681a      	ldr	r2, [r3, #0]
 80073bc:	687b      	ldr	r3, [r7, #4]
 80073be:	3304      	adds	r3, #4
 80073c0:	4619      	mov	r1, r3
 80073c2:	4610      	mov	r0, r2
 80073c4:	f000 fb5c 	bl	8007a80 <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80073c8:	687b      	ldr	r3, [r7, #4]
 80073ca:	681b      	ldr	r3, [r3, #0]
 80073cc:	689b      	ldr	r3, [r3, #8]
 80073ce:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 80073d0:	687b      	ldr	r3, [r7, #4]
 80073d2:	681b      	ldr	r3, [r3, #0]
 80073d4:	699b      	ldr	r3, [r3, #24]
 80073d6:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 80073d8:	687b      	ldr	r3, [r7, #4]
 80073da:	681b      	ldr	r3, [r3, #0]
 80073dc:	6a1b      	ldr	r3, [r3, #32]
 80073de:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 80073e0:	683b      	ldr	r3, [r7, #0]
 80073e2:	681b      	ldr	r3, [r3, #0]
 80073e4:	697a      	ldr	r2, [r7, #20]
 80073e6:	4313      	orrs	r3, r2
 80073e8:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 80073ea:	693b      	ldr	r3, [r7, #16]
 80073ec:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80073f0:	f023 0303 	bic.w	r3, r3, #3
 80073f4:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 80073f6:	683b      	ldr	r3, [r7, #0]
 80073f8:	689a      	ldr	r2, [r3, #8]
 80073fa:	683b      	ldr	r3, [r7, #0]
 80073fc:	699b      	ldr	r3, [r3, #24]
 80073fe:	021b      	lsls	r3, r3, #8
 8007400:	4313      	orrs	r3, r2
 8007402:	693a      	ldr	r2, [r7, #16]
 8007404:	4313      	orrs	r3, r2
 8007406:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 8007408:	693b      	ldr	r3, [r7, #16]
 800740a:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 800740e:	f023 030c 	bic.w	r3, r3, #12
 8007412:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 8007414:	693b      	ldr	r3, [r7, #16]
 8007416:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800741a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800741e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 8007420:	683b      	ldr	r3, [r7, #0]
 8007422:	68da      	ldr	r2, [r3, #12]
 8007424:	683b      	ldr	r3, [r7, #0]
 8007426:	69db      	ldr	r3, [r3, #28]
 8007428:	021b      	lsls	r3, r3, #8
 800742a:	4313      	orrs	r3, r2
 800742c:	693a      	ldr	r2, [r7, #16]
 800742e:	4313      	orrs	r3, r2
 8007430:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 8007432:	683b      	ldr	r3, [r7, #0]
 8007434:	691b      	ldr	r3, [r3, #16]
 8007436:	011a      	lsls	r2, r3, #4
 8007438:	683b      	ldr	r3, [r7, #0]
 800743a:	6a1b      	ldr	r3, [r3, #32]
 800743c:	031b      	lsls	r3, r3, #12
 800743e:	4313      	orrs	r3, r2
 8007440:	693a      	ldr	r2, [r7, #16]
 8007442:	4313      	orrs	r3, r2
 8007444:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 8007446:	68fb      	ldr	r3, [r7, #12]
 8007448:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 800744c:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 800744e:	68fb      	ldr	r3, [r7, #12]
 8007450:	f023 0388 	bic.w	r3, r3, #136	; 0x88
 8007454:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 8007456:	683b      	ldr	r3, [r7, #0]
 8007458:	685a      	ldr	r2, [r3, #4]
 800745a:	683b      	ldr	r3, [r7, #0]
 800745c:	695b      	ldr	r3, [r3, #20]
 800745e:	011b      	lsls	r3, r3, #4
 8007460:	4313      	orrs	r3, r2
 8007462:	68fa      	ldr	r2, [r7, #12]
 8007464:	4313      	orrs	r3, r2
 8007466:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8007468:	687b      	ldr	r3, [r7, #4]
 800746a:	681b      	ldr	r3, [r3, #0]
 800746c:	697a      	ldr	r2, [r7, #20]
 800746e:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 8007470:	687b      	ldr	r3, [r7, #4]
 8007472:	681b      	ldr	r3, [r3, #0]
 8007474:	693a      	ldr	r2, [r7, #16]
 8007476:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 8007478:	687b      	ldr	r3, [r7, #4]
 800747a:	681b      	ldr	r3, [r3, #0]
 800747c:	68fa      	ldr	r2, [r7, #12]
 800747e:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8007480:	687b      	ldr	r3, [r7, #4]
 8007482:	2201      	movs	r2, #1
 8007484:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8007488:	687b      	ldr	r3, [r7, #4]
 800748a:	2201      	movs	r2, #1
 800748c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8007490:	687b      	ldr	r3, [r7, #4]
 8007492:	2201      	movs	r2, #1
 8007494:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8007498:	687b      	ldr	r3, [r7, #4]
 800749a:	2201      	movs	r2, #1
 800749c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 80074a0:	687b      	ldr	r3, [r7, #4]
 80074a2:	2201      	movs	r2, #1
 80074a4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80074a8:	687b      	ldr	r3, [r7, #4]
 80074aa:	2201      	movs	r2, #1
 80074ac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80074b0:	2300      	movs	r3, #0
}
 80074b2:	4618      	mov	r0, r3
 80074b4:	3718      	adds	r7, #24
 80074b6:	46bd      	mov	sp, r7
 80074b8:	bd80      	pop	{r7, pc}

080074ba <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80074ba:	b580      	push	{r7, lr}
 80074bc:	b082      	sub	sp, #8
 80074be:	af00      	add	r7, sp, #0
 80074c0:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80074c2:	687b      	ldr	r3, [r7, #4]
 80074c4:	681b      	ldr	r3, [r3, #0]
 80074c6:	691b      	ldr	r3, [r3, #16]
 80074c8:	f003 0302 	and.w	r3, r3, #2
 80074cc:	2b02      	cmp	r3, #2
 80074ce:	d122      	bne.n	8007516 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80074d0:	687b      	ldr	r3, [r7, #4]
 80074d2:	681b      	ldr	r3, [r3, #0]
 80074d4:	68db      	ldr	r3, [r3, #12]
 80074d6:	f003 0302 	and.w	r3, r3, #2
 80074da:	2b02      	cmp	r3, #2
 80074dc:	d11b      	bne.n	8007516 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80074de:	687b      	ldr	r3, [r7, #4]
 80074e0:	681b      	ldr	r3, [r3, #0]
 80074e2:	f06f 0202 	mvn.w	r2, #2
 80074e6:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80074e8:	687b      	ldr	r3, [r7, #4]
 80074ea:	2201      	movs	r2, #1
 80074ec:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80074ee:	687b      	ldr	r3, [r7, #4]
 80074f0:	681b      	ldr	r3, [r3, #0]
 80074f2:	699b      	ldr	r3, [r3, #24]
 80074f4:	f003 0303 	and.w	r3, r3, #3
 80074f8:	2b00      	cmp	r3, #0
 80074fa:	d003      	beq.n	8007504 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80074fc:	6878      	ldr	r0, [r7, #4]
 80074fe:	f000 faa1 	bl	8007a44 <HAL_TIM_IC_CaptureCallback>
 8007502:	e005      	b.n	8007510 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8007504:	6878      	ldr	r0, [r7, #4]
 8007506:	f000 fa93 	bl	8007a30 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800750a:	6878      	ldr	r0, [r7, #4]
 800750c:	f000 faa4 	bl	8007a58 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007510:	687b      	ldr	r3, [r7, #4]
 8007512:	2200      	movs	r2, #0
 8007514:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8007516:	687b      	ldr	r3, [r7, #4]
 8007518:	681b      	ldr	r3, [r3, #0]
 800751a:	691b      	ldr	r3, [r3, #16]
 800751c:	f003 0304 	and.w	r3, r3, #4
 8007520:	2b04      	cmp	r3, #4
 8007522:	d122      	bne.n	800756a <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8007524:	687b      	ldr	r3, [r7, #4]
 8007526:	681b      	ldr	r3, [r3, #0]
 8007528:	68db      	ldr	r3, [r3, #12]
 800752a:	f003 0304 	and.w	r3, r3, #4
 800752e:	2b04      	cmp	r3, #4
 8007530:	d11b      	bne.n	800756a <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8007532:	687b      	ldr	r3, [r7, #4]
 8007534:	681b      	ldr	r3, [r3, #0]
 8007536:	f06f 0204 	mvn.w	r2, #4
 800753a:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800753c:	687b      	ldr	r3, [r7, #4]
 800753e:	2202      	movs	r2, #2
 8007540:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8007542:	687b      	ldr	r3, [r7, #4]
 8007544:	681b      	ldr	r3, [r3, #0]
 8007546:	699b      	ldr	r3, [r3, #24]
 8007548:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800754c:	2b00      	cmp	r3, #0
 800754e:	d003      	beq.n	8007558 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8007550:	6878      	ldr	r0, [r7, #4]
 8007552:	f000 fa77 	bl	8007a44 <HAL_TIM_IC_CaptureCallback>
 8007556:	e005      	b.n	8007564 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8007558:	6878      	ldr	r0, [r7, #4]
 800755a:	f000 fa69 	bl	8007a30 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800755e:	6878      	ldr	r0, [r7, #4]
 8007560:	f000 fa7a 	bl	8007a58 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007564:	687b      	ldr	r3, [r7, #4]
 8007566:	2200      	movs	r2, #0
 8007568:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800756a:	687b      	ldr	r3, [r7, #4]
 800756c:	681b      	ldr	r3, [r3, #0]
 800756e:	691b      	ldr	r3, [r3, #16]
 8007570:	f003 0308 	and.w	r3, r3, #8
 8007574:	2b08      	cmp	r3, #8
 8007576:	d122      	bne.n	80075be <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8007578:	687b      	ldr	r3, [r7, #4]
 800757a:	681b      	ldr	r3, [r3, #0]
 800757c:	68db      	ldr	r3, [r3, #12]
 800757e:	f003 0308 	and.w	r3, r3, #8
 8007582:	2b08      	cmp	r3, #8
 8007584:	d11b      	bne.n	80075be <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8007586:	687b      	ldr	r3, [r7, #4]
 8007588:	681b      	ldr	r3, [r3, #0]
 800758a:	f06f 0208 	mvn.w	r2, #8
 800758e:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8007590:	687b      	ldr	r3, [r7, #4]
 8007592:	2204      	movs	r2, #4
 8007594:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8007596:	687b      	ldr	r3, [r7, #4]
 8007598:	681b      	ldr	r3, [r3, #0]
 800759a:	69db      	ldr	r3, [r3, #28]
 800759c:	f003 0303 	and.w	r3, r3, #3
 80075a0:	2b00      	cmp	r3, #0
 80075a2:	d003      	beq.n	80075ac <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80075a4:	6878      	ldr	r0, [r7, #4]
 80075a6:	f000 fa4d 	bl	8007a44 <HAL_TIM_IC_CaptureCallback>
 80075aa:	e005      	b.n	80075b8 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80075ac:	6878      	ldr	r0, [r7, #4]
 80075ae:	f000 fa3f 	bl	8007a30 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80075b2:	6878      	ldr	r0, [r7, #4]
 80075b4:	f000 fa50 	bl	8007a58 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80075b8:	687b      	ldr	r3, [r7, #4]
 80075ba:	2200      	movs	r2, #0
 80075bc:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80075be:	687b      	ldr	r3, [r7, #4]
 80075c0:	681b      	ldr	r3, [r3, #0]
 80075c2:	691b      	ldr	r3, [r3, #16]
 80075c4:	f003 0310 	and.w	r3, r3, #16
 80075c8:	2b10      	cmp	r3, #16
 80075ca:	d122      	bne.n	8007612 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80075cc:	687b      	ldr	r3, [r7, #4]
 80075ce:	681b      	ldr	r3, [r3, #0]
 80075d0:	68db      	ldr	r3, [r3, #12]
 80075d2:	f003 0310 	and.w	r3, r3, #16
 80075d6:	2b10      	cmp	r3, #16
 80075d8:	d11b      	bne.n	8007612 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80075da:	687b      	ldr	r3, [r7, #4]
 80075dc:	681b      	ldr	r3, [r3, #0]
 80075de:	f06f 0210 	mvn.w	r2, #16
 80075e2:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80075e4:	687b      	ldr	r3, [r7, #4]
 80075e6:	2208      	movs	r2, #8
 80075e8:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80075ea:	687b      	ldr	r3, [r7, #4]
 80075ec:	681b      	ldr	r3, [r3, #0]
 80075ee:	69db      	ldr	r3, [r3, #28]
 80075f0:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80075f4:	2b00      	cmp	r3, #0
 80075f6:	d003      	beq.n	8007600 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80075f8:	6878      	ldr	r0, [r7, #4]
 80075fa:	f000 fa23 	bl	8007a44 <HAL_TIM_IC_CaptureCallback>
 80075fe:	e005      	b.n	800760c <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8007600:	6878      	ldr	r0, [r7, #4]
 8007602:	f000 fa15 	bl	8007a30 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007606:	6878      	ldr	r0, [r7, #4]
 8007608:	f000 fa26 	bl	8007a58 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800760c:	687b      	ldr	r3, [r7, #4]
 800760e:	2200      	movs	r2, #0
 8007610:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8007612:	687b      	ldr	r3, [r7, #4]
 8007614:	681b      	ldr	r3, [r3, #0]
 8007616:	691b      	ldr	r3, [r3, #16]
 8007618:	f003 0301 	and.w	r3, r3, #1
 800761c:	2b01      	cmp	r3, #1
 800761e:	d10e      	bne.n	800763e <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8007620:	687b      	ldr	r3, [r7, #4]
 8007622:	681b      	ldr	r3, [r3, #0]
 8007624:	68db      	ldr	r3, [r3, #12]
 8007626:	f003 0301 	and.w	r3, r3, #1
 800762a:	2b01      	cmp	r3, #1
 800762c:	d107      	bne.n	800763e <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800762e:	687b      	ldr	r3, [r7, #4]
 8007630:	681b      	ldr	r3, [r3, #0]
 8007632:	f06f 0201 	mvn.w	r2, #1
 8007636:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8007638:	6878      	ldr	r0, [r7, #4]
 800763a:	f000 f9ef 	bl	8007a1c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800763e:	687b      	ldr	r3, [r7, #4]
 8007640:	681b      	ldr	r3, [r3, #0]
 8007642:	691b      	ldr	r3, [r3, #16]
 8007644:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007648:	2b80      	cmp	r3, #128	; 0x80
 800764a:	d10e      	bne.n	800766a <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800764c:	687b      	ldr	r3, [r7, #4]
 800764e:	681b      	ldr	r3, [r3, #0]
 8007650:	68db      	ldr	r3, [r3, #12]
 8007652:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007656:	2b80      	cmp	r3, #128	; 0x80
 8007658:	d107      	bne.n	800766a <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800765a:	687b      	ldr	r3, [r7, #4]
 800765c:	681b      	ldr	r3, [r3, #0]
 800765e:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8007662:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8007664:	6878      	ldr	r0, [r7, #4]
 8007666:	f000 fd5d 	bl	8008124 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 800766a:	687b      	ldr	r3, [r7, #4]
 800766c:	681b      	ldr	r3, [r3, #0]
 800766e:	691b      	ldr	r3, [r3, #16]
 8007670:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007674:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007678:	d10e      	bne.n	8007698 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800767a:	687b      	ldr	r3, [r7, #4]
 800767c:	681b      	ldr	r3, [r3, #0]
 800767e:	68db      	ldr	r3, [r3, #12]
 8007680:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007684:	2b80      	cmp	r3, #128	; 0x80
 8007686:	d107      	bne.n	8007698 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8007688:	687b      	ldr	r3, [r7, #4]
 800768a:	681b      	ldr	r3, [r3, #0]
 800768c:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8007690:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8007692:	6878      	ldr	r0, [r7, #4]
 8007694:	f000 fd50 	bl	8008138 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8007698:	687b      	ldr	r3, [r7, #4]
 800769a:	681b      	ldr	r3, [r3, #0]
 800769c:	691b      	ldr	r3, [r3, #16]
 800769e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80076a2:	2b40      	cmp	r3, #64	; 0x40
 80076a4:	d10e      	bne.n	80076c4 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80076a6:	687b      	ldr	r3, [r7, #4]
 80076a8:	681b      	ldr	r3, [r3, #0]
 80076aa:	68db      	ldr	r3, [r3, #12]
 80076ac:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80076b0:	2b40      	cmp	r3, #64	; 0x40
 80076b2:	d107      	bne.n	80076c4 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80076b4:	687b      	ldr	r3, [r7, #4]
 80076b6:	681b      	ldr	r3, [r3, #0]
 80076b8:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80076bc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80076be:	6878      	ldr	r0, [r7, #4]
 80076c0:	f000 f9d4 	bl	8007a6c <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80076c4:	687b      	ldr	r3, [r7, #4]
 80076c6:	681b      	ldr	r3, [r3, #0]
 80076c8:	691b      	ldr	r3, [r3, #16]
 80076ca:	f003 0320 	and.w	r3, r3, #32
 80076ce:	2b20      	cmp	r3, #32
 80076d0:	d10e      	bne.n	80076f0 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80076d2:	687b      	ldr	r3, [r7, #4]
 80076d4:	681b      	ldr	r3, [r3, #0]
 80076d6:	68db      	ldr	r3, [r3, #12]
 80076d8:	f003 0320 	and.w	r3, r3, #32
 80076dc:	2b20      	cmp	r3, #32
 80076de:	d107      	bne.n	80076f0 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80076e0:	687b      	ldr	r3, [r7, #4]
 80076e2:	681b      	ldr	r3, [r3, #0]
 80076e4:	f06f 0220 	mvn.w	r2, #32
 80076e8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80076ea:	6878      	ldr	r0, [r7, #4]
 80076ec:	f000 fd10 	bl	8008110 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Encoder index event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_IDX) != RESET)
 80076f0:	687b      	ldr	r3, [r7, #4]
 80076f2:	681b      	ldr	r3, [r3, #0]
 80076f4:	691b      	ldr	r3, [r3, #16]
 80076f6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80076fa:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80076fe:	d10f      	bne.n	8007720 <HAL_TIM_IRQHandler+0x266>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_IDX) != RESET)
 8007700:	687b      	ldr	r3, [r7, #4]
 8007702:	681b      	ldr	r3, [r3, #0]
 8007704:	68db      	ldr	r3, [r3, #12]
 8007706:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800770a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800770e:	d107      	bne.n	8007720 <HAL_TIM_IRQHandler+0x266>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_IDX);
 8007710:	687b      	ldr	r3, [r7, #4]
 8007712:	681b      	ldr	r3, [r3, #0]
 8007714:	f46f 1280 	mvn.w	r2, #1048576	; 0x100000
 8007718:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->EncoderIndexCallback(htim);
#else
      HAL_TIMEx_EncoderIndexCallback(htim);
 800771a:	6878      	ldr	r0, [r7, #4]
 800771c:	f000 fd16 	bl	800814c <HAL_TIMEx_EncoderIndexCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Direction change event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_DIR) != RESET)
 8007720:	687b      	ldr	r3, [r7, #4]
 8007722:	681b      	ldr	r3, [r3, #0]
 8007724:	691b      	ldr	r3, [r3, #16]
 8007726:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800772a:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800772e:	d10f      	bne.n	8007750 <HAL_TIM_IRQHandler+0x296>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_DIR) != RESET)
 8007730:	687b      	ldr	r3, [r7, #4]
 8007732:	681b      	ldr	r3, [r3, #0]
 8007734:	68db      	ldr	r3, [r3, #12]
 8007736:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800773a:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800773e:	d107      	bne.n	8007750 <HAL_TIM_IRQHandler+0x296>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_DIR);
 8007740:	687b      	ldr	r3, [r7, #4]
 8007742:	681b      	ldr	r3, [r3, #0]
 8007744:	f46f 1200 	mvn.w	r2, #2097152	; 0x200000
 8007748:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->DirectionChangeCallback(htim);
#else
      HAL_TIMEx_DirectionChangeCallback(htim);
 800774a:	6878      	ldr	r0, [r7, #4]
 800774c:	f000 fd08 	bl	8008160 <HAL_TIMEx_DirectionChangeCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Index error event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_IERR) != RESET)
 8007750:	687b      	ldr	r3, [r7, #4]
 8007752:	681b      	ldr	r3, [r3, #0]
 8007754:	691b      	ldr	r3, [r3, #16]
 8007756:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800775a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800775e:	d10f      	bne.n	8007780 <HAL_TIM_IRQHandler+0x2c6>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_IERR) != RESET)
 8007760:	687b      	ldr	r3, [r7, #4]
 8007762:	681b      	ldr	r3, [r3, #0]
 8007764:	68db      	ldr	r3, [r3, #12]
 8007766:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800776a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800776e:	d107      	bne.n	8007780 <HAL_TIM_IRQHandler+0x2c6>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_IERR);
 8007770:	687b      	ldr	r3, [r7, #4]
 8007772:	681b      	ldr	r3, [r3, #0]
 8007774:	f46f 0280 	mvn.w	r2, #4194304	; 0x400000
 8007778:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->IndexErrorCallback(htim);
#else
      HAL_TIMEx_IndexErrorCallback(htim);
 800777a:	6878      	ldr	r0, [r7, #4]
 800777c:	f000 fcfa 	bl	8008174 <HAL_TIMEx_IndexErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Transition error event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TERR) != RESET)
 8007780:	687b      	ldr	r3, [r7, #4]
 8007782:	681b      	ldr	r3, [r3, #0]
 8007784:	691b      	ldr	r3, [r3, #16]
 8007786:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800778a:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800778e:	d10f      	bne.n	80077b0 <HAL_TIM_IRQHandler+0x2f6>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TERR) != RESET)
 8007790:	687b      	ldr	r3, [r7, #4]
 8007792:	681b      	ldr	r3, [r3, #0]
 8007794:	68db      	ldr	r3, [r3, #12]
 8007796:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800779a:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800779e:	d107      	bne.n	80077b0 <HAL_TIM_IRQHandler+0x2f6>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_TERR);
 80077a0:	687b      	ldr	r3, [r7, #4]
 80077a2:	681b      	ldr	r3, [r3, #0]
 80077a4:	f46f 0200 	mvn.w	r2, #8388608	; 0x800000
 80077a8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TransitionErrorCallback(htim);
#else
      HAL_TIMEx_TransitionErrorCallback(htim);
 80077aa:	6878      	ldr	r0, [r7, #4]
 80077ac:	f000 fcec 	bl	8008188 <HAL_TIMEx_TransitionErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80077b0:	bf00      	nop
 80077b2:	3708      	adds	r7, #8
 80077b4:	46bd      	mov	sp, r7
 80077b6:	bd80      	pop	{r7, pc}

080077b8 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80077b8:	b580      	push	{r7, lr}
 80077ba:	b084      	sub	sp, #16
 80077bc:	af00      	add	r7, sp, #0
 80077be:	6078      	str	r0, [r7, #4]
 80077c0:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80077c2:	687b      	ldr	r3, [r7, #4]
 80077c4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80077c8:	2b01      	cmp	r3, #1
 80077ca:	d101      	bne.n	80077d0 <HAL_TIM_ConfigClockSource+0x18>
 80077cc:	2302      	movs	r3, #2
 80077ce:	e0d2      	b.n	8007976 <HAL_TIM_ConfigClockSource+0x1be>
 80077d0:	687b      	ldr	r3, [r7, #4]
 80077d2:	2201      	movs	r2, #1
 80077d4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80077d8:	687b      	ldr	r3, [r7, #4]
 80077da:	2202      	movs	r2, #2
 80077dc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80077e0:	687b      	ldr	r3, [r7, #4]
 80077e2:	681b      	ldr	r3, [r3, #0]
 80077e4:	689b      	ldr	r3, [r3, #8]
 80077e6:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80077e8:	68fb      	ldr	r3, [r7, #12]
 80077ea:	f423 1344 	bic.w	r3, r3, #3211264	; 0x310000
 80077ee:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 80077f2:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80077f4:	68fb      	ldr	r3, [r7, #12]
 80077f6:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80077fa:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 80077fc:	687b      	ldr	r3, [r7, #4]
 80077fe:	681b      	ldr	r3, [r3, #0]
 8007800:	68fa      	ldr	r2, [r7, #12]
 8007802:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8007804:	683b      	ldr	r3, [r7, #0]
 8007806:	681b      	ldr	r3, [r3, #0]
 8007808:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800780c:	f000 80a9 	beq.w	8007962 <HAL_TIM_ConfigClockSource+0x1aa>
 8007810:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007814:	d81a      	bhi.n	800784c <HAL_TIM_ConfigClockSource+0x94>
 8007816:	2b30      	cmp	r3, #48	; 0x30
 8007818:	f000 809a 	beq.w	8007950 <HAL_TIM_ConfigClockSource+0x198>
 800781c:	2b30      	cmp	r3, #48	; 0x30
 800781e:	d809      	bhi.n	8007834 <HAL_TIM_ConfigClockSource+0x7c>
 8007820:	2b10      	cmp	r3, #16
 8007822:	f000 8095 	beq.w	8007950 <HAL_TIM_ConfigClockSource+0x198>
 8007826:	2b20      	cmp	r3, #32
 8007828:	f000 8092 	beq.w	8007950 <HAL_TIM_ConfigClockSource+0x198>
 800782c:	2b00      	cmp	r3, #0
 800782e:	f000 808f 	beq.w	8007950 <HAL_TIM_ConfigClockSource+0x198>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
      break;
    }

    default:
      break;
 8007832:	e097      	b.n	8007964 <HAL_TIM_ConfigClockSource+0x1ac>
  switch (sClockSourceConfig->ClockSource)
 8007834:	2b50      	cmp	r3, #80	; 0x50
 8007836:	d05b      	beq.n	80078f0 <HAL_TIM_ConfigClockSource+0x138>
 8007838:	2b50      	cmp	r3, #80	; 0x50
 800783a:	d802      	bhi.n	8007842 <HAL_TIM_ConfigClockSource+0x8a>
 800783c:	2b40      	cmp	r3, #64	; 0x40
 800783e:	d077      	beq.n	8007930 <HAL_TIM_ConfigClockSource+0x178>
      break;
 8007840:	e090      	b.n	8007964 <HAL_TIM_ConfigClockSource+0x1ac>
  switch (sClockSourceConfig->ClockSource)
 8007842:	2b60      	cmp	r3, #96	; 0x60
 8007844:	d064      	beq.n	8007910 <HAL_TIM_ConfigClockSource+0x158>
 8007846:	2b70      	cmp	r3, #112	; 0x70
 8007848:	d028      	beq.n	800789c <HAL_TIM_ConfigClockSource+0xe4>
      break;
 800784a:	e08b      	b.n	8007964 <HAL_TIM_ConfigClockSource+0x1ac>
  switch (sClockSourceConfig->ClockSource)
 800784c:	4a4c      	ldr	r2, [pc, #304]	; (8007980 <HAL_TIM_ConfigClockSource+0x1c8>)
 800784e:	4293      	cmp	r3, r2
 8007850:	d07e      	beq.n	8007950 <HAL_TIM_ConfigClockSource+0x198>
 8007852:	4a4b      	ldr	r2, [pc, #300]	; (8007980 <HAL_TIM_ConfigClockSource+0x1c8>)
 8007854:	4293      	cmp	r3, r2
 8007856:	d810      	bhi.n	800787a <HAL_TIM_ConfigClockSource+0xc2>
 8007858:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800785c:	d078      	beq.n	8007950 <HAL_TIM_ConfigClockSource+0x198>
 800785e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8007862:	d803      	bhi.n	800786c <HAL_TIM_ConfigClockSource+0xb4>
 8007864:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007868:	d02f      	beq.n	80078ca <HAL_TIM_ConfigClockSource+0x112>
      break;
 800786a:	e07b      	b.n	8007964 <HAL_TIM_ConfigClockSource+0x1ac>
  switch (sClockSourceConfig->ClockSource)
 800786c:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 8007870:	d06e      	beq.n	8007950 <HAL_TIM_ConfigClockSource+0x198>
 8007872:	4a44      	ldr	r2, [pc, #272]	; (8007984 <HAL_TIM_ConfigClockSource+0x1cc>)
 8007874:	4293      	cmp	r3, r2
 8007876:	d06b      	beq.n	8007950 <HAL_TIM_ConfigClockSource+0x198>
      break;
 8007878:	e074      	b.n	8007964 <HAL_TIM_ConfigClockSource+0x1ac>
  switch (sClockSourceConfig->ClockSource)
 800787a:	4a43      	ldr	r2, [pc, #268]	; (8007988 <HAL_TIM_ConfigClockSource+0x1d0>)
 800787c:	4293      	cmp	r3, r2
 800787e:	d067      	beq.n	8007950 <HAL_TIM_ConfigClockSource+0x198>
 8007880:	4a41      	ldr	r2, [pc, #260]	; (8007988 <HAL_TIM_ConfigClockSource+0x1d0>)
 8007882:	4293      	cmp	r3, r2
 8007884:	d803      	bhi.n	800788e <HAL_TIM_ConfigClockSource+0xd6>
 8007886:	4a41      	ldr	r2, [pc, #260]	; (800798c <HAL_TIM_ConfigClockSource+0x1d4>)
 8007888:	4293      	cmp	r3, r2
 800788a:	d061      	beq.n	8007950 <HAL_TIM_ConfigClockSource+0x198>
      break;
 800788c:	e06a      	b.n	8007964 <HAL_TIM_ConfigClockSource+0x1ac>
  switch (sClockSourceConfig->ClockSource)
 800788e:	4a40      	ldr	r2, [pc, #256]	; (8007990 <HAL_TIM_ConfigClockSource+0x1d8>)
 8007890:	4293      	cmp	r3, r2
 8007892:	d05d      	beq.n	8007950 <HAL_TIM_ConfigClockSource+0x198>
 8007894:	4a3f      	ldr	r2, [pc, #252]	; (8007994 <HAL_TIM_ConfigClockSource+0x1dc>)
 8007896:	4293      	cmp	r3, r2
 8007898:	d05a      	beq.n	8007950 <HAL_TIM_ConfigClockSource+0x198>
      break;
 800789a:	e063      	b.n	8007964 <HAL_TIM_ConfigClockSource+0x1ac>
      TIM_ETR_SetConfig(htim->Instance,
 800789c:	687b      	ldr	r3, [r7, #4]
 800789e:	6818      	ldr	r0, [r3, #0]
 80078a0:	683b      	ldr	r3, [r7, #0]
 80078a2:	6899      	ldr	r1, [r3, #8]
 80078a4:	683b      	ldr	r3, [r7, #0]
 80078a6:	685a      	ldr	r2, [r3, #4]
 80078a8:	683b      	ldr	r3, [r7, #0]
 80078aa:	68db      	ldr	r3, [r3, #12]
 80078ac:	f000 fac8 	bl	8007e40 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 80078b0:	687b      	ldr	r3, [r7, #4]
 80078b2:	681b      	ldr	r3, [r3, #0]
 80078b4:	689b      	ldr	r3, [r3, #8]
 80078b6:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80078b8:	68fb      	ldr	r3, [r7, #12]
 80078ba:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 80078be:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 80078c0:	687b      	ldr	r3, [r7, #4]
 80078c2:	681b      	ldr	r3, [r3, #0]
 80078c4:	68fa      	ldr	r2, [r7, #12]
 80078c6:	609a      	str	r2, [r3, #8]
      break;
 80078c8:	e04c      	b.n	8007964 <HAL_TIM_ConfigClockSource+0x1ac>
      TIM_ETR_SetConfig(htim->Instance,
 80078ca:	687b      	ldr	r3, [r7, #4]
 80078cc:	6818      	ldr	r0, [r3, #0]
 80078ce:	683b      	ldr	r3, [r7, #0]
 80078d0:	6899      	ldr	r1, [r3, #8]
 80078d2:	683b      	ldr	r3, [r7, #0]
 80078d4:	685a      	ldr	r2, [r3, #4]
 80078d6:	683b      	ldr	r3, [r7, #0]
 80078d8:	68db      	ldr	r3, [r3, #12]
 80078da:	f000 fab1 	bl	8007e40 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80078de:	687b      	ldr	r3, [r7, #4]
 80078e0:	681b      	ldr	r3, [r3, #0]
 80078e2:	689a      	ldr	r2, [r3, #8]
 80078e4:	687b      	ldr	r3, [r7, #4]
 80078e6:	681b      	ldr	r3, [r3, #0]
 80078e8:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80078ec:	609a      	str	r2, [r3, #8]
      break;
 80078ee:	e039      	b.n	8007964 <HAL_TIM_ConfigClockSource+0x1ac>
      TIM_TI1_ConfigInputStage(htim->Instance,
 80078f0:	687b      	ldr	r3, [r7, #4]
 80078f2:	6818      	ldr	r0, [r3, #0]
 80078f4:	683b      	ldr	r3, [r7, #0]
 80078f6:	6859      	ldr	r1, [r3, #4]
 80078f8:	683b      	ldr	r3, [r7, #0]
 80078fa:	68db      	ldr	r3, [r3, #12]
 80078fc:	461a      	mov	r2, r3
 80078fe:	f000 fa23 	bl	8007d48 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8007902:	687b      	ldr	r3, [r7, #4]
 8007904:	681b      	ldr	r3, [r3, #0]
 8007906:	2150      	movs	r1, #80	; 0x50
 8007908:	4618      	mov	r0, r3
 800790a:	f000 fa7c 	bl	8007e06 <TIM_ITRx_SetConfig>
      break;
 800790e:	e029      	b.n	8007964 <HAL_TIM_ConfigClockSource+0x1ac>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8007910:	687b      	ldr	r3, [r7, #4]
 8007912:	6818      	ldr	r0, [r3, #0]
 8007914:	683b      	ldr	r3, [r7, #0]
 8007916:	6859      	ldr	r1, [r3, #4]
 8007918:	683b      	ldr	r3, [r7, #0]
 800791a:	68db      	ldr	r3, [r3, #12]
 800791c:	461a      	mov	r2, r3
 800791e:	f000 fa42 	bl	8007da6 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8007922:	687b      	ldr	r3, [r7, #4]
 8007924:	681b      	ldr	r3, [r3, #0]
 8007926:	2160      	movs	r1, #96	; 0x60
 8007928:	4618      	mov	r0, r3
 800792a:	f000 fa6c 	bl	8007e06 <TIM_ITRx_SetConfig>
      break;
 800792e:	e019      	b.n	8007964 <HAL_TIM_ConfigClockSource+0x1ac>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8007930:	687b      	ldr	r3, [r7, #4]
 8007932:	6818      	ldr	r0, [r3, #0]
 8007934:	683b      	ldr	r3, [r7, #0]
 8007936:	6859      	ldr	r1, [r3, #4]
 8007938:	683b      	ldr	r3, [r7, #0]
 800793a:	68db      	ldr	r3, [r3, #12]
 800793c:	461a      	mov	r2, r3
 800793e:	f000 fa03 	bl	8007d48 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8007942:	687b      	ldr	r3, [r7, #4]
 8007944:	681b      	ldr	r3, [r3, #0]
 8007946:	2140      	movs	r1, #64	; 0x40
 8007948:	4618      	mov	r0, r3
 800794a:	f000 fa5c 	bl	8007e06 <TIM_ITRx_SetConfig>
      break;
 800794e:	e009      	b.n	8007964 <HAL_TIM_ConfigClockSource+0x1ac>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8007950:	687b      	ldr	r3, [r7, #4]
 8007952:	681a      	ldr	r2, [r3, #0]
 8007954:	683b      	ldr	r3, [r7, #0]
 8007956:	681b      	ldr	r3, [r3, #0]
 8007958:	4619      	mov	r1, r3
 800795a:	4610      	mov	r0, r2
 800795c:	f000 fa53 	bl	8007e06 <TIM_ITRx_SetConfig>
      break;
 8007960:	e000      	b.n	8007964 <HAL_TIM_ConfigClockSource+0x1ac>
      break;
 8007962:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8007964:	687b      	ldr	r3, [r7, #4]
 8007966:	2201      	movs	r2, #1
 8007968:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800796c:	687b      	ldr	r3, [r7, #4]
 800796e:	2200      	movs	r2, #0
 8007970:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8007974:	2300      	movs	r3, #0
}
 8007976:	4618      	mov	r0, r3
 8007978:	3710      	adds	r7, #16
 800797a:	46bd      	mov	sp, r7
 800797c:	bd80      	pop	{r7, pc}
 800797e:	bf00      	nop
 8007980:	00100030 	.word	0x00100030
 8007984:	00100020 	.word	0x00100020
 8007988:	00100050 	.word	0x00100050
 800798c:	00100040 	.word	0x00100040
 8007990:	00100060 	.word	0x00100060
 8007994:	00100070 	.word	0x00100070

08007998 <HAL_TIM_SlaveConfigSynchro>:
  *         timer input or external trigger input) and the Slave mode
  *         (Disable, Reset, Gated, Trigger, External clock mode 1, Reset + Trigger, Gated + Reset).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_SlaveConfigSynchro(TIM_HandleTypeDef *htim, TIM_SlaveConfigTypeDef *sSlaveConfig)
{
 8007998:	b580      	push	{r7, lr}
 800799a:	b082      	sub	sp, #8
 800799c:	af00      	add	r7, sp, #0
 800799e:	6078      	str	r0, [r7, #4]
 80079a0:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_SLAVE_INSTANCE(htim->Instance));
  assert_param(IS_TIM_SLAVE_MODE(sSlaveConfig->SlaveMode));
  assert_param(IS_TIM_TRIGGER_INSTANCE(htim->Instance, sSlaveConfig->InputTrigger));

  __HAL_LOCK(htim);
 80079a2:	687b      	ldr	r3, [r7, #4]
 80079a4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80079a8:	2b01      	cmp	r3, #1
 80079aa:	d101      	bne.n	80079b0 <HAL_TIM_SlaveConfigSynchro+0x18>
 80079ac:	2302      	movs	r3, #2
 80079ae:	e031      	b.n	8007a14 <HAL_TIM_SlaveConfigSynchro+0x7c>
 80079b0:	687b      	ldr	r3, [r7, #4]
 80079b2:	2201      	movs	r2, #1
 80079b4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80079b8:	687b      	ldr	r3, [r7, #4]
 80079ba:	2202      	movs	r2, #2
 80079bc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  if (TIM_SlaveTimer_SetConfig(htim, sSlaveConfig) != HAL_OK)
 80079c0:	6839      	ldr	r1, [r7, #0]
 80079c2:	6878      	ldr	r0, [r7, #4]
 80079c4:	f000 f904 	bl	8007bd0 <TIM_SlaveTimer_SetConfig>
 80079c8:	4603      	mov	r3, r0
 80079ca:	2b00      	cmp	r3, #0
 80079cc:	d009      	beq.n	80079e2 <HAL_TIM_SlaveConfigSynchro+0x4a>
  {
    htim->State = HAL_TIM_STATE_READY;
 80079ce:	687b      	ldr	r3, [r7, #4]
 80079d0:	2201      	movs	r2, #1
 80079d2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    __HAL_UNLOCK(htim);
 80079d6:	687b      	ldr	r3, [r7, #4]
 80079d8:	2200      	movs	r2, #0
 80079da:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    return HAL_ERROR;
 80079de:	2301      	movs	r3, #1
 80079e0:	e018      	b.n	8007a14 <HAL_TIM_SlaveConfigSynchro+0x7c>
  }

  /* Disable Trigger Interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_TRIGGER);
 80079e2:	687b      	ldr	r3, [r7, #4]
 80079e4:	681b      	ldr	r3, [r3, #0]
 80079e6:	68da      	ldr	r2, [r3, #12]
 80079e8:	687b      	ldr	r3, [r7, #4]
 80079ea:	681b      	ldr	r3, [r3, #0]
 80079ec:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80079f0:	60da      	str	r2, [r3, #12]

  /* Disable Trigger DMA request */
  __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_TRIGGER);
 80079f2:	687b      	ldr	r3, [r7, #4]
 80079f4:	681b      	ldr	r3, [r3, #0]
 80079f6:	68da      	ldr	r2, [r3, #12]
 80079f8:	687b      	ldr	r3, [r7, #4]
 80079fa:	681b      	ldr	r3, [r3, #0]
 80079fc:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8007a00:	60da      	str	r2, [r3, #12]

  htim->State = HAL_TIM_STATE_READY;
 8007a02:	687b      	ldr	r3, [r7, #4]
 8007a04:	2201      	movs	r2, #1
 8007a06:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8007a0a:	687b      	ldr	r3, [r7, #4]
 8007a0c:	2200      	movs	r2, #0
 8007a0e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8007a12:	2300      	movs	r3, #0
}
 8007a14:	4618      	mov	r0, r3
 8007a16:	3708      	adds	r7, #8
 8007a18:	46bd      	mov	sp, r7
 8007a1a:	bd80      	pop	{r7, pc}

08007a1c <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8007a1c:	b480      	push	{r7}
 8007a1e:	b083      	sub	sp, #12
 8007a20:	af00      	add	r7, sp, #0
 8007a22:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 8007a24:	bf00      	nop
 8007a26:	370c      	adds	r7, #12
 8007a28:	46bd      	mov	sp, r7
 8007a2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a2e:	4770      	bx	lr

08007a30 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8007a30:	b480      	push	{r7}
 8007a32:	b083      	sub	sp, #12
 8007a34:	af00      	add	r7, sp, #0
 8007a36:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8007a38:	bf00      	nop
 8007a3a:	370c      	adds	r7, #12
 8007a3c:	46bd      	mov	sp, r7
 8007a3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a42:	4770      	bx	lr

08007a44 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8007a44:	b480      	push	{r7}
 8007a46:	b083      	sub	sp, #12
 8007a48:	af00      	add	r7, sp, #0
 8007a4a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8007a4c:	bf00      	nop
 8007a4e:	370c      	adds	r7, #12
 8007a50:	46bd      	mov	sp, r7
 8007a52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a56:	4770      	bx	lr

08007a58 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8007a58:	b480      	push	{r7}
 8007a5a:	b083      	sub	sp, #12
 8007a5c:	af00      	add	r7, sp, #0
 8007a5e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8007a60:	bf00      	nop
 8007a62:	370c      	adds	r7, #12
 8007a64:	46bd      	mov	sp, r7
 8007a66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a6a:	4770      	bx	lr

08007a6c <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8007a6c:	b480      	push	{r7}
 8007a6e:	b083      	sub	sp, #12
 8007a70:	af00      	add	r7, sp, #0
 8007a72:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8007a74:	bf00      	nop
 8007a76:	370c      	adds	r7, #12
 8007a78:	46bd      	mov	sp, r7
 8007a7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a7e:	4770      	bx	lr

08007a80 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8007a80:	b480      	push	{r7}
 8007a82:	b085      	sub	sp, #20
 8007a84:	af00      	add	r7, sp, #0
 8007a86:	6078      	str	r0, [r7, #4]
 8007a88:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8007a8a:	687b      	ldr	r3, [r7, #4]
 8007a8c:	681b      	ldr	r3, [r3, #0]
 8007a8e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8007a90:	687b      	ldr	r3, [r7, #4]
 8007a92:	4a46      	ldr	r2, [pc, #280]	; (8007bac <TIM_Base_SetConfig+0x12c>)
 8007a94:	4293      	cmp	r3, r2
 8007a96:	d017      	beq.n	8007ac8 <TIM_Base_SetConfig+0x48>
 8007a98:	687b      	ldr	r3, [r7, #4]
 8007a9a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007a9e:	d013      	beq.n	8007ac8 <TIM_Base_SetConfig+0x48>
 8007aa0:	687b      	ldr	r3, [r7, #4]
 8007aa2:	4a43      	ldr	r2, [pc, #268]	; (8007bb0 <TIM_Base_SetConfig+0x130>)
 8007aa4:	4293      	cmp	r3, r2
 8007aa6:	d00f      	beq.n	8007ac8 <TIM_Base_SetConfig+0x48>
 8007aa8:	687b      	ldr	r3, [r7, #4]
 8007aaa:	4a42      	ldr	r2, [pc, #264]	; (8007bb4 <TIM_Base_SetConfig+0x134>)
 8007aac:	4293      	cmp	r3, r2
 8007aae:	d00b      	beq.n	8007ac8 <TIM_Base_SetConfig+0x48>
 8007ab0:	687b      	ldr	r3, [r7, #4]
 8007ab2:	4a41      	ldr	r2, [pc, #260]	; (8007bb8 <TIM_Base_SetConfig+0x138>)
 8007ab4:	4293      	cmp	r3, r2
 8007ab6:	d007      	beq.n	8007ac8 <TIM_Base_SetConfig+0x48>
 8007ab8:	687b      	ldr	r3, [r7, #4]
 8007aba:	4a40      	ldr	r2, [pc, #256]	; (8007bbc <TIM_Base_SetConfig+0x13c>)
 8007abc:	4293      	cmp	r3, r2
 8007abe:	d003      	beq.n	8007ac8 <TIM_Base_SetConfig+0x48>
 8007ac0:	687b      	ldr	r3, [r7, #4]
 8007ac2:	4a3f      	ldr	r2, [pc, #252]	; (8007bc0 <TIM_Base_SetConfig+0x140>)
 8007ac4:	4293      	cmp	r3, r2
 8007ac6:	d108      	bne.n	8007ada <TIM_Base_SetConfig+0x5a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8007ac8:	68fb      	ldr	r3, [r7, #12]
 8007aca:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007ace:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8007ad0:	683b      	ldr	r3, [r7, #0]
 8007ad2:	685b      	ldr	r3, [r3, #4]
 8007ad4:	68fa      	ldr	r2, [r7, #12]
 8007ad6:	4313      	orrs	r3, r2
 8007ad8:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8007ada:	687b      	ldr	r3, [r7, #4]
 8007adc:	4a33      	ldr	r2, [pc, #204]	; (8007bac <TIM_Base_SetConfig+0x12c>)
 8007ade:	4293      	cmp	r3, r2
 8007ae0:	d023      	beq.n	8007b2a <TIM_Base_SetConfig+0xaa>
 8007ae2:	687b      	ldr	r3, [r7, #4]
 8007ae4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007ae8:	d01f      	beq.n	8007b2a <TIM_Base_SetConfig+0xaa>
 8007aea:	687b      	ldr	r3, [r7, #4]
 8007aec:	4a30      	ldr	r2, [pc, #192]	; (8007bb0 <TIM_Base_SetConfig+0x130>)
 8007aee:	4293      	cmp	r3, r2
 8007af0:	d01b      	beq.n	8007b2a <TIM_Base_SetConfig+0xaa>
 8007af2:	687b      	ldr	r3, [r7, #4]
 8007af4:	4a2f      	ldr	r2, [pc, #188]	; (8007bb4 <TIM_Base_SetConfig+0x134>)
 8007af6:	4293      	cmp	r3, r2
 8007af8:	d017      	beq.n	8007b2a <TIM_Base_SetConfig+0xaa>
 8007afa:	687b      	ldr	r3, [r7, #4]
 8007afc:	4a2e      	ldr	r2, [pc, #184]	; (8007bb8 <TIM_Base_SetConfig+0x138>)
 8007afe:	4293      	cmp	r3, r2
 8007b00:	d013      	beq.n	8007b2a <TIM_Base_SetConfig+0xaa>
 8007b02:	687b      	ldr	r3, [r7, #4]
 8007b04:	4a2d      	ldr	r2, [pc, #180]	; (8007bbc <TIM_Base_SetConfig+0x13c>)
 8007b06:	4293      	cmp	r3, r2
 8007b08:	d00f      	beq.n	8007b2a <TIM_Base_SetConfig+0xaa>
 8007b0a:	687b      	ldr	r3, [r7, #4]
 8007b0c:	4a2d      	ldr	r2, [pc, #180]	; (8007bc4 <TIM_Base_SetConfig+0x144>)
 8007b0e:	4293      	cmp	r3, r2
 8007b10:	d00b      	beq.n	8007b2a <TIM_Base_SetConfig+0xaa>
 8007b12:	687b      	ldr	r3, [r7, #4]
 8007b14:	4a2c      	ldr	r2, [pc, #176]	; (8007bc8 <TIM_Base_SetConfig+0x148>)
 8007b16:	4293      	cmp	r3, r2
 8007b18:	d007      	beq.n	8007b2a <TIM_Base_SetConfig+0xaa>
 8007b1a:	687b      	ldr	r3, [r7, #4]
 8007b1c:	4a2b      	ldr	r2, [pc, #172]	; (8007bcc <TIM_Base_SetConfig+0x14c>)
 8007b1e:	4293      	cmp	r3, r2
 8007b20:	d003      	beq.n	8007b2a <TIM_Base_SetConfig+0xaa>
 8007b22:	687b      	ldr	r3, [r7, #4]
 8007b24:	4a26      	ldr	r2, [pc, #152]	; (8007bc0 <TIM_Base_SetConfig+0x140>)
 8007b26:	4293      	cmp	r3, r2
 8007b28:	d108      	bne.n	8007b3c <TIM_Base_SetConfig+0xbc>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8007b2a:	68fb      	ldr	r3, [r7, #12]
 8007b2c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007b30:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8007b32:	683b      	ldr	r3, [r7, #0]
 8007b34:	68db      	ldr	r3, [r3, #12]
 8007b36:	68fa      	ldr	r2, [r7, #12]
 8007b38:	4313      	orrs	r3, r2
 8007b3a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8007b3c:	68fb      	ldr	r3, [r7, #12]
 8007b3e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8007b42:	683b      	ldr	r3, [r7, #0]
 8007b44:	695b      	ldr	r3, [r3, #20]
 8007b46:	4313      	orrs	r3, r2
 8007b48:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8007b4a:	687b      	ldr	r3, [r7, #4]
 8007b4c:	68fa      	ldr	r2, [r7, #12]
 8007b4e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8007b50:	683b      	ldr	r3, [r7, #0]
 8007b52:	689a      	ldr	r2, [r3, #8]
 8007b54:	687b      	ldr	r3, [r7, #4]
 8007b56:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8007b58:	683b      	ldr	r3, [r7, #0]
 8007b5a:	681a      	ldr	r2, [r3, #0]
 8007b5c:	687b      	ldr	r3, [r7, #4]
 8007b5e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8007b60:	687b      	ldr	r3, [r7, #4]
 8007b62:	4a12      	ldr	r2, [pc, #72]	; (8007bac <TIM_Base_SetConfig+0x12c>)
 8007b64:	4293      	cmp	r3, r2
 8007b66:	d013      	beq.n	8007b90 <TIM_Base_SetConfig+0x110>
 8007b68:	687b      	ldr	r3, [r7, #4]
 8007b6a:	4a14      	ldr	r2, [pc, #80]	; (8007bbc <TIM_Base_SetConfig+0x13c>)
 8007b6c:	4293      	cmp	r3, r2
 8007b6e:	d00f      	beq.n	8007b90 <TIM_Base_SetConfig+0x110>
 8007b70:	687b      	ldr	r3, [r7, #4]
 8007b72:	4a14      	ldr	r2, [pc, #80]	; (8007bc4 <TIM_Base_SetConfig+0x144>)
 8007b74:	4293      	cmp	r3, r2
 8007b76:	d00b      	beq.n	8007b90 <TIM_Base_SetConfig+0x110>
 8007b78:	687b      	ldr	r3, [r7, #4]
 8007b7a:	4a13      	ldr	r2, [pc, #76]	; (8007bc8 <TIM_Base_SetConfig+0x148>)
 8007b7c:	4293      	cmp	r3, r2
 8007b7e:	d007      	beq.n	8007b90 <TIM_Base_SetConfig+0x110>
 8007b80:	687b      	ldr	r3, [r7, #4]
 8007b82:	4a12      	ldr	r2, [pc, #72]	; (8007bcc <TIM_Base_SetConfig+0x14c>)
 8007b84:	4293      	cmp	r3, r2
 8007b86:	d003      	beq.n	8007b90 <TIM_Base_SetConfig+0x110>
 8007b88:	687b      	ldr	r3, [r7, #4]
 8007b8a:	4a0d      	ldr	r2, [pc, #52]	; (8007bc0 <TIM_Base_SetConfig+0x140>)
 8007b8c:	4293      	cmp	r3, r2
 8007b8e:	d103      	bne.n	8007b98 <TIM_Base_SetConfig+0x118>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8007b90:	683b      	ldr	r3, [r7, #0]
 8007b92:	691a      	ldr	r2, [r3, #16]
 8007b94:	687b      	ldr	r3, [r7, #4]
 8007b96:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8007b98:	687b      	ldr	r3, [r7, #4]
 8007b9a:	2201      	movs	r2, #1
 8007b9c:	615a      	str	r2, [r3, #20]
}
 8007b9e:	bf00      	nop
 8007ba0:	3714      	adds	r7, #20
 8007ba2:	46bd      	mov	sp, r7
 8007ba4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ba8:	4770      	bx	lr
 8007baa:	bf00      	nop
 8007bac:	40012c00 	.word	0x40012c00
 8007bb0:	40000400 	.word	0x40000400
 8007bb4:	40000800 	.word	0x40000800
 8007bb8:	40000c00 	.word	0x40000c00
 8007bbc:	40013400 	.word	0x40013400
 8007bc0:	40015000 	.word	0x40015000
 8007bc4:	40014000 	.word	0x40014000
 8007bc8:	40014400 	.word	0x40014400
 8007bcc:	40014800 	.word	0x40014800

08007bd0 <TIM_SlaveTimer_SetConfig>:
  * @param  sSlaveConfig Slave timer configuration
  * @retval None
  */
static HAL_StatusTypeDef TIM_SlaveTimer_SetConfig(TIM_HandleTypeDef *htim,
                                                  TIM_SlaveConfigTypeDef *sSlaveConfig)
{
 8007bd0:	b580      	push	{r7, lr}
 8007bd2:	b086      	sub	sp, #24
 8007bd4:	af00      	add	r7, sp, #0
 8007bd6:	6078      	str	r0, [r7, #4]
 8007bd8:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8007bda:	687b      	ldr	r3, [r7, #4]
 8007bdc:	681b      	ldr	r3, [r3, #0]
 8007bde:	689b      	ldr	r3, [r3, #8]
 8007be0:	617b      	str	r3, [r7, #20]

  /* Reset the Trigger Selection Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8007be2:	697b      	ldr	r3, [r7, #20]
 8007be4:	f423 1340 	bic.w	r3, r3, #3145728	; 0x300000
 8007be8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007bec:	617b      	str	r3, [r7, #20]
  /* Set the Input Trigger source */
  tmpsmcr |= sSlaveConfig->InputTrigger;
 8007bee:	683b      	ldr	r3, [r7, #0]
 8007bf0:	685b      	ldr	r3, [r3, #4]
 8007bf2:	697a      	ldr	r2, [r7, #20]
 8007bf4:	4313      	orrs	r3, r2
 8007bf6:	617b      	str	r3, [r7, #20]

  /* Reset the slave mode Bits */
  tmpsmcr &= ~TIM_SMCR_SMS;
 8007bf8:	697b      	ldr	r3, [r7, #20]
 8007bfa:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8007bfe:	f023 0307 	bic.w	r3, r3, #7
 8007c02:	617b      	str	r3, [r7, #20]
  /* Set the slave mode */
  tmpsmcr |= sSlaveConfig->SlaveMode;
 8007c04:	683b      	ldr	r3, [r7, #0]
 8007c06:	681b      	ldr	r3, [r3, #0]
 8007c08:	697a      	ldr	r2, [r7, #20]
 8007c0a:	4313      	orrs	r3, r2
 8007c0c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8007c0e:	687b      	ldr	r3, [r7, #4]
 8007c10:	681b      	ldr	r3, [r3, #0]
 8007c12:	697a      	ldr	r2, [r7, #20]
 8007c14:	609a      	str	r2, [r3, #8]

  /* Configure the trigger prescaler, filter, and polarity */
  switch (sSlaveConfig->InputTrigger)
 8007c16:	683b      	ldr	r3, [r7, #0]
 8007c18:	685b      	ldr	r3, [r3, #4]
 8007c1a:	2b70      	cmp	r3, #112	; 0x70
 8007c1c:	d034      	beq.n	8007c88 <TIM_SlaveTimer_SetConfig+0xb8>
 8007c1e:	2b70      	cmp	r3, #112	; 0x70
 8007c20:	d811      	bhi.n	8007c46 <TIM_SlaveTimer_SetConfig+0x76>
 8007c22:	2b30      	cmp	r3, #48	; 0x30
 8007c24:	d07d      	beq.n	8007d22 <TIM_SlaveTimer_SetConfig+0x152>
 8007c26:	2b30      	cmp	r3, #48	; 0x30
 8007c28:	d806      	bhi.n	8007c38 <TIM_SlaveTimer_SetConfig+0x68>
 8007c2a:	2b10      	cmp	r3, #16
 8007c2c:	d079      	beq.n	8007d22 <TIM_SlaveTimer_SetConfig+0x152>
 8007c2e:	2b20      	cmp	r3, #32
 8007c30:	d077      	beq.n	8007d22 <TIM_SlaveTimer_SetConfig+0x152>
 8007c32:	2b00      	cmp	r3, #0
 8007c34:	d075      	beq.n	8007d22 <TIM_SlaveTimer_SetConfig+0x152>
      assert_param(IS_TIM_INTERNAL_TRIGGEREVENT_INSTANCE((htim->Instance), sSlaveConfig->InputTrigger));
      break;
    }

    default:
      break;
 8007c36:	e075      	b.n	8007d24 <TIM_SlaveTimer_SetConfig+0x154>
  switch (sSlaveConfig->InputTrigger)
 8007c38:	2b50      	cmp	r3, #80	; 0x50
 8007c3a:	d05e      	beq.n	8007cfa <TIM_SlaveTimer_SetConfig+0x12a>
 8007c3c:	2b60      	cmp	r3, #96	; 0x60
 8007c3e:	d066      	beq.n	8007d0e <TIM_SlaveTimer_SetConfig+0x13e>
 8007c40:	2b40      	cmp	r3, #64	; 0x40
 8007c42:	d02c      	beq.n	8007c9e <TIM_SlaveTimer_SetConfig+0xce>
      break;
 8007c44:	e06e      	b.n	8007d24 <TIM_SlaveTimer_SetConfig+0x154>
  switch (sSlaveConfig->InputTrigger)
 8007c46:	4a3a      	ldr	r2, [pc, #232]	; (8007d30 <TIM_SlaveTimer_SetConfig+0x160>)
 8007c48:	4293      	cmp	r3, r2
 8007c4a:	d06a      	beq.n	8007d22 <TIM_SlaveTimer_SetConfig+0x152>
 8007c4c:	4a38      	ldr	r2, [pc, #224]	; (8007d30 <TIM_SlaveTimer_SetConfig+0x160>)
 8007c4e:	4293      	cmp	r3, r2
 8007c50:	d809      	bhi.n	8007c66 <TIM_SlaveTimer_SetConfig+0x96>
 8007c52:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 8007c56:	d064      	beq.n	8007d22 <TIM_SlaveTimer_SetConfig+0x152>
 8007c58:	4a36      	ldr	r2, [pc, #216]	; (8007d34 <TIM_SlaveTimer_SetConfig+0x164>)
 8007c5a:	4293      	cmp	r3, r2
 8007c5c:	d061      	beq.n	8007d22 <TIM_SlaveTimer_SetConfig+0x152>
 8007c5e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8007c62:	d05e      	beq.n	8007d22 <TIM_SlaveTimer_SetConfig+0x152>
      break;
 8007c64:	e05e      	b.n	8007d24 <TIM_SlaveTimer_SetConfig+0x154>
  switch (sSlaveConfig->InputTrigger)
 8007c66:	4a34      	ldr	r2, [pc, #208]	; (8007d38 <TIM_SlaveTimer_SetConfig+0x168>)
 8007c68:	4293      	cmp	r3, r2
 8007c6a:	d05a      	beq.n	8007d22 <TIM_SlaveTimer_SetConfig+0x152>
 8007c6c:	4a32      	ldr	r2, [pc, #200]	; (8007d38 <TIM_SlaveTimer_SetConfig+0x168>)
 8007c6e:	4293      	cmp	r3, r2
 8007c70:	d803      	bhi.n	8007c7a <TIM_SlaveTimer_SetConfig+0xaa>
 8007c72:	4a32      	ldr	r2, [pc, #200]	; (8007d3c <TIM_SlaveTimer_SetConfig+0x16c>)
 8007c74:	4293      	cmp	r3, r2
 8007c76:	d054      	beq.n	8007d22 <TIM_SlaveTimer_SetConfig+0x152>
      break;
 8007c78:	e054      	b.n	8007d24 <TIM_SlaveTimer_SetConfig+0x154>
  switch (sSlaveConfig->InputTrigger)
 8007c7a:	4a31      	ldr	r2, [pc, #196]	; (8007d40 <TIM_SlaveTimer_SetConfig+0x170>)
 8007c7c:	4293      	cmp	r3, r2
 8007c7e:	d050      	beq.n	8007d22 <TIM_SlaveTimer_SetConfig+0x152>
 8007c80:	4a30      	ldr	r2, [pc, #192]	; (8007d44 <TIM_SlaveTimer_SetConfig+0x174>)
 8007c82:	4293      	cmp	r3, r2
 8007c84:	d04d      	beq.n	8007d22 <TIM_SlaveTimer_SetConfig+0x152>
      break;
 8007c86:	e04d      	b.n	8007d24 <TIM_SlaveTimer_SetConfig+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 8007c88:	687b      	ldr	r3, [r7, #4]
 8007c8a:	6818      	ldr	r0, [r3, #0]
 8007c8c:	683b      	ldr	r3, [r7, #0]
 8007c8e:	68d9      	ldr	r1, [r3, #12]
 8007c90:	683b      	ldr	r3, [r7, #0]
 8007c92:	689a      	ldr	r2, [r3, #8]
 8007c94:	683b      	ldr	r3, [r7, #0]
 8007c96:	691b      	ldr	r3, [r3, #16]
 8007c98:	f000 f8d2 	bl	8007e40 <TIM_ETR_SetConfig>
      break;
 8007c9c:	e042      	b.n	8007d24 <TIM_SlaveTimer_SetConfig+0x154>
      if ((sSlaveConfig->SlaveMode == TIM_SLAVEMODE_GATED) || (sSlaveConfig->SlaveMode == TIM_SLAVEMODE_COMBINED_GATEDRESET))
 8007c9e:	683b      	ldr	r3, [r7, #0]
 8007ca0:	681b      	ldr	r3, [r3, #0]
 8007ca2:	2b05      	cmp	r3, #5
 8007ca4:	d004      	beq.n	8007cb0 <TIM_SlaveTimer_SetConfig+0xe0>
 8007ca6:	683b      	ldr	r3, [r7, #0]
 8007ca8:	681b      	ldr	r3, [r3, #0]
 8007caa:	f1b3 1f01 	cmp.w	r3, #65537	; 0x10001
 8007cae:	d101      	bne.n	8007cb4 <TIM_SlaveTimer_SetConfig+0xe4>
        return HAL_ERROR;
 8007cb0:	2301      	movs	r3, #1
 8007cb2:	e038      	b.n	8007d26 <TIM_SlaveTimer_SetConfig+0x156>
      tmpccer = htim->Instance->CCER;
 8007cb4:	687b      	ldr	r3, [r7, #4]
 8007cb6:	681b      	ldr	r3, [r3, #0]
 8007cb8:	6a1b      	ldr	r3, [r3, #32]
 8007cba:	613b      	str	r3, [r7, #16]
      htim->Instance->CCER &= ~TIM_CCER_CC1E;
 8007cbc:	687b      	ldr	r3, [r7, #4]
 8007cbe:	681b      	ldr	r3, [r3, #0]
 8007cc0:	6a1a      	ldr	r2, [r3, #32]
 8007cc2:	687b      	ldr	r3, [r7, #4]
 8007cc4:	681b      	ldr	r3, [r3, #0]
 8007cc6:	f022 0201 	bic.w	r2, r2, #1
 8007cca:	621a      	str	r2, [r3, #32]
      tmpccmr1 = htim->Instance->CCMR1;
 8007ccc:	687b      	ldr	r3, [r7, #4]
 8007cce:	681b      	ldr	r3, [r3, #0]
 8007cd0:	699b      	ldr	r3, [r3, #24]
 8007cd2:	60fb      	str	r3, [r7, #12]
      tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8007cd4:	68fb      	ldr	r3, [r7, #12]
 8007cd6:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8007cda:	60fb      	str	r3, [r7, #12]
      tmpccmr1 |= ((sSlaveConfig->TriggerFilter) << 4U);
 8007cdc:	683b      	ldr	r3, [r7, #0]
 8007cde:	691b      	ldr	r3, [r3, #16]
 8007ce0:	011b      	lsls	r3, r3, #4
 8007ce2:	68fa      	ldr	r2, [r7, #12]
 8007ce4:	4313      	orrs	r3, r2
 8007ce6:	60fb      	str	r3, [r7, #12]
      htim->Instance->CCMR1 = tmpccmr1;
 8007ce8:	687b      	ldr	r3, [r7, #4]
 8007cea:	681b      	ldr	r3, [r3, #0]
 8007cec:	68fa      	ldr	r2, [r7, #12]
 8007cee:	619a      	str	r2, [r3, #24]
      htim->Instance->CCER = tmpccer;
 8007cf0:	687b      	ldr	r3, [r7, #4]
 8007cf2:	681b      	ldr	r3, [r3, #0]
 8007cf4:	693a      	ldr	r2, [r7, #16]
 8007cf6:	621a      	str	r2, [r3, #32]
      break;
 8007cf8:	e014      	b.n	8007d24 <TIM_SlaveTimer_SetConfig+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8007cfa:	687b      	ldr	r3, [r7, #4]
 8007cfc:	6818      	ldr	r0, [r3, #0]
 8007cfe:	683b      	ldr	r3, [r7, #0]
 8007d00:	6899      	ldr	r1, [r3, #8]
 8007d02:	683b      	ldr	r3, [r7, #0]
 8007d04:	691b      	ldr	r3, [r3, #16]
 8007d06:	461a      	mov	r2, r3
 8007d08:	f000 f81e 	bl	8007d48 <TIM_TI1_ConfigInputStage>
      break;
 8007d0c:	e00a      	b.n	8007d24 <TIM_SlaveTimer_SetConfig+0x154>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8007d0e:	687b      	ldr	r3, [r7, #4]
 8007d10:	6818      	ldr	r0, [r3, #0]
 8007d12:	683b      	ldr	r3, [r7, #0]
 8007d14:	6899      	ldr	r1, [r3, #8]
 8007d16:	683b      	ldr	r3, [r7, #0]
 8007d18:	691b      	ldr	r3, [r3, #16]
 8007d1a:	461a      	mov	r2, r3
 8007d1c:	f000 f843 	bl	8007da6 <TIM_TI2_ConfigInputStage>
      break;
 8007d20:	e000      	b.n	8007d24 <TIM_SlaveTimer_SetConfig+0x154>
      break;
 8007d22:	bf00      	nop
  }
  return HAL_OK;
 8007d24:	2300      	movs	r3, #0
}
 8007d26:	4618      	mov	r0, r3
 8007d28:	3718      	adds	r7, #24
 8007d2a:	46bd      	mov	sp, r7
 8007d2c:	bd80      	pop	{r7, pc}
 8007d2e:	bf00      	nop
 8007d30:	00100030 	.word	0x00100030
 8007d34:	00100020 	.word	0x00100020
 8007d38:	00100050 	.word	0x00100050
 8007d3c:	00100040 	.word	0x00100040
 8007d40:	00100060 	.word	0x00100060
 8007d44:	00100070 	.word	0x00100070

08007d48 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8007d48:	b480      	push	{r7}
 8007d4a:	b087      	sub	sp, #28
 8007d4c:	af00      	add	r7, sp, #0
 8007d4e:	60f8      	str	r0, [r7, #12]
 8007d50:	60b9      	str	r1, [r7, #8]
 8007d52:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8007d54:	68fb      	ldr	r3, [r7, #12]
 8007d56:	6a1b      	ldr	r3, [r3, #32]
 8007d58:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8007d5a:	68fb      	ldr	r3, [r7, #12]
 8007d5c:	6a1b      	ldr	r3, [r3, #32]
 8007d5e:	f023 0201 	bic.w	r2, r3, #1
 8007d62:	68fb      	ldr	r3, [r7, #12]
 8007d64:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8007d66:	68fb      	ldr	r3, [r7, #12]
 8007d68:	699b      	ldr	r3, [r3, #24]
 8007d6a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8007d6c:	693b      	ldr	r3, [r7, #16]
 8007d6e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8007d72:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8007d74:	687b      	ldr	r3, [r7, #4]
 8007d76:	011b      	lsls	r3, r3, #4
 8007d78:	693a      	ldr	r2, [r7, #16]
 8007d7a:	4313      	orrs	r3, r2
 8007d7c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8007d7e:	697b      	ldr	r3, [r7, #20]
 8007d80:	f023 030a 	bic.w	r3, r3, #10
 8007d84:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8007d86:	697a      	ldr	r2, [r7, #20]
 8007d88:	68bb      	ldr	r3, [r7, #8]
 8007d8a:	4313      	orrs	r3, r2
 8007d8c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8007d8e:	68fb      	ldr	r3, [r7, #12]
 8007d90:	693a      	ldr	r2, [r7, #16]
 8007d92:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8007d94:	68fb      	ldr	r3, [r7, #12]
 8007d96:	697a      	ldr	r2, [r7, #20]
 8007d98:	621a      	str	r2, [r3, #32]
}
 8007d9a:	bf00      	nop
 8007d9c:	371c      	adds	r7, #28
 8007d9e:	46bd      	mov	sp, r7
 8007da0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007da4:	4770      	bx	lr

08007da6 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8007da6:	b480      	push	{r7}
 8007da8:	b087      	sub	sp, #28
 8007daa:	af00      	add	r7, sp, #0
 8007dac:	60f8      	str	r0, [r7, #12]
 8007dae:	60b9      	str	r1, [r7, #8]
 8007db0:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8007db2:	68fb      	ldr	r3, [r7, #12]
 8007db4:	6a1b      	ldr	r3, [r3, #32]
 8007db6:	f023 0210 	bic.w	r2, r3, #16
 8007dba:	68fb      	ldr	r3, [r7, #12]
 8007dbc:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8007dbe:	68fb      	ldr	r3, [r7, #12]
 8007dc0:	699b      	ldr	r3, [r3, #24]
 8007dc2:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8007dc4:	68fb      	ldr	r3, [r7, #12]
 8007dc6:	6a1b      	ldr	r3, [r3, #32]
 8007dc8:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8007dca:	697b      	ldr	r3, [r7, #20]
 8007dcc:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8007dd0:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8007dd2:	687b      	ldr	r3, [r7, #4]
 8007dd4:	031b      	lsls	r3, r3, #12
 8007dd6:	697a      	ldr	r2, [r7, #20]
 8007dd8:	4313      	orrs	r3, r2
 8007dda:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8007ddc:	693b      	ldr	r3, [r7, #16]
 8007dde:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8007de2:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8007de4:	68bb      	ldr	r3, [r7, #8]
 8007de6:	011b      	lsls	r3, r3, #4
 8007de8:	693a      	ldr	r2, [r7, #16]
 8007dea:	4313      	orrs	r3, r2
 8007dec:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8007dee:	68fb      	ldr	r3, [r7, #12]
 8007df0:	697a      	ldr	r2, [r7, #20]
 8007df2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8007df4:	68fb      	ldr	r3, [r7, #12]
 8007df6:	693a      	ldr	r2, [r7, #16]
 8007df8:	621a      	str	r2, [r3, #32]
}
 8007dfa:	bf00      	nop
 8007dfc:	371c      	adds	r7, #28
 8007dfe:	46bd      	mov	sp, r7
 8007e00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e04:	4770      	bx	lr

08007e06 <TIM_ITRx_SetConfig>:
  *       (*)  Value not defined in all devices.
  *
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8007e06:	b480      	push	{r7}
 8007e08:	b085      	sub	sp, #20
 8007e0a:	af00      	add	r7, sp, #0
 8007e0c:	6078      	str	r0, [r7, #4]
 8007e0e:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8007e10:	687b      	ldr	r3, [r7, #4]
 8007e12:	689b      	ldr	r3, [r3, #8]
 8007e14:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8007e16:	68fb      	ldr	r3, [r7, #12]
 8007e18:	f423 1340 	bic.w	r3, r3, #3145728	; 0x300000
 8007e1c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007e20:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8007e22:	683a      	ldr	r2, [r7, #0]
 8007e24:	68fb      	ldr	r3, [r7, #12]
 8007e26:	4313      	orrs	r3, r2
 8007e28:	f043 0307 	orr.w	r3, r3, #7
 8007e2c:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8007e2e:	687b      	ldr	r3, [r7, #4]
 8007e30:	68fa      	ldr	r2, [r7, #12]
 8007e32:	609a      	str	r2, [r3, #8]
}
 8007e34:	bf00      	nop
 8007e36:	3714      	adds	r7, #20
 8007e38:	46bd      	mov	sp, r7
 8007e3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e3e:	4770      	bx	lr

08007e40 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8007e40:	b480      	push	{r7}
 8007e42:	b087      	sub	sp, #28
 8007e44:	af00      	add	r7, sp, #0
 8007e46:	60f8      	str	r0, [r7, #12]
 8007e48:	60b9      	str	r1, [r7, #8]
 8007e4a:	607a      	str	r2, [r7, #4]
 8007e4c:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8007e4e:	68fb      	ldr	r3, [r7, #12]
 8007e50:	689b      	ldr	r3, [r3, #8]
 8007e52:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8007e54:	697b      	ldr	r3, [r7, #20]
 8007e56:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8007e5a:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8007e5c:	683b      	ldr	r3, [r7, #0]
 8007e5e:	021a      	lsls	r2, r3, #8
 8007e60:	687b      	ldr	r3, [r7, #4]
 8007e62:	431a      	orrs	r2, r3
 8007e64:	68bb      	ldr	r3, [r7, #8]
 8007e66:	4313      	orrs	r3, r2
 8007e68:	697a      	ldr	r2, [r7, #20]
 8007e6a:	4313      	orrs	r3, r2
 8007e6c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8007e6e:	68fb      	ldr	r3, [r7, #12]
 8007e70:	697a      	ldr	r2, [r7, #20]
 8007e72:	609a      	str	r2, [r3, #8]
}
 8007e74:	bf00      	nop
 8007e76:	371c      	adds	r7, #28
 8007e78:	46bd      	mov	sp, r7
 8007e7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e7e:	4770      	bx	lr

08007e80 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8007e80:	b480      	push	{r7}
 8007e82:	b085      	sub	sp, #20
 8007e84:	af00      	add	r7, sp, #0
 8007e86:	6078      	str	r0, [r7, #4]
 8007e88:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8007e8a:	687b      	ldr	r3, [r7, #4]
 8007e8c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007e90:	2b01      	cmp	r3, #1
 8007e92:	d101      	bne.n	8007e98 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8007e94:	2302      	movs	r3, #2
 8007e96:	e074      	b.n	8007f82 <HAL_TIMEx_MasterConfigSynchronization+0x102>
 8007e98:	687b      	ldr	r3, [r7, #4]
 8007e9a:	2201      	movs	r2, #1
 8007e9c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007ea0:	687b      	ldr	r3, [r7, #4]
 8007ea2:	2202      	movs	r2, #2
 8007ea4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8007ea8:	687b      	ldr	r3, [r7, #4]
 8007eaa:	681b      	ldr	r3, [r3, #0]
 8007eac:	685b      	ldr	r3, [r3, #4]
 8007eae:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8007eb0:	687b      	ldr	r3, [r7, #4]
 8007eb2:	681b      	ldr	r3, [r3, #0]
 8007eb4:	689b      	ldr	r3, [r3, #8]
 8007eb6:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8007eb8:	687b      	ldr	r3, [r7, #4]
 8007eba:	681b      	ldr	r3, [r3, #0]
 8007ebc:	4a34      	ldr	r2, [pc, #208]	; (8007f90 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 8007ebe:	4293      	cmp	r3, r2
 8007ec0:	d009      	beq.n	8007ed6 <HAL_TIMEx_MasterConfigSynchronization+0x56>
 8007ec2:	687b      	ldr	r3, [r7, #4]
 8007ec4:	681b      	ldr	r3, [r3, #0]
 8007ec6:	4a33      	ldr	r2, [pc, #204]	; (8007f94 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 8007ec8:	4293      	cmp	r3, r2
 8007eca:	d004      	beq.n	8007ed6 <HAL_TIMEx_MasterConfigSynchronization+0x56>
 8007ecc:	687b      	ldr	r3, [r7, #4]
 8007ece:	681b      	ldr	r3, [r3, #0]
 8007ed0:	4a31      	ldr	r2, [pc, #196]	; (8007f98 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 8007ed2:	4293      	cmp	r3, r2
 8007ed4:	d108      	bne.n	8007ee8 <HAL_TIMEx_MasterConfigSynchronization+0x68>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8007ed6:	68fb      	ldr	r3, [r7, #12]
 8007ed8:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8007edc:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8007ede:	683b      	ldr	r3, [r7, #0]
 8007ee0:	685b      	ldr	r3, [r3, #4]
 8007ee2:	68fa      	ldr	r2, [r7, #12]
 8007ee4:	4313      	orrs	r3, r2
 8007ee6:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8007ee8:	68fb      	ldr	r3, [r7, #12]
 8007eea:	f023 7300 	bic.w	r3, r3, #33554432	; 0x2000000
 8007eee:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007ef2:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8007ef4:	683b      	ldr	r3, [r7, #0]
 8007ef6:	681b      	ldr	r3, [r3, #0]
 8007ef8:	68fa      	ldr	r2, [r7, #12]
 8007efa:	4313      	orrs	r3, r2
 8007efc:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8007efe:	687b      	ldr	r3, [r7, #4]
 8007f00:	681b      	ldr	r3, [r3, #0]
 8007f02:	68fa      	ldr	r2, [r7, #12]
 8007f04:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007f06:	687b      	ldr	r3, [r7, #4]
 8007f08:	681b      	ldr	r3, [r3, #0]
 8007f0a:	4a21      	ldr	r2, [pc, #132]	; (8007f90 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 8007f0c:	4293      	cmp	r3, r2
 8007f0e:	d022      	beq.n	8007f56 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8007f10:	687b      	ldr	r3, [r7, #4]
 8007f12:	681b      	ldr	r3, [r3, #0]
 8007f14:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007f18:	d01d      	beq.n	8007f56 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8007f1a:	687b      	ldr	r3, [r7, #4]
 8007f1c:	681b      	ldr	r3, [r3, #0]
 8007f1e:	4a1f      	ldr	r2, [pc, #124]	; (8007f9c <HAL_TIMEx_MasterConfigSynchronization+0x11c>)
 8007f20:	4293      	cmp	r3, r2
 8007f22:	d018      	beq.n	8007f56 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8007f24:	687b      	ldr	r3, [r7, #4]
 8007f26:	681b      	ldr	r3, [r3, #0]
 8007f28:	4a1d      	ldr	r2, [pc, #116]	; (8007fa0 <HAL_TIMEx_MasterConfigSynchronization+0x120>)
 8007f2a:	4293      	cmp	r3, r2
 8007f2c:	d013      	beq.n	8007f56 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8007f2e:	687b      	ldr	r3, [r7, #4]
 8007f30:	681b      	ldr	r3, [r3, #0]
 8007f32:	4a1c      	ldr	r2, [pc, #112]	; (8007fa4 <HAL_TIMEx_MasterConfigSynchronization+0x124>)
 8007f34:	4293      	cmp	r3, r2
 8007f36:	d00e      	beq.n	8007f56 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8007f38:	687b      	ldr	r3, [r7, #4]
 8007f3a:	681b      	ldr	r3, [r3, #0]
 8007f3c:	4a15      	ldr	r2, [pc, #84]	; (8007f94 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 8007f3e:	4293      	cmp	r3, r2
 8007f40:	d009      	beq.n	8007f56 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8007f42:	687b      	ldr	r3, [r7, #4]
 8007f44:	681b      	ldr	r3, [r3, #0]
 8007f46:	4a18      	ldr	r2, [pc, #96]	; (8007fa8 <HAL_TIMEx_MasterConfigSynchronization+0x128>)
 8007f48:	4293      	cmp	r3, r2
 8007f4a:	d004      	beq.n	8007f56 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8007f4c:	687b      	ldr	r3, [r7, #4]
 8007f4e:	681b      	ldr	r3, [r3, #0]
 8007f50:	4a11      	ldr	r2, [pc, #68]	; (8007f98 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 8007f52:	4293      	cmp	r3, r2
 8007f54:	d10c      	bne.n	8007f70 <HAL_TIMEx_MasterConfigSynchronization+0xf0>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8007f56:	68bb      	ldr	r3, [r7, #8]
 8007f58:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8007f5c:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8007f5e:	683b      	ldr	r3, [r7, #0]
 8007f60:	689b      	ldr	r3, [r3, #8]
 8007f62:	68ba      	ldr	r2, [r7, #8]
 8007f64:	4313      	orrs	r3, r2
 8007f66:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8007f68:	687b      	ldr	r3, [r7, #4]
 8007f6a:	681b      	ldr	r3, [r3, #0]
 8007f6c:	68ba      	ldr	r2, [r7, #8]
 8007f6e:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8007f70:	687b      	ldr	r3, [r7, #4]
 8007f72:	2201      	movs	r2, #1
 8007f74:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8007f78:	687b      	ldr	r3, [r7, #4]
 8007f7a:	2200      	movs	r2, #0
 8007f7c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8007f80:	2300      	movs	r3, #0
}
 8007f82:	4618      	mov	r0, r3
 8007f84:	3714      	adds	r7, #20
 8007f86:	46bd      	mov	sp, r7
 8007f88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f8c:	4770      	bx	lr
 8007f8e:	bf00      	nop
 8007f90:	40012c00 	.word	0x40012c00
 8007f94:	40013400 	.word	0x40013400
 8007f98:	40015000 	.word	0x40015000
 8007f9c:	40000400 	.word	0x40000400
 8007fa0:	40000800 	.word	0x40000800
 8007fa4:	40000c00 	.word	0x40000c00
 8007fa8:	40014000 	.word	0x40014000

08007fac <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8007fac:	b480      	push	{r7}
 8007fae:	b085      	sub	sp, #20
 8007fb0:	af00      	add	r7, sp, #0
 8007fb2:	6078      	str	r0, [r7, #4]
 8007fb4:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8007fb6:	2300      	movs	r3, #0
 8007fb8:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8007fba:	687b      	ldr	r3, [r7, #4]
 8007fbc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007fc0:	2b01      	cmp	r3, #1
 8007fc2:	d101      	bne.n	8007fc8 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8007fc4:	2302      	movs	r3, #2
 8007fc6:	e096      	b.n	80080f6 <HAL_TIMEx_ConfigBreakDeadTime+0x14a>
 8007fc8:	687b      	ldr	r3, [r7, #4]
 8007fca:	2201      	movs	r2, #1
 8007fcc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8007fd0:	68fb      	ldr	r3, [r7, #12]
 8007fd2:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8007fd6:	683b      	ldr	r3, [r7, #0]
 8007fd8:	68db      	ldr	r3, [r3, #12]
 8007fda:	4313      	orrs	r3, r2
 8007fdc:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8007fde:	68fb      	ldr	r3, [r7, #12]
 8007fe0:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8007fe4:	683b      	ldr	r3, [r7, #0]
 8007fe6:	689b      	ldr	r3, [r3, #8]
 8007fe8:	4313      	orrs	r3, r2
 8007fea:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8007fec:	68fb      	ldr	r3, [r7, #12]
 8007fee:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8007ff2:	683b      	ldr	r3, [r7, #0]
 8007ff4:	685b      	ldr	r3, [r3, #4]
 8007ff6:	4313      	orrs	r3, r2
 8007ff8:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8007ffa:	68fb      	ldr	r3, [r7, #12]
 8007ffc:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8008000:	683b      	ldr	r3, [r7, #0]
 8008002:	681b      	ldr	r3, [r3, #0]
 8008004:	4313      	orrs	r3, r2
 8008006:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8008008:	68fb      	ldr	r3, [r7, #12]
 800800a:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800800e:	683b      	ldr	r3, [r7, #0]
 8008010:	691b      	ldr	r3, [r3, #16]
 8008012:	4313      	orrs	r3, r2
 8008014:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8008016:	68fb      	ldr	r3, [r7, #12]
 8008018:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 800801c:	683b      	ldr	r3, [r7, #0]
 800801e:	695b      	ldr	r3, [r3, #20]
 8008020:	4313      	orrs	r3, r2
 8008022:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8008024:	68fb      	ldr	r3, [r7, #12]
 8008026:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 800802a:	683b      	ldr	r3, [r7, #0]
 800802c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800802e:	4313      	orrs	r3, r2
 8008030:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 8008032:	68fb      	ldr	r3, [r7, #12]
 8008034:	f423 2270 	bic.w	r2, r3, #983040	; 0xf0000
 8008038:	683b      	ldr	r3, [r7, #0]
 800803a:	699b      	ldr	r3, [r3, #24]
 800803c:	041b      	lsls	r3, r3, #16
 800803e:	4313      	orrs	r3, r2
 8008040:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_ADVANCED_INSTANCE(htim->Instance))
 8008042:	687b      	ldr	r3, [r7, #4]
 8008044:	681b      	ldr	r3, [r3, #0]
 8008046:	4a2f      	ldr	r2, [pc, #188]	; (8008104 <HAL_TIMEx_ConfigBreakDeadTime+0x158>)
 8008048:	4293      	cmp	r3, r2
 800804a:	d009      	beq.n	8008060 <HAL_TIMEx_ConfigBreakDeadTime+0xb4>
 800804c:	687b      	ldr	r3, [r7, #4]
 800804e:	681b      	ldr	r3, [r3, #0]
 8008050:	4a2d      	ldr	r2, [pc, #180]	; (8008108 <HAL_TIMEx_ConfigBreakDeadTime+0x15c>)
 8008052:	4293      	cmp	r3, r2
 8008054:	d004      	beq.n	8008060 <HAL_TIMEx_ConfigBreakDeadTime+0xb4>
 8008056:	687b      	ldr	r3, [r7, #4]
 8008058:	681b      	ldr	r3, [r3, #0]
 800805a:	4a2c      	ldr	r2, [pc, #176]	; (800810c <HAL_TIMEx_ConfigBreakDeadTime+0x160>)
 800805c:	4293      	cmp	r3, r2
 800805e:	d106      	bne.n	800806e <HAL_TIMEx_ConfigBreakDeadTime+0xc2>
  {
    /* Check the parameters */
    assert_param(IS_TIM_BREAK_AFMODE(sBreakDeadTimeConfig->BreakAFMode));

    /* Set BREAK AF mode */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BKBID, sBreakDeadTimeConfig->BreakAFMode);
 8008060:	68fb      	ldr	r3, [r7, #12]
 8008062:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 8008066:	683b      	ldr	r3, [r7, #0]
 8008068:	69db      	ldr	r3, [r3, #28]
 800806a:	4313      	orrs	r3, r2
 800806c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 800806e:	687b      	ldr	r3, [r7, #4]
 8008070:	681b      	ldr	r3, [r3, #0]
 8008072:	4a24      	ldr	r2, [pc, #144]	; (8008104 <HAL_TIMEx_ConfigBreakDeadTime+0x158>)
 8008074:	4293      	cmp	r3, r2
 8008076:	d009      	beq.n	800808c <HAL_TIMEx_ConfigBreakDeadTime+0xe0>
 8008078:	687b      	ldr	r3, [r7, #4]
 800807a:	681b      	ldr	r3, [r3, #0]
 800807c:	4a22      	ldr	r2, [pc, #136]	; (8008108 <HAL_TIMEx_ConfigBreakDeadTime+0x15c>)
 800807e:	4293      	cmp	r3, r2
 8008080:	d004      	beq.n	800808c <HAL_TIMEx_ConfigBreakDeadTime+0xe0>
 8008082:	687b      	ldr	r3, [r7, #4]
 8008084:	681b      	ldr	r3, [r3, #0]
 8008086:	4a21      	ldr	r2, [pc, #132]	; (800810c <HAL_TIMEx_ConfigBreakDeadTime+0x160>)
 8008088:	4293      	cmp	r3, r2
 800808a:	d12b      	bne.n	80080e4 <HAL_TIMEx_ConfigBreakDeadTime+0x138>
    assert_param(IS_TIM_BREAK2_STATE(sBreakDeadTimeConfig->Break2State));
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 800808c:	68fb      	ldr	r3, [r7, #12]
 800808e:	f423 0270 	bic.w	r2, r3, #15728640	; 0xf00000
 8008092:	683b      	ldr	r3, [r7, #0]
 8008094:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008096:	051b      	lsls	r3, r3, #20
 8008098:	4313      	orrs	r3, r2
 800809a:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 800809c:	68fb      	ldr	r3, [r7, #12]
 800809e:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 80080a2:	683b      	ldr	r3, [r7, #0]
 80080a4:	6a1b      	ldr	r3, [r3, #32]
 80080a6:	4313      	orrs	r3, r2
 80080a8:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 80080aa:	68fb      	ldr	r3, [r7, #12]
 80080ac:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 80080b0:	683b      	ldr	r3, [r7, #0]
 80080b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80080b4:	4313      	orrs	r3, r2
 80080b6:	60fb      	str	r3, [r7, #12]

    if (IS_TIM_ADVANCED_INSTANCE(htim->Instance))
 80080b8:	687b      	ldr	r3, [r7, #4]
 80080ba:	681b      	ldr	r3, [r3, #0]
 80080bc:	4a11      	ldr	r2, [pc, #68]	; (8008104 <HAL_TIMEx_ConfigBreakDeadTime+0x158>)
 80080be:	4293      	cmp	r3, r2
 80080c0:	d009      	beq.n	80080d6 <HAL_TIMEx_ConfigBreakDeadTime+0x12a>
 80080c2:	687b      	ldr	r3, [r7, #4]
 80080c4:	681b      	ldr	r3, [r3, #0]
 80080c6:	4a10      	ldr	r2, [pc, #64]	; (8008108 <HAL_TIMEx_ConfigBreakDeadTime+0x15c>)
 80080c8:	4293      	cmp	r3, r2
 80080ca:	d004      	beq.n	80080d6 <HAL_TIMEx_ConfigBreakDeadTime+0x12a>
 80080cc:	687b      	ldr	r3, [r7, #4]
 80080ce:	681b      	ldr	r3, [r3, #0]
 80080d0:	4a0e      	ldr	r2, [pc, #56]	; (800810c <HAL_TIMEx_ConfigBreakDeadTime+0x160>)
 80080d2:	4293      	cmp	r3, r2
 80080d4:	d106      	bne.n	80080e4 <HAL_TIMEx_ConfigBreakDeadTime+0x138>
    {
      /* Check the parameters */
      assert_param(IS_TIM_BREAK2_AFMODE(sBreakDeadTimeConfig->Break2AFMode));

      /* Set BREAK2 AF mode */
      MODIFY_REG(tmpbdtr, TIM_BDTR_BK2BID, sBreakDeadTimeConfig->Break2AFMode);
 80080d6:	68fb      	ldr	r3, [r7, #12]
 80080d8:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
 80080dc:	683b      	ldr	r3, [r7, #0]
 80080de:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80080e0:	4313      	orrs	r3, r2
 80080e2:	60fb      	str	r3, [r7, #12]
    }
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 80080e4:	687b      	ldr	r3, [r7, #4]
 80080e6:	681b      	ldr	r3, [r3, #0]
 80080e8:	68fa      	ldr	r2, [r7, #12]
 80080ea:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 80080ec:	687b      	ldr	r3, [r7, #4]
 80080ee:	2200      	movs	r2, #0
 80080f0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80080f4:	2300      	movs	r3, #0
}
 80080f6:	4618      	mov	r0, r3
 80080f8:	3714      	adds	r7, #20
 80080fa:	46bd      	mov	sp, r7
 80080fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008100:	4770      	bx	lr
 8008102:	bf00      	nop
 8008104:	40012c00 	.word	0x40012c00
 8008108:	40013400 	.word	0x40013400
 800810c:	40015000 	.word	0x40015000

08008110 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8008110:	b480      	push	{r7}
 8008112:	b083      	sub	sp, #12
 8008114:	af00      	add	r7, sp, #0
 8008116:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8008118:	bf00      	nop
 800811a:	370c      	adds	r7, #12
 800811c:	46bd      	mov	sp, r7
 800811e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008122:	4770      	bx	lr

08008124 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8008124:	b480      	push	{r7}
 8008126:	b083      	sub	sp, #12
 8008128:	af00      	add	r7, sp, #0
 800812a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800812c:	bf00      	nop
 800812e:	370c      	adds	r7, #12
 8008130:	46bd      	mov	sp, r7
 8008132:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008136:	4770      	bx	lr

08008138 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8008138:	b480      	push	{r7}
 800813a:	b083      	sub	sp, #12
 800813c:	af00      	add	r7, sp, #0
 800813e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8008140:	bf00      	nop
 8008142:	370c      	adds	r7, #12
 8008144:	46bd      	mov	sp, r7
 8008146:	f85d 7b04 	ldr.w	r7, [sp], #4
 800814a:	4770      	bx	lr

0800814c <HAL_TIMEx_EncoderIndexCallback>:
  * @brief  Encoder index callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_EncoderIndexCallback(TIM_HandleTypeDef *htim)
{
 800814c:	b480      	push	{r7}
 800814e:	b083      	sub	sp, #12
 8008150:	af00      	add	r7, sp, #0
 8008152:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_EncoderIndexCallback could be implemented in the user file
   */
}
 8008154:	bf00      	nop
 8008156:	370c      	adds	r7, #12
 8008158:	46bd      	mov	sp, r7
 800815a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800815e:	4770      	bx	lr

08008160 <HAL_TIMEx_DirectionChangeCallback>:
  * @brief  Direction change callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_DirectionChangeCallback(TIM_HandleTypeDef *htim)
{
 8008160:	b480      	push	{r7}
 8008162:	b083      	sub	sp, #12
 8008164:	af00      	add	r7, sp, #0
 8008166:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_DirectionChangeCallback could be implemented in the user file
   */
}
 8008168:	bf00      	nop
 800816a:	370c      	adds	r7, #12
 800816c:	46bd      	mov	sp, r7
 800816e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008172:	4770      	bx	lr

08008174 <HAL_TIMEx_IndexErrorCallback>:
  * @brief  Index error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_IndexErrorCallback(TIM_HandleTypeDef *htim)
{
 8008174:	b480      	push	{r7}
 8008176:	b083      	sub	sp, #12
 8008178:	af00      	add	r7, sp, #0
 800817a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_IndexErrorCallback could be implemented in the user file
   */
}
 800817c:	bf00      	nop
 800817e:	370c      	adds	r7, #12
 8008180:	46bd      	mov	sp, r7
 8008182:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008186:	4770      	bx	lr

08008188 <HAL_TIMEx_TransitionErrorCallback>:
  * @brief  Transition error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_TransitionErrorCallback(TIM_HandleTypeDef *htim)
{
 8008188:	b480      	push	{r7}
 800818a:	b083      	sub	sp, #12
 800818c:	af00      	add	r7, sp, #0
 800818e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_TransitionErrorCallback could be implemented in the user file
   */
}
 8008190:	bf00      	nop
 8008192:	370c      	adds	r7, #12
 8008194:	46bd      	mov	sp, r7
 8008196:	f85d 7b04 	ldr.w	r7, [sp], #4
 800819a:	4770      	bx	lr

0800819c <LL_EXTI_EnableIT_0_31>:
{
 800819c:	b480      	push	{r7}
 800819e:	b083      	sub	sp, #12
 80081a0:	af00      	add	r7, sp, #0
 80081a2:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->IMR1, ExtiLine);
 80081a4:	4b05      	ldr	r3, [pc, #20]	; (80081bc <LL_EXTI_EnableIT_0_31+0x20>)
 80081a6:	681a      	ldr	r2, [r3, #0]
 80081a8:	4904      	ldr	r1, [pc, #16]	; (80081bc <LL_EXTI_EnableIT_0_31+0x20>)
 80081aa:	687b      	ldr	r3, [r7, #4]
 80081ac:	4313      	orrs	r3, r2
 80081ae:	600b      	str	r3, [r1, #0]
}
 80081b0:	bf00      	nop
 80081b2:	370c      	adds	r7, #12
 80081b4:	46bd      	mov	sp, r7
 80081b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081ba:	4770      	bx	lr
 80081bc:	40010400 	.word	0x40010400

080081c0 <LL_EXTI_EnableIT_32_63>:
{
 80081c0:	b480      	push	{r7}
 80081c2:	b083      	sub	sp, #12
 80081c4:	af00      	add	r7, sp, #0
 80081c6:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->IMR2, ExtiLine);
 80081c8:	4b05      	ldr	r3, [pc, #20]	; (80081e0 <LL_EXTI_EnableIT_32_63+0x20>)
 80081ca:	6a1a      	ldr	r2, [r3, #32]
 80081cc:	4904      	ldr	r1, [pc, #16]	; (80081e0 <LL_EXTI_EnableIT_32_63+0x20>)
 80081ce:	687b      	ldr	r3, [r7, #4]
 80081d0:	4313      	orrs	r3, r2
 80081d2:	620b      	str	r3, [r1, #32]
}
 80081d4:	bf00      	nop
 80081d6:	370c      	adds	r7, #12
 80081d8:	46bd      	mov	sp, r7
 80081da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081de:	4770      	bx	lr
 80081e0:	40010400 	.word	0x40010400

080081e4 <LL_EXTI_DisableIT_0_31>:
{
 80081e4:	b480      	push	{r7}
 80081e6:	b083      	sub	sp, #12
 80081e8:	af00      	add	r7, sp, #0
 80081ea:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->IMR1, ExtiLine);
 80081ec:	4b06      	ldr	r3, [pc, #24]	; (8008208 <LL_EXTI_DisableIT_0_31+0x24>)
 80081ee:	681a      	ldr	r2, [r3, #0]
 80081f0:	687b      	ldr	r3, [r7, #4]
 80081f2:	43db      	mvns	r3, r3
 80081f4:	4904      	ldr	r1, [pc, #16]	; (8008208 <LL_EXTI_DisableIT_0_31+0x24>)
 80081f6:	4013      	ands	r3, r2
 80081f8:	600b      	str	r3, [r1, #0]
}
 80081fa:	bf00      	nop
 80081fc:	370c      	adds	r7, #12
 80081fe:	46bd      	mov	sp, r7
 8008200:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008204:	4770      	bx	lr
 8008206:	bf00      	nop
 8008208:	40010400 	.word	0x40010400

0800820c <LL_EXTI_DisableIT_32_63>:
{
 800820c:	b480      	push	{r7}
 800820e:	b083      	sub	sp, #12
 8008210:	af00      	add	r7, sp, #0
 8008212:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->IMR2, ExtiLine);
 8008214:	4b06      	ldr	r3, [pc, #24]	; (8008230 <LL_EXTI_DisableIT_32_63+0x24>)
 8008216:	6a1a      	ldr	r2, [r3, #32]
 8008218:	687b      	ldr	r3, [r7, #4]
 800821a:	43db      	mvns	r3, r3
 800821c:	4904      	ldr	r1, [pc, #16]	; (8008230 <LL_EXTI_DisableIT_32_63+0x24>)
 800821e:	4013      	ands	r3, r2
 8008220:	620b      	str	r3, [r1, #32]
}
 8008222:	bf00      	nop
 8008224:	370c      	adds	r7, #12
 8008226:	46bd      	mov	sp, r7
 8008228:	f85d 7b04 	ldr.w	r7, [sp], #4
 800822c:	4770      	bx	lr
 800822e:	bf00      	nop
 8008230:	40010400 	.word	0x40010400

08008234 <LL_EXTI_EnableEvent_0_31>:
{
 8008234:	b480      	push	{r7}
 8008236:	b083      	sub	sp, #12
 8008238:	af00      	add	r7, sp, #0
 800823a:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->EMR1, ExtiLine);
 800823c:	4b05      	ldr	r3, [pc, #20]	; (8008254 <LL_EXTI_EnableEvent_0_31+0x20>)
 800823e:	685a      	ldr	r2, [r3, #4]
 8008240:	4904      	ldr	r1, [pc, #16]	; (8008254 <LL_EXTI_EnableEvent_0_31+0x20>)
 8008242:	687b      	ldr	r3, [r7, #4]
 8008244:	4313      	orrs	r3, r2
 8008246:	604b      	str	r3, [r1, #4]
}
 8008248:	bf00      	nop
 800824a:	370c      	adds	r7, #12
 800824c:	46bd      	mov	sp, r7
 800824e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008252:	4770      	bx	lr
 8008254:	40010400 	.word	0x40010400

08008258 <LL_EXTI_EnableEvent_32_63>:
{
 8008258:	b480      	push	{r7}
 800825a:	b083      	sub	sp, #12
 800825c:	af00      	add	r7, sp, #0
 800825e:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->EMR2, ExtiLine);
 8008260:	4b05      	ldr	r3, [pc, #20]	; (8008278 <LL_EXTI_EnableEvent_32_63+0x20>)
 8008262:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8008264:	4904      	ldr	r1, [pc, #16]	; (8008278 <LL_EXTI_EnableEvent_32_63+0x20>)
 8008266:	687b      	ldr	r3, [r7, #4]
 8008268:	4313      	orrs	r3, r2
 800826a:	624b      	str	r3, [r1, #36]	; 0x24
}
 800826c:	bf00      	nop
 800826e:	370c      	adds	r7, #12
 8008270:	46bd      	mov	sp, r7
 8008272:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008276:	4770      	bx	lr
 8008278:	40010400 	.word	0x40010400

0800827c <LL_EXTI_DisableEvent_0_31>:
{
 800827c:	b480      	push	{r7}
 800827e:	b083      	sub	sp, #12
 8008280:	af00      	add	r7, sp, #0
 8008282:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->EMR1, ExtiLine);
 8008284:	4b06      	ldr	r3, [pc, #24]	; (80082a0 <LL_EXTI_DisableEvent_0_31+0x24>)
 8008286:	685a      	ldr	r2, [r3, #4]
 8008288:	687b      	ldr	r3, [r7, #4]
 800828a:	43db      	mvns	r3, r3
 800828c:	4904      	ldr	r1, [pc, #16]	; (80082a0 <LL_EXTI_DisableEvent_0_31+0x24>)
 800828e:	4013      	ands	r3, r2
 8008290:	604b      	str	r3, [r1, #4]
}
 8008292:	bf00      	nop
 8008294:	370c      	adds	r7, #12
 8008296:	46bd      	mov	sp, r7
 8008298:	f85d 7b04 	ldr.w	r7, [sp], #4
 800829c:	4770      	bx	lr
 800829e:	bf00      	nop
 80082a0:	40010400 	.word	0x40010400

080082a4 <LL_EXTI_DisableEvent_32_63>:
{
 80082a4:	b480      	push	{r7}
 80082a6:	b083      	sub	sp, #12
 80082a8:	af00      	add	r7, sp, #0
 80082aa:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->EMR2, ExtiLine);
 80082ac:	4b06      	ldr	r3, [pc, #24]	; (80082c8 <LL_EXTI_DisableEvent_32_63+0x24>)
 80082ae:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80082b0:	687b      	ldr	r3, [r7, #4]
 80082b2:	43db      	mvns	r3, r3
 80082b4:	4904      	ldr	r1, [pc, #16]	; (80082c8 <LL_EXTI_DisableEvent_32_63+0x24>)
 80082b6:	4013      	ands	r3, r2
 80082b8:	624b      	str	r3, [r1, #36]	; 0x24
}
 80082ba:	bf00      	nop
 80082bc:	370c      	adds	r7, #12
 80082be:	46bd      	mov	sp, r7
 80082c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80082c4:	4770      	bx	lr
 80082c6:	bf00      	nop
 80082c8:	40010400 	.word	0x40010400

080082cc <LL_EXTI_EnableRisingTrig_0_31>:
{
 80082cc:	b480      	push	{r7}
 80082ce:	b083      	sub	sp, #12
 80082d0:	af00      	add	r7, sp, #0
 80082d2:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->RTSR1, ExtiLine);
 80082d4:	4b05      	ldr	r3, [pc, #20]	; (80082ec <LL_EXTI_EnableRisingTrig_0_31+0x20>)
 80082d6:	689a      	ldr	r2, [r3, #8]
 80082d8:	4904      	ldr	r1, [pc, #16]	; (80082ec <LL_EXTI_EnableRisingTrig_0_31+0x20>)
 80082da:	687b      	ldr	r3, [r7, #4]
 80082dc:	4313      	orrs	r3, r2
 80082de:	608b      	str	r3, [r1, #8]
}
 80082e0:	bf00      	nop
 80082e2:	370c      	adds	r7, #12
 80082e4:	46bd      	mov	sp, r7
 80082e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80082ea:	4770      	bx	lr
 80082ec:	40010400 	.word	0x40010400

080082f0 <LL_EXTI_EnableRisingTrig_32_63>:
{
 80082f0:	b480      	push	{r7}
 80082f2:	b083      	sub	sp, #12
 80082f4:	af00      	add	r7, sp, #0
 80082f6:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->RTSR2, ExtiLine);
 80082f8:	4b05      	ldr	r3, [pc, #20]	; (8008310 <LL_EXTI_EnableRisingTrig_32_63+0x20>)
 80082fa:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80082fc:	4904      	ldr	r1, [pc, #16]	; (8008310 <LL_EXTI_EnableRisingTrig_32_63+0x20>)
 80082fe:	687b      	ldr	r3, [r7, #4]
 8008300:	4313      	orrs	r3, r2
 8008302:	628b      	str	r3, [r1, #40]	; 0x28
}
 8008304:	bf00      	nop
 8008306:	370c      	adds	r7, #12
 8008308:	46bd      	mov	sp, r7
 800830a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800830e:	4770      	bx	lr
 8008310:	40010400 	.word	0x40010400

08008314 <LL_EXTI_DisableRisingTrig_0_31>:
{
 8008314:	b480      	push	{r7}
 8008316:	b083      	sub	sp, #12
 8008318:	af00      	add	r7, sp, #0
 800831a:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->RTSR1, ExtiLine);
 800831c:	4b06      	ldr	r3, [pc, #24]	; (8008338 <LL_EXTI_DisableRisingTrig_0_31+0x24>)
 800831e:	689a      	ldr	r2, [r3, #8]
 8008320:	687b      	ldr	r3, [r7, #4]
 8008322:	43db      	mvns	r3, r3
 8008324:	4904      	ldr	r1, [pc, #16]	; (8008338 <LL_EXTI_DisableRisingTrig_0_31+0x24>)
 8008326:	4013      	ands	r3, r2
 8008328:	608b      	str	r3, [r1, #8]
}
 800832a:	bf00      	nop
 800832c:	370c      	adds	r7, #12
 800832e:	46bd      	mov	sp, r7
 8008330:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008334:	4770      	bx	lr
 8008336:	bf00      	nop
 8008338:	40010400 	.word	0x40010400

0800833c <LL_EXTI_DisableRisingTrig_32_63>:
{
 800833c:	b480      	push	{r7}
 800833e:	b083      	sub	sp, #12
 8008340:	af00      	add	r7, sp, #0
 8008342:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->RTSR2, ExtiLine);
 8008344:	4b06      	ldr	r3, [pc, #24]	; (8008360 <LL_EXTI_DisableRisingTrig_32_63+0x24>)
 8008346:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8008348:	687b      	ldr	r3, [r7, #4]
 800834a:	43db      	mvns	r3, r3
 800834c:	4904      	ldr	r1, [pc, #16]	; (8008360 <LL_EXTI_DisableRisingTrig_32_63+0x24>)
 800834e:	4013      	ands	r3, r2
 8008350:	628b      	str	r3, [r1, #40]	; 0x28
}
 8008352:	bf00      	nop
 8008354:	370c      	adds	r7, #12
 8008356:	46bd      	mov	sp, r7
 8008358:	f85d 7b04 	ldr.w	r7, [sp], #4
 800835c:	4770      	bx	lr
 800835e:	bf00      	nop
 8008360:	40010400 	.word	0x40010400

08008364 <LL_EXTI_EnableFallingTrig_0_31>:
{
 8008364:	b480      	push	{r7}
 8008366:	b083      	sub	sp, #12
 8008368:	af00      	add	r7, sp, #0
 800836a:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->FTSR1, ExtiLine);
 800836c:	4b05      	ldr	r3, [pc, #20]	; (8008384 <LL_EXTI_EnableFallingTrig_0_31+0x20>)
 800836e:	68da      	ldr	r2, [r3, #12]
 8008370:	4904      	ldr	r1, [pc, #16]	; (8008384 <LL_EXTI_EnableFallingTrig_0_31+0x20>)
 8008372:	687b      	ldr	r3, [r7, #4]
 8008374:	4313      	orrs	r3, r2
 8008376:	60cb      	str	r3, [r1, #12]
}
 8008378:	bf00      	nop
 800837a:	370c      	adds	r7, #12
 800837c:	46bd      	mov	sp, r7
 800837e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008382:	4770      	bx	lr
 8008384:	40010400 	.word	0x40010400

08008388 <LL_EXTI_EnableFallingTrig_32_63>:
{
 8008388:	b480      	push	{r7}
 800838a:	b083      	sub	sp, #12
 800838c:	af00      	add	r7, sp, #0
 800838e:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->FTSR2, ExtiLine);
 8008390:	4b05      	ldr	r3, [pc, #20]	; (80083a8 <LL_EXTI_EnableFallingTrig_32_63+0x20>)
 8008392:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008394:	4904      	ldr	r1, [pc, #16]	; (80083a8 <LL_EXTI_EnableFallingTrig_32_63+0x20>)
 8008396:	687b      	ldr	r3, [r7, #4]
 8008398:	4313      	orrs	r3, r2
 800839a:	62cb      	str	r3, [r1, #44]	; 0x2c
}
 800839c:	bf00      	nop
 800839e:	370c      	adds	r7, #12
 80083a0:	46bd      	mov	sp, r7
 80083a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083a6:	4770      	bx	lr
 80083a8:	40010400 	.word	0x40010400

080083ac <LL_EXTI_DisableFallingTrig_0_31>:
{
 80083ac:	b480      	push	{r7}
 80083ae:	b083      	sub	sp, #12
 80083b0:	af00      	add	r7, sp, #0
 80083b2:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->FTSR1, ExtiLine);
 80083b4:	4b06      	ldr	r3, [pc, #24]	; (80083d0 <LL_EXTI_DisableFallingTrig_0_31+0x24>)
 80083b6:	68da      	ldr	r2, [r3, #12]
 80083b8:	687b      	ldr	r3, [r7, #4]
 80083ba:	43db      	mvns	r3, r3
 80083bc:	4904      	ldr	r1, [pc, #16]	; (80083d0 <LL_EXTI_DisableFallingTrig_0_31+0x24>)
 80083be:	4013      	ands	r3, r2
 80083c0:	60cb      	str	r3, [r1, #12]
}
 80083c2:	bf00      	nop
 80083c4:	370c      	adds	r7, #12
 80083c6:	46bd      	mov	sp, r7
 80083c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083cc:	4770      	bx	lr
 80083ce:	bf00      	nop
 80083d0:	40010400 	.word	0x40010400

080083d4 <LL_EXTI_DisableFallingTrig_32_63>:
{
 80083d4:	b480      	push	{r7}
 80083d6:	b083      	sub	sp, #12
 80083d8:	af00      	add	r7, sp, #0
 80083da:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->FTSR2, ExtiLine);
 80083dc:	4b06      	ldr	r3, [pc, #24]	; (80083f8 <LL_EXTI_DisableFallingTrig_32_63+0x24>)
 80083de:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80083e0:	687b      	ldr	r3, [r7, #4]
 80083e2:	43db      	mvns	r3, r3
 80083e4:	4904      	ldr	r1, [pc, #16]	; (80083f8 <LL_EXTI_DisableFallingTrig_32_63+0x24>)
 80083e6:	4013      	ands	r3, r2
 80083e8:	62cb      	str	r3, [r1, #44]	; 0x2c
}
 80083ea:	bf00      	nop
 80083ec:	370c      	adds	r7, #12
 80083ee:	46bd      	mov	sp, r7
 80083f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083f4:	4770      	bx	lr
 80083f6:	bf00      	nop
 80083f8:	40010400 	.word	0x40010400

080083fc <LL_EXTI_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - 0x00: EXTI registers are initialized
  *          - any other calue : wrong configuration
  */
uint32_t LL_EXTI_Init(LL_EXTI_InitTypeDef *EXTI_InitStruct)
{
 80083fc:	b580      	push	{r7, lr}
 80083fe:	b084      	sub	sp, #16
 8008400:	af00      	add	r7, sp, #0
 8008402:	6078      	str	r0, [r7, #4]
  uint32_t status = 0x00u;
 8008404:	2300      	movs	r3, #0
 8008406:	60fb      	str	r3, [r7, #12]
  assert_param(IS_LL_EXTI_LINE_32_63(EXTI_InitStruct->Line_32_63));
  assert_param(IS_FUNCTIONAL_STATE(EXTI_InitStruct->LineCommand));
  assert_param(IS_LL_EXTI_MODE(EXTI_InitStruct->Mode));

  /* ENABLE LineCommand */
  if (EXTI_InitStruct->LineCommand != DISABLE)
 8008408:	687b      	ldr	r3, [r7, #4]
 800840a:	7a1b      	ldrb	r3, [r3, #8]
 800840c:	2b00      	cmp	r3, #0
 800840e:	f000 80c8 	beq.w	80085a2 <LL_EXTI_Init+0x1a6>
  {
    assert_param(IS_LL_EXTI_TRIGGER(EXTI_InitStruct->Trigger));

    /* Configure EXTI Lines in range from 0 to 31 */
    if (EXTI_InitStruct->Line_0_31 != LL_EXTI_LINE_NONE)
 8008412:	687b      	ldr	r3, [r7, #4]
 8008414:	681b      	ldr	r3, [r3, #0]
 8008416:	2b00      	cmp	r3, #0
 8008418:	d05d      	beq.n	80084d6 <LL_EXTI_Init+0xda>
    {
      switch (EXTI_InitStruct->Mode)
 800841a:	687b      	ldr	r3, [r7, #4]
 800841c:	7a5b      	ldrb	r3, [r3, #9]
 800841e:	2b01      	cmp	r3, #1
 8008420:	d00e      	beq.n	8008440 <LL_EXTI_Init+0x44>
 8008422:	2b02      	cmp	r3, #2
 8008424:	d017      	beq.n	8008456 <LL_EXTI_Init+0x5a>
 8008426:	2b00      	cmp	r3, #0
 8008428:	d120      	bne.n	800846c <LL_EXTI_Init+0x70>
      {
        case LL_EXTI_MODE_IT:
          /* First Disable Event on provided Lines */
          LL_EXTI_DisableEvent_0_31(EXTI_InitStruct->Line_0_31);
 800842a:	687b      	ldr	r3, [r7, #4]
 800842c:	681b      	ldr	r3, [r3, #0]
 800842e:	4618      	mov	r0, r3
 8008430:	f7ff ff24 	bl	800827c <LL_EXTI_DisableEvent_0_31>
          /* Then Enable IT on provided Lines */
          LL_EXTI_EnableIT_0_31(EXTI_InitStruct->Line_0_31);
 8008434:	687b      	ldr	r3, [r7, #4]
 8008436:	681b      	ldr	r3, [r3, #0]
 8008438:	4618      	mov	r0, r3
 800843a:	f7ff feaf 	bl	800819c <LL_EXTI_EnableIT_0_31>
          break;
 800843e:	e018      	b.n	8008472 <LL_EXTI_Init+0x76>
        case LL_EXTI_MODE_EVENT:
          /* First Disable IT on provided Lines */
          LL_EXTI_DisableIT_0_31(EXTI_InitStruct->Line_0_31);
 8008440:	687b      	ldr	r3, [r7, #4]
 8008442:	681b      	ldr	r3, [r3, #0]
 8008444:	4618      	mov	r0, r3
 8008446:	f7ff fecd 	bl	80081e4 <LL_EXTI_DisableIT_0_31>
          /* Then Enable Event on provided Lines */
          LL_EXTI_EnableEvent_0_31(EXTI_InitStruct->Line_0_31);
 800844a:	687b      	ldr	r3, [r7, #4]
 800844c:	681b      	ldr	r3, [r3, #0]
 800844e:	4618      	mov	r0, r3
 8008450:	f7ff fef0 	bl	8008234 <LL_EXTI_EnableEvent_0_31>
          break;
 8008454:	e00d      	b.n	8008472 <LL_EXTI_Init+0x76>
        case LL_EXTI_MODE_IT_EVENT:
          /* Directly Enable IT on provided Lines */
          LL_EXTI_EnableIT_0_31(EXTI_InitStruct->Line_0_31);
 8008456:	687b      	ldr	r3, [r7, #4]
 8008458:	681b      	ldr	r3, [r3, #0]
 800845a:	4618      	mov	r0, r3
 800845c:	f7ff fe9e 	bl	800819c <LL_EXTI_EnableIT_0_31>
          /* Directly Enable Event on provided Lines */
          LL_EXTI_EnableEvent_0_31(EXTI_InitStruct->Line_0_31);
 8008460:	687b      	ldr	r3, [r7, #4]
 8008462:	681b      	ldr	r3, [r3, #0]
 8008464:	4618      	mov	r0, r3
 8008466:	f7ff fee5 	bl	8008234 <LL_EXTI_EnableEvent_0_31>
          break;
 800846a:	e002      	b.n	8008472 <LL_EXTI_Init+0x76>
        default:
          status = 0x01u;
 800846c:	2301      	movs	r3, #1
 800846e:	60fb      	str	r3, [r7, #12]
          break;
 8008470:	bf00      	nop
      }
      if (EXTI_InitStruct->Trigger != LL_EXTI_TRIGGER_NONE)
 8008472:	687b      	ldr	r3, [r7, #4]
 8008474:	7a9b      	ldrb	r3, [r3, #10]
 8008476:	2b00      	cmp	r3, #0
 8008478:	d02d      	beq.n	80084d6 <LL_EXTI_Init+0xda>
      {
        switch (EXTI_InitStruct->Trigger)
 800847a:	687b      	ldr	r3, [r7, #4]
 800847c:	7a9b      	ldrb	r3, [r3, #10]
 800847e:	2b02      	cmp	r3, #2
 8008480:	d00e      	beq.n	80084a0 <LL_EXTI_Init+0xa4>
 8008482:	2b03      	cmp	r3, #3
 8008484:	d017      	beq.n	80084b6 <LL_EXTI_Init+0xba>
 8008486:	2b01      	cmp	r3, #1
 8008488:	d120      	bne.n	80084cc <LL_EXTI_Init+0xd0>
        {
          case LL_EXTI_TRIGGER_RISING:
            /* First Disable Falling Trigger on provided Lines */
            LL_EXTI_DisableFallingTrig_0_31(EXTI_InitStruct->Line_0_31);
 800848a:	687b      	ldr	r3, [r7, #4]
 800848c:	681b      	ldr	r3, [r3, #0]
 800848e:	4618      	mov	r0, r3
 8008490:	f7ff ff8c 	bl	80083ac <LL_EXTI_DisableFallingTrig_0_31>
            /* Then Enable Rising Trigger on provided Lines */
            LL_EXTI_EnableRisingTrig_0_31(EXTI_InitStruct->Line_0_31);
 8008494:	687b      	ldr	r3, [r7, #4]
 8008496:	681b      	ldr	r3, [r3, #0]
 8008498:	4618      	mov	r0, r3
 800849a:	f7ff ff17 	bl	80082cc <LL_EXTI_EnableRisingTrig_0_31>
            break;
 800849e:	e01b      	b.n	80084d8 <LL_EXTI_Init+0xdc>
          case LL_EXTI_TRIGGER_FALLING:
            /* First Disable Rising Trigger on provided Lines */
            LL_EXTI_DisableRisingTrig_0_31(EXTI_InitStruct->Line_0_31);
 80084a0:	687b      	ldr	r3, [r7, #4]
 80084a2:	681b      	ldr	r3, [r3, #0]
 80084a4:	4618      	mov	r0, r3
 80084a6:	f7ff ff35 	bl	8008314 <LL_EXTI_DisableRisingTrig_0_31>
            /* Then Enable Falling Trigger on provided Lines */
            LL_EXTI_EnableFallingTrig_0_31(EXTI_InitStruct->Line_0_31);
 80084aa:	687b      	ldr	r3, [r7, #4]
 80084ac:	681b      	ldr	r3, [r3, #0]
 80084ae:	4618      	mov	r0, r3
 80084b0:	f7ff ff58 	bl	8008364 <LL_EXTI_EnableFallingTrig_0_31>
            break;
 80084b4:	e010      	b.n	80084d8 <LL_EXTI_Init+0xdc>
          case LL_EXTI_TRIGGER_RISING_FALLING:
            /* Enable Rising Trigger on provided Lines */
            LL_EXTI_EnableRisingTrig_0_31(EXTI_InitStruct->Line_0_31);
 80084b6:	687b      	ldr	r3, [r7, #4]
 80084b8:	681b      	ldr	r3, [r3, #0]
 80084ba:	4618      	mov	r0, r3
 80084bc:	f7ff ff06 	bl	80082cc <LL_EXTI_EnableRisingTrig_0_31>
            /* Enable Falling Trigger on provided Lines */
            LL_EXTI_EnableFallingTrig_0_31(EXTI_InitStruct->Line_0_31);
 80084c0:	687b      	ldr	r3, [r7, #4]
 80084c2:	681b      	ldr	r3, [r3, #0]
 80084c4:	4618      	mov	r0, r3
 80084c6:	f7ff ff4d 	bl	8008364 <LL_EXTI_EnableFallingTrig_0_31>
            break;
 80084ca:	e005      	b.n	80084d8 <LL_EXTI_Init+0xdc>
          default:
            status |= 0x02u;
 80084cc:	68fb      	ldr	r3, [r7, #12]
 80084ce:	f043 0302 	orr.w	r3, r3, #2
 80084d2:	60fb      	str	r3, [r7, #12]
            break;
 80084d4:	e000      	b.n	80084d8 <LL_EXTI_Init+0xdc>
        }
      }
 80084d6:	bf00      	nop
    }
    /* Configure EXTI Lines in range from 32 to 63 */
    if (EXTI_InitStruct->Line_32_63 != LL_EXTI_LINE_NONE)
 80084d8:	687b      	ldr	r3, [r7, #4]
 80084da:	685b      	ldr	r3, [r3, #4]
 80084dc:	2b00      	cmp	r3, #0
 80084de:	d075      	beq.n	80085cc <LL_EXTI_Init+0x1d0>
    {
      switch (EXTI_InitStruct->Mode)
 80084e0:	687b      	ldr	r3, [r7, #4]
 80084e2:	7a5b      	ldrb	r3, [r3, #9]
 80084e4:	2b01      	cmp	r3, #1
 80084e6:	d00e      	beq.n	8008506 <LL_EXTI_Init+0x10a>
 80084e8:	2b02      	cmp	r3, #2
 80084ea:	d017      	beq.n	800851c <LL_EXTI_Init+0x120>
 80084ec:	2b00      	cmp	r3, #0
 80084ee:	d120      	bne.n	8008532 <LL_EXTI_Init+0x136>
      {
        case LL_EXTI_MODE_IT:
          /* First Disable Event on provided Lines */
          LL_EXTI_DisableEvent_32_63(EXTI_InitStruct->Line_32_63);
 80084f0:	687b      	ldr	r3, [r7, #4]
 80084f2:	685b      	ldr	r3, [r3, #4]
 80084f4:	4618      	mov	r0, r3
 80084f6:	f7ff fed5 	bl	80082a4 <LL_EXTI_DisableEvent_32_63>
          /* Then Enable IT on provided Lines */
          LL_EXTI_EnableIT_32_63(EXTI_InitStruct->Line_32_63);
 80084fa:	687b      	ldr	r3, [r7, #4]
 80084fc:	685b      	ldr	r3, [r3, #4]
 80084fe:	4618      	mov	r0, r3
 8008500:	f7ff fe5e 	bl	80081c0 <LL_EXTI_EnableIT_32_63>
          break;
 8008504:	e01a      	b.n	800853c <LL_EXTI_Init+0x140>
        case LL_EXTI_MODE_EVENT:
          /* First Disable IT on provided Lines */
          LL_EXTI_DisableIT_32_63(EXTI_InitStruct->Line_32_63);
 8008506:	687b      	ldr	r3, [r7, #4]
 8008508:	685b      	ldr	r3, [r3, #4]
 800850a:	4618      	mov	r0, r3
 800850c:	f7ff fe7e 	bl	800820c <LL_EXTI_DisableIT_32_63>
          /* Then Enable Event on provided Lines */
          LL_EXTI_EnableEvent_32_63(EXTI_InitStruct->Line_32_63);
 8008510:	687b      	ldr	r3, [r7, #4]
 8008512:	685b      	ldr	r3, [r3, #4]
 8008514:	4618      	mov	r0, r3
 8008516:	f7ff fe9f 	bl	8008258 <LL_EXTI_EnableEvent_32_63>
          break;
 800851a:	e00f      	b.n	800853c <LL_EXTI_Init+0x140>
        case LL_EXTI_MODE_IT_EVENT:
          /* Directly Enable IT on provided Lines */
          LL_EXTI_EnableIT_32_63(EXTI_InitStruct->Line_32_63);
 800851c:	687b      	ldr	r3, [r7, #4]
 800851e:	685b      	ldr	r3, [r3, #4]
 8008520:	4618      	mov	r0, r3
 8008522:	f7ff fe4d 	bl	80081c0 <LL_EXTI_EnableIT_32_63>
          /* Directly Enable IT on provided Lines */
          LL_EXTI_EnableEvent_32_63(EXTI_InitStruct->Line_32_63);
 8008526:	687b      	ldr	r3, [r7, #4]
 8008528:	685b      	ldr	r3, [r3, #4]
 800852a:	4618      	mov	r0, r3
 800852c:	f7ff fe94 	bl	8008258 <LL_EXTI_EnableEvent_32_63>
          break;
 8008530:	e004      	b.n	800853c <LL_EXTI_Init+0x140>
        default:
          status |= 0x04u;
 8008532:	68fb      	ldr	r3, [r7, #12]
 8008534:	f043 0304 	orr.w	r3, r3, #4
 8008538:	60fb      	str	r3, [r7, #12]
          break;
 800853a:	bf00      	nop
      }
      if (EXTI_InitStruct->Trigger != LL_EXTI_TRIGGER_NONE)
 800853c:	687b      	ldr	r3, [r7, #4]
 800853e:	7a9b      	ldrb	r3, [r3, #10]
 8008540:	2b00      	cmp	r3, #0
 8008542:	d043      	beq.n	80085cc <LL_EXTI_Init+0x1d0>
      {
        switch (EXTI_InitStruct->Trigger)
 8008544:	687b      	ldr	r3, [r7, #4]
 8008546:	7a9b      	ldrb	r3, [r3, #10]
 8008548:	2b02      	cmp	r3, #2
 800854a:	d00e      	beq.n	800856a <LL_EXTI_Init+0x16e>
 800854c:	2b03      	cmp	r3, #3
 800854e:	d017      	beq.n	8008580 <LL_EXTI_Init+0x184>
 8008550:	2b01      	cmp	r3, #1
 8008552:	d120      	bne.n	8008596 <LL_EXTI_Init+0x19a>
        {
          case LL_EXTI_TRIGGER_RISING:
            /* First Disable Falling Trigger on provided Lines */
            LL_EXTI_DisableFallingTrig_32_63(EXTI_InitStruct->Line_32_63);
 8008554:	687b      	ldr	r3, [r7, #4]
 8008556:	685b      	ldr	r3, [r3, #4]
 8008558:	4618      	mov	r0, r3
 800855a:	f7ff ff3b 	bl	80083d4 <LL_EXTI_DisableFallingTrig_32_63>
            /* Then Enable IT on provided Lines */
            LL_EXTI_EnableRisingTrig_32_63(EXTI_InitStruct->Line_32_63);
 800855e:	687b      	ldr	r3, [r7, #4]
 8008560:	685b      	ldr	r3, [r3, #4]
 8008562:	4618      	mov	r0, r3
 8008564:	f7ff fec4 	bl	80082f0 <LL_EXTI_EnableRisingTrig_32_63>
            break;
 8008568:	e031      	b.n	80085ce <LL_EXTI_Init+0x1d2>
          case LL_EXTI_TRIGGER_FALLING:
            /* First Disable Rising Trigger on provided Lines */
            LL_EXTI_DisableRisingTrig_32_63(EXTI_InitStruct->Line_32_63);
 800856a:	687b      	ldr	r3, [r7, #4]
 800856c:	685b      	ldr	r3, [r3, #4]
 800856e:	4618      	mov	r0, r3
 8008570:	f7ff fee4 	bl	800833c <LL_EXTI_DisableRisingTrig_32_63>
            /* Then Enable Falling Trigger on provided Lines */
            LL_EXTI_EnableFallingTrig_32_63(EXTI_InitStruct->Line_32_63);
 8008574:	687b      	ldr	r3, [r7, #4]
 8008576:	685b      	ldr	r3, [r3, #4]
 8008578:	4618      	mov	r0, r3
 800857a:	f7ff ff05 	bl	8008388 <LL_EXTI_EnableFallingTrig_32_63>
            break;
 800857e:	e026      	b.n	80085ce <LL_EXTI_Init+0x1d2>
          case LL_EXTI_TRIGGER_RISING_FALLING:
            /* Enable Rising Trigger on provided Lines */
            LL_EXTI_EnableRisingTrig_32_63(EXTI_InitStruct->Line_32_63);
 8008580:	687b      	ldr	r3, [r7, #4]
 8008582:	685b      	ldr	r3, [r3, #4]
 8008584:	4618      	mov	r0, r3
 8008586:	f7ff feb3 	bl	80082f0 <LL_EXTI_EnableRisingTrig_32_63>
            /* Enable Falling Trigger on provided Lines */
            LL_EXTI_EnableFallingTrig_32_63(EXTI_InitStruct->Line_32_63);
 800858a:	687b      	ldr	r3, [r7, #4]
 800858c:	685b      	ldr	r3, [r3, #4]
 800858e:	4618      	mov	r0, r3
 8008590:	f7ff fefa 	bl	8008388 <LL_EXTI_EnableFallingTrig_32_63>
            break;
 8008594:	e01b      	b.n	80085ce <LL_EXTI_Init+0x1d2>
          default:
            status |= 0x05u;
 8008596:	68fb      	ldr	r3, [r7, #12]
 8008598:	f043 0305 	orr.w	r3, r3, #5
 800859c:	60fb      	str	r3, [r7, #12]
            break;
 800859e:	bf00      	nop
 80085a0:	e015      	b.n	80085ce <LL_EXTI_Init+0x1d2>
  }
  /* DISABLE LineCommand */
  else
  {
    /* De-configure IT EXTI Lines in range from 0 to 31 */
    LL_EXTI_DisableIT_0_31(EXTI_InitStruct->Line_0_31);
 80085a2:	687b      	ldr	r3, [r7, #4]
 80085a4:	681b      	ldr	r3, [r3, #0]
 80085a6:	4618      	mov	r0, r3
 80085a8:	f7ff fe1c 	bl	80081e4 <LL_EXTI_DisableIT_0_31>
    /* De-configure Event EXTI Lines in range from 0 to 31 */
    LL_EXTI_DisableEvent_0_31(EXTI_InitStruct->Line_0_31);
 80085ac:	687b      	ldr	r3, [r7, #4]
 80085ae:	681b      	ldr	r3, [r3, #0]
 80085b0:	4618      	mov	r0, r3
 80085b2:	f7ff fe63 	bl	800827c <LL_EXTI_DisableEvent_0_31>
    /* De-configure IT EXTI Lines in range from 32 to 63 */
    LL_EXTI_DisableIT_32_63(EXTI_InitStruct->Line_32_63);
 80085b6:	687b      	ldr	r3, [r7, #4]
 80085b8:	685b      	ldr	r3, [r3, #4]
 80085ba:	4618      	mov	r0, r3
 80085bc:	f7ff fe26 	bl	800820c <LL_EXTI_DisableIT_32_63>
    /* De-configure Event EXTI Lines in range from 32 to 63 */
    LL_EXTI_DisableEvent_32_63(EXTI_InitStruct->Line_32_63);
 80085c0:	687b      	ldr	r3, [r7, #4]
 80085c2:	685b      	ldr	r3, [r3, #4]
 80085c4:	4618      	mov	r0, r3
 80085c6:	f7ff fe6d 	bl	80082a4 <LL_EXTI_DisableEvent_32_63>
 80085ca:	e000      	b.n	80085ce <LL_EXTI_Init+0x1d2>
      }
 80085cc:	bf00      	nop
  }

  return status;
 80085ce:	68fb      	ldr	r3, [r7, #12]
}
 80085d0:	4618      	mov	r0, r3
 80085d2:	3710      	adds	r7, #16
 80085d4:	46bd      	mov	sp, r7
 80085d6:	bd80      	pop	{r7, pc}

080085d8 <LL_GPIO_SetPinMode>:
{
 80085d8:	b480      	push	{r7}
 80085da:	b089      	sub	sp, #36	; 0x24
 80085dc:	af00      	add	r7, sp, #0
 80085de:	60f8      	str	r0, [r7, #12]
 80085e0:	60b9      	str	r1, [r7, #8]
 80085e2:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->MODER, (GPIO_MODER_MODE0 << (POSITION_VAL(Pin) * 2U)), (Mode << (POSITION_VAL(Pin) * 2U)));
 80085e4:	68fb      	ldr	r3, [r7, #12]
 80085e6:	681a      	ldr	r2, [r3, #0]
 80085e8:	68bb      	ldr	r3, [r7, #8]
 80085ea:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80085ec:	697b      	ldr	r3, [r7, #20]
 80085ee:	fa93 f3a3 	rbit	r3, r3
 80085f2:	613b      	str	r3, [r7, #16]
  return result;
 80085f4:	693b      	ldr	r3, [r7, #16]
 80085f6:	fab3 f383 	clz	r3, r3
 80085fa:	b2db      	uxtb	r3, r3
 80085fc:	005b      	lsls	r3, r3, #1
 80085fe:	2103      	movs	r1, #3
 8008600:	fa01 f303 	lsl.w	r3, r1, r3
 8008604:	43db      	mvns	r3, r3
 8008606:	401a      	ands	r2, r3
 8008608:	68bb      	ldr	r3, [r7, #8]
 800860a:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800860c:	69fb      	ldr	r3, [r7, #28]
 800860e:	fa93 f3a3 	rbit	r3, r3
 8008612:	61bb      	str	r3, [r7, #24]
  return result;
 8008614:	69bb      	ldr	r3, [r7, #24]
 8008616:	fab3 f383 	clz	r3, r3
 800861a:	b2db      	uxtb	r3, r3
 800861c:	005b      	lsls	r3, r3, #1
 800861e:	6879      	ldr	r1, [r7, #4]
 8008620:	fa01 f303 	lsl.w	r3, r1, r3
 8008624:	431a      	orrs	r2, r3
 8008626:	68fb      	ldr	r3, [r7, #12]
 8008628:	601a      	str	r2, [r3, #0]
}
 800862a:	bf00      	nop
 800862c:	3724      	adds	r7, #36	; 0x24
 800862e:	46bd      	mov	sp, r7
 8008630:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008634:	4770      	bx	lr

08008636 <LL_GPIO_SetPinOutputType>:
{
 8008636:	b480      	push	{r7}
 8008638:	b085      	sub	sp, #20
 800863a:	af00      	add	r7, sp, #0
 800863c:	60f8      	str	r0, [r7, #12]
 800863e:	60b9      	str	r1, [r7, #8]
 8008640:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->OTYPER, PinMask, (PinMask * OutputType));
 8008642:	68fb      	ldr	r3, [r7, #12]
 8008644:	685a      	ldr	r2, [r3, #4]
 8008646:	68bb      	ldr	r3, [r7, #8]
 8008648:	43db      	mvns	r3, r3
 800864a:	401a      	ands	r2, r3
 800864c:	68bb      	ldr	r3, [r7, #8]
 800864e:	6879      	ldr	r1, [r7, #4]
 8008650:	fb01 f303 	mul.w	r3, r1, r3
 8008654:	431a      	orrs	r2, r3
 8008656:	68fb      	ldr	r3, [r7, #12]
 8008658:	605a      	str	r2, [r3, #4]
}
 800865a:	bf00      	nop
 800865c:	3714      	adds	r7, #20
 800865e:	46bd      	mov	sp, r7
 8008660:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008664:	4770      	bx	lr

08008666 <LL_GPIO_SetPinSpeed>:
{
 8008666:	b480      	push	{r7}
 8008668:	b089      	sub	sp, #36	; 0x24
 800866a:	af00      	add	r7, sp, #0
 800866c:	60f8      	str	r0, [r7, #12]
 800866e:	60b9      	str	r1, [r7, #8]
 8008670:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->OSPEEDR, (GPIO_OSPEEDR_OSPEED0 << (POSITION_VAL(Pin) * 2U)),
 8008672:	68fb      	ldr	r3, [r7, #12]
 8008674:	689a      	ldr	r2, [r3, #8]
 8008676:	68bb      	ldr	r3, [r7, #8]
 8008678:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800867a:	697b      	ldr	r3, [r7, #20]
 800867c:	fa93 f3a3 	rbit	r3, r3
 8008680:	613b      	str	r3, [r7, #16]
  return result;
 8008682:	693b      	ldr	r3, [r7, #16]
 8008684:	fab3 f383 	clz	r3, r3
 8008688:	b2db      	uxtb	r3, r3
 800868a:	005b      	lsls	r3, r3, #1
 800868c:	2103      	movs	r1, #3
 800868e:	fa01 f303 	lsl.w	r3, r1, r3
 8008692:	43db      	mvns	r3, r3
 8008694:	401a      	ands	r2, r3
 8008696:	68bb      	ldr	r3, [r7, #8]
 8008698:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800869a:	69fb      	ldr	r3, [r7, #28]
 800869c:	fa93 f3a3 	rbit	r3, r3
 80086a0:	61bb      	str	r3, [r7, #24]
  return result;
 80086a2:	69bb      	ldr	r3, [r7, #24]
 80086a4:	fab3 f383 	clz	r3, r3
 80086a8:	b2db      	uxtb	r3, r3
 80086aa:	005b      	lsls	r3, r3, #1
 80086ac:	6879      	ldr	r1, [r7, #4]
 80086ae:	fa01 f303 	lsl.w	r3, r1, r3
 80086b2:	431a      	orrs	r2, r3
 80086b4:	68fb      	ldr	r3, [r7, #12]
 80086b6:	609a      	str	r2, [r3, #8]
}
 80086b8:	bf00      	nop
 80086ba:	3724      	adds	r7, #36	; 0x24
 80086bc:	46bd      	mov	sp, r7
 80086be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80086c2:	4770      	bx	lr

080086c4 <LL_GPIO_SetPinPull>:
{
 80086c4:	b480      	push	{r7}
 80086c6:	b089      	sub	sp, #36	; 0x24
 80086c8:	af00      	add	r7, sp, #0
 80086ca:	60f8      	str	r0, [r7, #12]
 80086cc:	60b9      	str	r1, [r7, #8]
 80086ce:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->PUPDR, (GPIO_PUPDR_PUPD0 << (POSITION_VAL(Pin) * 2U)), (Pull << (POSITION_VAL(Pin) * 2U)));
 80086d0:	68fb      	ldr	r3, [r7, #12]
 80086d2:	68da      	ldr	r2, [r3, #12]
 80086d4:	68bb      	ldr	r3, [r7, #8]
 80086d6:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80086d8:	697b      	ldr	r3, [r7, #20]
 80086da:	fa93 f3a3 	rbit	r3, r3
 80086de:	613b      	str	r3, [r7, #16]
  return result;
 80086e0:	693b      	ldr	r3, [r7, #16]
 80086e2:	fab3 f383 	clz	r3, r3
 80086e6:	b2db      	uxtb	r3, r3
 80086e8:	005b      	lsls	r3, r3, #1
 80086ea:	2103      	movs	r1, #3
 80086ec:	fa01 f303 	lsl.w	r3, r1, r3
 80086f0:	43db      	mvns	r3, r3
 80086f2:	401a      	ands	r2, r3
 80086f4:	68bb      	ldr	r3, [r7, #8]
 80086f6:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80086f8:	69fb      	ldr	r3, [r7, #28]
 80086fa:	fa93 f3a3 	rbit	r3, r3
 80086fe:	61bb      	str	r3, [r7, #24]
  return result;
 8008700:	69bb      	ldr	r3, [r7, #24]
 8008702:	fab3 f383 	clz	r3, r3
 8008706:	b2db      	uxtb	r3, r3
 8008708:	005b      	lsls	r3, r3, #1
 800870a:	6879      	ldr	r1, [r7, #4]
 800870c:	fa01 f303 	lsl.w	r3, r1, r3
 8008710:	431a      	orrs	r2, r3
 8008712:	68fb      	ldr	r3, [r7, #12]
 8008714:	60da      	str	r2, [r3, #12]
}
 8008716:	bf00      	nop
 8008718:	3724      	adds	r7, #36	; 0x24
 800871a:	46bd      	mov	sp, r7
 800871c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008720:	4770      	bx	lr

08008722 <LL_GPIO_SetAFPin_0_7>:
{
 8008722:	b480      	push	{r7}
 8008724:	b089      	sub	sp, #36	; 0x24
 8008726:	af00      	add	r7, sp, #0
 8008728:	60f8      	str	r0, [r7, #12]
 800872a:	60b9      	str	r1, [r7, #8]
 800872c:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->AFR[0], (GPIO_AFRL_AFSEL0 << (POSITION_VAL(Pin) * 4U)),
 800872e:	68fb      	ldr	r3, [r7, #12]
 8008730:	6a1a      	ldr	r2, [r3, #32]
 8008732:	68bb      	ldr	r3, [r7, #8]
 8008734:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8008736:	697b      	ldr	r3, [r7, #20]
 8008738:	fa93 f3a3 	rbit	r3, r3
 800873c:	613b      	str	r3, [r7, #16]
  return result;
 800873e:	693b      	ldr	r3, [r7, #16]
 8008740:	fab3 f383 	clz	r3, r3
 8008744:	b2db      	uxtb	r3, r3
 8008746:	009b      	lsls	r3, r3, #2
 8008748:	210f      	movs	r1, #15
 800874a:	fa01 f303 	lsl.w	r3, r1, r3
 800874e:	43db      	mvns	r3, r3
 8008750:	401a      	ands	r2, r3
 8008752:	68bb      	ldr	r3, [r7, #8]
 8008754:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8008756:	69fb      	ldr	r3, [r7, #28]
 8008758:	fa93 f3a3 	rbit	r3, r3
 800875c:	61bb      	str	r3, [r7, #24]
  return result;
 800875e:	69bb      	ldr	r3, [r7, #24]
 8008760:	fab3 f383 	clz	r3, r3
 8008764:	b2db      	uxtb	r3, r3
 8008766:	009b      	lsls	r3, r3, #2
 8008768:	6879      	ldr	r1, [r7, #4]
 800876a:	fa01 f303 	lsl.w	r3, r1, r3
 800876e:	431a      	orrs	r2, r3
 8008770:	68fb      	ldr	r3, [r7, #12]
 8008772:	621a      	str	r2, [r3, #32]
}
 8008774:	bf00      	nop
 8008776:	3724      	adds	r7, #36	; 0x24
 8008778:	46bd      	mov	sp, r7
 800877a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800877e:	4770      	bx	lr

08008780 <LL_GPIO_SetAFPin_8_15>:
{
 8008780:	b480      	push	{r7}
 8008782:	b089      	sub	sp, #36	; 0x24
 8008784:	af00      	add	r7, sp, #0
 8008786:	60f8      	str	r0, [r7, #12]
 8008788:	60b9      	str	r1, [r7, #8]
 800878a:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->AFR[1], (GPIO_AFRH_AFSEL8 << (POSITION_VAL(Pin >> 8U) * 4U)),
 800878c:	68fb      	ldr	r3, [r7, #12]
 800878e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8008790:	68bb      	ldr	r3, [r7, #8]
 8008792:	0a1b      	lsrs	r3, r3, #8
 8008794:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8008796:	697b      	ldr	r3, [r7, #20]
 8008798:	fa93 f3a3 	rbit	r3, r3
 800879c:	613b      	str	r3, [r7, #16]
  return result;
 800879e:	693b      	ldr	r3, [r7, #16]
 80087a0:	fab3 f383 	clz	r3, r3
 80087a4:	b2db      	uxtb	r3, r3
 80087a6:	009b      	lsls	r3, r3, #2
 80087a8:	210f      	movs	r1, #15
 80087aa:	fa01 f303 	lsl.w	r3, r1, r3
 80087ae:	43db      	mvns	r3, r3
 80087b0:	401a      	ands	r2, r3
 80087b2:	68bb      	ldr	r3, [r7, #8]
 80087b4:	0a1b      	lsrs	r3, r3, #8
 80087b6:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80087b8:	69fb      	ldr	r3, [r7, #28]
 80087ba:	fa93 f3a3 	rbit	r3, r3
 80087be:	61bb      	str	r3, [r7, #24]
  return result;
 80087c0:	69bb      	ldr	r3, [r7, #24]
 80087c2:	fab3 f383 	clz	r3, r3
 80087c6:	b2db      	uxtb	r3, r3
 80087c8:	009b      	lsls	r3, r3, #2
 80087ca:	6879      	ldr	r1, [r7, #4]
 80087cc:	fa01 f303 	lsl.w	r3, r1, r3
 80087d0:	431a      	orrs	r2, r3
 80087d2:	68fb      	ldr	r3, [r7, #12]
 80087d4:	625a      	str	r2, [r3, #36]	; 0x24
}
 80087d6:	bf00      	nop
 80087d8:	3724      	adds	r7, #36	; 0x24
 80087da:	46bd      	mov	sp, r7
 80087dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80087e0:	4770      	bx	lr

080087e2 <LL_GPIO_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: GPIO registers are initialized according to GPIO_InitStruct content
  *          - ERROR:   Not applicable
  */
ErrorStatus LL_GPIO_Init(GPIO_TypeDef *GPIOx, LL_GPIO_InitTypeDef *GPIO_InitStruct)
{
 80087e2:	b580      	push	{r7, lr}
 80087e4:	b086      	sub	sp, #24
 80087e6:	af00      	add	r7, sp, #0
 80087e8:	6078      	str	r0, [r7, #4]
 80087ea:	6039      	str	r1, [r7, #0]
  assert_param(IS_LL_GPIO_MODE(GPIO_InitStruct->Mode));
  assert_param(IS_LL_GPIO_PULL(GPIO_InitStruct->Pull));

  /* ------------------------- Configure the port pins ---------------- */
  /* Initialize  pinpos on first pin set */
  pinpos = POSITION_VAL(GPIO_InitStruct->Pin);
 80087ec:	683b      	ldr	r3, [r7, #0]
 80087ee:	681b      	ldr	r3, [r3, #0]
 80087f0:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80087f2:	68fb      	ldr	r3, [r7, #12]
 80087f4:	fa93 f3a3 	rbit	r3, r3
 80087f8:	60bb      	str	r3, [r7, #8]
  return result;
 80087fa:	68bb      	ldr	r3, [r7, #8]
 80087fc:	fab3 f383 	clz	r3, r3
 8008800:	b2db      	uxtb	r3, r3
 8008802:	617b      	str	r3, [r7, #20]

  /* Configure the port pins */
  while (((GPIO_InitStruct->Pin) >> pinpos) != 0x00000000U)
 8008804:	e040      	b.n	8008888 <LL_GPIO_Init+0xa6>
  {
    /* Get current io position */
    currentpin = (GPIO_InitStruct->Pin) & (0x00000001UL << pinpos);
 8008806:	683b      	ldr	r3, [r7, #0]
 8008808:	681a      	ldr	r2, [r3, #0]
 800880a:	2101      	movs	r1, #1
 800880c:	697b      	ldr	r3, [r7, #20]
 800880e:	fa01 f303 	lsl.w	r3, r1, r3
 8008812:	4013      	ands	r3, r2
 8008814:	613b      	str	r3, [r7, #16]

    if (currentpin != 0x00u)
 8008816:	693b      	ldr	r3, [r7, #16]
 8008818:	2b00      	cmp	r3, #0
 800881a:	d032      	beq.n	8008882 <LL_GPIO_Init+0xa0>
    {
      /* Pin Mode configuration */
      LL_GPIO_SetPinMode(GPIOx, currentpin, GPIO_InitStruct->Mode);
 800881c:	683b      	ldr	r3, [r7, #0]
 800881e:	685b      	ldr	r3, [r3, #4]
 8008820:	461a      	mov	r2, r3
 8008822:	6939      	ldr	r1, [r7, #16]
 8008824:	6878      	ldr	r0, [r7, #4]
 8008826:	f7ff fed7 	bl	80085d8 <LL_GPIO_SetPinMode>

      if ((GPIO_InitStruct->Mode == LL_GPIO_MODE_OUTPUT) || (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE))
 800882a:	683b      	ldr	r3, [r7, #0]
 800882c:	685b      	ldr	r3, [r3, #4]
 800882e:	2b01      	cmp	r3, #1
 8008830:	d003      	beq.n	800883a <LL_GPIO_Init+0x58>
 8008832:	683b      	ldr	r3, [r7, #0]
 8008834:	685b      	ldr	r3, [r3, #4]
 8008836:	2b02      	cmp	r3, #2
 8008838:	d106      	bne.n	8008848 <LL_GPIO_Init+0x66>
      {
        /* Check Speed mode parameters */
        assert_param(IS_LL_GPIO_SPEED(GPIO_InitStruct->Speed));

        /* Speed mode configuration */
        LL_GPIO_SetPinSpeed(GPIOx, currentpin, GPIO_InitStruct->Speed);
 800883a:	683b      	ldr	r3, [r7, #0]
 800883c:	689b      	ldr	r3, [r3, #8]
 800883e:	461a      	mov	r2, r3
 8008840:	6939      	ldr	r1, [r7, #16]
 8008842:	6878      	ldr	r0, [r7, #4]
 8008844:	f7ff ff0f 	bl	8008666 <LL_GPIO_SetPinSpeed>
      }

      /* Pull-up Pull down resistor configuration*/
      LL_GPIO_SetPinPull(GPIOx, currentpin, GPIO_InitStruct->Pull);
 8008848:	683b      	ldr	r3, [r7, #0]
 800884a:	691b      	ldr	r3, [r3, #16]
 800884c:	461a      	mov	r2, r3
 800884e:	6939      	ldr	r1, [r7, #16]
 8008850:	6878      	ldr	r0, [r7, #4]
 8008852:	f7ff ff37 	bl	80086c4 <LL_GPIO_SetPinPull>

      if (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE)
 8008856:	683b      	ldr	r3, [r7, #0]
 8008858:	685b      	ldr	r3, [r3, #4]
 800885a:	2b02      	cmp	r3, #2
 800885c:	d111      	bne.n	8008882 <LL_GPIO_Init+0xa0>
      {
        /* Check Alternate parameter */
        assert_param(IS_LL_GPIO_ALTERNATE(GPIO_InitStruct->Alternate));

        /* Speed mode configuration */
        if (currentpin < LL_GPIO_PIN_8)
 800885e:	693b      	ldr	r3, [r7, #16]
 8008860:	2bff      	cmp	r3, #255	; 0xff
 8008862:	d807      	bhi.n	8008874 <LL_GPIO_Init+0x92>
        {
          LL_GPIO_SetAFPin_0_7(GPIOx, currentpin, GPIO_InitStruct->Alternate);
 8008864:	683b      	ldr	r3, [r7, #0]
 8008866:	695b      	ldr	r3, [r3, #20]
 8008868:	461a      	mov	r2, r3
 800886a:	6939      	ldr	r1, [r7, #16]
 800886c:	6878      	ldr	r0, [r7, #4]
 800886e:	f7ff ff58 	bl	8008722 <LL_GPIO_SetAFPin_0_7>
 8008872:	e006      	b.n	8008882 <LL_GPIO_Init+0xa0>
        }
        else
        {
          LL_GPIO_SetAFPin_8_15(GPIOx, currentpin, GPIO_InitStruct->Alternate);
 8008874:	683b      	ldr	r3, [r7, #0]
 8008876:	695b      	ldr	r3, [r3, #20]
 8008878:	461a      	mov	r2, r3
 800887a:	6939      	ldr	r1, [r7, #16]
 800887c:	6878      	ldr	r0, [r7, #4]
 800887e:	f7ff ff7f 	bl	8008780 <LL_GPIO_SetAFPin_8_15>
        }
      }
    }
    pinpos++;
 8008882:	697b      	ldr	r3, [r7, #20]
 8008884:	3301      	adds	r3, #1
 8008886:	617b      	str	r3, [r7, #20]
  while (((GPIO_InitStruct->Pin) >> pinpos) != 0x00000000U)
 8008888:	683b      	ldr	r3, [r7, #0]
 800888a:	681a      	ldr	r2, [r3, #0]
 800888c:	697b      	ldr	r3, [r7, #20]
 800888e:	fa22 f303 	lsr.w	r3, r2, r3
 8008892:	2b00      	cmp	r3, #0
 8008894:	d1b7      	bne.n	8008806 <LL_GPIO_Init+0x24>
  }

  if ((GPIO_InitStruct->Mode == LL_GPIO_MODE_OUTPUT) || (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE))
 8008896:	683b      	ldr	r3, [r7, #0]
 8008898:	685b      	ldr	r3, [r3, #4]
 800889a:	2b01      	cmp	r3, #1
 800889c:	d003      	beq.n	80088a6 <LL_GPIO_Init+0xc4>
 800889e:	683b      	ldr	r3, [r7, #0]
 80088a0:	685b      	ldr	r3, [r3, #4]
 80088a2:	2b02      	cmp	r3, #2
 80088a4:	d107      	bne.n	80088b6 <LL_GPIO_Init+0xd4>
  {
    /* Check Output mode parameters */
    assert_param(IS_LL_GPIO_OUTPUT_TYPE(GPIO_InitStruct->OutputType));

    /* Output mode configuration*/
    LL_GPIO_SetPinOutputType(GPIOx, GPIO_InitStruct->Pin, GPIO_InitStruct->OutputType);
 80088a6:	683b      	ldr	r3, [r7, #0]
 80088a8:	6819      	ldr	r1, [r3, #0]
 80088aa:	683b      	ldr	r3, [r7, #0]
 80088ac:	68db      	ldr	r3, [r3, #12]
 80088ae:	461a      	mov	r2, r3
 80088b0:	6878      	ldr	r0, [r7, #4]
 80088b2:	f7ff fec0 	bl	8008636 <LL_GPIO_SetPinOutputType>

  }
  return (SUCCESS);
 80088b6:	2300      	movs	r3, #0
}
 80088b8:	4618      	mov	r0, r3
 80088ba:	3718      	adds	r7, #24
 80088bc:	46bd      	mov	sp, r7
 80088be:	bd80      	pop	{r7, pc}

080088c0 <ILI9341_Draw_Bordered_Filled_Rectangle_Coord>:
 *
 *
 */

void ILI9341_Draw_Bordered_Filled_Rectangle_Coord(uint16_t x, uint16_t y, uint16_t w, uint16_t h, uint16_t inner_colour, uint8_t border_weight, uint8_t border_colour)
{
 80088c0:	b590      	push	{r4, r7, lr}
 80088c2:	b087      	sub	sp, #28
 80088c4:	af02      	add	r7, sp, #8
 80088c6:	4604      	mov	r4, r0
 80088c8:	4608      	mov	r0, r1
 80088ca:	4611      	mov	r1, r2
 80088cc:	461a      	mov	r2, r3
 80088ce:	4623      	mov	r3, r4
 80088d0:	80fb      	strh	r3, [r7, #6]
 80088d2:	4603      	mov	r3, r0
 80088d4:	80bb      	strh	r3, [r7, #4]
 80088d6:	460b      	mov	r3, r1
 80088d8:	807b      	strh	r3, [r7, #2]
 80088da:	4613      	mov	r3, r2
 80088dc:	803b      	strh	r3, [r7, #0]

	// Draw inwards (and shorter) for each level of border weight
	for(uint8_t b = 0; ; b++)
 80088de:	2300      	movs	r3, #0
 80088e0:	73fb      	strb	r3, [r7, #15]
	{


		if(b > border_weight)
 80088e2:	7bfa      	ldrb	r2, [r7, #15]
 80088e4:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 80088e8:	429a      	cmp	r2, r3
 80088ea:	d93a      	bls.n	8008962 <ILI9341_Draw_Bordered_Filled_Rectangle_Coord+0xa2>
		{

			// stop before the inner space reaches zero! (hard fault)
			if( ((y + b) == ((y + h) - b)) || ((x + b) == ((x + w) - b)) )
 80088ec:	88ba      	ldrh	r2, [r7, #4]
 80088ee:	7bfb      	ldrb	r3, [r7, #15]
 80088f0:	441a      	add	r2, r3
 80088f2:	88b9      	ldrh	r1, [r7, #4]
 80088f4:	883b      	ldrh	r3, [r7, #0]
 80088f6:	4419      	add	r1, r3
 80088f8:	7bfb      	ldrb	r3, [r7, #15]
 80088fa:	1acb      	subs	r3, r1, r3
 80088fc:	429a      	cmp	r2, r3
 80088fe:	f000 8090 	beq.w	8008a22 <ILI9341_Draw_Bordered_Filled_Rectangle_Coord+0x162>
 8008902:	88fa      	ldrh	r2, [r7, #6]
 8008904:	7bfb      	ldrb	r3, [r7, #15]
 8008906:	441a      	add	r2, r3
 8008908:	88f9      	ldrh	r1, [r7, #6]
 800890a:	887b      	ldrh	r3, [r7, #2]
 800890c:	4419      	add	r1, r3
 800890e:	7bfb      	ldrb	r3, [r7, #15]
 8008910:	1acb      	subs	r3, r1, r3
 8008912:	429a      	cmp	r2, r3
 8008914:	f000 8085 	beq.w	8008a22 <ILI9341_Draw_Bordered_Filled_Rectangle_Coord+0x162>
				// add final line?
				goto finish;
			}
			else
			{
				ILI9341_Draw_Rectangle(x + b, y + b, (w - (2*b)) + 1, (h - (2*b)) + 1, inner_colour, AREA_CHUNK);
 8008918:	7bfb      	ldrb	r3, [r7, #15]
 800891a:	b29a      	uxth	r2, r3
 800891c:	88fb      	ldrh	r3, [r7, #6]
 800891e:	4413      	add	r3, r2
 8008920:	b298      	uxth	r0, r3
 8008922:	7bfb      	ldrb	r3, [r7, #15]
 8008924:	b29a      	uxth	r2, r3
 8008926:	88bb      	ldrh	r3, [r7, #4]
 8008928:	4413      	add	r3, r2
 800892a:	b299      	uxth	r1, r3
 800892c:	7bfb      	ldrb	r3, [r7, #15]
 800892e:	b29b      	uxth	r3, r3
 8008930:	005b      	lsls	r3, r3, #1
 8008932:	b29b      	uxth	r3, r3
 8008934:	887a      	ldrh	r2, [r7, #2]
 8008936:	1ad3      	subs	r3, r2, r3
 8008938:	b29b      	uxth	r3, r3
 800893a:	3301      	adds	r3, #1
 800893c:	b29c      	uxth	r4, r3
 800893e:	7bfb      	ldrb	r3, [r7, #15]
 8008940:	b29b      	uxth	r3, r3
 8008942:	005b      	lsls	r3, r3, #1
 8008944:	b29b      	uxth	r3, r3
 8008946:	883a      	ldrh	r2, [r7, #0]
 8008948:	1ad3      	subs	r3, r2, r3
 800894a:	b29b      	uxth	r3, r3
 800894c:	3301      	adds	r3, #1
 800894e:	b29a      	uxth	r2, r3
 8008950:	2304      	movs	r3, #4
 8008952:	9301      	str	r3, [sp, #4]
 8008954:	8c3b      	ldrh	r3, [r7, #32]
 8008956:	9300      	str	r3, [sp, #0]
 8008958:	4613      	mov	r3, r2
 800895a:	4622      	mov	r2, r4
 800895c:	f000 fcd6 	bl	800930c <ILI9341_Draw_Rectangle>
				goto finish;
 8008960:	e060      	b.n	8008a24 <ILI9341_Draw_Bordered_Filled_Rectangle_Coord+0x164>
			}
		}

		// Horizontal lines
		ILI9341_Draw_Horizontal_Line(	x + b,
 8008962:	7bfb      	ldrb	r3, [r7, #15]
 8008964:	b29a      	uxth	r2, r3
 8008966:	88fb      	ldrh	r3, [r7, #6]
 8008968:	4413      	add	r3, r2
 800896a:	b298      	uxth	r0, r3
 800896c:	7bfb      	ldrb	r3, [r7, #15]
 800896e:	b29a      	uxth	r2, r3
 8008970:	88bb      	ldrh	r3, [r7, #4]
 8008972:	4413      	add	r3, r2
 8008974:	b299      	uxth	r1, r3
 8008976:	7bfb      	ldrb	r3, [r7, #15]
 8008978:	b29b      	uxth	r3, r3
 800897a:	005b      	lsls	r3, r3, #1
 800897c:	b29b      	uxth	r3, r3
 800897e:	887a      	ldrh	r2, [r7, #2]
 8008980:	1ad3      	subs	r3, r2, r3
 8008982:	b29a      	uxth	r2, r3
 8008984:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8008988:	b29b      	uxth	r3, r3
 800898a:	f000 fa81 	bl	8008e90 <ILI9341_Draw_Horizontal_Line>
										y + b,
										w - (2*b),
										border_colour);

		ILI9341_Draw_Horizontal_Line(	x + b,
 800898e:	7bfb      	ldrb	r3, [r7, #15]
 8008990:	b29a      	uxth	r2, r3
 8008992:	88fb      	ldrh	r3, [r7, #6]
 8008994:	4413      	add	r3, r2
 8008996:	b298      	uxth	r0, r3
										(y + h) - b,
 8008998:	88ba      	ldrh	r2, [r7, #4]
 800899a:	883b      	ldrh	r3, [r7, #0]
 800899c:	4413      	add	r3, r2
 800899e:	b29a      	uxth	r2, r3
		ILI9341_Draw_Horizontal_Line(	x + b,
 80089a0:	7bfb      	ldrb	r3, [r7, #15]
 80089a2:	b29b      	uxth	r3, r3
 80089a4:	1ad3      	subs	r3, r2, r3
 80089a6:	b299      	uxth	r1, r3
 80089a8:	7bfb      	ldrb	r3, [r7, #15]
 80089aa:	b29b      	uxth	r3, r3
 80089ac:	887a      	ldrh	r2, [r7, #2]
 80089ae:	1ad3      	subs	r3, r2, r3
 80089b0:	b29a      	uxth	r2, r3
 80089b2:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 80089b6:	b29b      	uxth	r3, r3
 80089b8:	f000 fa6a 	bl	8008e90 <ILI9341_Draw_Horizontal_Line>
										w - (b),
										border_colour);


		// Vertical lines
		ILI9341_Draw_Vertical_Line(		x + b,
 80089bc:	7bfb      	ldrb	r3, [r7, #15]
 80089be:	b29a      	uxth	r2, r3
 80089c0:	88fb      	ldrh	r3, [r7, #6]
 80089c2:	4413      	add	r3, r2
 80089c4:	b298      	uxth	r0, r3
 80089c6:	7bfb      	ldrb	r3, [r7, #15]
 80089c8:	b29a      	uxth	r2, r3
 80089ca:	88bb      	ldrh	r3, [r7, #4]
 80089cc:	4413      	add	r3, r2
 80089ce:	b299      	uxth	r1, r3
 80089d0:	7bfb      	ldrb	r3, [r7, #15]
 80089d2:	b29b      	uxth	r3, r3
 80089d4:	005b      	lsls	r3, r3, #1
 80089d6:	b29b      	uxth	r3, r3
 80089d8:	883a      	ldrh	r2, [r7, #0]
 80089da:	1ad3      	subs	r3, r2, r3
 80089dc:	b29a      	uxth	r2, r3
 80089de:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 80089e2:	b29b      	uxth	r3, r3
 80089e4:	f000 fa9c 	bl	8008f20 <ILI9341_Draw_Vertical_Line>
										y + b,
										h - (2*b),
										border_colour);

		ILI9341_Draw_Vertical_Line(		(x + w) - b,
 80089e8:	88fa      	ldrh	r2, [r7, #6]
 80089ea:	887b      	ldrh	r3, [r7, #2]
 80089ec:	4413      	add	r3, r2
 80089ee:	b29a      	uxth	r2, r3
 80089f0:	7bfb      	ldrb	r3, [r7, #15]
 80089f2:	b29b      	uxth	r3, r3
 80089f4:	1ad3      	subs	r3, r2, r3
 80089f6:	b298      	uxth	r0, r3
 80089f8:	7bfb      	ldrb	r3, [r7, #15]
 80089fa:	b29a      	uxth	r2, r3
 80089fc:	88bb      	ldrh	r3, [r7, #4]
 80089fe:	4413      	add	r3, r2
 8008a00:	b299      	uxth	r1, r3
 8008a02:	7bfb      	ldrb	r3, [r7, #15]
 8008a04:	b29b      	uxth	r3, r3
 8008a06:	005b      	lsls	r3, r3, #1
 8008a08:	b29b      	uxth	r3, r3
 8008a0a:	883a      	ldrh	r2, [r7, #0]
 8008a0c:	1ad3      	subs	r3, r2, r3
 8008a0e:	b29a      	uxth	r2, r3
 8008a10:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8008a14:	b29b      	uxth	r3, r3
 8008a16:	f000 fa83 	bl	8008f20 <ILI9341_Draw_Vertical_Line>
	for(uint8_t b = 0; ; b++)
 8008a1a:	7bfb      	ldrb	r3, [r7, #15]
 8008a1c:	3301      	adds	r3, #1
 8008a1e:	73fb      	strb	r3, [r7, #15]
		if(b > border_weight)
 8008a20:	e75f      	b.n	80088e2 <ILI9341_Draw_Bordered_Filled_Rectangle_Coord+0x22>
										h - (2*b),
										border_colour);

	}

	finish:
 8008a22:	bf00      	nop
	// done
	return;
 8008a24:	bf00      	nop
}
 8008a26:	3714      	adds	r7, #20
 8008a28:	46bd      	mov	sp, r7
 8008a2a:	bd90      	pop	{r4, r7, pc}

08008a2c <ILI9341_Draw_Char>:
}

/*Draws a character (fonts imported from fonts.h) at x,Y location with specified font colour, size and Background colour*/
/*See fonts.h implementation of font on what is required for changing to a different font when switching fonts libraries*/
void ILI9341_Draw_Char(char character, uint16_t x, uint16_t y, uint16_t colour, uint16_t size, uint16_t bgcolour)
{
 8008a2c:	b590      	push	{r4, r7, lr}
 8008a2e:	b089      	sub	sp, #36	; 0x24
 8008a30:	af02      	add	r7, sp, #8
 8008a32:	4604      	mov	r4, r0
 8008a34:	4608      	mov	r0, r1
 8008a36:	4611      	mov	r1, r2
 8008a38:	461a      	mov	r2, r3
 8008a3a:	4623      	mov	r3, r4
 8008a3c:	71fb      	strb	r3, [r7, #7]
 8008a3e:	4603      	mov	r3, r0
 8008a40:	80bb      	strh	r3, [r7, #4]
 8008a42:	460b      	mov	r3, r1
 8008a44:	807b      	strh	r3, [r7, #2]
 8008a46:	4613      	mov	r3, r2
 8008a48:	803b      	strh	r3, [r7, #0]
    uint8_t 	i,j;
		



	function_char = character;
 8008a4a:	79fb      	ldrb	r3, [r7, #7]
 8008a4c:	75fb      	strb	r3, [r7, #23]
		
    if (function_char < ' ')
 8008a4e:	7dfb      	ldrb	r3, [r7, #23]
 8008a50:	2b1f      	cmp	r3, #31
 8008a52:	d802      	bhi.n	8008a5a <ILI9341_Draw_Char+0x2e>
    {
        character = 0;
 8008a54:	2300      	movs	r3, #0
 8008a56:	71fb      	strb	r3, [r7, #7]
 8008a58:	e002      	b.n	8008a60 <ILI9341_Draw_Char+0x34>
    }
    else
    {
    	function_char -= 32;
 8008a5a:	7dfb      	ldrb	r3, [r7, #23]
 8008a5c:	3b20      	subs	r3, #32
 8008a5e:	75fb      	strb	r3, [r7, #23]
	}
   	
	char temp[CHAR_WIDTH];

	for(uint8_t k = 0; k<CHAR_WIDTH; k++)
 8008a60:	2300      	movs	r3, #0
 8008a62:	753b      	strb	r3, [r7, #20]
 8008a64:	e012      	b.n	8008a8c <ILI9341_Draw_Char+0x60>
	{
		temp[k] = font[function_char][k];
 8008a66:	7dfa      	ldrb	r2, [r7, #23]
 8008a68:	7d38      	ldrb	r0, [r7, #20]
 8008a6a:	7d39      	ldrb	r1, [r7, #20]
 8008a6c:	4c48      	ldr	r4, [pc, #288]	; (8008b90 <ILI9341_Draw_Char+0x164>)
 8008a6e:	4613      	mov	r3, r2
 8008a70:	005b      	lsls	r3, r3, #1
 8008a72:	4413      	add	r3, r2
 8008a74:	005b      	lsls	r3, r3, #1
 8008a76:	4423      	add	r3, r4
 8008a78:	4403      	add	r3, r0
 8008a7a:	781a      	ldrb	r2, [r3, #0]
 8008a7c:	f107 0318 	add.w	r3, r7, #24
 8008a80:	440b      	add	r3, r1
 8008a82:	f803 2c0c 	strb.w	r2, [r3, #-12]
	for(uint8_t k = 0; k<CHAR_WIDTH; k++)
 8008a86:	7d3b      	ldrb	r3, [r7, #20]
 8008a88:	3301      	adds	r3, #1
 8008a8a:	753b      	strb	r3, [r7, #20]
 8008a8c:	7d3b      	ldrb	r3, [r7, #20]
 8008a8e:	2b05      	cmp	r3, #5
 8008a90:	d9e9      	bls.n	8008a66 <ILI9341_Draw_Char+0x3a>
	}
		
    // Draw pixels
	//ILI9341_Draw_Rectangle(x, Y, CHAR_WIDTH*size, CHAR_HEIGHT*size, bgcolour);
    for (j=0; j<CHAR_WIDTH; j++)
 8008a92:	2300      	movs	r3, #0
 8008a94:	757b      	strb	r3, [r7, #21]
 8008a96:	e074      	b.n	8008b82 <ILI9341_Draw_Char+0x156>
    {
        for (i=0; i<CHAR_HEIGHT; i++)
 8008a98:	2300      	movs	r3, #0
 8008a9a:	75bb      	strb	r3, [r7, #22]
 8008a9c:	e06b      	b.n	8008b76 <ILI9341_Draw_Char+0x14a>
        {
            if (temp[j] & (1<<i))
 8008a9e:	7d7b      	ldrb	r3, [r7, #21]
 8008aa0:	f107 0218 	add.w	r2, r7, #24
 8008aa4:	4413      	add	r3, r2
 8008aa6:	f813 3c0c 	ldrb.w	r3, [r3, #-12]
 8008aaa:	461a      	mov	r2, r3
 8008aac:	7dbb      	ldrb	r3, [r7, #22]
 8008aae:	fa42 f303 	asr.w	r3, r2, r3
 8008ab2:	f003 0301 	and.w	r3, r3, #1
 8008ab6:	2b00      	cmp	r3, #0
 8008ab8:	d02d      	beq.n	8008b16 <ILI9341_Draw_Char+0xea>
            {
            	if(size == 1)
 8008aba:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8008abc:	2b01      	cmp	r3, #1
 8008abe:	d10e      	bne.n	8008ade <ILI9341_Draw_Char+0xb2>
				{
            		ILI9341_Draw_Pixel(x+j, y+i, colour);
 8008ac0:	7d7b      	ldrb	r3, [r7, #21]
 8008ac2:	b29a      	uxth	r2, r3
 8008ac4:	88bb      	ldrh	r3, [r7, #4]
 8008ac6:	4413      	add	r3, r2
 8008ac8:	b298      	uxth	r0, r3
 8008aca:	7dbb      	ldrb	r3, [r7, #22]
 8008acc:	b29a      	uxth	r2, r3
 8008ace:	887b      	ldrh	r3, [r7, #2]
 8008ad0:	4413      	add	r3, r2
 8008ad2:	b29b      	uxth	r3, r3
 8008ad4:	883a      	ldrh	r2, [r7, #0]
 8008ad6:	4619      	mov	r1, r3
 8008ad8:	f000 fae0 	bl	800909c <ILI9341_Draw_Pixel>
 8008adc:	e048      	b.n	8008b70 <ILI9341_Draw_Char+0x144>
				}
				else
				{
					ILI9341_Draw_Rectangle(x+(j*size), y+(i*size), size, size, colour, TEXT_CHUNK);
 8008ade:	7d7b      	ldrb	r3, [r7, #21]
 8008ae0:	b29b      	uxth	r3, r3
 8008ae2:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 8008ae4:	fb12 f303 	smulbb	r3, r2, r3
 8008ae8:	b29a      	uxth	r2, r3
 8008aea:	88bb      	ldrh	r3, [r7, #4]
 8008aec:	4413      	add	r3, r2
 8008aee:	b298      	uxth	r0, r3
 8008af0:	7dbb      	ldrb	r3, [r7, #22]
 8008af2:	b29b      	uxth	r3, r3
 8008af4:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 8008af6:	fb12 f303 	smulbb	r3, r2, r3
 8008afa:	b29a      	uxth	r2, r3
 8008afc:	887b      	ldrh	r3, [r7, #2]
 8008afe:	4413      	add	r3, r2
 8008b00:	b299      	uxth	r1, r3
 8008b02:	8d3c      	ldrh	r4, [r7, #40]	; 0x28
 8008b04:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 8008b06:	2301      	movs	r3, #1
 8008b08:	9301      	str	r3, [sp, #4]
 8008b0a:	883b      	ldrh	r3, [r7, #0]
 8008b0c:	9300      	str	r3, [sp, #0]
 8008b0e:	4623      	mov	r3, r4
 8008b10:	f000 fbfc 	bl	800930c <ILI9341_Draw_Rectangle>
 8008b14:	e02c      	b.n	8008b70 <ILI9341_Draw_Char+0x144>
				}
            }
            else
            {
               	if(size == 1)
 8008b16:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8008b18:	2b01      	cmp	r3, #1
 8008b1a:	d10e      	bne.n	8008b3a <ILI9341_Draw_Char+0x10e>
				{
					ILI9341_Draw_Pixel(x+j, y+i, bgcolour);
 8008b1c:	7d7b      	ldrb	r3, [r7, #21]
 8008b1e:	b29a      	uxth	r2, r3
 8008b20:	88bb      	ldrh	r3, [r7, #4]
 8008b22:	4413      	add	r3, r2
 8008b24:	b298      	uxth	r0, r3
 8008b26:	7dbb      	ldrb	r3, [r7, #22]
 8008b28:	b29a      	uxth	r2, r3
 8008b2a:	887b      	ldrh	r3, [r7, #2]
 8008b2c:	4413      	add	r3, r2
 8008b2e:	b29b      	uxth	r3, r3
 8008b30:	8dba      	ldrh	r2, [r7, #44]	; 0x2c
 8008b32:	4619      	mov	r1, r3
 8008b34:	f000 fab2 	bl	800909c <ILI9341_Draw_Pixel>
 8008b38:	e01a      	b.n	8008b70 <ILI9341_Draw_Char+0x144>
				}
				else
				{
					ILI9341_Draw_Rectangle(x+(j*size), y+(i*size), size, size, bgcolour, TEXT_CHUNK);
 8008b3a:	7d7b      	ldrb	r3, [r7, #21]
 8008b3c:	b29b      	uxth	r3, r3
 8008b3e:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 8008b40:	fb12 f303 	smulbb	r3, r2, r3
 8008b44:	b29a      	uxth	r2, r3
 8008b46:	88bb      	ldrh	r3, [r7, #4]
 8008b48:	4413      	add	r3, r2
 8008b4a:	b298      	uxth	r0, r3
 8008b4c:	7dbb      	ldrb	r3, [r7, #22]
 8008b4e:	b29b      	uxth	r3, r3
 8008b50:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 8008b52:	fb12 f303 	smulbb	r3, r2, r3
 8008b56:	b29a      	uxth	r2, r3
 8008b58:	887b      	ldrh	r3, [r7, #2]
 8008b5a:	4413      	add	r3, r2
 8008b5c:	b299      	uxth	r1, r3
 8008b5e:	8d3c      	ldrh	r4, [r7, #40]	; 0x28
 8008b60:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 8008b62:	2301      	movs	r3, #1
 8008b64:	9301      	str	r3, [sp, #4]
 8008b66:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8008b68:	9300      	str	r3, [sp, #0]
 8008b6a:	4623      	mov	r3, r4
 8008b6c:	f000 fbce 	bl	800930c <ILI9341_Draw_Rectangle>
        for (i=0; i<CHAR_HEIGHT; i++)
 8008b70:	7dbb      	ldrb	r3, [r7, #22]
 8008b72:	3301      	adds	r3, #1
 8008b74:	75bb      	strb	r3, [r7, #22]
 8008b76:	7dbb      	ldrb	r3, [r7, #22]
 8008b78:	2b07      	cmp	r3, #7
 8008b7a:	d990      	bls.n	8008a9e <ILI9341_Draw_Char+0x72>
    for (j=0; j<CHAR_WIDTH; j++)
 8008b7c:	7d7b      	ldrb	r3, [r7, #21]
 8008b7e:	3301      	adds	r3, #1
 8008b80:	757b      	strb	r3, [r7, #21]
 8008b82:	7d7b      	ldrb	r3, [r7, #21]
 8008b84:	2b05      	cmp	r3, #5
 8008b86:	d987      	bls.n	8008a98 <ILI9341_Draw_Char+0x6c>
				}
            }
        }
    }
}
 8008b88:	bf00      	nop
 8008b8a:	371c      	adds	r7, #28
 8008b8c:	46bd      	mov	sp, r7
 8008b8e:	bd90      	pop	{r4, r7, pc}
 8008b90:	0800aa58 	.word	0x0800aa58

08008b94 <ILI9341_Draw_Text>:

/*Draws an array of characters (fonts imported from fonts.h) at x,Y location with specified font colour, size and Background colour*/
/*See fonts.h implementation of font on what is required for changing to a different font when switching fonts libraries*/
void ILI9341_Draw_Text(const char* Text, uint16_t x, uint16_t y, uint16_t colour, uint16_t size, uint16_t bgcolour)
{
 8008b94:	b590      	push	{r4, r7, lr}
 8008b96:	b087      	sub	sp, #28
 8008b98:	af02      	add	r7, sp, #8
 8008b9a:	60f8      	str	r0, [r7, #12]
 8008b9c:	4608      	mov	r0, r1
 8008b9e:	4611      	mov	r1, r2
 8008ba0:	461a      	mov	r2, r3
 8008ba2:	4603      	mov	r3, r0
 8008ba4:	817b      	strh	r3, [r7, #10]
 8008ba6:	460b      	mov	r3, r1
 8008ba8:	813b      	strh	r3, [r7, #8]
 8008baa:	4613      	mov	r3, r2
 8008bac:	80fb      	strh	r3, [r7, #6]
    /*if(size & 1)
    {
    	size = ((size >> 1) * 2);
    }*/

    while (*Text) {
 8008bae:	e016      	b.n	8008bde <ILI9341_Draw_Text+0x4a>
        ILI9341_Draw_Char(*Text++, x, y, colour, size, bgcolour);
 8008bb0:	68fb      	ldr	r3, [r7, #12]
 8008bb2:	1c5a      	adds	r2, r3, #1
 8008bb4:	60fa      	str	r2, [r7, #12]
 8008bb6:	7818      	ldrb	r0, [r3, #0]
 8008bb8:	88fc      	ldrh	r4, [r7, #6]
 8008bba:	893a      	ldrh	r2, [r7, #8]
 8008bbc:	8979      	ldrh	r1, [r7, #10]
 8008bbe:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8008bc0:	9301      	str	r3, [sp, #4]
 8008bc2:	8c3b      	ldrh	r3, [r7, #32]
 8008bc4:	9300      	str	r3, [sp, #0]
 8008bc6:	4623      	mov	r3, r4
 8008bc8:	f7ff ff30 	bl	8008a2c <ILI9341_Draw_Char>
        x += CHAR_WIDTH*size;
 8008bcc:	8c3b      	ldrh	r3, [r7, #32]
 8008bce:	461a      	mov	r2, r3
 8008bd0:	0052      	lsls	r2, r2, #1
 8008bd2:	4413      	add	r3, r2
 8008bd4:	005b      	lsls	r3, r3, #1
 8008bd6:	b29a      	uxth	r2, r3
 8008bd8:	897b      	ldrh	r3, [r7, #10]
 8008bda:	4413      	add	r3, r2
 8008bdc:	817b      	strh	r3, [r7, #10]
    while (*Text) {
 8008bde:	68fb      	ldr	r3, [r7, #12]
 8008be0:	781b      	ldrb	r3, [r3, #0]
 8008be2:	2b00      	cmp	r3, #0
 8008be4:	d1e4      	bne.n	8008bb0 <ILI9341_Draw_Text+0x1c>
    }


}
 8008be6:	bf00      	nop
 8008be8:	3714      	adds	r7, #20
 8008bea:	46bd      	mov	sp, r7
 8008bec:	bd90      	pop	{r4, r7, pc}
	...

08008bf0 <ILI9341_FillScreenGradient>:
		GPIOC->ODR |= CS_Pin;
	}
}

void ILI9341_FillScreenGradient()
{
 8008bf0:	b580      	push	{r7, lr}
 8008bf2:	b084      	sub	sp, #16
 8008bf4:	af02      	add	r7, sp, #8
	uint16_t x = 0;
 8008bf6:	2300      	movs	r3, #0
 8008bf8:	80bb      	strh	r3, [r7, #4]
	//ILI9341_Draw_Text("Colour gradient", 10, 10, BLACK, 1, WHITE);
	//ILI9341_Draw_Text("Grayscale", 10, 20, BLACK, 1, WHITE);



	for(uint16_t i = 0; i <= (320); i++)
 8008bfa:	2300      	movs	r3, #0
 8008bfc:	80fb      	strh	r3, [r7, #6]
 8008bfe:	e010      	b.n	8008c22 <ILI9341_FillScreenGradient+0x32>

		uint16_t RGB_color = Red + Green + Blue;
		ILI9341_Draw_Rectangle(i, x, 1, 240, RGB_color, AREA_CHUNK);
*/

	ILI9341_Draw_Rectangle(i, x, 1, 240, (uint16_t)fade_log_seq_data_table[i], AREA_CHUNK);
 8008c00:	88fb      	ldrh	r3, [r7, #6]
 8008c02:	4a0c      	ldr	r2, [pc, #48]	; (8008c34 <ILI9341_FillScreenGradient+0x44>)
 8008c04:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8008c08:	b29b      	uxth	r3, r3
 8008c0a:	88b9      	ldrh	r1, [r7, #4]
 8008c0c:	88f8      	ldrh	r0, [r7, #6]
 8008c0e:	2204      	movs	r2, #4
 8008c10:	9201      	str	r2, [sp, #4]
 8008c12:	9300      	str	r3, [sp, #0]
 8008c14:	23f0      	movs	r3, #240	; 0xf0
 8008c16:	2201      	movs	r2, #1
 8008c18:	f000 fb78 	bl	800930c <ILI9341_Draw_Rectangle>
	for(uint16_t i = 0; i <= (320); i++)
 8008c1c:	88fb      	ldrh	r3, [r7, #6]
 8008c1e:	3301      	adds	r3, #1
 8008c20:	80fb      	strh	r3, [r7, #6]
 8008c22:	88fb      	ldrh	r3, [r7, #6]
 8008c24:	f5b3 7fa0 	cmp.w	r3, #320	; 0x140
 8008c28:	d9ea      	bls.n	8008c00 <ILI9341_FillScreenGradient+0x10>

	}
}
 8008c2a:	bf00      	nop
 8008c2c:	3708      	adds	r7, #8
 8008c2e:	46bd      	mov	sp, r7
 8008c30:	bd80      	pop	{r7, pc}
 8008c32:	bf00      	nop
 8008c34:	20000024 	.word	0x20000024

08008c38 <ILI9341_Init>:
 *
 * Initialize LCD display
 *
 */
void ILI9341_Init(void)
{
 8008c38:	b580      	push	{r7, lr}
 8008c3a:	af00      	add	r7, sp, #0

	_LCD_Enable();
 8008c3c:	f000 fc3a 	bl	80094b4 <_LCD_Enable>
	ILI9341_SPI_Init();
 8008c40:	f000 f908 	bl	8008e54 <ILI9341_SPI_Init>
	_LCD_Reset();
 8008c44:	f000 fc46 	bl	80094d4 <_LCD_Reset>

	//SOFTWARE RESET
	_LCD_SendCommand(0x01);
 8008c48:	2001      	movs	r0, #1
 8008c4a:	f000 fd11 	bl	8009670 <_LCD_SendCommand>
	HAL_Delay(2000);
 8008c4e:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8008c52:	f7fa fa91 	bl	8003178 <HAL_Delay>

	//POWER CONTROL A
	_LCD_SendCommand(0xCB);
 8008c56:	20cb      	movs	r0, #203	; 0xcb
 8008c58:	f000 fd0a 	bl	8009670 <_LCD_SendCommand>
	_LCD_SendData(0x39);
 8008c5c:	2039      	movs	r0, #57	; 0x39
 8008c5e:	f000 fd39 	bl	80096d4 <_LCD_SendData>
	_LCD_SendData(0x2C);
 8008c62:	202c      	movs	r0, #44	; 0x2c
 8008c64:	f000 fd36 	bl	80096d4 <_LCD_SendData>
	_LCD_SendData(0x00);
 8008c68:	2000      	movs	r0, #0
 8008c6a:	f000 fd33 	bl	80096d4 <_LCD_SendData>
	_LCD_SendData(0x34);
 8008c6e:	2034      	movs	r0, #52	; 0x34
 8008c70:	f000 fd30 	bl	80096d4 <_LCD_SendData>
	_LCD_SendData(0x02);
 8008c74:	2002      	movs	r0, #2
 8008c76:	f000 fd2d 	bl	80096d4 <_LCD_SendData>

	//POWER CONTROL B
	_LCD_SendCommand(0xCF);
 8008c7a:	20cf      	movs	r0, #207	; 0xcf
 8008c7c:	f000 fcf8 	bl	8009670 <_LCD_SendCommand>
	_LCD_SendData(0x00);
 8008c80:	2000      	movs	r0, #0
 8008c82:	f000 fd27 	bl	80096d4 <_LCD_SendData>
	_LCD_SendData(0xC1);
 8008c86:	20c1      	movs	r0, #193	; 0xc1
 8008c88:	f000 fd24 	bl	80096d4 <_LCD_SendData>
	_LCD_SendData(0x30);
 8008c8c:	2030      	movs	r0, #48	; 0x30
 8008c8e:	f000 fd21 	bl	80096d4 <_LCD_SendData>

	//DRIVER TIMING CONTROL A
	_LCD_SendCommand(0xE8);
 8008c92:	20e8      	movs	r0, #232	; 0xe8
 8008c94:	f000 fcec 	bl	8009670 <_LCD_SendCommand>
	_LCD_SendData(0x85);
 8008c98:	2085      	movs	r0, #133	; 0x85
 8008c9a:	f000 fd1b 	bl	80096d4 <_LCD_SendData>
	_LCD_SendData(0x00);
 8008c9e:	2000      	movs	r0, #0
 8008ca0:	f000 fd18 	bl	80096d4 <_LCD_SendData>
	_LCD_SendData(0x78);
 8008ca4:	2078      	movs	r0, #120	; 0x78
 8008ca6:	f000 fd15 	bl	80096d4 <_LCD_SendData>

	//DRIVER TIMING CONTROL B
	_LCD_SendCommand(0xEA);
 8008caa:	20ea      	movs	r0, #234	; 0xea
 8008cac:	f000 fce0 	bl	8009670 <_LCD_SendCommand>
	_LCD_SendData(0x00);
 8008cb0:	2000      	movs	r0, #0
 8008cb2:	f000 fd0f 	bl	80096d4 <_LCD_SendData>
	_LCD_SendData(0x00);
 8008cb6:	2000      	movs	r0, #0
 8008cb8:	f000 fd0c 	bl	80096d4 <_LCD_SendData>

	//POWER ON SEQUENCE CONTROL
	_LCD_SendCommand(0xED);
 8008cbc:	20ed      	movs	r0, #237	; 0xed
 8008cbe:	f000 fcd7 	bl	8009670 <_LCD_SendCommand>
	_LCD_SendData(0x64);
 8008cc2:	2064      	movs	r0, #100	; 0x64
 8008cc4:	f000 fd06 	bl	80096d4 <_LCD_SendData>
	_LCD_SendData(0x03);
 8008cc8:	2003      	movs	r0, #3
 8008cca:	f000 fd03 	bl	80096d4 <_LCD_SendData>
	_LCD_SendData(0x12);
 8008cce:	2012      	movs	r0, #18
 8008cd0:	f000 fd00 	bl	80096d4 <_LCD_SendData>
	_LCD_SendData(0x81);
 8008cd4:	2081      	movs	r0, #129	; 0x81
 8008cd6:	f000 fcfd 	bl	80096d4 <_LCD_SendData>

	//PUMP RATIO CONTROL
	_LCD_SendCommand(0xF7);
 8008cda:	20f7      	movs	r0, #247	; 0xf7
 8008cdc:	f000 fcc8 	bl	8009670 <_LCD_SendCommand>
	_LCD_SendData(0x20);
 8008ce0:	2020      	movs	r0, #32
 8008ce2:	f000 fcf7 	bl	80096d4 <_LCD_SendData>

	//POWER CONTROL,VRH[5:0]
	_LCD_SendCommand(0xC0);
 8008ce6:	20c0      	movs	r0, #192	; 0xc0
 8008ce8:	f000 fcc2 	bl	8009670 <_LCD_SendCommand>
	_LCD_SendData(0x23);
 8008cec:	2023      	movs	r0, #35	; 0x23
 8008cee:	f000 fcf1 	bl	80096d4 <_LCD_SendData>

	//POWER CONTROL,SAP[2:0];BT[3:0]
	_LCD_SendCommand(0xC1);
 8008cf2:	20c1      	movs	r0, #193	; 0xc1
 8008cf4:	f000 fcbc 	bl	8009670 <_LCD_SendCommand>
	_LCD_SendData(0x10);
 8008cf8:	2010      	movs	r0, #16
 8008cfa:	f000 fceb 	bl	80096d4 <_LCD_SendData>

	//VCM CONTROL
	_LCD_SendCommand(0xC5);
 8008cfe:	20c5      	movs	r0, #197	; 0xc5
 8008d00:	f000 fcb6 	bl	8009670 <_LCD_SendCommand>
	_LCD_SendData(0x3E);
 8008d04:	203e      	movs	r0, #62	; 0x3e
 8008d06:	f000 fce5 	bl	80096d4 <_LCD_SendData>
	_LCD_SendData(0x28);
 8008d0a:	2028      	movs	r0, #40	; 0x28
 8008d0c:	f000 fce2 	bl	80096d4 <_LCD_SendData>

	//VCM CONTROL 2
	_LCD_SendCommand(0xC7);
 8008d10:	20c7      	movs	r0, #199	; 0xc7
 8008d12:	f000 fcad 	bl	8009670 <_LCD_SendCommand>
	_LCD_SendData(0x86);
 8008d16:	2086      	movs	r0, #134	; 0x86
 8008d18:	f000 fcdc 	bl	80096d4 <_LCD_SendData>

	//MEMORY ACCESS CONTROL
	_LCD_SendCommand(0x36);
 8008d1c:	2036      	movs	r0, #54	; 0x36
 8008d1e:	f000 fca7 	bl	8009670 <_LCD_SendCommand>
	_LCD_SendData(0x48);
 8008d22:	2048      	movs	r0, #72	; 0x48
 8008d24:	f000 fcd6 	bl	80096d4 <_LCD_SendData>


	//PIXEL FORMAT
	_LCD_SendCommand(0x3A);
 8008d28:	203a      	movs	r0, #58	; 0x3a
 8008d2a:	f000 fca1 	bl	8009670 <_LCD_SendCommand>
	_LCD_SendData(0x55);
 8008d2e:	2055      	movs	r0, #85	; 0x55
 8008d30:	f000 fcd0 	bl	80096d4 <_LCD_SendData>

	//FRAME RATIO CONTROL, STANDARD RGB COLOR
	_LCD_SendCommand(0xB1);
 8008d34:	20b1      	movs	r0, #177	; 0xb1
 8008d36:	f000 fc9b 	bl	8009670 <_LCD_SendCommand>
	_LCD_SendData(0x00);
 8008d3a:	2000      	movs	r0, #0
 8008d3c:	f000 fcca 	bl	80096d4 <_LCD_SendData>
	_LCD_SendData(0x18);
 8008d40:	2018      	movs	r0, #24
 8008d42:	f000 fcc7 	bl	80096d4 <_LCD_SendData>

	//DISPLAY FUNCTION CONTROL
	_LCD_SendCommand(0xB6);
 8008d46:	20b6      	movs	r0, #182	; 0xb6
 8008d48:	f000 fc92 	bl	8009670 <_LCD_SendCommand>
	_LCD_SendData(0x08);
 8008d4c:	2008      	movs	r0, #8
 8008d4e:	f000 fcc1 	bl	80096d4 <_LCD_SendData>
	_LCD_SendData(0x82);
 8008d52:	2082      	movs	r0, #130	; 0x82
 8008d54:	f000 fcbe 	bl	80096d4 <_LCD_SendData>
	_LCD_SendData(0x27);
 8008d58:	2027      	movs	r0, #39	; 0x27
 8008d5a:	f000 fcbb 	bl	80096d4 <_LCD_SendData>


	//3GAMMA FUNCTION DISABLE
	_LCD_SendCommand(0xF2);
 8008d5e:	20f2      	movs	r0, #242	; 0xf2
 8008d60:	f000 fc86 	bl	8009670 <_LCD_SendCommand>
	_LCD_SendData(0x00);
 8008d64:	2000      	movs	r0, #0
 8008d66:	f000 fcb5 	bl	80096d4 <_LCD_SendData>

	//GAMMA CURVE SELECTED
	_LCD_SendCommand(0x26);
 8008d6a:	2026      	movs	r0, #38	; 0x26
 8008d6c:	f000 fc80 	bl	8009670 <_LCD_SendCommand>
	_LCD_SendData(0x01);
 8008d70:	2001      	movs	r0, #1
 8008d72:	f000 fcaf 	bl	80096d4 <_LCD_SendData>

	//POSITIVE GAMMA CORRECTION
	_LCD_SendCommand(0xE0);
 8008d76:	20e0      	movs	r0, #224	; 0xe0
 8008d78:	f000 fc7a 	bl	8009670 <_LCD_SendCommand>
	_LCD_SendData(0x0F);
 8008d7c:	200f      	movs	r0, #15
 8008d7e:	f000 fca9 	bl	80096d4 <_LCD_SendData>
	_LCD_SendData(0x31);
 8008d82:	2031      	movs	r0, #49	; 0x31
 8008d84:	f000 fca6 	bl	80096d4 <_LCD_SendData>
	_LCD_SendData(0x2B);
 8008d88:	202b      	movs	r0, #43	; 0x2b
 8008d8a:	f000 fca3 	bl	80096d4 <_LCD_SendData>
	_LCD_SendData(0x0C);
 8008d8e:	200c      	movs	r0, #12
 8008d90:	f000 fca0 	bl	80096d4 <_LCD_SendData>
	_LCD_SendData(0x0E);
 8008d94:	200e      	movs	r0, #14
 8008d96:	f000 fc9d 	bl	80096d4 <_LCD_SendData>
	_LCD_SendData(0x08);
 8008d9a:	2008      	movs	r0, #8
 8008d9c:	f000 fc9a 	bl	80096d4 <_LCD_SendData>
	_LCD_SendData(0x4E);
 8008da0:	204e      	movs	r0, #78	; 0x4e
 8008da2:	f000 fc97 	bl	80096d4 <_LCD_SendData>
	_LCD_SendData(0xF1);
 8008da6:	20f1      	movs	r0, #241	; 0xf1
 8008da8:	f000 fc94 	bl	80096d4 <_LCD_SendData>
	_LCD_SendData(0x37);
 8008dac:	2037      	movs	r0, #55	; 0x37
 8008dae:	f000 fc91 	bl	80096d4 <_LCD_SendData>
	_LCD_SendData(0x07);
 8008db2:	2007      	movs	r0, #7
 8008db4:	f000 fc8e 	bl	80096d4 <_LCD_SendData>
	_LCD_SendData(0x10);
 8008db8:	2010      	movs	r0, #16
 8008dba:	f000 fc8b 	bl	80096d4 <_LCD_SendData>
	_LCD_SendData(0x03);
 8008dbe:	2003      	movs	r0, #3
 8008dc0:	f000 fc88 	bl	80096d4 <_LCD_SendData>
	_LCD_SendData(0x0E);
 8008dc4:	200e      	movs	r0, #14
 8008dc6:	f000 fc85 	bl	80096d4 <_LCD_SendData>
	_LCD_SendData(0x09);
 8008dca:	2009      	movs	r0, #9
 8008dcc:	f000 fc82 	bl	80096d4 <_LCD_SendData>
	_LCD_SendData(0x00);
 8008dd0:	2000      	movs	r0, #0
 8008dd2:	f000 fc7f 	bl	80096d4 <_LCD_SendData>

	//NEGATIVE GAMMA CORRECTION
	_LCD_SendCommand(0xE1);
 8008dd6:	20e1      	movs	r0, #225	; 0xe1
 8008dd8:	f000 fc4a 	bl	8009670 <_LCD_SendCommand>
	_LCD_SendData(0x00);
 8008ddc:	2000      	movs	r0, #0
 8008dde:	f000 fc79 	bl	80096d4 <_LCD_SendData>
	_LCD_SendData(0x0E);
 8008de2:	200e      	movs	r0, #14
 8008de4:	f000 fc76 	bl	80096d4 <_LCD_SendData>
	_LCD_SendData(0x14);
 8008de8:	2014      	movs	r0, #20
 8008dea:	f000 fc73 	bl	80096d4 <_LCD_SendData>
	_LCD_SendData(0x03);
 8008dee:	2003      	movs	r0, #3
 8008df0:	f000 fc70 	bl	80096d4 <_LCD_SendData>
	_LCD_SendData(0x11);
 8008df4:	2011      	movs	r0, #17
 8008df6:	f000 fc6d 	bl	80096d4 <_LCD_SendData>
	_LCD_SendData(0x07);
 8008dfa:	2007      	movs	r0, #7
 8008dfc:	f000 fc6a 	bl	80096d4 <_LCD_SendData>
	_LCD_SendData(0x31);
 8008e00:	2031      	movs	r0, #49	; 0x31
 8008e02:	f000 fc67 	bl	80096d4 <_LCD_SendData>
	_LCD_SendData(0xC1);
 8008e06:	20c1      	movs	r0, #193	; 0xc1
 8008e08:	f000 fc64 	bl	80096d4 <_LCD_SendData>
	_LCD_SendData(0x48);
 8008e0c:	2048      	movs	r0, #72	; 0x48
 8008e0e:	f000 fc61 	bl	80096d4 <_LCD_SendData>
	_LCD_SendData(0x08);
 8008e12:	2008      	movs	r0, #8
 8008e14:	f000 fc5e 	bl	80096d4 <_LCD_SendData>
	_LCD_SendData(0x0F);
 8008e18:	200f      	movs	r0, #15
 8008e1a:	f000 fc5b 	bl	80096d4 <_LCD_SendData>
	_LCD_SendData(0x0C);
 8008e1e:	200c      	movs	r0, #12
 8008e20:	f000 fc58 	bl	80096d4 <_LCD_SendData>
	_LCD_SendData(0x31);
 8008e24:	2031      	movs	r0, #49	; 0x31
 8008e26:	f000 fc55 	bl	80096d4 <_LCD_SendData>
	_LCD_SendData(0x36);
 8008e2a:	2036      	movs	r0, #54	; 0x36
 8008e2c:	f000 fc52 	bl	80096d4 <_LCD_SendData>
	_LCD_SendData(0x0F);
 8008e30:	200f      	movs	r0, #15
 8008e32:	f000 fc4f 	bl	80096d4 <_LCD_SendData>

	//EXIT SLEEP
	_LCD_SendCommand(0x11);
 8008e36:	2011      	movs	r0, #17
 8008e38:	f000 fc1a 	bl	8009670 <_LCD_SendCommand>
	HAL_Delay(240);
 8008e3c:	20f0      	movs	r0, #240	; 0xf0
 8008e3e:	f7fa f99b 	bl	8003178 <HAL_Delay>

	//TURN ON DISPLAY
	_LCD_SendCommand(0x29);
 8008e42:	2029      	movs	r0, #41	; 0x29
 8008e44:	f000 fc14 	bl	8009670 <_LCD_SendCommand>

	//STARTING ROTATION
	ILI9341_Set_Rotation(SCREEN_VERTICAL_1);
 8008e48:	2000      	movs	r0, #0
 8008e4a:	f000 fae5 	bl	8009418 <ILI9341_Set_Rotation>
}
 8008e4e:	bf00      	nop
 8008e50:	bd80      	pop	{r7, pc}
	...

08008e54 <ILI9341_SPI_Init>:
 *
 * 	Initialise SPI peripheral
 *
 */
void ILI9341_SPI_Init(void)
{
 8008e54:	b480      	push	{r7}
 8008e56:	af00      	add	r7, sp, #0

   	// check SPI enabled
	if ((SPI_PERIPH->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8008e58:	4b0b      	ldr	r3, [pc, #44]	; (8008e88 <ILI9341_SPI_Init+0x34>)
 8008e5a:	681b      	ldr	r3, [r3, #0]
 8008e5c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008e60:	2b40      	cmp	r3, #64	; 0x40
 8008e62:	d005      	beq.n	8008e70 <ILI9341_SPI_Init+0x1c>
	{
		SPI_PERIPH->CR1 |= SPI_CR1_SPE;
 8008e64:	4b08      	ldr	r3, [pc, #32]	; (8008e88 <ILI9341_SPI_Init+0x34>)
 8008e66:	681b      	ldr	r3, [r3, #0]
 8008e68:	4a07      	ldr	r2, [pc, #28]	; (8008e88 <ILI9341_SPI_Init+0x34>)
 8008e6a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008e6e:	6013      	str	r3, [r2, #0]
	}

	LCD_CS_PORT->ODR &= ~(LCD_CS_PIN);
 8008e70:	4b06      	ldr	r3, [pc, #24]	; (8008e8c <ILI9341_SPI_Init+0x38>)
 8008e72:	695b      	ldr	r3, [r3, #20]
 8008e74:	4a05      	ldr	r2, [pc, #20]	; (8008e8c <ILI9341_SPI_Init+0x38>)
 8008e76:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8008e7a:	6153      	str	r3, [r2, #20]
}
 8008e7c:	bf00      	nop
 8008e7e:	46bd      	mov	sp, r7
 8008e80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e84:	4770      	bx	lr
 8008e86:	bf00      	nop
 8008e88:	40003c00 	.word	0x40003c00
 8008e8c:	48000400 	.word	0x48000400

08008e90 <ILI9341_Draw_Horizontal_Line>:
 *	Draw horizontal line
 *
 */

void ILI9341_Draw_Horizontal_Line(uint16_t xpos, uint16_t ypos, uint16_t width, uint16_t colour)
{
 8008e90:	b590      	push	{r4, r7, lr}
 8008e92:	b085      	sub	sp, #20
 8008e94:	af02      	add	r7, sp, #8
 8008e96:	4604      	mov	r4, r0
 8008e98:	4608      	mov	r0, r1
 8008e9a:	4611      	mov	r1, r2
 8008e9c:	461a      	mov	r2, r3
 8008e9e:	4623      	mov	r3, r4
 8008ea0:	80fb      	strh	r3, [r7, #6]
 8008ea2:	4603      	mov	r3, r0
 8008ea4:	80bb      	strh	r3, [r7, #4]
 8008ea6:	460b      	mov	r3, r1
 8008ea8:	807b      	strh	r3, [r7, #2]
 8008eaa:	4613      	mov	r3, r2
 8008eac:	803b      	strh	r3, [r7, #0]
	if((xpos >=LCD_WIDTH) || (ypos >=LCD_HEIGHT)) return;
 8008eae:	4b1a      	ldr	r3, [pc, #104]	; (8008f18 <ILI9341_Draw_Horizontal_Line+0x88>)
 8008eb0:	881b      	ldrh	r3, [r3, #0]
 8008eb2:	b29b      	uxth	r3, r3
 8008eb4:	88fa      	ldrh	r2, [r7, #6]
 8008eb6:	429a      	cmp	r2, r3
 8008eb8:	d229      	bcs.n	8008f0e <ILI9341_Draw_Horizontal_Line+0x7e>
 8008eba:	4b18      	ldr	r3, [pc, #96]	; (8008f1c <ILI9341_Draw_Horizontal_Line+0x8c>)
 8008ebc:	881b      	ldrh	r3, [r3, #0]
 8008ebe:	b29b      	uxth	r3, r3
 8008ec0:	88ba      	ldrh	r2, [r7, #4]
 8008ec2:	429a      	cmp	r2, r3
 8008ec4:	d223      	bcs.n	8008f0e <ILI9341_Draw_Horizontal_Line+0x7e>
	if(((xpos + width) - 1 ) >= LCD_WIDTH)
 8008ec6:	88fa      	ldrh	r2, [r7, #6]
 8008ec8:	887b      	ldrh	r3, [r7, #2]
 8008eca:	4413      	add	r3, r2
 8008ecc:	3b01      	subs	r3, #1
 8008ece:	4a12      	ldr	r2, [pc, #72]	; (8008f18 <ILI9341_Draw_Horizontal_Line+0x88>)
 8008ed0:	8812      	ldrh	r2, [r2, #0]
 8008ed2:	b292      	uxth	r2, r2
 8008ed4:	4293      	cmp	r3, r2
 8008ed6:	db05      	blt.n	8008ee4 <ILI9341_Draw_Horizontal_Line+0x54>
		{
			width= LCD_WIDTH - xpos;
 8008ed8:	4b0f      	ldr	r3, [pc, #60]	; (8008f18 <ILI9341_Draw_Horizontal_Line+0x88>)
 8008eda:	881b      	ldrh	r3, [r3, #0]
 8008edc:	b29a      	uxth	r2, r3
 8008ede:	88fb      	ldrh	r3, [r7, #6]
 8008ee0:	1ad3      	subs	r3, r2, r3
 8008ee2:	807b      	strh	r3, [r7, #2]
		}
	ILI9341_Set_Frame(	xpos,
							ypos,
							(xpos + width) - 1,
 8008ee4:	88fa      	ldrh	r2, [r7, #6]
 8008ee6:	887b      	ldrh	r3, [r7, #2]
 8008ee8:	4413      	add	r3, r2
 8008eea:	b29b      	uxth	r3, r3
	ILI9341_Set_Frame(	xpos,
 8008eec:	3b01      	subs	r3, #1
 8008eee:	b29a      	uxth	r2, r3
 8008ef0:	88bb      	ldrh	r3, [r7, #4]
 8008ef2:	88b9      	ldrh	r1, [r7, #4]
 8008ef4:	88f8      	ldrh	r0, [r7, #6]
 8008ef6:	f000 f85b 	bl	8008fb0 <ILI9341_Set_Frame>
							ypos);

	_LCD_Write_Frame(xpos, ypos, colour, width, LINE_CHUNK);
 8008efa:	887c      	ldrh	r4, [r7, #2]
 8008efc:	883a      	ldrh	r2, [r7, #0]
 8008efe:	88b9      	ldrh	r1, [r7, #4]
 8008f00:	88f8      	ldrh	r0, [r7, #6]
 8008f02:	2303      	movs	r3, #3
 8008f04:	9300      	str	r3, [sp, #0]
 8008f06:	4623      	mov	r3, r4
 8008f08:	f000 fb02 	bl	8009510 <_LCD_Write_Frame>
 8008f0c:	e000      	b.n	8008f10 <ILI9341_Draw_Horizontal_Line+0x80>
	if((xpos >=LCD_WIDTH) || (ypos >=LCD_HEIGHT)) return;
 8008f0e:	bf00      	nop
}
 8008f10:	370c      	adds	r7, #12
 8008f12:	46bd      	mov	sp, r7
 8008f14:	bd90      	pop	{r4, r7, pc}
 8008f16:	bf00      	nop
 8008f18:	2000001e 	.word	0x2000001e
 8008f1c:	2000001c 	.word	0x2000001c

08008f20 <ILI9341_Draw_Vertical_Line>:
 *
 *  Draw vertical line
 *
 */
void ILI9341_Draw_Vertical_Line(uint16_t xpos, uint16_t ypos, uint16_t height, uint16_t colour)
{
 8008f20:	b590      	push	{r4, r7, lr}
 8008f22:	b085      	sub	sp, #20
 8008f24:	af02      	add	r7, sp, #8
 8008f26:	4604      	mov	r4, r0
 8008f28:	4608      	mov	r0, r1
 8008f2a:	4611      	mov	r1, r2
 8008f2c:	461a      	mov	r2, r3
 8008f2e:	4623      	mov	r3, r4
 8008f30:	80fb      	strh	r3, [r7, #6]
 8008f32:	4603      	mov	r3, r0
 8008f34:	80bb      	strh	r3, [r7, #4]
 8008f36:	460b      	mov	r3, r1
 8008f38:	807b      	strh	r3, [r7, #2]
 8008f3a:	4613      	mov	r3, r2
 8008f3c:	803b      	strh	r3, [r7, #0]
	if((xpos >= LCD_WIDTH) || (ypos >= LCD_HEIGHT)) return;
 8008f3e:	4b1a      	ldr	r3, [pc, #104]	; (8008fa8 <ILI9341_Draw_Vertical_Line+0x88>)
 8008f40:	881b      	ldrh	r3, [r3, #0]
 8008f42:	b29b      	uxth	r3, r3
 8008f44:	88fa      	ldrh	r2, [r7, #6]
 8008f46:	429a      	cmp	r2, r3
 8008f48:	d229      	bcs.n	8008f9e <ILI9341_Draw_Vertical_Line+0x7e>
 8008f4a:	4b18      	ldr	r3, [pc, #96]	; (8008fac <ILI9341_Draw_Vertical_Line+0x8c>)
 8008f4c:	881b      	ldrh	r3, [r3, #0]
 8008f4e:	b29b      	uxth	r3, r3
 8008f50:	88ba      	ldrh	r2, [r7, #4]
 8008f52:	429a      	cmp	r2, r3
 8008f54:	d223      	bcs.n	8008f9e <ILI9341_Draw_Vertical_Line+0x7e>
	if(((ypos + height) - 1) >= LCD_HEIGHT)
 8008f56:	88ba      	ldrh	r2, [r7, #4]
 8008f58:	887b      	ldrh	r3, [r7, #2]
 8008f5a:	4413      	add	r3, r2
 8008f5c:	3b01      	subs	r3, #1
 8008f5e:	4a13      	ldr	r2, [pc, #76]	; (8008fac <ILI9341_Draw_Vertical_Line+0x8c>)
 8008f60:	8812      	ldrh	r2, [r2, #0]
 8008f62:	b292      	uxth	r2, r2
 8008f64:	4293      	cmp	r3, r2
 8008f66:	db05      	blt.n	8008f74 <ILI9341_Draw_Vertical_Line+0x54>
		{
			height= LCD_HEIGHT - ypos;
 8008f68:	4b10      	ldr	r3, [pc, #64]	; (8008fac <ILI9341_Draw_Vertical_Line+0x8c>)
 8008f6a:	881b      	ldrh	r3, [r3, #0]
 8008f6c:	b29a      	uxth	r2, r3
 8008f6e:	88bb      	ldrh	r3, [r7, #4]
 8008f70:	1ad3      	subs	r3, r2, r3
 8008f72:	807b      	strh	r3, [r7, #2]
		}
	ILI9341_Set_Frame(xpos, ypos, xpos, (ypos + height) - 1);
 8008f74:	88ba      	ldrh	r2, [r7, #4]
 8008f76:	887b      	ldrh	r3, [r7, #2]
 8008f78:	4413      	add	r3, r2
 8008f7a:	b29b      	uxth	r3, r3
 8008f7c:	3b01      	subs	r3, #1
 8008f7e:	b29b      	uxth	r3, r3
 8008f80:	88fa      	ldrh	r2, [r7, #6]
 8008f82:	88b9      	ldrh	r1, [r7, #4]
 8008f84:	88f8      	ldrh	r0, [r7, #6]
 8008f86:	f000 f813 	bl	8008fb0 <ILI9341_Set_Frame>
	_LCD_Write_Frame(xpos, ypos, colour, height, LINE_CHUNK);
 8008f8a:	887c      	ldrh	r4, [r7, #2]
 8008f8c:	883a      	ldrh	r2, [r7, #0]
 8008f8e:	88b9      	ldrh	r1, [r7, #4]
 8008f90:	88f8      	ldrh	r0, [r7, #6]
 8008f92:	2303      	movs	r3, #3
 8008f94:	9300      	str	r3, [sp, #0]
 8008f96:	4623      	mov	r3, r4
 8008f98:	f000 faba 	bl	8009510 <_LCD_Write_Frame>
 8008f9c:	e000      	b.n	8008fa0 <ILI9341_Draw_Vertical_Line+0x80>
	if((xpos >= LCD_WIDTH) || (ypos >= LCD_HEIGHT)) return;
 8008f9e:	bf00      	nop
}
 8008fa0:	370c      	adds	r7, #12
 8008fa2:	46bd      	mov	sp, r7
 8008fa4:	bd90      	pop	{r4, r7, pc}
 8008fa6:	bf00      	nop
 8008fa8:	2000001e 	.word	0x2000001e
 8008fac:	2000001c 	.word	0x2000001c

08008fb0 <ILI9341_Set_Frame>:
 *	bottom right of area (ec, ep):
 *	ec 	- 	"end column"
 *	ep	- 	"end page"
 */
void ILI9341_Set_Frame(uint16_t sc, uint16_t sp, uint16_t ec, uint16_t ep)
{
 8008fb0:	b590      	push	{r4, r7, lr}
 8008fb2:	b083      	sub	sp, #12
 8008fb4:	af00      	add	r7, sp, #0
 8008fb6:	4604      	mov	r4, r0
 8008fb8:	4608      	mov	r0, r1
 8008fba:	4611      	mov	r1, r2
 8008fbc:	461a      	mov	r2, r3
 8008fbe:	4623      	mov	r3, r4
 8008fc0:	80fb      	strh	r3, [r7, #6]
 8008fc2:	4603      	mov	r3, r0
 8008fc4:	80bb      	strh	r3, [r7, #4]
 8008fc6:	460b      	mov	r3, r1
 8008fc8:	807b      	strh	r3, [r7, #2]
 8008fca:	4613      	mov	r3, r2
 8008fcc:	803b      	strh	r3, [r7, #0]
	// send "Column Address Set" command
	_LCD_SendCommand(0x2A);
 8008fce:	202a      	movs	r0, #42	; 0x2a
 8008fd0:	f000 fb4e 	bl	8009670 <_LCD_SendCommand>
	_LCD_SendData(sc >> 8);
 8008fd4:	88fb      	ldrh	r3, [r7, #6]
 8008fd6:	0a1b      	lsrs	r3, r3, #8
 8008fd8:	b29b      	uxth	r3, r3
 8008fda:	b2db      	uxtb	r3, r3
 8008fdc:	4618      	mov	r0, r3
 8008fde:	f000 fb79 	bl	80096d4 <_LCD_SendData>
	_LCD_SendData(sc);
 8008fe2:	88fb      	ldrh	r3, [r7, #6]
 8008fe4:	b2db      	uxtb	r3, r3
 8008fe6:	4618      	mov	r0, r3
 8008fe8:	f000 fb74 	bl	80096d4 <_LCD_SendData>
	_LCD_SendData(ec >> 8);
 8008fec:	887b      	ldrh	r3, [r7, #2]
 8008fee:	0a1b      	lsrs	r3, r3, #8
 8008ff0:	b29b      	uxth	r3, r3
 8008ff2:	b2db      	uxtb	r3, r3
 8008ff4:	4618      	mov	r0, r3
 8008ff6:	f000 fb6d 	bl	80096d4 <_LCD_SendData>
	_LCD_SendData(ec);
 8008ffa:	887b      	ldrh	r3, [r7, #2]
 8008ffc:	b2db      	uxtb	r3, r3
 8008ffe:	4618      	mov	r0, r3
 8009000:	f000 fb68 	bl	80096d4 <_LCD_SendData>

	// send "Page Address Set" command
	_LCD_SendCommand(0x2B);
 8009004:	202b      	movs	r0, #43	; 0x2b
 8009006:	f000 fb33 	bl	8009670 <_LCD_SendCommand>
	_LCD_SendData(sp >> 8);
 800900a:	88bb      	ldrh	r3, [r7, #4]
 800900c:	0a1b      	lsrs	r3, r3, #8
 800900e:	b29b      	uxth	r3, r3
 8009010:	b2db      	uxtb	r3, r3
 8009012:	4618      	mov	r0, r3
 8009014:	f000 fb5e 	bl	80096d4 <_LCD_SendData>
	_LCD_SendData(sp);
 8009018:	88bb      	ldrh	r3, [r7, #4]
 800901a:	b2db      	uxtb	r3, r3
 800901c:	4618      	mov	r0, r3
 800901e:	f000 fb59 	bl	80096d4 <_LCD_SendData>
	_LCD_SendData(ep >> 8);
 8009022:	883b      	ldrh	r3, [r7, #0]
 8009024:	0a1b      	lsrs	r3, r3, #8
 8009026:	b29b      	uxth	r3, r3
 8009028:	b2db      	uxtb	r3, r3
 800902a:	4618      	mov	r0, r3
 800902c:	f000 fb52 	bl	80096d4 <_LCD_SendData>
	_LCD_SendData(ep);
 8009030:	883b      	ldrh	r3, [r7, #0]
 8009032:	b2db      	uxtb	r3, r3
 8009034:	4618      	mov	r0, r3
 8009036:	f000 fb4d 	bl	80096d4 <_LCD_SendData>

	_LCD_SendCommand(0x2C);
 800903a:	202c      	movs	r0, #44	; 0x2c
 800903c:	f000 fb18 	bl	8009670 <_LCD_SendCommand>
}
 8009040:	bf00      	nop
 8009042:	370c      	adds	r7, #12
 8009044:	46bd      	mov	sp, r7
 8009046:	bd90      	pop	{r4, r7, pc}

08009048 <ILI9341_Fill_Screen>:
 *
 * 	Sets address (entire screen) and Sends height*width ammount of colour information to LCD
 *
 */
void ILI9341_Fill_Screen(uint16_t colour)
{
 8009048:	b580      	push	{r7, lr}
 800904a:	b084      	sub	sp, #16
 800904c:	af02      	add	r7, sp, #8
 800904e:	4603      	mov	r3, r0
 8009050:	80fb      	strh	r3, [r7, #6]
	ILI9341_Set_Frame(0,0,LCD_WIDTH,LCD_HEIGHT);
 8009052:	4b10      	ldr	r3, [pc, #64]	; (8009094 <ILI9341_Fill_Screen+0x4c>)
 8009054:	881b      	ldrh	r3, [r3, #0]
 8009056:	b29a      	uxth	r2, r3
 8009058:	4b0f      	ldr	r3, [pc, #60]	; (8009098 <ILI9341_Fill_Screen+0x50>)
 800905a:	881b      	ldrh	r3, [r3, #0]
 800905c:	b29b      	uxth	r3, r3
 800905e:	2100      	movs	r1, #0
 8009060:	2000      	movs	r0, #0
 8009062:	f7ff ffa5 	bl	8008fb0 <ILI9341_Set_Frame>
	_LCD_Write_Frame(0, 0, colour, LCD_WIDTH*LCD_HEIGHT, AREA_CHUNK);
 8009066:	4b0b      	ldr	r3, [pc, #44]	; (8009094 <ILI9341_Fill_Screen+0x4c>)
 8009068:	881b      	ldrh	r3, [r3, #0]
 800906a:	b29b      	uxth	r3, r3
 800906c:	461a      	mov	r2, r3
 800906e:	4b0a      	ldr	r3, [pc, #40]	; (8009098 <ILI9341_Fill_Screen+0x50>)
 8009070:	881b      	ldrh	r3, [r3, #0]
 8009072:	b29b      	uxth	r3, r3
 8009074:	fb03 f302 	mul.w	r3, r3, r2
 8009078:	4619      	mov	r1, r3
 800907a:	88fa      	ldrh	r2, [r7, #6]
 800907c:	2304      	movs	r3, #4
 800907e:	9300      	str	r3, [sp, #0]
 8009080:	460b      	mov	r3, r1
 8009082:	2100      	movs	r1, #0
 8009084:	2000      	movs	r0, #0
 8009086:	f000 fa43 	bl	8009510 <_LCD_Write_Frame>
}
 800908a:	bf00      	nop
 800908c:	3708      	adds	r7, #8
 800908e:	46bd      	mov	sp, r7
 8009090:	bd80      	pop	{r7, pc}
 8009092:	bf00      	nop
 8009094:	2000001e 	.word	0x2000001e
 8009098:	2000001c 	.word	0x2000001c

0800909c <ILI9341_Draw_Pixel>:
 * 	Using pixels to draw big simple structures is not recommended as it is really slow
 * 	Try using either rectangles or lines if possible
 *
 */
void ILI9341_Draw_Pixel(uint16_t x,uint16_t y,uint16_t colour)
{
 800909c:	b580      	push	{r7, lr}
 800909e:	b08c      	sub	sp, #48	; 0x30
 80090a0:	af00      	add	r7, sp, #0
 80090a2:	4603      	mov	r3, r0
 80090a4:	80fb      	strh	r3, [r7, #6]
 80090a6:	460b      	mov	r3, r1
 80090a8:	80bb      	strh	r3, [r7, #4]
 80090aa:	4613      	mov	r3, r2
 80090ac:	807b      	strh	r3, [r7, #2]
	if((x >= LCD_WIDTH) || (y >= LCD_HEIGHT)) return;	//OUT OF BOUNDS!
 80090ae:	4b94      	ldr	r3, [pc, #592]	; (8009300 <ILI9341_Draw_Pixel+0x264>)
 80090b0:	881b      	ldrh	r3, [r3, #0]
 80090b2:	b29b      	uxth	r3, r3
 80090b4:	88fa      	ldrh	r2, [r7, #6]
 80090b6:	429a      	cmp	r2, r3
 80090b8:	f080 811e 	bcs.w	80092f8 <ILI9341_Draw_Pixel+0x25c>
 80090bc:	4b91      	ldr	r3, [pc, #580]	; (8009304 <ILI9341_Draw_Pixel+0x268>)
 80090be:	881b      	ldrh	r3, [r3, #0]
 80090c0:	b29b      	uxth	r3, r3
 80090c2:	88ba      	ldrh	r2, [r7, #4]
 80090c4:	429a      	cmp	r2, r3
 80090c6:	f080 8117 	bcs.w	80092f8 <ILI9341_Draw_Pixel+0x25c>

	//ADDRESS
	LCD_DC_PORT->ODR &= ~(LCD_DC_PIN);
 80090ca:	4b8f      	ldr	r3, [pc, #572]	; (8009308 <ILI9341_Draw_Pixel+0x26c>)
 80090cc:	695b      	ldr	r3, [r3, #20]
 80090ce:	4a8e      	ldr	r2, [pc, #568]	; (8009308 <ILI9341_Draw_Pixel+0x26c>)
 80090d0:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80090d4:	6153      	str	r3, [r2, #20]
	LCD_CS_PORT->ODR &= ~(LCD_CS_PIN);
 80090d6:	4b8c      	ldr	r3, [pc, #560]	; (8009308 <ILI9341_Draw_Pixel+0x26c>)
 80090d8:	695b      	ldr	r3, [r3, #20]
 80090da:	4a8b      	ldr	r2, [pc, #556]	; (8009308 <ILI9341_Draw_Pixel+0x26c>)
 80090dc:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80090e0:	6153      	str	r3, [r2, #20]

	_SPI_SendByte(0x2A, 0, 0);
 80090e2:	2200      	movs	r2, #0
 80090e4:	2100      	movs	r1, #0
 80090e6:	202a      	movs	r0, #42	; 0x2a
 80090e8:	f000 fb26 	bl	8009738 <_SPI_SendByte>

	// Additional SPI CS "low" hold
	for(int s=0; s < SPI_DELAY_HOLD; s++)
 80090ec:	2300      	movs	r3, #0
 80090ee:	62fb      	str	r3, [r7, #44]	; 0x2c
 80090f0:	e008      	b.n	8009104 <ILI9341_Draw_Pixel+0x68>
		LCD_CS_PORT->ODR &= ~(LCD_CS_PIN);
 80090f2:	4b85      	ldr	r3, [pc, #532]	; (8009308 <ILI9341_Draw_Pixel+0x26c>)
 80090f4:	695b      	ldr	r3, [r3, #20]
 80090f6:	4a84      	ldr	r2, [pc, #528]	; (8009308 <ILI9341_Draw_Pixel+0x26c>)
 80090f8:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80090fc:	6153      	str	r3, [r2, #20]
	for(int s=0; s < SPI_DELAY_HOLD; s++)
 80090fe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009100:	3301      	adds	r3, #1
 8009102:	62fb      	str	r3, [r7, #44]	; 0x2c
 8009104:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009106:	2b02      	cmp	r3, #2
 8009108:	ddf3      	ble.n	80090f2 <ILI9341_Draw_Pixel+0x56>

	LCD_DC_PORT->ODR |= LCD_DC_PIN;
 800910a:	4b7f      	ldr	r3, [pc, #508]	; (8009308 <ILI9341_Draw_Pixel+0x26c>)
 800910c:	695b      	ldr	r3, [r3, #20]
 800910e:	4a7e      	ldr	r2, [pc, #504]	; (8009308 <ILI9341_Draw_Pixel+0x26c>)
 8009110:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8009114:	6153      	str	r3, [r2, #20]
	LCD_CS_PORT->ODR |= LCD_CS_PIN;
 8009116:	4b7c      	ldr	r3, [pc, #496]	; (8009308 <ILI9341_Draw_Pixel+0x26c>)
 8009118:	695b      	ldr	r3, [r3, #20]
 800911a:	4a7b      	ldr	r2, [pc, #492]	; (8009308 <ILI9341_Draw_Pixel+0x26c>)
 800911c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009120:	6153      	str	r3, [r2, #20]

	//XDATA
	LCD_CS_PORT->ODR &= ~(LCD_CS_PIN);
 8009122:	4b79      	ldr	r3, [pc, #484]	; (8009308 <ILI9341_Draw_Pixel+0x26c>)
 8009124:	695b      	ldr	r3, [r3, #20]
 8009126:	4a78      	ldr	r2, [pc, #480]	; (8009308 <ILI9341_Draw_Pixel+0x26c>)
 8009128:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800912c:	6153      	str	r3, [r2, #20]
	unsigned char Temp_Buffer[4] =
 800912e:	88fb      	ldrh	r3, [r7, #6]
 8009130:	0a1b      	lsrs	r3, r3, #8
 8009132:	b29b      	uxth	r3, r3
 8009134:	b2db      	uxtb	r3, r3
 8009136:	753b      	strb	r3, [r7, #20]
 8009138:	88fb      	ldrh	r3, [r7, #6]
 800913a:	b2db      	uxtb	r3, r3
 800913c:	757b      	strb	r3, [r7, #21]
	{
			x >> 8,
			x,
			(x + 1) >> 8,
 800913e:	88fb      	ldrh	r3, [r7, #6]
 8009140:	3301      	adds	r3, #1
 8009142:	121b      	asrs	r3, r3, #8
	unsigned char Temp_Buffer[4] =
 8009144:	b2db      	uxtb	r3, r3
 8009146:	75bb      	strb	r3, [r7, #22]
			(x + 1)
 8009148:	88fb      	ldrh	r3, [r7, #6]
 800914a:	b2db      	uxtb	r3, r3
 800914c:	3301      	adds	r3, #1
 800914e:	b2db      	uxtb	r3, r3
	unsigned char Temp_Buffer[4] =
 8009150:	75fb      	strb	r3, [r7, #23]
	};

	_SPI_SendByteMultiByte(Temp_Buffer, 4, 0, 9);
 8009152:	f107 0014 	add.w	r0, r7, #20
 8009156:	2309      	movs	r3, #9
 8009158:	2200      	movs	r2, #0
 800915a:	2104      	movs	r1, #4
 800915c:	f000 fb02 	bl	8009764 <_SPI_SendByteMultiByte>
	//HAL_SPI_Transmit(HSPI_INSTANCE, Temp_Buffer, 4, 1 );

	// Additional SPI CS "low" hold
	for(int s=0; s < SPI_DELAY_HOLD; s++)
 8009160:	2300      	movs	r3, #0
 8009162:	62bb      	str	r3, [r7, #40]	; 0x28
 8009164:	e008      	b.n	8009178 <ILI9341_Draw_Pixel+0xdc>
		LCD_CS_PORT->ODR &= ~(LCD_CS_PIN);
 8009166:	4b68      	ldr	r3, [pc, #416]	; (8009308 <ILI9341_Draw_Pixel+0x26c>)
 8009168:	695b      	ldr	r3, [r3, #20]
 800916a:	4a67      	ldr	r2, [pc, #412]	; (8009308 <ILI9341_Draw_Pixel+0x26c>)
 800916c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8009170:	6153      	str	r3, [r2, #20]
	for(int s=0; s < SPI_DELAY_HOLD; s++)
 8009172:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009174:	3301      	adds	r3, #1
 8009176:	62bb      	str	r3, [r7, #40]	; 0x28
 8009178:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800917a:	2b02      	cmp	r3, #2
 800917c:	ddf3      	ble.n	8009166 <ILI9341_Draw_Pixel+0xca>

	LCD_CS_PORT->ODR |= LCD_CS_PIN;
 800917e:	4b62      	ldr	r3, [pc, #392]	; (8009308 <ILI9341_Draw_Pixel+0x26c>)
 8009180:	695b      	ldr	r3, [r3, #20]
 8009182:	4a61      	ldr	r2, [pc, #388]	; (8009308 <ILI9341_Draw_Pixel+0x26c>)
 8009184:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009188:	6153      	str	r3, [r2, #20]

	//ADDRESS
	LCD_DC_PORT->ODR &= ~(LCD_DC_PIN);
 800918a:	4b5f      	ldr	r3, [pc, #380]	; (8009308 <ILI9341_Draw_Pixel+0x26c>)
 800918c:	695b      	ldr	r3, [r3, #20]
 800918e:	4a5e      	ldr	r2, [pc, #376]	; (8009308 <ILI9341_Draw_Pixel+0x26c>)
 8009190:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8009194:	6153      	str	r3, [r2, #20]
	LCD_CS_PORT->ODR &= ~(LCD_CS_PIN);
 8009196:	4b5c      	ldr	r3, [pc, #368]	; (8009308 <ILI9341_Draw_Pixel+0x26c>)
 8009198:	695b      	ldr	r3, [r3, #20]
 800919a:	4a5b      	ldr	r2, [pc, #364]	; (8009308 <ILI9341_Draw_Pixel+0x26c>)
 800919c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80091a0:	6153      	str	r3, [r2, #20]

	_SPI_SendByte(0x2B, 0, 0);
 80091a2:	2200      	movs	r2, #0
 80091a4:	2100      	movs	r1, #0
 80091a6:	202b      	movs	r0, #43	; 0x2b
 80091a8:	f000 fac6 	bl	8009738 <_SPI_SendByte>

	// Additional SPI CS "low" hold
	for(int s=0; s < SPI_DELAY_HOLD; s++)
 80091ac:	2300      	movs	r3, #0
 80091ae:	627b      	str	r3, [r7, #36]	; 0x24
 80091b0:	e008      	b.n	80091c4 <ILI9341_Draw_Pixel+0x128>
		LCD_CS_PORT->ODR &= ~(LCD_CS_PIN);
 80091b2:	4b55      	ldr	r3, [pc, #340]	; (8009308 <ILI9341_Draw_Pixel+0x26c>)
 80091b4:	695b      	ldr	r3, [r3, #20]
 80091b6:	4a54      	ldr	r2, [pc, #336]	; (8009308 <ILI9341_Draw_Pixel+0x26c>)
 80091b8:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80091bc:	6153      	str	r3, [r2, #20]
	for(int s=0; s < SPI_DELAY_HOLD; s++)
 80091be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80091c0:	3301      	adds	r3, #1
 80091c2:	627b      	str	r3, [r7, #36]	; 0x24
 80091c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80091c6:	2b02      	cmp	r3, #2
 80091c8:	ddf3      	ble.n	80091b2 <ILI9341_Draw_Pixel+0x116>

	LCD_DC_PORT->ODR |= LCD_DC_PIN;
 80091ca:	4b4f      	ldr	r3, [pc, #316]	; (8009308 <ILI9341_Draw_Pixel+0x26c>)
 80091cc:	695b      	ldr	r3, [r3, #20]
 80091ce:	4a4e      	ldr	r2, [pc, #312]	; (8009308 <ILI9341_Draw_Pixel+0x26c>)
 80091d0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80091d4:	6153      	str	r3, [r2, #20]
	LCD_CS_PORT->ODR |= LCD_CS_PIN;
 80091d6:	4b4c      	ldr	r3, [pc, #304]	; (8009308 <ILI9341_Draw_Pixel+0x26c>)
 80091d8:	695b      	ldr	r3, [r3, #20]
 80091da:	4a4b      	ldr	r2, [pc, #300]	; (8009308 <ILI9341_Draw_Pixel+0x26c>)
 80091dc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80091e0:	6153      	str	r3, [r2, #20]

	//YDATA
	LCD_CS_PORT->ODR &= ~(LCD_CS_PIN);
 80091e2:	4b49      	ldr	r3, [pc, #292]	; (8009308 <ILI9341_Draw_Pixel+0x26c>)
 80091e4:	695b      	ldr	r3, [r3, #20]
 80091e6:	4a48      	ldr	r2, [pc, #288]	; (8009308 <ILI9341_Draw_Pixel+0x26c>)
 80091e8:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80091ec:	6153      	str	r3, [r2, #20]
	unsigned char Temp_Buffer1[4] =
 80091ee:	88bb      	ldrh	r3, [r7, #4]
 80091f0:	0a1b      	lsrs	r3, r3, #8
 80091f2:	b29b      	uxth	r3, r3
 80091f4:	b2db      	uxtb	r3, r3
 80091f6:	743b      	strb	r3, [r7, #16]
 80091f8:	88bb      	ldrh	r3, [r7, #4]
 80091fa:	b2db      	uxtb	r3, r3
 80091fc:	747b      	strb	r3, [r7, #17]
	{
			y >> 8,
			y,
			(y + 1) >> 8,
 80091fe:	88bb      	ldrh	r3, [r7, #4]
 8009200:	3301      	adds	r3, #1
 8009202:	121b      	asrs	r3, r3, #8
	unsigned char Temp_Buffer1[4] =
 8009204:	b2db      	uxtb	r3, r3
 8009206:	74bb      	strb	r3, [r7, #18]
			(y + 1)
 8009208:	88bb      	ldrh	r3, [r7, #4]
 800920a:	b2db      	uxtb	r3, r3
 800920c:	3301      	adds	r3, #1
 800920e:	b2db      	uxtb	r3, r3
	unsigned char Temp_Buffer1[4] =
 8009210:	74fb      	strb	r3, [r7, #19]
	};

	//HAL_SPI_Transmit(HSPI_INSTANCE, Temp_Buffer1, 4, 1 );
	_SPI_SendByteMultiByte(Temp_Buffer1, 4, 0, 9);
 8009212:	f107 0010 	add.w	r0, r7, #16
 8009216:	2309      	movs	r3, #9
 8009218:	2200      	movs	r2, #0
 800921a:	2104      	movs	r1, #4
 800921c:	f000 faa2 	bl	8009764 <_SPI_SendByteMultiByte>

	// Additional SPI CS "low" hold
	for(int s=0; s < SPI_DELAY_HOLD; s++)
 8009220:	2300      	movs	r3, #0
 8009222:	623b      	str	r3, [r7, #32]
 8009224:	e008      	b.n	8009238 <ILI9341_Draw_Pixel+0x19c>
		LCD_CS_PORT->ODR &= ~(LCD_CS_PIN);
 8009226:	4b38      	ldr	r3, [pc, #224]	; (8009308 <ILI9341_Draw_Pixel+0x26c>)
 8009228:	695b      	ldr	r3, [r3, #20]
 800922a:	4a37      	ldr	r2, [pc, #220]	; (8009308 <ILI9341_Draw_Pixel+0x26c>)
 800922c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8009230:	6153      	str	r3, [r2, #20]
	for(int s=0; s < SPI_DELAY_HOLD; s++)
 8009232:	6a3b      	ldr	r3, [r7, #32]
 8009234:	3301      	adds	r3, #1
 8009236:	623b      	str	r3, [r7, #32]
 8009238:	6a3b      	ldr	r3, [r7, #32]
 800923a:	2b02      	cmp	r3, #2
 800923c:	ddf3      	ble.n	8009226 <ILI9341_Draw_Pixel+0x18a>

	LCD_CS_PORT->ODR |= LCD_CS_PIN;
 800923e:	4b32      	ldr	r3, [pc, #200]	; (8009308 <ILI9341_Draw_Pixel+0x26c>)
 8009240:	695b      	ldr	r3, [r3, #20]
 8009242:	4a31      	ldr	r2, [pc, #196]	; (8009308 <ILI9341_Draw_Pixel+0x26c>)
 8009244:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009248:	6153      	str	r3, [r2, #20]

	//ADDRESS
	LCD_DC_PORT->ODR &= ~(LCD_DC_PIN);
 800924a:	4b2f      	ldr	r3, [pc, #188]	; (8009308 <ILI9341_Draw_Pixel+0x26c>)
 800924c:	695b      	ldr	r3, [r3, #20]
 800924e:	4a2e      	ldr	r2, [pc, #184]	; (8009308 <ILI9341_Draw_Pixel+0x26c>)
 8009250:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8009254:	6153      	str	r3, [r2, #20]
	LCD_CS_PORT->ODR &= ~(LCD_CS_PIN);
 8009256:	4b2c      	ldr	r3, [pc, #176]	; (8009308 <ILI9341_Draw_Pixel+0x26c>)
 8009258:	695b      	ldr	r3, [r3, #20]
 800925a:	4a2b      	ldr	r2, [pc, #172]	; (8009308 <ILI9341_Draw_Pixel+0x26c>)
 800925c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8009260:	6153      	str	r3, [r2, #20]

	_SPI_SendByte(0x2C, 0, 0);
 8009262:	2200      	movs	r2, #0
 8009264:	2100      	movs	r1, #0
 8009266:	202c      	movs	r0, #44	; 0x2c
 8009268:	f000 fa66 	bl	8009738 <_SPI_SendByte>

	// Additional SPI CS "low" hold
	for(int s=0; s < SPI_DELAY_HOLD; s++)
 800926c:	2300      	movs	r3, #0
 800926e:	61fb      	str	r3, [r7, #28]
 8009270:	e008      	b.n	8009284 <ILI9341_Draw_Pixel+0x1e8>
		LCD_CS_PORT->ODR &= ~(LCD_CS_PIN);
 8009272:	4b25      	ldr	r3, [pc, #148]	; (8009308 <ILI9341_Draw_Pixel+0x26c>)
 8009274:	695b      	ldr	r3, [r3, #20]
 8009276:	4a24      	ldr	r2, [pc, #144]	; (8009308 <ILI9341_Draw_Pixel+0x26c>)
 8009278:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800927c:	6153      	str	r3, [r2, #20]
	for(int s=0; s < SPI_DELAY_HOLD; s++)
 800927e:	69fb      	ldr	r3, [r7, #28]
 8009280:	3301      	adds	r3, #1
 8009282:	61fb      	str	r3, [r7, #28]
 8009284:	69fb      	ldr	r3, [r7, #28]
 8009286:	2b02      	cmp	r3, #2
 8009288:	ddf3      	ble.n	8009272 <ILI9341_Draw_Pixel+0x1d6>

	LCD_DC_PORT->ODR |= LCD_DC_PIN;
 800928a:	4b1f      	ldr	r3, [pc, #124]	; (8009308 <ILI9341_Draw_Pixel+0x26c>)
 800928c:	695b      	ldr	r3, [r3, #20]
 800928e:	4a1e      	ldr	r2, [pc, #120]	; (8009308 <ILI9341_Draw_Pixel+0x26c>)
 8009290:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8009294:	6153      	str	r3, [r2, #20]
	LCD_CS_PORT->ODR |= LCD_CS_PIN;
 8009296:	4b1c      	ldr	r3, [pc, #112]	; (8009308 <ILI9341_Draw_Pixel+0x26c>)
 8009298:	695b      	ldr	r3, [r3, #20]
 800929a:	4a1b      	ldr	r2, [pc, #108]	; (8009308 <ILI9341_Draw_Pixel+0x26c>)
 800929c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80092a0:	6153      	str	r3, [r2, #20]

	//COLOUR
	LCD_CS_PORT->ODR &= ~(LCD_CS_PIN);
 80092a2:	4b19      	ldr	r3, [pc, #100]	; (8009308 <ILI9341_Draw_Pixel+0x26c>)
 80092a4:	695b      	ldr	r3, [r3, #20]
 80092a6:	4a18      	ldr	r2, [pc, #96]	; (8009308 <ILI9341_Draw_Pixel+0x26c>)
 80092a8:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80092ac:	6153      	str	r3, [r2, #20]
	unsigned char Temp_Buffer2[2] = {colour>>8, colour};
 80092ae:	887b      	ldrh	r3, [r7, #2]
 80092b0:	0a1b      	lsrs	r3, r3, #8
 80092b2:	b29b      	uxth	r3, r3
 80092b4:	b2db      	uxtb	r3, r3
 80092b6:	733b      	strb	r3, [r7, #12]
 80092b8:	887b      	ldrh	r3, [r7, #2]
 80092ba:	b2db      	uxtb	r3, r3
 80092bc:	737b      	strb	r3, [r7, #13]

	//HAL_SPI_Transmit(HSPI_INSTANCE, Temp_Buffer2, 2, 1 );
	_SPI_SendByteMultiByte(Temp_Buffer2, 4, 0, 9);
 80092be:	f107 000c 	add.w	r0, r7, #12
 80092c2:	2309      	movs	r3, #9
 80092c4:	2200      	movs	r2, #0
 80092c6:	2104      	movs	r1, #4
 80092c8:	f000 fa4c 	bl	8009764 <_SPI_SendByteMultiByte>

	// Additional SPI CS "low" hold
	for(int s=0; s < SPI_DELAY_HOLD; s++)
 80092cc:	2300      	movs	r3, #0
 80092ce:	61bb      	str	r3, [r7, #24]
 80092d0:	e008      	b.n	80092e4 <ILI9341_Draw_Pixel+0x248>
		LCD_CS_PORT->ODR &= ~(LCD_CS_PIN);
 80092d2:	4b0d      	ldr	r3, [pc, #52]	; (8009308 <ILI9341_Draw_Pixel+0x26c>)
 80092d4:	695b      	ldr	r3, [r3, #20]
 80092d6:	4a0c      	ldr	r2, [pc, #48]	; (8009308 <ILI9341_Draw_Pixel+0x26c>)
 80092d8:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80092dc:	6153      	str	r3, [r2, #20]
	for(int s=0; s < SPI_DELAY_HOLD; s++)
 80092de:	69bb      	ldr	r3, [r7, #24]
 80092e0:	3301      	adds	r3, #1
 80092e2:	61bb      	str	r3, [r7, #24]
 80092e4:	69bb      	ldr	r3, [r7, #24]
 80092e6:	2b02      	cmp	r3, #2
 80092e8:	ddf3      	ble.n	80092d2 <ILI9341_Draw_Pixel+0x236>

	LCD_CS_PORT->ODR |= LCD_CS_PIN;
 80092ea:	4b07      	ldr	r3, [pc, #28]	; (8009308 <ILI9341_Draw_Pixel+0x26c>)
 80092ec:	695b      	ldr	r3, [r3, #20]
 80092ee:	4a06      	ldr	r2, [pc, #24]	; (8009308 <ILI9341_Draw_Pixel+0x26c>)
 80092f0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80092f4:	6153      	str	r3, [r2, #20]
 80092f6:	e000      	b.n	80092fa <ILI9341_Draw_Pixel+0x25e>
	if((x >= LCD_WIDTH) || (y >= LCD_HEIGHT)) return;	//OUT OF BOUNDS!
 80092f8:	bf00      	nop


}
 80092fa:	3730      	adds	r7, #48	; 0x30
 80092fc:	46bd      	mov	sp, r7
 80092fe:	bd80      	pop	{r7, pc}
 8009300:	2000001e 	.word	0x2000001e
 8009304:	2000001c 	.word	0x2000001c
 8009308:	48000400 	.word	0x48000400

0800930c <ILI9341_Draw_Rectangle>:
 *
 *
 */

void ILI9341_Draw_Rectangle(uint16_t xpos, uint16_t ypos, uint16_t width, uint16_t height, uint16_t colour, CHUNK_Type chunk_type)
{
 800930c:	b590      	push	{r4, r7, lr}
 800930e:	b087      	sub	sp, #28
 8009310:	af02      	add	r7, sp, #8
 8009312:	4604      	mov	r4, r0
 8009314:	4608      	mov	r0, r1
 8009316:	4611      	mov	r1, r2
 8009318:	461a      	mov	r2, r3
 800931a:	4623      	mov	r3, r4
 800931c:	80fb      	strh	r3, [r7, #6]
 800931e:	4603      	mov	r3, r0
 8009320:	80bb      	strh	r3, [r7, #4]
 8009322:	460b      	mov	r3, r1
 8009324:	807b      	strh	r3, [r7, #2]
 8009326:	4613      	mov	r3, r2
 8009328:	803b      	strh	r3, [r7, #0]
	if((xpos >=LCD_WIDTH) || (ypos >=LCD_HEIGHT)) return;
 800932a:	4b39      	ldr	r3, [pc, #228]	; (8009410 <ILI9341_Draw_Rectangle+0x104>)
 800932c:	881b      	ldrh	r3, [r3, #0]
 800932e:	b29b      	uxth	r3, r3
 8009330:	88fa      	ldrh	r2, [r7, #6]
 8009332:	429a      	cmp	r2, r3
 8009334:	d268      	bcs.n	8009408 <ILI9341_Draw_Rectangle+0xfc>
 8009336:	4b37      	ldr	r3, [pc, #220]	; (8009414 <ILI9341_Draw_Rectangle+0x108>)
 8009338:	881b      	ldrh	r3, [r3, #0]
 800933a:	b29b      	uxth	r3, r3
 800933c:	88ba      	ldrh	r2, [r7, #4]
 800933e:	429a      	cmp	r2, r3
 8009340:	d262      	bcs.n	8009408 <ILI9341_Draw_Rectangle+0xfc>
	if((xpos+width-1)>=LCD_WIDTH)
 8009342:	88fa      	ldrh	r2, [r7, #6]
 8009344:	887b      	ldrh	r3, [r7, #2]
 8009346:	4413      	add	r3, r2
 8009348:	3b01      	subs	r3, #1
 800934a:	4a31      	ldr	r2, [pc, #196]	; (8009410 <ILI9341_Draw_Rectangle+0x104>)
 800934c:	8812      	ldrh	r2, [r2, #0]
 800934e:	b292      	uxth	r2, r2
 8009350:	4293      	cmp	r3, r2
 8009352:	db05      	blt.n	8009360 <ILI9341_Draw_Rectangle+0x54>
		{
			width=LCD_WIDTH-xpos;
 8009354:	4b2e      	ldr	r3, [pc, #184]	; (8009410 <ILI9341_Draw_Rectangle+0x104>)
 8009356:	881b      	ldrh	r3, [r3, #0]
 8009358:	b29a      	uxth	r2, r3
 800935a:	88fb      	ldrh	r3, [r7, #6]
 800935c:	1ad3      	subs	r3, r2, r3
 800935e:	807b      	strh	r3, [r7, #2]
		}
	if((ypos+height-1)>=LCD_HEIGHT)
 8009360:	88ba      	ldrh	r2, [r7, #4]
 8009362:	883b      	ldrh	r3, [r7, #0]
 8009364:	4413      	add	r3, r2
 8009366:	3b01      	subs	r3, #1
 8009368:	4a2a      	ldr	r2, [pc, #168]	; (8009414 <ILI9341_Draw_Rectangle+0x108>)
 800936a:	8812      	ldrh	r2, [r2, #0]
 800936c:	b292      	uxth	r2, r2
 800936e:	4293      	cmp	r3, r2
 8009370:	db05      	blt.n	800937e <ILI9341_Draw_Rectangle+0x72>
		{
			height=LCD_HEIGHT-ypos;
 8009372:	4b28      	ldr	r3, [pc, #160]	; (8009414 <ILI9341_Draw_Rectangle+0x108>)
 8009374:	881b      	ldrh	r3, [r3, #0]
 8009376:	b29a      	uxth	r2, r3
 8009378:	88bb      	ldrh	r3, [r7, #4]
 800937a:	1ad3      	subs	r3, r2, r3
 800937c:	803b      	strh	r3, [r7, #0]
		}
	ILI9341_Set_Frame(xpos,
						ypos,
						(xpos + width) - 1,
 800937e:	88fa      	ldrh	r2, [r7, #6]
 8009380:	887b      	ldrh	r3, [r7, #2]
 8009382:	4413      	add	r3, r2
 8009384:	b29b      	uxth	r3, r3
	ILI9341_Set_Frame(xpos,
 8009386:	3b01      	subs	r3, #1
 8009388:	b29c      	uxth	r4, r3
						(ypos + height) - 1);
 800938a:	88ba      	ldrh	r2, [r7, #4]
 800938c:	883b      	ldrh	r3, [r7, #0]
 800938e:	4413      	add	r3, r2
 8009390:	b29b      	uxth	r3, r3
	ILI9341_Set_Frame(xpos,
 8009392:	3b01      	subs	r3, #1
 8009394:	b29b      	uxth	r3, r3
 8009396:	88b9      	ldrh	r1, [r7, #4]
 8009398:	88f8      	ldrh	r0, [r7, #6]
 800939a:	4622      	mov	r2, r4
 800939c:	f7ff fe08 	bl	8008fb0 <ILI9341_Set_Frame>
	// if odd numbered rect area is requested, we round down to nearest even number
	// to keep _LCD_Write_Frame() happy.

	// Note, truncated pixel will be needed at function end.

	uint16_t size = height*width;
 80093a0:	883a      	ldrh	r2, [r7, #0]
 80093a2:	887b      	ldrh	r3, [r7, #2]
 80093a4:	fb12 f303 	smulbb	r3, r2, r3
 80093a8:	81fb      	strh	r3, [r7, #14]
	uint8_t truncated = 0;
 80093aa:	2300      	movs	r3, #0
 80093ac:	737b      	strb	r3, [r7, #13]

	if((size & 1) && (size > 1))		// don't round down to zero!
 80093ae:	89fb      	ldrh	r3, [r7, #14]
 80093b0:	f003 0301 	and.w	r3, r3, #1
 80093b4:	2b00      	cmp	r3, #0
 80093b6:	d009      	beq.n	80093cc <ILI9341_Draw_Rectangle+0xc0>
 80093b8:	89fb      	ldrh	r3, [r7, #14]
 80093ba:	2b01      	cmp	r3, #1
 80093bc:	d906      	bls.n	80093cc <ILI9341_Draw_Rectangle+0xc0>
	{
		truncated = 1;
 80093be:	2301      	movs	r3, #1
 80093c0:	737b      	strb	r3, [r7, #13]
	 	size = ((size >> 1) * 2);
 80093c2:	89fb      	ldrh	r3, [r7, #14]
 80093c4:	085b      	lsrs	r3, r3, #1
 80093c6:	b29b      	uxth	r3, r3
 80093c8:	005b      	lsls	r3, r3, #1
 80093ca:	81fb      	strh	r3, [r7, #14]
	}

	_LCD_Write_Frame(	xpos,
 80093cc:	89fc      	ldrh	r4, [r7, #14]
 80093ce:	8c3a      	ldrh	r2, [r7, #32]
 80093d0:	88b9      	ldrh	r1, [r7, #4]
 80093d2:	88f8      	ldrh	r0, [r7, #6]
 80093d4:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 80093d8:	9300      	str	r3, [sp, #0]
 80093da:	4623      	mov	r3, r4
 80093dc:	f000 f898 	bl	8009510 <_LCD_Write_Frame>
								colour,
								size,
								chunk_type);

	// add the truncated pixel now
	if(truncated)
 80093e0:	7b7b      	ldrb	r3, [r7, #13]
 80093e2:	2b00      	cmp	r3, #0
 80093e4:	d011      	beq.n	800940a <ILI9341_Draw_Rectangle+0xfe>
	{
		ILI9341_Draw_Pixel(	(xpos + width) - 1,
 80093e6:	88fa      	ldrh	r2, [r7, #6]
 80093e8:	887b      	ldrh	r3, [r7, #2]
 80093ea:	4413      	add	r3, r2
 80093ec:	b29b      	uxth	r3, r3
 80093ee:	3b01      	subs	r3, #1
 80093f0:	b298      	uxth	r0, r3
							(ypos + height) - 1,
 80093f2:	88ba      	ldrh	r2, [r7, #4]
 80093f4:	883b      	ldrh	r3, [r7, #0]
 80093f6:	4413      	add	r3, r2
 80093f8:	b29b      	uxth	r3, r3
		ILI9341_Draw_Pixel(	(xpos + width) - 1,
 80093fa:	3b01      	subs	r3, #1
 80093fc:	b29b      	uxth	r3, r3
 80093fe:	8c3a      	ldrh	r2, [r7, #32]
 8009400:	4619      	mov	r1, r3
 8009402:	f7ff fe4b 	bl	800909c <ILI9341_Draw_Pixel>
 8009406:	e000      	b.n	800940a <ILI9341_Draw_Rectangle+0xfe>
	if((xpos >=LCD_WIDTH) || (ypos >=LCD_HEIGHT)) return;
 8009408:	bf00      	nop
							colour);
	}
}
 800940a:	3714      	adds	r7, #20
 800940c:	46bd      	mov	sp, r7
 800940e:	bd90      	pop	{r4, r7, pc}
 8009410:	2000001e 	.word	0x2000001e
 8009414:	2000001c 	.word	0x2000001c

08009418 <ILI9341_Set_Rotation>:
 *
 * 	Set LCD orientation
 *
 */
void ILI9341_Set_Rotation(uint8_t rotation)
{
 8009418:	b580      	push	{r7, lr}
 800941a:	b084      	sub	sp, #16
 800941c:	af00      	add	r7, sp, #0
 800941e:	4603      	mov	r3, r0
 8009420:	71fb      	strb	r3, [r7, #7]

	uint8_t screen_rotation = rotation;
 8009422:	79fb      	ldrb	r3, [r7, #7]
 8009424:	73fb      	strb	r3, [r7, #15]

	_LCD_SendCommand(0x36);
 8009426:	2036      	movs	r0, #54	; 0x36
 8009428:	f000 f922 	bl	8009670 <_LCD_SendCommand>
	//HAL_Delay(1);

	switch(screen_rotation)
 800942c:	7bfb      	ldrb	r3, [r7, #15]
 800942e:	2b03      	cmp	r3, #3
 8009430:	d836      	bhi.n	80094a0 <ILI9341_Set_Rotation+0x88>
 8009432:	a201      	add	r2, pc, #4	; (adr r2, 8009438 <ILI9341_Set_Rotation+0x20>)
 8009434:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009438:	08009449 	.word	0x08009449
 800943c:	0800945f 	.word	0x0800945f
 8009440:	08009475 	.word	0x08009475
 8009444:	0800948b 	.word	0x0800948b
	{
		case SCREEN_VERTICAL_1:
			_LCD_SendData(0x40|0x08);
 8009448:	2048      	movs	r0, #72	; 0x48
 800944a:	f000 f943 	bl	80096d4 <_LCD_SendData>
			LCD_WIDTH = 240;
 800944e:	4b17      	ldr	r3, [pc, #92]	; (80094ac <ILI9341_Set_Rotation+0x94>)
 8009450:	22f0      	movs	r2, #240	; 0xf0
 8009452:	801a      	strh	r2, [r3, #0]
			LCD_HEIGHT = 320;
 8009454:	4b16      	ldr	r3, [pc, #88]	; (80094b0 <ILI9341_Set_Rotation+0x98>)
 8009456:	f44f 72a0 	mov.w	r2, #320	; 0x140
 800945a:	801a      	strh	r2, [r3, #0]
			break;
 800945c:	e021      	b.n	80094a2 <ILI9341_Set_Rotation+0x8a>
		case SCREEN_HORIZONTAL_1:
			_LCD_SendData(0x20|0x08);
 800945e:	2028      	movs	r0, #40	; 0x28
 8009460:	f000 f938 	bl	80096d4 <_LCD_SendData>
			LCD_WIDTH  = 320;
 8009464:	4b11      	ldr	r3, [pc, #68]	; (80094ac <ILI9341_Set_Rotation+0x94>)
 8009466:	f44f 72a0 	mov.w	r2, #320	; 0x140
 800946a:	801a      	strh	r2, [r3, #0]
			LCD_HEIGHT = 240;
 800946c:	4b10      	ldr	r3, [pc, #64]	; (80094b0 <ILI9341_Set_Rotation+0x98>)
 800946e:	22f0      	movs	r2, #240	; 0xf0
 8009470:	801a      	strh	r2, [r3, #0]
			break;
 8009472:	e016      	b.n	80094a2 <ILI9341_Set_Rotation+0x8a>
		case SCREEN_VERTICAL_2:
			_LCD_SendData(0x80|0x08);
 8009474:	2088      	movs	r0, #136	; 0x88
 8009476:	f000 f92d 	bl	80096d4 <_LCD_SendData>
			LCD_WIDTH  = 240;
 800947a:	4b0c      	ldr	r3, [pc, #48]	; (80094ac <ILI9341_Set_Rotation+0x94>)
 800947c:	22f0      	movs	r2, #240	; 0xf0
 800947e:	801a      	strh	r2, [r3, #0]
			LCD_HEIGHT = 320;
 8009480:	4b0b      	ldr	r3, [pc, #44]	; (80094b0 <ILI9341_Set_Rotation+0x98>)
 8009482:	f44f 72a0 	mov.w	r2, #320	; 0x140
 8009486:	801a      	strh	r2, [r3, #0]
			break;
 8009488:	e00b      	b.n	80094a2 <ILI9341_Set_Rotation+0x8a>
		case SCREEN_HORIZONTAL_2:
			_LCD_SendData(0x40|0x80|0x20|0x08);
 800948a:	20e8      	movs	r0, #232	; 0xe8
 800948c:	f000 f922 	bl	80096d4 <_LCD_SendData>
			LCD_WIDTH  = 320;
 8009490:	4b06      	ldr	r3, [pc, #24]	; (80094ac <ILI9341_Set_Rotation+0x94>)
 8009492:	f44f 72a0 	mov.w	r2, #320	; 0x140
 8009496:	801a      	strh	r2, [r3, #0]
			LCD_HEIGHT = 240;
 8009498:	4b05      	ldr	r3, [pc, #20]	; (80094b0 <ILI9341_Set_Rotation+0x98>)
 800949a:	22f0      	movs	r2, #240	; 0xf0
 800949c:	801a      	strh	r2, [r3, #0]
			break;
 800949e:	e000      	b.n	80094a2 <ILI9341_Set_Rotation+0x8a>
		default:
			//EXIT IF SCREEN ROTATION NOT VALID!
			break;
 80094a0:	bf00      	nop
	}
}
 80094a2:	bf00      	nop
 80094a4:	3710      	adds	r7, #16
 80094a6:	46bd      	mov	sp, r7
 80094a8:	bd80      	pop	{r7, pc}
 80094aa:	bf00      	nop
 80094ac:	2000001e 	.word	0x2000001e
 80094b0:	2000001c 	.word	0x2000001c

080094b4 <_LCD_Enable>:
 *
 * Enable LCD display
 *
 */
void _LCD_Enable()
{
 80094b4:	b480      	push	{r7}
 80094b6:	af00      	add	r7, sp, #0
	LCD_RST_PORT->ODR |= LCD_RST_PIN;
 80094b8:	4b05      	ldr	r3, [pc, #20]	; (80094d0 <_LCD_Enable+0x1c>)
 80094ba:	695b      	ldr	r3, [r3, #20]
 80094bc:	4a04      	ldr	r2, [pc, #16]	; (80094d0 <_LCD_Enable+0x1c>)
 80094be:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80094c2:	6153      	str	r3, [r2, #20]
}
 80094c4:	bf00      	nop
 80094c6:	46bd      	mov	sp, r7
 80094c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80094cc:	4770      	bx	lr
 80094ce:	bf00      	nop
 80094d0:	48000400 	.word	0x48000400

080094d4 <_LCD_Reset>:
 *
 * 	Reset LCD
 *
 */
void _LCD_Reset()
{
 80094d4:	b580      	push	{r7, lr}
 80094d6:	af00      	add	r7, sp, #0
	LCD_RST_PORT->ODR &= ~(LCD_RST_PIN);
 80094d8:	4b0c      	ldr	r3, [pc, #48]	; (800950c <_LCD_Reset+0x38>)
 80094da:	695b      	ldr	r3, [r3, #20]
 80094dc:	4a0b      	ldr	r2, [pc, #44]	; (800950c <_LCD_Reset+0x38>)
 80094de:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80094e2:	6153      	str	r3, [r2, #20]
	HAL_Delay(200);
 80094e4:	20c8      	movs	r0, #200	; 0xc8
 80094e6:	f7f9 fe47 	bl	8003178 <HAL_Delay>
	LCD_CS_PORT->ODR &= ~(LCD_CS_PIN);
 80094ea:	4b08      	ldr	r3, [pc, #32]	; (800950c <_LCD_Reset+0x38>)
 80094ec:	695b      	ldr	r3, [r3, #20]
 80094ee:	4a07      	ldr	r2, [pc, #28]	; (800950c <_LCD_Reset+0x38>)
 80094f0:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80094f4:	6153      	str	r3, [r2, #20]
	HAL_Delay(200);
 80094f6:	20c8      	movs	r0, #200	; 0xc8
 80094f8:	f7f9 fe3e 	bl	8003178 <HAL_Delay>
	LCD_RST_PORT->ODR |= LCD_RST_PIN;
 80094fc:	4b03      	ldr	r3, [pc, #12]	; (800950c <_LCD_Reset+0x38>)
 80094fe:	695b      	ldr	r3, [r3, #20]
 8009500:	4a02      	ldr	r2, [pc, #8]	; (800950c <_LCD_Reset+0x38>)
 8009502:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8009506:	6153      	str	r3, [r2, #20]
}
 8009508:	bf00      	nop
 800950a:	bd80      	pop	{r7, pc}
 800950c:	48000400 	.word	0x48000400

08009510 <_LCD_Write_Frame>:
 *
 *	entire data sent to this function is a CHUNK < BURST_MAX_SIZE
 *	each CHUNK is broken down into smaller BLOCKS
 */
void _LCD_Write_Frame(uint16_t chunk_xpos, uint16_t chunk_ypos, uint16_t colour, uint32_t chunk_size, CHUNK_Type chunk_type)
{
 8009510:	b5b0      	push	{r4, r5, r7, lr}
 8009512:	b08e      	sub	sp, #56	; 0x38
 8009514:	af00      	add	r7, sp, #0
 8009516:	607b      	str	r3, [r7, #4]
 8009518:	4603      	mov	r3, r0
 800951a:	81fb      	strh	r3, [r7, #14]
 800951c:	460b      	mov	r3, r1
 800951e:	81bb      	strh	r3, [r7, #12]
 8009520:	4613      	mov	r3, r2
 8009522:	817b      	strh	r3, [r7, #10]
 8009524:	466b      	mov	r3, sp
 8009526:	461d      	mov	r5, r3

	uint32_t buffer_size = 0;
 8009528:	2300      	movs	r3, #0
 800952a:	62fb      	str	r3, [r7, #44]	; 0x2c
	if((chunk_size*2) < BURST_MAX_SIZE)
 800952c:	687b      	ldr	r3, [r7, #4]
 800952e:	005b      	lsls	r3, r3, #1
 8009530:	4a4d      	ldr	r2, [pc, #308]	; (8009668 <_LCD_Write_Frame+0x158>)
 8009532:	8812      	ldrh	r2, [r2, #0]
 8009534:	4293      	cmp	r3, r2
 8009536:	d202      	bcs.n	800953e <_LCD_Write_Frame+0x2e>
	{
		buffer_size = chunk_size;
 8009538:	687b      	ldr	r3, [r7, #4]
 800953a:	62fb      	str	r3, [r7, #44]	; 0x2c
 800953c:	e002      	b.n	8009544 <_LCD_Write_Frame+0x34>
	}
	else
	{
		buffer_size = BURST_MAX_SIZE;
 800953e:	4b4a      	ldr	r3, [pc, #296]	; (8009668 <_LCD_Write_Frame+0x158>)
 8009540:	881b      	ldrh	r3, [r3, #0]
 8009542:	62fb      	str	r3, [r7, #44]	; 0x2c
	}

	unsigned char chifted = 	colour>>8;;
 8009544:	897b      	ldrh	r3, [r7, #10]
 8009546:	0a1b      	lsrs	r3, r3, #8
 8009548:	b29b      	uxth	r3, r3
 800954a:	77fb      	strb	r3, [r7, #31]
	unsigned char burst_buffer[buffer_size];
 800954c:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800954e:	4603      	mov	r3, r0
 8009550:	3b01      	subs	r3, #1
 8009552:	61bb      	str	r3, [r7, #24]
 8009554:	4601      	mov	r1, r0
 8009556:	f04f 0200 	mov.w	r2, #0
 800955a:	f04f 0300 	mov.w	r3, #0
 800955e:	f04f 0400 	mov.w	r4, #0
 8009562:	00d4      	lsls	r4, r2, #3
 8009564:	ea44 7451 	orr.w	r4, r4, r1, lsr #29
 8009568:	00cb      	lsls	r3, r1, #3
 800956a:	4601      	mov	r1, r0
 800956c:	f04f 0200 	mov.w	r2, #0
 8009570:	f04f 0300 	mov.w	r3, #0
 8009574:	f04f 0400 	mov.w	r4, #0
 8009578:	00d4      	lsls	r4, r2, #3
 800957a:	ea44 7451 	orr.w	r4, r4, r1, lsr #29
 800957e:	00cb      	lsls	r3, r1, #3
 8009580:	1dc3      	adds	r3, r0, #7
 8009582:	08db      	lsrs	r3, r3, #3
 8009584:	00db      	lsls	r3, r3, #3
 8009586:	ebad 0d03 	sub.w	sp, sp, r3
 800958a:	466b      	mov	r3, sp
 800958c:	3300      	adds	r3, #0
 800958e:	617b      	str	r3, [r7, #20]
	for(uint32_t j = 0; j < buffer_size; j+=2)
 8009590:	2300      	movs	r3, #0
 8009592:	633b      	str	r3, [r7, #48]	; 0x30
 8009594:	e00d      	b.n	80095b2 <_LCD_Write_Frame+0xa2>
	{
			burst_buffer[j] = 	chifted;
 8009596:	697a      	ldr	r2, [r7, #20]
 8009598:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800959a:	4413      	add	r3, r2
 800959c:	7ffa      	ldrb	r2, [r7, #31]
 800959e:	701a      	strb	r2, [r3, #0]
			burst_buffer[j+1] = colour;
 80095a0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80095a2:	3301      	adds	r3, #1
 80095a4:	897a      	ldrh	r2, [r7, #10]
 80095a6:	b2d1      	uxtb	r1, r2
 80095a8:	697a      	ldr	r2, [r7, #20]
 80095aa:	54d1      	strb	r1, [r2, r3]
	for(uint32_t j = 0; j < buffer_size; j+=2)
 80095ac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80095ae:	3302      	adds	r3, #2
 80095b0:	633b      	str	r3, [r7, #48]	; 0x30
 80095b2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80095b4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80095b6:	429a      	cmp	r2, r3
 80095b8:	d3ed      	bcc.n	8009596 <_LCD_Write_Frame+0x86>
	}
	
	uint32_t Sending_size = chunk_size*2;
 80095ba:	687b      	ldr	r3, [r7, #4]
 80095bc:	005b      	lsls	r3, r3, #1
 80095be:	613b      	str	r3, [r7, #16]

	// make sure we don't divide by size=0
	uint32_t Sending_in_Block = 1;
 80095c0:	2301      	movs	r3, #1
 80095c2:	637b      	str	r3, [r7, #52]	; 0x34
	uint32_t Remainder_from_block = 0;
 80095c4:	2300      	movs	r3, #0
 80095c6:	62bb      	str	r3, [r7, #40]	; 0x28
	if(chunk_size > 0)
 80095c8:	687b      	ldr	r3, [r7, #4]
 80095ca:	2b00      	cmp	r3, #0
 80095cc:	d00d      	beq.n	80095ea <_LCD_Write_Frame+0xda>
	{
			Sending_in_Block 		= Sending_size/buffer_size;
 80095ce:	693a      	ldr	r2, [r7, #16]
 80095d0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80095d2:	fbb2 f3f3 	udiv	r3, r2, r3
 80095d6:	637b      	str	r3, [r7, #52]	; 0x34
			Remainder_from_block 	= Sending_size%buffer_size;
 80095d8:	693b      	ldr	r3, [r7, #16]
 80095da:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80095dc:	fbb3 f2f2 	udiv	r2, r3, r2
 80095e0:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80095e2:	fb01 f202 	mul.w	r2, r1, r2
 80095e6:	1a9b      	subs	r3, r3, r2
 80095e8:	62bb      	str	r3, [r7, #40]	; 0x28
	}

	// send blocks
	LCD_DC_PORT->ODR |= LCD_DC_PIN;
 80095ea:	4b20      	ldr	r3, [pc, #128]	; (800966c <_LCD_Write_Frame+0x15c>)
 80095ec:	695b      	ldr	r3, [r3, #20]
 80095ee:	4a1f      	ldr	r2, [pc, #124]	; (800966c <_LCD_Write_Frame+0x15c>)
 80095f0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80095f4:	6153      	str	r3, [r2, #20]
	LCD_CS_PORT->ODR &= ~(LCD_CS_PIN);
 80095f6:	4b1d      	ldr	r3, [pc, #116]	; (800966c <_LCD_Write_Frame+0x15c>)
 80095f8:	695b      	ldr	r3, [r3, #20]
 80095fa:	4a1c      	ldr	r2, [pc, #112]	; (800966c <_LCD_Write_Frame+0x15c>)
 80095fc:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8009600:	6153      	str	r3, [r2, #20]

	if(Sending_in_Block != 0)
 8009602:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009604:	2b00      	cmp	r3, #0
 8009606:	d00f      	beq.n	8009628 <_LCD_Write_Frame+0x118>
	{
		for(uint32_t j = 0; j < (Sending_in_Block); j++)
 8009608:	2300      	movs	r3, #0
 800960a:	627b      	str	r3, [r7, #36]	; 0x24
 800960c:	e008      	b.n	8009620 <_LCD_Write_Frame+0x110>
		{
			_SPI_SendByteMultiByte(burst_buffer, buffer_size, 0, 9);
 800960e:	6978      	ldr	r0, [r7, #20]
 8009610:	2309      	movs	r3, #9
 8009612:	2200      	movs	r2, #0
 8009614:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8009616:	f000 f8a5 	bl	8009764 <_SPI_SendByteMultiByte>
		for(uint32_t j = 0; j < (Sending_in_Block); j++)
 800961a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800961c:	3301      	adds	r3, #1
 800961e:	627b      	str	r3, [r7, #36]	; 0x24
 8009620:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009622:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009624:	429a      	cmp	r2, r3
 8009626:	d3f2      	bcc.n	800960e <_LCD_Write_Frame+0xfe>
		}
	}

	_SPI_SendByteMultiByte(burst_buffer, Remainder_from_block, 0, 9);
 8009628:	6978      	ldr	r0, [r7, #20]
 800962a:	2309      	movs	r3, #9
 800962c:	2200      	movs	r2, #0
 800962e:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8009630:	f000 f898 	bl	8009764 <_SPI_SendByteMultiByte>


	// Additional SPI CS "low" hold
	for(int x=0; x < SPI_DELAY_HOLD; x++)
 8009634:	2300      	movs	r3, #0
 8009636:	623b      	str	r3, [r7, #32]
 8009638:	e008      	b.n	800964c <_LCD_Write_Frame+0x13c>
		LCD_CS_PORT->ODR &= ~(LCD_CS_PIN);
 800963a:	4b0c      	ldr	r3, [pc, #48]	; (800966c <_LCD_Write_Frame+0x15c>)
 800963c:	695b      	ldr	r3, [r3, #20]
 800963e:	4a0b      	ldr	r2, [pc, #44]	; (800966c <_LCD_Write_Frame+0x15c>)
 8009640:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8009644:	6153      	str	r3, [r2, #20]
	for(int x=0; x < SPI_DELAY_HOLD; x++)
 8009646:	6a3b      	ldr	r3, [r7, #32]
 8009648:	3301      	adds	r3, #1
 800964a:	623b      	str	r3, [r7, #32]
 800964c:	6a3b      	ldr	r3, [r7, #32]
 800964e:	2b02      	cmp	r3, #2
 8009650:	ddf3      	ble.n	800963a <_LCD_Write_Frame+0x12a>

	LCD_CS_PORT->ODR |= LCD_CS_PIN;
 8009652:	4b06      	ldr	r3, [pc, #24]	; (800966c <_LCD_Write_Frame+0x15c>)
 8009654:	695b      	ldr	r3, [r3, #20]
 8009656:	4a05      	ldr	r2, [pc, #20]	; (800966c <_LCD_Write_Frame+0x15c>)
 8009658:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800965c:	6153      	str	r3, [r2, #20]
 800965e:	46ad      	mov	sp, r5

}
 8009660:	bf00      	nop
 8009662:	3738      	adds	r7, #56	; 0x38
 8009664:	46bd      	mov	sp, r7
 8009666:	bdb0      	pop	{r4, r5, r7, pc}
 8009668:	20000020 	.word	0x20000020
 800966c:	48000400 	.word	0x48000400

08009670 <_LCD_SendCommand>:
 *
 * 	Send command to LCD
 *
 */
void _LCD_SendCommand(uint8_t command)
{
 8009670:	b580      	push	{r7, lr}
 8009672:	b084      	sub	sp, #16
 8009674:	af00      	add	r7, sp, #0
 8009676:	4603      	mov	r3, r0
 8009678:	71fb      	strb	r3, [r7, #7]
	LCD_CS_PORT->ODR &= ~(LCD_CS_PIN);
 800967a:	4b15      	ldr	r3, [pc, #84]	; (80096d0 <_LCD_SendCommand+0x60>)
 800967c:	695b      	ldr	r3, [r3, #20]
 800967e:	4a14      	ldr	r2, [pc, #80]	; (80096d0 <_LCD_SendCommand+0x60>)
 8009680:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8009684:	6153      	str	r3, [r2, #20]
	LCD_DC_PORT->ODR &= ~(LCD_DC_PIN);
 8009686:	4b12      	ldr	r3, [pc, #72]	; (80096d0 <_LCD_SendCommand+0x60>)
 8009688:	695b      	ldr	r3, [r3, #20]
 800968a:	4a11      	ldr	r2, [pc, #68]	; (80096d0 <_LCD_SendCommand+0x60>)
 800968c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8009690:	6153      	str	r3, [r2, #20]

	_SPI_SendByte(command, 0 , 0);
 8009692:	79fb      	ldrb	r3, [r7, #7]
 8009694:	2200      	movs	r2, #0
 8009696:	2100      	movs	r1, #0
 8009698:	4618      	mov	r0, r3
 800969a:	f000 f84d 	bl	8009738 <_SPI_SendByte>

	// Additional SPI CS "low" hold
	for(int x=0; x < SPI_DELAY_HOLD; x++)
 800969e:	2300      	movs	r3, #0
 80096a0:	60fb      	str	r3, [r7, #12]
 80096a2:	e008      	b.n	80096b6 <_LCD_SendCommand+0x46>
		LCD_CS_PORT->ODR &= ~(LCD_CS_PIN);
 80096a4:	4b0a      	ldr	r3, [pc, #40]	; (80096d0 <_LCD_SendCommand+0x60>)
 80096a6:	695b      	ldr	r3, [r3, #20]
 80096a8:	4a09      	ldr	r2, [pc, #36]	; (80096d0 <_LCD_SendCommand+0x60>)
 80096aa:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80096ae:	6153      	str	r3, [r2, #20]
	for(int x=0; x < SPI_DELAY_HOLD; x++)
 80096b0:	68fb      	ldr	r3, [r7, #12]
 80096b2:	3301      	adds	r3, #1
 80096b4:	60fb      	str	r3, [r7, #12]
 80096b6:	68fb      	ldr	r3, [r7, #12]
 80096b8:	2b02      	cmp	r3, #2
 80096ba:	ddf3      	ble.n	80096a4 <_LCD_SendCommand+0x34>

	LCD_CS_PORT->ODR |= LCD_CS_PIN;
 80096bc:	4b04      	ldr	r3, [pc, #16]	; (80096d0 <_LCD_SendCommand+0x60>)
 80096be:	695b      	ldr	r3, [r3, #20]
 80096c0:	4a03      	ldr	r2, [pc, #12]	; (80096d0 <_LCD_SendCommand+0x60>)
 80096c2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80096c6:	6153      	str	r3, [r2, #20]
}
 80096c8:	bf00      	nop
 80096ca:	3710      	adds	r7, #16
 80096cc:	46bd      	mov	sp, r7
 80096ce:	bd80      	pop	{r7, pc}
 80096d0:	48000400 	.word	0x48000400

080096d4 <_LCD_SendData>:
 *
 * 	Send Data to LCD
 *
 */
void _LCD_SendData(uint8_t data)
{
 80096d4:	b580      	push	{r7, lr}
 80096d6:	b084      	sub	sp, #16
 80096d8:	af00      	add	r7, sp, #0
 80096da:	4603      	mov	r3, r0
 80096dc:	71fb      	strb	r3, [r7, #7]
	LCD_DC_PORT->ODR |= LCD_DC_PIN;
 80096de:	4b15      	ldr	r3, [pc, #84]	; (8009734 <_LCD_SendData+0x60>)
 80096e0:	695b      	ldr	r3, [r3, #20]
 80096e2:	4a14      	ldr	r2, [pc, #80]	; (8009734 <_LCD_SendData+0x60>)
 80096e4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80096e8:	6153      	str	r3, [r2, #20]
	LCD_CS_PORT->ODR &= ~(LCD_CS_PIN);
 80096ea:	4b12      	ldr	r3, [pc, #72]	; (8009734 <_LCD_SendData+0x60>)
 80096ec:	695b      	ldr	r3, [r3, #20]
 80096ee:	4a11      	ldr	r2, [pc, #68]	; (8009734 <_LCD_SendData+0x60>)
 80096f0:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80096f4:	6153      	str	r3, [r2, #20]

	_SPI_SendByte(data, 0 , 0);
 80096f6:	79fb      	ldrb	r3, [r7, #7]
 80096f8:	2200      	movs	r2, #0
 80096fa:	2100      	movs	r1, #0
 80096fc:	4618      	mov	r0, r3
 80096fe:	f000 f81b 	bl	8009738 <_SPI_SendByte>

	// Additional SPI CS "low" hold
	for(int x=0; x < SPI_DELAY_HOLD; x++)
 8009702:	2300      	movs	r3, #0
 8009704:	60fb      	str	r3, [r7, #12]
 8009706:	e008      	b.n	800971a <_LCD_SendData+0x46>
		LCD_CS_PORT->ODR &= ~(LCD_CS_PIN);
 8009708:	4b0a      	ldr	r3, [pc, #40]	; (8009734 <_LCD_SendData+0x60>)
 800970a:	695b      	ldr	r3, [r3, #20]
 800970c:	4a09      	ldr	r2, [pc, #36]	; (8009734 <_LCD_SendData+0x60>)
 800970e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8009712:	6153      	str	r3, [r2, #20]
	for(int x=0; x < SPI_DELAY_HOLD; x++)
 8009714:	68fb      	ldr	r3, [r7, #12]
 8009716:	3301      	adds	r3, #1
 8009718:	60fb      	str	r3, [r7, #12]
 800971a:	68fb      	ldr	r3, [r7, #12]
 800971c:	2b02      	cmp	r3, #2
 800971e:	ddf3      	ble.n	8009708 <_LCD_SendData+0x34>

	LCD_CS_PORT->ODR &= ~(LCD_CS_PIN);
 8009720:	4b04      	ldr	r3, [pc, #16]	; (8009734 <_LCD_SendData+0x60>)
 8009722:	695b      	ldr	r3, [r3, #20]
 8009724:	4a03      	ldr	r2, [pc, #12]	; (8009734 <_LCD_SendData+0x60>)
 8009726:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800972a:	6153      	str	r3, [r2, #20]
}
 800972c:	bf00      	nop
 800972e:	3710      	adds	r7, #16
 8009730:	46bd      	mov	sp, r7
 8009732:	bd80      	pop	{r7, pc}
 8009734:	48000400 	.word	0x48000400

08009738 <_SPI_SendByte>:
 *
 * 	Send single byte over SPI using HAL or (optimised) direct-to-register
 *
 */
void _SPI_SendByte(unsigned char data_buffer, uint8_t pre_frame_delay, uint8_t post_frame_delay)
{
 8009738:	b580      	push	{r7, lr}
 800973a:	b082      	sub	sp, #8
 800973c:	af00      	add	r7, sp, #0
 800973e:	4603      	mov	r3, r0
 8009740:	71fb      	strb	r3, [r7, #7]
 8009742:	460b      	mov	r3, r1
 8009744:	71bb      	strb	r3, [r7, #6]
 8009746:	4613      	mov	r3, r2
 8009748:	717b      	strb	r3, [r7, #5]

#ifdef USE_HAL_SPI
	HAL_SPI_Transmit(HSPI_INSTANCE, &data_buffer, 1, 1);
 800974a:	1df9      	adds	r1, r7, #7
 800974c:	2301      	movs	r3, #1
 800974e:	2201      	movs	r2, #1
 8009750:	4803      	ldr	r0, [pc, #12]	; (8009760 <_SPI_SendByte+0x28>)
 8009752:	f7fd fa9f 	bl	8006c94 <HAL_SPI_Transmit>
   	for(int d = 0; d < post_frame_delay ; d++)
   		asm("nop");

#endif

}
 8009756:	bf00      	nop
 8009758:	3708      	adds	r7, #8
 800975a:	46bd      	mov	sp, r7
 800975c:	bd80      	pop	{r7, pc}
 800975e:	bf00      	nop
 8009760:	200012e8 	.word	0x200012e8

08009764 <_SPI_SendByteMultiByte>:
 *
 * 	Send multiple bytes over SPI using HAL or (optimised) direct-to-register
 *
 */
void _SPI_SendByteMultiByte(unsigned char *data_buffer, uint32_t buffer_size, uint8_t pre_frame_delay, uint8_t post_frame_delay)
{
 8009764:	b580      	push	{r7, lr}
 8009766:	b084      	sub	sp, #16
 8009768:	af00      	add	r7, sp, #0
 800976a:	60f8      	str	r0, [r7, #12]
 800976c:	60b9      	str	r1, [r7, #8]
 800976e:	4611      	mov	r1, r2
 8009770:	461a      	mov	r2, r3
 8009772:	460b      	mov	r3, r1
 8009774:	71fb      	strb	r3, [r7, #7]
 8009776:	4613      	mov	r3, r2
 8009778:	71bb      	strb	r3, [r7, #6]

#ifdef USE_HAL_SPI
	HAL_SPI_Transmit(HSPI_INSTANCE, (unsigned char *)data_buffer, buffer_size, 2 );
 800977a:	68bb      	ldr	r3, [r7, #8]
 800977c:	b29a      	uxth	r2, r3
 800977e:	2302      	movs	r3, #2
 8009780:	68f9      	ldr	r1, [r7, #12]
 8009782:	4803      	ldr	r0, [pc, #12]	; (8009790 <_SPI_SendByteMultiByte+0x2c>)
 8009784:	f7fd fa86 	bl	8006c94 <HAL_SPI_Transmit>
   	for(int d = 0; d < post_frame_delay ; d++)
   		asm("nop");

#endif

}
 8009788:	bf00      	nop
 800978a:	3710      	adds	r7, #16
 800978c:	46bd      	mov	sp, r7
 800978e:	bd80      	pop	{r7, pc}
 8009790:	200012e8 	.word	0x200012e8

08009794 <__errno>:
 8009794:	4b01      	ldr	r3, [pc, #4]	; (800979c <__errno+0x8>)
 8009796:	6818      	ldr	r0, [r3, #0]
 8009798:	4770      	bx	lr
 800979a:	bf00      	nop
 800979c:	20001064 	.word	0x20001064

080097a0 <__libc_init_array>:
 80097a0:	b570      	push	{r4, r5, r6, lr}
 80097a2:	4e0d      	ldr	r6, [pc, #52]	; (80097d8 <__libc_init_array+0x38>)
 80097a4:	4c0d      	ldr	r4, [pc, #52]	; (80097dc <__libc_init_array+0x3c>)
 80097a6:	1ba4      	subs	r4, r4, r6
 80097a8:	10a4      	asrs	r4, r4, #2
 80097aa:	2500      	movs	r5, #0
 80097ac:	42a5      	cmp	r5, r4
 80097ae:	d109      	bne.n	80097c4 <__libc_init_array+0x24>
 80097b0:	4e0b      	ldr	r6, [pc, #44]	; (80097e0 <__libc_init_array+0x40>)
 80097b2:	4c0c      	ldr	r4, [pc, #48]	; (80097e4 <__libc_init_array+0x44>)
 80097b4:	f000 fff8 	bl	800a7a8 <_init>
 80097b8:	1ba4      	subs	r4, r4, r6
 80097ba:	10a4      	asrs	r4, r4, #2
 80097bc:	2500      	movs	r5, #0
 80097be:	42a5      	cmp	r5, r4
 80097c0:	d105      	bne.n	80097ce <__libc_init_array+0x2e>
 80097c2:	bd70      	pop	{r4, r5, r6, pc}
 80097c4:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80097c8:	4798      	blx	r3
 80097ca:	3501      	adds	r5, #1
 80097cc:	e7ee      	b.n	80097ac <__libc_init_array+0xc>
 80097ce:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80097d2:	4798      	blx	r3
 80097d4:	3501      	adds	r5, #1
 80097d6:	e7f2      	b.n	80097be <__libc_init_array+0x1e>
 80097d8:	0800ad30 	.word	0x0800ad30
 80097dc:	0800ad30 	.word	0x0800ad30
 80097e0:	0800ad30 	.word	0x0800ad30
 80097e4:	0800ad34 	.word	0x0800ad34

080097e8 <memset>:
 80097e8:	4402      	add	r2, r0
 80097ea:	4603      	mov	r3, r0
 80097ec:	4293      	cmp	r3, r2
 80097ee:	d100      	bne.n	80097f2 <memset+0xa>
 80097f0:	4770      	bx	lr
 80097f2:	f803 1b01 	strb.w	r1, [r3], #1
 80097f6:	e7f9      	b.n	80097ec <memset+0x4>

080097f8 <_puts_r>:
 80097f8:	b570      	push	{r4, r5, r6, lr}
 80097fa:	460e      	mov	r6, r1
 80097fc:	4605      	mov	r5, r0
 80097fe:	b118      	cbz	r0, 8009808 <_puts_r+0x10>
 8009800:	6983      	ldr	r3, [r0, #24]
 8009802:	b90b      	cbnz	r3, 8009808 <_puts_r+0x10>
 8009804:	f000 fa50 	bl	8009ca8 <__sinit>
 8009808:	69ab      	ldr	r3, [r5, #24]
 800980a:	68ac      	ldr	r4, [r5, #8]
 800980c:	b913      	cbnz	r3, 8009814 <_puts_r+0x1c>
 800980e:	4628      	mov	r0, r5
 8009810:	f000 fa4a 	bl	8009ca8 <__sinit>
 8009814:	4b23      	ldr	r3, [pc, #140]	; (80098a4 <_puts_r+0xac>)
 8009816:	429c      	cmp	r4, r3
 8009818:	d117      	bne.n	800984a <_puts_r+0x52>
 800981a:	686c      	ldr	r4, [r5, #4]
 800981c:	89a3      	ldrh	r3, [r4, #12]
 800981e:	071b      	lsls	r3, r3, #28
 8009820:	d51d      	bpl.n	800985e <_puts_r+0x66>
 8009822:	6923      	ldr	r3, [r4, #16]
 8009824:	b1db      	cbz	r3, 800985e <_puts_r+0x66>
 8009826:	3e01      	subs	r6, #1
 8009828:	68a3      	ldr	r3, [r4, #8]
 800982a:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 800982e:	3b01      	subs	r3, #1
 8009830:	60a3      	str	r3, [r4, #8]
 8009832:	b9e9      	cbnz	r1, 8009870 <_puts_r+0x78>
 8009834:	2b00      	cmp	r3, #0
 8009836:	da2e      	bge.n	8009896 <_puts_r+0x9e>
 8009838:	4622      	mov	r2, r4
 800983a:	210a      	movs	r1, #10
 800983c:	4628      	mov	r0, r5
 800983e:	f000 f883 	bl	8009948 <__swbuf_r>
 8009842:	3001      	adds	r0, #1
 8009844:	d011      	beq.n	800986a <_puts_r+0x72>
 8009846:	200a      	movs	r0, #10
 8009848:	e011      	b.n	800986e <_puts_r+0x76>
 800984a:	4b17      	ldr	r3, [pc, #92]	; (80098a8 <_puts_r+0xb0>)
 800984c:	429c      	cmp	r4, r3
 800984e:	d101      	bne.n	8009854 <_puts_r+0x5c>
 8009850:	68ac      	ldr	r4, [r5, #8]
 8009852:	e7e3      	b.n	800981c <_puts_r+0x24>
 8009854:	4b15      	ldr	r3, [pc, #84]	; (80098ac <_puts_r+0xb4>)
 8009856:	429c      	cmp	r4, r3
 8009858:	bf08      	it	eq
 800985a:	68ec      	ldreq	r4, [r5, #12]
 800985c:	e7de      	b.n	800981c <_puts_r+0x24>
 800985e:	4621      	mov	r1, r4
 8009860:	4628      	mov	r0, r5
 8009862:	f000 f8c3 	bl	80099ec <__swsetup_r>
 8009866:	2800      	cmp	r0, #0
 8009868:	d0dd      	beq.n	8009826 <_puts_r+0x2e>
 800986a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800986e:	bd70      	pop	{r4, r5, r6, pc}
 8009870:	2b00      	cmp	r3, #0
 8009872:	da04      	bge.n	800987e <_puts_r+0x86>
 8009874:	69a2      	ldr	r2, [r4, #24]
 8009876:	429a      	cmp	r2, r3
 8009878:	dc06      	bgt.n	8009888 <_puts_r+0x90>
 800987a:	290a      	cmp	r1, #10
 800987c:	d004      	beq.n	8009888 <_puts_r+0x90>
 800987e:	6823      	ldr	r3, [r4, #0]
 8009880:	1c5a      	adds	r2, r3, #1
 8009882:	6022      	str	r2, [r4, #0]
 8009884:	7019      	strb	r1, [r3, #0]
 8009886:	e7cf      	b.n	8009828 <_puts_r+0x30>
 8009888:	4622      	mov	r2, r4
 800988a:	4628      	mov	r0, r5
 800988c:	f000 f85c 	bl	8009948 <__swbuf_r>
 8009890:	3001      	adds	r0, #1
 8009892:	d1c9      	bne.n	8009828 <_puts_r+0x30>
 8009894:	e7e9      	b.n	800986a <_puts_r+0x72>
 8009896:	6823      	ldr	r3, [r4, #0]
 8009898:	200a      	movs	r0, #10
 800989a:	1c5a      	adds	r2, r3, #1
 800989c:	6022      	str	r2, [r4, #0]
 800989e:	7018      	strb	r0, [r3, #0]
 80098a0:	e7e5      	b.n	800986e <_puts_r+0x76>
 80098a2:	bf00      	nop
 80098a4:	0800acbc 	.word	0x0800acbc
 80098a8:	0800acdc 	.word	0x0800acdc
 80098ac:	0800ac9c 	.word	0x0800ac9c

080098b0 <puts>:
 80098b0:	4b02      	ldr	r3, [pc, #8]	; (80098bc <puts+0xc>)
 80098b2:	4601      	mov	r1, r0
 80098b4:	6818      	ldr	r0, [r3, #0]
 80098b6:	f7ff bf9f 	b.w	80097f8 <_puts_r>
 80098ba:	bf00      	nop
 80098bc:	20001064 	.word	0x20001064

080098c0 <sniprintf>:
 80098c0:	b40c      	push	{r2, r3}
 80098c2:	b530      	push	{r4, r5, lr}
 80098c4:	4b17      	ldr	r3, [pc, #92]	; (8009924 <sniprintf+0x64>)
 80098c6:	1e0c      	subs	r4, r1, #0
 80098c8:	b09d      	sub	sp, #116	; 0x74
 80098ca:	681d      	ldr	r5, [r3, #0]
 80098cc:	da08      	bge.n	80098e0 <sniprintf+0x20>
 80098ce:	238b      	movs	r3, #139	; 0x8b
 80098d0:	602b      	str	r3, [r5, #0]
 80098d2:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80098d6:	b01d      	add	sp, #116	; 0x74
 80098d8:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80098dc:	b002      	add	sp, #8
 80098de:	4770      	bx	lr
 80098e0:	f44f 7302 	mov.w	r3, #520	; 0x208
 80098e4:	f8ad 3014 	strh.w	r3, [sp, #20]
 80098e8:	bf14      	ite	ne
 80098ea:	f104 33ff 	addne.w	r3, r4, #4294967295	; 0xffffffff
 80098ee:	4623      	moveq	r3, r4
 80098f0:	9304      	str	r3, [sp, #16]
 80098f2:	9307      	str	r3, [sp, #28]
 80098f4:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80098f8:	9002      	str	r0, [sp, #8]
 80098fa:	9006      	str	r0, [sp, #24]
 80098fc:	f8ad 3016 	strh.w	r3, [sp, #22]
 8009900:	9a20      	ldr	r2, [sp, #128]	; 0x80
 8009902:	ab21      	add	r3, sp, #132	; 0x84
 8009904:	a902      	add	r1, sp, #8
 8009906:	4628      	mov	r0, r5
 8009908:	9301      	str	r3, [sp, #4]
 800990a:	f000 fbbd 	bl	800a088 <_svfiprintf_r>
 800990e:	1c43      	adds	r3, r0, #1
 8009910:	bfbc      	itt	lt
 8009912:	238b      	movlt	r3, #139	; 0x8b
 8009914:	602b      	strlt	r3, [r5, #0]
 8009916:	2c00      	cmp	r4, #0
 8009918:	d0dd      	beq.n	80098d6 <sniprintf+0x16>
 800991a:	9b02      	ldr	r3, [sp, #8]
 800991c:	2200      	movs	r2, #0
 800991e:	701a      	strb	r2, [r3, #0]
 8009920:	e7d9      	b.n	80098d6 <sniprintf+0x16>
 8009922:	bf00      	nop
 8009924:	20001064 	.word	0x20001064

08009928 <strcat>:
 8009928:	b510      	push	{r4, lr}
 800992a:	4603      	mov	r3, r0
 800992c:	781a      	ldrb	r2, [r3, #0]
 800992e:	1c5c      	adds	r4, r3, #1
 8009930:	b93a      	cbnz	r2, 8009942 <strcat+0x1a>
 8009932:	3b01      	subs	r3, #1
 8009934:	f811 2b01 	ldrb.w	r2, [r1], #1
 8009938:	f803 2f01 	strb.w	r2, [r3, #1]!
 800993c:	2a00      	cmp	r2, #0
 800993e:	d1f9      	bne.n	8009934 <strcat+0xc>
 8009940:	bd10      	pop	{r4, pc}
 8009942:	4623      	mov	r3, r4
 8009944:	e7f2      	b.n	800992c <strcat+0x4>
	...

08009948 <__swbuf_r>:
 8009948:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800994a:	460e      	mov	r6, r1
 800994c:	4614      	mov	r4, r2
 800994e:	4605      	mov	r5, r0
 8009950:	b118      	cbz	r0, 800995a <__swbuf_r+0x12>
 8009952:	6983      	ldr	r3, [r0, #24]
 8009954:	b90b      	cbnz	r3, 800995a <__swbuf_r+0x12>
 8009956:	f000 f9a7 	bl	8009ca8 <__sinit>
 800995a:	4b21      	ldr	r3, [pc, #132]	; (80099e0 <__swbuf_r+0x98>)
 800995c:	429c      	cmp	r4, r3
 800995e:	d12a      	bne.n	80099b6 <__swbuf_r+0x6e>
 8009960:	686c      	ldr	r4, [r5, #4]
 8009962:	69a3      	ldr	r3, [r4, #24]
 8009964:	60a3      	str	r3, [r4, #8]
 8009966:	89a3      	ldrh	r3, [r4, #12]
 8009968:	071a      	lsls	r2, r3, #28
 800996a:	d52e      	bpl.n	80099ca <__swbuf_r+0x82>
 800996c:	6923      	ldr	r3, [r4, #16]
 800996e:	b363      	cbz	r3, 80099ca <__swbuf_r+0x82>
 8009970:	6923      	ldr	r3, [r4, #16]
 8009972:	6820      	ldr	r0, [r4, #0]
 8009974:	1ac0      	subs	r0, r0, r3
 8009976:	6963      	ldr	r3, [r4, #20]
 8009978:	b2f6      	uxtb	r6, r6
 800997a:	4283      	cmp	r3, r0
 800997c:	4637      	mov	r7, r6
 800997e:	dc04      	bgt.n	800998a <__swbuf_r+0x42>
 8009980:	4621      	mov	r1, r4
 8009982:	4628      	mov	r0, r5
 8009984:	f000 f926 	bl	8009bd4 <_fflush_r>
 8009988:	bb28      	cbnz	r0, 80099d6 <__swbuf_r+0x8e>
 800998a:	68a3      	ldr	r3, [r4, #8]
 800998c:	3b01      	subs	r3, #1
 800998e:	60a3      	str	r3, [r4, #8]
 8009990:	6823      	ldr	r3, [r4, #0]
 8009992:	1c5a      	adds	r2, r3, #1
 8009994:	6022      	str	r2, [r4, #0]
 8009996:	701e      	strb	r6, [r3, #0]
 8009998:	6963      	ldr	r3, [r4, #20]
 800999a:	3001      	adds	r0, #1
 800999c:	4283      	cmp	r3, r0
 800999e:	d004      	beq.n	80099aa <__swbuf_r+0x62>
 80099a0:	89a3      	ldrh	r3, [r4, #12]
 80099a2:	07db      	lsls	r3, r3, #31
 80099a4:	d519      	bpl.n	80099da <__swbuf_r+0x92>
 80099a6:	2e0a      	cmp	r6, #10
 80099a8:	d117      	bne.n	80099da <__swbuf_r+0x92>
 80099aa:	4621      	mov	r1, r4
 80099ac:	4628      	mov	r0, r5
 80099ae:	f000 f911 	bl	8009bd4 <_fflush_r>
 80099b2:	b190      	cbz	r0, 80099da <__swbuf_r+0x92>
 80099b4:	e00f      	b.n	80099d6 <__swbuf_r+0x8e>
 80099b6:	4b0b      	ldr	r3, [pc, #44]	; (80099e4 <__swbuf_r+0x9c>)
 80099b8:	429c      	cmp	r4, r3
 80099ba:	d101      	bne.n	80099c0 <__swbuf_r+0x78>
 80099bc:	68ac      	ldr	r4, [r5, #8]
 80099be:	e7d0      	b.n	8009962 <__swbuf_r+0x1a>
 80099c0:	4b09      	ldr	r3, [pc, #36]	; (80099e8 <__swbuf_r+0xa0>)
 80099c2:	429c      	cmp	r4, r3
 80099c4:	bf08      	it	eq
 80099c6:	68ec      	ldreq	r4, [r5, #12]
 80099c8:	e7cb      	b.n	8009962 <__swbuf_r+0x1a>
 80099ca:	4621      	mov	r1, r4
 80099cc:	4628      	mov	r0, r5
 80099ce:	f000 f80d 	bl	80099ec <__swsetup_r>
 80099d2:	2800      	cmp	r0, #0
 80099d4:	d0cc      	beq.n	8009970 <__swbuf_r+0x28>
 80099d6:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 80099da:	4638      	mov	r0, r7
 80099dc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80099de:	bf00      	nop
 80099e0:	0800acbc 	.word	0x0800acbc
 80099e4:	0800acdc 	.word	0x0800acdc
 80099e8:	0800ac9c 	.word	0x0800ac9c

080099ec <__swsetup_r>:
 80099ec:	4b32      	ldr	r3, [pc, #200]	; (8009ab8 <__swsetup_r+0xcc>)
 80099ee:	b570      	push	{r4, r5, r6, lr}
 80099f0:	681d      	ldr	r5, [r3, #0]
 80099f2:	4606      	mov	r6, r0
 80099f4:	460c      	mov	r4, r1
 80099f6:	b125      	cbz	r5, 8009a02 <__swsetup_r+0x16>
 80099f8:	69ab      	ldr	r3, [r5, #24]
 80099fa:	b913      	cbnz	r3, 8009a02 <__swsetup_r+0x16>
 80099fc:	4628      	mov	r0, r5
 80099fe:	f000 f953 	bl	8009ca8 <__sinit>
 8009a02:	4b2e      	ldr	r3, [pc, #184]	; (8009abc <__swsetup_r+0xd0>)
 8009a04:	429c      	cmp	r4, r3
 8009a06:	d10f      	bne.n	8009a28 <__swsetup_r+0x3c>
 8009a08:	686c      	ldr	r4, [r5, #4]
 8009a0a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009a0e:	b29a      	uxth	r2, r3
 8009a10:	0715      	lsls	r5, r2, #28
 8009a12:	d42c      	bmi.n	8009a6e <__swsetup_r+0x82>
 8009a14:	06d0      	lsls	r0, r2, #27
 8009a16:	d411      	bmi.n	8009a3c <__swsetup_r+0x50>
 8009a18:	2209      	movs	r2, #9
 8009a1a:	6032      	str	r2, [r6, #0]
 8009a1c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8009a20:	81a3      	strh	r3, [r4, #12]
 8009a22:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8009a26:	e03e      	b.n	8009aa6 <__swsetup_r+0xba>
 8009a28:	4b25      	ldr	r3, [pc, #148]	; (8009ac0 <__swsetup_r+0xd4>)
 8009a2a:	429c      	cmp	r4, r3
 8009a2c:	d101      	bne.n	8009a32 <__swsetup_r+0x46>
 8009a2e:	68ac      	ldr	r4, [r5, #8]
 8009a30:	e7eb      	b.n	8009a0a <__swsetup_r+0x1e>
 8009a32:	4b24      	ldr	r3, [pc, #144]	; (8009ac4 <__swsetup_r+0xd8>)
 8009a34:	429c      	cmp	r4, r3
 8009a36:	bf08      	it	eq
 8009a38:	68ec      	ldreq	r4, [r5, #12]
 8009a3a:	e7e6      	b.n	8009a0a <__swsetup_r+0x1e>
 8009a3c:	0751      	lsls	r1, r2, #29
 8009a3e:	d512      	bpl.n	8009a66 <__swsetup_r+0x7a>
 8009a40:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8009a42:	b141      	cbz	r1, 8009a56 <__swsetup_r+0x6a>
 8009a44:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8009a48:	4299      	cmp	r1, r3
 8009a4a:	d002      	beq.n	8009a52 <__swsetup_r+0x66>
 8009a4c:	4630      	mov	r0, r6
 8009a4e:	f000 fa19 	bl	8009e84 <_free_r>
 8009a52:	2300      	movs	r3, #0
 8009a54:	6363      	str	r3, [r4, #52]	; 0x34
 8009a56:	89a3      	ldrh	r3, [r4, #12]
 8009a58:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8009a5c:	81a3      	strh	r3, [r4, #12]
 8009a5e:	2300      	movs	r3, #0
 8009a60:	6063      	str	r3, [r4, #4]
 8009a62:	6923      	ldr	r3, [r4, #16]
 8009a64:	6023      	str	r3, [r4, #0]
 8009a66:	89a3      	ldrh	r3, [r4, #12]
 8009a68:	f043 0308 	orr.w	r3, r3, #8
 8009a6c:	81a3      	strh	r3, [r4, #12]
 8009a6e:	6923      	ldr	r3, [r4, #16]
 8009a70:	b94b      	cbnz	r3, 8009a86 <__swsetup_r+0x9a>
 8009a72:	89a3      	ldrh	r3, [r4, #12]
 8009a74:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8009a78:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8009a7c:	d003      	beq.n	8009a86 <__swsetup_r+0x9a>
 8009a7e:	4621      	mov	r1, r4
 8009a80:	4630      	mov	r0, r6
 8009a82:	f000 f9bf 	bl	8009e04 <__smakebuf_r>
 8009a86:	89a2      	ldrh	r2, [r4, #12]
 8009a88:	f012 0301 	ands.w	r3, r2, #1
 8009a8c:	d00c      	beq.n	8009aa8 <__swsetup_r+0xbc>
 8009a8e:	2300      	movs	r3, #0
 8009a90:	60a3      	str	r3, [r4, #8]
 8009a92:	6963      	ldr	r3, [r4, #20]
 8009a94:	425b      	negs	r3, r3
 8009a96:	61a3      	str	r3, [r4, #24]
 8009a98:	6923      	ldr	r3, [r4, #16]
 8009a9a:	b953      	cbnz	r3, 8009ab2 <__swsetup_r+0xc6>
 8009a9c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009aa0:	f013 0080 	ands.w	r0, r3, #128	; 0x80
 8009aa4:	d1ba      	bne.n	8009a1c <__swsetup_r+0x30>
 8009aa6:	bd70      	pop	{r4, r5, r6, pc}
 8009aa8:	0792      	lsls	r2, r2, #30
 8009aaa:	bf58      	it	pl
 8009aac:	6963      	ldrpl	r3, [r4, #20]
 8009aae:	60a3      	str	r3, [r4, #8]
 8009ab0:	e7f2      	b.n	8009a98 <__swsetup_r+0xac>
 8009ab2:	2000      	movs	r0, #0
 8009ab4:	e7f7      	b.n	8009aa6 <__swsetup_r+0xba>
 8009ab6:	bf00      	nop
 8009ab8:	20001064 	.word	0x20001064
 8009abc:	0800acbc 	.word	0x0800acbc
 8009ac0:	0800acdc 	.word	0x0800acdc
 8009ac4:	0800ac9c 	.word	0x0800ac9c

08009ac8 <__sflush_r>:
 8009ac8:	898a      	ldrh	r2, [r1, #12]
 8009aca:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009ace:	4605      	mov	r5, r0
 8009ad0:	0710      	lsls	r0, r2, #28
 8009ad2:	460c      	mov	r4, r1
 8009ad4:	d458      	bmi.n	8009b88 <__sflush_r+0xc0>
 8009ad6:	684b      	ldr	r3, [r1, #4]
 8009ad8:	2b00      	cmp	r3, #0
 8009ada:	dc05      	bgt.n	8009ae8 <__sflush_r+0x20>
 8009adc:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8009ade:	2b00      	cmp	r3, #0
 8009ae0:	dc02      	bgt.n	8009ae8 <__sflush_r+0x20>
 8009ae2:	2000      	movs	r0, #0
 8009ae4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009ae8:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8009aea:	2e00      	cmp	r6, #0
 8009aec:	d0f9      	beq.n	8009ae2 <__sflush_r+0x1a>
 8009aee:	2300      	movs	r3, #0
 8009af0:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8009af4:	682f      	ldr	r7, [r5, #0]
 8009af6:	6a21      	ldr	r1, [r4, #32]
 8009af8:	602b      	str	r3, [r5, #0]
 8009afa:	d032      	beq.n	8009b62 <__sflush_r+0x9a>
 8009afc:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8009afe:	89a3      	ldrh	r3, [r4, #12]
 8009b00:	075a      	lsls	r2, r3, #29
 8009b02:	d505      	bpl.n	8009b10 <__sflush_r+0x48>
 8009b04:	6863      	ldr	r3, [r4, #4]
 8009b06:	1ac0      	subs	r0, r0, r3
 8009b08:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8009b0a:	b10b      	cbz	r3, 8009b10 <__sflush_r+0x48>
 8009b0c:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8009b0e:	1ac0      	subs	r0, r0, r3
 8009b10:	2300      	movs	r3, #0
 8009b12:	4602      	mov	r2, r0
 8009b14:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8009b16:	6a21      	ldr	r1, [r4, #32]
 8009b18:	4628      	mov	r0, r5
 8009b1a:	47b0      	blx	r6
 8009b1c:	1c43      	adds	r3, r0, #1
 8009b1e:	89a3      	ldrh	r3, [r4, #12]
 8009b20:	d106      	bne.n	8009b30 <__sflush_r+0x68>
 8009b22:	6829      	ldr	r1, [r5, #0]
 8009b24:	291d      	cmp	r1, #29
 8009b26:	d848      	bhi.n	8009bba <__sflush_r+0xf2>
 8009b28:	4a29      	ldr	r2, [pc, #164]	; (8009bd0 <__sflush_r+0x108>)
 8009b2a:	40ca      	lsrs	r2, r1
 8009b2c:	07d6      	lsls	r6, r2, #31
 8009b2e:	d544      	bpl.n	8009bba <__sflush_r+0xf2>
 8009b30:	2200      	movs	r2, #0
 8009b32:	6062      	str	r2, [r4, #4]
 8009b34:	04d9      	lsls	r1, r3, #19
 8009b36:	6922      	ldr	r2, [r4, #16]
 8009b38:	6022      	str	r2, [r4, #0]
 8009b3a:	d504      	bpl.n	8009b46 <__sflush_r+0x7e>
 8009b3c:	1c42      	adds	r2, r0, #1
 8009b3e:	d101      	bne.n	8009b44 <__sflush_r+0x7c>
 8009b40:	682b      	ldr	r3, [r5, #0]
 8009b42:	b903      	cbnz	r3, 8009b46 <__sflush_r+0x7e>
 8009b44:	6560      	str	r0, [r4, #84]	; 0x54
 8009b46:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8009b48:	602f      	str	r7, [r5, #0]
 8009b4a:	2900      	cmp	r1, #0
 8009b4c:	d0c9      	beq.n	8009ae2 <__sflush_r+0x1a>
 8009b4e:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8009b52:	4299      	cmp	r1, r3
 8009b54:	d002      	beq.n	8009b5c <__sflush_r+0x94>
 8009b56:	4628      	mov	r0, r5
 8009b58:	f000 f994 	bl	8009e84 <_free_r>
 8009b5c:	2000      	movs	r0, #0
 8009b5e:	6360      	str	r0, [r4, #52]	; 0x34
 8009b60:	e7c0      	b.n	8009ae4 <__sflush_r+0x1c>
 8009b62:	2301      	movs	r3, #1
 8009b64:	4628      	mov	r0, r5
 8009b66:	47b0      	blx	r6
 8009b68:	1c41      	adds	r1, r0, #1
 8009b6a:	d1c8      	bne.n	8009afe <__sflush_r+0x36>
 8009b6c:	682b      	ldr	r3, [r5, #0]
 8009b6e:	2b00      	cmp	r3, #0
 8009b70:	d0c5      	beq.n	8009afe <__sflush_r+0x36>
 8009b72:	2b1d      	cmp	r3, #29
 8009b74:	d001      	beq.n	8009b7a <__sflush_r+0xb2>
 8009b76:	2b16      	cmp	r3, #22
 8009b78:	d101      	bne.n	8009b7e <__sflush_r+0xb6>
 8009b7a:	602f      	str	r7, [r5, #0]
 8009b7c:	e7b1      	b.n	8009ae2 <__sflush_r+0x1a>
 8009b7e:	89a3      	ldrh	r3, [r4, #12]
 8009b80:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8009b84:	81a3      	strh	r3, [r4, #12]
 8009b86:	e7ad      	b.n	8009ae4 <__sflush_r+0x1c>
 8009b88:	690f      	ldr	r7, [r1, #16]
 8009b8a:	2f00      	cmp	r7, #0
 8009b8c:	d0a9      	beq.n	8009ae2 <__sflush_r+0x1a>
 8009b8e:	0793      	lsls	r3, r2, #30
 8009b90:	680e      	ldr	r6, [r1, #0]
 8009b92:	bf08      	it	eq
 8009b94:	694b      	ldreq	r3, [r1, #20]
 8009b96:	600f      	str	r7, [r1, #0]
 8009b98:	bf18      	it	ne
 8009b9a:	2300      	movne	r3, #0
 8009b9c:	eba6 0807 	sub.w	r8, r6, r7
 8009ba0:	608b      	str	r3, [r1, #8]
 8009ba2:	f1b8 0f00 	cmp.w	r8, #0
 8009ba6:	dd9c      	ble.n	8009ae2 <__sflush_r+0x1a>
 8009ba8:	4643      	mov	r3, r8
 8009baa:	463a      	mov	r2, r7
 8009bac:	6a21      	ldr	r1, [r4, #32]
 8009bae:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8009bb0:	4628      	mov	r0, r5
 8009bb2:	47b0      	blx	r6
 8009bb4:	2800      	cmp	r0, #0
 8009bb6:	dc06      	bgt.n	8009bc6 <__sflush_r+0xfe>
 8009bb8:	89a3      	ldrh	r3, [r4, #12]
 8009bba:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8009bbe:	81a3      	strh	r3, [r4, #12]
 8009bc0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8009bc4:	e78e      	b.n	8009ae4 <__sflush_r+0x1c>
 8009bc6:	4407      	add	r7, r0
 8009bc8:	eba8 0800 	sub.w	r8, r8, r0
 8009bcc:	e7e9      	b.n	8009ba2 <__sflush_r+0xda>
 8009bce:	bf00      	nop
 8009bd0:	20400001 	.word	0x20400001

08009bd4 <_fflush_r>:
 8009bd4:	b538      	push	{r3, r4, r5, lr}
 8009bd6:	690b      	ldr	r3, [r1, #16]
 8009bd8:	4605      	mov	r5, r0
 8009bda:	460c      	mov	r4, r1
 8009bdc:	b1db      	cbz	r3, 8009c16 <_fflush_r+0x42>
 8009bde:	b118      	cbz	r0, 8009be8 <_fflush_r+0x14>
 8009be0:	6983      	ldr	r3, [r0, #24]
 8009be2:	b90b      	cbnz	r3, 8009be8 <_fflush_r+0x14>
 8009be4:	f000 f860 	bl	8009ca8 <__sinit>
 8009be8:	4b0c      	ldr	r3, [pc, #48]	; (8009c1c <_fflush_r+0x48>)
 8009bea:	429c      	cmp	r4, r3
 8009bec:	d109      	bne.n	8009c02 <_fflush_r+0x2e>
 8009bee:	686c      	ldr	r4, [r5, #4]
 8009bf0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009bf4:	b17b      	cbz	r3, 8009c16 <_fflush_r+0x42>
 8009bf6:	4621      	mov	r1, r4
 8009bf8:	4628      	mov	r0, r5
 8009bfa:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8009bfe:	f7ff bf63 	b.w	8009ac8 <__sflush_r>
 8009c02:	4b07      	ldr	r3, [pc, #28]	; (8009c20 <_fflush_r+0x4c>)
 8009c04:	429c      	cmp	r4, r3
 8009c06:	d101      	bne.n	8009c0c <_fflush_r+0x38>
 8009c08:	68ac      	ldr	r4, [r5, #8]
 8009c0a:	e7f1      	b.n	8009bf0 <_fflush_r+0x1c>
 8009c0c:	4b05      	ldr	r3, [pc, #20]	; (8009c24 <_fflush_r+0x50>)
 8009c0e:	429c      	cmp	r4, r3
 8009c10:	bf08      	it	eq
 8009c12:	68ec      	ldreq	r4, [r5, #12]
 8009c14:	e7ec      	b.n	8009bf0 <_fflush_r+0x1c>
 8009c16:	2000      	movs	r0, #0
 8009c18:	bd38      	pop	{r3, r4, r5, pc}
 8009c1a:	bf00      	nop
 8009c1c:	0800acbc 	.word	0x0800acbc
 8009c20:	0800acdc 	.word	0x0800acdc
 8009c24:	0800ac9c 	.word	0x0800ac9c

08009c28 <std>:
 8009c28:	2300      	movs	r3, #0
 8009c2a:	b510      	push	{r4, lr}
 8009c2c:	4604      	mov	r4, r0
 8009c2e:	e9c0 3300 	strd	r3, r3, [r0]
 8009c32:	6083      	str	r3, [r0, #8]
 8009c34:	8181      	strh	r1, [r0, #12]
 8009c36:	6643      	str	r3, [r0, #100]	; 0x64
 8009c38:	81c2      	strh	r2, [r0, #14]
 8009c3a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8009c3e:	6183      	str	r3, [r0, #24]
 8009c40:	4619      	mov	r1, r3
 8009c42:	2208      	movs	r2, #8
 8009c44:	305c      	adds	r0, #92	; 0x5c
 8009c46:	f7ff fdcf 	bl	80097e8 <memset>
 8009c4a:	4b05      	ldr	r3, [pc, #20]	; (8009c60 <std+0x38>)
 8009c4c:	6263      	str	r3, [r4, #36]	; 0x24
 8009c4e:	4b05      	ldr	r3, [pc, #20]	; (8009c64 <std+0x3c>)
 8009c50:	62a3      	str	r3, [r4, #40]	; 0x28
 8009c52:	4b05      	ldr	r3, [pc, #20]	; (8009c68 <std+0x40>)
 8009c54:	62e3      	str	r3, [r4, #44]	; 0x2c
 8009c56:	4b05      	ldr	r3, [pc, #20]	; (8009c6c <std+0x44>)
 8009c58:	6224      	str	r4, [r4, #32]
 8009c5a:	6323      	str	r3, [r4, #48]	; 0x30
 8009c5c:	bd10      	pop	{r4, pc}
 8009c5e:	bf00      	nop
 8009c60:	0800a5a9 	.word	0x0800a5a9
 8009c64:	0800a5cb 	.word	0x0800a5cb
 8009c68:	0800a603 	.word	0x0800a603
 8009c6c:	0800a627 	.word	0x0800a627

08009c70 <_cleanup_r>:
 8009c70:	4901      	ldr	r1, [pc, #4]	; (8009c78 <_cleanup_r+0x8>)
 8009c72:	f000 b885 	b.w	8009d80 <_fwalk_reent>
 8009c76:	bf00      	nop
 8009c78:	08009bd5 	.word	0x08009bd5

08009c7c <__sfmoreglue>:
 8009c7c:	b570      	push	{r4, r5, r6, lr}
 8009c7e:	1e4a      	subs	r2, r1, #1
 8009c80:	2568      	movs	r5, #104	; 0x68
 8009c82:	4355      	muls	r5, r2
 8009c84:	460e      	mov	r6, r1
 8009c86:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8009c8a:	f000 f949 	bl	8009f20 <_malloc_r>
 8009c8e:	4604      	mov	r4, r0
 8009c90:	b140      	cbz	r0, 8009ca4 <__sfmoreglue+0x28>
 8009c92:	2100      	movs	r1, #0
 8009c94:	e9c0 1600 	strd	r1, r6, [r0]
 8009c98:	300c      	adds	r0, #12
 8009c9a:	60a0      	str	r0, [r4, #8]
 8009c9c:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8009ca0:	f7ff fda2 	bl	80097e8 <memset>
 8009ca4:	4620      	mov	r0, r4
 8009ca6:	bd70      	pop	{r4, r5, r6, pc}

08009ca8 <__sinit>:
 8009ca8:	6983      	ldr	r3, [r0, #24]
 8009caa:	b510      	push	{r4, lr}
 8009cac:	4604      	mov	r4, r0
 8009cae:	bb33      	cbnz	r3, 8009cfe <__sinit+0x56>
 8009cb0:	e9c0 3312 	strd	r3, r3, [r0, #72]	; 0x48
 8009cb4:	6503      	str	r3, [r0, #80]	; 0x50
 8009cb6:	4b12      	ldr	r3, [pc, #72]	; (8009d00 <__sinit+0x58>)
 8009cb8:	4a12      	ldr	r2, [pc, #72]	; (8009d04 <__sinit+0x5c>)
 8009cba:	681b      	ldr	r3, [r3, #0]
 8009cbc:	6282      	str	r2, [r0, #40]	; 0x28
 8009cbe:	4298      	cmp	r0, r3
 8009cc0:	bf04      	itt	eq
 8009cc2:	2301      	moveq	r3, #1
 8009cc4:	6183      	streq	r3, [r0, #24]
 8009cc6:	f000 f81f 	bl	8009d08 <__sfp>
 8009cca:	6060      	str	r0, [r4, #4]
 8009ccc:	4620      	mov	r0, r4
 8009cce:	f000 f81b 	bl	8009d08 <__sfp>
 8009cd2:	60a0      	str	r0, [r4, #8]
 8009cd4:	4620      	mov	r0, r4
 8009cd6:	f000 f817 	bl	8009d08 <__sfp>
 8009cda:	2200      	movs	r2, #0
 8009cdc:	60e0      	str	r0, [r4, #12]
 8009cde:	2104      	movs	r1, #4
 8009ce0:	6860      	ldr	r0, [r4, #4]
 8009ce2:	f7ff ffa1 	bl	8009c28 <std>
 8009ce6:	2201      	movs	r2, #1
 8009ce8:	2109      	movs	r1, #9
 8009cea:	68a0      	ldr	r0, [r4, #8]
 8009cec:	f7ff ff9c 	bl	8009c28 <std>
 8009cf0:	2202      	movs	r2, #2
 8009cf2:	2112      	movs	r1, #18
 8009cf4:	68e0      	ldr	r0, [r4, #12]
 8009cf6:	f7ff ff97 	bl	8009c28 <std>
 8009cfa:	2301      	movs	r3, #1
 8009cfc:	61a3      	str	r3, [r4, #24]
 8009cfe:	bd10      	pop	{r4, pc}
 8009d00:	0800ac98 	.word	0x0800ac98
 8009d04:	08009c71 	.word	0x08009c71

08009d08 <__sfp>:
 8009d08:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009d0a:	4b1b      	ldr	r3, [pc, #108]	; (8009d78 <__sfp+0x70>)
 8009d0c:	681e      	ldr	r6, [r3, #0]
 8009d0e:	69b3      	ldr	r3, [r6, #24]
 8009d10:	4607      	mov	r7, r0
 8009d12:	b913      	cbnz	r3, 8009d1a <__sfp+0x12>
 8009d14:	4630      	mov	r0, r6
 8009d16:	f7ff ffc7 	bl	8009ca8 <__sinit>
 8009d1a:	3648      	adds	r6, #72	; 0x48
 8009d1c:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8009d20:	3b01      	subs	r3, #1
 8009d22:	d503      	bpl.n	8009d2c <__sfp+0x24>
 8009d24:	6833      	ldr	r3, [r6, #0]
 8009d26:	b133      	cbz	r3, 8009d36 <__sfp+0x2e>
 8009d28:	6836      	ldr	r6, [r6, #0]
 8009d2a:	e7f7      	b.n	8009d1c <__sfp+0x14>
 8009d2c:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8009d30:	b16d      	cbz	r5, 8009d4e <__sfp+0x46>
 8009d32:	3468      	adds	r4, #104	; 0x68
 8009d34:	e7f4      	b.n	8009d20 <__sfp+0x18>
 8009d36:	2104      	movs	r1, #4
 8009d38:	4638      	mov	r0, r7
 8009d3a:	f7ff ff9f 	bl	8009c7c <__sfmoreglue>
 8009d3e:	6030      	str	r0, [r6, #0]
 8009d40:	2800      	cmp	r0, #0
 8009d42:	d1f1      	bne.n	8009d28 <__sfp+0x20>
 8009d44:	230c      	movs	r3, #12
 8009d46:	603b      	str	r3, [r7, #0]
 8009d48:	4604      	mov	r4, r0
 8009d4a:	4620      	mov	r0, r4
 8009d4c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8009d4e:	4b0b      	ldr	r3, [pc, #44]	; (8009d7c <__sfp+0x74>)
 8009d50:	6665      	str	r5, [r4, #100]	; 0x64
 8009d52:	e9c4 5500 	strd	r5, r5, [r4]
 8009d56:	60a5      	str	r5, [r4, #8]
 8009d58:	e9c4 3503 	strd	r3, r5, [r4, #12]
 8009d5c:	e9c4 5505 	strd	r5, r5, [r4, #20]
 8009d60:	2208      	movs	r2, #8
 8009d62:	4629      	mov	r1, r5
 8009d64:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8009d68:	f7ff fd3e 	bl	80097e8 <memset>
 8009d6c:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8009d70:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8009d74:	e7e9      	b.n	8009d4a <__sfp+0x42>
 8009d76:	bf00      	nop
 8009d78:	0800ac98 	.word	0x0800ac98
 8009d7c:	ffff0001 	.word	0xffff0001

08009d80 <_fwalk_reent>:
 8009d80:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8009d84:	4680      	mov	r8, r0
 8009d86:	4689      	mov	r9, r1
 8009d88:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8009d8c:	2600      	movs	r6, #0
 8009d8e:	b914      	cbnz	r4, 8009d96 <_fwalk_reent+0x16>
 8009d90:	4630      	mov	r0, r6
 8009d92:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8009d96:	e9d4 7501 	ldrd	r7, r5, [r4, #4]
 8009d9a:	3f01      	subs	r7, #1
 8009d9c:	d501      	bpl.n	8009da2 <_fwalk_reent+0x22>
 8009d9e:	6824      	ldr	r4, [r4, #0]
 8009da0:	e7f5      	b.n	8009d8e <_fwalk_reent+0xe>
 8009da2:	89ab      	ldrh	r3, [r5, #12]
 8009da4:	2b01      	cmp	r3, #1
 8009da6:	d907      	bls.n	8009db8 <_fwalk_reent+0x38>
 8009da8:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8009dac:	3301      	adds	r3, #1
 8009dae:	d003      	beq.n	8009db8 <_fwalk_reent+0x38>
 8009db0:	4629      	mov	r1, r5
 8009db2:	4640      	mov	r0, r8
 8009db4:	47c8      	blx	r9
 8009db6:	4306      	orrs	r6, r0
 8009db8:	3568      	adds	r5, #104	; 0x68
 8009dba:	e7ee      	b.n	8009d9a <_fwalk_reent+0x1a>

08009dbc <__swhatbuf_r>:
 8009dbc:	b570      	push	{r4, r5, r6, lr}
 8009dbe:	460e      	mov	r6, r1
 8009dc0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009dc4:	2900      	cmp	r1, #0
 8009dc6:	b096      	sub	sp, #88	; 0x58
 8009dc8:	4614      	mov	r4, r2
 8009dca:	461d      	mov	r5, r3
 8009dcc:	da07      	bge.n	8009dde <__swhatbuf_r+0x22>
 8009dce:	2300      	movs	r3, #0
 8009dd0:	602b      	str	r3, [r5, #0]
 8009dd2:	89b3      	ldrh	r3, [r6, #12]
 8009dd4:	061a      	lsls	r2, r3, #24
 8009dd6:	d410      	bmi.n	8009dfa <__swhatbuf_r+0x3e>
 8009dd8:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8009ddc:	e00e      	b.n	8009dfc <__swhatbuf_r+0x40>
 8009dde:	466a      	mov	r2, sp
 8009de0:	f000 fc48 	bl	800a674 <_fstat_r>
 8009de4:	2800      	cmp	r0, #0
 8009de6:	dbf2      	blt.n	8009dce <__swhatbuf_r+0x12>
 8009de8:	9a01      	ldr	r2, [sp, #4]
 8009dea:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8009dee:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8009df2:	425a      	negs	r2, r3
 8009df4:	415a      	adcs	r2, r3
 8009df6:	602a      	str	r2, [r5, #0]
 8009df8:	e7ee      	b.n	8009dd8 <__swhatbuf_r+0x1c>
 8009dfa:	2340      	movs	r3, #64	; 0x40
 8009dfc:	2000      	movs	r0, #0
 8009dfe:	6023      	str	r3, [r4, #0]
 8009e00:	b016      	add	sp, #88	; 0x58
 8009e02:	bd70      	pop	{r4, r5, r6, pc}

08009e04 <__smakebuf_r>:
 8009e04:	898b      	ldrh	r3, [r1, #12]
 8009e06:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8009e08:	079d      	lsls	r5, r3, #30
 8009e0a:	4606      	mov	r6, r0
 8009e0c:	460c      	mov	r4, r1
 8009e0e:	d507      	bpl.n	8009e20 <__smakebuf_r+0x1c>
 8009e10:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8009e14:	6023      	str	r3, [r4, #0]
 8009e16:	6123      	str	r3, [r4, #16]
 8009e18:	2301      	movs	r3, #1
 8009e1a:	6163      	str	r3, [r4, #20]
 8009e1c:	b002      	add	sp, #8
 8009e1e:	bd70      	pop	{r4, r5, r6, pc}
 8009e20:	ab01      	add	r3, sp, #4
 8009e22:	466a      	mov	r2, sp
 8009e24:	f7ff ffca 	bl	8009dbc <__swhatbuf_r>
 8009e28:	9900      	ldr	r1, [sp, #0]
 8009e2a:	4605      	mov	r5, r0
 8009e2c:	4630      	mov	r0, r6
 8009e2e:	f000 f877 	bl	8009f20 <_malloc_r>
 8009e32:	b948      	cbnz	r0, 8009e48 <__smakebuf_r+0x44>
 8009e34:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009e38:	059a      	lsls	r2, r3, #22
 8009e3a:	d4ef      	bmi.n	8009e1c <__smakebuf_r+0x18>
 8009e3c:	f023 0303 	bic.w	r3, r3, #3
 8009e40:	f043 0302 	orr.w	r3, r3, #2
 8009e44:	81a3      	strh	r3, [r4, #12]
 8009e46:	e7e3      	b.n	8009e10 <__smakebuf_r+0xc>
 8009e48:	4b0d      	ldr	r3, [pc, #52]	; (8009e80 <__smakebuf_r+0x7c>)
 8009e4a:	62b3      	str	r3, [r6, #40]	; 0x28
 8009e4c:	89a3      	ldrh	r3, [r4, #12]
 8009e4e:	6020      	str	r0, [r4, #0]
 8009e50:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009e54:	81a3      	strh	r3, [r4, #12]
 8009e56:	9b00      	ldr	r3, [sp, #0]
 8009e58:	6163      	str	r3, [r4, #20]
 8009e5a:	9b01      	ldr	r3, [sp, #4]
 8009e5c:	6120      	str	r0, [r4, #16]
 8009e5e:	b15b      	cbz	r3, 8009e78 <__smakebuf_r+0x74>
 8009e60:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8009e64:	4630      	mov	r0, r6
 8009e66:	f000 fc17 	bl	800a698 <_isatty_r>
 8009e6a:	b128      	cbz	r0, 8009e78 <__smakebuf_r+0x74>
 8009e6c:	89a3      	ldrh	r3, [r4, #12]
 8009e6e:	f023 0303 	bic.w	r3, r3, #3
 8009e72:	f043 0301 	orr.w	r3, r3, #1
 8009e76:	81a3      	strh	r3, [r4, #12]
 8009e78:	89a3      	ldrh	r3, [r4, #12]
 8009e7a:	431d      	orrs	r5, r3
 8009e7c:	81a5      	strh	r5, [r4, #12]
 8009e7e:	e7cd      	b.n	8009e1c <__smakebuf_r+0x18>
 8009e80:	08009c71 	.word	0x08009c71

08009e84 <_free_r>:
 8009e84:	b538      	push	{r3, r4, r5, lr}
 8009e86:	4605      	mov	r5, r0
 8009e88:	2900      	cmp	r1, #0
 8009e8a:	d045      	beq.n	8009f18 <_free_r+0x94>
 8009e8c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8009e90:	1f0c      	subs	r4, r1, #4
 8009e92:	2b00      	cmp	r3, #0
 8009e94:	bfb8      	it	lt
 8009e96:	18e4      	addlt	r4, r4, r3
 8009e98:	f000 fc44 	bl	800a724 <__malloc_lock>
 8009e9c:	4a1f      	ldr	r2, [pc, #124]	; (8009f1c <_free_r+0x98>)
 8009e9e:	6813      	ldr	r3, [r2, #0]
 8009ea0:	4610      	mov	r0, r2
 8009ea2:	b933      	cbnz	r3, 8009eb2 <_free_r+0x2e>
 8009ea4:	6063      	str	r3, [r4, #4]
 8009ea6:	6014      	str	r4, [r2, #0]
 8009ea8:	4628      	mov	r0, r5
 8009eaa:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8009eae:	f000 bc3a 	b.w	800a726 <__malloc_unlock>
 8009eb2:	42a3      	cmp	r3, r4
 8009eb4:	d90c      	bls.n	8009ed0 <_free_r+0x4c>
 8009eb6:	6821      	ldr	r1, [r4, #0]
 8009eb8:	1862      	adds	r2, r4, r1
 8009eba:	4293      	cmp	r3, r2
 8009ebc:	bf04      	itt	eq
 8009ebe:	681a      	ldreq	r2, [r3, #0]
 8009ec0:	685b      	ldreq	r3, [r3, #4]
 8009ec2:	6063      	str	r3, [r4, #4]
 8009ec4:	bf04      	itt	eq
 8009ec6:	1852      	addeq	r2, r2, r1
 8009ec8:	6022      	streq	r2, [r4, #0]
 8009eca:	6004      	str	r4, [r0, #0]
 8009ecc:	e7ec      	b.n	8009ea8 <_free_r+0x24>
 8009ece:	4613      	mov	r3, r2
 8009ed0:	685a      	ldr	r2, [r3, #4]
 8009ed2:	b10a      	cbz	r2, 8009ed8 <_free_r+0x54>
 8009ed4:	42a2      	cmp	r2, r4
 8009ed6:	d9fa      	bls.n	8009ece <_free_r+0x4a>
 8009ed8:	6819      	ldr	r1, [r3, #0]
 8009eda:	1858      	adds	r0, r3, r1
 8009edc:	42a0      	cmp	r0, r4
 8009ede:	d10b      	bne.n	8009ef8 <_free_r+0x74>
 8009ee0:	6820      	ldr	r0, [r4, #0]
 8009ee2:	4401      	add	r1, r0
 8009ee4:	1858      	adds	r0, r3, r1
 8009ee6:	4282      	cmp	r2, r0
 8009ee8:	6019      	str	r1, [r3, #0]
 8009eea:	d1dd      	bne.n	8009ea8 <_free_r+0x24>
 8009eec:	6810      	ldr	r0, [r2, #0]
 8009eee:	6852      	ldr	r2, [r2, #4]
 8009ef0:	605a      	str	r2, [r3, #4]
 8009ef2:	4401      	add	r1, r0
 8009ef4:	6019      	str	r1, [r3, #0]
 8009ef6:	e7d7      	b.n	8009ea8 <_free_r+0x24>
 8009ef8:	d902      	bls.n	8009f00 <_free_r+0x7c>
 8009efa:	230c      	movs	r3, #12
 8009efc:	602b      	str	r3, [r5, #0]
 8009efe:	e7d3      	b.n	8009ea8 <_free_r+0x24>
 8009f00:	6820      	ldr	r0, [r4, #0]
 8009f02:	1821      	adds	r1, r4, r0
 8009f04:	428a      	cmp	r2, r1
 8009f06:	bf04      	itt	eq
 8009f08:	6811      	ldreq	r1, [r2, #0]
 8009f0a:	6852      	ldreq	r2, [r2, #4]
 8009f0c:	6062      	str	r2, [r4, #4]
 8009f0e:	bf04      	itt	eq
 8009f10:	1809      	addeq	r1, r1, r0
 8009f12:	6021      	streq	r1, [r4, #0]
 8009f14:	605c      	str	r4, [r3, #4]
 8009f16:	e7c7      	b.n	8009ea8 <_free_r+0x24>
 8009f18:	bd38      	pop	{r3, r4, r5, pc}
 8009f1a:	bf00      	nop
 8009f1c:	200010fc 	.word	0x200010fc

08009f20 <_malloc_r>:
 8009f20:	b570      	push	{r4, r5, r6, lr}
 8009f22:	1ccd      	adds	r5, r1, #3
 8009f24:	f025 0503 	bic.w	r5, r5, #3
 8009f28:	3508      	adds	r5, #8
 8009f2a:	2d0c      	cmp	r5, #12
 8009f2c:	bf38      	it	cc
 8009f2e:	250c      	movcc	r5, #12
 8009f30:	2d00      	cmp	r5, #0
 8009f32:	4606      	mov	r6, r0
 8009f34:	db01      	blt.n	8009f3a <_malloc_r+0x1a>
 8009f36:	42a9      	cmp	r1, r5
 8009f38:	d903      	bls.n	8009f42 <_malloc_r+0x22>
 8009f3a:	230c      	movs	r3, #12
 8009f3c:	6033      	str	r3, [r6, #0]
 8009f3e:	2000      	movs	r0, #0
 8009f40:	bd70      	pop	{r4, r5, r6, pc}
 8009f42:	f000 fbef 	bl	800a724 <__malloc_lock>
 8009f46:	4a21      	ldr	r2, [pc, #132]	; (8009fcc <_malloc_r+0xac>)
 8009f48:	6814      	ldr	r4, [r2, #0]
 8009f4a:	4621      	mov	r1, r4
 8009f4c:	b991      	cbnz	r1, 8009f74 <_malloc_r+0x54>
 8009f4e:	4c20      	ldr	r4, [pc, #128]	; (8009fd0 <_malloc_r+0xb0>)
 8009f50:	6823      	ldr	r3, [r4, #0]
 8009f52:	b91b      	cbnz	r3, 8009f5c <_malloc_r+0x3c>
 8009f54:	4630      	mov	r0, r6
 8009f56:	f000 fb17 	bl	800a588 <_sbrk_r>
 8009f5a:	6020      	str	r0, [r4, #0]
 8009f5c:	4629      	mov	r1, r5
 8009f5e:	4630      	mov	r0, r6
 8009f60:	f000 fb12 	bl	800a588 <_sbrk_r>
 8009f64:	1c43      	adds	r3, r0, #1
 8009f66:	d124      	bne.n	8009fb2 <_malloc_r+0x92>
 8009f68:	230c      	movs	r3, #12
 8009f6a:	6033      	str	r3, [r6, #0]
 8009f6c:	4630      	mov	r0, r6
 8009f6e:	f000 fbda 	bl	800a726 <__malloc_unlock>
 8009f72:	e7e4      	b.n	8009f3e <_malloc_r+0x1e>
 8009f74:	680b      	ldr	r3, [r1, #0]
 8009f76:	1b5b      	subs	r3, r3, r5
 8009f78:	d418      	bmi.n	8009fac <_malloc_r+0x8c>
 8009f7a:	2b0b      	cmp	r3, #11
 8009f7c:	d90f      	bls.n	8009f9e <_malloc_r+0x7e>
 8009f7e:	600b      	str	r3, [r1, #0]
 8009f80:	50cd      	str	r5, [r1, r3]
 8009f82:	18cc      	adds	r4, r1, r3
 8009f84:	4630      	mov	r0, r6
 8009f86:	f000 fbce 	bl	800a726 <__malloc_unlock>
 8009f8a:	f104 000b 	add.w	r0, r4, #11
 8009f8e:	1d23      	adds	r3, r4, #4
 8009f90:	f020 0007 	bic.w	r0, r0, #7
 8009f94:	1ac3      	subs	r3, r0, r3
 8009f96:	d0d3      	beq.n	8009f40 <_malloc_r+0x20>
 8009f98:	425a      	negs	r2, r3
 8009f9a:	50e2      	str	r2, [r4, r3]
 8009f9c:	e7d0      	b.n	8009f40 <_malloc_r+0x20>
 8009f9e:	428c      	cmp	r4, r1
 8009fa0:	684b      	ldr	r3, [r1, #4]
 8009fa2:	bf16      	itet	ne
 8009fa4:	6063      	strne	r3, [r4, #4]
 8009fa6:	6013      	streq	r3, [r2, #0]
 8009fa8:	460c      	movne	r4, r1
 8009faa:	e7eb      	b.n	8009f84 <_malloc_r+0x64>
 8009fac:	460c      	mov	r4, r1
 8009fae:	6849      	ldr	r1, [r1, #4]
 8009fb0:	e7cc      	b.n	8009f4c <_malloc_r+0x2c>
 8009fb2:	1cc4      	adds	r4, r0, #3
 8009fb4:	f024 0403 	bic.w	r4, r4, #3
 8009fb8:	42a0      	cmp	r0, r4
 8009fba:	d005      	beq.n	8009fc8 <_malloc_r+0xa8>
 8009fbc:	1a21      	subs	r1, r4, r0
 8009fbe:	4630      	mov	r0, r6
 8009fc0:	f000 fae2 	bl	800a588 <_sbrk_r>
 8009fc4:	3001      	adds	r0, #1
 8009fc6:	d0cf      	beq.n	8009f68 <_malloc_r+0x48>
 8009fc8:	6025      	str	r5, [r4, #0]
 8009fca:	e7db      	b.n	8009f84 <_malloc_r+0x64>
 8009fcc:	200010fc 	.word	0x200010fc
 8009fd0:	20001100 	.word	0x20001100

08009fd4 <__ssputs_r>:
 8009fd4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009fd8:	688e      	ldr	r6, [r1, #8]
 8009fda:	429e      	cmp	r6, r3
 8009fdc:	4682      	mov	sl, r0
 8009fde:	460c      	mov	r4, r1
 8009fe0:	4690      	mov	r8, r2
 8009fe2:	4699      	mov	r9, r3
 8009fe4:	d837      	bhi.n	800a056 <__ssputs_r+0x82>
 8009fe6:	898a      	ldrh	r2, [r1, #12]
 8009fe8:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8009fec:	d031      	beq.n	800a052 <__ssputs_r+0x7e>
 8009fee:	6825      	ldr	r5, [r4, #0]
 8009ff0:	6909      	ldr	r1, [r1, #16]
 8009ff2:	1a6f      	subs	r7, r5, r1
 8009ff4:	6965      	ldr	r5, [r4, #20]
 8009ff6:	2302      	movs	r3, #2
 8009ff8:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8009ffc:	fb95 f5f3 	sdiv	r5, r5, r3
 800a000:	f109 0301 	add.w	r3, r9, #1
 800a004:	443b      	add	r3, r7
 800a006:	429d      	cmp	r5, r3
 800a008:	bf38      	it	cc
 800a00a:	461d      	movcc	r5, r3
 800a00c:	0553      	lsls	r3, r2, #21
 800a00e:	d530      	bpl.n	800a072 <__ssputs_r+0x9e>
 800a010:	4629      	mov	r1, r5
 800a012:	f7ff ff85 	bl	8009f20 <_malloc_r>
 800a016:	4606      	mov	r6, r0
 800a018:	b950      	cbnz	r0, 800a030 <__ssputs_r+0x5c>
 800a01a:	230c      	movs	r3, #12
 800a01c:	f8ca 3000 	str.w	r3, [sl]
 800a020:	89a3      	ldrh	r3, [r4, #12]
 800a022:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800a026:	81a3      	strh	r3, [r4, #12]
 800a028:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800a02c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a030:	463a      	mov	r2, r7
 800a032:	6921      	ldr	r1, [r4, #16]
 800a034:	f000 fb52 	bl	800a6dc <memcpy>
 800a038:	89a3      	ldrh	r3, [r4, #12]
 800a03a:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800a03e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a042:	81a3      	strh	r3, [r4, #12]
 800a044:	6126      	str	r6, [r4, #16]
 800a046:	6165      	str	r5, [r4, #20]
 800a048:	443e      	add	r6, r7
 800a04a:	1bed      	subs	r5, r5, r7
 800a04c:	6026      	str	r6, [r4, #0]
 800a04e:	60a5      	str	r5, [r4, #8]
 800a050:	464e      	mov	r6, r9
 800a052:	454e      	cmp	r6, r9
 800a054:	d900      	bls.n	800a058 <__ssputs_r+0x84>
 800a056:	464e      	mov	r6, r9
 800a058:	4632      	mov	r2, r6
 800a05a:	4641      	mov	r1, r8
 800a05c:	6820      	ldr	r0, [r4, #0]
 800a05e:	f000 fb48 	bl	800a6f2 <memmove>
 800a062:	68a3      	ldr	r3, [r4, #8]
 800a064:	1b9b      	subs	r3, r3, r6
 800a066:	60a3      	str	r3, [r4, #8]
 800a068:	6823      	ldr	r3, [r4, #0]
 800a06a:	441e      	add	r6, r3
 800a06c:	6026      	str	r6, [r4, #0]
 800a06e:	2000      	movs	r0, #0
 800a070:	e7dc      	b.n	800a02c <__ssputs_r+0x58>
 800a072:	462a      	mov	r2, r5
 800a074:	f000 fb58 	bl	800a728 <_realloc_r>
 800a078:	4606      	mov	r6, r0
 800a07a:	2800      	cmp	r0, #0
 800a07c:	d1e2      	bne.n	800a044 <__ssputs_r+0x70>
 800a07e:	6921      	ldr	r1, [r4, #16]
 800a080:	4650      	mov	r0, sl
 800a082:	f7ff feff 	bl	8009e84 <_free_r>
 800a086:	e7c8      	b.n	800a01a <__ssputs_r+0x46>

0800a088 <_svfiprintf_r>:
 800a088:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a08c:	461d      	mov	r5, r3
 800a08e:	898b      	ldrh	r3, [r1, #12]
 800a090:	061f      	lsls	r7, r3, #24
 800a092:	b09d      	sub	sp, #116	; 0x74
 800a094:	4680      	mov	r8, r0
 800a096:	460c      	mov	r4, r1
 800a098:	4616      	mov	r6, r2
 800a09a:	d50f      	bpl.n	800a0bc <_svfiprintf_r+0x34>
 800a09c:	690b      	ldr	r3, [r1, #16]
 800a09e:	b96b      	cbnz	r3, 800a0bc <_svfiprintf_r+0x34>
 800a0a0:	2140      	movs	r1, #64	; 0x40
 800a0a2:	f7ff ff3d 	bl	8009f20 <_malloc_r>
 800a0a6:	6020      	str	r0, [r4, #0]
 800a0a8:	6120      	str	r0, [r4, #16]
 800a0aa:	b928      	cbnz	r0, 800a0b8 <_svfiprintf_r+0x30>
 800a0ac:	230c      	movs	r3, #12
 800a0ae:	f8c8 3000 	str.w	r3, [r8]
 800a0b2:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800a0b6:	e0c8      	b.n	800a24a <_svfiprintf_r+0x1c2>
 800a0b8:	2340      	movs	r3, #64	; 0x40
 800a0ba:	6163      	str	r3, [r4, #20]
 800a0bc:	2300      	movs	r3, #0
 800a0be:	9309      	str	r3, [sp, #36]	; 0x24
 800a0c0:	2320      	movs	r3, #32
 800a0c2:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800a0c6:	2330      	movs	r3, #48	; 0x30
 800a0c8:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800a0cc:	9503      	str	r5, [sp, #12]
 800a0ce:	f04f 0b01 	mov.w	fp, #1
 800a0d2:	4637      	mov	r7, r6
 800a0d4:	463d      	mov	r5, r7
 800a0d6:	f815 3b01 	ldrb.w	r3, [r5], #1
 800a0da:	b10b      	cbz	r3, 800a0e0 <_svfiprintf_r+0x58>
 800a0dc:	2b25      	cmp	r3, #37	; 0x25
 800a0de:	d13e      	bne.n	800a15e <_svfiprintf_r+0xd6>
 800a0e0:	ebb7 0a06 	subs.w	sl, r7, r6
 800a0e4:	d00b      	beq.n	800a0fe <_svfiprintf_r+0x76>
 800a0e6:	4653      	mov	r3, sl
 800a0e8:	4632      	mov	r2, r6
 800a0ea:	4621      	mov	r1, r4
 800a0ec:	4640      	mov	r0, r8
 800a0ee:	f7ff ff71 	bl	8009fd4 <__ssputs_r>
 800a0f2:	3001      	adds	r0, #1
 800a0f4:	f000 80a4 	beq.w	800a240 <_svfiprintf_r+0x1b8>
 800a0f8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a0fa:	4453      	add	r3, sl
 800a0fc:	9309      	str	r3, [sp, #36]	; 0x24
 800a0fe:	783b      	ldrb	r3, [r7, #0]
 800a100:	2b00      	cmp	r3, #0
 800a102:	f000 809d 	beq.w	800a240 <_svfiprintf_r+0x1b8>
 800a106:	2300      	movs	r3, #0
 800a108:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800a10c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800a110:	9304      	str	r3, [sp, #16]
 800a112:	9307      	str	r3, [sp, #28]
 800a114:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800a118:	931a      	str	r3, [sp, #104]	; 0x68
 800a11a:	462f      	mov	r7, r5
 800a11c:	2205      	movs	r2, #5
 800a11e:	f817 1b01 	ldrb.w	r1, [r7], #1
 800a122:	4850      	ldr	r0, [pc, #320]	; (800a264 <_svfiprintf_r+0x1dc>)
 800a124:	f7f6 f87c 	bl	8000220 <memchr>
 800a128:	9b04      	ldr	r3, [sp, #16]
 800a12a:	b9d0      	cbnz	r0, 800a162 <_svfiprintf_r+0xda>
 800a12c:	06d9      	lsls	r1, r3, #27
 800a12e:	bf44      	itt	mi
 800a130:	2220      	movmi	r2, #32
 800a132:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 800a136:	071a      	lsls	r2, r3, #28
 800a138:	bf44      	itt	mi
 800a13a:	222b      	movmi	r2, #43	; 0x2b
 800a13c:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 800a140:	782a      	ldrb	r2, [r5, #0]
 800a142:	2a2a      	cmp	r2, #42	; 0x2a
 800a144:	d015      	beq.n	800a172 <_svfiprintf_r+0xea>
 800a146:	9a07      	ldr	r2, [sp, #28]
 800a148:	462f      	mov	r7, r5
 800a14a:	2000      	movs	r0, #0
 800a14c:	250a      	movs	r5, #10
 800a14e:	4639      	mov	r1, r7
 800a150:	f811 3b01 	ldrb.w	r3, [r1], #1
 800a154:	3b30      	subs	r3, #48	; 0x30
 800a156:	2b09      	cmp	r3, #9
 800a158:	d94d      	bls.n	800a1f6 <_svfiprintf_r+0x16e>
 800a15a:	b1b8      	cbz	r0, 800a18c <_svfiprintf_r+0x104>
 800a15c:	e00f      	b.n	800a17e <_svfiprintf_r+0xf6>
 800a15e:	462f      	mov	r7, r5
 800a160:	e7b8      	b.n	800a0d4 <_svfiprintf_r+0x4c>
 800a162:	4a40      	ldr	r2, [pc, #256]	; (800a264 <_svfiprintf_r+0x1dc>)
 800a164:	1a80      	subs	r0, r0, r2
 800a166:	fa0b f000 	lsl.w	r0, fp, r0
 800a16a:	4318      	orrs	r0, r3
 800a16c:	9004      	str	r0, [sp, #16]
 800a16e:	463d      	mov	r5, r7
 800a170:	e7d3      	b.n	800a11a <_svfiprintf_r+0x92>
 800a172:	9a03      	ldr	r2, [sp, #12]
 800a174:	1d11      	adds	r1, r2, #4
 800a176:	6812      	ldr	r2, [r2, #0]
 800a178:	9103      	str	r1, [sp, #12]
 800a17a:	2a00      	cmp	r2, #0
 800a17c:	db01      	blt.n	800a182 <_svfiprintf_r+0xfa>
 800a17e:	9207      	str	r2, [sp, #28]
 800a180:	e004      	b.n	800a18c <_svfiprintf_r+0x104>
 800a182:	4252      	negs	r2, r2
 800a184:	f043 0302 	orr.w	r3, r3, #2
 800a188:	9207      	str	r2, [sp, #28]
 800a18a:	9304      	str	r3, [sp, #16]
 800a18c:	783b      	ldrb	r3, [r7, #0]
 800a18e:	2b2e      	cmp	r3, #46	; 0x2e
 800a190:	d10c      	bne.n	800a1ac <_svfiprintf_r+0x124>
 800a192:	787b      	ldrb	r3, [r7, #1]
 800a194:	2b2a      	cmp	r3, #42	; 0x2a
 800a196:	d133      	bne.n	800a200 <_svfiprintf_r+0x178>
 800a198:	9b03      	ldr	r3, [sp, #12]
 800a19a:	1d1a      	adds	r2, r3, #4
 800a19c:	681b      	ldr	r3, [r3, #0]
 800a19e:	9203      	str	r2, [sp, #12]
 800a1a0:	2b00      	cmp	r3, #0
 800a1a2:	bfb8      	it	lt
 800a1a4:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 800a1a8:	3702      	adds	r7, #2
 800a1aa:	9305      	str	r3, [sp, #20]
 800a1ac:	4d2e      	ldr	r5, [pc, #184]	; (800a268 <_svfiprintf_r+0x1e0>)
 800a1ae:	7839      	ldrb	r1, [r7, #0]
 800a1b0:	2203      	movs	r2, #3
 800a1b2:	4628      	mov	r0, r5
 800a1b4:	f7f6 f834 	bl	8000220 <memchr>
 800a1b8:	b138      	cbz	r0, 800a1ca <_svfiprintf_r+0x142>
 800a1ba:	2340      	movs	r3, #64	; 0x40
 800a1bc:	1b40      	subs	r0, r0, r5
 800a1be:	fa03 f000 	lsl.w	r0, r3, r0
 800a1c2:	9b04      	ldr	r3, [sp, #16]
 800a1c4:	4303      	orrs	r3, r0
 800a1c6:	3701      	adds	r7, #1
 800a1c8:	9304      	str	r3, [sp, #16]
 800a1ca:	7839      	ldrb	r1, [r7, #0]
 800a1cc:	4827      	ldr	r0, [pc, #156]	; (800a26c <_svfiprintf_r+0x1e4>)
 800a1ce:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800a1d2:	2206      	movs	r2, #6
 800a1d4:	1c7e      	adds	r6, r7, #1
 800a1d6:	f7f6 f823 	bl	8000220 <memchr>
 800a1da:	2800      	cmp	r0, #0
 800a1dc:	d038      	beq.n	800a250 <_svfiprintf_r+0x1c8>
 800a1de:	4b24      	ldr	r3, [pc, #144]	; (800a270 <_svfiprintf_r+0x1e8>)
 800a1e0:	bb13      	cbnz	r3, 800a228 <_svfiprintf_r+0x1a0>
 800a1e2:	9b03      	ldr	r3, [sp, #12]
 800a1e4:	3307      	adds	r3, #7
 800a1e6:	f023 0307 	bic.w	r3, r3, #7
 800a1ea:	3308      	adds	r3, #8
 800a1ec:	9303      	str	r3, [sp, #12]
 800a1ee:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a1f0:	444b      	add	r3, r9
 800a1f2:	9309      	str	r3, [sp, #36]	; 0x24
 800a1f4:	e76d      	b.n	800a0d2 <_svfiprintf_r+0x4a>
 800a1f6:	fb05 3202 	mla	r2, r5, r2, r3
 800a1fa:	2001      	movs	r0, #1
 800a1fc:	460f      	mov	r7, r1
 800a1fe:	e7a6      	b.n	800a14e <_svfiprintf_r+0xc6>
 800a200:	2300      	movs	r3, #0
 800a202:	3701      	adds	r7, #1
 800a204:	9305      	str	r3, [sp, #20]
 800a206:	4619      	mov	r1, r3
 800a208:	250a      	movs	r5, #10
 800a20a:	4638      	mov	r0, r7
 800a20c:	f810 2b01 	ldrb.w	r2, [r0], #1
 800a210:	3a30      	subs	r2, #48	; 0x30
 800a212:	2a09      	cmp	r2, #9
 800a214:	d903      	bls.n	800a21e <_svfiprintf_r+0x196>
 800a216:	2b00      	cmp	r3, #0
 800a218:	d0c8      	beq.n	800a1ac <_svfiprintf_r+0x124>
 800a21a:	9105      	str	r1, [sp, #20]
 800a21c:	e7c6      	b.n	800a1ac <_svfiprintf_r+0x124>
 800a21e:	fb05 2101 	mla	r1, r5, r1, r2
 800a222:	2301      	movs	r3, #1
 800a224:	4607      	mov	r7, r0
 800a226:	e7f0      	b.n	800a20a <_svfiprintf_r+0x182>
 800a228:	ab03      	add	r3, sp, #12
 800a22a:	9300      	str	r3, [sp, #0]
 800a22c:	4622      	mov	r2, r4
 800a22e:	4b11      	ldr	r3, [pc, #68]	; (800a274 <_svfiprintf_r+0x1ec>)
 800a230:	a904      	add	r1, sp, #16
 800a232:	4640      	mov	r0, r8
 800a234:	f3af 8000 	nop.w
 800a238:	f1b0 3fff 	cmp.w	r0, #4294967295	; 0xffffffff
 800a23c:	4681      	mov	r9, r0
 800a23e:	d1d6      	bne.n	800a1ee <_svfiprintf_r+0x166>
 800a240:	89a3      	ldrh	r3, [r4, #12]
 800a242:	065b      	lsls	r3, r3, #25
 800a244:	f53f af35 	bmi.w	800a0b2 <_svfiprintf_r+0x2a>
 800a248:	9809      	ldr	r0, [sp, #36]	; 0x24
 800a24a:	b01d      	add	sp, #116	; 0x74
 800a24c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a250:	ab03      	add	r3, sp, #12
 800a252:	9300      	str	r3, [sp, #0]
 800a254:	4622      	mov	r2, r4
 800a256:	4b07      	ldr	r3, [pc, #28]	; (800a274 <_svfiprintf_r+0x1ec>)
 800a258:	a904      	add	r1, sp, #16
 800a25a:	4640      	mov	r0, r8
 800a25c:	f000 f882 	bl	800a364 <_printf_i>
 800a260:	e7ea      	b.n	800a238 <_svfiprintf_r+0x1b0>
 800a262:	bf00      	nop
 800a264:	0800acfc 	.word	0x0800acfc
 800a268:	0800ad02 	.word	0x0800ad02
 800a26c:	0800ad06 	.word	0x0800ad06
 800a270:	00000000 	.word	0x00000000
 800a274:	08009fd5 	.word	0x08009fd5

0800a278 <_printf_common>:
 800a278:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a27c:	4691      	mov	r9, r2
 800a27e:	461f      	mov	r7, r3
 800a280:	688a      	ldr	r2, [r1, #8]
 800a282:	690b      	ldr	r3, [r1, #16]
 800a284:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800a288:	4293      	cmp	r3, r2
 800a28a:	bfb8      	it	lt
 800a28c:	4613      	movlt	r3, r2
 800a28e:	f8c9 3000 	str.w	r3, [r9]
 800a292:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800a296:	4606      	mov	r6, r0
 800a298:	460c      	mov	r4, r1
 800a29a:	b112      	cbz	r2, 800a2a2 <_printf_common+0x2a>
 800a29c:	3301      	adds	r3, #1
 800a29e:	f8c9 3000 	str.w	r3, [r9]
 800a2a2:	6823      	ldr	r3, [r4, #0]
 800a2a4:	0699      	lsls	r1, r3, #26
 800a2a6:	bf42      	ittt	mi
 800a2a8:	f8d9 3000 	ldrmi.w	r3, [r9]
 800a2ac:	3302      	addmi	r3, #2
 800a2ae:	f8c9 3000 	strmi.w	r3, [r9]
 800a2b2:	6825      	ldr	r5, [r4, #0]
 800a2b4:	f015 0506 	ands.w	r5, r5, #6
 800a2b8:	d107      	bne.n	800a2ca <_printf_common+0x52>
 800a2ba:	f104 0a19 	add.w	sl, r4, #25
 800a2be:	68e3      	ldr	r3, [r4, #12]
 800a2c0:	f8d9 2000 	ldr.w	r2, [r9]
 800a2c4:	1a9b      	subs	r3, r3, r2
 800a2c6:	42ab      	cmp	r3, r5
 800a2c8:	dc28      	bgt.n	800a31c <_printf_common+0xa4>
 800a2ca:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 800a2ce:	6822      	ldr	r2, [r4, #0]
 800a2d0:	3300      	adds	r3, #0
 800a2d2:	bf18      	it	ne
 800a2d4:	2301      	movne	r3, #1
 800a2d6:	0692      	lsls	r2, r2, #26
 800a2d8:	d42d      	bmi.n	800a336 <_printf_common+0xbe>
 800a2da:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800a2de:	4639      	mov	r1, r7
 800a2e0:	4630      	mov	r0, r6
 800a2e2:	47c0      	blx	r8
 800a2e4:	3001      	adds	r0, #1
 800a2e6:	d020      	beq.n	800a32a <_printf_common+0xb2>
 800a2e8:	6823      	ldr	r3, [r4, #0]
 800a2ea:	68e5      	ldr	r5, [r4, #12]
 800a2ec:	f8d9 2000 	ldr.w	r2, [r9]
 800a2f0:	f003 0306 	and.w	r3, r3, #6
 800a2f4:	2b04      	cmp	r3, #4
 800a2f6:	bf08      	it	eq
 800a2f8:	1aad      	subeq	r5, r5, r2
 800a2fa:	68a3      	ldr	r3, [r4, #8]
 800a2fc:	6922      	ldr	r2, [r4, #16]
 800a2fe:	bf0c      	ite	eq
 800a300:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800a304:	2500      	movne	r5, #0
 800a306:	4293      	cmp	r3, r2
 800a308:	bfc4      	itt	gt
 800a30a:	1a9b      	subgt	r3, r3, r2
 800a30c:	18ed      	addgt	r5, r5, r3
 800a30e:	f04f 0900 	mov.w	r9, #0
 800a312:	341a      	adds	r4, #26
 800a314:	454d      	cmp	r5, r9
 800a316:	d11a      	bne.n	800a34e <_printf_common+0xd6>
 800a318:	2000      	movs	r0, #0
 800a31a:	e008      	b.n	800a32e <_printf_common+0xb6>
 800a31c:	2301      	movs	r3, #1
 800a31e:	4652      	mov	r2, sl
 800a320:	4639      	mov	r1, r7
 800a322:	4630      	mov	r0, r6
 800a324:	47c0      	blx	r8
 800a326:	3001      	adds	r0, #1
 800a328:	d103      	bne.n	800a332 <_printf_common+0xba>
 800a32a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800a32e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a332:	3501      	adds	r5, #1
 800a334:	e7c3      	b.n	800a2be <_printf_common+0x46>
 800a336:	18e1      	adds	r1, r4, r3
 800a338:	1c5a      	adds	r2, r3, #1
 800a33a:	2030      	movs	r0, #48	; 0x30
 800a33c:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800a340:	4422      	add	r2, r4
 800a342:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800a346:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800a34a:	3302      	adds	r3, #2
 800a34c:	e7c5      	b.n	800a2da <_printf_common+0x62>
 800a34e:	2301      	movs	r3, #1
 800a350:	4622      	mov	r2, r4
 800a352:	4639      	mov	r1, r7
 800a354:	4630      	mov	r0, r6
 800a356:	47c0      	blx	r8
 800a358:	3001      	adds	r0, #1
 800a35a:	d0e6      	beq.n	800a32a <_printf_common+0xb2>
 800a35c:	f109 0901 	add.w	r9, r9, #1
 800a360:	e7d8      	b.n	800a314 <_printf_common+0x9c>
	...

0800a364 <_printf_i>:
 800a364:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800a368:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 800a36c:	460c      	mov	r4, r1
 800a36e:	7e09      	ldrb	r1, [r1, #24]
 800a370:	b085      	sub	sp, #20
 800a372:	296e      	cmp	r1, #110	; 0x6e
 800a374:	4617      	mov	r7, r2
 800a376:	4606      	mov	r6, r0
 800a378:	4698      	mov	r8, r3
 800a37a:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800a37c:	f000 80b3 	beq.w	800a4e6 <_printf_i+0x182>
 800a380:	d822      	bhi.n	800a3c8 <_printf_i+0x64>
 800a382:	2963      	cmp	r1, #99	; 0x63
 800a384:	d036      	beq.n	800a3f4 <_printf_i+0x90>
 800a386:	d80a      	bhi.n	800a39e <_printf_i+0x3a>
 800a388:	2900      	cmp	r1, #0
 800a38a:	f000 80b9 	beq.w	800a500 <_printf_i+0x19c>
 800a38e:	2958      	cmp	r1, #88	; 0x58
 800a390:	f000 8083 	beq.w	800a49a <_printf_i+0x136>
 800a394:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800a398:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 800a39c:	e032      	b.n	800a404 <_printf_i+0xa0>
 800a39e:	2964      	cmp	r1, #100	; 0x64
 800a3a0:	d001      	beq.n	800a3a6 <_printf_i+0x42>
 800a3a2:	2969      	cmp	r1, #105	; 0x69
 800a3a4:	d1f6      	bne.n	800a394 <_printf_i+0x30>
 800a3a6:	6820      	ldr	r0, [r4, #0]
 800a3a8:	6813      	ldr	r3, [r2, #0]
 800a3aa:	0605      	lsls	r5, r0, #24
 800a3ac:	f103 0104 	add.w	r1, r3, #4
 800a3b0:	d52a      	bpl.n	800a408 <_printf_i+0xa4>
 800a3b2:	681b      	ldr	r3, [r3, #0]
 800a3b4:	6011      	str	r1, [r2, #0]
 800a3b6:	2b00      	cmp	r3, #0
 800a3b8:	da03      	bge.n	800a3c2 <_printf_i+0x5e>
 800a3ba:	222d      	movs	r2, #45	; 0x2d
 800a3bc:	425b      	negs	r3, r3
 800a3be:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 800a3c2:	486f      	ldr	r0, [pc, #444]	; (800a580 <_printf_i+0x21c>)
 800a3c4:	220a      	movs	r2, #10
 800a3c6:	e039      	b.n	800a43c <_printf_i+0xd8>
 800a3c8:	2973      	cmp	r1, #115	; 0x73
 800a3ca:	f000 809d 	beq.w	800a508 <_printf_i+0x1a4>
 800a3ce:	d808      	bhi.n	800a3e2 <_printf_i+0x7e>
 800a3d0:	296f      	cmp	r1, #111	; 0x6f
 800a3d2:	d020      	beq.n	800a416 <_printf_i+0xb2>
 800a3d4:	2970      	cmp	r1, #112	; 0x70
 800a3d6:	d1dd      	bne.n	800a394 <_printf_i+0x30>
 800a3d8:	6823      	ldr	r3, [r4, #0]
 800a3da:	f043 0320 	orr.w	r3, r3, #32
 800a3de:	6023      	str	r3, [r4, #0]
 800a3e0:	e003      	b.n	800a3ea <_printf_i+0x86>
 800a3e2:	2975      	cmp	r1, #117	; 0x75
 800a3e4:	d017      	beq.n	800a416 <_printf_i+0xb2>
 800a3e6:	2978      	cmp	r1, #120	; 0x78
 800a3e8:	d1d4      	bne.n	800a394 <_printf_i+0x30>
 800a3ea:	2378      	movs	r3, #120	; 0x78
 800a3ec:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800a3f0:	4864      	ldr	r0, [pc, #400]	; (800a584 <_printf_i+0x220>)
 800a3f2:	e055      	b.n	800a4a0 <_printf_i+0x13c>
 800a3f4:	6813      	ldr	r3, [r2, #0]
 800a3f6:	1d19      	adds	r1, r3, #4
 800a3f8:	681b      	ldr	r3, [r3, #0]
 800a3fa:	6011      	str	r1, [r2, #0]
 800a3fc:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800a400:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800a404:	2301      	movs	r3, #1
 800a406:	e08c      	b.n	800a522 <_printf_i+0x1be>
 800a408:	681b      	ldr	r3, [r3, #0]
 800a40a:	6011      	str	r1, [r2, #0]
 800a40c:	f010 0f40 	tst.w	r0, #64	; 0x40
 800a410:	bf18      	it	ne
 800a412:	b21b      	sxthne	r3, r3
 800a414:	e7cf      	b.n	800a3b6 <_printf_i+0x52>
 800a416:	6813      	ldr	r3, [r2, #0]
 800a418:	6825      	ldr	r5, [r4, #0]
 800a41a:	1d18      	adds	r0, r3, #4
 800a41c:	6010      	str	r0, [r2, #0]
 800a41e:	0628      	lsls	r0, r5, #24
 800a420:	d501      	bpl.n	800a426 <_printf_i+0xc2>
 800a422:	681b      	ldr	r3, [r3, #0]
 800a424:	e002      	b.n	800a42c <_printf_i+0xc8>
 800a426:	0668      	lsls	r0, r5, #25
 800a428:	d5fb      	bpl.n	800a422 <_printf_i+0xbe>
 800a42a:	881b      	ldrh	r3, [r3, #0]
 800a42c:	4854      	ldr	r0, [pc, #336]	; (800a580 <_printf_i+0x21c>)
 800a42e:	296f      	cmp	r1, #111	; 0x6f
 800a430:	bf14      	ite	ne
 800a432:	220a      	movne	r2, #10
 800a434:	2208      	moveq	r2, #8
 800a436:	2100      	movs	r1, #0
 800a438:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800a43c:	6865      	ldr	r5, [r4, #4]
 800a43e:	60a5      	str	r5, [r4, #8]
 800a440:	2d00      	cmp	r5, #0
 800a442:	f2c0 8095 	blt.w	800a570 <_printf_i+0x20c>
 800a446:	6821      	ldr	r1, [r4, #0]
 800a448:	f021 0104 	bic.w	r1, r1, #4
 800a44c:	6021      	str	r1, [r4, #0]
 800a44e:	2b00      	cmp	r3, #0
 800a450:	d13d      	bne.n	800a4ce <_printf_i+0x16a>
 800a452:	2d00      	cmp	r5, #0
 800a454:	f040 808e 	bne.w	800a574 <_printf_i+0x210>
 800a458:	4665      	mov	r5, ip
 800a45a:	2a08      	cmp	r2, #8
 800a45c:	d10b      	bne.n	800a476 <_printf_i+0x112>
 800a45e:	6823      	ldr	r3, [r4, #0]
 800a460:	07db      	lsls	r3, r3, #31
 800a462:	d508      	bpl.n	800a476 <_printf_i+0x112>
 800a464:	6923      	ldr	r3, [r4, #16]
 800a466:	6862      	ldr	r2, [r4, #4]
 800a468:	429a      	cmp	r2, r3
 800a46a:	bfde      	ittt	le
 800a46c:	2330      	movle	r3, #48	; 0x30
 800a46e:	f805 3c01 	strble.w	r3, [r5, #-1]
 800a472:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 800a476:	ebac 0305 	sub.w	r3, ip, r5
 800a47a:	6123      	str	r3, [r4, #16]
 800a47c:	f8cd 8000 	str.w	r8, [sp]
 800a480:	463b      	mov	r3, r7
 800a482:	aa03      	add	r2, sp, #12
 800a484:	4621      	mov	r1, r4
 800a486:	4630      	mov	r0, r6
 800a488:	f7ff fef6 	bl	800a278 <_printf_common>
 800a48c:	3001      	adds	r0, #1
 800a48e:	d14d      	bne.n	800a52c <_printf_i+0x1c8>
 800a490:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800a494:	b005      	add	sp, #20
 800a496:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800a49a:	4839      	ldr	r0, [pc, #228]	; (800a580 <_printf_i+0x21c>)
 800a49c:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 800a4a0:	6813      	ldr	r3, [r2, #0]
 800a4a2:	6821      	ldr	r1, [r4, #0]
 800a4a4:	1d1d      	adds	r5, r3, #4
 800a4a6:	681b      	ldr	r3, [r3, #0]
 800a4a8:	6015      	str	r5, [r2, #0]
 800a4aa:	060a      	lsls	r2, r1, #24
 800a4ac:	d50b      	bpl.n	800a4c6 <_printf_i+0x162>
 800a4ae:	07ca      	lsls	r2, r1, #31
 800a4b0:	bf44      	itt	mi
 800a4b2:	f041 0120 	orrmi.w	r1, r1, #32
 800a4b6:	6021      	strmi	r1, [r4, #0]
 800a4b8:	b91b      	cbnz	r3, 800a4c2 <_printf_i+0x15e>
 800a4ba:	6822      	ldr	r2, [r4, #0]
 800a4bc:	f022 0220 	bic.w	r2, r2, #32
 800a4c0:	6022      	str	r2, [r4, #0]
 800a4c2:	2210      	movs	r2, #16
 800a4c4:	e7b7      	b.n	800a436 <_printf_i+0xd2>
 800a4c6:	064d      	lsls	r5, r1, #25
 800a4c8:	bf48      	it	mi
 800a4ca:	b29b      	uxthmi	r3, r3
 800a4cc:	e7ef      	b.n	800a4ae <_printf_i+0x14a>
 800a4ce:	4665      	mov	r5, ip
 800a4d0:	fbb3 f1f2 	udiv	r1, r3, r2
 800a4d4:	fb02 3311 	mls	r3, r2, r1, r3
 800a4d8:	5cc3      	ldrb	r3, [r0, r3]
 800a4da:	f805 3d01 	strb.w	r3, [r5, #-1]!
 800a4de:	460b      	mov	r3, r1
 800a4e0:	2900      	cmp	r1, #0
 800a4e2:	d1f5      	bne.n	800a4d0 <_printf_i+0x16c>
 800a4e4:	e7b9      	b.n	800a45a <_printf_i+0xf6>
 800a4e6:	6813      	ldr	r3, [r2, #0]
 800a4e8:	6825      	ldr	r5, [r4, #0]
 800a4ea:	6961      	ldr	r1, [r4, #20]
 800a4ec:	1d18      	adds	r0, r3, #4
 800a4ee:	6010      	str	r0, [r2, #0]
 800a4f0:	0628      	lsls	r0, r5, #24
 800a4f2:	681b      	ldr	r3, [r3, #0]
 800a4f4:	d501      	bpl.n	800a4fa <_printf_i+0x196>
 800a4f6:	6019      	str	r1, [r3, #0]
 800a4f8:	e002      	b.n	800a500 <_printf_i+0x19c>
 800a4fa:	066a      	lsls	r2, r5, #25
 800a4fc:	d5fb      	bpl.n	800a4f6 <_printf_i+0x192>
 800a4fe:	8019      	strh	r1, [r3, #0]
 800a500:	2300      	movs	r3, #0
 800a502:	6123      	str	r3, [r4, #16]
 800a504:	4665      	mov	r5, ip
 800a506:	e7b9      	b.n	800a47c <_printf_i+0x118>
 800a508:	6813      	ldr	r3, [r2, #0]
 800a50a:	1d19      	adds	r1, r3, #4
 800a50c:	6011      	str	r1, [r2, #0]
 800a50e:	681d      	ldr	r5, [r3, #0]
 800a510:	6862      	ldr	r2, [r4, #4]
 800a512:	2100      	movs	r1, #0
 800a514:	4628      	mov	r0, r5
 800a516:	f7f5 fe83 	bl	8000220 <memchr>
 800a51a:	b108      	cbz	r0, 800a520 <_printf_i+0x1bc>
 800a51c:	1b40      	subs	r0, r0, r5
 800a51e:	6060      	str	r0, [r4, #4]
 800a520:	6863      	ldr	r3, [r4, #4]
 800a522:	6123      	str	r3, [r4, #16]
 800a524:	2300      	movs	r3, #0
 800a526:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800a52a:	e7a7      	b.n	800a47c <_printf_i+0x118>
 800a52c:	6923      	ldr	r3, [r4, #16]
 800a52e:	462a      	mov	r2, r5
 800a530:	4639      	mov	r1, r7
 800a532:	4630      	mov	r0, r6
 800a534:	47c0      	blx	r8
 800a536:	3001      	adds	r0, #1
 800a538:	d0aa      	beq.n	800a490 <_printf_i+0x12c>
 800a53a:	6823      	ldr	r3, [r4, #0]
 800a53c:	079b      	lsls	r3, r3, #30
 800a53e:	d413      	bmi.n	800a568 <_printf_i+0x204>
 800a540:	68e0      	ldr	r0, [r4, #12]
 800a542:	9b03      	ldr	r3, [sp, #12]
 800a544:	4298      	cmp	r0, r3
 800a546:	bfb8      	it	lt
 800a548:	4618      	movlt	r0, r3
 800a54a:	e7a3      	b.n	800a494 <_printf_i+0x130>
 800a54c:	2301      	movs	r3, #1
 800a54e:	464a      	mov	r2, r9
 800a550:	4639      	mov	r1, r7
 800a552:	4630      	mov	r0, r6
 800a554:	47c0      	blx	r8
 800a556:	3001      	adds	r0, #1
 800a558:	d09a      	beq.n	800a490 <_printf_i+0x12c>
 800a55a:	3501      	adds	r5, #1
 800a55c:	68e3      	ldr	r3, [r4, #12]
 800a55e:	9a03      	ldr	r2, [sp, #12]
 800a560:	1a9b      	subs	r3, r3, r2
 800a562:	42ab      	cmp	r3, r5
 800a564:	dcf2      	bgt.n	800a54c <_printf_i+0x1e8>
 800a566:	e7eb      	b.n	800a540 <_printf_i+0x1dc>
 800a568:	2500      	movs	r5, #0
 800a56a:	f104 0919 	add.w	r9, r4, #25
 800a56e:	e7f5      	b.n	800a55c <_printf_i+0x1f8>
 800a570:	2b00      	cmp	r3, #0
 800a572:	d1ac      	bne.n	800a4ce <_printf_i+0x16a>
 800a574:	7803      	ldrb	r3, [r0, #0]
 800a576:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800a57a:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800a57e:	e76c      	b.n	800a45a <_printf_i+0xf6>
 800a580:	0800ad0d 	.word	0x0800ad0d
 800a584:	0800ad1e 	.word	0x0800ad1e

0800a588 <_sbrk_r>:
 800a588:	b538      	push	{r3, r4, r5, lr}
 800a58a:	4c06      	ldr	r4, [pc, #24]	; (800a5a4 <_sbrk_r+0x1c>)
 800a58c:	2300      	movs	r3, #0
 800a58e:	4605      	mov	r5, r0
 800a590:	4608      	mov	r0, r1
 800a592:	6023      	str	r3, [r4, #0]
 800a594:	f7f8 f9c4 	bl	8002920 <_sbrk>
 800a598:	1c43      	adds	r3, r0, #1
 800a59a:	d102      	bne.n	800a5a2 <_sbrk_r+0x1a>
 800a59c:	6823      	ldr	r3, [r4, #0]
 800a59e:	b103      	cbz	r3, 800a5a2 <_sbrk_r+0x1a>
 800a5a0:	602b      	str	r3, [r5, #0]
 800a5a2:	bd38      	pop	{r3, r4, r5, pc}
 800a5a4:	20001564 	.word	0x20001564

0800a5a8 <__sread>:
 800a5a8:	b510      	push	{r4, lr}
 800a5aa:	460c      	mov	r4, r1
 800a5ac:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a5b0:	f000 f8e0 	bl	800a774 <_read_r>
 800a5b4:	2800      	cmp	r0, #0
 800a5b6:	bfab      	itete	ge
 800a5b8:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800a5ba:	89a3      	ldrhlt	r3, [r4, #12]
 800a5bc:	181b      	addge	r3, r3, r0
 800a5be:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800a5c2:	bfac      	ite	ge
 800a5c4:	6563      	strge	r3, [r4, #84]	; 0x54
 800a5c6:	81a3      	strhlt	r3, [r4, #12]
 800a5c8:	bd10      	pop	{r4, pc}

0800a5ca <__swrite>:
 800a5ca:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a5ce:	461f      	mov	r7, r3
 800a5d0:	898b      	ldrh	r3, [r1, #12]
 800a5d2:	05db      	lsls	r3, r3, #23
 800a5d4:	4605      	mov	r5, r0
 800a5d6:	460c      	mov	r4, r1
 800a5d8:	4616      	mov	r6, r2
 800a5da:	d505      	bpl.n	800a5e8 <__swrite+0x1e>
 800a5dc:	2302      	movs	r3, #2
 800a5de:	2200      	movs	r2, #0
 800a5e0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a5e4:	f000 f868 	bl	800a6b8 <_lseek_r>
 800a5e8:	89a3      	ldrh	r3, [r4, #12]
 800a5ea:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800a5ee:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800a5f2:	81a3      	strh	r3, [r4, #12]
 800a5f4:	4632      	mov	r2, r6
 800a5f6:	463b      	mov	r3, r7
 800a5f8:	4628      	mov	r0, r5
 800a5fa:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800a5fe:	f000 b817 	b.w	800a630 <_write_r>

0800a602 <__sseek>:
 800a602:	b510      	push	{r4, lr}
 800a604:	460c      	mov	r4, r1
 800a606:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a60a:	f000 f855 	bl	800a6b8 <_lseek_r>
 800a60e:	1c43      	adds	r3, r0, #1
 800a610:	89a3      	ldrh	r3, [r4, #12]
 800a612:	bf15      	itete	ne
 800a614:	6560      	strne	r0, [r4, #84]	; 0x54
 800a616:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800a61a:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800a61e:	81a3      	strheq	r3, [r4, #12]
 800a620:	bf18      	it	ne
 800a622:	81a3      	strhne	r3, [r4, #12]
 800a624:	bd10      	pop	{r4, pc}

0800a626 <__sclose>:
 800a626:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a62a:	f000 b813 	b.w	800a654 <_close_r>
	...

0800a630 <_write_r>:
 800a630:	b538      	push	{r3, r4, r5, lr}
 800a632:	4c07      	ldr	r4, [pc, #28]	; (800a650 <_write_r+0x20>)
 800a634:	4605      	mov	r5, r0
 800a636:	4608      	mov	r0, r1
 800a638:	4611      	mov	r1, r2
 800a63a:	2200      	movs	r2, #0
 800a63c:	6022      	str	r2, [r4, #0]
 800a63e:	461a      	mov	r2, r3
 800a640:	f7f7 fdb9 	bl	80021b6 <_write>
 800a644:	1c43      	adds	r3, r0, #1
 800a646:	d102      	bne.n	800a64e <_write_r+0x1e>
 800a648:	6823      	ldr	r3, [r4, #0]
 800a64a:	b103      	cbz	r3, 800a64e <_write_r+0x1e>
 800a64c:	602b      	str	r3, [r5, #0]
 800a64e:	bd38      	pop	{r3, r4, r5, pc}
 800a650:	20001564 	.word	0x20001564

0800a654 <_close_r>:
 800a654:	b538      	push	{r3, r4, r5, lr}
 800a656:	4c06      	ldr	r4, [pc, #24]	; (800a670 <_close_r+0x1c>)
 800a658:	2300      	movs	r3, #0
 800a65a:	4605      	mov	r5, r0
 800a65c:	4608      	mov	r0, r1
 800a65e:	6023      	str	r3, [r4, #0]
 800a660:	f7f8 f929 	bl	80028b6 <_close>
 800a664:	1c43      	adds	r3, r0, #1
 800a666:	d102      	bne.n	800a66e <_close_r+0x1a>
 800a668:	6823      	ldr	r3, [r4, #0]
 800a66a:	b103      	cbz	r3, 800a66e <_close_r+0x1a>
 800a66c:	602b      	str	r3, [r5, #0]
 800a66e:	bd38      	pop	{r3, r4, r5, pc}
 800a670:	20001564 	.word	0x20001564

0800a674 <_fstat_r>:
 800a674:	b538      	push	{r3, r4, r5, lr}
 800a676:	4c07      	ldr	r4, [pc, #28]	; (800a694 <_fstat_r+0x20>)
 800a678:	2300      	movs	r3, #0
 800a67a:	4605      	mov	r5, r0
 800a67c:	4608      	mov	r0, r1
 800a67e:	4611      	mov	r1, r2
 800a680:	6023      	str	r3, [r4, #0]
 800a682:	f7f8 f924 	bl	80028ce <_fstat>
 800a686:	1c43      	adds	r3, r0, #1
 800a688:	d102      	bne.n	800a690 <_fstat_r+0x1c>
 800a68a:	6823      	ldr	r3, [r4, #0]
 800a68c:	b103      	cbz	r3, 800a690 <_fstat_r+0x1c>
 800a68e:	602b      	str	r3, [r5, #0]
 800a690:	bd38      	pop	{r3, r4, r5, pc}
 800a692:	bf00      	nop
 800a694:	20001564 	.word	0x20001564

0800a698 <_isatty_r>:
 800a698:	b538      	push	{r3, r4, r5, lr}
 800a69a:	4c06      	ldr	r4, [pc, #24]	; (800a6b4 <_isatty_r+0x1c>)
 800a69c:	2300      	movs	r3, #0
 800a69e:	4605      	mov	r5, r0
 800a6a0:	4608      	mov	r0, r1
 800a6a2:	6023      	str	r3, [r4, #0]
 800a6a4:	f7f8 f923 	bl	80028ee <_isatty>
 800a6a8:	1c43      	adds	r3, r0, #1
 800a6aa:	d102      	bne.n	800a6b2 <_isatty_r+0x1a>
 800a6ac:	6823      	ldr	r3, [r4, #0]
 800a6ae:	b103      	cbz	r3, 800a6b2 <_isatty_r+0x1a>
 800a6b0:	602b      	str	r3, [r5, #0]
 800a6b2:	bd38      	pop	{r3, r4, r5, pc}
 800a6b4:	20001564 	.word	0x20001564

0800a6b8 <_lseek_r>:
 800a6b8:	b538      	push	{r3, r4, r5, lr}
 800a6ba:	4c07      	ldr	r4, [pc, #28]	; (800a6d8 <_lseek_r+0x20>)
 800a6bc:	4605      	mov	r5, r0
 800a6be:	4608      	mov	r0, r1
 800a6c0:	4611      	mov	r1, r2
 800a6c2:	2200      	movs	r2, #0
 800a6c4:	6022      	str	r2, [r4, #0]
 800a6c6:	461a      	mov	r2, r3
 800a6c8:	f7f8 f91c 	bl	8002904 <_lseek>
 800a6cc:	1c43      	adds	r3, r0, #1
 800a6ce:	d102      	bne.n	800a6d6 <_lseek_r+0x1e>
 800a6d0:	6823      	ldr	r3, [r4, #0]
 800a6d2:	b103      	cbz	r3, 800a6d6 <_lseek_r+0x1e>
 800a6d4:	602b      	str	r3, [r5, #0]
 800a6d6:	bd38      	pop	{r3, r4, r5, pc}
 800a6d8:	20001564 	.word	0x20001564

0800a6dc <memcpy>:
 800a6dc:	b510      	push	{r4, lr}
 800a6de:	1e43      	subs	r3, r0, #1
 800a6e0:	440a      	add	r2, r1
 800a6e2:	4291      	cmp	r1, r2
 800a6e4:	d100      	bne.n	800a6e8 <memcpy+0xc>
 800a6e6:	bd10      	pop	{r4, pc}
 800a6e8:	f811 4b01 	ldrb.w	r4, [r1], #1
 800a6ec:	f803 4f01 	strb.w	r4, [r3, #1]!
 800a6f0:	e7f7      	b.n	800a6e2 <memcpy+0x6>

0800a6f2 <memmove>:
 800a6f2:	4288      	cmp	r0, r1
 800a6f4:	b510      	push	{r4, lr}
 800a6f6:	eb01 0302 	add.w	r3, r1, r2
 800a6fa:	d807      	bhi.n	800a70c <memmove+0x1a>
 800a6fc:	1e42      	subs	r2, r0, #1
 800a6fe:	4299      	cmp	r1, r3
 800a700:	d00a      	beq.n	800a718 <memmove+0x26>
 800a702:	f811 4b01 	ldrb.w	r4, [r1], #1
 800a706:	f802 4f01 	strb.w	r4, [r2, #1]!
 800a70a:	e7f8      	b.n	800a6fe <memmove+0xc>
 800a70c:	4283      	cmp	r3, r0
 800a70e:	d9f5      	bls.n	800a6fc <memmove+0xa>
 800a710:	1881      	adds	r1, r0, r2
 800a712:	1ad2      	subs	r2, r2, r3
 800a714:	42d3      	cmn	r3, r2
 800a716:	d100      	bne.n	800a71a <memmove+0x28>
 800a718:	bd10      	pop	{r4, pc}
 800a71a:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800a71e:	f801 4d01 	strb.w	r4, [r1, #-1]!
 800a722:	e7f7      	b.n	800a714 <memmove+0x22>

0800a724 <__malloc_lock>:
 800a724:	4770      	bx	lr

0800a726 <__malloc_unlock>:
 800a726:	4770      	bx	lr

0800a728 <_realloc_r>:
 800a728:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a72a:	4607      	mov	r7, r0
 800a72c:	4614      	mov	r4, r2
 800a72e:	460e      	mov	r6, r1
 800a730:	b921      	cbnz	r1, 800a73c <_realloc_r+0x14>
 800a732:	4611      	mov	r1, r2
 800a734:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 800a738:	f7ff bbf2 	b.w	8009f20 <_malloc_r>
 800a73c:	b922      	cbnz	r2, 800a748 <_realloc_r+0x20>
 800a73e:	f7ff fba1 	bl	8009e84 <_free_r>
 800a742:	4625      	mov	r5, r4
 800a744:	4628      	mov	r0, r5
 800a746:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800a748:	f000 f826 	bl	800a798 <_malloc_usable_size_r>
 800a74c:	42a0      	cmp	r0, r4
 800a74e:	d20f      	bcs.n	800a770 <_realloc_r+0x48>
 800a750:	4621      	mov	r1, r4
 800a752:	4638      	mov	r0, r7
 800a754:	f7ff fbe4 	bl	8009f20 <_malloc_r>
 800a758:	4605      	mov	r5, r0
 800a75a:	2800      	cmp	r0, #0
 800a75c:	d0f2      	beq.n	800a744 <_realloc_r+0x1c>
 800a75e:	4631      	mov	r1, r6
 800a760:	4622      	mov	r2, r4
 800a762:	f7ff ffbb 	bl	800a6dc <memcpy>
 800a766:	4631      	mov	r1, r6
 800a768:	4638      	mov	r0, r7
 800a76a:	f7ff fb8b 	bl	8009e84 <_free_r>
 800a76e:	e7e9      	b.n	800a744 <_realloc_r+0x1c>
 800a770:	4635      	mov	r5, r6
 800a772:	e7e7      	b.n	800a744 <_realloc_r+0x1c>

0800a774 <_read_r>:
 800a774:	b538      	push	{r3, r4, r5, lr}
 800a776:	4c07      	ldr	r4, [pc, #28]	; (800a794 <_read_r+0x20>)
 800a778:	4605      	mov	r5, r0
 800a77a:	4608      	mov	r0, r1
 800a77c:	4611      	mov	r1, r2
 800a77e:	2200      	movs	r2, #0
 800a780:	6022      	str	r2, [r4, #0]
 800a782:	461a      	mov	r2, r3
 800a784:	f7f8 f87a 	bl	800287c <_read>
 800a788:	1c43      	adds	r3, r0, #1
 800a78a:	d102      	bne.n	800a792 <_read_r+0x1e>
 800a78c:	6823      	ldr	r3, [r4, #0]
 800a78e:	b103      	cbz	r3, 800a792 <_read_r+0x1e>
 800a790:	602b      	str	r3, [r5, #0]
 800a792:	bd38      	pop	{r3, r4, r5, pc}
 800a794:	20001564 	.word	0x20001564

0800a798 <_malloc_usable_size_r>:
 800a798:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800a79c:	1f18      	subs	r0, r3, #4
 800a79e:	2b00      	cmp	r3, #0
 800a7a0:	bfbc      	itt	lt
 800a7a2:	580b      	ldrlt	r3, [r1, r0]
 800a7a4:	18c0      	addlt	r0, r0, r3
 800a7a6:	4770      	bx	lr

0800a7a8 <_init>:
 800a7a8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a7aa:	bf00      	nop
 800a7ac:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a7ae:	bc08      	pop	{r3}
 800a7b0:	469e      	mov	lr, r3
 800a7b2:	4770      	bx	lr

0800a7b4 <_fini>:
 800a7b4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a7b6:	bf00      	nop
 800a7b8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a7ba:	bc08      	pop	{r3}
 800a7bc:	469e      	mov	lr, r3
 800a7be:	4770      	bx	lr
