
FunctionGeneratorCortexM4_SW_V1.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00015684  080001e0  080001e0  000101e0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00001420  08015868  08015868  00025868  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08016c88  08016c88  00032088  2**0
                  CONTENTS
  4 .ARM          00000000  08016c88  08016c88  00032088  2**0
                  CONTENTS
  5 .preinit_array 00000000  08016c88  08016c88  00032088  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08016c88  08016c88  00026c88  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08016c8c  08016c8c  00026c8c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00002088  20000000  08016c90  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000bf8  20002088  08018d18  00032088  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20002c80  08018d18  00032c80  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00032088  2**0
                  CONTENTS, READONLY
 12 .debug_info   0004a39e  00000000  00000000  000320b8  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00007e3f  00000000  00000000  0007c456  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 000023b0  00000000  00000000  00084298  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00001f40  00000000  00000000  00086648  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00035c12  00000000  00000000  00088588  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   00030421  00000000  00000000  000be19a  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    00126c2a  00000000  00000000  000ee5bb  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  002151e5  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00009d4c  00000000  00000000  00215260  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001e0 <__do_global_dtors_aux>:
 80001e0:	b510      	push	{r4, lr}
 80001e2:	4c05      	ldr	r4, [pc, #20]	; (80001f8 <__do_global_dtors_aux+0x18>)
 80001e4:	7823      	ldrb	r3, [r4, #0]
 80001e6:	b933      	cbnz	r3, 80001f6 <__do_global_dtors_aux+0x16>
 80001e8:	4b04      	ldr	r3, [pc, #16]	; (80001fc <__do_global_dtors_aux+0x1c>)
 80001ea:	b113      	cbz	r3, 80001f2 <__do_global_dtors_aux+0x12>
 80001ec:	4804      	ldr	r0, [pc, #16]	; (8000200 <__do_global_dtors_aux+0x20>)
 80001ee:	f3af 8000 	nop.w
 80001f2:	2301      	movs	r3, #1
 80001f4:	7023      	strb	r3, [r4, #0]
 80001f6:	bd10      	pop	{r4, pc}
 80001f8:	20002088 	.word	0x20002088
 80001fc:	00000000 	.word	0x00000000
 8000200:	0801584c 	.word	0x0801584c

08000204 <frame_dummy>:
 8000204:	b508      	push	{r3, lr}
 8000206:	4b03      	ldr	r3, [pc, #12]	; (8000214 <frame_dummy+0x10>)
 8000208:	b11b      	cbz	r3, 8000212 <frame_dummy+0xe>
 800020a:	4903      	ldr	r1, [pc, #12]	; (8000218 <frame_dummy+0x14>)
 800020c:	4803      	ldr	r0, [pc, #12]	; (800021c <frame_dummy+0x18>)
 800020e:	f3af 8000 	nop.w
 8000212:	bd08      	pop	{r3, pc}
 8000214:	00000000 	.word	0x00000000
 8000218:	2000208c 	.word	0x2000208c
 800021c:	0801584c 	.word	0x0801584c

08000220 <strlen>:
 8000220:	4603      	mov	r3, r0
 8000222:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000226:	2a00      	cmp	r2, #0
 8000228:	d1fb      	bne.n	8000222 <strlen+0x2>
 800022a:	1a18      	subs	r0, r3, r0
 800022c:	3801      	subs	r0, #1
 800022e:	4770      	bx	lr

08000230 <memchr>:
 8000230:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000234:	2a10      	cmp	r2, #16
 8000236:	db2b      	blt.n	8000290 <memchr+0x60>
 8000238:	f010 0f07 	tst.w	r0, #7
 800023c:	d008      	beq.n	8000250 <memchr+0x20>
 800023e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000242:	3a01      	subs	r2, #1
 8000244:	428b      	cmp	r3, r1
 8000246:	d02d      	beq.n	80002a4 <memchr+0x74>
 8000248:	f010 0f07 	tst.w	r0, #7
 800024c:	b342      	cbz	r2, 80002a0 <memchr+0x70>
 800024e:	d1f6      	bne.n	800023e <memchr+0xe>
 8000250:	b4f0      	push	{r4, r5, r6, r7}
 8000252:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000256:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800025a:	f022 0407 	bic.w	r4, r2, #7
 800025e:	f07f 0700 	mvns.w	r7, #0
 8000262:	2300      	movs	r3, #0
 8000264:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000268:	3c08      	subs	r4, #8
 800026a:	ea85 0501 	eor.w	r5, r5, r1
 800026e:	ea86 0601 	eor.w	r6, r6, r1
 8000272:	fa85 f547 	uadd8	r5, r5, r7
 8000276:	faa3 f587 	sel	r5, r3, r7
 800027a:	fa86 f647 	uadd8	r6, r6, r7
 800027e:	faa5 f687 	sel	r6, r5, r7
 8000282:	b98e      	cbnz	r6, 80002a8 <memchr+0x78>
 8000284:	d1ee      	bne.n	8000264 <memchr+0x34>
 8000286:	bcf0      	pop	{r4, r5, r6, r7}
 8000288:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800028c:	f002 0207 	and.w	r2, r2, #7
 8000290:	b132      	cbz	r2, 80002a0 <memchr+0x70>
 8000292:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000296:	3a01      	subs	r2, #1
 8000298:	ea83 0301 	eor.w	r3, r3, r1
 800029c:	b113      	cbz	r3, 80002a4 <memchr+0x74>
 800029e:	d1f8      	bne.n	8000292 <memchr+0x62>
 80002a0:	2000      	movs	r0, #0
 80002a2:	4770      	bx	lr
 80002a4:	3801      	subs	r0, #1
 80002a6:	4770      	bx	lr
 80002a8:	2d00      	cmp	r5, #0
 80002aa:	bf06      	itte	eq
 80002ac:	4635      	moveq	r5, r6
 80002ae:	3803      	subeq	r0, #3
 80002b0:	3807      	subne	r0, #7
 80002b2:	f015 0f01 	tst.w	r5, #1
 80002b6:	d107      	bne.n	80002c8 <memchr+0x98>
 80002b8:	3001      	adds	r0, #1
 80002ba:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002be:	bf02      	ittt	eq
 80002c0:	3001      	addeq	r0, #1
 80002c2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002c6:	3001      	addeq	r0, #1
 80002c8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ca:	3801      	subs	r0, #1
 80002cc:	4770      	bx	lr
 80002ce:	bf00      	nop

080002d0 <__aeabi_drsub>:
 80002d0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002d4:	e002      	b.n	80002dc <__adddf3>
 80002d6:	bf00      	nop

080002d8 <__aeabi_dsub>:
 80002d8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002dc <__adddf3>:
 80002dc:	b530      	push	{r4, r5, lr}
 80002de:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002e2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002e6:	ea94 0f05 	teq	r4, r5
 80002ea:	bf08      	it	eq
 80002ec:	ea90 0f02 	teqeq	r0, r2
 80002f0:	bf1f      	itttt	ne
 80002f2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002f6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002fa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002fe:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000302:	f000 80e2 	beq.w	80004ca <__adddf3+0x1ee>
 8000306:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800030a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800030e:	bfb8      	it	lt
 8000310:	426d      	neglt	r5, r5
 8000312:	dd0c      	ble.n	800032e <__adddf3+0x52>
 8000314:	442c      	add	r4, r5
 8000316:	ea80 0202 	eor.w	r2, r0, r2
 800031a:	ea81 0303 	eor.w	r3, r1, r3
 800031e:	ea82 0000 	eor.w	r0, r2, r0
 8000322:	ea83 0101 	eor.w	r1, r3, r1
 8000326:	ea80 0202 	eor.w	r2, r0, r2
 800032a:	ea81 0303 	eor.w	r3, r1, r3
 800032e:	2d36      	cmp	r5, #54	; 0x36
 8000330:	bf88      	it	hi
 8000332:	bd30      	pophi	{r4, r5, pc}
 8000334:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000338:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800033c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000340:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000344:	d002      	beq.n	800034c <__adddf3+0x70>
 8000346:	4240      	negs	r0, r0
 8000348:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800034c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000350:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000354:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000358:	d002      	beq.n	8000360 <__adddf3+0x84>
 800035a:	4252      	negs	r2, r2
 800035c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000360:	ea94 0f05 	teq	r4, r5
 8000364:	f000 80a7 	beq.w	80004b6 <__adddf3+0x1da>
 8000368:	f1a4 0401 	sub.w	r4, r4, #1
 800036c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000370:	db0d      	blt.n	800038e <__adddf3+0xb2>
 8000372:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000376:	fa22 f205 	lsr.w	r2, r2, r5
 800037a:	1880      	adds	r0, r0, r2
 800037c:	f141 0100 	adc.w	r1, r1, #0
 8000380:	fa03 f20e 	lsl.w	r2, r3, lr
 8000384:	1880      	adds	r0, r0, r2
 8000386:	fa43 f305 	asr.w	r3, r3, r5
 800038a:	4159      	adcs	r1, r3
 800038c:	e00e      	b.n	80003ac <__adddf3+0xd0>
 800038e:	f1a5 0520 	sub.w	r5, r5, #32
 8000392:	f10e 0e20 	add.w	lr, lr, #32
 8000396:	2a01      	cmp	r2, #1
 8000398:	fa03 fc0e 	lsl.w	ip, r3, lr
 800039c:	bf28      	it	cs
 800039e:	f04c 0c02 	orrcs.w	ip, ip, #2
 80003a2:	fa43 f305 	asr.w	r3, r3, r5
 80003a6:	18c0      	adds	r0, r0, r3
 80003a8:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80003ac:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003b0:	d507      	bpl.n	80003c2 <__adddf3+0xe6>
 80003b2:	f04f 0e00 	mov.w	lr, #0
 80003b6:	f1dc 0c00 	rsbs	ip, ip, #0
 80003ba:	eb7e 0000 	sbcs.w	r0, lr, r0
 80003be:	eb6e 0101 	sbc.w	r1, lr, r1
 80003c2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80003c6:	d31b      	bcc.n	8000400 <__adddf3+0x124>
 80003c8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80003cc:	d30c      	bcc.n	80003e8 <__adddf3+0x10c>
 80003ce:	0849      	lsrs	r1, r1, #1
 80003d0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003d4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003d8:	f104 0401 	add.w	r4, r4, #1
 80003dc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003e0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003e4:	f080 809a 	bcs.w	800051c <__adddf3+0x240>
 80003e8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003ec:	bf08      	it	eq
 80003ee:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003f2:	f150 0000 	adcs.w	r0, r0, #0
 80003f6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003fa:	ea41 0105 	orr.w	r1, r1, r5
 80003fe:	bd30      	pop	{r4, r5, pc}
 8000400:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000404:	4140      	adcs	r0, r0
 8000406:	eb41 0101 	adc.w	r1, r1, r1
 800040a:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 800040e:	f1a4 0401 	sub.w	r4, r4, #1
 8000412:	d1e9      	bne.n	80003e8 <__adddf3+0x10c>
 8000414:	f091 0f00 	teq	r1, #0
 8000418:	bf04      	itt	eq
 800041a:	4601      	moveq	r1, r0
 800041c:	2000      	moveq	r0, #0
 800041e:	fab1 f381 	clz	r3, r1
 8000422:	bf08      	it	eq
 8000424:	3320      	addeq	r3, #32
 8000426:	f1a3 030b 	sub.w	r3, r3, #11
 800042a:	f1b3 0220 	subs.w	r2, r3, #32
 800042e:	da0c      	bge.n	800044a <__adddf3+0x16e>
 8000430:	320c      	adds	r2, #12
 8000432:	dd08      	ble.n	8000446 <__adddf3+0x16a>
 8000434:	f102 0c14 	add.w	ip, r2, #20
 8000438:	f1c2 020c 	rsb	r2, r2, #12
 800043c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000440:	fa21 f102 	lsr.w	r1, r1, r2
 8000444:	e00c      	b.n	8000460 <__adddf3+0x184>
 8000446:	f102 0214 	add.w	r2, r2, #20
 800044a:	bfd8      	it	le
 800044c:	f1c2 0c20 	rsble	ip, r2, #32
 8000450:	fa01 f102 	lsl.w	r1, r1, r2
 8000454:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000458:	bfdc      	itt	le
 800045a:	ea41 010c 	orrle.w	r1, r1, ip
 800045e:	4090      	lslle	r0, r2
 8000460:	1ae4      	subs	r4, r4, r3
 8000462:	bfa2      	ittt	ge
 8000464:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000468:	4329      	orrge	r1, r5
 800046a:	bd30      	popge	{r4, r5, pc}
 800046c:	ea6f 0404 	mvn.w	r4, r4
 8000470:	3c1f      	subs	r4, #31
 8000472:	da1c      	bge.n	80004ae <__adddf3+0x1d2>
 8000474:	340c      	adds	r4, #12
 8000476:	dc0e      	bgt.n	8000496 <__adddf3+0x1ba>
 8000478:	f104 0414 	add.w	r4, r4, #20
 800047c:	f1c4 0220 	rsb	r2, r4, #32
 8000480:	fa20 f004 	lsr.w	r0, r0, r4
 8000484:	fa01 f302 	lsl.w	r3, r1, r2
 8000488:	ea40 0003 	orr.w	r0, r0, r3
 800048c:	fa21 f304 	lsr.w	r3, r1, r4
 8000490:	ea45 0103 	orr.w	r1, r5, r3
 8000494:	bd30      	pop	{r4, r5, pc}
 8000496:	f1c4 040c 	rsb	r4, r4, #12
 800049a:	f1c4 0220 	rsb	r2, r4, #32
 800049e:	fa20 f002 	lsr.w	r0, r0, r2
 80004a2:	fa01 f304 	lsl.w	r3, r1, r4
 80004a6:	ea40 0003 	orr.w	r0, r0, r3
 80004aa:	4629      	mov	r1, r5
 80004ac:	bd30      	pop	{r4, r5, pc}
 80004ae:	fa21 f004 	lsr.w	r0, r1, r4
 80004b2:	4629      	mov	r1, r5
 80004b4:	bd30      	pop	{r4, r5, pc}
 80004b6:	f094 0f00 	teq	r4, #0
 80004ba:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80004be:	bf06      	itte	eq
 80004c0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80004c4:	3401      	addeq	r4, #1
 80004c6:	3d01      	subne	r5, #1
 80004c8:	e74e      	b.n	8000368 <__adddf3+0x8c>
 80004ca:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ce:	bf18      	it	ne
 80004d0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004d4:	d029      	beq.n	800052a <__adddf3+0x24e>
 80004d6:	ea94 0f05 	teq	r4, r5
 80004da:	bf08      	it	eq
 80004dc:	ea90 0f02 	teqeq	r0, r2
 80004e0:	d005      	beq.n	80004ee <__adddf3+0x212>
 80004e2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004e6:	bf04      	itt	eq
 80004e8:	4619      	moveq	r1, r3
 80004ea:	4610      	moveq	r0, r2
 80004ec:	bd30      	pop	{r4, r5, pc}
 80004ee:	ea91 0f03 	teq	r1, r3
 80004f2:	bf1e      	ittt	ne
 80004f4:	2100      	movne	r1, #0
 80004f6:	2000      	movne	r0, #0
 80004f8:	bd30      	popne	{r4, r5, pc}
 80004fa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004fe:	d105      	bne.n	800050c <__adddf3+0x230>
 8000500:	0040      	lsls	r0, r0, #1
 8000502:	4149      	adcs	r1, r1
 8000504:	bf28      	it	cs
 8000506:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800050a:	bd30      	pop	{r4, r5, pc}
 800050c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000510:	bf3c      	itt	cc
 8000512:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000516:	bd30      	popcc	{r4, r5, pc}
 8000518:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800051c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000520:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000524:	f04f 0000 	mov.w	r0, #0
 8000528:	bd30      	pop	{r4, r5, pc}
 800052a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800052e:	bf1a      	itte	ne
 8000530:	4619      	movne	r1, r3
 8000532:	4610      	movne	r0, r2
 8000534:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000538:	bf1c      	itt	ne
 800053a:	460b      	movne	r3, r1
 800053c:	4602      	movne	r2, r0
 800053e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000542:	bf06      	itte	eq
 8000544:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000548:	ea91 0f03 	teqeq	r1, r3
 800054c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000550:	bd30      	pop	{r4, r5, pc}
 8000552:	bf00      	nop

08000554 <__aeabi_ui2d>:
 8000554:	f090 0f00 	teq	r0, #0
 8000558:	bf04      	itt	eq
 800055a:	2100      	moveq	r1, #0
 800055c:	4770      	bxeq	lr
 800055e:	b530      	push	{r4, r5, lr}
 8000560:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000564:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000568:	f04f 0500 	mov.w	r5, #0
 800056c:	f04f 0100 	mov.w	r1, #0
 8000570:	e750      	b.n	8000414 <__adddf3+0x138>
 8000572:	bf00      	nop

08000574 <__aeabi_i2d>:
 8000574:	f090 0f00 	teq	r0, #0
 8000578:	bf04      	itt	eq
 800057a:	2100      	moveq	r1, #0
 800057c:	4770      	bxeq	lr
 800057e:	b530      	push	{r4, r5, lr}
 8000580:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000584:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000588:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800058c:	bf48      	it	mi
 800058e:	4240      	negmi	r0, r0
 8000590:	f04f 0100 	mov.w	r1, #0
 8000594:	e73e      	b.n	8000414 <__adddf3+0x138>
 8000596:	bf00      	nop

08000598 <__aeabi_f2d>:
 8000598:	0042      	lsls	r2, r0, #1
 800059a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800059e:	ea4f 0131 	mov.w	r1, r1, rrx
 80005a2:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80005a6:	bf1f      	itttt	ne
 80005a8:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80005ac:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80005b0:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80005b4:	4770      	bxne	lr
 80005b6:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80005ba:	bf08      	it	eq
 80005bc:	4770      	bxeq	lr
 80005be:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80005c2:	bf04      	itt	eq
 80005c4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80005c8:	4770      	bxeq	lr
 80005ca:	b530      	push	{r4, r5, lr}
 80005cc:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005d0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005d4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005d8:	e71c      	b.n	8000414 <__adddf3+0x138>
 80005da:	bf00      	nop

080005dc <__aeabi_ul2d>:
 80005dc:	ea50 0201 	orrs.w	r2, r0, r1
 80005e0:	bf08      	it	eq
 80005e2:	4770      	bxeq	lr
 80005e4:	b530      	push	{r4, r5, lr}
 80005e6:	f04f 0500 	mov.w	r5, #0
 80005ea:	e00a      	b.n	8000602 <__aeabi_l2d+0x16>

080005ec <__aeabi_l2d>:
 80005ec:	ea50 0201 	orrs.w	r2, r0, r1
 80005f0:	bf08      	it	eq
 80005f2:	4770      	bxeq	lr
 80005f4:	b530      	push	{r4, r5, lr}
 80005f6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005fa:	d502      	bpl.n	8000602 <__aeabi_l2d+0x16>
 80005fc:	4240      	negs	r0, r0
 80005fe:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000602:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000606:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800060a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800060e:	f43f aed8 	beq.w	80003c2 <__adddf3+0xe6>
 8000612:	f04f 0203 	mov.w	r2, #3
 8000616:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800061a:	bf18      	it	ne
 800061c:	3203      	addne	r2, #3
 800061e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000622:	bf18      	it	ne
 8000624:	3203      	addne	r2, #3
 8000626:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800062a:	f1c2 0320 	rsb	r3, r2, #32
 800062e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000632:	fa20 f002 	lsr.w	r0, r0, r2
 8000636:	fa01 fe03 	lsl.w	lr, r1, r3
 800063a:	ea40 000e 	orr.w	r0, r0, lr
 800063e:	fa21 f102 	lsr.w	r1, r1, r2
 8000642:	4414      	add	r4, r2
 8000644:	e6bd      	b.n	80003c2 <__adddf3+0xe6>
 8000646:	bf00      	nop

08000648 <__aeabi_dmul>:
 8000648:	b570      	push	{r4, r5, r6, lr}
 800064a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800064e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000652:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000656:	bf1d      	ittte	ne
 8000658:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800065c:	ea94 0f0c 	teqne	r4, ip
 8000660:	ea95 0f0c 	teqne	r5, ip
 8000664:	f000 f8de 	bleq	8000824 <__aeabi_dmul+0x1dc>
 8000668:	442c      	add	r4, r5
 800066a:	ea81 0603 	eor.w	r6, r1, r3
 800066e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000672:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000676:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800067a:	bf18      	it	ne
 800067c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000680:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000684:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000688:	d038      	beq.n	80006fc <__aeabi_dmul+0xb4>
 800068a:	fba0 ce02 	umull	ip, lr, r0, r2
 800068e:	f04f 0500 	mov.w	r5, #0
 8000692:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000696:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800069a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800069e:	f04f 0600 	mov.w	r6, #0
 80006a2:	fbe1 5603 	umlal	r5, r6, r1, r3
 80006a6:	f09c 0f00 	teq	ip, #0
 80006aa:	bf18      	it	ne
 80006ac:	f04e 0e01 	orrne.w	lr, lr, #1
 80006b0:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80006b4:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80006b8:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80006bc:	d204      	bcs.n	80006c8 <__aeabi_dmul+0x80>
 80006be:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006c2:	416d      	adcs	r5, r5
 80006c4:	eb46 0606 	adc.w	r6, r6, r6
 80006c8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006cc:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006d0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006d4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006d8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006dc:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006e0:	bf88      	it	hi
 80006e2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006e6:	d81e      	bhi.n	8000726 <__aeabi_dmul+0xde>
 80006e8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006ec:	bf08      	it	eq
 80006ee:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006f2:	f150 0000 	adcs.w	r0, r0, #0
 80006f6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006fa:	bd70      	pop	{r4, r5, r6, pc}
 80006fc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000700:	ea46 0101 	orr.w	r1, r6, r1
 8000704:	ea40 0002 	orr.w	r0, r0, r2
 8000708:	ea81 0103 	eor.w	r1, r1, r3
 800070c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000710:	bfc2      	ittt	gt
 8000712:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000716:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800071a:	bd70      	popgt	{r4, r5, r6, pc}
 800071c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000720:	f04f 0e00 	mov.w	lr, #0
 8000724:	3c01      	subs	r4, #1
 8000726:	f300 80ab 	bgt.w	8000880 <__aeabi_dmul+0x238>
 800072a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800072e:	bfde      	ittt	le
 8000730:	2000      	movle	r0, #0
 8000732:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000736:	bd70      	pople	{r4, r5, r6, pc}
 8000738:	f1c4 0400 	rsb	r4, r4, #0
 800073c:	3c20      	subs	r4, #32
 800073e:	da35      	bge.n	80007ac <__aeabi_dmul+0x164>
 8000740:	340c      	adds	r4, #12
 8000742:	dc1b      	bgt.n	800077c <__aeabi_dmul+0x134>
 8000744:	f104 0414 	add.w	r4, r4, #20
 8000748:	f1c4 0520 	rsb	r5, r4, #32
 800074c:	fa00 f305 	lsl.w	r3, r0, r5
 8000750:	fa20 f004 	lsr.w	r0, r0, r4
 8000754:	fa01 f205 	lsl.w	r2, r1, r5
 8000758:	ea40 0002 	orr.w	r0, r0, r2
 800075c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000760:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000764:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000768:	fa21 f604 	lsr.w	r6, r1, r4
 800076c:	eb42 0106 	adc.w	r1, r2, r6
 8000770:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000774:	bf08      	it	eq
 8000776:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800077a:	bd70      	pop	{r4, r5, r6, pc}
 800077c:	f1c4 040c 	rsb	r4, r4, #12
 8000780:	f1c4 0520 	rsb	r5, r4, #32
 8000784:	fa00 f304 	lsl.w	r3, r0, r4
 8000788:	fa20 f005 	lsr.w	r0, r0, r5
 800078c:	fa01 f204 	lsl.w	r2, r1, r4
 8000790:	ea40 0002 	orr.w	r0, r0, r2
 8000794:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000798:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800079c:	f141 0100 	adc.w	r1, r1, #0
 80007a0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007a4:	bf08      	it	eq
 80007a6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007aa:	bd70      	pop	{r4, r5, r6, pc}
 80007ac:	f1c4 0520 	rsb	r5, r4, #32
 80007b0:	fa00 f205 	lsl.w	r2, r0, r5
 80007b4:	ea4e 0e02 	orr.w	lr, lr, r2
 80007b8:	fa20 f304 	lsr.w	r3, r0, r4
 80007bc:	fa01 f205 	lsl.w	r2, r1, r5
 80007c0:	ea43 0302 	orr.w	r3, r3, r2
 80007c4:	fa21 f004 	lsr.w	r0, r1, r4
 80007c8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007cc:	fa21 f204 	lsr.w	r2, r1, r4
 80007d0:	ea20 0002 	bic.w	r0, r0, r2
 80007d4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007d8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007dc:	bf08      	it	eq
 80007de:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007e2:	bd70      	pop	{r4, r5, r6, pc}
 80007e4:	f094 0f00 	teq	r4, #0
 80007e8:	d10f      	bne.n	800080a <__aeabi_dmul+0x1c2>
 80007ea:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007ee:	0040      	lsls	r0, r0, #1
 80007f0:	eb41 0101 	adc.w	r1, r1, r1
 80007f4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007f8:	bf08      	it	eq
 80007fa:	3c01      	subeq	r4, #1
 80007fc:	d0f7      	beq.n	80007ee <__aeabi_dmul+0x1a6>
 80007fe:	ea41 0106 	orr.w	r1, r1, r6
 8000802:	f095 0f00 	teq	r5, #0
 8000806:	bf18      	it	ne
 8000808:	4770      	bxne	lr
 800080a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800080e:	0052      	lsls	r2, r2, #1
 8000810:	eb43 0303 	adc.w	r3, r3, r3
 8000814:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000818:	bf08      	it	eq
 800081a:	3d01      	subeq	r5, #1
 800081c:	d0f7      	beq.n	800080e <__aeabi_dmul+0x1c6>
 800081e:	ea43 0306 	orr.w	r3, r3, r6
 8000822:	4770      	bx	lr
 8000824:	ea94 0f0c 	teq	r4, ip
 8000828:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800082c:	bf18      	it	ne
 800082e:	ea95 0f0c 	teqne	r5, ip
 8000832:	d00c      	beq.n	800084e <__aeabi_dmul+0x206>
 8000834:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000838:	bf18      	it	ne
 800083a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800083e:	d1d1      	bne.n	80007e4 <__aeabi_dmul+0x19c>
 8000840:	ea81 0103 	eor.w	r1, r1, r3
 8000844:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000848:	f04f 0000 	mov.w	r0, #0
 800084c:	bd70      	pop	{r4, r5, r6, pc}
 800084e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000852:	bf06      	itte	eq
 8000854:	4610      	moveq	r0, r2
 8000856:	4619      	moveq	r1, r3
 8000858:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800085c:	d019      	beq.n	8000892 <__aeabi_dmul+0x24a>
 800085e:	ea94 0f0c 	teq	r4, ip
 8000862:	d102      	bne.n	800086a <__aeabi_dmul+0x222>
 8000864:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000868:	d113      	bne.n	8000892 <__aeabi_dmul+0x24a>
 800086a:	ea95 0f0c 	teq	r5, ip
 800086e:	d105      	bne.n	800087c <__aeabi_dmul+0x234>
 8000870:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000874:	bf1c      	itt	ne
 8000876:	4610      	movne	r0, r2
 8000878:	4619      	movne	r1, r3
 800087a:	d10a      	bne.n	8000892 <__aeabi_dmul+0x24a>
 800087c:	ea81 0103 	eor.w	r1, r1, r3
 8000880:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000884:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000888:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800088c:	f04f 0000 	mov.w	r0, #0
 8000890:	bd70      	pop	{r4, r5, r6, pc}
 8000892:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000896:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800089a:	bd70      	pop	{r4, r5, r6, pc}

0800089c <__aeabi_ddiv>:
 800089c:	b570      	push	{r4, r5, r6, lr}
 800089e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80008a2:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80008a6:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80008aa:	bf1d      	ittte	ne
 80008ac:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80008b0:	ea94 0f0c 	teqne	r4, ip
 80008b4:	ea95 0f0c 	teqne	r5, ip
 80008b8:	f000 f8a7 	bleq	8000a0a <__aeabi_ddiv+0x16e>
 80008bc:	eba4 0405 	sub.w	r4, r4, r5
 80008c0:	ea81 0e03 	eor.w	lr, r1, r3
 80008c4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008c8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008cc:	f000 8088 	beq.w	80009e0 <__aeabi_ddiv+0x144>
 80008d0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008d4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80008d8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008dc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008e0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008e4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008e8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008ec:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008f0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008f4:	429d      	cmp	r5, r3
 80008f6:	bf08      	it	eq
 80008f8:	4296      	cmpeq	r6, r2
 80008fa:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008fe:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000902:	d202      	bcs.n	800090a <__aeabi_ddiv+0x6e>
 8000904:	085b      	lsrs	r3, r3, #1
 8000906:	ea4f 0232 	mov.w	r2, r2, rrx
 800090a:	1ab6      	subs	r6, r6, r2
 800090c:	eb65 0503 	sbc.w	r5, r5, r3
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800091a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800091e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000922:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000926:	bf22      	ittt	cs
 8000928:	1ab6      	subcs	r6, r6, r2
 800092a:	4675      	movcs	r5, lr
 800092c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000930:	085b      	lsrs	r3, r3, #1
 8000932:	ea4f 0232 	mov.w	r2, r2, rrx
 8000936:	ebb6 0e02 	subs.w	lr, r6, r2
 800093a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800093e:	bf22      	ittt	cs
 8000940:	1ab6      	subcs	r6, r6, r2
 8000942:	4675      	movcs	r5, lr
 8000944:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000948:	085b      	lsrs	r3, r3, #1
 800094a:	ea4f 0232 	mov.w	r2, r2, rrx
 800094e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000952:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000956:	bf22      	ittt	cs
 8000958:	1ab6      	subcs	r6, r6, r2
 800095a:	4675      	movcs	r5, lr
 800095c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000960:	085b      	lsrs	r3, r3, #1
 8000962:	ea4f 0232 	mov.w	r2, r2, rrx
 8000966:	ebb6 0e02 	subs.w	lr, r6, r2
 800096a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800096e:	bf22      	ittt	cs
 8000970:	1ab6      	subcs	r6, r6, r2
 8000972:	4675      	movcs	r5, lr
 8000974:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000978:	ea55 0e06 	orrs.w	lr, r5, r6
 800097c:	d018      	beq.n	80009b0 <__aeabi_ddiv+0x114>
 800097e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000982:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000986:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800098a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800098e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000992:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000996:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800099a:	d1c0      	bne.n	800091e <__aeabi_ddiv+0x82>
 800099c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80009a0:	d10b      	bne.n	80009ba <__aeabi_ddiv+0x11e>
 80009a2:	ea41 0100 	orr.w	r1, r1, r0
 80009a6:	f04f 0000 	mov.w	r0, #0
 80009aa:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80009ae:	e7b6      	b.n	800091e <__aeabi_ddiv+0x82>
 80009b0:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80009b4:	bf04      	itt	eq
 80009b6:	4301      	orreq	r1, r0
 80009b8:	2000      	moveq	r0, #0
 80009ba:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80009be:	bf88      	it	hi
 80009c0:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80009c4:	f63f aeaf 	bhi.w	8000726 <__aeabi_dmul+0xde>
 80009c8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009cc:	bf04      	itt	eq
 80009ce:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009d2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009d6:	f150 0000 	adcs.w	r0, r0, #0
 80009da:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009de:	bd70      	pop	{r4, r5, r6, pc}
 80009e0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009e4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009e8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009ec:	bfc2      	ittt	gt
 80009ee:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009f2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009f6:	bd70      	popgt	{r4, r5, r6, pc}
 80009f8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009fc:	f04f 0e00 	mov.w	lr, #0
 8000a00:	3c01      	subs	r4, #1
 8000a02:	e690      	b.n	8000726 <__aeabi_dmul+0xde>
 8000a04:	ea45 0e06 	orr.w	lr, r5, r6
 8000a08:	e68d      	b.n	8000726 <__aeabi_dmul+0xde>
 8000a0a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000a0e:	ea94 0f0c 	teq	r4, ip
 8000a12:	bf08      	it	eq
 8000a14:	ea95 0f0c 	teqeq	r5, ip
 8000a18:	f43f af3b 	beq.w	8000892 <__aeabi_dmul+0x24a>
 8000a1c:	ea94 0f0c 	teq	r4, ip
 8000a20:	d10a      	bne.n	8000a38 <__aeabi_ddiv+0x19c>
 8000a22:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a26:	f47f af34 	bne.w	8000892 <__aeabi_dmul+0x24a>
 8000a2a:	ea95 0f0c 	teq	r5, ip
 8000a2e:	f47f af25 	bne.w	800087c <__aeabi_dmul+0x234>
 8000a32:	4610      	mov	r0, r2
 8000a34:	4619      	mov	r1, r3
 8000a36:	e72c      	b.n	8000892 <__aeabi_dmul+0x24a>
 8000a38:	ea95 0f0c 	teq	r5, ip
 8000a3c:	d106      	bne.n	8000a4c <__aeabi_ddiv+0x1b0>
 8000a3e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a42:	f43f aefd 	beq.w	8000840 <__aeabi_dmul+0x1f8>
 8000a46:	4610      	mov	r0, r2
 8000a48:	4619      	mov	r1, r3
 8000a4a:	e722      	b.n	8000892 <__aeabi_dmul+0x24a>
 8000a4c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a50:	bf18      	it	ne
 8000a52:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a56:	f47f aec5 	bne.w	80007e4 <__aeabi_dmul+0x19c>
 8000a5a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a5e:	f47f af0d 	bne.w	800087c <__aeabi_dmul+0x234>
 8000a62:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a66:	f47f aeeb 	bne.w	8000840 <__aeabi_dmul+0x1f8>
 8000a6a:	e712      	b.n	8000892 <__aeabi_dmul+0x24a>

08000a6c <__gedf2>:
 8000a6c:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
 8000a70:	e006      	b.n	8000a80 <__cmpdf2+0x4>
 8000a72:	bf00      	nop

08000a74 <__ledf2>:
 8000a74:	f04f 0c01 	mov.w	ip, #1
 8000a78:	e002      	b.n	8000a80 <__cmpdf2+0x4>
 8000a7a:	bf00      	nop

08000a7c <__cmpdf2>:
 8000a7c:	f04f 0c01 	mov.w	ip, #1
 8000a80:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a84:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a88:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a8c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a90:	bf18      	it	ne
 8000a92:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a96:	d01b      	beq.n	8000ad0 <__cmpdf2+0x54>
 8000a98:	b001      	add	sp, #4
 8000a9a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a9e:	bf0c      	ite	eq
 8000aa0:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000aa4:	ea91 0f03 	teqne	r1, r3
 8000aa8:	bf02      	ittt	eq
 8000aaa:	ea90 0f02 	teqeq	r0, r2
 8000aae:	2000      	moveq	r0, #0
 8000ab0:	4770      	bxeq	lr
 8000ab2:	f110 0f00 	cmn.w	r0, #0
 8000ab6:	ea91 0f03 	teq	r1, r3
 8000aba:	bf58      	it	pl
 8000abc:	4299      	cmppl	r1, r3
 8000abe:	bf08      	it	eq
 8000ac0:	4290      	cmpeq	r0, r2
 8000ac2:	bf2c      	ite	cs
 8000ac4:	17d8      	asrcs	r0, r3, #31
 8000ac6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000aca:	f040 0001 	orr.w	r0, r0, #1
 8000ace:	4770      	bx	lr
 8000ad0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ad4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ad8:	d102      	bne.n	8000ae0 <__cmpdf2+0x64>
 8000ada:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000ade:	d107      	bne.n	8000af0 <__cmpdf2+0x74>
 8000ae0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ae4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ae8:	d1d6      	bne.n	8000a98 <__cmpdf2+0x1c>
 8000aea:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000aee:	d0d3      	beq.n	8000a98 <__cmpdf2+0x1c>
 8000af0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000af4:	4770      	bx	lr
 8000af6:	bf00      	nop

08000af8 <__aeabi_cdrcmple>:
 8000af8:	4684      	mov	ip, r0
 8000afa:	4610      	mov	r0, r2
 8000afc:	4662      	mov	r2, ip
 8000afe:	468c      	mov	ip, r1
 8000b00:	4619      	mov	r1, r3
 8000b02:	4663      	mov	r3, ip
 8000b04:	e000      	b.n	8000b08 <__aeabi_cdcmpeq>
 8000b06:	bf00      	nop

08000b08 <__aeabi_cdcmpeq>:
 8000b08:	b501      	push	{r0, lr}
 8000b0a:	f7ff ffb7 	bl	8000a7c <__cmpdf2>
 8000b0e:	2800      	cmp	r0, #0
 8000b10:	bf48      	it	mi
 8000b12:	f110 0f00 	cmnmi.w	r0, #0
 8000b16:	bd01      	pop	{r0, pc}

08000b18 <__aeabi_dcmpeq>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff fff4 	bl	8000b08 <__aeabi_cdcmpeq>
 8000b20:	bf0c      	ite	eq
 8000b22:	2001      	moveq	r0, #1
 8000b24:	2000      	movne	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmplt>:
 8000b2c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b30:	f7ff ffea 	bl	8000b08 <__aeabi_cdcmpeq>
 8000b34:	bf34      	ite	cc
 8000b36:	2001      	movcc	r0, #1
 8000b38:	2000      	movcs	r0, #0
 8000b3a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b3e:	bf00      	nop

08000b40 <__aeabi_dcmple>:
 8000b40:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b44:	f7ff ffe0 	bl	8000b08 <__aeabi_cdcmpeq>
 8000b48:	bf94      	ite	ls
 8000b4a:	2001      	movls	r0, #1
 8000b4c:	2000      	movhi	r0, #0
 8000b4e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b52:	bf00      	nop

08000b54 <__aeabi_dcmpge>:
 8000b54:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b58:	f7ff ffce 	bl	8000af8 <__aeabi_cdrcmple>
 8000b5c:	bf94      	ite	ls
 8000b5e:	2001      	movls	r0, #1
 8000b60:	2000      	movhi	r0, #0
 8000b62:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b66:	bf00      	nop

08000b68 <__aeabi_dcmpgt>:
 8000b68:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b6c:	f7ff ffc4 	bl	8000af8 <__aeabi_cdrcmple>
 8000b70:	bf34      	ite	cc
 8000b72:	2001      	movcc	r0, #1
 8000b74:	2000      	movcs	r0, #0
 8000b76:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b7a:	bf00      	nop

08000b7c <__aeabi_dcmpun>:
 8000b7c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b80:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b84:	d102      	bne.n	8000b8c <__aeabi_dcmpun+0x10>
 8000b86:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b8a:	d10a      	bne.n	8000ba2 <__aeabi_dcmpun+0x26>
 8000b8c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b90:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b94:	d102      	bne.n	8000b9c <__aeabi_dcmpun+0x20>
 8000b96:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b9a:	d102      	bne.n	8000ba2 <__aeabi_dcmpun+0x26>
 8000b9c:	f04f 0000 	mov.w	r0, #0
 8000ba0:	4770      	bx	lr
 8000ba2:	f04f 0001 	mov.w	r0, #1
 8000ba6:	4770      	bx	lr

08000ba8 <__aeabi_d2iz>:
 8000ba8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bac:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000bb0:	d215      	bcs.n	8000bde <__aeabi_d2iz+0x36>
 8000bb2:	d511      	bpl.n	8000bd8 <__aeabi_d2iz+0x30>
 8000bb4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000bb8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bbc:	d912      	bls.n	8000be4 <__aeabi_d2iz+0x3c>
 8000bbe:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bc2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bc6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bca:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000bce:	fa23 f002 	lsr.w	r0, r3, r2
 8000bd2:	bf18      	it	ne
 8000bd4:	4240      	negne	r0, r0
 8000bd6:	4770      	bx	lr
 8000bd8:	f04f 0000 	mov.w	r0, #0
 8000bdc:	4770      	bx	lr
 8000bde:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000be2:	d105      	bne.n	8000bf0 <__aeabi_d2iz+0x48>
 8000be4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000be8:	bf08      	it	eq
 8000bea:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bee:	4770      	bx	lr
 8000bf0:	f04f 0000 	mov.w	r0, #0
 8000bf4:	4770      	bx	lr
 8000bf6:	bf00      	nop

08000bf8 <__aeabi_d2uiz>:
 8000bf8:	004a      	lsls	r2, r1, #1
 8000bfa:	d211      	bcs.n	8000c20 <__aeabi_d2uiz+0x28>
 8000bfc:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000c00:	d211      	bcs.n	8000c26 <__aeabi_d2uiz+0x2e>
 8000c02:	d50d      	bpl.n	8000c20 <__aeabi_d2uiz+0x28>
 8000c04:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000c08:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000c0c:	d40e      	bmi.n	8000c2c <__aeabi_d2uiz+0x34>
 8000c0e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c12:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000c16:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000c1a:	fa23 f002 	lsr.w	r0, r3, r2
 8000c1e:	4770      	bx	lr
 8000c20:	f04f 0000 	mov.w	r0, #0
 8000c24:	4770      	bx	lr
 8000c26:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000c2a:	d102      	bne.n	8000c32 <__aeabi_d2uiz+0x3a>
 8000c2c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000c30:	4770      	bx	lr
 8000c32:	f04f 0000 	mov.w	r0, #0
 8000c36:	4770      	bx	lr

08000c38 <__aeabi_d2f>:
 8000c38:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000c3c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000c40:	bf24      	itt	cs
 8000c42:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000c46:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000c4a:	d90d      	bls.n	8000c68 <__aeabi_d2f+0x30>
 8000c4c:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000c50:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c54:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c58:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000c5c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c60:	bf08      	it	eq
 8000c62:	f020 0001 	biceq.w	r0, r0, #1
 8000c66:	4770      	bx	lr
 8000c68:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000c6c:	d121      	bne.n	8000cb2 <__aeabi_d2f+0x7a>
 8000c6e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000c72:	bfbc      	itt	lt
 8000c74:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000c78:	4770      	bxlt	lr
 8000c7a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000c7e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c82:	f1c2 0218 	rsb	r2, r2, #24
 8000c86:	f1c2 0c20 	rsb	ip, r2, #32
 8000c8a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c8e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c92:	bf18      	it	ne
 8000c94:	f040 0001 	orrne.w	r0, r0, #1
 8000c98:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c9c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000ca0:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000ca4:	ea40 000c 	orr.w	r0, r0, ip
 8000ca8:	fa23 f302 	lsr.w	r3, r3, r2
 8000cac:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000cb0:	e7cc      	b.n	8000c4c <__aeabi_d2f+0x14>
 8000cb2:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000cb6:	d107      	bne.n	8000cc8 <__aeabi_d2f+0x90>
 8000cb8:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000cbc:	bf1e      	ittt	ne
 8000cbe:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000cc2:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000cc6:	4770      	bxne	lr
 8000cc8:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000ccc:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000cd0:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000cd4:	4770      	bx	lr
 8000cd6:	bf00      	nop

08000cd8 <BiasMenu_DrawMenu>:
 *	@param None
 *	@retval None
 *
 */
void BiasMenu_DrawMenu(eSystemState pMenu)
{
 8000cd8:	b580      	push	{r7, lr}
 8000cda:	b082      	sub	sp, #8
 8000cdc:	af00      	add	r7, sp, #0
 8000cde:	4603      	mov	r3, r0
 8000ce0:	71fb      	strb	r3, [r7, #7]
	switch(pMenu)
 8000ce2:	79fb      	ldrb	r3, [r7, #7]
 8000ce4:	2b0f      	cmp	r3, #15
 8000ce6:	d000      	beq.n	8000cea <BiasMenu_DrawMenu+0x12>
		case Bias_Menu_State:
			BiasMenu_DrawMainMenu();
			break;

		default:
			break;
 8000ce8:	e002      	b.n	8000cf0 <BiasMenu_DrawMenu+0x18>
			BiasMenu_DrawMainMenu();
 8000cea:	f000 f805 	bl	8000cf8 <BiasMenu_DrawMainMenu>
			break;
 8000cee:	bf00      	nop

	}
}
 8000cf0:	bf00      	nop
 8000cf2:	3708      	adds	r7, #8
 8000cf4:	46bd      	mov	sp, r7
 8000cf6:	bd80      	pop	{r7, pc}

08000cf8 <BiasMenu_DrawMainMenu>:
 *	@param None
 *	@retval None
 *
 */
void BiasMenu_DrawMainMenu()
{
 8000cf8:	b580      	push	{r7, lr}
 8000cfa:	b082      	sub	sp, #8
 8000cfc:	af02      	add	r7, sp, #8
	ILI9341_Draw_Text("OUT->BIAS", 	10, 10, BREADTRAIL_FGCOLOUR, 2, BREADTRAIL_BGCOLOUR);
 8000cfe:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000d02:	9301      	str	r3, [sp, #4]
 8000d04:	2302      	movs	r3, #2
 8000d06:	9300      	str	r3, [sp, #0]
 8000d08:	2300      	movs	r3, #0
 8000d0a:	220a      	movs	r2, #10
 8000d0c:	210a      	movs	r1, #10
 8000d0e:	4814      	ldr	r0, [pc, #80]	; (8000d60 <BiasMenu_DrawMainMenu+0x68>)
 8000d10:	f00f fe38 	bl	8010984 <ILI9341_Draw_Text>

	DM_DisplayFormattedOutput();
 8000d14:	f000 f8a0 	bl	8000e58 <DM_DisplayFormattedOutput>

	ILI9341_Draw_Text("POS", 15,   210, BTN1_TEXT_FGCOLOUR, 2, BTN1_TEXT_BGCOLOUR);
 8000d18:	f240 23fd 	movw	r3, #765	; 0x2fd
 8000d1c:	9301      	str	r3, [sp, #4]
 8000d1e:	2302      	movs	r3, #2
 8000d20:	9300      	str	r3, [sp, #0]
 8000d22:	2300      	movs	r3, #0
 8000d24:	22d2      	movs	r2, #210	; 0xd2
 8000d26:	210f      	movs	r1, #15
 8000d28:	480e      	ldr	r0, [pc, #56]	; (8000d64 <BiasMenu_DrawMainMenu+0x6c>)
 8000d2a:	f00f fe2b 	bl	8010984 <ILI9341_Draw_Text>
	ILI9341_Draw_Text("NEG", 97,  210, BTN2_TEXT_FGCOLOUR, 2, BTN2_TEXT_BGCOLOUR);
 8000d2e:	f241 43a2 	movw	r3, #5282	; 0x14a2
 8000d32:	9301      	str	r3, [sp, #4]
 8000d34:	2302      	movs	r3, #2
 8000d36:	9300      	str	r3, [sp, #0]
 8000d38:	2300      	movs	r3, #0
 8000d3a:	22d2      	movs	r2, #210	; 0xd2
 8000d3c:	2161      	movs	r1, #97	; 0x61
 8000d3e:	480a      	ldr	r0, [pc, #40]	; (8000d68 <BiasMenu_DrawMainMenu+0x70>)
 8000d40:	f00f fe20 	bl	8010984 <ILI9341_Draw_Text>
	ILI9341_Draw_Text("GND",  190, 210, BTN3_TEXT_FGCOLOUR, 2, BTN3_TEXT_BGCOLOUR);
 8000d44:	f64f 73e0 	movw	r3, #65504	; 0xffe0
 8000d48:	9301      	str	r3, [sp, #4]
 8000d4a:	2302      	movs	r3, #2
 8000d4c:	9300      	str	r3, [sp, #0]
 8000d4e:	2300      	movs	r3, #0
 8000d50:	22d2      	movs	r2, #210	; 0xd2
 8000d52:	21be      	movs	r1, #190	; 0xbe
 8000d54:	4805      	ldr	r0, [pc, #20]	; (8000d6c <BiasMenu_DrawMainMenu+0x74>)
 8000d56:	f00f fe15 	bl	8010984 <ILI9341_Draw_Text>

}
 8000d5a:	bf00      	nop
 8000d5c:	46bd      	mov	sp, r7
 8000d5e:	bd80      	pop	{r7, pc}
 8000d60:	08015868 	.word	0x08015868
 8000d64:	08015874 	.word	0x08015874
 8000d68:	08015878 	.word	0x08015878
 8000d6c:	0801587c 	.word	0x0801587c

08000d70 <DM_Init>:
 *	@param None
 *	@retval None
 *
 */
void DM_Init()
{
 8000d70:	b580      	push	{r7, lr}
 8000d72:	af00      	add	r7, sp, #0
	  ILI9341_Init();
 8000d74:	f00f fe47 	bl	8010a06 <ILI9341_Init>
	  ILI9341_Set_Rotation(SCREEN_HORIZONTAL_2);
 8000d78:	2003      	movs	r0, #3
 8000d7a:	f010 fa9d 	bl	80112b8 <ILI9341_Set_Rotation>
	  ILI9341_Fill_Screen(WHITE);
 8000d7e:	f64f 70ff 	movw	r0, #65535	; 0xffff
 8000d82:	f010 f87f 	bl	8010e84 <ILI9341_Fill_Screen>

}
 8000d86:	bf00      	nop
 8000d88:	bd80      	pop	{r7, pc}
	...

08000d8c <DM_PostInit>:
 *	@param None
 *	@retval None
 *
 */
void DM_PostInit()
{
 8000d8c:	b580      	push	{r7, lr}
 8000d8e:	b082      	sub	sp, #8
 8000d90:	af02      	add	r7, sp, #8

	ILI9341_Draw_Text("Initialising", 10, 10, NORMAL_TEXT_FGCOLOUR, 1, NORMAL_TEXT_BGCOLOUR);
 8000d92:	2300      	movs	r3, #0
 8000d94:	9301      	str	r3, [sp, #4]
 8000d96:	2301      	movs	r3, #1
 8000d98:	9300      	str	r3, [sp, #0]
 8000d9a:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8000d9e:	220a      	movs	r2, #10
 8000da0:	210a      	movs	r1, #10
 8000da2:	4806      	ldr	r0, [pc, #24]	; (8000dbc <DM_PostInit+0x30>)
 8000da4:	f00f fdee 	bl	8010984 <ILI9341_Draw_Text>
	HAL_Delay(500);
 8000da8:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000dac:	f008 f93c 	bl	8009028 <HAL_Delay>

	DM_RefreshScreen();
 8000db0:	f000 fd72 	bl	8001898 <DM_RefreshScreen>
	#ifdef EVENT_MENU_DEBUG
		  printf("Init Completed\n");
	#endif


}
 8000db4:	bf00      	nop
 8000db6:	46bd      	mov	sp, r7
 8000db8:	bd80      	pop	{r7, pc}
 8000dba:	bf00      	nop
 8000dbc:	08015880 	.word	0x08015880

08000dc0 <DM_UpdateDisplay>:
 *	@param None
 *	@retval None
 *
 */
void DM_UpdateDisplay()
{
 8000dc0:	b580      	push	{r7, lr}
 8000dc2:	b082      	sub	sp, #8
 8000dc4:	af00      	add	r7, sp, #0

	eSystemState tempState = EM_GetSystemState();
 8000dc6:	f003 fe7d 	bl	8004ac4 <EM_GetSystemState>
 8000dca:	4603      	mov	r3, r0
 8000dcc:	71fb      	strb	r3, [r7, #7]
	switch(tempState)
 8000dce:	79fb      	ldrb	r3, [r7, #7]
 8000dd0:	2b0f      	cmp	r3, #15
 8000dd2:	d83c      	bhi.n	8000e4e <DM_UpdateDisplay+0x8e>
 8000dd4:	a201      	add	r2, pc, #4	; (adr r2, 8000ddc <DM_UpdateDisplay+0x1c>)
 8000dd6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000dda:	bf00      	nop
 8000ddc:	08000e1d 	.word	0x08000e1d
 8000de0:	08000e1d 	.word	0x08000e1d
 8000de4:	08000e1d 	.word	0x08000e1d
 8000de8:	08000e27 	.word	0x08000e27
 8000dec:	08000e27 	.word	0x08000e27
 8000df0:	08000e27 	.word	0x08000e27
 8000df4:	08000e31 	.word	0x08000e31
 8000df8:	08000e31 	.word	0x08000e31
 8000dfc:	08000e31 	.word	0x08000e31
 8000e00:	08000e4f 	.word	0x08000e4f
 8000e04:	08000e3b 	.word	0x08000e3b
 8000e08:	08000e3b 	.word	0x08000e3b
 8000e0c:	08000e3b 	.word	0x08000e3b
 8000e10:	08000e3b 	.word	0x08000e3b
 8000e14:	08000e3b 	.word	0x08000e3b
 8000e18:	08000e45 	.word	0x08000e45
	{
		case Toplevel_Main_Menu_State:
		case Toplevel_Output_Menu_State:
		case Toplevel_Input_Menu_State:
			ToplevelMenu_DrawMenu(tempState);
 8000e1c:	79fb      	ldrb	r3, [r7, #7]
 8000e1e:	4618      	mov	r0, r3
 8000e20:	f003 f868 	bl	8003ef4 <ToplevelMenu_DrawMenu>
			break;
 8000e24:	e014      	b.n	8000e50 <DM_UpdateDisplay+0x90>

		case Func_Main_Menu_State:
		case Func_Signal_Menu_State:
		case Func_Aux_Menu_State:
			FuncMenu_DrawMenu(tempState);
 8000e26:	79fb      	ldrb	r3, [r7, #7]
 8000e28:	4618      	mov	r0, r3
 8000e2a:	f002 fab5 	bl	8003398 <FuncMenu_DrawMenu>
			break;
 8000e2e:	e00f      	b.n	8000e50 <DM_UpdateDisplay+0x90>

		case Gain_Main_Menu_State:
		case Gain_Signal_Menu_State:
		case Gain_Aux_Menu_State:
			GainMenu_DrawMenu(tempState);
 8000e30:	79fb      	ldrb	r3, [r7, #7]
 8000e32:	4618      	mov	r0, r3
 8000e34:	f002 ff84 	bl	8003d40 <GainMenu_DrawMenu>
			break;
 8000e38:	e00a      	b.n	8000e50 <DM_UpdateDisplay+0x90>
		case Freq_Main_Menu_State:
		case Freq_Preset_Menu_State:
		case Freq_Adjust_Menu_State:
		case Freq_Sweep_Menu_State:
		case Freq_Prescaler_Menu_State:
			FreqMenu_DrawMenu(tempState);
 8000e3a:	79fb      	ldrb	r3, [r7, #7]
 8000e3c:	4618      	mov	r0, r3
 8000e3e:	f000 fd8f 	bl	8001960 <FreqMenu_DrawMenu>
			break;
 8000e42:	e005      	b.n	8000e50 <DM_UpdateDisplay+0x90>

		case Bias_Menu_State:
			BiasMenu_DrawMenu(tempState);
 8000e44:	79fb      	ldrb	r3, [r7, #7]
 8000e46:	4618      	mov	r0, r3
 8000e48:	f7ff ff46 	bl	8000cd8 <BiasMenu_DrawMenu>
			break;
 8000e4c:	e000      	b.n	8000e50 <DM_UpdateDisplay+0x90>

		default:
			break;
 8000e4e:	bf00      	nop
		ILI9341_Draw_Text(encoder_value, 220, 20, ERR_FGCOLOUR, 1, ERR_BGCOLOUR);
	#endif //ENCODER_DEBUG



}
 8000e50:	bf00      	nop
 8000e52:	3708      	adds	r7, #8
 8000e54:	46bd      	mov	sp, r7
 8000e56:	bd80      	pop	{r7, pc}

08000e58 <DM_DisplayFormattedOutput>:
 *	@param None
 *	@retval None
 *
 */
void DM_DisplayFormattedOutput()
{
 8000e58:	b580      	push	{r7, lr}
 8000e5a:	af00      	add	r7, sp, #0

	_DisplayOutputSignalHertz(140, 45);
 8000e5c:	212d      	movs	r1, #45	; 0x2d
 8000e5e:	208c      	movs	r0, #140	; 0x8c
 8000e60:	f000 f996 	bl	8001190 <_DisplayOutputSignalHertz>
	_DisplayOutputSignalVpp(175, 70);
 8000e64:	2146      	movs	r1, #70	; 0x46
 8000e66:	20af      	movs	r0, #175	; 0xaf
 8000e68:	f000 fa56 	bl	8001318 <_DisplayOutputSignalVpp>
	_DisplayOutputSignalDecibels(138, 95);
 8000e6c:	215f      	movs	r1, #95	; 0x5f
 8000e6e:	208a      	movs	r0, #138	; 0x8a
 8000e70:	f000 fab0 	bl	80013d4 <_DisplayOutputSignalDecibels>
	_DisplayOutputSignalOffset(161, 120);
 8000e74:	2178      	movs	r1, #120	; 0x78
 8000e76:	20a1      	movs	r0, #161	; 0xa1
 8000e78:	f000 fb20 	bl	80014bc <_DisplayOutputSignalOffset>
	_DisplayOutputWaveformIcons(80, 160, 245, 160);
 8000e7c:	23a0      	movs	r3, #160	; 0xa0
 8000e7e:	22f5      	movs	r2, #245	; 0xf5
 8000e80:	21a0      	movs	r1, #160	; 0xa0
 8000e82:	2050      	movs	r0, #80	; 0x50
 8000e84:	f000 fbba 	bl	80015fc <_DisplayOutputWaveformIcons>

	DM_DisplayInputTriggerStatus();
 8000e88:	f000 f806 	bl	8000e98 <DM_DisplayInputTriggerStatus>
	DM_DisplayInputTriggerData(200, 17);
 8000e8c:	2111      	movs	r1, #17
 8000e8e:	20c8      	movs	r0, #200	; 0xc8
 8000e90:	f000 f888 	bl	8000fa4 <DM_DisplayInputTriggerData>

}
 8000e94:	bf00      	nop
 8000e96:	bd80      	pop	{r7, pc}

08000e98 <DM_DisplayInputTriggerStatus>:
 *	@param None
 *	@retval None
 *
 */
void DM_DisplayInputTriggerStatus()
{
 8000e98:	b580      	push	{r7, lr}
 8000e9a:	b084      	sub	sp, #16
 8000e9c:	af02      	add	r7, sp, #8

	uint16_t text_x_pos = 240;
 8000e9e:	23f0      	movs	r3, #240	; 0xf0
 8000ea0:	80fb      	strh	r3, [r7, #6]
	uint16_t text_y_pos = 1;
 8000ea2:	2301      	movs	r3, #1
 8000ea4:	80bb      	strh	r3, [r7, #4]
	// eTriggerInputMode
	switch(IT_GetActiveTriggerMode())
 8000ea6:	f005 fc41 	bl	800672c <IT_GetActiveTriggerMode>
 8000eaa:	4603      	mov	r3, r0
 8000eac:	2b01      	cmp	r3, #1
 8000eae:	d027      	beq.n	8000f00 <DM_DisplayInputTriggerStatus+0x68>
 8000eb0:	2b02      	cmp	r3, #2
 8000eb2:	d048      	beq.n	8000f46 <DM_DisplayInputTriggerStatus+0xae>
 8000eb4:	2b00      	cmp	r3, #0
 8000eb6:	d000      	beq.n	8000eba <DM_DisplayInputTriggerStatus+0x22>
			else
				ILI9341_Draw_Text("T:ADC ", text_x_pos, text_y_pos, HIGHLIGHT_TEXT_BGCOLOUR , text_size, HIGHLIGHT_TEXT_FGCOLOUR);
			break;

	}
}
 8000eb8:	e068      	b.n	8000f8c <DM_DisplayInputTriggerStatus+0xf4>
			if(IT_GetTriggerStatus())
 8000eba:	f005 fc53 	bl	8006764 <IT_GetTriggerStatus>
 8000ebe:	4603      	mov	r3, r0
 8000ec0:	2b00      	cmp	r3, #0
 8000ec2:	d00e      	beq.n	8000ee2 <DM_DisplayInputTriggerStatus+0x4a>
				ILI9341_Draw_Text("T:TIM ", text_x_pos, text_y_pos, HIGHLIGHT_TEXT_FGCOLOUR , text_size, HIGHLIGHT_TEXT_BGCOLOUR);
 8000ec4:	4b33      	ldr	r3, [pc, #204]	; (8000f94 <DM_DisplayInputTriggerStatus+0xfc>)
 8000ec6:	781b      	ldrb	r3, [r3, #0]
 8000ec8:	b29b      	uxth	r3, r3
 8000eca:	88b8      	ldrh	r0, [r7, #4]
 8000ecc:	88f9      	ldrh	r1, [r7, #6]
 8000ece:	f644 42f6 	movw	r2, #19702	; 0x4cf6
 8000ed2:	9201      	str	r2, [sp, #4]
 8000ed4:	9300      	str	r3, [sp, #0]
 8000ed6:	2300      	movs	r3, #0
 8000ed8:	4602      	mov	r2, r0
 8000eda:	482f      	ldr	r0, [pc, #188]	; (8000f98 <DM_DisplayInputTriggerStatus+0x100>)
 8000edc:	f00f fd52 	bl	8010984 <ILI9341_Draw_Text>
			break;
 8000ee0:	e054      	b.n	8000f8c <DM_DisplayInputTriggerStatus+0xf4>
				ILI9341_Draw_Text("T:TIM ", text_x_pos, text_y_pos, HIGHLIGHT_TEXT_BGCOLOUR , text_size, HIGHLIGHT_TEXT_FGCOLOUR);
 8000ee2:	4b2c      	ldr	r3, [pc, #176]	; (8000f94 <DM_DisplayInputTriggerStatus+0xfc>)
 8000ee4:	781b      	ldrb	r3, [r3, #0]
 8000ee6:	b29b      	uxth	r3, r3
 8000ee8:	88b8      	ldrh	r0, [r7, #4]
 8000eea:	88f9      	ldrh	r1, [r7, #6]
 8000eec:	2200      	movs	r2, #0
 8000eee:	9201      	str	r2, [sp, #4]
 8000ef0:	9300      	str	r3, [sp, #0]
 8000ef2:	f644 43f6 	movw	r3, #19702	; 0x4cf6
 8000ef6:	4602      	mov	r2, r0
 8000ef8:	4827      	ldr	r0, [pc, #156]	; (8000f98 <DM_DisplayInputTriggerStatus+0x100>)
 8000efa:	f00f fd43 	bl	8010984 <ILI9341_Draw_Text>
			break;
 8000efe:	e045      	b.n	8000f8c <DM_DisplayInputTriggerStatus+0xf4>
			if(IT_GetTriggerStatus())
 8000f00:	f005 fc30 	bl	8006764 <IT_GetTriggerStatus>
 8000f04:	4603      	mov	r3, r0
 8000f06:	2b00      	cmp	r3, #0
 8000f08:	d00e      	beq.n	8000f28 <DM_DisplayInputTriggerStatus+0x90>
				ILI9341_Draw_Text("T:COMP", text_x_pos, text_y_pos, HIGHLIGHT_TEXT_FGCOLOUR , text_size, HIGHLIGHT_TEXT_BGCOLOUR);
 8000f0a:	4b22      	ldr	r3, [pc, #136]	; (8000f94 <DM_DisplayInputTriggerStatus+0xfc>)
 8000f0c:	781b      	ldrb	r3, [r3, #0]
 8000f0e:	b29b      	uxth	r3, r3
 8000f10:	88b8      	ldrh	r0, [r7, #4]
 8000f12:	88f9      	ldrh	r1, [r7, #6]
 8000f14:	f644 42f6 	movw	r2, #19702	; 0x4cf6
 8000f18:	9201      	str	r2, [sp, #4]
 8000f1a:	9300      	str	r3, [sp, #0]
 8000f1c:	2300      	movs	r3, #0
 8000f1e:	4602      	mov	r2, r0
 8000f20:	481e      	ldr	r0, [pc, #120]	; (8000f9c <DM_DisplayInputTriggerStatus+0x104>)
 8000f22:	f00f fd2f 	bl	8010984 <ILI9341_Draw_Text>
			break;
 8000f26:	e031      	b.n	8000f8c <DM_DisplayInputTriggerStatus+0xf4>
				ILI9341_Draw_Text("T:COMP", text_x_pos, text_y_pos, HIGHLIGHT_TEXT_BGCOLOUR , text_size, HIGHLIGHT_TEXT_FGCOLOUR);
 8000f28:	4b1a      	ldr	r3, [pc, #104]	; (8000f94 <DM_DisplayInputTriggerStatus+0xfc>)
 8000f2a:	781b      	ldrb	r3, [r3, #0]
 8000f2c:	b29b      	uxth	r3, r3
 8000f2e:	88b8      	ldrh	r0, [r7, #4]
 8000f30:	88f9      	ldrh	r1, [r7, #6]
 8000f32:	2200      	movs	r2, #0
 8000f34:	9201      	str	r2, [sp, #4]
 8000f36:	9300      	str	r3, [sp, #0]
 8000f38:	f644 43f6 	movw	r3, #19702	; 0x4cf6
 8000f3c:	4602      	mov	r2, r0
 8000f3e:	4817      	ldr	r0, [pc, #92]	; (8000f9c <DM_DisplayInputTriggerStatus+0x104>)
 8000f40:	f00f fd20 	bl	8010984 <ILI9341_Draw_Text>
			break;
 8000f44:	e022      	b.n	8000f8c <DM_DisplayInputTriggerStatus+0xf4>
			if(IT_GetTriggerStatus())
 8000f46:	f005 fc0d 	bl	8006764 <IT_GetTriggerStatus>
 8000f4a:	4603      	mov	r3, r0
 8000f4c:	2b00      	cmp	r3, #0
 8000f4e:	d00e      	beq.n	8000f6e <DM_DisplayInputTriggerStatus+0xd6>
				ILI9341_Draw_Text("T:ADC ", text_x_pos, text_y_pos, HIGHLIGHT_TEXT_FGCOLOUR , text_size, HIGHLIGHT_TEXT_BGCOLOUR);
 8000f50:	4b10      	ldr	r3, [pc, #64]	; (8000f94 <DM_DisplayInputTriggerStatus+0xfc>)
 8000f52:	781b      	ldrb	r3, [r3, #0]
 8000f54:	b29b      	uxth	r3, r3
 8000f56:	88b8      	ldrh	r0, [r7, #4]
 8000f58:	88f9      	ldrh	r1, [r7, #6]
 8000f5a:	f644 42f6 	movw	r2, #19702	; 0x4cf6
 8000f5e:	9201      	str	r2, [sp, #4]
 8000f60:	9300      	str	r3, [sp, #0]
 8000f62:	2300      	movs	r3, #0
 8000f64:	4602      	mov	r2, r0
 8000f66:	480e      	ldr	r0, [pc, #56]	; (8000fa0 <DM_DisplayInputTriggerStatus+0x108>)
 8000f68:	f00f fd0c 	bl	8010984 <ILI9341_Draw_Text>
			break;
 8000f6c:	e00d      	b.n	8000f8a <DM_DisplayInputTriggerStatus+0xf2>
				ILI9341_Draw_Text("T:ADC ", text_x_pos, text_y_pos, HIGHLIGHT_TEXT_BGCOLOUR , text_size, HIGHLIGHT_TEXT_FGCOLOUR);
 8000f6e:	4b09      	ldr	r3, [pc, #36]	; (8000f94 <DM_DisplayInputTriggerStatus+0xfc>)
 8000f70:	781b      	ldrb	r3, [r3, #0]
 8000f72:	b29b      	uxth	r3, r3
 8000f74:	88b8      	ldrh	r0, [r7, #4]
 8000f76:	88f9      	ldrh	r1, [r7, #6]
 8000f78:	2200      	movs	r2, #0
 8000f7a:	9201      	str	r2, [sp, #4]
 8000f7c:	9300      	str	r3, [sp, #0]
 8000f7e:	f644 43f6 	movw	r3, #19702	; 0x4cf6
 8000f82:	4602      	mov	r2, r0
 8000f84:	4806      	ldr	r0, [pc, #24]	; (8000fa0 <DM_DisplayInputTriggerStatus+0x108>)
 8000f86:	f00f fcfd 	bl	8010984 <ILI9341_Draw_Text>
			break;
 8000f8a:	bf00      	nop
}
 8000f8c:	bf00      	nop
 8000f8e:	3708      	adds	r7, #8
 8000f90:	46bd      	mov	sp, r7
 8000f92:	bd80      	pop	{r7, pc}
 8000f94:	20000000 	.word	0x20000000
 8000f98:	08015890 	.word	0x08015890
 8000f9c:	08015898 	.word	0x08015898
 8000fa0:	080158a0 	.word	0x080158a0

08000fa4 <DM_DisplayInputTriggerData>:
 *	@param None
 *	@retval None
 *
 */
void DM_DisplayInputTriggerData(uint16_t xpos, uint16_t ypos)
{
 8000fa4:	b590      	push	{r4, r7, lr}
 8000fa6:	b08d      	sub	sp, #52	; 0x34
 8000fa8:	af02      	add	r7, sp, #8
 8000faa:	4603      	mov	r3, r0
 8000fac:	460a      	mov	r2, r1
 8000fae:	80fb      	strh	r3, [r7, #6]
 8000fb0:	4613      	mov	r3, r2
 8000fb2:	80bb      	strh	r3, [r7, #4]
	if(  IT_GetTriggerStatus() && (IT_GetActiveTriggerMode() == INPUT_TIMER_TIM) )
 8000fb4:	f005 fbd6 	bl	8006764 <IT_GetTriggerStatus>
 8000fb8:	4603      	mov	r3, r0
 8000fba:	2b00      	cmp	r3, #0
 8000fbc:	f000 8094 	beq.w	80010e8 <DM_DisplayInputTriggerData+0x144>
 8000fc0:	f005 fbb4 	bl	800672c <IT_GetActiveTriggerMode>
 8000fc4:	4603      	mov	r3, r0
 8000fc6:	2b00      	cmp	r3, #0
 8000fc8:	f040 808e 	bne.w	80010e8 <DM_DisplayInputTriggerData+0x144>
	{
		char avg_freq_count_hertz[13] = {};
 8000fcc:	f107 0318 	add.w	r3, r7, #24
 8000fd0:	2200      	movs	r2, #0
 8000fd2:	601a      	str	r2, [r3, #0]
 8000fd4:	605a      	str	r2, [r3, #4]
 8000fd6:	609a      	str	r2, [r3, #8]
 8000fd8:	731a      	strb	r2, [r3, #12]

		if(IT_GetAverageFreqCountHertz() < 1000)
 8000fda:	f005 fb99 	bl	8006710 <IT_GetAverageFreqCountHertz>
 8000fde:	eeb0 7a40 	vmov.f32	s14, s0
 8000fe2:	eddf 7a63 	vldr	s15, [pc, #396]	; 8001170 <DM_DisplayInputTriggerData+0x1cc>
 8000fe6:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8000fea:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000fee:	d511      	bpl.n	8001014 <DM_DisplayInputTriggerData+0x70>
		{
			snprintf(avg_freq_count_hertz, sizeof(avg_freq_count_hertz), "%7.1f Hz", IT_GetAverageFreqCountHertz());
 8000ff0:	f005 fb8e 	bl	8006710 <IT_GetAverageFreqCountHertz>
 8000ff4:	ee10 3a10 	vmov	r3, s0
 8000ff8:	4618      	mov	r0, r3
 8000ffa:	f7ff facd 	bl	8000598 <__aeabi_f2d>
 8000ffe:	4603      	mov	r3, r0
 8001000:	460c      	mov	r4, r1
 8001002:	f107 0018 	add.w	r0, r7, #24
 8001006:	e9cd 3400 	strd	r3, r4, [sp]
 800100a:	4a5a      	ldr	r2, [pc, #360]	; (8001174 <DM_DisplayInputTriggerData+0x1d0>)
 800100c:	210d      	movs	r1, #13
 800100e:	f011 f875 	bl	80120fc <sniprintf>
 8001012:	e059      	b.n	80010c8 <DM_DisplayInputTriggerData+0x124>
		}
		else if(IT_GetAverageFreqCountHertz() < 10000)
 8001014:	f005 fb7c 	bl	8006710 <IT_GetAverageFreqCountHertz>
 8001018:	eeb0 7a40 	vmov.f32	s14, s0
 800101c:	eddf 7a56 	vldr	s15, [pc, #344]	; 8001178 <DM_DisplayInputTriggerData+0x1d4>
 8001020:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001024:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001028:	d516      	bpl.n	8001058 <DM_DisplayInputTriggerData+0xb4>
		{
			snprintf(avg_freq_count_hertz, sizeof(avg_freq_count_hertz), "%6.1f KHz", IT_GetAverageFreqCountHertz() / 1000);
 800102a:	f005 fb71 	bl	8006710 <IT_GetAverageFreqCountHertz>
 800102e:	eeb0 7a40 	vmov.f32	s14, s0
 8001032:	eddf 7a4f 	vldr	s15, [pc, #316]	; 8001170 <DM_DisplayInputTriggerData+0x1cc>
 8001036:	eec7 6a27 	vdiv.f32	s13, s14, s15
 800103a:	ee16 0a90 	vmov	r0, s13
 800103e:	f7ff faab 	bl	8000598 <__aeabi_f2d>
 8001042:	4603      	mov	r3, r0
 8001044:	460c      	mov	r4, r1
 8001046:	f107 0018 	add.w	r0, r7, #24
 800104a:	e9cd 3400 	strd	r3, r4, [sp]
 800104e:	4a4b      	ldr	r2, [pc, #300]	; (800117c <DM_DisplayInputTriggerData+0x1d8>)
 8001050:	210d      	movs	r1, #13
 8001052:	f011 f853 	bl	80120fc <sniprintf>
 8001056:	e037      	b.n	80010c8 <DM_DisplayInputTriggerData+0x124>
		}
		else if(IT_GetAverageFreqCountHertz() < 100000)
 8001058:	f005 fb5a 	bl	8006710 <IT_GetAverageFreqCountHertz>
 800105c:	eeb0 7a40 	vmov.f32	s14, s0
 8001060:	eddf 7a47 	vldr	s15, [pc, #284]	; 8001180 <DM_DisplayInputTriggerData+0x1dc>
 8001064:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001068:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800106c:	d516      	bpl.n	800109c <DM_DisplayInputTriggerData+0xf8>
		{
			snprintf(avg_freq_count_hertz, sizeof(avg_freq_count_hertz), "%6.1f KHz", IT_GetAverageFreqCountHertz()  / 1000);
 800106e:	f005 fb4f 	bl	8006710 <IT_GetAverageFreqCountHertz>
 8001072:	eeb0 7a40 	vmov.f32	s14, s0
 8001076:	eddf 7a3e 	vldr	s15, [pc, #248]	; 8001170 <DM_DisplayInputTriggerData+0x1cc>
 800107a:	eec7 6a27 	vdiv.f32	s13, s14, s15
 800107e:	ee16 0a90 	vmov	r0, s13
 8001082:	f7ff fa89 	bl	8000598 <__aeabi_f2d>
 8001086:	4603      	mov	r3, r0
 8001088:	460c      	mov	r4, r1
 800108a:	f107 0018 	add.w	r0, r7, #24
 800108e:	e9cd 3400 	strd	r3, r4, [sp]
 8001092:	4a3a      	ldr	r2, [pc, #232]	; (800117c <DM_DisplayInputTriggerData+0x1d8>)
 8001094:	210d      	movs	r1, #13
 8001096:	f011 f831 	bl	80120fc <sniprintf>
 800109a:	e015      	b.n	80010c8 <DM_DisplayInputTriggerData+0x124>
		}
		else
		{
			snprintf(avg_freq_count_hertz, sizeof(avg_freq_count_hertz), "%6.1f KHz", IT_GetAverageFreqCountHertz()  / 1000);
 800109c:	f005 fb38 	bl	8006710 <IT_GetAverageFreqCountHertz>
 80010a0:	eeb0 7a40 	vmov.f32	s14, s0
 80010a4:	eddf 7a32 	vldr	s15, [pc, #200]	; 8001170 <DM_DisplayInputTriggerData+0x1cc>
 80010a8:	eec7 6a27 	vdiv.f32	s13, s14, s15
 80010ac:	ee16 0a90 	vmov	r0, s13
 80010b0:	f7ff fa72 	bl	8000598 <__aeabi_f2d>
 80010b4:	4603      	mov	r3, r0
 80010b6:	460c      	mov	r4, r1
 80010b8:	f107 0018 	add.w	r0, r7, #24
 80010bc:	e9cd 3400 	strd	r3, r4, [sp]
 80010c0:	4a2e      	ldr	r2, [pc, #184]	; (800117c <DM_DisplayInputTriggerData+0x1d8>)
 80010c2:	210d      	movs	r1, #13
 80010c4:	f011 f81a 	bl	80120fc <sniprintf>
		}

		ILI9341_Draw_Text(avg_freq_count_hertz, xpos, ypos, NORMAL_TEXT_FGCOLOUR , text_size, NORMAL_TEXT_BGCOLOUR);
 80010c8:	4b2e      	ldr	r3, [pc, #184]	; (8001184 <DM_DisplayInputTriggerData+0x1e0>)
 80010ca:	781b      	ldrb	r3, [r3, #0]
 80010cc:	b29b      	uxth	r3, r3
 80010ce:	88bc      	ldrh	r4, [r7, #4]
 80010d0:	88f9      	ldrh	r1, [r7, #6]
 80010d2:	f107 0018 	add.w	r0, r7, #24
 80010d6:	2200      	movs	r2, #0
 80010d8:	9201      	str	r2, [sp, #4]
 80010da:	9300      	str	r3, [sp, #0]
 80010dc:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 80010e0:	4622      	mov	r2, r4
 80010e2:	f00f fc4f 	bl	8010984 <ILI9341_Draw_Text>
	{
 80010e6:	e03f      	b.n	8001168 <DM_DisplayInputTriggerData+0x1c4>
	}
	else if(  IT_GetTriggerStatus() && (IT_GetActiveTriggerMode() == INPUT_TIMER_ADC) )
 80010e8:	f005 fb3c 	bl	8006764 <IT_GetTriggerStatus>
 80010ec:	4603      	mov	r3, r0
 80010ee:	2b00      	cmp	r3, #0
 80010f0:	d02c      	beq.n	800114c <DM_DisplayInputTriggerData+0x1a8>
 80010f2:	f005 fb1b 	bl	800672c <IT_GetActiveTriggerMode>
 80010f6:	4603      	mov	r3, r0
 80010f8:	2b02      	cmp	r3, #2
 80010fa:	d127      	bne.n	800114c <DM_DisplayInputTriggerData+0x1a8>
	{
		char adc_volt_string[13] = {};
 80010fc:	f107 0308 	add.w	r3, r7, #8
 8001100:	2200      	movs	r2, #0
 8001102:	601a      	str	r2, [r3, #0]
 8001104:	605a      	str	r2, [r3, #4]
 8001106:	609a      	str	r2, [r3, #8]
 8001108:	731a      	strb	r2, [r3, #12]


		snprintf(adc_volt_string, sizeof(adc_volt_string), "%6.1f V", IT_GetAvgAdcVoltage());
 800110a:	f005 fb47 	bl	800679c <IT_GetAvgAdcVoltage>
 800110e:	ee10 3a10 	vmov	r3, s0
 8001112:	4618      	mov	r0, r3
 8001114:	f7ff fa40 	bl	8000598 <__aeabi_f2d>
 8001118:	4603      	mov	r3, r0
 800111a:	460c      	mov	r4, r1
 800111c:	f107 0008 	add.w	r0, r7, #8
 8001120:	e9cd 3400 	strd	r3, r4, [sp]
 8001124:	4a18      	ldr	r2, [pc, #96]	; (8001188 <DM_DisplayInputTriggerData+0x1e4>)
 8001126:	210d      	movs	r1, #13
 8001128:	f010 ffe8 	bl	80120fc <sniprintf>


		ILI9341_Draw_Text(adc_volt_string, xpos, ypos, NORMAL_TEXT_FGCOLOUR , text_size, NORMAL_TEXT_BGCOLOUR);
 800112c:	4b15      	ldr	r3, [pc, #84]	; (8001184 <DM_DisplayInputTriggerData+0x1e0>)
 800112e:	781b      	ldrb	r3, [r3, #0]
 8001130:	b29b      	uxth	r3, r3
 8001132:	88bc      	ldrh	r4, [r7, #4]
 8001134:	88f9      	ldrh	r1, [r7, #6]
 8001136:	f107 0008 	add.w	r0, r7, #8
 800113a:	2200      	movs	r2, #0
 800113c:	9201      	str	r2, [sp, #4]
 800113e:	9300      	str	r3, [sp, #0]
 8001140:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8001144:	4622      	mov	r2, r4
 8001146:	f00f fc1d 	bl	8010984 <ILI9341_Draw_Text>
	{
 800114a:	e00d      	b.n	8001168 <DM_DisplayInputTriggerData+0x1c4>
	}
	else
	{
		ILI9341_Draw_Text("                   ", xpos, ypos, NORMAL_TEXT_FGCOLOUR , text_size, NORMAL_TEXT_BGCOLOUR);
 800114c:	4b0d      	ldr	r3, [pc, #52]	; (8001184 <DM_DisplayInputTriggerData+0x1e0>)
 800114e:	781b      	ldrb	r3, [r3, #0]
 8001150:	b29b      	uxth	r3, r3
 8001152:	88b8      	ldrh	r0, [r7, #4]
 8001154:	88f9      	ldrh	r1, [r7, #6]
 8001156:	2200      	movs	r2, #0
 8001158:	9201      	str	r2, [sp, #4]
 800115a:	9300      	str	r3, [sp, #0]
 800115c:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8001160:	4602      	mov	r2, r0
 8001162:	480a      	ldr	r0, [pc, #40]	; (800118c <DM_DisplayInputTriggerData+0x1e8>)
 8001164:	f00f fc0e 	bl	8010984 <ILI9341_Draw_Text>
	}
}
 8001168:	bf00      	nop
 800116a:	372c      	adds	r7, #44	; 0x2c
 800116c:	46bd      	mov	sp, r7
 800116e:	bd90      	pop	{r4, r7, pc}
 8001170:	447a0000 	.word	0x447a0000
 8001174:	080158a8 	.word	0x080158a8
 8001178:	461c4000 	.word	0x461c4000
 800117c:	080158b4 	.word	0x080158b4
 8001180:	47c35000 	.word	0x47c35000
 8001184:	20000000 	.word	0x20000000
 8001188:	080158c0 	.word	0x080158c0
 800118c:	080158c8 	.word	0x080158c8

08001190 <_DisplayOutputSignalHertz>:
 *	@param None
 *	@retval None
 *
 */
void _DisplayOutputSignalHertz(uint16_t xpos, uint16_t ypos)
{
 8001190:	b580      	push	{r7, lr}
 8001192:	b084      	sub	sp, #16
 8001194:	af02      	add	r7, sp, #8
 8001196:	4603      	mov	r3, r0
 8001198:	460a      	mov	r2, r1
 800119a:	80fb      	strh	r3, [r7, #6]
 800119c:	4613      	mov	r3, r2
 800119e:	80bb      	strh	r3, [r7, #4]


	// draw row header
	ILI9341_Draw_Text("FREQ   ....", 2, ypos , NORMAL_TEXT_FGCOLOUR, text_size, NORMAL_TEXT_BGCOLOUR);
 80011a0:	4b0e      	ldr	r3, [pc, #56]	; (80011dc <_DisplayOutputSignalHertz+0x4c>)
 80011a2:	781b      	ldrb	r3, [r3, #0]
 80011a4:	b29b      	uxth	r3, r3
 80011a6:	88b9      	ldrh	r1, [r7, #4]
 80011a8:	2200      	movs	r2, #0
 80011aa:	9201      	str	r2, [sp, #4]
 80011ac:	9300      	str	r3, [sp, #0]
 80011ae:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 80011b2:	460a      	mov	r2, r1
 80011b4:	2102      	movs	r1, #2
 80011b6:	480a      	ldr	r0, [pc, #40]	; (80011e0 <_DisplayOutputSignalHertz+0x50>)
 80011b8:	f00f fbe4 	bl	8010984 <ILI9341_Draw_Text>

	// display output in hertz
	DM_DrawGenericHertzValue(xpos, ypos, SM_GetOutputInHertz());
 80011bc:	f005 fea8 	bl	8006f10 <SM_GetOutputInHertz>
 80011c0:	eef0 7a40 	vmov.f32	s15, s0
 80011c4:	88ba      	ldrh	r2, [r7, #4]
 80011c6:	88fb      	ldrh	r3, [r7, #6]
 80011c8:	eeb0 0a67 	vmov.f32	s0, s15
 80011cc:	4611      	mov	r1, r2
 80011ce:	4618      	mov	r0, r3
 80011d0:	f000 f808 	bl	80011e4 <DM_DrawGenericHertzValue>
}
 80011d4:	bf00      	nop
 80011d6:	3708      	adds	r7, #8
 80011d8:	46bd      	mov	sp, r7
 80011da:	bd80      	pop	{r7, pc}
 80011dc:	20000000 	.word	0x20000000
 80011e0:	080158dc 	.word	0x080158dc

080011e4 <DM_DrawGenericHertzValue>:

void DM_DrawGenericHertzValue(uint16_t xpos, uint16_t ypos, float output_hertz_value)
{
 80011e4:	b590      	push	{r4, r7, lr}
 80011e6:	b08b      	sub	sp, #44	; 0x2c
 80011e8:	af02      	add	r7, sp, #8
 80011ea:	4603      	mov	r3, r0
 80011ec:	460a      	mov	r2, r1
 80011ee:	ed87 0a00 	vstr	s0, [r7]
 80011f2:	80fb      	strh	r3, [r7, #6]
 80011f4:	4613      	mov	r3, r2
 80011f6:	80bb      	strh	r3, [r7, #4]
	char out_hertz[20] = "";
 80011f8:	2300      	movs	r3, #0
 80011fa:	60fb      	str	r3, [r7, #12]
 80011fc:	f107 0310 	add.w	r3, r7, #16
 8001200:	2200      	movs	r2, #0
 8001202:	601a      	str	r2, [r3, #0]
 8001204:	605a      	str	r2, [r3, #4]
 8001206:	609a      	str	r2, [r3, #8]
 8001208:	60da      	str	r2, [r3, #12]
	if(output_hertz_value < 1000)
 800120a:	edd7 7a00 	vldr	s15, [r7]
 800120e:	ed9f 7a3c 	vldr	s14, [pc, #240]	; 8001300 <DM_DrawGenericHertzValue+0x11c>
 8001212:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001216:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800121a:	d50d      	bpl.n	8001238 <DM_DrawGenericHertzValue+0x54>
	{
		snprintf(out_hertz, sizeof(out_hertz), " %7.2f  Hz ", output_hertz_value);
 800121c:	6838      	ldr	r0, [r7, #0]
 800121e:	f7ff f9bb 	bl	8000598 <__aeabi_f2d>
 8001222:	4603      	mov	r3, r0
 8001224:	460c      	mov	r4, r1
 8001226:	f107 000c 	add.w	r0, r7, #12
 800122a:	e9cd 3400 	strd	r3, r4, [sp]
 800122e:	4a35      	ldr	r2, [pc, #212]	; (8001304 <DM_DrawGenericHertzValue+0x120>)
 8001230:	2114      	movs	r1, #20
 8001232:	f010 ff63 	bl	80120fc <sniprintf>
 8001236:	e04f      	b.n	80012d8 <DM_DrawGenericHertzValue+0xf4>
	}
	else if(output_hertz_value < 10000)
 8001238:	edd7 7a00 	vldr	s15, [r7]
 800123c:	ed9f 7a32 	vldr	s14, [pc, #200]	; 8001308 <DM_DrawGenericHertzValue+0x124>
 8001240:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001244:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001248:	d514      	bpl.n	8001274 <DM_DrawGenericHertzValue+0x90>
	{
		snprintf(out_hertz, sizeof(out_hertz), " %7.2f  KHz ", output_hertz_value /1000);
 800124a:	edd7 7a00 	vldr	s15, [r7]
 800124e:	ed9f 7a2c 	vldr	s14, [pc, #176]	; 8001300 <DM_DrawGenericHertzValue+0x11c>
 8001252:	eec7 6a87 	vdiv.f32	s13, s15, s14
 8001256:	ee16 0a90 	vmov	r0, s13
 800125a:	f7ff f99d 	bl	8000598 <__aeabi_f2d>
 800125e:	4603      	mov	r3, r0
 8001260:	460c      	mov	r4, r1
 8001262:	f107 000c 	add.w	r0, r7, #12
 8001266:	e9cd 3400 	strd	r3, r4, [sp]
 800126a:	4a28      	ldr	r2, [pc, #160]	; (800130c <DM_DrawGenericHertzValue+0x128>)
 800126c:	2114      	movs	r1, #20
 800126e:	f010 ff45 	bl	80120fc <sniprintf>
 8001272:	e031      	b.n	80012d8 <DM_DrawGenericHertzValue+0xf4>
	}
	else if(output_hertz_value < 100000)
 8001274:	edd7 7a00 	vldr	s15, [r7]
 8001278:	ed9f 7a25 	vldr	s14, [pc, #148]	; 8001310 <DM_DrawGenericHertzValue+0x12c>
 800127c:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001280:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001284:	d514      	bpl.n	80012b0 <DM_DrawGenericHertzValue+0xcc>
	{
		snprintf(out_hertz, sizeof(out_hertz), " %7.2f  KHz ", output_hertz_value /1000);
 8001286:	edd7 7a00 	vldr	s15, [r7]
 800128a:	ed9f 7a1d 	vldr	s14, [pc, #116]	; 8001300 <DM_DrawGenericHertzValue+0x11c>
 800128e:	eec7 6a87 	vdiv.f32	s13, s15, s14
 8001292:	ee16 0a90 	vmov	r0, s13
 8001296:	f7ff f97f 	bl	8000598 <__aeabi_f2d>
 800129a:	4603      	mov	r3, r0
 800129c:	460c      	mov	r4, r1
 800129e:	f107 000c 	add.w	r0, r7, #12
 80012a2:	e9cd 3400 	strd	r3, r4, [sp]
 80012a6:	4a19      	ldr	r2, [pc, #100]	; (800130c <DM_DrawGenericHertzValue+0x128>)
 80012a8:	2114      	movs	r1, #20
 80012aa:	f010 ff27 	bl	80120fc <sniprintf>
 80012ae:	e013      	b.n	80012d8 <DM_DrawGenericHertzValue+0xf4>
	}
	else
	{
		snprintf(out_hertz, sizeof(out_hertz), " %7.2f  KHz ", output_hertz_value /1000);
 80012b0:	edd7 7a00 	vldr	s15, [r7]
 80012b4:	ed9f 7a12 	vldr	s14, [pc, #72]	; 8001300 <DM_DrawGenericHertzValue+0x11c>
 80012b8:	eec7 6a87 	vdiv.f32	s13, s15, s14
 80012bc:	ee16 0a90 	vmov	r0, s13
 80012c0:	f7ff f96a 	bl	8000598 <__aeabi_f2d>
 80012c4:	4603      	mov	r3, r0
 80012c6:	460c      	mov	r4, r1
 80012c8:	f107 000c 	add.w	r0, r7, #12
 80012cc:	e9cd 3400 	strd	r3, r4, [sp]
 80012d0:	4a0e      	ldr	r2, [pc, #56]	; (800130c <DM_DrawGenericHertzValue+0x128>)
 80012d2:	2114      	movs	r1, #20
 80012d4:	f010 ff12 	bl	80120fc <sniprintf>
	}

	ILI9341_Draw_Text(out_hertz, xpos, ypos, NORMAL_TEXT_FGCOLOUR, text_size, NORMAL_TEXT_BGCOLOUR);
 80012d8:	4b0e      	ldr	r3, [pc, #56]	; (8001314 <DM_DrawGenericHertzValue+0x130>)
 80012da:	781b      	ldrb	r3, [r3, #0]
 80012dc:	b29b      	uxth	r3, r3
 80012de:	88bc      	ldrh	r4, [r7, #4]
 80012e0:	88f9      	ldrh	r1, [r7, #6]
 80012e2:	f107 000c 	add.w	r0, r7, #12
 80012e6:	2200      	movs	r2, #0
 80012e8:	9201      	str	r2, [sp, #4]
 80012ea:	9300      	str	r3, [sp, #0]
 80012ec:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 80012f0:	4622      	mov	r2, r4
 80012f2:	f00f fb47 	bl	8010984 <ILI9341_Draw_Text>
}
 80012f6:	bf00      	nop
 80012f8:	3724      	adds	r7, #36	; 0x24
 80012fa:	46bd      	mov	sp, r7
 80012fc:	bd90      	pop	{r4, r7, pc}
 80012fe:	bf00      	nop
 8001300:	447a0000 	.word	0x447a0000
 8001304:	080158e8 	.word	0x080158e8
 8001308:	461c4000 	.word	0x461c4000
 800130c:	080158f4 	.word	0x080158f4
 8001310:	47c35000 	.word	0x47c35000
 8001314:	20000000 	.word	0x20000000

08001318 <_DisplayOutputSignalVpp>:
 *	@param None
 *	@retval None
 *
 */
void _DisplayOutputSignalVpp(uint16_t xpos, uint16_t ypos)
{
 8001318:	b590      	push	{r4, r7, lr}
 800131a:	b08d      	sub	sp, #52	; 0x34
 800131c:	af02      	add	r7, sp, #8
 800131e:	4603      	mov	r3, r0
 8001320:	460a      	mov	r2, r1
 8001322:	80fb      	strh	r3, [r7, #6]
 8001324:	4613      	mov	r3, r2
 8001326:	80bb      	strh	r3, [r7, #4]
	char out_vpp[18] = "";
 8001328:	2300      	movs	r3, #0
 800132a:	60fb      	str	r3, [r7, #12]
 800132c:	f107 0310 	add.w	r3, r7, #16
 8001330:	2200      	movs	r2, #0
 8001332:	601a      	str	r2, [r3, #0]
 8001334:	605a      	str	r2, [r3, #4]
 8001336:	609a      	str	r2, [r3, #8]
 8001338:	819a      	strh	r2, [r3, #12]
	uint8_t out_vpp_x = xpos;
 800133a:	88fb      	ldrh	r3, [r7, #6]
 800133c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	uint8_t out_vpp_y = ypos;
 8001340:	88bb      	ldrh	r3, [r7, #4]
 8001342:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26

	// draw row header
	ILI9341_Draw_Text("VPP    ....", 2, out_vpp_y, NORMAL_TEXT_FGCOLOUR, text_size, NORMAL_TEXT_BGCOLOUR);
 8001346:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800134a:	b299      	uxth	r1, r3
 800134c:	4b1e      	ldr	r3, [pc, #120]	; (80013c8 <_DisplayOutputSignalVpp+0xb0>)
 800134e:	781b      	ldrb	r3, [r3, #0]
 8001350:	b29b      	uxth	r3, r3
 8001352:	2200      	movs	r2, #0
 8001354:	9201      	str	r2, [sp, #4]
 8001356:	9300      	str	r3, [sp, #0]
 8001358:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 800135c:	460a      	mov	r2, r1
 800135e:	2102      	movs	r1, #2
 8001360:	481a      	ldr	r0, [pc, #104]	; (80013cc <_DisplayOutputSignalVpp+0xb4>)
 8001362:	f00f fb0f 	bl	8010984 <ILI9341_Draw_Text>

	AmplitudeProfile_t* pTmpVppPreset = SM_GetOutputChannel(SIGNAL_CHANNEL)->amp_profile;
 8001366:	2000      	movs	r0, #0
 8001368:	f005 fb3a 	bl	80069e0 <SM_GetOutputChannel>
 800136c:	4603      	mov	r3, r0
 800136e:	f8d3 31ec 	ldr.w	r3, [r3, #492]	; 0x1ec
 8001372:	623b      	str	r3, [r7, #32]

	if(pTmpVppPreset)
 8001374:	6a3b      	ldr	r3, [r7, #32]
 8001376:	2b00      	cmp	r3, #0
 8001378:	d00e      	beq.n	8001398 <_DisplayOutputSignalVpp+0x80>
	{
		snprintf(out_vpp, sizeof(out_vpp), " %2.2f   V ", pTmpVppPreset->amp_value);
 800137a:	6a3b      	ldr	r3, [r7, #32]
 800137c:	685b      	ldr	r3, [r3, #4]
 800137e:	4618      	mov	r0, r3
 8001380:	f7ff f90a 	bl	8000598 <__aeabi_f2d>
 8001384:	4603      	mov	r3, r0
 8001386:	460c      	mov	r4, r1
 8001388:	f107 000c 	add.w	r0, r7, #12
 800138c:	e9cd 3400 	strd	r3, r4, [sp]
 8001390:	4a0f      	ldr	r2, [pc, #60]	; (80013d0 <_DisplayOutputSignalVpp+0xb8>)
 8001392:	2112      	movs	r1, #18
 8001394:	f010 feb2 	bl	80120fc <sniprintf>
	}

	ILI9341_Draw_Text(out_vpp, out_vpp_x, out_vpp_y, NORMAL_TEXT_FGCOLOUR, text_size, NORMAL_TEXT_BGCOLOUR);
 8001398:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800139c:	b299      	uxth	r1, r3
 800139e:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 80013a2:	b29c      	uxth	r4, r3
 80013a4:	4b08      	ldr	r3, [pc, #32]	; (80013c8 <_DisplayOutputSignalVpp+0xb0>)
 80013a6:	781b      	ldrb	r3, [r3, #0]
 80013a8:	b29b      	uxth	r3, r3
 80013aa:	f107 000c 	add.w	r0, r7, #12
 80013ae:	2200      	movs	r2, #0
 80013b0:	9201      	str	r2, [sp, #4]
 80013b2:	9300      	str	r3, [sp, #0]
 80013b4:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 80013b8:	4622      	mov	r2, r4
 80013ba:	f00f fae3 	bl	8010984 <ILI9341_Draw_Text>
}
 80013be:	bf00      	nop
 80013c0:	372c      	adds	r7, #44	; 0x2c
 80013c2:	46bd      	mov	sp, r7
 80013c4:	bd90      	pop	{r4, r7, pc}
 80013c6:	bf00      	nop
 80013c8:	20000000 	.word	0x20000000
 80013cc:	08015904 	.word	0x08015904
 80013d0:	08015910 	.word	0x08015910

080013d4 <_DisplayOutputSignalDecibels>:
 *	@param None
 *	@retval None
 *
 */
void _DisplayOutputSignalDecibels(uint16_t xpos, uint16_t ypos)
{
 80013d4:	b590      	push	{r4, r7, lr}
 80013d6:	b08d      	sub	sp, #52	; 0x34
 80013d8:	af02      	add	r7, sp, #8
 80013da:	4603      	mov	r3, r0
 80013dc:	460a      	mov	r2, r1
 80013de:	80fb      	strh	r3, [r7, #6]
 80013e0:	4613      	mov	r3, r2
 80013e2:	80bb      	strh	r3, [r7, #4]
	char out_decibels[20] = "";
 80013e4:	2300      	movs	r3, #0
 80013e6:	60fb      	str	r3, [r7, #12]
 80013e8:	f107 0310 	add.w	r3, r7, #16
 80013ec:	2200      	movs	r2, #0
 80013ee:	601a      	str	r2, [r3, #0]
 80013f0:	605a      	str	r2, [r3, #4]
 80013f2:	609a      	str	r2, [r3, #8]
 80013f4:	60da      	str	r2, [r3, #12]
	uint8_t out_decibels_x = xpos;
 80013f6:	88fb      	ldrh	r3, [r7, #6]
 80013f8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	uint8_t out_decibels_y = ypos;
 80013fc:	88bb      	ldrh	r3, [r7, #4]
 80013fe:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26

	// draw row header
	ILI9341_Draw_Text("GAIN   ....", 2, out_decibels_y, NORMAL_TEXT_FGCOLOUR, text_size, NORMAL_TEXT_BGCOLOUR);
 8001402:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8001406:	b299      	uxth	r1, r3
 8001408:	4b28      	ldr	r3, [pc, #160]	; (80014ac <_DisplayOutputSignalDecibels+0xd8>)
 800140a:	781b      	ldrb	r3, [r3, #0]
 800140c:	b29b      	uxth	r3, r3
 800140e:	2200      	movs	r2, #0
 8001410:	9201      	str	r2, [sp, #4]
 8001412:	9300      	str	r3, [sp, #0]
 8001414:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8001418:	460a      	mov	r2, r1
 800141a:	2102      	movs	r1, #2
 800141c:	4824      	ldr	r0, [pc, #144]	; (80014b0 <_DisplayOutputSignalDecibels+0xdc>)
 800141e:	f00f fab1 	bl	8010984 <ILI9341_Draw_Text>

	AmplitudeProfile_t* pTmpVppPreset = SM_GetOutputChannel(SIGNAL_CHANNEL)->amp_profile;
 8001422:	2000      	movs	r0, #0
 8001424:	f005 fadc 	bl	80069e0 <SM_GetOutputChannel>
 8001428:	4603      	mov	r3, r0
 800142a:	f8d3 31ec 	ldr.w	r3, [r3, #492]	; 0x1ec
 800142e:	623b      	str	r3, [r7, #32]
	if(pTmpVppPreset)
 8001430:	6a3b      	ldr	r3, [r7, #32]
 8001432:	2b00      	cmp	r3, #0
 8001434:	d00e      	beq.n	8001454 <_DisplayOutputSignalDecibels+0x80>
	{
		snprintf(out_decibels, sizeof(out_decibels), " %+7.2f ", pTmpVppPreset->gain_decibels);
 8001436:	6a3b      	ldr	r3, [r7, #32]
 8001438:	68db      	ldr	r3, [r3, #12]
 800143a:	4618      	mov	r0, r3
 800143c:	f7ff f8ac 	bl	8000598 <__aeabi_f2d>
 8001440:	4603      	mov	r3, r0
 8001442:	460c      	mov	r4, r1
 8001444:	f107 000c 	add.w	r0, r7, #12
 8001448:	e9cd 3400 	strd	r3, r4, [sp]
 800144c:	4a19      	ldr	r2, [pc, #100]	; (80014b4 <_DisplayOutputSignalDecibels+0xe0>)
 800144e:	2114      	movs	r1, #20
 8001450:	f010 fe54 	bl	80120fc <sniprintf>
	}

	ILI9341_Draw_Text(out_decibels, out_decibels_x, out_decibels_y, NORMAL_TEXT_FGCOLOUR, text_size, NORMAL_TEXT_BGCOLOUR);
 8001454:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8001458:	b299      	uxth	r1, r3
 800145a:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800145e:	b29c      	uxth	r4, r3
 8001460:	4b12      	ldr	r3, [pc, #72]	; (80014ac <_DisplayOutputSignalDecibels+0xd8>)
 8001462:	781b      	ldrb	r3, [r3, #0]
 8001464:	b29b      	uxth	r3, r3
 8001466:	f107 000c 	add.w	r0, r7, #12
 800146a:	2200      	movs	r2, #0
 800146c:	9201      	str	r2, [sp, #4]
 800146e:	9300      	str	r3, [sp, #0]
 8001470:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8001474:	4622      	mov	r2, r4
 8001476:	f00f fa85 	bl	8010984 <ILI9341_Draw_Text>
	ILI9341_Draw_Text("dBmV", out_decibels_x + 128, out_decibels_y, NORMAL_TEXT_FGCOLOUR, text_size, NORMAL_TEXT_BGCOLOUR);
 800147a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800147e:	b29b      	uxth	r3, r3
 8001480:	3380      	adds	r3, #128	; 0x80
 8001482:	b299      	uxth	r1, r3
 8001484:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8001488:	b298      	uxth	r0, r3
 800148a:	4b08      	ldr	r3, [pc, #32]	; (80014ac <_DisplayOutputSignalDecibels+0xd8>)
 800148c:	781b      	ldrb	r3, [r3, #0]
 800148e:	b29b      	uxth	r3, r3
 8001490:	2200      	movs	r2, #0
 8001492:	9201      	str	r2, [sp, #4]
 8001494:	9300      	str	r3, [sp, #0]
 8001496:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 800149a:	4602      	mov	r2, r0
 800149c:	4806      	ldr	r0, [pc, #24]	; (80014b8 <_DisplayOutputSignalDecibels+0xe4>)
 800149e:	f00f fa71 	bl	8010984 <ILI9341_Draw_Text>

}
 80014a2:	bf00      	nop
 80014a4:	372c      	adds	r7, #44	; 0x2c
 80014a6:	46bd      	mov	sp, r7
 80014a8:	bd90      	pop	{r4, r7, pc}
 80014aa:	bf00      	nop
 80014ac:	20000000 	.word	0x20000000
 80014b0:	0801591c 	.word	0x0801591c
 80014b4:	08015928 	.word	0x08015928
 80014b8:	08015934 	.word	0x08015934

080014bc <_DisplayOutputSignalOffset>:
 *	@param None
 *	@retval None
 *
 */
void _DisplayOutputSignalOffset(uint16_t xpos, uint16_t ypos)
{
 80014bc:	b590      	push	{r4, r7, lr}
 80014be:	b08d      	sub	sp, #52	; 0x34
 80014c0:	af02      	add	r7, sp, #8
 80014c2:	4603      	mov	r3, r0
 80014c4:	460a      	mov	r2, r1
 80014c6:	80fb      	strh	r3, [r7, #6]
 80014c8:	4613      	mov	r3, r2
 80014ca:	80bb      	strh	r3, [r7, #4]
	float volts_per_thou = 0.00075;
 80014cc:	4b45      	ldr	r3, [pc, #276]	; (80015e4 <_DisplayOutputSignalOffset+0x128>)
 80014ce:	623b      	str	r3, [r7, #32]
	char out_dcvolts[12] = "";
 80014d0:	2300      	movs	r3, #0
 80014d2:	613b      	str	r3, [r7, #16]
 80014d4:	f107 0314 	add.w	r3, r7, #20
 80014d8:	2200      	movs	r2, #0
 80014da:	601a      	str	r2, [r3, #0]
 80014dc:	605a      	str	r2, [r3, #4]
	uint8_t out_dcvolts_x = xpos;
 80014de:	88fb      	ldrh	r3, [r7, #6]
 80014e0:	77fb      	strb	r3, [r7, #31]
	uint8_t out_dcvolts_y = ypos;
 80014e2:	88bb      	ldrh	r3, [r7, #4]
 80014e4:	77bb      	strb	r3, [r7, #30]

	ILI9341_Draw_Text("OFFSET ....", 2, out_dcvolts_y, NORMAL_TEXT_FGCOLOUR, text_size, NORMAL_TEXT_BGCOLOUR);
 80014e6:	7fbb      	ldrb	r3, [r7, #30]
 80014e8:	b299      	uxth	r1, r3
 80014ea:	4b3f      	ldr	r3, [pc, #252]	; (80015e8 <_DisplayOutputSignalOffset+0x12c>)
 80014ec:	781b      	ldrb	r3, [r3, #0]
 80014ee:	b29b      	uxth	r3, r3
 80014f0:	2200      	movs	r2, #0
 80014f2:	9201      	str	r2, [sp, #4]
 80014f4:	9300      	str	r3, [sp, #0]
 80014f6:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 80014fa:	460a      	mov	r2, r1
 80014fc:	2102      	movs	r1, #2
 80014fe:	483b      	ldr	r0, [pc, #236]	; (80015ec <_DisplayOutputSignalOffset+0x130>)
 8001500:	f00f fa40 	bl	8010984 <ILI9341_Draw_Text>

	// display output bias in +/- Volts
	float dc_volts;
	(BO_GetOutputBias() == 0) ? (dc_volts = 0) : (dc_volts = volts_per_thou * (float)BO_GetOutputBias());
 8001504:	f004 f8c2 	bl	800568c <BO_GetOutputBias>
 8001508:	4603      	mov	r3, r0
 800150a:	2b00      	cmp	r3, #0
 800150c:	d103      	bne.n	8001516 <_DisplayOutputSignalOffset+0x5a>
 800150e:	f04f 0300 	mov.w	r3, #0
 8001512:	627b      	str	r3, [r7, #36]	; 0x24
 8001514:	e00b      	b.n	800152e <_DisplayOutputSignalOffset+0x72>
 8001516:	f004 f8b9 	bl	800568c <BO_GetOutputBias>
 800151a:	ee07 0a90 	vmov	s15, r0
 800151e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001522:	ed97 7a08 	vldr	s14, [r7, #32]
 8001526:	ee67 7a27 	vmul.f32	s15, s14, s15
 800152a:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24

	snprintf(out_dcvolts, sizeof(out_dcvolts), "%05.2f   v ", dc_volts);
 800152e:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8001530:	f7ff f832 	bl	8000598 <__aeabi_f2d>
 8001534:	4603      	mov	r3, r0
 8001536:	460c      	mov	r4, r1
 8001538:	f107 0010 	add.w	r0, r7, #16
 800153c:	e9cd 3400 	strd	r3, r4, [sp]
 8001540:	4a2b      	ldr	r2, [pc, #172]	; (80015f0 <_DisplayOutputSignalOffset+0x134>)
 8001542:	210c      	movs	r1, #12
 8001544:	f010 fdda 	bl	80120fc <sniprintf>
	if(BO_GetBiasPolarity())
 8001548:	f004 f840 	bl	80055cc <BO_GetBiasPolarity>
 800154c:	4603      	mov	r3, r0
 800154e:	2b00      	cmp	r3, #0
 8001550:	d022      	beq.n	8001598 <_DisplayOutputSignalOffset+0xdc>
	{
		char symbol[3] = "+\0";
 8001552:	4a28      	ldr	r2, [pc, #160]	; (80015f4 <_DisplayOutputSignalOffset+0x138>)
 8001554:	f107 030c 	add.w	r3, r7, #12
 8001558:	6812      	ldr	r2, [r2, #0]
 800155a:	4611      	mov	r1, r2
 800155c:	8019      	strh	r1, [r3, #0]
 800155e:	3302      	adds	r3, #2
 8001560:	0c12      	lsrs	r2, r2, #16
 8001562:	701a      	strb	r2, [r3, #0]
		ILI9341_Draw_Text(strcat(symbol, out_dcvolts), out_dcvolts_x, out_dcvolts_y, NORMAL_TEXT_FGCOLOUR, text_size, NORMAL_TEXT_BGCOLOUR);
 8001564:	f107 0210 	add.w	r2, r7, #16
 8001568:	f107 030c 	add.w	r3, r7, #12
 800156c:	4611      	mov	r1, r2
 800156e:	4618      	mov	r0, r3
 8001570:	f010 fdf8 	bl	8012164 <strcat>
 8001574:	4604      	mov	r4, r0
 8001576:	7ffb      	ldrb	r3, [r7, #31]
 8001578:	b299      	uxth	r1, r3
 800157a:	7fbb      	ldrb	r3, [r7, #30]
 800157c:	b298      	uxth	r0, r3
 800157e:	4b1a      	ldr	r3, [pc, #104]	; (80015e8 <_DisplayOutputSignalOffset+0x12c>)
 8001580:	781b      	ldrb	r3, [r3, #0]
 8001582:	b29b      	uxth	r3, r3
 8001584:	2200      	movs	r2, #0
 8001586:	9201      	str	r2, [sp, #4]
 8001588:	9300      	str	r3, [sp, #0]
 800158a:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 800158e:	4602      	mov	r2, r0
 8001590:	4620      	mov	r0, r4
 8001592:	f00f f9f7 	bl	8010984 <ILI9341_Draw_Text>
	{
		char symbol[3] = "-\0";
		ILI9341_Draw_Text(strcat(symbol, out_dcvolts), out_dcvolts_x, out_dcvolts_y, NORMAL_TEXT_FGCOLOUR, text_size, NORMAL_TEXT_BGCOLOUR);
	}

}
 8001596:	e021      	b.n	80015dc <_DisplayOutputSignalOffset+0x120>
		char symbol[3] = "-\0";
 8001598:	4a17      	ldr	r2, [pc, #92]	; (80015f8 <_DisplayOutputSignalOffset+0x13c>)
 800159a:	f107 0308 	add.w	r3, r7, #8
 800159e:	6812      	ldr	r2, [r2, #0]
 80015a0:	4611      	mov	r1, r2
 80015a2:	8019      	strh	r1, [r3, #0]
 80015a4:	3302      	adds	r3, #2
 80015a6:	0c12      	lsrs	r2, r2, #16
 80015a8:	701a      	strb	r2, [r3, #0]
		ILI9341_Draw_Text(strcat(symbol, out_dcvolts), out_dcvolts_x, out_dcvolts_y, NORMAL_TEXT_FGCOLOUR, text_size, NORMAL_TEXT_BGCOLOUR);
 80015aa:	f107 0210 	add.w	r2, r7, #16
 80015ae:	f107 0308 	add.w	r3, r7, #8
 80015b2:	4611      	mov	r1, r2
 80015b4:	4618      	mov	r0, r3
 80015b6:	f010 fdd5 	bl	8012164 <strcat>
 80015ba:	4604      	mov	r4, r0
 80015bc:	7ffb      	ldrb	r3, [r7, #31]
 80015be:	b299      	uxth	r1, r3
 80015c0:	7fbb      	ldrb	r3, [r7, #30]
 80015c2:	b298      	uxth	r0, r3
 80015c4:	4b08      	ldr	r3, [pc, #32]	; (80015e8 <_DisplayOutputSignalOffset+0x12c>)
 80015c6:	781b      	ldrb	r3, [r3, #0]
 80015c8:	b29b      	uxth	r3, r3
 80015ca:	2200      	movs	r2, #0
 80015cc:	9201      	str	r2, [sp, #4]
 80015ce:	9300      	str	r3, [sp, #0]
 80015d0:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 80015d4:	4602      	mov	r2, r0
 80015d6:	4620      	mov	r0, r4
 80015d8:	f00f f9d4 	bl	8010984 <ILI9341_Draw_Text>
}
 80015dc:	bf00      	nop
 80015de:	372c      	adds	r7, #44	; 0x2c
 80015e0:	46bd      	mov	sp, r7
 80015e2:	bd90      	pop	{r4, r7, pc}
 80015e4:	3a449ba6 	.word	0x3a449ba6
 80015e8:	20000000 	.word	0x20000000
 80015ec:	0801593c 	.word	0x0801593c
 80015f0:	08015948 	.word	0x08015948
 80015f4:	08015954 	.word	0x08015954
 80015f8:	08015958 	.word	0x08015958

080015fc <_DisplayOutputWaveformIcons>:
 *	@param None
 *	@retval None
 *
 */
void _DisplayOutputWaveformIcons(uint16_t main_xpos, uint16_t main_ypos, uint16_t aux_xpos, uint16_t aux_ypos)
{
 80015fc:	b590      	push	{r4, r7, lr}
 80015fe:	b089      	sub	sp, #36	; 0x24
 8001600:	af04      	add	r7, sp, #16
 8001602:	4604      	mov	r4, r0
 8001604:	4608      	mov	r0, r1
 8001606:	4611      	mov	r1, r2
 8001608:	461a      	mov	r2, r3
 800160a:	4623      	mov	r3, r4
 800160c:	80fb      	strh	r3, [r7, #6]
 800160e:	4603      	mov	r3, r0
 8001610:	80bb      	strh	r3, [r7, #4]
 8001612:	460b      	mov	r3, r1
 8001614:	807b      	strh	r3, [r7, #2]
 8001616:	4613      	mov	r3, r2
 8001618:	803b      	strh	r3, [r7, #0]

	ILI9341_Draw_Text(" OUT:", 1, main_ypos+10, NORMAL_TEXT_FGCOLOUR, text_size, NORMAL_TEXT_BGCOLOUR);
 800161a:	88bb      	ldrh	r3, [r7, #4]
 800161c:	330a      	adds	r3, #10
 800161e:	b299      	uxth	r1, r3
 8001620:	4b94      	ldr	r3, [pc, #592]	; (8001874 <_DisplayOutputWaveformIcons+0x278>)
 8001622:	781b      	ldrb	r3, [r3, #0]
 8001624:	b29b      	uxth	r3, r3
 8001626:	2200      	movs	r2, #0
 8001628:	9201      	str	r2, [sp, #4]
 800162a:	9300      	str	r3, [sp, #0]
 800162c:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8001630:	460a      	mov	r2, r1
 8001632:	2101      	movs	r1, #1
 8001634:	4890      	ldr	r0, [pc, #576]	; (8001878 <_DisplayOutputWaveformIcons+0x27c>)
 8001636:	f00f f9a5 	bl	8010984 <ILI9341_Draw_Text>
	eOutput_mode signal_output_func = SM_GetOutputChannel(SIGNAL_CHANNEL)->func_profile->func;
 800163a:	2000      	movs	r0, #0
 800163c:	f005 f9d0 	bl	80069e0 <SM_GetOutputChannel>
 8001640:	4603      	mov	r3, r0
 8001642:	f8d3 31e8 	ldr.w	r3, [r3, #488]	; 0x1e8
 8001646:	781b      	ldrb	r3, [r3, #0]
 8001648:	73fb      	strb	r3, [r7, #15]
	switch(signal_output_func)
 800164a:	7bfb      	ldrb	r3, [r7, #15]
 800164c:	2b06      	cmp	r3, #6
 800164e:	d878      	bhi.n	8001742 <_DisplayOutputWaveformIcons+0x146>
 8001650:	a201      	add	r2, pc, #4	; (adr r2, 8001658 <_DisplayOutputWaveformIcons+0x5c>)
 8001652:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001656:	bf00      	nop
 8001658:	08001675 	.word	0x08001675
 800165c:	08001695 	.word	0x08001695
 8001660:	080016b1 	.word	0x080016b1
 8001664:	080016cd 	.word	0x080016cd
 8001668:	080016e9 	.word	0x080016e9
 800166c:	08001705 	.word	0x08001705
 8001670:	08001721 	.word	0x08001721
	{
		case SINE_FUNC_MODE:
			ILI9341_Draw_Wave(main_xpos, main_ypos-20, 3, SIGNAL_OUTPUT_ICON, 100, sineicon_data_table_1300, SINEICON_DATA_SIZE);
 8001674:	88bb      	ldrh	r3, [r7, #4]
 8001676:	3b14      	subs	r3, #20
 8001678:	b299      	uxth	r1, r3
 800167a:	88f8      	ldrh	r0, [r7, #6]
 800167c:	233c      	movs	r3, #60	; 0x3c
 800167e:	9302      	str	r3, [sp, #8]
 8001680:	4b7e      	ldr	r3, [pc, #504]	; (800187c <_DisplayOutputWaveformIcons+0x280>)
 8001682:	9301      	str	r3, [sp, #4]
 8001684:	2364      	movs	r3, #100	; 0x64
 8001686:	9300      	str	r3, [sp, #0]
 8001688:	f240 23fd 	movw	r3, #765	; 0x2fd
 800168c:	2203      	movs	r2, #3
 800168e:	f00e ffd5 	bl	801063c <ILI9341_Draw_Wave>
			break;
 8001692:	e056      	b.n	8001742 <_DisplayOutputWaveformIcons+0x146>
		case SQUARE_FUNC_MODE:
			ILI9341_Draw_Wave(main_xpos, main_ypos, 3, SIGNAL_OUTPUT_ICON, 200, squareicon_data_table_3600, SQUAREICON_DATA_SIZE);
 8001694:	88b9      	ldrh	r1, [r7, #4]
 8001696:	88f8      	ldrh	r0, [r7, #6]
 8001698:	233c      	movs	r3, #60	; 0x3c
 800169a:	9302      	str	r3, [sp, #8]
 800169c:	4b78      	ldr	r3, [pc, #480]	; (8001880 <_DisplayOutputWaveformIcons+0x284>)
 800169e:	9301      	str	r3, [sp, #4]
 80016a0:	23c8      	movs	r3, #200	; 0xc8
 80016a2:	9300      	str	r3, [sp, #0]
 80016a4:	f240 23fd 	movw	r3, #765	; 0x2fd
 80016a8:	2203      	movs	r2, #3
 80016aa:	f00e ffc7 	bl	801063c <ILI9341_Draw_Wave>
			break;
 80016ae:	e048      	b.n	8001742 <_DisplayOutputWaveformIcons+0x146>
		case SAW_FUNC_MODE:
			ILI9341_Draw_Wave(main_xpos, main_ypos, 3, SIGNAL_OUTPUT_ICON, 200, sawicon_data_table_3600, SAWICON_DATA_SIZE);
 80016b0:	88b9      	ldrh	r1, [r7, #4]
 80016b2:	88f8      	ldrh	r0, [r7, #6]
 80016b4:	233c      	movs	r3, #60	; 0x3c
 80016b6:	9302      	str	r3, [sp, #8]
 80016b8:	4b72      	ldr	r3, [pc, #456]	; (8001884 <_DisplayOutputWaveformIcons+0x288>)
 80016ba:	9301      	str	r3, [sp, #4]
 80016bc:	23c8      	movs	r3, #200	; 0xc8
 80016be:	9300      	str	r3, [sp, #0]
 80016c0:	f240 23fd 	movw	r3, #765	; 0x2fd
 80016c4:	2203      	movs	r2, #3
 80016c6:	f00e ffb9 	bl	801063c <ILI9341_Draw_Wave>
			break;
 80016ca:	e03a      	b.n	8001742 <_DisplayOutputWaveformIcons+0x146>
		case REV_SAW_FUNC_MODE:
			ILI9341_Draw_Wave(main_xpos, main_ypos, 3, SIGNAL_OUTPUT_ICON, 200, sawicon_rev_data_table_3600, SAWICON_REV_DATA_SIZE);
 80016cc:	88b9      	ldrh	r1, [r7, #4]
 80016ce:	88f8      	ldrh	r0, [r7, #6]
 80016d0:	233c      	movs	r3, #60	; 0x3c
 80016d2:	9302      	str	r3, [sp, #8]
 80016d4:	4b6c      	ldr	r3, [pc, #432]	; (8001888 <_DisplayOutputWaveformIcons+0x28c>)
 80016d6:	9301      	str	r3, [sp, #4]
 80016d8:	23c8      	movs	r3, #200	; 0xc8
 80016da:	9300      	str	r3, [sp, #0]
 80016dc:	f240 23fd 	movw	r3, #765	; 0x2fd
 80016e0:	2203      	movs	r2, #3
 80016e2:	f00e ffab 	bl	801063c <ILI9341_Draw_Wave>
			break;
 80016e6:	e02c      	b.n	8001742 <_DisplayOutputWaveformIcons+0x146>
		case TRIANGLE_FUNC_MODE:
			ILI9341_Draw_Wave(main_xpos, main_ypos, 3, SIGNAL_OUTPUT_ICON, 200, triangleicon_data_table_3600, TRIANGLEICON_DATA_SIZE);
 80016e8:	88b9      	ldrh	r1, [r7, #4]
 80016ea:	88f8      	ldrh	r0, [r7, #6]
 80016ec:	233c      	movs	r3, #60	; 0x3c
 80016ee:	9302      	str	r3, [sp, #8]
 80016f0:	4b66      	ldr	r3, [pc, #408]	; (800188c <_DisplayOutputWaveformIcons+0x290>)
 80016f2:	9301      	str	r3, [sp, #4]
 80016f4:	23c8      	movs	r3, #200	; 0xc8
 80016f6:	9300      	str	r3, [sp, #0]
 80016f8:	f240 23fd 	movw	r3, #765	; 0x2fd
 80016fc:	2203      	movs	r2, #3
 80016fe:	f00e ff9d 	bl	801063c <ILI9341_Draw_Wave>
			break;
 8001702:	e01e      	b.n	8001742 <_DisplayOutputWaveformIcons+0x146>
		case IMPULSE_FUNC_MODE:
			ILI9341_Draw_Wave(main_xpos, main_ypos, 3, SIGNAL_OUTPUT_ICON, 200, triangleicon_data_table_3600, TRIANGLEICON_DATA_SIZE);
 8001704:	88b9      	ldrh	r1, [r7, #4]
 8001706:	88f8      	ldrh	r0, [r7, #6]
 8001708:	233c      	movs	r3, #60	; 0x3c
 800170a:	9302      	str	r3, [sp, #8]
 800170c:	4b5f      	ldr	r3, [pc, #380]	; (800188c <_DisplayOutputWaveformIcons+0x290>)
 800170e:	9301      	str	r3, [sp, #4]
 8001710:	23c8      	movs	r3, #200	; 0xc8
 8001712:	9300      	str	r3, [sp, #0]
 8001714:	f240 23fd 	movw	r3, #765	; 0x2fd
 8001718:	2203      	movs	r2, #3
 800171a:	f00e ff8f 	bl	801063c <ILI9341_Draw_Wave>
			break;
 800171e:	e010      	b.n	8001742 <_DisplayOutputWaveformIcons+0x146>
		case PWM_FUNC_MODE:
			ILI9341_Draw_Text("PWM", main_xpos, main_ypos+10, SIGNAL_OUTPUT_ICON, text_size, NORMAL_TEXT_BGCOLOUR);
 8001720:	88bb      	ldrh	r3, [r7, #4]
 8001722:	330a      	adds	r3, #10
 8001724:	b298      	uxth	r0, r3
 8001726:	4b53      	ldr	r3, [pc, #332]	; (8001874 <_DisplayOutputWaveformIcons+0x278>)
 8001728:	781b      	ldrb	r3, [r3, #0]
 800172a:	b29b      	uxth	r3, r3
 800172c:	88f9      	ldrh	r1, [r7, #6]
 800172e:	2200      	movs	r2, #0
 8001730:	9201      	str	r2, [sp, #4]
 8001732:	9300      	str	r3, [sp, #0]
 8001734:	f240 23fd 	movw	r3, #765	; 0x2fd
 8001738:	4602      	mov	r2, r0
 800173a:	4855      	ldr	r0, [pc, #340]	; (8001890 <_DisplayOutputWaveformIcons+0x294>)
 800173c:	f00f f922 	bl	8010984 <ILI9341_Draw_Text>
			break;
 8001740:	bf00      	nop
	}

	ILI9341_Draw_Text("AUX:", 170, aux_ypos+10, NORMAL_TEXT_FGCOLOUR, text_size, NORMAL_TEXT_BGCOLOUR);
 8001742:	883b      	ldrh	r3, [r7, #0]
 8001744:	330a      	adds	r3, #10
 8001746:	b299      	uxth	r1, r3
 8001748:	4b4a      	ldr	r3, [pc, #296]	; (8001874 <_DisplayOutputWaveformIcons+0x278>)
 800174a:	781b      	ldrb	r3, [r3, #0]
 800174c:	b29b      	uxth	r3, r3
 800174e:	2200      	movs	r2, #0
 8001750:	9201      	str	r2, [sp, #4]
 8001752:	9300      	str	r3, [sp, #0]
 8001754:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8001758:	460a      	mov	r2, r1
 800175a:	21aa      	movs	r1, #170	; 0xaa
 800175c:	484d      	ldr	r0, [pc, #308]	; (8001894 <_DisplayOutputWaveformIcons+0x298>)
 800175e:	f00f f911 	bl	8010984 <ILI9341_Draw_Text>
	eOutput_mode Aux_output_func = SM_GetOutputChannel(AUX_CHANNEL)->func_profile->func;
 8001762:	2001      	movs	r0, #1
 8001764:	f005 f93c 	bl	80069e0 <SM_GetOutputChannel>
 8001768:	4603      	mov	r3, r0
 800176a:	f8d3 31e8 	ldr.w	r3, [r3, #488]	; 0x1e8
 800176e:	781b      	ldrb	r3, [r3, #0]
 8001770:	73bb      	strb	r3, [r7, #14]
	switch(Aux_output_func)
 8001772:	7bbb      	ldrb	r3, [r7, #14]
 8001774:	2b06      	cmp	r3, #6
 8001776:	d878      	bhi.n	800186a <_DisplayOutputWaveformIcons+0x26e>
 8001778:	a201      	add	r2, pc, #4	; (adr r2, 8001780 <_DisplayOutputWaveformIcons+0x184>)
 800177a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800177e:	bf00      	nop
 8001780:	0800179d 	.word	0x0800179d
 8001784:	080017bd 	.word	0x080017bd
 8001788:	080017d9 	.word	0x080017d9
 800178c:	080017f5 	.word	0x080017f5
 8001790:	08001811 	.word	0x08001811
 8001794:	0800182d 	.word	0x0800182d
 8001798:	08001849 	.word	0x08001849
	{
		case SINE_FUNC_MODE:

			ILI9341_Draw_Wave(aux_xpos, aux_ypos-20, 3, Aux_OUTPUT_ICON, 100, sineicon_data_table_1300, SINEICON_DATA_SIZE);
 800179c:	883b      	ldrh	r3, [r7, #0]
 800179e:	3b14      	subs	r3, #20
 80017a0:	b299      	uxth	r1, r3
 80017a2:	8878      	ldrh	r0, [r7, #2]
 80017a4:	233c      	movs	r3, #60	; 0x3c
 80017a6:	9302      	str	r3, [sp, #8]
 80017a8:	4b34      	ldr	r3, [pc, #208]	; (800187c <_DisplayOutputWaveformIcons+0x280>)
 80017aa:	9301      	str	r3, [sp, #4]
 80017ac:	2364      	movs	r3, #100	; 0x64
 80017ae:	9300      	str	r3, [sp, #0]
 80017b0:	f64d 03c3 	movw	r3, #55491	; 0xd8c3
 80017b4:	2203      	movs	r2, #3
 80017b6:	f00e ff41 	bl	801063c <ILI9341_Draw_Wave>
			break;
 80017ba:	e056      	b.n	800186a <_DisplayOutputWaveformIcons+0x26e>
		case SQUARE_FUNC_MODE:
			ILI9341_Draw_Wave(aux_xpos, aux_ypos, 3, Aux_OUTPUT_ICON, 200, squareicon_data_table_3600, SQUAREICON_DATA_SIZE);
 80017bc:	8839      	ldrh	r1, [r7, #0]
 80017be:	8878      	ldrh	r0, [r7, #2]
 80017c0:	233c      	movs	r3, #60	; 0x3c
 80017c2:	9302      	str	r3, [sp, #8]
 80017c4:	4b2e      	ldr	r3, [pc, #184]	; (8001880 <_DisplayOutputWaveformIcons+0x284>)
 80017c6:	9301      	str	r3, [sp, #4]
 80017c8:	23c8      	movs	r3, #200	; 0xc8
 80017ca:	9300      	str	r3, [sp, #0]
 80017cc:	f64d 03c3 	movw	r3, #55491	; 0xd8c3
 80017d0:	2203      	movs	r2, #3
 80017d2:	f00e ff33 	bl	801063c <ILI9341_Draw_Wave>
			break;
 80017d6:	e048      	b.n	800186a <_DisplayOutputWaveformIcons+0x26e>
		case SAW_FUNC_MODE:
			ILI9341_Draw_Wave(aux_xpos, aux_ypos, 3, Aux_OUTPUT_ICON, 200, sawicon_data_table_3600, SAWICON_DATA_SIZE);
 80017d8:	8839      	ldrh	r1, [r7, #0]
 80017da:	8878      	ldrh	r0, [r7, #2]
 80017dc:	233c      	movs	r3, #60	; 0x3c
 80017de:	9302      	str	r3, [sp, #8]
 80017e0:	4b28      	ldr	r3, [pc, #160]	; (8001884 <_DisplayOutputWaveformIcons+0x288>)
 80017e2:	9301      	str	r3, [sp, #4]
 80017e4:	23c8      	movs	r3, #200	; 0xc8
 80017e6:	9300      	str	r3, [sp, #0]
 80017e8:	f64d 03c3 	movw	r3, #55491	; 0xd8c3
 80017ec:	2203      	movs	r2, #3
 80017ee:	f00e ff25 	bl	801063c <ILI9341_Draw_Wave>
			break;
 80017f2:	e03a      	b.n	800186a <_DisplayOutputWaveformIcons+0x26e>
		case REV_SAW_FUNC_MODE:
			ILI9341_Draw_Wave(aux_xpos, aux_ypos, 3, Aux_OUTPUT_ICON, 200, sawicon_rev_data_table_3600, SAWICON_REV_DATA_SIZE);
 80017f4:	8839      	ldrh	r1, [r7, #0]
 80017f6:	8878      	ldrh	r0, [r7, #2]
 80017f8:	233c      	movs	r3, #60	; 0x3c
 80017fa:	9302      	str	r3, [sp, #8]
 80017fc:	4b22      	ldr	r3, [pc, #136]	; (8001888 <_DisplayOutputWaveformIcons+0x28c>)
 80017fe:	9301      	str	r3, [sp, #4]
 8001800:	23c8      	movs	r3, #200	; 0xc8
 8001802:	9300      	str	r3, [sp, #0]
 8001804:	f64d 03c3 	movw	r3, #55491	; 0xd8c3
 8001808:	2203      	movs	r2, #3
 800180a:	f00e ff17 	bl	801063c <ILI9341_Draw_Wave>
			break;
 800180e:	e02c      	b.n	800186a <_DisplayOutputWaveformIcons+0x26e>
		case TRIANGLE_FUNC_MODE:
			ILI9341_Draw_Wave(aux_xpos, aux_ypos, 3, Aux_OUTPUT_ICON, 200, triangleicon_data_table_3600, TRIANGLEICON_DATA_SIZE);
 8001810:	8839      	ldrh	r1, [r7, #0]
 8001812:	8878      	ldrh	r0, [r7, #2]
 8001814:	233c      	movs	r3, #60	; 0x3c
 8001816:	9302      	str	r3, [sp, #8]
 8001818:	4b1c      	ldr	r3, [pc, #112]	; (800188c <_DisplayOutputWaveformIcons+0x290>)
 800181a:	9301      	str	r3, [sp, #4]
 800181c:	23c8      	movs	r3, #200	; 0xc8
 800181e:	9300      	str	r3, [sp, #0]
 8001820:	f64d 03c3 	movw	r3, #55491	; 0xd8c3
 8001824:	2203      	movs	r2, #3
 8001826:	f00e ff09 	bl	801063c <ILI9341_Draw_Wave>
			break;
 800182a:	e01e      	b.n	800186a <_DisplayOutputWaveformIcons+0x26e>
		case IMPULSE_FUNC_MODE:
			ILI9341_Draw_Wave(aux_xpos, aux_ypos, 3, Aux_OUTPUT_ICON, 200, triangleicon_data_table_3600, TRIANGLEICON_DATA_SIZE);
 800182c:	8839      	ldrh	r1, [r7, #0]
 800182e:	8878      	ldrh	r0, [r7, #2]
 8001830:	233c      	movs	r3, #60	; 0x3c
 8001832:	9302      	str	r3, [sp, #8]
 8001834:	4b15      	ldr	r3, [pc, #84]	; (800188c <_DisplayOutputWaveformIcons+0x290>)
 8001836:	9301      	str	r3, [sp, #4]
 8001838:	23c8      	movs	r3, #200	; 0xc8
 800183a:	9300      	str	r3, [sp, #0]
 800183c:	f64d 03c3 	movw	r3, #55491	; 0xd8c3
 8001840:	2203      	movs	r2, #3
 8001842:	f00e fefb 	bl	801063c <ILI9341_Draw_Wave>
			break;
 8001846:	e010      	b.n	800186a <_DisplayOutputWaveformIcons+0x26e>
		case PWM_FUNC_MODE:
			ILI9341_Draw_Text("PWM", aux_xpos, aux_ypos+10, Aux_OUTPUT_ICON, text_size, NORMAL_TEXT_BGCOLOUR);
 8001848:	883b      	ldrh	r3, [r7, #0]
 800184a:	330a      	adds	r3, #10
 800184c:	b298      	uxth	r0, r3
 800184e:	4b09      	ldr	r3, [pc, #36]	; (8001874 <_DisplayOutputWaveformIcons+0x278>)
 8001850:	781b      	ldrb	r3, [r3, #0]
 8001852:	b29b      	uxth	r3, r3
 8001854:	8879      	ldrh	r1, [r7, #2]
 8001856:	2200      	movs	r2, #0
 8001858:	9201      	str	r2, [sp, #4]
 800185a:	9300      	str	r3, [sp, #0]
 800185c:	f64d 03c3 	movw	r3, #55491	; 0xd8c3
 8001860:	4602      	mov	r2, r0
 8001862:	480b      	ldr	r0, [pc, #44]	; (8001890 <_DisplayOutputWaveformIcons+0x294>)
 8001864:	f00f f88e 	bl	8010984 <ILI9341_Draw_Text>
			break;
 8001868:	bf00      	nop
	}
}
 800186a:	bf00      	nop
 800186c:	3714      	adds	r7, #20
 800186e:	46bd      	mov	sp, r7
 8001870:	bd90      	pop	{r4, r7, pc}
 8001872:	bf00      	nop
 8001874:	20000000 	.word	0x20000000
 8001878:	0801595c 	.word	0x0801595c
 800187c:	200010a4 	.word	0x200010a4
 8001880:	20001194 	.word	0x20001194
 8001884:	20000ec4 	.word	0x20000ec4
 8001888:	20000fb4 	.word	0x20000fb4
 800188c:	20001284 	.word	0x20001284
 8001890:	08015964 	.word	0x08015964
 8001894:	08015968 	.word	0x08015968

08001898 <DM_RefreshScreen>:
 *	@param None
 *	@retval None
 *
 */
void DM_RefreshScreen()
{
 8001898:	b580      	push	{r7, lr}
 800189a:	b084      	sub	sp, #16
 800189c:	af04      	add	r7, sp, #16



	// pause display interrupts
	HAL_TIM_Base_Stop_IT(&htim15);
 800189e:	4820      	ldr	r0, [pc, #128]	; (8001920 <DM_RefreshScreen+0x88>)
 80018a0:	f00c f856 	bl	800d950 <HAL_TIM_Base_Stop_IT>


	ILI9341_Fill_Screen(SCREEN_BGCOLOUR);
 80018a4:	2000      	movs	r0, #0
 80018a6:	f00f faed 	bl	8010e84 <ILI9341_Fill_Screen>
	GUI_DrawPolygon(Points, 3, RED);
	GUI_FillPolygon(Points2, 3, BLUE);
	GUI_DrawEllipse(250, 110, 20, 30, GREEN);
	GUI_FillEllipse(250, 110, 20, 30, WHITE);
*/
	ILI9341_Draw_Bordered_Filled_Rectangle_Coord(	0,
 80018aa:	2300      	movs	r3, #0
 80018ac:	9302      	str	r3, [sp, #8]
 80018ae:	2302      	movs	r3, #2
 80018b0:	9301      	str	r3, [sp, #4]
 80018b2:	f240 23fd 	movw	r3, #765	; 0x2fd
 80018b6:	9300      	str	r3, [sp, #0]
 80018b8:	2328      	movs	r3, #40	; 0x28
 80018ba:	2250      	movs	r2, #80	; 0x50
 80018bc:	21c8      	movs	r1, #200	; 0xc8
 80018be:	2000      	movs	r0, #0
 80018c0:	f00e fefd 	bl	80106be <ILI9341_Draw_Bordered_Filled_Rectangle_Coord>
													BTN_HEIGHT,
													BTN1_FILL_COLOUR,
													BTN1_BORDER_WEIGHT,
													BTN1_BORDER_COLOUR);

	ILI9341_Draw_Bordered_Filled_Rectangle_Coord(	BTN_WIDTH,
 80018c4:	2300      	movs	r3, #0
 80018c6:	9302      	str	r3, [sp, #8]
 80018c8:	2302      	movs	r3, #2
 80018ca:	9301      	str	r3, [sp, #4]
 80018cc:	f241 43a2 	movw	r3, #5282	; 0x14a2
 80018d0:	9300      	str	r3, [sp, #0]
 80018d2:	2328      	movs	r3, #40	; 0x28
 80018d4:	2250      	movs	r2, #80	; 0x50
 80018d6:	21c8      	movs	r1, #200	; 0xc8
 80018d8:	2050      	movs	r0, #80	; 0x50
 80018da:	f00e fef0 	bl	80106be <ILI9341_Draw_Bordered_Filled_Rectangle_Coord>
													BTN_HEIGHT,
													BTN2_FILL_COLOUR,
													BTN2_BORDER_WEIGHT,
													BTN2_BORDER_COLOUR);

	ILI9341_Draw_Bordered_Filled_Rectangle_Coord(	BTN_WIDTH*2,
 80018de:	2300      	movs	r3, #0
 80018e0:	9302      	str	r3, [sp, #8]
 80018e2:	2302      	movs	r3, #2
 80018e4:	9301      	str	r3, [sp, #4]
 80018e6:	f64f 73e0 	movw	r3, #65504	; 0xffe0
 80018ea:	9300      	str	r3, [sp, #0]
 80018ec:	2328      	movs	r3, #40	; 0x28
 80018ee:	2250      	movs	r2, #80	; 0x50
 80018f0:	21c8      	movs	r1, #200	; 0xc8
 80018f2:	20a0      	movs	r0, #160	; 0xa0
 80018f4:	f00e fee3 	bl	80106be <ILI9341_Draw_Bordered_Filled_Rectangle_Coord>
													BTN_HEIGHT,
													BTN3_FILL_COLOUR,
													BTN3_BORDER_WEIGHT,
													BTN3_BORDER_COLOUR);

	ILI9341_Draw_Bordered_Filled_Rectangle_Coord(	BTN_WIDTH*3,
 80018f8:	2300      	movs	r3, #0
 80018fa:	9302      	str	r3, [sp, #8]
 80018fc:	2302      	movs	r3, #2
 80018fe:	9301      	str	r3, [sp, #4]
 8001900:	f64d 03c3 	movw	r3, #55491	; 0xd8c3
 8001904:	9300      	str	r3, [sp, #0]
 8001906:	2328      	movs	r3, #40	; 0x28
 8001908:	2250      	movs	r2, #80	; 0x50
 800190a:	21c8      	movs	r1, #200	; 0xc8
 800190c:	20f0      	movs	r0, #240	; 0xf0
 800190e:	f00e fed6 	bl	80106be <ILI9341_Draw_Bordered_Filled_Rectangle_Coord>
													BTN4_FILL_COLOUR,
													BTN4_BORDER_WEIGHT,
													BTN4_BORDER_COLOUR);

	// resume diaplay interrupts
	HAL_TIM_Base_Start_IT(&htim15);
 8001912:	4803      	ldr	r0, [pc, #12]	; (8001920 <DM_RefreshScreen+0x88>)
 8001914:	f00b ffe6 	bl	800d8e4 <HAL_TIM_Base_Start_IT>


}
 8001918:	bf00      	nop
 800191a:	46bd      	mov	sp, r7
 800191c:	bd80      	pop	{r7, pc}
 800191e:	bf00      	nop
 8001920:	20002ab0 	.word	0x20002ab0

08001924 <DM_SetErrorDebugMsg>:
	ILI9341_Draw_Text("- SINE", 	10, 30, WHITE, 2, BLACK);
	*/
}

void DM_SetErrorDebugMsg(char* msg)
{
 8001924:	b580      	push	{r7, lr}
 8001926:	b084      	sub	sp, #16
 8001928:	af02      	add	r7, sp, #8
 800192a:	6078      	str	r0, [r7, #4]
	snprintf(ErrorDebugMsg, sizeof(ErrorDebugMsg), "%s", msg);
 800192c:	687b      	ldr	r3, [r7, #4]
 800192e:	4a0a      	ldr	r2, [pc, #40]	; (8001958 <DM_SetErrorDebugMsg+0x34>)
 8001930:	212d      	movs	r1, #45	; 0x2d
 8001932:	480a      	ldr	r0, [pc, #40]	; (800195c <DM_SetErrorDebugMsg+0x38>)
 8001934:	f010 fbe2 	bl	80120fc <sniprintf>
	ILI9341_Draw_Text(ErrorDebugMsg, 10, 190, ERR_FGCOLOUR, 1, ERR_BGCOLOUR);
 8001938:	f64d 03c3 	movw	r3, #55491	; 0xd8c3
 800193c:	9301      	str	r3, [sp, #4]
 800193e:	2301      	movs	r3, #1
 8001940:	9300      	str	r3, [sp, #0]
 8001942:	2300      	movs	r3, #0
 8001944:	22be      	movs	r2, #190	; 0xbe
 8001946:	210a      	movs	r1, #10
 8001948:	4804      	ldr	r0, [pc, #16]	; (800195c <DM_SetErrorDebugMsg+0x38>)
 800194a:	f00f f81b 	bl	8010984 <ILI9341_Draw_Text>
}
 800194e:	bf00      	nop
 8001950:	3708      	adds	r7, #8
 8001952:	46bd      	mov	sp, r7
 8001954:	bd80      	pop	{r7, pc}
 8001956:	bf00      	nop
 8001958:	080159ec 	.word	0x080159ec
 800195c:	200020a4 	.word	0x200020a4

08001960 <FreqMenu_DrawMenu>:
			Freq_Prescaler_Menu_State,
 *	@retval None
 *
 */
void FreqMenu_DrawMenu(eSystemState pMenu)
{
 8001960:	b580      	push	{r7, lr}
 8001962:	b082      	sub	sp, #8
 8001964:	af00      	add	r7, sp, #0
 8001966:	4603      	mov	r3, r0
 8001968:	71fb      	strb	r3, [r7, #7]
	switch(pMenu)
 800196a:	79fb      	ldrb	r3, [r7, #7]
 800196c:	3b0a      	subs	r3, #10
 800196e:	2b04      	cmp	r3, #4
 8001970:	d81b      	bhi.n	80019aa <FreqMenu_DrawMenu+0x4a>
 8001972:	a201      	add	r2, pc, #4	; (adr r2, 8001978 <FreqMenu_DrawMenu+0x18>)
 8001974:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001978:	0800198d 	.word	0x0800198d
 800197c:	08001993 	.word	0x08001993
 8001980:	08001999 	.word	0x08001999
 8001984:	0800199f 	.word	0x0800199f
 8001988:	080019a5 	.word	0x080019a5
	{
		case Freq_Main_Menu_State:
			FreqMenu_DrawMainMenu();
 800198c:	f000 f812 	bl	80019b4 <FreqMenu_DrawMainMenu>
			break;
 8001990:	e00c      	b.n	80019ac <FreqMenu_DrawMenu+0x4c>
		case Freq_Preset_Menu_State:
			FreqMenu_DrawPresetMenu();
 8001992:	f000 f859 	bl	8001a48 <FreqMenu_DrawPresetMenu>
			break;
 8001996:	e009      	b.n	80019ac <FreqMenu_DrawMenu+0x4c>
		case Freq_Adjust_Menu_State:
			FreqMenu_DrawAdjustMenu();
 8001998:	f001 fb06 	bl	8002fa8 <FreqMenu_DrawAdjustMenu>
			break;
 800199c:	e006      	b.n	80019ac <FreqMenu_DrawMenu+0x4c>
		case Freq_Sweep_Menu_State:
			FreqMenu_DrawSweepMenu();
 800199e:	f001 fb19 	bl	8002fd4 <FreqMenu_DrawSweepMenu>
			break;
 80019a2:	e003      	b.n	80019ac <FreqMenu_DrawMenu+0x4c>
		case Freq_Prescaler_Menu_State:
			FreqMenu_DrawPrescalerMenu();
 80019a4:	f001 fce2 	bl	800336c <FreqMenu_DrawPrescalerMenu>
			break;
 80019a8:	e000      	b.n	80019ac <FreqMenu_DrawMenu+0x4c>
		default:
			break;
 80019aa:	bf00      	nop

	}
}
 80019ac:	bf00      	nop
 80019ae:	3708      	adds	r7, #8
 80019b0:	46bd      	mov	sp, r7
 80019b2:	bd80      	pop	{r7, pc}

080019b4 <FreqMenu_DrawMainMenu>:
 *	@param None
 *	@retval None
 *
 */
void FreqMenu_DrawMainMenu()
{
 80019b4:	b580      	push	{r7, lr}
 80019b6:	b082      	sub	sp, #8
 80019b8:	af02      	add	r7, sp, #8
	// main
	ILI9341_Draw_Text("OUT->FREQ", 	5, 10, BREADTRAIL_FGCOLOUR, 2, BREADTRAIL_BGCOLOUR);
 80019ba:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80019be:	9301      	str	r3, [sp, #4]
 80019c0:	2302      	movs	r3, #2
 80019c2:	9300      	str	r3, [sp, #0]
 80019c4:	2300      	movs	r3, #0
 80019c6:	220a      	movs	r2, #10
 80019c8:	2105      	movs	r1, #5
 80019ca:	481a      	ldr	r0, [pc, #104]	; (8001a34 <FreqMenu_DrawMainMenu+0x80>)
 80019cc:	f00e ffda 	bl	8010984 <ILI9341_Draw_Text>
//	ILI9341_Draw_Text("Select an option below", 	30, 165, BLACK, 2, WHITE);

	DM_DisplayFormattedOutput();
 80019d0:	f7ff fa42 	bl	8000e58 <DM_DisplayFormattedOutput>

	// buttons
	ILI9341_Draw_Text("COARSE", 5,   210, BTN1_TEXT_FGCOLOUR, 2, BTN1_TEXT_BGCOLOUR);
 80019d4:	f240 23fd 	movw	r3, #765	; 0x2fd
 80019d8:	9301      	str	r3, [sp, #4]
 80019da:	2302      	movs	r3, #2
 80019dc:	9300      	str	r3, [sp, #0]
 80019de:	2300      	movs	r3, #0
 80019e0:	22d2      	movs	r2, #210	; 0xd2
 80019e2:	2105      	movs	r1, #5
 80019e4:	4814      	ldr	r0, [pc, #80]	; (8001a38 <FreqMenu_DrawMainMenu+0x84>)
 80019e6:	f00e ffcd 	bl	8010984 <ILI9341_Draw_Text>
	ILI9341_Draw_Text("FINE", 97,  210, BTN2_TEXT_FGCOLOUR, 2, BTN2_TEXT_BGCOLOUR);
 80019ea:	f241 43a2 	movw	r3, #5282	; 0x14a2
 80019ee:	9301      	str	r3, [sp, #4]
 80019f0:	2302      	movs	r3, #2
 80019f2:	9300      	str	r3, [sp, #0]
 80019f4:	2300      	movs	r3, #0
 80019f6:	22d2      	movs	r2, #210	; 0xd2
 80019f8:	2161      	movs	r1, #97	; 0x61
 80019fa:	4810      	ldr	r0, [pc, #64]	; (8001a3c <FreqMenu_DrawMainMenu+0x88>)
 80019fc:	f00e ffc2 	bl	8010984 <ILI9341_Draw_Text>
	ILI9341_Draw_Text("SWEEP",  172, 210, BTN3_TEXT_FGCOLOUR, 2, BTN3_TEXT_BGCOLOUR);
 8001a00:	f64f 73e0 	movw	r3, #65504	; 0xffe0
 8001a04:	9301      	str	r3, [sp, #4]
 8001a06:	2302      	movs	r3, #2
 8001a08:	9300      	str	r3, [sp, #0]
 8001a0a:	2300      	movs	r3, #0
 8001a0c:	22d2      	movs	r2, #210	; 0xd2
 8001a0e:	21ac      	movs	r1, #172	; 0xac
 8001a10:	480b      	ldr	r0, [pc, #44]	; (8001a40 <FreqMenu_DrawMainMenu+0x8c>)
 8001a12:	f00e ffb7 	bl	8010984 <ILI9341_Draw_Text>
	ILI9341_Draw_Text("PSC", 260, 210, BTN4_TEXT_FGCOLOUR, 2, BTN4_TEXT_BGCOLOUR);
 8001a16:	f64d 03c3 	movw	r3, #55491	; 0xd8c3
 8001a1a:	9301      	str	r3, [sp, #4]
 8001a1c:	2302      	movs	r3, #2
 8001a1e:	9300      	str	r3, [sp, #0]
 8001a20:	2300      	movs	r3, #0
 8001a22:	22d2      	movs	r2, #210	; 0xd2
 8001a24:	f44f 7182 	mov.w	r1, #260	; 0x104
 8001a28:	4806      	ldr	r0, [pc, #24]	; (8001a44 <FreqMenu_DrawMainMenu+0x90>)
 8001a2a:	f00e ffab 	bl	8010984 <ILI9341_Draw_Text>
}
 8001a2e:	bf00      	nop
 8001a30:	46bd      	mov	sp, r7
 8001a32:	bd80      	pop	{r7, pc}
 8001a34:	080159f0 	.word	0x080159f0
 8001a38:	080159fc 	.word	0x080159fc
 8001a3c:	08015a04 	.word	0x08015a04
 8001a40:	08015a0c 	.word	0x08015a0c
 8001a44:	08015a14 	.word	0x08015a14

08001a48 <FreqMenu_DrawPresetMenu>:
 *	@param None
 *	@retval None
 *
 */
void FreqMenu_DrawPresetMenu()
{
 8001a48:	b580      	push	{r7, lr}
 8001a4a:	b086      	sub	sp, #24
 8001a4c:	af02      	add	r7, sp, #8



	ILI9341_Draw_Text("OUT->FREQ->PRESET", 	5, 10, BREADTRAIL_FGCOLOUR, 2, BREADTRAIL_BGCOLOUR);
 8001a4e:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001a52:	9301      	str	r3, [sp, #4]
 8001a54:	2302      	movs	r3, #2
 8001a56:	9300      	str	r3, [sp, #0]
 8001a58:	2300      	movs	r3, #0
 8001a5a:	220a      	movs	r2, #10
 8001a5c:	2105      	movs	r1, #5
 8001a5e:	4887      	ldr	r0, [pc, #540]	; (8001c7c <FreqMenu_DrawPresetMenu+0x234>)
 8001a60:	f00e ff90 	bl	8010984 <ILI9341_Draw_Text>

	DM_DisplayInputTriggerStatus();
 8001a64:	f7ff fa18 	bl	8000e98 <DM_DisplayInputTriggerStatus>

	uint8_t menu_pos_y1 = 40;
 8001a68:	2328      	movs	r3, #40	; 0x28
 8001a6a:	73fb      	strb	r3, [r7, #15]
	uint8_t menu_pos_y2 = 60;
 8001a6c:	233c      	movs	r3, #60	; 0x3c
 8001a6e:	73bb      	strb	r3, [r7, #14]
	uint8_t menu_pos_y3 = 80;
 8001a70:	2350      	movs	r3, #80	; 0x50
 8001a72:	737b      	strb	r3, [r7, #13]
	uint8_t menu_pos_y4 = 100;
 8001a74:	2364      	movs	r3, #100	; 0x64
 8001a76:	733b      	strb	r3, [r7, #12]
	uint8_t menu_pos_y5 = 120;
 8001a78:	2378      	movs	r3, #120	; 0x78
 8001a7a:	72fb      	strb	r3, [r7, #11]
	uint8_t menu_pos_y6 = 140;
 8001a7c:	238c      	movs	r3, #140	; 0x8c
 8001a7e:	72bb      	strb	r3, [r7, #10]
	uint8_t menu_pos_y7 = 160;
 8001a80:	23a0      	movs	r3, #160	; 0xa0
 8001a82:	727b      	strb	r3, [r7, #9]
	FreqProfile_t *pFreqPresetTmp =  FreqO_GetFPresetObject();
 8001a84:	f003 ffb2 	bl	80059ec <FreqO_GetFPresetObject>
 8001a88:	6078      	str	r0, [r7, #4]
	if(pFreqPresetTmp)
 8001a8a:	687b      	ldr	r3, [r7, #4]
 8001a8c:	2b00      	cmp	r3, #0
 8001a8e:	f001 825d 	beq.w	8002f4c <FreqMenu_DrawPresetMenu+0x1504>
	{
		switch(pFreqPresetTmp->hertz)
 8001a92:	687b      	ldr	r3, [r7, #4]
 8001a94:	685b      	ldr	r3, [r3, #4]
 8001a96:	f240 22ee 	movw	r2, #750	; 0x2ee
 8001a9a:	4293      	cmp	r3, r2
 8001a9c:	f000 849a 	beq.w	80023d4 <FreqMenu_DrawPresetMenu+0x98c>
 8001aa0:	f240 22ee 	movw	r2, #750	; 0x2ee
 8001aa4:	4293      	cmp	r3, r2
 8001aa6:	d817      	bhi.n	8001ad8 <FreqMenu_DrawPresetMenu+0x90>
 8001aa8:	2b32      	cmp	r3, #50	; 0x32
 8001aaa:	f000 81b3 	beq.w	8001e14 <FreqMenu_DrawPresetMenu+0x3cc>
 8001aae:	2b32      	cmp	r3, #50	; 0x32
 8001ab0:	d806      	bhi.n	8001ac0 <FreqMenu_DrawPresetMenu+0x78>
 8001ab2:	2b01      	cmp	r3, #1
 8001ab4:	d038      	beq.n	8001b28 <FreqMenu_DrawPresetMenu+0xe0>
 8001ab6:	2b0a      	cmp	r3, #10
 8001ab8:	f000 8102 	beq.w	8001cc0 <FreqMenu_DrawPresetMenu+0x278>
	else
	{
		ILI9341_Draw_Text("FreqMenus::FreqMenu_DrawFreqPresetMenu() Error", 		5, 180, ERR_FGCOLOUR, 1, ERR_BGCOLOUR);
	}

}
 8001abc:	f001 ba52 	b.w	8002f64 <FreqMenu_DrawPresetMenu+0x151c>
		switch(pFreqPresetTmp->hertz)
 8001ac0:	2bfa      	cmp	r3, #250	; 0xfa
 8001ac2:	f000 8317 	beq.w	80020f4 <FreqMenu_DrawPresetMenu+0x6ac>
 8001ac6:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8001aca:	f000 83d9 	beq.w	8002280 <FreqMenu_DrawPresetMenu+0x838>
 8001ace:	2b64      	cmp	r3, #100	; 0x64
 8001ad0:	f000 8266 	beq.w	8001fa0 <FreqMenu_DrawPresetMenu+0x558>
}
 8001ad4:	f001 ba46 	b.w	8002f64 <FreqMenu_DrawPresetMenu+0x151c>
		switch(pFreqPresetTmp->hertz)
 8001ad8:	f246 12a8 	movw	r2, #25000	; 0x61a8
 8001adc:	4293      	cmp	r3, r2
 8001ade:	f000 8758 	beq.w	8002992 <FreqMenu_DrawPresetMenu+0xf4a>
 8001ae2:	f246 12a8 	movw	r2, #25000	; 0x61a8
 8001ae6:	4293      	cmp	r3, r2
 8001ae8:	d80f      	bhi.n	8001b0a <FreqMenu_DrawPresetMenu+0xc2>
 8001aea:	f241 3288 	movw	r2, #5000	; 0x1388
 8001aee:	4293      	cmp	r3, r2
 8001af0:	f000 85e0 	beq.w	80026b4 <FreqMenu_DrawPresetMenu+0xc6c>
 8001af4:	f242 7210 	movw	r2, #10000	; 0x2710
 8001af8:	4293      	cmp	r3, r2
 8001afa:	f000 86a1 	beq.w	8002840 <FreqMenu_DrawPresetMenu+0xdf8>
 8001afe:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8001b02:	f000 852d 	beq.w	8002560 <FreqMenu_DrawPresetMenu+0xb18>
}
 8001b06:	f001 ba2d 	b.w	8002f64 <FreqMenu_DrawPresetMenu+0x151c>
		switch(pFreqPresetTmp->hertz)
 8001b0a:	4a5d      	ldr	r2, [pc, #372]	; (8001c80 <FreqMenu_DrawPresetMenu+0x238>)
 8001b0c:	4293      	cmp	r3, r2
 8001b0e:	f001 80ae 	beq.w	8002c6e <FreqMenu_DrawPresetMenu+0x1226>
 8001b12:	4a5c      	ldr	r2, [pc, #368]	; (8001c84 <FreqMenu_DrawPresetMenu+0x23c>)
 8001b14:	4293      	cmp	r3, r2
 8001b16:	f001 816f 	beq.w	8002df8 <FreqMenu_DrawPresetMenu+0x13b0>
 8001b1a:	f24c 3250 	movw	r2, #50000	; 0xc350
 8001b1e:	4293      	cmp	r3, r2
 8001b20:	f000 87fc 	beq.w	8002b1c <FreqMenu_DrawPresetMenu+0x10d4>
}
 8001b24:	f001 ba1e 	b.w	8002f64 <FreqMenu_DrawPresetMenu+0x151c>
				ILI9341_Draw_Text("- 1Hz", 		5, menu_pos_y1, HIGHLIGHT_TEXT_FGCOLOUR, 2, HIGHLIGHT_TEXT_BGCOLOUR);
 8001b28:	7bfb      	ldrb	r3, [r7, #15]
 8001b2a:	b29a      	uxth	r2, r3
 8001b2c:	f644 43f6 	movw	r3, #19702	; 0x4cf6
 8001b30:	9301      	str	r3, [sp, #4]
 8001b32:	2302      	movs	r3, #2
 8001b34:	9300      	str	r3, [sp, #0]
 8001b36:	2300      	movs	r3, #0
 8001b38:	2105      	movs	r1, #5
 8001b3a:	4853      	ldr	r0, [pc, #332]	; (8001c88 <FreqMenu_DrawPresetMenu+0x240>)
 8001b3c:	f00e ff22 	bl	8010984 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 10Hz", 	5, menu_pos_y2, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8001b40:	7bbb      	ldrb	r3, [r7, #14]
 8001b42:	b29a      	uxth	r2, r3
 8001b44:	2300      	movs	r3, #0
 8001b46:	9301      	str	r3, [sp, #4]
 8001b48:	2302      	movs	r3, #2
 8001b4a:	9300      	str	r3, [sp, #0]
 8001b4c:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8001b50:	2105      	movs	r1, #5
 8001b52:	484e      	ldr	r0, [pc, #312]	; (8001c8c <FreqMenu_DrawPresetMenu+0x244>)
 8001b54:	f00e ff16 	bl	8010984 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 50Hz", 	5, menu_pos_y3, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8001b58:	7b7b      	ldrb	r3, [r7, #13]
 8001b5a:	b29a      	uxth	r2, r3
 8001b5c:	2300      	movs	r3, #0
 8001b5e:	9301      	str	r3, [sp, #4]
 8001b60:	2302      	movs	r3, #2
 8001b62:	9300      	str	r3, [sp, #0]
 8001b64:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8001b68:	2105      	movs	r1, #5
 8001b6a:	4849      	ldr	r0, [pc, #292]	; (8001c90 <FreqMenu_DrawPresetMenu+0x248>)
 8001b6c:	f00e ff0a 	bl	8010984 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 100Hz", 	5, menu_pos_y4, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8001b70:	7b3b      	ldrb	r3, [r7, #12]
 8001b72:	b29a      	uxth	r2, r3
 8001b74:	2300      	movs	r3, #0
 8001b76:	9301      	str	r3, [sp, #4]
 8001b78:	2302      	movs	r3, #2
 8001b7a:	9300      	str	r3, [sp, #0]
 8001b7c:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8001b80:	2105      	movs	r1, #5
 8001b82:	4844      	ldr	r0, [pc, #272]	; (8001c94 <FreqMenu_DrawPresetMenu+0x24c>)
 8001b84:	f00e fefe 	bl	8010984 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 250Hz", 	5, menu_pos_y5, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8001b88:	7afb      	ldrb	r3, [r7, #11]
 8001b8a:	b29a      	uxth	r2, r3
 8001b8c:	2300      	movs	r3, #0
 8001b8e:	9301      	str	r3, [sp, #4]
 8001b90:	2302      	movs	r3, #2
 8001b92:	9300      	str	r3, [sp, #0]
 8001b94:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8001b98:	2105      	movs	r1, #5
 8001b9a:	483f      	ldr	r0, [pc, #252]	; (8001c98 <FreqMenu_DrawPresetMenu+0x250>)
 8001b9c:	f00e fef2 	bl	8010984 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 500Hz",	5, menu_pos_y6, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8001ba0:	7abb      	ldrb	r3, [r7, #10]
 8001ba2:	b29a      	uxth	r2, r3
 8001ba4:	2300      	movs	r3, #0
 8001ba6:	9301      	str	r3, [sp, #4]
 8001ba8:	2302      	movs	r3, #2
 8001baa:	9300      	str	r3, [sp, #0]
 8001bac:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8001bb0:	2105      	movs	r1, #5
 8001bb2:	483a      	ldr	r0, [pc, #232]	; (8001c9c <FreqMenu_DrawPresetMenu+0x254>)
 8001bb4:	f00e fee6 	bl	8010984 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 750Hz", 	5, menu_pos_y7, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8001bb8:	7a7b      	ldrb	r3, [r7, #9]
 8001bba:	b29a      	uxth	r2, r3
 8001bbc:	2300      	movs	r3, #0
 8001bbe:	9301      	str	r3, [sp, #4]
 8001bc0:	2302      	movs	r3, #2
 8001bc2:	9300      	str	r3, [sp, #0]
 8001bc4:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8001bc8:	2105      	movs	r1, #5
 8001bca:	4835      	ldr	r0, [pc, #212]	; (8001ca0 <FreqMenu_DrawPresetMenu+0x258>)
 8001bcc:	f00e feda 	bl	8010984 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 1KHz", 	120, menu_pos_y1, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8001bd0:	7bfb      	ldrb	r3, [r7, #15]
 8001bd2:	b29a      	uxth	r2, r3
 8001bd4:	2300      	movs	r3, #0
 8001bd6:	9301      	str	r3, [sp, #4]
 8001bd8:	2302      	movs	r3, #2
 8001bda:	9300      	str	r3, [sp, #0]
 8001bdc:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8001be0:	2178      	movs	r1, #120	; 0x78
 8001be2:	4830      	ldr	r0, [pc, #192]	; (8001ca4 <FreqMenu_DrawPresetMenu+0x25c>)
 8001be4:	f00e fece 	bl	8010984 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 5KHz", 	120, menu_pos_y2, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8001be8:	7bbb      	ldrb	r3, [r7, #14]
 8001bea:	b29a      	uxth	r2, r3
 8001bec:	2300      	movs	r3, #0
 8001bee:	9301      	str	r3, [sp, #4]
 8001bf0:	2302      	movs	r3, #2
 8001bf2:	9300      	str	r3, [sp, #0]
 8001bf4:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8001bf8:	2178      	movs	r1, #120	; 0x78
 8001bfa:	482b      	ldr	r0, [pc, #172]	; (8001ca8 <FreqMenu_DrawPresetMenu+0x260>)
 8001bfc:	f00e fec2 	bl	8010984 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 10KHz", 	120, menu_pos_y3, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8001c00:	7b7b      	ldrb	r3, [r7, #13]
 8001c02:	b29a      	uxth	r2, r3
 8001c04:	2300      	movs	r3, #0
 8001c06:	9301      	str	r3, [sp, #4]
 8001c08:	2302      	movs	r3, #2
 8001c0a:	9300      	str	r3, [sp, #0]
 8001c0c:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8001c10:	2178      	movs	r1, #120	; 0x78
 8001c12:	4826      	ldr	r0, [pc, #152]	; (8001cac <FreqMenu_DrawPresetMenu+0x264>)
 8001c14:	f00e feb6 	bl	8010984 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 25KHz", 	120, menu_pos_y4, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8001c18:	7b3b      	ldrb	r3, [r7, #12]
 8001c1a:	b29a      	uxth	r2, r3
 8001c1c:	2300      	movs	r3, #0
 8001c1e:	9301      	str	r3, [sp, #4]
 8001c20:	2302      	movs	r3, #2
 8001c22:	9300      	str	r3, [sp, #0]
 8001c24:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8001c28:	2178      	movs	r1, #120	; 0x78
 8001c2a:	4821      	ldr	r0, [pc, #132]	; (8001cb0 <FreqMenu_DrawPresetMenu+0x268>)
 8001c2c:	f00e feaa 	bl	8010984 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 50KHz", 	120, menu_pos_y5, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8001c30:	7afb      	ldrb	r3, [r7, #11]
 8001c32:	b29a      	uxth	r2, r3
 8001c34:	2300      	movs	r3, #0
 8001c36:	9301      	str	r3, [sp, #4]
 8001c38:	2302      	movs	r3, #2
 8001c3a:	9300      	str	r3, [sp, #0]
 8001c3c:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8001c40:	2178      	movs	r1, #120	; 0x78
 8001c42:	481c      	ldr	r0, [pc, #112]	; (8001cb4 <FreqMenu_DrawPresetMenu+0x26c>)
 8001c44:	f00e fe9e 	bl	8010984 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 75KHz",	120, menu_pos_y6, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8001c48:	7abb      	ldrb	r3, [r7, #10]
 8001c4a:	b29a      	uxth	r2, r3
 8001c4c:	2300      	movs	r3, #0
 8001c4e:	9301      	str	r3, [sp, #4]
 8001c50:	2302      	movs	r3, #2
 8001c52:	9300      	str	r3, [sp, #0]
 8001c54:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8001c58:	2178      	movs	r1, #120	; 0x78
 8001c5a:	4817      	ldr	r0, [pc, #92]	; (8001cb8 <FreqMenu_DrawPresetMenu+0x270>)
 8001c5c:	f00e fe92 	bl	8010984 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 100KHz", 	120, menu_pos_y7, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8001c60:	7a7b      	ldrb	r3, [r7, #9]
 8001c62:	b29a      	uxth	r2, r3
 8001c64:	2300      	movs	r3, #0
 8001c66:	9301      	str	r3, [sp, #4]
 8001c68:	2302      	movs	r3, #2
 8001c6a:	9300      	str	r3, [sp, #0]
 8001c6c:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8001c70:	2178      	movs	r1, #120	; 0x78
 8001c72:	4812      	ldr	r0, [pc, #72]	; (8001cbc <FreqMenu_DrawPresetMenu+0x274>)
 8001c74:	f00e fe86 	bl	8010984 <ILI9341_Draw_Text>
				break;
 8001c78:	f001 b974 	b.w	8002f64 <FreqMenu_DrawPresetMenu+0x151c>
 8001c7c:	08015a18 	.word	0x08015a18
 8001c80:	000124f8 	.word	0x000124f8
 8001c84:	000186a0 	.word	0x000186a0
 8001c88:	08015a2c 	.word	0x08015a2c
 8001c8c:	08015a34 	.word	0x08015a34
 8001c90:	08015a3c 	.word	0x08015a3c
 8001c94:	08015a44 	.word	0x08015a44
 8001c98:	08015a4c 	.word	0x08015a4c
 8001c9c:	08015a54 	.word	0x08015a54
 8001ca0:	08015a5c 	.word	0x08015a5c
 8001ca4:	08015a64 	.word	0x08015a64
 8001ca8:	08015a6c 	.word	0x08015a6c
 8001cac:	08015a74 	.word	0x08015a74
 8001cb0:	08015a7c 	.word	0x08015a7c
 8001cb4:	08015a84 	.word	0x08015a84
 8001cb8:	08015a8c 	.word	0x08015a8c
 8001cbc:	08015a94 	.word	0x08015a94
				ILI9341_Draw_Text("- 1Hz", 		5, menu_pos_y1, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8001cc0:	7bfb      	ldrb	r3, [r7, #15]
 8001cc2:	b29a      	uxth	r2, r3
 8001cc4:	2300      	movs	r3, #0
 8001cc6:	9301      	str	r3, [sp, #4]
 8001cc8:	2302      	movs	r3, #2
 8001cca:	9300      	str	r3, [sp, #0]
 8001ccc:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8001cd0:	2105      	movs	r1, #5
 8001cd2:	48a5      	ldr	r0, [pc, #660]	; (8001f68 <FreqMenu_DrawPresetMenu+0x520>)
 8001cd4:	f00e fe56 	bl	8010984 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 10Hz", 	5, menu_pos_y2, HIGHLIGHT_TEXT_FGCOLOUR, 2, HIGHLIGHT_TEXT_BGCOLOUR);
 8001cd8:	7bbb      	ldrb	r3, [r7, #14]
 8001cda:	b29a      	uxth	r2, r3
 8001cdc:	f644 43f6 	movw	r3, #19702	; 0x4cf6
 8001ce0:	9301      	str	r3, [sp, #4]
 8001ce2:	2302      	movs	r3, #2
 8001ce4:	9300      	str	r3, [sp, #0]
 8001ce6:	2300      	movs	r3, #0
 8001ce8:	2105      	movs	r1, #5
 8001cea:	48a0      	ldr	r0, [pc, #640]	; (8001f6c <FreqMenu_DrawPresetMenu+0x524>)
 8001cec:	f00e fe4a 	bl	8010984 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 50Hz", 	5, menu_pos_y3, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8001cf0:	7b7b      	ldrb	r3, [r7, #13]
 8001cf2:	b29a      	uxth	r2, r3
 8001cf4:	2300      	movs	r3, #0
 8001cf6:	9301      	str	r3, [sp, #4]
 8001cf8:	2302      	movs	r3, #2
 8001cfa:	9300      	str	r3, [sp, #0]
 8001cfc:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8001d00:	2105      	movs	r1, #5
 8001d02:	489b      	ldr	r0, [pc, #620]	; (8001f70 <FreqMenu_DrawPresetMenu+0x528>)
 8001d04:	f00e fe3e 	bl	8010984 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 100Hz", 	5, menu_pos_y4, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8001d08:	7b3b      	ldrb	r3, [r7, #12]
 8001d0a:	b29a      	uxth	r2, r3
 8001d0c:	2300      	movs	r3, #0
 8001d0e:	9301      	str	r3, [sp, #4]
 8001d10:	2302      	movs	r3, #2
 8001d12:	9300      	str	r3, [sp, #0]
 8001d14:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8001d18:	2105      	movs	r1, #5
 8001d1a:	4896      	ldr	r0, [pc, #600]	; (8001f74 <FreqMenu_DrawPresetMenu+0x52c>)
 8001d1c:	f00e fe32 	bl	8010984 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 250Hz", 	5, menu_pos_y5, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8001d20:	7afb      	ldrb	r3, [r7, #11]
 8001d22:	b29a      	uxth	r2, r3
 8001d24:	2300      	movs	r3, #0
 8001d26:	9301      	str	r3, [sp, #4]
 8001d28:	2302      	movs	r3, #2
 8001d2a:	9300      	str	r3, [sp, #0]
 8001d2c:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8001d30:	2105      	movs	r1, #5
 8001d32:	4891      	ldr	r0, [pc, #580]	; (8001f78 <FreqMenu_DrawPresetMenu+0x530>)
 8001d34:	f00e fe26 	bl	8010984 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 500Hz",	5, menu_pos_y6, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8001d38:	7abb      	ldrb	r3, [r7, #10]
 8001d3a:	b29a      	uxth	r2, r3
 8001d3c:	2300      	movs	r3, #0
 8001d3e:	9301      	str	r3, [sp, #4]
 8001d40:	2302      	movs	r3, #2
 8001d42:	9300      	str	r3, [sp, #0]
 8001d44:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8001d48:	2105      	movs	r1, #5
 8001d4a:	488c      	ldr	r0, [pc, #560]	; (8001f7c <FreqMenu_DrawPresetMenu+0x534>)
 8001d4c:	f00e fe1a 	bl	8010984 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 750Hz", 	5, menu_pos_y7, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8001d50:	7a7b      	ldrb	r3, [r7, #9]
 8001d52:	b29a      	uxth	r2, r3
 8001d54:	2300      	movs	r3, #0
 8001d56:	9301      	str	r3, [sp, #4]
 8001d58:	2302      	movs	r3, #2
 8001d5a:	9300      	str	r3, [sp, #0]
 8001d5c:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8001d60:	2105      	movs	r1, #5
 8001d62:	4887      	ldr	r0, [pc, #540]	; (8001f80 <FreqMenu_DrawPresetMenu+0x538>)
 8001d64:	f00e fe0e 	bl	8010984 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 1KHz", 	120, menu_pos_y1, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8001d68:	7bfb      	ldrb	r3, [r7, #15]
 8001d6a:	b29a      	uxth	r2, r3
 8001d6c:	2300      	movs	r3, #0
 8001d6e:	9301      	str	r3, [sp, #4]
 8001d70:	2302      	movs	r3, #2
 8001d72:	9300      	str	r3, [sp, #0]
 8001d74:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8001d78:	2178      	movs	r1, #120	; 0x78
 8001d7a:	4882      	ldr	r0, [pc, #520]	; (8001f84 <FreqMenu_DrawPresetMenu+0x53c>)
 8001d7c:	f00e fe02 	bl	8010984 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 5KHz", 	120, menu_pos_y2, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8001d80:	7bbb      	ldrb	r3, [r7, #14]
 8001d82:	b29a      	uxth	r2, r3
 8001d84:	2300      	movs	r3, #0
 8001d86:	9301      	str	r3, [sp, #4]
 8001d88:	2302      	movs	r3, #2
 8001d8a:	9300      	str	r3, [sp, #0]
 8001d8c:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8001d90:	2178      	movs	r1, #120	; 0x78
 8001d92:	487d      	ldr	r0, [pc, #500]	; (8001f88 <FreqMenu_DrawPresetMenu+0x540>)
 8001d94:	f00e fdf6 	bl	8010984 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 10KHz", 	120, menu_pos_y3, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8001d98:	7b7b      	ldrb	r3, [r7, #13]
 8001d9a:	b29a      	uxth	r2, r3
 8001d9c:	2300      	movs	r3, #0
 8001d9e:	9301      	str	r3, [sp, #4]
 8001da0:	2302      	movs	r3, #2
 8001da2:	9300      	str	r3, [sp, #0]
 8001da4:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8001da8:	2178      	movs	r1, #120	; 0x78
 8001daa:	4878      	ldr	r0, [pc, #480]	; (8001f8c <FreqMenu_DrawPresetMenu+0x544>)
 8001dac:	f00e fdea 	bl	8010984 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 25KHz", 	120, menu_pos_y4, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8001db0:	7b3b      	ldrb	r3, [r7, #12]
 8001db2:	b29a      	uxth	r2, r3
 8001db4:	2300      	movs	r3, #0
 8001db6:	9301      	str	r3, [sp, #4]
 8001db8:	2302      	movs	r3, #2
 8001dba:	9300      	str	r3, [sp, #0]
 8001dbc:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8001dc0:	2178      	movs	r1, #120	; 0x78
 8001dc2:	4873      	ldr	r0, [pc, #460]	; (8001f90 <FreqMenu_DrawPresetMenu+0x548>)
 8001dc4:	f00e fdde 	bl	8010984 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 50KHz", 	120, menu_pos_y5, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8001dc8:	7afb      	ldrb	r3, [r7, #11]
 8001dca:	b29a      	uxth	r2, r3
 8001dcc:	2300      	movs	r3, #0
 8001dce:	9301      	str	r3, [sp, #4]
 8001dd0:	2302      	movs	r3, #2
 8001dd2:	9300      	str	r3, [sp, #0]
 8001dd4:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8001dd8:	2178      	movs	r1, #120	; 0x78
 8001dda:	486e      	ldr	r0, [pc, #440]	; (8001f94 <FreqMenu_DrawPresetMenu+0x54c>)
 8001ddc:	f00e fdd2 	bl	8010984 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 75KHz",	120, menu_pos_y6, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8001de0:	7abb      	ldrb	r3, [r7, #10]
 8001de2:	b29a      	uxth	r2, r3
 8001de4:	2300      	movs	r3, #0
 8001de6:	9301      	str	r3, [sp, #4]
 8001de8:	2302      	movs	r3, #2
 8001dea:	9300      	str	r3, [sp, #0]
 8001dec:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8001df0:	2178      	movs	r1, #120	; 0x78
 8001df2:	4869      	ldr	r0, [pc, #420]	; (8001f98 <FreqMenu_DrawPresetMenu+0x550>)
 8001df4:	f00e fdc6 	bl	8010984 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 100KHz", 	120, menu_pos_y7, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8001df8:	7a7b      	ldrb	r3, [r7, #9]
 8001dfa:	b29a      	uxth	r2, r3
 8001dfc:	2300      	movs	r3, #0
 8001dfe:	9301      	str	r3, [sp, #4]
 8001e00:	2302      	movs	r3, #2
 8001e02:	9300      	str	r3, [sp, #0]
 8001e04:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8001e08:	2178      	movs	r1, #120	; 0x78
 8001e0a:	4864      	ldr	r0, [pc, #400]	; (8001f9c <FreqMenu_DrawPresetMenu+0x554>)
 8001e0c:	f00e fdba 	bl	8010984 <ILI9341_Draw_Text>
				break;
 8001e10:	f001 b8a8 	b.w	8002f64 <FreqMenu_DrawPresetMenu+0x151c>
				ILI9341_Draw_Text("- 1Hz", 		5, menu_pos_y1, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8001e14:	7bfb      	ldrb	r3, [r7, #15]
 8001e16:	b29a      	uxth	r2, r3
 8001e18:	2300      	movs	r3, #0
 8001e1a:	9301      	str	r3, [sp, #4]
 8001e1c:	2302      	movs	r3, #2
 8001e1e:	9300      	str	r3, [sp, #0]
 8001e20:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8001e24:	2105      	movs	r1, #5
 8001e26:	4850      	ldr	r0, [pc, #320]	; (8001f68 <FreqMenu_DrawPresetMenu+0x520>)
 8001e28:	f00e fdac 	bl	8010984 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 10Hz", 	5, menu_pos_y2, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8001e2c:	7bbb      	ldrb	r3, [r7, #14]
 8001e2e:	b29a      	uxth	r2, r3
 8001e30:	2300      	movs	r3, #0
 8001e32:	9301      	str	r3, [sp, #4]
 8001e34:	2302      	movs	r3, #2
 8001e36:	9300      	str	r3, [sp, #0]
 8001e38:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8001e3c:	2105      	movs	r1, #5
 8001e3e:	484b      	ldr	r0, [pc, #300]	; (8001f6c <FreqMenu_DrawPresetMenu+0x524>)
 8001e40:	f00e fda0 	bl	8010984 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 50Hz", 	5, menu_pos_y3, HIGHLIGHT_TEXT_FGCOLOUR, 2, HIGHLIGHT_TEXT_BGCOLOUR);
 8001e44:	7b7b      	ldrb	r3, [r7, #13]
 8001e46:	b29a      	uxth	r2, r3
 8001e48:	f644 43f6 	movw	r3, #19702	; 0x4cf6
 8001e4c:	9301      	str	r3, [sp, #4]
 8001e4e:	2302      	movs	r3, #2
 8001e50:	9300      	str	r3, [sp, #0]
 8001e52:	2300      	movs	r3, #0
 8001e54:	2105      	movs	r1, #5
 8001e56:	4846      	ldr	r0, [pc, #280]	; (8001f70 <FreqMenu_DrawPresetMenu+0x528>)
 8001e58:	f00e fd94 	bl	8010984 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 100Hz", 	5, menu_pos_y4, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8001e5c:	7b3b      	ldrb	r3, [r7, #12]
 8001e5e:	b29a      	uxth	r2, r3
 8001e60:	2300      	movs	r3, #0
 8001e62:	9301      	str	r3, [sp, #4]
 8001e64:	2302      	movs	r3, #2
 8001e66:	9300      	str	r3, [sp, #0]
 8001e68:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8001e6c:	2105      	movs	r1, #5
 8001e6e:	4841      	ldr	r0, [pc, #260]	; (8001f74 <FreqMenu_DrawPresetMenu+0x52c>)
 8001e70:	f00e fd88 	bl	8010984 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 250Hz", 	5, menu_pos_y5, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8001e74:	7afb      	ldrb	r3, [r7, #11]
 8001e76:	b29a      	uxth	r2, r3
 8001e78:	2300      	movs	r3, #0
 8001e7a:	9301      	str	r3, [sp, #4]
 8001e7c:	2302      	movs	r3, #2
 8001e7e:	9300      	str	r3, [sp, #0]
 8001e80:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8001e84:	2105      	movs	r1, #5
 8001e86:	483c      	ldr	r0, [pc, #240]	; (8001f78 <FreqMenu_DrawPresetMenu+0x530>)
 8001e88:	f00e fd7c 	bl	8010984 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 500Hz",	5, menu_pos_y6, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8001e8c:	7abb      	ldrb	r3, [r7, #10]
 8001e8e:	b29a      	uxth	r2, r3
 8001e90:	2300      	movs	r3, #0
 8001e92:	9301      	str	r3, [sp, #4]
 8001e94:	2302      	movs	r3, #2
 8001e96:	9300      	str	r3, [sp, #0]
 8001e98:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8001e9c:	2105      	movs	r1, #5
 8001e9e:	4837      	ldr	r0, [pc, #220]	; (8001f7c <FreqMenu_DrawPresetMenu+0x534>)
 8001ea0:	f00e fd70 	bl	8010984 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 750Hz", 	5, menu_pos_y7, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8001ea4:	7a7b      	ldrb	r3, [r7, #9]
 8001ea6:	b29a      	uxth	r2, r3
 8001ea8:	2300      	movs	r3, #0
 8001eaa:	9301      	str	r3, [sp, #4]
 8001eac:	2302      	movs	r3, #2
 8001eae:	9300      	str	r3, [sp, #0]
 8001eb0:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8001eb4:	2105      	movs	r1, #5
 8001eb6:	4832      	ldr	r0, [pc, #200]	; (8001f80 <FreqMenu_DrawPresetMenu+0x538>)
 8001eb8:	f00e fd64 	bl	8010984 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 1KHz", 	120, menu_pos_y1, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8001ebc:	7bfb      	ldrb	r3, [r7, #15]
 8001ebe:	b29a      	uxth	r2, r3
 8001ec0:	2300      	movs	r3, #0
 8001ec2:	9301      	str	r3, [sp, #4]
 8001ec4:	2302      	movs	r3, #2
 8001ec6:	9300      	str	r3, [sp, #0]
 8001ec8:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8001ecc:	2178      	movs	r1, #120	; 0x78
 8001ece:	482d      	ldr	r0, [pc, #180]	; (8001f84 <FreqMenu_DrawPresetMenu+0x53c>)
 8001ed0:	f00e fd58 	bl	8010984 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 5KHz", 	120, menu_pos_y2, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8001ed4:	7bbb      	ldrb	r3, [r7, #14]
 8001ed6:	b29a      	uxth	r2, r3
 8001ed8:	2300      	movs	r3, #0
 8001eda:	9301      	str	r3, [sp, #4]
 8001edc:	2302      	movs	r3, #2
 8001ede:	9300      	str	r3, [sp, #0]
 8001ee0:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8001ee4:	2178      	movs	r1, #120	; 0x78
 8001ee6:	4828      	ldr	r0, [pc, #160]	; (8001f88 <FreqMenu_DrawPresetMenu+0x540>)
 8001ee8:	f00e fd4c 	bl	8010984 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 10KHz", 	120, menu_pos_y3, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8001eec:	7b7b      	ldrb	r3, [r7, #13]
 8001eee:	b29a      	uxth	r2, r3
 8001ef0:	2300      	movs	r3, #0
 8001ef2:	9301      	str	r3, [sp, #4]
 8001ef4:	2302      	movs	r3, #2
 8001ef6:	9300      	str	r3, [sp, #0]
 8001ef8:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8001efc:	2178      	movs	r1, #120	; 0x78
 8001efe:	4823      	ldr	r0, [pc, #140]	; (8001f8c <FreqMenu_DrawPresetMenu+0x544>)
 8001f00:	f00e fd40 	bl	8010984 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 25KHz", 	120, menu_pos_y4, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8001f04:	7b3b      	ldrb	r3, [r7, #12]
 8001f06:	b29a      	uxth	r2, r3
 8001f08:	2300      	movs	r3, #0
 8001f0a:	9301      	str	r3, [sp, #4]
 8001f0c:	2302      	movs	r3, #2
 8001f0e:	9300      	str	r3, [sp, #0]
 8001f10:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8001f14:	2178      	movs	r1, #120	; 0x78
 8001f16:	481e      	ldr	r0, [pc, #120]	; (8001f90 <FreqMenu_DrawPresetMenu+0x548>)
 8001f18:	f00e fd34 	bl	8010984 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 50KHz", 	120, menu_pos_y5, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8001f1c:	7afb      	ldrb	r3, [r7, #11]
 8001f1e:	b29a      	uxth	r2, r3
 8001f20:	2300      	movs	r3, #0
 8001f22:	9301      	str	r3, [sp, #4]
 8001f24:	2302      	movs	r3, #2
 8001f26:	9300      	str	r3, [sp, #0]
 8001f28:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8001f2c:	2178      	movs	r1, #120	; 0x78
 8001f2e:	4819      	ldr	r0, [pc, #100]	; (8001f94 <FreqMenu_DrawPresetMenu+0x54c>)
 8001f30:	f00e fd28 	bl	8010984 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 75KHz",	120, menu_pos_y6, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8001f34:	7abb      	ldrb	r3, [r7, #10]
 8001f36:	b29a      	uxth	r2, r3
 8001f38:	2300      	movs	r3, #0
 8001f3a:	9301      	str	r3, [sp, #4]
 8001f3c:	2302      	movs	r3, #2
 8001f3e:	9300      	str	r3, [sp, #0]
 8001f40:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8001f44:	2178      	movs	r1, #120	; 0x78
 8001f46:	4814      	ldr	r0, [pc, #80]	; (8001f98 <FreqMenu_DrawPresetMenu+0x550>)
 8001f48:	f00e fd1c 	bl	8010984 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 100KHz", 	120, menu_pos_y7, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8001f4c:	7a7b      	ldrb	r3, [r7, #9]
 8001f4e:	b29a      	uxth	r2, r3
 8001f50:	2300      	movs	r3, #0
 8001f52:	9301      	str	r3, [sp, #4]
 8001f54:	2302      	movs	r3, #2
 8001f56:	9300      	str	r3, [sp, #0]
 8001f58:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8001f5c:	2178      	movs	r1, #120	; 0x78
 8001f5e:	480f      	ldr	r0, [pc, #60]	; (8001f9c <FreqMenu_DrawPresetMenu+0x554>)
 8001f60:	f00e fd10 	bl	8010984 <ILI9341_Draw_Text>
				break;
 8001f64:	f000 bffe 	b.w	8002f64 <FreqMenu_DrawPresetMenu+0x151c>
 8001f68:	08015a2c 	.word	0x08015a2c
 8001f6c:	08015a34 	.word	0x08015a34
 8001f70:	08015a3c 	.word	0x08015a3c
 8001f74:	08015a44 	.word	0x08015a44
 8001f78:	08015a4c 	.word	0x08015a4c
 8001f7c:	08015a54 	.word	0x08015a54
 8001f80:	08015a5c 	.word	0x08015a5c
 8001f84:	08015a64 	.word	0x08015a64
 8001f88:	08015a6c 	.word	0x08015a6c
 8001f8c:	08015a74 	.word	0x08015a74
 8001f90:	08015a7c 	.word	0x08015a7c
 8001f94:	08015a84 	.word	0x08015a84
 8001f98:	08015a8c 	.word	0x08015a8c
 8001f9c:	08015a94 	.word	0x08015a94
				ILI9341_Draw_Text("- 1Hz", 		5, menu_pos_y1, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8001fa0:	7bfb      	ldrb	r3, [r7, #15]
 8001fa2:	b29a      	uxth	r2, r3
 8001fa4:	2300      	movs	r3, #0
 8001fa6:	9301      	str	r3, [sp, #4]
 8001fa8:	2302      	movs	r3, #2
 8001faa:	9300      	str	r3, [sp, #0]
 8001fac:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8001fb0:	2105      	movs	r1, #5
 8001fb2:	48a5      	ldr	r0, [pc, #660]	; (8002248 <FreqMenu_DrawPresetMenu+0x800>)
 8001fb4:	f00e fce6 	bl	8010984 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 10Hz", 	5, menu_pos_y2, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8001fb8:	7bbb      	ldrb	r3, [r7, #14]
 8001fba:	b29a      	uxth	r2, r3
 8001fbc:	2300      	movs	r3, #0
 8001fbe:	9301      	str	r3, [sp, #4]
 8001fc0:	2302      	movs	r3, #2
 8001fc2:	9300      	str	r3, [sp, #0]
 8001fc4:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8001fc8:	2105      	movs	r1, #5
 8001fca:	48a0      	ldr	r0, [pc, #640]	; (800224c <FreqMenu_DrawPresetMenu+0x804>)
 8001fcc:	f00e fcda 	bl	8010984 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 50Hz", 	5, menu_pos_y3, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8001fd0:	7b7b      	ldrb	r3, [r7, #13]
 8001fd2:	b29a      	uxth	r2, r3
 8001fd4:	2300      	movs	r3, #0
 8001fd6:	9301      	str	r3, [sp, #4]
 8001fd8:	2302      	movs	r3, #2
 8001fda:	9300      	str	r3, [sp, #0]
 8001fdc:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8001fe0:	2105      	movs	r1, #5
 8001fe2:	489b      	ldr	r0, [pc, #620]	; (8002250 <FreqMenu_DrawPresetMenu+0x808>)
 8001fe4:	f00e fcce 	bl	8010984 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 100Hz", 	5, menu_pos_y4, HIGHLIGHT_TEXT_FGCOLOUR, 2, HIGHLIGHT_TEXT_BGCOLOUR);
 8001fe8:	7b3b      	ldrb	r3, [r7, #12]
 8001fea:	b29a      	uxth	r2, r3
 8001fec:	f644 43f6 	movw	r3, #19702	; 0x4cf6
 8001ff0:	9301      	str	r3, [sp, #4]
 8001ff2:	2302      	movs	r3, #2
 8001ff4:	9300      	str	r3, [sp, #0]
 8001ff6:	2300      	movs	r3, #0
 8001ff8:	2105      	movs	r1, #5
 8001ffa:	4896      	ldr	r0, [pc, #600]	; (8002254 <FreqMenu_DrawPresetMenu+0x80c>)
 8001ffc:	f00e fcc2 	bl	8010984 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 250Hz", 	5, menu_pos_y5, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8002000:	7afb      	ldrb	r3, [r7, #11]
 8002002:	b29a      	uxth	r2, r3
 8002004:	2300      	movs	r3, #0
 8002006:	9301      	str	r3, [sp, #4]
 8002008:	2302      	movs	r3, #2
 800200a:	9300      	str	r3, [sp, #0]
 800200c:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8002010:	2105      	movs	r1, #5
 8002012:	4891      	ldr	r0, [pc, #580]	; (8002258 <FreqMenu_DrawPresetMenu+0x810>)
 8002014:	f00e fcb6 	bl	8010984 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 500Hz",	5, menu_pos_y6, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8002018:	7abb      	ldrb	r3, [r7, #10]
 800201a:	b29a      	uxth	r2, r3
 800201c:	2300      	movs	r3, #0
 800201e:	9301      	str	r3, [sp, #4]
 8002020:	2302      	movs	r3, #2
 8002022:	9300      	str	r3, [sp, #0]
 8002024:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8002028:	2105      	movs	r1, #5
 800202a:	488c      	ldr	r0, [pc, #560]	; (800225c <FreqMenu_DrawPresetMenu+0x814>)
 800202c:	f00e fcaa 	bl	8010984 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 750Hz", 	5, menu_pos_y7, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8002030:	7a7b      	ldrb	r3, [r7, #9]
 8002032:	b29a      	uxth	r2, r3
 8002034:	2300      	movs	r3, #0
 8002036:	9301      	str	r3, [sp, #4]
 8002038:	2302      	movs	r3, #2
 800203a:	9300      	str	r3, [sp, #0]
 800203c:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8002040:	2105      	movs	r1, #5
 8002042:	4887      	ldr	r0, [pc, #540]	; (8002260 <FreqMenu_DrawPresetMenu+0x818>)
 8002044:	f00e fc9e 	bl	8010984 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 1KHz", 	120, menu_pos_y1, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8002048:	7bfb      	ldrb	r3, [r7, #15]
 800204a:	b29a      	uxth	r2, r3
 800204c:	2300      	movs	r3, #0
 800204e:	9301      	str	r3, [sp, #4]
 8002050:	2302      	movs	r3, #2
 8002052:	9300      	str	r3, [sp, #0]
 8002054:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8002058:	2178      	movs	r1, #120	; 0x78
 800205a:	4882      	ldr	r0, [pc, #520]	; (8002264 <FreqMenu_DrawPresetMenu+0x81c>)
 800205c:	f00e fc92 	bl	8010984 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 5KHz", 	120, menu_pos_y2, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8002060:	7bbb      	ldrb	r3, [r7, #14]
 8002062:	b29a      	uxth	r2, r3
 8002064:	2300      	movs	r3, #0
 8002066:	9301      	str	r3, [sp, #4]
 8002068:	2302      	movs	r3, #2
 800206a:	9300      	str	r3, [sp, #0]
 800206c:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8002070:	2178      	movs	r1, #120	; 0x78
 8002072:	487d      	ldr	r0, [pc, #500]	; (8002268 <FreqMenu_DrawPresetMenu+0x820>)
 8002074:	f00e fc86 	bl	8010984 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 10KHz", 	120, menu_pos_y3, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8002078:	7b7b      	ldrb	r3, [r7, #13]
 800207a:	b29a      	uxth	r2, r3
 800207c:	2300      	movs	r3, #0
 800207e:	9301      	str	r3, [sp, #4]
 8002080:	2302      	movs	r3, #2
 8002082:	9300      	str	r3, [sp, #0]
 8002084:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8002088:	2178      	movs	r1, #120	; 0x78
 800208a:	4878      	ldr	r0, [pc, #480]	; (800226c <FreqMenu_DrawPresetMenu+0x824>)
 800208c:	f00e fc7a 	bl	8010984 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 25KHz", 	120, menu_pos_y4, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8002090:	7b3b      	ldrb	r3, [r7, #12]
 8002092:	b29a      	uxth	r2, r3
 8002094:	2300      	movs	r3, #0
 8002096:	9301      	str	r3, [sp, #4]
 8002098:	2302      	movs	r3, #2
 800209a:	9300      	str	r3, [sp, #0]
 800209c:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 80020a0:	2178      	movs	r1, #120	; 0x78
 80020a2:	4873      	ldr	r0, [pc, #460]	; (8002270 <FreqMenu_DrawPresetMenu+0x828>)
 80020a4:	f00e fc6e 	bl	8010984 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 50KHz", 	120, menu_pos_y5, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 80020a8:	7afb      	ldrb	r3, [r7, #11]
 80020aa:	b29a      	uxth	r2, r3
 80020ac:	2300      	movs	r3, #0
 80020ae:	9301      	str	r3, [sp, #4]
 80020b0:	2302      	movs	r3, #2
 80020b2:	9300      	str	r3, [sp, #0]
 80020b4:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 80020b8:	2178      	movs	r1, #120	; 0x78
 80020ba:	486e      	ldr	r0, [pc, #440]	; (8002274 <FreqMenu_DrawPresetMenu+0x82c>)
 80020bc:	f00e fc62 	bl	8010984 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 75KHz",	120, menu_pos_y6, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 80020c0:	7abb      	ldrb	r3, [r7, #10]
 80020c2:	b29a      	uxth	r2, r3
 80020c4:	2300      	movs	r3, #0
 80020c6:	9301      	str	r3, [sp, #4]
 80020c8:	2302      	movs	r3, #2
 80020ca:	9300      	str	r3, [sp, #0]
 80020cc:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 80020d0:	2178      	movs	r1, #120	; 0x78
 80020d2:	4869      	ldr	r0, [pc, #420]	; (8002278 <FreqMenu_DrawPresetMenu+0x830>)
 80020d4:	f00e fc56 	bl	8010984 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 100KHz", 	120, menu_pos_y7, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 80020d8:	7a7b      	ldrb	r3, [r7, #9]
 80020da:	b29a      	uxth	r2, r3
 80020dc:	2300      	movs	r3, #0
 80020de:	9301      	str	r3, [sp, #4]
 80020e0:	2302      	movs	r3, #2
 80020e2:	9300      	str	r3, [sp, #0]
 80020e4:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 80020e8:	2178      	movs	r1, #120	; 0x78
 80020ea:	4864      	ldr	r0, [pc, #400]	; (800227c <FreqMenu_DrawPresetMenu+0x834>)
 80020ec:	f00e fc4a 	bl	8010984 <ILI9341_Draw_Text>
				break;
 80020f0:	f000 bf38 	b.w	8002f64 <FreqMenu_DrawPresetMenu+0x151c>
				ILI9341_Draw_Text("- 1Hz", 		5, menu_pos_y1, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 80020f4:	7bfb      	ldrb	r3, [r7, #15]
 80020f6:	b29a      	uxth	r2, r3
 80020f8:	2300      	movs	r3, #0
 80020fa:	9301      	str	r3, [sp, #4]
 80020fc:	2302      	movs	r3, #2
 80020fe:	9300      	str	r3, [sp, #0]
 8002100:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8002104:	2105      	movs	r1, #5
 8002106:	4850      	ldr	r0, [pc, #320]	; (8002248 <FreqMenu_DrawPresetMenu+0x800>)
 8002108:	f00e fc3c 	bl	8010984 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 10Hz", 	5, menu_pos_y2, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 800210c:	7bbb      	ldrb	r3, [r7, #14]
 800210e:	b29a      	uxth	r2, r3
 8002110:	2300      	movs	r3, #0
 8002112:	9301      	str	r3, [sp, #4]
 8002114:	2302      	movs	r3, #2
 8002116:	9300      	str	r3, [sp, #0]
 8002118:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 800211c:	2105      	movs	r1, #5
 800211e:	484b      	ldr	r0, [pc, #300]	; (800224c <FreqMenu_DrawPresetMenu+0x804>)
 8002120:	f00e fc30 	bl	8010984 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 50Hz", 	5, menu_pos_y3, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8002124:	7b7b      	ldrb	r3, [r7, #13]
 8002126:	b29a      	uxth	r2, r3
 8002128:	2300      	movs	r3, #0
 800212a:	9301      	str	r3, [sp, #4]
 800212c:	2302      	movs	r3, #2
 800212e:	9300      	str	r3, [sp, #0]
 8002130:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8002134:	2105      	movs	r1, #5
 8002136:	4846      	ldr	r0, [pc, #280]	; (8002250 <FreqMenu_DrawPresetMenu+0x808>)
 8002138:	f00e fc24 	bl	8010984 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 100Hz", 	5, menu_pos_y4, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 800213c:	7b3b      	ldrb	r3, [r7, #12]
 800213e:	b29a      	uxth	r2, r3
 8002140:	2300      	movs	r3, #0
 8002142:	9301      	str	r3, [sp, #4]
 8002144:	2302      	movs	r3, #2
 8002146:	9300      	str	r3, [sp, #0]
 8002148:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 800214c:	2105      	movs	r1, #5
 800214e:	4841      	ldr	r0, [pc, #260]	; (8002254 <FreqMenu_DrawPresetMenu+0x80c>)
 8002150:	f00e fc18 	bl	8010984 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 250Hz", 	5, menu_pos_y5, HIGHLIGHT_TEXT_FGCOLOUR, 2, HIGHLIGHT_TEXT_BGCOLOUR);
 8002154:	7afb      	ldrb	r3, [r7, #11]
 8002156:	b29a      	uxth	r2, r3
 8002158:	f644 43f6 	movw	r3, #19702	; 0x4cf6
 800215c:	9301      	str	r3, [sp, #4]
 800215e:	2302      	movs	r3, #2
 8002160:	9300      	str	r3, [sp, #0]
 8002162:	2300      	movs	r3, #0
 8002164:	2105      	movs	r1, #5
 8002166:	483c      	ldr	r0, [pc, #240]	; (8002258 <FreqMenu_DrawPresetMenu+0x810>)
 8002168:	f00e fc0c 	bl	8010984 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 500Hz",	5, menu_pos_y6, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 800216c:	7abb      	ldrb	r3, [r7, #10]
 800216e:	b29a      	uxth	r2, r3
 8002170:	2300      	movs	r3, #0
 8002172:	9301      	str	r3, [sp, #4]
 8002174:	2302      	movs	r3, #2
 8002176:	9300      	str	r3, [sp, #0]
 8002178:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 800217c:	2105      	movs	r1, #5
 800217e:	4837      	ldr	r0, [pc, #220]	; (800225c <FreqMenu_DrawPresetMenu+0x814>)
 8002180:	f00e fc00 	bl	8010984 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 750Hz", 	5, menu_pos_y7, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8002184:	7a7b      	ldrb	r3, [r7, #9]
 8002186:	b29a      	uxth	r2, r3
 8002188:	2300      	movs	r3, #0
 800218a:	9301      	str	r3, [sp, #4]
 800218c:	2302      	movs	r3, #2
 800218e:	9300      	str	r3, [sp, #0]
 8002190:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8002194:	2105      	movs	r1, #5
 8002196:	4832      	ldr	r0, [pc, #200]	; (8002260 <FreqMenu_DrawPresetMenu+0x818>)
 8002198:	f00e fbf4 	bl	8010984 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 1KHz", 	120, menu_pos_y1, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 800219c:	7bfb      	ldrb	r3, [r7, #15]
 800219e:	b29a      	uxth	r2, r3
 80021a0:	2300      	movs	r3, #0
 80021a2:	9301      	str	r3, [sp, #4]
 80021a4:	2302      	movs	r3, #2
 80021a6:	9300      	str	r3, [sp, #0]
 80021a8:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 80021ac:	2178      	movs	r1, #120	; 0x78
 80021ae:	482d      	ldr	r0, [pc, #180]	; (8002264 <FreqMenu_DrawPresetMenu+0x81c>)
 80021b0:	f00e fbe8 	bl	8010984 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 5KHz", 	120, menu_pos_y2, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 80021b4:	7bbb      	ldrb	r3, [r7, #14]
 80021b6:	b29a      	uxth	r2, r3
 80021b8:	2300      	movs	r3, #0
 80021ba:	9301      	str	r3, [sp, #4]
 80021bc:	2302      	movs	r3, #2
 80021be:	9300      	str	r3, [sp, #0]
 80021c0:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 80021c4:	2178      	movs	r1, #120	; 0x78
 80021c6:	4828      	ldr	r0, [pc, #160]	; (8002268 <FreqMenu_DrawPresetMenu+0x820>)
 80021c8:	f00e fbdc 	bl	8010984 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 10KHz", 	120, menu_pos_y3, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 80021cc:	7b7b      	ldrb	r3, [r7, #13]
 80021ce:	b29a      	uxth	r2, r3
 80021d0:	2300      	movs	r3, #0
 80021d2:	9301      	str	r3, [sp, #4]
 80021d4:	2302      	movs	r3, #2
 80021d6:	9300      	str	r3, [sp, #0]
 80021d8:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 80021dc:	2178      	movs	r1, #120	; 0x78
 80021de:	4823      	ldr	r0, [pc, #140]	; (800226c <FreqMenu_DrawPresetMenu+0x824>)
 80021e0:	f00e fbd0 	bl	8010984 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 25KHz", 	120, menu_pos_y4, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 80021e4:	7b3b      	ldrb	r3, [r7, #12]
 80021e6:	b29a      	uxth	r2, r3
 80021e8:	2300      	movs	r3, #0
 80021ea:	9301      	str	r3, [sp, #4]
 80021ec:	2302      	movs	r3, #2
 80021ee:	9300      	str	r3, [sp, #0]
 80021f0:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 80021f4:	2178      	movs	r1, #120	; 0x78
 80021f6:	481e      	ldr	r0, [pc, #120]	; (8002270 <FreqMenu_DrawPresetMenu+0x828>)
 80021f8:	f00e fbc4 	bl	8010984 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 50KHz", 	120, menu_pos_y5, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 80021fc:	7afb      	ldrb	r3, [r7, #11]
 80021fe:	b29a      	uxth	r2, r3
 8002200:	2300      	movs	r3, #0
 8002202:	9301      	str	r3, [sp, #4]
 8002204:	2302      	movs	r3, #2
 8002206:	9300      	str	r3, [sp, #0]
 8002208:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 800220c:	2178      	movs	r1, #120	; 0x78
 800220e:	4819      	ldr	r0, [pc, #100]	; (8002274 <FreqMenu_DrawPresetMenu+0x82c>)
 8002210:	f00e fbb8 	bl	8010984 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 75KHz",	120, menu_pos_y6, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8002214:	7abb      	ldrb	r3, [r7, #10]
 8002216:	b29a      	uxth	r2, r3
 8002218:	2300      	movs	r3, #0
 800221a:	9301      	str	r3, [sp, #4]
 800221c:	2302      	movs	r3, #2
 800221e:	9300      	str	r3, [sp, #0]
 8002220:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8002224:	2178      	movs	r1, #120	; 0x78
 8002226:	4814      	ldr	r0, [pc, #80]	; (8002278 <FreqMenu_DrawPresetMenu+0x830>)
 8002228:	f00e fbac 	bl	8010984 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 100KHz", 	120, menu_pos_y7, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 800222c:	7a7b      	ldrb	r3, [r7, #9]
 800222e:	b29a      	uxth	r2, r3
 8002230:	2300      	movs	r3, #0
 8002232:	9301      	str	r3, [sp, #4]
 8002234:	2302      	movs	r3, #2
 8002236:	9300      	str	r3, [sp, #0]
 8002238:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 800223c:	2178      	movs	r1, #120	; 0x78
 800223e:	480f      	ldr	r0, [pc, #60]	; (800227c <FreqMenu_DrawPresetMenu+0x834>)
 8002240:	f00e fba0 	bl	8010984 <ILI9341_Draw_Text>
				break;
 8002244:	f000 be8e 	b.w	8002f64 <FreqMenu_DrawPresetMenu+0x151c>
 8002248:	08015a2c 	.word	0x08015a2c
 800224c:	08015a34 	.word	0x08015a34
 8002250:	08015a3c 	.word	0x08015a3c
 8002254:	08015a44 	.word	0x08015a44
 8002258:	08015a4c 	.word	0x08015a4c
 800225c:	08015a54 	.word	0x08015a54
 8002260:	08015a5c 	.word	0x08015a5c
 8002264:	08015a64 	.word	0x08015a64
 8002268:	08015a6c 	.word	0x08015a6c
 800226c:	08015a74 	.word	0x08015a74
 8002270:	08015a7c 	.word	0x08015a7c
 8002274:	08015a84 	.word	0x08015a84
 8002278:	08015a8c 	.word	0x08015a8c
 800227c:	08015a94 	.word	0x08015a94
				ILI9341_Draw_Text("- 1Hz", 		5, menu_pos_y1, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8002280:	7bfb      	ldrb	r3, [r7, #15]
 8002282:	b29a      	uxth	r2, r3
 8002284:	2300      	movs	r3, #0
 8002286:	9301      	str	r3, [sp, #4]
 8002288:	2302      	movs	r3, #2
 800228a:	9300      	str	r3, [sp, #0]
 800228c:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8002290:	2105      	movs	r1, #5
 8002292:	48a5      	ldr	r0, [pc, #660]	; (8002528 <FreqMenu_DrawPresetMenu+0xae0>)
 8002294:	f00e fb76 	bl	8010984 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 10Hz", 	5, menu_pos_y2, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8002298:	7bbb      	ldrb	r3, [r7, #14]
 800229a:	b29a      	uxth	r2, r3
 800229c:	2300      	movs	r3, #0
 800229e:	9301      	str	r3, [sp, #4]
 80022a0:	2302      	movs	r3, #2
 80022a2:	9300      	str	r3, [sp, #0]
 80022a4:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 80022a8:	2105      	movs	r1, #5
 80022aa:	48a0      	ldr	r0, [pc, #640]	; (800252c <FreqMenu_DrawPresetMenu+0xae4>)
 80022ac:	f00e fb6a 	bl	8010984 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 50Hz", 	5, menu_pos_y3, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 80022b0:	7b7b      	ldrb	r3, [r7, #13]
 80022b2:	b29a      	uxth	r2, r3
 80022b4:	2300      	movs	r3, #0
 80022b6:	9301      	str	r3, [sp, #4]
 80022b8:	2302      	movs	r3, #2
 80022ba:	9300      	str	r3, [sp, #0]
 80022bc:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 80022c0:	2105      	movs	r1, #5
 80022c2:	489b      	ldr	r0, [pc, #620]	; (8002530 <FreqMenu_DrawPresetMenu+0xae8>)
 80022c4:	f00e fb5e 	bl	8010984 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 100Hz", 	5, menu_pos_y4, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 80022c8:	7b3b      	ldrb	r3, [r7, #12]
 80022ca:	b29a      	uxth	r2, r3
 80022cc:	2300      	movs	r3, #0
 80022ce:	9301      	str	r3, [sp, #4]
 80022d0:	2302      	movs	r3, #2
 80022d2:	9300      	str	r3, [sp, #0]
 80022d4:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 80022d8:	2105      	movs	r1, #5
 80022da:	4896      	ldr	r0, [pc, #600]	; (8002534 <FreqMenu_DrawPresetMenu+0xaec>)
 80022dc:	f00e fb52 	bl	8010984 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 250Hz", 	5, menu_pos_y5, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 80022e0:	7afb      	ldrb	r3, [r7, #11]
 80022e2:	b29a      	uxth	r2, r3
 80022e4:	2300      	movs	r3, #0
 80022e6:	9301      	str	r3, [sp, #4]
 80022e8:	2302      	movs	r3, #2
 80022ea:	9300      	str	r3, [sp, #0]
 80022ec:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 80022f0:	2105      	movs	r1, #5
 80022f2:	4891      	ldr	r0, [pc, #580]	; (8002538 <FreqMenu_DrawPresetMenu+0xaf0>)
 80022f4:	f00e fb46 	bl	8010984 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 500Hz",	5, menu_pos_y6, HIGHLIGHT_TEXT_FGCOLOUR, 2, HIGHLIGHT_TEXT_BGCOLOUR);
 80022f8:	7abb      	ldrb	r3, [r7, #10]
 80022fa:	b29a      	uxth	r2, r3
 80022fc:	f644 43f6 	movw	r3, #19702	; 0x4cf6
 8002300:	9301      	str	r3, [sp, #4]
 8002302:	2302      	movs	r3, #2
 8002304:	9300      	str	r3, [sp, #0]
 8002306:	2300      	movs	r3, #0
 8002308:	2105      	movs	r1, #5
 800230a:	488c      	ldr	r0, [pc, #560]	; (800253c <FreqMenu_DrawPresetMenu+0xaf4>)
 800230c:	f00e fb3a 	bl	8010984 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 750Hz", 	5, menu_pos_y7, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8002310:	7a7b      	ldrb	r3, [r7, #9]
 8002312:	b29a      	uxth	r2, r3
 8002314:	2300      	movs	r3, #0
 8002316:	9301      	str	r3, [sp, #4]
 8002318:	2302      	movs	r3, #2
 800231a:	9300      	str	r3, [sp, #0]
 800231c:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8002320:	2105      	movs	r1, #5
 8002322:	4887      	ldr	r0, [pc, #540]	; (8002540 <FreqMenu_DrawPresetMenu+0xaf8>)
 8002324:	f00e fb2e 	bl	8010984 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 1KHz", 	120, menu_pos_y1, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8002328:	7bfb      	ldrb	r3, [r7, #15]
 800232a:	b29a      	uxth	r2, r3
 800232c:	2300      	movs	r3, #0
 800232e:	9301      	str	r3, [sp, #4]
 8002330:	2302      	movs	r3, #2
 8002332:	9300      	str	r3, [sp, #0]
 8002334:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8002338:	2178      	movs	r1, #120	; 0x78
 800233a:	4882      	ldr	r0, [pc, #520]	; (8002544 <FreqMenu_DrawPresetMenu+0xafc>)
 800233c:	f00e fb22 	bl	8010984 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 5KHz", 	120, menu_pos_y2, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8002340:	7bbb      	ldrb	r3, [r7, #14]
 8002342:	b29a      	uxth	r2, r3
 8002344:	2300      	movs	r3, #0
 8002346:	9301      	str	r3, [sp, #4]
 8002348:	2302      	movs	r3, #2
 800234a:	9300      	str	r3, [sp, #0]
 800234c:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8002350:	2178      	movs	r1, #120	; 0x78
 8002352:	487d      	ldr	r0, [pc, #500]	; (8002548 <FreqMenu_DrawPresetMenu+0xb00>)
 8002354:	f00e fb16 	bl	8010984 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 10KHz", 	120, menu_pos_y3, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8002358:	7b7b      	ldrb	r3, [r7, #13]
 800235a:	b29a      	uxth	r2, r3
 800235c:	2300      	movs	r3, #0
 800235e:	9301      	str	r3, [sp, #4]
 8002360:	2302      	movs	r3, #2
 8002362:	9300      	str	r3, [sp, #0]
 8002364:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8002368:	2178      	movs	r1, #120	; 0x78
 800236a:	4878      	ldr	r0, [pc, #480]	; (800254c <FreqMenu_DrawPresetMenu+0xb04>)
 800236c:	f00e fb0a 	bl	8010984 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 25KHz", 	120, menu_pos_y4, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8002370:	7b3b      	ldrb	r3, [r7, #12]
 8002372:	b29a      	uxth	r2, r3
 8002374:	2300      	movs	r3, #0
 8002376:	9301      	str	r3, [sp, #4]
 8002378:	2302      	movs	r3, #2
 800237a:	9300      	str	r3, [sp, #0]
 800237c:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8002380:	2178      	movs	r1, #120	; 0x78
 8002382:	4873      	ldr	r0, [pc, #460]	; (8002550 <FreqMenu_DrawPresetMenu+0xb08>)
 8002384:	f00e fafe 	bl	8010984 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 50KHz", 	120, menu_pos_y5, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8002388:	7afb      	ldrb	r3, [r7, #11]
 800238a:	b29a      	uxth	r2, r3
 800238c:	2300      	movs	r3, #0
 800238e:	9301      	str	r3, [sp, #4]
 8002390:	2302      	movs	r3, #2
 8002392:	9300      	str	r3, [sp, #0]
 8002394:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8002398:	2178      	movs	r1, #120	; 0x78
 800239a:	486e      	ldr	r0, [pc, #440]	; (8002554 <FreqMenu_DrawPresetMenu+0xb0c>)
 800239c:	f00e faf2 	bl	8010984 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 75KHz",	120, menu_pos_y6, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 80023a0:	7abb      	ldrb	r3, [r7, #10]
 80023a2:	b29a      	uxth	r2, r3
 80023a4:	2300      	movs	r3, #0
 80023a6:	9301      	str	r3, [sp, #4]
 80023a8:	2302      	movs	r3, #2
 80023aa:	9300      	str	r3, [sp, #0]
 80023ac:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 80023b0:	2178      	movs	r1, #120	; 0x78
 80023b2:	4869      	ldr	r0, [pc, #420]	; (8002558 <FreqMenu_DrawPresetMenu+0xb10>)
 80023b4:	f00e fae6 	bl	8010984 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 100KHz", 	120, menu_pos_y7, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 80023b8:	7a7b      	ldrb	r3, [r7, #9]
 80023ba:	b29a      	uxth	r2, r3
 80023bc:	2300      	movs	r3, #0
 80023be:	9301      	str	r3, [sp, #4]
 80023c0:	2302      	movs	r3, #2
 80023c2:	9300      	str	r3, [sp, #0]
 80023c4:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 80023c8:	2178      	movs	r1, #120	; 0x78
 80023ca:	4864      	ldr	r0, [pc, #400]	; (800255c <FreqMenu_DrawPresetMenu+0xb14>)
 80023cc:	f00e fada 	bl	8010984 <ILI9341_Draw_Text>
				break;
 80023d0:	f000 bdc8 	b.w	8002f64 <FreqMenu_DrawPresetMenu+0x151c>
				ILI9341_Draw_Text("- 1Hz", 		5, menu_pos_y1, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 80023d4:	7bfb      	ldrb	r3, [r7, #15]
 80023d6:	b29a      	uxth	r2, r3
 80023d8:	2300      	movs	r3, #0
 80023da:	9301      	str	r3, [sp, #4]
 80023dc:	2302      	movs	r3, #2
 80023de:	9300      	str	r3, [sp, #0]
 80023e0:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 80023e4:	2105      	movs	r1, #5
 80023e6:	4850      	ldr	r0, [pc, #320]	; (8002528 <FreqMenu_DrawPresetMenu+0xae0>)
 80023e8:	f00e facc 	bl	8010984 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 10Hz", 	5, menu_pos_y2, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 80023ec:	7bbb      	ldrb	r3, [r7, #14]
 80023ee:	b29a      	uxth	r2, r3
 80023f0:	2300      	movs	r3, #0
 80023f2:	9301      	str	r3, [sp, #4]
 80023f4:	2302      	movs	r3, #2
 80023f6:	9300      	str	r3, [sp, #0]
 80023f8:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 80023fc:	2105      	movs	r1, #5
 80023fe:	484b      	ldr	r0, [pc, #300]	; (800252c <FreqMenu_DrawPresetMenu+0xae4>)
 8002400:	f00e fac0 	bl	8010984 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 50Hz", 	5, menu_pos_y3, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8002404:	7b7b      	ldrb	r3, [r7, #13]
 8002406:	b29a      	uxth	r2, r3
 8002408:	2300      	movs	r3, #0
 800240a:	9301      	str	r3, [sp, #4]
 800240c:	2302      	movs	r3, #2
 800240e:	9300      	str	r3, [sp, #0]
 8002410:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8002414:	2105      	movs	r1, #5
 8002416:	4846      	ldr	r0, [pc, #280]	; (8002530 <FreqMenu_DrawPresetMenu+0xae8>)
 8002418:	f00e fab4 	bl	8010984 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 100Hz", 	5, menu_pos_y4, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 800241c:	7b3b      	ldrb	r3, [r7, #12]
 800241e:	b29a      	uxth	r2, r3
 8002420:	2300      	movs	r3, #0
 8002422:	9301      	str	r3, [sp, #4]
 8002424:	2302      	movs	r3, #2
 8002426:	9300      	str	r3, [sp, #0]
 8002428:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 800242c:	2105      	movs	r1, #5
 800242e:	4841      	ldr	r0, [pc, #260]	; (8002534 <FreqMenu_DrawPresetMenu+0xaec>)
 8002430:	f00e faa8 	bl	8010984 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 250Hz", 	5, menu_pos_y5, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8002434:	7afb      	ldrb	r3, [r7, #11]
 8002436:	b29a      	uxth	r2, r3
 8002438:	2300      	movs	r3, #0
 800243a:	9301      	str	r3, [sp, #4]
 800243c:	2302      	movs	r3, #2
 800243e:	9300      	str	r3, [sp, #0]
 8002440:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8002444:	2105      	movs	r1, #5
 8002446:	483c      	ldr	r0, [pc, #240]	; (8002538 <FreqMenu_DrawPresetMenu+0xaf0>)
 8002448:	f00e fa9c 	bl	8010984 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 500Hz",	5, menu_pos_y6, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 800244c:	7abb      	ldrb	r3, [r7, #10]
 800244e:	b29a      	uxth	r2, r3
 8002450:	2300      	movs	r3, #0
 8002452:	9301      	str	r3, [sp, #4]
 8002454:	2302      	movs	r3, #2
 8002456:	9300      	str	r3, [sp, #0]
 8002458:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 800245c:	2105      	movs	r1, #5
 800245e:	4837      	ldr	r0, [pc, #220]	; (800253c <FreqMenu_DrawPresetMenu+0xaf4>)
 8002460:	f00e fa90 	bl	8010984 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 750Hz", 	5, menu_pos_y7, HIGHLIGHT_TEXT_FGCOLOUR, 2, HIGHLIGHT_TEXT_BGCOLOUR);
 8002464:	7a7b      	ldrb	r3, [r7, #9]
 8002466:	b29a      	uxth	r2, r3
 8002468:	f644 43f6 	movw	r3, #19702	; 0x4cf6
 800246c:	9301      	str	r3, [sp, #4]
 800246e:	2302      	movs	r3, #2
 8002470:	9300      	str	r3, [sp, #0]
 8002472:	2300      	movs	r3, #0
 8002474:	2105      	movs	r1, #5
 8002476:	4832      	ldr	r0, [pc, #200]	; (8002540 <FreqMenu_DrawPresetMenu+0xaf8>)
 8002478:	f00e fa84 	bl	8010984 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 1KHz", 	120, menu_pos_y1, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 800247c:	7bfb      	ldrb	r3, [r7, #15]
 800247e:	b29a      	uxth	r2, r3
 8002480:	2300      	movs	r3, #0
 8002482:	9301      	str	r3, [sp, #4]
 8002484:	2302      	movs	r3, #2
 8002486:	9300      	str	r3, [sp, #0]
 8002488:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 800248c:	2178      	movs	r1, #120	; 0x78
 800248e:	482d      	ldr	r0, [pc, #180]	; (8002544 <FreqMenu_DrawPresetMenu+0xafc>)
 8002490:	f00e fa78 	bl	8010984 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 5KHz", 	120, menu_pos_y2, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8002494:	7bbb      	ldrb	r3, [r7, #14]
 8002496:	b29a      	uxth	r2, r3
 8002498:	2300      	movs	r3, #0
 800249a:	9301      	str	r3, [sp, #4]
 800249c:	2302      	movs	r3, #2
 800249e:	9300      	str	r3, [sp, #0]
 80024a0:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 80024a4:	2178      	movs	r1, #120	; 0x78
 80024a6:	4828      	ldr	r0, [pc, #160]	; (8002548 <FreqMenu_DrawPresetMenu+0xb00>)
 80024a8:	f00e fa6c 	bl	8010984 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 10KHz", 	120, menu_pos_y3, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 80024ac:	7b7b      	ldrb	r3, [r7, #13]
 80024ae:	b29a      	uxth	r2, r3
 80024b0:	2300      	movs	r3, #0
 80024b2:	9301      	str	r3, [sp, #4]
 80024b4:	2302      	movs	r3, #2
 80024b6:	9300      	str	r3, [sp, #0]
 80024b8:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 80024bc:	2178      	movs	r1, #120	; 0x78
 80024be:	4823      	ldr	r0, [pc, #140]	; (800254c <FreqMenu_DrawPresetMenu+0xb04>)
 80024c0:	f00e fa60 	bl	8010984 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 25KHz", 	120, menu_pos_y4, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 80024c4:	7b3b      	ldrb	r3, [r7, #12]
 80024c6:	b29a      	uxth	r2, r3
 80024c8:	2300      	movs	r3, #0
 80024ca:	9301      	str	r3, [sp, #4]
 80024cc:	2302      	movs	r3, #2
 80024ce:	9300      	str	r3, [sp, #0]
 80024d0:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 80024d4:	2178      	movs	r1, #120	; 0x78
 80024d6:	481e      	ldr	r0, [pc, #120]	; (8002550 <FreqMenu_DrawPresetMenu+0xb08>)
 80024d8:	f00e fa54 	bl	8010984 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 50KHz", 	120, menu_pos_y5, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 80024dc:	7afb      	ldrb	r3, [r7, #11]
 80024de:	b29a      	uxth	r2, r3
 80024e0:	2300      	movs	r3, #0
 80024e2:	9301      	str	r3, [sp, #4]
 80024e4:	2302      	movs	r3, #2
 80024e6:	9300      	str	r3, [sp, #0]
 80024e8:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 80024ec:	2178      	movs	r1, #120	; 0x78
 80024ee:	4819      	ldr	r0, [pc, #100]	; (8002554 <FreqMenu_DrawPresetMenu+0xb0c>)
 80024f0:	f00e fa48 	bl	8010984 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 75KHz",	120, menu_pos_y6, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 80024f4:	7abb      	ldrb	r3, [r7, #10]
 80024f6:	b29a      	uxth	r2, r3
 80024f8:	2300      	movs	r3, #0
 80024fa:	9301      	str	r3, [sp, #4]
 80024fc:	2302      	movs	r3, #2
 80024fe:	9300      	str	r3, [sp, #0]
 8002500:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8002504:	2178      	movs	r1, #120	; 0x78
 8002506:	4814      	ldr	r0, [pc, #80]	; (8002558 <FreqMenu_DrawPresetMenu+0xb10>)
 8002508:	f00e fa3c 	bl	8010984 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 100KHz", 	120, menu_pos_y7, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 800250c:	7a7b      	ldrb	r3, [r7, #9]
 800250e:	b29a      	uxth	r2, r3
 8002510:	2300      	movs	r3, #0
 8002512:	9301      	str	r3, [sp, #4]
 8002514:	2302      	movs	r3, #2
 8002516:	9300      	str	r3, [sp, #0]
 8002518:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 800251c:	2178      	movs	r1, #120	; 0x78
 800251e:	480f      	ldr	r0, [pc, #60]	; (800255c <FreqMenu_DrawPresetMenu+0xb14>)
 8002520:	f00e fa30 	bl	8010984 <ILI9341_Draw_Text>
				break;
 8002524:	f000 bd1e 	b.w	8002f64 <FreqMenu_DrawPresetMenu+0x151c>
 8002528:	08015a2c 	.word	0x08015a2c
 800252c:	08015a34 	.word	0x08015a34
 8002530:	08015a3c 	.word	0x08015a3c
 8002534:	08015a44 	.word	0x08015a44
 8002538:	08015a4c 	.word	0x08015a4c
 800253c:	08015a54 	.word	0x08015a54
 8002540:	08015a5c 	.word	0x08015a5c
 8002544:	08015a64 	.word	0x08015a64
 8002548:	08015a6c 	.word	0x08015a6c
 800254c:	08015a74 	.word	0x08015a74
 8002550:	08015a7c 	.word	0x08015a7c
 8002554:	08015a84 	.word	0x08015a84
 8002558:	08015a8c 	.word	0x08015a8c
 800255c:	08015a94 	.word	0x08015a94
				ILI9341_Draw_Text("- 1Hz", 		5, menu_pos_y1, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8002560:	7bfb      	ldrb	r3, [r7, #15]
 8002562:	b29a      	uxth	r2, r3
 8002564:	2300      	movs	r3, #0
 8002566:	9301      	str	r3, [sp, #4]
 8002568:	2302      	movs	r3, #2
 800256a:	9300      	str	r3, [sp, #0]
 800256c:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8002570:	2105      	movs	r1, #5
 8002572:	48a5      	ldr	r0, [pc, #660]	; (8002808 <FreqMenu_DrawPresetMenu+0xdc0>)
 8002574:	f00e fa06 	bl	8010984 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 10Hz", 	5, menu_pos_y2, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8002578:	7bbb      	ldrb	r3, [r7, #14]
 800257a:	b29a      	uxth	r2, r3
 800257c:	2300      	movs	r3, #0
 800257e:	9301      	str	r3, [sp, #4]
 8002580:	2302      	movs	r3, #2
 8002582:	9300      	str	r3, [sp, #0]
 8002584:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8002588:	2105      	movs	r1, #5
 800258a:	48a0      	ldr	r0, [pc, #640]	; (800280c <FreqMenu_DrawPresetMenu+0xdc4>)
 800258c:	f00e f9fa 	bl	8010984 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 50Hz", 	5, menu_pos_y3, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8002590:	7b7b      	ldrb	r3, [r7, #13]
 8002592:	b29a      	uxth	r2, r3
 8002594:	2300      	movs	r3, #0
 8002596:	9301      	str	r3, [sp, #4]
 8002598:	2302      	movs	r3, #2
 800259a:	9300      	str	r3, [sp, #0]
 800259c:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 80025a0:	2105      	movs	r1, #5
 80025a2:	489b      	ldr	r0, [pc, #620]	; (8002810 <FreqMenu_DrawPresetMenu+0xdc8>)
 80025a4:	f00e f9ee 	bl	8010984 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 100Hz", 	5, menu_pos_y4, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 80025a8:	7b3b      	ldrb	r3, [r7, #12]
 80025aa:	b29a      	uxth	r2, r3
 80025ac:	2300      	movs	r3, #0
 80025ae:	9301      	str	r3, [sp, #4]
 80025b0:	2302      	movs	r3, #2
 80025b2:	9300      	str	r3, [sp, #0]
 80025b4:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 80025b8:	2105      	movs	r1, #5
 80025ba:	4896      	ldr	r0, [pc, #600]	; (8002814 <FreqMenu_DrawPresetMenu+0xdcc>)
 80025bc:	f00e f9e2 	bl	8010984 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 250Hz", 	5, menu_pos_y5, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 80025c0:	7afb      	ldrb	r3, [r7, #11]
 80025c2:	b29a      	uxth	r2, r3
 80025c4:	2300      	movs	r3, #0
 80025c6:	9301      	str	r3, [sp, #4]
 80025c8:	2302      	movs	r3, #2
 80025ca:	9300      	str	r3, [sp, #0]
 80025cc:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 80025d0:	2105      	movs	r1, #5
 80025d2:	4891      	ldr	r0, [pc, #580]	; (8002818 <FreqMenu_DrawPresetMenu+0xdd0>)
 80025d4:	f00e f9d6 	bl	8010984 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 500Hz",	5, menu_pos_y6, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 80025d8:	7abb      	ldrb	r3, [r7, #10]
 80025da:	b29a      	uxth	r2, r3
 80025dc:	2300      	movs	r3, #0
 80025de:	9301      	str	r3, [sp, #4]
 80025e0:	2302      	movs	r3, #2
 80025e2:	9300      	str	r3, [sp, #0]
 80025e4:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 80025e8:	2105      	movs	r1, #5
 80025ea:	488c      	ldr	r0, [pc, #560]	; (800281c <FreqMenu_DrawPresetMenu+0xdd4>)
 80025ec:	f00e f9ca 	bl	8010984 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 750Hz", 	5, menu_pos_y7, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 80025f0:	7a7b      	ldrb	r3, [r7, #9]
 80025f2:	b29a      	uxth	r2, r3
 80025f4:	2300      	movs	r3, #0
 80025f6:	9301      	str	r3, [sp, #4]
 80025f8:	2302      	movs	r3, #2
 80025fa:	9300      	str	r3, [sp, #0]
 80025fc:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8002600:	2105      	movs	r1, #5
 8002602:	4887      	ldr	r0, [pc, #540]	; (8002820 <FreqMenu_DrawPresetMenu+0xdd8>)
 8002604:	f00e f9be 	bl	8010984 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 1KHz", 	120, menu_pos_y1, HIGHLIGHT_TEXT_FGCOLOUR, 2, HIGHLIGHT_TEXT_BGCOLOUR);
 8002608:	7bfb      	ldrb	r3, [r7, #15]
 800260a:	b29a      	uxth	r2, r3
 800260c:	f644 43f6 	movw	r3, #19702	; 0x4cf6
 8002610:	9301      	str	r3, [sp, #4]
 8002612:	2302      	movs	r3, #2
 8002614:	9300      	str	r3, [sp, #0]
 8002616:	2300      	movs	r3, #0
 8002618:	2178      	movs	r1, #120	; 0x78
 800261a:	4882      	ldr	r0, [pc, #520]	; (8002824 <FreqMenu_DrawPresetMenu+0xddc>)
 800261c:	f00e f9b2 	bl	8010984 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 5KHz", 	120, menu_pos_y2, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8002620:	7bbb      	ldrb	r3, [r7, #14]
 8002622:	b29a      	uxth	r2, r3
 8002624:	2300      	movs	r3, #0
 8002626:	9301      	str	r3, [sp, #4]
 8002628:	2302      	movs	r3, #2
 800262a:	9300      	str	r3, [sp, #0]
 800262c:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8002630:	2178      	movs	r1, #120	; 0x78
 8002632:	487d      	ldr	r0, [pc, #500]	; (8002828 <FreqMenu_DrawPresetMenu+0xde0>)
 8002634:	f00e f9a6 	bl	8010984 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 10KHz", 	120, menu_pos_y3, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8002638:	7b7b      	ldrb	r3, [r7, #13]
 800263a:	b29a      	uxth	r2, r3
 800263c:	2300      	movs	r3, #0
 800263e:	9301      	str	r3, [sp, #4]
 8002640:	2302      	movs	r3, #2
 8002642:	9300      	str	r3, [sp, #0]
 8002644:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8002648:	2178      	movs	r1, #120	; 0x78
 800264a:	4878      	ldr	r0, [pc, #480]	; (800282c <FreqMenu_DrawPresetMenu+0xde4>)
 800264c:	f00e f99a 	bl	8010984 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 25KHz", 	120, menu_pos_y4, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8002650:	7b3b      	ldrb	r3, [r7, #12]
 8002652:	b29a      	uxth	r2, r3
 8002654:	2300      	movs	r3, #0
 8002656:	9301      	str	r3, [sp, #4]
 8002658:	2302      	movs	r3, #2
 800265a:	9300      	str	r3, [sp, #0]
 800265c:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8002660:	2178      	movs	r1, #120	; 0x78
 8002662:	4873      	ldr	r0, [pc, #460]	; (8002830 <FreqMenu_DrawPresetMenu+0xde8>)
 8002664:	f00e f98e 	bl	8010984 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 50KHz", 	120, menu_pos_y5, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8002668:	7afb      	ldrb	r3, [r7, #11]
 800266a:	b29a      	uxth	r2, r3
 800266c:	2300      	movs	r3, #0
 800266e:	9301      	str	r3, [sp, #4]
 8002670:	2302      	movs	r3, #2
 8002672:	9300      	str	r3, [sp, #0]
 8002674:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8002678:	2178      	movs	r1, #120	; 0x78
 800267a:	486e      	ldr	r0, [pc, #440]	; (8002834 <FreqMenu_DrawPresetMenu+0xdec>)
 800267c:	f00e f982 	bl	8010984 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 75KHz",	120, menu_pos_y6, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8002680:	7abb      	ldrb	r3, [r7, #10]
 8002682:	b29a      	uxth	r2, r3
 8002684:	2300      	movs	r3, #0
 8002686:	9301      	str	r3, [sp, #4]
 8002688:	2302      	movs	r3, #2
 800268a:	9300      	str	r3, [sp, #0]
 800268c:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8002690:	2178      	movs	r1, #120	; 0x78
 8002692:	4869      	ldr	r0, [pc, #420]	; (8002838 <FreqMenu_DrawPresetMenu+0xdf0>)
 8002694:	f00e f976 	bl	8010984 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 100KHz", 	120, menu_pos_y7, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8002698:	7a7b      	ldrb	r3, [r7, #9]
 800269a:	b29a      	uxth	r2, r3
 800269c:	2300      	movs	r3, #0
 800269e:	9301      	str	r3, [sp, #4]
 80026a0:	2302      	movs	r3, #2
 80026a2:	9300      	str	r3, [sp, #0]
 80026a4:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 80026a8:	2178      	movs	r1, #120	; 0x78
 80026aa:	4864      	ldr	r0, [pc, #400]	; (800283c <FreqMenu_DrawPresetMenu+0xdf4>)
 80026ac:	f00e f96a 	bl	8010984 <ILI9341_Draw_Text>
				break;
 80026b0:	f000 bc58 	b.w	8002f64 <FreqMenu_DrawPresetMenu+0x151c>
				ILI9341_Draw_Text("- 1Hz", 		5, menu_pos_y1, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 80026b4:	7bfb      	ldrb	r3, [r7, #15]
 80026b6:	b29a      	uxth	r2, r3
 80026b8:	2300      	movs	r3, #0
 80026ba:	9301      	str	r3, [sp, #4]
 80026bc:	2302      	movs	r3, #2
 80026be:	9300      	str	r3, [sp, #0]
 80026c0:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 80026c4:	2105      	movs	r1, #5
 80026c6:	4850      	ldr	r0, [pc, #320]	; (8002808 <FreqMenu_DrawPresetMenu+0xdc0>)
 80026c8:	f00e f95c 	bl	8010984 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 10Hz", 	5, menu_pos_y2, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 80026cc:	7bbb      	ldrb	r3, [r7, #14]
 80026ce:	b29a      	uxth	r2, r3
 80026d0:	2300      	movs	r3, #0
 80026d2:	9301      	str	r3, [sp, #4]
 80026d4:	2302      	movs	r3, #2
 80026d6:	9300      	str	r3, [sp, #0]
 80026d8:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 80026dc:	2105      	movs	r1, #5
 80026de:	484b      	ldr	r0, [pc, #300]	; (800280c <FreqMenu_DrawPresetMenu+0xdc4>)
 80026e0:	f00e f950 	bl	8010984 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 50Hz", 	5, menu_pos_y3, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 80026e4:	7b7b      	ldrb	r3, [r7, #13]
 80026e6:	b29a      	uxth	r2, r3
 80026e8:	2300      	movs	r3, #0
 80026ea:	9301      	str	r3, [sp, #4]
 80026ec:	2302      	movs	r3, #2
 80026ee:	9300      	str	r3, [sp, #0]
 80026f0:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 80026f4:	2105      	movs	r1, #5
 80026f6:	4846      	ldr	r0, [pc, #280]	; (8002810 <FreqMenu_DrawPresetMenu+0xdc8>)
 80026f8:	f00e f944 	bl	8010984 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 100Hz", 	5, menu_pos_y4, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 80026fc:	7b3b      	ldrb	r3, [r7, #12]
 80026fe:	b29a      	uxth	r2, r3
 8002700:	2300      	movs	r3, #0
 8002702:	9301      	str	r3, [sp, #4]
 8002704:	2302      	movs	r3, #2
 8002706:	9300      	str	r3, [sp, #0]
 8002708:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 800270c:	2105      	movs	r1, #5
 800270e:	4841      	ldr	r0, [pc, #260]	; (8002814 <FreqMenu_DrawPresetMenu+0xdcc>)
 8002710:	f00e f938 	bl	8010984 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 250Hz", 	5, menu_pos_y5, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8002714:	7afb      	ldrb	r3, [r7, #11]
 8002716:	b29a      	uxth	r2, r3
 8002718:	2300      	movs	r3, #0
 800271a:	9301      	str	r3, [sp, #4]
 800271c:	2302      	movs	r3, #2
 800271e:	9300      	str	r3, [sp, #0]
 8002720:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8002724:	2105      	movs	r1, #5
 8002726:	483c      	ldr	r0, [pc, #240]	; (8002818 <FreqMenu_DrawPresetMenu+0xdd0>)
 8002728:	f00e f92c 	bl	8010984 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 500Hz",	5, menu_pos_y6, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 800272c:	7abb      	ldrb	r3, [r7, #10]
 800272e:	b29a      	uxth	r2, r3
 8002730:	2300      	movs	r3, #0
 8002732:	9301      	str	r3, [sp, #4]
 8002734:	2302      	movs	r3, #2
 8002736:	9300      	str	r3, [sp, #0]
 8002738:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 800273c:	2105      	movs	r1, #5
 800273e:	4837      	ldr	r0, [pc, #220]	; (800281c <FreqMenu_DrawPresetMenu+0xdd4>)
 8002740:	f00e f920 	bl	8010984 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 750Hz", 	5, menu_pos_y7, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8002744:	7a7b      	ldrb	r3, [r7, #9]
 8002746:	b29a      	uxth	r2, r3
 8002748:	2300      	movs	r3, #0
 800274a:	9301      	str	r3, [sp, #4]
 800274c:	2302      	movs	r3, #2
 800274e:	9300      	str	r3, [sp, #0]
 8002750:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8002754:	2105      	movs	r1, #5
 8002756:	4832      	ldr	r0, [pc, #200]	; (8002820 <FreqMenu_DrawPresetMenu+0xdd8>)
 8002758:	f00e f914 	bl	8010984 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 1KHz", 	120, menu_pos_y1, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 800275c:	7bfb      	ldrb	r3, [r7, #15]
 800275e:	b29a      	uxth	r2, r3
 8002760:	2300      	movs	r3, #0
 8002762:	9301      	str	r3, [sp, #4]
 8002764:	2302      	movs	r3, #2
 8002766:	9300      	str	r3, [sp, #0]
 8002768:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 800276c:	2178      	movs	r1, #120	; 0x78
 800276e:	482d      	ldr	r0, [pc, #180]	; (8002824 <FreqMenu_DrawPresetMenu+0xddc>)
 8002770:	f00e f908 	bl	8010984 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 5KHz", 	120, menu_pos_y2, HIGHLIGHT_TEXT_FGCOLOUR, 2, HIGHLIGHT_TEXT_BGCOLOUR);
 8002774:	7bbb      	ldrb	r3, [r7, #14]
 8002776:	b29a      	uxth	r2, r3
 8002778:	f644 43f6 	movw	r3, #19702	; 0x4cf6
 800277c:	9301      	str	r3, [sp, #4]
 800277e:	2302      	movs	r3, #2
 8002780:	9300      	str	r3, [sp, #0]
 8002782:	2300      	movs	r3, #0
 8002784:	2178      	movs	r1, #120	; 0x78
 8002786:	4828      	ldr	r0, [pc, #160]	; (8002828 <FreqMenu_DrawPresetMenu+0xde0>)
 8002788:	f00e f8fc 	bl	8010984 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 10KHz", 	120, menu_pos_y3, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 800278c:	7b7b      	ldrb	r3, [r7, #13]
 800278e:	b29a      	uxth	r2, r3
 8002790:	2300      	movs	r3, #0
 8002792:	9301      	str	r3, [sp, #4]
 8002794:	2302      	movs	r3, #2
 8002796:	9300      	str	r3, [sp, #0]
 8002798:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 800279c:	2178      	movs	r1, #120	; 0x78
 800279e:	4823      	ldr	r0, [pc, #140]	; (800282c <FreqMenu_DrawPresetMenu+0xde4>)
 80027a0:	f00e f8f0 	bl	8010984 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 25KHz", 	120, menu_pos_y4, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 80027a4:	7b3b      	ldrb	r3, [r7, #12]
 80027a6:	b29a      	uxth	r2, r3
 80027a8:	2300      	movs	r3, #0
 80027aa:	9301      	str	r3, [sp, #4]
 80027ac:	2302      	movs	r3, #2
 80027ae:	9300      	str	r3, [sp, #0]
 80027b0:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 80027b4:	2178      	movs	r1, #120	; 0x78
 80027b6:	481e      	ldr	r0, [pc, #120]	; (8002830 <FreqMenu_DrawPresetMenu+0xde8>)
 80027b8:	f00e f8e4 	bl	8010984 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 50KHz", 	120, menu_pos_y5, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 80027bc:	7afb      	ldrb	r3, [r7, #11]
 80027be:	b29a      	uxth	r2, r3
 80027c0:	2300      	movs	r3, #0
 80027c2:	9301      	str	r3, [sp, #4]
 80027c4:	2302      	movs	r3, #2
 80027c6:	9300      	str	r3, [sp, #0]
 80027c8:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 80027cc:	2178      	movs	r1, #120	; 0x78
 80027ce:	4819      	ldr	r0, [pc, #100]	; (8002834 <FreqMenu_DrawPresetMenu+0xdec>)
 80027d0:	f00e f8d8 	bl	8010984 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 75KHz",	120, menu_pos_y6, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 80027d4:	7abb      	ldrb	r3, [r7, #10]
 80027d6:	b29a      	uxth	r2, r3
 80027d8:	2300      	movs	r3, #0
 80027da:	9301      	str	r3, [sp, #4]
 80027dc:	2302      	movs	r3, #2
 80027de:	9300      	str	r3, [sp, #0]
 80027e0:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 80027e4:	2178      	movs	r1, #120	; 0x78
 80027e6:	4814      	ldr	r0, [pc, #80]	; (8002838 <FreqMenu_DrawPresetMenu+0xdf0>)
 80027e8:	f00e f8cc 	bl	8010984 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 100KHz", 	120, menu_pos_y7, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 80027ec:	7a7b      	ldrb	r3, [r7, #9]
 80027ee:	b29a      	uxth	r2, r3
 80027f0:	2300      	movs	r3, #0
 80027f2:	9301      	str	r3, [sp, #4]
 80027f4:	2302      	movs	r3, #2
 80027f6:	9300      	str	r3, [sp, #0]
 80027f8:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 80027fc:	2178      	movs	r1, #120	; 0x78
 80027fe:	480f      	ldr	r0, [pc, #60]	; (800283c <FreqMenu_DrawPresetMenu+0xdf4>)
 8002800:	f00e f8c0 	bl	8010984 <ILI9341_Draw_Text>
				break;
 8002804:	e3ae      	b.n	8002f64 <FreqMenu_DrawPresetMenu+0x151c>
 8002806:	bf00      	nop
 8002808:	08015a2c 	.word	0x08015a2c
 800280c:	08015a34 	.word	0x08015a34
 8002810:	08015a3c 	.word	0x08015a3c
 8002814:	08015a44 	.word	0x08015a44
 8002818:	08015a4c 	.word	0x08015a4c
 800281c:	08015a54 	.word	0x08015a54
 8002820:	08015a5c 	.word	0x08015a5c
 8002824:	08015a64 	.word	0x08015a64
 8002828:	08015a6c 	.word	0x08015a6c
 800282c:	08015a74 	.word	0x08015a74
 8002830:	08015a7c 	.word	0x08015a7c
 8002834:	08015a84 	.word	0x08015a84
 8002838:	08015a8c 	.word	0x08015a8c
 800283c:	08015a94 	.word	0x08015a94
				ILI9341_Draw_Text("- 1Hz", 		5, menu_pos_y1, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8002840:	7bfb      	ldrb	r3, [r7, #15]
 8002842:	b29a      	uxth	r2, r3
 8002844:	2300      	movs	r3, #0
 8002846:	9301      	str	r3, [sp, #4]
 8002848:	2302      	movs	r3, #2
 800284a:	9300      	str	r3, [sp, #0]
 800284c:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8002850:	2105      	movs	r1, #5
 8002852:	48a4      	ldr	r0, [pc, #656]	; (8002ae4 <FreqMenu_DrawPresetMenu+0x109c>)
 8002854:	f00e f896 	bl	8010984 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 10Hz", 	5, menu_pos_y2, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8002858:	7bbb      	ldrb	r3, [r7, #14]
 800285a:	b29a      	uxth	r2, r3
 800285c:	2300      	movs	r3, #0
 800285e:	9301      	str	r3, [sp, #4]
 8002860:	2302      	movs	r3, #2
 8002862:	9300      	str	r3, [sp, #0]
 8002864:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8002868:	2105      	movs	r1, #5
 800286a:	489f      	ldr	r0, [pc, #636]	; (8002ae8 <FreqMenu_DrawPresetMenu+0x10a0>)
 800286c:	f00e f88a 	bl	8010984 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 50Hz", 	5, menu_pos_y3, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8002870:	7b7b      	ldrb	r3, [r7, #13]
 8002872:	b29a      	uxth	r2, r3
 8002874:	2300      	movs	r3, #0
 8002876:	9301      	str	r3, [sp, #4]
 8002878:	2302      	movs	r3, #2
 800287a:	9300      	str	r3, [sp, #0]
 800287c:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8002880:	2105      	movs	r1, #5
 8002882:	489a      	ldr	r0, [pc, #616]	; (8002aec <FreqMenu_DrawPresetMenu+0x10a4>)
 8002884:	f00e f87e 	bl	8010984 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 100Hz", 	5, menu_pos_y4, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8002888:	7b3b      	ldrb	r3, [r7, #12]
 800288a:	b29a      	uxth	r2, r3
 800288c:	2300      	movs	r3, #0
 800288e:	9301      	str	r3, [sp, #4]
 8002890:	2302      	movs	r3, #2
 8002892:	9300      	str	r3, [sp, #0]
 8002894:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8002898:	2105      	movs	r1, #5
 800289a:	4895      	ldr	r0, [pc, #596]	; (8002af0 <FreqMenu_DrawPresetMenu+0x10a8>)
 800289c:	f00e f872 	bl	8010984 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 250Hz", 	5, menu_pos_y5, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 80028a0:	7afb      	ldrb	r3, [r7, #11]
 80028a2:	b29a      	uxth	r2, r3
 80028a4:	2300      	movs	r3, #0
 80028a6:	9301      	str	r3, [sp, #4]
 80028a8:	2302      	movs	r3, #2
 80028aa:	9300      	str	r3, [sp, #0]
 80028ac:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 80028b0:	2105      	movs	r1, #5
 80028b2:	4890      	ldr	r0, [pc, #576]	; (8002af4 <FreqMenu_DrawPresetMenu+0x10ac>)
 80028b4:	f00e f866 	bl	8010984 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 500Hz",	5, menu_pos_y6, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 80028b8:	7abb      	ldrb	r3, [r7, #10]
 80028ba:	b29a      	uxth	r2, r3
 80028bc:	2300      	movs	r3, #0
 80028be:	9301      	str	r3, [sp, #4]
 80028c0:	2302      	movs	r3, #2
 80028c2:	9300      	str	r3, [sp, #0]
 80028c4:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 80028c8:	2105      	movs	r1, #5
 80028ca:	488b      	ldr	r0, [pc, #556]	; (8002af8 <FreqMenu_DrawPresetMenu+0x10b0>)
 80028cc:	f00e f85a 	bl	8010984 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 750Hz", 	5, menu_pos_y7, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 80028d0:	7a7b      	ldrb	r3, [r7, #9]
 80028d2:	b29a      	uxth	r2, r3
 80028d4:	2300      	movs	r3, #0
 80028d6:	9301      	str	r3, [sp, #4]
 80028d8:	2302      	movs	r3, #2
 80028da:	9300      	str	r3, [sp, #0]
 80028dc:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 80028e0:	2105      	movs	r1, #5
 80028e2:	4886      	ldr	r0, [pc, #536]	; (8002afc <FreqMenu_DrawPresetMenu+0x10b4>)
 80028e4:	f00e f84e 	bl	8010984 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 1KHz", 	120, menu_pos_y1, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 80028e8:	7bfb      	ldrb	r3, [r7, #15]
 80028ea:	b29a      	uxth	r2, r3
 80028ec:	2300      	movs	r3, #0
 80028ee:	9301      	str	r3, [sp, #4]
 80028f0:	2302      	movs	r3, #2
 80028f2:	9300      	str	r3, [sp, #0]
 80028f4:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 80028f8:	2178      	movs	r1, #120	; 0x78
 80028fa:	4881      	ldr	r0, [pc, #516]	; (8002b00 <FreqMenu_DrawPresetMenu+0x10b8>)
 80028fc:	f00e f842 	bl	8010984 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 5KHz", 	120, menu_pos_y2, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8002900:	7bbb      	ldrb	r3, [r7, #14]
 8002902:	b29a      	uxth	r2, r3
 8002904:	2300      	movs	r3, #0
 8002906:	9301      	str	r3, [sp, #4]
 8002908:	2302      	movs	r3, #2
 800290a:	9300      	str	r3, [sp, #0]
 800290c:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8002910:	2178      	movs	r1, #120	; 0x78
 8002912:	487c      	ldr	r0, [pc, #496]	; (8002b04 <FreqMenu_DrawPresetMenu+0x10bc>)
 8002914:	f00e f836 	bl	8010984 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 10KHz", 	120, menu_pos_y3, HIGHLIGHT_TEXT_FGCOLOUR, 2, HIGHLIGHT_TEXT_BGCOLOUR);
 8002918:	7b7b      	ldrb	r3, [r7, #13]
 800291a:	b29a      	uxth	r2, r3
 800291c:	f644 43f6 	movw	r3, #19702	; 0x4cf6
 8002920:	9301      	str	r3, [sp, #4]
 8002922:	2302      	movs	r3, #2
 8002924:	9300      	str	r3, [sp, #0]
 8002926:	2300      	movs	r3, #0
 8002928:	2178      	movs	r1, #120	; 0x78
 800292a:	4877      	ldr	r0, [pc, #476]	; (8002b08 <FreqMenu_DrawPresetMenu+0x10c0>)
 800292c:	f00e f82a 	bl	8010984 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 25KHz", 	120, menu_pos_y4, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8002930:	7b3b      	ldrb	r3, [r7, #12]
 8002932:	b29a      	uxth	r2, r3
 8002934:	2300      	movs	r3, #0
 8002936:	9301      	str	r3, [sp, #4]
 8002938:	2302      	movs	r3, #2
 800293a:	9300      	str	r3, [sp, #0]
 800293c:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8002940:	2178      	movs	r1, #120	; 0x78
 8002942:	4872      	ldr	r0, [pc, #456]	; (8002b0c <FreqMenu_DrawPresetMenu+0x10c4>)
 8002944:	f00e f81e 	bl	8010984 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 50KHz", 	120, menu_pos_y5, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8002948:	7afb      	ldrb	r3, [r7, #11]
 800294a:	b29a      	uxth	r2, r3
 800294c:	2300      	movs	r3, #0
 800294e:	9301      	str	r3, [sp, #4]
 8002950:	2302      	movs	r3, #2
 8002952:	9300      	str	r3, [sp, #0]
 8002954:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8002958:	2178      	movs	r1, #120	; 0x78
 800295a:	486d      	ldr	r0, [pc, #436]	; (8002b10 <FreqMenu_DrawPresetMenu+0x10c8>)
 800295c:	f00e f812 	bl	8010984 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 75KHz",	120, menu_pos_y6, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8002960:	7abb      	ldrb	r3, [r7, #10]
 8002962:	b29a      	uxth	r2, r3
 8002964:	2300      	movs	r3, #0
 8002966:	9301      	str	r3, [sp, #4]
 8002968:	2302      	movs	r3, #2
 800296a:	9300      	str	r3, [sp, #0]
 800296c:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8002970:	2178      	movs	r1, #120	; 0x78
 8002972:	4868      	ldr	r0, [pc, #416]	; (8002b14 <FreqMenu_DrawPresetMenu+0x10cc>)
 8002974:	f00e f806 	bl	8010984 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 100KHz", 	120, menu_pos_y7, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8002978:	7a7b      	ldrb	r3, [r7, #9]
 800297a:	b29a      	uxth	r2, r3
 800297c:	2300      	movs	r3, #0
 800297e:	9301      	str	r3, [sp, #4]
 8002980:	2302      	movs	r3, #2
 8002982:	9300      	str	r3, [sp, #0]
 8002984:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8002988:	2178      	movs	r1, #120	; 0x78
 800298a:	4863      	ldr	r0, [pc, #396]	; (8002b18 <FreqMenu_DrawPresetMenu+0x10d0>)
 800298c:	f00d fffa 	bl	8010984 <ILI9341_Draw_Text>
				break;
 8002990:	e2e8      	b.n	8002f64 <FreqMenu_DrawPresetMenu+0x151c>
				ILI9341_Draw_Text("- 1Hz", 		5, menu_pos_y1, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8002992:	7bfb      	ldrb	r3, [r7, #15]
 8002994:	b29a      	uxth	r2, r3
 8002996:	2300      	movs	r3, #0
 8002998:	9301      	str	r3, [sp, #4]
 800299a:	2302      	movs	r3, #2
 800299c:	9300      	str	r3, [sp, #0]
 800299e:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 80029a2:	2105      	movs	r1, #5
 80029a4:	484f      	ldr	r0, [pc, #316]	; (8002ae4 <FreqMenu_DrawPresetMenu+0x109c>)
 80029a6:	f00d ffed 	bl	8010984 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 10Hz", 	5, menu_pos_y2, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 80029aa:	7bbb      	ldrb	r3, [r7, #14]
 80029ac:	b29a      	uxth	r2, r3
 80029ae:	2300      	movs	r3, #0
 80029b0:	9301      	str	r3, [sp, #4]
 80029b2:	2302      	movs	r3, #2
 80029b4:	9300      	str	r3, [sp, #0]
 80029b6:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 80029ba:	2105      	movs	r1, #5
 80029bc:	484a      	ldr	r0, [pc, #296]	; (8002ae8 <FreqMenu_DrawPresetMenu+0x10a0>)
 80029be:	f00d ffe1 	bl	8010984 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 50Hz", 	5, menu_pos_y3, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 80029c2:	7b7b      	ldrb	r3, [r7, #13]
 80029c4:	b29a      	uxth	r2, r3
 80029c6:	2300      	movs	r3, #0
 80029c8:	9301      	str	r3, [sp, #4]
 80029ca:	2302      	movs	r3, #2
 80029cc:	9300      	str	r3, [sp, #0]
 80029ce:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 80029d2:	2105      	movs	r1, #5
 80029d4:	4845      	ldr	r0, [pc, #276]	; (8002aec <FreqMenu_DrawPresetMenu+0x10a4>)
 80029d6:	f00d ffd5 	bl	8010984 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 100Hz", 	5, menu_pos_y4, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 80029da:	7b3b      	ldrb	r3, [r7, #12]
 80029dc:	b29a      	uxth	r2, r3
 80029de:	2300      	movs	r3, #0
 80029e0:	9301      	str	r3, [sp, #4]
 80029e2:	2302      	movs	r3, #2
 80029e4:	9300      	str	r3, [sp, #0]
 80029e6:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 80029ea:	2105      	movs	r1, #5
 80029ec:	4840      	ldr	r0, [pc, #256]	; (8002af0 <FreqMenu_DrawPresetMenu+0x10a8>)
 80029ee:	f00d ffc9 	bl	8010984 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 250Hz", 	5, menu_pos_y5, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 80029f2:	7afb      	ldrb	r3, [r7, #11]
 80029f4:	b29a      	uxth	r2, r3
 80029f6:	2300      	movs	r3, #0
 80029f8:	9301      	str	r3, [sp, #4]
 80029fa:	2302      	movs	r3, #2
 80029fc:	9300      	str	r3, [sp, #0]
 80029fe:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8002a02:	2105      	movs	r1, #5
 8002a04:	483b      	ldr	r0, [pc, #236]	; (8002af4 <FreqMenu_DrawPresetMenu+0x10ac>)
 8002a06:	f00d ffbd 	bl	8010984 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 500Hz",	5, menu_pos_y6, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8002a0a:	7abb      	ldrb	r3, [r7, #10]
 8002a0c:	b29a      	uxth	r2, r3
 8002a0e:	2300      	movs	r3, #0
 8002a10:	9301      	str	r3, [sp, #4]
 8002a12:	2302      	movs	r3, #2
 8002a14:	9300      	str	r3, [sp, #0]
 8002a16:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8002a1a:	2105      	movs	r1, #5
 8002a1c:	4836      	ldr	r0, [pc, #216]	; (8002af8 <FreqMenu_DrawPresetMenu+0x10b0>)
 8002a1e:	f00d ffb1 	bl	8010984 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 750Hz", 	5, menu_pos_y7, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8002a22:	7a7b      	ldrb	r3, [r7, #9]
 8002a24:	b29a      	uxth	r2, r3
 8002a26:	2300      	movs	r3, #0
 8002a28:	9301      	str	r3, [sp, #4]
 8002a2a:	2302      	movs	r3, #2
 8002a2c:	9300      	str	r3, [sp, #0]
 8002a2e:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8002a32:	2105      	movs	r1, #5
 8002a34:	4831      	ldr	r0, [pc, #196]	; (8002afc <FreqMenu_DrawPresetMenu+0x10b4>)
 8002a36:	f00d ffa5 	bl	8010984 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 1KHz", 	120, menu_pos_y1, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8002a3a:	7bfb      	ldrb	r3, [r7, #15]
 8002a3c:	b29a      	uxth	r2, r3
 8002a3e:	2300      	movs	r3, #0
 8002a40:	9301      	str	r3, [sp, #4]
 8002a42:	2302      	movs	r3, #2
 8002a44:	9300      	str	r3, [sp, #0]
 8002a46:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8002a4a:	2178      	movs	r1, #120	; 0x78
 8002a4c:	482c      	ldr	r0, [pc, #176]	; (8002b00 <FreqMenu_DrawPresetMenu+0x10b8>)
 8002a4e:	f00d ff99 	bl	8010984 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 5KHz", 	120, menu_pos_y2, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8002a52:	7bbb      	ldrb	r3, [r7, #14]
 8002a54:	b29a      	uxth	r2, r3
 8002a56:	2300      	movs	r3, #0
 8002a58:	9301      	str	r3, [sp, #4]
 8002a5a:	2302      	movs	r3, #2
 8002a5c:	9300      	str	r3, [sp, #0]
 8002a5e:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8002a62:	2178      	movs	r1, #120	; 0x78
 8002a64:	4827      	ldr	r0, [pc, #156]	; (8002b04 <FreqMenu_DrawPresetMenu+0x10bc>)
 8002a66:	f00d ff8d 	bl	8010984 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 10KHz", 	120, menu_pos_y3, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8002a6a:	7b7b      	ldrb	r3, [r7, #13]
 8002a6c:	b29a      	uxth	r2, r3
 8002a6e:	2300      	movs	r3, #0
 8002a70:	9301      	str	r3, [sp, #4]
 8002a72:	2302      	movs	r3, #2
 8002a74:	9300      	str	r3, [sp, #0]
 8002a76:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8002a7a:	2178      	movs	r1, #120	; 0x78
 8002a7c:	4822      	ldr	r0, [pc, #136]	; (8002b08 <FreqMenu_DrawPresetMenu+0x10c0>)
 8002a7e:	f00d ff81 	bl	8010984 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 25KHz", 	120, menu_pos_y4, HIGHLIGHT_TEXT_FGCOLOUR, 2, HIGHLIGHT_TEXT_BGCOLOUR);
 8002a82:	7b3b      	ldrb	r3, [r7, #12]
 8002a84:	b29a      	uxth	r2, r3
 8002a86:	f644 43f6 	movw	r3, #19702	; 0x4cf6
 8002a8a:	9301      	str	r3, [sp, #4]
 8002a8c:	2302      	movs	r3, #2
 8002a8e:	9300      	str	r3, [sp, #0]
 8002a90:	2300      	movs	r3, #0
 8002a92:	2178      	movs	r1, #120	; 0x78
 8002a94:	481d      	ldr	r0, [pc, #116]	; (8002b0c <FreqMenu_DrawPresetMenu+0x10c4>)
 8002a96:	f00d ff75 	bl	8010984 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 50KHz", 	120, menu_pos_y5, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8002a9a:	7afb      	ldrb	r3, [r7, #11]
 8002a9c:	b29a      	uxth	r2, r3
 8002a9e:	2300      	movs	r3, #0
 8002aa0:	9301      	str	r3, [sp, #4]
 8002aa2:	2302      	movs	r3, #2
 8002aa4:	9300      	str	r3, [sp, #0]
 8002aa6:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8002aaa:	2178      	movs	r1, #120	; 0x78
 8002aac:	4818      	ldr	r0, [pc, #96]	; (8002b10 <FreqMenu_DrawPresetMenu+0x10c8>)
 8002aae:	f00d ff69 	bl	8010984 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 75KHz",	120, menu_pos_y6, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8002ab2:	7abb      	ldrb	r3, [r7, #10]
 8002ab4:	b29a      	uxth	r2, r3
 8002ab6:	2300      	movs	r3, #0
 8002ab8:	9301      	str	r3, [sp, #4]
 8002aba:	2302      	movs	r3, #2
 8002abc:	9300      	str	r3, [sp, #0]
 8002abe:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8002ac2:	2178      	movs	r1, #120	; 0x78
 8002ac4:	4813      	ldr	r0, [pc, #76]	; (8002b14 <FreqMenu_DrawPresetMenu+0x10cc>)
 8002ac6:	f00d ff5d 	bl	8010984 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 100KHz", 	120, menu_pos_y7, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8002aca:	7a7b      	ldrb	r3, [r7, #9]
 8002acc:	b29a      	uxth	r2, r3
 8002ace:	2300      	movs	r3, #0
 8002ad0:	9301      	str	r3, [sp, #4]
 8002ad2:	2302      	movs	r3, #2
 8002ad4:	9300      	str	r3, [sp, #0]
 8002ad6:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8002ada:	2178      	movs	r1, #120	; 0x78
 8002adc:	480e      	ldr	r0, [pc, #56]	; (8002b18 <FreqMenu_DrawPresetMenu+0x10d0>)
 8002ade:	f00d ff51 	bl	8010984 <ILI9341_Draw_Text>
				break;
 8002ae2:	e23f      	b.n	8002f64 <FreqMenu_DrawPresetMenu+0x151c>
 8002ae4:	08015a2c 	.word	0x08015a2c
 8002ae8:	08015a34 	.word	0x08015a34
 8002aec:	08015a3c 	.word	0x08015a3c
 8002af0:	08015a44 	.word	0x08015a44
 8002af4:	08015a4c 	.word	0x08015a4c
 8002af8:	08015a54 	.word	0x08015a54
 8002afc:	08015a5c 	.word	0x08015a5c
 8002b00:	08015a64 	.word	0x08015a64
 8002b04:	08015a6c 	.word	0x08015a6c
 8002b08:	08015a74 	.word	0x08015a74
 8002b0c:	08015a7c 	.word	0x08015a7c
 8002b10:	08015a84 	.word	0x08015a84
 8002b14:	08015a8c 	.word	0x08015a8c
 8002b18:	08015a94 	.word	0x08015a94
				ILI9341_Draw_Text("- 1Hz", 		5, menu_pos_y1, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8002b1c:	7bfb      	ldrb	r3, [r7, #15]
 8002b1e:	b29a      	uxth	r2, r3
 8002b20:	2300      	movs	r3, #0
 8002b22:	9301      	str	r3, [sp, #4]
 8002b24:	2302      	movs	r3, #2
 8002b26:	9300      	str	r3, [sp, #0]
 8002b28:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8002b2c:	2105      	movs	r1, #5
 8002b2e:	48a4      	ldr	r0, [pc, #656]	; (8002dc0 <FreqMenu_DrawPresetMenu+0x1378>)
 8002b30:	f00d ff28 	bl	8010984 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 10Hz", 	5, menu_pos_y2, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8002b34:	7bbb      	ldrb	r3, [r7, #14]
 8002b36:	b29a      	uxth	r2, r3
 8002b38:	2300      	movs	r3, #0
 8002b3a:	9301      	str	r3, [sp, #4]
 8002b3c:	2302      	movs	r3, #2
 8002b3e:	9300      	str	r3, [sp, #0]
 8002b40:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8002b44:	2105      	movs	r1, #5
 8002b46:	489f      	ldr	r0, [pc, #636]	; (8002dc4 <FreqMenu_DrawPresetMenu+0x137c>)
 8002b48:	f00d ff1c 	bl	8010984 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 50Hz", 	5, menu_pos_y3, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8002b4c:	7b7b      	ldrb	r3, [r7, #13]
 8002b4e:	b29a      	uxth	r2, r3
 8002b50:	2300      	movs	r3, #0
 8002b52:	9301      	str	r3, [sp, #4]
 8002b54:	2302      	movs	r3, #2
 8002b56:	9300      	str	r3, [sp, #0]
 8002b58:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8002b5c:	2105      	movs	r1, #5
 8002b5e:	489a      	ldr	r0, [pc, #616]	; (8002dc8 <FreqMenu_DrawPresetMenu+0x1380>)
 8002b60:	f00d ff10 	bl	8010984 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 100Hz", 	5, menu_pos_y4, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8002b64:	7b3b      	ldrb	r3, [r7, #12]
 8002b66:	b29a      	uxth	r2, r3
 8002b68:	2300      	movs	r3, #0
 8002b6a:	9301      	str	r3, [sp, #4]
 8002b6c:	2302      	movs	r3, #2
 8002b6e:	9300      	str	r3, [sp, #0]
 8002b70:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8002b74:	2105      	movs	r1, #5
 8002b76:	4895      	ldr	r0, [pc, #596]	; (8002dcc <FreqMenu_DrawPresetMenu+0x1384>)
 8002b78:	f00d ff04 	bl	8010984 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 250Hz", 	5, menu_pos_y5, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8002b7c:	7afb      	ldrb	r3, [r7, #11]
 8002b7e:	b29a      	uxth	r2, r3
 8002b80:	2300      	movs	r3, #0
 8002b82:	9301      	str	r3, [sp, #4]
 8002b84:	2302      	movs	r3, #2
 8002b86:	9300      	str	r3, [sp, #0]
 8002b88:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8002b8c:	2105      	movs	r1, #5
 8002b8e:	4890      	ldr	r0, [pc, #576]	; (8002dd0 <FreqMenu_DrawPresetMenu+0x1388>)
 8002b90:	f00d fef8 	bl	8010984 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 500Hz",	5, menu_pos_y6, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8002b94:	7abb      	ldrb	r3, [r7, #10]
 8002b96:	b29a      	uxth	r2, r3
 8002b98:	2300      	movs	r3, #0
 8002b9a:	9301      	str	r3, [sp, #4]
 8002b9c:	2302      	movs	r3, #2
 8002b9e:	9300      	str	r3, [sp, #0]
 8002ba0:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8002ba4:	2105      	movs	r1, #5
 8002ba6:	488b      	ldr	r0, [pc, #556]	; (8002dd4 <FreqMenu_DrawPresetMenu+0x138c>)
 8002ba8:	f00d feec 	bl	8010984 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 750Hz", 	5, menu_pos_y7, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8002bac:	7a7b      	ldrb	r3, [r7, #9]
 8002bae:	b29a      	uxth	r2, r3
 8002bb0:	2300      	movs	r3, #0
 8002bb2:	9301      	str	r3, [sp, #4]
 8002bb4:	2302      	movs	r3, #2
 8002bb6:	9300      	str	r3, [sp, #0]
 8002bb8:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8002bbc:	2105      	movs	r1, #5
 8002bbe:	4886      	ldr	r0, [pc, #536]	; (8002dd8 <FreqMenu_DrawPresetMenu+0x1390>)
 8002bc0:	f00d fee0 	bl	8010984 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 1KHz", 	120, menu_pos_y1, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8002bc4:	7bfb      	ldrb	r3, [r7, #15]
 8002bc6:	b29a      	uxth	r2, r3
 8002bc8:	2300      	movs	r3, #0
 8002bca:	9301      	str	r3, [sp, #4]
 8002bcc:	2302      	movs	r3, #2
 8002bce:	9300      	str	r3, [sp, #0]
 8002bd0:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8002bd4:	2178      	movs	r1, #120	; 0x78
 8002bd6:	4881      	ldr	r0, [pc, #516]	; (8002ddc <FreqMenu_DrawPresetMenu+0x1394>)
 8002bd8:	f00d fed4 	bl	8010984 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 5KHz", 	120, menu_pos_y2, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8002bdc:	7bbb      	ldrb	r3, [r7, #14]
 8002bde:	b29a      	uxth	r2, r3
 8002be0:	2300      	movs	r3, #0
 8002be2:	9301      	str	r3, [sp, #4]
 8002be4:	2302      	movs	r3, #2
 8002be6:	9300      	str	r3, [sp, #0]
 8002be8:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8002bec:	2178      	movs	r1, #120	; 0x78
 8002bee:	487c      	ldr	r0, [pc, #496]	; (8002de0 <FreqMenu_DrawPresetMenu+0x1398>)
 8002bf0:	f00d fec8 	bl	8010984 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 10KHz", 	120, menu_pos_y3, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8002bf4:	7b7b      	ldrb	r3, [r7, #13]
 8002bf6:	b29a      	uxth	r2, r3
 8002bf8:	2300      	movs	r3, #0
 8002bfa:	9301      	str	r3, [sp, #4]
 8002bfc:	2302      	movs	r3, #2
 8002bfe:	9300      	str	r3, [sp, #0]
 8002c00:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8002c04:	2178      	movs	r1, #120	; 0x78
 8002c06:	4877      	ldr	r0, [pc, #476]	; (8002de4 <FreqMenu_DrawPresetMenu+0x139c>)
 8002c08:	f00d febc 	bl	8010984 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 25KHz", 	120, menu_pos_y4, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8002c0c:	7b3b      	ldrb	r3, [r7, #12]
 8002c0e:	b29a      	uxth	r2, r3
 8002c10:	2300      	movs	r3, #0
 8002c12:	9301      	str	r3, [sp, #4]
 8002c14:	2302      	movs	r3, #2
 8002c16:	9300      	str	r3, [sp, #0]
 8002c18:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8002c1c:	2178      	movs	r1, #120	; 0x78
 8002c1e:	4872      	ldr	r0, [pc, #456]	; (8002de8 <FreqMenu_DrawPresetMenu+0x13a0>)
 8002c20:	f00d feb0 	bl	8010984 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 50KHz", 	120, menu_pos_y5, HIGHLIGHT_TEXT_FGCOLOUR, 2, HIGHLIGHT_TEXT_BGCOLOUR);
 8002c24:	7afb      	ldrb	r3, [r7, #11]
 8002c26:	b29a      	uxth	r2, r3
 8002c28:	f644 43f6 	movw	r3, #19702	; 0x4cf6
 8002c2c:	9301      	str	r3, [sp, #4]
 8002c2e:	2302      	movs	r3, #2
 8002c30:	9300      	str	r3, [sp, #0]
 8002c32:	2300      	movs	r3, #0
 8002c34:	2178      	movs	r1, #120	; 0x78
 8002c36:	486d      	ldr	r0, [pc, #436]	; (8002dec <FreqMenu_DrawPresetMenu+0x13a4>)
 8002c38:	f00d fea4 	bl	8010984 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 75KHz",	120, menu_pos_y6, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8002c3c:	7abb      	ldrb	r3, [r7, #10]
 8002c3e:	b29a      	uxth	r2, r3
 8002c40:	2300      	movs	r3, #0
 8002c42:	9301      	str	r3, [sp, #4]
 8002c44:	2302      	movs	r3, #2
 8002c46:	9300      	str	r3, [sp, #0]
 8002c48:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8002c4c:	2178      	movs	r1, #120	; 0x78
 8002c4e:	4868      	ldr	r0, [pc, #416]	; (8002df0 <FreqMenu_DrawPresetMenu+0x13a8>)
 8002c50:	f00d fe98 	bl	8010984 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 100KHz", 	120, menu_pos_y7, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8002c54:	7a7b      	ldrb	r3, [r7, #9]
 8002c56:	b29a      	uxth	r2, r3
 8002c58:	2300      	movs	r3, #0
 8002c5a:	9301      	str	r3, [sp, #4]
 8002c5c:	2302      	movs	r3, #2
 8002c5e:	9300      	str	r3, [sp, #0]
 8002c60:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8002c64:	2178      	movs	r1, #120	; 0x78
 8002c66:	4863      	ldr	r0, [pc, #396]	; (8002df4 <FreqMenu_DrawPresetMenu+0x13ac>)
 8002c68:	f00d fe8c 	bl	8010984 <ILI9341_Draw_Text>
			break;
 8002c6c:	e17a      	b.n	8002f64 <FreqMenu_DrawPresetMenu+0x151c>
				ILI9341_Draw_Text("- 1Hz", 		5, menu_pos_y1, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8002c6e:	7bfb      	ldrb	r3, [r7, #15]
 8002c70:	b29a      	uxth	r2, r3
 8002c72:	2300      	movs	r3, #0
 8002c74:	9301      	str	r3, [sp, #4]
 8002c76:	2302      	movs	r3, #2
 8002c78:	9300      	str	r3, [sp, #0]
 8002c7a:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8002c7e:	2105      	movs	r1, #5
 8002c80:	484f      	ldr	r0, [pc, #316]	; (8002dc0 <FreqMenu_DrawPresetMenu+0x1378>)
 8002c82:	f00d fe7f 	bl	8010984 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 10Hz", 	5, menu_pos_y2, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8002c86:	7bbb      	ldrb	r3, [r7, #14]
 8002c88:	b29a      	uxth	r2, r3
 8002c8a:	2300      	movs	r3, #0
 8002c8c:	9301      	str	r3, [sp, #4]
 8002c8e:	2302      	movs	r3, #2
 8002c90:	9300      	str	r3, [sp, #0]
 8002c92:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8002c96:	2105      	movs	r1, #5
 8002c98:	484a      	ldr	r0, [pc, #296]	; (8002dc4 <FreqMenu_DrawPresetMenu+0x137c>)
 8002c9a:	f00d fe73 	bl	8010984 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 50Hz", 	5, menu_pos_y3, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8002c9e:	7b7b      	ldrb	r3, [r7, #13]
 8002ca0:	b29a      	uxth	r2, r3
 8002ca2:	2300      	movs	r3, #0
 8002ca4:	9301      	str	r3, [sp, #4]
 8002ca6:	2302      	movs	r3, #2
 8002ca8:	9300      	str	r3, [sp, #0]
 8002caa:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8002cae:	2105      	movs	r1, #5
 8002cb0:	4845      	ldr	r0, [pc, #276]	; (8002dc8 <FreqMenu_DrawPresetMenu+0x1380>)
 8002cb2:	f00d fe67 	bl	8010984 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 100Hz", 	5, menu_pos_y4, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8002cb6:	7b3b      	ldrb	r3, [r7, #12]
 8002cb8:	b29a      	uxth	r2, r3
 8002cba:	2300      	movs	r3, #0
 8002cbc:	9301      	str	r3, [sp, #4]
 8002cbe:	2302      	movs	r3, #2
 8002cc0:	9300      	str	r3, [sp, #0]
 8002cc2:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8002cc6:	2105      	movs	r1, #5
 8002cc8:	4840      	ldr	r0, [pc, #256]	; (8002dcc <FreqMenu_DrawPresetMenu+0x1384>)
 8002cca:	f00d fe5b 	bl	8010984 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 250Hz", 	5, menu_pos_y5, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8002cce:	7afb      	ldrb	r3, [r7, #11]
 8002cd0:	b29a      	uxth	r2, r3
 8002cd2:	2300      	movs	r3, #0
 8002cd4:	9301      	str	r3, [sp, #4]
 8002cd6:	2302      	movs	r3, #2
 8002cd8:	9300      	str	r3, [sp, #0]
 8002cda:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8002cde:	2105      	movs	r1, #5
 8002ce0:	483b      	ldr	r0, [pc, #236]	; (8002dd0 <FreqMenu_DrawPresetMenu+0x1388>)
 8002ce2:	f00d fe4f 	bl	8010984 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 500Hz",	5, menu_pos_y6, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8002ce6:	7abb      	ldrb	r3, [r7, #10]
 8002ce8:	b29a      	uxth	r2, r3
 8002cea:	2300      	movs	r3, #0
 8002cec:	9301      	str	r3, [sp, #4]
 8002cee:	2302      	movs	r3, #2
 8002cf0:	9300      	str	r3, [sp, #0]
 8002cf2:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8002cf6:	2105      	movs	r1, #5
 8002cf8:	4836      	ldr	r0, [pc, #216]	; (8002dd4 <FreqMenu_DrawPresetMenu+0x138c>)
 8002cfa:	f00d fe43 	bl	8010984 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 750Hz", 	5, menu_pos_y7, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8002cfe:	7a7b      	ldrb	r3, [r7, #9]
 8002d00:	b29a      	uxth	r2, r3
 8002d02:	2300      	movs	r3, #0
 8002d04:	9301      	str	r3, [sp, #4]
 8002d06:	2302      	movs	r3, #2
 8002d08:	9300      	str	r3, [sp, #0]
 8002d0a:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8002d0e:	2105      	movs	r1, #5
 8002d10:	4831      	ldr	r0, [pc, #196]	; (8002dd8 <FreqMenu_DrawPresetMenu+0x1390>)
 8002d12:	f00d fe37 	bl	8010984 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 1KHz", 	120, menu_pos_y1, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8002d16:	7bfb      	ldrb	r3, [r7, #15]
 8002d18:	b29a      	uxth	r2, r3
 8002d1a:	2300      	movs	r3, #0
 8002d1c:	9301      	str	r3, [sp, #4]
 8002d1e:	2302      	movs	r3, #2
 8002d20:	9300      	str	r3, [sp, #0]
 8002d22:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8002d26:	2178      	movs	r1, #120	; 0x78
 8002d28:	482c      	ldr	r0, [pc, #176]	; (8002ddc <FreqMenu_DrawPresetMenu+0x1394>)
 8002d2a:	f00d fe2b 	bl	8010984 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 5KHz", 	120, menu_pos_y2, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8002d2e:	7bbb      	ldrb	r3, [r7, #14]
 8002d30:	b29a      	uxth	r2, r3
 8002d32:	2300      	movs	r3, #0
 8002d34:	9301      	str	r3, [sp, #4]
 8002d36:	2302      	movs	r3, #2
 8002d38:	9300      	str	r3, [sp, #0]
 8002d3a:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8002d3e:	2178      	movs	r1, #120	; 0x78
 8002d40:	4827      	ldr	r0, [pc, #156]	; (8002de0 <FreqMenu_DrawPresetMenu+0x1398>)
 8002d42:	f00d fe1f 	bl	8010984 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 10KHz", 	120, menu_pos_y3, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8002d46:	7b7b      	ldrb	r3, [r7, #13]
 8002d48:	b29a      	uxth	r2, r3
 8002d4a:	2300      	movs	r3, #0
 8002d4c:	9301      	str	r3, [sp, #4]
 8002d4e:	2302      	movs	r3, #2
 8002d50:	9300      	str	r3, [sp, #0]
 8002d52:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8002d56:	2178      	movs	r1, #120	; 0x78
 8002d58:	4822      	ldr	r0, [pc, #136]	; (8002de4 <FreqMenu_DrawPresetMenu+0x139c>)
 8002d5a:	f00d fe13 	bl	8010984 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 25KHz", 	120, menu_pos_y4, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8002d5e:	7b3b      	ldrb	r3, [r7, #12]
 8002d60:	b29a      	uxth	r2, r3
 8002d62:	2300      	movs	r3, #0
 8002d64:	9301      	str	r3, [sp, #4]
 8002d66:	2302      	movs	r3, #2
 8002d68:	9300      	str	r3, [sp, #0]
 8002d6a:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8002d6e:	2178      	movs	r1, #120	; 0x78
 8002d70:	481d      	ldr	r0, [pc, #116]	; (8002de8 <FreqMenu_DrawPresetMenu+0x13a0>)
 8002d72:	f00d fe07 	bl	8010984 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 50KHz", 	120, menu_pos_y5, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8002d76:	7afb      	ldrb	r3, [r7, #11]
 8002d78:	b29a      	uxth	r2, r3
 8002d7a:	2300      	movs	r3, #0
 8002d7c:	9301      	str	r3, [sp, #4]
 8002d7e:	2302      	movs	r3, #2
 8002d80:	9300      	str	r3, [sp, #0]
 8002d82:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8002d86:	2178      	movs	r1, #120	; 0x78
 8002d88:	4818      	ldr	r0, [pc, #96]	; (8002dec <FreqMenu_DrawPresetMenu+0x13a4>)
 8002d8a:	f00d fdfb 	bl	8010984 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 75KHz",	120, menu_pos_y6, HIGHLIGHT_TEXT_FGCOLOUR, 2, HIGHLIGHT_TEXT_BGCOLOUR);
 8002d8e:	7abb      	ldrb	r3, [r7, #10]
 8002d90:	b29a      	uxth	r2, r3
 8002d92:	f644 43f6 	movw	r3, #19702	; 0x4cf6
 8002d96:	9301      	str	r3, [sp, #4]
 8002d98:	2302      	movs	r3, #2
 8002d9a:	9300      	str	r3, [sp, #0]
 8002d9c:	2300      	movs	r3, #0
 8002d9e:	2178      	movs	r1, #120	; 0x78
 8002da0:	4813      	ldr	r0, [pc, #76]	; (8002df0 <FreqMenu_DrawPresetMenu+0x13a8>)
 8002da2:	f00d fdef 	bl	8010984 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 100KHz", 	120, menu_pos_y7, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8002da6:	7a7b      	ldrb	r3, [r7, #9]
 8002da8:	b29a      	uxth	r2, r3
 8002daa:	2300      	movs	r3, #0
 8002dac:	9301      	str	r3, [sp, #4]
 8002dae:	2302      	movs	r3, #2
 8002db0:	9300      	str	r3, [sp, #0]
 8002db2:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8002db6:	2178      	movs	r1, #120	; 0x78
 8002db8:	480e      	ldr	r0, [pc, #56]	; (8002df4 <FreqMenu_DrawPresetMenu+0x13ac>)
 8002dba:	f00d fde3 	bl	8010984 <ILI9341_Draw_Text>
			break;
 8002dbe:	e0d1      	b.n	8002f64 <FreqMenu_DrawPresetMenu+0x151c>
 8002dc0:	08015a2c 	.word	0x08015a2c
 8002dc4:	08015a34 	.word	0x08015a34
 8002dc8:	08015a3c 	.word	0x08015a3c
 8002dcc:	08015a44 	.word	0x08015a44
 8002dd0:	08015a4c 	.word	0x08015a4c
 8002dd4:	08015a54 	.word	0x08015a54
 8002dd8:	08015a5c 	.word	0x08015a5c
 8002ddc:	08015a64 	.word	0x08015a64
 8002de0:	08015a6c 	.word	0x08015a6c
 8002de4:	08015a74 	.word	0x08015a74
 8002de8:	08015a7c 	.word	0x08015a7c
 8002dec:	08015a84 	.word	0x08015a84
 8002df0:	08015a8c 	.word	0x08015a8c
 8002df4:	08015a94 	.word	0x08015a94
				ILI9341_Draw_Text("- 1Hz", 		5, menu_pos_y1, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8002df8:	7bfb      	ldrb	r3, [r7, #15]
 8002dfa:	b29a      	uxth	r2, r3
 8002dfc:	2300      	movs	r3, #0
 8002dfe:	9301      	str	r3, [sp, #4]
 8002e00:	2302      	movs	r3, #2
 8002e02:	9300      	str	r3, [sp, #0]
 8002e04:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8002e08:	2105      	movs	r1, #5
 8002e0a:	4858      	ldr	r0, [pc, #352]	; (8002f6c <FreqMenu_DrawPresetMenu+0x1524>)
 8002e0c:	f00d fdba 	bl	8010984 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 10Hz", 	5, menu_pos_y2, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8002e10:	7bbb      	ldrb	r3, [r7, #14]
 8002e12:	b29a      	uxth	r2, r3
 8002e14:	2300      	movs	r3, #0
 8002e16:	9301      	str	r3, [sp, #4]
 8002e18:	2302      	movs	r3, #2
 8002e1a:	9300      	str	r3, [sp, #0]
 8002e1c:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8002e20:	2105      	movs	r1, #5
 8002e22:	4853      	ldr	r0, [pc, #332]	; (8002f70 <FreqMenu_DrawPresetMenu+0x1528>)
 8002e24:	f00d fdae 	bl	8010984 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 50Hz", 	5, menu_pos_y3, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8002e28:	7b7b      	ldrb	r3, [r7, #13]
 8002e2a:	b29a      	uxth	r2, r3
 8002e2c:	2300      	movs	r3, #0
 8002e2e:	9301      	str	r3, [sp, #4]
 8002e30:	2302      	movs	r3, #2
 8002e32:	9300      	str	r3, [sp, #0]
 8002e34:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8002e38:	2105      	movs	r1, #5
 8002e3a:	484e      	ldr	r0, [pc, #312]	; (8002f74 <FreqMenu_DrawPresetMenu+0x152c>)
 8002e3c:	f00d fda2 	bl	8010984 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 100Hz", 	5, menu_pos_y4, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8002e40:	7b3b      	ldrb	r3, [r7, #12]
 8002e42:	b29a      	uxth	r2, r3
 8002e44:	2300      	movs	r3, #0
 8002e46:	9301      	str	r3, [sp, #4]
 8002e48:	2302      	movs	r3, #2
 8002e4a:	9300      	str	r3, [sp, #0]
 8002e4c:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8002e50:	2105      	movs	r1, #5
 8002e52:	4849      	ldr	r0, [pc, #292]	; (8002f78 <FreqMenu_DrawPresetMenu+0x1530>)
 8002e54:	f00d fd96 	bl	8010984 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 250Hz", 	5, menu_pos_y5, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8002e58:	7afb      	ldrb	r3, [r7, #11]
 8002e5a:	b29a      	uxth	r2, r3
 8002e5c:	2300      	movs	r3, #0
 8002e5e:	9301      	str	r3, [sp, #4]
 8002e60:	2302      	movs	r3, #2
 8002e62:	9300      	str	r3, [sp, #0]
 8002e64:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8002e68:	2105      	movs	r1, #5
 8002e6a:	4844      	ldr	r0, [pc, #272]	; (8002f7c <FreqMenu_DrawPresetMenu+0x1534>)
 8002e6c:	f00d fd8a 	bl	8010984 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 500Hz",	5, menu_pos_y6, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8002e70:	7abb      	ldrb	r3, [r7, #10]
 8002e72:	b29a      	uxth	r2, r3
 8002e74:	2300      	movs	r3, #0
 8002e76:	9301      	str	r3, [sp, #4]
 8002e78:	2302      	movs	r3, #2
 8002e7a:	9300      	str	r3, [sp, #0]
 8002e7c:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8002e80:	2105      	movs	r1, #5
 8002e82:	483f      	ldr	r0, [pc, #252]	; (8002f80 <FreqMenu_DrawPresetMenu+0x1538>)
 8002e84:	f00d fd7e 	bl	8010984 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 750Hz", 	5, menu_pos_y7, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8002e88:	7a7b      	ldrb	r3, [r7, #9]
 8002e8a:	b29a      	uxth	r2, r3
 8002e8c:	2300      	movs	r3, #0
 8002e8e:	9301      	str	r3, [sp, #4]
 8002e90:	2302      	movs	r3, #2
 8002e92:	9300      	str	r3, [sp, #0]
 8002e94:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8002e98:	2105      	movs	r1, #5
 8002e9a:	483a      	ldr	r0, [pc, #232]	; (8002f84 <FreqMenu_DrawPresetMenu+0x153c>)
 8002e9c:	f00d fd72 	bl	8010984 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 1KHz", 	120, menu_pos_y1, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8002ea0:	7bfb      	ldrb	r3, [r7, #15]
 8002ea2:	b29a      	uxth	r2, r3
 8002ea4:	2300      	movs	r3, #0
 8002ea6:	9301      	str	r3, [sp, #4]
 8002ea8:	2302      	movs	r3, #2
 8002eaa:	9300      	str	r3, [sp, #0]
 8002eac:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8002eb0:	2178      	movs	r1, #120	; 0x78
 8002eb2:	4835      	ldr	r0, [pc, #212]	; (8002f88 <FreqMenu_DrawPresetMenu+0x1540>)
 8002eb4:	f00d fd66 	bl	8010984 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 5KHz", 	120, menu_pos_y2, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8002eb8:	7bbb      	ldrb	r3, [r7, #14]
 8002eba:	b29a      	uxth	r2, r3
 8002ebc:	2300      	movs	r3, #0
 8002ebe:	9301      	str	r3, [sp, #4]
 8002ec0:	2302      	movs	r3, #2
 8002ec2:	9300      	str	r3, [sp, #0]
 8002ec4:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8002ec8:	2178      	movs	r1, #120	; 0x78
 8002eca:	4830      	ldr	r0, [pc, #192]	; (8002f8c <FreqMenu_DrawPresetMenu+0x1544>)
 8002ecc:	f00d fd5a 	bl	8010984 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 10KHz", 	120, menu_pos_y3, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8002ed0:	7b7b      	ldrb	r3, [r7, #13]
 8002ed2:	b29a      	uxth	r2, r3
 8002ed4:	2300      	movs	r3, #0
 8002ed6:	9301      	str	r3, [sp, #4]
 8002ed8:	2302      	movs	r3, #2
 8002eda:	9300      	str	r3, [sp, #0]
 8002edc:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8002ee0:	2178      	movs	r1, #120	; 0x78
 8002ee2:	482b      	ldr	r0, [pc, #172]	; (8002f90 <FreqMenu_DrawPresetMenu+0x1548>)
 8002ee4:	f00d fd4e 	bl	8010984 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 25KHz", 	120, menu_pos_y4, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8002ee8:	7b3b      	ldrb	r3, [r7, #12]
 8002eea:	b29a      	uxth	r2, r3
 8002eec:	2300      	movs	r3, #0
 8002eee:	9301      	str	r3, [sp, #4]
 8002ef0:	2302      	movs	r3, #2
 8002ef2:	9300      	str	r3, [sp, #0]
 8002ef4:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8002ef8:	2178      	movs	r1, #120	; 0x78
 8002efa:	4826      	ldr	r0, [pc, #152]	; (8002f94 <FreqMenu_DrawPresetMenu+0x154c>)
 8002efc:	f00d fd42 	bl	8010984 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 50KHz", 	120, menu_pos_y5, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8002f00:	7afb      	ldrb	r3, [r7, #11]
 8002f02:	b29a      	uxth	r2, r3
 8002f04:	2300      	movs	r3, #0
 8002f06:	9301      	str	r3, [sp, #4]
 8002f08:	2302      	movs	r3, #2
 8002f0a:	9300      	str	r3, [sp, #0]
 8002f0c:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8002f10:	2178      	movs	r1, #120	; 0x78
 8002f12:	4821      	ldr	r0, [pc, #132]	; (8002f98 <FreqMenu_DrawPresetMenu+0x1550>)
 8002f14:	f00d fd36 	bl	8010984 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 75KHz",	120, menu_pos_y6, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8002f18:	7abb      	ldrb	r3, [r7, #10]
 8002f1a:	b29a      	uxth	r2, r3
 8002f1c:	2300      	movs	r3, #0
 8002f1e:	9301      	str	r3, [sp, #4]
 8002f20:	2302      	movs	r3, #2
 8002f22:	9300      	str	r3, [sp, #0]
 8002f24:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8002f28:	2178      	movs	r1, #120	; 0x78
 8002f2a:	481c      	ldr	r0, [pc, #112]	; (8002f9c <FreqMenu_DrawPresetMenu+0x1554>)
 8002f2c:	f00d fd2a 	bl	8010984 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 100KHz", 	120, menu_pos_y7, HIGHLIGHT_TEXT_FGCOLOUR, 2, HIGHLIGHT_TEXT_BGCOLOUR);
 8002f30:	7a7b      	ldrb	r3, [r7, #9]
 8002f32:	b29a      	uxth	r2, r3
 8002f34:	f644 43f6 	movw	r3, #19702	; 0x4cf6
 8002f38:	9301      	str	r3, [sp, #4]
 8002f3a:	2302      	movs	r3, #2
 8002f3c:	9300      	str	r3, [sp, #0]
 8002f3e:	2300      	movs	r3, #0
 8002f40:	2178      	movs	r1, #120	; 0x78
 8002f42:	4817      	ldr	r0, [pc, #92]	; (8002fa0 <FreqMenu_DrawPresetMenu+0x1558>)
 8002f44:	f00d fd1e 	bl	8010984 <ILI9341_Draw_Text>
			break;
 8002f48:	bf00      	nop
 8002f4a:	e00b      	b.n	8002f64 <FreqMenu_DrawPresetMenu+0x151c>
		ILI9341_Draw_Text("FreqMenus::FreqMenu_DrawFreqPresetMenu() Error", 		5, 180, ERR_FGCOLOUR, 1, ERR_BGCOLOUR);
 8002f4c:	f64d 03c3 	movw	r3, #55491	; 0xd8c3
 8002f50:	9301      	str	r3, [sp, #4]
 8002f52:	2301      	movs	r3, #1
 8002f54:	9300      	str	r3, [sp, #0]
 8002f56:	2300      	movs	r3, #0
 8002f58:	22b4      	movs	r2, #180	; 0xb4
 8002f5a:	2105      	movs	r1, #5
 8002f5c:	4811      	ldr	r0, [pc, #68]	; (8002fa4 <FreqMenu_DrawPresetMenu+0x155c>)
 8002f5e:	f00d fd11 	bl	8010984 <ILI9341_Draw_Text>
}
 8002f62:	e7ff      	b.n	8002f64 <FreqMenu_DrawPresetMenu+0x151c>
 8002f64:	bf00      	nop
 8002f66:	3710      	adds	r7, #16
 8002f68:	46bd      	mov	sp, r7
 8002f6a:	bd80      	pop	{r7, pc}
 8002f6c:	08015a2c 	.word	0x08015a2c
 8002f70:	08015a34 	.word	0x08015a34
 8002f74:	08015a3c 	.word	0x08015a3c
 8002f78:	08015a44 	.word	0x08015a44
 8002f7c:	08015a4c 	.word	0x08015a4c
 8002f80:	08015a54 	.word	0x08015a54
 8002f84:	08015a5c 	.word	0x08015a5c
 8002f88:	08015a64 	.word	0x08015a64
 8002f8c:	08015a6c 	.word	0x08015a6c
 8002f90:	08015a74 	.word	0x08015a74
 8002f94:	08015a7c 	.word	0x08015a7c
 8002f98:	08015a84 	.word	0x08015a84
 8002f9c:	08015a8c 	.word	0x08015a8c
 8002fa0:	08015a94 	.word	0x08015a94
 8002fa4:	08015aa0 	.word	0x08015aa0

08002fa8 <FreqMenu_DrawAdjustMenu>:
 *	@param None
 *	@retval None
 *
 */
void FreqMenu_DrawAdjustMenu()
{
 8002fa8:	b580      	push	{r7, lr}
 8002faa:	b082      	sub	sp, #8
 8002fac:	af02      	add	r7, sp, #8
	ILI9341_Draw_Text("OUT->FREQ->ADJUST", 5, 10, BREADTRAIL_FGCOLOUR, 2, BREADTRAIL_BGCOLOUR);
 8002fae:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8002fb2:	9301      	str	r3, [sp, #4]
 8002fb4:	2302      	movs	r3, #2
 8002fb6:	9300      	str	r3, [sp, #0]
 8002fb8:	2300      	movs	r3, #0
 8002fba:	220a      	movs	r2, #10
 8002fbc:	2105      	movs	r1, #5
 8002fbe:	4804      	ldr	r0, [pc, #16]	; (8002fd0 <FreqMenu_DrawAdjustMenu+0x28>)
 8002fc0:	f00d fce0 	bl	8010984 <ILI9341_Draw_Text>

	DM_DisplayFormattedOutput();
 8002fc4:	f7fd ff48 	bl	8000e58 <DM_DisplayFormattedOutput>
	//snprintf(freq, sizeof(freq), "%u", (uint8_t)FreqO_GetOutputFreq());
	if(DM_AddDigitPadding((uint16_t)FreqO_GetOutputFreq(), freq, sizeof(freq)) == 0)
		ILI9341_Draw_Text(freq, 250, 150, WHITE, 1, BLACK);
*/

}
 8002fc8:	bf00      	nop
 8002fca:	46bd      	mov	sp, r7
 8002fcc:	bd80      	pop	{r7, pc}
 8002fce:	bf00      	nop
 8002fd0:	08015ad0 	.word	0x08015ad0

08002fd4 <FreqMenu_DrawSweepMenu>:
 *	@param None
 *	@retval None
 *
 */
void FreqMenu_DrawSweepMenu()
{
 8002fd4:	b5b0      	push	{r4, r5, r7, lr}
 8002fd6:	b08e      	sub	sp, #56	; 0x38
 8002fd8:	af02      	add	r7, sp, #8
	ILI9341_Draw_Text("OUT->FREQ->SWEEP", 	5, 10, BREADTRAIL_FGCOLOUR, 2, BREADTRAIL_BGCOLOUR);
 8002fda:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8002fde:	9301      	str	r3, [sp, #4]
 8002fe0:	2302      	movs	r3, #2
 8002fe2:	9300      	str	r3, [sp, #0]
 8002fe4:	2300      	movs	r3, #0
 8002fe6:	220a      	movs	r2, #10
 8002fe8:	2105      	movs	r1, #5
 8002fea:	489f      	ldr	r0, [pc, #636]	; (8003268 <FreqMenu_DrawSweepMenu+0x294>)
 8002fec:	f00d fcca 	bl	8010984 <ILI9341_Draw_Text>
	DM_DisplayInputTriggerStatus();
 8002ff0:	f7fd ff52 	bl	8000e98 <DM_DisplayInputTriggerStatus>

	// draw enabled status


	char enabled_text[20] = "";
 8002ff4:	2300      	movs	r3, #0
 8002ff6:	61fb      	str	r3, [r7, #28]
 8002ff8:	f107 0320 	add.w	r3, r7, #32
 8002ffc:	2200      	movs	r2, #0
 8002ffe:	601a      	str	r2, [r3, #0]
 8003000:	605a      	str	r2, [r3, #4]
 8003002:	609a      	str	r2, [r3, #8]
 8003004:	60da      	str	r2, [r3, #12]
	if((SWEEP_TIMER->CR1 & TIM_CR1_CEN) == TIM_CR1_CEN)
 8003006:	4b99      	ldr	r3, [pc, #612]	; (800326c <FreqMenu_DrawSweepMenu+0x298>)
 8003008:	681b      	ldr	r3, [r3, #0]
 800300a:	f003 0301 	and.w	r3, r3, #1
 800300e:	2b01      	cmp	r3, #1
 8003010:	d109      	bne.n	8003026 <FreqMenu_DrawSweepMenu+0x52>
	{
		snprintf(enabled_text, sizeof(enabled_text), "STATUS:  RUNNING");
 8003012:	f107 031c 	add.w	r3, r7, #28
 8003016:	4a96      	ldr	r2, [pc, #600]	; (8003270 <FreqMenu_DrawSweepMenu+0x29c>)
 8003018:	461c      	mov	r4, r3
 800301a:	4615      	mov	r5, r2
 800301c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800301e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8003020:	682b      	ldr	r3, [r5, #0]
 8003022:	7023      	strb	r3, [r4, #0]
 8003024:	e008      	b.n	8003038 <FreqMenu_DrawSweepMenu+0x64>
	}
	else
	{
		snprintf(enabled_text, sizeof(enabled_text), "STATUS:  STOPPED");
 8003026:	f107 031c 	add.w	r3, r7, #28
 800302a:	4a92      	ldr	r2, [pc, #584]	; (8003274 <FreqMenu_DrawSweepMenu+0x2a0>)
 800302c:	461c      	mov	r4, r3
 800302e:	4615      	mov	r5, r2
 8003030:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8003032:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8003034:	682b      	ldr	r3, [r5, #0]
 8003036:	7023      	strb	r3, [r4, #0]
	}

	ILI9341_Draw_Text(enabled_text, 5, 40, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8003038:	f107 001c 	add.w	r0, r7, #28
 800303c:	2300      	movs	r3, #0
 800303e:	9301      	str	r3, [sp, #4]
 8003040:	2302      	movs	r3, #2
 8003042:	9300      	str	r3, [sp, #0]
 8003044:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8003048:	2228      	movs	r2, #40	; 0x28
 800304a:	2105      	movs	r1, #5
 800304c:	f00d fc9a 	bl	8010984 <ILI9341_Draw_Text>

	// draw output freq status
	char out_hertz[25] = "";
 8003050:	2300      	movs	r3, #0
 8003052:	603b      	str	r3, [r7, #0]
 8003054:	1d3b      	adds	r3, r7, #4
 8003056:	2200      	movs	r2, #0
 8003058:	601a      	str	r2, [r3, #0]
 800305a:	605a      	str	r2, [r3, #4]
 800305c:	609a      	str	r2, [r3, #8]
 800305e:	60da      	str	r2, [r3, #12]
 8003060:	611a      	str	r2, [r3, #16]
 8003062:	751a      	strb	r2, [r3, #20]
	snprintf(out_hertz, sizeof(out_hertz), "OUTPUT:");
 8003064:	463b      	mov	r3, r7
 8003066:	4a84      	ldr	r2, [pc, #528]	; (8003278 <FreqMenu_DrawSweepMenu+0x2a4>)
 8003068:	e892 0003 	ldmia.w	r2, {r0, r1}
 800306c:	e883 0003 	stmia.w	r3, {r0, r1}
	ILI9341_Draw_Text(out_hertz, 5, 60, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8003070:	4638      	mov	r0, r7
 8003072:	2300      	movs	r3, #0
 8003074:	9301      	str	r3, [sp, #4]
 8003076:	2302      	movs	r3, #2
 8003078:	9300      	str	r3, [sp, #0]
 800307a:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 800307e:	223c      	movs	r2, #60	; 0x3c
 8003080:	2105      	movs	r1, #5
 8003082:	f00d fc7f 	bl	8010984 <ILI9341_Draw_Text>

	DM_DrawGenericHertzValue(80, 60, SM_GetOutputInHertz());
 8003086:	f003 ff43 	bl	8006f10 <SM_GetOutputInHertz>
 800308a:	eef0 7a40 	vmov.f32	s15, s0
 800308e:	eeb0 0a67 	vmov.f32	s0, s15
 8003092:	213c      	movs	r1, #60	; 0x3c
 8003094:	2050      	movs	r0, #80	; 0x50
 8003096:	f7fe f8a5 	bl	80011e4 <DM_DrawGenericHertzValue>



	ILI9341_Draw_Text("SWEEP MODE:", 5, 100, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 800309a:	2300      	movs	r3, #0
 800309c:	9301      	str	r3, [sp, #4]
 800309e:	2302      	movs	r3, #2
 80030a0:	9300      	str	r3, [sp, #0]
 80030a2:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 80030a6:	2264      	movs	r2, #100	; 0x64
 80030a8:	2105      	movs	r1, #5
 80030aa:	4874      	ldr	r0, [pc, #464]	; (800327c <FreqMenu_DrawSweepMenu+0x2a8>)
 80030ac:	f00d fc6a 	bl	8010984 <ILI9341_Draw_Text>

	// get direction
	if((SWEEP_TIMER->CR1 & TIM_CR1_DIR) == TIM_CR1_DIR)
 80030b0:	4b6e      	ldr	r3, [pc, #440]	; (800326c <FreqMenu_DrawSweepMenu+0x298>)
 80030b2:	681b      	ldr	r3, [r3, #0]
 80030b4:	f003 0310 	and.w	r3, r3, #16
 80030b8:	2b10      	cmp	r3, #16
 80030ba:	d117      	bne.n	80030ec <FreqMenu_DrawSweepMenu+0x118>
	{
		ILI9341_Draw_Text("UP", 235, 100, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 80030bc:	2300      	movs	r3, #0
 80030be:	9301      	str	r3, [sp, #4]
 80030c0:	2302      	movs	r3, #2
 80030c2:	9300      	str	r3, [sp, #0]
 80030c4:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 80030c8:	2264      	movs	r2, #100	; 0x64
 80030ca:	21eb      	movs	r1, #235	; 0xeb
 80030cc:	486c      	ldr	r0, [pc, #432]	; (8003280 <FreqMenu_DrawSweepMenu+0x2ac>)
 80030ce:	f00d fc59 	bl	8010984 <ILI9341_Draw_Text>
		ILI9341_Draw_Text("DOWN", 265, 100, HIGHLIGHT_TEXT_FGCOLOUR, 2, HIGHLIGHT_TEXT_BGCOLOUR);
 80030d2:	f644 43f6 	movw	r3, #19702	; 0x4cf6
 80030d6:	9301      	str	r3, [sp, #4]
 80030d8:	2302      	movs	r3, #2
 80030da:	9300      	str	r3, [sp, #0]
 80030dc:	2300      	movs	r3, #0
 80030de:	2264      	movs	r2, #100	; 0x64
 80030e0:	f240 1109 	movw	r1, #265	; 0x109
 80030e4:	4867      	ldr	r0, [pc, #412]	; (8003284 <FreqMenu_DrawSweepMenu+0x2b0>)
 80030e6:	f00d fc4d 	bl	8010984 <ILI9341_Draw_Text>
 80030ea:	e016      	b.n	800311a <FreqMenu_DrawSweepMenu+0x146>
	}
	else
	{
		ILI9341_Draw_Text("DOWN", 265, 100, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 80030ec:	2300      	movs	r3, #0
 80030ee:	9301      	str	r3, [sp, #4]
 80030f0:	2302      	movs	r3, #2
 80030f2:	9300      	str	r3, [sp, #0]
 80030f4:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 80030f8:	2264      	movs	r2, #100	; 0x64
 80030fa:	f240 1109 	movw	r1, #265	; 0x109
 80030fe:	4861      	ldr	r0, [pc, #388]	; (8003284 <FreqMenu_DrawSweepMenu+0x2b0>)
 8003100:	f00d fc40 	bl	8010984 <ILI9341_Draw_Text>
		ILI9341_Draw_Text("UP", 235, 100, HIGHLIGHT_TEXT_FGCOLOUR, 2, HIGHLIGHT_TEXT_BGCOLOUR);
 8003104:	f644 43f6 	movw	r3, #19702	; 0x4cf6
 8003108:	9301      	str	r3, [sp, #4]
 800310a:	2302      	movs	r3, #2
 800310c:	9300      	str	r3, [sp, #0]
 800310e:	2300      	movs	r3, #0
 8003110:	2264      	movs	r2, #100	; 0x64
 8003112:	21eb      	movs	r1, #235	; 0xeb
 8003114:	485a      	ldr	r0, [pc, #360]	; (8003280 <FreqMenu_DrawSweepMenu+0x2ac>)
 8003116:	f00d fc35 	bl	8010984 <ILI9341_Draw_Text>




	// draw rate status
	if(theCurrentEncoderSweepFunction == ENCODER_SWEEP_SPEED_FUNCTION)
 800311a:	4b5b      	ldr	r3, [pc, #364]	; (8003288 <FreqMenu_DrawSweepMenu+0x2b4>)
 800311c:	781b      	ldrb	r3, [r3, #0]
 800311e:	2b00      	cmp	r3, #0
 8003120:	d10b      	bne.n	800313a <FreqMenu_DrawSweepMenu+0x166>
	{
		ILI9341_Draw_Text("SWEEP SPEED:", 5, 120, HIGHLIGHT_TEXT_FGCOLOUR, 2, HIGHLIGHT_TEXT_BGCOLOUR);
 8003122:	f644 43f6 	movw	r3, #19702	; 0x4cf6
 8003126:	9301      	str	r3, [sp, #4]
 8003128:	2302      	movs	r3, #2
 800312a:	9300      	str	r3, [sp, #0]
 800312c:	2300      	movs	r3, #0
 800312e:	2278      	movs	r2, #120	; 0x78
 8003130:	2105      	movs	r1, #5
 8003132:	4856      	ldr	r0, [pc, #344]	; (800328c <FreqMenu_DrawSweepMenu+0x2b8>)
 8003134:	f00d fc26 	bl	8010984 <ILI9341_Draw_Text>
 8003138:	e00a      	b.n	8003150 <FreqMenu_DrawSweepMenu+0x17c>
	}
	else
	{
		ILI9341_Draw_Text("SWEEP SPEED:", 5, 120, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 800313a:	2300      	movs	r3, #0
 800313c:	9301      	str	r3, [sp, #4]
 800313e:	2302      	movs	r3, #2
 8003140:	9300      	str	r3, [sp, #0]
 8003142:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8003146:	2278      	movs	r2, #120	; 0x78
 8003148:	2105      	movs	r1, #5
 800314a:	4850      	ldr	r0, [pc, #320]	; (800328c <FreqMenu_DrawSweepMenu+0x2b8>)
 800314c:	f00d fc1a 	bl	8010984 <ILI9341_Draw_Text>
	}
/*	char arr_text[25] = "";
	snprintf(arr_text, sizeof(arr_text), "%8.3f Hz", calculated_sweep_in_hertz);
	ILI9341_Draw_Text(arr_text, 182, 120, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
*/
	DM_DrawGenericHertzValue(158, 120, calculated_sweep_in_hertz);
 8003150:	4b4f      	ldr	r3, [pc, #316]	; (8003290 <FreqMenu_DrawSweepMenu+0x2bc>)
 8003152:	edd3 7a00 	vldr	s15, [r3]
 8003156:	eeb0 0a67 	vmov.f32	s0, s15
 800315a:	2178      	movs	r1, #120	; 0x78
 800315c:	209e      	movs	r0, #158	; 0x9e
 800315e:	f7fe f841 	bl	80011e4 <DM_DrawGenericHertzValue>


	// draw upper sweep bounds
	if( (theCurrentEncoderSweepFunction == ENCODER_SWEEP_LIMIT_FUNCTION) && (active_sweep_mode == SWEEP_MODE_UP) )
 8003162:	4b49      	ldr	r3, [pc, #292]	; (8003288 <FreqMenu_DrawSweepMenu+0x2b4>)
 8003164:	781b      	ldrb	r3, [r3, #0]
 8003166:	2b01      	cmp	r3, #1
 8003168:	d10f      	bne.n	800318a <FreqMenu_DrawSweepMenu+0x1b6>
 800316a:	4b4a      	ldr	r3, [pc, #296]	; (8003294 <FreqMenu_DrawSweepMenu+0x2c0>)
 800316c:	781b      	ldrb	r3, [r3, #0]
 800316e:	2b00      	cmp	r3, #0
 8003170:	d10b      	bne.n	800318a <FreqMenu_DrawSweepMenu+0x1b6>
	{
		ILI9341_Draw_Text("SWEEP UPPER:", 5, 140, HIGHLIGHT_TEXT_FGCOLOUR, 2, HIGHLIGHT_TEXT_BGCOLOUR);	// highlighted
 8003172:	f644 43f6 	movw	r3, #19702	; 0x4cf6
 8003176:	9301      	str	r3, [sp, #4]
 8003178:	2302      	movs	r3, #2
 800317a:	9300      	str	r3, [sp, #0]
 800317c:	2300      	movs	r3, #0
 800317e:	228c      	movs	r2, #140	; 0x8c
 8003180:	2105      	movs	r1, #5
 8003182:	4845      	ldr	r0, [pc, #276]	; (8003298 <FreqMenu_DrawSweepMenu+0x2c4>)
 8003184:	f00d fbfe 	bl	8010984 <ILI9341_Draw_Text>
 8003188:	e00a      	b.n	80031a0 <FreqMenu_DrawSweepMenu+0x1cc>
		//ILI9341_Draw_Arrow(ARROW_UP, 280, 120, 10, BLACK);
	}
	else
	{
		ILI9341_Draw_Text("SWEEP UPPER:", 5, 140, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 800318a:	2300      	movs	r3, #0
 800318c:	9301      	str	r3, [sp, #4]
 800318e:	2302      	movs	r3, #2
 8003190:	9300      	str	r3, [sp, #0]
 8003192:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8003196:	228c      	movs	r2, #140	; 0x8c
 8003198:	2105      	movs	r1, #5
 800319a:	483f      	ldr	r0, [pc, #252]	; (8003298 <FreqMenu_DrawSweepMenu+0x2c4>)
 800319c:	f00d fbf2 	bl	8010984 <ILI9341_Draw_Text>
	}
/*	char sweep_lower_text[20] = "";
	snprintf(sweep_lower_text, sizeof(sweep_lower_text), "%9.2f  Hz", SM_ConvertPeriodToHertz(sweep_lower_bounds_shortest_output_arr, OUTPUT_TIMER->PSC) /SM_FSAMP);
	ILI9341_Draw_Text(sweep_lower_text, 158, 140, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
*/
	DM_DrawGenericHertzValue(158, 140, SM_ConvertPeriodToHertz(sweep_lower_bounds_shortest_output_arr, OUTPUT_TIMER->PSC) /SM_FSAMP);
 80031a0:	4b3e      	ldr	r3, [pc, #248]	; (800329c <FreqMenu_DrawSweepMenu+0x2c8>)
 80031a2:	edd3 7a00 	vldr	s15, [r3]
 80031a6:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80031aa:	4b3d      	ldr	r3, [pc, #244]	; (80032a0 <FreqMenu_DrawSweepMenu+0x2cc>)
 80031ac:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80031ae:	b29b      	uxth	r3, r3
 80031b0:	4619      	mov	r1, r3
 80031b2:	ee17 0a90 	vmov	r0, s15
 80031b6:	f003 feef 	bl	8006f98 <SM_ConvertPeriodToHertz>
 80031ba:	eef0 6a40 	vmov.f32	s13, s0
 80031be:	eddf 7a39 	vldr	s15, [pc, #228]	; 80032a4 <FreqMenu_DrawSweepMenu+0x2d0>
 80031c2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80031c6:	eeb0 0a47 	vmov.f32	s0, s14
 80031ca:	218c      	movs	r1, #140	; 0x8c
 80031cc:	209e      	movs	r0, #158	; 0x9e
 80031ce:	f7fe f809 	bl	80011e4 <DM_DrawGenericHertzValue>

	// draw lower sweep bounds
	if( (theCurrentEncoderSweepFunction == ENCODER_SWEEP_LIMIT_FUNCTION) && (active_sweep_mode == SWEEP_MODE_DOWN) )
 80031d2:	4b2d      	ldr	r3, [pc, #180]	; (8003288 <FreqMenu_DrawSweepMenu+0x2b4>)
 80031d4:	781b      	ldrb	r3, [r3, #0]
 80031d6:	2b01      	cmp	r3, #1
 80031d8:	d10f      	bne.n	80031fa <FreqMenu_DrawSweepMenu+0x226>
 80031da:	4b2e      	ldr	r3, [pc, #184]	; (8003294 <FreqMenu_DrawSweepMenu+0x2c0>)
 80031dc:	781b      	ldrb	r3, [r3, #0]
 80031de:	2b01      	cmp	r3, #1
 80031e0:	d10b      	bne.n	80031fa <FreqMenu_DrawSweepMenu+0x226>
	{
		ILI9341_Draw_Text("SWEEP LOWER:", 5, 160, HIGHLIGHT_TEXT_FGCOLOUR, 2, HIGHLIGHT_TEXT_BGCOLOUR); 	// highlighted
 80031e2:	f644 43f6 	movw	r3, #19702	; 0x4cf6
 80031e6:	9301      	str	r3, [sp, #4]
 80031e8:	2302      	movs	r3, #2
 80031ea:	9300      	str	r3, [sp, #0]
 80031ec:	2300      	movs	r3, #0
 80031ee:	22a0      	movs	r2, #160	; 0xa0
 80031f0:	2105      	movs	r1, #5
 80031f2:	482d      	ldr	r0, [pc, #180]	; (80032a8 <FreqMenu_DrawSweepMenu+0x2d4>)
 80031f4:	f00d fbc6 	bl	8010984 <ILI9341_Draw_Text>
 80031f8:	e00a      	b.n	8003210 <FreqMenu_DrawSweepMenu+0x23c>
		//ILI9341_Draw_Arrow(ARROW_DOWN, 280, 130, 10, BLACK);
	}
	else
	{
		ILI9341_Draw_Text("SWEEP LOWER:", 5, 160, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 80031fa:	2300      	movs	r3, #0
 80031fc:	9301      	str	r3, [sp, #4]
 80031fe:	2302      	movs	r3, #2
 8003200:	9300      	str	r3, [sp, #0]
 8003202:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8003206:	22a0      	movs	r2, #160	; 0xa0
 8003208:	2105      	movs	r1, #5
 800320a:	4827      	ldr	r0, [pc, #156]	; (80032a8 <FreqMenu_DrawSweepMenu+0x2d4>)
 800320c:	f00d fbba 	bl	8010984 <ILI9341_Draw_Text>
	}
/*	char sweep_upper_text[20] = "";
	snprintf(sweep_upper_text, sizeof(sweep_upper_text), "%8.2f  Hz", SM_ConvertPeriodToHertz(sweep_upper_bounds_longest_output_arr, OUTPUT_TIMER->PSC) /SM_FSAMP );
	ILI9341_Draw_Text(sweep_upper_text, 170, 160, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
*/
	DM_DrawGenericHertzValue(158, 160, SM_ConvertPeriodToHertz(sweep_upper_bounds_longest_output_arr, OUTPUT_TIMER->PSC) /SM_FSAMP );
 8003210:	4b26      	ldr	r3, [pc, #152]	; (80032ac <FreqMenu_DrawSweepMenu+0x2d8>)
 8003212:	edd3 7a00 	vldr	s15, [r3]
 8003216:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800321a:	4b21      	ldr	r3, [pc, #132]	; (80032a0 <FreqMenu_DrawSweepMenu+0x2cc>)
 800321c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800321e:	b29b      	uxth	r3, r3
 8003220:	4619      	mov	r1, r3
 8003222:	ee17 0a90 	vmov	r0, s15
 8003226:	f003 feb7 	bl	8006f98 <SM_ConvertPeriodToHertz>
 800322a:	eef0 6a40 	vmov.f32	s13, s0
 800322e:	eddf 7a1d 	vldr	s15, [pc, #116]	; 80032a4 <FreqMenu_DrawSweepMenu+0x2d0>
 8003232:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003236:	eeb0 0a47 	vmov.f32	s0, s14
 800323a:	21a0      	movs	r1, #160	; 0xa0
 800323c:	209e      	movs	r0, #158	; 0x9e
 800323e:	f7fd ffd1 	bl	80011e4 <DM_DrawGenericHertzValue>

	// draw bottom menu button text
	if((SWEEP_TIMER->CR1 & TIM_CR1_CEN) == TIM_CR1_CEN)
 8003242:	4b0a      	ldr	r3, [pc, #40]	; (800326c <FreqMenu_DrawSweepMenu+0x298>)
 8003244:	681b      	ldr	r3, [r3, #0]
 8003246:	f003 0301 	and.w	r3, r3, #1
 800324a:	2b01      	cmp	r3, #1
 800324c:	d132      	bne.n	80032b4 <FreqMenu_DrawSweepMenu+0x2e0>
		ILI9341_Draw_Text("PAUSE ", 6, 213, BTN1_TEXT_FGCOLOUR, 2, BTN1_TEXT_BGCOLOUR);
 800324e:	f240 23fd 	movw	r3, #765	; 0x2fd
 8003252:	9301      	str	r3, [sp, #4]
 8003254:	2302      	movs	r3, #2
 8003256:	9300      	str	r3, [sp, #0]
 8003258:	2300      	movs	r3, #0
 800325a:	22d5      	movs	r2, #213	; 0xd5
 800325c:	2106      	movs	r1, #6
 800325e:	4814      	ldr	r0, [pc, #80]	; (80032b0 <FreqMenu_DrawSweepMenu+0x2dc>)
 8003260:	f00d fb90 	bl	8010984 <ILI9341_Draw_Text>
 8003264:	e031      	b.n	80032ca <FreqMenu_DrawSweepMenu+0x2f6>
 8003266:	bf00      	nop
 8003268:	08015ae4 	.word	0x08015ae4
 800326c:	40000c00 	.word	0x40000c00
 8003270:	08015af8 	.word	0x08015af8
 8003274:	08015b0c 	.word	0x08015b0c
 8003278:	08015b20 	.word	0x08015b20
 800327c:	08015b28 	.word	0x08015b28
 8003280:	08015b34 	.word	0x08015b34
 8003284:	08015b38 	.word	0x08015b38
 8003288:	200020d4 	.word	0x200020d4
 800328c:	08015b40 	.word	0x08015b40
 8003290:	20002168 	.word	0x20002168
 8003294:	200020d3 	.word	0x200020d3
 8003298:	08015b50 	.word	0x08015b50
 800329c:	20000120 	.word	0x20000120
 80032a0:	40013400 	.word	0x40013400
 80032a4:	42f00000 	.word	0x42f00000
 80032a8:	08015b60 	.word	0x08015b60
 80032ac:	20000124 	.word	0x20000124
 80032b0:	08015b70 	.word	0x08015b70
	else
		ILI9341_Draw_Text("RESUME", 5, 213, BTN1_TEXT_FGCOLOUR, 2, BTN1_TEXT_BGCOLOUR);
 80032b4:	f240 23fd 	movw	r3, #765	; 0x2fd
 80032b8:	9301      	str	r3, [sp, #4]
 80032ba:	2302      	movs	r3, #2
 80032bc:	9300      	str	r3, [sp, #0]
 80032be:	2300      	movs	r3, #0
 80032c0:	22d5      	movs	r2, #213	; 0xd5
 80032c2:	2105      	movs	r1, #5
 80032c4:	4824      	ldr	r0, [pc, #144]	; (8003358 <FreqMenu_DrawSweepMenu+0x384>)
 80032c6:	f00d fb5d 	bl	8010984 <ILI9341_Draw_Text>

	ILI9341_Draw_Text("SET", 	104,	204, BTN2_TEXT_FGCOLOUR, 2, BTN2_TEXT_BGCOLOUR);
 80032ca:	f241 43a2 	movw	r3, #5282	; 0x14a2
 80032ce:	9301      	str	r3, [sp, #4]
 80032d0:	2302      	movs	r3, #2
 80032d2:	9300      	str	r3, [sp, #0]
 80032d4:	2300      	movs	r3, #0
 80032d6:	22cc      	movs	r2, #204	; 0xcc
 80032d8:	2168      	movs	r1, #104	; 0x68
 80032da:	4820      	ldr	r0, [pc, #128]	; (800335c <FreqMenu_DrawSweepMenu+0x388>)
 80032dc:	f00d fb52 	bl	8010984 <ILI9341_Draw_Text>
	ILI9341_Draw_Text("MODE",	97, 	222, BTN2_TEXT_FGCOLOUR, 2, BTN2_TEXT_BGCOLOUR);
 80032e0:	f241 43a2 	movw	r3, #5282	; 0x14a2
 80032e4:	9301      	str	r3, [sp, #4]
 80032e6:	2302      	movs	r3, #2
 80032e8:	9300      	str	r3, [sp, #0]
 80032ea:	2300      	movs	r3, #0
 80032ec:	22de      	movs	r2, #222	; 0xde
 80032ee:	2161      	movs	r1, #97	; 0x61
 80032f0:	481b      	ldr	r0, [pc, #108]	; (8003360 <FreqMenu_DrawSweepMenu+0x38c>)
 80032f2:	f00d fb47 	bl	8010984 <ILI9341_Draw_Text>

	ILI9341_Draw_Text("SET", 	183,	204, BTN3_TEXT_FGCOLOUR, 2, BTN3_TEXT_BGCOLOUR);
 80032f6:	f64f 73e0 	movw	r3, #65504	; 0xffe0
 80032fa:	9301      	str	r3, [sp, #4]
 80032fc:	2302      	movs	r3, #2
 80032fe:	9300      	str	r3, [sp, #0]
 8003300:	2300      	movs	r3, #0
 8003302:	22cc      	movs	r2, #204	; 0xcc
 8003304:	21b7      	movs	r1, #183	; 0xb7
 8003306:	4815      	ldr	r0, [pc, #84]	; (800335c <FreqMenu_DrawSweepMenu+0x388>)
 8003308:	f00d fb3c 	bl	8010984 <ILI9341_Draw_Text>
	ILI9341_Draw_Text("SPEED",	173, 	222, BTN3_TEXT_FGCOLOUR, 2, BTN3_TEXT_BGCOLOUR);
 800330c:	f64f 73e0 	movw	r3, #65504	; 0xffe0
 8003310:	9301      	str	r3, [sp, #4]
 8003312:	2302      	movs	r3, #2
 8003314:	9300      	str	r3, [sp, #0]
 8003316:	2300      	movs	r3, #0
 8003318:	22de      	movs	r2, #222	; 0xde
 800331a:	21ad      	movs	r1, #173	; 0xad
 800331c:	4811      	ldr	r0, [pc, #68]	; (8003364 <FreqMenu_DrawSweepMenu+0x390>)
 800331e:	f00d fb31 	bl	8010984 <ILI9341_Draw_Text>

	ILI9341_Draw_Text("SET", 	263, 	204, BTN4_TEXT_FGCOLOUR, 2, BTN4_TEXT_BGCOLOUR);
 8003322:	f64d 03c3 	movw	r3, #55491	; 0xd8c3
 8003326:	9301      	str	r3, [sp, #4]
 8003328:	2302      	movs	r3, #2
 800332a:	9300      	str	r3, [sp, #0]
 800332c:	2300      	movs	r3, #0
 800332e:	22cc      	movs	r2, #204	; 0xcc
 8003330:	f240 1107 	movw	r1, #263	; 0x107
 8003334:	4809      	ldr	r0, [pc, #36]	; (800335c <FreqMenu_DrawSweepMenu+0x388>)
 8003336:	f00d fb25 	bl	8010984 <ILI9341_Draw_Text>
	ILI9341_Draw_Text("LIMIT", 	252, 	222, BTN4_TEXT_FGCOLOUR, 2, BTN4_TEXT_BGCOLOUR);
 800333a:	f64d 03c3 	movw	r3, #55491	; 0xd8c3
 800333e:	9301      	str	r3, [sp, #4]
 8003340:	2302      	movs	r3, #2
 8003342:	9300      	str	r3, [sp, #0]
 8003344:	2300      	movs	r3, #0
 8003346:	22de      	movs	r2, #222	; 0xde
 8003348:	21fc      	movs	r1, #252	; 0xfc
 800334a:	4807      	ldr	r0, [pc, #28]	; (8003368 <FreqMenu_DrawSweepMenu+0x394>)
 800334c:	f00d fb1a 	bl	8010984 <ILI9341_Draw_Text>
}
 8003350:	bf00      	nop
 8003352:	3730      	adds	r7, #48	; 0x30
 8003354:	46bd      	mov	sp, r7
 8003356:	bdb0      	pop	{r4, r5, r7, pc}
 8003358:	08015b78 	.word	0x08015b78
 800335c:	08015b80 	.word	0x08015b80
 8003360:	08015b84 	.word	0x08015b84
 8003364:	08015b8c 	.word	0x08015b8c
 8003368:	08015b94 	.word	0x08015b94

0800336c <FreqMenu_DrawPrescalerMenu>:
 *	@param None
 *	@retval None
 *
 */
void FreqMenu_DrawPrescalerMenu()
{
 800336c:	b580      	push	{r7, lr}
 800336e:	b082      	sub	sp, #8
 8003370:	af02      	add	r7, sp, #8
	ILI9341_Draw_Text("OUT->FREQ->PSC", 5, 10, BREADTRAIL_FGCOLOUR, 2, BREADTRAIL_BGCOLOUR);
 8003372:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8003376:	9301      	str	r3, [sp, #4]
 8003378:	2302      	movs	r3, #2
 800337a:	9300      	str	r3, [sp, #0]
 800337c:	2300      	movs	r3, #0
 800337e:	220a      	movs	r2, #10
 8003380:	2105      	movs	r1, #5
 8003382:	4804      	ldr	r0, [pc, #16]	; (8003394 <FreqMenu_DrawPrescalerMenu+0x28>)
 8003384:	f00d fafe 	bl	8010984 <ILI9341_Draw_Text>

	DM_DisplayFormattedOutput();
 8003388:	f7fd fd66 	bl	8000e58 <DM_DisplayFormattedOutput>

}
 800338c:	bf00      	nop
 800338e:	46bd      	mov	sp, r7
 8003390:	bd80      	pop	{r7, pc}
 8003392:	bf00      	nop
 8003394:	08015b9c 	.word	0x08015b9c

08003398 <FuncMenu_DrawMenu>:
			Func_Aux_Menu_State,
 *	@retval None
 *
 */
void FuncMenu_DrawMenu(eSystemState pMenu)
{
 8003398:	b580      	push	{r7, lr}
 800339a:	b082      	sub	sp, #8
 800339c:	af00      	add	r7, sp, #0
 800339e:	4603      	mov	r3, r0
 80033a0:	71fb      	strb	r3, [r7, #7]
	switch(pMenu)
 80033a2:	79fb      	ldrb	r3, [r7, #7]
 80033a4:	2b04      	cmp	r3, #4
 80033a6:	d007      	beq.n	80033b8 <FuncMenu_DrawMenu+0x20>
 80033a8:	2b05      	cmp	r3, #5
 80033aa:	d009      	beq.n	80033c0 <FuncMenu_DrawMenu+0x28>
 80033ac:	2b03      	cmp	r3, #3
 80033ae:	d000      	beq.n	80033b2 <FuncMenu_DrawMenu+0x1a>
		case Func_Aux_Menu_State:
			FuncMenu_DrawOutputMenu(AUX_CHANNEL);
			break;

		default:
			break;
 80033b0:	e00a      	b.n	80033c8 <FuncMenu_DrawMenu+0x30>
			FuncMenu_DrawMainMenu();
 80033b2:	f000 f80d 	bl	80033d0 <FuncMenu_DrawMainMenu>
			break;
 80033b6:	e007      	b.n	80033c8 <FuncMenu_DrawMenu+0x30>
			FuncMenu_DrawOutputMenu(SIGNAL_CHANNEL);
 80033b8:	2000      	movs	r0, #0
 80033ba:	f000 f851 	bl	8003460 <FuncMenu_DrawOutputMenu>
			break;
 80033be:	e003      	b.n	80033c8 <FuncMenu_DrawMenu+0x30>
			FuncMenu_DrawOutputMenu(AUX_CHANNEL);
 80033c0:	2001      	movs	r0, #1
 80033c2:	f000 f84d 	bl	8003460 <FuncMenu_DrawOutputMenu>
			break;
 80033c6:	bf00      	nop

	}
}
 80033c8:	bf00      	nop
 80033ca:	3708      	adds	r7, #8
 80033cc:	46bd      	mov	sp, r7
 80033ce:	bd80      	pop	{r7, pc}

080033d0 <FuncMenu_DrawMainMenu>:
 *	@param None
 *	@retval None
 *
 */
void FuncMenu_DrawMainMenu()
{
 80033d0:	b580      	push	{r7, lr}
 80033d2:	b082      	sub	sp, #8
 80033d4:	af02      	add	r7, sp, #8
	ILI9341_Draw_Text("OUT->FUNC", 	10, 10, BREADTRAIL_FGCOLOUR, 2, BREADTRAIL_BGCOLOUR);
 80033d6:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80033da:	9301      	str	r3, [sp, #4]
 80033dc:	2302      	movs	r3, #2
 80033de:	9300      	str	r3, [sp, #0]
 80033e0:	2300      	movs	r3, #0
 80033e2:	220a      	movs	r2, #10
 80033e4:	210a      	movs	r1, #10
 80033e6:	481a      	ldr	r0, [pc, #104]	; (8003450 <FuncMenu_DrawMainMenu+0x80>)
 80033e8:	f00d facc 	bl	8010984 <ILI9341_Draw_Text>

	DM_DisplayFormattedOutput();
 80033ec:	f7fd fd34 	bl	8000e58 <DM_DisplayFormattedOutput>

 	// coloured menu btn labels
	ILI9341_Draw_Text("SIGNAL", 5,   210, BTN1_TEXT_FGCOLOUR, 2, BTN1_TEXT_BGCOLOUR);
 80033f0:	f240 23fd 	movw	r3, #765	; 0x2fd
 80033f4:	9301      	str	r3, [sp, #4]
 80033f6:	2302      	movs	r3, #2
 80033f8:	9300      	str	r3, [sp, #0]
 80033fa:	2300      	movs	r3, #0
 80033fc:	22d2      	movs	r2, #210	; 0xd2
 80033fe:	2105      	movs	r1, #5
 8003400:	4814      	ldr	r0, [pc, #80]	; (8003454 <FuncMenu_DrawMainMenu+0x84>)
 8003402:	f00d fabf 	bl	8010984 <ILI9341_Draw_Text>
	ILI9341_Draw_Text("AUX", 	100,  210, BTN2_TEXT_FGCOLOUR, 2, BTN2_TEXT_BGCOLOUR);
 8003406:	f241 43a2 	movw	r3, #5282	; 0x14a2
 800340a:	9301      	str	r3, [sp, #4]
 800340c:	2302      	movs	r3, #2
 800340e:	9300      	str	r3, [sp, #0]
 8003410:	2300      	movs	r3, #0
 8003412:	22d2      	movs	r2, #210	; 0xd2
 8003414:	2164      	movs	r1, #100	; 0x64
 8003416:	4810      	ldr	r0, [pc, #64]	; (8003458 <FuncMenu_DrawMainMenu+0x88>)
 8003418:	f00d fab4 	bl	8010984 <ILI9341_Draw_Text>
	ILI9341_Draw_Text("    ", 	175, 210, BTN3_TEXT_FGCOLOUR, 2, BTN3_TEXT_BGCOLOUR);
 800341c:	f64f 73e0 	movw	r3, #65504	; 0xffe0
 8003420:	9301      	str	r3, [sp, #4]
 8003422:	2302      	movs	r3, #2
 8003424:	9300      	str	r3, [sp, #0]
 8003426:	2300      	movs	r3, #0
 8003428:	22d2      	movs	r2, #210	; 0xd2
 800342a:	21af      	movs	r1, #175	; 0xaf
 800342c:	480b      	ldr	r0, [pc, #44]	; (800345c <FuncMenu_DrawMainMenu+0x8c>)
 800342e:	f00d faa9 	bl	8010984 <ILI9341_Draw_Text>
	ILI9341_Draw_Text("    ", 	260, 210, BTN4_TEXT_FGCOLOUR, 2, BTN4_TEXT_BGCOLOUR);
 8003432:	f64d 03c3 	movw	r3, #55491	; 0xd8c3
 8003436:	9301      	str	r3, [sp, #4]
 8003438:	2302      	movs	r3, #2
 800343a:	9300      	str	r3, [sp, #0]
 800343c:	2300      	movs	r3, #0
 800343e:	22d2      	movs	r2, #210	; 0xd2
 8003440:	f44f 7182 	mov.w	r1, #260	; 0x104
 8003444:	4805      	ldr	r0, [pc, #20]	; (800345c <FuncMenu_DrawMainMenu+0x8c>)
 8003446:	f00d fa9d 	bl	8010984 <ILI9341_Draw_Text>
}
 800344a:	bf00      	nop
 800344c:	46bd      	mov	sp, r7
 800344e:	bd80      	pop	{r7, pc}
 8003450:	08015bac 	.word	0x08015bac
 8003454:	08015bb8 	.word	0x08015bb8
 8003458:	08015bc0 	.word	0x08015bc0
 800345c:	08015bc4 	.word	0x08015bc4

08003460 <FuncMenu_DrawOutputMenu>:
 *	@param None
 *	@retval None
 *
 */
void FuncMenu_DrawOutputMenu(eOutputChannel_t pOutChan)
{
 8003460:	b590      	push	{r4, r7, lr}
 8003462:	b089      	sub	sp, #36	; 0x24
 8003464:	af02      	add	r7, sp, #8
 8003466:	4603      	mov	r3, r0
 8003468:	71fb      	strb	r3, [r7, #7]
	if(pOutChan)
 800346a:	79fb      	ldrb	r3, [r7, #7]
 800346c:	2b00      	cmp	r3, #0
 800346e:	d00b      	beq.n	8003488 <FuncMenu_DrawOutputMenu+0x28>
		ILI9341_Draw_Text("OUT->FUNC->AUX", 	10, 10, BREADTRAIL_FGCOLOUR, 2, BREADTRAIL_BGCOLOUR);
 8003470:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8003474:	9301      	str	r3, [sp, #4]
 8003476:	2302      	movs	r3, #2
 8003478:	9300      	str	r3, [sp, #0]
 800347a:	2300      	movs	r3, #0
 800347c:	220a      	movs	r2, #10
 800347e:	210a      	movs	r1, #10
 8003480:	4896      	ldr	r0, [pc, #600]	; (80036dc <FuncMenu_DrawOutputMenu+0x27c>)
 8003482:	f00d fa7f 	bl	8010984 <ILI9341_Draw_Text>
 8003486:	e00a      	b.n	800349e <FuncMenu_DrawOutputMenu+0x3e>
	else
		ILI9341_Draw_Text("OUT->FUNC->SIG", 	10, 10, BREADTRAIL_FGCOLOUR, 2, BREADTRAIL_BGCOLOUR);
 8003488:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800348c:	9301      	str	r3, [sp, #4]
 800348e:	2302      	movs	r3, #2
 8003490:	9300      	str	r3, [sp, #0]
 8003492:	2300      	movs	r3, #0
 8003494:	220a      	movs	r2, #10
 8003496:	210a      	movs	r1, #10
 8003498:	4891      	ldr	r0, [pc, #580]	; (80036e0 <FuncMenu_DrawOutputMenu+0x280>)
 800349a:	f00d fa73 	bl	8010984 <ILI9341_Draw_Text>

	//FunctionProfile_t *func_profileTmp = FuncO_GetSignalFPresetObject();
	FunctionProfile_t *func_profileTmp = SM_GetOutputChannel(pOutChan)->func_profile;
 800349e:	79fb      	ldrb	r3, [r7, #7]
 80034a0:	4618      	mov	r0, r3
 80034a2:	f003 fa9d 	bl	80069e0 <SM_GetOutputChannel>
 80034a6:	4603      	mov	r3, r0
 80034a8:	f8d3 31e8 	ldr.w	r3, [r3, #488]	; 0x1e8
 80034ac:	617b      	str	r3, [r7, #20]
	if(func_profileTmp)
 80034ae:	697b      	ldr	r3, [r7, #20]
 80034b0:	2b00      	cmp	r3, #0
 80034b2:	f000 8424 	beq.w	8003cfe <FuncMenu_DrawOutputMenu+0x89e>
	{
		switch(func_profileTmp->func)
 80034b6:	697b      	ldr	r3, [r7, #20]
 80034b8:	781b      	ldrb	r3, [r3, #0]
 80034ba:	2b06      	cmp	r3, #6
 80034bc:	f200 841f 	bhi.w	8003cfe <FuncMenu_DrawOutputMenu+0x89e>
 80034c0:	a201      	add	r2, pc, #4	; (adr r2, 80034c8 <FuncMenu_DrawOutputMenu+0x68>)
 80034c2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80034c6:	bf00      	nop
 80034c8:	080034e5 	.word	0x080034e5
 80034cc:	080035e1 	.word	0x080035e1
 80034d0:	08003705 	.word	0x08003705
 80034d4:	08003801 	.word	0x08003801
 80034d8:	080038fd 	.word	0x080038fd
 80034dc:	08003a35 	.word	0x08003a35
 80034e0:	08003b47 	.word	0x08003b47
		{
			case SINE_FUNC_MODE:
				ILI9341_Draw_Text("- SINE", 	10, 50,  HIGHLIGHT_TEXT_FGCOLOUR, 2, HIGHLIGHT_TEXT_BGCOLOUR);
 80034e4:	f644 43f6 	movw	r3, #19702	; 0x4cf6
 80034e8:	9301      	str	r3, [sp, #4]
 80034ea:	2302      	movs	r3, #2
 80034ec:	9300      	str	r3, [sp, #0]
 80034ee:	2300      	movs	r3, #0
 80034f0:	2232      	movs	r2, #50	; 0x32
 80034f2:	210a      	movs	r1, #10
 80034f4:	487b      	ldr	r0, [pc, #492]	; (80036e4 <FuncMenu_DrawOutputMenu+0x284>)
 80034f6:	f00d fa45 	bl	8010984 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- SQUARE", 	10, 70,  NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 80034fa:	2300      	movs	r3, #0
 80034fc:	9301      	str	r3, [sp, #4]
 80034fe:	2302      	movs	r3, #2
 8003500:	9300      	str	r3, [sp, #0]
 8003502:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8003506:	2246      	movs	r2, #70	; 0x46
 8003508:	210a      	movs	r1, #10
 800350a:	4877      	ldr	r0, [pc, #476]	; (80036e8 <FuncMenu_DrawOutputMenu+0x288>)
 800350c:	f00d fa3a 	bl	8010984 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- SAW", 		10, 90,  NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8003510:	2300      	movs	r3, #0
 8003512:	9301      	str	r3, [sp, #4]
 8003514:	2302      	movs	r3, #2
 8003516:	9300      	str	r3, [sp, #0]
 8003518:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 800351c:	225a      	movs	r2, #90	; 0x5a
 800351e:	210a      	movs	r1, #10
 8003520:	4872      	ldr	r0, [pc, #456]	; (80036ec <FuncMenu_DrawOutputMenu+0x28c>)
 8003522:	f00d fa2f 	bl	8010984 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- REV SAW", 	10, 110, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8003526:	2300      	movs	r3, #0
 8003528:	9301      	str	r3, [sp, #4]
 800352a:	2302      	movs	r3, #2
 800352c:	9300      	str	r3, [sp, #0]
 800352e:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8003532:	226e      	movs	r2, #110	; 0x6e
 8003534:	210a      	movs	r1, #10
 8003536:	486e      	ldr	r0, [pc, #440]	; (80036f0 <FuncMenu_DrawOutputMenu+0x290>)
 8003538:	f00d fa24 	bl	8010984 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- TRIANGLE",	10, 130, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 800353c:	2300      	movs	r3, #0
 800353e:	9301      	str	r3, [sp, #4]
 8003540:	2302      	movs	r3, #2
 8003542:	9300      	str	r3, [sp, #0]
 8003544:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8003548:	2282      	movs	r2, #130	; 0x82
 800354a:	210a      	movs	r1, #10
 800354c:	4869      	ldr	r0, [pc, #420]	; (80036f4 <FuncMenu_DrawOutputMenu+0x294>)
 800354e:	f00d fa19 	bl	8010984 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- UNIT", 	10, 150, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8003552:	2300      	movs	r3, #0
 8003554:	9301      	str	r3, [sp, #4]
 8003556:	2302      	movs	r3, #2
 8003558:	9300      	str	r3, [sp, #0]
 800355a:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 800355e:	2296      	movs	r2, #150	; 0x96
 8003560:	210a      	movs	r1, #10
 8003562:	4865      	ldr	r0, [pc, #404]	; (80036f8 <FuncMenu_DrawOutputMenu+0x298>)
 8003564:	f00d fa0e 	bl	8010984 <ILI9341_Draw_Text>

				if(pOutChan)
 8003568:	79fb      	ldrb	r3, [r7, #7]
 800356a:	2b00      	cmp	r3, #0
 800356c:	d00a      	beq.n	8003584 <FuncMenu_DrawOutputMenu+0x124>
					ILI9341_Draw_Text("- PWM", 		10, 170, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 800356e:	2300      	movs	r3, #0
 8003570:	9301      	str	r3, [sp, #4]
 8003572:	2302      	movs	r3, #2
 8003574:	9300      	str	r3, [sp, #0]
 8003576:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 800357a:	22aa      	movs	r2, #170	; 0xaa
 800357c:	210a      	movs	r1, #10
 800357e:	485f      	ldr	r0, [pc, #380]	; (80036fc <FuncMenu_DrawOutputMenu+0x29c>)
 8003580:	f00d fa00 	bl	8010984 <ILI9341_Draw_Text>

				// coloured menu btn labels
				ILI9341_Draw_Text("    ", 5,   210, BTN1_TEXT_FGCOLOUR, 2, BTN1_TEXT_BGCOLOUR);
 8003584:	f240 23fd 	movw	r3, #765	; 0x2fd
 8003588:	9301      	str	r3, [sp, #4]
 800358a:	2302      	movs	r3, #2
 800358c:	9300      	str	r3, [sp, #0]
 800358e:	2300      	movs	r3, #0
 8003590:	22d2      	movs	r2, #210	; 0xd2
 8003592:	2105      	movs	r1, #5
 8003594:	485a      	ldr	r0, [pc, #360]	; (8003700 <FuncMenu_DrawOutputMenu+0x2a0>)
 8003596:	f00d f9f5 	bl	8010984 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("    ", 	97,  210, BTN2_TEXT_FGCOLOUR, 2, BTN2_TEXT_BGCOLOUR);
 800359a:	f241 43a2 	movw	r3, #5282	; 0x14a2
 800359e:	9301      	str	r3, [sp, #4]
 80035a0:	2302      	movs	r3, #2
 80035a2:	9300      	str	r3, [sp, #0]
 80035a4:	2300      	movs	r3, #0
 80035a6:	22d2      	movs	r2, #210	; 0xd2
 80035a8:	2161      	movs	r1, #97	; 0x61
 80035aa:	4855      	ldr	r0, [pc, #340]	; (8003700 <FuncMenu_DrawOutputMenu+0x2a0>)
 80035ac:	f00d f9ea 	bl	8010984 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("    ", 	175, 210, BTN3_TEXT_FGCOLOUR, 2, BTN3_TEXT_BGCOLOUR);
 80035b0:	f64f 73e0 	movw	r3, #65504	; 0xffe0
 80035b4:	9301      	str	r3, [sp, #4]
 80035b6:	2302      	movs	r3, #2
 80035b8:	9300      	str	r3, [sp, #0]
 80035ba:	2300      	movs	r3, #0
 80035bc:	22d2      	movs	r2, #210	; 0xd2
 80035be:	21af      	movs	r1, #175	; 0xaf
 80035c0:	484f      	ldr	r0, [pc, #316]	; (8003700 <FuncMenu_DrawOutputMenu+0x2a0>)
 80035c2:	f00d f9df 	bl	8010984 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("    ", 	260, 210, BTN4_TEXT_FGCOLOUR, 2, BTN4_TEXT_BGCOLOUR);
 80035c6:	f64d 03c3 	movw	r3, #55491	; 0xd8c3
 80035ca:	9301      	str	r3, [sp, #4]
 80035cc:	2302      	movs	r3, #2
 80035ce:	9300      	str	r3, [sp, #0]
 80035d0:	2300      	movs	r3, #0
 80035d2:	22d2      	movs	r2, #210	; 0xd2
 80035d4:	f44f 7182 	mov.w	r1, #260	; 0x104
 80035d8:	4849      	ldr	r0, [pc, #292]	; (8003700 <FuncMenu_DrawOutputMenu+0x2a0>)
 80035da:	f00d f9d3 	bl	8010984 <ILI9341_Draw_Text>
				break;
 80035de:	e38e      	b.n	8003cfe <FuncMenu_DrawOutputMenu+0x89e>
			case SQUARE_FUNC_MODE:
				ILI9341_Draw_Text("- SINE", 	10, 50,  NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 80035e0:	2300      	movs	r3, #0
 80035e2:	9301      	str	r3, [sp, #4]
 80035e4:	2302      	movs	r3, #2
 80035e6:	9300      	str	r3, [sp, #0]
 80035e8:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 80035ec:	2232      	movs	r2, #50	; 0x32
 80035ee:	210a      	movs	r1, #10
 80035f0:	483c      	ldr	r0, [pc, #240]	; (80036e4 <FuncMenu_DrawOutputMenu+0x284>)
 80035f2:	f00d f9c7 	bl	8010984 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- SQUARE", 	10, 70,  HIGHLIGHT_TEXT_FGCOLOUR, 2, HIGHLIGHT_TEXT_BGCOLOUR);
 80035f6:	f644 43f6 	movw	r3, #19702	; 0x4cf6
 80035fa:	9301      	str	r3, [sp, #4]
 80035fc:	2302      	movs	r3, #2
 80035fe:	9300      	str	r3, [sp, #0]
 8003600:	2300      	movs	r3, #0
 8003602:	2246      	movs	r2, #70	; 0x46
 8003604:	210a      	movs	r1, #10
 8003606:	4838      	ldr	r0, [pc, #224]	; (80036e8 <FuncMenu_DrawOutputMenu+0x288>)
 8003608:	f00d f9bc 	bl	8010984 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- SAW", 		10, 90,  NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 800360c:	2300      	movs	r3, #0
 800360e:	9301      	str	r3, [sp, #4]
 8003610:	2302      	movs	r3, #2
 8003612:	9300      	str	r3, [sp, #0]
 8003614:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8003618:	225a      	movs	r2, #90	; 0x5a
 800361a:	210a      	movs	r1, #10
 800361c:	4833      	ldr	r0, [pc, #204]	; (80036ec <FuncMenu_DrawOutputMenu+0x28c>)
 800361e:	f00d f9b1 	bl	8010984 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- REV SAW", 	10, 110, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8003622:	2300      	movs	r3, #0
 8003624:	9301      	str	r3, [sp, #4]
 8003626:	2302      	movs	r3, #2
 8003628:	9300      	str	r3, [sp, #0]
 800362a:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 800362e:	226e      	movs	r2, #110	; 0x6e
 8003630:	210a      	movs	r1, #10
 8003632:	482f      	ldr	r0, [pc, #188]	; (80036f0 <FuncMenu_DrawOutputMenu+0x290>)
 8003634:	f00d f9a6 	bl	8010984 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- TRIANGLE",	10, 130, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8003638:	2300      	movs	r3, #0
 800363a:	9301      	str	r3, [sp, #4]
 800363c:	2302      	movs	r3, #2
 800363e:	9300      	str	r3, [sp, #0]
 8003640:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8003644:	2282      	movs	r2, #130	; 0x82
 8003646:	210a      	movs	r1, #10
 8003648:	482a      	ldr	r0, [pc, #168]	; (80036f4 <FuncMenu_DrawOutputMenu+0x294>)
 800364a:	f00d f99b 	bl	8010984 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- UNIT", 	10, 150, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 800364e:	2300      	movs	r3, #0
 8003650:	9301      	str	r3, [sp, #4]
 8003652:	2302      	movs	r3, #2
 8003654:	9300      	str	r3, [sp, #0]
 8003656:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 800365a:	2296      	movs	r2, #150	; 0x96
 800365c:	210a      	movs	r1, #10
 800365e:	4826      	ldr	r0, [pc, #152]	; (80036f8 <FuncMenu_DrawOutputMenu+0x298>)
 8003660:	f00d f990 	bl	8010984 <ILI9341_Draw_Text>

				if(pOutChan)
 8003664:	79fb      	ldrb	r3, [r7, #7]
 8003666:	2b00      	cmp	r3, #0
 8003668:	d00a      	beq.n	8003680 <FuncMenu_DrawOutputMenu+0x220>
					ILI9341_Draw_Text("- PWM", 		10, 170, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 800366a:	2300      	movs	r3, #0
 800366c:	9301      	str	r3, [sp, #4]
 800366e:	2302      	movs	r3, #2
 8003670:	9300      	str	r3, [sp, #0]
 8003672:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8003676:	22aa      	movs	r2, #170	; 0xaa
 8003678:	210a      	movs	r1, #10
 800367a:	4820      	ldr	r0, [pc, #128]	; (80036fc <FuncMenu_DrawOutputMenu+0x29c>)
 800367c:	f00d f982 	bl	8010984 <ILI9341_Draw_Text>

				// coloured menu btn labels
				ILI9341_Draw_Text("    ", 5,   210, BTN1_TEXT_FGCOLOUR, 2, BTN1_TEXT_BGCOLOUR);
 8003680:	f240 23fd 	movw	r3, #765	; 0x2fd
 8003684:	9301      	str	r3, [sp, #4]
 8003686:	2302      	movs	r3, #2
 8003688:	9300      	str	r3, [sp, #0]
 800368a:	2300      	movs	r3, #0
 800368c:	22d2      	movs	r2, #210	; 0xd2
 800368e:	2105      	movs	r1, #5
 8003690:	481b      	ldr	r0, [pc, #108]	; (8003700 <FuncMenu_DrawOutputMenu+0x2a0>)
 8003692:	f00d f977 	bl	8010984 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("    ", 	97,  210, BTN2_TEXT_FGCOLOUR, 2, BTN2_TEXT_BGCOLOUR);
 8003696:	f241 43a2 	movw	r3, #5282	; 0x14a2
 800369a:	9301      	str	r3, [sp, #4]
 800369c:	2302      	movs	r3, #2
 800369e:	9300      	str	r3, [sp, #0]
 80036a0:	2300      	movs	r3, #0
 80036a2:	22d2      	movs	r2, #210	; 0xd2
 80036a4:	2161      	movs	r1, #97	; 0x61
 80036a6:	4816      	ldr	r0, [pc, #88]	; (8003700 <FuncMenu_DrawOutputMenu+0x2a0>)
 80036a8:	f00d f96c 	bl	8010984 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("    ", 	175, 210, BTN3_TEXT_FGCOLOUR, 2, BTN3_TEXT_BGCOLOUR);
 80036ac:	f64f 73e0 	movw	r3, #65504	; 0xffe0
 80036b0:	9301      	str	r3, [sp, #4]
 80036b2:	2302      	movs	r3, #2
 80036b4:	9300      	str	r3, [sp, #0]
 80036b6:	2300      	movs	r3, #0
 80036b8:	22d2      	movs	r2, #210	; 0xd2
 80036ba:	21af      	movs	r1, #175	; 0xaf
 80036bc:	4810      	ldr	r0, [pc, #64]	; (8003700 <FuncMenu_DrawOutputMenu+0x2a0>)
 80036be:	f00d f961 	bl	8010984 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("    ", 	260, 210, BTN4_TEXT_FGCOLOUR, 2, BTN4_TEXT_BGCOLOUR);
 80036c2:	f64d 03c3 	movw	r3, #55491	; 0xd8c3
 80036c6:	9301      	str	r3, [sp, #4]
 80036c8:	2302      	movs	r3, #2
 80036ca:	9300      	str	r3, [sp, #0]
 80036cc:	2300      	movs	r3, #0
 80036ce:	22d2      	movs	r2, #210	; 0xd2
 80036d0:	f44f 7182 	mov.w	r1, #260	; 0x104
 80036d4:	480a      	ldr	r0, [pc, #40]	; (8003700 <FuncMenu_DrawOutputMenu+0x2a0>)
 80036d6:	f00d f955 	bl	8010984 <ILI9341_Draw_Text>
				break;
 80036da:	e310      	b.n	8003cfe <FuncMenu_DrawOutputMenu+0x89e>
 80036dc:	08015bcc 	.word	0x08015bcc
 80036e0:	08015bdc 	.word	0x08015bdc
 80036e4:	08015bec 	.word	0x08015bec
 80036e8:	08015bf4 	.word	0x08015bf4
 80036ec:	08015c00 	.word	0x08015c00
 80036f0:	08015c08 	.word	0x08015c08
 80036f4:	08015c14 	.word	0x08015c14
 80036f8:	08015c20 	.word	0x08015c20
 80036fc:	08015c28 	.word	0x08015c28
 8003700:	08015bc4 	.word	0x08015bc4
			case SAW_FUNC_MODE:
				ILI9341_Draw_Text("- SINE", 	10, 50,  NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8003704:	2300      	movs	r3, #0
 8003706:	9301      	str	r3, [sp, #4]
 8003708:	2302      	movs	r3, #2
 800370a:	9300      	str	r3, [sp, #0]
 800370c:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8003710:	2232      	movs	r2, #50	; 0x32
 8003712:	210a      	movs	r1, #10
 8003714:	48be      	ldr	r0, [pc, #760]	; (8003a10 <FuncMenu_DrawOutputMenu+0x5b0>)
 8003716:	f00d f935 	bl	8010984 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- SQUARE", 	10, 70,  NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 800371a:	2300      	movs	r3, #0
 800371c:	9301      	str	r3, [sp, #4]
 800371e:	2302      	movs	r3, #2
 8003720:	9300      	str	r3, [sp, #0]
 8003722:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8003726:	2246      	movs	r2, #70	; 0x46
 8003728:	210a      	movs	r1, #10
 800372a:	48ba      	ldr	r0, [pc, #744]	; (8003a14 <FuncMenu_DrawOutputMenu+0x5b4>)
 800372c:	f00d f92a 	bl	8010984 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- SAW", 		10, 90,  HIGHLIGHT_TEXT_FGCOLOUR, 2, HIGHLIGHT_TEXT_BGCOLOUR);
 8003730:	f644 43f6 	movw	r3, #19702	; 0x4cf6
 8003734:	9301      	str	r3, [sp, #4]
 8003736:	2302      	movs	r3, #2
 8003738:	9300      	str	r3, [sp, #0]
 800373a:	2300      	movs	r3, #0
 800373c:	225a      	movs	r2, #90	; 0x5a
 800373e:	210a      	movs	r1, #10
 8003740:	48b5      	ldr	r0, [pc, #724]	; (8003a18 <FuncMenu_DrawOutputMenu+0x5b8>)
 8003742:	f00d f91f 	bl	8010984 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- REV SAW", 	10, 110, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8003746:	2300      	movs	r3, #0
 8003748:	9301      	str	r3, [sp, #4]
 800374a:	2302      	movs	r3, #2
 800374c:	9300      	str	r3, [sp, #0]
 800374e:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8003752:	226e      	movs	r2, #110	; 0x6e
 8003754:	210a      	movs	r1, #10
 8003756:	48b1      	ldr	r0, [pc, #708]	; (8003a1c <FuncMenu_DrawOutputMenu+0x5bc>)
 8003758:	f00d f914 	bl	8010984 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- TRIANGLE",	10, 130, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 800375c:	2300      	movs	r3, #0
 800375e:	9301      	str	r3, [sp, #4]
 8003760:	2302      	movs	r3, #2
 8003762:	9300      	str	r3, [sp, #0]
 8003764:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8003768:	2282      	movs	r2, #130	; 0x82
 800376a:	210a      	movs	r1, #10
 800376c:	48ac      	ldr	r0, [pc, #688]	; (8003a20 <FuncMenu_DrawOutputMenu+0x5c0>)
 800376e:	f00d f909 	bl	8010984 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- UNIT", 	10, 150, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8003772:	2300      	movs	r3, #0
 8003774:	9301      	str	r3, [sp, #4]
 8003776:	2302      	movs	r3, #2
 8003778:	9300      	str	r3, [sp, #0]
 800377a:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 800377e:	2296      	movs	r2, #150	; 0x96
 8003780:	210a      	movs	r1, #10
 8003782:	48a8      	ldr	r0, [pc, #672]	; (8003a24 <FuncMenu_DrawOutputMenu+0x5c4>)
 8003784:	f00d f8fe 	bl	8010984 <ILI9341_Draw_Text>
				if(pOutChan)
 8003788:	79fb      	ldrb	r3, [r7, #7]
 800378a:	2b00      	cmp	r3, #0
 800378c:	d00a      	beq.n	80037a4 <FuncMenu_DrawOutputMenu+0x344>
					ILI9341_Draw_Text("- PWM", 		10, 170, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 800378e:	2300      	movs	r3, #0
 8003790:	9301      	str	r3, [sp, #4]
 8003792:	2302      	movs	r3, #2
 8003794:	9300      	str	r3, [sp, #0]
 8003796:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 800379a:	22aa      	movs	r2, #170	; 0xaa
 800379c:	210a      	movs	r1, #10
 800379e:	48a2      	ldr	r0, [pc, #648]	; (8003a28 <FuncMenu_DrawOutputMenu+0x5c8>)
 80037a0:	f00d f8f0 	bl	8010984 <ILI9341_Draw_Text>
			 	// coloured menu btn labels
				ILI9341_Draw_Text("    ", 5,   210, BTN1_TEXT_FGCOLOUR, 2, BTN1_TEXT_BGCOLOUR);
 80037a4:	f240 23fd 	movw	r3, #765	; 0x2fd
 80037a8:	9301      	str	r3, [sp, #4]
 80037aa:	2302      	movs	r3, #2
 80037ac:	9300      	str	r3, [sp, #0]
 80037ae:	2300      	movs	r3, #0
 80037b0:	22d2      	movs	r2, #210	; 0xd2
 80037b2:	2105      	movs	r1, #5
 80037b4:	489d      	ldr	r0, [pc, #628]	; (8003a2c <FuncMenu_DrawOutputMenu+0x5cc>)
 80037b6:	f00d f8e5 	bl	8010984 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("    ", 	97,  210, BTN2_TEXT_FGCOLOUR, 2, BTN2_TEXT_BGCOLOUR);
 80037ba:	f241 43a2 	movw	r3, #5282	; 0x14a2
 80037be:	9301      	str	r3, [sp, #4]
 80037c0:	2302      	movs	r3, #2
 80037c2:	9300      	str	r3, [sp, #0]
 80037c4:	2300      	movs	r3, #0
 80037c6:	22d2      	movs	r2, #210	; 0xd2
 80037c8:	2161      	movs	r1, #97	; 0x61
 80037ca:	4898      	ldr	r0, [pc, #608]	; (8003a2c <FuncMenu_DrawOutputMenu+0x5cc>)
 80037cc:	f00d f8da 	bl	8010984 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("    ", 	175, 210, BTN3_TEXT_FGCOLOUR, 2, BTN3_TEXT_BGCOLOUR);
 80037d0:	f64f 73e0 	movw	r3, #65504	; 0xffe0
 80037d4:	9301      	str	r3, [sp, #4]
 80037d6:	2302      	movs	r3, #2
 80037d8:	9300      	str	r3, [sp, #0]
 80037da:	2300      	movs	r3, #0
 80037dc:	22d2      	movs	r2, #210	; 0xd2
 80037de:	21af      	movs	r1, #175	; 0xaf
 80037e0:	4892      	ldr	r0, [pc, #584]	; (8003a2c <FuncMenu_DrawOutputMenu+0x5cc>)
 80037e2:	f00d f8cf 	bl	8010984 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("    ", 	260, 210, BTN4_TEXT_FGCOLOUR, 2, BTN4_TEXT_BGCOLOUR);
 80037e6:	f64d 03c3 	movw	r3, #55491	; 0xd8c3
 80037ea:	9301      	str	r3, [sp, #4]
 80037ec:	2302      	movs	r3, #2
 80037ee:	9300      	str	r3, [sp, #0]
 80037f0:	2300      	movs	r3, #0
 80037f2:	22d2      	movs	r2, #210	; 0xd2
 80037f4:	f44f 7182 	mov.w	r1, #260	; 0x104
 80037f8:	488c      	ldr	r0, [pc, #560]	; (8003a2c <FuncMenu_DrawOutputMenu+0x5cc>)
 80037fa:	f00d f8c3 	bl	8010984 <ILI9341_Draw_Text>
				break;
 80037fe:	e27e      	b.n	8003cfe <FuncMenu_DrawOutputMenu+0x89e>
			case REV_SAW_FUNC_MODE:
				ILI9341_Draw_Text("- SINE", 	10, 50,  NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8003800:	2300      	movs	r3, #0
 8003802:	9301      	str	r3, [sp, #4]
 8003804:	2302      	movs	r3, #2
 8003806:	9300      	str	r3, [sp, #0]
 8003808:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 800380c:	2232      	movs	r2, #50	; 0x32
 800380e:	210a      	movs	r1, #10
 8003810:	487f      	ldr	r0, [pc, #508]	; (8003a10 <FuncMenu_DrawOutputMenu+0x5b0>)
 8003812:	f00d f8b7 	bl	8010984 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- SQUARE", 	10, 70,  NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8003816:	2300      	movs	r3, #0
 8003818:	9301      	str	r3, [sp, #4]
 800381a:	2302      	movs	r3, #2
 800381c:	9300      	str	r3, [sp, #0]
 800381e:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8003822:	2246      	movs	r2, #70	; 0x46
 8003824:	210a      	movs	r1, #10
 8003826:	487b      	ldr	r0, [pc, #492]	; (8003a14 <FuncMenu_DrawOutputMenu+0x5b4>)
 8003828:	f00d f8ac 	bl	8010984 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- SAW", 		10, 90,  NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 800382c:	2300      	movs	r3, #0
 800382e:	9301      	str	r3, [sp, #4]
 8003830:	2302      	movs	r3, #2
 8003832:	9300      	str	r3, [sp, #0]
 8003834:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8003838:	225a      	movs	r2, #90	; 0x5a
 800383a:	210a      	movs	r1, #10
 800383c:	4876      	ldr	r0, [pc, #472]	; (8003a18 <FuncMenu_DrawOutputMenu+0x5b8>)
 800383e:	f00d f8a1 	bl	8010984 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- REV SAW", 	10, 110, HIGHLIGHT_TEXT_FGCOLOUR, 2, HIGHLIGHT_TEXT_BGCOLOUR);
 8003842:	f644 43f6 	movw	r3, #19702	; 0x4cf6
 8003846:	9301      	str	r3, [sp, #4]
 8003848:	2302      	movs	r3, #2
 800384a:	9300      	str	r3, [sp, #0]
 800384c:	2300      	movs	r3, #0
 800384e:	226e      	movs	r2, #110	; 0x6e
 8003850:	210a      	movs	r1, #10
 8003852:	4872      	ldr	r0, [pc, #456]	; (8003a1c <FuncMenu_DrawOutputMenu+0x5bc>)
 8003854:	f00d f896 	bl	8010984 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- TRIANGLE",	10, 130, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8003858:	2300      	movs	r3, #0
 800385a:	9301      	str	r3, [sp, #4]
 800385c:	2302      	movs	r3, #2
 800385e:	9300      	str	r3, [sp, #0]
 8003860:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8003864:	2282      	movs	r2, #130	; 0x82
 8003866:	210a      	movs	r1, #10
 8003868:	486d      	ldr	r0, [pc, #436]	; (8003a20 <FuncMenu_DrawOutputMenu+0x5c0>)
 800386a:	f00d f88b 	bl	8010984 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- UNIT", 	10, 150, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 800386e:	2300      	movs	r3, #0
 8003870:	9301      	str	r3, [sp, #4]
 8003872:	2302      	movs	r3, #2
 8003874:	9300      	str	r3, [sp, #0]
 8003876:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 800387a:	2296      	movs	r2, #150	; 0x96
 800387c:	210a      	movs	r1, #10
 800387e:	4869      	ldr	r0, [pc, #420]	; (8003a24 <FuncMenu_DrawOutputMenu+0x5c4>)
 8003880:	f00d f880 	bl	8010984 <ILI9341_Draw_Text>

				if(pOutChan)
 8003884:	79fb      	ldrb	r3, [r7, #7]
 8003886:	2b00      	cmp	r3, #0
 8003888:	d00a      	beq.n	80038a0 <FuncMenu_DrawOutputMenu+0x440>
					ILI9341_Draw_Text("- PWM", 		10, 170, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 800388a:	2300      	movs	r3, #0
 800388c:	9301      	str	r3, [sp, #4]
 800388e:	2302      	movs	r3, #2
 8003890:	9300      	str	r3, [sp, #0]
 8003892:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8003896:	22aa      	movs	r2, #170	; 0xaa
 8003898:	210a      	movs	r1, #10
 800389a:	4863      	ldr	r0, [pc, #396]	; (8003a28 <FuncMenu_DrawOutputMenu+0x5c8>)
 800389c:	f00d f872 	bl	8010984 <ILI9341_Draw_Text>

				// coloured menu btn labels
				ILI9341_Draw_Text("    ", 5,   210, BTN1_TEXT_FGCOLOUR, 2, BTN1_TEXT_BGCOLOUR);
 80038a0:	f240 23fd 	movw	r3, #765	; 0x2fd
 80038a4:	9301      	str	r3, [sp, #4]
 80038a6:	2302      	movs	r3, #2
 80038a8:	9300      	str	r3, [sp, #0]
 80038aa:	2300      	movs	r3, #0
 80038ac:	22d2      	movs	r2, #210	; 0xd2
 80038ae:	2105      	movs	r1, #5
 80038b0:	485e      	ldr	r0, [pc, #376]	; (8003a2c <FuncMenu_DrawOutputMenu+0x5cc>)
 80038b2:	f00d f867 	bl	8010984 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("    ", 	97,  210, BTN2_TEXT_FGCOLOUR, 2, BTN2_TEXT_BGCOLOUR);
 80038b6:	f241 43a2 	movw	r3, #5282	; 0x14a2
 80038ba:	9301      	str	r3, [sp, #4]
 80038bc:	2302      	movs	r3, #2
 80038be:	9300      	str	r3, [sp, #0]
 80038c0:	2300      	movs	r3, #0
 80038c2:	22d2      	movs	r2, #210	; 0xd2
 80038c4:	2161      	movs	r1, #97	; 0x61
 80038c6:	4859      	ldr	r0, [pc, #356]	; (8003a2c <FuncMenu_DrawOutputMenu+0x5cc>)
 80038c8:	f00d f85c 	bl	8010984 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("    ", 	175, 210, BTN3_TEXT_FGCOLOUR, 2, BTN3_TEXT_BGCOLOUR);
 80038cc:	f64f 73e0 	movw	r3, #65504	; 0xffe0
 80038d0:	9301      	str	r3, [sp, #4]
 80038d2:	2302      	movs	r3, #2
 80038d4:	9300      	str	r3, [sp, #0]
 80038d6:	2300      	movs	r3, #0
 80038d8:	22d2      	movs	r2, #210	; 0xd2
 80038da:	21af      	movs	r1, #175	; 0xaf
 80038dc:	4853      	ldr	r0, [pc, #332]	; (8003a2c <FuncMenu_DrawOutputMenu+0x5cc>)
 80038de:	f00d f851 	bl	8010984 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("    ", 	260, 210, BTN4_TEXT_FGCOLOUR, 2, BTN4_TEXT_BGCOLOUR);
 80038e2:	f64d 03c3 	movw	r3, #55491	; 0xd8c3
 80038e6:	9301      	str	r3, [sp, #4]
 80038e8:	2302      	movs	r3, #2
 80038ea:	9300      	str	r3, [sp, #0]
 80038ec:	2300      	movs	r3, #0
 80038ee:	22d2      	movs	r2, #210	; 0xd2
 80038f0:	f44f 7182 	mov.w	r1, #260	; 0x104
 80038f4:	484d      	ldr	r0, [pc, #308]	; (8003a2c <FuncMenu_DrawOutputMenu+0x5cc>)
 80038f6:	f00d f845 	bl	8010984 <ILI9341_Draw_Text>
				break;
 80038fa:	e200      	b.n	8003cfe <FuncMenu_DrawOutputMenu+0x89e>
			case TRIANGLE_FUNC_MODE:
				ILI9341_Draw_Text("- SINE", 	10, 50,  NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 80038fc:	2300      	movs	r3, #0
 80038fe:	9301      	str	r3, [sp, #4]
 8003900:	2302      	movs	r3, #2
 8003902:	9300      	str	r3, [sp, #0]
 8003904:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8003908:	2232      	movs	r2, #50	; 0x32
 800390a:	210a      	movs	r1, #10
 800390c:	4840      	ldr	r0, [pc, #256]	; (8003a10 <FuncMenu_DrawOutputMenu+0x5b0>)
 800390e:	f00d f839 	bl	8010984 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- SQUARE", 	10, 70,  NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8003912:	2300      	movs	r3, #0
 8003914:	9301      	str	r3, [sp, #4]
 8003916:	2302      	movs	r3, #2
 8003918:	9300      	str	r3, [sp, #0]
 800391a:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 800391e:	2246      	movs	r2, #70	; 0x46
 8003920:	210a      	movs	r1, #10
 8003922:	483c      	ldr	r0, [pc, #240]	; (8003a14 <FuncMenu_DrawOutputMenu+0x5b4>)
 8003924:	f00d f82e 	bl	8010984 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- SAW", 		10, 90,  NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8003928:	2300      	movs	r3, #0
 800392a:	9301      	str	r3, [sp, #4]
 800392c:	2302      	movs	r3, #2
 800392e:	9300      	str	r3, [sp, #0]
 8003930:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8003934:	225a      	movs	r2, #90	; 0x5a
 8003936:	210a      	movs	r1, #10
 8003938:	4837      	ldr	r0, [pc, #220]	; (8003a18 <FuncMenu_DrawOutputMenu+0x5b8>)
 800393a:	f00d f823 	bl	8010984 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- REV SAW", 	10, 110, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 800393e:	2300      	movs	r3, #0
 8003940:	9301      	str	r3, [sp, #4]
 8003942:	2302      	movs	r3, #2
 8003944:	9300      	str	r3, [sp, #0]
 8003946:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 800394a:	226e      	movs	r2, #110	; 0x6e
 800394c:	210a      	movs	r1, #10
 800394e:	4833      	ldr	r0, [pc, #204]	; (8003a1c <FuncMenu_DrawOutputMenu+0x5bc>)
 8003950:	f00d f818 	bl	8010984 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- TRIANGLE",	10, 130, HIGHLIGHT_TEXT_FGCOLOUR, 2, HIGHLIGHT_TEXT_BGCOLOUR);
 8003954:	f644 43f6 	movw	r3, #19702	; 0x4cf6
 8003958:	9301      	str	r3, [sp, #4]
 800395a:	2302      	movs	r3, #2
 800395c:	9300      	str	r3, [sp, #0]
 800395e:	2300      	movs	r3, #0
 8003960:	2282      	movs	r2, #130	; 0x82
 8003962:	210a      	movs	r1, #10
 8003964:	482e      	ldr	r0, [pc, #184]	; (8003a20 <FuncMenu_DrawOutputMenu+0x5c0>)
 8003966:	f00d f80d 	bl	8010984 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- UNIT", 	10, 150, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 800396a:	2300      	movs	r3, #0
 800396c:	9301      	str	r3, [sp, #4]
 800396e:	2302      	movs	r3, #2
 8003970:	9300      	str	r3, [sp, #0]
 8003972:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8003976:	2296      	movs	r2, #150	; 0x96
 8003978:	210a      	movs	r1, #10
 800397a:	482a      	ldr	r0, [pc, #168]	; (8003a24 <FuncMenu_DrawOutputMenu+0x5c4>)
 800397c:	f00d f802 	bl	8010984 <ILI9341_Draw_Text>

				if(pOutChan)
 8003980:	79fb      	ldrb	r3, [r7, #7]
 8003982:	2b00      	cmp	r3, #0
 8003984:	d00a      	beq.n	800399c <FuncMenu_DrawOutputMenu+0x53c>
					ILI9341_Draw_Text("- PWM", 		10, 170, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8003986:	2300      	movs	r3, #0
 8003988:	9301      	str	r3, [sp, #4]
 800398a:	2302      	movs	r3, #2
 800398c:	9300      	str	r3, [sp, #0]
 800398e:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8003992:	22aa      	movs	r2, #170	; 0xaa
 8003994:	210a      	movs	r1, #10
 8003996:	4824      	ldr	r0, [pc, #144]	; (8003a28 <FuncMenu_DrawOutputMenu+0x5c8>)
 8003998:	f00c fff4 	bl	8010984 <ILI9341_Draw_Text>

				// coloured menu btn labels
				ILI9341_Draw_Text("    ", 5,   210, BTN1_TEXT_FGCOLOUR, 2, BTN1_TEXT_BGCOLOUR);
 800399c:	f240 23fd 	movw	r3, #765	; 0x2fd
 80039a0:	9301      	str	r3, [sp, #4]
 80039a2:	2302      	movs	r3, #2
 80039a4:	9300      	str	r3, [sp, #0]
 80039a6:	2300      	movs	r3, #0
 80039a8:	22d2      	movs	r2, #210	; 0xd2
 80039aa:	2105      	movs	r1, #5
 80039ac:	481f      	ldr	r0, [pc, #124]	; (8003a2c <FuncMenu_DrawOutputMenu+0x5cc>)
 80039ae:	f00c ffe9 	bl	8010984 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("    ", 	97,  210, BTN2_TEXT_FGCOLOUR, 2, BTN2_TEXT_BGCOLOUR);
 80039b2:	f241 43a2 	movw	r3, #5282	; 0x14a2
 80039b6:	9301      	str	r3, [sp, #4]
 80039b8:	2302      	movs	r3, #2
 80039ba:	9300      	str	r3, [sp, #0]
 80039bc:	2300      	movs	r3, #0
 80039be:	22d2      	movs	r2, #210	; 0xd2
 80039c0:	2161      	movs	r1, #97	; 0x61
 80039c2:	481a      	ldr	r0, [pc, #104]	; (8003a2c <FuncMenu_DrawOutputMenu+0x5cc>)
 80039c4:	f00c ffde 	bl	8010984 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("    ", 	175, 210, BTN3_TEXT_FGCOLOUR, 2, BTN3_TEXT_BGCOLOUR);
 80039c8:	f64f 73e0 	movw	r3, #65504	; 0xffe0
 80039cc:	9301      	str	r3, [sp, #4]
 80039ce:	2302      	movs	r3, #2
 80039d0:	9300      	str	r3, [sp, #0]
 80039d2:	2300      	movs	r3, #0
 80039d4:	22d2      	movs	r2, #210	; 0xd2
 80039d6:	21af      	movs	r1, #175	; 0xaf
 80039d8:	4814      	ldr	r0, [pc, #80]	; (8003a2c <FuncMenu_DrawOutputMenu+0x5cc>)
 80039da:	f00c ffd3 	bl	8010984 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("    ", 	260, 210, BTN4_TEXT_FGCOLOUR, 2, BTN4_TEXT_BGCOLOUR);
 80039de:	f64d 03c3 	movw	r3, #55491	; 0xd8c3
 80039e2:	9301      	str	r3, [sp, #4]
 80039e4:	2302      	movs	r3, #2
 80039e6:	9300      	str	r3, [sp, #0]
 80039e8:	2300      	movs	r3, #0
 80039ea:	22d2      	movs	r2, #210	; 0xd2
 80039ec:	f44f 7182 	mov.w	r1, #260	; 0x104
 80039f0:	480e      	ldr	r0, [pc, #56]	; (8003a2c <FuncMenu_DrawOutputMenu+0x5cc>)
 80039f2:	f00c ffc7 	bl	8010984 <ILI9341_Draw_Text>

				ILI9341_Draw_Text("               ", 	150, 50,  NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 80039f6:	2300      	movs	r3, #0
 80039f8:	9301      	str	r3, [sp, #4]
 80039fa:	2302      	movs	r3, #2
 80039fc:	9300      	str	r3, [sp, #0]
 80039fe:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8003a02:	2232      	movs	r2, #50	; 0x32
 8003a04:	2196      	movs	r1, #150	; 0x96
 8003a06:	480a      	ldr	r0, [pc, #40]	; (8003a30 <FuncMenu_DrawOutputMenu+0x5d0>)
 8003a08:	f00c ffbc 	bl	8010984 <ILI9341_Draw_Text>
				break;
 8003a0c:	e177      	b.n	8003cfe <FuncMenu_DrawOutputMenu+0x89e>
 8003a0e:	bf00      	nop
 8003a10:	08015bec 	.word	0x08015bec
 8003a14:	08015bf4 	.word	0x08015bf4
 8003a18:	08015c00 	.word	0x08015c00
 8003a1c:	08015c08 	.word	0x08015c08
 8003a20:	08015c14 	.word	0x08015c14
 8003a24:	08015c20 	.word	0x08015c20
 8003a28:	08015c28 	.word	0x08015c28
 8003a2c:	08015bc4 	.word	0x08015bc4
 8003a30:	08015c30 	.word	0x08015c30
			case IMPULSE_FUNC_MODE:
				ILI9341_Draw_Text("- SINE", 	10, 50,  NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8003a34:	2300      	movs	r3, #0
 8003a36:	9301      	str	r3, [sp, #4]
 8003a38:	2302      	movs	r3, #2
 8003a3a:	9300      	str	r3, [sp, #0]
 8003a3c:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8003a40:	2232      	movs	r2, #50	; 0x32
 8003a42:	210a      	movs	r1, #10
 8003a44:	48b0      	ldr	r0, [pc, #704]	; (8003d08 <FuncMenu_DrawOutputMenu+0x8a8>)
 8003a46:	f00c ff9d 	bl	8010984 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- SQUARE", 	10, 70,  NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8003a4a:	2300      	movs	r3, #0
 8003a4c:	9301      	str	r3, [sp, #4]
 8003a4e:	2302      	movs	r3, #2
 8003a50:	9300      	str	r3, [sp, #0]
 8003a52:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8003a56:	2246      	movs	r2, #70	; 0x46
 8003a58:	210a      	movs	r1, #10
 8003a5a:	48ac      	ldr	r0, [pc, #688]	; (8003d0c <FuncMenu_DrawOutputMenu+0x8ac>)
 8003a5c:	f00c ff92 	bl	8010984 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- SAW", 		10, 90,  NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8003a60:	2300      	movs	r3, #0
 8003a62:	9301      	str	r3, [sp, #4]
 8003a64:	2302      	movs	r3, #2
 8003a66:	9300      	str	r3, [sp, #0]
 8003a68:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8003a6c:	225a      	movs	r2, #90	; 0x5a
 8003a6e:	210a      	movs	r1, #10
 8003a70:	48a7      	ldr	r0, [pc, #668]	; (8003d10 <FuncMenu_DrawOutputMenu+0x8b0>)
 8003a72:	f00c ff87 	bl	8010984 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- REV SAW", 	10, 110, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8003a76:	2300      	movs	r3, #0
 8003a78:	9301      	str	r3, [sp, #4]
 8003a7a:	2302      	movs	r3, #2
 8003a7c:	9300      	str	r3, [sp, #0]
 8003a7e:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8003a82:	226e      	movs	r2, #110	; 0x6e
 8003a84:	210a      	movs	r1, #10
 8003a86:	48a3      	ldr	r0, [pc, #652]	; (8003d14 <FuncMenu_DrawOutputMenu+0x8b4>)
 8003a88:	f00c ff7c 	bl	8010984 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- TRIANGLE",	10, 130, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8003a8c:	2300      	movs	r3, #0
 8003a8e:	9301      	str	r3, [sp, #4]
 8003a90:	2302      	movs	r3, #2
 8003a92:	9300      	str	r3, [sp, #0]
 8003a94:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8003a98:	2282      	movs	r2, #130	; 0x82
 8003a9a:	210a      	movs	r1, #10
 8003a9c:	489e      	ldr	r0, [pc, #632]	; (8003d18 <FuncMenu_DrawOutputMenu+0x8b8>)
 8003a9e:	f00c ff71 	bl	8010984 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- UNIT", 	10, 150, HIGHLIGHT_TEXT_FGCOLOUR, 2, HIGHLIGHT_TEXT_BGCOLOUR);
 8003aa2:	f644 43f6 	movw	r3, #19702	; 0x4cf6
 8003aa6:	9301      	str	r3, [sp, #4]
 8003aa8:	2302      	movs	r3, #2
 8003aaa:	9300      	str	r3, [sp, #0]
 8003aac:	2300      	movs	r3, #0
 8003aae:	2296      	movs	r2, #150	; 0x96
 8003ab0:	210a      	movs	r1, #10
 8003ab2:	489a      	ldr	r0, [pc, #616]	; (8003d1c <FuncMenu_DrawOutputMenu+0x8bc>)
 8003ab4:	f00c ff66 	bl	8010984 <ILI9341_Draw_Text>

				if(pOutChan)
 8003ab8:	79fb      	ldrb	r3, [r7, #7]
 8003aba:	2b00      	cmp	r3, #0
 8003abc:	d00a      	beq.n	8003ad4 <FuncMenu_DrawOutputMenu+0x674>
					ILI9341_Draw_Text("- PWM", 		10, 170, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8003abe:	2300      	movs	r3, #0
 8003ac0:	9301      	str	r3, [sp, #4]
 8003ac2:	2302      	movs	r3, #2
 8003ac4:	9300      	str	r3, [sp, #0]
 8003ac6:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8003aca:	22aa      	movs	r2, #170	; 0xaa
 8003acc:	210a      	movs	r1, #10
 8003ace:	4894      	ldr	r0, [pc, #592]	; (8003d20 <FuncMenu_DrawOutputMenu+0x8c0>)
 8003ad0:	f00c ff58 	bl	8010984 <ILI9341_Draw_Text>

				// coloured menu btn labels
				ILI9341_Draw_Text("    ", 5,   210, BTN1_TEXT_FGCOLOUR, 2, BTN1_TEXT_BGCOLOUR);
 8003ad4:	f240 23fd 	movw	r3, #765	; 0x2fd
 8003ad8:	9301      	str	r3, [sp, #4]
 8003ada:	2302      	movs	r3, #2
 8003adc:	9300      	str	r3, [sp, #0]
 8003ade:	2300      	movs	r3, #0
 8003ae0:	22d2      	movs	r2, #210	; 0xd2
 8003ae2:	2105      	movs	r1, #5
 8003ae4:	488f      	ldr	r0, [pc, #572]	; (8003d24 <FuncMenu_DrawOutputMenu+0x8c4>)
 8003ae6:	f00c ff4d 	bl	8010984 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("    ", 	97,  210, BTN2_TEXT_FGCOLOUR, 2, BTN2_TEXT_BGCOLOUR);
 8003aea:	f241 43a2 	movw	r3, #5282	; 0x14a2
 8003aee:	9301      	str	r3, [sp, #4]
 8003af0:	2302      	movs	r3, #2
 8003af2:	9300      	str	r3, [sp, #0]
 8003af4:	2300      	movs	r3, #0
 8003af6:	22d2      	movs	r2, #210	; 0xd2
 8003af8:	2161      	movs	r1, #97	; 0x61
 8003afa:	488a      	ldr	r0, [pc, #552]	; (8003d24 <FuncMenu_DrawOutputMenu+0x8c4>)
 8003afc:	f00c ff42 	bl	8010984 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("    ", 	175, 210, BTN3_TEXT_FGCOLOUR, 2, BTN3_TEXT_BGCOLOUR);
 8003b00:	f64f 73e0 	movw	r3, #65504	; 0xffe0
 8003b04:	9301      	str	r3, [sp, #4]
 8003b06:	2302      	movs	r3, #2
 8003b08:	9300      	str	r3, [sp, #0]
 8003b0a:	2300      	movs	r3, #0
 8003b0c:	22d2      	movs	r2, #210	; 0xd2
 8003b0e:	21af      	movs	r1, #175	; 0xaf
 8003b10:	4884      	ldr	r0, [pc, #528]	; (8003d24 <FuncMenu_DrawOutputMenu+0x8c4>)
 8003b12:	f00c ff37 	bl	8010984 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("    ", 	260, 210, BTN4_TEXT_FGCOLOUR, 2, BTN4_TEXT_BGCOLOUR);
 8003b16:	f64d 03c3 	movw	r3, #55491	; 0xd8c3
 8003b1a:	9301      	str	r3, [sp, #4]
 8003b1c:	2302      	movs	r3, #2
 8003b1e:	9300      	str	r3, [sp, #0]
 8003b20:	2300      	movs	r3, #0
 8003b22:	22d2      	movs	r2, #210	; 0xd2
 8003b24:	f44f 7182 	mov.w	r1, #260	; 0x104
 8003b28:	487e      	ldr	r0, [pc, #504]	; (8003d24 <FuncMenu_DrawOutputMenu+0x8c4>)
 8003b2a:	f00c ff2b 	bl	8010984 <ILI9341_Draw_Text>

				ILI9341_Draw_Text("               ", 	150, 50,  NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8003b2e:	2300      	movs	r3, #0
 8003b30:	9301      	str	r3, [sp, #4]
 8003b32:	2302      	movs	r3, #2
 8003b34:	9300      	str	r3, [sp, #0]
 8003b36:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8003b3a:	2232      	movs	r2, #50	; 0x32
 8003b3c:	2196      	movs	r1, #150	; 0x96
 8003b3e:	487a      	ldr	r0, [pc, #488]	; (8003d28 <FuncMenu_DrawOutputMenu+0x8c8>)
 8003b40:	f00c ff20 	bl	8010984 <ILI9341_Draw_Text>
				break;
 8003b44:	e0db      	b.n	8003cfe <FuncMenu_DrawOutputMenu+0x89e>
			case PWM_FUNC_MODE:
				ILI9341_Draw_Text("- SINE", 	10, 50,  NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8003b46:	2300      	movs	r3, #0
 8003b48:	9301      	str	r3, [sp, #4]
 8003b4a:	2302      	movs	r3, #2
 8003b4c:	9300      	str	r3, [sp, #0]
 8003b4e:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8003b52:	2232      	movs	r2, #50	; 0x32
 8003b54:	210a      	movs	r1, #10
 8003b56:	486c      	ldr	r0, [pc, #432]	; (8003d08 <FuncMenu_DrawOutputMenu+0x8a8>)
 8003b58:	f00c ff14 	bl	8010984 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- SQUARE", 	10, 70,  NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8003b5c:	2300      	movs	r3, #0
 8003b5e:	9301      	str	r3, [sp, #4]
 8003b60:	2302      	movs	r3, #2
 8003b62:	9300      	str	r3, [sp, #0]
 8003b64:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8003b68:	2246      	movs	r2, #70	; 0x46
 8003b6a:	210a      	movs	r1, #10
 8003b6c:	4867      	ldr	r0, [pc, #412]	; (8003d0c <FuncMenu_DrawOutputMenu+0x8ac>)
 8003b6e:	f00c ff09 	bl	8010984 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- SAW", 		10, 90,  NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8003b72:	2300      	movs	r3, #0
 8003b74:	9301      	str	r3, [sp, #4]
 8003b76:	2302      	movs	r3, #2
 8003b78:	9300      	str	r3, [sp, #0]
 8003b7a:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8003b7e:	225a      	movs	r2, #90	; 0x5a
 8003b80:	210a      	movs	r1, #10
 8003b82:	4863      	ldr	r0, [pc, #396]	; (8003d10 <FuncMenu_DrawOutputMenu+0x8b0>)
 8003b84:	f00c fefe 	bl	8010984 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- REV SAW", 	10, 110, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8003b88:	2300      	movs	r3, #0
 8003b8a:	9301      	str	r3, [sp, #4]
 8003b8c:	2302      	movs	r3, #2
 8003b8e:	9300      	str	r3, [sp, #0]
 8003b90:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8003b94:	226e      	movs	r2, #110	; 0x6e
 8003b96:	210a      	movs	r1, #10
 8003b98:	485e      	ldr	r0, [pc, #376]	; (8003d14 <FuncMenu_DrawOutputMenu+0x8b4>)
 8003b9a:	f00c fef3 	bl	8010984 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- TRIANGLE",	10, 130, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8003b9e:	2300      	movs	r3, #0
 8003ba0:	9301      	str	r3, [sp, #4]
 8003ba2:	2302      	movs	r3, #2
 8003ba4:	9300      	str	r3, [sp, #0]
 8003ba6:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8003baa:	2282      	movs	r2, #130	; 0x82
 8003bac:	210a      	movs	r1, #10
 8003bae:	485a      	ldr	r0, [pc, #360]	; (8003d18 <FuncMenu_DrawOutputMenu+0x8b8>)
 8003bb0:	f00c fee8 	bl	8010984 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- UNIT", 	10, 150, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8003bb4:	2300      	movs	r3, #0
 8003bb6:	9301      	str	r3, [sp, #4]
 8003bb8:	2302      	movs	r3, #2
 8003bba:	9300      	str	r3, [sp, #0]
 8003bbc:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8003bc0:	2296      	movs	r2, #150	; 0x96
 8003bc2:	210a      	movs	r1, #10
 8003bc4:	4855      	ldr	r0, [pc, #340]	; (8003d1c <FuncMenu_DrawOutputMenu+0x8bc>)
 8003bc6:	f00c fedd 	bl	8010984 <ILI9341_Draw_Text>

				if(pOutChan)
 8003bca:	79fb      	ldrb	r3, [r7, #7]
 8003bcc:	2b00      	cmp	r3, #0
 8003bce:	d00a      	beq.n	8003be6 <FuncMenu_DrawOutputMenu+0x786>
					ILI9341_Draw_Text("- PWM", 		10, 170, HIGHLIGHT_TEXT_FGCOLOUR, 2, HIGHLIGHT_TEXT_BGCOLOUR);
 8003bd0:	f644 43f6 	movw	r3, #19702	; 0x4cf6
 8003bd4:	9301      	str	r3, [sp, #4]
 8003bd6:	2302      	movs	r3, #2
 8003bd8:	9300      	str	r3, [sp, #0]
 8003bda:	2300      	movs	r3, #0
 8003bdc:	22aa      	movs	r2, #170	; 0xaa
 8003bde:	210a      	movs	r1, #10
 8003be0:	484f      	ldr	r0, [pc, #316]	; (8003d20 <FuncMenu_DrawOutputMenu+0x8c0>)
 8003be2:	f00c fecf 	bl	8010984 <ILI9341_Draw_Text>

				// coloured menu btn labels
				ILI9341_Draw_Text("    ", 5,   210, BTN1_TEXT_FGCOLOUR, 2, BTN1_TEXT_BGCOLOUR);
 8003be6:	f240 23fd 	movw	r3, #765	; 0x2fd
 8003bea:	9301      	str	r3, [sp, #4]
 8003bec:	2302      	movs	r3, #2
 8003bee:	9300      	str	r3, [sp, #0]
 8003bf0:	2300      	movs	r3, #0
 8003bf2:	22d2      	movs	r2, #210	; 0xd2
 8003bf4:	2105      	movs	r1, #5
 8003bf6:	484b      	ldr	r0, [pc, #300]	; (8003d24 <FuncMenu_DrawOutputMenu+0x8c4>)
 8003bf8:	f00c fec4 	bl	8010984 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("    ", 	97,  210, BTN2_TEXT_FGCOLOUR, 2, BTN2_TEXT_BGCOLOUR);
 8003bfc:	f241 43a2 	movw	r3, #5282	; 0x14a2
 8003c00:	9301      	str	r3, [sp, #4]
 8003c02:	2302      	movs	r3, #2
 8003c04:	9300      	str	r3, [sp, #0]
 8003c06:	2300      	movs	r3, #0
 8003c08:	22d2      	movs	r2, #210	; 0xd2
 8003c0a:	2161      	movs	r1, #97	; 0x61
 8003c0c:	4845      	ldr	r0, [pc, #276]	; (8003d24 <FuncMenu_DrawOutputMenu+0x8c4>)
 8003c0e:	f00c feb9 	bl	8010984 <ILI9341_Draw_Text>

				if(pOutChan)
 8003c12:	79fb      	ldrb	r3, [r7, #7]
 8003c14:	2b00      	cmp	r3, #0
 8003c16:	d05a      	beq.n	8003cce <FuncMenu_DrawOutputMenu+0x86e>
				{
					ILI9341_Draw_Text("DUTY", 	175, 210, BTN3_TEXT_FGCOLOUR, 2, BTN3_TEXT_BGCOLOUR);
 8003c18:	f64f 73e0 	movw	r3, #65504	; 0xffe0
 8003c1c:	9301      	str	r3, [sp, #4]
 8003c1e:	2302      	movs	r3, #2
 8003c20:	9300      	str	r3, [sp, #0]
 8003c22:	2300      	movs	r3, #0
 8003c24:	22d2      	movs	r2, #210	; 0xd2
 8003c26:	21af      	movs	r1, #175	; 0xaf
 8003c28:	4840      	ldr	r0, [pc, #256]	; (8003d2c <FuncMenu_DrawOutputMenu+0x8cc>)
 8003c2a:	f00c feab 	bl	8010984 <ILI9341_Draw_Text>
					char duty[10] = "";
 8003c2e:	2300      	movs	r3, #0
 8003c30:	60bb      	str	r3, [r7, #8]
 8003c32:	f107 030c 	add.w	r3, r7, #12
 8003c36:	2200      	movs	r2, #0
 8003c38:	601a      	str	r2, [r3, #0]
 8003c3a:	809a      	strh	r2, [r3, #4]
					snprintf(duty, sizeof(duty), "%0.2f%%", ((float)PWM_AUX_OUT_TIM->CCR1 / (float)PWM_AUX_OUT_TIM->ARR) * 100);
 8003c3c:	4b3c      	ldr	r3, [pc, #240]	; (8003d30 <FuncMenu_DrawOutputMenu+0x8d0>)
 8003c3e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003c40:	ee07 3a90 	vmov	s15, r3
 8003c44:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003c48:	4b39      	ldr	r3, [pc, #228]	; (8003d30 <FuncMenu_DrawOutputMenu+0x8d0>)
 8003c4a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003c4c:	ee07 3a90 	vmov	s15, r3
 8003c50:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8003c54:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8003c58:	ed9f 7a36 	vldr	s14, [pc, #216]	; 8003d34 <FuncMenu_DrawOutputMenu+0x8d4>
 8003c5c:	ee67 7a87 	vmul.f32	s15, s15, s14
 8003c60:	ee17 0a90 	vmov	r0, s15
 8003c64:	f7fc fc98 	bl	8000598 <__aeabi_f2d>
 8003c68:	4603      	mov	r3, r0
 8003c6a:	460c      	mov	r4, r1
 8003c6c:	f107 0008 	add.w	r0, r7, #8
 8003c70:	e9cd 3400 	strd	r3, r4, [sp]
 8003c74:	4a30      	ldr	r2, [pc, #192]	; (8003d38 <FuncMenu_DrawOutputMenu+0x8d8>)
 8003c76:	210a      	movs	r1, #10
 8003c78:	f00e fa40 	bl	80120fc <sniprintf>
					ILI9341_Draw_Text(duty, 	220, 50,  NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8003c7c:	f107 0008 	add.w	r0, r7, #8
 8003c80:	2300      	movs	r3, #0
 8003c82:	9301      	str	r3, [sp, #4]
 8003c84:	2302      	movs	r3, #2
 8003c86:	9300      	str	r3, [sp, #0]
 8003c88:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8003c8c:	2232      	movs	r2, #50	; 0x32
 8003c8e:	21dc      	movs	r1, #220	; 0xdc
 8003c90:	f00c fe78 	bl	8010984 <ILI9341_Draw_Text>
					if(SM_IsFuncPwmDutyMode())
 8003c94:	f003 f9a6 	bl	8006fe4 <SM_IsFuncPwmDutyMode>
 8003c98:	4603      	mov	r3, r0
 8003c9a:	2b00      	cmp	r3, #0
 8003c9c:	d00b      	beq.n	8003cb6 <FuncMenu_DrawOutputMenu+0x856>
					{
						ILI9341_Draw_Text("DUTY:", 	150, 50,  HIGHLIGHT_TEXT_FGCOLOUR, 2, HIGHLIGHT_TEXT_BGCOLOUR);
 8003c9e:	f644 43f6 	movw	r3, #19702	; 0x4cf6
 8003ca2:	9301      	str	r3, [sp, #4]
 8003ca4:	2302      	movs	r3, #2
 8003ca6:	9300      	str	r3, [sp, #0]
 8003ca8:	2300      	movs	r3, #0
 8003caa:	2232      	movs	r2, #50	; 0x32
 8003cac:	2196      	movs	r1, #150	; 0x96
 8003cae:	4823      	ldr	r0, [pc, #140]	; (8003d3c <FuncMenu_DrawOutputMenu+0x8dc>)
 8003cb0:	f00c fe68 	bl	8010984 <ILI9341_Draw_Text>
 8003cb4:	e016      	b.n	8003ce4 <FuncMenu_DrawOutputMenu+0x884>

					}
					else
					{
						ILI9341_Draw_Text("DUTY:", 	150, 50,  NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8003cb6:	2300      	movs	r3, #0
 8003cb8:	9301      	str	r3, [sp, #4]
 8003cba:	2302      	movs	r3, #2
 8003cbc:	9300      	str	r3, [sp, #0]
 8003cbe:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8003cc2:	2232      	movs	r2, #50	; 0x32
 8003cc4:	2196      	movs	r1, #150	; 0x96
 8003cc6:	481d      	ldr	r0, [pc, #116]	; (8003d3c <FuncMenu_DrawOutputMenu+0x8dc>)
 8003cc8:	f00c fe5c 	bl	8010984 <ILI9341_Draw_Text>
 8003ccc:	e00a      	b.n	8003ce4 <FuncMenu_DrawOutputMenu+0x884>
					}
				}
				else
				{
					ILI9341_Draw_Text("    ", 	175, 210, BTN3_TEXT_FGCOLOUR, 2, BTN3_TEXT_BGCOLOUR);
 8003cce:	f64f 73e0 	movw	r3, #65504	; 0xffe0
 8003cd2:	9301      	str	r3, [sp, #4]
 8003cd4:	2302      	movs	r3, #2
 8003cd6:	9300      	str	r3, [sp, #0]
 8003cd8:	2300      	movs	r3, #0
 8003cda:	22d2      	movs	r2, #210	; 0xd2
 8003cdc:	21af      	movs	r1, #175	; 0xaf
 8003cde:	4811      	ldr	r0, [pc, #68]	; (8003d24 <FuncMenu_DrawOutputMenu+0x8c4>)
 8003ce0:	f00c fe50 	bl	8010984 <ILI9341_Draw_Text>
				}

				ILI9341_Draw_Text("    ", 	260, 210, BTN4_TEXT_FGCOLOUR, 2, BTN4_TEXT_BGCOLOUR);
 8003ce4:	f64d 03c3 	movw	r3, #55491	; 0xd8c3
 8003ce8:	9301      	str	r3, [sp, #4]
 8003cea:	2302      	movs	r3, #2
 8003cec:	9300      	str	r3, [sp, #0]
 8003cee:	2300      	movs	r3, #0
 8003cf0:	22d2      	movs	r2, #210	; 0xd2
 8003cf2:	f44f 7182 	mov.w	r1, #260	; 0x104
 8003cf6:	480b      	ldr	r0, [pc, #44]	; (8003d24 <FuncMenu_DrawOutputMenu+0x8c4>)
 8003cf8:	f00c fe44 	bl	8010984 <ILI9341_Draw_Text>

				break;
 8003cfc:	bf00      	nop
				//
		}
	}
}
 8003cfe:	bf00      	nop
 8003d00:	371c      	adds	r7, #28
 8003d02:	46bd      	mov	sp, r7
 8003d04:	bd90      	pop	{r4, r7, pc}
 8003d06:	bf00      	nop
 8003d08:	08015bec 	.word	0x08015bec
 8003d0c:	08015bf4 	.word	0x08015bf4
 8003d10:	08015c00 	.word	0x08015c00
 8003d14:	08015c08 	.word	0x08015c08
 8003d18:	08015c14 	.word	0x08015c14
 8003d1c:	08015c20 	.word	0x08015c20
 8003d20:	08015c28 	.word	0x08015c28
 8003d24:	08015bc4 	.word	0x08015bc4
 8003d28:	08015c30 	.word	0x08015c30
 8003d2c:	08015c40 	.word	0x08015c40
 8003d30:	40000400 	.word	0x40000400
 8003d34:	42c80000 	.word	0x42c80000
 8003d38:	08015c48 	.word	0x08015c48
 8003d3c:	08015c50 	.word	0x08015c50

08003d40 <GainMenu_DrawMenu>:
			Gain_Aux_Menu_State,
 *	@retval None
 *
 */
void GainMenu_DrawMenu(eSystemState pMenu)
{
 8003d40:	b580      	push	{r7, lr}
 8003d42:	b082      	sub	sp, #8
 8003d44:	af00      	add	r7, sp, #0
 8003d46:	4603      	mov	r3, r0
 8003d48:	71fb      	strb	r3, [r7, #7]
	switch(pMenu)
 8003d4a:	79fb      	ldrb	r3, [r7, #7]
 8003d4c:	2b07      	cmp	r3, #7
 8003d4e:	d007      	beq.n	8003d60 <GainMenu_DrawMenu+0x20>
 8003d50:	2b08      	cmp	r3, #8
 8003d52:	d008      	beq.n	8003d66 <GainMenu_DrawMenu+0x26>
 8003d54:	2b06      	cmp	r3, #6
 8003d56:	d000      	beq.n	8003d5a <GainMenu_DrawMenu+0x1a>
		case Gain_Aux_Menu_State:
			GainMenu_DrawAuxMenu();
			break;

		default:
			break;
 8003d58:	e008      	b.n	8003d6c <GainMenu_DrawMenu+0x2c>
			GainMenu_DrawMainMenu();
 8003d5a:	f000 f80b 	bl	8003d74 <GainMenu_DrawMainMenu>
			break;
 8003d5e:	e005      	b.n	8003d6c <GainMenu_DrawMenu+0x2c>
			GainMenu_DrawSignalMenu();
 8003d60:	f000 f868 	bl	8003e34 <GainMenu_DrawSignalMenu>
			break;
 8003d64:	e002      	b.n	8003d6c <GainMenu_DrawMenu+0x2c>
			GainMenu_DrawAuxMenu();
 8003d66:	f000 f8af 	bl	8003ec8 <GainMenu_DrawAuxMenu>
			break;
 8003d6a:	bf00      	nop

	}
}
 8003d6c:	bf00      	nop
 8003d6e:	3708      	adds	r7, #8
 8003d70:	46bd      	mov	sp, r7
 8003d72:	bd80      	pop	{r7, pc}

08003d74 <GainMenu_DrawMainMenu>:
 *	@param None
 *	@retval None
 *
 */
void GainMenu_DrawMainMenu()
{
 8003d74:	b580      	push	{r7, lr}
 8003d76:	b084      	sub	sp, #16
 8003d78:	af02      	add	r7, sp, #8

	ILI9341_Draw_Text("OUT->GAIN", 	10, 10, BREADTRAIL_FGCOLOUR, 2, BREADTRAIL_BGCOLOUR);
 8003d7a:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8003d7e:	9301      	str	r3, [sp, #4]
 8003d80:	2302      	movs	r3, #2
 8003d82:	9300      	str	r3, [sp, #0]
 8003d84:	2300      	movs	r3, #0
 8003d86:	220a      	movs	r2, #10
 8003d88:	210a      	movs	r1, #10
 8003d8a:	4826      	ldr	r0, [pc, #152]	; (8003e24 <GainMenu_DrawMainMenu+0xb0>)
 8003d8c:	f00c fdfa 	bl	8010984 <ILI9341_Draw_Text>

	DM_DisplayFormattedOutput();
 8003d90:	f7fd f862 	bl	8000e58 <DM_DisplayFormattedOutput>

	// coloured menu btn labels
	ILI9341_Draw_Text("SIGNAL", 5, 	 210, BTN1_TEXT_FGCOLOUR, 2, BTN1_TEXT_BGCOLOUR);
 8003d94:	f240 23fd 	movw	r3, #765	; 0x2fd
 8003d98:	9301      	str	r3, [sp, #4]
 8003d9a:	2302      	movs	r3, #2
 8003d9c:	9300      	str	r3, [sp, #0]
 8003d9e:	2300      	movs	r3, #0
 8003da0:	22d2      	movs	r2, #210	; 0xd2
 8003da2:	2105      	movs	r1, #5
 8003da4:	4820      	ldr	r0, [pc, #128]	; (8003e28 <GainMenu_DrawMainMenu+0xb4>)
 8003da6:	f00c fded 	bl	8010984 <ILI9341_Draw_Text>

	eOutput_mode aux_output_func = SM_GetOutputChannel(AUX_CHANNEL)->func_profile->func;
 8003daa:	2001      	movs	r0, #1
 8003dac:	f002 fe18 	bl	80069e0 <SM_GetOutputChannel>
 8003db0:	4603      	mov	r3, r0
 8003db2:	f8d3 31e8 	ldr.w	r3, [r3, #488]	; 0x1e8
 8003db6:	781b      	ldrb	r3, [r3, #0]
 8003db8:	71fb      	strb	r3, [r7, #7]
	if(aux_output_func == PWM_FUNC_MODE)
 8003dba:	79fb      	ldrb	r3, [r7, #7]
 8003dbc:	2b06      	cmp	r3, #6
 8003dbe:	d10b      	bne.n	8003dd8 <GainMenu_DrawMainMenu+0x64>
	{
		ILI9341_Draw_Text("    ",	100,  210, BTN2_TEXT_FGCOLOUR, 2, BTN2_TEXT_BGCOLOUR);
 8003dc0:	f241 43a2 	movw	r3, #5282	; 0x14a2
 8003dc4:	9301      	str	r3, [sp, #4]
 8003dc6:	2302      	movs	r3, #2
 8003dc8:	9300      	str	r3, [sp, #0]
 8003dca:	2300      	movs	r3, #0
 8003dcc:	22d2      	movs	r2, #210	; 0xd2
 8003dce:	2164      	movs	r1, #100	; 0x64
 8003dd0:	4816      	ldr	r0, [pc, #88]	; (8003e2c <GainMenu_DrawMainMenu+0xb8>)
 8003dd2:	f00c fdd7 	bl	8010984 <ILI9341_Draw_Text>
 8003dd6:	e00a      	b.n	8003dee <GainMenu_DrawMainMenu+0x7a>
	}
	else
	{
		ILI9341_Draw_Text("AUX",	100,  210, BTN2_TEXT_FGCOLOUR, 2, BTN2_TEXT_BGCOLOUR);
 8003dd8:	f241 43a2 	movw	r3, #5282	; 0x14a2
 8003ddc:	9301      	str	r3, [sp, #4]
 8003dde:	2302      	movs	r3, #2
 8003de0:	9300      	str	r3, [sp, #0]
 8003de2:	2300      	movs	r3, #0
 8003de4:	22d2      	movs	r2, #210	; 0xd2
 8003de6:	2164      	movs	r1, #100	; 0x64
 8003de8:	4811      	ldr	r0, [pc, #68]	; (8003e30 <GainMenu_DrawMainMenu+0xbc>)
 8003dea:	f00c fdcb 	bl	8010984 <ILI9341_Draw_Text>
	}

	ILI9341_Draw_Text("    ", 	175, 210, BTN3_TEXT_FGCOLOUR, 2, BTN3_TEXT_BGCOLOUR);
 8003dee:	f64f 73e0 	movw	r3, #65504	; 0xffe0
 8003df2:	9301      	str	r3, [sp, #4]
 8003df4:	2302      	movs	r3, #2
 8003df6:	9300      	str	r3, [sp, #0]
 8003df8:	2300      	movs	r3, #0
 8003dfa:	22d2      	movs	r2, #210	; 0xd2
 8003dfc:	21af      	movs	r1, #175	; 0xaf
 8003dfe:	480b      	ldr	r0, [pc, #44]	; (8003e2c <GainMenu_DrawMainMenu+0xb8>)
 8003e00:	f00c fdc0 	bl	8010984 <ILI9341_Draw_Text>
	ILI9341_Draw_Text("    ", 	260, 210, BTN4_TEXT_FGCOLOUR, 2, BTN4_TEXT_BGCOLOUR);
 8003e04:	f64d 03c3 	movw	r3, #55491	; 0xd8c3
 8003e08:	9301      	str	r3, [sp, #4]
 8003e0a:	2302      	movs	r3, #2
 8003e0c:	9300      	str	r3, [sp, #0]
 8003e0e:	2300      	movs	r3, #0
 8003e10:	22d2      	movs	r2, #210	; 0xd2
 8003e12:	f44f 7182 	mov.w	r1, #260	; 0x104
 8003e16:	4805      	ldr	r0, [pc, #20]	; (8003e2c <GainMenu_DrawMainMenu+0xb8>)
 8003e18:	f00c fdb4 	bl	8010984 <ILI9341_Draw_Text>
}
 8003e1c:	bf00      	nop
 8003e1e:	3708      	adds	r7, #8
 8003e20:	46bd      	mov	sp, r7
 8003e22:	bd80      	pop	{r7, pc}
 8003e24:	08015c58 	.word	0x08015c58
 8003e28:	08015c64 	.word	0x08015c64
 8003e2c:	08015c6c 	.word	0x08015c6c
 8003e30:	08015c74 	.word	0x08015c74

08003e34 <GainMenu_DrawSignalMenu>:
 *	@param None
 *	@retval None
 *
 */
void GainMenu_DrawSignalMenu()
{
 8003e34:	b580      	push	{r7, lr}
 8003e36:	b082      	sub	sp, #8
 8003e38:	af02      	add	r7, sp, #8
	ILI9341_Draw_Text("OUT->GAIN->SIG", 10, 10, BREADTRAIL_FGCOLOUR, 2, BREADTRAIL_BGCOLOUR);
 8003e3a:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8003e3e:	9301      	str	r3, [sp, #4]
 8003e40:	2302      	movs	r3, #2
 8003e42:	9300      	str	r3, [sp, #0]
 8003e44:	2300      	movs	r3, #0
 8003e46:	220a      	movs	r2, #10
 8003e48:	210a      	movs	r1, #10
 8003e4a:	481a      	ldr	r0, [pc, #104]	; (8003eb4 <GainMenu_DrawSignalMenu+0x80>)
 8003e4c:	f00c fd9a 	bl	8010984 <ILI9341_Draw_Text>

	DM_DisplayFormattedOutput();
 8003e50:	f7fd f802 	bl	8000e58 <DM_DisplayFormattedOutput>

	ILI9341_Draw_Text("1.8V", 15,   210, BTN1_TEXT_FGCOLOUR, 2, BTN1_TEXT_BGCOLOUR);
 8003e54:	f240 23fd 	movw	r3, #765	; 0x2fd
 8003e58:	9301      	str	r3, [sp, #4]
 8003e5a:	2302      	movs	r3, #2
 8003e5c:	9300      	str	r3, [sp, #0]
 8003e5e:	2300      	movs	r3, #0
 8003e60:	22d2      	movs	r2, #210	; 0xd2
 8003e62:	210f      	movs	r1, #15
 8003e64:	4814      	ldr	r0, [pc, #80]	; (8003eb8 <GainMenu_DrawSignalMenu+0x84>)
 8003e66:	f00c fd8d 	bl	8010984 <ILI9341_Draw_Text>
	ILI9341_Draw_Text("3.3V", 97,  210, BTN2_TEXT_FGCOLOUR, 2, BTN2_TEXT_BGCOLOUR);
 8003e6a:	f241 43a2 	movw	r3, #5282	; 0x14a2
 8003e6e:	9301      	str	r3, [sp, #4]
 8003e70:	2302      	movs	r3, #2
 8003e72:	9300      	str	r3, [sp, #0]
 8003e74:	2300      	movs	r3, #0
 8003e76:	22d2      	movs	r2, #210	; 0xd2
 8003e78:	2161      	movs	r1, #97	; 0x61
 8003e7a:	4810      	ldr	r0, [pc, #64]	; (8003ebc <GainMenu_DrawSignalMenu+0x88>)
 8003e7c:	f00c fd82 	bl	8010984 <ILI9341_Draw_Text>
	ILI9341_Draw_Text("5V",  190, 210, BTN3_TEXT_FGCOLOUR, 2, BTN3_TEXT_BGCOLOUR);
 8003e80:	f64f 73e0 	movw	r3, #65504	; 0xffe0
 8003e84:	9301      	str	r3, [sp, #4]
 8003e86:	2302      	movs	r3, #2
 8003e88:	9300      	str	r3, [sp, #0]
 8003e8a:	2300      	movs	r3, #0
 8003e8c:	22d2      	movs	r2, #210	; 0xd2
 8003e8e:	21be      	movs	r1, #190	; 0xbe
 8003e90:	480b      	ldr	r0, [pc, #44]	; (8003ec0 <GainMenu_DrawSignalMenu+0x8c>)
 8003e92:	f00c fd77 	bl	8010984 <ILI9341_Draw_Text>
	ILI9341_Draw_Text("9V", 265, 210, BTN4_TEXT_FGCOLOUR, 2, BTN4_TEXT_BGCOLOUR);
 8003e96:	f64d 03c3 	movw	r3, #55491	; 0xd8c3
 8003e9a:	9301      	str	r3, [sp, #4]
 8003e9c:	2302      	movs	r3, #2
 8003e9e:	9300      	str	r3, [sp, #0]
 8003ea0:	2300      	movs	r3, #0
 8003ea2:	22d2      	movs	r2, #210	; 0xd2
 8003ea4:	f240 1109 	movw	r1, #265	; 0x109
 8003ea8:	4806      	ldr	r0, [pc, #24]	; (8003ec4 <GainMenu_DrawSignalMenu+0x90>)
 8003eaa:	f00c fd6b 	bl	8010984 <ILI9341_Draw_Text>
}
 8003eae:	bf00      	nop
 8003eb0:	46bd      	mov	sp, r7
 8003eb2:	bd80      	pop	{r7, pc}
 8003eb4:	08015c78 	.word	0x08015c78
 8003eb8:	08015c88 	.word	0x08015c88
 8003ebc:	08015c90 	.word	0x08015c90
 8003ec0:	08015c98 	.word	0x08015c98
 8003ec4:	08015c9c 	.word	0x08015c9c

08003ec8 <GainMenu_DrawAuxMenu>:
 *	@param None
 *	@retval None
 *
 */
void GainMenu_DrawAuxMenu()
{
 8003ec8:	b580      	push	{r7, lr}
 8003eca:	b082      	sub	sp, #8
 8003ecc:	af02      	add	r7, sp, #8
	ILI9341_Draw_Text("OUT->GAIN->Aux", 10, 10, BREADTRAIL_FGCOLOUR, 2, BREADTRAIL_BGCOLOUR);
 8003ece:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8003ed2:	9301      	str	r3, [sp, #4]
 8003ed4:	2302      	movs	r3, #2
 8003ed6:	9300      	str	r3, [sp, #0]
 8003ed8:	2300      	movs	r3, #0
 8003eda:	220a      	movs	r2, #10
 8003edc:	210a      	movs	r1, #10
 8003ede:	4804      	ldr	r0, [pc, #16]	; (8003ef0 <GainMenu_DrawAuxMenu+0x28>)
 8003ee0:	f00c fd50 	bl	8010984 <ILI9341_Draw_Text>

	DM_DisplayFormattedOutput();
 8003ee4:	f7fc ffb8 	bl	8000e58 <DM_DisplayFormattedOutput>
}
 8003ee8:	bf00      	nop
 8003eea:	46bd      	mov	sp, r7
 8003eec:	bd80      	pop	{r7, pc}
 8003eee:	bf00      	nop
 8003ef0:	08015ca0 	.word	0x08015ca0

08003ef4 <ToplevelMenu_DrawMenu>:
			Toplevel_Input_Menu_State,
 *	@retval None
 *
 */
void ToplevelMenu_DrawMenu(eSystemState pMenu)
{
 8003ef4:	b580      	push	{r7, lr}
 8003ef6:	b082      	sub	sp, #8
 8003ef8:	af00      	add	r7, sp, #0
 8003efa:	4603      	mov	r3, r0
 8003efc:	71fb      	strb	r3, [r7, #7]
	switch(pMenu)
 8003efe:	79fb      	ldrb	r3, [r7, #7]
 8003f00:	2b01      	cmp	r3, #1
 8003f02:	d007      	beq.n	8003f14 <ToplevelMenu_DrawMenu+0x20>
 8003f04:	2b02      	cmp	r3, #2
 8003f06:	d008      	beq.n	8003f1a <ToplevelMenu_DrawMenu+0x26>
 8003f08:	2b00      	cmp	r3, #0
 8003f0a:	d000      	beq.n	8003f0e <ToplevelMenu_DrawMenu+0x1a>
		case Toplevel_Input_Menu_State:
			ToplevelMenu_DrawInputMenu();
			break;

		default:
			break;
 8003f0c:	e008      	b.n	8003f20 <ToplevelMenu_DrawMenu+0x2c>
			ToplevelMenu_DrawMainMenu();
 8003f0e:	f000 f80b 	bl	8003f28 <ToplevelMenu_DrawMainMenu>
			break;
 8003f12:	e005      	b.n	8003f20 <ToplevelMenu_DrawMenu+0x2c>
			ToplevelMenu_DrawOutputMenu();
 8003f14:	f000 f844 	bl	8003fa0 <ToplevelMenu_DrawOutputMenu>
			break;
 8003f18:	e002      	b.n	8003f20 <ToplevelMenu_DrawMenu+0x2c>
			ToplevelMenu_DrawInputMenu();
 8003f1a:	f000 f88b 	bl	8004034 <ToplevelMenu_DrawInputMenu>
			break;
 8003f1e:	bf00      	nop

	}
}
 8003f20:	bf00      	nop
 8003f22:	3708      	adds	r7, #8
 8003f24:	46bd      	mov	sp, r7
 8003f26:	bd80      	pop	{r7, pc}

08003f28 <ToplevelMenu_DrawMainMenu>:
 *	@param None
 *	@retval None
 *
 */
void ToplevelMenu_DrawMainMenu()
{
 8003f28:	b580      	push	{r7, lr}
 8003f2a:	b082      	sub	sp, #8
 8003f2c:	af02      	add	r7, sp, #8
	#endif

	// Main screen
	//ILI9341_Draw_Text("SIGNAL GENERATOR", 	10, 10, WHITE, 2, BLACK);

	DM_DisplayFormattedOutput();
 8003f2e:	f7fc ff93 	bl	8000e58 <DM_DisplayFormattedOutput>

	ILI9341_Draw_Text("OUTPUT", 6, 210, BTN1_TEXT_FGCOLOUR, 2, BTN1_TEXT_BGCOLOUR);
 8003f32:	f240 23fd 	movw	r3, #765	; 0x2fd
 8003f36:	9301      	str	r3, [sp, #4]
 8003f38:	2302      	movs	r3, #2
 8003f3a:	9300      	str	r3, [sp, #0]
 8003f3c:	2300      	movs	r3, #0
 8003f3e:	22d2      	movs	r2, #210	; 0xd2
 8003f40:	2106      	movs	r1, #6
 8003f42:	4814      	ldr	r0, [pc, #80]	; (8003f94 <ToplevelMenu_DrawMainMenu+0x6c>)
 8003f44:	f00c fd1e 	bl	8010984 <ILI9341_Draw_Text>
	ILI9341_Draw_Text("INPUT", 93, 210, BTN2_TEXT_FGCOLOUR, 2, BTN2_TEXT_BGCOLOUR);
 8003f48:	f241 43a2 	movw	r3, #5282	; 0x14a2
 8003f4c:	9301      	str	r3, [sp, #4]
 8003f4e:	2302      	movs	r3, #2
 8003f50:	9300      	str	r3, [sp, #0]
 8003f52:	2300      	movs	r3, #0
 8003f54:	22d2      	movs	r2, #210	; 0xd2
 8003f56:	215d      	movs	r1, #93	; 0x5d
 8003f58:	480f      	ldr	r0, [pc, #60]	; (8003f98 <ToplevelMenu_DrawMainMenu+0x70>)
 8003f5a:	f00c fd13 	bl	8010984 <ILI9341_Draw_Text>
	ILI9341_Draw_Text("    ", 175, 210, BTN3_TEXT_FGCOLOUR, 2, BTN3_TEXT_BGCOLOUR);
 8003f5e:	f64f 73e0 	movw	r3, #65504	; 0xffe0
 8003f62:	9301      	str	r3, [sp, #4]
 8003f64:	2302      	movs	r3, #2
 8003f66:	9300      	str	r3, [sp, #0]
 8003f68:	2300      	movs	r3, #0
 8003f6a:	22d2      	movs	r2, #210	; 0xd2
 8003f6c:	21af      	movs	r1, #175	; 0xaf
 8003f6e:	480b      	ldr	r0, [pc, #44]	; (8003f9c <ToplevelMenu_DrawMainMenu+0x74>)
 8003f70:	f00c fd08 	bl	8010984 <ILI9341_Draw_Text>
	ILI9341_Draw_Text("    ", 260, 210, BTN4_TEXT_FGCOLOUR, 2, BTN4_TEXT_BGCOLOUR);
 8003f74:	f64d 03c3 	movw	r3, #55491	; 0xd8c3
 8003f78:	9301      	str	r3, [sp, #4]
 8003f7a:	2302      	movs	r3, #2
 8003f7c:	9300      	str	r3, [sp, #0]
 8003f7e:	2300      	movs	r3, #0
 8003f80:	22d2      	movs	r2, #210	; 0xd2
 8003f82:	f44f 7182 	mov.w	r1, #260	; 0x104
 8003f86:	4805      	ldr	r0, [pc, #20]	; (8003f9c <ToplevelMenu_DrawMainMenu+0x74>)
 8003f88:	f00c fcfc 	bl	8010984 <ILI9341_Draw_Text>


}
 8003f8c:	bf00      	nop
 8003f8e:	46bd      	mov	sp, r7
 8003f90:	bd80      	pop	{r7, pc}
 8003f92:	bf00      	nop
 8003f94:	08015cb0 	.word	0x08015cb0
 8003f98:	08015cb8 	.word	0x08015cb8
 8003f9c:	08015cc0 	.word	0x08015cc0

08003fa0 <ToplevelMenu_DrawOutputMenu>:
 *	@param None
 *	@retval None
 *
 */
void ToplevelMenu_DrawOutputMenu()
{
 8003fa0:	b580      	push	{r7, lr}
 8003fa2:	b082      	sub	sp, #8
 8003fa4:	af02      	add	r7, sp, #8
	ILI9341_Draw_Text("OUT->", 10, 10, BREADTRAIL_FGCOLOUR, 2, BREADTRAIL_BGCOLOUR);
 8003fa6:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8003faa:	9301      	str	r3, [sp, #4]
 8003fac:	2302      	movs	r3, #2
 8003fae:	9300      	str	r3, [sp, #0]
 8003fb0:	2300      	movs	r3, #0
 8003fb2:	220a      	movs	r2, #10
 8003fb4:	210a      	movs	r1, #10
 8003fb6:	481a      	ldr	r0, [pc, #104]	; (8004020 <ToplevelMenu_DrawOutputMenu+0x80>)
 8003fb8:	f00c fce4 	bl	8010984 <ILI9341_Draw_Text>

	DM_DisplayFormattedOutput();
 8003fbc:	f7fc ff4c 	bl	8000e58 <DM_DisplayFormattedOutput>

	ILI9341_Draw_Text("FUNC", 15,  210, BTN1_TEXT_FGCOLOUR, 2, BTN1_TEXT_BGCOLOUR);
 8003fc0:	f240 23fd 	movw	r3, #765	; 0x2fd
 8003fc4:	9301      	str	r3, [sp, #4]
 8003fc6:	2302      	movs	r3, #2
 8003fc8:	9300      	str	r3, [sp, #0]
 8003fca:	2300      	movs	r3, #0
 8003fcc:	22d2      	movs	r2, #210	; 0xd2
 8003fce:	210f      	movs	r1, #15
 8003fd0:	4814      	ldr	r0, [pc, #80]	; (8004024 <ToplevelMenu_DrawOutputMenu+0x84>)
 8003fd2:	f00c fcd7 	bl	8010984 <ILI9341_Draw_Text>
	ILI9341_Draw_Text("FREQ", 98,  210, BTN2_TEXT_FGCOLOUR, 2, BTN2_TEXT_BGCOLOUR);
 8003fd6:	f241 43a2 	movw	r3, #5282	; 0x14a2
 8003fda:	9301      	str	r3, [sp, #4]
 8003fdc:	2302      	movs	r3, #2
 8003fde:	9300      	str	r3, [sp, #0]
 8003fe0:	2300      	movs	r3, #0
 8003fe2:	22d2      	movs	r2, #210	; 0xd2
 8003fe4:	2162      	movs	r1, #98	; 0x62
 8003fe6:	4810      	ldr	r0, [pc, #64]	; (8004028 <ToplevelMenu_DrawOutputMenu+0x88>)
 8003fe8:	f00c fccc 	bl	8010984 <ILI9341_Draw_Text>
	ILI9341_Draw_Text("GAIN", 176, 210, BTN3_TEXT_FGCOLOUR, 2, BTN3_TEXT_BGCOLOUR);
 8003fec:	f64f 73e0 	movw	r3, #65504	; 0xffe0
 8003ff0:	9301      	str	r3, [sp, #4]
 8003ff2:	2302      	movs	r3, #2
 8003ff4:	9300      	str	r3, [sp, #0]
 8003ff6:	2300      	movs	r3, #0
 8003ff8:	22d2      	movs	r2, #210	; 0xd2
 8003ffa:	21b0      	movs	r1, #176	; 0xb0
 8003ffc:	480b      	ldr	r0, [pc, #44]	; (800402c <ToplevelMenu_DrawOutputMenu+0x8c>)
 8003ffe:	f00c fcc1 	bl	8010984 <ILI9341_Draw_Text>
	ILI9341_Draw_Text("OFFSET", 245, 210, BTN4_TEXT_FGCOLOUR, 2, BTN4_TEXT_BGCOLOUR);
 8004002:	f64d 03c3 	movw	r3, #55491	; 0xd8c3
 8004006:	9301      	str	r3, [sp, #4]
 8004008:	2302      	movs	r3, #2
 800400a:	9300      	str	r3, [sp, #0]
 800400c:	2300      	movs	r3, #0
 800400e:	22d2      	movs	r2, #210	; 0xd2
 8004010:	21f5      	movs	r1, #245	; 0xf5
 8004012:	4807      	ldr	r0, [pc, #28]	; (8004030 <ToplevelMenu_DrawOutputMenu+0x90>)
 8004014:	f00c fcb6 	bl	8010984 <ILI9341_Draw_Text>
}
 8004018:	bf00      	nop
 800401a:	46bd      	mov	sp, r7
 800401c:	bd80      	pop	{r7, pc}
 800401e:	bf00      	nop
 8004020:	08015cc8 	.word	0x08015cc8
 8004024:	08015cd0 	.word	0x08015cd0
 8004028:	08015cd8 	.word	0x08015cd8
 800402c:	08015ce0 	.word	0x08015ce0
 8004030:	08015ce8 	.word	0x08015ce8

08004034 <ToplevelMenu_DrawInputMenu>:
 *	@param None
 *	@retval None
 *
 */
void ToplevelMenu_DrawInputMenu()
{
 8004034:	b580      	push	{r7, lr}
 8004036:	b088      	sub	sp, #32
 8004038:	af02      	add	r7, sp, #8

	DM_DisplayInputTriggerStatus();
 800403a:	f7fc ff2d 	bl	8000e98 <DM_DisplayInputTriggerStatus>

	//
	// BREADCRUMB TRAIL
	//
	ILI9341_Draw_Text("IN->", 10, 10, BREADTRAIL_FGCOLOUR, 2, BREADTRAIL_BGCOLOUR);
 800403e:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8004042:	9301      	str	r3, [sp, #4]
 8004044:	2302      	movs	r3, #2
 8004046:	9300      	str	r3, [sp, #0]
 8004048:	2300      	movs	r3, #0
 800404a:	220a      	movs	r2, #10
 800404c:	210a      	movs	r1, #10
 800404e:	48c3      	ldr	r0, [pc, #780]	; (800435c <ToplevelMenu_DrawInputMenu+0x328>)
 8004050:	f00c fc98 	bl	8010984 <ILI9341_Draw_Text>

	//
	// TRIGGER SETTINGS DISPLAY
	//
	ILI9341_Draw_Text("TRIGGER:", 	10, 50,  NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8004054:	2300      	movs	r3, #0
 8004056:	9301      	str	r3, [sp, #4]
 8004058:	2302      	movs	r3, #2
 800405a:	9300      	str	r3, [sp, #0]
 800405c:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8004060:	2232      	movs	r2, #50	; 0x32
 8004062:	210a      	movs	r1, #10
 8004064:	48be      	ldr	r0, [pc, #760]	; (8004360 <ToplevelMenu_DrawInputMenu+0x32c>)
 8004066:	f00c fc8d 	bl	8010984 <ILI9341_Draw_Text>
	if(IT_GetTriggerStatus())
 800406a:	f002 fb7b 	bl	8006764 <IT_GetTriggerStatus>
 800406e:	4603      	mov	r3, r0
 8004070:	2b00      	cmp	r3, #0
 8004072:	d016      	beq.n	80040a2 <ToplevelMenu_DrawInputMenu+0x6e>
	{
		ILI9341_Draw_Text("ON", 	150, 50,  HIGHLIGHT_TEXT_FGCOLOUR, 2, HIGHLIGHT_TEXT_BGCOLOUR);
 8004074:	f644 43f6 	movw	r3, #19702	; 0x4cf6
 8004078:	9301      	str	r3, [sp, #4]
 800407a:	2302      	movs	r3, #2
 800407c:	9300      	str	r3, [sp, #0]
 800407e:	2300      	movs	r3, #0
 8004080:	2232      	movs	r2, #50	; 0x32
 8004082:	2196      	movs	r1, #150	; 0x96
 8004084:	48b7      	ldr	r0, [pc, #732]	; (8004364 <ToplevelMenu_DrawInputMenu+0x330>)
 8004086:	f00c fc7d 	bl	8010984 <ILI9341_Draw_Text>
		ILI9341_Draw_Text("OFF", 	200, 50,  NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 800408a:	2300      	movs	r3, #0
 800408c:	9301      	str	r3, [sp, #4]
 800408e:	2302      	movs	r3, #2
 8004090:	9300      	str	r3, [sp, #0]
 8004092:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8004096:	2232      	movs	r2, #50	; 0x32
 8004098:	21c8      	movs	r1, #200	; 0xc8
 800409a:	48b3      	ldr	r0, [pc, #716]	; (8004368 <ToplevelMenu_DrawInputMenu+0x334>)
 800409c:	f00c fc72 	bl	8010984 <ILI9341_Draw_Text>
 80040a0:	e015      	b.n	80040ce <ToplevelMenu_DrawInputMenu+0x9a>
	}
	else
	{
		ILI9341_Draw_Text("ON", 	150, 50,  NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 80040a2:	2300      	movs	r3, #0
 80040a4:	9301      	str	r3, [sp, #4]
 80040a6:	2302      	movs	r3, #2
 80040a8:	9300      	str	r3, [sp, #0]
 80040aa:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 80040ae:	2232      	movs	r2, #50	; 0x32
 80040b0:	2196      	movs	r1, #150	; 0x96
 80040b2:	48ac      	ldr	r0, [pc, #688]	; (8004364 <ToplevelMenu_DrawInputMenu+0x330>)
 80040b4:	f00c fc66 	bl	8010984 <ILI9341_Draw_Text>
		ILI9341_Draw_Text("OFF", 	200, 50,  HIGHLIGHT_TEXT_FGCOLOUR, 2, HIGHLIGHT_TEXT_BGCOLOUR);
 80040b8:	f644 43f6 	movw	r3, #19702	; 0x4cf6
 80040bc:	9301      	str	r3, [sp, #4]
 80040be:	2302      	movs	r3, #2
 80040c0:	9300      	str	r3, [sp, #0]
 80040c2:	2300      	movs	r3, #0
 80040c4:	2232      	movs	r2, #50	; 0x32
 80040c6:	21c8      	movs	r1, #200	; 0xc8
 80040c8:	48a7      	ldr	r0, [pc, #668]	; (8004368 <ToplevelMenu_DrawInputMenu+0x334>)
 80040ca:	f00c fc5b 	bl	8010984 <ILI9341_Draw_Text>
	}

	//
	// MODE SETTINGS DISPLAY
	//
	ILI9341_Draw_Text("MODE:", 	10, 70,  NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 80040ce:	2300      	movs	r3, #0
 80040d0:	9301      	str	r3, [sp, #4]
 80040d2:	2302      	movs	r3, #2
 80040d4:	9300      	str	r3, [sp, #0]
 80040d6:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 80040da:	2246      	movs	r2, #70	; 0x46
 80040dc:	210a      	movs	r1, #10
 80040de:	48a3      	ldr	r0, [pc, #652]	; (800436c <ToplevelMenu_DrawInputMenu+0x338>)
 80040e0:	f00c fc50 	bl	8010984 <ILI9341_Draw_Text>
	if(IT_GetActiveTriggerMode() == INPUT_TIMER_TIM)
 80040e4:	f002 fb22 	bl	800672c <IT_GetActiveTriggerMode>
 80040e8:	4603      	mov	r3, r0
 80040ea:	2b00      	cmp	r3, #0
 80040ec:	d122      	bne.n	8004134 <ToplevelMenu_DrawInputMenu+0x100>
	{
		ILI9341_Draw_Text("TIM", 	150, 70,  HIGHLIGHT_TEXT_FGCOLOUR, 2, HIGHLIGHT_TEXT_BGCOLOUR);
 80040ee:	f644 43f6 	movw	r3, #19702	; 0x4cf6
 80040f2:	9301      	str	r3, [sp, #4]
 80040f4:	2302      	movs	r3, #2
 80040f6:	9300      	str	r3, [sp, #0]
 80040f8:	2300      	movs	r3, #0
 80040fa:	2246      	movs	r2, #70	; 0x46
 80040fc:	2196      	movs	r1, #150	; 0x96
 80040fe:	489c      	ldr	r0, [pc, #624]	; (8004370 <ToplevelMenu_DrawInputMenu+0x33c>)
 8004100:	f00c fc40 	bl	8010984 <ILI9341_Draw_Text>
		ILI9341_Draw_Text("COMP", 	200, 70,  NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8004104:	2300      	movs	r3, #0
 8004106:	9301      	str	r3, [sp, #4]
 8004108:	2302      	movs	r3, #2
 800410a:	9300      	str	r3, [sp, #0]
 800410c:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8004110:	2246      	movs	r2, #70	; 0x46
 8004112:	21c8      	movs	r1, #200	; 0xc8
 8004114:	4897      	ldr	r0, [pc, #604]	; (8004374 <ToplevelMenu_DrawInputMenu+0x340>)
 8004116:	f00c fc35 	bl	8010984 <ILI9341_Draw_Text>
		ILI9341_Draw_Text("ADC", 	270, 70,  NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 800411a:	2300      	movs	r3, #0
 800411c:	9301      	str	r3, [sp, #4]
 800411e:	2302      	movs	r3, #2
 8004120:	9300      	str	r3, [sp, #0]
 8004122:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8004126:	2246      	movs	r2, #70	; 0x46
 8004128:	f44f 7187 	mov.w	r1, #270	; 0x10e
 800412c:	4892      	ldr	r0, [pc, #584]	; (8004378 <ToplevelMenu_DrawInputMenu+0x344>)
 800412e:	f00c fc29 	bl	8010984 <ILI9341_Draw_Text>
 8004132:	e04e      	b.n	80041d2 <ToplevelMenu_DrawInputMenu+0x19e>


	}
	else if(IT_GetActiveTriggerMode() == INPUT_TIMER_COMP)
 8004134:	f002 fafa 	bl	800672c <IT_GetActiveTriggerMode>
 8004138:	4603      	mov	r3, r0
 800413a:	2b01      	cmp	r3, #1
 800413c:	d122      	bne.n	8004184 <ToplevelMenu_DrawInputMenu+0x150>
	{
		ILI9341_Draw_Text("TIM", 	150, 70,  NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 800413e:	2300      	movs	r3, #0
 8004140:	9301      	str	r3, [sp, #4]
 8004142:	2302      	movs	r3, #2
 8004144:	9300      	str	r3, [sp, #0]
 8004146:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 800414a:	2246      	movs	r2, #70	; 0x46
 800414c:	2196      	movs	r1, #150	; 0x96
 800414e:	4888      	ldr	r0, [pc, #544]	; (8004370 <ToplevelMenu_DrawInputMenu+0x33c>)
 8004150:	f00c fc18 	bl	8010984 <ILI9341_Draw_Text>
		ILI9341_Draw_Text("COMP", 	200, 70,  HIGHLIGHT_TEXT_FGCOLOUR, 2, HIGHLIGHT_TEXT_BGCOLOUR);
 8004154:	f644 43f6 	movw	r3, #19702	; 0x4cf6
 8004158:	9301      	str	r3, [sp, #4]
 800415a:	2302      	movs	r3, #2
 800415c:	9300      	str	r3, [sp, #0]
 800415e:	2300      	movs	r3, #0
 8004160:	2246      	movs	r2, #70	; 0x46
 8004162:	21c8      	movs	r1, #200	; 0xc8
 8004164:	4883      	ldr	r0, [pc, #524]	; (8004374 <ToplevelMenu_DrawInputMenu+0x340>)
 8004166:	f00c fc0d 	bl	8010984 <ILI9341_Draw_Text>
		ILI9341_Draw_Text("ADC", 	270, 70,  NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 800416a:	2300      	movs	r3, #0
 800416c:	9301      	str	r3, [sp, #4]
 800416e:	2302      	movs	r3, #2
 8004170:	9300      	str	r3, [sp, #0]
 8004172:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8004176:	2246      	movs	r2, #70	; 0x46
 8004178:	f44f 7187 	mov.w	r1, #270	; 0x10e
 800417c:	487e      	ldr	r0, [pc, #504]	; (8004378 <ToplevelMenu_DrawInputMenu+0x344>)
 800417e:	f00c fc01 	bl	8010984 <ILI9341_Draw_Text>
 8004182:	e026      	b.n	80041d2 <ToplevelMenu_DrawInputMenu+0x19e>


	}
	else if(IT_GetActiveTriggerMode() == INPUT_TIMER_ADC)
 8004184:	f002 fad2 	bl	800672c <IT_GetActiveTriggerMode>
 8004188:	4603      	mov	r3, r0
 800418a:	2b02      	cmp	r3, #2
 800418c:	d121      	bne.n	80041d2 <ToplevelMenu_DrawInputMenu+0x19e>
	{
		ILI9341_Draw_Text("TIM", 	150, 70,  NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 800418e:	2300      	movs	r3, #0
 8004190:	9301      	str	r3, [sp, #4]
 8004192:	2302      	movs	r3, #2
 8004194:	9300      	str	r3, [sp, #0]
 8004196:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 800419a:	2246      	movs	r2, #70	; 0x46
 800419c:	2196      	movs	r1, #150	; 0x96
 800419e:	4874      	ldr	r0, [pc, #464]	; (8004370 <ToplevelMenu_DrawInputMenu+0x33c>)
 80041a0:	f00c fbf0 	bl	8010984 <ILI9341_Draw_Text>
		ILI9341_Draw_Text("COMP", 	200, 70,  NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 80041a4:	2300      	movs	r3, #0
 80041a6:	9301      	str	r3, [sp, #4]
 80041a8:	2302      	movs	r3, #2
 80041aa:	9300      	str	r3, [sp, #0]
 80041ac:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 80041b0:	2246      	movs	r2, #70	; 0x46
 80041b2:	21c8      	movs	r1, #200	; 0xc8
 80041b4:	486f      	ldr	r0, [pc, #444]	; (8004374 <ToplevelMenu_DrawInputMenu+0x340>)
 80041b6:	f00c fbe5 	bl	8010984 <ILI9341_Draw_Text>
		ILI9341_Draw_Text("ADC", 	270, 70,  HIGHLIGHT_TEXT_FGCOLOUR, 2, HIGHLIGHT_TEXT_BGCOLOUR);
 80041ba:	f644 43f6 	movw	r3, #19702	; 0x4cf6
 80041be:	9301      	str	r3, [sp, #4]
 80041c0:	2302      	movs	r3, #2
 80041c2:	9300      	str	r3, [sp, #0]
 80041c4:	2300      	movs	r3, #0
 80041c6:	2246      	movs	r2, #70	; 0x46
 80041c8:	f44f 7187 	mov.w	r1, #270	; 0x10e
 80041cc:	486a      	ldr	r0, [pc, #424]	; (8004378 <ToplevelMenu_DrawInputMenu+0x344>)
 80041ce:	f00c fbd9 	bl	8010984 <ILI9341_Draw_Text>
	}

	//
	// LFO/COMPVOLT MODE DISPLAY
	//
	if(IT_GetActiveTriggerMode() == INPUT_TIMER_TIM)
 80041d2:	f002 faab 	bl	800672c <IT_GetActiveTriggerMode>
 80041d6:	4603      	mov	r3, r0
 80041d8:	2b00      	cmp	r3, #0
 80041da:	d13d      	bne.n	8004258 <ToplevelMenu_DrawInputMenu+0x224>
	{
		ILI9341_Draw_Text("LF MODE:", 	10, 90,  NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 80041dc:	2300      	movs	r3, #0
 80041de:	9301      	str	r3, [sp, #4]
 80041e0:	2302      	movs	r3, #2
 80041e2:	9300      	str	r3, [sp, #0]
 80041e4:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 80041e8:	225a      	movs	r2, #90	; 0x5a
 80041ea:	210a      	movs	r1, #10
 80041ec:	4863      	ldr	r0, [pc, #396]	; (800437c <ToplevelMenu_DrawInputMenu+0x348>)
 80041ee:	f00c fbc9 	bl	8010984 <ILI9341_Draw_Text>
		if(INPUT_TIMER->PSC > 128)
 80041f2:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80041f6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80041f8:	2b80      	cmp	r3, #128	; 0x80
 80041fa:	d916      	bls.n	800422a <ToplevelMenu_DrawInputMenu+0x1f6>
		{
			ILI9341_Draw_Text("ON", 	150, 90,  HIGHLIGHT_TEXT_FGCOLOUR, 2, HIGHLIGHT_TEXT_BGCOLOUR);
 80041fc:	f644 43f6 	movw	r3, #19702	; 0x4cf6
 8004200:	9301      	str	r3, [sp, #4]
 8004202:	2302      	movs	r3, #2
 8004204:	9300      	str	r3, [sp, #0]
 8004206:	2300      	movs	r3, #0
 8004208:	225a      	movs	r2, #90	; 0x5a
 800420a:	2196      	movs	r1, #150	; 0x96
 800420c:	4855      	ldr	r0, [pc, #340]	; (8004364 <ToplevelMenu_DrawInputMenu+0x330>)
 800420e:	f00c fbb9 	bl	8010984 <ILI9341_Draw_Text>
			ILI9341_Draw_Text("OFF", 	200, 90,  NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8004212:	2300      	movs	r3, #0
 8004214:	9301      	str	r3, [sp, #4]
 8004216:	2302      	movs	r3, #2
 8004218:	9300      	str	r3, [sp, #0]
 800421a:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 800421e:	225a      	movs	r2, #90	; 0x5a
 8004220:	21c8      	movs	r1, #200	; 0xc8
 8004222:	4851      	ldr	r0, [pc, #324]	; (8004368 <ToplevelMenu_DrawInputMenu+0x334>)
 8004224:	f00c fbae 	bl	8010984 <ILI9341_Draw_Text>
 8004228:	e04f      	b.n	80042ca <ToplevelMenu_DrawInputMenu+0x296>
		}
		else
		{
			ILI9341_Draw_Text("ON", 	150, 90,  NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 800422a:	2300      	movs	r3, #0
 800422c:	9301      	str	r3, [sp, #4]
 800422e:	2302      	movs	r3, #2
 8004230:	9300      	str	r3, [sp, #0]
 8004232:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8004236:	225a      	movs	r2, #90	; 0x5a
 8004238:	2196      	movs	r1, #150	; 0x96
 800423a:	484a      	ldr	r0, [pc, #296]	; (8004364 <ToplevelMenu_DrawInputMenu+0x330>)
 800423c:	f00c fba2 	bl	8010984 <ILI9341_Draw_Text>
			ILI9341_Draw_Text("OFF", 	200, 90,  HIGHLIGHT_TEXT_FGCOLOUR, 2, HIGHLIGHT_TEXT_BGCOLOUR);
 8004240:	f644 43f6 	movw	r3, #19702	; 0x4cf6
 8004244:	9301      	str	r3, [sp, #4]
 8004246:	2302      	movs	r3, #2
 8004248:	9300      	str	r3, [sp, #0]
 800424a:	2300      	movs	r3, #0
 800424c:	225a      	movs	r2, #90	; 0x5a
 800424e:	21c8      	movs	r1, #200	; 0xc8
 8004250:	4845      	ldr	r0, [pc, #276]	; (8004368 <ToplevelMenu_DrawInputMenu+0x334>)
 8004252:	f00c fb97 	bl	8010984 <ILI9341_Draw_Text>
 8004256:	e038      	b.n	80042ca <ToplevelMenu_DrawInputMenu+0x296>
		}


	}
	else if(IT_GetActiveTriggerMode() == INPUT_TIMER_COMP)
 8004258:	f002 fa68 	bl	800672c <IT_GetActiveTriggerMode>
 800425c:	4603      	mov	r3, r0
 800425e:	2b01      	cmp	r3, #1
 8004260:	d128      	bne.n	80042b4 <ToplevelMenu_DrawInputMenu+0x280>
	{
		char comp_text[20] = "";
 8004262:	2300      	movs	r3, #0
 8004264:	607b      	str	r3, [r7, #4]
 8004266:	f107 0308 	add.w	r3, r7, #8
 800426a:	2200      	movs	r2, #0
 800426c:	601a      	str	r2, [r3, #0]
 800426e:	605a      	str	r2, [r3, #4]
 8004270:	609a      	str	r2, [r3, #8]
 8004272:	60da      	str	r2, [r3, #12]
		snprintf(comp_text, sizeof(comp_text), "%lu V", HAL_COMP_GetOutputLevel(&hcomp1));
 8004274:	4842      	ldr	r0, [pc, #264]	; (8004380 <ToplevelMenu_DrawInputMenu+0x34c>)
 8004276:	f006 fee1 	bl	800b03c <HAL_COMP_GetOutputLevel>
 800427a:	4603      	mov	r3, r0
 800427c:	1d38      	adds	r0, r7, #4
 800427e:	4a41      	ldr	r2, [pc, #260]	; (8004384 <ToplevelMenu_DrawInputMenu+0x350>)
 8004280:	2114      	movs	r1, #20
 8004282:	f00d ff3b 	bl	80120fc <sniprintf>
		ILI9341_Draw_Text(comp_text, 150, 90,  HIGHLIGHT_TEXT_FGCOLOUR, 2, HIGHLIGHT_TEXT_BGCOLOUR);
 8004286:	1d38      	adds	r0, r7, #4
 8004288:	f644 43f6 	movw	r3, #19702	; 0x4cf6
 800428c:	9301      	str	r3, [sp, #4]
 800428e:	2302      	movs	r3, #2
 8004290:	9300      	str	r3, [sp, #0]
 8004292:	2300      	movs	r3, #0
 8004294:	225a      	movs	r2, #90	; 0x5a
 8004296:	2196      	movs	r1, #150	; 0x96
 8004298:	f00c fb74 	bl	8010984 <ILI9341_Draw_Text>
		ILI9341_Draw_Text("                ", 	200, 90,  NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 800429c:	2300      	movs	r3, #0
 800429e:	9301      	str	r3, [sp, #4]
 80042a0:	2302      	movs	r3, #2
 80042a2:	9300      	str	r3, [sp, #0]
 80042a4:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 80042a8:	225a      	movs	r2, #90	; 0x5a
 80042aa:	21c8      	movs	r1, #200	; 0xc8
 80042ac:	4836      	ldr	r0, [pc, #216]	; (8004388 <ToplevelMenu_DrawInputMenu+0x354>)
 80042ae:	f00c fb69 	bl	8010984 <ILI9341_Draw_Text>
 80042b2:	e00a      	b.n	80042ca <ToplevelMenu_DrawInputMenu+0x296>
	}
	else
	{
		ILI9341_Draw_Text("                                    ", 	10, 90,  NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 80042b4:	2300      	movs	r3, #0
 80042b6:	9301      	str	r3, [sp, #4]
 80042b8:	2302      	movs	r3, #2
 80042ba:	9300      	str	r3, [sp, #0]
 80042bc:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 80042c0:	225a      	movs	r2, #90	; 0x5a
 80042c2:	210a      	movs	r1, #10
 80042c4:	4831      	ldr	r0, [pc, #196]	; (800438c <ToplevelMenu_DrawInputMenu+0x358>)
 80042c6:	f00c fb5d 	bl	8010984 <ILI9341_Draw_Text>
	}

	//
	// MENU BUTTON DISPLAY
	//
	ILI9341_Draw_Text("ON/", 	20, 	204, BTN1_TEXT_FGCOLOUR, 2, BTN1_TEXT_BGCOLOUR);
 80042ca:	f240 23fd 	movw	r3, #765	; 0x2fd
 80042ce:	9301      	str	r3, [sp, #4]
 80042d0:	2302      	movs	r3, #2
 80042d2:	9300      	str	r3, [sp, #0]
 80042d4:	2300      	movs	r3, #0
 80042d6:	22cc      	movs	r2, #204	; 0xcc
 80042d8:	2114      	movs	r1, #20
 80042da:	482d      	ldr	r0, [pc, #180]	; (8004390 <ToplevelMenu_DrawInputMenu+0x35c>)
 80042dc:	f00c fb52 	bl	8010984 <ILI9341_Draw_Text>
	ILI9341_Draw_Text("OFF ",	20, 	222, BTN1_TEXT_FGCOLOUR, 2, BTN1_TEXT_BGCOLOUR);
 80042e0:	f240 23fd 	movw	r3, #765	; 0x2fd
 80042e4:	9301      	str	r3, [sp, #4]
 80042e6:	2302      	movs	r3, #2
 80042e8:	9300      	str	r3, [sp, #0]
 80042ea:	2300      	movs	r3, #0
 80042ec:	22de      	movs	r2, #222	; 0xde
 80042ee:	2114      	movs	r1, #20
 80042f0:	4828      	ldr	r0, [pc, #160]	; (8004394 <ToplevelMenu_DrawInputMenu+0x360>)
 80042f2:	f00c fb47 	bl	8010984 <ILI9341_Draw_Text>

	ILI9341_Draw_Text("SET", 	104,	204, BTN2_TEXT_FGCOLOUR, 2, BTN2_TEXT_BGCOLOUR);
 80042f6:	f241 43a2 	movw	r3, #5282	; 0x14a2
 80042fa:	9301      	str	r3, [sp, #4]
 80042fc:	2302      	movs	r3, #2
 80042fe:	9300      	str	r3, [sp, #0]
 8004300:	2300      	movs	r3, #0
 8004302:	22cc      	movs	r2, #204	; 0xcc
 8004304:	2168      	movs	r1, #104	; 0x68
 8004306:	4824      	ldr	r0, [pc, #144]	; (8004398 <ToplevelMenu_DrawInputMenu+0x364>)
 8004308:	f00c fb3c 	bl	8010984 <ILI9341_Draw_Text>
	ILI9341_Draw_Text("MODE",	97, 	222, BTN2_TEXT_FGCOLOUR, 2, BTN2_TEXT_BGCOLOUR);
 800430c:	f241 43a2 	movw	r3, #5282	; 0x14a2
 8004310:	9301      	str	r3, [sp, #4]
 8004312:	2302      	movs	r3, #2
 8004314:	9300      	str	r3, [sp, #0]
 8004316:	2300      	movs	r3, #0
 8004318:	22de      	movs	r2, #222	; 0xde
 800431a:	2161      	movs	r1, #97	; 0x61
 800431c:	481f      	ldr	r0, [pc, #124]	; (800439c <ToplevelMenu_DrawInputMenu+0x368>)
 800431e:	f00c fb31 	bl	8010984 <ILI9341_Draw_Text>

	if(IT_GetActiveTriggerMode() == INPUT_TIMER_TIM)
 8004322:	f002 fa03 	bl	800672c <IT_GetActiveTriggerMode>
 8004326:	4603      	mov	r3, r0
 8004328:	2b00      	cmp	r3, #0
 800432a:	d13b      	bne.n	80043a4 <ToplevelMenu_DrawInputMenu+0x370>
	{
		// draw additional "LFO Mode" menu option
		ILI9341_Draw_Text("LF", 	190,	204, BTN3_TEXT_FGCOLOUR, 2, BTN3_TEXT_BGCOLOUR);
 800432c:	f64f 73e0 	movw	r3, #65504	; 0xffe0
 8004330:	9301      	str	r3, [sp, #4]
 8004332:	2302      	movs	r3, #2
 8004334:	9300      	str	r3, [sp, #0]
 8004336:	2300      	movs	r3, #0
 8004338:	22cc      	movs	r2, #204	; 0xcc
 800433a:	21be      	movs	r1, #190	; 0xbe
 800433c:	4818      	ldr	r0, [pc, #96]	; (80043a0 <ToplevelMenu_DrawInputMenu+0x36c>)
 800433e:	f00c fb21 	bl	8010984 <ILI9341_Draw_Text>
		ILI9341_Draw_Text("MODE",	175, 	222, BTN3_TEXT_FGCOLOUR, 2, BTN3_TEXT_BGCOLOUR);
 8004342:	f64f 73e0 	movw	r3, #65504	; 0xffe0
 8004346:	9301      	str	r3, [sp, #4]
 8004348:	2302      	movs	r3, #2
 800434a:	9300      	str	r3, [sp, #0]
 800434c:	2300      	movs	r3, #0
 800434e:	22de      	movs	r2, #222	; 0xde
 8004350:	21af      	movs	r1, #175	; 0xaf
 8004352:	4812      	ldr	r0, [pc, #72]	; (800439c <ToplevelMenu_DrawInputMenu+0x368>)
 8004354:	f00c fb16 	bl	8010984 <ILI9341_Draw_Text>
 8004358:	e03a      	b.n	80043d0 <ToplevelMenu_DrawInputMenu+0x39c>
 800435a:	bf00      	nop
 800435c:	08015cf0 	.word	0x08015cf0
 8004360:	08015cf8 	.word	0x08015cf8
 8004364:	08015d04 	.word	0x08015d04
 8004368:	08015d08 	.word	0x08015d08
 800436c:	08015d0c 	.word	0x08015d0c
 8004370:	08015d14 	.word	0x08015d14
 8004374:	08015d18 	.word	0x08015d18
 8004378:	08015d20 	.word	0x08015d20
 800437c:	08015d24 	.word	0x08015d24
 8004380:	200028f4 	.word	0x200028f4
 8004384:	08015d30 	.word	0x08015d30
 8004388:	08015d38 	.word	0x08015d38
 800438c:	08015d4c 	.word	0x08015d4c
 8004390:	08015d74 	.word	0x08015d74
 8004394:	08015d78 	.word	0x08015d78
 8004398:	08015d80 	.word	0x08015d80
 800439c:	08015d84 	.word	0x08015d84
 80043a0:	08015d8c 	.word	0x08015d8c
	}
	else
	{
		// draw no additional menu option
		ILI9341_Draw_Text("   ", 	183,	204, BTN3_TEXT_FGCOLOUR, 2, BTN3_TEXT_BGCOLOUR);
 80043a4:	f64f 73e0 	movw	r3, #65504	; 0xffe0
 80043a8:	9301      	str	r3, [sp, #4]
 80043aa:	2302      	movs	r3, #2
 80043ac:	9300      	str	r3, [sp, #0]
 80043ae:	2300      	movs	r3, #0
 80043b0:	22cc      	movs	r2, #204	; 0xcc
 80043b2:	21b7      	movs	r1, #183	; 0xb7
 80043b4:	480a      	ldr	r0, [pc, #40]	; (80043e0 <ToplevelMenu_DrawInputMenu+0x3ac>)
 80043b6:	f00c fae5 	bl	8010984 <ILI9341_Draw_Text>
		ILI9341_Draw_Text("    ",	173, 	222, BTN3_TEXT_FGCOLOUR, 2, BTN3_TEXT_BGCOLOUR);
 80043ba:	f64f 73e0 	movw	r3, #65504	; 0xffe0
 80043be:	9301      	str	r3, [sp, #4]
 80043c0:	2302      	movs	r3, #2
 80043c2:	9300      	str	r3, [sp, #0]
 80043c4:	2300      	movs	r3, #0
 80043c6:	22de      	movs	r2, #222	; 0xde
 80043c8:	21ad      	movs	r1, #173	; 0xad
 80043ca:	4806      	ldr	r0, [pc, #24]	; (80043e4 <ToplevelMenu_DrawInputMenu+0x3b0>)
 80043cc:	f00c fada 	bl	8010984 <ILI9341_Draw_Text>
	}

	DM_DisplayInputTriggerData(200, 17);
 80043d0:	2111      	movs	r1, #17
 80043d2:	20c8      	movs	r0, #200	; 0xc8
 80043d4:	f7fc fde6 	bl	8000fa4 <DM_DisplayInputTriggerData>

/*
	ILI9341_Draw_Text("SET", 	263, 	204, BTN4_TEXT_FGCOLOUR, 2, BTN4_TEXT_BGCOLOUR);
	ILI9341_Draw_Text("LIMIT", 	252, 	222, BTN4_TEXT_FGCOLOUR, 2, BTN4_TEXT_BGCOLOUR);
*/
}
 80043d8:	bf00      	nop
 80043da:	3718      	adds	r7, #24
 80043dc:	46bd      	mov	sp, r7
 80043de:	bd80      	pop	{r7, pc}
 80043e0:	08015d90 	.word	0x08015d90
 80043e4:	08015cc0 	.word	0x08015cc0

080043e8 <BiasMenuEntryHandler>:
 *	@param None
 *	@retval None
 *
 */
eSystemState BiasMenuEntryHandler()
{
 80043e8:	b580      	push	{r7, lr}
 80043ea:	af00      	add	r7, sp, #0
	#ifdef EVENT_MENU_DEBUG
		printf("BiasMenuEntryHandler Event captured\n");
	#endif

	DM_RefreshScreen();
 80043ec:	f7fd fa54 	bl	8001898 <DM_RefreshScreen>

	//_setBiasMenuStatus(ENABLE_BIAS_MENU);

	ENCODER_TIMER->ARR = BIAS_MAX;
 80043f0:	4b07      	ldr	r3, [pc, #28]	; (8004410 <BiasMenuEntryHandler+0x28>)
 80043f2:	f44f 7248 	mov.w	r2, #800	; 0x320
 80043f6:	62da      	str	r2, [r3, #44]	; 0x2c
	ENCODER_TIMER->CNT = BO_GetDcBiasEncoderValue();
 80043f8:	f001 f8f4 	bl	80055e4 <BO_GetDcBiasEncoderValue>
 80043fc:	4603      	mov	r3, r0
 80043fe:	461a      	mov	r2, r3
 8004400:	4b03      	ldr	r3, [pc, #12]	; (8004410 <BiasMenuEntryHandler+0x28>)
 8004402:	625a      	str	r2, [r3, #36]	; 0x24

	eNewEvent = evIdle;
 8004404:	4b03      	ldr	r3, [pc, #12]	; (8004414 <BiasMenuEntryHandler+0x2c>)
 8004406:	2200      	movs	r2, #0
 8004408:	701a      	strb	r2, [r3, #0]
	return Bias_Menu_State;
 800440a:	230f      	movs	r3, #15
}
 800440c:	4618      	mov	r0, r3
 800440e:	bd80      	pop	{r7, pc}
 8004410:	40012c00 	.word	0x40012c00
 8004414:	200020d2 	.word	0x200020d2

08004418 <BiasMenuInputHandler>:
 *	@param None
 *	@retval None
 *
 */
eSystemState BiasMenuInputHandler(eSystemEvent pEvent)
{
 8004418:	b580      	push	{r7, lr}
 800441a:	b082      	sub	sp, #8
 800441c:	af00      	add	r7, sp, #0
 800441e:	4603      	mov	r3, r0
 8004420:	71fb      	strb	r3, [r7, #7]
	#ifdef EVENT_MENU_DEBUG
		printf("BiasMenuInputHandler Event captured\n");
	#endif


	switch(pEvent)
 8004422:	79fb      	ldrb	r3, [r7, #7]
 8004424:	3b01      	subs	r3, #1
 8004426:	2b04      	cmp	r3, #4
 8004428:	d82d      	bhi.n	8004486 <BiasMenuInputHandler+0x6e>
 800442a:	a201      	add	r2, pc, #4	; (adr r2, 8004430 <BiasMenuInputHandler+0x18>)
 800442c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004430:	08004455 	.word	0x08004455
 8004434:	08004467 	.word	0x08004467
 8004438:	08004475 	.word	0x08004475
 800443c:	08004487 	.word	0x08004487
 8004440:	08004445 	.word	0x08004445
	{
		case evEncoderSet:
			BO_MapEncoderPositionToSignalOutput(SM_GetEncoderValue(ENCODER_NORMAL));
 8004444:	2000      	movs	r0, #0
 8004446:	f002 fd47 	bl	8006ed8 <SM_GetEncoderValue>
 800444a:	4603      	mov	r3, r0
 800444c:	4618      	mov	r0, r3
 800444e:	f001 f8d5 	bl	80055fc <BO_MapEncoderPositionToSignalOutput>
			break;
 8004452:	e019      	b.n	8004488 <BiasMenuInputHandler+0x70>
		case evBlueBtn:
			BO_MapEncoderPositionToSignalOutput(BIAS_MAX);
 8004454:	f44f 7048 	mov.w	r0, #800	; 0x320
 8004458:	f001 f8d0 	bl	80055fc <BO_MapEncoderPositionToSignalOutput>
			ENCODER_TIMER->CNT = BIAS_MAX;
 800445c:	4b0e      	ldr	r3, [pc, #56]	; (8004498 <BiasMenuInputHandler+0x80>)
 800445e:	f44f 7248 	mov.w	r2, #800	; 0x320
 8004462:	625a      	str	r2, [r3, #36]	; 0x24
			break;
 8004464:	e010      	b.n	8004488 <BiasMenuInputHandler+0x70>
		case evGreenBtn:
			BO_MapEncoderPositionToSignalOutput(10);
 8004466:	200a      	movs	r0, #10
 8004468:	f001 f8c8 	bl	80055fc <BO_MapEncoderPositionToSignalOutput>
			ENCODER_TIMER->CNT = 10;
 800446c:	4b0a      	ldr	r3, [pc, #40]	; (8004498 <BiasMenuInputHandler+0x80>)
 800446e:	220a      	movs	r2, #10
 8004470:	625a      	str	r2, [r3, #36]	; 0x24
			break;
 8004472:	e009      	b.n	8004488 <BiasMenuInputHandler+0x70>
		case evYellowBtn:
			// jump to zero crossing point
			BO_MapEncoderPositionToSignalOutput(BIAS_CENTER);
 8004474:	f44f 70c8 	mov.w	r0, #400	; 0x190
 8004478:	f001 f8c0 	bl	80055fc <BO_MapEncoderPositionToSignalOutput>
			ENCODER_TIMER->CNT = BIAS_CENTER;
 800447c:	4b06      	ldr	r3, [pc, #24]	; (8004498 <BiasMenuInputHandler+0x80>)
 800447e:	f44f 72c8 	mov.w	r2, #400	; 0x190
 8004482:	625a      	str	r2, [r3, #36]	; 0x24
			break;
 8004484:	e000      	b.n	8004488 <BiasMenuInputHandler+0x70>

		default:
			break;
 8004486:	bf00      	nop
	}


	eNewEvent = evIdle;
 8004488:	4b04      	ldr	r3, [pc, #16]	; (800449c <BiasMenuInputHandler+0x84>)
 800448a:	2200      	movs	r2, #0
 800448c:	701a      	strb	r2, [r3, #0]
	return Bias_Menu_State;
 800448e:	230f      	movs	r3, #15
}
 8004490:	4618      	mov	r0, r3
 8004492:	3708      	adds	r7, #8
 8004494:	46bd      	mov	sp, r7
 8004496:	bd80      	pop	{r7, pc}
 8004498:	40012c00 	.word	0x40012c00
 800449c:	200020d2 	.word	0x200020d2

080044a0 <BiasMenuExitHandler>:
 *	@param None
 *	@retval None
 *
 */
eSystemState BiasMenuExitHandler()
{
 80044a0:	b580      	push	{r7, lr}
 80044a2:	af00      	add	r7, sp, #0
	#endif

	// disable the menu
	//_setBiasMenuStatus(DISABLE_BIAS_MENU);

	DM_RefreshScreen();
 80044a4:	f7fd f9f8 	bl	8001898 <DM_RefreshScreen>

	#ifdef EVENT_MENU_DEBUG
		  printf("returning to Idle State\n");
	#endif

	eNewEvent = evIdle;
 80044a8:	4b02      	ldr	r3, [pc, #8]	; (80044b4 <BiasMenuExitHandler+0x14>)
 80044aa:	2200      	movs	r2, #0
 80044ac:	701a      	strb	r2, [r3, #0]
	return Toplevel_Output_Menu_State;
 80044ae:	2301      	movs	r3, #1
}
 80044b0:	4618      	mov	r0, r3
 80044b2:	bd80      	pop	{r7, pc}
 80044b4:	200020d2 	.word	0x200020d2

080044b8 <EM_ProcessEvent>:
 *	@param None
 *	@retval None
 *
 */
void EM_ProcessEvent()
{
 80044b8:	b580      	push	{r7, lr}
 80044ba:	af00      	add	r7, sp, #0

	switch(eNextState)
 80044bc:	4b2b      	ldr	r3, [pc, #172]	; (800456c <EM_ProcessEvent+0xb4>)
 80044be:	781b      	ldrb	r3, [r3, #0]
 80044c0:	2b0f      	cmp	r3, #15
 80044c2:	d850      	bhi.n	8004566 <EM_ProcessEvent+0xae>
 80044c4:	a201      	add	r2, pc, #4	; (adr r2, 80044cc <EM_ProcessEvent+0x14>)
 80044c6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80044ca:	bf00      	nop
 80044cc:	0800450d 	.word	0x0800450d
 80044d0:	08004513 	.word	0x08004513
 80044d4:	08004519 	.word	0x08004519
 80044d8:	0800451f 	.word	0x0800451f
 80044dc:	08004525 	.word	0x08004525
 80044e0:	0800452b 	.word	0x0800452b
 80044e4:	08004531 	.word	0x08004531
 80044e8:	08004537 	.word	0x08004537
 80044ec:	0800453d 	.word	0x0800453d
 80044f0:	08004567 	.word	0x08004567
 80044f4:	08004543 	.word	0x08004543
 80044f8:	08004549 	.word	0x08004549
 80044fc:	0800454f 	.word	0x0800454f
 8004500:	0800455b 	.word	0x0800455b
 8004504:	08004555 	.word	0x08004555
 8004508:	08004561 	.word	0x08004561
	{

// MAIN MENU
		case Idle_State:

			_ProcessIdleStateEvents();
 800450c:	f000 f830 	bl	8004570 <_ProcessIdleStateEvents>
			break;
 8004510:	e02a      	b.n	8004568 <EM_ProcessEvent+0xb0>

		case Toplevel_Output_Menu_State:

			_ProcessTopLevelOutputMenuStateEvents();
 8004512:	f000 f849 	bl	80045a8 <_ProcessTopLevelOutputMenuStateEvents>
			break;
 8004516:	e027      	b.n	8004568 <EM_ProcessEvent+0xb0>

		case Toplevel_Input_Menu_State:

			_ProcessTopLevelInputMenuStateEvents();
 8004518:	f000 f880 	bl	800461c <_ProcessTopLevelInputMenuStateEvents>
			break;
 800451c:	e024      	b.n	8004568 <EM_ProcessEvent+0xb0>

// FUNC MENUS

		case Func_Main_Menu_State:

			_ProcessFuncMainMenuStateEvents();
 800451e:	f000 f8a9 	bl	8004674 <_ProcessFuncMainMenuStateEvents>
			break;
 8004522:	e021      	b.n	8004568 <EM_ProcessEvent+0xb0>

		case Func_Signal_Menu_State:

			_ProcessFuncSignalMenuStateEvents();
 8004524:	f000 f8cc 	bl	80046c0 <_ProcessFuncSignalMenuStateEvents>
			break;
 8004528:	e01e      	b.n	8004568 <EM_ProcessEvent+0xb0>

		case Func_Aux_Menu_State:

			_ProcessFuncAuxMenuStateEvents();
 800452a:	f000 f8e5 	bl	80046f8 <_ProcessFuncAuxMenuStateEvents>
			break;
 800452e:	e01b      	b.n	8004568 <EM_ProcessEvent+0xb0>

// GAIN MENUS

		case Gain_Main_Menu_State:

			_ProcessGainMainMenuStateEvents();
 8004530:	f000 f908 	bl	8004744 <_ProcessGainMainMenuStateEvents>
			break;
 8004534:	e018      	b.n	8004568 <EM_ProcessEvent+0xb0>

		case Gain_Signal_Menu_State:

			_ProcessGainSignalMenuStateEvents();
 8004536:	f000 f939 	bl	80047ac <_ProcessGainSignalMenuStateEvents>
			break;
 800453a:	e015      	b.n	8004568 <EM_ProcessEvent+0xb0>

		case Gain_Aux_Menu_State:

			_ProcessGainAuxMenuStateEvents();
 800453c:	f000 f980 	bl	8004840 <_ProcessGainAuxMenuStateEvents>
			break;
 8004540:	e012      	b.n	8004568 <EM_ProcessEvent+0xb0>

// FREQ MENUS

		case Freq_Main_Menu_State:

			_ProcessFreqMainMenuStateEvents();
 8004542:	f000 f999 	bl	8004878 <_ProcessFreqMainMenuStateEvents>
			break;
 8004546:	e00f      	b.n	8004568 <EM_ProcessEvent+0xb0>

		case Freq_Preset_Menu_State:

			_ProcessFreqPresetMenuStateEvents();
 8004548:	f000 f9d0 	bl	80048ec <_ProcessFreqPresetMenuStateEvents>
			break;
 800454c:	e00c      	b.n	8004568 <EM_ProcessEvent+0xb0>

		case Freq_Adjust_Menu_State:

			_ProcessFreqAdjustMenuState();
 800454e:	f000 f9e9 	bl	8004924 <_ProcessFreqAdjustMenuState>
			break;
 8004552:	e009      	b.n	8004568 <EM_ProcessEvent+0xb0>

		case Freq_Prescaler_Menu_State:

			_ProcessFreqPrescalerMenuStateEvents();
 8004554:	f000 fa02 	bl	800495c <_ProcessFreqPrescalerMenuStateEvents>
			break;
 8004558:	e006      	b.n	8004568 <EM_ProcessEvent+0xb0>


		case Freq_Sweep_Menu_State:

			_ProcessFreqSweepMenuStateEvents();
 800455a:	f000 fa1b 	bl	8004994 <_ProcessFreqSweepMenuStateEvents>
			break;
 800455e:	e003      	b.n	8004568 <EM_ProcessEvent+0xb0>

// BIAS MENUS

		case Bias_Menu_State:

			_ProcessBiasMainMenuEvents();
 8004560:	f000 fa62 	bl	8004a28 <_ProcessBiasMainMenuEvents>
			break;
 8004564:	e000      	b.n	8004568 <EM_ProcessEvent+0xb0>

		default:
			break;
 8004566:	bf00      	nop
	}

}
 8004568:	bf00      	nop
 800456a:	bd80      	pop	{r7, pc}
 800456c:	200020d1 	.word	0x200020d1

08004570 <_ProcessIdleStateEvents>:
 *	@param None
 *	@retval None
 *
 */
void _ProcessIdleStateEvents()
{
 8004570:	b580      	push	{r7, lr}
 8004572:	af00      	add	r7, sp, #0
	#ifdef EVENT_MENU_DEBUG
	  printf("Idle_State\n");
	#endif

	if(eNewEvent == evBlueBtn)
 8004574:	4b0a      	ldr	r3, [pc, #40]	; (80045a0 <_ProcessIdleStateEvents+0x30>)
 8004576:	781b      	ldrb	r3, [r3, #0]
 8004578:	2b01      	cmp	r3, #1
 800457a:	d105      	bne.n	8004588 <_ProcessIdleStateEvents+0x18>
	{
		eNextState = ToplevelOutputMenuEntryHandler();
 800457c:	f000 fe66 	bl	800524c <ToplevelOutputMenuEntryHandler>
 8004580:	4603      	mov	r3, r0
 8004582:	461a      	mov	r2, r3
 8004584:	4b07      	ldr	r3, [pc, #28]	; (80045a4 <_ProcessIdleStateEvents+0x34>)
 8004586:	701a      	strb	r2, [r3, #0]
	}
	if(eNewEvent == evGreenBtn)
 8004588:	4b05      	ldr	r3, [pc, #20]	; (80045a0 <_ProcessIdleStateEvents+0x30>)
 800458a:	781b      	ldrb	r3, [r3, #0]
 800458c:	2b02      	cmp	r3, #2
 800458e:	d105      	bne.n	800459c <_ProcessIdleStateEvents+0x2c>
	{
		eNextState = ToplevelInputMenuEntryHandler();
 8004590:	f000 fe74 	bl	800527c <ToplevelInputMenuEntryHandler>
 8004594:	4603      	mov	r3, r0
 8004596:	461a      	mov	r2, r3
 8004598:	4b02      	ldr	r3, [pc, #8]	; (80045a4 <_ProcessIdleStateEvents+0x34>)
 800459a:	701a      	strb	r2, [r3, #0]
	}
	if(eNewEvent == evRedBtn)
	{
		// no menu action
	}
}
 800459c:	bf00      	nop
 800459e:	bd80      	pop	{r7, pc}
 80045a0:	200020d2 	.word	0x200020d2
 80045a4:	200020d1 	.word	0x200020d1

080045a8 <_ProcessTopLevelOutputMenuStateEvents>:
 *	@param None
 *	@retval None
 *
 */
void _ProcessTopLevelOutputMenuStateEvents()
{
 80045a8:	b580      	push	{r7, lr}
 80045aa:	af00      	add	r7, sp, #0
	#ifdef EVENT_MENU_DEBUG
	  printf("Toplevel_Output_Menu_State\n");
	#endif

	if(eNewEvent == evEncoderPush)
 80045ac:	4b19      	ldr	r3, [pc, #100]	; (8004614 <_ProcessTopLevelOutputMenuStateEvents+0x6c>)
 80045ae:	781b      	ldrb	r3, [r3, #0]
 80045b0:	2b06      	cmp	r3, #6
 80045b2:	d105      	bne.n	80045c0 <_ProcessTopLevelOutputMenuStateEvents+0x18>
	{
		eNextState = ToplevelOutputMenuExitHandler();
 80045b4:	f000 fe56 	bl	8005264 <ToplevelOutputMenuExitHandler>
 80045b8:	4603      	mov	r3, r0
 80045ba:	461a      	mov	r2, r3
 80045bc:	4b16      	ldr	r3, [pc, #88]	; (8004618 <_ProcessTopLevelOutputMenuStateEvents+0x70>)
 80045be:	701a      	strb	r2, [r3, #0]
	}
	if(eNewEvent == evBlueBtn)
 80045c0:	4b14      	ldr	r3, [pc, #80]	; (8004614 <_ProcessTopLevelOutputMenuStateEvents+0x6c>)
 80045c2:	781b      	ldrb	r3, [r3, #0]
 80045c4:	2b01      	cmp	r3, #1
 80045c6:	d105      	bne.n	80045d4 <_ProcessTopLevelOutputMenuStateEvents+0x2c>
	{
		//ToplevelMenu_setStatus(DISABLE_TOPLEVEL_MENU);
		eNextState = FuncMainMenuEntryHandler();
 80045c8:	f000 fc8c 	bl	8004ee4 <FuncMainMenuEntryHandler>
 80045cc:	4603      	mov	r3, r0
 80045ce:	461a      	mov	r2, r3
 80045d0:	4b11      	ldr	r3, [pc, #68]	; (8004618 <_ProcessTopLevelOutputMenuStateEvents+0x70>)
 80045d2:	701a      	strb	r2, [r3, #0]
	}
	if(eNewEvent == evGreenBtn)
 80045d4:	4b0f      	ldr	r3, [pc, #60]	; (8004614 <_ProcessTopLevelOutputMenuStateEvents+0x6c>)
 80045d6:	781b      	ldrb	r3, [r3, #0]
 80045d8:	2b02      	cmp	r3, #2
 80045da:	d105      	bne.n	80045e8 <_ProcessTopLevelOutputMenuStateEvents+0x40>
	{
		//ToplevelMenu_setStatus(DISABLE_TOPLEVEL_MENU);
		eNextState = FreqMainMenuEntryHandler();
 80045dc:	f000 fbc0 	bl	8004d60 <FreqMainMenuEntryHandler>
 80045e0:	4603      	mov	r3, r0
 80045e2:	461a      	mov	r2, r3
 80045e4:	4b0c      	ldr	r3, [pc, #48]	; (8004618 <_ProcessTopLevelOutputMenuStateEvents+0x70>)
 80045e6:	701a      	strb	r2, [r3, #0]
	}
	if(eNewEvent == evYellowBtn)
 80045e8:	4b0a      	ldr	r3, [pc, #40]	; (8004614 <_ProcessTopLevelOutputMenuStateEvents+0x6c>)
 80045ea:	781b      	ldrb	r3, [r3, #0]
 80045ec:	2b03      	cmp	r3, #3
 80045ee:	d105      	bne.n	80045fc <_ProcessTopLevelOutputMenuStateEvents+0x54>
	{
		//ToplevelMenu_setStatus(DISABLE_TOPLEVEL_MENU);
		eNextState = GainMainMenuEntryHandler();
 80045f0:	f000 fd3e 	bl	8005070 <GainMainMenuEntryHandler>
 80045f4:	4603      	mov	r3, r0
 80045f6:	461a      	mov	r2, r3
 80045f8:	4b07      	ldr	r3, [pc, #28]	; (8004618 <_ProcessTopLevelOutputMenuStateEvents+0x70>)
 80045fa:	701a      	strb	r2, [r3, #0]
	}
	if(eNewEvent == evRedBtn)
 80045fc:	4b05      	ldr	r3, [pc, #20]	; (8004614 <_ProcessTopLevelOutputMenuStateEvents+0x6c>)
 80045fe:	781b      	ldrb	r3, [r3, #0]
 8004600:	2b04      	cmp	r3, #4
 8004602:	d105      	bne.n	8004610 <_ProcessTopLevelOutputMenuStateEvents+0x68>
	{
		//ToplevelMenu_setStatus(DISABLE_TOPLEVEL_MENU);
		eNextState = BiasMenuEntryHandler();
 8004604:	f7ff fef0 	bl	80043e8 <BiasMenuEntryHandler>
 8004608:	4603      	mov	r3, r0
 800460a:	461a      	mov	r2, r3
 800460c:	4b02      	ldr	r3, [pc, #8]	; (8004618 <_ProcessTopLevelOutputMenuStateEvents+0x70>)
 800460e:	701a      	strb	r2, [r3, #0]
	}
}
 8004610:	bf00      	nop
 8004612:	bd80      	pop	{r7, pc}
 8004614:	200020d2 	.word	0x200020d2
 8004618:	200020d1 	.word	0x200020d1

0800461c <_ProcessTopLevelInputMenuStateEvents>:
 *	@param None
 *	@retval None
 *
 */
void _ProcessTopLevelInputMenuStateEvents()
{
 800461c:	b580      	push	{r7, lr}
 800461e:	af00      	add	r7, sp, #0
	#ifdef EVENT_MENU_DEBUG
	  printf("Toplevel_Input_Menu_State\n");
	#endif

	if(eNewEvent == evEncoderPush)
 8004620:	4b12      	ldr	r3, [pc, #72]	; (800466c <_ProcessTopLevelInputMenuStateEvents+0x50>)
 8004622:	781b      	ldrb	r3, [r3, #0]
 8004624:	2b06      	cmp	r3, #6
 8004626:	d105      	bne.n	8004634 <_ProcessTopLevelInputMenuStateEvents+0x18>
	{
		eNextState = ToplevelInputMenuExitHandler();
 8004628:	f000 fe56 	bl	80052d8 <ToplevelInputMenuExitHandler>
 800462c:	4603      	mov	r3, r0
 800462e:	461a      	mov	r2, r3
 8004630:	4b0f      	ldr	r3, [pc, #60]	; (8004670 <_ProcessTopLevelInputMenuStateEvents+0x54>)
 8004632:	701a      	strb	r2, [r3, #0]
	}
	if(eNewEvent == evBlueBtn)
 8004634:	4b0d      	ldr	r3, [pc, #52]	; (800466c <_ProcessTopLevelInputMenuStateEvents+0x50>)
 8004636:	781b      	ldrb	r3, [r3, #0]
 8004638:	2b01      	cmp	r3, #1
 800463a:	d108      	bne.n	800464e <_ProcessTopLevelInputMenuStateEvents+0x32>
	{
		eNextState = ToplevelInputMenuInputHandler(eNewEvent);
 800463c:	4b0b      	ldr	r3, [pc, #44]	; (800466c <_ProcessTopLevelInputMenuStateEvents+0x50>)
 800463e:	781b      	ldrb	r3, [r3, #0]
 8004640:	4618      	mov	r0, r3
 8004642:	f000 fe27 	bl	8005294 <ToplevelInputMenuInputHandler>
 8004646:	4603      	mov	r3, r0
 8004648:	461a      	mov	r2, r3
 800464a:	4b09      	ldr	r3, [pc, #36]	; (8004670 <_ProcessTopLevelInputMenuStateEvents+0x54>)
 800464c:	701a      	strb	r2, [r3, #0]
	}
	if(eNewEvent == evGreenBtn)
 800464e:	4b07      	ldr	r3, [pc, #28]	; (800466c <_ProcessTopLevelInputMenuStateEvents+0x50>)
 8004650:	781b      	ldrb	r3, [r3, #0]
 8004652:	2b02      	cmp	r3, #2
 8004654:	d108      	bne.n	8004668 <_ProcessTopLevelInputMenuStateEvents+0x4c>
	{

		eNextState = ToplevelInputMenuInputHandler(eNewEvent);
 8004656:	4b05      	ldr	r3, [pc, #20]	; (800466c <_ProcessTopLevelInputMenuStateEvents+0x50>)
 8004658:	781b      	ldrb	r3, [r3, #0]
 800465a:	4618      	mov	r0, r3
 800465c:	f000 fe1a 	bl	8005294 <ToplevelInputMenuInputHandler>
 8004660:	4603      	mov	r3, r0
 8004662:	461a      	mov	r2, r3
 8004664:	4b02      	ldr	r3, [pc, #8]	; (8004670 <_ProcessTopLevelInputMenuStateEvents+0x54>)
 8004666:	701a      	strb	r2, [r3, #0]
	}
}
 8004668:	bf00      	nop
 800466a:	bd80      	pop	{r7, pc}
 800466c:	200020d2 	.word	0x200020d2
 8004670:	200020d1 	.word	0x200020d1

08004674 <_ProcessFuncMainMenuStateEvents>:
 *	@param None
 *	@retval None
 *
 */
void _ProcessFuncMainMenuStateEvents()
{
 8004674:	b580      	push	{r7, lr}
 8004676:	af00      	add	r7, sp, #0

	if(eNewEvent == evEncoderSet)
	{
		// No menu action
	}
	if(eNewEvent == evEncoderPush)
 8004678:	4b0f      	ldr	r3, [pc, #60]	; (80046b8 <_ProcessFuncMainMenuStateEvents+0x44>)
 800467a:	781b      	ldrb	r3, [r3, #0]
 800467c:	2b06      	cmp	r3, #6
 800467e:	d105      	bne.n	800468c <_ProcessFuncMainMenuStateEvents+0x18>
	{
		eNextState = FuncMainMenuExitHandler();
 8004680:	f000 fc3c 	bl	8004efc <FuncMainMenuExitHandler>
 8004684:	4603      	mov	r3, r0
 8004686:	461a      	mov	r2, r3
 8004688:	4b0c      	ldr	r3, [pc, #48]	; (80046bc <_ProcessFuncMainMenuStateEvents+0x48>)
 800468a:	701a      	strb	r2, [r3, #0]

	}
	if(eNewEvent == evBlueBtn)
 800468c:	4b0a      	ldr	r3, [pc, #40]	; (80046b8 <_ProcessFuncMainMenuStateEvents+0x44>)
 800468e:	781b      	ldrb	r3, [r3, #0]
 8004690:	2b01      	cmp	r3, #1
 8004692:	d105      	bne.n	80046a0 <_ProcessFuncMainMenuStateEvents+0x2c>
	{
		eNextState = FuncSignalMenuEntryHandler();
 8004694:	f000 fc3e 	bl	8004f14 <FuncSignalMenuEntryHandler>
 8004698:	4603      	mov	r3, r0
 800469a:	461a      	mov	r2, r3
 800469c:	4b07      	ldr	r3, [pc, #28]	; (80046bc <_ProcessFuncMainMenuStateEvents+0x48>)
 800469e:	701a      	strb	r2, [r3, #0]
	}
	if(eNewEvent == evGreenBtn)
 80046a0:	4b05      	ldr	r3, [pc, #20]	; (80046b8 <_ProcessFuncMainMenuStateEvents+0x44>)
 80046a2:	781b      	ldrb	r3, [r3, #0]
 80046a4:	2b02      	cmp	r3, #2
 80046a6:	d105      	bne.n	80046b4 <_ProcessFuncMainMenuStateEvents+0x40>
	{
		eNextState = FuncAuxMenuEntryHandler();
 80046a8:	f000 fc6c 	bl	8004f84 <FuncAuxMenuEntryHandler>
 80046ac:	4603      	mov	r3, r0
 80046ae:	461a      	mov	r2, r3
 80046b0:	4b02      	ldr	r3, [pc, #8]	; (80046bc <_ProcessFuncMainMenuStateEvents+0x48>)
 80046b2:	701a      	strb	r2, [r3, #0]
	}
}
 80046b4:	bf00      	nop
 80046b6:	bd80      	pop	{r7, pc}
 80046b8:	200020d2 	.word	0x200020d2
 80046bc:	200020d1 	.word	0x200020d1

080046c0 <_ProcessFuncSignalMenuStateEvents>:
 *	@param None
 *	@retval None
 *
 */
void _ProcessFuncSignalMenuStateEvents()
{
 80046c0:	b580      	push	{r7, lr}
 80046c2:	af00      	add	r7, sp, #0
	#ifdef EVENT_MENU_DEBUG
		  printf("Func_Signal_Menu_State\n");
	#endif

	if(eNewEvent == evEncoderSet)
 80046c4:	4b0a      	ldr	r3, [pc, #40]	; (80046f0 <_ProcessFuncSignalMenuStateEvents+0x30>)
 80046c6:	781b      	ldrb	r3, [r3, #0]
 80046c8:	2b05      	cmp	r3, #5
 80046ca:	d105      	bne.n	80046d8 <_ProcessFuncSignalMenuStateEvents+0x18>
	{
		eNextState = FuncSignalMenuInputHandler();
 80046cc:	f000 fc3a 	bl	8004f44 <FuncSignalMenuInputHandler>
 80046d0:	4603      	mov	r3, r0
 80046d2:	461a      	mov	r2, r3
 80046d4:	4b07      	ldr	r3, [pc, #28]	; (80046f4 <_ProcessFuncSignalMenuStateEvents+0x34>)
 80046d6:	701a      	strb	r2, [r3, #0]
	}
	if(eNewEvent == evEncoderPush)
 80046d8:	4b05      	ldr	r3, [pc, #20]	; (80046f0 <_ProcessFuncSignalMenuStateEvents+0x30>)
 80046da:	781b      	ldrb	r3, [r3, #0]
 80046dc:	2b06      	cmp	r3, #6
 80046de:	d105      	bne.n	80046ec <_ProcessFuncSignalMenuStateEvents+0x2c>
	{
		eNextState = FuncSignalMenuExitHandler();
 80046e0:	f000 fc42 	bl	8004f68 <FuncSignalMenuExitHandler>
 80046e4:	4603      	mov	r3, r0
 80046e6:	461a      	mov	r2, r3
 80046e8:	4b02      	ldr	r3, [pc, #8]	; (80046f4 <_ProcessFuncSignalMenuStateEvents+0x34>)
 80046ea:	701a      	strb	r2, [r3, #0]
	}
}
 80046ec:	bf00      	nop
 80046ee:	bd80      	pop	{r7, pc}
 80046f0:	200020d2 	.word	0x200020d2
 80046f4:	200020d1 	.word	0x200020d1

080046f8 <_ProcessFuncAuxMenuStateEvents>:
 *	@param None
 *	@retval None
 *
 */
void _ProcessFuncAuxMenuStateEvents()
{
 80046f8:	b580      	push	{r7, lr}
 80046fa:	af00      	add	r7, sp, #0
	#ifdef EVENT_MENU_DEBUG
		  printf("Func_Aux_Menu_State\n");
	#endif

	if(eNewEvent == evEncoderSet)
 80046fc:	4b0f      	ldr	r3, [pc, #60]	; (800473c <_ProcessFuncAuxMenuStateEvents+0x44>)
 80046fe:	781b      	ldrb	r3, [r3, #0]
 8004700:	2b05      	cmp	r3, #5
 8004702:	d105      	bne.n	8004710 <_ProcessFuncAuxMenuStateEvents+0x18>
	{
		eNextState = FuncAuxMenuInputHandler();
 8004704:	f000 fc58 	bl	8004fb8 <FuncAuxMenuInputHandler>
 8004708:	4603      	mov	r3, r0
 800470a:	461a      	mov	r2, r3
 800470c:	4b0c      	ldr	r3, [pc, #48]	; (8004740 <_ProcessFuncAuxMenuStateEvents+0x48>)
 800470e:	701a      	strb	r2, [r3, #0]
	}
	if(eNewEvent == evEncoderPush)
 8004710:	4b0a      	ldr	r3, [pc, #40]	; (800473c <_ProcessFuncAuxMenuStateEvents+0x44>)
 8004712:	781b      	ldrb	r3, [r3, #0]
 8004714:	2b06      	cmp	r3, #6
 8004716:	d105      	bne.n	8004724 <_ProcessFuncAuxMenuStateEvents+0x2c>
	{
		eNextState = FuncAuxMenuExitHandler();
 8004718:	f000 fc9c 	bl	8005054 <FuncAuxMenuExitHandler>
 800471c:	4603      	mov	r3, r0
 800471e:	461a      	mov	r2, r3
 8004720:	4b07      	ldr	r3, [pc, #28]	; (8004740 <_ProcessFuncAuxMenuStateEvents+0x48>)
 8004722:	701a      	strb	r2, [r3, #0]
	}
	if(eNewEvent == evYellowBtn)
 8004724:	4b05      	ldr	r3, [pc, #20]	; (800473c <_ProcessFuncAuxMenuStateEvents+0x44>)
 8004726:	781b      	ldrb	r3, [r3, #0]
 8004728:	2b03      	cmp	r3, #3
 800472a:	d105      	bne.n	8004738 <_ProcessFuncAuxMenuStateEvents+0x40>
	{
		eNextState = FuncAuxToggleDutyMode();
 800472c:	f000 fc80 	bl	8005030 <FuncAuxToggleDutyMode>
 8004730:	4603      	mov	r3, r0
 8004732:	461a      	mov	r2, r3
 8004734:	4b02      	ldr	r3, [pc, #8]	; (8004740 <_ProcessFuncAuxMenuStateEvents+0x48>)
 8004736:	701a      	strb	r2, [r3, #0]
	}

}
 8004738:	bf00      	nop
 800473a:	bd80      	pop	{r7, pc}
 800473c:	200020d2 	.word	0x200020d2
 8004740:	200020d1 	.word	0x200020d1

08004744 <_ProcessGainMainMenuStateEvents>:
 *	@param None
 *	@retval None
 *
 */
void _ProcessGainMainMenuStateEvents()
{
 8004744:	b580      	push	{r7, lr}
 8004746:	b082      	sub	sp, #8
 8004748:	af00      	add	r7, sp, #0
	#endif
	if(eNewEvent == evEncoderSet)
	{
		// No menu action
	}
	if(eNewEvent == evEncoderPush)
 800474a:	4b16      	ldr	r3, [pc, #88]	; (80047a4 <_ProcessGainMainMenuStateEvents+0x60>)
 800474c:	781b      	ldrb	r3, [r3, #0]
 800474e:	2b06      	cmp	r3, #6
 8004750:	d105      	bne.n	800475e <_ProcessGainMainMenuStateEvents+0x1a>
	{
		eNextState = GainMainMenuExitHandler();
 8004752:	f000 fc99 	bl	8005088 <GainMainMenuExitHandler>
 8004756:	4603      	mov	r3, r0
 8004758:	461a      	mov	r2, r3
 800475a:	4b13      	ldr	r3, [pc, #76]	; (80047a8 <_ProcessGainMainMenuStateEvents+0x64>)
 800475c:	701a      	strb	r2, [r3, #0]
		//ToplevelMenu_setStatus(ENABLE_TOPLEVEL_OUTPUT_MENU);
	}
	if(eNewEvent == evBlueBtn)
 800475e:	4b11      	ldr	r3, [pc, #68]	; (80047a4 <_ProcessGainMainMenuStateEvents+0x60>)
 8004760:	781b      	ldrb	r3, [r3, #0]
 8004762:	2b01      	cmp	r3, #1
 8004764:	d105      	bne.n	8004772 <_ProcessGainMainMenuStateEvents+0x2e>
	{
		eNextState = GainSignalMenuEntryHandler();
 8004766:	f000 fc9b 	bl	80050a0 <GainSignalMenuEntryHandler>
 800476a:	4603      	mov	r3, r0
 800476c:	461a      	mov	r2, r3
 800476e:	4b0e      	ldr	r3, [pc, #56]	; (80047a8 <_ProcessGainMainMenuStateEvents+0x64>)
 8004770:	701a      	strb	r2, [r3, #0]
	}
	if(eNewEvent == evGreenBtn)
 8004772:	4b0c      	ldr	r3, [pc, #48]	; (80047a4 <_ProcessGainMainMenuStateEvents+0x60>)
 8004774:	781b      	ldrb	r3, [r3, #0]
 8004776:	2b02      	cmp	r3, #2
 8004778:	d110      	bne.n	800479c <_ProcessGainMainMenuStateEvents+0x58>
	{
		eOutput_mode aux_output_func = SM_GetOutputChannel(AUX_CHANNEL)->func_profile->func;
 800477a:	2001      	movs	r0, #1
 800477c:	f002 f930 	bl	80069e0 <SM_GetOutputChannel>
 8004780:	4603      	mov	r3, r0
 8004782:	f8d3 31e8 	ldr.w	r3, [r3, #488]	; 0x1e8
 8004786:	781b      	ldrb	r3, [r3, #0]
 8004788:	71fb      	strb	r3, [r7, #7]
		if(aux_output_func != PWM_FUNC_MODE)
 800478a:	79fb      	ldrb	r3, [r7, #7]
 800478c:	2b06      	cmp	r3, #6
 800478e:	d005      	beq.n	800479c <_ProcessGainMainMenuStateEvents+0x58>
			eNextState = GainAuxMenuEntryHandler();
 8004790:	f000 fd12 	bl	80051b8 <GainAuxMenuEntryHandler>
 8004794:	4603      	mov	r3, r0
 8004796:	461a      	mov	r2, r3
 8004798:	4b03      	ldr	r3, [pc, #12]	; (80047a8 <_ProcessGainMainMenuStateEvents+0x64>)
 800479a:	701a      	strb	r2, [r3, #0]
	}
}
 800479c:	bf00      	nop
 800479e:	3708      	adds	r7, #8
 80047a0:	46bd      	mov	sp, r7
 80047a2:	bd80      	pop	{r7, pc}
 80047a4:	200020d2 	.word	0x200020d2
 80047a8:	200020d1 	.word	0x200020d1

080047ac <_ProcessGainSignalMenuStateEvents>:
 *	@param None
 *	@retval None
 *
 */
void _ProcessGainSignalMenuStateEvents()
{
 80047ac:	b580      	push	{r7, lr}
 80047ae:	af00      	add	r7, sp, #0
	#ifdef EVENT_MENU_DEBUG
		  printf("Gain_Signal_Menu_State\n");
	#endif

	if(eNewEvent == evEncoderSet)
 80047b0:	4b21      	ldr	r3, [pc, #132]	; (8004838 <_ProcessGainSignalMenuStateEvents+0x8c>)
 80047b2:	781b      	ldrb	r3, [r3, #0]
 80047b4:	2b05      	cmp	r3, #5
 80047b6:	d106      	bne.n	80047c6 <_ProcessGainSignalMenuStateEvents+0x1a>
	{
		eNextState = GainSignalMenuInputHandler(evEncoderSet);
 80047b8:	2005      	movs	r0, #5
 80047ba:	f000 fc9f 	bl	80050fc <GainSignalMenuInputHandler>
 80047be:	4603      	mov	r3, r0
 80047c0:	461a      	mov	r2, r3
 80047c2:	4b1e      	ldr	r3, [pc, #120]	; (800483c <_ProcessGainSignalMenuStateEvents+0x90>)
 80047c4:	701a      	strb	r2, [r3, #0]
	}
	if(eNewEvent == evEncoderPush)
 80047c6:	4b1c      	ldr	r3, [pc, #112]	; (8004838 <_ProcessGainSignalMenuStateEvents+0x8c>)
 80047c8:	781b      	ldrb	r3, [r3, #0]
 80047ca:	2b06      	cmp	r3, #6
 80047cc:	d105      	bne.n	80047da <_ProcessGainSignalMenuStateEvents+0x2e>
	{
		eNextState = GainSignalMenuExitHandler();
 80047ce:	f000 fce7 	bl	80051a0 <GainSignalMenuExitHandler>
 80047d2:	4603      	mov	r3, r0
 80047d4:	461a      	mov	r2, r3
 80047d6:	4b19      	ldr	r3, [pc, #100]	; (800483c <_ProcessGainSignalMenuStateEvents+0x90>)
 80047d8:	701a      	strb	r2, [r3, #0]
	}
	if(eNewEvent == evBlueBtn)
 80047da:	4b17      	ldr	r3, [pc, #92]	; (8004838 <_ProcessGainSignalMenuStateEvents+0x8c>)
 80047dc:	781b      	ldrb	r3, [r3, #0]
 80047de:	2b01      	cmp	r3, #1
 80047e0:	d106      	bne.n	80047f0 <_ProcessGainSignalMenuStateEvents+0x44>
	{
		eNextState = GainSignalMenuInputHandler(evBlueBtn);
 80047e2:	2001      	movs	r0, #1
 80047e4:	f000 fc8a 	bl	80050fc <GainSignalMenuInputHandler>
 80047e8:	4603      	mov	r3, r0
 80047ea:	461a      	mov	r2, r3
 80047ec:	4b13      	ldr	r3, [pc, #76]	; (800483c <_ProcessGainSignalMenuStateEvents+0x90>)
 80047ee:	701a      	strb	r2, [r3, #0]
	}
	if(eNewEvent == evGreenBtn)
 80047f0:	4b11      	ldr	r3, [pc, #68]	; (8004838 <_ProcessGainSignalMenuStateEvents+0x8c>)
 80047f2:	781b      	ldrb	r3, [r3, #0]
 80047f4:	2b02      	cmp	r3, #2
 80047f6:	d106      	bne.n	8004806 <_ProcessGainSignalMenuStateEvents+0x5a>
	{
		eNextState = GainSignalMenuInputHandler(evGreenBtn);
 80047f8:	2002      	movs	r0, #2
 80047fa:	f000 fc7f 	bl	80050fc <GainSignalMenuInputHandler>
 80047fe:	4603      	mov	r3, r0
 8004800:	461a      	mov	r2, r3
 8004802:	4b0e      	ldr	r3, [pc, #56]	; (800483c <_ProcessGainSignalMenuStateEvents+0x90>)
 8004804:	701a      	strb	r2, [r3, #0]
	}
	if(eNewEvent == evYellowBtn)
 8004806:	4b0c      	ldr	r3, [pc, #48]	; (8004838 <_ProcessGainSignalMenuStateEvents+0x8c>)
 8004808:	781b      	ldrb	r3, [r3, #0]
 800480a:	2b03      	cmp	r3, #3
 800480c:	d106      	bne.n	800481c <_ProcessGainSignalMenuStateEvents+0x70>
	{
		eNextState = GainSignalMenuInputHandler(evYellowBtn);
 800480e:	2003      	movs	r0, #3
 8004810:	f000 fc74 	bl	80050fc <GainSignalMenuInputHandler>
 8004814:	4603      	mov	r3, r0
 8004816:	461a      	mov	r2, r3
 8004818:	4b08      	ldr	r3, [pc, #32]	; (800483c <_ProcessGainSignalMenuStateEvents+0x90>)
 800481a:	701a      	strb	r2, [r3, #0]
	}
	if(eNewEvent == evRedBtn)
 800481c:	4b06      	ldr	r3, [pc, #24]	; (8004838 <_ProcessGainSignalMenuStateEvents+0x8c>)
 800481e:	781b      	ldrb	r3, [r3, #0]
 8004820:	2b04      	cmp	r3, #4
 8004822:	d106      	bne.n	8004832 <_ProcessGainSignalMenuStateEvents+0x86>
	{
		eNextState = GainSignalMenuInputHandler(evRedBtn);
 8004824:	2004      	movs	r0, #4
 8004826:	f000 fc69 	bl	80050fc <GainSignalMenuInputHandler>
 800482a:	4603      	mov	r3, r0
 800482c:	461a      	mov	r2, r3
 800482e:	4b03      	ldr	r3, [pc, #12]	; (800483c <_ProcessGainSignalMenuStateEvents+0x90>)
 8004830:	701a      	strb	r2, [r3, #0]
	}

}
 8004832:	bf00      	nop
 8004834:	bd80      	pop	{r7, pc}
 8004836:	bf00      	nop
 8004838:	200020d2 	.word	0x200020d2
 800483c:	200020d1 	.word	0x200020d1

08004840 <_ProcessGainAuxMenuStateEvents>:
 *	@param None
 *	@retval None
 *
 */
void _ProcessGainAuxMenuStateEvents()
{
 8004840:	b580      	push	{r7, lr}
 8004842:	af00      	add	r7, sp, #0
	#ifdef EVENT_MENU_DEBUG
		  printf("Gain_Aux_Menu_State\n");
	#endif

	if(eNewEvent == evEncoderSet)
 8004844:	4b0a      	ldr	r3, [pc, #40]	; (8004870 <_ProcessGainAuxMenuStateEvents+0x30>)
 8004846:	781b      	ldrb	r3, [r3, #0]
 8004848:	2b05      	cmp	r3, #5
 800484a:	d105      	bne.n	8004858 <_ProcessGainAuxMenuStateEvents+0x18>
	{
		eNextState = GainAuxMenuInputHandler();
 800484c:	f000 fce0 	bl	8005210 <GainAuxMenuInputHandler>
 8004850:	4603      	mov	r3, r0
 8004852:	461a      	mov	r2, r3
 8004854:	4b07      	ldr	r3, [pc, #28]	; (8004874 <_ProcessGainAuxMenuStateEvents+0x34>)
 8004856:	701a      	strb	r2, [r3, #0]
	}
	if(eNewEvent == evEncoderPush)
 8004858:	4b05      	ldr	r3, [pc, #20]	; (8004870 <_ProcessGainAuxMenuStateEvents+0x30>)
 800485a:	781b      	ldrb	r3, [r3, #0]
 800485c:	2b06      	cmp	r3, #6
 800485e:	d105      	bne.n	800486c <_ProcessGainAuxMenuStateEvents+0x2c>
	{
		eNextState = GainAuxMenuExitHandler();
 8004860:	f000 fce8 	bl	8005234 <GainAuxMenuExitHandler>
 8004864:	4603      	mov	r3, r0
 8004866:	461a      	mov	r2, r3
 8004868:	4b02      	ldr	r3, [pc, #8]	; (8004874 <_ProcessGainAuxMenuStateEvents+0x34>)
 800486a:	701a      	strb	r2, [r3, #0]
	}
}
 800486c:	bf00      	nop
 800486e:	bd80      	pop	{r7, pc}
 8004870:	200020d2 	.word	0x200020d2
 8004874:	200020d1 	.word	0x200020d1

08004878 <_ProcessFreqMainMenuStateEvents>:
 *	@param None
 *	@retval None
 *
 */
void _ProcessFreqMainMenuStateEvents()
{
 8004878:	b580      	push	{r7, lr}
 800487a:	af00      	add	r7, sp, #0
	#ifdef EVENT_MENU_DEBUG
		  printf("Freq_Main_Menu_State\n");
	#endif

	if(eNewEvent == evEncoderPush)
 800487c:	4b19      	ldr	r3, [pc, #100]	; (80048e4 <_ProcessFreqMainMenuStateEvents+0x6c>)
 800487e:	781b      	ldrb	r3, [r3, #0]
 8004880:	2b06      	cmp	r3, #6
 8004882:	d105      	bne.n	8004890 <_ProcessFreqMainMenuStateEvents+0x18>
	{
		eNextState = FreqMainMenuExitHandler();
 8004884:	f000 fa78 	bl	8004d78 <FreqMainMenuExitHandler>
 8004888:	4603      	mov	r3, r0
 800488a:	461a      	mov	r2, r3
 800488c:	4b16      	ldr	r3, [pc, #88]	; (80048e8 <_ProcessFreqMainMenuStateEvents+0x70>)
 800488e:	701a      	strb	r2, [r3, #0]
		//ToplevelMenu_setStatus(ENABLE_TOPLEVEL_OUTPUT_MENU);
	}
	if(eNewEvent == evBlueBtn)
 8004890:	4b14      	ldr	r3, [pc, #80]	; (80048e4 <_ProcessFreqMainMenuStateEvents+0x6c>)
 8004892:	781b      	ldrb	r3, [r3, #0]
 8004894:	2b01      	cmp	r3, #1
 8004896:	d105      	bne.n	80048a4 <_ProcessFreqMainMenuStateEvents+0x2c>
	{
		eNextState = FreqPresetMenuEntryHandler();
 8004898:	f000 fa80 	bl	8004d9c <FreqPresetMenuEntryHandler>
 800489c:	4603      	mov	r3, r0
 800489e:	461a      	mov	r2, r3
 80048a0:	4b11      	ldr	r3, [pc, #68]	; (80048e8 <_ProcessFreqMainMenuStateEvents+0x70>)
 80048a2:	701a      	strb	r2, [r3, #0]
	}
	if(eNewEvent == evGreenBtn)
 80048a4:	4b0f      	ldr	r3, [pc, #60]	; (80048e4 <_ProcessFreqMainMenuStateEvents+0x6c>)
 80048a6:	781b      	ldrb	r3, [r3, #0]
 80048a8:	2b02      	cmp	r3, #2
 80048aa:	d105      	bne.n	80048b8 <_ProcessFreqMainMenuStateEvents+0x40>
	{
		eNextState = FreqAdjustMenuEntryHandler();
 80048ac:	f000 fabc 	bl	8004e28 <FreqAdjustMenuEntryHandler>
 80048b0:	4603      	mov	r3, r0
 80048b2:	461a      	mov	r2, r3
 80048b4:	4b0c      	ldr	r3, [pc, #48]	; (80048e8 <_ProcessFreqMainMenuStateEvents+0x70>)
 80048b6:	701a      	strb	r2, [r3, #0]
	}
	if(eNewEvent == evYellowBtn)
 80048b8:	4b0a      	ldr	r3, [pc, #40]	; (80048e4 <_ProcessFreqMainMenuStateEvents+0x6c>)
 80048ba:	781b      	ldrb	r3, [r3, #0]
 80048bc:	2b03      	cmp	r3, #3
 80048be:	d105      	bne.n	80048cc <_ProcessFreqMainMenuStateEvents+0x54>
	{
		eNextState = FreqSweepMenuEntryHandler();
 80048c0:	f000 f90c 	bl	8004adc <FreqSweepMenuEntryHandler>
 80048c4:	4603      	mov	r3, r0
 80048c6:	461a      	mov	r2, r3
 80048c8:	4b07      	ldr	r3, [pc, #28]	; (80048e8 <_ProcessFreqMainMenuStateEvents+0x70>)
 80048ca:	701a      	strb	r2, [r3, #0]
	}
	if(eNewEvent == evRedBtn)
 80048cc:	4b05      	ldr	r3, [pc, #20]	; (80048e4 <_ProcessFreqMainMenuStateEvents+0x6c>)
 80048ce:	781b      	ldrb	r3, [r3, #0]
 80048d0:	2b04      	cmp	r3, #4
 80048d2:	d105      	bne.n	80048e0 <_ProcessFreqMainMenuStateEvents+0x68>
	{
		eNextState = FreqPrescalerMenuEntryHandler();
 80048d4:	f000 fad8 	bl	8004e88 <FreqPrescalerMenuEntryHandler>
 80048d8:	4603      	mov	r3, r0
 80048da:	461a      	mov	r2, r3
 80048dc:	4b02      	ldr	r3, [pc, #8]	; (80048e8 <_ProcessFreqMainMenuStateEvents+0x70>)
 80048de:	701a      	strb	r2, [r3, #0]
	}
}
 80048e0:	bf00      	nop
 80048e2:	bd80      	pop	{r7, pc}
 80048e4:	200020d2 	.word	0x200020d2
 80048e8:	200020d1 	.word	0x200020d1

080048ec <_ProcessFreqPresetMenuStateEvents>:
 *	@param None
 *	@retval None
 *
 */
void _ProcessFreqPresetMenuStateEvents()
{
 80048ec:	b580      	push	{r7, lr}
 80048ee:	af00      	add	r7, sp, #0
	#ifdef EVENT_MENU_DEBUG
		  printf("Freq_Preset_Menu_State\n");
	#endif

	if(eNewEvent == evEncoderSet)
 80048f0:	4b0a      	ldr	r3, [pc, #40]	; (800491c <_ProcessFreqPresetMenuStateEvents+0x30>)
 80048f2:	781b      	ldrb	r3, [r3, #0]
 80048f4:	2b05      	cmp	r3, #5
 80048f6:	d105      	bne.n	8004904 <_ProcessFreqPresetMenuStateEvents+0x18>
	{
		eNextState = FreqPresetMenuInputHandler();
 80048f8:	f000 fa78 	bl	8004dec <FreqPresetMenuInputHandler>
 80048fc:	4603      	mov	r3, r0
 80048fe:	461a      	mov	r2, r3
 8004900:	4b07      	ldr	r3, [pc, #28]	; (8004920 <_ProcessFreqPresetMenuStateEvents+0x34>)
 8004902:	701a      	strb	r2, [r3, #0]
	}
	if(eNewEvent == evEncoderPush)
 8004904:	4b05      	ldr	r3, [pc, #20]	; (800491c <_ProcessFreqPresetMenuStateEvents+0x30>)
 8004906:	781b      	ldrb	r3, [r3, #0]
 8004908:	2b06      	cmp	r3, #6
 800490a:	d105      	bne.n	8004918 <_ProcessFreqPresetMenuStateEvents+0x2c>
	{
		eNextState = FreqPresetMenuExitHandler();
 800490c:	f000 fa80 	bl	8004e10 <FreqPresetMenuExitHandler>
 8004910:	4603      	mov	r3, r0
 8004912:	461a      	mov	r2, r3
 8004914:	4b02      	ldr	r3, [pc, #8]	; (8004920 <_ProcessFreqPresetMenuStateEvents+0x34>)
 8004916:	701a      	strb	r2, [r3, #0]
	}
}
 8004918:	bf00      	nop
 800491a:	bd80      	pop	{r7, pc}
 800491c:	200020d2 	.word	0x200020d2
 8004920:	200020d1 	.word	0x200020d1

08004924 <_ProcessFreqAdjustMenuState>:
 *	@param None
 *	@retval None
 *
 */
void _ProcessFreqAdjustMenuState()
{
 8004924:	b580      	push	{r7, lr}
 8004926:	af00      	add	r7, sp, #0
	#ifdef EVENT_MENU_DEBUG
		  printf("Freq_Adjust_Menu_State\n");
	#endif

	if(eNewEvent == evEncoderSet)
 8004928:	4b0a      	ldr	r3, [pc, #40]	; (8004954 <_ProcessFreqAdjustMenuState+0x30>)
 800492a:	781b      	ldrb	r3, [r3, #0]
 800492c:	2b05      	cmp	r3, #5
 800492e:	d105      	bne.n	800493c <_ProcessFreqAdjustMenuState+0x18>
	{
		eNextState = FreqAdjustMenuInputHandler();
 8004930:	f000 fa92 	bl	8004e58 <FreqAdjustMenuInputHandler>
 8004934:	4603      	mov	r3, r0
 8004936:	461a      	mov	r2, r3
 8004938:	4b07      	ldr	r3, [pc, #28]	; (8004958 <_ProcessFreqAdjustMenuState+0x34>)
 800493a:	701a      	strb	r2, [r3, #0]
	}
	if(eNewEvent == evEncoderPush)
 800493c:	4b05      	ldr	r3, [pc, #20]	; (8004954 <_ProcessFreqAdjustMenuState+0x30>)
 800493e:	781b      	ldrb	r3, [r3, #0]
 8004940:	2b06      	cmp	r3, #6
 8004942:	d105      	bne.n	8004950 <_ProcessFreqAdjustMenuState+0x2c>
	{
		eNextState = FreqAdjustMenuExitHandler();
 8004944:	f000 fa94 	bl	8004e70 <FreqAdjustMenuExitHandler>
 8004948:	4603      	mov	r3, r0
 800494a:	461a      	mov	r2, r3
 800494c:	4b02      	ldr	r3, [pc, #8]	; (8004958 <_ProcessFreqAdjustMenuState+0x34>)
 800494e:	701a      	strb	r2, [r3, #0]
	}
}
 8004950:	bf00      	nop
 8004952:	bd80      	pop	{r7, pc}
 8004954:	200020d2 	.word	0x200020d2
 8004958:	200020d1 	.word	0x200020d1

0800495c <_ProcessFreqPrescalerMenuStateEvents>:
 *	@param None
 *	@retval None
 *
 */
void _ProcessFreqPrescalerMenuStateEvents()
{
 800495c:	b580      	push	{r7, lr}
 800495e:	af00      	add	r7, sp, #0
	#ifdef EVENT_MENU_DEBUG
		  printf("Freq_Prescaler_Menu_State\n");
	#endif

	if(eNewEvent == evEncoderSet)
 8004960:	4b0a      	ldr	r3, [pc, #40]	; (800498c <_ProcessFreqPrescalerMenuStateEvents+0x30>)
 8004962:	781b      	ldrb	r3, [r3, #0]
 8004964:	2b05      	cmp	r3, #5
 8004966:	d105      	bne.n	8004974 <_ProcessFreqPrescalerMenuStateEvents+0x18>
	{
		eNextState = FreqPrescalerMenuInputHandler();
 8004968:	f000 faa4 	bl	8004eb4 <FreqPrescalerMenuInputHandler>
 800496c:	4603      	mov	r3, r0
 800496e:	461a      	mov	r2, r3
 8004970:	4b07      	ldr	r3, [pc, #28]	; (8004990 <_ProcessFreqPrescalerMenuStateEvents+0x34>)
 8004972:	701a      	strb	r2, [r3, #0]
	}
	if(eNewEvent == evEncoderPush)
 8004974:	4b05      	ldr	r3, [pc, #20]	; (800498c <_ProcessFreqPrescalerMenuStateEvents+0x30>)
 8004976:	781b      	ldrb	r3, [r3, #0]
 8004978:	2b06      	cmp	r3, #6
 800497a:	d105      	bne.n	8004988 <_ProcessFreqPrescalerMenuStateEvents+0x2c>
	{
		eNextState = FreqPrescalerMenuExitHandler();
 800497c:	f000 faa6 	bl	8004ecc <FreqPrescalerMenuExitHandler>
 8004980:	4603      	mov	r3, r0
 8004982:	461a      	mov	r2, r3
 8004984:	4b02      	ldr	r3, [pc, #8]	; (8004990 <_ProcessFreqPrescalerMenuStateEvents+0x34>)
 8004986:	701a      	strb	r2, [r3, #0]
	}
}
 8004988:	bf00      	nop
 800498a:	bd80      	pop	{r7, pc}
 800498c:	200020d2 	.word	0x200020d2
 8004990:	200020d1 	.word	0x200020d1

08004994 <_ProcessFreqSweepMenuStateEvents>:
 *	@param None
 *	@retval None
 *
 */
void _ProcessFreqSweepMenuStateEvents()
{
 8004994:	b580      	push	{r7, lr}
 8004996:	af00      	add	r7, sp, #0
	#ifdef EVENT_MENU_DEBUG
		  printf("Freq_Sweep_Menu_State\n");
	#endif

	if(eNewEvent == evBlueBtn)
 8004998:	4b21      	ldr	r3, [pc, #132]	; (8004a20 <_ProcessFreqSweepMenuStateEvents+0x8c>)
 800499a:	781b      	ldrb	r3, [r3, #0]
 800499c:	2b01      	cmp	r3, #1
 800499e:	d106      	bne.n	80049ae <_ProcessFreqSweepMenuStateEvents+0x1a>
	{
		// enable
		eNextState = FreqSweepMenuInputHandler(evSweepEnableBtn);
 80049a0:	2007      	movs	r0, #7
 80049a2:	f000 f8ed 	bl	8004b80 <FreqSweepMenuInputHandler>
 80049a6:	4603      	mov	r3, r0
 80049a8:	461a      	mov	r2, r3
 80049aa:	4b1e      	ldr	r3, [pc, #120]	; (8004a24 <_ProcessFreqSweepMenuStateEvents+0x90>)
 80049ac:	701a      	strb	r2, [r3, #0]
	}
	if(eNewEvent == evGreenBtn)
 80049ae:	4b1c      	ldr	r3, [pc, #112]	; (8004a20 <_ProcessFreqSweepMenuStateEvents+0x8c>)
 80049b0:	781b      	ldrb	r3, [r3, #0]
 80049b2:	2b02      	cmp	r3, #2
 80049b4:	d106      	bne.n	80049c4 <_ProcessFreqSweepMenuStateEvents+0x30>
	{
		// direction
		eNextState = FreqSweepMenuInputHandler(evSweepModeBtn);
 80049b6:	2008      	movs	r0, #8
 80049b8:	f000 f8e2 	bl	8004b80 <FreqSweepMenuInputHandler>
 80049bc:	4603      	mov	r3, r0
 80049be:	461a      	mov	r2, r3
 80049c0:	4b18      	ldr	r3, [pc, #96]	; (8004a24 <_ProcessFreqSweepMenuStateEvents+0x90>)
 80049c2:	701a      	strb	r2, [r3, #0]
	}
	if(eNewEvent == evYellowBtn)
 80049c4:	4b16      	ldr	r3, [pc, #88]	; (8004a20 <_ProcessFreqSweepMenuStateEvents+0x8c>)
 80049c6:	781b      	ldrb	r3, [r3, #0]
 80049c8:	2b03      	cmp	r3, #3
 80049ca:	d106      	bne.n	80049da <_ProcessFreqSweepMenuStateEvents+0x46>
	{
		// set sweep speed
		eNextState = FreqSweepMenuInputHandler(evSweepSpeedBtn);
 80049cc:	2009      	movs	r0, #9
 80049ce:	f000 f8d7 	bl	8004b80 <FreqSweepMenuInputHandler>
 80049d2:	4603      	mov	r3, r0
 80049d4:	461a      	mov	r2, r3
 80049d6:	4b13      	ldr	r3, [pc, #76]	; (8004a24 <_ProcessFreqSweepMenuStateEvents+0x90>)
 80049d8:	701a      	strb	r2, [r3, #0]
	}
	if(eNewEvent == evRedBtn)
 80049da:	4b11      	ldr	r3, [pc, #68]	; (8004a20 <_ProcessFreqSweepMenuStateEvents+0x8c>)
 80049dc:	781b      	ldrb	r3, [r3, #0]
 80049de:	2b04      	cmp	r3, #4
 80049e0:	d106      	bne.n	80049f0 <_ProcessFreqSweepMenuStateEvents+0x5c>
	{
		// set lower/upper sweep limit
		eNextState = FreqSweepMenuInputHandler(evSweepLimitBtn);
 80049e2:	200a      	movs	r0, #10
 80049e4:	f000 f8cc 	bl	8004b80 <FreqSweepMenuInputHandler>
 80049e8:	4603      	mov	r3, r0
 80049ea:	461a      	mov	r2, r3
 80049ec:	4b0d      	ldr	r3, [pc, #52]	; (8004a24 <_ProcessFreqSweepMenuStateEvents+0x90>)
 80049ee:	701a      	strb	r2, [r3, #0]
	}
	if(eNewEvent == evEncoderSet)
 80049f0:	4b0b      	ldr	r3, [pc, #44]	; (8004a20 <_ProcessFreqSweepMenuStateEvents+0x8c>)
 80049f2:	781b      	ldrb	r3, [r3, #0]
 80049f4:	2b05      	cmp	r3, #5
 80049f6:	d106      	bne.n	8004a06 <_ProcessFreqSweepMenuStateEvents+0x72>
	{
		eNextState = FreqSweepMenuInputHandler(evEncoderSweep);
 80049f8:	200b      	movs	r0, #11
 80049fa:	f000 f8c1 	bl	8004b80 <FreqSweepMenuInputHandler>
 80049fe:	4603      	mov	r3, r0
 8004a00:	461a      	mov	r2, r3
 8004a02:	4b08      	ldr	r3, [pc, #32]	; (8004a24 <_ProcessFreqSweepMenuStateEvents+0x90>)
 8004a04:	701a      	strb	r2, [r3, #0]
	}
	if(eNewEvent == evEncoderPush)
 8004a06:	4b06      	ldr	r3, [pc, #24]	; (8004a20 <_ProcessFreqSweepMenuStateEvents+0x8c>)
 8004a08:	781b      	ldrb	r3, [r3, #0]
 8004a0a:	2b06      	cmp	r3, #6
 8004a0c:	d105      	bne.n	8004a1a <_ProcessFreqSweepMenuStateEvents+0x86>
	{
		eNextState = FreqSweepMenuExitHandler();
 8004a0e:	f000 f98d 	bl	8004d2c <FreqSweepMenuExitHandler>
 8004a12:	4603      	mov	r3, r0
 8004a14:	461a      	mov	r2, r3
 8004a16:	4b03      	ldr	r3, [pc, #12]	; (8004a24 <_ProcessFreqSweepMenuStateEvents+0x90>)
 8004a18:	701a      	strb	r2, [r3, #0]
	}

}
 8004a1a:	bf00      	nop
 8004a1c:	bd80      	pop	{r7, pc}
 8004a1e:	bf00      	nop
 8004a20:	200020d2 	.word	0x200020d2
 8004a24:	200020d1 	.word	0x200020d1

08004a28 <_ProcessBiasMainMenuEvents>:
 *	@param None
 *	@retval None
 *
 */
void _ProcessBiasMainMenuEvents()
{
 8004a28:	b580      	push	{r7, lr}
 8004a2a:	af00      	add	r7, sp, #0
	#ifdef EVENT_MENU_DEBUG
		  printf("Bias_Menu_State\n");
	#endif

	if(eNewEvent == evEncoderSet)
 8004a2c:	4b1b      	ldr	r3, [pc, #108]	; (8004a9c <_ProcessBiasMainMenuEvents+0x74>)
 8004a2e:	781b      	ldrb	r3, [r3, #0]
 8004a30:	2b05      	cmp	r3, #5
 8004a32:	d106      	bne.n	8004a42 <_ProcessBiasMainMenuEvents+0x1a>
	{
		eNextState = BiasMenuInputHandler(evEncoderSet);
 8004a34:	2005      	movs	r0, #5
 8004a36:	f7ff fcef 	bl	8004418 <BiasMenuInputHandler>
 8004a3a:	4603      	mov	r3, r0
 8004a3c:	461a      	mov	r2, r3
 8004a3e:	4b18      	ldr	r3, [pc, #96]	; (8004aa0 <_ProcessBiasMainMenuEvents+0x78>)
 8004a40:	701a      	strb	r2, [r3, #0]
	}
	if(eNewEvent == evEncoderPush)
 8004a42:	4b16      	ldr	r3, [pc, #88]	; (8004a9c <_ProcessBiasMainMenuEvents+0x74>)
 8004a44:	781b      	ldrb	r3, [r3, #0]
 8004a46:	2b06      	cmp	r3, #6
 8004a48:	d105      	bne.n	8004a56 <_ProcessBiasMainMenuEvents+0x2e>
	{
		eNextState = BiasMenuExitHandler();
 8004a4a:	f7ff fd29 	bl	80044a0 <BiasMenuExitHandler>
 8004a4e:	4603      	mov	r3, r0
 8004a50:	461a      	mov	r2, r3
 8004a52:	4b13      	ldr	r3, [pc, #76]	; (8004aa0 <_ProcessBiasMainMenuEvents+0x78>)
 8004a54:	701a      	strb	r2, [r3, #0]
		//ToplevelMenu_setStatus(ENABLE_TOPLEVEL_OUTPUT_MENU);
	}
	if(eNewEvent == evBlueBtn)
 8004a56:	4b11      	ldr	r3, [pc, #68]	; (8004a9c <_ProcessBiasMainMenuEvents+0x74>)
 8004a58:	781b      	ldrb	r3, [r3, #0]
 8004a5a:	2b01      	cmp	r3, #1
 8004a5c:	d106      	bne.n	8004a6c <_ProcessBiasMainMenuEvents+0x44>
	{
		// enable
		eNextState = BiasMenuInputHandler(evBlueBtn);
 8004a5e:	2001      	movs	r0, #1
 8004a60:	f7ff fcda 	bl	8004418 <BiasMenuInputHandler>
 8004a64:	4603      	mov	r3, r0
 8004a66:	461a      	mov	r2, r3
 8004a68:	4b0d      	ldr	r3, [pc, #52]	; (8004aa0 <_ProcessBiasMainMenuEvents+0x78>)
 8004a6a:	701a      	strb	r2, [r3, #0]
	}
	if(eNewEvent == evGreenBtn)
 8004a6c:	4b0b      	ldr	r3, [pc, #44]	; (8004a9c <_ProcessBiasMainMenuEvents+0x74>)
 8004a6e:	781b      	ldrb	r3, [r3, #0]
 8004a70:	2b02      	cmp	r3, #2
 8004a72:	d106      	bne.n	8004a82 <_ProcessBiasMainMenuEvents+0x5a>
	{
		// direction
		eNextState = BiasMenuInputHandler(evGreenBtn);
 8004a74:	2002      	movs	r0, #2
 8004a76:	f7ff fccf 	bl	8004418 <BiasMenuInputHandler>
 8004a7a:	4603      	mov	r3, r0
 8004a7c:	461a      	mov	r2, r3
 8004a7e:	4b08      	ldr	r3, [pc, #32]	; (8004aa0 <_ProcessBiasMainMenuEvents+0x78>)
 8004a80:	701a      	strb	r2, [r3, #0]
	}
	if(eNewEvent == evYellowBtn)
 8004a82:	4b06      	ldr	r3, [pc, #24]	; (8004a9c <_ProcessBiasMainMenuEvents+0x74>)
 8004a84:	781b      	ldrb	r3, [r3, #0]
 8004a86:	2b03      	cmp	r3, #3
 8004a88:	d106      	bne.n	8004a98 <_ProcessBiasMainMenuEvents+0x70>
	{
		// set sweep speed
		eNextState = BiasMenuInputHandler(evYellowBtn);
 8004a8a:	2003      	movs	r0, #3
 8004a8c:	f7ff fcc4 	bl	8004418 <BiasMenuInputHandler>
 8004a90:	4603      	mov	r3, r0
 8004a92:	461a      	mov	r2, r3
 8004a94:	4b02      	ldr	r3, [pc, #8]	; (8004aa0 <_ProcessBiasMainMenuEvents+0x78>)
 8004a96:	701a      	strb	r2, [r3, #0]
	}
}
 8004a98:	bf00      	nop
 8004a9a:	bd80      	pop	{r7, pc}
 8004a9c:	200020d2 	.word	0x200020d2
 8004aa0:	200020d1 	.word	0x200020d1

08004aa4 <EM_SetNewEvent>:
 *	@param None
 *	@retval None
 *
 */
void EM_SetNewEvent(eSystemEvent pEvent)
{
 8004aa4:	b480      	push	{r7}
 8004aa6:	b083      	sub	sp, #12
 8004aa8:	af00      	add	r7, sp, #0
 8004aaa:	4603      	mov	r3, r0
 8004aac:	71fb      	strb	r3, [r7, #7]
	eNewEvent = pEvent;
 8004aae:	4a04      	ldr	r2, [pc, #16]	; (8004ac0 <EM_SetNewEvent+0x1c>)
 8004ab0:	79fb      	ldrb	r3, [r7, #7]
 8004ab2:	7013      	strb	r3, [r2, #0]
}
 8004ab4:	bf00      	nop
 8004ab6:	370c      	adds	r7, #12
 8004ab8:	46bd      	mov	sp, r7
 8004aba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004abe:	4770      	bx	lr
 8004ac0:	200020d2 	.word	0x200020d2

08004ac4 <EM_GetSystemState>:
 *	@param None
 *	@retval None
 *
 */
eSystemState EM_GetSystemState()
{
 8004ac4:	b480      	push	{r7}
 8004ac6:	af00      	add	r7, sp, #0
	return eNextState;
 8004ac8:	4b03      	ldr	r3, [pc, #12]	; (8004ad8 <EM_GetSystemState+0x14>)
 8004aca:	781b      	ldrb	r3, [r3, #0]
}
 8004acc:	4618      	mov	r0, r3
 8004ace:	46bd      	mov	sp, r7
 8004ad0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ad4:	4770      	bx	lr
 8004ad6:	bf00      	nop
 8004ad8:	200020d1 	.word	0x200020d1

08004adc <FreqSweepMenuEntryHandler>:
 *	@param None
 *	@retval None
 *
 */
eSystemState FreqSweepMenuEntryHandler()
{
 8004adc:	b580      	push	{r7, lr}
 8004ade:	af00      	add	r7, sp, #0
	#ifdef EVENT_MENU_DEBUG
		printf("FreqSweepMenuEntryHandler captured\n");
	#endif

	DM_RefreshScreen();
 8004ae0:	f7fc feda 	bl	8001898 <DM_RefreshScreen>

	if( sweep_upper_bounds_longest_output_arr != OUTPUT_TIMER->ARR)
 8004ae4:	4b21      	ldr	r3, [pc, #132]	; (8004b6c <FreqSweepMenuEntryHandler+0x90>)
 8004ae6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004ae8:	ee07 3a90 	vmov	s15, r3
 8004aec:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8004af0:	4b1f      	ldr	r3, [pc, #124]	; (8004b70 <FreqSweepMenuEntryHandler+0x94>)
 8004af2:	edd3 7a00 	vldr	s15, [r3]
 8004af6:	eeb4 7a67 	vcmp.f32	s14, s15
 8004afa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004afe:	d008      	beq.n	8004b12 <FreqSweepMenuEntryHandler+0x36>
		sweep_upper_bounds_longest_output_arr  = OUTPUT_TIMER->ARR;
 8004b00:	4b1a      	ldr	r3, [pc, #104]	; (8004b6c <FreqSweepMenuEntryHandler+0x90>)
 8004b02:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004b04:	ee07 3a90 	vmov	s15, r3
 8004b08:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004b0c:	4b18      	ldr	r3, [pc, #96]	; (8004b70 <FreqSweepMenuEntryHandler+0x94>)
 8004b0e:	edc3 7a00 	vstr	s15, [r3]

	if( sweep_upper_bounds_longest_output_arr == MIN_OUTPUT_ARR)
 8004b12:	4b17      	ldr	r3, [pc, #92]	; (8004b70 <FreqSweepMenuEntryHandler+0x94>)
 8004b14:	edd3 7a00 	vldr	s15, [r3]
 8004b18:	eeb2 7a0a 	vmov.f32	s14, #42	; 0x41500000  13.0
 8004b1c:	eef4 7a47 	vcmp.f32	s15, s14
 8004b20:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004b24:	d101      	bne.n	8004b2a <FreqSweepMenuEntryHandler+0x4e>
	{
		FS_SetSweepModeDown();
 8004b26:	f000 ffbb 	bl	8005aa0 <FS_SetSweepModeDown>
	}

	FS_SetEncoderControlMode(ENCODER_SWEEP_SPEED_FUNCTION);
 8004b2a:	2000      	movs	r0, #0
 8004b2c:	f001 f812 	bl	8005b54 <FS_SetEncoderControlMode>
	FS_SetSweepTimerAutoReloadForEncoderControl(ENCODER_SWEEP_SPEED_FUNCTION);
 8004b30:	2000      	movs	r0, #0
 8004b32:	f001 f86d 	bl	8005c10 <FS_SetSweepTimerAutoReloadForEncoderControl>
	calculated_sweep_in_hertz = FS_GetCalculatedSweepFrequencyInHertz();
 8004b36:	f001 f8a7 	bl	8005c88 <FS_GetCalculatedSweepFrequencyInHertz>
 8004b3a:	eef0 7a40 	vmov.f32	s15, s0
 8004b3e:	4b0d      	ldr	r3, [pc, #52]	; (8004b74 <FreqSweepMenuEntryHandler+0x98>)
 8004b40:	edc3 7a00 	vstr	s15, [r3]

	// reset sweep start value
	SWEEP_TIMER->CNT = 0;
 8004b44:	4b0c      	ldr	r3, [pc, #48]	; (8004b78 <FreqSweepMenuEntryHandler+0x9c>)
 8004b46:	2200      	movs	r2, #0
 8004b48:	625a      	str	r2, [r3, #36]	; 0x24

	// set default mode to sweep speed control
	FreqSweepMenuInputHandler(evSweepSpeedBtn);
 8004b4a:	2009      	movs	r0, #9
 8004b4c:	f000 f818 	bl	8004b80 <FreqSweepMenuInputHandler>

	// sweep start speed
	SWEEP_TIMER->ARR = MIN_SWEEP_ARR;
 8004b50:	4b09      	ldr	r3, [pc, #36]	; (8004b78 <FreqSweepMenuEntryHandler+0x9c>)
 8004b52:	f244 12a0 	movw	r2, #16800	; 0x41a0
 8004b56:	62da      	str	r2, [r3, #44]	; 0x2c
	SWEEP_TIMER->PSC = 0;
 8004b58:	4b07      	ldr	r3, [pc, #28]	; (8004b78 <FreqSweepMenuEntryHandler+0x9c>)
 8004b5a:	2200      	movs	r2, #0
 8004b5c:	629a      	str	r2, [r3, #40]	; 0x28

	// stay in this state
	eNewEvent = evIdle;
 8004b5e:	4b07      	ldr	r3, [pc, #28]	; (8004b7c <FreqSweepMenuEntryHandler+0xa0>)
 8004b60:	2200      	movs	r2, #0
 8004b62:	701a      	strb	r2, [r3, #0]
	return Freq_Sweep_Menu_State;
 8004b64:	230d      	movs	r3, #13
}
 8004b66:	4618      	mov	r0, r3
 8004b68:	bd80      	pop	{r7, pc}
 8004b6a:	bf00      	nop
 8004b6c:	40013400 	.word	0x40013400
 8004b70:	20000124 	.word	0x20000124
 8004b74:	20002168 	.word	0x20002168
 8004b78:	40000c00 	.word	0x40000c00
 8004b7c:	200020d2 	.word	0x200020d2

08004b80 <FreqSweepMenuInputHandler>:
 *	@param None
 *	@retval None
 *
 */
eSystemState FreqSweepMenuInputHandler(eSystemEvent pEvent)
{
 8004b80:	b580      	push	{r7, lr}
 8004b82:	b082      	sub	sp, #8
 8004b84:	af00      	add	r7, sp, #0
 8004b86:	4603      	mov	r3, r0
 8004b88:	71fb      	strb	r3, [r7, #7]
		printf("FreqAdjustMenuInputHandler Event captured\n");
	#endif



	switch(pEvent)
 8004b8a:	79fb      	ldrb	r3, [r7, #7]
 8004b8c:	3b07      	subs	r3, #7
 8004b8e:	2b04      	cmp	r3, #4
 8004b90:	f200 80b2 	bhi.w	8004cf8 <FreqSweepMenuInputHandler+0x178>
 8004b94:	a201      	add	r2, pc, #4	; (adr r2, 8004b9c <FreqSweepMenuInputHandler+0x1c>)
 8004b96:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004b9a:	bf00      	nop
 8004b9c:	08004bb1 	.word	0x08004bb1
 8004ba0:	08004bcb 	.word	0x08004bcb
 8004ba4:	08004ce9 	.word	0x08004ce9
 8004ba8:	08004cf1 	.word	0x08004cf1
 8004bac:	08004c05 	.word	0x08004c05
			#ifdef EVENT_MENU_DEBUG
				printf("evSweepEnable captured\n");
			#endif

			// toggle enable/disable
			SWEEP_TIMER->DIER 	^= TIM_DIER_UIE;
 8004bb0:	4b56      	ldr	r3, [pc, #344]	; (8004d0c <FreqSweepMenuInputHandler+0x18c>)
 8004bb2:	68db      	ldr	r3, [r3, #12]
 8004bb4:	4a55      	ldr	r2, [pc, #340]	; (8004d0c <FreqSweepMenuInputHandler+0x18c>)
 8004bb6:	f083 0301 	eor.w	r3, r3, #1
 8004bba:	60d3      	str	r3, [r2, #12]
			SWEEP_TIMER->CR1	^= TIM_CR1_CEN;
 8004bbc:	4b53      	ldr	r3, [pc, #332]	; (8004d0c <FreqSweepMenuInputHandler+0x18c>)
 8004bbe:	681b      	ldr	r3, [r3, #0]
 8004bc0:	4a52      	ldr	r2, [pc, #328]	; (8004d0c <FreqSweepMenuInputHandler+0x18c>)
 8004bc2:	f083 0301 	eor.w	r3, r3, #1
 8004bc6:	6013      	str	r3, [r2, #0]
			break;
 8004bc8:	e097      	b.n	8004cfa <FreqSweepMenuInputHandler+0x17a>
			#ifdef EVENT_MENU_DEBUG
				printf("evSweepMode captured\n");
			#endif

			// flip between 0:Upcounter and 1:Downcounter
			active_sweep_mode ^= 1U;
 8004bca:	4b51      	ldr	r3, [pc, #324]	; (8004d10 <FreqSweepMenuInputHandler+0x190>)
 8004bcc:	781b      	ldrb	r3, [r3, #0]
 8004bce:	f083 0301 	eor.w	r3, r3, #1
 8004bd2:	b2da      	uxtb	r2, r3
 8004bd4:	4b4e      	ldr	r3, [pc, #312]	; (8004d10 <FreqSweepMenuInputHandler+0x190>)
 8004bd6:	701a      	strb	r2, [r3, #0]

			switch(active_sweep_mode)
 8004bd8:	4b4d      	ldr	r3, [pc, #308]	; (8004d10 <FreqSweepMenuInputHandler+0x190>)
 8004bda:	781b      	ldrb	r3, [r3, #0]
 8004bdc:	2b01      	cmp	r3, #1
 8004bde:	d004      	beq.n	8004bea <FreqSweepMenuInputHandler+0x6a>
 8004be0:	2b02      	cmp	r3, #2
 8004be2:	d008      	beq.n	8004bf6 <FreqSweepMenuInputHandler+0x76>
 8004be4:	2b00      	cmp	r3, #0
 8004be6:	d003      	beq.n	8004bf0 <FreqSweepMenuInputHandler+0x70>
 8004be8:	e006      	b.n	8004bf8 <FreqSweepMenuInputHandler+0x78>
			{
				case SWEEP_MODE_DOWN:
					FS_SetSweepModeDown();
 8004bea:	f000 ff59 	bl	8005aa0 <FS_SetSweepModeDown>
					break;
 8004bee:	e003      	b.n	8004bf8 <FreqSweepMenuInputHandler+0x78>

				case SWEEP_MODE_UP:
					FS_SetSweepModeUp();
 8004bf0:	f000 ff86 	bl	8005b00 <FS_SetSweepModeUp>
					break;
 8004bf4:	e000      	b.n	8004bf8 <FreqSweepMenuInputHandler+0x78>

				case SWEEP_MODE_BIDIR:	// not used
					//SWEEP_TIMER->CR1 |= (TIM_CR1_CMS_0);
					break;
 8004bf6:	bf00      	nop
			}
			// switch(active_sweep_mode)
			// TODO
			FS_SetEncoderControlMode(theCurrentEncoderSweepFunction);
 8004bf8:	4b46      	ldr	r3, [pc, #280]	; (8004d14 <FreqSweepMenuInputHandler+0x194>)
 8004bfa:	781b      	ldrb	r3, [r3, #0]
 8004bfc:	4618      	mov	r0, r3
 8004bfe:	f000 ffa9 	bl	8005b54 <FS_SetEncoderControlMode>

			break;
 8004c02:	e07a      	b.n	8004cfa <FreqSweepMenuInputHandler+0x17a>

			#ifdef EVENT_MENU_DEBUG
				printf("evEncoderSweep captured\n");
			#endif

			switch(theCurrentEncoderSweepFunction)
 8004c04:	4b43      	ldr	r3, [pc, #268]	; (8004d14 <FreqSweepMenuInputHandler+0x194>)
 8004c06:	781b      	ldrb	r3, [r3, #0]
 8004c08:	2b00      	cmp	r3, #0
 8004c0a:	d002      	beq.n	8004c12 <FreqSweepMenuInputHandler+0x92>
 8004c0c:	2b01      	cmp	r3, #1
 8004c0e:	d00b      	beq.n	8004c28 <FreqSweepMenuInputHandler+0xa8>
					break;

			}
			// switch(theCurrentEncoderSweepFunction)

			break;
 8004c10:	e073      	b.n	8004cfa <FreqSweepMenuInputHandler+0x17a>
					FS_SetSweepTimerAutoReloadForEncoderControl(ENCODER_SWEEP_SPEED_FUNCTION);
 8004c12:	2000      	movs	r0, #0
 8004c14:	f000 fffc 	bl	8005c10 <FS_SetSweepTimerAutoReloadForEncoderControl>
					calculated_sweep_in_hertz = FS_GetCalculatedSweepFrequencyInHertz();
 8004c18:	f001 f836 	bl	8005c88 <FS_GetCalculatedSweepFrequencyInHertz>
 8004c1c:	eef0 7a40 	vmov.f32	s15, s0
 8004c20:	4b3d      	ldr	r3, [pc, #244]	; (8004d18 <FreqSweepMenuInputHandler+0x198>)
 8004c22:	edc3 7a00 	vstr	s15, [r3]
					break;
 8004c26:	e05e      	b.n	8004ce6 <FreqSweepMenuInputHandler+0x166>
					switch(active_sweep_mode)
 8004c28:	4b39      	ldr	r3, [pc, #228]	; (8004d10 <FreqSweepMenuInputHandler+0x190>)
 8004c2a:	781b      	ldrb	r3, [r3, #0]
 8004c2c:	2b00      	cmp	r3, #0
 8004c2e:	d002      	beq.n	8004c36 <FreqSweepMenuInputHandler+0xb6>
 8004c30:	2b01      	cmp	r3, #1
 8004c32:	d02a      	beq.n	8004c8a <FreqSweepMenuInputHandler+0x10a>
							break;
 8004c34:	e056      	b.n	8004ce4 <FreqSweepMenuInputHandler+0x164>
							if(ENCODER_TIMER->CNT < MIN_OUTPUT_ARR)
 8004c36:	4b39      	ldr	r3, [pc, #228]	; (8004d1c <FreqSweepMenuInputHandler+0x19c>)
 8004c38:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004c3a:	2b0c      	cmp	r3, #12
 8004c3c:	d803      	bhi.n	8004c46 <FreqSweepMenuInputHandler+0xc6>
								ENCODER_TIMER->CNT = MIN_OUTPUT_ARR;
 8004c3e:	4b37      	ldr	r3, [pc, #220]	; (8004d1c <FreqSweepMenuInputHandler+0x19c>)
 8004c40:	220d      	movs	r2, #13
 8004c42:	625a      	str	r2, [r3, #36]	; 0x24
							break;
 8004c44:	e04e      	b.n	8004ce4 <FreqSweepMenuInputHandler+0x164>
							else if (ENCODER_TIMER->CNT > sweep_upper_bounds_longest_output_arr)
 8004c46:	4b35      	ldr	r3, [pc, #212]	; (8004d1c <FreqSweepMenuInputHandler+0x19c>)
 8004c48:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004c4a:	ee07 3a90 	vmov	s15, r3
 8004c4e:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8004c52:	4b33      	ldr	r3, [pc, #204]	; (8004d20 <FreqSweepMenuInputHandler+0x1a0>)
 8004c54:	edd3 7a00 	vldr	s15, [r3]
 8004c58:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8004c5c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004c60:	dd09      	ble.n	8004c76 <FreqSweepMenuInputHandler+0xf6>
								ENCODER_TIMER->CNT = sweep_upper_bounds_longest_output_arr;
 8004c62:	4b2f      	ldr	r3, [pc, #188]	; (8004d20 <FreqSweepMenuInputHandler+0x1a0>)
 8004c64:	edd3 7a00 	vldr	s15, [r3]
 8004c68:	4b2c      	ldr	r3, [pc, #176]	; (8004d1c <FreqSweepMenuInputHandler+0x19c>)
 8004c6a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004c6e:	ee17 2a90 	vmov	r2, s15
 8004c72:	625a      	str	r2, [r3, #36]	; 0x24
							break;
 8004c74:	e036      	b.n	8004ce4 <FreqSweepMenuInputHandler+0x164>
								sweep_lower_bounds_shortest_output_arr = ENCODER_TIMER->CNT;
 8004c76:	4b29      	ldr	r3, [pc, #164]	; (8004d1c <FreqSweepMenuInputHandler+0x19c>)
 8004c78:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004c7a:	ee07 3a90 	vmov	s15, r3
 8004c7e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004c82:	4b28      	ldr	r3, [pc, #160]	; (8004d24 <FreqSweepMenuInputHandler+0x1a4>)
 8004c84:	edc3 7a00 	vstr	s15, [r3]
							break;
 8004c88:	e02c      	b.n	8004ce4 <FreqSweepMenuInputHandler+0x164>
							if(ENCODER_TIMER->CNT >= MAX_OUTPUT_ARR)
 8004c8a:	4b24      	ldr	r3, [pc, #144]	; (8004d1c <FreqSweepMenuInputHandler+0x19c>)
 8004c8c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004c8e:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 8004c92:	4293      	cmp	r3, r2
 8004c94:	d904      	bls.n	8004ca0 <FreqSweepMenuInputHandler+0x120>
								ENCODER_TIMER->CNT = MAX_OUTPUT_ARR;
 8004c96:	4b21      	ldr	r3, [pc, #132]	; (8004d1c <FreqSweepMenuInputHandler+0x19c>)
 8004c98:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8004c9c:	625a      	str	r2, [r3, #36]	; 0x24
							break;
 8004c9e:	e020      	b.n	8004ce2 <FreqSweepMenuInputHandler+0x162>
							else if (ENCODER_TIMER->CNT < sweep_lower_bounds_shortest_output_arr)
 8004ca0:	4b1e      	ldr	r3, [pc, #120]	; (8004d1c <FreqSweepMenuInputHandler+0x19c>)
 8004ca2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004ca4:	ee07 3a90 	vmov	s15, r3
 8004ca8:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8004cac:	4b1d      	ldr	r3, [pc, #116]	; (8004d24 <FreqSweepMenuInputHandler+0x1a4>)
 8004cae:	edd3 7a00 	vldr	s15, [r3]
 8004cb2:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8004cb6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004cba:	d509      	bpl.n	8004cd0 <FreqSweepMenuInputHandler+0x150>
								ENCODER_TIMER->CNT = sweep_lower_bounds_shortest_output_arr;
 8004cbc:	4b19      	ldr	r3, [pc, #100]	; (8004d24 <FreqSweepMenuInputHandler+0x1a4>)
 8004cbe:	edd3 7a00 	vldr	s15, [r3]
 8004cc2:	4b16      	ldr	r3, [pc, #88]	; (8004d1c <FreqSweepMenuInputHandler+0x19c>)
 8004cc4:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004cc8:	ee17 2a90 	vmov	r2, s15
 8004ccc:	625a      	str	r2, [r3, #36]	; 0x24
							break;
 8004cce:	e008      	b.n	8004ce2 <FreqSweepMenuInputHandler+0x162>
								sweep_upper_bounds_longest_output_arr = ENCODER_TIMER->CNT;
 8004cd0:	4b12      	ldr	r3, [pc, #72]	; (8004d1c <FreqSweepMenuInputHandler+0x19c>)
 8004cd2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004cd4:	ee07 3a90 	vmov	s15, r3
 8004cd8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004cdc:	4b10      	ldr	r3, [pc, #64]	; (8004d20 <FreqSweepMenuInputHandler+0x1a0>)
 8004cde:	edc3 7a00 	vstr	s15, [r3]
							break;
 8004ce2:	bf00      	nop
					break;
 8004ce4:	bf00      	nop
			break;
 8004ce6:	e008      	b.n	8004cfa <FreqSweepMenuInputHandler+0x17a>

		// set sweep speed button
		case evSweepSpeedBtn:
			FS_SetEncoderControlMode(ENCODER_SWEEP_SPEED_FUNCTION);
 8004ce8:	2000      	movs	r0, #0
 8004cea:	f000 ff33 	bl	8005b54 <FS_SetEncoderControlMode>

			break;
 8004cee:	e004      	b.n	8004cfa <FreqSweepMenuInputHandler+0x17a>

		// set sweep limit button
		case evSweepLimitBtn:
			FS_SetEncoderControlMode(ENCODER_SWEEP_LIMIT_FUNCTION);
 8004cf0:	2001      	movs	r0, #1
 8004cf2:	f000 ff2f 	bl	8005b54 <FS_SetEncoderControlMode>

			break;
 8004cf6:	e000      	b.n	8004cfa <FreqSweepMenuInputHandler+0x17a>

		default:
			break;
 8004cf8:	bf00      	nop
	}
	// switch(pEvent)


	// stay in this state
	eNewEvent = evIdle;
 8004cfa:	4b0b      	ldr	r3, [pc, #44]	; (8004d28 <FreqSweepMenuInputHandler+0x1a8>)
 8004cfc:	2200      	movs	r2, #0
 8004cfe:	701a      	strb	r2, [r3, #0]
	return Freq_Sweep_Menu_State;
 8004d00:	230d      	movs	r3, #13
}
 8004d02:	4618      	mov	r0, r3
 8004d04:	3708      	adds	r7, #8
 8004d06:	46bd      	mov	sp, r7
 8004d08:	bd80      	pop	{r7, pc}
 8004d0a:	bf00      	nop
 8004d0c:	40000c00 	.word	0x40000c00
 8004d10:	200020d3 	.word	0x200020d3
 8004d14:	200020d4 	.word	0x200020d4
 8004d18:	20002168 	.word	0x20002168
 8004d1c:	40012c00 	.word	0x40012c00
 8004d20:	20000124 	.word	0x20000124
 8004d24:	20000120 	.word	0x20000120
 8004d28:	200020d2 	.word	0x200020d2

08004d2c <FreqSweepMenuExitHandler>:
 *	@param None
 *	@retval None
 *
 */
eSystemState FreqSweepMenuExitHandler()
{
 8004d2c:	b580      	push	{r7, lr}
 8004d2e:	af00      	add	r7, sp, #0
	#ifdef EVENT_MENU_DEBUG
		printf("FreqSweepMenuExitHandler Event captured\n");
	#endif

	DM_RefreshScreen();
 8004d30:	f7fc fdb2 	bl	8001898 <DM_RefreshScreen>

	// disable sweep timer and interrupts
	SWEEP_TIMER->DIER 	&= ~(TIM_DIER_UIE);
 8004d34:	4b08      	ldr	r3, [pc, #32]	; (8004d58 <FreqSweepMenuExitHandler+0x2c>)
 8004d36:	68db      	ldr	r3, [r3, #12]
 8004d38:	4a07      	ldr	r2, [pc, #28]	; (8004d58 <FreqSweepMenuExitHandler+0x2c>)
 8004d3a:	f023 0301 	bic.w	r3, r3, #1
 8004d3e:	60d3      	str	r3, [r2, #12]
	SWEEP_TIMER->CR1 	&= ~(TIM_CR1_CEN);
 8004d40:	4b05      	ldr	r3, [pc, #20]	; (8004d58 <FreqSweepMenuExitHandler+0x2c>)
 8004d42:	681b      	ldr	r3, [r3, #0]
 8004d44:	4a04      	ldr	r2, [pc, #16]	; (8004d58 <FreqSweepMenuExitHandler+0x2c>)
 8004d46:	f023 0301 	bic.w	r3, r3, #1
 8004d4a:	6013      	str	r3, [r2, #0]

	// back to main freq menu
	eNewEvent = evIdle;
 8004d4c:	4b03      	ldr	r3, [pc, #12]	; (8004d5c <FreqSweepMenuExitHandler+0x30>)
 8004d4e:	2200      	movs	r2, #0
 8004d50:	701a      	strb	r2, [r3, #0]
	return Freq_Main_Menu_State;
 8004d52:	230a      	movs	r3, #10
}
 8004d54:	4618      	mov	r0, r3
 8004d56:	bd80      	pop	{r7, pc}
 8004d58:	40000c00 	.word	0x40000c00
 8004d5c:	200020d2 	.word	0x200020d2

08004d60 <FreqMainMenuEntryHandler>:
 *	@param None
 *	@retval None
 *
 */
eSystemState FreqMainMenuEntryHandler()
{
 8004d60:	b580      	push	{r7, lr}
 8004d62:	af00      	add	r7, sp, #0
	#ifdef EVENT_MENU_DEBUG
		printf("FreqMainMenuEntryHandler Event captured\n");
	#endif

	DM_RefreshScreen();
 8004d64:	f7fc fd98 	bl	8001898 <DM_RefreshScreen>

	// stay in this state
	eNewEvent = evIdle;
 8004d68:	4b02      	ldr	r3, [pc, #8]	; (8004d74 <FreqMainMenuEntryHandler+0x14>)
 8004d6a:	2200      	movs	r2, #0
 8004d6c:	701a      	strb	r2, [r3, #0]
	return Freq_Main_Menu_State;
 8004d6e:	230a      	movs	r3, #10
}
 8004d70:	4618      	mov	r0, r3
 8004d72:	bd80      	pop	{r7, pc}
 8004d74:	200020d2 	.word	0x200020d2

08004d78 <FreqMainMenuExitHandler>:
 *	@param None
 *	@retval None
 *
 */
eSystemState FreqMainMenuExitHandler()
{
 8004d78:	b580      	push	{r7, lr}
 8004d7a:	af00      	add	r7, sp, #0
	#ifdef EVENT_MENU_DEBUG
		printf("FreqMainMenuExitHandler Event captured\n");
	#endif

	ENCODER_TIMER->ARR = 1024;
 8004d7c:	4b05      	ldr	r3, [pc, #20]	; (8004d94 <FreqMainMenuExitHandler+0x1c>)
 8004d7e:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8004d82:	62da      	str	r2, [r3, #44]	; 0x2c

	DM_RefreshScreen();
 8004d84:	f7fc fd88 	bl	8001898 <DM_RefreshScreen>

	#ifdef EVENT_MENU_DEBUG
		  printf("returning to Idle State\n");
	#endif

	eNewEvent = evIdle;
 8004d88:	4b03      	ldr	r3, [pc, #12]	; (8004d98 <FreqMainMenuExitHandler+0x20>)
 8004d8a:	2200      	movs	r2, #0
 8004d8c:	701a      	strb	r2, [r3, #0]
	return Toplevel_Output_Menu_State;
 8004d8e:	2301      	movs	r3, #1
}
 8004d90:	4618      	mov	r0, r3
 8004d92:	bd80      	pop	{r7, pc}
 8004d94:	40012c00 	.word	0x40012c00
 8004d98:	200020d2 	.word	0x200020d2

08004d9c <FreqPresetMenuEntryHandler>:
 *	@param None
 *	@retval None
 *
 */
eSystemState FreqPresetMenuEntryHandler()
{
 8004d9c:	b580      	push	{r7, lr}
 8004d9e:	b082      	sub	sp, #8
 8004da0:	af00      	add	r7, sp, #0
	#ifdef EVENT_MENU_DEBUG
		printf("FreqPresetMenuEntryHandler Event captured\n");
	#endif

	DM_RefreshScreen();
 8004da2:	f7fc fd79 	bl	8001898 <DM_RefreshScreen>
	FreqO_ResetLastEncoderValue();
 8004da6:	f000 fe6f 	bl	8005a88 <FreqO_ResetLastEncoderValue>

	FreqProfile_t *pFreqPresetTmp =  FreqO_GetFPresetObject();
 8004daa:	f000 fe1f 	bl	80059ec <FreqO_GetFPresetObject>
 8004dae:	6078      	str	r0, [r7, #4]
	if(pFreqPresetTmp)
 8004db0:	687b      	ldr	r3, [r7, #4]
 8004db2:	2b00      	cmp	r3, #0
 8004db4:	d008      	beq.n	8004dc8 <FreqPresetMenuEntryHandler+0x2c>
	{
		// set rotary encoder limit to full scale and set centre starting position
		ENCODER_TIMER->CNT = 32768;
 8004db6:	4b0a      	ldr	r3, [pc, #40]	; (8004de0 <FreqPresetMenuEntryHandler+0x44>)
 8004db8:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8004dbc:	625a      	str	r2, [r3, #36]	; 0x24
		ENCODER_TIMER->ARR = 65535;
 8004dbe:	4b08      	ldr	r3, [pc, #32]	; (8004de0 <FreqPresetMenuEntryHandler+0x44>)
 8004dc0:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8004dc4:	62da      	str	r2, [r3, #44]	; 0x2c
 8004dc6:	e002      	b.n	8004dce <FreqPresetMenuEntryHandler+0x32>
	}
	else
	{
		DM_SetErrorDebugMsg("_FreqPresetMenuEntryHandler: pFreqPresetTmp null pointer");
 8004dc8:	4806      	ldr	r0, [pc, #24]	; (8004de4 <FreqPresetMenuEntryHandler+0x48>)
 8004dca:	f7fc fdab 	bl	8001924 <DM_SetErrorDebugMsg>
	}


	// stay in this state
	eNewEvent = evIdle;
 8004dce:	4b06      	ldr	r3, [pc, #24]	; (8004de8 <FreqPresetMenuEntryHandler+0x4c>)
 8004dd0:	2200      	movs	r2, #0
 8004dd2:	701a      	strb	r2, [r3, #0]
	return Freq_Preset_Menu_State;
 8004dd4:	230b      	movs	r3, #11
}
 8004dd6:	4618      	mov	r0, r3
 8004dd8:	3708      	adds	r7, #8
 8004dda:	46bd      	mov	sp, r7
 8004ddc:	bd80      	pop	{r7, pc}
 8004dde:	bf00      	nop
 8004de0:	40012c00 	.word	0x40012c00
 8004de4:	08015d94 	.word	0x08015d94
 8004de8:	200020d2 	.word	0x200020d2

08004dec <FreqPresetMenuInputHandler>:
 *	@param None
 *	@retval None
 *
 */
eSystemState FreqPresetMenuInputHandler()
{
 8004dec:	b580      	push	{r7, lr}
 8004dee:	af00      	add	r7, sp, #0
	#ifdef EVENT_MENU_DEBUG
		printf("FreqPresetMenuInputHandler Event captured\n");
	#endif

	FreqO_MapEncoderPositionCoarse(SM_GetEncoderValue(ENCODER_NORMAL));
 8004df0:	2000      	movs	r0, #0
 8004df2:	f002 f871 	bl	8006ed8 <SM_GetEncoderValue>
 8004df6:	4603      	mov	r3, r0
 8004df8:	4618      	mov	r0, r3
 8004dfa:	f000 fcd3 	bl	80057a4 <FreqO_MapEncoderPositionCoarse>

	// stay in this state
	eNewEvent = evIdle;
 8004dfe:	4b03      	ldr	r3, [pc, #12]	; (8004e0c <FreqPresetMenuInputHandler+0x20>)
 8004e00:	2200      	movs	r2, #0
 8004e02:	701a      	strb	r2, [r3, #0]
	return Freq_Preset_Menu_State;
 8004e04:	230b      	movs	r3, #11
}
 8004e06:	4618      	mov	r0, r3
 8004e08:	bd80      	pop	{r7, pc}
 8004e0a:	bf00      	nop
 8004e0c:	200020d2 	.word	0x200020d2

08004e10 <FreqPresetMenuExitHandler>:
 *	@param None
 *	@retval None
 *
 */
eSystemState FreqPresetMenuExitHandler()
{
 8004e10:	b580      	push	{r7, lr}
 8004e12:	af00      	add	r7, sp, #0
	#ifdef EVENT_MENU_DEBUG
		printf("FreqPresetMenuExitHandler Event captured\n");
	#endif

	DM_RefreshScreen();
 8004e14:	f7fc fd40 	bl	8001898 <DM_RefreshScreen>

	// back to main freq menu
	eNewEvent = evIdle;
 8004e18:	4b02      	ldr	r3, [pc, #8]	; (8004e24 <FreqPresetMenuExitHandler+0x14>)
 8004e1a:	2200      	movs	r2, #0
 8004e1c:	701a      	strb	r2, [r3, #0]
	return Freq_Main_Menu_State;
 8004e1e:	230a      	movs	r3, #10
}
 8004e20:	4618      	mov	r0, r3
 8004e22:	bd80      	pop	{r7, pc}
 8004e24:	200020d2 	.word	0x200020d2

08004e28 <FreqAdjustMenuEntryHandler>:
 *	@param None
 *	@retval None
 *
 */
eSystemState FreqAdjustMenuEntryHandler()
{
 8004e28:	b580      	push	{r7, lr}
 8004e2a:	af00      	add	r7, sp, #0
	#ifdef EVENT_MENU_DEBUG
		printf("FreqAdjustMenuEntryHandler Event captured\n");
	#endif

	DM_RefreshScreen();
 8004e2c:	f7fc fd34 	bl	8001898 <DM_RefreshScreen>

	// set rotary encoder limit to full scale and set OUTPUT_TIMER "TOP" starting position
	ENCODER_TIMER->CNT = OUTPUT_TIMER->ARR;
 8004e30:	4b06      	ldr	r3, [pc, #24]	; (8004e4c <FreqAdjustMenuEntryHandler+0x24>)
 8004e32:	4a07      	ldr	r2, [pc, #28]	; (8004e50 <FreqAdjustMenuEntryHandler+0x28>)
 8004e34:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004e36:	6253      	str	r3, [r2, #36]	; 0x24
	ENCODER_TIMER->ARR = 65535;
 8004e38:	4b05      	ldr	r3, [pc, #20]	; (8004e50 <FreqAdjustMenuEntryHandler+0x28>)
 8004e3a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8004e3e:	62da      	str	r2, [r3, #44]	; 0x2c

	// stay in this state
	eNewEvent = evIdle;
 8004e40:	4b04      	ldr	r3, [pc, #16]	; (8004e54 <FreqAdjustMenuEntryHandler+0x2c>)
 8004e42:	2200      	movs	r2, #0
 8004e44:	701a      	strb	r2, [r3, #0]
	return Freq_Adjust_Menu_State;
 8004e46:	230c      	movs	r3, #12
}
 8004e48:	4618      	mov	r0, r3
 8004e4a:	bd80      	pop	{r7, pc}
 8004e4c:	40013400 	.word	0x40013400
 8004e50:	40012c00 	.word	0x40012c00
 8004e54:	200020d2 	.word	0x200020d2

08004e58 <FreqAdjustMenuInputHandler>:
 *	@param None
 *	@retval None
 *
 */
eSystemState FreqAdjustMenuInputHandler()
{
 8004e58:	b580      	push	{r7, lr}
 8004e5a:	af00      	add	r7, sp, #0
	#ifdef EVENT_MENU_DEBUG
		printf("FreqAdjustMenuInputHandler Event captured\n");
	#endif

	FreqO_AdjustFreq();
 8004e5c:	f000 fd72 	bl	8005944 <FreqO_AdjustFreq>

	// stay in this state
	eNewEvent = evIdle;
 8004e60:	4b02      	ldr	r3, [pc, #8]	; (8004e6c <FreqAdjustMenuInputHandler+0x14>)
 8004e62:	2200      	movs	r2, #0
 8004e64:	701a      	strb	r2, [r3, #0]
	return Freq_Adjust_Menu_State;
 8004e66:	230c      	movs	r3, #12
}
 8004e68:	4618      	mov	r0, r3
 8004e6a:	bd80      	pop	{r7, pc}
 8004e6c:	200020d2 	.word	0x200020d2

08004e70 <FreqAdjustMenuExitHandler>:
 *	@param None
 *	@retval None
 *
 */
eSystemState FreqAdjustMenuExitHandler()
{
 8004e70:	b580      	push	{r7, lr}
 8004e72:	af00      	add	r7, sp, #0
	#ifdef EVENT_MENU_DEBUG
		printf("FreqAdjustMenuExitHandler Event captured\n");
	#endif

	DM_RefreshScreen();
 8004e74:	f7fc fd10 	bl	8001898 <DM_RefreshScreen>

	// back to main freq menu
	eNewEvent = evIdle;
 8004e78:	4b02      	ldr	r3, [pc, #8]	; (8004e84 <FreqAdjustMenuExitHandler+0x14>)
 8004e7a:	2200      	movs	r2, #0
 8004e7c:	701a      	strb	r2, [r3, #0]
	return Freq_Main_Menu_State;
 8004e7e:	230a      	movs	r3, #10
}
 8004e80:	4618      	mov	r0, r3
 8004e82:	bd80      	pop	{r7, pc}
 8004e84:	200020d2 	.word	0x200020d2

08004e88 <FreqPrescalerMenuEntryHandler>:
 *	@param None
 *	@retval None
 *
 */
eSystemState FreqPrescalerMenuEntryHandler()
{
 8004e88:	b580      	push	{r7, lr}
 8004e8a:	af00      	add	r7, sp, #0
	#ifdef EVENT_MENU_DEBUG
		printf("FreqPrescalerMenuEntryHandler Event captured\n");
	#endif

	DM_RefreshScreen();
 8004e8c:	f7fc fd04 	bl	8001898 <DM_RefreshScreen>

	// set rotary encoder limit to full scale and midway starting position
	ENCODER_TIMER->CNT = 32768;
 8004e90:	4b06      	ldr	r3, [pc, #24]	; (8004eac <FreqPrescalerMenuEntryHandler+0x24>)
 8004e92:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8004e96:	625a      	str	r2, [r3, #36]	; 0x24
	ENCODER_TIMER->ARR = 65535;
 8004e98:	4b04      	ldr	r3, [pc, #16]	; (8004eac <FreqPrescalerMenuEntryHandler+0x24>)
 8004e9a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8004e9e:	62da      	str	r2, [r3, #44]	; 0x2c

	// stay in this state
	eNewEvent = evIdle;
 8004ea0:	4b03      	ldr	r3, [pc, #12]	; (8004eb0 <FreqPrescalerMenuEntryHandler+0x28>)
 8004ea2:	2200      	movs	r2, #0
 8004ea4:	701a      	strb	r2, [r3, #0]
	return Freq_Prescaler_Menu_State;
 8004ea6:	230e      	movs	r3, #14
}
 8004ea8:	4618      	mov	r0, r3
 8004eaa:	bd80      	pop	{r7, pc}
 8004eac:	40012c00 	.word	0x40012c00
 8004eb0:	200020d2 	.word	0x200020d2

08004eb4 <FreqPrescalerMenuInputHandler>:
 *	@param None
 *	@retval None
 *
 */
eSystemState FreqPrescalerMenuInputHandler()
{
 8004eb4:	b580      	push	{r7, lr}
 8004eb6:	af00      	add	r7, sp, #0
	#ifdef EVENT_MENU_DEBUG
		printf("FreqPrescalerMenuInputHandler Event captured\n");
	#endif

	FreqO_AdjustPrescaler();
 8004eb8:	f000 fd70 	bl	800599c <FreqO_AdjustPrescaler>

	// stay in this state
	eNewEvent = evIdle;
 8004ebc:	4b02      	ldr	r3, [pc, #8]	; (8004ec8 <FreqPrescalerMenuInputHandler+0x14>)
 8004ebe:	2200      	movs	r2, #0
 8004ec0:	701a      	strb	r2, [r3, #0]
	return Freq_Prescaler_Menu_State;
 8004ec2:	230e      	movs	r3, #14
}
 8004ec4:	4618      	mov	r0, r3
 8004ec6:	bd80      	pop	{r7, pc}
 8004ec8:	200020d2 	.word	0x200020d2

08004ecc <FreqPrescalerMenuExitHandler>:
 *	@param None
 *	@retval None
 *
 */
eSystemState FreqPrescalerMenuExitHandler()
{
 8004ecc:	b580      	push	{r7, lr}
 8004ece:	af00      	add	r7, sp, #0
	#ifdef EVENT_MENU_DEBUG
		printf("FreqPrescalerMenuExitHandler Event captured\n");
	#endif

	DM_RefreshScreen();
 8004ed0:	f7fc fce2 	bl	8001898 <DM_RefreshScreen>

	// back to main freq menu
	eNewEvent = evIdle;
 8004ed4:	4b02      	ldr	r3, [pc, #8]	; (8004ee0 <FreqPrescalerMenuExitHandler+0x14>)
 8004ed6:	2200      	movs	r2, #0
 8004ed8:	701a      	strb	r2, [r3, #0]
	return Freq_Main_Menu_State;
 8004eda:	230a      	movs	r3, #10
}
 8004edc:	4618      	mov	r0, r3
 8004ede:	bd80      	pop	{r7, pc}
 8004ee0:	200020d2 	.word	0x200020d2

08004ee4 <FuncMainMenuEntryHandler>:
 *	@param None
 *	@retval eSystemState enum for next system state
 *
 */
eSystemState FuncMainMenuEntryHandler(void)
{
 8004ee4:	b580      	push	{r7, lr}
 8004ee6:	af00      	add	r7, sp, #0
	#ifdef EVENT_MENU_DEBUG
		printf("FuncMainMenuEntryHandler Event captured\n");
	#endif

	DM_RefreshScreen();
 8004ee8:	f7fc fcd6 	bl	8001898 <DM_RefreshScreen>

	//_setFuncMenuStatus(ENABLE_FUNC_MAIN_MENU);

	eNewEvent = evIdle;
 8004eec:	4b02      	ldr	r3, [pc, #8]	; (8004ef8 <FuncMainMenuEntryHandler+0x14>)
 8004eee:	2200      	movs	r2, #0
 8004ef0:	701a      	strb	r2, [r3, #0]
	return Func_Main_Menu_State;
 8004ef2:	2303      	movs	r3, #3
}
 8004ef4:	4618      	mov	r0, r3
 8004ef6:	bd80      	pop	{r7, pc}
 8004ef8:	200020d2 	.word	0x200020d2

08004efc <FuncMainMenuExitHandler>:
 *	@param None
 *	@retval eSystemState enum for next system state
 *
 */
eSystemState FuncMainMenuExitHandler()
{
 8004efc:	b580      	push	{r7, lr}
 8004efe:	af00      	add	r7, sp, #0
	#ifdef EVENT_MENU_DEBUG
		printf("FuncMainMenuExitHandler Event captured\n");
	#endif

	DM_RefreshScreen();
 8004f00:	f7fc fcca 	bl	8001898 <DM_RefreshScreen>

	#ifdef EVENT_MENU_DEBUG
		  printf("returning to Idle State\n");
	#endif

	eNewEvent = evIdle;
 8004f04:	4b02      	ldr	r3, [pc, #8]	; (8004f10 <FuncMainMenuExitHandler+0x14>)
 8004f06:	2200      	movs	r2, #0
 8004f08:	701a      	strb	r2, [r3, #0]
	return Toplevel_Output_Menu_State;
 8004f0a:	2301      	movs	r3, #1
}
 8004f0c:	4618      	mov	r0, r3
 8004f0e:	bd80      	pop	{r7, pc}
 8004f10:	200020d2 	.word	0x200020d2

08004f14 <FuncSignalMenuEntryHandler>:
 *	@param None
 *	@retval eSystemState enum for next system state
 *
 */
eSystemState FuncSignalMenuEntryHandler(void)
{
 8004f14:	b580      	push	{r7, lr}
 8004f16:	af00      	add	r7, sp, #0
	#ifdef EVENT_MENU_DEBUG
		printf("FuncSignalMenuEntryHandler Event captured\n");
	#endif

	DM_RefreshScreen();
 8004f18:	f7fc fcbe 	bl	8001898 <DM_RefreshScreen>
	FuncO_ResetLastEncoderValue();
 8004f1c:	f000 fee2 	bl	8005ce4 <FuncO_ResetLastEncoderValue>

	ENCODER_TIMER->CNT = 32768;
 8004f20:	4b06      	ldr	r3, [pc, #24]	; (8004f3c <FuncSignalMenuEntryHandler+0x28>)
 8004f22:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8004f26:	625a      	str	r2, [r3, #36]	; 0x24
	ENCODER_TIMER->ARR = 65535;
 8004f28:	4b04      	ldr	r3, [pc, #16]	; (8004f3c <FuncSignalMenuEntryHandler+0x28>)
 8004f2a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8004f2e:	62da      	str	r2, [r3, #44]	; 0x2c

	eNewEvent = evIdle;
 8004f30:	4b03      	ldr	r3, [pc, #12]	; (8004f40 <FuncSignalMenuEntryHandler+0x2c>)
 8004f32:	2200      	movs	r2, #0
 8004f34:	701a      	strb	r2, [r3, #0]
	return Func_Signal_Menu_State;
 8004f36:	2304      	movs	r3, #4
}
 8004f38:	4618      	mov	r0, r3
 8004f3a:	bd80      	pop	{r7, pc}
 8004f3c:	40012c00 	.word	0x40012c00
 8004f40:	200020d2 	.word	0x200020d2

08004f44 <FuncSignalMenuInputHandler>:
 *	@param None
 *	@retval eSystemState enum for next system state
 *
 */
eSystemState FuncSignalMenuInputHandler(void)
{
 8004f44:	b580      	push	{r7, lr}
 8004f46:	af00      	add	r7, sp, #0
	#ifdef EVENT_MENU_DEBUG
		printf("FuncSignalMenuInputHandler Event captured\n");
	#endif

	FuncO_MapEncoderPositionToSignalOutput(SM_GetEncoderValue(ENCODER_NORMAL));
 8004f48:	2000      	movs	r0, #0
 8004f4a:	f001 ffc5 	bl	8006ed8 <SM_GetEncoderValue>
 8004f4e:	4603      	mov	r3, r0
 8004f50:	4618      	mov	r0, r3
 8004f52:	f000 fed3 	bl	8005cfc <FuncO_MapEncoderPositionToSignalOutput>

	eNewEvent = evIdle;
 8004f56:	4b03      	ldr	r3, [pc, #12]	; (8004f64 <FuncSignalMenuInputHandler+0x20>)
 8004f58:	2200      	movs	r2, #0
 8004f5a:	701a      	strb	r2, [r3, #0]
	return Func_Signal_Menu_State;
 8004f5c:	2304      	movs	r3, #4
}
 8004f5e:	4618      	mov	r0, r3
 8004f60:	bd80      	pop	{r7, pc}
 8004f62:	bf00      	nop
 8004f64:	200020d2 	.word	0x200020d2

08004f68 <FuncSignalMenuExitHandler>:
 *	@param None
 *	@retval eSystemState enum for next system state
 *
 */
eSystemState FuncSignalMenuExitHandler()
{
 8004f68:	b580      	push	{r7, lr}
 8004f6a:	af00      	add	r7, sp, #0
	#ifdef EVENT_MENU_DEBUG
		printf("FuncSignalMenuExitHandler Event captured\n");
	#endif

	DM_RefreshScreen();
 8004f6c:	f7fc fc94 	bl	8001898 <DM_RefreshScreen>
	SM_ResetFuncPwmDutyMode();
 8004f70:	f002 f854 	bl	800701c <SM_ResetFuncPwmDutyMode>
	eNewEvent = evIdle;
 8004f74:	4b02      	ldr	r3, [pc, #8]	; (8004f80 <FuncSignalMenuExitHandler+0x18>)
 8004f76:	2200      	movs	r2, #0
 8004f78:	701a      	strb	r2, [r3, #0]
	return Func_Main_Menu_State;
 8004f7a:	2303      	movs	r3, #3
}
 8004f7c:	4618      	mov	r0, r3
 8004f7e:	bd80      	pop	{r7, pc}
 8004f80:	200020d2 	.word	0x200020d2

08004f84 <FuncAuxMenuEntryHandler>:
 *	@param None
 *	@retval eSystemState enum for next system state
 *
 */
eSystemState FuncAuxMenuEntryHandler(void)
{
 8004f84:	b580      	push	{r7, lr}
 8004f86:	af00      	add	r7, sp, #0
	#ifdef EVENT_MENU_DEBUG
		printf("FuncAuxMenuEntryHandler Event captured\n");
	#endif

	DM_RefreshScreen();
 8004f88:	f7fc fc86 	bl	8001898 <DM_RefreshScreen>
	FuncO_ResetLastEncoderValue();
 8004f8c:	f000 feaa 	bl	8005ce4 <FuncO_ResetLastEncoderValue>

	ENCODER_TIMER->CNT = 32768;
 8004f90:	4b06      	ldr	r3, [pc, #24]	; (8004fac <FuncAuxMenuEntryHandler+0x28>)
 8004f92:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8004f96:	625a      	str	r2, [r3, #36]	; 0x24
	ENCODER_TIMER->ARR = 65535;
 8004f98:	4b04      	ldr	r3, [pc, #16]	; (8004fac <FuncAuxMenuEntryHandler+0x28>)
 8004f9a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8004f9e:	62da      	str	r2, [r3, #44]	; 0x2c

	eNewEvent = evIdle;
 8004fa0:	4b03      	ldr	r3, [pc, #12]	; (8004fb0 <FuncAuxMenuEntryHandler+0x2c>)
 8004fa2:	2200      	movs	r2, #0
 8004fa4:	701a      	strb	r2, [r3, #0]
	return Func_Aux_Menu_State;
 8004fa6:	2305      	movs	r3, #5
}
 8004fa8:	4618      	mov	r0, r3
 8004faa:	bd80      	pop	{r7, pc}
 8004fac:	40012c00 	.word	0x40012c00
 8004fb0:	200020d2 	.word	0x200020d2
 8004fb4:	00000000 	.word	0x00000000

08004fb8 <FuncAuxMenuInputHandler>:
 *	@param None
 *	@retval eSystemState enum for next system state
 *
 */
eSystemState FuncAuxMenuInputHandler(void)
{
 8004fb8:	b590      	push	{r4, r7, lr}
 8004fba:	b083      	sub	sp, #12
 8004fbc:	af00      	add	r7, sp, #0
	#ifdef EVENT_MENU_DEBUG
		printf("FuncAuxMenuInputHandler Event captured\n");
	#endif

	// PWM ADJUST
	if(SM_IsFuncPwmDutyMode())
 8004fbe:	f002 f811 	bl	8006fe4 <SM_IsFuncPwmDutyMode>
 8004fc2:	4603      	mov	r3, r0
 8004fc4:	2b00      	cmp	r3, #0
 8004fc6:	d01a      	beq.n	8004ffe <FuncAuxMenuInputHandler+0x46>
	{
		uint16_t enc_value = SM_GetEncoderValue(ENCODER_NORMAL);
 8004fc8:	2000      	movs	r0, #0
 8004fca:	f001 ff85 	bl	8006ed8 <SM_GetEncoderValue>
 8004fce:	4603      	mov	r3, r0
 8004fd0:	80fb      	strh	r3, [r7, #6]
		PWM_AUX_OUT_TIM->CCR1 = (pow(enc_value, 2));
 8004fd2:	88fb      	ldrh	r3, [r7, #6]
 8004fd4:	4618      	mov	r0, r3
 8004fd6:	f7fb fabd 	bl	8000554 <__aeabi_ui2d>
 8004fda:	4603      	mov	r3, r0
 8004fdc:	460c      	mov	r4, r1
 8004fde:	ed9f 1b10 	vldr	d1, [pc, #64]	; 8005020 <FuncAuxMenuInputHandler+0x68>
 8004fe2:	ec44 3b10 	vmov	d0, r3, r4
 8004fe6:	f00f f99b 	bl	8014320 <pow>
 8004fea:	ec53 2b10 	vmov	r2, r3, d0
 8004fee:	4c0e      	ldr	r4, [pc, #56]	; (8005028 <FuncAuxMenuInputHandler+0x70>)
 8004ff0:	4610      	mov	r0, r2
 8004ff2:	4619      	mov	r1, r3
 8004ff4:	f7fb fe00 	bl	8000bf8 <__aeabi_d2uiz>
 8004ff8:	4603      	mov	r3, r0
 8004ffa:	6363      	str	r3, [r4, #52]	; 0x34
 8004ffc:	e006      	b.n	800500c <FuncAuxMenuInputHandler+0x54>
	}
	else
	{
		FuncO_MapEncoderPositionToAuxOutput(SM_GetEncoderValue(ENCODER_NORMAL));
 8004ffe:	2000      	movs	r0, #0
 8005000:	f001 ff6a 	bl	8006ed8 <SM_GetEncoderValue>
 8005004:	4603      	mov	r3, r0
 8005006:	4618      	mov	r0, r3
 8005008:	f000 feb2 	bl	8005d70 <FuncO_MapEncoderPositionToAuxOutput>
	}

	eNewEvent = evIdle;
 800500c:	4b07      	ldr	r3, [pc, #28]	; (800502c <FuncAuxMenuInputHandler+0x74>)
 800500e:	2200      	movs	r2, #0
 8005010:	701a      	strb	r2, [r3, #0]
	return Func_Aux_Menu_State;
 8005012:	2305      	movs	r3, #5
}
 8005014:	4618      	mov	r0, r3
 8005016:	370c      	adds	r7, #12
 8005018:	46bd      	mov	sp, r7
 800501a:	bd90      	pop	{r4, r7, pc}
 800501c:	f3af 8000 	nop.w
 8005020:	00000000 	.word	0x00000000
 8005024:	40000000 	.word	0x40000000
 8005028:	40000400 	.word	0x40000400
 800502c:	200020d2 	.word	0x200020d2

08005030 <FuncAuxToggleDutyMode>:
 *	@param None
 *	@retval None
 *
 */
eSystemState FuncAuxToggleDutyMode()
{
 8005030:	b580      	push	{r7, lr}
 8005032:	af00      	add	r7, sp, #0
	SM_ToggleFuncPwmDutyMode();
 8005034:	f001 ffe2 	bl	8006ffc <SM_ToggleFuncPwmDutyMode>
	ENCODER_TIMER->ARR = 16384;
 8005038:	4b04      	ldr	r3, [pc, #16]	; (800504c <FuncAuxToggleDutyMode+0x1c>)
 800503a:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800503e:	62da      	str	r2, [r3, #44]	; 0x2c
	eNewEvent = evIdle;
 8005040:	4b03      	ldr	r3, [pc, #12]	; (8005050 <FuncAuxToggleDutyMode+0x20>)
 8005042:	2200      	movs	r2, #0
 8005044:	701a      	strb	r2, [r3, #0]
	return Func_Aux_Menu_State;
 8005046:	2305      	movs	r3, #5
}
 8005048:	4618      	mov	r0, r3
 800504a:	bd80      	pop	{r7, pc}
 800504c:	40012c00 	.word	0x40012c00
 8005050:	200020d2 	.word	0x200020d2

08005054 <FuncAuxMenuExitHandler>:
 *	@param None
 *	@retval eSystemState enum for next system state
 *
 */
eSystemState FuncAuxMenuExitHandler()
{
 8005054:	b580      	push	{r7, lr}
 8005056:	af00      	add	r7, sp, #0
	#ifdef EVENT_MENU_DEBUG
		printf("FuncAuxMenuExitHandler Event captured\n");
	#endif

	SM_ResetFuncPwmDutyMode();
 8005058:	f001 ffe0 	bl	800701c <SM_ResetFuncPwmDutyMode>
	DM_RefreshScreen();
 800505c:	f7fc fc1c 	bl	8001898 <DM_RefreshScreen>

	eNewEvent = evIdle;
 8005060:	4b02      	ldr	r3, [pc, #8]	; (800506c <FuncAuxMenuExitHandler+0x18>)
 8005062:	2200      	movs	r2, #0
 8005064:	701a      	strb	r2, [r3, #0]
	return Func_Main_Menu_State;
 8005066:	2303      	movs	r3, #3
}
 8005068:	4618      	mov	r0, r3
 800506a:	bd80      	pop	{r7, pc}
 800506c:	200020d2 	.word	0x200020d2

08005070 <GainMainMenuEntryHandler>:
 *	@param None
 *	@retval None
 *
 */
eSystemState GainMainMenuEntryHandler()
{
 8005070:	b580      	push	{r7, lr}
 8005072:	af00      	add	r7, sp, #0
	#ifdef EVENT_MENU_DEBUG
		printf("GainMainMenuEntryHandler Event captured\n");
	#endif

	DM_RefreshScreen();
 8005074:	f7fc fc10 	bl	8001898 <DM_RefreshScreen>

	eNewEvent = evIdle;
 8005078:	4b02      	ldr	r3, [pc, #8]	; (8005084 <GainMainMenuEntryHandler+0x14>)
 800507a:	2200      	movs	r2, #0
 800507c:	701a      	strb	r2, [r3, #0]
	return Gain_Main_Menu_State;
 800507e:	2306      	movs	r3, #6
}
 8005080:	4618      	mov	r0, r3
 8005082:	bd80      	pop	{r7, pc}
 8005084:	200020d2 	.word	0x200020d2

08005088 <GainMainMenuExitHandler>:
 *	@param None
 *	@retval None
 *
 */
eSystemState GainMainMenuExitHandler()
{
 8005088:	b580      	push	{r7, lr}
 800508a:	af00      	add	r7, sp, #0
	#ifdef EVENT_MENU_DEBUG
		printf("GainMainMenuExitHandler Event captured\n");
	#endif

	DM_RefreshScreen();
 800508c:	f7fc fc04 	bl	8001898 <DM_RefreshScreen>

	#ifdef EVENT_MENU_DEBUG
		  printf("returning to Idle State\n");
	#endif

	eNewEvent = evIdle;
 8005090:	4b02      	ldr	r3, [pc, #8]	; (800509c <GainMainMenuExitHandler+0x14>)
 8005092:	2200      	movs	r2, #0
 8005094:	701a      	strb	r2, [r3, #0]
	return Toplevel_Output_Menu_State;
 8005096:	2301      	movs	r3, #1
}
 8005098:	4618      	mov	r0, r3
 800509a:	bd80      	pop	{r7, pc}
 800509c:	200020d2 	.word	0x200020d2

080050a0 <GainSignalMenuEntryHandler>:
 *	@param None
 *	@retval None
 *
 */
eSystemState GainSignalMenuEntryHandler()
{
 80050a0:	b580      	push	{r7, lr}
 80050a2:	b082      	sub	sp, #8
 80050a4:	af00      	add	r7, sp, #0
	#ifdef EVENT_MENU_DEBUG
		printf("GainSignalMenuEntryHandler Event captured\n");
	#endif

	DM_RefreshScreen();
 80050a6:	f7fc fbf7 	bl	8001898 <DM_RefreshScreen>
	GO_ResetLastEncoderValue();
 80050aa:	f001 f857 	bl	800615c <GO_ResetLastEncoderValue>
	VPP_ResetLastEncoderValue();
 80050ae:	f001 ffc1 	bl	8007034 <VPP_ResetLastEncoderValue>

	AmplitudeProfile_t* pTmpVppPreset = SM_GetOutputChannel(SIGNAL_CHANNEL)->amp_profile;
 80050b2:	2000      	movs	r0, #0
 80050b4:	f001 fc94 	bl	80069e0 <SM_GetOutputChannel>
 80050b8:	4603      	mov	r3, r0
 80050ba:	f8d3 31ec 	ldr.w	r3, [r3, #492]	; 0x1ec
 80050be:	607b      	str	r3, [r7, #4]

	if(pTmpVppPreset)
 80050c0:	687b      	ldr	r3, [r7, #4]
 80050c2:	2b00      	cmp	r3, #0
 80050c4:	d008      	beq.n	80050d8 <GainSignalMenuEntryHandler+0x38>
	{
		// set to full range and mid starting position
		ENCODER_TIMER->CNT = 32768;
 80050c6:	4b0a      	ldr	r3, [pc, #40]	; (80050f0 <GainSignalMenuEntryHandler+0x50>)
 80050c8:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 80050cc:	625a      	str	r2, [r3, #36]	; 0x24
		ENCODER_TIMER->ARR = 65535;
 80050ce:	4b08      	ldr	r3, [pc, #32]	; (80050f0 <GainSignalMenuEntryHandler+0x50>)
 80050d0:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80050d4:	62da      	str	r2, [r3, #44]	; 0x2c
 80050d6:	e002      	b.n	80050de <GainSignalMenuEntryHandler+0x3e>
	}
	else
	{
		DM_SetErrorDebugMsg("GainMainMenuEntryHandler: pVppPresetTmp null pointer");
 80050d8:	4806      	ldr	r0, [pc, #24]	; (80050f4 <GainSignalMenuEntryHandler+0x54>)
 80050da:	f7fc fc23 	bl	8001924 <DM_SetErrorDebugMsg>
	}

	eNewEvent = evIdle;
 80050de:	4b06      	ldr	r3, [pc, #24]	; (80050f8 <GainSignalMenuEntryHandler+0x58>)
 80050e0:	2200      	movs	r2, #0
 80050e2:	701a      	strb	r2, [r3, #0]
	return Gain_Signal_Menu_State;
 80050e4:	2307      	movs	r3, #7
}
 80050e6:	4618      	mov	r0, r3
 80050e8:	3708      	adds	r7, #8
 80050ea:	46bd      	mov	sp, r7
 80050ec:	bd80      	pop	{r7, pc}
 80050ee:	bf00      	nop
 80050f0:	40012c00 	.word	0x40012c00
 80050f4:	08015dd0 	.word	0x08015dd0
 80050f8:	200020d2 	.word	0x200020d2

080050fc <GainSignalMenuInputHandler>:
 *	@param None
 *	@retval None
 *
 */
eSystemState GainSignalMenuInputHandler(eSystemEvent pEvent)
{
 80050fc:	b580      	push	{r7, lr}
 80050fe:	b084      	sub	sp, #16
 8005100:	af00      	add	r7, sp, #0
 8005102:	4603      	mov	r3, r0
 8005104:	71fb      	strb	r3, [r7, #7]
	#ifdef EVENT_MENU_DEBUG
		printf("GainSignalMenuInputHandler Event captured\n");
	#endif


	FunctionProfile_t *tmpFuncProfile = SM_GetOutputChannel(SIGNAL_CHANNEL)->func_profile;
 8005106:	2000      	movs	r0, #0
 8005108:	f001 fc6a 	bl	80069e0 <SM_GetOutputChannel>
 800510c:	4603      	mov	r3, r0
 800510e:	f8d3 31e8 	ldr.w	r3, [r3, #488]	; 0x1e8
 8005112:	60fb      	str	r3, [r7, #12]

	switch(pEvent)
 8005114:	79fb      	ldrb	r3, [r7, #7]
 8005116:	3b01      	subs	r3, #1
 8005118:	2b04      	cmp	r3, #4
 800511a:	d834      	bhi.n	8005186 <GainSignalMenuInputHandler+0x8a>
 800511c:	a201      	add	r2, pc, #4	; (adr r2, 8005124 <GainSignalMenuInputHandler+0x28>)
 800511e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005122:	bf00      	nop
 8005124:	08005167 	.word	0x08005167
 8005128:	0800516f 	.word	0x0800516f
 800512c:	08005177 	.word	0x08005177
 8005130:	0800517f 	.word	0x0800517f
 8005134:	08005139 	.word	0x08005139
	{
		case evEncoderSet:

			if(tmpFuncProfile)
 8005138:	68fb      	ldr	r3, [r7, #12]
 800513a:	2b00      	cmp	r3, #0
 800513c:	d025      	beq.n	800518a <GainSignalMenuInputHandler+0x8e>
			{
				if(tmpFuncProfile->func == PWM_FUNC_MODE)
 800513e:	68fb      	ldr	r3, [r7, #12]
 8005140:	781b      	ldrb	r3, [r3, #0]
 8005142:	2b06      	cmp	r3, #6
 8005144:	d107      	bne.n	8005156 <GainSignalMenuInputHandler+0x5a>
				{
					GO_MapEncoderPositionToSignalOutput(SM_GetEncoderValue(ENCODER_INVERSE));
 8005146:	2001      	movs	r0, #1
 8005148:	f001 fec6 	bl	8006ed8 <SM_GetEncoderValue>
 800514c:	4603      	mov	r3, r0
 800514e:	4618      	mov	r0, r3
 8005150:	f001 f810 	bl	8006174 <GO_MapEncoderPositionToSignalOutput>
				else
				{
					VPP_MapEncoderPositionToSignalOutput(SM_GetEncoderValue(ENCODER_NORMAL));
				}
			}
			break;
 8005154:	e019      	b.n	800518a <GainSignalMenuInputHandler+0x8e>
					VPP_MapEncoderPositionToSignalOutput(SM_GetEncoderValue(ENCODER_NORMAL));
 8005156:	2000      	movs	r0, #0
 8005158:	f001 febe 	bl	8006ed8 <SM_GetEncoderValue>
 800515c:	4603      	mov	r3, r0
 800515e:	4618      	mov	r0, r3
 8005160:	f002 f8da 	bl	8007318 <VPP_MapEncoderPositionToSignalOutput>
			break;
 8005164:	e011      	b.n	800518a <GainSignalMenuInputHandler+0x8e>

		case evBlueBtn:
			VPP_ApplyProfileToSignal(VPP18);
 8005166:	2011      	movs	r0, #17
 8005168:	f001 ff70 	bl	800704c <VPP_ApplyProfileToSignal>
			break;
 800516c:	e00e      	b.n	800518c <GainSignalMenuInputHandler+0x90>

		case evGreenBtn:
			VPP_ApplyProfileToSignal(VPP33);
 800516e:	2020      	movs	r0, #32
 8005170:	f001 ff6c 	bl	800704c <VPP_ApplyProfileToSignal>
			break;
 8005174:	e00a      	b.n	800518c <GainSignalMenuInputHandler+0x90>

		case evYellowBtn:
			VPP_ApplyProfileToSignal(VPP50);
 8005176:	2031      	movs	r0, #49	; 0x31
 8005178:	f001 ff68 	bl	800704c <VPP_ApplyProfileToSignal>
			break;
 800517c:	e006      	b.n	800518c <GainSignalMenuInputHandler+0x90>

		case evRedBtn:
			VPP_ApplyProfileToSignal(VPP90);
 800517e:	2059      	movs	r0, #89	; 0x59
 8005180:	f001 ff64 	bl	800704c <VPP_ApplyProfileToSignal>
			break;
 8005184:	e002      	b.n	800518c <GainSignalMenuInputHandler+0x90>

		default:
			break;
 8005186:	bf00      	nop
 8005188:	e000      	b.n	800518c <GainSignalMenuInputHandler+0x90>
			break;
 800518a:	bf00      	nop
	}

	eNewEvent = evIdle;
 800518c:	4b03      	ldr	r3, [pc, #12]	; (800519c <GainSignalMenuInputHandler+0xa0>)
 800518e:	2200      	movs	r2, #0
 8005190:	701a      	strb	r2, [r3, #0]
	return Gain_Signal_Menu_State;
 8005192:	2307      	movs	r3, #7
}
 8005194:	4618      	mov	r0, r3
 8005196:	3710      	adds	r7, #16
 8005198:	46bd      	mov	sp, r7
 800519a:	bd80      	pop	{r7, pc}
 800519c:	200020d2 	.word	0x200020d2

080051a0 <GainSignalMenuExitHandler>:
 *	@param None
 *	@retval None
 *
 */
eSystemState GainSignalMenuExitHandler()
{
 80051a0:	b580      	push	{r7, lr}
 80051a2:	af00      	add	r7, sp, #0
	#ifdef EVENT_MENU_DEBUG
		printf("GainSignalMenuExitHandler Event captured\n");
	#endif

	DM_RefreshScreen();
 80051a4:	f7fc fb78 	bl	8001898 <DM_RefreshScreen>

	eNewEvent = evIdle;
 80051a8:	4b02      	ldr	r3, [pc, #8]	; (80051b4 <GainSignalMenuExitHandler+0x14>)
 80051aa:	2200      	movs	r2, #0
 80051ac:	701a      	strb	r2, [r3, #0]
	return Gain_Main_Menu_State;
 80051ae:	2306      	movs	r3, #6
}
 80051b0:	4618      	mov	r0, r3
 80051b2:	bd80      	pop	{r7, pc}
 80051b4:	200020d2 	.word	0x200020d2

080051b8 <GainAuxMenuEntryHandler>:
 *	@param None
 *	@retval None
 *
 */
eSystemState GainAuxMenuEntryHandler()
{
 80051b8:	b580      	push	{r7, lr}
 80051ba:	b082      	sub	sp, #8
 80051bc:	af00      	add	r7, sp, #0
	#ifdef EVENT_MENU_DEBUG
		printf("GainAuxMenuEntryHandler Event captured\n");
	#endif

	DM_RefreshScreen();
 80051be:	f7fc fb6b 	bl	8001898 <DM_RefreshScreen>
	VPP_ResetLastEncoderValue();
 80051c2:	f001 ff37 	bl	8007034 <VPP_ResetLastEncoderValue>

	AmplitudeProfile_t* pTmpVppPreset = SM_GetOutputChannel(AUX_CHANNEL)->amp_profile;
 80051c6:	2001      	movs	r0, #1
 80051c8:	f001 fc0a 	bl	80069e0 <SM_GetOutputChannel>
 80051cc:	4603      	mov	r3, r0
 80051ce:	f8d3 31ec 	ldr.w	r3, [r3, #492]	; 0x1ec
 80051d2:	607b      	str	r3, [r7, #4]

	if(pTmpVppPreset)
 80051d4:	687b      	ldr	r3, [r7, #4]
 80051d6:	2b00      	cmp	r3, #0
 80051d8:	d008      	beq.n	80051ec <GainAuxMenuEntryHandler+0x34>
	{
		// set to full range and mid starting position
		ENCODER_TIMER->CNT = 32768;
 80051da:	4b0a      	ldr	r3, [pc, #40]	; (8005204 <GainAuxMenuEntryHandler+0x4c>)
 80051dc:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 80051e0:	625a      	str	r2, [r3, #36]	; 0x24
		ENCODER_TIMER->ARR = 65535;
 80051e2:	4b08      	ldr	r3, [pc, #32]	; (8005204 <GainAuxMenuEntryHandler+0x4c>)
 80051e4:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80051e8:	62da      	str	r2, [r3, #44]	; 0x2c
 80051ea:	e002      	b.n	80051f2 <GainAuxMenuEntryHandler+0x3a>
	}
	else
	{
		DM_SetErrorDebugMsg("GainMainMenuEntryHandler: pVppPresetTmp null pointer");
 80051ec:	4806      	ldr	r0, [pc, #24]	; (8005208 <GainAuxMenuEntryHandler+0x50>)
 80051ee:	f7fc fb99 	bl	8001924 <DM_SetErrorDebugMsg>
	}

	eNewEvent = evIdle;
 80051f2:	4b06      	ldr	r3, [pc, #24]	; (800520c <GainAuxMenuEntryHandler+0x54>)
 80051f4:	2200      	movs	r2, #0
 80051f6:	701a      	strb	r2, [r3, #0]
	return Gain_Aux_Menu_State;
 80051f8:	2308      	movs	r3, #8
}
 80051fa:	4618      	mov	r0, r3
 80051fc:	3708      	adds	r7, #8
 80051fe:	46bd      	mov	sp, r7
 8005200:	bd80      	pop	{r7, pc}
 8005202:	bf00      	nop
 8005204:	40012c00 	.word	0x40012c00
 8005208:	08015dd0 	.word	0x08015dd0
 800520c:	200020d2 	.word	0x200020d2

08005210 <GainAuxMenuInputHandler>:
 *	@param None
 *	@retval None
 *
 */
eSystemState GainAuxMenuInputHandler()
{
 8005210:	b580      	push	{r7, lr}
 8005212:	af00      	add	r7, sp, #0
	#ifdef EVENT_MENU_DEBUG
		printf("GainAuxMenuInputHandler Event captured\n");
	#endif

	VPP_MapEncoderPositionToAuxOutput(SM_GetEncoderValue(ENCODER_NORMAL));
 8005214:	2000      	movs	r0, #0
 8005216:	f001 fe5f 	bl	8006ed8 <SM_GetEncoderValue>
 800521a:	4603      	mov	r3, r0
 800521c:	4618      	mov	r0, r3
 800521e:	f002 f8b5 	bl	800738c <VPP_MapEncoderPositionToAuxOutput>

	eNewEvent = evYellowBtn;
 8005222:	4b03      	ldr	r3, [pc, #12]	; (8005230 <GainAuxMenuInputHandler+0x20>)
 8005224:	2203      	movs	r2, #3
 8005226:	701a      	strb	r2, [r3, #0]
	return Gain_Aux_Menu_State;
 8005228:	2308      	movs	r3, #8
}
 800522a:	4618      	mov	r0, r3
 800522c:	bd80      	pop	{r7, pc}
 800522e:	bf00      	nop
 8005230:	200020d2 	.word	0x200020d2

08005234 <GainAuxMenuExitHandler>:
 *	@param None
 *	@retval None
 *
 */
eSystemState GainAuxMenuExitHandler()
{
 8005234:	b580      	push	{r7, lr}
 8005236:	af00      	add	r7, sp, #0
	#ifdef EVENT_MENU_DEBUG
		printf("GainAuxMenuExitHandler Event captured\n");
	#endif

	DM_RefreshScreen();
 8005238:	f7fc fb2e 	bl	8001898 <DM_RefreshScreen>

	eNewEvent = evIdle;
 800523c:	4b02      	ldr	r3, [pc, #8]	; (8005248 <GainAuxMenuExitHandler+0x14>)
 800523e:	2200      	movs	r2, #0
 8005240:	701a      	strb	r2, [r3, #0]
	return Gain_Main_Menu_State;
 8005242:	2306      	movs	r3, #6
}
 8005244:	4618      	mov	r0, r3
 8005246:	bd80      	pop	{r7, pc}
 8005248:	200020d2 	.word	0x200020d2

0800524c <ToplevelOutputMenuEntryHandler>:
 *	@param None
 *	@retval None
 *
 */
eSystemState ToplevelOutputMenuEntryHandler()
{
 800524c:	b580      	push	{r7, lr}
 800524e:	af00      	add	r7, sp, #0
	#ifdef EVENT_MENU_DEBUG
		printf("ToplevelOutputMenuEntryHandler Event captured\n");
	#endif

	DM_RefreshScreen();
 8005250:	f7fc fb22 	bl	8001898 <DM_RefreshScreen>

	// stay in this state
	eNewEvent = evIdle;
 8005254:	4b02      	ldr	r3, [pc, #8]	; (8005260 <ToplevelOutputMenuEntryHandler+0x14>)
 8005256:	2200      	movs	r2, #0
 8005258:	701a      	strb	r2, [r3, #0]
	return Toplevel_Output_Menu_State;
 800525a:	2301      	movs	r3, #1
}
 800525c:	4618      	mov	r0, r3
 800525e:	bd80      	pop	{r7, pc}
 8005260:	200020d2 	.word	0x200020d2

08005264 <ToplevelOutputMenuExitHandler>:
 *	@param None
 *	@retval None
 *
 */
eSystemState ToplevelOutputMenuExitHandler()
{
 8005264:	b580      	push	{r7, lr}
 8005266:	af00      	add	r7, sp, #0
	#ifdef EVENT_MENU_DEBUG
		printf("ToplevelOutputMenuExitHandler Event captured\n");
	#endif

	DM_RefreshScreen();
 8005268:	f7fc fb16 	bl	8001898 <DM_RefreshScreen>

	// back to main freq menu
	eNewEvent = evIdle;
 800526c:	4b02      	ldr	r3, [pc, #8]	; (8005278 <ToplevelOutputMenuExitHandler+0x14>)
 800526e:	2200      	movs	r2, #0
 8005270:	701a      	strb	r2, [r3, #0]
	return Idle_State;
 8005272:	2300      	movs	r3, #0
}
 8005274:	4618      	mov	r0, r3
 8005276:	bd80      	pop	{r7, pc}
 8005278:	200020d2 	.word	0x200020d2

0800527c <ToplevelInputMenuEntryHandler>:
 *	@param None
 *	@retval None
 *
 */
eSystemState ToplevelInputMenuEntryHandler()
{
 800527c:	b580      	push	{r7, lr}
 800527e:	af00      	add	r7, sp, #0
	#ifdef EVENT_MENU_DEBUG
		printf("ToplevelInputMenuEntryHandler Event captured\n");
	#endif

	DM_RefreshScreen();
 8005280:	f7fc fb0a 	bl	8001898 <DM_RefreshScreen>

	// stay in this state
	eNewEvent = evIdle;
 8005284:	4b02      	ldr	r3, [pc, #8]	; (8005290 <ToplevelInputMenuEntryHandler+0x14>)
 8005286:	2200      	movs	r2, #0
 8005288:	701a      	strb	r2, [r3, #0]
	return Toplevel_Input_Menu_State;
 800528a:	2302      	movs	r3, #2
}
 800528c:	4618      	mov	r0, r3
 800528e:	bd80      	pop	{r7, pc}
 8005290:	200020d2 	.word	0x200020d2

08005294 <ToplevelInputMenuInputHandler>:
 *	@param None
 *	@retval None
 *
 */
eSystemState ToplevelInputMenuInputHandler(eSystemEvent pEvent)
{
 8005294:	b580      	push	{r7, lr}
 8005296:	b082      	sub	sp, #8
 8005298:	af00      	add	r7, sp, #0
 800529a:	4603      	mov	r3, r0
 800529c:	71fb      	strb	r3, [r7, #7]
	#ifdef EVENT_MENU_DEBUG
		printf("ToplevelInputMenuInputHandler Event captured\n");
	#endif


		switch(pEvent)
 800529e:	79fb      	ldrb	r3, [r7, #7]
 80052a0:	2b01      	cmp	r3, #1
 80052a2:	d002      	beq.n	80052aa <ToplevelInputMenuInputHandler+0x16>
 80052a4:	2b02      	cmp	r3, #2
 80052a6:	d003      	beq.n	80052b0 <ToplevelInputMenuInputHandler+0x1c>
				// re-enable the trigger input for new mode
				ToplevelInputMenuInputHandler(evBlueBtn);
				break;

			default:
				break;
 80052a8:	e00b      	b.n	80052c2 <ToplevelInputMenuInputHandler+0x2e>
				IT_ArbitrateInputTrigger();
 80052aa:	f001 f84f 	bl	800634c <IT_ArbitrateInputTrigger>
				break;
 80052ae:	e008      	b.n	80052c2 <ToplevelInputMenuInputHandler+0x2e>
				IT_CycleInputTriggerMode();
 80052b0:	f001 f902 	bl	80064b8 <IT_CycleInputTriggerMode>
				ToplevelInputMenuInputHandler(evBlueBtn);
 80052b4:	2001      	movs	r0, #1
 80052b6:	f7ff ffed 	bl	8005294 <ToplevelInputMenuInputHandler>
				ToplevelInputMenuInputHandler(evBlueBtn);
 80052ba:	2001      	movs	r0, #1
 80052bc:	f7ff ffea 	bl	8005294 <ToplevelInputMenuInputHandler>
				break;
 80052c0:	bf00      	nop
		}
	// stay in this menu state
	eNewEvent = evIdle;
 80052c2:	4b04      	ldr	r3, [pc, #16]	; (80052d4 <ToplevelInputMenuInputHandler+0x40>)
 80052c4:	2200      	movs	r2, #0
 80052c6:	701a      	strb	r2, [r3, #0]
	return Toplevel_Input_Menu_State;
 80052c8:	2302      	movs	r3, #2
}
 80052ca:	4618      	mov	r0, r3
 80052cc:	3708      	adds	r7, #8
 80052ce:	46bd      	mov	sp, r7
 80052d0:	bd80      	pop	{r7, pc}
 80052d2:	bf00      	nop
 80052d4:	200020d2 	.word	0x200020d2

080052d8 <ToplevelInputMenuExitHandler>:
 *	@param None
 *	@retval None
 *
 */
eSystemState ToplevelInputMenuExitHandler()
{
 80052d8:	b580      	push	{r7, lr}
 80052da:	af00      	add	r7, sp, #0
	#ifdef EVENT_MENU_DEBUG
		printf("ToplevelInputMenuExitHandler Event captured\n");
	#endif

	DM_RefreshScreen();
 80052dc:	f7fc fadc 	bl	8001898 <DM_RefreshScreen>

	// back to main freq menu
	eNewEvent = evIdle;
 80052e0:	4b02      	ldr	r3, [pc, #8]	; (80052ec <ToplevelInputMenuExitHandler+0x14>)
 80052e2:	2200      	movs	r2, #0
 80052e4:	701a      	strb	r2, [r3, #0]
	return Idle_State;
 80052e6:	2300      	movs	r3, #0
}
 80052e8:	4618      	mov	r0, r3
 80052ea:	bd80      	pop	{r7, pc}
 80052ec:	200020d2 	.word	0x200020d2

080052f0 <LL_EXTI_IsActiveFlag_0_31>:
  * @note   (*): Available in some devices
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_EXTI_IsActiveFlag_0_31(uint32_t ExtiLine)
{
 80052f0:	b480      	push	{r7}
 80052f2:	b083      	sub	sp, #12
 80052f4:	af00      	add	r7, sp, #0
 80052f6:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(EXTI->PR1, ExtiLine) == (ExtiLine)) ? 1UL : 0UL);
 80052f8:	4b07      	ldr	r3, [pc, #28]	; (8005318 <LL_EXTI_IsActiveFlag_0_31+0x28>)
 80052fa:	695a      	ldr	r2, [r3, #20]
 80052fc:	687b      	ldr	r3, [r7, #4]
 80052fe:	4013      	ands	r3, r2
 8005300:	687a      	ldr	r2, [r7, #4]
 8005302:	429a      	cmp	r2, r3
 8005304:	d101      	bne.n	800530a <LL_EXTI_IsActiveFlag_0_31+0x1a>
 8005306:	2301      	movs	r3, #1
 8005308:	e000      	b.n	800530c <LL_EXTI_IsActiveFlag_0_31+0x1c>
 800530a:	2300      	movs	r3, #0
}
 800530c:	4618      	mov	r0, r3
 800530e:	370c      	adds	r7, #12
 8005310:	46bd      	mov	sp, r7
 8005312:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005316:	4770      	bx	lr
 8005318:	40010400 	.word	0x40010400

0800531c <IM_Init>:
uint16_t encbtn_last_interrupt_time = 0;
uint16_t encpos_last_interrupt_time = 0;


void IM_Init()
{
 800531c:	b480      	push	{r7}
 800531e:	af00      	add	r7, sp, #0
	  // debounce timer
	  DEBOUNCE_TIMER->CR1 |= TIM_CR1_CEN;
 8005320:	4b05      	ldr	r3, [pc, #20]	; (8005338 <IM_Init+0x1c>)
 8005322:	681b      	ldr	r3, [r3, #0]
 8005324:	4a04      	ldr	r2, [pc, #16]	; (8005338 <IM_Init+0x1c>)
 8005326:	f043 0301 	orr.w	r3, r3, #1
 800532a:	6013      	str	r3, [r2, #0]



}
 800532c:	bf00      	nop
 800532e:	46bd      	mov	sp, r7
 8005330:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005334:	4770      	bx	lr
 8005336:	bf00      	nop
 8005338:	40014400 	.word	0x40014400

0800533c <IM_SWEEP_UPDATE_TIM_IRQHandler>:
 *	@param None
 *	@retval None
 *
 */
void IM_SWEEP_UPDATE_TIM_IRQHandler()
{
 800533c:	b480      	push	{r7}
 800533e:	af00      	add	r7, sp, #0
	#ifdef ENABLE_PWM_SWEEP
		eOutput_mode tmpOut = SM_GetOutputChannel(AUX_CHANNEL)->func_profile->func;
	#endif	//ENABLE_PWM_SWEEP

		// upcounter (decreasing freq)
	if((SWEEP_TIMER->CR1 & TIM_CR1_DIR) == TIM_CR1_DIR)
 8005340:	4b26      	ldr	r3, [pc, #152]	; (80053dc <IM_SWEEP_UPDATE_TIM_IRQHandler+0xa0>)
 8005342:	681b      	ldr	r3, [r3, #0]
 8005344:	f003 0310 	and.w	r3, r3, #16
 8005348:	2b10      	cmp	r3, #16
 800534a:	d11c      	bne.n	8005386 <IM_SWEEP_UPDATE_TIM_IRQHandler+0x4a>
	{
		// if we reach lower freq limit for sweep, reset to highest freq limit
		if(OUTPUT_TIMER->ARR >= sweep_upper_bounds_longest_output_arr)
 800534c:	4b24      	ldr	r3, [pc, #144]	; (80053e0 <IM_SWEEP_UPDATE_TIM_IRQHandler+0xa4>)
 800534e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005350:	ee07 3a90 	vmov	s15, r3
 8005354:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8005358:	4b22      	ldr	r3, [pc, #136]	; (80053e4 <IM_SWEEP_UPDATE_TIM_IRQHandler+0xa8>)
 800535a:	edd3 7a00 	vldr	s15, [r3]
 800535e:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8005362:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005366:	db09      	blt.n	800537c <IM_SWEEP_UPDATE_TIM_IRQHandler+0x40>
		{
			OUTPUT_TIMER->ARR = sweep_lower_bounds_shortest_output_arr;
 8005368:	4b1f      	ldr	r3, [pc, #124]	; (80053e8 <IM_SWEEP_UPDATE_TIM_IRQHandler+0xac>)
 800536a:	edd3 7a00 	vldr	s15, [r3]
 800536e:	4b1c      	ldr	r3, [pc, #112]	; (80053e0 <IM_SWEEP_UPDATE_TIM_IRQHandler+0xa4>)
 8005370:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005374:	ee17 2a90 	vmov	r2, s15
 8005378:	62da      	str	r2, [r3, #44]	; 0x2c
			}
		}
	}

	//SWEEP_TIMER->ARR--;
}
 800537a:	e029      	b.n	80053d0 <IM_SWEEP_UPDATE_TIM_IRQHandler+0x94>
			OUTPUT_TIMER->ARR++;
 800537c:	4b18      	ldr	r3, [pc, #96]	; (80053e0 <IM_SWEEP_UPDATE_TIM_IRQHandler+0xa4>)
 800537e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005380:	3201      	adds	r2, #1
 8005382:	62da      	str	r2, [r3, #44]	; 0x2c
}
 8005384:	e024      	b.n	80053d0 <IM_SWEEP_UPDATE_TIM_IRQHandler+0x94>
		if(OUTPUT_TIMER->ARR == 0x1U)
 8005386:	4b16      	ldr	r3, [pc, #88]	; (80053e0 <IM_SWEEP_UPDATE_TIM_IRQHandler+0xa4>)
 8005388:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800538a:	2b01      	cmp	r3, #1
 800538c:	d104      	bne.n	8005398 <IM_SWEEP_UPDATE_TIM_IRQHandler+0x5c>
			OUTPUT_TIMER->ARR = MAX_OUTPUT_ARR;
 800538e:	4b14      	ldr	r3, [pc, #80]	; (80053e0 <IM_SWEEP_UPDATE_TIM_IRQHandler+0xa4>)
 8005390:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8005394:	62da      	str	r2, [r3, #44]	; 0x2c
}
 8005396:	e01b      	b.n	80053d0 <IM_SWEEP_UPDATE_TIM_IRQHandler+0x94>
			if(OUTPUT_TIMER->ARR <= sweep_lower_bounds_shortest_output_arr)
 8005398:	4b11      	ldr	r3, [pc, #68]	; (80053e0 <IM_SWEEP_UPDATE_TIM_IRQHandler+0xa4>)
 800539a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800539c:	ee07 3a90 	vmov	s15, r3
 80053a0:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80053a4:	4b10      	ldr	r3, [pc, #64]	; (80053e8 <IM_SWEEP_UPDATE_TIM_IRQHandler+0xac>)
 80053a6:	edd3 7a00 	vldr	s15, [r3]
 80053aa:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80053ae:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80053b2:	d809      	bhi.n	80053c8 <IM_SWEEP_UPDATE_TIM_IRQHandler+0x8c>
				OUTPUT_TIMER->ARR = sweep_upper_bounds_longest_output_arr;
 80053b4:	4b0b      	ldr	r3, [pc, #44]	; (80053e4 <IM_SWEEP_UPDATE_TIM_IRQHandler+0xa8>)
 80053b6:	edd3 7a00 	vldr	s15, [r3]
 80053ba:	4b09      	ldr	r3, [pc, #36]	; (80053e0 <IM_SWEEP_UPDATE_TIM_IRQHandler+0xa4>)
 80053bc:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80053c0:	ee17 2a90 	vmov	r2, s15
 80053c4:	62da      	str	r2, [r3, #44]	; 0x2c
}
 80053c6:	e003      	b.n	80053d0 <IM_SWEEP_UPDATE_TIM_IRQHandler+0x94>
				OUTPUT_TIMER->ARR--;
 80053c8:	4b05      	ldr	r3, [pc, #20]	; (80053e0 <IM_SWEEP_UPDATE_TIM_IRQHandler+0xa4>)
 80053ca:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80053cc:	3a01      	subs	r2, #1
 80053ce:	62da      	str	r2, [r3, #44]	; 0x2c
}
 80053d0:	bf00      	nop
 80053d2:	46bd      	mov	sp, r7
 80053d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053d8:	4770      	bx	lr
 80053da:	bf00      	nop
 80053dc:	40000c00 	.word	0x40000c00
 80053e0:	40013400 	.word	0x40013400
 80053e4:	20000124 	.word	0x20000124
 80053e8:	20000120 	.word	0x20000120

080053ec <IM_BTN1_EXTI14_Handler>:
 *	@param None
 *	@retval None
 *
 */
void IM_BTN1_EXTI14_Handler()
{
 80053ec:	b580      	push	{r7, lr}
 80053ee:	b082      	sub	sp, #8
 80053f0:	af00      	add	r7, sp, #0
	uint16_t interrupt_time = DEBOUNCE_TIMER->CNT;
 80053f2:	4b0f      	ldr	r3, [pc, #60]	; (8005430 <IM_BTN1_EXTI14_Handler+0x44>)
 80053f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80053f6:	80fb      	strh	r3, [r7, #6]
	if ((interrupt_time - btn1_last_interrupt_time) > MAX_DEBOUNCE_DELAY)
 80053f8:	88fb      	ldrh	r3, [r7, #6]
 80053fa:	4a0e      	ldr	r2, [pc, #56]	; (8005434 <IM_BTN1_EXTI14_Handler+0x48>)
 80053fc:	8812      	ldrh	r2, [r2, #0]
 80053fe:	1a9b      	subs	r3, r3, r2
 8005400:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8005404:	dd0c      	ble.n	8005420 <IM_BTN1_EXTI14_Handler+0x34>
	{
		if (LL_EXTI_IsActiveFlag_0_31(LL_EXTI_LINE_14))
 8005406:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 800540a:	f7ff ff71 	bl	80052f0 <LL_EXTI_IsActiveFlag_0_31>
 800540e:	4603      	mov	r3, r0
 8005410:	2b00      	cmp	r3, #0
 8005412:	d005      	beq.n	8005420 <IM_BTN1_EXTI14_Handler+0x34>
		{

			EM_SetNewEvent(evBlueBtn);
 8005414:	2001      	movs	r0, #1
 8005416:	f7ff fb45 	bl	8004aa4 <EM_SetNewEvent>
			printf("'Blue' BTN1_EXTI14_Pin\n");
 800541a:	4807      	ldr	r0, [pc, #28]	; (8005438 <IM_BTN1_EXTI14_Handler+0x4c>)
 800541c:	f00c fe66 	bl	80120ec <puts>
		}
	}
	btn1_last_interrupt_time = interrupt_time;
 8005420:	4a04      	ldr	r2, [pc, #16]	; (8005434 <IM_BTN1_EXTI14_Handler+0x48>)
 8005422:	88fb      	ldrh	r3, [r7, #6]
 8005424:	8013      	strh	r3, [r2, #0]


}
 8005426:	bf00      	nop
 8005428:	3708      	adds	r7, #8
 800542a:	46bd      	mov	sp, r7
 800542c:	bd80      	pop	{r7, pc}
 800542e:	bf00      	nop
 8005430:	40014400 	.word	0x40014400
 8005434:	200020d6 	.word	0x200020d6
 8005438:	08015e08 	.word	0x08015e08

0800543c <IM_BTN2_EXTI15_Handler>:
 *	@param None
 *	@retval None
 *
 */
void IM_BTN2_EXTI15_Handler()
{
 800543c:	b580      	push	{r7, lr}
 800543e:	b082      	sub	sp, #8
 8005440:	af00      	add	r7, sp, #0
	uint16_t interrupt_time = DEBOUNCE_TIMER->CNT;
 8005442:	4b0f      	ldr	r3, [pc, #60]	; (8005480 <IM_BTN2_EXTI15_Handler+0x44>)
 8005444:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005446:	80fb      	strh	r3, [r7, #6]
	if ((interrupt_time - btn2_last_interrupt_time) > MAX_DEBOUNCE_DELAY)
 8005448:	88fb      	ldrh	r3, [r7, #6]
 800544a:	4a0e      	ldr	r2, [pc, #56]	; (8005484 <IM_BTN2_EXTI15_Handler+0x48>)
 800544c:	8812      	ldrh	r2, [r2, #0]
 800544e:	1a9b      	subs	r3, r3, r2
 8005450:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8005454:	dd0c      	ble.n	8005470 <IM_BTN2_EXTI15_Handler+0x34>
	{
		if (LL_EXTI_IsActiveFlag_0_31(LL_EXTI_LINE_15))
 8005456:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 800545a:	f7ff ff49 	bl	80052f0 <LL_EXTI_IsActiveFlag_0_31>
 800545e:	4603      	mov	r3, r0
 8005460:	2b00      	cmp	r3, #0
 8005462:	d005      	beq.n	8005470 <IM_BTN2_EXTI15_Handler+0x34>
		{
			EM_SetNewEvent(evYellowBtn);
 8005464:	2003      	movs	r0, #3
 8005466:	f7ff fb1d 	bl	8004aa4 <EM_SetNewEvent>
			printf("'Yellow' BTN2_EXTI15_Pin\n");
 800546a:	4807      	ldr	r0, [pc, #28]	; (8005488 <IM_BTN2_EXTI15_Handler+0x4c>)
 800546c:	f00c fe3e 	bl	80120ec <puts>
		}
	}
	btn2_last_interrupt_time = interrupt_time;
 8005470:	4a04      	ldr	r2, [pc, #16]	; (8005484 <IM_BTN2_EXTI15_Handler+0x48>)
 8005472:	88fb      	ldrh	r3, [r7, #6]
 8005474:	8013      	strh	r3, [r2, #0]


}
 8005476:	bf00      	nop
 8005478:	3708      	adds	r7, #8
 800547a:	46bd      	mov	sp, r7
 800547c:	bd80      	pop	{r7, pc}
 800547e:	bf00      	nop
 8005480:	40014400 	.word	0x40014400
 8005484:	200020d8 	.word	0x200020d8
 8005488:	08015e20 	.word	0x08015e20

0800548c <IM_BTN3_EXTI0_Handler>:
 *	@param None
 *	@retval None
 *
 */
void IM_BTN3_EXTI0_Handler()
{
 800548c:	b580      	push	{r7, lr}
 800548e:	b082      	sub	sp, #8
 8005490:	af00      	add	r7, sp, #0
	uint16_t interrupt_time = DEBOUNCE_TIMER->CNT;
 8005492:	4b0e      	ldr	r3, [pc, #56]	; (80054cc <IM_BTN3_EXTI0_Handler+0x40>)
 8005494:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005496:	80fb      	strh	r3, [r7, #6]
	if ((interrupt_time - btn3_last_interrupt_time) > MAX_DEBOUNCE_DELAY)
 8005498:	88fb      	ldrh	r3, [r7, #6]
 800549a:	4a0d      	ldr	r2, [pc, #52]	; (80054d0 <IM_BTN3_EXTI0_Handler+0x44>)
 800549c:	8812      	ldrh	r2, [r2, #0]
 800549e:	1a9b      	subs	r3, r3, r2
 80054a0:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80054a4:	dd0b      	ble.n	80054be <IM_BTN3_EXTI0_Handler+0x32>
	{
		if (LL_EXTI_IsActiveFlag_0_31(LL_EXTI_LINE_0))
 80054a6:	2001      	movs	r0, #1
 80054a8:	f7ff ff22 	bl	80052f0 <LL_EXTI_IsActiveFlag_0_31>
 80054ac:	4603      	mov	r3, r0
 80054ae:	2b00      	cmp	r3, #0
 80054b0:	d005      	beq.n	80054be <IM_BTN3_EXTI0_Handler+0x32>
		{
			EM_SetNewEvent(evRedBtn);
 80054b2:	2004      	movs	r0, #4
 80054b4:	f7ff faf6 	bl	8004aa4 <EM_SetNewEvent>
			printf("'Red' BTN3_EXTI0_Pin\n");
 80054b8:	4806      	ldr	r0, [pc, #24]	; (80054d4 <IM_BTN3_EXTI0_Handler+0x48>)
 80054ba:	f00c fe17 	bl	80120ec <puts>
		}
	}
	btn3_last_interrupt_time = interrupt_time;
 80054be:	4a04      	ldr	r2, [pc, #16]	; (80054d0 <IM_BTN3_EXTI0_Handler+0x44>)
 80054c0:	88fb      	ldrh	r3, [r7, #6]
 80054c2:	8013      	strh	r3, [r2, #0]


}
 80054c4:	bf00      	nop
 80054c6:	3708      	adds	r7, #8
 80054c8:	46bd      	mov	sp, r7
 80054ca:	bd80      	pop	{r7, pc}
 80054cc:	40014400 	.word	0x40014400
 80054d0:	200020da 	.word	0x200020da
 80054d4:	08015e3c 	.word	0x08015e3c

080054d8 <IM_BTN4_EXTI1_Handler>:
 *	@param None
 *	@retval None
 *
 */
void IM_BTN4_EXTI1_Handler()
{
 80054d8:	b580      	push	{r7, lr}
 80054da:	b082      	sub	sp, #8
 80054dc:	af00      	add	r7, sp, #0
	uint16_t interrupt_time = DEBOUNCE_TIMER->CNT;
 80054de:	4b0e      	ldr	r3, [pc, #56]	; (8005518 <IM_BTN4_EXTI1_Handler+0x40>)
 80054e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80054e2:	80fb      	strh	r3, [r7, #6]
	if ((interrupt_time - btn4_last_interrupt_time) > MAX_DEBOUNCE_DELAY)
 80054e4:	88fb      	ldrh	r3, [r7, #6]
 80054e6:	4a0d      	ldr	r2, [pc, #52]	; (800551c <IM_BTN4_EXTI1_Handler+0x44>)
 80054e8:	8812      	ldrh	r2, [r2, #0]
 80054ea:	1a9b      	subs	r3, r3, r2
 80054ec:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80054f0:	dd0b      	ble.n	800550a <IM_BTN4_EXTI1_Handler+0x32>
	{
		if (LL_EXTI_IsActiveFlag_0_31(LL_EXTI_LINE_1))
 80054f2:	2002      	movs	r0, #2
 80054f4:	f7ff fefc 	bl	80052f0 <LL_EXTI_IsActiveFlag_0_31>
 80054f8:	4603      	mov	r3, r0
 80054fa:	2b00      	cmp	r3, #0
 80054fc:	d005      	beq.n	800550a <IM_BTN4_EXTI1_Handler+0x32>
		{
			EM_SetNewEvent(evGreenBtn);
 80054fe:	2002      	movs	r0, #2
 8005500:	f7ff fad0 	bl	8004aa4 <EM_SetNewEvent>
			printf("'Green' BTN4_EXTI1_Pin\n");
 8005504:	4806      	ldr	r0, [pc, #24]	; (8005520 <IM_BTN4_EXTI1_Handler+0x48>)
 8005506:	f00c fdf1 	bl	80120ec <puts>
		}
	}
	btn4_last_interrupt_time = interrupt_time;
 800550a:	4a04      	ldr	r2, [pc, #16]	; (800551c <IM_BTN4_EXTI1_Handler+0x44>)
 800550c:	88fb      	ldrh	r3, [r7, #6]
 800550e:	8013      	strh	r3, [r2, #0]


}
 8005510:	bf00      	nop
 8005512:	3708      	adds	r7, #8
 8005514:	46bd      	mov	sp, r7
 8005516:	bd80      	pop	{r7, pc}
 8005518:	40014400 	.word	0x40014400
 800551c:	200020dc 	.word	0x200020dc
 8005520:	08015e54 	.word	0x08015e54

08005524 <IM_ENC_EXTI2_Handler>:
 *	@param None
 *	@retval None
 *
 */
void IM_ENC_EXTI2_Handler()
{
 8005524:	b580      	push	{r7, lr}
 8005526:	b082      	sub	sp, #8
 8005528:	af00      	add	r7, sp, #0
	uint16_t interrupt_time = DEBOUNCE_TIMER->CNT;
 800552a:	4b0e      	ldr	r3, [pc, #56]	; (8005564 <IM_ENC_EXTI2_Handler+0x40>)
 800552c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800552e:	80fb      	strh	r3, [r7, #6]
	if ((interrupt_time - encbtn_last_interrupt_time) > MAX_DEBOUNCE_DELAY)
 8005530:	88fb      	ldrh	r3, [r7, #6]
 8005532:	4a0d      	ldr	r2, [pc, #52]	; (8005568 <IM_ENC_EXTI2_Handler+0x44>)
 8005534:	8812      	ldrh	r2, [r2, #0]
 8005536:	1a9b      	subs	r3, r3, r2
 8005538:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800553c:	dd0b      	ble.n	8005556 <IM_ENC_EXTI2_Handler+0x32>
	{
		if (LL_EXTI_IsActiveFlag_0_31(LL_EXTI_LINE_2))
 800553e:	2004      	movs	r0, #4
 8005540:	f7ff fed6 	bl	80052f0 <LL_EXTI_IsActiveFlag_0_31>
 8005544:	4603      	mov	r3, r0
 8005546:	2b00      	cmp	r3, #0
 8005548:	d005      	beq.n	8005556 <IM_ENC_EXTI2_Handler+0x32>
		{
			EM_SetNewEvent(evEncoderPush);
 800554a:	2006      	movs	r0, #6
 800554c:	f7ff faaa 	bl	8004aa4 <EM_SetNewEvent>
			printf("'EncoderPush' ENC_EXTI2_Pin\n");
 8005550:	4806      	ldr	r0, [pc, #24]	; (800556c <IM_ENC_EXTI2_Handler+0x48>)
 8005552:	f00c fdcb 	bl	80120ec <puts>
		}
	}
	encbtn_last_interrupt_time = interrupt_time;
 8005556:	4a04      	ldr	r2, [pc, #16]	; (8005568 <IM_ENC_EXTI2_Handler+0x44>)
 8005558:	88fb      	ldrh	r3, [r7, #6]
 800555a:	8013      	strh	r3, [r2, #0]


}
 800555c:	bf00      	nop
 800555e:	3708      	adds	r7, #8
 8005560:	46bd      	mov	sp, r7
 8005562:	bd80      	pop	{r7, pc}
 8005564:	40014400 	.word	0x40014400
 8005568:	200020de 	.word	0x200020de
 800556c:	08015e6c 	.word	0x08015e6c

08005570 <IM_ENC_DIRF_Handler>:
 *	@param None
 *	@retval None
 *
 */
void IM_ENC_DIRF_Handler()
{
 8005570:	b580      	push	{r7, lr}
 8005572:	b082      	sub	sp, #8
 8005574:	af00      	add	r7, sp, #0

	if((TIM1->SR & TIM_SR_DIRF) == TIM_SR_DIRF)
 8005576:	4b11      	ldr	r3, [pc, #68]	; (80055bc <IM_ENC_DIRF_Handler+0x4c>)
 8005578:	691b      	ldr	r3, [r3, #16]
 800557a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800557e:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8005582:	d117      	bne.n	80055b4 <IM_ENC_DIRF_Handler+0x44>
	{
		uint16_t interrupt_time = DEBOUNCE_TIMER->CNT;
 8005584:	4b0e      	ldr	r3, [pc, #56]	; (80055c0 <IM_ENC_DIRF_Handler+0x50>)
 8005586:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005588:	80fb      	strh	r3, [r7, #6]
		if ((interrupt_time - encpos_last_interrupt_time) > 0)
 800558a:	88fb      	ldrh	r3, [r7, #6]
 800558c:	4a0d      	ldr	r2, [pc, #52]	; (80055c4 <IM_ENC_DIRF_Handler+0x54>)
 800558e:	8812      	ldrh	r2, [r2, #0]
 8005590:	1a9b      	subs	r3, r3, r2
 8005592:	2b00      	cmp	r3, #0
 8005594:	dd0b      	ble.n	80055ae <IM_ENC_DIRF_Handler+0x3e>
		{
			EM_SetNewEvent(evEncoderSet);
 8005596:	2005      	movs	r0, #5
 8005598:	f7ff fa84 	bl	8004aa4 <EM_SetNewEvent>
			printf("Encoder new direction\n");
 800559c:	480a      	ldr	r0, [pc, #40]	; (80055c8 <IM_ENC_DIRF_Handler+0x58>)
 800559e:	f00c fda5 	bl	80120ec <puts>
			TIM1->SR &= ~(TIM_SR_DIRF);
 80055a2:	4b06      	ldr	r3, [pc, #24]	; (80055bc <IM_ENC_DIRF_Handler+0x4c>)
 80055a4:	691b      	ldr	r3, [r3, #16]
 80055a6:	4a05      	ldr	r2, [pc, #20]	; (80055bc <IM_ENC_DIRF_Handler+0x4c>)
 80055a8:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80055ac:	6113      	str	r3, [r2, #16]
		}
		encpos_last_interrupt_time = interrupt_time;
 80055ae:	4a05      	ldr	r2, [pc, #20]	; (80055c4 <IM_ENC_DIRF_Handler+0x54>)
 80055b0:	88fb      	ldrh	r3, [r7, #6]
 80055b2:	8013      	strh	r3, [r2, #0]


	}


}
 80055b4:	bf00      	nop
 80055b6:	3708      	adds	r7, #8
 80055b8:	46bd      	mov	sp, r7
 80055ba:	bd80      	pop	{r7, pc}
 80055bc:	40012c00 	.word	0x40012c00
 80055c0:	40014400 	.word	0x40014400
 80055c4:	200020e0 	.word	0x200020e0
 80055c8:	08015e88 	.word	0x08015e88

080055cc <BO_GetBiasPolarity>:
 *	@param None
 *	@retval None
 *
 */
eBias_Polarity BO_GetBiasPolarity()
{
 80055cc:	b480      	push	{r7}
 80055ce:	af00      	add	r7, sp, #0
	return eBiasPolarity;
 80055d0:	4b03      	ldr	r3, [pc, #12]	; (80055e0 <BO_GetBiasPolarity+0x14>)
 80055d2:	781b      	ldrb	r3, [r3, #0]
}
 80055d4:	4618      	mov	r0, r3
 80055d6:	46bd      	mov	sp, r7
 80055d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055dc:	4770      	bx	lr
 80055de:	bf00      	nop
 80055e0:	20000001 	.word	0x20000001

080055e4 <BO_GetDcBiasEncoderValue>:
 *	@param None
 *	@retval None
 *
 */
uint16_t BO_GetDcBiasEncoderValue()
{
 80055e4:	b480      	push	{r7}
 80055e6:	af00      	add	r7, sp, #0
	return dc_bias_encoder_value;
 80055e8:	4b03      	ldr	r3, [pc, #12]	; (80055f8 <BO_GetDcBiasEncoderValue+0x14>)
 80055ea:	881b      	ldrh	r3, [r3, #0]
}
 80055ec:	4618      	mov	r0, r3
 80055ee:	46bd      	mov	sp, r7
 80055f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055f4:	4770      	bx	lr
 80055f6:	bf00      	nop
 80055f8:	20000002 	.word	0x20000002

080055fc <BO_MapEncoderPositionToSignalOutput>:
 *	@param None
 *	@retval None
 *
 */
void BO_MapEncoderPositionToSignalOutput(uint16_t pEncoderValue)
{
 80055fc:	b580      	push	{r7, lr}
 80055fe:	b082      	sub	sp, #8
 8005600:	af00      	add	r7, sp, #0
 8005602:	4603      	mov	r3, r0
 8005604:	80fb      	strh	r3, [r7, #6]
	// pEncoderValue is reversed for correct rotary encoder operation.
	// However, we want to retain the forward direction value to prevent polarity flip!
	dc_bias_encoder_value = SM_GetEncoderValue(ENCODER_NORMAL);
 8005606:	2000      	movs	r0, #0
 8005608:	f001 fc66 	bl	8006ed8 <SM_GetEncoderValue>
 800560c:	4603      	mov	r3, r0
 800560e:	461a      	mov	r2, r3
 8005610:	4b1b      	ldr	r3, [pc, #108]	; (8005680 <BO_MapEncoderPositionToSignalOutput+0x84>)
 8005612:	801a      	strh	r2, [r3, #0]

	// apply negative dc bias
	if(pEncoderValue < BIAS_CENTER) {
 8005614:	88fb      	ldrh	r3, [r7, #6]
 8005616:	f5b3 7fc8 	cmp.w	r3, #400	; 0x190
 800561a:	d214      	bcs.n	8005646 <BO_MapEncoderPositionToSignalOutput+0x4a>

		eBiasPolarity = INVERSEBIAS;
 800561c:	4b19      	ldr	r3, [pc, #100]	; (8005684 <BO_MapEncoderPositionToSignalOutput+0x88>)
 800561e:	2200      	movs	r2, #0
 8005620:	701a      	strb	r2, [r3, #0]


		HAL_DAC_SetValue(	&hdac1,
							DAC1_CHANNEL_2,
							DAC_ALIGN_12B_R,
							((BIAS_CENTER - pEncoderValue) * BIAS_MAG));
 8005622:	88fb      	ldrh	r3, [r7, #6]
 8005624:	f5c3 72c8 	rsb	r2, r3, #400	; 0x190
 8005628:	4613      	mov	r3, r2
 800562a:	009b      	lsls	r3, r3, #2
 800562c:	4413      	add	r3, r2
 800562e:	005b      	lsls	r3, r3, #1
		HAL_DAC_SetValue(	&hdac1,
 8005630:	2200      	movs	r2, #0
 8005632:	2110      	movs	r1, #16
 8005634:	4814      	ldr	r0, [pc, #80]	; (8005688 <BO_MapEncoderPositionToSignalOutput+0x8c>)
 8005636:	f005 ffdd 	bl	800b5f4 <HAL_DAC_SetValue>

		HAL_GPIO_WritePin(	OFFSET_ENABLE_GPIO_Port,
 800563a:	2201      	movs	r2, #1
 800563c:	2108      	movs	r1, #8
 800563e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8005642:	f006 ffff 	bl	800c644 <HAL_GPIO_WritePin>
							OFFSET_ENABLE_Pin,
							GPIO_PIN_SET);
	}
	// apply positive dc bias
	if(pEncoderValue >= BIAS_CENTER) {
 8005646:	88fb      	ldrh	r3, [r7, #6]
 8005648:	f5b3 7fc8 	cmp.w	r3, #400	; 0x190
 800564c:	d314      	bcc.n	8005678 <BO_MapEncoderPositionToSignalOutput+0x7c>

		eBiasPolarity = NORMALBIAS;
 800564e:	4b0d      	ldr	r3, [pc, #52]	; (8005684 <BO_MapEncoderPositionToSignalOutput+0x88>)
 8005650:	2201      	movs	r2, #1
 8005652:	701a      	strb	r2, [r3, #0]
		//TIM1->CNT = pEncoderValue;

		HAL_DAC_SetValue(	&hdac1,
							DAC1_CHANNEL_2,
							DAC_ALIGN_12B_R,
							((pEncoderValue - BIAS_CENTER) * BIAS_MAG));
 8005654:	88fb      	ldrh	r3, [r7, #6]
 8005656:	f5a3 72c8 	sub.w	r2, r3, #400	; 0x190
 800565a:	4613      	mov	r3, r2
 800565c:	009b      	lsls	r3, r3, #2
 800565e:	4413      	add	r3, r2
 8005660:	005b      	lsls	r3, r3, #1
		HAL_DAC_SetValue(	&hdac1,
 8005662:	2200      	movs	r2, #0
 8005664:	2110      	movs	r1, #16
 8005666:	4808      	ldr	r0, [pc, #32]	; (8005688 <BO_MapEncoderPositionToSignalOutput+0x8c>)
 8005668:	f005 ffc4 	bl	800b5f4 <HAL_DAC_SetValue>

		HAL_GPIO_WritePin(	OFFSET_ENABLE_GPIO_Port,
 800566c:	2200      	movs	r2, #0
 800566e:	2108      	movs	r1, #8
 8005670:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8005674:	f006 ffe6 	bl	800c644 <HAL_GPIO_WritePin>
							OFFSET_ENABLE_Pin,
							GPIO_PIN_RESET);
	}
}
 8005678:	bf00      	nop
 800567a:	3708      	adds	r7, #8
 800567c:	46bd      	mov	sp, r7
 800567e:	bd80      	pop	{r7, pc}
 8005680:	20000002 	.word	0x20000002
 8005684:	20000001 	.word	0x20000001
 8005688:	2000292c 	.word	0x2000292c

0800568c <BO_GetOutputBias>:
 *	@param None
 *	@retval None
 *
 */
uint32_t BO_GetOutputBias()
{
 800568c:	b580      	push	{r7, lr}
 800568e:	af00      	add	r7, sp, #0
	return HAL_DAC_GetValue(&hdac1, DAC1_CHANNEL_2);
 8005690:	2110      	movs	r1, #16
 8005692:	4803      	ldr	r0, [pc, #12]	; (80056a0 <BO_GetOutputBias+0x14>)
 8005694:	f005 fff4 	bl	800b680 <HAL_DAC_GetValue>
 8005698:	4603      	mov	r3, r0
}
 800569a:	4618      	mov	r0, r3
 800569c:	bd80      	pop	{r7, pc}
 800569e:	bf00      	nop
 80056a0:	2000292c 	.word	0x2000292c

080056a4 <FreqO_InitFreqProfiles>:
 *	@param None
 *	@retval None
 *
 */
void FreqO_InitFreqProfiles()
{
 80056a4:	b480      	push	{r7}
 80056a6:	b083      	sub	sp, #12
 80056a8:	af00      	add	r7, sp, #0
	for(int i = 0; i < MAX_NUM_FREQ_PRESETS; i++)
 80056aa:	2300      	movs	r3, #0
 80056ac:	607b      	str	r3, [r7, #4]
 80056ae:	e06b      	b.n	8005788 <FreqO_InitFreqProfiles+0xe4>
	{
		// prevent divide by zero (prescaler)
		if(theFreqProfiles[i].psc == 0)
 80056b0:	493a      	ldr	r1, [pc, #232]	; (800579c <FreqO_InitFreqProfiles+0xf8>)
 80056b2:	687a      	ldr	r2, [r7, #4]
 80056b4:	4613      	mov	r3, r2
 80056b6:	009b      	lsls	r3, r3, #2
 80056b8:	4413      	add	r3, r2
 80056ba:	009b      	lsls	r3, r3, #2
 80056bc:	440b      	add	r3, r1
 80056be:	3308      	adds	r3, #8
 80056c0:	681b      	ldr	r3, [r3, #0]
 80056c2:	2b00      	cmp	r3, #0
 80056c4:	d129      	bne.n	800571a <FreqO_InitFreqProfiles+0x76>
			theFreqProfiles[i].arr = ((SM_MCLK / theFreqProfiles[i].hertz) / SM_FSAMP) * theFreqProfiles[i].error;
 80056c6:	4935      	ldr	r1, [pc, #212]	; (800579c <FreqO_InitFreqProfiles+0xf8>)
 80056c8:	687a      	ldr	r2, [r7, #4]
 80056ca:	4613      	mov	r3, r2
 80056cc:	009b      	lsls	r3, r3, #2
 80056ce:	4413      	add	r3, r2
 80056d0:	009b      	lsls	r3, r3, #2
 80056d2:	440b      	add	r3, r1
 80056d4:	3304      	adds	r3, #4
 80056d6:	681b      	ldr	r3, [r3, #0]
 80056d8:	4a31      	ldr	r2, [pc, #196]	; (80057a0 <FreqO_InitFreqProfiles+0xfc>)
 80056da:	fbb2 f3f3 	udiv	r3, r2, r3
 80056de:	ee07 3a90 	vmov	s15, r3
 80056e2:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80056e6:	492d      	ldr	r1, [pc, #180]	; (800579c <FreqO_InitFreqProfiles+0xf8>)
 80056e8:	687a      	ldr	r2, [r7, #4]
 80056ea:	4613      	mov	r3, r2
 80056ec:	009b      	lsls	r3, r3, #2
 80056ee:	4413      	add	r3, r2
 80056f0:	009b      	lsls	r3, r3, #2
 80056f2:	440b      	add	r3, r1
 80056f4:	3310      	adds	r3, #16
 80056f6:	edd3 7a00 	vldr	s15, [r3]
 80056fa:	ee67 7a27 	vmul.f32	s15, s14, s15
 80056fe:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005702:	ee17 0a90 	vmov	r0, s15
 8005706:	4925      	ldr	r1, [pc, #148]	; (800579c <FreqO_InitFreqProfiles+0xf8>)
 8005708:	687a      	ldr	r2, [r7, #4]
 800570a:	4613      	mov	r3, r2
 800570c:	009b      	lsls	r3, r3, #2
 800570e:	4413      	add	r3, r2
 8005710:	009b      	lsls	r3, r3, #2
 8005712:	440b      	add	r3, r1
 8005714:	330c      	adds	r3, #12
 8005716:	6018      	str	r0, [r3, #0]
 8005718:	e033      	b.n	8005782 <FreqO_InitFreqProfiles+0xde>
		else
			theFreqProfiles[i].arr = (((SM_MCLK / theFreqProfiles[i].hertz) / theFreqProfiles[i].psc) / SM_FSAMP) * theFreqProfiles[i].error;
 800571a:	4920      	ldr	r1, [pc, #128]	; (800579c <FreqO_InitFreqProfiles+0xf8>)
 800571c:	687a      	ldr	r2, [r7, #4]
 800571e:	4613      	mov	r3, r2
 8005720:	009b      	lsls	r3, r3, #2
 8005722:	4413      	add	r3, r2
 8005724:	009b      	lsls	r3, r3, #2
 8005726:	440b      	add	r3, r1
 8005728:	3304      	adds	r3, #4
 800572a:	681b      	ldr	r3, [r3, #0]
 800572c:	4a1c      	ldr	r2, [pc, #112]	; (80057a0 <FreqO_InitFreqProfiles+0xfc>)
 800572e:	fbb2 f1f3 	udiv	r1, r2, r3
 8005732:	481a      	ldr	r0, [pc, #104]	; (800579c <FreqO_InitFreqProfiles+0xf8>)
 8005734:	687a      	ldr	r2, [r7, #4]
 8005736:	4613      	mov	r3, r2
 8005738:	009b      	lsls	r3, r3, #2
 800573a:	4413      	add	r3, r2
 800573c:	009b      	lsls	r3, r3, #2
 800573e:	4403      	add	r3, r0
 8005740:	3308      	adds	r3, #8
 8005742:	681b      	ldr	r3, [r3, #0]
 8005744:	fbb1 f3f3 	udiv	r3, r1, r3
 8005748:	ee07 3a90 	vmov	s15, r3
 800574c:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8005750:	4912      	ldr	r1, [pc, #72]	; (800579c <FreqO_InitFreqProfiles+0xf8>)
 8005752:	687a      	ldr	r2, [r7, #4]
 8005754:	4613      	mov	r3, r2
 8005756:	009b      	lsls	r3, r3, #2
 8005758:	4413      	add	r3, r2
 800575a:	009b      	lsls	r3, r3, #2
 800575c:	440b      	add	r3, r1
 800575e:	3310      	adds	r3, #16
 8005760:	edd3 7a00 	vldr	s15, [r3]
 8005764:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005768:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800576c:	ee17 0a90 	vmov	r0, s15
 8005770:	490a      	ldr	r1, [pc, #40]	; (800579c <FreqO_InitFreqProfiles+0xf8>)
 8005772:	687a      	ldr	r2, [r7, #4]
 8005774:	4613      	mov	r3, r2
 8005776:	009b      	lsls	r3, r3, #2
 8005778:	4413      	add	r3, r2
 800577a:	009b      	lsls	r3, r3, #2
 800577c:	440b      	add	r3, r1
 800577e:	330c      	adds	r3, #12
 8005780:	6018      	str	r0, [r3, #0]
	for(int i = 0; i < MAX_NUM_FREQ_PRESETS; i++)
 8005782:	687b      	ldr	r3, [r7, #4]
 8005784:	3301      	adds	r3, #1
 8005786:	607b      	str	r3, [r7, #4]
 8005788:	687b      	ldr	r3, [r7, #4]
 800578a:	2b0d      	cmp	r3, #13
 800578c:	dd90      	ble.n	80056b0 <FreqO_InitFreqProfiles+0xc>
	}
}
 800578e:	bf00      	nop
 8005790:	370c      	adds	r7, #12
 8005792:	46bd      	mov	sp, r7
 8005794:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005798:	4770      	bx	lr
 800579a:	bf00      	nop
 800579c:	20000004 	.word	0x20000004
 80057a0:	00155cc0 	.word	0x00155cc0

080057a4 <FreqO_MapEncoderPositionCoarse>:
 *	@param None
 *	@retval None
 *
 */
void FreqO_MapEncoderPositionCoarse(uint16_t pEncValue)
{
 80057a4:	b580      	push	{r7, lr}
 80057a6:	b084      	sub	sp, #16
 80057a8:	af00      	add	r7, sp, #0
 80057aa:	4603      	mov	r3, r0
 80057ac:	80fb      	strh	r3, [r7, #6]

	uint32_t tmpFreqIndex = freq_profile->index;
 80057ae:	4b1b      	ldr	r3, [pc, #108]	; (800581c <FreqO_MapEncoderPositionCoarse+0x78>)
 80057b0:	681b      	ldr	r3, [r3, #0]
 80057b2:	781b      	ldrb	r3, [r3, #0]
 80057b4:	60fb      	str	r3, [r7, #12]
	if(pEncValue > freq_last_encoder_value)
 80057b6:	4b1a      	ldr	r3, [pc, #104]	; (8005820 <FreqO_MapEncoderPositionCoarse+0x7c>)
 80057b8:	881b      	ldrh	r3, [r3, #0]
 80057ba:	88fa      	ldrh	r2, [r7, #6]
 80057bc:	429a      	cmp	r2, r3
 80057be:	d910      	bls.n	80057e2 <FreqO_MapEncoderPositionCoarse+0x3e>
	{
		tmpFreqIndex++;
 80057c0:	68fb      	ldr	r3, [r7, #12]
 80057c2:	3301      	adds	r3, #1
 80057c4:	60fb      	str	r3, [r7, #12]
		if(tmpFreqIndex > MAX_NUM_FREQ_PRESETS-1) tmpFreqIndex = MAX_NUM_FREQ_PRESETS-1;
 80057c6:	68fb      	ldr	r3, [r7, #12]
 80057c8:	2b0d      	cmp	r3, #13
 80057ca:	d901      	bls.n	80057d0 <FreqO_MapEncoderPositionCoarse+0x2c>
 80057cc:	230d      	movs	r3, #13
 80057ce:	60fb      	str	r3, [r7, #12]
		FreqO_ApplyProfile( FreqO_GetProfileByIndex(tmpFreqIndex)->hertz );
 80057d0:	68f8      	ldr	r0, [r7, #12]
 80057d2:	f000 f945 	bl	8005a60 <FreqO_GetProfileByIndex>
 80057d6:	4603      	mov	r3, r0
 80057d8:	685b      	ldr	r3, [r3, #4]
 80057da:	4618      	mov	r0, r3
 80057dc:	f000 f872 	bl	80058c4 <FreqO_ApplyProfile>
 80057e0:	e014      	b.n	800580c <FreqO_MapEncoderPositionCoarse+0x68>
	}
	else if (pEncValue < freq_last_encoder_value)
 80057e2:	4b0f      	ldr	r3, [pc, #60]	; (8005820 <FreqO_MapEncoderPositionCoarse+0x7c>)
 80057e4:	881b      	ldrh	r3, [r3, #0]
 80057e6:	88fa      	ldrh	r2, [r7, #6]
 80057e8:	429a      	cmp	r2, r3
 80057ea:	d20f      	bcs.n	800580c <FreqO_MapEncoderPositionCoarse+0x68>
	{
		tmpFreqIndex--;
 80057ec:	68fb      	ldr	r3, [r7, #12]
 80057ee:	3b01      	subs	r3, #1
 80057f0:	60fb      	str	r3, [r7, #12]
		if(tmpFreqIndex > MAX_NUM_FREQ_PRESETS-1) tmpFreqIndex = 0;
 80057f2:	68fb      	ldr	r3, [r7, #12]
 80057f4:	2b0d      	cmp	r3, #13
 80057f6:	d901      	bls.n	80057fc <FreqO_MapEncoderPositionCoarse+0x58>
 80057f8:	2300      	movs	r3, #0
 80057fa:	60fb      	str	r3, [r7, #12]
		FreqO_ApplyProfile( FreqO_GetProfileByIndex(tmpFreqIndex)->hertz );
 80057fc:	68f8      	ldr	r0, [r7, #12]
 80057fe:	f000 f92f 	bl	8005a60 <FreqO_GetProfileByIndex>
 8005802:	4603      	mov	r3, r0
 8005804:	685b      	ldr	r3, [r3, #4]
 8005806:	4618      	mov	r0, r3
 8005808:	f000 f85c 	bl	80058c4 <FreqO_ApplyProfile>
	}
	freq_last_encoder_value = pEncValue;
 800580c:	4a04      	ldr	r2, [pc, #16]	; (8005820 <FreqO_MapEncoderPositionCoarse+0x7c>)
 800580e:	88fb      	ldrh	r3, [r7, #6]
 8005810:	8013      	strh	r3, [r2, #0]

}
 8005812:	bf00      	nop
 8005814:	3710      	adds	r7, #16
 8005816:	46bd      	mov	sp, r7
 8005818:	bd80      	pop	{r7, pc}
 800581a:	bf00      	nop
 800581c:	2000011c 	.word	0x2000011c
 8005820:	200020e2 	.word	0x200020e2

08005824 <FreqO_MapEncoderPositionFine>:
 *	@param None
 *	@retval None
 *
 */
void FreqO_MapEncoderPositionFine(uint16_t pEncValue)
{
 8005824:	b480      	push	{r7}
 8005826:	b083      	sub	sp, #12
 8005828:	af00      	add	r7, sp, #0
 800582a:	4603      	mov	r3, r0
 800582c:	80fb      	strh	r3, [r7, #6]

//	uint32_t tmpFreqIndex = freq_profile->index;
	if(pEncValue > freq_last_encoder_value)
 800582e:	4b0e      	ldr	r3, [pc, #56]	; (8005868 <FreqO_MapEncoderPositionFine+0x44>)
 8005830:	881b      	ldrh	r3, [r3, #0]
 8005832:	88fa      	ldrh	r2, [r7, #6]
 8005834:	429a      	cmp	r2, r3
 8005836:	d904      	bls.n	8005842 <FreqO_MapEncoderPositionFine+0x1e>
	{
		OUTPUT_TIMER->ARR++;
 8005838:	4b0c      	ldr	r3, [pc, #48]	; (800586c <FreqO_MapEncoderPositionFine+0x48>)
 800583a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800583c:	3201      	adds	r2, #1
 800583e:	62da      	str	r2, [r3, #44]	; 0x2c
 8005840:	e008      	b.n	8005854 <FreqO_MapEncoderPositionFine+0x30>
//		tmpFreqIndex++;
//		if(tmpFreqIndex > MAX_NUM_FREQ_PRESETS-1) tmpFreqIndex = MAX_NUM_FREQ_PRESETS-1;
//		FreqO_ApplyProfile( FreqO_GetProfileByIndex(tmpFreqIndex)->hertz );
	}
	else if (pEncValue < freq_last_encoder_value)
 8005842:	4b09      	ldr	r3, [pc, #36]	; (8005868 <FreqO_MapEncoderPositionFine+0x44>)
 8005844:	881b      	ldrh	r3, [r3, #0]
 8005846:	88fa      	ldrh	r2, [r7, #6]
 8005848:	429a      	cmp	r2, r3
 800584a:	d203      	bcs.n	8005854 <FreqO_MapEncoderPositionFine+0x30>
	{
		OUTPUT_TIMER->ARR--;
 800584c:	4b07      	ldr	r3, [pc, #28]	; (800586c <FreqO_MapEncoderPositionFine+0x48>)
 800584e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005850:	3a01      	subs	r2, #1
 8005852:	62da      	str	r2, [r3, #44]	; 0x2c
//		tmpFreqIndex--;
//		if(tmpFreqIndex > MAX_NUM_FREQ_PRESETS-1) tmpFreqIndex = 0;
//		FreqO_ApplyProfile( FreqO_GetProfileByIndex(tmpFreqIndex)->hertz );
	}
	freq_last_encoder_value = pEncValue;
 8005854:	4a04      	ldr	r2, [pc, #16]	; (8005868 <FreqO_MapEncoderPositionFine+0x44>)
 8005856:	88fb      	ldrh	r3, [r7, #6]
 8005858:	8013      	strh	r3, [r2, #0]

}
 800585a:	bf00      	nop
 800585c:	370c      	adds	r7, #12
 800585e:	46bd      	mov	sp, r7
 8005860:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005864:	4770      	bx	lr
 8005866:	bf00      	nop
 8005868:	200020e2 	.word	0x200020e2
 800586c:	40013400 	.word	0x40013400

08005870 <FreqO_MapEncoderPositionToPrescaler>:
 *	@param None
 *	@retval None
 *
 */
void FreqO_MapEncoderPositionToPrescaler(uint16_t pEncValue)
{
 8005870:	b480      	push	{r7}
 8005872:	b083      	sub	sp, #12
 8005874:	af00      	add	r7, sp, #0
 8005876:	4603      	mov	r3, r0
 8005878:	80fb      	strh	r3, [r7, #6]

//	uint32_t tmpFreqIndex = freq_profile->index;
	if(pEncValue > freq_last_encoder_value)
 800587a:	4b10      	ldr	r3, [pc, #64]	; (80058bc <FreqO_MapEncoderPositionToPrescaler+0x4c>)
 800587c:	881b      	ldrh	r3, [r3, #0]
 800587e:	88fa      	ldrh	r2, [r7, #6]
 8005880:	429a      	cmp	r2, r3
 8005882:	d904      	bls.n	800588e <FreqO_MapEncoderPositionToPrescaler+0x1e>
	{
		OUTPUT_TIMER->PSC++;
 8005884:	4b0e      	ldr	r3, [pc, #56]	; (80058c0 <FreqO_MapEncoderPositionToPrescaler+0x50>)
 8005886:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8005888:	3201      	adds	r2, #1
 800588a:	629a      	str	r2, [r3, #40]	; 0x28
 800588c:	e00c      	b.n	80058a8 <FreqO_MapEncoderPositionToPrescaler+0x38>

	}
	else if (pEncValue < freq_last_encoder_value)
 800588e:	4b0b      	ldr	r3, [pc, #44]	; (80058bc <FreqO_MapEncoderPositionToPrescaler+0x4c>)
 8005890:	881b      	ldrh	r3, [r3, #0]
 8005892:	88fa      	ldrh	r2, [r7, #6]
 8005894:	429a      	cmp	r2, r3
 8005896:	d207      	bcs.n	80058a8 <FreqO_MapEncoderPositionToPrescaler+0x38>
	{
		if(OUTPUT_TIMER->PSC > 0)
 8005898:	4b09      	ldr	r3, [pc, #36]	; (80058c0 <FreqO_MapEncoderPositionToPrescaler+0x50>)
 800589a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800589c:	2b00      	cmp	r3, #0
 800589e:	d003      	beq.n	80058a8 <FreqO_MapEncoderPositionToPrescaler+0x38>
			OUTPUT_TIMER->PSC--;
 80058a0:	4b07      	ldr	r3, [pc, #28]	; (80058c0 <FreqO_MapEncoderPositionToPrescaler+0x50>)
 80058a2:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80058a4:	3a01      	subs	r2, #1
 80058a6:	629a      	str	r2, [r3, #40]	; 0x28
//		tmpFreqIndex--;
//		if(tmpFreqIndex > MAX_NUM_FREQ_PRESETS-1) tmpFreqIndex = 0;
//		FreqO_ApplyProfile( FreqO_GetProfileByIndex(tmpFreqIndex)->hertz );
	}
	freq_last_encoder_value = pEncValue;
 80058a8:	4a04      	ldr	r2, [pc, #16]	; (80058bc <FreqO_MapEncoderPositionToPrescaler+0x4c>)
 80058aa:	88fb      	ldrh	r3, [r7, #6]
 80058ac:	8013      	strh	r3, [r2, #0]

}
 80058ae:	bf00      	nop
 80058b0:	370c      	adds	r7, #12
 80058b2:	46bd      	mov	sp, r7
 80058b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058b8:	4770      	bx	lr
 80058ba:	bf00      	nop
 80058bc:	200020e2 	.word	0x200020e2
 80058c0:	40013400 	.word	0x40013400

080058c4 <FreqO_ApplyProfile>:
 *	@retval None
 *
 */

void FreqO_ApplyProfile(eFreqSettings_t pPresetEnum)
{
 80058c4:	b580      	push	{r7, lr}
 80058c6:	b084      	sub	sp, #16
 80058c8:	af00      	add	r7, sp, #0
 80058ca:	6078      	str	r0, [r7, #4]
//	DacTimeReg_t* tmpDT = DT_GetRegisterByEnum(pPresetEnum);
	FreqProfile_t* tmpFreqProfile = FreqO_FindFPresetObject(pPresetEnum);
 80058cc:	6878      	ldr	r0, [r7, #4]
 80058ce:	f000 f899 	bl	8005a04 <FreqO_FindFPresetObject>
 80058d2:	60f8      	str	r0, [r7, #12]
	if(tmpFreqProfile)
 80058d4:	68fb      	ldr	r3, [r7, #12]
 80058d6:	2b00      	cmp	r3, #0
 80058d8:	d024      	beq.n	8005924 <FreqO_ApplyProfile+0x60>
	{

		OUTPUT_TIMER->PSC = tmpFreqProfile->psc;
 80058da:	4a16      	ldr	r2, [pc, #88]	; (8005934 <FreqO_ApplyProfile+0x70>)
 80058dc:	68fb      	ldr	r3, [r7, #12]
 80058de:	689b      	ldr	r3, [r3, #8]
 80058e0:	6293      	str	r3, [r2, #40]	; 0x28
		OUTPUT_TIMER->ARR = tmpFreqProfile->arr;
 80058e2:	4a14      	ldr	r2, [pc, #80]	; (8005934 <FreqO_ApplyProfile+0x70>)
 80058e4:	68fb      	ldr	r3, [r7, #12]
 80058e6:	68db      	ldr	r3, [r3, #12]
 80058e8:	62d3      	str	r3, [r2, #44]	; 0x2c

		eOutput_mode tmpOut = SM_GetOutputChannel(AUX_CHANNEL)->func_profile->func;
 80058ea:	2001      	movs	r0, #1
 80058ec:	f001 f878 	bl	80069e0 <SM_GetOutputChannel>
 80058f0:	4603      	mov	r3, r0
 80058f2:	f8d3 31e8 	ldr.w	r3, [r3, #488]	; 0x1e8
 80058f6:	781b      	ldrb	r3, [r3, #0]
 80058f8:	72fb      	strb	r3, [r7, #11]
		if(tmpOut == PWM_FUNC_MODE)
 80058fa:	7afb      	ldrb	r3, [r7, #11]
 80058fc:	2b06      	cmp	r3, #6
 80058fe:	d10d      	bne.n	800591c <FreqO_ApplyProfile+0x58>
		{
			// duty cycle of PWM require slower settings to get the
			// same frequency as normal output functions
			PWM_AUX_OUT_TIM->PSC = 256;
 8005900:	4b0d      	ldr	r3, [pc, #52]	; (8005938 <FreqO_ApplyProfile+0x74>)
 8005902:	f44f 7280 	mov.w	r2, #256	; 0x100
 8005906:	629a      	str	r2, [r3, #40]	; 0x28
			PWM_AUX_OUT_TIM->ARR = tmpFreqProfile->arr/2;
 8005908:	68fb      	ldr	r3, [r7, #12]
 800590a:	68db      	ldr	r3, [r3, #12]
 800590c:	4a0a      	ldr	r2, [pc, #40]	; (8005938 <FreqO_ApplyProfile+0x74>)
 800590e:	085b      	lsrs	r3, r3, #1
 8005910:	62d3      	str	r3, [r2, #44]	; 0x2c
			PWM_AUX_OUT_TIM->CCR1 = PWM_AUX_OUT_TIM->ARR/2;
 8005912:	4b09      	ldr	r3, [pc, #36]	; (8005938 <FreqO_ApplyProfile+0x74>)
 8005914:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005916:	4a08      	ldr	r2, [pc, #32]	; (8005938 <FreqO_ApplyProfile+0x74>)
 8005918:	085b      	lsrs	r3, r3, #1
 800591a:	6353      	str	r3, [r2, #52]	; 0x34
		}

		freq_profile = tmpFreqProfile;
 800591c:	4a07      	ldr	r2, [pc, #28]	; (800593c <FreqO_ApplyProfile+0x78>)
 800591e:	68fb      	ldr	r3, [r7, #12]
 8005920:	6013      	str	r3, [r2, #0]
	}
	else
	{
		DM_SetErrorDebugMsg("FreqO_ApplyProfile() null pointer error");
	}
}
 8005922:	e002      	b.n	800592a <FreqO_ApplyProfile+0x66>
		DM_SetErrorDebugMsg("FreqO_ApplyProfile() null pointer error");
 8005924:	4806      	ldr	r0, [pc, #24]	; (8005940 <FreqO_ApplyProfile+0x7c>)
 8005926:	f7fb fffd 	bl	8001924 <DM_SetErrorDebugMsg>
}
 800592a:	bf00      	nop
 800592c:	3710      	adds	r7, #16
 800592e:	46bd      	mov	sp, r7
 8005930:	bd80      	pop	{r7, pc}
 8005932:	bf00      	nop
 8005934:	40013400 	.word	0x40013400
 8005938:	40000400 	.word	0x40000400
 800593c:	2000011c 	.word	0x2000011c
 8005940:	08015ea0 	.word	0x08015ea0

08005944 <FreqO_AdjustFreq>:
 *	@param None
 *	@retval None
 *
 */
void FreqO_AdjustFreq()
{
 8005944:	b580      	push	{r7, lr}
 8005946:	b082      	sub	sp, #8
 8005948:	af00      	add	r7, sp, #0
	FreqO_MapEncoderPositionFine(SM_GetEncoderValue(ENCODER_NORMAL));
 800594a:	2000      	movs	r0, #0
 800594c:	f001 fac4 	bl	8006ed8 <SM_GetEncoderValue>
 8005950:	4603      	mov	r3, r0
 8005952:	4618      	mov	r0, r3
 8005954:	f7ff ff66 	bl	8005824 <FreqO_MapEncoderPositionFine>


	eOutput_mode tmpOut = SM_GetOutputChannel(AUX_CHANNEL)->func_profile->func;
 8005958:	2001      	movs	r0, #1
 800595a:	f001 f841 	bl	80069e0 <SM_GetOutputChannel>
 800595e:	4603      	mov	r3, r0
 8005960:	f8d3 31e8 	ldr.w	r3, [r3, #488]	; 0x1e8
 8005964:	781b      	ldrb	r3, [r3, #0]
 8005966:	71fb      	strb	r3, [r7, #7]
	if(tmpOut == PWM_FUNC_MODE)
 8005968:	79fb      	ldrb	r3, [r7, #7]
 800596a:	2b06      	cmp	r3, #6
 800596c:	d110      	bne.n	8005990 <FreqO_AdjustFreq+0x4c>
	{
		// duty cycle of PWM require slower settings to get the
		// same frequency as normal output functions
		PWM_AUX_OUT_TIM->PSC = 256;
 800596e:	4b0a      	ldr	r3, [pc, #40]	; (8005998 <FreqO_AdjustFreq+0x54>)
 8005970:	f44f 7280 	mov.w	r2, #256	; 0x100
 8005974:	629a      	str	r2, [r3, #40]	; 0x28
		PWM_AUX_OUT_TIM->ARR = SM_GetEncoderValue(ENCODER_NORMAL)/2;
 8005976:	2000      	movs	r0, #0
 8005978:	f001 faae 	bl	8006ed8 <SM_GetEncoderValue>
 800597c:	4603      	mov	r3, r0
 800597e:	085b      	lsrs	r3, r3, #1
 8005980:	b29a      	uxth	r2, r3
 8005982:	4b05      	ldr	r3, [pc, #20]	; (8005998 <FreqO_AdjustFreq+0x54>)
 8005984:	62da      	str	r2, [r3, #44]	; 0x2c
		PWM_AUX_OUT_TIM->CCR1 = PWM_AUX_OUT_TIM->ARR/2;
 8005986:	4b04      	ldr	r3, [pc, #16]	; (8005998 <FreqO_AdjustFreq+0x54>)
 8005988:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800598a:	4a03      	ldr	r2, [pc, #12]	; (8005998 <FreqO_AdjustFreq+0x54>)
 800598c:	085b      	lsrs	r3, r3, #1
 800598e:	6353      	str	r3, [r2, #52]	; 0x34

	}
}
 8005990:	bf00      	nop
 8005992:	3708      	adds	r7, #8
 8005994:	46bd      	mov	sp, r7
 8005996:	bd80      	pop	{r7, pc}
 8005998:	40000400 	.word	0x40000400

0800599c <FreqO_AdjustPrescaler>:
 *	@param None
 *	@retval None
 *
 */
void FreqO_AdjustPrescaler()
{
 800599c:	b580      	push	{r7, lr}
 800599e:	b082      	sub	sp, #8
 80059a0:	af00      	add	r7, sp, #0
	FreqO_MapEncoderPositionToPrescaler(SM_GetEncoderValue(ENCODER_NORMAL));
 80059a2:	2000      	movs	r0, #0
 80059a4:	f001 fa98 	bl	8006ed8 <SM_GetEncoderValue>
 80059a8:	4603      	mov	r3, r0
 80059aa:	4618      	mov	r0, r3
 80059ac:	f7ff ff60 	bl	8005870 <FreqO_MapEncoderPositionToPrescaler>

	// not sure about this code?!?!
	eOutput_mode tmpOut = SM_GetOutputChannel(AUX_CHANNEL)->func_profile->func;
 80059b0:	2001      	movs	r0, #1
 80059b2:	f001 f815 	bl	80069e0 <SM_GetOutputChannel>
 80059b6:	4603      	mov	r3, r0
 80059b8:	f8d3 31e8 	ldr.w	r3, [r3, #488]	; 0x1e8
 80059bc:	781b      	ldrb	r3, [r3, #0]
 80059be:	71fb      	strb	r3, [r7, #7]
	if(tmpOut == PWM_FUNC_MODE)
 80059c0:	79fb      	ldrb	r3, [r7, #7]
 80059c2:	2b06      	cmp	r3, #6
 80059c4:	d10c      	bne.n	80059e0 <FreqO_AdjustPrescaler+0x44>
	{
		// duty cycle of PWM require slower settings to get the
		// same frequency as normal output functions
		//PWM_AUX_OUT_TIM->PSC = 256;
		PWM_AUX_OUT_TIM->ARR = SM_GetEncoderValue(ENCODER_NORMAL)/2;
 80059c6:	2000      	movs	r0, #0
 80059c8:	f001 fa86 	bl	8006ed8 <SM_GetEncoderValue>
 80059cc:	4603      	mov	r3, r0
 80059ce:	085b      	lsrs	r3, r3, #1
 80059d0:	b29a      	uxth	r2, r3
 80059d2:	4b05      	ldr	r3, [pc, #20]	; (80059e8 <FreqO_AdjustPrescaler+0x4c>)
 80059d4:	62da      	str	r2, [r3, #44]	; 0x2c
		PWM_AUX_OUT_TIM->CCR1 = PWM_AUX_OUT_TIM->ARR/2;
 80059d6:	4b04      	ldr	r3, [pc, #16]	; (80059e8 <FreqO_AdjustPrescaler+0x4c>)
 80059d8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80059da:	4a03      	ldr	r2, [pc, #12]	; (80059e8 <FreqO_AdjustPrescaler+0x4c>)
 80059dc:	085b      	lsrs	r3, r3, #1
 80059de:	6353      	str	r3, [r2, #52]	; 0x34

	}
}
 80059e0:	bf00      	nop
 80059e2:	3708      	adds	r7, #8
 80059e4:	46bd      	mov	sp, r7
 80059e6:	bd80      	pop	{r7, pc}
 80059e8:	40000400 	.word	0x40000400

080059ec <FreqO_GetFPresetObject>:
 *	@param None
 *	@retval pointer to FreqProfile_t struct
 *
 */
FreqProfile_t * FreqO_GetFPresetObject()
{
 80059ec:	b480      	push	{r7}
 80059ee:	af00      	add	r7, sp, #0
	return freq_profile;
 80059f0:	4b03      	ldr	r3, [pc, #12]	; (8005a00 <FreqO_GetFPresetObject+0x14>)
 80059f2:	681b      	ldr	r3, [r3, #0]
}
 80059f4:	4618      	mov	r0, r3
 80059f6:	46bd      	mov	sp, r7
 80059f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059fc:	4770      	bx	lr
 80059fe:	bf00      	nop
 8005a00:	2000011c 	.word	0x2000011c

08005a04 <FreqO_FindFPresetObject>:

 *	@retval pointer to FreqProfile_t struct
 *
 */
FreqProfile_t * FreqO_FindFPresetObject(eFreqSettings_t pEnum)
{
 8005a04:	b580      	push	{r7, lr}
 8005a06:	b084      	sub	sp, #16
 8005a08:	af00      	add	r7, sp, #0
 8005a0a:	6078      	str	r0, [r7, #4]
	for(int i = 0; i < MAX_NUM_FREQ_PRESETS; i++ )
 8005a0c:	2300      	movs	r3, #0
 8005a0e:	60fb      	str	r3, [r7, #12]
 8005a10:	e016      	b.n	8005a40 <FreqO_FindFPresetObject+0x3c>
	{
		if(theFreqProfiles[i].hertz == pEnum)
 8005a12:	4911      	ldr	r1, [pc, #68]	; (8005a58 <FreqO_FindFPresetObject+0x54>)
 8005a14:	68fa      	ldr	r2, [r7, #12]
 8005a16:	4613      	mov	r3, r2
 8005a18:	009b      	lsls	r3, r3, #2
 8005a1a:	4413      	add	r3, r2
 8005a1c:	009b      	lsls	r3, r3, #2
 8005a1e:	440b      	add	r3, r1
 8005a20:	3304      	adds	r3, #4
 8005a22:	681b      	ldr	r3, [r3, #0]
 8005a24:	687a      	ldr	r2, [r7, #4]
 8005a26:	429a      	cmp	r2, r3
 8005a28:	d107      	bne.n	8005a3a <FreqO_FindFPresetObject+0x36>
		{
			return &theFreqProfiles[i];
 8005a2a:	68fa      	ldr	r2, [r7, #12]
 8005a2c:	4613      	mov	r3, r2
 8005a2e:	009b      	lsls	r3, r3, #2
 8005a30:	4413      	add	r3, r2
 8005a32:	009b      	lsls	r3, r3, #2
 8005a34:	4a08      	ldr	r2, [pc, #32]	; (8005a58 <FreqO_FindFPresetObject+0x54>)
 8005a36:	4413      	add	r3, r2
 8005a38:	e009      	b.n	8005a4e <FreqO_FindFPresetObject+0x4a>
	for(int i = 0; i < MAX_NUM_FREQ_PRESETS; i++ )
 8005a3a:	68fb      	ldr	r3, [r7, #12]
 8005a3c:	3301      	adds	r3, #1
 8005a3e:	60fb      	str	r3, [r7, #12]
 8005a40:	68fb      	ldr	r3, [r7, #12]
 8005a42:	2b0d      	cmp	r3, #13
 8005a44:	dde5      	ble.n	8005a12 <FreqO_FindFPresetObject+0xe>
		}
	}
	// error!
	DM_SetErrorDebugMsg("FreqO_FindFPresetObject(): no FPreset obj found");
 8005a46:	4805      	ldr	r0, [pc, #20]	; (8005a5c <FreqO_FindFPresetObject+0x58>)
 8005a48:	f7fb ff6c 	bl	8001924 <DM_SetErrorDebugMsg>
	return 0;
 8005a4c:	2300      	movs	r3, #0
}
 8005a4e:	4618      	mov	r0, r3
 8005a50:	3710      	adds	r7, #16
 8005a52:	46bd      	mov	sp, r7
 8005a54:	bd80      	pop	{r7, pc}
 8005a56:	bf00      	nop
 8005a58:	20000004 	.word	0x20000004
 8005a5c:	08015ec8 	.word	0x08015ec8

08005a60 <FreqO_GetProfileByIndex>:
 *	@param pIndex
 *	@retval pointer to FreqProfile_t object
 *
 */
FreqProfile_t* FreqO_GetProfileByIndex(uint32_t pIndex)
{
 8005a60:	b480      	push	{r7}
 8005a62:	b083      	sub	sp, #12
 8005a64:	af00      	add	r7, sp, #0
 8005a66:	6078      	str	r0, [r7, #4]
	return &theFreqProfiles[pIndex];
 8005a68:	687a      	ldr	r2, [r7, #4]
 8005a6a:	4613      	mov	r3, r2
 8005a6c:	009b      	lsls	r3, r3, #2
 8005a6e:	4413      	add	r3, r2
 8005a70:	009b      	lsls	r3, r3, #2
 8005a72:	4a04      	ldr	r2, [pc, #16]	; (8005a84 <FreqO_GetProfileByIndex+0x24>)
 8005a74:	4413      	add	r3, r2
}
 8005a76:	4618      	mov	r0, r3
 8005a78:	370c      	adds	r7, #12
 8005a7a:	46bd      	mov	sp, r7
 8005a7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a80:	4770      	bx	lr
 8005a82:	bf00      	nop
 8005a84:	20000004 	.word	0x20000004

08005a88 <FreqO_ResetLastEncoderValue>:
 *	@param None
 *	@retval None
 *
 */
void FreqO_ResetLastEncoderValue()
{
 8005a88:	b480      	push	{r7}
 8005a8a:	af00      	add	r7, sp, #0
	freq_last_encoder_value = 0;
 8005a8c:	4b03      	ldr	r3, [pc, #12]	; (8005a9c <FreqO_ResetLastEncoderValue+0x14>)
 8005a8e:	2200      	movs	r2, #0
 8005a90:	801a      	strh	r2, [r3, #0]
}
 8005a92:	bf00      	nop
 8005a94:	46bd      	mov	sp, r7
 8005a96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a9a:	4770      	bx	lr
 8005a9c:	200020e2 	.word	0x200020e2

08005aa0 <FS_SetSweepModeDown>:
 *	@param None
 *	@retval None
 *
 */
void FS_SetSweepModeDown()
{
 8005aa0:	b480      	push	{r7}
 8005aa2:	af00      	add	r7, sp, #0
	// "Center-aligned" mode sets direction register to readonly,
	// so disable "Center-aligned" mode first
	SWEEP_TIMER->CR1 &= ~((TIM_CR1_CMS_0) | (TIM_CR1_CMS_1));
 8005aa4:	4b10      	ldr	r3, [pc, #64]	; (8005ae8 <FS_SetSweepModeDown+0x48>)
 8005aa6:	681b      	ldr	r3, [r3, #0]
 8005aa8:	4a0f      	ldr	r2, [pc, #60]	; (8005ae8 <FS_SetSweepModeDown+0x48>)
 8005aaa:	f023 0360 	bic.w	r3, r3, #96	; 0x60
 8005aae:	6013      	str	r3, [r2, #0]

	// 0: Counter used as upcounter
	SWEEP_TIMER->CR1 |= (TIM_CR1_DIR);
 8005ab0:	4b0d      	ldr	r3, [pc, #52]	; (8005ae8 <FS_SetSweepModeDown+0x48>)
 8005ab2:	681b      	ldr	r3, [r3, #0]
 8005ab4:	4a0c      	ldr	r2, [pc, #48]	; (8005ae8 <FS_SetSweepModeDown+0x48>)
 8005ab6:	f043 0310 	orr.w	r3, r3, #16
 8005aba:	6013      	str	r3, [r2, #0]

	sweep_lower_bounds_shortest_output_arr  = OUTPUT_TIMER->ARR;
 8005abc:	4b0b      	ldr	r3, [pc, #44]	; (8005aec <FS_SetSweepModeDown+0x4c>)
 8005abe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005ac0:	ee07 3a90 	vmov	s15, r3
 8005ac4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005ac8:	4b09      	ldr	r3, [pc, #36]	; (8005af0 <FS_SetSweepModeDown+0x50>)
 8005aca:	edc3 7a00 	vstr	s15, [r3]
	sweep_upper_bounds_longest_output_arr  = MAX_OUTPUT_ARR;
 8005ace:	4b09      	ldr	r3, [pc, #36]	; (8005af4 <FS_SetSweepModeDown+0x54>)
 8005ad0:	4a09      	ldr	r2, [pc, #36]	; (8005af8 <FS_SetSweepModeDown+0x58>)
 8005ad2:	601a      	str	r2, [r3, #0]
	ENCODER_TIMER->CNT = MAX_OUTPUT_ARR;
 8005ad4:	4b09      	ldr	r3, [pc, #36]	; (8005afc <FS_SetSweepModeDown+0x5c>)
 8005ad6:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8005ada:	625a      	str	r2, [r3, #36]	; 0x24

}
 8005adc:	bf00      	nop
 8005ade:	46bd      	mov	sp, r7
 8005ae0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ae4:	4770      	bx	lr
 8005ae6:	bf00      	nop
 8005ae8:	40000c00 	.word	0x40000c00
 8005aec:	40013400 	.word	0x40013400
 8005af0:	20000120 	.word	0x20000120
 8005af4:	20000124 	.word	0x20000124
 8005af8:	477fff00 	.word	0x477fff00
 8005afc:	40012c00 	.word	0x40012c00

08005b00 <FS_SetSweepModeUp>:
 *	@param None
 *	@retval None
 *
 */
void FS_SetSweepModeUp()
{
 8005b00:	b480      	push	{r7}
 8005b02:	af00      	add	r7, sp, #0

	// "Center-aligned" mode sets direction register to readonly,
	// so disable "Center-aligned" mode first
	SWEEP_TIMER->CR1 &= ~((TIM_CR1_CMS_0) | (TIM_CR1_CMS_1));
 8005b04:	4b0e      	ldr	r3, [pc, #56]	; (8005b40 <FS_SetSweepModeUp+0x40>)
 8005b06:	681b      	ldr	r3, [r3, #0]
 8005b08:	4a0d      	ldr	r2, [pc, #52]	; (8005b40 <FS_SetSweepModeUp+0x40>)
 8005b0a:	f023 0360 	bic.w	r3, r3, #96	; 0x60
 8005b0e:	6013      	str	r3, [r2, #0]

	// 1: Counter used as downcounter
	SWEEP_TIMER->CR1 &= ~(TIM_CR1_DIR);
 8005b10:	4b0b      	ldr	r3, [pc, #44]	; (8005b40 <FS_SetSweepModeUp+0x40>)
 8005b12:	681b      	ldr	r3, [r3, #0]
 8005b14:	4a0a      	ldr	r2, [pc, #40]	; (8005b40 <FS_SetSweepModeUp+0x40>)
 8005b16:	f023 0310 	bic.w	r3, r3, #16
 8005b1a:	6013      	str	r3, [r2, #0]

	sweep_upper_bounds_longest_output_arr  = OUTPUT_TIMER->ARR;
 8005b1c:	4b09      	ldr	r3, [pc, #36]	; (8005b44 <FS_SetSweepModeUp+0x44>)
 8005b1e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005b20:	ee07 3a90 	vmov	s15, r3
 8005b24:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005b28:	4b07      	ldr	r3, [pc, #28]	; (8005b48 <FS_SetSweepModeUp+0x48>)
 8005b2a:	edc3 7a00 	vstr	s15, [r3]
	sweep_lower_bounds_shortest_output_arr  = MIN_OUTPUT_ARR;
 8005b2e:	4b07      	ldr	r3, [pc, #28]	; (8005b4c <FS_SetSweepModeUp+0x4c>)
 8005b30:	4a07      	ldr	r2, [pc, #28]	; (8005b50 <FS_SetSweepModeUp+0x50>)
 8005b32:	601a      	str	r2, [r3, #0]


}
 8005b34:	bf00      	nop
 8005b36:	46bd      	mov	sp, r7
 8005b38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b3c:	4770      	bx	lr
 8005b3e:	bf00      	nop
 8005b40:	40000c00 	.word	0x40000c00
 8005b44:	40013400 	.word	0x40013400
 8005b48:	20000124 	.word	0x20000124
 8005b4c:	20000120 	.word	0x20000120
 8005b50:	41500000 	.word	0x41500000

08005b54 <FS_SetEncoderControlMode>:
 *	@param None
 *	@retval None
 *
 */
void FS_SetEncoderControlMode(eEncoderSweepFunctions pFunction)
{
 8005b54:	b480      	push	{r7}
 8005b56:	b083      	sub	sp, #12
 8005b58:	af00      	add	r7, sp, #0
 8005b5a:	4603      	mov	r3, r0
 8005b5c:	71fb      	strb	r3, [r7, #7]
	if(pFunction)
 8005b5e:	79fb      	ldrb	r3, [r7, #7]
 8005b60:	2b00      	cmp	r3, #0
 8005b62:	d038      	beq.n	8005bd6 <FS_SetEncoderControlMode+0x82>
	{
		//	ENCODER_SWEEP_LIMIT_FUNCTION
		theCurrentEncoderSweepFunction = pFunction;
 8005b64:	4a24      	ldr	r2, [pc, #144]	; (8005bf8 <FS_SetEncoderControlMode+0xa4>)
 8005b66:	79fb      	ldrb	r3, [r7, #7]
 8005b68:	7013      	strb	r3, [r2, #0]
		ENCODER_TIMER->CNT = MIN_OUTPUT_ARR;
 8005b6a:	4b24      	ldr	r3, [pc, #144]	; (8005bfc <FS_SetEncoderControlMode+0xa8>)
 8005b6c:	220d      	movs	r2, #13
 8005b6e:	625a      	str	r2, [r3, #36]	; 0x24
		ENCODER_TIMER->ARR = MAX_OUTPUT_ARR;
 8005b70:	4b22      	ldr	r3, [pc, #136]	; (8005bfc <FS_SetEncoderControlMode+0xa8>)
 8005b72:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8005b76:	62da      	str	r2, [r3, #44]	; 0x2c

		switch(active_sweep_mode)
 8005b78:	4b21      	ldr	r3, [pc, #132]	; (8005c00 <FS_SetEncoderControlMode+0xac>)
 8005b7a:	781b      	ldrb	r3, [r3, #0]
 8005b7c:	2b00      	cmp	r3, #0
 8005b7e:	d002      	beq.n	8005b86 <FS_SetEncoderControlMode+0x32>
 8005b80:	2b01      	cmp	r3, #1
 8005b82:	d014      	beq.n	8005bae <FS_SetEncoderControlMode+0x5a>
					// if encoder position is below the lower bounds set it above it
					if(ENCODER_TIMER->CNT < sweep_lower_bounds_shortest_output_arr)
						ENCODER_TIMER->CNT = OUTPUT_TIMER->ARR;
				break;
			default:
				break;
 8005b84:	e031      	b.n	8005bea <FS_SetEncoderControlMode+0x96>
					if(ENCODER_TIMER->CNT > sweep_upper_bounds_longest_output_arr)
 8005b86:	4b1d      	ldr	r3, [pc, #116]	; (8005bfc <FS_SetEncoderControlMode+0xa8>)
 8005b88:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005b8a:	ee07 3a90 	vmov	s15, r3
 8005b8e:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8005b92:	4b1c      	ldr	r3, [pc, #112]	; (8005c04 <FS_SetEncoderControlMode+0xb0>)
 8005b94:	edd3 7a00 	vldr	s15, [r3]
 8005b98:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8005b9c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005ba0:	dc00      	bgt.n	8005ba4 <FS_SetEncoderControlMode+0x50>
				break;
 8005ba2:	e022      	b.n	8005bea <FS_SetEncoderControlMode+0x96>
						 ENCODER_TIMER->CNT = OUTPUT_TIMER->ARR;
 8005ba4:	4b18      	ldr	r3, [pc, #96]	; (8005c08 <FS_SetEncoderControlMode+0xb4>)
 8005ba6:	4a15      	ldr	r2, [pc, #84]	; (8005bfc <FS_SetEncoderControlMode+0xa8>)
 8005ba8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005baa:	6253      	str	r3, [r2, #36]	; 0x24
				break;
 8005bac:	e01d      	b.n	8005bea <FS_SetEncoderControlMode+0x96>
					if(ENCODER_TIMER->CNT < sweep_lower_bounds_shortest_output_arr)
 8005bae:	4b13      	ldr	r3, [pc, #76]	; (8005bfc <FS_SetEncoderControlMode+0xa8>)
 8005bb0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005bb2:	ee07 3a90 	vmov	s15, r3
 8005bb6:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8005bba:	4b14      	ldr	r3, [pc, #80]	; (8005c0c <FS_SetEncoderControlMode+0xb8>)
 8005bbc:	edd3 7a00 	vldr	s15, [r3]
 8005bc0:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8005bc4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005bc8:	d400      	bmi.n	8005bcc <FS_SetEncoderControlMode+0x78>
				break;
 8005bca:	e00e      	b.n	8005bea <FS_SetEncoderControlMode+0x96>
						ENCODER_TIMER->CNT = OUTPUT_TIMER->ARR;
 8005bcc:	4b0e      	ldr	r3, [pc, #56]	; (8005c08 <FS_SetEncoderControlMode+0xb4>)
 8005bce:	4a0b      	ldr	r2, [pc, #44]	; (8005bfc <FS_SetEncoderControlMode+0xa8>)
 8005bd0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005bd2:	6253      	str	r3, [r2, #36]	; 0x24
				break;
 8005bd4:	e009      	b.n	8005bea <FS_SetEncoderControlMode+0x96>
		// switch(active_sweep_mode)
	}
	else
	{
		// ENCODER_SWEEP_SPEED_FUNCTION
		theCurrentEncoderSweepFunction = pFunction;
 8005bd6:	4a08      	ldr	r2, [pc, #32]	; (8005bf8 <FS_SetEncoderControlMode+0xa4>)
 8005bd8:	79fb      	ldrb	r3, [r7, #7]
 8005bda:	7013      	strb	r3, [r2, #0]
		// encoder start value
		ENCODER_TIMER->CNT = 1;
 8005bdc:	4b07      	ldr	r3, [pc, #28]	; (8005bfc <FS_SetEncoderControlMode+0xa8>)
 8005bde:	2201      	movs	r2, #1
 8005be0:	625a      	str	r2, [r3, #36]	; 0x24
		// encoder limit for default (set speed)
		ENCODER_TIMER->ARR = 1600;
 8005be2:	4b06      	ldr	r3, [pc, #24]	; (8005bfc <FS_SetEncoderControlMode+0xa8>)
 8005be4:	f44f 62c8 	mov.w	r2, #1600	; 0x640
 8005be8:	62da      	str	r2, [r3, #44]	; 0x2c
	}

}
 8005bea:	bf00      	nop
 8005bec:	370c      	adds	r7, #12
 8005bee:	46bd      	mov	sp, r7
 8005bf0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bf4:	4770      	bx	lr
 8005bf6:	bf00      	nop
 8005bf8:	200020d4 	.word	0x200020d4
 8005bfc:	40012c00 	.word	0x40012c00
 8005c00:	200020d3 	.word	0x200020d3
 8005c04:	20000124 	.word	0x20000124
 8005c08:	40013400 	.word	0x40013400
 8005c0c:	20000120 	.word	0x20000120

08005c10 <FS_SetSweepTimerAutoReloadForEncoderControl>:
 *	@param None
 *	@retval None
 *
 */
void FS_SetSweepTimerAutoReloadForEncoderControl(eEncoderSweepFunctions pFunction)
{
 8005c10:	b590      	push	{r4, r7, lr}
 8005c12:	b085      	sub	sp, #20
 8005c14:	af00      	add	r7, sp, #0
 8005c16:	4603      	mov	r3, r0
 8005c18:	71fb      	strb	r3, [r7, #7]
	uint32_t next_sweep_tim_arr;

	if(pFunction)
 8005c1a:	79fb      	ldrb	r3, [r7, #7]
 8005c1c:	2b00      	cmp	r3, #0
 8005c1e:	d122      	bne.n	8005c66 <FS_SetSweepTimerAutoReloadForEncoderControl+0x56>

	}
	else
	{
		// get logarithmic curve to speed up turns at low end
		next_sweep_tim_arr = MIN_SWEEP_ARR + (pow(ENCODER_TIMER->CNT, 3));
 8005c20:	4b17      	ldr	r3, [pc, #92]	; (8005c80 <FS_SetSweepTimerAutoReloadForEncoderControl+0x70>)
 8005c22:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005c24:	4618      	mov	r0, r3
 8005c26:	f7fa fc95 	bl	8000554 <__aeabi_ui2d>
 8005c2a:	4603      	mov	r3, r0
 8005c2c:	460c      	mov	r4, r1
 8005c2e:	ed9f 1b10 	vldr	d1, [pc, #64]	; 8005c70 <FS_SetSweepTimerAutoReloadForEncoderControl+0x60>
 8005c32:	ec44 3b10 	vmov	d0, r3, r4
 8005c36:	f00e fb73 	bl	8014320 <pow>
 8005c3a:	ec51 0b10 	vmov	r0, r1, d0
 8005c3e:	a30e      	add	r3, pc, #56	; (adr r3, 8005c78 <FS_SetSweepTimerAutoReloadForEncoderControl+0x68>)
 8005c40:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005c44:	f7fa fb4a 	bl	80002dc <__adddf3>
 8005c48:	4603      	mov	r3, r0
 8005c4a:	460c      	mov	r4, r1
 8005c4c:	4618      	mov	r0, r3
 8005c4e:	4621      	mov	r1, r4
 8005c50:	f7fa ffd2 	bl	8000bf8 <__aeabi_d2uiz>
 8005c54:	4603      	mov	r3, r0
 8005c56:	60fb      	str	r3, [r7, #12]

		if(next_sweep_tim_arr < 0xFFFFFFFF)
 8005c58:	68fb      	ldr	r3, [r7, #12]
 8005c5a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8005c5e:	d002      	beq.n	8005c66 <FS_SetSweepTimerAutoReloadForEncoderControl+0x56>
		{
			SWEEP_TIMER->ARR = next_sweep_tim_arr;
 8005c60:	4a08      	ldr	r2, [pc, #32]	; (8005c84 <FS_SetSweepTimerAutoReloadForEncoderControl+0x74>)
 8005c62:	68fb      	ldr	r3, [r7, #12]
 8005c64:	62d3      	str	r3, [r2, #44]	; 0x2c

		}
	}
}
 8005c66:	bf00      	nop
 8005c68:	3714      	adds	r7, #20
 8005c6a:	46bd      	mov	sp, r7
 8005c6c:	bd90      	pop	{r4, r7, pc}
 8005c6e:	bf00      	nop
 8005c70:	00000000 	.word	0x00000000
 8005c74:	40080000 	.word	0x40080000
 8005c78:	00000000 	.word	0x00000000
 8005c7c:	40d06800 	.word	0x40d06800
 8005c80:	40012c00 	.word	0x40012c00
 8005c84:	40000c00 	.word	0x40000c00

08005c88 <FS_GetCalculatedSweepFrequencyInHertz>:
 *	@param None
 *	@retval None
 *
 */
float FS_GetCalculatedSweepFrequencyInHertz()
{
 8005c88:	b480      	push	{r7}
 8005c8a:	af00      	add	r7, sp, #0
	if(SWEEP_TIMER->PSC == 0)
 8005c8c:	4b13      	ldr	r3, [pc, #76]	; (8005cdc <FS_GetCalculatedSweepFrequencyInHertz+0x54>)
 8005c8e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005c90:	2b00      	cmp	r3, #0
 8005c92:	d10a      	bne.n	8005caa <FS_GetCalculatedSweepFrequencyInHertz+0x22>
	{
		return (float)SM_MCLK / ((float)1 * (float)SWEEP_TIMER->ARR);
 8005c94:	4b11      	ldr	r3, [pc, #68]	; (8005cdc <FS_GetCalculatedSweepFrequencyInHertz+0x54>)
 8005c96:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005c98:	ee07 3a90 	vmov	s15, r3
 8005c9c:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8005ca0:	eddf 6a0f 	vldr	s13, [pc, #60]	; 8005ce0 <FS_GetCalculatedSweepFrequencyInHertz+0x58>
 8005ca4:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8005ca8:	e011      	b.n	8005cce <FS_GetCalculatedSweepFrequencyInHertz+0x46>
	}
	else
	{
		return (float)SM_MCLK / ((float)SWEEP_TIMER->PSC * (float)SWEEP_TIMER->ARR);
 8005caa:	4b0c      	ldr	r3, [pc, #48]	; (8005cdc <FS_GetCalculatedSweepFrequencyInHertz+0x54>)
 8005cac:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005cae:	ee07 3a90 	vmov	s15, r3
 8005cb2:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8005cb6:	4b09      	ldr	r3, [pc, #36]	; (8005cdc <FS_GetCalculatedSweepFrequencyInHertz+0x54>)
 8005cb8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005cba:	ee07 3a90 	vmov	s15, r3
 8005cbe:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005cc2:	ee27 7a27 	vmul.f32	s14, s14, s15
 8005cc6:	eddf 6a06 	vldr	s13, [pc, #24]	; 8005ce0 <FS_GetCalculatedSweepFrequencyInHertz+0x58>
 8005cca:	eec6 7a87 	vdiv.f32	s15, s13, s14
	}

}
 8005cce:	eeb0 0a67 	vmov.f32	s0, s15
 8005cd2:	46bd      	mov	sp, r7
 8005cd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cd8:	4770      	bx	lr
 8005cda:	bf00      	nop
 8005cdc:	40000c00 	.word	0x40000c00
 8005ce0:	4d2037a0 	.word	0x4d2037a0

08005ce4 <FuncO_ResetLastEncoderValue>:
 *	@param None
 *	@retval None
 *
 */
void FuncO_ResetLastEncoderValue()
{
 8005ce4:	b480      	push	{r7}
 8005ce6:	af00      	add	r7, sp, #0
	func_last_encoder_value = 0;
 8005ce8:	4b03      	ldr	r3, [pc, #12]	; (8005cf8 <FuncO_ResetLastEncoderValue+0x14>)
 8005cea:	2200      	movs	r2, #0
 8005cec:	801a      	strh	r2, [r3, #0]
}
 8005cee:	bf00      	nop
 8005cf0:	46bd      	mov	sp, r7
 8005cf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cf6:	4770      	bx	lr
 8005cf8:	2000210e 	.word	0x2000210e

08005cfc <FuncO_MapEncoderPositionToSignalOutput>:
 *	@param pEncoderValue rotary encoder value
 *	@retval None
 *
 */
void FuncO_MapEncoderPositionToSignalOutput(uint16_t pEncoderValue)
{
 8005cfc:	b580      	push	{r7, lr}
 8005cfe:	b084      	sub	sp, #16
 8005d00:	af00      	add	r7, sp, #0
 8005d02:	4603      	mov	r3, r0
 8005d04:	80fb      	strh	r3, [r7, #6]
	eOutput_mode tmpFunc = SM_GetOutputChannel(SIGNAL_CHANNEL)->func_profile->func;
 8005d06:	2000      	movs	r0, #0
 8005d08:	f000 fe6a 	bl	80069e0 <SM_GetOutputChannel>
 8005d0c:	4603      	mov	r3, r0
 8005d0e:	f8d3 31e8 	ldr.w	r3, [r3, #488]	; 0x1e8
 8005d12:	781b      	ldrb	r3, [r3, #0]
 8005d14:	73fb      	strb	r3, [r7, #15]
	if(pEncoderValue > func_last_encoder_value)
 8005d16:	4b15      	ldr	r3, [pc, #84]	; (8005d6c <FuncO_MapEncoderPositionToSignalOutput+0x70>)
 8005d18:	881b      	ldrh	r3, [r3, #0]
 8005d1a:	88fa      	ldrh	r2, [r7, #6]
 8005d1c:	429a      	cmp	r2, r3
 8005d1e:	d90c      	bls.n	8005d3a <FuncO_MapEncoderPositionToSignalOutput+0x3e>
	{
		tmpFunc++;
 8005d20:	7bfb      	ldrb	r3, [r7, #15]
 8005d22:	3301      	adds	r3, #1
 8005d24:	73fb      	strb	r3, [r7, #15]
		if(tmpFunc > MAX_NUM_FUNC_PRESETS-2) tmpFunc = IMPULSE_FUNC_MODE;
 8005d26:	7bfb      	ldrb	r3, [r7, #15]
 8005d28:	2b05      	cmp	r3, #5
 8005d2a:	d901      	bls.n	8005d30 <FuncO_MapEncoderPositionToSignalOutput+0x34>
 8005d2c:	2305      	movs	r3, #5
 8005d2e:	73fb      	strb	r3, [r7, #15]
		FuncO_ApplyProfileToSignal(tmpFunc);
 8005d30:	7bfb      	ldrb	r3, [r7, #15]
 8005d32:	4618      	mov	r0, r3
 8005d34:	f000 f856 	bl	8005de4 <FuncO_ApplyProfileToSignal>
 8005d38:	e010      	b.n	8005d5c <FuncO_MapEncoderPositionToSignalOutput+0x60>
	}
	else if (pEncoderValue < func_last_encoder_value)
 8005d3a:	4b0c      	ldr	r3, [pc, #48]	; (8005d6c <FuncO_MapEncoderPositionToSignalOutput+0x70>)
 8005d3c:	881b      	ldrh	r3, [r3, #0]
 8005d3e:	88fa      	ldrh	r2, [r7, #6]
 8005d40:	429a      	cmp	r2, r3
 8005d42:	d20b      	bcs.n	8005d5c <FuncO_MapEncoderPositionToSignalOutput+0x60>
	{
		tmpFunc--;
 8005d44:	7bfb      	ldrb	r3, [r7, #15]
 8005d46:	3b01      	subs	r3, #1
 8005d48:	73fb      	strb	r3, [r7, #15]
		if(tmpFunc > MAX_NUM_FUNC_PRESETS-1) tmpFunc = SINE_FUNC_MODE;
 8005d4a:	7bfb      	ldrb	r3, [r7, #15]
 8005d4c:	2b06      	cmp	r3, #6
 8005d4e:	d901      	bls.n	8005d54 <FuncO_MapEncoderPositionToSignalOutput+0x58>
 8005d50:	2300      	movs	r3, #0
 8005d52:	73fb      	strb	r3, [r7, #15]
		FuncO_ApplyProfileToSignal(tmpFunc);
 8005d54:	7bfb      	ldrb	r3, [r7, #15]
 8005d56:	4618      	mov	r0, r3
 8005d58:	f000 f844 	bl	8005de4 <FuncO_ApplyProfileToSignal>
	}
	func_last_encoder_value = pEncoderValue;
 8005d5c:	4a03      	ldr	r2, [pc, #12]	; (8005d6c <FuncO_MapEncoderPositionToSignalOutput+0x70>)
 8005d5e:	88fb      	ldrh	r3, [r7, #6]
 8005d60:	8013      	strh	r3, [r2, #0]
}
 8005d62:	bf00      	nop
 8005d64:	3710      	adds	r7, #16
 8005d66:	46bd      	mov	sp, r7
 8005d68:	bd80      	pop	{r7, pc}
 8005d6a:	bf00      	nop
 8005d6c:	2000210e 	.word	0x2000210e

08005d70 <FuncO_MapEncoderPositionToAuxOutput>:
 *	@param pEncoderValue rotary encoder value
 *	@retval None
 *
 */
void FuncO_MapEncoderPositionToAuxOutput(uint16_t pEncoderValue)
{
 8005d70:	b580      	push	{r7, lr}
 8005d72:	b084      	sub	sp, #16
 8005d74:	af00      	add	r7, sp, #0
 8005d76:	4603      	mov	r3, r0
 8005d78:	80fb      	strh	r3, [r7, #6]
	eOutput_mode tmpFunc = SM_GetOutputChannel(AUX_CHANNEL)->func_profile->func;
 8005d7a:	2001      	movs	r0, #1
 8005d7c:	f000 fe30 	bl	80069e0 <SM_GetOutputChannel>
 8005d80:	4603      	mov	r3, r0
 8005d82:	f8d3 31e8 	ldr.w	r3, [r3, #488]	; 0x1e8
 8005d86:	781b      	ldrb	r3, [r3, #0]
 8005d88:	73fb      	strb	r3, [r7, #15]
	if(pEncoderValue > func_last_encoder_value)
 8005d8a:	4b15      	ldr	r3, [pc, #84]	; (8005de0 <FuncO_MapEncoderPositionToAuxOutput+0x70>)
 8005d8c:	881b      	ldrh	r3, [r3, #0]
 8005d8e:	88fa      	ldrh	r2, [r7, #6]
 8005d90:	429a      	cmp	r2, r3
 8005d92:	d90c      	bls.n	8005dae <FuncO_MapEncoderPositionToAuxOutput+0x3e>
	{
		tmpFunc++;
 8005d94:	7bfb      	ldrb	r3, [r7, #15]
 8005d96:	3301      	adds	r3, #1
 8005d98:	73fb      	strb	r3, [r7, #15]
		if(tmpFunc > MAX_NUM_FUNC_PRESETS-1) tmpFunc = PWM_FUNC_MODE;
 8005d9a:	7bfb      	ldrb	r3, [r7, #15]
 8005d9c:	2b06      	cmp	r3, #6
 8005d9e:	d901      	bls.n	8005da4 <FuncO_MapEncoderPositionToAuxOutput+0x34>
 8005da0:	2306      	movs	r3, #6
 8005da2:	73fb      	strb	r3, [r7, #15]
		FuncO_ApplyProfileToAux(tmpFunc);
 8005da4:	7bfb      	ldrb	r3, [r7, #15]
 8005da6:	4618      	mov	r0, r3
 8005da8:	f000 f880 	bl	8005eac <FuncO_ApplyProfileToAux>
 8005dac:	e010      	b.n	8005dd0 <FuncO_MapEncoderPositionToAuxOutput+0x60>
	}
	else if (pEncoderValue < func_last_encoder_value)
 8005dae:	4b0c      	ldr	r3, [pc, #48]	; (8005de0 <FuncO_MapEncoderPositionToAuxOutput+0x70>)
 8005db0:	881b      	ldrh	r3, [r3, #0]
 8005db2:	88fa      	ldrh	r2, [r7, #6]
 8005db4:	429a      	cmp	r2, r3
 8005db6:	d20b      	bcs.n	8005dd0 <FuncO_MapEncoderPositionToAuxOutput+0x60>
	{
		tmpFunc--;
 8005db8:	7bfb      	ldrb	r3, [r7, #15]
 8005dba:	3b01      	subs	r3, #1
 8005dbc:	73fb      	strb	r3, [r7, #15]
		if(tmpFunc > MAX_NUM_FUNC_PRESETS-1) tmpFunc = SINE_FUNC_MODE;
 8005dbe:	7bfb      	ldrb	r3, [r7, #15]
 8005dc0:	2b06      	cmp	r3, #6
 8005dc2:	d901      	bls.n	8005dc8 <FuncO_MapEncoderPositionToAuxOutput+0x58>
 8005dc4:	2300      	movs	r3, #0
 8005dc6:	73fb      	strb	r3, [r7, #15]
		FuncO_ApplyProfileToAux(tmpFunc);
 8005dc8:	7bfb      	ldrb	r3, [r7, #15]
 8005dca:	4618      	mov	r0, r3
 8005dcc:	f000 f86e 	bl	8005eac <FuncO_ApplyProfileToAux>
//		if(tmpFunc == SINE_FUNC_MODE)
//			ENCODER_TIMER->CNT = 20;
	}
	func_last_encoder_value = pEncoderValue;
 8005dd0:	4a03      	ldr	r2, [pc, #12]	; (8005de0 <FuncO_MapEncoderPositionToAuxOutput+0x70>)
 8005dd2:	88fb      	ldrh	r3, [r7, #6]
 8005dd4:	8013      	strh	r3, [r2, #0]
}
 8005dd6:	bf00      	nop
 8005dd8:	3710      	adds	r7, #16
 8005dda:	46bd      	mov	sp, r7
 8005ddc:	bd80      	pop	{r7, pc}
 8005dde:	bf00      	nop
 8005de0:	2000210e 	.word	0x2000210e

08005de4 <FuncO_ApplyProfileToSignal>:

 *	@retval None
 *
 */
void FuncO_ApplyProfileToSignal(eOutput_mode pPresetEnum)
{
 8005de4:	b590      	push	{r4, r7, lr}
 8005de6:	b087      	sub	sp, #28
 8005de8:	af02      	add	r7, sp, #8
 8005dea:	4603      	mov	r3, r0
 8005dec:	71fb      	strb	r3, [r7, #7]

		// set the next function output
		SM_GetOutputChannel(SIGNAL_CHANNEL)->func_profile = &theFuncProfiles[pPresetEnum];
 8005dee:	79fc      	ldrb	r4, [r7, #7]
 8005df0:	2000      	movs	r0, #0
 8005df2:	f000 fdf5 	bl	80069e0 <SM_GetOutputChannel>
 8005df6:	4601      	mov	r1, r0
 8005df8:	00e3      	lsls	r3, r4, #3
 8005dfa:	4a27      	ldr	r2, [pc, #156]	; (8005e98 <FuncO_ApplyProfileToSignal+0xb4>)
 8005dfc:	4413      	add	r3, r2
 8005dfe:	f8c1 31e8 	str.w	r3, [r1, #488]	; 0x1e8


		// copy the lookup table for the next output function in to SignalChannel object
		printf("SM_GetOutputChannel\n");
 8005e02:	4826      	ldr	r0, [pc, #152]	; (8005e9c <FuncO_ApplyProfileToSignal+0xb8>)
 8005e04:	f00c f972 	bl	80120ec <puts>
		SM_GetOutputChannel(SIGNAL_CHANNEL)->ref_lut_data = theFuncProfiles[pPresetEnum].lookup_table_data;
 8005e08:	79fc      	ldrb	r4, [r7, #7]
 8005e0a:	2000      	movs	r0, #0
 8005e0c:	f000 fde8 	bl	80069e0 <SM_GetOutputChannel>
 8005e10:	4601      	mov	r1, r0
 8005e12:	4a21      	ldr	r2, [pc, #132]	; (8005e98 <FuncO_ApplyProfileToSignal+0xb4>)
 8005e14:	00e3      	lsls	r3, r4, #3
 8005e16:	4413      	add	r3, r2
 8005e18:	685b      	ldr	r3, [r3, #4]
 8005e1a:	604b      	str	r3, [r1, #4]

		// set preset for PGA gain and dsp amplitude adjustment
		eAmpSettings_t eTmpVppPreset = SM_GetOutputChannel(SIGNAL_CHANNEL)->amp_profile->amp_setting;
 8005e1c:	2000      	movs	r0, #0
 8005e1e:	f000 fddf 	bl	80069e0 <SM_GetOutputChannel>
 8005e22:	4603      	mov	r3, r0
 8005e24:	f8d3 31ec 	ldr.w	r3, [r3, #492]	; 0x1ec
 8005e28:	781b      	ldrb	r3, [r3, #0]
 8005e2a:	73fb      	strb	r3, [r7, #15]
		VPP_ApplyProfileToSignal(eTmpVppPreset);
 8005e2c:	7bfb      	ldrb	r3, [r7, #15]
 8005e2e:	4618      	mov	r0, r3
 8005e30:	f001 f90c 	bl	800704c <VPP_ApplyProfileToSignal>

		// pause timer to reAux both outputs
		OUTPUT_TIMER->CR1 &= ~(TIM_CR1_CEN);
 8005e34:	4b1a      	ldr	r3, [pc, #104]	; (8005ea0 <FuncO_ApplyProfileToSignal+0xbc>)
 8005e36:	681b      	ldr	r3, [r3, #0]
 8005e38:	4a19      	ldr	r2, [pc, #100]	; (8005ea0 <FuncO_ApplyProfileToSignal+0xbc>)
 8005e3a:	f023 0301 	bic.w	r3, r3, #1
 8005e3e:	6013      	str	r3, [r2, #0]
		//HAL_TIM_Base_Stop(&htim8);

		// restart the DAC with the new data
		HAL_DAC_Stop_DMA(&hdac1, DAC1_CHANNEL_1);
 8005e40:	2100      	movs	r1, #0
 8005e42:	4818      	ldr	r0, [pc, #96]	; (8005ea4 <FuncO_ApplyProfileToSignal+0xc0>)
 8005e44:	f005 fb80 	bl	800b548 <HAL_DAC_Stop_DMA>
		HAL_DAC_Start_DMA(&hdac1, DAC1_CHANNEL_1, (uint32_t*)SM_GetOutputChannel(SIGNAL_CHANNEL)->dsp_lut_data, SINE_DATA_SIZE, DAC_ALIGN_12B_R);
 8005e48:	2000      	movs	r0, #0
 8005e4a:	f000 fdc9 	bl	80069e0 <SM_GetOutputChannel>
 8005e4e:	4603      	mov	r3, r0
 8005e50:	f103 0208 	add.w	r2, r3, #8
 8005e54:	2300      	movs	r3, #0
 8005e56:	9300      	str	r3, [sp, #0]
 8005e58:	2378      	movs	r3, #120	; 0x78
 8005e5a:	2100      	movs	r1, #0
 8005e5c:	4811      	ldr	r0, [pc, #68]	; (8005ea4 <FuncO_ApplyProfileToSignal+0xc0>)
 8005e5e:	f005 fab1 	bl	800b3c4 <HAL_DAC_Start_DMA>

		// restart the the other DAC
		HAL_DAC_Stop_DMA(&hdac2, DAC1_CHANNEL_1);
 8005e62:	2100      	movs	r1, #0
 8005e64:	4810      	ldr	r0, [pc, #64]	; (8005ea8 <FuncO_ApplyProfileToSignal+0xc4>)
 8005e66:	f005 fb6f 	bl	800b548 <HAL_DAC_Stop_DMA>
		HAL_DAC_Start_DMA(&hdac2, DAC1_CHANNEL_1, (uint32_t*)SM_GetOutputChannel(AUX_CHANNEL)->dsp_lut_data, SINE_DATA_SIZE, DAC_ALIGN_12B_R);
 8005e6a:	2001      	movs	r0, #1
 8005e6c:	f000 fdb8 	bl	80069e0 <SM_GetOutputChannel>
 8005e70:	4603      	mov	r3, r0
 8005e72:	f103 0208 	add.w	r2, r3, #8
 8005e76:	2300      	movs	r3, #0
 8005e78:	9300      	str	r3, [sp, #0]
 8005e7a:	2378      	movs	r3, #120	; 0x78
 8005e7c:	2100      	movs	r1, #0
 8005e7e:	480a      	ldr	r0, [pc, #40]	; (8005ea8 <FuncO_ApplyProfileToSignal+0xc4>)
 8005e80:	f005 faa0 	bl	800b3c4 <HAL_DAC_Start_DMA>

		// resume timer to reAux both outputs
		//HAL_TIM_Base_Start(&htim8);
		OUTPUT_TIMER->CR1 |= (TIM_CR1_CEN);
 8005e84:	4b06      	ldr	r3, [pc, #24]	; (8005ea0 <FuncO_ApplyProfileToSignal+0xbc>)
 8005e86:	681b      	ldr	r3, [r3, #0]
 8005e88:	4a05      	ldr	r2, [pc, #20]	; (8005ea0 <FuncO_ApplyProfileToSignal+0xbc>)
 8005e8a:	f043 0301 	orr.w	r3, r3, #1
 8005e8e:	6013      	str	r3, [r2, #0]



}
 8005e90:	bf00      	nop
 8005e92:	3714      	adds	r7, #20
 8005e94:	46bd      	mov	sp, r7
 8005e96:	bd90      	pop	{r4, r7, pc}
 8005e98:	20000128 	.word	0x20000128
 8005e9c:	08015ef8 	.word	0x08015ef8
 8005ea0:	40013400 	.word	0x40013400
 8005ea4:	2000292c 	.word	0x2000292c
 8005ea8:	20002918 	.word	0x20002918

08005eac <FuncO_ApplyProfileToAux>:

 *	@retval None
 *
 */
void FuncO_ApplyProfileToAux(eOutput_mode pPresetEnum)
{
 8005eac:	b590      	push	{r4, r7, lr}
 8005eae:	b087      	sub	sp, #28
 8005eb0:	af02      	add	r7, sp, #8
 8005eb2:	4603      	mov	r3, r0
 8005eb4:	71fb      	strb	r3, [r7, #7]
	HAL_StatusTypeDef res;

	// set the next output function
	SM_GetOutputChannel(AUX_CHANNEL)->func_profile = &theFuncProfiles[pPresetEnum];
 8005eb6:	79fc      	ldrb	r4, [r7, #7]
 8005eb8:	2001      	movs	r0, #1
 8005eba:	f000 fd91 	bl	80069e0 <SM_GetOutputChannel>
 8005ebe:	4601      	mov	r1, r0
 8005ec0:	00e3      	lsls	r3, r4, #3
 8005ec2:	4a96      	ldr	r2, [pc, #600]	; (800611c <FuncO_ApplyProfileToAux+0x270>)
 8005ec4:	4413      	add	r3, r2
 8005ec6:	f8c1 31e8 	str.w	r3, [r1, #488]	; 0x1e8


	if(pPresetEnum == PWM_FUNC_MODE)
 8005eca:	79fb      	ldrb	r3, [r7, #7]
 8005ecc:	2b06      	cmp	r3, #6
 8005ece:	d10a      	bne.n	8005ee6 <FuncO_ApplyProfileToAux+0x3a>
	{
		printf("FuncO_ApplyProfileToAux PWM_FUNC_MODE\n");
 8005ed0:	4893      	ldr	r0, [pc, #588]	; (8006120 <FuncO_ApplyProfileToAux+0x274>)
 8005ed2:	f00c f90b 	bl	80120ec <puts>
		// switch output signal from DAC to PWM

		SM_DisableDacToAux();
 8005ed6:	f000 ffeb 	bl	8006eb0 <SM_DisableDacToAux>
		SM_EnablePwmToAux();
 8005eda:	f000 fd97 	bl	8006a0c <SM_EnablePwmToAux>

		last_output_mode_was_pwm = 1;
 8005ede:	4b91      	ldr	r3, [pc, #580]	; (8006124 <FuncO_ApplyProfileToAux+0x278>)
 8005ee0:	2201      	movs	r2, #1
 8005ee2:	701a      	strb	r2, [r3, #0]
		res = HAL_TIM_Base_Start(&htim8);
		printf("Result:%u\n",res);
		//OUTPUT_TIMER->CR1 |= (TIM_CR1_CEN);
	}

}
 8005ee4:	e115      	b.n	8006112 <FuncO_ApplyProfileToAux+0x266>
	else if(last_output_mode_was_pwm)
 8005ee6:	4b8f      	ldr	r3, [pc, #572]	; (8006124 <FuncO_ApplyProfileToAux+0x278>)
 8005ee8:	781b      	ldrb	r3, [r3, #0]
 8005eea:	2b00      	cmp	r3, #0
 8005eec:	f000 808e 	beq.w	800600c <FuncO_ApplyProfileToAux+0x160>
		printf("FuncO_ApplyProfileToAux NOT PWM_FUNC_MODE\n");
 8005ef0:	488d      	ldr	r0, [pc, #564]	; (8006128 <FuncO_ApplyProfileToAux+0x27c>)
 8005ef2:	f00c f8fb 	bl	80120ec <puts>
		SM_DisablePwmToAux();
 8005ef6:	f000 fec5 	bl	8006c84 <SM_DisablePwmToAux>
		SM_EnableDacToAux();
 8005efa:	f000 feff 	bl	8006cfc <SM_EnableDacToAux>
		printf("FuncO_ApplyProfileToAux SM_GetOutputChannel\n");
 8005efe:	488b      	ldr	r0, [pc, #556]	; (800612c <FuncO_ApplyProfileToAux+0x280>)
 8005f00:	f00c f8f4 	bl	80120ec <puts>
		SM_GetOutputChannel(AUX_CHANNEL)->ref_lut_data = theFuncProfiles[pPresetEnum].lookup_table_data;
 8005f04:	79fc      	ldrb	r4, [r7, #7]
 8005f06:	2001      	movs	r0, #1
 8005f08:	f000 fd6a 	bl	80069e0 <SM_GetOutputChannel>
 8005f0c:	4601      	mov	r1, r0
 8005f0e:	4a83      	ldr	r2, [pc, #524]	; (800611c <FuncO_ApplyProfileToAux+0x270>)
 8005f10:	00e3      	lsls	r3, r4, #3
 8005f12:	4413      	add	r3, r2
 8005f14:	685b      	ldr	r3, [r3, #4]
 8005f16:	604b      	str	r3, [r1, #4]
		printf("FuncO_ApplyProfileToAux SM_GetOutputChannel\n");
 8005f18:	4884      	ldr	r0, [pc, #528]	; (800612c <FuncO_ApplyProfileToAux+0x280>)
 8005f1a:	f00c f8e7 	bl	80120ec <puts>
		eAmpSettings_t eTmpVppPreset = SM_GetOutputChannel(AUX_CHANNEL)->amp_profile->amp_setting;
 8005f1e:	2001      	movs	r0, #1
 8005f20:	f000 fd5e 	bl	80069e0 <SM_GetOutputChannel>
 8005f24:	4603      	mov	r3, r0
 8005f26:	f8d3 31ec 	ldr.w	r3, [r3, #492]	; 0x1ec
 8005f2a:	781b      	ldrb	r3, [r3, #0]
 8005f2c:	737b      	strb	r3, [r7, #13]
		printf("VPP_ApplyProfileToAux");
 8005f2e:	4880      	ldr	r0, [pc, #512]	; (8006130 <FuncO_ApplyProfileToAux+0x284>)
 8005f30:	f00c f868 	bl	8012004 <iprintf>
		VPP_ApplyProfileToAux(eTmpVppPreset);
 8005f34:	7b7b      	ldrb	r3, [r7, #13]
 8005f36:	4618      	mov	r0, r3
 8005f38:	f001 f8b6 	bl	80070a8 <VPP_ApplyProfileToAux>
		printf("FuncO_ApplyProfileToAux HAL_TIM_Base_Stop(&htim2)\n");
 8005f3c:	487d      	ldr	r0, [pc, #500]	; (8006134 <FuncO_ApplyProfileToAux+0x288>)
 8005f3e:	f00c f8d5 	bl	80120ec <puts>
		res = HAL_TIM_Base_Stop(&htim8);
 8005f42:	487d      	ldr	r0, [pc, #500]	; (8006138 <FuncO_ApplyProfileToAux+0x28c>)
 8005f44:	f007 fca6 	bl	800d894 <HAL_TIM_Base_Stop>
 8005f48:	4603      	mov	r3, r0
 8005f4a:	73bb      	strb	r3, [r7, #14]
		printf("Result:%u\n",res);
 8005f4c:	7bbb      	ldrb	r3, [r7, #14]
 8005f4e:	4619      	mov	r1, r3
 8005f50:	487a      	ldr	r0, [pc, #488]	; (800613c <FuncO_ApplyProfileToAux+0x290>)
 8005f52:	f00c f857 	bl	8012004 <iprintf>
		printf("FuncO_ApplyProfileToAux HAL_DAC_Stop_DMA(&hdac2, DAC1_CHANNEL_1)\n");
 8005f56:	487a      	ldr	r0, [pc, #488]	; (8006140 <FuncO_ApplyProfileToAux+0x294>)
 8005f58:	f00c f8c8 	bl	80120ec <puts>
		res = HAL_DAC_Stop_DMA(&hdac2, DAC1_CHANNEL_1);
 8005f5c:	2100      	movs	r1, #0
 8005f5e:	4879      	ldr	r0, [pc, #484]	; (8006144 <FuncO_ApplyProfileToAux+0x298>)
 8005f60:	f005 faf2 	bl	800b548 <HAL_DAC_Stop_DMA>
 8005f64:	4603      	mov	r3, r0
 8005f66:	73bb      	strb	r3, [r7, #14]
		printf("Result:%u\n",res);
 8005f68:	7bbb      	ldrb	r3, [r7, #14]
 8005f6a:	4619      	mov	r1, r3
 8005f6c:	4873      	ldr	r0, [pc, #460]	; (800613c <FuncO_ApplyProfileToAux+0x290>)
 8005f6e:	f00c f849 	bl	8012004 <iprintf>
		printf("FuncO_ApplyProfileToAux HAL_DAC_Start_DMA(&hdac2, DAC1_CHANNEL_1)\n");
 8005f72:	4875      	ldr	r0, [pc, #468]	; (8006148 <FuncO_ApplyProfileToAux+0x29c>)
 8005f74:	f00c f8ba 	bl	80120ec <puts>
		res = HAL_DAC_Start_DMA(&hdac2, DAC1_CHANNEL_1, (uint32_t*)SM_GetOutputChannel(AUX_CHANNEL)->dsp_lut_data, SINE_DATA_SIZE, DAC_ALIGN_12B_R);
 8005f78:	2001      	movs	r0, #1
 8005f7a:	f000 fd31 	bl	80069e0 <SM_GetOutputChannel>
 8005f7e:	4603      	mov	r3, r0
 8005f80:	f103 0208 	add.w	r2, r3, #8
 8005f84:	2300      	movs	r3, #0
 8005f86:	9300      	str	r3, [sp, #0]
 8005f88:	2378      	movs	r3, #120	; 0x78
 8005f8a:	2100      	movs	r1, #0
 8005f8c:	486d      	ldr	r0, [pc, #436]	; (8006144 <FuncO_ApplyProfileToAux+0x298>)
 8005f8e:	f005 fa19 	bl	800b3c4 <HAL_DAC_Start_DMA>
 8005f92:	4603      	mov	r3, r0
 8005f94:	73bb      	strb	r3, [r7, #14]
		printf("Result:%u\n",res);
 8005f96:	7bbb      	ldrb	r3, [r7, #14]
 8005f98:	4619      	mov	r1, r3
 8005f9a:	4868      	ldr	r0, [pc, #416]	; (800613c <FuncO_ApplyProfileToAux+0x290>)
 8005f9c:	f00c f832 	bl	8012004 <iprintf>
		printf("FuncO_ApplyProfileToAux HAL_DAC_Stop_DMA(&hdac1, DAC1_CHANNEL_1)\n");
 8005fa0:	486a      	ldr	r0, [pc, #424]	; (800614c <FuncO_ApplyProfileToAux+0x2a0>)
 8005fa2:	f00c f8a3 	bl	80120ec <puts>
		res = HAL_DAC_Stop_DMA(&hdac1, DAC1_CHANNEL_1);
 8005fa6:	2100      	movs	r1, #0
 8005fa8:	4869      	ldr	r0, [pc, #420]	; (8006150 <FuncO_ApplyProfileToAux+0x2a4>)
 8005faa:	f005 facd 	bl	800b548 <HAL_DAC_Stop_DMA>
 8005fae:	4603      	mov	r3, r0
 8005fb0:	73bb      	strb	r3, [r7, #14]
		printf("Result:%u\n",res);
 8005fb2:	7bbb      	ldrb	r3, [r7, #14]
 8005fb4:	4619      	mov	r1, r3
 8005fb6:	4861      	ldr	r0, [pc, #388]	; (800613c <FuncO_ApplyProfileToAux+0x290>)
 8005fb8:	f00c f824 	bl	8012004 <iprintf>
		printf("FuncO_ApplyProfileToAux HAL_DAC_Start_DMA(&hdac1, DAC1_CHANNEL_1)\n");
 8005fbc:	4865      	ldr	r0, [pc, #404]	; (8006154 <FuncO_ApplyProfileToAux+0x2a8>)
 8005fbe:	f00c f895 	bl	80120ec <puts>
		res = HAL_DAC_Start_DMA(&hdac1, DAC1_CHANNEL_1, (uint32_t*)SM_GetOutputChannel(SIGNAL_CHANNEL)->dsp_lut_data, SINE_DATA_SIZE, DAC_ALIGN_12B_R);
 8005fc2:	2000      	movs	r0, #0
 8005fc4:	f000 fd0c 	bl	80069e0 <SM_GetOutputChannel>
 8005fc8:	4603      	mov	r3, r0
 8005fca:	f103 0208 	add.w	r2, r3, #8
 8005fce:	2300      	movs	r3, #0
 8005fd0:	9300      	str	r3, [sp, #0]
 8005fd2:	2378      	movs	r3, #120	; 0x78
 8005fd4:	2100      	movs	r1, #0
 8005fd6:	485e      	ldr	r0, [pc, #376]	; (8006150 <FuncO_ApplyProfileToAux+0x2a4>)
 8005fd8:	f005 f9f4 	bl	800b3c4 <HAL_DAC_Start_DMA>
 8005fdc:	4603      	mov	r3, r0
 8005fde:	73bb      	strb	r3, [r7, #14]
		printf("Result:%u\n",res);
 8005fe0:	7bbb      	ldrb	r3, [r7, #14]
 8005fe2:	4619      	mov	r1, r3
 8005fe4:	4855      	ldr	r0, [pc, #340]	; (800613c <FuncO_ApplyProfileToAux+0x290>)
 8005fe6:	f00c f80d 	bl	8012004 <iprintf>
		printf("FuncO_ApplyProfileToAux HAL_TIM_Base_Start(&htim2)\n");
 8005fea:	485b      	ldr	r0, [pc, #364]	; (8006158 <FuncO_ApplyProfileToAux+0x2ac>)
 8005fec:	f00c f87e 	bl	80120ec <puts>
		res = HAL_TIM_Base_Start(&htim8);
 8005ff0:	4851      	ldr	r0, [pc, #324]	; (8006138 <FuncO_ApplyProfileToAux+0x28c>)
 8005ff2:	f007 fc21 	bl	800d838 <HAL_TIM_Base_Start>
 8005ff6:	4603      	mov	r3, r0
 8005ff8:	73bb      	strb	r3, [r7, #14]
		printf("Result:%u\n",res);
 8005ffa:	7bbb      	ldrb	r3, [r7, #14]
 8005ffc:	4619      	mov	r1, r3
 8005ffe:	484f      	ldr	r0, [pc, #316]	; (800613c <FuncO_ApplyProfileToAux+0x290>)
 8006000:	f00c f800 	bl	8012004 <iprintf>
		last_output_mode_was_pwm = 0;
 8006004:	4b47      	ldr	r3, [pc, #284]	; (8006124 <FuncO_ApplyProfileToAux+0x278>)
 8006006:	2200      	movs	r2, #0
 8006008:	701a      	strb	r2, [r3, #0]
}
 800600a:	e082      	b.n	8006112 <FuncO_ApplyProfileToAux+0x266>
		printf("FuncO_ApplyProfileToAux SM_GetOutputChannel\n");
 800600c:	4847      	ldr	r0, [pc, #284]	; (800612c <FuncO_ApplyProfileToAux+0x280>)
 800600e:	f00c f86d 	bl	80120ec <puts>
		SM_GetOutputChannel(AUX_CHANNEL)->ref_lut_data = theFuncProfiles[pPresetEnum].lookup_table_data;
 8006012:	79fc      	ldrb	r4, [r7, #7]
 8006014:	2001      	movs	r0, #1
 8006016:	f000 fce3 	bl	80069e0 <SM_GetOutputChannel>
 800601a:	4601      	mov	r1, r0
 800601c:	4a3f      	ldr	r2, [pc, #252]	; (800611c <FuncO_ApplyProfileToAux+0x270>)
 800601e:	00e3      	lsls	r3, r4, #3
 8006020:	4413      	add	r3, r2
 8006022:	685b      	ldr	r3, [r3, #4]
 8006024:	604b      	str	r3, [r1, #4]
		printf("FuncO_ApplyProfileToAux SM_GetOutputChannel\n");
 8006026:	4841      	ldr	r0, [pc, #260]	; (800612c <FuncO_ApplyProfileToAux+0x280>)
 8006028:	f00c f860 	bl	80120ec <puts>
		eAmpSettings_t eTmpVppPreset = SM_GetOutputChannel(AUX_CHANNEL)->amp_profile->amp_setting;
 800602c:	2001      	movs	r0, #1
 800602e:	f000 fcd7 	bl	80069e0 <SM_GetOutputChannel>
 8006032:	4603      	mov	r3, r0
 8006034:	f8d3 31ec 	ldr.w	r3, [r3, #492]	; 0x1ec
 8006038:	781b      	ldrb	r3, [r3, #0]
 800603a:	73fb      	strb	r3, [r7, #15]
		printf("VPP_ApplyProfileToAux");
 800603c:	483c      	ldr	r0, [pc, #240]	; (8006130 <FuncO_ApplyProfileToAux+0x284>)
 800603e:	f00b ffe1 	bl	8012004 <iprintf>
		VPP_ApplyProfileToAux(eTmpVppPreset);
 8006042:	7bfb      	ldrb	r3, [r7, #15]
 8006044:	4618      	mov	r0, r3
 8006046:	f001 f82f 	bl	80070a8 <VPP_ApplyProfileToAux>
		printf("FuncO_ApplyProfileToAux HAL_TIM_Base_Stop(&htim2)\n");
 800604a:	483a      	ldr	r0, [pc, #232]	; (8006134 <FuncO_ApplyProfileToAux+0x288>)
 800604c:	f00c f84e 	bl	80120ec <puts>
		res = HAL_TIM_Base_Stop(&htim8);
 8006050:	4839      	ldr	r0, [pc, #228]	; (8006138 <FuncO_ApplyProfileToAux+0x28c>)
 8006052:	f007 fc1f 	bl	800d894 <HAL_TIM_Base_Stop>
 8006056:	4603      	mov	r3, r0
 8006058:	73bb      	strb	r3, [r7, #14]
		printf("Result:%u\n",res);
 800605a:	7bbb      	ldrb	r3, [r7, #14]
 800605c:	4619      	mov	r1, r3
 800605e:	4837      	ldr	r0, [pc, #220]	; (800613c <FuncO_ApplyProfileToAux+0x290>)
 8006060:	f00b ffd0 	bl	8012004 <iprintf>
		printf("FuncO_ApplyProfileToAux HAL_DAC_Stop_DMA(&hdac2, DAC1_CHANNEL_1)\n");
 8006064:	4836      	ldr	r0, [pc, #216]	; (8006140 <FuncO_ApplyProfileToAux+0x294>)
 8006066:	f00c f841 	bl	80120ec <puts>
		res = HAL_DAC_Stop_DMA(&hdac2, DAC1_CHANNEL_1);
 800606a:	2100      	movs	r1, #0
 800606c:	4835      	ldr	r0, [pc, #212]	; (8006144 <FuncO_ApplyProfileToAux+0x298>)
 800606e:	f005 fa6b 	bl	800b548 <HAL_DAC_Stop_DMA>
 8006072:	4603      	mov	r3, r0
 8006074:	73bb      	strb	r3, [r7, #14]
		printf("Result:%u\n",res);
 8006076:	7bbb      	ldrb	r3, [r7, #14]
 8006078:	4619      	mov	r1, r3
 800607a:	4830      	ldr	r0, [pc, #192]	; (800613c <FuncO_ApplyProfileToAux+0x290>)
 800607c:	f00b ffc2 	bl	8012004 <iprintf>
		printf("FuncO_ApplyProfileToAux HAL_DAC_Start_DMA(&hdac2, DAC1_CHANNEL_1)\n");
 8006080:	4831      	ldr	r0, [pc, #196]	; (8006148 <FuncO_ApplyProfileToAux+0x29c>)
 8006082:	f00c f833 	bl	80120ec <puts>
		res = HAL_DAC_Start_DMA(&hdac2, DAC1_CHANNEL_1, (uint32_t*)SM_GetOutputChannel(AUX_CHANNEL)->dsp_lut_data, SINE_DATA_SIZE, DAC_ALIGN_12B_R);
 8006086:	2001      	movs	r0, #1
 8006088:	f000 fcaa 	bl	80069e0 <SM_GetOutputChannel>
 800608c:	4603      	mov	r3, r0
 800608e:	f103 0208 	add.w	r2, r3, #8
 8006092:	2300      	movs	r3, #0
 8006094:	9300      	str	r3, [sp, #0]
 8006096:	2378      	movs	r3, #120	; 0x78
 8006098:	2100      	movs	r1, #0
 800609a:	482a      	ldr	r0, [pc, #168]	; (8006144 <FuncO_ApplyProfileToAux+0x298>)
 800609c:	f005 f992 	bl	800b3c4 <HAL_DAC_Start_DMA>
 80060a0:	4603      	mov	r3, r0
 80060a2:	73bb      	strb	r3, [r7, #14]
		printf("Result:%u\n",res);
 80060a4:	7bbb      	ldrb	r3, [r7, #14]
 80060a6:	4619      	mov	r1, r3
 80060a8:	4824      	ldr	r0, [pc, #144]	; (800613c <FuncO_ApplyProfileToAux+0x290>)
 80060aa:	f00b ffab 	bl	8012004 <iprintf>
		printf("FuncO_ApplyProfileToAux HAL_DAC_Stop_DMA(&hdac1, DAC1_CHANNEL_1)\n");
 80060ae:	4827      	ldr	r0, [pc, #156]	; (800614c <FuncO_ApplyProfileToAux+0x2a0>)
 80060b0:	f00c f81c 	bl	80120ec <puts>
		res = HAL_DAC_Stop_DMA(&hdac1, DAC1_CHANNEL_1);
 80060b4:	2100      	movs	r1, #0
 80060b6:	4826      	ldr	r0, [pc, #152]	; (8006150 <FuncO_ApplyProfileToAux+0x2a4>)
 80060b8:	f005 fa46 	bl	800b548 <HAL_DAC_Stop_DMA>
 80060bc:	4603      	mov	r3, r0
 80060be:	73bb      	strb	r3, [r7, #14]
		printf("Result:%u\n",res);
 80060c0:	7bbb      	ldrb	r3, [r7, #14]
 80060c2:	4619      	mov	r1, r3
 80060c4:	481d      	ldr	r0, [pc, #116]	; (800613c <FuncO_ApplyProfileToAux+0x290>)
 80060c6:	f00b ff9d 	bl	8012004 <iprintf>
		printf("FuncO_ApplyProfileToAux HAL_DAC_Start_DMA(&hdac1, DAC1_CHANNEL_1)\n");
 80060ca:	4822      	ldr	r0, [pc, #136]	; (8006154 <FuncO_ApplyProfileToAux+0x2a8>)
 80060cc:	f00c f80e 	bl	80120ec <puts>
		res = HAL_DAC_Start_DMA(&hdac1, DAC1_CHANNEL_1, (uint32_t*)SM_GetOutputChannel(SIGNAL_CHANNEL)->dsp_lut_data, SINE_DATA_SIZE, DAC_ALIGN_12B_R);
 80060d0:	2000      	movs	r0, #0
 80060d2:	f000 fc85 	bl	80069e0 <SM_GetOutputChannel>
 80060d6:	4603      	mov	r3, r0
 80060d8:	f103 0208 	add.w	r2, r3, #8
 80060dc:	2300      	movs	r3, #0
 80060de:	9300      	str	r3, [sp, #0]
 80060e0:	2378      	movs	r3, #120	; 0x78
 80060e2:	2100      	movs	r1, #0
 80060e4:	481a      	ldr	r0, [pc, #104]	; (8006150 <FuncO_ApplyProfileToAux+0x2a4>)
 80060e6:	f005 f96d 	bl	800b3c4 <HAL_DAC_Start_DMA>
 80060ea:	4603      	mov	r3, r0
 80060ec:	73bb      	strb	r3, [r7, #14]
		printf("Result:%u\n",res);
 80060ee:	7bbb      	ldrb	r3, [r7, #14]
 80060f0:	4619      	mov	r1, r3
 80060f2:	4812      	ldr	r0, [pc, #72]	; (800613c <FuncO_ApplyProfileToAux+0x290>)
 80060f4:	f00b ff86 	bl	8012004 <iprintf>
		printf("FuncO_ApplyProfileToAux HAL_TIM_Base_Start(&htim2)\n");
 80060f8:	4817      	ldr	r0, [pc, #92]	; (8006158 <FuncO_ApplyProfileToAux+0x2ac>)
 80060fa:	f00b fff7 	bl	80120ec <puts>
		res = HAL_TIM_Base_Start(&htim8);
 80060fe:	480e      	ldr	r0, [pc, #56]	; (8006138 <FuncO_ApplyProfileToAux+0x28c>)
 8006100:	f007 fb9a 	bl	800d838 <HAL_TIM_Base_Start>
 8006104:	4603      	mov	r3, r0
 8006106:	73bb      	strb	r3, [r7, #14]
		printf("Result:%u\n",res);
 8006108:	7bbb      	ldrb	r3, [r7, #14]
 800610a:	4619      	mov	r1, r3
 800610c:	480b      	ldr	r0, [pc, #44]	; (800613c <FuncO_ApplyProfileToAux+0x290>)
 800610e:	f00b ff79 	bl	8012004 <iprintf>
}
 8006112:	bf00      	nop
 8006114:	3714      	adds	r7, #20
 8006116:	46bd      	mov	sp, r7
 8006118:	bd90      	pop	{r4, r7, pc}
 800611a:	bf00      	nop
 800611c:	20000128 	.word	0x20000128
 8006120:	08015f0c 	.word	0x08015f0c
 8006124:	2000210c 	.word	0x2000210c
 8006128:	08015f34 	.word	0x08015f34
 800612c:	08015f60 	.word	0x08015f60
 8006130:	08015f8c 	.word	0x08015f8c
 8006134:	08015fa4 	.word	0x08015fa4
 8006138:	20002a64 	.word	0x20002a64
 800613c:	08015fd8 	.word	0x08015fd8
 8006140:	08015fe4 	.word	0x08015fe4
 8006144:	20002918 	.word	0x20002918
 8006148:	08016028 	.word	0x08016028
 800614c:	0801606c 	.word	0x0801606c
 8006150:	2000292c 	.word	0x2000292c
 8006154:	080160b0 	.word	0x080160b0
 8006158:	080160f4 	.word	0x080160f4

0800615c <GO_ResetLastEncoderValue>:
 *	@param None
 *	@retval None
 *
 */
void GO_ResetLastEncoderValue()
{
 800615c:	b480      	push	{r7}
 800615e:	af00      	add	r7, sp, #0
	gain_last_encoder_value = 0;
 8006160:	4b03      	ldr	r3, [pc, #12]	; (8006170 <GO_ResetLastEncoderValue+0x14>)
 8006162:	2200      	movs	r2, #0
 8006164:	801a      	strh	r2, [r3, #0]
}
 8006166:	bf00      	nop
 8006168:	46bd      	mov	sp, r7
 800616a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800616e:	4770      	bx	lr
 8006170:	20002110 	.word	0x20002110

08006174 <GO_MapEncoderPositionToSignalOutput>:
 *	@param None
 *	@retval None
 *
 */
void GO_MapEncoderPositionToSignalOutput(uint16_t pEncoderValue)
{
 8006174:	b580      	push	{r7, lr}
 8006176:	b084      	sub	sp, #16
 8006178:	af00      	add	r7, sp, #0
 800617a:	4603      	mov	r3, r0
 800617c:	80fb      	strh	r3, [r7, #6]
	eGainSettings_t temp_gain = SM_GetOutputChannel(SIGNAL_CHANNEL)->gain_profile->gain;
 800617e:	2000      	movs	r0, #0
 8006180:	f000 fc2e 	bl	80069e0 <SM_GetOutputChannel>
 8006184:	4603      	mov	r3, r0
 8006186:	f8d3 31f0 	ldr.w	r3, [r3, #496]	; 0x1f0
 800618a:	781b      	ldrb	r3, [r3, #0]
 800618c:	73fb      	strb	r3, [r7, #15]
	if(pEncoderValue > gain_last_encoder_value)
 800618e:	4b15      	ldr	r3, [pc, #84]	; (80061e4 <GO_MapEncoderPositionToSignalOutput+0x70>)
 8006190:	881b      	ldrh	r3, [r3, #0]
 8006192:	88fa      	ldrh	r2, [r7, #6]
 8006194:	429a      	cmp	r2, r3
 8006196:	d90c      	bls.n	80061b2 <GO_MapEncoderPositionToSignalOutput+0x3e>
	{
		temp_gain++;
 8006198:	7bfb      	ldrb	r3, [r7, #15]
 800619a:	3301      	adds	r3, #1
 800619c:	73fb      	strb	r3, [r7, #15]
		if(temp_gain > MAX_NUM_GAIN_PRESETS-1) temp_gain = SEVEN_GAIN;
 800619e:	7bfb      	ldrb	r3, [r7, #15]
 80061a0:	2b07      	cmp	r3, #7
 80061a2:	d901      	bls.n	80061a8 <GO_MapEncoderPositionToSignalOutput+0x34>
 80061a4:	2307      	movs	r3, #7
 80061a6:	73fb      	strb	r3, [r7, #15]
		GO_ApplyPresetToSignal(temp_gain);
 80061a8:	7bfb      	ldrb	r3, [r7, #15]
 80061aa:	4618      	mov	r0, r3
 80061ac:	f000 f81c 	bl	80061e8 <GO_ApplyPresetToSignal>
 80061b0:	e010      	b.n	80061d4 <GO_MapEncoderPositionToSignalOutput+0x60>

	}
	else if (pEncoderValue < gain_last_encoder_value)
 80061b2:	4b0c      	ldr	r3, [pc, #48]	; (80061e4 <GO_MapEncoderPositionToSignalOutput+0x70>)
 80061b4:	881b      	ldrh	r3, [r3, #0]
 80061b6:	88fa      	ldrh	r2, [r7, #6]
 80061b8:	429a      	cmp	r2, r3
 80061ba:	d20b      	bcs.n	80061d4 <GO_MapEncoderPositionToSignalOutput+0x60>
	{
		temp_gain--;
 80061bc:	7bfb      	ldrb	r3, [r7, #15]
 80061be:	3b01      	subs	r3, #1
 80061c0:	73fb      	strb	r3, [r7, #15]
		if(temp_gain > MAX_NUM_GAIN_PRESETS-1) temp_gain = ZERO_GAIN;
 80061c2:	7bfb      	ldrb	r3, [r7, #15]
 80061c4:	2b07      	cmp	r3, #7
 80061c6:	d901      	bls.n	80061cc <GO_MapEncoderPositionToSignalOutput+0x58>
 80061c8:	2300      	movs	r3, #0
 80061ca:	73fb      	strb	r3, [r7, #15]
		GO_ApplyPresetToSignal(temp_gain);
 80061cc:	7bfb      	ldrb	r3, [r7, #15]
 80061ce:	4618      	mov	r0, r3
 80061d0:	f000 f80a 	bl	80061e8 <GO_ApplyPresetToSignal>
	}
	gain_last_encoder_value = pEncoderValue;
 80061d4:	4a03      	ldr	r2, [pc, #12]	; (80061e4 <GO_MapEncoderPositionToSignalOutput+0x70>)
 80061d6:	88fb      	ldrh	r3, [r7, #6]
 80061d8:	8013      	strh	r3, [r2, #0]

	// artifically offset PWM signal above DC
	//BO_SetPwmSignalOffsetForGain(temp_gain);

}
 80061da:	bf00      	nop
 80061dc:	3710      	adds	r7, #16
 80061de:	46bd      	mov	sp, r7
 80061e0:	bd80      	pop	{r7, pc}
 80061e2:	bf00      	nop
 80061e4:	20002110 	.word	0x20002110

080061e8 <GO_ApplyPresetToSignal>:
 *	@param None
 *	@retval None
 *
 */
void GO_ApplyPresetToSignal(eGainSettings_t pPresetEnum)
{
 80061e8:	b590      	push	{r4, r7, lr}
 80061ea:	b083      	sub	sp, #12
 80061ec:	af00      	add	r7, sp, #0
 80061ee:	4603      	mov	r3, r0
 80061f0:	71fb      	strb	r3, [r7, #7]




	SM_GetOutputChannel(SIGNAL_CHANNEL)->gain_profile = &theGainProfiles[pPresetEnum];
 80061f2:	79fc      	ldrb	r4, [r7, #7]
 80061f4:	2000      	movs	r0, #0
 80061f6:	f000 fbf3 	bl	80069e0 <SM_GetOutputChannel>
 80061fa:	4601      	mov	r1, r0
 80061fc:	4623      	mov	r3, r4
 80061fe:	005b      	lsls	r3, r3, #1
 8006200:	4423      	add	r3, r4
 8006202:	4a4f      	ldr	r2, [pc, #316]	; (8006340 <GO_ApplyPresetToSignal+0x158>)
 8006204:	4413      	add	r3, r2
 8006206:	f8c1 31f0 	str.w	r3, [r1, #496]	; 0x1f0

	switch(pPresetEnum)
 800620a:	79fb      	ldrb	r3, [r7, #7]
 800620c:	2b07      	cmp	r3, #7
 800620e:	f200 8093 	bhi.w	8006338 <GO_ApplyPresetToSignal+0x150>
 8006212:	a201      	add	r2, pc, #4	; (adr r2, 8006218 <GO_ApplyPresetToSignal+0x30>)
 8006214:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006218:	08006239 	.word	0x08006239
 800621c:	08006259 	.word	0x08006259
 8006220:	08006279 	.word	0x08006279
 8006224:	08006299 	.word	0x08006299
 8006228:	080062b9 	.word	0x080062b9
 800622c:	080062d9 	.word	0x080062d9
 8006230:	080062f9 	.word	0x080062f9
 8006234:	08006319 	.word	0x08006319
	{
		case ZERO_GAIN:
			HAL_GPIO_WritePin(CH1_GAIN_A_GPIO_Port, CH1_GAIN_A_Pin, GPIO_PIN_RESET);
 8006238:	2200      	movs	r2, #0
 800623a:	2101      	movs	r1, #1
 800623c:	4841      	ldr	r0, [pc, #260]	; (8006344 <GO_ApplyPresetToSignal+0x15c>)
 800623e:	f006 fa01 	bl	800c644 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(CH1_GAIN_B_GPIO_Port, CH1_GAIN_B_Pin, GPIO_PIN_RESET);
 8006242:	2200      	movs	r2, #0
 8006244:	2120      	movs	r1, #32
 8006246:	4840      	ldr	r0, [pc, #256]	; (8006348 <GO_ApplyPresetToSignal+0x160>)
 8006248:	f006 f9fc 	bl	800c644 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(CH1_GAIN_C_GPIO_Port, CH1_GAIN_C_Pin, GPIO_PIN_RESET);
 800624c:	2200      	movs	r2, #0
 800624e:	2110      	movs	r1, #16
 8006250:	483d      	ldr	r0, [pc, #244]	; (8006348 <GO_ApplyPresetToSignal+0x160>)
 8006252:	f006 f9f7 	bl	800c644 <HAL_GPIO_WritePin>
			break;
 8006256:	e06f      	b.n	8006338 <GO_ApplyPresetToSignal+0x150>

		case ONE_GAIN:
			HAL_GPIO_WritePin(CH1_GAIN_A_GPIO_Port, CH1_GAIN_A_Pin, GPIO_PIN_SET);
 8006258:	2201      	movs	r2, #1
 800625a:	2101      	movs	r1, #1
 800625c:	4839      	ldr	r0, [pc, #228]	; (8006344 <GO_ApplyPresetToSignal+0x15c>)
 800625e:	f006 f9f1 	bl	800c644 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(CH1_GAIN_B_GPIO_Port, CH1_GAIN_B_Pin, GPIO_PIN_RESET);
 8006262:	2200      	movs	r2, #0
 8006264:	2120      	movs	r1, #32
 8006266:	4838      	ldr	r0, [pc, #224]	; (8006348 <GO_ApplyPresetToSignal+0x160>)
 8006268:	f006 f9ec 	bl	800c644 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(CH1_GAIN_C_GPIO_Port, CH1_GAIN_C_Pin, GPIO_PIN_RESET);
 800626c:	2200      	movs	r2, #0
 800626e:	2110      	movs	r1, #16
 8006270:	4835      	ldr	r0, [pc, #212]	; (8006348 <GO_ApplyPresetToSignal+0x160>)
 8006272:	f006 f9e7 	bl	800c644 <HAL_GPIO_WritePin>
			break;
 8006276:	e05f      	b.n	8006338 <GO_ApplyPresetToSignal+0x150>

		case TWO_GAIN:
			HAL_GPIO_WritePin(CH1_GAIN_A_GPIO_Port, CH1_GAIN_A_Pin, GPIO_PIN_RESET);
 8006278:	2200      	movs	r2, #0
 800627a:	2101      	movs	r1, #1
 800627c:	4831      	ldr	r0, [pc, #196]	; (8006344 <GO_ApplyPresetToSignal+0x15c>)
 800627e:	f006 f9e1 	bl	800c644 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(CH1_GAIN_B_GPIO_Port, CH1_GAIN_B_Pin, GPIO_PIN_SET);
 8006282:	2201      	movs	r2, #1
 8006284:	2120      	movs	r1, #32
 8006286:	4830      	ldr	r0, [pc, #192]	; (8006348 <GO_ApplyPresetToSignal+0x160>)
 8006288:	f006 f9dc 	bl	800c644 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(CH1_GAIN_C_GPIO_Port, CH1_GAIN_C_Pin, GPIO_PIN_RESET);
 800628c:	2200      	movs	r2, #0
 800628e:	2110      	movs	r1, #16
 8006290:	482d      	ldr	r0, [pc, #180]	; (8006348 <GO_ApplyPresetToSignal+0x160>)
 8006292:	f006 f9d7 	bl	800c644 <HAL_GPIO_WritePin>
			break;
 8006296:	e04f      	b.n	8006338 <GO_ApplyPresetToSignal+0x150>

		case THREE_GAIN:
			HAL_GPIO_WritePin(CH1_GAIN_A_GPIO_Port, CH1_GAIN_A_Pin, GPIO_PIN_SET);
 8006298:	2201      	movs	r2, #1
 800629a:	2101      	movs	r1, #1
 800629c:	4829      	ldr	r0, [pc, #164]	; (8006344 <GO_ApplyPresetToSignal+0x15c>)
 800629e:	f006 f9d1 	bl	800c644 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(CH1_GAIN_B_GPIO_Port, CH1_GAIN_B_Pin, GPIO_PIN_SET);
 80062a2:	2201      	movs	r2, #1
 80062a4:	2120      	movs	r1, #32
 80062a6:	4828      	ldr	r0, [pc, #160]	; (8006348 <GO_ApplyPresetToSignal+0x160>)
 80062a8:	f006 f9cc 	bl	800c644 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(CH1_GAIN_C_GPIO_Port, CH1_GAIN_C_Pin, GPIO_PIN_RESET);
 80062ac:	2200      	movs	r2, #0
 80062ae:	2110      	movs	r1, #16
 80062b0:	4825      	ldr	r0, [pc, #148]	; (8006348 <GO_ApplyPresetToSignal+0x160>)
 80062b2:	f006 f9c7 	bl	800c644 <HAL_GPIO_WritePin>
			break;
 80062b6:	e03f      	b.n	8006338 <GO_ApplyPresetToSignal+0x150>

		case FOUR_GAIN:
			HAL_GPIO_WritePin(CH1_GAIN_A_GPIO_Port, CH1_GAIN_A_Pin, GPIO_PIN_RESET);
 80062b8:	2200      	movs	r2, #0
 80062ba:	2101      	movs	r1, #1
 80062bc:	4821      	ldr	r0, [pc, #132]	; (8006344 <GO_ApplyPresetToSignal+0x15c>)
 80062be:	f006 f9c1 	bl	800c644 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(CH1_GAIN_B_GPIO_Port, CH1_GAIN_B_Pin, GPIO_PIN_RESET);
 80062c2:	2200      	movs	r2, #0
 80062c4:	2120      	movs	r1, #32
 80062c6:	4820      	ldr	r0, [pc, #128]	; (8006348 <GO_ApplyPresetToSignal+0x160>)
 80062c8:	f006 f9bc 	bl	800c644 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(CH1_GAIN_C_GPIO_Port, CH1_GAIN_C_Pin, GPIO_PIN_SET);
 80062cc:	2201      	movs	r2, #1
 80062ce:	2110      	movs	r1, #16
 80062d0:	481d      	ldr	r0, [pc, #116]	; (8006348 <GO_ApplyPresetToSignal+0x160>)
 80062d2:	f006 f9b7 	bl	800c644 <HAL_GPIO_WritePin>
			break;
 80062d6:	e02f      	b.n	8006338 <GO_ApplyPresetToSignal+0x150>

		case FIVE_GAIN:
			HAL_GPIO_WritePin(CH1_GAIN_A_GPIO_Port, CH1_GAIN_A_Pin, GPIO_PIN_SET);
 80062d8:	2201      	movs	r2, #1
 80062da:	2101      	movs	r1, #1
 80062dc:	4819      	ldr	r0, [pc, #100]	; (8006344 <GO_ApplyPresetToSignal+0x15c>)
 80062de:	f006 f9b1 	bl	800c644 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(CH1_GAIN_B_GPIO_Port, CH1_GAIN_B_Pin, GPIO_PIN_RESET);
 80062e2:	2200      	movs	r2, #0
 80062e4:	2120      	movs	r1, #32
 80062e6:	4818      	ldr	r0, [pc, #96]	; (8006348 <GO_ApplyPresetToSignal+0x160>)
 80062e8:	f006 f9ac 	bl	800c644 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(CH1_GAIN_C_GPIO_Port, CH1_GAIN_C_Pin, GPIO_PIN_SET);
 80062ec:	2201      	movs	r2, #1
 80062ee:	2110      	movs	r1, #16
 80062f0:	4815      	ldr	r0, [pc, #84]	; (8006348 <GO_ApplyPresetToSignal+0x160>)
 80062f2:	f006 f9a7 	bl	800c644 <HAL_GPIO_WritePin>
			break;
 80062f6:	e01f      	b.n	8006338 <GO_ApplyPresetToSignal+0x150>

		case SIX_GAIN:
			HAL_GPIO_WritePin(CH1_GAIN_A_GPIO_Port, CH1_GAIN_A_Pin, GPIO_PIN_RESET);
 80062f8:	2200      	movs	r2, #0
 80062fa:	2101      	movs	r1, #1
 80062fc:	4811      	ldr	r0, [pc, #68]	; (8006344 <GO_ApplyPresetToSignal+0x15c>)
 80062fe:	f006 f9a1 	bl	800c644 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(CH1_GAIN_B_GPIO_Port, CH1_GAIN_B_Pin, GPIO_PIN_SET);
 8006302:	2201      	movs	r2, #1
 8006304:	2120      	movs	r1, #32
 8006306:	4810      	ldr	r0, [pc, #64]	; (8006348 <GO_ApplyPresetToSignal+0x160>)
 8006308:	f006 f99c 	bl	800c644 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(CH1_GAIN_C_GPIO_Port, CH1_GAIN_C_Pin, GPIO_PIN_SET);
 800630c:	2201      	movs	r2, #1
 800630e:	2110      	movs	r1, #16
 8006310:	480d      	ldr	r0, [pc, #52]	; (8006348 <GO_ApplyPresetToSignal+0x160>)
 8006312:	f006 f997 	bl	800c644 <HAL_GPIO_WritePin>
			break;
 8006316:	e00f      	b.n	8006338 <GO_ApplyPresetToSignal+0x150>

		case SEVEN_GAIN:
			HAL_GPIO_WritePin(CH1_GAIN_A_GPIO_Port, CH1_GAIN_A_Pin, GPIO_PIN_SET);
 8006318:	2201      	movs	r2, #1
 800631a:	2101      	movs	r1, #1
 800631c:	4809      	ldr	r0, [pc, #36]	; (8006344 <GO_ApplyPresetToSignal+0x15c>)
 800631e:	f006 f991 	bl	800c644 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(CH1_GAIN_B_GPIO_Port, CH1_GAIN_B_Pin, GPIO_PIN_SET);
 8006322:	2201      	movs	r2, #1
 8006324:	2120      	movs	r1, #32
 8006326:	4808      	ldr	r0, [pc, #32]	; (8006348 <GO_ApplyPresetToSignal+0x160>)
 8006328:	f006 f98c 	bl	800c644 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(CH1_GAIN_C_GPIO_Port, CH1_GAIN_C_Pin, GPIO_PIN_SET);
 800632c:	2201      	movs	r2, #1
 800632e:	2110      	movs	r1, #16
 8006330:	4805      	ldr	r0, [pc, #20]	; (8006348 <GO_ApplyPresetToSignal+0x160>)
 8006332:	f006 f987 	bl	800c644 <HAL_GPIO_WritePin>
			break;
 8006336:	bf00      	nop
	}

}
 8006338:	bf00      	nop
 800633a:	370c      	adds	r7, #12
 800633c:	46bd      	mov	sp, r7
 800633e:	bd90      	pop	{r4, r7, pc}
 8006340:	20000160 	.word	0x20000160
 8006344:	48000400 	.word	0x48000400
 8006348:	48000800 	.word	0x48000800

0800634c <IT_ArbitrateInputTrigger>:
 *	@param None
 *	@retval None
 *
 */
void IT_ArbitrateInputTrigger()
{
 800634c:	b580      	push	{r7, lr}
 800634e:	b082      	sub	sp, #8
 8006350:	af02      	add	r7, sp, #8
	if(IT_GetTriggerStatus())
 8006352:	f000 fa07 	bl	8006764 <IT_GetTriggerStatus>
 8006356:	4603      	mov	r3, r0
 8006358:	2b00      	cmp	r3, #0
 800635a:	d020      	beq.n	800639e <IT_ArbitrateInputTrigger+0x52>
		OUTPUT_TIMER->SMCR &= ~(TIM_SMCR_SMS_2);
		// set status to disabled
*/

		// disable freq count timer
		HAL_TIM_IC_Stop_DMA(&htim2, TIM_CHANNEL_1);
 800635c:	2100      	movs	r1, #0
 800635e:	484e      	ldr	r0, [pc, #312]	; (8006498 <IT_ArbitrateInputTrigger+0x14c>)
 8006360:	f007 feec 	bl	800e13c <HAL_TIM_IC_Stop_DMA>

		// disable the comparator
		HAL_COMP_Stop(&hcomp1);
 8006364:	484d      	ldr	r0, [pc, #308]	; (800649c <IT_ArbitrateInputTrigger+0x150>)
 8006366:	f004 fdc3 	bl	800aef0 <HAL_COMP_Stop>

		// stop the ADC
		HAL_ADC_Stop_DMA(&hadc1);
 800636a:	484d      	ldr	r0, [pc, #308]	; (80064a0 <IT_ArbitrateInputTrigger+0x154>)
 800636c:	f003 fb66 	bl	8009a3c <HAL_ADC_Stop_DMA>

		GPIOA->AFR[0] &= ~(GPIO_AF1_TIM2);
 8006370:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8006374:	6a1b      	ldr	r3, [r3, #32]
 8006376:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 800637a:	f023 0301 	bic.w	r3, r3, #1
 800637e:	6213      	str	r3, [r2, #32]
		GPIOA->AFR[0] &= ~(GPIO_AF8_COMP1);
 8006380:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8006384:	6a1b      	ldr	r3, [r3, #32]
 8006386:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 800638a:	f023 0308 	bic.w	r3, r3, #8
 800638e:	6213      	str	r3, [r2, #32]


		IT_SetTriggerStatus(DISABLE_TRIGGER);
 8006390:	2000      	movs	r0, #0
 8006392:	f000 f9f3 	bl	800677c <IT_SetTriggerStatus>

		FuncO_ApplyProfileToSignal(eDefaultFuncPreset);
 8006396:	2000      	movs	r0, #0
 8006398:	f7ff fd24 	bl	8005de4 <FuncO_ApplyProfileToSignal>
		}
		// set status to enabled
		IT_SetTriggerStatus(ENABLE_TRIGGER);
	}

}
 800639c:	e079      	b.n	8006492 <IT_ArbitrateInputTrigger+0x146>
		switch(IT_GetActiveTriggerMode())
 800639e:	f000 f9c5 	bl	800672c <IT_GetActiveTriggerMode>
 80063a2:	4603      	mov	r3, r0
 80063a4:	2b01      	cmp	r3, #1
 80063a6:	d037      	beq.n	8006418 <IT_ArbitrateInputTrigger+0xcc>
 80063a8:	2b02      	cmp	r3, #2
 80063aa:	d042      	beq.n	8006432 <IT_ArbitrateInputTrigger+0xe6>
 80063ac:	2b00      	cmp	r3, #0
 80063ae:	d000      	beq.n	80063b2 <IT_ArbitrateInputTrigger+0x66>
				break;
 80063b0:	e06c      	b.n	800648c <IT_ArbitrateInputTrigger+0x140>
				HAL_GPIO_WritePin(TRIGMUX1_GPIO_Port, TRIGMUX1_Pin, GPIO_PIN_SET);		// TS5A3357 Pin6
 80063b2:	2201      	movs	r2, #1
 80063b4:	f44f 7180 	mov.w	r1, #256	; 0x100
 80063b8:	483a      	ldr	r0, [pc, #232]	; (80064a4 <IT_ArbitrateInputTrigger+0x158>)
 80063ba:	f006 f943 	bl	800c644 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(TRIGMUX2_GPIO_Port, TRIGMUX2_Pin, GPIO_PIN_RESET); 	// TS5A3357 Pin5
 80063be:	2200      	movs	r2, #0
 80063c0:	f44f 7100 	mov.w	r1, #512	; 0x200
 80063c4:	4837      	ldr	r0, [pc, #220]	; (80064a4 <IT_ArbitrateInputTrigger+0x158>)
 80063c6:	f006 f93d 	bl	800c644 <HAL_GPIO_WritePin>
				HAL_TIM_IC_Start_DMA(&htim2, TIM_CHANNEL_1, freq_count_store, MAX_FREQ_COUNT_STORE);
 80063ca:	2308      	movs	r3, #8
 80063cc:	4a36      	ldr	r2, [pc, #216]	; (80064a8 <IT_ArbitrateInputTrigger+0x15c>)
 80063ce:	2100      	movs	r1, #0
 80063d0:	4831      	ldr	r0, [pc, #196]	; (8006498 <IT_ArbitrateInputTrigger+0x14c>)
 80063d2:	f007 fd25 	bl	800de20 <HAL_TIM_IC_Start_DMA>
				GPIOA->MODER &= ~(GPIO_MODER_MODE0_0 | GPIO_MODER_MODE0_1);	// reset mode registers
 80063d6:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 80063da:	681b      	ldr	r3, [r3, #0]
 80063dc:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 80063e0:	f023 0303 	bic.w	r3, r3, #3
 80063e4:	6013      	str	r3, [r2, #0]
				GPIOA->MODER |= (GPIO_MODER_MODE0_1);	// set port mode to AF
 80063e6:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 80063ea:	681b      	ldr	r3, [r3, #0]
 80063ec:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 80063f0:	f043 0302 	orr.w	r3, r3, #2
 80063f4:	6013      	str	r3, [r2, #0]
				GPIOA->AFR[0] &= ~((1 << 0x04) | (1 << 0x03) | (1 << 0x02) | (1 << 0x01));	// reset AF registers - See Table 13 "Alternate Functions" in STM32G474 datasheet
 80063f6:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 80063fa:	6a1b      	ldr	r3, [r3, #32]
 80063fc:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 8006400:	f023 031e 	bic.w	r3, r3, #30
 8006404:	6213      	str	r3, [r2, #32]
				GPIOA->AFR[0] |= GPIO_AF1_TIM2;		// set AF to TIM2_CH1
 8006406:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800640a:	6a1b      	ldr	r3, [r3, #32]
 800640c:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 8006410:	f043 0301 	orr.w	r3, r3, #1
 8006414:	6213      	str	r3, [r2, #32]
				break;
 8006416:	e039      	b.n	800648c <IT_ArbitrateInputTrigger+0x140>
				HAL_GPIO_WritePin(TRIGMUX1_GPIO_Port, TRIGMUX1_Pin, GPIO_PIN_RESET);	// TS5A3357 Pin6
 8006418:	2200      	movs	r2, #0
 800641a:	f44f 7180 	mov.w	r1, #256	; 0x100
 800641e:	4821      	ldr	r0, [pc, #132]	; (80064a4 <IT_ArbitrateInputTrigger+0x158>)
 8006420:	f006 f910 	bl	800c644 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(TRIGMUX2_GPIO_Port, TRIGMUX2_Pin, GPIO_PIN_SET); 		// TS5A3357 Pin5
 8006424:	2201      	movs	r2, #1
 8006426:	f44f 7100 	mov.w	r1, #512	; 0x200
 800642a:	481e      	ldr	r0, [pc, #120]	; (80064a4 <IT_ArbitrateInputTrigger+0x158>)
 800642c:	f006 f90a 	bl	800c644 <HAL_GPIO_WritePin>
				break;
 8006430:	e02c      	b.n	800648c <IT_ArbitrateInputTrigger+0x140>
				HAL_GPIO_WritePin(TRIGMUX1_GPIO_Port, TRIGMUX1_Pin, GPIO_PIN_SET);		// TS5A3357 Pin6
 8006432:	2201      	movs	r2, #1
 8006434:	f44f 7180 	mov.w	r1, #256	; 0x100
 8006438:	481a      	ldr	r0, [pc, #104]	; (80064a4 <IT_ArbitrateInputTrigger+0x158>)
 800643a:	f006 f903 	bl	800c644 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(TRIGMUX2_GPIO_Port, TRIGMUX2_Pin, GPIO_PIN_SET);		// TS5A3357 Pin5
 800643e:	2201      	movs	r2, #1
 8006440:	f44f 7100 	mov.w	r1, #512	; 0x200
 8006444:	4817      	ldr	r0, [pc, #92]	; (80064a4 <IT_ArbitrateInputTrigger+0x158>)
 8006446:	f006 f8fd 	bl	800c644 <HAL_GPIO_WritePin>
				HAL_ADC_Start_DMA(&hadc1, adcsteps_measure_store, MAX_ADCSTEPS_MEASURE_STORE);
 800644a:	2210      	movs	r2, #16
 800644c:	4917      	ldr	r1, [pc, #92]	; (80064ac <IT_ArbitrateInputTrigger+0x160>)
 800644e:	4814      	ldr	r0, [pc, #80]	; (80064a0 <IT_ArbitrateInputTrigger+0x154>)
 8006450:	f003 fa26 	bl	80098a0 <HAL_ADC_Start_DMA>
				OUTPUT_TIMER->CR1 &= ~(TIM_CR1_CEN);
 8006454:	4b16      	ldr	r3, [pc, #88]	; (80064b0 <IT_ArbitrateInputTrigger+0x164>)
 8006456:	681b      	ldr	r3, [r3, #0]
 8006458:	4a15      	ldr	r2, [pc, #84]	; (80064b0 <IT_ArbitrateInputTrigger+0x164>)
 800645a:	f023 0301 	bic.w	r3, r3, #1
 800645e:	6013      	str	r3, [r2, #0]
				HAL_DAC_Stop_DMA(&hdac1, DAC1_CHANNEL_1);
 8006460:	2100      	movs	r1, #0
 8006462:	4814      	ldr	r0, [pc, #80]	; (80064b4 <IT_ArbitrateInputTrigger+0x168>)
 8006464:	f005 f870 	bl	800b548 <HAL_DAC_Stop_DMA>
				HAL_DAC_Start_DMA(&hdac1, DAC1_CHANNEL_1, adcsteps_measure_store, MAX_ADCSTEPS_MEASURE_STORE, DAC_ALIGN_12B_R);
 8006468:	2300      	movs	r3, #0
 800646a:	9300      	str	r3, [sp, #0]
 800646c:	2310      	movs	r3, #16
 800646e:	4a0f      	ldr	r2, [pc, #60]	; (80064ac <IT_ArbitrateInputTrigger+0x160>)
 8006470:	2100      	movs	r1, #0
 8006472:	4810      	ldr	r0, [pc, #64]	; (80064b4 <IT_ArbitrateInputTrigger+0x168>)
 8006474:	f004 ffa6 	bl	800b3c4 <HAL_DAC_Start_DMA>
				OUTPUT_TIMER->CR1 |= (TIM_CR1_CEN);
 8006478:	4b0d      	ldr	r3, [pc, #52]	; (80064b0 <IT_ArbitrateInputTrigger+0x164>)
 800647a:	681b      	ldr	r3, [r3, #0]
 800647c:	4a0c      	ldr	r2, [pc, #48]	; (80064b0 <IT_ArbitrateInputTrigger+0x164>)
 800647e:	f043 0301 	orr.w	r3, r3, #1
 8006482:	6013      	str	r3, [r2, #0]
				FuncO_ApplyProfileToSignal(eDefaultFuncPreset);
 8006484:	2000      	movs	r0, #0
 8006486:	f7ff fcad 	bl	8005de4 <FuncO_ApplyProfileToSignal>
				break;
 800648a:	bf00      	nop
		IT_SetTriggerStatus(ENABLE_TRIGGER);
 800648c:	2001      	movs	r0, #1
 800648e:	f000 f975 	bl	800677c <IT_SetTriggerStatus>
}
 8006492:	bf00      	nop
 8006494:	46bd      	mov	sp, r7
 8006496:	bd80      	pop	{r7, pc}
 8006498:	20002be0 	.word	0x20002be0
 800649c:	200028f4 	.word	0x200028f4
 80064a0:	20002828 	.word	0x20002828
 80064a4:	48000800 	.word	0x48000800
 80064a8:	20002234 	.word	0x20002234
 80064ac:	20002114 	.word	0x20002114
 80064b0:	40013400 	.word	0x40013400
 80064b4:	2000292c 	.word	0x2000292c

080064b8 <IT_CycleInputTriggerMode>:
 *	@param None
 *	@retval None
 *
 */
void IT_CycleInputTriggerMode()
{
 80064b8:	b580      	push	{r7, lr}
 80064ba:	af00      	add	r7, sp, #0
	// change the trigger input mode
	switch(IT_GetActiveTriggerMode())
 80064bc:	f000 f936 	bl	800672c <IT_GetActiveTriggerMode>
 80064c0:	4603      	mov	r3, r0
 80064c2:	2b01      	cmp	r3, #1
 80064c4:	d008      	beq.n	80064d8 <IT_CycleInputTriggerMode+0x20>
 80064c6:	2b02      	cmp	r3, #2
 80064c8:	d00a      	beq.n	80064e0 <IT_CycleInputTriggerMode+0x28>
 80064ca:	2b00      	cmp	r3, #0
 80064cc:	d000      	beq.n	80064d0 <IT_CycleInputTriggerMode+0x18>
		case INPUT_TIMER_ADC:
			IT_SetActiveTriggerMode(INPUT_TIMER_TIM);
			break;

		default:
			break;
 80064ce:	e00b      	b.n	80064e8 <IT_CycleInputTriggerMode+0x30>
			IT_SetActiveTriggerMode(INPUT_TIMER_COMP);
 80064d0:	2001      	movs	r0, #1
 80064d2:	f000 f937 	bl	8006744 <IT_SetActiveTriggerMode>
			break;
 80064d6:	e007      	b.n	80064e8 <IT_CycleInputTriggerMode+0x30>
			IT_SetActiveTriggerMode(INPUT_TIMER_ADC);
 80064d8:	2002      	movs	r0, #2
 80064da:	f000 f933 	bl	8006744 <IT_SetActiveTriggerMode>
			break;
 80064de:	e003      	b.n	80064e8 <IT_CycleInputTriggerMode+0x30>
			IT_SetActiveTriggerMode(INPUT_TIMER_TIM);
 80064e0:	2000      	movs	r0, #0
 80064e2:	f000 f92f 	bl	8006744 <IT_SetActiveTriggerMode>
			break;
 80064e6:	bf00      	nop
	}
}
 80064e8:	bf00      	nop
 80064ea:	bd80      	pop	{r7, pc}

080064ec <HAL_COMP_TriggerCallback>:
 *	@param None
 *	@retval None
 *
 */
void HAL_COMP_TriggerCallback(COMP_HandleTypeDef *hcomp)
{
 80064ec:	b580      	push	{r7, lr}
 80064ee:	b082      	sub	sp, #8
 80064f0:	af00      	add	r7, sp, #0
 80064f2:	6078      	str	r0, [r7, #4]
	if(HAL_COMP_GetOutputLevel(&hcomp1))
 80064f4:	4808      	ldr	r0, [pc, #32]	; (8006518 <HAL_COMP_TriggerCallback+0x2c>)
 80064f6:	f004 fda1 	bl	800b03c <HAL_COMP_GetOutputLevel>
 80064fa:	4603      	mov	r3, r0
 80064fc:	2b00      	cmp	r3, #0
 80064fe:	d004      	beq.n	800650a <HAL_COMP_TriggerCallback+0x1e>
	{
		comp1_output_value[0] = 4095;
 8006500:	4b06      	ldr	r3, [pc, #24]	; (800651c <HAL_COMP_TriggerCallback+0x30>)
 8006502:	f640 72ff 	movw	r2, #4095	; 0xfff
 8006506:	601a      	str	r2, [r3, #0]
	}
	else
	{
		comp1_output_value[0] = 0;
	}
}
 8006508:	e002      	b.n	8006510 <HAL_COMP_TriggerCallback+0x24>
		comp1_output_value[0] = 0;
 800650a:	4b04      	ldr	r3, [pc, #16]	; (800651c <HAL_COMP_TriggerCallback+0x30>)
 800650c:	2200      	movs	r2, #0
 800650e:	601a      	str	r2, [r3, #0]
}
 8006510:	bf00      	nop
 8006512:	3708      	adds	r7, #8
 8006514:	46bd      	mov	sp, r7
 8006516:	bd80      	pop	{r7, pc}
 8006518:	200028f4 	.word	0x200028f4
 800651c:	20002228 	.word	0x20002228

08006520 <HAL_ADC_ConvCpltCallback>:
 *	@param None
 *	@retval None
 *
 */
void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 8006520:	b590      	push	{r4, r7, lr}
 8006522:	b085      	sub	sp, #20
 8006524:	af00      	add	r7, sp, #0
 8006526:	6078      	str	r0, [r7, #4]
	// mean average the DMA data set
	avg_adcsteps_measure = 0;
 8006528:	4b29      	ldr	r3, [pc, #164]	; (80065d0 <HAL_ADC_ConvCpltCallback+0xb0>)
 800652a:	f04f 0200 	mov.w	r2, #0
 800652e:	601a      	str	r2, [r3, #0]
	for(int x = 0; x < MAX_ADCSTEPS_MEASURE_STORE; x++)
 8006530:	2300      	movs	r3, #0
 8006532:	60fb      	str	r3, [r7, #12]
 8006534:	e012      	b.n	800655c <HAL_ADC_ConvCpltCallback+0x3c>
	{
		avg_adcsteps_measure += adcsteps_measure_store[x];
 8006536:	4a27      	ldr	r2, [pc, #156]	; (80065d4 <HAL_ADC_ConvCpltCallback+0xb4>)
 8006538:	68fb      	ldr	r3, [r7, #12]
 800653a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800653e:	ee07 3a90 	vmov	s15, r3
 8006542:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8006546:	4b22      	ldr	r3, [pc, #136]	; (80065d0 <HAL_ADC_ConvCpltCallback+0xb0>)
 8006548:	edd3 7a00 	vldr	s15, [r3]
 800654c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8006550:	4b1f      	ldr	r3, [pc, #124]	; (80065d0 <HAL_ADC_ConvCpltCallback+0xb0>)
 8006552:	edc3 7a00 	vstr	s15, [r3]
	for(int x = 0; x < MAX_ADCSTEPS_MEASURE_STORE; x++)
 8006556:	68fb      	ldr	r3, [r7, #12]
 8006558:	3301      	adds	r3, #1
 800655a:	60fb      	str	r3, [r7, #12]
 800655c:	68fb      	ldr	r3, [r7, #12]
 800655e:	2b0f      	cmp	r3, #15
 8006560:	dde9      	ble.n	8006536 <HAL_ADC_ConvCpltCallback+0x16>
	}
	avg_adcsteps_measure = avg_adcsteps_measure / MAX_ADCSTEPS_MEASURE_STORE;
 8006562:	4b1b      	ldr	r3, [pc, #108]	; (80065d0 <HAL_ADC_ConvCpltCallback+0xb0>)
 8006564:	ed93 7a00 	vldr	s14, [r3]
 8006568:	eef3 6a00 	vmov.f32	s13, #48	; 0x41800000  16.0
 800656c:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8006570:	4b17      	ldr	r3, [pc, #92]	; (80065d0 <HAL_ADC_ConvCpltCallback+0xb0>)
 8006572:	edc3 7a00 	vstr	s15, [r3]

	// convert ADC steps into voltage
	avg_volt_measure = avg_adcsteps_measure * VOLT_ADC_RESOLUTION;
 8006576:	4b16      	ldr	r3, [pc, #88]	; (80065d0 <HAL_ADC_ConvCpltCallback+0xb0>)
 8006578:	681b      	ldr	r3, [r3, #0]
 800657a:	4618      	mov	r0, r3
 800657c:	f7fa f80c 	bl	8000598 <__aeabi_f2d>
 8006580:	a311      	add	r3, pc, #68	; (adr r3, 80065c8 <HAL_ADC_ConvCpltCallback+0xa8>)
 8006582:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006586:	f7fa f85f 	bl	8000648 <__aeabi_dmul>
 800658a:	4603      	mov	r3, r0
 800658c:	460c      	mov	r4, r1
 800658e:	4618      	mov	r0, r3
 8006590:	4621      	mov	r1, r4
 8006592:	f7fa fb51 	bl	8000c38 <__aeabi_d2f>
 8006596:	4602      	mov	r2, r0
 8006598:	4b0f      	ldr	r3, [pc, #60]	; (80065d8 <HAL_ADC_ConvCpltCallback+0xb8>)
 800659a:	601a      	str	r2, [r3, #0]

	// find nearest freq in ref table
	uint16_t new_output_period = _GetNearestPeriodToVolts(avg_volt_measure);
 800659c:	4b0e      	ldr	r3, [pc, #56]	; (80065d8 <HAL_ADC_ConvCpltCallback+0xb8>)
 800659e:	edd3 7a00 	vldr	s15, [r3]
 80065a2:	eeb0 0a67 	vmov.f32	s0, s15
 80065a6:	f000 f87f 	bl	80066a8 <_GetNearestPeriodToVolts>
 80065aa:	4603      	mov	r3, r0
 80065ac:	817b      	strh	r3, [r7, #10]
	if(new_output_period > 0)
 80065ae:	897b      	ldrh	r3, [r7, #10]
 80065b0:	2b00      	cmp	r3, #0
 80065b2:	d005      	beq.n	80065c0 <HAL_ADC_ConvCpltCallback+0xa0>
	{
		// set the output timer to new period
		OUTPUT_TIMER->ARR = new_output_period;
 80065b4:	4a09      	ldr	r2, [pc, #36]	; (80065dc <HAL_ADC_ConvCpltCallback+0xbc>)
 80065b6:	897b      	ldrh	r3, [r7, #10]
 80065b8:	62d3      	str	r3, [r2, #44]	; 0x2c
		OUTPUT_TIMER->PSC = 1;
 80065ba:	4b08      	ldr	r3, [pc, #32]	; (80065dc <HAL_ADC_ConvCpltCallback+0xbc>)
 80065bc:	2201      	movs	r2, #1
 80065be:	629a      	str	r2, [r3, #40]	; 0x28
	}

}
 80065c0:	bf00      	nop
 80065c2:	3714      	adds	r7, #20
 80065c4:	46bd      	mov	sp, r7
 80065c6:	bd90      	pop	{r4, r7, pc}
 80065c8:	51ef8352 	.word	0x51ef8352
 80065cc:	3f4a680d 	.word	0x3f4a680d
 80065d0:	2000225c 	.word	0x2000225c
 80065d4:	20002114 	.word	0x20002114
 80065d8:	20002230 	.word	0x20002230
 80065dc:	40013400 	.word	0x40013400

080065e0 <HAL_TIM_IC_CaptureCallback>:

void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80065e0:	b480      	push	{r7}
 80065e2:	b085      	sub	sp, #20
 80065e4:	af00      	add	r7, sp, #0
 80065e6:	6078      	str	r0, [r7, #4]

	// mean average the DMA data set
	avg_freq_count_period = 0;
 80065e8:	4b29      	ldr	r3, [pc, #164]	; (8006690 <HAL_TIM_IC_CaptureCallback+0xb0>)
 80065ea:	2200      	movs	r2, #0
 80065ec:	601a      	str	r2, [r3, #0]
	for(int x = 0; x < MAX_FREQ_COUNT_STORE; x++)
 80065ee:	2300      	movs	r3, #0
 80065f0:	60fb      	str	r3, [r7, #12]
 80065f2:	e00b      	b.n	800660c <HAL_TIM_IC_CaptureCallback+0x2c>
	{
		avg_freq_count_period += freq_count_store[x];
 80065f4:	4a27      	ldr	r2, [pc, #156]	; (8006694 <HAL_TIM_IC_CaptureCallback+0xb4>)
 80065f6:	68fb      	ldr	r3, [r7, #12]
 80065f8:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 80065fc:	4b24      	ldr	r3, [pc, #144]	; (8006690 <HAL_TIM_IC_CaptureCallback+0xb0>)
 80065fe:	681b      	ldr	r3, [r3, #0]
 8006600:	4413      	add	r3, r2
 8006602:	4a23      	ldr	r2, [pc, #140]	; (8006690 <HAL_TIM_IC_CaptureCallback+0xb0>)
 8006604:	6013      	str	r3, [r2, #0]
	for(int x = 0; x < MAX_FREQ_COUNT_STORE; x++)
 8006606:	68fb      	ldr	r3, [r7, #12]
 8006608:	3301      	adds	r3, #1
 800660a:	60fb      	str	r3, [r7, #12]
 800660c:	68fb      	ldr	r3, [r7, #12]
 800660e:	2b07      	cmp	r3, #7
 8006610:	ddf0      	ble.n	80065f4 <HAL_TIM_IC_CaptureCallback+0x14>
	}
	avg_freq_count_period /= MAX_FREQ_COUNT_STORE;
 8006612:	4b1f      	ldr	r3, [pc, #124]	; (8006690 <HAL_TIM_IC_CaptureCallback+0xb0>)
 8006614:	681b      	ldr	r3, [r3, #0]
 8006616:	08db      	lsrs	r3, r3, #3
 8006618:	4a1d      	ldr	r2, [pc, #116]	; (8006690 <HAL_TIM_IC_CaptureCallback+0xb0>)
 800661a:	6013      	str	r3, [r2, #0]

	// convert period to hertz
	avg_freq_count_hertz = (float)SM_MCLK / ((float)INPUT_TIMER->PSC * (float)avg_freq_count_period);
 800661c:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8006620:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006622:	ee07 3a90 	vmov	s15, r3
 8006626:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800662a:	4b19      	ldr	r3, [pc, #100]	; (8006690 <HAL_TIM_IC_CaptureCallback+0xb0>)
 800662c:	681b      	ldr	r3, [r3, #0]
 800662e:	ee07 3a90 	vmov	s15, r3
 8006632:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006636:	ee27 7a27 	vmul.f32	s14, s14, s15
 800663a:	eddf 6a17 	vldr	s13, [pc, #92]	; 8006698 <HAL_TIM_IC_CaptureCallback+0xb8>
 800663e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8006642:	4b16      	ldr	r3, [pc, #88]	; (800669c <HAL_TIM_IC_CaptureCallback+0xbc>)
 8006644:	edc3 7a00 	vstr	s15, [r3]

	// sync the output timer (DAC) with the input timer
	OUTPUT_TIMER->ARR = avg_freq_count_period;
 8006648:	4a15      	ldr	r2, [pc, #84]	; (80066a0 <HAL_TIM_IC_CaptureCallback+0xc0>)
 800664a:	4b11      	ldr	r3, [pc, #68]	; (8006690 <HAL_TIM_IC_CaptureCallback+0xb0>)
 800664c:	681b      	ldr	r3, [r3, #0]
 800664e:	62d3      	str	r3, [r2, #44]	; 0x2c

	// auto toggle "LF" mode
	if(avg_freq_count_hertz < 50)
 8006650:	4b12      	ldr	r3, [pc, #72]	; (800669c <HAL_TIM_IC_CaptureCallback+0xbc>)
 8006652:	edd3 7a00 	vldr	s15, [r3]
 8006656:	ed9f 7a13 	vldr	s14, [pc, #76]	; 80066a4 <HAL_TIM_IC_CaptureCallback+0xc4>
 800665a:	eef4 7ac7 	vcmpe.f32	s15, s14
 800665e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006662:	d508      	bpl.n	8006676 <HAL_TIM_IC_CaptureCallback+0x96>
	{
		INPUT_TIMER->PSC = 8000;
 8006664:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8006668:	f44f 52fa 	mov.w	r2, #8000	; 0x1f40
 800666c:	629a      	str	r2, [r3, #40]	; 0x28
		OUTPUT_TIMER->PSC = 48;
 800666e:	4b0c      	ldr	r3, [pc, #48]	; (80066a0 <HAL_TIM_IC_CaptureCallback+0xc0>)
 8006670:	2230      	movs	r2, #48	; 0x30
 8006672:	629a      	str	r2, [r3, #40]	; 0x28
		OUTPUT_TIMER->PSC = 0;
	}

	//printf("ARR %lu = %4.2fHz\n",avg_freq_count_period, avg_freq_count_hertz);

}
 8006674:	e006      	b.n	8006684 <HAL_TIM_IC_CaptureCallback+0xa4>
		INPUT_TIMER->PSC = 128;
 8006676:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800667a:	2280      	movs	r2, #128	; 0x80
 800667c:	629a      	str	r2, [r3, #40]	; 0x28
		OUTPUT_TIMER->PSC = 0;
 800667e:	4b08      	ldr	r3, [pc, #32]	; (80066a0 <HAL_TIM_IC_CaptureCallback+0xc0>)
 8006680:	2200      	movs	r2, #0
 8006682:	629a      	str	r2, [r3, #40]	; 0x28
}
 8006684:	bf00      	nop
 8006686:	3714      	adds	r7, #20
 8006688:	46bd      	mov	sp, r7
 800668a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800668e:	4770      	bx	lr
 8006690:	20002254 	.word	0x20002254
 8006694:	20002234 	.word	0x20002234
 8006698:	4d2037a0 	.word	0x4d2037a0
 800669c:	20002258 	.word	0x20002258
 80066a0:	40013400 	.word	0x40013400
 80066a4:	42480000 	.word	0x42480000

080066a8 <_GetNearestPeriodToVolts>:
	}
	return 0.0f;
}

uint16_t _GetNearestPeriodToVolts(float volts)
{
 80066a8:	b480      	push	{r7}
 80066aa:	b085      	sub	sp, #20
 80066ac:	af00      	add	r7, sp, #0
 80066ae:	ed87 0a01 	vstr	s0, [r7, #4]
	float error_margin = 0.05;
 80066b2:	4b15      	ldr	r3, [pc, #84]	; (8006708 <_GetNearestPeriodToVolts+0x60>)
 80066b4:	60bb      	str	r3, [r7, #8]
	for(int x = 0; x < MAX_VOLTS_PER_OCTAVE_INDEX; x++)
 80066b6:	2300      	movs	r3, #0
 80066b8:	60fb      	str	r3, [r7, #12]
 80066ba:	e01b      	b.n	80066f4 <_GetNearestPeriodToVolts+0x4c>
	{
		if((volts - theVoltsPerOctaveTable[x].volts) < error_margin)
 80066bc:	4a13      	ldr	r2, [pc, #76]	; (800670c <_GetNearestPeriodToVolts+0x64>)
 80066be:	68fb      	ldr	r3, [r7, #12]
 80066c0:	011b      	lsls	r3, r3, #4
 80066c2:	4413      	add	r3, r2
 80066c4:	3304      	adds	r3, #4
 80066c6:	edd3 7a00 	vldr	s15, [r3]
 80066ca:	ed97 7a01 	vldr	s14, [r7, #4]
 80066ce:	ee77 7a67 	vsub.f32	s15, s14, s15
 80066d2:	ed97 7a02 	vldr	s14, [r7, #8]
 80066d6:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80066da:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80066de:	dd06      	ble.n	80066ee <_GetNearestPeriodToVolts+0x46>
		{
			return theVoltsPerOctaveTable[x].period;
 80066e0:	4a0a      	ldr	r2, [pc, #40]	; (800670c <_GetNearestPeriodToVolts+0x64>)
 80066e2:	68fb      	ldr	r3, [r7, #12]
 80066e4:	011b      	lsls	r3, r3, #4
 80066e6:	4413      	add	r3, r2
 80066e8:	330c      	adds	r3, #12
 80066ea:	881b      	ldrh	r3, [r3, #0]
 80066ec:	e006      	b.n	80066fc <_GetNearestPeriodToVolts+0x54>
	for(int x = 0; x < MAX_VOLTS_PER_OCTAVE_INDEX; x++)
 80066ee:	68fb      	ldr	r3, [r7, #12]
 80066f0:	3301      	adds	r3, #1
 80066f2:	60fb      	str	r3, [r7, #12]
 80066f4:	68fb      	ldr	r3, [r7, #12]
 80066f6:	2b27      	cmp	r3, #39	; 0x27
 80066f8:	dde0      	ble.n	80066bc <_GetNearestPeriodToVolts+0x14>
		}

	}
	return 0.0f;
 80066fa:	2300      	movs	r3, #0
}
 80066fc:	4618      	mov	r0, r3
 80066fe:	3714      	adds	r7, #20
 8006700:	46bd      	mov	sp, r7
 8006702:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006706:	4770      	bx	lr
 8006708:	3d4ccccd 	.word	0x3d4ccccd
 800670c:	20000178 	.word	0x20000178

08006710 <IT_GetAverageFreqCountHertz>:
 *	@param None
 *	@retval None
 *
 */
float IT_GetAverageFreqCountHertz()
{
 8006710:	b480      	push	{r7}
 8006712:	af00      	add	r7, sp, #0
	return avg_freq_count_hertz;
 8006714:	4b04      	ldr	r3, [pc, #16]	; (8006728 <IT_GetAverageFreqCountHertz+0x18>)
 8006716:	681b      	ldr	r3, [r3, #0]
 8006718:	ee07 3a90 	vmov	s15, r3
}
 800671c:	eeb0 0a67 	vmov.f32	s0, s15
 8006720:	46bd      	mov	sp, r7
 8006722:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006726:	4770      	bx	lr
 8006728:	20002258 	.word	0x20002258

0800672c <IT_GetActiveTriggerMode>:
 *	@param None
 *	@retval None
 *
 */
eTriggerInputMode IT_GetActiveTriggerMode()
{
 800672c:	b480      	push	{r7}
 800672e:	af00      	add	r7, sp, #0
	return activeInputerTriggerMode;
 8006730:	4b03      	ldr	r3, [pc, #12]	; (8006740 <IT_GetActiveTriggerMode+0x14>)
 8006732:	781b      	ldrb	r3, [r3, #0]
}
 8006734:	4618      	mov	r0, r3
 8006736:	46bd      	mov	sp, r7
 8006738:	f85d 7b04 	ldr.w	r7, [sp], #4
 800673c:	4770      	bx	lr
 800673e:	bf00      	nop
 8006740:	20002112 	.word	0x20002112

08006744 <IT_SetActiveTriggerMode>:
 *	@param None
 *	@retval None
 *
 */
void IT_SetActiveTriggerMode(eTriggerInputMode newTriggerMode)
{
 8006744:	b480      	push	{r7}
 8006746:	b083      	sub	sp, #12
 8006748:	af00      	add	r7, sp, #0
 800674a:	4603      	mov	r3, r0
 800674c:	71fb      	strb	r3, [r7, #7]
	activeInputerTriggerMode = newTriggerMode;
 800674e:	4a04      	ldr	r2, [pc, #16]	; (8006760 <IT_SetActiveTriggerMode+0x1c>)
 8006750:	79fb      	ldrb	r3, [r7, #7]
 8006752:	7013      	strb	r3, [r2, #0]
}
 8006754:	bf00      	nop
 8006756:	370c      	adds	r7, #12
 8006758:	46bd      	mov	sp, r7
 800675a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800675e:	4770      	bx	lr
 8006760:	20002112 	.word	0x20002112

08006764 <IT_GetTriggerStatus>:
 *	@param None
 *	@retval None
 *
 */
eTriggerInput IT_GetTriggerStatus()
{
 8006764:	b480      	push	{r7}
 8006766:	af00      	add	r7, sp, #0
	return isTriggerInputEnabled;
 8006768:	4b03      	ldr	r3, [pc, #12]	; (8006778 <IT_GetTriggerStatus+0x14>)
 800676a:	781b      	ldrb	r3, [r3, #0]
}
 800676c:	4618      	mov	r0, r3
 800676e:	46bd      	mov	sp, r7
 8006770:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006774:	4770      	bx	lr
 8006776:	bf00      	nop
 8006778:	20002113 	.word	0x20002113

0800677c <IT_SetTriggerStatus>:
 *	@param None
 *	@retval None
 *
 */
void IT_SetTriggerStatus(eTriggerInput newTriggerStatus)
{
 800677c:	b480      	push	{r7}
 800677e:	b083      	sub	sp, #12
 8006780:	af00      	add	r7, sp, #0
 8006782:	4603      	mov	r3, r0
 8006784:	71fb      	strb	r3, [r7, #7]
	isTriggerInputEnabled = newTriggerStatus;
 8006786:	4a04      	ldr	r2, [pc, #16]	; (8006798 <IT_SetTriggerStatus+0x1c>)
 8006788:	79fb      	ldrb	r3, [r7, #7]
 800678a:	7013      	strb	r3, [r2, #0]
}
 800678c:	bf00      	nop
 800678e:	370c      	adds	r7, #12
 8006790:	46bd      	mov	sp, r7
 8006792:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006796:	4770      	bx	lr
 8006798:	20002113 	.word	0x20002113

0800679c <IT_GetAvgAdcVoltage>:
 *	@param None
 *	@retval None
 *
 */
float IT_GetAvgAdcVoltage()
{
 800679c:	b480      	push	{r7}
 800679e:	af00      	add	r7, sp, #0
	return avg_volt_measure;
 80067a0:	4b04      	ldr	r3, [pc, #16]	; (80067b4 <IT_GetAvgAdcVoltage+0x18>)
 80067a2:	681b      	ldr	r3, [r3, #0]
 80067a4:	ee07 3a90 	vmov	s15, r3
}
 80067a8:	eeb0 0a67 	vmov.f32	s0, s15
 80067ac:	46bd      	mov	sp, r7
 80067ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067b2:	4770      	bx	lr
 80067b4:	20002230 	.word	0x20002230

080067b8 <SM_Init>:
void _InitOutputChannels();
void _InitAmpProfiles();
void _InitGainInDecibels();

void SM_Init()
{
 80067b8:	b580      	push	{r7, lr}
 80067ba:	af00      	add	r7, sp, #0

	FreqO_InitFreqProfiles();
 80067bc:	f7fe ff72 	bl	80056a4 <FreqO_InitFreqProfiles>

	_InitOutputChannels();
 80067c0:	f000 f8ae 	bl	8006920 <_InitOutputChannels>
	_InitAmpProfiles();
 80067c4:	f000 f824 	bl	8006810 <_InitAmpProfiles>

	// Start OFFSET DAC and set to positive
	HAL_DAC_Start(&hdac1, DAC1_CHANNEL_2);
 80067c8:	2110      	movs	r1, #16
 80067ca:	480f      	ldr	r0, [pc, #60]	; (8006808 <SM_Init+0x50>)
 80067cc:	f004 fda7 	bl	800b31e <HAL_DAC_Start>
	HAL_GPIO_WritePin(OFFSET_ENABLE_GPIO_Port, OFFSET_ENABLE_Pin, GPIO_PIN_SET);
 80067d0:	2201      	movs	r2, #1
 80067d2:	2108      	movs	r1, #8
 80067d4:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80067d8:	f005 ff34 	bl	800c644 <HAL_GPIO_WritePin>

	// send trigger input out to dac
	//HAL_DAC_Start_DMA(&hdac2, DAC2_CHANNEL_1, volt_measure_store, MAX_VOLT_MEASURE_STORE, DAC_ALIGN_12B_R);

	// Start DAC trigger timer
	OUTPUT_TIMER->CR1 |= (TIM_CR1_CEN);
 80067dc:	4b0b      	ldr	r3, [pc, #44]	; (800680c <SM_Init+0x54>)
 80067de:	681b      	ldr	r3, [r3, #0]
 80067e0:	4a0a      	ldr	r2, [pc, #40]	; (800680c <SM_Init+0x54>)
 80067e2:	f043 0301 	orr.w	r3, r3, #1
 80067e6:	6013      	str	r3, [r2, #0]

	// Set the SIGNAL function and amplitude
	FuncO_ApplyProfileToSignal(eDefaultFuncPreset);
 80067e8:	2000      	movs	r0, #0
 80067ea:	f7ff fafb 	bl	8005de4 <FuncO_ApplyProfileToSignal>
	VPP_ApplyProfileToSignal(eDefaultVppPreset);
 80067ee:	2059      	movs	r0, #89	; 0x59
 80067f0:	f000 fc2c 	bl	800704c <VPP_ApplyProfileToSignal>

	// set the AUX function
	FuncO_ApplyProfileToAux(eDefaultFuncPreset);
 80067f4:	2000      	movs	r0, #0
 80067f6:	f7ff fb59 	bl	8005eac <FuncO_ApplyProfileToAux>

	// set freq for both SIGNAL and AUX
	FreqO_ApplyProfile(eDefaultFreqPreset);
 80067fa:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80067fe:	f7ff f861 	bl	80058c4 <FreqO_ApplyProfile>

}
 8006802:	bf00      	nop
 8006804:	bd80      	pop	{r7, pc}
 8006806:	bf00      	nop
 8006808:	2000292c 	.word	0x2000292c
 800680c:	40013400 	.word	0x40013400

08006810 <_InitAmpProfiles>:

void _InitAmpProfiles()
{
 8006810:	b590      	push	{r4, r7, lr}
 8006812:	b08b      	sub	sp, #44	; 0x2c
 8006814:	af00      	add	r7, sp, #0

	// =(TARGETVPP/LUTVPP)/GAIN
	for(int i = 0; i < MAX_VPP_PRESETS; i++)
 8006816:	2300      	movs	r3, #0
 8006818:	627b      	str	r3, [r7, #36]	; 0x24
 800681a:	e033      	b.n	8006884 <_InitAmpProfiles+0x74>
	{
		float this_amp_value = theAmpProfiles[i].amp_value;
 800681c:	493c      	ldr	r1, [pc, #240]	; (8006910 <_InitAmpProfiles+0x100>)
 800681e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006820:	4613      	mov	r3, r2
 8006822:	00db      	lsls	r3, r3, #3
 8006824:	1a9b      	subs	r3, r3, r2
 8006826:	009b      	lsls	r3, r3, #2
 8006828:	440b      	add	r3, r1
 800682a:	3304      	adds	r3, #4
 800682c:	681b      	ldr	r3, [r3, #0]
 800682e:	613b      	str	r3, [r7, #16]
		float this_lut_vpp = LUT_VPP;
 8006830:	4b38      	ldr	r3, [pc, #224]	; (8006914 <_InitAmpProfiles+0x104>)
 8006832:	60fb      	str	r3, [r7, #12]
		float this_gain_preset = (float)theAmpProfiles[i].gain_preset;
 8006834:	4936      	ldr	r1, [pc, #216]	; (8006910 <_InitAmpProfiles+0x100>)
 8006836:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006838:	4613      	mov	r3, r2
 800683a:	00db      	lsls	r3, r3, #3
 800683c:	1a9b      	subs	r3, r3, r2
 800683e:	009b      	lsls	r3, r3, #2
 8006840:	440b      	add	r3, r1
 8006842:	3308      	adds	r3, #8
 8006844:	781b      	ldrb	r3, [r3, #0]
 8006846:	ee07 3a90 	vmov	s15, r3
 800684a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800684e:	edc7 7a02 	vstr	s15, [r7, #8]
		float new_ngc = ( (this_amp_value / this_lut_vpp) / this_gain_preset);
 8006852:	ed97 7a04 	vldr	s14, [r7, #16]
 8006856:	edd7 7a03 	vldr	s15, [r7, #12]
 800685a:	eec7 6a27 	vdiv.f32	s13, s14, s15
 800685e:	ed97 7a02 	vldr	s14, [r7, #8]
 8006862:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8006866:	edc7 7a01 	vstr	s15, [r7, #4]
		theAmpProfiles[i].neg_gain_coeff = new_ngc;
 800686a:	4929      	ldr	r1, [pc, #164]	; (8006910 <_InitAmpProfiles+0x100>)
 800686c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800686e:	4613      	mov	r3, r2
 8006870:	00db      	lsls	r3, r3, #3
 8006872:	1a9b      	subs	r3, r3, r2
 8006874:	009b      	lsls	r3, r3, #2
 8006876:	440b      	add	r3, r1
 8006878:	3310      	adds	r3, #16
 800687a:	687a      	ldr	r2, [r7, #4]
 800687c:	601a      	str	r2, [r3, #0]
	for(int i = 0; i < MAX_VPP_PRESETS; i++)
 800687e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006880:	3301      	adds	r3, #1
 8006882:	627b      	str	r3, [r7, #36]	; 0x24
 8006884:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006886:	2b61      	cmp	r3, #97	; 0x61
 8006888:	ddc8      	ble.n	800681c <_InitAmpProfiles+0xc>
	}

	// =20*LOG10(TARGETVPP/0.001)
	for(int i = 0; i < MAX_VPP_PRESETS; i++)
 800688a:	2300      	movs	r3, #0
 800688c:	623b      	str	r3, [r7, #32]
 800688e:	e037      	b.n	8006900 <_InitAmpProfiles+0xf0>
	{
		float decibel_mvolt_ref = 0.001;
 8006890:	4b21      	ldr	r3, [pc, #132]	; (8006918 <_InitAmpProfiles+0x108>)
 8006892:	61fb      	str	r3, [r7, #28]
		float this_amp_value = theAmpProfiles[i].amp_value;
 8006894:	491e      	ldr	r1, [pc, #120]	; (8006910 <_InitAmpProfiles+0x100>)
 8006896:	6a3a      	ldr	r2, [r7, #32]
 8006898:	4613      	mov	r3, r2
 800689a:	00db      	lsls	r3, r3, #3
 800689c:	1a9b      	subs	r3, r3, r2
 800689e:	009b      	lsls	r3, r3, #2
 80068a0:	440b      	add	r3, r1
 80068a2:	3304      	adds	r3, #4
 80068a4:	681b      	ldr	r3, [r3, #0]
 80068a6:	61bb      	str	r3, [r7, #24]
		float new_gain_decibels = 20 * log10( this_amp_value / decibel_mvolt_ref );
 80068a8:	ed97 7a06 	vldr	s14, [r7, #24]
 80068ac:	edd7 7a07 	vldr	s15, [r7, #28]
 80068b0:	eec7 6a27 	vdiv.f32	s13, s14, s15
 80068b4:	ee16 0a90 	vmov	r0, s13
 80068b8:	f7f9 fe6e 	bl	8000598 <__aeabi_f2d>
 80068bc:	4603      	mov	r3, r0
 80068be:	460c      	mov	r4, r1
 80068c0:	ec44 3b10 	vmov	d0, r3, r4
 80068c4:	f00d fcac 	bl	8014220 <log10>
 80068c8:	ec51 0b10 	vmov	r0, r1, d0
 80068cc:	f04f 0200 	mov.w	r2, #0
 80068d0:	4b12      	ldr	r3, [pc, #72]	; (800691c <_InitAmpProfiles+0x10c>)
 80068d2:	f7f9 feb9 	bl	8000648 <__aeabi_dmul>
 80068d6:	4603      	mov	r3, r0
 80068d8:	460c      	mov	r4, r1
 80068da:	4618      	mov	r0, r3
 80068dc:	4621      	mov	r1, r4
 80068de:	f7fa f9ab 	bl	8000c38 <__aeabi_d2f>
 80068e2:	4603      	mov	r3, r0
 80068e4:	617b      	str	r3, [r7, #20]
		theAmpProfiles[i].gain_decibels = new_gain_decibels;
 80068e6:	490a      	ldr	r1, [pc, #40]	; (8006910 <_InitAmpProfiles+0x100>)
 80068e8:	6a3a      	ldr	r2, [r7, #32]
 80068ea:	4613      	mov	r3, r2
 80068ec:	00db      	lsls	r3, r3, #3
 80068ee:	1a9b      	subs	r3, r3, r2
 80068f0:	009b      	lsls	r3, r3, #2
 80068f2:	440b      	add	r3, r1
 80068f4:	330c      	adds	r3, #12
 80068f6:	697a      	ldr	r2, [r7, #20]
 80068f8:	601a      	str	r2, [r3, #0]
	for(int i = 0; i < MAX_VPP_PRESETS; i++)
 80068fa:	6a3b      	ldr	r3, [r7, #32]
 80068fc:	3301      	adds	r3, #1
 80068fe:	623b      	str	r3, [r7, #32]
 8006900:	6a3b      	ldr	r3, [r7, #32]
 8006902:	2b61      	cmp	r3, #97	; 0x61
 8006904:	ddc4      	ble.n	8006890 <_InitAmpProfiles+0x80>

	}
}
 8006906:	bf00      	nop
 8006908:	372c      	adds	r7, #44	; 0x2c
 800690a:	46bd      	mov	sp, r7
 800690c:	bd90      	pop	{r4, r7, pc}
 800690e:	bf00      	nop
 8006910:	200003f8 	.word	0x200003f8
 8006914:	402ccccd 	.word	0x402ccccd
 8006918:	3a83126f 	.word	0x3a83126f
 800691c:	40340000 	.word	0x40340000

08006920 <_InitOutputChannels>:

void _InitOutputChannels()
{
 8006920:	b480      	push	{r7}
 8006922:	b083      	sub	sp, #12
 8006924:	af00      	add	r7, sp, #0
	// initialise the SIGNAL output channel
	SignalChannel.channel = SIGNAL_CHANNEL;
 8006926:	4b28      	ldr	r3, [pc, #160]	; (80069c8 <_InitOutputChannels+0xa8>)
 8006928:	2200      	movs	r2, #0
 800692a:	701a      	strb	r2, [r3, #0]
	SignalChannel.ref_lut_data = theFuncProfiles[SINE_FUNC_MODE].lookup_table_data;
 800692c:	4b27      	ldr	r3, [pc, #156]	; (80069cc <_InitOutputChannels+0xac>)
 800692e:	685b      	ldr	r3, [r3, #4]
 8006930:	4a25      	ldr	r2, [pc, #148]	; (80069c8 <_InitOutputChannels+0xa8>)
 8006932:	6053      	str	r3, [r2, #4]
	SignalChannel.func_profile = &theFuncProfiles[eDefaultFuncPreset];
 8006934:	4b24      	ldr	r3, [pc, #144]	; (80069c8 <_InitOutputChannels+0xa8>)
 8006936:	4a25      	ldr	r2, [pc, #148]	; (80069cc <_InitOutputChannels+0xac>)
 8006938:	f8c3 21e8 	str.w	r2, [r3, #488]	; 0x1e8

	for(int i = 0; i < SINE_DATA_SIZE; i++)
 800693c:	2300      	movs	r3, #0
 800693e:	607b      	str	r3, [r7, #4]
 8006940:	e00b      	b.n	800695a <_InitOutputChannels+0x3a>
		SignalChannel.dsp_lut_data[i] = sine_data_table_3600[i];
 8006942:	4a23      	ldr	r2, [pc, #140]	; (80069d0 <_InitOutputChannels+0xb0>)
 8006944:	687b      	ldr	r3, [r7, #4]
 8006946:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 800694a:	491f      	ldr	r1, [pc, #124]	; (80069c8 <_InitOutputChannels+0xa8>)
 800694c:	687b      	ldr	r3, [r7, #4]
 800694e:	3302      	adds	r3, #2
 8006950:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
	for(int i = 0; i < SINE_DATA_SIZE; i++)
 8006954:	687b      	ldr	r3, [r7, #4]
 8006956:	3301      	adds	r3, #1
 8006958:	607b      	str	r3, [r7, #4]
 800695a:	687b      	ldr	r3, [r7, #4]
 800695c:	2b77      	cmp	r3, #119	; 0x77
 800695e:	ddf0      	ble.n	8006942 <_InitOutputChannels+0x22>

	SignalChannel.amp_profile = &theAmpProfiles[eDefaultVppPreset];
 8006960:	4b19      	ldr	r3, [pc, #100]	; (80069c8 <_InitOutputChannels+0xa8>)
 8006962:	4a1c      	ldr	r2, [pc, #112]	; (80069d4 <_InitOutputChannels+0xb4>)
 8006964:	f8c3 21ec 	str.w	r2, [r3, #492]	; 0x1ec
	SignalChannel.gain_profile = &theGainProfiles[eDefaultGainPreset];
 8006968:	4b17      	ldr	r3, [pc, #92]	; (80069c8 <_InitOutputChannels+0xa8>)
 800696a:	4a1b      	ldr	r2, [pc, #108]	; (80069d8 <_InitOutputChannels+0xb8>)
 800696c:	f8c3 21f0 	str.w	r2, [r3, #496]	; 0x1f0

	// initialise the Aux output channel
	AuxChannel.channel = AUX_CHANNEL;
 8006970:	4b1a      	ldr	r3, [pc, #104]	; (80069dc <_InitOutputChannels+0xbc>)
 8006972:	2201      	movs	r2, #1
 8006974:	701a      	strb	r2, [r3, #0]
	AuxChannel.ref_lut_data = theFuncProfiles[SINE_FUNC_MODE].lookup_table_data;
 8006976:	4b15      	ldr	r3, [pc, #84]	; (80069cc <_InitOutputChannels+0xac>)
 8006978:	685b      	ldr	r3, [r3, #4]
 800697a:	4a18      	ldr	r2, [pc, #96]	; (80069dc <_InitOutputChannels+0xbc>)
 800697c:	6053      	str	r3, [r2, #4]
	AuxChannel.func_profile = &theFuncProfiles[eDefaultFuncPreset];
 800697e:	4b17      	ldr	r3, [pc, #92]	; (80069dc <_InitOutputChannels+0xbc>)
 8006980:	4a12      	ldr	r2, [pc, #72]	; (80069cc <_InitOutputChannels+0xac>)
 8006982:	f8c3 21e8 	str.w	r2, [r3, #488]	; 0x1e8

	for(int i = 0; i < SINE_DATA_SIZE; i++)
 8006986:	2300      	movs	r3, #0
 8006988:	603b      	str	r3, [r7, #0]
 800698a:	e00b      	b.n	80069a4 <_InitOutputChannels+0x84>
		AuxChannel.dsp_lut_data[i] = sine_data_table_3600[i];
 800698c:	4a10      	ldr	r2, [pc, #64]	; (80069d0 <_InitOutputChannels+0xb0>)
 800698e:	683b      	ldr	r3, [r7, #0]
 8006990:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8006994:	4911      	ldr	r1, [pc, #68]	; (80069dc <_InitOutputChannels+0xbc>)
 8006996:	683b      	ldr	r3, [r7, #0]
 8006998:	3302      	adds	r3, #2
 800699a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
	for(int i = 0; i < SINE_DATA_SIZE; i++)
 800699e:	683b      	ldr	r3, [r7, #0]
 80069a0:	3301      	adds	r3, #1
 80069a2:	603b      	str	r3, [r7, #0]
 80069a4:	683b      	ldr	r3, [r7, #0]
 80069a6:	2b77      	cmp	r3, #119	; 0x77
 80069a8:	ddf0      	ble.n	800698c <_InitOutputChannels+0x6c>

	AuxChannel.amp_profile = &theAmpProfiles[eDefaultVppPreset];
 80069aa:	4b0c      	ldr	r3, [pc, #48]	; (80069dc <_InitOutputChannels+0xbc>)
 80069ac:	4a09      	ldr	r2, [pc, #36]	; (80069d4 <_InitOutputChannels+0xb4>)
 80069ae:	f8c3 21ec 	str.w	r2, [r3, #492]	; 0x1ec
	AuxChannel.gain_profile = &theGainProfiles[eDefaultGainPreset];
 80069b2:	4b0a      	ldr	r3, [pc, #40]	; (80069dc <_InitOutputChannels+0xbc>)
 80069b4:	4a08      	ldr	r2, [pc, #32]	; (80069d8 <_InitOutputChannels+0xb8>)
 80069b6:	f8c3 21f0 	str.w	r2, [r3, #496]	; 0x1f0


}
 80069ba:	bf00      	nop
 80069bc:	370c      	adds	r7, #12
 80069be:	46bd      	mov	sp, r7
 80069c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069c4:	4770      	bx	lr
 80069c6:	bf00      	nop
 80069c8:	20002260 	.word	0x20002260
 80069cc:	20000128 	.word	0x20000128
 80069d0:	20001734 	.word	0x20001734
 80069d4:	20000db4 	.word	0x20000db4
 80069d8:	20000175 	.word	0x20000175
 80069dc:	20002454 	.word	0x20002454

080069e0 <SM_GetOutputChannel>:

sOutputChannel_t * SM_GetOutputChannel(eOutputChannel_t pChannel)
{
 80069e0:	b480      	push	{r7}
 80069e2:	b083      	sub	sp, #12
 80069e4:	af00      	add	r7, sp, #0
 80069e6:	4603      	mov	r3, r0
 80069e8:	71fb      	strb	r3, [r7, #7]

	if(!pChannel)
 80069ea:	79fb      	ldrb	r3, [r7, #7]
 80069ec:	2b00      	cmp	r3, #0
 80069ee:	d101      	bne.n	80069f4 <SM_GetOutputChannel+0x14>
		return &SignalChannel;
 80069f0:	4b04      	ldr	r3, [pc, #16]	; (8006a04 <SM_GetOutputChannel+0x24>)
 80069f2:	e000      	b.n	80069f6 <SM_GetOutputChannel+0x16>
	else
		return &AuxChannel;
 80069f4:	4b04      	ldr	r3, [pc, #16]	; (8006a08 <SM_GetOutputChannel+0x28>)
}
 80069f6:	4618      	mov	r0, r3
 80069f8:	370c      	adds	r7, #12
 80069fa:	46bd      	mov	sp, r7
 80069fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a00:	4770      	bx	lr
 8006a02:	bf00      	nop
 8006a04:	20002260 	.word	0x20002260
 8006a08:	20002454 	.word	0x20002454

08006a0c <SM_EnablePwmToAux>:
 *	@param None
 *	@retval None
 *
 */
void SM_EnablePwmToAux()
{
 8006a0c:	b580      	push	{r7, lr}
 8006a0e:	b096      	sub	sp, #88	; 0x58
 8006a10:	af00      	add	r7, sp, #0
	printf("SM_EnablePwmToAux\n");
 8006a12:	4889      	ldr	r0, [pc, #548]	; (8006c38 <SM_EnablePwmToAux+0x22c>)
 8006a14:	f00b fb6a 	bl	80120ec <puts>

	HAL_StatusTypeDef res = 0;
 8006a18:	2300      	movs	r3, #0
 8006a1a:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8006a1e:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8006a22:	2200      	movs	r2, #0
 8006a24:	601a      	str	r2, [r3, #0]
 8006a26:	605a      	str	r2, [r3, #4]
 8006a28:	609a      	str	r2, [r3, #8]
 8006a2a:	60da      	str	r2, [r3, #12]
	TIM_MasterConfigTypeDef sMasterConfig = {0};
 8006a2c:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8006a30:	2200      	movs	r2, #0
 8006a32:	601a      	str	r2, [r3, #0]
 8006a34:	605a      	str	r2, [r3, #4]
 8006a36:	609a      	str	r2, [r3, #8]
	TIM_OC_InitTypeDef sConfigOC = {0};
 8006a38:	f107 031c 	add.w	r3, r7, #28
 8006a3c:	2200      	movs	r2, #0
 8006a3e:	601a      	str	r2, [r3, #0]
 8006a40:	605a      	str	r2, [r3, #4]
 8006a42:	609a      	str	r2, [r3, #8]
 8006a44:	60da      	str	r2, [r3, #12]
 8006a46:	611a      	str	r2, [r3, #16]
 8006a48:	615a      	str	r2, [r3, #20]
 8006a4a:	619a      	str	r2, [r3, #24]
	GPIO_InitTypeDef GPIO_InitStruct = {0};
 8006a4c:	f107 0308 	add.w	r3, r7, #8
 8006a50:	2200      	movs	r2, #0
 8006a52:	601a      	str	r2, [r3, #0]
 8006a54:	605a      	str	r2, [r3, #4]
 8006a56:	609a      	str	r2, [r3, #8]
 8006a58:	60da      	str	r2, [r3, #12]
 8006a5a:	611a      	str	r2, [r3, #16]


	htim3.Instance = PWM_AUX_OUT_TIM;
 8006a5c:	4b77      	ldr	r3, [pc, #476]	; (8006c3c <SM_EnablePwmToAux+0x230>)
 8006a5e:	4a78      	ldr	r2, [pc, #480]	; (8006c40 <SM_EnablePwmToAux+0x234>)
 8006a60:	601a      	str	r2, [r3, #0]
	htim3.Init.Prescaler = 0;
 8006a62:	4b76      	ldr	r3, [pc, #472]	; (8006c3c <SM_EnablePwmToAux+0x230>)
 8006a64:	2200      	movs	r2, #0
 8006a66:	605a      	str	r2, [r3, #4]
	htim3.Init.CounterMode = TIM_COUNTERMODE_DOWN;
 8006a68:	4b74      	ldr	r3, [pc, #464]	; (8006c3c <SM_EnablePwmToAux+0x230>)
 8006a6a:	2210      	movs	r2, #16
 8006a6c:	609a      	str	r2, [r3, #8]
	htim3.Init.Period = 1;
 8006a6e:	4b73      	ldr	r3, [pc, #460]	; (8006c3c <SM_EnablePwmToAux+0x230>)
 8006a70:	2201      	movs	r2, #1
 8006a72:	60da      	str	r2, [r3, #12]
	htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV4;
 8006a74:	4b71      	ldr	r3, [pc, #452]	; (8006c3c <SM_EnablePwmToAux+0x230>)
 8006a76:	f44f 7200 	mov.w	r2, #512	; 0x200
 8006a7a:	611a      	str	r2, [r3, #16]
	htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8006a7c:	4b6f      	ldr	r3, [pc, #444]	; (8006c3c <SM_EnablePwmToAux+0x230>)
 8006a7e:	2280      	movs	r2, #128	; 0x80
 8006a80:	619a      	str	r2, [r3, #24]
	if ((res == HAL_TIM_Base_Init(&htim3)) != HAL_OK)
 8006a82:	486e      	ldr	r0, [pc, #440]	; (8006c3c <SM_EnablePwmToAux+0x230>)
 8006a84:	f006 fe80 	bl	800d788 <HAL_TIM_Base_Init>
 8006a88:	4603      	mov	r3, r0
 8006a8a:	461a      	mov	r2, r3
 8006a8c:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8006a90:	4293      	cmp	r3, r2
 8006a92:	d107      	bne.n	8006aa4 <SM_EnablePwmToAux+0x98>
	{
		printf("SM_EnablePwmToAux HAL_TIM_Base_Init() Result:%u\n",res);
 8006a94:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8006a98:	4619      	mov	r1, r3
 8006a9a:	486a      	ldr	r0, [pc, #424]	; (8006c44 <SM_EnablePwmToAux+0x238>)
 8006a9c:	f00b fab2 	bl	8012004 <iprintf>
		Error_Handler();
 8006aa0:	f001 fb9a 	bl	80081d8 <Error_Handler>
	}
	sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8006aa4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8006aa8:	647b      	str	r3, [r7, #68]	; 0x44
	if ((res == HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig)) != HAL_OK)
 8006aaa:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8006aae:	4619      	mov	r1, r3
 8006ab0:	4862      	ldr	r0, [pc, #392]	; (8006c3c <SM_EnablePwmToAux+0x230>)
 8006ab2:	f007 ffd9 	bl	800ea68 <HAL_TIM_ConfigClockSource>
 8006ab6:	4603      	mov	r3, r0
 8006ab8:	461a      	mov	r2, r3
 8006aba:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8006abe:	4293      	cmp	r3, r2
 8006ac0:	d107      	bne.n	8006ad2 <SM_EnablePwmToAux+0xc6>
	{
		printf("SM_EnablePwmToAux HAL_TIM_ConfigClockSource() Result:%u\n",res);
 8006ac2:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8006ac6:	4619      	mov	r1, r3
 8006ac8:	485f      	ldr	r0, [pc, #380]	; (8006c48 <SM_EnablePwmToAux+0x23c>)
 8006aca:	f00b fa9b 	bl	8012004 <iprintf>
		Error_Handler();
 8006ace:	f001 fb83 	bl	80081d8 <Error_Handler>
	}
	if ((res == HAL_TIM_PWM_Init(&htim3)) != HAL_OK)
 8006ad2:	485a      	ldr	r0, [pc, #360]	; (8006c3c <SM_EnablePwmToAux+0x230>)
 8006ad4:	f006 ff6b 	bl	800d9ae <HAL_TIM_PWM_Init>
 8006ad8:	4603      	mov	r3, r0
 8006ada:	461a      	mov	r2, r3
 8006adc:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8006ae0:	4293      	cmp	r3, r2
 8006ae2:	d107      	bne.n	8006af4 <SM_EnablePwmToAux+0xe8>
	{
		printf("SM_EnablePwmToAux HAL_TIM_PWM_Init() Result:%u\n",res);
 8006ae4:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8006ae8:	4619      	mov	r1, r3
 8006aea:	4858      	ldr	r0, [pc, #352]	; (8006c4c <SM_EnablePwmToAux+0x240>)
 8006aec:	f00b fa8a 	bl	8012004 <iprintf>
		Error_Handler();
 8006af0:	f001 fb72 	bl	80081d8 <Error_Handler>
	}
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 8006af4:	2320      	movs	r3, #32
 8006af6:	63bb      	str	r3, [r7, #56]	; 0x38
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8006af8:	2300      	movs	r3, #0
 8006afa:	643b      	str	r3, [r7, #64]	; 0x40
	if ((res == HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig)) != HAL_OK)
 8006afc:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8006b00:	4619      	mov	r1, r3
 8006b02:	484e      	ldr	r0, [pc, #312]	; (8006c3c <SM_EnablePwmToAux+0x230>)
 8006b04:	f009 f87a 	bl	800fbfc <HAL_TIMEx_MasterConfigSynchronization>
 8006b08:	4603      	mov	r3, r0
 8006b0a:	461a      	mov	r2, r3
 8006b0c:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8006b10:	4293      	cmp	r3, r2
 8006b12:	d107      	bne.n	8006b24 <SM_EnablePwmToAux+0x118>
	{
		printf("SM_EnablePwmToAux HAL_TIMEx_MasterConfigSynchronization() Result:%u\n",res);
 8006b14:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8006b18:	4619      	mov	r1, r3
 8006b1a:	484d      	ldr	r0, [pc, #308]	; (8006c50 <SM_EnablePwmToAux+0x244>)
 8006b1c:	f00b fa72 	bl	8012004 <iprintf>
		Error_Handler();
 8006b20:	f001 fb5a 	bl	80081d8 <Error_Handler>
	}
	sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8006b24:	2360      	movs	r3, #96	; 0x60
 8006b26:	61fb      	str	r3, [r7, #28]
	sConfigOC.Pulse = 0;
 8006b28:	2300      	movs	r3, #0
 8006b2a:	623b      	str	r3, [r7, #32]
	sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8006b2c:	2300      	movs	r3, #0
 8006b2e:	627b      	str	r3, [r7, #36]	; 0x24
	sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8006b30:	2300      	movs	r3, #0
 8006b32:	62fb      	str	r3, [r7, #44]	; 0x2c
	if ((res == HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1)) != HAL_OK)
 8006b34:	f107 031c 	add.w	r3, r7, #28
 8006b38:	2200      	movs	r2, #0
 8006b3a:	4619      	mov	r1, r3
 8006b3c:	483f      	ldr	r0, [pc, #252]	; (8006c3c <SM_EnablePwmToAux+0x230>)
 8006b3e:	f007 fe83 	bl	800e848 <HAL_TIM_PWM_ConfigChannel>
 8006b42:	4603      	mov	r3, r0
 8006b44:	461a      	mov	r2, r3
 8006b46:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8006b4a:	4293      	cmp	r3, r2
 8006b4c:	d107      	bne.n	8006b5e <SM_EnablePwmToAux+0x152>
	{
		printf("SM_EnablePwmToAux HAL_TIM_PWM_ConfigChannel() Result:%u\n",res);
 8006b4e:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8006b52:	4619      	mov	r1, r3
 8006b54:	483f      	ldr	r0, [pc, #252]	; (8006c54 <SM_EnablePwmToAux+0x248>)
 8006b56:	f00b fa55 	bl	8012004 <iprintf>
		Error_Handler();
 8006b5a:	f001 fb3d 	bl	80081d8 <Error_Handler>
	}


	// Timer Post Initialization
	printf("SM_EnablePwmToAux: __HAL_RCC_GPIOA_CLK_ENABLE\n");
 8006b5e:	483e      	ldr	r0, [pc, #248]	; (8006c58 <SM_EnablePwmToAux+0x24c>)
 8006b60:	f00b fac4 	bl	80120ec <puts>
	__HAL_RCC_GPIOA_CLK_ENABLE();
 8006b64:	4b3d      	ldr	r3, [pc, #244]	; (8006c5c <SM_EnablePwmToAux+0x250>)
 8006b66:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006b68:	4a3c      	ldr	r2, [pc, #240]	; (8006c5c <SM_EnablePwmToAux+0x250>)
 8006b6a:	f043 0301 	orr.w	r3, r3, #1
 8006b6e:	64d3      	str	r3, [r2, #76]	; 0x4c
 8006b70:	4b3a      	ldr	r3, [pc, #232]	; (8006c5c <SM_EnablePwmToAux+0x250>)
 8006b72:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006b74:	f003 0301 	and.w	r3, r3, #1
 8006b78:	607b      	str	r3, [r7, #4]
 8006b7a:	687b      	ldr	r3, [r7, #4]
	/**PWM_AUX_OUT_TIM GPIO Configuration
	PA4     ------> PWM_AUX_OUT_TIM_CH2
	*/
	GPIO_InitStruct.Pin = GPIO_PIN_6;
 8006b7c:	2340      	movs	r3, #64	; 0x40
 8006b7e:	60bb      	str	r3, [r7, #8]
	GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8006b80:	2302      	movs	r3, #2
 8006b82:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006b84:	2300      	movs	r3, #0
 8006b86:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8006b88:	2300      	movs	r3, #0
 8006b8a:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8006b8c:	2302      	movs	r3, #2
 8006b8e:	61bb      	str	r3, [r7, #24]
	printf("SM_EnablePwmToAux: HAL_GPIO_Init\n");
 8006b90:	4833      	ldr	r0, [pc, #204]	; (8006c60 <SM_EnablePwmToAux+0x254>)
 8006b92:	f00b faab 	bl	80120ec <puts>
	HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8006b96:	f107 0308 	add.w	r3, r7, #8
 8006b9a:	4619      	mov	r1, r3
 8006b9c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8006ba0:	f005 faec 	bl	800c17c <HAL_GPIO_Init>


	// PWM_AUX_OUT_TIM_MspInit 0

	/* PWM_AUX_OUT_TIM clock enable */
	printf("SM_EnablePwmToAux: __HAL_RCC_PWM_AUX_OUT_TIM_CLK_ENABLE\n");
 8006ba4:	482f      	ldr	r0, [pc, #188]	; (8006c64 <SM_EnablePwmToAux+0x258>)
 8006ba6:	f00b faa1 	bl	80120ec <puts>
	__HAL_RCC_TIM3_CLK_ENABLE();
 8006baa:	4b2c      	ldr	r3, [pc, #176]	; (8006c5c <SM_EnablePwmToAux+0x250>)
 8006bac:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006bae:	4a2b      	ldr	r2, [pc, #172]	; (8006c5c <SM_EnablePwmToAux+0x250>)
 8006bb0:	f043 0302 	orr.w	r3, r3, #2
 8006bb4:	6593      	str	r3, [r2, #88]	; 0x58
 8006bb6:	4b29      	ldr	r3, [pc, #164]	; (8006c5c <SM_EnablePwmToAux+0x250>)
 8006bb8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006bba:	f003 0302 	and.w	r3, r3, #2
 8006bbe:	603b      	str	r3, [r7, #0]
 8006bc0:	683b      	ldr	r3, [r7, #0]

	/* PWM_AUX_OUT_TIM interrupt Init */
	printf("SM_EnablePwmToAux: HAL_NVIC_SetPriority\n");
 8006bc2:	4829      	ldr	r0, [pc, #164]	; (8006c68 <SM_EnablePwmToAux+0x25c>)
 8006bc4:	f00b fa92 	bl	80120ec <puts>
	HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 8006bc8:	2200      	movs	r2, #0
 8006bca:	2100      	movs	r1, #0
 8006bcc:	201d      	movs	r0, #29
 8006bce:	f004 fb42 	bl	800b256 <HAL_NVIC_SetPriority>
	printf("SM_EnablePwmToAux: HAL_NVIC_EnableIRQ\n");
 8006bd2:	4826      	ldr	r0, [pc, #152]	; (8006c6c <SM_EnablePwmToAux+0x260>)
 8006bd4:	f00b fa8a 	bl	80120ec <puts>
	HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8006bd8:	201d      	movs	r0, #29
 8006bda:	f004 fb56 	bl	800b28a <HAL_NVIC_EnableIRQ>
	/* USER CODE BEGIN PWM_AUX_OUT_TIM_MspInit 1 */

	/* USER CODE END PWM_AUX_OUT_TIM_MspInit 1 */
	printf("SM_EnablePwmToAux: HAL_TIM_PWM_Start\n");
 8006bde:	4824      	ldr	r0, [pc, #144]	; (8006c70 <SM_EnablePwmToAux+0x264>)
 8006be0:	f00b fa84 	bl	80120ec <puts>
	if ((res == HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_1)) != HAL_OK)
 8006be4:	2100      	movs	r1, #0
 8006be6:	4815      	ldr	r0, [pc, #84]	; (8006c3c <SM_EnablePwmToAux+0x230>)
 8006be8:	f006 ff42 	bl	800da70 <HAL_TIM_PWM_Start>
 8006bec:	4603      	mov	r3, r0
 8006bee:	461a      	mov	r2, r3
 8006bf0:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8006bf4:	4293      	cmp	r3, r2
 8006bf6:	d107      	bne.n	8006c08 <SM_EnablePwmToAux+0x1fc>
	{
		printf("SM_EnablePwmToAux HAL_TIM_PWM_Start() Result:%u\n",res);
 8006bf8:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8006bfc:	4619      	mov	r1, r3
 8006bfe:	481d      	ldr	r0, [pc, #116]	; (8006c74 <SM_EnablePwmToAux+0x268>)
 8006c00:	f00b fa00 	bl	8012004 <iprintf>
		Error_Handler();
 8006c04:	f001 fae8 	bl	80081d8 <Error_Handler>
	}

	printf("SM_EnablePwmToAux: GO_ApplyPresetToSignal\n");
 8006c08:	481b      	ldr	r0, [pc, #108]	; (8006c78 <SM_EnablePwmToAux+0x26c>)
 8006c0a:	f00b fa6f 	bl	80120ec <puts>
	GO_ApplyPresetToSignal(eDefaultGainPreset);
 8006c0e:	2007      	movs	r0, #7
 8006c10:	f7ff faea 	bl	80061e8 <GO_ApplyPresetToSignal>

	// 50% duty cycle
	printf("SM_EnablePwmToAux: PWM_AUX_OUT_TIM->CCR1 = 32768\n");
 8006c14:	4819      	ldr	r0, [pc, #100]	; (8006c7c <SM_EnablePwmToAux+0x270>)
 8006c16:	f00b fa69 	bl	80120ec <puts>
	PWM_AUX_OUT_TIM->CCR1 = 32768;
 8006c1a:	4b09      	ldr	r3, [pc, #36]	; (8006c40 <SM_EnablePwmToAux+0x234>)
 8006c1c:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8006c20:	635a      	str	r2, [r3, #52]	; 0x34
	printf("SM_EnablePwmToAux: PWM_AUX_OUT_TIM->ARR = 65535\n");
 8006c22:	4817      	ldr	r0, [pc, #92]	; (8006c80 <SM_EnablePwmToAux+0x274>)
 8006c24:	f00b fa62 	bl	80120ec <puts>
	PWM_AUX_OUT_TIM->ARR = 65535;
 8006c28:	4b05      	ldr	r3, [pc, #20]	; (8006c40 <SM_EnablePwmToAux+0x234>)
 8006c2a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8006c2e:	62da      	str	r2, [r3, #44]	; 0x2c
}
 8006c30:	bf00      	nop
 8006c32:	3758      	adds	r7, #88	; 0x58
 8006c34:	46bd      	mov	sp, r7
 8006c36:	bd80      	pop	{r7, pc}
 8006c38:	080161a0 	.word	0x080161a0
 8006c3c:	200021d8 	.word	0x200021d8
 8006c40:	40000400 	.word	0x40000400
 8006c44:	080161b4 	.word	0x080161b4
 8006c48:	080161e8 	.word	0x080161e8
 8006c4c:	08016224 	.word	0x08016224
 8006c50:	08016254 	.word	0x08016254
 8006c54:	0801629c 	.word	0x0801629c
 8006c58:	080162d8 	.word	0x080162d8
 8006c5c:	40021000 	.word	0x40021000
 8006c60:	08016308 	.word	0x08016308
 8006c64:	0801632c 	.word	0x0801632c
 8006c68:	08016364 	.word	0x08016364
 8006c6c:	0801638c 	.word	0x0801638c
 8006c70:	080163b4 	.word	0x080163b4
 8006c74:	080163dc 	.word	0x080163dc
 8006c78:	08016410 	.word	0x08016410
 8006c7c:	0801643c 	.word	0x0801643c
 8006c80:	08016470 	.word	0x08016470

08006c84 <SM_DisablePwmToAux>:
 *	@param None
 *	@retval None
 *
 */
void SM_DisablePwmToAux()
{
 8006c84:	b580      	push	{r7, lr}
 8006c86:	b082      	sub	sp, #8
 8006c88:	af00      	add	r7, sp, #0
	printf("SM_DisablePwmToAux");
 8006c8a:	4815      	ldr	r0, [pc, #84]	; (8006ce0 <SM_DisablePwmToAux+0x5c>)
 8006c8c:	f00b f9ba 	bl	8012004 <iprintf>

	HAL_StatusTypeDef res = 0;
 8006c90:	2300      	movs	r3, #0
 8006c92:	71fb      	strb	r3, [r7, #7]


	/* USER CODE BEGIN PWM_AUX_OUT_TIM_MspDeInit 0 */
	printf("SM_DisablePwmToAux: HAL_TIM_PWM_Stop\n");
 8006c94:	4813      	ldr	r0, [pc, #76]	; (8006ce4 <SM_DisablePwmToAux+0x60>)
 8006c96:	f00b fa29 	bl	80120ec <puts>
	if ((res == HAL_TIM_PWM_Stop(&htim3, TIM_CHANNEL_1)) != HAL_OK)
 8006c9a:	2100      	movs	r1, #0
 8006c9c:	4812      	ldr	r0, [pc, #72]	; (8006ce8 <SM_DisablePwmToAux+0x64>)
 8006c9e:	f006 ffc1 	bl	800dc24 <HAL_TIM_PWM_Stop>
 8006ca2:	4603      	mov	r3, r0
 8006ca4:	461a      	mov	r2, r3
 8006ca6:	79fb      	ldrb	r3, [r7, #7]
 8006ca8:	4293      	cmp	r3, r2
 8006caa:	d106      	bne.n	8006cba <SM_DisablePwmToAux+0x36>
	{
		printf("SM_DisablePwmToAux HAL_TIM_PWM_Stop() Result:%u\n",res);
 8006cac:	79fb      	ldrb	r3, [r7, #7]
 8006cae:	4619      	mov	r1, r3
 8006cb0:	480e      	ldr	r0, [pc, #56]	; (8006cec <SM_DisablePwmToAux+0x68>)
 8006cb2:	f00b f9a7 	bl	8012004 <iprintf>
		Error_Handler();
 8006cb6:	f001 fa8f 	bl	80081d8 <Error_Handler>
	}
	/* USER CODE END PWM_AUX_OUT_TIM_MspDeInit 0 */
	/* Peripheral clock disable */
	printf("SM_DisablePwmToAux __HAL_RCC_PWM_AUX_OUT_TIM_CLK_DISABLE\n");
 8006cba:	480d      	ldr	r0, [pc, #52]	; (8006cf0 <SM_DisablePwmToAux+0x6c>)
 8006cbc:	f00b fa16 	bl	80120ec <puts>
	__HAL_RCC_TIM3_CLK_DISABLE();
 8006cc0:	4b0c      	ldr	r3, [pc, #48]	; (8006cf4 <SM_DisablePwmToAux+0x70>)
 8006cc2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006cc4:	4a0b      	ldr	r2, [pc, #44]	; (8006cf4 <SM_DisablePwmToAux+0x70>)
 8006cc6:	f023 0302 	bic.w	r3, r3, #2
 8006cca:	6593      	str	r3, [r2, #88]	; 0x58

	/* PWM_AUX_OUT_TIM interrupt Deinit */
	printf("SM_DisablePwmToAux HAL_NVIC_DisableIRQ\n");
 8006ccc:	480a      	ldr	r0, [pc, #40]	; (8006cf8 <SM_DisablePwmToAux+0x74>)
 8006cce:	f00b fa0d 	bl	80120ec <puts>
	HAL_NVIC_DisableIRQ(TIM3_IRQn);
 8006cd2:	201d      	movs	r0, #29
 8006cd4:	f004 fae7 	bl	800b2a6 <HAL_NVIC_DisableIRQ>
	/* USER CODE BEGIN PWM_AUX_OUT_TIM_MspDeInit 1 */

	/* USER CODE END PWM_AUX_OUT_TIM_MspDeInit 1 */
}
 8006cd8:	bf00      	nop
 8006cda:	3708      	adds	r7, #8
 8006cdc:	46bd      	mov	sp, r7
 8006cde:	bd80      	pop	{r7, pc}
 8006ce0:	080164a0 	.word	0x080164a0
 8006ce4:	080164b4 	.word	0x080164b4
 8006ce8:	200021d8 	.word	0x200021d8
 8006cec:	080164dc 	.word	0x080164dc
 8006cf0:	08016510 	.word	0x08016510
 8006cf4:	40021000 	.word	0x40021000
 8006cf8:	0801654c 	.word	0x0801654c

08006cfc <SM_EnableDacToAux>:
 *	@param None
 *	@retval None
 *
 */
void SM_EnableDacToAux()
{
 8006cfc:	b580      	push	{r7, lr}
 8006cfe:	b0b2      	sub	sp, #200	; 0xc8
 8006d00:	af00      	add	r7, sp, #0
	printf("SM_EnableDacToAux");
 8006d02:	4860      	ldr	r0, [pc, #384]	; (8006e84 <SM_EnableDacToAux+0x188>)
 8006d04:	f00b f97e 	bl	8012004 <iprintf>

	HAL_StatusTypeDef res = 0;
 8006d08:	2300      	movs	r3, #0
 8006d0a:	f887 30c7 	strb.w	r3, [r7, #199]	; 0xc7
	DAC_ChannelConfTypeDef sConfig = {0};
 8006d0e:	f107 0394 	add.w	r3, r7, #148	; 0x94
 8006d12:	2230      	movs	r2, #48	; 0x30
 8006d14:	2100      	movs	r1, #0
 8006d16:	4618      	mov	r0, r3
 8006d18:	f00a fd10 	bl	801173c <memset>
	GPIO_InitTypeDef GPIO_InitStruct = {0};
 8006d1c:	f107 0380 	add.w	r3, r7, #128	; 0x80
 8006d20:	2200      	movs	r2, #0
 8006d22:	601a      	str	r2, [r3, #0]
 8006d24:	605a      	str	r2, [r3, #4]
 8006d26:	609a      	str	r2, [r3, #8]
 8006d28:	60da      	str	r2, [r3, #12]
 8006d2a:	611a      	str	r2, [r3, #16]
	DAC_HandleTypeDef hdac2;
	DMA_HandleTypeDef hdma_dac2_ch1;
	/** DAC Initialization
	*/
	hdac2.Instance = DAC2;
 8006d2c:	4b56      	ldr	r3, [pc, #344]	; (8006e88 <SM_EnableDacToAux+0x18c>)
 8006d2e:	66fb      	str	r3, [r7, #108]	; 0x6c
	if ((res == HAL_DAC_Init(&hdac2)) != HAL_OK)
 8006d30:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8006d34:	4618      	mov	r0, r3
 8006d36:	f004 fad0 	bl	800b2da <HAL_DAC_Init>
 8006d3a:	4603      	mov	r3, r0
 8006d3c:	461a      	mov	r2, r3
 8006d3e:	f897 30c7 	ldrb.w	r3, [r7, #199]	; 0xc7
 8006d42:	4293      	cmp	r3, r2
 8006d44:	d107      	bne.n	8006d56 <SM_EnableDacToAux+0x5a>
	{
		printf("SM_EnableDacToAux HAL_DAC_Init() Result:%u\n",res);
 8006d46:	f897 30c7 	ldrb.w	r3, [r7, #199]	; 0xc7
 8006d4a:	4619      	mov	r1, r3
 8006d4c:	484f      	ldr	r0, [pc, #316]	; (8006e8c <SM_EnableDacToAux+0x190>)
 8006d4e:	f00b f959 	bl	8012004 <iprintf>
		Error_Handler();
 8006d52:	f001 fa41 	bl	80081d8 <Error_Handler>
	}
	/** DAC channel OUT1 config
	*/
	sConfig.DAC_HighFrequency = DAC_HIGH_FREQUENCY_INTERFACE_MODE_ABOVE_80MHZ;
 8006d56:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8006d5a:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
	sConfig.DAC_DMADoubleDataMode = DISABLE;
 8006d5e:	2300      	movs	r3, #0
 8006d60:	f887 3098 	strb.w	r3, [r7, #152]	; 0x98
	sConfig.DAC_SignedFormat = DISABLE;
 8006d64:	2300      	movs	r3, #0
 8006d66:	f887 3099 	strb.w	r3, [r7, #153]	; 0x99
	sConfig.DAC_SampleAndHold = DAC_SAMPLEANDHOLD_DISABLE;
 8006d6a:	2300      	movs	r3, #0
 8006d6c:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
	sConfig.DAC_Trigger = DAC_TRIGGER_T8_TRGO;
 8006d70:	2306      	movs	r3, #6
 8006d72:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
	sConfig.DAC_Trigger2 = DAC_TRIGGER_NONE;
 8006d76:	2300      	movs	r3, #0
 8006d78:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
	sConfig.DAC_OutputBuffer = DAC_OUTPUTBUFFER_ENABLE;
 8006d7c:	2300      	movs	r3, #0
 8006d7e:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
	sConfig.DAC_ConnectOnChipPeripheral = DAC_CHIPCONNECT_DISABLE;
 8006d82:	2301      	movs	r3, #1
 8006d84:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
	sConfig.DAC_UserTrimming = DAC_TRIMMING_FACTORY;
 8006d88:	2300      	movs	r3, #0
 8006d8a:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
	if ((res == HAL_DAC_ConfigChannel(&hdac2, &sConfig, DAC_CHANNEL_1)) != HAL_OK)
 8006d8e:	f107 0194 	add.w	r1, r7, #148	; 0x94
 8006d92:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8006d96:	2200      	movs	r2, #0
 8006d98:	4618      	mov	r0, r3
 8006d9a:	f004 fc87 	bl	800b6ac <HAL_DAC_ConfigChannel>
 8006d9e:	4603      	mov	r3, r0
 8006da0:	461a      	mov	r2, r3
 8006da2:	f897 30c7 	ldrb.w	r3, [r7, #199]	; 0xc7
 8006da6:	4293      	cmp	r3, r2
 8006da8:	d107      	bne.n	8006dba <SM_EnableDacToAux+0xbe>
	{
		printf("SM_EnableDacToAux HAL_DAC_ConfigChannel() Result:%u\n",res);
 8006daa:	f897 30c7 	ldrb.w	r3, [r7, #199]	; 0xc7
 8006dae:	4619      	mov	r1, r3
 8006db0:	4837      	ldr	r0, [pc, #220]	; (8006e90 <SM_EnableDacToAux+0x194>)
 8006db2:	f00b f927 	bl	8012004 <iprintf>
		Error_Handler();
 8006db6:	f001 fa0f 	bl	80081d8 <Error_Handler>

	/* USER CODE BEGIN DAC2_MspInit 0 */

	/* USER CODE END DAC2_MspInit 0 */
	/* DAC2 clock enable */
	printf("SM_EnableDacToAux __HAL_RCC_DAC2_CLK_ENABLE()\n");
 8006dba:	4836      	ldr	r0, [pc, #216]	; (8006e94 <SM_EnableDacToAux+0x198>)
 8006dbc:	f00b f996 	bl	80120ec <puts>
	__HAL_RCC_DAC2_CLK_ENABLE();
 8006dc0:	4b35      	ldr	r3, [pc, #212]	; (8006e98 <SM_EnableDacToAux+0x19c>)
 8006dc2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006dc4:	4a34      	ldr	r2, [pc, #208]	; (8006e98 <SM_EnableDacToAux+0x19c>)
 8006dc6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8006dca:	64d3      	str	r3, [r2, #76]	; 0x4c
 8006dcc:	4b32      	ldr	r3, [pc, #200]	; (8006e98 <SM_EnableDacToAux+0x19c>)
 8006dce:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006dd0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006dd4:	60bb      	str	r3, [r7, #8]
 8006dd6:	68bb      	ldr	r3, [r7, #8]

	printf("SM_EnableDacToAux __HAL_RCC_GPIOA_CLK_ENABLE()\n");
 8006dd8:	4830      	ldr	r0, [pc, #192]	; (8006e9c <SM_EnableDacToAux+0x1a0>)
 8006dda:	f00b f987 	bl	80120ec <puts>
	__HAL_RCC_GPIOA_CLK_ENABLE();
 8006dde:	4b2e      	ldr	r3, [pc, #184]	; (8006e98 <SM_EnableDacToAux+0x19c>)
 8006de0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006de2:	4a2d      	ldr	r2, [pc, #180]	; (8006e98 <SM_EnableDacToAux+0x19c>)
 8006de4:	f043 0301 	orr.w	r3, r3, #1
 8006de8:	64d3      	str	r3, [r2, #76]	; 0x4c
 8006dea:	4b2b      	ldr	r3, [pc, #172]	; (8006e98 <SM_EnableDacToAux+0x19c>)
 8006dec:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006dee:	f003 0301 	and.w	r3, r3, #1
 8006df2:	607b      	str	r3, [r7, #4]
 8006df4:	687b      	ldr	r3, [r7, #4]
	/**DAC2 GPIO Configuration
	PA6     ------> DAC2_OUT1
	*/
	GPIO_InitStruct.Pin = GPIO_PIN_6;
 8006df6:	2340      	movs	r3, #64	; 0x40
 8006df8:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
	GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8006dfc:	2303      	movs	r3, #3
 8006dfe:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006e02:	2300      	movs	r3, #0
 8006e04:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
	printf("SM_EnableDacToAux HAL_GPIO_Init()\n");
 8006e08:	4825      	ldr	r0, [pc, #148]	; (8006ea0 <SM_EnableDacToAux+0x1a4>)
 8006e0a:	f00b f96f 	bl	80120ec <puts>
	HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8006e0e:	f107 0380 	add.w	r3, r7, #128	; 0x80
 8006e12:	4619      	mov	r1, r3
 8006e14:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8006e18:	f005 f9b0 	bl	800c17c <HAL_GPIO_Init>

	/* DAC2 DMA Init */
	/* DAC2_CH1 Init */
	hdma_dac2_ch1.Instance = DMA1_Channel3;
 8006e1c:	4b21      	ldr	r3, [pc, #132]	; (8006ea4 <SM_EnableDacToAux+0x1a8>)
 8006e1e:	60fb      	str	r3, [r7, #12]
	hdma_dac2_ch1.Init.Request = DMA_REQUEST_DAC2_CHANNEL1;
 8006e20:	2329      	movs	r3, #41	; 0x29
 8006e22:	613b      	str	r3, [r7, #16]
	hdma_dac2_ch1.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8006e24:	2310      	movs	r3, #16
 8006e26:	617b      	str	r3, [r7, #20]
	hdma_dac2_ch1.Init.PeriphInc = DMA_PINC_DISABLE;
 8006e28:	2300      	movs	r3, #0
 8006e2a:	61bb      	str	r3, [r7, #24]
	hdma_dac2_ch1.Init.MemInc = DMA_MINC_ENABLE;
 8006e2c:	2380      	movs	r3, #128	; 0x80
 8006e2e:	61fb      	str	r3, [r7, #28]
	hdma_dac2_ch1.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8006e30:	f44f 7300 	mov.w	r3, #512	; 0x200
 8006e34:	623b      	str	r3, [r7, #32]
	hdma_dac2_ch1.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8006e36:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8006e3a:	627b      	str	r3, [r7, #36]	; 0x24
	hdma_dac2_ch1.Init.Mode = DMA_CIRCULAR;
 8006e3c:	2320      	movs	r3, #32
 8006e3e:	62bb      	str	r3, [r7, #40]	; 0x28
	hdma_dac2_ch1.Init.Priority = DMA_PRIORITY_LOW;
 8006e40:	2300      	movs	r3, #0
 8006e42:	62fb      	str	r3, [r7, #44]	; 0x2c
	if ((res == HAL_DMA_Init(&hdma_dac2_ch1)) != HAL_OK)
 8006e44:	f107 030c 	add.w	r3, r7, #12
 8006e48:	4618      	mov	r0, r3
 8006e4a:	f004 fe65 	bl	800bb18 <HAL_DMA_Init>
 8006e4e:	4603      	mov	r3, r0
 8006e50:	461a      	mov	r2, r3
 8006e52:	f897 30c7 	ldrb.w	r3, [r7, #199]	; 0xc7
 8006e56:	4293      	cmp	r3, r2
 8006e58:	d107      	bne.n	8006e6a <SM_EnableDacToAux+0x16e>
	{
		printf("SM_EnableDacToAux HAL_DMA_Init() Result:%u\n",res);
 8006e5a:	f897 30c7 	ldrb.w	r3, [r7, #199]	; 0xc7
 8006e5e:	4619      	mov	r1, r3
 8006e60:	4811      	ldr	r0, [pc, #68]	; (8006ea8 <SM_EnableDacToAux+0x1ac>)
 8006e62:	f00b f8cf 	bl	8012004 <iprintf>
		Error_Handler();
 8006e66:	f001 f9b7 	bl	80081d8 <Error_Handler>
	}

	printf("SM_EnableDacToAux __HAL_LINKDMA()\n");
 8006e6a:	4810      	ldr	r0, [pc, #64]	; (8006eac <SM_EnableDacToAux+0x1b0>)
 8006e6c:	f00b f93e 	bl	80120ec <puts>
	__HAL_LINKDMA(&hdac2,DMA_Handle1,hdma_dac2_ch1);
 8006e70:	f107 030c 	add.w	r3, r7, #12
 8006e74:	677b      	str	r3, [r7, #116]	; 0x74
 8006e76:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8006e7a:	637b      	str	r3, [r7, #52]	; 0x34

    //GO_ApplyPresetToAux(eDefaultGainPreset);
}
 8006e7c:	bf00      	nop
 8006e7e:	37c8      	adds	r7, #200	; 0xc8
 8006e80:	46bd      	mov	sp, r7
 8006e82:	bd80      	pop	{r7, pc}
 8006e84:	08016574 	.word	0x08016574
 8006e88:	50000c00 	.word	0x50000c00
 8006e8c:	08016588 	.word	0x08016588
 8006e90:	080165b4 	.word	0x080165b4
 8006e94:	080165ec 	.word	0x080165ec
 8006e98:	40021000 	.word	0x40021000
 8006e9c:	0801661c 	.word	0x0801661c
 8006ea0:	0801664c 	.word	0x0801664c
 8006ea4:	40020030 	.word	0x40020030
 8006ea8:	08016670 	.word	0x08016670
 8006eac:	0801669c 	.word	0x0801669c

08006eb0 <SM_DisableDacToAux>:
 *	@param None
 *	@retval None
 *
 */
void SM_DisableDacToAux()
{
 8006eb0:	b580      	push	{r7, lr}
 8006eb2:	af00      	add	r7, sp, #0


	printf("SM_DisableDacToAux\n");
 8006eb4:	4806      	ldr	r0, [pc, #24]	; (8006ed0 <SM_DisableDacToAux+0x20>)
 8006eb6:	f00b f919 	bl	80120ec <puts>
    //__HAL_RCC_DAC2_CLK_DISABLE();

    /**DAC2 GPIO Configuration
    PA6     ------> DAC2_OUT1
    */
	printf("SM_DisableDacToAux HAL_GPIO_DeInit\n");
 8006eba:	4806      	ldr	r0, [pc, #24]	; (8006ed4 <SM_DisableDacToAux+0x24>)
 8006ebc:	f00b f916 	bl	80120ec <puts>
    HAL_GPIO_DeInit(GPIOA, GPIO_PIN_6);
 8006ec0:	2140      	movs	r1, #64	; 0x40
 8006ec2:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8006ec6:	f005 fadb 	bl	800c480 <HAL_GPIO_DeInit>

}
 8006eca:	bf00      	nop
 8006ecc:	bd80      	pop	{r7, pc}
 8006ece:	bf00      	nop
 8006ed0:	080166c0 	.word	0x080166c0
 8006ed4:	080166d4 	.word	0x080166d4

08006ed8 <SM_GetEncoderValue>:
 *	@param None
 *	@retval None
 *
 */
uint16_t SM_GetEncoderValue(eEncoder_Inversion direction)
{
 8006ed8:	b480      	push	{r7}
 8006eda:	b083      	sub	sp, #12
 8006edc:	af00      	add	r7, sp, #0
 8006ede:	4603      	mov	r3, r0
 8006ee0:	71fb      	strb	r3, [r7, #7]
	if(direction)
 8006ee2:	79fb      	ldrb	r3, [r7, #7]
 8006ee4:	2b00      	cmp	r3, #0
 8006ee6:	d008      	beq.n	8006efa <SM_GetEncoderValue+0x22>
	{
		return ENCODER_TIMER->ARR - ENCODER_TIMER->CNT;
 8006ee8:	4b08      	ldr	r3, [pc, #32]	; (8006f0c <SM_GetEncoderValue+0x34>)
 8006eea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006eec:	b29a      	uxth	r2, r3
 8006eee:	4b07      	ldr	r3, [pc, #28]	; (8006f0c <SM_GetEncoderValue+0x34>)
 8006ef0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006ef2:	b29b      	uxth	r3, r3
 8006ef4:	1ad3      	subs	r3, r2, r3
 8006ef6:	b29b      	uxth	r3, r3
 8006ef8:	e002      	b.n	8006f00 <SM_GetEncoderValue+0x28>
	}
	else
	{
		return ENCODER_TIMER->CNT;
 8006efa:	4b04      	ldr	r3, [pc, #16]	; (8006f0c <SM_GetEncoderValue+0x34>)
 8006efc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006efe:	b29b      	uxth	r3, r3
	}
}
 8006f00:	4618      	mov	r0, r3
 8006f02:	370c      	adds	r7, #12
 8006f04:	46bd      	mov	sp, r7
 8006f06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f0a:	4770      	bx	lr
 8006f0c:	40012c00 	.word	0x40012c00

08006f10 <SM_GetOutputInHertz>:
 *	@param None
 *	@retval None
 *
 */
float SM_GetOutputInHertz()
{
 8006f10:	b480      	push	{r7}
 8006f12:	b085      	sub	sp, #20
 8006f14:	af00      	add	r7, sp, #0
	volatile float output_tm_psc;
	volatile float output_tm_arr;

	// safe-guard against divide by zero
	(OUTPUT_TIMER->PSC == 0) ? (output_tm_psc = 1) : (output_tm_psc = OUTPUT_TIMER->PSC);
 8006f16:	4b1d      	ldr	r3, [pc, #116]	; (8006f8c <SM_GetOutputInHertz+0x7c>)
 8006f18:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006f1a:	2b00      	cmp	r3, #0
 8006f1c:	d103      	bne.n	8006f26 <SM_GetOutputInHertz+0x16>
 8006f1e:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 8006f22:	60bb      	str	r3, [r7, #8]
 8006f24:	e007      	b.n	8006f36 <SM_GetOutputInHertz+0x26>
 8006f26:	4b19      	ldr	r3, [pc, #100]	; (8006f8c <SM_GetOutputInHertz+0x7c>)
 8006f28:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006f2a:	ee07 3a90 	vmov	s15, r3
 8006f2e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006f32:	edc7 7a02 	vstr	s15, [r7, #8]
	(OUTPUT_TIMER->ARR == 0) ? (output_tm_arr = 1) : (output_tm_arr = OUTPUT_TIMER->ARR);
 8006f36:	4b15      	ldr	r3, [pc, #84]	; (8006f8c <SM_GetOutputInHertz+0x7c>)
 8006f38:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006f3a:	2b00      	cmp	r3, #0
 8006f3c:	d103      	bne.n	8006f46 <SM_GetOutputInHertz+0x36>
 8006f3e:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 8006f42:	607b      	str	r3, [r7, #4]
 8006f44:	e007      	b.n	8006f56 <SM_GetOutputInHertz+0x46>
 8006f46:	4b11      	ldr	r3, [pc, #68]	; (8006f8c <SM_GetOutputInHertz+0x7c>)
 8006f48:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006f4a:	ee07 3a90 	vmov	s15, r3
 8006f4e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006f52:	edc7 7a01 	vstr	s15, [r7, #4]

	float output_tm_freq = SM_MCLK / (output_tm_psc * output_tm_arr);
 8006f56:	ed97 7a02 	vldr	s14, [r7, #8]
 8006f5a:	edd7 7a01 	vldr	s15, [r7, #4]
 8006f5e:	ee27 7a27 	vmul.f32	s14, s14, s15
 8006f62:	eddf 6a0b 	vldr	s13, [pc, #44]	; 8006f90 <SM_GetOutputInHertz+0x80>
 8006f66:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8006f6a:	edc7 7a03 	vstr	s15, [r7, #12]


	return output_tm_freq / SM_FSAMP;
 8006f6e:	edd7 7a03 	vldr	s15, [r7, #12]
 8006f72:	ed9f 7a08 	vldr	s14, [pc, #32]	; 8006f94 <SM_GetOutputInHertz+0x84>
 8006f76:	eec7 6a87 	vdiv.f32	s13, s15, s14
 8006f7a:	eef0 7a66 	vmov.f32	s15, s13
}
 8006f7e:	eeb0 0a67 	vmov.f32	s0, s15
 8006f82:	3714      	adds	r7, #20
 8006f84:	46bd      	mov	sp, r7
 8006f86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f8a:	4770      	bx	lr
 8006f8c:	40013400 	.word	0x40013400
 8006f90:	4d2037a0 	.word	0x4d2037a0
 8006f94:	42f00000 	.word	0x42f00000

08006f98 <SM_ConvertPeriodToHertz>:


float SM_ConvertPeriodToHertz(uint32_t period, uint16_t psc)
{
 8006f98:	b480      	push	{r7}
 8006f9a:	b083      	sub	sp, #12
 8006f9c:	af00      	add	r7, sp, #0
 8006f9e:	6078      	str	r0, [r7, #4]
 8006fa0:	460b      	mov	r3, r1
 8006fa2:	807b      	strh	r3, [r7, #2]
	(psc == 0) ? (psc = 1) : psc;
 8006fa4:	887b      	ldrh	r3, [r7, #2]
 8006fa6:	2b00      	cmp	r3, #0
 8006fa8:	d101      	bne.n	8006fae <SM_ConvertPeriodToHertz+0x16>
 8006faa:	2301      	movs	r3, #1
 8006fac:	807b      	strh	r3, [r7, #2]

	return (float)SM_MCLK / ( (float)psc * (float)period );
 8006fae:	887b      	ldrh	r3, [r7, #2]
 8006fb0:	ee07 3a90 	vmov	s15, r3
 8006fb4:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8006fb8:	687b      	ldr	r3, [r7, #4]
 8006fba:	ee07 3a90 	vmov	s15, r3
 8006fbe:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006fc2:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006fc6:	ed9f 7a06 	vldr	s14, [pc, #24]	; 8006fe0 <SM_ConvertPeriodToHertz+0x48>
 8006fca:	eec7 6a27 	vdiv.f32	s13, s14, s15
 8006fce:	eef0 7a66 	vmov.f32	s15, s13
}
 8006fd2:	eeb0 0a67 	vmov.f32	s0, s15
 8006fd6:	370c      	adds	r7, #12
 8006fd8:	46bd      	mov	sp, r7
 8006fda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fde:	4770      	bx	lr
 8006fe0:	4d2037a0 	.word	0x4d2037a0

08006fe4 <SM_IsFuncPwmDutyMode>:
	return (SM_MCLK / hertz) / psc;
}


uint8_t SM_IsFuncPwmDutyMode()
{
 8006fe4:	b480      	push	{r7}
 8006fe6:	af00      	add	r7, sp, #0
	return duty_adjust_mode;
 8006fe8:	4b03      	ldr	r3, [pc, #12]	; (8006ff8 <SM_IsFuncPwmDutyMode+0x14>)
 8006fea:	781b      	ldrb	r3, [r3, #0]
}
 8006fec:	4618      	mov	r0, r3
 8006fee:	46bd      	mov	sp, r7
 8006ff0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ff4:	4770      	bx	lr
 8006ff6:	bf00      	nop
 8006ff8:	20002154 	.word	0x20002154

08006ffc <SM_ToggleFuncPwmDutyMode>:

void SM_ToggleFuncPwmDutyMode()
{
 8006ffc:	b480      	push	{r7}
 8006ffe:	af00      	add	r7, sp, #0
	duty_adjust_mode ^= 1;
 8007000:	4b05      	ldr	r3, [pc, #20]	; (8007018 <SM_ToggleFuncPwmDutyMode+0x1c>)
 8007002:	781b      	ldrb	r3, [r3, #0]
 8007004:	f083 0301 	eor.w	r3, r3, #1
 8007008:	b2da      	uxtb	r2, r3
 800700a:	4b03      	ldr	r3, [pc, #12]	; (8007018 <SM_ToggleFuncPwmDutyMode+0x1c>)
 800700c:	701a      	strb	r2, [r3, #0]
}
 800700e:	bf00      	nop
 8007010:	46bd      	mov	sp, r7
 8007012:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007016:	4770      	bx	lr
 8007018:	20002154 	.word	0x20002154

0800701c <SM_ResetFuncPwmDutyMode>:

void SM_ResetFuncPwmDutyMode()
{
 800701c:	b480      	push	{r7}
 800701e:	af00      	add	r7, sp, #0
	duty_adjust_mode = 0;
 8007020:	4b03      	ldr	r3, [pc, #12]	; (8007030 <SM_ResetFuncPwmDutyMode+0x14>)
 8007022:	2200      	movs	r2, #0
 8007024:	701a      	strb	r2, [r3, #0]

}
 8007026:	bf00      	nop
 8007028:	46bd      	mov	sp, r7
 800702a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800702e:	4770      	bx	lr
 8007030:	20002154 	.word	0x20002154

08007034 <VPP_ResetLastEncoderValue>:
 *	@param None
 *	@retval None
 *
 */
void VPP_ResetLastEncoderValue()
{
 8007034:	b480      	push	{r7}
 8007036:	af00      	add	r7, sp, #0
	amp_last_encoder_value = 0;
 8007038:	4b03      	ldr	r3, [pc, #12]	; (8007048 <VPP_ResetLastEncoderValue+0x14>)
 800703a:	2200      	movs	r2, #0
 800703c:	801a      	strh	r2, [r3, #0]
}
 800703e:	bf00      	nop
 8007040:	46bd      	mov	sp, r7
 8007042:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007046:	4770      	bx	lr
 8007048:	20002156 	.word	0x20002156

0800704c <VPP_ApplyProfileToSignal>:
 *	@param None
 *	@retval None
 *
 */
void VPP_ApplyProfileToSignal(eAmpSettings_t pPresetEnum)
{
 800704c:	b580      	push	{r7, lr}
 800704e:	b084      	sub	sp, #16
 8007050:	af00      	add	r7, sp, #0
 8007052:	4603      	mov	r3, r0
 8007054:	71fb      	strb	r3, [r7, #7]
	// retrieve the next preset
	AmplitudeProfile_t* pNextEncPreset = &theAmpProfiles[pPresetEnum];
 8007056:	79fa      	ldrb	r2, [r7, #7]
 8007058:	4613      	mov	r3, r2
 800705a:	00db      	lsls	r3, r3, #3
 800705c:	1a9b      	subs	r3, r3, r2
 800705e:	009b      	lsls	r3, r3, #2
 8007060:	4a10      	ldr	r2, [pc, #64]	; (80070a4 <VPP_ApplyProfileToSignal+0x58>)
 8007062:	4413      	add	r3, r2
 8007064:	60fb      	str	r3, [r7, #12]

	// Set the new  amp profile to the SignalChannel object
	SM_GetOutputChannel(SIGNAL_CHANNEL)->amp_profile = pNextEncPreset;
 8007066:	2000      	movs	r0, #0
 8007068:	f7ff fcba 	bl	80069e0 <SM_GetOutputChannel>
 800706c:	4602      	mov	r2, r0
 800706e:	68fb      	ldr	r3, [r7, #12]
 8007070:	f8c2 31ec 	str.w	r3, [r2, #492]	; 0x1ec

    // set the gain preset
	GO_ApplyPresetToSignal(pNextEncPreset->gain_preset);
 8007074:	68fb      	ldr	r3, [r7, #12]
 8007076:	7a1b      	ldrb	r3, [r3, #8]
 8007078:	4618      	mov	r0, r3
 800707a:	f7ff f8b5 	bl	80061e8 <GO_ApplyPresetToSignal>

    // Apply the next amplitude setting to the SignalChannel object
    _ProcessSignalDataTable(pNextEncPreset->neg_gain_coeff, pNextEncPreset->amp_offset , pNextEncPreset->epos);
 800707e:	68fb      	ldr	r3, [r7, #12]
 8007080:	edd3 7a04 	vldr	s15, [r3, #16]
 8007084:	68fb      	ldr	r3, [r7, #12]
 8007086:	ed93 7a05 	vldr	s14, [r3, #20]
 800708a:	68fb      	ldr	r3, [r7, #12]
 800708c:	8b1b      	ldrh	r3, [r3, #24]
 800708e:	4618      	mov	r0, r3
 8007090:	eef0 0a47 	vmov.f32	s1, s14
 8007094:	eeb0 0a67 	vmov.f32	s0, s15
 8007098:	f000 f830 	bl	80070fc <_ProcessSignalDataTable>


}
 800709c:	bf00      	nop
 800709e:	3710      	adds	r7, #16
 80070a0:	46bd      	mov	sp, r7
 80070a2:	bd80      	pop	{r7, pc}
 80070a4:	200003f8 	.word	0x200003f8

080070a8 <VPP_ApplyProfileToAux>:
 *	@param None
 *	@retval None
 *
 */
void VPP_ApplyProfileToAux(eAmpSettings_t pPresetEnum)
{
 80070a8:	b580      	push	{r7, lr}
 80070aa:	b084      	sub	sp, #16
 80070ac:	af00      	add	r7, sp, #0
 80070ae:	4603      	mov	r3, r0
 80070b0:	71fb      	strb	r3, [r7, #7]

	// retrieve the next preset
	AmplitudeProfile_t* pNextEncPreset = &theAmpProfiles[pPresetEnum];
 80070b2:	79fa      	ldrb	r2, [r7, #7]
 80070b4:	4613      	mov	r3, r2
 80070b6:	00db      	lsls	r3, r3, #3
 80070b8:	1a9b      	subs	r3, r3, r2
 80070ba:	009b      	lsls	r3, r3, #2
 80070bc:	4a0e      	ldr	r2, [pc, #56]	; (80070f8 <VPP_ApplyProfileToAux+0x50>)
 80070be:	4413      	add	r3, r2
 80070c0:	60fb      	str	r3, [r7, #12]

	// Set the new VPP Preset to the AuxChannel object
	SM_GetOutputChannel(AUX_CHANNEL)->amp_profile = pNextEncPreset;
 80070c2:	2001      	movs	r0, #1
 80070c4:	f7ff fc8c 	bl	80069e0 <SM_GetOutputChannel>
 80070c8:	4602      	mov	r2, r0
 80070ca:	68fb      	ldr	r3, [r7, #12]
 80070cc:	f8c2 31ec 	str.w	r3, [r2, #492]	; 0x1ec

	 // set the gain preset
	//GO_ApplyPresetToAux(pNextEncPreset->gain_preset);

	// Apply the next amplitude setting to the AuxChannel object
	_ProcessAuxDataTable(pNextEncPreset->neg_gain_coeff, pNextEncPreset->amp_offset , pNextEncPreset->epos);
 80070d0:	68fb      	ldr	r3, [r7, #12]
 80070d2:	edd3 7a04 	vldr	s15, [r3, #16]
 80070d6:	68fb      	ldr	r3, [r7, #12]
 80070d8:	ed93 7a05 	vldr	s14, [r3, #20]
 80070dc:	68fb      	ldr	r3, [r7, #12]
 80070de:	8b1b      	ldrh	r3, [r3, #24]
 80070e0:	4618      	mov	r0, r3
 80070e2:	eef0 0a47 	vmov.f32	s1, s14
 80070e6:	eeb0 0a67 	vmov.f32	s0, s15
 80070ea:	f000 f88d 	bl	8007208 <_ProcessAuxDataTable>



}
 80070ee:	bf00      	nop
 80070f0:	3710      	adds	r7, #16
 80070f2:	46bd      	mov	sp, r7
 80070f4:	bd80      	pop	{r7, pc}
 80070f6:	bf00      	nop
 80070f8:	200003f8 	.word	0x200003f8

080070fc <_ProcessSignalDataTable>:
 *	@param None
 *	@retval None
 *
 */
void _ProcessSignalDataTable(float _neg_gain_coeff, float amp_offset, uint16_t _encoder_value)
{
 80070fc:	b580      	push	{r7, lr}
 80070fe:	b08a      	sub	sp, #40	; 0x28
 8007100:	af00      	add	r7, sp, #0
 8007102:	ed87 0a03 	vstr	s0, [r7, #12]
 8007106:	edc7 0a02 	vstr	s1, [r7, #8]
 800710a:	4603      	mov	r3, r0
 800710c:	80fb      	strh	r3, [r7, #6]
	sOutputChannel_t * pTmpOutputChannel = SM_GetOutputChannel(SIGNAL_CHANNEL);
 800710e:	2000      	movs	r0, #0
 8007110:	f7ff fc66 	bl	80069e0 <SM_GetOutputChannel>
 8007114:	6178      	str	r0, [r7, #20]
	if(pTmpOutputChannel->func_profile->func != PWM_FUNC_MODE)
 8007116:	697b      	ldr	r3, [r7, #20]
 8007118:	f8d3 31e8 	ldr.w	r3, [r3, #488]	; 0x1e8
 800711c:	781b      	ldrb	r3, [r3, #0]
 800711e:	2b06      	cmp	r3, #6
 8007120:	d06b      	beq.n	80071fa <_ProcessSignalDataTable+0xfe>
	{
		// copy refer lookup datat table from SignalChannel object
		for(int i = 0; i < SINE_DATA_SIZE; i++)
 8007122:	2300      	movs	r3, #0
 8007124:	627b      	str	r3, [r7, #36]	; 0x24
 8007126:	e00c      	b.n	8007142 <_ProcessSignalDataTable+0x46>
		{
			tmpDataTable[i] = pTmpOutputChannel->ref_lut_data[i];
 8007128:	697b      	ldr	r3, [r7, #20]
 800712a:	685a      	ldr	r2, [r3, #4]
 800712c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800712e:	009b      	lsls	r3, r3, #2
 8007130:	4413      	add	r3, r2
 8007132:	681a      	ldr	r2, [r3, #0]
 8007134:	4933      	ldr	r1, [pc, #204]	; (8007204 <_ProcessSignalDataTable+0x108>)
 8007136:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007138:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
		for(int i = 0; i < SINE_DATA_SIZE; i++)
 800713c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800713e:	3301      	adds	r3, #1
 8007140:	627b      	str	r3, [r7, #36]	; 0x24
 8007142:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007144:	2b77      	cmp	r3, #119	; 0x77
 8007146:	ddef      	ble.n	8007128 <_ProcessSignalDataTable+0x2c>
		}

		// calculate positive offset coefficient from encoder position
		float pos_offset_coeff = 1;
 8007148:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 800714c:	623b      	str	r3, [r7, #32]
		if(_encoder_value)
 800714e:	88fb      	ldrh	r3, [r7, #6]
 8007150:	2b00      	cmp	r3, #0
 8007152:	d008      	beq.n	8007166 <_ProcessSignalDataTable+0x6a>
		{
			pos_offset_coeff = (_encoder_value/4);
 8007154:	88fb      	ldrh	r3, [r7, #6]
 8007156:	089b      	lsrs	r3, r3, #2
 8007158:	b29b      	uxth	r3, r3
 800715a:	ee07 3a90 	vmov	s15, r3
 800715e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8007162:	edc7 7a08 	vstr	s15, [r7, #32]
		}

		// adjust amplitude and offset of lookup table copy
		for(int i = 0; i < SINE_DATA_SIZE; i++)
 8007166:	2300      	movs	r3, #0
 8007168:	61fb      	str	r3, [r7, #28]
 800716a:	e02e      	b.n	80071ca <_ProcessSignalDataTable+0xce>
		{
			tmpDataTable[i] = tmpDataTable[i] * (_neg_gain_coeff);
 800716c:	4a25      	ldr	r2, [pc, #148]	; (8007204 <_ProcessSignalDataTable+0x108>)
 800716e:	69fb      	ldr	r3, [r7, #28]
 8007170:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8007174:	ee07 3a90 	vmov	s15, r3
 8007178:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800717c:	edd7 7a03 	vldr	s15, [r7, #12]
 8007180:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007184:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8007188:	ee17 1a90 	vmov	r1, s15
 800718c:	4a1d      	ldr	r2, [pc, #116]	; (8007204 <_ProcessSignalDataTable+0x108>)
 800718e:	69fb      	ldr	r3, [r7, #28]
 8007190:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
			tmpDataTable[i] = tmpDataTable[i] + (AMP_OFFSET * pos_offset_coeff);
 8007194:	4a1b      	ldr	r2, [pc, #108]	; (8007204 <_ProcessSignalDataTable+0x108>)
 8007196:	69fb      	ldr	r3, [r7, #28]
 8007198:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800719c:	ee07 3a90 	vmov	s15, r3
 80071a0:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80071a4:	edd7 7a08 	vldr	s15, [r7, #32]
 80071a8:	eef3 6a04 	vmov.f32	s13, #52	; 0x41a00000  20.0
 80071ac:	ee67 7aa6 	vmul.f32	s15, s15, s13
 80071b0:	ee77 7a27 	vadd.f32	s15, s14, s15
 80071b4:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80071b8:	ee17 1a90 	vmov	r1, s15
 80071bc:	4a11      	ldr	r2, [pc, #68]	; (8007204 <_ProcessSignalDataTable+0x108>)
 80071be:	69fb      	ldr	r3, [r7, #28]
 80071c0:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
		for(int i = 0; i < SINE_DATA_SIZE; i++)
 80071c4:	69fb      	ldr	r3, [r7, #28]
 80071c6:	3301      	adds	r3, #1
 80071c8:	61fb      	str	r3, [r7, #28]
 80071ca:	69fb      	ldr	r3, [r7, #28]
 80071cc:	2b77      	cmp	r3, #119	; 0x77
 80071ce:	ddcd      	ble.n	800716c <_ProcessSignalDataTable+0x70>
		}

		// restore lookup table copy to active lookup table in SignalChannel object
		for(int i = 0; i < SINE_DATA_SIZE; i++)
 80071d0:	2300      	movs	r3, #0
 80071d2:	61bb      	str	r3, [r7, #24]
 80071d4:	e00e      	b.n	80071f4 <_ProcessSignalDataTable+0xf8>
		{
			SM_GetOutputChannel(SIGNAL_CHANNEL)->dsp_lut_data[i] = tmpDataTable[i];
 80071d6:	2000      	movs	r0, #0
 80071d8:	f7ff fc02 	bl	80069e0 <SM_GetOutputChannel>
 80071dc:	4601      	mov	r1, r0
 80071de:	4a09      	ldr	r2, [pc, #36]	; (8007204 <_ProcessSignalDataTable+0x108>)
 80071e0:	69bb      	ldr	r3, [r7, #24]
 80071e2:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 80071e6:	69bb      	ldr	r3, [r7, #24]
 80071e8:	3302      	adds	r3, #2
 80071ea:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
		for(int i = 0; i < SINE_DATA_SIZE; i++)
 80071ee:	69bb      	ldr	r3, [r7, #24]
 80071f0:	3301      	adds	r3, #1
 80071f2:	61bb      	str	r3, [r7, #24]
 80071f4:	69bb      	ldr	r3, [r7, #24]
 80071f6:	2b77      	cmp	r3, #119	; 0x77
 80071f8:	dded      	ble.n	80071d6 <_ProcessSignalDataTable+0xda>
		}
	}

}
 80071fa:	bf00      	nop
 80071fc:	3728      	adds	r7, #40	; 0x28
 80071fe:	46bd      	mov	sp, r7
 8007200:	bd80      	pop	{r7, pc}
 8007202:	bf00      	nop
 8007204:	20002648 	.word	0x20002648

08007208 <_ProcessAuxDataTable>:
 *	@param None
 *	@retval None
 *
 */
void _ProcessAuxDataTable(float _neg_gain_coeff, float amp_offset, uint16_t _encoder_value)
{
 8007208:	b580      	push	{r7, lr}
 800720a:	b088      	sub	sp, #32
 800720c:	af00      	add	r7, sp, #0
 800720e:	ed87 0a03 	vstr	s0, [r7, #12]
 8007212:	edc7 0a02 	vstr	s1, [r7, #8]
 8007216:	4603      	mov	r3, r0
 8007218:	80fb      	strh	r3, [r7, #6]
	if(SM_GetOutputChannel(AUX_CHANNEL)->func_profile->func != PWM_FUNC_MODE)
 800721a:	2001      	movs	r0, #1
 800721c:	f7ff fbe0 	bl	80069e0 <SM_GetOutputChannel>
 8007220:	4603      	mov	r3, r0
 8007222:	f8d3 31e8 	ldr.w	r3, [r3, #488]	; 0x1e8
 8007226:	781b      	ldrb	r3, [r3, #0]
 8007228:	2b06      	cmp	r3, #6
 800722a:	d059      	beq.n	80072e0 <_ProcessAuxDataTable+0xd8>
	{
		// copy refer lookup datat table from AuxChannel object
		for(int i = 0; i < SINE_DATA_SIZE; i++)
 800722c:	2300      	movs	r3, #0
 800722e:	61fb      	str	r3, [r7, #28]
 8007230:	e00f      	b.n	8007252 <_ProcessAuxDataTable+0x4a>
		{
			tmpDataTable[i] = SM_GetOutputChannel(AUX_CHANNEL)->ref_lut_data[i];
 8007232:	2001      	movs	r0, #1
 8007234:	f7ff fbd4 	bl	80069e0 <SM_GetOutputChannel>
 8007238:	4603      	mov	r3, r0
 800723a:	685a      	ldr	r2, [r3, #4]
 800723c:	69fb      	ldr	r3, [r7, #28]
 800723e:	009b      	lsls	r3, r3, #2
 8007240:	4413      	add	r3, r2
 8007242:	681a      	ldr	r2, [r3, #0]
 8007244:	4933      	ldr	r1, [pc, #204]	; (8007314 <_ProcessAuxDataTable+0x10c>)
 8007246:	69fb      	ldr	r3, [r7, #28]
 8007248:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
		for(int i = 0; i < SINE_DATA_SIZE; i++)
 800724c:	69fb      	ldr	r3, [r7, #28]
 800724e:	3301      	adds	r3, #1
 8007250:	61fb      	str	r3, [r7, #28]
 8007252:	69fb      	ldr	r3, [r7, #28]
 8007254:	2b77      	cmp	r3, #119	; 0x77
 8007256:	ddec      	ble.n	8007232 <_ProcessAuxDataTable+0x2a>
		}

		// calculate positive offset coefficient from encoder position
		float pos_offset_coeff = 1;
 8007258:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 800725c:	61bb      	str	r3, [r7, #24]
		if(_encoder_value)
 800725e:	88fb      	ldrh	r3, [r7, #6]
 8007260:	2b00      	cmp	r3, #0
 8007262:	d008      	beq.n	8007276 <_ProcessAuxDataTable+0x6e>
		{
			pos_offset_coeff = (_encoder_value/4);
 8007264:	88fb      	ldrh	r3, [r7, #6]
 8007266:	089b      	lsrs	r3, r3, #2
 8007268:	b29b      	uxth	r3, r3
 800726a:	ee07 3a90 	vmov	s15, r3
 800726e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8007272:	edc7 7a06 	vstr	s15, [r7, #24]
		}

		// adjust amplitude and offset of lookup table copy
		for(int i = 0; i < SINE_DATA_SIZE; i++)
 8007276:	2300      	movs	r3, #0
 8007278:	617b      	str	r3, [r7, #20]
 800727a:	e02e      	b.n	80072da <_ProcessAuxDataTable+0xd2>
		{

			tmpDataTable[i] = tmpDataTable[i] * (_neg_gain_coeff);
 800727c:	4a25      	ldr	r2, [pc, #148]	; (8007314 <_ProcessAuxDataTable+0x10c>)
 800727e:	697b      	ldr	r3, [r7, #20]
 8007280:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8007284:	ee07 3a90 	vmov	s15, r3
 8007288:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800728c:	edd7 7a03 	vldr	s15, [r7, #12]
 8007290:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007294:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8007298:	ee17 1a90 	vmov	r1, s15
 800729c:	4a1d      	ldr	r2, [pc, #116]	; (8007314 <_ProcessAuxDataTable+0x10c>)
 800729e:	697b      	ldr	r3, [r7, #20]
 80072a0:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
			tmpDataTable[i] = tmpDataTable[i] + (AMP_OFFSET * pos_offset_coeff);
 80072a4:	4a1b      	ldr	r2, [pc, #108]	; (8007314 <_ProcessAuxDataTable+0x10c>)
 80072a6:	697b      	ldr	r3, [r7, #20]
 80072a8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80072ac:	ee07 3a90 	vmov	s15, r3
 80072b0:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80072b4:	edd7 7a06 	vldr	s15, [r7, #24]
 80072b8:	eef3 6a04 	vmov.f32	s13, #52	; 0x41a00000  20.0
 80072bc:	ee67 7aa6 	vmul.f32	s15, s15, s13
 80072c0:	ee77 7a27 	vadd.f32	s15, s14, s15
 80072c4:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80072c8:	ee17 1a90 	vmov	r1, s15
 80072cc:	4a11      	ldr	r2, [pc, #68]	; (8007314 <_ProcessAuxDataTable+0x10c>)
 80072ce:	697b      	ldr	r3, [r7, #20]
 80072d0:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
		for(int i = 0; i < SINE_DATA_SIZE; i++)
 80072d4:	697b      	ldr	r3, [r7, #20]
 80072d6:	3301      	adds	r3, #1
 80072d8:	617b      	str	r3, [r7, #20]
 80072da:	697b      	ldr	r3, [r7, #20]
 80072dc:	2b77      	cmp	r3, #119	; 0x77
 80072de:	ddcd      	ble.n	800727c <_ProcessAuxDataTable+0x74>
		}
	}


	// restore lookup table copy to active lookup table in SignalChannel object
	for(int i = 0; i < SINE_DATA_SIZE; i++)
 80072e0:	2300      	movs	r3, #0
 80072e2:	613b      	str	r3, [r7, #16]
 80072e4:	e00e      	b.n	8007304 <_ProcessAuxDataTable+0xfc>
	{
		SM_GetOutputChannel(AUX_CHANNEL)->dsp_lut_data[i] = tmpDataTable[i];
 80072e6:	2001      	movs	r0, #1
 80072e8:	f7ff fb7a 	bl	80069e0 <SM_GetOutputChannel>
 80072ec:	4601      	mov	r1, r0
 80072ee:	4a09      	ldr	r2, [pc, #36]	; (8007314 <_ProcessAuxDataTable+0x10c>)
 80072f0:	693b      	ldr	r3, [r7, #16]
 80072f2:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 80072f6:	693b      	ldr	r3, [r7, #16]
 80072f8:	3302      	adds	r3, #2
 80072fa:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
	for(int i = 0; i < SINE_DATA_SIZE; i++)
 80072fe:	693b      	ldr	r3, [r7, #16]
 8007300:	3301      	adds	r3, #1
 8007302:	613b      	str	r3, [r7, #16]
 8007304:	693b      	ldr	r3, [r7, #16]
 8007306:	2b77      	cmp	r3, #119	; 0x77
 8007308:	dded      	ble.n	80072e6 <_ProcessAuxDataTable+0xde>
	}
}
 800730a:	bf00      	nop
 800730c:	3720      	adds	r7, #32
 800730e:	46bd      	mov	sp, r7
 8007310:	bd80      	pop	{r7, pc}
 8007312:	bf00      	nop
 8007314:	20002648 	.word	0x20002648

08007318 <VPP_MapEncoderPositionToSignalOutput>:
 *
 *	@retval None
 *
 */
void VPP_MapEncoderPositionToSignalOutput(uint16_t pEncoderValue)
{
 8007318:	b580      	push	{r7, lr}
 800731a:	b084      	sub	sp, #16
 800731c:	af00      	add	r7, sp, #0
 800731e:	4603      	mov	r3, r0
 8007320:	80fb      	strh	r3, [r7, #6]
	eAmpSettings_t tmpAmp = SM_GetOutputChannel(SIGNAL_CHANNEL)->amp_profile->amp_setting;
 8007322:	2000      	movs	r0, #0
 8007324:	f7ff fb5c 	bl	80069e0 <SM_GetOutputChannel>
 8007328:	4603      	mov	r3, r0
 800732a:	f8d3 31ec 	ldr.w	r3, [r3, #492]	; 0x1ec
 800732e:	781b      	ldrb	r3, [r3, #0]
 8007330:	73fb      	strb	r3, [r7, #15]
	if(pEncoderValue > amp_last_encoder_value)
 8007332:	4b15      	ldr	r3, [pc, #84]	; (8007388 <VPP_MapEncoderPositionToSignalOutput+0x70>)
 8007334:	881b      	ldrh	r3, [r3, #0]
 8007336:	88fa      	ldrh	r2, [r7, #6]
 8007338:	429a      	cmp	r2, r3
 800733a:	d90c      	bls.n	8007356 <VPP_MapEncoderPositionToSignalOutput+0x3e>
	{
		tmpAmp++;
 800733c:	7bfb      	ldrb	r3, [r7, #15]
 800733e:	3301      	adds	r3, #1
 8007340:	73fb      	strb	r3, [r7, #15]
		if(tmpAmp > MAX_VPP_PRESETS-1) tmpAmp = VPP98;
 8007342:	7bfb      	ldrb	r3, [r7, #15]
 8007344:	2b61      	cmp	r3, #97	; 0x61
 8007346:	d901      	bls.n	800734c <VPP_MapEncoderPositionToSignalOutput+0x34>
 8007348:	2361      	movs	r3, #97	; 0x61
 800734a:	73fb      	strb	r3, [r7, #15]
		VPP_ApplyProfileToSignal(tmpAmp);
 800734c:	7bfb      	ldrb	r3, [r7, #15]
 800734e:	4618      	mov	r0, r3
 8007350:	f7ff fe7c 	bl	800704c <VPP_ApplyProfileToSignal>
 8007354:	e010      	b.n	8007378 <VPP_MapEncoderPositionToSignalOutput+0x60>
	}
	else if (pEncoderValue < amp_last_encoder_value)
 8007356:	4b0c      	ldr	r3, [pc, #48]	; (8007388 <VPP_MapEncoderPositionToSignalOutput+0x70>)
 8007358:	881b      	ldrh	r3, [r3, #0]
 800735a:	88fa      	ldrh	r2, [r7, #6]
 800735c:	429a      	cmp	r2, r3
 800735e:	d20b      	bcs.n	8007378 <VPP_MapEncoderPositionToSignalOutput+0x60>
	{
		tmpAmp--;
 8007360:	7bfb      	ldrb	r3, [r7, #15]
 8007362:	3b01      	subs	r3, #1
 8007364:	73fb      	strb	r3, [r7, #15]
		if(tmpAmp > MAX_VPP_PRESETS-1) tmpAmp = VPP01;
 8007366:	7bfb      	ldrb	r3, [r7, #15]
 8007368:	2b61      	cmp	r3, #97	; 0x61
 800736a:	d901      	bls.n	8007370 <VPP_MapEncoderPositionToSignalOutput+0x58>
 800736c:	2300      	movs	r3, #0
 800736e:	73fb      	strb	r3, [r7, #15]
		VPP_ApplyProfileToSignal(tmpAmp);
 8007370:	7bfb      	ldrb	r3, [r7, #15]
 8007372:	4618      	mov	r0, r3
 8007374:	f7ff fe6a 	bl	800704c <VPP_ApplyProfileToSignal>
	}
	amp_last_encoder_value = pEncoderValue;
 8007378:	4a03      	ldr	r2, [pc, #12]	; (8007388 <VPP_MapEncoderPositionToSignalOutput+0x70>)
 800737a:	88fb      	ldrh	r3, [r7, #6]
 800737c:	8013      	strh	r3, [r2, #0]

}
 800737e:	bf00      	nop
 8007380:	3710      	adds	r7, #16
 8007382:	46bd      	mov	sp, r7
 8007384:	bd80      	pop	{r7, pc}
 8007386:	bf00      	nop
 8007388:	20002156 	.word	0x20002156

0800738c <VPP_MapEncoderPositionToAuxOutput>:
 *
 *	@retval None
 *
 */
void VPP_MapEncoderPositionToAuxOutput(uint16_t pEncoderValue)
{
 800738c:	b580      	push	{r7, lr}
 800738e:	b084      	sub	sp, #16
 8007390:	af00      	add	r7, sp, #0
 8007392:	4603      	mov	r3, r0
 8007394:	80fb      	strh	r3, [r7, #6]

	eAmpSettings_t tmpAmp = SM_GetOutputChannel(AUX_CHANNEL)->amp_profile->amp_setting;
 8007396:	2001      	movs	r0, #1
 8007398:	f7ff fb22 	bl	80069e0 <SM_GetOutputChannel>
 800739c:	4603      	mov	r3, r0
 800739e:	f8d3 31ec 	ldr.w	r3, [r3, #492]	; 0x1ec
 80073a2:	781b      	ldrb	r3, [r3, #0]
 80073a4:	73fb      	strb	r3, [r7, #15]
	if(pEncoderValue > amp_last_encoder_value)
 80073a6:	4b15      	ldr	r3, [pc, #84]	; (80073fc <VPP_MapEncoderPositionToAuxOutput+0x70>)
 80073a8:	881b      	ldrh	r3, [r3, #0]
 80073aa:	88fa      	ldrh	r2, [r7, #6]
 80073ac:	429a      	cmp	r2, r3
 80073ae:	d90c      	bls.n	80073ca <VPP_MapEncoderPositionToAuxOutput+0x3e>
	{
		tmpAmp++;
 80073b0:	7bfb      	ldrb	r3, [r7, #15]
 80073b2:	3301      	adds	r3, #1
 80073b4:	73fb      	strb	r3, [r7, #15]
		if(tmpAmp > MAX_VPP_PRESETS-1) tmpAmp = VPP98;
 80073b6:	7bfb      	ldrb	r3, [r7, #15]
 80073b8:	2b61      	cmp	r3, #97	; 0x61
 80073ba:	d901      	bls.n	80073c0 <VPP_MapEncoderPositionToAuxOutput+0x34>
 80073bc:	2361      	movs	r3, #97	; 0x61
 80073be:	73fb      	strb	r3, [r7, #15]
		VPP_ApplyProfileToAux(tmpAmp);
 80073c0:	7bfb      	ldrb	r3, [r7, #15]
 80073c2:	4618      	mov	r0, r3
 80073c4:	f7ff fe70 	bl	80070a8 <VPP_ApplyProfileToAux>
 80073c8:	e010      	b.n	80073ec <VPP_MapEncoderPositionToAuxOutput+0x60>
	}
	else if (pEncoderValue < amp_last_encoder_value)
 80073ca:	4b0c      	ldr	r3, [pc, #48]	; (80073fc <VPP_MapEncoderPositionToAuxOutput+0x70>)
 80073cc:	881b      	ldrh	r3, [r3, #0]
 80073ce:	88fa      	ldrh	r2, [r7, #6]
 80073d0:	429a      	cmp	r2, r3
 80073d2:	d20b      	bcs.n	80073ec <VPP_MapEncoderPositionToAuxOutput+0x60>
	{
		tmpAmp--;
 80073d4:	7bfb      	ldrb	r3, [r7, #15]
 80073d6:	3b01      	subs	r3, #1
 80073d8:	73fb      	strb	r3, [r7, #15]
		if(tmpAmp > MAX_VPP_PRESETS-1) tmpAmp = VPP01;
 80073da:	7bfb      	ldrb	r3, [r7, #15]
 80073dc:	2b61      	cmp	r3, #97	; 0x61
 80073de:	d901      	bls.n	80073e4 <VPP_MapEncoderPositionToAuxOutput+0x58>
 80073e0:	2300      	movs	r3, #0
 80073e2:	73fb      	strb	r3, [r7, #15]
		VPP_ApplyProfileToAux(tmpAmp);
 80073e4:	7bfb      	ldrb	r3, [r7, #15]
 80073e6:	4618      	mov	r0, r3
 80073e8:	f7ff fe5e 	bl	80070a8 <VPP_ApplyProfileToAux>
	}
	amp_last_encoder_value = pEncoderValue;
 80073ec:	4a03      	ldr	r2, [pc, #12]	; (80073fc <VPP_MapEncoderPositionToAuxOutput+0x70>)
 80073ee:	88fb      	ldrh	r3, [r7, #6]
 80073f0:	8013      	strh	r3, [r2, #0]

}
 80073f2:	bf00      	nop
 80073f4:	3710      	adds	r7, #16
 80073f6:	46bd      	mov	sp, r7
 80073f8:	bd80      	pop	{r7, pc}
 80073fa:	bf00      	nop
 80073fc:	20002156 	.word	0x20002156

08007400 <MX_ADC1_Init>:
ADC_HandleTypeDef hadc1;
DMA_HandleTypeDef hdma_adc1;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 8007400:	b580      	push	{r7, lr}
 8007402:	b08c      	sub	sp, #48	; 0x30
 8007404:	af00      	add	r7, sp, #0
  ADC_MultiModeTypeDef multimode = {0};
 8007406:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800740a:	2200      	movs	r2, #0
 800740c:	601a      	str	r2, [r3, #0]
 800740e:	605a      	str	r2, [r3, #4]
 8007410:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 8007412:	1d3b      	adds	r3, r7, #4
 8007414:	2220      	movs	r2, #32
 8007416:	2100      	movs	r1, #0
 8007418:	4618      	mov	r0, r3
 800741a:	f00a f98f 	bl	801173c <memset>

  /** Common config 
  */
  hadc1.Instance = ADC1;
 800741e:	4b32      	ldr	r3, [pc, #200]	; (80074e8 <MX_ADC1_Init+0xe8>)
 8007420:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8007424:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 8007426:	4b30      	ldr	r3, [pc, #192]	; (80074e8 <MX_ADC1_Init+0xe8>)
 8007428:	2200      	movs	r2, #0
 800742a:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 800742c:	4b2e      	ldr	r3, [pc, #184]	; (80074e8 <MX_ADC1_Init+0xe8>)
 800742e:	2200      	movs	r2, #0
 8007430:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8007432:	4b2d      	ldr	r3, [pc, #180]	; (80074e8 <MX_ADC1_Init+0xe8>)
 8007434:	2200      	movs	r2, #0
 8007436:	60da      	str	r2, [r3, #12]
  hadc1.Init.GainCompensation = 0;
 8007438:	4b2b      	ldr	r3, [pc, #172]	; (80074e8 <MX_ADC1_Init+0xe8>)
 800743a:	2200      	movs	r2, #0
 800743c:	611a      	str	r2, [r3, #16]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 800743e:	4b2a      	ldr	r3, [pc, #168]	; (80074e8 <MX_ADC1_Init+0xe8>)
 8007440:	2200      	movs	r2, #0
 8007442:	615a      	str	r2, [r3, #20]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8007444:	4b28      	ldr	r3, [pc, #160]	; (80074e8 <MX_ADC1_Init+0xe8>)
 8007446:	2204      	movs	r2, #4
 8007448:	619a      	str	r2, [r3, #24]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 800744a:	4b27      	ldr	r3, [pc, #156]	; (80074e8 <MX_ADC1_Init+0xe8>)
 800744c:	2200      	movs	r2, #0
 800744e:	771a      	strb	r2, [r3, #28]
  hadc1.Init.ContinuousConvMode = ENABLE;
 8007450:	4b25      	ldr	r3, [pc, #148]	; (80074e8 <MX_ADC1_Init+0xe8>)
 8007452:	2201      	movs	r2, #1
 8007454:	775a      	strb	r2, [r3, #29]
  hadc1.Init.NbrOfConversion = 1;
 8007456:	4b24      	ldr	r3, [pc, #144]	; (80074e8 <MX_ADC1_Init+0xe8>)
 8007458:	2201      	movs	r2, #1
 800745a:	621a      	str	r2, [r3, #32]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 800745c:	4b22      	ldr	r3, [pc, #136]	; (80074e8 <MX_ADC1_Init+0xe8>)
 800745e:	2200      	movs	r2, #0
 8007460:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8007464:	4b20      	ldr	r3, [pc, #128]	; (80074e8 <MX_ADC1_Init+0xe8>)
 8007466:	2200      	movs	r2, #0
 8007468:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 800746a:	4b1f      	ldr	r3, [pc, #124]	; (80074e8 <MX_ADC1_Init+0xe8>)
 800746c:	2200      	movs	r2, #0
 800746e:	631a      	str	r2, [r3, #48]	; 0x30
  hadc1.Init.DMAContinuousRequests = ENABLE;
 8007470:	4b1d      	ldr	r3, [pc, #116]	; (80074e8 <MX_ADC1_Init+0xe8>)
 8007472:	2201      	movs	r2, #1
 8007474:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hadc1.Init.Overrun = ADC_OVR_DATA_OVERWRITTEN;
 8007478:	4b1b      	ldr	r3, [pc, #108]	; (80074e8 <MX_ADC1_Init+0xe8>)
 800747a:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800747e:	63da      	str	r2, [r3, #60]	; 0x3c
  hadc1.Init.OversamplingMode = DISABLE;
 8007480:	4b19      	ldr	r3, [pc, #100]	; (80074e8 <MX_ADC1_Init+0xe8>)
 8007482:	2200      	movs	r2, #0
 8007484:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8007488:	4817      	ldr	r0, [pc, #92]	; (80074e8 <MX_ADC1_Init+0xe8>)
 800748a:	f002 f849 	bl	8009520 <HAL_ADC_Init>
 800748e:	4603      	mov	r3, r0
 8007490:	2b00      	cmp	r3, #0
 8007492:	d001      	beq.n	8007498 <MX_ADC1_Init+0x98>
  {
    Error_Handler();
 8007494:	f000 fea0 	bl	80081d8 <Error_Handler>
  }
  /** Configure the ADC multi-mode 
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 8007498:	2300      	movs	r3, #0
 800749a:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 800749c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80074a0:	4619      	mov	r1, r3
 80074a2:	4811      	ldr	r0, [pc, #68]	; (80074e8 <MX_ADC1_Init+0xe8>)
 80074a4:	f003 f910 	bl	800a6c8 <HAL_ADCEx_MultiModeConfigChannel>
 80074a8:	4603      	mov	r3, r0
 80074aa:	2b00      	cmp	r3, #0
 80074ac:	d001      	beq.n	80074b2 <MX_ADC1_Init+0xb2>
  {
    Error_Handler();
 80074ae:	f000 fe93 	bl	80081d8 <Error_Handler>
  }
  /** Configure Regular Channel 
  */
  sConfig.Channel = ADC_CHANNEL_3;
 80074b2:	4b0e      	ldr	r3, [pc, #56]	; (80074ec <MX_ADC1_Init+0xec>)
 80074b4:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 80074b6:	2306      	movs	r3, #6
 80074b8:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 80074ba:	2300      	movs	r3, #0
 80074bc:	60fb      	str	r3, [r7, #12]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 80074be:	237f      	movs	r3, #127	; 0x7f
 80074c0:	613b      	str	r3, [r7, #16]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 80074c2:	2304      	movs	r3, #4
 80074c4:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 80074c6:	2300      	movs	r3, #0
 80074c8:	61bb      	str	r3, [r7, #24]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80074ca:	1d3b      	adds	r3, r7, #4
 80074cc:	4619      	mov	r1, r3
 80074ce:	4806      	ldr	r0, [pc, #24]	; (80074e8 <MX_ADC1_Init+0xe8>)
 80074d0:	f002 fb2a 	bl	8009b28 <HAL_ADC_ConfigChannel>
 80074d4:	4603      	mov	r3, r0
 80074d6:	2b00      	cmp	r3, #0
 80074d8:	d001      	beq.n	80074de <MX_ADC1_Init+0xde>
  {
    Error_Handler();
 80074da:	f000 fe7d 	bl	80081d8 <Error_Handler>
  }

}
 80074de:	bf00      	nop
 80074e0:	3730      	adds	r7, #48	; 0x30
 80074e2:	46bd      	mov	sp, r7
 80074e4:	bd80      	pop	{r7, pc}
 80074e6:	bf00      	nop
 80074e8:	20002828 	.word	0x20002828
 80074ec:	0c900008 	.word	0x0c900008

080074f0 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 80074f0:	b580      	push	{r7, lr}
 80074f2:	b08a      	sub	sp, #40	; 0x28
 80074f4:	af00      	add	r7, sp, #0
 80074f6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80074f8:	f107 0314 	add.w	r3, r7, #20
 80074fc:	2200      	movs	r2, #0
 80074fe:	601a      	str	r2, [r3, #0]
 8007500:	605a      	str	r2, [r3, #4]
 8007502:	609a      	str	r2, [r3, #8]
 8007504:	60da      	str	r2, [r3, #12]
 8007506:	611a      	str	r2, [r3, #16]
  if(adcHandle->Instance==ADC1)
 8007508:	687b      	ldr	r3, [r7, #4]
 800750a:	681b      	ldr	r3, [r3, #0]
 800750c:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8007510:	d14f      	bne.n	80075b2 <HAL_ADC_MspInit+0xc2>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* ADC1 clock enable */
    __HAL_RCC_ADC12_CLK_ENABLE();
 8007512:	4b2a      	ldr	r3, [pc, #168]	; (80075bc <HAL_ADC_MspInit+0xcc>)
 8007514:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007516:	4a29      	ldr	r2, [pc, #164]	; (80075bc <HAL_ADC_MspInit+0xcc>)
 8007518:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 800751c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800751e:	4b27      	ldr	r3, [pc, #156]	; (80075bc <HAL_ADC_MspInit+0xcc>)
 8007520:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007522:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8007526:	613b      	str	r3, [r7, #16]
 8007528:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800752a:	4b24      	ldr	r3, [pc, #144]	; (80075bc <HAL_ADC_MspInit+0xcc>)
 800752c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800752e:	4a23      	ldr	r2, [pc, #140]	; (80075bc <HAL_ADC_MspInit+0xcc>)
 8007530:	f043 0301 	orr.w	r3, r3, #1
 8007534:	64d3      	str	r3, [r2, #76]	; 0x4c
 8007536:	4b21      	ldr	r3, [pc, #132]	; (80075bc <HAL_ADC_MspInit+0xcc>)
 8007538:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800753a:	f003 0301 	and.w	r3, r3, #1
 800753e:	60fb      	str	r3, [r7, #12]
 8007540:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration    
    PA2     ------> ADC1_IN3 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8007542:	2304      	movs	r3, #4
 8007544:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8007546:	2303      	movs	r3, #3
 8007548:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800754a:	2300      	movs	r3, #0
 800754c:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800754e:	f107 0314 	add.w	r3, r7, #20
 8007552:	4619      	mov	r1, r3
 8007554:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8007558:	f004 fe10 	bl	800c17c <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Channel1;
 800755c:	4b18      	ldr	r3, [pc, #96]	; (80075c0 <HAL_ADC_MspInit+0xd0>)
 800755e:	4a19      	ldr	r2, [pc, #100]	; (80075c4 <HAL_ADC_MspInit+0xd4>)
 8007560:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Request = DMA_REQUEST_ADC1;
 8007562:	4b17      	ldr	r3, [pc, #92]	; (80075c0 <HAL_ADC_MspInit+0xd0>)
 8007564:	2205      	movs	r2, #5
 8007566:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8007568:	4b15      	ldr	r3, [pc, #84]	; (80075c0 <HAL_ADC_MspInit+0xd0>)
 800756a:	2200      	movs	r2, #0
 800756c:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 800756e:	4b14      	ldr	r3, [pc, #80]	; (80075c0 <HAL_ADC_MspInit+0xd0>)
 8007570:	2200      	movs	r2, #0
 8007572:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8007574:	4b12      	ldr	r3, [pc, #72]	; (80075c0 <HAL_ADC_MspInit+0xd0>)
 8007576:	2280      	movs	r2, #128	; 0x80
 8007578:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 800757a:	4b11      	ldr	r3, [pc, #68]	; (80075c0 <HAL_ADC_MspInit+0xd0>)
 800757c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8007580:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8007582:	4b0f      	ldr	r3, [pc, #60]	; (80075c0 <HAL_ADC_MspInit+0xd0>)
 8007584:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8007588:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 800758a:	4b0d      	ldr	r3, [pc, #52]	; (80075c0 <HAL_ADC_MspInit+0xd0>)
 800758c:	2220      	movs	r2, #32
 800758e:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 8007590:	4b0b      	ldr	r3, [pc, #44]	; (80075c0 <HAL_ADC_MspInit+0xd0>)
 8007592:	2200      	movs	r2, #0
 8007594:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8007596:	480a      	ldr	r0, [pc, #40]	; (80075c0 <HAL_ADC_MspInit+0xd0>)
 8007598:	f004 fabe 	bl	800bb18 <HAL_DMA_Init>
 800759c:	4603      	mov	r3, r0
 800759e:	2b00      	cmp	r3, #0
 80075a0:	d001      	beq.n	80075a6 <HAL_ADC_MspInit+0xb6>
    {
      Error_Handler();
 80075a2:	f000 fe19 	bl	80081d8 <Error_Handler>
    }

    __HAL_LINKDMA(adcHandle,DMA_Handle,hdma_adc1);
 80075a6:	687b      	ldr	r3, [r7, #4]
 80075a8:	4a05      	ldr	r2, [pc, #20]	; (80075c0 <HAL_ADC_MspInit+0xd0>)
 80075aa:	655a      	str	r2, [r3, #84]	; 0x54
 80075ac:	4a04      	ldr	r2, [pc, #16]	; (80075c0 <HAL_ADC_MspInit+0xd0>)
 80075ae:	687b      	ldr	r3, [r7, #4]
 80075b0:	6293      	str	r3, [r2, #40]	; 0x28

  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 80075b2:	bf00      	nop
 80075b4:	3728      	adds	r7, #40	; 0x28
 80075b6:	46bd      	mov	sp, r7
 80075b8:	bd80      	pop	{r7, pc}
 80075ba:	bf00      	nop
 80075bc:	40021000 	.word	0x40021000
 80075c0:	20002894 	.word	0x20002894
 80075c4:	40020008 	.word	0x40020008

080075c8 <MX_COMP1_Init>:

COMP_HandleTypeDef hcomp1;

/* COMP1 init function */
void MX_COMP1_Init(void)
{
 80075c8:	b580      	push	{r7, lr}
 80075ca:	af00      	add	r7, sp, #0

  hcomp1.Instance = COMP1;
 80075cc:	4b0f      	ldr	r3, [pc, #60]	; (800760c <MX_COMP1_Init+0x44>)
 80075ce:	4a10      	ldr	r2, [pc, #64]	; (8007610 <MX_COMP1_Init+0x48>)
 80075d0:	601a      	str	r2, [r3, #0]
  hcomp1.Init.InputPlus = COMP_INPUT_PLUS_IO1;
 80075d2:	4b0e      	ldr	r3, [pc, #56]	; (800760c <MX_COMP1_Init+0x44>)
 80075d4:	2200      	movs	r2, #0
 80075d6:	605a      	str	r2, [r3, #4]
  hcomp1.Init.InputMinus = COMP_INPUT_MINUS_VREFINT;
 80075d8:	4b0c      	ldr	r3, [pc, #48]	; (800760c <MX_COMP1_Init+0x44>)
 80075da:	4a0e      	ldr	r2, [pc, #56]	; (8007614 <MX_COMP1_Init+0x4c>)
 80075dc:	609a      	str	r2, [r3, #8]
  hcomp1.Init.OutputPol = COMP_OUTPUTPOL_NONINVERTED;
 80075de:	4b0b      	ldr	r3, [pc, #44]	; (800760c <MX_COMP1_Init+0x44>)
 80075e0:	2200      	movs	r2, #0
 80075e2:	611a      	str	r2, [r3, #16]
  hcomp1.Init.Hysteresis = COMP_HYSTERESIS_HIGH;
 80075e4:	4b09      	ldr	r3, [pc, #36]	; (800760c <MX_COMP1_Init+0x44>)
 80075e6:	f44f 22e0 	mov.w	r2, #458752	; 0x70000
 80075ea:	60da      	str	r2, [r3, #12]
  hcomp1.Init.BlankingSrce = COMP_BLANKINGSRC_NONE;
 80075ec:	4b07      	ldr	r3, [pc, #28]	; (800760c <MX_COMP1_Init+0x44>)
 80075ee:	2200      	movs	r2, #0
 80075f0:	615a      	str	r2, [r3, #20]
  hcomp1.Init.TriggerMode = COMP_TRIGGERMODE_IT_RISING_FALLING;
 80075f2:	4b06      	ldr	r3, [pc, #24]	; (800760c <MX_COMP1_Init+0x44>)
 80075f4:	2231      	movs	r2, #49	; 0x31
 80075f6:	619a      	str	r2, [r3, #24]
  if (HAL_COMP_Init(&hcomp1) != HAL_OK)
 80075f8:	4804      	ldr	r0, [pc, #16]	; (800760c <MX_COMP1_Init+0x44>)
 80075fa:	f003 fae5 	bl	800abc8 <HAL_COMP_Init>
 80075fe:	4603      	mov	r3, r0
 8007600:	2b00      	cmp	r3, #0
 8007602:	d001      	beq.n	8007608 <MX_COMP1_Init+0x40>
  {
    Error_Handler();
 8007604:	f000 fde8 	bl	80081d8 <Error_Handler>
  }

}
 8007608:	bf00      	nop
 800760a:	bd80      	pop	{r7, pc}
 800760c:	200028f4 	.word	0x200028f4
 8007610:	40010200 	.word	0x40010200
 8007614:	00800030 	.word	0x00800030

08007618 <HAL_COMP_MspInit>:

void HAL_COMP_MspInit(COMP_HandleTypeDef* compHandle)
{
 8007618:	b580      	push	{r7, lr}
 800761a:	b088      	sub	sp, #32
 800761c:	af00      	add	r7, sp, #0
 800761e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8007620:	f107 030c 	add.w	r3, r7, #12
 8007624:	2200      	movs	r2, #0
 8007626:	601a      	str	r2, [r3, #0]
 8007628:	605a      	str	r2, [r3, #4]
 800762a:	609a      	str	r2, [r3, #8]
 800762c:	60da      	str	r2, [r3, #12]
 800762e:	611a      	str	r2, [r3, #16]
  if(compHandle->Instance==COMP1)
 8007630:	687b      	ldr	r3, [r7, #4]
 8007632:	681b      	ldr	r3, [r3, #0]
 8007634:	4a13      	ldr	r2, [pc, #76]	; (8007684 <HAL_COMP_MspInit+0x6c>)
 8007636:	4293      	cmp	r3, r2
 8007638:	d120      	bne.n	800767c <HAL_COMP_MspInit+0x64>
  {
  /* USER CODE BEGIN COMP1_MspInit 0 */

  /* USER CODE END COMP1_MspInit 0 */
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800763a:	4b13      	ldr	r3, [pc, #76]	; (8007688 <HAL_COMP_MspInit+0x70>)
 800763c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800763e:	4a12      	ldr	r2, [pc, #72]	; (8007688 <HAL_COMP_MspInit+0x70>)
 8007640:	f043 0301 	orr.w	r3, r3, #1
 8007644:	64d3      	str	r3, [r2, #76]	; 0x4c
 8007646:	4b10      	ldr	r3, [pc, #64]	; (8007688 <HAL_COMP_MspInit+0x70>)
 8007648:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800764a:	f003 0301 	and.w	r3, r3, #1
 800764e:	60bb      	str	r3, [r7, #8]
 8007650:	68bb      	ldr	r3, [r7, #8]
    /**COMP1 GPIO Configuration    
    PA1     ------> COMP1_INP 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 8007652:	2302      	movs	r3, #2
 8007654:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8007656:	2303      	movs	r3, #3
 8007658:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800765a:	2300      	movs	r3, #0
 800765c:	617b      	str	r3, [r7, #20]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800765e:	f107 030c 	add.w	r3, r7, #12
 8007662:	4619      	mov	r1, r3
 8007664:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8007668:	f004 fd88 	bl	800c17c <HAL_GPIO_Init>

    /* COMP1 interrupt Init */
    HAL_NVIC_SetPriority(COMP1_2_3_IRQn, 0, 0);
 800766c:	2200      	movs	r2, #0
 800766e:	2100      	movs	r1, #0
 8007670:	2040      	movs	r0, #64	; 0x40
 8007672:	f003 fdf0 	bl	800b256 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(COMP1_2_3_IRQn);
 8007676:	2040      	movs	r0, #64	; 0x40
 8007678:	f003 fe07 	bl	800b28a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN COMP1_MspInit 1 */

  /* USER CODE END COMP1_MspInit 1 */
  }
}
 800767c:	bf00      	nop
 800767e:	3720      	adds	r7, #32
 8007680:	46bd      	mov	sp, r7
 8007682:	bd80      	pop	{r7, pc}
 8007684:	40010200 	.word	0x40010200
 8007688:	40021000 	.word	0x40021000

0800768c <MX_DAC1_Init>:
DMA_HandleTypeDef hdma_dac1_ch1;
DMA_HandleTypeDef hdma_dac2_ch1;

/* DAC1 init function */
void MX_DAC1_Init(void)
{
 800768c:	b580      	push	{r7, lr}
 800768e:	b08c      	sub	sp, #48	; 0x30
 8007690:	af00      	add	r7, sp, #0
  DAC_ChannelConfTypeDef sConfig = {0};
 8007692:	463b      	mov	r3, r7
 8007694:	2230      	movs	r2, #48	; 0x30
 8007696:	2100      	movs	r1, #0
 8007698:	4618      	mov	r0, r3
 800769a:	f00a f84f 	bl	801173c <memset>

  /** DAC Initialization 
  */
  hdac1.Instance = DAC1;
 800769e:	4b1e      	ldr	r3, [pc, #120]	; (8007718 <MX_DAC1_Init+0x8c>)
 80076a0:	4a1e      	ldr	r2, [pc, #120]	; (800771c <MX_DAC1_Init+0x90>)
 80076a2:	601a      	str	r2, [r3, #0]
  if (HAL_DAC_Init(&hdac1) != HAL_OK)
 80076a4:	481c      	ldr	r0, [pc, #112]	; (8007718 <MX_DAC1_Init+0x8c>)
 80076a6:	f003 fe18 	bl	800b2da <HAL_DAC_Init>
 80076aa:	4603      	mov	r3, r0
 80076ac:	2b00      	cmp	r3, #0
 80076ae:	d001      	beq.n	80076b4 <MX_DAC1_Init+0x28>
  {
    Error_Handler();
 80076b0:	f000 fd92 	bl	80081d8 <Error_Handler>
  }
  /** DAC channel OUT1 config 
  */
  sConfig.DAC_HighFrequency = DAC_HIGH_FREQUENCY_INTERFACE_MODE_ABOVE_80MHZ;
 80076b4:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80076b8:	603b      	str	r3, [r7, #0]
  sConfig.DAC_DMADoubleDataMode = DISABLE;
 80076ba:	2300      	movs	r3, #0
 80076bc:	713b      	strb	r3, [r7, #4]
  sConfig.DAC_SignedFormat = DISABLE;
 80076be:	2300      	movs	r3, #0
 80076c0:	717b      	strb	r3, [r7, #5]
  sConfig.DAC_SampleAndHold = DAC_SAMPLEANDHOLD_DISABLE;
 80076c2:	2300      	movs	r3, #0
 80076c4:	60bb      	str	r3, [r7, #8]
  sConfig.DAC_Trigger = DAC_TRIGGER_T8_TRGO;
 80076c6:	2306      	movs	r3, #6
 80076c8:	60fb      	str	r3, [r7, #12]
  sConfig.DAC_Trigger2 = DAC_TRIGGER_NONE;
 80076ca:	2300      	movs	r3, #0
 80076cc:	613b      	str	r3, [r7, #16]
  sConfig.DAC_OutputBuffer = DAC_OUTPUTBUFFER_ENABLE;
 80076ce:	2300      	movs	r3, #0
 80076d0:	617b      	str	r3, [r7, #20]
  sConfig.DAC_ConnectOnChipPeripheral = DAC_CHIPCONNECT_DISABLE;
 80076d2:	2301      	movs	r3, #1
 80076d4:	61bb      	str	r3, [r7, #24]
  sConfig.DAC_UserTrimming = DAC_TRIMMING_FACTORY;
 80076d6:	2300      	movs	r3, #0
 80076d8:	61fb      	str	r3, [r7, #28]
  if (HAL_DAC_ConfigChannel(&hdac1, &sConfig, DAC_CHANNEL_1) != HAL_OK)
 80076da:	463b      	mov	r3, r7
 80076dc:	2200      	movs	r2, #0
 80076de:	4619      	mov	r1, r3
 80076e0:	480d      	ldr	r0, [pc, #52]	; (8007718 <MX_DAC1_Init+0x8c>)
 80076e2:	f003 ffe3 	bl	800b6ac <HAL_DAC_ConfigChannel>
 80076e6:	4603      	mov	r3, r0
 80076e8:	2b00      	cmp	r3, #0
 80076ea:	d001      	beq.n	80076f0 <MX_DAC1_Init+0x64>
  {
    Error_Handler();
 80076ec:	f000 fd74 	bl	80081d8 <Error_Handler>
  }
  /** DAC channel OUT2 config 
  */
  sConfig.DAC_Trigger = DAC_TRIGGER_NONE;
 80076f0:	2300      	movs	r3, #0
 80076f2:	60fb      	str	r3, [r7, #12]
  sConfig.DAC_ConnectOnChipPeripheral = DAC_CHIPCONNECT_DISABLE;
 80076f4:	2301      	movs	r3, #1
 80076f6:	61bb      	str	r3, [r7, #24]
  if (HAL_DAC_ConfigChannel(&hdac1, &sConfig, DAC_CHANNEL_2) != HAL_OK)
 80076f8:	463b      	mov	r3, r7
 80076fa:	2210      	movs	r2, #16
 80076fc:	4619      	mov	r1, r3
 80076fe:	4806      	ldr	r0, [pc, #24]	; (8007718 <MX_DAC1_Init+0x8c>)
 8007700:	f003 ffd4 	bl	800b6ac <HAL_DAC_ConfigChannel>
 8007704:	4603      	mov	r3, r0
 8007706:	2b00      	cmp	r3, #0
 8007708:	d001      	beq.n	800770e <MX_DAC1_Init+0x82>
  {
    Error_Handler();
 800770a:	f000 fd65 	bl	80081d8 <Error_Handler>
  }

}
 800770e:	bf00      	nop
 8007710:	3730      	adds	r7, #48	; 0x30
 8007712:	46bd      	mov	sp, r7
 8007714:	bd80      	pop	{r7, pc}
 8007716:	bf00      	nop
 8007718:	2000292c 	.word	0x2000292c
 800771c:	50000800 	.word	0x50000800

08007720 <MX_DAC2_Init>:
/* DAC2 init function */
void MX_DAC2_Init(void)
{
 8007720:	b580      	push	{r7, lr}
 8007722:	b08c      	sub	sp, #48	; 0x30
 8007724:	af00      	add	r7, sp, #0
  DAC_ChannelConfTypeDef sConfig = {0};
 8007726:	463b      	mov	r3, r7
 8007728:	2230      	movs	r2, #48	; 0x30
 800772a:	2100      	movs	r1, #0
 800772c:	4618      	mov	r0, r3
 800772e:	f00a f805 	bl	801173c <memset>

  /** DAC Initialization 
  */
  hdac2.Instance = DAC2;
 8007732:	4b16      	ldr	r3, [pc, #88]	; (800778c <MX_DAC2_Init+0x6c>)
 8007734:	4a16      	ldr	r2, [pc, #88]	; (8007790 <MX_DAC2_Init+0x70>)
 8007736:	601a      	str	r2, [r3, #0]
  if (HAL_DAC_Init(&hdac2) != HAL_OK)
 8007738:	4814      	ldr	r0, [pc, #80]	; (800778c <MX_DAC2_Init+0x6c>)
 800773a:	f003 fdce 	bl	800b2da <HAL_DAC_Init>
 800773e:	4603      	mov	r3, r0
 8007740:	2b00      	cmp	r3, #0
 8007742:	d001      	beq.n	8007748 <MX_DAC2_Init+0x28>
  {
    Error_Handler();
 8007744:	f000 fd48 	bl	80081d8 <Error_Handler>
  }
  /** DAC channel OUT1 config 
  */
  sConfig.DAC_HighFrequency = DAC_HIGH_FREQUENCY_INTERFACE_MODE_ABOVE_80MHZ;
 8007748:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800774c:	603b      	str	r3, [r7, #0]
  sConfig.DAC_DMADoubleDataMode = DISABLE;
 800774e:	2300      	movs	r3, #0
 8007750:	713b      	strb	r3, [r7, #4]
  sConfig.DAC_SignedFormat = DISABLE;
 8007752:	2300      	movs	r3, #0
 8007754:	717b      	strb	r3, [r7, #5]
  sConfig.DAC_SampleAndHold = DAC_SAMPLEANDHOLD_DISABLE;
 8007756:	2300      	movs	r3, #0
 8007758:	60bb      	str	r3, [r7, #8]
  sConfig.DAC_Trigger = DAC_TRIGGER_T8_TRGO;
 800775a:	2306      	movs	r3, #6
 800775c:	60fb      	str	r3, [r7, #12]
  sConfig.DAC_Trigger2 = DAC_TRIGGER_NONE;
 800775e:	2300      	movs	r3, #0
 8007760:	613b      	str	r3, [r7, #16]
  sConfig.DAC_OutputBuffer = DAC_OUTPUTBUFFER_ENABLE;
 8007762:	2300      	movs	r3, #0
 8007764:	617b      	str	r3, [r7, #20]
  sConfig.DAC_ConnectOnChipPeripheral = DAC_CHIPCONNECT_DISABLE;
 8007766:	2301      	movs	r3, #1
 8007768:	61bb      	str	r3, [r7, #24]
  sConfig.DAC_UserTrimming = DAC_TRIMMING_FACTORY;
 800776a:	2300      	movs	r3, #0
 800776c:	61fb      	str	r3, [r7, #28]
  if (HAL_DAC_ConfigChannel(&hdac2, &sConfig, DAC_CHANNEL_1) != HAL_OK)
 800776e:	463b      	mov	r3, r7
 8007770:	2200      	movs	r2, #0
 8007772:	4619      	mov	r1, r3
 8007774:	4805      	ldr	r0, [pc, #20]	; (800778c <MX_DAC2_Init+0x6c>)
 8007776:	f003 ff99 	bl	800b6ac <HAL_DAC_ConfigChannel>
 800777a:	4603      	mov	r3, r0
 800777c:	2b00      	cmp	r3, #0
 800777e:	d001      	beq.n	8007784 <MX_DAC2_Init+0x64>
  {
    Error_Handler();
 8007780:	f000 fd2a 	bl	80081d8 <Error_Handler>
  }

}
 8007784:	bf00      	nop
 8007786:	3730      	adds	r7, #48	; 0x30
 8007788:	46bd      	mov	sp, r7
 800778a:	bd80      	pop	{r7, pc}
 800778c:	20002918 	.word	0x20002918
 8007790:	50000c00 	.word	0x50000c00

08007794 <HAL_DAC_MspInit>:

void HAL_DAC_MspInit(DAC_HandleTypeDef* dacHandle)
{
 8007794:	b580      	push	{r7, lr}
 8007796:	b08c      	sub	sp, #48	; 0x30
 8007798:	af00      	add	r7, sp, #0
 800779a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800779c:	f107 031c 	add.w	r3, r7, #28
 80077a0:	2200      	movs	r2, #0
 80077a2:	601a      	str	r2, [r3, #0]
 80077a4:	605a      	str	r2, [r3, #4]
 80077a6:	609a      	str	r2, [r3, #8]
 80077a8:	60da      	str	r2, [r3, #12]
 80077aa:	611a      	str	r2, [r3, #16]
  if(dacHandle->Instance==DAC1)
 80077ac:	687b      	ldr	r3, [r7, #4]
 80077ae:	681b      	ldr	r3, [r3, #0]
 80077b0:	4a56      	ldr	r2, [pc, #344]	; (800790c <HAL_DAC_MspInit+0x178>)
 80077b2:	4293      	cmp	r3, r2
 80077b4:	d150      	bne.n	8007858 <HAL_DAC_MspInit+0xc4>
  {
  /* USER CODE BEGIN DAC1_MspInit 0 */

  /* USER CODE END DAC1_MspInit 0 */
    /* DAC1 clock enable */
    __HAL_RCC_DAC1_CLK_ENABLE();
 80077b6:	4b56      	ldr	r3, [pc, #344]	; (8007910 <HAL_DAC_MspInit+0x17c>)
 80077b8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80077ba:	4a55      	ldr	r2, [pc, #340]	; (8007910 <HAL_DAC_MspInit+0x17c>)
 80077bc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80077c0:	64d3      	str	r3, [r2, #76]	; 0x4c
 80077c2:	4b53      	ldr	r3, [pc, #332]	; (8007910 <HAL_DAC_MspInit+0x17c>)
 80077c4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80077c6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80077ca:	61bb      	str	r3, [r7, #24]
 80077cc:	69bb      	ldr	r3, [r7, #24]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80077ce:	4b50      	ldr	r3, [pc, #320]	; (8007910 <HAL_DAC_MspInit+0x17c>)
 80077d0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80077d2:	4a4f      	ldr	r2, [pc, #316]	; (8007910 <HAL_DAC_MspInit+0x17c>)
 80077d4:	f043 0301 	orr.w	r3, r3, #1
 80077d8:	64d3      	str	r3, [r2, #76]	; 0x4c
 80077da:	4b4d      	ldr	r3, [pc, #308]	; (8007910 <HAL_DAC_MspInit+0x17c>)
 80077dc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80077de:	f003 0301 	and.w	r3, r3, #1
 80077e2:	617b      	str	r3, [r7, #20]
 80077e4:	697b      	ldr	r3, [r7, #20]
    /**DAC1 GPIO Configuration    
    PA4     ------> DAC1_OUT1
    PA5     ------> DAC1_OUT2 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 80077e6:	2330      	movs	r3, #48	; 0x30
 80077e8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80077ea:	2303      	movs	r3, #3
 80077ec:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80077ee:	2300      	movs	r3, #0
 80077f0:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80077f2:	f107 031c 	add.w	r3, r7, #28
 80077f6:	4619      	mov	r1, r3
 80077f8:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80077fc:	f004 fcbe 	bl	800c17c <HAL_GPIO_Init>

    /* DAC1 DMA Init */
    /* DAC1_CH1 Init */
    hdma_dac1_ch1.Instance = DMA1_Channel2;
 8007800:	4b44      	ldr	r3, [pc, #272]	; (8007914 <HAL_DAC_MspInit+0x180>)
 8007802:	4a45      	ldr	r2, [pc, #276]	; (8007918 <HAL_DAC_MspInit+0x184>)
 8007804:	601a      	str	r2, [r3, #0]
    hdma_dac1_ch1.Init.Request = DMA_REQUEST_DAC1_CHANNEL1;
 8007806:	4b43      	ldr	r3, [pc, #268]	; (8007914 <HAL_DAC_MspInit+0x180>)
 8007808:	2206      	movs	r2, #6
 800780a:	605a      	str	r2, [r3, #4]
    hdma_dac1_ch1.Init.Direction = DMA_MEMORY_TO_PERIPH;
 800780c:	4b41      	ldr	r3, [pc, #260]	; (8007914 <HAL_DAC_MspInit+0x180>)
 800780e:	2210      	movs	r2, #16
 8007810:	609a      	str	r2, [r3, #8]
    hdma_dac1_ch1.Init.PeriphInc = DMA_PINC_DISABLE;
 8007812:	4b40      	ldr	r3, [pc, #256]	; (8007914 <HAL_DAC_MspInit+0x180>)
 8007814:	2200      	movs	r2, #0
 8007816:	60da      	str	r2, [r3, #12]
    hdma_dac1_ch1.Init.MemInc = DMA_MINC_ENABLE;
 8007818:	4b3e      	ldr	r3, [pc, #248]	; (8007914 <HAL_DAC_MspInit+0x180>)
 800781a:	2280      	movs	r2, #128	; 0x80
 800781c:	611a      	str	r2, [r3, #16]
    hdma_dac1_ch1.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 800781e:	4b3d      	ldr	r3, [pc, #244]	; (8007914 <HAL_DAC_MspInit+0x180>)
 8007820:	f44f 7200 	mov.w	r2, #512	; 0x200
 8007824:	615a      	str	r2, [r3, #20]
    hdma_dac1_ch1.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8007826:	4b3b      	ldr	r3, [pc, #236]	; (8007914 <HAL_DAC_MspInit+0x180>)
 8007828:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800782c:	619a      	str	r2, [r3, #24]
    hdma_dac1_ch1.Init.Mode = DMA_CIRCULAR;
 800782e:	4b39      	ldr	r3, [pc, #228]	; (8007914 <HAL_DAC_MspInit+0x180>)
 8007830:	2220      	movs	r2, #32
 8007832:	61da      	str	r2, [r3, #28]
    hdma_dac1_ch1.Init.Priority = DMA_PRIORITY_LOW;
 8007834:	4b37      	ldr	r3, [pc, #220]	; (8007914 <HAL_DAC_MspInit+0x180>)
 8007836:	2200      	movs	r2, #0
 8007838:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_dac1_ch1) != HAL_OK)
 800783a:	4836      	ldr	r0, [pc, #216]	; (8007914 <HAL_DAC_MspInit+0x180>)
 800783c:	f004 f96c 	bl	800bb18 <HAL_DMA_Init>
 8007840:	4603      	mov	r3, r0
 8007842:	2b00      	cmp	r3, #0
 8007844:	d001      	beq.n	800784a <HAL_DAC_MspInit+0xb6>
    {
      Error_Handler();
 8007846:	f000 fcc7 	bl	80081d8 <Error_Handler>
    }

    __HAL_LINKDMA(dacHandle,DMA_Handle1,hdma_dac1_ch1);
 800784a:	687b      	ldr	r3, [r7, #4]
 800784c:	4a31      	ldr	r2, [pc, #196]	; (8007914 <HAL_DAC_MspInit+0x180>)
 800784e:	609a      	str	r2, [r3, #8]
 8007850:	4a30      	ldr	r2, [pc, #192]	; (8007914 <HAL_DAC_MspInit+0x180>)
 8007852:	687b      	ldr	r3, [r7, #4]
 8007854:	6293      	str	r3, [r2, #40]	; 0x28

  /* USER CODE BEGIN DAC2_MspInit 1 */

  /* USER CODE END DAC2_MspInit 1 */
  }
}
 8007856:	e054      	b.n	8007902 <HAL_DAC_MspInit+0x16e>
  else if(dacHandle->Instance==DAC2)
 8007858:	687b      	ldr	r3, [r7, #4]
 800785a:	681b      	ldr	r3, [r3, #0]
 800785c:	4a2f      	ldr	r2, [pc, #188]	; (800791c <HAL_DAC_MspInit+0x188>)
 800785e:	4293      	cmp	r3, r2
 8007860:	d14f      	bne.n	8007902 <HAL_DAC_MspInit+0x16e>
    __HAL_RCC_DAC2_CLK_ENABLE();
 8007862:	4b2b      	ldr	r3, [pc, #172]	; (8007910 <HAL_DAC_MspInit+0x17c>)
 8007864:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007866:	4a2a      	ldr	r2, [pc, #168]	; (8007910 <HAL_DAC_MspInit+0x17c>)
 8007868:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800786c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800786e:	4b28      	ldr	r3, [pc, #160]	; (8007910 <HAL_DAC_MspInit+0x17c>)
 8007870:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007872:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007876:	613b      	str	r3, [r7, #16]
 8007878:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800787a:	4b25      	ldr	r3, [pc, #148]	; (8007910 <HAL_DAC_MspInit+0x17c>)
 800787c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800787e:	4a24      	ldr	r2, [pc, #144]	; (8007910 <HAL_DAC_MspInit+0x17c>)
 8007880:	f043 0301 	orr.w	r3, r3, #1
 8007884:	64d3      	str	r3, [r2, #76]	; 0x4c
 8007886:	4b22      	ldr	r3, [pc, #136]	; (8007910 <HAL_DAC_MspInit+0x17c>)
 8007888:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800788a:	f003 0301 	and.w	r3, r3, #1
 800788e:	60fb      	str	r3, [r7, #12]
 8007890:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8007892:	2340      	movs	r3, #64	; 0x40
 8007894:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8007896:	2303      	movs	r3, #3
 8007898:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800789a:	2300      	movs	r3, #0
 800789c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800789e:	f107 031c 	add.w	r3, r7, #28
 80078a2:	4619      	mov	r1, r3
 80078a4:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80078a8:	f004 fc68 	bl	800c17c <HAL_GPIO_Init>
    hdma_dac2_ch1.Instance = DMA1_Channel3;
 80078ac:	4b1c      	ldr	r3, [pc, #112]	; (8007920 <HAL_DAC_MspInit+0x18c>)
 80078ae:	4a1d      	ldr	r2, [pc, #116]	; (8007924 <HAL_DAC_MspInit+0x190>)
 80078b0:	601a      	str	r2, [r3, #0]
    hdma_dac2_ch1.Init.Request = DMA_REQUEST_DAC2_CHANNEL1;
 80078b2:	4b1b      	ldr	r3, [pc, #108]	; (8007920 <HAL_DAC_MspInit+0x18c>)
 80078b4:	2229      	movs	r2, #41	; 0x29
 80078b6:	605a      	str	r2, [r3, #4]
    hdma_dac2_ch1.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80078b8:	4b19      	ldr	r3, [pc, #100]	; (8007920 <HAL_DAC_MspInit+0x18c>)
 80078ba:	2210      	movs	r2, #16
 80078bc:	609a      	str	r2, [r3, #8]
    hdma_dac2_ch1.Init.PeriphInc = DMA_PINC_DISABLE;
 80078be:	4b18      	ldr	r3, [pc, #96]	; (8007920 <HAL_DAC_MspInit+0x18c>)
 80078c0:	2200      	movs	r2, #0
 80078c2:	60da      	str	r2, [r3, #12]
    hdma_dac2_ch1.Init.MemInc = DMA_MINC_ENABLE;
 80078c4:	4b16      	ldr	r3, [pc, #88]	; (8007920 <HAL_DAC_MspInit+0x18c>)
 80078c6:	2280      	movs	r2, #128	; 0x80
 80078c8:	611a      	str	r2, [r3, #16]
    hdma_dac2_ch1.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 80078ca:	4b15      	ldr	r3, [pc, #84]	; (8007920 <HAL_DAC_MspInit+0x18c>)
 80078cc:	f44f 7200 	mov.w	r2, #512	; 0x200
 80078d0:	615a      	str	r2, [r3, #20]
    hdma_dac2_ch1.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 80078d2:	4b13      	ldr	r3, [pc, #76]	; (8007920 <HAL_DAC_MspInit+0x18c>)
 80078d4:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80078d8:	619a      	str	r2, [r3, #24]
    hdma_dac2_ch1.Init.Mode = DMA_CIRCULAR;
 80078da:	4b11      	ldr	r3, [pc, #68]	; (8007920 <HAL_DAC_MspInit+0x18c>)
 80078dc:	2220      	movs	r2, #32
 80078de:	61da      	str	r2, [r3, #28]
    hdma_dac2_ch1.Init.Priority = DMA_PRIORITY_LOW;
 80078e0:	4b0f      	ldr	r3, [pc, #60]	; (8007920 <HAL_DAC_MspInit+0x18c>)
 80078e2:	2200      	movs	r2, #0
 80078e4:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_dac2_ch1) != HAL_OK)
 80078e6:	480e      	ldr	r0, [pc, #56]	; (8007920 <HAL_DAC_MspInit+0x18c>)
 80078e8:	f004 f916 	bl	800bb18 <HAL_DMA_Init>
 80078ec:	4603      	mov	r3, r0
 80078ee:	2b00      	cmp	r3, #0
 80078f0:	d001      	beq.n	80078f6 <HAL_DAC_MspInit+0x162>
      Error_Handler();
 80078f2:	f000 fc71 	bl	80081d8 <Error_Handler>
    __HAL_LINKDMA(dacHandle,DMA_Handle1,hdma_dac2_ch1);
 80078f6:	687b      	ldr	r3, [r7, #4]
 80078f8:	4a09      	ldr	r2, [pc, #36]	; (8007920 <HAL_DAC_MspInit+0x18c>)
 80078fa:	609a      	str	r2, [r3, #8]
 80078fc:	4a08      	ldr	r2, [pc, #32]	; (8007920 <HAL_DAC_MspInit+0x18c>)
 80078fe:	687b      	ldr	r3, [r7, #4]
 8007900:	6293      	str	r3, [r2, #40]	; 0x28
}
 8007902:	bf00      	nop
 8007904:	3730      	adds	r7, #48	; 0x30
 8007906:	46bd      	mov	sp, r7
 8007908:	bd80      	pop	{r7, pc}
 800790a:	bf00      	nop
 800790c:	50000800 	.word	0x50000800
 8007910:	40021000 	.word	0x40021000
 8007914:	2000216c 	.word	0x2000216c
 8007918:	4002001c 	.word	0x4002001c
 800791c:	50000c00 	.word	0x50000c00
 8007920:	20002940 	.word	0x20002940
 8007924:	40020030 	.word	0x40020030

08007928 <MX_DMA_Init>:

/** 
  * Enable DMA controller clock
  */
void MX_DMA_Init(void) 
{
 8007928:	b580      	push	{r7, lr}
 800792a:	b082      	sub	sp, #8
 800792c:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMAMUX1_CLK_ENABLE();
 800792e:	4b1e      	ldr	r3, [pc, #120]	; (80079a8 <MX_DMA_Init+0x80>)
 8007930:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007932:	4a1d      	ldr	r2, [pc, #116]	; (80079a8 <MX_DMA_Init+0x80>)
 8007934:	f043 0304 	orr.w	r3, r3, #4
 8007938:	6493      	str	r3, [r2, #72]	; 0x48
 800793a:	4b1b      	ldr	r3, [pc, #108]	; (80079a8 <MX_DMA_Init+0x80>)
 800793c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800793e:	f003 0304 	and.w	r3, r3, #4
 8007942:	607b      	str	r3, [r7, #4]
 8007944:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA1_CLK_ENABLE();
 8007946:	4b18      	ldr	r3, [pc, #96]	; (80079a8 <MX_DMA_Init+0x80>)
 8007948:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800794a:	4a17      	ldr	r2, [pc, #92]	; (80079a8 <MX_DMA_Init+0x80>)
 800794c:	f043 0301 	orr.w	r3, r3, #1
 8007950:	6493      	str	r3, [r2, #72]	; 0x48
 8007952:	4b15      	ldr	r3, [pc, #84]	; (80079a8 <MX_DMA_Init+0x80>)
 8007954:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007956:	f003 0301 	and.w	r3, r3, #1
 800795a:	603b      	str	r3, [r7, #0]
 800795c:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 1, 0);
 800795e:	2200      	movs	r2, #0
 8007960:	2101      	movs	r1, #1
 8007962:	200b      	movs	r0, #11
 8007964:	f003 fc77 	bl	800b256 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 8007968:	200b      	movs	r0, #11
 800796a:	f003 fc8e 	bl	800b28a <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel2_IRQn, 0, 0);
 800796e:	2200      	movs	r2, #0
 8007970:	2100      	movs	r1, #0
 8007972:	200c      	movs	r0, #12
 8007974:	f003 fc6f 	bl	800b256 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel2_IRQn);
 8007978:	200c      	movs	r0, #12
 800797a:	f003 fc86 	bl	800b28a <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel3_IRQn, 0, 0);
 800797e:	2200      	movs	r2, #0
 8007980:	2100      	movs	r1, #0
 8007982:	200d      	movs	r0, #13
 8007984:	f003 fc67 	bl	800b256 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel3_IRQn);
 8007988:	200d      	movs	r0, #13
 800798a:	f003 fc7e 	bl	800b28a <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel4_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel4_IRQn, 0, 0);
 800798e:	2200      	movs	r2, #0
 8007990:	2100      	movs	r1, #0
 8007992:	200e      	movs	r0, #14
 8007994:	f003 fc5f 	bl	800b256 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel4_IRQn);
 8007998:	200e      	movs	r0, #14
 800799a:	f003 fc76 	bl	800b28a <HAL_NVIC_EnableIRQ>

}
 800799e:	bf00      	nop
 80079a0:	3708      	adds	r7, #8
 80079a2:	46bd      	mov	sp, r7
 80079a4:	bd80      	pop	{r7, pc}
 80079a6:	bf00      	nop
 80079a8:	40021000 	.word	0x40021000

080079ac <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80079ac:	b480      	push	{r7}
 80079ae:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80079b0:	4b04      	ldr	r3, [pc, #16]	; (80079c4 <__NVIC_GetPriorityGrouping+0x18>)
 80079b2:	68db      	ldr	r3, [r3, #12]
 80079b4:	0a1b      	lsrs	r3, r3, #8
 80079b6:	f003 0307 	and.w	r3, r3, #7
}
 80079ba:	4618      	mov	r0, r3
 80079bc:	46bd      	mov	sp, r7
 80079be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079c2:	4770      	bx	lr
 80079c4:	e000ed00 	.word	0xe000ed00

080079c8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80079c8:	b480      	push	{r7}
 80079ca:	b083      	sub	sp, #12
 80079cc:	af00      	add	r7, sp, #0
 80079ce:	4603      	mov	r3, r0
 80079d0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80079d2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80079d6:	2b00      	cmp	r3, #0
 80079d8:	db0b      	blt.n	80079f2 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80079da:	79fb      	ldrb	r3, [r7, #7]
 80079dc:	f003 021f 	and.w	r2, r3, #31
 80079e0:	4907      	ldr	r1, [pc, #28]	; (8007a00 <__NVIC_EnableIRQ+0x38>)
 80079e2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80079e6:	095b      	lsrs	r3, r3, #5
 80079e8:	2001      	movs	r0, #1
 80079ea:	fa00 f202 	lsl.w	r2, r0, r2
 80079ee:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80079f2:	bf00      	nop
 80079f4:	370c      	adds	r7, #12
 80079f6:	46bd      	mov	sp, r7
 80079f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079fc:	4770      	bx	lr
 80079fe:	bf00      	nop
 8007a00:	e000e100 	.word	0xe000e100

08007a04 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8007a04:	b480      	push	{r7}
 8007a06:	b083      	sub	sp, #12
 8007a08:	af00      	add	r7, sp, #0
 8007a0a:	4603      	mov	r3, r0
 8007a0c:	6039      	str	r1, [r7, #0]
 8007a0e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8007a10:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8007a14:	2b00      	cmp	r3, #0
 8007a16:	db0a      	blt.n	8007a2e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8007a18:	683b      	ldr	r3, [r7, #0]
 8007a1a:	b2da      	uxtb	r2, r3
 8007a1c:	490c      	ldr	r1, [pc, #48]	; (8007a50 <__NVIC_SetPriority+0x4c>)
 8007a1e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8007a22:	0112      	lsls	r2, r2, #4
 8007a24:	b2d2      	uxtb	r2, r2
 8007a26:	440b      	add	r3, r1
 8007a28:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8007a2c:	e00a      	b.n	8007a44 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8007a2e:	683b      	ldr	r3, [r7, #0]
 8007a30:	b2da      	uxtb	r2, r3
 8007a32:	4908      	ldr	r1, [pc, #32]	; (8007a54 <__NVIC_SetPriority+0x50>)
 8007a34:	79fb      	ldrb	r3, [r7, #7]
 8007a36:	f003 030f 	and.w	r3, r3, #15
 8007a3a:	3b04      	subs	r3, #4
 8007a3c:	0112      	lsls	r2, r2, #4
 8007a3e:	b2d2      	uxtb	r2, r2
 8007a40:	440b      	add	r3, r1
 8007a42:	761a      	strb	r2, [r3, #24]
}
 8007a44:	bf00      	nop
 8007a46:	370c      	adds	r7, #12
 8007a48:	46bd      	mov	sp, r7
 8007a4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a4e:	4770      	bx	lr
 8007a50:	e000e100 	.word	0xe000e100
 8007a54:	e000ed00 	.word	0xe000ed00

08007a58 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8007a58:	b480      	push	{r7}
 8007a5a:	b089      	sub	sp, #36	; 0x24
 8007a5c:	af00      	add	r7, sp, #0
 8007a5e:	60f8      	str	r0, [r7, #12]
 8007a60:	60b9      	str	r1, [r7, #8]
 8007a62:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8007a64:	68fb      	ldr	r3, [r7, #12]
 8007a66:	f003 0307 	and.w	r3, r3, #7
 8007a6a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8007a6c:	69fb      	ldr	r3, [r7, #28]
 8007a6e:	f1c3 0307 	rsb	r3, r3, #7
 8007a72:	2b04      	cmp	r3, #4
 8007a74:	bf28      	it	cs
 8007a76:	2304      	movcs	r3, #4
 8007a78:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8007a7a:	69fb      	ldr	r3, [r7, #28]
 8007a7c:	3304      	adds	r3, #4
 8007a7e:	2b06      	cmp	r3, #6
 8007a80:	d902      	bls.n	8007a88 <NVIC_EncodePriority+0x30>
 8007a82:	69fb      	ldr	r3, [r7, #28]
 8007a84:	3b03      	subs	r3, #3
 8007a86:	e000      	b.n	8007a8a <NVIC_EncodePriority+0x32>
 8007a88:	2300      	movs	r3, #0
 8007a8a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8007a8c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8007a90:	69bb      	ldr	r3, [r7, #24]
 8007a92:	fa02 f303 	lsl.w	r3, r2, r3
 8007a96:	43da      	mvns	r2, r3
 8007a98:	68bb      	ldr	r3, [r7, #8]
 8007a9a:	401a      	ands	r2, r3
 8007a9c:	697b      	ldr	r3, [r7, #20]
 8007a9e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8007aa0:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8007aa4:	697b      	ldr	r3, [r7, #20]
 8007aa6:	fa01 f303 	lsl.w	r3, r1, r3
 8007aaa:	43d9      	mvns	r1, r3
 8007aac:	687b      	ldr	r3, [r7, #4]
 8007aae:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8007ab0:	4313      	orrs	r3, r2
         );
}
 8007ab2:	4618      	mov	r0, r3
 8007ab4:	3724      	adds	r7, #36	; 0x24
 8007ab6:	46bd      	mov	sp, r7
 8007ab8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007abc:	4770      	bx	lr
	...

08007ac0 <LL_SYSCFG_SetEXTISource>:
  *         @arg @ref LL_SYSCFG_EXTI_LINE14
  *         @arg @ref LL_SYSCFG_EXTI_LINE15
  * @retval None
  */
__STATIC_INLINE void LL_SYSCFG_SetEXTISource(uint32_t Port, uint32_t Line)
{
 8007ac0:	b480      	push	{r7}
 8007ac2:	b085      	sub	sp, #20
 8007ac4:	af00      	add	r7, sp, #0
 8007ac6:	6078      	str	r0, [r7, #4]
 8007ac8:	6039      	str	r1, [r7, #0]
  MODIFY_REG(SYSCFG->EXTICR[Line & 0x3U], (Line >> 16U), Port << (POSITION_VAL((Line >> 16U)) & 0x1FU) );
 8007aca:	4a14      	ldr	r2, [pc, #80]	; (8007b1c <LL_SYSCFG_SetEXTISource+0x5c>)
 8007acc:	683b      	ldr	r3, [r7, #0]
 8007ace:	f003 0303 	and.w	r3, r3, #3
 8007ad2:	3302      	adds	r3, #2
 8007ad4:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8007ad8:	683b      	ldr	r3, [r7, #0]
 8007ada:	0c1b      	lsrs	r3, r3, #16
 8007adc:	43db      	mvns	r3, r3
 8007ade:	ea02 0103 	and.w	r1, r2, r3
 8007ae2:	683b      	ldr	r3, [r7, #0]
 8007ae4:	0c1b      	lsrs	r3, r3, #16
 8007ae6:	60fb      	str	r3, [r7, #12]
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8007ae8:	68fb      	ldr	r3, [r7, #12]
 8007aea:	fa93 f3a3 	rbit	r3, r3
 8007aee:	60bb      	str	r3, [r7, #8]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8007af0:	68bb      	ldr	r3, [r7, #8]
 8007af2:	fab3 f383 	clz	r3, r3
 8007af6:	b2db      	uxtb	r3, r3
 8007af8:	f003 031f 	and.w	r3, r3, #31
 8007afc:	687a      	ldr	r2, [r7, #4]
 8007afe:	409a      	lsls	r2, r3
 8007b00:	4806      	ldr	r0, [pc, #24]	; (8007b1c <LL_SYSCFG_SetEXTISource+0x5c>)
 8007b02:	683b      	ldr	r3, [r7, #0]
 8007b04:	f003 0303 	and.w	r3, r3, #3
 8007b08:	430a      	orrs	r2, r1
 8007b0a:	3302      	adds	r3, #2
 8007b0c:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
}
 8007b10:	bf00      	nop
 8007b12:	3714      	adds	r7, #20
 8007b14:	46bd      	mov	sp, r7
 8007b16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b1a:	4770      	bx	lr
 8007b1c:	40010000 	.word	0x40010000

08007b20 <LL_GPIO_SetPinMode>:
  *         @arg @ref LL_GPIO_MODE_ALTERNATE
  *         @arg @ref LL_GPIO_MODE_ANALOG
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetPinMode(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t Mode)
{
 8007b20:	b480      	push	{r7}
 8007b22:	b089      	sub	sp, #36	; 0x24
 8007b24:	af00      	add	r7, sp, #0
 8007b26:	60f8      	str	r0, [r7, #12]
 8007b28:	60b9      	str	r1, [r7, #8]
 8007b2a:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->MODER, (GPIO_MODER_MODE0 << (POSITION_VAL(Pin) * 2U)), (Mode << (POSITION_VAL(Pin) * 2U)));
 8007b2c:	68fb      	ldr	r3, [r7, #12]
 8007b2e:	681a      	ldr	r2, [r3, #0]
 8007b30:	68bb      	ldr	r3, [r7, #8]
 8007b32:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8007b34:	697b      	ldr	r3, [r7, #20]
 8007b36:	fa93 f3a3 	rbit	r3, r3
 8007b3a:	613b      	str	r3, [r7, #16]
  return result;
 8007b3c:	693b      	ldr	r3, [r7, #16]
 8007b3e:	fab3 f383 	clz	r3, r3
 8007b42:	b2db      	uxtb	r3, r3
 8007b44:	005b      	lsls	r3, r3, #1
 8007b46:	2103      	movs	r1, #3
 8007b48:	fa01 f303 	lsl.w	r3, r1, r3
 8007b4c:	43db      	mvns	r3, r3
 8007b4e:	401a      	ands	r2, r3
 8007b50:	68bb      	ldr	r3, [r7, #8]
 8007b52:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8007b54:	69fb      	ldr	r3, [r7, #28]
 8007b56:	fa93 f3a3 	rbit	r3, r3
 8007b5a:	61bb      	str	r3, [r7, #24]
  return result;
 8007b5c:	69bb      	ldr	r3, [r7, #24]
 8007b5e:	fab3 f383 	clz	r3, r3
 8007b62:	b2db      	uxtb	r3, r3
 8007b64:	005b      	lsls	r3, r3, #1
 8007b66:	6879      	ldr	r1, [r7, #4]
 8007b68:	fa01 f303 	lsl.w	r3, r1, r3
 8007b6c:	431a      	orrs	r2, r3
 8007b6e:	68fb      	ldr	r3, [r7, #12]
 8007b70:	601a      	str	r2, [r3, #0]
}
 8007b72:	bf00      	nop
 8007b74:	3724      	adds	r7, #36	; 0x24
 8007b76:	46bd      	mov	sp, r7
 8007b78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b7c:	4770      	bx	lr

08007b7e <LL_GPIO_SetPinPull>:
  *         @arg @ref LL_GPIO_PULL_UP
  *         @arg @ref LL_GPIO_PULL_DOWN
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetPinPull(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t Pull)
{
 8007b7e:	b480      	push	{r7}
 8007b80:	b089      	sub	sp, #36	; 0x24
 8007b82:	af00      	add	r7, sp, #0
 8007b84:	60f8      	str	r0, [r7, #12]
 8007b86:	60b9      	str	r1, [r7, #8]
 8007b88:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->PUPDR, (GPIO_PUPDR_PUPD0 << (POSITION_VAL(Pin) * 2U)), (Pull << (POSITION_VAL(Pin) * 2U)));
 8007b8a:	68fb      	ldr	r3, [r7, #12]
 8007b8c:	68da      	ldr	r2, [r3, #12]
 8007b8e:	68bb      	ldr	r3, [r7, #8]
 8007b90:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8007b92:	697b      	ldr	r3, [r7, #20]
 8007b94:	fa93 f3a3 	rbit	r3, r3
 8007b98:	613b      	str	r3, [r7, #16]
  return result;
 8007b9a:	693b      	ldr	r3, [r7, #16]
 8007b9c:	fab3 f383 	clz	r3, r3
 8007ba0:	b2db      	uxtb	r3, r3
 8007ba2:	005b      	lsls	r3, r3, #1
 8007ba4:	2103      	movs	r1, #3
 8007ba6:	fa01 f303 	lsl.w	r3, r1, r3
 8007baa:	43db      	mvns	r3, r3
 8007bac:	401a      	ands	r2, r3
 8007bae:	68bb      	ldr	r3, [r7, #8]
 8007bb0:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8007bb2:	69fb      	ldr	r3, [r7, #28]
 8007bb4:	fa93 f3a3 	rbit	r3, r3
 8007bb8:	61bb      	str	r3, [r7, #24]
  return result;
 8007bba:	69bb      	ldr	r3, [r7, #24]
 8007bbc:	fab3 f383 	clz	r3, r3
 8007bc0:	b2db      	uxtb	r3, r3
 8007bc2:	005b      	lsls	r3, r3, #1
 8007bc4:	6879      	ldr	r1, [r7, #4]
 8007bc6:	fa01 f303 	lsl.w	r3, r1, r3
 8007bca:	431a      	orrs	r2, r3
 8007bcc:	68fb      	ldr	r3, [r7, #12]
 8007bce:	60da      	str	r2, [r3, #12]
}
 8007bd0:	bf00      	nop
 8007bd2:	3724      	adds	r7, #36	; 0x24
 8007bd4:	46bd      	mov	sp, r7
 8007bd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007bda:	4770      	bx	lr

08007bdc <LL_GPIO_ResetOutputPin>:
  *         @arg @ref LL_GPIO_PIN_15
  *         @arg @ref LL_GPIO_PIN_ALL
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_ResetOutputPin(GPIO_TypeDef *GPIOx, uint32_t PinMask)
{
 8007bdc:	b480      	push	{r7}
 8007bde:	b083      	sub	sp, #12
 8007be0:	af00      	add	r7, sp, #0
 8007be2:	6078      	str	r0, [r7, #4]
 8007be4:	6039      	str	r1, [r7, #0]
  WRITE_REG(GPIOx->BRR, PinMask);
 8007be6:	687b      	ldr	r3, [r7, #4]
 8007be8:	683a      	ldr	r2, [r7, #0]
 8007bea:	629a      	str	r2, [r3, #40]	; 0x28
}
 8007bec:	bf00      	nop
 8007bee:	370c      	adds	r7, #12
 8007bf0:	46bd      	mov	sp, r7
 8007bf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007bf6:	4770      	bx	lr

08007bf8 <LL_AHB2_GRP1_EnableClock>:
  *
  *         (*) value not defined in all devices.
  * @retval None
  */
__STATIC_INLINE void LL_AHB2_GRP1_EnableClock(uint32_t Periphs)
{
 8007bf8:	b480      	push	{r7}
 8007bfa:	b085      	sub	sp, #20
 8007bfc:	af00      	add	r7, sp, #0
 8007bfe:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->AHB2ENR, Periphs);
 8007c00:	4b08      	ldr	r3, [pc, #32]	; (8007c24 <LL_AHB2_GRP1_EnableClock+0x2c>)
 8007c02:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8007c04:	4907      	ldr	r1, [pc, #28]	; (8007c24 <LL_AHB2_GRP1_EnableClock+0x2c>)
 8007c06:	687b      	ldr	r3, [r7, #4]
 8007c08:	4313      	orrs	r3, r2
 8007c0a:	64cb      	str	r3, [r1, #76]	; 0x4c
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 8007c0c:	4b05      	ldr	r3, [pc, #20]	; (8007c24 <LL_AHB2_GRP1_EnableClock+0x2c>)
 8007c0e:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8007c10:	687b      	ldr	r3, [r7, #4]
 8007c12:	4013      	ands	r3, r2
 8007c14:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8007c16:	68fb      	ldr	r3, [r7, #12]
}
 8007c18:	bf00      	nop
 8007c1a:	3714      	adds	r7, #20
 8007c1c:	46bd      	mov	sp, r7
 8007c1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c22:	4770      	bx	lr
 8007c24:	40021000 	.word	0x40021000

08007c28 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8007c28:	b580      	push	{r7, lr}
 8007c2a:	b08a      	sub	sp, #40	; 0x28
 8007c2c:	af00      	add	r7, sp, #0

  LL_EXTI_InitTypeDef EXTI_InitStruct = {0};
 8007c2e:	f107 031c 	add.w	r3, r7, #28
 8007c32:	2200      	movs	r2, #0
 8007c34:	601a      	str	r2, [r3, #0]
 8007c36:	605a      	str	r2, [r3, #4]
 8007c38:	609a      	str	r2, [r3, #8]
  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 8007c3a:	1d3b      	adds	r3, r7, #4
 8007c3c:	2200      	movs	r2, #0
 8007c3e:	601a      	str	r2, [r3, #0]
 8007c40:	605a      	str	r2, [r3, #4]
 8007c42:	609a      	str	r2, [r3, #8]
 8007c44:	60da      	str	r2, [r3, #12]
 8007c46:	611a      	str	r2, [r3, #16]
 8007c48:	615a      	str	r2, [r3, #20]

  /* GPIO Ports Clock Enable */
  LL_AHB2_GRP1_EnableClock(LL_AHB2_GRP1_PERIPH_GPIOC);
 8007c4a:	2004      	movs	r0, #4
 8007c4c:	f7ff ffd4 	bl	8007bf8 <LL_AHB2_GRP1_EnableClock>
  LL_AHB2_GRP1_EnableClock(LL_AHB2_GRP1_PERIPH_GPIOF);
 8007c50:	2020      	movs	r0, #32
 8007c52:	f7ff ffd1 	bl	8007bf8 <LL_AHB2_GRP1_EnableClock>
  LL_AHB2_GRP1_EnableClock(LL_AHB2_GRP1_PERIPH_GPIOA);
 8007c56:	2001      	movs	r0, #1
 8007c58:	f7ff ffce 	bl	8007bf8 <LL_AHB2_GRP1_EnableClock>
  LL_AHB2_GRP1_EnableClock(LL_AHB2_GRP1_PERIPH_GPIOB);
 8007c5c:	2002      	movs	r0, #2
 8007c5e:	f7ff ffcb 	bl	8007bf8 <LL_AHB2_GRP1_EnableClock>

  /**/
  LL_GPIO_ResetOutputPin(TRIGMODE_GPIO_Port, TRIGMODE_Pin);
 8007c62:	2108      	movs	r1, #8
 8007c64:	48d3      	ldr	r0, [pc, #844]	; (8007fb4 <MX_GPIO_Init+0x38c>)
 8007c66:	f7ff ffb9 	bl	8007bdc <LL_GPIO_ResetOutputPin>

  /**/
  LL_GPIO_ResetOutputPin(OFFSET_ENABLE_GPIO_Port, OFFSET_ENABLE_Pin);
 8007c6a:	2108      	movs	r1, #8
 8007c6c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8007c70:	f7ff ffb4 	bl	8007bdc <LL_GPIO_ResetOutputPin>

  /**/
  LL_GPIO_ResetOutputPin(CH1_GAIN_C_GPIO_Port, CH1_GAIN_C_Pin);
 8007c74:	2110      	movs	r1, #16
 8007c76:	48cf      	ldr	r0, [pc, #828]	; (8007fb4 <MX_GPIO_Init+0x38c>)
 8007c78:	f7ff ffb0 	bl	8007bdc <LL_GPIO_ResetOutputPin>

  /**/
  LL_GPIO_ResetOutputPin(CH1_GAIN_B_GPIO_Port, CH1_GAIN_B_Pin);
 8007c7c:	2120      	movs	r1, #32
 8007c7e:	48cd      	ldr	r0, [pc, #820]	; (8007fb4 <MX_GPIO_Init+0x38c>)
 8007c80:	f7ff ffac 	bl	8007bdc <LL_GPIO_ResetOutputPin>

  /**/
  LL_GPIO_ResetOutputPin(CH1_GAIN_A_GPIO_Port, CH1_GAIN_A_Pin);
 8007c84:	2101      	movs	r1, #1
 8007c86:	48cc      	ldr	r0, [pc, #816]	; (8007fb8 <MX_GPIO_Init+0x390>)
 8007c88:	f7ff ffa8 	bl	8007bdc <LL_GPIO_ResetOutputPin>

  /**/
  LL_GPIO_ResetOutputPin(TRIGMUX1_GPIO_Port, TRIGMUX1_Pin);
 8007c8c:	f44f 7180 	mov.w	r1, #256	; 0x100
 8007c90:	48c8      	ldr	r0, [pc, #800]	; (8007fb4 <MX_GPIO_Init+0x38c>)
 8007c92:	f7ff ffa3 	bl	8007bdc <LL_GPIO_ResetOutputPin>

  /**/
  LL_GPIO_ResetOutputPin(TRIGMUX2_GPIO_Port, TRIGMUX2_Pin);
 8007c96:	f44f 7100 	mov.w	r1, #512	; 0x200
 8007c9a:	48c6      	ldr	r0, [pc, #792]	; (8007fb4 <MX_GPIO_Init+0x38c>)
 8007c9c:	f7ff ff9e 	bl	8007bdc <LL_GPIO_ResetOutputPin>

  /**/
  LL_GPIO_ResetOutputPin(DC_GPIO_Port, DC_Pin);
 8007ca0:	2140      	movs	r1, #64	; 0x40
 8007ca2:	48c5      	ldr	r0, [pc, #788]	; (8007fb8 <MX_GPIO_Init+0x390>)
 8007ca4:	f7ff ff9a 	bl	8007bdc <LL_GPIO_ResetOutputPin>

  /**/
  LL_GPIO_ResetOutputPin(CS_GPIO_Port, CS_Pin);
 8007ca8:	2180      	movs	r1, #128	; 0x80
 8007caa:	48c3      	ldr	r0, [pc, #780]	; (8007fb8 <MX_GPIO_Init+0x390>)
 8007cac:	f7ff ff96 	bl	8007bdc <LL_GPIO_ResetOutputPin>

  /**/
  LL_GPIO_ResetOutputPin(RST_GPIO_Port, RST_Pin);
 8007cb0:	f44f 7100 	mov.w	r1, #512	; 0x200
 8007cb4:	48c0      	ldr	r0, [pc, #768]	; (8007fb8 <MX_GPIO_Init+0x390>)
 8007cb6:	f7ff ff91 	bl	8007bdc <LL_GPIO_ResetOutputPin>

  /**/
  LL_SYSCFG_SetEXTISource(LL_SYSCFG_EXTI_PORTC, LL_SYSCFG_EXTI_LINE14);
 8007cba:	49c0      	ldr	r1, [pc, #768]	; (8007fbc <MX_GPIO_Init+0x394>)
 8007cbc:	2002      	movs	r0, #2
 8007cbe:	f7ff feff 	bl	8007ac0 <LL_SYSCFG_SetEXTISource>

  /**/
  LL_SYSCFG_SetEXTISource(LL_SYSCFG_EXTI_PORTC, LL_SYSCFG_EXTI_LINE15);
 8007cc2:	49bf      	ldr	r1, [pc, #764]	; (8007fc0 <MX_GPIO_Init+0x398>)
 8007cc4:	2002      	movs	r0, #2
 8007cc6:	f7ff fefb 	bl	8007ac0 <LL_SYSCFG_SetEXTISource>

  /**/
  LL_SYSCFG_SetEXTISource(LL_SYSCFG_EXTI_PORTF, LL_SYSCFG_EXTI_LINE0);
 8007cca:	f44f 2170 	mov.w	r1, #983040	; 0xf0000
 8007cce:	2005      	movs	r0, #5
 8007cd0:	f7ff fef6 	bl	8007ac0 <LL_SYSCFG_SetEXTISource>

  /**/
  LL_SYSCFG_SetEXTISource(LL_SYSCFG_EXTI_PORTF, LL_SYSCFG_EXTI_LINE1);
 8007cd4:	f44f 0170 	mov.w	r1, #15728640	; 0xf00000
 8007cd8:	2005      	movs	r0, #5
 8007cda:	f7ff fef1 	bl	8007ac0 <LL_SYSCFG_SetEXTISource>

  /**/
  LL_SYSCFG_SetEXTISource(LL_SYSCFG_EXTI_PORTC, LL_SYSCFG_EXTI_LINE2);
 8007cde:	f04f 6170 	mov.w	r1, #251658240	; 0xf000000
 8007ce2:	2002      	movs	r0, #2
 8007ce4:	f7ff feec 	bl	8007ac0 <LL_SYSCFG_SetEXTISource>

  /**/
  EXTI_InitStruct.Line_0_31 = LL_EXTI_LINE_14;
 8007ce8:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8007cec:	61fb      	str	r3, [r7, #28]
  EXTI_InitStruct.LineCommand = ENABLE;
 8007cee:	2301      	movs	r3, #1
 8007cf0:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
  EXTI_InitStruct.Mode = LL_EXTI_MODE_IT;
 8007cf4:	2300      	movs	r3, #0
 8007cf6:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
  EXTI_InitStruct.Trigger = LL_EXTI_TRIGGER_FALLING;
 8007cfa:	2302      	movs	r3, #2
 8007cfc:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
  LL_EXTI_Init(&EXTI_InitStruct);
 8007d00:	f107 031c 	add.w	r3, r7, #28
 8007d04:	4618      	mov	r0, r3
 8007d06:	f008 fa37 	bl	8010178 <LL_EXTI_Init>

  /**/
  EXTI_InitStruct.Line_0_31 = LL_EXTI_LINE_15;
 8007d0a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8007d0e:	61fb      	str	r3, [r7, #28]
  EXTI_InitStruct.LineCommand = ENABLE;
 8007d10:	2301      	movs	r3, #1
 8007d12:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
  EXTI_InitStruct.Mode = LL_EXTI_MODE_IT;
 8007d16:	2300      	movs	r3, #0
 8007d18:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
  EXTI_InitStruct.Trigger = LL_EXTI_TRIGGER_FALLING;
 8007d1c:	2302      	movs	r3, #2
 8007d1e:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
  LL_EXTI_Init(&EXTI_InitStruct);
 8007d22:	f107 031c 	add.w	r3, r7, #28
 8007d26:	4618      	mov	r0, r3
 8007d28:	f008 fa26 	bl	8010178 <LL_EXTI_Init>

  /**/
  EXTI_InitStruct.Line_0_31 = LL_EXTI_LINE_0;
 8007d2c:	2301      	movs	r3, #1
 8007d2e:	61fb      	str	r3, [r7, #28]
  EXTI_InitStruct.LineCommand = ENABLE;
 8007d30:	2301      	movs	r3, #1
 8007d32:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
  EXTI_InitStruct.Mode = LL_EXTI_MODE_IT;
 8007d36:	2300      	movs	r3, #0
 8007d38:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
  EXTI_InitStruct.Trigger = LL_EXTI_TRIGGER_FALLING;
 8007d3c:	2302      	movs	r3, #2
 8007d3e:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
  LL_EXTI_Init(&EXTI_InitStruct);
 8007d42:	f107 031c 	add.w	r3, r7, #28
 8007d46:	4618      	mov	r0, r3
 8007d48:	f008 fa16 	bl	8010178 <LL_EXTI_Init>

  /**/
  EXTI_InitStruct.Line_0_31 = LL_EXTI_LINE_1;
 8007d4c:	2302      	movs	r3, #2
 8007d4e:	61fb      	str	r3, [r7, #28]
  EXTI_InitStruct.LineCommand = ENABLE;
 8007d50:	2301      	movs	r3, #1
 8007d52:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
  EXTI_InitStruct.Mode = LL_EXTI_MODE_IT;
 8007d56:	2300      	movs	r3, #0
 8007d58:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
  EXTI_InitStruct.Trigger = LL_EXTI_TRIGGER_FALLING;
 8007d5c:	2302      	movs	r3, #2
 8007d5e:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
  LL_EXTI_Init(&EXTI_InitStruct);
 8007d62:	f107 031c 	add.w	r3, r7, #28
 8007d66:	4618      	mov	r0, r3
 8007d68:	f008 fa06 	bl	8010178 <LL_EXTI_Init>

  /**/
  EXTI_InitStruct.Line_0_31 = LL_EXTI_LINE_2;
 8007d6c:	2304      	movs	r3, #4
 8007d6e:	61fb      	str	r3, [r7, #28]
  EXTI_InitStruct.LineCommand = ENABLE;
 8007d70:	2301      	movs	r3, #1
 8007d72:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
  EXTI_InitStruct.Mode = LL_EXTI_MODE_IT;
 8007d76:	2300      	movs	r3, #0
 8007d78:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
  EXTI_InitStruct.Trigger = LL_EXTI_TRIGGER_FALLING;
 8007d7c:	2302      	movs	r3, #2
 8007d7e:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
  LL_EXTI_Init(&EXTI_InitStruct);
 8007d82:	f107 031c 	add.w	r3, r7, #28
 8007d86:	4618      	mov	r0, r3
 8007d88:	f008 f9f6 	bl	8010178 <LL_EXTI_Init>

  /**/
  LL_GPIO_SetPinPull(BTN1_EXTI14_GPIO_Port, BTN1_EXTI14_Pin, LL_GPIO_PULL_UP);
 8007d8c:	2201      	movs	r2, #1
 8007d8e:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8007d92:	4888      	ldr	r0, [pc, #544]	; (8007fb4 <MX_GPIO_Init+0x38c>)
 8007d94:	f7ff fef3 	bl	8007b7e <LL_GPIO_SetPinPull>

  /**/
  LL_GPIO_SetPinPull(BTN2_EXTI15_GPIO_Port, BTN2_EXTI15_Pin, LL_GPIO_PULL_UP);
 8007d98:	2201      	movs	r2, #1
 8007d9a:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8007d9e:	4885      	ldr	r0, [pc, #532]	; (8007fb4 <MX_GPIO_Init+0x38c>)
 8007da0:	f7ff feed 	bl	8007b7e <LL_GPIO_SetPinPull>

  /**/
  LL_GPIO_SetPinPull(BTN3_EXTI0_GPIO_Port, BTN3_EXTI0_Pin, LL_GPIO_PULL_UP);
 8007da4:	2201      	movs	r2, #1
 8007da6:	2101      	movs	r1, #1
 8007da8:	4886      	ldr	r0, [pc, #536]	; (8007fc4 <MX_GPIO_Init+0x39c>)
 8007daa:	f7ff fee8 	bl	8007b7e <LL_GPIO_SetPinPull>

  /**/
  LL_GPIO_SetPinPull(BTN4_EXTI1_GPIO_Port, BTN4_EXTI1_Pin, LL_GPIO_PULL_UP);
 8007dae:	2201      	movs	r2, #1
 8007db0:	2102      	movs	r1, #2
 8007db2:	4884      	ldr	r0, [pc, #528]	; (8007fc4 <MX_GPIO_Init+0x39c>)
 8007db4:	f7ff fee3 	bl	8007b7e <LL_GPIO_SetPinPull>

  /**/
  LL_GPIO_SetPinPull(ENC_SW_GPIO_Port, ENC_SW_Pin, LL_GPIO_PULL_UP);
 8007db8:	2201      	movs	r2, #1
 8007dba:	2104      	movs	r1, #4
 8007dbc:	487d      	ldr	r0, [pc, #500]	; (8007fb4 <MX_GPIO_Init+0x38c>)
 8007dbe:	f7ff fede 	bl	8007b7e <LL_GPIO_SetPinPull>

  /**/
  LL_GPIO_SetPinMode(BTN1_EXTI14_GPIO_Port, BTN1_EXTI14_Pin, LL_GPIO_MODE_INPUT);
 8007dc2:	2200      	movs	r2, #0
 8007dc4:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8007dc8:	487a      	ldr	r0, [pc, #488]	; (8007fb4 <MX_GPIO_Init+0x38c>)
 8007dca:	f7ff fea9 	bl	8007b20 <LL_GPIO_SetPinMode>

  /**/
  LL_GPIO_SetPinMode(BTN2_EXTI15_GPIO_Port, BTN2_EXTI15_Pin, LL_GPIO_MODE_INPUT);
 8007dce:	2200      	movs	r2, #0
 8007dd0:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8007dd4:	4877      	ldr	r0, [pc, #476]	; (8007fb4 <MX_GPIO_Init+0x38c>)
 8007dd6:	f7ff fea3 	bl	8007b20 <LL_GPIO_SetPinMode>

  /**/
  LL_GPIO_SetPinMode(BTN3_EXTI0_GPIO_Port, BTN3_EXTI0_Pin, LL_GPIO_MODE_INPUT);
 8007dda:	2200      	movs	r2, #0
 8007ddc:	2101      	movs	r1, #1
 8007dde:	4879      	ldr	r0, [pc, #484]	; (8007fc4 <MX_GPIO_Init+0x39c>)
 8007de0:	f7ff fe9e 	bl	8007b20 <LL_GPIO_SetPinMode>

  /**/
  LL_GPIO_SetPinMode(BTN4_EXTI1_GPIO_Port, BTN4_EXTI1_Pin, LL_GPIO_MODE_INPUT);
 8007de4:	2200      	movs	r2, #0
 8007de6:	2102      	movs	r1, #2
 8007de8:	4876      	ldr	r0, [pc, #472]	; (8007fc4 <MX_GPIO_Init+0x39c>)
 8007dea:	f7ff fe99 	bl	8007b20 <LL_GPIO_SetPinMode>

  /**/
  LL_GPIO_SetPinMode(ENC_SW_GPIO_Port, ENC_SW_Pin, LL_GPIO_MODE_INPUT);
 8007dee:	2200      	movs	r2, #0
 8007df0:	2104      	movs	r1, #4
 8007df2:	4870      	ldr	r0, [pc, #448]	; (8007fb4 <MX_GPIO_Init+0x38c>)
 8007df4:	f7ff fe94 	bl	8007b20 <LL_GPIO_SetPinMode>

  /**/
  GPIO_InitStruct.Pin = TRIGMODE_Pin;
 8007df8:	2308      	movs	r3, #8
 8007dfa:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 8007dfc:	2301      	movs	r3, #1
 8007dfe:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 8007e00:	2300      	movs	r3, #0
 8007e02:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8007e04:	2300      	movs	r3, #0
 8007e06:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_DOWN;
 8007e08:	2302      	movs	r3, #2
 8007e0a:	617b      	str	r3, [r7, #20]
  LL_GPIO_Init(TRIGMODE_GPIO_Port, &GPIO_InitStruct);
 8007e0c:	1d3b      	adds	r3, r7, #4
 8007e0e:	4619      	mov	r1, r3
 8007e10:	4868      	ldr	r0, [pc, #416]	; (8007fb4 <MX_GPIO_Init+0x38c>)
 8007e12:	f008 fba4 	bl	801055e <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = OFFSET_ENABLE_Pin;
 8007e16:	2308      	movs	r3, #8
 8007e18:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 8007e1a:	2301      	movs	r3, #1
 8007e1c:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 8007e1e:	2300      	movs	r3, #0
 8007e20:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8007e22:	2300      	movs	r3, #0
 8007e24:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8007e26:	2300      	movs	r3, #0
 8007e28:	617b      	str	r3, [r7, #20]
  LL_GPIO_Init(OFFSET_ENABLE_GPIO_Port, &GPIO_InitStruct);
 8007e2a:	1d3b      	adds	r3, r7, #4
 8007e2c:	4619      	mov	r1, r3
 8007e2e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8007e32:	f008 fb94 	bl	801055e <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = CH1_GAIN_C_Pin;
 8007e36:	2310      	movs	r3, #16
 8007e38:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 8007e3a:	2301      	movs	r3, #1
 8007e3c:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 8007e3e:	2300      	movs	r3, #0
 8007e40:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8007e42:	2300      	movs	r3, #0
 8007e44:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8007e46:	2300      	movs	r3, #0
 8007e48:	617b      	str	r3, [r7, #20]
  LL_GPIO_Init(CH1_GAIN_C_GPIO_Port, &GPIO_InitStruct);
 8007e4a:	1d3b      	adds	r3, r7, #4
 8007e4c:	4619      	mov	r1, r3
 8007e4e:	4859      	ldr	r0, [pc, #356]	; (8007fb4 <MX_GPIO_Init+0x38c>)
 8007e50:	f008 fb85 	bl	801055e <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = CH1_GAIN_B_Pin;
 8007e54:	2320      	movs	r3, #32
 8007e56:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 8007e58:	2301      	movs	r3, #1
 8007e5a:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 8007e5c:	2300      	movs	r3, #0
 8007e5e:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8007e60:	2300      	movs	r3, #0
 8007e62:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8007e64:	2300      	movs	r3, #0
 8007e66:	617b      	str	r3, [r7, #20]
  LL_GPIO_Init(CH1_GAIN_B_GPIO_Port, &GPIO_InitStruct);
 8007e68:	1d3b      	adds	r3, r7, #4
 8007e6a:	4619      	mov	r1, r3
 8007e6c:	4851      	ldr	r0, [pc, #324]	; (8007fb4 <MX_GPIO_Init+0x38c>)
 8007e6e:	f008 fb76 	bl	801055e <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = CH1_GAIN_A_Pin;
 8007e72:	2301      	movs	r3, #1
 8007e74:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 8007e76:	2301      	movs	r3, #1
 8007e78:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 8007e7a:	2300      	movs	r3, #0
 8007e7c:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8007e7e:	2300      	movs	r3, #0
 8007e80:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8007e82:	2300      	movs	r3, #0
 8007e84:	617b      	str	r3, [r7, #20]
  LL_GPIO_Init(CH1_GAIN_A_GPIO_Port, &GPIO_InitStruct);
 8007e86:	1d3b      	adds	r3, r7, #4
 8007e88:	4619      	mov	r1, r3
 8007e8a:	484b      	ldr	r0, [pc, #300]	; (8007fb8 <MX_GPIO_Init+0x390>)
 8007e8c:	f008 fb67 	bl	801055e <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = TRIGMUX1_Pin;
 8007e90:	f44f 7380 	mov.w	r3, #256	; 0x100
 8007e94:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 8007e96:	2301      	movs	r3, #1
 8007e98:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 8007e9a:	2300      	movs	r3, #0
 8007e9c:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8007e9e:	2300      	movs	r3, #0
 8007ea0:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8007ea2:	2300      	movs	r3, #0
 8007ea4:	617b      	str	r3, [r7, #20]
  LL_GPIO_Init(TRIGMUX1_GPIO_Port, &GPIO_InitStruct);
 8007ea6:	1d3b      	adds	r3, r7, #4
 8007ea8:	4619      	mov	r1, r3
 8007eaa:	4842      	ldr	r0, [pc, #264]	; (8007fb4 <MX_GPIO_Init+0x38c>)
 8007eac:	f008 fb57 	bl	801055e <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = TRIGMUX2_Pin;
 8007eb0:	f44f 7300 	mov.w	r3, #512	; 0x200
 8007eb4:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 8007eb6:	2301      	movs	r3, #1
 8007eb8:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 8007eba:	2300      	movs	r3, #0
 8007ebc:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8007ebe:	2300      	movs	r3, #0
 8007ec0:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8007ec2:	2300      	movs	r3, #0
 8007ec4:	617b      	str	r3, [r7, #20]
  LL_GPIO_Init(TRIGMUX2_GPIO_Port, &GPIO_InitStruct);
 8007ec6:	1d3b      	adds	r3, r7, #4
 8007ec8:	4619      	mov	r1, r3
 8007eca:	483a      	ldr	r0, [pc, #232]	; (8007fb4 <MX_GPIO_Init+0x38c>)
 8007ecc:	f008 fb47 	bl	801055e <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = DC_Pin;
 8007ed0:	2340      	movs	r3, #64	; 0x40
 8007ed2:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 8007ed4:	2301      	movs	r3, #1
 8007ed6:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_VERY_HIGH;
 8007ed8:	2303      	movs	r3, #3
 8007eda:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8007edc:	2300      	movs	r3, #0
 8007ede:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8007ee0:	2300      	movs	r3, #0
 8007ee2:	617b      	str	r3, [r7, #20]
  LL_GPIO_Init(DC_GPIO_Port, &GPIO_InitStruct);
 8007ee4:	1d3b      	adds	r3, r7, #4
 8007ee6:	4619      	mov	r1, r3
 8007ee8:	4833      	ldr	r0, [pc, #204]	; (8007fb8 <MX_GPIO_Init+0x390>)
 8007eea:	f008 fb38 	bl	801055e <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = CS_Pin;
 8007eee:	2380      	movs	r3, #128	; 0x80
 8007ef0:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 8007ef2:	2301      	movs	r3, #1
 8007ef4:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_VERY_HIGH;
 8007ef6:	2303      	movs	r3, #3
 8007ef8:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8007efa:	2300      	movs	r3, #0
 8007efc:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8007efe:	2300      	movs	r3, #0
 8007f00:	617b      	str	r3, [r7, #20]
  LL_GPIO_Init(CS_GPIO_Port, &GPIO_InitStruct);
 8007f02:	1d3b      	adds	r3, r7, #4
 8007f04:	4619      	mov	r1, r3
 8007f06:	482c      	ldr	r0, [pc, #176]	; (8007fb8 <MX_GPIO_Init+0x390>)
 8007f08:	f008 fb29 	bl	801055e <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = RST_Pin;
 8007f0c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8007f10:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 8007f12:	2301      	movs	r3, #1
 8007f14:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_VERY_HIGH;
 8007f16:	2303      	movs	r3, #3
 8007f18:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8007f1a:	2300      	movs	r3, #0
 8007f1c:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8007f1e:	2300      	movs	r3, #0
 8007f20:	617b      	str	r3, [r7, #20]
  LL_GPIO_Init(RST_GPIO_Port, &GPIO_InitStruct);
 8007f22:	1d3b      	adds	r3, r7, #4
 8007f24:	4619      	mov	r1, r3
 8007f26:	4824      	ldr	r0, [pc, #144]	; (8007fb8 <MX_GPIO_Init+0x390>)
 8007f28:	f008 fb19 	bl	801055e <LL_GPIO_Init>

  /* EXTI interrupt init*/
  NVIC_SetPriority(EXTI0_IRQn, NVIC_EncodePriority(NVIC_GetPriorityGrouping(),0, 0));
 8007f2c:	f7ff fd3e 	bl	80079ac <__NVIC_GetPriorityGrouping>
 8007f30:	4603      	mov	r3, r0
 8007f32:	2200      	movs	r2, #0
 8007f34:	2100      	movs	r1, #0
 8007f36:	4618      	mov	r0, r3
 8007f38:	f7ff fd8e 	bl	8007a58 <NVIC_EncodePriority>
 8007f3c:	4603      	mov	r3, r0
 8007f3e:	4619      	mov	r1, r3
 8007f40:	2006      	movs	r0, #6
 8007f42:	f7ff fd5f 	bl	8007a04 <__NVIC_SetPriority>
  NVIC_EnableIRQ(EXTI0_IRQn);
 8007f46:	2006      	movs	r0, #6
 8007f48:	f7ff fd3e 	bl	80079c8 <__NVIC_EnableIRQ>
  NVIC_SetPriority(EXTI1_IRQn, NVIC_EncodePriority(NVIC_GetPriorityGrouping(),0, 0));
 8007f4c:	f7ff fd2e 	bl	80079ac <__NVIC_GetPriorityGrouping>
 8007f50:	4603      	mov	r3, r0
 8007f52:	2200      	movs	r2, #0
 8007f54:	2100      	movs	r1, #0
 8007f56:	4618      	mov	r0, r3
 8007f58:	f7ff fd7e 	bl	8007a58 <NVIC_EncodePriority>
 8007f5c:	4603      	mov	r3, r0
 8007f5e:	4619      	mov	r1, r3
 8007f60:	2007      	movs	r0, #7
 8007f62:	f7ff fd4f 	bl	8007a04 <__NVIC_SetPriority>
  NVIC_EnableIRQ(EXTI1_IRQn);
 8007f66:	2007      	movs	r0, #7
 8007f68:	f7ff fd2e 	bl	80079c8 <__NVIC_EnableIRQ>
  NVIC_SetPriority(EXTI2_IRQn, NVIC_EncodePriority(NVIC_GetPriorityGrouping(),0, 0));
 8007f6c:	f7ff fd1e 	bl	80079ac <__NVIC_GetPriorityGrouping>
 8007f70:	4603      	mov	r3, r0
 8007f72:	2200      	movs	r2, #0
 8007f74:	2100      	movs	r1, #0
 8007f76:	4618      	mov	r0, r3
 8007f78:	f7ff fd6e 	bl	8007a58 <NVIC_EncodePriority>
 8007f7c:	4603      	mov	r3, r0
 8007f7e:	4619      	mov	r1, r3
 8007f80:	2008      	movs	r0, #8
 8007f82:	f7ff fd3f 	bl	8007a04 <__NVIC_SetPriority>
  NVIC_EnableIRQ(EXTI2_IRQn);
 8007f86:	2008      	movs	r0, #8
 8007f88:	f7ff fd1e 	bl	80079c8 <__NVIC_EnableIRQ>
  NVIC_SetPriority(EXTI15_10_IRQn, NVIC_EncodePriority(NVIC_GetPriorityGrouping(),0, 0));
 8007f8c:	f7ff fd0e 	bl	80079ac <__NVIC_GetPriorityGrouping>
 8007f90:	4603      	mov	r3, r0
 8007f92:	2200      	movs	r2, #0
 8007f94:	2100      	movs	r1, #0
 8007f96:	4618      	mov	r0, r3
 8007f98:	f7ff fd5e 	bl	8007a58 <NVIC_EncodePriority>
 8007f9c:	4603      	mov	r3, r0
 8007f9e:	4619      	mov	r1, r3
 8007fa0:	2028      	movs	r0, #40	; 0x28
 8007fa2:	f7ff fd2f 	bl	8007a04 <__NVIC_SetPriority>
  NVIC_EnableIRQ(EXTI15_10_IRQn);
 8007fa6:	2028      	movs	r0, #40	; 0x28
 8007fa8:	f7ff fd0e 	bl	80079c8 <__NVIC_EnableIRQ>

}
 8007fac:	bf00      	nop
 8007fae:	3728      	adds	r7, #40	; 0x28
 8007fb0:	46bd      	mov	sp, r7
 8007fb2:	e009      	b.n	8007fc8 <MX_GPIO_Init+0x3a0>
 8007fb4:	48000800 	.word	0x48000800
 8007fb8:	48000400 	.word	0x48000400
 8007fbc:	0f000003 	.word	0x0f000003
 8007fc0:	f0000003 	.word	0xf0000003
 8007fc4:	48001400 	.word	0x48001400
 8007fc8:	bd80      	pop	{r7, pc}
 8007fca:	bf00      	nop

08007fcc <ITM_SendChar>:
           \li Is blocking when a debugger is connected, but the previous character sent has not been transmitted.
  \param [in]     ch  Character to transmit.
  \returns            Character to transmit.
 */
__STATIC_INLINE uint32_t ITM_SendChar (uint32_t ch)
{
 8007fcc:	b480      	push	{r7}
 8007fce:	b083      	sub	sp, #12
 8007fd0:	af00      	add	r7, sp, #0
 8007fd2:	6078      	str	r0, [r7, #4]
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 8007fd4:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8007fd8:	f8d3 3e80 	ldr.w	r3, [r3, #3712]	; 0xe80
 8007fdc:	f003 0301 	and.w	r3, r3, #1
 8007fe0:	2b00      	cmp	r3, #0
 8007fe2:	d013      	beq.n	800800c <ITM_SendChar+0x40>
      ((ITM->TER & 1UL               ) != 0UL)   )     /* ITM Port #0 enabled */
 8007fe4:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8007fe8:	f8d3 3e00 	ldr.w	r3, [r3, #3584]	; 0xe00
 8007fec:	f003 0301 	and.w	r3, r3, #1
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 8007ff0:	2b00      	cmp	r3, #0
 8007ff2:	d00b      	beq.n	800800c <ITM_SendChar+0x40>
  {
    while (ITM->PORT[0U].u32 == 0UL)
 8007ff4:	e000      	b.n	8007ff8 <ITM_SendChar+0x2c>
    {
      __NOP();
 8007ff6:	bf00      	nop
    while (ITM->PORT[0U].u32 == 0UL)
 8007ff8:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8007ffc:	681b      	ldr	r3, [r3, #0]
 8007ffe:	2b00      	cmp	r3, #0
 8008000:	d0f9      	beq.n	8007ff6 <ITM_SendChar+0x2a>
    }
    ITM->PORT[0U].u8 = (uint8_t)ch;
 8008002:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8008006:	687a      	ldr	r2, [r7, #4]
 8008008:	b2d2      	uxtb	r2, r2
 800800a:	701a      	strb	r2, [r3, #0]
  }
  return (ch);
 800800c:	687b      	ldr	r3, [r7, #4]
}
 800800e:	4618      	mov	r0, r3
 8008010:	370c      	adds	r7, #12
 8008012:	46bd      	mov	sp, r7
 8008014:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008018:	4770      	bx	lr

0800801a <_write>:
/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */

// redirect printf to SWV
int _write(int file, char *ptr, int len)
{
 800801a:	b580      	push	{r7, lr}
 800801c:	b086      	sub	sp, #24
 800801e:	af00      	add	r7, sp, #0
 8008020:	60f8      	str	r0, [r7, #12]
 8008022:	60b9      	str	r1, [r7, #8]
 8008024:	607a      	str	r2, [r7, #4]
  int i=0;
 8008026:	2300      	movs	r3, #0
 8008028:	617b      	str	r3, [r7, #20]
  for(i=0 ; i<len ; i++)
 800802a:	2300      	movs	r3, #0
 800802c:	617b      	str	r3, [r7, #20]
 800802e:	e009      	b.n	8008044 <_write+0x2a>
    ITM_SendChar((*ptr++));
 8008030:	68bb      	ldr	r3, [r7, #8]
 8008032:	1c5a      	adds	r2, r3, #1
 8008034:	60ba      	str	r2, [r7, #8]
 8008036:	781b      	ldrb	r3, [r3, #0]
 8008038:	4618      	mov	r0, r3
 800803a:	f7ff ffc7 	bl	8007fcc <ITM_SendChar>
  for(i=0 ; i<len ; i++)
 800803e:	697b      	ldr	r3, [r7, #20]
 8008040:	3301      	adds	r3, #1
 8008042:	617b      	str	r3, [r7, #20]
 8008044:	697a      	ldr	r2, [r7, #20]
 8008046:	687b      	ldr	r3, [r7, #4]
 8008048:	429a      	cmp	r2, r3
 800804a:	dbf1      	blt.n	8008030 <_write+0x16>
  return len;
 800804c:	687b      	ldr	r3, [r7, #4]
}
 800804e:	4618      	mov	r0, r3
 8008050:	3718      	adds	r7, #24
 8008052:	46bd      	mov	sp, r7
 8008054:	bd80      	pop	{r7, pc}
	...

08008058 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8008058:	b580      	push	{r7, lr}
 800805a:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800805c:	f000 ff73 	bl	8008f46 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8008060:	f000 f84c 	bl	80080fc <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8008064:	f7ff fde0 	bl	8007c28 <MX_GPIO_Init>
  MX_DMA_Init();
 8008068:	f7ff fc5e 	bl	8007928 <MX_DMA_Init>
  MX_DAC1_Init();
 800806c:	f7ff fb0e 	bl	800768c <MX_DAC1_Init>
  MX_ADC1_Init();
 8008070:	f7ff f9c6 	bl	8007400 <MX_ADC1_Init>
  MX_COMP1_Init();
 8008074:	f7ff faa8 	bl	80075c8 <MX_COMP1_Init>
  MX_SPI3_Init();
 8008078:	f000 f8ec 	bl	8008254 <MX_SPI3_Init>
  MX_RNG_Init();
 800807c:	f000 f8dc 	bl	8008238 <MX_RNG_Init>
  MX_TIM1_Init();
 8008080:	f000 fb50 	bl	8008724 <MX_TIM1_Init>
  MX_TIM8_Init();
 8008084:	f000 fcd0 	bl	8008a28 <MX_TIM8_Init>
  MX_TIM16_Init();
 8008088:	f000 fd88 	bl	8008b9c <MX_TIM16_Init>
  MX_TIM15_Init();
 800808c:	f000 fd34 	bl	8008af8 <MX_TIM15_Init>
  MX_TIM5_Init();
 8008090:	f000 fc7c 	bl	800898c <MX_TIM5_Init>
  MX_TIM3_Init();
 8008094:	f000 fc2c 	bl	80088f0 <MX_TIM3_Init>
  MX_DAC2_Init();
 8008098:	f7ff fb42 	bl	8007720 <MX_DAC2_Init>
  MX_TIM17_Init();
 800809c:	f000 fda6 	bl	8008bec <MX_TIM17_Init>
  MX_TIM2_Init();
 80080a0:	f000 fbb0 	bl	8008804 <MX_TIM2_Init>
  /* USER CODE BEGIN 2 */

  SM_Init();
 80080a4:	f7fe fb88 	bl	80067b8 <SM_Init>

  HAL_TIM_Base_Start_IT(&htim17);
 80080a8:	4810      	ldr	r0, [pc, #64]	; (80080ec <main+0x94>)
 80080aa:	f005 fc1b 	bl	800d8e4 <HAL_TIM_Base_Start_IT>

  // http://www.ti.com/lit/ds/symlink/ts5a3357.pdf
  HAL_GPIO_WritePin(TRIGMUX1_GPIO_Port, TRIGMUX1_Pin, GPIO_PIN_RESET);	// TS5A3357 Pin6
 80080ae:	2200      	movs	r2, #0
 80080b0:	f44f 7180 	mov.w	r1, #256	; 0x100
 80080b4:	480e      	ldr	r0, [pc, #56]	; (80080f0 <main+0x98>)
 80080b6:	f004 fac5 	bl	800c644 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(TRIGMUX2_GPIO_Port, TRIGMUX2_Pin, GPIO_PIN_RESET);	// TS5A3357 Pin5
 80080ba:	2200      	movs	r2, #0
 80080bc:	f44f 7100 	mov.w	r1, #512	; 0x200
 80080c0:	480b      	ldr	r0, [pc, #44]	; (80080f0 <main+0x98>)
 80080c2:	f004 fabf 	bl	800c644 <HAL_GPIO_WritePin>

#ifndef DISABLE_ALL_TIMERS
  // encoder input
  HAL_TIM_Base_Start(&htim1);		// enable encoder timer
 80080c6:	480b      	ldr	r0, [pc, #44]	; (80080f4 <main+0x9c>)
 80080c8:	f005 fbb6 	bl	800d838 <HAL_TIM_Base_Start>
  //TIM1->DIER |= TIM_DIER_IDXIE;		// enable index interrupts

#endif	//DISABLE_ALL_TIMERS

  TIM6->PSC = 65535;
 80080cc:	4b0a      	ldr	r3, [pc, #40]	; (80080f8 <main+0xa0>)
 80080ce:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80080d2:	629a      	str	r2, [r3, #40]	; 0x28
  TIM6->ARR = 65535;
 80080d4:	4b08      	ldr	r3, [pc, #32]	; (80080f8 <main+0xa0>)
 80080d6:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80080da:	62da      	str	r2, [r3, #44]	; 0x2c


  // TFT lib enable
  DM_Init();
 80080dc:	f7f8 fe48 	bl	8000d70 <DM_Init>
  DM_PostInit();
 80080e0:	f7f8 fe54 	bl	8000d8c <DM_PostInit>

  // Intialise interrupt manager
  IM_Init();
 80080e4:	f7fd f91a 	bl	800531c <IM_Init>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80080e8:	e7fe      	b.n	80080e8 <main+0x90>
 80080ea:	bf00      	nop
 80080ec:	20002afc 	.word	0x20002afc
 80080f0:	48000800 	.word	0x48000800
 80080f4:	20002b94 	.word	0x20002b94
 80080f8:	40001000 	.word	0x40001000

080080fc <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80080fc:	b580      	push	{r7, lr}
 80080fe:	b0a8      	sub	sp, #160	; 0xa0
 8008100:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8008102:	f107 0368 	add.w	r3, r7, #104	; 0x68
 8008106:	2238      	movs	r2, #56	; 0x38
 8008108:	2100      	movs	r1, #0
 800810a:	4618      	mov	r0, r3
 800810c:	f009 fb16 	bl	801173c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8008110:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8008114:	2200      	movs	r2, #0
 8008116:	601a      	str	r2, [r3, #0]
 8008118:	605a      	str	r2, [r3, #4]
 800811a:	609a      	str	r2, [r3, #8]
 800811c:	60da      	str	r2, [r3, #12]
 800811e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8008120:	463b      	mov	r3, r7
 8008122:	2254      	movs	r2, #84	; 0x54
 8008124:	2100      	movs	r1, #0
 8008126:	4618      	mov	r0, r3
 8008128:	f009 fb08 	bl	801173c <memset>

  /** Configure the main internal regulator output voltage 
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1_BOOST);
 800812c:	2000      	movs	r0, #0
 800812e:	f004 faa1 	bl	800c674 <HAL_PWREx_ControlVoltageScaling>
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_HSI48;
 8008132:	2322      	movs	r3, #34	; 0x22
 8008134:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8008136:	f44f 7380 	mov.w	r3, #256	; 0x100
 800813a:	677b      	str	r3, [r7, #116]	; 0x74
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800813c:	2340      	movs	r3, #64	; 0x40
 800813e:	67bb      	str	r3, [r7, #120]	; 0x78
  RCC_OscInitStruct.HSI48State = RCC_HSI48_ON;
 8008140:	2301      	movs	r3, #1
 8008142:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8008146:	2302      	movs	r3, #2
 8008148:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 800814c:	2302      	movs	r3, #2
 800814e:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV2;
 8008152:	2302      	movs	r3, #2
 8008154:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  RCC_OscInitStruct.PLL.PLLN = 42;
 8008158:	232a      	movs	r3, #42	; 0x2a
 800815a:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800815e:	2302      	movs	r3, #2
 8008160:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV4;
 8008164:	2304      	movs	r3, #4
 8008166:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 800816a:	2302      	movs	r3, #2
 800816c:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8008170:	f107 0368 	add.w	r3, r7, #104	; 0x68
 8008174:	4618      	mov	r0, r3
 8008176:	f004 fb21 	bl	800c7bc <HAL_RCC_OscConfig>
 800817a:	4603      	mov	r3, r0
 800817c:	2b00      	cmp	r3, #0
 800817e:	d001      	beq.n	8008184 <SystemClock_Config+0x88>
  {
    Error_Handler();
 8008180:	f000 f82a 	bl	80081d8 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8008184:	230f      	movs	r3, #15
 8008186:	657b      	str	r3, [r7, #84]	; 0x54
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8008188:	2303      	movs	r3, #3
 800818a:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800818c:	2300      	movs	r3, #0
 800818e:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8008190:	2300      	movs	r3, #0
 8008192:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8008194:	2300      	movs	r3, #0
 8008196:	667b      	str	r3, [r7, #100]	; 0x64

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_8) != HAL_OK)
 8008198:	f107 0354 	add.w	r3, r7, #84	; 0x54
 800819c:	2108      	movs	r1, #8
 800819e:	4618      	mov	r0, r3
 80081a0:	f004 fe24 	bl	800cdec <HAL_RCC_ClockConfig>
 80081a4:	4603      	mov	r3, r0
 80081a6:	2b00      	cmp	r3, #0
 80081a8:	d001      	beq.n	80081ae <SystemClock_Config+0xb2>
  {
    Error_Handler();
 80081aa:	f000 f815 	bl	80081d8 <Error_Handler>
  }
  /** Initializes the peripherals clocks 
  */
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_RNG|RCC_PERIPHCLK_ADC12;
 80081ae:	f44f 4340 	mov.w	r3, #49152	; 0xc000
 80081b2:	603b      	str	r3, [r7, #0]
  PeriphClkInit.RngClockSelection = RCC_RNGCLKSOURCE_HSI48;
 80081b4:	2300      	movs	r3, #0
 80081b6:	643b      	str	r3, [r7, #64]	; 0x40
  PeriphClkInit.Adc12ClockSelection = RCC_ADC12CLKSOURCE_PLL;
 80081b8:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 80081bc:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80081be:	463b      	mov	r3, r7
 80081c0:	4618      	mov	r0, r3
 80081c2:	f005 f803 	bl	800d1cc <HAL_RCCEx_PeriphCLKConfig>
 80081c6:	4603      	mov	r3, r0
 80081c8:	2b00      	cmp	r3, #0
 80081ca:	d001      	beq.n	80081d0 <SystemClock_Config+0xd4>
  {
    Error_Handler();
 80081cc:	f000 f804 	bl	80081d8 <Error_Handler>
  }
}
 80081d0:	bf00      	nop
 80081d2:	37a0      	adds	r7, #160	; 0xa0
 80081d4:	46bd      	mov	sp, r7
 80081d6:	bd80      	pop	{r7, pc}

080081d8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80081d8:	b480      	push	{r7}
 80081da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 80081dc:	bf00      	nop
 80081de:	46bd      	mov	sp, r7
 80081e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081e4:	4770      	bx	lr

080081e6 <LL_RNG_Enable>:
  * @rmtoll CR           RNGEN         LL_RNG_Enable
  * @param  RNGx RNG Instance
  * @retval None
  */
__STATIC_INLINE void LL_RNG_Enable(RNG_TypeDef *RNGx)
{
 80081e6:	b480      	push	{r7}
 80081e8:	b083      	sub	sp, #12
 80081ea:	af00      	add	r7, sp, #0
 80081ec:	6078      	str	r0, [r7, #4]
  SET_BIT(RNGx->CR, RNG_CR_RNGEN);
 80081ee:	687b      	ldr	r3, [r7, #4]
 80081f0:	681b      	ldr	r3, [r3, #0]
 80081f2:	f043 0204 	orr.w	r2, r3, #4
 80081f6:	687b      	ldr	r3, [r7, #4]
 80081f8:	601a      	str	r2, [r3, #0]
}
 80081fa:	bf00      	nop
 80081fc:	370c      	adds	r7, #12
 80081fe:	46bd      	mov	sp, r7
 8008200:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008204:	4770      	bx	lr
	...

08008208 <LL_AHB2_GRP1_EnableClock>:
{
 8008208:	b480      	push	{r7}
 800820a:	b085      	sub	sp, #20
 800820c:	af00      	add	r7, sp, #0
 800820e:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB2ENR, Periphs);
 8008210:	4b08      	ldr	r3, [pc, #32]	; (8008234 <LL_AHB2_GRP1_EnableClock+0x2c>)
 8008212:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8008214:	4907      	ldr	r1, [pc, #28]	; (8008234 <LL_AHB2_GRP1_EnableClock+0x2c>)
 8008216:	687b      	ldr	r3, [r7, #4]
 8008218:	4313      	orrs	r3, r2
 800821a:	64cb      	str	r3, [r1, #76]	; 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 800821c:	4b05      	ldr	r3, [pc, #20]	; (8008234 <LL_AHB2_GRP1_EnableClock+0x2c>)
 800821e:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8008220:	687b      	ldr	r3, [r7, #4]
 8008222:	4013      	ands	r3, r2
 8008224:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8008226:	68fb      	ldr	r3, [r7, #12]
}
 8008228:	bf00      	nop
 800822a:	3714      	adds	r7, #20
 800822c:	46bd      	mov	sp, r7
 800822e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008232:	4770      	bx	lr
 8008234:	40021000 	.word	0x40021000

08008238 <MX_RNG_Init>:

/* USER CODE END 0 */

/* RNG init function */
void MX_RNG_Init(void)
{
 8008238:	b580      	push	{r7, lr}
 800823a:	af00      	add	r7, sp, #0

  /* Peripheral clock enable */
  LL_AHB2_GRP1_EnableClock(LL_AHB2_GRP1_PERIPH_RNG);
 800823c:	f04f 6080 	mov.w	r0, #67108864	; 0x4000000
 8008240:	f7ff ffe2 	bl	8008208 <LL_AHB2_GRP1_EnableClock>

  LL_RNG_Enable(RNG);
 8008244:	4802      	ldr	r0, [pc, #8]	; (8008250 <MX_RNG_Init+0x18>)
 8008246:	f7ff ffce 	bl	80081e6 <LL_RNG_Enable>

}
 800824a:	bf00      	nop
 800824c:	bd80      	pop	{r7, pc}
 800824e:	bf00      	nop
 8008250:	50060800 	.word	0x50060800

08008254 <MX_SPI3_Init>:

SPI_HandleTypeDef hspi3;

/* SPI3 init function */
void MX_SPI3_Init(void)
{
 8008254:	b580      	push	{r7, lr}
 8008256:	af00      	add	r7, sp, #0

  hspi3.Instance = SPI3;
 8008258:	4b1b      	ldr	r3, [pc, #108]	; (80082c8 <MX_SPI3_Init+0x74>)
 800825a:	4a1c      	ldr	r2, [pc, #112]	; (80082cc <MX_SPI3_Init+0x78>)
 800825c:	601a      	str	r2, [r3, #0]
  hspi3.Init.Mode = SPI_MODE_MASTER;
 800825e:	4b1a      	ldr	r3, [pc, #104]	; (80082c8 <MX_SPI3_Init+0x74>)
 8008260:	f44f 7282 	mov.w	r2, #260	; 0x104
 8008264:	605a      	str	r2, [r3, #4]
  hspi3.Init.Direction = SPI_DIRECTION_2LINES;
 8008266:	4b18      	ldr	r3, [pc, #96]	; (80082c8 <MX_SPI3_Init+0x74>)
 8008268:	2200      	movs	r2, #0
 800826a:	609a      	str	r2, [r3, #8]
  hspi3.Init.DataSize = SPI_DATASIZE_8BIT;
 800826c:	4b16      	ldr	r3, [pc, #88]	; (80082c8 <MX_SPI3_Init+0x74>)
 800826e:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 8008272:	60da      	str	r2, [r3, #12]
  hspi3.Init.CLKPolarity = SPI_POLARITY_LOW;
 8008274:	4b14      	ldr	r3, [pc, #80]	; (80082c8 <MX_SPI3_Init+0x74>)
 8008276:	2200      	movs	r2, #0
 8008278:	611a      	str	r2, [r3, #16]
  hspi3.Init.CLKPhase = SPI_PHASE_1EDGE;
 800827a:	4b13      	ldr	r3, [pc, #76]	; (80082c8 <MX_SPI3_Init+0x74>)
 800827c:	2200      	movs	r2, #0
 800827e:	615a      	str	r2, [r3, #20]
  hspi3.Init.NSS = SPI_NSS_SOFT;
 8008280:	4b11      	ldr	r3, [pc, #68]	; (80082c8 <MX_SPI3_Init+0x74>)
 8008282:	f44f 7200 	mov.w	r2, #512	; 0x200
 8008286:	619a      	str	r2, [r3, #24]
  hspi3.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_8;
 8008288:	4b0f      	ldr	r3, [pc, #60]	; (80082c8 <MX_SPI3_Init+0x74>)
 800828a:	2210      	movs	r2, #16
 800828c:	61da      	str	r2, [r3, #28]
  hspi3.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800828e:	4b0e      	ldr	r3, [pc, #56]	; (80082c8 <MX_SPI3_Init+0x74>)
 8008290:	2200      	movs	r2, #0
 8008292:	621a      	str	r2, [r3, #32]
  hspi3.Init.TIMode = SPI_TIMODE_DISABLE;
 8008294:	4b0c      	ldr	r3, [pc, #48]	; (80082c8 <MX_SPI3_Init+0x74>)
 8008296:	2200      	movs	r2, #0
 8008298:	625a      	str	r2, [r3, #36]	; 0x24
  hspi3.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800829a:	4b0b      	ldr	r3, [pc, #44]	; (80082c8 <MX_SPI3_Init+0x74>)
 800829c:	2200      	movs	r2, #0
 800829e:	629a      	str	r2, [r3, #40]	; 0x28
  hspi3.Init.CRCPolynomial = 7;
 80082a0:	4b09      	ldr	r3, [pc, #36]	; (80082c8 <MX_SPI3_Init+0x74>)
 80082a2:	2207      	movs	r2, #7
 80082a4:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi3.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 80082a6:	4b08      	ldr	r3, [pc, #32]	; (80082c8 <MX_SPI3_Init+0x74>)
 80082a8:	2200      	movs	r2, #0
 80082aa:	631a      	str	r2, [r3, #48]	; 0x30
  hspi3.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 80082ac:	4b06      	ldr	r3, [pc, #24]	; (80082c8 <MX_SPI3_Init+0x74>)
 80082ae:	2208      	movs	r2, #8
 80082b0:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi3) != HAL_OK)
 80082b2:	4805      	ldr	r0, [pc, #20]	; (80082c8 <MX_SPI3_Init+0x74>)
 80082b4:	f005 f9d6 	bl	800d664 <HAL_SPI_Init>
 80082b8:	4603      	mov	r3, r0
 80082ba:	2b00      	cmp	r3, #0
 80082bc:	d001      	beq.n	80082c2 <MX_SPI3_Init+0x6e>
  {
    Error_Handler();
 80082be:	f7ff ff8b 	bl	80081d8 <Error_Handler>
  }

}
 80082c2:	bf00      	nop
 80082c4:	bd80      	pop	{r7, pc}
 80082c6:	bf00      	nop
 80082c8:	200029a0 	.word	0x200029a0
 80082cc:	40003c00 	.word	0x40003c00

080082d0 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 80082d0:	b580      	push	{r7, lr}
 80082d2:	b08a      	sub	sp, #40	; 0x28
 80082d4:	af00      	add	r7, sp, #0
 80082d6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80082d8:	f107 0314 	add.w	r3, r7, #20
 80082dc:	2200      	movs	r2, #0
 80082de:	601a      	str	r2, [r3, #0]
 80082e0:	605a      	str	r2, [r3, #4]
 80082e2:	609a      	str	r2, [r3, #8]
 80082e4:	60da      	str	r2, [r3, #12]
 80082e6:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI3)
 80082e8:	687b      	ldr	r3, [r7, #4]
 80082ea:	681b      	ldr	r3, [r3, #0]
 80082ec:	4a17      	ldr	r2, [pc, #92]	; (800834c <HAL_SPI_MspInit+0x7c>)
 80082ee:	4293      	cmp	r3, r2
 80082f0:	d128      	bne.n	8008344 <HAL_SPI_MspInit+0x74>
  {
  /* USER CODE BEGIN SPI3_MspInit 0 */

  /* USER CODE END SPI3_MspInit 0 */
    /* SPI3 clock enable */
    __HAL_RCC_SPI3_CLK_ENABLE();
 80082f2:	4b17      	ldr	r3, [pc, #92]	; (8008350 <HAL_SPI_MspInit+0x80>)
 80082f4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80082f6:	4a16      	ldr	r2, [pc, #88]	; (8008350 <HAL_SPI_MspInit+0x80>)
 80082f8:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80082fc:	6593      	str	r3, [r2, #88]	; 0x58
 80082fe:	4b14      	ldr	r3, [pc, #80]	; (8008350 <HAL_SPI_MspInit+0x80>)
 8008300:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008302:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8008306:	613b      	str	r3, [r7, #16]
 8008308:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800830a:	4b11      	ldr	r3, [pc, #68]	; (8008350 <HAL_SPI_MspInit+0x80>)
 800830c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800830e:	4a10      	ldr	r2, [pc, #64]	; (8008350 <HAL_SPI_MspInit+0x80>)
 8008310:	f043 0304 	orr.w	r3, r3, #4
 8008314:	64d3      	str	r3, [r2, #76]	; 0x4c
 8008316:	4b0e      	ldr	r3, [pc, #56]	; (8008350 <HAL_SPI_MspInit+0x80>)
 8008318:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800831a:	f003 0304 	and.w	r3, r3, #4
 800831e:	60fb      	str	r3, [r7, #12]
 8008320:	68fb      	ldr	r3, [r7, #12]
    /**SPI3 GPIO Configuration    
    PC10     ------> SPI3_SCK
    PC11     ------> SPI3_MISO
    PC12     ------> SPI3_MOSI 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12;
 8008322:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 8008326:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8008328:	2302      	movs	r3, #2
 800832a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800832c:	2300      	movs	r3, #0
 800832e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8008330:	2300      	movs	r3, #0
 8008332:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8008334:	2306      	movs	r3, #6
 8008336:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8008338:	f107 0314 	add.w	r3, r7, #20
 800833c:	4619      	mov	r1, r3
 800833e:	4805      	ldr	r0, [pc, #20]	; (8008354 <HAL_SPI_MspInit+0x84>)
 8008340:	f003 ff1c 	bl	800c17c <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }
}
 8008344:	bf00      	nop
 8008346:	3728      	adds	r7, #40	; 0x28
 8008348:	46bd      	mov	sp, r7
 800834a:	bd80      	pop	{r7, pc}
 800834c:	40003c00 	.word	0x40003c00
 8008350:	40021000 	.word	0x40021000
 8008354:	48000800 	.word	0x48000800

08008358 <LL_PWR_DisableUCPDDeadBattery>:
  *         control to the UCPD (which should therefore be initialized before doing the disable).
  * @rmtoll CR3          UCPD_DBDIS           LL_PWR_DisableUCPDDeadBattery
  * @retval None
  */
__STATIC_INLINE void LL_PWR_DisableUCPDDeadBattery(void)
{
 8008358:	b480      	push	{r7}
 800835a:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR3, PWR_CR3_UCPD_DBDIS);
 800835c:	4b05      	ldr	r3, [pc, #20]	; (8008374 <LL_PWR_DisableUCPDDeadBattery+0x1c>)
 800835e:	689b      	ldr	r3, [r3, #8]
 8008360:	4a04      	ldr	r2, [pc, #16]	; (8008374 <LL_PWR_DisableUCPDDeadBattery+0x1c>)
 8008362:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8008366:	6093      	str	r3, [r2, #8]
}
 8008368:	bf00      	nop
 800836a:	46bd      	mov	sp, r7
 800836c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008370:	4770      	bx	lr
 8008372:	bf00      	nop
 8008374:	40007000 	.word	0x40007000

08008378 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8008378:	b580      	push	{r7, lr}
 800837a:	b082      	sub	sp, #8
 800837c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800837e:	4b0f      	ldr	r3, [pc, #60]	; (80083bc <HAL_MspInit+0x44>)
 8008380:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8008382:	4a0e      	ldr	r2, [pc, #56]	; (80083bc <HAL_MspInit+0x44>)
 8008384:	f043 0301 	orr.w	r3, r3, #1
 8008388:	6613      	str	r3, [r2, #96]	; 0x60
 800838a:	4b0c      	ldr	r3, [pc, #48]	; (80083bc <HAL_MspInit+0x44>)
 800838c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800838e:	f003 0301 	and.w	r3, r3, #1
 8008392:	607b      	str	r3, [r7, #4]
 8008394:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8008396:	4b09      	ldr	r3, [pc, #36]	; (80083bc <HAL_MspInit+0x44>)
 8008398:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800839a:	4a08      	ldr	r2, [pc, #32]	; (80083bc <HAL_MspInit+0x44>)
 800839c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80083a0:	6593      	str	r3, [r2, #88]	; 0x58
 80083a2:	4b06      	ldr	r3, [pc, #24]	; (80083bc <HAL_MspInit+0x44>)
 80083a4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80083a6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80083aa:	603b      	str	r3, [r7, #0]
 80083ac:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral 
  */
  LL_PWR_DisableDeadBatteryPD();
 80083ae:	f7ff ffd3 	bl	8008358 <LL_PWR_DisableUCPDDeadBattery>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80083b2:	bf00      	nop
 80083b4:	3708      	adds	r7, #8
 80083b6:	46bd      	mov	sp, r7
 80083b8:	bd80      	pop	{r7, pc}
 80083ba:	bf00      	nop
 80083bc:	40021000 	.word	0x40021000

080083c0 <LL_EXTI_IsActiveFlag_0_31>:
{
 80083c0:	b480      	push	{r7}
 80083c2:	b083      	sub	sp, #12
 80083c4:	af00      	add	r7, sp, #0
 80083c6:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(EXTI->PR1, ExtiLine) == (ExtiLine)) ? 1UL : 0UL);
 80083c8:	4b07      	ldr	r3, [pc, #28]	; (80083e8 <LL_EXTI_IsActiveFlag_0_31+0x28>)
 80083ca:	695a      	ldr	r2, [r3, #20]
 80083cc:	687b      	ldr	r3, [r7, #4]
 80083ce:	4013      	ands	r3, r2
 80083d0:	687a      	ldr	r2, [r7, #4]
 80083d2:	429a      	cmp	r2, r3
 80083d4:	d101      	bne.n	80083da <LL_EXTI_IsActiveFlag_0_31+0x1a>
 80083d6:	2301      	movs	r3, #1
 80083d8:	e000      	b.n	80083dc <LL_EXTI_IsActiveFlag_0_31+0x1c>
 80083da:	2300      	movs	r3, #0
}
 80083dc:	4618      	mov	r0, r3
 80083de:	370c      	adds	r7, #12
 80083e0:	46bd      	mov	sp, r7
 80083e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083e6:	4770      	bx	lr
 80083e8:	40010400 	.word	0x40010400

080083ec <LL_EXTI_ClearFlag_0_31>:
  * @note   (*): Available in some devices
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_ClearFlag_0_31(uint32_t ExtiLine)
{
 80083ec:	b480      	push	{r7}
 80083ee:	b083      	sub	sp, #12
 80083f0:	af00      	add	r7, sp, #0
 80083f2:	6078      	str	r0, [r7, #4]
  WRITE_REG(EXTI->PR1, ExtiLine);
 80083f4:	4a04      	ldr	r2, [pc, #16]	; (8008408 <LL_EXTI_ClearFlag_0_31+0x1c>)
 80083f6:	687b      	ldr	r3, [r7, #4]
 80083f8:	6153      	str	r3, [r2, #20]
}
 80083fa:	bf00      	nop
 80083fc:	370c      	adds	r7, #12
 80083fe:	46bd      	mov	sp, r7
 8008400:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008404:	4770      	bx	lr
 8008406:	bf00      	nop
 8008408:	40010400 	.word	0x40010400

0800840c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800840c:	b480      	push	{r7}
 800840e:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8008410:	bf00      	nop
 8008412:	46bd      	mov	sp, r7
 8008414:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008418:	4770      	bx	lr
	...

0800841c <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800841c:	b580      	push	{r7, lr}
 800841e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */
	DM_SetErrorDebugMsg("HARD FAULT");
 8008420:	4801      	ldr	r0, [pc, #4]	; (8008428 <HardFault_Handler+0xc>)
 8008422:	f7f9 fa7f 	bl	8001924 <DM_SetErrorDebugMsg>
  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8008426:	e7fe      	b.n	8008426 <HardFault_Handler+0xa>
 8008428:	080166f8 	.word	0x080166f8

0800842c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800842c:	b580      	push	{r7, lr}
 800842e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */
	DM_SetErrorDebugMsg("MEMMANAGE FAULT");
 8008430:	4801      	ldr	r0, [pc, #4]	; (8008438 <MemManage_Handler+0xc>)
 8008432:	f7f9 fa77 	bl	8001924 <DM_SetErrorDebugMsg>
  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8008436:	e7fe      	b.n	8008436 <MemManage_Handler+0xa>
 8008438:	08016704 	.word	0x08016704

0800843c <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800843c:	b580      	push	{r7, lr}
 800843e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */
	DM_SetErrorDebugMsg("BUS FAULT");
 8008440:	4801      	ldr	r0, [pc, #4]	; (8008448 <BusFault_Handler+0xc>)
 8008442:	f7f9 fa6f 	bl	8001924 <DM_SetErrorDebugMsg>
  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8008446:	e7fe      	b.n	8008446 <BusFault_Handler+0xa>
 8008448:	08016714 	.word	0x08016714

0800844c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800844c:	b580      	push	{r7, lr}
 800844e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */
	DM_SetErrorDebugMsg("USAGE FAULT");
 8008450:	4801      	ldr	r0, [pc, #4]	; (8008458 <UsageFault_Handler+0xc>)
 8008452:	f7f9 fa67 	bl	8001924 <DM_SetErrorDebugMsg>
  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8008456:	e7fe      	b.n	8008456 <UsageFault_Handler+0xa>
 8008458:	08016720 	.word	0x08016720

0800845c <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800845c:	b480      	push	{r7}
 800845e:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8008460:	bf00      	nop
 8008462:	46bd      	mov	sp, r7
 8008464:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008468:	4770      	bx	lr

0800846a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800846a:	b480      	push	{r7}
 800846c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800846e:	bf00      	nop
 8008470:	46bd      	mov	sp, r7
 8008472:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008476:	4770      	bx	lr

08008478 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8008478:	b480      	push	{r7}
 800847a:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800847c:	bf00      	nop
 800847e:	46bd      	mov	sp, r7
 8008480:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008484:	4770      	bx	lr

08008486 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8008486:	b580      	push	{r7, lr}
 8008488:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800848a:	f000 fdaf 	bl	8008fec <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800848e:	bf00      	nop
 8008490:	bd80      	pop	{r7, pc}

08008492 <EXTI0_IRQHandler>:

/**
  * @brief This function handles EXTI line0 interrupt.
  */
void EXTI0_IRQHandler(void)
{
 8008492:	b580      	push	{r7, lr}
 8008494:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI0_IRQn 0 */

	IM_BTN3_EXTI0_Handler();
 8008496:	f7fc fff9 	bl	800548c <IM_BTN3_EXTI0_Handler>

  /* USER CODE END EXTI0_IRQn 0 */
  if (LL_EXTI_IsActiveFlag_0_31(LL_EXTI_LINE_0) != RESET)
 800849a:	2001      	movs	r0, #1
 800849c:	f7ff ff90 	bl	80083c0 <LL_EXTI_IsActiveFlag_0_31>
 80084a0:	4603      	mov	r3, r0
 80084a2:	2b00      	cmp	r3, #0
 80084a4:	d002      	beq.n	80084ac <EXTI0_IRQHandler+0x1a>
  {
    LL_EXTI_ClearFlag_0_31(LL_EXTI_LINE_0);
 80084a6:	2001      	movs	r0, #1
 80084a8:	f7ff ffa0 	bl	80083ec <LL_EXTI_ClearFlag_0_31>
    /* USER CODE END LL_EXTI_LINE_0 */
  }
  /* USER CODE BEGIN EXTI0_IRQn 1 */

  /* USER CODE END EXTI0_IRQn 1 */
}
 80084ac:	bf00      	nop
 80084ae:	bd80      	pop	{r7, pc}

080084b0 <EXTI1_IRQHandler>:

/**
  * @brief This function handles EXTI line1 interrupt.
  */
void EXTI1_IRQHandler(void)
{
 80084b0:	b580      	push	{r7, lr}
 80084b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI1_IRQn 0 */

	IM_BTN4_EXTI1_Handler();
 80084b4:	f7fd f810 	bl	80054d8 <IM_BTN4_EXTI1_Handler>

  /* USER CODE END EXTI1_IRQn 0 */
  if (LL_EXTI_IsActiveFlag_0_31(LL_EXTI_LINE_1) != RESET)
 80084b8:	2002      	movs	r0, #2
 80084ba:	f7ff ff81 	bl	80083c0 <LL_EXTI_IsActiveFlag_0_31>
 80084be:	4603      	mov	r3, r0
 80084c0:	2b00      	cmp	r3, #0
 80084c2:	d002      	beq.n	80084ca <EXTI1_IRQHandler+0x1a>
  {
    LL_EXTI_ClearFlag_0_31(LL_EXTI_LINE_1);
 80084c4:	2002      	movs	r0, #2
 80084c6:	f7ff ff91 	bl	80083ec <LL_EXTI_ClearFlag_0_31>
    /* USER CODE END LL_EXTI_LINE_1 */
  }
  /* USER CODE BEGIN EXTI1_IRQn 1 */

  /* USER CODE END EXTI1_IRQn 1 */
}
 80084ca:	bf00      	nop
 80084cc:	bd80      	pop	{r7, pc}

080084ce <EXTI2_IRQHandler>:

/**
  * @brief This function handles EXTI line2 interrupt.
  */
void EXTI2_IRQHandler(void)
{
 80084ce:	b580      	push	{r7, lr}
 80084d0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI2_IRQn 0 */

	IM_ENC_EXTI2_Handler();
 80084d2:	f7fd f827 	bl	8005524 <IM_ENC_EXTI2_Handler>

  /* USER CODE END EXTI2_IRQn 0 */
  if (LL_EXTI_IsActiveFlag_0_31(LL_EXTI_LINE_2) != RESET)
 80084d6:	2004      	movs	r0, #4
 80084d8:	f7ff ff72 	bl	80083c0 <LL_EXTI_IsActiveFlag_0_31>
 80084dc:	4603      	mov	r3, r0
 80084de:	2b00      	cmp	r3, #0
 80084e0:	d002      	beq.n	80084e8 <EXTI2_IRQHandler+0x1a>
  {
    LL_EXTI_ClearFlag_0_31(LL_EXTI_LINE_2);
 80084e2:	2004      	movs	r0, #4
 80084e4:	f7ff ff82 	bl	80083ec <LL_EXTI_ClearFlag_0_31>
    /* USER CODE END LL_EXTI_LINE_2 */
  }
  /* USER CODE BEGIN EXTI2_IRQn 1 */

  /* USER CODE END EXTI2_IRQn 1 */
}
 80084e8:	bf00      	nop
 80084ea:	bd80      	pop	{r7, pc}

080084ec <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 80084ec:	b580      	push	{r7, lr}
 80084ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 80084f0:	4802      	ldr	r0, [pc, #8]	; (80084fc <DMA1_Channel1_IRQHandler+0x10>)
 80084f2:	f003 fcf4 	bl	800bede <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 80084f6:	bf00      	nop
 80084f8:	bd80      	pop	{r7, pc}
 80084fa:	bf00      	nop
 80084fc:	20002894 	.word	0x20002894

08008500 <DMA1_Channel2_IRQHandler>:

/**
  * @brief This function handles DMA1 channel2 global interrupt.
  */
void DMA1_Channel2_IRQHandler(void)
{
 8008500:	b580      	push	{r7, lr}
 8008502:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel2_IRQn 0 */

  /* USER CODE END DMA1_Channel2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_dac1_ch1);
 8008504:	4802      	ldr	r0, [pc, #8]	; (8008510 <DMA1_Channel2_IRQHandler+0x10>)
 8008506:	f003 fcea 	bl	800bede <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel2_IRQn 1 */

  /* USER CODE END DMA1_Channel2_IRQn 1 */
}
 800850a:	bf00      	nop
 800850c:	bd80      	pop	{r7, pc}
 800850e:	bf00      	nop
 8008510:	2000216c 	.word	0x2000216c

08008514 <DMA1_Channel3_IRQHandler>:

/**
  * @brief This function handles DMA1 channel3 global interrupt.
  */
void DMA1_Channel3_IRQHandler(void)
{
 8008514:	b580      	push	{r7, lr}
 8008516:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel3_IRQn 0 */

  /* USER CODE END DMA1_Channel3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_dac2_ch1);
 8008518:	4802      	ldr	r0, [pc, #8]	; (8008524 <DMA1_Channel3_IRQHandler+0x10>)
 800851a:	f003 fce0 	bl	800bede <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel3_IRQn 1 */

  /* USER CODE END DMA1_Channel3_IRQn 1 */
}
 800851e:	bf00      	nop
 8008520:	bd80      	pop	{r7, pc}
 8008522:	bf00      	nop
 8008524:	20002940 	.word	0x20002940

08008528 <DMA1_Channel4_IRQHandler>:

/**
  * @brief This function handles DMA1 channel4 global interrupt.
  */
void DMA1_Channel4_IRQHandler(void)
{
 8008528:	b580      	push	{r7, lr}
 800852a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel4_IRQn 0 */

  /* USER CODE END DMA1_Channel4_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_tim2_ch1);
 800852c:	4802      	ldr	r0, [pc, #8]	; (8008538 <DMA1_Channel4_IRQHandler+0x10>)
 800852e:	f003 fcd6 	bl	800bede <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel4_IRQn 1 */

  /* USER CODE END DMA1_Channel4_IRQn 1 */
}
 8008532:	bf00      	nop
 8008534:	bd80      	pop	{r7, pc}
 8008536:	bf00      	nop
 8008538:	20002a04 	.word	0x20002a04

0800853c <TIM1_BRK_TIM15_IRQHandler>:

/**
  * @brief This function handles TIM1 break interrupt and TIM15 global interrupt.
  */
void TIM1_BRK_TIM15_IRQHandler(void)
{
 800853c:	b580      	push	{r7, lr}
 800853e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_BRK_TIM15_IRQn 0 */

	DM_UpdateDisplay();
 8008540:	f7f8 fc3e 	bl	8000dc0 <DM_UpdateDisplay>


	IM_ENC_DIRF_Handler();
 8008544:	f7fd f814 	bl	8005570 <IM_ENC_DIRF_Handler>

  /* USER CODE END TIM1_BRK_TIM15_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8008548:	4803      	ldr	r0, [pc, #12]	; (8008558 <TIM1_BRK_TIM15_IRQHandler+0x1c>)
 800854a:	f005 ff69 	bl	800e420 <HAL_TIM_IRQHandler>
  HAL_TIM_IRQHandler(&htim15);
 800854e:	4803      	ldr	r0, [pc, #12]	; (800855c <TIM1_BRK_TIM15_IRQHandler+0x20>)
 8008550:	f005 ff66 	bl	800e420 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_BRK_TIM15_IRQn 1 */

  /* USER CODE END TIM1_BRK_TIM15_IRQn 1 */
}
 8008554:	bf00      	nop
 8008556:	bd80      	pop	{r7, pc}
 8008558:	20002b94 	.word	0x20002b94
 800855c:	20002ab0 	.word	0x20002ab0

08008560 <TIM1_TRG_COM_TIM17_IRQHandler>:

/**
  * @brief This function handles TIM1 trigger and commutation interrupts and TIM17 global interrupt.
  */
void TIM1_TRG_COM_TIM17_IRQHandler(void)
{
 8008560:	b580      	push	{r7, lr}
 8008562:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_TRG_COM_TIM17_IRQn 0 */
	EM_ProcessEvent();
 8008564:	f7fb ffa8 	bl	80044b8 <EM_ProcessEvent>
  /* USER CODE END TIM1_TRG_COM_TIM17_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8008568:	4803      	ldr	r0, [pc, #12]	; (8008578 <TIM1_TRG_COM_TIM17_IRQHandler+0x18>)
 800856a:	f005 ff59 	bl	800e420 <HAL_TIM_IRQHandler>
  HAL_TIM_IRQHandler(&htim17);
 800856e:	4803      	ldr	r0, [pc, #12]	; (800857c <TIM1_TRG_COM_TIM17_IRQHandler+0x1c>)
 8008570:	f005 ff56 	bl	800e420 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_TRG_COM_TIM17_IRQn 1 */

  /* USER CODE END TIM1_TRG_COM_TIM17_IRQn 1 */
}
 8008574:	bf00      	nop
 8008576:	bd80      	pop	{r7, pc}
 8008578:	20002b94 	.word	0x20002b94
 800857c:	20002afc 	.word	0x20002afc

08008580 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8008580:	b580      	push	{r7, lr}
 8008582:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8008584:	4802      	ldr	r0, [pc, #8]	; (8008590 <TIM3_IRQHandler+0x10>)
 8008586:	f005 ff4b 	bl	800e420 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 800858a:	bf00      	nop
 800858c:	bd80      	pop	{r7, pc}
 800858e:	bf00      	nop
 8008590:	200021d8 	.word	0x200021d8

08008594 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8008594:	b580      	push	{r7, lr}
 8008596:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

	IM_BTN1_EXTI14_Handler();
 8008598:	f7fc ff28 	bl	80053ec <IM_BTN1_EXTI14_Handler>
	IM_BTN2_EXTI15_Handler();
 800859c:	f7fc ff4e 	bl	800543c <IM_BTN2_EXTI15_Handler>

  /* USER CODE END EXTI15_10_IRQn 0 */
  if (LL_EXTI_IsActiveFlag_0_31(LL_EXTI_LINE_14) != RESET)
 80085a0:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 80085a4:	f7ff ff0c 	bl	80083c0 <LL_EXTI_IsActiveFlag_0_31>
 80085a8:	4603      	mov	r3, r0
 80085aa:	2b00      	cmp	r3, #0
 80085ac:	d003      	beq.n	80085b6 <EXTI15_10_IRQHandler+0x22>
  {
    LL_EXTI_ClearFlag_0_31(LL_EXTI_LINE_14);
 80085ae:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 80085b2:	f7ff ff1b 	bl	80083ec <LL_EXTI_ClearFlag_0_31>
    /* USER CODE BEGIN LL_EXTI_LINE_14 */
    
    /* USER CODE END LL_EXTI_LINE_14 */
  }
  if (LL_EXTI_IsActiveFlag_0_31(LL_EXTI_LINE_15) != RESET)
 80085b6:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 80085ba:	f7ff ff01 	bl	80083c0 <LL_EXTI_IsActiveFlag_0_31>
 80085be:	4603      	mov	r3, r0
 80085c0:	2b00      	cmp	r3, #0
 80085c2:	d003      	beq.n	80085cc <EXTI15_10_IRQHandler+0x38>
  {
    LL_EXTI_ClearFlag_0_31(LL_EXTI_LINE_15);
 80085c4:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 80085c8:	f7ff ff10 	bl	80083ec <LL_EXTI_ClearFlag_0_31>
    /* USER CODE END LL_EXTI_LINE_15 */
  }
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 80085cc:	bf00      	nop
 80085ce:	bd80      	pop	{r7, pc}

080085d0 <TIM5_IRQHandler>:

/**
  * @brief This function handles TIM5 global interrupt.
  */
void TIM5_IRQHandler(void)
{
 80085d0:	b580      	push	{r7, lr}
 80085d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM5_IRQn 0 */
	IM_SWEEP_UPDATE_TIM_IRQHandler();
 80085d4:	f7fc feb2 	bl	800533c <IM_SWEEP_UPDATE_TIM_IRQHandler>
  /* USER CODE END TIM5_IRQn 0 */
  HAL_TIM_IRQHandler(&htim5);
 80085d8:	4802      	ldr	r0, [pc, #8]	; (80085e4 <TIM5_IRQHandler+0x14>)
 80085da:	f005 ff21 	bl	800e420 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM5_IRQn 1 */

  /* USER CODE END TIM5_IRQn 1 */
}
 80085de:	bf00      	nop
 80085e0:	bd80      	pop	{r7, pc}
 80085e2:	bf00      	nop
 80085e4:	20002b48 	.word	0x20002b48

080085e8 <COMP1_2_3_IRQHandler>:

/**
  * @brief This function handles COMP1, COMP2 and COMP3 interrupts through EXTI lines 21, 22 and 29.
  */
void COMP1_2_3_IRQHandler(void)
{
 80085e8:	b580      	push	{r7, lr}
 80085ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN COMP1_2_3_IRQn 0 */

  /* USER CODE END COMP1_2_3_IRQn 0 */
  HAL_COMP_IRQHandler(&hcomp1);
 80085ec:	4802      	ldr	r0, [pc, #8]	; (80085f8 <COMP1_2_3_IRQHandler+0x10>)
 80085ee:	f002 fcb1 	bl	800af54 <HAL_COMP_IRQHandler>
  /* USER CODE BEGIN COMP1_2_3_IRQn 1 */

  /* USER CODE END COMP1_2_3_IRQn 1 */
}
 80085f2:	bf00      	nop
 80085f4:	bd80      	pop	{r7, pc}
 80085f6:	bf00      	nop
 80085f8:	200028f4 	.word	0x200028f4

080085fc <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80085fc:	b580      	push	{r7, lr}
 80085fe:	b086      	sub	sp, #24
 8008600:	af00      	add	r7, sp, #0
 8008602:	60f8      	str	r0, [r7, #12]
 8008604:	60b9      	str	r1, [r7, #8]
 8008606:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8008608:	2300      	movs	r3, #0
 800860a:	617b      	str	r3, [r7, #20]
 800860c:	e00a      	b.n	8008624 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 800860e:	f3af 8000 	nop.w
 8008612:	4601      	mov	r1, r0
 8008614:	68bb      	ldr	r3, [r7, #8]
 8008616:	1c5a      	adds	r2, r3, #1
 8008618:	60ba      	str	r2, [r7, #8]
 800861a:	b2ca      	uxtb	r2, r1
 800861c:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800861e:	697b      	ldr	r3, [r7, #20]
 8008620:	3301      	adds	r3, #1
 8008622:	617b      	str	r3, [r7, #20]
 8008624:	697a      	ldr	r2, [r7, #20]
 8008626:	687b      	ldr	r3, [r7, #4]
 8008628:	429a      	cmp	r2, r3
 800862a:	dbf0      	blt.n	800860e <_read+0x12>
	}

return len;
 800862c:	687b      	ldr	r3, [r7, #4]
}
 800862e:	4618      	mov	r0, r3
 8008630:	3718      	adds	r7, #24
 8008632:	46bd      	mov	sp, r7
 8008634:	bd80      	pop	{r7, pc}

08008636 <_close>:
	}
	return len;
}

int _close(int file)
{
 8008636:	b480      	push	{r7}
 8008638:	b083      	sub	sp, #12
 800863a:	af00      	add	r7, sp, #0
 800863c:	6078      	str	r0, [r7, #4]
	return -1;
 800863e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8008642:	4618      	mov	r0, r3
 8008644:	370c      	adds	r7, #12
 8008646:	46bd      	mov	sp, r7
 8008648:	f85d 7b04 	ldr.w	r7, [sp], #4
 800864c:	4770      	bx	lr

0800864e <_fstat>:


int _fstat(int file, struct stat *st)
{
 800864e:	b480      	push	{r7}
 8008650:	b083      	sub	sp, #12
 8008652:	af00      	add	r7, sp, #0
 8008654:	6078      	str	r0, [r7, #4]
 8008656:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8008658:	683b      	ldr	r3, [r7, #0]
 800865a:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800865e:	605a      	str	r2, [r3, #4]
	return 0;
 8008660:	2300      	movs	r3, #0
}
 8008662:	4618      	mov	r0, r3
 8008664:	370c      	adds	r7, #12
 8008666:	46bd      	mov	sp, r7
 8008668:	f85d 7b04 	ldr.w	r7, [sp], #4
 800866c:	4770      	bx	lr

0800866e <_isatty>:

int _isatty(int file)
{
 800866e:	b480      	push	{r7}
 8008670:	b083      	sub	sp, #12
 8008672:	af00      	add	r7, sp, #0
 8008674:	6078      	str	r0, [r7, #4]
	return 1;
 8008676:	2301      	movs	r3, #1
}
 8008678:	4618      	mov	r0, r3
 800867a:	370c      	adds	r7, #12
 800867c:	46bd      	mov	sp, r7
 800867e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008682:	4770      	bx	lr

08008684 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8008684:	b480      	push	{r7}
 8008686:	b085      	sub	sp, #20
 8008688:	af00      	add	r7, sp, #0
 800868a:	60f8      	str	r0, [r7, #12]
 800868c:	60b9      	str	r1, [r7, #8]
 800868e:	607a      	str	r2, [r7, #4]
	return 0;
 8008690:	2300      	movs	r3, #0
}
 8008692:	4618      	mov	r0, r3
 8008694:	3714      	adds	r7, #20
 8008696:	46bd      	mov	sp, r7
 8008698:	f85d 7b04 	ldr.w	r7, [sp], #4
 800869c:	4770      	bx	lr
	...

080086a0 <_sbrk>:
/**
 _sbrk
 Increase program data space. Malloc and related functions depend on this
**/
caddr_t _sbrk(int incr)
{
 80086a0:	b580      	push	{r7, lr}
 80086a2:	b084      	sub	sp, #16
 80086a4:	af00      	add	r7, sp, #0
 80086a6:	6078      	str	r0, [r7, #4]
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 80086a8:	4b11      	ldr	r3, [pc, #68]	; (80086f0 <_sbrk+0x50>)
 80086aa:	681b      	ldr	r3, [r3, #0]
 80086ac:	2b00      	cmp	r3, #0
 80086ae:	d102      	bne.n	80086b6 <_sbrk+0x16>
		heap_end = &end;
 80086b0:	4b0f      	ldr	r3, [pc, #60]	; (80086f0 <_sbrk+0x50>)
 80086b2:	4a10      	ldr	r2, [pc, #64]	; (80086f4 <_sbrk+0x54>)
 80086b4:	601a      	str	r2, [r3, #0]

	prev_heap_end = heap_end;
 80086b6:	4b0e      	ldr	r3, [pc, #56]	; (80086f0 <_sbrk+0x50>)
 80086b8:	681b      	ldr	r3, [r3, #0]
 80086ba:	60fb      	str	r3, [r7, #12]
	if (heap_end + incr > stack_ptr)
 80086bc:	4b0c      	ldr	r3, [pc, #48]	; (80086f0 <_sbrk+0x50>)
 80086be:	681a      	ldr	r2, [r3, #0]
 80086c0:	687b      	ldr	r3, [r7, #4]
 80086c2:	4413      	add	r3, r2
 80086c4:	466a      	mov	r2, sp
 80086c6:	4293      	cmp	r3, r2
 80086c8:	d907      	bls.n	80086da <_sbrk+0x3a>
	{
		errno = ENOMEM;
 80086ca:	f009 f80d 	bl	80116e8 <__errno>
 80086ce:	4602      	mov	r2, r0
 80086d0:	230c      	movs	r3, #12
 80086d2:	6013      	str	r3, [r2, #0]
		return (caddr_t) -1;
 80086d4:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80086d8:	e006      	b.n	80086e8 <_sbrk+0x48>
	}

	heap_end += incr;
 80086da:	4b05      	ldr	r3, [pc, #20]	; (80086f0 <_sbrk+0x50>)
 80086dc:	681a      	ldr	r2, [r3, #0]
 80086de:	687b      	ldr	r3, [r7, #4]
 80086e0:	4413      	add	r3, r2
 80086e2:	4a03      	ldr	r2, [pc, #12]	; (80086f0 <_sbrk+0x50>)
 80086e4:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap_end;
 80086e6:	68fb      	ldr	r3, [r7, #12]
}
 80086e8:	4618      	mov	r0, r3
 80086ea:	3710      	adds	r7, #16
 80086ec:	46bd      	mov	sp, r7
 80086ee:	bd80      	pop	{r7, pc}
 80086f0:	20002158 	.word	0x20002158
 80086f4:	20002c80 	.word	0x20002c80

080086f8 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 80086f8:	b480      	push	{r7}
 80086fa:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 80086fc:	4b08      	ldr	r3, [pc, #32]	; (8008720 <SystemInit+0x28>)
 80086fe:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008702:	4a07      	ldr	r2, [pc, #28]	; (8008720 <SystemInit+0x28>)
 8008704:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8008708:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 800870c:	4b04      	ldr	r3, [pc, #16]	; (8008720 <SystemInit+0x28>)
 800870e:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8008712:	609a      	str	r2, [r3, #8]
#endif
}
 8008714:	bf00      	nop
 8008716:	46bd      	mov	sp, r7
 8008718:	f85d 7b04 	ldr.w	r7, [sp], #4
 800871c:	4770      	bx	lr
 800871e:	bf00      	nop
 8008720:	e000ed00 	.word	0xe000ed00

08008724 <MX_TIM1_Init>:
TIM_HandleTypeDef htim17;
DMA_HandleTypeDef hdma_tim2_ch1;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 8008724:	b580      	push	{r7, lr}
 8008726:	b09a      	sub	sp, #104	; 0x68
 8008728:	af00      	add	r7, sp, #0
  TIM_Encoder_InitTypeDef sConfig = {0};
 800872a:	f107 0344 	add.w	r3, r7, #68	; 0x44
 800872e:	2224      	movs	r2, #36	; 0x24
 8008730:	2100      	movs	r1, #0
 8008732:	4618      	mov	r0, r3
 8008734:	f009 f802 	bl	801173c <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8008738:	f107 0338 	add.w	r3, r7, #56	; 0x38
 800873c:	2200      	movs	r2, #0
 800873e:	601a      	str	r2, [r3, #0]
 8008740:	605a      	str	r2, [r3, #4]
 8008742:	609a      	str	r2, [r3, #8]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8008744:	1d3b      	adds	r3, r7, #4
 8008746:	2234      	movs	r2, #52	; 0x34
 8008748:	2100      	movs	r1, #0
 800874a:	4618      	mov	r0, r3
 800874c:	f008 fff6 	bl	801173c <memset>

  htim1.Instance = TIM1;
 8008750:	4b2a      	ldr	r3, [pc, #168]	; (80087fc <MX_TIM1_Init+0xd8>)
 8008752:	4a2b      	ldr	r2, [pc, #172]	; (8008800 <MX_TIM1_Init+0xdc>)
 8008754:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 8008756:	4b29      	ldr	r3, [pc, #164]	; (80087fc <MX_TIM1_Init+0xd8>)
 8008758:	2200      	movs	r2, #0
 800875a:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_CENTERALIGNED3;
 800875c:	4b27      	ldr	r3, [pc, #156]	; (80087fc <MX_TIM1_Init+0xd8>)
 800875e:	2260      	movs	r2, #96	; 0x60
 8008760:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 1024;
 8008762:	4b26      	ldr	r3, [pc, #152]	; (80087fc <MX_TIM1_Init+0xd8>)
 8008764:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8008768:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800876a:	4b24      	ldr	r3, [pc, #144]	; (80087fc <MX_TIM1_Init+0xd8>)
 800876c:	2200      	movs	r2, #0
 800876e:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8008770:	4b22      	ldr	r3, [pc, #136]	; (80087fc <MX_TIM1_Init+0xd8>)
 8008772:	2200      	movs	r2, #0
 8008774:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8008776:	4b21      	ldr	r3, [pc, #132]	; (80087fc <MX_TIM1_Init+0xd8>)
 8008778:	2280      	movs	r2, #128	; 0x80
 800877a:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI2;
 800877c:	2302      	movs	r3, #2
 800877e:	647b      	str	r3, [r7, #68]	; 0x44
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8008780:	2300      	movs	r3, #0
 8008782:	64bb      	str	r3, [r7, #72]	; 0x48
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8008784:	2301      	movs	r3, #1
 8008786:	64fb      	str	r3, [r7, #76]	; 0x4c
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8008788:	2300      	movs	r3, #0
 800878a:	653b      	str	r3, [r7, #80]	; 0x50
  sConfig.IC1Filter = 0;
 800878c:	2300      	movs	r3, #0
 800878e:	657b      	str	r3, [r7, #84]	; 0x54
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8008790:	2300      	movs	r3, #0
 8008792:	65bb      	str	r3, [r7, #88]	; 0x58
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8008794:	2301      	movs	r3, #1
 8008796:	65fb      	str	r3, [r7, #92]	; 0x5c
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8008798:	2300      	movs	r3, #0
 800879a:	663b      	str	r3, [r7, #96]	; 0x60
  sConfig.IC2Filter = 0;
 800879c:	2300      	movs	r3, #0
 800879e:	667b      	str	r3, [r7, #100]	; 0x64
  if (HAL_TIM_Encoder_Init(&htim1, &sConfig) != HAL_OK)
 80087a0:	f107 0344 	add.w	r3, r7, #68	; 0x44
 80087a4:	4619      	mov	r1, r3
 80087a6:	4815      	ldr	r0, [pc, #84]	; (80087fc <MX_TIM1_Init+0xd8>)
 80087a8:	f005 fd94 	bl	800e2d4 <HAL_TIM_Encoder_Init>
 80087ac:	4603      	mov	r3, r0
 80087ae:	2b00      	cmp	r3, #0
 80087b0:	d001      	beq.n	80087b6 <MX_TIM1_Init+0x92>
  {
    Error_Handler();
 80087b2:	f7ff fd11 	bl	80081d8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 80087b6:	2320      	movs	r3, #32
 80087b8:	63bb      	str	r3, [r7, #56]	; 0x38
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 80087ba:	2300      	movs	r3, #0
 80087bc:	63fb      	str	r3, [r7, #60]	; 0x3c
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80087be:	2300      	movs	r3, #0
 80087c0:	643b      	str	r3, [r7, #64]	; 0x40
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 80087c2:	f107 0338 	add.w	r3, r7, #56	; 0x38
 80087c6:	4619      	mov	r1, r3
 80087c8:	480c      	ldr	r0, [pc, #48]	; (80087fc <MX_TIM1_Init+0xd8>)
 80087ca:	f007 fa17 	bl	800fbfc <HAL_TIMEx_MasterConfigSynchronization>
 80087ce:	4603      	mov	r3, r0
 80087d0:	2b00      	cmp	r3, #0
 80087d2:	d001      	beq.n	80087d8 <MX_TIM1_Init+0xb4>
  {
    Error_Handler();
 80087d4:	f7ff fd00 	bl	80081d8 <Error_Handler>
  }
  sBreakDeadTimeConfig.BreakAFMode = TIM_BREAK_AFMODE_INPUT;
 80087d8:	2300      	movs	r3, #0
 80087da:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2AFMode = TIM_BREAK_AFMODE_INPUT;
 80087dc:	2300      	movs	r3, #0
 80087de:	633b      	str	r3, [r7, #48]	; 0x30
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 80087e0:	1d3b      	adds	r3, r7, #4
 80087e2:	4619      	mov	r1, r3
 80087e4:	4805      	ldr	r0, [pc, #20]	; (80087fc <MX_TIM1_Init+0xd8>)
 80087e6:	f007 fa9f 	bl	800fd28 <HAL_TIMEx_ConfigBreakDeadTime>
 80087ea:	4603      	mov	r3, r0
 80087ec:	2b00      	cmp	r3, #0
 80087ee:	d001      	beq.n	80087f4 <MX_TIM1_Init+0xd0>
  {
    Error_Handler();
 80087f0:	f7ff fcf2 	bl	80081d8 <Error_Handler>
  }

}
 80087f4:	bf00      	nop
 80087f6:	3768      	adds	r7, #104	; 0x68
 80087f8:	46bd      	mov	sp, r7
 80087fa:	bd80      	pop	{r7, pc}
 80087fc:	20002b94 	.word	0x20002b94
 8008800:	40012c00 	.word	0x40012c00

08008804 <MX_TIM2_Init>:
/* TIM2 init function */
void MX_TIM2_Init(void)
{
 8008804:	b580      	push	{r7, lr}
 8008806:	b08c      	sub	sp, #48	; 0x30
 8008808:	af00      	add	r7, sp, #0
  TIM_SlaveConfigTypeDef sSlaveConfig = {0};
 800880a:	f107 031c 	add.w	r3, r7, #28
 800880e:	2200      	movs	r2, #0
 8008810:	601a      	str	r2, [r3, #0]
 8008812:	605a      	str	r2, [r3, #4]
 8008814:	609a      	str	r2, [r3, #8]
 8008816:	60da      	str	r2, [r3, #12]
 8008818:	611a      	str	r2, [r3, #16]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800881a:	f107 0310 	add.w	r3, r7, #16
 800881e:	2200      	movs	r2, #0
 8008820:	601a      	str	r2, [r3, #0]
 8008822:	605a      	str	r2, [r3, #4]
 8008824:	609a      	str	r2, [r3, #8]
  TIM_IC_InitTypeDef sConfigIC = {0};
 8008826:	463b      	mov	r3, r7
 8008828:	2200      	movs	r2, #0
 800882a:	601a      	str	r2, [r3, #0]
 800882c:	605a      	str	r2, [r3, #4]
 800882e:	609a      	str	r2, [r3, #8]
 8008830:	60da      	str	r2, [r3, #12]

  htim2.Instance = TIM2;
 8008832:	4b2e      	ldr	r3, [pc, #184]	; (80088ec <MX_TIM2_Init+0xe8>)
 8008834:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8008838:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 128;
 800883a:	4b2c      	ldr	r3, [pc, #176]	; (80088ec <MX_TIM2_Init+0xe8>)
 800883c:	2280      	movs	r2, #128	; 0x80
 800883e:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8008840:	4b2a      	ldr	r3, [pc, #168]	; (80088ec <MX_TIM2_Init+0xe8>)
 8008842:	2200      	movs	r2, #0
 8008844:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 65535;
 8008846:	4b29      	ldr	r3, [pc, #164]	; (80088ec <MX_TIM2_Init+0xe8>)
 8008848:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800884c:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800884e:	4b27      	ldr	r3, [pc, #156]	; (80088ec <MX_TIM2_Init+0xe8>)
 8008850:	2200      	movs	r2, #0
 8008852:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8008854:	4b25      	ldr	r3, [pc, #148]	; (80088ec <MX_TIM2_Init+0xe8>)
 8008856:	2280      	movs	r2, #128	; 0x80
 8008858:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 800885a:	4824      	ldr	r0, [pc, #144]	; (80088ec <MX_TIM2_Init+0xe8>)
 800885c:	f004 ff94 	bl	800d788 <HAL_TIM_Base_Init>
 8008860:	4603      	mov	r3, r0
 8008862:	2b00      	cmp	r3, #0
 8008864:	d001      	beq.n	800886a <MX_TIM2_Init+0x66>
  {
    Error_Handler();
 8008866:	f7ff fcb7 	bl	80081d8 <Error_Handler>
  }
  if (HAL_TIM_IC_Init(&htim2) != HAL_OK)
 800886a:	4820      	ldr	r0, [pc, #128]	; (80088ec <MX_TIM2_Init+0xe8>)
 800886c:	f005 fa76 	bl	800dd5c <HAL_TIM_IC_Init>
 8008870:	4603      	mov	r3, r0
 8008872:	2b00      	cmp	r3, #0
 8008874:	d001      	beq.n	800887a <MX_TIM2_Init+0x76>
  {
    Error_Handler();
 8008876:	f7ff fcaf 	bl	80081d8 <Error_Handler>
  }
  sSlaveConfig.SlaveMode = TIM_SLAVEMODE_RESET;
 800887a:	2304      	movs	r3, #4
 800887c:	61fb      	str	r3, [r7, #28]
  sSlaveConfig.InputTrigger = TIM_TS_TI1FP1;
 800887e:	2350      	movs	r3, #80	; 0x50
 8008880:	623b      	str	r3, [r7, #32]
  sSlaveConfig.TriggerPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 8008882:	2300      	movs	r3, #0
 8008884:	627b      	str	r3, [r7, #36]	; 0x24
  sSlaveConfig.TriggerFilter = 0;
 8008886:	2300      	movs	r3, #0
 8008888:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_SlaveConfigSynchro(&htim2, &sSlaveConfig) != HAL_OK)
 800888a:	f107 031c 	add.w	r3, r7, #28
 800888e:	4619      	mov	r1, r3
 8008890:	4816      	ldr	r0, [pc, #88]	; (80088ec <MX_TIM2_Init+0xe8>)
 8008892:	f006 f9d9 	bl	800ec48 <HAL_TIM_SlaveConfigSynchro>
 8008896:	4603      	mov	r3, r0
 8008898:	2b00      	cmp	r3, #0
 800889a:	d001      	beq.n	80088a0 <MX_TIM2_Init+0x9c>
  {
    Error_Handler();
 800889c:	f7ff fc9c 	bl	80081d8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 80088a0:	2320      	movs	r3, #32
 80088a2:	613b      	str	r3, [r7, #16]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80088a4:	2300      	movs	r3, #0
 80088a6:	61bb      	str	r3, [r7, #24]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80088a8:	f107 0310 	add.w	r3, r7, #16
 80088ac:	4619      	mov	r1, r3
 80088ae:	480f      	ldr	r0, [pc, #60]	; (80088ec <MX_TIM2_Init+0xe8>)
 80088b0:	f007 f9a4 	bl	800fbfc <HAL_TIMEx_MasterConfigSynchronization>
 80088b4:	4603      	mov	r3, r0
 80088b6:	2b00      	cmp	r3, #0
 80088b8:	d001      	beq.n	80088be <MX_TIM2_Init+0xba>
  {
    Error_Handler();
 80088ba:	f7ff fc8d 	bl	80081d8 <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 80088be:	2300      	movs	r3, #0
 80088c0:	603b      	str	r3, [r7, #0]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 80088c2:	2301      	movs	r3, #1
 80088c4:	607b      	str	r3, [r7, #4]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 80088c6:	2300      	movs	r3, #0
 80088c8:	60bb      	str	r3, [r7, #8]
  sConfigIC.ICFilter = 0;
 80088ca:	2300      	movs	r3, #0
 80088cc:	60fb      	str	r3, [r7, #12]
  if (HAL_TIM_IC_ConfigChannel(&htim2, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 80088ce:	463b      	mov	r3, r7
 80088d0:	2200      	movs	r2, #0
 80088d2:	4619      	mov	r1, r3
 80088d4:	4805      	ldr	r0, [pc, #20]	; (80088ec <MX_TIM2_Init+0xe8>)
 80088d6:	f005 ff22 	bl	800e71e <HAL_TIM_IC_ConfigChannel>
 80088da:	4603      	mov	r3, r0
 80088dc:	2b00      	cmp	r3, #0
 80088de:	d001      	beq.n	80088e4 <MX_TIM2_Init+0xe0>
  {
    Error_Handler();
 80088e0:	f7ff fc7a 	bl	80081d8 <Error_Handler>
  }

}
 80088e4:	bf00      	nop
 80088e6:	3730      	adds	r7, #48	; 0x30
 80088e8:	46bd      	mov	sp, r7
 80088ea:	bd80      	pop	{r7, pc}
 80088ec:	20002be0 	.word	0x20002be0

080088f0 <MX_TIM3_Init>:
/* TIM3 init function */
void MX_TIM3_Init(void)
{
 80088f0:	b580      	push	{r7, lr}
 80088f2:	b088      	sub	sp, #32
 80088f4:	af00      	add	r7, sp, #0
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80088f6:	f107 0310 	add.w	r3, r7, #16
 80088fa:	2200      	movs	r2, #0
 80088fc:	601a      	str	r2, [r3, #0]
 80088fe:	605a      	str	r2, [r3, #4]
 8008900:	609a      	str	r2, [r3, #8]
 8008902:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8008904:	1d3b      	adds	r3, r7, #4
 8008906:	2200      	movs	r2, #0
 8008908:	601a      	str	r2, [r3, #0]
 800890a:	605a      	str	r2, [r3, #4]
 800890c:	609a      	str	r2, [r3, #8]

  htim3.Instance = TIM3;
 800890e:	4b1d      	ldr	r3, [pc, #116]	; (8008984 <MX_TIM3_Init+0x94>)
 8008910:	4a1d      	ldr	r2, [pc, #116]	; (8008988 <MX_TIM3_Init+0x98>)
 8008912:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 8008914:	4b1b      	ldr	r3, [pc, #108]	; (8008984 <MX_TIM3_Init+0x94>)
 8008916:	2200      	movs	r2, #0
 8008918:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_DOWN;
 800891a:	4b1a      	ldr	r3, [pc, #104]	; (8008984 <MX_TIM3_Init+0x94>)
 800891c:	2210      	movs	r2, #16
 800891e:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 1;
 8008920:	4b18      	ldr	r3, [pc, #96]	; (8008984 <MX_TIM3_Init+0x94>)
 8008922:	2201      	movs	r2, #1
 8008924:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV4;
 8008926:	4b17      	ldr	r3, [pc, #92]	; (8008984 <MX_TIM3_Init+0x94>)
 8008928:	f44f 7200 	mov.w	r2, #512	; 0x200
 800892c:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 800892e:	4b15      	ldr	r3, [pc, #84]	; (8008984 <MX_TIM3_Init+0x94>)
 8008930:	2280      	movs	r2, #128	; 0x80
 8008932:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8008934:	4813      	ldr	r0, [pc, #76]	; (8008984 <MX_TIM3_Init+0x94>)
 8008936:	f004 ff27 	bl	800d788 <HAL_TIM_Base_Init>
 800893a:	4603      	mov	r3, r0
 800893c:	2b00      	cmp	r3, #0
 800893e:	d001      	beq.n	8008944 <MX_TIM3_Init+0x54>
  {
    Error_Handler();
 8008940:	f7ff fc4a 	bl	80081d8 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8008944:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8008948:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 800894a:	f107 0310 	add.w	r3, r7, #16
 800894e:	4619      	mov	r1, r3
 8008950:	480c      	ldr	r0, [pc, #48]	; (8008984 <MX_TIM3_Init+0x94>)
 8008952:	f006 f889 	bl	800ea68 <HAL_TIM_ConfigClockSource>
 8008956:	4603      	mov	r3, r0
 8008958:	2b00      	cmp	r3, #0
 800895a:	d001      	beq.n	8008960 <MX_TIM3_Init+0x70>
  {
    Error_Handler();
 800895c:	f7ff fc3c 	bl	80081d8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 8008960:	2320      	movs	r3, #32
 8008962:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8008964:	2300      	movs	r3, #0
 8008966:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8008968:	1d3b      	adds	r3, r7, #4
 800896a:	4619      	mov	r1, r3
 800896c:	4805      	ldr	r0, [pc, #20]	; (8008984 <MX_TIM3_Init+0x94>)
 800896e:	f007 f945 	bl	800fbfc <HAL_TIMEx_MasterConfigSynchronization>
 8008972:	4603      	mov	r3, r0
 8008974:	2b00      	cmp	r3, #0
 8008976:	d001      	beq.n	800897c <MX_TIM3_Init+0x8c>
  {
    Error_Handler();
 8008978:	f7ff fc2e 	bl	80081d8 <Error_Handler>
  }

}
 800897c:	bf00      	nop
 800897e:	3720      	adds	r7, #32
 8008980:	46bd      	mov	sp, r7
 8008982:	bd80      	pop	{r7, pc}
 8008984:	200021d8 	.word	0x200021d8
 8008988:	40000400 	.word	0x40000400

0800898c <MX_TIM5_Init>:
/* TIM5 init function */
void MX_TIM5_Init(void)
{
 800898c:	b580      	push	{r7, lr}
 800898e:	b088      	sub	sp, #32
 8008990:	af00      	add	r7, sp, #0
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8008992:	f107 0310 	add.w	r3, r7, #16
 8008996:	2200      	movs	r2, #0
 8008998:	601a      	str	r2, [r3, #0]
 800899a:	605a      	str	r2, [r3, #4]
 800899c:	609a      	str	r2, [r3, #8]
 800899e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80089a0:	1d3b      	adds	r3, r7, #4
 80089a2:	2200      	movs	r2, #0
 80089a4:	601a      	str	r2, [r3, #0]
 80089a6:	605a      	str	r2, [r3, #4]
 80089a8:	609a      	str	r2, [r3, #8]

  htim5.Instance = TIM5;
 80089aa:	4b1d      	ldr	r3, [pc, #116]	; (8008a20 <MX_TIM5_Init+0x94>)
 80089ac:	4a1d      	ldr	r2, [pc, #116]	; (8008a24 <MX_TIM5_Init+0x98>)
 80089ae:	601a      	str	r2, [r3, #0]
  htim5.Init.Prescaler = 0;
 80089b0:	4b1b      	ldr	r3, [pc, #108]	; (8008a20 <MX_TIM5_Init+0x94>)
 80089b2:	2200      	movs	r2, #0
 80089b4:	605a      	str	r2, [r3, #4]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 80089b6:	4b1a      	ldr	r3, [pc, #104]	; (8008a20 <MX_TIM5_Init+0x94>)
 80089b8:	2200      	movs	r2, #0
 80089ba:	609a      	str	r2, [r3, #8]
  htim5.Init.Period = 1024;
 80089bc:	4b18      	ldr	r3, [pc, #96]	; (8008a20 <MX_TIM5_Init+0x94>)
 80089be:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80089c2:	60da      	str	r2, [r3, #12]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80089c4:	4b16      	ldr	r3, [pc, #88]	; (8008a20 <MX_TIM5_Init+0x94>)
 80089c6:	2200      	movs	r2, #0
 80089c8:	611a      	str	r2, [r3, #16]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80089ca:	4b15      	ldr	r3, [pc, #84]	; (8008a20 <MX_TIM5_Init+0x94>)
 80089cc:	2200      	movs	r2, #0
 80089ce:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim5) != HAL_OK)
 80089d0:	4813      	ldr	r0, [pc, #76]	; (8008a20 <MX_TIM5_Init+0x94>)
 80089d2:	f004 fed9 	bl	800d788 <HAL_TIM_Base_Init>
 80089d6:	4603      	mov	r3, r0
 80089d8:	2b00      	cmp	r3, #0
 80089da:	d001      	beq.n	80089e0 <MX_TIM5_Init+0x54>
  {
    Error_Handler();
 80089dc:	f7ff fbfc 	bl	80081d8 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80089e0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80089e4:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim5, &sClockSourceConfig) != HAL_OK)
 80089e6:	f107 0310 	add.w	r3, r7, #16
 80089ea:	4619      	mov	r1, r3
 80089ec:	480c      	ldr	r0, [pc, #48]	; (8008a20 <MX_TIM5_Init+0x94>)
 80089ee:	f006 f83b 	bl	800ea68 <HAL_TIM_ConfigClockSource>
 80089f2:	4603      	mov	r3, r0
 80089f4:	2b00      	cmp	r3, #0
 80089f6:	d001      	beq.n	80089fc <MX_TIM5_Init+0x70>
  {
    Error_Handler();
 80089f8:	f7ff fbee 	bl	80081d8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80089fc:	2300      	movs	r3, #0
 80089fe:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8008a00:	2300      	movs	r3, #0
 8008a02:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 8008a04:	1d3b      	adds	r3, r7, #4
 8008a06:	4619      	mov	r1, r3
 8008a08:	4805      	ldr	r0, [pc, #20]	; (8008a20 <MX_TIM5_Init+0x94>)
 8008a0a:	f007 f8f7 	bl	800fbfc <HAL_TIMEx_MasterConfigSynchronization>
 8008a0e:	4603      	mov	r3, r0
 8008a10:	2b00      	cmp	r3, #0
 8008a12:	d001      	beq.n	8008a18 <MX_TIM5_Init+0x8c>
  {
    Error_Handler();
 8008a14:	f7ff fbe0 	bl	80081d8 <Error_Handler>
  }

}
 8008a18:	bf00      	nop
 8008a1a:	3720      	adds	r7, #32
 8008a1c:	46bd      	mov	sp, r7
 8008a1e:	bd80      	pop	{r7, pc}
 8008a20:	20002b48 	.word	0x20002b48
 8008a24:	40000c00 	.word	0x40000c00

08008a28 <MX_TIM8_Init>:
/* TIM8 init function */
void MX_TIM8_Init(void)
{
 8008a28:	b580      	push	{r7, lr}
 8008a2a:	b094      	sub	sp, #80	; 0x50
 8008a2c:	af00      	add	r7, sp, #0
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8008a2e:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8008a32:	2200      	movs	r2, #0
 8008a34:	601a      	str	r2, [r3, #0]
 8008a36:	605a      	str	r2, [r3, #4]
 8008a38:	609a      	str	r2, [r3, #8]
 8008a3a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8008a3c:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8008a40:	2200      	movs	r2, #0
 8008a42:	601a      	str	r2, [r3, #0]
 8008a44:	605a      	str	r2, [r3, #4]
 8008a46:	609a      	str	r2, [r3, #8]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8008a48:	463b      	mov	r3, r7
 8008a4a:	2234      	movs	r2, #52	; 0x34
 8008a4c:	2100      	movs	r1, #0
 8008a4e:	4618      	mov	r0, r3
 8008a50:	f008 fe74 	bl	801173c <memset>

  htim8.Instance = TIM8;
 8008a54:	4b26      	ldr	r3, [pc, #152]	; (8008af0 <MX_TIM8_Init+0xc8>)
 8008a56:	4a27      	ldr	r2, [pc, #156]	; (8008af4 <MX_TIM8_Init+0xcc>)
 8008a58:	601a      	str	r2, [r3, #0]
  htim8.Init.Prescaler = 0;
 8008a5a:	4b25      	ldr	r3, [pc, #148]	; (8008af0 <MX_TIM8_Init+0xc8>)
 8008a5c:	2200      	movs	r2, #0
 8008a5e:	605a      	str	r2, [r3, #4]
  htim8.Init.CounterMode = TIM_COUNTERMODE_UP;
 8008a60:	4b23      	ldr	r3, [pc, #140]	; (8008af0 <MX_TIM8_Init+0xc8>)
 8008a62:	2200      	movs	r2, #0
 8008a64:	609a      	str	r2, [r3, #8]
  htim8.Init.Period = 1;
 8008a66:	4b22      	ldr	r3, [pc, #136]	; (8008af0 <MX_TIM8_Init+0xc8>)
 8008a68:	2201      	movs	r2, #1
 8008a6a:	60da      	str	r2, [r3, #12]
  htim8.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8008a6c:	4b20      	ldr	r3, [pc, #128]	; (8008af0 <MX_TIM8_Init+0xc8>)
 8008a6e:	2200      	movs	r2, #0
 8008a70:	611a      	str	r2, [r3, #16]
  htim8.Init.RepetitionCounter = 0;
 8008a72:	4b1f      	ldr	r3, [pc, #124]	; (8008af0 <MX_TIM8_Init+0xc8>)
 8008a74:	2200      	movs	r2, #0
 8008a76:	615a      	str	r2, [r3, #20]
  htim8.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8008a78:	4b1d      	ldr	r3, [pc, #116]	; (8008af0 <MX_TIM8_Init+0xc8>)
 8008a7a:	2280      	movs	r2, #128	; 0x80
 8008a7c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim8) != HAL_OK)
 8008a7e:	481c      	ldr	r0, [pc, #112]	; (8008af0 <MX_TIM8_Init+0xc8>)
 8008a80:	f004 fe82 	bl	800d788 <HAL_TIM_Base_Init>
 8008a84:	4603      	mov	r3, r0
 8008a86:	2b00      	cmp	r3, #0
 8008a88:	d001      	beq.n	8008a8e <MX_TIM8_Init+0x66>
  {
    Error_Handler();
 8008a8a:	f7ff fba5 	bl	80081d8 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8008a8e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8008a92:	643b      	str	r3, [r7, #64]	; 0x40
  if (HAL_TIM_ConfigClockSource(&htim8, &sClockSourceConfig) != HAL_OK)
 8008a94:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8008a98:	4619      	mov	r1, r3
 8008a9a:	4815      	ldr	r0, [pc, #84]	; (8008af0 <MX_TIM8_Init+0xc8>)
 8008a9c:	f005 ffe4 	bl	800ea68 <HAL_TIM_ConfigClockSource>
 8008aa0:	4603      	mov	r3, r0
 8008aa2:	2b00      	cmp	r3, #0
 8008aa4:	d001      	beq.n	8008aaa <MX_TIM8_Init+0x82>
  {
    Error_Handler();
 8008aa6:	f7ff fb97 	bl	80081d8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 8008aaa:	2320      	movs	r3, #32
 8008aac:	637b      	str	r3, [r7, #52]	; 0x34
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8008aae:	2300      	movs	r3, #0
 8008ab0:	63bb      	str	r3, [r7, #56]	; 0x38
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8008ab2:	2300      	movs	r3, #0
 8008ab4:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_TIMEx_MasterConfigSynchronization(&htim8, &sMasterConfig) != HAL_OK)
 8008ab6:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8008aba:	4619      	mov	r1, r3
 8008abc:	480c      	ldr	r0, [pc, #48]	; (8008af0 <MX_TIM8_Init+0xc8>)
 8008abe:	f007 f89d 	bl	800fbfc <HAL_TIMEx_MasterConfigSynchronization>
 8008ac2:	4603      	mov	r3, r0
 8008ac4:	2b00      	cmp	r3, #0
 8008ac6:	d001      	beq.n	8008acc <MX_TIM8_Init+0xa4>
  {
    Error_Handler();
 8008ac8:	f7ff fb86 	bl	80081d8 <Error_Handler>
  }
  sBreakDeadTimeConfig.BreakAFMode = TIM_BREAK_AFMODE_INPUT;
 8008acc:	2300      	movs	r3, #0
 8008ace:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.Break2AFMode = TIM_BREAK_AFMODE_INPUT;
 8008ad0:	2300      	movs	r3, #0
 8008ad2:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim8, &sBreakDeadTimeConfig) != HAL_OK)
 8008ad4:	463b      	mov	r3, r7
 8008ad6:	4619      	mov	r1, r3
 8008ad8:	4805      	ldr	r0, [pc, #20]	; (8008af0 <MX_TIM8_Init+0xc8>)
 8008ada:	f007 f925 	bl	800fd28 <HAL_TIMEx_ConfigBreakDeadTime>
 8008ade:	4603      	mov	r3, r0
 8008ae0:	2b00      	cmp	r3, #0
 8008ae2:	d001      	beq.n	8008ae8 <MX_TIM8_Init+0xc0>
  {
    Error_Handler();
 8008ae4:	f7ff fb78 	bl	80081d8 <Error_Handler>
  }

}
 8008ae8:	bf00      	nop
 8008aea:	3750      	adds	r7, #80	; 0x50
 8008aec:	46bd      	mov	sp, r7
 8008aee:	bd80      	pop	{r7, pc}
 8008af0:	20002a64 	.word	0x20002a64
 8008af4:	40013400 	.word	0x40013400

08008af8 <MX_TIM15_Init>:
/* TIM15 init function */
void MX_TIM15_Init(void)
{
 8008af8:	b580      	push	{r7, lr}
 8008afa:	b088      	sub	sp, #32
 8008afc:	af00      	add	r7, sp, #0
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8008afe:	f107 0310 	add.w	r3, r7, #16
 8008b02:	2200      	movs	r2, #0
 8008b04:	601a      	str	r2, [r3, #0]
 8008b06:	605a      	str	r2, [r3, #4]
 8008b08:	609a      	str	r2, [r3, #8]
 8008b0a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8008b0c:	1d3b      	adds	r3, r7, #4
 8008b0e:	2200      	movs	r2, #0
 8008b10:	601a      	str	r2, [r3, #0]
 8008b12:	605a      	str	r2, [r3, #4]
 8008b14:	609a      	str	r2, [r3, #8]

  htim15.Instance = TIM15;
 8008b16:	4b1f      	ldr	r3, [pc, #124]	; (8008b94 <MX_TIM15_Init+0x9c>)
 8008b18:	4a1f      	ldr	r2, [pc, #124]	; (8008b98 <MX_TIM15_Init+0xa0>)
 8008b1a:	601a      	str	r2, [r3, #0]
  htim15.Init.Prescaler = 1024;
 8008b1c:	4b1d      	ldr	r3, [pc, #116]	; (8008b94 <MX_TIM15_Init+0x9c>)
 8008b1e:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8008b22:	605a      	str	r2, [r3, #4]
  htim15.Init.CounterMode = TIM_COUNTERMODE_UP;
 8008b24:	4b1b      	ldr	r3, [pc, #108]	; (8008b94 <MX_TIM15_Init+0x9c>)
 8008b26:	2200      	movs	r2, #0
 8008b28:	609a      	str	r2, [r3, #8]
  htim15.Init.Period = 1024;
 8008b2a:	4b1a      	ldr	r3, [pc, #104]	; (8008b94 <MX_TIM15_Init+0x9c>)
 8008b2c:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8008b30:	60da      	str	r2, [r3, #12]
  htim15.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8008b32:	4b18      	ldr	r3, [pc, #96]	; (8008b94 <MX_TIM15_Init+0x9c>)
 8008b34:	2200      	movs	r2, #0
 8008b36:	611a      	str	r2, [r3, #16]
  htim15.Init.RepetitionCounter = 0;
 8008b38:	4b16      	ldr	r3, [pc, #88]	; (8008b94 <MX_TIM15_Init+0x9c>)
 8008b3a:	2200      	movs	r2, #0
 8008b3c:	615a      	str	r2, [r3, #20]
  htim15.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8008b3e:	4b15      	ldr	r3, [pc, #84]	; (8008b94 <MX_TIM15_Init+0x9c>)
 8008b40:	2200      	movs	r2, #0
 8008b42:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim15) != HAL_OK)
 8008b44:	4813      	ldr	r0, [pc, #76]	; (8008b94 <MX_TIM15_Init+0x9c>)
 8008b46:	f004 fe1f 	bl	800d788 <HAL_TIM_Base_Init>
 8008b4a:	4603      	mov	r3, r0
 8008b4c:	2b00      	cmp	r3, #0
 8008b4e:	d001      	beq.n	8008b54 <MX_TIM15_Init+0x5c>
  {
    Error_Handler();
 8008b50:	f7ff fb42 	bl	80081d8 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8008b54:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8008b58:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim15, &sClockSourceConfig) != HAL_OK)
 8008b5a:	f107 0310 	add.w	r3, r7, #16
 8008b5e:	4619      	mov	r1, r3
 8008b60:	480c      	ldr	r0, [pc, #48]	; (8008b94 <MX_TIM15_Init+0x9c>)
 8008b62:	f005 ff81 	bl	800ea68 <HAL_TIM_ConfigClockSource>
 8008b66:	4603      	mov	r3, r0
 8008b68:	2b00      	cmp	r3, #0
 8008b6a:	d001      	beq.n	8008b70 <MX_TIM15_Init+0x78>
  {
    Error_Handler();
 8008b6c:	f7ff fb34 	bl	80081d8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8008b70:	2300      	movs	r3, #0
 8008b72:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8008b74:	2300      	movs	r3, #0
 8008b76:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim15, &sMasterConfig) != HAL_OK)
 8008b78:	1d3b      	adds	r3, r7, #4
 8008b7a:	4619      	mov	r1, r3
 8008b7c:	4805      	ldr	r0, [pc, #20]	; (8008b94 <MX_TIM15_Init+0x9c>)
 8008b7e:	f007 f83d 	bl	800fbfc <HAL_TIMEx_MasterConfigSynchronization>
 8008b82:	4603      	mov	r3, r0
 8008b84:	2b00      	cmp	r3, #0
 8008b86:	d001      	beq.n	8008b8c <MX_TIM15_Init+0x94>
  {
    Error_Handler();
 8008b88:	f7ff fb26 	bl	80081d8 <Error_Handler>
  }

}
 8008b8c:	bf00      	nop
 8008b8e:	3720      	adds	r7, #32
 8008b90:	46bd      	mov	sp, r7
 8008b92:	bd80      	pop	{r7, pc}
 8008b94:	20002ab0 	.word	0x20002ab0
 8008b98:	40014000 	.word	0x40014000

08008b9c <MX_TIM16_Init>:
/* TIM16 init function */
void MX_TIM16_Init(void)
{
 8008b9c:	b580      	push	{r7, lr}
 8008b9e:	af00      	add	r7, sp, #0

  htim16.Instance = TIM16;
 8008ba0:	4b10      	ldr	r3, [pc, #64]	; (8008be4 <MX_TIM16_Init+0x48>)
 8008ba2:	4a11      	ldr	r2, [pc, #68]	; (8008be8 <MX_TIM16_Init+0x4c>)
 8008ba4:	601a      	str	r2, [r3, #0]
  htim16.Init.Prescaler = 65535;
 8008ba6:	4b0f      	ldr	r3, [pc, #60]	; (8008be4 <MX_TIM16_Init+0x48>)
 8008ba8:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8008bac:	605a      	str	r2, [r3, #4]
  htim16.Init.CounterMode = TIM_COUNTERMODE_UP;
 8008bae:	4b0d      	ldr	r3, [pc, #52]	; (8008be4 <MX_TIM16_Init+0x48>)
 8008bb0:	2200      	movs	r2, #0
 8008bb2:	609a      	str	r2, [r3, #8]
  htim16.Init.Period = 65535;
 8008bb4:	4b0b      	ldr	r3, [pc, #44]	; (8008be4 <MX_TIM16_Init+0x48>)
 8008bb6:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8008bba:	60da      	str	r2, [r3, #12]
  htim16.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8008bbc:	4b09      	ldr	r3, [pc, #36]	; (8008be4 <MX_TIM16_Init+0x48>)
 8008bbe:	2200      	movs	r2, #0
 8008bc0:	611a      	str	r2, [r3, #16]
  htim16.Init.RepetitionCounter = 0;
 8008bc2:	4b08      	ldr	r3, [pc, #32]	; (8008be4 <MX_TIM16_Init+0x48>)
 8008bc4:	2200      	movs	r2, #0
 8008bc6:	615a      	str	r2, [r3, #20]
  htim16.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8008bc8:	4b06      	ldr	r3, [pc, #24]	; (8008be4 <MX_TIM16_Init+0x48>)
 8008bca:	2200      	movs	r2, #0
 8008bcc:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim16) != HAL_OK)
 8008bce:	4805      	ldr	r0, [pc, #20]	; (8008be4 <MX_TIM16_Init+0x48>)
 8008bd0:	f004 fdda 	bl	800d788 <HAL_TIM_Base_Init>
 8008bd4:	4603      	mov	r3, r0
 8008bd6:	2b00      	cmp	r3, #0
 8008bd8:	d001      	beq.n	8008bde <MX_TIM16_Init+0x42>
  {
    Error_Handler();
 8008bda:	f7ff fafd 	bl	80081d8 <Error_Handler>
  }

}
 8008bde:	bf00      	nop
 8008be0:	bd80      	pop	{r7, pc}
 8008be2:	bf00      	nop
 8008be4:	20002c2c 	.word	0x20002c2c
 8008be8:	40014400 	.word	0x40014400

08008bec <MX_TIM17_Init>:
/* TIM17 init function */
void MX_TIM17_Init(void)
{
 8008bec:	b580      	push	{r7, lr}
 8008bee:	af00      	add	r7, sp, #0

  htim17.Instance = TIM17;
 8008bf0:	4b10      	ldr	r3, [pc, #64]	; (8008c34 <MX_TIM17_Init+0x48>)
 8008bf2:	4a11      	ldr	r2, [pc, #68]	; (8008c38 <MX_TIM17_Init+0x4c>)
 8008bf4:	601a      	str	r2, [r3, #0]
  htim17.Init.Prescaler = 1024;
 8008bf6:	4b0f      	ldr	r3, [pc, #60]	; (8008c34 <MX_TIM17_Init+0x48>)
 8008bf8:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8008bfc:	605a      	str	r2, [r3, #4]
  htim17.Init.CounterMode = TIM_COUNTERMODE_UP;
 8008bfe:	4b0d      	ldr	r3, [pc, #52]	; (8008c34 <MX_TIM17_Init+0x48>)
 8008c00:	2200      	movs	r2, #0
 8008c02:	609a      	str	r2, [r3, #8]
  htim17.Init.Period = 1024;
 8008c04:	4b0b      	ldr	r3, [pc, #44]	; (8008c34 <MX_TIM17_Init+0x48>)
 8008c06:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8008c0a:	60da      	str	r2, [r3, #12]
  htim17.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8008c0c:	4b09      	ldr	r3, [pc, #36]	; (8008c34 <MX_TIM17_Init+0x48>)
 8008c0e:	2200      	movs	r2, #0
 8008c10:	611a      	str	r2, [r3, #16]
  htim17.Init.RepetitionCounter = 0;
 8008c12:	4b08      	ldr	r3, [pc, #32]	; (8008c34 <MX_TIM17_Init+0x48>)
 8008c14:	2200      	movs	r2, #0
 8008c16:	615a      	str	r2, [r3, #20]
  htim17.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8008c18:	4b06      	ldr	r3, [pc, #24]	; (8008c34 <MX_TIM17_Init+0x48>)
 8008c1a:	2200      	movs	r2, #0
 8008c1c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim17) != HAL_OK)
 8008c1e:	4805      	ldr	r0, [pc, #20]	; (8008c34 <MX_TIM17_Init+0x48>)
 8008c20:	f004 fdb2 	bl	800d788 <HAL_TIM_Base_Init>
 8008c24:	4603      	mov	r3, r0
 8008c26:	2b00      	cmp	r3, #0
 8008c28:	d001      	beq.n	8008c2e <MX_TIM17_Init+0x42>
  {
    Error_Handler();
 8008c2a:	f7ff fad5 	bl	80081d8 <Error_Handler>
  }

}
 8008c2e:	bf00      	nop
 8008c30:	bd80      	pop	{r7, pc}
 8008c32:	bf00      	nop
 8008c34:	20002afc 	.word	0x20002afc
 8008c38:	40014800 	.word	0x40014800

08008c3c <HAL_TIM_Encoder_MspInit>:

void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* tim_encoderHandle)
{
 8008c3c:	b580      	push	{r7, lr}
 8008c3e:	b08a      	sub	sp, #40	; 0x28
 8008c40:	af00      	add	r7, sp, #0
 8008c42:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8008c44:	f107 0314 	add.w	r3, r7, #20
 8008c48:	2200      	movs	r2, #0
 8008c4a:	601a      	str	r2, [r3, #0]
 8008c4c:	605a      	str	r2, [r3, #4]
 8008c4e:	609a      	str	r2, [r3, #8]
 8008c50:	60da      	str	r2, [r3, #12]
 8008c52:	611a      	str	r2, [r3, #16]
  if(tim_encoderHandle->Instance==TIM1)
 8008c54:	687b      	ldr	r3, [r7, #4]
 8008c56:	681b      	ldr	r3, [r3, #0]
 8008c58:	4a1f      	ldr	r2, [pc, #124]	; (8008cd8 <HAL_TIM_Encoder_MspInit+0x9c>)
 8008c5a:	4293      	cmp	r3, r2
 8008c5c:	d137      	bne.n	8008cce <HAL_TIM_Encoder_MspInit+0x92>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8008c5e:	4b1f      	ldr	r3, [pc, #124]	; (8008cdc <HAL_TIM_Encoder_MspInit+0xa0>)
 8008c60:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8008c62:	4a1e      	ldr	r2, [pc, #120]	; (8008cdc <HAL_TIM_Encoder_MspInit+0xa0>)
 8008c64:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8008c68:	6613      	str	r3, [r2, #96]	; 0x60
 8008c6a:	4b1c      	ldr	r3, [pc, #112]	; (8008cdc <HAL_TIM_Encoder_MspInit+0xa0>)
 8008c6c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8008c6e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8008c72:	613b      	str	r3, [r7, #16]
 8008c74:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8008c76:	4b19      	ldr	r3, [pc, #100]	; (8008cdc <HAL_TIM_Encoder_MspInit+0xa0>)
 8008c78:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008c7a:	4a18      	ldr	r2, [pc, #96]	; (8008cdc <HAL_TIM_Encoder_MspInit+0xa0>)
 8008c7c:	f043 0304 	orr.w	r3, r3, #4
 8008c80:	64d3      	str	r3, [r2, #76]	; 0x4c
 8008c82:	4b16      	ldr	r3, [pc, #88]	; (8008cdc <HAL_TIM_Encoder_MspInit+0xa0>)
 8008c84:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008c86:	f003 0304 	and.w	r3, r3, #4
 8008c8a:	60fb      	str	r3, [r7, #12]
 8008c8c:	68fb      	ldr	r3, [r7, #12]
    /**TIM1 GPIO Configuration    
    PC0     ------> TIM1_CH1
    PC1     ------> TIM1_CH2 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8008c8e:	2303      	movs	r3, #3
 8008c90:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8008c92:	2302      	movs	r3, #2
 8008c94:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8008c96:	2300      	movs	r3, #0
 8008c98:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8008c9a:	2300      	movs	r3, #0
 8008c9c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM1;
 8008c9e:	2302      	movs	r3, #2
 8008ca0:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8008ca2:	f107 0314 	add.w	r3, r7, #20
 8008ca6:	4619      	mov	r1, r3
 8008ca8:	480d      	ldr	r0, [pc, #52]	; (8008ce0 <HAL_TIM_Encoder_MspInit+0xa4>)
 8008caa:	f003 fa67 	bl	800c17c <HAL_GPIO_Init>

    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_BRK_TIM15_IRQn, 0, 0);
 8008cae:	2200      	movs	r2, #0
 8008cb0:	2100      	movs	r1, #0
 8008cb2:	2018      	movs	r0, #24
 8008cb4:	f002 facf 	bl	800b256 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_BRK_TIM15_IRQn);
 8008cb8:	2018      	movs	r0, #24
 8008cba:	f002 fae6 	bl	800b28a <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM1_TRG_COM_TIM17_IRQn, 1, 0);
 8008cbe:	2200      	movs	r2, #0
 8008cc0:	2101      	movs	r1, #1
 8008cc2:	201a      	movs	r0, #26
 8008cc4:	f002 fac7 	bl	800b256 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_TRG_COM_TIM17_IRQn);
 8008cc8:	201a      	movs	r0, #26
 8008cca:	f002 fade 	bl	800b28a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }
}
 8008cce:	bf00      	nop
 8008cd0:	3728      	adds	r7, #40	; 0x28
 8008cd2:	46bd      	mov	sp, r7
 8008cd4:	bd80      	pop	{r7, pc}
 8008cd6:	bf00      	nop
 8008cd8:	40012c00 	.word	0x40012c00
 8008cdc:	40021000 	.word	0x40021000
 8008ce0:	48000800 	.word	0x48000800

08008ce4 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8008ce4:	b580      	push	{r7, lr}
 8008ce6:	b090      	sub	sp, #64	; 0x40
 8008ce8:	af00      	add	r7, sp, #0
 8008cea:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8008cec:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8008cf0:	2200      	movs	r2, #0
 8008cf2:	601a      	str	r2, [r3, #0]
 8008cf4:	605a      	str	r2, [r3, #4]
 8008cf6:	609a      	str	r2, [r3, #8]
 8008cf8:	60da      	str	r2, [r3, #12]
 8008cfa:	611a      	str	r2, [r3, #16]
  if(tim_baseHandle->Instance==TIM2)
 8008cfc:	687b      	ldr	r3, [r7, #4]
 8008cfe:	681b      	ldr	r3, [r3, #0]
 8008d00:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008d04:	d154      	bne.n	8008db0 <HAL_TIM_Base_MspInit+0xcc>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8008d06:	4b72      	ldr	r3, [pc, #456]	; (8008ed0 <HAL_TIM_Base_MspInit+0x1ec>)
 8008d08:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008d0a:	4a71      	ldr	r2, [pc, #452]	; (8008ed0 <HAL_TIM_Base_MspInit+0x1ec>)
 8008d0c:	f043 0301 	orr.w	r3, r3, #1
 8008d10:	6593      	str	r3, [r2, #88]	; 0x58
 8008d12:	4b6f      	ldr	r3, [pc, #444]	; (8008ed0 <HAL_TIM_Base_MspInit+0x1ec>)
 8008d14:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008d16:	f003 0301 	and.w	r3, r3, #1
 8008d1a:	62bb      	str	r3, [r7, #40]	; 0x28
 8008d1c:	6abb      	ldr	r3, [r7, #40]	; 0x28
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8008d1e:	4b6c      	ldr	r3, [pc, #432]	; (8008ed0 <HAL_TIM_Base_MspInit+0x1ec>)
 8008d20:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008d22:	4a6b      	ldr	r2, [pc, #428]	; (8008ed0 <HAL_TIM_Base_MspInit+0x1ec>)
 8008d24:	f043 0301 	orr.w	r3, r3, #1
 8008d28:	64d3      	str	r3, [r2, #76]	; 0x4c
 8008d2a:	4b69      	ldr	r3, [pc, #420]	; (8008ed0 <HAL_TIM_Base_MspInit+0x1ec>)
 8008d2c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008d2e:	f003 0301 	and.w	r3, r3, #1
 8008d32:	627b      	str	r3, [r7, #36]	; 0x24
 8008d34:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    /**TIM2 GPIO Configuration    
    PA0     ------> TIM2_CH1 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8008d36:	2301      	movs	r3, #1
 8008d38:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8008d3a:	2302      	movs	r3, #2
 8008d3c:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8008d3e:	2300      	movs	r3, #0
 8008d40:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8008d42:	2300      	movs	r3, #0
 8008d44:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8008d46:	2301      	movs	r3, #1
 8008d48:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8008d4a:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8008d4e:	4619      	mov	r1, r3
 8008d50:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8008d54:	f003 fa12 	bl	800c17c <HAL_GPIO_Init>

    /* TIM2 DMA Init */
    /* TIM2_CH1 Init */
    hdma_tim2_ch1.Instance = DMA1_Channel4;
 8008d58:	4b5e      	ldr	r3, [pc, #376]	; (8008ed4 <HAL_TIM_Base_MspInit+0x1f0>)
 8008d5a:	4a5f      	ldr	r2, [pc, #380]	; (8008ed8 <HAL_TIM_Base_MspInit+0x1f4>)
 8008d5c:	601a      	str	r2, [r3, #0]
    hdma_tim2_ch1.Init.Request = DMA_REQUEST_TIM2_CH1;
 8008d5e:	4b5d      	ldr	r3, [pc, #372]	; (8008ed4 <HAL_TIM_Base_MspInit+0x1f0>)
 8008d60:	2238      	movs	r2, #56	; 0x38
 8008d62:	605a      	str	r2, [r3, #4]
    hdma_tim2_ch1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8008d64:	4b5b      	ldr	r3, [pc, #364]	; (8008ed4 <HAL_TIM_Base_MspInit+0x1f0>)
 8008d66:	2200      	movs	r2, #0
 8008d68:	609a      	str	r2, [r3, #8]
    hdma_tim2_ch1.Init.PeriphInc = DMA_PINC_DISABLE;
 8008d6a:	4b5a      	ldr	r3, [pc, #360]	; (8008ed4 <HAL_TIM_Base_MspInit+0x1f0>)
 8008d6c:	2200      	movs	r2, #0
 8008d6e:	60da      	str	r2, [r3, #12]
    hdma_tim2_ch1.Init.MemInc = DMA_MINC_ENABLE;
 8008d70:	4b58      	ldr	r3, [pc, #352]	; (8008ed4 <HAL_TIM_Base_MspInit+0x1f0>)
 8008d72:	2280      	movs	r2, #128	; 0x80
 8008d74:	611a      	str	r2, [r3, #16]
    hdma_tim2_ch1.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8008d76:	4b57      	ldr	r3, [pc, #348]	; (8008ed4 <HAL_TIM_Base_MspInit+0x1f0>)
 8008d78:	f44f 7200 	mov.w	r2, #512	; 0x200
 8008d7c:	615a      	str	r2, [r3, #20]
    hdma_tim2_ch1.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8008d7e:	4b55      	ldr	r3, [pc, #340]	; (8008ed4 <HAL_TIM_Base_MspInit+0x1f0>)
 8008d80:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8008d84:	619a      	str	r2, [r3, #24]
    hdma_tim2_ch1.Init.Mode = DMA_CIRCULAR;
 8008d86:	4b53      	ldr	r3, [pc, #332]	; (8008ed4 <HAL_TIM_Base_MspInit+0x1f0>)
 8008d88:	2220      	movs	r2, #32
 8008d8a:	61da      	str	r2, [r3, #28]
    hdma_tim2_ch1.Init.Priority = DMA_PRIORITY_LOW;
 8008d8c:	4b51      	ldr	r3, [pc, #324]	; (8008ed4 <HAL_TIM_Base_MspInit+0x1f0>)
 8008d8e:	2200      	movs	r2, #0
 8008d90:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_tim2_ch1) != HAL_OK)
 8008d92:	4850      	ldr	r0, [pc, #320]	; (8008ed4 <HAL_TIM_Base_MspInit+0x1f0>)
 8008d94:	f002 fec0 	bl	800bb18 <HAL_DMA_Init>
 8008d98:	4603      	mov	r3, r0
 8008d9a:	2b00      	cmp	r3, #0
 8008d9c:	d001      	beq.n	8008da2 <HAL_TIM_Base_MspInit+0xbe>
    {
      Error_Handler();
 8008d9e:	f7ff fa1b 	bl	80081d8 <Error_Handler>
    }

    __HAL_LINKDMA(tim_baseHandle,hdma[TIM_DMA_ID_CC1],hdma_tim2_ch1);
 8008da2:	687b      	ldr	r3, [r7, #4]
 8008da4:	4a4b      	ldr	r2, [pc, #300]	; (8008ed4 <HAL_TIM_Base_MspInit+0x1f0>)
 8008da6:	625a      	str	r2, [r3, #36]	; 0x24
 8008da8:	4a4a      	ldr	r2, [pc, #296]	; (8008ed4 <HAL_TIM_Base_MspInit+0x1f0>)
 8008daa:	687b      	ldr	r3, [r7, #4]
 8008dac:	6293      	str	r3, [r2, #40]	; 0x28
    HAL_NVIC_EnableIRQ(TIM1_TRG_COM_TIM17_IRQn);
  /* USER CODE BEGIN TIM17_MspInit 1 */

  /* USER CODE END TIM17_MspInit 1 */
  }
}
 8008dae:	e08a      	b.n	8008ec6 <HAL_TIM_Base_MspInit+0x1e2>
  else if(tim_baseHandle->Instance==TIM3)
 8008db0:	687b      	ldr	r3, [r7, #4]
 8008db2:	681b      	ldr	r3, [r3, #0]
 8008db4:	4a49      	ldr	r2, [pc, #292]	; (8008edc <HAL_TIM_Base_MspInit+0x1f8>)
 8008db6:	4293      	cmp	r3, r2
 8008db8:	d114      	bne.n	8008de4 <HAL_TIM_Base_MspInit+0x100>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8008dba:	4b45      	ldr	r3, [pc, #276]	; (8008ed0 <HAL_TIM_Base_MspInit+0x1ec>)
 8008dbc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008dbe:	4a44      	ldr	r2, [pc, #272]	; (8008ed0 <HAL_TIM_Base_MspInit+0x1ec>)
 8008dc0:	f043 0302 	orr.w	r3, r3, #2
 8008dc4:	6593      	str	r3, [r2, #88]	; 0x58
 8008dc6:	4b42      	ldr	r3, [pc, #264]	; (8008ed0 <HAL_TIM_Base_MspInit+0x1ec>)
 8008dc8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008dca:	f003 0302 	and.w	r3, r3, #2
 8008dce:	623b      	str	r3, [r7, #32]
 8008dd0:	6a3b      	ldr	r3, [r7, #32]
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 8008dd2:	2200      	movs	r2, #0
 8008dd4:	2100      	movs	r1, #0
 8008dd6:	201d      	movs	r0, #29
 8008dd8:	f002 fa3d 	bl	800b256 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8008ddc:	201d      	movs	r0, #29
 8008dde:	f002 fa54 	bl	800b28a <HAL_NVIC_EnableIRQ>
}
 8008de2:	e070      	b.n	8008ec6 <HAL_TIM_Base_MspInit+0x1e2>
  else if(tim_baseHandle->Instance==TIM5)
 8008de4:	687b      	ldr	r3, [r7, #4]
 8008de6:	681b      	ldr	r3, [r3, #0]
 8008de8:	4a3d      	ldr	r2, [pc, #244]	; (8008ee0 <HAL_TIM_Base_MspInit+0x1fc>)
 8008dea:	4293      	cmp	r3, r2
 8008dec:	d114      	bne.n	8008e18 <HAL_TIM_Base_MspInit+0x134>
    __HAL_RCC_TIM5_CLK_ENABLE();
 8008dee:	4b38      	ldr	r3, [pc, #224]	; (8008ed0 <HAL_TIM_Base_MspInit+0x1ec>)
 8008df0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008df2:	4a37      	ldr	r2, [pc, #220]	; (8008ed0 <HAL_TIM_Base_MspInit+0x1ec>)
 8008df4:	f043 0308 	orr.w	r3, r3, #8
 8008df8:	6593      	str	r3, [r2, #88]	; 0x58
 8008dfa:	4b35      	ldr	r3, [pc, #212]	; (8008ed0 <HAL_TIM_Base_MspInit+0x1ec>)
 8008dfc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008dfe:	f003 0308 	and.w	r3, r3, #8
 8008e02:	61fb      	str	r3, [r7, #28]
 8008e04:	69fb      	ldr	r3, [r7, #28]
    HAL_NVIC_SetPriority(TIM5_IRQn, 2, 0);
 8008e06:	2200      	movs	r2, #0
 8008e08:	2102      	movs	r1, #2
 8008e0a:	2032      	movs	r0, #50	; 0x32
 8008e0c:	f002 fa23 	bl	800b256 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM5_IRQn);
 8008e10:	2032      	movs	r0, #50	; 0x32
 8008e12:	f002 fa3a 	bl	800b28a <HAL_NVIC_EnableIRQ>
}
 8008e16:	e056      	b.n	8008ec6 <HAL_TIM_Base_MspInit+0x1e2>
  else if(tim_baseHandle->Instance==TIM8)
 8008e18:	687b      	ldr	r3, [r7, #4]
 8008e1a:	681b      	ldr	r3, [r3, #0]
 8008e1c:	4a31      	ldr	r2, [pc, #196]	; (8008ee4 <HAL_TIM_Base_MspInit+0x200>)
 8008e1e:	4293      	cmp	r3, r2
 8008e20:	d10c      	bne.n	8008e3c <HAL_TIM_Base_MspInit+0x158>
    __HAL_RCC_TIM8_CLK_ENABLE();
 8008e22:	4b2b      	ldr	r3, [pc, #172]	; (8008ed0 <HAL_TIM_Base_MspInit+0x1ec>)
 8008e24:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8008e26:	4a2a      	ldr	r2, [pc, #168]	; (8008ed0 <HAL_TIM_Base_MspInit+0x1ec>)
 8008e28:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8008e2c:	6613      	str	r3, [r2, #96]	; 0x60
 8008e2e:	4b28      	ldr	r3, [pc, #160]	; (8008ed0 <HAL_TIM_Base_MspInit+0x1ec>)
 8008e30:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8008e32:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8008e36:	61bb      	str	r3, [r7, #24]
 8008e38:	69bb      	ldr	r3, [r7, #24]
}
 8008e3a:	e044      	b.n	8008ec6 <HAL_TIM_Base_MspInit+0x1e2>
  else if(tim_baseHandle->Instance==TIM15)
 8008e3c:	687b      	ldr	r3, [r7, #4]
 8008e3e:	681b      	ldr	r3, [r3, #0]
 8008e40:	4a29      	ldr	r2, [pc, #164]	; (8008ee8 <HAL_TIM_Base_MspInit+0x204>)
 8008e42:	4293      	cmp	r3, r2
 8008e44:	d114      	bne.n	8008e70 <HAL_TIM_Base_MspInit+0x18c>
    __HAL_RCC_TIM15_CLK_ENABLE();
 8008e46:	4b22      	ldr	r3, [pc, #136]	; (8008ed0 <HAL_TIM_Base_MspInit+0x1ec>)
 8008e48:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8008e4a:	4a21      	ldr	r2, [pc, #132]	; (8008ed0 <HAL_TIM_Base_MspInit+0x1ec>)
 8008e4c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8008e50:	6613      	str	r3, [r2, #96]	; 0x60
 8008e52:	4b1f      	ldr	r3, [pc, #124]	; (8008ed0 <HAL_TIM_Base_MspInit+0x1ec>)
 8008e54:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8008e56:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8008e5a:	617b      	str	r3, [r7, #20]
 8008e5c:	697b      	ldr	r3, [r7, #20]
    HAL_NVIC_SetPriority(TIM1_BRK_TIM15_IRQn, 0, 0);
 8008e5e:	2200      	movs	r2, #0
 8008e60:	2100      	movs	r1, #0
 8008e62:	2018      	movs	r0, #24
 8008e64:	f002 f9f7 	bl	800b256 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_BRK_TIM15_IRQn);
 8008e68:	2018      	movs	r0, #24
 8008e6a:	f002 fa0e 	bl	800b28a <HAL_NVIC_EnableIRQ>
}
 8008e6e:	e02a      	b.n	8008ec6 <HAL_TIM_Base_MspInit+0x1e2>
  else if(tim_baseHandle->Instance==TIM16)
 8008e70:	687b      	ldr	r3, [r7, #4]
 8008e72:	681b      	ldr	r3, [r3, #0]
 8008e74:	4a1d      	ldr	r2, [pc, #116]	; (8008eec <HAL_TIM_Base_MspInit+0x208>)
 8008e76:	4293      	cmp	r3, r2
 8008e78:	d10c      	bne.n	8008e94 <HAL_TIM_Base_MspInit+0x1b0>
    __HAL_RCC_TIM16_CLK_ENABLE();
 8008e7a:	4b15      	ldr	r3, [pc, #84]	; (8008ed0 <HAL_TIM_Base_MspInit+0x1ec>)
 8008e7c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8008e7e:	4a14      	ldr	r2, [pc, #80]	; (8008ed0 <HAL_TIM_Base_MspInit+0x1ec>)
 8008e80:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8008e84:	6613      	str	r3, [r2, #96]	; 0x60
 8008e86:	4b12      	ldr	r3, [pc, #72]	; (8008ed0 <HAL_TIM_Base_MspInit+0x1ec>)
 8008e88:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8008e8a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008e8e:	613b      	str	r3, [r7, #16]
 8008e90:	693b      	ldr	r3, [r7, #16]
}
 8008e92:	e018      	b.n	8008ec6 <HAL_TIM_Base_MspInit+0x1e2>
  else if(tim_baseHandle->Instance==TIM17)
 8008e94:	687b      	ldr	r3, [r7, #4]
 8008e96:	681b      	ldr	r3, [r3, #0]
 8008e98:	4a15      	ldr	r2, [pc, #84]	; (8008ef0 <HAL_TIM_Base_MspInit+0x20c>)
 8008e9a:	4293      	cmp	r3, r2
 8008e9c:	d113      	bne.n	8008ec6 <HAL_TIM_Base_MspInit+0x1e2>
    __HAL_RCC_TIM17_CLK_ENABLE();
 8008e9e:	4b0c      	ldr	r3, [pc, #48]	; (8008ed0 <HAL_TIM_Base_MspInit+0x1ec>)
 8008ea0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8008ea2:	4a0b      	ldr	r2, [pc, #44]	; (8008ed0 <HAL_TIM_Base_MspInit+0x1ec>)
 8008ea4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8008ea8:	6613      	str	r3, [r2, #96]	; 0x60
 8008eaa:	4b09      	ldr	r3, [pc, #36]	; (8008ed0 <HAL_TIM_Base_MspInit+0x1ec>)
 8008eac:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8008eae:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8008eb2:	60fb      	str	r3, [r7, #12]
 8008eb4:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_SetPriority(TIM1_TRG_COM_TIM17_IRQn, 1, 0);
 8008eb6:	2200      	movs	r2, #0
 8008eb8:	2101      	movs	r1, #1
 8008eba:	201a      	movs	r0, #26
 8008ebc:	f002 f9cb 	bl	800b256 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_TRG_COM_TIM17_IRQn);
 8008ec0:	201a      	movs	r0, #26
 8008ec2:	f002 f9e2 	bl	800b28a <HAL_NVIC_EnableIRQ>
}
 8008ec6:	bf00      	nop
 8008ec8:	3740      	adds	r7, #64	; 0x40
 8008eca:	46bd      	mov	sp, r7
 8008ecc:	bd80      	pop	{r7, pc}
 8008ece:	bf00      	nop
 8008ed0:	40021000 	.word	0x40021000
 8008ed4:	20002a04 	.word	0x20002a04
 8008ed8:	40020044 	.word	0x40020044
 8008edc:	40000400 	.word	0x40000400
 8008ee0:	40000c00 	.word	0x40000c00
 8008ee4:	40013400 	.word	0x40013400
 8008ee8:	40014000 	.word	0x40014000
 8008eec:	40014400 	.word	0x40014400
 8008ef0:	40014800 	.word	0x40014800

08008ef4 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8008ef4:	480d      	ldr	r0, [pc, #52]	; (8008f2c <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8008ef6:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8008ef8:	480d      	ldr	r0, [pc, #52]	; (8008f30 <LoopForever+0x6>)
  ldr r1, =_edata
 8008efa:	490e      	ldr	r1, [pc, #56]	; (8008f34 <LoopForever+0xa>)
  ldr r2, =_sidata
 8008efc:	4a0e      	ldr	r2, [pc, #56]	; (8008f38 <LoopForever+0xe>)
  movs r3, #0
 8008efe:	2300      	movs	r3, #0
  b	LoopCopyDataInit
 8008f00:	e002      	b.n	8008f08 <LoopCopyDataInit>

08008f02 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8008f02:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8008f04:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8008f06:	3304      	adds	r3, #4

08008f08 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8008f08:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8008f0a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8008f0c:	d3f9      	bcc.n	8008f02 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8008f0e:	4a0b      	ldr	r2, [pc, #44]	; (8008f3c <LoopForever+0x12>)
  ldr r4, =_ebss
 8008f10:	4c0b      	ldr	r4, [pc, #44]	; (8008f40 <LoopForever+0x16>)
  movs r3, #0
 8008f12:	2300      	movs	r3, #0
  b LoopFillZerobss
 8008f14:	e001      	b.n	8008f1a <LoopFillZerobss>

08008f16 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8008f16:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8008f18:	3204      	adds	r2, #4

08008f1a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8008f1a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8008f1c:	d3fb      	bcc.n	8008f16 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8008f1e:	f7ff fbeb 	bl	80086f8 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8008f22:	f008 fbe7 	bl	80116f4 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8008f26:	f7ff f897 	bl	8008058 <main>

08008f2a <LoopForever>:

LoopForever:
    b LoopForever
 8008f2a:	e7fe      	b.n	8008f2a <LoopForever>
  ldr   r0, =_estack
 8008f2c:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8008f30:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8008f34:	20002088 	.word	0x20002088
  ldr r2, =_sidata
 8008f38:	08016c90 	.word	0x08016c90
  ldr r2, =_sbss
 8008f3c:	20002088 	.word	0x20002088
  ldr r4, =_ebss
 8008f40:	20002c80 	.word	0x20002c80

08008f44 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8008f44:	e7fe      	b.n	8008f44 <ADC1_2_IRQHandler>

08008f46 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8008f46:	b580      	push	{r7, lr}
 8008f48:	b082      	sub	sp, #8
 8008f4a:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8008f4c:	2300      	movs	r3, #0
 8008f4e:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8008f50:	2003      	movs	r0, #3
 8008f52:	f002 f975 	bl	800b240 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8008f56:	2000      	movs	r0, #0
 8008f58:	f000 f80e 	bl	8008f78 <HAL_InitTick>
 8008f5c:	4603      	mov	r3, r0
 8008f5e:	2b00      	cmp	r3, #0
 8008f60:	d002      	beq.n	8008f68 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8008f62:	2301      	movs	r3, #1
 8008f64:	71fb      	strb	r3, [r7, #7]
 8008f66:	e001      	b.n	8008f6c <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8008f68:	f7ff fa06 	bl	8008378 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8008f6c:	79fb      	ldrb	r3, [r7, #7]

}
 8008f6e:	4618      	mov	r0, r3
 8008f70:	3708      	adds	r7, #8
 8008f72:	46bd      	mov	sp, r7
 8008f74:	bd80      	pop	{r7, pc}
	...

08008f78 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8008f78:	b580      	push	{r7, lr}
 8008f7a:	b084      	sub	sp, #16
 8008f7c:	af00      	add	r7, sp, #0
 8008f7e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8008f80:	2300      	movs	r3, #0
 8008f82:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 8008f84:	4b16      	ldr	r3, [pc, #88]	; (8008fe0 <HAL_InitTick+0x68>)
 8008f86:	681b      	ldr	r3, [r3, #0]
 8008f88:	2b00      	cmp	r3, #0
 8008f8a:	d022      	beq.n	8008fd2 <HAL_InitTick+0x5a>
  {
    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 8008f8c:	4b15      	ldr	r3, [pc, #84]	; (8008fe4 <HAL_InitTick+0x6c>)
 8008f8e:	681a      	ldr	r2, [r3, #0]
 8008f90:	4b13      	ldr	r3, [pc, #76]	; (8008fe0 <HAL_InitTick+0x68>)
 8008f92:	681b      	ldr	r3, [r3, #0]
 8008f94:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8008f98:	fbb1 f3f3 	udiv	r3, r1, r3
 8008f9c:	fbb2 f3f3 	udiv	r3, r2, r3
 8008fa0:	4618      	mov	r0, r3
 8008fa2:	f002 f98e 	bl	800b2c2 <HAL_SYSTICK_Config>
 8008fa6:	4603      	mov	r3, r0
 8008fa8:	2b00      	cmp	r3, #0
 8008faa:	d10f      	bne.n	8008fcc <HAL_InitTick+0x54>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8008fac:	687b      	ldr	r3, [r7, #4]
 8008fae:	2b0f      	cmp	r3, #15
 8008fb0:	d809      	bhi.n	8008fc6 <HAL_InitTick+0x4e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8008fb2:	2200      	movs	r2, #0
 8008fb4:	6879      	ldr	r1, [r7, #4]
 8008fb6:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8008fba:	f002 f94c 	bl	800b256 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8008fbe:	4a0a      	ldr	r2, [pc, #40]	; (8008fe8 <HAL_InitTick+0x70>)
 8008fc0:	687b      	ldr	r3, [r7, #4]
 8008fc2:	6013      	str	r3, [r2, #0]
 8008fc4:	e007      	b.n	8008fd6 <HAL_InitTick+0x5e>
      }
      else
      {
        status = HAL_ERROR;
 8008fc6:	2301      	movs	r3, #1
 8008fc8:	73fb      	strb	r3, [r7, #15]
 8008fca:	e004      	b.n	8008fd6 <HAL_InitTick+0x5e>
      }
    }
    else
    {
      status = HAL_ERROR;
 8008fcc:	2301      	movs	r3, #1
 8008fce:	73fb      	strb	r3, [r7, #15]
 8008fd0:	e001      	b.n	8008fd6 <HAL_InitTick+0x5e>
    }
  }
  else
  {
    status = HAL_ERROR;
 8008fd2:	2301      	movs	r3, #1
 8008fd4:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8008fd6:	7bfb      	ldrb	r3, [r7, #15]
}
 8008fd8:	4618      	mov	r0, r3
 8008fda:	3710      	adds	r7, #16
 8008fdc:	46bd      	mov	sp, r7
 8008fde:	bd80      	pop	{r7, pc}
 8008fe0:	20000eb8 	.word	0x20000eb8
 8008fe4:	20000eb0 	.word	0x20000eb0
 8008fe8:	20000eb4 	.word	0x20000eb4

08008fec <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8008fec:	b480      	push	{r7}
 8008fee:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8008ff0:	4b05      	ldr	r3, [pc, #20]	; (8009008 <HAL_IncTick+0x1c>)
 8008ff2:	681a      	ldr	r2, [r3, #0]
 8008ff4:	4b05      	ldr	r3, [pc, #20]	; (800900c <HAL_IncTick+0x20>)
 8008ff6:	681b      	ldr	r3, [r3, #0]
 8008ff8:	4413      	add	r3, r2
 8008ffa:	4a03      	ldr	r2, [pc, #12]	; (8009008 <HAL_IncTick+0x1c>)
 8008ffc:	6013      	str	r3, [r2, #0]
}
 8008ffe:	bf00      	nop
 8009000:	46bd      	mov	sp, r7
 8009002:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009006:	4770      	bx	lr
 8009008:	20002c78 	.word	0x20002c78
 800900c:	20000eb8 	.word	0x20000eb8

08009010 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8009010:	b480      	push	{r7}
 8009012:	af00      	add	r7, sp, #0
  return uwTick;
 8009014:	4b03      	ldr	r3, [pc, #12]	; (8009024 <HAL_GetTick+0x14>)
 8009016:	681b      	ldr	r3, [r3, #0]
}
 8009018:	4618      	mov	r0, r3
 800901a:	46bd      	mov	sp, r7
 800901c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009020:	4770      	bx	lr
 8009022:	bf00      	nop
 8009024:	20002c78 	.word	0x20002c78

08009028 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8009028:	b580      	push	{r7, lr}
 800902a:	b084      	sub	sp, #16
 800902c:	af00      	add	r7, sp, #0
 800902e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8009030:	f7ff ffee 	bl	8009010 <HAL_GetTick>
 8009034:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8009036:	687b      	ldr	r3, [r7, #4]
 8009038:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800903a:	68fb      	ldr	r3, [r7, #12]
 800903c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8009040:	d004      	beq.n	800904c <HAL_Delay+0x24>
  {
    wait += (uint32_t)(uwTickFreq);
 8009042:	4b09      	ldr	r3, [pc, #36]	; (8009068 <HAL_Delay+0x40>)
 8009044:	681b      	ldr	r3, [r3, #0]
 8009046:	68fa      	ldr	r2, [r7, #12]
 8009048:	4413      	add	r3, r2
 800904a:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800904c:	bf00      	nop
 800904e:	f7ff ffdf 	bl	8009010 <HAL_GetTick>
 8009052:	4602      	mov	r2, r0
 8009054:	68bb      	ldr	r3, [r7, #8]
 8009056:	1ad3      	subs	r3, r2, r3
 8009058:	68fa      	ldr	r2, [r7, #12]
 800905a:	429a      	cmp	r2, r3
 800905c:	d8f7      	bhi.n	800904e <HAL_Delay+0x26>
  {
  }
}
 800905e:	bf00      	nop
 8009060:	3710      	adds	r7, #16
 8009062:	46bd      	mov	sp, r7
 8009064:	bd80      	pop	{r7, pc}
 8009066:	bf00      	nop
 8009068:	20000eb8 	.word	0x20000eb8

0800906c <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 800906c:	b480      	push	{r7}
 800906e:	b083      	sub	sp, #12
 8009070:	af00      	add	r7, sp, #0
 8009072:	6078      	str	r0, [r7, #4]
 8009074:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 8009076:	687b      	ldr	r3, [r7, #4]
 8009078:	689b      	ldr	r3, [r3, #8]
 800907a:	f423 127c 	bic.w	r2, r3, #4128768	; 0x3f0000
 800907e:	683b      	ldr	r3, [r7, #0]
 8009080:	431a      	orrs	r2, r3
 8009082:	687b      	ldr	r3, [r7, #4]
 8009084:	609a      	str	r2, [r3, #8]
}
 8009086:	bf00      	nop
 8009088:	370c      	adds	r7, #12
 800908a:	46bd      	mov	sp, r7
 800908c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009090:	4770      	bx	lr

08009092 <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 8009092:	b480      	push	{r7}
 8009094:	b083      	sub	sp, #12
 8009096:	af00      	add	r7, sp, #0
 8009098:	6078      	str	r0, [r7, #4]
 800909a:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL, PathInternal);
 800909c:	687b      	ldr	r3, [r7, #4]
 800909e:	689b      	ldr	r3, [r3, #8]
 80090a0:	f023 72e0 	bic.w	r2, r3, #29360128	; 0x1c00000
 80090a4:	683b      	ldr	r3, [r7, #0]
 80090a6:	431a      	orrs	r2, r3
 80090a8:	687b      	ldr	r3, [r7, #4]
 80090aa:	609a      	str	r2, [r3, #8]
}
 80090ac:	bf00      	nop
 80090ae:	370c      	adds	r7, #12
 80090b0:	46bd      	mov	sp, r7
 80090b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80090b6:	4770      	bx	lr

080090b8 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON)
{
 80090b8:	b480      	push	{r7}
 80090ba:	b083      	sub	sp, #12
 80090bc:	af00      	add	r7, sp, #0
 80090be:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL));
 80090c0:	687b      	ldr	r3, [r7, #4]
 80090c2:	689b      	ldr	r3, [r3, #8]
 80090c4:	f003 73e0 	and.w	r3, r3, #29360128	; 0x1c00000
}
 80090c8:	4618      	mov	r0, r3
 80090ca:	370c      	adds	r7, #12
 80090cc:	46bd      	mov	sp, r7
 80090ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80090d2:	4770      	bx	lr

080090d4 <LL_ADC_SetOffset>:
  *             Other channels are slow channels  allows: 6.5 (sampling) + 12.5 (conversion) = 19 ADC clock cycles (fADC) to convert in 12-bit resolution.\n
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 80090d4:	b490      	push	{r4, r7}
 80090d6:	b084      	sub	sp, #16
 80090d8:	af00      	add	r7, sp, #0
 80090da:	60f8      	str	r0, [r7, #12]
 80090dc:	60b9      	str	r1, [r7, #8]
 80090de:	607a      	str	r2, [r7, #4]
 80090e0:	603b      	str	r3, [r7, #0]
  register __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80090e2:	68fb      	ldr	r3, [r7, #12]
 80090e4:	3360      	adds	r3, #96	; 0x60
 80090e6:	461a      	mov	r2, r3
 80090e8:	68bb      	ldr	r3, [r7, #8]
 80090ea:	009b      	lsls	r3, r3, #2
 80090ec:	4413      	add	r3, r2
 80090ee:	461c      	mov	r4, r3

  MODIFY_REG(*preg,
 80090f0:	6822      	ldr	r2, [r4, #0]
 80090f2:	4b08      	ldr	r3, [pc, #32]	; (8009114 <LL_ADC_SetOffset+0x40>)
 80090f4:	4013      	ands	r3, r2
 80090f6:	687a      	ldr	r2, [r7, #4]
 80090f8:	f002 41f8 	and.w	r1, r2, #2080374784	; 0x7c000000
 80090fc:	683a      	ldr	r2, [r7, #0]
 80090fe:	430a      	orrs	r2, r1
 8009100:	4313      	orrs	r3, r2
 8009102:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8009106:	6023      	str	r3, [r4, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 8009108:	bf00      	nop
 800910a:	3710      	adds	r7, #16
 800910c:	46bd      	mov	sp, r7
 800910e:	bc90      	pop	{r4, r7}
 8009110:	4770      	bx	lr
 8009112:	bf00      	nop
 8009114:	03fff000 	.word	0x03fff000

08009118 <LL_ADC_GetOffsetChannel>:
  *         (1, 2, 3, 4, 5, 7) For ADC channel read back from ADC register,
  *                      comparison with internal channel parameter to be done
  *                      using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(ADC_TypeDef *ADCx, uint32_t Offsety)
{
 8009118:	b490      	push	{r4, r7}
 800911a:	b082      	sub	sp, #8
 800911c:	af00      	add	r7, sp, #0
 800911e:	6078      	str	r0, [r7, #4]
 8009120:	6039      	str	r1, [r7, #0]
  register const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8009122:	687b      	ldr	r3, [r7, #4]
 8009124:	3360      	adds	r3, #96	; 0x60
 8009126:	461a      	mov	r2, r3
 8009128:	683b      	ldr	r3, [r7, #0]
 800912a:	009b      	lsls	r3, r3, #2
 800912c:	4413      	add	r3, r2
 800912e:	461c      	mov	r4, r3

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8009130:	6823      	ldr	r3, [r4, #0]
 8009132:	f003 43f8 	and.w	r3, r3, #2080374784	; 0x7c000000
}
 8009136:	4618      	mov	r0, r3
 8009138:	3708      	adds	r7, #8
 800913a:	46bd      	mov	sp, r7
 800913c:	bc90      	pop	{r4, r7}
 800913e:	4770      	bx	lr

08009140 <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 8009140:	b490      	push	{r4, r7}
 8009142:	b084      	sub	sp, #16
 8009144:	af00      	add	r7, sp, #0
 8009146:	60f8      	str	r0, [r7, #12]
 8009148:	60b9      	str	r1, [r7, #8]
 800914a:	607a      	str	r2, [r7, #4]
  register __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 800914c:	68fb      	ldr	r3, [r7, #12]
 800914e:	3360      	adds	r3, #96	; 0x60
 8009150:	461a      	mov	r2, r3
 8009152:	68bb      	ldr	r3, [r7, #8]
 8009154:	009b      	lsls	r3, r3, #2
 8009156:	4413      	add	r3, r2
 8009158:	461c      	mov	r4, r3

  MODIFY_REG(*preg,
 800915a:	6823      	ldr	r3, [r4, #0]
 800915c:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8009160:	687b      	ldr	r3, [r7, #4]
 8009162:	4313      	orrs	r3, r2
 8009164:	6023      	str	r3, [r4, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 8009166:	bf00      	nop
 8009168:	3710      	adds	r7, #16
 800916a:	46bd      	mov	sp, r7
 800916c:	bc90      	pop	{r4, r7}
 800916e:	4770      	bx	lr

08009170 <LL_ADC_SetOffsetSign>:
  *         @arg @ref LL_ADC_OFFSET_SIGN_NEGATIVE
  *         @arg @ref LL_ADC_OFFSET_SIGN_POSITIVE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSign(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSign)
{
 8009170:	b490      	push	{r4, r7}
 8009172:	b084      	sub	sp, #16
 8009174:	af00      	add	r7, sp, #0
 8009176:	60f8      	str	r0, [r7, #12]
 8009178:	60b9      	str	r1, [r7, #8]
 800917a:	607a      	str	r2, [r7, #4]
  register __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 800917c:	68fb      	ldr	r3, [r7, #12]
 800917e:	3360      	adds	r3, #96	; 0x60
 8009180:	461a      	mov	r2, r3
 8009182:	68bb      	ldr	r3, [r7, #8]
 8009184:	009b      	lsls	r3, r3, #2
 8009186:	4413      	add	r3, r2
 8009188:	461c      	mov	r4, r3

  MODIFY_REG(*preg,
 800918a:	6823      	ldr	r3, [r4, #0]
 800918c:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 8009190:	687b      	ldr	r3, [r7, #4]
 8009192:	4313      	orrs	r3, r2
 8009194:	6023      	str	r3, [r4, #0]
             ADC_OFR1_OFFSETPOS,
             OffsetSign);
}
 8009196:	bf00      	nop
 8009198:	3710      	adds	r7, #16
 800919a:	46bd      	mov	sp, r7
 800919c:	bc90      	pop	{r4, r7}
 800919e:	4770      	bx	lr

080091a0 <LL_ADC_SetOffsetSaturation>:
  *         @arg @ref LL_ADC_OFFSET_SATURATION_ENABLE
  *         @arg @ref LL_ADC_OFFSET_SATURATION_DISABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSaturation(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSaturation)
{
 80091a0:	b490      	push	{r4, r7}
 80091a2:	b084      	sub	sp, #16
 80091a4:	af00      	add	r7, sp, #0
 80091a6:	60f8      	str	r0, [r7, #12]
 80091a8:	60b9      	str	r1, [r7, #8]
 80091aa:	607a      	str	r2, [r7, #4]
  register __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80091ac:	68fb      	ldr	r3, [r7, #12]
 80091ae:	3360      	adds	r3, #96	; 0x60
 80091b0:	461a      	mov	r2, r3
 80091b2:	68bb      	ldr	r3, [r7, #8]
 80091b4:	009b      	lsls	r3, r3, #2
 80091b6:	4413      	add	r3, r2
 80091b8:	461c      	mov	r4, r3

  MODIFY_REG(*preg,
 80091ba:	6823      	ldr	r3, [r4, #0]
 80091bc:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 80091c0:	687b      	ldr	r3, [r7, #4]
 80091c2:	4313      	orrs	r3, r2
 80091c4:	6023      	str	r3, [r4, #0]
             ADC_OFR1_SATEN,
             OffsetSaturation);
}
 80091c6:	bf00      	nop
 80091c8:	3710      	adds	r7, #16
 80091ca:	46bd      	mov	sp, r7
 80091cc:	bc90      	pop	{r4, r7}
 80091ce:	4770      	bx	lr

080091d0 <LL_ADC_SetSamplingTimeCommonConfig>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_DEFAULT
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetSamplingTimeCommonConfig(ADC_TypeDef *ADCx, uint32_t SamplingTimeCommonConfig)
{
 80091d0:	b480      	push	{r7}
 80091d2:	b083      	sub	sp, #12
 80091d4:	af00      	add	r7, sp, #0
 80091d6:	6078      	str	r0, [r7, #4]
 80091d8:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->SMPR1, ADC_SMPR1_SMPPLUS, SamplingTimeCommonConfig);
 80091da:	687b      	ldr	r3, [r7, #4]
 80091dc:	695b      	ldr	r3, [r3, #20]
 80091de:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 80091e2:	683b      	ldr	r3, [r7, #0]
 80091e4:	431a      	orrs	r2, r3
 80091e6:	687b      	ldr	r3, [r7, #4]
 80091e8:	615a      	str	r2, [r3, #20]
}
 80091ea:	bf00      	nop
 80091ec:	370c      	adds	r7, #12
 80091ee:	46bd      	mov	sp, r7
 80091f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80091f4:	4770      	bx	lr

080091f6 <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(ADC_TypeDef *ADCx)
{
 80091f6:	b480      	push	{r7}
 80091f8:	b083      	sub	sp, #12
 80091fa:	af00      	add	r7, sp, #0
 80091fc:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 80091fe:	687b      	ldr	r3, [r7, #4]
 8009200:	68db      	ldr	r3, [r3, #12]
 8009202:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8009206:	2b00      	cmp	r3, #0
 8009208:	d101      	bne.n	800920e <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 800920a:	2301      	movs	r3, #1
 800920c:	e000      	b.n	8009210 <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 800920e:	2300      	movs	r3, #0
}
 8009210:	4618      	mov	r0, r3
 8009212:	370c      	adds	r7, #12
 8009214:	46bd      	mov	sp, r7
 8009216:	f85d 7b04 	ldr.w	r7, [sp], #4
 800921a:	4770      	bx	lr

0800921c <LL_ADC_REG_SetSequencerRanks>:
  *         (8) On STM32G4, fast channel allows: 2.5 (sampling) + 12.5 (conversion) = 15 ADC clock cycles (fADC) to convert in 12-bit resolution.
  *             Other channels are slow channels  allows: 6.5 (sampling) + 12.5 (conversion) = 19 ADC clock cycles (fADC) to convert in 12-bit resolution.\n
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 800921c:	b490      	push	{r4, r7}
 800921e:	b084      	sub	sp, #16
 8009220:	af00      	add	r7, sp, #0
 8009222:	60f8      	str	r0, [r7, #12]
 8009224:	60b9      	str	r1, [r7, #8]
 8009226:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  register __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 8009228:	68fb      	ldr	r3, [r7, #12]
 800922a:	3330      	adds	r3, #48	; 0x30
 800922c:	461a      	mov	r2, r3
 800922e:	68bb      	ldr	r3, [r7, #8]
 8009230:	0a1b      	lsrs	r3, r3, #8
 8009232:	009b      	lsls	r3, r3, #2
 8009234:	f003 030c 	and.w	r3, r3, #12
 8009238:	4413      	add	r3, r2
 800923a:	461c      	mov	r4, r3

  MODIFY_REG(*preg,
 800923c:	6822      	ldr	r2, [r4, #0]
 800923e:	68bb      	ldr	r3, [r7, #8]
 8009240:	f003 031f 	and.w	r3, r3, #31
 8009244:	211f      	movs	r1, #31
 8009246:	fa01 f303 	lsl.w	r3, r1, r3
 800924a:	43db      	mvns	r3, r3
 800924c:	401a      	ands	r2, r3
 800924e:	687b      	ldr	r3, [r7, #4]
 8009250:	0e9b      	lsrs	r3, r3, #26
 8009252:	f003 011f 	and.w	r1, r3, #31
 8009256:	68bb      	ldr	r3, [r7, #8]
 8009258:	f003 031f 	and.w	r3, r3, #31
 800925c:	fa01 f303 	lsl.w	r3, r1, r3
 8009260:	4313      	orrs	r3, r2
 8009262:	6023      	str	r3, [r4, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS) << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 8009264:	bf00      	nop
 8009266:	3710      	adds	r7, #16
 8009268:	46bd      	mov	sp, r7
 800926a:	bc90      	pop	{r4, r7}
 800926c:	4770      	bx	lr

0800926e <LL_ADC_SetChannelSamplingTime>:
  *             can be replaced by 3.5 ADC clock cycles.
  *             Refer to function @ref LL_ADC_SetSamplingTimeCommonConfig().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 800926e:	b490      	push	{r4, r7}
 8009270:	b084      	sub	sp, #16
 8009272:	af00      	add	r7, sp, #0
 8009274:	60f8      	str	r0, [r7, #12]
 8009276:	60b9      	str	r1, [r7, #8]
 8009278:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  register __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 800927a:	68fb      	ldr	r3, [r7, #12]
 800927c:	3314      	adds	r3, #20
 800927e:	461a      	mov	r2, r3
 8009280:	68bb      	ldr	r3, [r7, #8]
 8009282:	0e5b      	lsrs	r3, r3, #25
 8009284:	009b      	lsls	r3, r3, #2
 8009286:	f003 0304 	and.w	r3, r3, #4
 800928a:	4413      	add	r3, r2
 800928c:	461c      	mov	r4, r3

  MODIFY_REG(*preg,
 800928e:	6822      	ldr	r2, [r4, #0]
 8009290:	68bb      	ldr	r3, [r7, #8]
 8009292:	0d1b      	lsrs	r3, r3, #20
 8009294:	f003 031f 	and.w	r3, r3, #31
 8009298:	2107      	movs	r1, #7
 800929a:	fa01 f303 	lsl.w	r3, r1, r3
 800929e:	43db      	mvns	r3, r3
 80092a0:	401a      	ands	r2, r3
 80092a2:	68bb      	ldr	r3, [r7, #8]
 80092a4:	0d1b      	lsrs	r3, r3, #20
 80092a6:	f003 031f 	and.w	r3, r3, #31
 80092aa:	6879      	ldr	r1, [r7, #4]
 80092ac:	fa01 f303 	lsl.w	r3, r1, r3
 80092b0:	4313      	orrs	r3, r2
 80092b2:	6023      	str	r3, [r4, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 80092b4:	bf00      	nop
 80092b6:	3710      	adds	r7, #16
 80092b8:	46bd      	mov	sp, r7
 80092ba:	bc90      	pop	{r4, r7}
 80092bc:	4770      	bx	lr
	...

080092c0 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 80092c0:	b480      	push	{r7}
 80092c2:	b085      	sub	sp, #20
 80092c4:	af00      	add	r7, sp, #0
 80092c6:	60f8      	str	r0, [r7, #12]
 80092c8:	60b9      	str	r1, [r7, #8]
 80092ca:	607a      	str	r2, [r7, #4]
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 80092cc:	68fb      	ldr	r3, [r7, #12]
 80092ce:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 80092d2:	68bb      	ldr	r3, [r7, #8]
 80092d4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80092d8:	43db      	mvns	r3, r3
 80092da:	401a      	ands	r2, r3
 80092dc:	687b      	ldr	r3, [r7, #4]
 80092de:	f003 0318 	and.w	r3, r3, #24
 80092e2:	4908      	ldr	r1, [pc, #32]	; (8009304 <LL_ADC_SetChannelSingleDiff+0x44>)
 80092e4:	40d9      	lsrs	r1, r3
 80092e6:	68bb      	ldr	r3, [r7, #8]
 80092e8:	400b      	ands	r3, r1
 80092ea:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80092ee:	431a      	orrs	r2, r3
 80092f0:	68fb      	ldr	r3, [r7, #12]
 80092f2:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK) & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
}
 80092f6:	bf00      	nop
 80092f8:	3714      	adds	r7, #20
 80092fa:	46bd      	mov	sp, r7
 80092fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009300:	4770      	bx	lr
 8009302:	bf00      	nop
 8009304:	0007ffff 	.word	0x0007ffff

08009308 <LL_ADC_GetMultimode>:
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_SIM
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_ALT
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_INT_INJ_SIM
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultimode(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8009308:	b480      	push	{r7}
 800930a:	b083      	sub	sp, #12
 800930c:	af00      	add	r7, sp, #0
 800930e:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DUAL));
 8009310:	687b      	ldr	r3, [r7, #4]
 8009312:	689b      	ldr	r3, [r3, #8]
 8009314:	f003 031f 	and.w	r3, r3, #31
}
 8009318:	4618      	mov	r0, r3
 800931a:	370c      	adds	r7, #12
 800931c:	46bd      	mov	sp, r7
 800931e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009322:	4770      	bx	lr

08009324 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 8009324:	b480      	push	{r7}
 8009326:	b083      	sub	sp, #12
 8009328:	af00      	add	r7, sp, #0
 800932a:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 800932c:	687b      	ldr	r3, [r7, #4]
 800932e:	689b      	ldr	r3, [r3, #8]
 8009330:	f023 4320 	bic.w	r3, r3, #2684354560	; 0xa0000000
 8009334:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8009338:	687a      	ldr	r2, [r7, #4]
 800933a:	6093      	str	r3, [r2, #8]
}
 800933c:	bf00      	nop
 800933e:	370c      	adds	r7, #12
 8009340:	46bd      	mov	sp, r7
 8009342:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009346:	4770      	bx	lr

08009348 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(ADC_TypeDef *ADCx)
{
 8009348:	b480      	push	{r7}
 800934a:	b083      	sub	sp, #12
 800934c:	af00      	add	r7, sp, #0
 800934e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8009350:	687b      	ldr	r3, [r7, #4]
 8009352:	689b      	ldr	r3, [r3, #8]
 8009354:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8009358:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800935c:	d101      	bne.n	8009362 <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 800935e:	2301      	movs	r3, #1
 8009360:	e000      	b.n	8009364 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 8009362:	2300      	movs	r3, #0
}
 8009364:	4618      	mov	r0, r3
 8009366:	370c      	adds	r7, #12
 8009368:	46bd      	mov	sp, r7
 800936a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800936e:	4770      	bx	lr

08009370 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8009370:	b480      	push	{r7}
 8009372:	b083      	sub	sp, #12
 8009374:	af00      	add	r7, sp, #0
 8009376:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8009378:	687b      	ldr	r3, [r7, #4]
 800937a:	689b      	ldr	r3, [r3, #8]
 800937c:	f023 4310 	bic.w	r3, r3, #2415919104	; 0x90000000
 8009380:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8009384:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8009388:	687b      	ldr	r3, [r7, #4]
 800938a:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 800938c:	bf00      	nop
 800938e:	370c      	adds	r7, #12
 8009390:	46bd      	mov	sp, r7
 8009392:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009396:	4770      	bx	lr

08009398 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
{
 8009398:	b480      	push	{r7}
 800939a:	b083      	sub	sp, #12
 800939c:	af00      	add	r7, sp, #0
 800939e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 80093a0:	687b      	ldr	r3, [r7, #4]
 80093a2:	689b      	ldr	r3, [r3, #8]
 80093a4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80093a8:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80093ac:	d101      	bne.n	80093b2 <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 80093ae:	2301      	movs	r3, #1
 80093b0:	e000      	b.n	80093b4 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 80093b2:	2300      	movs	r3, #0
}
 80093b4:	4618      	mov	r0, r3
 80093b6:	370c      	adds	r7, #12
 80093b8:	46bd      	mov	sp, r7
 80093ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80093be:	4770      	bx	lr

080093c0 <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 80093c0:	b480      	push	{r7}
 80093c2:	b083      	sub	sp, #12
 80093c4:	af00      	add	r7, sp, #0
 80093c6:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80093c8:	687b      	ldr	r3, [r7, #4]
 80093ca:	689b      	ldr	r3, [r3, #8]
 80093cc:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80093d0:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 80093d4:	f043 0201 	orr.w	r2, r3, #1
 80093d8:	687b      	ldr	r3, [r7, #4]
 80093da:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 80093dc:	bf00      	nop
 80093de:	370c      	adds	r7, #12
 80093e0:	46bd      	mov	sp, r7
 80093e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80093e6:	4770      	bx	lr

080093e8 <LL_ADC_Disable>:
  * @rmtoll CR       ADDIS          LL_ADC_Disable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Disable(ADC_TypeDef *ADCx)
{
 80093e8:	b480      	push	{r7}
 80093ea:	b083      	sub	sp, #12
 80093ec:	af00      	add	r7, sp, #0
 80093ee:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80093f0:	687b      	ldr	r3, [r7, #4]
 80093f2:	689b      	ldr	r3, [r3, #8]
 80093f4:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80093f8:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 80093fc:	f043 0202 	orr.w	r2, r3, #2
 8009400:	687b      	ldr	r3, [r7, #4]
 8009402:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADDIS);
}
 8009404:	bf00      	nop
 8009406:	370c      	adds	r7, #12
 8009408:	46bd      	mov	sp, r7
 800940a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800940e:	4770      	bx	lr

08009410 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
 8009410:	b480      	push	{r7}
 8009412:	b083      	sub	sp, #12
 8009414:	af00      	add	r7, sp, #0
 8009416:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8009418:	687b      	ldr	r3, [r7, #4]
 800941a:	689b      	ldr	r3, [r3, #8]
 800941c:	f003 0301 	and.w	r3, r3, #1
 8009420:	2b01      	cmp	r3, #1
 8009422:	d101      	bne.n	8009428 <LL_ADC_IsEnabled+0x18>
 8009424:	2301      	movs	r3, #1
 8009426:	e000      	b.n	800942a <LL_ADC_IsEnabled+0x1a>
 8009428:	2300      	movs	r3, #0
}
 800942a:	4618      	mov	r0, r3
 800942c:	370c      	adds	r7, #12
 800942e:	46bd      	mov	sp, r7
 8009430:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009434:	4770      	bx	lr

08009436 <LL_ADC_IsDisableOngoing>:
  * @rmtoll CR       ADDIS          LL_ADC_IsDisableOngoing
  * @param  ADCx ADC instance
  * @retval 0: no ADC disable command on going.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDisableOngoing(ADC_TypeDef *ADCx)
{
 8009436:	b480      	push	{r7}
 8009438:	b083      	sub	sp, #12
 800943a:	af00      	add	r7, sp, #0
 800943c:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADDIS) == (ADC_CR_ADDIS)) ? 1UL : 0UL);
 800943e:	687b      	ldr	r3, [r7, #4]
 8009440:	689b      	ldr	r3, [r3, #8]
 8009442:	f003 0302 	and.w	r3, r3, #2
 8009446:	2b02      	cmp	r3, #2
 8009448:	d101      	bne.n	800944e <LL_ADC_IsDisableOngoing+0x18>
 800944a:	2301      	movs	r3, #1
 800944c:	e000      	b.n	8009450 <LL_ADC_IsDisableOngoing+0x1a>
 800944e:	2300      	movs	r3, #0
}
 8009450:	4618      	mov	r0, r3
 8009452:	370c      	adds	r7, #12
 8009454:	46bd      	mov	sp, r7
 8009456:	f85d 7b04 	ldr.w	r7, [sp], #4
 800945a:	4770      	bx	lr

0800945c <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 800945c:	b480      	push	{r7}
 800945e:	b083      	sub	sp, #12
 8009460:	af00      	add	r7, sp, #0
 8009462:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8009464:	687b      	ldr	r3, [r7, #4]
 8009466:	689b      	ldr	r3, [r3, #8]
 8009468:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800946c:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8009470:	f043 0204 	orr.w	r2, r3, #4
 8009474:	687b      	ldr	r3, [r7, #4]
 8009476:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 8009478:	bf00      	nop
 800947a:	370c      	adds	r7, #12
 800947c:	46bd      	mov	sp, r7
 800947e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009482:	4770      	bx	lr

08009484 <LL_ADC_REG_StopConversion>:
  * @rmtoll CR       ADSTP          LL_ADC_REG_StopConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StopConversion(ADC_TypeDef *ADCx)
{
 8009484:	b480      	push	{r7}
 8009486:	b083      	sub	sp, #12
 8009488:	af00      	add	r7, sp, #0
 800948a:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 800948c:	687b      	ldr	r3, [r7, #4]
 800948e:	689b      	ldr	r3, [r3, #8]
 8009490:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8009494:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8009498:	f043 0210 	orr.w	r2, r3, #16
 800949c:	687b      	ldr	r3, [r7, #4]
 800949e:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTP);
}
 80094a0:	bf00      	nop
 80094a2:	370c      	adds	r7, #12
 80094a4:	46bd      	mov	sp, r7
 80094a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80094aa:	4770      	bx	lr

080094ac <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 80094ac:	b480      	push	{r7}
 80094ae:	b083      	sub	sp, #12
 80094b0:	af00      	add	r7, sp, #0
 80094b2:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 80094b4:	687b      	ldr	r3, [r7, #4]
 80094b6:	689b      	ldr	r3, [r3, #8]
 80094b8:	f003 0304 	and.w	r3, r3, #4
 80094bc:	2b04      	cmp	r3, #4
 80094be:	d101      	bne.n	80094c4 <LL_ADC_REG_IsConversionOngoing+0x18>
 80094c0:	2301      	movs	r3, #1
 80094c2:	e000      	b.n	80094c6 <LL_ADC_REG_IsConversionOngoing+0x1a>
 80094c4:	2300      	movs	r3, #0
}
 80094c6:	4618      	mov	r0, r3
 80094c8:	370c      	adds	r7, #12
 80094ca:	46bd      	mov	sp, r7
 80094cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80094d0:	4770      	bx	lr

080094d2 <LL_ADC_INJ_StopConversion>:
  * @rmtoll CR       JADSTP         LL_ADC_INJ_StopConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_INJ_StopConversion(ADC_TypeDef *ADCx)
{
 80094d2:	b480      	push	{r7}
 80094d4:	b083      	sub	sp, #12
 80094d6:	af00      	add	r7, sp, #0
 80094d8:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80094da:	687b      	ldr	r3, [r7, #4]
 80094dc:	689b      	ldr	r3, [r3, #8]
 80094de:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80094e2:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 80094e6:	f043 0220 	orr.w	r2, r3, #32
 80094ea:	687b      	ldr	r3, [r7, #4]
 80094ec:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_JADSTP);
}
 80094ee:	bf00      	nop
 80094f0:	370c      	adds	r7, #12
 80094f2:	46bd      	mov	sp, r7
 80094f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80094f8:	4770      	bx	lr

080094fa <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 80094fa:	b480      	push	{r7}
 80094fc:	b083      	sub	sp, #12
 80094fe:	af00      	add	r7, sp, #0
 8009500:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8009502:	687b      	ldr	r3, [r7, #4]
 8009504:	689b      	ldr	r3, [r3, #8]
 8009506:	f003 0308 	and.w	r3, r3, #8
 800950a:	2b08      	cmp	r3, #8
 800950c:	d101      	bne.n	8009512 <LL_ADC_INJ_IsConversionOngoing+0x18>
 800950e:	2301      	movs	r3, #1
 8009510:	e000      	b.n	8009514 <LL_ADC_INJ_IsConversionOngoing+0x1a>
 8009512:	2300      	movs	r3, #0
}
 8009514:	4618      	mov	r0, r3
 8009516:	370c      	adds	r7, #12
 8009518:	46bd      	mov	sp, r7
 800951a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800951e:	4770      	bx	lr

08009520 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8009520:	b590      	push	{r4, r7, lr}
 8009522:	b089      	sub	sp, #36	; 0x24
 8009524:	af00      	add	r7, sp, #0
 8009526:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8009528:	2300      	movs	r3, #0
 800952a:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpCFGR;
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 800952c:	2300      	movs	r3, #0
 800952e:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;

  /* Check ADC handle */
  if (hadc == NULL)
 8009530:	687b      	ldr	r3, [r7, #4]
 8009532:	2b00      	cmp	r3, #0
 8009534:	d101      	bne.n	800953a <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 8009536:	2301      	movs	r3, #1
 8009538:	e1ad      	b.n	8009896 <HAL_ADC_Init+0x376>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 800953a:	687b      	ldr	r3, [r7, #4]
 800953c:	695b      	ldr	r3, [r3, #20]
 800953e:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8009540:	687b      	ldr	r3, [r7, #4]
 8009542:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8009544:	2b00      	cmp	r3, #0
 8009546:	d109      	bne.n	800955c <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8009548:	6878      	ldr	r0, [r7, #4]
 800954a:	f7fd ffd1 	bl	80074f0 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 800954e:	687b      	ldr	r3, [r7, #4]
 8009550:	2200      	movs	r2, #0
 8009552:	661a      	str	r2, [r3, #96]	; 0x60

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8009554:	687b      	ldr	r3, [r7, #4]
 8009556:	2200      	movs	r2, #0
 8009558:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 800955c:	687b      	ldr	r3, [r7, #4]
 800955e:	681b      	ldr	r3, [r3, #0]
 8009560:	4618      	mov	r0, r3
 8009562:	f7ff fef1 	bl	8009348 <LL_ADC_IsDeepPowerDownEnabled>
 8009566:	4603      	mov	r3, r0
 8009568:	2b00      	cmp	r3, #0
 800956a:	d004      	beq.n	8009576 <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 800956c:	687b      	ldr	r3, [r7, #4]
 800956e:	681b      	ldr	r3, [r3, #0]
 8009570:	4618      	mov	r0, r3
 8009572:	f7ff fed7 	bl	8009324 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8009576:	687b      	ldr	r3, [r7, #4]
 8009578:	681b      	ldr	r3, [r3, #0]
 800957a:	4618      	mov	r0, r3
 800957c:	f7ff ff0c 	bl	8009398 <LL_ADC_IsInternalRegulatorEnabled>
 8009580:	4603      	mov	r3, r0
 8009582:	2b00      	cmp	r3, #0
 8009584:	d113      	bne.n	80095ae <HAL_ADC_Init+0x8e>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 8009586:	687b      	ldr	r3, [r7, #4]
 8009588:	681b      	ldr	r3, [r3, #0]
 800958a:	4618      	mov	r0, r3
 800958c:	f7ff fef0 	bl	8009370 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * (SystemCoreClock / (100000UL * 2UL)));
 8009590:	4b9e      	ldr	r3, [pc, #632]	; (800980c <HAL_ADC_Init+0x2ec>)
 8009592:	681b      	ldr	r3, [r3, #0]
 8009594:	099b      	lsrs	r3, r3, #6
 8009596:	4a9e      	ldr	r2, [pc, #632]	; (8009810 <HAL_ADC_Init+0x2f0>)
 8009598:	fba2 2303 	umull	r2, r3, r2, r3
 800959c:	099b      	lsrs	r3, r3, #6
 800959e:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 80095a0:	e002      	b.n	80095a8 <HAL_ADC_Init+0x88>
    {
      wait_loop_index--;
 80095a2:	68bb      	ldr	r3, [r7, #8]
 80095a4:	3b01      	subs	r3, #1
 80095a6:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 80095a8:	68bb      	ldr	r3, [r7, #8]
 80095aa:	2b00      	cmp	r3, #0
 80095ac:	d1f9      	bne.n	80095a2 <HAL_ADC_Init+0x82>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 80095ae:	687b      	ldr	r3, [r7, #4]
 80095b0:	681b      	ldr	r3, [r3, #0]
 80095b2:	4618      	mov	r0, r3
 80095b4:	f7ff fef0 	bl	8009398 <LL_ADC_IsInternalRegulatorEnabled>
 80095b8:	4603      	mov	r3, r0
 80095ba:	2b00      	cmp	r3, #0
 80095bc:	d10d      	bne.n	80095da <HAL_ADC_Init+0xba>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80095be:	687b      	ldr	r3, [r7, #4]
 80095c0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80095c2:	f043 0210 	orr.w	r2, r3, #16
 80095c6:	687b      	ldr	r3, [r7, #4]
 80095c8:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80095ca:	687b      	ldr	r3, [r7, #4]
 80095cc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80095ce:	f043 0201 	orr.w	r2, r3, #1
 80095d2:	687b      	ldr	r3, [r7, #4]
 80095d4:	661a      	str	r2, [r3, #96]	; 0x60

    tmp_hal_status = HAL_ERROR;
 80095d6:	2301      	movs	r3, #1
 80095d8:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80095da:	687b      	ldr	r3, [r7, #4]
 80095dc:	681b      	ldr	r3, [r3, #0]
 80095de:	4618      	mov	r0, r3
 80095e0:	f7ff ff64 	bl	80094ac <LL_ADC_REG_IsConversionOngoing>
 80095e4:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 80095e6:	687b      	ldr	r3, [r7, #4]
 80095e8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80095ea:	f003 0310 	and.w	r3, r3, #16
 80095ee:	2b00      	cmp	r3, #0
 80095f0:	f040 8148 	bne.w	8009884 <HAL_ADC_Init+0x364>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 80095f4:	697b      	ldr	r3, [r7, #20]
 80095f6:	2b00      	cmp	r3, #0
 80095f8:	f040 8144 	bne.w	8009884 <HAL_ADC_Init+0x364>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80095fc:	687b      	ldr	r3, [r7, #4]
 80095fe:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8009600:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 8009604:	f043 0202 	orr.w	r2, r3, #2
 8009608:	687b      	ldr	r3, [r7, #4]
 800960a:	65da      	str	r2, [r3, #92]	; 0x5c
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 800960c:	687b      	ldr	r3, [r7, #4]
 800960e:	681b      	ldr	r3, [r3, #0]
 8009610:	4618      	mov	r0, r3
 8009612:	f7ff fefd 	bl	8009410 <LL_ADC_IsEnabled>
 8009616:	4603      	mov	r3, r0
 8009618:	2b00      	cmp	r3, #0
 800961a:	d141      	bne.n	80096a0 <HAL_ADC_Init+0x180>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 800961c:	687b      	ldr	r3, [r7, #4]
 800961e:	681b      	ldr	r3, [r3, #0]
 8009620:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8009624:	d004      	beq.n	8009630 <HAL_ADC_Init+0x110>
 8009626:	687b      	ldr	r3, [r7, #4]
 8009628:	681b      	ldr	r3, [r3, #0]
 800962a:	4a7a      	ldr	r2, [pc, #488]	; (8009814 <HAL_ADC_Init+0x2f4>)
 800962c:	4293      	cmp	r3, r2
 800962e:	d10f      	bne.n	8009650 <HAL_ADC_Init+0x130>
 8009630:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
 8009634:	f7ff feec 	bl	8009410 <LL_ADC_IsEnabled>
 8009638:	4604      	mov	r4, r0
 800963a:	4876      	ldr	r0, [pc, #472]	; (8009814 <HAL_ADC_Init+0x2f4>)
 800963c:	f7ff fee8 	bl	8009410 <LL_ADC_IsEnabled>
 8009640:	4603      	mov	r3, r0
 8009642:	4323      	orrs	r3, r4
 8009644:	2b00      	cmp	r3, #0
 8009646:	bf0c      	ite	eq
 8009648:	2301      	moveq	r3, #1
 800964a:	2300      	movne	r3, #0
 800964c:	b2db      	uxtb	r3, r3
 800964e:	e012      	b.n	8009676 <HAL_ADC_Init+0x156>
 8009650:	4871      	ldr	r0, [pc, #452]	; (8009818 <HAL_ADC_Init+0x2f8>)
 8009652:	f7ff fedd 	bl	8009410 <LL_ADC_IsEnabled>
 8009656:	4604      	mov	r4, r0
 8009658:	4870      	ldr	r0, [pc, #448]	; (800981c <HAL_ADC_Init+0x2fc>)
 800965a:	f7ff fed9 	bl	8009410 <LL_ADC_IsEnabled>
 800965e:	4603      	mov	r3, r0
 8009660:	431c      	orrs	r4, r3
 8009662:	486f      	ldr	r0, [pc, #444]	; (8009820 <HAL_ADC_Init+0x300>)
 8009664:	f7ff fed4 	bl	8009410 <LL_ADC_IsEnabled>
 8009668:	4603      	mov	r3, r0
 800966a:	4323      	orrs	r3, r4
 800966c:	2b00      	cmp	r3, #0
 800966e:	bf0c      	ite	eq
 8009670:	2301      	moveq	r3, #1
 8009672:	2300      	movne	r3, #0
 8009674:	b2db      	uxtb	r3, r3
 8009676:	2b00      	cmp	r3, #0
 8009678:	d012      	beq.n	80096a0 <HAL_ADC_Init+0x180>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 800967a:	687b      	ldr	r3, [r7, #4]
 800967c:	681b      	ldr	r3, [r3, #0]
 800967e:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8009682:	d004      	beq.n	800968e <HAL_ADC_Init+0x16e>
 8009684:	687b      	ldr	r3, [r7, #4]
 8009686:	681b      	ldr	r3, [r3, #0]
 8009688:	4a62      	ldr	r2, [pc, #392]	; (8009814 <HAL_ADC_Init+0x2f4>)
 800968a:	4293      	cmp	r3, r2
 800968c:	d101      	bne.n	8009692 <HAL_ADC_Init+0x172>
 800968e:	4a65      	ldr	r2, [pc, #404]	; (8009824 <HAL_ADC_Init+0x304>)
 8009690:	e000      	b.n	8009694 <HAL_ADC_Init+0x174>
 8009692:	4a65      	ldr	r2, [pc, #404]	; (8009828 <HAL_ADC_Init+0x308>)
 8009694:	687b      	ldr	r3, [r7, #4]
 8009696:	685b      	ldr	r3, [r3, #4]
 8009698:	4619      	mov	r1, r3
 800969a:	4610      	mov	r0, r2
 800969c:	f7ff fce6 	bl	800906c <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 80096a0:	687b      	ldr	r3, [r7, #4]
 80096a2:	7f5b      	ldrb	r3, [r3, #29]
 80096a4:	035a      	lsls	r2, r3, #13
                hadc->Init.Overrun                                                     |
 80096a6:	687b      	ldr	r3, [r7, #4]
 80096a8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 80096aa:	431a      	orrs	r2, r3
                hadc->Init.DataAlign                                                   |
 80096ac:	687b      	ldr	r3, [r7, #4]
 80096ae:	68db      	ldr	r3, [r3, #12]
                hadc->Init.Overrun                                                     |
 80096b0:	431a      	orrs	r2, r3
                hadc->Init.Resolution                                                  |
 80096b2:	687b      	ldr	r3, [r7, #4]
 80096b4:	689b      	ldr	r3, [r3, #8]
                hadc->Init.DataAlign                                                   |
 80096b6:	431a      	orrs	r2, r3
                ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 80096b8:	687b      	ldr	r3, [r7, #4]
 80096ba:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80096be:	041b      	lsls	r3, r3, #16
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 80096c0:	4313      	orrs	r3, r2
 80096c2:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 80096c4:	687b      	ldr	r3, [r7, #4]
 80096c6:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80096ca:	2b01      	cmp	r3, #1
 80096cc:	d106      	bne.n	80096dc <HAL_ADC_Init+0x1bc>
    {
      tmpCFGR |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 80096ce:	687b      	ldr	r3, [r7, #4]
 80096d0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80096d2:	3b01      	subs	r3, #1
 80096d4:	045b      	lsls	r3, r3, #17
 80096d6:	69ba      	ldr	r2, [r7, #24]
 80096d8:	4313      	orrs	r3, r2
 80096da:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80096dc:	687b      	ldr	r3, [r7, #4]
 80096de:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80096e0:	2b00      	cmp	r3, #0
 80096e2:	d009      	beq.n	80096f8 <HAL_ADC_Init+0x1d8>
    {
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 80096e4:	687b      	ldr	r3, [r7, #4]
 80096e6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80096e8:	f403 7278 	and.w	r2, r3, #992	; 0x3e0
                  | hadc->Init.ExternalTrigConvEdge
 80096ec:	687b      	ldr	r3, [r7, #4]
 80096ee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80096f0:	4313      	orrs	r3, r2
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 80096f2:	69ba      	ldr	r2, [r7, #24]
 80096f4:	4313      	orrs	r3, r2
 80096f6:	61bb      	str	r3, [r7, #24]
                 );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
 80096f8:	687b      	ldr	r3, [r7, #4]
 80096fa:	681b      	ldr	r3, [r3, #0]
 80096fc:	68da      	ldr	r2, [r3, #12]
 80096fe:	4b4b      	ldr	r3, [pc, #300]	; (800982c <HAL_ADC_Init+0x30c>)
 8009700:	4013      	ands	r3, r2
 8009702:	687a      	ldr	r2, [r7, #4]
 8009704:	6812      	ldr	r2, [r2, #0]
 8009706:	69b9      	ldr	r1, [r7, #24]
 8009708:	430b      	orrs	r3, r1
 800970a:	60d3      	str	r3, [r2, #12]

    /* Configuration of sampling mode */
    MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_BULB | ADC_CFGR2_SMPTRIG, hadc->Init.SamplingMode);
 800970c:	687b      	ldr	r3, [r7, #4]
 800970e:	681b      	ldr	r3, [r3, #0]
 8009710:	691b      	ldr	r3, [r3, #16]
 8009712:	f023 6140 	bic.w	r1, r3, #201326592	; 0xc000000
 8009716:	687b      	ldr	r3, [r7, #4]
 8009718:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800971a:	687b      	ldr	r3, [r7, #4]
 800971c:	681b      	ldr	r3, [r3, #0]
 800971e:	430a      	orrs	r2, r1
 8009720:	611a      	str	r2, [r3, #16]
    /* conversion on going on regular and injected groups:                    */
    /*  - Gain Compensation               Init.GainCompensation               */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8009722:	687b      	ldr	r3, [r7, #4]
 8009724:	681b      	ldr	r3, [r3, #0]
 8009726:	4618      	mov	r0, r3
 8009728:	f7ff fec0 	bl	80094ac <LL_ADC_REG_IsConversionOngoing>
 800972c:	6138      	str	r0, [r7, #16]
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 800972e:	687b      	ldr	r3, [r7, #4]
 8009730:	681b      	ldr	r3, [r3, #0]
 8009732:	4618      	mov	r0, r3
 8009734:	f7ff fee1 	bl	80094fa <LL_ADC_INJ_IsConversionOngoing>
 8009738:	60f8      	str	r0, [r7, #12]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 800973a:	693b      	ldr	r3, [r7, #16]
 800973c:	2b00      	cmp	r3, #0
 800973e:	d17f      	bne.n	8009840 <HAL_ADC_Init+0x320>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8009740:	68fb      	ldr	r3, [r7, #12]
 8009742:	2b00      	cmp	r3, #0
 8009744:	d17c      	bne.n	8009840 <HAL_ADC_Init+0x320>
       )
    {
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
                 ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8009746:	687b      	ldr	r3, [r7, #4]
 8009748:	7f1b      	ldrb	r3, [r3, #28]
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 800974a:	039a      	lsls	r2, r3, #14
                 ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 800974c:	687b      	ldr	r3, [r7, #4]
 800974e:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8009752:	005b      	lsls	r3, r3, #1
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 8009754:	4313      	orrs	r3, r2
 8009756:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 8009758:	687b      	ldr	r3, [r7, #4]
 800975a:	681b      	ldr	r3, [r3, #0]
 800975c:	68db      	ldr	r3, [r3, #12]
 800975e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8009762:	f023 0302 	bic.w	r3, r3, #2
 8009766:	687a      	ldr	r2, [r7, #4]
 8009768:	6812      	ldr	r2, [r2, #0]
 800976a:	69b9      	ldr	r1, [r7, #24]
 800976c:	430b      	orrs	r3, r1
 800976e:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.GainCompensation != 0UL)
 8009770:	687b      	ldr	r3, [r7, #4]
 8009772:	691b      	ldr	r3, [r3, #16]
 8009774:	2b00      	cmp	r3, #0
 8009776:	d017      	beq.n	80097a8 <HAL_ADC_Init+0x288>
      {
        SET_BIT(hadc->Instance->CFGR2, ADC_CFGR2_GCOMP);
 8009778:	687b      	ldr	r3, [r7, #4]
 800977a:	681b      	ldr	r3, [r3, #0]
 800977c:	691a      	ldr	r2, [r3, #16]
 800977e:	687b      	ldr	r3, [r7, #4]
 8009780:	681b      	ldr	r3, [r3, #0]
 8009782:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 8009786:	611a      	str	r2, [r3, #16]
        MODIFY_REG(hadc->Instance->GCOMP, ADC_GCOMP_GCOMPCOEFF, hadc->Init.GainCompensation);
 8009788:	687b      	ldr	r3, [r7, #4]
 800978a:	681b      	ldr	r3, [r3, #0]
 800978c:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 8009790:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 8009794:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8009798:	687a      	ldr	r2, [r7, #4]
 800979a:	6911      	ldr	r1, [r2, #16]
 800979c:	687a      	ldr	r2, [r7, #4]
 800979e:	6812      	ldr	r2, [r2, #0]
 80097a0:	430b      	orrs	r3, r1
 80097a2:	f8c2 30c0 	str.w	r3, [r2, #192]	; 0xc0
 80097a6:	e013      	b.n	80097d0 <HAL_ADC_Init+0x2b0>
      }
      else
      {
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_GCOMP);
 80097a8:	687b      	ldr	r3, [r7, #4]
 80097aa:	681b      	ldr	r3, [r3, #0]
 80097ac:	691a      	ldr	r2, [r3, #16]
 80097ae:	687b      	ldr	r3, [r7, #4]
 80097b0:	681b      	ldr	r3, [r3, #0]
 80097b2:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 80097b6:	611a      	str	r2, [r3, #16]
        MODIFY_REG(hadc->Instance->GCOMP, ADC_GCOMP_GCOMPCOEFF, 0UL);
 80097b8:	687b      	ldr	r3, [r7, #4]
 80097ba:	681b      	ldr	r3, [r3, #0]
 80097bc:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 80097c0:	687a      	ldr	r2, [r7, #4]
 80097c2:	6812      	ldr	r2, [r2, #0]
 80097c4:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 80097c8:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 80097cc:	f8c2 30c0 	str.w	r3, [r2, #192]	; 0xc0
      }

      if (hadc->Init.OversamplingMode == ENABLE)
 80097d0:	687b      	ldr	r3, [r7, #4]
 80097d2:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80097d6:	2b01      	cmp	r3, #1
 80097d8:	d12a      	bne.n	8009830 <HAL_ADC_Init+0x310>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 80097da:	687b      	ldr	r3, [r7, #4]
 80097dc:	681b      	ldr	r3, [r3, #0]
 80097de:	691b      	ldr	r3, [r3, #16]
 80097e0:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 80097e4:	f023 0304 	bic.w	r3, r3, #4
 80097e8:	687a      	ldr	r2, [r7, #4]
 80097ea:	6c51      	ldr	r1, [r2, #68]	; 0x44
 80097ec:	687a      	ldr	r2, [r7, #4]
 80097ee:	6c92      	ldr	r2, [r2, #72]	; 0x48
 80097f0:	4311      	orrs	r1, r2
 80097f2:	687a      	ldr	r2, [r7, #4]
 80097f4:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 80097f6:	4311      	orrs	r1, r2
 80097f8:	687a      	ldr	r2, [r7, #4]
 80097fa:	6d12      	ldr	r2, [r2, #80]	; 0x50
 80097fc:	430a      	orrs	r2, r1
 80097fe:	431a      	orrs	r2, r3
 8009800:	687b      	ldr	r3, [r7, #4]
 8009802:	681b      	ldr	r3, [r3, #0]
 8009804:	f042 0201 	orr.w	r2, r2, #1
 8009808:	611a      	str	r2, [r3, #16]
 800980a:	e019      	b.n	8009840 <HAL_ADC_Init+0x320>
 800980c:	20000eb0 	.word	0x20000eb0
 8009810:	053e2d63 	.word	0x053e2d63
 8009814:	50000100 	.word	0x50000100
 8009818:	50000400 	.word	0x50000400
 800981c:	50000500 	.word	0x50000500
 8009820:	50000600 	.word	0x50000600
 8009824:	50000300 	.word	0x50000300
 8009828:	50000700 	.word	0x50000700
 800982c:	fff04007 	.word	0xfff04007
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 8009830:	687b      	ldr	r3, [r7, #4]
 8009832:	681b      	ldr	r3, [r3, #0]
 8009834:	691a      	ldr	r2, [r3, #16]
 8009836:	687b      	ldr	r3, [r7, #4]
 8009838:	681b      	ldr	r3, [r3, #0]
 800983a:	f022 0201 	bic.w	r2, r2, #1
 800983e:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8009840:	687b      	ldr	r3, [r7, #4]
 8009842:	695b      	ldr	r3, [r3, #20]
 8009844:	2b01      	cmp	r3, #1
 8009846:	d10c      	bne.n	8009862 <HAL_ADC_Init+0x342>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 8009848:	687b      	ldr	r3, [r7, #4]
 800984a:	681b      	ldr	r3, [r3, #0]
 800984c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800984e:	f023 010f 	bic.w	r1, r3, #15
 8009852:	687b      	ldr	r3, [r7, #4]
 8009854:	6a1b      	ldr	r3, [r3, #32]
 8009856:	1e5a      	subs	r2, r3, #1
 8009858:	687b      	ldr	r3, [r7, #4]
 800985a:	681b      	ldr	r3, [r3, #0]
 800985c:	430a      	orrs	r2, r1
 800985e:	631a      	str	r2, [r3, #48]	; 0x30
 8009860:	e007      	b.n	8009872 <HAL_ADC_Init+0x352>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8009862:	687b      	ldr	r3, [r7, #4]
 8009864:	681b      	ldr	r3, [r3, #0]
 8009866:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8009868:	687b      	ldr	r3, [r7, #4]
 800986a:	681b      	ldr	r3, [r3, #0]
 800986c:	f022 020f 	bic.w	r2, r2, #15
 8009870:	631a      	str	r2, [r3, #48]	; 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 8009872:	687b      	ldr	r3, [r7, #4]
 8009874:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8009876:	f023 0303 	bic.w	r3, r3, #3
 800987a:	f043 0201 	orr.w	r2, r3, #1
 800987e:	687b      	ldr	r3, [r7, #4]
 8009880:	65da      	str	r2, [r3, #92]	; 0x5c
 8009882:	e007      	b.n	8009894 <HAL_ADC_Init+0x374>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8009884:	687b      	ldr	r3, [r7, #4]
 8009886:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8009888:	f043 0210 	orr.w	r2, r3, #16
 800988c:	687b      	ldr	r3, [r7, #4]
 800988e:	65da      	str	r2, [r3, #92]	; 0x5c

    tmp_hal_status = HAL_ERROR;
 8009890:	2301      	movs	r3, #1
 8009892:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 8009894:	7ffb      	ldrb	r3, [r7, #31]
}
 8009896:	4618      	mov	r0, r3
 8009898:	3724      	adds	r7, #36	; 0x24
 800989a:	46bd      	mov	sp, r7
 800989c:	bd90      	pop	{r4, r7, pc}
 800989e:	bf00      	nop

080098a0 <HAL_ADC_Start_DMA>:
  * @param pData Destination Buffer address.
  * @param Length Number of data to be transferred from ADC peripheral to memory
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef *hadc, uint32_t *pData, uint32_t Length)
{
 80098a0:	b580      	push	{r7, lr}
 80098a2:	b086      	sub	sp, #24
 80098a4:	af00      	add	r7, sp, #0
 80098a6:	60f8      	str	r0, [r7, #12]
 80098a8:	60b9      	str	r1, [r7, #8]
 80098aa:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
#if defined(ADC_MULTIMODE_SUPPORT)
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 80098ac:	68fb      	ldr	r3, [r7, #12]
 80098ae:	681b      	ldr	r3, [r3, #0]
 80098b0:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80098b4:	d004      	beq.n	80098c0 <HAL_ADC_Start_DMA+0x20>
 80098b6:	68fb      	ldr	r3, [r7, #12]
 80098b8:	681b      	ldr	r3, [r3, #0]
 80098ba:	4a58      	ldr	r2, [pc, #352]	; (8009a1c <HAL_ADC_Start_DMA+0x17c>)
 80098bc:	4293      	cmp	r3, r2
 80098be:	d101      	bne.n	80098c4 <HAL_ADC_Start_DMA+0x24>
 80098c0:	4b57      	ldr	r3, [pc, #348]	; (8009a20 <HAL_ADC_Start_DMA+0x180>)
 80098c2:	e000      	b.n	80098c6 <HAL_ADC_Start_DMA+0x26>
 80098c4:	4b57      	ldr	r3, [pc, #348]	; (8009a24 <HAL_ADC_Start_DMA+0x184>)
 80098c6:	4618      	mov	r0, r3
 80098c8:	f7ff fd1e 	bl	8009308 <LL_ADC_GetMultimode>
 80098cc:	6138      	str	r0, [r7, #16]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80098ce:	68fb      	ldr	r3, [r7, #12]
 80098d0:	681b      	ldr	r3, [r3, #0]
 80098d2:	4618      	mov	r0, r3
 80098d4:	f7ff fdea 	bl	80094ac <LL_ADC_REG_IsConversionOngoing>
 80098d8:	4603      	mov	r3, r0
 80098da:	2b00      	cmp	r3, #0
 80098dc:	f040 8096 	bne.w	8009a0c <HAL_ADC_Start_DMA+0x16c>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 80098e0:	68fb      	ldr	r3, [r7, #12]
 80098e2:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 80098e6:	2b01      	cmp	r3, #1
 80098e8:	d101      	bne.n	80098ee <HAL_ADC_Start_DMA+0x4e>
 80098ea:	2302      	movs	r3, #2
 80098ec:	e091      	b.n	8009a12 <HAL_ADC_Start_DMA+0x172>
 80098ee:	68fb      	ldr	r3, [r7, #12]
 80098f0:	2201      	movs	r2, #1
 80098f2:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

#if defined(ADC_MULTIMODE_SUPPORT)
    /* Ensure that multimode regular conversions are not enabled.   */
    /* Otherwise, dedicated API HAL_ADCEx_MultiModeStart_DMA() must be used.  */
    if ((tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 80098f6:	693b      	ldr	r3, [r7, #16]
 80098f8:	2b00      	cmp	r3, #0
 80098fa:	d005      	beq.n	8009908 <HAL_ADC_Start_DMA+0x68>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 80098fc:	693b      	ldr	r3, [r7, #16]
 80098fe:	2b05      	cmp	r3, #5
 8009900:	d002      	beq.n	8009908 <HAL_ADC_Start_DMA+0x68>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 8009902:	693b      	ldr	r3, [r7, #16]
 8009904:	2b09      	cmp	r3, #9
 8009906:	d17a      	bne.n	80099fe <HAL_ADC_Start_DMA+0x15e>
       )
#endif
    {
      /* Enable the ADC peripheral */
      tmp_hal_status = ADC_Enable(hadc);
 8009908:	68f8      	ldr	r0, [r7, #12]
 800990a:	f000 fd71 	bl	800a3f0 <ADC_Enable>
 800990e:	4603      	mov	r3, r0
 8009910:	75fb      	strb	r3, [r7, #23]

      /* Start conversion if ADC is effectively enabled */
      if (tmp_hal_status == HAL_OK)
 8009912:	7dfb      	ldrb	r3, [r7, #23]
 8009914:	2b00      	cmp	r3, #0
 8009916:	d16d      	bne.n	80099f4 <HAL_ADC_Start_DMA+0x154>
      {
        /* Set ADC state                                                        */
        /* - Clear state bitfield related to regular group conversion results   */
        /* - Set state bitfield related to regular operation                    */
        ADC_STATE_CLR_SET(hadc->State,
 8009918:	68fb      	ldr	r3, [r7, #12]
 800991a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800991c:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8009920:	f023 0301 	bic.w	r3, r3, #1
 8009924:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8009928:	68fb      	ldr	r3, [r7, #12]
 800992a:	65da      	str	r2, [r3, #92]	; 0x5c

#if defined(ADC_MULTIMODE_SUPPORT)
        /* Reset HAL_ADC_STATE_MULTIMODE_SLAVE bit
          - if ADC instance is master or if multimode feature is not available
          - if multimode setting is disabled (ADC instance slave in independent mode) */
        if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 800992c:	68fb      	ldr	r3, [r7, #12]
 800992e:	681b      	ldr	r3, [r3, #0]
 8009930:	4a3a      	ldr	r2, [pc, #232]	; (8009a1c <HAL_ADC_Start_DMA+0x17c>)
 8009932:	4293      	cmp	r3, r2
 8009934:	d009      	beq.n	800994a <HAL_ADC_Start_DMA+0xaa>
 8009936:	68fb      	ldr	r3, [r7, #12]
 8009938:	681b      	ldr	r3, [r3, #0]
 800993a:	4a3b      	ldr	r2, [pc, #236]	; (8009a28 <HAL_ADC_Start_DMA+0x188>)
 800993c:	4293      	cmp	r3, r2
 800993e:	d002      	beq.n	8009946 <HAL_ADC_Start_DMA+0xa6>
 8009940:	68fb      	ldr	r3, [r7, #12]
 8009942:	681b      	ldr	r3, [r3, #0]
 8009944:	e003      	b.n	800994e <HAL_ADC_Start_DMA+0xae>
 8009946:	4b39      	ldr	r3, [pc, #228]	; (8009a2c <HAL_ADC_Start_DMA+0x18c>)
 8009948:	e001      	b.n	800994e <HAL_ADC_Start_DMA+0xae>
 800994a:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 800994e:	68fa      	ldr	r2, [r7, #12]
 8009950:	6812      	ldr	r2, [r2, #0]
 8009952:	4293      	cmp	r3, r2
 8009954:	d002      	beq.n	800995c <HAL_ADC_Start_DMA+0xbc>
            || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8009956:	693b      	ldr	r3, [r7, #16]
 8009958:	2b00      	cmp	r3, #0
 800995a:	d105      	bne.n	8009968 <HAL_ADC_Start_DMA+0xc8>
           )
        {
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 800995c:	68fb      	ldr	r3, [r7, #12]
 800995e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8009960:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8009964:	68fb      	ldr	r3, [r7, #12]
 8009966:	65da      	str	r2, [r3, #92]	; 0x5c
        }
#endif

        /* Check if a conversion is on going on ADC group injected */
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) != 0UL)
 8009968:	68fb      	ldr	r3, [r7, #12]
 800996a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800996c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8009970:	2b00      	cmp	r3, #0
 8009972:	d006      	beq.n	8009982 <HAL_ADC_Start_DMA+0xe2>
        {
          /* Reset ADC error code fields related to regular conversions only */
          CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 8009974:	68fb      	ldr	r3, [r7, #12]
 8009976:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8009978:	f023 0206 	bic.w	r2, r3, #6
 800997c:	68fb      	ldr	r3, [r7, #12]
 800997e:	661a      	str	r2, [r3, #96]	; 0x60
 8009980:	e002      	b.n	8009988 <HAL_ADC_Start_DMA+0xe8>
        }
        else
        {
          /* Reset all ADC error code fields */
          ADC_CLEAR_ERRORCODE(hadc);
 8009982:	68fb      	ldr	r3, [r7, #12]
 8009984:	2200      	movs	r2, #0
 8009986:	661a      	str	r2, [r3, #96]	; 0x60
        }

        /* Set the DMA transfer complete callback */
        hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8009988:	68fb      	ldr	r3, [r7, #12]
 800998a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800998c:	4a28      	ldr	r2, [pc, #160]	; (8009a30 <HAL_ADC_Start_DMA+0x190>)
 800998e:	62da      	str	r2, [r3, #44]	; 0x2c

        /* Set the DMA half transfer complete callback */
        hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8009990:	68fb      	ldr	r3, [r7, #12]
 8009992:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009994:	4a27      	ldr	r2, [pc, #156]	; (8009a34 <HAL_ADC_Start_DMA+0x194>)
 8009996:	631a      	str	r2, [r3, #48]	; 0x30

        /* Set the DMA error callback */
        hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8009998:	68fb      	ldr	r3, [r7, #12]
 800999a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800999c:	4a26      	ldr	r2, [pc, #152]	; (8009a38 <HAL_ADC_Start_DMA+0x198>)
 800999e:	635a      	str	r2, [r3, #52]	; 0x34
        /* ADC start (in case of SW start):                                   */

        /* Clear regular group conversion flag and overrun flag               */
        /* (To ensure of no unknown state from potential previous ADC         */
        /* operations)                                                        */
        __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 80099a0:	68fb      	ldr	r3, [r7, #12]
 80099a2:	681b      	ldr	r3, [r3, #0]
 80099a4:	221c      	movs	r2, #28
 80099a6:	601a      	str	r2, [r3, #0]

        /* Process unlocked */
        /* Unlock before starting ADC conversions: in case of potential         */
        /* interruption, to let the process to ADC IRQ Handler.                 */
        __HAL_UNLOCK(hadc);
 80099a8:	68fb      	ldr	r3, [r7, #12]
 80099aa:	2200      	movs	r2, #0
 80099ac:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

        /* With DMA, overrun event is always considered as an error even if
           hadc->Init.Overrun is set to ADC_OVR_DATA_OVERWRITTEN. Therefore,
           ADC_IT_OVR is enabled. */
        __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 80099b0:	68fb      	ldr	r3, [r7, #12]
 80099b2:	681b      	ldr	r3, [r3, #0]
 80099b4:	685a      	ldr	r2, [r3, #4]
 80099b6:	68fb      	ldr	r3, [r7, #12]
 80099b8:	681b      	ldr	r3, [r3, #0]
 80099ba:	f042 0210 	orr.w	r2, r2, #16
 80099be:	605a      	str	r2, [r3, #4]

        /* Enable ADC DMA mode */
        SET_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN);
 80099c0:	68fb      	ldr	r3, [r7, #12]
 80099c2:	681b      	ldr	r3, [r3, #0]
 80099c4:	68da      	ldr	r2, [r3, #12]
 80099c6:	68fb      	ldr	r3, [r7, #12]
 80099c8:	681b      	ldr	r3, [r3, #0]
 80099ca:	f042 0201 	orr.w	r2, r2, #1
 80099ce:	60da      	str	r2, [r3, #12]

        /* Start the DMA channel */
        tmp_hal_status = HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 80099d0:	68fb      	ldr	r3, [r7, #12]
 80099d2:	6d58      	ldr	r0, [r3, #84]	; 0x54
 80099d4:	68fb      	ldr	r3, [r7, #12]
 80099d6:	681b      	ldr	r3, [r3, #0]
 80099d8:	3340      	adds	r3, #64	; 0x40
 80099da:	4619      	mov	r1, r3
 80099dc:	68ba      	ldr	r2, [r7, #8]
 80099de:	687b      	ldr	r3, [r7, #4]
 80099e0:	f002 f942 	bl	800bc68 <HAL_DMA_Start_IT>
 80099e4:	4603      	mov	r3, r0
 80099e6:	75fb      	strb	r3, [r7, #23]
        /* Enable conversion of regular group.                                  */
        /* If software start has been selected, conversion starts immediately.  */
        /* If external trigger has been selected, conversion will start at next */
        /* trigger event.                                                       */
        /* Start ADC group regular conversion */
        LL_ADC_REG_StartConversion(hadc->Instance);
 80099e8:	68fb      	ldr	r3, [r7, #12]
 80099ea:	681b      	ldr	r3, [r3, #0]
 80099ec:	4618      	mov	r0, r3
 80099ee:	f7ff fd35 	bl	800945c <LL_ADC_REG_StartConversion>
      if (tmp_hal_status == HAL_OK)
 80099f2:	e00d      	b.n	8009a10 <HAL_ADC_Start_DMA+0x170>
      }
      else
      {
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 80099f4:	68fb      	ldr	r3, [r7, #12]
 80099f6:	2200      	movs	r2, #0
 80099f8:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
      if (tmp_hal_status == HAL_OK)
 80099fc:	e008      	b.n	8009a10 <HAL_ADC_Start_DMA+0x170>

    }
#if defined(ADC_MULTIMODE_SUPPORT)
    else
    {
      tmp_hal_status = HAL_ERROR;
 80099fe:	2301      	movs	r3, #1
 8009a00:	75fb      	strb	r3, [r7, #23]
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 8009a02:	68fb      	ldr	r3, [r7, #12]
 8009a04:	2200      	movs	r2, #0
 8009a06:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
 8009a0a:	e001      	b.n	8009a10 <HAL_ADC_Start_DMA+0x170>
    }
#endif
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 8009a0c:	2302      	movs	r3, #2
 8009a0e:	75fb      	strb	r3, [r7, #23]
  }

  /* Return function status */
  return tmp_hal_status;
 8009a10:	7dfb      	ldrb	r3, [r7, #23]
}
 8009a12:	4618      	mov	r0, r3
 8009a14:	3718      	adds	r7, #24
 8009a16:	46bd      	mov	sp, r7
 8009a18:	bd80      	pop	{r7, pc}
 8009a1a:	bf00      	nop
 8009a1c:	50000100 	.word	0x50000100
 8009a20:	50000300 	.word	0x50000300
 8009a24:	50000700 	.word	0x50000700
 8009a28:	50000500 	.word	0x50000500
 8009a2c:	50000400 	.word	0x50000400
 8009a30:	0800a555 	.word	0x0800a555
 8009a34:	0800a62d 	.word	0x0800a62d
 8009a38:	0800a649 	.word	0x0800a649

08009a3c <HAL_ADC_Stop_DMA>:
  *         For multimode, the dedicated HAL_ADCEx_MultiModeStop_DMA() API must be used.
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Stop_DMA(ADC_HandleTypeDef *hadc)
{
 8009a3c:	b580      	push	{r7, lr}
 8009a3e:	b084      	sub	sp, #16
 8009a40:	af00      	add	r7, sp, #0
 8009a42:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Process locked */
  __HAL_LOCK(hadc);
 8009a44:	687b      	ldr	r3, [r7, #4]
 8009a46:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 8009a4a:	2b01      	cmp	r3, #1
 8009a4c:	d101      	bne.n	8009a52 <HAL_ADC_Stop_DMA+0x16>
 8009a4e:	2302      	movs	r3, #2
 8009a50:	e051      	b.n	8009af6 <HAL_ADC_Stop_DMA+0xba>
 8009a52:	687b      	ldr	r3, [r7, #4]
 8009a54:	2201      	movs	r2, #1
 8009a56:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

  /* 1. Stop potential ADC group regular conversion on going */
  tmp_hal_status = ADC_ConversionStop(hadc, ADC_REGULAR_INJECTED_GROUP);
 8009a5a:	2103      	movs	r1, #3
 8009a5c:	6878      	ldr	r0, [r7, #4]
 8009a5e:	f000 fc13 	bl	800a288 <ADC_ConversionStop>
 8009a62:	4603      	mov	r3, r0
 8009a64:	73fb      	strb	r3, [r7, #15]

  /* Disable ADC peripheral if conversions are effectively stopped */
  if (tmp_hal_status == HAL_OK)
 8009a66:	7bfb      	ldrb	r3, [r7, #15]
 8009a68:	2b00      	cmp	r3, #0
 8009a6a:	d13f      	bne.n	8009aec <HAL_ADC_Stop_DMA+0xb0>
  {
    /* Disable ADC DMA (ADC DMA configuration of continous requests is kept) */
    CLEAR_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN);
 8009a6c:	687b      	ldr	r3, [r7, #4]
 8009a6e:	681b      	ldr	r3, [r3, #0]
 8009a70:	68da      	ldr	r2, [r3, #12]
 8009a72:	687b      	ldr	r3, [r7, #4]
 8009a74:	681b      	ldr	r3, [r3, #0]
 8009a76:	f022 0201 	bic.w	r2, r2, #1
 8009a7a:	60da      	str	r2, [r3, #12]

    /* Disable the DMA channel (in case of DMA in circular mode or stop       */
    /* while DMA transfer is on going)                                        */
    if (hadc->DMA_Handle->State == HAL_DMA_STATE_BUSY)
 8009a7c:	687b      	ldr	r3, [r7, #4]
 8009a7e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009a80:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8009a84:	b2db      	uxtb	r3, r3
 8009a86:	2b02      	cmp	r3, #2
 8009a88:	d10f      	bne.n	8009aaa <HAL_ADC_Stop_DMA+0x6e>
    {
      tmp_hal_status = HAL_DMA_Abort(hadc->DMA_Handle);
 8009a8a:	687b      	ldr	r3, [r7, #4]
 8009a8c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009a8e:	4618      	mov	r0, r3
 8009a90:	f002 f965 	bl	800bd5e <HAL_DMA_Abort>
 8009a94:	4603      	mov	r3, r0
 8009a96:	73fb      	strb	r3, [r7, #15]

      /* Check if DMA channel effectively disabled */
      if (tmp_hal_status != HAL_OK)
 8009a98:	7bfb      	ldrb	r3, [r7, #15]
 8009a9a:	2b00      	cmp	r3, #0
 8009a9c:	d005      	beq.n	8009aaa <HAL_ADC_Stop_DMA+0x6e>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 8009a9e:	687b      	ldr	r3, [r7, #4]
 8009aa0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8009aa2:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8009aa6:	687b      	ldr	r3, [r7, #4]
 8009aa8:	65da      	str	r2, [r3, #92]	; 0x5c
      }
    }

    /* Disable ADC overrun interrupt */
    __HAL_ADC_DISABLE_IT(hadc, ADC_IT_OVR);
 8009aaa:	687b      	ldr	r3, [r7, #4]
 8009aac:	681b      	ldr	r3, [r3, #0]
 8009aae:	685a      	ldr	r2, [r3, #4]
 8009ab0:	687b      	ldr	r3, [r7, #4]
 8009ab2:	681b      	ldr	r3, [r3, #0]
 8009ab4:	f022 0210 	bic.w	r2, r2, #16
 8009ab8:	605a      	str	r2, [r3, #4]

    /* 2. Disable the ADC peripheral */
    /* Update "tmp_hal_status" only if DMA channel disabling passed,          */
    /* to keep in memory a potential failing status.                          */
    if (tmp_hal_status == HAL_OK)
 8009aba:	7bfb      	ldrb	r3, [r7, #15]
 8009abc:	2b00      	cmp	r3, #0
 8009abe:	d105      	bne.n	8009acc <HAL_ADC_Stop_DMA+0x90>
    {
      tmp_hal_status = ADC_Disable(hadc);
 8009ac0:	6878      	ldr	r0, [r7, #4]
 8009ac2:	f000 fcef 	bl	800a4a4 <ADC_Disable>
 8009ac6:	4603      	mov	r3, r0
 8009ac8:	73fb      	strb	r3, [r7, #15]
 8009aca:	e002      	b.n	8009ad2 <HAL_ADC_Stop_DMA+0x96>
    }
    else
    {
      (void)ADC_Disable(hadc);
 8009acc:	6878      	ldr	r0, [r7, #4]
 8009ace:	f000 fce9 	bl	800a4a4 <ADC_Disable>
    }

    /* Check if ADC is effectively disabled */
    if (tmp_hal_status == HAL_OK)
 8009ad2:	7bfb      	ldrb	r3, [r7, #15]
 8009ad4:	2b00      	cmp	r3, #0
 8009ad6:	d109      	bne.n	8009aec <HAL_ADC_Stop_DMA+0xb0>
    {
      /* Set ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 8009ad8:	687b      	ldr	r3, [r7, #4]
 8009ada:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8009adc:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8009ae0:	f023 0301 	bic.w	r3, r3, #1
 8009ae4:	f043 0201 	orr.w	r2, r3, #1
 8009ae8:	687b      	ldr	r3, [r7, #4]
 8009aea:	65da      	str	r2, [r3, #92]	; 0x5c
    }

  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8009aec:	687b      	ldr	r3, [r7, #4]
 8009aee:	2200      	movs	r2, #0
 8009af0:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

  /* Return function status */
  return tmp_hal_status;
 8009af4:	7bfb      	ldrb	r3, [r7, #15]
}
 8009af6:	4618      	mov	r0, r3
 8009af8:	3710      	adds	r7, #16
 8009afa:	46bd      	mov	sp, r7
 8009afc:	bd80      	pop	{r7, pc}

08009afe <HAL_ADC_ConvHalfCpltCallback>:
  * @brief  Conversion DMA half-transfer callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef *hadc)
{
 8009afe:	b480      	push	{r7}
 8009b00:	b083      	sub	sp, #12
 8009b02:	af00      	add	r7, sp, #0
 8009b04:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvHalfCpltCallback must be implemented in the user file.
  */
}
 8009b06:	bf00      	nop
 8009b08:	370c      	adds	r7, #12
 8009b0a:	46bd      	mov	sp, r7
 8009b0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b10:	4770      	bx	lr

08009b12 <HAL_ADC_ErrorCallback>:
  *           (this function is also clearing overrun flag)
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8009b12:	b480      	push	{r7}
 8009b14:	b083      	sub	sp, #12
 8009b16:	af00      	add	r7, sp, #0
 8009b18:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 8009b1a:	bf00      	nop
 8009b1c:	370c      	adds	r7, #12
 8009b1e:	46bd      	mov	sp, r7
 8009b20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b24:	4770      	bx	lr
	...

08009b28 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 8009b28:	b580      	push	{r7, lr}
 8009b2a:	b0a6      	sub	sp, #152	; 0x98
 8009b2c:	af00      	add	r7, sp, #0
 8009b2e:	6078      	str	r0, [r7, #4]
 8009b30:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8009b32:	2300      	movs	r3, #0
 8009b34:	f887 3097 	strb.w	r3, [r7, #151]	; 0x97
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0;
 8009b38:	2300      	movs	r3, #0
 8009b3a:	60bb      	str	r3, [r7, #8]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, sConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8009b3c:	687b      	ldr	r3, [r7, #4]
 8009b3e:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 8009b42:	2b01      	cmp	r3, #1
 8009b44:	d101      	bne.n	8009b4a <HAL_ADC_ConfigChannel+0x22>
 8009b46:	2302      	movs	r3, #2
 8009b48:	e38e      	b.n	800a268 <HAL_ADC_ConfigChannel+0x740>
 8009b4a:	687b      	ldr	r3, [r7, #4]
 8009b4c:	2201      	movs	r2, #1
 8009b4e:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8009b52:	687b      	ldr	r3, [r7, #4]
 8009b54:	681b      	ldr	r3, [r3, #0]
 8009b56:	4618      	mov	r0, r3
 8009b58:	f7ff fca8 	bl	80094ac <LL_ADC_REG_IsConversionOngoing>
 8009b5c:	4603      	mov	r3, r0
 8009b5e:	2b00      	cmp	r3, #0
 8009b60:	f040 836f 	bne.w	800a242 <HAL_ADC_ConfigChannel+0x71a>
  {
    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, sConfig->Rank, sConfig->Channel);
 8009b64:	687b      	ldr	r3, [r7, #4]
 8009b66:	6818      	ldr	r0, [r3, #0]
 8009b68:	683b      	ldr	r3, [r7, #0]
 8009b6a:	6859      	ldr	r1, [r3, #4]
 8009b6c:	683b      	ldr	r3, [r7, #0]
 8009b6e:	681b      	ldr	r3, [r3, #0]
 8009b70:	461a      	mov	r2, r3
 8009b72:	f7ff fb53 	bl	800921c <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8009b76:	687b      	ldr	r3, [r7, #4]
 8009b78:	681b      	ldr	r3, [r3, #0]
 8009b7a:	4618      	mov	r0, r3
 8009b7c:	f7ff fc96 	bl	80094ac <LL_ADC_REG_IsConversionOngoing>
 8009b80:	f8c7 0090 	str.w	r0, [r7, #144]	; 0x90
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8009b84:	687b      	ldr	r3, [r7, #4]
 8009b86:	681b      	ldr	r3, [r3, #0]
 8009b88:	4618      	mov	r0, r3
 8009b8a:	f7ff fcb6 	bl	80094fa <LL_ADC_INJ_IsConversionOngoing>
 8009b8e:	f8c7 008c 	str.w	r0, [r7, #140]	; 0x8c
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8009b92:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8009b96:	2b00      	cmp	r3, #0
 8009b98:	f040 817b 	bne.w	8009e92 <HAL_ADC_ConfigChannel+0x36a>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8009b9c:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8009ba0:	2b00      	cmp	r3, #0
 8009ba2:	f040 8176 	bne.w	8009e92 <HAL_ADC_ConfigChannel+0x36a>
       )
    {
      /* Manage specific case of sampling time 3.5 cycles replacing 2.5 cyles */
      if (sConfig->SamplingTime == ADC_SAMPLETIME_3CYCLES_5)
 8009ba6:	683b      	ldr	r3, [r7, #0]
 8009ba8:	689b      	ldr	r3, [r3, #8]
 8009baa:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8009bae:	d10f      	bne.n	8009bd0 <HAL_ADC_ConfigChannel+0xa8>
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, LL_ADC_SAMPLINGTIME_2CYCLES_5);
 8009bb0:	687b      	ldr	r3, [r7, #4]
 8009bb2:	6818      	ldr	r0, [r3, #0]
 8009bb4:	683b      	ldr	r3, [r7, #0]
 8009bb6:	681b      	ldr	r3, [r3, #0]
 8009bb8:	2200      	movs	r2, #0
 8009bba:	4619      	mov	r1, r3
 8009bbc:	f7ff fb57 	bl	800926e <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5);
 8009bc0:	687b      	ldr	r3, [r7, #4]
 8009bc2:	681b      	ldr	r3, [r3, #0]
 8009bc4:	f04f 4100 	mov.w	r1, #2147483648	; 0x80000000
 8009bc8:	4618      	mov	r0, r3
 8009bca:	f7ff fb01 	bl	80091d0 <LL_ADC_SetSamplingTimeCommonConfig>
 8009bce:	e00e      	b.n	8009bee <HAL_ADC_ConfigChannel+0xc6>
      }
      else
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, sConfig->SamplingTime);
 8009bd0:	687b      	ldr	r3, [r7, #4]
 8009bd2:	6818      	ldr	r0, [r3, #0]
 8009bd4:	683b      	ldr	r3, [r7, #0]
 8009bd6:	6819      	ldr	r1, [r3, #0]
 8009bd8:	683b      	ldr	r3, [r7, #0]
 8009bda:	689b      	ldr	r3, [r3, #8]
 8009bdc:	461a      	mov	r2, r3
 8009bde:	f7ff fb46 	bl	800926e <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
 8009be2:	687b      	ldr	r3, [r7, #4]
 8009be4:	681b      	ldr	r3, [r3, #0]
 8009be6:	2100      	movs	r1, #0
 8009be8:	4618      	mov	r0, r3
 8009bea:	f7ff faf1 	bl	80091d0 <LL_ADC_SetSamplingTimeCommonConfig>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 8009bee:	683b      	ldr	r3, [r7, #0]
 8009bf0:	695a      	ldr	r2, [r3, #20]
 8009bf2:	687b      	ldr	r3, [r7, #4]
 8009bf4:	681b      	ldr	r3, [r3, #0]
 8009bf6:	68db      	ldr	r3, [r3, #12]
 8009bf8:	08db      	lsrs	r3, r3, #3
 8009bfa:	f003 0303 	and.w	r3, r3, #3
 8009bfe:	005b      	lsls	r3, r3, #1
 8009c00:	fa02 f303 	lsl.w	r3, r2, r3
 8009c04:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88

      if (sConfig->OffsetNumber != ADC_OFFSET_NONE)
 8009c08:	683b      	ldr	r3, [r7, #0]
 8009c0a:	691b      	ldr	r3, [r3, #16]
 8009c0c:	2b04      	cmp	r3, #4
 8009c0e:	d022      	beq.n	8009c56 <HAL_ADC_ConfigChannel+0x12e>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, sConfig->OffsetNumber, sConfig->Channel, tmpOffsetShifted);
 8009c10:	687b      	ldr	r3, [r7, #4]
 8009c12:	6818      	ldr	r0, [r3, #0]
 8009c14:	683b      	ldr	r3, [r7, #0]
 8009c16:	6919      	ldr	r1, [r3, #16]
 8009c18:	683b      	ldr	r3, [r7, #0]
 8009c1a:	681a      	ldr	r2, [r3, #0]
 8009c1c:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8009c20:	f7ff fa58 	bl	80090d4 <LL_ADC_SetOffset>

        assert_param(IS_ADC_OFFSET_SIGN(sConfig->OffsetSign));
        assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetSaturation));
        /* Set ADC selected offset sign & saturation */
        LL_ADC_SetOffsetSign(hadc->Instance, sConfig->OffsetNumber, sConfig->OffsetSign);
 8009c24:	687b      	ldr	r3, [r7, #4]
 8009c26:	6818      	ldr	r0, [r3, #0]
 8009c28:	683b      	ldr	r3, [r7, #0]
 8009c2a:	6919      	ldr	r1, [r3, #16]
 8009c2c:	683b      	ldr	r3, [r7, #0]
 8009c2e:	699b      	ldr	r3, [r3, #24]
 8009c30:	461a      	mov	r2, r3
 8009c32:	f7ff fa9d 	bl	8009170 <LL_ADC_SetOffsetSign>
        LL_ADC_SetOffsetSaturation(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetSaturation == ENABLE) ? LL_ADC_OFFSET_SATURATION_ENABLE : LL_ADC_OFFSET_SATURATION_DISABLE);
 8009c36:	687b      	ldr	r3, [r7, #4]
 8009c38:	6818      	ldr	r0, [r3, #0]
 8009c3a:	683b      	ldr	r3, [r7, #0]
 8009c3c:	6919      	ldr	r1, [r3, #16]
 8009c3e:	683b      	ldr	r3, [r7, #0]
 8009c40:	7f1b      	ldrb	r3, [r3, #28]
 8009c42:	2b01      	cmp	r3, #1
 8009c44:	d102      	bne.n	8009c4c <HAL_ADC_ConfigChannel+0x124>
 8009c46:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8009c4a:	e000      	b.n	8009c4e <HAL_ADC_ConfigChannel+0x126>
 8009c4c:	2300      	movs	r3, #0
 8009c4e:	461a      	mov	r2, r3
 8009c50:	f7ff faa6 	bl	80091a0 <LL_ADC_SetOffsetSaturation>
 8009c54:	e11d      	b.n	8009e92 <HAL_ADC_ConfigChannel+0x36a>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if(__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8009c56:	687b      	ldr	r3, [r7, #4]
 8009c58:	681b      	ldr	r3, [r3, #0]
 8009c5a:	2100      	movs	r1, #0
 8009c5c:	4618      	mov	r0, r3
 8009c5e:	f7ff fa5b 	bl	8009118 <LL_ADC_GetOffsetChannel>
 8009c62:	4603      	mov	r3, r0
 8009c64:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8009c68:	2b00      	cmp	r3, #0
 8009c6a:	d10a      	bne.n	8009c82 <HAL_ADC_ConfigChannel+0x15a>
 8009c6c:	687b      	ldr	r3, [r7, #4]
 8009c6e:	681b      	ldr	r3, [r3, #0]
 8009c70:	2100      	movs	r1, #0
 8009c72:	4618      	mov	r0, r3
 8009c74:	f7ff fa50 	bl	8009118 <LL_ADC_GetOffsetChannel>
 8009c78:	4603      	mov	r3, r0
 8009c7a:	0e9b      	lsrs	r3, r3, #26
 8009c7c:	f003 021f 	and.w	r2, r3, #31
 8009c80:	e012      	b.n	8009ca8 <HAL_ADC_ConfigChannel+0x180>
 8009c82:	687b      	ldr	r3, [r7, #4]
 8009c84:	681b      	ldr	r3, [r3, #0]
 8009c86:	2100      	movs	r1, #0
 8009c88:	4618      	mov	r0, r3
 8009c8a:	f7ff fa45 	bl	8009118 <LL_ADC_GetOffsetChannel>
 8009c8e:	4603      	mov	r3, r0
 8009c90:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8009c94:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8009c98:	fa93 f3a3 	rbit	r3, r3
 8009c9c:	67fb      	str	r3, [r7, #124]	; 0x7c
  return result;
 8009c9e:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8009ca0:	fab3 f383 	clz	r3, r3
 8009ca4:	b2db      	uxtb	r3, r3
 8009ca6:	461a      	mov	r2, r3
 8009ca8:	683b      	ldr	r3, [r7, #0]
 8009caa:	681b      	ldr	r3, [r3, #0]
 8009cac:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8009cb0:	2b00      	cmp	r3, #0
 8009cb2:	d105      	bne.n	8009cc0 <HAL_ADC_ConfigChannel+0x198>
 8009cb4:	683b      	ldr	r3, [r7, #0]
 8009cb6:	681b      	ldr	r3, [r3, #0]
 8009cb8:	0e9b      	lsrs	r3, r3, #26
 8009cba:	f003 031f 	and.w	r3, r3, #31
 8009cbe:	e00a      	b.n	8009cd6 <HAL_ADC_ConfigChannel+0x1ae>
 8009cc0:	683b      	ldr	r3, [r7, #0]
 8009cc2:	681b      	ldr	r3, [r3, #0]
 8009cc4:	67bb      	str	r3, [r7, #120]	; 0x78
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8009cc6:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8009cc8:	fa93 f3a3 	rbit	r3, r3
 8009ccc:	677b      	str	r3, [r7, #116]	; 0x74
  return result;
 8009cce:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8009cd0:	fab3 f383 	clz	r3, r3
 8009cd4:	b2db      	uxtb	r3, r3
 8009cd6:	429a      	cmp	r2, r3
 8009cd8:	d106      	bne.n	8009ce8 <HAL_ADC_ConfigChannel+0x1c0>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 8009cda:	687b      	ldr	r3, [r7, #4]
 8009cdc:	681b      	ldr	r3, [r3, #0]
 8009cde:	2200      	movs	r2, #0
 8009ce0:	2100      	movs	r1, #0
 8009ce2:	4618      	mov	r0, r3
 8009ce4:	f7ff fa2c 	bl	8009140 <LL_ADC_SetOffsetState>
        }
        if(__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8009ce8:	687b      	ldr	r3, [r7, #4]
 8009cea:	681b      	ldr	r3, [r3, #0]
 8009cec:	2101      	movs	r1, #1
 8009cee:	4618      	mov	r0, r3
 8009cf0:	f7ff fa12 	bl	8009118 <LL_ADC_GetOffsetChannel>
 8009cf4:	4603      	mov	r3, r0
 8009cf6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8009cfa:	2b00      	cmp	r3, #0
 8009cfc:	d10a      	bne.n	8009d14 <HAL_ADC_ConfigChannel+0x1ec>
 8009cfe:	687b      	ldr	r3, [r7, #4]
 8009d00:	681b      	ldr	r3, [r3, #0]
 8009d02:	2101      	movs	r1, #1
 8009d04:	4618      	mov	r0, r3
 8009d06:	f7ff fa07 	bl	8009118 <LL_ADC_GetOffsetChannel>
 8009d0a:	4603      	mov	r3, r0
 8009d0c:	0e9b      	lsrs	r3, r3, #26
 8009d0e:	f003 021f 	and.w	r2, r3, #31
 8009d12:	e010      	b.n	8009d36 <HAL_ADC_ConfigChannel+0x20e>
 8009d14:	687b      	ldr	r3, [r7, #4]
 8009d16:	681b      	ldr	r3, [r3, #0]
 8009d18:	2101      	movs	r1, #1
 8009d1a:	4618      	mov	r0, r3
 8009d1c:	f7ff f9fc 	bl	8009118 <LL_ADC_GetOffsetChannel>
 8009d20:	4603      	mov	r3, r0
 8009d22:	673b      	str	r3, [r7, #112]	; 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8009d24:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8009d26:	fa93 f3a3 	rbit	r3, r3
 8009d2a:	66fb      	str	r3, [r7, #108]	; 0x6c
  return result;
 8009d2c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8009d2e:	fab3 f383 	clz	r3, r3
 8009d32:	b2db      	uxtb	r3, r3
 8009d34:	461a      	mov	r2, r3
 8009d36:	683b      	ldr	r3, [r7, #0]
 8009d38:	681b      	ldr	r3, [r3, #0]
 8009d3a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8009d3e:	2b00      	cmp	r3, #0
 8009d40:	d105      	bne.n	8009d4e <HAL_ADC_ConfigChannel+0x226>
 8009d42:	683b      	ldr	r3, [r7, #0]
 8009d44:	681b      	ldr	r3, [r3, #0]
 8009d46:	0e9b      	lsrs	r3, r3, #26
 8009d48:	f003 031f 	and.w	r3, r3, #31
 8009d4c:	e00a      	b.n	8009d64 <HAL_ADC_ConfigChannel+0x23c>
 8009d4e:	683b      	ldr	r3, [r7, #0]
 8009d50:	681b      	ldr	r3, [r3, #0]
 8009d52:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8009d54:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8009d56:	fa93 f3a3 	rbit	r3, r3
 8009d5a:	667b      	str	r3, [r7, #100]	; 0x64
  return result;
 8009d5c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8009d5e:	fab3 f383 	clz	r3, r3
 8009d62:	b2db      	uxtb	r3, r3
 8009d64:	429a      	cmp	r2, r3
 8009d66:	d106      	bne.n	8009d76 <HAL_ADC_ConfigChannel+0x24e>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 8009d68:	687b      	ldr	r3, [r7, #4]
 8009d6a:	681b      	ldr	r3, [r3, #0]
 8009d6c:	2200      	movs	r2, #0
 8009d6e:	2101      	movs	r1, #1
 8009d70:	4618      	mov	r0, r3
 8009d72:	f7ff f9e5 	bl	8009140 <LL_ADC_SetOffsetState>
        }
        if(__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8009d76:	687b      	ldr	r3, [r7, #4]
 8009d78:	681b      	ldr	r3, [r3, #0]
 8009d7a:	2102      	movs	r1, #2
 8009d7c:	4618      	mov	r0, r3
 8009d7e:	f7ff f9cb 	bl	8009118 <LL_ADC_GetOffsetChannel>
 8009d82:	4603      	mov	r3, r0
 8009d84:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8009d88:	2b00      	cmp	r3, #0
 8009d8a:	d10a      	bne.n	8009da2 <HAL_ADC_ConfigChannel+0x27a>
 8009d8c:	687b      	ldr	r3, [r7, #4]
 8009d8e:	681b      	ldr	r3, [r3, #0]
 8009d90:	2102      	movs	r1, #2
 8009d92:	4618      	mov	r0, r3
 8009d94:	f7ff f9c0 	bl	8009118 <LL_ADC_GetOffsetChannel>
 8009d98:	4603      	mov	r3, r0
 8009d9a:	0e9b      	lsrs	r3, r3, #26
 8009d9c:	f003 021f 	and.w	r2, r3, #31
 8009da0:	e010      	b.n	8009dc4 <HAL_ADC_ConfigChannel+0x29c>
 8009da2:	687b      	ldr	r3, [r7, #4]
 8009da4:	681b      	ldr	r3, [r3, #0]
 8009da6:	2102      	movs	r1, #2
 8009da8:	4618      	mov	r0, r3
 8009daa:	f7ff f9b5 	bl	8009118 <LL_ADC_GetOffsetChannel>
 8009dae:	4603      	mov	r3, r0
 8009db0:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8009db2:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8009db4:	fa93 f3a3 	rbit	r3, r3
 8009db8:	65fb      	str	r3, [r7, #92]	; 0x5c
  return result;
 8009dba:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8009dbc:	fab3 f383 	clz	r3, r3
 8009dc0:	b2db      	uxtb	r3, r3
 8009dc2:	461a      	mov	r2, r3
 8009dc4:	683b      	ldr	r3, [r7, #0]
 8009dc6:	681b      	ldr	r3, [r3, #0]
 8009dc8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8009dcc:	2b00      	cmp	r3, #0
 8009dce:	d105      	bne.n	8009ddc <HAL_ADC_ConfigChannel+0x2b4>
 8009dd0:	683b      	ldr	r3, [r7, #0]
 8009dd2:	681b      	ldr	r3, [r3, #0]
 8009dd4:	0e9b      	lsrs	r3, r3, #26
 8009dd6:	f003 031f 	and.w	r3, r3, #31
 8009dda:	e00a      	b.n	8009df2 <HAL_ADC_ConfigChannel+0x2ca>
 8009ddc:	683b      	ldr	r3, [r7, #0]
 8009dde:	681b      	ldr	r3, [r3, #0]
 8009de0:	65bb      	str	r3, [r7, #88]	; 0x58
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8009de2:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8009de4:	fa93 f3a3 	rbit	r3, r3
 8009de8:	657b      	str	r3, [r7, #84]	; 0x54
  return result;
 8009dea:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8009dec:	fab3 f383 	clz	r3, r3
 8009df0:	b2db      	uxtb	r3, r3
 8009df2:	429a      	cmp	r2, r3
 8009df4:	d106      	bne.n	8009e04 <HAL_ADC_ConfigChannel+0x2dc>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 8009df6:	687b      	ldr	r3, [r7, #4]
 8009df8:	681b      	ldr	r3, [r3, #0]
 8009dfa:	2200      	movs	r2, #0
 8009dfc:	2102      	movs	r1, #2
 8009dfe:	4618      	mov	r0, r3
 8009e00:	f7ff f99e 	bl	8009140 <LL_ADC_SetOffsetState>
        }
        if(__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8009e04:	687b      	ldr	r3, [r7, #4]
 8009e06:	681b      	ldr	r3, [r3, #0]
 8009e08:	2103      	movs	r1, #3
 8009e0a:	4618      	mov	r0, r3
 8009e0c:	f7ff f984 	bl	8009118 <LL_ADC_GetOffsetChannel>
 8009e10:	4603      	mov	r3, r0
 8009e12:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8009e16:	2b00      	cmp	r3, #0
 8009e18:	d10a      	bne.n	8009e30 <HAL_ADC_ConfigChannel+0x308>
 8009e1a:	687b      	ldr	r3, [r7, #4]
 8009e1c:	681b      	ldr	r3, [r3, #0]
 8009e1e:	2103      	movs	r1, #3
 8009e20:	4618      	mov	r0, r3
 8009e22:	f7ff f979 	bl	8009118 <LL_ADC_GetOffsetChannel>
 8009e26:	4603      	mov	r3, r0
 8009e28:	0e9b      	lsrs	r3, r3, #26
 8009e2a:	f003 021f 	and.w	r2, r3, #31
 8009e2e:	e010      	b.n	8009e52 <HAL_ADC_ConfigChannel+0x32a>
 8009e30:	687b      	ldr	r3, [r7, #4]
 8009e32:	681b      	ldr	r3, [r3, #0]
 8009e34:	2103      	movs	r1, #3
 8009e36:	4618      	mov	r0, r3
 8009e38:	f7ff f96e 	bl	8009118 <LL_ADC_GetOffsetChannel>
 8009e3c:	4603      	mov	r3, r0
 8009e3e:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8009e40:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8009e42:	fa93 f3a3 	rbit	r3, r3
 8009e46:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 8009e48:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8009e4a:	fab3 f383 	clz	r3, r3
 8009e4e:	b2db      	uxtb	r3, r3
 8009e50:	461a      	mov	r2, r3
 8009e52:	683b      	ldr	r3, [r7, #0]
 8009e54:	681b      	ldr	r3, [r3, #0]
 8009e56:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8009e5a:	2b00      	cmp	r3, #0
 8009e5c:	d105      	bne.n	8009e6a <HAL_ADC_ConfigChannel+0x342>
 8009e5e:	683b      	ldr	r3, [r7, #0]
 8009e60:	681b      	ldr	r3, [r3, #0]
 8009e62:	0e9b      	lsrs	r3, r3, #26
 8009e64:	f003 031f 	and.w	r3, r3, #31
 8009e68:	e00a      	b.n	8009e80 <HAL_ADC_ConfigChannel+0x358>
 8009e6a:	683b      	ldr	r3, [r7, #0]
 8009e6c:	681b      	ldr	r3, [r3, #0]
 8009e6e:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8009e70:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8009e72:	fa93 f3a3 	rbit	r3, r3
 8009e76:	647b      	str	r3, [r7, #68]	; 0x44
  return result;
 8009e78:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8009e7a:	fab3 f383 	clz	r3, r3
 8009e7e:	b2db      	uxtb	r3, r3
 8009e80:	429a      	cmp	r2, r3
 8009e82:	d106      	bne.n	8009e92 <HAL_ADC_ConfigChannel+0x36a>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 8009e84:	687b      	ldr	r3, [r7, #4]
 8009e86:	681b      	ldr	r3, [r3, #0]
 8009e88:	2200      	movs	r2, #0
 8009e8a:	2103      	movs	r1, #3
 8009e8c:	4618      	mov	r0, r3
 8009e8e:	f7ff f957 	bl	8009140 <LL_ADC_SetOffsetState>
    }

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8009e92:	687b      	ldr	r3, [r7, #4]
 8009e94:	681b      	ldr	r3, [r3, #0]
 8009e96:	4618      	mov	r0, r3
 8009e98:	f7ff faba 	bl	8009410 <LL_ADC_IsEnabled>
 8009e9c:	4603      	mov	r3, r0
 8009e9e:	2b00      	cmp	r3, #0
 8009ea0:	f040 810c 	bne.w	800a0bc <HAL_ADC_ConfigChannel+0x594>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfig->Channel, sConfig->SingleDiff);
 8009ea4:	687b      	ldr	r3, [r7, #4]
 8009ea6:	6818      	ldr	r0, [r3, #0]
 8009ea8:	683b      	ldr	r3, [r7, #0]
 8009eaa:	6819      	ldr	r1, [r3, #0]
 8009eac:	683b      	ldr	r3, [r7, #0]
 8009eae:	68db      	ldr	r3, [r3, #12]
 8009eb0:	461a      	mov	r2, r3
 8009eb2:	f7ff fa05 	bl	80092c0 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (sConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 8009eb6:	683b      	ldr	r3, [r7, #0]
 8009eb8:	68db      	ldr	r3, [r3, #12]
 8009eba:	4aaf      	ldr	r2, [pc, #700]	; (800a178 <HAL_ADC_ConfigChannel+0x650>)
 8009ebc:	4293      	cmp	r3, r2
 8009ebe:	f040 80fd 	bne.w	800a0bc <HAL_ADC_ConfigChannel+0x594>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8009ec2:	687b      	ldr	r3, [r7, #4]
 8009ec4:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8009ec6:	683b      	ldr	r3, [r7, #0]
 8009ec8:	681b      	ldr	r3, [r3, #0]
 8009eca:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8009ece:	2b00      	cmp	r3, #0
 8009ed0:	d10b      	bne.n	8009eea <HAL_ADC_ConfigChannel+0x3c2>
 8009ed2:	683b      	ldr	r3, [r7, #0]
 8009ed4:	681b      	ldr	r3, [r3, #0]
 8009ed6:	0e9b      	lsrs	r3, r3, #26
 8009ed8:	3301      	adds	r3, #1
 8009eda:	f003 031f 	and.w	r3, r3, #31
 8009ede:	2b09      	cmp	r3, #9
 8009ee0:	bf94      	ite	ls
 8009ee2:	2301      	movls	r3, #1
 8009ee4:	2300      	movhi	r3, #0
 8009ee6:	b2db      	uxtb	r3, r3
 8009ee8:	e012      	b.n	8009f10 <HAL_ADC_ConfigChannel+0x3e8>
 8009eea:	683b      	ldr	r3, [r7, #0]
 8009eec:	681b      	ldr	r3, [r3, #0]
 8009eee:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8009ef0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8009ef2:	fa93 f3a3 	rbit	r3, r3
 8009ef6:	63fb      	str	r3, [r7, #60]	; 0x3c
  return result;
 8009ef8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009efa:	fab3 f383 	clz	r3, r3
 8009efe:	b2db      	uxtb	r3, r3
 8009f00:	3301      	adds	r3, #1
 8009f02:	f003 031f 	and.w	r3, r3, #31
 8009f06:	2b09      	cmp	r3, #9
 8009f08:	bf94      	ite	ls
 8009f0a:	2301      	movls	r3, #1
 8009f0c:	2300      	movhi	r3, #0
 8009f0e:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8009f10:	2b00      	cmp	r3, #0
 8009f12:	d064      	beq.n	8009fde <HAL_ADC_ConfigChannel+0x4b6>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8009f14:	683b      	ldr	r3, [r7, #0]
 8009f16:	681b      	ldr	r3, [r3, #0]
 8009f18:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8009f1c:	2b00      	cmp	r3, #0
 8009f1e:	d107      	bne.n	8009f30 <HAL_ADC_ConfigChannel+0x408>
 8009f20:	683b      	ldr	r3, [r7, #0]
 8009f22:	681b      	ldr	r3, [r3, #0]
 8009f24:	0e9b      	lsrs	r3, r3, #26
 8009f26:	3301      	adds	r3, #1
 8009f28:	069b      	lsls	r3, r3, #26
 8009f2a:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8009f2e:	e00e      	b.n	8009f4e <HAL_ADC_ConfigChannel+0x426>
 8009f30:	683b      	ldr	r3, [r7, #0]
 8009f32:	681b      	ldr	r3, [r3, #0]
 8009f34:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8009f36:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009f38:	fa93 f3a3 	rbit	r3, r3
 8009f3c:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 8009f3e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009f40:	fab3 f383 	clz	r3, r3
 8009f44:	b2db      	uxtb	r3, r3
 8009f46:	3301      	adds	r3, #1
 8009f48:	069b      	lsls	r3, r3, #26
 8009f4a:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8009f4e:	683b      	ldr	r3, [r7, #0]
 8009f50:	681b      	ldr	r3, [r3, #0]
 8009f52:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8009f56:	2b00      	cmp	r3, #0
 8009f58:	d109      	bne.n	8009f6e <HAL_ADC_ConfigChannel+0x446>
 8009f5a:	683b      	ldr	r3, [r7, #0]
 8009f5c:	681b      	ldr	r3, [r3, #0]
 8009f5e:	0e9b      	lsrs	r3, r3, #26
 8009f60:	3301      	adds	r3, #1
 8009f62:	f003 031f 	and.w	r3, r3, #31
 8009f66:	2101      	movs	r1, #1
 8009f68:	fa01 f303 	lsl.w	r3, r1, r3
 8009f6c:	e010      	b.n	8009f90 <HAL_ADC_ConfigChannel+0x468>
 8009f6e:	683b      	ldr	r3, [r7, #0]
 8009f70:	681b      	ldr	r3, [r3, #0]
 8009f72:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8009f74:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009f76:	fa93 f3a3 	rbit	r3, r3
 8009f7a:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 8009f7c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009f7e:	fab3 f383 	clz	r3, r3
 8009f82:	b2db      	uxtb	r3, r3
 8009f84:	3301      	adds	r3, #1
 8009f86:	f003 031f 	and.w	r3, r3, #31
 8009f8a:	2101      	movs	r1, #1
 8009f8c:	fa01 f303 	lsl.w	r3, r1, r3
 8009f90:	ea42 0103 	orr.w	r1, r2, r3
 8009f94:	683b      	ldr	r3, [r7, #0]
 8009f96:	681b      	ldr	r3, [r3, #0]
 8009f98:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8009f9c:	2b00      	cmp	r3, #0
 8009f9e:	d10a      	bne.n	8009fb6 <HAL_ADC_ConfigChannel+0x48e>
 8009fa0:	683b      	ldr	r3, [r7, #0]
 8009fa2:	681b      	ldr	r3, [r3, #0]
 8009fa4:	0e9b      	lsrs	r3, r3, #26
 8009fa6:	3301      	adds	r3, #1
 8009fa8:	f003 021f 	and.w	r2, r3, #31
 8009fac:	4613      	mov	r3, r2
 8009fae:	005b      	lsls	r3, r3, #1
 8009fb0:	4413      	add	r3, r2
 8009fb2:	051b      	lsls	r3, r3, #20
 8009fb4:	e011      	b.n	8009fda <HAL_ADC_ConfigChannel+0x4b2>
 8009fb6:	683b      	ldr	r3, [r7, #0]
 8009fb8:	681b      	ldr	r3, [r3, #0]
 8009fba:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8009fbc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009fbe:	fa93 f3a3 	rbit	r3, r3
 8009fc2:	627b      	str	r3, [r7, #36]	; 0x24
  return result;
 8009fc4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009fc6:	fab3 f383 	clz	r3, r3
 8009fca:	b2db      	uxtb	r3, r3
 8009fcc:	3301      	adds	r3, #1
 8009fce:	f003 021f 	and.w	r2, r3, #31
 8009fd2:	4613      	mov	r3, r2
 8009fd4:	005b      	lsls	r3, r3, #1
 8009fd6:	4413      	add	r3, r2
 8009fd8:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8009fda:	430b      	orrs	r3, r1
 8009fdc:	e069      	b.n	800a0b2 <HAL_ADC_ConfigChannel+0x58a>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8009fde:	683b      	ldr	r3, [r7, #0]
 8009fe0:	681b      	ldr	r3, [r3, #0]
 8009fe2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8009fe6:	2b00      	cmp	r3, #0
 8009fe8:	d107      	bne.n	8009ffa <HAL_ADC_ConfigChannel+0x4d2>
 8009fea:	683b      	ldr	r3, [r7, #0]
 8009fec:	681b      	ldr	r3, [r3, #0]
 8009fee:	0e9b      	lsrs	r3, r3, #26
 8009ff0:	3301      	adds	r3, #1
 8009ff2:	069b      	lsls	r3, r3, #26
 8009ff4:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8009ff8:	e00e      	b.n	800a018 <HAL_ADC_ConfigChannel+0x4f0>
 8009ffa:	683b      	ldr	r3, [r7, #0]
 8009ffc:	681b      	ldr	r3, [r3, #0]
 8009ffe:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800a000:	6a3b      	ldr	r3, [r7, #32]
 800a002:	fa93 f3a3 	rbit	r3, r3
 800a006:	61fb      	str	r3, [r7, #28]
  return result;
 800a008:	69fb      	ldr	r3, [r7, #28]
 800a00a:	fab3 f383 	clz	r3, r3
 800a00e:	b2db      	uxtb	r3, r3
 800a010:	3301      	adds	r3, #1
 800a012:	069b      	lsls	r3, r3, #26
 800a014:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 800a018:	683b      	ldr	r3, [r7, #0]
 800a01a:	681b      	ldr	r3, [r3, #0]
 800a01c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800a020:	2b00      	cmp	r3, #0
 800a022:	d109      	bne.n	800a038 <HAL_ADC_ConfigChannel+0x510>
 800a024:	683b      	ldr	r3, [r7, #0]
 800a026:	681b      	ldr	r3, [r3, #0]
 800a028:	0e9b      	lsrs	r3, r3, #26
 800a02a:	3301      	adds	r3, #1
 800a02c:	f003 031f 	and.w	r3, r3, #31
 800a030:	2101      	movs	r1, #1
 800a032:	fa01 f303 	lsl.w	r3, r1, r3
 800a036:	e010      	b.n	800a05a <HAL_ADC_ConfigChannel+0x532>
 800a038:	683b      	ldr	r3, [r7, #0]
 800a03a:	681b      	ldr	r3, [r3, #0]
 800a03c:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800a03e:	69bb      	ldr	r3, [r7, #24]
 800a040:	fa93 f3a3 	rbit	r3, r3
 800a044:	617b      	str	r3, [r7, #20]
  return result;
 800a046:	697b      	ldr	r3, [r7, #20]
 800a048:	fab3 f383 	clz	r3, r3
 800a04c:	b2db      	uxtb	r3, r3
 800a04e:	3301      	adds	r3, #1
 800a050:	f003 031f 	and.w	r3, r3, #31
 800a054:	2101      	movs	r1, #1
 800a056:	fa01 f303 	lsl.w	r3, r1, r3
 800a05a:	ea42 0103 	orr.w	r1, r2, r3
 800a05e:	683b      	ldr	r3, [r7, #0]
 800a060:	681b      	ldr	r3, [r3, #0]
 800a062:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800a066:	2b00      	cmp	r3, #0
 800a068:	d10d      	bne.n	800a086 <HAL_ADC_ConfigChannel+0x55e>
 800a06a:	683b      	ldr	r3, [r7, #0]
 800a06c:	681b      	ldr	r3, [r3, #0]
 800a06e:	0e9b      	lsrs	r3, r3, #26
 800a070:	3301      	adds	r3, #1
 800a072:	f003 021f 	and.w	r2, r3, #31
 800a076:	4613      	mov	r3, r2
 800a078:	005b      	lsls	r3, r3, #1
 800a07a:	4413      	add	r3, r2
 800a07c:	3b1e      	subs	r3, #30
 800a07e:	051b      	lsls	r3, r3, #20
 800a080:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800a084:	e014      	b.n	800a0b0 <HAL_ADC_ConfigChannel+0x588>
 800a086:	683b      	ldr	r3, [r7, #0]
 800a088:	681b      	ldr	r3, [r3, #0]
 800a08a:	613b      	str	r3, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800a08c:	693b      	ldr	r3, [r7, #16]
 800a08e:	fa93 f3a3 	rbit	r3, r3
 800a092:	60fb      	str	r3, [r7, #12]
  return result;
 800a094:	68fb      	ldr	r3, [r7, #12]
 800a096:	fab3 f383 	clz	r3, r3
 800a09a:	b2db      	uxtb	r3, r3
 800a09c:	3301      	adds	r3, #1
 800a09e:	f003 021f 	and.w	r2, r3, #31
 800a0a2:	4613      	mov	r3, r2
 800a0a4:	005b      	lsls	r3, r3, #1
 800a0a6:	4413      	add	r3, r2
 800a0a8:	3b1e      	subs	r3, #30
 800a0aa:	051b      	lsls	r3, r3, #20
 800a0ac:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 800a0b0:	430b      	orrs	r3, r1
 800a0b2:	683a      	ldr	r2, [r7, #0]
 800a0b4:	6892      	ldr	r2, [r2, #8]
 800a0b6:	4619      	mov	r1, r3
 800a0b8:	f7ff f8d9 	bl	800926e <LL_ADC_SetChannelSamplingTime>
    /* If internal channel selected, enable dedicated internal buffers and    */
    /* paths.                                                                 */
    /* Note: these internal measurement paths can be disabled using           */
    /* HAL_ADC_DeInit().                                                      */

    if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 800a0bc:	683b      	ldr	r3, [r7, #0]
 800a0be:	681a      	ldr	r2, [r3, #0]
 800a0c0:	4b2e      	ldr	r3, [pc, #184]	; (800a17c <HAL_ADC_ConfigChannel+0x654>)
 800a0c2:	4013      	ands	r3, r2
 800a0c4:	2b00      	cmp	r3, #0
 800a0c6:	f000 80c9 	beq.w	800a25c <HAL_ADC_ConfigChannel+0x734>
    {
      tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 800a0ca:	687b      	ldr	r3, [r7, #4]
 800a0cc:	681b      	ldr	r3, [r3, #0]
 800a0ce:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800a0d2:	d004      	beq.n	800a0de <HAL_ADC_ConfigChannel+0x5b6>
 800a0d4:	687b      	ldr	r3, [r7, #4]
 800a0d6:	681b      	ldr	r3, [r3, #0]
 800a0d8:	4a29      	ldr	r2, [pc, #164]	; (800a180 <HAL_ADC_ConfigChannel+0x658>)
 800a0da:	4293      	cmp	r3, r2
 800a0dc:	d101      	bne.n	800a0e2 <HAL_ADC_ConfigChannel+0x5ba>
 800a0de:	4b29      	ldr	r3, [pc, #164]	; (800a184 <HAL_ADC_ConfigChannel+0x65c>)
 800a0e0:	e000      	b.n	800a0e4 <HAL_ADC_ConfigChannel+0x5bc>
 800a0e2:	4b29      	ldr	r3, [pc, #164]	; (800a188 <HAL_ADC_ConfigChannel+0x660>)
 800a0e4:	4618      	mov	r0, r3
 800a0e6:	f7fe ffe7 	bl	80090b8 <LL_ADC_GetCommonPathInternalCh>
 800a0ea:	f8c7 0084 	str.w	r0, [r7, #132]	; 0x84

      /* If the requested internal measurement path has already been enabled, */
      /* bypass the configuration processing.                                 */
      if (((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR_ADC1) || (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR_ADC5))
 800a0ee:	683b      	ldr	r3, [r7, #0]
 800a0f0:	681b      	ldr	r3, [r3, #0]
 800a0f2:	4a26      	ldr	r2, [pc, #152]	; (800a18c <HAL_ADC_ConfigChannel+0x664>)
 800a0f4:	4293      	cmp	r3, r2
 800a0f6:	d004      	beq.n	800a102 <HAL_ADC_ConfigChannel+0x5da>
 800a0f8:	683b      	ldr	r3, [r7, #0]
 800a0fa:	681b      	ldr	r3, [r3, #0]
 800a0fc:	4a24      	ldr	r2, [pc, #144]	; (800a190 <HAL_ADC_ConfigChannel+0x668>)
 800a0fe:	4293      	cmp	r3, r2
 800a100:	d14e      	bne.n	800a1a0 <HAL_ADC_ConfigChannel+0x678>
          && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 800a102:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800a106:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800a10a:	2b00      	cmp	r3, #0
 800a10c:	d148      	bne.n	800a1a0 <HAL_ADC_ConfigChannel+0x678>
      {
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 800a10e:	687b      	ldr	r3, [r7, #4]
 800a110:	681b      	ldr	r3, [r3, #0]
 800a112:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800a116:	d005      	beq.n	800a124 <HAL_ADC_ConfigChannel+0x5fc>
 800a118:	687b      	ldr	r3, [r7, #4]
 800a11a:	681b      	ldr	r3, [r3, #0]
 800a11c:	4a1d      	ldr	r2, [pc, #116]	; (800a194 <HAL_ADC_ConfigChannel+0x66c>)
 800a11e:	4293      	cmp	r3, r2
 800a120:	f040 8099 	bne.w	800a256 <HAL_ADC_ConfigChannel+0x72e>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 800a124:	687b      	ldr	r3, [r7, #4]
 800a126:	681b      	ldr	r3, [r3, #0]
 800a128:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800a12c:	d004      	beq.n	800a138 <HAL_ADC_ConfigChannel+0x610>
 800a12e:	687b      	ldr	r3, [r7, #4]
 800a130:	681b      	ldr	r3, [r3, #0]
 800a132:	4a13      	ldr	r2, [pc, #76]	; (800a180 <HAL_ADC_ConfigChannel+0x658>)
 800a134:	4293      	cmp	r3, r2
 800a136:	d101      	bne.n	800a13c <HAL_ADC_ConfigChannel+0x614>
 800a138:	4a12      	ldr	r2, [pc, #72]	; (800a184 <HAL_ADC_ConfigChannel+0x65c>)
 800a13a:	e000      	b.n	800a13e <HAL_ADC_ConfigChannel+0x616>
 800a13c:	4a12      	ldr	r2, [pc, #72]	; (800a188 <HAL_ADC_ConfigChannel+0x660>)
 800a13e:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800a142:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 800a146:	4619      	mov	r1, r3
 800a148:	4610      	mov	r0, r2
 800a14a:	f7fe ffa2 	bl	8009092 <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * (SystemCoreClock / (100000UL * 2UL)));
 800a14e:	4b12      	ldr	r3, [pc, #72]	; (800a198 <HAL_ADC_ConfigChannel+0x670>)
 800a150:	681b      	ldr	r3, [r3, #0]
 800a152:	099b      	lsrs	r3, r3, #6
 800a154:	4a11      	ldr	r2, [pc, #68]	; (800a19c <HAL_ADC_ConfigChannel+0x674>)
 800a156:	fba2 2303 	umull	r2, r3, r2, r3
 800a15a:	099a      	lsrs	r2, r3, #6
 800a15c:	4613      	mov	r3, r2
 800a15e:	005b      	lsls	r3, r3, #1
 800a160:	4413      	add	r3, r2
 800a162:	009b      	lsls	r3, r3, #2
 800a164:	60bb      	str	r3, [r7, #8]
          while (wait_loop_index != 0UL)
 800a166:	e002      	b.n	800a16e <HAL_ADC_ConfigChannel+0x646>
          {
            wait_loop_index--;
 800a168:	68bb      	ldr	r3, [r7, #8]
 800a16a:	3b01      	subs	r3, #1
 800a16c:	60bb      	str	r3, [r7, #8]
          while (wait_loop_index != 0UL)
 800a16e:	68bb      	ldr	r3, [r7, #8]
 800a170:	2b00      	cmp	r3, #0
 800a172:	d1f9      	bne.n	800a168 <HAL_ADC_ConfigChannel+0x640>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 800a174:	e06f      	b.n	800a256 <HAL_ADC_ConfigChannel+0x72e>
 800a176:	bf00      	nop
 800a178:	407f0000 	.word	0x407f0000
 800a17c:	80080000 	.word	0x80080000
 800a180:	50000100 	.word	0x50000100
 800a184:	50000300 	.word	0x50000300
 800a188:	50000700 	.word	0x50000700
 800a18c:	c3210000 	.word	0xc3210000
 800a190:	90c00010 	.word	0x90c00010
 800a194:	50000600 	.word	0x50000600
 800a198:	20000eb0 	.word	0x20000eb0
 800a19c:	053e2d63 	.word	0x053e2d63
          }
        }
      }
      else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 800a1a0:	683b      	ldr	r3, [r7, #0]
 800a1a2:	681b      	ldr	r3, [r3, #0]
 800a1a4:	4a32      	ldr	r2, [pc, #200]	; (800a270 <HAL_ADC_ConfigChannel+0x748>)
 800a1a6:	4293      	cmp	r3, r2
 800a1a8:	d125      	bne.n	800a1f6 <HAL_ADC_ConfigChannel+0x6ce>
 800a1aa:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800a1ae:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800a1b2:	2b00      	cmp	r3, #0
 800a1b4:	d11f      	bne.n	800a1f6 <HAL_ADC_ConfigChannel+0x6ce>
      {
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 800a1b6:	687b      	ldr	r3, [r7, #4]
 800a1b8:	681b      	ldr	r3, [r3, #0]
 800a1ba:	4a2e      	ldr	r2, [pc, #184]	; (800a274 <HAL_ADC_ConfigChannel+0x74c>)
 800a1bc:	4293      	cmp	r3, r2
 800a1be:	d104      	bne.n	800a1ca <HAL_ADC_ConfigChannel+0x6a2>
 800a1c0:	687b      	ldr	r3, [r7, #4]
 800a1c2:	681b      	ldr	r3, [r3, #0]
 800a1c4:	4a2c      	ldr	r2, [pc, #176]	; (800a278 <HAL_ADC_ConfigChannel+0x750>)
 800a1c6:	4293      	cmp	r3, r2
 800a1c8:	d047      	beq.n	800a25a <HAL_ADC_ConfigChannel+0x732>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 800a1ca:	687b      	ldr	r3, [r7, #4]
 800a1cc:	681b      	ldr	r3, [r3, #0]
 800a1ce:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800a1d2:	d004      	beq.n	800a1de <HAL_ADC_ConfigChannel+0x6b6>
 800a1d4:	687b      	ldr	r3, [r7, #4]
 800a1d6:	681b      	ldr	r3, [r3, #0]
 800a1d8:	4a26      	ldr	r2, [pc, #152]	; (800a274 <HAL_ADC_ConfigChannel+0x74c>)
 800a1da:	4293      	cmp	r3, r2
 800a1dc:	d101      	bne.n	800a1e2 <HAL_ADC_ConfigChannel+0x6ba>
 800a1de:	4a27      	ldr	r2, [pc, #156]	; (800a27c <HAL_ADC_ConfigChannel+0x754>)
 800a1e0:	e000      	b.n	800a1e4 <HAL_ADC_ConfigChannel+0x6bc>
 800a1e2:	4a27      	ldr	r2, [pc, #156]	; (800a280 <HAL_ADC_ConfigChannel+0x758>)
 800a1e4:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800a1e8:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800a1ec:	4619      	mov	r1, r3
 800a1ee:	4610      	mov	r0, r2
 800a1f0:	f7fe ff4f 	bl	8009092 <LL_ADC_SetCommonPathInternalCh>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 800a1f4:	e031      	b.n	800a25a <HAL_ADC_ConfigChannel+0x732>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
      }
      else if ((sConfig->Channel == ADC_CHANNEL_VREFINT)
 800a1f6:	683b      	ldr	r3, [r7, #0]
 800a1f8:	681b      	ldr	r3, [r3, #0]
 800a1fa:	4a22      	ldr	r2, [pc, #136]	; (800a284 <HAL_ADC_ConfigChannel+0x75c>)
 800a1fc:	4293      	cmp	r3, r2
 800a1fe:	d12d      	bne.n	800a25c <HAL_ADC_ConfigChannel+0x734>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 800a200:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800a204:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800a208:	2b00      	cmp	r3, #0
 800a20a:	d127      	bne.n	800a25c <HAL_ADC_ConfigChannel+0x734>
      {
        if (ADC_VREFINT_INSTANCE(hadc))
 800a20c:	687b      	ldr	r3, [r7, #4]
 800a20e:	681b      	ldr	r3, [r3, #0]
 800a210:	4a18      	ldr	r2, [pc, #96]	; (800a274 <HAL_ADC_ConfigChannel+0x74c>)
 800a212:	4293      	cmp	r3, r2
 800a214:	d022      	beq.n	800a25c <HAL_ADC_ConfigChannel+0x734>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 800a216:	687b      	ldr	r3, [r7, #4]
 800a218:	681b      	ldr	r3, [r3, #0]
 800a21a:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800a21e:	d004      	beq.n	800a22a <HAL_ADC_ConfigChannel+0x702>
 800a220:	687b      	ldr	r3, [r7, #4]
 800a222:	681b      	ldr	r3, [r3, #0]
 800a224:	4a13      	ldr	r2, [pc, #76]	; (800a274 <HAL_ADC_ConfigChannel+0x74c>)
 800a226:	4293      	cmp	r3, r2
 800a228:	d101      	bne.n	800a22e <HAL_ADC_ConfigChannel+0x706>
 800a22a:	4a14      	ldr	r2, [pc, #80]	; (800a27c <HAL_ADC_ConfigChannel+0x754>)
 800a22c:	e000      	b.n	800a230 <HAL_ADC_ConfigChannel+0x708>
 800a22e:	4a14      	ldr	r2, [pc, #80]	; (800a280 <HAL_ADC_ConfigChannel+0x758>)
 800a230:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800a234:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800a238:	4619      	mov	r1, r3
 800a23a:	4610      	mov	r0, r2
 800a23c:	f7fe ff29 	bl	8009092 <LL_ADC_SetCommonPathInternalCh>
 800a240:	e00c      	b.n	800a25c <HAL_ADC_ConfigChannel+0x734>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800a242:	687b      	ldr	r3, [r7, #4]
 800a244:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800a246:	f043 0220 	orr.w	r2, r3, #32
 800a24a:	687b      	ldr	r3, [r7, #4]
 800a24c:	65da      	str	r2, [r3, #92]	; 0x5c

    tmp_hal_status = HAL_ERROR;
 800a24e:	2301      	movs	r3, #1
 800a250:	f887 3097 	strb.w	r3, [r7, #151]	; 0x97
 800a254:	e002      	b.n	800a25c <HAL_ADC_ConfigChannel+0x734>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 800a256:	bf00      	nop
 800a258:	e000      	b.n	800a25c <HAL_ADC_ConfigChannel+0x734>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 800a25a:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800a25c:	687b      	ldr	r3, [r7, #4]
 800a25e:	2200      	movs	r2, #0
 800a260:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

  /* Return function status */
  return tmp_hal_status;
 800a264:	f897 3097 	ldrb.w	r3, [r7, #151]	; 0x97
}
 800a268:	4618      	mov	r0, r3
 800a26a:	3798      	adds	r7, #152	; 0x98
 800a26c:	46bd      	mov	sp, r7
 800a26e:	bd80      	pop	{r7, pc}
 800a270:	c7520000 	.word	0xc7520000
 800a274:	50000100 	.word	0x50000100
 800a278:	50000500 	.word	0x50000500
 800a27c:	50000300 	.word	0x50000300
 800a280:	50000700 	.word	0x50000700
 800a284:	cb840000 	.word	0xcb840000

0800a288 <ADC_ConversionStop>:
  *            @arg @ref ADC_INJECTED_GROUP          ADC injected conversion type.
  *            @arg @ref ADC_REGULAR_INJECTED_GROUP  ADC regular and injected conversion type.
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop(ADC_HandleTypeDef *hadc, uint32_t ConversionGroup)
{
 800a288:	b580      	push	{r7, lr}
 800a28a:	b088      	sub	sp, #32
 800a28c:	af00      	add	r7, sp, #0
 800a28e:	6078      	str	r0, [r7, #4]
 800a290:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t Conversion_Timeout_CPU_cycles = 0UL;
 800a292:	2300      	movs	r3, #0
 800a294:	61fb      	str	r3, [r7, #28]
  uint32_t conversion_group_reassigned = ConversionGroup;
 800a296:	683b      	ldr	r3, [r7, #0]
 800a298:	61bb      	str	r3, [r7, #24]
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_CONVERSION_GROUP(ConversionGroup));

  /* Verification if ADC is not already stopped (on regular and injected      */
  /* groups) to bypass this function if not needed.                           */
  tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 800a29a:	687b      	ldr	r3, [r7, #4]
 800a29c:	681b      	ldr	r3, [r3, #0]
 800a29e:	4618      	mov	r0, r3
 800a2a0:	f7ff f904 	bl	80094ac <LL_ADC_REG_IsConversionOngoing>
 800a2a4:	6138      	str	r0, [r7, #16]
  tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 800a2a6:	687b      	ldr	r3, [r7, #4]
 800a2a8:	681b      	ldr	r3, [r3, #0]
 800a2aa:	4618      	mov	r0, r3
 800a2ac:	f7ff f925 	bl	80094fa <LL_ADC_INJ_IsConversionOngoing>
 800a2b0:	60f8      	str	r0, [r7, #12]
  if ((tmp_adc_is_conversion_on_going_regular != 0UL)
 800a2b2:	693b      	ldr	r3, [r7, #16]
 800a2b4:	2b00      	cmp	r3, #0
 800a2b6:	d103      	bne.n	800a2c0 <ADC_ConversionStop+0x38>
      || (tmp_adc_is_conversion_on_going_injected != 0UL)
 800a2b8:	68fb      	ldr	r3, [r7, #12]
 800a2ba:	2b00      	cmp	r3, #0
 800a2bc:	f000 8090 	beq.w	800a3e0 <ADC_ConversionStop+0x158>
    /* auto-delay mode.                                                       */
    /* In auto-injection mode, regular group stop ADC_CR_ADSTP is used (not   */
    /* injected group stop ADC_CR_JADSTP).                                    */
    /* Procedure to be followed: Wait until JEOS=1, clear JEOS, set ADSTP=1   */
    /* (see reference manual).                                                */
    if (((hadc->Instance->CFGR & ADC_CFGR_JAUTO) != 0UL)
 800a2c0:	687b      	ldr	r3, [r7, #4]
 800a2c2:	681b      	ldr	r3, [r3, #0]
 800a2c4:	68db      	ldr	r3, [r3, #12]
 800a2c6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800a2ca:	2b00      	cmp	r3, #0
 800a2cc:	d02a      	beq.n	800a324 <ADC_ConversionStop+0x9c>
        && (hadc->Init.ContinuousConvMode == ENABLE)
 800a2ce:	687b      	ldr	r3, [r7, #4]
 800a2d0:	7f5b      	ldrb	r3, [r3, #29]
 800a2d2:	2b01      	cmp	r3, #1
 800a2d4:	d126      	bne.n	800a324 <ADC_ConversionStop+0x9c>
        && (hadc->Init.LowPowerAutoWait == ENABLE)
 800a2d6:	687b      	ldr	r3, [r7, #4]
 800a2d8:	7f1b      	ldrb	r3, [r3, #28]
 800a2da:	2b01      	cmp	r3, #1
 800a2dc:	d122      	bne.n	800a324 <ADC_ConversionStop+0x9c>
       )
    {
      /* Use stop of regular group */
      conversion_group_reassigned = ADC_REGULAR_GROUP;
 800a2de:	2301      	movs	r3, #1
 800a2e0:	61bb      	str	r3, [r7, #24]

      /* Wait until JEOS=1 (maximum Timeout: 4 injected conversions) */
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS) == 0UL)
 800a2e2:	e014      	b.n	800a30e <ADC_ConversionStop+0x86>
      {
        if (Conversion_Timeout_CPU_cycles >= (ADC_CONVERSION_TIME_MAX_CPU_CYCLES * 4UL))
 800a2e4:	69fb      	ldr	r3, [r7, #28]
 800a2e6:	4a41      	ldr	r2, [pc, #260]	; (800a3ec <ADC_ConversionStop+0x164>)
 800a2e8:	4293      	cmp	r3, r2
 800a2ea:	d90d      	bls.n	800a308 <ADC_ConversionStop+0x80>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800a2ec:	687b      	ldr	r3, [r7, #4]
 800a2ee:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800a2f0:	f043 0210 	orr.w	r2, r3, #16
 800a2f4:	687b      	ldr	r3, [r7, #4]
 800a2f6:	65da      	str	r2, [r3, #92]	; 0x5c

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800a2f8:	687b      	ldr	r3, [r7, #4]
 800a2fa:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800a2fc:	f043 0201 	orr.w	r2, r3, #1
 800a300:	687b      	ldr	r3, [r7, #4]
 800a302:	661a      	str	r2, [r3, #96]	; 0x60

          return HAL_ERROR;
 800a304:	2301      	movs	r3, #1
 800a306:	e06c      	b.n	800a3e2 <ADC_ConversionStop+0x15a>
        }
        Conversion_Timeout_CPU_cycles ++;
 800a308:	69fb      	ldr	r3, [r7, #28]
 800a30a:	3301      	adds	r3, #1
 800a30c:	61fb      	str	r3, [r7, #28]
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS) == 0UL)
 800a30e:	687b      	ldr	r3, [r7, #4]
 800a310:	681b      	ldr	r3, [r3, #0]
 800a312:	681b      	ldr	r3, [r3, #0]
 800a314:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a318:	2b40      	cmp	r3, #64	; 0x40
 800a31a:	d1e3      	bne.n	800a2e4 <ADC_ConversionStop+0x5c>
      }

      /* Clear JEOS */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JEOS);
 800a31c:	687b      	ldr	r3, [r7, #4]
 800a31e:	681b      	ldr	r3, [r3, #0]
 800a320:	2240      	movs	r2, #64	; 0x40
 800a322:	601a      	str	r2, [r3, #0]
    }

    /* Stop potential conversion on going on ADC group regular */
    if (conversion_group_reassigned != ADC_INJECTED_GROUP)
 800a324:	69bb      	ldr	r3, [r7, #24]
 800a326:	2b02      	cmp	r3, #2
 800a328:	d014      	beq.n	800a354 <ADC_ConversionStop+0xcc>
    {
      /* Software is allowed to set ADSTP only when ADSTART=1 and ADDIS=0 */
      if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) != 0UL)
 800a32a:	687b      	ldr	r3, [r7, #4]
 800a32c:	681b      	ldr	r3, [r3, #0]
 800a32e:	4618      	mov	r0, r3
 800a330:	f7ff f8bc 	bl	80094ac <LL_ADC_REG_IsConversionOngoing>
 800a334:	4603      	mov	r3, r0
 800a336:	2b00      	cmp	r3, #0
 800a338:	d00c      	beq.n	800a354 <ADC_ConversionStop+0xcc>
      {
        if (LL_ADC_IsDisableOngoing(hadc->Instance) == 0UL)
 800a33a:	687b      	ldr	r3, [r7, #4]
 800a33c:	681b      	ldr	r3, [r3, #0]
 800a33e:	4618      	mov	r0, r3
 800a340:	f7ff f879 	bl	8009436 <LL_ADC_IsDisableOngoing>
 800a344:	4603      	mov	r3, r0
 800a346:	2b00      	cmp	r3, #0
 800a348:	d104      	bne.n	800a354 <ADC_ConversionStop+0xcc>
        {
          /* Stop ADC group regular conversion */
          LL_ADC_REG_StopConversion(hadc->Instance);
 800a34a:	687b      	ldr	r3, [r7, #4]
 800a34c:	681b      	ldr	r3, [r3, #0]
 800a34e:	4618      	mov	r0, r3
 800a350:	f7ff f898 	bl	8009484 <LL_ADC_REG_StopConversion>
        }
      }
    }

    /* Stop potential conversion on going on ADC group injected */
    if (conversion_group_reassigned != ADC_REGULAR_GROUP)
 800a354:	69bb      	ldr	r3, [r7, #24]
 800a356:	2b01      	cmp	r3, #1
 800a358:	d014      	beq.n	800a384 <ADC_ConversionStop+0xfc>
    {
      /* Software is allowed to set JADSTP only when JADSTART=1 and ADDIS=0 */
      if (LL_ADC_INJ_IsConversionOngoing(hadc->Instance) != 0UL)
 800a35a:	687b      	ldr	r3, [r7, #4]
 800a35c:	681b      	ldr	r3, [r3, #0]
 800a35e:	4618      	mov	r0, r3
 800a360:	f7ff f8cb 	bl	80094fa <LL_ADC_INJ_IsConversionOngoing>
 800a364:	4603      	mov	r3, r0
 800a366:	2b00      	cmp	r3, #0
 800a368:	d00c      	beq.n	800a384 <ADC_ConversionStop+0xfc>
      {
        if (LL_ADC_IsDisableOngoing(hadc->Instance) == 0UL)
 800a36a:	687b      	ldr	r3, [r7, #4]
 800a36c:	681b      	ldr	r3, [r3, #0]
 800a36e:	4618      	mov	r0, r3
 800a370:	f7ff f861 	bl	8009436 <LL_ADC_IsDisableOngoing>
 800a374:	4603      	mov	r3, r0
 800a376:	2b00      	cmp	r3, #0
 800a378:	d104      	bne.n	800a384 <ADC_ConversionStop+0xfc>
        {
          /* Stop ADC group injected conversion */
          LL_ADC_INJ_StopConversion(hadc->Instance);
 800a37a:	687b      	ldr	r3, [r7, #4]
 800a37c:	681b      	ldr	r3, [r3, #0]
 800a37e:	4618      	mov	r0, r3
 800a380:	f7ff f8a7 	bl	80094d2 <LL_ADC_INJ_StopConversion>
        }
      }
    }

    /* Selection of start and stop bits with respect to the regular or injected group */
    switch (conversion_group_reassigned)
 800a384:	69bb      	ldr	r3, [r7, #24]
 800a386:	2b02      	cmp	r3, #2
 800a388:	d004      	beq.n	800a394 <ADC_ConversionStop+0x10c>
 800a38a:	2b03      	cmp	r3, #3
 800a38c:	d105      	bne.n	800a39a <ADC_ConversionStop+0x112>
    {
      case ADC_REGULAR_INJECTED_GROUP:
        tmp_ADC_CR_ADSTART_JADSTART = (ADC_CR_ADSTART | ADC_CR_JADSTART);
 800a38e:	230c      	movs	r3, #12
 800a390:	617b      	str	r3, [r7, #20]
        break;
 800a392:	e005      	b.n	800a3a0 <ADC_ConversionStop+0x118>
      case ADC_INJECTED_GROUP:
        tmp_ADC_CR_ADSTART_JADSTART = ADC_CR_JADSTART;
 800a394:	2308      	movs	r3, #8
 800a396:	617b      	str	r3, [r7, #20]
        break;
 800a398:	e002      	b.n	800a3a0 <ADC_ConversionStop+0x118>
      /* Case ADC_REGULAR_GROUP only*/
      default:
        tmp_ADC_CR_ADSTART_JADSTART = ADC_CR_ADSTART;
 800a39a:	2304      	movs	r3, #4
 800a39c:	617b      	str	r3, [r7, #20]
        break;
 800a39e:	bf00      	nop
    }

    /* Wait for conversion effectively stopped */
    tickstart = HAL_GetTick();
 800a3a0:	f7fe fe36 	bl	8009010 <HAL_GetTick>
 800a3a4:	60b8      	str	r0, [r7, #8]

    while ((hadc->Instance->CR & tmp_ADC_CR_ADSTART_JADSTART) != 0UL)
 800a3a6:	e014      	b.n	800a3d2 <ADC_ConversionStop+0x14a>
    {
      if ((HAL_GetTick() - tickstart) > ADC_STOP_CONVERSION_TIMEOUT)
 800a3a8:	f7fe fe32 	bl	8009010 <HAL_GetTick>
 800a3ac:	4602      	mov	r2, r0
 800a3ae:	68bb      	ldr	r3, [r7, #8]
 800a3b0:	1ad3      	subs	r3, r2, r3
 800a3b2:	2b05      	cmp	r3, #5
 800a3b4:	d90d      	bls.n	800a3d2 <ADC_ConversionStop+0x14a>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800a3b6:	687b      	ldr	r3, [r7, #4]
 800a3b8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800a3ba:	f043 0210 	orr.w	r2, r3, #16
 800a3be:	687b      	ldr	r3, [r7, #4]
 800a3c0:	65da      	str	r2, [r3, #92]	; 0x5c

        /* Set ADC error code to ADC peripheral internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800a3c2:	687b      	ldr	r3, [r7, #4]
 800a3c4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800a3c6:	f043 0201 	orr.w	r2, r3, #1
 800a3ca:	687b      	ldr	r3, [r7, #4]
 800a3cc:	661a      	str	r2, [r3, #96]	; 0x60

        return HAL_ERROR;
 800a3ce:	2301      	movs	r3, #1
 800a3d0:	e007      	b.n	800a3e2 <ADC_ConversionStop+0x15a>
    while ((hadc->Instance->CR & tmp_ADC_CR_ADSTART_JADSTART) != 0UL)
 800a3d2:	687b      	ldr	r3, [r7, #4]
 800a3d4:	681b      	ldr	r3, [r3, #0]
 800a3d6:	689a      	ldr	r2, [r3, #8]
 800a3d8:	697b      	ldr	r3, [r7, #20]
 800a3da:	4013      	ands	r3, r2
 800a3dc:	2b00      	cmp	r3, #0
 800a3de:	d1e3      	bne.n	800a3a8 <ADC_ConversionStop+0x120>
    }

  }

  /* Return HAL status */
  return HAL_OK;
 800a3e0:	2300      	movs	r3, #0
}
 800a3e2:	4618      	mov	r0, r3
 800a3e4:	3720      	adds	r7, #32
 800a3e6:	46bd      	mov	sp, r7
 800a3e8:	bd80      	pop	{r7, pc}
 800a3ea:	bf00      	nop
 800a3ec:	a33fffff 	.word	0xa33fffff

0800a3f0 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 800a3f0:	b580      	push	{r7, lr}
 800a3f2:	b084      	sub	sp, #16
 800a3f4:	af00      	add	r7, sp, #0
 800a3f6:	6078      	str	r0, [r7, #4]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 800a3f8:	687b      	ldr	r3, [r7, #4]
 800a3fa:	681b      	ldr	r3, [r3, #0]
 800a3fc:	4618      	mov	r0, r3
 800a3fe:	f7ff f807 	bl	8009410 <LL_ADC_IsEnabled>
 800a402:	4603      	mov	r3, r0
 800a404:	2b00      	cmp	r3, #0
 800a406:	d146      	bne.n	800a496 <ADC_Enable+0xa6>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
 800a408:	687b      	ldr	r3, [r7, #4]
 800a40a:	681b      	ldr	r3, [r3, #0]
 800a40c:	689a      	ldr	r2, [r3, #8]
 800a40e:	4b24      	ldr	r3, [pc, #144]	; (800a4a0 <ADC_Enable+0xb0>)
 800a410:	4013      	ands	r3, r2
 800a412:	2b00      	cmp	r3, #0
 800a414:	d00d      	beq.n	800a432 <ADC_Enable+0x42>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800a416:	687b      	ldr	r3, [r7, #4]
 800a418:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800a41a:	f043 0210 	orr.w	r2, r3, #16
 800a41e:	687b      	ldr	r3, [r7, #4]
 800a420:	65da      	str	r2, [r3, #92]	; 0x5c

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800a422:	687b      	ldr	r3, [r7, #4]
 800a424:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800a426:	f043 0201 	orr.w	r2, r3, #1
 800a42a:	687b      	ldr	r3, [r7, #4]
 800a42c:	661a      	str	r2, [r3, #96]	; 0x60

      return HAL_ERROR;
 800a42e:	2301      	movs	r3, #1
 800a430:	e032      	b.n	800a498 <ADC_Enable+0xa8>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 800a432:	687b      	ldr	r3, [r7, #4]
 800a434:	681b      	ldr	r3, [r3, #0]
 800a436:	4618      	mov	r0, r3
 800a438:	f7fe ffc2 	bl	80093c0 <LL_ADC_Enable>

    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();
 800a43c:	f7fe fde8 	bl	8009010 <HAL_GetTick>
 800a440:	60f8      	str	r0, [r7, #12]

    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 800a442:	e021      	b.n	800a488 <ADC_Enable+0x98>
          The workaround is to continue setting ADEN until ADRDY is becomes 1.
          Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
          4 ADC clock cycle duration */
      /* Note: Test of ADC enabled required due to hardware constraint to     */
      /*       not enable ADC if already enabled.                             */
      if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 800a444:	687b      	ldr	r3, [r7, #4]
 800a446:	681b      	ldr	r3, [r3, #0]
 800a448:	4618      	mov	r0, r3
 800a44a:	f7fe ffe1 	bl	8009410 <LL_ADC_IsEnabled>
 800a44e:	4603      	mov	r3, r0
 800a450:	2b00      	cmp	r3, #0
 800a452:	d104      	bne.n	800a45e <ADC_Enable+0x6e>
      {
        LL_ADC_Enable(hadc->Instance);
 800a454:	687b      	ldr	r3, [r7, #4]
 800a456:	681b      	ldr	r3, [r3, #0]
 800a458:	4618      	mov	r0, r3
 800a45a:	f7fe ffb1 	bl	80093c0 <LL_ADC_Enable>
      }

      if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 800a45e:	f7fe fdd7 	bl	8009010 <HAL_GetTick>
 800a462:	4602      	mov	r2, r0
 800a464:	68fb      	ldr	r3, [r7, #12]
 800a466:	1ad3      	subs	r3, r2, r3
 800a468:	2b02      	cmp	r3, #2
 800a46a:	d90d      	bls.n	800a488 <ADC_Enable+0x98>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800a46c:	687b      	ldr	r3, [r7, #4]
 800a46e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800a470:	f043 0210 	orr.w	r2, r3, #16
 800a474:	687b      	ldr	r3, [r7, #4]
 800a476:	65da      	str	r2, [r3, #92]	; 0x5c

        /* Set ADC error code to ADC peripheral internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800a478:	687b      	ldr	r3, [r7, #4]
 800a47a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800a47c:	f043 0201 	orr.w	r2, r3, #1
 800a480:	687b      	ldr	r3, [r7, #4]
 800a482:	661a      	str	r2, [r3, #96]	; 0x60

        return HAL_ERROR;
 800a484:	2301      	movs	r3, #1
 800a486:	e007      	b.n	800a498 <ADC_Enable+0xa8>
    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 800a488:	687b      	ldr	r3, [r7, #4]
 800a48a:	681b      	ldr	r3, [r3, #0]
 800a48c:	681b      	ldr	r3, [r3, #0]
 800a48e:	f003 0301 	and.w	r3, r3, #1
 800a492:	2b01      	cmp	r3, #1
 800a494:	d1d6      	bne.n	800a444 <ADC_Enable+0x54>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 800a496:	2300      	movs	r3, #0
}
 800a498:	4618      	mov	r0, r3
 800a49a:	3710      	adds	r7, #16
 800a49c:	46bd      	mov	sp, r7
 800a49e:	bd80      	pop	{r7, pc}
 800a4a0:	8000003f 	.word	0x8000003f

0800a4a4 <ADC_Disable>:
  *         stopped.
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Disable(ADC_HandleTypeDef *hadc)
{
 800a4a4:	b580      	push	{r7, lr}
 800a4a6:	b084      	sub	sp, #16
 800a4a8:	af00      	add	r7, sp, #0
 800a4aa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  const uint32_t tmp_adc_is_disable_on_going = LL_ADC_IsDisableOngoing(hadc->Instance);
 800a4ac:	687b      	ldr	r3, [r7, #4]
 800a4ae:	681b      	ldr	r3, [r3, #0]
 800a4b0:	4618      	mov	r0, r3
 800a4b2:	f7fe ffc0 	bl	8009436 <LL_ADC_IsDisableOngoing>
 800a4b6:	60f8      	str	r0, [r7, #12]

  /* Verification if ADC is not already disabled:                             */
  /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
  /*       disabled.                                                          */
  if ((LL_ADC_IsEnabled(hadc->Instance) != 0UL)
 800a4b8:	687b      	ldr	r3, [r7, #4]
 800a4ba:	681b      	ldr	r3, [r3, #0]
 800a4bc:	4618      	mov	r0, r3
 800a4be:	f7fe ffa7 	bl	8009410 <LL_ADC_IsEnabled>
 800a4c2:	4603      	mov	r3, r0
 800a4c4:	2b00      	cmp	r3, #0
 800a4c6:	d040      	beq.n	800a54a <ADC_Disable+0xa6>
      && (tmp_adc_is_disable_on_going == 0UL)
 800a4c8:	68fb      	ldr	r3, [r7, #12]
 800a4ca:	2b00      	cmp	r3, #0
 800a4cc:	d13d      	bne.n	800a54a <ADC_Disable+0xa6>
     )
  {
    /* Check if conditions to disable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_JADSTART | ADC_CR_ADSTART | ADC_CR_ADEN)) == ADC_CR_ADEN)
 800a4ce:	687b      	ldr	r3, [r7, #4]
 800a4d0:	681b      	ldr	r3, [r3, #0]
 800a4d2:	689b      	ldr	r3, [r3, #8]
 800a4d4:	f003 030d 	and.w	r3, r3, #13
 800a4d8:	2b01      	cmp	r3, #1
 800a4da:	d10c      	bne.n	800a4f6 <ADC_Disable+0x52>
    {
      /* Disable the ADC peripheral */
      LL_ADC_Disable(hadc->Instance);
 800a4dc:	687b      	ldr	r3, [r7, #4]
 800a4de:	681b      	ldr	r3, [r3, #0]
 800a4e0:	4618      	mov	r0, r3
 800a4e2:	f7fe ff81 	bl	80093e8 <LL_ADC_Disable>
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOSMP | ADC_FLAG_RDY));
 800a4e6:	687b      	ldr	r3, [r7, #4]
 800a4e8:	681b      	ldr	r3, [r3, #0]
 800a4ea:	2203      	movs	r2, #3
 800a4ec:	601a      	str	r2, [r3, #0]
      return HAL_ERROR;
    }

    /* Wait for ADC effectively disabled */
    /* Get tick count */
    tickstart = HAL_GetTick();
 800a4ee:	f7fe fd8f 	bl	8009010 <HAL_GetTick>
 800a4f2:	60b8      	str	r0, [r7, #8]

    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 800a4f4:	e022      	b.n	800a53c <ADC_Disable+0x98>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800a4f6:	687b      	ldr	r3, [r7, #4]
 800a4f8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800a4fa:	f043 0210 	orr.w	r2, r3, #16
 800a4fe:	687b      	ldr	r3, [r7, #4]
 800a500:	65da      	str	r2, [r3, #92]	; 0x5c
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800a502:	687b      	ldr	r3, [r7, #4]
 800a504:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800a506:	f043 0201 	orr.w	r2, r3, #1
 800a50a:	687b      	ldr	r3, [r7, #4]
 800a50c:	661a      	str	r2, [r3, #96]	; 0x60
      return HAL_ERROR;
 800a50e:	2301      	movs	r3, #1
 800a510:	e01c      	b.n	800a54c <ADC_Disable+0xa8>
    {
      if ((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 800a512:	f7fe fd7d 	bl	8009010 <HAL_GetTick>
 800a516:	4602      	mov	r2, r0
 800a518:	68bb      	ldr	r3, [r7, #8]
 800a51a:	1ad3      	subs	r3, r2, r3
 800a51c:	2b02      	cmp	r3, #2
 800a51e:	d90d      	bls.n	800a53c <ADC_Disable+0x98>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800a520:	687b      	ldr	r3, [r7, #4]
 800a522:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800a524:	f043 0210 	orr.w	r2, r3, #16
 800a528:	687b      	ldr	r3, [r7, #4]
 800a52a:	65da      	str	r2, [r3, #92]	; 0x5c

        /* Set ADC error code to ADC peripheral internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800a52c:	687b      	ldr	r3, [r7, #4]
 800a52e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800a530:	f043 0201 	orr.w	r2, r3, #1
 800a534:	687b      	ldr	r3, [r7, #4]
 800a536:	661a      	str	r2, [r3, #96]	; 0x60

        return HAL_ERROR;
 800a538:	2301      	movs	r3, #1
 800a53a:	e007      	b.n	800a54c <ADC_Disable+0xa8>
    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 800a53c:	687b      	ldr	r3, [r7, #4]
 800a53e:	681b      	ldr	r3, [r3, #0]
 800a540:	689b      	ldr	r3, [r3, #8]
 800a542:	f003 0301 	and.w	r3, r3, #1
 800a546:	2b00      	cmp	r3, #0
 800a548:	d1e3      	bne.n	800a512 <ADC_Disable+0x6e>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 800a54a:	2300      	movs	r3, #0
}
 800a54c:	4618      	mov	r0, r3
 800a54e:	3710      	adds	r7, #16
 800a550:	46bd      	mov	sp, r7
 800a552:	bd80      	pop	{r7, pc}

0800a554 <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 800a554:	b580      	push	{r7, lr}
 800a556:	b084      	sub	sp, #16
 800a558:	af00      	add	r7, sp, #0
 800a55a:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800a55c:	687b      	ldr	r3, [r7, #4]
 800a55e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a560:	60fb      	str	r3, [r7, #12]

  /* Update state machine on conversion status if not in error state */
  if ((hadc->State & (HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA)) == 0UL)
 800a562:	68fb      	ldr	r3, [r7, #12]
 800a564:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800a566:	f003 0350 	and.w	r3, r3, #80	; 0x50
 800a56a:	2b00      	cmp	r3, #0
 800a56c:	d14b      	bne.n	800a606 <ADC_DMAConvCplt+0xb2>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 800a56e:	68fb      	ldr	r3, [r7, #12]
 800a570:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800a572:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 800a576:	68fb      	ldr	r3, [r7, #12]
 800a578:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    /* Is it the end of the regular sequence ? */
    if ((hadc->Instance->ISR & ADC_FLAG_EOS) != 0UL)
 800a57a:	68fb      	ldr	r3, [r7, #12]
 800a57c:	681b      	ldr	r3, [r3, #0]
 800a57e:	681b      	ldr	r3, [r3, #0]
 800a580:	f003 0308 	and.w	r3, r3, #8
 800a584:	2b00      	cmp	r3, #0
 800a586:	d021      	beq.n	800a5cc <ADC_DMAConvCplt+0x78>
    {
      /* Are conversions software-triggered ? */
      if (LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 800a588:	68fb      	ldr	r3, [r7, #12]
 800a58a:	681b      	ldr	r3, [r3, #0]
 800a58c:	4618      	mov	r0, r3
 800a58e:	f7fe fe32 	bl	80091f6 <LL_ADC_REG_IsTriggerSourceSWStart>
 800a592:	4603      	mov	r3, r0
 800a594:	2b00      	cmp	r3, #0
 800a596:	d032      	beq.n	800a5fe <ADC_DMAConvCplt+0xaa>
      {
        /* Is CONT bit set ? */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_CONT) == 0UL)
 800a598:	68fb      	ldr	r3, [r7, #12]
 800a59a:	681b      	ldr	r3, [r3, #0]
 800a59c:	68db      	ldr	r3, [r3, #12]
 800a59e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800a5a2:	2b00      	cmp	r3, #0
 800a5a4:	d12b      	bne.n	800a5fe <ADC_DMAConvCplt+0xaa>
        {
          /* CONT bit is not set, no more conversions expected */
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 800a5a6:	68fb      	ldr	r3, [r7, #12]
 800a5a8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800a5aa:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800a5ae:	68fb      	ldr	r3, [r7, #12]
 800a5b0:	65da      	str	r2, [r3, #92]	; 0x5c
          if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 800a5b2:	68fb      	ldr	r3, [r7, #12]
 800a5b4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800a5b6:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800a5ba:	2b00      	cmp	r3, #0
 800a5bc:	d11f      	bne.n	800a5fe <ADC_DMAConvCplt+0xaa>
          {
            SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 800a5be:	68fb      	ldr	r3, [r7, #12]
 800a5c0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800a5c2:	f043 0201 	orr.w	r2, r3, #1
 800a5c6:	68fb      	ldr	r3, [r7, #12]
 800a5c8:	65da      	str	r2, [r3, #92]	; 0x5c
 800a5ca:	e018      	b.n	800a5fe <ADC_DMAConvCplt+0xaa>
    }
    else
    {
      /* DMA End of Transfer interrupt was triggered but conversions sequence
         is not over. If DMACFG is set to 0, conversions are stopped. */
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMACFG) == 0UL)
 800a5cc:	68fb      	ldr	r3, [r7, #12]
 800a5ce:	681b      	ldr	r3, [r3, #0]
 800a5d0:	68db      	ldr	r3, [r3, #12]
 800a5d2:	f003 0302 	and.w	r3, r3, #2
 800a5d6:	2b00      	cmp	r3, #0
 800a5d8:	d111      	bne.n	800a5fe <ADC_DMAConvCplt+0xaa>
      {
        /* DMACFG bit is not set, conversions are stopped. */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 800a5da:	68fb      	ldr	r3, [r7, #12]
 800a5dc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800a5de:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800a5e2:	68fb      	ldr	r3, [r7, #12]
 800a5e4:	65da      	str	r2, [r3, #92]	; 0x5c
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 800a5e6:	68fb      	ldr	r3, [r7, #12]
 800a5e8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800a5ea:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800a5ee:	2b00      	cmp	r3, #0
 800a5f0:	d105      	bne.n	800a5fe <ADC_DMAConvCplt+0xaa>
        {
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 800a5f2:	68fb      	ldr	r3, [r7, #12]
 800a5f4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800a5f6:	f043 0201 	orr.w	r2, r3, #1
 800a5fa:	68fb      	ldr	r3, [r7, #12]
 800a5fc:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 800a5fe:	68f8      	ldr	r0, [r7, #12]
 800a600:	f7fb ff8e 	bl	8006520 <HAL_ADC_ConvCpltCallback>
    {
      /* Call ADC DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 800a604:	e00e      	b.n	800a624 <ADC_DMAConvCplt+0xd0>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 800a606:	68fb      	ldr	r3, [r7, #12]
 800a608:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800a60a:	f003 0310 	and.w	r3, r3, #16
 800a60e:	2b00      	cmp	r3, #0
 800a610:	d003      	beq.n	800a61a <ADC_DMAConvCplt+0xc6>
      HAL_ADC_ErrorCallback(hadc);
 800a612:	68f8      	ldr	r0, [r7, #12]
 800a614:	f7ff fa7d 	bl	8009b12 <HAL_ADC_ErrorCallback>
}
 800a618:	e004      	b.n	800a624 <ADC_DMAConvCplt+0xd0>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 800a61a:	68fb      	ldr	r3, [r7, #12]
 800a61c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a61e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a620:	6878      	ldr	r0, [r7, #4]
 800a622:	4798      	blx	r3
}
 800a624:	bf00      	nop
 800a626:	3710      	adds	r7, #16
 800a628:	46bd      	mov	sp, r7
 800a62a:	bd80      	pop	{r7, pc}

0800a62c <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)
{
 800a62c:	b580      	push	{r7, lr}
 800a62e:	b084      	sub	sp, #16
 800a630:	af00      	add	r7, sp, #0
 800a632:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800a634:	687b      	ldr	r3, [r7, #4]
 800a636:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a638:	60fb      	str	r3, [r7, #12]

  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 800a63a:	68f8      	ldr	r0, [r7, #12]
 800a63c:	f7ff fa5f 	bl	8009afe <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 800a640:	bf00      	nop
 800a642:	3710      	adds	r7, #16
 800a644:	46bd      	mov	sp, r7
 800a646:	bd80      	pop	{r7, pc}

0800a648 <ADC_DMAError>:
  * @brief  DMA error callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAError(DMA_HandleTypeDef *hdma)
{
 800a648:	b580      	push	{r7, lr}
 800a64a:	b084      	sub	sp, #16
 800a64c:	af00      	add	r7, sp, #0
 800a64e:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800a650:	687b      	ldr	r3, [r7, #4]
 800a652:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a654:	60fb      	str	r3, [r7, #12]

  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 800a656:	68fb      	ldr	r3, [r7, #12]
 800a658:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800a65a:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800a65e:	68fb      	ldr	r3, [r7, #12]
 800a660:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 800a662:	68fb      	ldr	r3, [r7, #12]
 800a664:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800a666:	f043 0204 	orr.w	r2, r3, #4
 800a66a:	68fb      	ldr	r3, [r7, #12]
 800a66c:	661a      	str	r2, [r3, #96]	; 0x60

  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 800a66e:	68f8      	ldr	r0, [r7, #12]
 800a670:	f7ff fa4f 	bl	8009b12 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 800a674:	bf00      	nop
 800a676:	3710      	adds	r7, #16
 800a678:	46bd      	mov	sp, r7
 800a67a:	bd80      	pop	{r7, pc}

0800a67c <LL_ADC_IsEnabled>:
{
 800a67c:	b480      	push	{r7}
 800a67e:	b083      	sub	sp, #12
 800a680:	af00      	add	r7, sp, #0
 800a682:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 800a684:	687b      	ldr	r3, [r7, #4]
 800a686:	689b      	ldr	r3, [r3, #8]
 800a688:	f003 0301 	and.w	r3, r3, #1
 800a68c:	2b01      	cmp	r3, #1
 800a68e:	d101      	bne.n	800a694 <LL_ADC_IsEnabled+0x18>
 800a690:	2301      	movs	r3, #1
 800a692:	e000      	b.n	800a696 <LL_ADC_IsEnabled+0x1a>
 800a694:	2300      	movs	r3, #0
}
 800a696:	4618      	mov	r0, r3
 800a698:	370c      	adds	r7, #12
 800a69a:	46bd      	mov	sp, r7
 800a69c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a6a0:	4770      	bx	lr

0800a6a2 <LL_ADC_REG_IsConversionOngoing>:
{
 800a6a2:	b480      	push	{r7}
 800a6a4:	b083      	sub	sp, #12
 800a6a6:	af00      	add	r7, sp, #0
 800a6a8:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 800a6aa:	687b      	ldr	r3, [r7, #4]
 800a6ac:	689b      	ldr	r3, [r3, #8]
 800a6ae:	f003 0304 	and.w	r3, r3, #4
 800a6b2:	2b04      	cmp	r3, #4
 800a6b4:	d101      	bne.n	800a6ba <LL_ADC_REG_IsConversionOngoing+0x18>
 800a6b6:	2301      	movs	r3, #1
 800a6b8:	e000      	b.n	800a6bc <LL_ADC_REG_IsConversionOngoing+0x1a>
 800a6ba:	2300      	movs	r3, #0
}
 800a6bc:	4618      	mov	r0, r3
 800a6be:	370c      	adds	r7, #12
 800a6c0:	46bd      	mov	sp, r7
 800a6c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a6c6:	4770      	bx	lr

0800a6c8 <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param multimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, ADC_MultiModeTypeDef *multimode)
{
 800a6c8:	b590      	push	{r4, r7, lr}
 800a6ca:	b0a1      	sub	sp, #132	; 0x84
 800a6cc:	af00      	add	r7, sp, #0
 800a6ce:	6078      	str	r0, [r7, #4]
 800a6d0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800a6d2:	2300      	movs	r3, #0
 800a6d4:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
    assert_param(IS_ADC_DMA_ACCESS_MULTIMODE(multimode->DMAAccessMode));
    assert_param(IS_ADC_SAMPLING_DELAY(multimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 800a6d8:	687b      	ldr	r3, [r7, #4]
 800a6da:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 800a6de:	2b01      	cmp	r3, #1
 800a6e0:	d101      	bne.n	800a6e6 <HAL_ADCEx_MultiModeConfigChannel+0x1e>
 800a6e2:	2302      	movs	r3, #2
 800a6e4:	e0e3      	b.n	800a8ae <HAL_ADCEx_MultiModeConfigChannel+0x1e6>
 800a6e6:	687b      	ldr	r3, [r7, #4]
 800a6e8:	2201      	movs	r2, #1
 800a6ea:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

  ADC_MULTI_SLAVE(hadc, &tmphadcSlave);
 800a6ee:	687b      	ldr	r3, [r7, #4]
 800a6f0:	681b      	ldr	r3, [r3, #0]
 800a6f2:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800a6f6:	d102      	bne.n	800a6fe <HAL_ADCEx_MultiModeConfigChannel+0x36>
 800a6f8:	4b6f      	ldr	r3, [pc, #444]	; (800a8b8 <HAL_ADCEx_MultiModeConfigChannel+0x1f0>)
 800a6fa:	60bb      	str	r3, [r7, #8]
 800a6fc:	e009      	b.n	800a712 <HAL_ADCEx_MultiModeConfigChannel+0x4a>
 800a6fe:	687b      	ldr	r3, [r7, #4]
 800a700:	681b      	ldr	r3, [r3, #0]
 800a702:	4a6e      	ldr	r2, [pc, #440]	; (800a8bc <HAL_ADCEx_MultiModeConfigChannel+0x1f4>)
 800a704:	4293      	cmp	r3, r2
 800a706:	d102      	bne.n	800a70e <HAL_ADCEx_MultiModeConfigChannel+0x46>
 800a708:	4b6d      	ldr	r3, [pc, #436]	; (800a8c0 <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 800a70a:	60bb      	str	r3, [r7, #8]
 800a70c:	e001      	b.n	800a712 <HAL_ADCEx_MultiModeConfigChannel+0x4a>
 800a70e:	2300      	movs	r3, #0
 800a710:	60bb      	str	r3, [r7, #8]

  if (tmphadcSlave.Instance == NULL)
 800a712:	68bb      	ldr	r3, [r7, #8]
 800a714:	2b00      	cmp	r3, #0
 800a716:	d10b      	bne.n	800a730 <HAL_ADCEx_MultiModeConfigChannel+0x68>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800a718:	687b      	ldr	r3, [r7, #4]
 800a71a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800a71c:	f043 0220 	orr.w	r2, r3, #32
 800a720:	687b      	ldr	r3, [r7, #4]
 800a722:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 800a724:	687b      	ldr	r3, [r7, #4]
 800a726:	2200      	movs	r2, #0
 800a728:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

    return HAL_ERROR;
 800a72c:	2301      	movs	r3, #1
 800a72e:	e0be      	b.n	800a8ae <HAL_ADCEx_MultiModeConfigChannel+0x1e6>
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DMA configuration                                           */
  /*  - Multimode DMA mode                                                    */
  tmphadcSlave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmphadcSlave)->Instance);
 800a730:	68bb      	ldr	r3, [r7, #8]
 800a732:	4618      	mov	r0, r3
 800a734:	f7ff ffb5 	bl	800a6a2 <LL_ADC_REG_IsConversionOngoing>
 800a738:	67b8      	str	r0, [r7, #120]	; 0x78
  if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 800a73a:	687b      	ldr	r3, [r7, #4]
 800a73c:	681b      	ldr	r3, [r3, #0]
 800a73e:	4618      	mov	r0, r3
 800a740:	f7ff ffaf 	bl	800a6a2 <LL_ADC_REG_IsConversionOngoing>
 800a744:	4603      	mov	r3, r0
 800a746:	2b00      	cmp	r3, #0
 800a748:	f040 80a0 	bne.w	800a88c <HAL_ADCEx_MultiModeConfigChannel+0x1c4>
      && (tmphadcSlave_conversion_on_going == 0UL))
 800a74c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800a74e:	2b00      	cmp	r3, #0
 800a750:	f040 809c 	bne.w	800a88c <HAL_ADCEx_MultiModeConfigChannel+0x1c4>
  {
    /* Pointer to the common control register */
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 800a754:	687b      	ldr	r3, [r7, #4]
 800a756:	681b      	ldr	r3, [r3, #0]
 800a758:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800a75c:	d004      	beq.n	800a768 <HAL_ADCEx_MultiModeConfigChannel+0xa0>
 800a75e:	687b      	ldr	r3, [r7, #4]
 800a760:	681b      	ldr	r3, [r3, #0]
 800a762:	4a55      	ldr	r2, [pc, #340]	; (800a8b8 <HAL_ADCEx_MultiModeConfigChannel+0x1f0>)
 800a764:	4293      	cmp	r3, r2
 800a766:	d101      	bne.n	800a76c <HAL_ADCEx_MultiModeConfigChannel+0xa4>
 800a768:	4b56      	ldr	r3, [pc, #344]	; (800a8c4 <HAL_ADCEx_MultiModeConfigChannel+0x1fc>)
 800a76a:	e000      	b.n	800a76e <HAL_ADCEx_MultiModeConfigChannel+0xa6>
 800a76c:	4b56      	ldr	r3, [pc, #344]	; (800a8c8 <HAL_ADCEx_MultiModeConfigChannel+0x200>)
 800a76e:	677b      	str	r3, [r7, #116]	; 0x74

    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 800a770:	683b      	ldr	r3, [r7, #0]
 800a772:	681b      	ldr	r3, [r3, #0]
 800a774:	2b00      	cmp	r3, #0
 800a776:	d04b      	beq.n	800a810 <HAL_ADCEx_MultiModeConfigChannel+0x148>
    {
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG,
 800a778:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800a77a:	689b      	ldr	r3, [r3, #8]
 800a77c:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800a780:	683b      	ldr	r3, [r7, #0]
 800a782:	6859      	ldr	r1, [r3, #4]
 800a784:	687b      	ldr	r3, [r7, #4]
 800a786:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 800a78a:	035b      	lsls	r3, r3, #13
 800a78c:	430b      	orrs	r3, r1
 800a78e:	431a      	orrs	r2, r3
 800a790:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800a792:	609a      	str	r2, [r3, #8]
      /*      from 1 to 10 clock cycles for 10 bits,                              */
      /*      from 1 to 8 clock cycles for 8 bits                                 */
      /*      from 1 to 6 clock cycles for 6 bits                                 */
      /*    If a higher delay is selected, it will be clipped to maximum delay    */
      /*    range                                                                 */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 800a794:	687b      	ldr	r3, [r7, #4]
 800a796:	681b      	ldr	r3, [r3, #0]
 800a798:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800a79c:	d004      	beq.n	800a7a8 <HAL_ADCEx_MultiModeConfigChannel+0xe0>
 800a79e:	687b      	ldr	r3, [r7, #4]
 800a7a0:	681b      	ldr	r3, [r3, #0]
 800a7a2:	4a45      	ldr	r2, [pc, #276]	; (800a8b8 <HAL_ADCEx_MultiModeConfigChannel+0x1f0>)
 800a7a4:	4293      	cmp	r3, r2
 800a7a6:	d10f      	bne.n	800a7c8 <HAL_ADCEx_MultiModeConfigChannel+0x100>
 800a7a8:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
 800a7ac:	f7ff ff66 	bl	800a67c <LL_ADC_IsEnabled>
 800a7b0:	4604      	mov	r4, r0
 800a7b2:	4841      	ldr	r0, [pc, #260]	; (800a8b8 <HAL_ADCEx_MultiModeConfigChannel+0x1f0>)
 800a7b4:	f7ff ff62 	bl	800a67c <LL_ADC_IsEnabled>
 800a7b8:	4603      	mov	r3, r0
 800a7ba:	4323      	orrs	r3, r4
 800a7bc:	2b00      	cmp	r3, #0
 800a7be:	bf0c      	ite	eq
 800a7c0:	2301      	moveq	r3, #1
 800a7c2:	2300      	movne	r3, #0
 800a7c4:	b2db      	uxtb	r3, r3
 800a7c6:	e012      	b.n	800a7ee <HAL_ADCEx_MultiModeConfigChannel+0x126>
 800a7c8:	483c      	ldr	r0, [pc, #240]	; (800a8bc <HAL_ADCEx_MultiModeConfigChannel+0x1f4>)
 800a7ca:	f7ff ff57 	bl	800a67c <LL_ADC_IsEnabled>
 800a7ce:	4604      	mov	r4, r0
 800a7d0:	483b      	ldr	r0, [pc, #236]	; (800a8c0 <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 800a7d2:	f7ff ff53 	bl	800a67c <LL_ADC_IsEnabled>
 800a7d6:	4603      	mov	r3, r0
 800a7d8:	431c      	orrs	r4, r3
 800a7da:	483c      	ldr	r0, [pc, #240]	; (800a8cc <HAL_ADCEx_MultiModeConfigChannel+0x204>)
 800a7dc:	f7ff ff4e 	bl	800a67c <LL_ADC_IsEnabled>
 800a7e0:	4603      	mov	r3, r0
 800a7e2:	4323      	orrs	r3, r4
 800a7e4:	2b00      	cmp	r3, #0
 800a7e6:	bf0c      	ite	eq
 800a7e8:	2301      	moveq	r3, #1
 800a7ea:	2300      	movne	r3, #0
 800a7ec:	b2db      	uxtb	r3, r3
 800a7ee:	2b00      	cmp	r3, #0
 800a7f0:	d056      	beq.n	800a8a0 <HAL_ADCEx_MultiModeConfigChannel+0x1d8>
      {
        MODIFY_REG(tmpADC_Common->CCR,
 800a7f2:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800a7f4:	689b      	ldr	r3, [r3, #8]
 800a7f6:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 800a7fa:	f023 030f 	bic.w	r3, r3, #15
 800a7fe:	683a      	ldr	r2, [r7, #0]
 800a800:	6811      	ldr	r1, [r2, #0]
 800a802:	683a      	ldr	r2, [r7, #0]
 800a804:	6892      	ldr	r2, [r2, #8]
 800a806:	430a      	orrs	r2, r1
 800a808:	431a      	orrs	r2, r3
 800a80a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800a80c:	609a      	str	r2, [r3, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 800a80e:	e047      	b.n	800a8a0 <HAL_ADCEx_MultiModeConfigChannel+0x1d8>
                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG);
 800a810:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800a812:	689b      	ldr	r3, [r3, #8]
 800a814:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800a818:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800a81a:	609a      	str	r2, [r3, #8]

      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 800a81c:	687b      	ldr	r3, [r7, #4]
 800a81e:	681b      	ldr	r3, [r3, #0]
 800a820:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800a824:	d004      	beq.n	800a830 <HAL_ADCEx_MultiModeConfigChannel+0x168>
 800a826:	687b      	ldr	r3, [r7, #4]
 800a828:	681b      	ldr	r3, [r3, #0]
 800a82a:	4a23      	ldr	r2, [pc, #140]	; (800a8b8 <HAL_ADCEx_MultiModeConfigChannel+0x1f0>)
 800a82c:	4293      	cmp	r3, r2
 800a82e:	d10f      	bne.n	800a850 <HAL_ADCEx_MultiModeConfigChannel+0x188>
 800a830:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
 800a834:	f7ff ff22 	bl	800a67c <LL_ADC_IsEnabled>
 800a838:	4604      	mov	r4, r0
 800a83a:	481f      	ldr	r0, [pc, #124]	; (800a8b8 <HAL_ADCEx_MultiModeConfigChannel+0x1f0>)
 800a83c:	f7ff ff1e 	bl	800a67c <LL_ADC_IsEnabled>
 800a840:	4603      	mov	r3, r0
 800a842:	4323      	orrs	r3, r4
 800a844:	2b00      	cmp	r3, #0
 800a846:	bf0c      	ite	eq
 800a848:	2301      	moveq	r3, #1
 800a84a:	2300      	movne	r3, #0
 800a84c:	b2db      	uxtb	r3, r3
 800a84e:	e012      	b.n	800a876 <HAL_ADCEx_MultiModeConfigChannel+0x1ae>
 800a850:	481a      	ldr	r0, [pc, #104]	; (800a8bc <HAL_ADCEx_MultiModeConfigChannel+0x1f4>)
 800a852:	f7ff ff13 	bl	800a67c <LL_ADC_IsEnabled>
 800a856:	4604      	mov	r4, r0
 800a858:	4819      	ldr	r0, [pc, #100]	; (800a8c0 <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 800a85a:	f7ff ff0f 	bl	800a67c <LL_ADC_IsEnabled>
 800a85e:	4603      	mov	r3, r0
 800a860:	431c      	orrs	r4, r3
 800a862:	481a      	ldr	r0, [pc, #104]	; (800a8cc <HAL_ADCEx_MultiModeConfigChannel+0x204>)
 800a864:	f7ff ff0a 	bl	800a67c <LL_ADC_IsEnabled>
 800a868:	4603      	mov	r3, r0
 800a86a:	4323      	orrs	r3, r4
 800a86c:	2b00      	cmp	r3, #0
 800a86e:	bf0c      	ite	eq
 800a870:	2301      	moveq	r3, #1
 800a872:	2300      	movne	r3, #0
 800a874:	b2db      	uxtb	r3, r3
 800a876:	2b00      	cmp	r3, #0
 800a878:	d012      	beq.n	800a8a0 <HAL_ADCEx_MultiModeConfigChannel+0x1d8>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 800a87a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800a87c:	689b      	ldr	r3, [r3, #8]
 800a87e:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 800a882:	f023 030f 	bic.w	r3, r3, #15
 800a886:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 800a888:	6093      	str	r3, [r2, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 800a88a:	e009      	b.n	800a8a0 <HAL_ADCEx_MultiModeConfigChannel+0x1d8>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800a88c:	687b      	ldr	r3, [r7, #4]
 800a88e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800a890:	f043 0220 	orr.w	r2, r3, #32
 800a894:	687b      	ldr	r3, [r7, #4]
 800a896:	65da      	str	r2, [r3, #92]	; 0x5c

    tmp_hal_status = HAL_ERROR;
 800a898:	2301      	movs	r3, #1
 800a89a:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
 800a89e:	e000      	b.n	800a8a2 <HAL_ADCEx_MultiModeConfigChannel+0x1da>
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 800a8a0:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800a8a2:	687b      	ldr	r3, [r7, #4]
 800a8a4:	2200      	movs	r2, #0
 800a8a6:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

  /* Return function status */
  return tmp_hal_status;
 800a8aa:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
}
 800a8ae:	4618      	mov	r0, r3
 800a8b0:	3784      	adds	r7, #132	; 0x84
 800a8b2:	46bd      	mov	sp, r7
 800a8b4:	bd90      	pop	{r4, r7, pc}
 800a8b6:	bf00      	nop
 800a8b8:	50000100 	.word	0x50000100
 800a8bc:	50000400 	.word	0x50000400
 800a8c0:	50000500 	.word	0x50000500
 800a8c4:	50000300 	.word	0x50000300
 800a8c8:	50000700 	.word	0x50000700
 800a8cc:	50000600 	.word	0x50000600

0800a8d0 <LL_EXTI_EnableIT_0_31>:
{
 800a8d0:	b480      	push	{r7}
 800a8d2:	b083      	sub	sp, #12
 800a8d4:	af00      	add	r7, sp, #0
 800a8d6:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->IMR1, ExtiLine);
 800a8d8:	4b05      	ldr	r3, [pc, #20]	; (800a8f0 <LL_EXTI_EnableIT_0_31+0x20>)
 800a8da:	681a      	ldr	r2, [r3, #0]
 800a8dc:	4904      	ldr	r1, [pc, #16]	; (800a8f0 <LL_EXTI_EnableIT_0_31+0x20>)
 800a8de:	687b      	ldr	r3, [r7, #4]
 800a8e0:	4313      	orrs	r3, r2
 800a8e2:	600b      	str	r3, [r1, #0]
}
 800a8e4:	bf00      	nop
 800a8e6:	370c      	adds	r7, #12
 800a8e8:	46bd      	mov	sp, r7
 800a8ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a8ee:	4770      	bx	lr
 800a8f0:	40010400 	.word	0x40010400

0800a8f4 <LL_EXTI_EnableIT_32_63>:
{
 800a8f4:	b480      	push	{r7}
 800a8f6:	b083      	sub	sp, #12
 800a8f8:	af00      	add	r7, sp, #0
 800a8fa:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->IMR2, ExtiLine);
 800a8fc:	4b05      	ldr	r3, [pc, #20]	; (800a914 <LL_EXTI_EnableIT_32_63+0x20>)
 800a8fe:	6a1a      	ldr	r2, [r3, #32]
 800a900:	4904      	ldr	r1, [pc, #16]	; (800a914 <LL_EXTI_EnableIT_32_63+0x20>)
 800a902:	687b      	ldr	r3, [r7, #4]
 800a904:	4313      	orrs	r3, r2
 800a906:	620b      	str	r3, [r1, #32]
}
 800a908:	bf00      	nop
 800a90a:	370c      	adds	r7, #12
 800a90c:	46bd      	mov	sp, r7
 800a90e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a912:	4770      	bx	lr
 800a914:	40010400 	.word	0x40010400

0800a918 <LL_EXTI_DisableIT_0_31>:
{
 800a918:	b480      	push	{r7}
 800a91a:	b083      	sub	sp, #12
 800a91c:	af00      	add	r7, sp, #0
 800a91e:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->IMR1, ExtiLine);
 800a920:	4b06      	ldr	r3, [pc, #24]	; (800a93c <LL_EXTI_DisableIT_0_31+0x24>)
 800a922:	681a      	ldr	r2, [r3, #0]
 800a924:	687b      	ldr	r3, [r7, #4]
 800a926:	43db      	mvns	r3, r3
 800a928:	4904      	ldr	r1, [pc, #16]	; (800a93c <LL_EXTI_DisableIT_0_31+0x24>)
 800a92a:	4013      	ands	r3, r2
 800a92c:	600b      	str	r3, [r1, #0]
}
 800a92e:	bf00      	nop
 800a930:	370c      	adds	r7, #12
 800a932:	46bd      	mov	sp, r7
 800a934:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a938:	4770      	bx	lr
 800a93a:	bf00      	nop
 800a93c:	40010400 	.word	0x40010400

0800a940 <LL_EXTI_DisableIT_32_63>:
{
 800a940:	b480      	push	{r7}
 800a942:	b083      	sub	sp, #12
 800a944:	af00      	add	r7, sp, #0
 800a946:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->IMR2, ExtiLine);
 800a948:	4b06      	ldr	r3, [pc, #24]	; (800a964 <LL_EXTI_DisableIT_32_63+0x24>)
 800a94a:	6a1a      	ldr	r2, [r3, #32]
 800a94c:	687b      	ldr	r3, [r7, #4]
 800a94e:	43db      	mvns	r3, r3
 800a950:	4904      	ldr	r1, [pc, #16]	; (800a964 <LL_EXTI_DisableIT_32_63+0x24>)
 800a952:	4013      	ands	r3, r2
 800a954:	620b      	str	r3, [r1, #32]
}
 800a956:	bf00      	nop
 800a958:	370c      	adds	r7, #12
 800a95a:	46bd      	mov	sp, r7
 800a95c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a960:	4770      	bx	lr
 800a962:	bf00      	nop
 800a964:	40010400 	.word	0x40010400

0800a968 <LL_EXTI_EnableEvent_0_31>:
{
 800a968:	b480      	push	{r7}
 800a96a:	b083      	sub	sp, #12
 800a96c:	af00      	add	r7, sp, #0
 800a96e:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->EMR1, ExtiLine);
 800a970:	4b05      	ldr	r3, [pc, #20]	; (800a988 <LL_EXTI_EnableEvent_0_31+0x20>)
 800a972:	685a      	ldr	r2, [r3, #4]
 800a974:	4904      	ldr	r1, [pc, #16]	; (800a988 <LL_EXTI_EnableEvent_0_31+0x20>)
 800a976:	687b      	ldr	r3, [r7, #4]
 800a978:	4313      	orrs	r3, r2
 800a97a:	604b      	str	r3, [r1, #4]
}
 800a97c:	bf00      	nop
 800a97e:	370c      	adds	r7, #12
 800a980:	46bd      	mov	sp, r7
 800a982:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a986:	4770      	bx	lr
 800a988:	40010400 	.word	0x40010400

0800a98c <LL_EXTI_EnableEvent_32_63>:
{
 800a98c:	b480      	push	{r7}
 800a98e:	b083      	sub	sp, #12
 800a990:	af00      	add	r7, sp, #0
 800a992:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->EMR2, ExtiLine);
 800a994:	4b05      	ldr	r3, [pc, #20]	; (800a9ac <LL_EXTI_EnableEvent_32_63+0x20>)
 800a996:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800a998:	4904      	ldr	r1, [pc, #16]	; (800a9ac <LL_EXTI_EnableEvent_32_63+0x20>)
 800a99a:	687b      	ldr	r3, [r7, #4]
 800a99c:	4313      	orrs	r3, r2
 800a99e:	624b      	str	r3, [r1, #36]	; 0x24
}
 800a9a0:	bf00      	nop
 800a9a2:	370c      	adds	r7, #12
 800a9a4:	46bd      	mov	sp, r7
 800a9a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a9aa:	4770      	bx	lr
 800a9ac:	40010400 	.word	0x40010400

0800a9b0 <LL_EXTI_DisableEvent_0_31>:
{
 800a9b0:	b480      	push	{r7}
 800a9b2:	b083      	sub	sp, #12
 800a9b4:	af00      	add	r7, sp, #0
 800a9b6:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->EMR1, ExtiLine);
 800a9b8:	4b06      	ldr	r3, [pc, #24]	; (800a9d4 <LL_EXTI_DisableEvent_0_31+0x24>)
 800a9ba:	685a      	ldr	r2, [r3, #4]
 800a9bc:	687b      	ldr	r3, [r7, #4]
 800a9be:	43db      	mvns	r3, r3
 800a9c0:	4904      	ldr	r1, [pc, #16]	; (800a9d4 <LL_EXTI_DisableEvent_0_31+0x24>)
 800a9c2:	4013      	ands	r3, r2
 800a9c4:	604b      	str	r3, [r1, #4]
}
 800a9c6:	bf00      	nop
 800a9c8:	370c      	adds	r7, #12
 800a9ca:	46bd      	mov	sp, r7
 800a9cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a9d0:	4770      	bx	lr
 800a9d2:	bf00      	nop
 800a9d4:	40010400 	.word	0x40010400

0800a9d8 <LL_EXTI_DisableEvent_32_63>:
{
 800a9d8:	b480      	push	{r7}
 800a9da:	b083      	sub	sp, #12
 800a9dc:	af00      	add	r7, sp, #0
 800a9de:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->EMR2, ExtiLine);
 800a9e0:	4b06      	ldr	r3, [pc, #24]	; (800a9fc <LL_EXTI_DisableEvent_32_63+0x24>)
 800a9e2:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800a9e4:	687b      	ldr	r3, [r7, #4]
 800a9e6:	43db      	mvns	r3, r3
 800a9e8:	4904      	ldr	r1, [pc, #16]	; (800a9fc <LL_EXTI_DisableEvent_32_63+0x24>)
 800a9ea:	4013      	ands	r3, r2
 800a9ec:	624b      	str	r3, [r1, #36]	; 0x24
}
 800a9ee:	bf00      	nop
 800a9f0:	370c      	adds	r7, #12
 800a9f2:	46bd      	mov	sp, r7
 800a9f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a9f8:	4770      	bx	lr
 800a9fa:	bf00      	nop
 800a9fc:	40010400 	.word	0x40010400

0800aa00 <LL_EXTI_EnableRisingTrig_0_31>:
{
 800aa00:	b480      	push	{r7}
 800aa02:	b083      	sub	sp, #12
 800aa04:	af00      	add	r7, sp, #0
 800aa06:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->RTSR1, ExtiLine);
 800aa08:	4b05      	ldr	r3, [pc, #20]	; (800aa20 <LL_EXTI_EnableRisingTrig_0_31+0x20>)
 800aa0a:	689a      	ldr	r2, [r3, #8]
 800aa0c:	4904      	ldr	r1, [pc, #16]	; (800aa20 <LL_EXTI_EnableRisingTrig_0_31+0x20>)
 800aa0e:	687b      	ldr	r3, [r7, #4]
 800aa10:	4313      	orrs	r3, r2
 800aa12:	608b      	str	r3, [r1, #8]
}
 800aa14:	bf00      	nop
 800aa16:	370c      	adds	r7, #12
 800aa18:	46bd      	mov	sp, r7
 800aa1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa1e:	4770      	bx	lr
 800aa20:	40010400 	.word	0x40010400

0800aa24 <LL_EXTI_EnableRisingTrig_32_63>:
{
 800aa24:	b480      	push	{r7}
 800aa26:	b083      	sub	sp, #12
 800aa28:	af00      	add	r7, sp, #0
 800aa2a:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->RTSR2, ExtiLine);
 800aa2c:	4b05      	ldr	r3, [pc, #20]	; (800aa44 <LL_EXTI_EnableRisingTrig_32_63+0x20>)
 800aa2e:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800aa30:	4904      	ldr	r1, [pc, #16]	; (800aa44 <LL_EXTI_EnableRisingTrig_32_63+0x20>)
 800aa32:	687b      	ldr	r3, [r7, #4]
 800aa34:	4313      	orrs	r3, r2
 800aa36:	628b      	str	r3, [r1, #40]	; 0x28
}
 800aa38:	bf00      	nop
 800aa3a:	370c      	adds	r7, #12
 800aa3c:	46bd      	mov	sp, r7
 800aa3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa42:	4770      	bx	lr
 800aa44:	40010400 	.word	0x40010400

0800aa48 <LL_EXTI_DisableRisingTrig_0_31>:
{
 800aa48:	b480      	push	{r7}
 800aa4a:	b083      	sub	sp, #12
 800aa4c:	af00      	add	r7, sp, #0
 800aa4e:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->RTSR1, ExtiLine);
 800aa50:	4b06      	ldr	r3, [pc, #24]	; (800aa6c <LL_EXTI_DisableRisingTrig_0_31+0x24>)
 800aa52:	689a      	ldr	r2, [r3, #8]
 800aa54:	687b      	ldr	r3, [r7, #4]
 800aa56:	43db      	mvns	r3, r3
 800aa58:	4904      	ldr	r1, [pc, #16]	; (800aa6c <LL_EXTI_DisableRisingTrig_0_31+0x24>)
 800aa5a:	4013      	ands	r3, r2
 800aa5c:	608b      	str	r3, [r1, #8]
}
 800aa5e:	bf00      	nop
 800aa60:	370c      	adds	r7, #12
 800aa62:	46bd      	mov	sp, r7
 800aa64:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa68:	4770      	bx	lr
 800aa6a:	bf00      	nop
 800aa6c:	40010400 	.word	0x40010400

0800aa70 <LL_EXTI_DisableRisingTrig_32_63>:
{
 800aa70:	b480      	push	{r7}
 800aa72:	b083      	sub	sp, #12
 800aa74:	af00      	add	r7, sp, #0
 800aa76:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->RTSR2, ExtiLine);
 800aa78:	4b06      	ldr	r3, [pc, #24]	; (800aa94 <LL_EXTI_DisableRisingTrig_32_63+0x24>)
 800aa7a:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800aa7c:	687b      	ldr	r3, [r7, #4]
 800aa7e:	43db      	mvns	r3, r3
 800aa80:	4904      	ldr	r1, [pc, #16]	; (800aa94 <LL_EXTI_DisableRisingTrig_32_63+0x24>)
 800aa82:	4013      	ands	r3, r2
 800aa84:	628b      	str	r3, [r1, #40]	; 0x28
}
 800aa86:	bf00      	nop
 800aa88:	370c      	adds	r7, #12
 800aa8a:	46bd      	mov	sp, r7
 800aa8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa90:	4770      	bx	lr
 800aa92:	bf00      	nop
 800aa94:	40010400 	.word	0x40010400

0800aa98 <LL_EXTI_EnableFallingTrig_0_31>:
{
 800aa98:	b480      	push	{r7}
 800aa9a:	b083      	sub	sp, #12
 800aa9c:	af00      	add	r7, sp, #0
 800aa9e:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->FTSR1, ExtiLine);
 800aaa0:	4b05      	ldr	r3, [pc, #20]	; (800aab8 <LL_EXTI_EnableFallingTrig_0_31+0x20>)
 800aaa2:	68da      	ldr	r2, [r3, #12]
 800aaa4:	4904      	ldr	r1, [pc, #16]	; (800aab8 <LL_EXTI_EnableFallingTrig_0_31+0x20>)
 800aaa6:	687b      	ldr	r3, [r7, #4]
 800aaa8:	4313      	orrs	r3, r2
 800aaaa:	60cb      	str	r3, [r1, #12]
}
 800aaac:	bf00      	nop
 800aaae:	370c      	adds	r7, #12
 800aab0:	46bd      	mov	sp, r7
 800aab2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aab6:	4770      	bx	lr
 800aab8:	40010400 	.word	0x40010400

0800aabc <LL_EXTI_EnableFallingTrig_32_63>:
{
 800aabc:	b480      	push	{r7}
 800aabe:	b083      	sub	sp, #12
 800aac0:	af00      	add	r7, sp, #0
 800aac2:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->FTSR2, ExtiLine);
 800aac4:	4b05      	ldr	r3, [pc, #20]	; (800aadc <LL_EXTI_EnableFallingTrig_32_63+0x20>)
 800aac6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800aac8:	4904      	ldr	r1, [pc, #16]	; (800aadc <LL_EXTI_EnableFallingTrig_32_63+0x20>)
 800aaca:	687b      	ldr	r3, [r7, #4]
 800aacc:	4313      	orrs	r3, r2
 800aace:	62cb      	str	r3, [r1, #44]	; 0x2c
}
 800aad0:	bf00      	nop
 800aad2:	370c      	adds	r7, #12
 800aad4:	46bd      	mov	sp, r7
 800aad6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aada:	4770      	bx	lr
 800aadc:	40010400 	.word	0x40010400

0800aae0 <LL_EXTI_DisableFallingTrig_0_31>:
{
 800aae0:	b480      	push	{r7}
 800aae2:	b083      	sub	sp, #12
 800aae4:	af00      	add	r7, sp, #0
 800aae6:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->FTSR1, ExtiLine);
 800aae8:	4b06      	ldr	r3, [pc, #24]	; (800ab04 <LL_EXTI_DisableFallingTrig_0_31+0x24>)
 800aaea:	68da      	ldr	r2, [r3, #12]
 800aaec:	687b      	ldr	r3, [r7, #4]
 800aaee:	43db      	mvns	r3, r3
 800aaf0:	4904      	ldr	r1, [pc, #16]	; (800ab04 <LL_EXTI_DisableFallingTrig_0_31+0x24>)
 800aaf2:	4013      	ands	r3, r2
 800aaf4:	60cb      	str	r3, [r1, #12]
}
 800aaf6:	bf00      	nop
 800aaf8:	370c      	adds	r7, #12
 800aafa:	46bd      	mov	sp, r7
 800aafc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab00:	4770      	bx	lr
 800ab02:	bf00      	nop
 800ab04:	40010400 	.word	0x40010400

0800ab08 <LL_EXTI_DisableFallingTrig_32_63>:
{
 800ab08:	b480      	push	{r7}
 800ab0a:	b083      	sub	sp, #12
 800ab0c:	af00      	add	r7, sp, #0
 800ab0e:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->FTSR2, ExtiLine);
 800ab10:	4b06      	ldr	r3, [pc, #24]	; (800ab2c <LL_EXTI_DisableFallingTrig_32_63+0x24>)
 800ab12:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ab14:	687b      	ldr	r3, [r7, #4]
 800ab16:	43db      	mvns	r3, r3
 800ab18:	4904      	ldr	r1, [pc, #16]	; (800ab2c <LL_EXTI_DisableFallingTrig_32_63+0x24>)
 800ab1a:	4013      	ands	r3, r2
 800ab1c:	62cb      	str	r3, [r1, #44]	; 0x2c
}
 800ab1e:	bf00      	nop
 800ab20:	370c      	adds	r7, #12
 800ab22:	46bd      	mov	sp, r7
 800ab24:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab28:	4770      	bx	lr
 800ab2a:	bf00      	nop
 800ab2c:	40010400 	.word	0x40010400

0800ab30 <LL_EXTI_IsActiveFlag_0_31>:
{
 800ab30:	b480      	push	{r7}
 800ab32:	b083      	sub	sp, #12
 800ab34:	af00      	add	r7, sp, #0
 800ab36:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(EXTI->PR1, ExtiLine) == (ExtiLine)) ? 1UL : 0UL);
 800ab38:	4b07      	ldr	r3, [pc, #28]	; (800ab58 <LL_EXTI_IsActiveFlag_0_31+0x28>)
 800ab3a:	695a      	ldr	r2, [r3, #20]
 800ab3c:	687b      	ldr	r3, [r7, #4]
 800ab3e:	4013      	ands	r3, r2
 800ab40:	687a      	ldr	r2, [r7, #4]
 800ab42:	429a      	cmp	r2, r3
 800ab44:	d101      	bne.n	800ab4a <LL_EXTI_IsActiveFlag_0_31+0x1a>
 800ab46:	2301      	movs	r3, #1
 800ab48:	e000      	b.n	800ab4c <LL_EXTI_IsActiveFlag_0_31+0x1c>
 800ab4a:	2300      	movs	r3, #0
}
 800ab4c:	4618      	mov	r0, r3
 800ab4e:	370c      	adds	r7, #12
 800ab50:	46bd      	mov	sp, r7
 800ab52:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab56:	4770      	bx	lr
 800ab58:	40010400 	.word	0x40010400

0800ab5c <LL_EXTI_IsActiveFlag_32_63>:
{
 800ab5c:	b480      	push	{r7}
 800ab5e:	b083      	sub	sp, #12
 800ab60:	af00      	add	r7, sp, #0
 800ab62:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(EXTI->PR2, ExtiLine) == (ExtiLine)) ? 1UL : 0UL);
 800ab64:	4b07      	ldr	r3, [pc, #28]	; (800ab84 <LL_EXTI_IsActiveFlag_32_63+0x28>)
 800ab66:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800ab68:	687b      	ldr	r3, [r7, #4]
 800ab6a:	4013      	ands	r3, r2
 800ab6c:	687a      	ldr	r2, [r7, #4]
 800ab6e:	429a      	cmp	r2, r3
 800ab70:	d101      	bne.n	800ab76 <LL_EXTI_IsActiveFlag_32_63+0x1a>
 800ab72:	2301      	movs	r3, #1
 800ab74:	e000      	b.n	800ab78 <LL_EXTI_IsActiveFlag_32_63+0x1c>
 800ab76:	2300      	movs	r3, #0
}
 800ab78:	4618      	mov	r0, r3
 800ab7a:	370c      	adds	r7, #12
 800ab7c:	46bd      	mov	sp, r7
 800ab7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab82:	4770      	bx	lr
 800ab84:	40010400 	.word	0x40010400

0800ab88 <LL_EXTI_ClearFlag_0_31>:
{
 800ab88:	b480      	push	{r7}
 800ab8a:	b083      	sub	sp, #12
 800ab8c:	af00      	add	r7, sp, #0
 800ab8e:	6078      	str	r0, [r7, #4]
  WRITE_REG(EXTI->PR1, ExtiLine);
 800ab90:	4a04      	ldr	r2, [pc, #16]	; (800aba4 <LL_EXTI_ClearFlag_0_31+0x1c>)
 800ab92:	687b      	ldr	r3, [r7, #4]
 800ab94:	6153      	str	r3, [r2, #20]
}
 800ab96:	bf00      	nop
 800ab98:	370c      	adds	r7, #12
 800ab9a:	46bd      	mov	sp, r7
 800ab9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aba0:	4770      	bx	lr
 800aba2:	bf00      	nop
 800aba4:	40010400 	.word	0x40010400

0800aba8 <LL_EXTI_ClearFlag_32_63>:
  *         @arg @ref LL_EXTI_LINE_41
  * @note   (*): Available in some devices
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_ClearFlag_32_63(uint32_t ExtiLine)
{
 800aba8:	b480      	push	{r7}
 800abaa:	b083      	sub	sp, #12
 800abac:	af00      	add	r7, sp, #0
 800abae:	6078      	str	r0, [r7, #4]
  WRITE_REG(EXTI->PR2, ExtiLine);
 800abb0:	4a04      	ldr	r2, [pc, #16]	; (800abc4 <LL_EXTI_ClearFlag_32_63+0x1c>)
 800abb2:	687b      	ldr	r3, [r7, #4]
 800abb4:	6353      	str	r3, [r2, #52]	; 0x34
}
 800abb6:	bf00      	nop
 800abb8:	370c      	adds	r7, #12
 800abba:	46bd      	mov	sp, r7
 800abbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800abc0:	4770      	bx	lr
 800abc2:	bf00      	nop
 800abc4:	40010400 	.word	0x40010400

0800abc8 <HAL_COMP_Init>:
  *         To unlock the configuration, perform a system reset.
  * @param  hcomp  COMP handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_COMP_Init(COMP_HandleTypeDef *hcomp)
{
 800abc8:	b580      	push	{r7, lr}
 800abca:	b088      	sub	sp, #32
 800abcc:	af00      	add	r7, sp, #0
 800abce:	6078      	str	r0, [r7, #4]
  uint32_t tmp_csr;
  uint32_t exti_line;
  uint32_t comp_voltage_scaler_initialized; /* Value "0" if comparator voltage scaler is not initialized */
  __IO uint32_t wait_loop_index = 0UL;
 800abd0:	2300      	movs	r3, #0
 800abd2:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef status = HAL_OK;
 800abd4:	2300      	movs	r3, #0
 800abd6:	77fb      	strb	r3, [r7, #31]

  /* Check the COMP handle allocation and lock status */
  if(hcomp == NULL)
 800abd8:	687b      	ldr	r3, [r7, #4]
 800abda:	2b00      	cmp	r3, #0
 800abdc:	d102      	bne.n	800abe4 <HAL_COMP_Init+0x1c>
  {
    status = HAL_ERROR;
 800abde:	2301      	movs	r3, #1
 800abe0:	77fb      	strb	r3, [r7, #31]
 800abe2:	e180      	b.n	800aee6 <HAL_COMP_Init+0x31e>
  }
  else if(__HAL_COMP_IS_LOCKED(hcomp))
 800abe4:	687b      	ldr	r3, [r7, #4]
 800abe6:	681b      	ldr	r3, [r3, #0]
 800abe8:	681b      	ldr	r3, [r3, #0]
 800abea:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800abee:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800abf2:	d102      	bne.n	800abfa <HAL_COMP_Init+0x32>
  {
    status = HAL_ERROR;
 800abf4:	2301      	movs	r3, #1
 800abf6:	77fb      	strb	r3, [r7, #31]
 800abf8:	e175      	b.n	800aee6 <HAL_COMP_Init+0x31e>
    assert_param(IS_COMP_OUTPUTPOL(hcomp->Init.OutputPol));
    assert_param(IS_COMP_HYSTERESIS(hcomp->Init.Hysteresis));
    assert_param(IS_COMP_BLANKINGSRC_INSTANCE(hcomp->Instance, hcomp->Init.BlankingSrce));
    assert_param(IS_COMP_TRIGGERMODE(hcomp->Init.TriggerMode));

    if(hcomp->State == HAL_COMP_STATE_RESET)
 800abfa:	687b      	ldr	r3, [r7, #4]
 800abfc:	7f5b      	ldrb	r3, [r3, #29]
 800abfe:	b2db      	uxtb	r3, r3
 800ac00:	2b00      	cmp	r3, #0
 800ac02:	d108      	bne.n	800ac16 <HAL_COMP_Init+0x4e>
    {
      /* Allocate lock resource and initialize it */
      hcomp->Lock = HAL_UNLOCKED;
 800ac04:	687b      	ldr	r3, [r7, #4]
 800ac06:	2200      	movs	r2, #0
 800ac08:	771a      	strb	r2, [r3, #28]

      /* Set COMP error code to none */
      COMP_CLEAR_ERRORCODE(hcomp);
 800ac0a:	687b      	ldr	r3, [r7, #4]
 800ac0c:	2200      	movs	r2, #0
 800ac0e:	621a      	str	r2, [r3, #32]
#else
      /* Init the low level hardware */
      /* Note: Internal control clock of the comparators must                 */
      /*       be enabled in "HAL_COMP_MspInit()"                             */
      /*       using "__HAL_RCC_SYSCFG_CLK_ENABLE()".                         */
      HAL_COMP_MspInit(hcomp);
 800ac10:	6878      	ldr	r0, [r7, #4]
 800ac12:	f7fc fd01 	bl	8007618 <HAL_COMP_MspInit>
#endif /* USE_HAL_COMP_REGISTER_CALLBACKS */
    }

    /* Memorize voltage scaler state before initialization */
    comp_voltage_scaler_initialized = READ_BIT(hcomp->Instance->CSR, COMP_CSR_SCALEN);
 800ac16:	687b      	ldr	r3, [r7, #4]
 800ac18:	681b      	ldr	r3, [r3, #0]
 800ac1a:	681b      	ldr	r3, [r3, #0]
 800ac1c:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800ac20:	61bb      	str	r3, [r7, #24]

    /* Set COMP parameters */
    tmp_csr = (  hcomp->Init.InputMinus
 800ac22:	687b      	ldr	r3, [r7, #4]
 800ac24:	689a      	ldr	r2, [r3, #8]
               | hcomp->Init.InputPlus
 800ac26:	687b      	ldr	r3, [r7, #4]
 800ac28:	685b      	ldr	r3, [r3, #4]
 800ac2a:	431a      	orrs	r2, r3
               | hcomp->Init.BlankingSrce
 800ac2c:	687b      	ldr	r3, [r7, #4]
 800ac2e:	695b      	ldr	r3, [r3, #20]
 800ac30:	431a      	orrs	r2, r3
               | hcomp->Init.Hysteresis
 800ac32:	687b      	ldr	r3, [r7, #4]
 800ac34:	68db      	ldr	r3, [r3, #12]
 800ac36:	431a      	orrs	r2, r3
               | hcomp->Init.OutputPol
 800ac38:	687b      	ldr	r3, [r7, #4]
 800ac3a:	691b      	ldr	r3, [r3, #16]
    tmp_csr = (  hcomp->Init.InputMinus
 800ac3c:	4313      	orrs	r3, r2
 800ac3e:	617b      	str	r3, [r7, #20]
              );

    /* Set parameters in COMP register */
    /* Note: Update all bits except read-only, lock and enable bits */
    MODIFY_REG(hcomp->Instance->CSR,
 800ac40:	687b      	ldr	r3, [r7, #4]
 800ac42:	681b      	ldr	r3, [r3, #0]
 800ac44:	681a      	ldr	r2, [r3, #0]
 800ac46:	4b98      	ldr	r3, [pc, #608]	; (800aea8 <HAL_COMP_Init+0x2e0>)
 800ac48:	4013      	ands	r3, r2
 800ac4a:	687a      	ldr	r2, [r7, #4]
 800ac4c:	6812      	ldr	r2, [r2, #0]
 800ac4e:	6979      	ldr	r1, [r7, #20]
 800ac50:	430b      	orrs	r3, r1
 800ac52:	6013      	str	r3, [r2, #0]
               tmp_csr
              );

    /* Delay for COMP scaler bridge voltage stabilization */
    /* Apply the delay if voltage scaler bridge is required and not already enabled */
    if ((READ_BIT(hcomp->Instance->CSR, COMP_CSR_SCALEN) != 0UL) &&
 800ac54:	687b      	ldr	r3, [r7, #4]
 800ac56:	681b      	ldr	r3, [r3, #0]
 800ac58:	681b      	ldr	r3, [r3, #0]
 800ac5a:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800ac5e:	2b00      	cmp	r3, #0
 800ac60:	d015      	beq.n	800ac8e <HAL_COMP_Init+0xc6>
 800ac62:	69bb      	ldr	r3, [r7, #24]
 800ac64:	2b00      	cmp	r3, #0
 800ac66:	d112      	bne.n	800ac8e <HAL_COMP_Init+0xc6>
    {
      /* Wait loop initialization and execution */
      /* Note: Variable divided by 2 to compensate partially              */
      /*       CPU processing cycles, scaling in us split to not          */
      /*       exceed 32 bits register capacity and handle low frequency. */
      wait_loop_index = ((COMP_DELAY_VOLTAGE_SCALER_STAB_US / 10UL) * (SystemCoreClock / (100000UL * 2UL)));
 800ac68:	4b90      	ldr	r3, [pc, #576]	; (800aeac <HAL_COMP_Init+0x2e4>)
 800ac6a:	681b      	ldr	r3, [r3, #0]
 800ac6c:	099b      	lsrs	r3, r3, #6
 800ac6e:	4a90      	ldr	r2, [pc, #576]	; (800aeb0 <HAL_COMP_Init+0x2e8>)
 800ac70:	fba2 2303 	umull	r2, r3, r2, r3
 800ac74:	099a      	lsrs	r2, r3, #6
 800ac76:	4613      	mov	r3, r2
 800ac78:	009b      	lsls	r3, r3, #2
 800ac7a:	4413      	add	r3, r2
 800ac7c:	009b      	lsls	r3, r3, #2
 800ac7e:	60fb      	str	r3, [r7, #12]
      while(wait_loop_index != 0UL)
 800ac80:	e002      	b.n	800ac88 <HAL_COMP_Init+0xc0>
      {
        wait_loop_index--;
 800ac82:	68fb      	ldr	r3, [r7, #12]
 800ac84:	3b01      	subs	r3, #1
 800ac86:	60fb      	str	r3, [r7, #12]
      while(wait_loop_index != 0UL)
 800ac88:	68fb      	ldr	r3, [r7, #12]
 800ac8a:	2b00      	cmp	r3, #0
 800ac8c:	d1f9      	bne.n	800ac82 <HAL_COMP_Init+0xba>
      }
    }

    /* Get the EXTI line corresponding to the selected COMP instance */
    exti_line = COMP_GET_EXTI_LINE(hcomp->Instance);
 800ac8e:	687b      	ldr	r3, [r7, #4]
 800ac90:	681b      	ldr	r3, [r3, #0]
 800ac92:	4a88      	ldr	r2, [pc, #544]	; (800aeb4 <HAL_COMP_Init+0x2ec>)
 800ac94:	4293      	cmp	r3, r2
 800ac96:	d028      	beq.n	800acea <HAL_COMP_Init+0x122>
 800ac98:	687b      	ldr	r3, [r7, #4]
 800ac9a:	681b      	ldr	r3, [r3, #0]
 800ac9c:	4a86      	ldr	r2, [pc, #536]	; (800aeb8 <HAL_COMP_Init+0x2f0>)
 800ac9e:	4293      	cmp	r3, r2
 800aca0:	d020      	beq.n	800ace4 <HAL_COMP_Init+0x11c>
 800aca2:	687b      	ldr	r3, [r7, #4]
 800aca4:	681b      	ldr	r3, [r3, #0]
 800aca6:	4a85      	ldr	r2, [pc, #532]	; (800aebc <HAL_COMP_Init+0x2f4>)
 800aca8:	4293      	cmp	r3, r2
 800acaa:	d018      	beq.n	800acde <HAL_COMP_Init+0x116>
 800acac:	687b      	ldr	r3, [r7, #4]
 800acae:	681b      	ldr	r3, [r3, #0]
 800acb0:	4a83      	ldr	r2, [pc, #524]	; (800aec0 <HAL_COMP_Init+0x2f8>)
 800acb2:	4293      	cmp	r3, r2
 800acb4:	d010      	beq.n	800acd8 <HAL_COMP_Init+0x110>
 800acb6:	687b      	ldr	r3, [r7, #4]
 800acb8:	681b      	ldr	r3, [r3, #0]
 800acba:	4a82      	ldr	r2, [pc, #520]	; (800aec4 <HAL_COMP_Init+0x2fc>)
 800acbc:	4293      	cmp	r3, r2
 800acbe:	d008      	beq.n	800acd2 <HAL_COMP_Init+0x10a>
 800acc0:	687b      	ldr	r3, [r7, #4]
 800acc2:	681b      	ldr	r3, [r3, #0]
 800acc4:	4a80      	ldr	r2, [pc, #512]	; (800aec8 <HAL_COMP_Init+0x300>)
 800acc6:	4293      	cmp	r3, r2
 800acc8:	d101      	bne.n	800acce <HAL_COMP_Init+0x106>
 800acca:	2301      	movs	r3, #1
 800accc:	e00f      	b.n	800acee <HAL_COMP_Init+0x126>
 800acce:	2302      	movs	r3, #2
 800acd0:	e00d      	b.n	800acee <HAL_COMP_Init+0x126>
 800acd2:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800acd6:	e00a      	b.n	800acee <HAL_COMP_Init+0x126>
 800acd8:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800acdc:	e007      	b.n	800acee <HAL_COMP_Init+0x126>
 800acde:	f04f 5300 	mov.w	r3, #536870912	; 0x20000000
 800ace2:	e004      	b.n	800acee <HAL_COMP_Init+0x126>
 800ace4:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800ace8:	e001      	b.n	800acee <HAL_COMP_Init+0x126>
 800acea:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 800acee:	613b      	str	r3, [r7, #16]

    /* Manage EXTI settings */
    if((hcomp->Init.TriggerMode & (COMP_EXTI_IT | COMP_EXTI_EVENT)) != 0UL)
 800acf0:	687b      	ldr	r3, [r7, #4]
 800acf2:	699b      	ldr	r3, [r3, #24]
 800acf4:	f003 0303 	and.w	r3, r3, #3
 800acf8:	2b00      	cmp	r3, #0
 800acfa:	f000 80b6 	beq.w	800ae6a <HAL_COMP_Init+0x2a2>
    {
      /* Configure EXTI rising edge */
      if((hcomp->Init.TriggerMode & COMP_EXTI_RISING) != 0UL)
 800acfe:	687b      	ldr	r3, [r7, #4]
 800ad00:	699b      	ldr	r3, [r3, #24]
 800ad02:	f003 0310 	and.w	r3, r3, #16
 800ad06:	2b00      	cmp	r3, #0
 800ad08:	d011      	beq.n	800ad2e <HAL_COMP_Init+0x166>
      {
#if defined(STM32G474xx) || defined(STM32G484xx) || defined(STM32G473xx) || defined(STM32G483xx)
        if((hcomp->Instance == COMP6) || (hcomp->Instance == COMP7))
 800ad0a:	687b      	ldr	r3, [r7, #4]
 800ad0c:	681b      	ldr	r3, [r3, #0]
 800ad0e:	4a6e      	ldr	r2, [pc, #440]	; (800aec8 <HAL_COMP_Init+0x300>)
 800ad10:	4293      	cmp	r3, r2
 800ad12:	d004      	beq.n	800ad1e <HAL_COMP_Init+0x156>
 800ad14:	687b      	ldr	r3, [r7, #4]
 800ad16:	681b      	ldr	r3, [r3, #0]
 800ad18:	4a6c      	ldr	r2, [pc, #432]	; (800aecc <HAL_COMP_Init+0x304>)
 800ad1a:	4293      	cmp	r3, r2
 800ad1c:	d103      	bne.n	800ad26 <HAL_COMP_Init+0x15e>
        {
          LL_EXTI_EnableRisingTrig_32_63(exti_line);
 800ad1e:	6938      	ldr	r0, [r7, #16]
 800ad20:	f7ff fe80 	bl	800aa24 <LL_EXTI_EnableRisingTrig_32_63>
 800ad24:	e014      	b.n	800ad50 <HAL_COMP_Init+0x188>
        }
        else
        {
          LL_EXTI_EnableRisingTrig_0_31(exti_line);
 800ad26:	6938      	ldr	r0, [r7, #16]
 800ad28:	f7ff fe6a 	bl	800aa00 <LL_EXTI_EnableRisingTrig_0_31>
 800ad2c:	e010      	b.n	800ad50 <HAL_COMP_Init+0x188>
#endif
      }
      else
      {
#if defined(STM32G474xx) || defined(STM32G484xx) || defined(STM32G473xx) || defined(STM32G483xx)
        if((hcomp->Instance == COMP6) || (hcomp->Instance == COMP7))
 800ad2e:	687b      	ldr	r3, [r7, #4]
 800ad30:	681b      	ldr	r3, [r3, #0]
 800ad32:	4a65      	ldr	r2, [pc, #404]	; (800aec8 <HAL_COMP_Init+0x300>)
 800ad34:	4293      	cmp	r3, r2
 800ad36:	d004      	beq.n	800ad42 <HAL_COMP_Init+0x17a>
 800ad38:	687b      	ldr	r3, [r7, #4]
 800ad3a:	681b      	ldr	r3, [r3, #0]
 800ad3c:	4a63      	ldr	r2, [pc, #396]	; (800aecc <HAL_COMP_Init+0x304>)
 800ad3e:	4293      	cmp	r3, r2
 800ad40:	d103      	bne.n	800ad4a <HAL_COMP_Init+0x182>
        {
          LL_EXTI_DisableRisingTrig_32_63(exti_line);
 800ad42:	6938      	ldr	r0, [r7, #16]
 800ad44:	f7ff fe94 	bl	800aa70 <LL_EXTI_DisableRisingTrig_32_63>
 800ad48:	e002      	b.n	800ad50 <HAL_COMP_Init+0x188>
        }
        else
        {
          LL_EXTI_DisableRisingTrig_0_31(exti_line);
 800ad4a:	6938      	ldr	r0, [r7, #16]
 800ad4c:	f7ff fe7c 	bl	800aa48 <LL_EXTI_DisableRisingTrig_0_31>
        LL_EXTI_DisableRisingTrig_0_31(exti_line);
#endif
      }

      /* Configure EXTI falling edge */
      if((hcomp->Init.TriggerMode & COMP_EXTI_FALLING) != 0UL)
 800ad50:	687b      	ldr	r3, [r7, #4]
 800ad52:	699b      	ldr	r3, [r3, #24]
 800ad54:	f003 0320 	and.w	r3, r3, #32
 800ad58:	2b00      	cmp	r3, #0
 800ad5a:	d011      	beq.n	800ad80 <HAL_COMP_Init+0x1b8>
      {
#if defined(STM32G474xx) || defined(STM32G484xx) || defined(STM32G473xx) || defined(STM32G483xx)
        if((hcomp->Instance == COMP6) || (hcomp->Instance == COMP7))
 800ad5c:	687b      	ldr	r3, [r7, #4]
 800ad5e:	681b      	ldr	r3, [r3, #0]
 800ad60:	4a59      	ldr	r2, [pc, #356]	; (800aec8 <HAL_COMP_Init+0x300>)
 800ad62:	4293      	cmp	r3, r2
 800ad64:	d004      	beq.n	800ad70 <HAL_COMP_Init+0x1a8>
 800ad66:	687b      	ldr	r3, [r7, #4]
 800ad68:	681b      	ldr	r3, [r3, #0]
 800ad6a:	4a58      	ldr	r2, [pc, #352]	; (800aecc <HAL_COMP_Init+0x304>)
 800ad6c:	4293      	cmp	r3, r2
 800ad6e:	d103      	bne.n	800ad78 <HAL_COMP_Init+0x1b0>
        {
          LL_EXTI_EnableFallingTrig_32_63(exti_line);
 800ad70:	6938      	ldr	r0, [r7, #16]
 800ad72:	f7ff fea3 	bl	800aabc <LL_EXTI_EnableFallingTrig_32_63>
 800ad76:	e014      	b.n	800ada2 <HAL_COMP_Init+0x1da>
        }
        else
        {
          LL_EXTI_EnableFallingTrig_0_31(exti_line);
 800ad78:	6938      	ldr	r0, [r7, #16]
 800ad7a:	f7ff fe8d 	bl	800aa98 <LL_EXTI_EnableFallingTrig_0_31>
 800ad7e:	e010      	b.n	800ada2 <HAL_COMP_Init+0x1da>
#endif
      }
      else
      {
#if defined(STM32G474xx) || defined(STM32G484xx) || defined(STM32G473xx) || defined(STM32G483xx)
        if((hcomp->Instance == COMP6) || (hcomp->Instance == COMP7))
 800ad80:	687b      	ldr	r3, [r7, #4]
 800ad82:	681b      	ldr	r3, [r3, #0]
 800ad84:	4a50      	ldr	r2, [pc, #320]	; (800aec8 <HAL_COMP_Init+0x300>)
 800ad86:	4293      	cmp	r3, r2
 800ad88:	d004      	beq.n	800ad94 <HAL_COMP_Init+0x1cc>
 800ad8a:	687b      	ldr	r3, [r7, #4]
 800ad8c:	681b      	ldr	r3, [r3, #0]
 800ad8e:	4a4f      	ldr	r2, [pc, #316]	; (800aecc <HAL_COMP_Init+0x304>)
 800ad90:	4293      	cmp	r3, r2
 800ad92:	d103      	bne.n	800ad9c <HAL_COMP_Init+0x1d4>
        {
          LL_EXTI_DisableFallingTrig_32_63(exti_line);
 800ad94:	6938      	ldr	r0, [r7, #16]
 800ad96:	f7ff feb7 	bl	800ab08 <LL_EXTI_DisableFallingTrig_32_63>
 800ad9a:	e002      	b.n	800ada2 <HAL_COMP_Init+0x1da>
        }
        else
        {
          LL_EXTI_DisableFallingTrig_0_31(exti_line);
 800ad9c:	6938      	ldr	r0, [r7, #16]
 800ad9e:	f7ff fe9f 	bl	800aae0 <LL_EXTI_DisableFallingTrig_0_31>
#endif
      }

      /* Clear COMP EXTI pending bit (if any) */
#if defined(STM32G474xx) || defined(STM32G484xx) || defined(STM32G473xx) || defined(STM32G483xx)
      if((hcomp->Instance == COMP6) || (hcomp->Instance == COMP7))
 800ada2:	687b      	ldr	r3, [r7, #4]
 800ada4:	681b      	ldr	r3, [r3, #0]
 800ada6:	4a48      	ldr	r2, [pc, #288]	; (800aec8 <HAL_COMP_Init+0x300>)
 800ada8:	4293      	cmp	r3, r2
 800adaa:	d004      	beq.n	800adb6 <HAL_COMP_Init+0x1ee>
 800adac:	687b      	ldr	r3, [r7, #4]
 800adae:	681b      	ldr	r3, [r3, #0]
 800adb0:	4a46      	ldr	r2, [pc, #280]	; (800aecc <HAL_COMP_Init+0x304>)
 800adb2:	4293      	cmp	r3, r2
 800adb4:	d103      	bne.n	800adbe <HAL_COMP_Init+0x1f6>
      {
        LL_EXTI_ClearFlag_32_63(exti_line);
 800adb6:	6938      	ldr	r0, [r7, #16]
 800adb8:	f7ff fef6 	bl	800aba8 <LL_EXTI_ClearFlag_32_63>
 800adbc:	e002      	b.n	800adc4 <HAL_COMP_Init+0x1fc>
      }
      else
      {
        LL_EXTI_ClearFlag_0_31(exti_line);
 800adbe:	6938      	ldr	r0, [r7, #16]
 800adc0:	f7ff fee2 	bl	800ab88 <LL_EXTI_ClearFlag_0_31>
#else
      LL_EXTI_ClearFlag_0_31(exti_line);
#endif

      /* Configure EXTI event mode */
      if((hcomp->Init.TriggerMode & COMP_EXTI_EVENT) != 0UL)
 800adc4:	687b      	ldr	r3, [r7, #4]
 800adc6:	699b      	ldr	r3, [r3, #24]
 800adc8:	f003 0302 	and.w	r3, r3, #2
 800adcc:	2b00      	cmp	r3, #0
 800adce:	d011      	beq.n	800adf4 <HAL_COMP_Init+0x22c>
      {
#if defined(STM32G474xx) || defined(STM32G484xx) || defined(STM32G473xx) || defined(STM32G483xx)
        if((hcomp->Instance == COMP6) || (hcomp->Instance == COMP7))
 800add0:	687b      	ldr	r3, [r7, #4]
 800add2:	681b      	ldr	r3, [r3, #0]
 800add4:	4a3c      	ldr	r2, [pc, #240]	; (800aec8 <HAL_COMP_Init+0x300>)
 800add6:	4293      	cmp	r3, r2
 800add8:	d004      	beq.n	800ade4 <HAL_COMP_Init+0x21c>
 800adda:	687b      	ldr	r3, [r7, #4]
 800addc:	681b      	ldr	r3, [r3, #0]
 800adde:	4a3b      	ldr	r2, [pc, #236]	; (800aecc <HAL_COMP_Init+0x304>)
 800ade0:	4293      	cmp	r3, r2
 800ade2:	d103      	bne.n	800adec <HAL_COMP_Init+0x224>
        {
          LL_EXTI_EnableEvent_32_63(exti_line);
 800ade4:	6938      	ldr	r0, [r7, #16]
 800ade6:	f7ff fdd1 	bl	800a98c <LL_EXTI_EnableEvent_32_63>
 800adea:	e014      	b.n	800ae16 <HAL_COMP_Init+0x24e>
        }
        else
        {
          LL_EXTI_EnableEvent_0_31(exti_line);
 800adec:	6938      	ldr	r0, [r7, #16]
 800adee:	f7ff fdbb 	bl	800a968 <LL_EXTI_EnableEvent_0_31>
 800adf2:	e010      	b.n	800ae16 <HAL_COMP_Init+0x24e>
#endif
      }
      else
      {
#if defined(STM32G474xx) || defined(STM32G484xx) || defined(STM32G473xx) || defined(STM32G483xx)
        if((hcomp->Instance == COMP6) || (hcomp->Instance == COMP7))
 800adf4:	687b      	ldr	r3, [r7, #4]
 800adf6:	681b      	ldr	r3, [r3, #0]
 800adf8:	4a33      	ldr	r2, [pc, #204]	; (800aec8 <HAL_COMP_Init+0x300>)
 800adfa:	4293      	cmp	r3, r2
 800adfc:	d004      	beq.n	800ae08 <HAL_COMP_Init+0x240>
 800adfe:	687b      	ldr	r3, [r7, #4]
 800ae00:	681b      	ldr	r3, [r3, #0]
 800ae02:	4a32      	ldr	r2, [pc, #200]	; (800aecc <HAL_COMP_Init+0x304>)
 800ae04:	4293      	cmp	r3, r2
 800ae06:	d103      	bne.n	800ae10 <HAL_COMP_Init+0x248>
        {
          LL_EXTI_DisableEvent_32_63(exti_line);
 800ae08:	6938      	ldr	r0, [r7, #16]
 800ae0a:	f7ff fde5 	bl	800a9d8 <LL_EXTI_DisableEvent_32_63>
 800ae0e:	e002      	b.n	800ae16 <HAL_COMP_Init+0x24e>
        }
        else
        {
          LL_EXTI_DisableEvent_0_31(exti_line);
 800ae10:	6938      	ldr	r0, [r7, #16]
 800ae12:	f7ff fdcd 	bl	800a9b0 <LL_EXTI_DisableEvent_0_31>
        LL_EXTI_DisableEvent_0_31(exti_line);
#endif
      }

      /* Configure EXTI interrupt mode */
      if((hcomp->Init.TriggerMode & COMP_EXTI_IT) != 0UL)
 800ae16:	687b      	ldr	r3, [r7, #4]
 800ae18:	699b      	ldr	r3, [r3, #24]
 800ae1a:	f003 0301 	and.w	r3, r3, #1
 800ae1e:	2b00      	cmp	r3, #0
 800ae20:	d011      	beq.n	800ae46 <HAL_COMP_Init+0x27e>
      {
#if defined(STM32G474xx) || defined(STM32G484xx) || defined(STM32G473xx) || defined(STM32G483xx)
        if((hcomp->Instance == COMP6) || (hcomp->Instance == COMP7))
 800ae22:	687b      	ldr	r3, [r7, #4]
 800ae24:	681b      	ldr	r3, [r3, #0]
 800ae26:	4a28      	ldr	r2, [pc, #160]	; (800aec8 <HAL_COMP_Init+0x300>)
 800ae28:	4293      	cmp	r3, r2
 800ae2a:	d004      	beq.n	800ae36 <HAL_COMP_Init+0x26e>
 800ae2c:	687b      	ldr	r3, [r7, #4]
 800ae2e:	681b      	ldr	r3, [r3, #0]
 800ae30:	4a26      	ldr	r2, [pc, #152]	; (800aecc <HAL_COMP_Init+0x304>)
 800ae32:	4293      	cmp	r3, r2
 800ae34:	d103      	bne.n	800ae3e <HAL_COMP_Init+0x276>
        {
          LL_EXTI_EnableIT_32_63(exti_line);
 800ae36:	6938      	ldr	r0, [r7, #16]
 800ae38:	f7ff fd5c 	bl	800a8f4 <LL_EXTI_EnableIT_32_63>
 800ae3c:	e04b      	b.n	800aed6 <HAL_COMP_Init+0x30e>
        }
        else
        {
          LL_EXTI_EnableIT_0_31(exti_line);
 800ae3e:	6938      	ldr	r0, [r7, #16]
 800ae40:	f7ff fd46 	bl	800a8d0 <LL_EXTI_EnableIT_0_31>
 800ae44:	e047      	b.n	800aed6 <HAL_COMP_Init+0x30e>
#endif
      }
      else
      {
#if defined(STM32G474xx) || defined(STM32G484xx) || defined(STM32G473xx) || defined(STM32G483xx)
        if((hcomp->Instance == COMP6) || (hcomp->Instance == COMP7))
 800ae46:	687b      	ldr	r3, [r7, #4]
 800ae48:	681b      	ldr	r3, [r3, #0]
 800ae4a:	4a1f      	ldr	r2, [pc, #124]	; (800aec8 <HAL_COMP_Init+0x300>)
 800ae4c:	4293      	cmp	r3, r2
 800ae4e:	d004      	beq.n	800ae5a <HAL_COMP_Init+0x292>
 800ae50:	687b      	ldr	r3, [r7, #4]
 800ae52:	681b      	ldr	r3, [r3, #0]
 800ae54:	4a1d      	ldr	r2, [pc, #116]	; (800aecc <HAL_COMP_Init+0x304>)
 800ae56:	4293      	cmp	r3, r2
 800ae58:	d103      	bne.n	800ae62 <HAL_COMP_Init+0x29a>
        {
          LL_EXTI_DisableIT_32_63(exti_line);
 800ae5a:	6938      	ldr	r0, [r7, #16]
 800ae5c:	f7ff fd70 	bl	800a940 <LL_EXTI_DisableIT_32_63>
 800ae60:	e039      	b.n	800aed6 <HAL_COMP_Init+0x30e>
        }
        else
        {
          LL_EXTI_DisableIT_0_31(exti_line);
 800ae62:	6938      	ldr	r0, [r7, #16]
 800ae64:	f7ff fd58 	bl	800a918 <LL_EXTI_DisableIT_0_31>
 800ae68:	e035      	b.n	800aed6 <HAL_COMP_Init+0x30e>
    }
    else
    {
      /* Disable EXTI event mode */
#if defined(STM32G474xx) || defined(STM32G484xx) || defined(STM32G473xx) || defined(STM32G483xx)
      if((hcomp->Instance == COMP6) || (hcomp->Instance == COMP7))
 800ae6a:	687b      	ldr	r3, [r7, #4]
 800ae6c:	681b      	ldr	r3, [r3, #0]
 800ae6e:	4a16      	ldr	r2, [pc, #88]	; (800aec8 <HAL_COMP_Init+0x300>)
 800ae70:	4293      	cmp	r3, r2
 800ae72:	d004      	beq.n	800ae7e <HAL_COMP_Init+0x2b6>
 800ae74:	687b      	ldr	r3, [r7, #4]
 800ae76:	681b      	ldr	r3, [r3, #0]
 800ae78:	4a14      	ldr	r2, [pc, #80]	; (800aecc <HAL_COMP_Init+0x304>)
 800ae7a:	4293      	cmp	r3, r2
 800ae7c:	d103      	bne.n	800ae86 <HAL_COMP_Init+0x2be>
      {
        LL_EXTI_DisableEvent_32_63(exti_line);
 800ae7e:	6938      	ldr	r0, [r7, #16]
 800ae80:	f7ff fdaa 	bl	800a9d8 <LL_EXTI_DisableEvent_32_63>
 800ae84:	e002      	b.n	800ae8c <HAL_COMP_Init+0x2c4>
      }
      else
      {
        LL_EXTI_DisableEvent_0_31(exti_line);
 800ae86:	6938      	ldr	r0, [r7, #16]
 800ae88:	f7ff fd92 	bl	800a9b0 <LL_EXTI_DisableEvent_0_31>
      LL_EXTI_DisableEvent_0_31(exti_line);
#endif

      /* Disable EXTI interrupt mode */
#if defined(STM32G474xx) || defined(STM32G484xx) || defined(STM32G473xx) || defined(STM32G483xx)
      if((hcomp->Instance == COMP6) || (hcomp->Instance == COMP7))
 800ae8c:	687b      	ldr	r3, [r7, #4]
 800ae8e:	681b      	ldr	r3, [r3, #0]
 800ae90:	4a0d      	ldr	r2, [pc, #52]	; (800aec8 <HAL_COMP_Init+0x300>)
 800ae92:	4293      	cmp	r3, r2
 800ae94:	d004      	beq.n	800aea0 <HAL_COMP_Init+0x2d8>
 800ae96:	687b      	ldr	r3, [r7, #4]
 800ae98:	681b      	ldr	r3, [r3, #0]
 800ae9a:	4a0c      	ldr	r2, [pc, #48]	; (800aecc <HAL_COMP_Init+0x304>)
 800ae9c:	4293      	cmp	r3, r2
 800ae9e:	d117      	bne.n	800aed0 <HAL_COMP_Init+0x308>
      {
        LL_EXTI_DisableIT_32_63(exti_line);
 800aea0:	6938      	ldr	r0, [r7, #16]
 800aea2:	f7ff fd4d 	bl	800a940 <LL_EXTI_DisableIT_32_63>
 800aea6:	e016      	b.n	800aed6 <HAL_COMP_Init+0x30e>
 800aea8:	ff007e0f 	.word	0xff007e0f
 800aeac:	20000eb0 	.word	0x20000eb0
 800aeb0:	053e2d63 	.word	0x053e2d63
 800aeb4:	40010200 	.word	0x40010200
 800aeb8:	40010204 	.word	0x40010204
 800aebc:	40010208 	.word	0x40010208
 800aec0:	4001020c 	.word	0x4001020c
 800aec4:	40010210 	.word	0x40010210
 800aec8:	40010214 	.word	0x40010214
 800aecc:	40010218 	.word	0x40010218
      }
      else
      {
        LL_EXTI_DisableIT_0_31(exti_line);
 800aed0:	6938      	ldr	r0, [r7, #16]
 800aed2:	f7ff fd21 	bl	800a918 <LL_EXTI_DisableIT_0_31>
    }

    /* Set HAL COMP handle state */
    /* Note: Transition from state reset to state ready,                      */
    /*       otherwise (coming from state ready or busy) no state update.     */
    if (hcomp->State == HAL_COMP_STATE_RESET)
 800aed6:	687b      	ldr	r3, [r7, #4]
 800aed8:	7f5b      	ldrb	r3, [r3, #29]
 800aeda:	b2db      	uxtb	r3, r3
 800aedc:	2b00      	cmp	r3, #0
 800aede:	d102      	bne.n	800aee6 <HAL_COMP_Init+0x31e>
    {
      hcomp->State = HAL_COMP_STATE_READY;
 800aee0:	687b      	ldr	r3, [r7, #4]
 800aee2:	2201      	movs	r2, #1
 800aee4:	775a      	strb	r2, [r3, #29]
    }
  }

  return status;
 800aee6:	7ffb      	ldrb	r3, [r7, #31]
}
 800aee8:	4618      	mov	r0, r3
 800aeea:	3720      	adds	r7, #32
 800aeec:	46bd      	mov	sp, r7
 800aeee:	bd80      	pop	{r7, pc}

0800aef0 <HAL_COMP_Stop>:
  * @brief  Stop the comparator.
  * @param  hcomp  COMP handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_COMP_Stop(COMP_HandleTypeDef *hcomp)
{
 800aef0:	b480      	push	{r7}
 800aef2:	b085      	sub	sp, #20
 800aef4:	af00      	add	r7, sp, #0
 800aef6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800aef8:	2300      	movs	r3, #0
 800aefa:	73fb      	strb	r3, [r7, #15]

  /* Check the COMP handle allocation and lock status */
  if(hcomp == NULL)
 800aefc:	687b      	ldr	r3, [r7, #4]
 800aefe:	2b00      	cmp	r3, #0
 800af00:	d102      	bne.n	800af08 <HAL_COMP_Stop+0x18>
  {
    status = HAL_ERROR;
 800af02:	2301      	movs	r3, #1
 800af04:	73fb      	strb	r3, [r7, #15]
 800af06:	e01d      	b.n	800af44 <HAL_COMP_Stop+0x54>
  }
  else if(__HAL_COMP_IS_LOCKED(hcomp))
 800af08:	687b      	ldr	r3, [r7, #4]
 800af0a:	681b      	ldr	r3, [r3, #0]
 800af0c:	681b      	ldr	r3, [r3, #0]
 800af0e:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800af12:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800af16:	d102      	bne.n	800af1e <HAL_COMP_Stop+0x2e>
  {
    status = HAL_ERROR;
 800af18:	2301      	movs	r3, #1
 800af1a:	73fb      	strb	r3, [r7, #15]
 800af1c:	e012      	b.n	800af44 <HAL_COMP_Stop+0x54>
    /* Check the parameter */
    assert_param(IS_COMP_ALL_INSTANCE(hcomp->Instance));

    /* Check compliant states: HAL_COMP_STATE_READY or HAL_COMP_STATE_BUSY    */
    /* (all states except HAL_COMP_STATE_RESET and except locked status.      */
    if(hcomp->State != HAL_COMP_STATE_RESET)
 800af1e:	687b      	ldr	r3, [r7, #4]
 800af20:	7f5b      	ldrb	r3, [r3, #29]
 800af22:	b2db      	uxtb	r3, r3
 800af24:	2b00      	cmp	r3, #0
 800af26:	d00b      	beq.n	800af40 <HAL_COMP_Stop+0x50>
    {
      /* Disable the selected comparator */
      CLEAR_BIT(hcomp->Instance->CSR, COMP_CSR_EN);
 800af28:	687b      	ldr	r3, [r7, #4]
 800af2a:	681b      	ldr	r3, [r3, #0]
 800af2c:	681a      	ldr	r2, [r3, #0]
 800af2e:	687b      	ldr	r3, [r7, #4]
 800af30:	681b      	ldr	r3, [r3, #0]
 800af32:	f022 0201 	bic.w	r2, r2, #1
 800af36:	601a      	str	r2, [r3, #0]

      /* Set HAL COMP handle state */
      hcomp->State = HAL_COMP_STATE_READY;
 800af38:	687b      	ldr	r3, [r7, #4]
 800af3a:	2201      	movs	r2, #1
 800af3c:	775a      	strb	r2, [r3, #29]
 800af3e:	e001      	b.n	800af44 <HAL_COMP_Stop+0x54>
    }
    else
    {
      status = HAL_ERROR;
 800af40:	2301      	movs	r3, #1
 800af42:	73fb      	strb	r3, [r7, #15]
    }
  }

  return status;
 800af44:	7bfb      	ldrb	r3, [r7, #15]
}
 800af46:	4618      	mov	r0, r3
 800af48:	3714      	adds	r7, #20
 800af4a:	46bd      	mov	sp, r7
 800af4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800af50:	4770      	bx	lr
	...

0800af54 <HAL_COMP_IRQHandler>:
  * @brief  Comparator IRQ handler.
  * @param  hcomp  COMP handle
  * @retval None
  */
void HAL_COMP_IRQHandler(COMP_HandleTypeDef *hcomp)
{
 800af54:	b580      	push	{r7, lr}
 800af56:	b084      	sub	sp, #16
 800af58:	af00      	add	r7, sp, #0
 800af5a:	6078      	str	r0, [r7, #4]
  /* Get the EXTI line corresponding to the selected COMP instance */
  uint32_t exti_line = COMP_GET_EXTI_LINE(hcomp->Instance);
 800af5c:	687b      	ldr	r3, [r7, #4]
 800af5e:	681b      	ldr	r3, [r3, #0]
 800af60:	4a2f      	ldr	r2, [pc, #188]	; (800b020 <HAL_COMP_IRQHandler+0xcc>)
 800af62:	4293      	cmp	r3, r2
 800af64:	d028      	beq.n	800afb8 <HAL_COMP_IRQHandler+0x64>
 800af66:	687b      	ldr	r3, [r7, #4]
 800af68:	681b      	ldr	r3, [r3, #0]
 800af6a:	4a2e      	ldr	r2, [pc, #184]	; (800b024 <HAL_COMP_IRQHandler+0xd0>)
 800af6c:	4293      	cmp	r3, r2
 800af6e:	d020      	beq.n	800afb2 <HAL_COMP_IRQHandler+0x5e>
 800af70:	687b      	ldr	r3, [r7, #4]
 800af72:	681b      	ldr	r3, [r3, #0]
 800af74:	4a2c      	ldr	r2, [pc, #176]	; (800b028 <HAL_COMP_IRQHandler+0xd4>)
 800af76:	4293      	cmp	r3, r2
 800af78:	d018      	beq.n	800afac <HAL_COMP_IRQHandler+0x58>
 800af7a:	687b      	ldr	r3, [r7, #4]
 800af7c:	681b      	ldr	r3, [r3, #0]
 800af7e:	4a2b      	ldr	r2, [pc, #172]	; (800b02c <HAL_COMP_IRQHandler+0xd8>)
 800af80:	4293      	cmp	r3, r2
 800af82:	d010      	beq.n	800afa6 <HAL_COMP_IRQHandler+0x52>
 800af84:	687b      	ldr	r3, [r7, #4]
 800af86:	681b      	ldr	r3, [r3, #0]
 800af88:	4a29      	ldr	r2, [pc, #164]	; (800b030 <HAL_COMP_IRQHandler+0xdc>)
 800af8a:	4293      	cmp	r3, r2
 800af8c:	d008      	beq.n	800afa0 <HAL_COMP_IRQHandler+0x4c>
 800af8e:	687b      	ldr	r3, [r7, #4]
 800af90:	681b      	ldr	r3, [r3, #0]
 800af92:	4a28      	ldr	r2, [pc, #160]	; (800b034 <HAL_COMP_IRQHandler+0xe0>)
 800af94:	4293      	cmp	r3, r2
 800af96:	d101      	bne.n	800af9c <HAL_COMP_IRQHandler+0x48>
 800af98:	2301      	movs	r3, #1
 800af9a:	e00f      	b.n	800afbc <HAL_COMP_IRQHandler+0x68>
 800af9c:	2302      	movs	r3, #2
 800af9e:	e00d      	b.n	800afbc <HAL_COMP_IRQHandler+0x68>
 800afa0:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800afa4:	e00a      	b.n	800afbc <HAL_COMP_IRQHandler+0x68>
 800afa6:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800afaa:	e007      	b.n	800afbc <HAL_COMP_IRQHandler+0x68>
 800afac:	f04f 5300 	mov.w	r3, #536870912	; 0x20000000
 800afb0:	e004      	b.n	800afbc <HAL_COMP_IRQHandler+0x68>
 800afb2:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800afb6:	e001      	b.n	800afbc <HAL_COMP_IRQHandler+0x68>
 800afb8:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 800afbc:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_comp_exti_flag_set = 0UL;
 800afbe:	2300      	movs	r3, #0
 800afc0:	60fb      	str	r3, [r7, #12]

  /* Check COMP EXTI flag */
#if defined(STM32G474xx) || defined(STM32G484xx) || defined(STM32G473xx) || defined(STM32G483xx)
  if((hcomp->Instance == COMP6) || (hcomp->Instance == COMP7))
 800afc2:	687b      	ldr	r3, [r7, #4]
 800afc4:	681b      	ldr	r3, [r3, #0]
 800afc6:	4a1b      	ldr	r2, [pc, #108]	; (800b034 <HAL_COMP_IRQHandler+0xe0>)
 800afc8:	4293      	cmp	r3, r2
 800afca:	d004      	beq.n	800afd6 <HAL_COMP_IRQHandler+0x82>
 800afcc:	687b      	ldr	r3, [r7, #4]
 800afce:	681b      	ldr	r3, [r3, #0]
 800afd0:	4a19      	ldr	r2, [pc, #100]	; (800b038 <HAL_COMP_IRQHandler+0xe4>)
 800afd2:	4293      	cmp	r3, r2
 800afd4:	d108      	bne.n	800afe8 <HAL_COMP_IRQHandler+0x94>
  {
    if(LL_EXTI_IsActiveFlag_32_63(exti_line) != 0UL)
 800afd6:	68b8      	ldr	r0, [r7, #8]
 800afd8:	f7ff fdc0 	bl	800ab5c <LL_EXTI_IsActiveFlag_32_63>
 800afdc:	4603      	mov	r3, r0
 800afde:	2b00      	cmp	r3, #0
 800afe0:	d00a      	beq.n	800aff8 <HAL_COMP_IRQHandler+0xa4>
    {
      tmp_comp_exti_flag_set = 2UL;
 800afe2:	2302      	movs	r3, #2
 800afe4:	60fb      	str	r3, [r7, #12]
    if(LL_EXTI_IsActiveFlag_32_63(exti_line) != 0UL)
 800afe6:	e007      	b.n	800aff8 <HAL_COMP_IRQHandler+0xa4>
    }
  }
  else
  {
    if(LL_EXTI_IsActiveFlag_0_31(exti_line) != 0UL)
 800afe8:	68b8      	ldr	r0, [r7, #8]
 800afea:	f7ff fda1 	bl	800ab30 <LL_EXTI_IsActiveFlag_0_31>
 800afee:	4603      	mov	r3, r0
 800aff0:	2b00      	cmp	r3, #0
 800aff2:	d001      	beq.n	800aff8 <HAL_COMP_IRQHandler+0xa4>
    {
      tmp_comp_exti_flag_set = 1UL;
 800aff4:	2301      	movs	r3, #1
 800aff6:	60fb      	str	r3, [r7, #12]
  {
    tmp_comp_exti_flag_set = 1UL;
  }
#endif

  if(tmp_comp_exti_flag_set != 0UL)
 800aff8:	68fb      	ldr	r3, [r7, #12]
 800affa:	2b00      	cmp	r3, #0
 800affc:	d00c      	beq.n	800b018 <HAL_COMP_IRQHandler+0xc4>
  {
      /* Clear COMP EXTI line pending bit */
#if defined(STM32G474xx) || defined(STM32G484xx) || defined(STM32G473xx) || defined(STM32G483xx)
      if(tmp_comp_exti_flag_set == 2UL)
 800affe:	68fb      	ldr	r3, [r7, #12]
 800b000:	2b02      	cmp	r3, #2
 800b002:	d103      	bne.n	800b00c <HAL_COMP_IRQHandler+0xb8>
      {
        LL_EXTI_ClearFlag_32_63(exti_line);
 800b004:	68b8      	ldr	r0, [r7, #8]
 800b006:	f7ff fdcf 	bl	800aba8 <LL_EXTI_ClearFlag_32_63>
 800b00a:	e002      	b.n	800b012 <HAL_COMP_IRQHandler+0xbe>
      }
      else
      {
        LL_EXTI_ClearFlag_0_31(exti_line);
 800b00c:	68b8      	ldr	r0, [r7, #8]
 800b00e:	f7ff fdbb 	bl	800ab88 <LL_EXTI_ClearFlag_0_31>

    /* COMP trigger user callback */
#if (USE_HAL_COMP_REGISTER_CALLBACKS == 1)
    hcomp->TriggerCallback(hcomp);
#else
    HAL_COMP_TriggerCallback(hcomp);
 800b012:	6878      	ldr	r0, [r7, #4]
 800b014:	f7fb fa6a 	bl	80064ec <HAL_COMP_TriggerCallback>
#endif /* USE_HAL_COMP_REGISTER_CALLBACKS */
  }
}
 800b018:	bf00      	nop
 800b01a:	3710      	adds	r7, #16
 800b01c:	46bd      	mov	sp, r7
 800b01e:	bd80      	pop	{r7, pc}
 800b020:	40010200 	.word	0x40010200
 800b024:	40010204 	.word	0x40010204
 800b028:	40010208 	.word	0x40010208
 800b02c:	4001020c 	.word	0x4001020c
 800b030:	40010210 	.word	0x40010210
 800b034:	40010214 	.word	0x40010214
 800b038:	40010218 	.word	0x40010218

0800b03c <HAL_COMP_GetOutputLevel>:
  *         @arg COMP_OUTPUT_LEVEL_LOW
  *         @arg COMP_OUTPUT_LEVEL_HIGH
  *
  */
uint32_t HAL_COMP_GetOutputLevel(COMP_HandleTypeDef *hcomp)
{
 800b03c:	b480      	push	{r7}
 800b03e:	b083      	sub	sp, #12
 800b040:	af00      	add	r7, sp, #0
 800b042:	6078      	str	r0, [r7, #4]
  /* Check the parameter */
  assert_param(IS_COMP_ALL_INSTANCE(hcomp->Instance));

  return (uint32_t)(READ_BIT(hcomp->Instance->CSR, COMP_CSR_VALUE)
 800b044:	687b      	ldr	r3, [r7, #4]
 800b046:	681b      	ldr	r3, [r3, #0]
 800b048:	681b      	ldr	r3, [r3, #0]
 800b04a:	0f9b      	lsrs	r3, r3, #30
 800b04c:	f003 0301 	and.w	r3, r3, #1
                    >> COMP_OUTPUT_LEVEL_BITOFFSET_POS);
}
 800b050:	4618      	mov	r0, r3
 800b052:	370c      	adds	r7, #12
 800b054:	46bd      	mov	sp, r7
 800b056:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b05a:	4770      	bx	lr

0800b05c <__NVIC_SetPriorityGrouping>:
{
 800b05c:	b480      	push	{r7}
 800b05e:	b085      	sub	sp, #20
 800b060:	af00      	add	r7, sp, #0
 800b062:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800b064:	687b      	ldr	r3, [r7, #4]
 800b066:	f003 0307 	and.w	r3, r3, #7
 800b06a:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800b06c:	4b0c      	ldr	r3, [pc, #48]	; (800b0a0 <__NVIC_SetPriorityGrouping+0x44>)
 800b06e:	68db      	ldr	r3, [r3, #12]
 800b070:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800b072:	68ba      	ldr	r2, [r7, #8]
 800b074:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800b078:	4013      	ands	r3, r2
 800b07a:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800b07c:	68fb      	ldr	r3, [r7, #12]
 800b07e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800b080:	68bb      	ldr	r3, [r7, #8]
 800b082:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800b084:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800b088:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800b08c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800b08e:	4a04      	ldr	r2, [pc, #16]	; (800b0a0 <__NVIC_SetPriorityGrouping+0x44>)
 800b090:	68bb      	ldr	r3, [r7, #8]
 800b092:	60d3      	str	r3, [r2, #12]
}
 800b094:	bf00      	nop
 800b096:	3714      	adds	r7, #20
 800b098:	46bd      	mov	sp, r7
 800b09a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b09e:	4770      	bx	lr
 800b0a0:	e000ed00 	.word	0xe000ed00

0800b0a4 <__NVIC_GetPriorityGrouping>:
{
 800b0a4:	b480      	push	{r7}
 800b0a6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800b0a8:	4b04      	ldr	r3, [pc, #16]	; (800b0bc <__NVIC_GetPriorityGrouping+0x18>)
 800b0aa:	68db      	ldr	r3, [r3, #12]
 800b0ac:	0a1b      	lsrs	r3, r3, #8
 800b0ae:	f003 0307 	and.w	r3, r3, #7
}
 800b0b2:	4618      	mov	r0, r3
 800b0b4:	46bd      	mov	sp, r7
 800b0b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b0ba:	4770      	bx	lr
 800b0bc:	e000ed00 	.word	0xe000ed00

0800b0c0 <__NVIC_EnableIRQ>:
{
 800b0c0:	b480      	push	{r7}
 800b0c2:	b083      	sub	sp, #12
 800b0c4:	af00      	add	r7, sp, #0
 800b0c6:	4603      	mov	r3, r0
 800b0c8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800b0ca:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800b0ce:	2b00      	cmp	r3, #0
 800b0d0:	db0b      	blt.n	800b0ea <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800b0d2:	79fb      	ldrb	r3, [r7, #7]
 800b0d4:	f003 021f 	and.w	r2, r3, #31
 800b0d8:	4907      	ldr	r1, [pc, #28]	; (800b0f8 <__NVIC_EnableIRQ+0x38>)
 800b0da:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800b0de:	095b      	lsrs	r3, r3, #5
 800b0e0:	2001      	movs	r0, #1
 800b0e2:	fa00 f202 	lsl.w	r2, r0, r2
 800b0e6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 800b0ea:	bf00      	nop
 800b0ec:	370c      	adds	r7, #12
 800b0ee:	46bd      	mov	sp, r7
 800b0f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b0f4:	4770      	bx	lr
 800b0f6:	bf00      	nop
 800b0f8:	e000e100 	.word	0xe000e100

0800b0fc <__NVIC_DisableIRQ>:
{
 800b0fc:	b480      	push	{r7}
 800b0fe:	b083      	sub	sp, #12
 800b100:	af00      	add	r7, sp, #0
 800b102:	4603      	mov	r3, r0
 800b104:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800b106:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800b10a:	2b00      	cmp	r3, #0
 800b10c:	db10      	blt.n	800b130 <__NVIC_DisableIRQ+0x34>
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800b10e:	79fb      	ldrb	r3, [r7, #7]
 800b110:	f003 021f 	and.w	r2, r3, #31
 800b114:	4909      	ldr	r1, [pc, #36]	; (800b13c <__NVIC_DisableIRQ+0x40>)
 800b116:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800b11a:	095b      	lsrs	r3, r3, #5
 800b11c:	2001      	movs	r0, #1
 800b11e:	fa00 f202 	lsl.w	r2, r0, r2
 800b122:	3320      	adds	r3, #32
 800b124:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  __ASM volatile ("dsb 0xF":::"memory");
 800b128:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 800b12c:	f3bf 8f6f 	isb	sy
}
 800b130:	bf00      	nop
 800b132:	370c      	adds	r7, #12
 800b134:	46bd      	mov	sp, r7
 800b136:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b13a:	4770      	bx	lr
 800b13c:	e000e100 	.word	0xe000e100

0800b140 <__NVIC_SetPriority>:
{
 800b140:	b480      	push	{r7}
 800b142:	b083      	sub	sp, #12
 800b144:	af00      	add	r7, sp, #0
 800b146:	4603      	mov	r3, r0
 800b148:	6039      	str	r1, [r7, #0]
 800b14a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800b14c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800b150:	2b00      	cmp	r3, #0
 800b152:	db0a      	blt.n	800b16a <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800b154:	683b      	ldr	r3, [r7, #0]
 800b156:	b2da      	uxtb	r2, r3
 800b158:	490c      	ldr	r1, [pc, #48]	; (800b18c <__NVIC_SetPriority+0x4c>)
 800b15a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800b15e:	0112      	lsls	r2, r2, #4
 800b160:	b2d2      	uxtb	r2, r2
 800b162:	440b      	add	r3, r1
 800b164:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 800b168:	e00a      	b.n	800b180 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800b16a:	683b      	ldr	r3, [r7, #0]
 800b16c:	b2da      	uxtb	r2, r3
 800b16e:	4908      	ldr	r1, [pc, #32]	; (800b190 <__NVIC_SetPriority+0x50>)
 800b170:	79fb      	ldrb	r3, [r7, #7]
 800b172:	f003 030f 	and.w	r3, r3, #15
 800b176:	3b04      	subs	r3, #4
 800b178:	0112      	lsls	r2, r2, #4
 800b17a:	b2d2      	uxtb	r2, r2
 800b17c:	440b      	add	r3, r1
 800b17e:	761a      	strb	r2, [r3, #24]
}
 800b180:	bf00      	nop
 800b182:	370c      	adds	r7, #12
 800b184:	46bd      	mov	sp, r7
 800b186:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b18a:	4770      	bx	lr
 800b18c:	e000e100 	.word	0xe000e100
 800b190:	e000ed00 	.word	0xe000ed00

0800b194 <NVIC_EncodePriority>:
{
 800b194:	b480      	push	{r7}
 800b196:	b089      	sub	sp, #36	; 0x24
 800b198:	af00      	add	r7, sp, #0
 800b19a:	60f8      	str	r0, [r7, #12]
 800b19c:	60b9      	str	r1, [r7, #8]
 800b19e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800b1a0:	68fb      	ldr	r3, [r7, #12]
 800b1a2:	f003 0307 	and.w	r3, r3, #7
 800b1a6:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800b1a8:	69fb      	ldr	r3, [r7, #28]
 800b1aa:	f1c3 0307 	rsb	r3, r3, #7
 800b1ae:	2b04      	cmp	r3, #4
 800b1b0:	bf28      	it	cs
 800b1b2:	2304      	movcs	r3, #4
 800b1b4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800b1b6:	69fb      	ldr	r3, [r7, #28]
 800b1b8:	3304      	adds	r3, #4
 800b1ba:	2b06      	cmp	r3, #6
 800b1bc:	d902      	bls.n	800b1c4 <NVIC_EncodePriority+0x30>
 800b1be:	69fb      	ldr	r3, [r7, #28]
 800b1c0:	3b03      	subs	r3, #3
 800b1c2:	e000      	b.n	800b1c6 <NVIC_EncodePriority+0x32>
 800b1c4:	2300      	movs	r3, #0
 800b1c6:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800b1c8:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800b1cc:	69bb      	ldr	r3, [r7, #24]
 800b1ce:	fa02 f303 	lsl.w	r3, r2, r3
 800b1d2:	43da      	mvns	r2, r3
 800b1d4:	68bb      	ldr	r3, [r7, #8]
 800b1d6:	401a      	ands	r2, r3
 800b1d8:	697b      	ldr	r3, [r7, #20]
 800b1da:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800b1dc:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 800b1e0:	697b      	ldr	r3, [r7, #20]
 800b1e2:	fa01 f303 	lsl.w	r3, r1, r3
 800b1e6:	43d9      	mvns	r1, r3
 800b1e8:	687b      	ldr	r3, [r7, #4]
 800b1ea:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800b1ec:	4313      	orrs	r3, r2
}
 800b1ee:	4618      	mov	r0, r3
 800b1f0:	3724      	adds	r7, #36	; 0x24
 800b1f2:	46bd      	mov	sp, r7
 800b1f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b1f8:	4770      	bx	lr
	...

0800b1fc <SysTick_Config>:
{
 800b1fc:	b580      	push	{r7, lr}
 800b1fe:	b082      	sub	sp, #8
 800b200:	af00      	add	r7, sp, #0
 800b202:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800b204:	687b      	ldr	r3, [r7, #4]
 800b206:	3b01      	subs	r3, #1
 800b208:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800b20c:	d301      	bcc.n	800b212 <SysTick_Config+0x16>
    return (1UL);                                                   /* Reload value impossible */
 800b20e:	2301      	movs	r3, #1
 800b210:	e00f      	b.n	800b232 <SysTick_Config+0x36>
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800b212:	4a0a      	ldr	r2, [pc, #40]	; (800b23c <SysTick_Config+0x40>)
 800b214:	687b      	ldr	r3, [r7, #4]
 800b216:	3b01      	subs	r3, #1
 800b218:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800b21a:	210f      	movs	r1, #15
 800b21c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800b220:	f7ff ff8e 	bl	800b140 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800b224:	4b05      	ldr	r3, [pc, #20]	; (800b23c <SysTick_Config+0x40>)
 800b226:	2200      	movs	r2, #0
 800b228:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800b22a:	4b04      	ldr	r3, [pc, #16]	; (800b23c <SysTick_Config+0x40>)
 800b22c:	2207      	movs	r2, #7
 800b22e:	601a      	str	r2, [r3, #0]
  return (0UL);                                                     /* Function successful */
 800b230:	2300      	movs	r3, #0
}
 800b232:	4618      	mov	r0, r3
 800b234:	3708      	adds	r7, #8
 800b236:	46bd      	mov	sp, r7
 800b238:	bd80      	pop	{r7, pc}
 800b23a:	bf00      	nop
 800b23c:	e000e010 	.word	0xe000e010

0800b240 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800b240:	b580      	push	{r7, lr}
 800b242:	b082      	sub	sp, #8
 800b244:	af00      	add	r7, sp, #0
 800b246:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800b248:	6878      	ldr	r0, [r7, #4]
 800b24a:	f7ff ff07 	bl	800b05c <__NVIC_SetPriorityGrouping>
}
 800b24e:	bf00      	nop
 800b250:	3708      	adds	r7, #8
 800b252:	46bd      	mov	sp, r7
 800b254:	bd80      	pop	{r7, pc}

0800b256 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800b256:	b580      	push	{r7, lr}
 800b258:	b086      	sub	sp, #24
 800b25a:	af00      	add	r7, sp, #0
 800b25c:	4603      	mov	r3, r0
 800b25e:	60b9      	str	r1, [r7, #8]
 800b260:	607a      	str	r2, [r7, #4]
 800b262:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 800b264:	f7ff ff1e 	bl	800b0a4 <__NVIC_GetPriorityGrouping>
 800b268:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800b26a:	687a      	ldr	r2, [r7, #4]
 800b26c:	68b9      	ldr	r1, [r7, #8]
 800b26e:	6978      	ldr	r0, [r7, #20]
 800b270:	f7ff ff90 	bl	800b194 <NVIC_EncodePriority>
 800b274:	4602      	mov	r2, r0
 800b276:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800b27a:	4611      	mov	r1, r2
 800b27c:	4618      	mov	r0, r3
 800b27e:	f7ff ff5f 	bl	800b140 <__NVIC_SetPriority>
}
 800b282:	bf00      	nop
 800b284:	3718      	adds	r7, #24
 800b286:	46bd      	mov	sp, r7
 800b288:	bd80      	pop	{r7, pc}

0800b28a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800b28a:	b580      	push	{r7, lr}
 800b28c:	b082      	sub	sp, #8
 800b28e:	af00      	add	r7, sp, #0
 800b290:	4603      	mov	r3, r0
 800b292:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800b294:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800b298:	4618      	mov	r0, r3
 800b29a:	f7ff ff11 	bl	800b0c0 <__NVIC_EnableIRQ>
}
 800b29e:	bf00      	nop
 800b2a0:	3708      	adds	r7, #8
 800b2a2:	46bd      	mov	sp, r7
 800b2a4:	bd80      	pop	{r7, pc}

0800b2a6 <HAL_NVIC_DisableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g4xxxx.h))
  * @retval None
  */
void HAL_NVIC_DisableIRQ(IRQn_Type IRQn)
{
 800b2a6:	b580      	push	{r7, lr}
 800b2a8:	b082      	sub	sp, #8
 800b2aa:	af00      	add	r7, sp, #0
 800b2ac:	4603      	mov	r3, r0
 800b2ae:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Disable interrupt */
  NVIC_DisableIRQ(IRQn);
 800b2b0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800b2b4:	4618      	mov	r0, r3
 800b2b6:	f7ff ff21 	bl	800b0fc <__NVIC_DisableIRQ>
}
 800b2ba:	bf00      	nop
 800b2bc:	3708      	adds	r7, #8
 800b2be:	46bd      	mov	sp, r7
 800b2c0:	bd80      	pop	{r7, pc}

0800b2c2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800b2c2:	b580      	push	{r7, lr}
 800b2c4:	b082      	sub	sp, #8
 800b2c6:	af00      	add	r7, sp, #0
 800b2c8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800b2ca:	6878      	ldr	r0, [r7, #4]
 800b2cc:	f7ff ff96 	bl	800b1fc <SysTick_Config>
 800b2d0:	4603      	mov	r3, r0
}
 800b2d2:	4618      	mov	r0, r3
 800b2d4:	3708      	adds	r7, #8
 800b2d6:	46bd      	mov	sp, r7
 800b2d8:	bd80      	pop	{r7, pc}

0800b2da <HAL_DAC_Init>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Init(DAC_HandleTypeDef *hdac)
{
 800b2da:	b580      	push	{r7, lr}
 800b2dc:	b082      	sub	sp, #8
 800b2de:	af00      	add	r7, sp, #0
 800b2e0:	6078      	str	r0, [r7, #4]
  /* Check DAC handle */
  if (hdac == NULL)
 800b2e2:	687b      	ldr	r3, [r7, #4]
 800b2e4:	2b00      	cmp	r3, #0
 800b2e6:	d101      	bne.n	800b2ec <HAL_DAC_Init+0x12>
  {
    return HAL_ERROR;
 800b2e8:	2301      	movs	r3, #1
 800b2ea:	e014      	b.n	800b316 <HAL_DAC_Init+0x3c>
  }
  /* Check the parameters */
  assert_param(IS_DAC_ALL_INSTANCE(hdac->Instance));

  if (hdac->State == HAL_DAC_STATE_RESET)
 800b2ec:	687b      	ldr	r3, [r7, #4]
 800b2ee:	791b      	ldrb	r3, [r3, #4]
 800b2f0:	b2db      	uxtb	r3, r3
 800b2f2:	2b00      	cmp	r3, #0
 800b2f4:	d105      	bne.n	800b302 <HAL_DAC_Init+0x28>
      hdac->MspInitCallback             = HAL_DAC_MspInit;
    }
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

    /* Allocate lock resource and initialize it */
    hdac->Lock = HAL_UNLOCKED;
 800b2f6:	687b      	ldr	r3, [r7, #4]
 800b2f8:	2200      	movs	r2, #0
 800b2fa:	715a      	strb	r2, [r3, #5]
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
    /* Init the low level hardware */
    hdac->MspInitCallback(hdac);
#else
    /* Init the low level hardware */
    HAL_DAC_MspInit(hdac);
 800b2fc:	6878      	ldr	r0, [r7, #4]
 800b2fe:	f7fc fa49 	bl	8007794 <HAL_DAC_MspInit>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
  }

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_BUSY;
 800b302:	687b      	ldr	r3, [r7, #4]
 800b304:	2202      	movs	r2, #2
 800b306:	711a      	strb	r2, [r3, #4]

  /* Set DAC error code to none */
  hdac->ErrorCode = HAL_DAC_ERROR_NONE;
 800b308:	687b      	ldr	r3, [r7, #4]
 800b30a:	2200      	movs	r2, #0
 800b30c:	611a      	str	r2, [r3, #16]

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_READY;
 800b30e:	687b      	ldr	r3, [r7, #4]
 800b310:	2201      	movs	r2, #1
 800b312:	711a      	strb	r2, [r3, #4]

  /* Return function status */
  return HAL_OK;
 800b314:	2300      	movs	r3, #0
}
 800b316:	4618      	mov	r0, r3
 800b318:	3708      	adds	r7, #8
 800b31a:	46bd      	mov	sp, r7
 800b31c:	bd80      	pop	{r7, pc}

0800b31e <HAL_DAC_Start>:
  *         (1) On this STM32 serie, parameter not available on all instances.
  *             Refer to device datasheet for channels availability.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Start(DAC_HandleTypeDef *hdac, uint32_t Channel)
{
 800b31e:	b580      	push	{r7, lr}
 800b320:	b082      	sub	sp, #8
 800b322:	af00      	add	r7, sp, #0
 800b324:	6078      	str	r0, [r7, #4]
 800b326:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(hdac->Instance, Channel));

  /* Process locked */
  __HAL_LOCK(hdac);
 800b328:	687b      	ldr	r3, [r7, #4]
 800b32a:	795b      	ldrb	r3, [r3, #5]
 800b32c:	2b01      	cmp	r3, #1
 800b32e:	d101      	bne.n	800b334 <HAL_DAC_Start+0x16>
 800b330:	2302      	movs	r3, #2
 800b332:	e043      	b.n	800b3bc <HAL_DAC_Start+0x9e>
 800b334:	687b      	ldr	r3, [r7, #4]
 800b336:	2201      	movs	r2, #1
 800b338:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 800b33a:	687b      	ldr	r3, [r7, #4]
 800b33c:	2202      	movs	r2, #2
 800b33e:	711a      	strb	r2, [r3, #4]

  /* Enable the Peripheral */
  __HAL_DAC_ENABLE(hdac, Channel);
 800b340:	687b      	ldr	r3, [r7, #4]
 800b342:	681b      	ldr	r3, [r3, #0]
 800b344:	6819      	ldr	r1, [r3, #0]
 800b346:	683b      	ldr	r3, [r7, #0]
 800b348:	f003 0310 	and.w	r3, r3, #16
 800b34c:	2201      	movs	r2, #1
 800b34e:	409a      	lsls	r2, r3
 800b350:	687b      	ldr	r3, [r7, #4]
 800b352:	681b      	ldr	r3, [r3, #0]
 800b354:	430a      	orrs	r2, r1
 800b356:	601a      	str	r2, [r3, #0]
  /* Ensure minimum wait before using peripheral after enabling it */
  HAL_Delay(1);
 800b358:	2001      	movs	r0, #1
 800b35a:	f7fd fe65 	bl	8009028 <HAL_Delay>

  if (Channel == DAC_CHANNEL_1)
 800b35e:	683b      	ldr	r3, [r7, #0]
 800b360:	2b00      	cmp	r3, #0
 800b362:	d10f      	bne.n	800b384 <HAL_DAC_Start+0x66>
  {
    /* Check if software trigger enabled */
    if ((hdac->Instance->CR & (DAC_CR_TEN1 | DAC_CR_TSEL1)) == DAC_TRIGGER_SOFTWARE)
 800b364:	687b      	ldr	r3, [r7, #4]
 800b366:	681b      	ldr	r3, [r3, #0]
 800b368:	681b      	ldr	r3, [r3, #0]
 800b36a:	f003 033e 	and.w	r3, r3, #62	; 0x3e
 800b36e:	2b02      	cmp	r3, #2
 800b370:	d11d      	bne.n	800b3ae <HAL_DAC_Start+0x90>
    {
      /* Enable the selected DAC software conversion */
      SET_BIT(hdac->Instance->SWTRIGR, DAC_SWTRIGR_SWTRIG1);
 800b372:	687b      	ldr	r3, [r7, #4]
 800b374:	681b      	ldr	r3, [r3, #0]
 800b376:	685a      	ldr	r2, [r3, #4]
 800b378:	687b      	ldr	r3, [r7, #4]
 800b37a:	681b      	ldr	r3, [r3, #0]
 800b37c:	f042 0201 	orr.w	r2, r2, #1
 800b380:	605a      	str	r2, [r3, #4]
 800b382:	e014      	b.n	800b3ae <HAL_DAC_Start+0x90>
    }
  }
  else
  {
    /* Check if software trigger enabled */
    if ((hdac->Instance->CR & (DAC_CR_TEN2 | DAC_CR_TSEL2)) == (DAC_TRIGGER_SOFTWARE << (Channel & 0x10UL)))
 800b384:	687b      	ldr	r3, [r7, #4]
 800b386:	681b      	ldr	r3, [r3, #0]
 800b388:	681b      	ldr	r3, [r3, #0]
 800b38a:	f403 1278 	and.w	r2, r3, #4063232	; 0x3e0000
 800b38e:	683b      	ldr	r3, [r7, #0]
 800b390:	f003 0310 	and.w	r3, r3, #16
 800b394:	2102      	movs	r1, #2
 800b396:	fa01 f303 	lsl.w	r3, r1, r3
 800b39a:	429a      	cmp	r2, r3
 800b39c:	d107      	bne.n	800b3ae <HAL_DAC_Start+0x90>
    {
      /* Enable the selected DAC software conversion*/
      SET_BIT(hdac->Instance->SWTRIGR, DAC_SWTRIGR_SWTRIG2);
 800b39e:	687b      	ldr	r3, [r7, #4]
 800b3a0:	681b      	ldr	r3, [r3, #0]
 800b3a2:	685a      	ldr	r2, [r3, #4]
 800b3a4:	687b      	ldr	r3, [r7, #4]
 800b3a6:	681b      	ldr	r3, [r3, #0]
 800b3a8:	f042 0202 	orr.w	r2, r2, #2
 800b3ac:	605a      	str	r2, [r3, #4]
    }
  }

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 800b3ae:	687b      	ldr	r3, [r7, #4]
 800b3b0:	2201      	movs	r2, #1
 800b3b2:	711a      	strb	r2, [r3, #4]

  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 800b3b4:	687b      	ldr	r3, [r7, #4]
 800b3b6:	2200      	movs	r2, #0
 800b3b8:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 800b3ba:	2300      	movs	r3, #0
}
 800b3bc:	4618      	mov	r0, r3
 800b3be:	3708      	adds	r7, #8
 800b3c0:	46bd      	mov	sp, r7
 800b3c2:	bd80      	pop	{r7, pc}

0800b3c4 <HAL_DAC_Start_DMA>:
  *            @arg DAC_ALIGN_12B_R: 12bit right data alignment selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Start_DMA(DAC_HandleTypeDef *hdac, uint32_t Channel, uint32_t *pData, uint32_t Length,
                                    uint32_t Alignment)
{
 800b3c4:	b580      	push	{r7, lr}
 800b3c6:	b086      	sub	sp, #24
 800b3c8:	af00      	add	r7, sp, #0
 800b3ca:	60f8      	str	r0, [r7, #12]
 800b3cc:	60b9      	str	r1, [r7, #8]
 800b3ce:	607a      	str	r2, [r7, #4]
 800b3d0:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status;
  uint32_t tmpreg = 0U;
 800b3d2:	2300      	movs	r3, #0
 800b3d4:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(hdac->Instance, Channel));
  assert_param(IS_DAC_ALIGN(Alignment));

  /* Process locked */
  __HAL_LOCK(hdac);
 800b3d6:	68fb      	ldr	r3, [r7, #12]
 800b3d8:	795b      	ldrb	r3, [r3, #5]
 800b3da:	2b01      	cmp	r3, #1
 800b3dc:	d101      	bne.n	800b3e2 <HAL_DAC_Start_DMA+0x1e>
 800b3de:	2302      	movs	r3, #2
 800b3e0:	e0a1      	b.n	800b526 <HAL_DAC_Start_DMA+0x162>
 800b3e2:	68fb      	ldr	r3, [r7, #12]
 800b3e4:	2201      	movs	r2, #1
 800b3e6:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 800b3e8:	68fb      	ldr	r3, [r7, #12]
 800b3ea:	2202      	movs	r2, #2
 800b3ec:	711a      	strb	r2, [r3, #4]

  if (Channel == DAC_CHANNEL_1)
 800b3ee:	68bb      	ldr	r3, [r7, #8]
 800b3f0:	2b00      	cmp	r3, #0
 800b3f2:	d12a      	bne.n	800b44a <HAL_DAC_Start_DMA+0x86>
  {
    /* Set the DMA transfer complete callback for channel1 */
    hdac->DMA_Handle1->XferCpltCallback = DAC_DMAConvCpltCh1;
 800b3f4:	68fb      	ldr	r3, [r7, #12]
 800b3f6:	689b      	ldr	r3, [r3, #8]
 800b3f8:	4a4d      	ldr	r2, [pc, #308]	; (800b530 <HAL_DAC_Start_DMA+0x16c>)
 800b3fa:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Set the DMA half transfer complete callback for channel1 */
    hdac->DMA_Handle1->XferHalfCpltCallback = DAC_DMAHalfConvCpltCh1;
 800b3fc:	68fb      	ldr	r3, [r7, #12]
 800b3fe:	689b      	ldr	r3, [r3, #8]
 800b400:	4a4c      	ldr	r2, [pc, #304]	; (800b534 <HAL_DAC_Start_DMA+0x170>)
 800b402:	631a      	str	r2, [r3, #48]	; 0x30

    /* Set the DMA error callback for channel1 */
    hdac->DMA_Handle1->XferErrorCallback = DAC_DMAErrorCh1;
 800b404:	68fb      	ldr	r3, [r7, #12]
 800b406:	689b      	ldr	r3, [r3, #8]
 800b408:	4a4b      	ldr	r2, [pc, #300]	; (800b538 <HAL_DAC_Start_DMA+0x174>)
 800b40a:	635a      	str	r2, [r3, #52]	; 0x34

    /* Enable the selected DAC channel1 DMA request */
    SET_BIT(hdac->Instance->CR, DAC_CR_DMAEN1);
 800b40c:	68fb      	ldr	r3, [r7, #12]
 800b40e:	681b      	ldr	r3, [r3, #0]
 800b410:	681a      	ldr	r2, [r3, #0]
 800b412:	68fb      	ldr	r3, [r7, #12]
 800b414:	681b      	ldr	r3, [r3, #0]
 800b416:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 800b41a:	601a      	str	r2, [r3, #0]

    /* Case of use of channel 1 */
    switch (Alignment)
 800b41c:	6a3b      	ldr	r3, [r7, #32]
 800b41e:	2b04      	cmp	r3, #4
 800b420:	d009      	beq.n	800b436 <HAL_DAC_Start_DMA+0x72>
 800b422:	2b08      	cmp	r3, #8
 800b424:	d00c      	beq.n	800b440 <HAL_DAC_Start_DMA+0x7c>
 800b426:	2b00      	cmp	r3, #0
 800b428:	d000      	beq.n	800b42c <HAL_DAC_Start_DMA+0x68>
      case DAC_ALIGN_8B_R:
        /* Get DHR8R1 address */
        tmpreg = (uint32_t)&hdac->Instance->DHR8R1;
        break;
      default:
        break;
 800b42a:	e039      	b.n	800b4a0 <HAL_DAC_Start_DMA+0xdc>
        tmpreg = (uint32_t)&hdac->Instance->DHR12R1;
 800b42c:	68fb      	ldr	r3, [r7, #12]
 800b42e:	681b      	ldr	r3, [r3, #0]
 800b430:	3308      	adds	r3, #8
 800b432:	613b      	str	r3, [r7, #16]
        break;
 800b434:	e034      	b.n	800b4a0 <HAL_DAC_Start_DMA+0xdc>
        tmpreg = (uint32_t)&hdac->Instance->DHR12L1;
 800b436:	68fb      	ldr	r3, [r7, #12]
 800b438:	681b      	ldr	r3, [r3, #0]
 800b43a:	330c      	adds	r3, #12
 800b43c:	613b      	str	r3, [r7, #16]
        break;
 800b43e:	e02f      	b.n	800b4a0 <HAL_DAC_Start_DMA+0xdc>
        tmpreg = (uint32_t)&hdac->Instance->DHR8R1;
 800b440:	68fb      	ldr	r3, [r7, #12]
 800b442:	681b      	ldr	r3, [r3, #0]
 800b444:	3310      	adds	r3, #16
 800b446:	613b      	str	r3, [r7, #16]
        break;
 800b448:	e02a      	b.n	800b4a0 <HAL_DAC_Start_DMA+0xdc>
    }
  }
  else
  {
    /* Set the DMA transfer complete callback for channel2 */
    hdac->DMA_Handle2->XferCpltCallback = DAC_DMAConvCpltCh2;
 800b44a:	68fb      	ldr	r3, [r7, #12]
 800b44c:	68db      	ldr	r3, [r3, #12]
 800b44e:	4a3b      	ldr	r2, [pc, #236]	; (800b53c <HAL_DAC_Start_DMA+0x178>)
 800b450:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Set the DMA half transfer complete callback for channel2 */
    hdac->DMA_Handle2->XferHalfCpltCallback = DAC_DMAHalfConvCpltCh2;
 800b452:	68fb      	ldr	r3, [r7, #12]
 800b454:	68db      	ldr	r3, [r3, #12]
 800b456:	4a3a      	ldr	r2, [pc, #232]	; (800b540 <HAL_DAC_Start_DMA+0x17c>)
 800b458:	631a      	str	r2, [r3, #48]	; 0x30

    /* Set the DMA error callback for channel2 */
    hdac->DMA_Handle2->XferErrorCallback = DAC_DMAErrorCh2;
 800b45a:	68fb      	ldr	r3, [r7, #12]
 800b45c:	68db      	ldr	r3, [r3, #12]
 800b45e:	4a39      	ldr	r2, [pc, #228]	; (800b544 <HAL_DAC_Start_DMA+0x180>)
 800b460:	635a      	str	r2, [r3, #52]	; 0x34

    /* Enable the selected DAC channel2 DMA request */
    SET_BIT(hdac->Instance->CR, DAC_CR_DMAEN2);
 800b462:	68fb      	ldr	r3, [r7, #12]
 800b464:	681b      	ldr	r3, [r3, #0]
 800b466:	681a      	ldr	r2, [r3, #0]
 800b468:	68fb      	ldr	r3, [r7, #12]
 800b46a:	681b      	ldr	r3, [r3, #0]
 800b46c:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 800b470:	601a      	str	r2, [r3, #0]

    /* Case of use of channel 2 */
    switch (Alignment)
 800b472:	6a3b      	ldr	r3, [r7, #32]
 800b474:	2b04      	cmp	r3, #4
 800b476:	d009      	beq.n	800b48c <HAL_DAC_Start_DMA+0xc8>
 800b478:	2b08      	cmp	r3, #8
 800b47a:	d00c      	beq.n	800b496 <HAL_DAC_Start_DMA+0xd2>
 800b47c:	2b00      	cmp	r3, #0
 800b47e:	d000      	beq.n	800b482 <HAL_DAC_Start_DMA+0xbe>
      case DAC_ALIGN_8B_R:
        /* Get DHR8R2 address */
        tmpreg = (uint32_t)&hdac->Instance->DHR8R2;
        break;
      default:
        break;
 800b480:	e00e      	b.n	800b4a0 <HAL_DAC_Start_DMA+0xdc>
        tmpreg = (uint32_t)&hdac->Instance->DHR12R2;
 800b482:	68fb      	ldr	r3, [r7, #12]
 800b484:	681b      	ldr	r3, [r3, #0]
 800b486:	3314      	adds	r3, #20
 800b488:	613b      	str	r3, [r7, #16]
        break;
 800b48a:	e009      	b.n	800b4a0 <HAL_DAC_Start_DMA+0xdc>
        tmpreg = (uint32_t)&hdac->Instance->DHR12L2;
 800b48c:	68fb      	ldr	r3, [r7, #12]
 800b48e:	681b      	ldr	r3, [r3, #0]
 800b490:	3318      	adds	r3, #24
 800b492:	613b      	str	r3, [r7, #16]
        break;
 800b494:	e004      	b.n	800b4a0 <HAL_DAC_Start_DMA+0xdc>
        tmpreg = (uint32_t)&hdac->Instance->DHR8R2;
 800b496:	68fb      	ldr	r3, [r7, #12]
 800b498:	681b      	ldr	r3, [r3, #0]
 800b49a:	331c      	adds	r3, #28
 800b49c:	613b      	str	r3, [r7, #16]
        break;
 800b49e:	bf00      	nop
    }
  }

  /* Enable the DMA channel */
  if (Channel == DAC_CHANNEL_1)
 800b4a0:	68bb      	ldr	r3, [r7, #8]
 800b4a2:	2b00      	cmp	r3, #0
 800b4a4:	d111      	bne.n	800b4ca <HAL_DAC_Start_DMA+0x106>
  {
    /* Enable the DAC DMA underrun interrupt */
    __HAL_DAC_ENABLE_IT(hdac, DAC_IT_DMAUDR1);
 800b4a6:	68fb      	ldr	r3, [r7, #12]
 800b4a8:	681b      	ldr	r3, [r3, #0]
 800b4aa:	681a      	ldr	r2, [r3, #0]
 800b4ac:	68fb      	ldr	r3, [r7, #12]
 800b4ae:	681b      	ldr	r3, [r3, #0]
 800b4b0:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800b4b4:	601a      	str	r2, [r3, #0]

    /* Enable the DMA channel */
    status = HAL_DMA_Start_IT(hdac->DMA_Handle1, (uint32_t)pData, tmpreg, Length);
 800b4b6:	68fb      	ldr	r3, [r7, #12]
 800b4b8:	6898      	ldr	r0, [r3, #8]
 800b4ba:	6879      	ldr	r1, [r7, #4]
 800b4bc:	683b      	ldr	r3, [r7, #0]
 800b4be:	693a      	ldr	r2, [r7, #16]
 800b4c0:	f000 fbd2 	bl	800bc68 <HAL_DMA_Start_IT>
 800b4c4:	4603      	mov	r3, r0
 800b4c6:	75fb      	strb	r3, [r7, #23]
 800b4c8:	e010      	b.n	800b4ec <HAL_DAC_Start_DMA+0x128>
  }
  else
  {
    /* Enable the DAC DMA underrun interrupt */
    __HAL_DAC_ENABLE_IT(hdac, DAC_IT_DMAUDR2);
 800b4ca:	68fb      	ldr	r3, [r7, #12]
 800b4cc:	681b      	ldr	r3, [r3, #0]
 800b4ce:	681a      	ldr	r2, [r3, #0]
 800b4d0:	68fb      	ldr	r3, [r7, #12]
 800b4d2:	681b      	ldr	r3, [r3, #0]
 800b4d4:	f042 5200 	orr.w	r2, r2, #536870912	; 0x20000000
 800b4d8:	601a      	str	r2, [r3, #0]

    /* Enable the DMA channel */
    status = HAL_DMA_Start_IT(hdac->DMA_Handle2, (uint32_t)pData, tmpreg, Length);
 800b4da:	68fb      	ldr	r3, [r7, #12]
 800b4dc:	68d8      	ldr	r0, [r3, #12]
 800b4de:	6879      	ldr	r1, [r7, #4]
 800b4e0:	683b      	ldr	r3, [r7, #0]
 800b4e2:	693a      	ldr	r2, [r7, #16]
 800b4e4:	f000 fbc0 	bl	800bc68 <HAL_DMA_Start_IT>
 800b4e8:	4603      	mov	r3, r0
 800b4ea:	75fb      	strb	r3, [r7, #23]
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hdac);
 800b4ec:	68fb      	ldr	r3, [r7, #12]
 800b4ee:	2200      	movs	r2, #0
 800b4f0:	715a      	strb	r2, [r3, #5]

  if (status == HAL_OK)
 800b4f2:	7dfb      	ldrb	r3, [r7, #23]
 800b4f4:	2b00      	cmp	r3, #0
 800b4f6:	d10f      	bne.n	800b518 <HAL_DAC_Start_DMA+0x154>
  {
    /* Enable the Peripheral */
    __HAL_DAC_ENABLE(hdac, Channel);
 800b4f8:	68fb      	ldr	r3, [r7, #12]
 800b4fa:	681b      	ldr	r3, [r3, #0]
 800b4fc:	6819      	ldr	r1, [r3, #0]
 800b4fe:	68bb      	ldr	r3, [r7, #8]
 800b500:	f003 0310 	and.w	r3, r3, #16
 800b504:	2201      	movs	r2, #1
 800b506:	409a      	lsls	r2, r3
 800b508:	68fb      	ldr	r3, [r7, #12]
 800b50a:	681b      	ldr	r3, [r3, #0]
 800b50c:	430a      	orrs	r2, r1
 800b50e:	601a      	str	r2, [r3, #0]
    /* Ensure minimum wait before using peripheral after enabling it */
    HAL_Delay(1);
 800b510:	2001      	movs	r0, #1
 800b512:	f7fd fd89 	bl	8009028 <HAL_Delay>
 800b516:	e005      	b.n	800b524 <HAL_DAC_Start_DMA+0x160>
  }
  else
  {
    hdac->ErrorCode |= HAL_DAC_ERROR_DMA;
 800b518:	68fb      	ldr	r3, [r7, #12]
 800b51a:	691b      	ldr	r3, [r3, #16]
 800b51c:	f043 0204 	orr.w	r2, r3, #4
 800b520:	68fb      	ldr	r3, [r7, #12]
 800b522:	611a      	str	r2, [r3, #16]
  }

  /* Return function status */
  return status;
 800b524:	7dfb      	ldrb	r3, [r7, #23]
}
 800b526:	4618      	mov	r0, r3
 800b528:	3718      	adds	r7, #24
 800b52a:	46bd      	mov	sp, r7
 800b52c:	bd80      	pop	{r7, pc}
 800b52e:	bf00      	nop
 800b530:	0800ba05 	.word	0x0800ba05
 800b534:	0800ba27 	.word	0x0800ba27
 800b538:	0800ba43 	.word	0x0800ba43
 800b53c:	0800baad 	.word	0x0800baad
 800b540:	0800bacf 	.word	0x0800bacf
 800b544:	0800baeb 	.word	0x0800baeb

0800b548 <HAL_DAC_Stop_DMA>:
  *         (1) On this STM32 serie, parameter not available on all instances.
  *             Refer to device datasheet for channels availability.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Stop_DMA(DAC_HandleTypeDef *hdac, uint32_t Channel)
{
 800b548:	b580      	push	{r7, lr}
 800b54a:	b084      	sub	sp, #16
 800b54c:	af00      	add	r7, sp, #0
 800b54e:	6078      	str	r0, [r7, #4]
 800b550:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(hdac->Instance, Channel));

  /* Disable the selected DAC channel DMA request */
  hdac->Instance->CR &= ~(DAC_CR_DMAEN1 << (Channel & 0x10UL));
 800b552:	687b      	ldr	r3, [r7, #4]
 800b554:	681b      	ldr	r3, [r3, #0]
 800b556:	6819      	ldr	r1, [r3, #0]
 800b558:	683b      	ldr	r3, [r7, #0]
 800b55a:	f003 0310 	and.w	r3, r3, #16
 800b55e:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800b562:	fa02 f303 	lsl.w	r3, r2, r3
 800b566:	43da      	mvns	r2, r3
 800b568:	687b      	ldr	r3, [r7, #4]
 800b56a:	681b      	ldr	r3, [r3, #0]
 800b56c:	400a      	ands	r2, r1
 800b56e:	601a      	str	r2, [r3, #0]

  /* Disable the Peripheral */
  __HAL_DAC_DISABLE(hdac, Channel);
 800b570:	687b      	ldr	r3, [r7, #4]
 800b572:	681b      	ldr	r3, [r3, #0]
 800b574:	6819      	ldr	r1, [r3, #0]
 800b576:	683b      	ldr	r3, [r7, #0]
 800b578:	f003 0310 	and.w	r3, r3, #16
 800b57c:	2201      	movs	r2, #1
 800b57e:	fa02 f303 	lsl.w	r3, r2, r3
 800b582:	43da      	mvns	r2, r3
 800b584:	687b      	ldr	r3, [r7, #4]
 800b586:	681b      	ldr	r3, [r3, #0]
 800b588:	400a      	ands	r2, r1
 800b58a:	601a      	str	r2, [r3, #0]
  /* Ensure minimum wait before enabling peripheral after disabling it */
  HAL_Delay(1);
 800b58c:	2001      	movs	r0, #1
 800b58e:	f7fd fd4b 	bl	8009028 <HAL_Delay>

  /* Disable the DMA channel */

  /* Channel1 is used */
  if (Channel == DAC_CHANNEL_1)
 800b592:	683b      	ldr	r3, [r7, #0]
 800b594:	2b00      	cmp	r3, #0
 800b596:	d10f      	bne.n	800b5b8 <HAL_DAC_Stop_DMA+0x70>
  {
    /* Disable the DMA channel */
    status = HAL_DMA_Abort(hdac->DMA_Handle1);
 800b598:	687b      	ldr	r3, [r7, #4]
 800b59a:	689b      	ldr	r3, [r3, #8]
 800b59c:	4618      	mov	r0, r3
 800b59e:	f000 fbde 	bl	800bd5e <HAL_DMA_Abort>
 800b5a2:	4603      	mov	r3, r0
 800b5a4:	73fb      	strb	r3, [r7, #15]

    /* Disable the DAC DMA underrun interrupt */
    __HAL_DAC_DISABLE_IT(hdac, DAC_IT_DMAUDR1);
 800b5a6:	687b      	ldr	r3, [r7, #4]
 800b5a8:	681b      	ldr	r3, [r3, #0]
 800b5aa:	681a      	ldr	r2, [r3, #0]
 800b5ac:	687b      	ldr	r3, [r7, #4]
 800b5ae:	681b      	ldr	r3, [r3, #0]
 800b5b0:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800b5b4:	601a      	str	r2, [r3, #0]
 800b5b6:	e00e      	b.n	800b5d6 <HAL_DAC_Stop_DMA+0x8e>
  }
  else /* Channel2 is used for */
  {
    /* Disable the DMA channel */
    status = HAL_DMA_Abort(hdac->DMA_Handle2);
 800b5b8:	687b      	ldr	r3, [r7, #4]
 800b5ba:	68db      	ldr	r3, [r3, #12]
 800b5bc:	4618      	mov	r0, r3
 800b5be:	f000 fbce 	bl	800bd5e <HAL_DMA_Abort>
 800b5c2:	4603      	mov	r3, r0
 800b5c4:	73fb      	strb	r3, [r7, #15]

    /* Disable the DAC DMA underrun interrupt */
    __HAL_DAC_DISABLE_IT(hdac, DAC_IT_DMAUDR2);
 800b5c6:	687b      	ldr	r3, [r7, #4]
 800b5c8:	681b      	ldr	r3, [r3, #0]
 800b5ca:	681a      	ldr	r2, [r3, #0]
 800b5cc:	687b      	ldr	r3, [r7, #4]
 800b5ce:	681b      	ldr	r3, [r3, #0]
 800b5d0:	f022 5200 	bic.w	r2, r2, #536870912	; 0x20000000
 800b5d4:	601a      	str	r2, [r3, #0]
  }

  /* Check if DMA Channel effectively disabled */
  if (status != HAL_OK)
 800b5d6:	7bfb      	ldrb	r3, [r7, #15]
 800b5d8:	2b00      	cmp	r3, #0
 800b5da:	d003      	beq.n	800b5e4 <HAL_DAC_Stop_DMA+0x9c>
  {
    /* Update DAC state machine to error */
    hdac->State = HAL_DAC_STATE_ERROR;
 800b5dc:	687b      	ldr	r3, [r7, #4]
 800b5de:	2204      	movs	r2, #4
 800b5e0:	711a      	strb	r2, [r3, #4]
 800b5e2:	e002      	b.n	800b5ea <HAL_DAC_Stop_DMA+0xa2>
  }
  else
  {
    /* Change DAC state */
    hdac->State = HAL_DAC_STATE_READY;
 800b5e4:	687b      	ldr	r3, [r7, #4]
 800b5e6:	2201      	movs	r2, #1
 800b5e8:	711a      	strb	r2, [r3, #4]
  }

  /* Return function status */
  return status;
 800b5ea:	7bfb      	ldrb	r3, [r7, #15]
}
 800b5ec:	4618      	mov	r0, r3
 800b5ee:	3710      	adds	r7, #16
 800b5f0:	46bd      	mov	sp, r7
 800b5f2:	bd80      	pop	{r7, pc}

0800b5f4 <HAL_DAC_SetValue>:
  *            @arg DAC_ALIGN_12B_R: 12bit right data alignment selected
  * @param  Data Data to be loaded in the selected data holding register.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_SetValue(DAC_HandleTypeDef *hdac, uint32_t Channel, uint32_t Alignment, uint32_t Data)
{
 800b5f4:	b480      	push	{r7}
 800b5f6:	b087      	sub	sp, #28
 800b5f8:	af00      	add	r7, sp, #0
 800b5fa:	60f8      	str	r0, [r7, #12]
 800b5fc:	60b9      	str	r1, [r7, #8]
 800b5fe:	607a      	str	r2, [r7, #4]
 800b600:	603b      	str	r3, [r7, #0]
  __IO uint32_t tmp = 0;
 800b602:	2300      	movs	r3, #0
 800b604:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(hdac->Instance, Channel));
  assert_param(IS_DAC_ALIGN(Alignment));
  /* In case DMA Double data mode is activated, DATA range is almost full uin32_t one: no check */
  if ((hdac->Instance->MCR & (DAC_MCR_DMADOUBLE1 << (Channel & 0x10UL))) == 0UL)
 800b606:	68fb      	ldr	r3, [r7, #12]
 800b608:	681b      	ldr	r3, [r3, #0]
 800b60a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
  {
    assert_param(IS_DAC_DATA(Data));
  }

  tmp = (uint32_t)hdac->Instance;
 800b60c:	68fb      	ldr	r3, [r7, #12]
 800b60e:	681b      	ldr	r3, [r3, #0]
 800b610:	617b      	str	r3, [r7, #20]
  if (Channel == DAC_CHANNEL_1)
 800b612:	68bb      	ldr	r3, [r7, #8]
 800b614:	2b00      	cmp	r3, #0
 800b616:	d105      	bne.n	800b624 <HAL_DAC_SetValue+0x30>
  {
    tmp += DAC_DHR12R1_ALIGNMENT(Alignment);
 800b618:	697a      	ldr	r2, [r7, #20]
 800b61a:	687b      	ldr	r3, [r7, #4]
 800b61c:	4413      	add	r3, r2
 800b61e:	3308      	adds	r3, #8
 800b620:	617b      	str	r3, [r7, #20]
 800b622:	e004      	b.n	800b62e <HAL_DAC_SetValue+0x3a>
  }
  else
  {
    tmp += DAC_DHR12R2_ALIGNMENT(Alignment);
 800b624:	697a      	ldr	r2, [r7, #20]
 800b626:	687b      	ldr	r3, [r7, #4]
 800b628:	4413      	add	r3, r2
 800b62a:	3314      	adds	r3, #20
 800b62c:	617b      	str	r3, [r7, #20]
  }

  /* Set the DAC channel selected data holding register */
  *(__IO uint32_t *) tmp = Data;
 800b62e:	697b      	ldr	r3, [r7, #20]
 800b630:	461a      	mov	r2, r3
 800b632:	683b      	ldr	r3, [r7, #0]
 800b634:	6013      	str	r3, [r2, #0]

  /* Return function status */
  return HAL_OK;
 800b636:	2300      	movs	r3, #0
}
 800b638:	4618      	mov	r0, r3
 800b63a:	371c      	adds	r7, #28
 800b63c:	46bd      	mov	sp, r7
 800b63e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b642:	4770      	bx	lr

0800b644 <HAL_DAC_ConvCpltCallbackCh1>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DAC_ConvCpltCallbackCh1(DAC_HandleTypeDef *hdac)
{
 800b644:	b480      	push	{r7}
 800b646:	b083      	sub	sp, #12
 800b648:	af00      	add	r7, sp, #0
 800b64a:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DAC_ConvCpltCallbackCh1 could be implemented in the user file
   */
}
 800b64c:	bf00      	nop
 800b64e:	370c      	adds	r7, #12
 800b650:	46bd      	mov	sp, r7
 800b652:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b656:	4770      	bx	lr

0800b658 <HAL_DAC_ConvHalfCpltCallbackCh1>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DAC_ConvHalfCpltCallbackCh1(DAC_HandleTypeDef *hdac)
{
 800b658:	b480      	push	{r7}
 800b65a:	b083      	sub	sp, #12
 800b65c:	af00      	add	r7, sp, #0
 800b65e:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DAC_ConvHalfCpltCallbackCh1 could be implemented in the user file
   */
}
 800b660:	bf00      	nop
 800b662:	370c      	adds	r7, #12
 800b664:	46bd      	mov	sp, r7
 800b666:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b66a:	4770      	bx	lr

0800b66c <HAL_DAC_ErrorCallbackCh1>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DAC_ErrorCallbackCh1(DAC_HandleTypeDef *hdac)
{
 800b66c:	b480      	push	{r7}
 800b66e:	b083      	sub	sp, #12
 800b670:	af00      	add	r7, sp, #0
 800b672:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DAC_ErrorCallbackCh1 could be implemented in the user file
   */
}
 800b674:	bf00      	nop
 800b676:	370c      	adds	r7, #12
 800b678:	46bd      	mov	sp, r7
 800b67a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b67e:	4770      	bx	lr

0800b680 <HAL_DAC_GetValue>:
  *         (1) On this STM32 serie, parameter not available on all instances.
  *             Refer to device datasheet for channels availability.
  * @retval The selected DAC channel data output value.
  */
uint32_t HAL_DAC_GetValue(DAC_HandleTypeDef *hdac, uint32_t Channel)
{
 800b680:	b480      	push	{r7}
 800b682:	b083      	sub	sp, #12
 800b684:	af00      	add	r7, sp, #0
 800b686:	6078      	str	r0, [r7, #4]
 800b688:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(hdac->Instance, Channel));

  /* Returns the DAC channel data output register value */
  if (Channel == DAC_CHANNEL_1)
 800b68a:	683b      	ldr	r3, [r7, #0]
 800b68c:	2b00      	cmp	r3, #0
 800b68e:	d103      	bne.n	800b698 <HAL_DAC_GetValue+0x18>
  {
    return hdac->Instance->DOR1;
 800b690:	687b      	ldr	r3, [r7, #4]
 800b692:	681b      	ldr	r3, [r3, #0]
 800b694:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b696:	e002      	b.n	800b69e <HAL_DAC_GetValue+0x1e>
  }
  else
  {
    return hdac->Instance->DOR2;
 800b698:	687b      	ldr	r3, [r7, #4]
 800b69a:	681b      	ldr	r3, [r3, #0]
 800b69c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  }
}
 800b69e:	4618      	mov	r0, r3
 800b6a0:	370c      	adds	r7, #12
 800b6a2:	46bd      	mov	sp, r7
 800b6a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b6a8:	4770      	bx	lr
	...

0800b6ac <HAL_DAC_ConfigChannel>:
  *         (1) On this STM32 serie, parameter not available on all instances.
  *             Refer to device datasheet for channels availability.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_ConfigChannel(DAC_HandleTypeDef *hdac, DAC_ChannelConfTypeDef *sConfig, uint32_t Channel)
{
 800b6ac:	b580      	push	{r7, lr}
 800b6ae:	b08a      	sub	sp, #40	; 0x28
 800b6b0:	af00      	add	r7, sp, #0
 800b6b2:	60f8      	str	r0, [r7, #12]
 800b6b4:	60b9      	str	r1, [r7, #8]
 800b6b6:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg1;
  uint32_t tmpreg2;
  uint32_t tickstart = 0U;
 800b6b8:	2300      	movs	r3, #0
 800b6ba:	61fb      	str	r3, [r7, #28]
  assert_param(IS_DAC_CHANNEL(hdac->Instance, Channel));
  assert_param(IS_FUNCTIONAL_STATE(sConfig->DAC_DMADoubleDataMode));
  assert_param(IS_FUNCTIONAL_STATE(sConfig->DAC_SignedFormat));

  /* Process locked */
  __HAL_LOCK(hdac);
 800b6bc:	68fb      	ldr	r3, [r7, #12]
 800b6be:	795b      	ldrb	r3, [r3, #5]
 800b6c0:	2b01      	cmp	r3, #1
 800b6c2:	d101      	bne.n	800b6c8 <HAL_DAC_ConfigChannel+0x1c>
 800b6c4:	2302      	movs	r3, #2
 800b6c6:	e194      	b.n	800b9f2 <HAL_DAC_ConfigChannel+0x346>
 800b6c8:	68fb      	ldr	r3, [r7, #12]
 800b6ca:	2201      	movs	r2, #1
 800b6cc:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 800b6ce:	68fb      	ldr	r3, [r7, #12]
 800b6d0:	2202      	movs	r2, #2
 800b6d2:	711a      	strb	r2, [r3, #4]

  if (sConfig->DAC_SampleAndHold == DAC_SAMPLEANDHOLD_ENABLE)
 800b6d4:	68bb      	ldr	r3, [r7, #8]
 800b6d6:	689b      	ldr	r3, [r3, #8]
 800b6d8:	2b04      	cmp	r3, #4
 800b6da:	d174      	bne.n	800b7c6 <HAL_DAC_ConfigChannel+0x11a>
    /* Sample on old configuration */
  {
    /* SampleTime */
    if (Channel == DAC_CHANNEL_1)
 800b6dc:	687b      	ldr	r3, [r7, #4]
 800b6de:	2b00      	cmp	r3, #0
 800b6e0:	d137      	bne.n	800b752 <HAL_DAC_ConfigChannel+0xa6>
    {
      /* Get timeout */
      tickstart = HAL_GetTick();
 800b6e2:	f7fd fc95 	bl	8009010 <HAL_GetTick>
 800b6e6:	61f8      	str	r0, [r7, #28]

      /* SHSR1 can be written when BWST1 is cleared */
      while (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 800b6e8:	e011      	b.n	800b70e <HAL_DAC_ConfigChannel+0x62>
      {
        /* Check for the Timeout */
        if ((HAL_GetTick() - tickstart) > TIMEOUT_DAC_CALIBCONFIG)
 800b6ea:	f7fd fc91 	bl	8009010 <HAL_GetTick>
 800b6ee:	4602      	mov	r2, r0
 800b6f0:	69fb      	ldr	r3, [r7, #28]
 800b6f2:	1ad3      	subs	r3, r2, r3
 800b6f4:	2b01      	cmp	r3, #1
 800b6f6:	d90a      	bls.n	800b70e <HAL_DAC_ConfigChannel+0x62>
        {
          /* Update error code */
          SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_TIMEOUT);
 800b6f8:	68fb      	ldr	r3, [r7, #12]
 800b6fa:	691b      	ldr	r3, [r3, #16]
 800b6fc:	f043 0208 	orr.w	r2, r3, #8
 800b700:	68fb      	ldr	r3, [r7, #12]
 800b702:	611a      	str	r2, [r3, #16]

          /* Change the DMA state */
          hdac->State = HAL_DAC_STATE_TIMEOUT;
 800b704:	68fb      	ldr	r3, [r7, #12]
 800b706:	2203      	movs	r2, #3
 800b708:	711a      	strb	r2, [r3, #4]

          return HAL_TIMEOUT;
 800b70a:	2303      	movs	r3, #3
 800b70c:	e171      	b.n	800b9f2 <HAL_DAC_ConfigChannel+0x346>
      while (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 800b70e:	68fb      	ldr	r3, [r7, #12]
 800b710:	681b      	ldr	r3, [r3, #0]
 800b712:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b714:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800b718:	2b00      	cmp	r3, #0
 800b71a:	d1e6      	bne.n	800b6ea <HAL_DAC_ConfigChannel+0x3e>
        }
      }
      HAL_Delay(1);
 800b71c:	2001      	movs	r0, #1
 800b71e:	f7fd fc83 	bl	8009028 <HAL_Delay>
      hdac->Instance->SHSR1 = sConfig->DAC_SampleAndHoldConfig.DAC_SampleTime;
 800b722:	68fb      	ldr	r3, [r7, #12]
 800b724:	681b      	ldr	r3, [r3, #0]
 800b726:	68ba      	ldr	r2, [r7, #8]
 800b728:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800b72a:	641a      	str	r2, [r3, #64]	; 0x40
 800b72c:	e01e      	b.n	800b76c <HAL_DAC_ConfigChannel+0xc0>
      /* SHSR2 can be written when BWST2 is cleared */

      while (((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
      {
        /* Check for the Timeout */
        if ((HAL_GetTick() - tickstart) > TIMEOUT_DAC_CALIBCONFIG)
 800b72e:	f7fd fc6f 	bl	8009010 <HAL_GetTick>
 800b732:	4602      	mov	r2, r0
 800b734:	69fb      	ldr	r3, [r7, #28]
 800b736:	1ad3      	subs	r3, r2, r3
 800b738:	2b01      	cmp	r3, #1
 800b73a:	d90a      	bls.n	800b752 <HAL_DAC_ConfigChannel+0xa6>
        {
          /* Update error code */
          SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_TIMEOUT);
 800b73c:	68fb      	ldr	r3, [r7, #12]
 800b73e:	691b      	ldr	r3, [r3, #16]
 800b740:	f043 0208 	orr.w	r2, r3, #8
 800b744:	68fb      	ldr	r3, [r7, #12]
 800b746:	611a      	str	r2, [r3, #16]

          /* Change the DMA state */
          hdac->State = HAL_DAC_STATE_TIMEOUT;
 800b748:	68fb      	ldr	r3, [r7, #12]
 800b74a:	2203      	movs	r2, #3
 800b74c:	711a      	strb	r2, [r3, #4]

          return HAL_TIMEOUT;
 800b74e:	2303      	movs	r3, #3
 800b750:	e14f      	b.n	800b9f2 <HAL_DAC_ConfigChannel+0x346>
      while (((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
 800b752:	68fb      	ldr	r3, [r7, #12]
 800b754:	681b      	ldr	r3, [r3, #0]
 800b756:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b758:	2b00      	cmp	r3, #0
 800b75a:	dbe8      	blt.n	800b72e <HAL_DAC_ConfigChannel+0x82>
        }
      }
      HAL_Delay(1U);
 800b75c:	2001      	movs	r0, #1
 800b75e:	f7fd fc63 	bl	8009028 <HAL_Delay>
      hdac->Instance->SHSR2 = sConfig->DAC_SampleAndHoldConfig.DAC_SampleTime;
 800b762:	68fb      	ldr	r3, [r7, #12]
 800b764:	681b      	ldr	r3, [r3, #0]
 800b766:	68ba      	ldr	r2, [r7, #8]
 800b768:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800b76a:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* HoldTime */
    MODIFY_REG(hdac->Instance->SHHR, DAC_SHHR_THOLD1 << (Channel & 0x10UL), (sConfig->DAC_SampleAndHoldConfig.DAC_HoldTime) << (Channel & 0x10UL));
 800b76c:	68fb      	ldr	r3, [r7, #12]
 800b76e:	681b      	ldr	r3, [r3, #0]
 800b770:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800b772:	687b      	ldr	r3, [r7, #4]
 800b774:	f003 0310 	and.w	r3, r3, #16
 800b778:	f240 31ff 	movw	r1, #1023	; 0x3ff
 800b77c:	fa01 f303 	lsl.w	r3, r1, r3
 800b780:	43db      	mvns	r3, r3
 800b782:	ea02 0103 	and.w	r1, r2, r3
 800b786:	68bb      	ldr	r3, [r7, #8]
 800b788:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800b78a:	687b      	ldr	r3, [r7, #4]
 800b78c:	f003 0310 	and.w	r3, r3, #16
 800b790:	409a      	lsls	r2, r3
 800b792:	68fb      	ldr	r3, [r7, #12]
 800b794:	681b      	ldr	r3, [r3, #0]
 800b796:	430a      	orrs	r2, r1
 800b798:	649a      	str	r2, [r3, #72]	; 0x48
    /* RefreshTime */
    MODIFY_REG(hdac->Instance->SHRR, DAC_SHRR_TREFRESH1 << (Channel & 0x10UL), (sConfig->DAC_SampleAndHoldConfig.DAC_RefreshTime) << (Channel & 0x10UL));
 800b79a:	68fb      	ldr	r3, [r7, #12]
 800b79c:	681b      	ldr	r3, [r3, #0]
 800b79e:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800b7a0:	687b      	ldr	r3, [r7, #4]
 800b7a2:	f003 0310 	and.w	r3, r3, #16
 800b7a6:	21ff      	movs	r1, #255	; 0xff
 800b7a8:	fa01 f303 	lsl.w	r3, r1, r3
 800b7ac:	43db      	mvns	r3, r3
 800b7ae:	ea02 0103 	and.w	r1, r2, r3
 800b7b2:	68bb      	ldr	r3, [r7, #8]
 800b7b4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b7b6:	687b      	ldr	r3, [r7, #4]
 800b7b8:	f003 0310 	and.w	r3, r3, #16
 800b7bc:	409a      	lsls	r2, r3
 800b7be:	68fb      	ldr	r3, [r7, #12]
 800b7c0:	681b      	ldr	r3, [r3, #0]
 800b7c2:	430a      	orrs	r2, r1
 800b7c4:	64da      	str	r2, [r3, #76]	; 0x4c
  }

  if (sConfig->DAC_UserTrimming == DAC_TRIMMING_USER)
 800b7c6:	68bb      	ldr	r3, [r7, #8]
 800b7c8:	69db      	ldr	r3, [r3, #28]
 800b7ca:	2b01      	cmp	r3, #1
 800b7cc:	d11d      	bne.n	800b80a <HAL_DAC_ConfigChannel+0x15e>
    /* USER TRIMMING */
  {
    /* Get the DAC CCR value */
    tmpreg1 = hdac->Instance->CCR;
 800b7ce:	68fb      	ldr	r3, [r7, #12]
 800b7d0:	681b      	ldr	r3, [r3, #0]
 800b7d2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b7d4:	627b      	str	r3, [r7, #36]	; 0x24
    /* Clear trimming value */
    tmpreg1 &= ~(((uint32_t)(DAC_CCR_OTRIM1)) << (Channel & 0x10UL));
 800b7d6:	687b      	ldr	r3, [r7, #4]
 800b7d8:	f003 0310 	and.w	r3, r3, #16
 800b7dc:	221f      	movs	r2, #31
 800b7de:	fa02 f303 	lsl.w	r3, r2, r3
 800b7e2:	43db      	mvns	r3, r3
 800b7e4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800b7e6:	4013      	ands	r3, r2
 800b7e8:	627b      	str	r3, [r7, #36]	; 0x24
    /* Configure for the selected trimming offset */
    tmpreg2 = sConfig->DAC_TrimmingValue;
 800b7ea:	68bb      	ldr	r3, [r7, #8]
 800b7ec:	6a1b      	ldr	r3, [r3, #32]
 800b7ee:	61bb      	str	r3, [r7, #24]
    /* Calculate CCR register value depending on DAC_Channel */
    tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 800b7f0:	687b      	ldr	r3, [r7, #4]
 800b7f2:	f003 0310 	and.w	r3, r3, #16
 800b7f6:	69ba      	ldr	r2, [r7, #24]
 800b7f8:	fa02 f303 	lsl.w	r3, r2, r3
 800b7fc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800b7fe:	4313      	orrs	r3, r2
 800b800:	627b      	str	r3, [r7, #36]	; 0x24
    /* Write to DAC CCR */
    hdac->Instance->CCR = tmpreg1;
 800b802:	68fb      	ldr	r3, [r7, #12]
 800b804:	681b      	ldr	r3, [r3, #0]
 800b806:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800b808:	639a      	str	r2, [r3, #56]	; 0x38
  }
  /* else factory trimming is used (factory setting are available at reset)*/
  /* SW Nothing has nothing to do */

  /* Get the DAC MCR value */
  tmpreg1 = hdac->Instance->MCR;
 800b80a:	68fb      	ldr	r3, [r7, #12]
 800b80c:	681b      	ldr	r3, [r3, #0]
 800b80e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b810:	627b      	str	r3, [r7, #36]	; 0x24
  /* Clear DAC_MCR_MODEx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_MCR_MODE1)) << (Channel & 0x10UL));
 800b812:	687b      	ldr	r3, [r7, #4]
 800b814:	f003 0310 	and.w	r3, r3, #16
 800b818:	2207      	movs	r2, #7
 800b81a:	fa02 f303 	lsl.w	r3, r2, r3
 800b81e:	43db      	mvns	r3, r3
 800b820:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800b822:	4013      	ands	r3, r2
 800b824:	627b      	str	r3, [r7, #36]	; 0x24
  /* Configure for the selected DAC channel: mode, buffer output & on chip peripheral connect */
  if ((sConfig->DAC_ConnectOnChipPeripheral & DAC_CHIPCONNECT_EXTERNAL) == DAC_CHIPCONNECT_EXTERNAL)
 800b826:	68bb      	ldr	r3, [r7, #8]
 800b828:	699b      	ldr	r3, [r3, #24]
 800b82a:	f003 0301 	and.w	r3, r3, #1
 800b82e:	2b00      	cmp	r3, #0
 800b830:	d002      	beq.n	800b838 <HAL_DAC_ConfigChannel+0x18c>
  {
    connectOnChip = 0x00000000UL;
 800b832:	2300      	movs	r3, #0
 800b834:	623b      	str	r3, [r7, #32]
 800b836:	e011      	b.n	800b85c <HAL_DAC_ConfigChannel+0x1b0>
  }
  else if ((sConfig->DAC_ConnectOnChipPeripheral & DAC_CHIPCONNECT_INTERNAL) == DAC_CHIPCONNECT_INTERNAL)
 800b838:	68bb      	ldr	r3, [r7, #8]
 800b83a:	699b      	ldr	r3, [r3, #24]
 800b83c:	f003 0302 	and.w	r3, r3, #2
 800b840:	2b00      	cmp	r3, #0
 800b842:	d002      	beq.n	800b84a <HAL_DAC_ConfigChannel+0x19e>
  {
    connectOnChip = DAC_MCR_MODE1_0;
 800b844:	2301      	movs	r3, #1
 800b846:	623b      	str	r3, [r7, #32]
 800b848:	e008      	b.n	800b85c <HAL_DAC_ConfigChannel+0x1b0>
  }
  else /* (sConfig->DAC_ConnectOnChipPeripheral & DAC_CHIPCONNECT_BOTH) == DAC_CHIPCONNECT_BOTH */
  {
    if (sConfig->DAC_OutputBuffer == DAC_OUTPUTBUFFER_ENABLE)
 800b84a:	68bb      	ldr	r3, [r7, #8]
 800b84c:	695b      	ldr	r3, [r3, #20]
 800b84e:	2b00      	cmp	r3, #0
 800b850:	d102      	bne.n	800b858 <HAL_DAC_ConfigChannel+0x1ac>
    {
      connectOnChip = DAC_MCR_MODE1_0;
 800b852:	2301      	movs	r3, #1
 800b854:	623b      	str	r3, [r7, #32]
 800b856:	e001      	b.n	800b85c <HAL_DAC_ConfigChannel+0x1b0>
    }
    else
    {
      connectOnChip = 0x00000000UL;
 800b858:	2300      	movs	r3, #0
 800b85a:	623b      	str	r3, [r7, #32]
    }
  }
  tmpreg2 = (sConfig->DAC_SampleAndHold | sConfig->DAC_OutputBuffer | connectOnChip);
 800b85c:	68bb      	ldr	r3, [r7, #8]
 800b85e:	689a      	ldr	r2, [r3, #8]
 800b860:	68bb      	ldr	r3, [r7, #8]
 800b862:	695b      	ldr	r3, [r3, #20]
 800b864:	4313      	orrs	r3, r2
 800b866:	6a3a      	ldr	r2, [r7, #32]
 800b868:	4313      	orrs	r3, r2
 800b86a:	61bb      	str	r3, [r7, #24]
  /* Clear DAC_MCR_DMADOUBLEx */
  tmpreg1 &= ~(((uint32_t)(DAC_MCR_DMADOUBLE1)) << (Channel & 0x10UL));
 800b86c:	687b      	ldr	r3, [r7, #4]
 800b86e:	f003 0310 	and.w	r3, r3, #16
 800b872:	f44f 7280 	mov.w	r2, #256	; 0x100
 800b876:	fa02 f303 	lsl.w	r3, r2, r3
 800b87a:	43db      	mvns	r3, r3
 800b87c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800b87e:	4013      	ands	r3, r2
 800b880:	627b      	str	r3, [r7, #36]	; 0x24
  /* Configure for the selected DAC channel: DMA double data mode */
  tmpreg2 |= (sConfig->DAC_DMADoubleDataMode == ENABLE) ? DAC_MCR_DMADOUBLE1 : 0UL;
 800b882:	68bb      	ldr	r3, [r7, #8]
 800b884:	791b      	ldrb	r3, [r3, #4]
 800b886:	2b01      	cmp	r3, #1
 800b888:	d102      	bne.n	800b890 <HAL_DAC_ConfigChannel+0x1e4>
 800b88a:	f44f 7380 	mov.w	r3, #256	; 0x100
 800b88e:	e000      	b.n	800b892 <HAL_DAC_ConfigChannel+0x1e6>
 800b890:	2300      	movs	r3, #0
 800b892:	69ba      	ldr	r2, [r7, #24]
 800b894:	4313      	orrs	r3, r2
 800b896:	61bb      	str	r3, [r7, #24]
  /* Clear DAC_MCR_SINFORMATx */
  tmpreg1 &= ~(((uint32_t)(DAC_MCR_SINFORMAT1)) << (Channel & 0x10UL));
 800b898:	687b      	ldr	r3, [r7, #4]
 800b89a:	f003 0310 	and.w	r3, r3, #16
 800b89e:	f44f 7200 	mov.w	r2, #512	; 0x200
 800b8a2:	fa02 f303 	lsl.w	r3, r2, r3
 800b8a6:	43db      	mvns	r3, r3
 800b8a8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800b8aa:	4013      	ands	r3, r2
 800b8ac:	627b      	str	r3, [r7, #36]	; 0x24
  /* Configure for the selected DAC channel: Signed format */
  tmpreg2 |= (sConfig->DAC_SignedFormat == ENABLE) ? DAC_MCR_SINFORMAT1 : 0UL;
 800b8ae:	68bb      	ldr	r3, [r7, #8]
 800b8b0:	795b      	ldrb	r3, [r3, #5]
 800b8b2:	2b01      	cmp	r3, #1
 800b8b4:	d102      	bne.n	800b8bc <HAL_DAC_ConfigChannel+0x210>
 800b8b6:	f44f 7300 	mov.w	r3, #512	; 0x200
 800b8ba:	e000      	b.n	800b8be <HAL_DAC_ConfigChannel+0x212>
 800b8bc:	2300      	movs	r3, #0
 800b8be:	69ba      	ldr	r2, [r7, #24]
 800b8c0:	4313      	orrs	r3, r2
 800b8c2:	61bb      	str	r3, [r7, #24]
  /* Clear DAC_MCR_HFSEL bits */
  tmpreg1 &= ~(DAC_MCR_HFSEL);
 800b8c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b8c6:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 800b8ca:	627b      	str	r3, [r7, #36]	; 0x24
  /* Configure for both DAC channels: high frequency mode */
  if (DAC_HIGH_FREQUENCY_INTERFACE_MODE_AUTOMATIC == sConfig->DAC_HighFrequency)
 800b8cc:	68bb      	ldr	r3, [r7, #8]
 800b8ce:	681b      	ldr	r3, [r3, #0]
 800b8d0:	2b02      	cmp	r3, #2
 800b8d2:	d114      	bne.n	800b8fe <HAL_DAC_ConfigChannel+0x252>
  {
    hclkfreq = HAL_RCC_GetHCLKFreq();
 800b8d4:	f001 fc28 	bl	800d128 <HAL_RCC_GetHCLKFreq>
 800b8d8:	6178      	str	r0, [r7, #20]
    if (hclkfreq > HFSEL_ENABLE_THRESHOLD_160MHZ)
 800b8da:	697b      	ldr	r3, [r7, #20]
 800b8dc:	4a47      	ldr	r2, [pc, #284]	; (800b9fc <HAL_DAC_ConfigChannel+0x350>)
 800b8de:	4293      	cmp	r3, r2
 800b8e0:	d904      	bls.n	800b8ec <HAL_DAC_ConfigChannel+0x240>
    {
      tmpreg1 |= DAC_HIGH_FREQUENCY_INTERFACE_MODE_ABOVE_160MHZ;
 800b8e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b8e4:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800b8e8:	627b      	str	r3, [r7, #36]	; 0x24
 800b8ea:	e00d      	b.n	800b908 <HAL_DAC_ConfigChannel+0x25c>
    }
    else if (hclkfreq > HFSEL_ENABLE_THRESHOLD_80MHZ)
 800b8ec:	697b      	ldr	r3, [r7, #20]
 800b8ee:	4a44      	ldr	r2, [pc, #272]	; (800ba00 <HAL_DAC_ConfigChannel+0x354>)
 800b8f0:	4293      	cmp	r3, r2
 800b8f2:	d909      	bls.n	800b908 <HAL_DAC_ConfigChannel+0x25c>
    {
      tmpreg1 |= DAC_HIGH_FREQUENCY_INTERFACE_MODE_ABOVE_80MHZ;
 800b8f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b8f6:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800b8fa:	627b      	str	r3, [r7, #36]	; 0x24
 800b8fc:	e004      	b.n	800b908 <HAL_DAC_ConfigChannel+0x25c>
      tmpreg1 |= DAC_HIGH_FREQUENCY_INTERFACE_MODE_DISABLE;
    }
  }
  else
  {
    tmpreg1 |= sConfig->DAC_HighFrequency;
 800b8fe:	68bb      	ldr	r3, [r7, #8]
 800b900:	681b      	ldr	r3, [r3, #0]
 800b902:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800b904:	4313      	orrs	r3, r2
 800b906:	627b      	str	r3, [r7, #36]	; 0x24
  }
  /* Calculate MCR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 800b908:	687b      	ldr	r3, [r7, #4]
 800b90a:	f003 0310 	and.w	r3, r3, #16
 800b90e:	69ba      	ldr	r2, [r7, #24]
 800b910:	fa02 f303 	lsl.w	r3, r2, r3
 800b914:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800b916:	4313      	orrs	r3, r2
 800b918:	627b      	str	r3, [r7, #36]	; 0x24
  /* Write to DAC MCR */
  hdac->Instance->MCR = tmpreg1;
 800b91a:	68fb      	ldr	r3, [r7, #12]
 800b91c:	681b      	ldr	r3, [r3, #0]
 800b91e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800b920:	63da      	str	r2, [r3, #60]	; 0x3c

  /* DAC in normal operating mode hence clear DAC_CR_CENx bit */
  CLEAR_BIT(hdac->Instance->CR, DAC_CR_CEN1 << (Channel & 0x10UL));
 800b922:	68fb      	ldr	r3, [r7, #12]
 800b924:	681b      	ldr	r3, [r3, #0]
 800b926:	6819      	ldr	r1, [r3, #0]
 800b928:	687b      	ldr	r3, [r7, #4]
 800b92a:	f003 0310 	and.w	r3, r3, #16
 800b92e:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800b932:	fa02 f303 	lsl.w	r3, r2, r3
 800b936:	43da      	mvns	r2, r3
 800b938:	68fb      	ldr	r3, [r7, #12]
 800b93a:	681b      	ldr	r3, [r3, #0]
 800b93c:	400a      	ands	r2, r1
 800b93e:	601a      	str	r2, [r3, #0]

  /* Get the DAC CR value */
  tmpreg1 = hdac->Instance->CR;
 800b940:	68fb      	ldr	r3, [r7, #12]
 800b942:	681b      	ldr	r3, [r3, #0]
 800b944:	681b      	ldr	r3, [r3, #0]
 800b946:	627b      	str	r3, [r7, #36]	; 0x24
  /* Clear TENx, TSELx, WAVEx and MAMPx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1)) << (Channel & 0x10UL));
 800b948:	687b      	ldr	r3, [r7, #4]
 800b94a:	f003 0310 	and.w	r3, r3, #16
 800b94e:	f640 72fe 	movw	r2, #4094	; 0xffe
 800b952:	fa02 f303 	lsl.w	r3, r2, r3
 800b956:	43db      	mvns	r3, r3
 800b958:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800b95a:	4013      	ands	r3, r2
 800b95c:	627b      	str	r3, [r7, #36]	; 0x24
  /* Configure for the selected DAC channel: trigger */
  /* Set TSELx and TENx bits according to DAC_Trigger value */
  tmpreg2 = sConfig->DAC_Trigger;
 800b95e:	68bb      	ldr	r3, [r7, #8]
 800b960:	68db      	ldr	r3, [r3, #12]
 800b962:	61bb      	str	r3, [r7, #24]
  /* Calculate CR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 800b964:	687b      	ldr	r3, [r7, #4]
 800b966:	f003 0310 	and.w	r3, r3, #16
 800b96a:	69ba      	ldr	r2, [r7, #24]
 800b96c:	fa02 f303 	lsl.w	r3, r2, r3
 800b970:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800b972:	4313      	orrs	r3, r2
 800b974:	627b      	str	r3, [r7, #36]	; 0x24
  /* Write to DAC CR */
  hdac->Instance->CR = tmpreg1;
 800b976:	68fb      	ldr	r3, [r7, #12]
 800b978:	681b      	ldr	r3, [r3, #0]
 800b97a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800b97c:	601a      	str	r2, [r3, #0]
  /* Disable wave generation */
  hdac->Instance->CR &= ~(DAC_CR_WAVE1 << (Channel & 0x10UL));
 800b97e:	68fb      	ldr	r3, [r7, #12]
 800b980:	681b      	ldr	r3, [r3, #0]
 800b982:	6819      	ldr	r1, [r3, #0]
 800b984:	687b      	ldr	r3, [r7, #4]
 800b986:	f003 0310 	and.w	r3, r3, #16
 800b98a:	22c0      	movs	r2, #192	; 0xc0
 800b98c:	fa02 f303 	lsl.w	r3, r2, r3
 800b990:	43da      	mvns	r2, r3
 800b992:	68fb      	ldr	r3, [r7, #12]
 800b994:	681b      	ldr	r3, [r3, #0]
 800b996:	400a      	ands	r2, r1
 800b998:	601a      	str	r2, [r3, #0]

  /* Set STRSTTRIGSELx and STINCTRIGSELx bits according to DAC_Trigger & DAC_Trigger2 values */
  tmpreg2 = ((sConfig->DAC_Trigger & DAC_CR_TSEL1) >> DAC_CR_TSEL1_Pos) << DAC_STMODR_STRSTTRIGSEL1_Pos;
 800b99a:	68bb      	ldr	r3, [r7, #8]
 800b99c:	68db      	ldr	r3, [r3, #12]
 800b99e:	089b      	lsrs	r3, r3, #2
 800b9a0:	f003 030f 	and.w	r3, r3, #15
 800b9a4:	61bb      	str	r3, [r7, #24]
  tmpreg2 |= ((sConfig->DAC_Trigger2 & DAC_CR_TSEL1) >> DAC_CR_TSEL1_Pos) << DAC_STMODR_STINCTRIGSEL1_Pos;
 800b9a6:	68bb      	ldr	r3, [r7, #8]
 800b9a8:	691b      	ldr	r3, [r3, #16]
 800b9aa:	089b      	lsrs	r3, r3, #2
 800b9ac:	021b      	lsls	r3, r3, #8
 800b9ae:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 800b9b2:	69ba      	ldr	r2, [r7, #24]
 800b9b4:	4313      	orrs	r3, r2
 800b9b6:	61bb      	str	r3, [r7, #24]
  /* Modify STMODR register value depending on DAC_Channel */
  MODIFY_REG(hdac->Instance->STMODR, (DAC_STMODR_STINCTRIGSEL1 | DAC_STMODR_STRSTTRIGSEL1) << (Channel & 0x10UL), tmpreg2 << (Channel & 0x10UL));
 800b9b8:	68fb      	ldr	r3, [r7, #12]
 800b9ba:	681b      	ldr	r3, [r3, #0]
 800b9bc:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 800b9be:	687b      	ldr	r3, [r7, #4]
 800b9c0:	f003 0310 	and.w	r3, r3, #16
 800b9c4:	f640 710f 	movw	r1, #3855	; 0xf0f
 800b9c8:	fa01 f303 	lsl.w	r3, r1, r3
 800b9cc:	43db      	mvns	r3, r3
 800b9ce:	ea02 0103 	and.w	r1, r2, r3
 800b9d2:	687b      	ldr	r3, [r7, #4]
 800b9d4:	f003 0310 	and.w	r3, r3, #16
 800b9d8:	69ba      	ldr	r2, [r7, #24]
 800b9da:	409a      	lsls	r2, r3
 800b9dc:	68fb      	ldr	r3, [r7, #12]
 800b9de:	681b      	ldr	r3, [r3, #0]
 800b9e0:	430a      	orrs	r2, r1
 800b9e2:	661a      	str	r2, [r3, #96]	; 0x60
  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 800b9e4:	68fb      	ldr	r3, [r7, #12]
 800b9e6:	2201      	movs	r2, #1
 800b9e8:	711a      	strb	r2, [r3, #4]

  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 800b9ea:	68fb      	ldr	r3, [r7, #12]
 800b9ec:	2200      	movs	r2, #0
 800b9ee:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 800b9f0:	2300      	movs	r3, #0
}
 800b9f2:	4618      	mov	r0, r3
 800b9f4:	3728      	adds	r7, #40	; 0x28
 800b9f6:	46bd      	mov	sp, r7
 800b9f8:	bd80      	pop	{r7, pc}
 800b9fa:	bf00      	nop
 800b9fc:	09896800 	.word	0x09896800
 800ba00:	04c4b400 	.word	0x04c4b400

0800ba04 <DAC_DMAConvCpltCh1>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAConvCpltCh1(DMA_HandleTypeDef *hdma)
{
 800ba04:	b580      	push	{r7, lr}
 800ba06:	b084      	sub	sp, #16
 800ba08:	af00      	add	r7, sp, #0
 800ba0a:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800ba0c:	687b      	ldr	r3, [r7, #4]
 800ba0e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ba10:	60fb      	str	r3, [r7, #12]

#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvCpltCallbackCh1(hdac);
#else
  HAL_DAC_ConvCpltCallbackCh1(hdac);
 800ba12:	68f8      	ldr	r0, [r7, #12]
 800ba14:	f7ff fe16 	bl	800b644 <HAL_DAC_ConvCpltCallbackCh1>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

  hdac->State = HAL_DAC_STATE_READY;
 800ba18:	68fb      	ldr	r3, [r7, #12]
 800ba1a:	2201      	movs	r2, #1
 800ba1c:	711a      	strb	r2, [r3, #4]
}
 800ba1e:	bf00      	nop
 800ba20:	3710      	adds	r7, #16
 800ba22:	46bd      	mov	sp, r7
 800ba24:	bd80      	pop	{r7, pc}

0800ba26 <DAC_DMAHalfConvCpltCh1>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAHalfConvCpltCh1(DMA_HandleTypeDef *hdma)
{
 800ba26:	b580      	push	{r7, lr}
 800ba28:	b084      	sub	sp, #16
 800ba2a:	af00      	add	r7, sp, #0
 800ba2c:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800ba2e:	687b      	ldr	r3, [r7, #4]
 800ba30:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ba32:	60fb      	str	r3, [r7, #12]
  /* Conversion complete callback */
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvHalfCpltCallbackCh1(hdac);
#else
  HAL_DAC_ConvHalfCpltCallbackCh1(hdac);
 800ba34:	68f8      	ldr	r0, [r7, #12]
 800ba36:	f7ff fe0f 	bl	800b658 <HAL_DAC_ConvHalfCpltCallbackCh1>
#endif  /* USE_HAL_DAC_REGISTER_CALLBACKS */
}
 800ba3a:	bf00      	nop
 800ba3c:	3710      	adds	r7, #16
 800ba3e:	46bd      	mov	sp, r7
 800ba40:	bd80      	pop	{r7, pc}

0800ba42 <DAC_DMAErrorCh1>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAErrorCh1(DMA_HandleTypeDef *hdma)
{
 800ba42:	b580      	push	{r7, lr}
 800ba44:	b084      	sub	sp, #16
 800ba46:	af00      	add	r7, sp, #0
 800ba48:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800ba4a:	687b      	ldr	r3, [r7, #4]
 800ba4c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ba4e:	60fb      	str	r3, [r7, #12]

  /* Set DAC error code to DMA error */
  hdac->ErrorCode |= HAL_DAC_ERROR_DMA;
 800ba50:	68fb      	ldr	r3, [r7, #12]
 800ba52:	691b      	ldr	r3, [r3, #16]
 800ba54:	f043 0204 	orr.w	r2, r3, #4
 800ba58:	68fb      	ldr	r3, [r7, #12]
 800ba5a:	611a      	str	r2, [r3, #16]

#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ErrorCallbackCh1(hdac);
#else
  HAL_DAC_ErrorCallbackCh1(hdac);
 800ba5c:	68f8      	ldr	r0, [r7, #12]
 800ba5e:	f7ff fe05 	bl	800b66c <HAL_DAC_ErrorCallbackCh1>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

  hdac->State = HAL_DAC_STATE_READY;
 800ba62:	68fb      	ldr	r3, [r7, #12]
 800ba64:	2201      	movs	r2, #1
 800ba66:	711a      	strb	r2, [r3, #4]
}
 800ba68:	bf00      	nop
 800ba6a:	3710      	adds	r7, #16
 800ba6c:	46bd      	mov	sp, r7
 800ba6e:	bd80      	pop	{r7, pc}

0800ba70 <HAL_DACEx_ConvCpltCallbackCh2>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DACEx_ConvCpltCallbackCh2(DAC_HandleTypeDef *hdac)
{
 800ba70:	b480      	push	{r7}
 800ba72:	b083      	sub	sp, #12
 800ba74:	af00      	add	r7, sp, #0
 800ba76:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DACEx_ConvCpltCallbackCh2 could be implemented in the user file
   */
}
 800ba78:	bf00      	nop
 800ba7a:	370c      	adds	r7, #12
 800ba7c:	46bd      	mov	sp, r7
 800ba7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ba82:	4770      	bx	lr

0800ba84 <HAL_DACEx_ConvHalfCpltCallbackCh2>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DACEx_ConvHalfCpltCallbackCh2(DAC_HandleTypeDef *hdac)
{
 800ba84:	b480      	push	{r7}
 800ba86:	b083      	sub	sp, #12
 800ba88:	af00      	add	r7, sp, #0
 800ba8a:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DACEx_ConvHalfCpltCallbackCh2 could be implemented in the user file
   */
}
 800ba8c:	bf00      	nop
 800ba8e:	370c      	adds	r7, #12
 800ba90:	46bd      	mov	sp, r7
 800ba92:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ba96:	4770      	bx	lr

0800ba98 <HAL_DACEx_ErrorCallbackCh2>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DACEx_ErrorCallbackCh2(DAC_HandleTypeDef *hdac)
{
 800ba98:	b480      	push	{r7}
 800ba9a:	b083      	sub	sp, #12
 800ba9c:	af00      	add	r7, sp, #0
 800ba9e:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DACEx_ErrorCallbackCh2 could be implemented in the user file
   */
}
 800baa0:	bf00      	nop
 800baa2:	370c      	adds	r7, #12
 800baa4:	46bd      	mov	sp, r7
 800baa6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800baaa:	4770      	bx	lr

0800baac <DAC_DMAConvCpltCh2>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAConvCpltCh2(DMA_HandleTypeDef *hdma)
{
 800baac:	b580      	push	{r7, lr}
 800baae:	b084      	sub	sp, #16
 800bab0:	af00      	add	r7, sp, #0
 800bab2:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800bab4:	687b      	ldr	r3, [r7, #4]
 800bab6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800bab8:	60fb      	str	r3, [r7, #12]

#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvCpltCallbackCh2(hdac);
#else
  HAL_DACEx_ConvCpltCallbackCh2(hdac);
 800baba:	68f8      	ldr	r0, [r7, #12]
 800babc:	f7ff ffd8 	bl	800ba70 <HAL_DACEx_ConvCpltCallbackCh2>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

  hdac->State = HAL_DAC_STATE_READY;
 800bac0:	68fb      	ldr	r3, [r7, #12]
 800bac2:	2201      	movs	r2, #1
 800bac4:	711a      	strb	r2, [r3, #4]
}
 800bac6:	bf00      	nop
 800bac8:	3710      	adds	r7, #16
 800baca:	46bd      	mov	sp, r7
 800bacc:	bd80      	pop	{r7, pc}

0800bace <DAC_DMAHalfConvCpltCh2>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAHalfConvCpltCh2(DMA_HandleTypeDef *hdma)
{
 800bace:	b580      	push	{r7, lr}
 800bad0:	b084      	sub	sp, #16
 800bad2:	af00      	add	r7, sp, #0
 800bad4:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800bad6:	687b      	ldr	r3, [r7, #4]
 800bad8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800bada:	60fb      	str	r3, [r7, #12]
  /* Conversion complete callback */
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvHalfCpltCallbackCh2(hdac);
#else
  HAL_DACEx_ConvHalfCpltCallbackCh2(hdac);
 800badc:	68f8      	ldr	r0, [r7, #12]
 800bade:	f7ff ffd1 	bl	800ba84 <HAL_DACEx_ConvHalfCpltCallbackCh2>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
}
 800bae2:	bf00      	nop
 800bae4:	3710      	adds	r7, #16
 800bae6:	46bd      	mov	sp, r7
 800bae8:	bd80      	pop	{r7, pc}

0800baea <DAC_DMAErrorCh2>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAErrorCh2(DMA_HandleTypeDef *hdma)
{
 800baea:	b580      	push	{r7, lr}
 800baec:	b084      	sub	sp, #16
 800baee:	af00      	add	r7, sp, #0
 800baf0:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800baf2:	687b      	ldr	r3, [r7, #4]
 800baf4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800baf6:	60fb      	str	r3, [r7, #12]

  /* Set DAC error code to DMA error */
  hdac->ErrorCode |= HAL_DAC_ERROR_DMA;
 800baf8:	68fb      	ldr	r3, [r7, #12]
 800bafa:	691b      	ldr	r3, [r3, #16]
 800bafc:	f043 0204 	orr.w	r2, r3, #4
 800bb00:	68fb      	ldr	r3, [r7, #12]
 800bb02:	611a      	str	r2, [r3, #16]

#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ErrorCallbackCh2(hdac);
#else
  HAL_DACEx_ErrorCallbackCh2(hdac);
 800bb04:	68f8      	ldr	r0, [r7, #12]
 800bb06:	f7ff ffc7 	bl	800ba98 <HAL_DACEx_ErrorCallbackCh2>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

  hdac->State = HAL_DAC_STATE_READY;
 800bb0a:	68fb      	ldr	r3, [r7, #12]
 800bb0c:	2201      	movs	r2, #1
 800bb0e:	711a      	strb	r2, [r3, #4]
}
 800bb10:	bf00      	nop
 800bb12:	3710      	adds	r7, #16
 800bb14:	46bd      	mov	sp, r7
 800bb16:	bd80      	pop	{r7, pc}

0800bb18 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 800bb18:	b580      	push	{r7, lr}
 800bb1a:	b084      	sub	sp, #16
 800bb1c:	af00      	add	r7, sp, #0
 800bb1e:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if (hdma == NULL)
 800bb20:	687b      	ldr	r3, [r7, #4]
 800bb22:	2b00      	cmp	r3, #0
 800bb24:	d101      	bne.n	800bb2a <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 800bb26:	2301      	movs	r3, #1
 800bb28:	e08d      	b.n	800bc46 <HAL_DMA_Init+0x12e>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 800bb2a:	687b      	ldr	r3, [r7, #4]
 800bb2c:	681b      	ldr	r3, [r3, #0]
 800bb2e:	461a      	mov	r2, r3
 800bb30:	4b47      	ldr	r3, [pc, #284]	; (800bc50 <HAL_DMA_Init+0x138>)
 800bb32:	429a      	cmp	r2, r3
 800bb34:	d80f      	bhi.n	800bb56 <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 800bb36:	687b      	ldr	r3, [r7, #4]
 800bb38:	681b      	ldr	r3, [r3, #0]
 800bb3a:	461a      	mov	r2, r3
 800bb3c:	4b45      	ldr	r3, [pc, #276]	; (800bc54 <HAL_DMA_Init+0x13c>)
 800bb3e:	4413      	add	r3, r2
 800bb40:	4a45      	ldr	r2, [pc, #276]	; (800bc58 <HAL_DMA_Init+0x140>)
 800bb42:	fba2 2303 	umull	r2, r3, r2, r3
 800bb46:	091b      	lsrs	r3, r3, #4
 800bb48:	009a      	lsls	r2, r3, #2
 800bb4a:	687b      	ldr	r3, [r7, #4]
 800bb4c:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA1;
 800bb4e:	687b      	ldr	r3, [r7, #4]
 800bb50:	4a42      	ldr	r2, [pc, #264]	; (800bc5c <HAL_DMA_Init+0x144>)
 800bb52:	641a      	str	r2, [r3, #64]	; 0x40
 800bb54:	e00e      	b.n	800bb74 <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
 800bb56:	687b      	ldr	r3, [r7, #4]
 800bb58:	681b      	ldr	r3, [r3, #0]
 800bb5a:	461a      	mov	r2, r3
 800bb5c:	4b40      	ldr	r3, [pc, #256]	; (800bc60 <HAL_DMA_Init+0x148>)
 800bb5e:	4413      	add	r3, r2
 800bb60:	4a3d      	ldr	r2, [pc, #244]	; (800bc58 <HAL_DMA_Init+0x140>)
 800bb62:	fba2 2303 	umull	r2, r3, r2, r3
 800bb66:	091b      	lsrs	r3, r3, #4
 800bb68:	009a      	lsls	r2, r3, #2
 800bb6a:	687b      	ldr	r3, [r7, #4]
 800bb6c:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA2;
 800bb6e:	687b      	ldr	r3, [r7, #4]
 800bb70:	4a3c      	ldr	r2, [pc, #240]	; (800bc64 <HAL_DMA_Init+0x14c>)
 800bb72:	641a      	str	r2, [r3, #64]	; 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 800bb74:	687b      	ldr	r3, [r7, #4]
 800bb76:	2202      	movs	r2, #2
 800bb78:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 800bb7c:	687b      	ldr	r3, [r7, #4]
 800bb7e:	681b      	ldr	r3, [r3, #0]
 800bb80:	681b      	ldr	r3, [r3, #0]
 800bb82:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 800bb84:	68fb      	ldr	r3, [r7, #12]
 800bb86:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 800bb8a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800bb8e:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 800bb90:	687b      	ldr	r3, [r7, #4]
 800bb92:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800bb94:	687b      	ldr	r3, [r7, #4]
 800bb96:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 800bb98:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800bb9a:	687b      	ldr	r3, [r7, #4]
 800bb9c:	691b      	ldr	r3, [r3, #16]
 800bb9e:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800bba0:	687b      	ldr	r3, [r7, #4]
 800bba2:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800bba4:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800bba6:	687b      	ldr	r3, [r7, #4]
 800bba8:	699b      	ldr	r3, [r3, #24]
 800bbaa:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800bbac:	687b      	ldr	r3, [r7, #4]
 800bbae:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800bbb0:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800bbb2:	687b      	ldr	r3, [r7, #4]
 800bbb4:	6a1b      	ldr	r3, [r3, #32]
 800bbb6:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 800bbb8:	68fa      	ldr	r2, [r7, #12]
 800bbba:	4313      	orrs	r3, r2
 800bbbc:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 800bbbe:	687b      	ldr	r3, [r7, #4]
 800bbc0:	681b      	ldr	r3, [r3, #0]
 800bbc2:	68fa      	ldr	r2, [r7, #12]
 800bbc4:	601a      	str	r2, [r3, #0]

  /* Initialize parameters for DMAMUX channel :
     DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
  */
  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 800bbc6:	6878      	ldr	r0, [r7, #4]
 800bbc8:	f000 fa76 	bl	800c0b8 <DMA_CalcDMAMUXChannelBaseAndMask>

  if (hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 800bbcc:	687b      	ldr	r3, [r7, #4]
 800bbce:	689b      	ldr	r3, [r3, #8]
 800bbd0:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800bbd4:	d102      	bne.n	800bbdc <HAL_DMA_Init+0xc4>
  {
    /* if memory to memory force the request to 0*/
    hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 800bbd6:	687b      	ldr	r3, [r7, #4]
 800bbd8:	2200      	movs	r2, #0
 800bbda:	605a      	str	r2, [r3, #4]
  }

  /* Set peripheral request  to DMAMUX channel */
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 800bbdc:	687b      	ldr	r3, [r7, #4]
 800bbde:	685a      	ldr	r2, [r3, #4]
 800bbe0:	687b      	ldr	r3, [r7, #4]
 800bbe2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800bbe4:	b2d2      	uxtb	r2, r2
 800bbe6:	601a      	str	r2, [r3, #0]

  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800bbe8:	687b      	ldr	r3, [r7, #4]
 800bbea:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800bbec:	687a      	ldr	r2, [r7, #4]
 800bbee:	6d12      	ldr	r2, [r2, #80]	; 0x50
 800bbf0:	605a      	str	r2, [r3, #4]

  if (((hdma->Init.Request >  0U) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 800bbf2:	687b      	ldr	r3, [r7, #4]
 800bbf4:	685b      	ldr	r3, [r3, #4]
 800bbf6:	2b00      	cmp	r3, #0
 800bbf8:	d010      	beq.n	800bc1c <HAL_DMA_Init+0x104>
 800bbfa:	687b      	ldr	r3, [r7, #4]
 800bbfc:	685b      	ldr	r3, [r3, #4]
 800bbfe:	2b04      	cmp	r3, #4
 800bc00:	d80c      	bhi.n	800bc1c <HAL_DMA_Init+0x104>
  {
    /* Initialize parameters for DMAMUX request generator :
       DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask
    */
    DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 800bc02:	6878      	ldr	r0, [r7, #4]
 800bc04:	f000 fa96 	bl	800c134 <DMA_CalcDMAMUXRequestGenBaseAndMask>

    /* Reset the DMAMUX request generator register*/
    hdma->DMAmuxRequestGen->RGCR = 0U;
 800bc08:	687b      	ldr	r3, [r7, #4]
 800bc0a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800bc0c:	2200      	movs	r2, #0
 800bc0e:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800bc10:	687b      	ldr	r3, [r7, #4]
 800bc12:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800bc14:	687a      	ldr	r2, [r7, #4]
 800bc16:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 800bc18:	605a      	str	r2, [r3, #4]
 800bc1a:	e008      	b.n	800bc2e <HAL_DMA_Init+0x116>
  }
  else
  {
    hdma->DMAmuxRequestGen = 0U;
 800bc1c:	687b      	ldr	r3, [r7, #4]
 800bc1e:	2200      	movs	r2, #0
 800bc20:	655a      	str	r2, [r3, #84]	; 0x54
    hdma->DMAmuxRequestGenStatus = 0U;
 800bc22:	687b      	ldr	r3, [r7, #4]
 800bc24:	2200      	movs	r2, #0
 800bc26:	659a      	str	r2, [r3, #88]	; 0x58
    hdma->DMAmuxRequestGenStatusMask = 0U;
 800bc28:	687b      	ldr	r3, [r7, #4]
 800bc2a:	2200      	movs	r2, #0
 800bc2c:	65da      	str	r2, [r3, #92]	; 0x5c
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800bc2e:	687b      	ldr	r3, [r7, #4]
 800bc30:	2200      	movs	r2, #0
 800bc32:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA state*/
  hdma->State  = HAL_DMA_STATE_READY;
 800bc34:	687b      	ldr	r3, [r7, #4]
 800bc36:	2201      	movs	r2, #1
 800bc38:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 800bc3c:	687b      	ldr	r3, [r7, #4]
 800bc3e:	2200      	movs	r2, #0
 800bc40:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  return HAL_OK;
 800bc44:	2300      	movs	r3, #0
}
 800bc46:	4618      	mov	r0, r3
 800bc48:	3710      	adds	r7, #16
 800bc4a:	46bd      	mov	sp, r7
 800bc4c:	bd80      	pop	{r7, pc}
 800bc4e:	bf00      	nop
 800bc50:	40020407 	.word	0x40020407
 800bc54:	bffdfff8 	.word	0xbffdfff8
 800bc58:	cccccccd 	.word	0xcccccccd
 800bc5c:	40020000 	.word	0x40020000
 800bc60:	bffdfbf8 	.word	0xbffdfbf8
 800bc64:	40020400 	.word	0x40020400

0800bc68 <HAL_DMA_Start_IT>:
  * @param  DataLength The length of data to be transferred from source to destination (up to 256Kbytes-1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress,
                                   uint32_t DataLength)
{
 800bc68:	b580      	push	{r7, lr}
 800bc6a:	b086      	sub	sp, #24
 800bc6c:	af00      	add	r7, sp, #0
 800bc6e:	60f8      	str	r0, [r7, #12]
 800bc70:	60b9      	str	r1, [r7, #8]
 800bc72:	607a      	str	r2, [r7, #4]
 800bc74:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800bc76:	2300      	movs	r3, #0
 800bc78:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 800bc7a:	68fb      	ldr	r3, [r7, #12]
 800bc7c:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800bc80:	2b01      	cmp	r3, #1
 800bc82:	d101      	bne.n	800bc88 <HAL_DMA_Start_IT+0x20>
 800bc84:	2302      	movs	r3, #2
 800bc86:	e066      	b.n	800bd56 <HAL_DMA_Start_IT+0xee>
 800bc88:	68fb      	ldr	r3, [r7, #12]
 800bc8a:	2201      	movs	r2, #1
 800bc8c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  if (HAL_DMA_STATE_READY == hdma->State)
 800bc90:	68fb      	ldr	r3, [r7, #12]
 800bc92:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 800bc96:	b2db      	uxtb	r3, r3
 800bc98:	2b01      	cmp	r3, #1
 800bc9a:	d155      	bne.n	800bd48 <HAL_DMA_Start_IT+0xe0>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 800bc9c:	68fb      	ldr	r3, [r7, #12]
 800bc9e:	2202      	movs	r2, #2
 800bca0:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800bca4:	68fb      	ldr	r3, [r7, #12]
 800bca6:	2200      	movs	r2, #0
 800bca8:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 800bcaa:	68fb      	ldr	r3, [r7, #12]
 800bcac:	681b      	ldr	r3, [r3, #0]
 800bcae:	681a      	ldr	r2, [r3, #0]
 800bcb0:	68fb      	ldr	r3, [r7, #12]
 800bcb2:	681b      	ldr	r3, [r3, #0]
 800bcb4:	f022 0201 	bic.w	r2, r2, #1
 800bcb8:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 800bcba:	683b      	ldr	r3, [r7, #0]
 800bcbc:	687a      	ldr	r2, [r7, #4]
 800bcbe:	68b9      	ldr	r1, [r7, #8]
 800bcc0:	68f8      	ldr	r0, [r7, #12]
 800bcc2:	f000 f9bb 	bl	800c03c <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if (NULL != hdma->XferHalfCpltCallback)
 800bcc6:	68fb      	ldr	r3, [r7, #12]
 800bcc8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800bcca:	2b00      	cmp	r3, #0
 800bccc:	d008      	beq.n	800bce0 <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800bcce:	68fb      	ldr	r3, [r7, #12]
 800bcd0:	681b      	ldr	r3, [r3, #0]
 800bcd2:	681a      	ldr	r2, [r3, #0]
 800bcd4:	68fb      	ldr	r3, [r7, #12]
 800bcd6:	681b      	ldr	r3, [r3, #0]
 800bcd8:	f042 020e 	orr.w	r2, r2, #14
 800bcdc:	601a      	str	r2, [r3, #0]
 800bcde:	e00f      	b.n	800bd00 <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 800bce0:	68fb      	ldr	r3, [r7, #12]
 800bce2:	681b      	ldr	r3, [r3, #0]
 800bce4:	681a      	ldr	r2, [r3, #0]
 800bce6:	68fb      	ldr	r3, [r7, #12]
 800bce8:	681b      	ldr	r3, [r3, #0]
 800bcea:	f022 0204 	bic.w	r2, r2, #4
 800bcee:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 800bcf0:	68fb      	ldr	r3, [r7, #12]
 800bcf2:	681b      	ldr	r3, [r3, #0]
 800bcf4:	681a      	ldr	r2, [r3, #0]
 800bcf6:	68fb      	ldr	r3, [r7, #12]
 800bcf8:	681b      	ldr	r3, [r3, #0]
 800bcfa:	f042 020a 	orr.w	r2, r2, #10
 800bcfe:	601a      	str	r2, [r3, #0]
    }

    /* Check if DMAMUX Synchronization is enabled*/
    if ((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 800bd00:	68fb      	ldr	r3, [r7, #12]
 800bd02:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800bd04:	681b      	ldr	r3, [r3, #0]
 800bd06:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800bd0a:	2b00      	cmp	r3, #0
 800bd0c:	d007      	beq.n	800bd1e <HAL_DMA_Start_IT+0xb6>
    {
      /* Enable DMAMUX sync overrun IT*/
      hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 800bd0e:	68fb      	ldr	r3, [r7, #12]
 800bd10:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800bd12:	681a      	ldr	r2, [r3, #0]
 800bd14:	68fb      	ldr	r3, [r7, #12]
 800bd16:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800bd18:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800bd1c:	601a      	str	r2, [r3, #0]
    }

    if (hdma->DMAmuxRequestGen != 0U)
 800bd1e:	68fb      	ldr	r3, [r7, #12]
 800bd20:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800bd22:	2b00      	cmp	r3, #0
 800bd24:	d007      	beq.n	800bd36 <HAL_DMA_Start_IT+0xce>
    {
      /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
      /* enable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 800bd26:	68fb      	ldr	r3, [r7, #12]
 800bd28:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800bd2a:	681a      	ldr	r2, [r3, #0]
 800bd2c:	68fb      	ldr	r3, [r7, #12]
 800bd2e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800bd30:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800bd34:	601a      	str	r2, [r3, #0]
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 800bd36:	68fb      	ldr	r3, [r7, #12]
 800bd38:	681b      	ldr	r3, [r3, #0]
 800bd3a:	681a      	ldr	r2, [r3, #0]
 800bd3c:	68fb      	ldr	r3, [r7, #12]
 800bd3e:	681b      	ldr	r3, [r3, #0]
 800bd40:	f042 0201 	orr.w	r2, r2, #1
 800bd44:	601a      	str	r2, [r3, #0]
 800bd46:	e005      	b.n	800bd54 <HAL_DMA_Start_IT+0xec>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800bd48:	68fb      	ldr	r3, [r7, #12]
 800bd4a:	2200      	movs	r2, #0
 800bd4c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Remain BUSY */
    status = HAL_BUSY;
 800bd50:	2302      	movs	r3, #2
 800bd52:	75fb      	strb	r3, [r7, #23]
  }
  return status;
 800bd54:	7dfb      	ldrb	r3, [r7, #23]
}
 800bd56:	4618      	mov	r0, r3
 800bd58:	3718      	adds	r7, #24
 800bd5a:	46bd      	mov	sp, r7
 800bd5c:	bd80      	pop	{r7, pc}

0800bd5e <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 800bd5e:	b480      	push	{r7}
 800bd60:	b085      	sub	sp, #20
 800bd62:	af00      	add	r7, sp, #0
 800bd64:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800bd66:	2300      	movs	r3, #0
 800bd68:	73fb      	strb	r3, [r7, #15]

  if(hdma->State != HAL_DMA_STATE_BUSY)
 800bd6a:	687b      	ldr	r3, [r7, #4]
 800bd6c:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 800bd70:	b2db      	uxtb	r3, r3
 800bd72:	2b02      	cmp	r3, #2
 800bd74:	d005      	beq.n	800bd82 <HAL_DMA_Abort+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800bd76:	687b      	ldr	r3, [r7, #4]
 800bd78:	2204      	movs	r2, #4
 800bd7a:	63da      	str	r2, [r3, #60]	; 0x3c

    status = HAL_ERROR;
 800bd7c:	2301      	movs	r3, #1
 800bd7e:	73fb      	strb	r3, [r7, #15]
 800bd80:	e037      	b.n	800bdf2 <HAL_DMA_Abort+0x94>
  }
  else
  {
     /* Disable DMA IT */
     __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800bd82:	687b      	ldr	r3, [r7, #4]
 800bd84:	681b      	ldr	r3, [r3, #0]
 800bd86:	681a      	ldr	r2, [r3, #0]
 800bd88:	687b      	ldr	r3, [r7, #4]
 800bd8a:	681b      	ldr	r3, [r3, #0]
 800bd8c:	f022 020e 	bic.w	r2, r2, #14
 800bd90:	601a      	str	r2, [r3, #0]
     
     /* disable the DMAMUX sync overrun IT*/
     hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 800bd92:	687b      	ldr	r3, [r7, #4]
 800bd94:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800bd96:	681a      	ldr	r2, [r3, #0]
 800bd98:	687b      	ldr	r3, [r7, #4]
 800bd9a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800bd9c:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800bda0:	601a      	str	r2, [r3, #0]
     
     /* Disable the channel */
     __HAL_DMA_DISABLE(hdma);
 800bda2:	687b      	ldr	r3, [r7, #4]
 800bda4:	681b      	ldr	r3, [r3, #0]
 800bda6:	681a      	ldr	r2, [r3, #0]
 800bda8:	687b      	ldr	r3, [r7, #4]
 800bdaa:	681b      	ldr	r3, [r3, #0]
 800bdac:	f022 0201 	bic.w	r2, r2, #1
 800bdb0:	601a      	str	r2, [r3, #0]
     
     /* Clear all flags */
     hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 800bdb2:	687b      	ldr	r3, [r7, #4]
 800bdb4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800bdb6:	f003 021f 	and.w	r2, r3, #31
 800bdba:	687b      	ldr	r3, [r7, #4]
 800bdbc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800bdbe:	2101      	movs	r1, #1
 800bdc0:	fa01 f202 	lsl.w	r2, r1, r2
 800bdc4:	605a      	str	r2, [r3, #4]
     
     /* Clear the DMAMUX synchro overrun flag */
     hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800bdc6:	687b      	ldr	r3, [r7, #4]
 800bdc8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800bdca:	687a      	ldr	r2, [r7, #4]
 800bdcc:	6d12      	ldr	r2, [r2, #80]	; 0x50
 800bdce:	605a      	str	r2, [r3, #4]
     
     if (hdma->DMAmuxRequestGen != 0U)
 800bdd0:	687b      	ldr	r3, [r7, #4]
 800bdd2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800bdd4:	2b00      	cmp	r3, #0
 800bdd6:	d00c      	beq.n	800bdf2 <HAL_DMA_Abort+0x94>
     {
       /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
       /* disable the request gen overrun IT*/
       hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 800bdd8:	687b      	ldr	r3, [r7, #4]
 800bdda:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800bddc:	681a      	ldr	r2, [r3, #0]
 800bdde:	687b      	ldr	r3, [r7, #4]
 800bde0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800bde2:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800bde6:	601a      	str	r2, [r3, #0]
     
       /* Clear the DMAMUX request generator overrun flag */
       hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800bde8:	687b      	ldr	r3, [r7, #4]
 800bdea:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800bdec:	687a      	ldr	r2, [r7, #4]
 800bdee:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 800bdf0:	605a      	str	r2, [r3, #4]
     }
  }  
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 800bdf2:	687b      	ldr	r3, [r7, #4]
 800bdf4:	2201      	movs	r2, #1
 800bdf6:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);
 800bdfa:	687b      	ldr	r3, [r7, #4]
 800bdfc:	2200      	movs	r2, #0
 800bdfe:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  return status;
 800be02:	7bfb      	ldrb	r3, [r7, #15]
}
 800be04:	4618      	mov	r0, r3
 800be06:	3714      	adds	r7, #20
 800be08:	46bd      	mov	sp, r7
 800be0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800be0e:	4770      	bx	lr

0800be10 <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 800be10:	b580      	push	{r7, lr}
 800be12:	b084      	sub	sp, #16
 800be14:	af00      	add	r7, sp, #0
 800be16:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800be18:	2300      	movs	r3, #0
 800be1a:	73fb      	strb	r3, [r7, #15]

  if (HAL_DMA_STATE_BUSY != hdma->State)
 800be1c:	687b      	ldr	r3, [r7, #4]
 800be1e:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 800be22:	b2db      	uxtb	r3, r3
 800be24:	2b02      	cmp	r3, #2
 800be26:	d00d      	beq.n	800be44 <HAL_DMA_Abort_IT+0x34>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800be28:	687b      	ldr	r3, [r7, #4]
 800be2a:	2204      	movs	r2, #4
 800be2c:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800be2e:	687b      	ldr	r3, [r7, #4]
 800be30:	2201      	movs	r2, #1
 800be32:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800be36:	687b      	ldr	r3, [r7, #4]
 800be38:	2200      	movs	r2, #0
 800be3a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    status = HAL_ERROR;
 800be3e:	2301      	movs	r3, #1
 800be40:	73fb      	strb	r3, [r7, #15]
 800be42:	e047      	b.n	800bed4 <HAL_DMA_Abort_IT+0xc4>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800be44:	687b      	ldr	r3, [r7, #4]
 800be46:	681b      	ldr	r3, [r3, #0]
 800be48:	681a      	ldr	r2, [r3, #0]
 800be4a:	687b      	ldr	r3, [r7, #4]
 800be4c:	681b      	ldr	r3, [r3, #0]
 800be4e:	f022 020e 	bic.w	r2, r2, #14
 800be52:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 800be54:	687b      	ldr	r3, [r7, #4]
 800be56:	681b      	ldr	r3, [r3, #0]
 800be58:	681a      	ldr	r2, [r3, #0]
 800be5a:	687b      	ldr	r3, [r7, #4]
 800be5c:	681b      	ldr	r3, [r3, #0]
 800be5e:	f022 0201 	bic.w	r2, r2, #1
 800be62:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 800be64:	687b      	ldr	r3, [r7, #4]
 800be66:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800be68:	681a      	ldr	r2, [r3, #0]
 800be6a:	687b      	ldr	r3, [r7, #4]
 800be6c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800be6e:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800be72:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 800be74:	687b      	ldr	r3, [r7, #4]
 800be76:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800be78:	f003 021f 	and.w	r2, r3, #31
 800be7c:	687b      	ldr	r3, [r7, #4]
 800be7e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800be80:	2101      	movs	r1, #1
 800be82:	fa01 f202 	lsl.w	r2, r1, r2
 800be86:	605a      	str	r2, [r3, #4]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800be88:	687b      	ldr	r3, [r7, #4]
 800be8a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800be8c:	687a      	ldr	r2, [r7, #4]
 800be8e:	6d12      	ldr	r2, [r2, #80]	; 0x50
 800be90:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 800be92:	687b      	ldr	r3, [r7, #4]
 800be94:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800be96:	2b00      	cmp	r3, #0
 800be98:	d00c      	beq.n	800beb4 <HAL_DMA_Abort_IT+0xa4>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 800be9a:	687b      	ldr	r3, [r7, #4]
 800be9c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800be9e:	681a      	ldr	r2, [r3, #0]
 800bea0:	687b      	ldr	r3, [r7, #4]
 800bea2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800bea4:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800bea8:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800beaa:	687b      	ldr	r3, [r7, #4]
 800beac:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800beae:	687a      	ldr	r2, [r7, #4]
 800beb0:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 800beb2:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800beb4:	687b      	ldr	r3, [r7, #4]
 800beb6:	2201      	movs	r2, #1
 800beb8:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800bebc:	687b      	ldr	r3, [r7, #4]
 800bebe:	2200      	movs	r2, #0
 800bec0:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 800bec4:	687b      	ldr	r3, [r7, #4]
 800bec6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800bec8:	2b00      	cmp	r3, #0
 800beca:	d003      	beq.n	800bed4 <HAL_DMA_Abort_IT+0xc4>
    {
      hdma->XferAbortCallback(hdma);
 800becc:	687b      	ldr	r3, [r7, #4]
 800bece:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800bed0:	6878      	ldr	r0, [r7, #4]
 800bed2:	4798      	blx	r3
    }
  }
  return status;
 800bed4:	7bfb      	ldrb	r3, [r7, #15]
}
 800bed6:	4618      	mov	r0, r3
 800bed8:	3710      	adds	r7, #16
 800beda:	46bd      	mov	sp, r7
 800bedc:	bd80      	pop	{r7, pc}

0800bede <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 800bede:	b580      	push	{r7, lr}
 800bee0:	b084      	sub	sp, #16
 800bee2:	af00      	add	r7, sp, #0
 800bee4:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 800bee6:	687b      	ldr	r3, [r7, #4]
 800bee8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800beea:	681b      	ldr	r3, [r3, #0]
 800beec:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 800beee:	687b      	ldr	r3, [r7, #4]
 800bef0:	681b      	ldr	r3, [r3, #0]
 800bef2:	681b      	ldr	r3, [r3, #0]
 800bef4:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if ((0U != (flag_it & ((uint32_t)DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1FU)))) && (0U != (source_it & DMA_IT_HT)))
 800bef6:	687b      	ldr	r3, [r7, #4]
 800bef8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800befa:	f003 031f 	and.w	r3, r3, #31
 800befe:	2204      	movs	r2, #4
 800bf00:	409a      	lsls	r2, r3
 800bf02:	68fb      	ldr	r3, [r7, #12]
 800bf04:	4013      	ands	r3, r2
 800bf06:	2b00      	cmp	r3, #0
 800bf08:	d026      	beq.n	800bf58 <HAL_DMA_IRQHandler+0x7a>
 800bf0a:	68bb      	ldr	r3, [r7, #8]
 800bf0c:	f003 0304 	and.w	r3, r3, #4
 800bf10:	2b00      	cmp	r3, #0
 800bf12:	d021      	beq.n	800bf58 <HAL_DMA_IRQHandler+0x7a>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 800bf14:	687b      	ldr	r3, [r7, #4]
 800bf16:	681b      	ldr	r3, [r3, #0]
 800bf18:	681b      	ldr	r3, [r3, #0]
 800bf1a:	f003 0320 	and.w	r3, r3, #32
 800bf1e:	2b00      	cmp	r3, #0
 800bf20:	d107      	bne.n	800bf32 <HAL_DMA_IRQHandler+0x54>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 800bf22:	687b      	ldr	r3, [r7, #4]
 800bf24:	681b      	ldr	r3, [r3, #0]
 800bf26:	681a      	ldr	r2, [r3, #0]
 800bf28:	687b      	ldr	r3, [r7, #4]
 800bf2a:	681b      	ldr	r3, [r3, #0]
 800bf2c:	f022 0204 	bic.w	r2, r2, #4
 800bf30:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1FU));
 800bf32:	687b      	ldr	r3, [r7, #4]
 800bf34:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800bf36:	f003 021f 	and.w	r2, r3, #31
 800bf3a:	687b      	ldr	r3, [r7, #4]
 800bf3c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800bf3e:	2104      	movs	r1, #4
 800bf40:	fa01 f202 	lsl.w	r2, r1, r2
 800bf44:	605a      	str	r2, [r3, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if (hdma->XferHalfCpltCallback != NULL)
 800bf46:	687b      	ldr	r3, [r7, #4]
 800bf48:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800bf4a:	2b00      	cmp	r3, #0
 800bf4c:	d071      	beq.n	800c032 <HAL_DMA_IRQHandler+0x154>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 800bf4e:	687b      	ldr	r3, [r7, #4]
 800bf50:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800bf52:	6878      	ldr	r0, [r7, #4]
 800bf54:	4798      	blx	r3
    if (hdma->XferHalfCpltCallback != NULL)
 800bf56:	e06c      	b.n	800c032 <HAL_DMA_IRQHandler+0x154>
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  else if ((0U != (flag_it & ((uint32_t)DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1FU))))
 800bf58:	687b      	ldr	r3, [r7, #4]
 800bf5a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800bf5c:	f003 031f 	and.w	r3, r3, #31
 800bf60:	2202      	movs	r2, #2
 800bf62:	409a      	lsls	r2, r3
 800bf64:	68fb      	ldr	r3, [r7, #12]
 800bf66:	4013      	ands	r3, r2
 800bf68:	2b00      	cmp	r3, #0
 800bf6a:	d02e      	beq.n	800bfca <HAL_DMA_IRQHandler+0xec>
           && (0U != (source_it & DMA_IT_TC)))
 800bf6c:	68bb      	ldr	r3, [r7, #8]
 800bf6e:	f003 0302 	and.w	r3, r3, #2
 800bf72:	2b00      	cmp	r3, #0
 800bf74:	d029      	beq.n	800bfca <HAL_DMA_IRQHandler+0xec>
  {
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 800bf76:	687b      	ldr	r3, [r7, #4]
 800bf78:	681b      	ldr	r3, [r3, #0]
 800bf7a:	681b      	ldr	r3, [r3, #0]
 800bf7c:	f003 0320 	and.w	r3, r3, #32
 800bf80:	2b00      	cmp	r3, #0
 800bf82:	d10b      	bne.n	800bf9c <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 800bf84:	687b      	ldr	r3, [r7, #4]
 800bf86:	681b      	ldr	r3, [r3, #0]
 800bf88:	681a      	ldr	r2, [r3, #0]
 800bf8a:	687b      	ldr	r3, [r7, #4]
 800bf8c:	681b      	ldr	r3, [r3, #0]
 800bf8e:	f022 020a 	bic.w	r2, r2, #10
 800bf92:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 800bf94:	687b      	ldr	r3, [r7, #4]
 800bf96:	2201      	movs	r2, #1
 800bf98:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1FU));
 800bf9c:	687b      	ldr	r3, [r7, #4]
 800bf9e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800bfa0:	f003 021f 	and.w	r2, r3, #31
 800bfa4:	687b      	ldr	r3, [r7, #4]
 800bfa6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800bfa8:	2102      	movs	r1, #2
 800bfaa:	fa01 f202 	lsl.w	r2, r1, r2
 800bfae:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800bfb0:	687b      	ldr	r3, [r7, #4]
 800bfb2:	2200      	movs	r2, #0
 800bfb4:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferCpltCallback != NULL)
 800bfb8:	687b      	ldr	r3, [r7, #4]
 800bfba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bfbc:	2b00      	cmp	r3, #0
 800bfbe:	d038      	beq.n	800c032 <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 800bfc0:	687b      	ldr	r3, [r7, #4]
 800bfc2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bfc4:	6878      	ldr	r0, [r7, #4]
 800bfc6:	4798      	blx	r3
    if (hdma->XferCpltCallback != NULL)
 800bfc8:	e033      	b.n	800c032 <HAL_DMA_IRQHandler+0x154>
    }
  }
  /* Transfer Error Interrupt management **************************************/
  else if ((0U != (flag_it & ((uint32_t)DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1FU))))
 800bfca:	687b      	ldr	r3, [r7, #4]
 800bfcc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800bfce:	f003 031f 	and.w	r3, r3, #31
 800bfd2:	2208      	movs	r2, #8
 800bfd4:	409a      	lsls	r2, r3
 800bfd6:	68fb      	ldr	r3, [r7, #12]
 800bfd8:	4013      	ands	r3, r2
 800bfda:	2b00      	cmp	r3, #0
 800bfdc:	d02a      	beq.n	800c034 <HAL_DMA_IRQHandler+0x156>
           && (0U != (source_it & DMA_IT_TE)))
 800bfde:	68bb      	ldr	r3, [r7, #8]
 800bfe0:	f003 0308 	and.w	r3, r3, #8
 800bfe4:	2b00      	cmp	r3, #0
 800bfe6:	d025      	beq.n	800c034 <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800bfe8:	687b      	ldr	r3, [r7, #4]
 800bfea:	681b      	ldr	r3, [r3, #0]
 800bfec:	681a      	ldr	r2, [r3, #0]
 800bfee:	687b      	ldr	r3, [r7, #4]
 800bff0:	681b      	ldr	r3, [r3, #0]
 800bff2:	f022 020e 	bic.w	r2, r2, #14
 800bff6:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 800bff8:	687b      	ldr	r3, [r7, #4]
 800bffa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800bffc:	f003 021f 	and.w	r2, r3, #31
 800c000:	687b      	ldr	r3, [r7, #4]
 800c002:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c004:	2101      	movs	r1, #1
 800c006:	fa01 f202 	lsl.w	r2, r1, r2
 800c00a:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 800c00c:	687b      	ldr	r3, [r7, #4]
 800c00e:	2201      	movs	r2, #1
 800c010:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800c012:	687b      	ldr	r3, [r7, #4]
 800c014:	2201      	movs	r2, #1
 800c016:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800c01a:	687b      	ldr	r3, [r7, #4]
 800c01c:	2200      	movs	r2, #0
 800c01e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferErrorCallback != NULL)
 800c022:	687b      	ldr	r3, [r7, #4]
 800c024:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800c026:	2b00      	cmp	r3, #0
 800c028:	d004      	beq.n	800c034 <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 800c02a:	687b      	ldr	r3, [r7, #4]
 800c02c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800c02e:	6878      	ldr	r0, [r7, #4]
 800c030:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 800c032:	bf00      	nop
 800c034:	bf00      	nop
}
 800c036:	3710      	adds	r7, #16
 800c038:	46bd      	mov	sp, r7
 800c03a:	bd80      	pop	{r7, pc}

0800c03c <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800c03c:	b480      	push	{r7}
 800c03e:	b085      	sub	sp, #20
 800c040:	af00      	add	r7, sp, #0
 800c042:	60f8      	str	r0, [r7, #12]
 800c044:	60b9      	str	r1, [r7, #8]
 800c046:	607a      	str	r2, [r7, #4]
 800c048:	603b      	str	r3, [r7, #0]
  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800c04a:	68fb      	ldr	r3, [r7, #12]
 800c04c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800c04e:	68fa      	ldr	r2, [r7, #12]
 800c050:	6d12      	ldr	r2, [r2, #80]	; 0x50
 800c052:	605a      	str	r2, [r3, #4]

  if (hdma->DMAmuxRequestGen != 0U)
 800c054:	68fb      	ldr	r3, [r7, #12]
 800c056:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800c058:	2b00      	cmp	r3, #0
 800c05a:	d004      	beq.n	800c066 <DMA_SetConfig+0x2a>
  {
    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800c05c:	68fb      	ldr	r3, [r7, #12]
 800c05e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800c060:	68fa      	ldr	r2, [r7, #12]
 800c062:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 800c064:	605a      	str	r2, [r3, #4]
  }

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 800c066:	68fb      	ldr	r3, [r7, #12]
 800c068:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800c06a:	f003 021f 	and.w	r2, r3, #31
 800c06e:	68fb      	ldr	r3, [r7, #12]
 800c070:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c072:	2101      	movs	r1, #1
 800c074:	fa01 f202 	lsl.w	r2, r1, r2
 800c078:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 800c07a:	68fb      	ldr	r3, [r7, #12]
 800c07c:	681b      	ldr	r3, [r3, #0]
 800c07e:	683a      	ldr	r2, [r7, #0]
 800c080:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if ((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800c082:	68fb      	ldr	r3, [r7, #12]
 800c084:	689b      	ldr	r3, [r3, #8]
 800c086:	2b10      	cmp	r3, #16
 800c088:	d108      	bne.n	800c09c <DMA_SetConfig+0x60>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 800c08a:	68fb      	ldr	r3, [r7, #12]
 800c08c:	681b      	ldr	r3, [r3, #0]
 800c08e:	687a      	ldr	r2, [r7, #4]
 800c090:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 800c092:	68fb      	ldr	r3, [r7, #12]
 800c094:	681b      	ldr	r3, [r3, #0]
 800c096:	68ba      	ldr	r2, [r7, #8]
 800c098:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 800c09a:	e007      	b.n	800c0ac <DMA_SetConfig+0x70>
    hdma->Instance->CPAR = SrcAddress;
 800c09c:	68fb      	ldr	r3, [r7, #12]
 800c09e:	681b      	ldr	r3, [r3, #0]
 800c0a0:	68ba      	ldr	r2, [r7, #8]
 800c0a2:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 800c0a4:	68fb      	ldr	r3, [r7, #12]
 800c0a6:	681b      	ldr	r3, [r3, #0]
 800c0a8:	687a      	ldr	r2, [r7, #4]
 800c0aa:	60da      	str	r2, [r3, #12]
}
 800c0ac:	bf00      	nop
 800c0ae:	3714      	adds	r7, #20
 800c0b0:	46bd      	mov	sp, r7
 800c0b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c0b6:	4770      	bx	lr

0800c0b8 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma        pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval None
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 800c0b8:	b480      	push	{r7}
 800c0ba:	b087      	sub	sp, #28
 800c0bc:	af00      	add	r7, sp, #0
 800c0be:	6078      	str	r0, [r7, #4]
  uint32_t dmamux_base_addr;
  uint32_t channel_number;
  DMAMUX_Channel_TypeDef *DMAMUX1_ChannelBase;

  /* check if instance is not outside the DMA channel range */
  if ((uint32_t)hdma->Instance < (uint32_t)DMA2_Channel1)
 800c0c0:	687b      	ldr	r3, [r7, #4]
 800c0c2:	681b      	ldr	r3, [r3, #0]
 800c0c4:	461a      	mov	r2, r3
 800c0c6:	4b16      	ldr	r3, [pc, #88]	; (800c120 <DMA_CalcDMAMUXChannelBaseAndMask+0x68>)
 800c0c8:	429a      	cmp	r2, r3
 800c0ca:	d802      	bhi.n	800c0d2 <DMA_CalcDMAMUXChannelBaseAndMask+0x1a>
  {
    /* DMA1 */
    DMAMUX1_ChannelBase = DMAMUX1_Channel0;
 800c0cc:	4b15      	ldr	r3, [pc, #84]	; (800c124 <DMA_CalcDMAMUXChannelBaseAndMask+0x6c>)
 800c0ce:	617b      	str	r3, [r7, #20]
 800c0d0:	e001      	b.n	800c0d6 <DMA_CalcDMAMUXChannelBaseAndMask+0x1e>
  }
  else
  {
    /* DMA2 */
#if defined (STM32G471xx) || defined (STM32G473xx) || defined (STM32G474xx) || defined (STM32G483xx) || defined (STM32G484xx)
    DMAMUX1_ChannelBase = DMAMUX1_Channel8;
 800c0d2:	4b15      	ldr	r3, [pc, #84]	; (800c128 <DMA_CalcDMAMUXChannelBaseAndMask+0x70>)
 800c0d4:	617b      	str	r3, [r7, #20]
    DMAMUX1_ChannelBase = DMAMUX1_Channel6;
#else
    DMAMUX1_ChannelBase = DMAMUX1_Channel7;
#endif /* STM32G4x1xx) */
  }
  dmamux_base_addr = (uint32_t)DMAMUX1_ChannelBase;
 800c0d6:	697b      	ldr	r3, [r7, #20]
 800c0d8:	613b      	str	r3, [r7, #16]
  channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 800c0da:	687b      	ldr	r3, [r7, #4]
 800c0dc:	681b      	ldr	r3, [r3, #0]
 800c0de:	b2db      	uxtb	r3, r3
 800c0e0:	3b08      	subs	r3, #8
 800c0e2:	4a12      	ldr	r2, [pc, #72]	; (800c12c <DMA_CalcDMAMUXChannelBaseAndMask+0x74>)
 800c0e4:	fba2 2303 	umull	r2, r3, r2, r3
 800c0e8:	091b      	lsrs	r3, r3, #4
 800c0ea:	60fb      	str	r3, [r7, #12]
  hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)(uint32_t)(dmamux_base_addr + ((hdma->ChannelIndex >> 2U) * ((uint32_t)DMAMUX1_Channel1 - (uint32_t)DMAMUX1_Channel0)));
 800c0ec:	687b      	ldr	r3, [r7, #4]
 800c0ee:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800c0f0:	089b      	lsrs	r3, r3, #2
 800c0f2:	009a      	lsls	r2, r3, #2
 800c0f4:	693b      	ldr	r3, [r7, #16]
 800c0f6:	4413      	add	r3, r2
 800c0f8:	461a      	mov	r2, r3
 800c0fa:	687b      	ldr	r3, [r7, #4]
 800c0fc:	649a      	str	r2, [r3, #72]	; 0x48
  hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 800c0fe:	687b      	ldr	r3, [r7, #4]
 800c100:	4a0b      	ldr	r2, [pc, #44]	; (800c130 <DMA_CalcDMAMUXChannelBaseAndMask+0x78>)
 800c102:	64da      	str	r2, [r3, #76]	; 0x4c
  hdma->DMAmuxChannelStatusMask = 1UL << (channel_number & 0x1FU);
 800c104:	68fb      	ldr	r3, [r7, #12]
 800c106:	f003 031f 	and.w	r3, r3, #31
 800c10a:	2201      	movs	r2, #1
 800c10c:	409a      	lsls	r2, r3
 800c10e:	687b      	ldr	r3, [r7, #4]
 800c110:	651a      	str	r2, [r3, #80]	; 0x50
}
 800c112:	bf00      	nop
 800c114:	371c      	adds	r7, #28
 800c116:	46bd      	mov	sp, r7
 800c118:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c11c:	4770      	bx	lr
 800c11e:	bf00      	nop
 800c120:	40020407 	.word	0x40020407
 800c124:	40020800 	.word	0x40020800
 800c128:	40020820 	.word	0x40020820
 800c12c:	cccccccd 	.word	0xcccccccd
 800c130:	40020880 	.word	0x40020880

0800c134 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  *                     the configuration information for the specified DMA Channel.
  * @retval None
  */

static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 800c134:	b480      	push	{r7}
 800c136:	b085      	sub	sp, #20
 800c138:	af00      	add	r7, sp, #0
 800c13a:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 800c13c:	687b      	ldr	r3, [r7, #4]
 800c13e:	685b      	ldr	r3, [r3, #4]
 800c140:	b2db      	uxtb	r3, r3
 800c142:	60fb      	str	r3, [r7, #12]

  /* DMA Channels are connected to DMAMUX1 request generator blocks*/
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 800c144:	68fa      	ldr	r2, [r7, #12]
 800c146:	4b0b      	ldr	r3, [pc, #44]	; (800c174 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x40>)
 800c148:	4413      	add	r3, r2
 800c14a:	009b      	lsls	r3, r3, #2
 800c14c:	461a      	mov	r2, r3
 800c14e:	687b      	ldr	r3, [r7, #4]
 800c150:	655a      	str	r2, [r3, #84]	; 0x54

  hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 800c152:	687b      	ldr	r3, [r7, #4]
 800c154:	4a08      	ldr	r2, [pc, #32]	; (800c178 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x44>)
 800c156:	659a      	str	r2, [r3, #88]	; 0x58

  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x1FU);
 800c158:	68fb      	ldr	r3, [r7, #12]
 800c15a:	3b01      	subs	r3, #1
 800c15c:	f003 031f 	and.w	r3, r3, #31
 800c160:	2201      	movs	r2, #1
 800c162:	409a      	lsls	r2, r3
 800c164:	687b      	ldr	r3, [r7, #4]
 800c166:	65da      	str	r2, [r3, #92]	; 0x5c
}
 800c168:	bf00      	nop
 800c16a:	3714      	adds	r7, #20
 800c16c:	46bd      	mov	sp, r7
 800c16e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c172:	4770      	bx	lr
 800c174:	1000823f 	.word	0x1000823f
 800c178:	40020940 	.word	0x40020940

0800c17c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800c17c:	b480      	push	{r7}
 800c17e:	b087      	sub	sp, #28
 800c180:	af00      	add	r7, sp, #0
 800c182:	6078      	str	r0, [r7, #4]
 800c184:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 800c186:	2300      	movs	r3, #0
 800c188:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 800c18a:	e15a      	b.n	800c442 <HAL_GPIO_Init+0x2c6>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 800c18c:	683b      	ldr	r3, [r7, #0]
 800c18e:	681a      	ldr	r2, [r3, #0]
 800c190:	2101      	movs	r1, #1
 800c192:	697b      	ldr	r3, [r7, #20]
 800c194:	fa01 f303 	lsl.w	r3, r1, r3
 800c198:	4013      	ands	r3, r2
 800c19a:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 800c19c:	68fb      	ldr	r3, [r7, #12]
 800c19e:	2b00      	cmp	r3, #0
 800c1a0:	f000 814c 	beq.w	800c43c <HAL_GPIO_Init+0x2c0>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800c1a4:	683b      	ldr	r3, [r7, #0]
 800c1a6:	685b      	ldr	r3, [r3, #4]
 800c1a8:	2b01      	cmp	r3, #1
 800c1aa:	d00b      	beq.n	800c1c4 <HAL_GPIO_Init+0x48>
 800c1ac:	683b      	ldr	r3, [r7, #0]
 800c1ae:	685b      	ldr	r3, [r3, #4]
 800c1b0:	2b02      	cmp	r3, #2
 800c1b2:	d007      	beq.n	800c1c4 <HAL_GPIO_Init+0x48>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800c1b4:	683b      	ldr	r3, [r7, #0]
 800c1b6:	685b      	ldr	r3, [r3, #4]
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800c1b8:	2b11      	cmp	r3, #17
 800c1ba:	d003      	beq.n	800c1c4 <HAL_GPIO_Init+0x48>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800c1bc:	683b      	ldr	r3, [r7, #0]
 800c1be:	685b      	ldr	r3, [r3, #4]
 800c1c0:	2b12      	cmp	r3, #18
 800c1c2:	d130      	bne.n	800c226 <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 800c1c4:	687b      	ldr	r3, [r7, #4]
 800c1c6:	689b      	ldr	r3, [r3, #8]
 800c1c8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 800c1ca:	697b      	ldr	r3, [r7, #20]
 800c1cc:	005b      	lsls	r3, r3, #1
 800c1ce:	2203      	movs	r2, #3
 800c1d0:	fa02 f303 	lsl.w	r3, r2, r3
 800c1d4:	43db      	mvns	r3, r3
 800c1d6:	693a      	ldr	r2, [r7, #16]
 800c1d8:	4013      	ands	r3, r2
 800c1da:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800c1dc:	683b      	ldr	r3, [r7, #0]
 800c1de:	68da      	ldr	r2, [r3, #12]
 800c1e0:	697b      	ldr	r3, [r7, #20]
 800c1e2:	005b      	lsls	r3, r3, #1
 800c1e4:	fa02 f303 	lsl.w	r3, r2, r3
 800c1e8:	693a      	ldr	r2, [r7, #16]
 800c1ea:	4313      	orrs	r3, r2
 800c1ec:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800c1ee:	687b      	ldr	r3, [r7, #4]
 800c1f0:	693a      	ldr	r2, [r7, #16]
 800c1f2:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800c1f4:	687b      	ldr	r3, [r7, #4]
 800c1f6:	685b      	ldr	r3, [r3, #4]
 800c1f8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800c1fa:	2201      	movs	r2, #1
 800c1fc:	697b      	ldr	r3, [r7, #20]
 800c1fe:	fa02 f303 	lsl.w	r3, r2, r3
 800c202:	43db      	mvns	r3, r3
 800c204:	693a      	ldr	r2, [r7, #16]
 800c206:	4013      	ands	r3, r2
 800c208:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 800c20a:	683b      	ldr	r3, [r7, #0]
 800c20c:	685b      	ldr	r3, [r3, #4]
 800c20e:	091b      	lsrs	r3, r3, #4
 800c210:	f003 0201 	and.w	r2, r3, #1
 800c214:	697b      	ldr	r3, [r7, #20]
 800c216:	fa02 f303 	lsl.w	r3, r2, r3
 800c21a:	693a      	ldr	r2, [r7, #16]
 800c21c:	4313      	orrs	r3, r2
 800c21e:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 800c220:	687b      	ldr	r3, [r7, #4]
 800c222:	693a      	ldr	r2, [r7, #16]
 800c224:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 800c226:	687b      	ldr	r3, [r7, #4]
 800c228:	68db      	ldr	r3, [r3, #12]
 800c22a:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 800c22c:	697b      	ldr	r3, [r7, #20]
 800c22e:	005b      	lsls	r3, r3, #1
 800c230:	2203      	movs	r2, #3
 800c232:	fa02 f303 	lsl.w	r3, r2, r3
 800c236:	43db      	mvns	r3, r3
 800c238:	693a      	ldr	r2, [r7, #16]
 800c23a:	4013      	ands	r3, r2
 800c23c:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 800c23e:	683b      	ldr	r3, [r7, #0]
 800c240:	689a      	ldr	r2, [r3, #8]
 800c242:	697b      	ldr	r3, [r7, #20]
 800c244:	005b      	lsls	r3, r3, #1
 800c246:	fa02 f303 	lsl.w	r3, r2, r3
 800c24a:	693a      	ldr	r2, [r7, #16]
 800c24c:	4313      	orrs	r3, r2
 800c24e:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 800c250:	687b      	ldr	r3, [r7, #4]
 800c252:	693a      	ldr	r2, [r7, #16]
 800c254:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800c256:	683b      	ldr	r3, [r7, #0]
 800c258:	685b      	ldr	r3, [r3, #4]
 800c25a:	2b02      	cmp	r3, #2
 800c25c:	d003      	beq.n	800c266 <HAL_GPIO_Init+0xea>
 800c25e:	683b      	ldr	r3, [r7, #0]
 800c260:	685b      	ldr	r3, [r3, #4]
 800c262:	2b12      	cmp	r3, #18
 800c264:	d123      	bne.n	800c2ae <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800c266:	697b      	ldr	r3, [r7, #20]
 800c268:	08da      	lsrs	r2, r3, #3
 800c26a:	687b      	ldr	r3, [r7, #4]
 800c26c:	3208      	adds	r2, #8
 800c26e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c272:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 800c274:	697b      	ldr	r3, [r7, #20]
 800c276:	f003 0307 	and.w	r3, r3, #7
 800c27a:	009b      	lsls	r3, r3, #2
 800c27c:	220f      	movs	r2, #15
 800c27e:	fa02 f303 	lsl.w	r3, r2, r3
 800c282:	43db      	mvns	r3, r3
 800c284:	693a      	ldr	r2, [r7, #16]
 800c286:	4013      	ands	r3, r2
 800c288:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 800c28a:	683b      	ldr	r3, [r7, #0]
 800c28c:	691a      	ldr	r2, [r3, #16]
 800c28e:	697b      	ldr	r3, [r7, #20]
 800c290:	f003 0307 	and.w	r3, r3, #7
 800c294:	009b      	lsls	r3, r3, #2
 800c296:	fa02 f303 	lsl.w	r3, r2, r3
 800c29a:	693a      	ldr	r2, [r7, #16]
 800c29c:	4313      	orrs	r3, r2
 800c29e:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 800c2a0:	697b      	ldr	r3, [r7, #20]
 800c2a2:	08da      	lsrs	r2, r3, #3
 800c2a4:	687b      	ldr	r3, [r7, #4]
 800c2a6:	3208      	adds	r2, #8
 800c2a8:	6939      	ldr	r1, [r7, #16]
 800c2aa:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800c2ae:	687b      	ldr	r3, [r7, #4]
 800c2b0:	681b      	ldr	r3, [r3, #0]
 800c2b2:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 800c2b4:	697b      	ldr	r3, [r7, #20]
 800c2b6:	005b      	lsls	r3, r3, #1
 800c2b8:	2203      	movs	r2, #3
 800c2ba:	fa02 f303 	lsl.w	r3, r2, r3
 800c2be:	43db      	mvns	r3, r3
 800c2c0:	693a      	ldr	r2, [r7, #16]
 800c2c2:	4013      	ands	r3, r2
 800c2c4:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800c2c6:	683b      	ldr	r3, [r7, #0]
 800c2c8:	685b      	ldr	r3, [r3, #4]
 800c2ca:	f003 0203 	and.w	r2, r3, #3
 800c2ce:	697b      	ldr	r3, [r7, #20]
 800c2d0:	005b      	lsls	r3, r3, #1
 800c2d2:	fa02 f303 	lsl.w	r3, r2, r3
 800c2d6:	693a      	ldr	r2, [r7, #16]
 800c2d8:	4313      	orrs	r3, r2
 800c2da:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 800c2dc:	687b      	ldr	r3, [r7, #4]
 800c2de:	693a      	ldr	r2, [r7, #16]
 800c2e0:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800c2e2:	683b      	ldr	r3, [r7, #0]
 800c2e4:	685b      	ldr	r3, [r3, #4]
 800c2e6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800c2ea:	2b00      	cmp	r3, #0
 800c2ec:	f000 80a6 	beq.w	800c43c <HAL_GPIO_Init+0x2c0>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800c2f0:	4b5b      	ldr	r3, [pc, #364]	; (800c460 <HAL_GPIO_Init+0x2e4>)
 800c2f2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800c2f4:	4a5a      	ldr	r2, [pc, #360]	; (800c460 <HAL_GPIO_Init+0x2e4>)
 800c2f6:	f043 0301 	orr.w	r3, r3, #1
 800c2fa:	6613      	str	r3, [r2, #96]	; 0x60
 800c2fc:	4b58      	ldr	r3, [pc, #352]	; (800c460 <HAL_GPIO_Init+0x2e4>)
 800c2fe:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800c300:	f003 0301 	and.w	r3, r3, #1
 800c304:	60bb      	str	r3, [r7, #8]
 800c306:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2U];
 800c308:	4a56      	ldr	r2, [pc, #344]	; (800c464 <HAL_GPIO_Init+0x2e8>)
 800c30a:	697b      	ldr	r3, [r7, #20]
 800c30c:	089b      	lsrs	r3, r3, #2
 800c30e:	3302      	adds	r3, #2
 800c310:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800c314:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 800c316:	697b      	ldr	r3, [r7, #20]
 800c318:	f003 0303 	and.w	r3, r3, #3
 800c31c:	009b      	lsls	r3, r3, #2
 800c31e:	220f      	movs	r2, #15
 800c320:	fa02 f303 	lsl.w	r3, r2, r3
 800c324:	43db      	mvns	r3, r3
 800c326:	693a      	ldr	r2, [r7, #16]
 800c328:	4013      	ands	r3, r2
 800c32a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 800c32c:	687b      	ldr	r3, [r7, #4]
 800c32e:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 800c332:	d01f      	beq.n	800c374 <HAL_GPIO_Init+0x1f8>
 800c334:	687b      	ldr	r3, [r7, #4]
 800c336:	4a4c      	ldr	r2, [pc, #304]	; (800c468 <HAL_GPIO_Init+0x2ec>)
 800c338:	4293      	cmp	r3, r2
 800c33a:	d019      	beq.n	800c370 <HAL_GPIO_Init+0x1f4>
 800c33c:	687b      	ldr	r3, [r7, #4]
 800c33e:	4a4b      	ldr	r2, [pc, #300]	; (800c46c <HAL_GPIO_Init+0x2f0>)
 800c340:	4293      	cmp	r3, r2
 800c342:	d013      	beq.n	800c36c <HAL_GPIO_Init+0x1f0>
 800c344:	687b      	ldr	r3, [r7, #4]
 800c346:	4a4a      	ldr	r2, [pc, #296]	; (800c470 <HAL_GPIO_Init+0x2f4>)
 800c348:	4293      	cmp	r3, r2
 800c34a:	d00d      	beq.n	800c368 <HAL_GPIO_Init+0x1ec>
 800c34c:	687b      	ldr	r3, [r7, #4]
 800c34e:	4a49      	ldr	r2, [pc, #292]	; (800c474 <HAL_GPIO_Init+0x2f8>)
 800c350:	4293      	cmp	r3, r2
 800c352:	d007      	beq.n	800c364 <HAL_GPIO_Init+0x1e8>
 800c354:	687b      	ldr	r3, [r7, #4]
 800c356:	4a48      	ldr	r2, [pc, #288]	; (800c478 <HAL_GPIO_Init+0x2fc>)
 800c358:	4293      	cmp	r3, r2
 800c35a:	d101      	bne.n	800c360 <HAL_GPIO_Init+0x1e4>
 800c35c:	2305      	movs	r3, #5
 800c35e:	e00a      	b.n	800c376 <HAL_GPIO_Init+0x1fa>
 800c360:	2306      	movs	r3, #6
 800c362:	e008      	b.n	800c376 <HAL_GPIO_Init+0x1fa>
 800c364:	2304      	movs	r3, #4
 800c366:	e006      	b.n	800c376 <HAL_GPIO_Init+0x1fa>
 800c368:	2303      	movs	r3, #3
 800c36a:	e004      	b.n	800c376 <HAL_GPIO_Init+0x1fa>
 800c36c:	2302      	movs	r3, #2
 800c36e:	e002      	b.n	800c376 <HAL_GPIO_Init+0x1fa>
 800c370:	2301      	movs	r3, #1
 800c372:	e000      	b.n	800c376 <HAL_GPIO_Init+0x1fa>
 800c374:	2300      	movs	r3, #0
 800c376:	697a      	ldr	r2, [r7, #20]
 800c378:	f002 0203 	and.w	r2, r2, #3
 800c37c:	0092      	lsls	r2, r2, #2
 800c37e:	4093      	lsls	r3, r2
 800c380:	693a      	ldr	r2, [r7, #16]
 800c382:	4313      	orrs	r3, r2
 800c384:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800c386:	4937      	ldr	r1, [pc, #220]	; (800c464 <HAL_GPIO_Init+0x2e8>)
 800c388:	697b      	ldr	r3, [r7, #20]
 800c38a:	089b      	lsrs	r3, r3, #2
 800c38c:	3302      	adds	r3, #2
 800c38e:	693a      	ldr	r2, [r7, #16]
 800c390:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 800c394:	4b39      	ldr	r3, [pc, #228]	; (800c47c <HAL_GPIO_Init+0x300>)
 800c396:	681b      	ldr	r3, [r3, #0]
 800c398:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800c39a:	68fb      	ldr	r3, [r7, #12]
 800c39c:	43db      	mvns	r3, r3
 800c39e:	693a      	ldr	r2, [r7, #16]
 800c3a0:	4013      	ands	r3, r2
 800c3a2:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800c3a4:	683b      	ldr	r3, [r7, #0]
 800c3a6:	685b      	ldr	r3, [r3, #4]
 800c3a8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800c3ac:	2b00      	cmp	r3, #0
 800c3ae:	d003      	beq.n	800c3b8 <HAL_GPIO_Init+0x23c>
        {
          temp |= iocurrent;
 800c3b0:	693a      	ldr	r2, [r7, #16]
 800c3b2:	68fb      	ldr	r3, [r7, #12]
 800c3b4:	4313      	orrs	r3, r2
 800c3b6:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 800c3b8:	4a30      	ldr	r2, [pc, #192]	; (800c47c <HAL_GPIO_Init+0x300>)
 800c3ba:	693b      	ldr	r3, [r7, #16]
 800c3bc:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR1;
 800c3be:	4b2f      	ldr	r3, [pc, #188]	; (800c47c <HAL_GPIO_Init+0x300>)
 800c3c0:	685b      	ldr	r3, [r3, #4]
 800c3c2:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800c3c4:	68fb      	ldr	r3, [r7, #12]
 800c3c6:	43db      	mvns	r3, r3
 800c3c8:	693a      	ldr	r2, [r7, #16]
 800c3ca:	4013      	ands	r3, r2
 800c3cc:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 800c3ce:	683b      	ldr	r3, [r7, #0]
 800c3d0:	685b      	ldr	r3, [r3, #4]
 800c3d2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800c3d6:	2b00      	cmp	r3, #0
 800c3d8:	d003      	beq.n	800c3e2 <HAL_GPIO_Init+0x266>
        {
          temp |= iocurrent;
 800c3da:	693a      	ldr	r2, [r7, #16]
 800c3dc:	68fb      	ldr	r3, [r7, #12]
 800c3de:	4313      	orrs	r3, r2
 800c3e0:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 800c3e2:	4a26      	ldr	r2, [pc, #152]	; (800c47c <HAL_GPIO_Init+0x300>)
 800c3e4:	693b      	ldr	r3, [r7, #16]
 800c3e6:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 800c3e8:	4b24      	ldr	r3, [pc, #144]	; (800c47c <HAL_GPIO_Init+0x300>)
 800c3ea:	689b      	ldr	r3, [r3, #8]
 800c3ec:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800c3ee:	68fb      	ldr	r3, [r7, #12]
 800c3f0:	43db      	mvns	r3, r3
 800c3f2:	693a      	ldr	r2, [r7, #16]
 800c3f4:	4013      	ands	r3, r2
 800c3f6:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800c3f8:	683b      	ldr	r3, [r7, #0]
 800c3fa:	685b      	ldr	r3, [r3, #4]
 800c3fc:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800c400:	2b00      	cmp	r3, #0
 800c402:	d003      	beq.n	800c40c <HAL_GPIO_Init+0x290>
        {
          temp |= iocurrent;
 800c404:	693a      	ldr	r2, [r7, #16]
 800c406:	68fb      	ldr	r3, [r7, #12]
 800c408:	4313      	orrs	r3, r2
 800c40a:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 800c40c:	4a1b      	ldr	r2, [pc, #108]	; (800c47c <HAL_GPIO_Init+0x300>)
 800c40e:	693b      	ldr	r3, [r7, #16]
 800c410:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 800c412:	4b1a      	ldr	r3, [pc, #104]	; (800c47c <HAL_GPIO_Init+0x300>)
 800c414:	68db      	ldr	r3, [r3, #12]
 800c416:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800c418:	68fb      	ldr	r3, [r7, #12]
 800c41a:	43db      	mvns	r3, r3
 800c41c:	693a      	ldr	r2, [r7, #16]
 800c41e:	4013      	ands	r3, r2
 800c420:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 800c422:	683b      	ldr	r3, [r7, #0]
 800c424:	685b      	ldr	r3, [r3, #4]
 800c426:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800c42a:	2b00      	cmp	r3, #0
 800c42c:	d003      	beq.n	800c436 <HAL_GPIO_Init+0x2ba>
        {
          temp |= iocurrent;
 800c42e:	693a      	ldr	r2, [r7, #16]
 800c430:	68fb      	ldr	r3, [r7, #12]
 800c432:	4313      	orrs	r3, r2
 800c434:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 800c436:	4a11      	ldr	r2, [pc, #68]	; (800c47c <HAL_GPIO_Init+0x300>)
 800c438:	693b      	ldr	r3, [r7, #16]
 800c43a:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 800c43c:	697b      	ldr	r3, [r7, #20]
 800c43e:	3301      	adds	r3, #1
 800c440:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0U)
 800c442:	683b      	ldr	r3, [r7, #0]
 800c444:	681a      	ldr	r2, [r3, #0]
 800c446:	697b      	ldr	r3, [r7, #20]
 800c448:	fa22 f303 	lsr.w	r3, r2, r3
 800c44c:	2b00      	cmp	r3, #0
 800c44e:	f47f ae9d 	bne.w	800c18c <HAL_GPIO_Init+0x10>
  }
}
 800c452:	bf00      	nop
 800c454:	371c      	adds	r7, #28
 800c456:	46bd      	mov	sp, r7
 800c458:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c45c:	4770      	bx	lr
 800c45e:	bf00      	nop
 800c460:	40021000 	.word	0x40021000
 800c464:	40010000 	.word	0x40010000
 800c468:	48000400 	.word	0x48000400
 800c46c:	48000800 	.word	0x48000800
 800c470:	48000c00 	.word	0x48000c00
 800c474:	48001000 	.word	0x48001000
 800c478:	48001400 	.word	0x48001400
 800c47c:	40010400 	.word	0x40010400

0800c480 <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin specifies the port bit to be written.
  *         This parameter can be any combination of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 800c480:	b480      	push	{r7}
 800c482:	b087      	sub	sp, #28
 800c484:	af00      	add	r7, sp, #0
 800c486:	6078      	str	r0, [r7, #4]
 800c488:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 800c48a:	2300      	movs	r3, #0
 800c48c:	617b      	str	r3, [r7, #20]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* Configure the port pins */
  while ((GPIO_Pin >> position) != 0U)
 800c48e:	e0bd      	b.n	800c60c <HAL_GPIO_DeInit+0x18c>
  {
    /* Get current io position */
    iocurrent = (GPIO_Pin) & (1UL << position);
 800c490:	2201      	movs	r2, #1
 800c492:	697b      	ldr	r3, [r7, #20]
 800c494:	fa02 f303 	lsl.w	r3, r2, r3
 800c498:	683a      	ldr	r2, [r7, #0]
 800c49a:	4013      	ands	r3, r2
 800c49c:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00u)
 800c49e:	693b      	ldr	r3, [r7, #16]
 800c4a0:	2b00      	cmp	r3, #0
 800c4a2:	f000 80b0 	beq.w	800c606 <HAL_GPIO_DeInit+0x186>
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      /* Clear the External Interrupt or Event for the current IO */

      tmp = SYSCFG->EXTICR[position >> 2U];
 800c4a6:	4a60      	ldr	r2, [pc, #384]	; (800c628 <HAL_GPIO_DeInit+0x1a8>)
 800c4a8:	697b      	ldr	r3, [r7, #20]
 800c4aa:	089b      	lsrs	r3, r3, #2
 800c4ac:	3302      	adds	r3, #2
 800c4ae:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800c4b2:	60fb      	str	r3, [r7, #12]
      tmp &= (0x0FUL << (4U * (position & 0x03U)));
 800c4b4:	697b      	ldr	r3, [r7, #20]
 800c4b6:	f003 0303 	and.w	r3, r3, #3
 800c4ba:	009b      	lsls	r3, r3, #2
 800c4bc:	220f      	movs	r2, #15
 800c4be:	fa02 f303 	lsl.w	r3, r2, r3
 800c4c2:	68fa      	ldr	r2, [r7, #12]
 800c4c4:	4013      	ands	r3, r2
 800c4c6:	60fb      	str	r3, [r7, #12]
      if (tmp == (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U))))
 800c4c8:	687b      	ldr	r3, [r7, #4]
 800c4ca:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 800c4ce:	d01f      	beq.n	800c510 <HAL_GPIO_DeInit+0x90>
 800c4d0:	687b      	ldr	r3, [r7, #4]
 800c4d2:	4a56      	ldr	r2, [pc, #344]	; (800c62c <HAL_GPIO_DeInit+0x1ac>)
 800c4d4:	4293      	cmp	r3, r2
 800c4d6:	d019      	beq.n	800c50c <HAL_GPIO_DeInit+0x8c>
 800c4d8:	687b      	ldr	r3, [r7, #4]
 800c4da:	4a55      	ldr	r2, [pc, #340]	; (800c630 <HAL_GPIO_DeInit+0x1b0>)
 800c4dc:	4293      	cmp	r3, r2
 800c4de:	d013      	beq.n	800c508 <HAL_GPIO_DeInit+0x88>
 800c4e0:	687b      	ldr	r3, [r7, #4]
 800c4e2:	4a54      	ldr	r2, [pc, #336]	; (800c634 <HAL_GPIO_DeInit+0x1b4>)
 800c4e4:	4293      	cmp	r3, r2
 800c4e6:	d00d      	beq.n	800c504 <HAL_GPIO_DeInit+0x84>
 800c4e8:	687b      	ldr	r3, [r7, #4]
 800c4ea:	4a53      	ldr	r2, [pc, #332]	; (800c638 <HAL_GPIO_DeInit+0x1b8>)
 800c4ec:	4293      	cmp	r3, r2
 800c4ee:	d007      	beq.n	800c500 <HAL_GPIO_DeInit+0x80>
 800c4f0:	687b      	ldr	r3, [r7, #4]
 800c4f2:	4a52      	ldr	r2, [pc, #328]	; (800c63c <HAL_GPIO_DeInit+0x1bc>)
 800c4f4:	4293      	cmp	r3, r2
 800c4f6:	d101      	bne.n	800c4fc <HAL_GPIO_DeInit+0x7c>
 800c4f8:	2305      	movs	r3, #5
 800c4fa:	e00a      	b.n	800c512 <HAL_GPIO_DeInit+0x92>
 800c4fc:	2306      	movs	r3, #6
 800c4fe:	e008      	b.n	800c512 <HAL_GPIO_DeInit+0x92>
 800c500:	2304      	movs	r3, #4
 800c502:	e006      	b.n	800c512 <HAL_GPIO_DeInit+0x92>
 800c504:	2303      	movs	r3, #3
 800c506:	e004      	b.n	800c512 <HAL_GPIO_DeInit+0x92>
 800c508:	2302      	movs	r3, #2
 800c50a:	e002      	b.n	800c512 <HAL_GPIO_DeInit+0x92>
 800c50c:	2301      	movs	r3, #1
 800c50e:	e000      	b.n	800c512 <HAL_GPIO_DeInit+0x92>
 800c510:	2300      	movs	r3, #0
 800c512:	697a      	ldr	r2, [r7, #20]
 800c514:	f002 0203 	and.w	r2, r2, #3
 800c518:	0092      	lsls	r2, r2, #2
 800c51a:	4093      	lsls	r3, r2
 800c51c:	68fa      	ldr	r2, [r7, #12]
 800c51e:	429a      	cmp	r2, r3
 800c520:	d132      	bne.n	800c588 <HAL_GPIO_DeInit+0x108>
      {
        /* Clear EXTI line configuration */
        EXTI->IMR1 &= ~(iocurrent);
 800c522:	4b47      	ldr	r3, [pc, #284]	; (800c640 <HAL_GPIO_DeInit+0x1c0>)
 800c524:	681a      	ldr	r2, [r3, #0]
 800c526:	693b      	ldr	r3, [r7, #16]
 800c528:	43db      	mvns	r3, r3
 800c52a:	4945      	ldr	r1, [pc, #276]	; (800c640 <HAL_GPIO_DeInit+0x1c0>)
 800c52c:	4013      	ands	r3, r2
 800c52e:	600b      	str	r3, [r1, #0]
        EXTI->EMR1 &= ~(iocurrent);
 800c530:	4b43      	ldr	r3, [pc, #268]	; (800c640 <HAL_GPIO_DeInit+0x1c0>)
 800c532:	685a      	ldr	r2, [r3, #4]
 800c534:	693b      	ldr	r3, [r7, #16]
 800c536:	43db      	mvns	r3, r3
 800c538:	4941      	ldr	r1, [pc, #260]	; (800c640 <HAL_GPIO_DeInit+0x1c0>)
 800c53a:	4013      	ands	r3, r2
 800c53c:	604b      	str	r3, [r1, #4]

        /* Clear Rising Falling edge configuration */
        EXTI->RTSR1 &= ~(iocurrent);
 800c53e:	4b40      	ldr	r3, [pc, #256]	; (800c640 <HAL_GPIO_DeInit+0x1c0>)
 800c540:	689a      	ldr	r2, [r3, #8]
 800c542:	693b      	ldr	r3, [r7, #16]
 800c544:	43db      	mvns	r3, r3
 800c546:	493e      	ldr	r1, [pc, #248]	; (800c640 <HAL_GPIO_DeInit+0x1c0>)
 800c548:	4013      	ands	r3, r2
 800c54a:	608b      	str	r3, [r1, #8]
        EXTI->FTSR1 &= ~(iocurrent);
 800c54c:	4b3c      	ldr	r3, [pc, #240]	; (800c640 <HAL_GPIO_DeInit+0x1c0>)
 800c54e:	68da      	ldr	r2, [r3, #12]
 800c550:	693b      	ldr	r3, [r7, #16]
 800c552:	43db      	mvns	r3, r3
 800c554:	493a      	ldr	r1, [pc, #232]	; (800c640 <HAL_GPIO_DeInit+0x1c0>)
 800c556:	4013      	ands	r3, r2
 800c558:	60cb      	str	r3, [r1, #12]

        tmp = 0x0FUL << (4U * (position & 0x03U));
 800c55a:	697b      	ldr	r3, [r7, #20]
 800c55c:	f003 0303 	and.w	r3, r3, #3
 800c560:	009b      	lsls	r3, r3, #2
 800c562:	220f      	movs	r2, #15
 800c564:	fa02 f303 	lsl.w	r3, r2, r3
 800c568:	60fb      	str	r3, [r7, #12]
        SYSCFG->EXTICR[position >> 2U] &= ~tmp;
 800c56a:	4a2f      	ldr	r2, [pc, #188]	; (800c628 <HAL_GPIO_DeInit+0x1a8>)
 800c56c:	697b      	ldr	r3, [r7, #20]
 800c56e:	089b      	lsrs	r3, r3, #2
 800c570:	3302      	adds	r3, #2
 800c572:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 800c576:	68fb      	ldr	r3, [r7, #12]
 800c578:	43da      	mvns	r2, r3
 800c57a:	482b      	ldr	r0, [pc, #172]	; (800c628 <HAL_GPIO_DeInit+0x1a8>)
 800c57c:	697b      	ldr	r3, [r7, #20]
 800c57e:	089b      	lsrs	r3, r3, #2
 800c580:	400a      	ands	r2, r1
 800c582:	3302      	adds	r3, #2
 800c584:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
      }

      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO in Analog Mode */
      GPIOx->MODER |= (GPIO_MODER_MODE0 << (position * 2u));
 800c588:	687b      	ldr	r3, [r7, #4]
 800c58a:	681a      	ldr	r2, [r3, #0]
 800c58c:	697b      	ldr	r3, [r7, #20]
 800c58e:	005b      	lsls	r3, r3, #1
 800c590:	2103      	movs	r1, #3
 800c592:	fa01 f303 	lsl.w	r3, r1, r3
 800c596:	431a      	orrs	r2, r3
 800c598:	687b      	ldr	r3, [r7, #4]
 800c59a:	601a      	str	r2, [r3, #0]

      /* Configure the default Alternate Function in current IO */
      GPIOx->AFR[position >> 3u] &= ~(0xFu << ((position & 0x07u) * 4u));
 800c59c:	697b      	ldr	r3, [r7, #20]
 800c59e:	08da      	lsrs	r2, r3, #3
 800c5a0:	687b      	ldr	r3, [r7, #4]
 800c5a2:	3208      	adds	r2, #8
 800c5a4:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800c5a8:	697b      	ldr	r3, [r7, #20]
 800c5aa:	f003 0307 	and.w	r3, r3, #7
 800c5ae:	009b      	lsls	r3, r3, #2
 800c5b0:	220f      	movs	r2, #15
 800c5b2:	fa02 f303 	lsl.w	r3, r2, r3
 800c5b6:	43db      	mvns	r3, r3
 800c5b8:	697a      	ldr	r2, [r7, #20]
 800c5ba:	08d2      	lsrs	r2, r2, #3
 800c5bc:	4019      	ands	r1, r3
 800c5be:	687b      	ldr	r3, [r7, #4]
 800c5c0:	3208      	adds	r2, #8
 800c5c2:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

      /* Deactivate the Pull-up and Pull-down resistor for the current IO */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 800c5c6:	687b      	ldr	r3, [r7, #4]
 800c5c8:	68da      	ldr	r2, [r3, #12]
 800c5ca:	697b      	ldr	r3, [r7, #20]
 800c5cc:	005b      	lsls	r3, r3, #1
 800c5ce:	2103      	movs	r1, #3
 800c5d0:	fa01 f303 	lsl.w	r3, r1, r3
 800c5d4:	43db      	mvns	r3, r3
 800c5d6:	401a      	ands	r2, r3
 800c5d8:	687b      	ldr	r3, [r7, #4]
 800c5da:	60da      	str	r2, [r3, #12]

      /* Configure the default value IO Output Type */
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT0 << position);
 800c5dc:	687b      	ldr	r3, [r7, #4]
 800c5de:	685a      	ldr	r2, [r3, #4]
 800c5e0:	2101      	movs	r1, #1
 800c5e2:	697b      	ldr	r3, [r7, #20]
 800c5e4:	fa01 f303 	lsl.w	r3, r1, r3
 800c5e8:	43db      	mvns	r3, r3
 800c5ea:	401a      	ands	r2, r3
 800c5ec:	687b      	ldr	r3, [r7, #4]
 800c5ee:	605a      	str	r2, [r3, #4]

      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 800c5f0:	687b      	ldr	r3, [r7, #4]
 800c5f2:	689a      	ldr	r2, [r3, #8]
 800c5f4:	697b      	ldr	r3, [r7, #20]
 800c5f6:	005b      	lsls	r3, r3, #1
 800c5f8:	2103      	movs	r1, #3
 800c5fa:	fa01 f303 	lsl.w	r3, r1, r3
 800c5fe:	43db      	mvns	r3, r3
 800c600:	401a      	ands	r2, r3
 800c602:	687b      	ldr	r3, [r7, #4]
 800c604:	609a      	str	r2, [r3, #8]
    }

    position++;
 800c606:	697b      	ldr	r3, [r7, #20]
 800c608:	3301      	adds	r3, #1
 800c60a:	617b      	str	r3, [r7, #20]
  while ((GPIO_Pin >> position) != 0U)
 800c60c:	683a      	ldr	r2, [r7, #0]
 800c60e:	697b      	ldr	r3, [r7, #20]
 800c610:	fa22 f303 	lsr.w	r3, r2, r3
 800c614:	2b00      	cmp	r3, #0
 800c616:	f47f af3b 	bne.w	800c490 <HAL_GPIO_DeInit+0x10>
  }
}
 800c61a:	bf00      	nop
 800c61c:	371c      	adds	r7, #28
 800c61e:	46bd      	mov	sp, r7
 800c620:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c624:	4770      	bx	lr
 800c626:	bf00      	nop
 800c628:	40010000 	.word	0x40010000
 800c62c:	48000400 	.word	0x48000400
 800c630:	48000800 	.word	0x48000800
 800c634:	48000c00 	.word	0x48000c00
 800c638:	48001000 	.word	0x48001000
 800c63c:	48001400 	.word	0x48001400
 800c640:	40010400 	.word	0x40010400

0800c644 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800c644:	b480      	push	{r7}
 800c646:	b083      	sub	sp, #12
 800c648:	af00      	add	r7, sp, #0
 800c64a:	6078      	str	r0, [r7, #4]
 800c64c:	460b      	mov	r3, r1
 800c64e:	807b      	strh	r3, [r7, #2]
 800c650:	4613      	mov	r3, r2
 800c652:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 800c654:	787b      	ldrb	r3, [r7, #1]
 800c656:	2b00      	cmp	r3, #0
 800c658:	d003      	beq.n	800c662 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800c65a:	887a      	ldrh	r2, [r7, #2]
 800c65c:	687b      	ldr	r3, [r7, #4]
 800c65e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 800c660:	e002      	b.n	800c668 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 800c662:	887a      	ldrh	r2, [r7, #2]
 800c664:	687b      	ldr	r3, [r7, #4]
 800c666:	629a      	str	r2, [r3, #40]	; 0x28
}
 800c668:	bf00      	nop
 800c66a:	370c      	adds	r7, #12
 800c66c:	46bd      	mov	sp, r7
 800c66e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c672:	4770      	bx	lr

0800c674 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 800c674:	b480      	push	{r7}
 800c676:	b085      	sub	sp, #20
 800c678:	af00      	add	r7, sp, #0
 800c67a:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 800c67c:	687b      	ldr	r3, [r7, #4]
 800c67e:	2b00      	cmp	r3, #0
 800c680:	d141      	bne.n	800c706 <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 800c682:	4b4b      	ldr	r3, [pc, #300]	; (800c7b0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800c684:	681b      	ldr	r3, [r3, #0]
 800c686:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800c68a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800c68e:	d131      	bne.n	800c6f4 <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 800c690:	4b47      	ldr	r3, [pc, #284]	; (800c7b0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800c692:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800c696:	4a46      	ldr	r2, [pc, #280]	; (800c7b0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800c698:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800c69c:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 800c6a0:	4b43      	ldr	r3, [pc, #268]	; (800c7b0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800c6a2:	681b      	ldr	r3, [r3, #0]
 800c6a4:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 800c6a8:	4a41      	ldr	r2, [pc, #260]	; (800c7b0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800c6aa:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800c6ae:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 800c6b0:	4b40      	ldr	r3, [pc, #256]	; (800c7b4 <HAL_PWREx_ControlVoltageScaling+0x140>)
 800c6b2:	681b      	ldr	r3, [r3, #0]
 800c6b4:	2232      	movs	r2, #50	; 0x32
 800c6b6:	fb02 f303 	mul.w	r3, r2, r3
 800c6ba:	4a3f      	ldr	r2, [pc, #252]	; (800c7b8 <HAL_PWREx_ControlVoltageScaling+0x144>)
 800c6bc:	fba2 2303 	umull	r2, r3, r2, r3
 800c6c0:	0c9b      	lsrs	r3, r3, #18
 800c6c2:	3301      	adds	r3, #1
 800c6c4:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800c6c6:	e002      	b.n	800c6ce <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 800c6c8:	68fb      	ldr	r3, [r7, #12]
 800c6ca:	3b01      	subs	r3, #1
 800c6cc:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800c6ce:	4b38      	ldr	r3, [pc, #224]	; (800c7b0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800c6d0:	695b      	ldr	r3, [r3, #20]
 800c6d2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800c6d6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800c6da:	d102      	bne.n	800c6e2 <HAL_PWREx_ControlVoltageScaling+0x6e>
 800c6dc:	68fb      	ldr	r3, [r7, #12]
 800c6de:	2b00      	cmp	r3, #0
 800c6e0:	d1f2      	bne.n	800c6c8 <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 800c6e2:	4b33      	ldr	r3, [pc, #204]	; (800c7b0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800c6e4:	695b      	ldr	r3, [r3, #20]
 800c6e6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800c6ea:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800c6ee:	d158      	bne.n	800c7a2 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 800c6f0:	2303      	movs	r3, #3
 800c6f2:	e057      	b.n	800c7a4 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 800c6f4:	4b2e      	ldr	r3, [pc, #184]	; (800c7b0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800c6f6:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800c6fa:	4a2d      	ldr	r2, [pc, #180]	; (800c7b0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800c6fc:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800c700:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 800c704:	e04d      	b.n	800c7a2 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 800c706:	687b      	ldr	r3, [r7, #4]
 800c708:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800c70c:	d141      	bne.n	800c792 <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 800c70e:	4b28      	ldr	r3, [pc, #160]	; (800c7b0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800c710:	681b      	ldr	r3, [r3, #0]
 800c712:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800c716:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800c71a:	d131      	bne.n	800c780 <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 800c71c:	4b24      	ldr	r3, [pc, #144]	; (800c7b0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800c71e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800c722:	4a23      	ldr	r2, [pc, #140]	; (800c7b0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800c724:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800c728:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 800c72c:	4b20      	ldr	r3, [pc, #128]	; (800c7b0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800c72e:	681b      	ldr	r3, [r3, #0]
 800c730:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 800c734:	4a1e      	ldr	r2, [pc, #120]	; (800c7b0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800c736:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800c73a:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 800c73c:	4b1d      	ldr	r3, [pc, #116]	; (800c7b4 <HAL_PWREx_ControlVoltageScaling+0x140>)
 800c73e:	681b      	ldr	r3, [r3, #0]
 800c740:	2232      	movs	r2, #50	; 0x32
 800c742:	fb02 f303 	mul.w	r3, r2, r3
 800c746:	4a1c      	ldr	r2, [pc, #112]	; (800c7b8 <HAL_PWREx_ControlVoltageScaling+0x144>)
 800c748:	fba2 2303 	umull	r2, r3, r2, r3
 800c74c:	0c9b      	lsrs	r3, r3, #18
 800c74e:	3301      	adds	r3, #1
 800c750:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800c752:	e002      	b.n	800c75a <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 800c754:	68fb      	ldr	r3, [r7, #12]
 800c756:	3b01      	subs	r3, #1
 800c758:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800c75a:	4b15      	ldr	r3, [pc, #84]	; (800c7b0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800c75c:	695b      	ldr	r3, [r3, #20]
 800c75e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800c762:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800c766:	d102      	bne.n	800c76e <HAL_PWREx_ControlVoltageScaling+0xfa>
 800c768:	68fb      	ldr	r3, [r7, #12]
 800c76a:	2b00      	cmp	r3, #0
 800c76c:	d1f2      	bne.n	800c754 <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 800c76e:	4b10      	ldr	r3, [pc, #64]	; (800c7b0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800c770:	695b      	ldr	r3, [r3, #20]
 800c772:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800c776:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800c77a:	d112      	bne.n	800c7a2 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 800c77c:	2303      	movs	r3, #3
 800c77e:	e011      	b.n	800c7a4 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 800c780:	4b0b      	ldr	r3, [pc, #44]	; (800c7b0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800c782:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800c786:	4a0a      	ldr	r2, [pc, #40]	; (800c7b0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800c788:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800c78c:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 800c790:	e007      	b.n	800c7a2 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 800c792:	4b07      	ldr	r3, [pc, #28]	; (800c7b0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800c794:	681b      	ldr	r3, [r3, #0]
 800c796:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 800c79a:	4a05      	ldr	r2, [pc, #20]	; (800c7b0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800c79c:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800c7a0:	6013      	str	r3, [r2, #0]
    /* No need to wait for VOSF to be cleared for this transition */
    /* PWR_CR5_R1MODE bit setting has no effect in Range 2        */
  }

  return HAL_OK;
 800c7a2:	2300      	movs	r3, #0
}
 800c7a4:	4618      	mov	r0, r3
 800c7a6:	3714      	adds	r7, #20
 800c7a8:	46bd      	mov	sp, r7
 800c7aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c7ae:	4770      	bx	lr
 800c7b0:	40007000 	.word	0x40007000
 800c7b4:	20000eb0 	.word	0x20000eb0
 800c7b8:	431bde83 	.word	0x431bde83

0800c7bc <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800c7bc:	b580      	push	{r7, lr}
 800c7be:	b088      	sub	sp, #32
 800c7c0:	af00      	add	r7, sp, #0
 800c7c2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800c7c4:	687b      	ldr	r3, [r7, #4]
 800c7c6:	2b00      	cmp	r3, #0
 800c7c8:	d101      	bne.n	800c7ce <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800c7ca:	2301      	movs	r3, #1
 800c7cc:	e308      	b.n	800cde0 <HAL_RCC_OscConfig+0x624>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800c7ce:	687b      	ldr	r3, [r7, #4]
 800c7d0:	681b      	ldr	r3, [r3, #0]
 800c7d2:	f003 0301 	and.w	r3, r3, #1
 800c7d6:	2b00      	cmp	r3, #0
 800c7d8:	d075      	beq.n	800c8c6 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800c7da:	4ba3      	ldr	r3, [pc, #652]	; (800ca68 <HAL_RCC_OscConfig+0x2ac>)
 800c7dc:	689b      	ldr	r3, [r3, #8]
 800c7de:	f003 030c 	and.w	r3, r3, #12
 800c7e2:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 800c7e4:	4ba0      	ldr	r3, [pc, #640]	; (800ca68 <HAL_RCC_OscConfig+0x2ac>)
 800c7e6:	68db      	ldr	r3, [r3, #12]
 800c7e8:	f003 0303 	and.w	r3, r3, #3
 800c7ec:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 800c7ee:	69bb      	ldr	r3, [r7, #24]
 800c7f0:	2b0c      	cmp	r3, #12
 800c7f2:	d102      	bne.n	800c7fa <HAL_RCC_OscConfig+0x3e>
 800c7f4:	697b      	ldr	r3, [r7, #20]
 800c7f6:	2b03      	cmp	r3, #3
 800c7f8:	d002      	beq.n	800c800 <HAL_RCC_OscConfig+0x44>
 800c7fa:	69bb      	ldr	r3, [r7, #24]
 800c7fc:	2b08      	cmp	r3, #8
 800c7fe:	d10b      	bne.n	800c818 <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800c800:	4b99      	ldr	r3, [pc, #612]	; (800ca68 <HAL_RCC_OscConfig+0x2ac>)
 800c802:	681b      	ldr	r3, [r3, #0]
 800c804:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800c808:	2b00      	cmp	r3, #0
 800c80a:	d05b      	beq.n	800c8c4 <HAL_RCC_OscConfig+0x108>
 800c80c:	687b      	ldr	r3, [r7, #4]
 800c80e:	685b      	ldr	r3, [r3, #4]
 800c810:	2b00      	cmp	r3, #0
 800c812:	d157      	bne.n	800c8c4 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 800c814:	2301      	movs	r3, #1
 800c816:	e2e3      	b.n	800cde0 <HAL_RCC_OscConfig+0x624>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800c818:	687b      	ldr	r3, [r7, #4]
 800c81a:	685b      	ldr	r3, [r3, #4]
 800c81c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800c820:	d106      	bne.n	800c830 <HAL_RCC_OscConfig+0x74>
 800c822:	4b91      	ldr	r3, [pc, #580]	; (800ca68 <HAL_RCC_OscConfig+0x2ac>)
 800c824:	681b      	ldr	r3, [r3, #0]
 800c826:	4a90      	ldr	r2, [pc, #576]	; (800ca68 <HAL_RCC_OscConfig+0x2ac>)
 800c828:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800c82c:	6013      	str	r3, [r2, #0]
 800c82e:	e01d      	b.n	800c86c <HAL_RCC_OscConfig+0xb0>
 800c830:	687b      	ldr	r3, [r7, #4]
 800c832:	685b      	ldr	r3, [r3, #4]
 800c834:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800c838:	d10c      	bne.n	800c854 <HAL_RCC_OscConfig+0x98>
 800c83a:	4b8b      	ldr	r3, [pc, #556]	; (800ca68 <HAL_RCC_OscConfig+0x2ac>)
 800c83c:	681b      	ldr	r3, [r3, #0]
 800c83e:	4a8a      	ldr	r2, [pc, #552]	; (800ca68 <HAL_RCC_OscConfig+0x2ac>)
 800c840:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800c844:	6013      	str	r3, [r2, #0]
 800c846:	4b88      	ldr	r3, [pc, #544]	; (800ca68 <HAL_RCC_OscConfig+0x2ac>)
 800c848:	681b      	ldr	r3, [r3, #0]
 800c84a:	4a87      	ldr	r2, [pc, #540]	; (800ca68 <HAL_RCC_OscConfig+0x2ac>)
 800c84c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800c850:	6013      	str	r3, [r2, #0]
 800c852:	e00b      	b.n	800c86c <HAL_RCC_OscConfig+0xb0>
 800c854:	4b84      	ldr	r3, [pc, #528]	; (800ca68 <HAL_RCC_OscConfig+0x2ac>)
 800c856:	681b      	ldr	r3, [r3, #0]
 800c858:	4a83      	ldr	r2, [pc, #524]	; (800ca68 <HAL_RCC_OscConfig+0x2ac>)
 800c85a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800c85e:	6013      	str	r3, [r2, #0]
 800c860:	4b81      	ldr	r3, [pc, #516]	; (800ca68 <HAL_RCC_OscConfig+0x2ac>)
 800c862:	681b      	ldr	r3, [r3, #0]
 800c864:	4a80      	ldr	r2, [pc, #512]	; (800ca68 <HAL_RCC_OscConfig+0x2ac>)
 800c866:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800c86a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800c86c:	687b      	ldr	r3, [r7, #4]
 800c86e:	685b      	ldr	r3, [r3, #4]
 800c870:	2b00      	cmp	r3, #0
 800c872:	d013      	beq.n	800c89c <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800c874:	f7fc fbcc 	bl	8009010 <HAL_GetTick>
 800c878:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800c87a:	e008      	b.n	800c88e <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800c87c:	f7fc fbc8 	bl	8009010 <HAL_GetTick>
 800c880:	4602      	mov	r2, r0
 800c882:	693b      	ldr	r3, [r7, #16]
 800c884:	1ad3      	subs	r3, r2, r3
 800c886:	2b64      	cmp	r3, #100	; 0x64
 800c888:	d901      	bls.n	800c88e <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800c88a:	2303      	movs	r3, #3
 800c88c:	e2a8      	b.n	800cde0 <HAL_RCC_OscConfig+0x624>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800c88e:	4b76      	ldr	r3, [pc, #472]	; (800ca68 <HAL_RCC_OscConfig+0x2ac>)
 800c890:	681b      	ldr	r3, [r3, #0]
 800c892:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800c896:	2b00      	cmp	r3, #0
 800c898:	d0f0      	beq.n	800c87c <HAL_RCC_OscConfig+0xc0>
 800c89a:	e014      	b.n	800c8c6 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800c89c:	f7fc fbb8 	bl	8009010 <HAL_GetTick>
 800c8a0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800c8a2:	e008      	b.n	800c8b6 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800c8a4:	f7fc fbb4 	bl	8009010 <HAL_GetTick>
 800c8a8:	4602      	mov	r2, r0
 800c8aa:	693b      	ldr	r3, [r7, #16]
 800c8ac:	1ad3      	subs	r3, r2, r3
 800c8ae:	2b64      	cmp	r3, #100	; 0x64
 800c8b0:	d901      	bls.n	800c8b6 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800c8b2:	2303      	movs	r3, #3
 800c8b4:	e294      	b.n	800cde0 <HAL_RCC_OscConfig+0x624>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800c8b6:	4b6c      	ldr	r3, [pc, #432]	; (800ca68 <HAL_RCC_OscConfig+0x2ac>)
 800c8b8:	681b      	ldr	r3, [r3, #0]
 800c8ba:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800c8be:	2b00      	cmp	r3, #0
 800c8c0:	d1f0      	bne.n	800c8a4 <HAL_RCC_OscConfig+0xe8>
 800c8c2:	e000      	b.n	800c8c6 <HAL_RCC_OscConfig+0x10a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800c8c4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800c8c6:	687b      	ldr	r3, [r7, #4]
 800c8c8:	681b      	ldr	r3, [r3, #0]
 800c8ca:	f003 0302 	and.w	r3, r3, #2
 800c8ce:	2b00      	cmp	r3, #0
 800c8d0:	d075      	beq.n	800c9be <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800c8d2:	4b65      	ldr	r3, [pc, #404]	; (800ca68 <HAL_RCC_OscConfig+0x2ac>)
 800c8d4:	689b      	ldr	r3, [r3, #8]
 800c8d6:	f003 030c 	and.w	r3, r3, #12
 800c8da:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 800c8dc:	4b62      	ldr	r3, [pc, #392]	; (800ca68 <HAL_RCC_OscConfig+0x2ac>)
 800c8de:	68db      	ldr	r3, [r3, #12]
 800c8e0:	f003 0303 	and.w	r3, r3, #3
 800c8e4:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 800c8e6:	69bb      	ldr	r3, [r7, #24]
 800c8e8:	2b0c      	cmp	r3, #12
 800c8ea:	d102      	bne.n	800c8f2 <HAL_RCC_OscConfig+0x136>
 800c8ec:	697b      	ldr	r3, [r7, #20]
 800c8ee:	2b02      	cmp	r3, #2
 800c8f0:	d002      	beq.n	800c8f8 <HAL_RCC_OscConfig+0x13c>
 800c8f2:	69bb      	ldr	r3, [r7, #24]
 800c8f4:	2b04      	cmp	r3, #4
 800c8f6:	d11f      	bne.n	800c938 <HAL_RCC_OscConfig+0x17c>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800c8f8:	4b5b      	ldr	r3, [pc, #364]	; (800ca68 <HAL_RCC_OscConfig+0x2ac>)
 800c8fa:	681b      	ldr	r3, [r3, #0]
 800c8fc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800c900:	2b00      	cmp	r3, #0
 800c902:	d005      	beq.n	800c910 <HAL_RCC_OscConfig+0x154>
 800c904:	687b      	ldr	r3, [r7, #4]
 800c906:	68db      	ldr	r3, [r3, #12]
 800c908:	2b00      	cmp	r3, #0
 800c90a:	d101      	bne.n	800c910 <HAL_RCC_OscConfig+0x154>
      {
        return HAL_ERROR;
 800c90c:	2301      	movs	r3, #1
 800c90e:	e267      	b.n	800cde0 <HAL_RCC_OscConfig+0x624>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800c910:	4b55      	ldr	r3, [pc, #340]	; (800ca68 <HAL_RCC_OscConfig+0x2ac>)
 800c912:	685b      	ldr	r3, [r3, #4]
 800c914:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 800c918:	687b      	ldr	r3, [r7, #4]
 800c91a:	691b      	ldr	r3, [r3, #16]
 800c91c:	061b      	lsls	r3, r3, #24
 800c91e:	4952      	ldr	r1, [pc, #328]	; (800ca68 <HAL_RCC_OscConfig+0x2ac>)
 800c920:	4313      	orrs	r3, r2
 800c922:	604b      	str	r3, [r1, #4]

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 800c924:	4b51      	ldr	r3, [pc, #324]	; (800ca6c <HAL_RCC_OscConfig+0x2b0>)
 800c926:	681b      	ldr	r3, [r3, #0]
 800c928:	4618      	mov	r0, r3
 800c92a:	f7fc fb25 	bl	8008f78 <HAL_InitTick>
 800c92e:	4603      	mov	r3, r0
 800c930:	2b00      	cmp	r3, #0
 800c932:	d043      	beq.n	800c9bc <HAL_RCC_OscConfig+0x200>
        {
          return HAL_ERROR;
 800c934:	2301      	movs	r3, #1
 800c936:	e253      	b.n	800cde0 <HAL_RCC_OscConfig+0x624>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800c938:	687b      	ldr	r3, [r7, #4]
 800c93a:	68db      	ldr	r3, [r3, #12]
 800c93c:	2b00      	cmp	r3, #0
 800c93e:	d023      	beq.n	800c988 <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800c940:	4b49      	ldr	r3, [pc, #292]	; (800ca68 <HAL_RCC_OscConfig+0x2ac>)
 800c942:	681b      	ldr	r3, [r3, #0]
 800c944:	4a48      	ldr	r2, [pc, #288]	; (800ca68 <HAL_RCC_OscConfig+0x2ac>)
 800c946:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800c94a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800c94c:	f7fc fb60 	bl	8009010 <HAL_GetTick>
 800c950:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800c952:	e008      	b.n	800c966 <HAL_RCC_OscConfig+0x1aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800c954:	f7fc fb5c 	bl	8009010 <HAL_GetTick>
 800c958:	4602      	mov	r2, r0
 800c95a:	693b      	ldr	r3, [r7, #16]
 800c95c:	1ad3      	subs	r3, r2, r3
 800c95e:	2b02      	cmp	r3, #2
 800c960:	d901      	bls.n	800c966 <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 800c962:	2303      	movs	r3, #3
 800c964:	e23c      	b.n	800cde0 <HAL_RCC_OscConfig+0x624>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800c966:	4b40      	ldr	r3, [pc, #256]	; (800ca68 <HAL_RCC_OscConfig+0x2ac>)
 800c968:	681b      	ldr	r3, [r3, #0]
 800c96a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800c96e:	2b00      	cmp	r3, #0
 800c970:	d0f0      	beq.n	800c954 <HAL_RCC_OscConfig+0x198>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800c972:	4b3d      	ldr	r3, [pc, #244]	; (800ca68 <HAL_RCC_OscConfig+0x2ac>)
 800c974:	685b      	ldr	r3, [r3, #4]
 800c976:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 800c97a:	687b      	ldr	r3, [r7, #4]
 800c97c:	691b      	ldr	r3, [r3, #16]
 800c97e:	061b      	lsls	r3, r3, #24
 800c980:	4939      	ldr	r1, [pc, #228]	; (800ca68 <HAL_RCC_OscConfig+0x2ac>)
 800c982:	4313      	orrs	r3, r2
 800c984:	604b      	str	r3, [r1, #4]
 800c986:	e01a      	b.n	800c9be <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800c988:	4b37      	ldr	r3, [pc, #220]	; (800ca68 <HAL_RCC_OscConfig+0x2ac>)
 800c98a:	681b      	ldr	r3, [r3, #0]
 800c98c:	4a36      	ldr	r2, [pc, #216]	; (800ca68 <HAL_RCC_OscConfig+0x2ac>)
 800c98e:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800c992:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800c994:	f7fc fb3c 	bl	8009010 <HAL_GetTick>
 800c998:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800c99a:	e008      	b.n	800c9ae <HAL_RCC_OscConfig+0x1f2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800c99c:	f7fc fb38 	bl	8009010 <HAL_GetTick>
 800c9a0:	4602      	mov	r2, r0
 800c9a2:	693b      	ldr	r3, [r7, #16]
 800c9a4:	1ad3      	subs	r3, r2, r3
 800c9a6:	2b02      	cmp	r3, #2
 800c9a8:	d901      	bls.n	800c9ae <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 800c9aa:	2303      	movs	r3, #3
 800c9ac:	e218      	b.n	800cde0 <HAL_RCC_OscConfig+0x624>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800c9ae:	4b2e      	ldr	r3, [pc, #184]	; (800ca68 <HAL_RCC_OscConfig+0x2ac>)
 800c9b0:	681b      	ldr	r3, [r3, #0]
 800c9b2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800c9b6:	2b00      	cmp	r3, #0
 800c9b8:	d1f0      	bne.n	800c99c <HAL_RCC_OscConfig+0x1e0>
 800c9ba:	e000      	b.n	800c9be <HAL_RCC_OscConfig+0x202>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800c9bc:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800c9be:	687b      	ldr	r3, [r7, #4]
 800c9c0:	681b      	ldr	r3, [r3, #0]
 800c9c2:	f003 0308 	and.w	r3, r3, #8
 800c9c6:	2b00      	cmp	r3, #0
 800c9c8:	d03c      	beq.n	800ca44 <HAL_RCC_OscConfig+0x288>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800c9ca:	687b      	ldr	r3, [r7, #4]
 800c9cc:	695b      	ldr	r3, [r3, #20]
 800c9ce:	2b00      	cmp	r3, #0
 800c9d0:	d01c      	beq.n	800ca0c <HAL_RCC_OscConfig+0x250>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800c9d2:	4b25      	ldr	r3, [pc, #148]	; (800ca68 <HAL_RCC_OscConfig+0x2ac>)
 800c9d4:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800c9d8:	4a23      	ldr	r2, [pc, #140]	; (800ca68 <HAL_RCC_OscConfig+0x2ac>)
 800c9da:	f043 0301 	orr.w	r3, r3, #1
 800c9de:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800c9e2:	f7fc fb15 	bl	8009010 <HAL_GetTick>
 800c9e6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800c9e8:	e008      	b.n	800c9fc <HAL_RCC_OscConfig+0x240>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800c9ea:	f7fc fb11 	bl	8009010 <HAL_GetTick>
 800c9ee:	4602      	mov	r2, r0
 800c9f0:	693b      	ldr	r3, [r7, #16]
 800c9f2:	1ad3      	subs	r3, r2, r3
 800c9f4:	2b02      	cmp	r3, #2
 800c9f6:	d901      	bls.n	800c9fc <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 800c9f8:	2303      	movs	r3, #3
 800c9fa:	e1f1      	b.n	800cde0 <HAL_RCC_OscConfig+0x624>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800c9fc:	4b1a      	ldr	r3, [pc, #104]	; (800ca68 <HAL_RCC_OscConfig+0x2ac>)
 800c9fe:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800ca02:	f003 0302 	and.w	r3, r3, #2
 800ca06:	2b00      	cmp	r3, #0
 800ca08:	d0ef      	beq.n	800c9ea <HAL_RCC_OscConfig+0x22e>
 800ca0a:	e01b      	b.n	800ca44 <HAL_RCC_OscConfig+0x288>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800ca0c:	4b16      	ldr	r3, [pc, #88]	; (800ca68 <HAL_RCC_OscConfig+0x2ac>)
 800ca0e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800ca12:	4a15      	ldr	r2, [pc, #84]	; (800ca68 <HAL_RCC_OscConfig+0x2ac>)
 800ca14:	f023 0301 	bic.w	r3, r3, #1
 800ca18:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800ca1c:	f7fc faf8 	bl	8009010 <HAL_GetTick>
 800ca20:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800ca22:	e008      	b.n	800ca36 <HAL_RCC_OscConfig+0x27a>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800ca24:	f7fc faf4 	bl	8009010 <HAL_GetTick>
 800ca28:	4602      	mov	r2, r0
 800ca2a:	693b      	ldr	r3, [r7, #16]
 800ca2c:	1ad3      	subs	r3, r2, r3
 800ca2e:	2b02      	cmp	r3, #2
 800ca30:	d901      	bls.n	800ca36 <HAL_RCC_OscConfig+0x27a>
        {
          return HAL_TIMEOUT;
 800ca32:	2303      	movs	r3, #3
 800ca34:	e1d4      	b.n	800cde0 <HAL_RCC_OscConfig+0x624>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800ca36:	4b0c      	ldr	r3, [pc, #48]	; (800ca68 <HAL_RCC_OscConfig+0x2ac>)
 800ca38:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800ca3c:	f003 0302 	and.w	r3, r3, #2
 800ca40:	2b00      	cmp	r3, #0
 800ca42:	d1ef      	bne.n	800ca24 <HAL_RCC_OscConfig+0x268>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800ca44:	687b      	ldr	r3, [r7, #4]
 800ca46:	681b      	ldr	r3, [r3, #0]
 800ca48:	f003 0304 	and.w	r3, r3, #4
 800ca4c:	2b00      	cmp	r3, #0
 800ca4e:	f000 80ab 	beq.w	800cba8 <HAL_RCC_OscConfig+0x3ec>
  {
    FlagStatus       pwrclkchanged = RESET;
 800ca52:	2300      	movs	r3, #0
 800ca54:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain if necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 800ca56:	4b04      	ldr	r3, [pc, #16]	; (800ca68 <HAL_RCC_OscConfig+0x2ac>)
 800ca58:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800ca5a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800ca5e:	2b00      	cmp	r3, #0
 800ca60:	d106      	bne.n	800ca70 <HAL_RCC_OscConfig+0x2b4>
 800ca62:	2301      	movs	r3, #1
 800ca64:	e005      	b.n	800ca72 <HAL_RCC_OscConfig+0x2b6>
 800ca66:	bf00      	nop
 800ca68:	40021000 	.word	0x40021000
 800ca6c:	20000eb4 	.word	0x20000eb4
 800ca70:	2300      	movs	r3, #0
 800ca72:	2b00      	cmp	r3, #0
 800ca74:	d00d      	beq.n	800ca92 <HAL_RCC_OscConfig+0x2d6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800ca76:	4baf      	ldr	r3, [pc, #700]	; (800cd34 <HAL_RCC_OscConfig+0x578>)
 800ca78:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800ca7a:	4aae      	ldr	r2, [pc, #696]	; (800cd34 <HAL_RCC_OscConfig+0x578>)
 800ca7c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800ca80:	6593      	str	r3, [r2, #88]	; 0x58
 800ca82:	4bac      	ldr	r3, [pc, #688]	; (800cd34 <HAL_RCC_OscConfig+0x578>)
 800ca84:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800ca86:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800ca8a:	60fb      	str	r3, [r7, #12]
 800ca8c:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 800ca8e:	2301      	movs	r3, #1
 800ca90:	77fb      	strb	r3, [r7, #31]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800ca92:	4ba9      	ldr	r3, [pc, #676]	; (800cd38 <HAL_RCC_OscConfig+0x57c>)
 800ca94:	681b      	ldr	r3, [r3, #0]
 800ca96:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800ca9a:	2b00      	cmp	r3, #0
 800ca9c:	d118      	bne.n	800cad0 <HAL_RCC_OscConfig+0x314>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800ca9e:	4ba6      	ldr	r3, [pc, #664]	; (800cd38 <HAL_RCC_OscConfig+0x57c>)
 800caa0:	681b      	ldr	r3, [r3, #0]
 800caa2:	4aa5      	ldr	r2, [pc, #660]	; (800cd38 <HAL_RCC_OscConfig+0x57c>)
 800caa4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800caa8:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800caaa:	f7fc fab1 	bl	8009010 <HAL_GetTick>
 800caae:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800cab0:	e008      	b.n	800cac4 <HAL_RCC_OscConfig+0x308>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800cab2:	f7fc faad 	bl	8009010 <HAL_GetTick>
 800cab6:	4602      	mov	r2, r0
 800cab8:	693b      	ldr	r3, [r7, #16]
 800caba:	1ad3      	subs	r3, r2, r3
 800cabc:	2b02      	cmp	r3, #2
 800cabe:	d901      	bls.n	800cac4 <HAL_RCC_OscConfig+0x308>
        {
          return HAL_TIMEOUT;
 800cac0:	2303      	movs	r3, #3
 800cac2:	e18d      	b.n	800cde0 <HAL_RCC_OscConfig+0x624>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800cac4:	4b9c      	ldr	r3, [pc, #624]	; (800cd38 <HAL_RCC_OscConfig+0x57c>)
 800cac6:	681b      	ldr	r3, [r3, #0]
 800cac8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800cacc:	2b00      	cmp	r3, #0
 800cace:	d0f0      	beq.n	800cab2 <HAL_RCC_OscConfig+0x2f6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800cad0:	687b      	ldr	r3, [r7, #4]
 800cad2:	689b      	ldr	r3, [r3, #8]
 800cad4:	2b01      	cmp	r3, #1
 800cad6:	d108      	bne.n	800caea <HAL_RCC_OscConfig+0x32e>
 800cad8:	4b96      	ldr	r3, [pc, #600]	; (800cd34 <HAL_RCC_OscConfig+0x578>)
 800cada:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800cade:	4a95      	ldr	r2, [pc, #596]	; (800cd34 <HAL_RCC_OscConfig+0x578>)
 800cae0:	f043 0301 	orr.w	r3, r3, #1
 800cae4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800cae8:	e024      	b.n	800cb34 <HAL_RCC_OscConfig+0x378>
 800caea:	687b      	ldr	r3, [r7, #4]
 800caec:	689b      	ldr	r3, [r3, #8]
 800caee:	2b05      	cmp	r3, #5
 800caf0:	d110      	bne.n	800cb14 <HAL_RCC_OscConfig+0x358>
 800caf2:	4b90      	ldr	r3, [pc, #576]	; (800cd34 <HAL_RCC_OscConfig+0x578>)
 800caf4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800caf8:	4a8e      	ldr	r2, [pc, #568]	; (800cd34 <HAL_RCC_OscConfig+0x578>)
 800cafa:	f043 0304 	orr.w	r3, r3, #4
 800cafe:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800cb02:	4b8c      	ldr	r3, [pc, #560]	; (800cd34 <HAL_RCC_OscConfig+0x578>)
 800cb04:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800cb08:	4a8a      	ldr	r2, [pc, #552]	; (800cd34 <HAL_RCC_OscConfig+0x578>)
 800cb0a:	f043 0301 	orr.w	r3, r3, #1
 800cb0e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800cb12:	e00f      	b.n	800cb34 <HAL_RCC_OscConfig+0x378>
 800cb14:	4b87      	ldr	r3, [pc, #540]	; (800cd34 <HAL_RCC_OscConfig+0x578>)
 800cb16:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800cb1a:	4a86      	ldr	r2, [pc, #536]	; (800cd34 <HAL_RCC_OscConfig+0x578>)
 800cb1c:	f023 0301 	bic.w	r3, r3, #1
 800cb20:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800cb24:	4b83      	ldr	r3, [pc, #524]	; (800cd34 <HAL_RCC_OscConfig+0x578>)
 800cb26:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800cb2a:	4a82      	ldr	r2, [pc, #520]	; (800cd34 <HAL_RCC_OscConfig+0x578>)
 800cb2c:	f023 0304 	bic.w	r3, r3, #4
 800cb30:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800cb34:	687b      	ldr	r3, [r7, #4]
 800cb36:	689b      	ldr	r3, [r3, #8]
 800cb38:	2b00      	cmp	r3, #0
 800cb3a:	d016      	beq.n	800cb6a <HAL_RCC_OscConfig+0x3ae>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800cb3c:	f7fc fa68 	bl	8009010 <HAL_GetTick>
 800cb40:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800cb42:	e00a      	b.n	800cb5a <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800cb44:	f7fc fa64 	bl	8009010 <HAL_GetTick>
 800cb48:	4602      	mov	r2, r0
 800cb4a:	693b      	ldr	r3, [r7, #16]
 800cb4c:	1ad3      	subs	r3, r2, r3
 800cb4e:	f241 3288 	movw	r2, #5000	; 0x1388
 800cb52:	4293      	cmp	r3, r2
 800cb54:	d901      	bls.n	800cb5a <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 800cb56:	2303      	movs	r3, #3
 800cb58:	e142      	b.n	800cde0 <HAL_RCC_OscConfig+0x624>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800cb5a:	4b76      	ldr	r3, [pc, #472]	; (800cd34 <HAL_RCC_OscConfig+0x578>)
 800cb5c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800cb60:	f003 0302 	and.w	r3, r3, #2
 800cb64:	2b00      	cmp	r3, #0
 800cb66:	d0ed      	beq.n	800cb44 <HAL_RCC_OscConfig+0x388>
 800cb68:	e015      	b.n	800cb96 <HAL_RCC_OscConfig+0x3da>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800cb6a:	f7fc fa51 	bl	8009010 <HAL_GetTick>
 800cb6e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800cb70:	e00a      	b.n	800cb88 <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800cb72:	f7fc fa4d 	bl	8009010 <HAL_GetTick>
 800cb76:	4602      	mov	r2, r0
 800cb78:	693b      	ldr	r3, [r7, #16]
 800cb7a:	1ad3      	subs	r3, r2, r3
 800cb7c:	f241 3288 	movw	r2, #5000	; 0x1388
 800cb80:	4293      	cmp	r3, r2
 800cb82:	d901      	bls.n	800cb88 <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 800cb84:	2303      	movs	r3, #3
 800cb86:	e12b      	b.n	800cde0 <HAL_RCC_OscConfig+0x624>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800cb88:	4b6a      	ldr	r3, [pc, #424]	; (800cd34 <HAL_RCC_OscConfig+0x578>)
 800cb8a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800cb8e:	f003 0302 	and.w	r3, r3, #2
 800cb92:	2b00      	cmp	r3, #0
 800cb94:	d1ed      	bne.n	800cb72 <HAL_RCC_OscConfig+0x3b6>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 800cb96:	7ffb      	ldrb	r3, [r7, #31]
 800cb98:	2b01      	cmp	r3, #1
 800cb9a:	d105      	bne.n	800cba8 <HAL_RCC_OscConfig+0x3ec>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800cb9c:	4b65      	ldr	r3, [pc, #404]	; (800cd34 <HAL_RCC_OscConfig+0x578>)
 800cb9e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800cba0:	4a64      	ldr	r2, [pc, #400]	; (800cd34 <HAL_RCC_OscConfig+0x578>)
 800cba2:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800cba6:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 800cba8:	687b      	ldr	r3, [r7, #4]
 800cbaa:	681b      	ldr	r3, [r3, #0]
 800cbac:	f003 0320 	and.w	r3, r3, #32
 800cbb0:	2b00      	cmp	r3, #0
 800cbb2:	d03c      	beq.n	800cc2e <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 800cbb4:	687b      	ldr	r3, [r7, #4]
 800cbb6:	699b      	ldr	r3, [r3, #24]
 800cbb8:	2b00      	cmp	r3, #0
 800cbba:	d01c      	beq.n	800cbf6 <HAL_RCC_OscConfig+0x43a>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 800cbbc:	4b5d      	ldr	r3, [pc, #372]	; (800cd34 <HAL_RCC_OscConfig+0x578>)
 800cbbe:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800cbc2:	4a5c      	ldr	r2, [pc, #368]	; (800cd34 <HAL_RCC_OscConfig+0x578>)
 800cbc4:	f043 0301 	orr.w	r3, r3, #1
 800cbc8:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800cbcc:	f7fc fa20 	bl	8009010 <HAL_GetTick>
 800cbd0:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 800cbd2:	e008      	b.n	800cbe6 <HAL_RCC_OscConfig+0x42a>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800cbd4:	f7fc fa1c 	bl	8009010 <HAL_GetTick>
 800cbd8:	4602      	mov	r2, r0
 800cbda:	693b      	ldr	r3, [r7, #16]
 800cbdc:	1ad3      	subs	r3, r2, r3
 800cbde:	2b02      	cmp	r3, #2
 800cbe0:	d901      	bls.n	800cbe6 <HAL_RCC_OscConfig+0x42a>
        {
          return HAL_TIMEOUT;
 800cbe2:	2303      	movs	r3, #3
 800cbe4:	e0fc      	b.n	800cde0 <HAL_RCC_OscConfig+0x624>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 800cbe6:	4b53      	ldr	r3, [pc, #332]	; (800cd34 <HAL_RCC_OscConfig+0x578>)
 800cbe8:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800cbec:	f003 0302 	and.w	r3, r3, #2
 800cbf0:	2b00      	cmp	r3, #0
 800cbf2:	d0ef      	beq.n	800cbd4 <HAL_RCC_OscConfig+0x418>
 800cbf4:	e01b      	b.n	800cc2e <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 800cbf6:	4b4f      	ldr	r3, [pc, #316]	; (800cd34 <HAL_RCC_OscConfig+0x578>)
 800cbf8:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800cbfc:	4a4d      	ldr	r2, [pc, #308]	; (800cd34 <HAL_RCC_OscConfig+0x578>)
 800cbfe:	f023 0301 	bic.w	r3, r3, #1
 800cc02:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800cc06:	f7fc fa03 	bl	8009010 <HAL_GetTick>
 800cc0a:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 800cc0c:	e008      	b.n	800cc20 <HAL_RCC_OscConfig+0x464>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800cc0e:	f7fc f9ff 	bl	8009010 <HAL_GetTick>
 800cc12:	4602      	mov	r2, r0
 800cc14:	693b      	ldr	r3, [r7, #16]
 800cc16:	1ad3      	subs	r3, r2, r3
 800cc18:	2b02      	cmp	r3, #2
 800cc1a:	d901      	bls.n	800cc20 <HAL_RCC_OscConfig+0x464>
        {
          return HAL_TIMEOUT;
 800cc1c:	2303      	movs	r3, #3
 800cc1e:	e0df      	b.n	800cde0 <HAL_RCC_OscConfig+0x624>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 800cc20:	4b44      	ldr	r3, [pc, #272]	; (800cd34 <HAL_RCC_OscConfig+0x578>)
 800cc22:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800cc26:	f003 0302 	and.w	r3, r3, #2
 800cc2a:	2b00      	cmp	r3, #0
 800cc2c:	d1ef      	bne.n	800cc0e <HAL_RCC_OscConfig+0x452>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 800cc2e:	687b      	ldr	r3, [r7, #4]
 800cc30:	69db      	ldr	r3, [r3, #28]
 800cc32:	2b00      	cmp	r3, #0
 800cc34:	f000 80d3 	beq.w	800cdde <HAL_RCC_OscConfig+0x622>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800cc38:	4b3e      	ldr	r3, [pc, #248]	; (800cd34 <HAL_RCC_OscConfig+0x578>)
 800cc3a:	689b      	ldr	r3, [r3, #8]
 800cc3c:	f003 030c 	and.w	r3, r3, #12
 800cc40:	2b0c      	cmp	r3, #12
 800cc42:	f000 808d 	beq.w	800cd60 <HAL_RCC_OscConfig+0x5a4>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 800cc46:	687b      	ldr	r3, [r7, #4]
 800cc48:	69db      	ldr	r3, [r3, #28]
 800cc4a:	2b02      	cmp	r3, #2
 800cc4c:	d15a      	bne.n	800cd04 <HAL_RCC_OscConfig+0x548>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800cc4e:	4b39      	ldr	r3, [pc, #228]	; (800cd34 <HAL_RCC_OscConfig+0x578>)
 800cc50:	681b      	ldr	r3, [r3, #0]
 800cc52:	4a38      	ldr	r2, [pc, #224]	; (800cd34 <HAL_RCC_OscConfig+0x578>)
 800cc54:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800cc58:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800cc5a:	f7fc f9d9 	bl	8009010 <HAL_GetTick>
 800cc5e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800cc60:	e008      	b.n	800cc74 <HAL_RCC_OscConfig+0x4b8>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800cc62:	f7fc f9d5 	bl	8009010 <HAL_GetTick>
 800cc66:	4602      	mov	r2, r0
 800cc68:	693b      	ldr	r3, [r7, #16]
 800cc6a:	1ad3      	subs	r3, r2, r3
 800cc6c:	2b02      	cmp	r3, #2
 800cc6e:	d901      	bls.n	800cc74 <HAL_RCC_OscConfig+0x4b8>
          {
            return HAL_TIMEOUT;
 800cc70:	2303      	movs	r3, #3
 800cc72:	e0b5      	b.n	800cde0 <HAL_RCC_OscConfig+0x624>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800cc74:	4b2f      	ldr	r3, [pc, #188]	; (800cd34 <HAL_RCC_OscConfig+0x578>)
 800cc76:	681b      	ldr	r3, [r3, #0]
 800cc78:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800cc7c:	2b00      	cmp	r3, #0
 800cc7e:	d1f0      	bne.n	800cc62 <HAL_RCC_OscConfig+0x4a6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800cc80:	4b2c      	ldr	r3, [pc, #176]	; (800cd34 <HAL_RCC_OscConfig+0x578>)
 800cc82:	68da      	ldr	r2, [r3, #12]
 800cc84:	4b2d      	ldr	r3, [pc, #180]	; (800cd3c <HAL_RCC_OscConfig+0x580>)
 800cc86:	4013      	ands	r3, r2
 800cc88:	687a      	ldr	r2, [r7, #4]
 800cc8a:	6a11      	ldr	r1, [r2, #32]
 800cc8c:	687a      	ldr	r2, [r7, #4]
 800cc8e:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800cc90:	3a01      	subs	r2, #1
 800cc92:	0112      	lsls	r2, r2, #4
 800cc94:	4311      	orrs	r1, r2
 800cc96:	687a      	ldr	r2, [r7, #4]
 800cc98:	6a92      	ldr	r2, [r2, #40]	; 0x28
 800cc9a:	0212      	lsls	r2, r2, #8
 800cc9c:	4311      	orrs	r1, r2
 800cc9e:	687a      	ldr	r2, [r7, #4]
 800cca0:	6b12      	ldr	r2, [r2, #48]	; 0x30
 800cca2:	0852      	lsrs	r2, r2, #1
 800cca4:	3a01      	subs	r2, #1
 800cca6:	0552      	lsls	r2, r2, #21
 800cca8:	4311      	orrs	r1, r2
 800ccaa:	687a      	ldr	r2, [r7, #4]
 800ccac:	6b52      	ldr	r2, [r2, #52]	; 0x34
 800ccae:	0852      	lsrs	r2, r2, #1
 800ccb0:	3a01      	subs	r2, #1
 800ccb2:	0652      	lsls	r2, r2, #25
 800ccb4:	4311      	orrs	r1, r2
 800ccb6:	687a      	ldr	r2, [r7, #4]
 800ccb8:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 800ccba:	06d2      	lsls	r2, r2, #27
 800ccbc:	430a      	orrs	r2, r1
 800ccbe:	491d      	ldr	r1, [pc, #116]	; (800cd34 <HAL_RCC_OscConfig+0x578>)
 800ccc0:	4313      	orrs	r3, r2
 800ccc2:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800ccc4:	4b1b      	ldr	r3, [pc, #108]	; (800cd34 <HAL_RCC_OscConfig+0x578>)
 800ccc6:	681b      	ldr	r3, [r3, #0]
 800ccc8:	4a1a      	ldr	r2, [pc, #104]	; (800cd34 <HAL_RCC_OscConfig+0x578>)
 800ccca:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800ccce:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 800ccd0:	4b18      	ldr	r3, [pc, #96]	; (800cd34 <HAL_RCC_OscConfig+0x578>)
 800ccd2:	68db      	ldr	r3, [r3, #12]
 800ccd4:	4a17      	ldr	r2, [pc, #92]	; (800cd34 <HAL_RCC_OscConfig+0x578>)
 800ccd6:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800ccda:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800ccdc:	f7fc f998 	bl	8009010 <HAL_GetTick>
 800cce0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800cce2:	e008      	b.n	800ccf6 <HAL_RCC_OscConfig+0x53a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800cce4:	f7fc f994 	bl	8009010 <HAL_GetTick>
 800cce8:	4602      	mov	r2, r0
 800ccea:	693b      	ldr	r3, [r7, #16]
 800ccec:	1ad3      	subs	r3, r2, r3
 800ccee:	2b02      	cmp	r3, #2
 800ccf0:	d901      	bls.n	800ccf6 <HAL_RCC_OscConfig+0x53a>
          {
            return HAL_TIMEOUT;
 800ccf2:	2303      	movs	r3, #3
 800ccf4:	e074      	b.n	800cde0 <HAL_RCC_OscConfig+0x624>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800ccf6:	4b0f      	ldr	r3, [pc, #60]	; (800cd34 <HAL_RCC_OscConfig+0x578>)
 800ccf8:	681b      	ldr	r3, [r3, #0]
 800ccfa:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800ccfe:	2b00      	cmp	r3, #0
 800cd00:	d0f0      	beq.n	800cce4 <HAL_RCC_OscConfig+0x528>
 800cd02:	e06c      	b.n	800cdde <HAL_RCC_OscConfig+0x622>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800cd04:	4b0b      	ldr	r3, [pc, #44]	; (800cd34 <HAL_RCC_OscConfig+0x578>)
 800cd06:	681b      	ldr	r3, [r3, #0]
 800cd08:	4a0a      	ldr	r2, [pc, #40]	; (800cd34 <HAL_RCC_OscConfig+0x578>)
 800cd0a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800cd0e:	6013      	str	r3, [r2, #0]

        /* Disable all PLL outputs to save power if no PLLs on */
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 800cd10:	4b08      	ldr	r3, [pc, #32]	; (800cd34 <HAL_RCC_OscConfig+0x578>)
 800cd12:	68db      	ldr	r3, [r3, #12]
 800cd14:	4a07      	ldr	r2, [pc, #28]	; (800cd34 <HAL_RCC_OscConfig+0x578>)
 800cd16:	f023 0303 	bic.w	r3, r3, #3
 800cd1a:	60d3      	str	r3, [r2, #12]
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_ADCCLK);
 800cd1c:	4b05      	ldr	r3, [pc, #20]	; (800cd34 <HAL_RCC_OscConfig+0x578>)
 800cd1e:	68db      	ldr	r3, [r3, #12]
 800cd20:	4a04      	ldr	r2, [pc, #16]	; (800cd34 <HAL_RCC_OscConfig+0x578>)
 800cd22:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 800cd26:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800cd2a:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800cd2c:	f7fc f970 	bl	8009010 <HAL_GetTick>
 800cd30:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800cd32:	e00e      	b.n	800cd52 <HAL_RCC_OscConfig+0x596>
 800cd34:	40021000 	.word	0x40021000
 800cd38:	40007000 	.word	0x40007000
 800cd3c:	019f800c 	.word	0x019f800c
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800cd40:	f7fc f966 	bl	8009010 <HAL_GetTick>
 800cd44:	4602      	mov	r2, r0
 800cd46:	693b      	ldr	r3, [r7, #16]
 800cd48:	1ad3      	subs	r3, r2, r3
 800cd4a:	2b02      	cmp	r3, #2
 800cd4c:	d901      	bls.n	800cd52 <HAL_RCC_OscConfig+0x596>
          {
            return HAL_TIMEOUT;
 800cd4e:	2303      	movs	r3, #3
 800cd50:	e046      	b.n	800cde0 <HAL_RCC_OscConfig+0x624>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800cd52:	4b25      	ldr	r3, [pc, #148]	; (800cde8 <HAL_RCC_OscConfig+0x62c>)
 800cd54:	681b      	ldr	r3, [r3, #0]
 800cd56:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800cd5a:	2b00      	cmp	r3, #0
 800cd5c:	d1f0      	bne.n	800cd40 <HAL_RCC_OscConfig+0x584>
 800cd5e:	e03e      	b.n	800cdde <HAL_RCC_OscConfig+0x622>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800cd60:	687b      	ldr	r3, [r7, #4]
 800cd62:	69db      	ldr	r3, [r3, #28]
 800cd64:	2b01      	cmp	r3, #1
 800cd66:	d101      	bne.n	800cd6c <HAL_RCC_OscConfig+0x5b0>
      {
        return HAL_ERROR;
 800cd68:	2301      	movs	r3, #1
 800cd6a:	e039      	b.n	800cde0 <HAL_RCC_OscConfig+0x624>
      }
      else
      {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp_pllckcfg = RCC->PLLCFGR;
 800cd6c:	4b1e      	ldr	r3, [pc, #120]	; (800cde8 <HAL_RCC_OscConfig+0x62c>)
 800cd6e:	68db      	ldr	r3, [r3, #12]
 800cd70:	617b      	str	r3, [r7, #20]
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800cd72:	697b      	ldr	r3, [r7, #20]
 800cd74:	f003 0203 	and.w	r2, r3, #3
 800cd78:	687b      	ldr	r3, [r7, #4]
 800cd7a:	6a1b      	ldr	r3, [r3, #32]
 800cd7c:	429a      	cmp	r2, r3
 800cd7e:	d12c      	bne.n	800cdda <HAL_RCC_OscConfig+0x61e>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800cd80:	697b      	ldr	r3, [r7, #20]
 800cd82:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 800cd86:	687b      	ldr	r3, [r7, #4]
 800cd88:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800cd8a:	3b01      	subs	r3, #1
 800cd8c:	011b      	lsls	r3, r3, #4
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800cd8e:	429a      	cmp	r2, r3
 800cd90:	d123      	bne.n	800cdda <HAL_RCC_OscConfig+0x61e>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 800cd92:	697b      	ldr	r3, [r7, #20]
 800cd94:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 800cd98:	687b      	ldr	r3, [r7, #4]
 800cd9a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800cd9c:	021b      	lsls	r3, r3, #8
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800cd9e:	429a      	cmp	r2, r3
 800cda0:	d11b      	bne.n	800cdda <HAL_RCC_OscConfig+0x61e>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 800cda2:	697b      	ldr	r3, [r7, #20]
 800cda4:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 800cda8:	687b      	ldr	r3, [r7, #4]
 800cdaa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800cdac:	06db      	lsls	r3, r3, #27
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 800cdae:	429a      	cmp	r2, r3
 800cdb0:	d113      	bne.n	800cdda <HAL_RCC_OscConfig+0x61e>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800cdb2:	697b      	ldr	r3, [r7, #20]
 800cdb4:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 800cdb8:	687b      	ldr	r3, [r7, #4]
 800cdba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800cdbc:	085b      	lsrs	r3, r3, #1
 800cdbe:	3b01      	subs	r3, #1
 800cdc0:	055b      	lsls	r3, r3, #21
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 800cdc2:	429a      	cmp	r2, r3
 800cdc4:	d109      	bne.n	800cdda <HAL_RCC_OscConfig+0x61e>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 800cdc6:	697b      	ldr	r3, [r7, #20]
 800cdc8:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 800cdcc:	687b      	ldr	r3, [r7, #4]
 800cdce:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800cdd0:	085b      	lsrs	r3, r3, #1
 800cdd2:	3b01      	subs	r3, #1
 800cdd4:	065b      	lsls	r3, r3, #25
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800cdd6:	429a      	cmp	r2, r3
 800cdd8:	d001      	beq.n	800cdde <HAL_RCC_OscConfig+0x622>
      {
        return HAL_ERROR;
 800cdda:	2301      	movs	r3, #1
 800cddc:	e000      	b.n	800cde0 <HAL_RCC_OscConfig+0x624>
      }
    }
  }
  }

  return HAL_OK;
 800cdde:	2300      	movs	r3, #0
}
 800cde0:	4618      	mov	r0, r3
 800cde2:	3720      	adds	r7, #32
 800cde4:	46bd      	mov	sp, r7
 800cde6:	bd80      	pop	{r7, pc}
 800cde8:	40021000 	.word	0x40021000

0800cdec <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800cdec:	b580      	push	{r7, lr}
 800cdee:	b086      	sub	sp, #24
 800cdf0:	af00      	add	r7, sp, #0
 800cdf2:	6078      	str	r0, [r7, #4]
 800cdf4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t pllfreq;
  uint32_t hpre = RCC_SYSCLK_DIV1;
 800cdf6:	2300      	movs	r3, #0
 800cdf8:	617b      	str	r3, [r7, #20]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800cdfa:	687b      	ldr	r3, [r7, #4]
 800cdfc:	2b00      	cmp	r3, #0
 800cdfe:	d101      	bne.n	800ce04 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 800ce00:	2301      	movs	r3, #1
 800ce02:	e11e      	b.n	800d042 <HAL_RCC_ClockConfig+0x256>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800ce04:	4b91      	ldr	r3, [pc, #580]	; (800d04c <HAL_RCC_ClockConfig+0x260>)
 800ce06:	681b      	ldr	r3, [r3, #0]
 800ce08:	f003 030f 	and.w	r3, r3, #15
 800ce0c:	683a      	ldr	r2, [r7, #0]
 800ce0e:	429a      	cmp	r2, r3
 800ce10:	d910      	bls.n	800ce34 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800ce12:	4b8e      	ldr	r3, [pc, #568]	; (800d04c <HAL_RCC_ClockConfig+0x260>)
 800ce14:	681b      	ldr	r3, [r3, #0]
 800ce16:	f023 020f 	bic.w	r2, r3, #15
 800ce1a:	498c      	ldr	r1, [pc, #560]	; (800d04c <HAL_RCC_ClockConfig+0x260>)
 800ce1c:	683b      	ldr	r3, [r7, #0]
 800ce1e:	4313      	orrs	r3, r2
 800ce20:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800ce22:	4b8a      	ldr	r3, [pc, #552]	; (800d04c <HAL_RCC_ClockConfig+0x260>)
 800ce24:	681b      	ldr	r3, [r3, #0]
 800ce26:	f003 030f 	and.w	r3, r3, #15
 800ce2a:	683a      	ldr	r2, [r7, #0]
 800ce2c:	429a      	cmp	r2, r3
 800ce2e:	d001      	beq.n	800ce34 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 800ce30:	2301      	movs	r3, #1
 800ce32:	e106      	b.n	800d042 <HAL_RCC_ClockConfig+0x256>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800ce34:	687b      	ldr	r3, [r7, #4]
 800ce36:	681b      	ldr	r3, [r3, #0]
 800ce38:	f003 0301 	and.w	r3, r3, #1
 800ce3c:	2b00      	cmp	r3, #0
 800ce3e:	d073      	beq.n	800cf28 <HAL_RCC_ClockConfig+0x13c>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800ce40:	687b      	ldr	r3, [r7, #4]
 800ce42:	685b      	ldr	r3, [r3, #4]
 800ce44:	2b03      	cmp	r3, #3
 800ce46:	d129      	bne.n	800ce9c <HAL_RCC_ClockConfig+0xb0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800ce48:	4b81      	ldr	r3, [pc, #516]	; (800d050 <HAL_RCC_ClockConfig+0x264>)
 800ce4a:	681b      	ldr	r3, [r3, #0]
 800ce4c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800ce50:	2b00      	cmp	r3, #0
 800ce52:	d101      	bne.n	800ce58 <HAL_RCC_ClockConfig+0x6c>
      {
        return HAL_ERROR;
 800ce54:	2301      	movs	r3, #1
 800ce56:	e0f4      	b.n	800d042 <HAL_RCC_ClockConfig+0x256>
      }
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      pllfreq = RCC_GetSysClockFreqFromPLLSource();
 800ce58:	f000 f972 	bl	800d140 <RCC_GetSysClockFreqFromPLLSource>
 800ce5c:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
      if(pllfreq > 80000000U)
 800ce5e:	693b      	ldr	r3, [r7, #16]
 800ce60:	4a7c      	ldr	r2, [pc, #496]	; (800d054 <HAL_RCC_ClockConfig+0x268>)
 800ce62:	4293      	cmp	r3, r2
 800ce64:	d93f      	bls.n	800cee6 <HAL_RCC_ClockConfig+0xfa>
      {
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 800ce66:	4b7a      	ldr	r3, [pc, #488]	; (800d050 <HAL_RCC_ClockConfig+0x264>)
 800ce68:	689b      	ldr	r3, [r3, #8]
 800ce6a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800ce6e:	2b00      	cmp	r3, #0
 800ce70:	d009      	beq.n	800ce86 <HAL_RCC_ClockConfig+0x9a>
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 800ce72:	687b      	ldr	r3, [r7, #4]
 800ce74:	681b      	ldr	r3, [r3, #0]
 800ce76:	f003 0302 	and.w	r3, r3, #2
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 800ce7a:	2b00      	cmp	r3, #0
 800ce7c:	d033      	beq.n	800cee6 <HAL_RCC_ClockConfig+0xfa>
              (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))))
 800ce7e:	687b      	ldr	r3, [r7, #4]
 800ce80:	689b      	ldr	r3, [r3, #8]
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 800ce82:	2b00      	cmp	r3, #0
 800ce84:	d12f      	bne.n	800cee6 <HAL_RCC_ClockConfig+0xfa>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 800ce86:	4b72      	ldr	r3, [pc, #456]	; (800d050 <HAL_RCC_ClockConfig+0x264>)
 800ce88:	689b      	ldr	r3, [r3, #8]
 800ce8a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800ce8e:	4a70      	ldr	r2, [pc, #448]	; (800d050 <HAL_RCC_ClockConfig+0x264>)
 800ce90:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800ce94:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 800ce96:	2380      	movs	r3, #128	; 0x80
 800ce98:	617b      	str	r3, [r7, #20]
 800ce9a:	e024      	b.n	800cee6 <HAL_RCC_ClockConfig+0xfa>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800ce9c:	687b      	ldr	r3, [r7, #4]
 800ce9e:	685b      	ldr	r3, [r3, #4]
 800cea0:	2b02      	cmp	r3, #2
 800cea2:	d107      	bne.n	800ceb4 <HAL_RCC_ClockConfig+0xc8>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800cea4:	4b6a      	ldr	r3, [pc, #424]	; (800d050 <HAL_RCC_ClockConfig+0x264>)
 800cea6:	681b      	ldr	r3, [r3, #0]
 800cea8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800ceac:	2b00      	cmp	r3, #0
 800ceae:	d109      	bne.n	800cec4 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 800ceb0:	2301      	movs	r3, #1
 800ceb2:	e0c6      	b.n	800d042 <HAL_RCC_ClockConfig+0x256>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800ceb4:	4b66      	ldr	r3, [pc, #408]	; (800d050 <HAL_RCC_ClockConfig+0x264>)
 800ceb6:	681b      	ldr	r3, [r3, #0]
 800ceb8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800cebc:	2b00      	cmp	r3, #0
 800cebe:	d101      	bne.n	800cec4 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 800cec0:	2301      	movs	r3, #1
 800cec2:	e0be      	b.n	800d042 <HAL_RCC_ClockConfig+0x256>
        }
      }
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      pllfreq = HAL_RCC_GetSysClockFreq();
 800cec4:	f000 f8ce 	bl	800d064 <HAL_RCC_GetSysClockFreq>
 800cec8:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
      if(pllfreq > 80000000U)
 800ceca:	693b      	ldr	r3, [r7, #16]
 800cecc:	4a61      	ldr	r2, [pc, #388]	; (800d054 <HAL_RCC_ClockConfig+0x268>)
 800cece:	4293      	cmp	r3, r2
 800ced0:	d909      	bls.n	800cee6 <HAL_RCC_ClockConfig+0xfa>
      {
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 800ced2:	4b5f      	ldr	r3, [pc, #380]	; (800d050 <HAL_RCC_ClockConfig+0x264>)
 800ced4:	689b      	ldr	r3, [r3, #8]
 800ced6:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800ceda:	4a5d      	ldr	r2, [pc, #372]	; (800d050 <HAL_RCC_ClockConfig+0x264>)
 800cedc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800cee0:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 800cee2:	2380      	movs	r3, #128	; 0x80
 800cee4:	617b      	str	r3, [r7, #20]
      }

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 800cee6:	4b5a      	ldr	r3, [pc, #360]	; (800d050 <HAL_RCC_ClockConfig+0x264>)
 800cee8:	689b      	ldr	r3, [r3, #8]
 800ceea:	f023 0203 	bic.w	r2, r3, #3
 800ceee:	687b      	ldr	r3, [r7, #4]
 800cef0:	685b      	ldr	r3, [r3, #4]
 800cef2:	4957      	ldr	r1, [pc, #348]	; (800d050 <HAL_RCC_ClockConfig+0x264>)
 800cef4:	4313      	orrs	r3, r2
 800cef6:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800cef8:	f7fc f88a 	bl	8009010 <HAL_GetTick>
 800cefc:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800cefe:	e00a      	b.n	800cf16 <HAL_RCC_ClockConfig+0x12a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800cf00:	f7fc f886 	bl	8009010 <HAL_GetTick>
 800cf04:	4602      	mov	r2, r0
 800cf06:	68fb      	ldr	r3, [r7, #12]
 800cf08:	1ad3      	subs	r3, r2, r3
 800cf0a:	f241 3288 	movw	r2, #5000	; 0x1388
 800cf0e:	4293      	cmp	r3, r2
 800cf10:	d901      	bls.n	800cf16 <HAL_RCC_ClockConfig+0x12a>
      {
        return HAL_TIMEOUT;
 800cf12:	2303      	movs	r3, #3
 800cf14:	e095      	b.n	800d042 <HAL_RCC_ClockConfig+0x256>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800cf16:	4b4e      	ldr	r3, [pc, #312]	; (800d050 <HAL_RCC_ClockConfig+0x264>)
 800cf18:	689b      	ldr	r3, [r3, #8]
 800cf1a:	f003 020c 	and.w	r2, r3, #12
 800cf1e:	687b      	ldr	r3, [r7, #4]
 800cf20:	685b      	ldr	r3, [r3, #4]
 800cf22:	009b      	lsls	r3, r3, #2
 800cf24:	429a      	cmp	r2, r3
 800cf26:	d1eb      	bne.n	800cf00 <HAL_RCC_ClockConfig+0x114>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800cf28:	687b      	ldr	r3, [r7, #4]
 800cf2a:	681b      	ldr	r3, [r3, #0]
 800cf2c:	f003 0302 	and.w	r3, r3, #2
 800cf30:	2b00      	cmp	r3, #0
 800cf32:	d023      	beq.n	800cf7c <HAL_RCC_ClockConfig+0x190>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800cf34:	687b      	ldr	r3, [r7, #4]
 800cf36:	681b      	ldr	r3, [r3, #0]
 800cf38:	f003 0304 	and.w	r3, r3, #4
 800cf3c:	2b00      	cmp	r3, #0
 800cf3e:	d005      	beq.n	800cf4c <HAL_RCC_ClockConfig+0x160>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800cf40:	4b43      	ldr	r3, [pc, #268]	; (800d050 <HAL_RCC_ClockConfig+0x264>)
 800cf42:	689b      	ldr	r3, [r3, #8]
 800cf44:	4a42      	ldr	r2, [pc, #264]	; (800d050 <HAL_RCC_ClockConfig+0x264>)
 800cf46:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 800cf4a:	6093      	str	r3, [r2, #8]
    }
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800cf4c:	687b      	ldr	r3, [r7, #4]
 800cf4e:	681b      	ldr	r3, [r3, #0]
 800cf50:	f003 0308 	and.w	r3, r3, #8
 800cf54:	2b00      	cmp	r3, #0
 800cf56:	d007      	beq.n	800cf68 <HAL_RCC_ClockConfig+0x17c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, RCC_HCLK_DIV16);
 800cf58:	4b3d      	ldr	r3, [pc, #244]	; (800d050 <HAL_RCC_ClockConfig+0x264>)
 800cf5a:	689b      	ldr	r3, [r3, #8]
 800cf5c:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 800cf60:	4a3b      	ldr	r2, [pc, #236]	; (800d050 <HAL_RCC_ClockConfig+0x264>)
 800cf62:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 800cf66:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800cf68:	4b39      	ldr	r3, [pc, #228]	; (800d050 <HAL_RCC_ClockConfig+0x264>)
 800cf6a:	689b      	ldr	r3, [r3, #8]
 800cf6c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800cf70:	687b      	ldr	r3, [r7, #4]
 800cf72:	689b      	ldr	r3, [r3, #8]
 800cf74:	4936      	ldr	r1, [pc, #216]	; (800d050 <HAL_RCC_ClockConfig+0x264>)
 800cf76:	4313      	orrs	r3, r2
 800cf78:	608b      	str	r3, [r1, #8]
 800cf7a:	e008      	b.n	800cf8e <HAL_RCC_ClockConfig+0x1a2>
  }
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if(hpre == RCC_SYSCLK_DIV2)
 800cf7c:	697b      	ldr	r3, [r7, #20]
 800cf7e:	2b80      	cmp	r3, #128	; 0x80
 800cf80:	d105      	bne.n	800cf8e <HAL_RCC_ClockConfig+0x1a2>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 800cf82:	4b33      	ldr	r3, [pc, #204]	; (800d050 <HAL_RCC_ClockConfig+0x264>)
 800cf84:	689b      	ldr	r3, [r3, #8]
 800cf86:	4a32      	ldr	r2, [pc, #200]	; (800d050 <HAL_RCC_ClockConfig+0x264>)
 800cf88:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800cf8c:	6093      	str	r3, [r2, #8]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800cf8e:	4b2f      	ldr	r3, [pc, #188]	; (800d04c <HAL_RCC_ClockConfig+0x260>)
 800cf90:	681b      	ldr	r3, [r3, #0]
 800cf92:	f003 030f 	and.w	r3, r3, #15
 800cf96:	683a      	ldr	r2, [r7, #0]
 800cf98:	429a      	cmp	r2, r3
 800cf9a:	d21d      	bcs.n	800cfd8 <HAL_RCC_ClockConfig+0x1ec>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800cf9c:	4b2b      	ldr	r3, [pc, #172]	; (800d04c <HAL_RCC_ClockConfig+0x260>)
 800cf9e:	681b      	ldr	r3, [r3, #0]
 800cfa0:	f023 020f 	bic.w	r2, r3, #15
 800cfa4:	4929      	ldr	r1, [pc, #164]	; (800d04c <HAL_RCC_ClockConfig+0x260>)
 800cfa6:	683b      	ldr	r3, [r7, #0]
 800cfa8:	4313      	orrs	r3, r2
 800cfaa:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 800cfac:	f7fc f830 	bl	8009010 <HAL_GetTick>
 800cfb0:	60f8      	str	r0, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 800cfb2:	e00a      	b.n	800cfca <HAL_RCC_ClockConfig+0x1de>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800cfb4:	f7fc f82c 	bl	8009010 <HAL_GetTick>
 800cfb8:	4602      	mov	r2, r0
 800cfba:	68fb      	ldr	r3, [r7, #12]
 800cfbc:	1ad3      	subs	r3, r2, r3
 800cfbe:	f241 3288 	movw	r2, #5000	; 0x1388
 800cfc2:	4293      	cmp	r3, r2
 800cfc4:	d901      	bls.n	800cfca <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_TIMEOUT;
 800cfc6:	2303      	movs	r3, #3
 800cfc8:	e03b      	b.n	800d042 <HAL_RCC_ClockConfig+0x256>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 800cfca:	4b20      	ldr	r3, [pc, #128]	; (800d04c <HAL_RCC_ClockConfig+0x260>)
 800cfcc:	681b      	ldr	r3, [r3, #0]
 800cfce:	f003 030f 	and.w	r3, r3, #15
 800cfd2:	683a      	ldr	r2, [r7, #0]
 800cfd4:	429a      	cmp	r2, r3
 800cfd6:	d1ed      	bne.n	800cfb4 <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800cfd8:	687b      	ldr	r3, [r7, #4]
 800cfda:	681b      	ldr	r3, [r3, #0]
 800cfdc:	f003 0304 	and.w	r3, r3, #4
 800cfe0:	2b00      	cmp	r3, #0
 800cfe2:	d008      	beq.n	800cff6 <HAL_RCC_ClockConfig+0x20a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800cfe4:	4b1a      	ldr	r3, [pc, #104]	; (800d050 <HAL_RCC_ClockConfig+0x264>)
 800cfe6:	689b      	ldr	r3, [r3, #8]
 800cfe8:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800cfec:	687b      	ldr	r3, [r7, #4]
 800cfee:	68db      	ldr	r3, [r3, #12]
 800cff0:	4917      	ldr	r1, [pc, #92]	; (800d050 <HAL_RCC_ClockConfig+0x264>)
 800cff2:	4313      	orrs	r3, r2
 800cff4:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800cff6:	687b      	ldr	r3, [r7, #4]
 800cff8:	681b      	ldr	r3, [r3, #0]
 800cffa:	f003 0308 	and.w	r3, r3, #8
 800cffe:	2b00      	cmp	r3, #0
 800d000:	d009      	beq.n	800d016 <HAL_RCC_ClockConfig+0x22a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800d002:	4b13      	ldr	r3, [pc, #76]	; (800d050 <HAL_RCC_ClockConfig+0x264>)
 800d004:	689b      	ldr	r3, [r3, #8]
 800d006:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800d00a:	687b      	ldr	r3, [r7, #4]
 800d00c:	691b      	ldr	r3, [r3, #16]
 800d00e:	00db      	lsls	r3, r3, #3
 800d010:	490f      	ldr	r1, [pc, #60]	; (800d050 <HAL_RCC_ClockConfig+0x264>)
 800d012:	4313      	orrs	r3, r2
 800d014:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 800d016:	f000 f825 	bl	800d064 <HAL_RCC_GetSysClockFreq>
 800d01a:	4601      	mov	r1, r0
 800d01c:	4b0c      	ldr	r3, [pc, #48]	; (800d050 <HAL_RCC_ClockConfig+0x264>)
 800d01e:	689b      	ldr	r3, [r3, #8]
 800d020:	091b      	lsrs	r3, r3, #4
 800d022:	f003 030f 	and.w	r3, r3, #15
 800d026:	4a0c      	ldr	r2, [pc, #48]	; (800d058 <HAL_RCC_ClockConfig+0x26c>)
 800d028:	5cd3      	ldrb	r3, [r2, r3]
 800d02a:	f003 031f 	and.w	r3, r3, #31
 800d02e:	fa21 f303 	lsr.w	r3, r1, r3
 800d032:	4a0a      	ldr	r2, [pc, #40]	; (800d05c <HAL_RCC_ClockConfig+0x270>)
 800d034:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 800d036:	4b0a      	ldr	r3, [pc, #40]	; (800d060 <HAL_RCC_ClockConfig+0x274>)
 800d038:	681b      	ldr	r3, [r3, #0]
 800d03a:	4618      	mov	r0, r3
 800d03c:	f7fb ff9c 	bl	8008f78 <HAL_InitTick>
 800d040:	4603      	mov	r3, r0
}
 800d042:	4618      	mov	r0, r3
 800d044:	3718      	adds	r7, #24
 800d046:	46bd      	mov	sp, r7
 800d048:	bd80      	pop	{r7, pc}
 800d04a:	bf00      	nop
 800d04c:	40022000 	.word	0x40022000
 800d050:	40021000 	.word	0x40021000
 800d054:	04c4b400 	.word	0x04c4b400
 800d058:	0801672c 	.word	0x0801672c
 800d05c:	20000eb0 	.word	0x20000eb0
 800d060:	20000eb4 	.word	0x20000eb4

0800d064 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800d064:	b480      	push	{r7}
 800d066:	b087      	sub	sp, #28
 800d068:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 800d06a:	4b2c      	ldr	r3, [pc, #176]	; (800d11c <HAL_RCC_GetSysClockFreq+0xb8>)
 800d06c:	689b      	ldr	r3, [r3, #8]
 800d06e:	f003 030c 	and.w	r3, r3, #12
 800d072:	2b04      	cmp	r3, #4
 800d074:	d102      	bne.n	800d07c <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 800d076:	4b2a      	ldr	r3, [pc, #168]	; (800d120 <HAL_RCC_GetSysClockFreq+0xbc>)
 800d078:	613b      	str	r3, [r7, #16]
 800d07a:	e047      	b.n	800d10c <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 800d07c:	4b27      	ldr	r3, [pc, #156]	; (800d11c <HAL_RCC_GetSysClockFreq+0xb8>)
 800d07e:	689b      	ldr	r3, [r3, #8]
 800d080:	f003 030c 	and.w	r3, r3, #12
 800d084:	2b08      	cmp	r3, #8
 800d086:	d102      	bne.n	800d08e <HAL_RCC_GetSysClockFreq+0x2a>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 800d088:	4b26      	ldr	r3, [pc, #152]	; (800d124 <HAL_RCC_GetSysClockFreq+0xc0>)
 800d08a:	613b      	str	r3, [r7, #16]
 800d08c:	e03e      	b.n	800d10c <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 800d08e:	4b23      	ldr	r3, [pc, #140]	; (800d11c <HAL_RCC_GetSysClockFreq+0xb8>)
 800d090:	689b      	ldr	r3, [r3, #8]
 800d092:	f003 030c 	and.w	r3, r3, #12
 800d096:	2b0c      	cmp	r3, #12
 800d098:	d136      	bne.n	800d108 <HAL_RCC_GetSysClockFreq+0xa4>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 800d09a:	4b20      	ldr	r3, [pc, #128]	; (800d11c <HAL_RCC_GetSysClockFreq+0xb8>)
 800d09c:	68db      	ldr	r3, [r3, #12]
 800d09e:	f003 0303 	and.w	r3, r3, #3
 800d0a2:	60fb      	str	r3, [r7, #12]
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 800d0a4:	4b1d      	ldr	r3, [pc, #116]	; (800d11c <HAL_RCC_GetSysClockFreq+0xb8>)
 800d0a6:	68db      	ldr	r3, [r3, #12]
 800d0a8:	091b      	lsrs	r3, r3, #4
 800d0aa:	f003 030f 	and.w	r3, r3, #15
 800d0ae:	3301      	adds	r3, #1
 800d0b0:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 800d0b2:	68fb      	ldr	r3, [r7, #12]
 800d0b4:	2b03      	cmp	r3, #3
 800d0b6:	d10c      	bne.n	800d0d2 <HAL_RCC_GetSysClockFreq+0x6e>
    {
    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 800d0b8:	4a1a      	ldr	r2, [pc, #104]	; (800d124 <HAL_RCC_GetSysClockFreq+0xc0>)
 800d0ba:	68bb      	ldr	r3, [r7, #8]
 800d0bc:	fbb2 f3f3 	udiv	r3, r2, r3
 800d0c0:	4a16      	ldr	r2, [pc, #88]	; (800d11c <HAL_RCC_GetSysClockFreq+0xb8>)
 800d0c2:	68d2      	ldr	r2, [r2, #12]
 800d0c4:	0a12      	lsrs	r2, r2, #8
 800d0c6:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 800d0ca:	fb02 f303 	mul.w	r3, r2, r3
 800d0ce:	617b      	str	r3, [r7, #20]
      break;
 800d0d0:	e00c      	b.n	800d0ec <HAL_RCC_GetSysClockFreq+0x88>

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    default:
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 800d0d2:	4a13      	ldr	r2, [pc, #76]	; (800d120 <HAL_RCC_GetSysClockFreq+0xbc>)
 800d0d4:	68bb      	ldr	r3, [r7, #8]
 800d0d6:	fbb2 f3f3 	udiv	r3, r2, r3
 800d0da:	4a10      	ldr	r2, [pc, #64]	; (800d11c <HAL_RCC_GetSysClockFreq+0xb8>)
 800d0dc:	68d2      	ldr	r2, [r2, #12]
 800d0de:	0a12      	lsrs	r2, r2, #8
 800d0e0:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 800d0e4:	fb02 f303 	mul.w	r3, r2, r3
 800d0e8:	617b      	str	r3, [r7, #20]
      break;
 800d0ea:	bf00      	nop
    }
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 800d0ec:	4b0b      	ldr	r3, [pc, #44]	; (800d11c <HAL_RCC_GetSysClockFreq+0xb8>)
 800d0ee:	68db      	ldr	r3, [r3, #12]
 800d0f0:	0e5b      	lsrs	r3, r3, #25
 800d0f2:	f003 0303 	and.w	r3, r3, #3
 800d0f6:	3301      	adds	r3, #1
 800d0f8:	005b      	lsls	r3, r3, #1
 800d0fa:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco/pllr;
 800d0fc:	697a      	ldr	r2, [r7, #20]
 800d0fe:	687b      	ldr	r3, [r7, #4]
 800d100:	fbb2 f3f3 	udiv	r3, r2, r3
 800d104:	613b      	str	r3, [r7, #16]
 800d106:	e001      	b.n	800d10c <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else
  {
    sysclockfreq = 0U;
 800d108:	2300      	movs	r3, #0
 800d10a:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 800d10c:	693b      	ldr	r3, [r7, #16]
}
 800d10e:	4618      	mov	r0, r3
 800d110:	371c      	adds	r7, #28
 800d112:	46bd      	mov	sp, r7
 800d114:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d118:	4770      	bx	lr
 800d11a:	bf00      	nop
 800d11c:	40021000 	.word	0x40021000
 800d120:	00f42400 	.word	0x00f42400
 800d124:	007a1200 	.word	0x007a1200

0800d128 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800d128:	b480      	push	{r7}
 800d12a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800d12c:	4b03      	ldr	r3, [pc, #12]	; (800d13c <HAL_RCC_GetHCLKFreq+0x14>)
 800d12e:	681b      	ldr	r3, [r3, #0]
}
 800d130:	4618      	mov	r0, r3
 800d132:	46bd      	mov	sp, r7
 800d134:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d138:	4770      	bx	lr
 800d13a:	bf00      	nop
 800d13c:	20000eb0 	.word	0x20000eb0

0800d140 <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 800d140:	b480      	push	{r7}
 800d142:	b087      	sub	sp, #28
 800d144:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 800d146:	4b1e      	ldr	r3, [pc, #120]	; (800d1c0 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 800d148:	68db      	ldr	r3, [r3, #12]
 800d14a:	f003 0303 	and.w	r3, r3, #3
 800d14e:	613b      	str	r3, [r7, #16]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 800d150:	4b1b      	ldr	r3, [pc, #108]	; (800d1c0 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 800d152:	68db      	ldr	r3, [r3, #12]
 800d154:	091b      	lsrs	r3, r3, #4
 800d156:	f003 030f 	and.w	r3, r3, #15
 800d15a:	3301      	adds	r3, #1
 800d15c:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 800d15e:	693b      	ldr	r3, [r7, #16]
 800d160:	2b03      	cmp	r3, #3
 800d162:	d10c      	bne.n	800d17e <RCC_GetSysClockFreqFromPLLSource+0x3e>
  {
  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 800d164:	4a17      	ldr	r2, [pc, #92]	; (800d1c4 <RCC_GetSysClockFreqFromPLLSource+0x84>)
 800d166:	68fb      	ldr	r3, [r7, #12]
 800d168:	fbb2 f3f3 	udiv	r3, r2, r3
 800d16c:	4a14      	ldr	r2, [pc, #80]	; (800d1c0 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 800d16e:	68d2      	ldr	r2, [r2, #12]
 800d170:	0a12      	lsrs	r2, r2, #8
 800d172:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 800d176:	fb02 f303 	mul.w	r3, r2, r3
 800d17a:	617b      	str	r3, [r7, #20]
    break;
 800d17c:	e00c      	b.n	800d198 <RCC_GetSysClockFreqFromPLLSource+0x58>

  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
  default:
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 800d17e:	4a12      	ldr	r2, [pc, #72]	; (800d1c8 <RCC_GetSysClockFreqFromPLLSource+0x88>)
 800d180:	68fb      	ldr	r3, [r7, #12]
 800d182:	fbb2 f3f3 	udiv	r3, r2, r3
 800d186:	4a0e      	ldr	r2, [pc, #56]	; (800d1c0 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 800d188:	68d2      	ldr	r2, [r2, #12]
 800d18a:	0a12      	lsrs	r2, r2, #8
 800d18c:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 800d190:	fb02 f303 	mul.w	r3, r2, r3
 800d194:	617b      	str	r3, [r7, #20]
    break;
 800d196:	bf00      	nop
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 800d198:	4b09      	ldr	r3, [pc, #36]	; (800d1c0 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 800d19a:	68db      	ldr	r3, [r3, #12]
 800d19c:	0e5b      	lsrs	r3, r3, #25
 800d19e:	f003 0303 	and.w	r3, r3, #3
 800d1a2:	3301      	adds	r3, #1
 800d1a4:	005b      	lsls	r3, r3, #1
 800d1a6:	60bb      	str	r3, [r7, #8]
  sysclockfreq = pllvco/pllr;
 800d1a8:	697a      	ldr	r2, [r7, #20]
 800d1aa:	68bb      	ldr	r3, [r7, #8]
 800d1ac:	fbb2 f3f3 	udiv	r3, r2, r3
 800d1b0:	607b      	str	r3, [r7, #4]

  return sysclockfreq;
 800d1b2:	687b      	ldr	r3, [r7, #4]
}
 800d1b4:	4618      	mov	r0, r3
 800d1b6:	371c      	adds	r7, #28
 800d1b8:	46bd      	mov	sp, r7
 800d1ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d1be:	4770      	bx	lr
 800d1c0:	40021000 	.word	0x40021000
 800d1c4:	007a1200 	.word	0x007a1200
 800d1c8:	00f42400 	.word	0x00f42400

0800d1cc <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800d1cc:	b580      	push	{r7, lr}
 800d1ce:	b086      	sub	sp, #24
 800d1d0:	af00      	add	r7, sp, #0
 800d1d2:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 800d1d4:	2300      	movs	r3, #0
 800d1d6:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 800d1d8:	2300      	movs	r3, #0
 800d1da:	74bb      	strb	r3, [r7, #18]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 800d1dc:	687b      	ldr	r3, [r7, #4]
 800d1de:	681b      	ldr	r3, [r3, #0]
 800d1e0:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800d1e4:	2b00      	cmp	r3, #0
 800d1e6:	f000 8098 	beq.w	800d31a <HAL_RCCEx_PeriphCLKConfig+0x14e>
  {
    FlagStatus       pwrclkchanged = RESET;
 800d1ea:	2300      	movs	r3, #0
 800d1ec:	747b      	strb	r3, [r7, #17]
    
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800d1ee:	4b43      	ldr	r3, [pc, #268]	; (800d2fc <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800d1f0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800d1f2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800d1f6:	2b00      	cmp	r3, #0
 800d1f8:	d10d      	bne.n	800d216 <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800d1fa:	4b40      	ldr	r3, [pc, #256]	; (800d2fc <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800d1fc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800d1fe:	4a3f      	ldr	r2, [pc, #252]	; (800d2fc <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800d200:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800d204:	6593      	str	r3, [r2, #88]	; 0x58
 800d206:	4b3d      	ldr	r3, [pc, #244]	; (800d2fc <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800d208:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800d20a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800d20e:	60bb      	str	r3, [r7, #8]
 800d210:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800d212:	2301      	movs	r3, #1
 800d214:	747b      	strb	r3, [r7, #17]
    }
      
    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800d216:	4b3a      	ldr	r3, [pc, #232]	; (800d300 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 800d218:	681b      	ldr	r3, [r3, #0]
 800d21a:	4a39      	ldr	r2, [pc, #228]	; (800d300 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 800d21c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800d220:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800d222:	f7fb fef5 	bl	8009010 <HAL_GetTick>
 800d226:	60f8      	str	r0, [r7, #12]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800d228:	e009      	b.n	800d23e <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800d22a:	f7fb fef1 	bl	8009010 <HAL_GetTick>
 800d22e:	4602      	mov	r2, r0
 800d230:	68fb      	ldr	r3, [r7, #12]
 800d232:	1ad3      	subs	r3, r2, r3
 800d234:	2b02      	cmp	r3, #2
 800d236:	d902      	bls.n	800d23e <HAL_RCCEx_PeriphCLKConfig+0x72>
      {
        ret = HAL_TIMEOUT;
 800d238:	2303      	movs	r3, #3
 800d23a:	74fb      	strb	r3, [r7, #19]
        break;
 800d23c:	e005      	b.n	800d24a <HAL_RCCEx_PeriphCLKConfig+0x7e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800d23e:	4b30      	ldr	r3, [pc, #192]	; (800d300 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 800d240:	681b      	ldr	r3, [r3, #0]
 800d242:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800d246:	2b00      	cmp	r3, #0
 800d248:	d0ef      	beq.n	800d22a <HAL_RCCEx_PeriphCLKConfig+0x5e>
      }
    }

    if(ret == HAL_OK)
 800d24a:	7cfb      	ldrb	r3, [r7, #19]
 800d24c:	2b00      	cmp	r3, #0
 800d24e:	d159      	bne.n	800d304 <HAL_RCCEx_PeriphCLKConfig+0x138>
    { 
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 800d250:	4b2a      	ldr	r3, [pc, #168]	; (800d2fc <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800d252:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800d256:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800d25a:	617b      	str	r3, [r7, #20]
      
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 800d25c:	697b      	ldr	r3, [r7, #20]
 800d25e:	2b00      	cmp	r3, #0
 800d260:	d01e      	beq.n	800d2a0 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 800d262:	687b      	ldr	r3, [r7, #4]
 800d264:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800d266:	697a      	ldr	r2, [r7, #20]
 800d268:	429a      	cmp	r2, r3
 800d26a:	d019      	beq.n	800d2a0 <HAL_RCCEx_PeriphCLKConfig+0xd4>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 800d26c:	4b23      	ldr	r3, [pc, #140]	; (800d2fc <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800d26e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800d272:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800d276:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 800d278:	4b20      	ldr	r3, [pc, #128]	; (800d2fc <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800d27a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800d27e:	4a1f      	ldr	r2, [pc, #124]	; (800d2fc <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800d280:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800d284:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 800d288:	4b1c      	ldr	r3, [pc, #112]	; (800d2fc <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800d28a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800d28e:	4a1b      	ldr	r2, [pc, #108]	; (800d2fc <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800d290:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800d294:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 800d298:	4a18      	ldr	r2, [pc, #96]	; (800d2fc <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800d29a:	697b      	ldr	r3, [r7, #20]
 800d29c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 800d2a0:	697b      	ldr	r3, [r7, #20]
 800d2a2:	f003 0301 	and.w	r3, r3, #1
 800d2a6:	2b00      	cmp	r3, #0
 800d2a8:	d016      	beq.n	800d2d8 <HAL_RCCEx_PeriphCLKConfig+0x10c>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800d2aa:	f7fb feb1 	bl	8009010 <HAL_GetTick>
 800d2ae:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800d2b0:	e00b      	b.n	800d2ca <HAL_RCCEx_PeriphCLKConfig+0xfe>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800d2b2:	f7fb fead 	bl	8009010 <HAL_GetTick>
 800d2b6:	4602      	mov	r2, r0
 800d2b8:	68fb      	ldr	r3, [r7, #12]
 800d2ba:	1ad3      	subs	r3, r2, r3
 800d2bc:	f241 3288 	movw	r2, #5000	; 0x1388
 800d2c0:	4293      	cmp	r3, r2
 800d2c2:	d902      	bls.n	800d2ca <HAL_RCCEx_PeriphCLKConfig+0xfe>
          {
            ret = HAL_TIMEOUT;
 800d2c4:	2303      	movs	r3, #3
 800d2c6:	74fb      	strb	r3, [r7, #19]
            break;
 800d2c8:	e006      	b.n	800d2d8 <HAL_RCCEx_PeriphCLKConfig+0x10c>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800d2ca:	4b0c      	ldr	r3, [pc, #48]	; (800d2fc <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800d2cc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800d2d0:	f003 0302 	and.w	r3, r3, #2
 800d2d4:	2b00      	cmp	r3, #0
 800d2d6:	d0ec      	beq.n	800d2b2 <HAL_RCCEx_PeriphCLKConfig+0xe6>
          }
        }
      }
      
      if(ret == HAL_OK)
 800d2d8:	7cfb      	ldrb	r3, [r7, #19]
 800d2da:	2b00      	cmp	r3, #0
 800d2dc:	d10b      	bne.n	800d2f6 <HAL_RCCEx_PeriphCLKConfig+0x12a>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800d2de:	4b07      	ldr	r3, [pc, #28]	; (800d2fc <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800d2e0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800d2e4:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800d2e8:	687b      	ldr	r3, [r7, #4]
 800d2ea:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800d2ec:	4903      	ldr	r1, [pc, #12]	; (800d2fc <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800d2ee:	4313      	orrs	r3, r2
 800d2f0:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 800d2f4:	e008      	b.n	800d308 <HAL_RCCEx_PeriphCLKConfig+0x13c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 800d2f6:	7cfb      	ldrb	r3, [r7, #19]
 800d2f8:	74bb      	strb	r3, [r7, #18]
 800d2fa:	e005      	b.n	800d308 <HAL_RCCEx_PeriphCLKConfig+0x13c>
 800d2fc:	40021000 	.word	0x40021000
 800d300:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 800d304:	7cfb      	ldrb	r3, [r7, #19]
 800d306:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800d308:	7c7b      	ldrb	r3, [r7, #17]
 800d30a:	2b01      	cmp	r3, #1
 800d30c:	d105      	bne.n	800d31a <HAL_RCCEx_PeriphCLKConfig+0x14e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800d30e:	4baf      	ldr	r3, [pc, #700]	; (800d5cc <HAL_RCCEx_PeriphCLKConfig+0x400>)
 800d310:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800d312:	4aae      	ldr	r2, [pc, #696]	; (800d5cc <HAL_RCCEx_PeriphCLKConfig+0x400>)
 800d314:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800d318:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800d31a:	687b      	ldr	r3, [r7, #4]
 800d31c:	681b      	ldr	r3, [r3, #0]
 800d31e:	f003 0301 	and.w	r3, r3, #1
 800d322:	2b00      	cmp	r3, #0
 800d324:	d00a      	beq.n	800d33c <HAL_RCCEx_PeriphCLKConfig+0x170>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800d326:	4ba9      	ldr	r3, [pc, #676]	; (800d5cc <HAL_RCCEx_PeriphCLKConfig+0x400>)
 800d328:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800d32c:	f023 0203 	bic.w	r2, r3, #3
 800d330:	687b      	ldr	r3, [r7, #4]
 800d332:	685b      	ldr	r3, [r3, #4]
 800d334:	49a5      	ldr	r1, [pc, #660]	; (800d5cc <HAL_RCCEx_PeriphCLKConfig+0x400>)
 800d336:	4313      	orrs	r3, r2
 800d338:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 800d33c:	687b      	ldr	r3, [r7, #4]
 800d33e:	681b      	ldr	r3, [r3, #0]
 800d340:	f003 0302 	and.w	r3, r3, #2
 800d344:	2b00      	cmp	r3, #0
 800d346:	d00a      	beq.n	800d35e <HAL_RCCEx_PeriphCLKConfig+0x192>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 800d348:	4ba0      	ldr	r3, [pc, #640]	; (800d5cc <HAL_RCCEx_PeriphCLKConfig+0x400>)
 800d34a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800d34e:	f023 020c 	bic.w	r2, r3, #12
 800d352:	687b      	ldr	r3, [r7, #4]
 800d354:	689b      	ldr	r3, [r3, #8]
 800d356:	499d      	ldr	r1, [pc, #628]	; (800d5cc <HAL_RCCEx_PeriphCLKConfig+0x400>)
 800d358:	4313      	orrs	r3, r2
 800d35a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 800d35e:	687b      	ldr	r3, [r7, #4]
 800d360:	681b      	ldr	r3, [r3, #0]
 800d362:	f003 0304 	and.w	r3, r3, #4
 800d366:	2b00      	cmp	r3, #0
 800d368:	d00a      	beq.n	800d380 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 800d36a:	4b98      	ldr	r3, [pc, #608]	; (800d5cc <HAL_RCCEx_PeriphCLKConfig+0x400>)
 800d36c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800d370:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 800d374:	687b      	ldr	r3, [r7, #4]
 800d376:	68db      	ldr	r3, [r3, #12]
 800d378:	4994      	ldr	r1, [pc, #592]	; (800d5cc <HAL_RCCEx_PeriphCLKConfig+0x400>)
 800d37a:	4313      	orrs	r3, r2
 800d37c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(UART4)
  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 800d380:	687b      	ldr	r3, [r7, #4]
 800d382:	681b      	ldr	r3, [r3, #0]
 800d384:	f003 0308 	and.w	r3, r3, #8
 800d388:	2b00      	cmp	r3, #0
 800d38a:	d00a      	beq.n	800d3a2 <HAL_RCCEx_PeriphCLKConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 800d38c:	4b8f      	ldr	r3, [pc, #572]	; (800d5cc <HAL_RCCEx_PeriphCLKConfig+0x400>)
 800d38e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800d392:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 800d396:	687b      	ldr	r3, [r7, #4]
 800d398:	691b      	ldr	r3, [r3, #16]
 800d39a:	498c      	ldr	r1, [pc, #560]	; (800d5cc <HAL_RCCEx_PeriphCLKConfig+0x400>)
 800d39c:	4313      	orrs	r3, r2
 800d39e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 800d3a2:	687b      	ldr	r3, [r7, #4]
 800d3a4:	681b      	ldr	r3, [r3, #0]
 800d3a6:	f003 0310 	and.w	r3, r3, #16
 800d3aa:	2b00      	cmp	r3, #0
 800d3ac:	d00a      	beq.n	800d3c4 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 800d3ae:	4b87      	ldr	r3, [pc, #540]	; (800d5cc <HAL_RCCEx_PeriphCLKConfig+0x400>)
 800d3b0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800d3b4:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800d3b8:	687b      	ldr	r3, [r7, #4]
 800d3ba:	695b      	ldr	r3, [r3, #20]
 800d3bc:	4983      	ldr	r1, [pc, #524]	; (800d5cc <HAL_RCCEx_PeriphCLKConfig+0x400>)
 800d3be:	4313      	orrs	r3, r2
 800d3c0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800d3c4:	687b      	ldr	r3, [r7, #4]
 800d3c6:	681b      	ldr	r3, [r3, #0]
 800d3c8:	f003 0320 	and.w	r3, r3, #32
 800d3cc:	2b00      	cmp	r3, #0
 800d3ce:	d00a      	beq.n	800d3e6 <HAL_RCCEx_PeriphCLKConfig+0x21a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800d3d0:	4b7e      	ldr	r3, [pc, #504]	; (800d5cc <HAL_RCCEx_PeriphCLKConfig+0x400>)
 800d3d2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800d3d6:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 800d3da:	687b      	ldr	r3, [r7, #4]
 800d3dc:	699b      	ldr	r3, [r3, #24]
 800d3de:	497b      	ldr	r1, [pc, #492]	; (800d5cc <HAL_RCCEx_PeriphCLKConfig+0x400>)
 800d3e0:	4313      	orrs	r3, r2
 800d3e2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800d3e6:	687b      	ldr	r3, [r7, #4]
 800d3e8:	681b      	ldr	r3, [r3, #0]
 800d3ea:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800d3ee:	2b00      	cmp	r3, #0
 800d3f0:	d00a      	beq.n	800d408 <HAL_RCCEx_PeriphCLKConfig+0x23c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800d3f2:	4b76      	ldr	r3, [pc, #472]	; (800d5cc <HAL_RCCEx_PeriphCLKConfig+0x400>)
 800d3f4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800d3f8:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 800d3fc:	687b      	ldr	r3, [r7, #4]
 800d3fe:	69db      	ldr	r3, [r3, #28]
 800d400:	4972      	ldr	r1, [pc, #456]	; (800d5cc <HAL_RCCEx_PeriphCLKConfig+0x400>)
 800d402:	4313      	orrs	r3, r2
 800d404:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 800d408:	687b      	ldr	r3, [r7, #4]
 800d40a:	681b      	ldr	r3, [r3, #0]
 800d40c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800d410:	2b00      	cmp	r3, #0
 800d412:	d00a      	beq.n	800d42a <HAL_RCCEx_PeriphCLKConfig+0x25e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 800d414:	4b6d      	ldr	r3, [pc, #436]	; (800d5cc <HAL_RCCEx_PeriphCLKConfig+0x400>)
 800d416:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800d41a:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 800d41e:	687b      	ldr	r3, [r7, #4]
 800d420:	6a1b      	ldr	r3, [r3, #32]
 800d422:	496a      	ldr	r1, [pc, #424]	; (800d5cc <HAL_RCCEx_PeriphCLKConfig+0x400>)
 800d424:	4313      	orrs	r3, r2
 800d426:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 800d42a:	687b      	ldr	r3, [r7, #4]
 800d42c:	681b      	ldr	r3, [r3, #0]
 800d42e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800d432:	2b00      	cmp	r3, #0
 800d434:	d00a      	beq.n	800d44c <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 800d436:	4b65      	ldr	r3, [pc, #404]	; (800d5cc <HAL_RCCEx_PeriphCLKConfig+0x400>)
 800d438:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800d43c:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 800d440:	687b      	ldr	r3, [r7, #4]
 800d442:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d444:	4961      	ldr	r1, [pc, #388]	; (800d5cc <HAL_RCCEx_PeriphCLKConfig+0x400>)
 800d446:	4313      	orrs	r3, r2
 800d448:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C4)  

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 800d44c:	687b      	ldr	r3, [r7, #4]
 800d44e:	681b      	ldr	r3, [r3, #0]
 800d450:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800d454:	2b00      	cmp	r3, #0
 800d456:	d00a      	beq.n	800d46e <HAL_RCCEx_PeriphCLKConfig+0x2a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 800d458:	4b5c      	ldr	r3, [pc, #368]	; (800d5cc <HAL_RCCEx_PeriphCLKConfig+0x400>)
 800d45a:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800d45e:	f023 0203 	bic.w	r2, r3, #3
 800d462:	687b      	ldr	r3, [r7, #4]
 800d464:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d466:	4959      	ldr	r1, [pc, #356]	; (800d5cc <HAL_RCCEx_PeriphCLKConfig+0x400>)
 800d468:	4313      	orrs	r3, r2
 800d46a:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
  }

#endif /* I2C4 */

  /*-------------------------- LPTIM1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 800d46e:	687b      	ldr	r3, [r7, #4]
 800d470:	681b      	ldr	r3, [r3, #0]
 800d472:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800d476:	2b00      	cmp	r3, #0
 800d478:	d00a      	beq.n	800d490 <HAL_RCCEx_PeriphCLKConfig+0x2c4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800d47a:	4b54      	ldr	r3, [pc, #336]	; (800d5cc <HAL_RCCEx_PeriphCLKConfig+0x400>)
 800d47c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800d480:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 800d484:	687b      	ldr	r3, [r7, #4]
 800d486:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d488:	4950      	ldr	r1, [pc, #320]	; (800d5cc <HAL_RCCEx_PeriphCLKConfig+0x400>)
 800d48a:	4313      	orrs	r3, r2
 800d48c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 800d490:	687b      	ldr	r3, [r7, #4]
 800d492:	681b      	ldr	r3, [r3, #0]
 800d494:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800d498:	2b00      	cmp	r3, #0
 800d49a:	d015      	beq.n	800d4c8 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure the SAI1 interface clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800d49c:	4b4b      	ldr	r3, [pc, #300]	; (800d5cc <HAL_RCCEx_PeriphCLKConfig+0x400>)
 800d49e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800d4a2:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800d4a6:	687b      	ldr	r3, [r7, #4]
 800d4a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d4aa:	4948      	ldr	r1, [pc, #288]	; (800d5cc <HAL_RCCEx_PeriphCLKConfig+0x400>)
 800d4ac:	4313      	orrs	r3, r2
 800d4ae:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLL)
 800d4b2:	687b      	ldr	r3, [r7, #4]
 800d4b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d4b6:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800d4ba:	d105      	bne.n	800d4c8 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800d4bc:	4b43      	ldr	r3, [pc, #268]	; (800d5cc <HAL_RCCEx_PeriphCLKConfig+0x400>)
 800d4be:	68db      	ldr	r3, [r3, #12]
 800d4c0:	4a42      	ldr	r2, [pc, #264]	; (800d5cc <HAL_RCCEx_PeriphCLKConfig+0x400>)
 800d4c2:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800d4c6:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- I2S clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 800d4c8:	687b      	ldr	r3, [r7, #4]
 800d4ca:	681b      	ldr	r3, [r3, #0]
 800d4cc:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800d4d0:	2b00      	cmp	r3, #0
 800d4d2:	d015      	beq.n	800d500 <HAL_RCCEx_PeriphCLKConfig+0x334>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure the I2S interface clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 800d4d4:	4b3d      	ldr	r3, [pc, #244]	; (800d5cc <HAL_RCCEx_PeriphCLKConfig+0x400>)
 800d4d6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800d4da:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 800d4de:	687b      	ldr	r3, [r7, #4]
 800d4e0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d4e2:	493a      	ldr	r1, [pc, #232]	; (800d5cc <HAL_RCCEx_PeriphCLKConfig+0x400>)
 800d4e4:	4313      	orrs	r3, r2
 800d4e6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLL)
 800d4ea:	687b      	ldr	r3, [r7, #4]
 800d4ec:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d4ee:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800d4f2:	d105      	bne.n	800d500 <HAL_RCCEx_PeriphCLKConfig+0x334>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800d4f4:	4b35      	ldr	r3, [pc, #212]	; (800d5cc <HAL_RCCEx_PeriphCLKConfig+0x400>)
 800d4f6:	68db      	ldr	r3, [r3, #12]
 800d4f8:	4a34      	ldr	r2, [pc, #208]	; (800d5cc <HAL_RCCEx_PeriphCLKConfig+0x400>)
 800d4fa:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800d4fe:	60d3      	str	r3, [r2, #12]
    }
  }

#if defined(FDCAN1)
  /*-------------------------- FDCAN clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 800d500:	687b      	ldr	r3, [r7, #4]
 800d502:	681b      	ldr	r3, [r3, #0]
 800d504:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800d508:	2b00      	cmp	r3, #0
 800d50a:	d015      	beq.n	800d538 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN interface clock source */
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 800d50c:	4b2f      	ldr	r3, [pc, #188]	; (800d5cc <HAL_RCCEx_PeriphCLKConfig+0x400>)
 800d50e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800d512:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 800d516:	687b      	ldr	r3, [r7, #4]
 800d518:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d51a:	492c      	ldr	r1, [pc, #176]	; (800d5cc <HAL_RCCEx_PeriphCLKConfig+0x400>)
 800d51c:	4313      	orrs	r3, r2
 800d51e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 800d522:	687b      	ldr	r3, [r7, #4]
 800d524:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d526:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800d52a:	d105      	bne.n	800d538 <HAL_RCCEx_PeriphCLKConfig+0x36c>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800d52c:	4b27      	ldr	r3, [pc, #156]	; (800d5cc <HAL_RCCEx_PeriphCLKConfig+0x400>)
 800d52e:	68db      	ldr	r3, [r3, #12]
 800d530:	4a26      	ldr	r2, [pc, #152]	; (800d5cc <HAL_RCCEx_PeriphCLKConfig+0x400>)
 800d532:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800d536:	60d3      	str	r3, [r2, #12]
#endif /* FDCAN1 */

#if defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 800d538:	687b      	ldr	r3, [r7, #4]
 800d53a:	681b      	ldr	r3, [r3, #0]
 800d53c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800d540:	2b00      	cmp	r3, #0
 800d542:	d015      	beq.n	800d570 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800d544:	4b21      	ldr	r3, [pc, #132]	; (800d5cc <HAL_RCCEx_PeriphCLKConfig+0x400>)
 800d546:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800d54a:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 800d54e:	687b      	ldr	r3, [r7, #4]
 800d550:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800d552:	491e      	ldr	r1, [pc, #120]	; (800d5cc <HAL_RCCEx_PeriphCLKConfig+0x400>)
 800d554:	4313      	orrs	r3, r2
 800d556:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 800d55a:	687b      	ldr	r3, [r7, #4]
 800d55c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800d55e:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800d562:	d105      	bne.n	800d570 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800d564:	4b19      	ldr	r3, [pc, #100]	; (800d5cc <HAL_RCCEx_PeriphCLKConfig+0x400>)
 800d566:	68db      	ldr	r3, [r3, #12]
 800d568:	4a18      	ldr	r2, [pc, #96]	; (800d5cc <HAL_RCCEx_PeriphCLKConfig+0x400>)
 800d56a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800d56e:	60d3      	str	r3, [r2, #12]
  }

#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 800d570:	687b      	ldr	r3, [r7, #4]
 800d572:	681b      	ldr	r3, [r3, #0]
 800d574:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800d578:	2b00      	cmp	r3, #0
 800d57a:	d015      	beq.n	800d5a8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 800d57c:	4b13      	ldr	r3, [pc, #76]	; (800d5cc <HAL_RCCEx_PeriphCLKConfig+0x400>)
 800d57e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800d582:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 800d586:	687b      	ldr	r3, [r7, #4]
 800d588:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d58a:	4910      	ldr	r1, [pc, #64]	; (800d5cc <HAL_RCCEx_PeriphCLKConfig+0x400>)
 800d58c:	4313      	orrs	r3, r2
 800d58e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 800d592:	687b      	ldr	r3, [r7, #4]
 800d594:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d596:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800d59a:	d105      	bne.n	800d5a8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800d59c:	4b0b      	ldr	r3, [pc, #44]	; (800d5cc <HAL_RCCEx_PeriphCLKConfig+0x400>)
 800d59e:	68db      	ldr	r3, [r3, #12]
 800d5a0:	4a0a      	ldr	r2, [pc, #40]	; (800d5cc <HAL_RCCEx_PeriphCLKConfig+0x400>)
 800d5a2:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800d5a6:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- ADC12 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 800d5a8:	687b      	ldr	r3, [r7, #4]
 800d5aa:	681b      	ldr	r3, [r3, #0]
 800d5ac:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800d5b0:	2b00      	cmp	r3, #0
 800d5b2:	d018      	beq.n	800d5e6 <HAL_RCCEx_PeriphCLKConfig+0x41a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12CLKSOURCE(PeriphClkInit->Adc12ClockSelection));

    /* Configure the ADC12 interface clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 800d5b4:	4b05      	ldr	r3, [pc, #20]	; (800d5cc <HAL_RCCEx_PeriphCLKConfig+0x400>)
 800d5b6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800d5ba:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 800d5be:	687b      	ldr	r3, [r7, #4]
 800d5c0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800d5c2:	4902      	ldr	r1, [pc, #8]	; (800d5cc <HAL_RCCEx_PeriphCLKConfig+0x400>)
 800d5c4:	4313      	orrs	r3, r2
 800d5c6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 800d5ca:	e001      	b.n	800d5d0 <HAL_RCCEx_PeriphCLKConfig+0x404>
 800d5cc:	40021000 	.word	0x40021000
    
    if(PeriphClkInit->Adc12ClockSelection == RCC_ADC12CLKSOURCE_PLL)
 800d5d0:	687b      	ldr	r3, [r7, #4]
 800d5d2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800d5d4:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800d5d8:	d105      	bne.n	800d5e6 <HAL_RCCEx_PeriphCLKConfig+0x41a>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 800d5da:	4b21      	ldr	r3, [pc, #132]	; (800d660 <HAL_RCCEx_PeriphCLKConfig+0x494>)
 800d5dc:	68db      	ldr	r3, [r3, #12]
 800d5de:	4a20      	ldr	r2, [pc, #128]	; (800d660 <HAL_RCCEx_PeriphCLKConfig+0x494>)
 800d5e0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800d5e4:	60d3      	str	r3, [r2, #12]
    }
  }
  
#if defined(ADC345_COMMON)
  /*-------------------------- ADC345 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC345) == RCC_PERIPHCLK_ADC345)
 800d5e6:	687b      	ldr	r3, [r7, #4]
 800d5e8:	681b      	ldr	r3, [r3, #0]
 800d5ea:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800d5ee:	2b00      	cmp	r3, #0
 800d5f0:	d015      	beq.n	800d61e <HAL_RCCEx_PeriphCLKConfig+0x452>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC345CLKSOURCE(PeriphClkInit->Adc345ClockSelection));

    /* Configure the ADC345 interface clock source */
    __HAL_RCC_ADC345_CONFIG(PeriphClkInit->Adc345ClockSelection);
 800d5f2:	4b1b      	ldr	r3, [pc, #108]	; (800d660 <HAL_RCCEx_PeriphCLKConfig+0x494>)
 800d5f4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800d5f8:	f023 4240 	bic.w	r2, r3, #3221225472	; 0xc0000000
 800d5fc:	687b      	ldr	r3, [r7, #4]
 800d5fe:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800d600:	4917      	ldr	r1, [pc, #92]	; (800d660 <HAL_RCCEx_PeriphCLKConfig+0x494>)
 800d602:	4313      	orrs	r3, r2
 800d604:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Adc345ClockSelection == RCC_ADC345CLKSOURCE_PLL)
 800d608:	687b      	ldr	r3, [r7, #4]
 800d60a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800d60c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800d610:	d105      	bne.n	800d61e <HAL_RCCEx_PeriphCLKConfig+0x452>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 800d612:	4b13      	ldr	r3, [pc, #76]	; (800d660 <HAL_RCCEx_PeriphCLKConfig+0x494>)
 800d614:	68db      	ldr	r3, [r3, #12]
 800d616:	4a12      	ldr	r2, [pc, #72]	; (800d660 <HAL_RCCEx_PeriphCLKConfig+0x494>)
 800d618:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800d61c:	60d3      	str	r3, [r2, #12]
#endif /* ADC345_COMMON */

#if defined(QUADSPI)

  /*-------------------------- QuadSPIx clock source configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 800d61e:	687b      	ldr	r3, [r7, #4]
 800d620:	681b      	ldr	r3, [r3, #0]
 800d622:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800d626:	2b00      	cmp	r3, #0
 800d628:	d015      	beq.n	800d656 <HAL_RCCEx_PeriphCLKConfig+0x48a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_QSPICLKSOURCE(PeriphClkInit->QspiClockSelection));

    /* Configure the QuadSPI clock source */
    __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 800d62a:	4b0d      	ldr	r3, [pc, #52]	; (800d660 <HAL_RCCEx_PeriphCLKConfig+0x494>)
 800d62c:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800d630:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800d634:	687b      	ldr	r3, [r7, #4]
 800d636:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800d638:	4909      	ldr	r1, [pc, #36]	; (800d660 <HAL_RCCEx_PeriphCLKConfig+0x494>)
 800d63a:	4313      	orrs	r3, r2
 800d63c:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c

    if(PeriphClkInit->QspiClockSelection == RCC_QSPICLKSOURCE_PLL)
 800d640:	687b      	ldr	r3, [r7, #4]
 800d642:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800d644:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800d648:	d105      	bne.n	800d656 <HAL_RCCEx_PeriphCLKConfig+0x48a>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800d64a:	4b05      	ldr	r3, [pc, #20]	; (800d660 <HAL_RCCEx_PeriphCLKConfig+0x494>)
 800d64c:	68db      	ldr	r3, [r3, #12]
 800d64e:	4a04      	ldr	r2, [pc, #16]	; (800d660 <HAL_RCCEx_PeriphCLKConfig+0x494>)
 800d650:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800d654:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* QUADSPI */

  return status;
 800d656:	7cbb      	ldrb	r3, [r7, #18]
}
 800d658:	4618      	mov	r0, r3
 800d65a:	3718      	adds	r7, #24
 800d65c:	46bd      	mov	sp, r7
 800d65e:	bd80      	pop	{r7, pc}
 800d660:	40021000 	.word	0x40021000

0800d664 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 800d664:	b580      	push	{r7, lr}
 800d666:	b084      	sub	sp, #16
 800d668:	af00      	add	r7, sp, #0
 800d66a:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800d66c:	687b      	ldr	r3, [r7, #4]
 800d66e:	2b00      	cmp	r3, #0
 800d670:	d101      	bne.n	800d676 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800d672:	2301      	movs	r3, #1
 800d674:	e084      	b.n	800d780 <HAL_SPI_Init+0x11c>
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800d676:	687b      	ldr	r3, [r7, #4]
 800d678:	2200      	movs	r2, #0
 800d67a:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800d67c:	687b      	ldr	r3, [r7, #4]
 800d67e:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 800d682:	b2db      	uxtb	r3, r3
 800d684:	2b00      	cmp	r3, #0
 800d686:	d106      	bne.n	800d696 <HAL_SPI_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800d688:	687b      	ldr	r3, [r7, #4]
 800d68a:	2200      	movs	r2, #0
 800d68c:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800d690:	6878      	ldr	r0, [r7, #4]
 800d692:	f7fa fe1d 	bl	80082d0 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800d696:	687b      	ldr	r3, [r7, #4]
 800d698:	2202      	movs	r2, #2
 800d69a:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800d69e:	687b      	ldr	r3, [r7, #4]
 800d6a0:	681b      	ldr	r3, [r3, #0]
 800d6a2:	681a      	ldr	r2, [r3, #0]
 800d6a4:	687b      	ldr	r3, [r7, #4]
 800d6a6:	681b      	ldr	r3, [r3, #0]
 800d6a8:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800d6ac:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800d6ae:	687b      	ldr	r3, [r7, #4]
 800d6b0:	68db      	ldr	r3, [r3, #12]
 800d6b2:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800d6b6:	d902      	bls.n	800d6be <HAL_SPI_Init+0x5a>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 800d6b8:	2300      	movs	r3, #0
 800d6ba:	60fb      	str	r3, [r7, #12]
 800d6bc:	e002      	b.n	800d6c4 <HAL_SPI_Init+0x60>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 800d6be:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800d6c2:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 800d6c4:	687b      	ldr	r3, [r7, #4]
 800d6c6:	68db      	ldr	r3, [r3, #12]
 800d6c8:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 800d6cc:	d007      	beq.n	800d6de <HAL_SPI_Init+0x7a>
 800d6ce:	687b      	ldr	r3, [r7, #4]
 800d6d0:	68db      	ldr	r3, [r3, #12]
 800d6d2:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800d6d6:	d002      	beq.n	800d6de <HAL_SPI_Init+0x7a>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800d6d8:	687b      	ldr	r3, [r7, #4]
 800d6da:	2200      	movs	r2, #0
 800d6dc:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Align the CRC Length on the data size */
  if (hspi->Init.CRCLength == SPI_CRC_LENGTH_DATASIZE)
 800d6de:	687b      	ldr	r3, [r7, #4]
 800d6e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d6e2:	2b00      	cmp	r3, #0
 800d6e4:	d10b      	bne.n	800d6fe <HAL_SPI_Init+0x9a>
  {
    /* CRC Length aligned on the data size : value set by default */
    if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800d6e6:	687b      	ldr	r3, [r7, #4]
 800d6e8:	68db      	ldr	r3, [r3, #12]
 800d6ea:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800d6ee:	d903      	bls.n	800d6f8 <HAL_SPI_Init+0x94>
    {
      hspi->Init.CRCLength = SPI_CRC_LENGTH_16BIT;
 800d6f0:	687b      	ldr	r3, [r7, #4]
 800d6f2:	2202      	movs	r2, #2
 800d6f4:	631a      	str	r2, [r3, #48]	; 0x30
 800d6f6:	e002      	b.n	800d6fe <HAL_SPI_Init+0x9a>
    }
    else
    {
      hspi->Init.CRCLength = SPI_CRC_LENGTH_8BIT;
 800d6f8:	687b      	ldr	r3, [r7, #4]
 800d6fa:	2201      	movs	r2, #1
 800d6fc:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction |
 800d6fe:	687b      	ldr	r3, [r7, #4]
 800d700:	685a      	ldr	r2, [r3, #4]
 800d702:	687b      	ldr	r3, [r7, #4]
 800d704:	689b      	ldr	r3, [r3, #8]
 800d706:	431a      	orrs	r2, r3
 800d708:	687b      	ldr	r3, [r7, #4]
 800d70a:	691b      	ldr	r3, [r3, #16]
 800d70c:	431a      	orrs	r2, r3
 800d70e:	687b      	ldr	r3, [r7, #4]
 800d710:	695b      	ldr	r3, [r3, #20]
 800d712:	431a      	orrs	r2, r3
 800d714:	687b      	ldr	r3, [r7, #4]
 800d716:	699b      	ldr	r3, [r3, #24]
 800d718:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800d71c:	431a      	orrs	r2, r3
 800d71e:	687b      	ldr	r3, [r7, #4]
 800d720:	69db      	ldr	r3, [r3, #28]
 800d722:	431a      	orrs	r2, r3
 800d724:	687b      	ldr	r3, [r7, #4]
 800d726:	6a1b      	ldr	r3, [r3, #32]
 800d728:	ea42 0103 	orr.w	r1, r2, r3
 800d72c:	687b      	ldr	r3, [r7, #4]
 800d72e:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800d730:	687b      	ldr	r3, [r7, #4]
 800d732:	681b      	ldr	r3, [r3, #0]
 800d734:	430a      	orrs	r2, r1
 800d736:	601a      	str	r2, [r3, #0]
    hspi->Instance->CR1 |= SPI_CR1_CRCL;
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | hspi->Init.TIMode |
 800d738:	687b      	ldr	r3, [r7, #4]
 800d73a:	699b      	ldr	r3, [r3, #24]
 800d73c:	0c1b      	lsrs	r3, r3, #16
 800d73e:	f003 0204 	and.w	r2, r3, #4
 800d742:	687b      	ldr	r3, [r7, #4]
 800d744:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d746:	431a      	orrs	r2, r3
 800d748:	687b      	ldr	r3, [r7, #4]
 800d74a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d74c:	431a      	orrs	r2, r3
 800d74e:	687b      	ldr	r3, [r7, #4]
 800d750:	68db      	ldr	r3, [r3, #12]
 800d752:	ea42 0103 	orr.w	r1, r2, r3
 800d756:	687b      	ldr	r3, [r7, #4]
 800d758:	681b      	ldr	r3, [r3, #0]
 800d75a:	68fa      	ldr	r2, [r7, #12]
 800d75c:	430a      	orrs	r2, r1
 800d75e:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800d760:	687b      	ldr	r3, [r7, #4]
 800d762:	681b      	ldr	r3, [r3, #0]
 800d764:	69da      	ldr	r2, [r3, #28]
 800d766:	687b      	ldr	r3, [r7, #4]
 800d768:	681b      	ldr	r3, [r3, #0]
 800d76a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800d76e:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800d770:	687b      	ldr	r3, [r7, #4]
 800d772:	2200      	movs	r2, #0
 800d774:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 800d776:	687b      	ldr	r3, [r7, #4]
 800d778:	2201      	movs	r2, #1
 800d77a:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 800d77e:	2300      	movs	r3, #0
}
 800d780:	4618      	mov	r0, r3
 800d782:	3710      	adds	r7, #16
 800d784:	46bd      	mov	sp, r7
 800d786:	bd80      	pop	{r7, pc}

0800d788 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800d788:	b580      	push	{r7, lr}
 800d78a:	b082      	sub	sp, #8
 800d78c:	af00      	add	r7, sp, #0
 800d78e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800d790:	687b      	ldr	r3, [r7, #4]
 800d792:	2b00      	cmp	r3, #0
 800d794:	d101      	bne.n	800d79a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800d796:	2301      	movs	r3, #1
 800d798:	e049      	b.n	800d82e <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800d79a:	687b      	ldr	r3, [r7, #4]
 800d79c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800d7a0:	b2db      	uxtb	r3, r3
 800d7a2:	2b00      	cmp	r3, #0
 800d7a4:	d106      	bne.n	800d7b4 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800d7a6:	687b      	ldr	r3, [r7, #4]
 800d7a8:	2200      	movs	r2, #0
 800d7aa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800d7ae:	6878      	ldr	r0, [r7, #4]
 800d7b0:	f7fb fa98 	bl	8008ce4 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800d7b4:	687b      	ldr	r3, [r7, #4]
 800d7b6:	2202      	movs	r2, #2
 800d7b8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800d7bc:	687b      	ldr	r3, [r7, #4]
 800d7be:	681a      	ldr	r2, [r3, #0]
 800d7c0:	687b      	ldr	r3, [r7, #4]
 800d7c2:	3304      	adds	r3, #4
 800d7c4:	4619      	mov	r1, r3
 800d7c6:	4610      	mov	r0, r2
 800d7c8:	f001 fb9e 	bl	800ef08 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800d7cc:	687b      	ldr	r3, [r7, #4]
 800d7ce:	2201      	movs	r2, #1
 800d7d0:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800d7d4:	687b      	ldr	r3, [r7, #4]
 800d7d6:	2201      	movs	r2, #1
 800d7d8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800d7dc:	687b      	ldr	r3, [r7, #4]
 800d7de:	2201      	movs	r2, #1
 800d7e0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800d7e4:	687b      	ldr	r3, [r7, #4]
 800d7e6:	2201      	movs	r2, #1
 800d7e8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800d7ec:	687b      	ldr	r3, [r7, #4]
 800d7ee:	2201      	movs	r2, #1
 800d7f0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800d7f4:	687b      	ldr	r3, [r7, #4]
 800d7f6:	2201      	movs	r2, #1
 800d7f8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800d7fc:	687b      	ldr	r3, [r7, #4]
 800d7fe:	2201      	movs	r2, #1
 800d800:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800d804:	687b      	ldr	r3, [r7, #4]
 800d806:	2201      	movs	r2, #1
 800d808:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800d80c:	687b      	ldr	r3, [r7, #4]
 800d80e:	2201      	movs	r2, #1
 800d810:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800d814:	687b      	ldr	r3, [r7, #4]
 800d816:	2201      	movs	r2, #1
 800d818:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800d81c:	687b      	ldr	r3, [r7, #4]
 800d81e:	2201      	movs	r2, #1
 800d820:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800d824:	687b      	ldr	r3, [r7, #4]
 800d826:	2201      	movs	r2, #1
 800d828:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800d82c:	2300      	movs	r3, #0
}
 800d82e:	4618      	mov	r0, r3
 800d830:	3708      	adds	r7, #8
 800d832:	46bd      	mov	sp, r7
 800d834:	bd80      	pop	{r7, pc}
	...

0800d838 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 800d838:	b480      	push	{r7}
 800d83a:	b085      	sub	sp, #20
 800d83c:	af00      	add	r7, sp, #0
 800d83e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800d840:	687b      	ldr	r3, [r7, #4]
 800d842:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800d846:	b2db      	uxtb	r3, r3
 800d848:	2b01      	cmp	r3, #1
 800d84a:	d001      	beq.n	800d850 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 800d84c:	2301      	movs	r3, #1
 800d84e:	e019      	b.n	800d884 <HAL_TIM_Base_Start+0x4c>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800d850:	687b      	ldr	r3, [r7, #4]
 800d852:	2202      	movs	r2, #2
 800d854:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800d858:	687b      	ldr	r3, [r7, #4]
 800d85a:	681b      	ldr	r3, [r3, #0]
 800d85c:	689a      	ldr	r2, [r3, #8]
 800d85e:	4b0c      	ldr	r3, [pc, #48]	; (800d890 <HAL_TIM_Base_Start+0x58>)
 800d860:	4013      	ands	r3, r2
 800d862:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800d864:	68fb      	ldr	r3, [r7, #12]
 800d866:	2b06      	cmp	r3, #6
 800d868:	d00b      	beq.n	800d882 <HAL_TIM_Base_Start+0x4a>
 800d86a:	68fb      	ldr	r3, [r7, #12]
 800d86c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800d870:	d007      	beq.n	800d882 <HAL_TIM_Base_Start+0x4a>
  {
    __HAL_TIM_ENABLE(htim);
 800d872:	687b      	ldr	r3, [r7, #4]
 800d874:	681b      	ldr	r3, [r3, #0]
 800d876:	681a      	ldr	r2, [r3, #0]
 800d878:	687b      	ldr	r3, [r7, #4]
 800d87a:	681b      	ldr	r3, [r3, #0]
 800d87c:	f042 0201 	orr.w	r2, r2, #1
 800d880:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800d882:	2300      	movs	r3, #0
}
 800d884:	4618      	mov	r0, r3
 800d886:	3714      	adds	r7, #20
 800d888:	46bd      	mov	sp, r7
 800d88a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d88e:	4770      	bx	lr
 800d890:	00010007 	.word	0x00010007

0800d894 <HAL_TIM_Base_Stop>:
  * @brief  Stops the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop(TIM_HandleTypeDef *htim)
{
 800d894:	b480      	push	{r7}
 800d896:	b083      	sub	sp, #12
 800d898:	af00      	add	r7, sp, #0
 800d89a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 800d89c:	687b      	ldr	r3, [r7, #4]
 800d89e:	681b      	ldr	r3, [r3, #0]
 800d8a0:	6a1a      	ldr	r2, [r3, #32]
 800d8a2:	f241 1311 	movw	r3, #4369	; 0x1111
 800d8a6:	4013      	ands	r3, r2
 800d8a8:	2b00      	cmp	r3, #0
 800d8aa:	d10f      	bne.n	800d8cc <HAL_TIM_Base_Stop+0x38>
 800d8ac:	687b      	ldr	r3, [r7, #4]
 800d8ae:	681b      	ldr	r3, [r3, #0]
 800d8b0:	6a1a      	ldr	r2, [r3, #32]
 800d8b2:	f244 4344 	movw	r3, #17476	; 0x4444
 800d8b6:	4013      	ands	r3, r2
 800d8b8:	2b00      	cmp	r3, #0
 800d8ba:	d107      	bne.n	800d8cc <HAL_TIM_Base_Stop+0x38>
 800d8bc:	687b      	ldr	r3, [r7, #4]
 800d8be:	681b      	ldr	r3, [r3, #0]
 800d8c0:	681a      	ldr	r2, [r3, #0]
 800d8c2:	687b      	ldr	r3, [r7, #4]
 800d8c4:	681b      	ldr	r3, [r3, #0]
 800d8c6:	f022 0201 	bic.w	r2, r2, #1
 800d8ca:	601a      	str	r2, [r3, #0]

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 800d8cc:	687b      	ldr	r3, [r7, #4]
 800d8ce:	2201      	movs	r2, #1
 800d8d0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Return function status */
  return HAL_OK;
 800d8d4:	2300      	movs	r3, #0
}
 800d8d6:	4618      	mov	r0, r3
 800d8d8:	370c      	adds	r7, #12
 800d8da:	46bd      	mov	sp, r7
 800d8dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d8e0:	4770      	bx	lr
	...

0800d8e4 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800d8e4:	b480      	push	{r7}
 800d8e6:	b085      	sub	sp, #20
 800d8e8:	af00      	add	r7, sp, #0
 800d8ea:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800d8ec:	687b      	ldr	r3, [r7, #4]
 800d8ee:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800d8f2:	b2db      	uxtb	r3, r3
 800d8f4:	2b01      	cmp	r3, #1
 800d8f6:	d001      	beq.n	800d8fc <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800d8f8:	2301      	movs	r3, #1
 800d8fa:	e021      	b.n	800d940 <HAL_TIM_Base_Start_IT+0x5c>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800d8fc:	687b      	ldr	r3, [r7, #4]
 800d8fe:	2202      	movs	r2, #2
 800d900:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800d904:	687b      	ldr	r3, [r7, #4]
 800d906:	681b      	ldr	r3, [r3, #0]
 800d908:	68da      	ldr	r2, [r3, #12]
 800d90a:	687b      	ldr	r3, [r7, #4]
 800d90c:	681b      	ldr	r3, [r3, #0]
 800d90e:	f042 0201 	orr.w	r2, r2, #1
 800d912:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800d914:	687b      	ldr	r3, [r7, #4]
 800d916:	681b      	ldr	r3, [r3, #0]
 800d918:	689a      	ldr	r2, [r3, #8]
 800d91a:	4b0c      	ldr	r3, [pc, #48]	; (800d94c <HAL_TIM_Base_Start_IT+0x68>)
 800d91c:	4013      	ands	r3, r2
 800d91e:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800d920:	68fb      	ldr	r3, [r7, #12]
 800d922:	2b06      	cmp	r3, #6
 800d924:	d00b      	beq.n	800d93e <HAL_TIM_Base_Start_IT+0x5a>
 800d926:	68fb      	ldr	r3, [r7, #12]
 800d928:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800d92c:	d007      	beq.n	800d93e <HAL_TIM_Base_Start_IT+0x5a>
  {
    __HAL_TIM_ENABLE(htim);
 800d92e:	687b      	ldr	r3, [r7, #4]
 800d930:	681b      	ldr	r3, [r3, #0]
 800d932:	681a      	ldr	r2, [r3, #0]
 800d934:	687b      	ldr	r3, [r7, #4]
 800d936:	681b      	ldr	r3, [r3, #0]
 800d938:	f042 0201 	orr.w	r2, r2, #1
 800d93c:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800d93e:	2300      	movs	r3, #0
}
 800d940:	4618      	mov	r0, r3
 800d942:	3714      	adds	r7, #20
 800d944:	46bd      	mov	sp, r7
 800d946:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d94a:	4770      	bx	lr
 800d94c:	00010007 	.word	0x00010007

0800d950 <HAL_TIM_Base_Stop_IT>:
  * @brief  Stops the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop_IT(TIM_HandleTypeDef *htim)
{
 800d950:	b480      	push	{r7}
 800d952:	b083      	sub	sp, #12
 800d954:	af00      	add	r7, sp, #0
 800d956:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  
  /* Disable the TIM Update interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_UPDATE);
 800d958:	687b      	ldr	r3, [r7, #4]
 800d95a:	681b      	ldr	r3, [r3, #0]
 800d95c:	68da      	ldr	r2, [r3, #12]
 800d95e:	687b      	ldr	r3, [r7, #4]
 800d960:	681b      	ldr	r3, [r3, #0]
 800d962:	f022 0201 	bic.w	r2, r2, #1
 800d966:	60da      	str	r2, [r3, #12]

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 800d968:	687b      	ldr	r3, [r7, #4]
 800d96a:	681b      	ldr	r3, [r3, #0]
 800d96c:	6a1a      	ldr	r2, [r3, #32]
 800d96e:	f241 1311 	movw	r3, #4369	; 0x1111
 800d972:	4013      	ands	r3, r2
 800d974:	2b00      	cmp	r3, #0
 800d976:	d10f      	bne.n	800d998 <HAL_TIM_Base_Stop_IT+0x48>
 800d978:	687b      	ldr	r3, [r7, #4]
 800d97a:	681b      	ldr	r3, [r3, #0]
 800d97c:	6a1a      	ldr	r2, [r3, #32]
 800d97e:	f244 4344 	movw	r3, #17476	; 0x4444
 800d982:	4013      	ands	r3, r2
 800d984:	2b00      	cmp	r3, #0
 800d986:	d107      	bne.n	800d998 <HAL_TIM_Base_Stop_IT+0x48>
 800d988:	687b      	ldr	r3, [r7, #4]
 800d98a:	681b      	ldr	r3, [r3, #0]
 800d98c:	681a      	ldr	r2, [r3, #0]
 800d98e:	687b      	ldr	r3, [r7, #4]
 800d990:	681b      	ldr	r3, [r3, #0]
 800d992:	f022 0201 	bic.w	r2, r2, #1
 800d996:	601a      	str	r2, [r3, #0]

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 800d998:	687b      	ldr	r3, [r7, #4]
 800d99a:	2201      	movs	r2, #1
 800d99c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Return function status */
  return HAL_OK;
 800d9a0:	2300      	movs	r3, #0
}
 800d9a2:	4618      	mov	r0, r3
 800d9a4:	370c      	adds	r7, #12
 800d9a6:	46bd      	mov	sp, r7
 800d9a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d9ac:	4770      	bx	lr

0800d9ae <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800d9ae:	b580      	push	{r7, lr}
 800d9b0:	b082      	sub	sp, #8
 800d9b2:	af00      	add	r7, sp, #0
 800d9b4:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800d9b6:	687b      	ldr	r3, [r7, #4]
 800d9b8:	2b00      	cmp	r3, #0
 800d9ba:	d101      	bne.n	800d9c0 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800d9bc:	2301      	movs	r3, #1
 800d9be:	e049      	b.n	800da54 <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800d9c0:	687b      	ldr	r3, [r7, #4]
 800d9c2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800d9c6:	b2db      	uxtb	r3, r3
 800d9c8:	2b00      	cmp	r3, #0
 800d9ca:	d106      	bne.n	800d9da <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800d9cc:	687b      	ldr	r3, [r7, #4]
 800d9ce:	2200      	movs	r2, #0
 800d9d0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800d9d4:	6878      	ldr	r0, [r7, #4]
 800d9d6:	f000 f841 	bl	800da5c <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800d9da:	687b      	ldr	r3, [r7, #4]
 800d9dc:	2202      	movs	r2, #2
 800d9de:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800d9e2:	687b      	ldr	r3, [r7, #4]
 800d9e4:	681a      	ldr	r2, [r3, #0]
 800d9e6:	687b      	ldr	r3, [r7, #4]
 800d9e8:	3304      	adds	r3, #4
 800d9ea:	4619      	mov	r1, r3
 800d9ec:	4610      	mov	r0, r2
 800d9ee:	f001 fa8b 	bl	800ef08 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800d9f2:	687b      	ldr	r3, [r7, #4]
 800d9f4:	2201      	movs	r2, #1
 800d9f6:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800d9fa:	687b      	ldr	r3, [r7, #4]
 800d9fc:	2201      	movs	r2, #1
 800d9fe:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800da02:	687b      	ldr	r3, [r7, #4]
 800da04:	2201      	movs	r2, #1
 800da06:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800da0a:	687b      	ldr	r3, [r7, #4]
 800da0c:	2201      	movs	r2, #1
 800da0e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800da12:	687b      	ldr	r3, [r7, #4]
 800da14:	2201      	movs	r2, #1
 800da16:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800da1a:	687b      	ldr	r3, [r7, #4]
 800da1c:	2201      	movs	r2, #1
 800da1e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800da22:	687b      	ldr	r3, [r7, #4]
 800da24:	2201      	movs	r2, #1
 800da26:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800da2a:	687b      	ldr	r3, [r7, #4]
 800da2c:	2201      	movs	r2, #1
 800da2e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800da32:	687b      	ldr	r3, [r7, #4]
 800da34:	2201      	movs	r2, #1
 800da36:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800da3a:	687b      	ldr	r3, [r7, #4]
 800da3c:	2201      	movs	r2, #1
 800da3e:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800da42:	687b      	ldr	r3, [r7, #4]
 800da44:	2201      	movs	r2, #1
 800da46:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800da4a:	687b      	ldr	r3, [r7, #4]
 800da4c:	2201      	movs	r2, #1
 800da4e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800da52:	2300      	movs	r3, #0
}
 800da54:	4618      	mov	r0, r3
 800da56:	3708      	adds	r7, #8
 800da58:	46bd      	mov	sp, r7
 800da5a:	bd80      	pop	{r7, pc}

0800da5c <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 800da5c:	b480      	push	{r7}
 800da5e:	b083      	sub	sp, #12
 800da60:	af00      	add	r7, sp, #0
 800da62:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 800da64:	bf00      	nop
 800da66:	370c      	adds	r7, #12
 800da68:	46bd      	mov	sp, r7
 800da6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800da6e:	4770      	bx	lr

0800da70 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800da70:	b580      	push	{r7, lr}
 800da72:	b084      	sub	sp, #16
 800da74:	af00      	add	r7, sp, #0
 800da76:	6078      	str	r0, [r7, #4]
 800da78:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800da7a:	683b      	ldr	r3, [r7, #0]
 800da7c:	2b00      	cmp	r3, #0
 800da7e:	d109      	bne.n	800da94 <HAL_TIM_PWM_Start+0x24>
 800da80:	687b      	ldr	r3, [r7, #4]
 800da82:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800da86:	b2db      	uxtb	r3, r3
 800da88:	2b01      	cmp	r3, #1
 800da8a:	bf14      	ite	ne
 800da8c:	2301      	movne	r3, #1
 800da8e:	2300      	moveq	r3, #0
 800da90:	b2db      	uxtb	r3, r3
 800da92:	e03c      	b.n	800db0e <HAL_TIM_PWM_Start+0x9e>
 800da94:	683b      	ldr	r3, [r7, #0]
 800da96:	2b04      	cmp	r3, #4
 800da98:	d109      	bne.n	800daae <HAL_TIM_PWM_Start+0x3e>
 800da9a:	687b      	ldr	r3, [r7, #4]
 800da9c:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 800daa0:	b2db      	uxtb	r3, r3
 800daa2:	2b01      	cmp	r3, #1
 800daa4:	bf14      	ite	ne
 800daa6:	2301      	movne	r3, #1
 800daa8:	2300      	moveq	r3, #0
 800daaa:	b2db      	uxtb	r3, r3
 800daac:	e02f      	b.n	800db0e <HAL_TIM_PWM_Start+0x9e>
 800daae:	683b      	ldr	r3, [r7, #0]
 800dab0:	2b08      	cmp	r3, #8
 800dab2:	d109      	bne.n	800dac8 <HAL_TIM_PWM_Start+0x58>
 800dab4:	687b      	ldr	r3, [r7, #4]
 800dab6:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800daba:	b2db      	uxtb	r3, r3
 800dabc:	2b01      	cmp	r3, #1
 800dabe:	bf14      	ite	ne
 800dac0:	2301      	movne	r3, #1
 800dac2:	2300      	moveq	r3, #0
 800dac4:	b2db      	uxtb	r3, r3
 800dac6:	e022      	b.n	800db0e <HAL_TIM_PWM_Start+0x9e>
 800dac8:	683b      	ldr	r3, [r7, #0]
 800daca:	2b0c      	cmp	r3, #12
 800dacc:	d109      	bne.n	800dae2 <HAL_TIM_PWM_Start+0x72>
 800dace:	687b      	ldr	r3, [r7, #4]
 800dad0:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800dad4:	b2db      	uxtb	r3, r3
 800dad6:	2b01      	cmp	r3, #1
 800dad8:	bf14      	ite	ne
 800dada:	2301      	movne	r3, #1
 800dadc:	2300      	moveq	r3, #0
 800dade:	b2db      	uxtb	r3, r3
 800dae0:	e015      	b.n	800db0e <HAL_TIM_PWM_Start+0x9e>
 800dae2:	683b      	ldr	r3, [r7, #0]
 800dae4:	2b10      	cmp	r3, #16
 800dae6:	d109      	bne.n	800dafc <HAL_TIM_PWM_Start+0x8c>
 800dae8:	687b      	ldr	r3, [r7, #4]
 800daea:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800daee:	b2db      	uxtb	r3, r3
 800daf0:	2b01      	cmp	r3, #1
 800daf2:	bf14      	ite	ne
 800daf4:	2301      	movne	r3, #1
 800daf6:	2300      	moveq	r3, #0
 800daf8:	b2db      	uxtb	r3, r3
 800dafa:	e008      	b.n	800db0e <HAL_TIM_PWM_Start+0x9e>
 800dafc:	687b      	ldr	r3, [r7, #4]
 800dafe:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 800db02:	b2db      	uxtb	r3, r3
 800db04:	2b01      	cmp	r3, #1
 800db06:	bf14      	ite	ne
 800db08:	2301      	movne	r3, #1
 800db0a:	2300      	moveq	r3, #0
 800db0c:	b2db      	uxtb	r3, r3
 800db0e:	2b00      	cmp	r3, #0
 800db10:	d001      	beq.n	800db16 <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 800db12:	2301      	movs	r3, #1
 800db14:	e073      	b.n	800dbfe <HAL_TIM_PWM_Start+0x18e>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800db16:	683b      	ldr	r3, [r7, #0]
 800db18:	2b00      	cmp	r3, #0
 800db1a:	d104      	bne.n	800db26 <HAL_TIM_PWM_Start+0xb6>
 800db1c:	687b      	ldr	r3, [r7, #4]
 800db1e:	2202      	movs	r2, #2
 800db20:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800db24:	e023      	b.n	800db6e <HAL_TIM_PWM_Start+0xfe>
 800db26:	683b      	ldr	r3, [r7, #0]
 800db28:	2b04      	cmp	r3, #4
 800db2a:	d104      	bne.n	800db36 <HAL_TIM_PWM_Start+0xc6>
 800db2c:	687b      	ldr	r3, [r7, #4]
 800db2e:	2202      	movs	r2, #2
 800db30:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800db34:	e01b      	b.n	800db6e <HAL_TIM_PWM_Start+0xfe>
 800db36:	683b      	ldr	r3, [r7, #0]
 800db38:	2b08      	cmp	r3, #8
 800db3a:	d104      	bne.n	800db46 <HAL_TIM_PWM_Start+0xd6>
 800db3c:	687b      	ldr	r3, [r7, #4]
 800db3e:	2202      	movs	r2, #2
 800db40:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800db44:	e013      	b.n	800db6e <HAL_TIM_PWM_Start+0xfe>
 800db46:	683b      	ldr	r3, [r7, #0]
 800db48:	2b0c      	cmp	r3, #12
 800db4a:	d104      	bne.n	800db56 <HAL_TIM_PWM_Start+0xe6>
 800db4c:	687b      	ldr	r3, [r7, #4]
 800db4e:	2202      	movs	r2, #2
 800db50:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800db54:	e00b      	b.n	800db6e <HAL_TIM_PWM_Start+0xfe>
 800db56:	683b      	ldr	r3, [r7, #0]
 800db58:	2b10      	cmp	r3, #16
 800db5a:	d104      	bne.n	800db66 <HAL_TIM_PWM_Start+0xf6>
 800db5c:	687b      	ldr	r3, [r7, #4]
 800db5e:	2202      	movs	r2, #2
 800db60:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800db64:	e003      	b.n	800db6e <HAL_TIM_PWM_Start+0xfe>
 800db66:	687b      	ldr	r3, [r7, #4]
 800db68:	2202      	movs	r2, #2
 800db6a:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800db6e:	687b      	ldr	r3, [r7, #4]
 800db70:	681b      	ldr	r3, [r3, #0]
 800db72:	2201      	movs	r2, #1
 800db74:	6839      	ldr	r1, [r7, #0]
 800db76:	4618      	mov	r0, r3
 800db78:	f002 f81a 	bl	800fbb0 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800db7c:	687b      	ldr	r3, [r7, #4]
 800db7e:	681b      	ldr	r3, [r3, #0]
 800db80:	4a21      	ldr	r2, [pc, #132]	; (800dc08 <HAL_TIM_PWM_Start+0x198>)
 800db82:	4293      	cmp	r3, r2
 800db84:	d018      	beq.n	800dbb8 <HAL_TIM_PWM_Start+0x148>
 800db86:	687b      	ldr	r3, [r7, #4]
 800db88:	681b      	ldr	r3, [r3, #0]
 800db8a:	4a20      	ldr	r2, [pc, #128]	; (800dc0c <HAL_TIM_PWM_Start+0x19c>)
 800db8c:	4293      	cmp	r3, r2
 800db8e:	d013      	beq.n	800dbb8 <HAL_TIM_PWM_Start+0x148>
 800db90:	687b      	ldr	r3, [r7, #4]
 800db92:	681b      	ldr	r3, [r3, #0]
 800db94:	4a1e      	ldr	r2, [pc, #120]	; (800dc10 <HAL_TIM_PWM_Start+0x1a0>)
 800db96:	4293      	cmp	r3, r2
 800db98:	d00e      	beq.n	800dbb8 <HAL_TIM_PWM_Start+0x148>
 800db9a:	687b      	ldr	r3, [r7, #4]
 800db9c:	681b      	ldr	r3, [r3, #0]
 800db9e:	4a1d      	ldr	r2, [pc, #116]	; (800dc14 <HAL_TIM_PWM_Start+0x1a4>)
 800dba0:	4293      	cmp	r3, r2
 800dba2:	d009      	beq.n	800dbb8 <HAL_TIM_PWM_Start+0x148>
 800dba4:	687b      	ldr	r3, [r7, #4]
 800dba6:	681b      	ldr	r3, [r3, #0]
 800dba8:	4a1b      	ldr	r2, [pc, #108]	; (800dc18 <HAL_TIM_PWM_Start+0x1a8>)
 800dbaa:	4293      	cmp	r3, r2
 800dbac:	d004      	beq.n	800dbb8 <HAL_TIM_PWM_Start+0x148>
 800dbae:	687b      	ldr	r3, [r7, #4]
 800dbb0:	681b      	ldr	r3, [r3, #0]
 800dbb2:	4a1a      	ldr	r2, [pc, #104]	; (800dc1c <HAL_TIM_PWM_Start+0x1ac>)
 800dbb4:	4293      	cmp	r3, r2
 800dbb6:	d101      	bne.n	800dbbc <HAL_TIM_PWM_Start+0x14c>
 800dbb8:	2301      	movs	r3, #1
 800dbba:	e000      	b.n	800dbbe <HAL_TIM_PWM_Start+0x14e>
 800dbbc:	2300      	movs	r3, #0
 800dbbe:	2b00      	cmp	r3, #0
 800dbc0:	d007      	beq.n	800dbd2 <HAL_TIM_PWM_Start+0x162>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 800dbc2:	687b      	ldr	r3, [r7, #4]
 800dbc4:	681b      	ldr	r3, [r3, #0]
 800dbc6:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800dbc8:	687b      	ldr	r3, [r7, #4]
 800dbca:	681b      	ldr	r3, [r3, #0]
 800dbcc:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800dbd0:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800dbd2:	687b      	ldr	r3, [r7, #4]
 800dbd4:	681b      	ldr	r3, [r3, #0]
 800dbd6:	689a      	ldr	r2, [r3, #8]
 800dbd8:	4b11      	ldr	r3, [pc, #68]	; (800dc20 <HAL_TIM_PWM_Start+0x1b0>)
 800dbda:	4013      	ands	r3, r2
 800dbdc:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800dbde:	68fb      	ldr	r3, [r7, #12]
 800dbe0:	2b06      	cmp	r3, #6
 800dbe2:	d00b      	beq.n	800dbfc <HAL_TIM_PWM_Start+0x18c>
 800dbe4:	68fb      	ldr	r3, [r7, #12]
 800dbe6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800dbea:	d007      	beq.n	800dbfc <HAL_TIM_PWM_Start+0x18c>
  {
    __HAL_TIM_ENABLE(htim);
 800dbec:	687b      	ldr	r3, [r7, #4]
 800dbee:	681b      	ldr	r3, [r3, #0]
 800dbf0:	681a      	ldr	r2, [r3, #0]
 800dbf2:	687b      	ldr	r3, [r7, #4]
 800dbf4:	681b      	ldr	r3, [r3, #0]
 800dbf6:	f042 0201 	orr.w	r2, r2, #1
 800dbfa:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800dbfc:	2300      	movs	r3, #0
}
 800dbfe:	4618      	mov	r0, r3
 800dc00:	3710      	adds	r7, #16
 800dc02:	46bd      	mov	sp, r7
 800dc04:	bd80      	pop	{r7, pc}
 800dc06:	bf00      	nop
 800dc08:	40012c00 	.word	0x40012c00
 800dc0c:	40013400 	.word	0x40013400
 800dc10:	40014000 	.word	0x40014000
 800dc14:	40014400 	.word	0x40014400
 800dc18:	40014800 	.word	0x40014800
 800dc1c:	40015000 	.word	0x40015000
 800dc20:	00010007 	.word	0x00010007

0800dc24 <HAL_TIM_PWM_Stop>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Stop(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800dc24:	b580      	push	{r7, lr}
 800dc26:	b082      	sub	sp, #8
 800dc28:	af00      	add	r7, sp, #0
 800dc2a:	6078      	str	r0, [r7, #4]
 800dc2c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Disable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 800dc2e:	687b      	ldr	r3, [r7, #4]
 800dc30:	681b      	ldr	r3, [r3, #0]
 800dc32:	2200      	movs	r2, #0
 800dc34:	6839      	ldr	r1, [r7, #0]
 800dc36:	4618      	mov	r0, r3
 800dc38:	f001 ffba 	bl	800fbb0 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800dc3c:	687b      	ldr	r3, [r7, #4]
 800dc3e:	681b      	ldr	r3, [r3, #0]
 800dc40:	4a40      	ldr	r2, [pc, #256]	; (800dd44 <HAL_TIM_PWM_Stop+0x120>)
 800dc42:	4293      	cmp	r3, r2
 800dc44:	d018      	beq.n	800dc78 <HAL_TIM_PWM_Stop+0x54>
 800dc46:	687b      	ldr	r3, [r7, #4]
 800dc48:	681b      	ldr	r3, [r3, #0]
 800dc4a:	4a3f      	ldr	r2, [pc, #252]	; (800dd48 <HAL_TIM_PWM_Stop+0x124>)
 800dc4c:	4293      	cmp	r3, r2
 800dc4e:	d013      	beq.n	800dc78 <HAL_TIM_PWM_Stop+0x54>
 800dc50:	687b      	ldr	r3, [r7, #4]
 800dc52:	681b      	ldr	r3, [r3, #0]
 800dc54:	4a3d      	ldr	r2, [pc, #244]	; (800dd4c <HAL_TIM_PWM_Stop+0x128>)
 800dc56:	4293      	cmp	r3, r2
 800dc58:	d00e      	beq.n	800dc78 <HAL_TIM_PWM_Stop+0x54>
 800dc5a:	687b      	ldr	r3, [r7, #4]
 800dc5c:	681b      	ldr	r3, [r3, #0]
 800dc5e:	4a3c      	ldr	r2, [pc, #240]	; (800dd50 <HAL_TIM_PWM_Stop+0x12c>)
 800dc60:	4293      	cmp	r3, r2
 800dc62:	d009      	beq.n	800dc78 <HAL_TIM_PWM_Stop+0x54>
 800dc64:	687b      	ldr	r3, [r7, #4]
 800dc66:	681b      	ldr	r3, [r3, #0]
 800dc68:	4a3a      	ldr	r2, [pc, #232]	; (800dd54 <HAL_TIM_PWM_Stop+0x130>)
 800dc6a:	4293      	cmp	r3, r2
 800dc6c:	d004      	beq.n	800dc78 <HAL_TIM_PWM_Stop+0x54>
 800dc6e:	687b      	ldr	r3, [r7, #4]
 800dc70:	681b      	ldr	r3, [r3, #0]
 800dc72:	4a39      	ldr	r2, [pc, #228]	; (800dd58 <HAL_TIM_PWM_Stop+0x134>)
 800dc74:	4293      	cmp	r3, r2
 800dc76:	d101      	bne.n	800dc7c <HAL_TIM_PWM_Stop+0x58>
 800dc78:	2301      	movs	r3, #1
 800dc7a:	e000      	b.n	800dc7e <HAL_TIM_PWM_Stop+0x5a>
 800dc7c:	2300      	movs	r3, #0
 800dc7e:	2b00      	cmp	r3, #0
 800dc80:	d017      	beq.n	800dcb2 <HAL_TIM_PWM_Stop+0x8e>
  {
    /* Disable the Main Output */
    __HAL_TIM_MOE_DISABLE(htim);
 800dc82:	687b      	ldr	r3, [r7, #4]
 800dc84:	681b      	ldr	r3, [r3, #0]
 800dc86:	6a1a      	ldr	r2, [r3, #32]
 800dc88:	f241 1311 	movw	r3, #4369	; 0x1111
 800dc8c:	4013      	ands	r3, r2
 800dc8e:	2b00      	cmp	r3, #0
 800dc90:	d10f      	bne.n	800dcb2 <HAL_TIM_PWM_Stop+0x8e>
 800dc92:	687b      	ldr	r3, [r7, #4]
 800dc94:	681b      	ldr	r3, [r3, #0]
 800dc96:	6a1a      	ldr	r2, [r3, #32]
 800dc98:	f244 4344 	movw	r3, #17476	; 0x4444
 800dc9c:	4013      	ands	r3, r2
 800dc9e:	2b00      	cmp	r3, #0
 800dca0:	d107      	bne.n	800dcb2 <HAL_TIM_PWM_Stop+0x8e>
 800dca2:	687b      	ldr	r3, [r7, #4]
 800dca4:	681b      	ldr	r3, [r3, #0]
 800dca6:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800dca8:	687b      	ldr	r3, [r7, #4]
 800dcaa:	681b      	ldr	r3, [r3, #0]
 800dcac:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800dcb0:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 800dcb2:	687b      	ldr	r3, [r7, #4]
 800dcb4:	681b      	ldr	r3, [r3, #0]
 800dcb6:	6a1a      	ldr	r2, [r3, #32]
 800dcb8:	f241 1311 	movw	r3, #4369	; 0x1111
 800dcbc:	4013      	ands	r3, r2
 800dcbe:	2b00      	cmp	r3, #0
 800dcc0:	d10f      	bne.n	800dce2 <HAL_TIM_PWM_Stop+0xbe>
 800dcc2:	687b      	ldr	r3, [r7, #4]
 800dcc4:	681b      	ldr	r3, [r3, #0]
 800dcc6:	6a1a      	ldr	r2, [r3, #32]
 800dcc8:	f244 4344 	movw	r3, #17476	; 0x4444
 800dccc:	4013      	ands	r3, r2
 800dcce:	2b00      	cmp	r3, #0
 800dcd0:	d107      	bne.n	800dce2 <HAL_TIM_PWM_Stop+0xbe>
 800dcd2:	687b      	ldr	r3, [r7, #4]
 800dcd4:	681b      	ldr	r3, [r3, #0]
 800dcd6:	681a      	ldr	r2, [r3, #0]
 800dcd8:	687b      	ldr	r3, [r7, #4]
 800dcda:	681b      	ldr	r3, [r3, #0]
 800dcdc:	f022 0201 	bic.w	r2, r2, #1
 800dce0:	601a      	str	r2, [r3, #0]

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 800dce2:	683b      	ldr	r3, [r7, #0]
 800dce4:	2b00      	cmp	r3, #0
 800dce6:	d104      	bne.n	800dcf2 <HAL_TIM_PWM_Stop+0xce>
 800dce8:	687b      	ldr	r3, [r7, #4]
 800dcea:	2201      	movs	r2, #1
 800dcec:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800dcf0:	e023      	b.n	800dd3a <HAL_TIM_PWM_Stop+0x116>
 800dcf2:	683b      	ldr	r3, [r7, #0]
 800dcf4:	2b04      	cmp	r3, #4
 800dcf6:	d104      	bne.n	800dd02 <HAL_TIM_PWM_Stop+0xde>
 800dcf8:	687b      	ldr	r3, [r7, #4]
 800dcfa:	2201      	movs	r2, #1
 800dcfc:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800dd00:	e01b      	b.n	800dd3a <HAL_TIM_PWM_Stop+0x116>
 800dd02:	683b      	ldr	r3, [r7, #0]
 800dd04:	2b08      	cmp	r3, #8
 800dd06:	d104      	bne.n	800dd12 <HAL_TIM_PWM_Stop+0xee>
 800dd08:	687b      	ldr	r3, [r7, #4]
 800dd0a:	2201      	movs	r2, #1
 800dd0c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800dd10:	e013      	b.n	800dd3a <HAL_TIM_PWM_Stop+0x116>
 800dd12:	683b      	ldr	r3, [r7, #0]
 800dd14:	2b0c      	cmp	r3, #12
 800dd16:	d104      	bne.n	800dd22 <HAL_TIM_PWM_Stop+0xfe>
 800dd18:	687b      	ldr	r3, [r7, #4]
 800dd1a:	2201      	movs	r2, #1
 800dd1c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800dd20:	e00b      	b.n	800dd3a <HAL_TIM_PWM_Stop+0x116>
 800dd22:	683b      	ldr	r3, [r7, #0]
 800dd24:	2b10      	cmp	r3, #16
 800dd26:	d104      	bne.n	800dd32 <HAL_TIM_PWM_Stop+0x10e>
 800dd28:	687b      	ldr	r3, [r7, #4]
 800dd2a:	2201      	movs	r2, #1
 800dd2c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800dd30:	e003      	b.n	800dd3a <HAL_TIM_PWM_Stop+0x116>
 800dd32:	687b      	ldr	r3, [r7, #4]
 800dd34:	2201      	movs	r2, #1
 800dd36:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Return function status */
  return HAL_OK;
 800dd3a:	2300      	movs	r3, #0
}
 800dd3c:	4618      	mov	r0, r3
 800dd3e:	3708      	adds	r7, #8
 800dd40:	46bd      	mov	sp, r7
 800dd42:	bd80      	pop	{r7, pc}
 800dd44:	40012c00 	.word	0x40012c00
 800dd48:	40013400 	.word	0x40013400
 800dd4c:	40014000 	.word	0x40014000
 800dd50:	40014400 	.word	0x40014400
 800dd54:	40014800 	.word	0x40014800
 800dd58:	40015000 	.word	0x40015000

0800dd5c <HAL_TIM_IC_Init>:
  *         Ex: call @ref HAL_TIM_IC_DeInit() before HAL_TIM_IC_Init()
  * @param  htim TIM Input Capture handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Init(TIM_HandleTypeDef *htim)
{
 800dd5c:	b580      	push	{r7, lr}
 800dd5e:	b082      	sub	sp, #8
 800dd60:	af00      	add	r7, sp, #0
 800dd62:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800dd64:	687b      	ldr	r3, [r7, #4]
 800dd66:	2b00      	cmp	r3, #0
 800dd68:	d101      	bne.n	800dd6e <HAL_TIM_IC_Init+0x12>
  {
    return HAL_ERROR;
 800dd6a:	2301      	movs	r3, #1
 800dd6c:	e049      	b.n	800de02 <HAL_TIM_IC_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800dd6e:	687b      	ldr	r3, [r7, #4]
 800dd70:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800dd74:	b2db      	uxtb	r3, r3
 800dd76:	2b00      	cmp	r3, #0
 800dd78:	d106      	bne.n	800dd88 <HAL_TIM_IC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800dd7a:	687b      	ldr	r3, [r7, #4]
 800dd7c:	2200      	movs	r2, #0
 800dd7e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->IC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_IC_MspInit(htim);
 800dd82:	6878      	ldr	r0, [r7, #4]
 800dd84:	f000 f841 	bl	800de0a <HAL_TIM_IC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800dd88:	687b      	ldr	r3, [r7, #4]
 800dd8a:	2202      	movs	r2, #2
 800dd8c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the input capture */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800dd90:	687b      	ldr	r3, [r7, #4]
 800dd92:	681a      	ldr	r2, [r3, #0]
 800dd94:	687b      	ldr	r3, [r7, #4]
 800dd96:	3304      	adds	r3, #4
 800dd98:	4619      	mov	r1, r3
 800dd9a:	4610      	mov	r0, r2
 800dd9c:	f001 f8b4 	bl	800ef08 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800dda0:	687b      	ldr	r3, [r7, #4]
 800dda2:	2201      	movs	r2, #1
 800dda4:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800dda8:	687b      	ldr	r3, [r7, #4]
 800ddaa:	2201      	movs	r2, #1
 800ddac:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800ddb0:	687b      	ldr	r3, [r7, #4]
 800ddb2:	2201      	movs	r2, #1
 800ddb4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800ddb8:	687b      	ldr	r3, [r7, #4]
 800ddba:	2201      	movs	r2, #1
 800ddbc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800ddc0:	687b      	ldr	r3, [r7, #4]
 800ddc2:	2201      	movs	r2, #1
 800ddc4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800ddc8:	687b      	ldr	r3, [r7, #4]
 800ddca:	2201      	movs	r2, #1
 800ddcc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800ddd0:	687b      	ldr	r3, [r7, #4]
 800ddd2:	2201      	movs	r2, #1
 800ddd4:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800ddd8:	687b      	ldr	r3, [r7, #4]
 800ddda:	2201      	movs	r2, #1
 800dddc:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800dde0:	687b      	ldr	r3, [r7, #4]
 800dde2:	2201      	movs	r2, #1
 800dde4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800dde8:	687b      	ldr	r3, [r7, #4]
 800ddea:	2201      	movs	r2, #1
 800ddec:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800ddf0:	687b      	ldr	r3, [r7, #4]
 800ddf2:	2201      	movs	r2, #1
 800ddf4:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800ddf8:	687b      	ldr	r3, [r7, #4]
 800ddfa:	2201      	movs	r2, #1
 800ddfc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800de00:	2300      	movs	r3, #0
}
 800de02:	4618      	mov	r0, r3
 800de04:	3708      	adds	r7, #8
 800de06:	46bd      	mov	sp, r7
 800de08:	bd80      	pop	{r7, pc}

0800de0a <HAL_TIM_IC_MspInit>:
  * @brief  Initializes the TIM Input Capture MSP.
  * @param  htim TIM Input Capture handle
  * @retval None
  */
__weak void HAL_TIM_IC_MspInit(TIM_HandleTypeDef *htim)
{
 800de0a:	b480      	push	{r7}
 800de0c:	b083      	sub	sp, #12
 800de0e:	af00      	add	r7, sp, #0
 800de10:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_MspInit could be implemented in the user file
   */
}
 800de12:	bf00      	nop
 800de14:	370c      	adds	r7, #12
 800de16:	46bd      	mov	sp, r7
 800de18:	f85d 7b04 	ldr.w	r7, [sp], #4
 800de1c:	4770      	bx	lr
	...

0800de20 <HAL_TIM_IC_Start_DMA>:
  * @param  pData The destination Buffer address.
  * @param  Length The length of data to be transferred from TIM peripheral to memory.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Start_DMA(TIM_HandleTypeDef *htim, uint32_t Channel, uint32_t *pData, uint16_t Length)
{
 800de20:	b580      	push	{r7, lr}
 800de22:	b086      	sub	sp, #24
 800de24:	af00      	add	r7, sp, #0
 800de26:	60f8      	str	r0, [r7, #12]
 800de28:	60b9      	str	r1, [r7, #8]
 800de2a:	607a      	str	r2, [r7, #4]
 800de2c:	807b      	strh	r3, [r7, #2]
  uint32_t tmpsmcr;
  HAL_TIM_ChannelStateTypeDef channel_state = TIM_CHANNEL_STATE_GET(htim, Channel);
 800de2e:	68bb      	ldr	r3, [r7, #8]
 800de30:	2b00      	cmp	r3, #0
 800de32:	d104      	bne.n	800de3e <HAL_TIM_IC_Start_DMA+0x1e>
 800de34:	68fb      	ldr	r3, [r7, #12]
 800de36:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800de3a:	b2db      	uxtb	r3, r3
 800de3c:	e023      	b.n	800de86 <HAL_TIM_IC_Start_DMA+0x66>
 800de3e:	68bb      	ldr	r3, [r7, #8]
 800de40:	2b04      	cmp	r3, #4
 800de42:	d104      	bne.n	800de4e <HAL_TIM_IC_Start_DMA+0x2e>
 800de44:	68fb      	ldr	r3, [r7, #12]
 800de46:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 800de4a:	b2db      	uxtb	r3, r3
 800de4c:	e01b      	b.n	800de86 <HAL_TIM_IC_Start_DMA+0x66>
 800de4e:	68bb      	ldr	r3, [r7, #8]
 800de50:	2b08      	cmp	r3, #8
 800de52:	d104      	bne.n	800de5e <HAL_TIM_IC_Start_DMA+0x3e>
 800de54:	68fb      	ldr	r3, [r7, #12]
 800de56:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800de5a:	b2db      	uxtb	r3, r3
 800de5c:	e013      	b.n	800de86 <HAL_TIM_IC_Start_DMA+0x66>
 800de5e:	68bb      	ldr	r3, [r7, #8]
 800de60:	2b0c      	cmp	r3, #12
 800de62:	d104      	bne.n	800de6e <HAL_TIM_IC_Start_DMA+0x4e>
 800de64:	68fb      	ldr	r3, [r7, #12]
 800de66:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800de6a:	b2db      	uxtb	r3, r3
 800de6c:	e00b      	b.n	800de86 <HAL_TIM_IC_Start_DMA+0x66>
 800de6e:	68bb      	ldr	r3, [r7, #8]
 800de70:	2b10      	cmp	r3, #16
 800de72:	d104      	bne.n	800de7e <HAL_TIM_IC_Start_DMA+0x5e>
 800de74:	68fb      	ldr	r3, [r7, #12]
 800de76:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800de7a:	b2db      	uxtb	r3, r3
 800de7c:	e003      	b.n	800de86 <HAL_TIM_IC_Start_DMA+0x66>
 800de7e:	68fb      	ldr	r3, [r7, #12]
 800de80:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 800de84:	b2db      	uxtb	r3, r3
 800de86:	75fb      	strb	r3, [r7, #23]
  HAL_TIM_ChannelStateTypeDef complementary_channel_state = TIM_CHANNEL_N_STATE_GET(htim, Channel);
 800de88:	68bb      	ldr	r3, [r7, #8]
 800de8a:	2b00      	cmp	r3, #0
 800de8c:	d104      	bne.n	800de98 <HAL_TIM_IC_Start_DMA+0x78>
 800de8e:	68fb      	ldr	r3, [r7, #12]
 800de90:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800de94:	b2db      	uxtb	r3, r3
 800de96:	e013      	b.n	800dec0 <HAL_TIM_IC_Start_DMA+0xa0>
 800de98:	68bb      	ldr	r3, [r7, #8]
 800de9a:	2b04      	cmp	r3, #4
 800de9c:	d104      	bne.n	800dea8 <HAL_TIM_IC_Start_DMA+0x88>
 800de9e:	68fb      	ldr	r3, [r7, #12]
 800dea0:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800dea4:	b2db      	uxtb	r3, r3
 800dea6:	e00b      	b.n	800dec0 <HAL_TIM_IC_Start_DMA+0xa0>
 800dea8:	68bb      	ldr	r3, [r7, #8]
 800deaa:	2b08      	cmp	r3, #8
 800deac:	d104      	bne.n	800deb8 <HAL_TIM_IC_Start_DMA+0x98>
 800deae:	68fb      	ldr	r3, [r7, #12]
 800deb0:	f893 3046 	ldrb.w	r3, [r3, #70]	; 0x46
 800deb4:	b2db      	uxtb	r3, r3
 800deb6:	e003      	b.n	800dec0 <HAL_TIM_IC_Start_DMA+0xa0>
 800deb8:	68fb      	ldr	r3, [r7, #12]
 800deba:	f893 3047 	ldrb.w	r3, [r3, #71]	; 0x47
 800debe:	b2db      	uxtb	r3, r3
 800dec0:	75bb      	strb	r3, [r7, #22]
  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));
  assert_param(IS_TIM_DMA_CC_INSTANCE(htim->Instance));

  /* Set the TIM channel state */
  if ((channel_state == HAL_TIM_CHANNEL_STATE_BUSY)
 800dec2:	7dfb      	ldrb	r3, [r7, #23]
 800dec4:	2b02      	cmp	r3, #2
 800dec6:	d002      	beq.n	800dece <HAL_TIM_IC_Start_DMA+0xae>
   || (complementary_channel_state == HAL_TIM_CHANNEL_STATE_BUSY))
 800dec8:	7dbb      	ldrb	r3, [r7, #22]
 800deca:	2b02      	cmp	r3, #2
 800decc:	d101      	bne.n	800ded2 <HAL_TIM_IC_Start_DMA+0xb2>
  {
    return HAL_BUSY;
 800dece:	2302      	movs	r3, #2
 800ded0:	e128      	b.n	800e124 <HAL_TIM_IC_Start_DMA+0x304>
  }
  else if ((channel_state == HAL_TIM_CHANNEL_STATE_READY)
 800ded2:	7dfb      	ldrb	r3, [r7, #23]
 800ded4:	2b01      	cmp	r3, #1
 800ded6:	d153      	bne.n	800df80 <HAL_TIM_IC_Start_DMA+0x160>
        && (complementary_channel_state == HAL_TIM_CHANNEL_STATE_READY))
 800ded8:	7dbb      	ldrb	r3, [r7, #22]
 800deda:	2b01      	cmp	r3, #1
 800dedc:	d150      	bne.n	800df80 <HAL_TIM_IC_Start_DMA+0x160>
  {
    if ((pData == NULL) && (Length > 0U))
 800dede:	687b      	ldr	r3, [r7, #4]
 800dee0:	2b00      	cmp	r3, #0
 800dee2:	d104      	bne.n	800deee <HAL_TIM_IC_Start_DMA+0xce>
 800dee4:	887b      	ldrh	r3, [r7, #2]
 800dee6:	2b00      	cmp	r3, #0
 800dee8:	d001      	beq.n	800deee <HAL_TIM_IC_Start_DMA+0xce>
    {
      return HAL_ERROR;
 800deea:	2301      	movs	r3, #1
 800deec:	e11a      	b.n	800e124 <HAL_TIM_IC_Start_DMA+0x304>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800deee:	68bb      	ldr	r3, [r7, #8]
 800def0:	2b00      	cmp	r3, #0
 800def2:	d104      	bne.n	800defe <HAL_TIM_IC_Start_DMA+0xde>
 800def4:	68fb      	ldr	r3, [r7, #12]
 800def6:	2202      	movs	r2, #2
 800def8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800defc:	e023      	b.n	800df46 <HAL_TIM_IC_Start_DMA+0x126>
 800defe:	68bb      	ldr	r3, [r7, #8]
 800df00:	2b04      	cmp	r3, #4
 800df02:	d104      	bne.n	800df0e <HAL_TIM_IC_Start_DMA+0xee>
 800df04:	68fb      	ldr	r3, [r7, #12]
 800df06:	2202      	movs	r2, #2
 800df08:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800df0c:	e01b      	b.n	800df46 <HAL_TIM_IC_Start_DMA+0x126>
 800df0e:	68bb      	ldr	r3, [r7, #8]
 800df10:	2b08      	cmp	r3, #8
 800df12:	d104      	bne.n	800df1e <HAL_TIM_IC_Start_DMA+0xfe>
 800df14:	68fb      	ldr	r3, [r7, #12]
 800df16:	2202      	movs	r2, #2
 800df18:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800df1c:	e013      	b.n	800df46 <HAL_TIM_IC_Start_DMA+0x126>
 800df1e:	68bb      	ldr	r3, [r7, #8]
 800df20:	2b0c      	cmp	r3, #12
 800df22:	d104      	bne.n	800df2e <HAL_TIM_IC_Start_DMA+0x10e>
 800df24:	68fb      	ldr	r3, [r7, #12]
 800df26:	2202      	movs	r2, #2
 800df28:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800df2c:	e00b      	b.n	800df46 <HAL_TIM_IC_Start_DMA+0x126>
 800df2e:	68bb      	ldr	r3, [r7, #8]
 800df30:	2b10      	cmp	r3, #16
 800df32:	d104      	bne.n	800df3e <HAL_TIM_IC_Start_DMA+0x11e>
 800df34:	68fb      	ldr	r3, [r7, #12]
 800df36:	2202      	movs	r2, #2
 800df38:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800df3c:	e003      	b.n	800df46 <HAL_TIM_IC_Start_DMA+0x126>
 800df3e:	68fb      	ldr	r3, [r7, #12]
 800df40:	2202      	movs	r2, #2
 800df42:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
      TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800df46:	68bb      	ldr	r3, [r7, #8]
 800df48:	2b00      	cmp	r3, #0
 800df4a:	d104      	bne.n	800df56 <HAL_TIM_IC_Start_DMA+0x136>
 800df4c:	68fb      	ldr	r3, [r7, #12]
 800df4e:	2202      	movs	r2, #2
 800df50:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
    if ((pData == NULL) && (Length > 0U))
 800df54:	e016      	b.n	800df84 <HAL_TIM_IC_Start_DMA+0x164>
      TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800df56:	68bb      	ldr	r3, [r7, #8]
 800df58:	2b04      	cmp	r3, #4
 800df5a:	d104      	bne.n	800df66 <HAL_TIM_IC_Start_DMA+0x146>
 800df5c:	68fb      	ldr	r3, [r7, #12]
 800df5e:	2202      	movs	r2, #2
 800df60:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    if ((pData == NULL) && (Length > 0U))
 800df64:	e00e      	b.n	800df84 <HAL_TIM_IC_Start_DMA+0x164>
      TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800df66:	68bb      	ldr	r3, [r7, #8]
 800df68:	2b08      	cmp	r3, #8
 800df6a:	d104      	bne.n	800df76 <HAL_TIM_IC_Start_DMA+0x156>
 800df6c:	68fb      	ldr	r3, [r7, #12]
 800df6e:	2202      	movs	r2, #2
 800df70:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
    if ((pData == NULL) && (Length > 0U))
 800df74:	e006      	b.n	800df84 <HAL_TIM_IC_Start_DMA+0x164>
      TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800df76:	68fb      	ldr	r3, [r7, #12]
 800df78:	2202      	movs	r2, #2
 800df7a:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47
    if ((pData == NULL) && (Length > 0U))
 800df7e:	e001      	b.n	800df84 <HAL_TIM_IC_Start_DMA+0x164>
    }
  }
  else
  {
    return HAL_ERROR;
 800df80:	2301      	movs	r3, #1
 800df82:	e0cf      	b.n	800e124 <HAL_TIM_IC_Start_DMA+0x304>
  }

  switch (Channel)
 800df84:	68bb      	ldr	r3, [r7, #8]
 800df86:	2b0c      	cmp	r3, #12
 800df88:	f200 80ae 	bhi.w	800e0e8 <HAL_TIM_IC_Start_DMA+0x2c8>
 800df8c:	a201      	add	r2, pc, #4	; (adr r2, 800df94 <HAL_TIM_IC_Start_DMA+0x174>)
 800df8e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800df92:	bf00      	nop
 800df94:	0800dfc9 	.word	0x0800dfc9
 800df98:	0800e0e9 	.word	0x0800e0e9
 800df9c:	0800e0e9 	.word	0x0800e0e9
 800dfa0:	0800e0e9 	.word	0x0800e0e9
 800dfa4:	0800e011 	.word	0x0800e011
 800dfa8:	0800e0e9 	.word	0x0800e0e9
 800dfac:	0800e0e9 	.word	0x0800e0e9
 800dfb0:	0800e0e9 	.word	0x0800e0e9
 800dfb4:	0800e059 	.word	0x0800e059
 800dfb8:	0800e0e9 	.word	0x0800e0e9
 800dfbc:	0800e0e9 	.word	0x0800e0e9
 800dfc0:	0800e0e9 	.word	0x0800e0e9
 800dfc4:	0800e0a1 	.word	0x0800e0a1
  {
    case TIM_CHANNEL_1:
    {
      /* Set the DMA capture callbacks */
      htim->hdma[TIM_DMA_ID_CC1]->XferCpltCallback = TIM_DMACaptureCplt;
 800dfc8:	68fb      	ldr	r3, [r7, #12]
 800dfca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800dfcc:	4a57      	ldr	r2, [pc, #348]	; (800e12c <HAL_TIM_IC_Start_DMA+0x30c>)
 800dfce:	62da      	str	r2, [r3, #44]	; 0x2c
      htim->hdma[TIM_DMA_ID_CC1]->XferHalfCpltCallback = TIM_DMACaptureHalfCplt;
 800dfd0:	68fb      	ldr	r3, [r7, #12]
 800dfd2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800dfd4:	4a56      	ldr	r2, [pc, #344]	; (800e130 <HAL_TIM_IC_Start_DMA+0x310>)
 800dfd6:	631a      	str	r2, [r3, #48]	; 0x30

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC1]->XferErrorCallback = TIM_DMAError ;
 800dfd8:	68fb      	ldr	r3, [r7, #12]
 800dfda:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800dfdc:	4a55      	ldr	r2, [pc, #340]	; (800e134 <HAL_TIM_IC_Start_DMA+0x314>)
 800dfde:	635a      	str	r2, [r3, #52]	; 0x34

      /* Enable the DMA channel */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC1], (uint32_t)&htim->Instance->CCR1, (uint32_t)pData, Length) != HAL_OK)
 800dfe0:	68fb      	ldr	r3, [r7, #12]
 800dfe2:	6a58      	ldr	r0, [r3, #36]	; 0x24
 800dfe4:	68fb      	ldr	r3, [r7, #12]
 800dfe6:	681b      	ldr	r3, [r3, #0]
 800dfe8:	3334      	adds	r3, #52	; 0x34
 800dfea:	4619      	mov	r1, r3
 800dfec:	687a      	ldr	r2, [r7, #4]
 800dfee:	887b      	ldrh	r3, [r7, #2]
 800dff0:	f7fd fe3a 	bl	800bc68 <HAL_DMA_Start_IT>
 800dff4:	4603      	mov	r3, r0
 800dff6:	2b00      	cmp	r3, #0
 800dff8:	d001      	beq.n	800dffe <HAL_TIM_IC_Start_DMA+0x1de>
      {
        return HAL_ERROR;
 800dffa:	2301      	movs	r3, #1
 800dffc:	e092      	b.n	800e124 <HAL_TIM_IC_Start_DMA+0x304>
      }
      /* Enable the TIM Capture/Compare 1 DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC1);
 800dffe:	68fb      	ldr	r3, [r7, #12]
 800e000:	681b      	ldr	r3, [r3, #0]
 800e002:	68da      	ldr	r2, [r3, #12]
 800e004:	68fb      	ldr	r3, [r7, #12]
 800e006:	681b      	ldr	r3, [r3, #0]
 800e008:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800e00c:	60da      	str	r2, [r3, #12]
      break;
 800e00e:	e06c      	b.n	800e0ea <HAL_TIM_IC_Start_DMA+0x2ca>
    }

    case TIM_CHANNEL_2:
    {
      /* Set the DMA capture callbacks */
      htim->hdma[TIM_DMA_ID_CC2]->XferCpltCallback = TIM_DMACaptureCplt;
 800e010:	68fb      	ldr	r3, [r7, #12]
 800e012:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800e014:	4a45      	ldr	r2, [pc, #276]	; (800e12c <HAL_TIM_IC_Start_DMA+0x30c>)
 800e016:	62da      	str	r2, [r3, #44]	; 0x2c
      htim->hdma[TIM_DMA_ID_CC2]->XferHalfCpltCallback = TIM_DMACaptureHalfCplt;
 800e018:	68fb      	ldr	r3, [r7, #12]
 800e01a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800e01c:	4a44      	ldr	r2, [pc, #272]	; (800e130 <HAL_TIM_IC_Start_DMA+0x310>)
 800e01e:	631a      	str	r2, [r3, #48]	; 0x30

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC2]->XferErrorCallback = TIM_DMAError ;
 800e020:	68fb      	ldr	r3, [r7, #12]
 800e022:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800e024:	4a43      	ldr	r2, [pc, #268]	; (800e134 <HAL_TIM_IC_Start_DMA+0x314>)
 800e026:	635a      	str	r2, [r3, #52]	; 0x34

      /* Enable the DMA channel */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC2], (uint32_t)&htim->Instance->CCR2, (uint32_t)pData, Length) != HAL_OK)
 800e028:	68fb      	ldr	r3, [r7, #12]
 800e02a:	6a98      	ldr	r0, [r3, #40]	; 0x28
 800e02c:	68fb      	ldr	r3, [r7, #12]
 800e02e:	681b      	ldr	r3, [r3, #0]
 800e030:	3338      	adds	r3, #56	; 0x38
 800e032:	4619      	mov	r1, r3
 800e034:	687a      	ldr	r2, [r7, #4]
 800e036:	887b      	ldrh	r3, [r7, #2]
 800e038:	f7fd fe16 	bl	800bc68 <HAL_DMA_Start_IT>
 800e03c:	4603      	mov	r3, r0
 800e03e:	2b00      	cmp	r3, #0
 800e040:	d001      	beq.n	800e046 <HAL_TIM_IC_Start_DMA+0x226>
      {
        return HAL_ERROR;
 800e042:	2301      	movs	r3, #1
 800e044:	e06e      	b.n	800e124 <HAL_TIM_IC_Start_DMA+0x304>
      }
      /* Enable the TIM Capture/Compare 2  DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC2);
 800e046:	68fb      	ldr	r3, [r7, #12]
 800e048:	681b      	ldr	r3, [r3, #0]
 800e04a:	68da      	ldr	r2, [r3, #12]
 800e04c:	68fb      	ldr	r3, [r7, #12]
 800e04e:	681b      	ldr	r3, [r3, #0]
 800e050:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800e054:	60da      	str	r2, [r3, #12]
      break;
 800e056:	e048      	b.n	800e0ea <HAL_TIM_IC_Start_DMA+0x2ca>
    }

    case TIM_CHANNEL_3:
    {
      /* Set the DMA capture callbacks */
      htim->hdma[TIM_DMA_ID_CC3]->XferCpltCallback = TIM_DMACaptureCplt;
 800e058:	68fb      	ldr	r3, [r7, #12]
 800e05a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e05c:	4a33      	ldr	r2, [pc, #204]	; (800e12c <HAL_TIM_IC_Start_DMA+0x30c>)
 800e05e:	62da      	str	r2, [r3, #44]	; 0x2c
      htim->hdma[TIM_DMA_ID_CC3]->XferHalfCpltCallback = TIM_DMACaptureHalfCplt;
 800e060:	68fb      	ldr	r3, [r7, #12]
 800e062:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e064:	4a32      	ldr	r2, [pc, #200]	; (800e130 <HAL_TIM_IC_Start_DMA+0x310>)
 800e066:	631a      	str	r2, [r3, #48]	; 0x30

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC3]->XferErrorCallback = TIM_DMAError ;
 800e068:	68fb      	ldr	r3, [r7, #12]
 800e06a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e06c:	4a31      	ldr	r2, [pc, #196]	; (800e134 <HAL_TIM_IC_Start_DMA+0x314>)
 800e06e:	635a      	str	r2, [r3, #52]	; 0x34

      /* Enable the DMA channel */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC3], (uint32_t)&htim->Instance->CCR3, (uint32_t)pData, Length) != HAL_OK)
 800e070:	68fb      	ldr	r3, [r7, #12]
 800e072:	6ad8      	ldr	r0, [r3, #44]	; 0x2c
 800e074:	68fb      	ldr	r3, [r7, #12]
 800e076:	681b      	ldr	r3, [r3, #0]
 800e078:	333c      	adds	r3, #60	; 0x3c
 800e07a:	4619      	mov	r1, r3
 800e07c:	687a      	ldr	r2, [r7, #4]
 800e07e:	887b      	ldrh	r3, [r7, #2]
 800e080:	f7fd fdf2 	bl	800bc68 <HAL_DMA_Start_IT>
 800e084:	4603      	mov	r3, r0
 800e086:	2b00      	cmp	r3, #0
 800e088:	d001      	beq.n	800e08e <HAL_TIM_IC_Start_DMA+0x26e>
      {
        return HAL_ERROR;
 800e08a:	2301      	movs	r3, #1
 800e08c:	e04a      	b.n	800e124 <HAL_TIM_IC_Start_DMA+0x304>
      }
      /* Enable the TIM Capture/Compare 3  DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC3);
 800e08e:	68fb      	ldr	r3, [r7, #12]
 800e090:	681b      	ldr	r3, [r3, #0]
 800e092:	68da      	ldr	r2, [r3, #12]
 800e094:	68fb      	ldr	r3, [r7, #12]
 800e096:	681b      	ldr	r3, [r3, #0]
 800e098:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800e09c:	60da      	str	r2, [r3, #12]
      break;
 800e09e:	e024      	b.n	800e0ea <HAL_TIM_IC_Start_DMA+0x2ca>
    }

    case TIM_CHANNEL_4:
    {
      /* Set the DMA capture callbacks */
      htim->hdma[TIM_DMA_ID_CC4]->XferCpltCallback = TIM_DMACaptureCplt;
 800e0a0:	68fb      	ldr	r3, [r7, #12]
 800e0a2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800e0a4:	4a21      	ldr	r2, [pc, #132]	; (800e12c <HAL_TIM_IC_Start_DMA+0x30c>)
 800e0a6:	62da      	str	r2, [r3, #44]	; 0x2c
      htim->hdma[TIM_DMA_ID_CC4]->XferHalfCpltCallback = TIM_DMACaptureHalfCplt;
 800e0a8:	68fb      	ldr	r3, [r7, #12]
 800e0aa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800e0ac:	4a20      	ldr	r2, [pc, #128]	; (800e130 <HAL_TIM_IC_Start_DMA+0x310>)
 800e0ae:	631a      	str	r2, [r3, #48]	; 0x30

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC4]->XferErrorCallback = TIM_DMAError ;
 800e0b0:	68fb      	ldr	r3, [r7, #12]
 800e0b2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800e0b4:	4a1f      	ldr	r2, [pc, #124]	; (800e134 <HAL_TIM_IC_Start_DMA+0x314>)
 800e0b6:	635a      	str	r2, [r3, #52]	; 0x34

      /* Enable the DMA channel */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC4], (uint32_t)&htim->Instance->CCR4, (uint32_t)pData, Length) != HAL_OK)
 800e0b8:	68fb      	ldr	r3, [r7, #12]
 800e0ba:	6b18      	ldr	r0, [r3, #48]	; 0x30
 800e0bc:	68fb      	ldr	r3, [r7, #12]
 800e0be:	681b      	ldr	r3, [r3, #0]
 800e0c0:	3340      	adds	r3, #64	; 0x40
 800e0c2:	4619      	mov	r1, r3
 800e0c4:	687a      	ldr	r2, [r7, #4]
 800e0c6:	887b      	ldrh	r3, [r7, #2]
 800e0c8:	f7fd fdce 	bl	800bc68 <HAL_DMA_Start_IT>
 800e0cc:	4603      	mov	r3, r0
 800e0ce:	2b00      	cmp	r3, #0
 800e0d0:	d001      	beq.n	800e0d6 <HAL_TIM_IC_Start_DMA+0x2b6>
      {
        return HAL_ERROR;
 800e0d2:	2301      	movs	r3, #1
 800e0d4:	e026      	b.n	800e124 <HAL_TIM_IC_Start_DMA+0x304>
      }
      /* Enable the TIM Capture/Compare 4  DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC4);
 800e0d6:	68fb      	ldr	r3, [r7, #12]
 800e0d8:	681b      	ldr	r3, [r3, #0]
 800e0da:	68da      	ldr	r2, [r3, #12]
 800e0dc:	68fb      	ldr	r3, [r7, #12]
 800e0de:	681b      	ldr	r3, [r3, #0]
 800e0e0:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 800e0e4:	60da      	str	r2, [r3, #12]
      break;
 800e0e6:	e000      	b.n	800e0ea <HAL_TIM_IC_Start_DMA+0x2ca>
    }

    default:
      break;
 800e0e8:	bf00      	nop
  }

  /* Enable the Input Capture channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800e0ea:	68fb      	ldr	r3, [r7, #12]
 800e0ec:	681b      	ldr	r3, [r3, #0]
 800e0ee:	2201      	movs	r2, #1
 800e0f0:	68b9      	ldr	r1, [r7, #8]
 800e0f2:	4618      	mov	r0, r3
 800e0f4:	f001 fd5c 	bl	800fbb0 <TIM_CCxChannelCmd>

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800e0f8:	68fb      	ldr	r3, [r7, #12]
 800e0fa:	681b      	ldr	r3, [r3, #0]
 800e0fc:	689a      	ldr	r2, [r3, #8]
 800e0fe:	4b0e      	ldr	r3, [pc, #56]	; (800e138 <HAL_TIM_IC_Start_DMA+0x318>)
 800e100:	4013      	ands	r3, r2
 800e102:	613b      	str	r3, [r7, #16]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800e104:	693b      	ldr	r3, [r7, #16]
 800e106:	2b06      	cmp	r3, #6
 800e108:	d00b      	beq.n	800e122 <HAL_TIM_IC_Start_DMA+0x302>
 800e10a:	693b      	ldr	r3, [r7, #16]
 800e10c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800e110:	d007      	beq.n	800e122 <HAL_TIM_IC_Start_DMA+0x302>
  {
    __HAL_TIM_ENABLE(htim);
 800e112:	68fb      	ldr	r3, [r7, #12]
 800e114:	681b      	ldr	r3, [r3, #0]
 800e116:	681a      	ldr	r2, [r3, #0]
 800e118:	68fb      	ldr	r3, [r7, #12]
 800e11a:	681b      	ldr	r3, [r3, #0]
 800e11c:	f042 0201 	orr.w	r2, r2, #1
 800e120:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800e122:	2300      	movs	r3, #0
}
 800e124:	4618      	mov	r0, r3
 800e126:	3718      	adds	r7, #24
 800e128:	46bd      	mov	sp, r7
 800e12a:	bd80      	pop	{r7, pc}
 800e12c:	0800edd7 	.word	0x0800edd7
 800e130:	0800ee9f 	.word	0x0800ee9f
 800e134:	0800ed45 	.word	0x0800ed45
 800e138:	00010007 	.word	0x00010007

0800e13c <HAL_TIM_IC_Stop_DMA>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Stop_DMA(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800e13c:	b580      	push	{r7, lr}
 800e13e:	b082      	sub	sp, #8
 800e140:	af00      	add	r7, sp, #0
 800e142:	6078      	str	r0, [r7, #4]
 800e144:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));
  assert_param(IS_TIM_DMA_CC_INSTANCE(htim->Instance));

  switch (Channel)
 800e146:	683b      	ldr	r3, [r7, #0]
 800e148:	2b0c      	cmp	r3, #12
 800e14a:	d855      	bhi.n	800e1f8 <HAL_TIM_IC_Stop_DMA+0xbc>
 800e14c:	a201      	add	r2, pc, #4	; (adr r2, 800e154 <HAL_TIM_IC_Stop_DMA+0x18>)
 800e14e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e152:	bf00      	nop
 800e154:	0800e189 	.word	0x0800e189
 800e158:	0800e1f9 	.word	0x0800e1f9
 800e15c:	0800e1f9 	.word	0x0800e1f9
 800e160:	0800e1f9 	.word	0x0800e1f9
 800e164:	0800e1a5 	.word	0x0800e1a5
 800e168:	0800e1f9 	.word	0x0800e1f9
 800e16c:	0800e1f9 	.word	0x0800e1f9
 800e170:	0800e1f9 	.word	0x0800e1f9
 800e174:	0800e1c1 	.word	0x0800e1c1
 800e178:	0800e1f9 	.word	0x0800e1f9
 800e17c:	0800e1f9 	.word	0x0800e1f9
 800e180:	0800e1f9 	.word	0x0800e1f9
 800e184:	0800e1dd 	.word	0x0800e1dd
  {
    case TIM_CHANNEL_1:
    {
      /* Disable the TIM Capture/Compare 1 DMA request */
      __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC1);
 800e188:	687b      	ldr	r3, [r7, #4]
 800e18a:	681b      	ldr	r3, [r3, #0]
 800e18c:	68da      	ldr	r2, [r3, #12]
 800e18e:	687b      	ldr	r3, [r7, #4]
 800e190:	681b      	ldr	r3, [r3, #0]
 800e192:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 800e196:	60da      	str	r2, [r3, #12]
      (void)HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC1]);
 800e198:	687b      	ldr	r3, [r7, #4]
 800e19a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e19c:	4618      	mov	r0, r3
 800e19e:	f7fd fe37 	bl	800be10 <HAL_DMA_Abort_IT>
      break;
 800e1a2:	e02a      	b.n	800e1fa <HAL_TIM_IC_Stop_DMA+0xbe>
    }

    case TIM_CHANNEL_2:
    {
      /* Disable the TIM Capture/Compare 2 DMA request */
      __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC2);
 800e1a4:	687b      	ldr	r3, [r7, #4]
 800e1a6:	681b      	ldr	r3, [r3, #0]
 800e1a8:	68da      	ldr	r2, [r3, #12]
 800e1aa:	687b      	ldr	r3, [r7, #4]
 800e1ac:	681b      	ldr	r3, [r3, #0]
 800e1ae:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800e1b2:	60da      	str	r2, [r3, #12]
      (void)HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC2]);
 800e1b4:	687b      	ldr	r3, [r7, #4]
 800e1b6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800e1b8:	4618      	mov	r0, r3
 800e1ba:	f7fd fe29 	bl	800be10 <HAL_DMA_Abort_IT>
      break;
 800e1be:	e01c      	b.n	800e1fa <HAL_TIM_IC_Stop_DMA+0xbe>
    }

    case TIM_CHANNEL_3:
    {
      /* Disable the TIM Capture/Compare 3  DMA request */
      __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC3);
 800e1c0:	687b      	ldr	r3, [r7, #4]
 800e1c2:	681b      	ldr	r3, [r3, #0]
 800e1c4:	68da      	ldr	r2, [r3, #12]
 800e1c6:	687b      	ldr	r3, [r7, #4]
 800e1c8:	681b      	ldr	r3, [r3, #0]
 800e1ca:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800e1ce:	60da      	str	r2, [r3, #12]
      (void)HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC3]);
 800e1d0:	687b      	ldr	r3, [r7, #4]
 800e1d2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e1d4:	4618      	mov	r0, r3
 800e1d6:	f7fd fe1b 	bl	800be10 <HAL_DMA_Abort_IT>
      break;
 800e1da:	e00e      	b.n	800e1fa <HAL_TIM_IC_Stop_DMA+0xbe>
    }

    case TIM_CHANNEL_4:
    {
      /* Disable the TIM Capture/Compare 4  DMA request */
      __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC4);
 800e1dc:	687b      	ldr	r3, [r7, #4]
 800e1de:	681b      	ldr	r3, [r3, #0]
 800e1e0:	68da      	ldr	r2, [r3, #12]
 800e1e2:	687b      	ldr	r3, [r7, #4]
 800e1e4:	681b      	ldr	r3, [r3, #0]
 800e1e6:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 800e1ea:	60da      	str	r2, [r3, #12]
      (void)HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC4]);
 800e1ec:	687b      	ldr	r3, [r7, #4]
 800e1ee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800e1f0:	4618      	mov	r0, r3
 800e1f2:	f7fd fe0d 	bl	800be10 <HAL_DMA_Abort_IT>
      break;
 800e1f6:	e000      	b.n	800e1fa <HAL_TIM_IC_Stop_DMA+0xbe>
    }

    default:
      break;
 800e1f8:	bf00      	nop
  }

  /* Disable the Input Capture channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 800e1fa:	687b      	ldr	r3, [r7, #4]
 800e1fc:	681b      	ldr	r3, [r3, #0]
 800e1fe:	2200      	movs	r2, #0
 800e200:	6839      	ldr	r1, [r7, #0]
 800e202:	4618      	mov	r0, r3
 800e204:	f001 fcd4 	bl	800fbb0 <TIM_CCxChannelCmd>

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 800e208:	687b      	ldr	r3, [r7, #4]
 800e20a:	681b      	ldr	r3, [r3, #0]
 800e20c:	6a1a      	ldr	r2, [r3, #32]
 800e20e:	f241 1311 	movw	r3, #4369	; 0x1111
 800e212:	4013      	ands	r3, r2
 800e214:	2b00      	cmp	r3, #0
 800e216:	d10f      	bne.n	800e238 <HAL_TIM_IC_Stop_DMA+0xfc>
 800e218:	687b      	ldr	r3, [r7, #4]
 800e21a:	681b      	ldr	r3, [r3, #0]
 800e21c:	6a1a      	ldr	r2, [r3, #32]
 800e21e:	f244 4344 	movw	r3, #17476	; 0x4444
 800e222:	4013      	ands	r3, r2
 800e224:	2b00      	cmp	r3, #0
 800e226:	d107      	bne.n	800e238 <HAL_TIM_IC_Stop_DMA+0xfc>
 800e228:	687b      	ldr	r3, [r7, #4]
 800e22a:	681b      	ldr	r3, [r3, #0]
 800e22c:	681a      	ldr	r2, [r3, #0]
 800e22e:	687b      	ldr	r3, [r7, #4]
 800e230:	681b      	ldr	r3, [r3, #0]
 800e232:	f022 0201 	bic.w	r2, r2, #1
 800e236:	601a      	str	r2, [r3, #0]

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 800e238:	683b      	ldr	r3, [r7, #0]
 800e23a:	2b00      	cmp	r3, #0
 800e23c:	d104      	bne.n	800e248 <HAL_TIM_IC_Stop_DMA+0x10c>
 800e23e:	687b      	ldr	r3, [r7, #4]
 800e240:	2201      	movs	r2, #1
 800e242:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800e246:	e023      	b.n	800e290 <HAL_TIM_IC_Stop_DMA+0x154>
 800e248:	683b      	ldr	r3, [r7, #0]
 800e24a:	2b04      	cmp	r3, #4
 800e24c:	d104      	bne.n	800e258 <HAL_TIM_IC_Stop_DMA+0x11c>
 800e24e:	687b      	ldr	r3, [r7, #4]
 800e250:	2201      	movs	r2, #1
 800e252:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800e256:	e01b      	b.n	800e290 <HAL_TIM_IC_Stop_DMA+0x154>
 800e258:	683b      	ldr	r3, [r7, #0]
 800e25a:	2b08      	cmp	r3, #8
 800e25c:	d104      	bne.n	800e268 <HAL_TIM_IC_Stop_DMA+0x12c>
 800e25e:	687b      	ldr	r3, [r7, #4]
 800e260:	2201      	movs	r2, #1
 800e262:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800e266:	e013      	b.n	800e290 <HAL_TIM_IC_Stop_DMA+0x154>
 800e268:	683b      	ldr	r3, [r7, #0]
 800e26a:	2b0c      	cmp	r3, #12
 800e26c:	d104      	bne.n	800e278 <HAL_TIM_IC_Stop_DMA+0x13c>
 800e26e:	687b      	ldr	r3, [r7, #4]
 800e270:	2201      	movs	r2, #1
 800e272:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800e276:	e00b      	b.n	800e290 <HAL_TIM_IC_Stop_DMA+0x154>
 800e278:	683b      	ldr	r3, [r7, #0]
 800e27a:	2b10      	cmp	r3, #16
 800e27c:	d104      	bne.n	800e288 <HAL_TIM_IC_Stop_DMA+0x14c>
 800e27e:	687b      	ldr	r3, [r7, #4]
 800e280:	2201      	movs	r2, #1
 800e282:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800e286:	e003      	b.n	800e290 <HAL_TIM_IC_Stop_DMA+0x154>
 800e288:	687b      	ldr	r3, [r7, #4]
 800e28a:	2201      	movs	r2, #1
 800e28c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 800e290:	683b      	ldr	r3, [r7, #0]
 800e292:	2b00      	cmp	r3, #0
 800e294:	d104      	bne.n	800e2a0 <HAL_TIM_IC_Stop_DMA+0x164>
 800e296:	687b      	ldr	r3, [r7, #4]
 800e298:	2201      	movs	r2, #1
 800e29a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800e29e:	e013      	b.n	800e2c8 <HAL_TIM_IC_Stop_DMA+0x18c>
 800e2a0:	683b      	ldr	r3, [r7, #0]
 800e2a2:	2b04      	cmp	r3, #4
 800e2a4:	d104      	bne.n	800e2b0 <HAL_TIM_IC_Stop_DMA+0x174>
 800e2a6:	687b      	ldr	r3, [r7, #4]
 800e2a8:	2201      	movs	r2, #1
 800e2aa:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800e2ae:	e00b      	b.n	800e2c8 <HAL_TIM_IC_Stop_DMA+0x18c>
 800e2b0:	683b      	ldr	r3, [r7, #0]
 800e2b2:	2b08      	cmp	r3, #8
 800e2b4:	d104      	bne.n	800e2c0 <HAL_TIM_IC_Stop_DMA+0x184>
 800e2b6:	687b      	ldr	r3, [r7, #4]
 800e2b8:	2201      	movs	r2, #1
 800e2ba:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800e2be:	e003      	b.n	800e2c8 <HAL_TIM_IC_Stop_DMA+0x18c>
 800e2c0:	687b      	ldr	r3, [r7, #4]
 800e2c2:	2201      	movs	r2, #1
 800e2c4:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Return function status */
  return HAL_OK;
 800e2c8:	2300      	movs	r3, #0
}
 800e2ca:	4618      	mov	r0, r3
 800e2cc:	3708      	adds	r7, #8
 800e2ce:	46bd      	mov	sp, r7
 800e2d0:	bd80      	pop	{r7, pc}
 800e2d2:	bf00      	nop

0800e2d4 <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim,  TIM_Encoder_InitTypeDef *sConfig)
{
 800e2d4:	b580      	push	{r7, lr}
 800e2d6:	b086      	sub	sp, #24
 800e2d8:	af00      	add	r7, sp, #0
 800e2da:	6078      	str	r0, [r7, #4]
 800e2dc:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 800e2de:	687b      	ldr	r3, [r7, #4]
 800e2e0:	2b00      	cmp	r3, #0
 800e2e2:	d101      	bne.n	800e2e8 <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 800e2e4:	2301      	movs	r3, #1
 800e2e6:	e097      	b.n	800e418 <HAL_TIM_Encoder_Init+0x144>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC1Prescaler));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));

  if (htim->State == HAL_TIM_STATE_RESET)
 800e2e8:	687b      	ldr	r3, [r7, #4]
 800e2ea:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800e2ee:	b2db      	uxtb	r3, r3
 800e2f0:	2b00      	cmp	r3, #0
 800e2f2:	d106      	bne.n	800e302 <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800e2f4:	687b      	ldr	r3, [r7, #4]
 800e2f6:	2200      	movs	r2, #0
 800e2f8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 800e2fc:	6878      	ldr	r0, [r7, #4]
 800e2fe:	f7fa fc9d 	bl	8008c3c <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800e302:	687b      	ldr	r3, [r7, #4]
 800e304:	2202      	movs	r2, #2
 800e306:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 800e30a:	687b      	ldr	r3, [r7, #4]
 800e30c:	681b      	ldr	r3, [r3, #0]
 800e30e:	689b      	ldr	r3, [r3, #8]
 800e310:	687a      	ldr	r2, [r7, #4]
 800e312:	6812      	ldr	r2, [r2, #0]
 800e314:	f423 33a0 	bic.w	r3, r3, #81920	; 0x14000
 800e318:	f023 0307 	bic.w	r3, r3, #7
 800e31c:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800e31e:	687b      	ldr	r3, [r7, #4]
 800e320:	681a      	ldr	r2, [r3, #0]
 800e322:	687b      	ldr	r3, [r7, #4]
 800e324:	3304      	adds	r3, #4
 800e326:	4619      	mov	r1, r3
 800e328:	4610      	mov	r0, r2
 800e32a:	f000 fded 	bl	800ef08 <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800e32e:	687b      	ldr	r3, [r7, #4]
 800e330:	681b      	ldr	r3, [r3, #0]
 800e332:	689b      	ldr	r3, [r3, #8]
 800e334:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 800e336:	687b      	ldr	r3, [r7, #4]
 800e338:	681b      	ldr	r3, [r3, #0]
 800e33a:	699b      	ldr	r3, [r3, #24]
 800e33c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 800e33e:	687b      	ldr	r3, [r7, #4]
 800e340:	681b      	ldr	r3, [r3, #0]
 800e342:	6a1b      	ldr	r3, [r3, #32]
 800e344:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 800e346:	683b      	ldr	r3, [r7, #0]
 800e348:	681b      	ldr	r3, [r3, #0]
 800e34a:	697a      	ldr	r2, [r7, #20]
 800e34c:	4313      	orrs	r3, r2
 800e34e:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 800e350:	693b      	ldr	r3, [r7, #16]
 800e352:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800e356:	f023 0303 	bic.w	r3, r3, #3
 800e35a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 800e35c:	683b      	ldr	r3, [r7, #0]
 800e35e:	689a      	ldr	r2, [r3, #8]
 800e360:	683b      	ldr	r3, [r7, #0]
 800e362:	699b      	ldr	r3, [r3, #24]
 800e364:	021b      	lsls	r3, r3, #8
 800e366:	4313      	orrs	r3, r2
 800e368:	693a      	ldr	r2, [r7, #16]
 800e36a:	4313      	orrs	r3, r2
 800e36c:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 800e36e:	693b      	ldr	r3, [r7, #16]
 800e370:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 800e374:	f023 030c 	bic.w	r3, r3, #12
 800e378:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 800e37a:	693b      	ldr	r3, [r7, #16]
 800e37c:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800e380:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800e384:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 800e386:	683b      	ldr	r3, [r7, #0]
 800e388:	68da      	ldr	r2, [r3, #12]
 800e38a:	683b      	ldr	r3, [r7, #0]
 800e38c:	69db      	ldr	r3, [r3, #28]
 800e38e:	021b      	lsls	r3, r3, #8
 800e390:	4313      	orrs	r3, r2
 800e392:	693a      	ldr	r2, [r7, #16]
 800e394:	4313      	orrs	r3, r2
 800e396:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 800e398:	683b      	ldr	r3, [r7, #0]
 800e39a:	691b      	ldr	r3, [r3, #16]
 800e39c:	011a      	lsls	r2, r3, #4
 800e39e:	683b      	ldr	r3, [r7, #0]
 800e3a0:	6a1b      	ldr	r3, [r3, #32]
 800e3a2:	031b      	lsls	r3, r3, #12
 800e3a4:	4313      	orrs	r3, r2
 800e3a6:	693a      	ldr	r2, [r7, #16]
 800e3a8:	4313      	orrs	r3, r2
 800e3aa:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 800e3ac:	68fb      	ldr	r3, [r7, #12]
 800e3ae:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 800e3b2:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 800e3b4:	68fb      	ldr	r3, [r7, #12]
 800e3b6:	f023 0388 	bic.w	r3, r3, #136	; 0x88
 800e3ba:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 800e3bc:	683b      	ldr	r3, [r7, #0]
 800e3be:	685a      	ldr	r2, [r3, #4]
 800e3c0:	683b      	ldr	r3, [r7, #0]
 800e3c2:	695b      	ldr	r3, [r3, #20]
 800e3c4:	011b      	lsls	r3, r3, #4
 800e3c6:	4313      	orrs	r3, r2
 800e3c8:	68fa      	ldr	r2, [r7, #12]
 800e3ca:	4313      	orrs	r3, r2
 800e3cc:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 800e3ce:	687b      	ldr	r3, [r7, #4]
 800e3d0:	681b      	ldr	r3, [r3, #0]
 800e3d2:	697a      	ldr	r2, [r7, #20]
 800e3d4:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 800e3d6:	687b      	ldr	r3, [r7, #4]
 800e3d8:	681b      	ldr	r3, [r3, #0]
 800e3da:	693a      	ldr	r2, [r7, #16]
 800e3dc:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 800e3de:	687b      	ldr	r3, [r7, #4]
 800e3e0:	681b      	ldr	r3, [r3, #0]
 800e3e2:	68fa      	ldr	r2, [r7, #12]
 800e3e4:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800e3e6:	687b      	ldr	r3, [r7, #4]
 800e3e8:	2201      	movs	r2, #1
 800e3ea:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 800e3ee:	687b      	ldr	r3, [r7, #4]
 800e3f0:	2201      	movs	r2, #1
 800e3f2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 800e3f6:	687b      	ldr	r3, [r7, #4]
 800e3f8:	2201      	movs	r2, #1
 800e3fa:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 800e3fe:	687b      	ldr	r3, [r7, #4]
 800e400:	2201      	movs	r2, #1
 800e402:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 800e406:	687b      	ldr	r3, [r7, #4]
 800e408:	2201      	movs	r2, #1
 800e40a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800e40e:	687b      	ldr	r3, [r7, #4]
 800e410:	2201      	movs	r2, #1
 800e412:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800e416:	2300      	movs	r3, #0
}
 800e418:	4618      	mov	r0, r3
 800e41a:	3718      	adds	r7, #24
 800e41c:	46bd      	mov	sp, r7
 800e41e:	bd80      	pop	{r7, pc}

0800e420 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800e420:	b580      	push	{r7, lr}
 800e422:	b082      	sub	sp, #8
 800e424:	af00      	add	r7, sp, #0
 800e426:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800e428:	687b      	ldr	r3, [r7, #4]
 800e42a:	681b      	ldr	r3, [r3, #0]
 800e42c:	691b      	ldr	r3, [r3, #16]
 800e42e:	f003 0302 	and.w	r3, r3, #2
 800e432:	2b02      	cmp	r3, #2
 800e434:	d122      	bne.n	800e47c <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800e436:	687b      	ldr	r3, [r7, #4]
 800e438:	681b      	ldr	r3, [r3, #0]
 800e43a:	68db      	ldr	r3, [r3, #12]
 800e43c:	f003 0302 	and.w	r3, r3, #2
 800e440:	2b02      	cmp	r3, #2
 800e442:	d11b      	bne.n	800e47c <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800e444:	687b      	ldr	r3, [r7, #4]
 800e446:	681b      	ldr	r3, [r3, #0]
 800e448:	f06f 0202 	mvn.w	r2, #2
 800e44c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800e44e:	687b      	ldr	r3, [r7, #4]
 800e450:	2201      	movs	r2, #1
 800e452:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800e454:	687b      	ldr	r3, [r7, #4]
 800e456:	681b      	ldr	r3, [r3, #0]
 800e458:	699b      	ldr	r3, [r3, #24]
 800e45a:	f003 0303 	and.w	r3, r3, #3
 800e45e:	2b00      	cmp	r3, #0
 800e460:	d003      	beq.n	800e46a <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800e462:	6878      	ldr	r0, [r7, #4]
 800e464:	f7f8 f8bc 	bl	80065e0 <HAL_TIM_IC_CaptureCallback>
 800e468:	e005      	b.n	800e476 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800e46a:	6878      	ldr	r0, [r7, #4]
 800e46c:	f000 fc38 	bl	800ece0 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800e470:	6878      	ldr	r0, [r7, #4]
 800e472:	f000 fc49 	bl	800ed08 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800e476:	687b      	ldr	r3, [r7, #4]
 800e478:	2200      	movs	r2, #0
 800e47a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800e47c:	687b      	ldr	r3, [r7, #4]
 800e47e:	681b      	ldr	r3, [r3, #0]
 800e480:	691b      	ldr	r3, [r3, #16]
 800e482:	f003 0304 	and.w	r3, r3, #4
 800e486:	2b04      	cmp	r3, #4
 800e488:	d122      	bne.n	800e4d0 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800e48a:	687b      	ldr	r3, [r7, #4]
 800e48c:	681b      	ldr	r3, [r3, #0]
 800e48e:	68db      	ldr	r3, [r3, #12]
 800e490:	f003 0304 	and.w	r3, r3, #4
 800e494:	2b04      	cmp	r3, #4
 800e496:	d11b      	bne.n	800e4d0 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800e498:	687b      	ldr	r3, [r7, #4]
 800e49a:	681b      	ldr	r3, [r3, #0]
 800e49c:	f06f 0204 	mvn.w	r2, #4
 800e4a0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800e4a2:	687b      	ldr	r3, [r7, #4]
 800e4a4:	2202      	movs	r2, #2
 800e4a6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800e4a8:	687b      	ldr	r3, [r7, #4]
 800e4aa:	681b      	ldr	r3, [r3, #0]
 800e4ac:	699b      	ldr	r3, [r3, #24]
 800e4ae:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800e4b2:	2b00      	cmp	r3, #0
 800e4b4:	d003      	beq.n	800e4be <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800e4b6:	6878      	ldr	r0, [r7, #4]
 800e4b8:	f7f8 f892 	bl	80065e0 <HAL_TIM_IC_CaptureCallback>
 800e4bc:	e005      	b.n	800e4ca <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800e4be:	6878      	ldr	r0, [r7, #4]
 800e4c0:	f000 fc0e 	bl	800ece0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800e4c4:	6878      	ldr	r0, [r7, #4]
 800e4c6:	f000 fc1f 	bl	800ed08 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800e4ca:	687b      	ldr	r3, [r7, #4]
 800e4cc:	2200      	movs	r2, #0
 800e4ce:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800e4d0:	687b      	ldr	r3, [r7, #4]
 800e4d2:	681b      	ldr	r3, [r3, #0]
 800e4d4:	691b      	ldr	r3, [r3, #16]
 800e4d6:	f003 0308 	and.w	r3, r3, #8
 800e4da:	2b08      	cmp	r3, #8
 800e4dc:	d122      	bne.n	800e524 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800e4de:	687b      	ldr	r3, [r7, #4]
 800e4e0:	681b      	ldr	r3, [r3, #0]
 800e4e2:	68db      	ldr	r3, [r3, #12]
 800e4e4:	f003 0308 	and.w	r3, r3, #8
 800e4e8:	2b08      	cmp	r3, #8
 800e4ea:	d11b      	bne.n	800e524 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800e4ec:	687b      	ldr	r3, [r7, #4]
 800e4ee:	681b      	ldr	r3, [r3, #0]
 800e4f0:	f06f 0208 	mvn.w	r2, #8
 800e4f4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800e4f6:	687b      	ldr	r3, [r7, #4]
 800e4f8:	2204      	movs	r2, #4
 800e4fa:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800e4fc:	687b      	ldr	r3, [r7, #4]
 800e4fe:	681b      	ldr	r3, [r3, #0]
 800e500:	69db      	ldr	r3, [r3, #28]
 800e502:	f003 0303 	and.w	r3, r3, #3
 800e506:	2b00      	cmp	r3, #0
 800e508:	d003      	beq.n	800e512 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800e50a:	6878      	ldr	r0, [r7, #4]
 800e50c:	f7f8 f868 	bl	80065e0 <HAL_TIM_IC_CaptureCallback>
 800e510:	e005      	b.n	800e51e <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800e512:	6878      	ldr	r0, [r7, #4]
 800e514:	f000 fbe4 	bl	800ece0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800e518:	6878      	ldr	r0, [r7, #4]
 800e51a:	f000 fbf5 	bl	800ed08 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800e51e:	687b      	ldr	r3, [r7, #4]
 800e520:	2200      	movs	r2, #0
 800e522:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800e524:	687b      	ldr	r3, [r7, #4]
 800e526:	681b      	ldr	r3, [r3, #0]
 800e528:	691b      	ldr	r3, [r3, #16]
 800e52a:	f003 0310 	and.w	r3, r3, #16
 800e52e:	2b10      	cmp	r3, #16
 800e530:	d122      	bne.n	800e578 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800e532:	687b      	ldr	r3, [r7, #4]
 800e534:	681b      	ldr	r3, [r3, #0]
 800e536:	68db      	ldr	r3, [r3, #12]
 800e538:	f003 0310 	and.w	r3, r3, #16
 800e53c:	2b10      	cmp	r3, #16
 800e53e:	d11b      	bne.n	800e578 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800e540:	687b      	ldr	r3, [r7, #4]
 800e542:	681b      	ldr	r3, [r3, #0]
 800e544:	f06f 0210 	mvn.w	r2, #16
 800e548:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800e54a:	687b      	ldr	r3, [r7, #4]
 800e54c:	2208      	movs	r2, #8
 800e54e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800e550:	687b      	ldr	r3, [r7, #4]
 800e552:	681b      	ldr	r3, [r3, #0]
 800e554:	69db      	ldr	r3, [r3, #28]
 800e556:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800e55a:	2b00      	cmp	r3, #0
 800e55c:	d003      	beq.n	800e566 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800e55e:	6878      	ldr	r0, [r7, #4]
 800e560:	f7f8 f83e 	bl	80065e0 <HAL_TIM_IC_CaptureCallback>
 800e564:	e005      	b.n	800e572 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800e566:	6878      	ldr	r0, [r7, #4]
 800e568:	f000 fbba 	bl	800ece0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800e56c:	6878      	ldr	r0, [r7, #4]
 800e56e:	f000 fbcb 	bl	800ed08 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800e572:	687b      	ldr	r3, [r7, #4]
 800e574:	2200      	movs	r2, #0
 800e576:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800e578:	687b      	ldr	r3, [r7, #4]
 800e57a:	681b      	ldr	r3, [r3, #0]
 800e57c:	691b      	ldr	r3, [r3, #16]
 800e57e:	f003 0301 	and.w	r3, r3, #1
 800e582:	2b01      	cmp	r3, #1
 800e584:	d10e      	bne.n	800e5a4 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800e586:	687b      	ldr	r3, [r7, #4]
 800e588:	681b      	ldr	r3, [r3, #0]
 800e58a:	68db      	ldr	r3, [r3, #12]
 800e58c:	f003 0301 	and.w	r3, r3, #1
 800e590:	2b01      	cmp	r3, #1
 800e592:	d107      	bne.n	800e5a4 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800e594:	687b      	ldr	r3, [r7, #4]
 800e596:	681b      	ldr	r3, [r3, #0]
 800e598:	f06f 0201 	mvn.w	r2, #1
 800e59c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800e59e:	6878      	ldr	r0, [r7, #4]
 800e5a0:	f000 fb94 	bl	800eccc <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800e5a4:	687b      	ldr	r3, [r7, #4]
 800e5a6:	681b      	ldr	r3, [r3, #0]
 800e5a8:	691b      	ldr	r3, [r3, #16]
 800e5aa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800e5ae:	2b80      	cmp	r3, #128	; 0x80
 800e5b0:	d10e      	bne.n	800e5d0 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800e5b2:	687b      	ldr	r3, [r7, #4]
 800e5b4:	681b      	ldr	r3, [r3, #0]
 800e5b6:	68db      	ldr	r3, [r3, #12]
 800e5b8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800e5bc:	2b80      	cmp	r3, #128	; 0x80
 800e5be:	d107      	bne.n	800e5d0 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800e5c0:	687b      	ldr	r3, [r7, #4]
 800e5c2:	681b      	ldr	r3, [r3, #0]
 800e5c4:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800e5c8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800e5ca:	6878      	ldr	r0, [r7, #4]
 800e5cc:	f001 fc68 	bl	800fea0 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 800e5d0:	687b      	ldr	r3, [r7, #4]
 800e5d2:	681b      	ldr	r3, [r3, #0]
 800e5d4:	691b      	ldr	r3, [r3, #16]
 800e5d6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800e5da:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800e5de:	d10e      	bne.n	800e5fe <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800e5e0:	687b      	ldr	r3, [r7, #4]
 800e5e2:	681b      	ldr	r3, [r3, #0]
 800e5e4:	68db      	ldr	r3, [r3, #12]
 800e5e6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800e5ea:	2b80      	cmp	r3, #128	; 0x80
 800e5ec:	d107      	bne.n	800e5fe <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800e5ee:	687b      	ldr	r3, [r7, #4]
 800e5f0:	681b      	ldr	r3, [r3, #0]
 800e5f2:	f46f 7280 	mvn.w	r2, #256	; 0x100
 800e5f6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 800e5f8:	6878      	ldr	r0, [r7, #4]
 800e5fa:	f001 fc5b 	bl	800feb4 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800e5fe:	687b      	ldr	r3, [r7, #4]
 800e600:	681b      	ldr	r3, [r3, #0]
 800e602:	691b      	ldr	r3, [r3, #16]
 800e604:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800e608:	2b40      	cmp	r3, #64	; 0x40
 800e60a:	d10e      	bne.n	800e62a <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800e60c:	687b      	ldr	r3, [r7, #4]
 800e60e:	681b      	ldr	r3, [r3, #0]
 800e610:	68db      	ldr	r3, [r3, #12]
 800e612:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800e616:	2b40      	cmp	r3, #64	; 0x40
 800e618:	d107      	bne.n	800e62a <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800e61a:	687b      	ldr	r3, [r7, #4]
 800e61c:	681b      	ldr	r3, [r3, #0]
 800e61e:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800e622:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800e624:	6878      	ldr	r0, [r7, #4]
 800e626:	f000 fb79 	bl	800ed1c <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800e62a:	687b      	ldr	r3, [r7, #4]
 800e62c:	681b      	ldr	r3, [r3, #0]
 800e62e:	691b      	ldr	r3, [r3, #16]
 800e630:	f003 0320 	and.w	r3, r3, #32
 800e634:	2b20      	cmp	r3, #32
 800e636:	d10e      	bne.n	800e656 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800e638:	687b      	ldr	r3, [r7, #4]
 800e63a:	681b      	ldr	r3, [r3, #0]
 800e63c:	68db      	ldr	r3, [r3, #12]
 800e63e:	f003 0320 	and.w	r3, r3, #32
 800e642:	2b20      	cmp	r3, #32
 800e644:	d107      	bne.n	800e656 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800e646:	687b      	ldr	r3, [r7, #4]
 800e648:	681b      	ldr	r3, [r3, #0]
 800e64a:	f06f 0220 	mvn.w	r2, #32
 800e64e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800e650:	6878      	ldr	r0, [r7, #4]
 800e652:	f001 fc1b 	bl	800fe8c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Encoder index event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_IDX) != RESET)
 800e656:	687b      	ldr	r3, [r7, #4]
 800e658:	681b      	ldr	r3, [r3, #0]
 800e65a:	691b      	ldr	r3, [r3, #16]
 800e65c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800e660:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800e664:	d10f      	bne.n	800e686 <HAL_TIM_IRQHandler+0x266>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_IDX) != RESET)
 800e666:	687b      	ldr	r3, [r7, #4]
 800e668:	681b      	ldr	r3, [r3, #0]
 800e66a:	68db      	ldr	r3, [r3, #12]
 800e66c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800e670:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800e674:	d107      	bne.n	800e686 <HAL_TIM_IRQHandler+0x266>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_IDX);
 800e676:	687b      	ldr	r3, [r7, #4]
 800e678:	681b      	ldr	r3, [r3, #0]
 800e67a:	f46f 1280 	mvn.w	r2, #1048576	; 0x100000
 800e67e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->EncoderIndexCallback(htim);
#else
      HAL_TIMEx_EncoderIndexCallback(htim);
 800e680:	6878      	ldr	r0, [r7, #4]
 800e682:	f001 fc21 	bl	800fec8 <HAL_TIMEx_EncoderIndexCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Direction change event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_DIR) != RESET)
 800e686:	687b      	ldr	r3, [r7, #4]
 800e688:	681b      	ldr	r3, [r3, #0]
 800e68a:	691b      	ldr	r3, [r3, #16]
 800e68c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800e690:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800e694:	d10f      	bne.n	800e6b6 <HAL_TIM_IRQHandler+0x296>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_DIR) != RESET)
 800e696:	687b      	ldr	r3, [r7, #4]
 800e698:	681b      	ldr	r3, [r3, #0]
 800e69a:	68db      	ldr	r3, [r3, #12]
 800e69c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800e6a0:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800e6a4:	d107      	bne.n	800e6b6 <HAL_TIM_IRQHandler+0x296>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_DIR);
 800e6a6:	687b      	ldr	r3, [r7, #4]
 800e6a8:	681b      	ldr	r3, [r3, #0]
 800e6aa:	f46f 1200 	mvn.w	r2, #2097152	; 0x200000
 800e6ae:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->DirectionChangeCallback(htim);
#else
      HAL_TIMEx_DirectionChangeCallback(htim);
 800e6b0:	6878      	ldr	r0, [r7, #4]
 800e6b2:	f001 fc13 	bl	800fedc <HAL_TIMEx_DirectionChangeCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Index error event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_IERR) != RESET)
 800e6b6:	687b      	ldr	r3, [r7, #4]
 800e6b8:	681b      	ldr	r3, [r3, #0]
 800e6ba:	691b      	ldr	r3, [r3, #16]
 800e6bc:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800e6c0:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800e6c4:	d10f      	bne.n	800e6e6 <HAL_TIM_IRQHandler+0x2c6>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_IERR) != RESET)
 800e6c6:	687b      	ldr	r3, [r7, #4]
 800e6c8:	681b      	ldr	r3, [r3, #0]
 800e6ca:	68db      	ldr	r3, [r3, #12]
 800e6cc:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800e6d0:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800e6d4:	d107      	bne.n	800e6e6 <HAL_TIM_IRQHandler+0x2c6>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_IERR);
 800e6d6:	687b      	ldr	r3, [r7, #4]
 800e6d8:	681b      	ldr	r3, [r3, #0]
 800e6da:	f46f 0280 	mvn.w	r2, #4194304	; 0x400000
 800e6de:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->IndexErrorCallback(htim);
#else
      HAL_TIMEx_IndexErrorCallback(htim);
 800e6e0:	6878      	ldr	r0, [r7, #4]
 800e6e2:	f001 fc05 	bl	800fef0 <HAL_TIMEx_IndexErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Transition error event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TERR) != RESET)
 800e6e6:	687b      	ldr	r3, [r7, #4]
 800e6e8:	681b      	ldr	r3, [r3, #0]
 800e6ea:	691b      	ldr	r3, [r3, #16]
 800e6ec:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800e6f0:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800e6f4:	d10f      	bne.n	800e716 <HAL_TIM_IRQHandler+0x2f6>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TERR) != RESET)
 800e6f6:	687b      	ldr	r3, [r7, #4]
 800e6f8:	681b      	ldr	r3, [r3, #0]
 800e6fa:	68db      	ldr	r3, [r3, #12]
 800e6fc:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800e700:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800e704:	d107      	bne.n	800e716 <HAL_TIM_IRQHandler+0x2f6>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_TERR);
 800e706:	687b      	ldr	r3, [r7, #4]
 800e708:	681b      	ldr	r3, [r3, #0]
 800e70a:	f46f 0200 	mvn.w	r2, #8388608	; 0x800000
 800e70e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TransitionErrorCallback(htim);
#else
      HAL_TIMEx_TransitionErrorCallback(htim);
 800e710:	6878      	ldr	r0, [r7, #4]
 800e712:	f001 fbf7 	bl	800ff04 <HAL_TIMEx_TransitionErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800e716:	bf00      	nop
 800e718:	3708      	adds	r7, #8
 800e71a:	46bd      	mov	sp, r7
 800e71c:	bd80      	pop	{r7, pc}

0800e71e <HAL_TIM_IC_ConfigChannel>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_ConfigChannel(TIM_HandleTypeDef *htim, TIM_IC_InitTypeDef *sConfig, uint32_t Channel)
{
 800e71e:	b580      	push	{r7, lr}
 800e720:	b084      	sub	sp, #16
 800e722:	af00      	add	r7, sp, #0
 800e724:	60f8      	str	r0, [r7, #12]
 800e726:	60b9      	str	r1, [r7, #8]
 800e728:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_IC_SELECTION(sConfig->ICSelection));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->ICPrescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->ICFilter));

  /* Process Locked */
  __HAL_LOCK(htim);
 800e72a:	68fb      	ldr	r3, [r7, #12]
 800e72c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800e730:	2b01      	cmp	r3, #1
 800e732:	d101      	bne.n	800e738 <HAL_TIM_IC_ConfigChannel+0x1a>
 800e734:	2302      	movs	r3, #2
 800e736:	e082      	b.n	800e83e <HAL_TIM_IC_ConfigChannel+0x120>
 800e738:	68fb      	ldr	r3, [r7, #12]
 800e73a:	2201      	movs	r2, #1
 800e73c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (Channel == TIM_CHANNEL_1)
 800e740:	687b      	ldr	r3, [r7, #4]
 800e742:	2b00      	cmp	r3, #0
 800e744:	d11b      	bne.n	800e77e <HAL_TIM_IC_ConfigChannel+0x60>
  {
    /* TI1 Configuration */
    TIM_TI1_SetConfig(htim->Instance,
 800e746:	68fb      	ldr	r3, [r7, #12]
 800e748:	6818      	ldr	r0, [r3, #0]
 800e74a:	68bb      	ldr	r3, [r7, #8]
 800e74c:	6819      	ldr	r1, [r3, #0]
 800e74e:	68bb      	ldr	r3, [r7, #8]
 800e750:	685a      	ldr	r2, [r3, #4]
 800e752:	68bb      	ldr	r3, [r7, #8]
 800e754:	68db      	ldr	r3, [r3, #12]
 800e756:	f001 f865 	bl	800f824 <TIM_TI1_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC1PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 800e75a:	68fb      	ldr	r3, [r7, #12]
 800e75c:	681b      	ldr	r3, [r3, #0]
 800e75e:	699a      	ldr	r2, [r3, #24]
 800e760:	68fb      	ldr	r3, [r7, #12]
 800e762:	681b      	ldr	r3, [r3, #0]
 800e764:	f022 020c 	bic.w	r2, r2, #12
 800e768:	619a      	str	r2, [r3, #24]

    /* Set the IC1PSC value */
    htim->Instance->CCMR1 |= sConfig->ICPrescaler;
 800e76a:	68fb      	ldr	r3, [r7, #12]
 800e76c:	681b      	ldr	r3, [r3, #0]
 800e76e:	6999      	ldr	r1, [r3, #24]
 800e770:	68bb      	ldr	r3, [r7, #8]
 800e772:	689a      	ldr	r2, [r3, #8]
 800e774:	68fb      	ldr	r3, [r7, #12]
 800e776:	681b      	ldr	r3, [r3, #0]
 800e778:	430a      	orrs	r2, r1
 800e77a:	619a      	str	r2, [r3, #24]
 800e77c:	e05a      	b.n	800e834 <HAL_TIM_IC_ConfigChannel+0x116>
  }
  else if (Channel == TIM_CHANNEL_2)
 800e77e:	687b      	ldr	r3, [r7, #4]
 800e780:	2b04      	cmp	r3, #4
 800e782:	d11c      	bne.n	800e7be <HAL_TIM_IC_ConfigChannel+0xa0>
  {
    /* TI2 Configuration */
    assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

    TIM_TI2_SetConfig(htim->Instance,
 800e784:	68fb      	ldr	r3, [r7, #12]
 800e786:	6818      	ldr	r0, [r3, #0]
 800e788:	68bb      	ldr	r3, [r7, #8]
 800e78a:	6819      	ldr	r1, [r3, #0]
 800e78c:	68bb      	ldr	r3, [r7, #8]
 800e78e:	685a      	ldr	r2, [r3, #4]
 800e790:	68bb      	ldr	r3, [r7, #8]
 800e792:	68db      	ldr	r3, [r3, #12]
 800e794:	f001 f8e9 	bl	800f96a <TIM_TI2_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC2PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC2PSC;
 800e798:	68fb      	ldr	r3, [r7, #12]
 800e79a:	681b      	ldr	r3, [r3, #0]
 800e79c:	699a      	ldr	r2, [r3, #24]
 800e79e:	68fb      	ldr	r3, [r7, #12]
 800e7a0:	681b      	ldr	r3, [r3, #0]
 800e7a2:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 800e7a6:	619a      	str	r2, [r3, #24]

    /* Set the IC2PSC value */
    htim->Instance->CCMR1 |= (sConfig->ICPrescaler << 8U);
 800e7a8:	68fb      	ldr	r3, [r7, #12]
 800e7aa:	681b      	ldr	r3, [r3, #0]
 800e7ac:	6999      	ldr	r1, [r3, #24]
 800e7ae:	68bb      	ldr	r3, [r7, #8]
 800e7b0:	689b      	ldr	r3, [r3, #8]
 800e7b2:	021a      	lsls	r2, r3, #8
 800e7b4:	68fb      	ldr	r3, [r7, #12]
 800e7b6:	681b      	ldr	r3, [r3, #0]
 800e7b8:	430a      	orrs	r2, r1
 800e7ba:	619a      	str	r2, [r3, #24]
 800e7bc:	e03a      	b.n	800e834 <HAL_TIM_IC_ConfigChannel+0x116>
  }
  else if (Channel == TIM_CHANNEL_3)
 800e7be:	687b      	ldr	r3, [r7, #4]
 800e7c0:	2b08      	cmp	r3, #8
 800e7c2:	d11b      	bne.n	800e7fc <HAL_TIM_IC_ConfigChannel+0xde>
  {
    /* TI3 Configuration */
    assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

    TIM_TI3_SetConfig(htim->Instance,
 800e7c4:	68fb      	ldr	r3, [r7, #12]
 800e7c6:	6818      	ldr	r0, [r3, #0]
 800e7c8:	68bb      	ldr	r3, [r7, #8]
 800e7ca:	6819      	ldr	r1, [r3, #0]
 800e7cc:	68bb      	ldr	r3, [r7, #8]
 800e7ce:	685a      	ldr	r2, [r3, #4]
 800e7d0:	68bb      	ldr	r3, [r7, #8]
 800e7d2:	68db      	ldr	r3, [r3, #12]
 800e7d4:	f001 f936 	bl	800fa44 <TIM_TI3_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC3PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC3PSC;
 800e7d8:	68fb      	ldr	r3, [r7, #12]
 800e7da:	681b      	ldr	r3, [r3, #0]
 800e7dc:	69da      	ldr	r2, [r3, #28]
 800e7de:	68fb      	ldr	r3, [r7, #12]
 800e7e0:	681b      	ldr	r3, [r3, #0]
 800e7e2:	f022 020c 	bic.w	r2, r2, #12
 800e7e6:	61da      	str	r2, [r3, #28]

    /* Set the IC3PSC value */
    htim->Instance->CCMR2 |= sConfig->ICPrescaler;
 800e7e8:	68fb      	ldr	r3, [r7, #12]
 800e7ea:	681b      	ldr	r3, [r3, #0]
 800e7ec:	69d9      	ldr	r1, [r3, #28]
 800e7ee:	68bb      	ldr	r3, [r7, #8]
 800e7f0:	689a      	ldr	r2, [r3, #8]
 800e7f2:	68fb      	ldr	r3, [r7, #12]
 800e7f4:	681b      	ldr	r3, [r3, #0]
 800e7f6:	430a      	orrs	r2, r1
 800e7f8:	61da      	str	r2, [r3, #28]
 800e7fa:	e01b      	b.n	800e834 <HAL_TIM_IC_ConfigChannel+0x116>
  else
  {
    /* TI4 Configuration */
    assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

    TIM_TI4_SetConfig(htim->Instance,
 800e7fc:	68fb      	ldr	r3, [r7, #12]
 800e7fe:	6818      	ldr	r0, [r3, #0]
 800e800:	68bb      	ldr	r3, [r7, #8]
 800e802:	6819      	ldr	r1, [r3, #0]
 800e804:	68bb      	ldr	r3, [r7, #8]
 800e806:	685a      	ldr	r2, [r3, #4]
 800e808:	68bb      	ldr	r3, [r7, #8]
 800e80a:	68db      	ldr	r3, [r3, #12]
 800e80c:	f001 f956 	bl	800fabc <TIM_TI4_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC4PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC4PSC;
 800e810:	68fb      	ldr	r3, [r7, #12]
 800e812:	681b      	ldr	r3, [r3, #0]
 800e814:	69da      	ldr	r2, [r3, #28]
 800e816:	68fb      	ldr	r3, [r7, #12]
 800e818:	681b      	ldr	r3, [r3, #0]
 800e81a:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 800e81e:	61da      	str	r2, [r3, #28]

    /* Set the IC4PSC value */
    htim->Instance->CCMR2 |= (sConfig->ICPrescaler << 8U);
 800e820:	68fb      	ldr	r3, [r7, #12]
 800e822:	681b      	ldr	r3, [r3, #0]
 800e824:	69d9      	ldr	r1, [r3, #28]
 800e826:	68bb      	ldr	r3, [r7, #8]
 800e828:	689b      	ldr	r3, [r3, #8]
 800e82a:	021a      	lsls	r2, r3, #8
 800e82c:	68fb      	ldr	r3, [r7, #12]
 800e82e:	681b      	ldr	r3, [r3, #0]
 800e830:	430a      	orrs	r2, r1
 800e832:	61da      	str	r2, [r3, #28]
  }

  __HAL_UNLOCK(htim);
 800e834:	68fb      	ldr	r3, [r7, #12]
 800e836:	2200      	movs	r2, #0
 800e838:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800e83c:	2300      	movs	r3, #0
}
 800e83e:	4618      	mov	r0, r3
 800e840:	3710      	adds	r7, #16
 800e842:	46bd      	mov	sp, r7
 800e844:	bd80      	pop	{r7, pc}
	...

0800e848 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 800e848:	b580      	push	{r7, lr}
 800e84a:	b084      	sub	sp, #16
 800e84c:	af00      	add	r7, sp, #0
 800e84e:	60f8      	str	r0, [r7, #12]
 800e850:	60b9      	str	r1, [r7, #8]
 800e852:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 800e854:	68fb      	ldr	r3, [r7, #12]
 800e856:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800e85a:	2b01      	cmp	r3, #1
 800e85c:	d101      	bne.n	800e862 <HAL_TIM_PWM_ConfigChannel+0x1a>
 800e85e:	2302      	movs	r3, #2
 800e860:	e0fd      	b.n	800ea5e <HAL_TIM_PWM_ConfigChannel+0x216>
 800e862:	68fb      	ldr	r3, [r7, #12]
 800e864:	2201      	movs	r2, #1
 800e866:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 800e86a:	687b      	ldr	r3, [r7, #4]
 800e86c:	2b14      	cmp	r3, #20
 800e86e:	f200 80f0 	bhi.w	800ea52 <HAL_TIM_PWM_ConfigChannel+0x20a>
 800e872:	a201      	add	r2, pc, #4	; (adr r2, 800e878 <HAL_TIM_PWM_ConfigChannel+0x30>)
 800e874:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e878:	0800e8cd 	.word	0x0800e8cd
 800e87c:	0800ea53 	.word	0x0800ea53
 800e880:	0800ea53 	.word	0x0800ea53
 800e884:	0800ea53 	.word	0x0800ea53
 800e888:	0800e90d 	.word	0x0800e90d
 800e88c:	0800ea53 	.word	0x0800ea53
 800e890:	0800ea53 	.word	0x0800ea53
 800e894:	0800ea53 	.word	0x0800ea53
 800e898:	0800e94f 	.word	0x0800e94f
 800e89c:	0800ea53 	.word	0x0800ea53
 800e8a0:	0800ea53 	.word	0x0800ea53
 800e8a4:	0800ea53 	.word	0x0800ea53
 800e8a8:	0800e98f 	.word	0x0800e98f
 800e8ac:	0800ea53 	.word	0x0800ea53
 800e8b0:	0800ea53 	.word	0x0800ea53
 800e8b4:	0800ea53 	.word	0x0800ea53
 800e8b8:	0800e9d1 	.word	0x0800e9d1
 800e8bc:	0800ea53 	.word	0x0800ea53
 800e8c0:	0800ea53 	.word	0x0800ea53
 800e8c4:	0800ea53 	.word	0x0800ea53
 800e8c8:	0800ea11 	.word	0x0800ea11
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800e8cc:	68fb      	ldr	r3, [r7, #12]
 800e8ce:	681b      	ldr	r3, [r3, #0]
 800e8d0:	68b9      	ldr	r1, [r7, #8]
 800e8d2:	4618      	mov	r0, r3
 800e8d4:	f000 fbc0 	bl	800f058 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800e8d8:	68fb      	ldr	r3, [r7, #12]
 800e8da:	681b      	ldr	r3, [r3, #0]
 800e8dc:	699a      	ldr	r2, [r3, #24]
 800e8de:	68fb      	ldr	r3, [r7, #12]
 800e8e0:	681b      	ldr	r3, [r3, #0]
 800e8e2:	f042 0208 	orr.w	r2, r2, #8
 800e8e6:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800e8e8:	68fb      	ldr	r3, [r7, #12]
 800e8ea:	681b      	ldr	r3, [r3, #0]
 800e8ec:	699a      	ldr	r2, [r3, #24]
 800e8ee:	68fb      	ldr	r3, [r7, #12]
 800e8f0:	681b      	ldr	r3, [r3, #0]
 800e8f2:	f022 0204 	bic.w	r2, r2, #4
 800e8f6:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800e8f8:	68fb      	ldr	r3, [r7, #12]
 800e8fa:	681b      	ldr	r3, [r3, #0]
 800e8fc:	6999      	ldr	r1, [r3, #24]
 800e8fe:	68bb      	ldr	r3, [r7, #8]
 800e900:	691a      	ldr	r2, [r3, #16]
 800e902:	68fb      	ldr	r3, [r7, #12]
 800e904:	681b      	ldr	r3, [r3, #0]
 800e906:	430a      	orrs	r2, r1
 800e908:	619a      	str	r2, [r3, #24]
      break;
 800e90a:	e0a3      	b.n	800ea54 <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800e90c:	68fb      	ldr	r3, [r7, #12]
 800e90e:	681b      	ldr	r3, [r3, #0]
 800e910:	68b9      	ldr	r1, [r7, #8]
 800e912:	4618      	mov	r0, r3
 800e914:	f000 fc3a 	bl	800f18c <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800e918:	68fb      	ldr	r3, [r7, #12]
 800e91a:	681b      	ldr	r3, [r3, #0]
 800e91c:	699a      	ldr	r2, [r3, #24]
 800e91e:	68fb      	ldr	r3, [r7, #12]
 800e920:	681b      	ldr	r3, [r3, #0]
 800e922:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800e926:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800e928:	68fb      	ldr	r3, [r7, #12]
 800e92a:	681b      	ldr	r3, [r3, #0]
 800e92c:	699a      	ldr	r2, [r3, #24]
 800e92e:	68fb      	ldr	r3, [r7, #12]
 800e930:	681b      	ldr	r3, [r3, #0]
 800e932:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800e936:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800e938:	68fb      	ldr	r3, [r7, #12]
 800e93a:	681b      	ldr	r3, [r3, #0]
 800e93c:	6999      	ldr	r1, [r3, #24]
 800e93e:	68bb      	ldr	r3, [r7, #8]
 800e940:	691b      	ldr	r3, [r3, #16]
 800e942:	021a      	lsls	r2, r3, #8
 800e944:	68fb      	ldr	r3, [r7, #12]
 800e946:	681b      	ldr	r3, [r3, #0]
 800e948:	430a      	orrs	r2, r1
 800e94a:	619a      	str	r2, [r3, #24]
      break;
 800e94c:	e082      	b.n	800ea54 <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800e94e:	68fb      	ldr	r3, [r7, #12]
 800e950:	681b      	ldr	r3, [r3, #0]
 800e952:	68b9      	ldr	r1, [r7, #8]
 800e954:	4618      	mov	r0, r3
 800e956:	f000 fcad 	bl	800f2b4 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800e95a:	68fb      	ldr	r3, [r7, #12]
 800e95c:	681b      	ldr	r3, [r3, #0]
 800e95e:	69da      	ldr	r2, [r3, #28]
 800e960:	68fb      	ldr	r3, [r7, #12]
 800e962:	681b      	ldr	r3, [r3, #0]
 800e964:	f042 0208 	orr.w	r2, r2, #8
 800e968:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800e96a:	68fb      	ldr	r3, [r7, #12]
 800e96c:	681b      	ldr	r3, [r3, #0]
 800e96e:	69da      	ldr	r2, [r3, #28]
 800e970:	68fb      	ldr	r3, [r7, #12]
 800e972:	681b      	ldr	r3, [r3, #0]
 800e974:	f022 0204 	bic.w	r2, r2, #4
 800e978:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800e97a:	68fb      	ldr	r3, [r7, #12]
 800e97c:	681b      	ldr	r3, [r3, #0]
 800e97e:	69d9      	ldr	r1, [r3, #28]
 800e980:	68bb      	ldr	r3, [r7, #8]
 800e982:	691a      	ldr	r2, [r3, #16]
 800e984:	68fb      	ldr	r3, [r7, #12]
 800e986:	681b      	ldr	r3, [r3, #0]
 800e988:	430a      	orrs	r2, r1
 800e98a:	61da      	str	r2, [r3, #28]
      break;
 800e98c:	e062      	b.n	800ea54 <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800e98e:	68fb      	ldr	r3, [r7, #12]
 800e990:	681b      	ldr	r3, [r3, #0]
 800e992:	68b9      	ldr	r1, [r7, #8]
 800e994:	4618      	mov	r0, r3
 800e996:	f000 fd1f 	bl	800f3d8 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800e99a:	68fb      	ldr	r3, [r7, #12]
 800e99c:	681b      	ldr	r3, [r3, #0]
 800e99e:	69da      	ldr	r2, [r3, #28]
 800e9a0:	68fb      	ldr	r3, [r7, #12]
 800e9a2:	681b      	ldr	r3, [r3, #0]
 800e9a4:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800e9a8:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800e9aa:	68fb      	ldr	r3, [r7, #12]
 800e9ac:	681b      	ldr	r3, [r3, #0]
 800e9ae:	69da      	ldr	r2, [r3, #28]
 800e9b0:	68fb      	ldr	r3, [r7, #12]
 800e9b2:	681b      	ldr	r3, [r3, #0]
 800e9b4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800e9b8:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800e9ba:	68fb      	ldr	r3, [r7, #12]
 800e9bc:	681b      	ldr	r3, [r3, #0]
 800e9be:	69d9      	ldr	r1, [r3, #28]
 800e9c0:	68bb      	ldr	r3, [r7, #8]
 800e9c2:	691b      	ldr	r3, [r3, #16]
 800e9c4:	021a      	lsls	r2, r3, #8
 800e9c6:	68fb      	ldr	r3, [r7, #12]
 800e9c8:	681b      	ldr	r3, [r3, #0]
 800e9ca:	430a      	orrs	r2, r1
 800e9cc:	61da      	str	r2, [r3, #28]
      break;
 800e9ce:	e041      	b.n	800ea54 <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 800e9d0:	68fb      	ldr	r3, [r7, #12]
 800e9d2:	681b      	ldr	r3, [r3, #0]
 800e9d4:	68b9      	ldr	r1, [r7, #8]
 800e9d6:	4618      	mov	r0, r3
 800e9d8:	f000 fd92 	bl	800f500 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 800e9dc:	68fb      	ldr	r3, [r7, #12]
 800e9de:	681b      	ldr	r3, [r3, #0]
 800e9e0:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800e9e2:	68fb      	ldr	r3, [r7, #12]
 800e9e4:	681b      	ldr	r3, [r3, #0]
 800e9e6:	f042 0208 	orr.w	r2, r2, #8
 800e9ea:	651a      	str	r2, [r3, #80]	; 0x50

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 800e9ec:	68fb      	ldr	r3, [r7, #12]
 800e9ee:	681b      	ldr	r3, [r3, #0]
 800e9f0:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800e9f2:	68fb      	ldr	r3, [r7, #12]
 800e9f4:	681b      	ldr	r3, [r3, #0]
 800e9f6:	f022 0204 	bic.w	r2, r2, #4
 800e9fa:	651a      	str	r2, [r3, #80]	; 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 800e9fc:	68fb      	ldr	r3, [r7, #12]
 800e9fe:	681b      	ldr	r3, [r3, #0]
 800ea00:	6d19      	ldr	r1, [r3, #80]	; 0x50
 800ea02:	68bb      	ldr	r3, [r7, #8]
 800ea04:	691a      	ldr	r2, [r3, #16]
 800ea06:	68fb      	ldr	r3, [r7, #12]
 800ea08:	681b      	ldr	r3, [r3, #0]
 800ea0a:	430a      	orrs	r2, r1
 800ea0c:	651a      	str	r2, [r3, #80]	; 0x50
      break;
 800ea0e:	e021      	b.n	800ea54 <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 800ea10:	68fb      	ldr	r3, [r7, #12]
 800ea12:	681b      	ldr	r3, [r3, #0]
 800ea14:	68b9      	ldr	r1, [r7, #8]
 800ea16:	4618      	mov	r0, r3
 800ea18:	f000 fddc 	bl	800f5d4 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 800ea1c:	68fb      	ldr	r3, [r7, #12]
 800ea1e:	681b      	ldr	r3, [r3, #0]
 800ea20:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800ea22:	68fb      	ldr	r3, [r7, #12]
 800ea24:	681b      	ldr	r3, [r3, #0]
 800ea26:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800ea2a:	651a      	str	r2, [r3, #80]	; 0x50

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 800ea2c:	68fb      	ldr	r3, [r7, #12]
 800ea2e:	681b      	ldr	r3, [r3, #0]
 800ea30:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800ea32:	68fb      	ldr	r3, [r7, #12]
 800ea34:	681b      	ldr	r3, [r3, #0]
 800ea36:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800ea3a:	651a      	str	r2, [r3, #80]	; 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 800ea3c:	68fb      	ldr	r3, [r7, #12]
 800ea3e:	681b      	ldr	r3, [r3, #0]
 800ea40:	6d19      	ldr	r1, [r3, #80]	; 0x50
 800ea42:	68bb      	ldr	r3, [r7, #8]
 800ea44:	691b      	ldr	r3, [r3, #16]
 800ea46:	021a      	lsls	r2, r3, #8
 800ea48:	68fb      	ldr	r3, [r7, #12]
 800ea4a:	681b      	ldr	r3, [r3, #0]
 800ea4c:	430a      	orrs	r2, r1
 800ea4e:	651a      	str	r2, [r3, #80]	; 0x50
      break;
 800ea50:	e000      	b.n	800ea54 <HAL_TIM_PWM_ConfigChannel+0x20c>
    }

    default:
      break;
 800ea52:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800ea54:	68fb      	ldr	r3, [r7, #12]
 800ea56:	2200      	movs	r2, #0
 800ea58:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800ea5c:	2300      	movs	r3, #0
}
 800ea5e:	4618      	mov	r0, r3
 800ea60:	3710      	adds	r7, #16
 800ea62:	46bd      	mov	sp, r7
 800ea64:	bd80      	pop	{r7, pc}
 800ea66:	bf00      	nop

0800ea68 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800ea68:	b580      	push	{r7, lr}
 800ea6a:	b084      	sub	sp, #16
 800ea6c:	af00      	add	r7, sp, #0
 800ea6e:	6078      	str	r0, [r7, #4]
 800ea70:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800ea72:	687b      	ldr	r3, [r7, #4]
 800ea74:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800ea78:	2b01      	cmp	r3, #1
 800ea7a:	d101      	bne.n	800ea80 <HAL_TIM_ConfigClockSource+0x18>
 800ea7c:	2302      	movs	r3, #2
 800ea7e:	e0d2      	b.n	800ec26 <HAL_TIM_ConfigClockSource+0x1be>
 800ea80:	687b      	ldr	r3, [r7, #4]
 800ea82:	2201      	movs	r2, #1
 800ea84:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800ea88:	687b      	ldr	r3, [r7, #4]
 800ea8a:	2202      	movs	r2, #2
 800ea8c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800ea90:	687b      	ldr	r3, [r7, #4]
 800ea92:	681b      	ldr	r3, [r3, #0]
 800ea94:	689b      	ldr	r3, [r3, #8]
 800ea96:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800ea98:	68fb      	ldr	r3, [r7, #12]
 800ea9a:	f423 1344 	bic.w	r3, r3, #3211264	; 0x310000
 800ea9e:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 800eaa2:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800eaa4:	68fb      	ldr	r3, [r7, #12]
 800eaa6:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800eaaa:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 800eaac:	687b      	ldr	r3, [r7, #4]
 800eaae:	681b      	ldr	r3, [r3, #0]
 800eab0:	68fa      	ldr	r2, [r7, #12]
 800eab2:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800eab4:	683b      	ldr	r3, [r7, #0]
 800eab6:	681b      	ldr	r3, [r3, #0]
 800eab8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800eabc:	f000 80a9 	beq.w	800ec12 <HAL_TIM_ConfigClockSource+0x1aa>
 800eac0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800eac4:	d81a      	bhi.n	800eafc <HAL_TIM_ConfigClockSource+0x94>
 800eac6:	2b30      	cmp	r3, #48	; 0x30
 800eac8:	f000 809a 	beq.w	800ec00 <HAL_TIM_ConfigClockSource+0x198>
 800eacc:	2b30      	cmp	r3, #48	; 0x30
 800eace:	d809      	bhi.n	800eae4 <HAL_TIM_ConfigClockSource+0x7c>
 800ead0:	2b10      	cmp	r3, #16
 800ead2:	f000 8095 	beq.w	800ec00 <HAL_TIM_ConfigClockSource+0x198>
 800ead6:	2b20      	cmp	r3, #32
 800ead8:	f000 8092 	beq.w	800ec00 <HAL_TIM_ConfigClockSource+0x198>
 800eadc:	2b00      	cmp	r3, #0
 800eade:	f000 808f 	beq.w	800ec00 <HAL_TIM_ConfigClockSource+0x198>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
      break;
    }

    default:
      break;
 800eae2:	e097      	b.n	800ec14 <HAL_TIM_ConfigClockSource+0x1ac>
  switch (sClockSourceConfig->ClockSource)
 800eae4:	2b50      	cmp	r3, #80	; 0x50
 800eae6:	d05b      	beq.n	800eba0 <HAL_TIM_ConfigClockSource+0x138>
 800eae8:	2b50      	cmp	r3, #80	; 0x50
 800eaea:	d802      	bhi.n	800eaf2 <HAL_TIM_ConfigClockSource+0x8a>
 800eaec:	2b40      	cmp	r3, #64	; 0x40
 800eaee:	d077      	beq.n	800ebe0 <HAL_TIM_ConfigClockSource+0x178>
      break;
 800eaf0:	e090      	b.n	800ec14 <HAL_TIM_ConfigClockSource+0x1ac>
  switch (sClockSourceConfig->ClockSource)
 800eaf2:	2b60      	cmp	r3, #96	; 0x60
 800eaf4:	d064      	beq.n	800ebc0 <HAL_TIM_ConfigClockSource+0x158>
 800eaf6:	2b70      	cmp	r3, #112	; 0x70
 800eaf8:	d028      	beq.n	800eb4c <HAL_TIM_ConfigClockSource+0xe4>
      break;
 800eafa:	e08b      	b.n	800ec14 <HAL_TIM_ConfigClockSource+0x1ac>
  switch (sClockSourceConfig->ClockSource)
 800eafc:	4a4c      	ldr	r2, [pc, #304]	; (800ec30 <HAL_TIM_ConfigClockSource+0x1c8>)
 800eafe:	4293      	cmp	r3, r2
 800eb00:	d07e      	beq.n	800ec00 <HAL_TIM_ConfigClockSource+0x198>
 800eb02:	4a4b      	ldr	r2, [pc, #300]	; (800ec30 <HAL_TIM_ConfigClockSource+0x1c8>)
 800eb04:	4293      	cmp	r3, r2
 800eb06:	d810      	bhi.n	800eb2a <HAL_TIM_ConfigClockSource+0xc2>
 800eb08:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800eb0c:	d078      	beq.n	800ec00 <HAL_TIM_ConfigClockSource+0x198>
 800eb0e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800eb12:	d803      	bhi.n	800eb1c <HAL_TIM_ConfigClockSource+0xb4>
 800eb14:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800eb18:	d02f      	beq.n	800eb7a <HAL_TIM_ConfigClockSource+0x112>
      break;
 800eb1a:	e07b      	b.n	800ec14 <HAL_TIM_ConfigClockSource+0x1ac>
  switch (sClockSourceConfig->ClockSource)
 800eb1c:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 800eb20:	d06e      	beq.n	800ec00 <HAL_TIM_ConfigClockSource+0x198>
 800eb22:	4a44      	ldr	r2, [pc, #272]	; (800ec34 <HAL_TIM_ConfigClockSource+0x1cc>)
 800eb24:	4293      	cmp	r3, r2
 800eb26:	d06b      	beq.n	800ec00 <HAL_TIM_ConfigClockSource+0x198>
      break;
 800eb28:	e074      	b.n	800ec14 <HAL_TIM_ConfigClockSource+0x1ac>
  switch (sClockSourceConfig->ClockSource)
 800eb2a:	4a43      	ldr	r2, [pc, #268]	; (800ec38 <HAL_TIM_ConfigClockSource+0x1d0>)
 800eb2c:	4293      	cmp	r3, r2
 800eb2e:	d067      	beq.n	800ec00 <HAL_TIM_ConfigClockSource+0x198>
 800eb30:	4a41      	ldr	r2, [pc, #260]	; (800ec38 <HAL_TIM_ConfigClockSource+0x1d0>)
 800eb32:	4293      	cmp	r3, r2
 800eb34:	d803      	bhi.n	800eb3e <HAL_TIM_ConfigClockSource+0xd6>
 800eb36:	4a41      	ldr	r2, [pc, #260]	; (800ec3c <HAL_TIM_ConfigClockSource+0x1d4>)
 800eb38:	4293      	cmp	r3, r2
 800eb3a:	d061      	beq.n	800ec00 <HAL_TIM_ConfigClockSource+0x198>
      break;
 800eb3c:	e06a      	b.n	800ec14 <HAL_TIM_ConfigClockSource+0x1ac>
  switch (sClockSourceConfig->ClockSource)
 800eb3e:	4a40      	ldr	r2, [pc, #256]	; (800ec40 <HAL_TIM_ConfigClockSource+0x1d8>)
 800eb40:	4293      	cmp	r3, r2
 800eb42:	d05d      	beq.n	800ec00 <HAL_TIM_ConfigClockSource+0x198>
 800eb44:	4a3f      	ldr	r2, [pc, #252]	; (800ec44 <HAL_TIM_ConfigClockSource+0x1dc>)
 800eb46:	4293      	cmp	r3, r2
 800eb48:	d05a      	beq.n	800ec00 <HAL_TIM_ConfigClockSource+0x198>
      break;
 800eb4a:	e063      	b.n	800ec14 <HAL_TIM_ConfigClockSource+0x1ac>
      TIM_ETR_SetConfig(htim->Instance,
 800eb4c:	687b      	ldr	r3, [r7, #4]
 800eb4e:	6818      	ldr	r0, [r3, #0]
 800eb50:	683b      	ldr	r3, [r7, #0]
 800eb52:	6899      	ldr	r1, [r3, #8]
 800eb54:	683b      	ldr	r3, [r7, #0]
 800eb56:	685a      	ldr	r2, [r3, #4]
 800eb58:	683b      	ldr	r3, [r7, #0]
 800eb5a:	68db      	ldr	r3, [r3, #12]
 800eb5c:	f001 f808 	bl	800fb70 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 800eb60:	687b      	ldr	r3, [r7, #4]
 800eb62:	681b      	ldr	r3, [r3, #0]
 800eb64:	689b      	ldr	r3, [r3, #8]
 800eb66:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800eb68:	68fb      	ldr	r3, [r7, #12]
 800eb6a:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 800eb6e:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 800eb70:	687b      	ldr	r3, [r7, #4]
 800eb72:	681b      	ldr	r3, [r3, #0]
 800eb74:	68fa      	ldr	r2, [r7, #12]
 800eb76:	609a      	str	r2, [r3, #8]
      break;
 800eb78:	e04c      	b.n	800ec14 <HAL_TIM_ConfigClockSource+0x1ac>
      TIM_ETR_SetConfig(htim->Instance,
 800eb7a:	687b      	ldr	r3, [r7, #4]
 800eb7c:	6818      	ldr	r0, [r3, #0]
 800eb7e:	683b      	ldr	r3, [r7, #0]
 800eb80:	6899      	ldr	r1, [r3, #8]
 800eb82:	683b      	ldr	r3, [r7, #0]
 800eb84:	685a      	ldr	r2, [r3, #4]
 800eb86:	683b      	ldr	r3, [r7, #0]
 800eb88:	68db      	ldr	r3, [r3, #12]
 800eb8a:	f000 fff1 	bl	800fb70 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800eb8e:	687b      	ldr	r3, [r7, #4]
 800eb90:	681b      	ldr	r3, [r3, #0]
 800eb92:	689a      	ldr	r2, [r3, #8]
 800eb94:	687b      	ldr	r3, [r7, #4]
 800eb96:	681b      	ldr	r3, [r3, #0]
 800eb98:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800eb9c:	609a      	str	r2, [r3, #8]
      break;
 800eb9e:	e039      	b.n	800ec14 <HAL_TIM_ConfigClockSource+0x1ac>
      TIM_TI1_ConfigInputStage(htim->Instance,
 800eba0:	687b      	ldr	r3, [r7, #4]
 800eba2:	6818      	ldr	r0, [r3, #0]
 800eba4:	683b      	ldr	r3, [r7, #0]
 800eba6:	6859      	ldr	r1, [r3, #4]
 800eba8:	683b      	ldr	r3, [r7, #0]
 800ebaa:	68db      	ldr	r3, [r3, #12]
 800ebac:	461a      	mov	r2, r3
 800ebae:	f000 fead 	bl	800f90c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800ebb2:	687b      	ldr	r3, [r7, #4]
 800ebb4:	681b      	ldr	r3, [r3, #0]
 800ebb6:	2150      	movs	r1, #80	; 0x50
 800ebb8:	4618      	mov	r0, r3
 800ebba:	f000 ffbc 	bl	800fb36 <TIM_ITRx_SetConfig>
      break;
 800ebbe:	e029      	b.n	800ec14 <HAL_TIM_ConfigClockSource+0x1ac>
      TIM_TI2_ConfigInputStage(htim->Instance,
 800ebc0:	687b      	ldr	r3, [r7, #4]
 800ebc2:	6818      	ldr	r0, [r3, #0]
 800ebc4:	683b      	ldr	r3, [r7, #0]
 800ebc6:	6859      	ldr	r1, [r3, #4]
 800ebc8:	683b      	ldr	r3, [r7, #0]
 800ebca:	68db      	ldr	r3, [r3, #12]
 800ebcc:	461a      	mov	r2, r3
 800ebce:	f000 ff09 	bl	800f9e4 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800ebd2:	687b      	ldr	r3, [r7, #4]
 800ebd4:	681b      	ldr	r3, [r3, #0]
 800ebd6:	2160      	movs	r1, #96	; 0x60
 800ebd8:	4618      	mov	r0, r3
 800ebda:	f000 ffac 	bl	800fb36 <TIM_ITRx_SetConfig>
      break;
 800ebde:	e019      	b.n	800ec14 <HAL_TIM_ConfigClockSource+0x1ac>
      TIM_TI1_ConfigInputStage(htim->Instance,
 800ebe0:	687b      	ldr	r3, [r7, #4]
 800ebe2:	6818      	ldr	r0, [r3, #0]
 800ebe4:	683b      	ldr	r3, [r7, #0]
 800ebe6:	6859      	ldr	r1, [r3, #4]
 800ebe8:	683b      	ldr	r3, [r7, #0]
 800ebea:	68db      	ldr	r3, [r3, #12]
 800ebec:	461a      	mov	r2, r3
 800ebee:	f000 fe8d 	bl	800f90c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800ebf2:	687b      	ldr	r3, [r7, #4]
 800ebf4:	681b      	ldr	r3, [r3, #0]
 800ebf6:	2140      	movs	r1, #64	; 0x40
 800ebf8:	4618      	mov	r0, r3
 800ebfa:	f000 ff9c 	bl	800fb36 <TIM_ITRx_SetConfig>
      break;
 800ebfe:	e009      	b.n	800ec14 <HAL_TIM_ConfigClockSource+0x1ac>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800ec00:	687b      	ldr	r3, [r7, #4]
 800ec02:	681a      	ldr	r2, [r3, #0]
 800ec04:	683b      	ldr	r3, [r7, #0]
 800ec06:	681b      	ldr	r3, [r3, #0]
 800ec08:	4619      	mov	r1, r3
 800ec0a:	4610      	mov	r0, r2
 800ec0c:	f000 ff93 	bl	800fb36 <TIM_ITRx_SetConfig>
      break;
 800ec10:	e000      	b.n	800ec14 <HAL_TIM_ConfigClockSource+0x1ac>
      break;
 800ec12:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800ec14:	687b      	ldr	r3, [r7, #4]
 800ec16:	2201      	movs	r2, #1
 800ec18:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800ec1c:	687b      	ldr	r3, [r7, #4]
 800ec1e:	2200      	movs	r2, #0
 800ec20:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800ec24:	2300      	movs	r3, #0
}
 800ec26:	4618      	mov	r0, r3
 800ec28:	3710      	adds	r7, #16
 800ec2a:	46bd      	mov	sp, r7
 800ec2c:	bd80      	pop	{r7, pc}
 800ec2e:	bf00      	nop
 800ec30:	00100030 	.word	0x00100030
 800ec34:	00100020 	.word	0x00100020
 800ec38:	00100050 	.word	0x00100050
 800ec3c:	00100040 	.word	0x00100040
 800ec40:	00100060 	.word	0x00100060
 800ec44:	00100070 	.word	0x00100070

0800ec48 <HAL_TIM_SlaveConfigSynchro>:
  *         timer input or external trigger input) and the Slave mode
  *         (Disable, Reset, Gated, Trigger, External clock mode 1, Reset + Trigger, Gated + Reset).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_SlaveConfigSynchro(TIM_HandleTypeDef *htim, TIM_SlaveConfigTypeDef *sSlaveConfig)
{
 800ec48:	b580      	push	{r7, lr}
 800ec4a:	b082      	sub	sp, #8
 800ec4c:	af00      	add	r7, sp, #0
 800ec4e:	6078      	str	r0, [r7, #4]
 800ec50:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_SLAVE_INSTANCE(htim->Instance));
  assert_param(IS_TIM_SLAVE_MODE(sSlaveConfig->SlaveMode));
  assert_param(IS_TIM_TRIGGER_INSTANCE(htim->Instance, sSlaveConfig->InputTrigger));

  __HAL_LOCK(htim);
 800ec52:	687b      	ldr	r3, [r7, #4]
 800ec54:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800ec58:	2b01      	cmp	r3, #1
 800ec5a:	d101      	bne.n	800ec60 <HAL_TIM_SlaveConfigSynchro+0x18>
 800ec5c:	2302      	movs	r3, #2
 800ec5e:	e031      	b.n	800ecc4 <HAL_TIM_SlaveConfigSynchro+0x7c>
 800ec60:	687b      	ldr	r3, [r7, #4]
 800ec62:	2201      	movs	r2, #1
 800ec64:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800ec68:	687b      	ldr	r3, [r7, #4]
 800ec6a:	2202      	movs	r2, #2
 800ec6c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  if (TIM_SlaveTimer_SetConfig(htim, sSlaveConfig) != HAL_OK)
 800ec70:	6839      	ldr	r1, [r7, #0]
 800ec72:	6878      	ldr	r0, [r7, #4]
 800ec74:	f000 fd1a 	bl	800f6ac <TIM_SlaveTimer_SetConfig>
 800ec78:	4603      	mov	r3, r0
 800ec7a:	2b00      	cmp	r3, #0
 800ec7c:	d009      	beq.n	800ec92 <HAL_TIM_SlaveConfigSynchro+0x4a>
  {
    htim->State = HAL_TIM_STATE_READY;
 800ec7e:	687b      	ldr	r3, [r7, #4]
 800ec80:	2201      	movs	r2, #1
 800ec82:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    __HAL_UNLOCK(htim);
 800ec86:	687b      	ldr	r3, [r7, #4]
 800ec88:	2200      	movs	r2, #0
 800ec8a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    return HAL_ERROR;
 800ec8e:	2301      	movs	r3, #1
 800ec90:	e018      	b.n	800ecc4 <HAL_TIM_SlaveConfigSynchro+0x7c>
  }

  /* Disable Trigger Interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_TRIGGER);
 800ec92:	687b      	ldr	r3, [r7, #4]
 800ec94:	681b      	ldr	r3, [r3, #0]
 800ec96:	68da      	ldr	r2, [r3, #12]
 800ec98:	687b      	ldr	r3, [r7, #4]
 800ec9a:	681b      	ldr	r3, [r3, #0]
 800ec9c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800eca0:	60da      	str	r2, [r3, #12]

  /* Disable Trigger DMA request */
  __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_TRIGGER);
 800eca2:	687b      	ldr	r3, [r7, #4]
 800eca4:	681b      	ldr	r3, [r3, #0]
 800eca6:	68da      	ldr	r2, [r3, #12]
 800eca8:	687b      	ldr	r3, [r7, #4]
 800ecaa:	681b      	ldr	r3, [r3, #0]
 800ecac:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 800ecb0:	60da      	str	r2, [r3, #12]

  htim->State = HAL_TIM_STATE_READY;
 800ecb2:	687b      	ldr	r3, [r7, #4]
 800ecb4:	2201      	movs	r2, #1
 800ecb6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800ecba:	687b      	ldr	r3, [r7, #4]
 800ecbc:	2200      	movs	r2, #0
 800ecbe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800ecc2:	2300      	movs	r3, #0
}
 800ecc4:	4618      	mov	r0, r3
 800ecc6:	3708      	adds	r7, #8
 800ecc8:	46bd      	mov	sp, r7
 800ecca:	bd80      	pop	{r7, pc}

0800eccc <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 800eccc:	b480      	push	{r7}
 800ecce:	b083      	sub	sp, #12
 800ecd0:	af00      	add	r7, sp, #0
 800ecd2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 800ecd4:	bf00      	nop
 800ecd6:	370c      	adds	r7, #12
 800ecd8:	46bd      	mov	sp, r7
 800ecda:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ecde:	4770      	bx	lr

0800ece0 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800ece0:	b480      	push	{r7}
 800ece2:	b083      	sub	sp, #12
 800ece4:	af00      	add	r7, sp, #0
 800ece6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800ece8:	bf00      	nop
 800ecea:	370c      	adds	r7, #12
 800ecec:	46bd      	mov	sp, r7
 800ecee:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ecf2:	4770      	bx	lr

0800ecf4 <HAL_TIM_IC_CaptureHalfCpltCallback>:
  * @brief  Input Capture half complete callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureHalfCpltCallback(TIM_HandleTypeDef *htim)
{
 800ecf4:	b480      	push	{r7}
 800ecf6:	b083      	sub	sp, #12
 800ecf8:	af00      	add	r7, sp, #0
 800ecfa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureHalfCpltCallback could be implemented in the user file
   */
}
 800ecfc:	bf00      	nop
 800ecfe:	370c      	adds	r7, #12
 800ed00:	46bd      	mov	sp, r7
 800ed02:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ed06:	4770      	bx	lr

0800ed08 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800ed08:	b480      	push	{r7}
 800ed0a:	b083      	sub	sp, #12
 800ed0c:	af00      	add	r7, sp, #0
 800ed0e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800ed10:	bf00      	nop
 800ed12:	370c      	adds	r7, #12
 800ed14:	46bd      	mov	sp, r7
 800ed16:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ed1a:	4770      	bx	lr

0800ed1c <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800ed1c:	b480      	push	{r7}
 800ed1e:	b083      	sub	sp, #12
 800ed20:	af00      	add	r7, sp, #0
 800ed22:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800ed24:	bf00      	nop
 800ed26:	370c      	adds	r7, #12
 800ed28:	46bd      	mov	sp, r7
 800ed2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ed2e:	4770      	bx	lr

0800ed30 <HAL_TIM_ErrorCallback>:
  * @brief  Timer error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_ErrorCallback(TIM_HandleTypeDef *htim)
{
 800ed30:	b480      	push	{r7}
 800ed32:	b083      	sub	sp, #12
 800ed34:	af00      	add	r7, sp, #0
 800ed36:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_ErrorCallback could be implemented in the user file
   */
}
 800ed38:	bf00      	nop
 800ed3a:	370c      	adds	r7, #12
 800ed3c:	46bd      	mov	sp, r7
 800ed3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ed42:	4770      	bx	lr

0800ed44 <TIM_DMAError>:
  * @brief  TIM DMA error callback
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
void TIM_DMAError(DMA_HandleTypeDef *hdma)
{
 800ed44:	b580      	push	{r7, lr}
 800ed46:	b084      	sub	sp, #16
 800ed48:	af00      	add	r7, sp, #0
 800ed4a:	6078      	str	r0, [r7, #4]
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800ed4c:	687b      	ldr	r3, [r7, #4]
 800ed4e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ed50:	60fb      	str	r3, [r7, #12]

  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 800ed52:	68fb      	ldr	r3, [r7, #12]
 800ed54:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ed56:	687a      	ldr	r2, [r7, #4]
 800ed58:	429a      	cmp	r2, r3
 800ed5a:	d107      	bne.n	800ed6c <TIM_DMAError+0x28>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800ed5c:	68fb      	ldr	r3, [r7, #12]
 800ed5e:	2201      	movs	r2, #1
 800ed60:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 800ed62:	68fb      	ldr	r3, [r7, #12]
 800ed64:	2201      	movs	r2, #1
 800ed66:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800ed6a:	e02a      	b.n	800edc2 <TIM_DMAError+0x7e>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 800ed6c:	68fb      	ldr	r3, [r7, #12]
 800ed6e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ed70:	687a      	ldr	r2, [r7, #4]
 800ed72:	429a      	cmp	r2, r3
 800ed74:	d107      	bne.n	800ed86 <TIM_DMAError+0x42>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800ed76:	68fb      	ldr	r3, [r7, #12]
 800ed78:	2202      	movs	r2, #2
 800ed7a:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 800ed7c:	68fb      	ldr	r3, [r7, #12]
 800ed7e:	2201      	movs	r2, #1
 800ed80:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800ed84:	e01d      	b.n	800edc2 <TIM_DMAError+0x7e>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 800ed86:	68fb      	ldr	r3, [r7, #12]
 800ed88:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ed8a:	687a      	ldr	r2, [r7, #4]
 800ed8c:	429a      	cmp	r2, r3
 800ed8e:	d107      	bne.n	800eda0 <TIM_DMAError+0x5c>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800ed90:	68fb      	ldr	r3, [r7, #12]
 800ed92:	2204      	movs	r2, #4
 800ed94:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_3, HAL_TIM_CHANNEL_STATE_READY);
 800ed96:	68fb      	ldr	r3, [r7, #12]
 800ed98:	2201      	movs	r2, #1
 800ed9a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800ed9e:	e010      	b.n	800edc2 <TIM_DMAError+0x7e>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 800eda0:	68fb      	ldr	r3, [r7, #12]
 800eda2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800eda4:	687a      	ldr	r2, [r7, #4]
 800eda6:	429a      	cmp	r2, r3
 800eda8:	d107      	bne.n	800edba <TIM_DMAError+0x76>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800edaa:	68fb      	ldr	r3, [r7, #12]
 800edac:	2208      	movs	r2, #8
 800edae:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_4, HAL_TIM_CHANNEL_STATE_READY);
 800edb0:	68fb      	ldr	r3, [r7, #12]
 800edb2:	2201      	movs	r2, #1
 800edb4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800edb8:	e003      	b.n	800edc2 <TIM_DMAError+0x7e>
  }
  else
  {
    htim->State = HAL_TIM_STATE_READY;
 800edba:	68fb      	ldr	r3, [r7, #12]
 800edbc:	2201      	movs	r2, #1
 800edbe:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  }

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
  htim->ErrorCallback(htim);
#else
  HAL_TIM_ErrorCallback(htim);
 800edc2:	68f8      	ldr	r0, [r7, #12]
 800edc4:	f7ff ffb4 	bl	800ed30 <HAL_TIM_ErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800edc8:	68fb      	ldr	r3, [r7, #12]
 800edca:	2200      	movs	r2, #0
 800edcc:	771a      	strb	r2, [r3, #28]
}
 800edce:	bf00      	nop
 800edd0:	3710      	adds	r7, #16
 800edd2:	46bd      	mov	sp, r7
 800edd4:	bd80      	pop	{r7, pc}

0800edd6 <TIM_DMACaptureCplt>:
  * @brief  TIM DMA Capture complete callback.
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
void TIM_DMACaptureCplt(DMA_HandleTypeDef *hdma)
{
 800edd6:	b580      	push	{r7, lr}
 800edd8:	b084      	sub	sp, #16
 800edda:	af00      	add	r7, sp, #0
 800eddc:	6078      	str	r0, [r7, #4]
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800edde:	687b      	ldr	r3, [r7, #4]
 800ede0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ede2:	60fb      	str	r3, [r7, #12]

  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 800ede4:	68fb      	ldr	r3, [r7, #12]
 800ede6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ede8:	687a      	ldr	r2, [r7, #4]
 800edea:	429a      	cmp	r2, r3
 800edec:	d10f      	bne.n	800ee0e <TIM_DMACaptureCplt+0x38>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800edee:	68fb      	ldr	r3, [r7, #12]
 800edf0:	2201      	movs	r2, #1
 800edf2:	771a      	strb	r2, [r3, #28]
    
    if (hdma->Init.Mode == DMA_NORMAL)
 800edf4:	687b      	ldr	r3, [r7, #4]
 800edf6:	69db      	ldr	r3, [r3, #28]
 800edf8:	2b00      	cmp	r3, #0
 800edfa:	d146      	bne.n	800ee8a <TIM_DMACaptureCplt+0xb4>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 800edfc:	68fb      	ldr	r3, [r7, #12]
 800edfe:	2201      	movs	r2, #1
 800ee00:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 800ee04:	68fb      	ldr	r3, [r7, #12]
 800ee06:	2201      	movs	r2, #1
 800ee08:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800ee0c:	e03d      	b.n	800ee8a <TIM_DMACaptureCplt+0xb4>
    }
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 800ee0e:	68fb      	ldr	r3, [r7, #12]
 800ee10:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ee12:	687a      	ldr	r2, [r7, #4]
 800ee14:	429a      	cmp	r2, r3
 800ee16:	d10f      	bne.n	800ee38 <TIM_DMACaptureCplt+0x62>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800ee18:	68fb      	ldr	r3, [r7, #12]
 800ee1a:	2202      	movs	r2, #2
 800ee1c:	771a      	strb	r2, [r3, #28]
    
    if (hdma->Init.Mode == DMA_NORMAL)
 800ee1e:	687b      	ldr	r3, [r7, #4]
 800ee20:	69db      	ldr	r3, [r3, #28]
 800ee22:	2b00      	cmp	r3, #0
 800ee24:	d131      	bne.n	800ee8a <TIM_DMACaptureCplt+0xb4>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 800ee26:	68fb      	ldr	r3, [r7, #12]
 800ee28:	2201      	movs	r2, #1
 800ee2a:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 800ee2e:	68fb      	ldr	r3, [r7, #12]
 800ee30:	2201      	movs	r2, #1
 800ee32:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800ee36:	e028      	b.n	800ee8a <TIM_DMACaptureCplt+0xb4>
    }
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 800ee38:	68fb      	ldr	r3, [r7, #12]
 800ee3a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ee3c:	687a      	ldr	r2, [r7, #4]
 800ee3e:	429a      	cmp	r2, r3
 800ee40:	d10f      	bne.n	800ee62 <TIM_DMACaptureCplt+0x8c>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800ee42:	68fb      	ldr	r3, [r7, #12]
 800ee44:	2204      	movs	r2, #4
 800ee46:	771a      	strb	r2, [r3, #28]
    
    if (hdma->Init.Mode == DMA_NORMAL)
 800ee48:	687b      	ldr	r3, [r7, #4]
 800ee4a:	69db      	ldr	r3, [r3, #28]
 800ee4c:	2b00      	cmp	r3, #0
 800ee4e:	d11c      	bne.n	800ee8a <TIM_DMACaptureCplt+0xb4>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_3, HAL_TIM_CHANNEL_STATE_READY);
 800ee50:	68fb      	ldr	r3, [r7, #12]
 800ee52:	2201      	movs	r2, #1
 800ee54:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_3, HAL_TIM_CHANNEL_STATE_READY);
 800ee58:	68fb      	ldr	r3, [r7, #12]
 800ee5a:	2201      	movs	r2, #1
 800ee5c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800ee60:	e013      	b.n	800ee8a <TIM_DMACaptureCplt+0xb4>
    }
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 800ee62:	68fb      	ldr	r3, [r7, #12]
 800ee64:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ee66:	687a      	ldr	r2, [r7, #4]
 800ee68:	429a      	cmp	r2, r3
 800ee6a:	d10e      	bne.n	800ee8a <TIM_DMACaptureCplt+0xb4>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800ee6c:	68fb      	ldr	r3, [r7, #12]
 800ee6e:	2208      	movs	r2, #8
 800ee70:	771a      	strb	r2, [r3, #28]
    
    if (hdma->Init.Mode == DMA_NORMAL)
 800ee72:	687b      	ldr	r3, [r7, #4]
 800ee74:	69db      	ldr	r3, [r3, #28]
 800ee76:	2b00      	cmp	r3, #0
 800ee78:	d107      	bne.n	800ee8a <TIM_DMACaptureCplt+0xb4>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_4, HAL_TIM_CHANNEL_STATE_READY);
 800ee7a:	68fb      	ldr	r3, [r7, #12]
 800ee7c:	2201      	movs	r2, #1
 800ee7e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_4, HAL_TIM_CHANNEL_STATE_READY);
 800ee82:	68fb      	ldr	r3, [r7, #12]
 800ee84:	2201      	movs	r2, #1
 800ee86:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47
  }

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
  htim->IC_CaptureCallback(htim);
#else
  HAL_TIM_IC_CaptureCallback(htim);
 800ee8a:	68f8      	ldr	r0, [r7, #12]
 800ee8c:	f7f7 fba8 	bl	80065e0 <HAL_TIM_IC_CaptureCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800ee90:	68fb      	ldr	r3, [r7, #12]
 800ee92:	2200      	movs	r2, #0
 800ee94:	771a      	strb	r2, [r3, #28]
}
 800ee96:	bf00      	nop
 800ee98:	3710      	adds	r7, #16
 800ee9a:	46bd      	mov	sp, r7
 800ee9c:	bd80      	pop	{r7, pc}

0800ee9e <TIM_DMACaptureHalfCplt>:
  * @brief  TIM DMA Capture half complete callback.
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
void TIM_DMACaptureHalfCplt(DMA_HandleTypeDef *hdma)
{
 800ee9e:	b580      	push	{r7, lr}
 800eea0:	b084      	sub	sp, #16
 800eea2:	af00      	add	r7, sp, #0
 800eea4:	6078      	str	r0, [r7, #4]
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800eea6:	687b      	ldr	r3, [r7, #4]
 800eea8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800eeaa:	60fb      	str	r3, [r7, #12]

  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 800eeac:	68fb      	ldr	r3, [r7, #12]
 800eeae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800eeb0:	687a      	ldr	r2, [r7, #4]
 800eeb2:	429a      	cmp	r2, r3
 800eeb4:	d103      	bne.n	800eebe <TIM_DMACaptureHalfCplt+0x20>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800eeb6:	68fb      	ldr	r3, [r7, #12]
 800eeb8:	2201      	movs	r2, #1
 800eeba:	771a      	strb	r2, [r3, #28]
 800eebc:	e019      	b.n	800eef2 <TIM_DMACaptureHalfCplt+0x54>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 800eebe:	68fb      	ldr	r3, [r7, #12]
 800eec0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800eec2:	687a      	ldr	r2, [r7, #4]
 800eec4:	429a      	cmp	r2, r3
 800eec6:	d103      	bne.n	800eed0 <TIM_DMACaptureHalfCplt+0x32>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800eec8:	68fb      	ldr	r3, [r7, #12]
 800eeca:	2202      	movs	r2, #2
 800eecc:	771a      	strb	r2, [r3, #28]
 800eece:	e010      	b.n	800eef2 <TIM_DMACaptureHalfCplt+0x54>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 800eed0:	68fb      	ldr	r3, [r7, #12]
 800eed2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800eed4:	687a      	ldr	r2, [r7, #4]
 800eed6:	429a      	cmp	r2, r3
 800eed8:	d103      	bne.n	800eee2 <TIM_DMACaptureHalfCplt+0x44>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800eeda:	68fb      	ldr	r3, [r7, #12]
 800eedc:	2204      	movs	r2, #4
 800eede:	771a      	strb	r2, [r3, #28]
 800eee0:	e007      	b.n	800eef2 <TIM_DMACaptureHalfCplt+0x54>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 800eee2:	68fb      	ldr	r3, [r7, #12]
 800eee4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800eee6:	687a      	ldr	r2, [r7, #4]
 800eee8:	429a      	cmp	r2, r3
 800eeea:	d102      	bne.n	800eef2 <TIM_DMACaptureHalfCplt+0x54>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800eeec:	68fb      	ldr	r3, [r7, #12]
 800eeee:	2208      	movs	r2, #8
 800eef0:	771a      	strb	r2, [r3, #28]
  }

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
  htim->IC_CaptureHalfCpltCallback(htim);
#else
  HAL_TIM_IC_CaptureHalfCpltCallback(htim);
 800eef2:	68f8      	ldr	r0, [r7, #12]
 800eef4:	f7ff fefe 	bl	800ecf4 <HAL_TIM_IC_CaptureHalfCpltCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800eef8:	68fb      	ldr	r3, [r7, #12]
 800eefa:	2200      	movs	r2, #0
 800eefc:	771a      	strb	r2, [r3, #28]
}
 800eefe:	bf00      	nop
 800ef00:	3710      	adds	r7, #16
 800ef02:	46bd      	mov	sp, r7
 800ef04:	bd80      	pop	{r7, pc}
	...

0800ef08 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 800ef08:	b480      	push	{r7}
 800ef0a:	b085      	sub	sp, #20
 800ef0c:	af00      	add	r7, sp, #0
 800ef0e:	6078      	str	r0, [r7, #4]
 800ef10:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800ef12:	687b      	ldr	r3, [r7, #4]
 800ef14:	681b      	ldr	r3, [r3, #0]
 800ef16:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800ef18:	687b      	ldr	r3, [r7, #4]
 800ef1a:	4a46      	ldr	r2, [pc, #280]	; (800f034 <TIM_Base_SetConfig+0x12c>)
 800ef1c:	4293      	cmp	r3, r2
 800ef1e:	d017      	beq.n	800ef50 <TIM_Base_SetConfig+0x48>
 800ef20:	687b      	ldr	r3, [r7, #4]
 800ef22:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800ef26:	d013      	beq.n	800ef50 <TIM_Base_SetConfig+0x48>
 800ef28:	687b      	ldr	r3, [r7, #4]
 800ef2a:	4a43      	ldr	r2, [pc, #268]	; (800f038 <TIM_Base_SetConfig+0x130>)
 800ef2c:	4293      	cmp	r3, r2
 800ef2e:	d00f      	beq.n	800ef50 <TIM_Base_SetConfig+0x48>
 800ef30:	687b      	ldr	r3, [r7, #4]
 800ef32:	4a42      	ldr	r2, [pc, #264]	; (800f03c <TIM_Base_SetConfig+0x134>)
 800ef34:	4293      	cmp	r3, r2
 800ef36:	d00b      	beq.n	800ef50 <TIM_Base_SetConfig+0x48>
 800ef38:	687b      	ldr	r3, [r7, #4]
 800ef3a:	4a41      	ldr	r2, [pc, #260]	; (800f040 <TIM_Base_SetConfig+0x138>)
 800ef3c:	4293      	cmp	r3, r2
 800ef3e:	d007      	beq.n	800ef50 <TIM_Base_SetConfig+0x48>
 800ef40:	687b      	ldr	r3, [r7, #4]
 800ef42:	4a40      	ldr	r2, [pc, #256]	; (800f044 <TIM_Base_SetConfig+0x13c>)
 800ef44:	4293      	cmp	r3, r2
 800ef46:	d003      	beq.n	800ef50 <TIM_Base_SetConfig+0x48>
 800ef48:	687b      	ldr	r3, [r7, #4]
 800ef4a:	4a3f      	ldr	r2, [pc, #252]	; (800f048 <TIM_Base_SetConfig+0x140>)
 800ef4c:	4293      	cmp	r3, r2
 800ef4e:	d108      	bne.n	800ef62 <TIM_Base_SetConfig+0x5a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800ef50:	68fb      	ldr	r3, [r7, #12]
 800ef52:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800ef56:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800ef58:	683b      	ldr	r3, [r7, #0]
 800ef5a:	685b      	ldr	r3, [r3, #4]
 800ef5c:	68fa      	ldr	r2, [r7, #12]
 800ef5e:	4313      	orrs	r3, r2
 800ef60:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800ef62:	687b      	ldr	r3, [r7, #4]
 800ef64:	4a33      	ldr	r2, [pc, #204]	; (800f034 <TIM_Base_SetConfig+0x12c>)
 800ef66:	4293      	cmp	r3, r2
 800ef68:	d023      	beq.n	800efb2 <TIM_Base_SetConfig+0xaa>
 800ef6a:	687b      	ldr	r3, [r7, #4]
 800ef6c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800ef70:	d01f      	beq.n	800efb2 <TIM_Base_SetConfig+0xaa>
 800ef72:	687b      	ldr	r3, [r7, #4]
 800ef74:	4a30      	ldr	r2, [pc, #192]	; (800f038 <TIM_Base_SetConfig+0x130>)
 800ef76:	4293      	cmp	r3, r2
 800ef78:	d01b      	beq.n	800efb2 <TIM_Base_SetConfig+0xaa>
 800ef7a:	687b      	ldr	r3, [r7, #4]
 800ef7c:	4a2f      	ldr	r2, [pc, #188]	; (800f03c <TIM_Base_SetConfig+0x134>)
 800ef7e:	4293      	cmp	r3, r2
 800ef80:	d017      	beq.n	800efb2 <TIM_Base_SetConfig+0xaa>
 800ef82:	687b      	ldr	r3, [r7, #4]
 800ef84:	4a2e      	ldr	r2, [pc, #184]	; (800f040 <TIM_Base_SetConfig+0x138>)
 800ef86:	4293      	cmp	r3, r2
 800ef88:	d013      	beq.n	800efb2 <TIM_Base_SetConfig+0xaa>
 800ef8a:	687b      	ldr	r3, [r7, #4]
 800ef8c:	4a2d      	ldr	r2, [pc, #180]	; (800f044 <TIM_Base_SetConfig+0x13c>)
 800ef8e:	4293      	cmp	r3, r2
 800ef90:	d00f      	beq.n	800efb2 <TIM_Base_SetConfig+0xaa>
 800ef92:	687b      	ldr	r3, [r7, #4]
 800ef94:	4a2d      	ldr	r2, [pc, #180]	; (800f04c <TIM_Base_SetConfig+0x144>)
 800ef96:	4293      	cmp	r3, r2
 800ef98:	d00b      	beq.n	800efb2 <TIM_Base_SetConfig+0xaa>
 800ef9a:	687b      	ldr	r3, [r7, #4]
 800ef9c:	4a2c      	ldr	r2, [pc, #176]	; (800f050 <TIM_Base_SetConfig+0x148>)
 800ef9e:	4293      	cmp	r3, r2
 800efa0:	d007      	beq.n	800efb2 <TIM_Base_SetConfig+0xaa>
 800efa2:	687b      	ldr	r3, [r7, #4]
 800efa4:	4a2b      	ldr	r2, [pc, #172]	; (800f054 <TIM_Base_SetConfig+0x14c>)
 800efa6:	4293      	cmp	r3, r2
 800efa8:	d003      	beq.n	800efb2 <TIM_Base_SetConfig+0xaa>
 800efaa:	687b      	ldr	r3, [r7, #4]
 800efac:	4a26      	ldr	r2, [pc, #152]	; (800f048 <TIM_Base_SetConfig+0x140>)
 800efae:	4293      	cmp	r3, r2
 800efb0:	d108      	bne.n	800efc4 <TIM_Base_SetConfig+0xbc>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800efb2:	68fb      	ldr	r3, [r7, #12]
 800efb4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800efb8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800efba:	683b      	ldr	r3, [r7, #0]
 800efbc:	68db      	ldr	r3, [r3, #12]
 800efbe:	68fa      	ldr	r2, [r7, #12]
 800efc0:	4313      	orrs	r3, r2
 800efc2:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800efc4:	68fb      	ldr	r3, [r7, #12]
 800efc6:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800efca:	683b      	ldr	r3, [r7, #0]
 800efcc:	695b      	ldr	r3, [r3, #20]
 800efce:	4313      	orrs	r3, r2
 800efd0:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800efd2:	687b      	ldr	r3, [r7, #4]
 800efd4:	68fa      	ldr	r2, [r7, #12]
 800efd6:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800efd8:	683b      	ldr	r3, [r7, #0]
 800efda:	689a      	ldr	r2, [r3, #8]
 800efdc:	687b      	ldr	r3, [r7, #4]
 800efde:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800efe0:	683b      	ldr	r3, [r7, #0]
 800efe2:	681a      	ldr	r2, [r3, #0]
 800efe4:	687b      	ldr	r3, [r7, #4]
 800efe6:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800efe8:	687b      	ldr	r3, [r7, #4]
 800efea:	4a12      	ldr	r2, [pc, #72]	; (800f034 <TIM_Base_SetConfig+0x12c>)
 800efec:	4293      	cmp	r3, r2
 800efee:	d013      	beq.n	800f018 <TIM_Base_SetConfig+0x110>
 800eff0:	687b      	ldr	r3, [r7, #4]
 800eff2:	4a14      	ldr	r2, [pc, #80]	; (800f044 <TIM_Base_SetConfig+0x13c>)
 800eff4:	4293      	cmp	r3, r2
 800eff6:	d00f      	beq.n	800f018 <TIM_Base_SetConfig+0x110>
 800eff8:	687b      	ldr	r3, [r7, #4]
 800effa:	4a14      	ldr	r2, [pc, #80]	; (800f04c <TIM_Base_SetConfig+0x144>)
 800effc:	4293      	cmp	r3, r2
 800effe:	d00b      	beq.n	800f018 <TIM_Base_SetConfig+0x110>
 800f000:	687b      	ldr	r3, [r7, #4]
 800f002:	4a13      	ldr	r2, [pc, #76]	; (800f050 <TIM_Base_SetConfig+0x148>)
 800f004:	4293      	cmp	r3, r2
 800f006:	d007      	beq.n	800f018 <TIM_Base_SetConfig+0x110>
 800f008:	687b      	ldr	r3, [r7, #4]
 800f00a:	4a12      	ldr	r2, [pc, #72]	; (800f054 <TIM_Base_SetConfig+0x14c>)
 800f00c:	4293      	cmp	r3, r2
 800f00e:	d003      	beq.n	800f018 <TIM_Base_SetConfig+0x110>
 800f010:	687b      	ldr	r3, [r7, #4]
 800f012:	4a0d      	ldr	r2, [pc, #52]	; (800f048 <TIM_Base_SetConfig+0x140>)
 800f014:	4293      	cmp	r3, r2
 800f016:	d103      	bne.n	800f020 <TIM_Base_SetConfig+0x118>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800f018:	683b      	ldr	r3, [r7, #0]
 800f01a:	691a      	ldr	r2, [r3, #16]
 800f01c:	687b      	ldr	r3, [r7, #4]
 800f01e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800f020:	687b      	ldr	r3, [r7, #4]
 800f022:	2201      	movs	r2, #1
 800f024:	615a      	str	r2, [r3, #20]
}
 800f026:	bf00      	nop
 800f028:	3714      	adds	r7, #20
 800f02a:	46bd      	mov	sp, r7
 800f02c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f030:	4770      	bx	lr
 800f032:	bf00      	nop
 800f034:	40012c00 	.word	0x40012c00
 800f038:	40000400 	.word	0x40000400
 800f03c:	40000800 	.word	0x40000800
 800f040:	40000c00 	.word	0x40000c00
 800f044:	40013400 	.word	0x40013400
 800f048:	40015000 	.word	0x40015000
 800f04c:	40014000 	.word	0x40014000
 800f050:	40014400 	.word	0x40014400
 800f054:	40014800 	.word	0x40014800

0800f058 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800f058:	b480      	push	{r7}
 800f05a:	b087      	sub	sp, #28
 800f05c:	af00      	add	r7, sp, #0
 800f05e:	6078      	str	r0, [r7, #4]
 800f060:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800f062:	687b      	ldr	r3, [r7, #4]
 800f064:	6a1b      	ldr	r3, [r3, #32]
 800f066:	f023 0201 	bic.w	r2, r3, #1
 800f06a:	687b      	ldr	r3, [r7, #4]
 800f06c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800f06e:	687b      	ldr	r3, [r7, #4]
 800f070:	6a1b      	ldr	r3, [r3, #32]
 800f072:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800f074:	687b      	ldr	r3, [r7, #4]
 800f076:	685b      	ldr	r3, [r3, #4]
 800f078:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800f07a:	687b      	ldr	r3, [r7, #4]
 800f07c:	699b      	ldr	r3, [r3, #24]
 800f07e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800f080:	68fb      	ldr	r3, [r7, #12]
 800f082:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800f086:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800f08a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800f08c:	68fb      	ldr	r3, [r7, #12]
 800f08e:	f023 0303 	bic.w	r3, r3, #3
 800f092:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800f094:	683b      	ldr	r3, [r7, #0]
 800f096:	681b      	ldr	r3, [r3, #0]
 800f098:	68fa      	ldr	r2, [r7, #12]
 800f09a:	4313      	orrs	r3, r2
 800f09c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800f09e:	697b      	ldr	r3, [r7, #20]
 800f0a0:	f023 0302 	bic.w	r3, r3, #2
 800f0a4:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800f0a6:	683b      	ldr	r3, [r7, #0]
 800f0a8:	689b      	ldr	r3, [r3, #8]
 800f0aa:	697a      	ldr	r2, [r7, #20]
 800f0ac:	4313      	orrs	r3, r2
 800f0ae:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800f0b0:	687b      	ldr	r3, [r7, #4]
 800f0b2:	4a30      	ldr	r2, [pc, #192]	; (800f174 <TIM_OC1_SetConfig+0x11c>)
 800f0b4:	4293      	cmp	r3, r2
 800f0b6:	d013      	beq.n	800f0e0 <TIM_OC1_SetConfig+0x88>
 800f0b8:	687b      	ldr	r3, [r7, #4]
 800f0ba:	4a2f      	ldr	r2, [pc, #188]	; (800f178 <TIM_OC1_SetConfig+0x120>)
 800f0bc:	4293      	cmp	r3, r2
 800f0be:	d00f      	beq.n	800f0e0 <TIM_OC1_SetConfig+0x88>
 800f0c0:	687b      	ldr	r3, [r7, #4]
 800f0c2:	4a2e      	ldr	r2, [pc, #184]	; (800f17c <TIM_OC1_SetConfig+0x124>)
 800f0c4:	4293      	cmp	r3, r2
 800f0c6:	d00b      	beq.n	800f0e0 <TIM_OC1_SetConfig+0x88>
 800f0c8:	687b      	ldr	r3, [r7, #4]
 800f0ca:	4a2d      	ldr	r2, [pc, #180]	; (800f180 <TIM_OC1_SetConfig+0x128>)
 800f0cc:	4293      	cmp	r3, r2
 800f0ce:	d007      	beq.n	800f0e0 <TIM_OC1_SetConfig+0x88>
 800f0d0:	687b      	ldr	r3, [r7, #4]
 800f0d2:	4a2c      	ldr	r2, [pc, #176]	; (800f184 <TIM_OC1_SetConfig+0x12c>)
 800f0d4:	4293      	cmp	r3, r2
 800f0d6:	d003      	beq.n	800f0e0 <TIM_OC1_SetConfig+0x88>
 800f0d8:	687b      	ldr	r3, [r7, #4]
 800f0da:	4a2b      	ldr	r2, [pc, #172]	; (800f188 <TIM_OC1_SetConfig+0x130>)
 800f0dc:	4293      	cmp	r3, r2
 800f0de:	d10c      	bne.n	800f0fa <TIM_OC1_SetConfig+0xa2>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800f0e0:	697b      	ldr	r3, [r7, #20]
 800f0e2:	f023 0308 	bic.w	r3, r3, #8
 800f0e6:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800f0e8:	683b      	ldr	r3, [r7, #0]
 800f0ea:	68db      	ldr	r3, [r3, #12]
 800f0ec:	697a      	ldr	r2, [r7, #20]
 800f0ee:	4313      	orrs	r3, r2
 800f0f0:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800f0f2:	697b      	ldr	r3, [r7, #20]
 800f0f4:	f023 0304 	bic.w	r3, r3, #4
 800f0f8:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800f0fa:	687b      	ldr	r3, [r7, #4]
 800f0fc:	4a1d      	ldr	r2, [pc, #116]	; (800f174 <TIM_OC1_SetConfig+0x11c>)
 800f0fe:	4293      	cmp	r3, r2
 800f100:	d013      	beq.n	800f12a <TIM_OC1_SetConfig+0xd2>
 800f102:	687b      	ldr	r3, [r7, #4]
 800f104:	4a1c      	ldr	r2, [pc, #112]	; (800f178 <TIM_OC1_SetConfig+0x120>)
 800f106:	4293      	cmp	r3, r2
 800f108:	d00f      	beq.n	800f12a <TIM_OC1_SetConfig+0xd2>
 800f10a:	687b      	ldr	r3, [r7, #4]
 800f10c:	4a1b      	ldr	r2, [pc, #108]	; (800f17c <TIM_OC1_SetConfig+0x124>)
 800f10e:	4293      	cmp	r3, r2
 800f110:	d00b      	beq.n	800f12a <TIM_OC1_SetConfig+0xd2>
 800f112:	687b      	ldr	r3, [r7, #4]
 800f114:	4a1a      	ldr	r2, [pc, #104]	; (800f180 <TIM_OC1_SetConfig+0x128>)
 800f116:	4293      	cmp	r3, r2
 800f118:	d007      	beq.n	800f12a <TIM_OC1_SetConfig+0xd2>
 800f11a:	687b      	ldr	r3, [r7, #4]
 800f11c:	4a19      	ldr	r2, [pc, #100]	; (800f184 <TIM_OC1_SetConfig+0x12c>)
 800f11e:	4293      	cmp	r3, r2
 800f120:	d003      	beq.n	800f12a <TIM_OC1_SetConfig+0xd2>
 800f122:	687b      	ldr	r3, [r7, #4]
 800f124:	4a18      	ldr	r2, [pc, #96]	; (800f188 <TIM_OC1_SetConfig+0x130>)
 800f126:	4293      	cmp	r3, r2
 800f128:	d111      	bne.n	800f14e <TIM_OC1_SetConfig+0xf6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800f12a:	693b      	ldr	r3, [r7, #16]
 800f12c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800f130:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800f132:	693b      	ldr	r3, [r7, #16]
 800f134:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800f138:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800f13a:	683b      	ldr	r3, [r7, #0]
 800f13c:	695b      	ldr	r3, [r3, #20]
 800f13e:	693a      	ldr	r2, [r7, #16]
 800f140:	4313      	orrs	r3, r2
 800f142:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800f144:	683b      	ldr	r3, [r7, #0]
 800f146:	699b      	ldr	r3, [r3, #24]
 800f148:	693a      	ldr	r2, [r7, #16]
 800f14a:	4313      	orrs	r3, r2
 800f14c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800f14e:	687b      	ldr	r3, [r7, #4]
 800f150:	693a      	ldr	r2, [r7, #16]
 800f152:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800f154:	687b      	ldr	r3, [r7, #4]
 800f156:	68fa      	ldr	r2, [r7, #12]
 800f158:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800f15a:	683b      	ldr	r3, [r7, #0]
 800f15c:	685a      	ldr	r2, [r3, #4]
 800f15e:	687b      	ldr	r3, [r7, #4]
 800f160:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800f162:	687b      	ldr	r3, [r7, #4]
 800f164:	697a      	ldr	r2, [r7, #20]
 800f166:	621a      	str	r2, [r3, #32]
}
 800f168:	bf00      	nop
 800f16a:	371c      	adds	r7, #28
 800f16c:	46bd      	mov	sp, r7
 800f16e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f172:	4770      	bx	lr
 800f174:	40012c00 	.word	0x40012c00
 800f178:	40013400 	.word	0x40013400
 800f17c:	40014000 	.word	0x40014000
 800f180:	40014400 	.word	0x40014400
 800f184:	40014800 	.word	0x40014800
 800f188:	40015000 	.word	0x40015000

0800f18c <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800f18c:	b480      	push	{r7}
 800f18e:	b087      	sub	sp, #28
 800f190:	af00      	add	r7, sp, #0
 800f192:	6078      	str	r0, [r7, #4]
 800f194:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800f196:	687b      	ldr	r3, [r7, #4]
 800f198:	6a1b      	ldr	r3, [r3, #32]
 800f19a:	f023 0210 	bic.w	r2, r3, #16
 800f19e:	687b      	ldr	r3, [r7, #4]
 800f1a0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800f1a2:	687b      	ldr	r3, [r7, #4]
 800f1a4:	6a1b      	ldr	r3, [r3, #32]
 800f1a6:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800f1a8:	687b      	ldr	r3, [r7, #4]
 800f1aa:	685b      	ldr	r3, [r3, #4]
 800f1ac:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800f1ae:	687b      	ldr	r3, [r7, #4]
 800f1b0:	699b      	ldr	r3, [r3, #24]
 800f1b2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800f1b4:	68fb      	ldr	r3, [r7, #12]
 800f1b6:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800f1ba:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800f1be:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800f1c0:	68fb      	ldr	r3, [r7, #12]
 800f1c2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800f1c6:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800f1c8:	683b      	ldr	r3, [r7, #0]
 800f1ca:	681b      	ldr	r3, [r3, #0]
 800f1cc:	021b      	lsls	r3, r3, #8
 800f1ce:	68fa      	ldr	r2, [r7, #12]
 800f1d0:	4313      	orrs	r3, r2
 800f1d2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800f1d4:	697b      	ldr	r3, [r7, #20]
 800f1d6:	f023 0320 	bic.w	r3, r3, #32
 800f1da:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800f1dc:	683b      	ldr	r3, [r7, #0]
 800f1de:	689b      	ldr	r3, [r3, #8]
 800f1e0:	011b      	lsls	r3, r3, #4
 800f1e2:	697a      	ldr	r2, [r7, #20]
 800f1e4:	4313      	orrs	r3, r2
 800f1e6:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800f1e8:	687b      	ldr	r3, [r7, #4]
 800f1ea:	4a2c      	ldr	r2, [pc, #176]	; (800f29c <TIM_OC2_SetConfig+0x110>)
 800f1ec:	4293      	cmp	r3, r2
 800f1ee:	d007      	beq.n	800f200 <TIM_OC2_SetConfig+0x74>
 800f1f0:	687b      	ldr	r3, [r7, #4]
 800f1f2:	4a2b      	ldr	r2, [pc, #172]	; (800f2a0 <TIM_OC2_SetConfig+0x114>)
 800f1f4:	4293      	cmp	r3, r2
 800f1f6:	d003      	beq.n	800f200 <TIM_OC2_SetConfig+0x74>
 800f1f8:	687b      	ldr	r3, [r7, #4]
 800f1fa:	4a2a      	ldr	r2, [pc, #168]	; (800f2a4 <TIM_OC2_SetConfig+0x118>)
 800f1fc:	4293      	cmp	r3, r2
 800f1fe:	d10d      	bne.n	800f21c <TIM_OC2_SetConfig+0x90>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800f200:	697b      	ldr	r3, [r7, #20]
 800f202:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800f206:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800f208:	683b      	ldr	r3, [r7, #0]
 800f20a:	68db      	ldr	r3, [r3, #12]
 800f20c:	011b      	lsls	r3, r3, #4
 800f20e:	697a      	ldr	r2, [r7, #20]
 800f210:	4313      	orrs	r3, r2
 800f212:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800f214:	697b      	ldr	r3, [r7, #20]
 800f216:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800f21a:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800f21c:	687b      	ldr	r3, [r7, #4]
 800f21e:	4a1f      	ldr	r2, [pc, #124]	; (800f29c <TIM_OC2_SetConfig+0x110>)
 800f220:	4293      	cmp	r3, r2
 800f222:	d013      	beq.n	800f24c <TIM_OC2_SetConfig+0xc0>
 800f224:	687b      	ldr	r3, [r7, #4]
 800f226:	4a1e      	ldr	r2, [pc, #120]	; (800f2a0 <TIM_OC2_SetConfig+0x114>)
 800f228:	4293      	cmp	r3, r2
 800f22a:	d00f      	beq.n	800f24c <TIM_OC2_SetConfig+0xc0>
 800f22c:	687b      	ldr	r3, [r7, #4]
 800f22e:	4a1e      	ldr	r2, [pc, #120]	; (800f2a8 <TIM_OC2_SetConfig+0x11c>)
 800f230:	4293      	cmp	r3, r2
 800f232:	d00b      	beq.n	800f24c <TIM_OC2_SetConfig+0xc0>
 800f234:	687b      	ldr	r3, [r7, #4]
 800f236:	4a1d      	ldr	r2, [pc, #116]	; (800f2ac <TIM_OC2_SetConfig+0x120>)
 800f238:	4293      	cmp	r3, r2
 800f23a:	d007      	beq.n	800f24c <TIM_OC2_SetConfig+0xc0>
 800f23c:	687b      	ldr	r3, [r7, #4]
 800f23e:	4a1c      	ldr	r2, [pc, #112]	; (800f2b0 <TIM_OC2_SetConfig+0x124>)
 800f240:	4293      	cmp	r3, r2
 800f242:	d003      	beq.n	800f24c <TIM_OC2_SetConfig+0xc0>
 800f244:	687b      	ldr	r3, [r7, #4]
 800f246:	4a17      	ldr	r2, [pc, #92]	; (800f2a4 <TIM_OC2_SetConfig+0x118>)
 800f248:	4293      	cmp	r3, r2
 800f24a:	d113      	bne.n	800f274 <TIM_OC2_SetConfig+0xe8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800f24c:	693b      	ldr	r3, [r7, #16]
 800f24e:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800f252:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800f254:	693b      	ldr	r3, [r7, #16]
 800f256:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800f25a:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800f25c:	683b      	ldr	r3, [r7, #0]
 800f25e:	695b      	ldr	r3, [r3, #20]
 800f260:	009b      	lsls	r3, r3, #2
 800f262:	693a      	ldr	r2, [r7, #16]
 800f264:	4313      	orrs	r3, r2
 800f266:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800f268:	683b      	ldr	r3, [r7, #0]
 800f26a:	699b      	ldr	r3, [r3, #24]
 800f26c:	009b      	lsls	r3, r3, #2
 800f26e:	693a      	ldr	r2, [r7, #16]
 800f270:	4313      	orrs	r3, r2
 800f272:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800f274:	687b      	ldr	r3, [r7, #4]
 800f276:	693a      	ldr	r2, [r7, #16]
 800f278:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800f27a:	687b      	ldr	r3, [r7, #4]
 800f27c:	68fa      	ldr	r2, [r7, #12]
 800f27e:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800f280:	683b      	ldr	r3, [r7, #0]
 800f282:	685a      	ldr	r2, [r3, #4]
 800f284:	687b      	ldr	r3, [r7, #4]
 800f286:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800f288:	687b      	ldr	r3, [r7, #4]
 800f28a:	697a      	ldr	r2, [r7, #20]
 800f28c:	621a      	str	r2, [r3, #32]
}
 800f28e:	bf00      	nop
 800f290:	371c      	adds	r7, #28
 800f292:	46bd      	mov	sp, r7
 800f294:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f298:	4770      	bx	lr
 800f29a:	bf00      	nop
 800f29c:	40012c00 	.word	0x40012c00
 800f2a0:	40013400 	.word	0x40013400
 800f2a4:	40015000 	.word	0x40015000
 800f2a8:	40014000 	.word	0x40014000
 800f2ac:	40014400 	.word	0x40014400
 800f2b0:	40014800 	.word	0x40014800

0800f2b4 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800f2b4:	b480      	push	{r7}
 800f2b6:	b087      	sub	sp, #28
 800f2b8:	af00      	add	r7, sp, #0
 800f2ba:	6078      	str	r0, [r7, #4]
 800f2bc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800f2be:	687b      	ldr	r3, [r7, #4]
 800f2c0:	6a1b      	ldr	r3, [r3, #32]
 800f2c2:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800f2c6:	687b      	ldr	r3, [r7, #4]
 800f2c8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800f2ca:	687b      	ldr	r3, [r7, #4]
 800f2cc:	6a1b      	ldr	r3, [r3, #32]
 800f2ce:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800f2d0:	687b      	ldr	r3, [r7, #4]
 800f2d2:	685b      	ldr	r3, [r3, #4]
 800f2d4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800f2d6:	687b      	ldr	r3, [r7, #4]
 800f2d8:	69db      	ldr	r3, [r3, #28]
 800f2da:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800f2dc:	68fb      	ldr	r3, [r7, #12]
 800f2de:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800f2e2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800f2e6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800f2e8:	68fb      	ldr	r3, [r7, #12]
 800f2ea:	f023 0303 	bic.w	r3, r3, #3
 800f2ee:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800f2f0:	683b      	ldr	r3, [r7, #0]
 800f2f2:	681b      	ldr	r3, [r3, #0]
 800f2f4:	68fa      	ldr	r2, [r7, #12]
 800f2f6:	4313      	orrs	r3, r2
 800f2f8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800f2fa:	697b      	ldr	r3, [r7, #20]
 800f2fc:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800f300:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800f302:	683b      	ldr	r3, [r7, #0]
 800f304:	689b      	ldr	r3, [r3, #8]
 800f306:	021b      	lsls	r3, r3, #8
 800f308:	697a      	ldr	r2, [r7, #20]
 800f30a:	4313      	orrs	r3, r2
 800f30c:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800f30e:	687b      	ldr	r3, [r7, #4]
 800f310:	4a2b      	ldr	r2, [pc, #172]	; (800f3c0 <TIM_OC3_SetConfig+0x10c>)
 800f312:	4293      	cmp	r3, r2
 800f314:	d007      	beq.n	800f326 <TIM_OC3_SetConfig+0x72>
 800f316:	687b      	ldr	r3, [r7, #4]
 800f318:	4a2a      	ldr	r2, [pc, #168]	; (800f3c4 <TIM_OC3_SetConfig+0x110>)
 800f31a:	4293      	cmp	r3, r2
 800f31c:	d003      	beq.n	800f326 <TIM_OC3_SetConfig+0x72>
 800f31e:	687b      	ldr	r3, [r7, #4]
 800f320:	4a29      	ldr	r2, [pc, #164]	; (800f3c8 <TIM_OC3_SetConfig+0x114>)
 800f322:	4293      	cmp	r3, r2
 800f324:	d10d      	bne.n	800f342 <TIM_OC3_SetConfig+0x8e>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800f326:	697b      	ldr	r3, [r7, #20]
 800f328:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800f32c:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800f32e:	683b      	ldr	r3, [r7, #0]
 800f330:	68db      	ldr	r3, [r3, #12]
 800f332:	021b      	lsls	r3, r3, #8
 800f334:	697a      	ldr	r2, [r7, #20]
 800f336:	4313      	orrs	r3, r2
 800f338:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800f33a:	697b      	ldr	r3, [r7, #20]
 800f33c:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800f340:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800f342:	687b      	ldr	r3, [r7, #4]
 800f344:	4a1e      	ldr	r2, [pc, #120]	; (800f3c0 <TIM_OC3_SetConfig+0x10c>)
 800f346:	4293      	cmp	r3, r2
 800f348:	d013      	beq.n	800f372 <TIM_OC3_SetConfig+0xbe>
 800f34a:	687b      	ldr	r3, [r7, #4]
 800f34c:	4a1d      	ldr	r2, [pc, #116]	; (800f3c4 <TIM_OC3_SetConfig+0x110>)
 800f34e:	4293      	cmp	r3, r2
 800f350:	d00f      	beq.n	800f372 <TIM_OC3_SetConfig+0xbe>
 800f352:	687b      	ldr	r3, [r7, #4]
 800f354:	4a1d      	ldr	r2, [pc, #116]	; (800f3cc <TIM_OC3_SetConfig+0x118>)
 800f356:	4293      	cmp	r3, r2
 800f358:	d00b      	beq.n	800f372 <TIM_OC3_SetConfig+0xbe>
 800f35a:	687b      	ldr	r3, [r7, #4]
 800f35c:	4a1c      	ldr	r2, [pc, #112]	; (800f3d0 <TIM_OC3_SetConfig+0x11c>)
 800f35e:	4293      	cmp	r3, r2
 800f360:	d007      	beq.n	800f372 <TIM_OC3_SetConfig+0xbe>
 800f362:	687b      	ldr	r3, [r7, #4]
 800f364:	4a1b      	ldr	r2, [pc, #108]	; (800f3d4 <TIM_OC3_SetConfig+0x120>)
 800f366:	4293      	cmp	r3, r2
 800f368:	d003      	beq.n	800f372 <TIM_OC3_SetConfig+0xbe>
 800f36a:	687b      	ldr	r3, [r7, #4]
 800f36c:	4a16      	ldr	r2, [pc, #88]	; (800f3c8 <TIM_OC3_SetConfig+0x114>)
 800f36e:	4293      	cmp	r3, r2
 800f370:	d113      	bne.n	800f39a <TIM_OC3_SetConfig+0xe6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800f372:	693b      	ldr	r3, [r7, #16]
 800f374:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800f378:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800f37a:	693b      	ldr	r3, [r7, #16]
 800f37c:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800f380:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800f382:	683b      	ldr	r3, [r7, #0]
 800f384:	695b      	ldr	r3, [r3, #20]
 800f386:	011b      	lsls	r3, r3, #4
 800f388:	693a      	ldr	r2, [r7, #16]
 800f38a:	4313      	orrs	r3, r2
 800f38c:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800f38e:	683b      	ldr	r3, [r7, #0]
 800f390:	699b      	ldr	r3, [r3, #24]
 800f392:	011b      	lsls	r3, r3, #4
 800f394:	693a      	ldr	r2, [r7, #16]
 800f396:	4313      	orrs	r3, r2
 800f398:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800f39a:	687b      	ldr	r3, [r7, #4]
 800f39c:	693a      	ldr	r2, [r7, #16]
 800f39e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800f3a0:	687b      	ldr	r3, [r7, #4]
 800f3a2:	68fa      	ldr	r2, [r7, #12]
 800f3a4:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800f3a6:	683b      	ldr	r3, [r7, #0]
 800f3a8:	685a      	ldr	r2, [r3, #4]
 800f3aa:	687b      	ldr	r3, [r7, #4]
 800f3ac:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800f3ae:	687b      	ldr	r3, [r7, #4]
 800f3b0:	697a      	ldr	r2, [r7, #20]
 800f3b2:	621a      	str	r2, [r3, #32]
}
 800f3b4:	bf00      	nop
 800f3b6:	371c      	adds	r7, #28
 800f3b8:	46bd      	mov	sp, r7
 800f3ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f3be:	4770      	bx	lr
 800f3c0:	40012c00 	.word	0x40012c00
 800f3c4:	40013400 	.word	0x40013400
 800f3c8:	40015000 	.word	0x40015000
 800f3cc:	40014000 	.word	0x40014000
 800f3d0:	40014400 	.word	0x40014400
 800f3d4:	40014800 	.word	0x40014800

0800f3d8 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800f3d8:	b480      	push	{r7}
 800f3da:	b087      	sub	sp, #28
 800f3dc:	af00      	add	r7, sp, #0
 800f3de:	6078      	str	r0, [r7, #4]
 800f3e0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800f3e2:	687b      	ldr	r3, [r7, #4]
 800f3e4:	6a1b      	ldr	r3, [r3, #32]
 800f3e6:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800f3ea:	687b      	ldr	r3, [r7, #4]
 800f3ec:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800f3ee:	687b      	ldr	r3, [r7, #4]
 800f3f0:	6a1b      	ldr	r3, [r3, #32]
 800f3f2:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800f3f4:	687b      	ldr	r3, [r7, #4]
 800f3f6:	685b      	ldr	r3, [r3, #4]
 800f3f8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800f3fa:	687b      	ldr	r3, [r7, #4]
 800f3fc:	69db      	ldr	r3, [r3, #28]
 800f3fe:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800f400:	68fb      	ldr	r3, [r7, #12]
 800f402:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800f406:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800f40a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800f40c:	68fb      	ldr	r3, [r7, #12]
 800f40e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800f412:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800f414:	683b      	ldr	r3, [r7, #0]
 800f416:	681b      	ldr	r3, [r3, #0]
 800f418:	021b      	lsls	r3, r3, #8
 800f41a:	68fa      	ldr	r2, [r7, #12]
 800f41c:	4313      	orrs	r3, r2
 800f41e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800f420:	697b      	ldr	r3, [r7, #20]
 800f422:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800f426:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800f428:	683b      	ldr	r3, [r7, #0]
 800f42a:	689b      	ldr	r3, [r3, #8]
 800f42c:	031b      	lsls	r3, r3, #12
 800f42e:	697a      	ldr	r2, [r7, #20]
 800f430:	4313      	orrs	r3, r2
 800f432:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_4))
 800f434:	687b      	ldr	r3, [r7, #4]
 800f436:	4a2c      	ldr	r2, [pc, #176]	; (800f4e8 <TIM_OC4_SetConfig+0x110>)
 800f438:	4293      	cmp	r3, r2
 800f43a:	d007      	beq.n	800f44c <TIM_OC4_SetConfig+0x74>
 800f43c:	687b      	ldr	r3, [r7, #4]
 800f43e:	4a2b      	ldr	r2, [pc, #172]	; (800f4ec <TIM_OC4_SetConfig+0x114>)
 800f440:	4293      	cmp	r3, r2
 800f442:	d003      	beq.n	800f44c <TIM_OC4_SetConfig+0x74>
 800f444:	687b      	ldr	r3, [r7, #4]
 800f446:	4a2a      	ldr	r2, [pc, #168]	; (800f4f0 <TIM_OC4_SetConfig+0x118>)
 800f448:	4293      	cmp	r3, r2
 800f44a:	d10d      	bne.n	800f468 <TIM_OC4_SetConfig+0x90>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC4NP;
 800f44c:	697b      	ldr	r3, [r7, #20]
 800f44e:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800f452:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 12U);
 800f454:	683b      	ldr	r3, [r7, #0]
 800f456:	68db      	ldr	r3, [r3, #12]
 800f458:	031b      	lsls	r3, r3, #12
 800f45a:	697a      	ldr	r2, [r7, #20]
 800f45c:	4313      	orrs	r3, r2
 800f45e:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC4NE;
 800f460:	697b      	ldr	r3, [r7, #20]
 800f462:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800f466:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800f468:	687b      	ldr	r3, [r7, #4]
 800f46a:	4a1f      	ldr	r2, [pc, #124]	; (800f4e8 <TIM_OC4_SetConfig+0x110>)
 800f46c:	4293      	cmp	r3, r2
 800f46e:	d013      	beq.n	800f498 <TIM_OC4_SetConfig+0xc0>
 800f470:	687b      	ldr	r3, [r7, #4]
 800f472:	4a1e      	ldr	r2, [pc, #120]	; (800f4ec <TIM_OC4_SetConfig+0x114>)
 800f474:	4293      	cmp	r3, r2
 800f476:	d00f      	beq.n	800f498 <TIM_OC4_SetConfig+0xc0>
 800f478:	687b      	ldr	r3, [r7, #4]
 800f47a:	4a1e      	ldr	r2, [pc, #120]	; (800f4f4 <TIM_OC4_SetConfig+0x11c>)
 800f47c:	4293      	cmp	r3, r2
 800f47e:	d00b      	beq.n	800f498 <TIM_OC4_SetConfig+0xc0>
 800f480:	687b      	ldr	r3, [r7, #4]
 800f482:	4a1d      	ldr	r2, [pc, #116]	; (800f4f8 <TIM_OC4_SetConfig+0x120>)
 800f484:	4293      	cmp	r3, r2
 800f486:	d007      	beq.n	800f498 <TIM_OC4_SetConfig+0xc0>
 800f488:	687b      	ldr	r3, [r7, #4]
 800f48a:	4a1c      	ldr	r2, [pc, #112]	; (800f4fc <TIM_OC4_SetConfig+0x124>)
 800f48c:	4293      	cmp	r3, r2
 800f48e:	d003      	beq.n	800f498 <TIM_OC4_SetConfig+0xc0>
 800f490:	687b      	ldr	r3, [r7, #4]
 800f492:	4a17      	ldr	r2, [pc, #92]	; (800f4f0 <TIM_OC4_SetConfig+0x118>)
 800f494:	4293      	cmp	r3, r2
 800f496:	d113      	bne.n	800f4c0 <TIM_OC4_SetConfig+0xe8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800f498:	693b      	ldr	r3, [r7, #16]
 800f49a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800f49e:	613b      	str	r3, [r7, #16]
    /* Reset the Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4N;
 800f4a0:	693b      	ldr	r3, [r7, #16]
 800f4a2:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800f4a6:	613b      	str	r3, [r7, #16]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800f4a8:	683b      	ldr	r3, [r7, #0]
 800f4aa:	695b      	ldr	r3, [r3, #20]
 800f4ac:	019b      	lsls	r3, r3, #6
 800f4ae:	693a      	ldr	r2, [r7, #16]
 800f4b0:	4313      	orrs	r3, r2
 800f4b2:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 6U);
 800f4b4:	683b      	ldr	r3, [r7, #0]
 800f4b6:	699b      	ldr	r3, [r3, #24]
 800f4b8:	019b      	lsls	r3, r3, #6
 800f4ba:	693a      	ldr	r2, [r7, #16]
 800f4bc:	4313      	orrs	r3, r2
 800f4be:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800f4c0:	687b      	ldr	r3, [r7, #4]
 800f4c2:	693a      	ldr	r2, [r7, #16]
 800f4c4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800f4c6:	687b      	ldr	r3, [r7, #4]
 800f4c8:	68fa      	ldr	r2, [r7, #12]
 800f4ca:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800f4cc:	683b      	ldr	r3, [r7, #0]
 800f4ce:	685a      	ldr	r2, [r3, #4]
 800f4d0:	687b      	ldr	r3, [r7, #4]
 800f4d2:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800f4d4:	687b      	ldr	r3, [r7, #4]
 800f4d6:	697a      	ldr	r2, [r7, #20]
 800f4d8:	621a      	str	r2, [r3, #32]
}
 800f4da:	bf00      	nop
 800f4dc:	371c      	adds	r7, #28
 800f4de:	46bd      	mov	sp, r7
 800f4e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f4e4:	4770      	bx	lr
 800f4e6:	bf00      	nop
 800f4e8:	40012c00 	.word	0x40012c00
 800f4ec:	40013400 	.word	0x40013400
 800f4f0:	40015000 	.word	0x40015000
 800f4f4:	40014000 	.word	0x40014000
 800f4f8:	40014400 	.word	0x40014400
 800f4fc:	40014800 	.word	0x40014800

0800f500 <TIM_OC5_SetConfig>:
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 800f500:	b480      	push	{r7}
 800f502:	b087      	sub	sp, #28
 800f504:	af00      	add	r7, sp, #0
 800f506:	6078      	str	r0, [r7, #4]
 800f508:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 800f50a:	687b      	ldr	r3, [r7, #4]
 800f50c:	6a1b      	ldr	r3, [r3, #32]
 800f50e:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800f512:	687b      	ldr	r3, [r7, #4]
 800f514:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800f516:	687b      	ldr	r3, [r7, #4]
 800f518:	6a1b      	ldr	r3, [r3, #32]
 800f51a:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800f51c:	687b      	ldr	r3, [r7, #4]
 800f51e:	685b      	ldr	r3, [r3, #4]
 800f520:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800f522:	687b      	ldr	r3, [r7, #4]
 800f524:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800f526:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 800f528:	68fb      	ldr	r3, [r7, #12]
 800f52a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800f52e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800f532:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800f534:	683b      	ldr	r3, [r7, #0]
 800f536:	681b      	ldr	r3, [r3, #0]
 800f538:	68fa      	ldr	r2, [r7, #12]
 800f53a:	4313      	orrs	r3, r2
 800f53c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 800f53e:	693b      	ldr	r3, [r7, #16]
 800f540:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 800f544:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 800f546:	683b      	ldr	r3, [r7, #0]
 800f548:	689b      	ldr	r3, [r3, #8]
 800f54a:	041b      	lsls	r3, r3, #16
 800f54c:	693a      	ldr	r2, [r7, #16]
 800f54e:	4313      	orrs	r3, r2
 800f550:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800f552:	687b      	ldr	r3, [r7, #4]
 800f554:	4a19      	ldr	r2, [pc, #100]	; (800f5bc <TIM_OC5_SetConfig+0xbc>)
 800f556:	4293      	cmp	r3, r2
 800f558:	d013      	beq.n	800f582 <TIM_OC5_SetConfig+0x82>
 800f55a:	687b      	ldr	r3, [r7, #4]
 800f55c:	4a18      	ldr	r2, [pc, #96]	; (800f5c0 <TIM_OC5_SetConfig+0xc0>)
 800f55e:	4293      	cmp	r3, r2
 800f560:	d00f      	beq.n	800f582 <TIM_OC5_SetConfig+0x82>
 800f562:	687b      	ldr	r3, [r7, #4]
 800f564:	4a17      	ldr	r2, [pc, #92]	; (800f5c4 <TIM_OC5_SetConfig+0xc4>)
 800f566:	4293      	cmp	r3, r2
 800f568:	d00b      	beq.n	800f582 <TIM_OC5_SetConfig+0x82>
 800f56a:	687b      	ldr	r3, [r7, #4]
 800f56c:	4a16      	ldr	r2, [pc, #88]	; (800f5c8 <TIM_OC5_SetConfig+0xc8>)
 800f56e:	4293      	cmp	r3, r2
 800f570:	d007      	beq.n	800f582 <TIM_OC5_SetConfig+0x82>
 800f572:	687b      	ldr	r3, [r7, #4]
 800f574:	4a15      	ldr	r2, [pc, #84]	; (800f5cc <TIM_OC5_SetConfig+0xcc>)
 800f576:	4293      	cmp	r3, r2
 800f578:	d003      	beq.n	800f582 <TIM_OC5_SetConfig+0x82>
 800f57a:	687b      	ldr	r3, [r7, #4]
 800f57c:	4a14      	ldr	r2, [pc, #80]	; (800f5d0 <TIM_OC5_SetConfig+0xd0>)
 800f57e:	4293      	cmp	r3, r2
 800f580:	d109      	bne.n	800f596 <TIM_OC5_SetConfig+0x96>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 800f582:	697b      	ldr	r3, [r7, #20]
 800f584:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800f588:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 800f58a:	683b      	ldr	r3, [r7, #0]
 800f58c:	695b      	ldr	r3, [r3, #20]
 800f58e:	021b      	lsls	r3, r3, #8
 800f590:	697a      	ldr	r2, [r7, #20]
 800f592:	4313      	orrs	r3, r2
 800f594:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800f596:	687b      	ldr	r3, [r7, #4]
 800f598:	697a      	ldr	r2, [r7, #20]
 800f59a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800f59c:	687b      	ldr	r3, [r7, #4]
 800f59e:	68fa      	ldr	r2, [r7, #12]
 800f5a0:	651a      	str	r2, [r3, #80]	; 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 800f5a2:	683b      	ldr	r3, [r7, #0]
 800f5a4:	685a      	ldr	r2, [r3, #4]
 800f5a6:	687b      	ldr	r3, [r7, #4]
 800f5a8:	649a      	str	r2, [r3, #72]	; 0x48

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800f5aa:	687b      	ldr	r3, [r7, #4]
 800f5ac:	693a      	ldr	r2, [r7, #16]
 800f5ae:	621a      	str	r2, [r3, #32]
}
 800f5b0:	bf00      	nop
 800f5b2:	371c      	adds	r7, #28
 800f5b4:	46bd      	mov	sp, r7
 800f5b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f5ba:	4770      	bx	lr
 800f5bc:	40012c00 	.word	0x40012c00
 800f5c0:	40013400 	.word	0x40013400
 800f5c4:	40014000 	.word	0x40014000
 800f5c8:	40014400 	.word	0x40014400
 800f5cc:	40014800 	.word	0x40014800
 800f5d0:	40015000 	.word	0x40015000

0800f5d4 <TIM_OC6_SetConfig>:
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 800f5d4:	b480      	push	{r7}
 800f5d6:	b087      	sub	sp, #28
 800f5d8:	af00      	add	r7, sp, #0
 800f5da:	6078      	str	r0, [r7, #4]
 800f5dc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 800f5de:	687b      	ldr	r3, [r7, #4]
 800f5e0:	6a1b      	ldr	r3, [r3, #32]
 800f5e2:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 800f5e6:	687b      	ldr	r3, [r7, #4]
 800f5e8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800f5ea:	687b      	ldr	r3, [r7, #4]
 800f5ec:	6a1b      	ldr	r3, [r3, #32]
 800f5ee:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800f5f0:	687b      	ldr	r3, [r7, #4]
 800f5f2:	685b      	ldr	r3, [r3, #4]
 800f5f4:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800f5f6:	687b      	ldr	r3, [r7, #4]
 800f5f8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800f5fa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 800f5fc:	68fb      	ldr	r3, [r7, #12]
 800f5fe:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800f602:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800f606:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800f608:	683b      	ldr	r3, [r7, #0]
 800f60a:	681b      	ldr	r3, [r3, #0]
 800f60c:	021b      	lsls	r3, r3, #8
 800f60e:	68fa      	ldr	r2, [r7, #12]
 800f610:	4313      	orrs	r3, r2
 800f612:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 800f614:	693b      	ldr	r3, [r7, #16]
 800f616:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800f61a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 800f61c:	683b      	ldr	r3, [r7, #0]
 800f61e:	689b      	ldr	r3, [r3, #8]
 800f620:	051b      	lsls	r3, r3, #20
 800f622:	693a      	ldr	r2, [r7, #16]
 800f624:	4313      	orrs	r3, r2
 800f626:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800f628:	687b      	ldr	r3, [r7, #4]
 800f62a:	4a1a      	ldr	r2, [pc, #104]	; (800f694 <TIM_OC6_SetConfig+0xc0>)
 800f62c:	4293      	cmp	r3, r2
 800f62e:	d013      	beq.n	800f658 <TIM_OC6_SetConfig+0x84>
 800f630:	687b      	ldr	r3, [r7, #4]
 800f632:	4a19      	ldr	r2, [pc, #100]	; (800f698 <TIM_OC6_SetConfig+0xc4>)
 800f634:	4293      	cmp	r3, r2
 800f636:	d00f      	beq.n	800f658 <TIM_OC6_SetConfig+0x84>
 800f638:	687b      	ldr	r3, [r7, #4]
 800f63a:	4a18      	ldr	r2, [pc, #96]	; (800f69c <TIM_OC6_SetConfig+0xc8>)
 800f63c:	4293      	cmp	r3, r2
 800f63e:	d00b      	beq.n	800f658 <TIM_OC6_SetConfig+0x84>
 800f640:	687b      	ldr	r3, [r7, #4]
 800f642:	4a17      	ldr	r2, [pc, #92]	; (800f6a0 <TIM_OC6_SetConfig+0xcc>)
 800f644:	4293      	cmp	r3, r2
 800f646:	d007      	beq.n	800f658 <TIM_OC6_SetConfig+0x84>
 800f648:	687b      	ldr	r3, [r7, #4]
 800f64a:	4a16      	ldr	r2, [pc, #88]	; (800f6a4 <TIM_OC6_SetConfig+0xd0>)
 800f64c:	4293      	cmp	r3, r2
 800f64e:	d003      	beq.n	800f658 <TIM_OC6_SetConfig+0x84>
 800f650:	687b      	ldr	r3, [r7, #4]
 800f652:	4a15      	ldr	r2, [pc, #84]	; (800f6a8 <TIM_OC6_SetConfig+0xd4>)
 800f654:	4293      	cmp	r3, r2
 800f656:	d109      	bne.n	800f66c <TIM_OC6_SetConfig+0x98>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 800f658:	697b      	ldr	r3, [r7, #20]
 800f65a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800f65e:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 800f660:	683b      	ldr	r3, [r7, #0]
 800f662:	695b      	ldr	r3, [r3, #20]
 800f664:	029b      	lsls	r3, r3, #10
 800f666:	697a      	ldr	r2, [r7, #20]
 800f668:	4313      	orrs	r3, r2
 800f66a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800f66c:	687b      	ldr	r3, [r7, #4]
 800f66e:	697a      	ldr	r2, [r7, #20]
 800f670:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800f672:	687b      	ldr	r3, [r7, #4]
 800f674:	68fa      	ldr	r2, [r7, #12]
 800f676:	651a      	str	r2, [r3, #80]	; 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 800f678:	683b      	ldr	r3, [r7, #0]
 800f67a:	685a      	ldr	r2, [r3, #4]
 800f67c:	687b      	ldr	r3, [r7, #4]
 800f67e:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800f680:	687b      	ldr	r3, [r7, #4]
 800f682:	693a      	ldr	r2, [r7, #16]
 800f684:	621a      	str	r2, [r3, #32]
}
 800f686:	bf00      	nop
 800f688:	371c      	adds	r7, #28
 800f68a:	46bd      	mov	sp, r7
 800f68c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f690:	4770      	bx	lr
 800f692:	bf00      	nop
 800f694:	40012c00 	.word	0x40012c00
 800f698:	40013400 	.word	0x40013400
 800f69c:	40014000 	.word	0x40014000
 800f6a0:	40014400 	.word	0x40014400
 800f6a4:	40014800 	.word	0x40014800
 800f6a8:	40015000 	.word	0x40015000

0800f6ac <TIM_SlaveTimer_SetConfig>:
  * @param  sSlaveConfig Slave timer configuration
  * @retval None
  */
static HAL_StatusTypeDef TIM_SlaveTimer_SetConfig(TIM_HandleTypeDef *htim,
                                                  TIM_SlaveConfigTypeDef *sSlaveConfig)
{
 800f6ac:	b580      	push	{r7, lr}
 800f6ae:	b086      	sub	sp, #24
 800f6b0:	af00      	add	r7, sp, #0
 800f6b2:	6078      	str	r0, [r7, #4]
 800f6b4:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800f6b6:	687b      	ldr	r3, [r7, #4]
 800f6b8:	681b      	ldr	r3, [r3, #0]
 800f6ba:	689b      	ldr	r3, [r3, #8]
 800f6bc:	617b      	str	r3, [r7, #20]

  /* Reset the Trigger Selection Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800f6be:	697b      	ldr	r3, [r7, #20]
 800f6c0:	f423 1340 	bic.w	r3, r3, #3145728	; 0x300000
 800f6c4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800f6c8:	617b      	str	r3, [r7, #20]
  /* Set the Input Trigger source */
  tmpsmcr |= sSlaveConfig->InputTrigger;
 800f6ca:	683b      	ldr	r3, [r7, #0]
 800f6cc:	685b      	ldr	r3, [r3, #4]
 800f6ce:	697a      	ldr	r2, [r7, #20]
 800f6d0:	4313      	orrs	r3, r2
 800f6d2:	617b      	str	r3, [r7, #20]

  /* Reset the slave mode Bits */
  tmpsmcr &= ~TIM_SMCR_SMS;
 800f6d4:	697b      	ldr	r3, [r7, #20]
 800f6d6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800f6da:	f023 0307 	bic.w	r3, r3, #7
 800f6de:	617b      	str	r3, [r7, #20]
  /* Set the slave mode */
  tmpsmcr |= sSlaveConfig->SlaveMode;
 800f6e0:	683b      	ldr	r3, [r7, #0]
 800f6e2:	681b      	ldr	r3, [r3, #0]
 800f6e4:	697a      	ldr	r2, [r7, #20]
 800f6e6:	4313      	orrs	r3, r2
 800f6e8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 800f6ea:	687b      	ldr	r3, [r7, #4]
 800f6ec:	681b      	ldr	r3, [r3, #0]
 800f6ee:	697a      	ldr	r2, [r7, #20]
 800f6f0:	609a      	str	r2, [r3, #8]

  /* Configure the trigger prescaler, filter, and polarity */
  switch (sSlaveConfig->InputTrigger)
 800f6f2:	683b      	ldr	r3, [r7, #0]
 800f6f4:	685b      	ldr	r3, [r3, #4]
 800f6f6:	2b70      	cmp	r3, #112	; 0x70
 800f6f8:	d034      	beq.n	800f764 <TIM_SlaveTimer_SetConfig+0xb8>
 800f6fa:	2b70      	cmp	r3, #112	; 0x70
 800f6fc:	d811      	bhi.n	800f722 <TIM_SlaveTimer_SetConfig+0x76>
 800f6fe:	2b30      	cmp	r3, #48	; 0x30
 800f700:	d07d      	beq.n	800f7fe <TIM_SlaveTimer_SetConfig+0x152>
 800f702:	2b30      	cmp	r3, #48	; 0x30
 800f704:	d806      	bhi.n	800f714 <TIM_SlaveTimer_SetConfig+0x68>
 800f706:	2b10      	cmp	r3, #16
 800f708:	d079      	beq.n	800f7fe <TIM_SlaveTimer_SetConfig+0x152>
 800f70a:	2b20      	cmp	r3, #32
 800f70c:	d077      	beq.n	800f7fe <TIM_SlaveTimer_SetConfig+0x152>
 800f70e:	2b00      	cmp	r3, #0
 800f710:	d075      	beq.n	800f7fe <TIM_SlaveTimer_SetConfig+0x152>
      assert_param(IS_TIM_INTERNAL_TRIGGEREVENT_INSTANCE((htim->Instance), sSlaveConfig->InputTrigger));
      break;
    }

    default:
      break;
 800f712:	e075      	b.n	800f800 <TIM_SlaveTimer_SetConfig+0x154>
  switch (sSlaveConfig->InputTrigger)
 800f714:	2b50      	cmp	r3, #80	; 0x50
 800f716:	d05e      	beq.n	800f7d6 <TIM_SlaveTimer_SetConfig+0x12a>
 800f718:	2b60      	cmp	r3, #96	; 0x60
 800f71a:	d066      	beq.n	800f7ea <TIM_SlaveTimer_SetConfig+0x13e>
 800f71c:	2b40      	cmp	r3, #64	; 0x40
 800f71e:	d02c      	beq.n	800f77a <TIM_SlaveTimer_SetConfig+0xce>
      break;
 800f720:	e06e      	b.n	800f800 <TIM_SlaveTimer_SetConfig+0x154>
  switch (sSlaveConfig->InputTrigger)
 800f722:	4a3a      	ldr	r2, [pc, #232]	; (800f80c <TIM_SlaveTimer_SetConfig+0x160>)
 800f724:	4293      	cmp	r3, r2
 800f726:	d06a      	beq.n	800f7fe <TIM_SlaveTimer_SetConfig+0x152>
 800f728:	4a38      	ldr	r2, [pc, #224]	; (800f80c <TIM_SlaveTimer_SetConfig+0x160>)
 800f72a:	4293      	cmp	r3, r2
 800f72c:	d809      	bhi.n	800f742 <TIM_SlaveTimer_SetConfig+0x96>
 800f72e:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 800f732:	d064      	beq.n	800f7fe <TIM_SlaveTimer_SetConfig+0x152>
 800f734:	4a36      	ldr	r2, [pc, #216]	; (800f810 <TIM_SlaveTimer_SetConfig+0x164>)
 800f736:	4293      	cmp	r3, r2
 800f738:	d061      	beq.n	800f7fe <TIM_SlaveTimer_SetConfig+0x152>
 800f73a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800f73e:	d05e      	beq.n	800f7fe <TIM_SlaveTimer_SetConfig+0x152>
      break;
 800f740:	e05e      	b.n	800f800 <TIM_SlaveTimer_SetConfig+0x154>
  switch (sSlaveConfig->InputTrigger)
 800f742:	4a34      	ldr	r2, [pc, #208]	; (800f814 <TIM_SlaveTimer_SetConfig+0x168>)
 800f744:	4293      	cmp	r3, r2
 800f746:	d05a      	beq.n	800f7fe <TIM_SlaveTimer_SetConfig+0x152>
 800f748:	4a32      	ldr	r2, [pc, #200]	; (800f814 <TIM_SlaveTimer_SetConfig+0x168>)
 800f74a:	4293      	cmp	r3, r2
 800f74c:	d803      	bhi.n	800f756 <TIM_SlaveTimer_SetConfig+0xaa>
 800f74e:	4a32      	ldr	r2, [pc, #200]	; (800f818 <TIM_SlaveTimer_SetConfig+0x16c>)
 800f750:	4293      	cmp	r3, r2
 800f752:	d054      	beq.n	800f7fe <TIM_SlaveTimer_SetConfig+0x152>
      break;
 800f754:	e054      	b.n	800f800 <TIM_SlaveTimer_SetConfig+0x154>
  switch (sSlaveConfig->InputTrigger)
 800f756:	4a31      	ldr	r2, [pc, #196]	; (800f81c <TIM_SlaveTimer_SetConfig+0x170>)
 800f758:	4293      	cmp	r3, r2
 800f75a:	d050      	beq.n	800f7fe <TIM_SlaveTimer_SetConfig+0x152>
 800f75c:	4a30      	ldr	r2, [pc, #192]	; (800f820 <TIM_SlaveTimer_SetConfig+0x174>)
 800f75e:	4293      	cmp	r3, r2
 800f760:	d04d      	beq.n	800f7fe <TIM_SlaveTimer_SetConfig+0x152>
      break;
 800f762:	e04d      	b.n	800f800 <TIM_SlaveTimer_SetConfig+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 800f764:	687b      	ldr	r3, [r7, #4]
 800f766:	6818      	ldr	r0, [r3, #0]
 800f768:	683b      	ldr	r3, [r7, #0]
 800f76a:	68d9      	ldr	r1, [r3, #12]
 800f76c:	683b      	ldr	r3, [r7, #0]
 800f76e:	689a      	ldr	r2, [r3, #8]
 800f770:	683b      	ldr	r3, [r7, #0]
 800f772:	691b      	ldr	r3, [r3, #16]
 800f774:	f000 f9fc 	bl	800fb70 <TIM_ETR_SetConfig>
      break;
 800f778:	e042      	b.n	800f800 <TIM_SlaveTimer_SetConfig+0x154>
      if ((sSlaveConfig->SlaveMode == TIM_SLAVEMODE_GATED) || (sSlaveConfig->SlaveMode == TIM_SLAVEMODE_COMBINED_GATEDRESET))
 800f77a:	683b      	ldr	r3, [r7, #0]
 800f77c:	681b      	ldr	r3, [r3, #0]
 800f77e:	2b05      	cmp	r3, #5
 800f780:	d004      	beq.n	800f78c <TIM_SlaveTimer_SetConfig+0xe0>
 800f782:	683b      	ldr	r3, [r7, #0]
 800f784:	681b      	ldr	r3, [r3, #0]
 800f786:	f1b3 1f01 	cmp.w	r3, #65537	; 0x10001
 800f78a:	d101      	bne.n	800f790 <TIM_SlaveTimer_SetConfig+0xe4>
        return HAL_ERROR;
 800f78c:	2301      	movs	r3, #1
 800f78e:	e038      	b.n	800f802 <TIM_SlaveTimer_SetConfig+0x156>
      tmpccer = htim->Instance->CCER;
 800f790:	687b      	ldr	r3, [r7, #4]
 800f792:	681b      	ldr	r3, [r3, #0]
 800f794:	6a1b      	ldr	r3, [r3, #32]
 800f796:	613b      	str	r3, [r7, #16]
      htim->Instance->CCER &= ~TIM_CCER_CC1E;
 800f798:	687b      	ldr	r3, [r7, #4]
 800f79a:	681b      	ldr	r3, [r3, #0]
 800f79c:	6a1a      	ldr	r2, [r3, #32]
 800f79e:	687b      	ldr	r3, [r7, #4]
 800f7a0:	681b      	ldr	r3, [r3, #0]
 800f7a2:	f022 0201 	bic.w	r2, r2, #1
 800f7a6:	621a      	str	r2, [r3, #32]
      tmpccmr1 = htim->Instance->CCMR1;
 800f7a8:	687b      	ldr	r3, [r7, #4]
 800f7aa:	681b      	ldr	r3, [r3, #0]
 800f7ac:	699b      	ldr	r3, [r3, #24]
 800f7ae:	60fb      	str	r3, [r7, #12]
      tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800f7b0:	68fb      	ldr	r3, [r7, #12]
 800f7b2:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800f7b6:	60fb      	str	r3, [r7, #12]
      tmpccmr1 |= ((sSlaveConfig->TriggerFilter) << 4U);
 800f7b8:	683b      	ldr	r3, [r7, #0]
 800f7ba:	691b      	ldr	r3, [r3, #16]
 800f7bc:	011b      	lsls	r3, r3, #4
 800f7be:	68fa      	ldr	r2, [r7, #12]
 800f7c0:	4313      	orrs	r3, r2
 800f7c2:	60fb      	str	r3, [r7, #12]
      htim->Instance->CCMR1 = tmpccmr1;
 800f7c4:	687b      	ldr	r3, [r7, #4]
 800f7c6:	681b      	ldr	r3, [r3, #0]
 800f7c8:	68fa      	ldr	r2, [r7, #12]
 800f7ca:	619a      	str	r2, [r3, #24]
      htim->Instance->CCER = tmpccer;
 800f7cc:	687b      	ldr	r3, [r7, #4]
 800f7ce:	681b      	ldr	r3, [r3, #0]
 800f7d0:	693a      	ldr	r2, [r7, #16]
 800f7d2:	621a      	str	r2, [r3, #32]
      break;
 800f7d4:	e014      	b.n	800f800 <TIM_SlaveTimer_SetConfig+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 800f7d6:	687b      	ldr	r3, [r7, #4]
 800f7d8:	6818      	ldr	r0, [r3, #0]
 800f7da:	683b      	ldr	r3, [r7, #0]
 800f7dc:	6899      	ldr	r1, [r3, #8]
 800f7de:	683b      	ldr	r3, [r7, #0]
 800f7e0:	691b      	ldr	r3, [r3, #16]
 800f7e2:	461a      	mov	r2, r3
 800f7e4:	f000 f892 	bl	800f90c <TIM_TI1_ConfigInputStage>
      break;
 800f7e8:	e00a      	b.n	800f800 <TIM_SlaveTimer_SetConfig+0x154>
      TIM_TI2_ConfigInputStage(htim->Instance,
 800f7ea:	687b      	ldr	r3, [r7, #4]
 800f7ec:	6818      	ldr	r0, [r3, #0]
 800f7ee:	683b      	ldr	r3, [r7, #0]
 800f7f0:	6899      	ldr	r1, [r3, #8]
 800f7f2:	683b      	ldr	r3, [r7, #0]
 800f7f4:	691b      	ldr	r3, [r3, #16]
 800f7f6:	461a      	mov	r2, r3
 800f7f8:	f000 f8f4 	bl	800f9e4 <TIM_TI2_ConfigInputStage>
      break;
 800f7fc:	e000      	b.n	800f800 <TIM_SlaveTimer_SetConfig+0x154>
      break;
 800f7fe:	bf00      	nop
  }
  return HAL_OK;
 800f800:	2300      	movs	r3, #0
}
 800f802:	4618      	mov	r0, r3
 800f804:	3718      	adds	r7, #24
 800f806:	46bd      	mov	sp, r7
 800f808:	bd80      	pop	{r7, pc}
 800f80a:	bf00      	nop
 800f80c:	00100030 	.word	0x00100030
 800f810:	00100020 	.word	0x00100020
 800f814:	00100050 	.word	0x00100050
 800f818:	00100040 	.word	0x00100040
 800f81c:	00100060 	.word	0x00100060
 800f820:	00100070 	.word	0x00100070

0800f824 <TIM_TI1_SetConfig>:
  *       (on channel2 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
void TIM_TI1_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                       uint32_t TIM_ICFilter)
{
 800f824:	b480      	push	{r7}
 800f826:	b087      	sub	sp, #28
 800f828:	af00      	add	r7, sp, #0
 800f82a:	60f8      	str	r0, [r7, #12]
 800f82c:	60b9      	str	r1, [r7, #8]
 800f82e:	607a      	str	r2, [r7, #4]
 800f830:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800f832:	68fb      	ldr	r3, [r7, #12]
 800f834:	6a1b      	ldr	r3, [r3, #32]
 800f836:	f023 0201 	bic.w	r2, r3, #1
 800f83a:	68fb      	ldr	r3, [r7, #12]
 800f83c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800f83e:	68fb      	ldr	r3, [r7, #12]
 800f840:	699b      	ldr	r3, [r3, #24]
 800f842:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800f844:	68fb      	ldr	r3, [r7, #12]
 800f846:	6a1b      	ldr	r3, [r3, #32]
 800f848:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 800f84a:	68fb      	ldr	r3, [r7, #12]
 800f84c:	4a28      	ldr	r2, [pc, #160]	; (800f8f0 <TIM_TI1_SetConfig+0xcc>)
 800f84e:	4293      	cmp	r3, r2
 800f850:	d01b      	beq.n	800f88a <TIM_TI1_SetConfig+0x66>
 800f852:	68fb      	ldr	r3, [r7, #12]
 800f854:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800f858:	d017      	beq.n	800f88a <TIM_TI1_SetConfig+0x66>
 800f85a:	68fb      	ldr	r3, [r7, #12]
 800f85c:	4a25      	ldr	r2, [pc, #148]	; (800f8f4 <TIM_TI1_SetConfig+0xd0>)
 800f85e:	4293      	cmp	r3, r2
 800f860:	d013      	beq.n	800f88a <TIM_TI1_SetConfig+0x66>
 800f862:	68fb      	ldr	r3, [r7, #12]
 800f864:	4a24      	ldr	r2, [pc, #144]	; (800f8f8 <TIM_TI1_SetConfig+0xd4>)
 800f866:	4293      	cmp	r3, r2
 800f868:	d00f      	beq.n	800f88a <TIM_TI1_SetConfig+0x66>
 800f86a:	68fb      	ldr	r3, [r7, #12]
 800f86c:	4a23      	ldr	r2, [pc, #140]	; (800f8fc <TIM_TI1_SetConfig+0xd8>)
 800f86e:	4293      	cmp	r3, r2
 800f870:	d00b      	beq.n	800f88a <TIM_TI1_SetConfig+0x66>
 800f872:	68fb      	ldr	r3, [r7, #12]
 800f874:	4a22      	ldr	r2, [pc, #136]	; (800f900 <TIM_TI1_SetConfig+0xdc>)
 800f876:	4293      	cmp	r3, r2
 800f878:	d007      	beq.n	800f88a <TIM_TI1_SetConfig+0x66>
 800f87a:	68fb      	ldr	r3, [r7, #12]
 800f87c:	4a21      	ldr	r2, [pc, #132]	; (800f904 <TIM_TI1_SetConfig+0xe0>)
 800f87e:	4293      	cmp	r3, r2
 800f880:	d003      	beq.n	800f88a <TIM_TI1_SetConfig+0x66>
 800f882:	68fb      	ldr	r3, [r7, #12]
 800f884:	4a20      	ldr	r2, [pc, #128]	; (800f908 <TIM_TI1_SetConfig+0xe4>)
 800f886:	4293      	cmp	r3, r2
 800f888:	d101      	bne.n	800f88e <TIM_TI1_SetConfig+0x6a>
 800f88a:	2301      	movs	r3, #1
 800f88c:	e000      	b.n	800f890 <TIM_TI1_SetConfig+0x6c>
 800f88e:	2300      	movs	r3, #0
 800f890:	2b00      	cmp	r3, #0
 800f892:	d008      	beq.n	800f8a6 <TIM_TI1_SetConfig+0x82>
  {
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
 800f894:	697b      	ldr	r3, [r7, #20]
 800f896:	f023 0303 	bic.w	r3, r3, #3
 800f89a:	617b      	str	r3, [r7, #20]
    tmpccmr1 |= TIM_ICSelection;
 800f89c:	697a      	ldr	r2, [r7, #20]
 800f89e:	687b      	ldr	r3, [r7, #4]
 800f8a0:	4313      	orrs	r3, r2
 800f8a2:	617b      	str	r3, [r7, #20]
 800f8a4:	e003      	b.n	800f8ae <TIM_TI1_SetConfig+0x8a>
  }
  else
  {
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
 800f8a6:	697b      	ldr	r3, [r7, #20]
 800f8a8:	f043 0301 	orr.w	r3, r3, #1
 800f8ac:	617b      	str	r3, [r7, #20]
  }

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800f8ae:	697b      	ldr	r3, [r7, #20]
 800f8b0:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800f8b4:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 800f8b6:	683b      	ldr	r3, [r7, #0]
 800f8b8:	011b      	lsls	r3, r3, #4
 800f8ba:	b2db      	uxtb	r3, r3
 800f8bc:	697a      	ldr	r2, [r7, #20]
 800f8be:	4313      	orrs	r3, r2
 800f8c0:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800f8c2:	693b      	ldr	r3, [r7, #16]
 800f8c4:	f023 030a 	bic.w	r3, r3, #10
 800f8c8:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 800f8ca:	68bb      	ldr	r3, [r7, #8]
 800f8cc:	f003 030a 	and.w	r3, r3, #10
 800f8d0:	693a      	ldr	r2, [r7, #16]
 800f8d2:	4313      	orrs	r3, r2
 800f8d4:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800f8d6:	68fb      	ldr	r3, [r7, #12]
 800f8d8:	697a      	ldr	r2, [r7, #20]
 800f8da:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800f8dc:	68fb      	ldr	r3, [r7, #12]
 800f8de:	693a      	ldr	r2, [r7, #16]
 800f8e0:	621a      	str	r2, [r3, #32]
}
 800f8e2:	bf00      	nop
 800f8e4:	371c      	adds	r7, #28
 800f8e6:	46bd      	mov	sp, r7
 800f8e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f8ec:	4770      	bx	lr
 800f8ee:	bf00      	nop
 800f8f0:	40012c00 	.word	0x40012c00
 800f8f4:	40000400 	.word	0x40000400
 800f8f8:	40000800 	.word	0x40000800
 800f8fc:	40000c00 	.word	0x40000c00
 800f900:	40013400 	.word	0x40013400
 800f904:	40014000 	.word	0x40014000
 800f908:	40015000 	.word	0x40015000

0800f90c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800f90c:	b480      	push	{r7}
 800f90e:	b087      	sub	sp, #28
 800f910:	af00      	add	r7, sp, #0
 800f912:	60f8      	str	r0, [r7, #12]
 800f914:	60b9      	str	r1, [r7, #8]
 800f916:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800f918:	68fb      	ldr	r3, [r7, #12]
 800f91a:	6a1b      	ldr	r3, [r3, #32]
 800f91c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800f91e:	68fb      	ldr	r3, [r7, #12]
 800f920:	6a1b      	ldr	r3, [r3, #32]
 800f922:	f023 0201 	bic.w	r2, r3, #1
 800f926:	68fb      	ldr	r3, [r7, #12]
 800f928:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800f92a:	68fb      	ldr	r3, [r7, #12]
 800f92c:	699b      	ldr	r3, [r3, #24]
 800f92e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800f930:	693b      	ldr	r3, [r7, #16]
 800f932:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800f936:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800f938:	687b      	ldr	r3, [r7, #4]
 800f93a:	011b      	lsls	r3, r3, #4
 800f93c:	693a      	ldr	r2, [r7, #16]
 800f93e:	4313      	orrs	r3, r2
 800f940:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800f942:	697b      	ldr	r3, [r7, #20]
 800f944:	f023 030a 	bic.w	r3, r3, #10
 800f948:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800f94a:	697a      	ldr	r2, [r7, #20]
 800f94c:	68bb      	ldr	r3, [r7, #8]
 800f94e:	4313      	orrs	r3, r2
 800f950:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800f952:	68fb      	ldr	r3, [r7, #12]
 800f954:	693a      	ldr	r2, [r7, #16]
 800f956:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800f958:	68fb      	ldr	r3, [r7, #12]
 800f95a:	697a      	ldr	r2, [r7, #20]
 800f95c:	621a      	str	r2, [r3, #32]
}
 800f95e:	bf00      	nop
 800f960:	371c      	adds	r7, #28
 800f962:	46bd      	mov	sp, r7
 800f964:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f968:	4770      	bx	lr

0800f96a <TIM_TI2_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI2_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 800f96a:	b480      	push	{r7}
 800f96c:	b087      	sub	sp, #28
 800f96e:	af00      	add	r7, sp, #0
 800f970:	60f8      	str	r0, [r7, #12]
 800f972:	60b9      	str	r1, [r7, #8]
 800f974:	607a      	str	r2, [r7, #4]
 800f976:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800f978:	68fb      	ldr	r3, [r7, #12]
 800f97a:	6a1b      	ldr	r3, [r3, #32]
 800f97c:	f023 0210 	bic.w	r2, r3, #16
 800f980:	68fb      	ldr	r3, [r7, #12]
 800f982:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800f984:	68fb      	ldr	r3, [r7, #12]
 800f986:	699b      	ldr	r3, [r3, #24]
 800f988:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800f98a:	68fb      	ldr	r3, [r7, #12]
 800f98c:	6a1b      	ldr	r3, [r3, #32]
 800f98e:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr1 &= ~TIM_CCMR1_CC2S;
 800f990:	697b      	ldr	r3, [r7, #20]
 800f992:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800f996:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICSelection << 8U);
 800f998:	687b      	ldr	r3, [r7, #4]
 800f99a:	021b      	lsls	r3, r3, #8
 800f99c:	697a      	ldr	r2, [r7, #20]
 800f99e:	4313      	orrs	r3, r2
 800f9a0:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800f9a2:	697b      	ldr	r3, [r7, #20]
 800f9a4:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800f9a8:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 800f9aa:	683b      	ldr	r3, [r7, #0]
 800f9ac:	031b      	lsls	r3, r3, #12
 800f9ae:	b29b      	uxth	r3, r3
 800f9b0:	697a      	ldr	r2, [r7, #20]
 800f9b2:	4313      	orrs	r3, r2
 800f9b4:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800f9b6:	693b      	ldr	r3, [r7, #16]
 800f9b8:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800f9bc:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 800f9be:	68bb      	ldr	r3, [r7, #8]
 800f9c0:	011b      	lsls	r3, r3, #4
 800f9c2:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
 800f9c6:	693a      	ldr	r2, [r7, #16]
 800f9c8:	4313      	orrs	r3, r2
 800f9ca:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800f9cc:	68fb      	ldr	r3, [r7, #12]
 800f9ce:	697a      	ldr	r2, [r7, #20]
 800f9d0:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800f9d2:	68fb      	ldr	r3, [r7, #12]
 800f9d4:	693a      	ldr	r2, [r7, #16]
 800f9d6:	621a      	str	r2, [r3, #32]
}
 800f9d8:	bf00      	nop
 800f9da:	371c      	adds	r7, #28
 800f9dc:	46bd      	mov	sp, r7
 800f9de:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f9e2:	4770      	bx	lr

0800f9e4 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800f9e4:	b480      	push	{r7}
 800f9e6:	b087      	sub	sp, #28
 800f9e8:	af00      	add	r7, sp, #0
 800f9ea:	60f8      	str	r0, [r7, #12]
 800f9ec:	60b9      	str	r1, [r7, #8]
 800f9ee:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800f9f0:	68fb      	ldr	r3, [r7, #12]
 800f9f2:	6a1b      	ldr	r3, [r3, #32]
 800f9f4:	f023 0210 	bic.w	r2, r3, #16
 800f9f8:	68fb      	ldr	r3, [r7, #12]
 800f9fa:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800f9fc:	68fb      	ldr	r3, [r7, #12]
 800f9fe:	699b      	ldr	r3, [r3, #24]
 800fa00:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800fa02:	68fb      	ldr	r3, [r7, #12]
 800fa04:	6a1b      	ldr	r3, [r3, #32]
 800fa06:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800fa08:	697b      	ldr	r3, [r7, #20]
 800fa0a:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800fa0e:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800fa10:	687b      	ldr	r3, [r7, #4]
 800fa12:	031b      	lsls	r3, r3, #12
 800fa14:	697a      	ldr	r2, [r7, #20]
 800fa16:	4313      	orrs	r3, r2
 800fa18:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800fa1a:	693b      	ldr	r3, [r7, #16]
 800fa1c:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800fa20:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 800fa22:	68bb      	ldr	r3, [r7, #8]
 800fa24:	011b      	lsls	r3, r3, #4
 800fa26:	693a      	ldr	r2, [r7, #16]
 800fa28:	4313      	orrs	r3, r2
 800fa2a:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800fa2c:	68fb      	ldr	r3, [r7, #12]
 800fa2e:	697a      	ldr	r2, [r7, #20]
 800fa30:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800fa32:	68fb      	ldr	r3, [r7, #12]
 800fa34:	693a      	ldr	r2, [r7, #16]
 800fa36:	621a      	str	r2, [r3, #32]
}
 800fa38:	bf00      	nop
 800fa3a:	371c      	adds	r7, #28
 800fa3c:	46bd      	mov	sp, r7
 800fa3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fa42:	4770      	bx	lr

0800fa44 <TIM_TI3_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR2 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI3_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 800fa44:	b480      	push	{r7}
 800fa46:	b087      	sub	sp, #28
 800fa48:	af00      	add	r7, sp, #0
 800fa4a:	60f8      	str	r0, [r7, #12]
 800fa4c:	60b9      	str	r1, [r7, #8]
 800fa4e:	607a      	str	r2, [r7, #4]
 800fa50:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 3: Reset the CC3E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800fa52:	68fb      	ldr	r3, [r7, #12]
 800fa54:	6a1b      	ldr	r3, [r3, #32]
 800fa56:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800fa5a:	68fb      	ldr	r3, [r7, #12]
 800fa5c:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 800fa5e:	68fb      	ldr	r3, [r7, #12]
 800fa60:	69db      	ldr	r3, [r3, #28]
 800fa62:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800fa64:	68fb      	ldr	r3, [r7, #12]
 800fa66:	6a1b      	ldr	r3, [r3, #32]
 800fa68:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC3S;
 800fa6a:	697b      	ldr	r3, [r7, #20]
 800fa6c:	f023 0303 	bic.w	r3, r3, #3
 800fa70:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= TIM_ICSelection;
 800fa72:	697a      	ldr	r2, [r7, #20]
 800fa74:	687b      	ldr	r3, [r7, #4]
 800fa76:	4313      	orrs	r3, r2
 800fa78:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC3F;
 800fa7a:	697b      	ldr	r3, [r7, #20]
 800fa7c:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800fa80:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
 800fa82:	683b      	ldr	r3, [r7, #0]
 800fa84:	011b      	lsls	r3, r3, #4
 800fa86:	b2db      	uxtb	r3, r3
 800fa88:	697a      	ldr	r2, [r7, #20]
 800fa8a:	4313      	orrs	r3, r2
 800fa8c:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC3E Bit */
  tmpccer &= ~(TIM_CCER_CC3P | TIM_CCER_CC3NP);
 800fa8e:	693b      	ldr	r3, [r7, #16]
 800fa90:	f423 6320 	bic.w	r3, r3, #2560	; 0xa00
 800fa94:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 8U) & (TIM_CCER_CC3P | TIM_CCER_CC3NP));
 800fa96:	68bb      	ldr	r3, [r7, #8]
 800fa98:	021b      	lsls	r3, r3, #8
 800fa9a:	f403 6320 	and.w	r3, r3, #2560	; 0xa00
 800fa9e:	693a      	ldr	r2, [r7, #16]
 800faa0:	4313      	orrs	r3, r2
 800faa2:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 800faa4:	68fb      	ldr	r3, [r7, #12]
 800faa6:	697a      	ldr	r2, [r7, #20]
 800faa8:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer;
 800faaa:	68fb      	ldr	r3, [r7, #12]
 800faac:	693a      	ldr	r2, [r7, #16]
 800faae:	621a      	str	r2, [r3, #32]
}
 800fab0:	bf00      	nop
 800fab2:	371c      	adds	r7, #28
 800fab4:	46bd      	mov	sp, r7
 800fab6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800faba:	4770      	bx	lr

0800fabc <TIM_TI4_SetConfig>:
  *        protected against un-initialized filter and polarity values.
  * @retval None
  */
static void TIM_TI4_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 800fabc:	b480      	push	{r7}
 800fabe:	b087      	sub	sp, #28
 800fac0:	af00      	add	r7, sp, #0
 800fac2:	60f8      	str	r0, [r7, #12]
 800fac4:	60b9      	str	r1, [r7, #8]
 800fac6:	607a      	str	r2, [r7, #4]
 800fac8:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800faca:	68fb      	ldr	r3, [r7, #12]
 800facc:	6a1b      	ldr	r3, [r3, #32]
 800face:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800fad2:	68fb      	ldr	r3, [r7, #12]
 800fad4:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 800fad6:	68fb      	ldr	r3, [r7, #12]
 800fad8:	69db      	ldr	r3, [r3, #28]
 800fada:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800fadc:	68fb      	ldr	r3, [r7, #12]
 800fade:	6a1b      	ldr	r3, [r3, #32]
 800fae0:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC4S;
 800fae2:	697b      	ldr	r3, [r7, #20]
 800fae4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800fae8:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= (TIM_ICSelection << 8U);
 800faea:	687b      	ldr	r3, [r7, #4]
 800faec:	021b      	lsls	r3, r3, #8
 800faee:	697a      	ldr	r2, [r7, #20]
 800faf0:	4313      	orrs	r3, r2
 800faf2:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC4F;
 800faf4:	697b      	ldr	r3, [r7, #20]
 800faf6:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800fafa:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 800fafc:	683b      	ldr	r3, [r7, #0]
 800fafe:	031b      	lsls	r3, r3, #12
 800fb00:	b29b      	uxth	r3, r3
 800fb02:	697a      	ldr	r2, [r7, #20]
 800fb04:	4313      	orrs	r3, r2
 800fb06:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC4E Bit */
  tmpccer &= ~(TIM_CCER_CC4P | TIM_CCER_CC4NP);
 800fb08:	693b      	ldr	r3, [r7, #16]
 800fb0a:	f423 4320 	bic.w	r3, r3, #40960	; 0xa000
 800fb0e:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 12U) & (TIM_CCER_CC4P | TIM_CCER_CC4NP));
 800fb10:	68bb      	ldr	r3, [r7, #8]
 800fb12:	031b      	lsls	r3, r3, #12
 800fb14:	f403 4320 	and.w	r3, r3, #40960	; 0xa000
 800fb18:	693a      	ldr	r2, [r7, #16]
 800fb1a:	4313      	orrs	r3, r2
 800fb1c:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 800fb1e:	68fb      	ldr	r3, [r7, #12]
 800fb20:	697a      	ldr	r2, [r7, #20]
 800fb22:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer ;
 800fb24:	68fb      	ldr	r3, [r7, #12]
 800fb26:	693a      	ldr	r2, [r7, #16]
 800fb28:	621a      	str	r2, [r3, #32]
}
 800fb2a:	bf00      	nop
 800fb2c:	371c      	adds	r7, #28
 800fb2e:	46bd      	mov	sp, r7
 800fb30:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fb34:	4770      	bx	lr

0800fb36 <TIM_ITRx_SetConfig>:
  *       (*)  Value not defined in all devices.
  *
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800fb36:	b480      	push	{r7}
 800fb38:	b085      	sub	sp, #20
 800fb3a:	af00      	add	r7, sp, #0
 800fb3c:	6078      	str	r0, [r7, #4]
 800fb3e:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800fb40:	687b      	ldr	r3, [r7, #4]
 800fb42:	689b      	ldr	r3, [r3, #8]
 800fb44:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800fb46:	68fb      	ldr	r3, [r7, #12]
 800fb48:	f423 1340 	bic.w	r3, r3, #3145728	; 0x300000
 800fb4c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800fb50:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800fb52:	683a      	ldr	r2, [r7, #0]
 800fb54:	68fb      	ldr	r3, [r7, #12]
 800fb56:	4313      	orrs	r3, r2
 800fb58:	f043 0307 	orr.w	r3, r3, #7
 800fb5c:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800fb5e:	687b      	ldr	r3, [r7, #4]
 800fb60:	68fa      	ldr	r2, [r7, #12]
 800fb62:	609a      	str	r2, [r3, #8]
}
 800fb64:	bf00      	nop
 800fb66:	3714      	adds	r7, #20
 800fb68:	46bd      	mov	sp, r7
 800fb6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fb6e:	4770      	bx	lr

0800fb70 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800fb70:	b480      	push	{r7}
 800fb72:	b087      	sub	sp, #28
 800fb74:	af00      	add	r7, sp, #0
 800fb76:	60f8      	str	r0, [r7, #12]
 800fb78:	60b9      	str	r1, [r7, #8]
 800fb7a:	607a      	str	r2, [r7, #4]
 800fb7c:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800fb7e:	68fb      	ldr	r3, [r7, #12]
 800fb80:	689b      	ldr	r3, [r3, #8]
 800fb82:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800fb84:	697b      	ldr	r3, [r7, #20]
 800fb86:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800fb8a:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800fb8c:	683b      	ldr	r3, [r7, #0]
 800fb8e:	021a      	lsls	r2, r3, #8
 800fb90:	687b      	ldr	r3, [r7, #4]
 800fb92:	431a      	orrs	r2, r3
 800fb94:	68bb      	ldr	r3, [r7, #8]
 800fb96:	4313      	orrs	r3, r2
 800fb98:	697a      	ldr	r2, [r7, #20]
 800fb9a:	4313      	orrs	r3, r2
 800fb9c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800fb9e:	68fb      	ldr	r3, [r7, #12]
 800fba0:	697a      	ldr	r2, [r7, #20]
 800fba2:	609a      	str	r2, [r3, #8]
}
 800fba4:	bf00      	nop
 800fba6:	371c      	adds	r7, #28
 800fba8:	46bd      	mov	sp, r7
 800fbaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fbae:	4770      	bx	lr

0800fbb0 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 800fbb0:	b480      	push	{r7}
 800fbb2:	b087      	sub	sp, #28
 800fbb4:	af00      	add	r7, sp, #0
 800fbb6:	60f8      	str	r0, [r7, #12]
 800fbb8:	60b9      	str	r1, [r7, #8]
 800fbba:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800fbbc:	68bb      	ldr	r3, [r7, #8]
 800fbbe:	f003 031f 	and.w	r3, r3, #31
 800fbc2:	2201      	movs	r2, #1
 800fbc4:	fa02 f303 	lsl.w	r3, r2, r3
 800fbc8:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800fbca:	68fb      	ldr	r3, [r7, #12]
 800fbcc:	6a1a      	ldr	r2, [r3, #32]
 800fbce:	697b      	ldr	r3, [r7, #20]
 800fbd0:	43db      	mvns	r3, r3
 800fbd2:	401a      	ands	r2, r3
 800fbd4:	68fb      	ldr	r3, [r7, #12]
 800fbd6:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800fbd8:	68fb      	ldr	r3, [r7, #12]
 800fbda:	6a1a      	ldr	r2, [r3, #32]
 800fbdc:	68bb      	ldr	r3, [r7, #8]
 800fbde:	f003 031f 	and.w	r3, r3, #31
 800fbe2:	6879      	ldr	r1, [r7, #4]
 800fbe4:	fa01 f303 	lsl.w	r3, r1, r3
 800fbe8:	431a      	orrs	r2, r3
 800fbea:	68fb      	ldr	r3, [r7, #12]
 800fbec:	621a      	str	r2, [r3, #32]
}
 800fbee:	bf00      	nop
 800fbf0:	371c      	adds	r7, #28
 800fbf2:	46bd      	mov	sp, r7
 800fbf4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fbf8:	4770      	bx	lr
	...

0800fbfc <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 800fbfc:	b480      	push	{r7}
 800fbfe:	b085      	sub	sp, #20
 800fc00:	af00      	add	r7, sp, #0
 800fc02:	6078      	str	r0, [r7, #4]
 800fc04:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800fc06:	687b      	ldr	r3, [r7, #4]
 800fc08:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800fc0c:	2b01      	cmp	r3, #1
 800fc0e:	d101      	bne.n	800fc14 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800fc10:	2302      	movs	r3, #2
 800fc12:	e074      	b.n	800fcfe <HAL_TIMEx_MasterConfigSynchronization+0x102>
 800fc14:	687b      	ldr	r3, [r7, #4]
 800fc16:	2201      	movs	r2, #1
 800fc18:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800fc1c:	687b      	ldr	r3, [r7, #4]
 800fc1e:	2202      	movs	r2, #2
 800fc20:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800fc24:	687b      	ldr	r3, [r7, #4]
 800fc26:	681b      	ldr	r3, [r3, #0]
 800fc28:	685b      	ldr	r3, [r3, #4]
 800fc2a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800fc2c:	687b      	ldr	r3, [r7, #4]
 800fc2e:	681b      	ldr	r3, [r3, #0]
 800fc30:	689b      	ldr	r3, [r3, #8]
 800fc32:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 800fc34:	687b      	ldr	r3, [r7, #4]
 800fc36:	681b      	ldr	r3, [r3, #0]
 800fc38:	4a34      	ldr	r2, [pc, #208]	; (800fd0c <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 800fc3a:	4293      	cmp	r3, r2
 800fc3c:	d009      	beq.n	800fc52 <HAL_TIMEx_MasterConfigSynchronization+0x56>
 800fc3e:	687b      	ldr	r3, [r7, #4]
 800fc40:	681b      	ldr	r3, [r3, #0]
 800fc42:	4a33      	ldr	r2, [pc, #204]	; (800fd10 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 800fc44:	4293      	cmp	r3, r2
 800fc46:	d004      	beq.n	800fc52 <HAL_TIMEx_MasterConfigSynchronization+0x56>
 800fc48:	687b      	ldr	r3, [r7, #4]
 800fc4a:	681b      	ldr	r3, [r3, #0]
 800fc4c:	4a31      	ldr	r2, [pc, #196]	; (800fd14 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 800fc4e:	4293      	cmp	r3, r2
 800fc50:	d108      	bne.n	800fc64 <HAL_TIMEx_MasterConfigSynchronization+0x68>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 800fc52:	68fb      	ldr	r3, [r7, #12]
 800fc54:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 800fc58:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800fc5a:	683b      	ldr	r3, [r7, #0]
 800fc5c:	685b      	ldr	r3, [r3, #4]
 800fc5e:	68fa      	ldr	r2, [r7, #12]
 800fc60:	4313      	orrs	r3, r2
 800fc62:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800fc64:	68fb      	ldr	r3, [r7, #12]
 800fc66:	f023 7300 	bic.w	r3, r3, #33554432	; 0x2000000
 800fc6a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800fc6e:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800fc70:	683b      	ldr	r3, [r7, #0]
 800fc72:	681b      	ldr	r3, [r3, #0]
 800fc74:	68fa      	ldr	r2, [r7, #12]
 800fc76:	4313      	orrs	r3, r2
 800fc78:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800fc7a:	687b      	ldr	r3, [r7, #4]
 800fc7c:	681b      	ldr	r3, [r3, #0]
 800fc7e:	68fa      	ldr	r2, [r7, #12]
 800fc80:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800fc82:	687b      	ldr	r3, [r7, #4]
 800fc84:	681b      	ldr	r3, [r3, #0]
 800fc86:	4a21      	ldr	r2, [pc, #132]	; (800fd0c <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 800fc88:	4293      	cmp	r3, r2
 800fc8a:	d022      	beq.n	800fcd2 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 800fc8c:	687b      	ldr	r3, [r7, #4]
 800fc8e:	681b      	ldr	r3, [r3, #0]
 800fc90:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800fc94:	d01d      	beq.n	800fcd2 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 800fc96:	687b      	ldr	r3, [r7, #4]
 800fc98:	681b      	ldr	r3, [r3, #0]
 800fc9a:	4a1f      	ldr	r2, [pc, #124]	; (800fd18 <HAL_TIMEx_MasterConfigSynchronization+0x11c>)
 800fc9c:	4293      	cmp	r3, r2
 800fc9e:	d018      	beq.n	800fcd2 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 800fca0:	687b      	ldr	r3, [r7, #4]
 800fca2:	681b      	ldr	r3, [r3, #0]
 800fca4:	4a1d      	ldr	r2, [pc, #116]	; (800fd1c <HAL_TIMEx_MasterConfigSynchronization+0x120>)
 800fca6:	4293      	cmp	r3, r2
 800fca8:	d013      	beq.n	800fcd2 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 800fcaa:	687b      	ldr	r3, [r7, #4]
 800fcac:	681b      	ldr	r3, [r3, #0]
 800fcae:	4a1c      	ldr	r2, [pc, #112]	; (800fd20 <HAL_TIMEx_MasterConfigSynchronization+0x124>)
 800fcb0:	4293      	cmp	r3, r2
 800fcb2:	d00e      	beq.n	800fcd2 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 800fcb4:	687b      	ldr	r3, [r7, #4]
 800fcb6:	681b      	ldr	r3, [r3, #0]
 800fcb8:	4a15      	ldr	r2, [pc, #84]	; (800fd10 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 800fcba:	4293      	cmp	r3, r2
 800fcbc:	d009      	beq.n	800fcd2 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 800fcbe:	687b      	ldr	r3, [r7, #4]
 800fcc0:	681b      	ldr	r3, [r3, #0]
 800fcc2:	4a18      	ldr	r2, [pc, #96]	; (800fd24 <HAL_TIMEx_MasterConfigSynchronization+0x128>)
 800fcc4:	4293      	cmp	r3, r2
 800fcc6:	d004      	beq.n	800fcd2 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 800fcc8:	687b      	ldr	r3, [r7, #4]
 800fcca:	681b      	ldr	r3, [r3, #0]
 800fccc:	4a11      	ldr	r2, [pc, #68]	; (800fd14 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 800fcce:	4293      	cmp	r3, r2
 800fcd0:	d10c      	bne.n	800fcec <HAL_TIMEx_MasterConfigSynchronization+0xf0>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800fcd2:	68bb      	ldr	r3, [r7, #8]
 800fcd4:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800fcd8:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800fcda:	683b      	ldr	r3, [r7, #0]
 800fcdc:	689b      	ldr	r3, [r3, #8]
 800fcde:	68ba      	ldr	r2, [r7, #8]
 800fce0:	4313      	orrs	r3, r2
 800fce2:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800fce4:	687b      	ldr	r3, [r7, #4]
 800fce6:	681b      	ldr	r3, [r3, #0]
 800fce8:	68ba      	ldr	r2, [r7, #8]
 800fcea:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800fcec:	687b      	ldr	r3, [r7, #4]
 800fcee:	2201      	movs	r2, #1
 800fcf0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800fcf4:	687b      	ldr	r3, [r7, #4]
 800fcf6:	2200      	movs	r2, #0
 800fcf8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800fcfc:	2300      	movs	r3, #0
}
 800fcfe:	4618      	mov	r0, r3
 800fd00:	3714      	adds	r7, #20
 800fd02:	46bd      	mov	sp, r7
 800fd04:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fd08:	4770      	bx	lr
 800fd0a:	bf00      	nop
 800fd0c:	40012c00 	.word	0x40012c00
 800fd10:	40013400 	.word	0x40013400
 800fd14:	40015000 	.word	0x40015000
 800fd18:	40000400 	.word	0x40000400
 800fd1c:	40000800 	.word	0x40000800
 800fd20:	40000c00 	.word	0x40000c00
 800fd24:	40014000 	.word	0x40014000

0800fd28 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 800fd28:	b480      	push	{r7}
 800fd2a:	b085      	sub	sp, #20
 800fd2c:	af00      	add	r7, sp, #0
 800fd2e:	6078      	str	r0, [r7, #4]
 800fd30:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 800fd32:	2300      	movs	r3, #0
 800fd34:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 800fd36:	687b      	ldr	r3, [r7, #4]
 800fd38:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800fd3c:	2b01      	cmp	r3, #1
 800fd3e:	d101      	bne.n	800fd44 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 800fd40:	2302      	movs	r3, #2
 800fd42:	e096      	b.n	800fe72 <HAL_TIMEx_ConfigBreakDeadTime+0x14a>
 800fd44:	687b      	ldr	r3, [r7, #4]
 800fd46:	2201      	movs	r2, #1
 800fd48:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 800fd4c:	68fb      	ldr	r3, [r7, #12]
 800fd4e:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 800fd52:	683b      	ldr	r3, [r7, #0]
 800fd54:	68db      	ldr	r3, [r3, #12]
 800fd56:	4313      	orrs	r3, r2
 800fd58:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 800fd5a:	68fb      	ldr	r3, [r7, #12]
 800fd5c:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800fd60:	683b      	ldr	r3, [r7, #0]
 800fd62:	689b      	ldr	r3, [r3, #8]
 800fd64:	4313      	orrs	r3, r2
 800fd66:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 800fd68:	68fb      	ldr	r3, [r7, #12]
 800fd6a:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 800fd6e:	683b      	ldr	r3, [r7, #0]
 800fd70:	685b      	ldr	r3, [r3, #4]
 800fd72:	4313      	orrs	r3, r2
 800fd74:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 800fd76:	68fb      	ldr	r3, [r7, #12]
 800fd78:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 800fd7c:	683b      	ldr	r3, [r7, #0]
 800fd7e:	681b      	ldr	r3, [r3, #0]
 800fd80:	4313      	orrs	r3, r2
 800fd82:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 800fd84:	68fb      	ldr	r3, [r7, #12]
 800fd86:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800fd8a:	683b      	ldr	r3, [r7, #0]
 800fd8c:	691b      	ldr	r3, [r3, #16]
 800fd8e:	4313      	orrs	r3, r2
 800fd90:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 800fd92:	68fb      	ldr	r3, [r7, #12]
 800fd94:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 800fd98:	683b      	ldr	r3, [r7, #0]
 800fd9a:	695b      	ldr	r3, [r3, #20]
 800fd9c:	4313      	orrs	r3, r2
 800fd9e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 800fda0:	68fb      	ldr	r3, [r7, #12]
 800fda2:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 800fda6:	683b      	ldr	r3, [r7, #0]
 800fda8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800fdaa:	4313      	orrs	r3, r2
 800fdac:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 800fdae:	68fb      	ldr	r3, [r7, #12]
 800fdb0:	f423 2270 	bic.w	r2, r3, #983040	; 0xf0000
 800fdb4:	683b      	ldr	r3, [r7, #0]
 800fdb6:	699b      	ldr	r3, [r3, #24]
 800fdb8:	041b      	lsls	r3, r3, #16
 800fdba:	4313      	orrs	r3, r2
 800fdbc:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_ADVANCED_INSTANCE(htim->Instance))
 800fdbe:	687b      	ldr	r3, [r7, #4]
 800fdc0:	681b      	ldr	r3, [r3, #0]
 800fdc2:	4a2f      	ldr	r2, [pc, #188]	; (800fe80 <HAL_TIMEx_ConfigBreakDeadTime+0x158>)
 800fdc4:	4293      	cmp	r3, r2
 800fdc6:	d009      	beq.n	800fddc <HAL_TIMEx_ConfigBreakDeadTime+0xb4>
 800fdc8:	687b      	ldr	r3, [r7, #4]
 800fdca:	681b      	ldr	r3, [r3, #0]
 800fdcc:	4a2d      	ldr	r2, [pc, #180]	; (800fe84 <HAL_TIMEx_ConfigBreakDeadTime+0x15c>)
 800fdce:	4293      	cmp	r3, r2
 800fdd0:	d004      	beq.n	800fddc <HAL_TIMEx_ConfigBreakDeadTime+0xb4>
 800fdd2:	687b      	ldr	r3, [r7, #4]
 800fdd4:	681b      	ldr	r3, [r3, #0]
 800fdd6:	4a2c      	ldr	r2, [pc, #176]	; (800fe88 <HAL_TIMEx_ConfigBreakDeadTime+0x160>)
 800fdd8:	4293      	cmp	r3, r2
 800fdda:	d106      	bne.n	800fdea <HAL_TIMEx_ConfigBreakDeadTime+0xc2>
  {
    /* Check the parameters */
    assert_param(IS_TIM_BREAK_AFMODE(sBreakDeadTimeConfig->BreakAFMode));

    /* Set BREAK AF mode */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BKBID, sBreakDeadTimeConfig->BreakAFMode);
 800fddc:	68fb      	ldr	r3, [r7, #12]
 800fdde:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 800fde2:	683b      	ldr	r3, [r7, #0]
 800fde4:	69db      	ldr	r3, [r3, #28]
 800fde6:	4313      	orrs	r3, r2
 800fde8:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 800fdea:	687b      	ldr	r3, [r7, #4]
 800fdec:	681b      	ldr	r3, [r3, #0]
 800fdee:	4a24      	ldr	r2, [pc, #144]	; (800fe80 <HAL_TIMEx_ConfigBreakDeadTime+0x158>)
 800fdf0:	4293      	cmp	r3, r2
 800fdf2:	d009      	beq.n	800fe08 <HAL_TIMEx_ConfigBreakDeadTime+0xe0>
 800fdf4:	687b      	ldr	r3, [r7, #4]
 800fdf6:	681b      	ldr	r3, [r3, #0]
 800fdf8:	4a22      	ldr	r2, [pc, #136]	; (800fe84 <HAL_TIMEx_ConfigBreakDeadTime+0x15c>)
 800fdfa:	4293      	cmp	r3, r2
 800fdfc:	d004      	beq.n	800fe08 <HAL_TIMEx_ConfigBreakDeadTime+0xe0>
 800fdfe:	687b      	ldr	r3, [r7, #4]
 800fe00:	681b      	ldr	r3, [r3, #0]
 800fe02:	4a21      	ldr	r2, [pc, #132]	; (800fe88 <HAL_TIMEx_ConfigBreakDeadTime+0x160>)
 800fe04:	4293      	cmp	r3, r2
 800fe06:	d12b      	bne.n	800fe60 <HAL_TIMEx_ConfigBreakDeadTime+0x138>
    assert_param(IS_TIM_BREAK2_STATE(sBreakDeadTimeConfig->Break2State));
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 800fe08:	68fb      	ldr	r3, [r7, #12]
 800fe0a:	f423 0270 	bic.w	r2, r3, #15728640	; 0xf00000
 800fe0e:	683b      	ldr	r3, [r7, #0]
 800fe10:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800fe12:	051b      	lsls	r3, r3, #20
 800fe14:	4313      	orrs	r3, r2
 800fe16:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 800fe18:	68fb      	ldr	r3, [r7, #12]
 800fe1a:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 800fe1e:	683b      	ldr	r3, [r7, #0]
 800fe20:	6a1b      	ldr	r3, [r3, #32]
 800fe22:	4313      	orrs	r3, r2
 800fe24:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 800fe26:	68fb      	ldr	r3, [r7, #12]
 800fe28:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 800fe2c:	683b      	ldr	r3, [r7, #0]
 800fe2e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800fe30:	4313      	orrs	r3, r2
 800fe32:	60fb      	str	r3, [r7, #12]

    if (IS_TIM_ADVANCED_INSTANCE(htim->Instance))
 800fe34:	687b      	ldr	r3, [r7, #4]
 800fe36:	681b      	ldr	r3, [r3, #0]
 800fe38:	4a11      	ldr	r2, [pc, #68]	; (800fe80 <HAL_TIMEx_ConfigBreakDeadTime+0x158>)
 800fe3a:	4293      	cmp	r3, r2
 800fe3c:	d009      	beq.n	800fe52 <HAL_TIMEx_ConfigBreakDeadTime+0x12a>
 800fe3e:	687b      	ldr	r3, [r7, #4]
 800fe40:	681b      	ldr	r3, [r3, #0]
 800fe42:	4a10      	ldr	r2, [pc, #64]	; (800fe84 <HAL_TIMEx_ConfigBreakDeadTime+0x15c>)
 800fe44:	4293      	cmp	r3, r2
 800fe46:	d004      	beq.n	800fe52 <HAL_TIMEx_ConfigBreakDeadTime+0x12a>
 800fe48:	687b      	ldr	r3, [r7, #4]
 800fe4a:	681b      	ldr	r3, [r3, #0]
 800fe4c:	4a0e      	ldr	r2, [pc, #56]	; (800fe88 <HAL_TIMEx_ConfigBreakDeadTime+0x160>)
 800fe4e:	4293      	cmp	r3, r2
 800fe50:	d106      	bne.n	800fe60 <HAL_TIMEx_ConfigBreakDeadTime+0x138>
    {
      /* Check the parameters */
      assert_param(IS_TIM_BREAK2_AFMODE(sBreakDeadTimeConfig->Break2AFMode));

      /* Set BREAK2 AF mode */
      MODIFY_REG(tmpbdtr, TIM_BDTR_BK2BID, sBreakDeadTimeConfig->Break2AFMode);
 800fe52:	68fb      	ldr	r3, [r7, #12]
 800fe54:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
 800fe58:	683b      	ldr	r3, [r7, #0]
 800fe5a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800fe5c:	4313      	orrs	r3, r2
 800fe5e:	60fb      	str	r3, [r7, #12]
    }
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 800fe60:	687b      	ldr	r3, [r7, #4]
 800fe62:	681b      	ldr	r3, [r3, #0]
 800fe64:	68fa      	ldr	r2, [r7, #12]
 800fe66:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 800fe68:	687b      	ldr	r3, [r7, #4]
 800fe6a:	2200      	movs	r2, #0
 800fe6c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800fe70:	2300      	movs	r3, #0
}
 800fe72:	4618      	mov	r0, r3
 800fe74:	3714      	adds	r7, #20
 800fe76:	46bd      	mov	sp, r7
 800fe78:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fe7c:	4770      	bx	lr
 800fe7e:	bf00      	nop
 800fe80:	40012c00 	.word	0x40012c00
 800fe84:	40013400 	.word	0x40013400
 800fe88:	40015000 	.word	0x40015000

0800fe8c <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800fe8c:	b480      	push	{r7}
 800fe8e:	b083      	sub	sp, #12
 800fe90:	af00      	add	r7, sp, #0
 800fe92:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800fe94:	bf00      	nop
 800fe96:	370c      	adds	r7, #12
 800fe98:	46bd      	mov	sp, r7
 800fe9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fe9e:	4770      	bx	lr

0800fea0 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800fea0:	b480      	push	{r7}
 800fea2:	b083      	sub	sp, #12
 800fea4:	af00      	add	r7, sp, #0
 800fea6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800fea8:	bf00      	nop
 800feaa:	370c      	adds	r7, #12
 800feac:	46bd      	mov	sp, r7
 800feae:	f85d 7b04 	ldr.w	r7, [sp], #4
 800feb2:	4770      	bx	lr

0800feb4 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 800feb4:	b480      	push	{r7}
 800feb6:	b083      	sub	sp, #12
 800feb8:	af00      	add	r7, sp, #0
 800feba:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 800febc:	bf00      	nop
 800febe:	370c      	adds	r7, #12
 800fec0:	46bd      	mov	sp, r7
 800fec2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fec6:	4770      	bx	lr

0800fec8 <HAL_TIMEx_EncoderIndexCallback>:
  * @brief  Encoder index callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_EncoderIndexCallback(TIM_HandleTypeDef *htim)
{
 800fec8:	b480      	push	{r7}
 800feca:	b083      	sub	sp, #12
 800fecc:	af00      	add	r7, sp, #0
 800fece:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_EncoderIndexCallback could be implemented in the user file
   */
}
 800fed0:	bf00      	nop
 800fed2:	370c      	adds	r7, #12
 800fed4:	46bd      	mov	sp, r7
 800fed6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800feda:	4770      	bx	lr

0800fedc <HAL_TIMEx_DirectionChangeCallback>:
  * @brief  Direction change callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_DirectionChangeCallback(TIM_HandleTypeDef *htim)
{
 800fedc:	b480      	push	{r7}
 800fede:	b083      	sub	sp, #12
 800fee0:	af00      	add	r7, sp, #0
 800fee2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_DirectionChangeCallback could be implemented in the user file
   */
}
 800fee4:	bf00      	nop
 800fee6:	370c      	adds	r7, #12
 800fee8:	46bd      	mov	sp, r7
 800feea:	f85d 7b04 	ldr.w	r7, [sp], #4
 800feee:	4770      	bx	lr

0800fef0 <HAL_TIMEx_IndexErrorCallback>:
  * @brief  Index error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_IndexErrorCallback(TIM_HandleTypeDef *htim)
{
 800fef0:	b480      	push	{r7}
 800fef2:	b083      	sub	sp, #12
 800fef4:	af00      	add	r7, sp, #0
 800fef6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_IndexErrorCallback could be implemented in the user file
   */
}
 800fef8:	bf00      	nop
 800fefa:	370c      	adds	r7, #12
 800fefc:	46bd      	mov	sp, r7
 800fefe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ff02:	4770      	bx	lr

0800ff04 <HAL_TIMEx_TransitionErrorCallback>:
  * @brief  Transition error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_TransitionErrorCallback(TIM_HandleTypeDef *htim)
{
 800ff04:	b480      	push	{r7}
 800ff06:	b083      	sub	sp, #12
 800ff08:	af00      	add	r7, sp, #0
 800ff0a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_TransitionErrorCallback could be implemented in the user file
   */
}
 800ff0c:	bf00      	nop
 800ff0e:	370c      	adds	r7, #12
 800ff10:	46bd      	mov	sp, r7
 800ff12:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ff16:	4770      	bx	lr

0800ff18 <LL_EXTI_EnableIT_0_31>:
{
 800ff18:	b480      	push	{r7}
 800ff1a:	b083      	sub	sp, #12
 800ff1c:	af00      	add	r7, sp, #0
 800ff1e:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->IMR1, ExtiLine);
 800ff20:	4b05      	ldr	r3, [pc, #20]	; (800ff38 <LL_EXTI_EnableIT_0_31+0x20>)
 800ff22:	681a      	ldr	r2, [r3, #0]
 800ff24:	4904      	ldr	r1, [pc, #16]	; (800ff38 <LL_EXTI_EnableIT_0_31+0x20>)
 800ff26:	687b      	ldr	r3, [r7, #4]
 800ff28:	4313      	orrs	r3, r2
 800ff2a:	600b      	str	r3, [r1, #0]
}
 800ff2c:	bf00      	nop
 800ff2e:	370c      	adds	r7, #12
 800ff30:	46bd      	mov	sp, r7
 800ff32:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ff36:	4770      	bx	lr
 800ff38:	40010400 	.word	0x40010400

0800ff3c <LL_EXTI_EnableIT_32_63>:
{
 800ff3c:	b480      	push	{r7}
 800ff3e:	b083      	sub	sp, #12
 800ff40:	af00      	add	r7, sp, #0
 800ff42:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->IMR2, ExtiLine);
 800ff44:	4b05      	ldr	r3, [pc, #20]	; (800ff5c <LL_EXTI_EnableIT_32_63+0x20>)
 800ff46:	6a1a      	ldr	r2, [r3, #32]
 800ff48:	4904      	ldr	r1, [pc, #16]	; (800ff5c <LL_EXTI_EnableIT_32_63+0x20>)
 800ff4a:	687b      	ldr	r3, [r7, #4]
 800ff4c:	4313      	orrs	r3, r2
 800ff4e:	620b      	str	r3, [r1, #32]
}
 800ff50:	bf00      	nop
 800ff52:	370c      	adds	r7, #12
 800ff54:	46bd      	mov	sp, r7
 800ff56:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ff5a:	4770      	bx	lr
 800ff5c:	40010400 	.word	0x40010400

0800ff60 <LL_EXTI_DisableIT_0_31>:
{
 800ff60:	b480      	push	{r7}
 800ff62:	b083      	sub	sp, #12
 800ff64:	af00      	add	r7, sp, #0
 800ff66:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->IMR1, ExtiLine);
 800ff68:	4b06      	ldr	r3, [pc, #24]	; (800ff84 <LL_EXTI_DisableIT_0_31+0x24>)
 800ff6a:	681a      	ldr	r2, [r3, #0]
 800ff6c:	687b      	ldr	r3, [r7, #4]
 800ff6e:	43db      	mvns	r3, r3
 800ff70:	4904      	ldr	r1, [pc, #16]	; (800ff84 <LL_EXTI_DisableIT_0_31+0x24>)
 800ff72:	4013      	ands	r3, r2
 800ff74:	600b      	str	r3, [r1, #0]
}
 800ff76:	bf00      	nop
 800ff78:	370c      	adds	r7, #12
 800ff7a:	46bd      	mov	sp, r7
 800ff7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ff80:	4770      	bx	lr
 800ff82:	bf00      	nop
 800ff84:	40010400 	.word	0x40010400

0800ff88 <LL_EXTI_DisableIT_32_63>:
{
 800ff88:	b480      	push	{r7}
 800ff8a:	b083      	sub	sp, #12
 800ff8c:	af00      	add	r7, sp, #0
 800ff8e:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->IMR2, ExtiLine);
 800ff90:	4b06      	ldr	r3, [pc, #24]	; (800ffac <LL_EXTI_DisableIT_32_63+0x24>)
 800ff92:	6a1a      	ldr	r2, [r3, #32]
 800ff94:	687b      	ldr	r3, [r7, #4]
 800ff96:	43db      	mvns	r3, r3
 800ff98:	4904      	ldr	r1, [pc, #16]	; (800ffac <LL_EXTI_DisableIT_32_63+0x24>)
 800ff9a:	4013      	ands	r3, r2
 800ff9c:	620b      	str	r3, [r1, #32]
}
 800ff9e:	bf00      	nop
 800ffa0:	370c      	adds	r7, #12
 800ffa2:	46bd      	mov	sp, r7
 800ffa4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ffa8:	4770      	bx	lr
 800ffaa:	bf00      	nop
 800ffac:	40010400 	.word	0x40010400

0800ffb0 <LL_EXTI_EnableEvent_0_31>:
{
 800ffb0:	b480      	push	{r7}
 800ffb2:	b083      	sub	sp, #12
 800ffb4:	af00      	add	r7, sp, #0
 800ffb6:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->EMR1, ExtiLine);
 800ffb8:	4b05      	ldr	r3, [pc, #20]	; (800ffd0 <LL_EXTI_EnableEvent_0_31+0x20>)
 800ffba:	685a      	ldr	r2, [r3, #4]
 800ffbc:	4904      	ldr	r1, [pc, #16]	; (800ffd0 <LL_EXTI_EnableEvent_0_31+0x20>)
 800ffbe:	687b      	ldr	r3, [r7, #4]
 800ffc0:	4313      	orrs	r3, r2
 800ffc2:	604b      	str	r3, [r1, #4]
}
 800ffc4:	bf00      	nop
 800ffc6:	370c      	adds	r7, #12
 800ffc8:	46bd      	mov	sp, r7
 800ffca:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ffce:	4770      	bx	lr
 800ffd0:	40010400 	.word	0x40010400

0800ffd4 <LL_EXTI_EnableEvent_32_63>:
{
 800ffd4:	b480      	push	{r7}
 800ffd6:	b083      	sub	sp, #12
 800ffd8:	af00      	add	r7, sp, #0
 800ffda:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->EMR2, ExtiLine);
 800ffdc:	4b05      	ldr	r3, [pc, #20]	; (800fff4 <LL_EXTI_EnableEvent_32_63+0x20>)
 800ffde:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800ffe0:	4904      	ldr	r1, [pc, #16]	; (800fff4 <LL_EXTI_EnableEvent_32_63+0x20>)
 800ffe2:	687b      	ldr	r3, [r7, #4]
 800ffe4:	4313      	orrs	r3, r2
 800ffe6:	624b      	str	r3, [r1, #36]	; 0x24
}
 800ffe8:	bf00      	nop
 800ffea:	370c      	adds	r7, #12
 800ffec:	46bd      	mov	sp, r7
 800ffee:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fff2:	4770      	bx	lr
 800fff4:	40010400 	.word	0x40010400

0800fff8 <LL_EXTI_DisableEvent_0_31>:
{
 800fff8:	b480      	push	{r7}
 800fffa:	b083      	sub	sp, #12
 800fffc:	af00      	add	r7, sp, #0
 800fffe:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->EMR1, ExtiLine);
 8010000:	4b06      	ldr	r3, [pc, #24]	; (801001c <LL_EXTI_DisableEvent_0_31+0x24>)
 8010002:	685a      	ldr	r2, [r3, #4]
 8010004:	687b      	ldr	r3, [r7, #4]
 8010006:	43db      	mvns	r3, r3
 8010008:	4904      	ldr	r1, [pc, #16]	; (801001c <LL_EXTI_DisableEvent_0_31+0x24>)
 801000a:	4013      	ands	r3, r2
 801000c:	604b      	str	r3, [r1, #4]
}
 801000e:	bf00      	nop
 8010010:	370c      	adds	r7, #12
 8010012:	46bd      	mov	sp, r7
 8010014:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010018:	4770      	bx	lr
 801001a:	bf00      	nop
 801001c:	40010400 	.word	0x40010400

08010020 <LL_EXTI_DisableEvent_32_63>:
{
 8010020:	b480      	push	{r7}
 8010022:	b083      	sub	sp, #12
 8010024:	af00      	add	r7, sp, #0
 8010026:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->EMR2, ExtiLine);
 8010028:	4b06      	ldr	r3, [pc, #24]	; (8010044 <LL_EXTI_DisableEvent_32_63+0x24>)
 801002a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 801002c:	687b      	ldr	r3, [r7, #4]
 801002e:	43db      	mvns	r3, r3
 8010030:	4904      	ldr	r1, [pc, #16]	; (8010044 <LL_EXTI_DisableEvent_32_63+0x24>)
 8010032:	4013      	ands	r3, r2
 8010034:	624b      	str	r3, [r1, #36]	; 0x24
}
 8010036:	bf00      	nop
 8010038:	370c      	adds	r7, #12
 801003a:	46bd      	mov	sp, r7
 801003c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010040:	4770      	bx	lr
 8010042:	bf00      	nop
 8010044:	40010400 	.word	0x40010400

08010048 <LL_EXTI_EnableRisingTrig_0_31>:
{
 8010048:	b480      	push	{r7}
 801004a:	b083      	sub	sp, #12
 801004c:	af00      	add	r7, sp, #0
 801004e:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->RTSR1, ExtiLine);
 8010050:	4b05      	ldr	r3, [pc, #20]	; (8010068 <LL_EXTI_EnableRisingTrig_0_31+0x20>)
 8010052:	689a      	ldr	r2, [r3, #8]
 8010054:	4904      	ldr	r1, [pc, #16]	; (8010068 <LL_EXTI_EnableRisingTrig_0_31+0x20>)
 8010056:	687b      	ldr	r3, [r7, #4]
 8010058:	4313      	orrs	r3, r2
 801005a:	608b      	str	r3, [r1, #8]
}
 801005c:	bf00      	nop
 801005e:	370c      	adds	r7, #12
 8010060:	46bd      	mov	sp, r7
 8010062:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010066:	4770      	bx	lr
 8010068:	40010400 	.word	0x40010400

0801006c <LL_EXTI_EnableRisingTrig_32_63>:
{
 801006c:	b480      	push	{r7}
 801006e:	b083      	sub	sp, #12
 8010070:	af00      	add	r7, sp, #0
 8010072:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->RTSR2, ExtiLine);
 8010074:	4b05      	ldr	r3, [pc, #20]	; (801008c <LL_EXTI_EnableRisingTrig_32_63+0x20>)
 8010076:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8010078:	4904      	ldr	r1, [pc, #16]	; (801008c <LL_EXTI_EnableRisingTrig_32_63+0x20>)
 801007a:	687b      	ldr	r3, [r7, #4]
 801007c:	4313      	orrs	r3, r2
 801007e:	628b      	str	r3, [r1, #40]	; 0x28
}
 8010080:	bf00      	nop
 8010082:	370c      	adds	r7, #12
 8010084:	46bd      	mov	sp, r7
 8010086:	f85d 7b04 	ldr.w	r7, [sp], #4
 801008a:	4770      	bx	lr
 801008c:	40010400 	.word	0x40010400

08010090 <LL_EXTI_DisableRisingTrig_0_31>:
{
 8010090:	b480      	push	{r7}
 8010092:	b083      	sub	sp, #12
 8010094:	af00      	add	r7, sp, #0
 8010096:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->RTSR1, ExtiLine);
 8010098:	4b06      	ldr	r3, [pc, #24]	; (80100b4 <LL_EXTI_DisableRisingTrig_0_31+0x24>)
 801009a:	689a      	ldr	r2, [r3, #8]
 801009c:	687b      	ldr	r3, [r7, #4]
 801009e:	43db      	mvns	r3, r3
 80100a0:	4904      	ldr	r1, [pc, #16]	; (80100b4 <LL_EXTI_DisableRisingTrig_0_31+0x24>)
 80100a2:	4013      	ands	r3, r2
 80100a4:	608b      	str	r3, [r1, #8]
}
 80100a6:	bf00      	nop
 80100a8:	370c      	adds	r7, #12
 80100aa:	46bd      	mov	sp, r7
 80100ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80100b0:	4770      	bx	lr
 80100b2:	bf00      	nop
 80100b4:	40010400 	.word	0x40010400

080100b8 <LL_EXTI_DisableRisingTrig_32_63>:
{
 80100b8:	b480      	push	{r7}
 80100ba:	b083      	sub	sp, #12
 80100bc:	af00      	add	r7, sp, #0
 80100be:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->RTSR2, ExtiLine);
 80100c0:	4b06      	ldr	r3, [pc, #24]	; (80100dc <LL_EXTI_DisableRisingTrig_32_63+0x24>)
 80100c2:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80100c4:	687b      	ldr	r3, [r7, #4]
 80100c6:	43db      	mvns	r3, r3
 80100c8:	4904      	ldr	r1, [pc, #16]	; (80100dc <LL_EXTI_DisableRisingTrig_32_63+0x24>)
 80100ca:	4013      	ands	r3, r2
 80100cc:	628b      	str	r3, [r1, #40]	; 0x28
}
 80100ce:	bf00      	nop
 80100d0:	370c      	adds	r7, #12
 80100d2:	46bd      	mov	sp, r7
 80100d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80100d8:	4770      	bx	lr
 80100da:	bf00      	nop
 80100dc:	40010400 	.word	0x40010400

080100e0 <LL_EXTI_EnableFallingTrig_0_31>:
{
 80100e0:	b480      	push	{r7}
 80100e2:	b083      	sub	sp, #12
 80100e4:	af00      	add	r7, sp, #0
 80100e6:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->FTSR1, ExtiLine);
 80100e8:	4b05      	ldr	r3, [pc, #20]	; (8010100 <LL_EXTI_EnableFallingTrig_0_31+0x20>)
 80100ea:	68da      	ldr	r2, [r3, #12]
 80100ec:	4904      	ldr	r1, [pc, #16]	; (8010100 <LL_EXTI_EnableFallingTrig_0_31+0x20>)
 80100ee:	687b      	ldr	r3, [r7, #4]
 80100f0:	4313      	orrs	r3, r2
 80100f2:	60cb      	str	r3, [r1, #12]
}
 80100f4:	bf00      	nop
 80100f6:	370c      	adds	r7, #12
 80100f8:	46bd      	mov	sp, r7
 80100fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80100fe:	4770      	bx	lr
 8010100:	40010400 	.word	0x40010400

08010104 <LL_EXTI_EnableFallingTrig_32_63>:
{
 8010104:	b480      	push	{r7}
 8010106:	b083      	sub	sp, #12
 8010108:	af00      	add	r7, sp, #0
 801010a:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->FTSR2, ExtiLine);
 801010c:	4b05      	ldr	r3, [pc, #20]	; (8010124 <LL_EXTI_EnableFallingTrig_32_63+0x20>)
 801010e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8010110:	4904      	ldr	r1, [pc, #16]	; (8010124 <LL_EXTI_EnableFallingTrig_32_63+0x20>)
 8010112:	687b      	ldr	r3, [r7, #4]
 8010114:	4313      	orrs	r3, r2
 8010116:	62cb      	str	r3, [r1, #44]	; 0x2c
}
 8010118:	bf00      	nop
 801011a:	370c      	adds	r7, #12
 801011c:	46bd      	mov	sp, r7
 801011e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010122:	4770      	bx	lr
 8010124:	40010400 	.word	0x40010400

08010128 <LL_EXTI_DisableFallingTrig_0_31>:
{
 8010128:	b480      	push	{r7}
 801012a:	b083      	sub	sp, #12
 801012c:	af00      	add	r7, sp, #0
 801012e:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->FTSR1, ExtiLine);
 8010130:	4b06      	ldr	r3, [pc, #24]	; (801014c <LL_EXTI_DisableFallingTrig_0_31+0x24>)
 8010132:	68da      	ldr	r2, [r3, #12]
 8010134:	687b      	ldr	r3, [r7, #4]
 8010136:	43db      	mvns	r3, r3
 8010138:	4904      	ldr	r1, [pc, #16]	; (801014c <LL_EXTI_DisableFallingTrig_0_31+0x24>)
 801013a:	4013      	ands	r3, r2
 801013c:	60cb      	str	r3, [r1, #12]
}
 801013e:	bf00      	nop
 8010140:	370c      	adds	r7, #12
 8010142:	46bd      	mov	sp, r7
 8010144:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010148:	4770      	bx	lr
 801014a:	bf00      	nop
 801014c:	40010400 	.word	0x40010400

08010150 <LL_EXTI_DisableFallingTrig_32_63>:
{
 8010150:	b480      	push	{r7}
 8010152:	b083      	sub	sp, #12
 8010154:	af00      	add	r7, sp, #0
 8010156:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->FTSR2, ExtiLine);
 8010158:	4b06      	ldr	r3, [pc, #24]	; (8010174 <LL_EXTI_DisableFallingTrig_32_63+0x24>)
 801015a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801015c:	687b      	ldr	r3, [r7, #4]
 801015e:	43db      	mvns	r3, r3
 8010160:	4904      	ldr	r1, [pc, #16]	; (8010174 <LL_EXTI_DisableFallingTrig_32_63+0x24>)
 8010162:	4013      	ands	r3, r2
 8010164:	62cb      	str	r3, [r1, #44]	; 0x2c
}
 8010166:	bf00      	nop
 8010168:	370c      	adds	r7, #12
 801016a:	46bd      	mov	sp, r7
 801016c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010170:	4770      	bx	lr
 8010172:	bf00      	nop
 8010174:	40010400 	.word	0x40010400

08010178 <LL_EXTI_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - 0x00: EXTI registers are initialized
  *          - any other calue : wrong configuration
  */
uint32_t LL_EXTI_Init(LL_EXTI_InitTypeDef *EXTI_InitStruct)
{
 8010178:	b580      	push	{r7, lr}
 801017a:	b084      	sub	sp, #16
 801017c:	af00      	add	r7, sp, #0
 801017e:	6078      	str	r0, [r7, #4]
  uint32_t status = 0x00u;
 8010180:	2300      	movs	r3, #0
 8010182:	60fb      	str	r3, [r7, #12]
  assert_param(IS_LL_EXTI_LINE_32_63(EXTI_InitStruct->Line_32_63));
  assert_param(IS_FUNCTIONAL_STATE(EXTI_InitStruct->LineCommand));
  assert_param(IS_LL_EXTI_MODE(EXTI_InitStruct->Mode));

  /* ENABLE LineCommand */
  if (EXTI_InitStruct->LineCommand != DISABLE)
 8010184:	687b      	ldr	r3, [r7, #4]
 8010186:	7a1b      	ldrb	r3, [r3, #8]
 8010188:	2b00      	cmp	r3, #0
 801018a:	f000 80c8 	beq.w	801031e <LL_EXTI_Init+0x1a6>
  {
    assert_param(IS_LL_EXTI_TRIGGER(EXTI_InitStruct->Trigger));

    /* Configure EXTI Lines in range from 0 to 31 */
    if (EXTI_InitStruct->Line_0_31 != LL_EXTI_LINE_NONE)
 801018e:	687b      	ldr	r3, [r7, #4]
 8010190:	681b      	ldr	r3, [r3, #0]
 8010192:	2b00      	cmp	r3, #0
 8010194:	d05d      	beq.n	8010252 <LL_EXTI_Init+0xda>
    {
      switch (EXTI_InitStruct->Mode)
 8010196:	687b      	ldr	r3, [r7, #4]
 8010198:	7a5b      	ldrb	r3, [r3, #9]
 801019a:	2b01      	cmp	r3, #1
 801019c:	d00e      	beq.n	80101bc <LL_EXTI_Init+0x44>
 801019e:	2b02      	cmp	r3, #2
 80101a0:	d017      	beq.n	80101d2 <LL_EXTI_Init+0x5a>
 80101a2:	2b00      	cmp	r3, #0
 80101a4:	d120      	bne.n	80101e8 <LL_EXTI_Init+0x70>
      {
        case LL_EXTI_MODE_IT:
          /* First Disable Event on provided Lines */
          LL_EXTI_DisableEvent_0_31(EXTI_InitStruct->Line_0_31);
 80101a6:	687b      	ldr	r3, [r7, #4]
 80101a8:	681b      	ldr	r3, [r3, #0]
 80101aa:	4618      	mov	r0, r3
 80101ac:	f7ff ff24 	bl	800fff8 <LL_EXTI_DisableEvent_0_31>
          /* Then Enable IT on provided Lines */
          LL_EXTI_EnableIT_0_31(EXTI_InitStruct->Line_0_31);
 80101b0:	687b      	ldr	r3, [r7, #4]
 80101b2:	681b      	ldr	r3, [r3, #0]
 80101b4:	4618      	mov	r0, r3
 80101b6:	f7ff feaf 	bl	800ff18 <LL_EXTI_EnableIT_0_31>
          break;
 80101ba:	e018      	b.n	80101ee <LL_EXTI_Init+0x76>
        case LL_EXTI_MODE_EVENT:
          /* First Disable IT on provided Lines */
          LL_EXTI_DisableIT_0_31(EXTI_InitStruct->Line_0_31);
 80101bc:	687b      	ldr	r3, [r7, #4]
 80101be:	681b      	ldr	r3, [r3, #0]
 80101c0:	4618      	mov	r0, r3
 80101c2:	f7ff fecd 	bl	800ff60 <LL_EXTI_DisableIT_0_31>
          /* Then Enable Event on provided Lines */
          LL_EXTI_EnableEvent_0_31(EXTI_InitStruct->Line_0_31);
 80101c6:	687b      	ldr	r3, [r7, #4]
 80101c8:	681b      	ldr	r3, [r3, #0]
 80101ca:	4618      	mov	r0, r3
 80101cc:	f7ff fef0 	bl	800ffb0 <LL_EXTI_EnableEvent_0_31>
          break;
 80101d0:	e00d      	b.n	80101ee <LL_EXTI_Init+0x76>
        case LL_EXTI_MODE_IT_EVENT:
          /* Directly Enable IT on provided Lines */
          LL_EXTI_EnableIT_0_31(EXTI_InitStruct->Line_0_31);
 80101d2:	687b      	ldr	r3, [r7, #4]
 80101d4:	681b      	ldr	r3, [r3, #0]
 80101d6:	4618      	mov	r0, r3
 80101d8:	f7ff fe9e 	bl	800ff18 <LL_EXTI_EnableIT_0_31>
          /* Directly Enable Event on provided Lines */
          LL_EXTI_EnableEvent_0_31(EXTI_InitStruct->Line_0_31);
 80101dc:	687b      	ldr	r3, [r7, #4]
 80101de:	681b      	ldr	r3, [r3, #0]
 80101e0:	4618      	mov	r0, r3
 80101e2:	f7ff fee5 	bl	800ffb0 <LL_EXTI_EnableEvent_0_31>
          break;
 80101e6:	e002      	b.n	80101ee <LL_EXTI_Init+0x76>
        default:
          status = 0x01u;
 80101e8:	2301      	movs	r3, #1
 80101ea:	60fb      	str	r3, [r7, #12]
          break;
 80101ec:	bf00      	nop
      }
      if (EXTI_InitStruct->Trigger != LL_EXTI_TRIGGER_NONE)
 80101ee:	687b      	ldr	r3, [r7, #4]
 80101f0:	7a9b      	ldrb	r3, [r3, #10]
 80101f2:	2b00      	cmp	r3, #0
 80101f4:	d02d      	beq.n	8010252 <LL_EXTI_Init+0xda>
      {
        switch (EXTI_InitStruct->Trigger)
 80101f6:	687b      	ldr	r3, [r7, #4]
 80101f8:	7a9b      	ldrb	r3, [r3, #10]
 80101fa:	2b02      	cmp	r3, #2
 80101fc:	d00e      	beq.n	801021c <LL_EXTI_Init+0xa4>
 80101fe:	2b03      	cmp	r3, #3
 8010200:	d017      	beq.n	8010232 <LL_EXTI_Init+0xba>
 8010202:	2b01      	cmp	r3, #1
 8010204:	d120      	bne.n	8010248 <LL_EXTI_Init+0xd0>
        {
          case LL_EXTI_TRIGGER_RISING:
            /* First Disable Falling Trigger on provided Lines */
            LL_EXTI_DisableFallingTrig_0_31(EXTI_InitStruct->Line_0_31);
 8010206:	687b      	ldr	r3, [r7, #4]
 8010208:	681b      	ldr	r3, [r3, #0]
 801020a:	4618      	mov	r0, r3
 801020c:	f7ff ff8c 	bl	8010128 <LL_EXTI_DisableFallingTrig_0_31>
            /* Then Enable Rising Trigger on provided Lines */
            LL_EXTI_EnableRisingTrig_0_31(EXTI_InitStruct->Line_0_31);
 8010210:	687b      	ldr	r3, [r7, #4]
 8010212:	681b      	ldr	r3, [r3, #0]
 8010214:	4618      	mov	r0, r3
 8010216:	f7ff ff17 	bl	8010048 <LL_EXTI_EnableRisingTrig_0_31>
            break;
 801021a:	e01b      	b.n	8010254 <LL_EXTI_Init+0xdc>
          case LL_EXTI_TRIGGER_FALLING:
            /* First Disable Rising Trigger on provided Lines */
            LL_EXTI_DisableRisingTrig_0_31(EXTI_InitStruct->Line_0_31);
 801021c:	687b      	ldr	r3, [r7, #4]
 801021e:	681b      	ldr	r3, [r3, #0]
 8010220:	4618      	mov	r0, r3
 8010222:	f7ff ff35 	bl	8010090 <LL_EXTI_DisableRisingTrig_0_31>
            /* Then Enable Falling Trigger on provided Lines */
            LL_EXTI_EnableFallingTrig_0_31(EXTI_InitStruct->Line_0_31);
 8010226:	687b      	ldr	r3, [r7, #4]
 8010228:	681b      	ldr	r3, [r3, #0]
 801022a:	4618      	mov	r0, r3
 801022c:	f7ff ff58 	bl	80100e0 <LL_EXTI_EnableFallingTrig_0_31>
            break;
 8010230:	e010      	b.n	8010254 <LL_EXTI_Init+0xdc>
          case LL_EXTI_TRIGGER_RISING_FALLING:
            /* Enable Rising Trigger on provided Lines */
            LL_EXTI_EnableRisingTrig_0_31(EXTI_InitStruct->Line_0_31);
 8010232:	687b      	ldr	r3, [r7, #4]
 8010234:	681b      	ldr	r3, [r3, #0]
 8010236:	4618      	mov	r0, r3
 8010238:	f7ff ff06 	bl	8010048 <LL_EXTI_EnableRisingTrig_0_31>
            /* Enable Falling Trigger on provided Lines */
            LL_EXTI_EnableFallingTrig_0_31(EXTI_InitStruct->Line_0_31);
 801023c:	687b      	ldr	r3, [r7, #4]
 801023e:	681b      	ldr	r3, [r3, #0]
 8010240:	4618      	mov	r0, r3
 8010242:	f7ff ff4d 	bl	80100e0 <LL_EXTI_EnableFallingTrig_0_31>
            break;
 8010246:	e005      	b.n	8010254 <LL_EXTI_Init+0xdc>
          default:
            status |= 0x02u;
 8010248:	68fb      	ldr	r3, [r7, #12]
 801024a:	f043 0302 	orr.w	r3, r3, #2
 801024e:	60fb      	str	r3, [r7, #12]
            break;
 8010250:	e000      	b.n	8010254 <LL_EXTI_Init+0xdc>
        }
      }
 8010252:	bf00      	nop
    }
    /* Configure EXTI Lines in range from 32 to 63 */
    if (EXTI_InitStruct->Line_32_63 != LL_EXTI_LINE_NONE)
 8010254:	687b      	ldr	r3, [r7, #4]
 8010256:	685b      	ldr	r3, [r3, #4]
 8010258:	2b00      	cmp	r3, #0
 801025a:	d075      	beq.n	8010348 <LL_EXTI_Init+0x1d0>
    {
      switch (EXTI_InitStruct->Mode)
 801025c:	687b      	ldr	r3, [r7, #4]
 801025e:	7a5b      	ldrb	r3, [r3, #9]
 8010260:	2b01      	cmp	r3, #1
 8010262:	d00e      	beq.n	8010282 <LL_EXTI_Init+0x10a>
 8010264:	2b02      	cmp	r3, #2
 8010266:	d017      	beq.n	8010298 <LL_EXTI_Init+0x120>
 8010268:	2b00      	cmp	r3, #0
 801026a:	d120      	bne.n	80102ae <LL_EXTI_Init+0x136>
      {
        case LL_EXTI_MODE_IT:
          /* First Disable Event on provided Lines */
          LL_EXTI_DisableEvent_32_63(EXTI_InitStruct->Line_32_63);
 801026c:	687b      	ldr	r3, [r7, #4]
 801026e:	685b      	ldr	r3, [r3, #4]
 8010270:	4618      	mov	r0, r3
 8010272:	f7ff fed5 	bl	8010020 <LL_EXTI_DisableEvent_32_63>
          /* Then Enable IT on provided Lines */
          LL_EXTI_EnableIT_32_63(EXTI_InitStruct->Line_32_63);
 8010276:	687b      	ldr	r3, [r7, #4]
 8010278:	685b      	ldr	r3, [r3, #4]
 801027a:	4618      	mov	r0, r3
 801027c:	f7ff fe5e 	bl	800ff3c <LL_EXTI_EnableIT_32_63>
          break;
 8010280:	e01a      	b.n	80102b8 <LL_EXTI_Init+0x140>
        case LL_EXTI_MODE_EVENT:
          /* First Disable IT on provided Lines */
          LL_EXTI_DisableIT_32_63(EXTI_InitStruct->Line_32_63);
 8010282:	687b      	ldr	r3, [r7, #4]
 8010284:	685b      	ldr	r3, [r3, #4]
 8010286:	4618      	mov	r0, r3
 8010288:	f7ff fe7e 	bl	800ff88 <LL_EXTI_DisableIT_32_63>
          /* Then Enable Event on provided Lines */
          LL_EXTI_EnableEvent_32_63(EXTI_InitStruct->Line_32_63);
 801028c:	687b      	ldr	r3, [r7, #4]
 801028e:	685b      	ldr	r3, [r3, #4]
 8010290:	4618      	mov	r0, r3
 8010292:	f7ff fe9f 	bl	800ffd4 <LL_EXTI_EnableEvent_32_63>
          break;
 8010296:	e00f      	b.n	80102b8 <LL_EXTI_Init+0x140>
        case LL_EXTI_MODE_IT_EVENT:
          /* Directly Enable IT on provided Lines */
          LL_EXTI_EnableIT_32_63(EXTI_InitStruct->Line_32_63);
 8010298:	687b      	ldr	r3, [r7, #4]
 801029a:	685b      	ldr	r3, [r3, #4]
 801029c:	4618      	mov	r0, r3
 801029e:	f7ff fe4d 	bl	800ff3c <LL_EXTI_EnableIT_32_63>
          /* Directly Enable IT on provided Lines */
          LL_EXTI_EnableEvent_32_63(EXTI_InitStruct->Line_32_63);
 80102a2:	687b      	ldr	r3, [r7, #4]
 80102a4:	685b      	ldr	r3, [r3, #4]
 80102a6:	4618      	mov	r0, r3
 80102a8:	f7ff fe94 	bl	800ffd4 <LL_EXTI_EnableEvent_32_63>
          break;
 80102ac:	e004      	b.n	80102b8 <LL_EXTI_Init+0x140>
        default:
          status |= 0x04u;
 80102ae:	68fb      	ldr	r3, [r7, #12]
 80102b0:	f043 0304 	orr.w	r3, r3, #4
 80102b4:	60fb      	str	r3, [r7, #12]
          break;
 80102b6:	bf00      	nop
      }
      if (EXTI_InitStruct->Trigger != LL_EXTI_TRIGGER_NONE)
 80102b8:	687b      	ldr	r3, [r7, #4]
 80102ba:	7a9b      	ldrb	r3, [r3, #10]
 80102bc:	2b00      	cmp	r3, #0
 80102be:	d043      	beq.n	8010348 <LL_EXTI_Init+0x1d0>
      {
        switch (EXTI_InitStruct->Trigger)
 80102c0:	687b      	ldr	r3, [r7, #4]
 80102c2:	7a9b      	ldrb	r3, [r3, #10]
 80102c4:	2b02      	cmp	r3, #2
 80102c6:	d00e      	beq.n	80102e6 <LL_EXTI_Init+0x16e>
 80102c8:	2b03      	cmp	r3, #3
 80102ca:	d017      	beq.n	80102fc <LL_EXTI_Init+0x184>
 80102cc:	2b01      	cmp	r3, #1
 80102ce:	d120      	bne.n	8010312 <LL_EXTI_Init+0x19a>
        {
          case LL_EXTI_TRIGGER_RISING:
            /* First Disable Falling Trigger on provided Lines */
            LL_EXTI_DisableFallingTrig_32_63(EXTI_InitStruct->Line_32_63);
 80102d0:	687b      	ldr	r3, [r7, #4]
 80102d2:	685b      	ldr	r3, [r3, #4]
 80102d4:	4618      	mov	r0, r3
 80102d6:	f7ff ff3b 	bl	8010150 <LL_EXTI_DisableFallingTrig_32_63>
            /* Then Enable IT on provided Lines */
            LL_EXTI_EnableRisingTrig_32_63(EXTI_InitStruct->Line_32_63);
 80102da:	687b      	ldr	r3, [r7, #4]
 80102dc:	685b      	ldr	r3, [r3, #4]
 80102de:	4618      	mov	r0, r3
 80102e0:	f7ff fec4 	bl	801006c <LL_EXTI_EnableRisingTrig_32_63>
            break;
 80102e4:	e031      	b.n	801034a <LL_EXTI_Init+0x1d2>
          case LL_EXTI_TRIGGER_FALLING:
            /* First Disable Rising Trigger on provided Lines */
            LL_EXTI_DisableRisingTrig_32_63(EXTI_InitStruct->Line_32_63);
 80102e6:	687b      	ldr	r3, [r7, #4]
 80102e8:	685b      	ldr	r3, [r3, #4]
 80102ea:	4618      	mov	r0, r3
 80102ec:	f7ff fee4 	bl	80100b8 <LL_EXTI_DisableRisingTrig_32_63>
            /* Then Enable Falling Trigger on provided Lines */
            LL_EXTI_EnableFallingTrig_32_63(EXTI_InitStruct->Line_32_63);
 80102f0:	687b      	ldr	r3, [r7, #4]
 80102f2:	685b      	ldr	r3, [r3, #4]
 80102f4:	4618      	mov	r0, r3
 80102f6:	f7ff ff05 	bl	8010104 <LL_EXTI_EnableFallingTrig_32_63>
            break;
 80102fa:	e026      	b.n	801034a <LL_EXTI_Init+0x1d2>
          case LL_EXTI_TRIGGER_RISING_FALLING:
            /* Enable Rising Trigger on provided Lines */
            LL_EXTI_EnableRisingTrig_32_63(EXTI_InitStruct->Line_32_63);
 80102fc:	687b      	ldr	r3, [r7, #4]
 80102fe:	685b      	ldr	r3, [r3, #4]
 8010300:	4618      	mov	r0, r3
 8010302:	f7ff feb3 	bl	801006c <LL_EXTI_EnableRisingTrig_32_63>
            /* Enable Falling Trigger on provided Lines */
            LL_EXTI_EnableFallingTrig_32_63(EXTI_InitStruct->Line_32_63);
 8010306:	687b      	ldr	r3, [r7, #4]
 8010308:	685b      	ldr	r3, [r3, #4]
 801030a:	4618      	mov	r0, r3
 801030c:	f7ff fefa 	bl	8010104 <LL_EXTI_EnableFallingTrig_32_63>
            break;
 8010310:	e01b      	b.n	801034a <LL_EXTI_Init+0x1d2>
          default:
            status |= 0x05u;
 8010312:	68fb      	ldr	r3, [r7, #12]
 8010314:	f043 0305 	orr.w	r3, r3, #5
 8010318:	60fb      	str	r3, [r7, #12]
            break;
 801031a:	bf00      	nop
 801031c:	e015      	b.n	801034a <LL_EXTI_Init+0x1d2>
  }
  /* DISABLE LineCommand */
  else
  {
    /* De-configure IT EXTI Lines in range from 0 to 31 */
    LL_EXTI_DisableIT_0_31(EXTI_InitStruct->Line_0_31);
 801031e:	687b      	ldr	r3, [r7, #4]
 8010320:	681b      	ldr	r3, [r3, #0]
 8010322:	4618      	mov	r0, r3
 8010324:	f7ff fe1c 	bl	800ff60 <LL_EXTI_DisableIT_0_31>
    /* De-configure Event EXTI Lines in range from 0 to 31 */
    LL_EXTI_DisableEvent_0_31(EXTI_InitStruct->Line_0_31);
 8010328:	687b      	ldr	r3, [r7, #4]
 801032a:	681b      	ldr	r3, [r3, #0]
 801032c:	4618      	mov	r0, r3
 801032e:	f7ff fe63 	bl	800fff8 <LL_EXTI_DisableEvent_0_31>
    /* De-configure IT EXTI Lines in range from 32 to 63 */
    LL_EXTI_DisableIT_32_63(EXTI_InitStruct->Line_32_63);
 8010332:	687b      	ldr	r3, [r7, #4]
 8010334:	685b      	ldr	r3, [r3, #4]
 8010336:	4618      	mov	r0, r3
 8010338:	f7ff fe26 	bl	800ff88 <LL_EXTI_DisableIT_32_63>
    /* De-configure Event EXTI Lines in range from 32 to 63 */
    LL_EXTI_DisableEvent_32_63(EXTI_InitStruct->Line_32_63);
 801033c:	687b      	ldr	r3, [r7, #4]
 801033e:	685b      	ldr	r3, [r3, #4]
 8010340:	4618      	mov	r0, r3
 8010342:	f7ff fe6d 	bl	8010020 <LL_EXTI_DisableEvent_32_63>
 8010346:	e000      	b.n	801034a <LL_EXTI_Init+0x1d2>
      }
 8010348:	bf00      	nop
  }

  return status;
 801034a:	68fb      	ldr	r3, [r7, #12]
}
 801034c:	4618      	mov	r0, r3
 801034e:	3710      	adds	r7, #16
 8010350:	46bd      	mov	sp, r7
 8010352:	bd80      	pop	{r7, pc}

08010354 <LL_GPIO_SetPinMode>:
{
 8010354:	b480      	push	{r7}
 8010356:	b089      	sub	sp, #36	; 0x24
 8010358:	af00      	add	r7, sp, #0
 801035a:	60f8      	str	r0, [r7, #12]
 801035c:	60b9      	str	r1, [r7, #8]
 801035e:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->MODER, (GPIO_MODER_MODE0 << (POSITION_VAL(Pin) * 2U)), (Mode << (POSITION_VAL(Pin) * 2U)));
 8010360:	68fb      	ldr	r3, [r7, #12]
 8010362:	681a      	ldr	r2, [r3, #0]
 8010364:	68bb      	ldr	r3, [r7, #8]
 8010366:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8010368:	697b      	ldr	r3, [r7, #20]
 801036a:	fa93 f3a3 	rbit	r3, r3
 801036e:	613b      	str	r3, [r7, #16]
  return result;
 8010370:	693b      	ldr	r3, [r7, #16]
 8010372:	fab3 f383 	clz	r3, r3
 8010376:	b2db      	uxtb	r3, r3
 8010378:	005b      	lsls	r3, r3, #1
 801037a:	2103      	movs	r1, #3
 801037c:	fa01 f303 	lsl.w	r3, r1, r3
 8010380:	43db      	mvns	r3, r3
 8010382:	401a      	ands	r2, r3
 8010384:	68bb      	ldr	r3, [r7, #8]
 8010386:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8010388:	69fb      	ldr	r3, [r7, #28]
 801038a:	fa93 f3a3 	rbit	r3, r3
 801038e:	61bb      	str	r3, [r7, #24]
  return result;
 8010390:	69bb      	ldr	r3, [r7, #24]
 8010392:	fab3 f383 	clz	r3, r3
 8010396:	b2db      	uxtb	r3, r3
 8010398:	005b      	lsls	r3, r3, #1
 801039a:	6879      	ldr	r1, [r7, #4]
 801039c:	fa01 f303 	lsl.w	r3, r1, r3
 80103a0:	431a      	orrs	r2, r3
 80103a2:	68fb      	ldr	r3, [r7, #12]
 80103a4:	601a      	str	r2, [r3, #0]
}
 80103a6:	bf00      	nop
 80103a8:	3724      	adds	r7, #36	; 0x24
 80103aa:	46bd      	mov	sp, r7
 80103ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80103b0:	4770      	bx	lr

080103b2 <LL_GPIO_SetPinOutputType>:
{
 80103b2:	b480      	push	{r7}
 80103b4:	b085      	sub	sp, #20
 80103b6:	af00      	add	r7, sp, #0
 80103b8:	60f8      	str	r0, [r7, #12]
 80103ba:	60b9      	str	r1, [r7, #8]
 80103bc:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->OTYPER, PinMask, (PinMask * OutputType));
 80103be:	68fb      	ldr	r3, [r7, #12]
 80103c0:	685a      	ldr	r2, [r3, #4]
 80103c2:	68bb      	ldr	r3, [r7, #8]
 80103c4:	43db      	mvns	r3, r3
 80103c6:	401a      	ands	r2, r3
 80103c8:	68bb      	ldr	r3, [r7, #8]
 80103ca:	6879      	ldr	r1, [r7, #4]
 80103cc:	fb01 f303 	mul.w	r3, r1, r3
 80103d0:	431a      	orrs	r2, r3
 80103d2:	68fb      	ldr	r3, [r7, #12]
 80103d4:	605a      	str	r2, [r3, #4]
}
 80103d6:	bf00      	nop
 80103d8:	3714      	adds	r7, #20
 80103da:	46bd      	mov	sp, r7
 80103dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80103e0:	4770      	bx	lr

080103e2 <LL_GPIO_SetPinSpeed>:
{
 80103e2:	b480      	push	{r7}
 80103e4:	b089      	sub	sp, #36	; 0x24
 80103e6:	af00      	add	r7, sp, #0
 80103e8:	60f8      	str	r0, [r7, #12]
 80103ea:	60b9      	str	r1, [r7, #8]
 80103ec:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->OSPEEDR, (GPIO_OSPEEDR_OSPEED0 << (POSITION_VAL(Pin) * 2U)),
 80103ee:	68fb      	ldr	r3, [r7, #12]
 80103f0:	689a      	ldr	r2, [r3, #8]
 80103f2:	68bb      	ldr	r3, [r7, #8]
 80103f4:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80103f6:	697b      	ldr	r3, [r7, #20]
 80103f8:	fa93 f3a3 	rbit	r3, r3
 80103fc:	613b      	str	r3, [r7, #16]
  return result;
 80103fe:	693b      	ldr	r3, [r7, #16]
 8010400:	fab3 f383 	clz	r3, r3
 8010404:	b2db      	uxtb	r3, r3
 8010406:	005b      	lsls	r3, r3, #1
 8010408:	2103      	movs	r1, #3
 801040a:	fa01 f303 	lsl.w	r3, r1, r3
 801040e:	43db      	mvns	r3, r3
 8010410:	401a      	ands	r2, r3
 8010412:	68bb      	ldr	r3, [r7, #8]
 8010414:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8010416:	69fb      	ldr	r3, [r7, #28]
 8010418:	fa93 f3a3 	rbit	r3, r3
 801041c:	61bb      	str	r3, [r7, #24]
  return result;
 801041e:	69bb      	ldr	r3, [r7, #24]
 8010420:	fab3 f383 	clz	r3, r3
 8010424:	b2db      	uxtb	r3, r3
 8010426:	005b      	lsls	r3, r3, #1
 8010428:	6879      	ldr	r1, [r7, #4]
 801042a:	fa01 f303 	lsl.w	r3, r1, r3
 801042e:	431a      	orrs	r2, r3
 8010430:	68fb      	ldr	r3, [r7, #12]
 8010432:	609a      	str	r2, [r3, #8]
}
 8010434:	bf00      	nop
 8010436:	3724      	adds	r7, #36	; 0x24
 8010438:	46bd      	mov	sp, r7
 801043a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801043e:	4770      	bx	lr

08010440 <LL_GPIO_SetPinPull>:
{
 8010440:	b480      	push	{r7}
 8010442:	b089      	sub	sp, #36	; 0x24
 8010444:	af00      	add	r7, sp, #0
 8010446:	60f8      	str	r0, [r7, #12]
 8010448:	60b9      	str	r1, [r7, #8]
 801044a:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->PUPDR, (GPIO_PUPDR_PUPD0 << (POSITION_VAL(Pin) * 2U)), (Pull << (POSITION_VAL(Pin) * 2U)));
 801044c:	68fb      	ldr	r3, [r7, #12]
 801044e:	68da      	ldr	r2, [r3, #12]
 8010450:	68bb      	ldr	r3, [r7, #8]
 8010452:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8010454:	697b      	ldr	r3, [r7, #20]
 8010456:	fa93 f3a3 	rbit	r3, r3
 801045a:	613b      	str	r3, [r7, #16]
  return result;
 801045c:	693b      	ldr	r3, [r7, #16]
 801045e:	fab3 f383 	clz	r3, r3
 8010462:	b2db      	uxtb	r3, r3
 8010464:	005b      	lsls	r3, r3, #1
 8010466:	2103      	movs	r1, #3
 8010468:	fa01 f303 	lsl.w	r3, r1, r3
 801046c:	43db      	mvns	r3, r3
 801046e:	401a      	ands	r2, r3
 8010470:	68bb      	ldr	r3, [r7, #8]
 8010472:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8010474:	69fb      	ldr	r3, [r7, #28]
 8010476:	fa93 f3a3 	rbit	r3, r3
 801047a:	61bb      	str	r3, [r7, #24]
  return result;
 801047c:	69bb      	ldr	r3, [r7, #24]
 801047e:	fab3 f383 	clz	r3, r3
 8010482:	b2db      	uxtb	r3, r3
 8010484:	005b      	lsls	r3, r3, #1
 8010486:	6879      	ldr	r1, [r7, #4]
 8010488:	fa01 f303 	lsl.w	r3, r1, r3
 801048c:	431a      	orrs	r2, r3
 801048e:	68fb      	ldr	r3, [r7, #12]
 8010490:	60da      	str	r2, [r3, #12]
}
 8010492:	bf00      	nop
 8010494:	3724      	adds	r7, #36	; 0x24
 8010496:	46bd      	mov	sp, r7
 8010498:	f85d 7b04 	ldr.w	r7, [sp], #4
 801049c:	4770      	bx	lr

0801049e <LL_GPIO_SetAFPin_0_7>:
{
 801049e:	b480      	push	{r7}
 80104a0:	b089      	sub	sp, #36	; 0x24
 80104a2:	af00      	add	r7, sp, #0
 80104a4:	60f8      	str	r0, [r7, #12]
 80104a6:	60b9      	str	r1, [r7, #8]
 80104a8:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->AFR[0], (GPIO_AFRL_AFSEL0 << (POSITION_VAL(Pin) * 4U)),
 80104aa:	68fb      	ldr	r3, [r7, #12]
 80104ac:	6a1a      	ldr	r2, [r3, #32]
 80104ae:	68bb      	ldr	r3, [r7, #8]
 80104b0:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80104b2:	697b      	ldr	r3, [r7, #20]
 80104b4:	fa93 f3a3 	rbit	r3, r3
 80104b8:	613b      	str	r3, [r7, #16]
  return result;
 80104ba:	693b      	ldr	r3, [r7, #16]
 80104bc:	fab3 f383 	clz	r3, r3
 80104c0:	b2db      	uxtb	r3, r3
 80104c2:	009b      	lsls	r3, r3, #2
 80104c4:	210f      	movs	r1, #15
 80104c6:	fa01 f303 	lsl.w	r3, r1, r3
 80104ca:	43db      	mvns	r3, r3
 80104cc:	401a      	ands	r2, r3
 80104ce:	68bb      	ldr	r3, [r7, #8]
 80104d0:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80104d2:	69fb      	ldr	r3, [r7, #28]
 80104d4:	fa93 f3a3 	rbit	r3, r3
 80104d8:	61bb      	str	r3, [r7, #24]
  return result;
 80104da:	69bb      	ldr	r3, [r7, #24]
 80104dc:	fab3 f383 	clz	r3, r3
 80104e0:	b2db      	uxtb	r3, r3
 80104e2:	009b      	lsls	r3, r3, #2
 80104e4:	6879      	ldr	r1, [r7, #4]
 80104e6:	fa01 f303 	lsl.w	r3, r1, r3
 80104ea:	431a      	orrs	r2, r3
 80104ec:	68fb      	ldr	r3, [r7, #12]
 80104ee:	621a      	str	r2, [r3, #32]
}
 80104f0:	bf00      	nop
 80104f2:	3724      	adds	r7, #36	; 0x24
 80104f4:	46bd      	mov	sp, r7
 80104f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80104fa:	4770      	bx	lr

080104fc <LL_GPIO_SetAFPin_8_15>:
{
 80104fc:	b480      	push	{r7}
 80104fe:	b089      	sub	sp, #36	; 0x24
 8010500:	af00      	add	r7, sp, #0
 8010502:	60f8      	str	r0, [r7, #12]
 8010504:	60b9      	str	r1, [r7, #8]
 8010506:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->AFR[1], (GPIO_AFRH_AFSEL8 << (POSITION_VAL(Pin >> 8U) * 4U)),
 8010508:	68fb      	ldr	r3, [r7, #12]
 801050a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 801050c:	68bb      	ldr	r3, [r7, #8]
 801050e:	0a1b      	lsrs	r3, r3, #8
 8010510:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8010512:	697b      	ldr	r3, [r7, #20]
 8010514:	fa93 f3a3 	rbit	r3, r3
 8010518:	613b      	str	r3, [r7, #16]
  return result;
 801051a:	693b      	ldr	r3, [r7, #16]
 801051c:	fab3 f383 	clz	r3, r3
 8010520:	b2db      	uxtb	r3, r3
 8010522:	009b      	lsls	r3, r3, #2
 8010524:	210f      	movs	r1, #15
 8010526:	fa01 f303 	lsl.w	r3, r1, r3
 801052a:	43db      	mvns	r3, r3
 801052c:	401a      	ands	r2, r3
 801052e:	68bb      	ldr	r3, [r7, #8]
 8010530:	0a1b      	lsrs	r3, r3, #8
 8010532:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8010534:	69fb      	ldr	r3, [r7, #28]
 8010536:	fa93 f3a3 	rbit	r3, r3
 801053a:	61bb      	str	r3, [r7, #24]
  return result;
 801053c:	69bb      	ldr	r3, [r7, #24]
 801053e:	fab3 f383 	clz	r3, r3
 8010542:	b2db      	uxtb	r3, r3
 8010544:	009b      	lsls	r3, r3, #2
 8010546:	6879      	ldr	r1, [r7, #4]
 8010548:	fa01 f303 	lsl.w	r3, r1, r3
 801054c:	431a      	orrs	r2, r3
 801054e:	68fb      	ldr	r3, [r7, #12]
 8010550:	625a      	str	r2, [r3, #36]	; 0x24
}
 8010552:	bf00      	nop
 8010554:	3724      	adds	r7, #36	; 0x24
 8010556:	46bd      	mov	sp, r7
 8010558:	f85d 7b04 	ldr.w	r7, [sp], #4
 801055c:	4770      	bx	lr

0801055e <LL_GPIO_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: GPIO registers are initialized according to GPIO_InitStruct content
  *          - ERROR:   Not applicable
  */
ErrorStatus LL_GPIO_Init(GPIO_TypeDef *GPIOx, LL_GPIO_InitTypeDef *GPIO_InitStruct)
{
 801055e:	b580      	push	{r7, lr}
 8010560:	b086      	sub	sp, #24
 8010562:	af00      	add	r7, sp, #0
 8010564:	6078      	str	r0, [r7, #4]
 8010566:	6039      	str	r1, [r7, #0]
  assert_param(IS_LL_GPIO_MODE(GPIO_InitStruct->Mode));
  assert_param(IS_LL_GPIO_PULL(GPIO_InitStruct->Pull));

  /* ------------------------- Configure the port pins ---------------- */
  /* Initialize  pinpos on first pin set */
  pinpos = POSITION_VAL(GPIO_InitStruct->Pin);
 8010568:	683b      	ldr	r3, [r7, #0]
 801056a:	681b      	ldr	r3, [r3, #0]
 801056c:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 801056e:	68fb      	ldr	r3, [r7, #12]
 8010570:	fa93 f3a3 	rbit	r3, r3
 8010574:	60bb      	str	r3, [r7, #8]
  return result;
 8010576:	68bb      	ldr	r3, [r7, #8]
 8010578:	fab3 f383 	clz	r3, r3
 801057c:	b2db      	uxtb	r3, r3
 801057e:	617b      	str	r3, [r7, #20]

  /* Configure the port pins */
  while (((GPIO_InitStruct->Pin) >> pinpos) != 0x00000000U)
 8010580:	e040      	b.n	8010604 <LL_GPIO_Init+0xa6>
  {
    /* Get current io position */
    currentpin = (GPIO_InitStruct->Pin) & (0x00000001UL << pinpos);
 8010582:	683b      	ldr	r3, [r7, #0]
 8010584:	681a      	ldr	r2, [r3, #0]
 8010586:	2101      	movs	r1, #1
 8010588:	697b      	ldr	r3, [r7, #20]
 801058a:	fa01 f303 	lsl.w	r3, r1, r3
 801058e:	4013      	ands	r3, r2
 8010590:	613b      	str	r3, [r7, #16]

    if (currentpin != 0x00u)
 8010592:	693b      	ldr	r3, [r7, #16]
 8010594:	2b00      	cmp	r3, #0
 8010596:	d032      	beq.n	80105fe <LL_GPIO_Init+0xa0>
    {
      /* Pin Mode configuration */
      LL_GPIO_SetPinMode(GPIOx, currentpin, GPIO_InitStruct->Mode);
 8010598:	683b      	ldr	r3, [r7, #0]
 801059a:	685b      	ldr	r3, [r3, #4]
 801059c:	461a      	mov	r2, r3
 801059e:	6939      	ldr	r1, [r7, #16]
 80105a0:	6878      	ldr	r0, [r7, #4]
 80105a2:	f7ff fed7 	bl	8010354 <LL_GPIO_SetPinMode>

      if ((GPIO_InitStruct->Mode == LL_GPIO_MODE_OUTPUT) || (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE))
 80105a6:	683b      	ldr	r3, [r7, #0]
 80105a8:	685b      	ldr	r3, [r3, #4]
 80105aa:	2b01      	cmp	r3, #1
 80105ac:	d003      	beq.n	80105b6 <LL_GPIO_Init+0x58>
 80105ae:	683b      	ldr	r3, [r7, #0]
 80105b0:	685b      	ldr	r3, [r3, #4]
 80105b2:	2b02      	cmp	r3, #2
 80105b4:	d106      	bne.n	80105c4 <LL_GPIO_Init+0x66>
      {
        /* Check Speed mode parameters */
        assert_param(IS_LL_GPIO_SPEED(GPIO_InitStruct->Speed));

        /* Speed mode configuration */
        LL_GPIO_SetPinSpeed(GPIOx, currentpin, GPIO_InitStruct->Speed);
 80105b6:	683b      	ldr	r3, [r7, #0]
 80105b8:	689b      	ldr	r3, [r3, #8]
 80105ba:	461a      	mov	r2, r3
 80105bc:	6939      	ldr	r1, [r7, #16]
 80105be:	6878      	ldr	r0, [r7, #4]
 80105c0:	f7ff ff0f 	bl	80103e2 <LL_GPIO_SetPinSpeed>
      }

      /* Pull-up Pull down resistor configuration*/
      LL_GPIO_SetPinPull(GPIOx, currentpin, GPIO_InitStruct->Pull);
 80105c4:	683b      	ldr	r3, [r7, #0]
 80105c6:	691b      	ldr	r3, [r3, #16]
 80105c8:	461a      	mov	r2, r3
 80105ca:	6939      	ldr	r1, [r7, #16]
 80105cc:	6878      	ldr	r0, [r7, #4]
 80105ce:	f7ff ff37 	bl	8010440 <LL_GPIO_SetPinPull>

      if (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE)
 80105d2:	683b      	ldr	r3, [r7, #0]
 80105d4:	685b      	ldr	r3, [r3, #4]
 80105d6:	2b02      	cmp	r3, #2
 80105d8:	d111      	bne.n	80105fe <LL_GPIO_Init+0xa0>
      {
        /* Check Alternate parameter */
        assert_param(IS_LL_GPIO_ALTERNATE(GPIO_InitStruct->Alternate));

        /* Speed mode configuration */
        if (currentpin < LL_GPIO_PIN_8)
 80105da:	693b      	ldr	r3, [r7, #16]
 80105dc:	2bff      	cmp	r3, #255	; 0xff
 80105de:	d807      	bhi.n	80105f0 <LL_GPIO_Init+0x92>
        {
          LL_GPIO_SetAFPin_0_7(GPIOx, currentpin, GPIO_InitStruct->Alternate);
 80105e0:	683b      	ldr	r3, [r7, #0]
 80105e2:	695b      	ldr	r3, [r3, #20]
 80105e4:	461a      	mov	r2, r3
 80105e6:	6939      	ldr	r1, [r7, #16]
 80105e8:	6878      	ldr	r0, [r7, #4]
 80105ea:	f7ff ff58 	bl	801049e <LL_GPIO_SetAFPin_0_7>
 80105ee:	e006      	b.n	80105fe <LL_GPIO_Init+0xa0>
        }
        else
        {
          LL_GPIO_SetAFPin_8_15(GPIOx, currentpin, GPIO_InitStruct->Alternate);
 80105f0:	683b      	ldr	r3, [r7, #0]
 80105f2:	695b      	ldr	r3, [r3, #20]
 80105f4:	461a      	mov	r2, r3
 80105f6:	6939      	ldr	r1, [r7, #16]
 80105f8:	6878      	ldr	r0, [r7, #4]
 80105fa:	f7ff ff7f 	bl	80104fc <LL_GPIO_SetAFPin_8_15>
        }
      }
    }
    pinpos++;
 80105fe:	697b      	ldr	r3, [r7, #20]
 8010600:	3301      	adds	r3, #1
 8010602:	617b      	str	r3, [r7, #20]
  while (((GPIO_InitStruct->Pin) >> pinpos) != 0x00000000U)
 8010604:	683b      	ldr	r3, [r7, #0]
 8010606:	681a      	ldr	r2, [r3, #0]
 8010608:	697b      	ldr	r3, [r7, #20]
 801060a:	fa22 f303 	lsr.w	r3, r2, r3
 801060e:	2b00      	cmp	r3, #0
 8010610:	d1b7      	bne.n	8010582 <LL_GPIO_Init+0x24>
  }

  if ((GPIO_InitStruct->Mode == LL_GPIO_MODE_OUTPUT) || (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE))
 8010612:	683b      	ldr	r3, [r7, #0]
 8010614:	685b      	ldr	r3, [r3, #4]
 8010616:	2b01      	cmp	r3, #1
 8010618:	d003      	beq.n	8010622 <LL_GPIO_Init+0xc4>
 801061a:	683b      	ldr	r3, [r7, #0]
 801061c:	685b      	ldr	r3, [r3, #4]
 801061e:	2b02      	cmp	r3, #2
 8010620:	d107      	bne.n	8010632 <LL_GPIO_Init+0xd4>
  {
    /* Check Output mode parameters */
    assert_param(IS_LL_GPIO_OUTPUT_TYPE(GPIO_InitStruct->OutputType));

    /* Output mode configuration*/
    LL_GPIO_SetPinOutputType(GPIOx, GPIO_InitStruct->Pin, GPIO_InitStruct->OutputType);
 8010622:	683b      	ldr	r3, [r7, #0]
 8010624:	6819      	ldr	r1, [r3, #0]
 8010626:	683b      	ldr	r3, [r7, #0]
 8010628:	68db      	ldr	r3, [r3, #12]
 801062a:	461a      	mov	r2, r3
 801062c:	6878      	ldr	r0, [r7, #4]
 801062e:	f7ff fec0 	bl	80103b2 <LL_GPIO_SetPinOutputType>

  }
  return (SUCCESS);
 8010632:	2300      	movs	r3, #0
}
 8010634:	4618      	mov	r0, r3
 8010636:	3718      	adds	r7, #24
 8010638:	46bd      	mov	sp, r7
 801063a:	bd80      	pop	{r7, pc}

0801063c <ILI9341_Draw_Wave>:

 extern uint16_t BURST_MAX_SIZE;


void ILI9341_Draw_Wave(uint16_t x, uint16_t y, uint8_t weight, uint16_t colour, uint8_t scale, uint32_t* data_table, uint16_t data_table_size)
{
 801063c:	b590      	push	{r4, r7, lr}
 801063e:	b085      	sub	sp, #20
 8010640:	af00      	add	r7, sp, #0
 8010642:	4604      	mov	r4, r0
 8010644:	4608      	mov	r0, r1
 8010646:	4611      	mov	r1, r2
 8010648:	461a      	mov	r2, r3
 801064a:	4623      	mov	r3, r4
 801064c:	80fb      	strh	r3, [r7, #6]
 801064e:	4603      	mov	r3, r0
 8010650:	80bb      	strh	r3, [r7, #4]
 8010652:	460b      	mov	r3, r1
 8010654:	70fb      	strb	r3, [r7, #3]
 8010656:	4613      	mov	r3, r2
 8010658:	803b      	strh	r3, [r7, #0]
	for(int w = 0; w < weight; w++ )
 801065a:	2300      	movs	r3, #0
 801065c:	60fb      	str	r3, [r7, #12]
 801065e:	e026      	b.n	80106ae <ILI9341_Draw_Wave+0x72>
	{
		for(int i = 0; i < data_table_size; i++)
 8010660:	2300      	movs	r3, #0
 8010662:	60bb      	str	r3, [r7, #8]
 8010664:	e01c      	b.n	80106a0 <ILI9341_Draw_Wave+0x64>
		{
			ILI9341_Draw_Pixel(	x + i,	(y + data_table[i] / scale) + w, colour);
 8010666:	68bb      	ldr	r3, [r7, #8]
 8010668:	b29a      	uxth	r2, r3
 801066a:	88fb      	ldrh	r3, [r7, #6]
 801066c:	4413      	add	r3, r2
 801066e:	b298      	uxth	r0, r3
 8010670:	68bb      	ldr	r3, [r7, #8]
 8010672:	009b      	lsls	r3, r3, #2
 8010674:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8010676:	4413      	add	r3, r2
 8010678:	681a      	ldr	r2, [r3, #0]
 801067a:	f897 3020 	ldrb.w	r3, [r7, #32]
 801067e:	fbb2 f3f3 	udiv	r3, r2, r3
 8010682:	b29a      	uxth	r2, r3
 8010684:	88bb      	ldrh	r3, [r7, #4]
 8010686:	4413      	add	r3, r2
 8010688:	b29a      	uxth	r2, r3
 801068a:	68fb      	ldr	r3, [r7, #12]
 801068c:	b29b      	uxth	r3, r3
 801068e:	4413      	add	r3, r2
 8010690:	b29b      	uxth	r3, r3
 8010692:	883a      	ldrh	r2, [r7, #0]
 8010694:	4619      	mov	r1, r3
 8010696:	f000 fc1f 	bl	8010ed8 <ILI9341_Draw_Pixel>
		for(int i = 0; i < data_table_size; i++)
 801069a:	68bb      	ldr	r3, [r7, #8]
 801069c:	3301      	adds	r3, #1
 801069e:	60bb      	str	r3, [r7, #8]
 80106a0:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 80106a2:	68ba      	ldr	r2, [r7, #8]
 80106a4:	429a      	cmp	r2, r3
 80106a6:	dbde      	blt.n	8010666 <ILI9341_Draw_Wave+0x2a>
	for(int w = 0; w < weight; w++ )
 80106a8:	68fb      	ldr	r3, [r7, #12]
 80106aa:	3301      	adds	r3, #1
 80106ac:	60fb      	str	r3, [r7, #12]
 80106ae:	78fb      	ldrb	r3, [r7, #3]
 80106b0:	68fa      	ldr	r2, [r7, #12]
 80106b2:	429a      	cmp	r2, r3
 80106b4:	dbd4      	blt.n	8010660 <ILI9341_Draw_Wave+0x24>

		}
	}

}
 80106b6:	bf00      	nop
 80106b8:	3714      	adds	r7, #20
 80106ba:	46bd      	mov	sp, r7
 80106bc:	bd90      	pop	{r4, r7, pc}

080106be <ILI9341_Draw_Bordered_Filled_Rectangle_Coord>:
 *
 *
 *
 */
void ILI9341_Draw_Bordered_Filled_Rectangle_Coord(uint16_t x, uint16_t y, uint16_t w, uint16_t h, uint16_t inner_colour, uint8_t border_weight, uint16_t border_colour)
{
 80106be:	b590      	push	{r4, r7, lr}
 80106c0:	b087      	sub	sp, #28
 80106c2:	af02      	add	r7, sp, #8
 80106c4:	4604      	mov	r4, r0
 80106c6:	4608      	mov	r0, r1
 80106c8:	4611      	mov	r1, r2
 80106ca:	461a      	mov	r2, r3
 80106cc:	4623      	mov	r3, r4
 80106ce:	80fb      	strh	r3, [r7, #6]
 80106d0:	4603      	mov	r3, r0
 80106d2:	80bb      	strh	r3, [r7, #4]
 80106d4:	460b      	mov	r3, r1
 80106d6:	807b      	strh	r3, [r7, #2]
 80106d8:	4613      	mov	r3, r2
 80106da:	803b      	strh	r3, [r7, #0]

	// Draw inwards (and shorter) for each level of border weight
	for(uint8_t b = 0; ; b++)
 80106dc:	2300      	movs	r3, #0
 80106de:	73fb      	strb	r3, [r7, #15]
	{


		if(b > border_weight)
 80106e0:	7bfa      	ldrb	r2, [r7, #15]
 80106e2:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 80106e6:	429a      	cmp	r2, r3
 80106e8:	d939      	bls.n	801075e <ILI9341_Draw_Bordered_Filled_Rectangle_Coord+0xa0>
		{

			// stop before the inner space reaches zero! (hard fault)
			if( ((y + b) == ((y + h) - b)) || ((x + b) == ((x + w) - b)) )
 80106ea:	88ba      	ldrh	r2, [r7, #4]
 80106ec:	7bfb      	ldrb	r3, [r7, #15]
 80106ee:	441a      	add	r2, r3
 80106f0:	88b9      	ldrh	r1, [r7, #4]
 80106f2:	883b      	ldrh	r3, [r7, #0]
 80106f4:	4419      	add	r1, r3
 80106f6:	7bfb      	ldrb	r3, [r7, #15]
 80106f8:	1acb      	subs	r3, r1, r3
 80106fa:	429a      	cmp	r2, r3
 80106fc:	f000 8089 	beq.w	8010812 <ILI9341_Draw_Bordered_Filled_Rectangle_Coord+0x154>
 8010700:	88fa      	ldrh	r2, [r7, #6]
 8010702:	7bfb      	ldrb	r3, [r7, #15]
 8010704:	441a      	add	r2, r3
 8010706:	88f9      	ldrh	r1, [r7, #6]
 8010708:	887b      	ldrh	r3, [r7, #2]
 801070a:	4419      	add	r1, r3
 801070c:	7bfb      	ldrb	r3, [r7, #15]
 801070e:	1acb      	subs	r3, r1, r3
 8010710:	429a      	cmp	r2, r3
 8010712:	d07e      	beq.n	8010812 <ILI9341_Draw_Bordered_Filled_Rectangle_Coord+0x154>
				// add final line?
				goto finish;
			}
			else
			{
				ILI9341_Draw_Rectangle(x + b, y + b, (w - (2*b)) + 1, (h - (2*b)) + 1, inner_colour, AREA_CHUNK);
 8010714:	7bfb      	ldrb	r3, [r7, #15]
 8010716:	b29a      	uxth	r2, r3
 8010718:	88fb      	ldrh	r3, [r7, #6]
 801071a:	4413      	add	r3, r2
 801071c:	b298      	uxth	r0, r3
 801071e:	7bfb      	ldrb	r3, [r7, #15]
 8010720:	b29a      	uxth	r2, r3
 8010722:	88bb      	ldrh	r3, [r7, #4]
 8010724:	4413      	add	r3, r2
 8010726:	b299      	uxth	r1, r3
 8010728:	7bfb      	ldrb	r3, [r7, #15]
 801072a:	b29b      	uxth	r3, r3
 801072c:	005b      	lsls	r3, r3, #1
 801072e:	b29b      	uxth	r3, r3
 8010730:	887a      	ldrh	r2, [r7, #2]
 8010732:	1ad3      	subs	r3, r2, r3
 8010734:	b29b      	uxth	r3, r3
 8010736:	3301      	adds	r3, #1
 8010738:	b29c      	uxth	r4, r3
 801073a:	7bfb      	ldrb	r3, [r7, #15]
 801073c:	b29b      	uxth	r3, r3
 801073e:	005b      	lsls	r3, r3, #1
 8010740:	b29b      	uxth	r3, r3
 8010742:	883a      	ldrh	r2, [r7, #0]
 8010744:	1ad3      	subs	r3, r2, r3
 8010746:	b29b      	uxth	r3, r3
 8010748:	3301      	adds	r3, #1
 801074a:	b29a      	uxth	r2, r3
 801074c:	2304      	movs	r3, #4
 801074e:	9301      	str	r3, [sp, #4]
 8010750:	8c3b      	ldrh	r3, [r7, #32]
 8010752:	9300      	str	r3, [sp, #0]
 8010754:	4613      	mov	r3, r2
 8010756:	4622      	mov	r2, r4
 8010758:	f000 fd18 	bl	801118c <ILI9341_Draw_Rectangle>
				goto finish;
 801075c:	e05a      	b.n	8010814 <ILI9341_Draw_Bordered_Filled_Rectangle_Coord+0x156>
			}
		}

		// Horizontal line - Top
		ILI9341_Draw_Horizontal_Line(	x + b,
 801075e:	7bfb      	ldrb	r3, [r7, #15]
 8010760:	b29a      	uxth	r2, r3
 8010762:	88fb      	ldrh	r3, [r7, #6]
 8010764:	4413      	add	r3, r2
 8010766:	b298      	uxth	r0, r3
 8010768:	7bfb      	ldrb	r3, [r7, #15]
 801076a:	b29a      	uxth	r2, r3
 801076c:	88bb      	ldrh	r3, [r7, #4]
 801076e:	4413      	add	r3, r2
 8010770:	b299      	uxth	r1, r3
										y + b,
										(w - b)+1,
 8010772:	7bfb      	ldrb	r3, [r7, #15]
 8010774:	b29b      	uxth	r3, r3
 8010776:	887a      	ldrh	r2, [r7, #2]
 8010778:	1ad3      	subs	r3, r2, r3
 801077a:	b29b      	uxth	r3, r3
		ILI9341_Draw_Horizontal_Line(	x + b,
 801077c:	3301      	adds	r3, #1
 801077e:	b29a      	uxth	r2, r3
 8010780:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8010782:	f000 fa6b 	bl	8010c5c <ILI9341_Draw_Horizontal_Line>
										border_colour);
		// Horizontal line - Bottom
		ILI9341_Draw_Horizontal_Line(	x + b,
 8010786:	7bfb      	ldrb	r3, [r7, #15]
 8010788:	b29a      	uxth	r2, r3
 801078a:	88fb      	ldrh	r3, [r7, #6]
 801078c:	4413      	add	r3, r2
 801078e:	b298      	uxth	r0, r3
										(y + h) - b,
 8010790:	88ba      	ldrh	r2, [r7, #4]
 8010792:	883b      	ldrh	r3, [r7, #0]
 8010794:	4413      	add	r3, r2
 8010796:	b29a      	uxth	r2, r3
		ILI9341_Draw_Horizontal_Line(	x + b,
 8010798:	7bfb      	ldrb	r3, [r7, #15]
 801079a:	b29b      	uxth	r3, r3
 801079c:	1ad3      	subs	r3, r2, r3
 801079e:	b299      	uxth	r1, r3
										(w - b)+1,
 80107a0:	7bfb      	ldrb	r3, [r7, #15]
 80107a2:	b29b      	uxth	r3, r3
 80107a4:	887a      	ldrh	r2, [r7, #2]
 80107a6:	1ad3      	subs	r3, r2, r3
 80107a8:	b29b      	uxth	r3, r3
		ILI9341_Draw_Horizontal_Line(	x + b,
 80107aa:	3301      	adds	r3, #1
 80107ac:	b29a      	uxth	r2, r3
 80107ae:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 80107b0:	f000 fa54 	bl	8010c5c <ILI9341_Draw_Horizontal_Line>
										border_colour);


		// Vertical line - left
		ILI9341_Draw_Vertical_Line(		x + b,
 80107b4:	7bfb      	ldrb	r3, [r7, #15]
 80107b6:	b29a      	uxth	r2, r3
 80107b8:	88fb      	ldrh	r3, [r7, #6]
 80107ba:	4413      	add	r3, r2
 80107bc:	b298      	uxth	r0, r3
 80107be:	7bfb      	ldrb	r3, [r7, #15]
 80107c0:	b29a      	uxth	r2, r3
 80107c2:	88bb      	ldrh	r3, [r7, #4]
 80107c4:	4413      	add	r3, r2
 80107c6:	b299      	uxth	r1, r3
 80107c8:	7bfb      	ldrb	r3, [r7, #15]
 80107ca:	b29b      	uxth	r3, r3
 80107cc:	005b      	lsls	r3, r3, #1
 80107ce:	b29b      	uxth	r3, r3
 80107d0:	883a      	ldrh	r2, [r7, #0]
 80107d2:	1ad3      	subs	r3, r2, r3
 80107d4:	b29a      	uxth	r2, r3
 80107d6:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 80107d8:	f000 faa4 	bl	8010d24 <ILI9341_Draw_Vertical_Line>
										y + b,
										h - (2*b),
										border_colour);
		// Vertical line - right
		ILI9341_Draw_Vertical_Line(		((x + w)) - (b),
 80107dc:	88fa      	ldrh	r2, [r7, #6]
 80107de:	887b      	ldrh	r3, [r7, #2]
 80107e0:	4413      	add	r3, r2
 80107e2:	b29a      	uxth	r2, r3
 80107e4:	7bfb      	ldrb	r3, [r7, #15]
 80107e6:	b29b      	uxth	r3, r3
 80107e8:	1ad3      	subs	r3, r2, r3
 80107ea:	b298      	uxth	r0, r3
 80107ec:	7bfb      	ldrb	r3, [r7, #15]
 80107ee:	b29a      	uxth	r2, r3
 80107f0:	88bb      	ldrh	r3, [r7, #4]
 80107f2:	4413      	add	r3, r2
 80107f4:	b299      	uxth	r1, r3
 80107f6:	7bfb      	ldrb	r3, [r7, #15]
 80107f8:	b29b      	uxth	r3, r3
 80107fa:	005b      	lsls	r3, r3, #1
 80107fc:	b29b      	uxth	r3, r3
 80107fe:	883a      	ldrh	r2, [r7, #0]
 8010800:	1ad3      	subs	r3, r2, r3
 8010802:	b29a      	uxth	r2, r3
 8010804:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8010806:	f000 fa8d 	bl	8010d24 <ILI9341_Draw_Vertical_Line>
	for(uint8_t b = 0; ; b++)
 801080a:	7bfb      	ldrb	r3, [r7, #15]
 801080c:	3301      	adds	r3, #1
 801080e:	73fb      	strb	r3, [r7, #15]
		if(b > border_weight)
 8010810:	e766      	b.n	80106e0 <ILI9341_Draw_Bordered_Filled_Rectangle_Coord+0x22>
										h - (2*b),
										border_colour);

	}

	finish:
 8010812:	bf00      	nop
	// done
	return;
 8010814:	bf00      	nop
}
 8010816:	3714      	adds	r7, #20
 8010818:	46bd      	mov	sp, r7
 801081a:	bd90      	pop	{r4, r7, pc}

0801081c <ILI9341_Draw_Char>:
 *	@retval None
 *
 */

void ILI9341_Draw_Char(char character, uint16_t x, uint16_t y, uint16_t colour, uint16_t size, uint16_t bgcolour)
{
 801081c:	b590      	push	{r4, r7, lr}
 801081e:	b089      	sub	sp, #36	; 0x24
 8010820:	af02      	add	r7, sp, #8
 8010822:	4604      	mov	r4, r0
 8010824:	4608      	mov	r0, r1
 8010826:	4611      	mov	r1, r2
 8010828:	461a      	mov	r2, r3
 801082a:	4623      	mov	r3, r4
 801082c:	71fb      	strb	r3, [r7, #7]
 801082e:	4603      	mov	r3, r0
 8010830:	80bb      	strh	r3, [r7, #4]
 8010832:	460b      	mov	r3, r1
 8010834:	807b      	strh	r3, [r7, #2]
 8010836:	4613      	mov	r3, r2
 8010838:	803b      	strh	r3, [r7, #0]
    uint8_t 	i,j;
		



	function_char = character;
 801083a:	79fb      	ldrb	r3, [r7, #7]
 801083c:	75fb      	strb	r3, [r7, #23]
		
    if (function_char < ' ')
 801083e:	7dfb      	ldrb	r3, [r7, #23]
 8010840:	2b1f      	cmp	r3, #31
 8010842:	d802      	bhi.n	801084a <ILI9341_Draw_Char+0x2e>
    {
        character = 0;
 8010844:	2300      	movs	r3, #0
 8010846:	71fb      	strb	r3, [r7, #7]
 8010848:	e002      	b.n	8010850 <ILI9341_Draw_Char+0x34>
    }
    else
    {
    	function_char -= 32;
 801084a:	7dfb      	ldrb	r3, [r7, #23]
 801084c:	3b20      	subs	r3, #32
 801084e:	75fb      	strb	r3, [r7, #23]
	}
   	
	char temp[CHAR_WIDTH];

	for(uint8_t k = 0; k<CHAR_WIDTH; k++)
 8010850:	2300      	movs	r3, #0
 8010852:	753b      	strb	r3, [r7, #20]
 8010854:	e012      	b.n	801087c <ILI9341_Draw_Char+0x60>
	{
		temp[k] = font[function_char][k];
 8010856:	7dfa      	ldrb	r2, [r7, #23]
 8010858:	7d38      	ldrb	r0, [r7, #20]
 801085a:	7d39      	ldrb	r1, [r7, #20]
 801085c:	4c48      	ldr	r4, [pc, #288]	; (8010980 <ILI9341_Draw_Char+0x164>)
 801085e:	4613      	mov	r3, r2
 8010860:	005b      	lsls	r3, r3, #1
 8010862:	4413      	add	r3, r2
 8010864:	005b      	lsls	r3, r3, #1
 8010866:	4423      	add	r3, r4
 8010868:	4403      	add	r3, r0
 801086a:	781a      	ldrb	r2, [r3, #0]
 801086c:	f107 0318 	add.w	r3, r7, #24
 8010870:	440b      	add	r3, r1
 8010872:	f803 2c0c 	strb.w	r2, [r3, #-12]
	for(uint8_t k = 0; k<CHAR_WIDTH; k++)
 8010876:	7d3b      	ldrb	r3, [r7, #20]
 8010878:	3301      	adds	r3, #1
 801087a:	753b      	strb	r3, [r7, #20]
 801087c:	7d3b      	ldrb	r3, [r7, #20]
 801087e:	2b05      	cmp	r3, #5
 8010880:	d9e9      	bls.n	8010856 <ILI9341_Draw_Char+0x3a>
	}
		
    // Draw pixels
	//ILI9341_Draw_Rectangle(x, Y, CHAR_WIDTH*size, CHAR_HEIGHT*size, bgcolour);
    for (j=0; j<CHAR_WIDTH; j++)
 8010882:	2300      	movs	r3, #0
 8010884:	757b      	strb	r3, [r7, #21]
 8010886:	e074      	b.n	8010972 <ILI9341_Draw_Char+0x156>
    {
        for (i=0; i<CHAR_HEIGHT; i++)
 8010888:	2300      	movs	r3, #0
 801088a:	75bb      	strb	r3, [r7, #22]
 801088c:	e06b      	b.n	8010966 <ILI9341_Draw_Char+0x14a>
        {
            if (temp[j] & (1<<i))
 801088e:	7d7b      	ldrb	r3, [r7, #21]
 8010890:	f107 0218 	add.w	r2, r7, #24
 8010894:	4413      	add	r3, r2
 8010896:	f813 3c0c 	ldrb.w	r3, [r3, #-12]
 801089a:	461a      	mov	r2, r3
 801089c:	7dbb      	ldrb	r3, [r7, #22]
 801089e:	fa42 f303 	asr.w	r3, r2, r3
 80108a2:	f003 0301 	and.w	r3, r3, #1
 80108a6:	2b00      	cmp	r3, #0
 80108a8:	d02d      	beq.n	8010906 <ILI9341_Draw_Char+0xea>
            {
            	if(size == 1)
 80108aa:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 80108ac:	2b01      	cmp	r3, #1
 80108ae:	d10e      	bne.n	80108ce <ILI9341_Draw_Char+0xb2>
				{
            		ILI9341_Draw_Pixel(x+j, y+i, colour);
 80108b0:	7d7b      	ldrb	r3, [r7, #21]
 80108b2:	b29a      	uxth	r2, r3
 80108b4:	88bb      	ldrh	r3, [r7, #4]
 80108b6:	4413      	add	r3, r2
 80108b8:	b298      	uxth	r0, r3
 80108ba:	7dbb      	ldrb	r3, [r7, #22]
 80108bc:	b29a      	uxth	r2, r3
 80108be:	887b      	ldrh	r3, [r7, #2]
 80108c0:	4413      	add	r3, r2
 80108c2:	b29b      	uxth	r3, r3
 80108c4:	883a      	ldrh	r2, [r7, #0]
 80108c6:	4619      	mov	r1, r3
 80108c8:	f000 fb06 	bl	8010ed8 <ILI9341_Draw_Pixel>
 80108cc:	e048      	b.n	8010960 <ILI9341_Draw_Char+0x144>
				}
				else
				{
					ILI9341_Draw_Rectangle(x+(j*size), y+(i*size), size, size, colour, TEXT_CHUNK);
 80108ce:	7d7b      	ldrb	r3, [r7, #21]
 80108d0:	b29b      	uxth	r3, r3
 80108d2:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 80108d4:	fb12 f303 	smulbb	r3, r2, r3
 80108d8:	b29a      	uxth	r2, r3
 80108da:	88bb      	ldrh	r3, [r7, #4]
 80108dc:	4413      	add	r3, r2
 80108de:	b298      	uxth	r0, r3
 80108e0:	7dbb      	ldrb	r3, [r7, #22]
 80108e2:	b29b      	uxth	r3, r3
 80108e4:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 80108e6:	fb12 f303 	smulbb	r3, r2, r3
 80108ea:	b29a      	uxth	r2, r3
 80108ec:	887b      	ldrh	r3, [r7, #2]
 80108ee:	4413      	add	r3, r2
 80108f0:	b299      	uxth	r1, r3
 80108f2:	8d3c      	ldrh	r4, [r7, #40]	; 0x28
 80108f4:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 80108f6:	2301      	movs	r3, #1
 80108f8:	9301      	str	r3, [sp, #4]
 80108fa:	883b      	ldrh	r3, [r7, #0]
 80108fc:	9300      	str	r3, [sp, #0]
 80108fe:	4623      	mov	r3, r4
 8010900:	f000 fc44 	bl	801118c <ILI9341_Draw_Rectangle>
 8010904:	e02c      	b.n	8010960 <ILI9341_Draw_Char+0x144>
				}
            }
            else
            {
               	if(size == 1)
 8010906:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8010908:	2b01      	cmp	r3, #1
 801090a:	d10e      	bne.n	801092a <ILI9341_Draw_Char+0x10e>
				{
					ILI9341_Draw_Pixel(x+j, y+i, bgcolour);
 801090c:	7d7b      	ldrb	r3, [r7, #21]
 801090e:	b29a      	uxth	r2, r3
 8010910:	88bb      	ldrh	r3, [r7, #4]
 8010912:	4413      	add	r3, r2
 8010914:	b298      	uxth	r0, r3
 8010916:	7dbb      	ldrb	r3, [r7, #22]
 8010918:	b29a      	uxth	r2, r3
 801091a:	887b      	ldrh	r3, [r7, #2]
 801091c:	4413      	add	r3, r2
 801091e:	b29b      	uxth	r3, r3
 8010920:	8dba      	ldrh	r2, [r7, #44]	; 0x2c
 8010922:	4619      	mov	r1, r3
 8010924:	f000 fad8 	bl	8010ed8 <ILI9341_Draw_Pixel>
 8010928:	e01a      	b.n	8010960 <ILI9341_Draw_Char+0x144>
				}
				else
				{
					ILI9341_Draw_Rectangle(x+(j*size), y+(i*size), size, size, bgcolour, TEXT_CHUNK);
 801092a:	7d7b      	ldrb	r3, [r7, #21]
 801092c:	b29b      	uxth	r3, r3
 801092e:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 8010930:	fb12 f303 	smulbb	r3, r2, r3
 8010934:	b29a      	uxth	r2, r3
 8010936:	88bb      	ldrh	r3, [r7, #4]
 8010938:	4413      	add	r3, r2
 801093a:	b298      	uxth	r0, r3
 801093c:	7dbb      	ldrb	r3, [r7, #22]
 801093e:	b29b      	uxth	r3, r3
 8010940:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 8010942:	fb12 f303 	smulbb	r3, r2, r3
 8010946:	b29a      	uxth	r2, r3
 8010948:	887b      	ldrh	r3, [r7, #2]
 801094a:	4413      	add	r3, r2
 801094c:	b299      	uxth	r1, r3
 801094e:	8d3c      	ldrh	r4, [r7, #40]	; 0x28
 8010950:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 8010952:	2301      	movs	r3, #1
 8010954:	9301      	str	r3, [sp, #4]
 8010956:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8010958:	9300      	str	r3, [sp, #0]
 801095a:	4623      	mov	r3, r4
 801095c:	f000 fc16 	bl	801118c <ILI9341_Draw_Rectangle>
        for (i=0; i<CHAR_HEIGHT; i++)
 8010960:	7dbb      	ldrb	r3, [r7, #22]
 8010962:	3301      	adds	r3, #1
 8010964:	75bb      	strb	r3, [r7, #22]
 8010966:	7dbb      	ldrb	r3, [r7, #22]
 8010968:	2b07      	cmp	r3, #7
 801096a:	d990      	bls.n	801088e <ILI9341_Draw_Char+0x72>
    for (j=0; j<CHAR_WIDTH; j++)
 801096c:	7d7b      	ldrb	r3, [r7, #21]
 801096e:	3301      	adds	r3, #1
 8010970:	757b      	strb	r3, [r7, #21]
 8010972:	7d7b      	ldrb	r3, [r7, #21]
 8010974:	2b05      	cmp	r3, #5
 8010976:	d987      	bls.n	8010888 <ILI9341_Draw_Char+0x6c>
				}
            }
        }
    }
}
 8010978:	bf00      	nop
 801097a:	371c      	adds	r7, #28
 801097c:	46bd      	mov	sp, r7
 801097e:	bd90      	pop	{r4, r7, pc}
 8010980:	0801673c 	.word	0x0801673c

08010984 <ILI9341_Draw_Text>:
 *	@param None
 *	@retval None
 *
 */
void ILI9341_Draw_Text(const char* Text, uint16_t x, uint16_t y, uint16_t colour, uint16_t size, uint16_t bgcolour)
{
 8010984:	b590      	push	{r4, r7, lr}
 8010986:	b087      	sub	sp, #28
 8010988:	af02      	add	r7, sp, #8
 801098a:	60f8      	str	r0, [r7, #12]
 801098c:	4608      	mov	r0, r1
 801098e:	4611      	mov	r1, r2
 8010990:	461a      	mov	r2, r3
 8010992:	4603      	mov	r3, r0
 8010994:	817b      	strh	r3, [r7, #10]
 8010996:	460b      	mov	r3, r1
 8010998:	813b      	strh	r3, [r7, #8]
 801099a:	4613      	mov	r3, r2
 801099c:	80fb      	strh	r3, [r7, #6]
	ILI9341_Draw_Vertical_Line(x-1, y, CHAR_HEIGHT*size, bgcolour);
 801099e:	897b      	ldrh	r3, [r7, #10]
 80109a0:	3b01      	subs	r3, #1
 80109a2:	b298      	uxth	r0, r3
 80109a4:	8c3b      	ldrh	r3, [r7, #32]
 80109a6:	00db      	lsls	r3, r3, #3
 80109a8:	b29a      	uxth	r2, r3
 80109aa:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80109ac:	8939      	ldrh	r1, [r7, #8]
 80109ae:	f000 f9b9 	bl	8010d24 <ILI9341_Draw_Vertical_Line>
    ILI9341_Draw_Vertical_Line(x-2, y, CHAR_HEIGHT*size, bgcolour);
 80109b2:	897b      	ldrh	r3, [r7, #10]
 80109b4:	3b02      	subs	r3, #2
 80109b6:	b298      	uxth	r0, r3
 80109b8:	8c3b      	ldrh	r3, [r7, #32]
 80109ba:	00db      	lsls	r3, r3, #3
 80109bc:	b29a      	uxth	r2, r3
 80109be:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80109c0:	8939      	ldrh	r1, [r7, #8]
 80109c2:	f000 f9af 	bl	8010d24 <ILI9341_Draw_Vertical_Line>

    while (*Text) {
 80109c6:	e016      	b.n	80109f6 <ILI9341_Draw_Text+0x72>
        ILI9341_Draw_Char(*Text++, x, y, colour, size, bgcolour);
 80109c8:	68fb      	ldr	r3, [r7, #12]
 80109ca:	1c5a      	adds	r2, r3, #1
 80109cc:	60fa      	str	r2, [r7, #12]
 80109ce:	7818      	ldrb	r0, [r3, #0]
 80109d0:	88fc      	ldrh	r4, [r7, #6]
 80109d2:	893a      	ldrh	r2, [r7, #8]
 80109d4:	8979      	ldrh	r1, [r7, #10]
 80109d6:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80109d8:	9301      	str	r3, [sp, #4]
 80109da:	8c3b      	ldrh	r3, [r7, #32]
 80109dc:	9300      	str	r3, [sp, #0]
 80109de:	4623      	mov	r3, r4
 80109e0:	f7ff ff1c 	bl	801081c <ILI9341_Draw_Char>
        x += CHAR_WIDTH*size;
 80109e4:	8c3b      	ldrh	r3, [r7, #32]
 80109e6:	461a      	mov	r2, r3
 80109e8:	0052      	lsls	r2, r2, #1
 80109ea:	4413      	add	r3, r2
 80109ec:	005b      	lsls	r3, r3, #1
 80109ee:	b29a      	uxth	r2, r3
 80109f0:	897b      	ldrh	r3, [r7, #10]
 80109f2:	4413      	add	r3, r2
 80109f4:	817b      	strh	r3, [r7, #10]
    while (*Text) {
 80109f6:	68fb      	ldr	r3, [r7, #12]
 80109f8:	781b      	ldrb	r3, [r3, #0]
 80109fa:	2b00      	cmp	r3, #0
 80109fc:	d1e4      	bne.n	80109c8 <ILI9341_Draw_Text+0x44>
    }


}
 80109fe:	bf00      	nop
 8010a00:	3714      	adds	r7, #20
 8010a02:	46bd      	mov	sp, r7
 8010a04:	bd90      	pop	{r4, r7, pc}

08010a06 <ILI9341_Init>:
 *
 * Initialize LCD display
 *
 */
void ILI9341_Init(void)
{
 8010a06:	b580      	push	{r7, lr}
 8010a08:	af00      	add	r7, sp, #0

	_LCD_Enable();
 8010a0a:	f000 fca3 	bl	8011354 <_LCD_Enable>
	ILI9341_SPI_Init();
 8010a0e:	f000 f907 	bl	8010c20 <ILI9341_SPI_Init>
	_LCD_Reset();
 8010a12:	f000 fcaf 	bl	8011374 <_LCD_Reset>

	//SOFTWARE RESET
	_LCD_SendCommand(0x01);
 8010a16:	2001      	movs	r0, #1
 8010a18:	f000 fd7a 	bl	8011510 <_LCD_SendCommand>
	HAL_Delay(2000);
 8010a1c:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8010a20:	f7f8 fb02 	bl	8009028 <HAL_Delay>

	//POWER CONTROL A
	_LCD_SendCommand(0xCB);
 8010a24:	20cb      	movs	r0, #203	; 0xcb
 8010a26:	f000 fd73 	bl	8011510 <_LCD_SendCommand>
	_LCD_SendData(0x39);
 8010a2a:	2039      	movs	r0, #57	; 0x39
 8010a2c:	f000 fda2 	bl	8011574 <_LCD_SendData>
	_LCD_SendData(0x2C);
 8010a30:	202c      	movs	r0, #44	; 0x2c
 8010a32:	f000 fd9f 	bl	8011574 <_LCD_SendData>
	_LCD_SendData(0x00);
 8010a36:	2000      	movs	r0, #0
 8010a38:	f000 fd9c 	bl	8011574 <_LCD_SendData>
	_LCD_SendData(0x34);
 8010a3c:	2034      	movs	r0, #52	; 0x34
 8010a3e:	f000 fd99 	bl	8011574 <_LCD_SendData>
	_LCD_SendData(0x02);
 8010a42:	2002      	movs	r0, #2
 8010a44:	f000 fd96 	bl	8011574 <_LCD_SendData>

	//POWER CONTROL B
	_LCD_SendCommand(0xCF);
 8010a48:	20cf      	movs	r0, #207	; 0xcf
 8010a4a:	f000 fd61 	bl	8011510 <_LCD_SendCommand>
	_LCD_SendData(0x00);
 8010a4e:	2000      	movs	r0, #0
 8010a50:	f000 fd90 	bl	8011574 <_LCD_SendData>
	_LCD_SendData(0xC1);
 8010a54:	20c1      	movs	r0, #193	; 0xc1
 8010a56:	f000 fd8d 	bl	8011574 <_LCD_SendData>
	_LCD_SendData(0x30);
 8010a5a:	2030      	movs	r0, #48	; 0x30
 8010a5c:	f000 fd8a 	bl	8011574 <_LCD_SendData>

	//DRIVER TIMING CONTROL A
	_LCD_SendCommand(0xE8);
 8010a60:	20e8      	movs	r0, #232	; 0xe8
 8010a62:	f000 fd55 	bl	8011510 <_LCD_SendCommand>
	_LCD_SendData(0x85);
 8010a66:	2085      	movs	r0, #133	; 0x85
 8010a68:	f000 fd84 	bl	8011574 <_LCD_SendData>
	_LCD_SendData(0x00);
 8010a6c:	2000      	movs	r0, #0
 8010a6e:	f000 fd81 	bl	8011574 <_LCD_SendData>
	_LCD_SendData(0x78);
 8010a72:	2078      	movs	r0, #120	; 0x78
 8010a74:	f000 fd7e 	bl	8011574 <_LCD_SendData>

	//DRIVER TIMING CONTROL B
	_LCD_SendCommand(0xEA);
 8010a78:	20ea      	movs	r0, #234	; 0xea
 8010a7a:	f000 fd49 	bl	8011510 <_LCD_SendCommand>
	_LCD_SendData(0x00);
 8010a7e:	2000      	movs	r0, #0
 8010a80:	f000 fd78 	bl	8011574 <_LCD_SendData>
	_LCD_SendData(0x00);
 8010a84:	2000      	movs	r0, #0
 8010a86:	f000 fd75 	bl	8011574 <_LCD_SendData>

	//POWER ON SEQUENCE CONTROL
	_LCD_SendCommand(0xED);
 8010a8a:	20ed      	movs	r0, #237	; 0xed
 8010a8c:	f000 fd40 	bl	8011510 <_LCD_SendCommand>
	_LCD_SendData(0x64);
 8010a90:	2064      	movs	r0, #100	; 0x64
 8010a92:	f000 fd6f 	bl	8011574 <_LCD_SendData>
	_LCD_SendData(0x03);
 8010a96:	2003      	movs	r0, #3
 8010a98:	f000 fd6c 	bl	8011574 <_LCD_SendData>
	_LCD_SendData(0x12);
 8010a9c:	2012      	movs	r0, #18
 8010a9e:	f000 fd69 	bl	8011574 <_LCD_SendData>
	_LCD_SendData(0x81);
 8010aa2:	2081      	movs	r0, #129	; 0x81
 8010aa4:	f000 fd66 	bl	8011574 <_LCD_SendData>

	//PUMP RATIO CONTROL
	_LCD_SendCommand(0xF7);
 8010aa8:	20f7      	movs	r0, #247	; 0xf7
 8010aaa:	f000 fd31 	bl	8011510 <_LCD_SendCommand>
	_LCD_SendData(0x20);
 8010aae:	2020      	movs	r0, #32
 8010ab0:	f000 fd60 	bl	8011574 <_LCD_SendData>

	//POWER CONTROL,VRH[5:0]
	_LCD_SendCommand(0xC0);
 8010ab4:	20c0      	movs	r0, #192	; 0xc0
 8010ab6:	f000 fd2b 	bl	8011510 <_LCD_SendCommand>
	_LCD_SendData(0x23);
 8010aba:	2023      	movs	r0, #35	; 0x23
 8010abc:	f000 fd5a 	bl	8011574 <_LCD_SendData>

	//POWER CONTROL,SAP[2:0];BT[3:0]
	_LCD_SendCommand(0xC1);
 8010ac0:	20c1      	movs	r0, #193	; 0xc1
 8010ac2:	f000 fd25 	bl	8011510 <_LCD_SendCommand>
	_LCD_SendData(0x10);
 8010ac6:	2010      	movs	r0, #16
 8010ac8:	f000 fd54 	bl	8011574 <_LCD_SendData>

	//VCM CONTROL
	_LCD_SendCommand(0xC5);
 8010acc:	20c5      	movs	r0, #197	; 0xc5
 8010ace:	f000 fd1f 	bl	8011510 <_LCD_SendCommand>
	_LCD_SendData(0x3E);
 8010ad2:	203e      	movs	r0, #62	; 0x3e
 8010ad4:	f000 fd4e 	bl	8011574 <_LCD_SendData>
	_LCD_SendData(0x28);
 8010ad8:	2028      	movs	r0, #40	; 0x28
 8010ada:	f000 fd4b 	bl	8011574 <_LCD_SendData>

	//VCM CONTROL 2
	_LCD_SendCommand(0xC7);
 8010ade:	20c7      	movs	r0, #199	; 0xc7
 8010ae0:	f000 fd16 	bl	8011510 <_LCD_SendCommand>
	_LCD_SendData(0x86);
 8010ae4:	2086      	movs	r0, #134	; 0x86
 8010ae6:	f000 fd45 	bl	8011574 <_LCD_SendData>

	//MEMORY ACCESS CONTROL
	_LCD_SendCommand(0x36);
 8010aea:	2036      	movs	r0, #54	; 0x36
 8010aec:	f000 fd10 	bl	8011510 <_LCD_SendCommand>
	_LCD_SendData(0x48);
 8010af0:	2048      	movs	r0, #72	; 0x48
 8010af2:	f000 fd3f 	bl	8011574 <_LCD_SendData>


	//PIXEL FORMAT
	_LCD_SendCommand(0x3A);
 8010af6:	203a      	movs	r0, #58	; 0x3a
 8010af8:	f000 fd0a 	bl	8011510 <_LCD_SendCommand>
	_LCD_SendData(0x55);
 8010afc:	2055      	movs	r0, #85	; 0x55
 8010afe:	f000 fd39 	bl	8011574 <_LCD_SendData>

	//FRAME RATIO CONTROL, STANDARD RGB COLOR
	_LCD_SendCommand(0xB1);
 8010b02:	20b1      	movs	r0, #177	; 0xb1
 8010b04:	f000 fd04 	bl	8011510 <_LCD_SendCommand>
	_LCD_SendData(0x00);
 8010b08:	2000      	movs	r0, #0
 8010b0a:	f000 fd33 	bl	8011574 <_LCD_SendData>
	_LCD_SendData(0x18);
 8010b0e:	2018      	movs	r0, #24
 8010b10:	f000 fd30 	bl	8011574 <_LCD_SendData>

	//DISPLAY FUNCTION CONTROL
	_LCD_SendCommand(0xB6);
 8010b14:	20b6      	movs	r0, #182	; 0xb6
 8010b16:	f000 fcfb 	bl	8011510 <_LCD_SendCommand>
	_LCD_SendData(0x08);
 8010b1a:	2008      	movs	r0, #8
 8010b1c:	f000 fd2a 	bl	8011574 <_LCD_SendData>
	_LCD_SendData(0x82);
 8010b20:	2082      	movs	r0, #130	; 0x82
 8010b22:	f000 fd27 	bl	8011574 <_LCD_SendData>
	_LCD_SendData(0x27);
 8010b26:	2027      	movs	r0, #39	; 0x27
 8010b28:	f000 fd24 	bl	8011574 <_LCD_SendData>


	//3GAMMA FUNCTION DISABLE
	_LCD_SendCommand(0xF2);
 8010b2c:	20f2      	movs	r0, #242	; 0xf2
 8010b2e:	f000 fcef 	bl	8011510 <_LCD_SendCommand>
	_LCD_SendData(0x00);
 8010b32:	2000      	movs	r0, #0
 8010b34:	f000 fd1e 	bl	8011574 <_LCD_SendData>

	//GAMMA CURVE SELECTED
	_LCD_SendCommand(0x26);
 8010b38:	2026      	movs	r0, #38	; 0x26
 8010b3a:	f000 fce9 	bl	8011510 <_LCD_SendCommand>
	_LCD_SendData(0x01);
 8010b3e:	2001      	movs	r0, #1
 8010b40:	f000 fd18 	bl	8011574 <_LCD_SendData>

	//POSITIVE GAMMA CORRECTION
	_LCD_SendCommand(0xE0);
 8010b44:	20e0      	movs	r0, #224	; 0xe0
 8010b46:	f000 fce3 	bl	8011510 <_LCD_SendCommand>
	_LCD_SendData(0x0F);
 8010b4a:	200f      	movs	r0, #15
 8010b4c:	f000 fd12 	bl	8011574 <_LCD_SendData>
	_LCD_SendData(0x31);
 8010b50:	2031      	movs	r0, #49	; 0x31
 8010b52:	f000 fd0f 	bl	8011574 <_LCD_SendData>
	_LCD_SendData(0x2B);
 8010b56:	202b      	movs	r0, #43	; 0x2b
 8010b58:	f000 fd0c 	bl	8011574 <_LCD_SendData>
	_LCD_SendData(0x0C);
 8010b5c:	200c      	movs	r0, #12
 8010b5e:	f000 fd09 	bl	8011574 <_LCD_SendData>
	_LCD_SendData(0x0E);
 8010b62:	200e      	movs	r0, #14
 8010b64:	f000 fd06 	bl	8011574 <_LCD_SendData>
	_LCD_SendData(0x08);
 8010b68:	2008      	movs	r0, #8
 8010b6a:	f000 fd03 	bl	8011574 <_LCD_SendData>
	_LCD_SendData(0x4E);
 8010b6e:	204e      	movs	r0, #78	; 0x4e
 8010b70:	f000 fd00 	bl	8011574 <_LCD_SendData>
	_LCD_SendData(0xF1);
 8010b74:	20f1      	movs	r0, #241	; 0xf1
 8010b76:	f000 fcfd 	bl	8011574 <_LCD_SendData>
	_LCD_SendData(0x37);
 8010b7a:	2037      	movs	r0, #55	; 0x37
 8010b7c:	f000 fcfa 	bl	8011574 <_LCD_SendData>
	_LCD_SendData(0x07);
 8010b80:	2007      	movs	r0, #7
 8010b82:	f000 fcf7 	bl	8011574 <_LCD_SendData>
	_LCD_SendData(0x10);
 8010b86:	2010      	movs	r0, #16
 8010b88:	f000 fcf4 	bl	8011574 <_LCD_SendData>
	_LCD_SendData(0x03);
 8010b8c:	2003      	movs	r0, #3
 8010b8e:	f000 fcf1 	bl	8011574 <_LCD_SendData>
	_LCD_SendData(0x0E);
 8010b92:	200e      	movs	r0, #14
 8010b94:	f000 fcee 	bl	8011574 <_LCD_SendData>
	_LCD_SendData(0x09);
 8010b98:	2009      	movs	r0, #9
 8010b9a:	f000 fceb 	bl	8011574 <_LCD_SendData>
	_LCD_SendData(0x00);
 8010b9e:	2000      	movs	r0, #0
 8010ba0:	f000 fce8 	bl	8011574 <_LCD_SendData>

	//NEGATIVE GAMMA CORRECTION
	_LCD_SendCommand(0xE1);
 8010ba4:	20e1      	movs	r0, #225	; 0xe1
 8010ba6:	f000 fcb3 	bl	8011510 <_LCD_SendCommand>
	_LCD_SendData(0x00);
 8010baa:	2000      	movs	r0, #0
 8010bac:	f000 fce2 	bl	8011574 <_LCD_SendData>
	_LCD_SendData(0x0E);
 8010bb0:	200e      	movs	r0, #14
 8010bb2:	f000 fcdf 	bl	8011574 <_LCD_SendData>
	_LCD_SendData(0x14);
 8010bb6:	2014      	movs	r0, #20
 8010bb8:	f000 fcdc 	bl	8011574 <_LCD_SendData>
	_LCD_SendData(0x03);
 8010bbc:	2003      	movs	r0, #3
 8010bbe:	f000 fcd9 	bl	8011574 <_LCD_SendData>
	_LCD_SendData(0x11);
 8010bc2:	2011      	movs	r0, #17
 8010bc4:	f000 fcd6 	bl	8011574 <_LCD_SendData>
	_LCD_SendData(0x07);
 8010bc8:	2007      	movs	r0, #7
 8010bca:	f000 fcd3 	bl	8011574 <_LCD_SendData>
	_LCD_SendData(0x31);
 8010bce:	2031      	movs	r0, #49	; 0x31
 8010bd0:	f000 fcd0 	bl	8011574 <_LCD_SendData>
	_LCD_SendData(0xC1);
 8010bd4:	20c1      	movs	r0, #193	; 0xc1
 8010bd6:	f000 fccd 	bl	8011574 <_LCD_SendData>
	_LCD_SendData(0x48);
 8010bda:	2048      	movs	r0, #72	; 0x48
 8010bdc:	f000 fcca 	bl	8011574 <_LCD_SendData>
	_LCD_SendData(0x08);
 8010be0:	2008      	movs	r0, #8
 8010be2:	f000 fcc7 	bl	8011574 <_LCD_SendData>
	_LCD_SendData(0x0F);
 8010be6:	200f      	movs	r0, #15
 8010be8:	f000 fcc4 	bl	8011574 <_LCD_SendData>
	_LCD_SendData(0x0C);
 8010bec:	200c      	movs	r0, #12
 8010bee:	f000 fcc1 	bl	8011574 <_LCD_SendData>
	_LCD_SendData(0x31);
 8010bf2:	2031      	movs	r0, #49	; 0x31
 8010bf4:	f000 fcbe 	bl	8011574 <_LCD_SendData>
	_LCD_SendData(0x36);
 8010bf8:	2036      	movs	r0, #54	; 0x36
 8010bfa:	f000 fcbb 	bl	8011574 <_LCD_SendData>
	_LCD_SendData(0x0F);
 8010bfe:	200f      	movs	r0, #15
 8010c00:	f000 fcb8 	bl	8011574 <_LCD_SendData>

	//EXIT SLEEP
	_LCD_SendCommand(0x11);
 8010c04:	2011      	movs	r0, #17
 8010c06:	f000 fc83 	bl	8011510 <_LCD_SendCommand>
	HAL_Delay(240);
 8010c0a:	20f0      	movs	r0, #240	; 0xf0
 8010c0c:	f7f8 fa0c 	bl	8009028 <HAL_Delay>

	//TURN ON DISPLAY
	_LCD_SendCommand(0x29);
 8010c10:	2029      	movs	r0, #41	; 0x29
 8010c12:	f000 fc7d 	bl	8011510 <_LCD_SendCommand>

	//STARTING ROTATION
	ILI9341_Set_Rotation(SCREEN_VERTICAL_1);
 8010c16:	2000      	movs	r0, #0
 8010c18:	f000 fb4e 	bl	80112b8 <ILI9341_Set_Rotation>
}
 8010c1c:	bf00      	nop
 8010c1e:	bd80      	pop	{r7, pc}

08010c20 <ILI9341_SPI_Init>:
 *
 * 	Initialise SPI peripheral
 *
 */
void ILI9341_SPI_Init(void)
{
 8010c20:	b480      	push	{r7}
 8010c22:	af00      	add	r7, sp, #0

   	// check SPI enabled
	if ((SPI_PERIPH->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8010c24:	4b0b      	ldr	r3, [pc, #44]	; (8010c54 <ILI9341_SPI_Init+0x34>)
 8010c26:	681b      	ldr	r3, [r3, #0]
 8010c28:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8010c2c:	2b40      	cmp	r3, #64	; 0x40
 8010c2e:	d005      	beq.n	8010c3c <ILI9341_SPI_Init+0x1c>
	{
		SPI_PERIPH->CR1 |= SPI_CR1_SPE;
 8010c30:	4b08      	ldr	r3, [pc, #32]	; (8010c54 <ILI9341_SPI_Init+0x34>)
 8010c32:	681b      	ldr	r3, [r3, #0]
 8010c34:	4a07      	ldr	r2, [pc, #28]	; (8010c54 <ILI9341_SPI_Init+0x34>)
 8010c36:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8010c3a:	6013      	str	r3, [r2, #0]
	}

	LCD_CS_PORT->ODR &= ~(LCD_CS_PIN);
 8010c3c:	4b06      	ldr	r3, [pc, #24]	; (8010c58 <ILI9341_SPI_Init+0x38>)
 8010c3e:	695b      	ldr	r3, [r3, #20]
 8010c40:	4a05      	ldr	r2, [pc, #20]	; (8010c58 <ILI9341_SPI_Init+0x38>)
 8010c42:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8010c46:	6153      	str	r3, [r2, #20]
}
 8010c48:	bf00      	nop
 8010c4a:	46bd      	mov	sp, r7
 8010c4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010c50:	4770      	bx	lr
 8010c52:	bf00      	nop
 8010c54:	40003c00 	.word	0x40003c00
 8010c58:	48000400 	.word	0x48000400

08010c5c <ILI9341_Draw_Horizontal_Line>:
 *	Draw horizontal line
 *
 */

void ILI9341_Draw_Horizontal_Line(uint16_t xpos, uint16_t ypos, uint16_t width, uint16_t colour)
{
 8010c5c:	b590      	push	{r4, r7, lr}
 8010c5e:	b087      	sub	sp, #28
 8010c60:	af02      	add	r7, sp, #8
 8010c62:	4604      	mov	r4, r0
 8010c64:	4608      	mov	r0, r1
 8010c66:	4611      	mov	r1, r2
 8010c68:	461a      	mov	r2, r3
 8010c6a:	4623      	mov	r3, r4
 8010c6c:	80fb      	strh	r3, [r7, #6]
 8010c6e:	4603      	mov	r3, r0
 8010c70:	80bb      	strh	r3, [r7, #4]
 8010c72:	460b      	mov	r3, r1
 8010c74:	807b      	strh	r3, [r7, #2]
 8010c76:	4613      	mov	r3, r2
 8010c78:	803b      	strh	r3, [r7, #0]
	if((xpos >=LCD_WIDTH) || (ypos >=LCD_HEIGHT)) return;
 8010c7a:	4b28      	ldr	r3, [pc, #160]	; (8010d1c <ILI9341_Draw_Horizontal_Line+0xc0>)
 8010c7c:	881b      	ldrh	r3, [r3, #0]
 8010c7e:	b29b      	uxth	r3, r3
 8010c80:	88fa      	ldrh	r2, [r7, #6]
 8010c82:	429a      	cmp	r2, r3
 8010c84:	d246      	bcs.n	8010d14 <ILI9341_Draw_Horizontal_Line+0xb8>
 8010c86:	4b26      	ldr	r3, [pc, #152]	; (8010d20 <ILI9341_Draw_Horizontal_Line+0xc4>)
 8010c88:	881b      	ldrh	r3, [r3, #0]
 8010c8a:	b29b      	uxth	r3, r3
 8010c8c:	88ba      	ldrh	r2, [r7, #4]
 8010c8e:	429a      	cmp	r2, r3
 8010c90:	d240      	bcs.n	8010d14 <ILI9341_Draw_Horizontal_Line+0xb8>
	if(((xpos + width) - 1 ) >= LCD_WIDTH)
 8010c92:	88fa      	ldrh	r2, [r7, #6]
 8010c94:	887b      	ldrh	r3, [r7, #2]
 8010c96:	4413      	add	r3, r2
 8010c98:	3b01      	subs	r3, #1
 8010c9a:	4a20      	ldr	r2, [pc, #128]	; (8010d1c <ILI9341_Draw_Horizontal_Line+0xc0>)
 8010c9c:	8812      	ldrh	r2, [r2, #0]
 8010c9e:	b292      	uxth	r2, r2
 8010ca0:	4293      	cmp	r3, r2
 8010ca2:	db05      	blt.n	8010cb0 <ILI9341_Draw_Horizontal_Line+0x54>
		{
			width= LCD_WIDTH - xpos;
 8010ca4:	4b1d      	ldr	r3, [pc, #116]	; (8010d1c <ILI9341_Draw_Horizontal_Line+0xc0>)
 8010ca6:	881b      	ldrh	r3, [r3, #0]
 8010ca8:	b29a      	uxth	r2, r3
 8010caa:	88fb      	ldrh	r3, [r7, #6]
 8010cac:	1ad3      	subs	r3, r2, r3
 8010cae:	807b      	strh	r3, [r7, #2]
		}
	ILI9341_Set_Frame(	xpos,
							ypos,
							(xpos + width) - 1,
 8010cb0:	88fa      	ldrh	r2, [r7, #6]
 8010cb2:	887b      	ldrh	r3, [r7, #2]
 8010cb4:	4413      	add	r3, r2
 8010cb6:	b29b      	uxth	r3, r3
	ILI9341_Set_Frame(	xpos,
 8010cb8:	3b01      	subs	r3, #1
 8010cba:	b29a      	uxth	r2, r3
 8010cbc:	88bb      	ldrh	r3, [r7, #4]
 8010cbe:	88b9      	ldrh	r1, [r7, #4]
 8010cc0:	88f8      	ldrh	r0, [r7, #6]
 8010cc2:	f000 f893 	bl	8010dec <ILI9341_Set_Frame>
	// to keep _LCD_Write_Frame() happy.

	// Note, truncated pixel will be needed at function end.


	uint8_t truncated = 0;
 8010cc6:	2300      	movs	r3, #0
 8010cc8:	73fb      	strb	r3, [r7, #15]

	if((width & 1) && (width > 1))		// don't round down to zero!
 8010cca:	887b      	ldrh	r3, [r7, #2]
 8010ccc:	f003 0301 	and.w	r3, r3, #1
 8010cd0:	2b00      	cmp	r3, #0
 8010cd2:	d009      	beq.n	8010ce8 <ILI9341_Draw_Horizontal_Line+0x8c>
 8010cd4:	887b      	ldrh	r3, [r7, #2]
 8010cd6:	2b01      	cmp	r3, #1
 8010cd8:	d906      	bls.n	8010ce8 <ILI9341_Draw_Horizontal_Line+0x8c>
	{
		truncated = 1;
 8010cda:	2301      	movs	r3, #1
 8010cdc:	73fb      	strb	r3, [r7, #15]
		width = ((width >> 1) * 2);
 8010cde:	887b      	ldrh	r3, [r7, #2]
 8010ce0:	085b      	lsrs	r3, r3, #1
 8010ce2:	b29b      	uxth	r3, r3
 8010ce4:	005b      	lsls	r3, r3, #1
 8010ce6:	807b      	strh	r3, [r7, #2]
	}
	_LCD_Write_Frame(xpos, ypos, colour, width, LINE_CHUNK);
 8010ce8:	887c      	ldrh	r4, [r7, #2]
 8010cea:	883a      	ldrh	r2, [r7, #0]
 8010cec:	88b9      	ldrh	r1, [r7, #4]
 8010cee:	88f8      	ldrh	r0, [r7, #6]
 8010cf0:	2303      	movs	r3, #3
 8010cf2:	9300      	str	r3, [sp, #0]
 8010cf4:	4623      	mov	r3, r4
 8010cf6:	f000 fb5b 	bl	80113b0 <_LCD_Write_Frame>
	//
//TODO
	// add the truncated pixel now
	if(truncated)
 8010cfa:	7bfb      	ldrb	r3, [r7, #15]
 8010cfc:	2b00      	cmp	r3, #0
 8010cfe:	d00a      	beq.n	8010d16 <ILI9341_Draw_Horizontal_Line+0xba>
	{
		ILI9341_Draw_Pixel(	(xpos + width),
 8010d00:	88fa      	ldrh	r2, [r7, #6]
 8010d02:	887b      	ldrh	r3, [r7, #2]
 8010d04:	4413      	add	r3, r2
 8010d06:	b29b      	uxth	r3, r3
 8010d08:	883a      	ldrh	r2, [r7, #0]
 8010d0a:	88b9      	ldrh	r1, [r7, #4]
 8010d0c:	4618      	mov	r0, r3
 8010d0e:	f000 f8e3 	bl	8010ed8 <ILI9341_Draw_Pixel>
 8010d12:	e000      	b.n	8010d16 <ILI9341_Draw_Horizontal_Line+0xba>
	if((xpos >=LCD_WIDTH) || (ypos >=LCD_HEIGHT)) return;
 8010d14:	bf00      	nop
							(ypos),
							colour);
	}


}
 8010d16:	3714      	adds	r7, #20
 8010d18:	46bd      	mov	sp, r7
 8010d1a:	bd90      	pop	{r4, r7, pc}
 8010d1c:	20000ebe 	.word	0x20000ebe
 8010d20:	20000ebc 	.word	0x20000ebc

08010d24 <ILI9341_Draw_Vertical_Line>:
 *
 *  Draw vertical line
 *
 */
void ILI9341_Draw_Vertical_Line(uint16_t xpos, uint16_t ypos, uint16_t height, uint16_t colour)
{
 8010d24:	b590      	push	{r4, r7, lr}
 8010d26:	b087      	sub	sp, #28
 8010d28:	af02      	add	r7, sp, #8
 8010d2a:	4604      	mov	r4, r0
 8010d2c:	4608      	mov	r0, r1
 8010d2e:	4611      	mov	r1, r2
 8010d30:	461a      	mov	r2, r3
 8010d32:	4623      	mov	r3, r4
 8010d34:	80fb      	strh	r3, [r7, #6]
 8010d36:	4603      	mov	r3, r0
 8010d38:	80bb      	strh	r3, [r7, #4]
 8010d3a:	460b      	mov	r3, r1
 8010d3c:	807b      	strh	r3, [r7, #2]
 8010d3e:	4613      	mov	r3, r2
 8010d40:	803b      	strh	r3, [r7, #0]
	if((xpos >= LCD_WIDTH) || (ypos >= LCD_HEIGHT)) return;
 8010d42:	4b28      	ldr	r3, [pc, #160]	; (8010de4 <ILI9341_Draw_Vertical_Line+0xc0>)
 8010d44:	881b      	ldrh	r3, [r3, #0]
 8010d46:	b29b      	uxth	r3, r3
 8010d48:	88fa      	ldrh	r2, [r7, #6]
 8010d4a:	429a      	cmp	r2, r3
 8010d4c:	d246      	bcs.n	8010ddc <ILI9341_Draw_Vertical_Line+0xb8>
 8010d4e:	4b26      	ldr	r3, [pc, #152]	; (8010de8 <ILI9341_Draw_Vertical_Line+0xc4>)
 8010d50:	881b      	ldrh	r3, [r3, #0]
 8010d52:	b29b      	uxth	r3, r3
 8010d54:	88ba      	ldrh	r2, [r7, #4]
 8010d56:	429a      	cmp	r2, r3
 8010d58:	d240      	bcs.n	8010ddc <ILI9341_Draw_Vertical_Line+0xb8>
	if(((ypos + height) - 1) >= LCD_HEIGHT)
 8010d5a:	88ba      	ldrh	r2, [r7, #4]
 8010d5c:	887b      	ldrh	r3, [r7, #2]
 8010d5e:	4413      	add	r3, r2
 8010d60:	3b01      	subs	r3, #1
 8010d62:	4a21      	ldr	r2, [pc, #132]	; (8010de8 <ILI9341_Draw_Vertical_Line+0xc4>)
 8010d64:	8812      	ldrh	r2, [r2, #0]
 8010d66:	b292      	uxth	r2, r2
 8010d68:	4293      	cmp	r3, r2
 8010d6a:	db05      	blt.n	8010d78 <ILI9341_Draw_Vertical_Line+0x54>
	{
		height= LCD_HEIGHT - ypos;
 8010d6c:	4b1e      	ldr	r3, [pc, #120]	; (8010de8 <ILI9341_Draw_Vertical_Line+0xc4>)
 8010d6e:	881b      	ldrh	r3, [r3, #0]
 8010d70:	b29a      	uxth	r2, r3
 8010d72:	88bb      	ldrh	r3, [r7, #4]
 8010d74:	1ad3      	subs	r3, r2, r3
 8010d76:	807b      	strh	r3, [r7, #2]
	}

	ILI9341_Set_Frame(xpos, ypos, xpos, (ypos + height) - 1);
 8010d78:	88ba      	ldrh	r2, [r7, #4]
 8010d7a:	887b      	ldrh	r3, [r7, #2]
 8010d7c:	4413      	add	r3, r2
 8010d7e:	b29b      	uxth	r3, r3
 8010d80:	3b01      	subs	r3, #1
 8010d82:	b29b      	uxth	r3, r3
 8010d84:	88fa      	ldrh	r2, [r7, #6]
 8010d86:	88b9      	ldrh	r1, [r7, #4]
 8010d88:	88f8      	ldrh	r0, [r7, #6]
 8010d8a:	f000 f82f 	bl	8010dec <ILI9341_Set_Frame>

	uint8_t truncated = 0;
 8010d8e:	2300      	movs	r3, #0
 8010d90:	73fb      	strb	r3, [r7, #15]

	if((height & 1) && (height > 1))		// don't round down to zero!
 8010d92:	887b      	ldrh	r3, [r7, #2]
 8010d94:	f003 0301 	and.w	r3, r3, #1
 8010d98:	2b00      	cmp	r3, #0
 8010d9a:	d009      	beq.n	8010db0 <ILI9341_Draw_Vertical_Line+0x8c>
 8010d9c:	887b      	ldrh	r3, [r7, #2]
 8010d9e:	2b01      	cmp	r3, #1
 8010da0:	d906      	bls.n	8010db0 <ILI9341_Draw_Vertical_Line+0x8c>
	{
		truncated = 1;
 8010da2:	2301      	movs	r3, #1
 8010da4:	73fb      	strb	r3, [r7, #15]
		height = ((height >> 1) * 2);
 8010da6:	887b      	ldrh	r3, [r7, #2]
 8010da8:	085b      	lsrs	r3, r3, #1
 8010daa:	b29b      	uxth	r3, r3
 8010dac:	005b      	lsls	r3, r3, #1
 8010dae:	807b      	strh	r3, [r7, #2]
//TODO


	//

	if(truncated)
 8010db0:	7bfb      	ldrb	r3, [r7, #15]
 8010db2:	2b00      	cmp	r3, #0
 8010db4:	d008      	beq.n	8010dc8 <ILI9341_Draw_Vertical_Line+0xa4>
	{
		ILI9341_Draw_Pixel(	(xpos),
 8010db6:	88ba      	ldrh	r2, [r7, #4]
 8010db8:	887b      	ldrh	r3, [r7, #2]
 8010dba:	4413      	add	r3, r2
 8010dbc:	b299      	uxth	r1, r3
 8010dbe:	883a      	ldrh	r2, [r7, #0]
 8010dc0:	88fb      	ldrh	r3, [r7, #6]
 8010dc2:	4618      	mov	r0, r3
 8010dc4:	f000 f888 	bl	8010ed8 <ILI9341_Draw_Pixel>
							(ypos + height),
							colour);
	}

	_LCD_Write_Frame(xpos, ypos, colour, height, LINE_CHUNK);
 8010dc8:	887c      	ldrh	r4, [r7, #2]
 8010dca:	883a      	ldrh	r2, [r7, #0]
 8010dcc:	88b9      	ldrh	r1, [r7, #4]
 8010dce:	88f8      	ldrh	r0, [r7, #6]
 8010dd0:	2303      	movs	r3, #3
 8010dd2:	9300      	str	r3, [sp, #0]
 8010dd4:	4623      	mov	r3, r4
 8010dd6:	f000 faeb 	bl	80113b0 <_LCD_Write_Frame>
 8010dda:	e000      	b.n	8010dde <ILI9341_Draw_Vertical_Line+0xba>
	if((xpos >= LCD_WIDTH) || (ypos >= LCD_HEIGHT)) return;
 8010ddc:	bf00      	nop
}
 8010dde:	3714      	adds	r7, #20
 8010de0:	46bd      	mov	sp, r7
 8010de2:	bd90      	pop	{r4, r7, pc}
 8010de4:	20000ebe 	.word	0x20000ebe
 8010de8:	20000ebc 	.word	0x20000ebc

08010dec <ILI9341_Set_Frame>:
 *	bottom right of area (ec, ep):
 *	ec 	- 	"end column"
 *	ep	- 	"end page"
 */
void ILI9341_Set_Frame(uint16_t sc, uint16_t sp, uint16_t ec, uint16_t ep)
{
 8010dec:	b590      	push	{r4, r7, lr}
 8010dee:	b083      	sub	sp, #12
 8010df0:	af00      	add	r7, sp, #0
 8010df2:	4604      	mov	r4, r0
 8010df4:	4608      	mov	r0, r1
 8010df6:	4611      	mov	r1, r2
 8010df8:	461a      	mov	r2, r3
 8010dfa:	4623      	mov	r3, r4
 8010dfc:	80fb      	strh	r3, [r7, #6]
 8010dfe:	4603      	mov	r3, r0
 8010e00:	80bb      	strh	r3, [r7, #4]
 8010e02:	460b      	mov	r3, r1
 8010e04:	807b      	strh	r3, [r7, #2]
 8010e06:	4613      	mov	r3, r2
 8010e08:	803b      	strh	r3, [r7, #0]
	// send "Column Address Set" command
	_LCD_SendCommand(0x2A);
 8010e0a:	202a      	movs	r0, #42	; 0x2a
 8010e0c:	f000 fb80 	bl	8011510 <_LCD_SendCommand>
	_LCD_SendData(sc >> 8);
 8010e10:	88fb      	ldrh	r3, [r7, #6]
 8010e12:	0a1b      	lsrs	r3, r3, #8
 8010e14:	b29b      	uxth	r3, r3
 8010e16:	b2db      	uxtb	r3, r3
 8010e18:	4618      	mov	r0, r3
 8010e1a:	f000 fbab 	bl	8011574 <_LCD_SendData>
	_LCD_SendData(sc);
 8010e1e:	88fb      	ldrh	r3, [r7, #6]
 8010e20:	b2db      	uxtb	r3, r3
 8010e22:	4618      	mov	r0, r3
 8010e24:	f000 fba6 	bl	8011574 <_LCD_SendData>
	_LCD_SendData(ec >> 8);
 8010e28:	887b      	ldrh	r3, [r7, #2]
 8010e2a:	0a1b      	lsrs	r3, r3, #8
 8010e2c:	b29b      	uxth	r3, r3
 8010e2e:	b2db      	uxtb	r3, r3
 8010e30:	4618      	mov	r0, r3
 8010e32:	f000 fb9f 	bl	8011574 <_LCD_SendData>
	_LCD_SendData(ec);
 8010e36:	887b      	ldrh	r3, [r7, #2]
 8010e38:	b2db      	uxtb	r3, r3
 8010e3a:	4618      	mov	r0, r3
 8010e3c:	f000 fb9a 	bl	8011574 <_LCD_SendData>

	// send "Page Address Set" command
	_LCD_SendCommand(0x2B);
 8010e40:	202b      	movs	r0, #43	; 0x2b
 8010e42:	f000 fb65 	bl	8011510 <_LCD_SendCommand>
	_LCD_SendData(sp >> 8);
 8010e46:	88bb      	ldrh	r3, [r7, #4]
 8010e48:	0a1b      	lsrs	r3, r3, #8
 8010e4a:	b29b      	uxth	r3, r3
 8010e4c:	b2db      	uxtb	r3, r3
 8010e4e:	4618      	mov	r0, r3
 8010e50:	f000 fb90 	bl	8011574 <_LCD_SendData>
	_LCD_SendData(sp);
 8010e54:	88bb      	ldrh	r3, [r7, #4]
 8010e56:	b2db      	uxtb	r3, r3
 8010e58:	4618      	mov	r0, r3
 8010e5a:	f000 fb8b 	bl	8011574 <_LCD_SendData>
	_LCD_SendData(ep >> 8);
 8010e5e:	883b      	ldrh	r3, [r7, #0]
 8010e60:	0a1b      	lsrs	r3, r3, #8
 8010e62:	b29b      	uxth	r3, r3
 8010e64:	b2db      	uxtb	r3, r3
 8010e66:	4618      	mov	r0, r3
 8010e68:	f000 fb84 	bl	8011574 <_LCD_SendData>
	_LCD_SendData(ep);
 8010e6c:	883b      	ldrh	r3, [r7, #0]
 8010e6e:	b2db      	uxtb	r3, r3
 8010e70:	4618      	mov	r0, r3
 8010e72:	f000 fb7f 	bl	8011574 <_LCD_SendData>

	_LCD_SendCommand(0x2C);
 8010e76:	202c      	movs	r0, #44	; 0x2c
 8010e78:	f000 fb4a 	bl	8011510 <_LCD_SendCommand>
}
 8010e7c:	bf00      	nop
 8010e7e:	370c      	adds	r7, #12
 8010e80:	46bd      	mov	sp, r7
 8010e82:	bd90      	pop	{r4, r7, pc}

08010e84 <ILI9341_Fill_Screen>:
 *
 * 	Sets address (entire screen) and Sends height*width ammount of colour information to LCD
 *
 */
void ILI9341_Fill_Screen(uint16_t colour)
{
 8010e84:	b580      	push	{r7, lr}
 8010e86:	b084      	sub	sp, #16
 8010e88:	af02      	add	r7, sp, #8
 8010e8a:	4603      	mov	r3, r0
 8010e8c:	80fb      	strh	r3, [r7, #6]
	ILI9341_Set_Frame(0,0,LCD_WIDTH,LCD_HEIGHT);
 8010e8e:	4b10      	ldr	r3, [pc, #64]	; (8010ed0 <ILI9341_Fill_Screen+0x4c>)
 8010e90:	881b      	ldrh	r3, [r3, #0]
 8010e92:	b29a      	uxth	r2, r3
 8010e94:	4b0f      	ldr	r3, [pc, #60]	; (8010ed4 <ILI9341_Fill_Screen+0x50>)
 8010e96:	881b      	ldrh	r3, [r3, #0]
 8010e98:	b29b      	uxth	r3, r3
 8010e9a:	2100      	movs	r1, #0
 8010e9c:	2000      	movs	r0, #0
 8010e9e:	f7ff ffa5 	bl	8010dec <ILI9341_Set_Frame>
	_LCD_Write_Frame(0, 0, colour, LCD_WIDTH*LCD_HEIGHT, AREA_CHUNK);
 8010ea2:	4b0b      	ldr	r3, [pc, #44]	; (8010ed0 <ILI9341_Fill_Screen+0x4c>)
 8010ea4:	881b      	ldrh	r3, [r3, #0]
 8010ea6:	b29b      	uxth	r3, r3
 8010ea8:	461a      	mov	r2, r3
 8010eaa:	4b0a      	ldr	r3, [pc, #40]	; (8010ed4 <ILI9341_Fill_Screen+0x50>)
 8010eac:	881b      	ldrh	r3, [r3, #0]
 8010eae:	b29b      	uxth	r3, r3
 8010eb0:	fb03 f302 	mul.w	r3, r3, r2
 8010eb4:	4619      	mov	r1, r3
 8010eb6:	88fa      	ldrh	r2, [r7, #6]
 8010eb8:	2304      	movs	r3, #4
 8010eba:	9300      	str	r3, [sp, #0]
 8010ebc:	460b      	mov	r3, r1
 8010ebe:	2100      	movs	r1, #0
 8010ec0:	2000      	movs	r0, #0
 8010ec2:	f000 fa75 	bl	80113b0 <_LCD_Write_Frame>
}
 8010ec6:	bf00      	nop
 8010ec8:	3708      	adds	r7, #8
 8010eca:	46bd      	mov	sp, r7
 8010ecc:	bd80      	pop	{r7, pc}
 8010ece:	bf00      	nop
 8010ed0:	20000ebe 	.word	0x20000ebe
 8010ed4:	20000ebc 	.word	0x20000ebc

08010ed8 <ILI9341_Draw_Pixel>:
 * 	Using pixels to draw big simple structures is not recommended as it is really slow
 * 	Try using either rectangles or lines if possible
 *
 */
void ILI9341_Draw_Pixel(uint16_t x,uint16_t y,uint16_t colour)
{
 8010ed8:	b580      	push	{r7, lr}
 8010eda:	b08e      	sub	sp, #56	; 0x38
 8010edc:	af00      	add	r7, sp, #0
 8010ede:	4603      	mov	r3, r0
 8010ee0:	80fb      	strh	r3, [r7, #6]
 8010ee2:	460b      	mov	r3, r1
 8010ee4:	80bb      	strh	r3, [r7, #4]
 8010ee6:	4613      	mov	r3, r2
 8010ee8:	807b      	strh	r3, [r7, #2]
	if((x >= LCD_WIDTH) || (y >= LCD_HEIGHT)) return;	//OUT OF BOUNDS!
 8010eea:	4b98      	ldr	r3, [pc, #608]	; (801114c <ILI9341_Draw_Pixel+0x274>)
 8010eec:	881b      	ldrh	r3, [r3, #0]
 8010eee:	b29b      	uxth	r3, r3
 8010ef0:	88fa      	ldrh	r2, [r7, #6]
 8010ef2:	429a      	cmp	r2, r3
 8010ef4:	f080 8143 	bcs.w	801117e <ILI9341_Draw_Pixel+0x2a6>
 8010ef8:	4b95      	ldr	r3, [pc, #596]	; (8011150 <ILI9341_Draw_Pixel+0x278>)
 8010efa:	881b      	ldrh	r3, [r3, #0]
 8010efc:	b29b      	uxth	r3, r3
 8010efe:	88ba      	ldrh	r2, [r7, #4]
 8010f00:	429a      	cmp	r2, r3
 8010f02:	f080 813c 	bcs.w	801117e <ILI9341_Draw_Pixel+0x2a6>

	//ADDRESS
	LCD_DC_PORT->ODR &= ~(LCD_DC_PIN);
 8010f06:	4b93      	ldr	r3, [pc, #588]	; (8011154 <ILI9341_Draw_Pixel+0x27c>)
 8010f08:	695b      	ldr	r3, [r3, #20]
 8010f0a:	4a92      	ldr	r2, [pc, #584]	; (8011154 <ILI9341_Draw_Pixel+0x27c>)
 8010f0c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8010f10:	6153      	str	r3, [r2, #20]
	LCD_CS_PORT->ODR &= ~(LCD_CS_PIN);
 8010f12:	4b90      	ldr	r3, [pc, #576]	; (8011154 <ILI9341_Draw_Pixel+0x27c>)
 8010f14:	695b      	ldr	r3, [r3, #20]
 8010f16:	4a8f      	ldr	r2, [pc, #572]	; (8011154 <ILI9341_Draw_Pixel+0x27c>)
 8010f18:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8010f1c:	6153      	str	r3, [r2, #20]
	_SPI_SendByte(0x2A, 0, 10);
 8010f1e:	220a      	movs	r2, #10
 8010f20:	2100      	movs	r1, #0
 8010f22:	202a      	movs	r0, #42	; 0x2a
 8010f24:	f000 fb58 	bl	80115d8 <_SPI_SendByte>
	for(int s=0; s < SPI_DELAY_HOLD; s++) LCD_CS_PORT->ODR &= ~(LCD_CS_PIN);
 8010f28:	2300      	movs	r3, #0
 8010f2a:	637b      	str	r3, [r7, #52]	; 0x34
 8010f2c:	e008      	b.n	8010f40 <ILI9341_Draw_Pixel+0x68>
 8010f2e:	4b89      	ldr	r3, [pc, #548]	; (8011154 <ILI9341_Draw_Pixel+0x27c>)
 8010f30:	695b      	ldr	r3, [r3, #20]
 8010f32:	4a88      	ldr	r2, [pc, #544]	; (8011154 <ILI9341_Draw_Pixel+0x27c>)
 8010f34:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8010f38:	6153      	str	r3, [r2, #20]
 8010f3a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8010f3c:	3301      	adds	r3, #1
 8010f3e:	637b      	str	r3, [r7, #52]	; 0x34
 8010f40:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8010f42:	2b02      	cmp	r3, #2
 8010f44:	ddf3      	ble.n	8010f2e <ILI9341_Draw_Pixel+0x56>
	LCD_DC_PORT->ODR |= LCD_DC_PIN;
 8010f46:	4b83      	ldr	r3, [pc, #524]	; (8011154 <ILI9341_Draw_Pixel+0x27c>)
 8010f48:	695b      	ldr	r3, [r3, #20]
 8010f4a:	4a82      	ldr	r2, [pc, #520]	; (8011154 <ILI9341_Draw_Pixel+0x27c>)
 8010f4c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8010f50:	6153      	str	r3, [r2, #20]
	LCD_CS_PORT->ODR |= LCD_CS_PIN;
 8010f52:	4b80      	ldr	r3, [pc, #512]	; (8011154 <ILI9341_Draw_Pixel+0x27c>)
 8010f54:	695b      	ldr	r3, [r3, #20]
 8010f56:	4a7f      	ldr	r2, [pc, #508]	; (8011154 <ILI9341_Draw_Pixel+0x27c>)
 8010f58:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8010f5c:	6153      	str	r3, [r2, #20]

	//XDATA
	LCD_CS_PORT->ODR &= ~(LCD_CS_PIN);
 8010f5e:	4b7d      	ldr	r3, [pc, #500]	; (8011154 <ILI9341_Draw_Pixel+0x27c>)
 8010f60:	695b      	ldr	r3, [r3, #20]
 8010f62:	4a7c      	ldr	r2, [pc, #496]	; (8011154 <ILI9341_Draw_Pixel+0x27c>)
 8010f64:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8010f68:	6153      	str	r3, [r2, #20]
	unsigned char Temp_Buffer[4] = { x >> 8, x, (x + 1) >> 8, (x + 1) };
 8010f6a:	88fb      	ldrh	r3, [r7, #6]
 8010f6c:	0a1b      	lsrs	r3, r3, #8
 8010f6e:	b29b      	uxth	r3, r3
 8010f70:	b2db      	uxtb	r3, r3
 8010f72:	753b      	strb	r3, [r7, #20]
 8010f74:	88fb      	ldrh	r3, [r7, #6]
 8010f76:	b2db      	uxtb	r3, r3
 8010f78:	757b      	strb	r3, [r7, #21]
 8010f7a:	88fb      	ldrh	r3, [r7, #6]
 8010f7c:	3301      	adds	r3, #1
 8010f7e:	121b      	asrs	r3, r3, #8
 8010f80:	b2db      	uxtb	r3, r3
 8010f82:	75bb      	strb	r3, [r7, #22]
 8010f84:	88fb      	ldrh	r3, [r7, #6]
 8010f86:	b2db      	uxtb	r3, r3
 8010f88:	3301      	adds	r3, #1
 8010f8a:	b2db      	uxtb	r3, r3
 8010f8c:	75fb      	strb	r3, [r7, #23]
	_SPI_SendByteMultiByte(Temp_Buffer, 4, 0, 10);
 8010f8e:	f107 0014 	add.w	r0, r7, #20
 8010f92:	230a      	movs	r3, #10
 8010f94:	2200      	movs	r2, #0
 8010f96:	2104      	movs	r1, #4
 8010f98:	f000 fb50 	bl	801163c <_SPI_SendByteMultiByte>
	//HAL_SPI_Transmit(HSPI_INSTANCE, Temp_Buffer, 4, 1 );
	for(int s=0; s < SPI_DELAY_HOLD; s++) LCD_CS_PORT->ODR &= ~(LCD_CS_PIN);
 8010f9c:	2300      	movs	r3, #0
 8010f9e:	633b      	str	r3, [r7, #48]	; 0x30
 8010fa0:	e008      	b.n	8010fb4 <ILI9341_Draw_Pixel+0xdc>
 8010fa2:	4b6c      	ldr	r3, [pc, #432]	; (8011154 <ILI9341_Draw_Pixel+0x27c>)
 8010fa4:	695b      	ldr	r3, [r3, #20]
 8010fa6:	4a6b      	ldr	r2, [pc, #428]	; (8011154 <ILI9341_Draw_Pixel+0x27c>)
 8010fa8:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8010fac:	6153      	str	r3, [r2, #20]
 8010fae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010fb0:	3301      	adds	r3, #1
 8010fb2:	633b      	str	r3, [r7, #48]	; 0x30
 8010fb4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010fb6:	2b02      	cmp	r3, #2
 8010fb8:	ddf3      	ble.n	8010fa2 <ILI9341_Draw_Pixel+0xca>
	LCD_CS_PORT->ODR |= LCD_CS_PIN;
 8010fba:	4b66      	ldr	r3, [pc, #408]	; (8011154 <ILI9341_Draw_Pixel+0x27c>)
 8010fbc:	695b      	ldr	r3, [r3, #20]
 8010fbe:	4a65      	ldr	r2, [pc, #404]	; (8011154 <ILI9341_Draw_Pixel+0x27c>)
 8010fc0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8010fc4:	6153      	str	r3, [r2, #20]

	//ADDRESS
	LCD_DC_PORT->ODR &= ~(LCD_DC_PIN);
 8010fc6:	4b63      	ldr	r3, [pc, #396]	; (8011154 <ILI9341_Draw_Pixel+0x27c>)
 8010fc8:	695b      	ldr	r3, [r3, #20]
 8010fca:	4a62      	ldr	r2, [pc, #392]	; (8011154 <ILI9341_Draw_Pixel+0x27c>)
 8010fcc:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8010fd0:	6153      	str	r3, [r2, #20]
	LCD_CS_PORT->ODR &= ~(LCD_CS_PIN);
 8010fd2:	4b60      	ldr	r3, [pc, #384]	; (8011154 <ILI9341_Draw_Pixel+0x27c>)
 8010fd4:	695b      	ldr	r3, [r3, #20]
 8010fd6:	4a5f      	ldr	r2, [pc, #380]	; (8011154 <ILI9341_Draw_Pixel+0x27c>)
 8010fd8:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8010fdc:	6153      	str	r3, [r2, #20]
	_SPI_SendByte(0x2B, 0, 10);
 8010fde:	220a      	movs	r2, #10
 8010fe0:	2100      	movs	r1, #0
 8010fe2:	202b      	movs	r0, #43	; 0x2b
 8010fe4:	f000 faf8 	bl	80115d8 <_SPI_SendByte>
	for(int s=0; s < SPI_DELAY_HOLD; s++) LCD_CS_PORT->ODR &= ~(LCD_CS_PIN);
 8010fe8:	2300      	movs	r3, #0
 8010fea:	62fb      	str	r3, [r7, #44]	; 0x2c
 8010fec:	e008      	b.n	8011000 <ILI9341_Draw_Pixel+0x128>
 8010fee:	4b59      	ldr	r3, [pc, #356]	; (8011154 <ILI9341_Draw_Pixel+0x27c>)
 8010ff0:	695b      	ldr	r3, [r3, #20]
 8010ff2:	4a58      	ldr	r2, [pc, #352]	; (8011154 <ILI9341_Draw_Pixel+0x27c>)
 8010ff4:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8010ff8:	6153      	str	r3, [r2, #20]
 8010ffa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010ffc:	3301      	adds	r3, #1
 8010ffe:	62fb      	str	r3, [r7, #44]	; 0x2c
 8011000:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011002:	2b02      	cmp	r3, #2
 8011004:	ddf3      	ble.n	8010fee <ILI9341_Draw_Pixel+0x116>
	LCD_DC_PORT->ODR |= LCD_DC_PIN;
 8011006:	4b53      	ldr	r3, [pc, #332]	; (8011154 <ILI9341_Draw_Pixel+0x27c>)
 8011008:	695b      	ldr	r3, [r3, #20]
 801100a:	4a52      	ldr	r2, [pc, #328]	; (8011154 <ILI9341_Draw_Pixel+0x27c>)
 801100c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8011010:	6153      	str	r3, [r2, #20]
	LCD_CS_PORT->ODR |= LCD_CS_PIN;
 8011012:	4b50      	ldr	r3, [pc, #320]	; (8011154 <ILI9341_Draw_Pixel+0x27c>)
 8011014:	695b      	ldr	r3, [r3, #20]
 8011016:	4a4f      	ldr	r2, [pc, #316]	; (8011154 <ILI9341_Draw_Pixel+0x27c>)
 8011018:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 801101c:	6153      	str	r3, [r2, #20]

	//YDATA
	LCD_CS_PORT->ODR &= ~(LCD_CS_PIN);
 801101e:	4b4d      	ldr	r3, [pc, #308]	; (8011154 <ILI9341_Draw_Pixel+0x27c>)
 8011020:	695b      	ldr	r3, [r3, #20]
 8011022:	4a4c      	ldr	r2, [pc, #304]	; (8011154 <ILI9341_Draw_Pixel+0x27c>)
 8011024:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8011028:	6153      	str	r3, [r2, #20]
	unsigned char Temp_Buffer1[4] = { y >> 8, y, (y + 1) >> 8, (y + 1) };
 801102a:	88bb      	ldrh	r3, [r7, #4]
 801102c:	0a1b      	lsrs	r3, r3, #8
 801102e:	b29b      	uxth	r3, r3
 8011030:	b2db      	uxtb	r3, r3
 8011032:	743b      	strb	r3, [r7, #16]
 8011034:	88bb      	ldrh	r3, [r7, #4]
 8011036:	b2db      	uxtb	r3, r3
 8011038:	747b      	strb	r3, [r7, #17]
 801103a:	88bb      	ldrh	r3, [r7, #4]
 801103c:	3301      	adds	r3, #1
 801103e:	121b      	asrs	r3, r3, #8
 8011040:	b2db      	uxtb	r3, r3
 8011042:	74bb      	strb	r3, [r7, #18]
 8011044:	88bb      	ldrh	r3, [r7, #4]
 8011046:	b2db      	uxtb	r3, r3
 8011048:	3301      	adds	r3, #1
 801104a:	b2db      	uxtb	r3, r3
 801104c:	74fb      	strb	r3, [r7, #19]
	_SPI_SendByteMultiByte(Temp_Buffer1, 4, 0, 10);
 801104e:	f107 0010 	add.w	r0, r7, #16
 8011052:	230a      	movs	r3, #10
 8011054:	2200      	movs	r2, #0
 8011056:	2104      	movs	r1, #4
 8011058:	f000 faf0 	bl	801163c <_SPI_SendByteMultiByte>
	//HAL_SPI_Transmit(HSPI_INSTANCE, Temp_Buffer1, 4, 1 );
	for(int s=0; s < SPI_DELAY_HOLD; s++) LCD_CS_PORT->ODR &= ~(LCD_CS_PIN);
 801105c:	2300      	movs	r3, #0
 801105e:	62bb      	str	r3, [r7, #40]	; 0x28
 8011060:	e008      	b.n	8011074 <ILI9341_Draw_Pixel+0x19c>
 8011062:	4b3c      	ldr	r3, [pc, #240]	; (8011154 <ILI9341_Draw_Pixel+0x27c>)
 8011064:	695b      	ldr	r3, [r3, #20]
 8011066:	4a3b      	ldr	r2, [pc, #236]	; (8011154 <ILI9341_Draw_Pixel+0x27c>)
 8011068:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 801106c:	6153      	str	r3, [r2, #20]
 801106e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011070:	3301      	adds	r3, #1
 8011072:	62bb      	str	r3, [r7, #40]	; 0x28
 8011074:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011076:	2b02      	cmp	r3, #2
 8011078:	ddf3      	ble.n	8011062 <ILI9341_Draw_Pixel+0x18a>
	LCD_CS_PORT->ODR |= LCD_CS_PIN;
 801107a:	4b36      	ldr	r3, [pc, #216]	; (8011154 <ILI9341_Draw_Pixel+0x27c>)
 801107c:	695b      	ldr	r3, [r3, #20]
 801107e:	4a35      	ldr	r2, [pc, #212]	; (8011154 <ILI9341_Draw_Pixel+0x27c>)
 8011080:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8011084:	6153      	str	r3, [r2, #20]

	//ADDRESS
	LCD_DC_PORT->ODR &= ~(LCD_DC_PIN);
 8011086:	4b33      	ldr	r3, [pc, #204]	; (8011154 <ILI9341_Draw_Pixel+0x27c>)
 8011088:	695b      	ldr	r3, [r3, #20]
 801108a:	4a32      	ldr	r2, [pc, #200]	; (8011154 <ILI9341_Draw_Pixel+0x27c>)
 801108c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8011090:	6153      	str	r3, [r2, #20]
	LCD_CS_PORT->ODR &= ~(LCD_CS_PIN);
 8011092:	4b30      	ldr	r3, [pc, #192]	; (8011154 <ILI9341_Draw_Pixel+0x27c>)
 8011094:	695b      	ldr	r3, [r3, #20]
 8011096:	4a2f      	ldr	r2, [pc, #188]	; (8011154 <ILI9341_Draw_Pixel+0x27c>)
 8011098:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 801109c:	6153      	str	r3, [r2, #20]
	_SPI_SendByte(0x2C, 0, 10);
 801109e:	220a      	movs	r2, #10
 80110a0:	2100      	movs	r1, #0
 80110a2:	202c      	movs	r0, #44	; 0x2c
 80110a4:	f000 fa98 	bl	80115d8 <_SPI_SendByte>
	for(int s=0; s < SPI_DELAY_HOLD; s++) LCD_CS_PORT->ODR &= ~(LCD_CS_PIN);
 80110a8:	2300      	movs	r3, #0
 80110aa:	627b      	str	r3, [r7, #36]	; 0x24
 80110ac:	e008      	b.n	80110c0 <ILI9341_Draw_Pixel+0x1e8>
 80110ae:	4b29      	ldr	r3, [pc, #164]	; (8011154 <ILI9341_Draw_Pixel+0x27c>)
 80110b0:	695b      	ldr	r3, [r3, #20]
 80110b2:	4a28      	ldr	r2, [pc, #160]	; (8011154 <ILI9341_Draw_Pixel+0x27c>)
 80110b4:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80110b8:	6153      	str	r3, [r2, #20]
 80110ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80110bc:	3301      	adds	r3, #1
 80110be:	627b      	str	r3, [r7, #36]	; 0x24
 80110c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80110c2:	2b02      	cmp	r3, #2
 80110c4:	ddf3      	ble.n	80110ae <ILI9341_Draw_Pixel+0x1d6>
	LCD_DC_PORT->ODR |= LCD_DC_PIN;
 80110c6:	4b23      	ldr	r3, [pc, #140]	; (8011154 <ILI9341_Draw_Pixel+0x27c>)
 80110c8:	695b      	ldr	r3, [r3, #20]
 80110ca:	4a22      	ldr	r2, [pc, #136]	; (8011154 <ILI9341_Draw_Pixel+0x27c>)
 80110cc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80110d0:	6153      	str	r3, [r2, #20]
	LCD_CS_PORT->ODR |= LCD_CS_PIN;
 80110d2:	4b20      	ldr	r3, [pc, #128]	; (8011154 <ILI9341_Draw_Pixel+0x27c>)
 80110d4:	695b      	ldr	r3, [r3, #20]
 80110d6:	4a1f      	ldr	r2, [pc, #124]	; (8011154 <ILI9341_Draw_Pixel+0x27c>)
 80110d8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80110dc:	6153      	str	r3, [r2, #20]

	//COLOUR
	LCD_CS_PORT->ODR &= ~(LCD_CS_PIN);
 80110de:	4b1d      	ldr	r3, [pc, #116]	; (8011154 <ILI9341_Draw_Pixel+0x27c>)
 80110e0:	695b      	ldr	r3, [r3, #20]
 80110e2:	4a1c      	ldr	r2, [pc, #112]	; (8011154 <ILI9341_Draw_Pixel+0x27c>)
 80110e4:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80110e8:	6153      	str	r3, [r2, #20]
	unsigned char Temp_Buffer2[2] = {colour>>8, colour};
 80110ea:	887b      	ldrh	r3, [r7, #2]
 80110ec:	0a1b      	lsrs	r3, r3, #8
 80110ee:	b29b      	uxth	r3, r3
 80110f0:	b2db      	uxtb	r3, r3
 80110f2:	733b      	strb	r3, [r7, #12]
 80110f4:	887b      	ldrh	r3, [r7, #2]
 80110f6:	b2db      	uxtb	r3, r3
 80110f8:	737b      	strb	r3, [r7, #13]
	//HAL_SPI_Transmit(HSPI_INSTANCE, Temp_Buffer2, 2, 1 );
	_SPI_SendByteMultiByte(Temp_Buffer2, 2, 0, 1);
 80110fa:	f107 000c 	add.w	r0, r7, #12
 80110fe:	2301      	movs	r3, #1
 8011100:	2200      	movs	r2, #0
 8011102:	2102      	movs	r1, #2
 8011104:	f000 fa9a 	bl	801163c <_SPI_SendByteMultiByte>
	for(int s=0; s < SPI_DELAY_HOLD; s++) LCD_CS_PORT->ODR &= ~(LCD_CS_PIN);
 8011108:	2300      	movs	r3, #0
 801110a:	623b      	str	r3, [r7, #32]
 801110c:	e008      	b.n	8011120 <ILI9341_Draw_Pixel+0x248>
 801110e:	4b11      	ldr	r3, [pc, #68]	; (8011154 <ILI9341_Draw_Pixel+0x27c>)
 8011110:	695b      	ldr	r3, [r3, #20]
 8011112:	4a10      	ldr	r2, [pc, #64]	; (8011154 <ILI9341_Draw_Pixel+0x27c>)
 8011114:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8011118:	6153      	str	r3, [r2, #20]
 801111a:	6a3b      	ldr	r3, [r7, #32]
 801111c:	3301      	adds	r3, #1
 801111e:	623b      	str	r3, [r7, #32]
 8011120:	6a3b      	ldr	r3, [r7, #32]
 8011122:	2b02      	cmp	r3, #2
 8011124:	ddf3      	ble.n	801110e <ILI9341_Draw_Pixel+0x236>
	for(int s=0; s < SPI_DELAY_HOLD; s++) LCD_CS_PORT->ODR &= ~(LCD_CS_PIN);
 8011126:	2300      	movs	r3, #0
 8011128:	61fb      	str	r3, [r7, #28]
 801112a:	e008      	b.n	801113e <ILI9341_Draw_Pixel+0x266>
 801112c:	4b09      	ldr	r3, [pc, #36]	; (8011154 <ILI9341_Draw_Pixel+0x27c>)
 801112e:	695b      	ldr	r3, [r3, #20]
 8011130:	4a08      	ldr	r2, [pc, #32]	; (8011154 <ILI9341_Draw_Pixel+0x27c>)
 8011132:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8011136:	6153      	str	r3, [r2, #20]
 8011138:	69fb      	ldr	r3, [r7, #28]
 801113a:	3301      	adds	r3, #1
 801113c:	61fb      	str	r3, [r7, #28]
 801113e:	69fb      	ldr	r3, [r7, #28]
 8011140:	2b02      	cmp	r3, #2
 8011142:	ddf3      	ble.n	801112c <ILI9341_Draw_Pixel+0x254>
	for(int s=0; s < SPI_DELAY_HOLD; s++) LCD_CS_PORT->ODR &= ~(LCD_CS_PIN);
 8011144:	2300      	movs	r3, #0
 8011146:	61bb      	str	r3, [r7, #24]
 8011148:	e00f      	b.n	801116a <ILI9341_Draw_Pixel+0x292>
 801114a:	bf00      	nop
 801114c:	20000ebe 	.word	0x20000ebe
 8011150:	20000ebc 	.word	0x20000ebc
 8011154:	48000400 	.word	0x48000400
 8011158:	4b0b      	ldr	r3, [pc, #44]	; (8011188 <ILI9341_Draw_Pixel+0x2b0>)
 801115a:	695b      	ldr	r3, [r3, #20]
 801115c:	4a0a      	ldr	r2, [pc, #40]	; (8011188 <ILI9341_Draw_Pixel+0x2b0>)
 801115e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8011162:	6153      	str	r3, [r2, #20]
 8011164:	69bb      	ldr	r3, [r7, #24]
 8011166:	3301      	adds	r3, #1
 8011168:	61bb      	str	r3, [r7, #24]
 801116a:	69bb      	ldr	r3, [r7, #24]
 801116c:	2b02      	cmp	r3, #2
 801116e:	ddf3      	ble.n	8011158 <ILI9341_Draw_Pixel+0x280>


	LCD_CS_PORT->ODR |= LCD_CS_PIN;
 8011170:	4b05      	ldr	r3, [pc, #20]	; (8011188 <ILI9341_Draw_Pixel+0x2b0>)
 8011172:	695b      	ldr	r3, [r3, #20]
 8011174:	4a04      	ldr	r2, [pc, #16]	; (8011188 <ILI9341_Draw_Pixel+0x2b0>)
 8011176:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 801117a:	6153      	str	r3, [r2, #20]
 801117c:	e000      	b.n	8011180 <ILI9341_Draw_Pixel+0x2a8>
	if((x >= LCD_WIDTH) || (y >= LCD_HEIGHT)) return;	//OUT OF BOUNDS!
 801117e:	bf00      	nop


}
 8011180:	3738      	adds	r7, #56	; 0x38
 8011182:	46bd      	mov	sp, r7
 8011184:	bd80      	pop	{r7, pc}
 8011186:	bf00      	nop
 8011188:	48000400 	.word	0x48000400

0801118c <ILI9341_Draw_Rectangle>:
 *
 *
 */

void ILI9341_Draw_Rectangle(uint16_t xpos, uint16_t ypos, uint16_t width, uint16_t height, uint16_t colour, CHUNK_Type chunk_type)
{
 801118c:	b590      	push	{r4, r7, lr}
 801118e:	b087      	sub	sp, #28
 8011190:	af02      	add	r7, sp, #8
 8011192:	4604      	mov	r4, r0
 8011194:	4608      	mov	r0, r1
 8011196:	4611      	mov	r1, r2
 8011198:	461a      	mov	r2, r3
 801119a:	4623      	mov	r3, r4
 801119c:	80fb      	strh	r3, [r7, #6]
 801119e:	4603      	mov	r3, r0
 80111a0:	80bb      	strh	r3, [r7, #4]
 80111a2:	460b      	mov	r3, r1
 80111a4:	807b      	strh	r3, [r7, #2]
 80111a6:	4613      	mov	r3, r2
 80111a8:	803b      	strh	r3, [r7, #0]
	if((xpos >=LCD_WIDTH) || (ypos >=LCD_HEIGHT)) return;
 80111aa:	4b41      	ldr	r3, [pc, #260]	; (80112b0 <ILI9341_Draw_Rectangle+0x124>)
 80111ac:	881b      	ldrh	r3, [r3, #0]
 80111ae:	b29b      	uxth	r3, r3
 80111b0:	88fa      	ldrh	r2, [r7, #6]
 80111b2:	429a      	cmp	r2, r3
 80111b4:	d278      	bcs.n	80112a8 <ILI9341_Draw_Rectangle+0x11c>
 80111b6:	4b3f      	ldr	r3, [pc, #252]	; (80112b4 <ILI9341_Draw_Rectangle+0x128>)
 80111b8:	881b      	ldrh	r3, [r3, #0]
 80111ba:	b29b      	uxth	r3, r3
 80111bc:	88ba      	ldrh	r2, [r7, #4]
 80111be:	429a      	cmp	r2, r3
 80111c0:	d272      	bcs.n	80112a8 <ILI9341_Draw_Rectangle+0x11c>
	if((xpos+width-1)>=LCD_WIDTH)
 80111c2:	88fa      	ldrh	r2, [r7, #6]
 80111c4:	887b      	ldrh	r3, [r7, #2]
 80111c6:	4413      	add	r3, r2
 80111c8:	3b01      	subs	r3, #1
 80111ca:	4a39      	ldr	r2, [pc, #228]	; (80112b0 <ILI9341_Draw_Rectangle+0x124>)
 80111cc:	8812      	ldrh	r2, [r2, #0]
 80111ce:	b292      	uxth	r2, r2
 80111d0:	4293      	cmp	r3, r2
 80111d2:	db05      	blt.n	80111e0 <ILI9341_Draw_Rectangle+0x54>
		{
			width=LCD_WIDTH-xpos;
 80111d4:	4b36      	ldr	r3, [pc, #216]	; (80112b0 <ILI9341_Draw_Rectangle+0x124>)
 80111d6:	881b      	ldrh	r3, [r3, #0]
 80111d8:	b29a      	uxth	r2, r3
 80111da:	88fb      	ldrh	r3, [r7, #6]
 80111dc:	1ad3      	subs	r3, r2, r3
 80111de:	807b      	strh	r3, [r7, #2]
		}
	if((ypos+height-1)>=LCD_HEIGHT)
 80111e0:	88ba      	ldrh	r2, [r7, #4]
 80111e2:	883b      	ldrh	r3, [r7, #0]
 80111e4:	4413      	add	r3, r2
 80111e6:	3b01      	subs	r3, #1
 80111e8:	4a32      	ldr	r2, [pc, #200]	; (80112b4 <ILI9341_Draw_Rectangle+0x128>)
 80111ea:	8812      	ldrh	r2, [r2, #0]
 80111ec:	b292      	uxth	r2, r2
 80111ee:	4293      	cmp	r3, r2
 80111f0:	db05      	blt.n	80111fe <ILI9341_Draw_Rectangle+0x72>
		{
			height=LCD_HEIGHT-ypos;
 80111f2:	4b30      	ldr	r3, [pc, #192]	; (80112b4 <ILI9341_Draw_Rectangle+0x128>)
 80111f4:	881b      	ldrh	r3, [r3, #0]
 80111f6:	b29a      	uxth	r2, r3
 80111f8:	88bb      	ldrh	r3, [r7, #4]
 80111fa:	1ad3      	subs	r3, r2, r3
 80111fc:	803b      	strh	r3, [r7, #0]
		}
	ILI9341_Set_Frame(	xpos,
						ypos,
						(xpos + width) - 1,
 80111fe:	88fa      	ldrh	r2, [r7, #6]
 8011200:	887b      	ldrh	r3, [r7, #2]
 8011202:	4413      	add	r3, r2
 8011204:	b29b      	uxth	r3, r3
	ILI9341_Set_Frame(	xpos,
 8011206:	3b01      	subs	r3, #1
 8011208:	b29c      	uxth	r4, r3
						(ypos + height) - 1);
 801120a:	88ba      	ldrh	r2, [r7, #4]
 801120c:	883b      	ldrh	r3, [r7, #0]
 801120e:	4413      	add	r3, r2
 8011210:	b29b      	uxth	r3, r3
	ILI9341_Set_Frame(	xpos,
 8011212:	3b01      	subs	r3, #1
 8011214:	b29b      	uxth	r3, r3
 8011216:	88b9      	ldrh	r1, [r7, #4]
 8011218:	88f8      	ldrh	r0, [r7, #6]
 801121a:	4622      	mov	r2, r4
 801121c:	f7ff fde6 	bl	8010dec <ILI9341_Set_Frame>
	// if odd numbered rect area is requested, we round down to nearest even number
	// to keep _LCD_Write_Frame() happy.

	// Note, truncated pixel will be needed at function end.

	uint16_t size = height*width;
 8011220:	883a      	ldrh	r2, [r7, #0]
 8011222:	887b      	ldrh	r3, [r7, #2]
 8011224:	fb12 f303 	smulbb	r3, r2, r3
 8011228:	81fb      	strh	r3, [r7, #14]
	uint8_t truncated = 0;
 801122a:	2300      	movs	r3, #0
 801122c:	737b      	strb	r3, [r7, #13]

	if((size & 1) && (size > 1))		// don't round down to zero!
 801122e:	89fb      	ldrh	r3, [r7, #14]
 8011230:	f003 0301 	and.w	r3, r3, #1
 8011234:	2b00      	cmp	r3, #0
 8011236:	d009      	beq.n	801124c <ILI9341_Draw_Rectangle+0xc0>
 8011238:	89fb      	ldrh	r3, [r7, #14]
 801123a:	2b01      	cmp	r3, #1
 801123c:	d906      	bls.n	801124c <ILI9341_Draw_Rectangle+0xc0>
	{
		truncated = 1;
 801123e:	2301      	movs	r3, #1
 8011240:	737b      	strb	r3, [r7, #13]
	 	size = ((size >> 1) * 2);
 8011242:	89fb      	ldrh	r3, [r7, #14]
 8011244:	085b      	lsrs	r3, r3, #1
 8011246:	b29b      	uxth	r3, r3
 8011248:	005b      	lsls	r3, r3, #1
 801124a:	81fb      	strh	r3, [r7, #14]
	}

	_LCD_Write_Frame(	xpos,
 801124c:	89fc      	ldrh	r4, [r7, #14]
 801124e:	8c3a      	ldrh	r2, [r7, #32]
 8011250:	88b9      	ldrh	r1, [r7, #4]
 8011252:	88f8      	ldrh	r0, [r7, #6]
 8011254:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8011258:	9300      	str	r3, [sp, #0]
 801125a:	4623      	mov	r3, r4
 801125c:	f000 f8a8 	bl	80113b0 <_LCD_Write_Frame>
						colour,
						size,
						chunk_type);

	// add the truncated pixel now
	if(truncated)
 8011260:	7b7b      	ldrb	r3, [r7, #13]
 8011262:	2b00      	cmp	r3, #0
 8011264:	d021      	beq.n	80112aa <ILI9341_Draw_Rectangle+0x11e>
	{
		ILI9341_Draw_Pixel(	(xpos + width) - 2,
 8011266:	88fa      	ldrh	r2, [r7, #6]
 8011268:	887b      	ldrh	r3, [r7, #2]
 801126a:	4413      	add	r3, r2
 801126c:	b29b      	uxth	r3, r3
 801126e:	3b02      	subs	r3, #2
 8011270:	b298      	uxth	r0, r3
							(ypos + height) - 1,
 8011272:	88ba      	ldrh	r2, [r7, #4]
 8011274:	883b      	ldrh	r3, [r7, #0]
 8011276:	4413      	add	r3, r2
 8011278:	b29b      	uxth	r3, r3
		ILI9341_Draw_Pixel(	(xpos + width) - 2,
 801127a:	3b01      	subs	r3, #1
 801127c:	b29b      	uxth	r3, r3
 801127e:	8c3a      	ldrh	r2, [r7, #32]
 8011280:	4619      	mov	r1, r3
 8011282:	f7ff fe29 	bl	8010ed8 <ILI9341_Draw_Pixel>
							colour);
		ILI9341_Draw_Pixel(	(xpos + width) - 1,
 8011286:	88fa      	ldrh	r2, [r7, #6]
 8011288:	887b      	ldrh	r3, [r7, #2]
 801128a:	4413      	add	r3, r2
 801128c:	b29b      	uxth	r3, r3
 801128e:	3b01      	subs	r3, #1
 8011290:	b298      	uxth	r0, r3
							(ypos + height) - 1,
 8011292:	88ba      	ldrh	r2, [r7, #4]
 8011294:	883b      	ldrh	r3, [r7, #0]
 8011296:	4413      	add	r3, r2
 8011298:	b29b      	uxth	r3, r3
		ILI9341_Draw_Pixel(	(xpos + width) - 1,
 801129a:	3b01      	subs	r3, #1
 801129c:	b29b      	uxth	r3, r3
 801129e:	8c3a      	ldrh	r2, [r7, #32]
 80112a0:	4619      	mov	r1, r3
 80112a2:	f7ff fe19 	bl	8010ed8 <ILI9341_Draw_Pixel>
 80112a6:	e000      	b.n	80112aa <ILI9341_Draw_Rectangle+0x11e>
	if((xpos >=LCD_WIDTH) || (ypos >=LCD_HEIGHT)) return;
 80112a8:	bf00      	nop
							colour);
	}
}
 80112aa:	3714      	adds	r7, #20
 80112ac:	46bd      	mov	sp, r7
 80112ae:	bd90      	pop	{r4, r7, pc}
 80112b0:	20000ebe 	.word	0x20000ebe
 80112b4:	20000ebc 	.word	0x20000ebc

080112b8 <ILI9341_Set_Rotation>:
 *
 * 	Set LCD orientation
 *
 */
void ILI9341_Set_Rotation(uint8_t rotation)
{
 80112b8:	b580      	push	{r7, lr}
 80112ba:	b084      	sub	sp, #16
 80112bc:	af00      	add	r7, sp, #0
 80112be:	4603      	mov	r3, r0
 80112c0:	71fb      	strb	r3, [r7, #7]

	uint8_t screen_rotation = rotation;
 80112c2:	79fb      	ldrb	r3, [r7, #7]
 80112c4:	73fb      	strb	r3, [r7, #15]

	_LCD_SendCommand(0x36);
 80112c6:	2036      	movs	r0, #54	; 0x36
 80112c8:	f000 f922 	bl	8011510 <_LCD_SendCommand>
	//HAL_Delay(1);

	switch(screen_rotation)
 80112cc:	7bfb      	ldrb	r3, [r7, #15]
 80112ce:	2b03      	cmp	r3, #3
 80112d0:	d836      	bhi.n	8011340 <ILI9341_Set_Rotation+0x88>
 80112d2:	a201      	add	r2, pc, #4	; (adr r2, 80112d8 <ILI9341_Set_Rotation+0x20>)
 80112d4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80112d8:	080112e9 	.word	0x080112e9
 80112dc:	080112ff 	.word	0x080112ff
 80112e0:	08011315 	.word	0x08011315
 80112e4:	0801132b 	.word	0x0801132b
	{
		case SCREEN_VERTICAL_1:
			_LCD_SendData(0x40|0x08);
 80112e8:	2048      	movs	r0, #72	; 0x48
 80112ea:	f000 f943 	bl	8011574 <_LCD_SendData>
			LCD_WIDTH = 240;
 80112ee:	4b17      	ldr	r3, [pc, #92]	; (801134c <ILI9341_Set_Rotation+0x94>)
 80112f0:	22f0      	movs	r2, #240	; 0xf0
 80112f2:	801a      	strh	r2, [r3, #0]
			LCD_HEIGHT = 320;
 80112f4:	4b16      	ldr	r3, [pc, #88]	; (8011350 <ILI9341_Set_Rotation+0x98>)
 80112f6:	f44f 72a0 	mov.w	r2, #320	; 0x140
 80112fa:	801a      	strh	r2, [r3, #0]
			break;
 80112fc:	e021      	b.n	8011342 <ILI9341_Set_Rotation+0x8a>
		case SCREEN_HORIZONTAL_1:
			_LCD_SendData(0x20|0x08);
 80112fe:	2028      	movs	r0, #40	; 0x28
 8011300:	f000 f938 	bl	8011574 <_LCD_SendData>
			LCD_WIDTH  = 320;
 8011304:	4b11      	ldr	r3, [pc, #68]	; (801134c <ILI9341_Set_Rotation+0x94>)
 8011306:	f44f 72a0 	mov.w	r2, #320	; 0x140
 801130a:	801a      	strh	r2, [r3, #0]
			LCD_HEIGHT = 240;
 801130c:	4b10      	ldr	r3, [pc, #64]	; (8011350 <ILI9341_Set_Rotation+0x98>)
 801130e:	22f0      	movs	r2, #240	; 0xf0
 8011310:	801a      	strh	r2, [r3, #0]
			break;
 8011312:	e016      	b.n	8011342 <ILI9341_Set_Rotation+0x8a>
		case SCREEN_VERTICAL_2:
			_LCD_SendData(0x80|0x08);
 8011314:	2088      	movs	r0, #136	; 0x88
 8011316:	f000 f92d 	bl	8011574 <_LCD_SendData>
			LCD_WIDTH  = 240;
 801131a:	4b0c      	ldr	r3, [pc, #48]	; (801134c <ILI9341_Set_Rotation+0x94>)
 801131c:	22f0      	movs	r2, #240	; 0xf0
 801131e:	801a      	strh	r2, [r3, #0]
			LCD_HEIGHT = 320;
 8011320:	4b0b      	ldr	r3, [pc, #44]	; (8011350 <ILI9341_Set_Rotation+0x98>)
 8011322:	f44f 72a0 	mov.w	r2, #320	; 0x140
 8011326:	801a      	strh	r2, [r3, #0]
			break;
 8011328:	e00b      	b.n	8011342 <ILI9341_Set_Rotation+0x8a>
		case SCREEN_HORIZONTAL_2:
			_LCD_SendData(0x40|0x80|0x20|0x08);
 801132a:	20e8      	movs	r0, #232	; 0xe8
 801132c:	f000 f922 	bl	8011574 <_LCD_SendData>
			LCD_WIDTH  = 320;
 8011330:	4b06      	ldr	r3, [pc, #24]	; (801134c <ILI9341_Set_Rotation+0x94>)
 8011332:	f44f 72a0 	mov.w	r2, #320	; 0x140
 8011336:	801a      	strh	r2, [r3, #0]
			LCD_HEIGHT = 240;
 8011338:	4b05      	ldr	r3, [pc, #20]	; (8011350 <ILI9341_Set_Rotation+0x98>)
 801133a:	22f0      	movs	r2, #240	; 0xf0
 801133c:	801a      	strh	r2, [r3, #0]
			break;
 801133e:	e000      	b.n	8011342 <ILI9341_Set_Rotation+0x8a>
		default:
			//EXIT IF SCREEN ROTATION NOT VALID!
			break;
 8011340:	bf00      	nop
	}
}
 8011342:	bf00      	nop
 8011344:	3710      	adds	r7, #16
 8011346:	46bd      	mov	sp, r7
 8011348:	bd80      	pop	{r7, pc}
 801134a:	bf00      	nop
 801134c:	20000ebe 	.word	0x20000ebe
 8011350:	20000ebc 	.word	0x20000ebc

08011354 <_LCD_Enable>:
 *
 * Enable LCD display
 *
 */
void _LCD_Enable()
{
 8011354:	b480      	push	{r7}
 8011356:	af00      	add	r7, sp, #0
	LCD_RST_PORT->ODR |= LCD_RST_PIN;
 8011358:	4b05      	ldr	r3, [pc, #20]	; (8011370 <_LCD_Enable+0x1c>)
 801135a:	695b      	ldr	r3, [r3, #20]
 801135c:	4a04      	ldr	r2, [pc, #16]	; (8011370 <_LCD_Enable+0x1c>)
 801135e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8011362:	6153      	str	r3, [r2, #20]
}
 8011364:	bf00      	nop
 8011366:	46bd      	mov	sp, r7
 8011368:	f85d 7b04 	ldr.w	r7, [sp], #4
 801136c:	4770      	bx	lr
 801136e:	bf00      	nop
 8011370:	48000400 	.word	0x48000400

08011374 <_LCD_Reset>:
 *
 * 	Reset LCD
 *
 */
void _LCD_Reset()
{
 8011374:	b580      	push	{r7, lr}
 8011376:	af00      	add	r7, sp, #0
	LCD_RST_PORT->ODR &= ~(LCD_RST_PIN);
 8011378:	4b0c      	ldr	r3, [pc, #48]	; (80113ac <_LCD_Reset+0x38>)
 801137a:	695b      	ldr	r3, [r3, #20]
 801137c:	4a0b      	ldr	r2, [pc, #44]	; (80113ac <_LCD_Reset+0x38>)
 801137e:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8011382:	6153      	str	r3, [r2, #20]
	HAL_Delay(200);
 8011384:	20c8      	movs	r0, #200	; 0xc8
 8011386:	f7f7 fe4f 	bl	8009028 <HAL_Delay>
	LCD_CS_PORT->ODR &= ~(LCD_CS_PIN);
 801138a:	4b08      	ldr	r3, [pc, #32]	; (80113ac <_LCD_Reset+0x38>)
 801138c:	695b      	ldr	r3, [r3, #20]
 801138e:	4a07      	ldr	r2, [pc, #28]	; (80113ac <_LCD_Reset+0x38>)
 8011390:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8011394:	6153      	str	r3, [r2, #20]
	HAL_Delay(200);
 8011396:	20c8      	movs	r0, #200	; 0xc8
 8011398:	f7f7 fe46 	bl	8009028 <HAL_Delay>
	LCD_RST_PORT->ODR |= LCD_RST_PIN;
 801139c:	4b03      	ldr	r3, [pc, #12]	; (80113ac <_LCD_Reset+0x38>)
 801139e:	695b      	ldr	r3, [r3, #20]
 80113a0:	4a02      	ldr	r2, [pc, #8]	; (80113ac <_LCD_Reset+0x38>)
 80113a2:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80113a6:	6153      	str	r3, [r2, #20]
}
 80113a8:	bf00      	nop
 80113aa:	bd80      	pop	{r7, pc}
 80113ac:	48000400 	.word	0x48000400

080113b0 <_LCD_Write_Frame>:
 *
 *	entire data sent to this function is a CHUNK < BURST_MAX_SIZE
 *	each CHUNK is broken down into smaller BLOCKS
 */
void _LCD_Write_Frame(uint16_t chunk_xpos, uint16_t chunk_ypos, uint16_t colour, uint32_t chunk_size, CHUNK_Type chunk_type)
{
 80113b0:	b5b0      	push	{r4, r5, r7, lr}
 80113b2:	b08e      	sub	sp, #56	; 0x38
 80113b4:	af00      	add	r7, sp, #0
 80113b6:	607b      	str	r3, [r7, #4]
 80113b8:	4603      	mov	r3, r0
 80113ba:	81fb      	strh	r3, [r7, #14]
 80113bc:	460b      	mov	r3, r1
 80113be:	81bb      	strh	r3, [r7, #12]
 80113c0:	4613      	mov	r3, r2
 80113c2:	817b      	strh	r3, [r7, #10]
 80113c4:	466b      	mov	r3, sp
 80113c6:	461d      	mov	r5, r3

	uint32_t buffer_size = 0;
 80113c8:	2300      	movs	r3, #0
 80113ca:	62fb      	str	r3, [r7, #44]	; 0x2c
	if((chunk_size*2) < BURST_MAX_SIZE)
 80113cc:	687b      	ldr	r3, [r7, #4]
 80113ce:	005b      	lsls	r3, r3, #1
 80113d0:	4a4d      	ldr	r2, [pc, #308]	; (8011508 <_LCD_Write_Frame+0x158>)
 80113d2:	8812      	ldrh	r2, [r2, #0]
 80113d4:	4293      	cmp	r3, r2
 80113d6:	d202      	bcs.n	80113de <_LCD_Write_Frame+0x2e>
	{
		buffer_size = chunk_size;
 80113d8:	687b      	ldr	r3, [r7, #4]
 80113da:	62fb      	str	r3, [r7, #44]	; 0x2c
 80113dc:	e002      	b.n	80113e4 <_LCD_Write_Frame+0x34>
	}
	else
	{
		buffer_size = BURST_MAX_SIZE;
 80113de:	4b4a      	ldr	r3, [pc, #296]	; (8011508 <_LCD_Write_Frame+0x158>)
 80113e0:	881b      	ldrh	r3, [r3, #0]
 80113e2:	62fb      	str	r3, [r7, #44]	; 0x2c
	}

	unsigned char chifted = 	colour>>8;;
 80113e4:	897b      	ldrh	r3, [r7, #10]
 80113e6:	0a1b      	lsrs	r3, r3, #8
 80113e8:	b29b      	uxth	r3, r3
 80113ea:	77fb      	strb	r3, [r7, #31]
	unsigned char burst_buffer[buffer_size];
 80113ec:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80113ee:	4603      	mov	r3, r0
 80113f0:	3b01      	subs	r3, #1
 80113f2:	61bb      	str	r3, [r7, #24]
 80113f4:	4601      	mov	r1, r0
 80113f6:	f04f 0200 	mov.w	r2, #0
 80113fa:	f04f 0300 	mov.w	r3, #0
 80113fe:	f04f 0400 	mov.w	r4, #0
 8011402:	00d4      	lsls	r4, r2, #3
 8011404:	ea44 7451 	orr.w	r4, r4, r1, lsr #29
 8011408:	00cb      	lsls	r3, r1, #3
 801140a:	4601      	mov	r1, r0
 801140c:	f04f 0200 	mov.w	r2, #0
 8011410:	f04f 0300 	mov.w	r3, #0
 8011414:	f04f 0400 	mov.w	r4, #0
 8011418:	00d4      	lsls	r4, r2, #3
 801141a:	ea44 7451 	orr.w	r4, r4, r1, lsr #29
 801141e:	00cb      	lsls	r3, r1, #3
 8011420:	1dc3      	adds	r3, r0, #7
 8011422:	08db      	lsrs	r3, r3, #3
 8011424:	00db      	lsls	r3, r3, #3
 8011426:	ebad 0d03 	sub.w	sp, sp, r3
 801142a:	466b      	mov	r3, sp
 801142c:	3300      	adds	r3, #0
 801142e:	617b      	str	r3, [r7, #20]
	for(uint32_t j = 0; j < buffer_size; j+=2)
 8011430:	2300      	movs	r3, #0
 8011432:	633b      	str	r3, [r7, #48]	; 0x30
 8011434:	e00d      	b.n	8011452 <_LCD_Write_Frame+0xa2>
	{
			burst_buffer[j] = 	chifted;
 8011436:	697a      	ldr	r2, [r7, #20]
 8011438:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801143a:	4413      	add	r3, r2
 801143c:	7ffa      	ldrb	r2, [r7, #31]
 801143e:	701a      	strb	r2, [r3, #0]
			burst_buffer[j+1] = colour;
 8011440:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011442:	3301      	adds	r3, #1
 8011444:	897a      	ldrh	r2, [r7, #10]
 8011446:	b2d1      	uxtb	r1, r2
 8011448:	697a      	ldr	r2, [r7, #20]
 801144a:	54d1      	strb	r1, [r2, r3]
	for(uint32_t j = 0; j < buffer_size; j+=2)
 801144c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801144e:	3302      	adds	r3, #2
 8011450:	633b      	str	r3, [r7, #48]	; 0x30
 8011452:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8011454:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011456:	429a      	cmp	r2, r3
 8011458:	d3ed      	bcc.n	8011436 <_LCD_Write_Frame+0x86>
	}
	
	uint32_t Sending_size = chunk_size*2;
 801145a:	687b      	ldr	r3, [r7, #4]
 801145c:	005b      	lsls	r3, r3, #1
 801145e:	613b      	str	r3, [r7, #16]

	// make sure we don't divide by size=0
	uint32_t Sending_in_Block = 1;
 8011460:	2301      	movs	r3, #1
 8011462:	637b      	str	r3, [r7, #52]	; 0x34
	uint32_t Remainder_from_block = 0;
 8011464:	2300      	movs	r3, #0
 8011466:	62bb      	str	r3, [r7, #40]	; 0x28
	if(chunk_size > 0)
 8011468:	687b      	ldr	r3, [r7, #4]
 801146a:	2b00      	cmp	r3, #0
 801146c:	d00d      	beq.n	801148a <_LCD_Write_Frame+0xda>
	{
			Sending_in_Block 		= Sending_size/buffer_size;
 801146e:	693a      	ldr	r2, [r7, #16]
 8011470:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011472:	fbb2 f3f3 	udiv	r3, r2, r3
 8011476:	637b      	str	r3, [r7, #52]	; 0x34
			Remainder_from_block 	= Sending_size%buffer_size;
 8011478:	693b      	ldr	r3, [r7, #16]
 801147a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 801147c:	fbb3 f2f2 	udiv	r2, r3, r2
 8011480:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8011482:	fb01 f202 	mul.w	r2, r1, r2
 8011486:	1a9b      	subs	r3, r3, r2
 8011488:	62bb      	str	r3, [r7, #40]	; 0x28
	}

	// send blocks
	LCD_DC_PORT->ODR |= LCD_DC_PIN;
 801148a:	4b20      	ldr	r3, [pc, #128]	; (801150c <_LCD_Write_Frame+0x15c>)
 801148c:	695b      	ldr	r3, [r3, #20]
 801148e:	4a1f      	ldr	r2, [pc, #124]	; (801150c <_LCD_Write_Frame+0x15c>)
 8011490:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8011494:	6153      	str	r3, [r2, #20]
	LCD_CS_PORT->ODR &= ~(LCD_CS_PIN);
 8011496:	4b1d      	ldr	r3, [pc, #116]	; (801150c <_LCD_Write_Frame+0x15c>)
 8011498:	695b      	ldr	r3, [r3, #20]
 801149a:	4a1c      	ldr	r2, [pc, #112]	; (801150c <_LCD_Write_Frame+0x15c>)
 801149c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80114a0:	6153      	str	r3, [r2, #20]
//TODO
	if(Sending_in_Block != 0)
 80114a2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80114a4:	2b00      	cmp	r3, #0
 80114a6:	d00f      	beq.n	80114c8 <_LCD_Write_Frame+0x118>
	{
		for(uint32_t j = 0; j < (Sending_in_Block); j++)
 80114a8:	2300      	movs	r3, #0
 80114aa:	627b      	str	r3, [r7, #36]	; 0x24
 80114ac:	e008      	b.n	80114c0 <_LCD_Write_Frame+0x110>
		{
			_SPI_SendByteMultiByte(burst_buffer, buffer_size, 0, 10);
 80114ae:	6978      	ldr	r0, [r7, #20]
 80114b0:	230a      	movs	r3, #10
 80114b2:	2200      	movs	r2, #0
 80114b4:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80114b6:	f000 f8c1 	bl	801163c <_SPI_SendByteMultiByte>
		for(uint32_t j = 0; j < (Sending_in_Block); j++)
 80114ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80114bc:	3301      	adds	r3, #1
 80114be:	627b      	str	r3, [r7, #36]	; 0x24
 80114c0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80114c2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80114c4:	429a      	cmp	r2, r3
 80114c6:	d3f2      	bcc.n	80114ae <_LCD_Write_Frame+0xfe>
		}
	}

	_SPI_SendByteMultiByte(burst_buffer, Remainder_from_block, 0, 10);
 80114c8:	6978      	ldr	r0, [r7, #20]
 80114ca:	230a      	movs	r3, #10
 80114cc:	2200      	movs	r2, #0
 80114ce:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80114d0:	f000 f8b4 	bl	801163c <_SPI_SendByteMultiByte>


	// Additional SPI CS "low" hold
	for(int x=0; x < SPI_DELAY_HOLD; x++)
 80114d4:	2300      	movs	r3, #0
 80114d6:	623b      	str	r3, [r7, #32]
 80114d8:	e008      	b.n	80114ec <_LCD_Write_Frame+0x13c>
		LCD_CS_PORT->ODR &= ~(LCD_CS_PIN);
 80114da:	4b0c      	ldr	r3, [pc, #48]	; (801150c <_LCD_Write_Frame+0x15c>)
 80114dc:	695b      	ldr	r3, [r3, #20]
 80114de:	4a0b      	ldr	r2, [pc, #44]	; (801150c <_LCD_Write_Frame+0x15c>)
 80114e0:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80114e4:	6153      	str	r3, [r2, #20]
	for(int x=0; x < SPI_DELAY_HOLD; x++)
 80114e6:	6a3b      	ldr	r3, [r7, #32]
 80114e8:	3301      	adds	r3, #1
 80114ea:	623b      	str	r3, [r7, #32]
 80114ec:	6a3b      	ldr	r3, [r7, #32]
 80114ee:	2b02      	cmp	r3, #2
 80114f0:	ddf3      	ble.n	80114da <_LCD_Write_Frame+0x12a>

	LCD_CS_PORT->ODR |= LCD_CS_PIN;
 80114f2:	4b06      	ldr	r3, [pc, #24]	; (801150c <_LCD_Write_Frame+0x15c>)
 80114f4:	695b      	ldr	r3, [r3, #20]
 80114f6:	4a05      	ldr	r2, [pc, #20]	; (801150c <_LCD_Write_Frame+0x15c>)
 80114f8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80114fc:	6153      	str	r3, [r2, #20]
 80114fe:	46ad      	mov	sp, r5

}
 8011500:	bf00      	nop
 8011502:	3738      	adds	r7, #56	; 0x38
 8011504:	46bd      	mov	sp, r7
 8011506:	bdb0      	pop	{r4, r5, r7, pc}
 8011508:	20000ec0 	.word	0x20000ec0
 801150c:	48000400 	.word	0x48000400

08011510 <_LCD_SendCommand>:
 *
 * 	Send command to LCD
 *
 */
void _LCD_SendCommand(uint8_t command)
{
 8011510:	b580      	push	{r7, lr}
 8011512:	b084      	sub	sp, #16
 8011514:	af00      	add	r7, sp, #0
 8011516:	4603      	mov	r3, r0
 8011518:	71fb      	strb	r3, [r7, #7]
	LCD_CS_PORT->ODR &= ~(LCD_CS_PIN);
 801151a:	4b15      	ldr	r3, [pc, #84]	; (8011570 <_LCD_SendCommand+0x60>)
 801151c:	695b      	ldr	r3, [r3, #20]
 801151e:	4a14      	ldr	r2, [pc, #80]	; (8011570 <_LCD_SendCommand+0x60>)
 8011520:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8011524:	6153      	str	r3, [r2, #20]
	LCD_DC_PORT->ODR &= ~(LCD_DC_PIN);
 8011526:	4b12      	ldr	r3, [pc, #72]	; (8011570 <_LCD_SendCommand+0x60>)
 8011528:	695b      	ldr	r3, [r3, #20]
 801152a:	4a11      	ldr	r2, [pc, #68]	; (8011570 <_LCD_SendCommand+0x60>)
 801152c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8011530:	6153      	str	r3, [r2, #20]

	_SPI_SendByte(command, 0 , 0);
 8011532:	79fb      	ldrb	r3, [r7, #7]
 8011534:	2200      	movs	r2, #0
 8011536:	2100      	movs	r1, #0
 8011538:	4618      	mov	r0, r3
 801153a:	f000 f84d 	bl	80115d8 <_SPI_SendByte>

	// Additional SPI CS "low" hold
	for(int x=0; x < SPI_DELAY_HOLD; x++)
 801153e:	2300      	movs	r3, #0
 8011540:	60fb      	str	r3, [r7, #12]
 8011542:	e008      	b.n	8011556 <_LCD_SendCommand+0x46>
		LCD_CS_PORT->ODR &= ~(LCD_CS_PIN);
 8011544:	4b0a      	ldr	r3, [pc, #40]	; (8011570 <_LCD_SendCommand+0x60>)
 8011546:	695b      	ldr	r3, [r3, #20]
 8011548:	4a09      	ldr	r2, [pc, #36]	; (8011570 <_LCD_SendCommand+0x60>)
 801154a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 801154e:	6153      	str	r3, [r2, #20]
	for(int x=0; x < SPI_DELAY_HOLD; x++)
 8011550:	68fb      	ldr	r3, [r7, #12]
 8011552:	3301      	adds	r3, #1
 8011554:	60fb      	str	r3, [r7, #12]
 8011556:	68fb      	ldr	r3, [r7, #12]
 8011558:	2b02      	cmp	r3, #2
 801155a:	ddf3      	ble.n	8011544 <_LCD_SendCommand+0x34>

	LCD_CS_PORT->ODR |= LCD_CS_PIN;
 801155c:	4b04      	ldr	r3, [pc, #16]	; (8011570 <_LCD_SendCommand+0x60>)
 801155e:	695b      	ldr	r3, [r3, #20]
 8011560:	4a03      	ldr	r2, [pc, #12]	; (8011570 <_LCD_SendCommand+0x60>)
 8011562:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8011566:	6153      	str	r3, [r2, #20]
}
 8011568:	bf00      	nop
 801156a:	3710      	adds	r7, #16
 801156c:	46bd      	mov	sp, r7
 801156e:	bd80      	pop	{r7, pc}
 8011570:	48000400 	.word	0x48000400

08011574 <_LCD_SendData>:
 *
 * 	Send Data to LCD
 *
 */
void _LCD_SendData(uint8_t data)
{
 8011574:	b580      	push	{r7, lr}
 8011576:	b084      	sub	sp, #16
 8011578:	af00      	add	r7, sp, #0
 801157a:	4603      	mov	r3, r0
 801157c:	71fb      	strb	r3, [r7, #7]
	LCD_DC_PORT->ODR |= LCD_DC_PIN;
 801157e:	4b15      	ldr	r3, [pc, #84]	; (80115d4 <_LCD_SendData+0x60>)
 8011580:	695b      	ldr	r3, [r3, #20]
 8011582:	4a14      	ldr	r2, [pc, #80]	; (80115d4 <_LCD_SendData+0x60>)
 8011584:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8011588:	6153      	str	r3, [r2, #20]
	LCD_CS_PORT->ODR &= ~(LCD_CS_PIN);
 801158a:	4b12      	ldr	r3, [pc, #72]	; (80115d4 <_LCD_SendData+0x60>)
 801158c:	695b      	ldr	r3, [r3, #20]
 801158e:	4a11      	ldr	r2, [pc, #68]	; (80115d4 <_LCD_SendData+0x60>)
 8011590:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8011594:	6153      	str	r3, [r2, #20]

	_SPI_SendByte(data, 0 , 0);
 8011596:	79fb      	ldrb	r3, [r7, #7]
 8011598:	2200      	movs	r2, #0
 801159a:	2100      	movs	r1, #0
 801159c:	4618      	mov	r0, r3
 801159e:	f000 f81b 	bl	80115d8 <_SPI_SendByte>

	// Additional SPI CS "low" hold
	for(int x=0; x < SPI_DELAY_HOLD; x++)
 80115a2:	2300      	movs	r3, #0
 80115a4:	60fb      	str	r3, [r7, #12]
 80115a6:	e008      	b.n	80115ba <_LCD_SendData+0x46>
		LCD_CS_PORT->ODR &= ~(LCD_CS_PIN);
 80115a8:	4b0a      	ldr	r3, [pc, #40]	; (80115d4 <_LCD_SendData+0x60>)
 80115aa:	695b      	ldr	r3, [r3, #20]
 80115ac:	4a09      	ldr	r2, [pc, #36]	; (80115d4 <_LCD_SendData+0x60>)
 80115ae:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80115b2:	6153      	str	r3, [r2, #20]
	for(int x=0; x < SPI_DELAY_HOLD; x++)
 80115b4:	68fb      	ldr	r3, [r7, #12]
 80115b6:	3301      	adds	r3, #1
 80115b8:	60fb      	str	r3, [r7, #12]
 80115ba:	68fb      	ldr	r3, [r7, #12]
 80115bc:	2b02      	cmp	r3, #2
 80115be:	ddf3      	ble.n	80115a8 <_LCD_SendData+0x34>

	LCD_CS_PORT->ODR &= ~(LCD_CS_PIN);
 80115c0:	4b04      	ldr	r3, [pc, #16]	; (80115d4 <_LCD_SendData+0x60>)
 80115c2:	695b      	ldr	r3, [r3, #20]
 80115c4:	4a03      	ldr	r2, [pc, #12]	; (80115d4 <_LCD_SendData+0x60>)
 80115c6:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80115ca:	6153      	str	r3, [r2, #20]
}
 80115cc:	bf00      	nop
 80115ce:	3710      	adds	r7, #16
 80115d0:	46bd      	mov	sp, r7
 80115d2:	bd80      	pop	{r7, pc}
 80115d4:	48000400 	.word	0x48000400

080115d8 <_SPI_SendByte>:
 *
 * 	Send single byte over SPI using HAL or (optimised) direct-to-register
 *
 */
void _SPI_SendByte(unsigned char data_buffer, uint8_t pre_frame_delay, uint8_t post_frame_delay)
{
 80115d8:	b480      	push	{r7}
 80115da:	b085      	sub	sp, #20
 80115dc:	af00      	add	r7, sp, #0
 80115de:	4603      	mov	r3, r0
 80115e0:	71fb      	strb	r3, [r7, #7]
 80115e2:	460b      	mov	r3, r1
 80115e4:	71bb      	strb	r3, [r7, #6]
 80115e6:	4613      	mov	r3, r2
 80115e8:	717b      	strb	r3, [r7, #5]
#endif

#ifdef USE_BARE_SPI

    // pre frame delay
   	for(int d = 0; d < pre_frame_delay ; d++)
 80115ea:	2300      	movs	r3, #0
 80115ec:	60fb      	str	r3, [r7, #12]
 80115ee:	e003      	b.n	80115f8 <_SPI_SendByte+0x20>
   		asm("nop");
 80115f0:	bf00      	nop
   	for(int d = 0; d < pre_frame_delay ; d++)
 80115f2:	68fb      	ldr	r3, [r7, #12]
 80115f4:	3301      	adds	r3, #1
 80115f6:	60fb      	str	r3, [r7, #12]
 80115f8:	79bb      	ldrb	r3, [r7, #6]
 80115fa:	68fa      	ldr	r2, [r7, #12]
 80115fc:	429a      	cmp	r2, r3
 80115fe:	dbf7      	blt.n	80115f0 <_SPI_SendByte+0x18>

	// check transmit buffer empty
	if((SPI_PERIPH->SR & SPI_SR_TXE) == SPI_SR_TXE)
 8011600:	4b0c      	ldr	r3, [pc, #48]	; (8011634 <_SPI_SendByte+0x5c>)
 8011602:	689b      	ldr	r3, [r3, #8]
 8011604:	f003 0302 	and.w	r3, r3, #2
 8011608:	2b02      	cmp	r3, #2
 801160a:	d102      	bne.n	8011612 <_SPI_SendByte+0x3a>
	{
		*(volatile uint8_t *)&SPI_PERIPH->DR = data_buffer;
 801160c:	4a0a      	ldr	r2, [pc, #40]	; (8011638 <_SPI_SendByte+0x60>)
 801160e:	79fb      	ldrb	r3, [r7, #7]
 8011610:	7013      	strb	r3, [r2, #0]
	}

    // post frame delay
   	for(int d = 0; d < post_frame_delay ; d++)
 8011612:	2300      	movs	r3, #0
 8011614:	60bb      	str	r3, [r7, #8]
 8011616:	e003      	b.n	8011620 <_SPI_SendByte+0x48>
   		asm("nop");
 8011618:	bf00      	nop
   	for(int d = 0; d < post_frame_delay ; d++)
 801161a:	68bb      	ldr	r3, [r7, #8]
 801161c:	3301      	adds	r3, #1
 801161e:	60bb      	str	r3, [r7, #8]
 8011620:	797b      	ldrb	r3, [r7, #5]
 8011622:	68ba      	ldr	r2, [r7, #8]
 8011624:	429a      	cmp	r2, r3
 8011626:	dbf7      	blt.n	8011618 <_SPI_SendByte+0x40>

#endif

}
 8011628:	bf00      	nop
 801162a:	3714      	adds	r7, #20
 801162c:	46bd      	mov	sp, r7
 801162e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011632:	4770      	bx	lr
 8011634:	40003c00 	.word	0x40003c00
 8011638:	40003c0c 	.word	0x40003c0c

0801163c <_SPI_SendByteMultiByte>:
 *
 * 	Send multiple bytes over SPI using HAL or (optimised) direct-to-register
 *
 */
void _SPI_SendByteMultiByte(unsigned char *data_buffer, uint32_t buffer_size, uint8_t pre_frame_delay, uint8_t post_frame_delay)
{
 801163c:	b480      	push	{r7}
 801163e:	b089      	sub	sp, #36	; 0x24
 8011640:	af00      	add	r7, sp, #0
 8011642:	60f8      	str	r0, [r7, #12]
 8011644:	60b9      	str	r1, [r7, #8]
 8011646:	4611      	mov	r1, r2
 8011648:	461a      	mov	r2, r3
 801164a:	460b      	mov	r3, r1
 801164c:	71fb      	strb	r3, [r7, #7]
 801164e:	4613      	mov	r3, r2
 8011650:	71bb      	strb	r3, [r7, #6]
#endif

#ifdef USE_BARE_SPI

    // pre frame delay
   	for(int d = 0; d < pre_frame_delay ; d++)
 8011652:	2300      	movs	r3, #0
 8011654:	61fb      	str	r3, [r7, #28]
 8011656:	e003      	b.n	8011660 <_SPI_SendByteMultiByte+0x24>
   		asm("nop");
 8011658:	bf00      	nop
   	for(int d = 0; d < pre_frame_delay ; d++)
 801165a:	69fb      	ldr	r3, [r7, #28]
 801165c:	3301      	adds	r3, #1
 801165e:	61fb      	str	r3, [r7, #28]
 8011660:	79fb      	ldrb	r3, [r7, #7]
 8011662:	69fa      	ldr	r2, [r7, #28]
 8011664:	429a      	cmp	r2, r3
 8011666:	dbf7      	blt.n	8011658 <_SPI_SendByteMultiByte+0x1c>

	uint8_t *p_data_buffer = (uint8_t *)data_buffer;
 8011668:	68fb      	ldr	r3, [r7, #12]
 801166a:	61bb      	str	r3, [r7, #24]
	//volatile uint16_t TxXferCount = (uint16_t)buffer_size;

	while (buffer_size > 0U)
 801166c:	e01d      	b.n	80116aa <_SPI_SendByteMultiByte+0x6e>
	{
		// check transmit buffer empty
		if ((SPI_PERIPH->SR & SPI_SR_TXE) == SPI_SR_TXE)
 801166e:	4b1c      	ldr	r3, [pc, #112]	; (80116e0 <_SPI_SendByteMultiByte+0xa4>)
 8011670:	689b      	ldr	r3, [r3, #8]
 8011672:	f003 0302 	and.w	r3, r3, #2
 8011676:	2b02      	cmp	r3, #2
 8011678:	d117      	bne.n	80116aa <_SPI_SendByteMultiByte+0x6e>
		{
			if (buffer_size > 1U)
 801167a:	68bb      	ldr	r3, [r7, #8]
 801167c:	2b01      	cmp	r3, #1
 801167e:	d90a      	bls.n	8011696 <_SPI_SendByteMultiByte+0x5a>
			{
				// write on the data register in packing mode
				SPI_PERIPH->DR = *((uint16_t *)p_data_buffer);
 8011680:	69bb      	ldr	r3, [r7, #24]
 8011682:	881a      	ldrh	r2, [r3, #0]
 8011684:	4b16      	ldr	r3, [pc, #88]	; (80116e0 <_SPI_SendByteMultiByte+0xa4>)
 8011686:	60da      	str	r2, [r3, #12]
				p_data_buffer += sizeof(uint16_t);
 8011688:	69bb      	ldr	r3, [r7, #24]
 801168a:	3302      	adds	r3, #2
 801168c:	61bb      	str	r3, [r7, #24]
				buffer_size -= 2U;
 801168e:	68bb      	ldr	r3, [r7, #8]
 8011690:	3b02      	subs	r3, #2
 8011692:	60bb      	str	r3, [r7, #8]
 8011694:	e009      	b.n	80116aa <_SPI_SendByteMultiByte+0x6e>
			}
			else
			{
				*((volatile uint8_t *)&SPI_PERIPH->DR) = (*p_data_buffer);
 8011696:	4a13      	ldr	r2, [pc, #76]	; (80116e4 <_SPI_SendByteMultiByte+0xa8>)
 8011698:	69bb      	ldr	r3, [r7, #24]
 801169a:	781b      	ldrb	r3, [r3, #0]
 801169c:	7013      	strb	r3, [r2, #0]
				p_data_buffer++;
 801169e:	69bb      	ldr	r3, [r7, #24]
 80116a0:	3301      	adds	r3, #1
 80116a2:	61bb      	str	r3, [r7, #24]
				buffer_size--;
 80116a4:	68bb      	ldr	r3, [r7, #8]
 80116a6:	3b01      	subs	r3, #1
 80116a8:	60bb      	str	r3, [r7, #8]
	while (buffer_size > 0U)
 80116aa:	68bb      	ldr	r3, [r7, #8]
 80116ac:	2b00      	cmp	r3, #0
 80116ae:	d1de      	bne.n	801166e <_SPI_SendByteMultiByte+0x32>
			}
		}
	}

	// clear SPI overrun flag
	SPI_PERIPH->SR &= ~(SPI_SR_OVR);
 80116b0:	4b0b      	ldr	r3, [pc, #44]	; (80116e0 <_SPI_SendByteMultiByte+0xa4>)
 80116b2:	689b      	ldr	r3, [r3, #8]
 80116b4:	4a0a      	ldr	r2, [pc, #40]	; (80116e0 <_SPI_SendByteMultiByte+0xa4>)
 80116b6:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80116ba:	6093      	str	r3, [r2, #8]

    // post frame delay
   	for(int d = 0; d < post_frame_delay ; d++)
 80116bc:	2300      	movs	r3, #0
 80116be:	617b      	str	r3, [r7, #20]
 80116c0:	e003      	b.n	80116ca <_SPI_SendByteMultiByte+0x8e>
   		asm("nop");
 80116c2:	bf00      	nop
   	for(int d = 0; d < post_frame_delay ; d++)
 80116c4:	697b      	ldr	r3, [r7, #20]
 80116c6:	3301      	adds	r3, #1
 80116c8:	617b      	str	r3, [r7, #20]
 80116ca:	79bb      	ldrb	r3, [r7, #6]
 80116cc:	697a      	ldr	r2, [r7, #20]
 80116ce:	429a      	cmp	r2, r3
 80116d0:	dbf7      	blt.n	80116c2 <_SPI_SendByteMultiByte+0x86>

#endif

}
 80116d2:	bf00      	nop
 80116d4:	3724      	adds	r7, #36	; 0x24
 80116d6:	46bd      	mov	sp, r7
 80116d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80116dc:	4770      	bx	lr
 80116de:	bf00      	nop
 80116e0:	40003c00 	.word	0x40003c00
 80116e4:	40003c0c 	.word	0x40003c0c

080116e8 <__errno>:
 80116e8:	4b01      	ldr	r3, [pc, #4]	; (80116f0 <__errno+0x8>)
 80116ea:	6818      	ldr	r0, [r3, #0]
 80116ec:	4770      	bx	lr
 80116ee:	bf00      	nop
 80116f0:	20001eb4 	.word	0x20001eb4

080116f4 <__libc_init_array>:
 80116f4:	b570      	push	{r4, r5, r6, lr}
 80116f6:	4e0d      	ldr	r6, [pc, #52]	; (801172c <__libc_init_array+0x38>)
 80116f8:	4c0d      	ldr	r4, [pc, #52]	; (8011730 <__libc_init_array+0x3c>)
 80116fa:	1ba4      	subs	r4, r4, r6
 80116fc:	10a4      	asrs	r4, r4, #2
 80116fe:	2500      	movs	r5, #0
 8011700:	42a5      	cmp	r5, r4
 8011702:	d109      	bne.n	8011718 <__libc_init_array+0x24>
 8011704:	4e0b      	ldr	r6, [pc, #44]	; (8011734 <__libc_init_array+0x40>)
 8011706:	4c0c      	ldr	r4, [pc, #48]	; (8011738 <__libc_init_array+0x44>)
 8011708:	f004 f8a0 	bl	801584c <_init>
 801170c:	1ba4      	subs	r4, r4, r6
 801170e:	10a4      	asrs	r4, r4, #2
 8011710:	2500      	movs	r5, #0
 8011712:	42a5      	cmp	r5, r4
 8011714:	d105      	bne.n	8011722 <__libc_init_array+0x2e>
 8011716:	bd70      	pop	{r4, r5, r6, pc}
 8011718:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 801171c:	4798      	blx	r3
 801171e:	3501      	adds	r5, #1
 8011720:	e7ee      	b.n	8011700 <__libc_init_array+0xc>
 8011722:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8011726:	4798      	blx	r3
 8011728:	3501      	adds	r5, #1
 801172a:	e7f2      	b.n	8011712 <__libc_init_array+0x1e>
 801172c:	08016c88 	.word	0x08016c88
 8011730:	08016c88 	.word	0x08016c88
 8011734:	08016c88 	.word	0x08016c88
 8011738:	08016c8c 	.word	0x08016c8c

0801173c <memset>:
 801173c:	4402      	add	r2, r0
 801173e:	4603      	mov	r3, r0
 8011740:	4293      	cmp	r3, r2
 8011742:	d100      	bne.n	8011746 <memset+0xa>
 8011744:	4770      	bx	lr
 8011746:	f803 1b01 	strb.w	r1, [r3], #1
 801174a:	e7f9      	b.n	8011740 <memset+0x4>

0801174c <__cvt>:
 801174c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8011750:	ec55 4b10 	vmov	r4, r5, d0
 8011754:	9f0d      	ldr	r7, [sp, #52]	; 0x34
 8011756:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 801175a:	2d00      	cmp	r5, #0
 801175c:	460e      	mov	r6, r1
 801175e:	4691      	mov	r9, r2
 8011760:	4619      	mov	r1, r3
 8011762:	bfb8      	it	lt
 8011764:	4622      	movlt	r2, r4
 8011766:	462b      	mov	r3, r5
 8011768:	f027 0720 	bic.w	r7, r7, #32
 801176c:	bfbb      	ittet	lt
 801176e:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 8011772:	461d      	movlt	r5, r3
 8011774:	2300      	movge	r3, #0
 8011776:	232d      	movlt	r3, #45	; 0x2d
 8011778:	bfb8      	it	lt
 801177a:	4614      	movlt	r4, r2
 801177c:	2f46      	cmp	r7, #70	; 0x46
 801177e:	700b      	strb	r3, [r1, #0]
 8011780:	d004      	beq.n	801178c <__cvt+0x40>
 8011782:	2f45      	cmp	r7, #69	; 0x45
 8011784:	d100      	bne.n	8011788 <__cvt+0x3c>
 8011786:	3601      	adds	r6, #1
 8011788:	2102      	movs	r1, #2
 801178a:	e000      	b.n	801178e <__cvt+0x42>
 801178c:	2103      	movs	r1, #3
 801178e:	ab03      	add	r3, sp, #12
 8011790:	9301      	str	r3, [sp, #4]
 8011792:	ab02      	add	r3, sp, #8
 8011794:	9300      	str	r3, [sp, #0]
 8011796:	4632      	mov	r2, r6
 8011798:	4653      	mov	r3, sl
 801179a:	ec45 4b10 	vmov	d0, r4, r5
 801179e:	f000 fe3f 	bl	8012420 <_dtoa_r>
 80117a2:	2f47      	cmp	r7, #71	; 0x47
 80117a4:	4680      	mov	r8, r0
 80117a6:	d102      	bne.n	80117ae <__cvt+0x62>
 80117a8:	f019 0f01 	tst.w	r9, #1
 80117ac:	d026      	beq.n	80117fc <__cvt+0xb0>
 80117ae:	2f46      	cmp	r7, #70	; 0x46
 80117b0:	eb08 0906 	add.w	r9, r8, r6
 80117b4:	d111      	bne.n	80117da <__cvt+0x8e>
 80117b6:	f898 3000 	ldrb.w	r3, [r8]
 80117ba:	2b30      	cmp	r3, #48	; 0x30
 80117bc:	d10a      	bne.n	80117d4 <__cvt+0x88>
 80117be:	2200      	movs	r2, #0
 80117c0:	2300      	movs	r3, #0
 80117c2:	4620      	mov	r0, r4
 80117c4:	4629      	mov	r1, r5
 80117c6:	f7ef f9a7 	bl	8000b18 <__aeabi_dcmpeq>
 80117ca:	b918      	cbnz	r0, 80117d4 <__cvt+0x88>
 80117cc:	f1c6 0601 	rsb	r6, r6, #1
 80117d0:	f8ca 6000 	str.w	r6, [sl]
 80117d4:	f8da 3000 	ldr.w	r3, [sl]
 80117d8:	4499      	add	r9, r3
 80117da:	2200      	movs	r2, #0
 80117dc:	2300      	movs	r3, #0
 80117de:	4620      	mov	r0, r4
 80117e0:	4629      	mov	r1, r5
 80117e2:	f7ef f999 	bl	8000b18 <__aeabi_dcmpeq>
 80117e6:	b938      	cbnz	r0, 80117f8 <__cvt+0xac>
 80117e8:	2230      	movs	r2, #48	; 0x30
 80117ea:	9b03      	ldr	r3, [sp, #12]
 80117ec:	454b      	cmp	r3, r9
 80117ee:	d205      	bcs.n	80117fc <__cvt+0xb0>
 80117f0:	1c59      	adds	r1, r3, #1
 80117f2:	9103      	str	r1, [sp, #12]
 80117f4:	701a      	strb	r2, [r3, #0]
 80117f6:	e7f8      	b.n	80117ea <__cvt+0x9e>
 80117f8:	f8cd 900c 	str.w	r9, [sp, #12]
 80117fc:	9b03      	ldr	r3, [sp, #12]
 80117fe:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8011800:	eba3 0308 	sub.w	r3, r3, r8
 8011804:	4640      	mov	r0, r8
 8011806:	6013      	str	r3, [r2, #0]
 8011808:	b004      	add	sp, #16
 801180a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

0801180e <__exponent>:
 801180e:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8011810:	2900      	cmp	r1, #0
 8011812:	4604      	mov	r4, r0
 8011814:	bfba      	itte	lt
 8011816:	4249      	neglt	r1, r1
 8011818:	232d      	movlt	r3, #45	; 0x2d
 801181a:	232b      	movge	r3, #43	; 0x2b
 801181c:	2909      	cmp	r1, #9
 801181e:	f804 2b02 	strb.w	r2, [r4], #2
 8011822:	7043      	strb	r3, [r0, #1]
 8011824:	dd20      	ble.n	8011868 <__exponent+0x5a>
 8011826:	f10d 0307 	add.w	r3, sp, #7
 801182a:	461f      	mov	r7, r3
 801182c:	260a      	movs	r6, #10
 801182e:	fb91 f5f6 	sdiv	r5, r1, r6
 8011832:	fb06 1115 	mls	r1, r6, r5, r1
 8011836:	3130      	adds	r1, #48	; 0x30
 8011838:	2d09      	cmp	r5, #9
 801183a:	f803 1c01 	strb.w	r1, [r3, #-1]
 801183e:	f103 32ff 	add.w	r2, r3, #4294967295	; 0xffffffff
 8011842:	4629      	mov	r1, r5
 8011844:	dc09      	bgt.n	801185a <__exponent+0x4c>
 8011846:	3130      	adds	r1, #48	; 0x30
 8011848:	3b02      	subs	r3, #2
 801184a:	f802 1c01 	strb.w	r1, [r2, #-1]
 801184e:	42bb      	cmp	r3, r7
 8011850:	4622      	mov	r2, r4
 8011852:	d304      	bcc.n	801185e <__exponent+0x50>
 8011854:	1a10      	subs	r0, r2, r0
 8011856:	b003      	add	sp, #12
 8011858:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801185a:	4613      	mov	r3, r2
 801185c:	e7e7      	b.n	801182e <__exponent+0x20>
 801185e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8011862:	f804 2b01 	strb.w	r2, [r4], #1
 8011866:	e7f2      	b.n	801184e <__exponent+0x40>
 8011868:	2330      	movs	r3, #48	; 0x30
 801186a:	4419      	add	r1, r3
 801186c:	7083      	strb	r3, [r0, #2]
 801186e:	1d02      	adds	r2, r0, #4
 8011870:	70c1      	strb	r1, [r0, #3]
 8011872:	e7ef      	b.n	8011854 <__exponent+0x46>

08011874 <_printf_float>:
 8011874:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011878:	b08d      	sub	sp, #52	; 0x34
 801187a:	460c      	mov	r4, r1
 801187c:	f8dd 8058 	ldr.w	r8, [sp, #88]	; 0x58
 8011880:	4616      	mov	r6, r2
 8011882:	461f      	mov	r7, r3
 8011884:	4605      	mov	r5, r0
 8011886:	f001 fcfd 	bl	8013284 <_localeconv_r>
 801188a:	6803      	ldr	r3, [r0, #0]
 801188c:	9304      	str	r3, [sp, #16]
 801188e:	4618      	mov	r0, r3
 8011890:	f7ee fcc6 	bl	8000220 <strlen>
 8011894:	2300      	movs	r3, #0
 8011896:	930a      	str	r3, [sp, #40]	; 0x28
 8011898:	f8d8 3000 	ldr.w	r3, [r8]
 801189c:	9005      	str	r0, [sp, #20]
 801189e:	3307      	adds	r3, #7
 80118a0:	f023 0307 	bic.w	r3, r3, #7
 80118a4:	f103 0208 	add.w	r2, r3, #8
 80118a8:	f894 a018 	ldrb.w	sl, [r4, #24]
 80118ac:	f8d4 b000 	ldr.w	fp, [r4]
 80118b0:	f8c8 2000 	str.w	r2, [r8]
 80118b4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80118b8:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 80118bc:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 80118c0:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 80118c4:	9307      	str	r3, [sp, #28]
 80118c6:	f8cd 8018 	str.w	r8, [sp, #24]
 80118ca:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80118ce:	4ba7      	ldr	r3, [pc, #668]	; (8011b6c <_printf_float+0x2f8>)
 80118d0:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80118d4:	f7ef f952 	bl	8000b7c <__aeabi_dcmpun>
 80118d8:	bb70      	cbnz	r0, 8011938 <_printf_float+0xc4>
 80118da:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80118de:	4ba3      	ldr	r3, [pc, #652]	; (8011b6c <_printf_float+0x2f8>)
 80118e0:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80118e4:	f7ef f92c 	bl	8000b40 <__aeabi_dcmple>
 80118e8:	bb30      	cbnz	r0, 8011938 <_printf_float+0xc4>
 80118ea:	2200      	movs	r2, #0
 80118ec:	2300      	movs	r3, #0
 80118ee:	4640      	mov	r0, r8
 80118f0:	4649      	mov	r1, r9
 80118f2:	f7ef f91b 	bl	8000b2c <__aeabi_dcmplt>
 80118f6:	b110      	cbz	r0, 80118fe <_printf_float+0x8a>
 80118f8:	232d      	movs	r3, #45	; 0x2d
 80118fa:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80118fe:	4a9c      	ldr	r2, [pc, #624]	; (8011b70 <_printf_float+0x2fc>)
 8011900:	4b9c      	ldr	r3, [pc, #624]	; (8011b74 <_printf_float+0x300>)
 8011902:	f1ba 0f47 	cmp.w	sl, #71	; 0x47
 8011906:	bf8c      	ite	hi
 8011908:	4690      	movhi	r8, r2
 801190a:	4698      	movls	r8, r3
 801190c:	2303      	movs	r3, #3
 801190e:	f02b 0204 	bic.w	r2, fp, #4
 8011912:	6123      	str	r3, [r4, #16]
 8011914:	6022      	str	r2, [r4, #0]
 8011916:	f04f 0900 	mov.w	r9, #0
 801191a:	9700      	str	r7, [sp, #0]
 801191c:	4633      	mov	r3, r6
 801191e:	aa0b      	add	r2, sp, #44	; 0x2c
 8011920:	4621      	mov	r1, r4
 8011922:	4628      	mov	r0, r5
 8011924:	f000 f9e6 	bl	8011cf4 <_printf_common>
 8011928:	3001      	adds	r0, #1
 801192a:	f040 808d 	bne.w	8011a48 <_printf_float+0x1d4>
 801192e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8011932:	b00d      	add	sp, #52	; 0x34
 8011934:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8011938:	4642      	mov	r2, r8
 801193a:	464b      	mov	r3, r9
 801193c:	4640      	mov	r0, r8
 801193e:	4649      	mov	r1, r9
 8011940:	f7ef f91c 	bl	8000b7c <__aeabi_dcmpun>
 8011944:	b110      	cbz	r0, 801194c <_printf_float+0xd8>
 8011946:	4a8c      	ldr	r2, [pc, #560]	; (8011b78 <_printf_float+0x304>)
 8011948:	4b8c      	ldr	r3, [pc, #560]	; (8011b7c <_printf_float+0x308>)
 801194a:	e7da      	b.n	8011902 <_printf_float+0x8e>
 801194c:	6861      	ldr	r1, [r4, #4]
 801194e:	1c4b      	adds	r3, r1, #1
 8011950:	f44b 6280 	orr.w	r2, fp, #1024	; 0x400
 8011954:	a80a      	add	r0, sp, #40	; 0x28
 8011956:	d13e      	bne.n	80119d6 <_printf_float+0x162>
 8011958:	2306      	movs	r3, #6
 801195a:	6063      	str	r3, [r4, #4]
 801195c:	2300      	movs	r3, #0
 801195e:	e9cd 0302 	strd	r0, r3, [sp, #8]
 8011962:	ab09      	add	r3, sp, #36	; 0x24
 8011964:	9300      	str	r3, [sp, #0]
 8011966:	ec49 8b10 	vmov	d0, r8, r9
 801196a:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 801196e:	6022      	str	r2, [r4, #0]
 8011970:	f8cd a004 	str.w	sl, [sp, #4]
 8011974:	6861      	ldr	r1, [r4, #4]
 8011976:	4628      	mov	r0, r5
 8011978:	f7ff fee8 	bl	801174c <__cvt>
 801197c:	f00a 03df 	and.w	r3, sl, #223	; 0xdf
 8011980:	2b47      	cmp	r3, #71	; 0x47
 8011982:	4680      	mov	r8, r0
 8011984:	d109      	bne.n	801199a <_printf_float+0x126>
 8011986:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8011988:	1cd8      	adds	r0, r3, #3
 801198a:	db02      	blt.n	8011992 <_printf_float+0x11e>
 801198c:	6862      	ldr	r2, [r4, #4]
 801198e:	4293      	cmp	r3, r2
 8011990:	dd47      	ble.n	8011a22 <_printf_float+0x1ae>
 8011992:	f1aa 0a02 	sub.w	sl, sl, #2
 8011996:	fa5f fa8a 	uxtb.w	sl, sl
 801199a:	f1ba 0f65 	cmp.w	sl, #101	; 0x65
 801199e:	9909      	ldr	r1, [sp, #36]	; 0x24
 80119a0:	d824      	bhi.n	80119ec <_printf_float+0x178>
 80119a2:	3901      	subs	r1, #1
 80119a4:	4652      	mov	r2, sl
 80119a6:	f104 0050 	add.w	r0, r4, #80	; 0x50
 80119aa:	9109      	str	r1, [sp, #36]	; 0x24
 80119ac:	f7ff ff2f 	bl	801180e <__exponent>
 80119b0:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80119b2:	1813      	adds	r3, r2, r0
 80119b4:	2a01      	cmp	r2, #1
 80119b6:	4681      	mov	r9, r0
 80119b8:	6123      	str	r3, [r4, #16]
 80119ba:	dc02      	bgt.n	80119c2 <_printf_float+0x14e>
 80119bc:	6822      	ldr	r2, [r4, #0]
 80119be:	07d1      	lsls	r1, r2, #31
 80119c0:	d501      	bpl.n	80119c6 <_printf_float+0x152>
 80119c2:	3301      	adds	r3, #1
 80119c4:	6123      	str	r3, [r4, #16]
 80119c6:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 80119ca:	2b00      	cmp	r3, #0
 80119cc:	d0a5      	beq.n	801191a <_printf_float+0xa6>
 80119ce:	232d      	movs	r3, #45	; 0x2d
 80119d0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80119d4:	e7a1      	b.n	801191a <_printf_float+0xa6>
 80119d6:	f1ba 0f67 	cmp.w	sl, #103	; 0x67
 80119da:	f000 8177 	beq.w	8011ccc <_printf_float+0x458>
 80119de:	f1ba 0f47 	cmp.w	sl, #71	; 0x47
 80119e2:	d1bb      	bne.n	801195c <_printf_float+0xe8>
 80119e4:	2900      	cmp	r1, #0
 80119e6:	d1b9      	bne.n	801195c <_printf_float+0xe8>
 80119e8:	2301      	movs	r3, #1
 80119ea:	e7b6      	b.n	801195a <_printf_float+0xe6>
 80119ec:	f1ba 0f66 	cmp.w	sl, #102	; 0x66
 80119f0:	d119      	bne.n	8011a26 <_printf_float+0x1b2>
 80119f2:	2900      	cmp	r1, #0
 80119f4:	6863      	ldr	r3, [r4, #4]
 80119f6:	dd0c      	ble.n	8011a12 <_printf_float+0x19e>
 80119f8:	6121      	str	r1, [r4, #16]
 80119fa:	b913      	cbnz	r3, 8011a02 <_printf_float+0x18e>
 80119fc:	6822      	ldr	r2, [r4, #0]
 80119fe:	07d2      	lsls	r2, r2, #31
 8011a00:	d502      	bpl.n	8011a08 <_printf_float+0x194>
 8011a02:	3301      	adds	r3, #1
 8011a04:	440b      	add	r3, r1
 8011a06:	6123      	str	r3, [r4, #16]
 8011a08:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8011a0a:	65a3      	str	r3, [r4, #88]	; 0x58
 8011a0c:	f04f 0900 	mov.w	r9, #0
 8011a10:	e7d9      	b.n	80119c6 <_printf_float+0x152>
 8011a12:	b913      	cbnz	r3, 8011a1a <_printf_float+0x1a6>
 8011a14:	6822      	ldr	r2, [r4, #0]
 8011a16:	07d0      	lsls	r0, r2, #31
 8011a18:	d501      	bpl.n	8011a1e <_printf_float+0x1aa>
 8011a1a:	3302      	adds	r3, #2
 8011a1c:	e7f3      	b.n	8011a06 <_printf_float+0x192>
 8011a1e:	2301      	movs	r3, #1
 8011a20:	e7f1      	b.n	8011a06 <_printf_float+0x192>
 8011a22:	f04f 0a67 	mov.w	sl, #103	; 0x67
 8011a26:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 8011a2a:	4293      	cmp	r3, r2
 8011a2c:	db05      	blt.n	8011a3a <_printf_float+0x1c6>
 8011a2e:	6822      	ldr	r2, [r4, #0]
 8011a30:	6123      	str	r3, [r4, #16]
 8011a32:	07d1      	lsls	r1, r2, #31
 8011a34:	d5e8      	bpl.n	8011a08 <_printf_float+0x194>
 8011a36:	3301      	adds	r3, #1
 8011a38:	e7e5      	b.n	8011a06 <_printf_float+0x192>
 8011a3a:	2b00      	cmp	r3, #0
 8011a3c:	bfd4      	ite	le
 8011a3e:	f1c3 0302 	rsble	r3, r3, #2
 8011a42:	2301      	movgt	r3, #1
 8011a44:	4413      	add	r3, r2
 8011a46:	e7de      	b.n	8011a06 <_printf_float+0x192>
 8011a48:	6823      	ldr	r3, [r4, #0]
 8011a4a:	055a      	lsls	r2, r3, #21
 8011a4c:	d407      	bmi.n	8011a5e <_printf_float+0x1ea>
 8011a4e:	6923      	ldr	r3, [r4, #16]
 8011a50:	4642      	mov	r2, r8
 8011a52:	4631      	mov	r1, r6
 8011a54:	4628      	mov	r0, r5
 8011a56:	47b8      	blx	r7
 8011a58:	3001      	adds	r0, #1
 8011a5a:	d12b      	bne.n	8011ab4 <_printf_float+0x240>
 8011a5c:	e767      	b.n	801192e <_printf_float+0xba>
 8011a5e:	f1ba 0f65 	cmp.w	sl, #101	; 0x65
 8011a62:	f240 80dc 	bls.w	8011c1e <_printf_float+0x3aa>
 8011a66:	2200      	movs	r2, #0
 8011a68:	2300      	movs	r3, #0
 8011a6a:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8011a6e:	f7ef f853 	bl	8000b18 <__aeabi_dcmpeq>
 8011a72:	2800      	cmp	r0, #0
 8011a74:	d033      	beq.n	8011ade <_printf_float+0x26a>
 8011a76:	2301      	movs	r3, #1
 8011a78:	4a41      	ldr	r2, [pc, #260]	; (8011b80 <_printf_float+0x30c>)
 8011a7a:	4631      	mov	r1, r6
 8011a7c:	4628      	mov	r0, r5
 8011a7e:	47b8      	blx	r7
 8011a80:	3001      	adds	r0, #1
 8011a82:	f43f af54 	beq.w	801192e <_printf_float+0xba>
 8011a86:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8011a8a:	429a      	cmp	r2, r3
 8011a8c:	db02      	blt.n	8011a94 <_printf_float+0x220>
 8011a8e:	6823      	ldr	r3, [r4, #0]
 8011a90:	07d8      	lsls	r0, r3, #31
 8011a92:	d50f      	bpl.n	8011ab4 <_printf_float+0x240>
 8011a94:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8011a98:	4631      	mov	r1, r6
 8011a9a:	4628      	mov	r0, r5
 8011a9c:	47b8      	blx	r7
 8011a9e:	3001      	adds	r0, #1
 8011aa0:	f43f af45 	beq.w	801192e <_printf_float+0xba>
 8011aa4:	f04f 0800 	mov.w	r8, #0
 8011aa8:	f104 091a 	add.w	r9, r4, #26
 8011aac:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8011aae:	3b01      	subs	r3, #1
 8011ab0:	4543      	cmp	r3, r8
 8011ab2:	dc09      	bgt.n	8011ac8 <_printf_float+0x254>
 8011ab4:	6823      	ldr	r3, [r4, #0]
 8011ab6:	079b      	lsls	r3, r3, #30
 8011ab8:	f100 8103 	bmi.w	8011cc2 <_printf_float+0x44e>
 8011abc:	68e0      	ldr	r0, [r4, #12]
 8011abe:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8011ac0:	4298      	cmp	r0, r3
 8011ac2:	bfb8      	it	lt
 8011ac4:	4618      	movlt	r0, r3
 8011ac6:	e734      	b.n	8011932 <_printf_float+0xbe>
 8011ac8:	2301      	movs	r3, #1
 8011aca:	464a      	mov	r2, r9
 8011acc:	4631      	mov	r1, r6
 8011ace:	4628      	mov	r0, r5
 8011ad0:	47b8      	blx	r7
 8011ad2:	3001      	adds	r0, #1
 8011ad4:	f43f af2b 	beq.w	801192e <_printf_float+0xba>
 8011ad8:	f108 0801 	add.w	r8, r8, #1
 8011adc:	e7e6      	b.n	8011aac <_printf_float+0x238>
 8011ade:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8011ae0:	2b00      	cmp	r3, #0
 8011ae2:	dc2b      	bgt.n	8011b3c <_printf_float+0x2c8>
 8011ae4:	2301      	movs	r3, #1
 8011ae6:	4a26      	ldr	r2, [pc, #152]	; (8011b80 <_printf_float+0x30c>)
 8011ae8:	4631      	mov	r1, r6
 8011aea:	4628      	mov	r0, r5
 8011aec:	47b8      	blx	r7
 8011aee:	3001      	adds	r0, #1
 8011af0:	f43f af1d 	beq.w	801192e <_printf_float+0xba>
 8011af4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8011af6:	b923      	cbnz	r3, 8011b02 <_printf_float+0x28e>
 8011af8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8011afa:	b913      	cbnz	r3, 8011b02 <_printf_float+0x28e>
 8011afc:	6823      	ldr	r3, [r4, #0]
 8011afe:	07d9      	lsls	r1, r3, #31
 8011b00:	d5d8      	bpl.n	8011ab4 <_printf_float+0x240>
 8011b02:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8011b06:	4631      	mov	r1, r6
 8011b08:	4628      	mov	r0, r5
 8011b0a:	47b8      	blx	r7
 8011b0c:	3001      	adds	r0, #1
 8011b0e:	f43f af0e 	beq.w	801192e <_printf_float+0xba>
 8011b12:	f04f 0900 	mov.w	r9, #0
 8011b16:	f104 0a1a 	add.w	sl, r4, #26
 8011b1a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8011b1c:	425b      	negs	r3, r3
 8011b1e:	454b      	cmp	r3, r9
 8011b20:	dc01      	bgt.n	8011b26 <_printf_float+0x2b2>
 8011b22:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8011b24:	e794      	b.n	8011a50 <_printf_float+0x1dc>
 8011b26:	2301      	movs	r3, #1
 8011b28:	4652      	mov	r2, sl
 8011b2a:	4631      	mov	r1, r6
 8011b2c:	4628      	mov	r0, r5
 8011b2e:	47b8      	blx	r7
 8011b30:	3001      	adds	r0, #1
 8011b32:	f43f aefc 	beq.w	801192e <_printf_float+0xba>
 8011b36:	f109 0901 	add.w	r9, r9, #1
 8011b3a:	e7ee      	b.n	8011b1a <_printf_float+0x2a6>
 8011b3c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8011b3e:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8011b40:	429a      	cmp	r2, r3
 8011b42:	bfa8      	it	ge
 8011b44:	461a      	movge	r2, r3
 8011b46:	2a00      	cmp	r2, #0
 8011b48:	4691      	mov	r9, r2
 8011b4a:	dd07      	ble.n	8011b5c <_printf_float+0x2e8>
 8011b4c:	4613      	mov	r3, r2
 8011b4e:	4631      	mov	r1, r6
 8011b50:	4642      	mov	r2, r8
 8011b52:	4628      	mov	r0, r5
 8011b54:	47b8      	blx	r7
 8011b56:	3001      	adds	r0, #1
 8011b58:	f43f aee9 	beq.w	801192e <_printf_float+0xba>
 8011b5c:	f104 031a 	add.w	r3, r4, #26
 8011b60:	f04f 0b00 	mov.w	fp, #0
 8011b64:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8011b68:	9306      	str	r3, [sp, #24]
 8011b6a:	e015      	b.n	8011b98 <_printf_float+0x324>
 8011b6c:	7fefffff 	.word	0x7fefffff
 8011b70:	08016984 	.word	0x08016984
 8011b74:	08016980 	.word	0x08016980
 8011b78:	0801698c 	.word	0x0801698c
 8011b7c:	08016988 	.word	0x08016988
 8011b80:	08016c3c 	.word	0x08016c3c
 8011b84:	2301      	movs	r3, #1
 8011b86:	9a06      	ldr	r2, [sp, #24]
 8011b88:	4631      	mov	r1, r6
 8011b8a:	4628      	mov	r0, r5
 8011b8c:	47b8      	blx	r7
 8011b8e:	3001      	adds	r0, #1
 8011b90:	f43f aecd 	beq.w	801192e <_printf_float+0xba>
 8011b94:	f10b 0b01 	add.w	fp, fp, #1
 8011b98:	f8d4 a058 	ldr.w	sl, [r4, #88]	; 0x58
 8011b9c:	ebaa 0309 	sub.w	r3, sl, r9
 8011ba0:	455b      	cmp	r3, fp
 8011ba2:	dcef      	bgt.n	8011b84 <_printf_float+0x310>
 8011ba4:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8011ba8:	429a      	cmp	r2, r3
 8011baa:	44d0      	add	r8, sl
 8011bac:	db15      	blt.n	8011bda <_printf_float+0x366>
 8011bae:	6823      	ldr	r3, [r4, #0]
 8011bb0:	07da      	lsls	r2, r3, #31
 8011bb2:	d412      	bmi.n	8011bda <_printf_float+0x366>
 8011bb4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8011bb6:	9909      	ldr	r1, [sp, #36]	; 0x24
 8011bb8:	eba3 020a 	sub.w	r2, r3, sl
 8011bbc:	eba3 0a01 	sub.w	sl, r3, r1
 8011bc0:	4592      	cmp	sl, r2
 8011bc2:	bfa8      	it	ge
 8011bc4:	4692      	movge	sl, r2
 8011bc6:	f1ba 0f00 	cmp.w	sl, #0
 8011bca:	dc0e      	bgt.n	8011bea <_printf_float+0x376>
 8011bcc:	f04f 0800 	mov.w	r8, #0
 8011bd0:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8011bd4:	f104 091a 	add.w	r9, r4, #26
 8011bd8:	e019      	b.n	8011c0e <_printf_float+0x39a>
 8011bda:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8011bde:	4631      	mov	r1, r6
 8011be0:	4628      	mov	r0, r5
 8011be2:	47b8      	blx	r7
 8011be4:	3001      	adds	r0, #1
 8011be6:	d1e5      	bne.n	8011bb4 <_printf_float+0x340>
 8011be8:	e6a1      	b.n	801192e <_printf_float+0xba>
 8011bea:	4653      	mov	r3, sl
 8011bec:	4642      	mov	r2, r8
 8011bee:	4631      	mov	r1, r6
 8011bf0:	4628      	mov	r0, r5
 8011bf2:	47b8      	blx	r7
 8011bf4:	3001      	adds	r0, #1
 8011bf6:	d1e9      	bne.n	8011bcc <_printf_float+0x358>
 8011bf8:	e699      	b.n	801192e <_printf_float+0xba>
 8011bfa:	2301      	movs	r3, #1
 8011bfc:	464a      	mov	r2, r9
 8011bfe:	4631      	mov	r1, r6
 8011c00:	4628      	mov	r0, r5
 8011c02:	47b8      	blx	r7
 8011c04:	3001      	adds	r0, #1
 8011c06:	f43f ae92 	beq.w	801192e <_printf_float+0xba>
 8011c0a:	f108 0801 	add.w	r8, r8, #1
 8011c0e:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8011c12:	1a9b      	subs	r3, r3, r2
 8011c14:	eba3 030a 	sub.w	r3, r3, sl
 8011c18:	4543      	cmp	r3, r8
 8011c1a:	dcee      	bgt.n	8011bfa <_printf_float+0x386>
 8011c1c:	e74a      	b.n	8011ab4 <_printf_float+0x240>
 8011c1e:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8011c20:	2a01      	cmp	r2, #1
 8011c22:	dc01      	bgt.n	8011c28 <_printf_float+0x3b4>
 8011c24:	07db      	lsls	r3, r3, #31
 8011c26:	d53a      	bpl.n	8011c9e <_printf_float+0x42a>
 8011c28:	2301      	movs	r3, #1
 8011c2a:	4642      	mov	r2, r8
 8011c2c:	4631      	mov	r1, r6
 8011c2e:	4628      	mov	r0, r5
 8011c30:	47b8      	blx	r7
 8011c32:	3001      	adds	r0, #1
 8011c34:	f43f ae7b 	beq.w	801192e <_printf_float+0xba>
 8011c38:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8011c3c:	4631      	mov	r1, r6
 8011c3e:	4628      	mov	r0, r5
 8011c40:	47b8      	blx	r7
 8011c42:	3001      	adds	r0, #1
 8011c44:	f108 0801 	add.w	r8, r8, #1
 8011c48:	f43f ae71 	beq.w	801192e <_printf_float+0xba>
 8011c4c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8011c4e:	2200      	movs	r2, #0
 8011c50:	f103 3aff 	add.w	sl, r3, #4294967295	; 0xffffffff
 8011c54:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8011c58:	2300      	movs	r3, #0
 8011c5a:	f7ee ff5d 	bl	8000b18 <__aeabi_dcmpeq>
 8011c5e:	b9c8      	cbnz	r0, 8011c94 <_printf_float+0x420>
 8011c60:	4653      	mov	r3, sl
 8011c62:	4642      	mov	r2, r8
 8011c64:	4631      	mov	r1, r6
 8011c66:	4628      	mov	r0, r5
 8011c68:	47b8      	blx	r7
 8011c6a:	3001      	adds	r0, #1
 8011c6c:	d10e      	bne.n	8011c8c <_printf_float+0x418>
 8011c6e:	e65e      	b.n	801192e <_printf_float+0xba>
 8011c70:	2301      	movs	r3, #1
 8011c72:	4652      	mov	r2, sl
 8011c74:	4631      	mov	r1, r6
 8011c76:	4628      	mov	r0, r5
 8011c78:	47b8      	blx	r7
 8011c7a:	3001      	adds	r0, #1
 8011c7c:	f43f ae57 	beq.w	801192e <_printf_float+0xba>
 8011c80:	f108 0801 	add.w	r8, r8, #1
 8011c84:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8011c86:	3b01      	subs	r3, #1
 8011c88:	4543      	cmp	r3, r8
 8011c8a:	dcf1      	bgt.n	8011c70 <_printf_float+0x3fc>
 8011c8c:	464b      	mov	r3, r9
 8011c8e:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8011c92:	e6de      	b.n	8011a52 <_printf_float+0x1de>
 8011c94:	f04f 0800 	mov.w	r8, #0
 8011c98:	f104 0a1a 	add.w	sl, r4, #26
 8011c9c:	e7f2      	b.n	8011c84 <_printf_float+0x410>
 8011c9e:	2301      	movs	r3, #1
 8011ca0:	e7df      	b.n	8011c62 <_printf_float+0x3ee>
 8011ca2:	2301      	movs	r3, #1
 8011ca4:	464a      	mov	r2, r9
 8011ca6:	4631      	mov	r1, r6
 8011ca8:	4628      	mov	r0, r5
 8011caa:	47b8      	blx	r7
 8011cac:	3001      	adds	r0, #1
 8011cae:	f43f ae3e 	beq.w	801192e <_printf_float+0xba>
 8011cb2:	f108 0801 	add.w	r8, r8, #1
 8011cb6:	68e3      	ldr	r3, [r4, #12]
 8011cb8:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8011cba:	1a9b      	subs	r3, r3, r2
 8011cbc:	4543      	cmp	r3, r8
 8011cbe:	dcf0      	bgt.n	8011ca2 <_printf_float+0x42e>
 8011cc0:	e6fc      	b.n	8011abc <_printf_float+0x248>
 8011cc2:	f04f 0800 	mov.w	r8, #0
 8011cc6:	f104 0919 	add.w	r9, r4, #25
 8011cca:	e7f4      	b.n	8011cb6 <_printf_float+0x442>
 8011ccc:	2900      	cmp	r1, #0
 8011cce:	f43f ae8b 	beq.w	80119e8 <_printf_float+0x174>
 8011cd2:	2300      	movs	r3, #0
 8011cd4:	e9cd 0302 	strd	r0, r3, [sp, #8]
 8011cd8:	ab09      	add	r3, sp, #36	; 0x24
 8011cda:	9300      	str	r3, [sp, #0]
 8011cdc:	ec49 8b10 	vmov	d0, r8, r9
 8011ce0:	6022      	str	r2, [r4, #0]
 8011ce2:	f8cd a004 	str.w	sl, [sp, #4]
 8011ce6:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 8011cea:	4628      	mov	r0, r5
 8011cec:	f7ff fd2e 	bl	801174c <__cvt>
 8011cf0:	4680      	mov	r8, r0
 8011cf2:	e648      	b.n	8011986 <_printf_float+0x112>

08011cf4 <_printf_common>:
 8011cf4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8011cf8:	4691      	mov	r9, r2
 8011cfa:	461f      	mov	r7, r3
 8011cfc:	688a      	ldr	r2, [r1, #8]
 8011cfe:	690b      	ldr	r3, [r1, #16]
 8011d00:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8011d04:	4293      	cmp	r3, r2
 8011d06:	bfb8      	it	lt
 8011d08:	4613      	movlt	r3, r2
 8011d0a:	f8c9 3000 	str.w	r3, [r9]
 8011d0e:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8011d12:	4606      	mov	r6, r0
 8011d14:	460c      	mov	r4, r1
 8011d16:	b112      	cbz	r2, 8011d1e <_printf_common+0x2a>
 8011d18:	3301      	adds	r3, #1
 8011d1a:	f8c9 3000 	str.w	r3, [r9]
 8011d1e:	6823      	ldr	r3, [r4, #0]
 8011d20:	0699      	lsls	r1, r3, #26
 8011d22:	bf42      	ittt	mi
 8011d24:	f8d9 3000 	ldrmi.w	r3, [r9]
 8011d28:	3302      	addmi	r3, #2
 8011d2a:	f8c9 3000 	strmi.w	r3, [r9]
 8011d2e:	6825      	ldr	r5, [r4, #0]
 8011d30:	f015 0506 	ands.w	r5, r5, #6
 8011d34:	d107      	bne.n	8011d46 <_printf_common+0x52>
 8011d36:	f104 0a19 	add.w	sl, r4, #25
 8011d3a:	68e3      	ldr	r3, [r4, #12]
 8011d3c:	f8d9 2000 	ldr.w	r2, [r9]
 8011d40:	1a9b      	subs	r3, r3, r2
 8011d42:	42ab      	cmp	r3, r5
 8011d44:	dc28      	bgt.n	8011d98 <_printf_common+0xa4>
 8011d46:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 8011d4a:	6822      	ldr	r2, [r4, #0]
 8011d4c:	3300      	adds	r3, #0
 8011d4e:	bf18      	it	ne
 8011d50:	2301      	movne	r3, #1
 8011d52:	0692      	lsls	r2, r2, #26
 8011d54:	d42d      	bmi.n	8011db2 <_printf_common+0xbe>
 8011d56:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8011d5a:	4639      	mov	r1, r7
 8011d5c:	4630      	mov	r0, r6
 8011d5e:	47c0      	blx	r8
 8011d60:	3001      	adds	r0, #1
 8011d62:	d020      	beq.n	8011da6 <_printf_common+0xb2>
 8011d64:	6823      	ldr	r3, [r4, #0]
 8011d66:	68e5      	ldr	r5, [r4, #12]
 8011d68:	f8d9 2000 	ldr.w	r2, [r9]
 8011d6c:	f003 0306 	and.w	r3, r3, #6
 8011d70:	2b04      	cmp	r3, #4
 8011d72:	bf08      	it	eq
 8011d74:	1aad      	subeq	r5, r5, r2
 8011d76:	68a3      	ldr	r3, [r4, #8]
 8011d78:	6922      	ldr	r2, [r4, #16]
 8011d7a:	bf0c      	ite	eq
 8011d7c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8011d80:	2500      	movne	r5, #0
 8011d82:	4293      	cmp	r3, r2
 8011d84:	bfc4      	itt	gt
 8011d86:	1a9b      	subgt	r3, r3, r2
 8011d88:	18ed      	addgt	r5, r5, r3
 8011d8a:	f04f 0900 	mov.w	r9, #0
 8011d8e:	341a      	adds	r4, #26
 8011d90:	454d      	cmp	r5, r9
 8011d92:	d11a      	bne.n	8011dca <_printf_common+0xd6>
 8011d94:	2000      	movs	r0, #0
 8011d96:	e008      	b.n	8011daa <_printf_common+0xb6>
 8011d98:	2301      	movs	r3, #1
 8011d9a:	4652      	mov	r2, sl
 8011d9c:	4639      	mov	r1, r7
 8011d9e:	4630      	mov	r0, r6
 8011da0:	47c0      	blx	r8
 8011da2:	3001      	adds	r0, #1
 8011da4:	d103      	bne.n	8011dae <_printf_common+0xba>
 8011da6:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8011daa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8011dae:	3501      	adds	r5, #1
 8011db0:	e7c3      	b.n	8011d3a <_printf_common+0x46>
 8011db2:	18e1      	adds	r1, r4, r3
 8011db4:	1c5a      	adds	r2, r3, #1
 8011db6:	2030      	movs	r0, #48	; 0x30
 8011db8:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8011dbc:	4422      	add	r2, r4
 8011dbe:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8011dc2:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8011dc6:	3302      	adds	r3, #2
 8011dc8:	e7c5      	b.n	8011d56 <_printf_common+0x62>
 8011dca:	2301      	movs	r3, #1
 8011dcc:	4622      	mov	r2, r4
 8011dce:	4639      	mov	r1, r7
 8011dd0:	4630      	mov	r0, r6
 8011dd2:	47c0      	blx	r8
 8011dd4:	3001      	adds	r0, #1
 8011dd6:	d0e6      	beq.n	8011da6 <_printf_common+0xb2>
 8011dd8:	f109 0901 	add.w	r9, r9, #1
 8011ddc:	e7d8      	b.n	8011d90 <_printf_common+0x9c>
	...

08011de0 <_printf_i>:
 8011de0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8011de4:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 8011de8:	460c      	mov	r4, r1
 8011dea:	7e09      	ldrb	r1, [r1, #24]
 8011dec:	b085      	sub	sp, #20
 8011dee:	296e      	cmp	r1, #110	; 0x6e
 8011df0:	4617      	mov	r7, r2
 8011df2:	4606      	mov	r6, r0
 8011df4:	4698      	mov	r8, r3
 8011df6:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8011df8:	f000 80b3 	beq.w	8011f62 <_printf_i+0x182>
 8011dfc:	d822      	bhi.n	8011e44 <_printf_i+0x64>
 8011dfe:	2963      	cmp	r1, #99	; 0x63
 8011e00:	d036      	beq.n	8011e70 <_printf_i+0x90>
 8011e02:	d80a      	bhi.n	8011e1a <_printf_i+0x3a>
 8011e04:	2900      	cmp	r1, #0
 8011e06:	f000 80b9 	beq.w	8011f7c <_printf_i+0x19c>
 8011e0a:	2958      	cmp	r1, #88	; 0x58
 8011e0c:	f000 8083 	beq.w	8011f16 <_printf_i+0x136>
 8011e10:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8011e14:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 8011e18:	e032      	b.n	8011e80 <_printf_i+0xa0>
 8011e1a:	2964      	cmp	r1, #100	; 0x64
 8011e1c:	d001      	beq.n	8011e22 <_printf_i+0x42>
 8011e1e:	2969      	cmp	r1, #105	; 0x69
 8011e20:	d1f6      	bne.n	8011e10 <_printf_i+0x30>
 8011e22:	6820      	ldr	r0, [r4, #0]
 8011e24:	6813      	ldr	r3, [r2, #0]
 8011e26:	0605      	lsls	r5, r0, #24
 8011e28:	f103 0104 	add.w	r1, r3, #4
 8011e2c:	d52a      	bpl.n	8011e84 <_printf_i+0xa4>
 8011e2e:	681b      	ldr	r3, [r3, #0]
 8011e30:	6011      	str	r1, [r2, #0]
 8011e32:	2b00      	cmp	r3, #0
 8011e34:	da03      	bge.n	8011e3e <_printf_i+0x5e>
 8011e36:	222d      	movs	r2, #45	; 0x2d
 8011e38:	425b      	negs	r3, r3
 8011e3a:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 8011e3e:	486f      	ldr	r0, [pc, #444]	; (8011ffc <_printf_i+0x21c>)
 8011e40:	220a      	movs	r2, #10
 8011e42:	e039      	b.n	8011eb8 <_printf_i+0xd8>
 8011e44:	2973      	cmp	r1, #115	; 0x73
 8011e46:	f000 809d 	beq.w	8011f84 <_printf_i+0x1a4>
 8011e4a:	d808      	bhi.n	8011e5e <_printf_i+0x7e>
 8011e4c:	296f      	cmp	r1, #111	; 0x6f
 8011e4e:	d020      	beq.n	8011e92 <_printf_i+0xb2>
 8011e50:	2970      	cmp	r1, #112	; 0x70
 8011e52:	d1dd      	bne.n	8011e10 <_printf_i+0x30>
 8011e54:	6823      	ldr	r3, [r4, #0]
 8011e56:	f043 0320 	orr.w	r3, r3, #32
 8011e5a:	6023      	str	r3, [r4, #0]
 8011e5c:	e003      	b.n	8011e66 <_printf_i+0x86>
 8011e5e:	2975      	cmp	r1, #117	; 0x75
 8011e60:	d017      	beq.n	8011e92 <_printf_i+0xb2>
 8011e62:	2978      	cmp	r1, #120	; 0x78
 8011e64:	d1d4      	bne.n	8011e10 <_printf_i+0x30>
 8011e66:	2378      	movs	r3, #120	; 0x78
 8011e68:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8011e6c:	4864      	ldr	r0, [pc, #400]	; (8012000 <_printf_i+0x220>)
 8011e6e:	e055      	b.n	8011f1c <_printf_i+0x13c>
 8011e70:	6813      	ldr	r3, [r2, #0]
 8011e72:	1d19      	adds	r1, r3, #4
 8011e74:	681b      	ldr	r3, [r3, #0]
 8011e76:	6011      	str	r1, [r2, #0]
 8011e78:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8011e7c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8011e80:	2301      	movs	r3, #1
 8011e82:	e08c      	b.n	8011f9e <_printf_i+0x1be>
 8011e84:	681b      	ldr	r3, [r3, #0]
 8011e86:	6011      	str	r1, [r2, #0]
 8011e88:	f010 0f40 	tst.w	r0, #64	; 0x40
 8011e8c:	bf18      	it	ne
 8011e8e:	b21b      	sxthne	r3, r3
 8011e90:	e7cf      	b.n	8011e32 <_printf_i+0x52>
 8011e92:	6813      	ldr	r3, [r2, #0]
 8011e94:	6825      	ldr	r5, [r4, #0]
 8011e96:	1d18      	adds	r0, r3, #4
 8011e98:	6010      	str	r0, [r2, #0]
 8011e9a:	0628      	lsls	r0, r5, #24
 8011e9c:	d501      	bpl.n	8011ea2 <_printf_i+0xc2>
 8011e9e:	681b      	ldr	r3, [r3, #0]
 8011ea0:	e002      	b.n	8011ea8 <_printf_i+0xc8>
 8011ea2:	0668      	lsls	r0, r5, #25
 8011ea4:	d5fb      	bpl.n	8011e9e <_printf_i+0xbe>
 8011ea6:	881b      	ldrh	r3, [r3, #0]
 8011ea8:	4854      	ldr	r0, [pc, #336]	; (8011ffc <_printf_i+0x21c>)
 8011eaa:	296f      	cmp	r1, #111	; 0x6f
 8011eac:	bf14      	ite	ne
 8011eae:	220a      	movne	r2, #10
 8011eb0:	2208      	moveq	r2, #8
 8011eb2:	2100      	movs	r1, #0
 8011eb4:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8011eb8:	6865      	ldr	r5, [r4, #4]
 8011eba:	60a5      	str	r5, [r4, #8]
 8011ebc:	2d00      	cmp	r5, #0
 8011ebe:	f2c0 8095 	blt.w	8011fec <_printf_i+0x20c>
 8011ec2:	6821      	ldr	r1, [r4, #0]
 8011ec4:	f021 0104 	bic.w	r1, r1, #4
 8011ec8:	6021      	str	r1, [r4, #0]
 8011eca:	2b00      	cmp	r3, #0
 8011ecc:	d13d      	bne.n	8011f4a <_printf_i+0x16a>
 8011ece:	2d00      	cmp	r5, #0
 8011ed0:	f040 808e 	bne.w	8011ff0 <_printf_i+0x210>
 8011ed4:	4665      	mov	r5, ip
 8011ed6:	2a08      	cmp	r2, #8
 8011ed8:	d10b      	bne.n	8011ef2 <_printf_i+0x112>
 8011eda:	6823      	ldr	r3, [r4, #0]
 8011edc:	07db      	lsls	r3, r3, #31
 8011ede:	d508      	bpl.n	8011ef2 <_printf_i+0x112>
 8011ee0:	6923      	ldr	r3, [r4, #16]
 8011ee2:	6862      	ldr	r2, [r4, #4]
 8011ee4:	429a      	cmp	r2, r3
 8011ee6:	bfde      	ittt	le
 8011ee8:	2330      	movle	r3, #48	; 0x30
 8011eea:	f805 3c01 	strble.w	r3, [r5, #-1]
 8011eee:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 8011ef2:	ebac 0305 	sub.w	r3, ip, r5
 8011ef6:	6123      	str	r3, [r4, #16]
 8011ef8:	f8cd 8000 	str.w	r8, [sp]
 8011efc:	463b      	mov	r3, r7
 8011efe:	aa03      	add	r2, sp, #12
 8011f00:	4621      	mov	r1, r4
 8011f02:	4630      	mov	r0, r6
 8011f04:	f7ff fef6 	bl	8011cf4 <_printf_common>
 8011f08:	3001      	adds	r0, #1
 8011f0a:	d14d      	bne.n	8011fa8 <_printf_i+0x1c8>
 8011f0c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8011f10:	b005      	add	sp, #20
 8011f12:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8011f16:	4839      	ldr	r0, [pc, #228]	; (8011ffc <_printf_i+0x21c>)
 8011f18:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 8011f1c:	6813      	ldr	r3, [r2, #0]
 8011f1e:	6821      	ldr	r1, [r4, #0]
 8011f20:	1d1d      	adds	r5, r3, #4
 8011f22:	681b      	ldr	r3, [r3, #0]
 8011f24:	6015      	str	r5, [r2, #0]
 8011f26:	060a      	lsls	r2, r1, #24
 8011f28:	d50b      	bpl.n	8011f42 <_printf_i+0x162>
 8011f2a:	07ca      	lsls	r2, r1, #31
 8011f2c:	bf44      	itt	mi
 8011f2e:	f041 0120 	orrmi.w	r1, r1, #32
 8011f32:	6021      	strmi	r1, [r4, #0]
 8011f34:	b91b      	cbnz	r3, 8011f3e <_printf_i+0x15e>
 8011f36:	6822      	ldr	r2, [r4, #0]
 8011f38:	f022 0220 	bic.w	r2, r2, #32
 8011f3c:	6022      	str	r2, [r4, #0]
 8011f3e:	2210      	movs	r2, #16
 8011f40:	e7b7      	b.n	8011eb2 <_printf_i+0xd2>
 8011f42:	064d      	lsls	r5, r1, #25
 8011f44:	bf48      	it	mi
 8011f46:	b29b      	uxthmi	r3, r3
 8011f48:	e7ef      	b.n	8011f2a <_printf_i+0x14a>
 8011f4a:	4665      	mov	r5, ip
 8011f4c:	fbb3 f1f2 	udiv	r1, r3, r2
 8011f50:	fb02 3311 	mls	r3, r2, r1, r3
 8011f54:	5cc3      	ldrb	r3, [r0, r3]
 8011f56:	f805 3d01 	strb.w	r3, [r5, #-1]!
 8011f5a:	460b      	mov	r3, r1
 8011f5c:	2900      	cmp	r1, #0
 8011f5e:	d1f5      	bne.n	8011f4c <_printf_i+0x16c>
 8011f60:	e7b9      	b.n	8011ed6 <_printf_i+0xf6>
 8011f62:	6813      	ldr	r3, [r2, #0]
 8011f64:	6825      	ldr	r5, [r4, #0]
 8011f66:	6961      	ldr	r1, [r4, #20]
 8011f68:	1d18      	adds	r0, r3, #4
 8011f6a:	6010      	str	r0, [r2, #0]
 8011f6c:	0628      	lsls	r0, r5, #24
 8011f6e:	681b      	ldr	r3, [r3, #0]
 8011f70:	d501      	bpl.n	8011f76 <_printf_i+0x196>
 8011f72:	6019      	str	r1, [r3, #0]
 8011f74:	e002      	b.n	8011f7c <_printf_i+0x19c>
 8011f76:	066a      	lsls	r2, r5, #25
 8011f78:	d5fb      	bpl.n	8011f72 <_printf_i+0x192>
 8011f7a:	8019      	strh	r1, [r3, #0]
 8011f7c:	2300      	movs	r3, #0
 8011f7e:	6123      	str	r3, [r4, #16]
 8011f80:	4665      	mov	r5, ip
 8011f82:	e7b9      	b.n	8011ef8 <_printf_i+0x118>
 8011f84:	6813      	ldr	r3, [r2, #0]
 8011f86:	1d19      	adds	r1, r3, #4
 8011f88:	6011      	str	r1, [r2, #0]
 8011f8a:	681d      	ldr	r5, [r3, #0]
 8011f8c:	6862      	ldr	r2, [r4, #4]
 8011f8e:	2100      	movs	r1, #0
 8011f90:	4628      	mov	r0, r5
 8011f92:	f7ee f94d 	bl	8000230 <memchr>
 8011f96:	b108      	cbz	r0, 8011f9c <_printf_i+0x1bc>
 8011f98:	1b40      	subs	r0, r0, r5
 8011f9a:	6060      	str	r0, [r4, #4]
 8011f9c:	6863      	ldr	r3, [r4, #4]
 8011f9e:	6123      	str	r3, [r4, #16]
 8011fa0:	2300      	movs	r3, #0
 8011fa2:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8011fa6:	e7a7      	b.n	8011ef8 <_printf_i+0x118>
 8011fa8:	6923      	ldr	r3, [r4, #16]
 8011faa:	462a      	mov	r2, r5
 8011fac:	4639      	mov	r1, r7
 8011fae:	4630      	mov	r0, r6
 8011fb0:	47c0      	blx	r8
 8011fb2:	3001      	adds	r0, #1
 8011fb4:	d0aa      	beq.n	8011f0c <_printf_i+0x12c>
 8011fb6:	6823      	ldr	r3, [r4, #0]
 8011fb8:	079b      	lsls	r3, r3, #30
 8011fba:	d413      	bmi.n	8011fe4 <_printf_i+0x204>
 8011fbc:	68e0      	ldr	r0, [r4, #12]
 8011fbe:	9b03      	ldr	r3, [sp, #12]
 8011fc0:	4298      	cmp	r0, r3
 8011fc2:	bfb8      	it	lt
 8011fc4:	4618      	movlt	r0, r3
 8011fc6:	e7a3      	b.n	8011f10 <_printf_i+0x130>
 8011fc8:	2301      	movs	r3, #1
 8011fca:	464a      	mov	r2, r9
 8011fcc:	4639      	mov	r1, r7
 8011fce:	4630      	mov	r0, r6
 8011fd0:	47c0      	blx	r8
 8011fd2:	3001      	adds	r0, #1
 8011fd4:	d09a      	beq.n	8011f0c <_printf_i+0x12c>
 8011fd6:	3501      	adds	r5, #1
 8011fd8:	68e3      	ldr	r3, [r4, #12]
 8011fda:	9a03      	ldr	r2, [sp, #12]
 8011fdc:	1a9b      	subs	r3, r3, r2
 8011fde:	42ab      	cmp	r3, r5
 8011fe0:	dcf2      	bgt.n	8011fc8 <_printf_i+0x1e8>
 8011fe2:	e7eb      	b.n	8011fbc <_printf_i+0x1dc>
 8011fe4:	2500      	movs	r5, #0
 8011fe6:	f104 0919 	add.w	r9, r4, #25
 8011fea:	e7f5      	b.n	8011fd8 <_printf_i+0x1f8>
 8011fec:	2b00      	cmp	r3, #0
 8011fee:	d1ac      	bne.n	8011f4a <_printf_i+0x16a>
 8011ff0:	7803      	ldrb	r3, [r0, #0]
 8011ff2:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8011ff6:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8011ffa:	e76c      	b.n	8011ed6 <_printf_i+0xf6>
 8011ffc:	08016990 	.word	0x08016990
 8012000:	080169a1 	.word	0x080169a1

08012004 <iprintf>:
 8012004:	b40f      	push	{r0, r1, r2, r3}
 8012006:	4b0a      	ldr	r3, [pc, #40]	; (8012030 <iprintf+0x2c>)
 8012008:	b513      	push	{r0, r1, r4, lr}
 801200a:	681c      	ldr	r4, [r3, #0]
 801200c:	b124      	cbz	r4, 8012018 <iprintf+0x14>
 801200e:	69a3      	ldr	r3, [r4, #24]
 8012010:	b913      	cbnz	r3, 8012018 <iprintf+0x14>
 8012012:	4620      	mov	r0, r4
 8012014:	f001 f8ac 	bl	8013170 <__sinit>
 8012018:	ab05      	add	r3, sp, #20
 801201a:	9a04      	ldr	r2, [sp, #16]
 801201c:	68a1      	ldr	r1, [r4, #8]
 801201e:	9301      	str	r3, [sp, #4]
 8012020:	4620      	mov	r0, r4
 8012022:	f001 fec1 	bl	8013da8 <_vfiprintf_r>
 8012026:	b002      	add	sp, #8
 8012028:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801202c:	b004      	add	sp, #16
 801202e:	4770      	bx	lr
 8012030:	20001eb4 	.word	0x20001eb4

08012034 <_puts_r>:
 8012034:	b570      	push	{r4, r5, r6, lr}
 8012036:	460e      	mov	r6, r1
 8012038:	4605      	mov	r5, r0
 801203a:	b118      	cbz	r0, 8012044 <_puts_r+0x10>
 801203c:	6983      	ldr	r3, [r0, #24]
 801203e:	b90b      	cbnz	r3, 8012044 <_puts_r+0x10>
 8012040:	f001 f896 	bl	8013170 <__sinit>
 8012044:	69ab      	ldr	r3, [r5, #24]
 8012046:	68ac      	ldr	r4, [r5, #8]
 8012048:	b913      	cbnz	r3, 8012050 <_puts_r+0x1c>
 801204a:	4628      	mov	r0, r5
 801204c:	f001 f890 	bl	8013170 <__sinit>
 8012050:	4b23      	ldr	r3, [pc, #140]	; (80120e0 <_puts_r+0xac>)
 8012052:	429c      	cmp	r4, r3
 8012054:	d117      	bne.n	8012086 <_puts_r+0x52>
 8012056:	686c      	ldr	r4, [r5, #4]
 8012058:	89a3      	ldrh	r3, [r4, #12]
 801205a:	071b      	lsls	r3, r3, #28
 801205c:	d51d      	bpl.n	801209a <_puts_r+0x66>
 801205e:	6923      	ldr	r3, [r4, #16]
 8012060:	b1db      	cbz	r3, 801209a <_puts_r+0x66>
 8012062:	3e01      	subs	r6, #1
 8012064:	68a3      	ldr	r3, [r4, #8]
 8012066:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 801206a:	3b01      	subs	r3, #1
 801206c:	60a3      	str	r3, [r4, #8]
 801206e:	b9e9      	cbnz	r1, 80120ac <_puts_r+0x78>
 8012070:	2b00      	cmp	r3, #0
 8012072:	da2e      	bge.n	80120d2 <_puts_r+0x9e>
 8012074:	4622      	mov	r2, r4
 8012076:	210a      	movs	r1, #10
 8012078:	4628      	mov	r0, r5
 801207a:	f000 f883 	bl	8012184 <__swbuf_r>
 801207e:	3001      	adds	r0, #1
 8012080:	d011      	beq.n	80120a6 <_puts_r+0x72>
 8012082:	200a      	movs	r0, #10
 8012084:	e011      	b.n	80120aa <_puts_r+0x76>
 8012086:	4b17      	ldr	r3, [pc, #92]	; (80120e4 <_puts_r+0xb0>)
 8012088:	429c      	cmp	r4, r3
 801208a:	d101      	bne.n	8012090 <_puts_r+0x5c>
 801208c:	68ac      	ldr	r4, [r5, #8]
 801208e:	e7e3      	b.n	8012058 <_puts_r+0x24>
 8012090:	4b15      	ldr	r3, [pc, #84]	; (80120e8 <_puts_r+0xb4>)
 8012092:	429c      	cmp	r4, r3
 8012094:	bf08      	it	eq
 8012096:	68ec      	ldreq	r4, [r5, #12]
 8012098:	e7de      	b.n	8012058 <_puts_r+0x24>
 801209a:	4621      	mov	r1, r4
 801209c:	4628      	mov	r0, r5
 801209e:	f000 f8c3 	bl	8012228 <__swsetup_r>
 80120a2:	2800      	cmp	r0, #0
 80120a4:	d0dd      	beq.n	8012062 <_puts_r+0x2e>
 80120a6:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80120aa:	bd70      	pop	{r4, r5, r6, pc}
 80120ac:	2b00      	cmp	r3, #0
 80120ae:	da04      	bge.n	80120ba <_puts_r+0x86>
 80120b0:	69a2      	ldr	r2, [r4, #24]
 80120b2:	429a      	cmp	r2, r3
 80120b4:	dc06      	bgt.n	80120c4 <_puts_r+0x90>
 80120b6:	290a      	cmp	r1, #10
 80120b8:	d004      	beq.n	80120c4 <_puts_r+0x90>
 80120ba:	6823      	ldr	r3, [r4, #0]
 80120bc:	1c5a      	adds	r2, r3, #1
 80120be:	6022      	str	r2, [r4, #0]
 80120c0:	7019      	strb	r1, [r3, #0]
 80120c2:	e7cf      	b.n	8012064 <_puts_r+0x30>
 80120c4:	4622      	mov	r2, r4
 80120c6:	4628      	mov	r0, r5
 80120c8:	f000 f85c 	bl	8012184 <__swbuf_r>
 80120cc:	3001      	adds	r0, #1
 80120ce:	d1c9      	bne.n	8012064 <_puts_r+0x30>
 80120d0:	e7e9      	b.n	80120a6 <_puts_r+0x72>
 80120d2:	6823      	ldr	r3, [r4, #0]
 80120d4:	200a      	movs	r0, #10
 80120d6:	1c5a      	adds	r2, r3, #1
 80120d8:	6022      	str	r2, [r4, #0]
 80120da:	7018      	strb	r0, [r3, #0]
 80120dc:	e7e5      	b.n	80120aa <_puts_r+0x76>
 80120de:	bf00      	nop
 80120e0:	080169e0 	.word	0x080169e0
 80120e4:	08016a00 	.word	0x08016a00
 80120e8:	080169c0 	.word	0x080169c0

080120ec <puts>:
 80120ec:	4b02      	ldr	r3, [pc, #8]	; (80120f8 <puts+0xc>)
 80120ee:	4601      	mov	r1, r0
 80120f0:	6818      	ldr	r0, [r3, #0]
 80120f2:	f7ff bf9f 	b.w	8012034 <_puts_r>
 80120f6:	bf00      	nop
 80120f8:	20001eb4 	.word	0x20001eb4

080120fc <sniprintf>:
 80120fc:	b40c      	push	{r2, r3}
 80120fe:	b530      	push	{r4, r5, lr}
 8012100:	4b17      	ldr	r3, [pc, #92]	; (8012160 <sniprintf+0x64>)
 8012102:	1e0c      	subs	r4, r1, #0
 8012104:	b09d      	sub	sp, #116	; 0x74
 8012106:	681d      	ldr	r5, [r3, #0]
 8012108:	da08      	bge.n	801211c <sniprintf+0x20>
 801210a:	238b      	movs	r3, #139	; 0x8b
 801210c:	602b      	str	r3, [r5, #0]
 801210e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8012112:	b01d      	add	sp, #116	; 0x74
 8012114:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8012118:	b002      	add	sp, #8
 801211a:	4770      	bx	lr
 801211c:	f44f 7302 	mov.w	r3, #520	; 0x208
 8012120:	f8ad 3014 	strh.w	r3, [sp, #20]
 8012124:	bf14      	ite	ne
 8012126:	f104 33ff 	addne.w	r3, r4, #4294967295	; 0xffffffff
 801212a:	4623      	moveq	r3, r4
 801212c:	9304      	str	r3, [sp, #16]
 801212e:	9307      	str	r3, [sp, #28]
 8012130:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8012134:	9002      	str	r0, [sp, #8]
 8012136:	9006      	str	r0, [sp, #24]
 8012138:	f8ad 3016 	strh.w	r3, [sp, #22]
 801213c:	9a20      	ldr	r2, [sp, #128]	; 0x80
 801213e:	ab21      	add	r3, sp, #132	; 0x84
 8012140:	a902      	add	r1, sp, #8
 8012142:	4628      	mov	r0, r5
 8012144:	9301      	str	r3, [sp, #4]
 8012146:	f001 fd0d 	bl	8013b64 <_svfiprintf_r>
 801214a:	1c43      	adds	r3, r0, #1
 801214c:	bfbc      	itt	lt
 801214e:	238b      	movlt	r3, #139	; 0x8b
 8012150:	602b      	strlt	r3, [r5, #0]
 8012152:	2c00      	cmp	r4, #0
 8012154:	d0dd      	beq.n	8012112 <sniprintf+0x16>
 8012156:	9b02      	ldr	r3, [sp, #8]
 8012158:	2200      	movs	r2, #0
 801215a:	701a      	strb	r2, [r3, #0]
 801215c:	e7d9      	b.n	8012112 <sniprintf+0x16>
 801215e:	bf00      	nop
 8012160:	20001eb4 	.word	0x20001eb4

08012164 <strcat>:
 8012164:	b510      	push	{r4, lr}
 8012166:	4603      	mov	r3, r0
 8012168:	781a      	ldrb	r2, [r3, #0]
 801216a:	1c5c      	adds	r4, r3, #1
 801216c:	b93a      	cbnz	r2, 801217e <strcat+0x1a>
 801216e:	3b01      	subs	r3, #1
 8012170:	f811 2b01 	ldrb.w	r2, [r1], #1
 8012174:	f803 2f01 	strb.w	r2, [r3, #1]!
 8012178:	2a00      	cmp	r2, #0
 801217a:	d1f9      	bne.n	8012170 <strcat+0xc>
 801217c:	bd10      	pop	{r4, pc}
 801217e:	4623      	mov	r3, r4
 8012180:	e7f2      	b.n	8012168 <strcat+0x4>
	...

08012184 <__swbuf_r>:
 8012184:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8012186:	460e      	mov	r6, r1
 8012188:	4614      	mov	r4, r2
 801218a:	4605      	mov	r5, r0
 801218c:	b118      	cbz	r0, 8012196 <__swbuf_r+0x12>
 801218e:	6983      	ldr	r3, [r0, #24]
 8012190:	b90b      	cbnz	r3, 8012196 <__swbuf_r+0x12>
 8012192:	f000 ffed 	bl	8013170 <__sinit>
 8012196:	4b21      	ldr	r3, [pc, #132]	; (801221c <__swbuf_r+0x98>)
 8012198:	429c      	cmp	r4, r3
 801219a:	d12a      	bne.n	80121f2 <__swbuf_r+0x6e>
 801219c:	686c      	ldr	r4, [r5, #4]
 801219e:	69a3      	ldr	r3, [r4, #24]
 80121a0:	60a3      	str	r3, [r4, #8]
 80121a2:	89a3      	ldrh	r3, [r4, #12]
 80121a4:	071a      	lsls	r2, r3, #28
 80121a6:	d52e      	bpl.n	8012206 <__swbuf_r+0x82>
 80121a8:	6923      	ldr	r3, [r4, #16]
 80121aa:	b363      	cbz	r3, 8012206 <__swbuf_r+0x82>
 80121ac:	6923      	ldr	r3, [r4, #16]
 80121ae:	6820      	ldr	r0, [r4, #0]
 80121b0:	1ac0      	subs	r0, r0, r3
 80121b2:	6963      	ldr	r3, [r4, #20]
 80121b4:	b2f6      	uxtb	r6, r6
 80121b6:	4283      	cmp	r3, r0
 80121b8:	4637      	mov	r7, r6
 80121ba:	dc04      	bgt.n	80121c6 <__swbuf_r+0x42>
 80121bc:	4621      	mov	r1, r4
 80121be:	4628      	mov	r0, r5
 80121c0:	f000 ff6c 	bl	801309c <_fflush_r>
 80121c4:	bb28      	cbnz	r0, 8012212 <__swbuf_r+0x8e>
 80121c6:	68a3      	ldr	r3, [r4, #8]
 80121c8:	3b01      	subs	r3, #1
 80121ca:	60a3      	str	r3, [r4, #8]
 80121cc:	6823      	ldr	r3, [r4, #0]
 80121ce:	1c5a      	adds	r2, r3, #1
 80121d0:	6022      	str	r2, [r4, #0]
 80121d2:	701e      	strb	r6, [r3, #0]
 80121d4:	6963      	ldr	r3, [r4, #20]
 80121d6:	3001      	adds	r0, #1
 80121d8:	4283      	cmp	r3, r0
 80121da:	d004      	beq.n	80121e6 <__swbuf_r+0x62>
 80121dc:	89a3      	ldrh	r3, [r4, #12]
 80121de:	07db      	lsls	r3, r3, #31
 80121e0:	d519      	bpl.n	8012216 <__swbuf_r+0x92>
 80121e2:	2e0a      	cmp	r6, #10
 80121e4:	d117      	bne.n	8012216 <__swbuf_r+0x92>
 80121e6:	4621      	mov	r1, r4
 80121e8:	4628      	mov	r0, r5
 80121ea:	f000 ff57 	bl	801309c <_fflush_r>
 80121ee:	b190      	cbz	r0, 8012216 <__swbuf_r+0x92>
 80121f0:	e00f      	b.n	8012212 <__swbuf_r+0x8e>
 80121f2:	4b0b      	ldr	r3, [pc, #44]	; (8012220 <__swbuf_r+0x9c>)
 80121f4:	429c      	cmp	r4, r3
 80121f6:	d101      	bne.n	80121fc <__swbuf_r+0x78>
 80121f8:	68ac      	ldr	r4, [r5, #8]
 80121fa:	e7d0      	b.n	801219e <__swbuf_r+0x1a>
 80121fc:	4b09      	ldr	r3, [pc, #36]	; (8012224 <__swbuf_r+0xa0>)
 80121fe:	429c      	cmp	r4, r3
 8012200:	bf08      	it	eq
 8012202:	68ec      	ldreq	r4, [r5, #12]
 8012204:	e7cb      	b.n	801219e <__swbuf_r+0x1a>
 8012206:	4621      	mov	r1, r4
 8012208:	4628      	mov	r0, r5
 801220a:	f000 f80d 	bl	8012228 <__swsetup_r>
 801220e:	2800      	cmp	r0, #0
 8012210:	d0cc      	beq.n	80121ac <__swbuf_r+0x28>
 8012212:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 8012216:	4638      	mov	r0, r7
 8012218:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801221a:	bf00      	nop
 801221c:	080169e0 	.word	0x080169e0
 8012220:	08016a00 	.word	0x08016a00
 8012224:	080169c0 	.word	0x080169c0

08012228 <__swsetup_r>:
 8012228:	4b32      	ldr	r3, [pc, #200]	; (80122f4 <__swsetup_r+0xcc>)
 801222a:	b570      	push	{r4, r5, r6, lr}
 801222c:	681d      	ldr	r5, [r3, #0]
 801222e:	4606      	mov	r6, r0
 8012230:	460c      	mov	r4, r1
 8012232:	b125      	cbz	r5, 801223e <__swsetup_r+0x16>
 8012234:	69ab      	ldr	r3, [r5, #24]
 8012236:	b913      	cbnz	r3, 801223e <__swsetup_r+0x16>
 8012238:	4628      	mov	r0, r5
 801223a:	f000 ff99 	bl	8013170 <__sinit>
 801223e:	4b2e      	ldr	r3, [pc, #184]	; (80122f8 <__swsetup_r+0xd0>)
 8012240:	429c      	cmp	r4, r3
 8012242:	d10f      	bne.n	8012264 <__swsetup_r+0x3c>
 8012244:	686c      	ldr	r4, [r5, #4]
 8012246:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801224a:	b29a      	uxth	r2, r3
 801224c:	0715      	lsls	r5, r2, #28
 801224e:	d42c      	bmi.n	80122aa <__swsetup_r+0x82>
 8012250:	06d0      	lsls	r0, r2, #27
 8012252:	d411      	bmi.n	8012278 <__swsetup_r+0x50>
 8012254:	2209      	movs	r2, #9
 8012256:	6032      	str	r2, [r6, #0]
 8012258:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801225c:	81a3      	strh	r3, [r4, #12]
 801225e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8012262:	e03e      	b.n	80122e2 <__swsetup_r+0xba>
 8012264:	4b25      	ldr	r3, [pc, #148]	; (80122fc <__swsetup_r+0xd4>)
 8012266:	429c      	cmp	r4, r3
 8012268:	d101      	bne.n	801226e <__swsetup_r+0x46>
 801226a:	68ac      	ldr	r4, [r5, #8]
 801226c:	e7eb      	b.n	8012246 <__swsetup_r+0x1e>
 801226e:	4b24      	ldr	r3, [pc, #144]	; (8012300 <__swsetup_r+0xd8>)
 8012270:	429c      	cmp	r4, r3
 8012272:	bf08      	it	eq
 8012274:	68ec      	ldreq	r4, [r5, #12]
 8012276:	e7e6      	b.n	8012246 <__swsetup_r+0x1e>
 8012278:	0751      	lsls	r1, r2, #29
 801227a:	d512      	bpl.n	80122a2 <__swsetup_r+0x7a>
 801227c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 801227e:	b141      	cbz	r1, 8012292 <__swsetup_r+0x6a>
 8012280:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8012284:	4299      	cmp	r1, r3
 8012286:	d002      	beq.n	801228e <__swsetup_r+0x66>
 8012288:	4630      	mov	r0, r6
 801228a:	f001 fb69 	bl	8013960 <_free_r>
 801228e:	2300      	movs	r3, #0
 8012290:	6363      	str	r3, [r4, #52]	; 0x34
 8012292:	89a3      	ldrh	r3, [r4, #12]
 8012294:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8012298:	81a3      	strh	r3, [r4, #12]
 801229a:	2300      	movs	r3, #0
 801229c:	6063      	str	r3, [r4, #4]
 801229e:	6923      	ldr	r3, [r4, #16]
 80122a0:	6023      	str	r3, [r4, #0]
 80122a2:	89a3      	ldrh	r3, [r4, #12]
 80122a4:	f043 0308 	orr.w	r3, r3, #8
 80122a8:	81a3      	strh	r3, [r4, #12]
 80122aa:	6923      	ldr	r3, [r4, #16]
 80122ac:	b94b      	cbnz	r3, 80122c2 <__swsetup_r+0x9a>
 80122ae:	89a3      	ldrh	r3, [r4, #12]
 80122b0:	f403 7320 	and.w	r3, r3, #640	; 0x280
 80122b4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80122b8:	d003      	beq.n	80122c2 <__swsetup_r+0x9a>
 80122ba:	4621      	mov	r1, r4
 80122bc:	4630      	mov	r0, r6
 80122be:	f001 f813 	bl	80132e8 <__smakebuf_r>
 80122c2:	89a2      	ldrh	r2, [r4, #12]
 80122c4:	f012 0301 	ands.w	r3, r2, #1
 80122c8:	d00c      	beq.n	80122e4 <__swsetup_r+0xbc>
 80122ca:	2300      	movs	r3, #0
 80122cc:	60a3      	str	r3, [r4, #8]
 80122ce:	6963      	ldr	r3, [r4, #20]
 80122d0:	425b      	negs	r3, r3
 80122d2:	61a3      	str	r3, [r4, #24]
 80122d4:	6923      	ldr	r3, [r4, #16]
 80122d6:	b953      	cbnz	r3, 80122ee <__swsetup_r+0xc6>
 80122d8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80122dc:	f013 0080 	ands.w	r0, r3, #128	; 0x80
 80122e0:	d1ba      	bne.n	8012258 <__swsetup_r+0x30>
 80122e2:	bd70      	pop	{r4, r5, r6, pc}
 80122e4:	0792      	lsls	r2, r2, #30
 80122e6:	bf58      	it	pl
 80122e8:	6963      	ldrpl	r3, [r4, #20]
 80122ea:	60a3      	str	r3, [r4, #8]
 80122ec:	e7f2      	b.n	80122d4 <__swsetup_r+0xac>
 80122ee:	2000      	movs	r0, #0
 80122f0:	e7f7      	b.n	80122e2 <__swsetup_r+0xba>
 80122f2:	bf00      	nop
 80122f4:	20001eb4 	.word	0x20001eb4
 80122f8:	080169e0 	.word	0x080169e0
 80122fc:	08016a00 	.word	0x08016a00
 8012300:	080169c0 	.word	0x080169c0

08012304 <quorem>:
 8012304:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012308:	6903      	ldr	r3, [r0, #16]
 801230a:	690c      	ldr	r4, [r1, #16]
 801230c:	42a3      	cmp	r3, r4
 801230e:	4680      	mov	r8, r0
 8012310:	f2c0 8082 	blt.w	8012418 <quorem+0x114>
 8012314:	3c01      	subs	r4, #1
 8012316:	f101 0714 	add.w	r7, r1, #20
 801231a:	ea4f 0c84 	mov.w	ip, r4, lsl #2
 801231e:	f100 0614 	add.w	r6, r0, #20
 8012322:	f857 5024 	ldr.w	r5, [r7, r4, lsl #2]
 8012326:	f856 0024 	ldr.w	r0, [r6, r4, lsl #2]
 801232a:	eb06 030c 	add.w	r3, r6, ip
 801232e:	3501      	adds	r5, #1
 8012330:	eb07 090c 	add.w	r9, r7, ip
 8012334:	9301      	str	r3, [sp, #4]
 8012336:	fbb0 f5f5 	udiv	r5, r0, r5
 801233a:	b395      	cbz	r5, 80123a2 <quorem+0x9e>
 801233c:	f04f 0a00 	mov.w	sl, #0
 8012340:	4638      	mov	r0, r7
 8012342:	46b6      	mov	lr, r6
 8012344:	46d3      	mov	fp, sl
 8012346:	f850 2b04 	ldr.w	r2, [r0], #4
 801234a:	b293      	uxth	r3, r2
 801234c:	fb05 a303 	mla	r3, r5, r3, sl
 8012350:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8012354:	b29b      	uxth	r3, r3
 8012356:	ebab 0303 	sub.w	r3, fp, r3
 801235a:	0c12      	lsrs	r2, r2, #16
 801235c:	f8de b000 	ldr.w	fp, [lr]
 8012360:	fb05 a202 	mla	r2, r5, r2, sl
 8012364:	fa13 f38b 	uxtah	r3, r3, fp
 8012368:	ea4f 4a12 	mov.w	sl, r2, lsr #16
 801236c:	fa1f fb82 	uxth.w	fp, r2
 8012370:	f8de 2000 	ldr.w	r2, [lr]
 8012374:	ebcb 4212 	rsb	r2, fp, r2, lsr #16
 8012378:	eb02 4223 	add.w	r2, r2, r3, asr #16
 801237c:	b29b      	uxth	r3, r3
 801237e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8012382:	4581      	cmp	r9, r0
 8012384:	ea4f 4b22 	mov.w	fp, r2, asr #16
 8012388:	f84e 3b04 	str.w	r3, [lr], #4
 801238c:	d2db      	bcs.n	8012346 <quorem+0x42>
 801238e:	f856 300c 	ldr.w	r3, [r6, ip]
 8012392:	b933      	cbnz	r3, 80123a2 <quorem+0x9e>
 8012394:	9b01      	ldr	r3, [sp, #4]
 8012396:	3b04      	subs	r3, #4
 8012398:	429e      	cmp	r6, r3
 801239a:	461a      	mov	r2, r3
 801239c:	d330      	bcc.n	8012400 <quorem+0xfc>
 801239e:	f8c8 4010 	str.w	r4, [r8, #16]
 80123a2:	4640      	mov	r0, r8
 80123a4:	f001 fa08 	bl	80137b8 <__mcmp>
 80123a8:	2800      	cmp	r0, #0
 80123aa:	db25      	blt.n	80123f8 <quorem+0xf4>
 80123ac:	3501      	adds	r5, #1
 80123ae:	4630      	mov	r0, r6
 80123b0:	f04f 0c00 	mov.w	ip, #0
 80123b4:	f857 2b04 	ldr.w	r2, [r7], #4
 80123b8:	f8d0 e000 	ldr.w	lr, [r0]
 80123bc:	b293      	uxth	r3, r2
 80123be:	ebac 0303 	sub.w	r3, ip, r3
 80123c2:	0c12      	lsrs	r2, r2, #16
 80123c4:	fa13 f38e 	uxtah	r3, r3, lr
 80123c8:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 80123cc:	eb02 4223 	add.w	r2, r2, r3, asr #16
 80123d0:	b29b      	uxth	r3, r3
 80123d2:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80123d6:	45b9      	cmp	r9, r7
 80123d8:	ea4f 4c22 	mov.w	ip, r2, asr #16
 80123dc:	f840 3b04 	str.w	r3, [r0], #4
 80123e0:	d2e8      	bcs.n	80123b4 <quorem+0xb0>
 80123e2:	f856 2024 	ldr.w	r2, [r6, r4, lsl #2]
 80123e6:	eb06 0384 	add.w	r3, r6, r4, lsl #2
 80123ea:	b92a      	cbnz	r2, 80123f8 <quorem+0xf4>
 80123ec:	3b04      	subs	r3, #4
 80123ee:	429e      	cmp	r6, r3
 80123f0:	461a      	mov	r2, r3
 80123f2:	d30b      	bcc.n	801240c <quorem+0x108>
 80123f4:	f8c8 4010 	str.w	r4, [r8, #16]
 80123f8:	4628      	mov	r0, r5
 80123fa:	b003      	add	sp, #12
 80123fc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8012400:	6812      	ldr	r2, [r2, #0]
 8012402:	3b04      	subs	r3, #4
 8012404:	2a00      	cmp	r2, #0
 8012406:	d1ca      	bne.n	801239e <quorem+0x9a>
 8012408:	3c01      	subs	r4, #1
 801240a:	e7c5      	b.n	8012398 <quorem+0x94>
 801240c:	6812      	ldr	r2, [r2, #0]
 801240e:	3b04      	subs	r3, #4
 8012410:	2a00      	cmp	r2, #0
 8012412:	d1ef      	bne.n	80123f4 <quorem+0xf0>
 8012414:	3c01      	subs	r4, #1
 8012416:	e7ea      	b.n	80123ee <quorem+0xea>
 8012418:	2000      	movs	r0, #0
 801241a:	e7ee      	b.n	80123fa <quorem+0xf6>
 801241c:	0000      	movs	r0, r0
	...

08012420 <_dtoa_r>:
 8012420:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012424:	ec57 6b10 	vmov	r6, r7, d0
 8012428:	b097      	sub	sp, #92	; 0x5c
 801242a:	6a45      	ldr	r5, [r0, #36]	; 0x24
 801242c:	9106      	str	r1, [sp, #24]
 801242e:	4604      	mov	r4, r0
 8012430:	920b      	str	r2, [sp, #44]	; 0x2c
 8012432:	9312      	str	r3, [sp, #72]	; 0x48
 8012434:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 8012438:	e9cd 6700 	strd	r6, r7, [sp]
 801243c:	b93d      	cbnz	r5, 801244e <_dtoa_r+0x2e>
 801243e:	2010      	movs	r0, #16
 8012440:	f000 ff92 	bl	8013368 <malloc>
 8012444:	6260      	str	r0, [r4, #36]	; 0x24
 8012446:	e9c0 5501 	strd	r5, r5, [r0, #4]
 801244a:	6005      	str	r5, [r0, #0]
 801244c:	60c5      	str	r5, [r0, #12]
 801244e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8012450:	6819      	ldr	r1, [r3, #0]
 8012452:	b151      	cbz	r1, 801246a <_dtoa_r+0x4a>
 8012454:	685a      	ldr	r2, [r3, #4]
 8012456:	604a      	str	r2, [r1, #4]
 8012458:	2301      	movs	r3, #1
 801245a:	4093      	lsls	r3, r2
 801245c:	608b      	str	r3, [r1, #8]
 801245e:	4620      	mov	r0, r4
 8012460:	f000 ffc9 	bl	80133f6 <_Bfree>
 8012464:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8012466:	2200      	movs	r2, #0
 8012468:	601a      	str	r2, [r3, #0]
 801246a:	1e3b      	subs	r3, r7, #0
 801246c:	bfbb      	ittet	lt
 801246e:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 8012472:	9301      	strlt	r3, [sp, #4]
 8012474:	2300      	movge	r3, #0
 8012476:	2201      	movlt	r2, #1
 8012478:	bfac      	ite	ge
 801247a:	f8c8 3000 	strge.w	r3, [r8]
 801247e:	f8c8 2000 	strlt.w	r2, [r8]
 8012482:	4baf      	ldr	r3, [pc, #700]	; (8012740 <_dtoa_r+0x320>)
 8012484:	f8dd 8004 	ldr.w	r8, [sp, #4]
 8012488:	ea33 0308 	bics.w	r3, r3, r8
 801248c:	d114      	bne.n	80124b8 <_dtoa_r+0x98>
 801248e:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8012490:	f242 730f 	movw	r3, #9999	; 0x270f
 8012494:	6013      	str	r3, [r2, #0]
 8012496:	9b00      	ldr	r3, [sp, #0]
 8012498:	b923      	cbnz	r3, 80124a4 <_dtoa_r+0x84>
 801249a:	f3c8 0013 	ubfx	r0, r8, #0, #20
 801249e:	2800      	cmp	r0, #0
 80124a0:	f000 8542 	beq.w	8012f28 <_dtoa_r+0xb08>
 80124a4:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80124a6:	f8df b2ac 	ldr.w	fp, [pc, #684]	; 8012754 <_dtoa_r+0x334>
 80124aa:	2b00      	cmp	r3, #0
 80124ac:	f000 8544 	beq.w	8012f38 <_dtoa_r+0xb18>
 80124b0:	f10b 0303 	add.w	r3, fp, #3
 80124b4:	f000 bd3e 	b.w	8012f34 <_dtoa_r+0xb14>
 80124b8:	e9dd 6700 	ldrd	r6, r7, [sp]
 80124bc:	2200      	movs	r2, #0
 80124be:	2300      	movs	r3, #0
 80124c0:	4630      	mov	r0, r6
 80124c2:	4639      	mov	r1, r7
 80124c4:	f7ee fb28 	bl	8000b18 <__aeabi_dcmpeq>
 80124c8:	4681      	mov	r9, r0
 80124ca:	b168      	cbz	r0, 80124e8 <_dtoa_r+0xc8>
 80124cc:	9a12      	ldr	r2, [sp, #72]	; 0x48
 80124ce:	2301      	movs	r3, #1
 80124d0:	6013      	str	r3, [r2, #0]
 80124d2:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80124d4:	2b00      	cmp	r3, #0
 80124d6:	f000 8524 	beq.w	8012f22 <_dtoa_r+0xb02>
 80124da:	4b9a      	ldr	r3, [pc, #616]	; (8012744 <_dtoa_r+0x324>)
 80124dc:	9a21      	ldr	r2, [sp, #132]	; 0x84
 80124de:	f103 3bff 	add.w	fp, r3, #4294967295	; 0xffffffff
 80124e2:	6013      	str	r3, [r2, #0]
 80124e4:	f000 bd28 	b.w	8012f38 <_dtoa_r+0xb18>
 80124e8:	aa14      	add	r2, sp, #80	; 0x50
 80124ea:	a915      	add	r1, sp, #84	; 0x54
 80124ec:	ec47 6b10 	vmov	d0, r6, r7
 80124f0:	4620      	mov	r0, r4
 80124f2:	f001 f9d8 	bl	80138a6 <__d2b>
 80124f6:	f3c8 550a 	ubfx	r5, r8, #20, #11
 80124fa:	9004      	str	r0, [sp, #16]
 80124fc:	2d00      	cmp	r5, #0
 80124fe:	d07c      	beq.n	80125fa <_dtoa_r+0x1da>
 8012500:	f3c7 0313 	ubfx	r3, r7, #0, #20
 8012504:	f043 5b7f 	orr.w	fp, r3, #1069547520	; 0x3fc00000
 8012508:	46b2      	mov	sl, r6
 801250a:	f44b 1b40 	orr.w	fp, fp, #3145728	; 0x300000
 801250e:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 8012512:	f8cd 904c 	str.w	r9, [sp, #76]	; 0x4c
 8012516:	2200      	movs	r2, #0
 8012518:	4b8b      	ldr	r3, [pc, #556]	; (8012748 <_dtoa_r+0x328>)
 801251a:	4650      	mov	r0, sl
 801251c:	4659      	mov	r1, fp
 801251e:	f7ed fedb 	bl	80002d8 <__aeabi_dsub>
 8012522:	a381      	add	r3, pc, #516	; (adr r3, 8012728 <_dtoa_r+0x308>)
 8012524:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012528:	f7ee f88e 	bl	8000648 <__aeabi_dmul>
 801252c:	a380      	add	r3, pc, #512	; (adr r3, 8012730 <_dtoa_r+0x310>)
 801252e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012532:	f7ed fed3 	bl	80002dc <__adddf3>
 8012536:	4606      	mov	r6, r0
 8012538:	4628      	mov	r0, r5
 801253a:	460f      	mov	r7, r1
 801253c:	f7ee f81a 	bl	8000574 <__aeabi_i2d>
 8012540:	a37d      	add	r3, pc, #500	; (adr r3, 8012738 <_dtoa_r+0x318>)
 8012542:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012546:	f7ee f87f 	bl	8000648 <__aeabi_dmul>
 801254a:	4602      	mov	r2, r0
 801254c:	460b      	mov	r3, r1
 801254e:	4630      	mov	r0, r6
 8012550:	4639      	mov	r1, r7
 8012552:	f7ed fec3 	bl	80002dc <__adddf3>
 8012556:	4606      	mov	r6, r0
 8012558:	460f      	mov	r7, r1
 801255a:	f7ee fb25 	bl	8000ba8 <__aeabi_d2iz>
 801255e:	2200      	movs	r2, #0
 8012560:	4682      	mov	sl, r0
 8012562:	2300      	movs	r3, #0
 8012564:	4630      	mov	r0, r6
 8012566:	4639      	mov	r1, r7
 8012568:	f7ee fae0 	bl	8000b2c <__aeabi_dcmplt>
 801256c:	b148      	cbz	r0, 8012582 <_dtoa_r+0x162>
 801256e:	4650      	mov	r0, sl
 8012570:	f7ee f800 	bl	8000574 <__aeabi_i2d>
 8012574:	4632      	mov	r2, r6
 8012576:	463b      	mov	r3, r7
 8012578:	f7ee face 	bl	8000b18 <__aeabi_dcmpeq>
 801257c:	b908      	cbnz	r0, 8012582 <_dtoa_r+0x162>
 801257e:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
 8012582:	f1ba 0f16 	cmp.w	sl, #22
 8012586:	d859      	bhi.n	801263c <_dtoa_r+0x21c>
 8012588:	4970      	ldr	r1, [pc, #448]	; (801274c <_dtoa_r+0x32c>)
 801258a:	eb01 01ca 	add.w	r1, r1, sl, lsl #3
 801258e:	e9dd 2300 	ldrd	r2, r3, [sp]
 8012592:	e9d1 0100 	ldrd	r0, r1, [r1]
 8012596:	f7ee fae7 	bl	8000b68 <__aeabi_dcmpgt>
 801259a:	2800      	cmp	r0, #0
 801259c:	d050      	beq.n	8012640 <_dtoa_r+0x220>
 801259e:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
 80125a2:	2300      	movs	r3, #0
 80125a4:	930f      	str	r3, [sp, #60]	; 0x3c
 80125a6:	9b14      	ldr	r3, [sp, #80]	; 0x50
 80125a8:	1b5d      	subs	r5, r3, r5
 80125aa:	f1b5 0801 	subs.w	r8, r5, #1
 80125ae:	bf49      	itett	mi
 80125b0:	f1c5 0301 	rsbmi	r3, r5, #1
 80125b4:	2300      	movpl	r3, #0
 80125b6:	9305      	strmi	r3, [sp, #20]
 80125b8:	f04f 0800 	movmi.w	r8, #0
 80125bc:	bf58      	it	pl
 80125be:	9305      	strpl	r3, [sp, #20]
 80125c0:	f1ba 0f00 	cmp.w	sl, #0
 80125c4:	db3e      	blt.n	8012644 <_dtoa_r+0x224>
 80125c6:	2300      	movs	r3, #0
 80125c8:	44d0      	add	r8, sl
 80125ca:	f8cd a038 	str.w	sl, [sp, #56]	; 0x38
 80125ce:	9307      	str	r3, [sp, #28]
 80125d0:	9b06      	ldr	r3, [sp, #24]
 80125d2:	2b09      	cmp	r3, #9
 80125d4:	f200 8090 	bhi.w	80126f8 <_dtoa_r+0x2d8>
 80125d8:	2b05      	cmp	r3, #5
 80125da:	bfc4      	itt	gt
 80125dc:	3b04      	subgt	r3, #4
 80125de:	9306      	strgt	r3, [sp, #24]
 80125e0:	9b06      	ldr	r3, [sp, #24]
 80125e2:	f1a3 0302 	sub.w	r3, r3, #2
 80125e6:	bfcc      	ite	gt
 80125e8:	2500      	movgt	r5, #0
 80125ea:	2501      	movle	r5, #1
 80125ec:	2b03      	cmp	r3, #3
 80125ee:	f200 808f 	bhi.w	8012710 <_dtoa_r+0x2f0>
 80125f2:	e8df f003 	tbb	[pc, r3]
 80125f6:	7f7d      	.short	0x7f7d
 80125f8:	7131      	.short	0x7131
 80125fa:	e9dd 5314 	ldrd	r5, r3, [sp, #80]	; 0x50
 80125fe:	441d      	add	r5, r3
 8012600:	f205 4032 	addw	r0, r5, #1074	; 0x432
 8012604:	2820      	cmp	r0, #32
 8012606:	dd13      	ble.n	8012630 <_dtoa_r+0x210>
 8012608:	f1c0 0040 	rsb	r0, r0, #64	; 0x40
 801260c:	9b00      	ldr	r3, [sp, #0]
 801260e:	fa08 f800 	lsl.w	r8, r8, r0
 8012612:	f205 4012 	addw	r0, r5, #1042	; 0x412
 8012616:	fa23 f000 	lsr.w	r0, r3, r0
 801261a:	ea48 0000 	orr.w	r0, r8, r0
 801261e:	f7ed ff99 	bl	8000554 <__aeabi_ui2d>
 8012622:	2301      	movs	r3, #1
 8012624:	4682      	mov	sl, r0
 8012626:	f1a1 7bf8 	sub.w	fp, r1, #32505856	; 0x1f00000
 801262a:	3d01      	subs	r5, #1
 801262c:	9313      	str	r3, [sp, #76]	; 0x4c
 801262e:	e772      	b.n	8012516 <_dtoa_r+0xf6>
 8012630:	9b00      	ldr	r3, [sp, #0]
 8012632:	f1c0 0020 	rsb	r0, r0, #32
 8012636:	fa03 f000 	lsl.w	r0, r3, r0
 801263a:	e7f0      	b.n	801261e <_dtoa_r+0x1fe>
 801263c:	2301      	movs	r3, #1
 801263e:	e7b1      	b.n	80125a4 <_dtoa_r+0x184>
 8012640:	900f      	str	r0, [sp, #60]	; 0x3c
 8012642:	e7b0      	b.n	80125a6 <_dtoa_r+0x186>
 8012644:	9b05      	ldr	r3, [sp, #20]
 8012646:	eba3 030a 	sub.w	r3, r3, sl
 801264a:	9305      	str	r3, [sp, #20]
 801264c:	f1ca 0300 	rsb	r3, sl, #0
 8012650:	9307      	str	r3, [sp, #28]
 8012652:	2300      	movs	r3, #0
 8012654:	930e      	str	r3, [sp, #56]	; 0x38
 8012656:	e7bb      	b.n	80125d0 <_dtoa_r+0x1b0>
 8012658:	2301      	movs	r3, #1
 801265a:	930a      	str	r3, [sp, #40]	; 0x28
 801265c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801265e:	2b00      	cmp	r3, #0
 8012660:	dd59      	ble.n	8012716 <_dtoa_r+0x2f6>
 8012662:	9302      	str	r3, [sp, #8]
 8012664:	4699      	mov	r9, r3
 8012666:	6a66      	ldr	r6, [r4, #36]	; 0x24
 8012668:	2200      	movs	r2, #0
 801266a:	6072      	str	r2, [r6, #4]
 801266c:	2204      	movs	r2, #4
 801266e:	f102 0014 	add.w	r0, r2, #20
 8012672:	4298      	cmp	r0, r3
 8012674:	6871      	ldr	r1, [r6, #4]
 8012676:	d953      	bls.n	8012720 <_dtoa_r+0x300>
 8012678:	4620      	mov	r0, r4
 801267a:	f000 fe88 	bl	801338e <_Balloc>
 801267e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8012680:	6030      	str	r0, [r6, #0]
 8012682:	f1b9 0f0e 	cmp.w	r9, #14
 8012686:	f8d3 b000 	ldr.w	fp, [r3]
 801268a:	f200 80e6 	bhi.w	801285a <_dtoa_r+0x43a>
 801268e:	2d00      	cmp	r5, #0
 8012690:	f000 80e3 	beq.w	801285a <_dtoa_r+0x43a>
 8012694:	ed9d 7b00 	vldr	d7, [sp]
 8012698:	f1ba 0f00 	cmp.w	sl, #0
 801269c:	ed8d 7b10 	vstr	d7, [sp, #64]	; 0x40
 80126a0:	dd74      	ble.n	801278c <_dtoa_r+0x36c>
 80126a2:	4a2a      	ldr	r2, [pc, #168]	; (801274c <_dtoa_r+0x32c>)
 80126a4:	f00a 030f 	and.w	r3, sl, #15
 80126a8:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 80126ac:	ed93 7b00 	vldr	d7, [r3]
 80126b0:	ea4f 162a 	mov.w	r6, sl, asr #4
 80126b4:	06f0      	lsls	r0, r6, #27
 80126b6:	ed8d 7b08 	vstr	d7, [sp, #32]
 80126ba:	d565      	bpl.n	8012788 <_dtoa_r+0x368>
 80126bc:	4b24      	ldr	r3, [pc, #144]	; (8012750 <_dtoa_r+0x330>)
 80126be:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 80126c2:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 80126c6:	f7ee f8e9 	bl	800089c <__aeabi_ddiv>
 80126ca:	e9cd 0100 	strd	r0, r1, [sp]
 80126ce:	f006 060f 	and.w	r6, r6, #15
 80126d2:	2503      	movs	r5, #3
 80126d4:	4f1e      	ldr	r7, [pc, #120]	; (8012750 <_dtoa_r+0x330>)
 80126d6:	e04c      	b.n	8012772 <_dtoa_r+0x352>
 80126d8:	2301      	movs	r3, #1
 80126da:	930a      	str	r3, [sp, #40]	; 0x28
 80126dc:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80126de:	4453      	add	r3, sl
 80126e0:	f103 0901 	add.w	r9, r3, #1
 80126e4:	9302      	str	r3, [sp, #8]
 80126e6:	464b      	mov	r3, r9
 80126e8:	2b01      	cmp	r3, #1
 80126ea:	bfb8      	it	lt
 80126ec:	2301      	movlt	r3, #1
 80126ee:	e7ba      	b.n	8012666 <_dtoa_r+0x246>
 80126f0:	2300      	movs	r3, #0
 80126f2:	e7b2      	b.n	801265a <_dtoa_r+0x23a>
 80126f4:	2300      	movs	r3, #0
 80126f6:	e7f0      	b.n	80126da <_dtoa_r+0x2ba>
 80126f8:	2501      	movs	r5, #1
 80126fa:	2300      	movs	r3, #0
 80126fc:	9306      	str	r3, [sp, #24]
 80126fe:	950a      	str	r5, [sp, #40]	; 0x28
 8012700:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8012704:	9302      	str	r3, [sp, #8]
 8012706:	4699      	mov	r9, r3
 8012708:	2200      	movs	r2, #0
 801270a:	2312      	movs	r3, #18
 801270c:	920b      	str	r2, [sp, #44]	; 0x2c
 801270e:	e7aa      	b.n	8012666 <_dtoa_r+0x246>
 8012710:	2301      	movs	r3, #1
 8012712:	930a      	str	r3, [sp, #40]	; 0x28
 8012714:	e7f4      	b.n	8012700 <_dtoa_r+0x2e0>
 8012716:	2301      	movs	r3, #1
 8012718:	9302      	str	r3, [sp, #8]
 801271a:	4699      	mov	r9, r3
 801271c:	461a      	mov	r2, r3
 801271e:	e7f5      	b.n	801270c <_dtoa_r+0x2ec>
 8012720:	3101      	adds	r1, #1
 8012722:	6071      	str	r1, [r6, #4]
 8012724:	0052      	lsls	r2, r2, #1
 8012726:	e7a2      	b.n	801266e <_dtoa_r+0x24e>
 8012728:	636f4361 	.word	0x636f4361
 801272c:	3fd287a7 	.word	0x3fd287a7
 8012730:	8b60c8b3 	.word	0x8b60c8b3
 8012734:	3fc68a28 	.word	0x3fc68a28
 8012738:	509f79fb 	.word	0x509f79fb
 801273c:	3fd34413 	.word	0x3fd34413
 8012740:	7ff00000 	.word	0x7ff00000
 8012744:	08016c3d 	.word	0x08016c3d
 8012748:	3ff80000 	.word	0x3ff80000
 801274c:	08016a48 	.word	0x08016a48
 8012750:	08016a20 	.word	0x08016a20
 8012754:	080169bb 	.word	0x080169bb
 8012758:	07f1      	lsls	r1, r6, #31
 801275a:	d508      	bpl.n	801276e <_dtoa_r+0x34e>
 801275c:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8012760:	e9d7 2300 	ldrd	r2, r3, [r7]
 8012764:	f7ed ff70 	bl	8000648 <__aeabi_dmul>
 8012768:	e9cd 0108 	strd	r0, r1, [sp, #32]
 801276c:	3501      	adds	r5, #1
 801276e:	1076      	asrs	r6, r6, #1
 8012770:	3708      	adds	r7, #8
 8012772:	2e00      	cmp	r6, #0
 8012774:	d1f0      	bne.n	8012758 <_dtoa_r+0x338>
 8012776:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 801277a:	e9dd 0100 	ldrd	r0, r1, [sp]
 801277e:	f7ee f88d 	bl	800089c <__aeabi_ddiv>
 8012782:	e9cd 0100 	strd	r0, r1, [sp]
 8012786:	e01a      	b.n	80127be <_dtoa_r+0x39e>
 8012788:	2502      	movs	r5, #2
 801278a:	e7a3      	b.n	80126d4 <_dtoa_r+0x2b4>
 801278c:	f000 80a0 	beq.w	80128d0 <_dtoa_r+0x4b0>
 8012790:	f1ca 0600 	rsb	r6, sl, #0
 8012794:	4b9f      	ldr	r3, [pc, #636]	; (8012a14 <_dtoa_r+0x5f4>)
 8012796:	4fa0      	ldr	r7, [pc, #640]	; (8012a18 <_dtoa_r+0x5f8>)
 8012798:	f006 020f 	and.w	r2, r6, #15
 801279c:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80127a0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80127a4:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 80127a8:	f7ed ff4e 	bl	8000648 <__aeabi_dmul>
 80127ac:	e9cd 0100 	strd	r0, r1, [sp]
 80127b0:	1136      	asrs	r6, r6, #4
 80127b2:	2300      	movs	r3, #0
 80127b4:	2502      	movs	r5, #2
 80127b6:	2e00      	cmp	r6, #0
 80127b8:	d17f      	bne.n	80128ba <_dtoa_r+0x49a>
 80127ba:	2b00      	cmp	r3, #0
 80127bc:	d1e1      	bne.n	8012782 <_dtoa_r+0x362>
 80127be:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80127c0:	2b00      	cmp	r3, #0
 80127c2:	f000 8087 	beq.w	80128d4 <_dtoa_r+0x4b4>
 80127c6:	e9dd 6700 	ldrd	r6, r7, [sp]
 80127ca:	2200      	movs	r2, #0
 80127cc:	4b93      	ldr	r3, [pc, #588]	; (8012a1c <_dtoa_r+0x5fc>)
 80127ce:	4630      	mov	r0, r6
 80127d0:	4639      	mov	r1, r7
 80127d2:	f7ee f9ab 	bl	8000b2c <__aeabi_dcmplt>
 80127d6:	2800      	cmp	r0, #0
 80127d8:	d07c      	beq.n	80128d4 <_dtoa_r+0x4b4>
 80127da:	f1b9 0f00 	cmp.w	r9, #0
 80127de:	d079      	beq.n	80128d4 <_dtoa_r+0x4b4>
 80127e0:	9b02      	ldr	r3, [sp, #8]
 80127e2:	2b00      	cmp	r3, #0
 80127e4:	dd35      	ble.n	8012852 <_dtoa_r+0x432>
 80127e6:	f10a 33ff 	add.w	r3, sl, #4294967295	; 0xffffffff
 80127ea:	9308      	str	r3, [sp, #32]
 80127ec:	4639      	mov	r1, r7
 80127ee:	2200      	movs	r2, #0
 80127f0:	4b8b      	ldr	r3, [pc, #556]	; (8012a20 <_dtoa_r+0x600>)
 80127f2:	4630      	mov	r0, r6
 80127f4:	f7ed ff28 	bl	8000648 <__aeabi_dmul>
 80127f8:	e9cd 0100 	strd	r0, r1, [sp]
 80127fc:	9f02      	ldr	r7, [sp, #8]
 80127fe:	3501      	adds	r5, #1
 8012800:	4628      	mov	r0, r5
 8012802:	f7ed feb7 	bl	8000574 <__aeabi_i2d>
 8012806:	e9dd 2300 	ldrd	r2, r3, [sp]
 801280a:	f7ed ff1d 	bl	8000648 <__aeabi_dmul>
 801280e:	2200      	movs	r2, #0
 8012810:	4b84      	ldr	r3, [pc, #528]	; (8012a24 <_dtoa_r+0x604>)
 8012812:	f7ed fd63 	bl	80002dc <__adddf3>
 8012816:	4605      	mov	r5, r0
 8012818:	f1a1 7650 	sub.w	r6, r1, #54525952	; 0x3400000
 801281c:	2f00      	cmp	r7, #0
 801281e:	d15d      	bne.n	80128dc <_dtoa_r+0x4bc>
 8012820:	2200      	movs	r2, #0
 8012822:	4b81      	ldr	r3, [pc, #516]	; (8012a28 <_dtoa_r+0x608>)
 8012824:	e9dd 0100 	ldrd	r0, r1, [sp]
 8012828:	f7ed fd56 	bl	80002d8 <__aeabi_dsub>
 801282c:	462a      	mov	r2, r5
 801282e:	4633      	mov	r3, r6
 8012830:	e9cd 0100 	strd	r0, r1, [sp]
 8012834:	f7ee f998 	bl	8000b68 <__aeabi_dcmpgt>
 8012838:	2800      	cmp	r0, #0
 801283a:	f040 8288 	bne.w	8012d4e <_dtoa_r+0x92e>
 801283e:	462a      	mov	r2, r5
 8012840:	f106 4300 	add.w	r3, r6, #2147483648	; 0x80000000
 8012844:	e9dd 0100 	ldrd	r0, r1, [sp]
 8012848:	f7ee f970 	bl	8000b2c <__aeabi_dcmplt>
 801284c:	2800      	cmp	r0, #0
 801284e:	f040 827c 	bne.w	8012d4a <_dtoa_r+0x92a>
 8012852:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8012856:	e9cd 2300 	strd	r2, r3, [sp]
 801285a:	9b15      	ldr	r3, [sp, #84]	; 0x54
 801285c:	2b00      	cmp	r3, #0
 801285e:	f2c0 8150 	blt.w	8012b02 <_dtoa_r+0x6e2>
 8012862:	f1ba 0f0e 	cmp.w	sl, #14
 8012866:	f300 814c 	bgt.w	8012b02 <_dtoa_r+0x6e2>
 801286a:	4b6a      	ldr	r3, [pc, #424]	; (8012a14 <_dtoa_r+0x5f4>)
 801286c:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 8012870:	ed93 7b00 	vldr	d7, [r3]
 8012874:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8012876:	2b00      	cmp	r3, #0
 8012878:	ed8d 7b02 	vstr	d7, [sp, #8]
 801287c:	f280 80d8 	bge.w	8012a30 <_dtoa_r+0x610>
 8012880:	f1b9 0f00 	cmp.w	r9, #0
 8012884:	f300 80d4 	bgt.w	8012a30 <_dtoa_r+0x610>
 8012888:	f040 825e 	bne.w	8012d48 <_dtoa_r+0x928>
 801288c:	2200      	movs	r2, #0
 801288e:	4b66      	ldr	r3, [pc, #408]	; (8012a28 <_dtoa_r+0x608>)
 8012890:	ec51 0b17 	vmov	r0, r1, d7
 8012894:	f7ed fed8 	bl	8000648 <__aeabi_dmul>
 8012898:	e9dd 2300 	ldrd	r2, r3, [sp]
 801289c:	f7ee f95a 	bl	8000b54 <__aeabi_dcmpge>
 80128a0:	464f      	mov	r7, r9
 80128a2:	464e      	mov	r6, r9
 80128a4:	2800      	cmp	r0, #0
 80128a6:	f040 8234 	bne.w	8012d12 <_dtoa_r+0x8f2>
 80128aa:	2331      	movs	r3, #49	; 0x31
 80128ac:	f10b 0501 	add.w	r5, fp, #1
 80128b0:	f88b 3000 	strb.w	r3, [fp]
 80128b4:	f10a 0a01 	add.w	sl, sl, #1
 80128b8:	e22f      	b.n	8012d1a <_dtoa_r+0x8fa>
 80128ba:	07f2      	lsls	r2, r6, #31
 80128bc:	d505      	bpl.n	80128ca <_dtoa_r+0x4aa>
 80128be:	e9d7 2300 	ldrd	r2, r3, [r7]
 80128c2:	f7ed fec1 	bl	8000648 <__aeabi_dmul>
 80128c6:	3501      	adds	r5, #1
 80128c8:	2301      	movs	r3, #1
 80128ca:	1076      	asrs	r6, r6, #1
 80128cc:	3708      	adds	r7, #8
 80128ce:	e772      	b.n	80127b6 <_dtoa_r+0x396>
 80128d0:	2502      	movs	r5, #2
 80128d2:	e774      	b.n	80127be <_dtoa_r+0x39e>
 80128d4:	f8cd a020 	str.w	sl, [sp, #32]
 80128d8:	464f      	mov	r7, r9
 80128da:	e791      	b.n	8012800 <_dtoa_r+0x3e0>
 80128dc:	4b4d      	ldr	r3, [pc, #308]	; (8012a14 <_dtoa_r+0x5f4>)
 80128de:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 80128e2:	e953 0102 	ldrd	r0, r1, [r3, #-8]
 80128e6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80128e8:	2b00      	cmp	r3, #0
 80128ea:	d047      	beq.n	801297c <_dtoa_r+0x55c>
 80128ec:	4602      	mov	r2, r0
 80128ee:	460b      	mov	r3, r1
 80128f0:	2000      	movs	r0, #0
 80128f2:	494e      	ldr	r1, [pc, #312]	; (8012a2c <_dtoa_r+0x60c>)
 80128f4:	f7ed ffd2 	bl	800089c <__aeabi_ddiv>
 80128f8:	462a      	mov	r2, r5
 80128fa:	4633      	mov	r3, r6
 80128fc:	f7ed fcec 	bl	80002d8 <__aeabi_dsub>
 8012900:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 8012904:	465d      	mov	r5, fp
 8012906:	e9dd 0100 	ldrd	r0, r1, [sp]
 801290a:	f7ee f94d 	bl	8000ba8 <__aeabi_d2iz>
 801290e:	4606      	mov	r6, r0
 8012910:	f7ed fe30 	bl	8000574 <__aeabi_i2d>
 8012914:	4602      	mov	r2, r0
 8012916:	460b      	mov	r3, r1
 8012918:	e9dd 0100 	ldrd	r0, r1, [sp]
 801291c:	f7ed fcdc 	bl	80002d8 <__aeabi_dsub>
 8012920:	3630      	adds	r6, #48	; 0x30
 8012922:	f805 6b01 	strb.w	r6, [r5], #1
 8012926:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 801292a:	e9cd 0100 	strd	r0, r1, [sp]
 801292e:	f7ee f8fd 	bl	8000b2c <__aeabi_dcmplt>
 8012932:	2800      	cmp	r0, #0
 8012934:	d163      	bne.n	80129fe <_dtoa_r+0x5de>
 8012936:	e9dd 2300 	ldrd	r2, r3, [sp]
 801293a:	2000      	movs	r0, #0
 801293c:	4937      	ldr	r1, [pc, #220]	; (8012a1c <_dtoa_r+0x5fc>)
 801293e:	f7ed fccb 	bl	80002d8 <__aeabi_dsub>
 8012942:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 8012946:	f7ee f8f1 	bl	8000b2c <__aeabi_dcmplt>
 801294a:	2800      	cmp	r0, #0
 801294c:	f040 80b7 	bne.w	8012abe <_dtoa_r+0x69e>
 8012950:	eba5 030b 	sub.w	r3, r5, fp
 8012954:	429f      	cmp	r7, r3
 8012956:	f77f af7c 	ble.w	8012852 <_dtoa_r+0x432>
 801295a:	2200      	movs	r2, #0
 801295c:	4b30      	ldr	r3, [pc, #192]	; (8012a20 <_dtoa_r+0x600>)
 801295e:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8012962:	f7ed fe71 	bl	8000648 <__aeabi_dmul>
 8012966:	2200      	movs	r2, #0
 8012968:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 801296c:	4b2c      	ldr	r3, [pc, #176]	; (8012a20 <_dtoa_r+0x600>)
 801296e:	e9dd 0100 	ldrd	r0, r1, [sp]
 8012972:	f7ed fe69 	bl	8000648 <__aeabi_dmul>
 8012976:	e9cd 0100 	strd	r0, r1, [sp]
 801297a:	e7c4      	b.n	8012906 <_dtoa_r+0x4e6>
 801297c:	462a      	mov	r2, r5
 801297e:	4633      	mov	r3, r6
 8012980:	f7ed fe62 	bl	8000648 <__aeabi_dmul>
 8012984:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 8012988:	eb0b 0507 	add.w	r5, fp, r7
 801298c:	465e      	mov	r6, fp
 801298e:	e9dd 0100 	ldrd	r0, r1, [sp]
 8012992:	f7ee f909 	bl	8000ba8 <__aeabi_d2iz>
 8012996:	4607      	mov	r7, r0
 8012998:	f7ed fdec 	bl	8000574 <__aeabi_i2d>
 801299c:	3730      	adds	r7, #48	; 0x30
 801299e:	4602      	mov	r2, r0
 80129a0:	460b      	mov	r3, r1
 80129a2:	e9dd 0100 	ldrd	r0, r1, [sp]
 80129a6:	f7ed fc97 	bl	80002d8 <__aeabi_dsub>
 80129aa:	f806 7b01 	strb.w	r7, [r6], #1
 80129ae:	42ae      	cmp	r6, r5
 80129b0:	e9cd 0100 	strd	r0, r1, [sp]
 80129b4:	f04f 0200 	mov.w	r2, #0
 80129b8:	d126      	bne.n	8012a08 <_dtoa_r+0x5e8>
 80129ba:	4b1c      	ldr	r3, [pc, #112]	; (8012a2c <_dtoa_r+0x60c>)
 80129bc:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 80129c0:	f7ed fc8c 	bl	80002dc <__adddf3>
 80129c4:	4602      	mov	r2, r0
 80129c6:	460b      	mov	r3, r1
 80129c8:	e9dd 0100 	ldrd	r0, r1, [sp]
 80129cc:	f7ee f8cc 	bl	8000b68 <__aeabi_dcmpgt>
 80129d0:	2800      	cmp	r0, #0
 80129d2:	d174      	bne.n	8012abe <_dtoa_r+0x69e>
 80129d4:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 80129d8:	2000      	movs	r0, #0
 80129da:	4914      	ldr	r1, [pc, #80]	; (8012a2c <_dtoa_r+0x60c>)
 80129dc:	f7ed fc7c 	bl	80002d8 <__aeabi_dsub>
 80129e0:	4602      	mov	r2, r0
 80129e2:	460b      	mov	r3, r1
 80129e4:	e9dd 0100 	ldrd	r0, r1, [sp]
 80129e8:	f7ee f8a0 	bl	8000b2c <__aeabi_dcmplt>
 80129ec:	2800      	cmp	r0, #0
 80129ee:	f43f af30 	beq.w	8012852 <_dtoa_r+0x432>
 80129f2:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 80129f6:	2b30      	cmp	r3, #48	; 0x30
 80129f8:	f105 32ff 	add.w	r2, r5, #4294967295	; 0xffffffff
 80129fc:	d002      	beq.n	8012a04 <_dtoa_r+0x5e4>
 80129fe:	f8dd a020 	ldr.w	sl, [sp, #32]
 8012a02:	e04a      	b.n	8012a9a <_dtoa_r+0x67a>
 8012a04:	4615      	mov	r5, r2
 8012a06:	e7f4      	b.n	80129f2 <_dtoa_r+0x5d2>
 8012a08:	4b05      	ldr	r3, [pc, #20]	; (8012a20 <_dtoa_r+0x600>)
 8012a0a:	f7ed fe1d 	bl	8000648 <__aeabi_dmul>
 8012a0e:	e9cd 0100 	strd	r0, r1, [sp]
 8012a12:	e7bc      	b.n	801298e <_dtoa_r+0x56e>
 8012a14:	08016a48 	.word	0x08016a48
 8012a18:	08016a20 	.word	0x08016a20
 8012a1c:	3ff00000 	.word	0x3ff00000
 8012a20:	40240000 	.word	0x40240000
 8012a24:	401c0000 	.word	0x401c0000
 8012a28:	40140000 	.word	0x40140000
 8012a2c:	3fe00000 	.word	0x3fe00000
 8012a30:	e9dd 6700 	ldrd	r6, r7, [sp]
 8012a34:	465d      	mov	r5, fp
 8012a36:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8012a3a:	4630      	mov	r0, r6
 8012a3c:	4639      	mov	r1, r7
 8012a3e:	f7ed ff2d 	bl	800089c <__aeabi_ddiv>
 8012a42:	f7ee f8b1 	bl	8000ba8 <__aeabi_d2iz>
 8012a46:	4680      	mov	r8, r0
 8012a48:	f7ed fd94 	bl	8000574 <__aeabi_i2d>
 8012a4c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8012a50:	f7ed fdfa 	bl	8000648 <__aeabi_dmul>
 8012a54:	4602      	mov	r2, r0
 8012a56:	460b      	mov	r3, r1
 8012a58:	4630      	mov	r0, r6
 8012a5a:	4639      	mov	r1, r7
 8012a5c:	f108 0630 	add.w	r6, r8, #48	; 0x30
 8012a60:	f7ed fc3a 	bl	80002d8 <__aeabi_dsub>
 8012a64:	f805 6b01 	strb.w	r6, [r5], #1
 8012a68:	eba5 060b 	sub.w	r6, r5, fp
 8012a6c:	45b1      	cmp	r9, r6
 8012a6e:	4602      	mov	r2, r0
 8012a70:	460b      	mov	r3, r1
 8012a72:	d139      	bne.n	8012ae8 <_dtoa_r+0x6c8>
 8012a74:	f7ed fc32 	bl	80002dc <__adddf3>
 8012a78:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8012a7c:	4606      	mov	r6, r0
 8012a7e:	460f      	mov	r7, r1
 8012a80:	f7ee f872 	bl	8000b68 <__aeabi_dcmpgt>
 8012a84:	b9c8      	cbnz	r0, 8012aba <_dtoa_r+0x69a>
 8012a86:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8012a8a:	4630      	mov	r0, r6
 8012a8c:	4639      	mov	r1, r7
 8012a8e:	f7ee f843 	bl	8000b18 <__aeabi_dcmpeq>
 8012a92:	b110      	cbz	r0, 8012a9a <_dtoa_r+0x67a>
 8012a94:	f018 0f01 	tst.w	r8, #1
 8012a98:	d10f      	bne.n	8012aba <_dtoa_r+0x69a>
 8012a9a:	9904      	ldr	r1, [sp, #16]
 8012a9c:	4620      	mov	r0, r4
 8012a9e:	f000 fcaa 	bl	80133f6 <_Bfree>
 8012aa2:	2300      	movs	r3, #0
 8012aa4:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8012aa6:	702b      	strb	r3, [r5, #0]
 8012aa8:	f10a 0301 	add.w	r3, sl, #1
 8012aac:	6013      	str	r3, [r2, #0]
 8012aae:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8012ab0:	2b00      	cmp	r3, #0
 8012ab2:	f000 8241 	beq.w	8012f38 <_dtoa_r+0xb18>
 8012ab6:	601d      	str	r5, [r3, #0]
 8012ab8:	e23e      	b.n	8012f38 <_dtoa_r+0xb18>
 8012aba:	f8cd a020 	str.w	sl, [sp, #32]
 8012abe:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 8012ac2:	2a39      	cmp	r2, #57	; 0x39
 8012ac4:	f105 33ff 	add.w	r3, r5, #4294967295	; 0xffffffff
 8012ac8:	d108      	bne.n	8012adc <_dtoa_r+0x6bc>
 8012aca:	459b      	cmp	fp, r3
 8012acc:	d10a      	bne.n	8012ae4 <_dtoa_r+0x6c4>
 8012ace:	9b08      	ldr	r3, [sp, #32]
 8012ad0:	3301      	adds	r3, #1
 8012ad2:	9308      	str	r3, [sp, #32]
 8012ad4:	2330      	movs	r3, #48	; 0x30
 8012ad6:	f88b 3000 	strb.w	r3, [fp]
 8012ada:	465b      	mov	r3, fp
 8012adc:	781a      	ldrb	r2, [r3, #0]
 8012ade:	3201      	adds	r2, #1
 8012ae0:	701a      	strb	r2, [r3, #0]
 8012ae2:	e78c      	b.n	80129fe <_dtoa_r+0x5de>
 8012ae4:	461d      	mov	r5, r3
 8012ae6:	e7ea      	b.n	8012abe <_dtoa_r+0x69e>
 8012ae8:	2200      	movs	r2, #0
 8012aea:	4b9b      	ldr	r3, [pc, #620]	; (8012d58 <_dtoa_r+0x938>)
 8012aec:	f7ed fdac 	bl	8000648 <__aeabi_dmul>
 8012af0:	2200      	movs	r2, #0
 8012af2:	2300      	movs	r3, #0
 8012af4:	4606      	mov	r6, r0
 8012af6:	460f      	mov	r7, r1
 8012af8:	f7ee f80e 	bl	8000b18 <__aeabi_dcmpeq>
 8012afc:	2800      	cmp	r0, #0
 8012afe:	d09a      	beq.n	8012a36 <_dtoa_r+0x616>
 8012b00:	e7cb      	b.n	8012a9a <_dtoa_r+0x67a>
 8012b02:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8012b04:	2a00      	cmp	r2, #0
 8012b06:	f000 808b 	beq.w	8012c20 <_dtoa_r+0x800>
 8012b0a:	9a06      	ldr	r2, [sp, #24]
 8012b0c:	2a01      	cmp	r2, #1
 8012b0e:	dc6e      	bgt.n	8012bee <_dtoa_r+0x7ce>
 8012b10:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8012b12:	2a00      	cmp	r2, #0
 8012b14:	d067      	beq.n	8012be6 <_dtoa_r+0x7c6>
 8012b16:	f203 4333 	addw	r3, r3, #1075	; 0x433
 8012b1a:	9f07      	ldr	r7, [sp, #28]
 8012b1c:	9d05      	ldr	r5, [sp, #20]
 8012b1e:	9a05      	ldr	r2, [sp, #20]
 8012b20:	2101      	movs	r1, #1
 8012b22:	441a      	add	r2, r3
 8012b24:	4620      	mov	r0, r4
 8012b26:	9205      	str	r2, [sp, #20]
 8012b28:	4498      	add	r8, r3
 8012b2a:	f000 fd04 	bl	8013536 <__i2b>
 8012b2e:	4606      	mov	r6, r0
 8012b30:	2d00      	cmp	r5, #0
 8012b32:	dd0c      	ble.n	8012b4e <_dtoa_r+0x72e>
 8012b34:	f1b8 0f00 	cmp.w	r8, #0
 8012b38:	dd09      	ble.n	8012b4e <_dtoa_r+0x72e>
 8012b3a:	4545      	cmp	r5, r8
 8012b3c:	9a05      	ldr	r2, [sp, #20]
 8012b3e:	462b      	mov	r3, r5
 8012b40:	bfa8      	it	ge
 8012b42:	4643      	movge	r3, r8
 8012b44:	1ad2      	subs	r2, r2, r3
 8012b46:	9205      	str	r2, [sp, #20]
 8012b48:	1aed      	subs	r5, r5, r3
 8012b4a:	eba8 0803 	sub.w	r8, r8, r3
 8012b4e:	9b07      	ldr	r3, [sp, #28]
 8012b50:	b1eb      	cbz	r3, 8012b8e <_dtoa_r+0x76e>
 8012b52:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8012b54:	2b00      	cmp	r3, #0
 8012b56:	d067      	beq.n	8012c28 <_dtoa_r+0x808>
 8012b58:	b18f      	cbz	r7, 8012b7e <_dtoa_r+0x75e>
 8012b5a:	4631      	mov	r1, r6
 8012b5c:	463a      	mov	r2, r7
 8012b5e:	4620      	mov	r0, r4
 8012b60:	f000 fd88 	bl	8013674 <__pow5mult>
 8012b64:	9a04      	ldr	r2, [sp, #16]
 8012b66:	4601      	mov	r1, r0
 8012b68:	4606      	mov	r6, r0
 8012b6a:	4620      	mov	r0, r4
 8012b6c:	f000 fcec 	bl	8013548 <__multiply>
 8012b70:	9904      	ldr	r1, [sp, #16]
 8012b72:	9008      	str	r0, [sp, #32]
 8012b74:	4620      	mov	r0, r4
 8012b76:	f000 fc3e 	bl	80133f6 <_Bfree>
 8012b7a:	9b08      	ldr	r3, [sp, #32]
 8012b7c:	9304      	str	r3, [sp, #16]
 8012b7e:	9b07      	ldr	r3, [sp, #28]
 8012b80:	1bda      	subs	r2, r3, r7
 8012b82:	d004      	beq.n	8012b8e <_dtoa_r+0x76e>
 8012b84:	9904      	ldr	r1, [sp, #16]
 8012b86:	4620      	mov	r0, r4
 8012b88:	f000 fd74 	bl	8013674 <__pow5mult>
 8012b8c:	9004      	str	r0, [sp, #16]
 8012b8e:	2101      	movs	r1, #1
 8012b90:	4620      	mov	r0, r4
 8012b92:	f000 fcd0 	bl	8013536 <__i2b>
 8012b96:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8012b98:	4607      	mov	r7, r0
 8012b9a:	2b00      	cmp	r3, #0
 8012b9c:	f000 81d0 	beq.w	8012f40 <_dtoa_r+0xb20>
 8012ba0:	461a      	mov	r2, r3
 8012ba2:	4601      	mov	r1, r0
 8012ba4:	4620      	mov	r0, r4
 8012ba6:	f000 fd65 	bl	8013674 <__pow5mult>
 8012baa:	9b06      	ldr	r3, [sp, #24]
 8012bac:	2b01      	cmp	r3, #1
 8012bae:	4607      	mov	r7, r0
 8012bb0:	dc40      	bgt.n	8012c34 <_dtoa_r+0x814>
 8012bb2:	9b00      	ldr	r3, [sp, #0]
 8012bb4:	2b00      	cmp	r3, #0
 8012bb6:	d139      	bne.n	8012c2c <_dtoa_r+0x80c>
 8012bb8:	9b01      	ldr	r3, [sp, #4]
 8012bba:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8012bbe:	2b00      	cmp	r3, #0
 8012bc0:	d136      	bne.n	8012c30 <_dtoa_r+0x810>
 8012bc2:	9b01      	ldr	r3, [sp, #4]
 8012bc4:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8012bc8:	0d1b      	lsrs	r3, r3, #20
 8012bca:	051b      	lsls	r3, r3, #20
 8012bcc:	b12b      	cbz	r3, 8012bda <_dtoa_r+0x7ba>
 8012bce:	9b05      	ldr	r3, [sp, #20]
 8012bd0:	3301      	adds	r3, #1
 8012bd2:	9305      	str	r3, [sp, #20]
 8012bd4:	f108 0801 	add.w	r8, r8, #1
 8012bd8:	2301      	movs	r3, #1
 8012bda:	9307      	str	r3, [sp, #28]
 8012bdc:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8012bde:	2b00      	cmp	r3, #0
 8012be0:	d12a      	bne.n	8012c38 <_dtoa_r+0x818>
 8012be2:	2001      	movs	r0, #1
 8012be4:	e030      	b.n	8012c48 <_dtoa_r+0x828>
 8012be6:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8012be8:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 8012bec:	e795      	b.n	8012b1a <_dtoa_r+0x6fa>
 8012bee:	9b07      	ldr	r3, [sp, #28]
 8012bf0:	f109 37ff 	add.w	r7, r9, #4294967295	; 0xffffffff
 8012bf4:	42bb      	cmp	r3, r7
 8012bf6:	bfbf      	itttt	lt
 8012bf8:	9b07      	ldrlt	r3, [sp, #28]
 8012bfa:	9707      	strlt	r7, [sp, #28]
 8012bfc:	1afa      	sublt	r2, r7, r3
 8012bfe:	9b0e      	ldrlt	r3, [sp, #56]	; 0x38
 8012c00:	bfbb      	ittet	lt
 8012c02:	189b      	addlt	r3, r3, r2
 8012c04:	930e      	strlt	r3, [sp, #56]	; 0x38
 8012c06:	1bdf      	subge	r7, r3, r7
 8012c08:	2700      	movlt	r7, #0
 8012c0a:	f1b9 0f00 	cmp.w	r9, #0
 8012c0e:	bfb5      	itete	lt
 8012c10:	9b05      	ldrlt	r3, [sp, #20]
 8012c12:	9d05      	ldrge	r5, [sp, #20]
 8012c14:	eba3 0509 	sublt.w	r5, r3, r9
 8012c18:	464b      	movge	r3, r9
 8012c1a:	bfb8      	it	lt
 8012c1c:	2300      	movlt	r3, #0
 8012c1e:	e77e      	b.n	8012b1e <_dtoa_r+0x6fe>
 8012c20:	9f07      	ldr	r7, [sp, #28]
 8012c22:	9d05      	ldr	r5, [sp, #20]
 8012c24:	9e0a      	ldr	r6, [sp, #40]	; 0x28
 8012c26:	e783      	b.n	8012b30 <_dtoa_r+0x710>
 8012c28:	9a07      	ldr	r2, [sp, #28]
 8012c2a:	e7ab      	b.n	8012b84 <_dtoa_r+0x764>
 8012c2c:	2300      	movs	r3, #0
 8012c2e:	e7d4      	b.n	8012bda <_dtoa_r+0x7ba>
 8012c30:	9b00      	ldr	r3, [sp, #0]
 8012c32:	e7d2      	b.n	8012bda <_dtoa_r+0x7ba>
 8012c34:	2300      	movs	r3, #0
 8012c36:	9307      	str	r3, [sp, #28]
 8012c38:	693b      	ldr	r3, [r7, #16]
 8012c3a:	eb07 0383 	add.w	r3, r7, r3, lsl #2
 8012c3e:	6918      	ldr	r0, [r3, #16]
 8012c40:	f000 fc2b 	bl	801349a <__hi0bits>
 8012c44:	f1c0 0020 	rsb	r0, r0, #32
 8012c48:	4440      	add	r0, r8
 8012c4a:	f010 001f 	ands.w	r0, r0, #31
 8012c4e:	d047      	beq.n	8012ce0 <_dtoa_r+0x8c0>
 8012c50:	f1c0 0320 	rsb	r3, r0, #32
 8012c54:	2b04      	cmp	r3, #4
 8012c56:	dd3b      	ble.n	8012cd0 <_dtoa_r+0x8b0>
 8012c58:	9b05      	ldr	r3, [sp, #20]
 8012c5a:	f1c0 001c 	rsb	r0, r0, #28
 8012c5e:	4403      	add	r3, r0
 8012c60:	9305      	str	r3, [sp, #20]
 8012c62:	4405      	add	r5, r0
 8012c64:	4480      	add	r8, r0
 8012c66:	9b05      	ldr	r3, [sp, #20]
 8012c68:	2b00      	cmp	r3, #0
 8012c6a:	dd05      	ble.n	8012c78 <_dtoa_r+0x858>
 8012c6c:	461a      	mov	r2, r3
 8012c6e:	9904      	ldr	r1, [sp, #16]
 8012c70:	4620      	mov	r0, r4
 8012c72:	f000 fd4d 	bl	8013710 <__lshift>
 8012c76:	9004      	str	r0, [sp, #16]
 8012c78:	f1b8 0f00 	cmp.w	r8, #0
 8012c7c:	dd05      	ble.n	8012c8a <_dtoa_r+0x86a>
 8012c7e:	4639      	mov	r1, r7
 8012c80:	4642      	mov	r2, r8
 8012c82:	4620      	mov	r0, r4
 8012c84:	f000 fd44 	bl	8013710 <__lshift>
 8012c88:	4607      	mov	r7, r0
 8012c8a:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8012c8c:	b353      	cbz	r3, 8012ce4 <_dtoa_r+0x8c4>
 8012c8e:	4639      	mov	r1, r7
 8012c90:	9804      	ldr	r0, [sp, #16]
 8012c92:	f000 fd91 	bl	80137b8 <__mcmp>
 8012c96:	2800      	cmp	r0, #0
 8012c98:	da24      	bge.n	8012ce4 <_dtoa_r+0x8c4>
 8012c9a:	2300      	movs	r3, #0
 8012c9c:	220a      	movs	r2, #10
 8012c9e:	9904      	ldr	r1, [sp, #16]
 8012ca0:	4620      	mov	r0, r4
 8012ca2:	f000 fbbf 	bl	8013424 <__multadd>
 8012ca6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8012ca8:	9004      	str	r0, [sp, #16]
 8012caa:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
 8012cae:	2b00      	cmp	r3, #0
 8012cb0:	f000 814d 	beq.w	8012f4e <_dtoa_r+0xb2e>
 8012cb4:	2300      	movs	r3, #0
 8012cb6:	4631      	mov	r1, r6
 8012cb8:	220a      	movs	r2, #10
 8012cba:	4620      	mov	r0, r4
 8012cbc:	f000 fbb2 	bl	8013424 <__multadd>
 8012cc0:	9b02      	ldr	r3, [sp, #8]
 8012cc2:	2b00      	cmp	r3, #0
 8012cc4:	4606      	mov	r6, r0
 8012cc6:	dc4f      	bgt.n	8012d68 <_dtoa_r+0x948>
 8012cc8:	9b06      	ldr	r3, [sp, #24]
 8012cca:	2b02      	cmp	r3, #2
 8012ccc:	dd4c      	ble.n	8012d68 <_dtoa_r+0x948>
 8012cce:	e011      	b.n	8012cf4 <_dtoa_r+0x8d4>
 8012cd0:	d0c9      	beq.n	8012c66 <_dtoa_r+0x846>
 8012cd2:	9a05      	ldr	r2, [sp, #20]
 8012cd4:	331c      	adds	r3, #28
 8012cd6:	441a      	add	r2, r3
 8012cd8:	9205      	str	r2, [sp, #20]
 8012cda:	441d      	add	r5, r3
 8012cdc:	4498      	add	r8, r3
 8012cde:	e7c2      	b.n	8012c66 <_dtoa_r+0x846>
 8012ce0:	4603      	mov	r3, r0
 8012ce2:	e7f6      	b.n	8012cd2 <_dtoa_r+0x8b2>
 8012ce4:	f1b9 0f00 	cmp.w	r9, #0
 8012ce8:	dc38      	bgt.n	8012d5c <_dtoa_r+0x93c>
 8012cea:	9b06      	ldr	r3, [sp, #24]
 8012cec:	2b02      	cmp	r3, #2
 8012cee:	dd35      	ble.n	8012d5c <_dtoa_r+0x93c>
 8012cf0:	f8cd 9008 	str.w	r9, [sp, #8]
 8012cf4:	9b02      	ldr	r3, [sp, #8]
 8012cf6:	b963      	cbnz	r3, 8012d12 <_dtoa_r+0x8f2>
 8012cf8:	4639      	mov	r1, r7
 8012cfa:	2205      	movs	r2, #5
 8012cfc:	4620      	mov	r0, r4
 8012cfe:	f000 fb91 	bl	8013424 <__multadd>
 8012d02:	4601      	mov	r1, r0
 8012d04:	4607      	mov	r7, r0
 8012d06:	9804      	ldr	r0, [sp, #16]
 8012d08:	f000 fd56 	bl	80137b8 <__mcmp>
 8012d0c:	2800      	cmp	r0, #0
 8012d0e:	f73f adcc 	bgt.w	80128aa <_dtoa_r+0x48a>
 8012d12:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8012d14:	465d      	mov	r5, fp
 8012d16:	ea6f 0a03 	mvn.w	sl, r3
 8012d1a:	f04f 0900 	mov.w	r9, #0
 8012d1e:	4639      	mov	r1, r7
 8012d20:	4620      	mov	r0, r4
 8012d22:	f000 fb68 	bl	80133f6 <_Bfree>
 8012d26:	2e00      	cmp	r6, #0
 8012d28:	f43f aeb7 	beq.w	8012a9a <_dtoa_r+0x67a>
 8012d2c:	f1b9 0f00 	cmp.w	r9, #0
 8012d30:	d005      	beq.n	8012d3e <_dtoa_r+0x91e>
 8012d32:	45b1      	cmp	r9, r6
 8012d34:	d003      	beq.n	8012d3e <_dtoa_r+0x91e>
 8012d36:	4649      	mov	r1, r9
 8012d38:	4620      	mov	r0, r4
 8012d3a:	f000 fb5c 	bl	80133f6 <_Bfree>
 8012d3e:	4631      	mov	r1, r6
 8012d40:	4620      	mov	r0, r4
 8012d42:	f000 fb58 	bl	80133f6 <_Bfree>
 8012d46:	e6a8      	b.n	8012a9a <_dtoa_r+0x67a>
 8012d48:	2700      	movs	r7, #0
 8012d4a:	463e      	mov	r6, r7
 8012d4c:	e7e1      	b.n	8012d12 <_dtoa_r+0x8f2>
 8012d4e:	f8dd a020 	ldr.w	sl, [sp, #32]
 8012d52:	463e      	mov	r6, r7
 8012d54:	e5a9      	b.n	80128aa <_dtoa_r+0x48a>
 8012d56:	bf00      	nop
 8012d58:	40240000 	.word	0x40240000
 8012d5c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8012d5e:	f8cd 9008 	str.w	r9, [sp, #8]
 8012d62:	2b00      	cmp	r3, #0
 8012d64:	f000 80fa 	beq.w	8012f5c <_dtoa_r+0xb3c>
 8012d68:	2d00      	cmp	r5, #0
 8012d6a:	dd05      	ble.n	8012d78 <_dtoa_r+0x958>
 8012d6c:	4631      	mov	r1, r6
 8012d6e:	462a      	mov	r2, r5
 8012d70:	4620      	mov	r0, r4
 8012d72:	f000 fccd 	bl	8013710 <__lshift>
 8012d76:	4606      	mov	r6, r0
 8012d78:	9b07      	ldr	r3, [sp, #28]
 8012d7a:	2b00      	cmp	r3, #0
 8012d7c:	d04c      	beq.n	8012e18 <_dtoa_r+0x9f8>
 8012d7e:	6871      	ldr	r1, [r6, #4]
 8012d80:	4620      	mov	r0, r4
 8012d82:	f000 fb04 	bl	801338e <_Balloc>
 8012d86:	6932      	ldr	r2, [r6, #16]
 8012d88:	3202      	adds	r2, #2
 8012d8a:	4605      	mov	r5, r0
 8012d8c:	0092      	lsls	r2, r2, #2
 8012d8e:	f106 010c 	add.w	r1, r6, #12
 8012d92:	300c      	adds	r0, #12
 8012d94:	f000 faf0 	bl	8013378 <memcpy>
 8012d98:	2201      	movs	r2, #1
 8012d9a:	4629      	mov	r1, r5
 8012d9c:	4620      	mov	r0, r4
 8012d9e:	f000 fcb7 	bl	8013710 <__lshift>
 8012da2:	9b00      	ldr	r3, [sp, #0]
 8012da4:	f8cd b014 	str.w	fp, [sp, #20]
 8012da8:	f003 0301 	and.w	r3, r3, #1
 8012dac:	46b1      	mov	r9, r6
 8012dae:	9307      	str	r3, [sp, #28]
 8012db0:	4606      	mov	r6, r0
 8012db2:	4639      	mov	r1, r7
 8012db4:	9804      	ldr	r0, [sp, #16]
 8012db6:	f7ff faa5 	bl	8012304 <quorem>
 8012dba:	4649      	mov	r1, r9
 8012dbc:	4605      	mov	r5, r0
 8012dbe:	f100 0830 	add.w	r8, r0, #48	; 0x30
 8012dc2:	9804      	ldr	r0, [sp, #16]
 8012dc4:	f000 fcf8 	bl	80137b8 <__mcmp>
 8012dc8:	4632      	mov	r2, r6
 8012dca:	9000      	str	r0, [sp, #0]
 8012dcc:	4639      	mov	r1, r7
 8012dce:	4620      	mov	r0, r4
 8012dd0:	f000 fd0c 	bl	80137ec <__mdiff>
 8012dd4:	68c3      	ldr	r3, [r0, #12]
 8012dd6:	4602      	mov	r2, r0
 8012dd8:	bb03      	cbnz	r3, 8012e1c <_dtoa_r+0x9fc>
 8012dda:	4601      	mov	r1, r0
 8012ddc:	9008      	str	r0, [sp, #32]
 8012dde:	9804      	ldr	r0, [sp, #16]
 8012de0:	f000 fcea 	bl	80137b8 <__mcmp>
 8012de4:	9a08      	ldr	r2, [sp, #32]
 8012de6:	4603      	mov	r3, r0
 8012de8:	4611      	mov	r1, r2
 8012dea:	4620      	mov	r0, r4
 8012dec:	9308      	str	r3, [sp, #32]
 8012dee:	f000 fb02 	bl	80133f6 <_Bfree>
 8012df2:	9b08      	ldr	r3, [sp, #32]
 8012df4:	b9a3      	cbnz	r3, 8012e20 <_dtoa_r+0xa00>
 8012df6:	9a06      	ldr	r2, [sp, #24]
 8012df8:	b992      	cbnz	r2, 8012e20 <_dtoa_r+0xa00>
 8012dfa:	9a07      	ldr	r2, [sp, #28]
 8012dfc:	b982      	cbnz	r2, 8012e20 <_dtoa_r+0xa00>
 8012dfe:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 8012e02:	d029      	beq.n	8012e58 <_dtoa_r+0xa38>
 8012e04:	9b00      	ldr	r3, [sp, #0]
 8012e06:	2b00      	cmp	r3, #0
 8012e08:	dd01      	ble.n	8012e0e <_dtoa_r+0x9ee>
 8012e0a:	f105 0831 	add.w	r8, r5, #49	; 0x31
 8012e0e:	9b05      	ldr	r3, [sp, #20]
 8012e10:	1c5d      	adds	r5, r3, #1
 8012e12:	f883 8000 	strb.w	r8, [r3]
 8012e16:	e782      	b.n	8012d1e <_dtoa_r+0x8fe>
 8012e18:	4630      	mov	r0, r6
 8012e1a:	e7c2      	b.n	8012da2 <_dtoa_r+0x982>
 8012e1c:	2301      	movs	r3, #1
 8012e1e:	e7e3      	b.n	8012de8 <_dtoa_r+0x9c8>
 8012e20:	9a00      	ldr	r2, [sp, #0]
 8012e22:	2a00      	cmp	r2, #0
 8012e24:	db04      	blt.n	8012e30 <_dtoa_r+0xa10>
 8012e26:	d125      	bne.n	8012e74 <_dtoa_r+0xa54>
 8012e28:	9a06      	ldr	r2, [sp, #24]
 8012e2a:	bb1a      	cbnz	r2, 8012e74 <_dtoa_r+0xa54>
 8012e2c:	9a07      	ldr	r2, [sp, #28]
 8012e2e:	bb0a      	cbnz	r2, 8012e74 <_dtoa_r+0xa54>
 8012e30:	2b00      	cmp	r3, #0
 8012e32:	ddec      	ble.n	8012e0e <_dtoa_r+0x9ee>
 8012e34:	2201      	movs	r2, #1
 8012e36:	9904      	ldr	r1, [sp, #16]
 8012e38:	4620      	mov	r0, r4
 8012e3a:	f000 fc69 	bl	8013710 <__lshift>
 8012e3e:	4639      	mov	r1, r7
 8012e40:	9004      	str	r0, [sp, #16]
 8012e42:	f000 fcb9 	bl	80137b8 <__mcmp>
 8012e46:	2800      	cmp	r0, #0
 8012e48:	dc03      	bgt.n	8012e52 <_dtoa_r+0xa32>
 8012e4a:	d1e0      	bne.n	8012e0e <_dtoa_r+0x9ee>
 8012e4c:	f018 0f01 	tst.w	r8, #1
 8012e50:	d0dd      	beq.n	8012e0e <_dtoa_r+0x9ee>
 8012e52:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 8012e56:	d1d8      	bne.n	8012e0a <_dtoa_r+0x9ea>
 8012e58:	9b05      	ldr	r3, [sp, #20]
 8012e5a:	9a05      	ldr	r2, [sp, #20]
 8012e5c:	1c5d      	adds	r5, r3, #1
 8012e5e:	2339      	movs	r3, #57	; 0x39
 8012e60:	7013      	strb	r3, [r2, #0]
 8012e62:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8012e66:	2b39      	cmp	r3, #57	; 0x39
 8012e68:	f105 32ff 	add.w	r2, r5, #4294967295	; 0xffffffff
 8012e6c:	d04f      	beq.n	8012f0e <_dtoa_r+0xaee>
 8012e6e:	3301      	adds	r3, #1
 8012e70:	7013      	strb	r3, [r2, #0]
 8012e72:	e754      	b.n	8012d1e <_dtoa_r+0x8fe>
 8012e74:	9a05      	ldr	r2, [sp, #20]
 8012e76:	2b00      	cmp	r3, #0
 8012e78:	f102 0501 	add.w	r5, r2, #1
 8012e7c:	dd06      	ble.n	8012e8c <_dtoa_r+0xa6c>
 8012e7e:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 8012e82:	d0e9      	beq.n	8012e58 <_dtoa_r+0xa38>
 8012e84:	f108 0801 	add.w	r8, r8, #1
 8012e88:	9b05      	ldr	r3, [sp, #20]
 8012e8a:	e7c2      	b.n	8012e12 <_dtoa_r+0x9f2>
 8012e8c:	9a02      	ldr	r2, [sp, #8]
 8012e8e:	f805 8c01 	strb.w	r8, [r5, #-1]
 8012e92:	eba5 030b 	sub.w	r3, r5, fp
 8012e96:	4293      	cmp	r3, r2
 8012e98:	d021      	beq.n	8012ede <_dtoa_r+0xabe>
 8012e9a:	2300      	movs	r3, #0
 8012e9c:	220a      	movs	r2, #10
 8012e9e:	9904      	ldr	r1, [sp, #16]
 8012ea0:	4620      	mov	r0, r4
 8012ea2:	f000 fabf 	bl	8013424 <__multadd>
 8012ea6:	45b1      	cmp	r9, r6
 8012ea8:	9004      	str	r0, [sp, #16]
 8012eaa:	f04f 0300 	mov.w	r3, #0
 8012eae:	f04f 020a 	mov.w	r2, #10
 8012eb2:	4649      	mov	r1, r9
 8012eb4:	4620      	mov	r0, r4
 8012eb6:	d105      	bne.n	8012ec4 <_dtoa_r+0xaa4>
 8012eb8:	f000 fab4 	bl	8013424 <__multadd>
 8012ebc:	4681      	mov	r9, r0
 8012ebe:	4606      	mov	r6, r0
 8012ec0:	9505      	str	r5, [sp, #20]
 8012ec2:	e776      	b.n	8012db2 <_dtoa_r+0x992>
 8012ec4:	f000 faae 	bl	8013424 <__multadd>
 8012ec8:	4631      	mov	r1, r6
 8012eca:	4681      	mov	r9, r0
 8012ecc:	2300      	movs	r3, #0
 8012ece:	220a      	movs	r2, #10
 8012ed0:	4620      	mov	r0, r4
 8012ed2:	f000 faa7 	bl	8013424 <__multadd>
 8012ed6:	4606      	mov	r6, r0
 8012ed8:	e7f2      	b.n	8012ec0 <_dtoa_r+0xaa0>
 8012eda:	f04f 0900 	mov.w	r9, #0
 8012ede:	2201      	movs	r2, #1
 8012ee0:	9904      	ldr	r1, [sp, #16]
 8012ee2:	4620      	mov	r0, r4
 8012ee4:	f000 fc14 	bl	8013710 <__lshift>
 8012ee8:	4639      	mov	r1, r7
 8012eea:	9004      	str	r0, [sp, #16]
 8012eec:	f000 fc64 	bl	80137b8 <__mcmp>
 8012ef0:	2800      	cmp	r0, #0
 8012ef2:	dcb6      	bgt.n	8012e62 <_dtoa_r+0xa42>
 8012ef4:	d102      	bne.n	8012efc <_dtoa_r+0xadc>
 8012ef6:	f018 0f01 	tst.w	r8, #1
 8012efa:	d1b2      	bne.n	8012e62 <_dtoa_r+0xa42>
 8012efc:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8012f00:	2b30      	cmp	r3, #48	; 0x30
 8012f02:	f105 32ff 	add.w	r2, r5, #4294967295	; 0xffffffff
 8012f06:	f47f af0a 	bne.w	8012d1e <_dtoa_r+0x8fe>
 8012f0a:	4615      	mov	r5, r2
 8012f0c:	e7f6      	b.n	8012efc <_dtoa_r+0xadc>
 8012f0e:	4593      	cmp	fp, r2
 8012f10:	d105      	bne.n	8012f1e <_dtoa_r+0xafe>
 8012f12:	2331      	movs	r3, #49	; 0x31
 8012f14:	f10a 0a01 	add.w	sl, sl, #1
 8012f18:	f88b 3000 	strb.w	r3, [fp]
 8012f1c:	e6ff      	b.n	8012d1e <_dtoa_r+0x8fe>
 8012f1e:	4615      	mov	r5, r2
 8012f20:	e79f      	b.n	8012e62 <_dtoa_r+0xa42>
 8012f22:	f8df b064 	ldr.w	fp, [pc, #100]	; 8012f88 <_dtoa_r+0xb68>
 8012f26:	e007      	b.n	8012f38 <_dtoa_r+0xb18>
 8012f28:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8012f2a:	f8df b060 	ldr.w	fp, [pc, #96]	; 8012f8c <_dtoa_r+0xb6c>
 8012f2e:	b11b      	cbz	r3, 8012f38 <_dtoa_r+0xb18>
 8012f30:	f10b 0308 	add.w	r3, fp, #8
 8012f34:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8012f36:	6013      	str	r3, [r2, #0]
 8012f38:	4658      	mov	r0, fp
 8012f3a:	b017      	add	sp, #92	; 0x5c
 8012f3c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8012f40:	9b06      	ldr	r3, [sp, #24]
 8012f42:	2b01      	cmp	r3, #1
 8012f44:	f77f ae35 	ble.w	8012bb2 <_dtoa_r+0x792>
 8012f48:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8012f4a:	9307      	str	r3, [sp, #28]
 8012f4c:	e649      	b.n	8012be2 <_dtoa_r+0x7c2>
 8012f4e:	9b02      	ldr	r3, [sp, #8]
 8012f50:	2b00      	cmp	r3, #0
 8012f52:	dc03      	bgt.n	8012f5c <_dtoa_r+0xb3c>
 8012f54:	9b06      	ldr	r3, [sp, #24]
 8012f56:	2b02      	cmp	r3, #2
 8012f58:	f73f aecc 	bgt.w	8012cf4 <_dtoa_r+0x8d4>
 8012f5c:	465d      	mov	r5, fp
 8012f5e:	4639      	mov	r1, r7
 8012f60:	9804      	ldr	r0, [sp, #16]
 8012f62:	f7ff f9cf 	bl	8012304 <quorem>
 8012f66:	f100 0830 	add.w	r8, r0, #48	; 0x30
 8012f6a:	f805 8b01 	strb.w	r8, [r5], #1
 8012f6e:	9a02      	ldr	r2, [sp, #8]
 8012f70:	eba5 030b 	sub.w	r3, r5, fp
 8012f74:	429a      	cmp	r2, r3
 8012f76:	ddb0      	ble.n	8012eda <_dtoa_r+0xaba>
 8012f78:	2300      	movs	r3, #0
 8012f7a:	220a      	movs	r2, #10
 8012f7c:	9904      	ldr	r1, [sp, #16]
 8012f7e:	4620      	mov	r0, r4
 8012f80:	f000 fa50 	bl	8013424 <__multadd>
 8012f84:	9004      	str	r0, [sp, #16]
 8012f86:	e7ea      	b.n	8012f5e <_dtoa_r+0xb3e>
 8012f88:	08016c3c 	.word	0x08016c3c
 8012f8c:	080169b2 	.word	0x080169b2

08012f90 <__sflush_r>:
 8012f90:	898a      	ldrh	r2, [r1, #12]
 8012f92:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8012f96:	4605      	mov	r5, r0
 8012f98:	0710      	lsls	r0, r2, #28
 8012f9a:	460c      	mov	r4, r1
 8012f9c:	d458      	bmi.n	8013050 <__sflush_r+0xc0>
 8012f9e:	684b      	ldr	r3, [r1, #4]
 8012fa0:	2b00      	cmp	r3, #0
 8012fa2:	dc05      	bgt.n	8012fb0 <__sflush_r+0x20>
 8012fa4:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8012fa6:	2b00      	cmp	r3, #0
 8012fa8:	dc02      	bgt.n	8012fb0 <__sflush_r+0x20>
 8012faa:	2000      	movs	r0, #0
 8012fac:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8012fb0:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8012fb2:	2e00      	cmp	r6, #0
 8012fb4:	d0f9      	beq.n	8012faa <__sflush_r+0x1a>
 8012fb6:	2300      	movs	r3, #0
 8012fb8:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8012fbc:	682f      	ldr	r7, [r5, #0]
 8012fbe:	6a21      	ldr	r1, [r4, #32]
 8012fc0:	602b      	str	r3, [r5, #0]
 8012fc2:	d032      	beq.n	801302a <__sflush_r+0x9a>
 8012fc4:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8012fc6:	89a3      	ldrh	r3, [r4, #12]
 8012fc8:	075a      	lsls	r2, r3, #29
 8012fca:	d505      	bpl.n	8012fd8 <__sflush_r+0x48>
 8012fcc:	6863      	ldr	r3, [r4, #4]
 8012fce:	1ac0      	subs	r0, r0, r3
 8012fd0:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8012fd2:	b10b      	cbz	r3, 8012fd8 <__sflush_r+0x48>
 8012fd4:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8012fd6:	1ac0      	subs	r0, r0, r3
 8012fd8:	2300      	movs	r3, #0
 8012fda:	4602      	mov	r2, r0
 8012fdc:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8012fde:	6a21      	ldr	r1, [r4, #32]
 8012fe0:	4628      	mov	r0, r5
 8012fe2:	47b0      	blx	r6
 8012fe4:	1c43      	adds	r3, r0, #1
 8012fe6:	89a3      	ldrh	r3, [r4, #12]
 8012fe8:	d106      	bne.n	8012ff8 <__sflush_r+0x68>
 8012fea:	6829      	ldr	r1, [r5, #0]
 8012fec:	291d      	cmp	r1, #29
 8012fee:	d848      	bhi.n	8013082 <__sflush_r+0xf2>
 8012ff0:	4a29      	ldr	r2, [pc, #164]	; (8013098 <__sflush_r+0x108>)
 8012ff2:	40ca      	lsrs	r2, r1
 8012ff4:	07d6      	lsls	r6, r2, #31
 8012ff6:	d544      	bpl.n	8013082 <__sflush_r+0xf2>
 8012ff8:	2200      	movs	r2, #0
 8012ffa:	6062      	str	r2, [r4, #4]
 8012ffc:	04d9      	lsls	r1, r3, #19
 8012ffe:	6922      	ldr	r2, [r4, #16]
 8013000:	6022      	str	r2, [r4, #0]
 8013002:	d504      	bpl.n	801300e <__sflush_r+0x7e>
 8013004:	1c42      	adds	r2, r0, #1
 8013006:	d101      	bne.n	801300c <__sflush_r+0x7c>
 8013008:	682b      	ldr	r3, [r5, #0]
 801300a:	b903      	cbnz	r3, 801300e <__sflush_r+0x7e>
 801300c:	6560      	str	r0, [r4, #84]	; 0x54
 801300e:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8013010:	602f      	str	r7, [r5, #0]
 8013012:	2900      	cmp	r1, #0
 8013014:	d0c9      	beq.n	8012faa <__sflush_r+0x1a>
 8013016:	f104 0344 	add.w	r3, r4, #68	; 0x44
 801301a:	4299      	cmp	r1, r3
 801301c:	d002      	beq.n	8013024 <__sflush_r+0x94>
 801301e:	4628      	mov	r0, r5
 8013020:	f000 fc9e 	bl	8013960 <_free_r>
 8013024:	2000      	movs	r0, #0
 8013026:	6360      	str	r0, [r4, #52]	; 0x34
 8013028:	e7c0      	b.n	8012fac <__sflush_r+0x1c>
 801302a:	2301      	movs	r3, #1
 801302c:	4628      	mov	r0, r5
 801302e:	47b0      	blx	r6
 8013030:	1c41      	adds	r1, r0, #1
 8013032:	d1c8      	bne.n	8012fc6 <__sflush_r+0x36>
 8013034:	682b      	ldr	r3, [r5, #0]
 8013036:	2b00      	cmp	r3, #0
 8013038:	d0c5      	beq.n	8012fc6 <__sflush_r+0x36>
 801303a:	2b1d      	cmp	r3, #29
 801303c:	d001      	beq.n	8013042 <__sflush_r+0xb2>
 801303e:	2b16      	cmp	r3, #22
 8013040:	d101      	bne.n	8013046 <__sflush_r+0xb6>
 8013042:	602f      	str	r7, [r5, #0]
 8013044:	e7b1      	b.n	8012faa <__sflush_r+0x1a>
 8013046:	89a3      	ldrh	r3, [r4, #12]
 8013048:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801304c:	81a3      	strh	r3, [r4, #12]
 801304e:	e7ad      	b.n	8012fac <__sflush_r+0x1c>
 8013050:	690f      	ldr	r7, [r1, #16]
 8013052:	2f00      	cmp	r7, #0
 8013054:	d0a9      	beq.n	8012faa <__sflush_r+0x1a>
 8013056:	0793      	lsls	r3, r2, #30
 8013058:	680e      	ldr	r6, [r1, #0]
 801305a:	bf08      	it	eq
 801305c:	694b      	ldreq	r3, [r1, #20]
 801305e:	600f      	str	r7, [r1, #0]
 8013060:	bf18      	it	ne
 8013062:	2300      	movne	r3, #0
 8013064:	eba6 0807 	sub.w	r8, r6, r7
 8013068:	608b      	str	r3, [r1, #8]
 801306a:	f1b8 0f00 	cmp.w	r8, #0
 801306e:	dd9c      	ble.n	8012faa <__sflush_r+0x1a>
 8013070:	4643      	mov	r3, r8
 8013072:	463a      	mov	r2, r7
 8013074:	6a21      	ldr	r1, [r4, #32]
 8013076:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8013078:	4628      	mov	r0, r5
 801307a:	47b0      	blx	r6
 801307c:	2800      	cmp	r0, #0
 801307e:	dc06      	bgt.n	801308e <__sflush_r+0xfe>
 8013080:	89a3      	ldrh	r3, [r4, #12]
 8013082:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8013086:	81a3      	strh	r3, [r4, #12]
 8013088:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 801308c:	e78e      	b.n	8012fac <__sflush_r+0x1c>
 801308e:	4407      	add	r7, r0
 8013090:	eba8 0800 	sub.w	r8, r8, r0
 8013094:	e7e9      	b.n	801306a <__sflush_r+0xda>
 8013096:	bf00      	nop
 8013098:	20400001 	.word	0x20400001

0801309c <_fflush_r>:
 801309c:	b538      	push	{r3, r4, r5, lr}
 801309e:	690b      	ldr	r3, [r1, #16]
 80130a0:	4605      	mov	r5, r0
 80130a2:	460c      	mov	r4, r1
 80130a4:	b1db      	cbz	r3, 80130de <_fflush_r+0x42>
 80130a6:	b118      	cbz	r0, 80130b0 <_fflush_r+0x14>
 80130a8:	6983      	ldr	r3, [r0, #24]
 80130aa:	b90b      	cbnz	r3, 80130b0 <_fflush_r+0x14>
 80130ac:	f000 f860 	bl	8013170 <__sinit>
 80130b0:	4b0c      	ldr	r3, [pc, #48]	; (80130e4 <_fflush_r+0x48>)
 80130b2:	429c      	cmp	r4, r3
 80130b4:	d109      	bne.n	80130ca <_fflush_r+0x2e>
 80130b6:	686c      	ldr	r4, [r5, #4]
 80130b8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80130bc:	b17b      	cbz	r3, 80130de <_fflush_r+0x42>
 80130be:	4621      	mov	r1, r4
 80130c0:	4628      	mov	r0, r5
 80130c2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80130c6:	f7ff bf63 	b.w	8012f90 <__sflush_r>
 80130ca:	4b07      	ldr	r3, [pc, #28]	; (80130e8 <_fflush_r+0x4c>)
 80130cc:	429c      	cmp	r4, r3
 80130ce:	d101      	bne.n	80130d4 <_fflush_r+0x38>
 80130d0:	68ac      	ldr	r4, [r5, #8]
 80130d2:	e7f1      	b.n	80130b8 <_fflush_r+0x1c>
 80130d4:	4b05      	ldr	r3, [pc, #20]	; (80130ec <_fflush_r+0x50>)
 80130d6:	429c      	cmp	r4, r3
 80130d8:	bf08      	it	eq
 80130da:	68ec      	ldreq	r4, [r5, #12]
 80130dc:	e7ec      	b.n	80130b8 <_fflush_r+0x1c>
 80130de:	2000      	movs	r0, #0
 80130e0:	bd38      	pop	{r3, r4, r5, pc}
 80130e2:	bf00      	nop
 80130e4:	080169e0 	.word	0x080169e0
 80130e8:	08016a00 	.word	0x08016a00
 80130ec:	080169c0 	.word	0x080169c0

080130f0 <std>:
 80130f0:	2300      	movs	r3, #0
 80130f2:	b510      	push	{r4, lr}
 80130f4:	4604      	mov	r4, r0
 80130f6:	e9c0 3300 	strd	r3, r3, [r0]
 80130fa:	6083      	str	r3, [r0, #8]
 80130fc:	8181      	strh	r1, [r0, #12]
 80130fe:	6643      	str	r3, [r0, #100]	; 0x64
 8013100:	81c2      	strh	r2, [r0, #14]
 8013102:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8013106:	6183      	str	r3, [r0, #24]
 8013108:	4619      	mov	r1, r3
 801310a:	2208      	movs	r2, #8
 801310c:	305c      	adds	r0, #92	; 0x5c
 801310e:	f7fe fb15 	bl	801173c <memset>
 8013112:	4b05      	ldr	r3, [pc, #20]	; (8013128 <std+0x38>)
 8013114:	6263      	str	r3, [r4, #36]	; 0x24
 8013116:	4b05      	ldr	r3, [pc, #20]	; (801312c <std+0x3c>)
 8013118:	62a3      	str	r3, [r4, #40]	; 0x28
 801311a:	4b05      	ldr	r3, [pc, #20]	; (8013130 <std+0x40>)
 801311c:	62e3      	str	r3, [r4, #44]	; 0x2c
 801311e:	4b05      	ldr	r3, [pc, #20]	; (8013134 <std+0x44>)
 8013120:	6224      	str	r4, [r4, #32]
 8013122:	6323      	str	r3, [r4, #48]	; 0x30
 8013124:	bd10      	pop	{r4, pc}
 8013126:	bf00      	nop
 8013128:	08013ff5 	.word	0x08013ff5
 801312c:	08014017 	.word	0x08014017
 8013130:	0801404f 	.word	0x0801404f
 8013134:	08014073 	.word	0x08014073

08013138 <_cleanup_r>:
 8013138:	4901      	ldr	r1, [pc, #4]	; (8013140 <_cleanup_r+0x8>)
 801313a:	f000 b885 	b.w	8013248 <_fwalk_reent>
 801313e:	bf00      	nop
 8013140:	0801309d 	.word	0x0801309d

08013144 <__sfmoreglue>:
 8013144:	b570      	push	{r4, r5, r6, lr}
 8013146:	1e4a      	subs	r2, r1, #1
 8013148:	2568      	movs	r5, #104	; 0x68
 801314a:	4355      	muls	r5, r2
 801314c:	460e      	mov	r6, r1
 801314e:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8013152:	f000 fc53 	bl	80139fc <_malloc_r>
 8013156:	4604      	mov	r4, r0
 8013158:	b140      	cbz	r0, 801316c <__sfmoreglue+0x28>
 801315a:	2100      	movs	r1, #0
 801315c:	e9c0 1600 	strd	r1, r6, [r0]
 8013160:	300c      	adds	r0, #12
 8013162:	60a0      	str	r0, [r4, #8]
 8013164:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8013168:	f7fe fae8 	bl	801173c <memset>
 801316c:	4620      	mov	r0, r4
 801316e:	bd70      	pop	{r4, r5, r6, pc}

08013170 <__sinit>:
 8013170:	6983      	ldr	r3, [r0, #24]
 8013172:	b510      	push	{r4, lr}
 8013174:	4604      	mov	r4, r0
 8013176:	bb33      	cbnz	r3, 80131c6 <__sinit+0x56>
 8013178:	e9c0 3312 	strd	r3, r3, [r0, #72]	; 0x48
 801317c:	6503      	str	r3, [r0, #80]	; 0x50
 801317e:	4b12      	ldr	r3, [pc, #72]	; (80131c8 <__sinit+0x58>)
 8013180:	4a12      	ldr	r2, [pc, #72]	; (80131cc <__sinit+0x5c>)
 8013182:	681b      	ldr	r3, [r3, #0]
 8013184:	6282      	str	r2, [r0, #40]	; 0x28
 8013186:	4298      	cmp	r0, r3
 8013188:	bf04      	itt	eq
 801318a:	2301      	moveq	r3, #1
 801318c:	6183      	streq	r3, [r0, #24]
 801318e:	f000 f81f 	bl	80131d0 <__sfp>
 8013192:	6060      	str	r0, [r4, #4]
 8013194:	4620      	mov	r0, r4
 8013196:	f000 f81b 	bl	80131d0 <__sfp>
 801319a:	60a0      	str	r0, [r4, #8]
 801319c:	4620      	mov	r0, r4
 801319e:	f000 f817 	bl	80131d0 <__sfp>
 80131a2:	2200      	movs	r2, #0
 80131a4:	60e0      	str	r0, [r4, #12]
 80131a6:	2104      	movs	r1, #4
 80131a8:	6860      	ldr	r0, [r4, #4]
 80131aa:	f7ff ffa1 	bl	80130f0 <std>
 80131ae:	2201      	movs	r2, #1
 80131b0:	2109      	movs	r1, #9
 80131b2:	68a0      	ldr	r0, [r4, #8]
 80131b4:	f7ff ff9c 	bl	80130f0 <std>
 80131b8:	2202      	movs	r2, #2
 80131ba:	2112      	movs	r1, #18
 80131bc:	68e0      	ldr	r0, [r4, #12]
 80131be:	f7ff ff97 	bl	80130f0 <std>
 80131c2:	2301      	movs	r3, #1
 80131c4:	61a3      	str	r3, [r4, #24]
 80131c6:	bd10      	pop	{r4, pc}
 80131c8:	0801697c 	.word	0x0801697c
 80131cc:	08013139 	.word	0x08013139

080131d0 <__sfp>:
 80131d0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80131d2:	4b1b      	ldr	r3, [pc, #108]	; (8013240 <__sfp+0x70>)
 80131d4:	681e      	ldr	r6, [r3, #0]
 80131d6:	69b3      	ldr	r3, [r6, #24]
 80131d8:	4607      	mov	r7, r0
 80131da:	b913      	cbnz	r3, 80131e2 <__sfp+0x12>
 80131dc:	4630      	mov	r0, r6
 80131de:	f7ff ffc7 	bl	8013170 <__sinit>
 80131e2:	3648      	adds	r6, #72	; 0x48
 80131e4:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 80131e8:	3b01      	subs	r3, #1
 80131ea:	d503      	bpl.n	80131f4 <__sfp+0x24>
 80131ec:	6833      	ldr	r3, [r6, #0]
 80131ee:	b133      	cbz	r3, 80131fe <__sfp+0x2e>
 80131f0:	6836      	ldr	r6, [r6, #0]
 80131f2:	e7f7      	b.n	80131e4 <__sfp+0x14>
 80131f4:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 80131f8:	b16d      	cbz	r5, 8013216 <__sfp+0x46>
 80131fa:	3468      	adds	r4, #104	; 0x68
 80131fc:	e7f4      	b.n	80131e8 <__sfp+0x18>
 80131fe:	2104      	movs	r1, #4
 8013200:	4638      	mov	r0, r7
 8013202:	f7ff ff9f 	bl	8013144 <__sfmoreglue>
 8013206:	6030      	str	r0, [r6, #0]
 8013208:	2800      	cmp	r0, #0
 801320a:	d1f1      	bne.n	80131f0 <__sfp+0x20>
 801320c:	230c      	movs	r3, #12
 801320e:	603b      	str	r3, [r7, #0]
 8013210:	4604      	mov	r4, r0
 8013212:	4620      	mov	r0, r4
 8013214:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8013216:	4b0b      	ldr	r3, [pc, #44]	; (8013244 <__sfp+0x74>)
 8013218:	6665      	str	r5, [r4, #100]	; 0x64
 801321a:	e9c4 5500 	strd	r5, r5, [r4]
 801321e:	60a5      	str	r5, [r4, #8]
 8013220:	e9c4 3503 	strd	r3, r5, [r4, #12]
 8013224:	e9c4 5505 	strd	r5, r5, [r4, #20]
 8013228:	2208      	movs	r2, #8
 801322a:	4629      	mov	r1, r5
 801322c:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8013230:	f7fe fa84 	bl	801173c <memset>
 8013234:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8013238:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 801323c:	e7e9      	b.n	8013212 <__sfp+0x42>
 801323e:	bf00      	nop
 8013240:	0801697c 	.word	0x0801697c
 8013244:	ffff0001 	.word	0xffff0001

08013248 <_fwalk_reent>:
 8013248:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801324c:	4680      	mov	r8, r0
 801324e:	4689      	mov	r9, r1
 8013250:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8013254:	2600      	movs	r6, #0
 8013256:	b914      	cbnz	r4, 801325e <_fwalk_reent+0x16>
 8013258:	4630      	mov	r0, r6
 801325a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801325e:	e9d4 7501 	ldrd	r7, r5, [r4, #4]
 8013262:	3f01      	subs	r7, #1
 8013264:	d501      	bpl.n	801326a <_fwalk_reent+0x22>
 8013266:	6824      	ldr	r4, [r4, #0]
 8013268:	e7f5      	b.n	8013256 <_fwalk_reent+0xe>
 801326a:	89ab      	ldrh	r3, [r5, #12]
 801326c:	2b01      	cmp	r3, #1
 801326e:	d907      	bls.n	8013280 <_fwalk_reent+0x38>
 8013270:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8013274:	3301      	adds	r3, #1
 8013276:	d003      	beq.n	8013280 <_fwalk_reent+0x38>
 8013278:	4629      	mov	r1, r5
 801327a:	4640      	mov	r0, r8
 801327c:	47c8      	blx	r9
 801327e:	4306      	orrs	r6, r0
 8013280:	3568      	adds	r5, #104	; 0x68
 8013282:	e7ee      	b.n	8013262 <_fwalk_reent+0x1a>

08013284 <_localeconv_r>:
 8013284:	4b04      	ldr	r3, [pc, #16]	; (8013298 <_localeconv_r+0x14>)
 8013286:	681b      	ldr	r3, [r3, #0]
 8013288:	6a18      	ldr	r0, [r3, #32]
 801328a:	4b04      	ldr	r3, [pc, #16]	; (801329c <_localeconv_r+0x18>)
 801328c:	2800      	cmp	r0, #0
 801328e:	bf08      	it	eq
 8013290:	4618      	moveq	r0, r3
 8013292:	30f0      	adds	r0, #240	; 0xf0
 8013294:	4770      	bx	lr
 8013296:	bf00      	nop
 8013298:	20001eb4 	.word	0x20001eb4
 801329c:	20001f18 	.word	0x20001f18

080132a0 <__swhatbuf_r>:
 80132a0:	b570      	push	{r4, r5, r6, lr}
 80132a2:	460e      	mov	r6, r1
 80132a4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80132a8:	2900      	cmp	r1, #0
 80132aa:	b096      	sub	sp, #88	; 0x58
 80132ac:	4614      	mov	r4, r2
 80132ae:	461d      	mov	r5, r3
 80132b0:	da07      	bge.n	80132c2 <__swhatbuf_r+0x22>
 80132b2:	2300      	movs	r3, #0
 80132b4:	602b      	str	r3, [r5, #0]
 80132b6:	89b3      	ldrh	r3, [r6, #12]
 80132b8:	061a      	lsls	r2, r3, #24
 80132ba:	d410      	bmi.n	80132de <__swhatbuf_r+0x3e>
 80132bc:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80132c0:	e00e      	b.n	80132e0 <__swhatbuf_r+0x40>
 80132c2:	466a      	mov	r2, sp
 80132c4:	f000 fefc 	bl	80140c0 <_fstat_r>
 80132c8:	2800      	cmp	r0, #0
 80132ca:	dbf2      	blt.n	80132b2 <__swhatbuf_r+0x12>
 80132cc:	9a01      	ldr	r2, [sp, #4]
 80132ce:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 80132d2:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 80132d6:	425a      	negs	r2, r3
 80132d8:	415a      	adcs	r2, r3
 80132da:	602a      	str	r2, [r5, #0]
 80132dc:	e7ee      	b.n	80132bc <__swhatbuf_r+0x1c>
 80132de:	2340      	movs	r3, #64	; 0x40
 80132e0:	2000      	movs	r0, #0
 80132e2:	6023      	str	r3, [r4, #0]
 80132e4:	b016      	add	sp, #88	; 0x58
 80132e6:	bd70      	pop	{r4, r5, r6, pc}

080132e8 <__smakebuf_r>:
 80132e8:	898b      	ldrh	r3, [r1, #12]
 80132ea:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80132ec:	079d      	lsls	r5, r3, #30
 80132ee:	4606      	mov	r6, r0
 80132f0:	460c      	mov	r4, r1
 80132f2:	d507      	bpl.n	8013304 <__smakebuf_r+0x1c>
 80132f4:	f104 0347 	add.w	r3, r4, #71	; 0x47
 80132f8:	6023      	str	r3, [r4, #0]
 80132fa:	6123      	str	r3, [r4, #16]
 80132fc:	2301      	movs	r3, #1
 80132fe:	6163      	str	r3, [r4, #20]
 8013300:	b002      	add	sp, #8
 8013302:	bd70      	pop	{r4, r5, r6, pc}
 8013304:	ab01      	add	r3, sp, #4
 8013306:	466a      	mov	r2, sp
 8013308:	f7ff ffca 	bl	80132a0 <__swhatbuf_r>
 801330c:	9900      	ldr	r1, [sp, #0]
 801330e:	4605      	mov	r5, r0
 8013310:	4630      	mov	r0, r6
 8013312:	f000 fb73 	bl	80139fc <_malloc_r>
 8013316:	b948      	cbnz	r0, 801332c <__smakebuf_r+0x44>
 8013318:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801331c:	059a      	lsls	r2, r3, #22
 801331e:	d4ef      	bmi.n	8013300 <__smakebuf_r+0x18>
 8013320:	f023 0303 	bic.w	r3, r3, #3
 8013324:	f043 0302 	orr.w	r3, r3, #2
 8013328:	81a3      	strh	r3, [r4, #12]
 801332a:	e7e3      	b.n	80132f4 <__smakebuf_r+0xc>
 801332c:	4b0d      	ldr	r3, [pc, #52]	; (8013364 <__smakebuf_r+0x7c>)
 801332e:	62b3      	str	r3, [r6, #40]	; 0x28
 8013330:	89a3      	ldrh	r3, [r4, #12]
 8013332:	6020      	str	r0, [r4, #0]
 8013334:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8013338:	81a3      	strh	r3, [r4, #12]
 801333a:	9b00      	ldr	r3, [sp, #0]
 801333c:	6163      	str	r3, [r4, #20]
 801333e:	9b01      	ldr	r3, [sp, #4]
 8013340:	6120      	str	r0, [r4, #16]
 8013342:	b15b      	cbz	r3, 801335c <__smakebuf_r+0x74>
 8013344:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8013348:	4630      	mov	r0, r6
 801334a:	f000 fecb 	bl	80140e4 <_isatty_r>
 801334e:	b128      	cbz	r0, 801335c <__smakebuf_r+0x74>
 8013350:	89a3      	ldrh	r3, [r4, #12]
 8013352:	f023 0303 	bic.w	r3, r3, #3
 8013356:	f043 0301 	orr.w	r3, r3, #1
 801335a:	81a3      	strh	r3, [r4, #12]
 801335c:	89a3      	ldrh	r3, [r4, #12]
 801335e:	431d      	orrs	r5, r3
 8013360:	81a5      	strh	r5, [r4, #12]
 8013362:	e7cd      	b.n	8013300 <__smakebuf_r+0x18>
 8013364:	08013139 	.word	0x08013139

08013368 <malloc>:
 8013368:	4b02      	ldr	r3, [pc, #8]	; (8013374 <malloc+0xc>)
 801336a:	4601      	mov	r1, r0
 801336c:	6818      	ldr	r0, [r3, #0]
 801336e:	f000 bb45 	b.w	80139fc <_malloc_r>
 8013372:	bf00      	nop
 8013374:	20001eb4 	.word	0x20001eb4

08013378 <memcpy>:
 8013378:	b510      	push	{r4, lr}
 801337a:	1e43      	subs	r3, r0, #1
 801337c:	440a      	add	r2, r1
 801337e:	4291      	cmp	r1, r2
 8013380:	d100      	bne.n	8013384 <memcpy+0xc>
 8013382:	bd10      	pop	{r4, pc}
 8013384:	f811 4b01 	ldrb.w	r4, [r1], #1
 8013388:	f803 4f01 	strb.w	r4, [r3, #1]!
 801338c:	e7f7      	b.n	801337e <memcpy+0x6>

0801338e <_Balloc>:
 801338e:	b570      	push	{r4, r5, r6, lr}
 8013390:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8013392:	4604      	mov	r4, r0
 8013394:	460e      	mov	r6, r1
 8013396:	b93d      	cbnz	r5, 80133a8 <_Balloc+0x1a>
 8013398:	2010      	movs	r0, #16
 801339a:	f7ff ffe5 	bl	8013368 <malloc>
 801339e:	6260      	str	r0, [r4, #36]	; 0x24
 80133a0:	e9c0 5501 	strd	r5, r5, [r0, #4]
 80133a4:	6005      	str	r5, [r0, #0]
 80133a6:	60c5      	str	r5, [r0, #12]
 80133a8:	6a65      	ldr	r5, [r4, #36]	; 0x24
 80133aa:	68eb      	ldr	r3, [r5, #12]
 80133ac:	b183      	cbz	r3, 80133d0 <_Balloc+0x42>
 80133ae:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80133b0:	68db      	ldr	r3, [r3, #12]
 80133b2:	f853 0026 	ldr.w	r0, [r3, r6, lsl #2]
 80133b6:	b9b8      	cbnz	r0, 80133e8 <_Balloc+0x5a>
 80133b8:	2101      	movs	r1, #1
 80133ba:	fa01 f506 	lsl.w	r5, r1, r6
 80133be:	1d6a      	adds	r2, r5, #5
 80133c0:	0092      	lsls	r2, r2, #2
 80133c2:	4620      	mov	r0, r4
 80133c4:	f000 fabe 	bl	8013944 <_calloc_r>
 80133c8:	b160      	cbz	r0, 80133e4 <_Balloc+0x56>
 80133ca:	e9c0 6501 	strd	r6, r5, [r0, #4]
 80133ce:	e00e      	b.n	80133ee <_Balloc+0x60>
 80133d0:	2221      	movs	r2, #33	; 0x21
 80133d2:	2104      	movs	r1, #4
 80133d4:	4620      	mov	r0, r4
 80133d6:	f000 fab5 	bl	8013944 <_calloc_r>
 80133da:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80133dc:	60e8      	str	r0, [r5, #12]
 80133de:	68db      	ldr	r3, [r3, #12]
 80133e0:	2b00      	cmp	r3, #0
 80133e2:	d1e4      	bne.n	80133ae <_Balloc+0x20>
 80133e4:	2000      	movs	r0, #0
 80133e6:	bd70      	pop	{r4, r5, r6, pc}
 80133e8:	6802      	ldr	r2, [r0, #0]
 80133ea:	f843 2026 	str.w	r2, [r3, r6, lsl #2]
 80133ee:	2300      	movs	r3, #0
 80133f0:	e9c0 3303 	strd	r3, r3, [r0, #12]
 80133f4:	e7f7      	b.n	80133e6 <_Balloc+0x58>

080133f6 <_Bfree>:
 80133f6:	b570      	push	{r4, r5, r6, lr}
 80133f8:	6a44      	ldr	r4, [r0, #36]	; 0x24
 80133fa:	4606      	mov	r6, r0
 80133fc:	460d      	mov	r5, r1
 80133fe:	b93c      	cbnz	r4, 8013410 <_Bfree+0x1a>
 8013400:	2010      	movs	r0, #16
 8013402:	f7ff ffb1 	bl	8013368 <malloc>
 8013406:	6270      	str	r0, [r6, #36]	; 0x24
 8013408:	e9c0 4401 	strd	r4, r4, [r0, #4]
 801340c:	6004      	str	r4, [r0, #0]
 801340e:	60c4      	str	r4, [r0, #12]
 8013410:	b13d      	cbz	r5, 8013422 <_Bfree+0x2c>
 8013412:	6a73      	ldr	r3, [r6, #36]	; 0x24
 8013414:	686a      	ldr	r2, [r5, #4]
 8013416:	68db      	ldr	r3, [r3, #12]
 8013418:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 801341c:	6029      	str	r1, [r5, #0]
 801341e:	f843 5022 	str.w	r5, [r3, r2, lsl #2]
 8013422:	bd70      	pop	{r4, r5, r6, pc}

08013424 <__multadd>:
 8013424:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8013428:	690d      	ldr	r5, [r1, #16]
 801342a:	461f      	mov	r7, r3
 801342c:	4606      	mov	r6, r0
 801342e:	460c      	mov	r4, r1
 8013430:	f101 0c14 	add.w	ip, r1, #20
 8013434:	2300      	movs	r3, #0
 8013436:	f8dc 0000 	ldr.w	r0, [ip]
 801343a:	b281      	uxth	r1, r0
 801343c:	fb02 7101 	mla	r1, r2, r1, r7
 8013440:	0c0f      	lsrs	r7, r1, #16
 8013442:	0c00      	lsrs	r0, r0, #16
 8013444:	fb02 7000 	mla	r0, r2, r0, r7
 8013448:	b289      	uxth	r1, r1
 801344a:	3301      	adds	r3, #1
 801344c:	eb01 4100 	add.w	r1, r1, r0, lsl #16
 8013450:	429d      	cmp	r5, r3
 8013452:	ea4f 4710 	mov.w	r7, r0, lsr #16
 8013456:	f84c 1b04 	str.w	r1, [ip], #4
 801345a:	dcec      	bgt.n	8013436 <__multadd+0x12>
 801345c:	b1d7      	cbz	r7, 8013494 <__multadd+0x70>
 801345e:	68a3      	ldr	r3, [r4, #8]
 8013460:	42ab      	cmp	r3, r5
 8013462:	dc12      	bgt.n	801348a <__multadd+0x66>
 8013464:	6861      	ldr	r1, [r4, #4]
 8013466:	4630      	mov	r0, r6
 8013468:	3101      	adds	r1, #1
 801346a:	f7ff ff90 	bl	801338e <_Balloc>
 801346e:	6922      	ldr	r2, [r4, #16]
 8013470:	3202      	adds	r2, #2
 8013472:	f104 010c 	add.w	r1, r4, #12
 8013476:	4680      	mov	r8, r0
 8013478:	0092      	lsls	r2, r2, #2
 801347a:	300c      	adds	r0, #12
 801347c:	f7ff ff7c 	bl	8013378 <memcpy>
 8013480:	4621      	mov	r1, r4
 8013482:	4630      	mov	r0, r6
 8013484:	f7ff ffb7 	bl	80133f6 <_Bfree>
 8013488:	4644      	mov	r4, r8
 801348a:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 801348e:	3501      	adds	r5, #1
 8013490:	615f      	str	r7, [r3, #20]
 8013492:	6125      	str	r5, [r4, #16]
 8013494:	4620      	mov	r0, r4
 8013496:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0801349a <__hi0bits>:
 801349a:	0c02      	lsrs	r2, r0, #16
 801349c:	0412      	lsls	r2, r2, #16
 801349e:	4603      	mov	r3, r0
 80134a0:	b9b2      	cbnz	r2, 80134d0 <__hi0bits+0x36>
 80134a2:	0403      	lsls	r3, r0, #16
 80134a4:	2010      	movs	r0, #16
 80134a6:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
 80134aa:	bf04      	itt	eq
 80134ac:	021b      	lsleq	r3, r3, #8
 80134ae:	3008      	addeq	r0, #8
 80134b0:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
 80134b4:	bf04      	itt	eq
 80134b6:	011b      	lsleq	r3, r3, #4
 80134b8:	3004      	addeq	r0, #4
 80134ba:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
 80134be:	bf04      	itt	eq
 80134c0:	009b      	lsleq	r3, r3, #2
 80134c2:	3002      	addeq	r0, #2
 80134c4:	2b00      	cmp	r3, #0
 80134c6:	db06      	blt.n	80134d6 <__hi0bits+0x3c>
 80134c8:	005b      	lsls	r3, r3, #1
 80134ca:	d503      	bpl.n	80134d4 <__hi0bits+0x3a>
 80134cc:	3001      	adds	r0, #1
 80134ce:	4770      	bx	lr
 80134d0:	2000      	movs	r0, #0
 80134d2:	e7e8      	b.n	80134a6 <__hi0bits+0xc>
 80134d4:	2020      	movs	r0, #32
 80134d6:	4770      	bx	lr

080134d8 <__lo0bits>:
 80134d8:	6803      	ldr	r3, [r0, #0]
 80134da:	f013 0207 	ands.w	r2, r3, #7
 80134de:	4601      	mov	r1, r0
 80134e0:	d00b      	beq.n	80134fa <__lo0bits+0x22>
 80134e2:	07da      	lsls	r2, r3, #31
 80134e4:	d423      	bmi.n	801352e <__lo0bits+0x56>
 80134e6:	0798      	lsls	r0, r3, #30
 80134e8:	bf49      	itett	mi
 80134ea:	085b      	lsrmi	r3, r3, #1
 80134ec:	089b      	lsrpl	r3, r3, #2
 80134ee:	2001      	movmi	r0, #1
 80134f0:	600b      	strmi	r3, [r1, #0]
 80134f2:	bf5c      	itt	pl
 80134f4:	600b      	strpl	r3, [r1, #0]
 80134f6:	2002      	movpl	r0, #2
 80134f8:	4770      	bx	lr
 80134fa:	b298      	uxth	r0, r3
 80134fc:	b9a8      	cbnz	r0, 801352a <__lo0bits+0x52>
 80134fe:	0c1b      	lsrs	r3, r3, #16
 8013500:	2010      	movs	r0, #16
 8013502:	f013 0fff 	tst.w	r3, #255	; 0xff
 8013506:	bf04      	itt	eq
 8013508:	0a1b      	lsreq	r3, r3, #8
 801350a:	3008      	addeq	r0, #8
 801350c:	071a      	lsls	r2, r3, #28
 801350e:	bf04      	itt	eq
 8013510:	091b      	lsreq	r3, r3, #4
 8013512:	3004      	addeq	r0, #4
 8013514:	079a      	lsls	r2, r3, #30
 8013516:	bf04      	itt	eq
 8013518:	089b      	lsreq	r3, r3, #2
 801351a:	3002      	addeq	r0, #2
 801351c:	07da      	lsls	r2, r3, #31
 801351e:	d402      	bmi.n	8013526 <__lo0bits+0x4e>
 8013520:	085b      	lsrs	r3, r3, #1
 8013522:	d006      	beq.n	8013532 <__lo0bits+0x5a>
 8013524:	3001      	adds	r0, #1
 8013526:	600b      	str	r3, [r1, #0]
 8013528:	4770      	bx	lr
 801352a:	4610      	mov	r0, r2
 801352c:	e7e9      	b.n	8013502 <__lo0bits+0x2a>
 801352e:	2000      	movs	r0, #0
 8013530:	4770      	bx	lr
 8013532:	2020      	movs	r0, #32
 8013534:	4770      	bx	lr

08013536 <__i2b>:
 8013536:	b510      	push	{r4, lr}
 8013538:	460c      	mov	r4, r1
 801353a:	2101      	movs	r1, #1
 801353c:	f7ff ff27 	bl	801338e <_Balloc>
 8013540:	2201      	movs	r2, #1
 8013542:	6144      	str	r4, [r0, #20]
 8013544:	6102      	str	r2, [r0, #16]
 8013546:	bd10      	pop	{r4, pc}

08013548 <__multiply>:
 8013548:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801354c:	4614      	mov	r4, r2
 801354e:	690a      	ldr	r2, [r1, #16]
 8013550:	6923      	ldr	r3, [r4, #16]
 8013552:	429a      	cmp	r2, r3
 8013554:	bfb8      	it	lt
 8013556:	460b      	movlt	r3, r1
 8013558:	4688      	mov	r8, r1
 801355a:	bfbc      	itt	lt
 801355c:	46a0      	movlt	r8, r4
 801355e:	461c      	movlt	r4, r3
 8013560:	f8d8 7010 	ldr.w	r7, [r8, #16]
 8013564:	f8d4 9010 	ldr.w	r9, [r4, #16]
 8013568:	f8d8 3008 	ldr.w	r3, [r8, #8]
 801356c:	f8d8 1004 	ldr.w	r1, [r8, #4]
 8013570:	eb07 0609 	add.w	r6, r7, r9
 8013574:	42b3      	cmp	r3, r6
 8013576:	bfb8      	it	lt
 8013578:	3101      	addlt	r1, #1
 801357a:	f7ff ff08 	bl	801338e <_Balloc>
 801357e:	f100 0514 	add.w	r5, r0, #20
 8013582:	eb05 0e86 	add.w	lr, r5, r6, lsl #2
 8013586:	462b      	mov	r3, r5
 8013588:	2200      	movs	r2, #0
 801358a:	4573      	cmp	r3, lr
 801358c:	d316      	bcc.n	80135bc <__multiply+0x74>
 801358e:	f104 0214 	add.w	r2, r4, #20
 8013592:	f108 0114 	add.w	r1, r8, #20
 8013596:	eb02 0389 	add.w	r3, r2, r9, lsl #2
 801359a:	eb01 0787 	add.w	r7, r1, r7, lsl #2
 801359e:	9300      	str	r3, [sp, #0]
 80135a0:	9b00      	ldr	r3, [sp, #0]
 80135a2:	9201      	str	r2, [sp, #4]
 80135a4:	4293      	cmp	r3, r2
 80135a6:	d80c      	bhi.n	80135c2 <__multiply+0x7a>
 80135a8:	2e00      	cmp	r6, #0
 80135aa:	dd03      	ble.n	80135b4 <__multiply+0x6c>
 80135ac:	f85e 3d04 	ldr.w	r3, [lr, #-4]!
 80135b0:	2b00      	cmp	r3, #0
 80135b2:	d05d      	beq.n	8013670 <__multiply+0x128>
 80135b4:	6106      	str	r6, [r0, #16]
 80135b6:	b003      	add	sp, #12
 80135b8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80135bc:	f843 2b04 	str.w	r2, [r3], #4
 80135c0:	e7e3      	b.n	801358a <__multiply+0x42>
 80135c2:	f8b2 b000 	ldrh.w	fp, [r2]
 80135c6:	f1bb 0f00 	cmp.w	fp, #0
 80135ca:	d023      	beq.n	8013614 <__multiply+0xcc>
 80135cc:	4689      	mov	r9, r1
 80135ce:	46ac      	mov	ip, r5
 80135d0:	f04f 0800 	mov.w	r8, #0
 80135d4:	f859 4b04 	ldr.w	r4, [r9], #4
 80135d8:	f8dc a000 	ldr.w	sl, [ip]
 80135dc:	b2a3      	uxth	r3, r4
 80135de:	fa1f fa8a 	uxth.w	sl, sl
 80135e2:	fb0b a303 	mla	r3, fp, r3, sl
 80135e6:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 80135ea:	f8dc 4000 	ldr.w	r4, [ip]
 80135ee:	4443      	add	r3, r8
 80135f0:	ea4f 4814 	mov.w	r8, r4, lsr #16
 80135f4:	fb0b 840a 	mla	r4, fp, sl, r8
 80135f8:	eb04 4413 	add.w	r4, r4, r3, lsr #16
 80135fc:	46e2      	mov	sl, ip
 80135fe:	b29b      	uxth	r3, r3
 8013600:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8013604:	454f      	cmp	r7, r9
 8013606:	ea4f 4814 	mov.w	r8, r4, lsr #16
 801360a:	f84a 3b04 	str.w	r3, [sl], #4
 801360e:	d82b      	bhi.n	8013668 <__multiply+0x120>
 8013610:	f8cc 8004 	str.w	r8, [ip, #4]
 8013614:	9b01      	ldr	r3, [sp, #4]
 8013616:	f8b3 a002 	ldrh.w	sl, [r3, #2]
 801361a:	3204      	adds	r2, #4
 801361c:	f1ba 0f00 	cmp.w	sl, #0
 8013620:	d020      	beq.n	8013664 <__multiply+0x11c>
 8013622:	682b      	ldr	r3, [r5, #0]
 8013624:	4689      	mov	r9, r1
 8013626:	46a8      	mov	r8, r5
 8013628:	f04f 0b00 	mov.w	fp, #0
 801362c:	f8b9 c000 	ldrh.w	ip, [r9]
 8013630:	f8b8 4002 	ldrh.w	r4, [r8, #2]
 8013634:	fb0a 440c 	mla	r4, sl, ip, r4
 8013638:	445c      	add	r4, fp
 801363a:	46c4      	mov	ip, r8
 801363c:	b29b      	uxth	r3, r3
 801363e:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8013642:	f84c 3b04 	str.w	r3, [ip], #4
 8013646:	f859 3b04 	ldr.w	r3, [r9], #4
 801364a:	f8b8 b004 	ldrh.w	fp, [r8, #4]
 801364e:	0c1b      	lsrs	r3, r3, #16
 8013650:	fb0a b303 	mla	r3, sl, r3, fp
 8013654:	eb03 4314 	add.w	r3, r3, r4, lsr #16
 8013658:	454f      	cmp	r7, r9
 801365a:	ea4f 4b13 	mov.w	fp, r3, lsr #16
 801365e:	d805      	bhi.n	801366c <__multiply+0x124>
 8013660:	f8c8 3004 	str.w	r3, [r8, #4]
 8013664:	3504      	adds	r5, #4
 8013666:	e79b      	b.n	80135a0 <__multiply+0x58>
 8013668:	46d4      	mov	ip, sl
 801366a:	e7b3      	b.n	80135d4 <__multiply+0x8c>
 801366c:	46e0      	mov	r8, ip
 801366e:	e7dd      	b.n	801362c <__multiply+0xe4>
 8013670:	3e01      	subs	r6, #1
 8013672:	e799      	b.n	80135a8 <__multiply+0x60>

08013674 <__pow5mult>:
 8013674:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8013678:	4615      	mov	r5, r2
 801367a:	f012 0203 	ands.w	r2, r2, #3
 801367e:	4606      	mov	r6, r0
 8013680:	460f      	mov	r7, r1
 8013682:	d007      	beq.n	8013694 <__pow5mult+0x20>
 8013684:	3a01      	subs	r2, #1
 8013686:	4c21      	ldr	r4, [pc, #132]	; (801370c <__pow5mult+0x98>)
 8013688:	2300      	movs	r3, #0
 801368a:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 801368e:	f7ff fec9 	bl	8013424 <__multadd>
 8013692:	4607      	mov	r7, r0
 8013694:	10ad      	asrs	r5, r5, #2
 8013696:	d035      	beq.n	8013704 <__pow5mult+0x90>
 8013698:	6a74      	ldr	r4, [r6, #36]	; 0x24
 801369a:	b93c      	cbnz	r4, 80136ac <__pow5mult+0x38>
 801369c:	2010      	movs	r0, #16
 801369e:	f7ff fe63 	bl	8013368 <malloc>
 80136a2:	6270      	str	r0, [r6, #36]	; 0x24
 80136a4:	e9c0 4401 	strd	r4, r4, [r0, #4]
 80136a8:	6004      	str	r4, [r0, #0]
 80136aa:	60c4      	str	r4, [r0, #12]
 80136ac:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 80136b0:	f8d8 4008 	ldr.w	r4, [r8, #8]
 80136b4:	b94c      	cbnz	r4, 80136ca <__pow5mult+0x56>
 80136b6:	f240 2171 	movw	r1, #625	; 0x271
 80136ba:	4630      	mov	r0, r6
 80136bc:	f7ff ff3b 	bl	8013536 <__i2b>
 80136c0:	2300      	movs	r3, #0
 80136c2:	f8c8 0008 	str.w	r0, [r8, #8]
 80136c6:	4604      	mov	r4, r0
 80136c8:	6003      	str	r3, [r0, #0]
 80136ca:	f04f 0800 	mov.w	r8, #0
 80136ce:	07eb      	lsls	r3, r5, #31
 80136d0:	d50a      	bpl.n	80136e8 <__pow5mult+0x74>
 80136d2:	4639      	mov	r1, r7
 80136d4:	4622      	mov	r2, r4
 80136d6:	4630      	mov	r0, r6
 80136d8:	f7ff ff36 	bl	8013548 <__multiply>
 80136dc:	4639      	mov	r1, r7
 80136de:	4681      	mov	r9, r0
 80136e0:	4630      	mov	r0, r6
 80136e2:	f7ff fe88 	bl	80133f6 <_Bfree>
 80136e6:	464f      	mov	r7, r9
 80136e8:	106d      	asrs	r5, r5, #1
 80136ea:	d00b      	beq.n	8013704 <__pow5mult+0x90>
 80136ec:	6820      	ldr	r0, [r4, #0]
 80136ee:	b938      	cbnz	r0, 8013700 <__pow5mult+0x8c>
 80136f0:	4622      	mov	r2, r4
 80136f2:	4621      	mov	r1, r4
 80136f4:	4630      	mov	r0, r6
 80136f6:	f7ff ff27 	bl	8013548 <__multiply>
 80136fa:	6020      	str	r0, [r4, #0]
 80136fc:	f8c0 8000 	str.w	r8, [r0]
 8013700:	4604      	mov	r4, r0
 8013702:	e7e4      	b.n	80136ce <__pow5mult+0x5a>
 8013704:	4638      	mov	r0, r7
 8013706:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801370a:	bf00      	nop
 801370c:	08016b10 	.word	0x08016b10

08013710 <__lshift>:
 8013710:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8013714:	460c      	mov	r4, r1
 8013716:	ea4f 1a62 	mov.w	sl, r2, asr #5
 801371a:	6923      	ldr	r3, [r4, #16]
 801371c:	6849      	ldr	r1, [r1, #4]
 801371e:	eb0a 0903 	add.w	r9, sl, r3
 8013722:	68a3      	ldr	r3, [r4, #8]
 8013724:	4607      	mov	r7, r0
 8013726:	4616      	mov	r6, r2
 8013728:	f109 0501 	add.w	r5, r9, #1
 801372c:	42ab      	cmp	r3, r5
 801372e:	db32      	blt.n	8013796 <__lshift+0x86>
 8013730:	4638      	mov	r0, r7
 8013732:	f7ff fe2c 	bl	801338e <_Balloc>
 8013736:	2300      	movs	r3, #0
 8013738:	4680      	mov	r8, r0
 801373a:	f100 0114 	add.w	r1, r0, #20
 801373e:	461a      	mov	r2, r3
 8013740:	4553      	cmp	r3, sl
 8013742:	db2b      	blt.n	801379c <__lshift+0x8c>
 8013744:	6920      	ldr	r0, [r4, #16]
 8013746:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 801374a:	f104 0314 	add.w	r3, r4, #20
 801374e:	f016 021f 	ands.w	r2, r6, #31
 8013752:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8013756:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 801375a:	d025      	beq.n	80137a8 <__lshift+0x98>
 801375c:	f1c2 0e20 	rsb	lr, r2, #32
 8013760:	2000      	movs	r0, #0
 8013762:	681e      	ldr	r6, [r3, #0]
 8013764:	468a      	mov	sl, r1
 8013766:	4096      	lsls	r6, r2
 8013768:	4330      	orrs	r0, r6
 801376a:	f84a 0b04 	str.w	r0, [sl], #4
 801376e:	f853 0b04 	ldr.w	r0, [r3], #4
 8013772:	459c      	cmp	ip, r3
 8013774:	fa20 f00e 	lsr.w	r0, r0, lr
 8013778:	d814      	bhi.n	80137a4 <__lshift+0x94>
 801377a:	6048      	str	r0, [r1, #4]
 801377c:	b108      	cbz	r0, 8013782 <__lshift+0x72>
 801377e:	f109 0502 	add.w	r5, r9, #2
 8013782:	3d01      	subs	r5, #1
 8013784:	4638      	mov	r0, r7
 8013786:	f8c8 5010 	str.w	r5, [r8, #16]
 801378a:	4621      	mov	r1, r4
 801378c:	f7ff fe33 	bl	80133f6 <_Bfree>
 8013790:	4640      	mov	r0, r8
 8013792:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8013796:	3101      	adds	r1, #1
 8013798:	005b      	lsls	r3, r3, #1
 801379a:	e7c7      	b.n	801372c <__lshift+0x1c>
 801379c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 80137a0:	3301      	adds	r3, #1
 80137a2:	e7cd      	b.n	8013740 <__lshift+0x30>
 80137a4:	4651      	mov	r1, sl
 80137a6:	e7dc      	b.n	8013762 <__lshift+0x52>
 80137a8:	3904      	subs	r1, #4
 80137aa:	f853 2b04 	ldr.w	r2, [r3], #4
 80137ae:	f841 2f04 	str.w	r2, [r1, #4]!
 80137b2:	459c      	cmp	ip, r3
 80137b4:	d8f9      	bhi.n	80137aa <__lshift+0x9a>
 80137b6:	e7e4      	b.n	8013782 <__lshift+0x72>

080137b8 <__mcmp>:
 80137b8:	6903      	ldr	r3, [r0, #16]
 80137ba:	690a      	ldr	r2, [r1, #16]
 80137bc:	1a9b      	subs	r3, r3, r2
 80137be:	b530      	push	{r4, r5, lr}
 80137c0:	d10c      	bne.n	80137dc <__mcmp+0x24>
 80137c2:	0092      	lsls	r2, r2, #2
 80137c4:	3014      	adds	r0, #20
 80137c6:	3114      	adds	r1, #20
 80137c8:	1884      	adds	r4, r0, r2
 80137ca:	4411      	add	r1, r2
 80137cc:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 80137d0:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 80137d4:	4295      	cmp	r5, r2
 80137d6:	d003      	beq.n	80137e0 <__mcmp+0x28>
 80137d8:	d305      	bcc.n	80137e6 <__mcmp+0x2e>
 80137da:	2301      	movs	r3, #1
 80137dc:	4618      	mov	r0, r3
 80137de:	bd30      	pop	{r4, r5, pc}
 80137e0:	42a0      	cmp	r0, r4
 80137e2:	d3f3      	bcc.n	80137cc <__mcmp+0x14>
 80137e4:	e7fa      	b.n	80137dc <__mcmp+0x24>
 80137e6:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80137ea:	e7f7      	b.n	80137dc <__mcmp+0x24>

080137ec <__mdiff>:
 80137ec:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80137f0:	460d      	mov	r5, r1
 80137f2:	4607      	mov	r7, r0
 80137f4:	4611      	mov	r1, r2
 80137f6:	4628      	mov	r0, r5
 80137f8:	4614      	mov	r4, r2
 80137fa:	f7ff ffdd 	bl	80137b8 <__mcmp>
 80137fe:	1e06      	subs	r6, r0, #0
 8013800:	d108      	bne.n	8013814 <__mdiff+0x28>
 8013802:	4631      	mov	r1, r6
 8013804:	4638      	mov	r0, r7
 8013806:	f7ff fdc2 	bl	801338e <_Balloc>
 801380a:	2301      	movs	r3, #1
 801380c:	e9c0 3604 	strd	r3, r6, [r0, #16]
 8013810:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8013814:	bfa4      	itt	ge
 8013816:	4623      	movge	r3, r4
 8013818:	462c      	movge	r4, r5
 801381a:	4638      	mov	r0, r7
 801381c:	6861      	ldr	r1, [r4, #4]
 801381e:	bfa6      	itte	ge
 8013820:	461d      	movge	r5, r3
 8013822:	2600      	movge	r6, #0
 8013824:	2601      	movlt	r6, #1
 8013826:	f7ff fdb2 	bl	801338e <_Balloc>
 801382a:	692b      	ldr	r3, [r5, #16]
 801382c:	60c6      	str	r6, [r0, #12]
 801382e:	6926      	ldr	r6, [r4, #16]
 8013830:	f105 0914 	add.w	r9, r5, #20
 8013834:	f104 0214 	add.w	r2, r4, #20
 8013838:	eb02 0786 	add.w	r7, r2, r6, lsl #2
 801383c:	eb09 0883 	add.w	r8, r9, r3, lsl #2
 8013840:	f100 0514 	add.w	r5, r0, #20
 8013844:	f04f 0e00 	mov.w	lr, #0
 8013848:	f852 ab04 	ldr.w	sl, [r2], #4
 801384c:	f859 4b04 	ldr.w	r4, [r9], #4
 8013850:	fa1e f18a 	uxtah	r1, lr, sl
 8013854:	b2a3      	uxth	r3, r4
 8013856:	1ac9      	subs	r1, r1, r3
 8013858:	0c23      	lsrs	r3, r4, #16
 801385a:	ebc3 431a 	rsb	r3, r3, sl, lsr #16
 801385e:	eb03 4321 	add.w	r3, r3, r1, asr #16
 8013862:	b289      	uxth	r1, r1
 8013864:	ea4f 4e23 	mov.w	lr, r3, asr #16
 8013868:	45c8      	cmp	r8, r9
 801386a:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 801386e:	4694      	mov	ip, r2
 8013870:	f845 3b04 	str.w	r3, [r5], #4
 8013874:	d8e8      	bhi.n	8013848 <__mdiff+0x5c>
 8013876:	45bc      	cmp	ip, r7
 8013878:	d304      	bcc.n	8013884 <__mdiff+0x98>
 801387a:	f855 3d04 	ldr.w	r3, [r5, #-4]!
 801387e:	b183      	cbz	r3, 80138a2 <__mdiff+0xb6>
 8013880:	6106      	str	r6, [r0, #16]
 8013882:	e7c5      	b.n	8013810 <__mdiff+0x24>
 8013884:	f85c 1b04 	ldr.w	r1, [ip], #4
 8013888:	fa1e f381 	uxtah	r3, lr, r1
 801388c:	141a      	asrs	r2, r3, #16
 801388e:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 8013892:	b29b      	uxth	r3, r3
 8013894:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8013898:	ea4f 4e22 	mov.w	lr, r2, asr #16
 801389c:	f845 3b04 	str.w	r3, [r5], #4
 80138a0:	e7e9      	b.n	8013876 <__mdiff+0x8a>
 80138a2:	3e01      	subs	r6, #1
 80138a4:	e7e9      	b.n	801387a <__mdiff+0x8e>

080138a6 <__d2b>:
 80138a6:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 80138aa:	460e      	mov	r6, r1
 80138ac:	2101      	movs	r1, #1
 80138ae:	ec59 8b10 	vmov	r8, r9, d0
 80138b2:	4615      	mov	r5, r2
 80138b4:	f7ff fd6b 	bl	801338e <_Balloc>
 80138b8:	f3c9 540a 	ubfx	r4, r9, #20, #11
 80138bc:	4607      	mov	r7, r0
 80138be:	f3c9 0313 	ubfx	r3, r9, #0, #20
 80138c2:	bb34      	cbnz	r4, 8013912 <__d2b+0x6c>
 80138c4:	9301      	str	r3, [sp, #4]
 80138c6:	f1b8 0300 	subs.w	r3, r8, #0
 80138ca:	d027      	beq.n	801391c <__d2b+0x76>
 80138cc:	a802      	add	r0, sp, #8
 80138ce:	f840 3d08 	str.w	r3, [r0, #-8]!
 80138d2:	f7ff fe01 	bl	80134d8 <__lo0bits>
 80138d6:	9900      	ldr	r1, [sp, #0]
 80138d8:	b1f0      	cbz	r0, 8013918 <__d2b+0x72>
 80138da:	9a01      	ldr	r2, [sp, #4]
 80138dc:	f1c0 0320 	rsb	r3, r0, #32
 80138e0:	fa02 f303 	lsl.w	r3, r2, r3
 80138e4:	430b      	orrs	r3, r1
 80138e6:	40c2      	lsrs	r2, r0
 80138e8:	617b      	str	r3, [r7, #20]
 80138ea:	9201      	str	r2, [sp, #4]
 80138ec:	9b01      	ldr	r3, [sp, #4]
 80138ee:	61bb      	str	r3, [r7, #24]
 80138f0:	2b00      	cmp	r3, #0
 80138f2:	bf14      	ite	ne
 80138f4:	2102      	movne	r1, #2
 80138f6:	2101      	moveq	r1, #1
 80138f8:	6139      	str	r1, [r7, #16]
 80138fa:	b1c4      	cbz	r4, 801392e <__d2b+0x88>
 80138fc:	f2a4 4433 	subw	r4, r4, #1075	; 0x433
 8013900:	4404      	add	r4, r0
 8013902:	6034      	str	r4, [r6, #0]
 8013904:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8013908:	6028      	str	r0, [r5, #0]
 801390a:	4638      	mov	r0, r7
 801390c:	b003      	add	sp, #12
 801390e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8013912:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8013916:	e7d5      	b.n	80138c4 <__d2b+0x1e>
 8013918:	6179      	str	r1, [r7, #20]
 801391a:	e7e7      	b.n	80138ec <__d2b+0x46>
 801391c:	a801      	add	r0, sp, #4
 801391e:	f7ff fddb 	bl	80134d8 <__lo0bits>
 8013922:	9b01      	ldr	r3, [sp, #4]
 8013924:	617b      	str	r3, [r7, #20]
 8013926:	2101      	movs	r1, #1
 8013928:	6139      	str	r1, [r7, #16]
 801392a:	3020      	adds	r0, #32
 801392c:	e7e5      	b.n	80138fa <__d2b+0x54>
 801392e:	eb07 0381 	add.w	r3, r7, r1, lsl #2
 8013932:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8013936:	6030      	str	r0, [r6, #0]
 8013938:	6918      	ldr	r0, [r3, #16]
 801393a:	f7ff fdae 	bl	801349a <__hi0bits>
 801393e:	ebc0 1041 	rsb	r0, r0, r1, lsl #5
 8013942:	e7e1      	b.n	8013908 <__d2b+0x62>

08013944 <_calloc_r>:
 8013944:	b538      	push	{r3, r4, r5, lr}
 8013946:	fb02 f401 	mul.w	r4, r2, r1
 801394a:	4621      	mov	r1, r4
 801394c:	f000 f856 	bl	80139fc <_malloc_r>
 8013950:	4605      	mov	r5, r0
 8013952:	b118      	cbz	r0, 801395c <_calloc_r+0x18>
 8013954:	4622      	mov	r2, r4
 8013956:	2100      	movs	r1, #0
 8013958:	f7fd fef0 	bl	801173c <memset>
 801395c:	4628      	mov	r0, r5
 801395e:	bd38      	pop	{r3, r4, r5, pc}

08013960 <_free_r>:
 8013960:	b538      	push	{r3, r4, r5, lr}
 8013962:	4605      	mov	r5, r0
 8013964:	2900      	cmp	r1, #0
 8013966:	d045      	beq.n	80139f4 <_free_r+0x94>
 8013968:	f851 3c04 	ldr.w	r3, [r1, #-4]
 801396c:	1f0c      	subs	r4, r1, #4
 801396e:	2b00      	cmp	r3, #0
 8013970:	bfb8      	it	lt
 8013972:	18e4      	addlt	r4, r4, r3
 8013974:	f000 fc03 	bl	801417e <__malloc_lock>
 8013978:	4a1f      	ldr	r2, [pc, #124]	; (80139f8 <_free_r+0x98>)
 801397a:	6813      	ldr	r3, [r2, #0]
 801397c:	4610      	mov	r0, r2
 801397e:	b933      	cbnz	r3, 801398e <_free_r+0x2e>
 8013980:	6063      	str	r3, [r4, #4]
 8013982:	6014      	str	r4, [r2, #0]
 8013984:	4628      	mov	r0, r5
 8013986:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 801398a:	f000 bbf9 	b.w	8014180 <__malloc_unlock>
 801398e:	42a3      	cmp	r3, r4
 8013990:	d90c      	bls.n	80139ac <_free_r+0x4c>
 8013992:	6821      	ldr	r1, [r4, #0]
 8013994:	1862      	adds	r2, r4, r1
 8013996:	4293      	cmp	r3, r2
 8013998:	bf04      	itt	eq
 801399a:	681a      	ldreq	r2, [r3, #0]
 801399c:	685b      	ldreq	r3, [r3, #4]
 801399e:	6063      	str	r3, [r4, #4]
 80139a0:	bf04      	itt	eq
 80139a2:	1852      	addeq	r2, r2, r1
 80139a4:	6022      	streq	r2, [r4, #0]
 80139a6:	6004      	str	r4, [r0, #0]
 80139a8:	e7ec      	b.n	8013984 <_free_r+0x24>
 80139aa:	4613      	mov	r3, r2
 80139ac:	685a      	ldr	r2, [r3, #4]
 80139ae:	b10a      	cbz	r2, 80139b4 <_free_r+0x54>
 80139b0:	42a2      	cmp	r2, r4
 80139b2:	d9fa      	bls.n	80139aa <_free_r+0x4a>
 80139b4:	6819      	ldr	r1, [r3, #0]
 80139b6:	1858      	adds	r0, r3, r1
 80139b8:	42a0      	cmp	r0, r4
 80139ba:	d10b      	bne.n	80139d4 <_free_r+0x74>
 80139bc:	6820      	ldr	r0, [r4, #0]
 80139be:	4401      	add	r1, r0
 80139c0:	1858      	adds	r0, r3, r1
 80139c2:	4282      	cmp	r2, r0
 80139c4:	6019      	str	r1, [r3, #0]
 80139c6:	d1dd      	bne.n	8013984 <_free_r+0x24>
 80139c8:	6810      	ldr	r0, [r2, #0]
 80139ca:	6852      	ldr	r2, [r2, #4]
 80139cc:	605a      	str	r2, [r3, #4]
 80139ce:	4401      	add	r1, r0
 80139d0:	6019      	str	r1, [r3, #0]
 80139d2:	e7d7      	b.n	8013984 <_free_r+0x24>
 80139d4:	d902      	bls.n	80139dc <_free_r+0x7c>
 80139d6:	230c      	movs	r3, #12
 80139d8:	602b      	str	r3, [r5, #0]
 80139da:	e7d3      	b.n	8013984 <_free_r+0x24>
 80139dc:	6820      	ldr	r0, [r4, #0]
 80139de:	1821      	adds	r1, r4, r0
 80139e0:	428a      	cmp	r2, r1
 80139e2:	bf04      	itt	eq
 80139e4:	6811      	ldreq	r1, [r2, #0]
 80139e6:	6852      	ldreq	r2, [r2, #4]
 80139e8:	6062      	str	r2, [r4, #4]
 80139ea:	bf04      	itt	eq
 80139ec:	1809      	addeq	r1, r1, r0
 80139ee:	6021      	streq	r1, [r4, #0]
 80139f0:	605c      	str	r4, [r3, #4]
 80139f2:	e7c7      	b.n	8013984 <_free_r+0x24>
 80139f4:	bd38      	pop	{r3, r4, r5, pc}
 80139f6:	bf00      	nop
 80139f8:	2000215c 	.word	0x2000215c

080139fc <_malloc_r>:
 80139fc:	b570      	push	{r4, r5, r6, lr}
 80139fe:	1ccd      	adds	r5, r1, #3
 8013a00:	f025 0503 	bic.w	r5, r5, #3
 8013a04:	3508      	adds	r5, #8
 8013a06:	2d0c      	cmp	r5, #12
 8013a08:	bf38      	it	cc
 8013a0a:	250c      	movcc	r5, #12
 8013a0c:	2d00      	cmp	r5, #0
 8013a0e:	4606      	mov	r6, r0
 8013a10:	db01      	blt.n	8013a16 <_malloc_r+0x1a>
 8013a12:	42a9      	cmp	r1, r5
 8013a14:	d903      	bls.n	8013a1e <_malloc_r+0x22>
 8013a16:	230c      	movs	r3, #12
 8013a18:	6033      	str	r3, [r6, #0]
 8013a1a:	2000      	movs	r0, #0
 8013a1c:	bd70      	pop	{r4, r5, r6, pc}
 8013a1e:	f000 fbae 	bl	801417e <__malloc_lock>
 8013a22:	4a21      	ldr	r2, [pc, #132]	; (8013aa8 <_malloc_r+0xac>)
 8013a24:	6814      	ldr	r4, [r2, #0]
 8013a26:	4621      	mov	r1, r4
 8013a28:	b991      	cbnz	r1, 8013a50 <_malloc_r+0x54>
 8013a2a:	4c20      	ldr	r4, [pc, #128]	; (8013aac <_malloc_r+0xb0>)
 8013a2c:	6823      	ldr	r3, [r4, #0]
 8013a2e:	b91b      	cbnz	r3, 8013a38 <_malloc_r+0x3c>
 8013a30:	4630      	mov	r0, r6
 8013a32:	f000 facf 	bl	8013fd4 <_sbrk_r>
 8013a36:	6020      	str	r0, [r4, #0]
 8013a38:	4629      	mov	r1, r5
 8013a3a:	4630      	mov	r0, r6
 8013a3c:	f000 faca 	bl	8013fd4 <_sbrk_r>
 8013a40:	1c43      	adds	r3, r0, #1
 8013a42:	d124      	bne.n	8013a8e <_malloc_r+0x92>
 8013a44:	230c      	movs	r3, #12
 8013a46:	6033      	str	r3, [r6, #0]
 8013a48:	4630      	mov	r0, r6
 8013a4a:	f000 fb99 	bl	8014180 <__malloc_unlock>
 8013a4e:	e7e4      	b.n	8013a1a <_malloc_r+0x1e>
 8013a50:	680b      	ldr	r3, [r1, #0]
 8013a52:	1b5b      	subs	r3, r3, r5
 8013a54:	d418      	bmi.n	8013a88 <_malloc_r+0x8c>
 8013a56:	2b0b      	cmp	r3, #11
 8013a58:	d90f      	bls.n	8013a7a <_malloc_r+0x7e>
 8013a5a:	600b      	str	r3, [r1, #0]
 8013a5c:	50cd      	str	r5, [r1, r3]
 8013a5e:	18cc      	adds	r4, r1, r3
 8013a60:	4630      	mov	r0, r6
 8013a62:	f000 fb8d 	bl	8014180 <__malloc_unlock>
 8013a66:	f104 000b 	add.w	r0, r4, #11
 8013a6a:	1d23      	adds	r3, r4, #4
 8013a6c:	f020 0007 	bic.w	r0, r0, #7
 8013a70:	1ac3      	subs	r3, r0, r3
 8013a72:	d0d3      	beq.n	8013a1c <_malloc_r+0x20>
 8013a74:	425a      	negs	r2, r3
 8013a76:	50e2      	str	r2, [r4, r3]
 8013a78:	e7d0      	b.n	8013a1c <_malloc_r+0x20>
 8013a7a:	428c      	cmp	r4, r1
 8013a7c:	684b      	ldr	r3, [r1, #4]
 8013a7e:	bf16      	itet	ne
 8013a80:	6063      	strne	r3, [r4, #4]
 8013a82:	6013      	streq	r3, [r2, #0]
 8013a84:	460c      	movne	r4, r1
 8013a86:	e7eb      	b.n	8013a60 <_malloc_r+0x64>
 8013a88:	460c      	mov	r4, r1
 8013a8a:	6849      	ldr	r1, [r1, #4]
 8013a8c:	e7cc      	b.n	8013a28 <_malloc_r+0x2c>
 8013a8e:	1cc4      	adds	r4, r0, #3
 8013a90:	f024 0403 	bic.w	r4, r4, #3
 8013a94:	42a0      	cmp	r0, r4
 8013a96:	d005      	beq.n	8013aa4 <_malloc_r+0xa8>
 8013a98:	1a21      	subs	r1, r4, r0
 8013a9a:	4630      	mov	r0, r6
 8013a9c:	f000 fa9a 	bl	8013fd4 <_sbrk_r>
 8013aa0:	3001      	adds	r0, #1
 8013aa2:	d0cf      	beq.n	8013a44 <_malloc_r+0x48>
 8013aa4:	6025      	str	r5, [r4, #0]
 8013aa6:	e7db      	b.n	8013a60 <_malloc_r+0x64>
 8013aa8:	2000215c 	.word	0x2000215c
 8013aac:	20002160 	.word	0x20002160

08013ab0 <__ssputs_r>:
 8013ab0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8013ab4:	688e      	ldr	r6, [r1, #8]
 8013ab6:	429e      	cmp	r6, r3
 8013ab8:	4682      	mov	sl, r0
 8013aba:	460c      	mov	r4, r1
 8013abc:	4690      	mov	r8, r2
 8013abe:	4699      	mov	r9, r3
 8013ac0:	d837      	bhi.n	8013b32 <__ssputs_r+0x82>
 8013ac2:	898a      	ldrh	r2, [r1, #12]
 8013ac4:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8013ac8:	d031      	beq.n	8013b2e <__ssputs_r+0x7e>
 8013aca:	6825      	ldr	r5, [r4, #0]
 8013acc:	6909      	ldr	r1, [r1, #16]
 8013ace:	1a6f      	subs	r7, r5, r1
 8013ad0:	6965      	ldr	r5, [r4, #20]
 8013ad2:	2302      	movs	r3, #2
 8013ad4:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8013ad8:	fb95 f5f3 	sdiv	r5, r5, r3
 8013adc:	f109 0301 	add.w	r3, r9, #1
 8013ae0:	443b      	add	r3, r7
 8013ae2:	429d      	cmp	r5, r3
 8013ae4:	bf38      	it	cc
 8013ae6:	461d      	movcc	r5, r3
 8013ae8:	0553      	lsls	r3, r2, #21
 8013aea:	d530      	bpl.n	8013b4e <__ssputs_r+0x9e>
 8013aec:	4629      	mov	r1, r5
 8013aee:	f7ff ff85 	bl	80139fc <_malloc_r>
 8013af2:	4606      	mov	r6, r0
 8013af4:	b950      	cbnz	r0, 8013b0c <__ssputs_r+0x5c>
 8013af6:	230c      	movs	r3, #12
 8013af8:	f8ca 3000 	str.w	r3, [sl]
 8013afc:	89a3      	ldrh	r3, [r4, #12]
 8013afe:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8013b02:	81a3      	strh	r3, [r4, #12]
 8013b04:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8013b08:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8013b0c:	463a      	mov	r2, r7
 8013b0e:	6921      	ldr	r1, [r4, #16]
 8013b10:	f7ff fc32 	bl	8013378 <memcpy>
 8013b14:	89a3      	ldrh	r3, [r4, #12]
 8013b16:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8013b1a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8013b1e:	81a3      	strh	r3, [r4, #12]
 8013b20:	6126      	str	r6, [r4, #16]
 8013b22:	6165      	str	r5, [r4, #20]
 8013b24:	443e      	add	r6, r7
 8013b26:	1bed      	subs	r5, r5, r7
 8013b28:	6026      	str	r6, [r4, #0]
 8013b2a:	60a5      	str	r5, [r4, #8]
 8013b2c:	464e      	mov	r6, r9
 8013b2e:	454e      	cmp	r6, r9
 8013b30:	d900      	bls.n	8013b34 <__ssputs_r+0x84>
 8013b32:	464e      	mov	r6, r9
 8013b34:	4632      	mov	r2, r6
 8013b36:	4641      	mov	r1, r8
 8013b38:	6820      	ldr	r0, [r4, #0]
 8013b3a:	f000 fb07 	bl	801414c <memmove>
 8013b3e:	68a3      	ldr	r3, [r4, #8]
 8013b40:	1b9b      	subs	r3, r3, r6
 8013b42:	60a3      	str	r3, [r4, #8]
 8013b44:	6823      	ldr	r3, [r4, #0]
 8013b46:	441e      	add	r6, r3
 8013b48:	6026      	str	r6, [r4, #0]
 8013b4a:	2000      	movs	r0, #0
 8013b4c:	e7dc      	b.n	8013b08 <__ssputs_r+0x58>
 8013b4e:	462a      	mov	r2, r5
 8013b50:	f000 fb17 	bl	8014182 <_realloc_r>
 8013b54:	4606      	mov	r6, r0
 8013b56:	2800      	cmp	r0, #0
 8013b58:	d1e2      	bne.n	8013b20 <__ssputs_r+0x70>
 8013b5a:	6921      	ldr	r1, [r4, #16]
 8013b5c:	4650      	mov	r0, sl
 8013b5e:	f7ff feff 	bl	8013960 <_free_r>
 8013b62:	e7c8      	b.n	8013af6 <__ssputs_r+0x46>

08013b64 <_svfiprintf_r>:
 8013b64:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8013b68:	461d      	mov	r5, r3
 8013b6a:	898b      	ldrh	r3, [r1, #12]
 8013b6c:	061f      	lsls	r7, r3, #24
 8013b6e:	b09d      	sub	sp, #116	; 0x74
 8013b70:	4680      	mov	r8, r0
 8013b72:	460c      	mov	r4, r1
 8013b74:	4616      	mov	r6, r2
 8013b76:	d50f      	bpl.n	8013b98 <_svfiprintf_r+0x34>
 8013b78:	690b      	ldr	r3, [r1, #16]
 8013b7a:	b96b      	cbnz	r3, 8013b98 <_svfiprintf_r+0x34>
 8013b7c:	2140      	movs	r1, #64	; 0x40
 8013b7e:	f7ff ff3d 	bl	80139fc <_malloc_r>
 8013b82:	6020      	str	r0, [r4, #0]
 8013b84:	6120      	str	r0, [r4, #16]
 8013b86:	b928      	cbnz	r0, 8013b94 <_svfiprintf_r+0x30>
 8013b88:	230c      	movs	r3, #12
 8013b8a:	f8c8 3000 	str.w	r3, [r8]
 8013b8e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8013b92:	e0c8      	b.n	8013d26 <_svfiprintf_r+0x1c2>
 8013b94:	2340      	movs	r3, #64	; 0x40
 8013b96:	6163      	str	r3, [r4, #20]
 8013b98:	2300      	movs	r3, #0
 8013b9a:	9309      	str	r3, [sp, #36]	; 0x24
 8013b9c:	2320      	movs	r3, #32
 8013b9e:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8013ba2:	2330      	movs	r3, #48	; 0x30
 8013ba4:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8013ba8:	9503      	str	r5, [sp, #12]
 8013baa:	f04f 0b01 	mov.w	fp, #1
 8013bae:	4637      	mov	r7, r6
 8013bb0:	463d      	mov	r5, r7
 8013bb2:	f815 3b01 	ldrb.w	r3, [r5], #1
 8013bb6:	b10b      	cbz	r3, 8013bbc <_svfiprintf_r+0x58>
 8013bb8:	2b25      	cmp	r3, #37	; 0x25
 8013bba:	d13e      	bne.n	8013c3a <_svfiprintf_r+0xd6>
 8013bbc:	ebb7 0a06 	subs.w	sl, r7, r6
 8013bc0:	d00b      	beq.n	8013bda <_svfiprintf_r+0x76>
 8013bc2:	4653      	mov	r3, sl
 8013bc4:	4632      	mov	r2, r6
 8013bc6:	4621      	mov	r1, r4
 8013bc8:	4640      	mov	r0, r8
 8013bca:	f7ff ff71 	bl	8013ab0 <__ssputs_r>
 8013bce:	3001      	adds	r0, #1
 8013bd0:	f000 80a4 	beq.w	8013d1c <_svfiprintf_r+0x1b8>
 8013bd4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8013bd6:	4453      	add	r3, sl
 8013bd8:	9309      	str	r3, [sp, #36]	; 0x24
 8013bda:	783b      	ldrb	r3, [r7, #0]
 8013bdc:	2b00      	cmp	r3, #0
 8013bde:	f000 809d 	beq.w	8013d1c <_svfiprintf_r+0x1b8>
 8013be2:	2300      	movs	r3, #0
 8013be4:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8013be8:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8013bec:	9304      	str	r3, [sp, #16]
 8013bee:	9307      	str	r3, [sp, #28]
 8013bf0:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8013bf4:	931a      	str	r3, [sp, #104]	; 0x68
 8013bf6:	462f      	mov	r7, r5
 8013bf8:	2205      	movs	r2, #5
 8013bfa:	f817 1b01 	ldrb.w	r1, [r7], #1
 8013bfe:	4850      	ldr	r0, [pc, #320]	; (8013d40 <_svfiprintf_r+0x1dc>)
 8013c00:	f7ec fb16 	bl	8000230 <memchr>
 8013c04:	9b04      	ldr	r3, [sp, #16]
 8013c06:	b9d0      	cbnz	r0, 8013c3e <_svfiprintf_r+0xda>
 8013c08:	06d9      	lsls	r1, r3, #27
 8013c0a:	bf44      	itt	mi
 8013c0c:	2220      	movmi	r2, #32
 8013c0e:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8013c12:	071a      	lsls	r2, r3, #28
 8013c14:	bf44      	itt	mi
 8013c16:	222b      	movmi	r2, #43	; 0x2b
 8013c18:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8013c1c:	782a      	ldrb	r2, [r5, #0]
 8013c1e:	2a2a      	cmp	r2, #42	; 0x2a
 8013c20:	d015      	beq.n	8013c4e <_svfiprintf_r+0xea>
 8013c22:	9a07      	ldr	r2, [sp, #28]
 8013c24:	462f      	mov	r7, r5
 8013c26:	2000      	movs	r0, #0
 8013c28:	250a      	movs	r5, #10
 8013c2a:	4639      	mov	r1, r7
 8013c2c:	f811 3b01 	ldrb.w	r3, [r1], #1
 8013c30:	3b30      	subs	r3, #48	; 0x30
 8013c32:	2b09      	cmp	r3, #9
 8013c34:	d94d      	bls.n	8013cd2 <_svfiprintf_r+0x16e>
 8013c36:	b1b8      	cbz	r0, 8013c68 <_svfiprintf_r+0x104>
 8013c38:	e00f      	b.n	8013c5a <_svfiprintf_r+0xf6>
 8013c3a:	462f      	mov	r7, r5
 8013c3c:	e7b8      	b.n	8013bb0 <_svfiprintf_r+0x4c>
 8013c3e:	4a40      	ldr	r2, [pc, #256]	; (8013d40 <_svfiprintf_r+0x1dc>)
 8013c40:	1a80      	subs	r0, r0, r2
 8013c42:	fa0b f000 	lsl.w	r0, fp, r0
 8013c46:	4318      	orrs	r0, r3
 8013c48:	9004      	str	r0, [sp, #16]
 8013c4a:	463d      	mov	r5, r7
 8013c4c:	e7d3      	b.n	8013bf6 <_svfiprintf_r+0x92>
 8013c4e:	9a03      	ldr	r2, [sp, #12]
 8013c50:	1d11      	adds	r1, r2, #4
 8013c52:	6812      	ldr	r2, [r2, #0]
 8013c54:	9103      	str	r1, [sp, #12]
 8013c56:	2a00      	cmp	r2, #0
 8013c58:	db01      	blt.n	8013c5e <_svfiprintf_r+0xfa>
 8013c5a:	9207      	str	r2, [sp, #28]
 8013c5c:	e004      	b.n	8013c68 <_svfiprintf_r+0x104>
 8013c5e:	4252      	negs	r2, r2
 8013c60:	f043 0302 	orr.w	r3, r3, #2
 8013c64:	9207      	str	r2, [sp, #28]
 8013c66:	9304      	str	r3, [sp, #16]
 8013c68:	783b      	ldrb	r3, [r7, #0]
 8013c6a:	2b2e      	cmp	r3, #46	; 0x2e
 8013c6c:	d10c      	bne.n	8013c88 <_svfiprintf_r+0x124>
 8013c6e:	787b      	ldrb	r3, [r7, #1]
 8013c70:	2b2a      	cmp	r3, #42	; 0x2a
 8013c72:	d133      	bne.n	8013cdc <_svfiprintf_r+0x178>
 8013c74:	9b03      	ldr	r3, [sp, #12]
 8013c76:	1d1a      	adds	r2, r3, #4
 8013c78:	681b      	ldr	r3, [r3, #0]
 8013c7a:	9203      	str	r2, [sp, #12]
 8013c7c:	2b00      	cmp	r3, #0
 8013c7e:	bfb8      	it	lt
 8013c80:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 8013c84:	3702      	adds	r7, #2
 8013c86:	9305      	str	r3, [sp, #20]
 8013c88:	4d2e      	ldr	r5, [pc, #184]	; (8013d44 <_svfiprintf_r+0x1e0>)
 8013c8a:	7839      	ldrb	r1, [r7, #0]
 8013c8c:	2203      	movs	r2, #3
 8013c8e:	4628      	mov	r0, r5
 8013c90:	f7ec face 	bl	8000230 <memchr>
 8013c94:	b138      	cbz	r0, 8013ca6 <_svfiprintf_r+0x142>
 8013c96:	2340      	movs	r3, #64	; 0x40
 8013c98:	1b40      	subs	r0, r0, r5
 8013c9a:	fa03 f000 	lsl.w	r0, r3, r0
 8013c9e:	9b04      	ldr	r3, [sp, #16]
 8013ca0:	4303      	orrs	r3, r0
 8013ca2:	3701      	adds	r7, #1
 8013ca4:	9304      	str	r3, [sp, #16]
 8013ca6:	7839      	ldrb	r1, [r7, #0]
 8013ca8:	4827      	ldr	r0, [pc, #156]	; (8013d48 <_svfiprintf_r+0x1e4>)
 8013caa:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8013cae:	2206      	movs	r2, #6
 8013cb0:	1c7e      	adds	r6, r7, #1
 8013cb2:	f7ec fabd 	bl	8000230 <memchr>
 8013cb6:	2800      	cmp	r0, #0
 8013cb8:	d038      	beq.n	8013d2c <_svfiprintf_r+0x1c8>
 8013cba:	4b24      	ldr	r3, [pc, #144]	; (8013d4c <_svfiprintf_r+0x1e8>)
 8013cbc:	bb13      	cbnz	r3, 8013d04 <_svfiprintf_r+0x1a0>
 8013cbe:	9b03      	ldr	r3, [sp, #12]
 8013cc0:	3307      	adds	r3, #7
 8013cc2:	f023 0307 	bic.w	r3, r3, #7
 8013cc6:	3308      	adds	r3, #8
 8013cc8:	9303      	str	r3, [sp, #12]
 8013cca:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8013ccc:	444b      	add	r3, r9
 8013cce:	9309      	str	r3, [sp, #36]	; 0x24
 8013cd0:	e76d      	b.n	8013bae <_svfiprintf_r+0x4a>
 8013cd2:	fb05 3202 	mla	r2, r5, r2, r3
 8013cd6:	2001      	movs	r0, #1
 8013cd8:	460f      	mov	r7, r1
 8013cda:	e7a6      	b.n	8013c2a <_svfiprintf_r+0xc6>
 8013cdc:	2300      	movs	r3, #0
 8013cde:	3701      	adds	r7, #1
 8013ce0:	9305      	str	r3, [sp, #20]
 8013ce2:	4619      	mov	r1, r3
 8013ce4:	250a      	movs	r5, #10
 8013ce6:	4638      	mov	r0, r7
 8013ce8:	f810 2b01 	ldrb.w	r2, [r0], #1
 8013cec:	3a30      	subs	r2, #48	; 0x30
 8013cee:	2a09      	cmp	r2, #9
 8013cf0:	d903      	bls.n	8013cfa <_svfiprintf_r+0x196>
 8013cf2:	2b00      	cmp	r3, #0
 8013cf4:	d0c8      	beq.n	8013c88 <_svfiprintf_r+0x124>
 8013cf6:	9105      	str	r1, [sp, #20]
 8013cf8:	e7c6      	b.n	8013c88 <_svfiprintf_r+0x124>
 8013cfa:	fb05 2101 	mla	r1, r5, r1, r2
 8013cfe:	2301      	movs	r3, #1
 8013d00:	4607      	mov	r7, r0
 8013d02:	e7f0      	b.n	8013ce6 <_svfiprintf_r+0x182>
 8013d04:	ab03      	add	r3, sp, #12
 8013d06:	9300      	str	r3, [sp, #0]
 8013d08:	4622      	mov	r2, r4
 8013d0a:	4b11      	ldr	r3, [pc, #68]	; (8013d50 <_svfiprintf_r+0x1ec>)
 8013d0c:	a904      	add	r1, sp, #16
 8013d0e:	4640      	mov	r0, r8
 8013d10:	f7fd fdb0 	bl	8011874 <_printf_float>
 8013d14:	f1b0 3fff 	cmp.w	r0, #4294967295	; 0xffffffff
 8013d18:	4681      	mov	r9, r0
 8013d1a:	d1d6      	bne.n	8013cca <_svfiprintf_r+0x166>
 8013d1c:	89a3      	ldrh	r3, [r4, #12]
 8013d1e:	065b      	lsls	r3, r3, #25
 8013d20:	f53f af35 	bmi.w	8013b8e <_svfiprintf_r+0x2a>
 8013d24:	9809      	ldr	r0, [sp, #36]	; 0x24
 8013d26:	b01d      	add	sp, #116	; 0x74
 8013d28:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8013d2c:	ab03      	add	r3, sp, #12
 8013d2e:	9300      	str	r3, [sp, #0]
 8013d30:	4622      	mov	r2, r4
 8013d32:	4b07      	ldr	r3, [pc, #28]	; (8013d50 <_svfiprintf_r+0x1ec>)
 8013d34:	a904      	add	r1, sp, #16
 8013d36:	4640      	mov	r0, r8
 8013d38:	f7fe f852 	bl	8011de0 <_printf_i>
 8013d3c:	e7ea      	b.n	8013d14 <_svfiprintf_r+0x1b0>
 8013d3e:	bf00      	nop
 8013d40:	08016b1c 	.word	0x08016b1c
 8013d44:	08016b22 	.word	0x08016b22
 8013d48:	08016b26 	.word	0x08016b26
 8013d4c:	08011875 	.word	0x08011875
 8013d50:	08013ab1 	.word	0x08013ab1

08013d54 <__sfputc_r>:
 8013d54:	6893      	ldr	r3, [r2, #8]
 8013d56:	3b01      	subs	r3, #1
 8013d58:	2b00      	cmp	r3, #0
 8013d5a:	b410      	push	{r4}
 8013d5c:	6093      	str	r3, [r2, #8]
 8013d5e:	da08      	bge.n	8013d72 <__sfputc_r+0x1e>
 8013d60:	6994      	ldr	r4, [r2, #24]
 8013d62:	42a3      	cmp	r3, r4
 8013d64:	db01      	blt.n	8013d6a <__sfputc_r+0x16>
 8013d66:	290a      	cmp	r1, #10
 8013d68:	d103      	bne.n	8013d72 <__sfputc_r+0x1e>
 8013d6a:	f85d 4b04 	ldr.w	r4, [sp], #4
 8013d6e:	f7fe ba09 	b.w	8012184 <__swbuf_r>
 8013d72:	6813      	ldr	r3, [r2, #0]
 8013d74:	1c58      	adds	r0, r3, #1
 8013d76:	6010      	str	r0, [r2, #0]
 8013d78:	7019      	strb	r1, [r3, #0]
 8013d7a:	4608      	mov	r0, r1
 8013d7c:	f85d 4b04 	ldr.w	r4, [sp], #4
 8013d80:	4770      	bx	lr

08013d82 <__sfputs_r>:
 8013d82:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8013d84:	4606      	mov	r6, r0
 8013d86:	460f      	mov	r7, r1
 8013d88:	4614      	mov	r4, r2
 8013d8a:	18d5      	adds	r5, r2, r3
 8013d8c:	42ac      	cmp	r4, r5
 8013d8e:	d101      	bne.n	8013d94 <__sfputs_r+0x12>
 8013d90:	2000      	movs	r0, #0
 8013d92:	e007      	b.n	8013da4 <__sfputs_r+0x22>
 8013d94:	463a      	mov	r2, r7
 8013d96:	f814 1b01 	ldrb.w	r1, [r4], #1
 8013d9a:	4630      	mov	r0, r6
 8013d9c:	f7ff ffda 	bl	8013d54 <__sfputc_r>
 8013da0:	1c43      	adds	r3, r0, #1
 8013da2:	d1f3      	bne.n	8013d8c <__sfputs_r+0xa>
 8013da4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08013da8 <_vfiprintf_r>:
 8013da8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8013dac:	460c      	mov	r4, r1
 8013dae:	b09d      	sub	sp, #116	; 0x74
 8013db0:	4617      	mov	r7, r2
 8013db2:	461d      	mov	r5, r3
 8013db4:	4606      	mov	r6, r0
 8013db6:	b118      	cbz	r0, 8013dc0 <_vfiprintf_r+0x18>
 8013db8:	6983      	ldr	r3, [r0, #24]
 8013dba:	b90b      	cbnz	r3, 8013dc0 <_vfiprintf_r+0x18>
 8013dbc:	f7ff f9d8 	bl	8013170 <__sinit>
 8013dc0:	4b7c      	ldr	r3, [pc, #496]	; (8013fb4 <_vfiprintf_r+0x20c>)
 8013dc2:	429c      	cmp	r4, r3
 8013dc4:	d158      	bne.n	8013e78 <_vfiprintf_r+0xd0>
 8013dc6:	6874      	ldr	r4, [r6, #4]
 8013dc8:	89a3      	ldrh	r3, [r4, #12]
 8013dca:	0718      	lsls	r0, r3, #28
 8013dcc:	d55e      	bpl.n	8013e8c <_vfiprintf_r+0xe4>
 8013dce:	6923      	ldr	r3, [r4, #16]
 8013dd0:	2b00      	cmp	r3, #0
 8013dd2:	d05b      	beq.n	8013e8c <_vfiprintf_r+0xe4>
 8013dd4:	2300      	movs	r3, #0
 8013dd6:	9309      	str	r3, [sp, #36]	; 0x24
 8013dd8:	2320      	movs	r3, #32
 8013dda:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8013dde:	2330      	movs	r3, #48	; 0x30
 8013de0:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8013de4:	9503      	str	r5, [sp, #12]
 8013de6:	f04f 0b01 	mov.w	fp, #1
 8013dea:	46b8      	mov	r8, r7
 8013dec:	4645      	mov	r5, r8
 8013dee:	f815 3b01 	ldrb.w	r3, [r5], #1
 8013df2:	b10b      	cbz	r3, 8013df8 <_vfiprintf_r+0x50>
 8013df4:	2b25      	cmp	r3, #37	; 0x25
 8013df6:	d154      	bne.n	8013ea2 <_vfiprintf_r+0xfa>
 8013df8:	ebb8 0a07 	subs.w	sl, r8, r7
 8013dfc:	d00b      	beq.n	8013e16 <_vfiprintf_r+0x6e>
 8013dfe:	4653      	mov	r3, sl
 8013e00:	463a      	mov	r2, r7
 8013e02:	4621      	mov	r1, r4
 8013e04:	4630      	mov	r0, r6
 8013e06:	f7ff ffbc 	bl	8013d82 <__sfputs_r>
 8013e0a:	3001      	adds	r0, #1
 8013e0c:	f000 80c2 	beq.w	8013f94 <_vfiprintf_r+0x1ec>
 8013e10:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8013e12:	4453      	add	r3, sl
 8013e14:	9309      	str	r3, [sp, #36]	; 0x24
 8013e16:	f898 3000 	ldrb.w	r3, [r8]
 8013e1a:	2b00      	cmp	r3, #0
 8013e1c:	f000 80ba 	beq.w	8013f94 <_vfiprintf_r+0x1ec>
 8013e20:	2300      	movs	r3, #0
 8013e22:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8013e26:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8013e2a:	9304      	str	r3, [sp, #16]
 8013e2c:	9307      	str	r3, [sp, #28]
 8013e2e:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8013e32:	931a      	str	r3, [sp, #104]	; 0x68
 8013e34:	46a8      	mov	r8, r5
 8013e36:	2205      	movs	r2, #5
 8013e38:	f818 1b01 	ldrb.w	r1, [r8], #1
 8013e3c:	485e      	ldr	r0, [pc, #376]	; (8013fb8 <_vfiprintf_r+0x210>)
 8013e3e:	f7ec f9f7 	bl	8000230 <memchr>
 8013e42:	9b04      	ldr	r3, [sp, #16]
 8013e44:	bb78      	cbnz	r0, 8013ea6 <_vfiprintf_r+0xfe>
 8013e46:	06d9      	lsls	r1, r3, #27
 8013e48:	bf44      	itt	mi
 8013e4a:	2220      	movmi	r2, #32
 8013e4c:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8013e50:	071a      	lsls	r2, r3, #28
 8013e52:	bf44      	itt	mi
 8013e54:	222b      	movmi	r2, #43	; 0x2b
 8013e56:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8013e5a:	782a      	ldrb	r2, [r5, #0]
 8013e5c:	2a2a      	cmp	r2, #42	; 0x2a
 8013e5e:	d02a      	beq.n	8013eb6 <_vfiprintf_r+0x10e>
 8013e60:	9a07      	ldr	r2, [sp, #28]
 8013e62:	46a8      	mov	r8, r5
 8013e64:	2000      	movs	r0, #0
 8013e66:	250a      	movs	r5, #10
 8013e68:	4641      	mov	r1, r8
 8013e6a:	f811 3b01 	ldrb.w	r3, [r1], #1
 8013e6e:	3b30      	subs	r3, #48	; 0x30
 8013e70:	2b09      	cmp	r3, #9
 8013e72:	d969      	bls.n	8013f48 <_vfiprintf_r+0x1a0>
 8013e74:	b360      	cbz	r0, 8013ed0 <_vfiprintf_r+0x128>
 8013e76:	e024      	b.n	8013ec2 <_vfiprintf_r+0x11a>
 8013e78:	4b50      	ldr	r3, [pc, #320]	; (8013fbc <_vfiprintf_r+0x214>)
 8013e7a:	429c      	cmp	r4, r3
 8013e7c:	d101      	bne.n	8013e82 <_vfiprintf_r+0xda>
 8013e7e:	68b4      	ldr	r4, [r6, #8]
 8013e80:	e7a2      	b.n	8013dc8 <_vfiprintf_r+0x20>
 8013e82:	4b4f      	ldr	r3, [pc, #316]	; (8013fc0 <_vfiprintf_r+0x218>)
 8013e84:	429c      	cmp	r4, r3
 8013e86:	bf08      	it	eq
 8013e88:	68f4      	ldreq	r4, [r6, #12]
 8013e8a:	e79d      	b.n	8013dc8 <_vfiprintf_r+0x20>
 8013e8c:	4621      	mov	r1, r4
 8013e8e:	4630      	mov	r0, r6
 8013e90:	f7fe f9ca 	bl	8012228 <__swsetup_r>
 8013e94:	2800      	cmp	r0, #0
 8013e96:	d09d      	beq.n	8013dd4 <_vfiprintf_r+0x2c>
 8013e98:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8013e9c:	b01d      	add	sp, #116	; 0x74
 8013e9e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8013ea2:	46a8      	mov	r8, r5
 8013ea4:	e7a2      	b.n	8013dec <_vfiprintf_r+0x44>
 8013ea6:	4a44      	ldr	r2, [pc, #272]	; (8013fb8 <_vfiprintf_r+0x210>)
 8013ea8:	1a80      	subs	r0, r0, r2
 8013eaa:	fa0b f000 	lsl.w	r0, fp, r0
 8013eae:	4318      	orrs	r0, r3
 8013eb0:	9004      	str	r0, [sp, #16]
 8013eb2:	4645      	mov	r5, r8
 8013eb4:	e7be      	b.n	8013e34 <_vfiprintf_r+0x8c>
 8013eb6:	9a03      	ldr	r2, [sp, #12]
 8013eb8:	1d11      	adds	r1, r2, #4
 8013eba:	6812      	ldr	r2, [r2, #0]
 8013ebc:	9103      	str	r1, [sp, #12]
 8013ebe:	2a00      	cmp	r2, #0
 8013ec0:	db01      	blt.n	8013ec6 <_vfiprintf_r+0x11e>
 8013ec2:	9207      	str	r2, [sp, #28]
 8013ec4:	e004      	b.n	8013ed0 <_vfiprintf_r+0x128>
 8013ec6:	4252      	negs	r2, r2
 8013ec8:	f043 0302 	orr.w	r3, r3, #2
 8013ecc:	9207      	str	r2, [sp, #28]
 8013ece:	9304      	str	r3, [sp, #16]
 8013ed0:	f898 3000 	ldrb.w	r3, [r8]
 8013ed4:	2b2e      	cmp	r3, #46	; 0x2e
 8013ed6:	d10e      	bne.n	8013ef6 <_vfiprintf_r+0x14e>
 8013ed8:	f898 3001 	ldrb.w	r3, [r8, #1]
 8013edc:	2b2a      	cmp	r3, #42	; 0x2a
 8013ede:	d138      	bne.n	8013f52 <_vfiprintf_r+0x1aa>
 8013ee0:	9b03      	ldr	r3, [sp, #12]
 8013ee2:	1d1a      	adds	r2, r3, #4
 8013ee4:	681b      	ldr	r3, [r3, #0]
 8013ee6:	9203      	str	r2, [sp, #12]
 8013ee8:	2b00      	cmp	r3, #0
 8013eea:	bfb8      	it	lt
 8013eec:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 8013ef0:	f108 0802 	add.w	r8, r8, #2
 8013ef4:	9305      	str	r3, [sp, #20]
 8013ef6:	4d33      	ldr	r5, [pc, #204]	; (8013fc4 <_vfiprintf_r+0x21c>)
 8013ef8:	f898 1000 	ldrb.w	r1, [r8]
 8013efc:	2203      	movs	r2, #3
 8013efe:	4628      	mov	r0, r5
 8013f00:	f7ec f996 	bl	8000230 <memchr>
 8013f04:	b140      	cbz	r0, 8013f18 <_vfiprintf_r+0x170>
 8013f06:	2340      	movs	r3, #64	; 0x40
 8013f08:	1b40      	subs	r0, r0, r5
 8013f0a:	fa03 f000 	lsl.w	r0, r3, r0
 8013f0e:	9b04      	ldr	r3, [sp, #16]
 8013f10:	4303      	orrs	r3, r0
 8013f12:	f108 0801 	add.w	r8, r8, #1
 8013f16:	9304      	str	r3, [sp, #16]
 8013f18:	f898 1000 	ldrb.w	r1, [r8]
 8013f1c:	482a      	ldr	r0, [pc, #168]	; (8013fc8 <_vfiprintf_r+0x220>)
 8013f1e:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8013f22:	2206      	movs	r2, #6
 8013f24:	f108 0701 	add.w	r7, r8, #1
 8013f28:	f7ec f982 	bl	8000230 <memchr>
 8013f2c:	2800      	cmp	r0, #0
 8013f2e:	d037      	beq.n	8013fa0 <_vfiprintf_r+0x1f8>
 8013f30:	4b26      	ldr	r3, [pc, #152]	; (8013fcc <_vfiprintf_r+0x224>)
 8013f32:	bb1b      	cbnz	r3, 8013f7c <_vfiprintf_r+0x1d4>
 8013f34:	9b03      	ldr	r3, [sp, #12]
 8013f36:	3307      	adds	r3, #7
 8013f38:	f023 0307 	bic.w	r3, r3, #7
 8013f3c:	3308      	adds	r3, #8
 8013f3e:	9303      	str	r3, [sp, #12]
 8013f40:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8013f42:	444b      	add	r3, r9
 8013f44:	9309      	str	r3, [sp, #36]	; 0x24
 8013f46:	e750      	b.n	8013dea <_vfiprintf_r+0x42>
 8013f48:	fb05 3202 	mla	r2, r5, r2, r3
 8013f4c:	2001      	movs	r0, #1
 8013f4e:	4688      	mov	r8, r1
 8013f50:	e78a      	b.n	8013e68 <_vfiprintf_r+0xc0>
 8013f52:	2300      	movs	r3, #0
 8013f54:	f108 0801 	add.w	r8, r8, #1
 8013f58:	9305      	str	r3, [sp, #20]
 8013f5a:	4619      	mov	r1, r3
 8013f5c:	250a      	movs	r5, #10
 8013f5e:	4640      	mov	r0, r8
 8013f60:	f810 2b01 	ldrb.w	r2, [r0], #1
 8013f64:	3a30      	subs	r2, #48	; 0x30
 8013f66:	2a09      	cmp	r2, #9
 8013f68:	d903      	bls.n	8013f72 <_vfiprintf_r+0x1ca>
 8013f6a:	2b00      	cmp	r3, #0
 8013f6c:	d0c3      	beq.n	8013ef6 <_vfiprintf_r+0x14e>
 8013f6e:	9105      	str	r1, [sp, #20]
 8013f70:	e7c1      	b.n	8013ef6 <_vfiprintf_r+0x14e>
 8013f72:	fb05 2101 	mla	r1, r5, r1, r2
 8013f76:	2301      	movs	r3, #1
 8013f78:	4680      	mov	r8, r0
 8013f7a:	e7f0      	b.n	8013f5e <_vfiprintf_r+0x1b6>
 8013f7c:	ab03      	add	r3, sp, #12
 8013f7e:	9300      	str	r3, [sp, #0]
 8013f80:	4622      	mov	r2, r4
 8013f82:	4b13      	ldr	r3, [pc, #76]	; (8013fd0 <_vfiprintf_r+0x228>)
 8013f84:	a904      	add	r1, sp, #16
 8013f86:	4630      	mov	r0, r6
 8013f88:	f7fd fc74 	bl	8011874 <_printf_float>
 8013f8c:	f1b0 3fff 	cmp.w	r0, #4294967295	; 0xffffffff
 8013f90:	4681      	mov	r9, r0
 8013f92:	d1d5      	bne.n	8013f40 <_vfiprintf_r+0x198>
 8013f94:	89a3      	ldrh	r3, [r4, #12]
 8013f96:	065b      	lsls	r3, r3, #25
 8013f98:	f53f af7e 	bmi.w	8013e98 <_vfiprintf_r+0xf0>
 8013f9c:	9809      	ldr	r0, [sp, #36]	; 0x24
 8013f9e:	e77d      	b.n	8013e9c <_vfiprintf_r+0xf4>
 8013fa0:	ab03      	add	r3, sp, #12
 8013fa2:	9300      	str	r3, [sp, #0]
 8013fa4:	4622      	mov	r2, r4
 8013fa6:	4b0a      	ldr	r3, [pc, #40]	; (8013fd0 <_vfiprintf_r+0x228>)
 8013fa8:	a904      	add	r1, sp, #16
 8013faa:	4630      	mov	r0, r6
 8013fac:	f7fd ff18 	bl	8011de0 <_printf_i>
 8013fb0:	e7ec      	b.n	8013f8c <_vfiprintf_r+0x1e4>
 8013fb2:	bf00      	nop
 8013fb4:	080169e0 	.word	0x080169e0
 8013fb8:	08016b1c 	.word	0x08016b1c
 8013fbc:	08016a00 	.word	0x08016a00
 8013fc0:	080169c0 	.word	0x080169c0
 8013fc4:	08016b22 	.word	0x08016b22
 8013fc8:	08016b26 	.word	0x08016b26
 8013fcc:	08011875 	.word	0x08011875
 8013fd0:	08013d83 	.word	0x08013d83

08013fd4 <_sbrk_r>:
 8013fd4:	b538      	push	{r3, r4, r5, lr}
 8013fd6:	4c06      	ldr	r4, [pc, #24]	; (8013ff0 <_sbrk_r+0x1c>)
 8013fd8:	2300      	movs	r3, #0
 8013fda:	4605      	mov	r5, r0
 8013fdc:	4608      	mov	r0, r1
 8013fde:	6023      	str	r3, [r4, #0]
 8013fe0:	f7f4 fb5e 	bl	80086a0 <_sbrk>
 8013fe4:	1c43      	adds	r3, r0, #1
 8013fe6:	d102      	bne.n	8013fee <_sbrk_r+0x1a>
 8013fe8:	6823      	ldr	r3, [r4, #0]
 8013fea:	b103      	cbz	r3, 8013fee <_sbrk_r+0x1a>
 8013fec:	602b      	str	r3, [r5, #0]
 8013fee:	bd38      	pop	{r3, r4, r5, pc}
 8013ff0:	20002c7c 	.word	0x20002c7c

08013ff4 <__sread>:
 8013ff4:	b510      	push	{r4, lr}
 8013ff6:	460c      	mov	r4, r1
 8013ff8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8013ffc:	f000 f8e8 	bl	80141d0 <_read_r>
 8014000:	2800      	cmp	r0, #0
 8014002:	bfab      	itete	ge
 8014004:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8014006:	89a3      	ldrhlt	r3, [r4, #12]
 8014008:	181b      	addge	r3, r3, r0
 801400a:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 801400e:	bfac      	ite	ge
 8014010:	6563      	strge	r3, [r4, #84]	; 0x54
 8014012:	81a3      	strhlt	r3, [r4, #12]
 8014014:	bd10      	pop	{r4, pc}

08014016 <__swrite>:
 8014016:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801401a:	461f      	mov	r7, r3
 801401c:	898b      	ldrh	r3, [r1, #12]
 801401e:	05db      	lsls	r3, r3, #23
 8014020:	4605      	mov	r5, r0
 8014022:	460c      	mov	r4, r1
 8014024:	4616      	mov	r6, r2
 8014026:	d505      	bpl.n	8014034 <__swrite+0x1e>
 8014028:	2302      	movs	r3, #2
 801402a:	2200      	movs	r2, #0
 801402c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8014030:	f000 f868 	bl	8014104 <_lseek_r>
 8014034:	89a3      	ldrh	r3, [r4, #12]
 8014036:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 801403a:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 801403e:	81a3      	strh	r3, [r4, #12]
 8014040:	4632      	mov	r2, r6
 8014042:	463b      	mov	r3, r7
 8014044:	4628      	mov	r0, r5
 8014046:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 801404a:	f000 b817 	b.w	801407c <_write_r>

0801404e <__sseek>:
 801404e:	b510      	push	{r4, lr}
 8014050:	460c      	mov	r4, r1
 8014052:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8014056:	f000 f855 	bl	8014104 <_lseek_r>
 801405a:	1c43      	adds	r3, r0, #1
 801405c:	89a3      	ldrh	r3, [r4, #12]
 801405e:	bf15      	itete	ne
 8014060:	6560      	strne	r0, [r4, #84]	; 0x54
 8014062:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8014066:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 801406a:	81a3      	strheq	r3, [r4, #12]
 801406c:	bf18      	it	ne
 801406e:	81a3      	strhne	r3, [r4, #12]
 8014070:	bd10      	pop	{r4, pc}

08014072 <__sclose>:
 8014072:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8014076:	f000 b813 	b.w	80140a0 <_close_r>
	...

0801407c <_write_r>:
 801407c:	b538      	push	{r3, r4, r5, lr}
 801407e:	4c07      	ldr	r4, [pc, #28]	; (801409c <_write_r+0x20>)
 8014080:	4605      	mov	r5, r0
 8014082:	4608      	mov	r0, r1
 8014084:	4611      	mov	r1, r2
 8014086:	2200      	movs	r2, #0
 8014088:	6022      	str	r2, [r4, #0]
 801408a:	461a      	mov	r2, r3
 801408c:	f7f3 ffc5 	bl	800801a <_write>
 8014090:	1c43      	adds	r3, r0, #1
 8014092:	d102      	bne.n	801409a <_write_r+0x1e>
 8014094:	6823      	ldr	r3, [r4, #0]
 8014096:	b103      	cbz	r3, 801409a <_write_r+0x1e>
 8014098:	602b      	str	r3, [r5, #0]
 801409a:	bd38      	pop	{r3, r4, r5, pc}
 801409c:	20002c7c 	.word	0x20002c7c

080140a0 <_close_r>:
 80140a0:	b538      	push	{r3, r4, r5, lr}
 80140a2:	4c06      	ldr	r4, [pc, #24]	; (80140bc <_close_r+0x1c>)
 80140a4:	2300      	movs	r3, #0
 80140a6:	4605      	mov	r5, r0
 80140a8:	4608      	mov	r0, r1
 80140aa:	6023      	str	r3, [r4, #0]
 80140ac:	f7f4 fac3 	bl	8008636 <_close>
 80140b0:	1c43      	adds	r3, r0, #1
 80140b2:	d102      	bne.n	80140ba <_close_r+0x1a>
 80140b4:	6823      	ldr	r3, [r4, #0]
 80140b6:	b103      	cbz	r3, 80140ba <_close_r+0x1a>
 80140b8:	602b      	str	r3, [r5, #0]
 80140ba:	bd38      	pop	{r3, r4, r5, pc}
 80140bc:	20002c7c 	.word	0x20002c7c

080140c0 <_fstat_r>:
 80140c0:	b538      	push	{r3, r4, r5, lr}
 80140c2:	4c07      	ldr	r4, [pc, #28]	; (80140e0 <_fstat_r+0x20>)
 80140c4:	2300      	movs	r3, #0
 80140c6:	4605      	mov	r5, r0
 80140c8:	4608      	mov	r0, r1
 80140ca:	4611      	mov	r1, r2
 80140cc:	6023      	str	r3, [r4, #0]
 80140ce:	f7f4 fabe 	bl	800864e <_fstat>
 80140d2:	1c43      	adds	r3, r0, #1
 80140d4:	d102      	bne.n	80140dc <_fstat_r+0x1c>
 80140d6:	6823      	ldr	r3, [r4, #0]
 80140d8:	b103      	cbz	r3, 80140dc <_fstat_r+0x1c>
 80140da:	602b      	str	r3, [r5, #0]
 80140dc:	bd38      	pop	{r3, r4, r5, pc}
 80140de:	bf00      	nop
 80140e0:	20002c7c 	.word	0x20002c7c

080140e4 <_isatty_r>:
 80140e4:	b538      	push	{r3, r4, r5, lr}
 80140e6:	4c06      	ldr	r4, [pc, #24]	; (8014100 <_isatty_r+0x1c>)
 80140e8:	2300      	movs	r3, #0
 80140ea:	4605      	mov	r5, r0
 80140ec:	4608      	mov	r0, r1
 80140ee:	6023      	str	r3, [r4, #0]
 80140f0:	f7f4 fabd 	bl	800866e <_isatty>
 80140f4:	1c43      	adds	r3, r0, #1
 80140f6:	d102      	bne.n	80140fe <_isatty_r+0x1a>
 80140f8:	6823      	ldr	r3, [r4, #0]
 80140fa:	b103      	cbz	r3, 80140fe <_isatty_r+0x1a>
 80140fc:	602b      	str	r3, [r5, #0]
 80140fe:	bd38      	pop	{r3, r4, r5, pc}
 8014100:	20002c7c 	.word	0x20002c7c

08014104 <_lseek_r>:
 8014104:	b538      	push	{r3, r4, r5, lr}
 8014106:	4c07      	ldr	r4, [pc, #28]	; (8014124 <_lseek_r+0x20>)
 8014108:	4605      	mov	r5, r0
 801410a:	4608      	mov	r0, r1
 801410c:	4611      	mov	r1, r2
 801410e:	2200      	movs	r2, #0
 8014110:	6022      	str	r2, [r4, #0]
 8014112:	461a      	mov	r2, r3
 8014114:	f7f4 fab6 	bl	8008684 <_lseek>
 8014118:	1c43      	adds	r3, r0, #1
 801411a:	d102      	bne.n	8014122 <_lseek_r+0x1e>
 801411c:	6823      	ldr	r3, [r4, #0]
 801411e:	b103      	cbz	r3, 8014122 <_lseek_r+0x1e>
 8014120:	602b      	str	r3, [r5, #0]
 8014122:	bd38      	pop	{r3, r4, r5, pc}
 8014124:	20002c7c 	.word	0x20002c7c

08014128 <__ascii_mbtowc>:
 8014128:	b082      	sub	sp, #8
 801412a:	b901      	cbnz	r1, 801412e <__ascii_mbtowc+0x6>
 801412c:	a901      	add	r1, sp, #4
 801412e:	b142      	cbz	r2, 8014142 <__ascii_mbtowc+0x1a>
 8014130:	b14b      	cbz	r3, 8014146 <__ascii_mbtowc+0x1e>
 8014132:	7813      	ldrb	r3, [r2, #0]
 8014134:	600b      	str	r3, [r1, #0]
 8014136:	7812      	ldrb	r2, [r2, #0]
 8014138:	1c10      	adds	r0, r2, #0
 801413a:	bf18      	it	ne
 801413c:	2001      	movne	r0, #1
 801413e:	b002      	add	sp, #8
 8014140:	4770      	bx	lr
 8014142:	4610      	mov	r0, r2
 8014144:	e7fb      	b.n	801413e <__ascii_mbtowc+0x16>
 8014146:	f06f 0001 	mvn.w	r0, #1
 801414a:	e7f8      	b.n	801413e <__ascii_mbtowc+0x16>

0801414c <memmove>:
 801414c:	4288      	cmp	r0, r1
 801414e:	b510      	push	{r4, lr}
 8014150:	eb01 0302 	add.w	r3, r1, r2
 8014154:	d807      	bhi.n	8014166 <memmove+0x1a>
 8014156:	1e42      	subs	r2, r0, #1
 8014158:	4299      	cmp	r1, r3
 801415a:	d00a      	beq.n	8014172 <memmove+0x26>
 801415c:	f811 4b01 	ldrb.w	r4, [r1], #1
 8014160:	f802 4f01 	strb.w	r4, [r2, #1]!
 8014164:	e7f8      	b.n	8014158 <memmove+0xc>
 8014166:	4283      	cmp	r3, r0
 8014168:	d9f5      	bls.n	8014156 <memmove+0xa>
 801416a:	1881      	adds	r1, r0, r2
 801416c:	1ad2      	subs	r2, r2, r3
 801416e:	42d3      	cmn	r3, r2
 8014170:	d100      	bne.n	8014174 <memmove+0x28>
 8014172:	bd10      	pop	{r4, pc}
 8014174:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8014178:	f801 4d01 	strb.w	r4, [r1, #-1]!
 801417c:	e7f7      	b.n	801416e <memmove+0x22>

0801417e <__malloc_lock>:
 801417e:	4770      	bx	lr

08014180 <__malloc_unlock>:
 8014180:	4770      	bx	lr

08014182 <_realloc_r>:
 8014182:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8014184:	4607      	mov	r7, r0
 8014186:	4614      	mov	r4, r2
 8014188:	460e      	mov	r6, r1
 801418a:	b921      	cbnz	r1, 8014196 <_realloc_r+0x14>
 801418c:	4611      	mov	r1, r2
 801418e:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8014192:	f7ff bc33 	b.w	80139fc <_malloc_r>
 8014196:	b922      	cbnz	r2, 80141a2 <_realloc_r+0x20>
 8014198:	f7ff fbe2 	bl	8013960 <_free_r>
 801419c:	4625      	mov	r5, r4
 801419e:	4628      	mov	r0, r5
 80141a0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80141a2:	f000 f834 	bl	801420e <_malloc_usable_size_r>
 80141a6:	42a0      	cmp	r0, r4
 80141a8:	d20f      	bcs.n	80141ca <_realloc_r+0x48>
 80141aa:	4621      	mov	r1, r4
 80141ac:	4638      	mov	r0, r7
 80141ae:	f7ff fc25 	bl	80139fc <_malloc_r>
 80141b2:	4605      	mov	r5, r0
 80141b4:	2800      	cmp	r0, #0
 80141b6:	d0f2      	beq.n	801419e <_realloc_r+0x1c>
 80141b8:	4631      	mov	r1, r6
 80141ba:	4622      	mov	r2, r4
 80141bc:	f7ff f8dc 	bl	8013378 <memcpy>
 80141c0:	4631      	mov	r1, r6
 80141c2:	4638      	mov	r0, r7
 80141c4:	f7ff fbcc 	bl	8013960 <_free_r>
 80141c8:	e7e9      	b.n	801419e <_realloc_r+0x1c>
 80141ca:	4635      	mov	r5, r6
 80141cc:	e7e7      	b.n	801419e <_realloc_r+0x1c>
	...

080141d0 <_read_r>:
 80141d0:	b538      	push	{r3, r4, r5, lr}
 80141d2:	4c07      	ldr	r4, [pc, #28]	; (80141f0 <_read_r+0x20>)
 80141d4:	4605      	mov	r5, r0
 80141d6:	4608      	mov	r0, r1
 80141d8:	4611      	mov	r1, r2
 80141da:	2200      	movs	r2, #0
 80141dc:	6022      	str	r2, [r4, #0]
 80141de:	461a      	mov	r2, r3
 80141e0:	f7f4 fa0c 	bl	80085fc <_read>
 80141e4:	1c43      	adds	r3, r0, #1
 80141e6:	d102      	bne.n	80141ee <_read_r+0x1e>
 80141e8:	6823      	ldr	r3, [r4, #0]
 80141ea:	b103      	cbz	r3, 80141ee <_read_r+0x1e>
 80141ec:	602b      	str	r3, [r5, #0]
 80141ee:	bd38      	pop	{r3, r4, r5, pc}
 80141f0:	20002c7c 	.word	0x20002c7c

080141f4 <__ascii_wctomb>:
 80141f4:	b149      	cbz	r1, 801420a <__ascii_wctomb+0x16>
 80141f6:	2aff      	cmp	r2, #255	; 0xff
 80141f8:	bf85      	ittet	hi
 80141fa:	238a      	movhi	r3, #138	; 0x8a
 80141fc:	6003      	strhi	r3, [r0, #0]
 80141fe:	700a      	strbls	r2, [r1, #0]
 8014200:	f04f 30ff 	movhi.w	r0, #4294967295	; 0xffffffff
 8014204:	bf98      	it	ls
 8014206:	2001      	movls	r0, #1
 8014208:	4770      	bx	lr
 801420a:	4608      	mov	r0, r1
 801420c:	4770      	bx	lr

0801420e <_malloc_usable_size_r>:
 801420e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8014212:	1f18      	subs	r0, r3, #4
 8014214:	2b00      	cmp	r3, #0
 8014216:	bfbc      	itt	lt
 8014218:	580b      	ldrlt	r3, [r1, r0]
 801421a:	18c0      	addlt	r0, r0, r3
 801421c:	4770      	bx	lr
	...

08014220 <log10>:
 8014220:	b5f0      	push	{r4, r5, r6, r7, lr}
 8014222:	ed2d 8b02 	vpush	{d8}
 8014226:	b08b      	sub	sp, #44	; 0x2c
 8014228:	ec55 4b10 	vmov	r4, r5, d0
 801422c:	f000 f9e8 	bl	8014600 <__ieee754_log10>
 8014230:	4b36      	ldr	r3, [pc, #216]	; (801430c <log10+0xec>)
 8014232:	eeb0 8a40 	vmov.f32	s16, s0
 8014236:	eef0 8a60 	vmov.f32	s17, s1
 801423a:	f993 6000 	ldrsb.w	r6, [r3]
 801423e:	1c73      	adds	r3, r6, #1
 8014240:	d05c      	beq.n	80142fc <log10+0xdc>
 8014242:	4622      	mov	r2, r4
 8014244:	462b      	mov	r3, r5
 8014246:	4620      	mov	r0, r4
 8014248:	4629      	mov	r1, r5
 801424a:	f7ec fc97 	bl	8000b7c <__aeabi_dcmpun>
 801424e:	4607      	mov	r7, r0
 8014250:	2800      	cmp	r0, #0
 8014252:	d153      	bne.n	80142fc <log10+0xdc>
 8014254:	2200      	movs	r2, #0
 8014256:	2300      	movs	r3, #0
 8014258:	4620      	mov	r0, r4
 801425a:	4629      	mov	r1, r5
 801425c:	f7ec fc70 	bl	8000b40 <__aeabi_dcmple>
 8014260:	2800      	cmp	r0, #0
 8014262:	d04b      	beq.n	80142fc <log10+0xdc>
 8014264:	4b2a      	ldr	r3, [pc, #168]	; (8014310 <log10+0xf0>)
 8014266:	9301      	str	r3, [sp, #4]
 8014268:	9708      	str	r7, [sp, #32]
 801426a:	e9cd 4502 	strd	r4, r5, [sp, #8]
 801426e:	e9cd 4504 	strd	r4, r5, [sp, #16]
 8014272:	b9a6      	cbnz	r6, 801429e <log10+0x7e>
 8014274:	4b27      	ldr	r3, [pc, #156]	; (8014314 <log10+0xf4>)
 8014276:	f04f 4260 	mov.w	r2, #3758096384	; 0xe0000000
 801427a:	e9cd 2306 	strd	r2, r3, [sp, #24]
 801427e:	4620      	mov	r0, r4
 8014280:	2200      	movs	r2, #0
 8014282:	2300      	movs	r3, #0
 8014284:	4629      	mov	r1, r5
 8014286:	f7ec fc47 	bl	8000b18 <__aeabi_dcmpeq>
 801428a:	bb40      	cbnz	r0, 80142de <log10+0xbe>
 801428c:	2301      	movs	r3, #1
 801428e:	2e02      	cmp	r6, #2
 8014290:	9300      	str	r3, [sp, #0]
 8014292:	d119      	bne.n	80142c8 <log10+0xa8>
 8014294:	f7fd fa28 	bl	80116e8 <__errno>
 8014298:	2321      	movs	r3, #33	; 0x21
 801429a:	6003      	str	r3, [r0, #0]
 801429c:	e019      	b.n	80142d2 <log10+0xb2>
 801429e:	4b1e      	ldr	r3, [pc, #120]	; (8014318 <log10+0xf8>)
 80142a0:	2200      	movs	r2, #0
 80142a2:	e9cd 2306 	strd	r2, r3, [sp, #24]
 80142a6:	4620      	mov	r0, r4
 80142a8:	2200      	movs	r2, #0
 80142aa:	2300      	movs	r3, #0
 80142ac:	4629      	mov	r1, r5
 80142ae:	f7ec fc33 	bl	8000b18 <__aeabi_dcmpeq>
 80142b2:	2800      	cmp	r0, #0
 80142b4:	d0ea      	beq.n	801428c <log10+0x6c>
 80142b6:	2302      	movs	r3, #2
 80142b8:	429e      	cmp	r6, r3
 80142ba:	9300      	str	r3, [sp, #0]
 80142bc:	d111      	bne.n	80142e2 <log10+0xc2>
 80142be:	f7fd fa13 	bl	80116e8 <__errno>
 80142c2:	2322      	movs	r3, #34	; 0x22
 80142c4:	6003      	str	r3, [r0, #0]
 80142c6:	e011      	b.n	80142ec <log10+0xcc>
 80142c8:	4668      	mov	r0, sp
 80142ca:	f000 fff4 	bl	80152b6 <matherr>
 80142ce:	2800      	cmp	r0, #0
 80142d0:	d0e0      	beq.n	8014294 <log10+0x74>
 80142d2:	4812      	ldr	r0, [pc, #72]	; (801431c <log10+0xfc>)
 80142d4:	f000 fff4 	bl	80152c0 <nan>
 80142d8:	ed8d 0b06 	vstr	d0, [sp, #24]
 80142dc:	e006      	b.n	80142ec <log10+0xcc>
 80142de:	2302      	movs	r3, #2
 80142e0:	9300      	str	r3, [sp, #0]
 80142e2:	4668      	mov	r0, sp
 80142e4:	f000 ffe7 	bl	80152b6 <matherr>
 80142e8:	2800      	cmp	r0, #0
 80142ea:	d0e8      	beq.n	80142be <log10+0x9e>
 80142ec:	9b08      	ldr	r3, [sp, #32]
 80142ee:	b11b      	cbz	r3, 80142f8 <log10+0xd8>
 80142f0:	f7fd f9fa 	bl	80116e8 <__errno>
 80142f4:	9b08      	ldr	r3, [sp, #32]
 80142f6:	6003      	str	r3, [r0, #0]
 80142f8:	ed9d 8b06 	vldr	d8, [sp, #24]
 80142fc:	eeb0 0a48 	vmov.f32	s0, s16
 8014300:	eef0 0a68 	vmov.f32	s1, s17
 8014304:	b00b      	add	sp, #44	; 0x2c
 8014306:	ecbd 8b02 	vpop	{d8}
 801430a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801430c:	20002084 	.word	0x20002084
 8014310:	08016c38 	.word	0x08016c38
 8014314:	c7efffff 	.word	0xc7efffff
 8014318:	fff00000 	.word	0xfff00000
 801431c:	08016b21 	.word	0x08016b21

08014320 <pow>:
 8014320:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8014324:	ed2d 8b04 	vpush	{d8-d9}
 8014328:	f8df 92d0 	ldr.w	r9, [pc, #720]	; 80145fc <pow+0x2dc>
 801432c:	b08d      	sub	sp, #52	; 0x34
 801432e:	ec57 6b10 	vmov	r6, r7, d0
 8014332:	ec55 4b11 	vmov	r4, r5, d1
 8014336:	f000 f9ef 	bl	8014718 <__ieee754_pow>
 801433a:	f999 3000 	ldrsb.w	r3, [r9]
 801433e:	9300      	str	r3, [sp, #0]
 8014340:	3301      	adds	r3, #1
 8014342:	eeb0 8a40 	vmov.f32	s16, s0
 8014346:	eef0 8a60 	vmov.f32	s17, s1
 801434a:	46c8      	mov	r8, r9
 801434c:	d05f      	beq.n	801440e <pow+0xee>
 801434e:	4622      	mov	r2, r4
 8014350:	462b      	mov	r3, r5
 8014352:	4620      	mov	r0, r4
 8014354:	4629      	mov	r1, r5
 8014356:	f7ec fc11 	bl	8000b7c <__aeabi_dcmpun>
 801435a:	4683      	mov	fp, r0
 801435c:	2800      	cmp	r0, #0
 801435e:	d156      	bne.n	801440e <pow+0xee>
 8014360:	4632      	mov	r2, r6
 8014362:	463b      	mov	r3, r7
 8014364:	4630      	mov	r0, r6
 8014366:	4639      	mov	r1, r7
 8014368:	f7ec fc08 	bl	8000b7c <__aeabi_dcmpun>
 801436c:	9001      	str	r0, [sp, #4]
 801436e:	b1e8      	cbz	r0, 80143ac <pow+0x8c>
 8014370:	2200      	movs	r2, #0
 8014372:	2300      	movs	r3, #0
 8014374:	4620      	mov	r0, r4
 8014376:	4629      	mov	r1, r5
 8014378:	f7ec fbce 	bl	8000b18 <__aeabi_dcmpeq>
 801437c:	2800      	cmp	r0, #0
 801437e:	d046      	beq.n	801440e <pow+0xee>
 8014380:	2301      	movs	r3, #1
 8014382:	9302      	str	r3, [sp, #8]
 8014384:	4b96      	ldr	r3, [pc, #600]	; (80145e0 <pow+0x2c0>)
 8014386:	9303      	str	r3, [sp, #12]
 8014388:	4b96      	ldr	r3, [pc, #600]	; (80145e4 <pow+0x2c4>)
 801438a:	f8cd b028 	str.w	fp, [sp, #40]	; 0x28
 801438e:	2200      	movs	r2, #0
 8014390:	e9cd 2308 	strd	r2, r3, [sp, #32]
 8014394:	9b00      	ldr	r3, [sp, #0]
 8014396:	2b02      	cmp	r3, #2
 8014398:	e9cd 6704 	strd	r6, r7, [sp, #16]
 801439c:	e9cd 4506 	strd	r4, r5, [sp, #24]
 80143a0:	d033      	beq.n	801440a <pow+0xea>
 80143a2:	a802      	add	r0, sp, #8
 80143a4:	f000 ff87 	bl	80152b6 <matherr>
 80143a8:	bb48      	cbnz	r0, 80143fe <pow+0xde>
 80143aa:	e05d      	b.n	8014468 <pow+0x148>
 80143ac:	f04f 0a00 	mov.w	sl, #0
 80143b0:	f04f 0b00 	mov.w	fp, #0
 80143b4:	4652      	mov	r2, sl
 80143b6:	465b      	mov	r3, fp
 80143b8:	4630      	mov	r0, r6
 80143ba:	4639      	mov	r1, r7
 80143bc:	f7ec fbac 	bl	8000b18 <__aeabi_dcmpeq>
 80143c0:	ec4b ab19 	vmov	d9, sl, fp
 80143c4:	2800      	cmp	r0, #0
 80143c6:	d054      	beq.n	8014472 <pow+0x152>
 80143c8:	4652      	mov	r2, sl
 80143ca:	465b      	mov	r3, fp
 80143cc:	4620      	mov	r0, r4
 80143ce:	4629      	mov	r1, r5
 80143d0:	f7ec fba2 	bl	8000b18 <__aeabi_dcmpeq>
 80143d4:	4680      	mov	r8, r0
 80143d6:	b318      	cbz	r0, 8014420 <pow+0x100>
 80143d8:	2301      	movs	r3, #1
 80143da:	9302      	str	r3, [sp, #8]
 80143dc:	4b80      	ldr	r3, [pc, #512]	; (80145e0 <pow+0x2c0>)
 80143de:	9303      	str	r3, [sp, #12]
 80143e0:	9b01      	ldr	r3, [sp, #4]
 80143e2:	930a      	str	r3, [sp, #40]	; 0x28
 80143e4:	9b00      	ldr	r3, [sp, #0]
 80143e6:	e9cd 6704 	strd	r6, r7, [sp, #16]
 80143ea:	e9cd 4506 	strd	r4, r5, [sp, #24]
 80143ee:	e9cd ab08 	strd	sl, fp, [sp, #32]
 80143f2:	2b00      	cmp	r3, #0
 80143f4:	d0d5      	beq.n	80143a2 <pow+0x82>
 80143f6:	4b7b      	ldr	r3, [pc, #492]	; (80145e4 <pow+0x2c4>)
 80143f8:	2200      	movs	r2, #0
 80143fa:	e9cd 2308 	strd	r2, r3, [sp, #32]
 80143fe:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8014400:	b11b      	cbz	r3, 801440a <pow+0xea>
 8014402:	f7fd f971 	bl	80116e8 <__errno>
 8014406:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8014408:	6003      	str	r3, [r0, #0]
 801440a:	ed9d 8b08 	vldr	d8, [sp, #32]
 801440e:	eeb0 0a48 	vmov.f32	s0, s16
 8014412:	eef0 0a68 	vmov.f32	s1, s17
 8014416:	b00d      	add	sp, #52	; 0x34
 8014418:	ecbd 8b04 	vpop	{d8-d9}
 801441c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8014420:	ec45 4b10 	vmov	d0, r4, r5
 8014424:	f000 ff3f 	bl	80152a6 <finite>
 8014428:	2800      	cmp	r0, #0
 801442a:	d0f0      	beq.n	801440e <pow+0xee>
 801442c:	4652      	mov	r2, sl
 801442e:	465b      	mov	r3, fp
 8014430:	4620      	mov	r0, r4
 8014432:	4629      	mov	r1, r5
 8014434:	f7ec fb7a 	bl	8000b2c <__aeabi_dcmplt>
 8014438:	2800      	cmp	r0, #0
 801443a:	d0e8      	beq.n	801440e <pow+0xee>
 801443c:	2301      	movs	r3, #1
 801443e:	9302      	str	r3, [sp, #8]
 8014440:	4b67      	ldr	r3, [pc, #412]	; (80145e0 <pow+0x2c0>)
 8014442:	9303      	str	r3, [sp, #12]
 8014444:	f999 3000 	ldrsb.w	r3, [r9]
 8014448:	f8cd 8028 	str.w	r8, [sp, #40]	; 0x28
 801444c:	e9cd 6704 	strd	r6, r7, [sp, #16]
 8014450:	e9cd 4506 	strd	r4, r5, [sp, #24]
 8014454:	b913      	cbnz	r3, 801445c <pow+0x13c>
 8014456:	e9cd ab08 	strd	sl, fp, [sp, #32]
 801445a:	e7a2      	b.n	80143a2 <pow+0x82>
 801445c:	4962      	ldr	r1, [pc, #392]	; (80145e8 <pow+0x2c8>)
 801445e:	2000      	movs	r0, #0
 8014460:	e9cd 0108 	strd	r0, r1, [sp, #32]
 8014464:	2b02      	cmp	r3, #2
 8014466:	d19c      	bne.n	80143a2 <pow+0x82>
 8014468:	f7fd f93e 	bl	80116e8 <__errno>
 801446c:	2321      	movs	r3, #33	; 0x21
 801446e:	6003      	str	r3, [r0, #0]
 8014470:	e7c5      	b.n	80143fe <pow+0xde>
 8014472:	eeb0 0a48 	vmov.f32	s0, s16
 8014476:	eef0 0a68 	vmov.f32	s1, s17
 801447a:	f000 ff14 	bl	80152a6 <finite>
 801447e:	9000      	str	r0, [sp, #0]
 8014480:	2800      	cmp	r0, #0
 8014482:	f040 8081 	bne.w	8014588 <pow+0x268>
 8014486:	ec47 6b10 	vmov	d0, r6, r7
 801448a:	f000 ff0c 	bl	80152a6 <finite>
 801448e:	2800      	cmp	r0, #0
 8014490:	d07a      	beq.n	8014588 <pow+0x268>
 8014492:	ec45 4b10 	vmov	d0, r4, r5
 8014496:	f000 ff06 	bl	80152a6 <finite>
 801449a:	2800      	cmp	r0, #0
 801449c:	d074      	beq.n	8014588 <pow+0x268>
 801449e:	ec53 2b18 	vmov	r2, r3, d8
 80144a2:	ee18 0a10 	vmov	r0, s16
 80144a6:	4619      	mov	r1, r3
 80144a8:	f7ec fb68 	bl	8000b7c <__aeabi_dcmpun>
 80144ac:	f999 9000 	ldrsb.w	r9, [r9]
 80144b0:	4b4b      	ldr	r3, [pc, #300]	; (80145e0 <pow+0x2c0>)
 80144b2:	b1b0      	cbz	r0, 80144e2 <pow+0x1c2>
 80144b4:	2201      	movs	r2, #1
 80144b6:	e9cd 2302 	strd	r2, r3, [sp, #8]
 80144ba:	9b00      	ldr	r3, [sp, #0]
 80144bc:	930a      	str	r3, [sp, #40]	; 0x28
 80144be:	e9cd 6704 	strd	r6, r7, [sp, #16]
 80144c2:	e9cd 4506 	strd	r4, r5, [sp, #24]
 80144c6:	f1b9 0f00 	cmp.w	r9, #0
 80144ca:	d0c4      	beq.n	8014456 <pow+0x136>
 80144cc:	4652      	mov	r2, sl
 80144ce:	465b      	mov	r3, fp
 80144d0:	4650      	mov	r0, sl
 80144d2:	4659      	mov	r1, fp
 80144d4:	f7ec f9e2 	bl	800089c <__aeabi_ddiv>
 80144d8:	f1b9 0f02 	cmp.w	r9, #2
 80144dc:	e9cd 0108 	strd	r0, r1, [sp, #32]
 80144e0:	e7c1      	b.n	8014466 <pow+0x146>
 80144e2:	2203      	movs	r2, #3
 80144e4:	e9cd 2302 	strd	r2, r3, [sp, #8]
 80144e8:	900a      	str	r0, [sp, #40]	; 0x28
 80144ea:	4629      	mov	r1, r5
 80144ec:	4620      	mov	r0, r4
 80144ee:	2200      	movs	r2, #0
 80144f0:	4b3e      	ldr	r3, [pc, #248]	; (80145ec <pow+0x2cc>)
 80144f2:	e9cd 4506 	strd	r4, r5, [sp, #24]
 80144f6:	e9cd 6704 	strd	r6, r7, [sp, #16]
 80144fa:	f7ec f8a5 	bl	8000648 <__aeabi_dmul>
 80144fe:	4604      	mov	r4, r0
 8014500:	460d      	mov	r5, r1
 8014502:	f1b9 0f00 	cmp.w	r9, #0
 8014506:	d124      	bne.n	8014552 <pow+0x232>
 8014508:	4b39      	ldr	r3, [pc, #228]	; (80145f0 <pow+0x2d0>)
 801450a:	f04f 4260 	mov.w	r2, #3758096384	; 0xe0000000
 801450e:	e9cd 2308 	strd	r2, r3, [sp, #32]
 8014512:	4630      	mov	r0, r6
 8014514:	4652      	mov	r2, sl
 8014516:	465b      	mov	r3, fp
 8014518:	4639      	mov	r1, r7
 801451a:	f7ec fb07 	bl	8000b2c <__aeabi_dcmplt>
 801451e:	2800      	cmp	r0, #0
 8014520:	d056      	beq.n	80145d0 <pow+0x2b0>
 8014522:	ec45 4b10 	vmov	d0, r4, r5
 8014526:	f000 fed3 	bl	80152d0 <rint>
 801452a:	4622      	mov	r2, r4
 801452c:	462b      	mov	r3, r5
 801452e:	ec51 0b10 	vmov	r0, r1, d0
 8014532:	f7ec faf1 	bl	8000b18 <__aeabi_dcmpeq>
 8014536:	b920      	cbnz	r0, 8014542 <pow+0x222>
 8014538:	4b2e      	ldr	r3, [pc, #184]	; (80145f4 <pow+0x2d4>)
 801453a:	f04f 4260 	mov.w	r2, #3758096384	; 0xe0000000
 801453e:	e9cd 2308 	strd	r2, r3, [sp, #32]
 8014542:	f998 3000 	ldrsb.w	r3, [r8]
 8014546:	2b02      	cmp	r3, #2
 8014548:	d142      	bne.n	80145d0 <pow+0x2b0>
 801454a:	f7fd f8cd 	bl	80116e8 <__errno>
 801454e:	2322      	movs	r3, #34	; 0x22
 8014550:	e78d      	b.n	801446e <pow+0x14e>
 8014552:	4b29      	ldr	r3, [pc, #164]	; (80145f8 <pow+0x2d8>)
 8014554:	2200      	movs	r2, #0
 8014556:	e9cd 2308 	strd	r2, r3, [sp, #32]
 801455a:	4630      	mov	r0, r6
 801455c:	4652      	mov	r2, sl
 801455e:	465b      	mov	r3, fp
 8014560:	4639      	mov	r1, r7
 8014562:	f7ec fae3 	bl	8000b2c <__aeabi_dcmplt>
 8014566:	2800      	cmp	r0, #0
 8014568:	d0eb      	beq.n	8014542 <pow+0x222>
 801456a:	ec45 4b10 	vmov	d0, r4, r5
 801456e:	f000 feaf 	bl	80152d0 <rint>
 8014572:	4622      	mov	r2, r4
 8014574:	462b      	mov	r3, r5
 8014576:	ec51 0b10 	vmov	r0, r1, d0
 801457a:	f7ec facd 	bl	8000b18 <__aeabi_dcmpeq>
 801457e:	2800      	cmp	r0, #0
 8014580:	d1df      	bne.n	8014542 <pow+0x222>
 8014582:	2200      	movs	r2, #0
 8014584:	4b18      	ldr	r3, [pc, #96]	; (80145e8 <pow+0x2c8>)
 8014586:	e7da      	b.n	801453e <pow+0x21e>
 8014588:	2200      	movs	r2, #0
 801458a:	2300      	movs	r3, #0
 801458c:	ec51 0b18 	vmov	r0, r1, d8
 8014590:	f7ec fac2 	bl	8000b18 <__aeabi_dcmpeq>
 8014594:	2800      	cmp	r0, #0
 8014596:	f43f af3a 	beq.w	801440e <pow+0xee>
 801459a:	ec47 6b10 	vmov	d0, r6, r7
 801459e:	f000 fe82 	bl	80152a6 <finite>
 80145a2:	2800      	cmp	r0, #0
 80145a4:	f43f af33 	beq.w	801440e <pow+0xee>
 80145a8:	ec45 4b10 	vmov	d0, r4, r5
 80145ac:	f000 fe7b 	bl	80152a6 <finite>
 80145b0:	2800      	cmp	r0, #0
 80145b2:	f43f af2c 	beq.w	801440e <pow+0xee>
 80145b6:	2304      	movs	r3, #4
 80145b8:	9302      	str	r3, [sp, #8]
 80145ba:	4b09      	ldr	r3, [pc, #36]	; (80145e0 <pow+0x2c0>)
 80145bc:	9303      	str	r3, [sp, #12]
 80145be:	2300      	movs	r3, #0
 80145c0:	930a      	str	r3, [sp, #40]	; 0x28
 80145c2:	e9cd 6704 	strd	r6, r7, [sp, #16]
 80145c6:	e9cd 4506 	strd	r4, r5, [sp, #24]
 80145ca:	ed8d 9b08 	vstr	d9, [sp, #32]
 80145ce:	e7b8      	b.n	8014542 <pow+0x222>
 80145d0:	a802      	add	r0, sp, #8
 80145d2:	f000 fe70 	bl	80152b6 <matherr>
 80145d6:	2800      	cmp	r0, #0
 80145d8:	f47f af11 	bne.w	80143fe <pow+0xde>
 80145dc:	e7b5      	b.n	801454a <pow+0x22a>
 80145de:	bf00      	nop
 80145e0:	08016c3e 	.word	0x08016c3e
 80145e4:	3ff00000 	.word	0x3ff00000
 80145e8:	fff00000 	.word	0xfff00000
 80145ec:	3fe00000 	.word	0x3fe00000
 80145f0:	47efffff 	.word	0x47efffff
 80145f4:	c7efffff 	.word	0xc7efffff
 80145f8:	7ff00000 	.word	0x7ff00000
 80145fc:	20002084 	.word	0x20002084

08014600 <__ieee754_log10>:
 8014600:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8014604:	ec55 4b10 	vmov	r4, r5, d0
 8014608:	f5b5 1f80 	cmp.w	r5, #1048576	; 0x100000
 801460c:	462b      	mov	r3, r5
 801460e:	da2f      	bge.n	8014670 <__ieee754_log10+0x70>
 8014610:	f025 4200 	bic.w	r2, r5, #2147483648	; 0x80000000
 8014614:	4322      	orrs	r2, r4
 8014616:	d10a      	bne.n	801462e <__ieee754_log10+0x2e>
 8014618:	493b      	ldr	r1, [pc, #236]	; (8014708 <__ieee754_log10+0x108>)
 801461a:	2200      	movs	r2, #0
 801461c:	2300      	movs	r3, #0
 801461e:	2000      	movs	r0, #0
 8014620:	f7ec f93c 	bl	800089c <__aeabi_ddiv>
 8014624:	ec41 0b10 	vmov	d0, r0, r1
 8014628:	b003      	add	sp, #12
 801462a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801462e:	2d00      	cmp	r5, #0
 8014630:	da08      	bge.n	8014644 <__ieee754_log10+0x44>
 8014632:	ee10 2a10 	vmov	r2, s0
 8014636:	4620      	mov	r0, r4
 8014638:	4629      	mov	r1, r5
 801463a:	f7eb fe4d 	bl	80002d8 <__aeabi_dsub>
 801463e:	2200      	movs	r2, #0
 8014640:	2300      	movs	r3, #0
 8014642:	e7ed      	b.n	8014620 <__ieee754_log10+0x20>
 8014644:	2200      	movs	r2, #0
 8014646:	4b31      	ldr	r3, [pc, #196]	; (801470c <__ieee754_log10+0x10c>)
 8014648:	4629      	mov	r1, r5
 801464a:	ee10 0a10 	vmov	r0, s0
 801464e:	f7eb fffb 	bl	8000648 <__aeabi_dmul>
 8014652:	f06f 0235 	mvn.w	r2, #53	; 0x35
 8014656:	4604      	mov	r4, r0
 8014658:	460d      	mov	r5, r1
 801465a:	460b      	mov	r3, r1
 801465c:	492c      	ldr	r1, [pc, #176]	; (8014710 <__ieee754_log10+0x110>)
 801465e:	428b      	cmp	r3, r1
 8014660:	dd08      	ble.n	8014674 <__ieee754_log10+0x74>
 8014662:	4622      	mov	r2, r4
 8014664:	462b      	mov	r3, r5
 8014666:	4620      	mov	r0, r4
 8014668:	4629      	mov	r1, r5
 801466a:	f7eb fe37 	bl	80002dc <__adddf3>
 801466e:	e7d9      	b.n	8014624 <__ieee754_log10+0x24>
 8014670:	2200      	movs	r2, #0
 8014672:	e7f3      	b.n	801465c <__ieee754_log10+0x5c>
 8014674:	1518      	asrs	r0, r3, #20
 8014676:	f2a0 30ff 	subw	r0, r0, #1023	; 0x3ff
 801467a:	4410      	add	r0, r2
 801467c:	ea4f 79d0 	mov.w	r9, r0, lsr #31
 8014680:	4448      	add	r0, r9
 8014682:	f3c3 0813 	ubfx	r8, r3, #0, #20
 8014686:	f7eb ff75 	bl	8000574 <__aeabi_i2d>
 801468a:	f5c9 737f 	rsb	r3, r9, #1020	; 0x3fc
 801468e:	3303      	adds	r3, #3
 8014690:	ea48 5503 	orr.w	r5, r8, r3, lsl #20
 8014694:	ec45 4b10 	vmov	d0, r4, r5
 8014698:	4606      	mov	r6, r0
 801469a:	460f      	mov	r7, r1
 801469c:	f000 ff14 	bl	80154c8 <__ieee754_log>
 80146a0:	a313      	add	r3, pc, #76	; (adr r3, 80146f0 <__ieee754_log10+0xf0>)
 80146a2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80146a6:	4630      	mov	r0, r6
 80146a8:	4639      	mov	r1, r7
 80146aa:	ed8d 0b00 	vstr	d0, [sp]
 80146ae:	f7eb ffcb 	bl	8000648 <__aeabi_dmul>
 80146b2:	ed9d 0b00 	vldr	d0, [sp]
 80146b6:	4604      	mov	r4, r0
 80146b8:	460d      	mov	r5, r1
 80146ba:	a30f      	add	r3, pc, #60	; (adr r3, 80146f8 <__ieee754_log10+0xf8>)
 80146bc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80146c0:	ec51 0b10 	vmov	r0, r1, d0
 80146c4:	f7eb ffc0 	bl	8000648 <__aeabi_dmul>
 80146c8:	4602      	mov	r2, r0
 80146ca:	460b      	mov	r3, r1
 80146cc:	4620      	mov	r0, r4
 80146ce:	4629      	mov	r1, r5
 80146d0:	f7eb fe04 	bl	80002dc <__adddf3>
 80146d4:	a30a      	add	r3, pc, #40	; (adr r3, 8014700 <__ieee754_log10+0x100>)
 80146d6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80146da:	4604      	mov	r4, r0
 80146dc:	460d      	mov	r5, r1
 80146de:	4630      	mov	r0, r6
 80146e0:	4639      	mov	r1, r7
 80146e2:	f7eb ffb1 	bl	8000648 <__aeabi_dmul>
 80146e6:	4602      	mov	r2, r0
 80146e8:	460b      	mov	r3, r1
 80146ea:	4620      	mov	r0, r4
 80146ec:	4629      	mov	r1, r5
 80146ee:	e7bc      	b.n	801466a <__ieee754_log10+0x6a>
 80146f0:	11f12b36 	.word	0x11f12b36
 80146f4:	3d59fef3 	.word	0x3d59fef3
 80146f8:	1526e50e 	.word	0x1526e50e
 80146fc:	3fdbcb7b 	.word	0x3fdbcb7b
 8014700:	509f6000 	.word	0x509f6000
 8014704:	3fd34413 	.word	0x3fd34413
 8014708:	c3500000 	.word	0xc3500000
 801470c:	43500000 	.word	0x43500000
 8014710:	7fefffff 	.word	0x7fefffff
 8014714:	00000000 	.word	0x00000000

08014718 <__ieee754_pow>:
 8014718:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801471c:	b091      	sub	sp, #68	; 0x44
 801471e:	ed8d 1b00 	vstr	d1, [sp]
 8014722:	e9dd 2900 	ldrd	r2, r9, [sp]
 8014726:	f029 4800 	bic.w	r8, r9, #2147483648	; 0x80000000
 801472a:	ea58 0302 	orrs.w	r3, r8, r2
 801472e:	ec57 6b10 	vmov	r6, r7, d0
 8014732:	f000 84be 	beq.w	80150b2 <__ieee754_pow+0x99a>
 8014736:	4b7a      	ldr	r3, [pc, #488]	; (8014920 <__ieee754_pow+0x208>)
 8014738:	f027 4400 	bic.w	r4, r7, #2147483648	; 0x80000000
 801473c:	429c      	cmp	r4, r3
 801473e:	463d      	mov	r5, r7
 8014740:	ee10 aa10 	vmov	sl, s0
 8014744:	dc09      	bgt.n	801475a <__ieee754_pow+0x42>
 8014746:	d103      	bne.n	8014750 <__ieee754_pow+0x38>
 8014748:	b93e      	cbnz	r6, 801475a <__ieee754_pow+0x42>
 801474a:	45a0      	cmp	r8, r4
 801474c:	dc0d      	bgt.n	801476a <__ieee754_pow+0x52>
 801474e:	e001      	b.n	8014754 <__ieee754_pow+0x3c>
 8014750:	4598      	cmp	r8, r3
 8014752:	dc02      	bgt.n	801475a <__ieee754_pow+0x42>
 8014754:	4598      	cmp	r8, r3
 8014756:	d10e      	bne.n	8014776 <__ieee754_pow+0x5e>
 8014758:	b16a      	cbz	r2, 8014776 <__ieee754_pow+0x5e>
 801475a:	f104 4440 	add.w	r4, r4, #3221225472	; 0xc0000000
 801475e:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 8014762:	ea54 030a 	orrs.w	r3, r4, sl
 8014766:	f000 84a4 	beq.w	80150b2 <__ieee754_pow+0x99a>
 801476a:	486e      	ldr	r0, [pc, #440]	; (8014924 <__ieee754_pow+0x20c>)
 801476c:	b011      	add	sp, #68	; 0x44
 801476e:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8014772:	f000 bda5 	b.w	80152c0 <nan>
 8014776:	2d00      	cmp	r5, #0
 8014778:	da53      	bge.n	8014822 <__ieee754_pow+0x10a>
 801477a:	4b6b      	ldr	r3, [pc, #428]	; (8014928 <__ieee754_pow+0x210>)
 801477c:	4598      	cmp	r8, r3
 801477e:	dc4d      	bgt.n	801481c <__ieee754_pow+0x104>
 8014780:	f1a3 7354 	sub.w	r3, r3, #55574528	; 0x3500000
 8014784:	4598      	cmp	r8, r3
 8014786:	dd4c      	ble.n	8014822 <__ieee754_pow+0x10a>
 8014788:	ea4f 5328 	mov.w	r3, r8, asr #20
 801478c:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 8014790:	2b14      	cmp	r3, #20
 8014792:	dd26      	ble.n	80147e2 <__ieee754_pow+0xca>
 8014794:	f1c3 0334 	rsb	r3, r3, #52	; 0x34
 8014798:	fa22 f103 	lsr.w	r1, r2, r3
 801479c:	fa01 f303 	lsl.w	r3, r1, r3
 80147a0:	4293      	cmp	r3, r2
 80147a2:	d13e      	bne.n	8014822 <__ieee754_pow+0x10a>
 80147a4:	f001 0101 	and.w	r1, r1, #1
 80147a8:	f1c1 0b02 	rsb	fp, r1, #2
 80147ac:	2a00      	cmp	r2, #0
 80147ae:	d15b      	bne.n	8014868 <__ieee754_pow+0x150>
 80147b0:	4b5b      	ldr	r3, [pc, #364]	; (8014920 <__ieee754_pow+0x208>)
 80147b2:	4598      	cmp	r8, r3
 80147b4:	d124      	bne.n	8014800 <__ieee754_pow+0xe8>
 80147b6:	f104 4340 	add.w	r3, r4, #3221225472	; 0xc0000000
 80147ba:	f503 1380 	add.w	r3, r3, #1048576	; 0x100000
 80147be:	ea53 030a 	orrs.w	r3, r3, sl
 80147c2:	f000 8476 	beq.w	80150b2 <__ieee754_pow+0x99a>
 80147c6:	4b59      	ldr	r3, [pc, #356]	; (801492c <__ieee754_pow+0x214>)
 80147c8:	429c      	cmp	r4, r3
 80147ca:	dd2d      	ble.n	8014828 <__ieee754_pow+0x110>
 80147cc:	f1b9 0f00 	cmp.w	r9, #0
 80147d0:	f280 8473 	bge.w	80150ba <__ieee754_pow+0x9a2>
 80147d4:	2000      	movs	r0, #0
 80147d6:	2100      	movs	r1, #0
 80147d8:	ec41 0b10 	vmov	d0, r0, r1
 80147dc:	b011      	add	sp, #68	; 0x44
 80147de:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80147e2:	2a00      	cmp	r2, #0
 80147e4:	d13e      	bne.n	8014864 <__ieee754_pow+0x14c>
 80147e6:	f1c3 0314 	rsb	r3, r3, #20
 80147ea:	fa48 f103 	asr.w	r1, r8, r3
 80147ee:	fa01 f303 	lsl.w	r3, r1, r3
 80147f2:	4543      	cmp	r3, r8
 80147f4:	f040 8469 	bne.w	80150ca <__ieee754_pow+0x9b2>
 80147f8:	f001 0101 	and.w	r1, r1, #1
 80147fc:	f1c1 0b02 	rsb	fp, r1, #2
 8014800:	4b4b      	ldr	r3, [pc, #300]	; (8014930 <__ieee754_pow+0x218>)
 8014802:	4598      	cmp	r8, r3
 8014804:	d118      	bne.n	8014838 <__ieee754_pow+0x120>
 8014806:	f1b9 0f00 	cmp.w	r9, #0
 801480a:	f280 845a 	bge.w	80150c2 <__ieee754_pow+0x9aa>
 801480e:	4948      	ldr	r1, [pc, #288]	; (8014930 <__ieee754_pow+0x218>)
 8014810:	4632      	mov	r2, r6
 8014812:	463b      	mov	r3, r7
 8014814:	2000      	movs	r0, #0
 8014816:	f7ec f841 	bl	800089c <__aeabi_ddiv>
 801481a:	e7dd      	b.n	80147d8 <__ieee754_pow+0xc0>
 801481c:	f04f 0b02 	mov.w	fp, #2
 8014820:	e7c4      	b.n	80147ac <__ieee754_pow+0x94>
 8014822:	f04f 0b00 	mov.w	fp, #0
 8014826:	e7c1      	b.n	80147ac <__ieee754_pow+0x94>
 8014828:	f1b9 0f00 	cmp.w	r9, #0
 801482c:	dad2      	bge.n	80147d4 <__ieee754_pow+0xbc>
 801482e:	e9dd 0300 	ldrd	r0, r3, [sp]
 8014832:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 8014836:	e7cf      	b.n	80147d8 <__ieee754_pow+0xc0>
 8014838:	f1b9 4f80 	cmp.w	r9, #1073741824	; 0x40000000
 801483c:	d106      	bne.n	801484c <__ieee754_pow+0x134>
 801483e:	4632      	mov	r2, r6
 8014840:	463b      	mov	r3, r7
 8014842:	4610      	mov	r0, r2
 8014844:	4619      	mov	r1, r3
 8014846:	f7eb feff 	bl	8000648 <__aeabi_dmul>
 801484a:	e7c5      	b.n	80147d8 <__ieee754_pow+0xc0>
 801484c:	4b39      	ldr	r3, [pc, #228]	; (8014934 <__ieee754_pow+0x21c>)
 801484e:	4599      	cmp	r9, r3
 8014850:	d10a      	bne.n	8014868 <__ieee754_pow+0x150>
 8014852:	2d00      	cmp	r5, #0
 8014854:	db08      	blt.n	8014868 <__ieee754_pow+0x150>
 8014856:	ec47 6b10 	vmov	d0, r6, r7
 801485a:	b011      	add	sp, #68	; 0x44
 801485c:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8014860:	f000 bc68 	b.w	8015134 <__ieee754_sqrt>
 8014864:	f04f 0b00 	mov.w	fp, #0
 8014868:	ec47 6b10 	vmov	d0, r6, r7
 801486c:	f000 fd12 	bl	8015294 <fabs>
 8014870:	ec51 0b10 	vmov	r0, r1, d0
 8014874:	f1ba 0f00 	cmp.w	sl, #0
 8014878:	d127      	bne.n	80148ca <__ieee754_pow+0x1b2>
 801487a:	b124      	cbz	r4, 8014886 <__ieee754_pow+0x16e>
 801487c:	4b2c      	ldr	r3, [pc, #176]	; (8014930 <__ieee754_pow+0x218>)
 801487e:	f025 4240 	bic.w	r2, r5, #3221225472	; 0xc0000000
 8014882:	429a      	cmp	r2, r3
 8014884:	d121      	bne.n	80148ca <__ieee754_pow+0x1b2>
 8014886:	f1b9 0f00 	cmp.w	r9, #0
 801488a:	da05      	bge.n	8014898 <__ieee754_pow+0x180>
 801488c:	4602      	mov	r2, r0
 801488e:	460b      	mov	r3, r1
 8014890:	2000      	movs	r0, #0
 8014892:	4927      	ldr	r1, [pc, #156]	; (8014930 <__ieee754_pow+0x218>)
 8014894:	f7ec f802 	bl	800089c <__aeabi_ddiv>
 8014898:	2d00      	cmp	r5, #0
 801489a:	da9d      	bge.n	80147d8 <__ieee754_pow+0xc0>
 801489c:	f104 4440 	add.w	r4, r4, #3221225472	; 0xc0000000
 80148a0:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 80148a4:	ea54 030b 	orrs.w	r3, r4, fp
 80148a8:	d108      	bne.n	80148bc <__ieee754_pow+0x1a4>
 80148aa:	4602      	mov	r2, r0
 80148ac:	460b      	mov	r3, r1
 80148ae:	4610      	mov	r0, r2
 80148b0:	4619      	mov	r1, r3
 80148b2:	f7eb fd11 	bl	80002d8 <__aeabi_dsub>
 80148b6:	4602      	mov	r2, r0
 80148b8:	460b      	mov	r3, r1
 80148ba:	e7ac      	b.n	8014816 <__ieee754_pow+0xfe>
 80148bc:	f1bb 0f01 	cmp.w	fp, #1
 80148c0:	d18a      	bne.n	80147d8 <__ieee754_pow+0xc0>
 80148c2:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 80148c6:	4619      	mov	r1, r3
 80148c8:	e786      	b.n	80147d8 <__ieee754_pow+0xc0>
 80148ca:	0fed      	lsrs	r5, r5, #31
 80148cc:	1e6b      	subs	r3, r5, #1
 80148ce:	930d      	str	r3, [sp, #52]	; 0x34
 80148d0:	ea5b 0303 	orrs.w	r3, fp, r3
 80148d4:	d102      	bne.n	80148dc <__ieee754_pow+0x1c4>
 80148d6:	4632      	mov	r2, r6
 80148d8:	463b      	mov	r3, r7
 80148da:	e7e8      	b.n	80148ae <__ieee754_pow+0x196>
 80148dc:	4b16      	ldr	r3, [pc, #88]	; (8014938 <__ieee754_pow+0x220>)
 80148de:	4598      	cmp	r8, r3
 80148e0:	f340 80fe 	ble.w	8014ae0 <__ieee754_pow+0x3c8>
 80148e4:	f103 7304 	add.w	r3, r3, #34603008	; 0x2100000
 80148e8:	4598      	cmp	r8, r3
 80148ea:	dd0a      	ble.n	8014902 <__ieee754_pow+0x1ea>
 80148ec:	4b0f      	ldr	r3, [pc, #60]	; (801492c <__ieee754_pow+0x214>)
 80148ee:	429c      	cmp	r4, r3
 80148f0:	dc0d      	bgt.n	801490e <__ieee754_pow+0x1f6>
 80148f2:	f1b9 0f00 	cmp.w	r9, #0
 80148f6:	f6bf af6d 	bge.w	80147d4 <__ieee754_pow+0xbc>
 80148fa:	a307      	add	r3, pc, #28	; (adr r3, 8014918 <__ieee754_pow+0x200>)
 80148fc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014900:	e79f      	b.n	8014842 <__ieee754_pow+0x12a>
 8014902:	4b0e      	ldr	r3, [pc, #56]	; (801493c <__ieee754_pow+0x224>)
 8014904:	429c      	cmp	r4, r3
 8014906:	ddf4      	ble.n	80148f2 <__ieee754_pow+0x1da>
 8014908:	4b09      	ldr	r3, [pc, #36]	; (8014930 <__ieee754_pow+0x218>)
 801490a:	429c      	cmp	r4, r3
 801490c:	dd18      	ble.n	8014940 <__ieee754_pow+0x228>
 801490e:	f1b9 0f00 	cmp.w	r9, #0
 8014912:	dcf2      	bgt.n	80148fa <__ieee754_pow+0x1e2>
 8014914:	e75e      	b.n	80147d4 <__ieee754_pow+0xbc>
 8014916:	bf00      	nop
 8014918:	8800759c 	.word	0x8800759c
 801491c:	7e37e43c 	.word	0x7e37e43c
 8014920:	7ff00000 	.word	0x7ff00000
 8014924:	08016b21 	.word	0x08016b21
 8014928:	433fffff 	.word	0x433fffff
 801492c:	3fefffff 	.word	0x3fefffff
 8014930:	3ff00000 	.word	0x3ff00000
 8014934:	3fe00000 	.word	0x3fe00000
 8014938:	41e00000 	.word	0x41e00000
 801493c:	3feffffe 	.word	0x3feffffe
 8014940:	2200      	movs	r2, #0
 8014942:	4b63      	ldr	r3, [pc, #396]	; (8014ad0 <__ieee754_pow+0x3b8>)
 8014944:	f7eb fcc8 	bl	80002d8 <__aeabi_dsub>
 8014948:	a355      	add	r3, pc, #340	; (adr r3, 8014aa0 <__ieee754_pow+0x388>)
 801494a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801494e:	4604      	mov	r4, r0
 8014950:	460d      	mov	r5, r1
 8014952:	f7eb fe79 	bl	8000648 <__aeabi_dmul>
 8014956:	a354      	add	r3, pc, #336	; (adr r3, 8014aa8 <__ieee754_pow+0x390>)
 8014958:	e9d3 2300 	ldrd	r2, r3, [r3]
 801495c:	4606      	mov	r6, r0
 801495e:	460f      	mov	r7, r1
 8014960:	4620      	mov	r0, r4
 8014962:	4629      	mov	r1, r5
 8014964:	f7eb fe70 	bl	8000648 <__aeabi_dmul>
 8014968:	2200      	movs	r2, #0
 801496a:	e9cd 0102 	strd	r0, r1, [sp, #8]
 801496e:	4b59      	ldr	r3, [pc, #356]	; (8014ad4 <__ieee754_pow+0x3bc>)
 8014970:	4620      	mov	r0, r4
 8014972:	4629      	mov	r1, r5
 8014974:	f7eb fe68 	bl	8000648 <__aeabi_dmul>
 8014978:	4602      	mov	r2, r0
 801497a:	460b      	mov	r3, r1
 801497c:	a14c      	add	r1, pc, #304	; (adr r1, 8014ab0 <__ieee754_pow+0x398>)
 801497e:	e9d1 0100 	ldrd	r0, r1, [r1]
 8014982:	f7eb fca9 	bl	80002d8 <__aeabi_dsub>
 8014986:	4622      	mov	r2, r4
 8014988:	462b      	mov	r3, r5
 801498a:	f7eb fe5d 	bl	8000648 <__aeabi_dmul>
 801498e:	4602      	mov	r2, r0
 8014990:	460b      	mov	r3, r1
 8014992:	2000      	movs	r0, #0
 8014994:	4950      	ldr	r1, [pc, #320]	; (8014ad8 <__ieee754_pow+0x3c0>)
 8014996:	f7eb fc9f 	bl	80002d8 <__aeabi_dsub>
 801499a:	4622      	mov	r2, r4
 801499c:	462b      	mov	r3, r5
 801499e:	4680      	mov	r8, r0
 80149a0:	4689      	mov	r9, r1
 80149a2:	4620      	mov	r0, r4
 80149a4:	4629      	mov	r1, r5
 80149a6:	f7eb fe4f 	bl	8000648 <__aeabi_dmul>
 80149aa:	4602      	mov	r2, r0
 80149ac:	460b      	mov	r3, r1
 80149ae:	4640      	mov	r0, r8
 80149b0:	4649      	mov	r1, r9
 80149b2:	f7eb fe49 	bl	8000648 <__aeabi_dmul>
 80149b6:	a340      	add	r3, pc, #256	; (adr r3, 8014ab8 <__ieee754_pow+0x3a0>)
 80149b8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80149bc:	f7eb fe44 	bl	8000648 <__aeabi_dmul>
 80149c0:	4602      	mov	r2, r0
 80149c2:	460b      	mov	r3, r1
 80149c4:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80149c8:	f7eb fc86 	bl	80002d8 <__aeabi_dsub>
 80149cc:	4602      	mov	r2, r0
 80149ce:	460b      	mov	r3, r1
 80149d0:	4604      	mov	r4, r0
 80149d2:	460d      	mov	r5, r1
 80149d4:	4630      	mov	r0, r6
 80149d6:	4639      	mov	r1, r7
 80149d8:	f7eb fc80 	bl	80002dc <__adddf3>
 80149dc:	2000      	movs	r0, #0
 80149de:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80149e2:	4632      	mov	r2, r6
 80149e4:	463b      	mov	r3, r7
 80149e6:	f7eb fc77 	bl	80002d8 <__aeabi_dsub>
 80149ea:	4602      	mov	r2, r0
 80149ec:	460b      	mov	r3, r1
 80149ee:	4620      	mov	r0, r4
 80149f0:	4629      	mov	r1, r5
 80149f2:	f7eb fc71 	bl	80002d8 <__aeabi_dsub>
 80149f6:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 80149f8:	f10b 33ff 	add.w	r3, fp, #4294967295	; 0xffffffff
 80149fc:	4313      	orrs	r3, r2
 80149fe:	4606      	mov	r6, r0
 8014a00:	460f      	mov	r7, r1
 8014a02:	f040 81eb 	bne.w	8014ddc <__ieee754_pow+0x6c4>
 8014a06:	ed9f 7b2e 	vldr	d7, [pc, #184]	; 8014ac0 <__ieee754_pow+0x3a8>
 8014a0a:	e9dd 4500 	ldrd	r4, r5, [sp]
 8014a0e:	2400      	movs	r4, #0
 8014a10:	4622      	mov	r2, r4
 8014a12:	462b      	mov	r3, r5
 8014a14:	e9dd 0100 	ldrd	r0, r1, [sp]
 8014a18:	ed8d 7b02 	vstr	d7, [sp, #8]
 8014a1c:	f7eb fc5c 	bl	80002d8 <__aeabi_dsub>
 8014a20:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8014a24:	f7eb fe10 	bl	8000648 <__aeabi_dmul>
 8014a28:	e9dd 2300 	ldrd	r2, r3, [sp]
 8014a2c:	4680      	mov	r8, r0
 8014a2e:	4689      	mov	r9, r1
 8014a30:	4630      	mov	r0, r6
 8014a32:	4639      	mov	r1, r7
 8014a34:	f7eb fe08 	bl	8000648 <__aeabi_dmul>
 8014a38:	4602      	mov	r2, r0
 8014a3a:	460b      	mov	r3, r1
 8014a3c:	4640      	mov	r0, r8
 8014a3e:	4649      	mov	r1, r9
 8014a40:	f7eb fc4c 	bl	80002dc <__adddf3>
 8014a44:	4622      	mov	r2, r4
 8014a46:	462b      	mov	r3, r5
 8014a48:	4680      	mov	r8, r0
 8014a4a:	4689      	mov	r9, r1
 8014a4c:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8014a50:	f7eb fdfa 	bl	8000648 <__aeabi_dmul>
 8014a54:	460b      	mov	r3, r1
 8014a56:	4604      	mov	r4, r0
 8014a58:	460d      	mov	r5, r1
 8014a5a:	4602      	mov	r2, r0
 8014a5c:	4649      	mov	r1, r9
 8014a5e:	4640      	mov	r0, r8
 8014a60:	e9cd 4500 	strd	r4, r5, [sp]
 8014a64:	f7eb fc3a 	bl	80002dc <__adddf3>
 8014a68:	4b1c      	ldr	r3, [pc, #112]	; (8014adc <__ieee754_pow+0x3c4>)
 8014a6a:	4299      	cmp	r1, r3
 8014a6c:	4606      	mov	r6, r0
 8014a6e:	460f      	mov	r7, r1
 8014a70:	468b      	mov	fp, r1
 8014a72:	f340 82f7 	ble.w	8015064 <__ieee754_pow+0x94c>
 8014a76:	f101 433f 	add.w	r3, r1, #3204448256	; 0xbf000000
 8014a7a:	f503 03e0 	add.w	r3, r3, #7340032	; 0x700000
 8014a7e:	4303      	orrs	r3, r0
 8014a80:	f000 81ea 	beq.w	8014e58 <__ieee754_pow+0x740>
 8014a84:	a310      	add	r3, pc, #64	; (adr r3, 8014ac8 <__ieee754_pow+0x3b0>)
 8014a86:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014a8a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8014a8e:	f7eb fddb 	bl	8000648 <__aeabi_dmul>
 8014a92:	a30d      	add	r3, pc, #52	; (adr r3, 8014ac8 <__ieee754_pow+0x3b0>)
 8014a94:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014a98:	e6d5      	b.n	8014846 <__ieee754_pow+0x12e>
 8014a9a:	bf00      	nop
 8014a9c:	f3af 8000 	nop.w
 8014aa0:	60000000 	.word	0x60000000
 8014aa4:	3ff71547 	.word	0x3ff71547
 8014aa8:	f85ddf44 	.word	0xf85ddf44
 8014aac:	3e54ae0b 	.word	0x3e54ae0b
 8014ab0:	55555555 	.word	0x55555555
 8014ab4:	3fd55555 	.word	0x3fd55555
 8014ab8:	652b82fe 	.word	0x652b82fe
 8014abc:	3ff71547 	.word	0x3ff71547
 8014ac0:	00000000 	.word	0x00000000
 8014ac4:	bff00000 	.word	0xbff00000
 8014ac8:	8800759c 	.word	0x8800759c
 8014acc:	7e37e43c 	.word	0x7e37e43c
 8014ad0:	3ff00000 	.word	0x3ff00000
 8014ad4:	3fd00000 	.word	0x3fd00000
 8014ad8:	3fe00000 	.word	0x3fe00000
 8014adc:	408fffff 	.word	0x408fffff
 8014ae0:	f5b4 1f80 	cmp.w	r4, #1048576	; 0x100000
 8014ae4:	f04f 0200 	mov.w	r2, #0
 8014ae8:	da05      	bge.n	8014af6 <__ieee754_pow+0x3de>
 8014aea:	4bd3      	ldr	r3, [pc, #844]	; (8014e38 <__ieee754_pow+0x720>)
 8014aec:	f7eb fdac 	bl	8000648 <__aeabi_dmul>
 8014af0:	f06f 0234 	mvn.w	r2, #52	; 0x34
 8014af4:	460c      	mov	r4, r1
 8014af6:	1523      	asrs	r3, r4, #20
 8014af8:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 8014afc:	4413      	add	r3, r2
 8014afe:	9309      	str	r3, [sp, #36]	; 0x24
 8014b00:	4bce      	ldr	r3, [pc, #824]	; (8014e3c <__ieee754_pow+0x724>)
 8014b02:	f3c4 0413 	ubfx	r4, r4, #0, #20
 8014b06:	f044 557f 	orr.w	r5, r4, #1069547520	; 0x3fc00000
 8014b0a:	429c      	cmp	r4, r3
 8014b0c:	f445 1540 	orr.w	r5, r5, #3145728	; 0x300000
 8014b10:	dd08      	ble.n	8014b24 <__ieee754_pow+0x40c>
 8014b12:	4bcb      	ldr	r3, [pc, #812]	; (8014e40 <__ieee754_pow+0x728>)
 8014b14:	429c      	cmp	r4, r3
 8014b16:	f340 815e 	ble.w	8014dd6 <__ieee754_pow+0x6be>
 8014b1a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8014b1c:	3301      	adds	r3, #1
 8014b1e:	9309      	str	r3, [sp, #36]	; 0x24
 8014b20:	f5a5 1580 	sub.w	r5, r5, #1048576	; 0x100000
 8014b24:	f04f 0a00 	mov.w	sl, #0
 8014b28:	ea4f 03ca 	mov.w	r3, sl, lsl #3
 8014b2c:	930c      	str	r3, [sp, #48]	; 0x30
 8014b2e:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8014b30:	4bc4      	ldr	r3, [pc, #784]	; (8014e44 <__ieee754_pow+0x72c>)
 8014b32:	4413      	add	r3, r2
 8014b34:	ed93 7b00 	vldr	d7, [r3]
 8014b38:	4629      	mov	r1, r5
 8014b3a:	ec53 2b17 	vmov	r2, r3, d7
 8014b3e:	ed8d 7b06 	vstr	d7, [sp, #24]
 8014b42:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 8014b46:	f7eb fbc7 	bl	80002d8 <__aeabi_dsub>
 8014b4a:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8014b4e:	4606      	mov	r6, r0
 8014b50:	460f      	mov	r7, r1
 8014b52:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8014b56:	f7eb fbc1 	bl	80002dc <__adddf3>
 8014b5a:	4602      	mov	r2, r0
 8014b5c:	460b      	mov	r3, r1
 8014b5e:	2000      	movs	r0, #0
 8014b60:	49b9      	ldr	r1, [pc, #740]	; (8014e48 <__ieee754_pow+0x730>)
 8014b62:	f7eb fe9b 	bl	800089c <__aeabi_ddiv>
 8014b66:	e9cd 010e 	strd	r0, r1, [sp, #56]	; 0x38
 8014b6a:	4602      	mov	r2, r0
 8014b6c:	460b      	mov	r3, r1
 8014b6e:	4630      	mov	r0, r6
 8014b70:	4639      	mov	r1, r7
 8014b72:	f7eb fd69 	bl	8000648 <__aeabi_dmul>
 8014b76:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8014b7a:	e9dd 3404 	ldrd	r3, r4, [sp, #16]
 8014b7e:	e9cd 3402 	strd	r3, r4, [sp, #8]
 8014b82:	2300      	movs	r3, #0
 8014b84:	9302      	str	r3, [sp, #8]
 8014b86:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 8014b8a:	106d      	asrs	r5, r5, #1
 8014b8c:	f045 5500 	orr.w	r5, r5, #536870912	; 0x20000000
 8014b90:	f505 2500 	add.w	r5, r5, #524288	; 0x80000
 8014b94:	2200      	movs	r2, #0
 8014b96:	eb05 438a 	add.w	r3, r5, sl, lsl #18
 8014b9a:	4640      	mov	r0, r8
 8014b9c:	4649      	mov	r1, r9
 8014b9e:	4614      	mov	r4, r2
 8014ba0:	461d      	mov	r5, r3
 8014ba2:	f7eb fd51 	bl	8000648 <__aeabi_dmul>
 8014ba6:	4602      	mov	r2, r0
 8014ba8:	460b      	mov	r3, r1
 8014baa:	4630      	mov	r0, r6
 8014bac:	4639      	mov	r1, r7
 8014bae:	f7eb fb93 	bl	80002d8 <__aeabi_dsub>
 8014bb2:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8014bb6:	4606      	mov	r6, r0
 8014bb8:	460f      	mov	r7, r1
 8014bba:	4620      	mov	r0, r4
 8014bbc:	4629      	mov	r1, r5
 8014bbe:	f7eb fb8b 	bl	80002d8 <__aeabi_dsub>
 8014bc2:	4602      	mov	r2, r0
 8014bc4:	460b      	mov	r3, r1
 8014bc6:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8014bca:	f7eb fb85 	bl	80002d8 <__aeabi_dsub>
 8014bce:	4642      	mov	r2, r8
 8014bd0:	464b      	mov	r3, r9
 8014bd2:	f7eb fd39 	bl	8000648 <__aeabi_dmul>
 8014bd6:	4602      	mov	r2, r0
 8014bd8:	460b      	mov	r3, r1
 8014bda:	4630      	mov	r0, r6
 8014bdc:	4639      	mov	r1, r7
 8014bde:	f7eb fb7b 	bl	80002d8 <__aeabi_dsub>
 8014be2:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	; 0x38
 8014be6:	f7eb fd2f 	bl	8000648 <__aeabi_dmul>
 8014bea:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8014bee:	e9cd 0106 	strd	r0, r1, [sp, #24]
 8014bf2:	4610      	mov	r0, r2
 8014bf4:	4619      	mov	r1, r3
 8014bf6:	f7eb fd27 	bl	8000648 <__aeabi_dmul>
 8014bfa:	a37b      	add	r3, pc, #492	; (adr r3, 8014de8 <__ieee754_pow+0x6d0>)
 8014bfc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014c00:	4604      	mov	r4, r0
 8014c02:	460d      	mov	r5, r1
 8014c04:	f7eb fd20 	bl	8000648 <__aeabi_dmul>
 8014c08:	a379      	add	r3, pc, #484	; (adr r3, 8014df0 <__ieee754_pow+0x6d8>)
 8014c0a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014c0e:	f7eb fb65 	bl	80002dc <__adddf3>
 8014c12:	4622      	mov	r2, r4
 8014c14:	462b      	mov	r3, r5
 8014c16:	f7eb fd17 	bl	8000648 <__aeabi_dmul>
 8014c1a:	a377      	add	r3, pc, #476	; (adr r3, 8014df8 <__ieee754_pow+0x6e0>)
 8014c1c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014c20:	f7eb fb5c 	bl	80002dc <__adddf3>
 8014c24:	4622      	mov	r2, r4
 8014c26:	462b      	mov	r3, r5
 8014c28:	f7eb fd0e 	bl	8000648 <__aeabi_dmul>
 8014c2c:	a374      	add	r3, pc, #464	; (adr r3, 8014e00 <__ieee754_pow+0x6e8>)
 8014c2e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014c32:	f7eb fb53 	bl	80002dc <__adddf3>
 8014c36:	4622      	mov	r2, r4
 8014c38:	462b      	mov	r3, r5
 8014c3a:	f7eb fd05 	bl	8000648 <__aeabi_dmul>
 8014c3e:	a372      	add	r3, pc, #456	; (adr r3, 8014e08 <__ieee754_pow+0x6f0>)
 8014c40:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014c44:	f7eb fb4a 	bl	80002dc <__adddf3>
 8014c48:	4622      	mov	r2, r4
 8014c4a:	462b      	mov	r3, r5
 8014c4c:	f7eb fcfc 	bl	8000648 <__aeabi_dmul>
 8014c50:	a36f      	add	r3, pc, #444	; (adr r3, 8014e10 <__ieee754_pow+0x6f8>)
 8014c52:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014c56:	f7eb fb41 	bl	80002dc <__adddf3>
 8014c5a:	4622      	mov	r2, r4
 8014c5c:	4606      	mov	r6, r0
 8014c5e:	460f      	mov	r7, r1
 8014c60:	462b      	mov	r3, r5
 8014c62:	4620      	mov	r0, r4
 8014c64:	4629      	mov	r1, r5
 8014c66:	f7eb fcef 	bl	8000648 <__aeabi_dmul>
 8014c6a:	4602      	mov	r2, r0
 8014c6c:	460b      	mov	r3, r1
 8014c6e:	4630      	mov	r0, r6
 8014c70:	4639      	mov	r1, r7
 8014c72:	f7eb fce9 	bl	8000648 <__aeabi_dmul>
 8014c76:	4642      	mov	r2, r8
 8014c78:	4604      	mov	r4, r0
 8014c7a:	460d      	mov	r5, r1
 8014c7c:	464b      	mov	r3, r9
 8014c7e:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8014c82:	f7eb fb2b 	bl	80002dc <__adddf3>
 8014c86:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8014c8a:	f7eb fcdd 	bl	8000648 <__aeabi_dmul>
 8014c8e:	4622      	mov	r2, r4
 8014c90:	462b      	mov	r3, r5
 8014c92:	f7eb fb23 	bl	80002dc <__adddf3>
 8014c96:	4642      	mov	r2, r8
 8014c98:	4606      	mov	r6, r0
 8014c9a:	460f      	mov	r7, r1
 8014c9c:	464b      	mov	r3, r9
 8014c9e:	4640      	mov	r0, r8
 8014ca0:	4649      	mov	r1, r9
 8014ca2:	f7eb fcd1 	bl	8000648 <__aeabi_dmul>
 8014ca6:	2200      	movs	r2, #0
 8014ca8:	4b68      	ldr	r3, [pc, #416]	; (8014e4c <__ieee754_pow+0x734>)
 8014caa:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 8014cae:	f7eb fb15 	bl	80002dc <__adddf3>
 8014cb2:	4632      	mov	r2, r6
 8014cb4:	463b      	mov	r3, r7
 8014cb6:	f7eb fb11 	bl	80002dc <__adddf3>
 8014cba:	9802      	ldr	r0, [sp, #8]
 8014cbc:	460d      	mov	r5, r1
 8014cbe:	4604      	mov	r4, r0
 8014cc0:	4602      	mov	r2, r0
 8014cc2:	460b      	mov	r3, r1
 8014cc4:	4640      	mov	r0, r8
 8014cc6:	4649      	mov	r1, r9
 8014cc8:	f7eb fcbe 	bl	8000648 <__aeabi_dmul>
 8014ccc:	2200      	movs	r2, #0
 8014cce:	4680      	mov	r8, r0
 8014cd0:	4689      	mov	r9, r1
 8014cd2:	4b5e      	ldr	r3, [pc, #376]	; (8014e4c <__ieee754_pow+0x734>)
 8014cd4:	4620      	mov	r0, r4
 8014cd6:	4629      	mov	r1, r5
 8014cd8:	f7eb fafe 	bl	80002d8 <__aeabi_dsub>
 8014cdc:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8014ce0:	f7eb fafa 	bl	80002d8 <__aeabi_dsub>
 8014ce4:	4602      	mov	r2, r0
 8014ce6:	460b      	mov	r3, r1
 8014ce8:	4630      	mov	r0, r6
 8014cea:	4639      	mov	r1, r7
 8014cec:	f7eb faf4 	bl	80002d8 <__aeabi_dsub>
 8014cf0:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8014cf4:	f7eb fca8 	bl	8000648 <__aeabi_dmul>
 8014cf8:	4622      	mov	r2, r4
 8014cfa:	4606      	mov	r6, r0
 8014cfc:	460f      	mov	r7, r1
 8014cfe:	462b      	mov	r3, r5
 8014d00:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8014d04:	f7eb fca0 	bl	8000648 <__aeabi_dmul>
 8014d08:	4602      	mov	r2, r0
 8014d0a:	460b      	mov	r3, r1
 8014d0c:	4630      	mov	r0, r6
 8014d0e:	4639      	mov	r1, r7
 8014d10:	f7eb fae4 	bl	80002dc <__adddf3>
 8014d14:	4606      	mov	r6, r0
 8014d16:	460f      	mov	r7, r1
 8014d18:	4602      	mov	r2, r0
 8014d1a:	460b      	mov	r3, r1
 8014d1c:	4640      	mov	r0, r8
 8014d1e:	4649      	mov	r1, r9
 8014d20:	f7eb fadc 	bl	80002dc <__adddf3>
 8014d24:	9802      	ldr	r0, [sp, #8]
 8014d26:	a33c      	add	r3, pc, #240	; (adr r3, 8014e18 <__ieee754_pow+0x700>)
 8014d28:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014d2c:	4604      	mov	r4, r0
 8014d2e:	460d      	mov	r5, r1
 8014d30:	f7eb fc8a 	bl	8000648 <__aeabi_dmul>
 8014d34:	4642      	mov	r2, r8
 8014d36:	e9cd 0106 	strd	r0, r1, [sp, #24]
 8014d3a:	464b      	mov	r3, r9
 8014d3c:	4620      	mov	r0, r4
 8014d3e:	4629      	mov	r1, r5
 8014d40:	f7eb faca 	bl	80002d8 <__aeabi_dsub>
 8014d44:	4602      	mov	r2, r0
 8014d46:	460b      	mov	r3, r1
 8014d48:	4630      	mov	r0, r6
 8014d4a:	4639      	mov	r1, r7
 8014d4c:	f7eb fac4 	bl	80002d8 <__aeabi_dsub>
 8014d50:	a333      	add	r3, pc, #204	; (adr r3, 8014e20 <__ieee754_pow+0x708>)
 8014d52:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014d56:	f7eb fc77 	bl	8000648 <__aeabi_dmul>
 8014d5a:	a333      	add	r3, pc, #204	; (adr r3, 8014e28 <__ieee754_pow+0x710>)
 8014d5c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014d60:	4606      	mov	r6, r0
 8014d62:	460f      	mov	r7, r1
 8014d64:	4620      	mov	r0, r4
 8014d66:	4629      	mov	r1, r5
 8014d68:	f7eb fc6e 	bl	8000648 <__aeabi_dmul>
 8014d6c:	4602      	mov	r2, r0
 8014d6e:	460b      	mov	r3, r1
 8014d70:	4630      	mov	r0, r6
 8014d72:	4639      	mov	r1, r7
 8014d74:	f7eb fab2 	bl	80002dc <__adddf3>
 8014d78:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8014d7a:	4b35      	ldr	r3, [pc, #212]	; (8014e50 <__ieee754_pow+0x738>)
 8014d7c:	4413      	add	r3, r2
 8014d7e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014d82:	f7eb faab 	bl	80002dc <__adddf3>
 8014d86:	4604      	mov	r4, r0
 8014d88:	9809      	ldr	r0, [sp, #36]	; 0x24
 8014d8a:	460d      	mov	r5, r1
 8014d8c:	f7eb fbf2 	bl	8000574 <__aeabi_i2d>
 8014d90:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8014d92:	4b30      	ldr	r3, [pc, #192]	; (8014e54 <__ieee754_pow+0x73c>)
 8014d94:	4413      	add	r3, r2
 8014d96:	e9d3 8900 	ldrd	r8, r9, [r3]
 8014d9a:	4606      	mov	r6, r0
 8014d9c:	460f      	mov	r7, r1
 8014d9e:	4622      	mov	r2, r4
 8014da0:	462b      	mov	r3, r5
 8014da2:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8014da6:	f7eb fa99 	bl	80002dc <__adddf3>
 8014daa:	4642      	mov	r2, r8
 8014dac:	464b      	mov	r3, r9
 8014dae:	f7eb fa95 	bl	80002dc <__adddf3>
 8014db2:	4632      	mov	r2, r6
 8014db4:	463b      	mov	r3, r7
 8014db6:	f7eb fa91 	bl	80002dc <__adddf3>
 8014dba:	9802      	ldr	r0, [sp, #8]
 8014dbc:	4632      	mov	r2, r6
 8014dbe:	463b      	mov	r3, r7
 8014dc0:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8014dc4:	f7eb fa88 	bl	80002d8 <__aeabi_dsub>
 8014dc8:	4642      	mov	r2, r8
 8014dca:	464b      	mov	r3, r9
 8014dcc:	f7eb fa84 	bl	80002d8 <__aeabi_dsub>
 8014dd0:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8014dd4:	e607      	b.n	80149e6 <__ieee754_pow+0x2ce>
 8014dd6:	f04f 0a01 	mov.w	sl, #1
 8014dda:	e6a5      	b.n	8014b28 <__ieee754_pow+0x410>
 8014ddc:	ed9f 7b14 	vldr	d7, [pc, #80]	; 8014e30 <__ieee754_pow+0x718>
 8014de0:	e613      	b.n	8014a0a <__ieee754_pow+0x2f2>
 8014de2:	bf00      	nop
 8014de4:	f3af 8000 	nop.w
 8014de8:	4a454eef 	.word	0x4a454eef
 8014dec:	3fca7e28 	.word	0x3fca7e28
 8014df0:	93c9db65 	.word	0x93c9db65
 8014df4:	3fcd864a 	.word	0x3fcd864a
 8014df8:	a91d4101 	.word	0xa91d4101
 8014dfc:	3fd17460 	.word	0x3fd17460
 8014e00:	518f264d 	.word	0x518f264d
 8014e04:	3fd55555 	.word	0x3fd55555
 8014e08:	db6fabff 	.word	0xdb6fabff
 8014e0c:	3fdb6db6 	.word	0x3fdb6db6
 8014e10:	33333303 	.word	0x33333303
 8014e14:	3fe33333 	.word	0x3fe33333
 8014e18:	e0000000 	.word	0xe0000000
 8014e1c:	3feec709 	.word	0x3feec709
 8014e20:	dc3a03fd 	.word	0xdc3a03fd
 8014e24:	3feec709 	.word	0x3feec709
 8014e28:	145b01f5 	.word	0x145b01f5
 8014e2c:	be3e2fe0 	.word	0xbe3e2fe0
 8014e30:	00000000 	.word	0x00000000
 8014e34:	3ff00000 	.word	0x3ff00000
 8014e38:	43400000 	.word	0x43400000
 8014e3c:	0003988e 	.word	0x0003988e
 8014e40:	000bb679 	.word	0x000bb679
 8014e44:	08016c48 	.word	0x08016c48
 8014e48:	3ff00000 	.word	0x3ff00000
 8014e4c:	40080000 	.word	0x40080000
 8014e50:	08016c68 	.word	0x08016c68
 8014e54:	08016c58 	.word	0x08016c58
 8014e58:	a3b4      	add	r3, pc, #720	; (adr r3, 801512c <__ieee754_pow+0xa14>)
 8014e5a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014e5e:	4640      	mov	r0, r8
 8014e60:	4649      	mov	r1, r9
 8014e62:	f7eb fa3b 	bl	80002dc <__adddf3>
 8014e66:	4622      	mov	r2, r4
 8014e68:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8014e6c:	462b      	mov	r3, r5
 8014e6e:	4630      	mov	r0, r6
 8014e70:	4639      	mov	r1, r7
 8014e72:	f7eb fa31 	bl	80002d8 <__aeabi_dsub>
 8014e76:	4602      	mov	r2, r0
 8014e78:	460b      	mov	r3, r1
 8014e7a:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8014e7e:	f7eb fe73 	bl	8000b68 <__aeabi_dcmpgt>
 8014e82:	2800      	cmp	r0, #0
 8014e84:	f47f adfe 	bne.w	8014a84 <__ieee754_pow+0x36c>
 8014e88:	4aa3      	ldr	r2, [pc, #652]	; (8015118 <__ieee754_pow+0xa00>)
 8014e8a:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 8014e8e:	4293      	cmp	r3, r2
 8014e90:	f340 810a 	ble.w	80150a8 <__ieee754_pow+0x990>
 8014e94:	151b      	asrs	r3, r3, #20
 8014e96:	f44f 1a80 	mov.w	sl, #1048576	; 0x100000
 8014e9a:	f2a3 33fe 	subw	r3, r3, #1022	; 0x3fe
 8014e9e:	fa4a f303 	asr.w	r3, sl, r3
 8014ea2:	445b      	add	r3, fp
 8014ea4:	f3c3 520a 	ubfx	r2, r3, #20, #11
 8014ea8:	4e9c      	ldr	r6, [pc, #624]	; (801511c <__ieee754_pow+0xa04>)
 8014eaa:	f2a2 32ff 	subw	r2, r2, #1023	; 0x3ff
 8014eae:	4116      	asrs	r6, r2
 8014eb0:	f3c3 0a13 	ubfx	sl, r3, #0, #20
 8014eb4:	2000      	movs	r0, #0
 8014eb6:	ea23 0106 	bic.w	r1, r3, r6
 8014eba:	f1c2 0214 	rsb	r2, r2, #20
 8014ebe:	f44a 1a80 	orr.w	sl, sl, #1048576	; 0x100000
 8014ec2:	fa4a fa02 	asr.w	sl, sl, r2
 8014ec6:	f1bb 0f00 	cmp.w	fp, #0
 8014eca:	4602      	mov	r2, r0
 8014ecc:	460b      	mov	r3, r1
 8014ece:	4620      	mov	r0, r4
 8014ed0:	4629      	mov	r1, r5
 8014ed2:	bfb8      	it	lt
 8014ed4:	f1ca 0a00 	rsblt	sl, sl, #0
 8014ed8:	f7eb f9fe 	bl	80002d8 <__aeabi_dsub>
 8014edc:	e9cd 0100 	strd	r0, r1, [sp]
 8014ee0:	4642      	mov	r2, r8
 8014ee2:	464b      	mov	r3, r9
 8014ee4:	e9dd 0100 	ldrd	r0, r1, [sp]
 8014ee8:	f7eb f9f8 	bl	80002dc <__adddf3>
 8014eec:	2000      	movs	r0, #0
 8014eee:	a378      	add	r3, pc, #480	; (adr r3, 80150d0 <__ieee754_pow+0x9b8>)
 8014ef0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014ef4:	4604      	mov	r4, r0
 8014ef6:	460d      	mov	r5, r1
 8014ef8:	f7eb fba6 	bl	8000648 <__aeabi_dmul>
 8014efc:	e9dd 2300 	ldrd	r2, r3, [sp]
 8014f00:	4606      	mov	r6, r0
 8014f02:	460f      	mov	r7, r1
 8014f04:	4620      	mov	r0, r4
 8014f06:	4629      	mov	r1, r5
 8014f08:	f7eb f9e6 	bl	80002d8 <__aeabi_dsub>
 8014f0c:	4602      	mov	r2, r0
 8014f0e:	460b      	mov	r3, r1
 8014f10:	4640      	mov	r0, r8
 8014f12:	4649      	mov	r1, r9
 8014f14:	f7eb f9e0 	bl	80002d8 <__aeabi_dsub>
 8014f18:	a36f      	add	r3, pc, #444	; (adr r3, 80150d8 <__ieee754_pow+0x9c0>)
 8014f1a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014f1e:	f7eb fb93 	bl	8000648 <__aeabi_dmul>
 8014f22:	a36f      	add	r3, pc, #444	; (adr r3, 80150e0 <__ieee754_pow+0x9c8>)
 8014f24:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014f28:	4680      	mov	r8, r0
 8014f2a:	4689      	mov	r9, r1
 8014f2c:	4620      	mov	r0, r4
 8014f2e:	4629      	mov	r1, r5
 8014f30:	f7eb fb8a 	bl	8000648 <__aeabi_dmul>
 8014f34:	4602      	mov	r2, r0
 8014f36:	460b      	mov	r3, r1
 8014f38:	4640      	mov	r0, r8
 8014f3a:	4649      	mov	r1, r9
 8014f3c:	f7eb f9ce 	bl	80002dc <__adddf3>
 8014f40:	4604      	mov	r4, r0
 8014f42:	460d      	mov	r5, r1
 8014f44:	4602      	mov	r2, r0
 8014f46:	460b      	mov	r3, r1
 8014f48:	4630      	mov	r0, r6
 8014f4a:	4639      	mov	r1, r7
 8014f4c:	f7eb f9c6 	bl	80002dc <__adddf3>
 8014f50:	4632      	mov	r2, r6
 8014f52:	463b      	mov	r3, r7
 8014f54:	4680      	mov	r8, r0
 8014f56:	4689      	mov	r9, r1
 8014f58:	f7eb f9be 	bl	80002d8 <__aeabi_dsub>
 8014f5c:	4602      	mov	r2, r0
 8014f5e:	460b      	mov	r3, r1
 8014f60:	4620      	mov	r0, r4
 8014f62:	4629      	mov	r1, r5
 8014f64:	f7eb f9b8 	bl	80002d8 <__aeabi_dsub>
 8014f68:	4642      	mov	r2, r8
 8014f6a:	4606      	mov	r6, r0
 8014f6c:	460f      	mov	r7, r1
 8014f6e:	464b      	mov	r3, r9
 8014f70:	4640      	mov	r0, r8
 8014f72:	4649      	mov	r1, r9
 8014f74:	f7eb fb68 	bl	8000648 <__aeabi_dmul>
 8014f78:	a35b      	add	r3, pc, #364	; (adr r3, 80150e8 <__ieee754_pow+0x9d0>)
 8014f7a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014f7e:	4604      	mov	r4, r0
 8014f80:	460d      	mov	r5, r1
 8014f82:	f7eb fb61 	bl	8000648 <__aeabi_dmul>
 8014f86:	a35a      	add	r3, pc, #360	; (adr r3, 80150f0 <__ieee754_pow+0x9d8>)
 8014f88:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014f8c:	f7eb f9a4 	bl	80002d8 <__aeabi_dsub>
 8014f90:	4622      	mov	r2, r4
 8014f92:	462b      	mov	r3, r5
 8014f94:	f7eb fb58 	bl	8000648 <__aeabi_dmul>
 8014f98:	a357      	add	r3, pc, #348	; (adr r3, 80150f8 <__ieee754_pow+0x9e0>)
 8014f9a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014f9e:	f7eb f99d 	bl	80002dc <__adddf3>
 8014fa2:	4622      	mov	r2, r4
 8014fa4:	462b      	mov	r3, r5
 8014fa6:	f7eb fb4f 	bl	8000648 <__aeabi_dmul>
 8014faa:	a355      	add	r3, pc, #340	; (adr r3, 8015100 <__ieee754_pow+0x9e8>)
 8014fac:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014fb0:	f7eb f992 	bl	80002d8 <__aeabi_dsub>
 8014fb4:	4622      	mov	r2, r4
 8014fb6:	462b      	mov	r3, r5
 8014fb8:	f7eb fb46 	bl	8000648 <__aeabi_dmul>
 8014fbc:	a352      	add	r3, pc, #328	; (adr r3, 8015108 <__ieee754_pow+0x9f0>)
 8014fbe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014fc2:	f7eb f98b 	bl	80002dc <__adddf3>
 8014fc6:	4622      	mov	r2, r4
 8014fc8:	462b      	mov	r3, r5
 8014fca:	f7eb fb3d 	bl	8000648 <__aeabi_dmul>
 8014fce:	4602      	mov	r2, r0
 8014fd0:	460b      	mov	r3, r1
 8014fd2:	4640      	mov	r0, r8
 8014fd4:	4649      	mov	r1, r9
 8014fd6:	f7eb f97f 	bl	80002d8 <__aeabi_dsub>
 8014fda:	4604      	mov	r4, r0
 8014fdc:	460d      	mov	r5, r1
 8014fde:	4602      	mov	r2, r0
 8014fe0:	460b      	mov	r3, r1
 8014fe2:	4640      	mov	r0, r8
 8014fe4:	4649      	mov	r1, r9
 8014fe6:	f7eb fb2f 	bl	8000648 <__aeabi_dmul>
 8014fea:	2200      	movs	r2, #0
 8014fec:	e9cd 0100 	strd	r0, r1, [sp]
 8014ff0:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8014ff4:	4620      	mov	r0, r4
 8014ff6:	4629      	mov	r1, r5
 8014ff8:	f7eb f96e 	bl	80002d8 <__aeabi_dsub>
 8014ffc:	4602      	mov	r2, r0
 8014ffe:	460b      	mov	r3, r1
 8015000:	e9dd 0100 	ldrd	r0, r1, [sp]
 8015004:	f7eb fc4a 	bl	800089c <__aeabi_ddiv>
 8015008:	4632      	mov	r2, r6
 801500a:	4604      	mov	r4, r0
 801500c:	460d      	mov	r5, r1
 801500e:	463b      	mov	r3, r7
 8015010:	4640      	mov	r0, r8
 8015012:	4649      	mov	r1, r9
 8015014:	f7eb fb18 	bl	8000648 <__aeabi_dmul>
 8015018:	4632      	mov	r2, r6
 801501a:	463b      	mov	r3, r7
 801501c:	f7eb f95e 	bl	80002dc <__adddf3>
 8015020:	4602      	mov	r2, r0
 8015022:	460b      	mov	r3, r1
 8015024:	4620      	mov	r0, r4
 8015026:	4629      	mov	r1, r5
 8015028:	f7eb f956 	bl	80002d8 <__aeabi_dsub>
 801502c:	4642      	mov	r2, r8
 801502e:	464b      	mov	r3, r9
 8015030:	f7eb f952 	bl	80002d8 <__aeabi_dsub>
 8015034:	4602      	mov	r2, r0
 8015036:	460b      	mov	r3, r1
 8015038:	2000      	movs	r0, #0
 801503a:	4939      	ldr	r1, [pc, #228]	; (8015120 <__ieee754_pow+0xa08>)
 801503c:	f7eb f94c 	bl	80002d8 <__aeabi_dsub>
 8015040:	eb01 540a 	add.w	r4, r1, sl, lsl #20
 8015044:	f5b4 1f80 	cmp.w	r4, #1048576	; 0x100000
 8015048:	4602      	mov	r2, r0
 801504a:	460b      	mov	r3, r1
 801504c:	da2f      	bge.n	80150ae <__ieee754_pow+0x996>
 801504e:	4650      	mov	r0, sl
 8015050:	ec43 2b10 	vmov	d0, r2, r3
 8015054:	f000 f9c0 	bl	80153d8 <scalbn>
 8015058:	ec51 0b10 	vmov	r0, r1, d0
 801505c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8015060:	f7ff bbf1 	b.w	8014846 <__ieee754_pow+0x12e>
 8015064:	4b2f      	ldr	r3, [pc, #188]	; (8015124 <__ieee754_pow+0xa0c>)
 8015066:	f021 4600 	bic.w	r6, r1, #2147483648	; 0x80000000
 801506a:	429e      	cmp	r6, r3
 801506c:	f77f af0c 	ble.w	8014e88 <__ieee754_pow+0x770>
 8015070:	4b2d      	ldr	r3, [pc, #180]	; (8015128 <__ieee754_pow+0xa10>)
 8015072:	440b      	add	r3, r1
 8015074:	4303      	orrs	r3, r0
 8015076:	d00b      	beq.n	8015090 <__ieee754_pow+0x978>
 8015078:	a325      	add	r3, pc, #148	; (adr r3, 8015110 <__ieee754_pow+0x9f8>)
 801507a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801507e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8015082:	f7eb fae1 	bl	8000648 <__aeabi_dmul>
 8015086:	a322      	add	r3, pc, #136	; (adr r3, 8015110 <__ieee754_pow+0x9f8>)
 8015088:	e9d3 2300 	ldrd	r2, r3, [r3]
 801508c:	f7ff bbdb 	b.w	8014846 <__ieee754_pow+0x12e>
 8015090:	4622      	mov	r2, r4
 8015092:	462b      	mov	r3, r5
 8015094:	f7eb f920 	bl	80002d8 <__aeabi_dsub>
 8015098:	4642      	mov	r2, r8
 801509a:	464b      	mov	r3, r9
 801509c:	f7eb fd5a 	bl	8000b54 <__aeabi_dcmpge>
 80150a0:	2800      	cmp	r0, #0
 80150a2:	f43f aef1 	beq.w	8014e88 <__ieee754_pow+0x770>
 80150a6:	e7e7      	b.n	8015078 <__ieee754_pow+0x960>
 80150a8:	f04f 0a00 	mov.w	sl, #0
 80150ac:	e718      	b.n	8014ee0 <__ieee754_pow+0x7c8>
 80150ae:	4621      	mov	r1, r4
 80150b0:	e7d4      	b.n	801505c <__ieee754_pow+0x944>
 80150b2:	2000      	movs	r0, #0
 80150b4:	491a      	ldr	r1, [pc, #104]	; (8015120 <__ieee754_pow+0xa08>)
 80150b6:	f7ff bb8f 	b.w	80147d8 <__ieee754_pow+0xc0>
 80150ba:	e9dd 0100 	ldrd	r0, r1, [sp]
 80150be:	f7ff bb8b 	b.w	80147d8 <__ieee754_pow+0xc0>
 80150c2:	4630      	mov	r0, r6
 80150c4:	4639      	mov	r1, r7
 80150c6:	f7ff bb87 	b.w	80147d8 <__ieee754_pow+0xc0>
 80150ca:	4693      	mov	fp, r2
 80150cc:	f7ff bb98 	b.w	8014800 <__ieee754_pow+0xe8>
 80150d0:	00000000 	.word	0x00000000
 80150d4:	3fe62e43 	.word	0x3fe62e43
 80150d8:	fefa39ef 	.word	0xfefa39ef
 80150dc:	3fe62e42 	.word	0x3fe62e42
 80150e0:	0ca86c39 	.word	0x0ca86c39
 80150e4:	be205c61 	.word	0xbe205c61
 80150e8:	72bea4d0 	.word	0x72bea4d0
 80150ec:	3e663769 	.word	0x3e663769
 80150f0:	c5d26bf1 	.word	0xc5d26bf1
 80150f4:	3ebbbd41 	.word	0x3ebbbd41
 80150f8:	af25de2c 	.word	0xaf25de2c
 80150fc:	3f11566a 	.word	0x3f11566a
 8015100:	16bebd93 	.word	0x16bebd93
 8015104:	3f66c16c 	.word	0x3f66c16c
 8015108:	5555553e 	.word	0x5555553e
 801510c:	3fc55555 	.word	0x3fc55555
 8015110:	c2f8f359 	.word	0xc2f8f359
 8015114:	01a56e1f 	.word	0x01a56e1f
 8015118:	3fe00000 	.word	0x3fe00000
 801511c:	000fffff 	.word	0x000fffff
 8015120:	3ff00000 	.word	0x3ff00000
 8015124:	4090cbff 	.word	0x4090cbff
 8015128:	3f6f3400 	.word	0x3f6f3400
 801512c:	652b82fe 	.word	0x652b82fe
 8015130:	3c971547 	.word	0x3c971547

08015134 <__ieee754_sqrt>:
 8015134:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8015138:	4955      	ldr	r1, [pc, #340]	; (8015290 <__ieee754_sqrt+0x15c>)
 801513a:	ec55 4b10 	vmov	r4, r5, d0
 801513e:	43a9      	bics	r1, r5
 8015140:	462b      	mov	r3, r5
 8015142:	462a      	mov	r2, r5
 8015144:	d112      	bne.n	801516c <__ieee754_sqrt+0x38>
 8015146:	ee10 2a10 	vmov	r2, s0
 801514a:	ee10 0a10 	vmov	r0, s0
 801514e:	4629      	mov	r1, r5
 8015150:	f7eb fa7a 	bl	8000648 <__aeabi_dmul>
 8015154:	4602      	mov	r2, r0
 8015156:	460b      	mov	r3, r1
 8015158:	4620      	mov	r0, r4
 801515a:	4629      	mov	r1, r5
 801515c:	f7eb f8be 	bl	80002dc <__adddf3>
 8015160:	4604      	mov	r4, r0
 8015162:	460d      	mov	r5, r1
 8015164:	ec45 4b10 	vmov	d0, r4, r5
 8015168:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801516c:	2d00      	cmp	r5, #0
 801516e:	ee10 0a10 	vmov	r0, s0
 8015172:	4621      	mov	r1, r4
 8015174:	dc0f      	bgt.n	8015196 <__ieee754_sqrt+0x62>
 8015176:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 801517a:	4330      	orrs	r0, r6
 801517c:	d0f2      	beq.n	8015164 <__ieee754_sqrt+0x30>
 801517e:	b155      	cbz	r5, 8015196 <__ieee754_sqrt+0x62>
 8015180:	ee10 2a10 	vmov	r2, s0
 8015184:	4620      	mov	r0, r4
 8015186:	4629      	mov	r1, r5
 8015188:	f7eb f8a6 	bl	80002d8 <__aeabi_dsub>
 801518c:	4602      	mov	r2, r0
 801518e:	460b      	mov	r3, r1
 8015190:	f7eb fb84 	bl	800089c <__aeabi_ddiv>
 8015194:	e7e4      	b.n	8015160 <__ieee754_sqrt+0x2c>
 8015196:	151b      	asrs	r3, r3, #20
 8015198:	d073      	beq.n	8015282 <__ieee754_sqrt+0x14e>
 801519a:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 801519e:	07dd      	lsls	r5, r3, #31
 80151a0:	f3c2 0213 	ubfx	r2, r2, #0, #20
 80151a4:	bf48      	it	mi
 80151a6:	0fc8      	lsrmi	r0, r1, #31
 80151a8:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 80151ac:	bf44      	itt	mi
 80151ae:	0049      	lslmi	r1, r1, #1
 80151b0:	eb00 0242 	addmi.w	r2, r0, r2, lsl #1
 80151b4:	2500      	movs	r5, #0
 80151b6:	1058      	asrs	r0, r3, #1
 80151b8:	0fcb      	lsrs	r3, r1, #31
 80151ba:	eb03 0242 	add.w	r2, r3, r2, lsl #1
 80151be:	0049      	lsls	r1, r1, #1
 80151c0:	2316      	movs	r3, #22
 80151c2:	462c      	mov	r4, r5
 80151c4:	f44f 1600 	mov.w	r6, #2097152	; 0x200000
 80151c8:	19a7      	adds	r7, r4, r6
 80151ca:	4297      	cmp	r7, r2
 80151cc:	bfde      	ittt	le
 80151ce:	19bc      	addle	r4, r7, r6
 80151d0:	1bd2      	suble	r2, r2, r7
 80151d2:	19ad      	addle	r5, r5, r6
 80151d4:	0fcf      	lsrs	r7, r1, #31
 80151d6:	3b01      	subs	r3, #1
 80151d8:	eb07 0242 	add.w	r2, r7, r2, lsl #1
 80151dc:	ea4f 0141 	mov.w	r1, r1, lsl #1
 80151e0:	ea4f 0656 	mov.w	r6, r6, lsr #1
 80151e4:	d1f0      	bne.n	80151c8 <__ieee754_sqrt+0x94>
 80151e6:	f04f 0c20 	mov.w	ip, #32
 80151ea:	469e      	mov	lr, r3
 80151ec:	f04f 4600 	mov.w	r6, #2147483648	; 0x80000000
 80151f0:	42a2      	cmp	r2, r4
 80151f2:	eb06 070e 	add.w	r7, r6, lr
 80151f6:	dc02      	bgt.n	80151fe <__ieee754_sqrt+0xca>
 80151f8:	d112      	bne.n	8015220 <__ieee754_sqrt+0xec>
 80151fa:	428f      	cmp	r7, r1
 80151fc:	d810      	bhi.n	8015220 <__ieee754_sqrt+0xec>
 80151fe:	2f00      	cmp	r7, #0
 8015200:	eb07 0e06 	add.w	lr, r7, r6
 8015204:	da42      	bge.n	801528c <__ieee754_sqrt+0x158>
 8015206:	f1be 0f00 	cmp.w	lr, #0
 801520a:	db3f      	blt.n	801528c <__ieee754_sqrt+0x158>
 801520c:	f104 0801 	add.w	r8, r4, #1
 8015210:	1b12      	subs	r2, r2, r4
 8015212:	428f      	cmp	r7, r1
 8015214:	bf88      	it	hi
 8015216:	f102 32ff 	addhi.w	r2, r2, #4294967295	; 0xffffffff
 801521a:	1bc9      	subs	r1, r1, r7
 801521c:	4433      	add	r3, r6
 801521e:	4644      	mov	r4, r8
 8015220:	0052      	lsls	r2, r2, #1
 8015222:	f1bc 0c01 	subs.w	ip, ip, #1
 8015226:	eb02 72d1 	add.w	r2, r2, r1, lsr #31
 801522a:	ea4f 0656 	mov.w	r6, r6, lsr #1
 801522e:	ea4f 0141 	mov.w	r1, r1, lsl #1
 8015232:	d1dd      	bne.n	80151f0 <__ieee754_sqrt+0xbc>
 8015234:	430a      	orrs	r2, r1
 8015236:	d006      	beq.n	8015246 <__ieee754_sqrt+0x112>
 8015238:	1c5c      	adds	r4, r3, #1
 801523a:	bf13      	iteet	ne
 801523c:	3301      	addne	r3, #1
 801523e:	3501      	addeq	r5, #1
 8015240:	4663      	moveq	r3, ip
 8015242:	f023 0301 	bicne.w	r3, r3, #1
 8015246:	106a      	asrs	r2, r5, #1
 8015248:	085b      	lsrs	r3, r3, #1
 801524a:	07e9      	lsls	r1, r5, #31
 801524c:	f102 527f 	add.w	r2, r2, #1069547520	; 0x3fc00000
 8015250:	f502 1200 	add.w	r2, r2, #2097152	; 0x200000
 8015254:	bf48      	it	mi
 8015256:	f043 4300 	orrmi.w	r3, r3, #2147483648	; 0x80000000
 801525a:	eb02 5500 	add.w	r5, r2, r0, lsl #20
 801525e:	461c      	mov	r4, r3
 8015260:	e780      	b.n	8015164 <__ieee754_sqrt+0x30>
 8015262:	0aca      	lsrs	r2, r1, #11
 8015264:	3815      	subs	r0, #21
 8015266:	0549      	lsls	r1, r1, #21
 8015268:	2a00      	cmp	r2, #0
 801526a:	d0fa      	beq.n	8015262 <__ieee754_sqrt+0x12e>
 801526c:	02d6      	lsls	r6, r2, #11
 801526e:	d50a      	bpl.n	8015286 <__ieee754_sqrt+0x152>
 8015270:	f1c3 0420 	rsb	r4, r3, #32
 8015274:	fa21 f404 	lsr.w	r4, r1, r4
 8015278:	1e5d      	subs	r5, r3, #1
 801527a:	4099      	lsls	r1, r3
 801527c:	4322      	orrs	r2, r4
 801527e:	1b43      	subs	r3, r0, r5
 8015280:	e78b      	b.n	801519a <__ieee754_sqrt+0x66>
 8015282:	4618      	mov	r0, r3
 8015284:	e7f0      	b.n	8015268 <__ieee754_sqrt+0x134>
 8015286:	0052      	lsls	r2, r2, #1
 8015288:	3301      	adds	r3, #1
 801528a:	e7ef      	b.n	801526c <__ieee754_sqrt+0x138>
 801528c:	46a0      	mov	r8, r4
 801528e:	e7bf      	b.n	8015210 <__ieee754_sqrt+0xdc>
 8015290:	7ff00000 	.word	0x7ff00000

08015294 <fabs>:
 8015294:	ec51 0b10 	vmov	r0, r1, d0
 8015298:	ee10 2a10 	vmov	r2, s0
 801529c:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 80152a0:	ec43 2b10 	vmov	d0, r2, r3
 80152a4:	4770      	bx	lr

080152a6 <finite>:
 80152a6:	ee10 3a90 	vmov	r3, s1
 80152aa:	f043 4000 	orr.w	r0, r3, #2147483648	; 0x80000000
 80152ae:	f500 1080 	add.w	r0, r0, #1048576	; 0x100000
 80152b2:	0fc0      	lsrs	r0, r0, #31
 80152b4:	4770      	bx	lr

080152b6 <matherr>:
 80152b6:	2000      	movs	r0, #0
 80152b8:	4770      	bx	lr
 80152ba:	0000      	movs	r0, r0
 80152bc:	0000      	movs	r0, r0
	...

080152c0 <nan>:
 80152c0:	ed9f 0b01 	vldr	d0, [pc, #4]	; 80152c8 <nan+0x8>
 80152c4:	4770      	bx	lr
 80152c6:	bf00      	nop
 80152c8:	00000000 	.word	0x00000000
 80152cc:	7ff80000 	.word	0x7ff80000

080152d0 <rint>:
 80152d0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80152d2:	ec51 0b10 	vmov	r0, r1, d0
 80152d6:	f3c1 520a 	ubfx	r2, r1, #20, #11
 80152da:	f2a2 36ff 	subw	r6, r2, #1023	; 0x3ff
 80152de:	2e13      	cmp	r6, #19
 80152e0:	460b      	mov	r3, r1
 80152e2:	ee10 4a10 	vmov	r4, s0
 80152e6:	ea4f 75d1 	mov.w	r5, r1, lsr #31
 80152ea:	dc56      	bgt.n	801539a <rint+0xca>
 80152ec:	2e00      	cmp	r6, #0
 80152ee:	da2b      	bge.n	8015348 <rint+0x78>
 80152f0:	f021 4200 	bic.w	r2, r1, #2147483648	; 0x80000000
 80152f4:	4302      	orrs	r2, r0
 80152f6:	d023      	beq.n	8015340 <rint+0x70>
 80152f8:	f3c1 0213 	ubfx	r2, r1, #0, #20
 80152fc:	4302      	orrs	r2, r0
 80152fe:	4254      	negs	r4, r2
 8015300:	4314      	orrs	r4, r2
 8015302:	0c4b      	lsrs	r3, r1, #17
 8015304:	0b24      	lsrs	r4, r4, #12
 8015306:	045b      	lsls	r3, r3, #17
 8015308:	f404 2400 	and.w	r4, r4, #524288	; 0x80000
 801530c:	ea44 0103 	orr.w	r1, r4, r3
 8015310:	460b      	mov	r3, r1
 8015312:	492f      	ldr	r1, [pc, #188]	; (80153d0 <rint+0x100>)
 8015314:	eb01 01c5 	add.w	r1, r1, r5, lsl #3
 8015318:	e9d1 6700 	ldrd	r6, r7, [r1]
 801531c:	4602      	mov	r2, r0
 801531e:	4639      	mov	r1, r7
 8015320:	4630      	mov	r0, r6
 8015322:	f7ea ffdb 	bl	80002dc <__adddf3>
 8015326:	e9cd 0100 	strd	r0, r1, [sp]
 801532a:	463b      	mov	r3, r7
 801532c:	4632      	mov	r2, r6
 801532e:	e9dd 0100 	ldrd	r0, r1, [sp]
 8015332:	f7ea ffd1 	bl	80002d8 <__aeabi_dsub>
 8015336:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 801533a:	ea43 77c5 	orr.w	r7, r3, r5, lsl #31
 801533e:	4639      	mov	r1, r7
 8015340:	ec41 0b10 	vmov	d0, r0, r1
 8015344:	b003      	add	sp, #12
 8015346:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8015348:	4a22      	ldr	r2, [pc, #136]	; (80153d4 <rint+0x104>)
 801534a:	4132      	asrs	r2, r6
 801534c:	ea01 0702 	and.w	r7, r1, r2
 8015350:	4307      	orrs	r7, r0
 8015352:	d0f5      	beq.n	8015340 <rint+0x70>
 8015354:	0852      	lsrs	r2, r2, #1
 8015356:	4011      	ands	r1, r2
 8015358:	430c      	orrs	r4, r1
 801535a:	d00b      	beq.n	8015374 <rint+0xa4>
 801535c:	ea23 0202 	bic.w	r2, r3, r2
 8015360:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8015364:	2e13      	cmp	r6, #19
 8015366:	fa43 f306 	asr.w	r3, r3, r6
 801536a:	bf0c      	ite	eq
 801536c:	f04f 4400 	moveq.w	r4, #2147483648	; 0x80000000
 8015370:	2400      	movne	r4, #0
 8015372:	4313      	orrs	r3, r2
 8015374:	4916      	ldr	r1, [pc, #88]	; (80153d0 <rint+0x100>)
 8015376:	eb01 05c5 	add.w	r5, r1, r5, lsl #3
 801537a:	4622      	mov	r2, r4
 801537c:	e9d5 4500 	ldrd	r4, r5, [r5]
 8015380:	4620      	mov	r0, r4
 8015382:	4629      	mov	r1, r5
 8015384:	f7ea ffaa 	bl	80002dc <__adddf3>
 8015388:	e9cd 0100 	strd	r0, r1, [sp]
 801538c:	4622      	mov	r2, r4
 801538e:	462b      	mov	r3, r5
 8015390:	e9dd 0100 	ldrd	r0, r1, [sp]
 8015394:	f7ea ffa0 	bl	80002d8 <__aeabi_dsub>
 8015398:	e7d2      	b.n	8015340 <rint+0x70>
 801539a:	2e33      	cmp	r6, #51	; 0x33
 801539c:	dd07      	ble.n	80153ae <rint+0xde>
 801539e:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
 80153a2:	d1cd      	bne.n	8015340 <rint+0x70>
 80153a4:	ee10 2a10 	vmov	r2, s0
 80153a8:	f7ea ff98 	bl	80002dc <__adddf3>
 80153ac:	e7c8      	b.n	8015340 <rint+0x70>
 80153ae:	f2a2 4613 	subw	r6, r2, #1043	; 0x413
 80153b2:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80153b6:	40f2      	lsrs	r2, r6
 80153b8:	4210      	tst	r0, r2
 80153ba:	d0c1      	beq.n	8015340 <rint+0x70>
 80153bc:	0852      	lsrs	r2, r2, #1
 80153be:	4210      	tst	r0, r2
 80153c0:	bf1f      	itttt	ne
 80153c2:	f04f 4480 	movne.w	r4, #1073741824	; 0x40000000
 80153c6:	ea20 0202 	bicne.w	r2, r0, r2
 80153ca:	4134      	asrne	r4, r6
 80153cc:	4314      	orrne	r4, r2
 80153ce:	e7d1      	b.n	8015374 <rint+0xa4>
 80153d0:	08016c78 	.word	0x08016c78
 80153d4:	000fffff 	.word	0x000fffff

080153d8 <scalbn>:
 80153d8:	b570      	push	{r4, r5, r6, lr}
 80153da:	ec55 4b10 	vmov	r4, r5, d0
 80153de:	f3c5 520a 	ubfx	r2, r5, #20, #11
 80153e2:	4606      	mov	r6, r0
 80153e4:	462b      	mov	r3, r5
 80153e6:	b9aa      	cbnz	r2, 8015414 <scalbn+0x3c>
 80153e8:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 80153ec:	4323      	orrs	r3, r4
 80153ee:	d03b      	beq.n	8015468 <scalbn+0x90>
 80153f0:	4b31      	ldr	r3, [pc, #196]	; (80154b8 <scalbn+0xe0>)
 80153f2:	4629      	mov	r1, r5
 80153f4:	2200      	movs	r2, #0
 80153f6:	ee10 0a10 	vmov	r0, s0
 80153fa:	f7eb f925 	bl	8000648 <__aeabi_dmul>
 80153fe:	4b2f      	ldr	r3, [pc, #188]	; (80154bc <scalbn+0xe4>)
 8015400:	429e      	cmp	r6, r3
 8015402:	4604      	mov	r4, r0
 8015404:	460d      	mov	r5, r1
 8015406:	da12      	bge.n	801542e <scalbn+0x56>
 8015408:	a327      	add	r3, pc, #156	; (adr r3, 80154a8 <scalbn+0xd0>)
 801540a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801540e:	f7eb f91b 	bl	8000648 <__aeabi_dmul>
 8015412:	e009      	b.n	8015428 <scalbn+0x50>
 8015414:	f240 71ff 	movw	r1, #2047	; 0x7ff
 8015418:	428a      	cmp	r2, r1
 801541a:	d10c      	bne.n	8015436 <scalbn+0x5e>
 801541c:	ee10 2a10 	vmov	r2, s0
 8015420:	4620      	mov	r0, r4
 8015422:	4629      	mov	r1, r5
 8015424:	f7ea ff5a 	bl	80002dc <__adddf3>
 8015428:	4604      	mov	r4, r0
 801542a:	460d      	mov	r5, r1
 801542c:	e01c      	b.n	8015468 <scalbn+0x90>
 801542e:	f3c1 520a 	ubfx	r2, r1, #20, #11
 8015432:	460b      	mov	r3, r1
 8015434:	3a36      	subs	r2, #54	; 0x36
 8015436:	4432      	add	r2, r6
 8015438:	f240 71fe 	movw	r1, #2046	; 0x7fe
 801543c:	428a      	cmp	r2, r1
 801543e:	dd0b      	ble.n	8015458 <scalbn+0x80>
 8015440:	ec45 4b11 	vmov	d1, r4, r5
 8015444:	ed9f 0b1a 	vldr	d0, [pc, #104]	; 80154b0 <scalbn+0xd8>
 8015448:	f000 f9f0 	bl	801582c <copysign>
 801544c:	a318      	add	r3, pc, #96	; (adr r3, 80154b0 <scalbn+0xd8>)
 801544e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8015452:	ec51 0b10 	vmov	r0, r1, d0
 8015456:	e7da      	b.n	801540e <scalbn+0x36>
 8015458:	2a00      	cmp	r2, #0
 801545a:	dd08      	ble.n	801546e <scalbn+0x96>
 801545c:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 8015460:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8015464:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 8015468:	ec45 4b10 	vmov	d0, r4, r5
 801546c:	bd70      	pop	{r4, r5, r6, pc}
 801546e:	f112 0f35 	cmn.w	r2, #53	; 0x35
 8015472:	da0d      	bge.n	8015490 <scalbn+0xb8>
 8015474:	f24c 3350 	movw	r3, #50000	; 0xc350
 8015478:	429e      	cmp	r6, r3
 801547a:	ec45 4b11 	vmov	d1, r4, r5
 801547e:	dce1      	bgt.n	8015444 <scalbn+0x6c>
 8015480:	ed9f 0b09 	vldr	d0, [pc, #36]	; 80154a8 <scalbn+0xd0>
 8015484:	f000 f9d2 	bl	801582c <copysign>
 8015488:	a307      	add	r3, pc, #28	; (adr r3, 80154a8 <scalbn+0xd0>)
 801548a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801548e:	e7e0      	b.n	8015452 <scalbn+0x7a>
 8015490:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 8015494:	3236      	adds	r2, #54	; 0x36
 8015496:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 801549a:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 801549e:	4620      	mov	r0, r4
 80154a0:	4629      	mov	r1, r5
 80154a2:	2200      	movs	r2, #0
 80154a4:	4b06      	ldr	r3, [pc, #24]	; (80154c0 <scalbn+0xe8>)
 80154a6:	e7b2      	b.n	801540e <scalbn+0x36>
 80154a8:	c2f8f359 	.word	0xc2f8f359
 80154ac:	01a56e1f 	.word	0x01a56e1f
 80154b0:	8800759c 	.word	0x8800759c
 80154b4:	7e37e43c 	.word	0x7e37e43c
 80154b8:	43500000 	.word	0x43500000
 80154bc:	ffff3cb0 	.word	0xffff3cb0
 80154c0:	3c900000 	.word	0x3c900000
 80154c4:	00000000 	.word	0x00000000

080154c8 <__ieee754_log>:
 80154c8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80154cc:	ec51 0b10 	vmov	r0, r1, d0
 80154d0:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80154d4:	b087      	sub	sp, #28
 80154d6:	460d      	mov	r5, r1
 80154d8:	da27      	bge.n	801552a <__ieee754_log+0x62>
 80154da:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 80154de:	4303      	orrs	r3, r0
 80154e0:	ee10 2a10 	vmov	r2, s0
 80154e4:	d10a      	bne.n	80154fc <__ieee754_log+0x34>
 80154e6:	49cc      	ldr	r1, [pc, #816]	; (8015818 <__ieee754_log+0x350>)
 80154e8:	2200      	movs	r2, #0
 80154ea:	2300      	movs	r3, #0
 80154ec:	2000      	movs	r0, #0
 80154ee:	f7eb f9d5 	bl	800089c <__aeabi_ddiv>
 80154f2:	ec41 0b10 	vmov	d0, r0, r1
 80154f6:	b007      	add	sp, #28
 80154f8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80154fc:	2900      	cmp	r1, #0
 80154fe:	da05      	bge.n	801550c <__ieee754_log+0x44>
 8015500:	460b      	mov	r3, r1
 8015502:	f7ea fee9 	bl	80002d8 <__aeabi_dsub>
 8015506:	2200      	movs	r2, #0
 8015508:	2300      	movs	r3, #0
 801550a:	e7f0      	b.n	80154ee <__ieee754_log+0x26>
 801550c:	4bc3      	ldr	r3, [pc, #780]	; (801581c <__ieee754_log+0x354>)
 801550e:	2200      	movs	r2, #0
 8015510:	f7eb f89a 	bl	8000648 <__aeabi_dmul>
 8015514:	f06f 0335 	mvn.w	r3, #53	; 0x35
 8015518:	460d      	mov	r5, r1
 801551a:	4ac1      	ldr	r2, [pc, #772]	; (8015820 <__ieee754_log+0x358>)
 801551c:	4295      	cmp	r5, r2
 801551e:	dd06      	ble.n	801552e <__ieee754_log+0x66>
 8015520:	4602      	mov	r2, r0
 8015522:	460b      	mov	r3, r1
 8015524:	f7ea feda 	bl	80002dc <__adddf3>
 8015528:	e7e3      	b.n	80154f2 <__ieee754_log+0x2a>
 801552a:	2300      	movs	r3, #0
 801552c:	e7f5      	b.n	801551a <__ieee754_log+0x52>
 801552e:	152c      	asrs	r4, r5, #20
 8015530:	f2a4 34ff 	subw	r4, r4, #1023	; 0x3ff
 8015534:	f3c5 0513 	ubfx	r5, r5, #0, #20
 8015538:	441c      	add	r4, r3
 801553a:	f505 2315 	add.w	r3, r5, #610304	; 0x95000
 801553e:	f603 7364 	addw	r3, r3, #3940	; 0xf64
 8015542:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8015546:	f083 527f 	eor.w	r2, r3, #1069547520	; 0x3fc00000
 801554a:	f482 1240 	eor.w	r2, r2, #3145728	; 0x300000
 801554e:	ea42 0105 	orr.w	r1, r2, r5
 8015552:	eb04 5413 	add.w	r4, r4, r3, lsr #20
 8015556:	2200      	movs	r2, #0
 8015558:	4bb2      	ldr	r3, [pc, #712]	; (8015824 <__ieee754_log+0x35c>)
 801555a:	f7ea febd 	bl	80002d8 <__aeabi_dsub>
 801555e:	1cab      	adds	r3, r5, #2
 8015560:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8015564:	2b02      	cmp	r3, #2
 8015566:	4682      	mov	sl, r0
 8015568:	468b      	mov	fp, r1
 801556a:	f04f 0200 	mov.w	r2, #0
 801556e:	dc53      	bgt.n	8015618 <__ieee754_log+0x150>
 8015570:	2300      	movs	r3, #0
 8015572:	f7eb fad1 	bl	8000b18 <__aeabi_dcmpeq>
 8015576:	b1d0      	cbz	r0, 80155ae <__ieee754_log+0xe6>
 8015578:	2c00      	cmp	r4, #0
 801557a:	f000 8120 	beq.w	80157be <__ieee754_log+0x2f6>
 801557e:	4620      	mov	r0, r4
 8015580:	f7ea fff8 	bl	8000574 <__aeabi_i2d>
 8015584:	a390      	add	r3, pc, #576	; (adr r3, 80157c8 <__ieee754_log+0x300>)
 8015586:	e9d3 2300 	ldrd	r2, r3, [r3]
 801558a:	4606      	mov	r6, r0
 801558c:	460f      	mov	r7, r1
 801558e:	f7eb f85b 	bl	8000648 <__aeabi_dmul>
 8015592:	a38f      	add	r3, pc, #572	; (adr r3, 80157d0 <__ieee754_log+0x308>)
 8015594:	e9d3 2300 	ldrd	r2, r3, [r3]
 8015598:	4604      	mov	r4, r0
 801559a:	460d      	mov	r5, r1
 801559c:	4630      	mov	r0, r6
 801559e:	4639      	mov	r1, r7
 80155a0:	f7eb f852 	bl	8000648 <__aeabi_dmul>
 80155a4:	4602      	mov	r2, r0
 80155a6:	460b      	mov	r3, r1
 80155a8:	4620      	mov	r0, r4
 80155aa:	4629      	mov	r1, r5
 80155ac:	e7ba      	b.n	8015524 <__ieee754_log+0x5c>
 80155ae:	a38a      	add	r3, pc, #552	; (adr r3, 80157d8 <__ieee754_log+0x310>)
 80155b0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80155b4:	4650      	mov	r0, sl
 80155b6:	4659      	mov	r1, fp
 80155b8:	f7eb f846 	bl	8000648 <__aeabi_dmul>
 80155bc:	4602      	mov	r2, r0
 80155be:	460b      	mov	r3, r1
 80155c0:	2000      	movs	r0, #0
 80155c2:	4999      	ldr	r1, [pc, #612]	; (8015828 <__ieee754_log+0x360>)
 80155c4:	f7ea fe88 	bl	80002d8 <__aeabi_dsub>
 80155c8:	4652      	mov	r2, sl
 80155ca:	4606      	mov	r6, r0
 80155cc:	460f      	mov	r7, r1
 80155ce:	465b      	mov	r3, fp
 80155d0:	4650      	mov	r0, sl
 80155d2:	4659      	mov	r1, fp
 80155d4:	f7eb f838 	bl	8000648 <__aeabi_dmul>
 80155d8:	4602      	mov	r2, r0
 80155da:	460b      	mov	r3, r1
 80155dc:	4630      	mov	r0, r6
 80155de:	4639      	mov	r1, r7
 80155e0:	f7eb f832 	bl	8000648 <__aeabi_dmul>
 80155e4:	4606      	mov	r6, r0
 80155e6:	460f      	mov	r7, r1
 80155e8:	b914      	cbnz	r4, 80155f0 <__ieee754_log+0x128>
 80155ea:	4632      	mov	r2, r6
 80155ec:	463b      	mov	r3, r7
 80155ee:	e0a0      	b.n	8015732 <__ieee754_log+0x26a>
 80155f0:	4620      	mov	r0, r4
 80155f2:	f7ea ffbf 	bl	8000574 <__aeabi_i2d>
 80155f6:	a374      	add	r3, pc, #464	; (adr r3, 80157c8 <__ieee754_log+0x300>)
 80155f8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80155fc:	4680      	mov	r8, r0
 80155fe:	4689      	mov	r9, r1
 8015600:	f7eb f822 	bl	8000648 <__aeabi_dmul>
 8015604:	a372      	add	r3, pc, #456	; (adr r3, 80157d0 <__ieee754_log+0x308>)
 8015606:	e9d3 2300 	ldrd	r2, r3, [r3]
 801560a:	4604      	mov	r4, r0
 801560c:	460d      	mov	r5, r1
 801560e:	4640      	mov	r0, r8
 8015610:	4649      	mov	r1, r9
 8015612:	f7eb f819 	bl	8000648 <__aeabi_dmul>
 8015616:	e0a5      	b.n	8015764 <__ieee754_log+0x29c>
 8015618:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 801561c:	f7ea fe5e 	bl	80002dc <__adddf3>
 8015620:	4602      	mov	r2, r0
 8015622:	460b      	mov	r3, r1
 8015624:	4650      	mov	r0, sl
 8015626:	4659      	mov	r1, fp
 8015628:	f7eb f938 	bl	800089c <__aeabi_ddiv>
 801562c:	e9cd 0100 	strd	r0, r1, [sp]
 8015630:	4620      	mov	r0, r4
 8015632:	f7ea ff9f 	bl	8000574 <__aeabi_i2d>
 8015636:	e9dd 2300 	ldrd	r2, r3, [sp]
 801563a:	e9cd 0102 	strd	r0, r1, [sp, #8]
 801563e:	4610      	mov	r0, r2
 8015640:	4619      	mov	r1, r3
 8015642:	f7eb f801 	bl	8000648 <__aeabi_dmul>
 8015646:	4602      	mov	r2, r0
 8015648:	460b      	mov	r3, r1
 801564a:	e9cd 0104 	strd	r0, r1, [sp, #16]
 801564e:	f7ea fffb 	bl	8000648 <__aeabi_dmul>
 8015652:	a363      	add	r3, pc, #396	; (adr r3, 80157e0 <__ieee754_log+0x318>)
 8015654:	e9d3 2300 	ldrd	r2, r3, [r3]
 8015658:	4680      	mov	r8, r0
 801565a:	4689      	mov	r9, r1
 801565c:	f7ea fff4 	bl	8000648 <__aeabi_dmul>
 8015660:	a361      	add	r3, pc, #388	; (adr r3, 80157e8 <__ieee754_log+0x320>)
 8015662:	e9d3 2300 	ldrd	r2, r3, [r3]
 8015666:	f7ea fe39 	bl	80002dc <__adddf3>
 801566a:	4642      	mov	r2, r8
 801566c:	464b      	mov	r3, r9
 801566e:	f7ea ffeb 	bl	8000648 <__aeabi_dmul>
 8015672:	a35f      	add	r3, pc, #380	; (adr r3, 80157f0 <__ieee754_log+0x328>)
 8015674:	e9d3 2300 	ldrd	r2, r3, [r3]
 8015678:	f7ea fe30 	bl	80002dc <__adddf3>
 801567c:	4642      	mov	r2, r8
 801567e:	464b      	mov	r3, r9
 8015680:	f7ea ffe2 	bl	8000648 <__aeabi_dmul>
 8015684:	a35c      	add	r3, pc, #368	; (adr r3, 80157f8 <__ieee754_log+0x330>)
 8015686:	e9d3 2300 	ldrd	r2, r3, [r3]
 801568a:	f7ea fe27 	bl	80002dc <__adddf3>
 801568e:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8015692:	f7ea ffd9 	bl	8000648 <__aeabi_dmul>
 8015696:	a35a      	add	r3, pc, #360	; (adr r3, 8015800 <__ieee754_log+0x338>)
 8015698:	e9d3 2300 	ldrd	r2, r3, [r3]
 801569c:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80156a0:	4640      	mov	r0, r8
 80156a2:	4649      	mov	r1, r9
 80156a4:	f7ea ffd0 	bl	8000648 <__aeabi_dmul>
 80156a8:	a357      	add	r3, pc, #348	; (adr r3, 8015808 <__ieee754_log+0x340>)
 80156aa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80156ae:	f7ea fe15 	bl	80002dc <__adddf3>
 80156b2:	4642      	mov	r2, r8
 80156b4:	464b      	mov	r3, r9
 80156b6:	f7ea ffc7 	bl	8000648 <__aeabi_dmul>
 80156ba:	a355      	add	r3, pc, #340	; (adr r3, 8015810 <__ieee754_log+0x348>)
 80156bc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80156c0:	f7ea fe0c 	bl	80002dc <__adddf3>
 80156c4:	4642      	mov	r2, r8
 80156c6:	464b      	mov	r3, r9
 80156c8:	f7ea ffbe 	bl	8000648 <__aeabi_dmul>
 80156cc:	f5a5 26c2 	sub.w	r6, r5, #397312	; 0x61000
 80156d0:	4602      	mov	r2, r0
 80156d2:	460b      	mov	r3, r1
 80156d4:	f5c5 25d7 	rsb	r5, r5, #440320	; 0x6b800
 80156d8:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80156dc:	f7ea fdfe 	bl	80002dc <__adddf3>
 80156e0:	f2a6 467a 	subw	r6, r6, #1146	; 0x47a
 80156e4:	3551      	adds	r5, #81	; 0x51
 80156e6:	4335      	orrs	r5, r6
 80156e8:	2d00      	cmp	r5, #0
 80156ea:	4680      	mov	r8, r0
 80156ec:	4689      	mov	r9, r1
 80156ee:	dd48      	ble.n	8015782 <__ieee754_log+0x2ba>
 80156f0:	2200      	movs	r2, #0
 80156f2:	4b4d      	ldr	r3, [pc, #308]	; (8015828 <__ieee754_log+0x360>)
 80156f4:	4650      	mov	r0, sl
 80156f6:	4659      	mov	r1, fp
 80156f8:	f7ea ffa6 	bl	8000648 <__aeabi_dmul>
 80156fc:	4652      	mov	r2, sl
 80156fe:	465b      	mov	r3, fp
 8015700:	f7ea ffa2 	bl	8000648 <__aeabi_dmul>
 8015704:	4602      	mov	r2, r0
 8015706:	460b      	mov	r3, r1
 8015708:	4606      	mov	r6, r0
 801570a:	460f      	mov	r7, r1
 801570c:	4640      	mov	r0, r8
 801570e:	4649      	mov	r1, r9
 8015710:	f7ea fde4 	bl	80002dc <__adddf3>
 8015714:	e9dd 2300 	ldrd	r2, r3, [sp]
 8015718:	f7ea ff96 	bl	8000648 <__aeabi_dmul>
 801571c:	4680      	mov	r8, r0
 801571e:	4689      	mov	r9, r1
 8015720:	b964      	cbnz	r4, 801573c <__ieee754_log+0x274>
 8015722:	4602      	mov	r2, r0
 8015724:	460b      	mov	r3, r1
 8015726:	4630      	mov	r0, r6
 8015728:	4639      	mov	r1, r7
 801572a:	f7ea fdd5 	bl	80002d8 <__aeabi_dsub>
 801572e:	4602      	mov	r2, r0
 8015730:	460b      	mov	r3, r1
 8015732:	4650      	mov	r0, sl
 8015734:	4659      	mov	r1, fp
 8015736:	f7ea fdcf 	bl	80002d8 <__aeabi_dsub>
 801573a:	e6da      	b.n	80154f2 <__ieee754_log+0x2a>
 801573c:	a322      	add	r3, pc, #136	; (adr r3, 80157c8 <__ieee754_log+0x300>)
 801573e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8015742:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8015746:	f7ea ff7f 	bl	8000648 <__aeabi_dmul>
 801574a:	a321      	add	r3, pc, #132	; (adr r3, 80157d0 <__ieee754_log+0x308>)
 801574c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8015750:	4604      	mov	r4, r0
 8015752:	460d      	mov	r5, r1
 8015754:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8015758:	f7ea ff76 	bl	8000648 <__aeabi_dmul>
 801575c:	4642      	mov	r2, r8
 801575e:	464b      	mov	r3, r9
 8015760:	f7ea fdbc 	bl	80002dc <__adddf3>
 8015764:	4602      	mov	r2, r0
 8015766:	460b      	mov	r3, r1
 8015768:	4630      	mov	r0, r6
 801576a:	4639      	mov	r1, r7
 801576c:	f7ea fdb4 	bl	80002d8 <__aeabi_dsub>
 8015770:	4652      	mov	r2, sl
 8015772:	465b      	mov	r3, fp
 8015774:	f7ea fdb0 	bl	80002d8 <__aeabi_dsub>
 8015778:	4602      	mov	r2, r0
 801577a:	460b      	mov	r3, r1
 801577c:	4620      	mov	r0, r4
 801577e:	4629      	mov	r1, r5
 8015780:	e7d9      	b.n	8015736 <__ieee754_log+0x26e>
 8015782:	4602      	mov	r2, r0
 8015784:	460b      	mov	r3, r1
 8015786:	4650      	mov	r0, sl
 8015788:	4659      	mov	r1, fp
 801578a:	f7ea fda5 	bl	80002d8 <__aeabi_dsub>
 801578e:	e9dd 2300 	ldrd	r2, r3, [sp]
 8015792:	f7ea ff59 	bl	8000648 <__aeabi_dmul>
 8015796:	4606      	mov	r6, r0
 8015798:	460f      	mov	r7, r1
 801579a:	2c00      	cmp	r4, #0
 801579c:	f43f af25 	beq.w	80155ea <__ieee754_log+0x122>
 80157a0:	a309      	add	r3, pc, #36	; (adr r3, 80157c8 <__ieee754_log+0x300>)
 80157a2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80157a6:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80157aa:	f7ea ff4d 	bl	8000648 <__aeabi_dmul>
 80157ae:	a308      	add	r3, pc, #32	; (adr r3, 80157d0 <__ieee754_log+0x308>)
 80157b0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80157b4:	4604      	mov	r4, r0
 80157b6:	460d      	mov	r5, r1
 80157b8:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80157bc:	e729      	b.n	8015612 <__ieee754_log+0x14a>
 80157be:	2000      	movs	r0, #0
 80157c0:	2100      	movs	r1, #0
 80157c2:	e696      	b.n	80154f2 <__ieee754_log+0x2a>
 80157c4:	f3af 8000 	nop.w
 80157c8:	fee00000 	.word	0xfee00000
 80157cc:	3fe62e42 	.word	0x3fe62e42
 80157d0:	35793c76 	.word	0x35793c76
 80157d4:	3dea39ef 	.word	0x3dea39ef
 80157d8:	55555555 	.word	0x55555555
 80157dc:	3fd55555 	.word	0x3fd55555
 80157e0:	df3e5244 	.word	0xdf3e5244
 80157e4:	3fc2f112 	.word	0x3fc2f112
 80157e8:	96cb03de 	.word	0x96cb03de
 80157ec:	3fc74664 	.word	0x3fc74664
 80157f0:	94229359 	.word	0x94229359
 80157f4:	3fd24924 	.word	0x3fd24924
 80157f8:	55555593 	.word	0x55555593
 80157fc:	3fe55555 	.word	0x3fe55555
 8015800:	d078c69f 	.word	0xd078c69f
 8015804:	3fc39a09 	.word	0x3fc39a09
 8015808:	1d8e78af 	.word	0x1d8e78af
 801580c:	3fcc71c5 	.word	0x3fcc71c5
 8015810:	9997fa04 	.word	0x9997fa04
 8015814:	3fd99999 	.word	0x3fd99999
 8015818:	c3500000 	.word	0xc3500000
 801581c:	43500000 	.word	0x43500000
 8015820:	7fefffff 	.word	0x7fefffff
 8015824:	3ff00000 	.word	0x3ff00000
 8015828:	3fe00000 	.word	0x3fe00000

0801582c <copysign>:
 801582c:	ec51 0b10 	vmov	r0, r1, d0
 8015830:	ee11 0a90 	vmov	r0, s3
 8015834:	ee10 2a10 	vmov	r2, s0
 8015838:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 801583c:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8015840:	ea41 0300 	orr.w	r3, r1, r0
 8015844:	ec43 2b10 	vmov	d0, r2, r3
 8015848:	4770      	bx	lr
	...

0801584c <_init>:
 801584c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801584e:	bf00      	nop
 8015850:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8015852:	bc08      	pop	{r3}
 8015854:	469e      	mov	lr, r3
 8015856:	4770      	bx	lr

08015858 <_fini>:
 8015858:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801585a:	bf00      	nop
 801585c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801585e:	bc08      	pop	{r3}
 8015860:	469e      	mov	lr, r3
 8015862:	4770      	bx	lr
