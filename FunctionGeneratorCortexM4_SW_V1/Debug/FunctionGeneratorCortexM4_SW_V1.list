
FunctionGeneratorCortexM4_SW_V1.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00009264  080001d8  080001d8  000101d8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000460  0800943c  0800943c  0001943c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800989c  0800989c  00020bc4  2**0
                  CONTENTS
  4 .ARM          00000000  0800989c  0800989c  00020bc4  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800989c  0800989c  00020bc4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800989c  0800989c  0001989c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080098a0  080098a0  000198a0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000bc4  20000000  080098a4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000004a0  20000bc4  0800a468  00020bc4  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20001064  0800a468  00021064  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020bc4  2**0
                  CONTENTS, READONLY
 12 .debug_info   0002419e  00000000  00000000  00020bf4  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00004b8b  00000000  00000000  00044d92  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00001c48  00000000  00000000  00049920  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00001970  00000000  00000000  0004b568  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  0002f29d  00000000  00000000  0004ced8  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0001ca1c  00000000  00000000  0007c175  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    00123cb6  00000000  00000000  00098b91  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  001bc847  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000078cc  00000000  00000000  001bc8c4  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001d8 <__do_global_dtors_aux>:
 80001d8:	b510      	push	{r4, lr}
 80001da:	4c05      	ldr	r4, [pc, #20]	; (80001f0 <__do_global_dtors_aux+0x18>)
 80001dc:	7823      	ldrb	r3, [r4, #0]
 80001de:	b933      	cbnz	r3, 80001ee <__do_global_dtors_aux+0x16>
 80001e0:	4b04      	ldr	r3, [pc, #16]	; (80001f4 <__do_global_dtors_aux+0x1c>)
 80001e2:	b113      	cbz	r3, 80001ea <__do_global_dtors_aux+0x12>
 80001e4:	4804      	ldr	r0, [pc, #16]	; (80001f8 <__do_global_dtors_aux+0x20>)
 80001e6:	f3af 8000 	nop.w
 80001ea:	2301      	movs	r3, #1
 80001ec:	7023      	strb	r3, [r4, #0]
 80001ee:	bd10      	pop	{r4, pc}
 80001f0:	20000bc4 	.word	0x20000bc4
 80001f4:	00000000 	.word	0x00000000
 80001f8:	08009424 	.word	0x08009424

080001fc <frame_dummy>:
 80001fc:	b508      	push	{r3, lr}
 80001fe:	4b03      	ldr	r3, [pc, #12]	; (800020c <frame_dummy+0x10>)
 8000200:	b11b      	cbz	r3, 800020a <frame_dummy+0xe>
 8000202:	4903      	ldr	r1, [pc, #12]	; (8000210 <frame_dummy+0x14>)
 8000204:	4803      	ldr	r0, [pc, #12]	; (8000214 <frame_dummy+0x18>)
 8000206:	f3af 8000 	nop.w
 800020a:	bd08      	pop	{r3, pc}
 800020c:	00000000 	.word	0x00000000
 8000210:	20000bc8 	.word	0x20000bc8
 8000214:	08009424 	.word	0x08009424

08000218 <DM_Init>:
 *
 *
 *
 */
void DM_Init()
{
 8000218:	b580      	push	{r7, lr}
 800021a:	af00      	add	r7, sp, #0
	  ILI9341_Init();
 800021c:	f008 f898 	bl	8008350 <ILI9341_Init>
	  ILI9341_Set_Rotation(SCREEN_HORIZONTAL_2);
 8000220:	2003      	movs	r0, #3
 8000222:	f008 f837 	bl	8008294 <ILI9341_Set_Rotation>
	  ILI9341_Fill_Screen(WHITE);
 8000226:	f64f 70ff 	movw	r0, #65535	; 0xffff
 800022a:	f008 fa47 	bl	80086bc <ILI9341_Fill_Screen>

}
 800022e:	bf00      	nop
 8000230:	bd80      	pop	{r7, pc}
	...

08000234 <DM_PostInit>:
 *
 *
 *
 */
void DM_PostInit()
{
 8000234:	b580      	push	{r7, lr}
 8000236:	b082      	sub	sp, #8
 8000238:	af02      	add	r7, sp, #8

	  ILI9341_Draw_Text("Initialising", 10, 10, BLACK, 1, WHITE);
 800023a:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800023e:	9301      	str	r3, [sp, #4]
 8000240:	2301      	movs	r3, #1
 8000242:	9300      	str	r3, [sp, #0]
 8000244:	2300      	movs	r3, #0
 8000246:	220a      	movs	r2, #10
 8000248:	210a      	movs	r1, #10
 800024a:	4807      	ldr	r0, [pc, #28]	; (8000268 <DM_PostInit+0x34>)
 800024c:	f007 ff22 	bl	8008094 <ILI9341_Draw_Text>
	  HAL_Delay(500);
 8000250:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000254:	f002 fa26 	bl	80026a4 <HAL_Delay>

	  DM_RefreshBackgroundLayout();
 8000258:	f000 fa18 	bl	800068c <DM_RefreshBackgroundLayout>
	  printf("Init Completed\n");
 800025c:	4803      	ldr	r0, [pc, #12]	; (800026c <DM_PostInit+0x38>)
 800025e:	f008 fcd5 	bl	8008c0c <puts>
}
 8000262:	bf00      	nop
 8000264:	46bd      	mov	sp, r7
 8000266:	bd80      	pop	{r7, pc}
 8000268:	0800943c 	.word	0x0800943c
 800026c:	0800944c 	.word	0x0800944c

08000270 <DM_UpdateDisplay>:
 *
 *
 */

void DM_UpdateDisplay()
{
 8000270:	b580      	push	{r7, lr}
 8000272:	b082      	sub	sp, #8
 8000274:	af02      	add	r7, sp, #8

	ILI9341_Draw_Text("FUNC", 10, 210, BLACK, 2, DARKCYAN);
 8000276:	f240 33ef 	movw	r3, #1007	; 0x3ef
 800027a:	9301      	str	r3, [sp, #4]
 800027c:	2302      	movs	r3, #2
 800027e:	9300      	str	r3, [sp, #0]
 8000280:	2300      	movs	r3, #0
 8000282:	22d2      	movs	r2, #210	; 0xd2
 8000284:	210a      	movs	r1, #10
 8000286:	4817      	ldr	r0, [pc, #92]	; (80002e4 <DM_UpdateDisplay+0x74>)
 8000288:	f007 ff04 	bl	8008094 <ILI9341_Draw_Text>
	ILI9341_Draw_Text("FREQ", 100, 210, BLACK, 2, DARKGREEN);
 800028c:	f44f 7378 	mov.w	r3, #992	; 0x3e0
 8000290:	9301      	str	r3, [sp, #4]
 8000292:	2302      	movs	r3, #2
 8000294:	9300      	str	r3, [sp, #0]
 8000296:	2300      	movs	r3, #0
 8000298:	22d2      	movs	r2, #210	; 0xd2
 800029a:	2164      	movs	r1, #100	; 0x64
 800029c:	4812      	ldr	r0, [pc, #72]	; (80002e8 <DM_UpdateDisplay+0x78>)
 800029e:	f007 fef9 	bl	8008094 <ILI9341_Draw_Text>
	ILI9341_Draw_Text("AMPL", 175, 210, BLACK, 2, YELLOW);
 80002a2:	f64f 73e0 	movw	r3, #65504	; 0xffe0
 80002a6:	9301      	str	r3, [sp, #4]
 80002a8:	2302      	movs	r3, #2
 80002aa:	9300      	str	r3, [sp, #0]
 80002ac:	2300      	movs	r3, #0
 80002ae:	22d2      	movs	r2, #210	; 0xd2
 80002b0:	21af      	movs	r1, #175	; 0xaf
 80002b2:	480e      	ldr	r0, [pc, #56]	; (80002ec <DM_UpdateDisplay+0x7c>)
 80002b4:	f007 feee 	bl	8008094 <ILI9341_Draw_Text>
	ILI9341_Draw_Text("BIAS", 260, 210, BLACK, 2, RED);
 80002b8:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 80002bc:	9301      	str	r3, [sp, #4]
 80002be:	2302      	movs	r3, #2
 80002c0:	9300      	str	r3, [sp, #0]
 80002c2:	2300      	movs	r3, #0
 80002c4:	22d2      	movs	r2, #210	; 0xd2
 80002c6:	f44f 7182 	mov.w	r1, #260	; 0x104
 80002ca:	4809      	ldr	r0, [pc, #36]	; (80002f0 <DM_UpdateDisplay+0x80>)
 80002cc:	f007 fee2 	bl	8008094 <ILI9341_Draw_Text>

	if(eNextFuncMenuStatus)		//  == ENABLE_FUNCMENU
 80002d0:	4b08      	ldr	r3, [pc, #32]	; (80002f4 <DM_UpdateDisplay+0x84>)
 80002d2:	781b      	ldrb	r3, [r3, #0]
 80002d4:	2b00      	cmp	r3, #0
 80002d6:	d001      	beq.n	80002dc <DM_UpdateDisplay+0x6c>
		_DrawFuncSelectMenu();
 80002d8:	f000 f81e 	bl	8000318 <_DrawFuncSelectMenu>
/*
	if((TIM1->SR & TIM_SR_IDXF) == TIM_SR_IDXF)
	{
		TIM1->SR &= ~(TIM_SR_IDXF);
	}*/
}
 80002dc:	bf00      	nop
 80002de:	46bd      	mov	sp, r7
 80002e0:	bd80      	pop	{r7, pc}
 80002e2:	bf00      	nop
 80002e4:	0800945c 	.word	0x0800945c
 80002e8:	08009464 	.word	0x08009464
 80002ec:	0800946c 	.word	0x0800946c
 80002f0:	08009474 	.word	0x08009474
 80002f4:	20000be0 	.word	0x20000be0

080002f8 <DM_ShowFuncSelectMenu>:
 *
 *
 *
 */
void DM_ShowFuncSelectMenu(eFuncMenu_Status pValue)
{
 80002f8:	b480      	push	{r7}
 80002fa:	b083      	sub	sp, #12
 80002fc:	af00      	add	r7, sp, #0
 80002fe:	4603      	mov	r3, r0
 8000300:	71fb      	strb	r3, [r7, #7]
	eNextFuncMenuStatus = pValue;
 8000302:	4a04      	ldr	r2, [pc, #16]	; (8000314 <DM_ShowFuncSelectMenu+0x1c>)
 8000304:	79fb      	ldrb	r3, [r7, #7]
 8000306:	7013      	strb	r3, [r2, #0]
}
 8000308:	bf00      	nop
 800030a:	370c      	adds	r7, #12
 800030c:	46bd      	mov	sp, r7
 800030e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000312:	4770      	bx	lr
 8000314:	20000be0 	.word	0x20000be0

08000318 <_DrawFuncSelectMenu>:
 *
 *
 *
 */
void _DrawFuncSelectMenu()
{
 8000318:	b580      	push	{r7, lr}
 800031a:	b082      	sub	sp, #8
 800031c:	af02      	add	r7, sp, #8

	switch(EM_GetOutputMode())
 800031e:	f000 fb7b 	bl	8000a18 <EM_GetOutputMode>
 8000322:	4603      	mov	r3, r0
 8000324:	2b05      	cmp	r3, #5
 8000326:	f200 81a1 	bhi.w	800066c <_DrawFuncSelectMenu+0x354>
 800032a:	a201      	add	r2, pc, #4	; (adr r2, 8000330 <_DrawFuncSelectMenu+0x18>)
 800032c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000330:	08000349 	.word	0x08000349
 8000334:	080003cf 	.word	0x080003cf
 8000338:	08000455 	.word	0x08000455
 800033c:	080004db 	.word	0x080004db
 8000340:	08000561 	.word	0x08000561
 8000344:	080005e7 	.word	0x080005e7
	{
		case Sine_Out_Mode:
			ILI9341_Draw_Text("- SINE", 	10, 30, WHITE, 2, BLACK);
 8000348:	2300      	movs	r3, #0
 800034a:	9301      	str	r3, [sp, #4]
 800034c:	2302      	movs	r3, #2
 800034e:	9300      	str	r3, [sp, #0]
 8000350:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000354:	221e      	movs	r2, #30
 8000356:	210a      	movs	r1, #10
 8000358:	48c6      	ldr	r0, [pc, #792]	; (8000674 <_DrawFuncSelectMenu+0x35c>)
 800035a:	f007 fe9b 	bl	8008094 <ILI9341_Draw_Text>
			ILI9341_Draw_Text("- SQUARE", 	10, 50, BLACK, 2, WHITE);
 800035e:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000362:	9301      	str	r3, [sp, #4]
 8000364:	2302      	movs	r3, #2
 8000366:	9300      	str	r3, [sp, #0]
 8000368:	2300      	movs	r3, #0
 800036a:	2232      	movs	r2, #50	; 0x32
 800036c:	210a      	movs	r1, #10
 800036e:	48c2      	ldr	r0, [pc, #776]	; (8000678 <_DrawFuncSelectMenu+0x360>)
 8000370:	f007 fe90 	bl	8008094 <ILI9341_Draw_Text>
			ILI9341_Draw_Text("- SAW", 		10, 70, BLACK, 2, WHITE);
 8000374:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000378:	9301      	str	r3, [sp, #4]
 800037a:	2302      	movs	r3, #2
 800037c:	9300      	str	r3, [sp, #0]
 800037e:	2300      	movs	r3, #0
 8000380:	2246      	movs	r2, #70	; 0x46
 8000382:	210a      	movs	r1, #10
 8000384:	48bd      	ldr	r0, [pc, #756]	; (800067c <_DrawFuncSelectMenu+0x364>)
 8000386:	f007 fe85 	bl	8008094 <ILI9341_Draw_Text>
			ILI9341_Draw_Text("- REV SAW", 	10, 90, BLACK, 2, WHITE);
 800038a:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800038e:	9301      	str	r3, [sp, #4]
 8000390:	2302      	movs	r3, #2
 8000392:	9300      	str	r3, [sp, #0]
 8000394:	2300      	movs	r3, #0
 8000396:	225a      	movs	r2, #90	; 0x5a
 8000398:	210a      	movs	r1, #10
 800039a:	48b9      	ldr	r0, [pc, #740]	; (8000680 <_DrawFuncSelectMenu+0x368>)
 800039c:	f007 fe7a 	bl	8008094 <ILI9341_Draw_Text>
			ILI9341_Draw_Text("- TRIANGLE",	10, 110, BLACK, 2, WHITE);
 80003a0:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80003a4:	9301      	str	r3, [sp, #4]
 80003a6:	2302      	movs	r3, #2
 80003a8:	9300      	str	r3, [sp, #0]
 80003aa:	2300      	movs	r3, #0
 80003ac:	226e      	movs	r2, #110	; 0x6e
 80003ae:	210a      	movs	r1, #10
 80003b0:	48b4      	ldr	r0, [pc, #720]	; (8000684 <_DrawFuncSelectMenu+0x36c>)
 80003b2:	f007 fe6f 	bl	8008094 <ILI9341_Draw_Text>
			ILI9341_Draw_Text("- UNIT", 	10, 130, BLACK, 2, WHITE);
 80003b6:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80003ba:	9301      	str	r3, [sp, #4]
 80003bc:	2302      	movs	r3, #2
 80003be:	9300      	str	r3, [sp, #0]
 80003c0:	2300      	movs	r3, #0
 80003c2:	2282      	movs	r2, #130	; 0x82
 80003c4:	210a      	movs	r1, #10
 80003c6:	48b0      	ldr	r0, [pc, #704]	; (8000688 <_DrawFuncSelectMenu+0x370>)
 80003c8:	f007 fe64 	bl	8008094 <ILI9341_Draw_Text>
			break;
 80003cc:	e14e      	b.n	800066c <_DrawFuncSelectMenu+0x354>
		case Square_Out_Mode:
			ILI9341_Draw_Text("- SINE", 	10, 30, BLACK, 2, WHITE);
 80003ce:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80003d2:	9301      	str	r3, [sp, #4]
 80003d4:	2302      	movs	r3, #2
 80003d6:	9300      	str	r3, [sp, #0]
 80003d8:	2300      	movs	r3, #0
 80003da:	221e      	movs	r2, #30
 80003dc:	210a      	movs	r1, #10
 80003de:	48a5      	ldr	r0, [pc, #660]	; (8000674 <_DrawFuncSelectMenu+0x35c>)
 80003e0:	f007 fe58 	bl	8008094 <ILI9341_Draw_Text>
			ILI9341_Draw_Text("- SQUARE", 	10, 50, WHITE, 2, BLACK);
 80003e4:	2300      	movs	r3, #0
 80003e6:	9301      	str	r3, [sp, #4]
 80003e8:	2302      	movs	r3, #2
 80003ea:	9300      	str	r3, [sp, #0]
 80003ec:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80003f0:	2232      	movs	r2, #50	; 0x32
 80003f2:	210a      	movs	r1, #10
 80003f4:	48a0      	ldr	r0, [pc, #640]	; (8000678 <_DrawFuncSelectMenu+0x360>)
 80003f6:	f007 fe4d 	bl	8008094 <ILI9341_Draw_Text>
			ILI9341_Draw_Text("- SAW", 		10, 70, BLACK, 2, WHITE);
 80003fa:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80003fe:	9301      	str	r3, [sp, #4]
 8000400:	2302      	movs	r3, #2
 8000402:	9300      	str	r3, [sp, #0]
 8000404:	2300      	movs	r3, #0
 8000406:	2246      	movs	r2, #70	; 0x46
 8000408:	210a      	movs	r1, #10
 800040a:	489c      	ldr	r0, [pc, #624]	; (800067c <_DrawFuncSelectMenu+0x364>)
 800040c:	f007 fe42 	bl	8008094 <ILI9341_Draw_Text>
			ILI9341_Draw_Text("- REV SAW", 	10, 90, BLACK, 2, WHITE);
 8000410:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000414:	9301      	str	r3, [sp, #4]
 8000416:	2302      	movs	r3, #2
 8000418:	9300      	str	r3, [sp, #0]
 800041a:	2300      	movs	r3, #0
 800041c:	225a      	movs	r2, #90	; 0x5a
 800041e:	210a      	movs	r1, #10
 8000420:	4897      	ldr	r0, [pc, #604]	; (8000680 <_DrawFuncSelectMenu+0x368>)
 8000422:	f007 fe37 	bl	8008094 <ILI9341_Draw_Text>
			ILI9341_Draw_Text("- TRIANGLE",	10, 110, BLACK, 2, WHITE);
 8000426:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800042a:	9301      	str	r3, [sp, #4]
 800042c:	2302      	movs	r3, #2
 800042e:	9300      	str	r3, [sp, #0]
 8000430:	2300      	movs	r3, #0
 8000432:	226e      	movs	r2, #110	; 0x6e
 8000434:	210a      	movs	r1, #10
 8000436:	4893      	ldr	r0, [pc, #588]	; (8000684 <_DrawFuncSelectMenu+0x36c>)
 8000438:	f007 fe2c 	bl	8008094 <ILI9341_Draw_Text>
			ILI9341_Draw_Text("- UNIT", 	10, 130, BLACK, 2, WHITE);
 800043c:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000440:	9301      	str	r3, [sp, #4]
 8000442:	2302      	movs	r3, #2
 8000444:	9300      	str	r3, [sp, #0]
 8000446:	2300      	movs	r3, #0
 8000448:	2282      	movs	r2, #130	; 0x82
 800044a:	210a      	movs	r1, #10
 800044c:	488e      	ldr	r0, [pc, #568]	; (8000688 <_DrawFuncSelectMenu+0x370>)
 800044e:	f007 fe21 	bl	8008094 <ILI9341_Draw_Text>
			break;
 8000452:	e10b      	b.n	800066c <_DrawFuncSelectMenu+0x354>
		case Saw_Out_Mode:
			ILI9341_Draw_Text("- SINE", 	10, 30, BLACK, 2, WHITE);
 8000454:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000458:	9301      	str	r3, [sp, #4]
 800045a:	2302      	movs	r3, #2
 800045c:	9300      	str	r3, [sp, #0]
 800045e:	2300      	movs	r3, #0
 8000460:	221e      	movs	r2, #30
 8000462:	210a      	movs	r1, #10
 8000464:	4883      	ldr	r0, [pc, #524]	; (8000674 <_DrawFuncSelectMenu+0x35c>)
 8000466:	f007 fe15 	bl	8008094 <ILI9341_Draw_Text>
			ILI9341_Draw_Text("- SQUARE", 	10, 50, BLACK, 2, WHITE);
 800046a:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800046e:	9301      	str	r3, [sp, #4]
 8000470:	2302      	movs	r3, #2
 8000472:	9300      	str	r3, [sp, #0]
 8000474:	2300      	movs	r3, #0
 8000476:	2232      	movs	r2, #50	; 0x32
 8000478:	210a      	movs	r1, #10
 800047a:	487f      	ldr	r0, [pc, #508]	; (8000678 <_DrawFuncSelectMenu+0x360>)
 800047c:	f007 fe0a 	bl	8008094 <ILI9341_Draw_Text>
			ILI9341_Draw_Text("- SAW", 		10, 70, WHITE, 2, BLACK);
 8000480:	2300      	movs	r3, #0
 8000482:	9301      	str	r3, [sp, #4]
 8000484:	2302      	movs	r3, #2
 8000486:	9300      	str	r3, [sp, #0]
 8000488:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800048c:	2246      	movs	r2, #70	; 0x46
 800048e:	210a      	movs	r1, #10
 8000490:	487a      	ldr	r0, [pc, #488]	; (800067c <_DrawFuncSelectMenu+0x364>)
 8000492:	f007 fdff 	bl	8008094 <ILI9341_Draw_Text>
			ILI9341_Draw_Text("- REV SAW", 	10, 90, BLACK, 2, WHITE);
 8000496:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800049a:	9301      	str	r3, [sp, #4]
 800049c:	2302      	movs	r3, #2
 800049e:	9300      	str	r3, [sp, #0]
 80004a0:	2300      	movs	r3, #0
 80004a2:	225a      	movs	r2, #90	; 0x5a
 80004a4:	210a      	movs	r1, #10
 80004a6:	4876      	ldr	r0, [pc, #472]	; (8000680 <_DrawFuncSelectMenu+0x368>)
 80004a8:	f007 fdf4 	bl	8008094 <ILI9341_Draw_Text>
			ILI9341_Draw_Text("- TRIANGLE",	10, 110, BLACK, 2, WHITE);
 80004ac:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80004b0:	9301      	str	r3, [sp, #4]
 80004b2:	2302      	movs	r3, #2
 80004b4:	9300      	str	r3, [sp, #0]
 80004b6:	2300      	movs	r3, #0
 80004b8:	226e      	movs	r2, #110	; 0x6e
 80004ba:	210a      	movs	r1, #10
 80004bc:	4871      	ldr	r0, [pc, #452]	; (8000684 <_DrawFuncSelectMenu+0x36c>)
 80004be:	f007 fde9 	bl	8008094 <ILI9341_Draw_Text>
			ILI9341_Draw_Text("- UNIT", 	10, 130, BLACK, 2, WHITE);
 80004c2:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80004c6:	9301      	str	r3, [sp, #4]
 80004c8:	2302      	movs	r3, #2
 80004ca:	9300      	str	r3, [sp, #0]
 80004cc:	2300      	movs	r3, #0
 80004ce:	2282      	movs	r2, #130	; 0x82
 80004d0:	210a      	movs	r1, #10
 80004d2:	486d      	ldr	r0, [pc, #436]	; (8000688 <_DrawFuncSelectMenu+0x370>)
 80004d4:	f007 fdde 	bl	8008094 <ILI9341_Draw_Text>
			break;
 80004d8:	e0c8      	b.n	800066c <_DrawFuncSelectMenu+0x354>
		case RevSaw_Out_Mode:
			ILI9341_Draw_Text("- SINE", 	10, 30, BLACK, 2, WHITE);
 80004da:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80004de:	9301      	str	r3, [sp, #4]
 80004e0:	2302      	movs	r3, #2
 80004e2:	9300      	str	r3, [sp, #0]
 80004e4:	2300      	movs	r3, #0
 80004e6:	221e      	movs	r2, #30
 80004e8:	210a      	movs	r1, #10
 80004ea:	4862      	ldr	r0, [pc, #392]	; (8000674 <_DrawFuncSelectMenu+0x35c>)
 80004ec:	f007 fdd2 	bl	8008094 <ILI9341_Draw_Text>
			ILI9341_Draw_Text("- SQUARE", 	10, 50, BLACK, 2, WHITE);
 80004f0:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80004f4:	9301      	str	r3, [sp, #4]
 80004f6:	2302      	movs	r3, #2
 80004f8:	9300      	str	r3, [sp, #0]
 80004fa:	2300      	movs	r3, #0
 80004fc:	2232      	movs	r2, #50	; 0x32
 80004fe:	210a      	movs	r1, #10
 8000500:	485d      	ldr	r0, [pc, #372]	; (8000678 <_DrawFuncSelectMenu+0x360>)
 8000502:	f007 fdc7 	bl	8008094 <ILI9341_Draw_Text>
			ILI9341_Draw_Text("- SAW", 		10, 70, BLACK, 2, WHITE);
 8000506:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800050a:	9301      	str	r3, [sp, #4]
 800050c:	2302      	movs	r3, #2
 800050e:	9300      	str	r3, [sp, #0]
 8000510:	2300      	movs	r3, #0
 8000512:	2246      	movs	r2, #70	; 0x46
 8000514:	210a      	movs	r1, #10
 8000516:	4859      	ldr	r0, [pc, #356]	; (800067c <_DrawFuncSelectMenu+0x364>)
 8000518:	f007 fdbc 	bl	8008094 <ILI9341_Draw_Text>
			ILI9341_Draw_Text("- REV SAW", 	10, 90, WHITE, 2, BLACK);
 800051c:	2300      	movs	r3, #0
 800051e:	9301      	str	r3, [sp, #4]
 8000520:	2302      	movs	r3, #2
 8000522:	9300      	str	r3, [sp, #0]
 8000524:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000528:	225a      	movs	r2, #90	; 0x5a
 800052a:	210a      	movs	r1, #10
 800052c:	4854      	ldr	r0, [pc, #336]	; (8000680 <_DrawFuncSelectMenu+0x368>)
 800052e:	f007 fdb1 	bl	8008094 <ILI9341_Draw_Text>
			ILI9341_Draw_Text("- TRIANGLE",	10, 110, BLACK, 2, WHITE);
 8000532:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000536:	9301      	str	r3, [sp, #4]
 8000538:	2302      	movs	r3, #2
 800053a:	9300      	str	r3, [sp, #0]
 800053c:	2300      	movs	r3, #0
 800053e:	226e      	movs	r2, #110	; 0x6e
 8000540:	210a      	movs	r1, #10
 8000542:	4850      	ldr	r0, [pc, #320]	; (8000684 <_DrawFuncSelectMenu+0x36c>)
 8000544:	f007 fda6 	bl	8008094 <ILI9341_Draw_Text>
			ILI9341_Draw_Text("- UNIT", 	10, 130, BLACK, 2, WHITE);
 8000548:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800054c:	9301      	str	r3, [sp, #4]
 800054e:	2302      	movs	r3, #2
 8000550:	9300      	str	r3, [sp, #0]
 8000552:	2300      	movs	r3, #0
 8000554:	2282      	movs	r2, #130	; 0x82
 8000556:	210a      	movs	r1, #10
 8000558:	484b      	ldr	r0, [pc, #300]	; (8000688 <_DrawFuncSelectMenu+0x370>)
 800055a:	f007 fd9b 	bl	8008094 <ILI9341_Draw_Text>
			break;
 800055e:	e085      	b.n	800066c <_DrawFuncSelectMenu+0x354>
		case Triangle_Out_Mode:
			ILI9341_Draw_Text("- SINE", 	10, 30, BLACK, 2, WHITE);
 8000560:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000564:	9301      	str	r3, [sp, #4]
 8000566:	2302      	movs	r3, #2
 8000568:	9300      	str	r3, [sp, #0]
 800056a:	2300      	movs	r3, #0
 800056c:	221e      	movs	r2, #30
 800056e:	210a      	movs	r1, #10
 8000570:	4840      	ldr	r0, [pc, #256]	; (8000674 <_DrawFuncSelectMenu+0x35c>)
 8000572:	f007 fd8f 	bl	8008094 <ILI9341_Draw_Text>
			ILI9341_Draw_Text("- SQUARE", 	10, 50, BLACK, 2, WHITE);
 8000576:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800057a:	9301      	str	r3, [sp, #4]
 800057c:	2302      	movs	r3, #2
 800057e:	9300      	str	r3, [sp, #0]
 8000580:	2300      	movs	r3, #0
 8000582:	2232      	movs	r2, #50	; 0x32
 8000584:	210a      	movs	r1, #10
 8000586:	483c      	ldr	r0, [pc, #240]	; (8000678 <_DrawFuncSelectMenu+0x360>)
 8000588:	f007 fd84 	bl	8008094 <ILI9341_Draw_Text>
			ILI9341_Draw_Text("- SAW", 		10, 70, BLACK, 2, WHITE);
 800058c:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000590:	9301      	str	r3, [sp, #4]
 8000592:	2302      	movs	r3, #2
 8000594:	9300      	str	r3, [sp, #0]
 8000596:	2300      	movs	r3, #0
 8000598:	2246      	movs	r2, #70	; 0x46
 800059a:	210a      	movs	r1, #10
 800059c:	4837      	ldr	r0, [pc, #220]	; (800067c <_DrawFuncSelectMenu+0x364>)
 800059e:	f007 fd79 	bl	8008094 <ILI9341_Draw_Text>
			ILI9341_Draw_Text("- REV SAW", 	10, 90, BLACK, 2, WHITE);
 80005a2:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80005a6:	9301      	str	r3, [sp, #4]
 80005a8:	2302      	movs	r3, #2
 80005aa:	9300      	str	r3, [sp, #0]
 80005ac:	2300      	movs	r3, #0
 80005ae:	225a      	movs	r2, #90	; 0x5a
 80005b0:	210a      	movs	r1, #10
 80005b2:	4833      	ldr	r0, [pc, #204]	; (8000680 <_DrawFuncSelectMenu+0x368>)
 80005b4:	f007 fd6e 	bl	8008094 <ILI9341_Draw_Text>
			ILI9341_Draw_Text("- TRIANGLE",	10, 110, WHITE, 2, BLACK);
 80005b8:	2300      	movs	r3, #0
 80005ba:	9301      	str	r3, [sp, #4]
 80005bc:	2302      	movs	r3, #2
 80005be:	9300      	str	r3, [sp, #0]
 80005c0:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80005c4:	226e      	movs	r2, #110	; 0x6e
 80005c6:	210a      	movs	r1, #10
 80005c8:	482e      	ldr	r0, [pc, #184]	; (8000684 <_DrawFuncSelectMenu+0x36c>)
 80005ca:	f007 fd63 	bl	8008094 <ILI9341_Draw_Text>
			ILI9341_Draw_Text("- UNIT", 	10, 130, BLACK, 2, WHITE);
 80005ce:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80005d2:	9301      	str	r3, [sp, #4]
 80005d4:	2302      	movs	r3, #2
 80005d6:	9300      	str	r3, [sp, #0]
 80005d8:	2300      	movs	r3, #0
 80005da:	2282      	movs	r2, #130	; 0x82
 80005dc:	210a      	movs	r1, #10
 80005de:	482a      	ldr	r0, [pc, #168]	; (8000688 <_DrawFuncSelectMenu+0x370>)
 80005e0:	f007 fd58 	bl	8008094 <ILI9341_Draw_Text>
			break;
 80005e4:	e042      	b.n	800066c <_DrawFuncSelectMenu+0x354>
		case Impulse_Out_Mode:
			ILI9341_Draw_Text("- SINE", 	10, 30, BLACK, 2, WHITE);
 80005e6:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80005ea:	9301      	str	r3, [sp, #4]
 80005ec:	2302      	movs	r3, #2
 80005ee:	9300      	str	r3, [sp, #0]
 80005f0:	2300      	movs	r3, #0
 80005f2:	221e      	movs	r2, #30
 80005f4:	210a      	movs	r1, #10
 80005f6:	481f      	ldr	r0, [pc, #124]	; (8000674 <_DrawFuncSelectMenu+0x35c>)
 80005f8:	f007 fd4c 	bl	8008094 <ILI9341_Draw_Text>
			ILI9341_Draw_Text("- SQUARE", 	10, 50, BLACK, 2, WHITE);
 80005fc:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000600:	9301      	str	r3, [sp, #4]
 8000602:	2302      	movs	r3, #2
 8000604:	9300      	str	r3, [sp, #0]
 8000606:	2300      	movs	r3, #0
 8000608:	2232      	movs	r2, #50	; 0x32
 800060a:	210a      	movs	r1, #10
 800060c:	481a      	ldr	r0, [pc, #104]	; (8000678 <_DrawFuncSelectMenu+0x360>)
 800060e:	f007 fd41 	bl	8008094 <ILI9341_Draw_Text>
			ILI9341_Draw_Text("- SAW", 		10, 70, BLACK, 2, WHITE);
 8000612:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000616:	9301      	str	r3, [sp, #4]
 8000618:	2302      	movs	r3, #2
 800061a:	9300      	str	r3, [sp, #0]
 800061c:	2300      	movs	r3, #0
 800061e:	2246      	movs	r2, #70	; 0x46
 8000620:	210a      	movs	r1, #10
 8000622:	4816      	ldr	r0, [pc, #88]	; (800067c <_DrawFuncSelectMenu+0x364>)
 8000624:	f007 fd36 	bl	8008094 <ILI9341_Draw_Text>
			ILI9341_Draw_Text("- REV SAW", 	10, 90, BLACK, 2, WHITE);
 8000628:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800062c:	9301      	str	r3, [sp, #4]
 800062e:	2302      	movs	r3, #2
 8000630:	9300      	str	r3, [sp, #0]
 8000632:	2300      	movs	r3, #0
 8000634:	225a      	movs	r2, #90	; 0x5a
 8000636:	210a      	movs	r1, #10
 8000638:	4811      	ldr	r0, [pc, #68]	; (8000680 <_DrawFuncSelectMenu+0x368>)
 800063a:	f007 fd2b 	bl	8008094 <ILI9341_Draw_Text>
			ILI9341_Draw_Text("- TRIANGLE",	10, 110, BLACK, 2, WHITE);
 800063e:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000642:	9301      	str	r3, [sp, #4]
 8000644:	2302      	movs	r3, #2
 8000646:	9300      	str	r3, [sp, #0]
 8000648:	2300      	movs	r3, #0
 800064a:	226e      	movs	r2, #110	; 0x6e
 800064c:	210a      	movs	r1, #10
 800064e:	480d      	ldr	r0, [pc, #52]	; (8000684 <_DrawFuncSelectMenu+0x36c>)
 8000650:	f007 fd20 	bl	8008094 <ILI9341_Draw_Text>
			ILI9341_Draw_Text("- UNIT", 	10, 130, WHITE, 2, BLACK);
 8000654:	2300      	movs	r3, #0
 8000656:	9301      	str	r3, [sp, #4]
 8000658:	2302      	movs	r3, #2
 800065a:	9300      	str	r3, [sp, #0]
 800065c:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000660:	2282      	movs	r2, #130	; 0x82
 8000662:	210a      	movs	r1, #10
 8000664:	4808      	ldr	r0, [pc, #32]	; (8000688 <_DrawFuncSelectMenu+0x370>)
 8000666:	f007 fd15 	bl	8008094 <ILI9341_Draw_Text>
			break;
 800066a:	bf00      	nop

	}

}
 800066c:	bf00      	nop
 800066e:	46bd      	mov	sp, r7
 8000670:	bd80      	pop	{r7, pc}
 8000672:	bf00      	nop
 8000674:	0800947c 	.word	0x0800947c
 8000678:	08009484 	.word	0x08009484
 800067c:	08009490 	.word	0x08009490
 8000680:	08009498 	.word	0x08009498
 8000684:	080094a4 	.word	0x080094a4
 8000688:	080094b0 	.word	0x080094b0

0800068c <DM_RefreshBackgroundLayout>:
 * Call this only once during init.
 *
 *
 */
void DM_RefreshBackgroundLayout()
{
 800068c:	b580      	push	{r7, lr}
 800068e:	b084      	sub	sp, #16
 8000690:	af04      	add	r7, sp, #16


	ILI9341_Fill_Screen(WHITE);
 8000692:	f64f 70ff 	movw	r0, #65535	; 0xffff
 8000696:	f008 f811 	bl	80086bc <ILI9341_Fill_Screen>

	ILI9341_Draw_Bordered_Filled_Rectangle_Coord(	btn_x_pos[0],
 800069a:	4b1d      	ldr	r3, [pc, #116]	; (8000710 <DM_RefreshBackgroundLayout+0x84>)
 800069c:	8818      	ldrh	r0, [r3, #0]
 800069e:	2300      	movs	r3, #0
 80006a0:	9302      	str	r3, [sp, #8]
 80006a2:	2302      	movs	r3, #2
 80006a4:	9301      	str	r3, [sp, #4]
 80006a6:	f240 33ef 	movw	r3, #1007	; 0x3ef
 80006aa:	9300      	str	r3, [sp, #0]
 80006ac:	2332      	movs	r3, #50	; 0x32
 80006ae:	2250      	movs	r2, #80	; 0x50
 80006b0:	21c8      	movs	r1, #200	; 0xc8
 80006b2:	f007 fb85 	bl	8007dc0 <ILI9341_Draw_Bordered_Filled_Rectangle_Coord>
													BTN_HEIGHT,
													DARKCYAN,
													BORDER_SIZE,
													BLACK);

	ILI9341_Draw_Bordered_Filled_Rectangle_Coord(	btn_x_pos[1],
 80006b6:	4b16      	ldr	r3, [pc, #88]	; (8000710 <DM_RefreshBackgroundLayout+0x84>)
 80006b8:	8858      	ldrh	r0, [r3, #2]
 80006ba:	2300      	movs	r3, #0
 80006bc:	9302      	str	r3, [sp, #8]
 80006be:	2302      	movs	r3, #2
 80006c0:	9301      	str	r3, [sp, #4]
 80006c2:	f44f 7378 	mov.w	r3, #992	; 0x3e0
 80006c6:	9300      	str	r3, [sp, #0]
 80006c8:	2332      	movs	r3, #50	; 0x32
 80006ca:	2250      	movs	r2, #80	; 0x50
 80006cc:	21c8      	movs	r1, #200	; 0xc8
 80006ce:	f007 fb77 	bl	8007dc0 <ILI9341_Draw_Bordered_Filled_Rectangle_Coord>
													BTN_HEIGHT,
													DARKGREEN,
													BORDER_SIZE,
													BLACK);

	ILI9341_Draw_Bordered_Filled_Rectangle_Coord(	btn_x_pos[2],
 80006d2:	4b0f      	ldr	r3, [pc, #60]	; (8000710 <DM_RefreshBackgroundLayout+0x84>)
 80006d4:	8898      	ldrh	r0, [r3, #4]
 80006d6:	2300      	movs	r3, #0
 80006d8:	9302      	str	r3, [sp, #8]
 80006da:	2302      	movs	r3, #2
 80006dc:	9301      	str	r3, [sp, #4]
 80006de:	f64f 73e0 	movw	r3, #65504	; 0xffe0
 80006e2:	9300      	str	r3, [sp, #0]
 80006e4:	2332      	movs	r3, #50	; 0x32
 80006e6:	2250      	movs	r2, #80	; 0x50
 80006e8:	21c8      	movs	r1, #200	; 0xc8
 80006ea:	f007 fb69 	bl	8007dc0 <ILI9341_Draw_Bordered_Filled_Rectangle_Coord>
													BTN_HEIGHT,
													YELLOW,
													BORDER_SIZE,
													BLACK);

	ILI9341_Draw_Bordered_Filled_Rectangle_Coord(	btn_x_pos[3],
 80006ee:	4b08      	ldr	r3, [pc, #32]	; (8000710 <DM_RefreshBackgroundLayout+0x84>)
 80006f0:	88d8      	ldrh	r0, [r3, #6]
 80006f2:	2300      	movs	r3, #0
 80006f4:	9302      	str	r3, [sp, #8]
 80006f6:	2302      	movs	r3, #2
 80006f8:	9301      	str	r3, [sp, #4]
 80006fa:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 80006fe:	9300      	str	r3, [sp, #0]
 8000700:	2332      	movs	r3, #50	; 0x32
 8000702:	2250      	movs	r2, #80	; 0x50
 8000704:	21c8      	movs	r1, #200	; 0xc8
 8000706:	f007 fb5b 	bl	8007dc0 <ILI9341_Draw_Bordered_Filled_Rectangle_Coord>
													BTN_WIDTH,
													BTN_HEIGHT,
													RED,
													BORDER_SIZE,
													BLACK);
}
 800070a:	bf00      	nop
 800070c:	46bd      	mov	sp, r7
 800070e:	bd80      	pop	{r7, pc}
 8000710:	20000000 	.word	0x20000000

08000714 <EM_ProcessEvent>:
 *
 * 	Main state machine for event process
 *
 */
void EM_ProcessEvent()
{
 8000714:	b580      	push	{r7, lr}
 8000716:	af00      	add	r7, sp, #0

	switch(eNextState)
 8000718:	4b29      	ldr	r3, [pc, #164]	; (80007c0 <EM_ProcessEvent+0xac>)
 800071a:	781b      	ldrb	r3, [r3, #0]
 800071c:	2b00      	cmp	r3, #0
 800071e:	d002      	beq.n	8000726 <EM_ProcessEvent+0x12>
 8000720:	2b01      	cmp	r3, #1
 8000722:	d033      	beq.n	800078c <EM_ProcessEvent+0x78>
			if(eNewEvent == evEncoderPush)
			{
				eNextState = _ExitFuncMenuHandler();
			}
		default:
			break;
 8000724:	e049      	b.n	80007ba <EM_ProcessEvent+0xa6>
			if(eNewEvent == evFuncMenu)
 8000726:	4b27      	ldr	r3, [pc, #156]	; (80007c4 <EM_ProcessEvent+0xb0>)
 8000728:	781b      	ldrb	r3, [r3, #0]
 800072a:	2b01      	cmp	r3, #1
 800072c:	d105      	bne.n	800073a <EM_ProcessEvent+0x26>
				eNextState = _FuncMenuHandler();
 800072e:	f000 f84b 	bl	80007c8 <_FuncMenuHandler>
 8000732:	4603      	mov	r3, r0
 8000734:	461a      	mov	r2, r3
 8000736:	4b22      	ldr	r3, [pc, #136]	; (80007c0 <EM_ProcessEvent+0xac>)
 8000738:	701a      	strb	r2, [r3, #0]
			if(eNewEvent == evFreqMenu)
 800073a:	4b22      	ldr	r3, [pc, #136]	; (80007c4 <EM_ProcessEvent+0xb0>)
 800073c:	781b      	ldrb	r3, [r3, #0]
 800073e:	2b02      	cmp	r3, #2
 8000740:	d105      	bne.n	800074e <EM_ProcessEvent+0x3a>
				eNextState = _FreqMenuHandler();
 8000742:	f000 f931 	bl	80009a8 <_FreqMenuHandler>
 8000746:	4603      	mov	r3, r0
 8000748:	461a      	mov	r2, r3
 800074a:	4b1d      	ldr	r3, [pc, #116]	; (80007c0 <EM_ProcessEvent+0xac>)
 800074c:	701a      	strb	r2, [r3, #0]
			if(eNewEvent == evAmplMenu)
 800074e:	4b1d      	ldr	r3, [pc, #116]	; (80007c4 <EM_ProcessEvent+0xb0>)
 8000750:	781b      	ldrb	r3, [r3, #0]
 8000752:	2b03      	cmp	r3, #3
 8000754:	d105      	bne.n	8000762 <EM_ProcessEvent+0x4e>
				eNextState = _AmplMenuHandler();
 8000756:	f000 f931 	bl	80009bc <_AmplMenuHandler>
 800075a:	4603      	mov	r3, r0
 800075c:	461a      	mov	r2, r3
 800075e:	4b18      	ldr	r3, [pc, #96]	; (80007c0 <EM_ProcessEvent+0xac>)
 8000760:	701a      	strb	r2, [r3, #0]
			if(eNewEvent == evBiasMenu)
 8000762:	4b18      	ldr	r3, [pc, #96]	; (80007c4 <EM_ProcessEvent+0xb0>)
 8000764:	781b      	ldrb	r3, [r3, #0]
 8000766:	2b04      	cmp	r3, #4
 8000768:	d105      	bne.n	8000776 <EM_ProcessEvent+0x62>
				eNextState = _BiasMenuHandler();
 800076a:	f000 f931 	bl	80009d0 <_BiasMenuHandler>
 800076e:	4603      	mov	r3, r0
 8000770:	461a      	mov	r2, r3
 8000772:	4b13      	ldr	r3, [pc, #76]	; (80007c0 <EM_ProcessEvent+0xac>)
 8000774:	701a      	strb	r2, [r3, #0]
			if(eNewEvent == evAdjustConfirmed)
 8000776:	4b13      	ldr	r3, [pc, #76]	; (80007c4 <EM_ProcessEvent+0xb0>)
 8000778:	781b      	ldrb	r3, [r3, #0]
 800077a:	2b07      	cmp	r3, #7
 800077c:	d11b      	bne.n	80007b6 <EM_ProcessEvent+0xa2>
				eNextState = _AdjustConfirmedHandler();
 800077e:	f000 f931 	bl	80009e4 <_AdjustConfirmedHandler>
 8000782:	4603      	mov	r3, r0
 8000784:	461a      	mov	r2, r3
 8000786:	4b0e      	ldr	r3, [pc, #56]	; (80007c0 <EM_ProcessEvent+0xac>)
 8000788:	701a      	strb	r2, [r3, #0]
			break;
 800078a:	e014      	b.n	80007b6 <EM_ProcessEvent+0xa2>
			if(eNewEvent == evEncoderSet)
 800078c:	4b0d      	ldr	r3, [pc, #52]	; (80007c4 <EM_ProcessEvent+0xb0>)
 800078e:	781b      	ldrb	r3, [r3, #0]
 8000790:	2b05      	cmp	r3, #5
 8000792:	d105      	bne.n	80007a0 <EM_ProcessEvent+0x8c>
				eNextState = _FuncSetHandler();
 8000794:	f000 f82a 	bl	80007ec <_FuncSetHandler>
 8000798:	4603      	mov	r3, r0
 800079a:	461a      	mov	r2, r3
 800079c:	4b08      	ldr	r3, [pc, #32]	; (80007c0 <EM_ProcessEvent+0xac>)
 800079e:	701a      	strb	r2, [r3, #0]
			if(eNewEvent == evEncoderPush)
 80007a0:	4b08      	ldr	r3, [pc, #32]	; (80007c4 <EM_ProcessEvent+0xb0>)
 80007a2:	781b      	ldrb	r3, [r3, #0]
 80007a4:	2b06      	cmp	r3, #6
 80007a6:	d108      	bne.n	80007ba <EM_ProcessEvent+0xa6>
				eNextState = _ExitFuncMenuHandler();
 80007a8:	f000 f8dc 	bl	8000964 <_ExitFuncMenuHandler>
 80007ac:	4603      	mov	r3, r0
 80007ae:	461a      	mov	r2, r3
 80007b0:	4b03      	ldr	r3, [pc, #12]	; (80007c0 <EM_ProcessEvent+0xac>)
 80007b2:	701a      	strb	r2, [r3, #0]
			break;
 80007b4:	e001      	b.n	80007ba <EM_ProcessEvent+0xa6>
			break;
 80007b6:	bf00      	nop
 80007b8:	e000      	b.n	80007bc <EM_ProcessEvent+0xa8>
			break;
 80007ba:	bf00      	nop
	}

}
 80007bc:	bf00      	nop
 80007be:	bd80      	pop	{r7, pc}
 80007c0:	20000be1 	.word	0x20000be1
 80007c4:	20000be2 	.word	0x20000be2

080007c8 <_FuncMenuHandler>:
 *
 *	Business logic for evFunctionMenu events
 *
 */
eSystemState _FuncMenuHandler(void)
{
 80007c8:	b580      	push	{r7, lr}
 80007ca:	af00      	add	r7, sp, #0
#ifdef EM_SWV_DEBUG
	printf("FunctionMenu Event captured\n");
 80007cc:	4805      	ldr	r0, [pc, #20]	; (80007e4 <_FuncMenuHandler+0x1c>)
 80007ce:	f008 fa1d 	bl	8008c0c <puts>
#endif

	DM_ShowFuncSelectMenu(ENABLE_FUNCMENU);
 80007d2:	2001      	movs	r0, #1
 80007d4:	f7ff fd90 	bl	80002f8 <DM_ShowFuncSelectMenu>

	// set the rotary encoder limits to 0-20 for this menu
	TIM1->ARR = 20;
 80007d8:	4b03      	ldr	r3, [pc, #12]	; (80007e8 <_FuncMenuHandler+0x20>)
 80007da:	2214      	movs	r2, #20
 80007dc:	62da      	str	r2, [r3, #44]	; 0x2c

	return Func_Menu_State;
 80007de:	2301      	movs	r3, #1
}
 80007e0:	4618      	mov	r0, r3
 80007e2:	bd80      	pop	{r7, pc}
 80007e4:	0800951c 	.word	0x0800951c
 80007e8:	40012c00 	.word	0x40012c00

080007ec <_FuncSetHandler>:
 *
 *	Business logic for evFunctionSet events
 *
 */
eSystemState _FuncSetHandler(void)
{
 80007ec:	b580      	push	{r7, lr}
 80007ee:	b082      	sub	sp, #8
 80007f0:	af02      	add	r7, sp, #8
#ifdef EM_SWV_DEBUG
	printf("FunctionAdjust Event captured\n");
 80007f2:	4851      	ldr	r0, [pc, #324]	; (8000938 <_FuncSetHandler+0x14c>)
 80007f4:	f008 fa0a 	bl	8008c0c <puts>
#endif

	switch(TIM1->CNT)
 80007f8:	4b50      	ldr	r3, [pc, #320]	; (800093c <_FuncSetHandler+0x150>)
 80007fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80007fc:	2b17      	cmp	r3, #23
 80007fe:	f200 8093 	bhi.w	8000928 <_FuncSetHandler+0x13c>
 8000802:	a201      	add	r2, pc, #4	; (adr r2, 8000808 <_FuncSetHandler+0x1c>)
 8000804:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000808:	08000869 	.word	0x08000869
 800080c:	08000869 	.word	0x08000869
 8000810:	08000869 	.word	0x08000869
 8000814:	08000869 	.word	0x08000869
 8000818:	08000889 	.word	0x08000889
 800081c:	08000889 	.word	0x08000889
 8000820:	08000889 	.word	0x08000889
 8000824:	08000889 	.word	0x08000889
 8000828:	080008a9 	.word	0x080008a9
 800082c:	080008a9 	.word	0x080008a9
 8000830:	080008a9 	.word	0x080008a9
 8000834:	080008a9 	.word	0x080008a9
 8000838:	080008c9 	.word	0x080008c9
 800083c:	080008c9 	.word	0x080008c9
 8000840:	080008c9 	.word	0x080008c9
 8000844:	080008c9 	.word	0x080008c9
 8000848:	080008e9 	.word	0x080008e9
 800084c:	080008e9 	.word	0x080008e9
 8000850:	080008e9 	.word	0x080008e9
 8000854:	080008e9 	.word	0x080008e9
 8000858:	08000909 	.word	0x08000909
 800085c:	08000909 	.word	0x08000909
 8000860:	08000909 	.word	0x08000909
 8000864:	08000909 	.word	0x08000909
	{
		case 0:
		case 1:
		case 2:
		case 3:
			eNewOutMode = Sine_Out_Mode;
 8000868:	4b35      	ldr	r3, [pc, #212]	; (8000940 <_FuncSetHandler+0x154>)
 800086a:	2200      	movs	r2, #0
 800086c:	701a      	strb	r2, [r3, #0]
			HAL_DAC_Stop_DMA(&hdac1, DAC1_CHANNEL_1);
 800086e:	2100      	movs	r1, #0
 8000870:	4834      	ldr	r0, [pc, #208]	; (8000944 <_FuncSetHandler+0x158>)
 8000872:	f003 fcbf 	bl	80041f4 <HAL_DAC_Stop_DMA>
			HAL_DAC_Start_DMA(&hdac1, DAC1_CHANNEL_1, sine_data_table, SINE_DATA_SIZE, DAC_ALIGN_12B_R);
 8000876:	2300      	movs	r3, #0
 8000878:	9300      	str	r3, [sp, #0]
 800087a:	2378      	movs	r3, #120	; 0x78
 800087c:	4a32      	ldr	r2, [pc, #200]	; (8000948 <_FuncSetHandler+0x15c>)
 800087e:	2100      	movs	r1, #0
 8000880:	4830      	ldr	r0, [pc, #192]	; (8000944 <_FuncSetHandler+0x158>)
 8000882:	f003 fbf5 	bl	8004070 <HAL_DAC_Start_DMA>
			break;
 8000886:	e04f      	b.n	8000928 <_FuncSetHandler+0x13c>
		case 4:
		case 5:
		case 6:
		case 7:
			eNewOutMode = Square_Out_Mode;
 8000888:	4b2d      	ldr	r3, [pc, #180]	; (8000940 <_FuncSetHandler+0x154>)
 800088a:	2201      	movs	r2, #1
 800088c:	701a      	strb	r2, [r3, #0]

			HAL_DAC_Stop_DMA(&hdac1, DAC1_CHANNEL_1);
 800088e:	2100      	movs	r1, #0
 8000890:	482c      	ldr	r0, [pc, #176]	; (8000944 <_FuncSetHandler+0x158>)
 8000892:	f003 fcaf 	bl	80041f4 <HAL_DAC_Stop_DMA>
			HAL_DAC_Start_DMA(&hdac1, DAC1_CHANNEL_1, square_data_table, SQUARE_DATA_SIZE, DAC_ALIGN_12B_R);
 8000896:	2300      	movs	r3, #0
 8000898:	9300      	str	r3, [sp, #0]
 800089a:	2378      	movs	r3, #120	; 0x78
 800089c:	4a2b      	ldr	r2, [pc, #172]	; (800094c <_FuncSetHandler+0x160>)
 800089e:	2100      	movs	r1, #0
 80008a0:	4828      	ldr	r0, [pc, #160]	; (8000944 <_FuncSetHandler+0x158>)
 80008a2:	f003 fbe5 	bl	8004070 <HAL_DAC_Start_DMA>

			break;
 80008a6:	e03f      	b.n	8000928 <_FuncSetHandler+0x13c>
		case 8:
		case 9:
		case 10:
		case 11:
			eNewOutMode = Saw_Out_Mode;
 80008a8:	4b25      	ldr	r3, [pc, #148]	; (8000940 <_FuncSetHandler+0x154>)
 80008aa:	2202      	movs	r2, #2
 80008ac:	701a      	strb	r2, [r3, #0]
			HAL_DAC_Stop_DMA(&hdac1, DAC1_CHANNEL_1);
 80008ae:	2100      	movs	r1, #0
 80008b0:	4824      	ldr	r0, [pc, #144]	; (8000944 <_FuncSetHandler+0x158>)
 80008b2:	f003 fc9f 	bl	80041f4 <HAL_DAC_Stop_DMA>
			HAL_DAC_Start_DMA(&hdac1, DAC1_CHANNEL_1, saw_data_table, SAW_DATA_SIZE, DAC_ALIGN_12B_R);
 80008b6:	2300      	movs	r3, #0
 80008b8:	9300      	str	r3, [sp, #0]
 80008ba:	2378      	movs	r3, #120	; 0x78
 80008bc:	4a24      	ldr	r2, [pc, #144]	; (8000950 <_FuncSetHandler+0x164>)
 80008be:	2100      	movs	r1, #0
 80008c0:	4820      	ldr	r0, [pc, #128]	; (8000944 <_FuncSetHandler+0x158>)
 80008c2:	f003 fbd5 	bl	8004070 <HAL_DAC_Start_DMA>
			break;
 80008c6:	e02f      	b.n	8000928 <_FuncSetHandler+0x13c>
		case 12:
		case 13:
		case 14:
		case 15:
			eNewOutMode = RevSaw_Out_Mode;
 80008c8:	4b1d      	ldr	r3, [pc, #116]	; (8000940 <_FuncSetHandler+0x154>)
 80008ca:	2203      	movs	r2, #3
 80008cc:	701a      	strb	r2, [r3, #0]
			HAL_DAC_Stop_DMA(&hdac1, DAC1_CHANNEL_1);
 80008ce:	2100      	movs	r1, #0
 80008d0:	481c      	ldr	r0, [pc, #112]	; (8000944 <_FuncSetHandler+0x158>)
 80008d2:	f003 fc8f 	bl	80041f4 <HAL_DAC_Stop_DMA>
			HAL_DAC_Start_DMA(&hdac1, DAC1_CHANNEL_1, saw_rev_data_table, SAW_REV_DATA_SIZE, DAC_ALIGN_12B_R);
 80008d6:	2300      	movs	r3, #0
 80008d8:	9300      	str	r3, [sp, #0]
 80008da:	2378      	movs	r3, #120	; 0x78
 80008dc:	4a1d      	ldr	r2, [pc, #116]	; (8000954 <_FuncSetHandler+0x168>)
 80008de:	2100      	movs	r1, #0
 80008e0:	4818      	ldr	r0, [pc, #96]	; (8000944 <_FuncSetHandler+0x158>)
 80008e2:	f003 fbc5 	bl	8004070 <HAL_DAC_Start_DMA>
			break;
 80008e6:	e01f      	b.n	8000928 <_FuncSetHandler+0x13c>
		case 16:
		case 17:
		case 18:
		case 19:
			eNewOutMode = Triangle_Out_Mode;
 80008e8:	4b15      	ldr	r3, [pc, #84]	; (8000940 <_FuncSetHandler+0x154>)
 80008ea:	2204      	movs	r2, #4
 80008ec:	701a      	strb	r2, [r3, #0]
			HAL_DAC_Stop_DMA(&hdac1, DAC1_CHANNEL_1);
 80008ee:	2100      	movs	r1, #0
 80008f0:	4814      	ldr	r0, [pc, #80]	; (8000944 <_FuncSetHandler+0x158>)
 80008f2:	f003 fc7f 	bl	80041f4 <HAL_DAC_Stop_DMA>
			HAL_DAC_Start_DMA(&hdac1, DAC1_CHANNEL_1, triangle_data_table, TRIANGLE_DATA_SIZE, DAC_ALIGN_12B_R);
 80008f6:	2300      	movs	r3, #0
 80008f8:	9300      	str	r3, [sp, #0]
 80008fa:	2378      	movs	r3, #120	; 0x78
 80008fc:	4a16      	ldr	r2, [pc, #88]	; (8000958 <_FuncSetHandler+0x16c>)
 80008fe:	2100      	movs	r1, #0
 8000900:	4810      	ldr	r0, [pc, #64]	; (8000944 <_FuncSetHandler+0x158>)
 8000902:	f003 fbb5 	bl	8004070 <HAL_DAC_Start_DMA>
			break;
 8000906:	e00f      	b.n	8000928 <_FuncSetHandler+0x13c>
		case 20:
		case 21:
		case 22:
		case 23:
			eNewOutMode = Impulse_Out_Mode;
 8000908:	4b0d      	ldr	r3, [pc, #52]	; (8000940 <_FuncSetHandler+0x154>)
 800090a:	2205      	movs	r2, #5
 800090c:	701a      	strb	r2, [r3, #0]
			HAL_DAC_Stop_DMA(&hdac1, DAC1_CHANNEL_1);
 800090e:	2100      	movs	r1, #0
 8000910:	480c      	ldr	r0, [pc, #48]	; (8000944 <_FuncSetHandler+0x158>)
 8000912:	f003 fc6f 	bl	80041f4 <HAL_DAC_Stop_DMA>
			HAL_DAC_Start_DMA(&hdac1, DAC1_CHANNEL_1, unitimpulse_data_table, UNITIMPULSE_DATA_SIZE, DAC_ALIGN_12B_R);
 8000916:	2300      	movs	r3, #0
 8000918:	9300      	str	r3, [sp, #0]
 800091a:	2378      	movs	r3, #120	; 0x78
 800091c:	4a0f      	ldr	r2, [pc, #60]	; (800095c <_FuncSetHandler+0x170>)
 800091e:	2100      	movs	r1, #0
 8000920:	4808      	ldr	r0, [pc, #32]	; (8000944 <_FuncSetHandler+0x158>)
 8000922:	f003 fba5 	bl	8004070 <HAL_DAC_Start_DMA>
			break;
 8000926:	bf00      	nop
	}
	eNewEvent = evFuncMenu;
 8000928:	4b0d      	ldr	r3, [pc, #52]	; (8000960 <_FuncSetHandler+0x174>)
 800092a:	2201      	movs	r2, #1
 800092c:	701a      	strb	r2, [r3, #0]
	return Func_Menu_State;
 800092e:	2301      	movs	r3, #1
}
 8000930:	4618      	mov	r0, r3
 8000932:	46bd      	mov	sp, r7
 8000934:	bd80      	pop	{r7, pc}
 8000936:	bf00      	nop
 8000938:	08009538 	.word	0x08009538
 800093c:	40012c00 	.word	0x40012c00
 8000940:	20000be3 	.word	0x20000be3
 8000944:	20000d10 	.word	0x20000d10
 8000948:	200003e0 	.word	0x200003e0
 800094c:	200005c0 	.word	0x200005c0
 8000950:	20000020 	.word	0x20000020
 8000954:	20000200 	.word	0x20000200
 8000958:	200007a0 	.word	0x200007a0
 800095c:	20000980 	.word	0x20000980
 8000960:	20000be2 	.word	0x20000be2

08000964 <_ExitFuncMenuHandler>:
 *
 *
 *
 */
eSystemState _ExitFuncMenuHandler()
{
 8000964:	b580      	push	{r7, lr}
 8000966:	af00      	add	r7, sp, #0
#ifdef EM_SWV_DEBUG
	printf("ExitFuncMenu Event captured\n");
 8000968:	480b      	ldr	r0, [pc, #44]	; (8000998 <_ExitFuncMenuHandler+0x34>)
 800096a:	f008 f94f 	bl	8008c0c <puts>
#endif

	// disable the menu
	DM_ShowFuncSelectMenu(DISABLE_FUNCMENU);
 800096e:	2000      	movs	r0, #0
 8000970:	f7ff fcc2 	bl	80002f8 <DM_ShowFuncSelectMenu>

	// reset the encoder range
	TIM1->ARR = 1024;
 8000974:	4b09      	ldr	r3, [pc, #36]	; (800099c <_ExitFuncMenuHandler+0x38>)
 8000976:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800097a:	62da      	str	r2, [r3, #44]	; 0x2c

	// don't let the DisplayManager interrupt the LCD refresh
	HAL_TIM_Base_Stop_IT(&htim15);
 800097c:	4808      	ldr	r0, [pc, #32]	; (80009a0 <_ExitFuncMenuHandler+0x3c>)
 800097e:	f005 ff47 	bl	8006810 <HAL_TIM_Base_Stop_IT>
	{
		DM_RefreshBackgroundLayout();
 8000982:	f7ff fe83 	bl	800068c <DM_RefreshBackgroundLayout>
	}
	HAL_TIM_Base_Start_IT(&htim15);
 8000986:	4806      	ldr	r0, [pc, #24]	; (80009a0 <_ExitFuncMenuHandler+0x3c>)
 8000988:	f005 ff0c 	bl	80067a4 <HAL_TIM_Base_Start_IT>

	eNewEvent = evIdle;
 800098c:	4b05      	ldr	r3, [pc, #20]	; (80009a4 <_ExitFuncMenuHandler+0x40>)
 800098e:	2200      	movs	r2, #0
 8000990:	701a      	strb	r2, [r3, #0]
	return Idle_State;
 8000992:	2300      	movs	r3, #0
}
 8000994:	4618      	mov	r0, r3
 8000996:	bd80      	pop	{r7, pc}
 8000998:	08009558 	.word	0x08009558
 800099c:	40012c00 	.word	0x40012c00
 80009a0:	20000e94 	.word	0x20000e94
 80009a4:	20000be2 	.word	0x20000be2

080009a8 <_FreqMenuHandler>:
 *
 *	Business logic for FreqAdjust events
 *
 */
eSystemState _FreqMenuHandler(void)
{
 80009a8:	b580      	push	{r7, lr}
 80009aa:	af00      	add	r7, sp, #0
#ifdef EM_SWV_DEBUG
	printf("FreqMenu Event captured\n");
 80009ac:	4802      	ldr	r0, [pc, #8]	; (80009b8 <_FreqMenuHandler+0x10>)
 80009ae:	f008 f92d 	bl	8008c0c <puts>
#endif

	return Idle_State;
 80009b2:	2300      	movs	r3, #0
}
 80009b4:	4618      	mov	r0, r3
 80009b6:	bd80      	pop	{r7, pc}
 80009b8:	08009574 	.word	0x08009574

080009bc <_AmplMenuHandler>:
 *
 *	Business logic for AmplitudeAdjust events
 *
 */
eSystemState _AmplMenuHandler(void)
{
 80009bc:	b580      	push	{r7, lr}
 80009be:	af00      	add	r7, sp, #0
#ifdef EM_SWV_DEBUG
	printf("AmplitudeMenu Event captured\n");
 80009c0:	4802      	ldr	r0, [pc, #8]	; (80009cc <_AmplMenuHandler+0x10>)
 80009c2:	f008 f923 	bl	8008c0c <puts>
#endif

	return Idle_State;
 80009c6:	2300      	movs	r3, #0
}
 80009c8:	4618      	mov	r0, r3
 80009ca:	bd80      	pop	{r7, pc}
 80009cc:	0800958c 	.word	0x0800958c

080009d0 <_BiasMenuHandler>:
 *
 *	Business logic for BiasAdjust events
 *
 */
eSystemState _BiasMenuHandler(void)
{
 80009d0:	b580      	push	{r7, lr}
 80009d2:	af00      	add	r7, sp, #0
#ifdef EM_SWV_DEBUG
	printf("BiasMenu Event captured\n");
 80009d4:	4802      	ldr	r0, [pc, #8]	; (80009e0 <_BiasMenuHandler+0x10>)
 80009d6:	f008 f919 	bl	8008c0c <puts>
#endif

	return Idle_State;
 80009da:	2300      	movs	r3, #0
}
 80009dc:	4618      	mov	r0, r3
 80009de:	bd80      	pop	{r7, pc}
 80009e0:	080095ac 	.word	0x080095ac

080009e4 <_AdjustConfirmedHandler>:
 *
 *	Business logic for AdjustConfirmed events
 *
 */
eSystemState _AdjustConfirmedHandler(void)
{
 80009e4:	b580      	push	{r7, lr}
 80009e6:	af00      	add	r7, sp, #0
#ifdef EM_SWV_DEBUG
	printf("AdjustConfirmed Event captured\n");
 80009e8:	4802      	ldr	r0, [pc, #8]	; (80009f4 <_AdjustConfirmedHandler+0x10>)
 80009ea:	f008 f90f 	bl	8008c0c <puts>
#endif

	return Idle_State;
 80009ee:	2300      	movs	r3, #0
}
 80009f0:	4618      	mov	r0, r3
 80009f2:	bd80      	pop	{r7, pc}
 80009f4:	080095c4 	.word	0x080095c4

080009f8 <EM_SetNewEvent>:
 *
 * 	Set by NVIC interrupt handlers
 *
 */
void EM_SetNewEvent(eSystemEvent pEvent)
{
 80009f8:	b480      	push	{r7}
 80009fa:	b083      	sub	sp, #12
 80009fc:	af00      	add	r7, sp, #0
 80009fe:	4603      	mov	r3, r0
 8000a00:	71fb      	strb	r3, [r7, #7]
	eNewEvent = pEvent;
 8000a02:	4a04      	ldr	r2, [pc, #16]	; (8000a14 <EM_SetNewEvent+0x1c>)
 8000a04:	79fb      	ldrb	r3, [r7, #7]
 8000a06:	7013      	strb	r3, [r2, #0]
}
 8000a08:	bf00      	nop
 8000a0a:	370c      	adds	r7, #12
 8000a0c:	46bd      	mov	sp, r7
 8000a0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a12:	4770      	bx	lr
 8000a14:	20000be2 	.word	0x20000be2

08000a18 <EM_GetOutputMode>:
 *
 *
 *
 */
eOutput_mode EM_GetOutputMode()
{
 8000a18:	b480      	push	{r7}
 8000a1a:	af00      	add	r7, sp, #0
	return eNewOutMode;
 8000a1c:	4b03      	ldr	r3, [pc, #12]	; (8000a2c <EM_GetOutputMode+0x14>)
 8000a1e:	781b      	ldrb	r3, [r3, #0]
}
 8000a20:	4618      	mov	r0, r3
 8000a22:	46bd      	mov	sp, r7
 8000a24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a28:	4770      	bx	lr
 8000a2a:	bf00      	nop
 8000a2c:	20000be3 	.word	0x20000be3

08000a30 <EM_SetEncoderValue>:
 *
 *
 *
 */
void EM_SetEncoderValue(uint32_t pValue)
{
 8000a30:	b480      	push	{r7}
 8000a32:	b083      	sub	sp, #12
 8000a34:	af00      	add	r7, sp, #0
 8000a36:	6078      	str	r0, [r7, #4]
	newRotEncoderValue = pValue;
 8000a38:	4a04      	ldr	r2, [pc, #16]	; (8000a4c <EM_SetEncoderValue+0x1c>)
 8000a3a:	687b      	ldr	r3, [r7, #4]
 8000a3c:	6013      	str	r3, [r2, #0]


}
 8000a3e:	bf00      	nop
 8000a40:	370c      	adds	r7, #12
 8000a42:	46bd      	mov	sp, r7
 8000a44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a48:	4770      	bx	lr
 8000a4a:	bf00      	nop
 8000a4c:	20000be4 	.word	0x20000be4

08000a50 <MX_ADC1_Init>:
ADC_HandleTypeDef hadc1;
DMA_HandleTypeDef hdma_adc1;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 8000a50:	b580      	push	{r7, lr}
 8000a52:	b08c      	sub	sp, #48	; 0x30
 8000a54:	af00      	add	r7, sp, #0
  ADC_MultiModeTypeDef multimode = {0};
 8000a56:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000a5a:	2200      	movs	r2, #0
 8000a5c:	601a      	str	r2, [r3, #0]
 8000a5e:	605a      	str	r2, [r3, #4]
 8000a60:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 8000a62:	1d3b      	adds	r3, r7, #4
 8000a64:	2220      	movs	r2, #32
 8000a66:	2100      	movs	r1, #0
 8000a68:	4618      	mov	r0, r3
 8000a6a:	f008 f86b 	bl	8008b44 <memset>

  /** Common config 
  */
  hadc1.Instance = ADC1;
 8000a6e:	4b32      	ldr	r3, [pc, #200]	; (8000b38 <MX_ADC1_Init+0xe8>)
 8000a70:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8000a74:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 8000a76:	4b30      	ldr	r3, [pc, #192]	; (8000b38 <MX_ADC1_Init+0xe8>)
 8000a78:	2200      	movs	r2, #0
 8000a7a:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8000a7c:	4b2e      	ldr	r3, [pc, #184]	; (8000b38 <MX_ADC1_Init+0xe8>)
 8000a7e:	2200      	movs	r2, #0
 8000a80:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000a82:	4b2d      	ldr	r3, [pc, #180]	; (8000b38 <MX_ADC1_Init+0xe8>)
 8000a84:	2200      	movs	r2, #0
 8000a86:	60da      	str	r2, [r3, #12]
  hadc1.Init.GainCompensation = 0;
 8000a88:	4b2b      	ldr	r3, [pc, #172]	; (8000b38 <MX_ADC1_Init+0xe8>)
 8000a8a:	2200      	movs	r2, #0
 8000a8c:	611a      	str	r2, [r3, #16]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8000a8e:	4b2a      	ldr	r3, [pc, #168]	; (8000b38 <MX_ADC1_Init+0xe8>)
 8000a90:	2200      	movs	r2, #0
 8000a92:	615a      	str	r2, [r3, #20]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000a94:	4b28      	ldr	r3, [pc, #160]	; (8000b38 <MX_ADC1_Init+0xe8>)
 8000a96:	2204      	movs	r2, #4
 8000a98:	619a      	str	r2, [r3, #24]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8000a9a:	4b27      	ldr	r3, [pc, #156]	; (8000b38 <MX_ADC1_Init+0xe8>)
 8000a9c:	2200      	movs	r2, #0
 8000a9e:	771a      	strb	r2, [r3, #28]
  hadc1.Init.ContinuousConvMode = ENABLE;
 8000aa0:	4b25      	ldr	r3, [pc, #148]	; (8000b38 <MX_ADC1_Init+0xe8>)
 8000aa2:	2201      	movs	r2, #1
 8000aa4:	775a      	strb	r2, [r3, #29]
  hadc1.Init.NbrOfConversion = 1;
 8000aa6:	4b24      	ldr	r3, [pc, #144]	; (8000b38 <MX_ADC1_Init+0xe8>)
 8000aa8:	2201      	movs	r2, #1
 8000aaa:	621a      	str	r2, [r3, #32]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000aac:	4b22      	ldr	r3, [pc, #136]	; (8000b38 <MX_ADC1_Init+0xe8>)
 8000aae:	2200      	movs	r2, #0
 8000ab0:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000ab4:	4b20      	ldr	r3, [pc, #128]	; (8000b38 <MX_ADC1_Init+0xe8>)
 8000ab6:	2200      	movs	r2, #0
 8000ab8:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000aba:	4b1f      	ldr	r3, [pc, #124]	; (8000b38 <MX_ADC1_Init+0xe8>)
 8000abc:	2200      	movs	r2, #0
 8000abe:	631a      	str	r2, [r3, #48]	; 0x30
  hadc1.Init.DMAContinuousRequests = ENABLE;
 8000ac0:	4b1d      	ldr	r3, [pc, #116]	; (8000b38 <MX_ADC1_Init+0xe8>)
 8000ac2:	2201      	movs	r2, #1
 8000ac4:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hadc1.Init.Overrun = ADC_OVR_DATA_OVERWRITTEN;
 8000ac8:	4b1b      	ldr	r3, [pc, #108]	; (8000b38 <MX_ADC1_Init+0xe8>)
 8000aca:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8000ace:	63da      	str	r2, [r3, #60]	; 0x3c
  hadc1.Init.OversamplingMode = DISABLE;
 8000ad0:	4b19      	ldr	r3, [pc, #100]	; (8000b38 <MX_ADC1_Init+0xe8>)
 8000ad2:	2200      	movs	r2, #0
 8000ad4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000ad8:	4817      	ldr	r0, [pc, #92]	; (8000b38 <MX_ADC1_Init+0xe8>)
 8000ada:	f001 ffc7 	bl	8002a6c <HAL_ADC_Init>
 8000ade:	4603      	mov	r3, r0
 8000ae0:	2b00      	cmp	r3, #0
 8000ae2:	d001      	beq.n	8000ae8 <MX_ADC1_Init+0x98>
  {
    Error_Handler();
 8000ae4:	f000 ff3a 	bl	800195c <Error_Handler>
  }
  /** Configure the ADC multi-mode 
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 8000ae8:	2300      	movs	r3, #0
 8000aea:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 8000aec:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000af0:	4619      	mov	r1, r3
 8000af2:	4811      	ldr	r0, [pc, #68]	; (8000b38 <MX_ADC1_Init+0xe8>)
 8000af4:	f002 fd50 	bl	8003598 <HAL_ADCEx_MultiModeConfigChannel>
 8000af8:	4603      	mov	r3, r0
 8000afa:	2b00      	cmp	r3, #0
 8000afc:	d001      	beq.n	8000b02 <MX_ADC1_Init+0xb2>
  {
    Error_Handler();
 8000afe:	f000 ff2d 	bl	800195c <Error_Handler>
  }
  /** Configure Regular Channel 
  */
  sConfig.Channel = ADC_CHANNEL_3;
 8000b02:	4b0e      	ldr	r3, [pc, #56]	; (8000b3c <MX_ADC1_Init+0xec>)
 8000b04:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000b06:	2306      	movs	r3, #6
 8000b08:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 8000b0a:	2300      	movs	r3, #0
 8000b0c:	60fb      	str	r3, [r7, #12]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8000b0e:	237f      	movs	r3, #127	; 0x7f
 8000b10:	613b      	str	r3, [r7, #16]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8000b12:	2304      	movs	r3, #4
 8000b14:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 8000b16:	2300      	movs	r3, #0
 8000b18:	61bb      	str	r3, [r7, #24]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000b1a:	1d3b      	adds	r3, r7, #4
 8000b1c:	4619      	mov	r1, r3
 8000b1e:	4806      	ldr	r0, [pc, #24]	; (8000b38 <MX_ADC1_Init+0xe8>)
 8000b20:	f002 f964 	bl	8002dec <HAL_ADC_ConfigChannel>
 8000b24:	4603      	mov	r3, r0
 8000b26:	2b00      	cmp	r3, #0
 8000b28:	d001      	beq.n	8000b2e <MX_ADC1_Init+0xde>
  {
    Error_Handler();
 8000b2a:	f000 ff17 	bl	800195c <Error_Handler>
  }

}
 8000b2e:	bf00      	nop
 8000b30:	3730      	adds	r7, #48	; 0x30
 8000b32:	46bd      	mov	sp, r7
 8000b34:	bd80      	pop	{r7, pc}
 8000b36:	bf00      	nop
 8000b38:	20000c0c 	.word	0x20000c0c
 8000b3c:	0c900008 	.word	0x0c900008

08000b40 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 8000b40:	b580      	push	{r7, lr}
 8000b42:	b08a      	sub	sp, #40	; 0x28
 8000b44:	af00      	add	r7, sp, #0
 8000b46:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b48:	f107 0314 	add.w	r3, r7, #20
 8000b4c:	2200      	movs	r2, #0
 8000b4e:	601a      	str	r2, [r3, #0]
 8000b50:	605a      	str	r2, [r3, #4]
 8000b52:	609a      	str	r2, [r3, #8]
 8000b54:	60da      	str	r2, [r3, #12]
 8000b56:	611a      	str	r2, [r3, #16]
  if(adcHandle->Instance==ADC1)
 8000b58:	687b      	ldr	r3, [r7, #4]
 8000b5a:	681b      	ldr	r3, [r3, #0]
 8000b5c:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8000b60:	d14f      	bne.n	8000c02 <HAL_ADC_MspInit+0xc2>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* ADC1 clock enable */
    __HAL_RCC_ADC12_CLK_ENABLE();
 8000b62:	4b2a      	ldr	r3, [pc, #168]	; (8000c0c <HAL_ADC_MspInit+0xcc>)
 8000b64:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000b66:	4a29      	ldr	r2, [pc, #164]	; (8000c0c <HAL_ADC_MspInit+0xcc>)
 8000b68:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8000b6c:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000b6e:	4b27      	ldr	r3, [pc, #156]	; (8000c0c <HAL_ADC_MspInit+0xcc>)
 8000b70:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000b72:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8000b76:	613b      	str	r3, [r7, #16]
 8000b78:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000b7a:	4b24      	ldr	r3, [pc, #144]	; (8000c0c <HAL_ADC_MspInit+0xcc>)
 8000b7c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000b7e:	4a23      	ldr	r2, [pc, #140]	; (8000c0c <HAL_ADC_MspInit+0xcc>)
 8000b80:	f043 0301 	orr.w	r3, r3, #1
 8000b84:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000b86:	4b21      	ldr	r3, [pc, #132]	; (8000c0c <HAL_ADC_MspInit+0xcc>)
 8000b88:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000b8a:	f003 0301 	and.w	r3, r3, #1
 8000b8e:	60fb      	str	r3, [r7, #12]
 8000b90:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration    
    PA2     ------> ADC1_IN3 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8000b92:	2304      	movs	r3, #4
 8000b94:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000b96:	2303      	movs	r3, #3
 8000b98:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b9a:	2300      	movs	r3, #0
 8000b9c:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000b9e:	f107 0314 	add.w	r3, r7, #20
 8000ba2:	4619      	mov	r1, r3
 8000ba4:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000ba8:	f004 f8b8 	bl	8004d1c <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Channel1;
 8000bac:	4b18      	ldr	r3, [pc, #96]	; (8000c10 <HAL_ADC_MspInit+0xd0>)
 8000bae:	4a19      	ldr	r2, [pc, #100]	; (8000c14 <HAL_ADC_MspInit+0xd4>)
 8000bb0:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Request = DMA_REQUEST_ADC1;
 8000bb2:	4b17      	ldr	r3, [pc, #92]	; (8000c10 <HAL_ADC_MspInit+0xd0>)
 8000bb4:	2205      	movs	r2, #5
 8000bb6:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000bb8:	4b15      	ldr	r3, [pc, #84]	; (8000c10 <HAL_ADC_MspInit+0xd0>)
 8000bba:	2200      	movs	r2, #0
 8000bbc:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8000bbe:	4b14      	ldr	r3, [pc, #80]	; (8000c10 <HAL_ADC_MspInit+0xd0>)
 8000bc0:	2200      	movs	r2, #0
 8000bc2:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8000bc4:	4b12      	ldr	r3, [pc, #72]	; (8000c10 <HAL_ADC_MspInit+0xd0>)
 8000bc6:	2280      	movs	r2, #128	; 0x80
 8000bc8:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8000bca:	4b11      	ldr	r3, [pc, #68]	; (8000c10 <HAL_ADC_MspInit+0xd0>)
 8000bcc:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000bd0:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8000bd2:	4b0f      	ldr	r3, [pc, #60]	; (8000c10 <HAL_ADC_MspInit+0xd0>)
 8000bd4:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8000bd8:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 8000bda:	4b0d      	ldr	r3, [pc, #52]	; (8000c10 <HAL_ADC_MspInit+0xd0>)
 8000bdc:	2220      	movs	r2, #32
 8000bde:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 8000be0:	4b0b      	ldr	r3, [pc, #44]	; (8000c10 <HAL_ADC_MspInit+0xd0>)
 8000be2:	2200      	movs	r2, #0
 8000be4:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8000be6:	480a      	ldr	r0, [pc, #40]	; (8000c10 <HAL_ADC_MspInit+0xd0>)
 8000be8:	f003 fdcc 	bl	8004784 <HAL_DMA_Init>
 8000bec:	4603      	mov	r3, r0
 8000bee:	2b00      	cmp	r3, #0
 8000bf0:	d001      	beq.n	8000bf6 <HAL_ADC_MspInit+0xb6>
    {
      Error_Handler();
 8000bf2:	f000 feb3 	bl	800195c <Error_Handler>
    }

    __HAL_LINKDMA(adcHandle,DMA_Handle,hdma_adc1);
 8000bf6:	687b      	ldr	r3, [r7, #4]
 8000bf8:	4a05      	ldr	r2, [pc, #20]	; (8000c10 <HAL_ADC_MspInit+0xd0>)
 8000bfa:	655a      	str	r2, [r3, #84]	; 0x54
 8000bfc:	4a04      	ldr	r2, [pc, #16]	; (8000c10 <HAL_ADC_MspInit+0xd0>)
 8000bfe:	687b      	ldr	r3, [r7, #4]
 8000c00:	6293      	str	r3, [r2, #40]	; 0x28

  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 8000c02:	bf00      	nop
 8000c04:	3728      	adds	r7, #40	; 0x28
 8000c06:	46bd      	mov	sp, r7
 8000c08:	bd80      	pop	{r7, pc}
 8000c0a:	bf00      	nop
 8000c0c:	40021000 	.word	0x40021000
 8000c10:	20000c78 	.word	0x20000c78
 8000c14:	40020008 	.word	0x40020008

08000c18 <MX_COMP1_Init>:

COMP_HandleTypeDef hcomp1;

/* COMP1 init function */
void MX_COMP1_Init(void)
{
 8000c18:	b580      	push	{r7, lr}
 8000c1a:	af00      	add	r7, sp, #0

  hcomp1.Instance = COMP1;
 8000c1c:	4b0f      	ldr	r3, [pc, #60]	; (8000c5c <MX_COMP1_Init+0x44>)
 8000c1e:	4a10      	ldr	r2, [pc, #64]	; (8000c60 <MX_COMP1_Init+0x48>)
 8000c20:	601a      	str	r2, [r3, #0]
  hcomp1.Init.InputPlus = COMP_INPUT_PLUS_IO1;
 8000c22:	4b0e      	ldr	r3, [pc, #56]	; (8000c5c <MX_COMP1_Init+0x44>)
 8000c24:	2200      	movs	r2, #0
 8000c26:	605a      	str	r2, [r3, #4]
  hcomp1.Init.InputMinus = COMP_INPUT_MINUS_VREFINT;
 8000c28:	4b0c      	ldr	r3, [pc, #48]	; (8000c5c <MX_COMP1_Init+0x44>)
 8000c2a:	4a0e      	ldr	r2, [pc, #56]	; (8000c64 <MX_COMP1_Init+0x4c>)
 8000c2c:	609a      	str	r2, [r3, #8]
  hcomp1.Init.OutputPol = COMP_OUTPUTPOL_NONINVERTED;
 8000c2e:	4b0b      	ldr	r3, [pc, #44]	; (8000c5c <MX_COMP1_Init+0x44>)
 8000c30:	2200      	movs	r2, #0
 8000c32:	611a      	str	r2, [r3, #16]
  hcomp1.Init.Hysteresis = COMP_HYSTERESIS_NONE;
 8000c34:	4b09      	ldr	r3, [pc, #36]	; (8000c5c <MX_COMP1_Init+0x44>)
 8000c36:	2200      	movs	r2, #0
 8000c38:	60da      	str	r2, [r3, #12]
  hcomp1.Init.BlankingSrce = COMP_BLANKINGSRC_NONE;
 8000c3a:	4b08      	ldr	r3, [pc, #32]	; (8000c5c <MX_COMP1_Init+0x44>)
 8000c3c:	2200      	movs	r2, #0
 8000c3e:	615a      	str	r2, [r3, #20]
  hcomp1.Init.TriggerMode = COMP_TRIGGERMODE_NONE;
 8000c40:	4b06      	ldr	r3, [pc, #24]	; (8000c5c <MX_COMP1_Init+0x44>)
 8000c42:	2200      	movs	r2, #0
 8000c44:	619a      	str	r2, [r3, #24]
  if (HAL_COMP_Init(&hcomp1) != HAL_OK)
 8000c46:	4805      	ldr	r0, [pc, #20]	; (8000c5c <MX_COMP1_Init+0x44>)
 8000c48:	f002 fefa 	bl	8003a40 <HAL_COMP_Init>
 8000c4c:	4603      	mov	r3, r0
 8000c4e:	2b00      	cmp	r3, #0
 8000c50:	d001      	beq.n	8000c56 <MX_COMP1_Init+0x3e>
  {
    Error_Handler();
 8000c52:	f000 fe83 	bl	800195c <Error_Handler>
  }

}
 8000c56:	bf00      	nop
 8000c58:	bd80      	pop	{r7, pc}
 8000c5a:	bf00      	nop
 8000c5c:	20000cd8 	.word	0x20000cd8
 8000c60:	40010200 	.word	0x40010200
 8000c64:	00800030 	.word	0x00800030

08000c68 <HAL_COMP_MspInit>:

void HAL_COMP_MspInit(COMP_HandleTypeDef* compHandle)
{
 8000c68:	b580      	push	{r7, lr}
 8000c6a:	b088      	sub	sp, #32
 8000c6c:	af00      	add	r7, sp, #0
 8000c6e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c70:	f107 030c 	add.w	r3, r7, #12
 8000c74:	2200      	movs	r2, #0
 8000c76:	601a      	str	r2, [r3, #0]
 8000c78:	605a      	str	r2, [r3, #4]
 8000c7a:	609a      	str	r2, [r3, #8]
 8000c7c:	60da      	str	r2, [r3, #12]
 8000c7e:	611a      	str	r2, [r3, #16]
  if(compHandle->Instance==COMP1)
 8000c80:	687b      	ldr	r3, [r7, #4]
 8000c82:	681b      	ldr	r3, [r3, #0]
 8000c84:	4a0f      	ldr	r2, [pc, #60]	; (8000cc4 <HAL_COMP_MspInit+0x5c>)
 8000c86:	4293      	cmp	r3, r2
 8000c88:	d118      	bne.n	8000cbc <HAL_COMP_MspInit+0x54>
  {
  /* USER CODE BEGIN COMP1_MspInit 0 */

  /* USER CODE END COMP1_MspInit 0 */
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000c8a:	4b0f      	ldr	r3, [pc, #60]	; (8000cc8 <HAL_COMP_MspInit+0x60>)
 8000c8c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000c8e:	4a0e      	ldr	r2, [pc, #56]	; (8000cc8 <HAL_COMP_MspInit+0x60>)
 8000c90:	f043 0301 	orr.w	r3, r3, #1
 8000c94:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000c96:	4b0c      	ldr	r3, [pc, #48]	; (8000cc8 <HAL_COMP_MspInit+0x60>)
 8000c98:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000c9a:	f003 0301 	and.w	r3, r3, #1
 8000c9e:	60bb      	str	r3, [r7, #8]
 8000ca0:	68bb      	ldr	r3, [r7, #8]
    /**COMP1 GPIO Configuration    
    PA1     ------> COMP1_INP 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 8000ca2:	2302      	movs	r3, #2
 8000ca4:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000ca6:	2303      	movs	r3, #3
 8000ca8:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000caa:	2300      	movs	r3, #0
 8000cac:	617b      	str	r3, [r7, #20]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000cae:	f107 030c 	add.w	r3, r7, #12
 8000cb2:	4619      	mov	r1, r3
 8000cb4:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000cb8:	f004 f830 	bl	8004d1c <HAL_GPIO_Init>

  /* USER CODE BEGIN COMP1_MspInit 1 */

  /* USER CODE END COMP1_MspInit 1 */
  }
}
 8000cbc:	bf00      	nop
 8000cbe:	3720      	adds	r7, #32
 8000cc0:	46bd      	mov	sp, r7
 8000cc2:	bd80      	pop	{r7, pc}
 8000cc4:	40010200 	.word	0x40010200
 8000cc8:	40021000 	.word	0x40021000

08000ccc <MX_DAC1_Init>:
DMA_HandleTypeDef hdma_dac1_ch1;
DMA_HandleTypeDef hdma_dac2_ch1;

/* DAC1 init function */
void MX_DAC1_Init(void)
{
 8000ccc:	b580      	push	{r7, lr}
 8000cce:	b08c      	sub	sp, #48	; 0x30
 8000cd0:	af00      	add	r7, sp, #0
  DAC_ChannelConfTypeDef sConfig = {0};
 8000cd2:	463b      	mov	r3, r7
 8000cd4:	2230      	movs	r2, #48	; 0x30
 8000cd6:	2100      	movs	r1, #0
 8000cd8:	4618      	mov	r0, r3
 8000cda:	f007 ff33 	bl	8008b44 <memset>

  /** DAC Initialization 
  */
  hdac1.Instance = DAC1;
 8000cde:	4b1e      	ldr	r3, [pc, #120]	; (8000d58 <MX_DAC1_Init+0x8c>)
 8000ce0:	4a1e      	ldr	r2, [pc, #120]	; (8000d5c <MX_DAC1_Init+0x90>)
 8000ce2:	601a      	str	r2, [r3, #0]
  if (HAL_DAC_Init(&hdac1) != HAL_OK)
 8000ce4:	481c      	ldr	r0, [pc, #112]	; (8000d58 <MX_DAC1_Init+0x8c>)
 8000ce6:	f003 f94e 	bl	8003f86 <HAL_DAC_Init>
 8000cea:	4603      	mov	r3, r0
 8000cec:	2b00      	cmp	r3, #0
 8000cee:	d001      	beq.n	8000cf4 <MX_DAC1_Init+0x28>
  {
    Error_Handler();
 8000cf0:	f000 fe34 	bl	800195c <Error_Handler>
  }
  /** DAC channel OUT1 config 
  */
  sConfig.DAC_HighFrequency = DAC_HIGH_FREQUENCY_INTERFACE_MODE_ABOVE_80MHZ;
 8000cf4:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8000cf8:	603b      	str	r3, [r7, #0]
  sConfig.DAC_DMADoubleDataMode = DISABLE;
 8000cfa:	2300      	movs	r3, #0
 8000cfc:	713b      	strb	r3, [r7, #4]
  sConfig.DAC_SignedFormat = DISABLE;
 8000cfe:	2300      	movs	r3, #0
 8000d00:	717b      	strb	r3, [r7, #5]
  sConfig.DAC_SampleAndHold = DAC_SAMPLEANDHOLD_DISABLE;
 8000d02:	2300      	movs	r3, #0
 8000d04:	60bb      	str	r3, [r7, #8]
  sConfig.DAC_Trigger = DAC_TRIGGER_T8_TRGO;
 8000d06:	2306      	movs	r3, #6
 8000d08:	60fb      	str	r3, [r7, #12]
  sConfig.DAC_Trigger2 = DAC_TRIGGER_NONE;
 8000d0a:	2300      	movs	r3, #0
 8000d0c:	613b      	str	r3, [r7, #16]
  sConfig.DAC_OutputBuffer = DAC_OUTPUTBUFFER_ENABLE;
 8000d0e:	2300      	movs	r3, #0
 8000d10:	617b      	str	r3, [r7, #20]
  sConfig.DAC_ConnectOnChipPeripheral = DAC_CHIPCONNECT_DISABLE;
 8000d12:	2301      	movs	r3, #1
 8000d14:	61bb      	str	r3, [r7, #24]
  sConfig.DAC_UserTrimming = DAC_TRIMMING_FACTORY;
 8000d16:	2300      	movs	r3, #0
 8000d18:	61fb      	str	r3, [r7, #28]
  if (HAL_DAC_ConfigChannel(&hdac1, &sConfig, DAC_CHANNEL_1) != HAL_OK)
 8000d1a:	463b      	mov	r3, r7
 8000d1c:	2200      	movs	r2, #0
 8000d1e:	4619      	mov	r1, r3
 8000d20:	480d      	ldr	r0, [pc, #52]	; (8000d58 <MX_DAC1_Init+0x8c>)
 8000d22:	f003 faf9 	bl	8004318 <HAL_DAC_ConfigChannel>
 8000d26:	4603      	mov	r3, r0
 8000d28:	2b00      	cmp	r3, #0
 8000d2a:	d001      	beq.n	8000d30 <MX_DAC1_Init+0x64>
  {
    Error_Handler();
 8000d2c:	f000 fe16 	bl	800195c <Error_Handler>
  }
  /** DAC channel OUT2 config 
  */
  sConfig.DAC_Trigger = DAC_TRIGGER_NONE;
 8000d30:	2300      	movs	r3, #0
 8000d32:	60fb      	str	r3, [r7, #12]
  sConfig.DAC_ConnectOnChipPeripheral = DAC_CHIPCONNECT_DISABLE;
 8000d34:	2301      	movs	r3, #1
 8000d36:	61bb      	str	r3, [r7, #24]
  if (HAL_DAC_ConfigChannel(&hdac1, &sConfig, DAC_CHANNEL_2) != HAL_OK)
 8000d38:	463b      	mov	r3, r7
 8000d3a:	2210      	movs	r2, #16
 8000d3c:	4619      	mov	r1, r3
 8000d3e:	4806      	ldr	r0, [pc, #24]	; (8000d58 <MX_DAC1_Init+0x8c>)
 8000d40:	f003 faea 	bl	8004318 <HAL_DAC_ConfigChannel>
 8000d44:	4603      	mov	r3, r0
 8000d46:	2b00      	cmp	r3, #0
 8000d48:	d001      	beq.n	8000d4e <MX_DAC1_Init+0x82>
  {
    Error_Handler();
 8000d4a:	f000 fe07 	bl	800195c <Error_Handler>
  }

}
 8000d4e:	bf00      	nop
 8000d50:	3730      	adds	r7, #48	; 0x30
 8000d52:	46bd      	mov	sp, r7
 8000d54:	bd80      	pop	{r7, pc}
 8000d56:	bf00      	nop
 8000d58:	20000d10 	.word	0x20000d10
 8000d5c:	50000800 	.word	0x50000800

08000d60 <MX_DAC2_Init>:
/* DAC2 init function */
void MX_DAC2_Init(void)
{
 8000d60:	b580      	push	{r7, lr}
 8000d62:	b08c      	sub	sp, #48	; 0x30
 8000d64:	af00      	add	r7, sp, #0
  DAC_ChannelConfTypeDef sConfig = {0};
 8000d66:	463b      	mov	r3, r7
 8000d68:	2230      	movs	r2, #48	; 0x30
 8000d6a:	2100      	movs	r1, #0
 8000d6c:	4618      	mov	r0, r3
 8000d6e:	f007 fee9 	bl	8008b44 <memset>

  /** DAC Initialization 
  */
  hdac2.Instance = DAC2;
 8000d72:	4b16      	ldr	r3, [pc, #88]	; (8000dcc <MX_DAC2_Init+0x6c>)
 8000d74:	4a16      	ldr	r2, [pc, #88]	; (8000dd0 <MX_DAC2_Init+0x70>)
 8000d76:	601a      	str	r2, [r3, #0]
  if (HAL_DAC_Init(&hdac2) != HAL_OK)
 8000d78:	4814      	ldr	r0, [pc, #80]	; (8000dcc <MX_DAC2_Init+0x6c>)
 8000d7a:	f003 f904 	bl	8003f86 <HAL_DAC_Init>
 8000d7e:	4603      	mov	r3, r0
 8000d80:	2b00      	cmp	r3, #0
 8000d82:	d001      	beq.n	8000d88 <MX_DAC2_Init+0x28>
  {
    Error_Handler();
 8000d84:	f000 fdea 	bl	800195c <Error_Handler>
  }
  /** DAC channel OUT1 config 
  */
  sConfig.DAC_HighFrequency = DAC_HIGH_FREQUENCY_INTERFACE_MODE_ABOVE_80MHZ;
 8000d88:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8000d8c:	603b      	str	r3, [r7, #0]
  sConfig.DAC_DMADoubleDataMode = DISABLE;
 8000d8e:	2300      	movs	r3, #0
 8000d90:	713b      	strb	r3, [r7, #4]
  sConfig.DAC_SignedFormat = DISABLE;
 8000d92:	2300      	movs	r3, #0
 8000d94:	717b      	strb	r3, [r7, #5]
  sConfig.DAC_SampleAndHold = DAC_SAMPLEANDHOLD_DISABLE;
 8000d96:	2300      	movs	r3, #0
 8000d98:	60bb      	str	r3, [r7, #8]
  sConfig.DAC_Trigger = DAC_TRIGGER_T8_TRGO;
 8000d9a:	2306      	movs	r3, #6
 8000d9c:	60fb      	str	r3, [r7, #12]
  sConfig.DAC_Trigger2 = DAC_TRIGGER_NONE;
 8000d9e:	2300      	movs	r3, #0
 8000da0:	613b      	str	r3, [r7, #16]
  sConfig.DAC_OutputBuffer = DAC_OUTPUTBUFFER_ENABLE;
 8000da2:	2300      	movs	r3, #0
 8000da4:	617b      	str	r3, [r7, #20]
  sConfig.DAC_ConnectOnChipPeripheral = DAC_CHIPCONNECT_DISABLE;
 8000da6:	2301      	movs	r3, #1
 8000da8:	61bb      	str	r3, [r7, #24]
  sConfig.DAC_UserTrimming = DAC_TRIMMING_FACTORY;
 8000daa:	2300      	movs	r3, #0
 8000dac:	61fb      	str	r3, [r7, #28]
  if (HAL_DAC_ConfigChannel(&hdac2, &sConfig, DAC_CHANNEL_1) != HAL_OK)
 8000dae:	463b      	mov	r3, r7
 8000db0:	2200      	movs	r2, #0
 8000db2:	4619      	mov	r1, r3
 8000db4:	4805      	ldr	r0, [pc, #20]	; (8000dcc <MX_DAC2_Init+0x6c>)
 8000db6:	f003 faaf 	bl	8004318 <HAL_DAC_ConfigChannel>
 8000dba:	4603      	mov	r3, r0
 8000dbc:	2b00      	cmp	r3, #0
 8000dbe:	d001      	beq.n	8000dc4 <MX_DAC2_Init+0x64>
  {
    Error_Handler();
 8000dc0:	f000 fdcc 	bl	800195c <Error_Handler>
  }

}
 8000dc4:	bf00      	nop
 8000dc6:	3730      	adds	r7, #48	; 0x30
 8000dc8:	46bd      	mov	sp, r7
 8000dca:	bd80      	pop	{r7, pc}
 8000dcc:	20000cfc 	.word	0x20000cfc
 8000dd0:	50000c00 	.word	0x50000c00

08000dd4 <HAL_DAC_MspInit>:

void HAL_DAC_MspInit(DAC_HandleTypeDef* dacHandle)
{
 8000dd4:	b580      	push	{r7, lr}
 8000dd6:	b08c      	sub	sp, #48	; 0x30
 8000dd8:	af00      	add	r7, sp, #0
 8000dda:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ddc:	f107 031c 	add.w	r3, r7, #28
 8000de0:	2200      	movs	r2, #0
 8000de2:	601a      	str	r2, [r3, #0]
 8000de4:	605a      	str	r2, [r3, #4]
 8000de6:	609a      	str	r2, [r3, #8]
 8000de8:	60da      	str	r2, [r3, #12]
 8000dea:	611a      	str	r2, [r3, #16]
  if(dacHandle->Instance==DAC1)
 8000dec:	687b      	ldr	r3, [r7, #4]
 8000dee:	681b      	ldr	r3, [r3, #0]
 8000df0:	4a56      	ldr	r2, [pc, #344]	; (8000f4c <HAL_DAC_MspInit+0x178>)
 8000df2:	4293      	cmp	r3, r2
 8000df4:	d150      	bne.n	8000e98 <HAL_DAC_MspInit+0xc4>
  {
  /* USER CODE BEGIN DAC1_MspInit 0 */

  /* USER CODE END DAC1_MspInit 0 */
    /* DAC1 clock enable */
    __HAL_RCC_DAC1_CLK_ENABLE();
 8000df6:	4b56      	ldr	r3, [pc, #344]	; (8000f50 <HAL_DAC_MspInit+0x17c>)
 8000df8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000dfa:	4a55      	ldr	r2, [pc, #340]	; (8000f50 <HAL_DAC_MspInit+0x17c>)
 8000dfc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000e00:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000e02:	4b53      	ldr	r3, [pc, #332]	; (8000f50 <HAL_DAC_MspInit+0x17c>)
 8000e04:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000e06:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000e0a:	61bb      	str	r3, [r7, #24]
 8000e0c:	69bb      	ldr	r3, [r7, #24]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000e0e:	4b50      	ldr	r3, [pc, #320]	; (8000f50 <HAL_DAC_MspInit+0x17c>)
 8000e10:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000e12:	4a4f      	ldr	r2, [pc, #316]	; (8000f50 <HAL_DAC_MspInit+0x17c>)
 8000e14:	f043 0301 	orr.w	r3, r3, #1
 8000e18:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000e1a:	4b4d      	ldr	r3, [pc, #308]	; (8000f50 <HAL_DAC_MspInit+0x17c>)
 8000e1c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000e1e:	f003 0301 	and.w	r3, r3, #1
 8000e22:	617b      	str	r3, [r7, #20]
 8000e24:	697b      	ldr	r3, [r7, #20]
    /**DAC1 GPIO Configuration    
    PA4     ------> DAC1_OUT1
    PA5     ------> DAC1_OUT2 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 8000e26:	2330      	movs	r3, #48	; 0x30
 8000e28:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000e2a:	2303      	movs	r3, #3
 8000e2c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e2e:	2300      	movs	r3, #0
 8000e30:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000e32:	f107 031c 	add.w	r3, r7, #28
 8000e36:	4619      	mov	r1, r3
 8000e38:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000e3c:	f003 ff6e 	bl	8004d1c <HAL_GPIO_Init>

    /* DAC1 DMA Init */
    /* DAC1_CH1 Init */
    hdma_dac1_ch1.Instance = DMA1_Channel2;
 8000e40:	4b44      	ldr	r3, [pc, #272]	; (8000f54 <HAL_DAC_MspInit+0x180>)
 8000e42:	4a45      	ldr	r2, [pc, #276]	; (8000f58 <HAL_DAC_MspInit+0x184>)
 8000e44:	601a      	str	r2, [r3, #0]
    hdma_dac1_ch1.Init.Request = DMA_REQUEST_DAC1_CHANNEL1;
 8000e46:	4b43      	ldr	r3, [pc, #268]	; (8000f54 <HAL_DAC_MspInit+0x180>)
 8000e48:	2206      	movs	r2, #6
 8000e4a:	605a      	str	r2, [r3, #4]
    hdma_dac1_ch1.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8000e4c:	4b41      	ldr	r3, [pc, #260]	; (8000f54 <HAL_DAC_MspInit+0x180>)
 8000e4e:	2210      	movs	r2, #16
 8000e50:	609a      	str	r2, [r3, #8]
    hdma_dac1_ch1.Init.PeriphInc = DMA_PINC_DISABLE;
 8000e52:	4b40      	ldr	r3, [pc, #256]	; (8000f54 <HAL_DAC_MspInit+0x180>)
 8000e54:	2200      	movs	r2, #0
 8000e56:	60da      	str	r2, [r3, #12]
    hdma_dac1_ch1.Init.MemInc = DMA_MINC_ENABLE;
 8000e58:	4b3e      	ldr	r3, [pc, #248]	; (8000f54 <HAL_DAC_MspInit+0x180>)
 8000e5a:	2280      	movs	r2, #128	; 0x80
 8000e5c:	611a      	str	r2, [r3, #16]
    hdma_dac1_ch1.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8000e5e:	4b3d      	ldr	r3, [pc, #244]	; (8000f54 <HAL_DAC_MspInit+0x180>)
 8000e60:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000e64:	615a      	str	r2, [r3, #20]
    hdma_dac1_ch1.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8000e66:	4b3b      	ldr	r3, [pc, #236]	; (8000f54 <HAL_DAC_MspInit+0x180>)
 8000e68:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8000e6c:	619a      	str	r2, [r3, #24]
    hdma_dac1_ch1.Init.Mode = DMA_CIRCULAR;
 8000e6e:	4b39      	ldr	r3, [pc, #228]	; (8000f54 <HAL_DAC_MspInit+0x180>)
 8000e70:	2220      	movs	r2, #32
 8000e72:	61da      	str	r2, [r3, #28]
    hdma_dac1_ch1.Init.Priority = DMA_PRIORITY_LOW;
 8000e74:	4b37      	ldr	r3, [pc, #220]	; (8000f54 <HAL_DAC_MspInit+0x180>)
 8000e76:	2200      	movs	r2, #0
 8000e78:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_dac1_ch1) != HAL_OK)
 8000e7a:	4836      	ldr	r0, [pc, #216]	; (8000f54 <HAL_DAC_MspInit+0x180>)
 8000e7c:	f003 fc82 	bl	8004784 <HAL_DMA_Init>
 8000e80:	4603      	mov	r3, r0
 8000e82:	2b00      	cmp	r3, #0
 8000e84:	d001      	beq.n	8000e8a <HAL_DAC_MspInit+0xb6>
    {
      Error_Handler();
 8000e86:	f000 fd69 	bl	800195c <Error_Handler>
    }

    __HAL_LINKDMA(dacHandle,DMA_Handle1,hdma_dac1_ch1);
 8000e8a:	687b      	ldr	r3, [r7, #4]
 8000e8c:	4a31      	ldr	r2, [pc, #196]	; (8000f54 <HAL_DAC_MspInit+0x180>)
 8000e8e:	609a      	str	r2, [r3, #8]
 8000e90:	4a30      	ldr	r2, [pc, #192]	; (8000f54 <HAL_DAC_MspInit+0x180>)
 8000e92:	687b      	ldr	r3, [r7, #4]
 8000e94:	6293      	str	r3, [r2, #40]	; 0x28

  /* USER CODE BEGIN DAC2_MspInit 1 */

  /* USER CODE END DAC2_MspInit 1 */
  }
}
 8000e96:	e054      	b.n	8000f42 <HAL_DAC_MspInit+0x16e>
  else if(dacHandle->Instance==DAC2)
 8000e98:	687b      	ldr	r3, [r7, #4]
 8000e9a:	681b      	ldr	r3, [r3, #0]
 8000e9c:	4a2f      	ldr	r2, [pc, #188]	; (8000f5c <HAL_DAC_MspInit+0x188>)
 8000e9e:	4293      	cmp	r3, r2
 8000ea0:	d14f      	bne.n	8000f42 <HAL_DAC_MspInit+0x16e>
    __HAL_RCC_DAC2_CLK_ENABLE();
 8000ea2:	4b2b      	ldr	r3, [pc, #172]	; (8000f50 <HAL_DAC_MspInit+0x17c>)
 8000ea4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000ea6:	4a2a      	ldr	r2, [pc, #168]	; (8000f50 <HAL_DAC_MspInit+0x17c>)
 8000ea8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000eac:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000eae:	4b28      	ldr	r3, [pc, #160]	; (8000f50 <HAL_DAC_MspInit+0x17c>)
 8000eb0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000eb2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000eb6:	613b      	str	r3, [r7, #16]
 8000eb8:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000eba:	4b25      	ldr	r3, [pc, #148]	; (8000f50 <HAL_DAC_MspInit+0x17c>)
 8000ebc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000ebe:	4a24      	ldr	r2, [pc, #144]	; (8000f50 <HAL_DAC_MspInit+0x17c>)
 8000ec0:	f043 0301 	orr.w	r3, r3, #1
 8000ec4:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000ec6:	4b22      	ldr	r3, [pc, #136]	; (8000f50 <HAL_DAC_MspInit+0x17c>)
 8000ec8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000eca:	f003 0301 	and.w	r3, r3, #1
 8000ece:	60fb      	str	r3, [r7, #12]
 8000ed0:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8000ed2:	2340      	movs	r3, #64	; 0x40
 8000ed4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000ed6:	2303      	movs	r3, #3
 8000ed8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000eda:	2300      	movs	r3, #0
 8000edc:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000ede:	f107 031c 	add.w	r3, r7, #28
 8000ee2:	4619      	mov	r1, r3
 8000ee4:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000ee8:	f003 ff18 	bl	8004d1c <HAL_GPIO_Init>
    hdma_dac2_ch1.Instance = DMA1_Channel3;
 8000eec:	4b1c      	ldr	r3, [pc, #112]	; (8000f60 <HAL_DAC_MspInit+0x18c>)
 8000eee:	4a1d      	ldr	r2, [pc, #116]	; (8000f64 <HAL_DAC_MspInit+0x190>)
 8000ef0:	601a      	str	r2, [r3, #0]
    hdma_dac2_ch1.Init.Request = DMA_REQUEST_DAC2_CHANNEL1;
 8000ef2:	4b1b      	ldr	r3, [pc, #108]	; (8000f60 <HAL_DAC_MspInit+0x18c>)
 8000ef4:	2229      	movs	r2, #41	; 0x29
 8000ef6:	605a      	str	r2, [r3, #4]
    hdma_dac2_ch1.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8000ef8:	4b19      	ldr	r3, [pc, #100]	; (8000f60 <HAL_DAC_MspInit+0x18c>)
 8000efa:	2210      	movs	r2, #16
 8000efc:	609a      	str	r2, [r3, #8]
    hdma_dac2_ch1.Init.PeriphInc = DMA_PINC_DISABLE;
 8000efe:	4b18      	ldr	r3, [pc, #96]	; (8000f60 <HAL_DAC_MspInit+0x18c>)
 8000f00:	2200      	movs	r2, #0
 8000f02:	60da      	str	r2, [r3, #12]
    hdma_dac2_ch1.Init.MemInc = DMA_MINC_ENABLE;
 8000f04:	4b16      	ldr	r3, [pc, #88]	; (8000f60 <HAL_DAC_MspInit+0x18c>)
 8000f06:	2280      	movs	r2, #128	; 0x80
 8000f08:	611a      	str	r2, [r3, #16]
    hdma_dac2_ch1.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8000f0a:	4b15      	ldr	r3, [pc, #84]	; (8000f60 <HAL_DAC_MspInit+0x18c>)
 8000f0c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000f10:	615a      	str	r2, [r3, #20]
    hdma_dac2_ch1.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8000f12:	4b13      	ldr	r3, [pc, #76]	; (8000f60 <HAL_DAC_MspInit+0x18c>)
 8000f14:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8000f18:	619a      	str	r2, [r3, #24]
    hdma_dac2_ch1.Init.Mode = DMA_CIRCULAR;
 8000f1a:	4b11      	ldr	r3, [pc, #68]	; (8000f60 <HAL_DAC_MspInit+0x18c>)
 8000f1c:	2220      	movs	r2, #32
 8000f1e:	61da      	str	r2, [r3, #28]
    hdma_dac2_ch1.Init.Priority = DMA_PRIORITY_LOW;
 8000f20:	4b0f      	ldr	r3, [pc, #60]	; (8000f60 <HAL_DAC_MspInit+0x18c>)
 8000f22:	2200      	movs	r2, #0
 8000f24:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_dac2_ch1) != HAL_OK)
 8000f26:	480e      	ldr	r0, [pc, #56]	; (8000f60 <HAL_DAC_MspInit+0x18c>)
 8000f28:	f003 fc2c 	bl	8004784 <HAL_DMA_Init>
 8000f2c:	4603      	mov	r3, r0
 8000f2e:	2b00      	cmp	r3, #0
 8000f30:	d001      	beq.n	8000f36 <HAL_DAC_MspInit+0x162>
      Error_Handler();
 8000f32:	f000 fd13 	bl	800195c <Error_Handler>
    __HAL_LINKDMA(dacHandle,DMA_Handle1,hdma_dac2_ch1);
 8000f36:	687b      	ldr	r3, [r7, #4]
 8000f38:	4a09      	ldr	r2, [pc, #36]	; (8000f60 <HAL_DAC_MspInit+0x18c>)
 8000f3a:	609a      	str	r2, [r3, #8]
 8000f3c:	4a08      	ldr	r2, [pc, #32]	; (8000f60 <HAL_DAC_MspInit+0x18c>)
 8000f3e:	687b      	ldr	r3, [r7, #4]
 8000f40:	6293      	str	r3, [r2, #40]	; 0x28
}
 8000f42:	bf00      	nop
 8000f44:	3730      	adds	r7, #48	; 0x30
 8000f46:	46bd      	mov	sp, r7
 8000f48:	bd80      	pop	{r7, pc}
 8000f4a:	bf00      	nop
 8000f4c:	50000800 	.word	0x50000800
 8000f50:	40021000 	.word	0x40021000
 8000f54:	20000d24 	.word	0x20000d24
 8000f58:	4002001c 	.word	0x4002001c
 8000f5c:	50000c00 	.word	0x50000c00
 8000f60:	20000d84 	.word	0x20000d84
 8000f64:	40020030 	.word	0x40020030

08000f68 <MX_DMA_Init>:

/** 
  * Enable DMA controller clock
  */
void MX_DMA_Init(void) 
{
 8000f68:	b580      	push	{r7, lr}
 8000f6a:	b082      	sub	sp, #8
 8000f6c:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMAMUX1_CLK_ENABLE();
 8000f6e:	4b1a      	ldr	r3, [pc, #104]	; (8000fd8 <MX_DMA_Init+0x70>)
 8000f70:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8000f72:	4a19      	ldr	r2, [pc, #100]	; (8000fd8 <MX_DMA_Init+0x70>)
 8000f74:	f043 0304 	orr.w	r3, r3, #4
 8000f78:	6493      	str	r3, [r2, #72]	; 0x48
 8000f7a:	4b17      	ldr	r3, [pc, #92]	; (8000fd8 <MX_DMA_Init+0x70>)
 8000f7c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8000f7e:	f003 0304 	and.w	r3, r3, #4
 8000f82:	607b      	str	r3, [r7, #4]
 8000f84:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000f86:	4b14      	ldr	r3, [pc, #80]	; (8000fd8 <MX_DMA_Init+0x70>)
 8000f88:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8000f8a:	4a13      	ldr	r2, [pc, #76]	; (8000fd8 <MX_DMA_Init+0x70>)
 8000f8c:	f043 0301 	orr.w	r3, r3, #1
 8000f90:	6493      	str	r3, [r2, #72]	; 0x48
 8000f92:	4b11      	ldr	r3, [pc, #68]	; (8000fd8 <MX_DMA_Init+0x70>)
 8000f94:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8000f96:	f003 0301 	and.w	r3, r3, #1
 8000f9a:	603b      	str	r3, [r7, #0]
 8000f9c:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 1, 0);
 8000f9e:	2200      	movs	r2, #0
 8000fa0:	2101      	movs	r1, #1
 8000fa2:	200b      	movs	r0, #11
 8000fa4:	f002 ffbb 	bl	8003f1e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 8000fa8:	200b      	movs	r0, #11
 8000faa:	f002 ffd2 	bl	8003f52 <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel2_IRQn, 0, 0);
 8000fae:	2200      	movs	r2, #0
 8000fb0:	2100      	movs	r1, #0
 8000fb2:	200c      	movs	r0, #12
 8000fb4:	f002 ffb3 	bl	8003f1e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel2_IRQn);
 8000fb8:	200c      	movs	r0, #12
 8000fba:	f002 ffca 	bl	8003f52 <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel3_IRQn, 0, 0);
 8000fbe:	2200      	movs	r2, #0
 8000fc0:	2100      	movs	r1, #0
 8000fc2:	200d      	movs	r0, #13
 8000fc4:	f002 ffab 	bl	8003f1e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel3_IRQn);
 8000fc8:	200d      	movs	r0, #13
 8000fca:	f002 ffc2 	bl	8003f52 <HAL_NVIC_EnableIRQ>

}
 8000fce:	bf00      	nop
 8000fd0:	3708      	adds	r7, #8
 8000fd2:	46bd      	mov	sp, r7
 8000fd4:	bd80      	pop	{r7, pc}
 8000fd6:	bf00      	nop
 8000fd8:	40021000 	.word	0x40021000

08000fdc <update_dc_bias_sweep>:
uint16_t dcbias = 0;
int dcbias_dir = 1;
int dcinverted = 0;

void update_dc_bias_sweep()
{
 8000fdc:	b580      	push	{r7, lr}
 8000fde:	af00      	add	r7, sp, #0
	  // up=1, down=0
	  (dcbias_dir) ? (dcbias++) : (dcbias--);
 8000fe0:	4b20      	ldr	r3, [pc, #128]	; (8001064 <update_dc_bias_sweep+0x88>)
 8000fe2:	681b      	ldr	r3, [r3, #0]
 8000fe4:	2b00      	cmp	r3, #0
 8000fe6:	d006      	beq.n	8000ff6 <update_dc_bias_sweep+0x1a>
 8000fe8:	4b1f      	ldr	r3, [pc, #124]	; (8001068 <update_dc_bias_sweep+0x8c>)
 8000fea:	881b      	ldrh	r3, [r3, #0]
 8000fec:	3301      	adds	r3, #1
 8000fee:	b29a      	uxth	r2, r3
 8000ff0:	4b1d      	ldr	r3, [pc, #116]	; (8001068 <update_dc_bias_sweep+0x8c>)
 8000ff2:	801a      	strh	r2, [r3, #0]
 8000ff4:	e005      	b.n	8001002 <update_dc_bias_sweep+0x26>
 8000ff6:	4b1c      	ldr	r3, [pc, #112]	; (8001068 <update_dc_bias_sweep+0x8c>)
 8000ff8:	881b      	ldrh	r3, [r3, #0]
 8000ffa:	3b01      	subs	r3, #1
 8000ffc:	b29a      	uxth	r2, r3
 8000ffe:	4b1a      	ldr	r3, [pc, #104]	; (8001068 <update_dc_bias_sweep+0x8c>)
 8001000:	801a      	strh	r2, [r3, #0]

	  // invert the bias signal at zero crossing
	  if(dcbias < 1) {
 8001002:	4b19      	ldr	r3, [pc, #100]	; (8001068 <update_dc_bias_sweep+0x8c>)
 8001004:	881b      	ldrh	r3, [r3, #0]
 8001006:	2b00      	cmp	r3, #0
 8001008:	d10a      	bne.n	8001020 <update_dc_bias_sweep+0x44>
		(dcinverted) ? (dcinverted=0) : (dcinverted=1);
 800100a:	4b18      	ldr	r3, [pc, #96]	; (800106c <update_dc_bias_sweep+0x90>)
 800100c:	681b      	ldr	r3, [r3, #0]
 800100e:	2b00      	cmp	r3, #0
 8001010:	d003      	beq.n	800101a <update_dc_bias_sweep+0x3e>
 8001012:	4b16      	ldr	r3, [pc, #88]	; (800106c <update_dc_bias_sweep+0x90>)
 8001014:	2200      	movs	r2, #0
 8001016:	601a      	str	r2, [r3, #0]
 8001018:	e002      	b.n	8001020 <update_dc_bias_sweep+0x44>
 800101a:	4b14      	ldr	r3, [pc, #80]	; (800106c <update_dc_bias_sweep+0x90>)
 800101c:	2201      	movs	r2, #1
 800101e:	601a      	str	r2, [r3, #0]
	  }

	  // change direction if dac limits are reached
	  if(dcbias < 1) 	{ dcbias_dir = 1; }
 8001020:	4b11      	ldr	r3, [pc, #68]	; (8001068 <update_dc_bias_sweep+0x8c>)
 8001022:	881b      	ldrh	r3, [r3, #0]
 8001024:	2b00      	cmp	r3, #0
 8001026:	d102      	bne.n	800102e <update_dc_bias_sweep+0x52>
 8001028:	4b0e      	ldr	r3, [pc, #56]	; (8001064 <update_dc_bias_sweep+0x88>)
 800102a:	2201      	movs	r2, #1
 800102c:	601a      	str	r2, [r3, #0]
	  if(dcbias > 4095) { dcbias_dir = 0; }
 800102e:	4b0e      	ldr	r3, [pc, #56]	; (8001068 <update_dc_bias_sweep+0x8c>)
 8001030:	881b      	ldrh	r3, [r3, #0]
 8001032:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001036:	d302      	bcc.n	800103e <update_dc_bias_sweep+0x62>
 8001038:	4b0a      	ldr	r3, [pc, #40]	; (8001064 <update_dc_bias_sweep+0x88>)
 800103a:	2200      	movs	r2, #0
 800103c:	601a      	str	r2, [r3, #0]


	  HAL_GPIO_WritePin(DCBIAS_INVERT_GPIO_Port, DCBIAS_INVERT_Pin, dcinverted);
 800103e:	4b0b      	ldr	r3, [pc, #44]	; (800106c <update_dc_bias_sweep+0x90>)
 8001040:	681b      	ldr	r3, [r3, #0]
 8001042:	b2db      	uxtb	r3, r3
 8001044:	461a      	mov	r2, r3
 8001046:	2108      	movs	r1, #8
 8001048:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800104c:	f004 f800 	bl	8005050 <HAL_GPIO_WritePin>
	  HAL_DAC_SetValue(&hdac1, DAC1_CHANNEL_2, DAC_ALIGN_12B_R, dcbias);
 8001050:	4b05      	ldr	r3, [pc, #20]	; (8001068 <update_dc_bias_sweep+0x8c>)
 8001052:	881b      	ldrh	r3, [r3, #0]
 8001054:	2200      	movs	r2, #0
 8001056:	2110      	movs	r1, #16
 8001058:	4805      	ldr	r0, [pc, #20]	; (8001070 <update_dc_bias_sweep+0x94>)
 800105a:	f003 f921 	bl	80042a0 <HAL_DAC_SetValue>
}
 800105e:	bf00      	nop
 8001060:	bd80      	pop	{r7, pc}
 8001062:	bf00      	nop
 8001064:	20000008 	.word	0x20000008
 8001068:	20000be8 	.word	0x20000be8
 800106c:	20000bec 	.word	0x20000bec
 8001070:	20000d10 	.word	0x20000d10

08001074 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001074:	b480      	push	{r7}
 8001076:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001078:	4b04      	ldr	r3, [pc, #16]	; (800108c <__NVIC_GetPriorityGrouping+0x18>)
 800107a:	68db      	ldr	r3, [r3, #12]
 800107c:	0a1b      	lsrs	r3, r3, #8
 800107e:	f003 0307 	and.w	r3, r3, #7
}
 8001082:	4618      	mov	r0, r3
 8001084:	46bd      	mov	sp, r7
 8001086:	f85d 7b04 	ldr.w	r7, [sp], #4
 800108a:	4770      	bx	lr
 800108c:	e000ed00 	.word	0xe000ed00

08001090 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001090:	b480      	push	{r7}
 8001092:	b083      	sub	sp, #12
 8001094:	af00      	add	r7, sp, #0
 8001096:	4603      	mov	r3, r0
 8001098:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800109a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800109e:	2b00      	cmp	r3, #0
 80010a0:	db0b      	blt.n	80010ba <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80010a2:	79fb      	ldrb	r3, [r7, #7]
 80010a4:	f003 021f 	and.w	r2, r3, #31
 80010a8:	4907      	ldr	r1, [pc, #28]	; (80010c8 <__NVIC_EnableIRQ+0x38>)
 80010aa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80010ae:	095b      	lsrs	r3, r3, #5
 80010b0:	2001      	movs	r0, #1
 80010b2:	fa00 f202 	lsl.w	r2, r0, r2
 80010b6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80010ba:	bf00      	nop
 80010bc:	370c      	adds	r7, #12
 80010be:	46bd      	mov	sp, r7
 80010c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010c4:	4770      	bx	lr
 80010c6:	bf00      	nop
 80010c8:	e000e100 	.word	0xe000e100

080010cc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80010cc:	b480      	push	{r7}
 80010ce:	b083      	sub	sp, #12
 80010d0:	af00      	add	r7, sp, #0
 80010d2:	4603      	mov	r3, r0
 80010d4:	6039      	str	r1, [r7, #0]
 80010d6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80010d8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80010dc:	2b00      	cmp	r3, #0
 80010de:	db0a      	blt.n	80010f6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80010e0:	683b      	ldr	r3, [r7, #0]
 80010e2:	b2da      	uxtb	r2, r3
 80010e4:	490c      	ldr	r1, [pc, #48]	; (8001118 <__NVIC_SetPriority+0x4c>)
 80010e6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80010ea:	0112      	lsls	r2, r2, #4
 80010ec:	b2d2      	uxtb	r2, r2
 80010ee:	440b      	add	r3, r1
 80010f0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80010f4:	e00a      	b.n	800110c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80010f6:	683b      	ldr	r3, [r7, #0]
 80010f8:	b2da      	uxtb	r2, r3
 80010fa:	4908      	ldr	r1, [pc, #32]	; (800111c <__NVIC_SetPriority+0x50>)
 80010fc:	79fb      	ldrb	r3, [r7, #7]
 80010fe:	f003 030f 	and.w	r3, r3, #15
 8001102:	3b04      	subs	r3, #4
 8001104:	0112      	lsls	r2, r2, #4
 8001106:	b2d2      	uxtb	r2, r2
 8001108:	440b      	add	r3, r1
 800110a:	761a      	strb	r2, [r3, #24]
}
 800110c:	bf00      	nop
 800110e:	370c      	adds	r7, #12
 8001110:	46bd      	mov	sp, r7
 8001112:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001116:	4770      	bx	lr
 8001118:	e000e100 	.word	0xe000e100
 800111c:	e000ed00 	.word	0xe000ed00

08001120 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001120:	b480      	push	{r7}
 8001122:	b089      	sub	sp, #36	; 0x24
 8001124:	af00      	add	r7, sp, #0
 8001126:	60f8      	str	r0, [r7, #12]
 8001128:	60b9      	str	r1, [r7, #8]
 800112a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800112c:	68fb      	ldr	r3, [r7, #12]
 800112e:	f003 0307 	and.w	r3, r3, #7
 8001132:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001134:	69fb      	ldr	r3, [r7, #28]
 8001136:	f1c3 0307 	rsb	r3, r3, #7
 800113a:	2b04      	cmp	r3, #4
 800113c:	bf28      	it	cs
 800113e:	2304      	movcs	r3, #4
 8001140:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001142:	69fb      	ldr	r3, [r7, #28]
 8001144:	3304      	adds	r3, #4
 8001146:	2b06      	cmp	r3, #6
 8001148:	d902      	bls.n	8001150 <NVIC_EncodePriority+0x30>
 800114a:	69fb      	ldr	r3, [r7, #28]
 800114c:	3b03      	subs	r3, #3
 800114e:	e000      	b.n	8001152 <NVIC_EncodePriority+0x32>
 8001150:	2300      	movs	r3, #0
 8001152:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001154:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8001158:	69bb      	ldr	r3, [r7, #24]
 800115a:	fa02 f303 	lsl.w	r3, r2, r3
 800115e:	43da      	mvns	r2, r3
 8001160:	68bb      	ldr	r3, [r7, #8]
 8001162:	401a      	ands	r2, r3
 8001164:	697b      	ldr	r3, [r7, #20]
 8001166:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001168:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 800116c:	697b      	ldr	r3, [r7, #20]
 800116e:	fa01 f303 	lsl.w	r3, r1, r3
 8001172:	43d9      	mvns	r1, r3
 8001174:	687b      	ldr	r3, [r7, #4]
 8001176:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001178:	4313      	orrs	r3, r2
         );
}
 800117a:	4618      	mov	r0, r3
 800117c:	3724      	adds	r7, #36	; 0x24
 800117e:	46bd      	mov	sp, r7
 8001180:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001184:	4770      	bx	lr
	...

08001188 <LL_SYSCFG_SetEXTISource>:
  *         @arg @ref LL_SYSCFG_EXTI_LINE14
  *         @arg @ref LL_SYSCFG_EXTI_LINE15
  * @retval None
  */
__STATIC_INLINE void LL_SYSCFG_SetEXTISource(uint32_t Port, uint32_t Line)
{
 8001188:	b480      	push	{r7}
 800118a:	b085      	sub	sp, #20
 800118c:	af00      	add	r7, sp, #0
 800118e:	6078      	str	r0, [r7, #4]
 8001190:	6039      	str	r1, [r7, #0]
  MODIFY_REG(SYSCFG->EXTICR[Line & 0x3U], (Line >> 16U), Port << (POSITION_VAL((Line >> 16U)) & 0x1FU) );
 8001192:	4a14      	ldr	r2, [pc, #80]	; (80011e4 <LL_SYSCFG_SetEXTISource+0x5c>)
 8001194:	683b      	ldr	r3, [r7, #0]
 8001196:	f003 0303 	and.w	r3, r3, #3
 800119a:	3302      	adds	r3, #2
 800119c:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 80011a0:	683b      	ldr	r3, [r7, #0]
 80011a2:	0c1b      	lsrs	r3, r3, #16
 80011a4:	43db      	mvns	r3, r3
 80011a6:	ea02 0103 	and.w	r1, r2, r3
 80011aa:	683b      	ldr	r3, [r7, #0]
 80011ac:	0c1b      	lsrs	r3, r3, #16
 80011ae:	60fb      	str	r3, [r7, #12]
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80011b0:	68fb      	ldr	r3, [r7, #12]
 80011b2:	fa93 f3a3 	rbit	r3, r3
 80011b6:	60bb      	str	r3, [r7, #8]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 80011b8:	68bb      	ldr	r3, [r7, #8]
 80011ba:	fab3 f383 	clz	r3, r3
 80011be:	b2db      	uxtb	r3, r3
 80011c0:	f003 031f 	and.w	r3, r3, #31
 80011c4:	687a      	ldr	r2, [r7, #4]
 80011c6:	409a      	lsls	r2, r3
 80011c8:	4806      	ldr	r0, [pc, #24]	; (80011e4 <LL_SYSCFG_SetEXTISource+0x5c>)
 80011ca:	683b      	ldr	r3, [r7, #0]
 80011cc:	f003 0303 	and.w	r3, r3, #3
 80011d0:	430a      	orrs	r2, r1
 80011d2:	3302      	adds	r3, #2
 80011d4:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
}
 80011d8:	bf00      	nop
 80011da:	3714      	adds	r7, #20
 80011dc:	46bd      	mov	sp, r7
 80011de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011e2:	4770      	bx	lr
 80011e4:	40010000 	.word	0x40010000

080011e8 <LL_GPIO_SetPinMode>:
  *         @arg @ref LL_GPIO_MODE_ALTERNATE
  *         @arg @ref LL_GPIO_MODE_ANALOG
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetPinMode(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t Mode)
{
 80011e8:	b480      	push	{r7}
 80011ea:	b089      	sub	sp, #36	; 0x24
 80011ec:	af00      	add	r7, sp, #0
 80011ee:	60f8      	str	r0, [r7, #12]
 80011f0:	60b9      	str	r1, [r7, #8]
 80011f2:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->MODER, (GPIO_MODER_MODE0 << (POSITION_VAL(Pin) * 2U)), (Mode << (POSITION_VAL(Pin) * 2U)));
 80011f4:	68fb      	ldr	r3, [r7, #12]
 80011f6:	681a      	ldr	r2, [r3, #0]
 80011f8:	68bb      	ldr	r3, [r7, #8]
 80011fa:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80011fc:	697b      	ldr	r3, [r7, #20]
 80011fe:	fa93 f3a3 	rbit	r3, r3
 8001202:	613b      	str	r3, [r7, #16]
  return result;
 8001204:	693b      	ldr	r3, [r7, #16]
 8001206:	fab3 f383 	clz	r3, r3
 800120a:	b2db      	uxtb	r3, r3
 800120c:	005b      	lsls	r3, r3, #1
 800120e:	2103      	movs	r1, #3
 8001210:	fa01 f303 	lsl.w	r3, r1, r3
 8001214:	43db      	mvns	r3, r3
 8001216:	401a      	ands	r2, r3
 8001218:	68bb      	ldr	r3, [r7, #8]
 800121a:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800121c:	69fb      	ldr	r3, [r7, #28]
 800121e:	fa93 f3a3 	rbit	r3, r3
 8001222:	61bb      	str	r3, [r7, #24]
  return result;
 8001224:	69bb      	ldr	r3, [r7, #24]
 8001226:	fab3 f383 	clz	r3, r3
 800122a:	b2db      	uxtb	r3, r3
 800122c:	005b      	lsls	r3, r3, #1
 800122e:	6879      	ldr	r1, [r7, #4]
 8001230:	fa01 f303 	lsl.w	r3, r1, r3
 8001234:	431a      	orrs	r2, r3
 8001236:	68fb      	ldr	r3, [r7, #12]
 8001238:	601a      	str	r2, [r3, #0]
}
 800123a:	bf00      	nop
 800123c:	3724      	adds	r7, #36	; 0x24
 800123e:	46bd      	mov	sp, r7
 8001240:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001244:	4770      	bx	lr

08001246 <LL_GPIO_SetPinPull>:
  *         @arg @ref LL_GPIO_PULL_UP
  *         @arg @ref LL_GPIO_PULL_DOWN
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetPinPull(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t Pull)
{
 8001246:	b480      	push	{r7}
 8001248:	b089      	sub	sp, #36	; 0x24
 800124a:	af00      	add	r7, sp, #0
 800124c:	60f8      	str	r0, [r7, #12]
 800124e:	60b9      	str	r1, [r7, #8]
 8001250:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->PUPDR, (GPIO_PUPDR_PUPD0 << (POSITION_VAL(Pin) * 2U)), (Pull << (POSITION_VAL(Pin) * 2U)));
 8001252:	68fb      	ldr	r3, [r7, #12]
 8001254:	68da      	ldr	r2, [r3, #12]
 8001256:	68bb      	ldr	r3, [r7, #8]
 8001258:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800125a:	697b      	ldr	r3, [r7, #20]
 800125c:	fa93 f3a3 	rbit	r3, r3
 8001260:	613b      	str	r3, [r7, #16]
  return result;
 8001262:	693b      	ldr	r3, [r7, #16]
 8001264:	fab3 f383 	clz	r3, r3
 8001268:	b2db      	uxtb	r3, r3
 800126a:	005b      	lsls	r3, r3, #1
 800126c:	2103      	movs	r1, #3
 800126e:	fa01 f303 	lsl.w	r3, r1, r3
 8001272:	43db      	mvns	r3, r3
 8001274:	401a      	ands	r2, r3
 8001276:	68bb      	ldr	r3, [r7, #8]
 8001278:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800127a:	69fb      	ldr	r3, [r7, #28]
 800127c:	fa93 f3a3 	rbit	r3, r3
 8001280:	61bb      	str	r3, [r7, #24]
  return result;
 8001282:	69bb      	ldr	r3, [r7, #24]
 8001284:	fab3 f383 	clz	r3, r3
 8001288:	b2db      	uxtb	r3, r3
 800128a:	005b      	lsls	r3, r3, #1
 800128c:	6879      	ldr	r1, [r7, #4]
 800128e:	fa01 f303 	lsl.w	r3, r1, r3
 8001292:	431a      	orrs	r2, r3
 8001294:	68fb      	ldr	r3, [r7, #12]
 8001296:	60da      	str	r2, [r3, #12]
}
 8001298:	bf00      	nop
 800129a:	3724      	adds	r7, #36	; 0x24
 800129c:	46bd      	mov	sp, r7
 800129e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012a2:	4770      	bx	lr

080012a4 <LL_GPIO_ResetOutputPin>:
  *         @arg @ref LL_GPIO_PIN_15
  *         @arg @ref LL_GPIO_PIN_ALL
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_ResetOutputPin(GPIO_TypeDef *GPIOx, uint32_t PinMask)
{
 80012a4:	b480      	push	{r7}
 80012a6:	b083      	sub	sp, #12
 80012a8:	af00      	add	r7, sp, #0
 80012aa:	6078      	str	r0, [r7, #4]
 80012ac:	6039      	str	r1, [r7, #0]
  WRITE_REG(GPIOx->BRR, PinMask);
 80012ae:	687b      	ldr	r3, [r7, #4]
 80012b0:	683a      	ldr	r2, [r7, #0]
 80012b2:	629a      	str	r2, [r3, #40]	; 0x28
}
 80012b4:	bf00      	nop
 80012b6:	370c      	adds	r7, #12
 80012b8:	46bd      	mov	sp, r7
 80012ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012be:	4770      	bx	lr

080012c0 <LL_AHB2_GRP1_EnableClock>:
  *
  *         (*) value not defined in all devices.
  * @retval None
  */
__STATIC_INLINE void LL_AHB2_GRP1_EnableClock(uint32_t Periphs)
{
 80012c0:	b480      	push	{r7}
 80012c2:	b085      	sub	sp, #20
 80012c4:	af00      	add	r7, sp, #0
 80012c6:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->AHB2ENR, Periphs);
 80012c8:	4b08      	ldr	r3, [pc, #32]	; (80012ec <LL_AHB2_GRP1_EnableClock+0x2c>)
 80012ca:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80012cc:	4907      	ldr	r1, [pc, #28]	; (80012ec <LL_AHB2_GRP1_EnableClock+0x2c>)
 80012ce:	687b      	ldr	r3, [r7, #4]
 80012d0:	4313      	orrs	r3, r2
 80012d2:	64cb      	str	r3, [r1, #76]	; 0x4c
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 80012d4:	4b05      	ldr	r3, [pc, #20]	; (80012ec <LL_AHB2_GRP1_EnableClock+0x2c>)
 80012d6:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80012d8:	687b      	ldr	r3, [r7, #4]
 80012da:	4013      	ands	r3, r2
 80012dc:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80012de:	68fb      	ldr	r3, [r7, #12]
}
 80012e0:	bf00      	nop
 80012e2:	3714      	adds	r7, #20
 80012e4:	46bd      	mov	sp, r7
 80012e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012ea:	4770      	bx	lr
 80012ec:	40021000 	.word	0x40021000

080012f0 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 80012f0:	b580      	push	{r7, lr}
 80012f2:	b08a      	sub	sp, #40	; 0x28
 80012f4:	af00      	add	r7, sp, #0

  LL_EXTI_InitTypeDef EXTI_InitStruct = {0};
 80012f6:	f107 031c 	add.w	r3, r7, #28
 80012fa:	2200      	movs	r2, #0
 80012fc:	601a      	str	r2, [r3, #0]
 80012fe:	605a      	str	r2, [r3, #4]
 8001300:	609a      	str	r2, [r3, #8]
  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001302:	1d3b      	adds	r3, r7, #4
 8001304:	2200      	movs	r2, #0
 8001306:	601a      	str	r2, [r3, #0]
 8001308:	605a      	str	r2, [r3, #4]
 800130a:	609a      	str	r2, [r3, #8]
 800130c:	60da      	str	r2, [r3, #12]
 800130e:	611a      	str	r2, [r3, #16]
 8001310:	615a      	str	r2, [r3, #20]

  /* GPIO Ports Clock Enable */
  LL_AHB2_GRP1_EnableClock(LL_AHB2_GRP1_PERIPH_GPIOC);
 8001312:	2004      	movs	r0, #4
 8001314:	f7ff ffd4 	bl	80012c0 <LL_AHB2_GRP1_EnableClock>
  LL_AHB2_GRP1_EnableClock(LL_AHB2_GRP1_PERIPH_GPIOF);
 8001318:	2020      	movs	r0, #32
 800131a:	f7ff ffd1 	bl	80012c0 <LL_AHB2_GRP1_EnableClock>
  LL_AHB2_GRP1_EnableClock(LL_AHB2_GRP1_PERIPH_GPIOA);
 800131e:	2001      	movs	r0, #1
 8001320:	f7ff ffce 	bl	80012c0 <LL_AHB2_GRP1_EnableClock>
  LL_AHB2_GRP1_EnableClock(LL_AHB2_GRP1_PERIPH_GPIOB);
 8001324:	2002      	movs	r0, #2
 8001326:	f7ff ffcb 	bl	80012c0 <LL_AHB2_GRP1_EnableClock>

  /**/
  LL_GPIO_ResetOutputPin(TRIGMODE_GPIO_Port, TRIGMODE_Pin);
 800132a:	2108      	movs	r1, #8
 800132c:	48d3      	ldr	r0, [pc, #844]	; (800167c <MX_GPIO_Init+0x38c>)
 800132e:	f7ff ffb9 	bl	80012a4 <LL_GPIO_ResetOutputPin>

  /**/
  LL_GPIO_ResetOutputPin(DCBIAS_INVERT_GPIO_Port, DCBIAS_INVERT_Pin);
 8001332:	2108      	movs	r1, #8
 8001334:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001338:	f7ff ffb4 	bl	80012a4 <LL_GPIO_ResetOutputPin>

  /**/
  LL_GPIO_ResetOutputPin(SG2_GPIO_Port, SG2_Pin);
 800133c:	2110      	movs	r1, #16
 800133e:	48cf      	ldr	r0, [pc, #828]	; (800167c <MX_GPIO_Init+0x38c>)
 8001340:	f7ff ffb0 	bl	80012a4 <LL_GPIO_ResetOutputPin>

  /**/
  LL_GPIO_ResetOutputPin(SG1_GPIO_Port, SG1_Pin);
 8001344:	2120      	movs	r1, #32
 8001346:	48cd      	ldr	r0, [pc, #820]	; (800167c <MX_GPIO_Init+0x38c>)
 8001348:	f7ff ffac 	bl	80012a4 <LL_GPIO_ResetOutputPin>

  /**/
  LL_GPIO_ResetOutputPin(SG0_GPIO_Port, SG0_Pin);
 800134c:	2101      	movs	r1, #1
 800134e:	48cc      	ldr	r0, [pc, #816]	; (8001680 <MX_GPIO_Init+0x390>)
 8001350:	f7ff ffa8 	bl	80012a4 <LL_GPIO_ResetOutputPin>

  /**/
  LL_GPIO_ResetOutputPin(TRIGMUX1_GPIO_Port, TRIGMUX1_Pin);
 8001354:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001358:	48c8      	ldr	r0, [pc, #800]	; (800167c <MX_GPIO_Init+0x38c>)
 800135a:	f7ff ffa3 	bl	80012a4 <LL_GPIO_ResetOutputPin>

  /**/
  LL_GPIO_ResetOutputPin(TRIGMUX2_GPIO_Port, TRIGMUX2_Pin);
 800135e:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001362:	48c6      	ldr	r0, [pc, #792]	; (800167c <MX_GPIO_Init+0x38c>)
 8001364:	f7ff ff9e 	bl	80012a4 <LL_GPIO_ResetOutputPin>

  /**/
  LL_GPIO_ResetOutputPin(DC_GPIO_Port, DC_Pin);
 8001368:	2140      	movs	r1, #64	; 0x40
 800136a:	48c5      	ldr	r0, [pc, #788]	; (8001680 <MX_GPIO_Init+0x390>)
 800136c:	f7ff ff9a 	bl	80012a4 <LL_GPIO_ResetOutputPin>

  /**/
  LL_GPIO_ResetOutputPin(CS_GPIO_Port, CS_Pin);
 8001370:	2180      	movs	r1, #128	; 0x80
 8001372:	48c3      	ldr	r0, [pc, #780]	; (8001680 <MX_GPIO_Init+0x390>)
 8001374:	f7ff ff96 	bl	80012a4 <LL_GPIO_ResetOutputPin>

  /**/
  LL_GPIO_ResetOutputPin(RST_GPIO_Port, RST_Pin);
 8001378:	f44f 7100 	mov.w	r1, #512	; 0x200
 800137c:	48c0      	ldr	r0, [pc, #768]	; (8001680 <MX_GPIO_Init+0x390>)
 800137e:	f7ff ff91 	bl	80012a4 <LL_GPIO_ResetOutputPin>

  /**/
  LL_SYSCFG_SetEXTISource(LL_SYSCFG_EXTI_PORTC, LL_SYSCFG_EXTI_LINE14);
 8001382:	49c0      	ldr	r1, [pc, #768]	; (8001684 <MX_GPIO_Init+0x394>)
 8001384:	2002      	movs	r0, #2
 8001386:	f7ff feff 	bl	8001188 <LL_SYSCFG_SetEXTISource>

  /**/
  LL_SYSCFG_SetEXTISource(LL_SYSCFG_EXTI_PORTC, LL_SYSCFG_EXTI_LINE15);
 800138a:	49bf      	ldr	r1, [pc, #764]	; (8001688 <MX_GPIO_Init+0x398>)
 800138c:	2002      	movs	r0, #2
 800138e:	f7ff fefb 	bl	8001188 <LL_SYSCFG_SetEXTISource>

  /**/
  LL_SYSCFG_SetEXTISource(LL_SYSCFG_EXTI_PORTF, LL_SYSCFG_EXTI_LINE0);
 8001392:	f44f 2170 	mov.w	r1, #983040	; 0xf0000
 8001396:	2005      	movs	r0, #5
 8001398:	f7ff fef6 	bl	8001188 <LL_SYSCFG_SetEXTISource>

  /**/
  LL_SYSCFG_SetEXTISource(LL_SYSCFG_EXTI_PORTF, LL_SYSCFG_EXTI_LINE1);
 800139c:	f44f 0170 	mov.w	r1, #15728640	; 0xf00000
 80013a0:	2005      	movs	r0, #5
 80013a2:	f7ff fef1 	bl	8001188 <LL_SYSCFG_SetEXTISource>

  /**/
  LL_SYSCFG_SetEXTISource(LL_SYSCFG_EXTI_PORTC, LL_SYSCFG_EXTI_LINE2);
 80013a6:	f04f 6170 	mov.w	r1, #251658240	; 0xf000000
 80013aa:	2002      	movs	r0, #2
 80013ac:	f7ff feec 	bl	8001188 <LL_SYSCFG_SetEXTISource>

  /**/
  EXTI_InitStruct.Line_0_31 = LL_EXTI_LINE_14;
 80013b0:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80013b4:	61fb      	str	r3, [r7, #28]
  EXTI_InitStruct.LineCommand = ENABLE;
 80013b6:	2301      	movs	r3, #1
 80013b8:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
  EXTI_InitStruct.Mode = LL_EXTI_MODE_IT;
 80013bc:	2300      	movs	r3, #0
 80013be:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
  EXTI_InitStruct.Trigger = LL_EXTI_TRIGGER_FALLING;
 80013c2:	2302      	movs	r3, #2
 80013c4:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
  LL_EXTI_Init(&EXTI_InitStruct);
 80013c8:	f107 031c 	add.w	r3, r7, #28
 80013cc:	4618      	mov	r0, r3
 80013ce:	f006 fa95 	bl	80078fc <LL_EXTI_Init>

  /**/
  EXTI_InitStruct.Line_0_31 = LL_EXTI_LINE_15;
 80013d2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80013d6:	61fb      	str	r3, [r7, #28]
  EXTI_InitStruct.LineCommand = ENABLE;
 80013d8:	2301      	movs	r3, #1
 80013da:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
  EXTI_InitStruct.Mode = LL_EXTI_MODE_IT;
 80013de:	2300      	movs	r3, #0
 80013e0:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
  EXTI_InitStruct.Trigger = LL_EXTI_TRIGGER_FALLING;
 80013e4:	2302      	movs	r3, #2
 80013e6:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
  LL_EXTI_Init(&EXTI_InitStruct);
 80013ea:	f107 031c 	add.w	r3, r7, #28
 80013ee:	4618      	mov	r0, r3
 80013f0:	f006 fa84 	bl	80078fc <LL_EXTI_Init>

  /**/
  EXTI_InitStruct.Line_0_31 = LL_EXTI_LINE_0;
 80013f4:	2301      	movs	r3, #1
 80013f6:	61fb      	str	r3, [r7, #28]
  EXTI_InitStruct.LineCommand = ENABLE;
 80013f8:	2301      	movs	r3, #1
 80013fa:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
  EXTI_InitStruct.Mode = LL_EXTI_MODE_IT;
 80013fe:	2300      	movs	r3, #0
 8001400:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
  EXTI_InitStruct.Trigger = LL_EXTI_TRIGGER_FALLING;
 8001404:	2302      	movs	r3, #2
 8001406:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
  LL_EXTI_Init(&EXTI_InitStruct);
 800140a:	f107 031c 	add.w	r3, r7, #28
 800140e:	4618      	mov	r0, r3
 8001410:	f006 fa74 	bl	80078fc <LL_EXTI_Init>

  /**/
  EXTI_InitStruct.Line_0_31 = LL_EXTI_LINE_1;
 8001414:	2302      	movs	r3, #2
 8001416:	61fb      	str	r3, [r7, #28]
  EXTI_InitStruct.LineCommand = ENABLE;
 8001418:	2301      	movs	r3, #1
 800141a:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
  EXTI_InitStruct.Mode = LL_EXTI_MODE_IT;
 800141e:	2300      	movs	r3, #0
 8001420:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
  EXTI_InitStruct.Trigger = LL_EXTI_TRIGGER_FALLING;
 8001424:	2302      	movs	r3, #2
 8001426:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
  LL_EXTI_Init(&EXTI_InitStruct);
 800142a:	f107 031c 	add.w	r3, r7, #28
 800142e:	4618      	mov	r0, r3
 8001430:	f006 fa64 	bl	80078fc <LL_EXTI_Init>

  /**/
  EXTI_InitStruct.Line_0_31 = LL_EXTI_LINE_2;
 8001434:	2304      	movs	r3, #4
 8001436:	61fb      	str	r3, [r7, #28]
  EXTI_InitStruct.LineCommand = ENABLE;
 8001438:	2301      	movs	r3, #1
 800143a:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
  EXTI_InitStruct.Mode = LL_EXTI_MODE_IT;
 800143e:	2300      	movs	r3, #0
 8001440:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
  EXTI_InitStruct.Trigger = LL_EXTI_TRIGGER_FALLING;
 8001444:	2302      	movs	r3, #2
 8001446:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
  LL_EXTI_Init(&EXTI_InitStruct);
 800144a:	f107 031c 	add.w	r3, r7, #28
 800144e:	4618      	mov	r0, r3
 8001450:	f006 fa54 	bl	80078fc <LL_EXTI_Init>

  /**/
  LL_GPIO_SetPinPull(BTN1_EXTI14_GPIO_Port, BTN1_EXTI14_Pin, LL_GPIO_PULL_UP);
 8001454:	2201      	movs	r2, #1
 8001456:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800145a:	4888      	ldr	r0, [pc, #544]	; (800167c <MX_GPIO_Init+0x38c>)
 800145c:	f7ff fef3 	bl	8001246 <LL_GPIO_SetPinPull>

  /**/
  LL_GPIO_SetPinPull(BTN2_EXTI15_GPIO_Port, BTN2_EXTI15_Pin, LL_GPIO_PULL_UP);
 8001460:	2201      	movs	r2, #1
 8001462:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001466:	4885      	ldr	r0, [pc, #532]	; (800167c <MX_GPIO_Init+0x38c>)
 8001468:	f7ff feed 	bl	8001246 <LL_GPIO_SetPinPull>

  /**/
  LL_GPIO_SetPinPull(BTN3_EXTI0_GPIO_Port, BTN3_EXTI0_Pin, LL_GPIO_PULL_UP);
 800146c:	2201      	movs	r2, #1
 800146e:	2101      	movs	r1, #1
 8001470:	4886      	ldr	r0, [pc, #536]	; (800168c <MX_GPIO_Init+0x39c>)
 8001472:	f7ff fee8 	bl	8001246 <LL_GPIO_SetPinPull>

  /**/
  LL_GPIO_SetPinPull(BTN4_EXTI1_GPIO_Port, BTN4_EXTI1_Pin, LL_GPIO_PULL_UP);
 8001476:	2201      	movs	r2, #1
 8001478:	2102      	movs	r1, #2
 800147a:	4884      	ldr	r0, [pc, #528]	; (800168c <MX_GPIO_Init+0x39c>)
 800147c:	f7ff fee3 	bl	8001246 <LL_GPIO_SetPinPull>

  /**/
  LL_GPIO_SetPinPull(ENC_EXTI2_GPIO_Port, ENC_EXTI2_Pin, LL_GPIO_PULL_UP);
 8001480:	2201      	movs	r2, #1
 8001482:	2104      	movs	r1, #4
 8001484:	487d      	ldr	r0, [pc, #500]	; (800167c <MX_GPIO_Init+0x38c>)
 8001486:	f7ff fede 	bl	8001246 <LL_GPIO_SetPinPull>

  /**/
  LL_GPIO_SetPinMode(BTN1_EXTI14_GPIO_Port, BTN1_EXTI14_Pin, LL_GPIO_MODE_INPUT);
 800148a:	2200      	movs	r2, #0
 800148c:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001490:	487a      	ldr	r0, [pc, #488]	; (800167c <MX_GPIO_Init+0x38c>)
 8001492:	f7ff fea9 	bl	80011e8 <LL_GPIO_SetPinMode>

  /**/
  LL_GPIO_SetPinMode(BTN2_EXTI15_GPIO_Port, BTN2_EXTI15_Pin, LL_GPIO_MODE_INPUT);
 8001496:	2200      	movs	r2, #0
 8001498:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800149c:	4877      	ldr	r0, [pc, #476]	; (800167c <MX_GPIO_Init+0x38c>)
 800149e:	f7ff fea3 	bl	80011e8 <LL_GPIO_SetPinMode>

  /**/
  LL_GPIO_SetPinMode(BTN3_EXTI0_GPIO_Port, BTN3_EXTI0_Pin, LL_GPIO_MODE_INPUT);
 80014a2:	2200      	movs	r2, #0
 80014a4:	2101      	movs	r1, #1
 80014a6:	4879      	ldr	r0, [pc, #484]	; (800168c <MX_GPIO_Init+0x39c>)
 80014a8:	f7ff fe9e 	bl	80011e8 <LL_GPIO_SetPinMode>

  /**/
  LL_GPIO_SetPinMode(BTN4_EXTI1_GPIO_Port, BTN4_EXTI1_Pin, LL_GPIO_MODE_INPUT);
 80014ac:	2200      	movs	r2, #0
 80014ae:	2102      	movs	r1, #2
 80014b0:	4876      	ldr	r0, [pc, #472]	; (800168c <MX_GPIO_Init+0x39c>)
 80014b2:	f7ff fe99 	bl	80011e8 <LL_GPIO_SetPinMode>

  /**/
  LL_GPIO_SetPinMode(ENC_EXTI2_GPIO_Port, ENC_EXTI2_Pin, LL_GPIO_MODE_INPUT);
 80014b6:	2200      	movs	r2, #0
 80014b8:	2104      	movs	r1, #4
 80014ba:	4870      	ldr	r0, [pc, #448]	; (800167c <MX_GPIO_Init+0x38c>)
 80014bc:	f7ff fe94 	bl	80011e8 <LL_GPIO_SetPinMode>

  /**/
  GPIO_InitStruct.Pin = TRIGMODE_Pin;
 80014c0:	2308      	movs	r3, #8
 80014c2:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 80014c4:	2301      	movs	r3, #1
 80014c6:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 80014c8:	2300      	movs	r3, #0
 80014ca:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 80014cc:	2300      	movs	r3, #0
 80014ce:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_DOWN;
 80014d0:	2302      	movs	r3, #2
 80014d2:	617b      	str	r3, [r7, #20]
  LL_GPIO_Init(TRIGMODE_GPIO_Port, &GPIO_InitStruct);
 80014d4:	1d3b      	adds	r3, r7, #4
 80014d6:	4619      	mov	r1, r3
 80014d8:	4868      	ldr	r0, [pc, #416]	; (800167c <MX_GPIO_Init+0x38c>)
 80014da:	f006 fc02 	bl	8007ce2 <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = DCBIAS_INVERT_Pin;
 80014de:	2308      	movs	r3, #8
 80014e0:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 80014e2:	2301      	movs	r3, #1
 80014e4:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 80014e6:	2300      	movs	r3, #0
 80014e8:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 80014ea:	2300      	movs	r3, #0
 80014ec:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 80014ee:	2300      	movs	r3, #0
 80014f0:	617b      	str	r3, [r7, #20]
  LL_GPIO_Init(DCBIAS_INVERT_GPIO_Port, &GPIO_InitStruct);
 80014f2:	1d3b      	adds	r3, r7, #4
 80014f4:	4619      	mov	r1, r3
 80014f6:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80014fa:	f006 fbf2 	bl	8007ce2 <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = SG2_Pin;
 80014fe:	2310      	movs	r3, #16
 8001500:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 8001502:	2301      	movs	r3, #1
 8001504:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 8001506:	2300      	movs	r3, #0
 8001508:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 800150a:	2300      	movs	r3, #0
 800150c:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 800150e:	2300      	movs	r3, #0
 8001510:	617b      	str	r3, [r7, #20]
  LL_GPIO_Init(SG2_GPIO_Port, &GPIO_InitStruct);
 8001512:	1d3b      	adds	r3, r7, #4
 8001514:	4619      	mov	r1, r3
 8001516:	4859      	ldr	r0, [pc, #356]	; (800167c <MX_GPIO_Init+0x38c>)
 8001518:	f006 fbe3 	bl	8007ce2 <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = SG1_Pin;
 800151c:	2320      	movs	r3, #32
 800151e:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 8001520:	2301      	movs	r3, #1
 8001522:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 8001524:	2300      	movs	r3, #0
 8001526:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8001528:	2300      	movs	r3, #0
 800152a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 800152c:	2300      	movs	r3, #0
 800152e:	617b      	str	r3, [r7, #20]
  LL_GPIO_Init(SG1_GPIO_Port, &GPIO_InitStruct);
 8001530:	1d3b      	adds	r3, r7, #4
 8001532:	4619      	mov	r1, r3
 8001534:	4851      	ldr	r0, [pc, #324]	; (800167c <MX_GPIO_Init+0x38c>)
 8001536:	f006 fbd4 	bl	8007ce2 <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = SG0_Pin;
 800153a:	2301      	movs	r3, #1
 800153c:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 800153e:	2301      	movs	r3, #1
 8001540:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 8001542:	2300      	movs	r3, #0
 8001544:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8001546:	2300      	movs	r3, #0
 8001548:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 800154a:	2300      	movs	r3, #0
 800154c:	617b      	str	r3, [r7, #20]
  LL_GPIO_Init(SG0_GPIO_Port, &GPIO_InitStruct);
 800154e:	1d3b      	adds	r3, r7, #4
 8001550:	4619      	mov	r1, r3
 8001552:	484b      	ldr	r0, [pc, #300]	; (8001680 <MX_GPIO_Init+0x390>)
 8001554:	f006 fbc5 	bl	8007ce2 <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = TRIGMUX1_Pin;
 8001558:	f44f 7380 	mov.w	r3, #256	; 0x100
 800155c:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 800155e:	2301      	movs	r3, #1
 8001560:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 8001562:	2300      	movs	r3, #0
 8001564:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8001566:	2300      	movs	r3, #0
 8001568:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 800156a:	2300      	movs	r3, #0
 800156c:	617b      	str	r3, [r7, #20]
  LL_GPIO_Init(TRIGMUX1_GPIO_Port, &GPIO_InitStruct);
 800156e:	1d3b      	adds	r3, r7, #4
 8001570:	4619      	mov	r1, r3
 8001572:	4842      	ldr	r0, [pc, #264]	; (800167c <MX_GPIO_Init+0x38c>)
 8001574:	f006 fbb5 	bl	8007ce2 <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = TRIGMUX2_Pin;
 8001578:	f44f 7300 	mov.w	r3, #512	; 0x200
 800157c:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 800157e:	2301      	movs	r3, #1
 8001580:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 8001582:	2300      	movs	r3, #0
 8001584:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8001586:	2300      	movs	r3, #0
 8001588:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 800158a:	2300      	movs	r3, #0
 800158c:	617b      	str	r3, [r7, #20]
  LL_GPIO_Init(TRIGMUX2_GPIO_Port, &GPIO_InitStruct);
 800158e:	1d3b      	adds	r3, r7, #4
 8001590:	4619      	mov	r1, r3
 8001592:	483a      	ldr	r0, [pc, #232]	; (800167c <MX_GPIO_Init+0x38c>)
 8001594:	f006 fba5 	bl	8007ce2 <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = DC_Pin;
 8001598:	2340      	movs	r3, #64	; 0x40
 800159a:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 800159c:	2301      	movs	r3, #1
 800159e:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_VERY_HIGH;
 80015a0:	2303      	movs	r3, #3
 80015a2:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 80015a4:	2300      	movs	r3, #0
 80015a6:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 80015a8:	2300      	movs	r3, #0
 80015aa:	617b      	str	r3, [r7, #20]
  LL_GPIO_Init(DC_GPIO_Port, &GPIO_InitStruct);
 80015ac:	1d3b      	adds	r3, r7, #4
 80015ae:	4619      	mov	r1, r3
 80015b0:	4833      	ldr	r0, [pc, #204]	; (8001680 <MX_GPIO_Init+0x390>)
 80015b2:	f006 fb96 	bl	8007ce2 <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = CS_Pin;
 80015b6:	2380      	movs	r3, #128	; 0x80
 80015b8:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 80015ba:	2301      	movs	r3, #1
 80015bc:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_VERY_HIGH;
 80015be:	2303      	movs	r3, #3
 80015c0:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 80015c2:	2300      	movs	r3, #0
 80015c4:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 80015c6:	2300      	movs	r3, #0
 80015c8:	617b      	str	r3, [r7, #20]
  LL_GPIO_Init(CS_GPIO_Port, &GPIO_InitStruct);
 80015ca:	1d3b      	adds	r3, r7, #4
 80015cc:	4619      	mov	r1, r3
 80015ce:	482c      	ldr	r0, [pc, #176]	; (8001680 <MX_GPIO_Init+0x390>)
 80015d0:	f006 fb87 	bl	8007ce2 <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = RST_Pin;
 80015d4:	f44f 7300 	mov.w	r3, #512	; 0x200
 80015d8:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 80015da:	2301      	movs	r3, #1
 80015dc:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_VERY_HIGH;
 80015de:	2303      	movs	r3, #3
 80015e0:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 80015e2:	2300      	movs	r3, #0
 80015e4:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 80015e6:	2300      	movs	r3, #0
 80015e8:	617b      	str	r3, [r7, #20]
  LL_GPIO_Init(RST_GPIO_Port, &GPIO_InitStruct);
 80015ea:	1d3b      	adds	r3, r7, #4
 80015ec:	4619      	mov	r1, r3
 80015ee:	4824      	ldr	r0, [pc, #144]	; (8001680 <MX_GPIO_Init+0x390>)
 80015f0:	f006 fb77 	bl	8007ce2 <LL_GPIO_Init>

  /* EXTI interrupt init*/
  NVIC_SetPriority(EXTI0_IRQn, NVIC_EncodePriority(NVIC_GetPriorityGrouping(),0, 0));
 80015f4:	f7ff fd3e 	bl	8001074 <__NVIC_GetPriorityGrouping>
 80015f8:	4603      	mov	r3, r0
 80015fa:	2200      	movs	r2, #0
 80015fc:	2100      	movs	r1, #0
 80015fe:	4618      	mov	r0, r3
 8001600:	f7ff fd8e 	bl	8001120 <NVIC_EncodePriority>
 8001604:	4603      	mov	r3, r0
 8001606:	4619      	mov	r1, r3
 8001608:	2006      	movs	r0, #6
 800160a:	f7ff fd5f 	bl	80010cc <__NVIC_SetPriority>
  NVIC_EnableIRQ(EXTI0_IRQn);
 800160e:	2006      	movs	r0, #6
 8001610:	f7ff fd3e 	bl	8001090 <__NVIC_EnableIRQ>
  NVIC_SetPriority(EXTI1_IRQn, NVIC_EncodePriority(NVIC_GetPriorityGrouping(),0, 0));
 8001614:	f7ff fd2e 	bl	8001074 <__NVIC_GetPriorityGrouping>
 8001618:	4603      	mov	r3, r0
 800161a:	2200      	movs	r2, #0
 800161c:	2100      	movs	r1, #0
 800161e:	4618      	mov	r0, r3
 8001620:	f7ff fd7e 	bl	8001120 <NVIC_EncodePriority>
 8001624:	4603      	mov	r3, r0
 8001626:	4619      	mov	r1, r3
 8001628:	2007      	movs	r0, #7
 800162a:	f7ff fd4f 	bl	80010cc <__NVIC_SetPriority>
  NVIC_EnableIRQ(EXTI1_IRQn);
 800162e:	2007      	movs	r0, #7
 8001630:	f7ff fd2e 	bl	8001090 <__NVIC_EnableIRQ>
  NVIC_SetPriority(EXTI2_IRQn, NVIC_EncodePriority(NVIC_GetPriorityGrouping(),0, 0));
 8001634:	f7ff fd1e 	bl	8001074 <__NVIC_GetPriorityGrouping>
 8001638:	4603      	mov	r3, r0
 800163a:	2200      	movs	r2, #0
 800163c:	2100      	movs	r1, #0
 800163e:	4618      	mov	r0, r3
 8001640:	f7ff fd6e 	bl	8001120 <NVIC_EncodePriority>
 8001644:	4603      	mov	r3, r0
 8001646:	4619      	mov	r1, r3
 8001648:	2008      	movs	r0, #8
 800164a:	f7ff fd3f 	bl	80010cc <__NVIC_SetPriority>
  NVIC_EnableIRQ(EXTI2_IRQn);
 800164e:	2008      	movs	r0, #8
 8001650:	f7ff fd1e 	bl	8001090 <__NVIC_EnableIRQ>
  NVIC_SetPriority(EXTI15_10_IRQn, NVIC_EncodePriority(NVIC_GetPriorityGrouping(),0, 0));
 8001654:	f7ff fd0e 	bl	8001074 <__NVIC_GetPriorityGrouping>
 8001658:	4603      	mov	r3, r0
 800165a:	2200      	movs	r2, #0
 800165c:	2100      	movs	r1, #0
 800165e:	4618      	mov	r0, r3
 8001660:	f7ff fd5e 	bl	8001120 <NVIC_EncodePriority>
 8001664:	4603      	mov	r3, r0
 8001666:	4619      	mov	r1, r3
 8001668:	2028      	movs	r0, #40	; 0x28
 800166a:	f7ff fd2f 	bl	80010cc <__NVIC_SetPriority>
  NVIC_EnableIRQ(EXTI15_10_IRQn);
 800166e:	2028      	movs	r0, #40	; 0x28
 8001670:	f7ff fd0e 	bl	8001090 <__NVIC_EnableIRQ>

}
 8001674:	bf00      	nop
 8001676:	3728      	adds	r7, #40	; 0x28
 8001678:	46bd      	mov	sp, r7
 800167a:	e009      	b.n	8001690 <MX_GPIO_Init+0x3a0>
 800167c:	48000800 	.word	0x48000800
 8001680:	48000400 	.word	0x48000400
 8001684:	0f000003 	.word	0x0f000003
 8001688:	f0000003 	.word	0xf0000003
 800168c:	48001400 	.word	0x48001400
 8001690:	bd80      	pop	{r7, pc}
 8001692:	bf00      	nop

08001694 <ITM_SendChar>:
           \li Is blocking when a debugger is connected, but the previous character sent has not been transmitted.
  \param [in]     ch  Character to transmit.
  \returns            Character to transmit.
 */
__STATIC_INLINE uint32_t ITM_SendChar (uint32_t ch)
{
 8001694:	b480      	push	{r7}
 8001696:	b083      	sub	sp, #12
 8001698:	af00      	add	r7, sp, #0
 800169a:	6078      	str	r0, [r7, #4]
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 800169c:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 80016a0:	f8d3 3e80 	ldr.w	r3, [r3, #3712]	; 0xe80
 80016a4:	f003 0301 	and.w	r3, r3, #1
 80016a8:	2b00      	cmp	r3, #0
 80016aa:	d013      	beq.n	80016d4 <ITM_SendChar+0x40>
      ((ITM->TER & 1UL               ) != 0UL)   )     /* ITM Port #0 enabled */
 80016ac:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 80016b0:	f8d3 3e00 	ldr.w	r3, [r3, #3584]	; 0xe00
 80016b4:	f003 0301 	and.w	r3, r3, #1
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 80016b8:	2b00      	cmp	r3, #0
 80016ba:	d00b      	beq.n	80016d4 <ITM_SendChar+0x40>
  {
    while (ITM->PORT[0U].u32 == 0UL)
 80016bc:	e000      	b.n	80016c0 <ITM_SendChar+0x2c>
    {
      __NOP();
 80016be:	bf00      	nop
    while (ITM->PORT[0U].u32 == 0UL)
 80016c0:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 80016c4:	681b      	ldr	r3, [r3, #0]
 80016c6:	2b00      	cmp	r3, #0
 80016c8:	d0f9      	beq.n	80016be <ITM_SendChar+0x2a>
    }
    ITM->PORT[0U].u8 = (uint8_t)ch;
 80016ca:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 80016ce:	687a      	ldr	r2, [r7, #4]
 80016d0:	b2d2      	uxtb	r2, r2
 80016d2:	701a      	strb	r2, [r3, #0]
  }
  return (ch);
 80016d4:	687b      	ldr	r3, [r7, #4]
}
 80016d6:	4618      	mov	r0, r3
 80016d8:	370c      	adds	r7, #12
 80016da:	46bd      	mov	sp, r7
 80016dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016e0:	4770      	bx	lr

080016e2 <_write>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
int _write(int file, char *ptr, int len)
{
 80016e2:	b580      	push	{r7, lr}
 80016e4:	b086      	sub	sp, #24
 80016e6:	af00      	add	r7, sp, #0
 80016e8:	60f8      	str	r0, [r7, #12]
 80016ea:	60b9      	str	r1, [r7, #8]
 80016ec:	607a      	str	r2, [r7, #4]
  /* Implement your write code here, this is used by puts and printf for example */
  int i=0;
 80016ee:	2300      	movs	r3, #0
 80016f0:	617b      	str	r3, [r7, #20]
  for(i=0 ; i<len ; i++)
 80016f2:	2300      	movs	r3, #0
 80016f4:	617b      	str	r3, [r7, #20]
 80016f6:	e009      	b.n	800170c <_write+0x2a>
    ITM_SendChar((*ptr++));
 80016f8:	68bb      	ldr	r3, [r7, #8]
 80016fa:	1c5a      	adds	r2, r3, #1
 80016fc:	60ba      	str	r2, [r7, #8]
 80016fe:	781b      	ldrb	r3, [r3, #0]
 8001700:	4618      	mov	r0, r3
 8001702:	f7ff ffc7 	bl	8001694 <ITM_SendChar>
  for(i=0 ; i<len ; i++)
 8001706:	697b      	ldr	r3, [r7, #20]
 8001708:	3301      	adds	r3, #1
 800170a:	617b      	str	r3, [r7, #20]
 800170c:	697a      	ldr	r2, [r7, #20]
 800170e:	687b      	ldr	r3, [r7, #4]
 8001710:	429a      	cmp	r2, r3
 8001712:	dbf1      	blt.n	80016f8 <_write+0x16>
  return len;
 8001714:	687b      	ldr	r3, [r7, #4]
}
 8001716:	4618      	mov	r0, r3
 8001718:	3718      	adds	r7, #24
 800171a:	46bd      	mov	sp, r7
 800171c:	bd80      	pop	{r7, pc}

0800171e <HAL_DAC_ErrorCallbackCh1>:

void HAL_DAC_ErrorCallbackCh1(DAC_HandleTypeDef *hdac)
{
 800171e:	b480      	push	{r7}
 8001720:	b083      	sub	sp, #12
 8001722:	af00      	add	r7, sp, #0
 8001724:	6078      	str	r0, [r7, #4]
	// do something
}
 8001726:	bf00      	nop
 8001728:	370c      	adds	r7, #12
 800172a:	46bd      	mov	sp, r7
 800172c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001730:	4770      	bx	lr
	...

08001734 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001734:	b580      	push	{r7, lr}
 8001736:	b082      	sub	sp, #8
 8001738:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800173a:	f000 ff42 	bl	80025c2 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800173e:	f000 f89f 	bl	8001880 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001742:	f7ff fdd5 	bl	80012f0 <MX_GPIO_Init>
  MX_DMA_Init();
 8001746:	f7ff fc0f 	bl	8000f68 <MX_DMA_Init>
  MX_DAC1_Init();
 800174a:	f7ff fabf 	bl	8000ccc <MX_DAC1_Init>
  MX_DAC2_Init();
 800174e:	f7ff fb07 	bl	8000d60 <MX_DAC2_Init>
  MX_ADC1_Init();
 8001752:	f7ff f97d 	bl	8000a50 <MX_ADC1_Init>
  MX_COMP1_Init();
 8001756:	f7ff fa5f 	bl	8000c18 <MX_COMP1_Init>
  MX_TIM2_Init();
 800175a:	f000 fc29 	bl	8001fb0 <MX_TIM2_Init>
  MX_TIM17_Init();
 800175e:	f000 fdc1 	bl	80022e4 <MX_TIM17_Init>
  MX_SPI3_Init();
 8001762:	f000 f939 	bl	80019d8 <MX_SPI3_Init>
  MX_RNG_Init();
 8001766:	f000 f929 	bl	80019bc <MX_RNG_Init>
  MX_TIM1_Init();
 800176a:	f000 fbb1 	bl	8001ed0 <MX_TIM1_Init>
  MX_TIM8_Init();
 800176e:	f000 fcd9 	bl	8002124 <MX_TIM8_Init>
  MX_TIM16_Init();
 8001772:	f000 fd91 	bl	8002298 <MX_TIM16_Init>
  MX_TIM15_Init();
 8001776:	f000 fd3d 	bl	80021f4 <MX_TIM15_Init>
  MX_TIM5_Init();
 800177a:	f000 fc83 	bl	8002084 <MX_TIM5_Init>
  /* USER CODE BEGIN 2 */

  // main signal function output (external)
  HAL_DAC_Start_DMA(&hdac1, DAC1_CHANNEL_1, sine_data_table, SINE_DATA_SIZE, DAC_ALIGN_12B_R);
 800177e:	2300      	movs	r3, #0
 8001780:	9300      	str	r3, [sp, #0]
 8001782:	2378      	movs	r3, #120	; 0x78
 8001784:	4a32      	ldr	r2, [pc, #200]	; (8001850 <main+0x11c>)
 8001786:	2100      	movs	r1, #0
 8001788:	4832      	ldr	r0, [pc, #200]	; (8001854 <main+0x120>)
 800178a:	f002 fc71 	bl	8004070 <HAL_DAC_Start_DMA>
  //TIM8->ARR = sin1_max_arr;

  // DC bias output (internal)
  HAL_DAC_Start(&hdac1, DAC1_CHANNEL_2);
 800178e:	2110      	movs	r1, #16
 8001790:	4830      	ldr	r0, [pc, #192]	; (8001854 <main+0x120>)
 8001792:	f002 fc1a 	bl	8003fca <HAL_DAC_Start>
  //HAL_DAC_Start_DMA(&hdac2, DAC2_CHANNEL_1, sine_data_table, SINE_DATA_SIZE, DAC_ALIGN_12B_R);
  //HAL_DAC_Start_DMA(&hdac2, DAC2_CHANNEL_1, square_data_table, SQUARE_DATA_SIZE, DAC_ALIGN_12B_R);
  //HAL_DAC_Start_DMA(&hdac2, DAC2_CHANNEL_1, unitimpulse_data_table, UNITIMPULSE_DATA_SIZE, DAC_ALIGN_12B_R);
  //HAL_DAC_Start_DMA(&hdac2, DAC2_CHANNEL_1, saw_data_table, SAW_DATA_SIZE, DAC_ALIGN_12B_R);
  //HAL_DAC_Start_DMA(&hdac2, DAC2_CHANNEL_1, saw_rev_data_table, SAW_REV_DATA_SIZE, DAC_ALIGN_12B_R);
  HAL_DAC_Start_DMA(&hdac2, DAC2_CHANNEL_1, triangle_data_table, TRIANGLE_DATA_SIZE, DAC_ALIGN_12B_R);
 8001796:	2300      	movs	r3, #0
 8001798:	9300      	str	r3, [sp, #0]
 800179a:	2378      	movs	r3, #120	; 0x78
 800179c:	4a2e      	ldr	r2, [pc, #184]	; (8001858 <main+0x124>)
 800179e:	2100      	movs	r1, #0
 80017a0:	482e      	ldr	r0, [pc, #184]	; (800185c <main+0x128>)
 80017a2:	f002 fc65 	bl	8004070 <HAL_DAC_Start_DMA>

  //HAL_DAC_Start_DMA(&hdac2, DAC2_CHANNEL_1, trigger_input, TRIGGER_DATA_SIZE, DAC_ALIGN_12B_R);
#ifndef DISABLE_ALL_TIMERS
  // single clock to run all DAC channels. TODO add independent clocks
  HAL_TIM_Base_Start(&htim8);
 80017a6:	482e      	ldr	r0, [pc, #184]	; (8001860 <main+0x12c>)
 80017a8:	f004 ffce 	bl	8006748 <HAL_TIM_Base_Start>
#endif //DISABLE_ALL_TIMERS

  // DC bias inversion
  HAL_GPIO_WritePin(DCBIAS_INVERT_GPIO_Port, DCBIAS_INVERT_Pin, GPIO_PIN_SET);
 80017ac:	2201      	movs	r2, #1
 80017ae:	2108      	movs	r1, #8
 80017b0:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80017b4:	f003 fc4c 	bl	8005050 <HAL_GPIO_WritePin>

  // PGA gain
  HAL_GPIO_WritePin(SG0_GPIO_Port, SG0_Pin, GPIO_PIN_SET);
 80017b8:	2201      	movs	r2, #1
 80017ba:	2101      	movs	r1, #1
 80017bc:	4829      	ldr	r0, [pc, #164]	; (8001864 <main+0x130>)
 80017be:	f003 fc47 	bl	8005050 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(SG1_GPIO_Port, SG1_Pin, GPIO_PIN_SET);
 80017c2:	2201      	movs	r2, #1
 80017c4:	2120      	movs	r1, #32
 80017c6:	4828      	ldr	r0, [pc, #160]	; (8001868 <main+0x134>)
 80017c8:	f003 fc42 	bl	8005050 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(SG2_GPIO_Port, SG2_Pin, GPIO_PIN_SET);
 80017cc:	2201      	movs	r2, #1
 80017ce:	2110      	movs	r1, #16
 80017d0:	4825      	ldr	r0, [pc, #148]	; (8001868 <main+0x134>)
 80017d2:	f003 fc3d 	bl	8005050 <HAL_GPIO_WritePin>
  //HAL_TIM_Base_Start_IT(&htim17);
#endif	//DISABLE_ALL_TIMERS


// http://www.ti.com/lit/ds/symlink/ts5a3357.pdf
  HAL_GPIO_WritePin(TRIGMUX1_GPIO_Port, TRIGMUX1_Pin, GPIO_PIN_RESET);	// TS5A3357 Pin6
 80017d6:	2200      	movs	r2, #0
 80017d8:	f44f 7180 	mov.w	r1, #256	; 0x100
 80017dc:	4822      	ldr	r0, [pc, #136]	; (8001868 <main+0x134>)
 80017de:	f003 fc37 	bl	8005050 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(TRIGMUX2_GPIO_Port, TRIGMUX2_Pin, GPIO_PIN_RESET);	// TS5A3357 Pin5
 80017e2:	2200      	movs	r2, #0
 80017e4:	f44f 7100 	mov.w	r1, #512	; 0x200
 80017e8:	481f      	ldr	r0, [pc, #124]	; (8001868 <main+0x134>)
 80017ea:	f003 fc31 	bl	8005050 <HAL_GPIO_WritePin>

#ifdef TIM_TRIGGER_MODE
  // input capture on in TIM2 slave-mode TF1FP1

  // set HW switch to direct ext. trigger input to TIM pin
  HAL_GPIO_WritePin(TRIGMODE_GPIO_Port, TRIGMODE_Pin, GPIO_PIN_SET);
 80017ee:	2201      	movs	r2, #1
 80017f0:	2108      	movs	r1, #8
 80017f2:	481d      	ldr	r0, [pc, #116]	; (8001868 <main+0x134>)
 80017f4:	f003 fc2c 	bl	8005050 <HAL_GPIO_WritePin>
  //HAL_GPIO_WritePin(TRIGMUX1_GPIO_Port, TRIGMUX1_Pin, GPIO_PIN_SET);	// TS5A3357 Pin6
  //HAL_GPIO_WritePin(TRIGMUX2_GPIO_Port, TRIGMUX2_Pin, GPIO_PIN_RESET); // TS5A3357 Pin5

  // clear slave mode select reg
  TIM2->SMCR &= ~(TIM_SMCR_SMS_0 | TIM_SMCR_SMS_1 | TIM_SMCR_SMS_2);
 80017f8:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80017fc:	689b      	ldr	r3, [r3, #8]
 80017fe:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001802:	f023 0307 	bic.w	r3, r3, #7
 8001806:	6093      	str	r3, [r2, #8]

  // slave mode
  //TIM2->SMCR |= TIM_SMCR_SMS_2;						// SLAVE MODE: RESET
  TIM2->SMCR |= TIM_SMCR_SMS_0 | TIM_SMCR_SMS_2;	// SLAVE MODE: GATED
 8001808:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800180c:	689b      	ldr	r3, [r3, #8]
 800180e:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001812:	f043 0305 	orr.w	r3, r3, #5
 8001816:	6093      	str	r3, [r2, #8]
  //TIM2->SMCR |= TIM_SMCR_SMS_1 | TIM_SMCR_SMS_2;	// SLAVE MODE: TRIGGER

#ifndef DISABLE_ALL_TIMERS
  HAL_TIM_Base_Start_IT(&htim2);
 8001818:	4814      	ldr	r0, [pc, #80]	; (800186c <main+0x138>)
 800181a:	f004 ffc3 	bl	80067a4 <HAL_TIM_Base_Start_IT>



#ifndef DISABLE_ALL_TIMERS
  // encoder input
  HAL_TIM_Base_Start(&htim1);		// enable encoder timer
 800181e:	4814      	ldr	r0, [pc, #80]	; (8001870 <main+0x13c>)
 8001820:	f004 ff92 	bl	8006748 <HAL_TIM_Base_Start>
  //TIM1->DIER |= TIM_DIER_IDXIE;		// enable index interrupts

#endif	//DISABLE_ALL_TIMERS

  TIM6->PSC = 65535;
 8001824:	4b13      	ldr	r3, [pc, #76]	; (8001874 <main+0x140>)
 8001826:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800182a:	629a      	str	r2, [r3, #40]	; 0x28
  TIM6->ARR = 65535;
 800182c:	4b11      	ldr	r3, [pc, #68]	; (8001874 <main+0x140>)
 800182e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001832:	62da      	str	r2, [r3, #44]	; 0x2c



  // TFT lib enable
  DM_Init();
 8001834:	f7fe fcf0 	bl	8000218 <DM_Init>
  DM_PostInit();
 8001838:	f7fe fcfc 	bl	8000234 <DM_PostInit>
  //DM_RegisterStrings();

  HAL_TIM_Base_Start_IT(&htim15);
 800183c:	480e      	ldr	r0, [pc, #56]	; (8001878 <main+0x144>)
 800183e:	f004 ffb1 	bl	80067a4 <HAL_TIM_Base_Start_IT>
  HAL_TIM_Base_Start(&htim5);
 8001842:	480e      	ldr	r0, [pc, #56]	; (800187c <main+0x148>)
 8001844:	f004 ff80 	bl	8006748 <HAL_TIM_Base_Start>
  /* USER CODE BEGIN WHILE */
  while (1)
  {


	EM_ProcessEvent();
 8001848:	f7fe ff64 	bl	8000714 <EM_ProcessEvent>
 800184c:	e7fc      	b.n	8001848 <main+0x114>
 800184e:	bf00      	nop
 8001850:	200003e0 	.word	0x200003e0
 8001854:	20000d10 	.word	0x20000d10
 8001858:	200007a0 	.word	0x200007a0
 800185c:	20000cfc 	.word	0x20000cfc
 8001860:	20000e48 	.word	0x20000e48
 8001864:	48000400 	.word	0x48000400
 8001868:	48000800 	.word	0x48000800
 800186c:	20000fc4 	.word	0x20000fc4
 8001870:	20000f78 	.word	0x20000f78
 8001874:	40001000 	.word	0x40001000
 8001878:	20000e94 	.word	0x20000e94
 800187c:	20000f2c 	.word	0x20000f2c

08001880 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001880:	b580      	push	{r7, lr}
 8001882:	b0a8      	sub	sp, #160	; 0xa0
 8001884:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001886:	f107 0368 	add.w	r3, r7, #104	; 0x68
 800188a:	2238      	movs	r2, #56	; 0x38
 800188c:	2100      	movs	r1, #0
 800188e:	4618      	mov	r0, r3
 8001890:	f007 f958 	bl	8008b44 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001894:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8001898:	2200      	movs	r2, #0
 800189a:	601a      	str	r2, [r3, #0]
 800189c:	605a      	str	r2, [r3, #4]
 800189e:	609a      	str	r2, [r3, #8]
 80018a0:	60da      	str	r2, [r3, #12]
 80018a2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80018a4:	463b      	mov	r3, r7
 80018a6:	2254      	movs	r2, #84	; 0x54
 80018a8:	2100      	movs	r1, #0
 80018aa:	4618      	mov	r0, r3
 80018ac:	f007 f94a 	bl	8008b44 <memset>

  /** Configure the main internal regulator output voltage 
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1_BOOST);
 80018b0:	2000      	movs	r0, #0
 80018b2:	f003 fbe5 	bl	8005080 <HAL_PWREx_ControlVoltageScaling>
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_HSI48;
 80018b6:	2322      	movs	r3, #34	; 0x22
 80018b8:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80018ba:	f44f 7380 	mov.w	r3, #256	; 0x100
 80018be:	677b      	str	r3, [r7, #116]	; 0x74
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80018c0:	2340      	movs	r3, #64	; 0x40
 80018c2:	67bb      	str	r3, [r7, #120]	; 0x78
  RCC_OscInitStruct.HSI48State = RCC_HSI48_ON;
 80018c4:	2301      	movs	r3, #1
 80018c6:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80018ca:	2302      	movs	r3, #2
 80018cc:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80018d0:	2302      	movs	r3, #2
 80018d2:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV2;
 80018d6:	2302      	movs	r3, #2
 80018d8:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  RCC_OscInitStruct.PLL.PLLN = 42;
 80018dc:	232a      	movs	r3, #42	; 0x2a
 80018de:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80018e2:	2302      	movs	r3, #2
 80018e4:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV4;
 80018e8:	2304      	movs	r3, #4
 80018ea:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 80018ee:	2302      	movs	r3, #2
 80018f0:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80018f4:	f107 0368 	add.w	r3, r7, #104	; 0x68
 80018f8:	4618      	mov	r0, r3
 80018fa:	f003 fc65 	bl	80051c8 <HAL_RCC_OscConfig>
 80018fe:	4603      	mov	r3, r0
 8001900:	2b00      	cmp	r3, #0
 8001902:	d001      	beq.n	8001908 <SystemClock_Config+0x88>
  {
    Error_Handler();
 8001904:	f000 f82a 	bl	800195c <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001908:	230f      	movs	r3, #15
 800190a:	657b      	str	r3, [r7, #84]	; 0x54
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800190c:	2303      	movs	r3, #3
 800190e:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001910:	2300      	movs	r3, #0
 8001912:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8001914:	2300      	movs	r3, #0
 8001916:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001918:	2300      	movs	r3, #0
 800191a:	667b      	str	r3, [r7, #100]	; 0x64

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_8) != HAL_OK)
 800191c:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8001920:	2108      	movs	r1, #8
 8001922:	4618      	mov	r0, r3
 8001924:	f003 ff68 	bl	80057f8 <HAL_RCC_ClockConfig>
 8001928:	4603      	mov	r3, r0
 800192a:	2b00      	cmp	r3, #0
 800192c:	d001      	beq.n	8001932 <SystemClock_Config+0xb2>
  {
    Error_Handler();
 800192e:	f000 f815 	bl	800195c <Error_Handler>
  }
  /** Initializes the peripherals clocks 
  */
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_RNG|RCC_PERIPHCLK_ADC12;
 8001932:	f44f 4340 	mov.w	r3, #49152	; 0xc000
 8001936:	603b      	str	r3, [r7, #0]
  PeriphClkInit.RngClockSelection = RCC_RNGCLKSOURCE_HSI48;
 8001938:	2300      	movs	r3, #0
 800193a:	643b      	str	r3, [r7, #64]	; 0x40
  PeriphClkInit.Adc12ClockSelection = RCC_ADC12CLKSOURCE_SYSCLK;
 800193c:	f04f 5300 	mov.w	r3, #536870912	; 0x20000000
 8001940:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001942:	463b      	mov	r3, r7
 8001944:	4618      	mov	r0, r3
 8001946:	f004 f947 	bl	8005bd8 <HAL_RCCEx_PeriphCLKConfig>
 800194a:	4603      	mov	r3, r0
 800194c:	2b00      	cmp	r3, #0
 800194e:	d001      	beq.n	8001954 <SystemClock_Config+0xd4>
  {
    Error_Handler();
 8001950:	f000 f804 	bl	800195c <Error_Handler>
  }
}
 8001954:	bf00      	nop
 8001956:	37a0      	adds	r7, #160	; 0xa0
 8001958:	46bd      	mov	sp, r7
 800195a:	bd80      	pop	{r7, pc}

0800195c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800195c:	b480      	push	{r7}
 800195e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8001960:	bf00      	nop
 8001962:	46bd      	mov	sp, r7
 8001964:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001968:	4770      	bx	lr

0800196a <LL_RNG_Enable>:
  * @rmtoll CR           RNGEN         LL_RNG_Enable
  * @param  RNGx RNG Instance
  * @retval None
  */
__STATIC_INLINE void LL_RNG_Enable(RNG_TypeDef *RNGx)
{
 800196a:	b480      	push	{r7}
 800196c:	b083      	sub	sp, #12
 800196e:	af00      	add	r7, sp, #0
 8001970:	6078      	str	r0, [r7, #4]
  SET_BIT(RNGx->CR, RNG_CR_RNGEN);
 8001972:	687b      	ldr	r3, [r7, #4]
 8001974:	681b      	ldr	r3, [r3, #0]
 8001976:	f043 0204 	orr.w	r2, r3, #4
 800197a:	687b      	ldr	r3, [r7, #4]
 800197c:	601a      	str	r2, [r3, #0]
}
 800197e:	bf00      	nop
 8001980:	370c      	adds	r7, #12
 8001982:	46bd      	mov	sp, r7
 8001984:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001988:	4770      	bx	lr
	...

0800198c <LL_AHB2_GRP1_EnableClock>:
{
 800198c:	b480      	push	{r7}
 800198e:	b085      	sub	sp, #20
 8001990:	af00      	add	r7, sp, #0
 8001992:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB2ENR, Periphs);
 8001994:	4b08      	ldr	r3, [pc, #32]	; (80019b8 <LL_AHB2_GRP1_EnableClock+0x2c>)
 8001996:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8001998:	4907      	ldr	r1, [pc, #28]	; (80019b8 <LL_AHB2_GRP1_EnableClock+0x2c>)
 800199a:	687b      	ldr	r3, [r7, #4]
 800199c:	4313      	orrs	r3, r2
 800199e:	64cb      	str	r3, [r1, #76]	; 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 80019a0:	4b05      	ldr	r3, [pc, #20]	; (80019b8 <LL_AHB2_GRP1_EnableClock+0x2c>)
 80019a2:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80019a4:	687b      	ldr	r3, [r7, #4]
 80019a6:	4013      	ands	r3, r2
 80019a8:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80019aa:	68fb      	ldr	r3, [r7, #12]
}
 80019ac:	bf00      	nop
 80019ae:	3714      	adds	r7, #20
 80019b0:	46bd      	mov	sp, r7
 80019b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019b6:	4770      	bx	lr
 80019b8:	40021000 	.word	0x40021000

080019bc <MX_RNG_Init>:

/* USER CODE END 0 */

/* RNG init function */
void MX_RNG_Init(void)
{
 80019bc:	b580      	push	{r7, lr}
 80019be:	af00      	add	r7, sp, #0

  /* Peripheral clock enable */
  LL_AHB2_GRP1_EnableClock(LL_AHB2_GRP1_PERIPH_RNG);
 80019c0:	f04f 6080 	mov.w	r0, #67108864	; 0x4000000
 80019c4:	f7ff ffe2 	bl	800198c <LL_AHB2_GRP1_EnableClock>

  LL_RNG_Enable(RNG);
 80019c8:	4802      	ldr	r0, [pc, #8]	; (80019d4 <MX_RNG_Init+0x18>)
 80019ca:	f7ff ffce 	bl	800196a <LL_RNG_Enable>

}
 80019ce:	bf00      	nop
 80019d0:	bd80      	pop	{r7, pc}
 80019d2:	bf00      	nop
 80019d4:	50060800 	.word	0x50060800

080019d8 <MX_SPI3_Init>:

SPI_HandleTypeDef hspi3;

/* SPI3 init function */
void MX_SPI3_Init(void)
{
 80019d8:	b580      	push	{r7, lr}
 80019da:	af00      	add	r7, sp, #0

  hspi3.Instance = SPI3;
 80019dc:	4b1b      	ldr	r3, [pc, #108]	; (8001a4c <MX_SPI3_Init+0x74>)
 80019de:	4a1c      	ldr	r2, [pc, #112]	; (8001a50 <MX_SPI3_Init+0x78>)
 80019e0:	601a      	str	r2, [r3, #0]
  hspi3.Init.Mode = SPI_MODE_MASTER;
 80019e2:	4b1a      	ldr	r3, [pc, #104]	; (8001a4c <MX_SPI3_Init+0x74>)
 80019e4:	f44f 7282 	mov.w	r2, #260	; 0x104
 80019e8:	605a      	str	r2, [r3, #4]
  hspi3.Init.Direction = SPI_DIRECTION_2LINES;
 80019ea:	4b18      	ldr	r3, [pc, #96]	; (8001a4c <MX_SPI3_Init+0x74>)
 80019ec:	2200      	movs	r2, #0
 80019ee:	609a      	str	r2, [r3, #8]
  hspi3.Init.DataSize = SPI_DATASIZE_8BIT;
 80019f0:	4b16      	ldr	r3, [pc, #88]	; (8001a4c <MX_SPI3_Init+0x74>)
 80019f2:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 80019f6:	60da      	str	r2, [r3, #12]
  hspi3.Init.CLKPolarity = SPI_POLARITY_LOW;
 80019f8:	4b14      	ldr	r3, [pc, #80]	; (8001a4c <MX_SPI3_Init+0x74>)
 80019fa:	2200      	movs	r2, #0
 80019fc:	611a      	str	r2, [r3, #16]
  hspi3.Init.CLKPhase = SPI_PHASE_1EDGE;
 80019fe:	4b13      	ldr	r3, [pc, #76]	; (8001a4c <MX_SPI3_Init+0x74>)
 8001a00:	2200      	movs	r2, #0
 8001a02:	615a      	str	r2, [r3, #20]
  hspi3.Init.NSS = SPI_NSS_SOFT;
 8001a04:	4b11      	ldr	r3, [pc, #68]	; (8001a4c <MX_SPI3_Init+0x74>)
 8001a06:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001a0a:	619a      	str	r2, [r3, #24]
  hspi3.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_8;
 8001a0c:	4b0f      	ldr	r3, [pc, #60]	; (8001a4c <MX_SPI3_Init+0x74>)
 8001a0e:	2210      	movs	r2, #16
 8001a10:	61da      	str	r2, [r3, #28]
  hspi3.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001a12:	4b0e      	ldr	r3, [pc, #56]	; (8001a4c <MX_SPI3_Init+0x74>)
 8001a14:	2200      	movs	r2, #0
 8001a16:	621a      	str	r2, [r3, #32]
  hspi3.Init.TIMode = SPI_TIMODE_DISABLE;
 8001a18:	4b0c      	ldr	r3, [pc, #48]	; (8001a4c <MX_SPI3_Init+0x74>)
 8001a1a:	2200      	movs	r2, #0
 8001a1c:	625a      	str	r2, [r3, #36]	; 0x24
  hspi3.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001a1e:	4b0b      	ldr	r3, [pc, #44]	; (8001a4c <MX_SPI3_Init+0x74>)
 8001a20:	2200      	movs	r2, #0
 8001a22:	629a      	str	r2, [r3, #40]	; 0x28
  hspi3.Init.CRCPolynomial = 7;
 8001a24:	4b09      	ldr	r3, [pc, #36]	; (8001a4c <MX_SPI3_Init+0x74>)
 8001a26:	2207      	movs	r2, #7
 8001a28:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi3.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8001a2a:	4b08      	ldr	r3, [pc, #32]	; (8001a4c <MX_SPI3_Init+0x74>)
 8001a2c:	2200      	movs	r2, #0
 8001a2e:	631a      	str	r2, [r3, #48]	; 0x30
  hspi3.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8001a30:	4b06      	ldr	r3, [pc, #24]	; (8001a4c <MX_SPI3_Init+0x74>)
 8001a32:	2208      	movs	r2, #8
 8001a34:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi3) != HAL_OK)
 8001a36:	4805      	ldr	r0, [pc, #20]	; (8001a4c <MX_SPI3_Init+0x74>)
 8001a38:	f004 fb1a 	bl	8006070 <HAL_SPI_Init>
 8001a3c:	4603      	mov	r3, r0
 8001a3e:	2b00      	cmp	r3, #0
 8001a40:	d001      	beq.n	8001a46 <MX_SPI3_Init+0x6e>
  {
    Error_Handler();
 8001a42:	f7ff ff8b 	bl	800195c <Error_Handler>
  }

}
 8001a46:	bf00      	nop
 8001a48:	bd80      	pop	{r7, pc}
 8001a4a:	bf00      	nop
 8001a4c:	20000de4 	.word	0x20000de4
 8001a50:	40003c00 	.word	0x40003c00

08001a54 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8001a54:	b580      	push	{r7, lr}
 8001a56:	b08a      	sub	sp, #40	; 0x28
 8001a58:	af00      	add	r7, sp, #0
 8001a5a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001a5c:	f107 0314 	add.w	r3, r7, #20
 8001a60:	2200      	movs	r2, #0
 8001a62:	601a      	str	r2, [r3, #0]
 8001a64:	605a      	str	r2, [r3, #4]
 8001a66:	609a      	str	r2, [r3, #8]
 8001a68:	60da      	str	r2, [r3, #12]
 8001a6a:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI3)
 8001a6c:	687b      	ldr	r3, [r7, #4]
 8001a6e:	681b      	ldr	r3, [r3, #0]
 8001a70:	4a17      	ldr	r2, [pc, #92]	; (8001ad0 <HAL_SPI_MspInit+0x7c>)
 8001a72:	4293      	cmp	r3, r2
 8001a74:	d128      	bne.n	8001ac8 <HAL_SPI_MspInit+0x74>
  {
  /* USER CODE BEGIN SPI3_MspInit 0 */

  /* USER CODE END SPI3_MspInit 0 */
    /* SPI3 clock enable */
    __HAL_RCC_SPI3_CLK_ENABLE();
 8001a76:	4b17      	ldr	r3, [pc, #92]	; (8001ad4 <HAL_SPI_MspInit+0x80>)
 8001a78:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001a7a:	4a16      	ldr	r2, [pc, #88]	; (8001ad4 <HAL_SPI_MspInit+0x80>)
 8001a7c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001a80:	6593      	str	r3, [r2, #88]	; 0x58
 8001a82:	4b14      	ldr	r3, [pc, #80]	; (8001ad4 <HAL_SPI_MspInit+0x80>)
 8001a84:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001a86:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8001a8a:	613b      	str	r3, [r7, #16]
 8001a8c:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001a8e:	4b11      	ldr	r3, [pc, #68]	; (8001ad4 <HAL_SPI_MspInit+0x80>)
 8001a90:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001a92:	4a10      	ldr	r2, [pc, #64]	; (8001ad4 <HAL_SPI_MspInit+0x80>)
 8001a94:	f043 0304 	orr.w	r3, r3, #4
 8001a98:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001a9a:	4b0e      	ldr	r3, [pc, #56]	; (8001ad4 <HAL_SPI_MspInit+0x80>)
 8001a9c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001a9e:	f003 0304 	and.w	r3, r3, #4
 8001aa2:	60fb      	str	r3, [r7, #12]
 8001aa4:	68fb      	ldr	r3, [r7, #12]
    /**SPI3 GPIO Configuration    
    PC10     ------> SPI3_SCK
    PC11     ------> SPI3_MISO
    PC12     ------> SPI3_MOSI 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12;
 8001aa6:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 8001aaa:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001aac:	2302      	movs	r3, #2
 8001aae:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ab0:	2300      	movs	r3, #0
 8001ab2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001ab4:	2300      	movs	r3, #0
 8001ab6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8001ab8:	2306      	movs	r3, #6
 8001aba:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001abc:	f107 0314 	add.w	r3, r7, #20
 8001ac0:	4619      	mov	r1, r3
 8001ac2:	4805      	ldr	r0, [pc, #20]	; (8001ad8 <HAL_SPI_MspInit+0x84>)
 8001ac4:	f003 f92a 	bl	8004d1c <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }
}
 8001ac8:	bf00      	nop
 8001aca:	3728      	adds	r7, #40	; 0x28
 8001acc:	46bd      	mov	sp, r7
 8001ace:	bd80      	pop	{r7, pc}
 8001ad0:	40003c00 	.word	0x40003c00
 8001ad4:	40021000 	.word	0x40021000
 8001ad8:	48000800 	.word	0x48000800

08001adc <LL_PWR_DisableUCPDDeadBattery>:
  *         control to the UCPD (which should therefore be initialized before doing the disable).
  * @rmtoll CR3          UCPD_DBDIS           LL_PWR_DisableUCPDDeadBattery
  * @retval None
  */
__STATIC_INLINE void LL_PWR_DisableUCPDDeadBattery(void)
{
 8001adc:	b480      	push	{r7}
 8001ade:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR3, PWR_CR3_UCPD_DBDIS);
 8001ae0:	4b05      	ldr	r3, [pc, #20]	; (8001af8 <LL_PWR_DisableUCPDDeadBattery+0x1c>)
 8001ae2:	689b      	ldr	r3, [r3, #8]
 8001ae4:	4a04      	ldr	r2, [pc, #16]	; (8001af8 <LL_PWR_DisableUCPDDeadBattery+0x1c>)
 8001ae6:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001aea:	6093      	str	r3, [r2, #8]
}
 8001aec:	bf00      	nop
 8001aee:	46bd      	mov	sp, r7
 8001af0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001af4:	4770      	bx	lr
 8001af6:	bf00      	nop
 8001af8:	40007000 	.word	0x40007000

08001afc <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001afc:	b580      	push	{r7, lr}
 8001afe:	b082      	sub	sp, #8
 8001b00:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001b02:	4b0f      	ldr	r3, [pc, #60]	; (8001b40 <HAL_MspInit+0x44>)
 8001b04:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001b06:	4a0e      	ldr	r2, [pc, #56]	; (8001b40 <HAL_MspInit+0x44>)
 8001b08:	f043 0301 	orr.w	r3, r3, #1
 8001b0c:	6613      	str	r3, [r2, #96]	; 0x60
 8001b0e:	4b0c      	ldr	r3, [pc, #48]	; (8001b40 <HAL_MspInit+0x44>)
 8001b10:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001b12:	f003 0301 	and.w	r3, r3, #1
 8001b16:	607b      	str	r3, [r7, #4]
 8001b18:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001b1a:	4b09      	ldr	r3, [pc, #36]	; (8001b40 <HAL_MspInit+0x44>)
 8001b1c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001b1e:	4a08      	ldr	r2, [pc, #32]	; (8001b40 <HAL_MspInit+0x44>)
 8001b20:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001b24:	6593      	str	r3, [r2, #88]	; 0x58
 8001b26:	4b06      	ldr	r3, [pc, #24]	; (8001b40 <HAL_MspInit+0x44>)
 8001b28:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001b2a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001b2e:	603b      	str	r3, [r7, #0]
 8001b30:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral 
  */
  LL_PWR_DisableDeadBatteryPD();
 8001b32:	f7ff ffd3 	bl	8001adc <LL_PWR_DisableUCPDDeadBattery>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001b36:	bf00      	nop
 8001b38:	3708      	adds	r7, #8
 8001b3a:	46bd      	mov	sp, r7
 8001b3c:	bd80      	pop	{r7, pc}
 8001b3e:	bf00      	nop
 8001b40:	40021000 	.word	0x40021000

08001b44 <LL_EXTI_IsActiveFlag_0_31>:
  * @note   (*): Available in some devices
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_EXTI_IsActiveFlag_0_31(uint32_t ExtiLine)
{
 8001b44:	b480      	push	{r7}
 8001b46:	b083      	sub	sp, #12
 8001b48:	af00      	add	r7, sp, #0
 8001b4a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(EXTI->PR1, ExtiLine) == (ExtiLine)) ? 1UL : 0UL);
 8001b4c:	4b07      	ldr	r3, [pc, #28]	; (8001b6c <LL_EXTI_IsActiveFlag_0_31+0x28>)
 8001b4e:	695a      	ldr	r2, [r3, #20]
 8001b50:	687b      	ldr	r3, [r7, #4]
 8001b52:	4013      	ands	r3, r2
 8001b54:	687a      	ldr	r2, [r7, #4]
 8001b56:	429a      	cmp	r2, r3
 8001b58:	d101      	bne.n	8001b5e <LL_EXTI_IsActiveFlag_0_31+0x1a>
 8001b5a:	2301      	movs	r3, #1
 8001b5c:	e000      	b.n	8001b60 <LL_EXTI_IsActiveFlag_0_31+0x1c>
 8001b5e:	2300      	movs	r3, #0
}
 8001b60:	4618      	mov	r0, r3
 8001b62:	370c      	adds	r7, #12
 8001b64:	46bd      	mov	sp, r7
 8001b66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b6a:	4770      	bx	lr
 8001b6c:	40010400 	.word	0x40010400

08001b70 <LL_EXTI_ClearFlag_0_31>:
  * @note   (*): Available in some devices
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_ClearFlag_0_31(uint32_t ExtiLine)
{
 8001b70:	b480      	push	{r7}
 8001b72:	b083      	sub	sp, #12
 8001b74:	af00      	add	r7, sp, #0
 8001b76:	6078      	str	r0, [r7, #4]
  WRITE_REG(EXTI->PR1, ExtiLine);
 8001b78:	4a04      	ldr	r2, [pc, #16]	; (8001b8c <LL_EXTI_ClearFlag_0_31+0x1c>)
 8001b7a:	687b      	ldr	r3, [r7, #4]
 8001b7c:	6153      	str	r3, [r2, #20]
}
 8001b7e:	bf00      	nop
 8001b80:	370c      	adds	r7, #12
 8001b82:	46bd      	mov	sp, r7
 8001b84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b88:	4770      	bx	lr
 8001b8a:	bf00      	nop
 8001b8c:	40010400 	.word	0x40010400

08001b90 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001b90:	b480      	push	{r7}
 8001b92:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8001b94:	bf00      	nop
 8001b96:	46bd      	mov	sp, r7
 8001b98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b9c:	4770      	bx	lr

08001b9e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001b9e:	b480      	push	{r7}
 8001ba0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001ba2:	e7fe      	b.n	8001ba2 <HardFault_Handler+0x4>

08001ba4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001ba4:	b480      	push	{r7}
 8001ba6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001ba8:	e7fe      	b.n	8001ba8 <MemManage_Handler+0x4>

08001baa <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001baa:	b480      	push	{r7}
 8001bac:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001bae:	e7fe      	b.n	8001bae <BusFault_Handler+0x4>

08001bb0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001bb0:	b480      	push	{r7}
 8001bb2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001bb4:	e7fe      	b.n	8001bb4 <UsageFault_Handler+0x4>

08001bb6 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001bb6:	b480      	push	{r7}
 8001bb8:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001bba:	bf00      	nop
 8001bbc:	46bd      	mov	sp, r7
 8001bbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bc2:	4770      	bx	lr

08001bc4 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001bc4:	b480      	push	{r7}
 8001bc6:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001bc8:	bf00      	nop
 8001bca:	46bd      	mov	sp, r7
 8001bcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bd0:	4770      	bx	lr

08001bd2 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001bd2:	b480      	push	{r7}
 8001bd4:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001bd6:	bf00      	nop
 8001bd8:	46bd      	mov	sp, r7
 8001bda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bde:	4770      	bx	lr

08001be0 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001be0:	b580      	push	{r7, lr}
 8001be2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001be4:	f000 fd40 	bl	8002668 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001be8:	bf00      	nop
 8001bea:	bd80      	pop	{r7, pc}

08001bec <EXTI0_IRQHandler>:

/**
  * @brief This function handles EXTI line0 interrupt.
  */
void EXTI0_IRQHandler(void)
{
 8001bec:	b580      	push	{r7, lr}
 8001bee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI0_IRQn 0 */

//	if(HAL_GPIO_ReadPin(BTN3_EXTI0_GPIO_Port, BTN3_EXTI0_Pin))
//	{
		//snprintf(control_pressed, sizeof(control_pressed), "BTN3");
		EM_SetNewEvent(evBiasMenu);
 8001bf0:	2004      	movs	r0, #4
 8001bf2:	f7fe ff01 	bl	80009f8 <EM_SetNewEvent>
 		//printf("BTN3_EXTI0_Pin\n");
//	}

  /* USER CODE END EXTI0_IRQn 0 */
  if (LL_EXTI_IsActiveFlag_0_31(LL_EXTI_LINE_0) != RESET)
 8001bf6:	2001      	movs	r0, #1
 8001bf8:	f7ff ffa4 	bl	8001b44 <LL_EXTI_IsActiveFlag_0_31>
 8001bfc:	4603      	mov	r3, r0
 8001bfe:	2b00      	cmp	r3, #0
 8001c00:	d002      	beq.n	8001c08 <EXTI0_IRQHandler+0x1c>
  {
    LL_EXTI_ClearFlag_0_31(LL_EXTI_LINE_0);
 8001c02:	2001      	movs	r0, #1
 8001c04:	f7ff ffb4 	bl	8001b70 <LL_EXTI_ClearFlag_0_31>
    /* USER CODE END LL_EXTI_LINE_0 */
  }
  /* USER CODE BEGIN EXTI0_IRQn 1 */

  /* USER CODE END EXTI0_IRQn 1 */
}
 8001c08:	bf00      	nop
 8001c0a:	bd80      	pop	{r7, pc}

08001c0c <EXTI1_IRQHandler>:

/**
  * @brief This function handles EXTI line1 interrupt.
  */
void EXTI1_IRQHandler(void)
{
 8001c0c:	b580      	push	{r7, lr}
 8001c0e:	af00      	add	r7, sp, #0

//	if(HAL_GPIO_ReadPin(BTN4_EXTI1_GPIO_Port, BTN4_EXTI1_Pin))
//	{
		//snprintf(control_pressed, sizeof(control_pressed), "BTN4");
		//printf("BTN4_EXTI1_Pin\n");
		EM_SetNewEvent(evFreqMenu);
 8001c10:	2002      	movs	r0, #2
 8001c12:	f7fe fef1 	bl	80009f8 <EM_SetNewEvent>
//	}

  /* USER CODE END EXTI1_IRQn 0 */
  if (LL_EXTI_IsActiveFlag_0_31(LL_EXTI_LINE_1) != RESET)
 8001c16:	2002      	movs	r0, #2
 8001c18:	f7ff ff94 	bl	8001b44 <LL_EXTI_IsActiveFlag_0_31>
 8001c1c:	4603      	mov	r3, r0
 8001c1e:	2b00      	cmp	r3, #0
 8001c20:	d002      	beq.n	8001c28 <EXTI1_IRQHandler+0x1c>
  {
    LL_EXTI_ClearFlag_0_31(LL_EXTI_LINE_1);
 8001c22:	2002      	movs	r0, #2
 8001c24:	f7ff ffa4 	bl	8001b70 <LL_EXTI_ClearFlag_0_31>
    /* USER CODE END LL_EXTI_LINE_1 */
  }
  /* USER CODE BEGIN EXTI1_IRQn 1 */

  /* USER CODE END EXTI1_IRQn 1 */
}
 8001c28:	bf00      	nop
 8001c2a:	bd80      	pop	{r7, pc}

08001c2c <EXTI2_IRQHandler>:

/**
  * @brief This function handles EXTI line2 interrupt.
  */
void EXTI2_IRQHandler(void)
{
 8001c2c:	b580      	push	{r7, lr}
 8001c2e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI2_IRQn 0 */


		//snprintf(control_pressed, sizeof(control_pressed), "ENC_BTN");
		//printf("ENC_EXTI2_Pin\n");
		EM_SetNewEvent(evEncoderPush);
 8001c30:	2006      	movs	r0, #6
 8001c32:	f7fe fee1 	bl	80009f8 <EM_SetNewEvent>



  /* USER CODE END EXTI2_IRQn 0 */
  if (LL_EXTI_IsActiveFlag_0_31(LL_EXTI_LINE_2) != RESET)
 8001c36:	2004      	movs	r0, #4
 8001c38:	f7ff ff84 	bl	8001b44 <LL_EXTI_IsActiveFlag_0_31>
 8001c3c:	4603      	mov	r3, r0
 8001c3e:	2b00      	cmp	r3, #0
 8001c40:	d002      	beq.n	8001c48 <EXTI2_IRQHandler+0x1c>
  {
    LL_EXTI_ClearFlag_0_31(LL_EXTI_LINE_2);
 8001c42:	2004      	movs	r0, #4
 8001c44:	f7ff ff94 	bl	8001b70 <LL_EXTI_ClearFlag_0_31>
    /* USER CODE END LL_EXTI_LINE_2 */
  }
  /* USER CODE BEGIN EXTI2_IRQn 1 */

  /* USER CODE END EXTI2_IRQn 1 */
}
 8001c48:	bf00      	nop
 8001c4a:	bd80      	pop	{r7, pc}

08001c4c <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 8001c4c:	b580      	push	{r7, lr}
 8001c4e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */
	//printf("Test\n");
	//printf("%lu\n", trigger_input[0]);
  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8001c50:	4802      	ldr	r0, [pc, #8]	; (8001c5c <DMA1_Channel1_IRQHandler+0x10>)
 8001c52:	f002 ff13 	bl	8004a7c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 8001c56:	bf00      	nop
 8001c58:	bd80      	pop	{r7, pc}
 8001c5a:	bf00      	nop
 8001c5c:	20000c78 	.word	0x20000c78

08001c60 <DMA1_Channel2_IRQHandler>:

/**
  * @brief This function handles DMA1 channel2 global interrupt.
  */
void DMA1_Channel2_IRQHandler(void)
{
 8001c60:	b580      	push	{r7, lr}
 8001c62:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel2_IRQn 0 */

  /* USER CODE END DMA1_Channel2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_dac1_ch1);
 8001c64:	4802      	ldr	r0, [pc, #8]	; (8001c70 <DMA1_Channel2_IRQHandler+0x10>)
 8001c66:	f002 ff09 	bl	8004a7c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel2_IRQn 1 */

  /* USER CODE END DMA1_Channel2_IRQn 1 */
}
 8001c6a:	bf00      	nop
 8001c6c:	bd80      	pop	{r7, pc}
 8001c6e:	bf00      	nop
 8001c70:	20000d24 	.word	0x20000d24

08001c74 <DMA1_Channel3_IRQHandler>:

/**
  * @brief This function handles DMA1 channel3 global interrupt.
  */
void DMA1_Channel3_IRQHandler(void)
{
 8001c74:	b580      	push	{r7, lr}
 8001c76:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel3_IRQn 0 */

  /* USER CODE END DMA1_Channel3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_dac2_ch1);
 8001c78:	4802      	ldr	r0, [pc, #8]	; (8001c84 <DMA1_Channel3_IRQHandler+0x10>)
 8001c7a:	f002 feff 	bl	8004a7c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel3_IRQn 1 */

  /* USER CODE END DMA1_Channel3_IRQn 1 */
}
 8001c7e:	bf00      	nop
 8001c80:	bd80      	pop	{r7, pc}
 8001c82:	bf00      	nop
 8001c84:	20000d84 	.word	0x20000d84

08001c88 <TIM1_BRK_TIM15_IRQHandler>:

/**
  * @brief This function handles TIM1 break interrupt and TIM15 global interrupt.
  */
void TIM1_BRK_TIM15_IRQHandler(void)
{
 8001c88:	b580      	push	{r7, lr}
 8001c8a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_BRK_TIM15_IRQn 0 */
	DM_UpdateDisplay();
 8001c8c:	f7fe faf0 	bl	8000270 <DM_UpdateDisplay>

	if((TIM1->CNT < last_enc_value) || (TIM1->CNT > last_enc_value))
 8001c90:	4b10      	ldr	r3, [pc, #64]	; (8001cd4 <TIM1_BRK_TIM15_IRQHandler+0x4c>)
 8001c92:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001c94:	4a10      	ldr	r2, [pc, #64]	; (8001cd8 <TIM1_BRK_TIM15_IRQHandler+0x50>)
 8001c96:	8812      	ldrh	r2, [r2, #0]
 8001c98:	4293      	cmp	r3, r2
 8001c9a:	d305      	bcc.n	8001ca8 <TIM1_BRK_TIM15_IRQHandler+0x20>
 8001c9c:	4b0d      	ldr	r3, [pc, #52]	; (8001cd4 <TIM1_BRK_TIM15_IRQHandler+0x4c>)
 8001c9e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001ca0:	4a0d      	ldr	r2, [pc, #52]	; (8001cd8 <TIM1_BRK_TIM15_IRQHandler+0x50>)
 8001ca2:	8812      	ldrh	r2, [r2, #0]
 8001ca4:	4293      	cmp	r3, r2
 8001ca6:	d907      	bls.n	8001cb8 <TIM1_BRK_TIM15_IRQHandler+0x30>
	{
		EM_SetEncoderValue(TIM1->CNT);
 8001ca8:	4b0a      	ldr	r3, [pc, #40]	; (8001cd4 <TIM1_BRK_TIM15_IRQHandler+0x4c>)
 8001caa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001cac:	4618      	mov	r0, r3
 8001cae:	f7fe febf 	bl	8000a30 <EM_SetEncoderValue>
		EM_SetNewEvent(evEncoderSet);
 8001cb2:	2005      	movs	r0, #5
 8001cb4:	f7fe fea0 	bl	80009f8 <EM_SetNewEvent>

	}
	last_enc_value = TIM1->CNT;
 8001cb8:	4b06      	ldr	r3, [pc, #24]	; (8001cd4 <TIM1_BRK_TIM15_IRQHandler+0x4c>)
 8001cba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001cbc:	b29a      	uxth	r2, r3
 8001cbe:	4b06      	ldr	r3, [pc, #24]	; (8001cd8 <TIM1_BRK_TIM15_IRQHandler+0x50>)
 8001cc0:	801a      	strh	r2, [r3, #0]

  /* USER CODE END TIM1_BRK_TIM15_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8001cc2:	4806      	ldr	r0, [pc, #24]	; (8001cdc <TIM1_BRK_TIM15_IRQHandler+0x54>)
 8001cc4:	f004 fe79 	bl	80069ba <HAL_TIM_IRQHandler>
  HAL_TIM_IRQHandler(&htim15);
 8001cc8:	4805      	ldr	r0, [pc, #20]	; (8001ce0 <TIM1_BRK_TIM15_IRQHandler+0x58>)
 8001cca:	f004 fe76 	bl	80069ba <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_BRK_TIM15_IRQn 1 */

  /* USER CODE END TIM1_BRK_TIM15_IRQn 1 */
}
 8001cce:	bf00      	nop
 8001cd0:	bd80      	pop	{r7, pc}
 8001cd2:	bf00      	nop
 8001cd4:	40012c00 	.word	0x40012c00
 8001cd8:	20000bf0 	.word	0x20000bf0
 8001cdc:	20000f78 	.word	0x20000f78
 8001ce0:	20000e94 	.word	0x20000e94

08001ce4 <TIM1_UP_TIM16_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM16 global interrupt.
  */
void TIM1_UP_TIM16_IRQHandler(void)
{
 8001ce4:	b580      	push	{r7, lr}
 8001ce6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 0 */
	snprintf(control_pressed, sizeof(control_pressed), " ");
 8001ce8:	4a05      	ldr	r2, [pc, #20]	; (8001d00 <TIM1_UP_TIM16_IRQHandler+0x1c>)
 8001cea:	4b06      	ldr	r3, [pc, #24]	; (8001d04 <TIM1_UP_TIM16_IRQHandler+0x20>)
 8001cec:	881b      	ldrh	r3, [r3, #0]
 8001cee:	8013      	strh	r3, [r2, #0]
  /* USER CODE END TIM1_UP_TIM16_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8001cf0:	4805      	ldr	r0, [pc, #20]	; (8001d08 <TIM1_UP_TIM16_IRQHandler+0x24>)
 8001cf2:	f004 fe62 	bl	80069ba <HAL_TIM_IRQHandler>
  HAL_TIM_IRQHandler(&htim16);
 8001cf6:	4805      	ldr	r0, [pc, #20]	; (8001d0c <TIM1_UP_TIM16_IRQHandler+0x28>)
 8001cf8:	f004 fe5f 	bl	80069ba <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 1 */
}
 8001cfc:	bf00      	nop
 8001cfe:	bd80      	pop	{r7, pc}
 8001d00:	20000c00 	.word	0x20000c00
 8001d04:	080095e4 	.word	0x080095e4
 8001d08:	20000f78 	.word	0x20000f78
 8001d0c:	20001010 	.word	0x20001010

08001d10 <TIM1_TRG_COM_TIM17_IRQHandler>:

/**
  * @brief This function handles TIM1 trigger and commutation interrupts and TIM17 global interrupt.
  */
void TIM1_TRG_COM_TIM17_IRQHandler(void)
{
 8001d10:	b580      	push	{r7, lr}
 8001d12:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_TRG_COM_TIM17_IRQn 0 */
	update_dc_bias_sweep();
 8001d14:	f7ff f962 	bl	8000fdc <update_dc_bias_sweep>




  /* USER CODE END TIM1_TRG_COM_TIM17_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8001d18:	4803      	ldr	r0, [pc, #12]	; (8001d28 <TIM1_TRG_COM_TIM17_IRQHandler+0x18>)
 8001d1a:	f004 fe4e 	bl	80069ba <HAL_TIM_IRQHandler>
  HAL_TIM_IRQHandler(&htim17);
 8001d1e:	4803      	ldr	r0, [pc, #12]	; (8001d2c <TIM1_TRG_COM_TIM17_IRQHandler+0x1c>)
 8001d20:	f004 fe4b 	bl	80069ba <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_TRG_COM_TIM17_IRQn 1 */

  /* USER CODE END TIM1_TRG_COM_TIM17_IRQn 1 */
}
 8001d24:	bf00      	nop
 8001d26:	bd80      	pop	{r7, pc}
 8001d28:	20000f78 	.word	0x20000f78
 8001d2c:	20000ee0 	.word	0x20000ee0

08001d30 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8001d30:	b580      	push	{r7, lr}
 8001d32:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8001d34:	4802      	ldr	r0, [pc, #8]	; (8001d40 <TIM2_IRQHandler+0x10>)
 8001d36:	f004 fe40 	bl	80069ba <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8001d3a:	bf00      	nop
 8001d3c:	bd80      	pop	{r7, pc}
 8001d3e:	bf00      	nop
 8001d40:	20000fc4 	.word	0x20000fc4

08001d44 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8001d44:	b580      	push	{r7, lr}
 8001d46:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

	if(HAL_GPIO_ReadPin(BTN1_EXTI14_GPIO_Port, BTN1_EXTI14_Pin))
 8001d48:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001d4c:	4815      	ldr	r0, [pc, #84]	; (8001da4 <EXTI15_10_IRQHandler+0x60>)
 8001d4e:	f003 f967 	bl	8005020 <HAL_GPIO_ReadPin>
 8001d52:	4603      	mov	r3, r0
 8001d54:	2b00      	cmp	r3, #0
 8001d56:	d002      	beq.n	8001d5e <EXTI15_10_IRQHandler+0x1a>
	{
		EM_SetNewEvent(evAmplMenu);
 8001d58:	2003      	movs	r0, #3
 8001d5a:	f7fe fe4d 	bl	80009f8 <EM_SetNewEvent>
		//snprintf(control_pressed, sizeof(control_pressed), "BTN1");
		//printf("BTN1_EXTI14_Pin\n");
	}
	if(HAL_GPIO_ReadPin(BTN2_EXTI15_GPIO_Port, BTN2_EXTI15_Pin))
 8001d5e:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001d62:	4810      	ldr	r0, [pc, #64]	; (8001da4 <EXTI15_10_IRQHandler+0x60>)
 8001d64:	f003 f95c 	bl	8005020 <HAL_GPIO_ReadPin>
 8001d68:	4603      	mov	r3, r0
 8001d6a:	2b00      	cmp	r3, #0
 8001d6c:	d002      	beq.n	8001d74 <EXTI15_10_IRQHandler+0x30>
	{
		EM_SetNewEvent(evFuncMenu);
 8001d6e:	2001      	movs	r0, #1
 8001d70:	f7fe fe42 	bl	80009f8 <EM_SetNewEvent>
		//snprintf(control_pressed, sizeof(control_pressed), "BTN2");
		//printf("BTN2_EXTI15_Pin\n");
	}

  /* USER CODE END EXTI15_10_IRQn 0 */
  if (LL_EXTI_IsActiveFlag_0_31(LL_EXTI_LINE_14) != RESET)
 8001d74:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 8001d78:	f7ff fee4 	bl	8001b44 <LL_EXTI_IsActiveFlag_0_31>
 8001d7c:	4603      	mov	r3, r0
 8001d7e:	2b00      	cmp	r3, #0
 8001d80:	d003      	beq.n	8001d8a <EXTI15_10_IRQHandler+0x46>
  {
    LL_EXTI_ClearFlag_0_31(LL_EXTI_LINE_14);
 8001d82:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 8001d86:	f7ff fef3 	bl	8001b70 <LL_EXTI_ClearFlag_0_31>
    /* USER CODE BEGIN LL_EXTI_LINE_14 */
    
    /* USER CODE END LL_EXTI_LINE_14 */
  }
  if (LL_EXTI_IsActiveFlag_0_31(LL_EXTI_LINE_15) != RESET)
 8001d8a:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 8001d8e:	f7ff fed9 	bl	8001b44 <LL_EXTI_IsActiveFlag_0_31>
 8001d92:	4603      	mov	r3, r0
 8001d94:	2b00      	cmp	r3, #0
 8001d96:	d003      	beq.n	8001da0 <EXTI15_10_IRQHandler+0x5c>
  {
    LL_EXTI_ClearFlag_0_31(LL_EXTI_LINE_15);
 8001d98:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 8001d9c:	f7ff fee8 	bl	8001b70 <LL_EXTI_ClearFlag_0_31>
    /* USER CODE END LL_EXTI_LINE_15 */
  }
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8001da0:	bf00      	nop
 8001da2:	bd80      	pop	{r7, pc}
 8001da4:	48000800 	.word	0x48000800

08001da8 <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001da8:	b580      	push	{r7, lr}
 8001daa:	b086      	sub	sp, #24
 8001dac:	af00      	add	r7, sp, #0
 8001dae:	60f8      	str	r0, [r7, #12]
 8001db0:	60b9      	str	r1, [r7, #8]
 8001db2:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001db4:	2300      	movs	r3, #0
 8001db6:	617b      	str	r3, [r7, #20]
 8001db8:	e00a      	b.n	8001dd0 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8001dba:	f3af 8000 	nop.w
 8001dbe:	4601      	mov	r1, r0
 8001dc0:	68bb      	ldr	r3, [r7, #8]
 8001dc2:	1c5a      	adds	r2, r3, #1
 8001dc4:	60ba      	str	r2, [r7, #8]
 8001dc6:	b2ca      	uxtb	r2, r1
 8001dc8:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001dca:	697b      	ldr	r3, [r7, #20]
 8001dcc:	3301      	adds	r3, #1
 8001dce:	617b      	str	r3, [r7, #20]
 8001dd0:	697a      	ldr	r2, [r7, #20]
 8001dd2:	687b      	ldr	r3, [r7, #4]
 8001dd4:	429a      	cmp	r2, r3
 8001dd6:	dbf0      	blt.n	8001dba <_read+0x12>
	}

return len;
 8001dd8:	687b      	ldr	r3, [r7, #4]
}
 8001dda:	4618      	mov	r0, r3
 8001ddc:	3718      	adds	r7, #24
 8001dde:	46bd      	mov	sp, r7
 8001de0:	bd80      	pop	{r7, pc}

08001de2 <_close>:
	}
	return len;
}

int _close(int file)
{
 8001de2:	b480      	push	{r7}
 8001de4:	b083      	sub	sp, #12
 8001de6:	af00      	add	r7, sp, #0
 8001de8:	6078      	str	r0, [r7, #4]
	return -1;
 8001dea:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8001dee:	4618      	mov	r0, r3
 8001df0:	370c      	adds	r7, #12
 8001df2:	46bd      	mov	sp, r7
 8001df4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001df8:	4770      	bx	lr

08001dfa <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001dfa:	b480      	push	{r7}
 8001dfc:	b083      	sub	sp, #12
 8001dfe:	af00      	add	r7, sp, #0
 8001e00:	6078      	str	r0, [r7, #4]
 8001e02:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8001e04:	683b      	ldr	r3, [r7, #0]
 8001e06:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001e0a:	605a      	str	r2, [r3, #4]
	return 0;
 8001e0c:	2300      	movs	r3, #0
}
 8001e0e:	4618      	mov	r0, r3
 8001e10:	370c      	adds	r7, #12
 8001e12:	46bd      	mov	sp, r7
 8001e14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e18:	4770      	bx	lr

08001e1a <_isatty>:

int _isatty(int file)
{
 8001e1a:	b480      	push	{r7}
 8001e1c:	b083      	sub	sp, #12
 8001e1e:	af00      	add	r7, sp, #0
 8001e20:	6078      	str	r0, [r7, #4]
	return 1;
 8001e22:	2301      	movs	r3, #1
}
 8001e24:	4618      	mov	r0, r3
 8001e26:	370c      	adds	r7, #12
 8001e28:	46bd      	mov	sp, r7
 8001e2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e2e:	4770      	bx	lr

08001e30 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001e30:	b480      	push	{r7}
 8001e32:	b085      	sub	sp, #20
 8001e34:	af00      	add	r7, sp, #0
 8001e36:	60f8      	str	r0, [r7, #12]
 8001e38:	60b9      	str	r1, [r7, #8]
 8001e3a:	607a      	str	r2, [r7, #4]
	return 0;
 8001e3c:	2300      	movs	r3, #0
}
 8001e3e:	4618      	mov	r0, r3
 8001e40:	3714      	adds	r7, #20
 8001e42:	46bd      	mov	sp, r7
 8001e44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e48:	4770      	bx	lr
	...

08001e4c <_sbrk>:
/**
 _sbrk
 Increase program data space. Malloc and related functions depend on this
**/
caddr_t _sbrk(int incr)
{
 8001e4c:	b580      	push	{r7, lr}
 8001e4e:	b084      	sub	sp, #16
 8001e50:	af00      	add	r7, sp, #0
 8001e52:	6078      	str	r0, [r7, #4]
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 8001e54:	4b11      	ldr	r3, [pc, #68]	; (8001e9c <_sbrk+0x50>)
 8001e56:	681b      	ldr	r3, [r3, #0]
 8001e58:	2b00      	cmp	r3, #0
 8001e5a:	d102      	bne.n	8001e62 <_sbrk+0x16>
		heap_end = &end;
 8001e5c:	4b0f      	ldr	r3, [pc, #60]	; (8001e9c <_sbrk+0x50>)
 8001e5e:	4a10      	ldr	r2, [pc, #64]	; (8001ea0 <_sbrk+0x54>)
 8001e60:	601a      	str	r2, [r3, #0]

	prev_heap_end = heap_end;
 8001e62:	4b0e      	ldr	r3, [pc, #56]	; (8001e9c <_sbrk+0x50>)
 8001e64:	681b      	ldr	r3, [r3, #0]
 8001e66:	60fb      	str	r3, [r7, #12]
	if (heap_end + incr > stack_ptr)
 8001e68:	4b0c      	ldr	r3, [pc, #48]	; (8001e9c <_sbrk+0x50>)
 8001e6a:	681a      	ldr	r2, [r3, #0]
 8001e6c:	687b      	ldr	r3, [r7, #4]
 8001e6e:	4413      	add	r3, r2
 8001e70:	466a      	mov	r2, sp
 8001e72:	4293      	cmp	r3, r2
 8001e74:	d907      	bls.n	8001e86 <_sbrk+0x3a>
	{
		errno = ENOMEM;
 8001e76:	f006 fe3b 	bl	8008af0 <__errno>
 8001e7a:	4602      	mov	r2, r0
 8001e7c:	230c      	movs	r3, #12
 8001e7e:	6013      	str	r3, [r2, #0]
		return (caddr_t) -1;
 8001e80:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001e84:	e006      	b.n	8001e94 <_sbrk+0x48>
	}

	heap_end += incr;
 8001e86:	4b05      	ldr	r3, [pc, #20]	; (8001e9c <_sbrk+0x50>)
 8001e88:	681a      	ldr	r2, [r3, #0]
 8001e8a:	687b      	ldr	r3, [r7, #4]
 8001e8c:	4413      	add	r3, r2
 8001e8e:	4a03      	ldr	r2, [pc, #12]	; (8001e9c <_sbrk+0x50>)
 8001e90:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap_end;
 8001e92:	68fb      	ldr	r3, [r7, #12]
}
 8001e94:	4618      	mov	r0, r3
 8001e96:	3710      	adds	r7, #16
 8001e98:	46bd      	mov	sp, r7
 8001e9a:	bd80      	pop	{r7, pc}
 8001e9c:	20000bf4 	.word	0x20000bf4
 8001ea0:	20001068 	.word	0x20001068

08001ea4 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 8001ea4:	b480      	push	{r7}
 8001ea6:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8001ea8:	4b08      	ldr	r3, [pc, #32]	; (8001ecc <SystemInit+0x28>)
 8001eaa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001eae:	4a07      	ldr	r2, [pc, #28]	; (8001ecc <SystemInit+0x28>)
 8001eb0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001eb4:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8001eb8:	4b04      	ldr	r3, [pc, #16]	; (8001ecc <SystemInit+0x28>)
 8001eba:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8001ebe:	609a      	str	r2, [r3, #8]
#endif
}
 8001ec0:	bf00      	nop
 8001ec2:	46bd      	mov	sp, r7
 8001ec4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ec8:	4770      	bx	lr
 8001eca:	bf00      	nop
 8001ecc:	e000ed00 	.word	0xe000ed00

08001ed0 <MX_TIM1_Init>:
TIM_HandleTypeDef htim16;
TIM_HandleTypeDef htim17;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 8001ed0:	b580      	push	{r7, lr}
 8001ed2:	b09a      	sub	sp, #104	; 0x68
 8001ed4:	af00      	add	r7, sp, #0
  TIM_Encoder_InitTypeDef sConfig = {0};
 8001ed6:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8001eda:	2224      	movs	r2, #36	; 0x24
 8001edc:	2100      	movs	r1, #0
 8001ede:	4618      	mov	r0, r3
 8001ee0:	f006 fe30 	bl	8008b44 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001ee4:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8001ee8:	2200      	movs	r2, #0
 8001eea:	601a      	str	r2, [r3, #0]
 8001eec:	605a      	str	r2, [r3, #4]
 8001eee:	609a      	str	r2, [r3, #8]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8001ef0:	1d3b      	adds	r3, r7, #4
 8001ef2:	2234      	movs	r2, #52	; 0x34
 8001ef4:	2100      	movs	r1, #0
 8001ef6:	4618      	mov	r0, r3
 8001ef8:	f006 fe24 	bl	8008b44 <memset>

  htim1.Instance = TIM1;
 8001efc:	4b2a      	ldr	r3, [pc, #168]	; (8001fa8 <MX_TIM1_Init+0xd8>)
 8001efe:	4a2b      	ldr	r2, [pc, #172]	; (8001fac <MX_TIM1_Init+0xdc>)
 8001f00:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 8001f02:	4b29      	ldr	r3, [pc, #164]	; (8001fa8 <MX_TIM1_Init+0xd8>)
 8001f04:	2200      	movs	r2, #0
 8001f06:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_CENTERALIGNED2;
 8001f08:	4b27      	ldr	r3, [pc, #156]	; (8001fa8 <MX_TIM1_Init+0xd8>)
 8001f0a:	2240      	movs	r2, #64	; 0x40
 8001f0c:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 1024;
 8001f0e:	4b26      	ldr	r3, [pc, #152]	; (8001fa8 <MX_TIM1_Init+0xd8>)
 8001f10:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001f14:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001f16:	4b24      	ldr	r3, [pc, #144]	; (8001fa8 <MX_TIM1_Init+0xd8>)
 8001f18:	2200      	movs	r2, #0
 8001f1a:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8001f1c:	4b22      	ldr	r3, [pc, #136]	; (8001fa8 <MX_TIM1_Init+0xd8>)
 8001f1e:	2200      	movs	r2, #0
 8001f20:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001f22:	4b21      	ldr	r3, [pc, #132]	; (8001fa8 <MX_TIM1_Init+0xd8>)
 8001f24:	2200      	movs	r2, #0
 8001f26:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 8001f28:	2303      	movs	r3, #3
 8001f2a:	647b      	str	r3, [r7, #68]	; 0x44
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8001f2c:	2300      	movs	r3, #0
 8001f2e:	64bb      	str	r3, [r7, #72]	; 0x48
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8001f30:	2301      	movs	r3, #1
 8001f32:	64fb      	str	r3, [r7, #76]	; 0x4c
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8001f34:	2300      	movs	r3, #0
 8001f36:	653b      	str	r3, [r7, #80]	; 0x50
  sConfig.IC1Filter = 0;
 8001f38:	2300      	movs	r3, #0
 8001f3a:	657b      	str	r3, [r7, #84]	; 0x54
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8001f3c:	2300      	movs	r3, #0
 8001f3e:	65bb      	str	r3, [r7, #88]	; 0x58
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8001f40:	2301      	movs	r3, #1
 8001f42:	65fb      	str	r3, [r7, #92]	; 0x5c
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8001f44:	2300      	movs	r3, #0
 8001f46:	663b      	str	r3, [r7, #96]	; 0x60
  sConfig.IC2Filter = 0;
 8001f48:	2300      	movs	r3, #0
 8001f4a:	667b      	str	r3, [r7, #100]	; 0x64
  if (HAL_TIM_Encoder_Init(&htim1, &sConfig) != HAL_OK)
 8001f4c:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8001f50:	4619      	mov	r1, r3
 8001f52:	4815      	ldr	r0, [pc, #84]	; (8001fa8 <MX_TIM1_Init+0xd8>)
 8001f54:	f004 fc8b 	bl	800686e <HAL_TIM_Encoder_Init>
 8001f58:	4603      	mov	r3, r0
 8001f5a:	2b00      	cmp	r3, #0
 8001f5c:	d001      	beq.n	8001f62 <MX_TIM1_Init+0x92>
  {
    Error_Handler();
 8001f5e:	f7ff fcfd 	bl	800195c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001f62:	2300      	movs	r3, #0
 8001f64:	63bb      	str	r3, [r7, #56]	; 0x38
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8001f66:	2300      	movs	r3, #0
 8001f68:	63fb      	str	r3, [r7, #60]	; 0x3c
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001f6a:	2300      	movs	r3, #0
 8001f6c:	643b      	str	r3, [r7, #64]	; 0x40
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8001f6e:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8001f72:	4619      	mov	r1, r3
 8001f74:	480c      	ldr	r0, [pc, #48]	; (8001fa8 <MX_TIM1_Init+0xd8>)
 8001f76:	f005 fa03 	bl	8007380 <HAL_TIMEx_MasterConfigSynchronization>
 8001f7a:	4603      	mov	r3, r0
 8001f7c:	2b00      	cmp	r3, #0
 8001f7e:	d001      	beq.n	8001f84 <MX_TIM1_Init+0xb4>
  {
    Error_Handler();
 8001f80:	f7ff fcec 	bl	800195c <Error_Handler>
  }
  sBreakDeadTimeConfig.BreakAFMode = TIM_BREAK_AFMODE_INPUT;
 8001f84:	2300      	movs	r3, #0
 8001f86:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2AFMode = TIM_BREAK_AFMODE_INPUT;
 8001f88:	2300      	movs	r3, #0
 8001f8a:	633b      	str	r3, [r7, #48]	; 0x30
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8001f8c:	1d3b      	adds	r3, r7, #4
 8001f8e:	4619      	mov	r1, r3
 8001f90:	4805      	ldr	r0, [pc, #20]	; (8001fa8 <MX_TIM1_Init+0xd8>)
 8001f92:	f005 fa8b 	bl	80074ac <HAL_TIMEx_ConfigBreakDeadTime>
 8001f96:	4603      	mov	r3, r0
 8001f98:	2b00      	cmp	r3, #0
 8001f9a:	d001      	beq.n	8001fa0 <MX_TIM1_Init+0xd0>
  {
    Error_Handler();
 8001f9c:	f7ff fcde 	bl	800195c <Error_Handler>
  }

}
 8001fa0:	bf00      	nop
 8001fa2:	3768      	adds	r7, #104	; 0x68
 8001fa4:	46bd      	mov	sp, r7
 8001fa6:	bd80      	pop	{r7, pc}
 8001fa8:	20000f78 	.word	0x20000f78
 8001fac:	40012c00 	.word	0x40012c00

08001fb0 <MX_TIM2_Init>:
/* TIM2 init function */
void MX_TIM2_Init(void)
{
 8001fb0:	b580      	push	{r7, lr}
 8001fb2:	b08c      	sub	sp, #48	; 0x30
 8001fb4:	af00      	add	r7, sp, #0
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001fb6:	f107 0320 	add.w	r3, r7, #32
 8001fba:	2200      	movs	r2, #0
 8001fbc:	601a      	str	r2, [r3, #0]
 8001fbe:	605a      	str	r2, [r3, #4]
 8001fc0:	609a      	str	r2, [r3, #8]
 8001fc2:	60da      	str	r2, [r3, #12]
  TIM_SlaveConfigTypeDef sSlaveConfig = {0};
 8001fc4:	f107 030c 	add.w	r3, r7, #12
 8001fc8:	2200      	movs	r2, #0
 8001fca:	601a      	str	r2, [r3, #0]
 8001fcc:	605a      	str	r2, [r3, #4]
 8001fce:	609a      	str	r2, [r3, #8]
 8001fd0:	60da      	str	r2, [r3, #12]
 8001fd2:	611a      	str	r2, [r3, #16]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001fd4:	463b      	mov	r3, r7
 8001fd6:	2200      	movs	r2, #0
 8001fd8:	601a      	str	r2, [r3, #0]
 8001fda:	605a      	str	r2, [r3, #4]
 8001fdc:	609a      	str	r2, [r3, #8]

  htim2.Instance = TIM2;
 8001fde:	4b28      	ldr	r3, [pc, #160]	; (8002080 <MX_TIM2_Init+0xd0>)
 8001fe0:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001fe4:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 2047;
 8001fe6:	4b26      	ldr	r3, [pc, #152]	; (8002080 <MX_TIM2_Init+0xd0>)
 8001fe8:	f240 72ff 	movw	r2, #2047	; 0x7ff
 8001fec:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001fee:	4b24      	ldr	r3, [pc, #144]	; (8002080 <MX_TIM2_Init+0xd0>)
 8001ff0:	2200      	movs	r2, #0
 8001ff2:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 1024;
 8001ff4:	4b22      	ldr	r3, [pc, #136]	; (8002080 <MX_TIM2_Init+0xd0>)
 8001ff6:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001ffa:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001ffc:	4b20      	ldr	r3, [pc, #128]	; (8002080 <MX_TIM2_Init+0xd0>)
 8001ffe:	2200      	movs	r2, #0
 8002000:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002002:	4b1f      	ldr	r3, [pc, #124]	; (8002080 <MX_TIM2_Init+0xd0>)
 8002004:	2200      	movs	r2, #0
 8002006:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8002008:	481d      	ldr	r0, [pc, #116]	; (8002080 <MX_TIM2_Init+0xd0>)
 800200a:	f004 fb46 	bl	800669a <HAL_TIM_Base_Init>
 800200e:	4603      	mov	r3, r0
 8002010:	2b00      	cmp	r3, #0
 8002012:	d001      	beq.n	8002018 <MX_TIM2_Init+0x68>
  {
    Error_Handler();
 8002014:	f7ff fca2 	bl	800195c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002018:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800201c:	623b      	str	r3, [r7, #32]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 800201e:	f107 0320 	add.w	r3, r7, #32
 8002022:	4619      	mov	r1, r3
 8002024:	4816      	ldr	r0, [pc, #88]	; (8002080 <MX_TIM2_Init+0xd0>)
 8002026:	f004 fe47 	bl	8006cb8 <HAL_TIM_ConfigClockSource>
 800202a:	4603      	mov	r3, r0
 800202c:	2b00      	cmp	r3, #0
 800202e:	d001      	beq.n	8002034 <MX_TIM2_Init+0x84>
  {
    Error_Handler();
 8002030:	f7ff fc94 	bl	800195c <Error_Handler>
  }
  sSlaveConfig.SlaveMode = TIM_SLAVEMODE_GATED;
 8002034:	2305      	movs	r3, #5
 8002036:	60fb      	str	r3, [r7, #12]
  sSlaveConfig.InputTrigger = TIM_TS_TI1FP1;
 8002038:	2350      	movs	r3, #80	; 0x50
 800203a:	613b      	str	r3, [r7, #16]
  sSlaveConfig.TriggerPolarity = TIM_TRIGGERPOLARITY_RISING;
 800203c:	2300      	movs	r3, #0
 800203e:	617b      	str	r3, [r7, #20]
  sSlaveConfig.TriggerFilter = 0;
 8002040:	2300      	movs	r3, #0
 8002042:	61fb      	str	r3, [r7, #28]
  if (HAL_TIM_SlaveConfigSynchro(&htim2, &sSlaveConfig) != HAL_OK)
 8002044:	f107 030c 	add.w	r3, r7, #12
 8002048:	4619      	mov	r1, r3
 800204a:	480d      	ldr	r0, [pc, #52]	; (8002080 <MX_TIM2_Init+0xd0>)
 800204c:	f004 ff24 	bl	8006e98 <HAL_TIM_SlaveConfigSynchro>
 8002050:	4603      	mov	r3, r0
 8002052:	2b00      	cmp	r3, #0
 8002054:	d001      	beq.n	800205a <MX_TIM2_Init+0xaa>
  {
    Error_Handler();
 8002056:	f7ff fc81 	bl	800195c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800205a:	2300      	movs	r3, #0
 800205c:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800205e:	2300      	movs	r3, #0
 8002060:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8002062:	463b      	mov	r3, r7
 8002064:	4619      	mov	r1, r3
 8002066:	4806      	ldr	r0, [pc, #24]	; (8002080 <MX_TIM2_Init+0xd0>)
 8002068:	f005 f98a 	bl	8007380 <HAL_TIMEx_MasterConfigSynchronization>
 800206c:	4603      	mov	r3, r0
 800206e:	2b00      	cmp	r3, #0
 8002070:	d001      	beq.n	8002076 <MX_TIM2_Init+0xc6>
  {
    Error_Handler();
 8002072:	f7ff fc73 	bl	800195c <Error_Handler>
  }

}
 8002076:	bf00      	nop
 8002078:	3730      	adds	r7, #48	; 0x30
 800207a:	46bd      	mov	sp, r7
 800207c:	bd80      	pop	{r7, pc}
 800207e:	bf00      	nop
 8002080:	20000fc4 	.word	0x20000fc4

08002084 <MX_TIM5_Init>:
/* TIM5 init function */
void MX_TIM5_Init(void)
{
 8002084:	b580      	push	{r7, lr}
 8002086:	b088      	sub	sp, #32
 8002088:	af00      	add	r7, sp, #0
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800208a:	f107 0310 	add.w	r3, r7, #16
 800208e:	2200      	movs	r2, #0
 8002090:	601a      	str	r2, [r3, #0]
 8002092:	605a      	str	r2, [r3, #4]
 8002094:	609a      	str	r2, [r3, #8]
 8002096:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002098:	1d3b      	adds	r3, r7, #4
 800209a:	2200      	movs	r2, #0
 800209c:	601a      	str	r2, [r3, #0]
 800209e:	605a      	str	r2, [r3, #4]
 80020a0:	609a      	str	r2, [r3, #8]

  htim5.Instance = TIM5;
 80020a2:	4b1e      	ldr	r3, [pc, #120]	; (800211c <MX_TIM5_Init+0x98>)
 80020a4:	4a1e      	ldr	r2, [pc, #120]	; (8002120 <MX_TIM5_Init+0x9c>)
 80020a6:	601a      	str	r2, [r3, #0]
  htim5.Init.Prescaler = 65535;
 80020a8:	4b1c      	ldr	r3, [pc, #112]	; (800211c <MX_TIM5_Init+0x98>)
 80020aa:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80020ae:	605a      	str	r2, [r3, #4]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 80020b0:	4b1a      	ldr	r3, [pc, #104]	; (800211c <MX_TIM5_Init+0x98>)
 80020b2:	2200      	movs	r2, #0
 80020b4:	609a      	str	r2, [r3, #8]
  htim5.Init.Period = 65535;
 80020b6:	4b19      	ldr	r3, [pc, #100]	; (800211c <MX_TIM5_Init+0x98>)
 80020b8:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80020bc:	60da      	str	r2, [r3, #12]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV4;
 80020be:	4b17      	ldr	r3, [pc, #92]	; (800211c <MX_TIM5_Init+0x98>)
 80020c0:	f44f 7200 	mov.w	r2, #512	; 0x200
 80020c4:	611a      	str	r2, [r3, #16]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80020c6:	4b15      	ldr	r3, [pc, #84]	; (800211c <MX_TIM5_Init+0x98>)
 80020c8:	2200      	movs	r2, #0
 80020ca:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim5) != HAL_OK)
 80020cc:	4813      	ldr	r0, [pc, #76]	; (800211c <MX_TIM5_Init+0x98>)
 80020ce:	f004 fae4 	bl	800669a <HAL_TIM_Base_Init>
 80020d2:	4603      	mov	r3, r0
 80020d4:	2b00      	cmp	r3, #0
 80020d6:	d001      	beq.n	80020dc <MX_TIM5_Init+0x58>
  {
    Error_Handler();
 80020d8:	f7ff fc40 	bl	800195c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80020dc:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80020e0:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim5, &sClockSourceConfig) != HAL_OK)
 80020e2:	f107 0310 	add.w	r3, r7, #16
 80020e6:	4619      	mov	r1, r3
 80020e8:	480c      	ldr	r0, [pc, #48]	; (800211c <MX_TIM5_Init+0x98>)
 80020ea:	f004 fde5 	bl	8006cb8 <HAL_TIM_ConfigClockSource>
 80020ee:	4603      	mov	r3, r0
 80020f0:	2b00      	cmp	r3, #0
 80020f2:	d001      	beq.n	80020f8 <MX_TIM5_Init+0x74>
  {
    Error_Handler();
 80020f4:	f7ff fc32 	bl	800195c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80020f8:	2300      	movs	r3, #0
 80020fa:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80020fc:	2300      	movs	r3, #0
 80020fe:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 8002100:	1d3b      	adds	r3, r7, #4
 8002102:	4619      	mov	r1, r3
 8002104:	4805      	ldr	r0, [pc, #20]	; (800211c <MX_TIM5_Init+0x98>)
 8002106:	f005 f93b 	bl	8007380 <HAL_TIMEx_MasterConfigSynchronization>
 800210a:	4603      	mov	r3, r0
 800210c:	2b00      	cmp	r3, #0
 800210e:	d001      	beq.n	8002114 <MX_TIM5_Init+0x90>
  {
    Error_Handler();
 8002110:	f7ff fc24 	bl	800195c <Error_Handler>
  }

}
 8002114:	bf00      	nop
 8002116:	3720      	adds	r7, #32
 8002118:	46bd      	mov	sp, r7
 800211a:	bd80      	pop	{r7, pc}
 800211c:	20000f2c 	.word	0x20000f2c
 8002120:	40000c00 	.word	0x40000c00

08002124 <MX_TIM8_Init>:
/* TIM8 init function */
void MX_TIM8_Init(void)
{
 8002124:	b580      	push	{r7, lr}
 8002126:	b094      	sub	sp, #80	; 0x50
 8002128:	af00      	add	r7, sp, #0
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800212a:	f107 0340 	add.w	r3, r7, #64	; 0x40
 800212e:	2200      	movs	r2, #0
 8002130:	601a      	str	r2, [r3, #0]
 8002132:	605a      	str	r2, [r3, #4]
 8002134:	609a      	str	r2, [r3, #8]
 8002136:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002138:	f107 0334 	add.w	r3, r7, #52	; 0x34
 800213c:	2200      	movs	r2, #0
 800213e:	601a      	str	r2, [r3, #0]
 8002140:	605a      	str	r2, [r3, #4]
 8002142:	609a      	str	r2, [r3, #8]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8002144:	463b      	mov	r3, r7
 8002146:	2234      	movs	r2, #52	; 0x34
 8002148:	2100      	movs	r1, #0
 800214a:	4618      	mov	r0, r3
 800214c:	f006 fcfa 	bl	8008b44 <memset>

  htim8.Instance = TIM8;
 8002150:	4b26      	ldr	r3, [pc, #152]	; (80021ec <MX_TIM8_Init+0xc8>)
 8002152:	4a27      	ldr	r2, [pc, #156]	; (80021f0 <MX_TIM8_Init+0xcc>)
 8002154:	601a      	str	r2, [r3, #0]
  htim8.Init.Prescaler = 0;
 8002156:	4b25      	ldr	r3, [pc, #148]	; (80021ec <MX_TIM8_Init+0xc8>)
 8002158:	2200      	movs	r2, #0
 800215a:	605a      	str	r2, [r3, #4]
  htim8.Init.CounterMode = TIM_COUNTERMODE_UP;
 800215c:	4b23      	ldr	r3, [pc, #140]	; (80021ec <MX_TIM8_Init+0xc8>)
 800215e:	2200      	movs	r2, #0
 8002160:	609a      	str	r2, [r3, #8]
  htim8.Init.Period = 1;
 8002162:	4b22      	ldr	r3, [pc, #136]	; (80021ec <MX_TIM8_Init+0xc8>)
 8002164:	2201      	movs	r2, #1
 8002166:	60da      	str	r2, [r3, #12]
  htim8.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002168:	4b20      	ldr	r3, [pc, #128]	; (80021ec <MX_TIM8_Init+0xc8>)
 800216a:	2200      	movs	r2, #0
 800216c:	611a      	str	r2, [r3, #16]
  htim8.Init.RepetitionCounter = 0;
 800216e:	4b1f      	ldr	r3, [pc, #124]	; (80021ec <MX_TIM8_Init+0xc8>)
 8002170:	2200      	movs	r2, #0
 8002172:	615a      	str	r2, [r3, #20]
  htim8.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002174:	4b1d      	ldr	r3, [pc, #116]	; (80021ec <MX_TIM8_Init+0xc8>)
 8002176:	2200      	movs	r2, #0
 8002178:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim8) != HAL_OK)
 800217a:	481c      	ldr	r0, [pc, #112]	; (80021ec <MX_TIM8_Init+0xc8>)
 800217c:	f004 fa8d 	bl	800669a <HAL_TIM_Base_Init>
 8002180:	4603      	mov	r3, r0
 8002182:	2b00      	cmp	r3, #0
 8002184:	d001      	beq.n	800218a <MX_TIM8_Init+0x66>
  {
    Error_Handler();
 8002186:	f7ff fbe9 	bl	800195c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800218a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800218e:	643b      	str	r3, [r7, #64]	; 0x40
  if (HAL_TIM_ConfigClockSource(&htim8, &sClockSourceConfig) != HAL_OK)
 8002190:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8002194:	4619      	mov	r1, r3
 8002196:	4815      	ldr	r0, [pc, #84]	; (80021ec <MX_TIM8_Init+0xc8>)
 8002198:	f004 fd8e 	bl	8006cb8 <HAL_TIM_ConfigClockSource>
 800219c:	4603      	mov	r3, r0
 800219e:	2b00      	cmp	r3, #0
 80021a0:	d001      	beq.n	80021a6 <MX_TIM8_Init+0x82>
  {
    Error_Handler();
 80021a2:	f7ff fbdb 	bl	800195c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 80021a6:	2320      	movs	r3, #32
 80021a8:	637b      	str	r3, [r7, #52]	; 0x34
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 80021aa:	2300      	movs	r3, #0
 80021ac:	63bb      	str	r3, [r7, #56]	; 0x38
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80021ae:	2300      	movs	r3, #0
 80021b0:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_TIMEx_MasterConfigSynchronization(&htim8, &sMasterConfig) != HAL_OK)
 80021b2:	f107 0334 	add.w	r3, r7, #52	; 0x34
 80021b6:	4619      	mov	r1, r3
 80021b8:	480c      	ldr	r0, [pc, #48]	; (80021ec <MX_TIM8_Init+0xc8>)
 80021ba:	f005 f8e1 	bl	8007380 <HAL_TIMEx_MasterConfigSynchronization>
 80021be:	4603      	mov	r3, r0
 80021c0:	2b00      	cmp	r3, #0
 80021c2:	d001      	beq.n	80021c8 <MX_TIM8_Init+0xa4>
  {
    Error_Handler();
 80021c4:	f7ff fbca 	bl	800195c <Error_Handler>
  }
  sBreakDeadTimeConfig.BreakAFMode = TIM_BREAK_AFMODE_INPUT;
 80021c8:	2300      	movs	r3, #0
 80021ca:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.Break2AFMode = TIM_BREAK_AFMODE_INPUT;
 80021cc:	2300      	movs	r3, #0
 80021ce:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim8, &sBreakDeadTimeConfig) != HAL_OK)
 80021d0:	463b      	mov	r3, r7
 80021d2:	4619      	mov	r1, r3
 80021d4:	4805      	ldr	r0, [pc, #20]	; (80021ec <MX_TIM8_Init+0xc8>)
 80021d6:	f005 f969 	bl	80074ac <HAL_TIMEx_ConfigBreakDeadTime>
 80021da:	4603      	mov	r3, r0
 80021dc:	2b00      	cmp	r3, #0
 80021de:	d001      	beq.n	80021e4 <MX_TIM8_Init+0xc0>
  {
    Error_Handler();
 80021e0:	f7ff fbbc 	bl	800195c <Error_Handler>
  }

}
 80021e4:	bf00      	nop
 80021e6:	3750      	adds	r7, #80	; 0x50
 80021e8:	46bd      	mov	sp, r7
 80021ea:	bd80      	pop	{r7, pc}
 80021ec:	20000e48 	.word	0x20000e48
 80021f0:	40013400 	.word	0x40013400

080021f4 <MX_TIM15_Init>:
/* TIM15 init function */
void MX_TIM15_Init(void)
{
 80021f4:	b580      	push	{r7, lr}
 80021f6:	b088      	sub	sp, #32
 80021f8:	af00      	add	r7, sp, #0
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80021fa:	f107 0310 	add.w	r3, r7, #16
 80021fe:	2200      	movs	r2, #0
 8002200:	601a      	str	r2, [r3, #0]
 8002202:	605a      	str	r2, [r3, #4]
 8002204:	609a      	str	r2, [r3, #8]
 8002206:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002208:	1d3b      	adds	r3, r7, #4
 800220a:	2200      	movs	r2, #0
 800220c:	601a      	str	r2, [r3, #0]
 800220e:	605a      	str	r2, [r3, #4]
 8002210:	609a      	str	r2, [r3, #8]

  htim15.Instance = TIM15;
 8002212:	4b1f      	ldr	r3, [pc, #124]	; (8002290 <MX_TIM15_Init+0x9c>)
 8002214:	4a1f      	ldr	r2, [pc, #124]	; (8002294 <MX_TIM15_Init+0xa0>)
 8002216:	601a      	str	r2, [r3, #0]
  htim15.Init.Prescaler = 1024;
 8002218:	4b1d      	ldr	r3, [pc, #116]	; (8002290 <MX_TIM15_Init+0x9c>)
 800221a:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800221e:	605a      	str	r2, [r3, #4]
  htim15.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002220:	4b1b      	ldr	r3, [pc, #108]	; (8002290 <MX_TIM15_Init+0x9c>)
 8002222:	2200      	movs	r2, #0
 8002224:	609a      	str	r2, [r3, #8]
  htim15.Init.Period = 1024;
 8002226:	4b1a      	ldr	r3, [pc, #104]	; (8002290 <MX_TIM15_Init+0x9c>)
 8002228:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800222c:	60da      	str	r2, [r3, #12]
  htim15.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800222e:	4b18      	ldr	r3, [pc, #96]	; (8002290 <MX_TIM15_Init+0x9c>)
 8002230:	2200      	movs	r2, #0
 8002232:	611a      	str	r2, [r3, #16]
  htim15.Init.RepetitionCounter = 0;
 8002234:	4b16      	ldr	r3, [pc, #88]	; (8002290 <MX_TIM15_Init+0x9c>)
 8002236:	2200      	movs	r2, #0
 8002238:	615a      	str	r2, [r3, #20]
  htim15.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800223a:	4b15      	ldr	r3, [pc, #84]	; (8002290 <MX_TIM15_Init+0x9c>)
 800223c:	2200      	movs	r2, #0
 800223e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim15) != HAL_OK)
 8002240:	4813      	ldr	r0, [pc, #76]	; (8002290 <MX_TIM15_Init+0x9c>)
 8002242:	f004 fa2a 	bl	800669a <HAL_TIM_Base_Init>
 8002246:	4603      	mov	r3, r0
 8002248:	2b00      	cmp	r3, #0
 800224a:	d001      	beq.n	8002250 <MX_TIM15_Init+0x5c>
  {
    Error_Handler();
 800224c:	f7ff fb86 	bl	800195c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002250:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002254:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim15, &sClockSourceConfig) != HAL_OK)
 8002256:	f107 0310 	add.w	r3, r7, #16
 800225a:	4619      	mov	r1, r3
 800225c:	480c      	ldr	r0, [pc, #48]	; (8002290 <MX_TIM15_Init+0x9c>)
 800225e:	f004 fd2b 	bl	8006cb8 <HAL_TIM_ConfigClockSource>
 8002262:	4603      	mov	r3, r0
 8002264:	2b00      	cmp	r3, #0
 8002266:	d001      	beq.n	800226c <MX_TIM15_Init+0x78>
  {
    Error_Handler();
 8002268:	f7ff fb78 	bl	800195c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800226c:	2300      	movs	r3, #0
 800226e:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002270:	2300      	movs	r3, #0
 8002272:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim15, &sMasterConfig) != HAL_OK)
 8002274:	1d3b      	adds	r3, r7, #4
 8002276:	4619      	mov	r1, r3
 8002278:	4805      	ldr	r0, [pc, #20]	; (8002290 <MX_TIM15_Init+0x9c>)
 800227a:	f005 f881 	bl	8007380 <HAL_TIMEx_MasterConfigSynchronization>
 800227e:	4603      	mov	r3, r0
 8002280:	2b00      	cmp	r3, #0
 8002282:	d001      	beq.n	8002288 <MX_TIM15_Init+0x94>
  {
    Error_Handler();
 8002284:	f7ff fb6a 	bl	800195c <Error_Handler>
  }

}
 8002288:	bf00      	nop
 800228a:	3720      	adds	r7, #32
 800228c:	46bd      	mov	sp, r7
 800228e:	bd80      	pop	{r7, pc}
 8002290:	20000e94 	.word	0x20000e94
 8002294:	40014000 	.word	0x40014000

08002298 <MX_TIM16_Init>:
/* TIM16 init function */
void MX_TIM16_Init(void)
{
 8002298:	b580      	push	{r7, lr}
 800229a:	af00      	add	r7, sp, #0

  htim16.Instance = TIM16;
 800229c:	4b0f      	ldr	r3, [pc, #60]	; (80022dc <MX_TIM16_Init+0x44>)
 800229e:	4a10      	ldr	r2, [pc, #64]	; (80022e0 <MX_TIM16_Init+0x48>)
 80022a0:	601a      	str	r2, [r3, #0]
  htim16.Init.Prescaler = 0;
 80022a2:	4b0e      	ldr	r3, [pc, #56]	; (80022dc <MX_TIM16_Init+0x44>)
 80022a4:	2200      	movs	r2, #0
 80022a6:	605a      	str	r2, [r3, #4]
  htim16.Init.CounterMode = TIM_COUNTERMODE_UP;
 80022a8:	4b0c      	ldr	r3, [pc, #48]	; (80022dc <MX_TIM16_Init+0x44>)
 80022aa:	2200      	movs	r2, #0
 80022ac:	609a      	str	r2, [r3, #8]
  htim16.Init.Period = 8191;
 80022ae:	4b0b      	ldr	r3, [pc, #44]	; (80022dc <MX_TIM16_Init+0x44>)
 80022b0:	f641 72ff 	movw	r2, #8191	; 0x1fff
 80022b4:	60da      	str	r2, [r3, #12]
  htim16.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80022b6:	4b09      	ldr	r3, [pc, #36]	; (80022dc <MX_TIM16_Init+0x44>)
 80022b8:	2200      	movs	r2, #0
 80022ba:	611a      	str	r2, [r3, #16]
  htim16.Init.RepetitionCounter = 0;
 80022bc:	4b07      	ldr	r3, [pc, #28]	; (80022dc <MX_TIM16_Init+0x44>)
 80022be:	2200      	movs	r2, #0
 80022c0:	615a      	str	r2, [r3, #20]
  htim16.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80022c2:	4b06      	ldr	r3, [pc, #24]	; (80022dc <MX_TIM16_Init+0x44>)
 80022c4:	2200      	movs	r2, #0
 80022c6:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim16) != HAL_OK)
 80022c8:	4804      	ldr	r0, [pc, #16]	; (80022dc <MX_TIM16_Init+0x44>)
 80022ca:	f004 f9e6 	bl	800669a <HAL_TIM_Base_Init>
 80022ce:	4603      	mov	r3, r0
 80022d0:	2b00      	cmp	r3, #0
 80022d2:	d001      	beq.n	80022d8 <MX_TIM16_Init+0x40>
  {
    Error_Handler();
 80022d4:	f7ff fb42 	bl	800195c <Error_Handler>
  }

}
 80022d8:	bf00      	nop
 80022da:	bd80      	pop	{r7, pc}
 80022dc:	20001010 	.word	0x20001010
 80022e0:	40014400 	.word	0x40014400

080022e4 <MX_TIM17_Init>:
/* TIM17 init function */
void MX_TIM17_Init(void)
{
 80022e4:	b580      	push	{r7, lr}
 80022e6:	af00      	add	r7, sp, #0

  htim17.Instance = TIM17;
 80022e8:	4b0f      	ldr	r3, [pc, #60]	; (8002328 <MX_TIM17_Init+0x44>)
 80022ea:	4a10      	ldr	r2, [pc, #64]	; (800232c <MX_TIM17_Init+0x48>)
 80022ec:	601a      	str	r2, [r3, #0]
  htim17.Init.Prescaler = 1023;
 80022ee:	4b0e      	ldr	r3, [pc, #56]	; (8002328 <MX_TIM17_Init+0x44>)
 80022f0:	f240 32ff 	movw	r2, #1023	; 0x3ff
 80022f4:	605a      	str	r2, [r3, #4]
  htim17.Init.CounterMode = TIM_COUNTERMODE_UP;
 80022f6:	4b0c      	ldr	r3, [pc, #48]	; (8002328 <MX_TIM17_Init+0x44>)
 80022f8:	2200      	movs	r2, #0
 80022fa:	609a      	str	r2, [r3, #8]
  htim17.Init.Period = 64;
 80022fc:	4b0a      	ldr	r3, [pc, #40]	; (8002328 <MX_TIM17_Init+0x44>)
 80022fe:	2240      	movs	r2, #64	; 0x40
 8002300:	60da      	str	r2, [r3, #12]
  htim17.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002302:	4b09      	ldr	r3, [pc, #36]	; (8002328 <MX_TIM17_Init+0x44>)
 8002304:	2200      	movs	r2, #0
 8002306:	611a      	str	r2, [r3, #16]
  htim17.Init.RepetitionCounter = 0;
 8002308:	4b07      	ldr	r3, [pc, #28]	; (8002328 <MX_TIM17_Init+0x44>)
 800230a:	2200      	movs	r2, #0
 800230c:	615a      	str	r2, [r3, #20]
  htim17.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800230e:	4b06      	ldr	r3, [pc, #24]	; (8002328 <MX_TIM17_Init+0x44>)
 8002310:	2200      	movs	r2, #0
 8002312:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim17) != HAL_OK)
 8002314:	4804      	ldr	r0, [pc, #16]	; (8002328 <MX_TIM17_Init+0x44>)
 8002316:	f004 f9c0 	bl	800669a <HAL_TIM_Base_Init>
 800231a:	4603      	mov	r3, r0
 800231c:	2b00      	cmp	r3, #0
 800231e:	d001      	beq.n	8002324 <MX_TIM17_Init+0x40>
  {
    Error_Handler();
 8002320:	f7ff fb1c 	bl	800195c <Error_Handler>
  }

}
 8002324:	bf00      	nop
 8002326:	bd80      	pop	{r7, pc}
 8002328:	20000ee0 	.word	0x20000ee0
 800232c:	40014800 	.word	0x40014800

08002330 <HAL_TIM_Encoder_MspInit>:

void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* tim_encoderHandle)
{
 8002330:	b580      	push	{r7, lr}
 8002332:	b08a      	sub	sp, #40	; 0x28
 8002334:	af00      	add	r7, sp, #0
 8002336:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002338:	f107 0314 	add.w	r3, r7, #20
 800233c:	2200      	movs	r2, #0
 800233e:	601a      	str	r2, [r3, #0]
 8002340:	605a      	str	r2, [r3, #4]
 8002342:	609a      	str	r2, [r3, #8]
 8002344:	60da      	str	r2, [r3, #12]
 8002346:	611a      	str	r2, [r3, #16]
  if(tim_encoderHandle->Instance==TIM1)
 8002348:	687b      	ldr	r3, [r7, #4]
 800234a:	681b      	ldr	r3, [r3, #0]
 800234c:	4a23      	ldr	r2, [pc, #140]	; (80023dc <HAL_TIM_Encoder_MspInit+0xac>)
 800234e:	4293      	cmp	r3, r2
 8002350:	d13f      	bne.n	80023d2 <HAL_TIM_Encoder_MspInit+0xa2>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8002352:	4b23      	ldr	r3, [pc, #140]	; (80023e0 <HAL_TIM_Encoder_MspInit+0xb0>)
 8002354:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002356:	4a22      	ldr	r2, [pc, #136]	; (80023e0 <HAL_TIM_Encoder_MspInit+0xb0>)
 8002358:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 800235c:	6613      	str	r3, [r2, #96]	; 0x60
 800235e:	4b20      	ldr	r3, [pc, #128]	; (80023e0 <HAL_TIM_Encoder_MspInit+0xb0>)
 8002360:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002362:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002366:	613b      	str	r3, [r7, #16]
 8002368:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800236a:	4b1d      	ldr	r3, [pc, #116]	; (80023e0 <HAL_TIM_Encoder_MspInit+0xb0>)
 800236c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800236e:	4a1c      	ldr	r2, [pc, #112]	; (80023e0 <HAL_TIM_Encoder_MspInit+0xb0>)
 8002370:	f043 0304 	orr.w	r3, r3, #4
 8002374:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002376:	4b1a      	ldr	r3, [pc, #104]	; (80023e0 <HAL_TIM_Encoder_MspInit+0xb0>)
 8002378:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800237a:	f003 0304 	and.w	r3, r3, #4
 800237e:	60fb      	str	r3, [r7, #12]
 8002380:	68fb      	ldr	r3, [r7, #12]
    /**TIM1 GPIO Configuration    
    PC0     ------> TIM1_CH1
    PC1     ------> TIM1_CH2 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8002382:	2303      	movs	r3, #3
 8002384:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002386:	2302      	movs	r3, #2
 8002388:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800238a:	2300      	movs	r3, #0
 800238c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800238e:	2300      	movs	r3, #0
 8002390:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM1;
 8002392:	2302      	movs	r3, #2
 8002394:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002396:	f107 0314 	add.w	r3, r7, #20
 800239a:	4619      	mov	r1, r3
 800239c:	4811      	ldr	r0, [pc, #68]	; (80023e4 <HAL_TIM_Encoder_MspInit+0xb4>)
 800239e:	f002 fcbd 	bl	8004d1c <HAL_GPIO_Init>

    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_BRK_TIM15_IRQn, 0, 0);
 80023a2:	2200      	movs	r2, #0
 80023a4:	2100      	movs	r1, #0
 80023a6:	2018      	movs	r0, #24
 80023a8:	f001 fdb9 	bl	8003f1e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_BRK_TIM15_IRQn);
 80023ac:	2018      	movs	r0, #24
 80023ae:	f001 fdd0 	bl	8003f52 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM1_UP_TIM16_IRQn, 1, 0);
 80023b2:	2200      	movs	r2, #0
 80023b4:	2101      	movs	r1, #1
 80023b6:	2019      	movs	r0, #25
 80023b8:	f001 fdb1 	bl	8003f1e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM16_IRQn);
 80023bc:	2019      	movs	r0, #25
 80023be:	f001 fdc8 	bl	8003f52 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM1_TRG_COM_TIM17_IRQn, 1, 0);
 80023c2:	2200      	movs	r2, #0
 80023c4:	2101      	movs	r1, #1
 80023c6:	201a      	movs	r0, #26
 80023c8:	f001 fda9 	bl	8003f1e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_TRG_COM_TIM17_IRQn);
 80023cc:	201a      	movs	r0, #26
 80023ce:	f001 fdc0 	bl	8003f52 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }
}
 80023d2:	bf00      	nop
 80023d4:	3728      	adds	r7, #40	; 0x28
 80023d6:	46bd      	mov	sp, r7
 80023d8:	bd80      	pop	{r7, pc}
 80023da:	bf00      	nop
 80023dc:	40012c00 	.word	0x40012c00
 80023e0:	40021000 	.word	0x40021000
 80023e4:	48000800 	.word	0x48000800

080023e8 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 80023e8:	b580      	push	{r7, lr}
 80023ea:	b08e      	sub	sp, #56	; 0x38
 80023ec:	af00      	add	r7, sp, #0
 80023ee:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80023f0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80023f4:	2200      	movs	r2, #0
 80023f6:	601a      	str	r2, [r3, #0]
 80023f8:	605a      	str	r2, [r3, #4]
 80023fa:	609a      	str	r2, [r3, #8]
 80023fc:	60da      	str	r2, [r3, #12]
 80023fe:	611a      	str	r2, [r3, #16]
  if(tim_baseHandle->Instance==TIM2)
 8002400:	687b      	ldr	r3, [r7, #4]
 8002402:	681b      	ldr	r3, [r3, #0]
 8002404:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002408:	d131      	bne.n	800246e <HAL_TIM_Base_MspInit+0x86>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 800240a:	4b53      	ldr	r3, [pc, #332]	; (8002558 <HAL_TIM_Base_MspInit+0x170>)
 800240c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800240e:	4a52      	ldr	r2, [pc, #328]	; (8002558 <HAL_TIM_Base_MspInit+0x170>)
 8002410:	f043 0301 	orr.w	r3, r3, #1
 8002414:	6593      	str	r3, [r2, #88]	; 0x58
 8002416:	4b50      	ldr	r3, [pc, #320]	; (8002558 <HAL_TIM_Base_MspInit+0x170>)
 8002418:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800241a:	f003 0301 	and.w	r3, r3, #1
 800241e:	623b      	str	r3, [r7, #32]
 8002420:	6a3b      	ldr	r3, [r7, #32]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002422:	4b4d      	ldr	r3, [pc, #308]	; (8002558 <HAL_TIM_Base_MspInit+0x170>)
 8002424:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002426:	4a4c      	ldr	r2, [pc, #304]	; (8002558 <HAL_TIM_Base_MspInit+0x170>)
 8002428:	f043 0301 	orr.w	r3, r3, #1
 800242c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800242e:	4b4a      	ldr	r3, [pc, #296]	; (8002558 <HAL_TIM_Base_MspInit+0x170>)
 8002430:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002432:	f003 0301 	and.w	r3, r3, #1
 8002436:	61fb      	str	r3, [r7, #28]
 8002438:	69fb      	ldr	r3, [r7, #28]
    /**TIM2 GPIO Configuration    
    PA0     ------> TIM2_CH1 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 800243a:	2301      	movs	r3, #1
 800243c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800243e:	2302      	movs	r3, #2
 8002440:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002442:	2300      	movs	r3, #0
 8002444:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002446:	2300      	movs	r3, #0
 8002448:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 800244a:	2301      	movs	r3, #1
 800244c:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800244e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002452:	4619      	mov	r1, r3
 8002454:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002458:	f002 fc60 	bl	8004d1c <HAL_GPIO_Init>

    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 1, 0);
 800245c:	2200      	movs	r2, #0
 800245e:	2101      	movs	r1, #1
 8002460:	201c      	movs	r0, #28
 8002462:	f001 fd5c 	bl	8003f1e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8002466:	201c      	movs	r0, #28
 8002468:	f001 fd73 	bl	8003f52 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(TIM1_TRG_COM_TIM17_IRQn);
  /* USER CODE BEGIN TIM17_MspInit 1 */

  /* USER CODE END TIM17_MspInit 1 */
  }
}
 800246c:	e070      	b.n	8002550 <HAL_TIM_Base_MspInit+0x168>
  else if(tim_baseHandle->Instance==TIM5)
 800246e:	687b      	ldr	r3, [r7, #4]
 8002470:	681b      	ldr	r3, [r3, #0]
 8002472:	4a3a      	ldr	r2, [pc, #232]	; (800255c <HAL_TIM_Base_MspInit+0x174>)
 8002474:	4293      	cmp	r3, r2
 8002476:	d10c      	bne.n	8002492 <HAL_TIM_Base_MspInit+0xaa>
    __HAL_RCC_TIM5_CLK_ENABLE();
 8002478:	4b37      	ldr	r3, [pc, #220]	; (8002558 <HAL_TIM_Base_MspInit+0x170>)
 800247a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800247c:	4a36      	ldr	r2, [pc, #216]	; (8002558 <HAL_TIM_Base_MspInit+0x170>)
 800247e:	f043 0308 	orr.w	r3, r3, #8
 8002482:	6593      	str	r3, [r2, #88]	; 0x58
 8002484:	4b34      	ldr	r3, [pc, #208]	; (8002558 <HAL_TIM_Base_MspInit+0x170>)
 8002486:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002488:	f003 0308 	and.w	r3, r3, #8
 800248c:	61bb      	str	r3, [r7, #24]
 800248e:	69bb      	ldr	r3, [r7, #24]
}
 8002490:	e05e      	b.n	8002550 <HAL_TIM_Base_MspInit+0x168>
  else if(tim_baseHandle->Instance==TIM8)
 8002492:	687b      	ldr	r3, [r7, #4]
 8002494:	681b      	ldr	r3, [r3, #0]
 8002496:	4a32      	ldr	r2, [pc, #200]	; (8002560 <HAL_TIM_Base_MspInit+0x178>)
 8002498:	4293      	cmp	r3, r2
 800249a:	d10c      	bne.n	80024b6 <HAL_TIM_Base_MspInit+0xce>
    __HAL_RCC_TIM8_CLK_ENABLE();
 800249c:	4b2e      	ldr	r3, [pc, #184]	; (8002558 <HAL_TIM_Base_MspInit+0x170>)
 800249e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80024a0:	4a2d      	ldr	r2, [pc, #180]	; (8002558 <HAL_TIM_Base_MspInit+0x170>)
 80024a2:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80024a6:	6613      	str	r3, [r2, #96]	; 0x60
 80024a8:	4b2b      	ldr	r3, [pc, #172]	; (8002558 <HAL_TIM_Base_MspInit+0x170>)
 80024aa:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80024ac:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80024b0:	617b      	str	r3, [r7, #20]
 80024b2:	697b      	ldr	r3, [r7, #20]
}
 80024b4:	e04c      	b.n	8002550 <HAL_TIM_Base_MspInit+0x168>
  else if(tim_baseHandle->Instance==TIM15)
 80024b6:	687b      	ldr	r3, [r7, #4]
 80024b8:	681b      	ldr	r3, [r3, #0]
 80024ba:	4a2a      	ldr	r2, [pc, #168]	; (8002564 <HAL_TIM_Base_MspInit+0x17c>)
 80024bc:	4293      	cmp	r3, r2
 80024be:	d114      	bne.n	80024ea <HAL_TIM_Base_MspInit+0x102>
    __HAL_RCC_TIM15_CLK_ENABLE();
 80024c0:	4b25      	ldr	r3, [pc, #148]	; (8002558 <HAL_TIM_Base_MspInit+0x170>)
 80024c2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80024c4:	4a24      	ldr	r2, [pc, #144]	; (8002558 <HAL_TIM_Base_MspInit+0x170>)
 80024c6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80024ca:	6613      	str	r3, [r2, #96]	; 0x60
 80024cc:	4b22      	ldr	r3, [pc, #136]	; (8002558 <HAL_TIM_Base_MspInit+0x170>)
 80024ce:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80024d0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80024d4:	613b      	str	r3, [r7, #16]
 80024d6:	693b      	ldr	r3, [r7, #16]
    HAL_NVIC_SetPriority(TIM1_BRK_TIM15_IRQn, 0, 0);
 80024d8:	2200      	movs	r2, #0
 80024da:	2100      	movs	r1, #0
 80024dc:	2018      	movs	r0, #24
 80024de:	f001 fd1e 	bl	8003f1e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_BRK_TIM15_IRQn);
 80024e2:	2018      	movs	r0, #24
 80024e4:	f001 fd35 	bl	8003f52 <HAL_NVIC_EnableIRQ>
}
 80024e8:	e032      	b.n	8002550 <HAL_TIM_Base_MspInit+0x168>
  else if(tim_baseHandle->Instance==TIM16)
 80024ea:	687b      	ldr	r3, [r7, #4]
 80024ec:	681b      	ldr	r3, [r3, #0]
 80024ee:	4a1e      	ldr	r2, [pc, #120]	; (8002568 <HAL_TIM_Base_MspInit+0x180>)
 80024f0:	4293      	cmp	r3, r2
 80024f2:	d114      	bne.n	800251e <HAL_TIM_Base_MspInit+0x136>
    __HAL_RCC_TIM16_CLK_ENABLE();
 80024f4:	4b18      	ldr	r3, [pc, #96]	; (8002558 <HAL_TIM_Base_MspInit+0x170>)
 80024f6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80024f8:	4a17      	ldr	r2, [pc, #92]	; (8002558 <HAL_TIM_Base_MspInit+0x170>)
 80024fa:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80024fe:	6613      	str	r3, [r2, #96]	; 0x60
 8002500:	4b15      	ldr	r3, [pc, #84]	; (8002558 <HAL_TIM_Base_MspInit+0x170>)
 8002502:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002504:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002508:	60fb      	str	r3, [r7, #12]
 800250a:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_SetPriority(TIM1_UP_TIM16_IRQn, 1, 0);
 800250c:	2200      	movs	r2, #0
 800250e:	2101      	movs	r1, #1
 8002510:	2019      	movs	r0, #25
 8002512:	f001 fd04 	bl	8003f1e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM16_IRQn);
 8002516:	2019      	movs	r0, #25
 8002518:	f001 fd1b 	bl	8003f52 <HAL_NVIC_EnableIRQ>
}
 800251c:	e018      	b.n	8002550 <HAL_TIM_Base_MspInit+0x168>
  else if(tim_baseHandle->Instance==TIM17)
 800251e:	687b      	ldr	r3, [r7, #4]
 8002520:	681b      	ldr	r3, [r3, #0]
 8002522:	4a12      	ldr	r2, [pc, #72]	; (800256c <HAL_TIM_Base_MspInit+0x184>)
 8002524:	4293      	cmp	r3, r2
 8002526:	d113      	bne.n	8002550 <HAL_TIM_Base_MspInit+0x168>
    __HAL_RCC_TIM17_CLK_ENABLE();
 8002528:	4b0b      	ldr	r3, [pc, #44]	; (8002558 <HAL_TIM_Base_MspInit+0x170>)
 800252a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800252c:	4a0a      	ldr	r2, [pc, #40]	; (8002558 <HAL_TIM_Base_MspInit+0x170>)
 800252e:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002532:	6613      	str	r3, [r2, #96]	; 0x60
 8002534:	4b08      	ldr	r3, [pc, #32]	; (8002558 <HAL_TIM_Base_MspInit+0x170>)
 8002536:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002538:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800253c:	60bb      	str	r3, [r7, #8]
 800253e:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM1_TRG_COM_TIM17_IRQn, 1, 0);
 8002540:	2200      	movs	r2, #0
 8002542:	2101      	movs	r1, #1
 8002544:	201a      	movs	r0, #26
 8002546:	f001 fcea 	bl	8003f1e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_TRG_COM_TIM17_IRQn);
 800254a:	201a      	movs	r0, #26
 800254c:	f001 fd01 	bl	8003f52 <HAL_NVIC_EnableIRQ>
}
 8002550:	bf00      	nop
 8002552:	3738      	adds	r7, #56	; 0x38
 8002554:	46bd      	mov	sp, r7
 8002556:	bd80      	pop	{r7, pc}
 8002558:	40021000 	.word	0x40021000
 800255c:	40000c00 	.word	0x40000c00
 8002560:	40013400 	.word	0x40013400
 8002564:	40014000 	.word	0x40014000
 8002568:	40014400 	.word	0x40014400
 800256c:	40014800 	.word	0x40014800

08002570 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8002570:	480d      	ldr	r0, [pc, #52]	; (80025a8 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8002572:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8002574:	480d      	ldr	r0, [pc, #52]	; (80025ac <LoopForever+0x6>)
  ldr r1, =_edata
 8002576:	490e      	ldr	r1, [pc, #56]	; (80025b0 <LoopForever+0xa>)
  ldr r2, =_sidata
 8002578:	4a0e      	ldr	r2, [pc, #56]	; (80025b4 <LoopForever+0xe>)
  movs r3, #0
 800257a:	2300      	movs	r3, #0
  b	LoopCopyDataInit
 800257c:	e002      	b.n	8002584 <LoopCopyDataInit>

0800257e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800257e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002580:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002582:	3304      	adds	r3, #4

08002584 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002584:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002586:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002588:	d3f9      	bcc.n	800257e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800258a:	4a0b      	ldr	r2, [pc, #44]	; (80025b8 <LoopForever+0x12>)
  ldr r4, =_ebss
 800258c:	4c0b      	ldr	r4, [pc, #44]	; (80025bc <LoopForever+0x16>)
  movs r3, #0
 800258e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002590:	e001      	b.n	8002596 <LoopFillZerobss>

08002592 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002592:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002594:	3204      	adds	r2, #4

08002596 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002596:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002598:	d3fb      	bcc.n	8002592 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 800259a:	f7ff fc83 	bl	8001ea4 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800259e:	f006 faad 	bl	8008afc <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 80025a2:	f7ff f8c7 	bl	8001734 <main>

080025a6 <LoopForever>:

LoopForever:
    b LoopForever
 80025a6:	e7fe      	b.n	80025a6 <LoopForever>
  ldr   r0, =_estack
 80025a8:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80025ac:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80025b0:	20000bc4 	.word	0x20000bc4
  ldr r2, =_sidata
 80025b4:	080098a4 	.word	0x080098a4
  ldr r2, =_sbss
 80025b8:	20000bc4 	.word	0x20000bc4
  ldr r4, =_ebss
 80025bc:	20001064 	.word	0x20001064

080025c0 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 80025c0:	e7fe      	b.n	80025c0 <ADC1_2_IRQHandler>

080025c2 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80025c2:	b580      	push	{r7, lr}
 80025c4:	b082      	sub	sp, #8
 80025c6:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 80025c8:	2300      	movs	r3, #0
 80025ca:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80025cc:	2003      	movs	r0, #3
 80025ce:	f001 fc9b 	bl	8003f08 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80025d2:	2000      	movs	r0, #0
 80025d4:	f000 f80e 	bl	80025f4 <HAL_InitTick>
 80025d8:	4603      	mov	r3, r0
 80025da:	2b00      	cmp	r3, #0
 80025dc:	d002      	beq.n	80025e4 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 80025de:	2301      	movs	r3, #1
 80025e0:	71fb      	strb	r3, [r7, #7]
 80025e2:	e001      	b.n	80025e8 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 80025e4:	f7ff fa8a 	bl	8001afc <HAL_MspInit>
  }

  /* Return function status */
  return status;
 80025e8:	79fb      	ldrb	r3, [r7, #7]

}
 80025ea:	4618      	mov	r0, r3
 80025ec:	3708      	adds	r7, #8
 80025ee:	46bd      	mov	sp, r7
 80025f0:	bd80      	pop	{r7, pc}
	...

080025f4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80025f4:	b580      	push	{r7, lr}
 80025f6:	b084      	sub	sp, #16
 80025f8:	af00      	add	r7, sp, #0
 80025fa:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 80025fc:	2300      	movs	r3, #0
 80025fe:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 8002600:	4b16      	ldr	r3, [pc, #88]	; (800265c <HAL_InitTick+0x68>)
 8002602:	681b      	ldr	r3, [r3, #0]
 8002604:	2b00      	cmp	r3, #0
 8002606:	d022      	beq.n	800264e <HAL_InitTick+0x5a>
  {
    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 8002608:	4b15      	ldr	r3, [pc, #84]	; (8002660 <HAL_InitTick+0x6c>)
 800260a:	681a      	ldr	r2, [r3, #0]
 800260c:	4b13      	ldr	r3, [pc, #76]	; (800265c <HAL_InitTick+0x68>)
 800260e:	681b      	ldr	r3, [r3, #0]
 8002610:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8002614:	fbb1 f3f3 	udiv	r3, r1, r3
 8002618:	fbb2 f3f3 	udiv	r3, r2, r3
 800261c:	4618      	mov	r0, r3
 800261e:	f001 fca6 	bl	8003f6e <HAL_SYSTICK_Config>
 8002622:	4603      	mov	r3, r0
 8002624:	2b00      	cmp	r3, #0
 8002626:	d10f      	bne.n	8002648 <HAL_InitTick+0x54>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002628:	687b      	ldr	r3, [r7, #4]
 800262a:	2b0f      	cmp	r3, #15
 800262c:	d809      	bhi.n	8002642 <HAL_InitTick+0x4e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800262e:	2200      	movs	r2, #0
 8002630:	6879      	ldr	r1, [r7, #4]
 8002632:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8002636:	f001 fc72 	bl	8003f1e <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 800263a:	4a0a      	ldr	r2, [pc, #40]	; (8002664 <HAL_InitTick+0x70>)
 800263c:	687b      	ldr	r3, [r7, #4]
 800263e:	6013      	str	r3, [r2, #0]
 8002640:	e007      	b.n	8002652 <HAL_InitTick+0x5e>
      }
      else
      {
        status = HAL_ERROR;
 8002642:	2301      	movs	r3, #1
 8002644:	73fb      	strb	r3, [r7, #15]
 8002646:	e004      	b.n	8002652 <HAL_InitTick+0x5e>
      }
    }
    else
    {
      status = HAL_ERROR;
 8002648:	2301      	movs	r3, #1
 800264a:	73fb      	strb	r3, [r7, #15]
 800264c:	e001      	b.n	8002652 <HAL_InitTick+0x5e>
    }
  }
  else
  {
    status = HAL_ERROR;
 800264e:	2301      	movs	r3, #1
 8002650:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8002652:	7bfb      	ldrb	r3, [r7, #15]
}
 8002654:	4618      	mov	r0, r3
 8002656:	3710      	adds	r7, #16
 8002658:	46bd      	mov	sp, r7
 800265a:	bd80      	pop	{r7, pc}
 800265c:	20000014 	.word	0x20000014
 8002660:	2000000c 	.word	0x2000000c
 8002664:	20000010 	.word	0x20000010

08002668 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002668:	b480      	push	{r7}
 800266a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800266c:	4b05      	ldr	r3, [pc, #20]	; (8002684 <HAL_IncTick+0x1c>)
 800266e:	681a      	ldr	r2, [r3, #0]
 8002670:	4b05      	ldr	r3, [pc, #20]	; (8002688 <HAL_IncTick+0x20>)
 8002672:	681b      	ldr	r3, [r3, #0]
 8002674:	4413      	add	r3, r2
 8002676:	4a03      	ldr	r2, [pc, #12]	; (8002684 <HAL_IncTick+0x1c>)
 8002678:	6013      	str	r3, [r2, #0]
}
 800267a:	bf00      	nop
 800267c:	46bd      	mov	sp, r7
 800267e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002682:	4770      	bx	lr
 8002684:	2000105c 	.word	0x2000105c
 8002688:	20000014 	.word	0x20000014

0800268c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800268c:	b480      	push	{r7}
 800268e:	af00      	add	r7, sp, #0
  return uwTick;
 8002690:	4b03      	ldr	r3, [pc, #12]	; (80026a0 <HAL_GetTick+0x14>)
 8002692:	681b      	ldr	r3, [r3, #0]
}
 8002694:	4618      	mov	r0, r3
 8002696:	46bd      	mov	sp, r7
 8002698:	f85d 7b04 	ldr.w	r7, [sp], #4
 800269c:	4770      	bx	lr
 800269e:	bf00      	nop
 80026a0:	2000105c 	.word	0x2000105c

080026a4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80026a4:	b580      	push	{r7, lr}
 80026a6:	b084      	sub	sp, #16
 80026a8:	af00      	add	r7, sp, #0
 80026aa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80026ac:	f7ff ffee 	bl	800268c <HAL_GetTick>
 80026b0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80026b2:	687b      	ldr	r3, [r7, #4]
 80026b4:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80026b6:	68fb      	ldr	r3, [r7, #12]
 80026b8:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80026bc:	d004      	beq.n	80026c8 <HAL_Delay+0x24>
  {
    wait += (uint32_t)(uwTickFreq);
 80026be:	4b09      	ldr	r3, [pc, #36]	; (80026e4 <HAL_Delay+0x40>)
 80026c0:	681b      	ldr	r3, [r3, #0]
 80026c2:	68fa      	ldr	r2, [r7, #12]
 80026c4:	4413      	add	r3, r2
 80026c6:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80026c8:	bf00      	nop
 80026ca:	f7ff ffdf 	bl	800268c <HAL_GetTick>
 80026ce:	4602      	mov	r2, r0
 80026d0:	68bb      	ldr	r3, [r7, #8]
 80026d2:	1ad3      	subs	r3, r2, r3
 80026d4:	68fa      	ldr	r2, [r7, #12]
 80026d6:	429a      	cmp	r2, r3
 80026d8:	d8f7      	bhi.n	80026ca <HAL_Delay+0x26>
  {
  }
}
 80026da:	bf00      	nop
 80026dc:	3710      	adds	r7, #16
 80026de:	46bd      	mov	sp, r7
 80026e0:	bd80      	pop	{r7, pc}
 80026e2:	bf00      	nop
 80026e4:	20000014 	.word	0x20000014

080026e8 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 80026e8:	b480      	push	{r7}
 80026ea:	b083      	sub	sp, #12
 80026ec:	af00      	add	r7, sp, #0
 80026ee:	6078      	str	r0, [r7, #4]
 80026f0:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 80026f2:	687b      	ldr	r3, [r7, #4]
 80026f4:	689b      	ldr	r3, [r3, #8]
 80026f6:	f423 127c 	bic.w	r2, r3, #4128768	; 0x3f0000
 80026fa:	683b      	ldr	r3, [r7, #0]
 80026fc:	431a      	orrs	r2, r3
 80026fe:	687b      	ldr	r3, [r7, #4]
 8002700:	609a      	str	r2, [r3, #8]
}
 8002702:	bf00      	nop
 8002704:	370c      	adds	r7, #12
 8002706:	46bd      	mov	sp, r7
 8002708:	f85d 7b04 	ldr.w	r7, [sp], #4
 800270c:	4770      	bx	lr

0800270e <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 800270e:	b480      	push	{r7}
 8002710:	b083      	sub	sp, #12
 8002712:	af00      	add	r7, sp, #0
 8002714:	6078      	str	r0, [r7, #4]
 8002716:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL, PathInternal);
 8002718:	687b      	ldr	r3, [r7, #4]
 800271a:	689b      	ldr	r3, [r3, #8]
 800271c:	f023 72e0 	bic.w	r2, r3, #29360128	; 0x1c00000
 8002720:	683b      	ldr	r3, [r7, #0]
 8002722:	431a      	orrs	r2, r3
 8002724:	687b      	ldr	r3, [r7, #4]
 8002726:	609a      	str	r2, [r3, #8]
}
 8002728:	bf00      	nop
 800272a:	370c      	adds	r7, #12
 800272c:	46bd      	mov	sp, r7
 800272e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002732:	4770      	bx	lr

08002734 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8002734:	b480      	push	{r7}
 8002736:	b083      	sub	sp, #12
 8002738:	af00      	add	r7, sp, #0
 800273a:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL));
 800273c:	687b      	ldr	r3, [r7, #4]
 800273e:	689b      	ldr	r3, [r3, #8]
 8002740:	f003 73e0 	and.w	r3, r3, #29360128	; 0x1c00000
}
 8002744:	4618      	mov	r0, r3
 8002746:	370c      	adds	r7, #12
 8002748:	46bd      	mov	sp, r7
 800274a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800274e:	4770      	bx	lr

08002750 <LL_ADC_SetOffset>:
  *             Other channels are slow channels  allows: 6.5 (sampling) + 12.5 (conversion) = 19 ADC clock cycles (fADC) to convert in 12-bit resolution.\n
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 8002750:	b490      	push	{r4, r7}
 8002752:	b084      	sub	sp, #16
 8002754:	af00      	add	r7, sp, #0
 8002756:	60f8      	str	r0, [r7, #12]
 8002758:	60b9      	str	r1, [r7, #8]
 800275a:	607a      	str	r2, [r7, #4]
 800275c:	603b      	str	r3, [r7, #0]
  register __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 800275e:	68fb      	ldr	r3, [r7, #12]
 8002760:	3360      	adds	r3, #96	; 0x60
 8002762:	461a      	mov	r2, r3
 8002764:	68bb      	ldr	r3, [r7, #8]
 8002766:	009b      	lsls	r3, r3, #2
 8002768:	4413      	add	r3, r2
 800276a:	461c      	mov	r4, r3

  MODIFY_REG(*preg,
 800276c:	6822      	ldr	r2, [r4, #0]
 800276e:	4b08      	ldr	r3, [pc, #32]	; (8002790 <LL_ADC_SetOffset+0x40>)
 8002770:	4013      	ands	r3, r2
 8002772:	687a      	ldr	r2, [r7, #4]
 8002774:	f002 41f8 	and.w	r1, r2, #2080374784	; 0x7c000000
 8002778:	683a      	ldr	r2, [r7, #0]
 800277a:	430a      	orrs	r2, r1
 800277c:	4313      	orrs	r3, r2
 800277e:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8002782:	6023      	str	r3, [r4, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 8002784:	bf00      	nop
 8002786:	3710      	adds	r7, #16
 8002788:	46bd      	mov	sp, r7
 800278a:	bc90      	pop	{r4, r7}
 800278c:	4770      	bx	lr
 800278e:	bf00      	nop
 8002790:	03fff000 	.word	0x03fff000

08002794 <LL_ADC_GetOffsetChannel>:
  *         (1, 2, 3, 4, 5, 7) For ADC channel read back from ADC register,
  *                      comparison with internal channel parameter to be done
  *                      using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(ADC_TypeDef *ADCx, uint32_t Offsety)
{
 8002794:	b490      	push	{r4, r7}
 8002796:	b082      	sub	sp, #8
 8002798:	af00      	add	r7, sp, #0
 800279a:	6078      	str	r0, [r7, #4]
 800279c:	6039      	str	r1, [r7, #0]
  register const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 800279e:	687b      	ldr	r3, [r7, #4]
 80027a0:	3360      	adds	r3, #96	; 0x60
 80027a2:	461a      	mov	r2, r3
 80027a4:	683b      	ldr	r3, [r7, #0]
 80027a6:	009b      	lsls	r3, r3, #2
 80027a8:	4413      	add	r3, r2
 80027aa:	461c      	mov	r4, r3

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 80027ac:	6823      	ldr	r3, [r4, #0]
 80027ae:	f003 43f8 	and.w	r3, r3, #2080374784	; 0x7c000000
}
 80027b2:	4618      	mov	r0, r3
 80027b4:	3708      	adds	r7, #8
 80027b6:	46bd      	mov	sp, r7
 80027b8:	bc90      	pop	{r4, r7}
 80027ba:	4770      	bx	lr

080027bc <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 80027bc:	b490      	push	{r4, r7}
 80027be:	b084      	sub	sp, #16
 80027c0:	af00      	add	r7, sp, #0
 80027c2:	60f8      	str	r0, [r7, #12]
 80027c4:	60b9      	str	r1, [r7, #8]
 80027c6:	607a      	str	r2, [r7, #4]
  register __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80027c8:	68fb      	ldr	r3, [r7, #12]
 80027ca:	3360      	adds	r3, #96	; 0x60
 80027cc:	461a      	mov	r2, r3
 80027ce:	68bb      	ldr	r3, [r7, #8]
 80027d0:	009b      	lsls	r3, r3, #2
 80027d2:	4413      	add	r3, r2
 80027d4:	461c      	mov	r4, r3

  MODIFY_REG(*preg,
 80027d6:	6823      	ldr	r3, [r4, #0]
 80027d8:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 80027dc:	687b      	ldr	r3, [r7, #4]
 80027de:	4313      	orrs	r3, r2
 80027e0:	6023      	str	r3, [r4, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 80027e2:	bf00      	nop
 80027e4:	3710      	adds	r7, #16
 80027e6:	46bd      	mov	sp, r7
 80027e8:	bc90      	pop	{r4, r7}
 80027ea:	4770      	bx	lr

080027ec <LL_ADC_SetOffsetSign>:
  *         @arg @ref LL_ADC_OFFSET_SIGN_NEGATIVE
  *         @arg @ref LL_ADC_OFFSET_SIGN_POSITIVE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSign(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSign)
{
 80027ec:	b490      	push	{r4, r7}
 80027ee:	b084      	sub	sp, #16
 80027f0:	af00      	add	r7, sp, #0
 80027f2:	60f8      	str	r0, [r7, #12]
 80027f4:	60b9      	str	r1, [r7, #8]
 80027f6:	607a      	str	r2, [r7, #4]
  register __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80027f8:	68fb      	ldr	r3, [r7, #12]
 80027fa:	3360      	adds	r3, #96	; 0x60
 80027fc:	461a      	mov	r2, r3
 80027fe:	68bb      	ldr	r3, [r7, #8]
 8002800:	009b      	lsls	r3, r3, #2
 8002802:	4413      	add	r3, r2
 8002804:	461c      	mov	r4, r3

  MODIFY_REG(*preg,
 8002806:	6823      	ldr	r3, [r4, #0]
 8002808:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 800280c:	687b      	ldr	r3, [r7, #4]
 800280e:	4313      	orrs	r3, r2
 8002810:	6023      	str	r3, [r4, #0]
             ADC_OFR1_OFFSETPOS,
             OffsetSign);
}
 8002812:	bf00      	nop
 8002814:	3710      	adds	r7, #16
 8002816:	46bd      	mov	sp, r7
 8002818:	bc90      	pop	{r4, r7}
 800281a:	4770      	bx	lr

0800281c <LL_ADC_SetOffsetSaturation>:
  *         @arg @ref LL_ADC_OFFSET_SATURATION_ENABLE
  *         @arg @ref LL_ADC_OFFSET_SATURATION_DISABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSaturation(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSaturation)
{
 800281c:	b490      	push	{r4, r7}
 800281e:	b084      	sub	sp, #16
 8002820:	af00      	add	r7, sp, #0
 8002822:	60f8      	str	r0, [r7, #12]
 8002824:	60b9      	str	r1, [r7, #8]
 8002826:	607a      	str	r2, [r7, #4]
  register __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8002828:	68fb      	ldr	r3, [r7, #12]
 800282a:	3360      	adds	r3, #96	; 0x60
 800282c:	461a      	mov	r2, r3
 800282e:	68bb      	ldr	r3, [r7, #8]
 8002830:	009b      	lsls	r3, r3, #2
 8002832:	4413      	add	r3, r2
 8002834:	461c      	mov	r4, r3

  MODIFY_REG(*preg,
 8002836:	6823      	ldr	r3, [r4, #0]
 8002838:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 800283c:	687b      	ldr	r3, [r7, #4]
 800283e:	4313      	orrs	r3, r2
 8002840:	6023      	str	r3, [r4, #0]
             ADC_OFR1_SATEN,
             OffsetSaturation);
}
 8002842:	bf00      	nop
 8002844:	3710      	adds	r7, #16
 8002846:	46bd      	mov	sp, r7
 8002848:	bc90      	pop	{r4, r7}
 800284a:	4770      	bx	lr

0800284c <LL_ADC_SetSamplingTimeCommonConfig>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_DEFAULT
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetSamplingTimeCommonConfig(ADC_TypeDef *ADCx, uint32_t SamplingTimeCommonConfig)
{
 800284c:	b480      	push	{r7}
 800284e:	b083      	sub	sp, #12
 8002850:	af00      	add	r7, sp, #0
 8002852:	6078      	str	r0, [r7, #4]
 8002854:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->SMPR1, ADC_SMPR1_SMPPLUS, SamplingTimeCommonConfig);
 8002856:	687b      	ldr	r3, [r7, #4]
 8002858:	695b      	ldr	r3, [r3, #20]
 800285a:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 800285e:	683b      	ldr	r3, [r7, #0]
 8002860:	431a      	orrs	r2, r3
 8002862:	687b      	ldr	r3, [r7, #4]
 8002864:	615a      	str	r2, [r3, #20]
}
 8002866:	bf00      	nop
 8002868:	370c      	adds	r7, #12
 800286a:	46bd      	mov	sp, r7
 800286c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002870:	4770      	bx	lr

08002872 <LL_ADC_REG_SetSequencerRanks>:
  *         (8) On STM32G4, fast channel allows: 2.5 (sampling) + 12.5 (conversion) = 15 ADC clock cycles (fADC) to convert in 12-bit resolution.
  *             Other channels are slow channels  allows: 6.5 (sampling) + 12.5 (conversion) = 19 ADC clock cycles (fADC) to convert in 12-bit resolution.\n
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8002872:	b490      	push	{r4, r7}
 8002874:	b084      	sub	sp, #16
 8002876:	af00      	add	r7, sp, #0
 8002878:	60f8      	str	r0, [r7, #12]
 800287a:	60b9      	str	r1, [r7, #8]
 800287c:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  register __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 800287e:	68fb      	ldr	r3, [r7, #12]
 8002880:	3330      	adds	r3, #48	; 0x30
 8002882:	461a      	mov	r2, r3
 8002884:	68bb      	ldr	r3, [r7, #8]
 8002886:	0a1b      	lsrs	r3, r3, #8
 8002888:	009b      	lsls	r3, r3, #2
 800288a:	f003 030c 	and.w	r3, r3, #12
 800288e:	4413      	add	r3, r2
 8002890:	461c      	mov	r4, r3

  MODIFY_REG(*preg,
 8002892:	6822      	ldr	r2, [r4, #0]
 8002894:	68bb      	ldr	r3, [r7, #8]
 8002896:	f003 031f 	and.w	r3, r3, #31
 800289a:	211f      	movs	r1, #31
 800289c:	fa01 f303 	lsl.w	r3, r1, r3
 80028a0:	43db      	mvns	r3, r3
 80028a2:	401a      	ands	r2, r3
 80028a4:	687b      	ldr	r3, [r7, #4]
 80028a6:	0e9b      	lsrs	r3, r3, #26
 80028a8:	f003 011f 	and.w	r1, r3, #31
 80028ac:	68bb      	ldr	r3, [r7, #8]
 80028ae:	f003 031f 	and.w	r3, r3, #31
 80028b2:	fa01 f303 	lsl.w	r3, r1, r3
 80028b6:	4313      	orrs	r3, r2
 80028b8:	6023      	str	r3, [r4, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS) << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 80028ba:	bf00      	nop
 80028bc:	3710      	adds	r7, #16
 80028be:	46bd      	mov	sp, r7
 80028c0:	bc90      	pop	{r4, r7}
 80028c2:	4770      	bx	lr

080028c4 <LL_ADC_SetChannelSamplingTime>:
  *             can be replaced by 3.5 ADC clock cycles.
  *             Refer to function @ref LL_ADC_SetSamplingTimeCommonConfig().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 80028c4:	b490      	push	{r4, r7}
 80028c6:	b084      	sub	sp, #16
 80028c8:	af00      	add	r7, sp, #0
 80028ca:	60f8      	str	r0, [r7, #12]
 80028cc:	60b9      	str	r1, [r7, #8]
 80028ce:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  register __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 80028d0:	68fb      	ldr	r3, [r7, #12]
 80028d2:	3314      	adds	r3, #20
 80028d4:	461a      	mov	r2, r3
 80028d6:	68bb      	ldr	r3, [r7, #8]
 80028d8:	0e5b      	lsrs	r3, r3, #25
 80028da:	009b      	lsls	r3, r3, #2
 80028dc:	f003 0304 	and.w	r3, r3, #4
 80028e0:	4413      	add	r3, r2
 80028e2:	461c      	mov	r4, r3

  MODIFY_REG(*preg,
 80028e4:	6822      	ldr	r2, [r4, #0]
 80028e6:	68bb      	ldr	r3, [r7, #8]
 80028e8:	0d1b      	lsrs	r3, r3, #20
 80028ea:	f003 031f 	and.w	r3, r3, #31
 80028ee:	2107      	movs	r1, #7
 80028f0:	fa01 f303 	lsl.w	r3, r1, r3
 80028f4:	43db      	mvns	r3, r3
 80028f6:	401a      	ands	r2, r3
 80028f8:	68bb      	ldr	r3, [r7, #8]
 80028fa:	0d1b      	lsrs	r3, r3, #20
 80028fc:	f003 031f 	and.w	r3, r3, #31
 8002900:	6879      	ldr	r1, [r7, #4]
 8002902:	fa01 f303 	lsl.w	r3, r1, r3
 8002906:	4313      	orrs	r3, r2
 8002908:	6023      	str	r3, [r4, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 800290a:	bf00      	nop
 800290c:	3710      	adds	r7, #16
 800290e:	46bd      	mov	sp, r7
 8002910:	bc90      	pop	{r4, r7}
 8002912:	4770      	bx	lr

08002914 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 8002914:	b480      	push	{r7}
 8002916:	b085      	sub	sp, #20
 8002918:	af00      	add	r7, sp, #0
 800291a:	60f8      	str	r0, [r7, #12]
 800291c:	60b9      	str	r1, [r7, #8]
 800291e:	607a      	str	r2, [r7, #4]
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 8002920:	68fb      	ldr	r3, [r7, #12]
 8002922:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 8002926:	68bb      	ldr	r3, [r7, #8]
 8002928:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800292c:	43db      	mvns	r3, r3
 800292e:	401a      	ands	r2, r3
 8002930:	687b      	ldr	r3, [r7, #4]
 8002932:	f003 0318 	and.w	r3, r3, #24
 8002936:	4908      	ldr	r1, [pc, #32]	; (8002958 <LL_ADC_SetChannelSingleDiff+0x44>)
 8002938:	40d9      	lsrs	r1, r3
 800293a:	68bb      	ldr	r3, [r7, #8]
 800293c:	400b      	ands	r3, r1
 800293e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002942:	431a      	orrs	r2, r3
 8002944:	68fb      	ldr	r3, [r7, #12]
 8002946:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK) & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
}
 800294a:	bf00      	nop
 800294c:	3714      	adds	r7, #20
 800294e:	46bd      	mov	sp, r7
 8002950:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002954:	4770      	bx	lr
 8002956:	bf00      	nop
 8002958:	0007ffff 	.word	0x0007ffff

0800295c <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 800295c:	b480      	push	{r7}
 800295e:	b083      	sub	sp, #12
 8002960:	af00      	add	r7, sp, #0
 8002962:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8002964:	687b      	ldr	r3, [r7, #4]
 8002966:	689b      	ldr	r3, [r3, #8]
 8002968:	f023 4320 	bic.w	r3, r3, #2684354560	; 0xa0000000
 800296c:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8002970:	687a      	ldr	r2, [r7, #4]
 8002972:	6093      	str	r3, [r2, #8]
}
 8002974:	bf00      	nop
 8002976:	370c      	adds	r7, #12
 8002978:	46bd      	mov	sp, r7
 800297a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800297e:	4770      	bx	lr

08002980 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(ADC_TypeDef *ADCx)
{
 8002980:	b480      	push	{r7}
 8002982:	b083      	sub	sp, #12
 8002984:	af00      	add	r7, sp, #0
 8002986:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8002988:	687b      	ldr	r3, [r7, #4]
 800298a:	689b      	ldr	r3, [r3, #8]
 800298c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8002990:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002994:	d101      	bne.n	800299a <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 8002996:	2301      	movs	r3, #1
 8002998:	e000      	b.n	800299c <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 800299a:	2300      	movs	r3, #0
}
 800299c:	4618      	mov	r0, r3
 800299e:	370c      	adds	r7, #12
 80029a0:	46bd      	mov	sp, r7
 80029a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029a6:	4770      	bx	lr

080029a8 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 80029a8:	b480      	push	{r7}
 80029aa:	b083      	sub	sp, #12
 80029ac:	af00      	add	r7, sp, #0
 80029ae:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80029b0:	687b      	ldr	r3, [r7, #4]
 80029b2:	689b      	ldr	r3, [r3, #8]
 80029b4:	f023 4310 	bic.w	r3, r3, #2415919104	; 0x90000000
 80029b8:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 80029bc:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 80029c0:	687b      	ldr	r3, [r7, #4]
 80029c2:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 80029c4:	bf00      	nop
 80029c6:	370c      	adds	r7, #12
 80029c8:	46bd      	mov	sp, r7
 80029ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029ce:	4770      	bx	lr

080029d0 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
{
 80029d0:	b480      	push	{r7}
 80029d2:	b083      	sub	sp, #12
 80029d4:	af00      	add	r7, sp, #0
 80029d6:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 80029d8:	687b      	ldr	r3, [r7, #4]
 80029da:	689b      	ldr	r3, [r3, #8]
 80029dc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80029e0:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80029e4:	d101      	bne.n	80029ea <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 80029e6:	2301      	movs	r3, #1
 80029e8:	e000      	b.n	80029ec <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 80029ea:	2300      	movs	r3, #0
}
 80029ec:	4618      	mov	r0, r3
 80029ee:	370c      	adds	r7, #12
 80029f0:	46bd      	mov	sp, r7
 80029f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029f6:	4770      	bx	lr

080029f8 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
 80029f8:	b480      	push	{r7}
 80029fa:	b083      	sub	sp, #12
 80029fc:	af00      	add	r7, sp, #0
 80029fe:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8002a00:	687b      	ldr	r3, [r7, #4]
 8002a02:	689b      	ldr	r3, [r3, #8]
 8002a04:	f003 0301 	and.w	r3, r3, #1
 8002a08:	2b01      	cmp	r3, #1
 8002a0a:	d101      	bne.n	8002a10 <LL_ADC_IsEnabled+0x18>
 8002a0c:	2301      	movs	r3, #1
 8002a0e:	e000      	b.n	8002a12 <LL_ADC_IsEnabled+0x1a>
 8002a10:	2300      	movs	r3, #0
}
 8002a12:	4618      	mov	r0, r3
 8002a14:	370c      	adds	r7, #12
 8002a16:	46bd      	mov	sp, r7
 8002a18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a1c:	4770      	bx	lr

08002a1e <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8002a1e:	b480      	push	{r7}
 8002a20:	b083      	sub	sp, #12
 8002a22:	af00      	add	r7, sp, #0
 8002a24:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8002a26:	687b      	ldr	r3, [r7, #4]
 8002a28:	689b      	ldr	r3, [r3, #8]
 8002a2a:	f003 0304 	and.w	r3, r3, #4
 8002a2e:	2b04      	cmp	r3, #4
 8002a30:	d101      	bne.n	8002a36 <LL_ADC_REG_IsConversionOngoing+0x18>
 8002a32:	2301      	movs	r3, #1
 8002a34:	e000      	b.n	8002a38 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8002a36:	2300      	movs	r3, #0
}
 8002a38:	4618      	mov	r0, r3
 8002a3a:	370c      	adds	r7, #12
 8002a3c:	46bd      	mov	sp, r7
 8002a3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a42:	4770      	bx	lr

08002a44 <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8002a44:	b480      	push	{r7}
 8002a46:	b083      	sub	sp, #12
 8002a48:	af00      	add	r7, sp, #0
 8002a4a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8002a4c:	687b      	ldr	r3, [r7, #4]
 8002a4e:	689b      	ldr	r3, [r3, #8]
 8002a50:	f003 0308 	and.w	r3, r3, #8
 8002a54:	2b08      	cmp	r3, #8
 8002a56:	d101      	bne.n	8002a5c <LL_ADC_INJ_IsConversionOngoing+0x18>
 8002a58:	2301      	movs	r3, #1
 8002a5a:	e000      	b.n	8002a5e <LL_ADC_INJ_IsConversionOngoing+0x1a>
 8002a5c:	2300      	movs	r3, #0
}
 8002a5e:	4618      	mov	r0, r3
 8002a60:	370c      	adds	r7, #12
 8002a62:	46bd      	mov	sp, r7
 8002a64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a68:	4770      	bx	lr
	...

08002a6c <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8002a6c:	b590      	push	{r4, r7, lr}
 8002a6e:	b089      	sub	sp, #36	; 0x24
 8002a70:	af00      	add	r7, sp, #0
 8002a72:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002a74:	2300      	movs	r3, #0
 8002a76:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpCFGR;
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 8002a78:	2300      	movs	r3, #0
 8002a7a:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;

  /* Check ADC handle */
  if (hadc == NULL)
 8002a7c:	687b      	ldr	r3, [r7, #4]
 8002a7e:	2b00      	cmp	r3, #0
 8002a80:	d101      	bne.n	8002a86 <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 8002a82:	2301      	movs	r3, #1
 8002a84:	e1ad      	b.n	8002de2 <HAL_ADC_Init+0x376>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8002a86:	687b      	ldr	r3, [r7, #4]
 8002a88:	695b      	ldr	r3, [r3, #20]
 8002a8a:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8002a8c:	687b      	ldr	r3, [r7, #4]
 8002a8e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002a90:	2b00      	cmp	r3, #0
 8002a92:	d109      	bne.n	8002aa8 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8002a94:	6878      	ldr	r0, [r7, #4]
 8002a96:	f7fe f853 	bl	8000b40 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8002a9a:	687b      	ldr	r3, [r7, #4]
 8002a9c:	2200      	movs	r2, #0
 8002a9e:	661a      	str	r2, [r3, #96]	; 0x60

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8002aa0:	687b      	ldr	r3, [r7, #4]
 8002aa2:	2200      	movs	r2, #0
 8002aa4:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8002aa8:	687b      	ldr	r3, [r7, #4]
 8002aaa:	681b      	ldr	r3, [r3, #0]
 8002aac:	4618      	mov	r0, r3
 8002aae:	f7ff ff67 	bl	8002980 <LL_ADC_IsDeepPowerDownEnabled>
 8002ab2:	4603      	mov	r3, r0
 8002ab4:	2b00      	cmp	r3, #0
 8002ab6:	d004      	beq.n	8002ac2 <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 8002ab8:	687b      	ldr	r3, [r7, #4]
 8002aba:	681b      	ldr	r3, [r3, #0]
 8002abc:	4618      	mov	r0, r3
 8002abe:	f7ff ff4d 	bl	800295c <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8002ac2:	687b      	ldr	r3, [r7, #4]
 8002ac4:	681b      	ldr	r3, [r3, #0]
 8002ac6:	4618      	mov	r0, r3
 8002ac8:	f7ff ff82 	bl	80029d0 <LL_ADC_IsInternalRegulatorEnabled>
 8002acc:	4603      	mov	r3, r0
 8002ace:	2b00      	cmp	r3, #0
 8002ad0:	d113      	bne.n	8002afa <HAL_ADC_Init+0x8e>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 8002ad2:	687b      	ldr	r3, [r7, #4]
 8002ad4:	681b      	ldr	r3, [r3, #0]
 8002ad6:	4618      	mov	r0, r3
 8002ad8:	f7ff ff66 	bl	80029a8 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * (SystemCoreClock / (100000UL * 2UL)));
 8002adc:	4b9e      	ldr	r3, [pc, #632]	; (8002d58 <HAL_ADC_Init+0x2ec>)
 8002ade:	681b      	ldr	r3, [r3, #0]
 8002ae0:	099b      	lsrs	r3, r3, #6
 8002ae2:	4a9e      	ldr	r2, [pc, #632]	; (8002d5c <HAL_ADC_Init+0x2f0>)
 8002ae4:	fba2 2303 	umull	r2, r3, r2, r3
 8002ae8:	099b      	lsrs	r3, r3, #6
 8002aea:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8002aec:	e002      	b.n	8002af4 <HAL_ADC_Init+0x88>
    {
      wait_loop_index--;
 8002aee:	68bb      	ldr	r3, [r7, #8]
 8002af0:	3b01      	subs	r3, #1
 8002af2:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8002af4:	68bb      	ldr	r3, [r7, #8]
 8002af6:	2b00      	cmp	r3, #0
 8002af8:	d1f9      	bne.n	8002aee <HAL_ADC_Init+0x82>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8002afa:	687b      	ldr	r3, [r7, #4]
 8002afc:	681b      	ldr	r3, [r3, #0]
 8002afe:	4618      	mov	r0, r3
 8002b00:	f7ff ff66 	bl	80029d0 <LL_ADC_IsInternalRegulatorEnabled>
 8002b04:	4603      	mov	r3, r0
 8002b06:	2b00      	cmp	r3, #0
 8002b08:	d10d      	bne.n	8002b26 <HAL_ADC_Init+0xba>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002b0a:	687b      	ldr	r3, [r7, #4]
 8002b0c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002b0e:	f043 0210 	orr.w	r2, r3, #16
 8002b12:	687b      	ldr	r3, [r7, #4]
 8002b14:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002b16:	687b      	ldr	r3, [r7, #4]
 8002b18:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002b1a:	f043 0201 	orr.w	r2, r3, #1
 8002b1e:	687b      	ldr	r3, [r7, #4]
 8002b20:	661a      	str	r2, [r3, #96]	; 0x60

    tmp_hal_status = HAL_ERROR;
 8002b22:	2301      	movs	r3, #1
 8002b24:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8002b26:	687b      	ldr	r3, [r7, #4]
 8002b28:	681b      	ldr	r3, [r3, #0]
 8002b2a:	4618      	mov	r0, r3
 8002b2c:	f7ff ff77 	bl	8002a1e <LL_ADC_REG_IsConversionOngoing>
 8002b30:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8002b32:	687b      	ldr	r3, [r7, #4]
 8002b34:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002b36:	f003 0310 	and.w	r3, r3, #16
 8002b3a:	2b00      	cmp	r3, #0
 8002b3c:	f040 8148 	bne.w	8002dd0 <HAL_ADC_Init+0x364>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 8002b40:	697b      	ldr	r3, [r7, #20]
 8002b42:	2b00      	cmp	r3, #0
 8002b44:	f040 8144 	bne.w	8002dd0 <HAL_ADC_Init+0x364>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002b48:	687b      	ldr	r3, [r7, #4]
 8002b4a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002b4c:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 8002b50:	f043 0202 	orr.w	r2, r3, #2
 8002b54:	687b      	ldr	r3, [r7, #4]
 8002b56:	65da      	str	r2, [r3, #92]	; 0x5c
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002b58:	687b      	ldr	r3, [r7, #4]
 8002b5a:	681b      	ldr	r3, [r3, #0]
 8002b5c:	4618      	mov	r0, r3
 8002b5e:	f7ff ff4b 	bl	80029f8 <LL_ADC_IsEnabled>
 8002b62:	4603      	mov	r3, r0
 8002b64:	2b00      	cmp	r3, #0
 8002b66:	d141      	bne.n	8002bec <HAL_ADC_Init+0x180>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8002b68:	687b      	ldr	r3, [r7, #4]
 8002b6a:	681b      	ldr	r3, [r3, #0]
 8002b6c:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002b70:	d004      	beq.n	8002b7c <HAL_ADC_Init+0x110>
 8002b72:	687b      	ldr	r3, [r7, #4]
 8002b74:	681b      	ldr	r3, [r3, #0]
 8002b76:	4a7a      	ldr	r2, [pc, #488]	; (8002d60 <HAL_ADC_Init+0x2f4>)
 8002b78:	4293      	cmp	r3, r2
 8002b7a:	d10f      	bne.n	8002b9c <HAL_ADC_Init+0x130>
 8002b7c:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
 8002b80:	f7ff ff3a 	bl	80029f8 <LL_ADC_IsEnabled>
 8002b84:	4604      	mov	r4, r0
 8002b86:	4876      	ldr	r0, [pc, #472]	; (8002d60 <HAL_ADC_Init+0x2f4>)
 8002b88:	f7ff ff36 	bl	80029f8 <LL_ADC_IsEnabled>
 8002b8c:	4603      	mov	r3, r0
 8002b8e:	4323      	orrs	r3, r4
 8002b90:	2b00      	cmp	r3, #0
 8002b92:	bf0c      	ite	eq
 8002b94:	2301      	moveq	r3, #1
 8002b96:	2300      	movne	r3, #0
 8002b98:	b2db      	uxtb	r3, r3
 8002b9a:	e012      	b.n	8002bc2 <HAL_ADC_Init+0x156>
 8002b9c:	4871      	ldr	r0, [pc, #452]	; (8002d64 <HAL_ADC_Init+0x2f8>)
 8002b9e:	f7ff ff2b 	bl	80029f8 <LL_ADC_IsEnabled>
 8002ba2:	4604      	mov	r4, r0
 8002ba4:	4870      	ldr	r0, [pc, #448]	; (8002d68 <HAL_ADC_Init+0x2fc>)
 8002ba6:	f7ff ff27 	bl	80029f8 <LL_ADC_IsEnabled>
 8002baa:	4603      	mov	r3, r0
 8002bac:	431c      	orrs	r4, r3
 8002bae:	486f      	ldr	r0, [pc, #444]	; (8002d6c <HAL_ADC_Init+0x300>)
 8002bb0:	f7ff ff22 	bl	80029f8 <LL_ADC_IsEnabled>
 8002bb4:	4603      	mov	r3, r0
 8002bb6:	4323      	orrs	r3, r4
 8002bb8:	2b00      	cmp	r3, #0
 8002bba:	bf0c      	ite	eq
 8002bbc:	2301      	moveq	r3, #1
 8002bbe:	2300      	movne	r3, #0
 8002bc0:	b2db      	uxtb	r3, r3
 8002bc2:	2b00      	cmp	r3, #0
 8002bc4:	d012      	beq.n	8002bec <HAL_ADC_Init+0x180>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 8002bc6:	687b      	ldr	r3, [r7, #4]
 8002bc8:	681b      	ldr	r3, [r3, #0]
 8002bca:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002bce:	d004      	beq.n	8002bda <HAL_ADC_Init+0x16e>
 8002bd0:	687b      	ldr	r3, [r7, #4]
 8002bd2:	681b      	ldr	r3, [r3, #0]
 8002bd4:	4a62      	ldr	r2, [pc, #392]	; (8002d60 <HAL_ADC_Init+0x2f4>)
 8002bd6:	4293      	cmp	r3, r2
 8002bd8:	d101      	bne.n	8002bde <HAL_ADC_Init+0x172>
 8002bda:	4a65      	ldr	r2, [pc, #404]	; (8002d70 <HAL_ADC_Init+0x304>)
 8002bdc:	e000      	b.n	8002be0 <HAL_ADC_Init+0x174>
 8002bde:	4a65      	ldr	r2, [pc, #404]	; (8002d74 <HAL_ADC_Init+0x308>)
 8002be0:	687b      	ldr	r3, [r7, #4]
 8002be2:	685b      	ldr	r3, [r3, #4]
 8002be4:	4619      	mov	r1, r3
 8002be6:	4610      	mov	r0, r2
 8002be8:	f7ff fd7e 	bl	80026e8 <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8002bec:	687b      	ldr	r3, [r7, #4]
 8002bee:	7f5b      	ldrb	r3, [r3, #29]
 8002bf0:	035a      	lsls	r2, r3, #13
                hadc->Init.Overrun                                                     |
 8002bf2:	687b      	ldr	r3, [r7, #4]
 8002bf4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8002bf6:	431a      	orrs	r2, r3
                hadc->Init.DataAlign                                                   |
 8002bf8:	687b      	ldr	r3, [r7, #4]
 8002bfa:	68db      	ldr	r3, [r3, #12]
                hadc->Init.Overrun                                                     |
 8002bfc:	431a      	orrs	r2, r3
                hadc->Init.Resolution                                                  |
 8002bfe:	687b      	ldr	r3, [r7, #4]
 8002c00:	689b      	ldr	r3, [r3, #8]
                hadc->Init.DataAlign                                                   |
 8002c02:	431a      	orrs	r2, r3
                ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8002c04:	687b      	ldr	r3, [r7, #4]
 8002c06:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8002c0a:	041b      	lsls	r3, r3, #16
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8002c0c:	4313      	orrs	r3, r2
 8002c0e:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8002c10:	687b      	ldr	r3, [r7, #4]
 8002c12:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8002c16:	2b01      	cmp	r3, #1
 8002c18:	d106      	bne.n	8002c28 <HAL_ADC_Init+0x1bc>
    {
      tmpCFGR |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 8002c1a:	687b      	ldr	r3, [r7, #4]
 8002c1c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002c1e:	3b01      	subs	r3, #1
 8002c20:	045b      	lsls	r3, r3, #17
 8002c22:	69ba      	ldr	r2, [r7, #24]
 8002c24:	4313      	orrs	r3, r2
 8002c26:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8002c28:	687b      	ldr	r3, [r7, #4]
 8002c2a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002c2c:	2b00      	cmp	r3, #0
 8002c2e:	d009      	beq.n	8002c44 <HAL_ADC_Init+0x1d8>
    {
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8002c30:	687b      	ldr	r3, [r7, #4]
 8002c32:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002c34:	f403 7278 	and.w	r2, r3, #992	; 0x3e0
                  | hadc->Init.ExternalTrigConvEdge
 8002c38:	687b      	ldr	r3, [r7, #4]
 8002c3a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c3c:	4313      	orrs	r3, r2
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8002c3e:	69ba      	ldr	r2, [r7, #24]
 8002c40:	4313      	orrs	r3, r2
 8002c42:	61bb      	str	r3, [r7, #24]
                 );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
 8002c44:	687b      	ldr	r3, [r7, #4]
 8002c46:	681b      	ldr	r3, [r3, #0]
 8002c48:	68da      	ldr	r2, [r3, #12]
 8002c4a:	4b4b      	ldr	r3, [pc, #300]	; (8002d78 <HAL_ADC_Init+0x30c>)
 8002c4c:	4013      	ands	r3, r2
 8002c4e:	687a      	ldr	r2, [r7, #4]
 8002c50:	6812      	ldr	r2, [r2, #0]
 8002c52:	69b9      	ldr	r1, [r7, #24]
 8002c54:	430b      	orrs	r3, r1
 8002c56:	60d3      	str	r3, [r2, #12]

    /* Configuration of sampling mode */
    MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_BULB | ADC_CFGR2_SMPTRIG, hadc->Init.SamplingMode);
 8002c58:	687b      	ldr	r3, [r7, #4]
 8002c5a:	681b      	ldr	r3, [r3, #0]
 8002c5c:	691b      	ldr	r3, [r3, #16]
 8002c5e:	f023 6140 	bic.w	r1, r3, #201326592	; 0xc000000
 8002c62:	687b      	ldr	r3, [r7, #4]
 8002c64:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002c66:	687b      	ldr	r3, [r7, #4]
 8002c68:	681b      	ldr	r3, [r3, #0]
 8002c6a:	430a      	orrs	r2, r1
 8002c6c:	611a      	str	r2, [r3, #16]
    /* conversion on going on regular and injected groups:                    */
    /*  - Gain Compensation               Init.GainCompensation               */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8002c6e:	687b      	ldr	r3, [r7, #4]
 8002c70:	681b      	ldr	r3, [r3, #0]
 8002c72:	4618      	mov	r0, r3
 8002c74:	f7ff fed3 	bl	8002a1e <LL_ADC_REG_IsConversionOngoing>
 8002c78:	6138      	str	r0, [r7, #16]
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8002c7a:	687b      	ldr	r3, [r7, #4]
 8002c7c:	681b      	ldr	r3, [r3, #0]
 8002c7e:	4618      	mov	r0, r3
 8002c80:	f7ff fee0 	bl	8002a44 <LL_ADC_INJ_IsConversionOngoing>
 8002c84:	60f8      	str	r0, [r7, #12]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8002c86:	693b      	ldr	r3, [r7, #16]
 8002c88:	2b00      	cmp	r3, #0
 8002c8a:	d17f      	bne.n	8002d8c <HAL_ADC_Init+0x320>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8002c8c:	68fb      	ldr	r3, [r7, #12]
 8002c8e:	2b00      	cmp	r3, #0
 8002c90:	d17c      	bne.n	8002d8c <HAL_ADC_Init+0x320>
       )
    {
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
                 ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8002c92:	687b      	ldr	r3, [r7, #4]
 8002c94:	7f1b      	ldrb	r3, [r3, #28]
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 8002c96:	039a      	lsls	r2, r3, #14
                 ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 8002c98:	687b      	ldr	r3, [r7, #4]
 8002c9a:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8002c9e:	005b      	lsls	r3, r3, #1
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 8002ca0:	4313      	orrs	r3, r2
 8002ca2:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 8002ca4:	687b      	ldr	r3, [r7, #4]
 8002ca6:	681b      	ldr	r3, [r3, #0]
 8002ca8:	68db      	ldr	r3, [r3, #12]
 8002caa:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8002cae:	f023 0302 	bic.w	r3, r3, #2
 8002cb2:	687a      	ldr	r2, [r7, #4]
 8002cb4:	6812      	ldr	r2, [r2, #0]
 8002cb6:	69b9      	ldr	r1, [r7, #24]
 8002cb8:	430b      	orrs	r3, r1
 8002cba:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.GainCompensation != 0UL)
 8002cbc:	687b      	ldr	r3, [r7, #4]
 8002cbe:	691b      	ldr	r3, [r3, #16]
 8002cc0:	2b00      	cmp	r3, #0
 8002cc2:	d017      	beq.n	8002cf4 <HAL_ADC_Init+0x288>
      {
        SET_BIT(hadc->Instance->CFGR2, ADC_CFGR2_GCOMP);
 8002cc4:	687b      	ldr	r3, [r7, #4]
 8002cc6:	681b      	ldr	r3, [r3, #0]
 8002cc8:	691a      	ldr	r2, [r3, #16]
 8002cca:	687b      	ldr	r3, [r7, #4]
 8002ccc:	681b      	ldr	r3, [r3, #0]
 8002cce:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 8002cd2:	611a      	str	r2, [r3, #16]
        MODIFY_REG(hadc->Instance->GCOMP, ADC_GCOMP_GCOMPCOEFF, hadc->Init.GainCompensation);
 8002cd4:	687b      	ldr	r3, [r7, #4]
 8002cd6:	681b      	ldr	r3, [r3, #0]
 8002cd8:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 8002cdc:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 8002ce0:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8002ce4:	687a      	ldr	r2, [r7, #4]
 8002ce6:	6911      	ldr	r1, [r2, #16]
 8002ce8:	687a      	ldr	r2, [r7, #4]
 8002cea:	6812      	ldr	r2, [r2, #0]
 8002cec:	430b      	orrs	r3, r1
 8002cee:	f8c2 30c0 	str.w	r3, [r2, #192]	; 0xc0
 8002cf2:	e013      	b.n	8002d1c <HAL_ADC_Init+0x2b0>
      }
      else
      {
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_GCOMP);
 8002cf4:	687b      	ldr	r3, [r7, #4]
 8002cf6:	681b      	ldr	r3, [r3, #0]
 8002cf8:	691a      	ldr	r2, [r3, #16]
 8002cfa:	687b      	ldr	r3, [r7, #4]
 8002cfc:	681b      	ldr	r3, [r3, #0]
 8002cfe:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8002d02:	611a      	str	r2, [r3, #16]
        MODIFY_REG(hadc->Instance->GCOMP, ADC_GCOMP_GCOMPCOEFF, 0UL);
 8002d04:	687b      	ldr	r3, [r7, #4]
 8002d06:	681b      	ldr	r3, [r3, #0]
 8002d08:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 8002d0c:	687a      	ldr	r2, [r7, #4]
 8002d0e:	6812      	ldr	r2, [r2, #0]
 8002d10:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 8002d14:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8002d18:	f8c2 30c0 	str.w	r3, [r2, #192]	; 0xc0
      }

      if (hadc->Init.OversamplingMode == ENABLE)
 8002d1c:	687b      	ldr	r3, [r7, #4]
 8002d1e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002d22:	2b01      	cmp	r3, #1
 8002d24:	d12a      	bne.n	8002d7c <HAL_ADC_Init+0x310>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 8002d26:	687b      	ldr	r3, [r7, #4]
 8002d28:	681b      	ldr	r3, [r3, #0]
 8002d2a:	691b      	ldr	r3, [r3, #16]
 8002d2c:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 8002d30:	f023 0304 	bic.w	r3, r3, #4
 8002d34:	687a      	ldr	r2, [r7, #4]
 8002d36:	6c51      	ldr	r1, [r2, #68]	; 0x44
 8002d38:	687a      	ldr	r2, [r7, #4]
 8002d3a:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8002d3c:	4311      	orrs	r1, r2
 8002d3e:	687a      	ldr	r2, [r7, #4]
 8002d40:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 8002d42:	4311      	orrs	r1, r2
 8002d44:	687a      	ldr	r2, [r7, #4]
 8002d46:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8002d48:	430a      	orrs	r2, r1
 8002d4a:	431a      	orrs	r2, r3
 8002d4c:	687b      	ldr	r3, [r7, #4]
 8002d4e:	681b      	ldr	r3, [r3, #0]
 8002d50:	f042 0201 	orr.w	r2, r2, #1
 8002d54:	611a      	str	r2, [r3, #16]
 8002d56:	e019      	b.n	8002d8c <HAL_ADC_Init+0x320>
 8002d58:	2000000c 	.word	0x2000000c
 8002d5c:	053e2d63 	.word	0x053e2d63
 8002d60:	50000100 	.word	0x50000100
 8002d64:	50000400 	.word	0x50000400
 8002d68:	50000500 	.word	0x50000500
 8002d6c:	50000600 	.word	0x50000600
 8002d70:	50000300 	.word	0x50000300
 8002d74:	50000700 	.word	0x50000700
 8002d78:	fff04007 	.word	0xfff04007
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 8002d7c:	687b      	ldr	r3, [r7, #4]
 8002d7e:	681b      	ldr	r3, [r3, #0]
 8002d80:	691a      	ldr	r2, [r3, #16]
 8002d82:	687b      	ldr	r3, [r7, #4]
 8002d84:	681b      	ldr	r3, [r3, #0]
 8002d86:	f022 0201 	bic.w	r2, r2, #1
 8002d8a:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8002d8c:	687b      	ldr	r3, [r7, #4]
 8002d8e:	695b      	ldr	r3, [r3, #20]
 8002d90:	2b01      	cmp	r3, #1
 8002d92:	d10c      	bne.n	8002dae <HAL_ADC_Init+0x342>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 8002d94:	687b      	ldr	r3, [r7, #4]
 8002d96:	681b      	ldr	r3, [r3, #0]
 8002d98:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d9a:	f023 010f 	bic.w	r1, r3, #15
 8002d9e:	687b      	ldr	r3, [r7, #4]
 8002da0:	6a1b      	ldr	r3, [r3, #32]
 8002da2:	1e5a      	subs	r2, r3, #1
 8002da4:	687b      	ldr	r3, [r7, #4]
 8002da6:	681b      	ldr	r3, [r3, #0]
 8002da8:	430a      	orrs	r2, r1
 8002daa:	631a      	str	r2, [r3, #48]	; 0x30
 8002dac:	e007      	b.n	8002dbe <HAL_ADC_Init+0x352>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8002dae:	687b      	ldr	r3, [r7, #4]
 8002db0:	681b      	ldr	r3, [r3, #0]
 8002db2:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002db4:	687b      	ldr	r3, [r7, #4]
 8002db6:	681b      	ldr	r3, [r3, #0]
 8002db8:	f022 020f 	bic.w	r2, r2, #15
 8002dbc:	631a      	str	r2, [r3, #48]	; 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 8002dbe:	687b      	ldr	r3, [r7, #4]
 8002dc0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002dc2:	f023 0303 	bic.w	r3, r3, #3
 8002dc6:	f043 0201 	orr.w	r2, r3, #1
 8002dca:	687b      	ldr	r3, [r7, #4]
 8002dcc:	65da      	str	r2, [r3, #92]	; 0x5c
 8002dce:	e007      	b.n	8002de0 <HAL_ADC_Init+0x374>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002dd0:	687b      	ldr	r3, [r7, #4]
 8002dd2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002dd4:	f043 0210 	orr.w	r2, r3, #16
 8002dd8:	687b      	ldr	r3, [r7, #4]
 8002dda:	65da      	str	r2, [r3, #92]	; 0x5c

    tmp_hal_status = HAL_ERROR;
 8002ddc:	2301      	movs	r3, #1
 8002dde:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 8002de0:	7ffb      	ldrb	r3, [r7, #31]
}
 8002de2:	4618      	mov	r0, r3
 8002de4:	3724      	adds	r7, #36	; 0x24
 8002de6:	46bd      	mov	sp, r7
 8002de8:	bd90      	pop	{r4, r7, pc}
 8002dea:	bf00      	nop

08002dec <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 8002dec:	b580      	push	{r7, lr}
 8002dee:	b0a6      	sub	sp, #152	; 0x98
 8002df0:	af00      	add	r7, sp, #0
 8002df2:	6078      	str	r0, [r7, #4]
 8002df4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002df6:	2300      	movs	r3, #0
 8002df8:	f887 3097 	strb.w	r3, [r7, #151]	; 0x97
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0;
 8002dfc:	2300      	movs	r3, #0
 8002dfe:	60bb      	str	r3, [r7, #8]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, sConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8002e00:	687b      	ldr	r3, [r7, #4]
 8002e02:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 8002e06:	2b01      	cmp	r3, #1
 8002e08:	d101      	bne.n	8002e0e <HAL_ADC_ConfigChannel+0x22>
 8002e0a:	2302      	movs	r3, #2
 8002e0c:	e38e      	b.n	800352c <HAL_ADC_ConfigChannel+0x740>
 8002e0e:	687b      	ldr	r3, [r7, #4]
 8002e10:	2201      	movs	r2, #1
 8002e12:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8002e16:	687b      	ldr	r3, [r7, #4]
 8002e18:	681b      	ldr	r3, [r3, #0]
 8002e1a:	4618      	mov	r0, r3
 8002e1c:	f7ff fdff 	bl	8002a1e <LL_ADC_REG_IsConversionOngoing>
 8002e20:	4603      	mov	r3, r0
 8002e22:	2b00      	cmp	r3, #0
 8002e24:	f040 836f 	bne.w	8003506 <HAL_ADC_ConfigChannel+0x71a>
  {
    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, sConfig->Rank, sConfig->Channel);
 8002e28:	687b      	ldr	r3, [r7, #4]
 8002e2a:	6818      	ldr	r0, [r3, #0]
 8002e2c:	683b      	ldr	r3, [r7, #0]
 8002e2e:	6859      	ldr	r1, [r3, #4]
 8002e30:	683b      	ldr	r3, [r7, #0]
 8002e32:	681b      	ldr	r3, [r3, #0]
 8002e34:	461a      	mov	r2, r3
 8002e36:	f7ff fd1c 	bl	8002872 <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8002e3a:	687b      	ldr	r3, [r7, #4]
 8002e3c:	681b      	ldr	r3, [r3, #0]
 8002e3e:	4618      	mov	r0, r3
 8002e40:	f7ff fded 	bl	8002a1e <LL_ADC_REG_IsConversionOngoing>
 8002e44:	f8c7 0090 	str.w	r0, [r7, #144]	; 0x90
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8002e48:	687b      	ldr	r3, [r7, #4]
 8002e4a:	681b      	ldr	r3, [r3, #0]
 8002e4c:	4618      	mov	r0, r3
 8002e4e:	f7ff fdf9 	bl	8002a44 <LL_ADC_INJ_IsConversionOngoing>
 8002e52:	f8c7 008c 	str.w	r0, [r7, #140]	; 0x8c
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8002e56:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8002e5a:	2b00      	cmp	r3, #0
 8002e5c:	f040 817b 	bne.w	8003156 <HAL_ADC_ConfigChannel+0x36a>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8002e60:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8002e64:	2b00      	cmp	r3, #0
 8002e66:	f040 8176 	bne.w	8003156 <HAL_ADC_ConfigChannel+0x36a>
       )
    {
      /* Manage specific case of sampling time 3.5 cycles replacing 2.5 cyles */
      if (sConfig->SamplingTime == ADC_SAMPLETIME_3CYCLES_5)
 8002e6a:	683b      	ldr	r3, [r7, #0]
 8002e6c:	689b      	ldr	r3, [r3, #8]
 8002e6e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8002e72:	d10f      	bne.n	8002e94 <HAL_ADC_ConfigChannel+0xa8>
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, LL_ADC_SAMPLINGTIME_2CYCLES_5);
 8002e74:	687b      	ldr	r3, [r7, #4]
 8002e76:	6818      	ldr	r0, [r3, #0]
 8002e78:	683b      	ldr	r3, [r7, #0]
 8002e7a:	681b      	ldr	r3, [r3, #0]
 8002e7c:	2200      	movs	r2, #0
 8002e7e:	4619      	mov	r1, r3
 8002e80:	f7ff fd20 	bl	80028c4 <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5);
 8002e84:	687b      	ldr	r3, [r7, #4]
 8002e86:	681b      	ldr	r3, [r3, #0]
 8002e88:	f04f 4100 	mov.w	r1, #2147483648	; 0x80000000
 8002e8c:	4618      	mov	r0, r3
 8002e8e:	f7ff fcdd 	bl	800284c <LL_ADC_SetSamplingTimeCommonConfig>
 8002e92:	e00e      	b.n	8002eb2 <HAL_ADC_ConfigChannel+0xc6>
      }
      else
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, sConfig->SamplingTime);
 8002e94:	687b      	ldr	r3, [r7, #4]
 8002e96:	6818      	ldr	r0, [r3, #0]
 8002e98:	683b      	ldr	r3, [r7, #0]
 8002e9a:	6819      	ldr	r1, [r3, #0]
 8002e9c:	683b      	ldr	r3, [r7, #0]
 8002e9e:	689b      	ldr	r3, [r3, #8]
 8002ea0:	461a      	mov	r2, r3
 8002ea2:	f7ff fd0f 	bl	80028c4 <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
 8002ea6:	687b      	ldr	r3, [r7, #4]
 8002ea8:	681b      	ldr	r3, [r3, #0]
 8002eaa:	2100      	movs	r1, #0
 8002eac:	4618      	mov	r0, r3
 8002eae:	f7ff fccd 	bl	800284c <LL_ADC_SetSamplingTimeCommonConfig>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 8002eb2:	683b      	ldr	r3, [r7, #0]
 8002eb4:	695a      	ldr	r2, [r3, #20]
 8002eb6:	687b      	ldr	r3, [r7, #4]
 8002eb8:	681b      	ldr	r3, [r3, #0]
 8002eba:	68db      	ldr	r3, [r3, #12]
 8002ebc:	08db      	lsrs	r3, r3, #3
 8002ebe:	f003 0303 	and.w	r3, r3, #3
 8002ec2:	005b      	lsls	r3, r3, #1
 8002ec4:	fa02 f303 	lsl.w	r3, r2, r3
 8002ec8:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88

      if (sConfig->OffsetNumber != ADC_OFFSET_NONE)
 8002ecc:	683b      	ldr	r3, [r7, #0]
 8002ece:	691b      	ldr	r3, [r3, #16]
 8002ed0:	2b04      	cmp	r3, #4
 8002ed2:	d022      	beq.n	8002f1a <HAL_ADC_ConfigChannel+0x12e>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, sConfig->OffsetNumber, sConfig->Channel, tmpOffsetShifted);
 8002ed4:	687b      	ldr	r3, [r7, #4]
 8002ed6:	6818      	ldr	r0, [r3, #0]
 8002ed8:	683b      	ldr	r3, [r7, #0]
 8002eda:	6919      	ldr	r1, [r3, #16]
 8002edc:	683b      	ldr	r3, [r7, #0]
 8002ede:	681a      	ldr	r2, [r3, #0]
 8002ee0:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8002ee4:	f7ff fc34 	bl	8002750 <LL_ADC_SetOffset>

        assert_param(IS_ADC_OFFSET_SIGN(sConfig->OffsetSign));
        assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetSaturation));
        /* Set ADC selected offset sign & saturation */
        LL_ADC_SetOffsetSign(hadc->Instance, sConfig->OffsetNumber, sConfig->OffsetSign);
 8002ee8:	687b      	ldr	r3, [r7, #4]
 8002eea:	6818      	ldr	r0, [r3, #0]
 8002eec:	683b      	ldr	r3, [r7, #0]
 8002eee:	6919      	ldr	r1, [r3, #16]
 8002ef0:	683b      	ldr	r3, [r7, #0]
 8002ef2:	699b      	ldr	r3, [r3, #24]
 8002ef4:	461a      	mov	r2, r3
 8002ef6:	f7ff fc79 	bl	80027ec <LL_ADC_SetOffsetSign>
        LL_ADC_SetOffsetSaturation(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetSaturation == ENABLE) ? LL_ADC_OFFSET_SATURATION_ENABLE : LL_ADC_OFFSET_SATURATION_DISABLE);
 8002efa:	687b      	ldr	r3, [r7, #4]
 8002efc:	6818      	ldr	r0, [r3, #0]
 8002efe:	683b      	ldr	r3, [r7, #0]
 8002f00:	6919      	ldr	r1, [r3, #16]
 8002f02:	683b      	ldr	r3, [r7, #0]
 8002f04:	7f1b      	ldrb	r3, [r3, #28]
 8002f06:	2b01      	cmp	r3, #1
 8002f08:	d102      	bne.n	8002f10 <HAL_ADC_ConfigChannel+0x124>
 8002f0a:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002f0e:	e000      	b.n	8002f12 <HAL_ADC_ConfigChannel+0x126>
 8002f10:	2300      	movs	r3, #0
 8002f12:	461a      	mov	r2, r3
 8002f14:	f7ff fc82 	bl	800281c <LL_ADC_SetOffsetSaturation>
 8002f18:	e11d      	b.n	8003156 <HAL_ADC_ConfigChannel+0x36a>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if(__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8002f1a:	687b      	ldr	r3, [r7, #4]
 8002f1c:	681b      	ldr	r3, [r3, #0]
 8002f1e:	2100      	movs	r1, #0
 8002f20:	4618      	mov	r0, r3
 8002f22:	f7ff fc37 	bl	8002794 <LL_ADC_GetOffsetChannel>
 8002f26:	4603      	mov	r3, r0
 8002f28:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002f2c:	2b00      	cmp	r3, #0
 8002f2e:	d10a      	bne.n	8002f46 <HAL_ADC_ConfigChannel+0x15a>
 8002f30:	687b      	ldr	r3, [r7, #4]
 8002f32:	681b      	ldr	r3, [r3, #0]
 8002f34:	2100      	movs	r1, #0
 8002f36:	4618      	mov	r0, r3
 8002f38:	f7ff fc2c 	bl	8002794 <LL_ADC_GetOffsetChannel>
 8002f3c:	4603      	mov	r3, r0
 8002f3e:	0e9b      	lsrs	r3, r3, #26
 8002f40:	f003 021f 	and.w	r2, r3, #31
 8002f44:	e012      	b.n	8002f6c <HAL_ADC_ConfigChannel+0x180>
 8002f46:	687b      	ldr	r3, [r7, #4]
 8002f48:	681b      	ldr	r3, [r3, #0]
 8002f4a:	2100      	movs	r1, #0
 8002f4c:	4618      	mov	r0, r3
 8002f4e:	f7ff fc21 	bl	8002794 <LL_ADC_GetOffsetChannel>
 8002f52:	4603      	mov	r3, r0
 8002f54:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002f58:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8002f5c:	fa93 f3a3 	rbit	r3, r3
 8002f60:	67fb      	str	r3, [r7, #124]	; 0x7c
  return result;
 8002f62:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8002f64:	fab3 f383 	clz	r3, r3
 8002f68:	b2db      	uxtb	r3, r3
 8002f6a:	461a      	mov	r2, r3
 8002f6c:	683b      	ldr	r3, [r7, #0]
 8002f6e:	681b      	ldr	r3, [r3, #0]
 8002f70:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002f74:	2b00      	cmp	r3, #0
 8002f76:	d105      	bne.n	8002f84 <HAL_ADC_ConfigChannel+0x198>
 8002f78:	683b      	ldr	r3, [r7, #0]
 8002f7a:	681b      	ldr	r3, [r3, #0]
 8002f7c:	0e9b      	lsrs	r3, r3, #26
 8002f7e:	f003 031f 	and.w	r3, r3, #31
 8002f82:	e00a      	b.n	8002f9a <HAL_ADC_ConfigChannel+0x1ae>
 8002f84:	683b      	ldr	r3, [r7, #0]
 8002f86:	681b      	ldr	r3, [r3, #0]
 8002f88:	67bb      	str	r3, [r7, #120]	; 0x78
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002f8a:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8002f8c:	fa93 f3a3 	rbit	r3, r3
 8002f90:	677b      	str	r3, [r7, #116]	; 0x74
  return result;
 8002f92:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002f94:	fab3 f383 	clz	r3, r3
 8002f98:	b2db      	uxtb	r3, r3
 8002f9a:	429a      	cmp	r2, r3
 8002f9c:	d106      	bne.n	8002fac <HAL_ADC_ConfigChannel+0x1c0>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 8002f9e:	687b      	ldr	r3, [r7, #4]
 8002fa0:	681b      	ldr	r3, [r3, #0]
 8002fa2:	2200      	movs	r2, #0
 8002fa4:	2100      	movs	r1, #0
 8002fa6:	4618      	mov	r0, r3
 8002fa8:	f7ff fc08 	bl	80027bc <LL_ADC_SetOffsetState>
        }
        if(__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8002fac:	687b      	ldr	r3, [r7, #4]
 8002fae:	681b      	ldr	r3, [r3, #0]
 8002fb0:	2101      	movs	r1, #1
 8002fb2:	4618      	mov	r0, r3
 8002fb4:	f7ff fbee 	bl	8002794 <LL_ADC_GetOffsetChannel>
 8002fb8:	4603      	mov	r3, r0
 8002fba:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002fbe:	2b00      	cmp	r3, #0
 8002fc0:	d10a      	bne.n	8002fd8 <HAL_ADC_ConfigChannel+0x1ec>
 8002fc2:	687b      	ldr	r3, [r7, #4]
 8002fc4:	681b      	ldr	r3, [r3, #0]
 8002fc6:	2101      	movs	r1, #1
 8002fc8:	4618      	mov	r0, r3
 8002fca:	f7ff fbe3 	bl	8002794 <LL_ADC_GetOffsetChannel>
 8002fce:	4603      	mov	r3, r0
 8002fd0:	0e9b      	lsrs	r3, r3, #26
 8002fd2:	f003 021f 	and.w	r2, r3, #31
 8002fd6:	e010      	b.n	8002ffa <HAL_ADC_ConfigChannel+0x20e>
 8002fd8:	687b      	ldr	r3, [r7, #4]
 8002fda:	681b      	ldr	r3, [r3, #0]
 8002fdc:	2101      	movs	r1, #1
 8002fde:	4618      	mov	r0, r3
 8002fe0:	f7ff fbd8 	bl	8002794 <LL_ADC_GetOffsetChannel>
 8002fe4:	4603      	mov	r3, r0
 8002fe6:	673b      	str	r3, [r7, #112]	; 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002fe8:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8002fea:	fa93 f3a3 	rbit	r3, r3
 8002fee:	66fb      	str	r3, [r7, #108]	; 0x6c
  return result;
 8002ff0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002ff2:	fab3 f383 	clz	r3, r3
 8002ff6:	b2db      	uxtb	r3, r3
 8002ff8:	461a      	mov	r2, r3
 8002ffa:	683b      	ldr	r3, [r7, #0]
 8002ffc:	681b      	ldr	r3, [r3, #0]
 8002ffe:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003002:	2b00      	cmp	r3, #0
 8003004:	d105      	bne.n	8003012 <HAL_ADC_ConfigChannel+0x226>
 8003006:	683b      	ldr	r3, [r7, #0]
 8003008:	681b      	ldr	r3, [r3, #0]
 800300a:	0e9b      	lsrs	r3, r3, #26
 800300c:	f003 031f 	and.w	r3, r3, #31
 8003010:	e00a      	b.n	8003028 <HAL_ADC_ConfigChannel+0x23c>
 8003012:	683b      	ldr	r3, [r7, #0]
 8003014:	681b      	ldr	r3, [r3, #0]
 8003016:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003018:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800301a:	fa93 f3a3 	rbit	r3, r3
 800301e:	667b      	str	r3, [r7, #100]	; 0x64
  return result;
 8003020:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8003022:	fab3 f383 	clz	r3, r3
 8003026:	b2db      	uxtb	r3, r3
 8003028:	429a      	cmp	r2, r3
 800302a:	d106      	bne.n	800303a <HAL_ADC_ConfigChannel+0x24e>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 800302c:	687b      	ldr	r3, [r7, #4]
 800302e:	681b      	ldr	r3, [r3, #0]
 8003030:	2200      	movs	r2, #0
 8003032:	2101      	movs	r1, #1
 8003034:	4618      	mov	r0, r3
 8003036:	f7ff fbc1 	bl	80027bc <LL_ADC_SetOffsetState>
        }
        if(__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 800303a:	687b      	ldr	r3, [r7, #4]
 800303c:	681b      	ldr	r3, [r3, #0]
 800303e:	2102      	movs	r1, #2
 8003040:	4618      	mov	r0, r3
 8003042:	f7ff fba7 	bl	8002794 <LL_ADC_GetOffsetChannel>
 8003046:	4603      	mov	r3, r0
 8003048:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800304c:	2b00      	cmp	r3, #0
 800304e:	d10a      	bne.n	8003066 <HAL_ADC_ConfigChannel+0x27a>
 8003050:	687b      	ldr	r3, [r7, #4]
 8003052:	681b      	ldr	r3, [r3, #0]
 8003054:	2102      	movs	r1, #2
 8003056:	4618      	mov	r0, r3
 8003058:	f7ff fb9c 	bl	8002794 <LL_ADC_GetOffsetChannel>
 800305c:	4603      	mov	r3, r0
 800305e:	0e9b      	lsrs	r3, r3, #26
 8003060:	f003 021f 	and.w	r2, r3, #31
 8003064:	e010      	b.n	8003088 <HAL_ADC_ConfigChannel+0x29c>
 8003066:	687b      	ldr	r3, [r7, #4]
 8003068:	681b      	ldr	r3, [r3, #0]
 800306a:	2102      	movs	r1, #2
 800306c:	4618      	mov	r0, r3
 800306e:	f7ff fb91 	bl	8002794 <LL_ADC_GetOffsetChannel>
 8003072:	4603      	mov	r3, r0
 8003074:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003076:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8003078:	fa93 f3a3 	rbit	r3, r3
 800307c:	65fb      	str	r3, [r7, #92]	; 0x5c
  return result;
 800307e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003080:	fab3 f383 	clz	r3, r3
 8003084:	b2db      	uxtb	r3, r3
 8003086:	461a      	mov	r2, r3
 8003088:	683b      	ldr	r3, [r7, #0]
 800308a:	681b      	ldr	r3, [r3, #0]
 800308c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003090:	2b00      	cmp	r3, #0
 8003092:	d105      	bne.n	80030a0 <HAL_ADC_ConfigChannel+0x2b4>
 8003094:	683b      	ldr	r3, [r7, #0]
 8003096:	681b      	ldr	r3, [r3, #0]
 8003098:	0e9b      	lsrs	r3, r3, #26
 800309a:	f003 031f 	and.w	r3, r3, #31
 800309e:	e00a      	b.n	80030b6 <HAL_ADC_ConfigChannel+0x2ca>
 80030a0:	683b      	ldr	r3, [r7, #0]
 80030a2:	681b      	ldr	r3, [r3, #0]
 80030a4:	65bb      	str	r3, [r7, #88]	; 0x58
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80030a6:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80030a8:	fa93 f3a3 	rbit	r3, r3
 80030ac:	657b      	str	r3, [r7, #84]	; 0x54
  return result;
 80030ae:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80030b0:	fab3 f383 	clz	r3, r3
 80030b4:	b2db      	uxtb	r3, r3
 80030b6:	429a      	cmp	r2, r3
 80030b8:	d106      	bne.n	80030c8 <HAL_ADC_ConfigChannel+0x2dc>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 80030ba:	687b      	ldr	r3, [r7, #4]
 80030bc:	681b      	ldr	r3, [r3, #0]
 80030be:	2200      	movs	r2, #0
 80030c0:	2102      	movs	r1, #2
 80030c2:	4618      	mov	r0, r3
 80030c4:	f7ff fb7a 	bl	80027bc <LL_ADC_SetOffsetState>
        }
        if(__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 80030c8:	687b      	ldr	r3, [r7, #4]
 80030ca:	681b      	ldr	r3, [r3, #0]
 80030cc:	2103      	movs	r1, #3
 80030ce:	4618      	mov	r0, r3
 80030d0:	f7ff fb60 	bl	8002794 <LL_ADC_GetOffsetChannel>
 80030d4:	4603      	mov	r3, r0
 80030d6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80030da:	2b00      	cmp	r3, #0
 80030dc:	d10a      	bne.n	80030f4 <HAL_ADC_ConfigChannel+0x308>
 80030de:	687b      	ldr	r3, [r7, #4]
 80030e0:	681b      	ldr	r3, [r3, #0]
 80030e2:	2103      	movs	r1, #3
 80030e4:	4618      	mov	r0, r3
 80030e6:	f7ff fb55 	bl	8002794 <LL_ADC_GetOffsetChannel>
 80030ea:	4603      	mov	r3, r0
 80030ec:	0e9b      	lsrs	r3, r3, #26
 80030ee:	f003 021f 	and.w	r2, r3, #31
 80030f2:	e010      	b.n	8003116 <HAL_ADC_ConfigChannel+0x32a>
 80030f4:	687b      	ldr	r3, [r7, #4]
 80030f6:	681b      	ldr	r3, [r3, #0]
 80030f8:	2103      	movs	r1, #3
 80030fa:	4618      	mov	r0, r3
 80030fc:	f7ff fb4a 	bl	8002794 <LL_ADC_GetOffsetChannel>
 8003100:	4603      	mov	r3, r0
 8003102:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003104:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003106:	fa93 f3a3 	rbit	r3, r3
 800310a:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 800310c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800310e:	fab3 f383 	clz	r3, r3
 8003112:	b2db      	uxtb	r3, r3
 8003114:	461a      	mov	r2, r3
 8003116:	683b      	ldr	r3, [r7, #0]
 8003118:	681b      	ldr	r3, [r3, #0]
 800311a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800311e:	2b00      	cmp	r3, #0
 8003120:	d105      	bne.n	800312e <HAL_ADC_ConfigChannel+0x342>
 8003122:	683b      	ldr	r3, [r7, #0]
 8003124:	681b      	ldr	r3, [r3, #0]
 8003126:	0e9b      	lsrs	r3, r3, #26
 8003128:	f003 031f 	and.w	r3, r3, #31
 800312c:	e00a      	b.n	8003144 <HAL_ADC_ConfigChannel+0x358>
 800312e:	683b      	ldr	r3, [r7, #0]
 8003130:	681b      	ldr	r3, [r3, #0]
 8003132:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003134:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003136:	fa93 f3a3 	rbit	r3, r3
 800313a:	647b      	str	r3, [r7, #68]	; 0x44
  return result;
 800313c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800313e:	fab3 f383 	clz	r3, r3
 8003142:	b2db      	uxtb	r3, r3
 8003144:	429a      	cmp	r2, r3
 8003146:	d106      	bne.n	8003156 <HAL_ADC_ConfigChannel+0x36a>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 8003148:	687b      	ldr	r3, [r7, #4]
 800314a:	681b      	ldr	r3, [r3, #0]
 800314c:	2200      	movs	r2, #0
 800314e:	2103      	movs	r1, #3
 8003150:	4618      	mov	r0, r3
 8003152:	f7ff fb33 	bl	80027bc <LL_ADC_SetOffsetState>
    }

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8003156:	687b      	ldr	r3, [r7, #4]
 8003158:	681b      	ldr	r3, [r3, #0]
 800315a:	4618      	mov	r0, r3
 800315c:	f7ff fc4c 	bl	80029f8 <LL_ADC_IsEnabled>
 8003160:	4603      	mov	r3, r0
 8003162:	2b00      	cmp	r3, #0
 8003164:	f040 810c 	bne.w	8003380 <HAL_ADC_ConfigChannel+0x594>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfig->Channel, sConfig->SingleDiff);
 8003168:	687b      	ldr	r3, [r7, #4]
 800316a:	6818      	ldr	r0, [r3, #0]
 800316c:	683b      	ldr	r3, [r7, #0]
 800316e:	6819      	ldr	r1, [r3, #0]
 8003170:	683b      	ldr	r3, [r7, #0]
 8003172:	68db      	ldr	r3, [r3, #12]
 8003174:	461a      	mov	r2, r3
 8003176:	f7ff fbcd 	bl	8002914 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (sConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 800317a:	683b      	ldr	r3, [r7, #0]
 800317c:	68db      	ldr	r3, [r3, #12]
 800317e:	4aaf      	ldr	r2, [pc, #700]	; (800343c <HAL_ADC_ConfigChannel+0x650>)
 8003180:	4293      	cmp	r3, r2
 8003182:	f040 80fd 	bne.w	8003380 <HAL_ADC_ConfigChannel+0x594>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8003186:	687b      	ldr	r3, [r7, #4]
 8003188:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 800318a:	683b      	ldr	r3, [r7, #0]
 800318c:	681b      	ldr	r3, [r3, #0]
 800318e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003192:	2b00      	cmp	r3, #0
 8003194:	d10b      	bne.n	80031ae <HAL_ADC_ConfigChannel+0x3c2>
 8003196:	683b      	ldr	r3, [r7, #0]
 8003198:	681b      	ldr	r3, [r3, #0]
 800319a:	0e9b      	lsrs	r3, r3, #26
 800319c:	3301      	adds	r3, #1
 800319e:	f003 031f 	and.w	r3, r3, #31
 80031a2:	2b09      	cmp	r3, #9
 80031a4:	bf94      	ite	ls
 80031a6:	2301      	movls	r3, #1
 80031a8:	2300      	movhi	r3, #0
 80031aa:	b2db      	uxtb	r3, r3
 80031ac:	e012      	b.n	80031d4 <HAL_ADC_ConfigChannel+0x3e8>
 80031ae:	683b      	ldr	r3, [r7, #0]
 80031b0:	681b      	ldr	r3, [r3, #0]
 80031b2:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80031b4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80031b6:	fa93 f3a3 	rbit	r3, r3
 80031ba:	63fb      	str	r3, [r7, #60]	; 0x3c
  return result;
 80031bc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80031be:	fab3 f383 	clz	r3, r3
 80031c2:	b2db      	uxtb	r3, r3
 80031c4:	3301      	adds	r3, #1
 80031c6:	f003 031f 	and.w	r3, r3, #31
 80031ca:	2b09      	cmp	r3, #9
 80031cc:	bf94      	ite	ls
 80031ce:	2301      	movls	r3, #1
 80031d0:	2300      	movhi	r3, #0
 80031d2:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80031d4:	2b00      	cmp	r3, #0
 80031d6:	d064      	beq.n	80032a2 <HAL_ADC_ConfigChannel+0x4b6>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 80031d8:	683b      	ldr	r3, [r7, #0]
 80031da:	681b      	ldr	r3, [r3, #0]
 80031dc:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80031e0:	2b00      	cmp	r3, #0
 80031e2:	d107      	bne.n	80031f4 <HAL_ADC_ConfigChannel+0x408>
 80031e4:	683b      	ldr	r3, [r7, #0]
 80031e6:	681b      	ldr	r3, [r3, #0]
 80031e8:	0e9b      	lsrs	r3, r3, #26
 80031ea:	3301      	adds	r3, #1
 80031ec:	069b      	lsls	r3, r3, #26
 80031ee:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80031f2:	e00e      	b.n	8003212 <HAL_ADC_ConfigChannel+0x426>
 80031f4:	683b      	ldr	r3, [r7, #0]
 80031f6:	681b      	ldr	r3, [r3, #0]
 80031f8:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80031fa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80031fc:	fa93 f3a3 	rbit	r3, r3
 8003200:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 8003202:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003204:	fab3 f383 	clz	r3, r3
 8003208:	b2db      	uxtb	r3, r3
 800320a:	3301      	adds	r3, #1
 800320c:	069b      	lsls	r3, r3, #26
 800320e:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8003212:	683b      	ldr	r3, [r7, #0]
 8003214:	681b      	ldr	r3, [r3, #0]
 8003216:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800321a:	2b00      	cmp	r3, #0
 800321c:	d109      	bne.n	8003232 <HAL_ADC_ConfigChannel+0x446>
 800321e:	683b      	ldr	r3, [r7, #0]
 8003220:	681b      	ldr	r3, [r3, #0]
 8003222:	0e9b      	lsrs	r3, r3, #26
 8003224:	3301      	adds	r3, #1
 8003226:	f003 031f 	and.w	r3, r3, #31
 800322a:	2101      	movs	r1, #1
 800322c:	fa01 f303 	lsl.w	r3, r1, r3
 8003230:	e010      	b.n	8003254 <HAL_ADC_ConfigChannel+0x468>
 8003232:	683b      	ldr	r3, [r7, #0]
 8003234:	681b      	ldr	r3, [r3, #0]
 8003236:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003238:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800323a:	fa93 f3a3 	rbit	r3, r3
 800323e:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 8003240:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003242:	fab3 f383 	clz	r3, r3
 8003246:	b2db      	uxtb	r3, r3
 8003248:	3301      	adds	r3, #1
 800324a:	f003 031f 	and.w	r3, r3, #31
 800324e:	2101      	movs	r1, #1
 8003250:	fa01 f303 	lsl.w	r3, r1, r3
 8003254:	ea42 0103 	orr.w	r1, r2, r3
 8003258:	683b      	ldr	r3, [r7, #0]
 800325a:	681b      	ldr	r3, [r3, #0]
 800325c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003260:	2b00      	cmp	r3, #0
 8003262:	d10a      	bne.n	800327a <HAL_ADC_ConfigChannel+0x48e>
 8003264:	683b      	ldr	r3, [r7, #0]
 8003266:	681b      	ldr	r3, [r3, #0]
 8003268:	0e9b      	lsrs	r3, r3, #26
 800326a:	3301      	adds	r3, #1
 800326c:	f003 021f 	and.w	r2, r3, #31
 8003270:	4613      	mov	r3, r2
 8003272:	005b      	lsls	r3, r3, #1
 8003274:	4413      	add	r3, r2
 8003276:	051b      	lsls	r3, r3, #20
 8003278:	e011      	b.n	800329e <HAL_ADC_ConfigChannel+0x4b2>
 800327a:	683b      	ldr	r3, [r7, #0]
 800327c:	681b      	ldr	r3, [r3, #0]
 800327e:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003280:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003282:	fa93 f3a3 	rbit	r3, r3
 8003286:	627b      	str	r3, [r7, #36]	; 0x24
  return result;
 8003288:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800328a:	fab3 f383 	clz	r3, r3
 800328e:	b2db      	uxtb	r3, r3
 8003290:	3301      	adds	r3, #1
 8003292:	f003 021f 	and.w	r2, r3, #31
 8003296:	4613      	mov	r3, r2
 8003298:	005b      	lsls	r3, r3, #1
 800329a:	4413      	add	r3, r2
 800329c:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 800329e:	430b      	orrs	r3, r1
 80032a0:	e069      	b.n	8003376 <HAL_ADC_ConfigChannel+0x58a>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 80032a2:	683b      	ldr	r3, [r7, #0]
 80032a4:	681b      	ldr	r3, [r3, #0]
 80032a6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80032aa:	2b00      	cmp	r3, #0
 80032ac:	d107      	bne.n	80032be <HAL_ADC_ConfigChannel+0x4d2>
 80032ae:	683b      	ldr	r3, [r7, #0]
 80032b0:	681b      	ldr	r3, [r3, #0]
 80032b2:	0e9b      	lsrs	r3, r3, #26
 80032b4:	3301      	adds	r3, #1
 80032b6:	069b      	lsls	r3, r3, #26
 80032b8:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80032bc:	e00e      	b.n	80032dc <HAL_ADC_ConfigChannel+0x4f0>
 80032be:	683b      	ldr	r3, [r7, #0]
 80032c0:	681b      	ldr	r3, [r3, #0]
 80032c2:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80032c4:	6a3b      	ldr	r3, [r7, #32]
 80032c6:	fa93 f3a3 	rbit	r3, r3
 80032ca:	61fb      	str	r3, [r7, #28]
  return result;
 80032cc:	69fb      	ldr	r3, [r7, #28]
 80032ce:	fab3 f383 	clz	r3, r3
 80032d2:	b2db      	uxtb	r3, r3
 80032d4:	3301      	adds	r3, #1
 80032d6:	069b      	lsls	r3, r3, #26
 80032d8:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80032dc:	683b      	ldr	r3, [r7, #0]
 80032de:	681b      	ldr	r3, [r3, #0]
 80032e0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80032e4:	2b00      	cmp	r3, #0
 80032e6:	d109      	bne.n	80032fc <HAL_ADC_ConfigChannel+0x510>
 80032e8:	683b      	ldr	r3, [r7, #0]
 80032ea:	681b      	ldr	r3, [r3, #0]
 80032ec:	0e9b      	lsrs	r3, r3, #26
 80032ee:	3301      	adds	r3, #1
 80032f0:	f003 031f 	and.w	r3, r3, #31
 80032f4:	2101      	movs	r1, #1
 80032f6:	fa01 f303 	lsl.w	r3, r1, r3
 80032fa:	e010      	b.n	800331e <HAL_ADC_ConfigChannel+0x532>
 80032fc:	683b      	ldr	r3, [r7, #0]
 80032fe:	681b      	ldr	r3, [r3, #0]
 8003300:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003302:	69bb      	ldr	r3, [r7, #24]
 8003304:	fa93 f3a3 	rbit	r3, r3
 8003308:	617b      	str	r3, [r7, #20]
  return result;
 800330a:	697b      	ldr	r3, [r7, #20]
 800330c:	fab3 f383 	clz	r3, r3
 8003310:	b2db      	uxtb	r3, r3
 8003312:	3301      	adds	r3, #1
 8003314:	f003 031f 	and.w	r3, r3, #31
 8003318:	2101      	movs	r1, #1
 800331a:	fa01 f303 	lsl.w	r3, r1, r3
 800331e:	ea42 0103 	orr.w	r1, r2, r3
 8003322:	683b      	ldr	r3, [r7, #0]
 8003324:	681b      	ldr	r3, [r3, #0]
 8003326:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800332a:	2b00      	cmp	r3, #0
 800332c:	d10d      	bne.n	800334a <HAL_ADC_ConfigChannel+0x55e>
 800332e:	683b      	ldr	r3, [r7, #0]
 8003330:	681b      	ldr	r3, [r3, #0]
 8003332:	0e9b      	lsrs	r3, r3, #26
 8003334:	3301      	adds	r3, #1
 8003336:	f003 021f 	and.w	r2, r3, #31
 800333a:	4613      	mov	r3, r2
 800333c:	005b      	lsls	r3, r3, #1
 800333e:	4413      	add	r3, r2
 8003340:	3b1e      	subs	r3, #30
 8003342:	051b      	lsls	r3, r3, #20
 8003344:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8003348:	e014      	b.n	8003374 <HAL_ADC_ConfigChannel+0x588>
 800334a:	683b      	ldr	r3, [r7, #0]
 800334c:	681b      	ldr	r3, [r3, #0]
 800334e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003350:	693b      	ldr	r3, [r7, #16]
 8003352:	fa93 f3a3 	rbit	r3, r3
 8003356:	60fb      	str	r3, [r7, #12]
  return result;
 8003358:	68fb      	ldr	r3, [r7, #12]
 800335a:	fab3 f383 	clz	r3, r3
 800335e:	b2db      	uxtb	r3, r3
 8003360:	3301      	adds	r3, #1
 8003362:	f003 021f 	and.w	r2, r3, #31
 8003366:	4613      	mov	r3, r2
 8003368:	005b      	lsls	r3, r3, #1
 800336a:	4413      	add	r3, r2
 800336c:	3b1e      	subs	r3, #30
 800336e:	051b      	lsls	r3, r3, #20
 8003370:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8003374:	430b      	orrs	r3, r1
 8003376:	683a      	ldr	r2, [r7, #0]
 8003378:	6892      	ldr	r2, [r2, #8]
 800337a:	4619      	mov	r1, r3
 800337c:	f7ff faa2 	bl	80028c4 <LL_ADC_SetChannelSamplingTime>
    /* If internal channel selected, enable dedicated internal buffers and    */
    /* paths.                                                                 */
    /* Note: these internal measurement paths can be disabled using           */
    /* HAL_ADC_DeInit().                                                      */

    if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 8003380:	683b      	ldr	r3, [r7, #0]
 8003382:	681a      	ldr	r2, [r3, #0]
 8003384:	4b2e      	ldr	r3, [pc, #184]	; (8003440 <HAL_ADC_ConfigChannel+0x654>)
 8003386:	4013      	ands	r3, r2
 8003388:	2b00      	cmp	r3, #0
 800338a:	f000 80c9 	beq.w	8003520 <HAL_ADC_ConfigChannel+0x734>
    {
      tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 800338e:	687b      	ldr	r3, [r7, #4]
 8003390:	681b      	ldr	r3, [r3, #0]
 8003392:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8003396:	d004      	beq.n	80033a2 <HAL_ADC_ConfigChannel+0x5b6>
 8003398:	687b      	ldr	r3, [r7, #4]
 800339a:	681b      	ldr	r3, [r3, #0]
 800339c:	4a29      	ldr	r2, [pc, #164]	; (8003444 <HAL_ADC_ConfigChannel+0x658>)
 800339e:	4293      	cmp	r3, r2
 80033a0:	d101      	bne.n	80033a6 <HAL_ADC_ConfigChannel+0x5ba>
 80033a2:	4b29      	ldr	r3, [pc, #164]	; (8003448 <HAL_ADC_ConfigChannel+0x65c>)
 80033a4:	e000      	b.n	80033a8 <HAL_ADC_ConfigChannel+0x5bc>
 80033a6:	4b29      	ldr	r3, [pc, #164]	; (800344c <HAL_ADC_ConfigChannel+0x660>)
 80033a8:	4618      	mov	r0, r3
 80033aa:	f7ff f9c3 	bl	8002734 <LL_ADC_GetCommonPathInternalCh>
 80033ae:	f8c7 0084 	str.w	r0, [r7, #132]	; 0x84

      /* If the requested internal measurement path has already been enabled, */
      /* bypass the configuration processing.                                 */
      if (((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR_ADC1) || (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR_ADC5))
 80033b2:	683b      	ldr	r3, [r7, #0]
 80033b4:	681b      	ldr	r3, [r3, #0]
 80033b6:	4a26      	ldr	r2, [pc, #152]	; (8003450 <HAL_ADC_ConfigChannel+0x664>)
 80033b8:	4293      	cmp	r3, r2
 80033ba:	d004      	beq.n	80033c6 <HAL_ADC_ConfigChannel+0x5da>
 80033bc:	683b      	ldr	r3, [r7, #0]
 80033be:	681b      	ldr	r3, [r3, #0]
 80033c0:	4a24      	ldr	r2, [pc, #144]	; (8003454 <HAL_ADC_ConfigChannel+0x668>)
 80033c2:	4293      	cmp	r3, r2
 80033c4:	d14e      	bne.n	8003464 <HAL_ADC_ConfigChannel+0x678>
          && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 80033c6:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80033ca:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80033ce:	2b00      	cmp	r3, #0
 80033d0:	d148      	bne.n	8003464 <HAL_ADC_ConfigChannel+0x678>
      {
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 80033d2:	687b      	ldr	r3, [r7, #4]
 80033d4:	681b      	ldr	r3, [r3, #0]
 80033d6:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80033da:	d005      	beq.n	80033e8 <HAL_ADC_ConfigChannel+0x5fc>
 80033dc:	687b      	ldr	r3, [r7, #4]
 80033de:	681b      	ldr	r3, [r3, #0]
 80033e0:	4a1d      	ldr	r2, [pc, #116]	; (8003458 <HAL_ADC_ConfigChannel+0x66c>)
 80033e2:	4293      	cmp	r3, r2
 80033e4:	f040 8099 	bne.w	800351a <HAL_ADC_ConfigChannel+0x72e>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80033e8:	687b      	ldr	r3, [r7, #4]
 80033ea:	681b      	ldr	r3, [r3, #0]
 80033ec:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80033f0:	d004      	beq.n	80033fc <HAL_ADC_ConfigChannel+0x610>
 80033f2:	687b      	ldr	r3, [r7, #4]
 80033f4:	681b      	ldr	r3, [r3, #0]
 80033f6:	4a13      	ldr	r2, [pc, #76]	; (8003444 <HAL_ADC_ConfigChannel+0x658>)
 80033f8:	4293      	cmp	r3, r2
 80033fa:	d101      	bne.n	8003400 <HAL_ADC_ConfigChannel+0x614>
 80033fc:	4a12      	ldr	r2, [pc, #72]	; (8003448 <HAL_ADC_ConfigChannel+0x65c>)
 80033fe:	e000      	b.n	8003402 <HAL_ADC_ConfigChannel+0x616>
 8003400:	4a12      	ldr	r2, [pc, #72]	; (800344c <HAL_ADC_ConfigChannel+0x660>)
 8003402:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8003406:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 800340a:	4619      	mov	r1, r3
 800340c:	4610      	mov	r0, r2
 800340e:	f7ff f97e 	bl	800270e <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * (SystemCoreClock / (100000UL * 2UL)));
 8003412:	4b12      	ldr	r3, [pc, #72]	; (800345c <HAL_ADC_ConfigChannel+0x670>)
 8003414:	681b      	ldr	r3, [r3, #0]
 8003416:	099b      	lsrs	r3, r3, #6
 8003418:	4a11      	ldr	r2, [pc, #68]	; (8003460 <HAL_ADC_ConfigChannel+0x674>)
 800341a:	fba2 2303 	umull	r2, r3, r2, r3
 800341e:	099a      	lsrs	r2, r3, #6
 8003420:	4613      	mov	r3, r2
 8003422:	005b      	lsls	r3, r3, #1
 8003424:	4413      	add	r3, r2
 8003426:	009b      	lsls	r3, r3, #2
 8003428:	60bb      	str	r3, [r7, #8]
          while (wait_loop_index != 0UL)
 800342a:	e002      	b.n	8003432 <HAL_ADC_ConfigChannel+0x646>
          {
            wait_loop_index--;
 800342c:	68bb      	ldr	r3, [r7, #8]
 800342e:	3b01      	subs	r3, #1
 8003430:	60bb      	str	r3, [r7, #8]
          while (wait_loop_index != 0UL)
 8003432:	68bb      	ldr	r3, [r7, #8]
 8003434:	2b00      	cmp	r3, #0
 8003436:	d1f9      	bne.n	800342c <HAL_ADC_ConfigChannel+0x640>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8003438:	e06f      	b.n	800351a <HAL_ADC_ConfigChannel+0x72e>
 800343a:	bf00      	nop
 800343c:	407f0000 	.word	0x407f0000
 8003440:	80080000 	.word	0x80080000
 8003444:	50000100 	.word	0x50000100
 8003448:	50000300 	.word	0x50000300
 800344c:	50000700 	.word	0x50000700
 8003450:	c3210000 	.word	0xc3210000
 8003454:	90c00010 	.word	0x90c00010
 8003458:	50000600 	.word	0x50000600
 800345c:	2000000c 	.word	0x2000000c
 8003460:	053e2d63 	.word	0x053e2d63
          }
        }
      }
      else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8003464:	683b      	ldr	r3, [r7, #0]
 8003466:	681b      	ldr	r3, [r3, #0]
 8003468:	4a32      	ldr	r2, [pc, #200]	; (8003534 <HAL_ADC_ConfigChannel+0x748>)
 800346a:	4293      	cmp	r3, r2
 800346c:	d125      	bne.n	80034ba <HAL_ADC_ConfigChannel+0x6ce>
 800346e:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8003472:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003476:	2b00      	cmp	r3, #0
 8003478:	d11f      	bne.n	80034ba <HAL_ADC_ConfigChannel+0x6ce>
      {
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 800347a:	687b      	ldr	r3, [r7, #4]
 800347c:	681b      	ldr	r3, [r3, #0]
 800347e:	4a2e      	ldr	r2, [pc, #184]	; (8003538 <HAL_ADC_ConfigChannel+0x74c>)
 8003480:	4293      	cmp	r3, r2
 8003482:	d104      	bne.n	800348e <HAL_ADC_ConfigChannel+0x6a2>
 8003484:	687b      	ldr	r3, [r7, #4]
 8003486:	681b      	ldr	r3, [r3, #0]
 8003488:	4a2c      	ldr	r2, [pc, #176]	; (800353c <HAL_ADC_ConfigChannel+0x750>)
 800348a:	4293      	cmp	r3, r2
 800348c:	d047      	beq.n	800351e <HAL_ADC_ConfigChannel+0x732>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 800348e:	687b      	ldr	r3, [r7, #4]
 8003490:	681b      	ldr	r3, [r3, #0]
 8003492:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8003496:	d004      	beq.n	80034a2 <HAL_ADC_ConfigChannel+0x6b6>
 8003498:	687b      	ldr	r3, [r7, #4]
 800349a:	681b      	ldr	r3, [r3, #0]
 800349c:	4a26      	ldr	r2, [pc, #152]	; (8003538 <HAL_ADC_ConfigChannel+0x74c>)
 800349e:	4293      	cmp	r3, r2
 80034a0:	d101      	bne.n	80034a6 <HAL_ADC_ConfigChannel+0x6ba>
 80034a2:	4a27      	ldr	r2, [pc, #156]	; (8003540 <HAL_ADC_ConfigChannel+0x754>)
 80034a4:	e000      	b.n	80034a8 <HAL_ADC_ConfigChannel+0x6bc>
 80034a6:	4a27      	ldr	r2, [pc, #156]	; (8003544 <HAL_ADC_ConfigChannel+0x758>)
 80034a8:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80034ac:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80034b0:	4619      	mov	r1, r3
 80034b2:	4610      	mov	r0, r2
 80034b4:	f7ff f92b 	bl	800270e <LL_ADC_SetCommonPathInternalCh>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 80034b8:	e031      	b.n	800351e <HAL_ADC_ConfigChannel+0x732>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
      }
      else if ((sConfig->Channel == ADC_CHANNEL_VREFINT)
 80034ba:	683b      	ldr	r3, [r7, #0]
 80034bc:	681b      	ldr	r3, [r3, #0]
 80034be:	4a22      	ldr	r2, [pc, #136]	; (8003548 <HAL_ADC_ConfigChannel+0x75c>)
 80034c0:	4293      	cmp	r3, r2
 80034c2:	d12d      	bne.n	8003520 <HAL_ADC_ConfigChannel+0x734>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 80034c4:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80034c8:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80034cc:	2b00      	cmp	r3, #0
 80034ce:	d127      	bne.n	8003520 <HAL_ADC_ConfigChannel+0x734>
      {
        if (ADC_VREFINT_INSTANCE(hadc))
 80034d0:	687b      	ldr	r3, [r7, #4]
 80034d2:	681b      	ldr	r3, [r3, #0]
 80034d4:	4a18      	ldr	r2, [pc, #96]	; (8003538 <HAL_ADC_ConfigChannel+0x74c>)
 80034d6:	4293      	cmp	r3, r2
 80034d8:	d022      	beq.n	8003520 <HAL_ADC_ConfigChannel+0x734>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80034da:	687b      	ldr	r3, [r7, #4]
 80034dc:	681b      	ldr	r3, [r3, #0]
 80034de:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80034e2:	d004      	beq.n	80034ee <HAL_ADC_ConfigChannel+0x702>
 80034e4:	687b      	ldr	r3, [r7, #4]
 80034e6:	681b      	ldr	r3, [r3, #0]
 80034e8:	4a13      	ldr	r2, [pc, #76]	; (8003538 <HAL_ADC_ConfigChannel+0x74c>)
 80034ea:	4293      	cmp	r3, r2
 80034ec:	d101      	bne.n	80034f2 <HAL_ADC_ConfigChannel+0x706>
 80034ee:	4a14      	ldr	r2, [pc, #80]	; (8003540 <HAL_ADC_ConfigChannel+0x754>)
 80034f0:	e000      	b.n	80034f4 <HAL_ADC_ConfigChannel+0x708>
 80034f2:	4a14      	ldr	r2, [pc, #80]	; (8003544 <HAL_ADC_ConfigChannel+0x758>)
 80034f4:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80034f8:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80034fc:	4619      	mov	r1, r3
 80034fe:	4610      	mov	r0, r2
 8003500:	f7ff f905 	bl	800270e <LL_ADC_SetCommonPathInternalCh>
 8003504:	e00c      	b.n	8003520 <HAL_ADC_ConfigChannel+0x734>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003506:	687b      	ldr	r3, [r7, #4]
 8003508:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800350a:	f043 0220 	orr.w	r2, r3, #32
 800350e:	687b      	ldr	r3, [r7, #4]
 8003510:	65da      	str	r2, [r3, #92]	; 0x5c

    tmp_hal_status = HAL_ERROR;
 8003512:	2301      	movs	r3, #1
 8003514:	f887 3097 	strb.w	r3, [r7, #151]	; 0x97
 8003518:	e002      	b.n	8003520 <HAL_ADC_ConfigChannel+0x734>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 800351a:	bf00      	nop
 800351c:	e000      	b.n	8003520 <HAL_ADC_ConfigChannel+0x734>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 800351e:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8003520:	687b      	ldr	r3, [r7, #4]
 8003522:	2200      	movs	r2, #0
 8003524:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

  /* Return function status */
  return tmp_hal_status;
 8003528:	f897 3097 	ldrb.w	r3, [r7, #151]	; 0x97
}
 800352c:	4618      	mov	r0, r3
 800352e:	3798      	adds	r7, #152	; 0x98
 8003530:	46bd      	mov	sp, r7
 8003532:	bd80      	pop	{r7, pc}
 8003534:	c7520000 	.word	0xc7520000
 8003538:	50000100 	.word	0x50000100
 800353c:	50000500 	.word	0x50000500
 8003540:	50000300 	.word	0x50000300
 8003544:	50000700 	.word	0x50000700
 8003548:	cb840000 	.word	0xcb840000

0800354c <LL_ADC_IsEnabled>:
{
 800354c:	b480      	push	{r7}
 800354e:	b083      	sub	sp, #12
 8003550:	af00      	add	r7, sp, #0
 8003552:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8003554:	687b      	ldr	r3, [r7, #4]
 8003556:	689b      	ldr	r3, [r3, #8]
 8003558:	f003 0301 	and.w	r3, r3, #1
 800355c:	2b01      	cmp	r3, #1
 800355e:	d101      	bne.n	8003564 <LL_ADC_IsEnabled+0x18>
 8003560:	2301      	movs	r3, #1
 8003562:	e000      	b.n	8003566 <LL_ADC_IsEnabled+0x1a>
 8003564:	2300      	movs	r3, #0
}
 8003566:	4618      	mov	r0, r3
 8003568:	370c      	adds	r7, #12
 800356a:	46bd      	mov	sp, r7
 800356c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003570:	4770      	bx	lr

08003572 <LL_ADC_REG_IsConversionOngoing>:
{
 8003572:	b480      	push	{r7}
 8003574:	b083      	sub	sp, #12
 8003576:	af00      	add	r7, sp, #0
 8003578:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 800357a:	687b      	ldr	r3, [r7, #4]
 800357c:	689b      	ldr	r3, [r3, #8]
 800357e:	f003 0304 	and.w	r3, r3, #4
 8003582:	2b04      	cmp	r3, #4
 8003584:	d101      	bne.n	800358a <LL_ADC_REG_IsConversionOngoing+0x18>
 8003586:	2301      	movs	r3, #1
 8003588:	e000      	b.n	800358c <LL_ADC_REG_IsConversionOngoing+0x1a>
 800358a:	2300      	movs	r3, #0
}
 800358c:	4618      	mov	r0, r3
 800358e:	370c      	adds	r7, #12
 8003590:	46bd      	mov	sp, r7
 8003592:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003596:	4770      	bx	lr

08003598 <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param multimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, ADC_MultiModeTypeDef *multimode)
{
 8003598:	b590      	push	{r4, r7, lr}
 800359a:	b0a1      	sub	sp, #132	; 0x84
 800359c:	af00      	add	r7, sp, #0
 800359e:	6078      	str	r0, [r7, #4]
 80035a0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80035a2:	2300      	movs	r3, #0
 80035a4:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
    assert_param(IS_ADC_DMA_ACCESS_MULTIMODE(multimode->DMAAccessMode));
    assert_param(IS_ADC_SAMPLING_DELAY(multimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 80035a8:	687b      	ldr	r3, [r7, #4]
 80035aa:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 80035ae:	2b01      	cmp	r3, #1
 80035b0:	d101      	bne.n	80035b6 <HAL_ADCEx_MultiModeConfigChannel+0x1e>
 80035b2:	2302      	movs	r3, #2
 80035b4:	e0e3      	b.n	800377e <HAL_ADCEx_MultiModeConfigChannel+0x1e6>
 80035b6:	687b      	ldr	r3, [r7, #4]
 80035b8:	2201      	movs	r2, #1
 80035ba:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

  ADC_MULTI_SLAVE(hadc, &tmphadcSlave);
 80035be:	687b      	ldr	r3, [r7, #4]
 80035c0:	681b      	ldr	r3, [r3, #0]
 80035c2:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80035c6:	d102      	bne.n	80035ce <HAL_ADCEx_MultiModeConfigChannel+0x36>
 80035c8:	4b6f      	ldr	r3, [pc, #444]	; (8003788 <HAL_ADCEx_MultiModeConfigChannel+0x1f0>)
 80035ca:	60bb      	str	r3, [r7, #8]
 80035cc:	e009      	b.n	80035e2 <HAL_ADCEx_MultiModeConfigChannel+0x4a>
 80035ce:	687b      	ldr	r3, [r7, #4]
 80035d0:	681b      	ldr	r3, [r3, #0]
 80035d2:	4a6e      	ldr	r2, [pc, #440]	; (800378c <HAL_ADCEx_MultiModeConfigChannel+0x1f4>)
 80035d4:	4293      	cmp	r3, r2
 80035d6:	d102      	bne.n	80035de <HAL_ADCEx_MultiModeConfigChannel+0x46>
 80035d8:	4b6d      	ldr	r3, [pc, #436]	; (8003790 <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 80035da:	60bb      	str	r3, [r7, #8]
 80035dc:	e001      	b.n	80035e2 <HAL_ADCEx_MultiModeConfigChannel+0x4a>
 80035de:	2300      	movs	r3, #0
 80035e0:	60bb      	str	r3, [r7, #8]

  if (tmphadcSlave.Instance == NULL)
 80035e2:	68bb      	ldr	r3, [r7, #8]
 80035e4:	2b00      	cmp	r3, #0
 80035e6:	d10b      	bne.n	8003600 <HAL_ADCEx_MultiModeConfigChannel+0x68>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80035e8:	687b      	ldr	r3, [r7, #4]
 80035ea:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80035ec:	f043 0220 	orr.w	r2, r3, #32
 80035f0:	687b      	ldr	r3, [r7, #4]
 80035f2:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 80035f4:	687b      	ldr	r3, [r7, #4]
 80035f6:	2200      	movs	r2, #0
 80035f8:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

    return HAL_ERROR;
 80035fc:	2301      	movs	r3, #1
 80035fe:	e0be      	b.n	800377e <HAL_ADCEx_MultiModeConfigChannel+0x1e6>
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DMA configuration                                           */
  /*  - Multimode DMA mode                                                    */
  tmphadcSlave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmphadcSlave)->Instance);
 8003600:	68bb      	ldr	r3, [r7, #8]
 8003602:	4618      	mov	r0, r3
 8003604:	f7ff ffb5 	bl	8003572 <LL_ADC_REG_IsConversionOngoing>
 8003608:	67b8      	str	r0, [r7, #120]	; 0x78
  if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 800360a:	687b      	ldr	r3, [r7, #4]
 800360c:	681b      	ldr	r3, [r3, #0]
 800360e:	4618      	mov	r0, r3
 8003610:	f7ff ffaf 	bl	8003572 <LL_ADC_REG_IsConversionOngoing>
 8003614:	4603      	mov	r3, r0
 8003616:	2b00      	cmp	r3, #0
 8003618:	f040 80a0 	bne.w	800375c <HAL_ADCEx_MultiModeConfigChannel+0x1c4>
      && (tmphadcSlave_conversion_on_going == 0UL))
 800361c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800361e:	2b00      	cmp	r3, #0
 8003620:	f040 809c 	bne.w	800375c <HAL_ADCEx_MultiModeConfigChannel+0x1c4>
  {
    /* Pointer to the common control register */
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 8003624:	687b      	ldr	r3, [r7, #4]
 8003626:	681b      	ldr	r3, [r3, #0]
 8003628:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800362c:	d004      	beq.n	8003638 <HAL_ADCEx_MultiModeConfigChannel+0xa0>
 800362e:	687b      	ldr	r3, [r7, #4]
 8003630:	681b      	ldr	r3, [r3, #0]
 8003632:	4a55      	ldr	r2, [pc, #340]	; (8003788 <HAL_ADCEx_MultiModeConfigChannel+0x1f0>)
 8003634:	4293      	cmp	r3, r2
 8003636:	d101      	bne.n	800363c <HAL_ADCEx_MultiModeConfigChannel+0xa4>
 8003638:	4b56      	ldr	r3, [pc, #344]	; (8003794 <HAL_ADCEx_MultiModeConfigChannel+0x1fc>)
 800363a:	e000      	b.n	800363e <HAL_ADCEx_MultiModeConfigChannel+0xa6>
 800363c:	4b56      	ldr	r3, [pc, #344]	; (8003798 <HAL_ADCEx_MultiModeConfigChannel+0x200>)
 800363e:	677b      	str	r3, [r7, #116]	; 0x74

    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8003640:	683b      	ldr	r3, [r7, #0]
 8003642:	681b      	ldr	r3, [r3, #0]
 8003644:	2b00      	cmp	r3, #0
 8003646:	d04b      	beq.n	80036e0 <HAL_ADCEx_MultiModeConfigChannel+0x148>
    {
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG,
 8003648:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800364a:	689b      	ldr	r3, [r3, #8]
 800364c:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8003650:	683b      	ldr	r3, [r7, #0]
 8003652:	6859      	ldr	r1, [r3, #4]
 8003654:	687b      	ldr	r3, [r7, #4]
 8003656:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 800365a:	035b      	lsls	r3, r3, #13
 800365c:	430b      	orrs	r3, r1
 800365e:	431a      	orrs	r2, r3
 8003660:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003662:	609a      	str	r2, [r3, #8]
      /*      from 1 to 10 clock cycles for 10 bits,                              */
      /*      from 1 to 8 clock cycles for 8 bits                                 */
      /*      from 1 to 6 clock cycles for 6 bits                                 */
      /*    If a higher delay is selected, it will be clipped to maximum delay    */
      /*    range                                                                 */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8003664:	687b      	ldr	r3, [r7, #4]
 8003666:	681b      	ldr	r3, [r3, #0]
 8003668:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800366c:	d004      	beq.n	8003678 <HAL_ADCEx_MultiModeConfigChannel+0xe0>
 800366e:	687b      	ldr	r3, [r7, #4]
 8003670:	681b      	ldr	r3, [r3, #0]
 8003672:	4a45      	ldr	r2, [pc, #276]	; (8003788 <HAL_ADCEx_MultiModeConfigChannel+0x1f0>)
 8003674:	4293      	cmp	r3, r2
 8003676:	d10f      	bne.n	8003698 <HAL_ADCEx_MultiModeConfigChannel+0x100>
 8003678:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
 800367c:	f7ff ff66 	bl	800354c <LL_ADC_IsEnabled>
 8003680:	4604      	mov	r4, r0
 8003682:	4841      	ldr	r0, [pc, #260]	; (8003788 <HAL_ADCEx_MultiModeConfigChannel+0x1f0>)
 8003684:	f7ff ff62 	bl	800354c <LL_ADC_IsEnabled>
 8003688:	4603      	mov	r3, r0
 800368a:	4323      	orrs	r3, r4
 800368c:	2b00      	cmp	r3, #0
 800368e:	bf0c      	ite	eq
 8003690:	2301      	moveq	r3, #1
 8003692:	2300      	movne	r3, #0
 8003694:	b2db      	uxtb	r3, r3
 8003696:	e012      	b.n	80036be <HAL_ADCEx_MultiModeConfigChannel+0x126>
 8003698:	483c      	ldr	r0, [pc, #240]	; (800378c <HAL_ADCEx_MultiModeConfigChannel+0x1f4>)
 800369a:	f7ff ff57 	bl	800354c <LL_ADC_IsEnabled>
 800369e:	4604      	mov	r4, r0
 80036a0:	483b      	ldr	r0, [pc, #236]	; (8003790 <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 80036a2:	f7ff ff53 	bl	800354c <LL_ADC_IsEnabled>
 80036a6:	4603      	mov	r3, r0
 80036a8:	431c      	orrs	r4, r3
 80036aa:	483c      	ldr	r0, [pc, #240]	; (800379c <HAL_ADCEx_MultiModeConfigChannel+0x204>)
 80036ac:	f7ff ff4e 	bl	800354c <LL_ADC_IsEnabled>
 80036b0:	4603      	mov	r3, r0
 80036b2:	4323      	orrs	r3, r4
 80036b4:	2b00      	cmp	r3, #0
 80036b6:	bf0c      	ite	eq
 80036b8:	2301      	moveq	r3, #1
 80036ba:	2300      	movne	r3, #0
 80036bc:	b2db      	uxtb	r3, r3
 80036be:	2b00      	cmp	r3, #0
 80036c0:	d056      	beq.n	8003770 <HAL_ADCEx_MultiModeConfigChannel+0x1d8>
      {
        MODIFY_REG(tmpADC_Common->CCR,
 80036c2:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80036c4:	689b      	ldr	r3, [r3, #8]
 80036c6:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 80036ca:	f023 030f 	bic.w	r3, r3, #15
 80036ce:	683a      	ldr	r2, [r7, #0]
 80036d0:	6811      	ldr	r1, [r2, #0]
 80036d2:	683a      	ldr	r2, [r7, #0]
 80036d4:	6892      	ldr	r2, [r2, #8]
 80036d6:	430a      	orrs	r2, r1
 80036d8:	431a      	orrs	r2, r3
 80036da:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80036dc:	609a      	str	r2, [r3, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 80036de:	e047      	b.n	8003770 <HAL_ADCEx_MultiModeConfigChannel+0x1d8>
                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG);
 80036e0:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80036e2:	689b      	ldr	r3, [r3, #8]
 80036e4:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80036e8:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80036ea:	609a      	str	r2, [r3, #8]

      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 80036ec:	687b      	ldr	r3, [r7, #4]
 80036ee:	681b      	ldr	r3, [r3, #0]
 80036f0:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80036f4:	d004      	beq.n	8003700 <HAL_ADCEx_MultiModeConfigChannel+0x168>
 80036f6:	687b      	ldr	r3, [r7, #4]
 80036f8:	681b      	ldr	r3, [r3, #0]
 80036fa:	4a23      	ldr	r2, [pc, #140]	; (8003788 <HAL_ADCEx_MultiModeConfigChannel+0x1f0>)
 80036fc:	4293      	cmp	r3, r2
 80036fe:	d10f      	bne.n	8003720 <HAL_ADCEx_MultiModeConfigChannel+0x188>
 8003700:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
 8003704:	f7ff ff22 	bl	800354c <LL_ADC_IsEnabled>
 8003708:	4604      	mov	r4, r0
 800370a:	481f      	ldr	r0, [pc, #124]	; (8003788 <HAL_ADCEx_MultiModeConfigChannel+0x1f0>)
 800370c:	f7ff ff1e 	bl	800354c <LL_ADC_IsEnabled>
 8003710:	4603      	mov	r3, r0
 8003712:	4323      	orrs	r3, r4
 8003714:	2b00      	cmp	r3, #0
 8003716:	bf0c      	ite	eq
 8003718:	2301      	moveq	r3, #1
 800371a:	2300      	movne	r3, #0
 800371c:	b2db      	uxtb	r3, r3
 800371e:	e012      	b.n	8003746 <HAL_ADCEx_MultiModeConfigChannel+0x1ae>
 8003720:	481a      	ldr	r0, [pc, #104]	; (800378c <HAL_ADCEx_MultiModeConfigChannel+0x1f4>)
 8003722:	f7ff ff13 	bl	800354c <LL_ADC_IsEnabled>
 8003726:	4604      	mov	r4, r0
 8003728:	4819      	ldr	r0, [pc, #100]	; (8003790 <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 800372a:	f7ff ff0f 	bl	800354c <LL_ADC_IsEnabled>
 800372e:	4603      	mov	r3, r0
 8003730:	431c      	orrs	r4, r3
 8003732:	481a      	ldr	r0, [pc, #104]	; (800379c <HAL_ADCEx_MultiModeConfigChannel+0x204>)
 8003734:	f7ff ff0a 	bl	800354c <LL_ADC_IsEnabled>
 8003738:	4603      	mov	r3, r0
 800373a:	4323      	orrs	r3, r4
 800373c:	2b00      	cmp	r3, #0
 800373e:	bf0c      	ite	eq
 8003740:	2301      	moveq	r3, #1
 8003742:	2300      	movne	r3, #0
 8003744:	b2db      	uxtb	r3, r3
 8003746:	2b00      	cmp	r3, #0
 8003748:	d012      	beq.n	8003770 <HAL_ADCEx_MultiModeConfigChannel+0x1d8>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 800374a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800374c:	689b      	ldr	r3, [r3, #8]
 800374e:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 8003752:	f023 030f 	bic.w	r3, r3, #15
 8003756:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 8003758:	6093      	str	r3, [r2, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 800375a:	e009      	b.n	8003770 <HAL_ADCEx_MultiModeConfigChannel+0x1d8>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800375c:	687b      	ldr	r3, [r7, #4]
 800375e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003760:	f043 0220 	orr.w	r2, r3, #32
 8003764:	687b      	ldr	r3, [r7, #4]
 8003766:	65da      	str	r2, [r3, #92]	; 0x5c

    tmp_hal_status = HAL_ERROR;
 8003768:	2301      	movs	r3, #1
 800376a:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
 800376e:	e000      	b.n	8003772 <HAL_ADCEx_MultiModeConfigChannel+0x1da>
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8003770:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8003772:	687b      	ldr	r3, [r7, #4]
 8003774:	2200      	movs	r2, #0
 8003776:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

  /* Return function status */
  return tmp_hal_status;
 800377a:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
}
 800377e:	4618      	mov	r0, r3
 8003780:	3784      	adds	r7, #132	; 0x84
 8003782:	46bd      	mov	sp, r7
 8003784:	bd90      	pop	{r4, r7, pc}
 8003786:	bf00      	nop
 8003788:	50000100 	.word	0x50000100
 800378c:	50000400 	.word	0x50000400
 8003790:	50000500 	.word	0x50000500
 8003794:	50000300 	.word	0x50000300
 8003798:	50000700 	.word	0x50000700
 800379c:	50000600 	.word	0x50000600

080037a0 <LL_EXTI_EnableIT_0_31>:
{
 80037a0:	b480      	push	{r7}
 80037a2:	b083      	sub	sp, #12
 80037a4:	af00      	add	r7, sp, #0
 80037a6:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->IMR1, ExtiLine);
 80037a8:	4b05      	ldr	r3, [pc, #20]	; (80037c0 <LL_EXTI_EnableIT_0_31+0x20>)
 80037aa:	681a      	ldr	r2, [r3, #0]
 80037ac:	4904      	ldr	r1, [pc, #16]	; (80037c0 <LL_EXTI_EnableIT_0_31+0x20>)
 80037ae:	687b      	ldr	r3, [r7, #4]
 80037b0:	4313      	orrs	r3, r2
 80037b2:	600b      	str	r3, [r1, #0]
}
 80037b4:	bf00      	nop
 80037b6:	370c      	adds	r7, #12
 80037b8:	46bd      	mov	sp, r7
 80037ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037be:	4770      	bx	lr
 80037c0:	40010400 	.word	0x40010400

080037c4 <LL_EXTI_EnableIT_32_63>:
{
 80037c4:	b480      	push	{r7}
 80037c6:	b083      	sub	sp, #12
 80037c8:	af00      	add	r7, sp, #0
 80037ca:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->IMR2, ExtiLine);
 80037cc:	4b05      	ldr	r3, [pc, #20]	; (80037e4 <LL_EXTI_EnableIT_32_63+0x20>)
 80037ce:	6a1a      	ldr	r2, [r3, #32]
 80037d0:	4904      	ldr	r1, [pc, #16]	; (80037e4 <LL_EXTI_EnableIT_32_63+0x20>)
 80037d2:	687b      	ldr	r3, [r7, #4]
 80037d4:	4313      	orrs	r3, r2
 80037d6:	620b      	str	r3, [r1, #32]
}
 80037d8:	bf00      	nop
 80037da:	370c      	adds	r7, #12
 80037dc:	46bd      	mov	sp, r7
 80037de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037e2:	4770      	bx	lr
 80037e4:	40010400 	.word	0x40010400

080037e8 <LL_EXTI_DisableIT_0_31>:
{
 80037e8:	b480      	push	{r7}
 80037ea:	b083      	sub	sp, #12
 80037ec:	af00      	add	r7, sp, #0
 80037ee:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->IMR1, ExtiLine);
 80037f0:	4b06      	ldr	r3, [pc, #24]	; (800380c <LL_EXTI_DisableIT_0_31+0x24>)
 80037f2:	681a      	ldr	r2, [r3, #0]
 80037f4:	687b      	ldr	r3, [r7, #4]
 80037f6:	43db      	mvns	r3, r3
 80037f8:	4904      	ldr	r1, [pc, #16]	; (800380c <LL_EXTI_DisableIT_0_31+0x24>)
 80037fa:	4013      	ands	r3, r2
 80037fc:	600b      	str	r3, [r1, #0]
}
 80037fe:	bf00      	nop
 8003800:	370c      	adds	r7, #12
 8003802:	46bd      	mov	sp, r7
 8003804:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003808:	4770      	bx	lr
 800380a:	bf00      	nop
 800380c:	40010400 	.word	0x40010400

08003810 <LL_EXTI_DisableIT_32_63>:
{
 8003810:	b480      	push	{r7}
 8003812:	b083      	sub	sp, #12
 8003814:	af00      	add	r7, sp, #0
 8003816:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->IMR2, ExtiLine);
 8003818:	4b06      	ldr	r3, [pc, #24]	; (8003834 <LL_EXTI_DisableIT_32_63+0x24>)
 800381a:	6a1a      	ldr	r2, [r3, #32]
 800381c:	687b      	ldr	r3, [r7, #4]
 800381e:	43db      	mvns	r3, r3
 8003820:	4904      	ldr	r1, [pc, #16]	; (8003834 <LL_EXTI_DisableIT_32_63+0x24>)
 8003822:	4013      	ands	r3, r2
 8003824:	620b      	str	r3, [r1, #32]
}
 8003826:	bf00      	nop
 8003828:	370c      	adds	r7, #12
 800382a:	46bd      	mov	sp, r7
 800382c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003830:	4770      	bx	lr
 8003832:	bf00      	nop
 8003834:	40010400 	.word	0x40010400

08003838 <LL_EXTI_EnableEvent_0_31>:
{
 8003838:	b480      	push	{r7}
 800383a:	b083      	sub	sp, #12
 800383c:	af00      	add	r7, sp, #0
 800383e:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->EMR1, ExtiLine);
 8003840:	4b05      	ldr	r3, [pc, #20]	; (8003858 <LL_EXTI_EnableEvent_0_31+0x20>)
 8003842:	685a      	ldr	r2, [r3, #4]
 8003844:	4904      	ldr	r1, [pc, #16]	; (8003858 <LL_EXTI_EnableEvent_0_31+0x20>)
 8003846:	687b      	ldr	r3, [r7, #4]
 8003848:	4313      	orrs	r3, r2
 800384a:	604b      	str	r3, [r1, #4]
}
 800384c:	bf00      	nop
 800384e:	370c      	adds	r7, #12
 8003850:	46bd      	mov	sp, r7
 8003852:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003856:	4770      	bx	lr
 8003858:	40010400 	.word	0x40010400

0800385c <LL_EXTI_EnableEvent_32_63>:
{
 800385c:	b480      	push	{r7}
 800385e:	b083      	sub	sp, #12
 8003860:	af00      	add	r7, sp, #0
 8003862:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->EMR2, ExtiLine);
 8003864:	4b05      	ldr	r3, [pc, #20]	; (800387c <LL_EXTI_EnableEvent_32_63+0x20>)
 8003866:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003868:	4904      	ldr	r1, [pc, #16]	; (800387c <LL_EXTI_EnableEvent_32_63+0x20>)
 800386a:	687b      	ldr	r3, [r7, #4]
 800386c:	4313      	orrs	r3, r2
 800386e:	624b      	str	r3, [r1, #36]	; 0x24
}
 8003870:	bf00      	nop
 8003872:	370c      	adds	r7, #12
 8003874:	46bd      	mov	sp, r7
 8003876:	f85d 7b04 	ldr.w	r7, [sp], #4
 800387a:	4770      	bx	lr
 800387c:	40010400 	.word	0x40010400

08003880 <LL_EXTI_DisableEvent_0_31>:
{
 8003880:	b480      	push	{r7}
 8003882:	b083      	sub	sp, #12
 8003884:	af00      	add	r7, sp, #0
 8003886:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->EMR1, ExtiLine);
 8003888:	4b06      	ldr	r3, [pc, #24]	; (80038a4 <LL_EXTI_DisableEvent_0_31+0x24>)
 800388a:	685a      	ldr	r2, [r3, #4]
 800388c:	687b      	ldr	r3, [r7, #4]
 800388e:	43db      	mvns	r3, r3
 8003890:	4904      	ldr	r1, [pc, #16]	; (80038a4 <LL_EXTI_DisableEvent_0_31+0x24>)
 8003892:	4013      	ands	r3, r2
 8003894:	604b      	str	r3, [r1, #4]
}
 8003896:	bf00      	nop
 8003898:	370c      	adds	r7, #12
 800389a:	46bd      	mov	sp, r7
 800389c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038a0:	4770      	bx	lr
 80038a2:	bf00      	nop
 80038a4:	40010400 	.word	0x40010400

080038a8 <LL_EXTI_DisableEvent_32_63>:
{
 80038a8:	b480      	push	{r7}
 80038aa:	b083      	sub	sp, #12
 80038ac:	af00      	add	r7, sp, #0
 80038ae:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->EMR2, ExtiLine);
 80038b0:	4b06      	ldr	r3, [pc, #24]	; (80038cc <LL_EXTI_DisableEvent_32_63+0x24>)
 80038b2:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80038b4:	687b      	ldr	r3, [r7, #4]
 80038b6:	43db      	mvns	r3, r3
 80038b8:	4904      	ldr	r1, [pc, #16]	; (80038cc <LL_EXTI_DisableEvent_32_63+0x24>)
 80038ba:	4013      	ands	r3, r2
 80038bc:	624b      	str	r3, [r1, #36]	; 0x24
}
 80038be:	bf00      	nop
 80038c0:	370c      	adds	r7, #12
 80038c2:	46bd      	mov	sp, r7
 80038c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038c8:	4770      	bx	lr
 80038ca:	bf00      	nop
 80038cc:	40010400 	.word	0x40010400

080038d0 <LL_EXTI_EnableRisingTrig_0_31>:
{
 80038d0:	b480      	push	{r7}
 80038d2:	b083      	sub	sp, #12
 80038d4:	af00      	add	r7, sp, #0
 80038d6:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->RTSR1, ExtiLine);
 80038d8:	4b05      	ldr	r3, [pc, #20]	; (80038f0 <LL_EXTI_EnableRisingTrig_0_31+0x20>)
 80038da:	689a      	ldr	r2, [r3, #8]
 80038dc:	4904      	ldr	r1, [pc, #16]	; (80038f0 <LL_EXTI_EnableRisingTrig_0_31+0x20>)
 80038de:	687b      	ldr	r3, [r7, #4]
 80038e0:	4313      	orrs	r3, r2
 80038e2:	608b      	str	r3, [r1, #8]
}
 80038e4:	bf00      	nop
 80038e6:	370c      	adds	r7, #12
 80038e8:	46bd      	mov	sp, r7
 80038ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038ee:	4770      	bx	lr
 80038f0:	40010400 	.word	0x40010400

080038f4 <LL_EXTI_EnableRisingTrig_32_63>:
{
 80038f4:	b480      	push	{r7}
 80038f6:	b083      	sub	sp, #12
 80038f8:	af00      	add	r7, sp, #0
 80038fa:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->RTSR2, ExtiLine);
 80038fc:	4b05      	ldr	r3, [pc, #20]	; (8003914 <LL_EXTI_EnableRisingTrig_32_63+0x20>)
 80038fe:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8003900:	4904      	ldr	r1, [pc, #16]	; (8003914 <LL_EXTI_EnableRisingTrig_32_63+0x20>)
 8003902:	687b      	ldr	r3, [r7, #4]
 8003904:	4313      	orrs	r3, r2
 8003906:	628b      	str	r3, [r1, #40]	; 0x28
}
 8003908:	bf00      	nop
 800390a:	370c      	adds	r7, #12
 800390c:	46bd      	mov	sp, r7
 800390e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003912:	4770      	bx	lr
 8003914:	40010400 	.word	0x40010400

08003918 <LL_EXTI_DisableRisingTrig_0_31>:
{
 8003918:	b480      	push	{r7}
 800391a:	b083      	sub	sp, #12
 800391c:	af00      	add	r7, sp, #0
 800391e:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->RTSR1, ExtiLine);
 8003920:	4b06      	ldr	r3, [pc, #24]	; (800393c <LL_EXTI_DisableRisingTrig_0_31+0x24>)
 8003922:	689a      	ldr	r2, [r3, #8]
 8003924:	687b      	ldr	r3, [r7, #4]
 8003926:	43db      	mvns	r3, r3
 8003928:	4904      	ldr	r1, [pc, #16]	; (800393c <LL_EXTI_DisableRisingTrig_0_31+0x24>)
 800392a:	4013      	ands	r3, r2
 800392c:	608b      	str	r3, [r1, #8]
}
 800392e:	bf00      	nop
 8003930:	370c      	adds	r7, #12
 8003932:	46bd      	mov	sp, r7
 8003934:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003938:	4770      	bx	lr
 800393a:	bf00      	nop
 800393c:	40010400 	.word	0x40010400

08003940 <LL_EXTI_DisableRisingTrig_32_63>:
{
 8003940:	b480      	push	{r7}
 8003942:	b083      	sub	sp, #12
 8003944:	af00      	add	r7, sp, #0
 8003946:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->RTSR2, ExtiLine);
 8003948:	4b06      	ldr	r3, [pc, #24]	; (8003964 <LL_EXTI_DisableRisingTrig_32_63+0x24>)
 800394a:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800394c:	687b      	ldr	r3, [r7, #4]
 800394e:	43db      	mvns	r3, r3
 8003950:	4904      	ldr	r1, [pc, #16]	; (8003964 <LL_EXTI_DisableRisingTrig_32_63+0x24>)
 8003952:	4013      	ands	r3, r2
 8003954:	628b      	str	r3, [r1, #40]	; 0x28
}
 8003956:	bf00      	nop
 8003958:	370c      	adds	r7, #12
 800395a:	46bd      	mov	sp, r7
 800395c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003960:	4770      	bx	lr
 8003962:	bf00      	nop
 8003964:	40010400 	.word	0x40010400

08003968 <LL_EXTI_EnableFallingTrig_0_31>:
{
 8003968:	b480      	push	{r7}
 800396a:	b083      	sub	sp, #12
 800396c:	af00      	add	r7, sp, #0
 800396e:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->FTSR1, ExtiLine);
 8003970:	4b05      	ldr	r3, [pc, #20]	; (8003988 <LL_EXTI_EnableFallingTrig_0_31+0x20>)
 8003972:	68da      	ldr	r2, [r3, #12]
 8003974:	4904      	ldr	r1, [pc, #16]	; (8003988 <LL_EXTI_EnableFallingTrig_0_31+0x20>)
 8003976:	687b      	ldr	r3, [r7, #4]
 8003978:	4313      	orrs	r3, r2
 800397a:	60cb      	str	r3, [r1, #12]
}
 800397c:	bf00      	nop
 800397e:	370c      	adds	r7, #12
 8003980:	46bd      	mov	sp, r7
 8003982:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003986:	4770      	bx	lr
 8003988:	40010400 	.word	0x40010400

0800398c <LL_EXTI_EnableFallingTrig_32_63>:
{
 800398c:	b480      	push	{r7}
 800398e:	b083      	sub	sp, #12
 8003990:	af00      	add	r7, sp, #0
 8003992:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->FTSR2, ExtiLine);
 8003994:	4b05      	ldr	r3, [pc, #20]	; (80039ac <LL_EXTI_EnableFallingTrig_32_63+0x20>)
 8003996:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003998:	4904      	ldr	r1, [pc, #16]	; (80039ac <LL_EXTI_EnableFallingTrig_32_63+0x20>)
 800399a:	687b      	ldr	r3, [r7, #4]
 800399c:	4313      	orrs	r3, r2
 800399e:	62cb      	str	r3, [r1, #44]	; 0x2c
}
 80039a0:	bf00      	nop
 80039a2:	370c      	adds	r7, #12
 80039a4:	46bd      	mov	sp, r7
 80039a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039aa:	4770      	bx	lr
 80039ac:	40010400 	.word	0x40010400

080039b0 <LL_EXTI_DisableFallingTrig_0_31>:
{
 80039b0:	b480      	push	{r7}
 80039b2:	b083      	sub	sp, #12
 80039b4:	af00      	add	r7, sp, #0
 80039b6:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->FTSR1, ExtiLine);
 80039b8:	4b06      	ldr	r3, [pc, #24]	; (80039d4 <LL_EXTI_DisableFallingTrig_0_31+0x24>)
 80039ba:	68da      	ldr	r2, [r3, #12]
 80039bc:	687b      	ldr	r3, [r7, #4]
 80039be:	43db      	mvns	r3, r3
 80039c0:	4904      	ldr	r1, [pc, #16]	; (80039d4 <LL_EXTI_DisableFallingTrig_0_31+0x24>)
 80039c2:	4013      	ands	r3, r2
 80039c4:	60cb      	str	r3, [r1, #12]
}
 80039c6:	bf00      	nop
 80039c8:	370c      	adds	r7, #12
 80039ca:	46bd      	mov	sp, r7
 80039cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039d0:	4770      	bx	lr
 80039d2:	bf00      	nop
 80039d4:	40010400 	.word	0x40010400

080039d8 <LL_EXTI_DisableFallingTrig_32_63>:
{
 80039d8:	b480      	push	{r7}
 80039da:	b083      	sub	sp, #12
 80039dc:	af00      	add	r7, sp, #0
 80039de:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->FTSR2, ExtiLine);
 80039e0:	4b06      	ldr	r3, [pc, #24]	; (80039fc <LL_EXTI_DisableFallingTrig_32_63+0x24>)
 80039e2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80039e4:	687b      	ldr	r3, [r7, #4]
 80039e6:	43db      	mvns	r3, r3
 80039e8:	4904      	ldr	r1, [pc, #16]	; (80039fc <LL_EXTI_DisableFallingTrig_32_63+0x24>)
 80039ea:	4013      	ands	r3, r2
 80039ec:	62cb      	str	r3, [r1, #44]	; 0x2c
}
 80039ee:	bf00      	nop
 80039f0:	370c      	adds	r7, #12
 80039f2:	46bd      	mov	sp, r7
 80039f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039f8:	4770      	bx	lr
 80039fa:	bf00      	nop
 80039fc:	40010400 	.word	0x40010400

08003a00 <LL_EXTI_ClearFlag_0_31>:
{
 8003a00:	b480      	push	{r7}
 8003a02:	b083      	sub	sp, #12
 8003a04:	af00      	add	r7, sp, #0
 8003a06:	6078      	str	r0, [r7, #4]
  WRITE_REG(EXTI->PR1, ExtiLine);
 8003a08:	4a04      	ldr	r2, [pc, #16]	; (8003a1c <LL_EXTI_ClearFlag_0_31+0x1c>)
 8003a0a:	687b      	ldr	r3, [r7, #4]
 8003a0c:	6153      	str	r3, [r2, #20]
}
 8003a0e:	bf00      	nop
 8003a10:	370c      	adds	r7, #12
 8003a12:	46bd      	mov	sp, r7
 8003a14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a18:	4770      	bx	lr
 8003a1a:	bf00      	nop
 8003a1c:	40010400 	.word	0x40010400

08003a20 <LL_EXTI_ClearFlag_32_63>:
  *         @arg @ref LL_EXTI_LINE_41
  * @note   (*): Available in some devices
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_ClearFlag_32_63(uint32_t ExtiLine)
{
 8003a20:	b480      	push	{r7}
 8003a22:	b083      	sub	sp, #12
 8003a24:	af00      	add	r7, sp, #0
 8003a26:	6078      	str	r0, [r7, #4]
  WRITE_REG(EXTI->PR2, ExtiLine);
 8003a28:	4a04      	ldr	r2, [pc, #16]	; (8003a3c <LL_EXTI_ClearFlag_32_63+0x1c>)
 8003a2a:	687b      	ldr	r3, [r7, #4]
 8003a2c:	6353      	str	r3, [r2, #52]	; 0x34
}
 8003a2e:	bf00      	nop
 8003a30:	370c      	adds	r7, #12
 8003a32:	46bd      	mov	sp, r7
 8003a34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a38:	4770      	bx	lr
 8003a3a:	bf00      	nop
 8003a3c:	40010400 	.word	0x40010400

08003a40 <HAL_COMP_Init>:
  *         To unlock the configuration, perform a system reset.
  * @param  hcomp  COMP handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_COMP_Init(COMP_HandleTypeDef *hcomp)
{
 8003a40:	b580      	push	{r7, lr}
 8003a42:	b088      	sub	sp, #32
 8003a44:	af00      	add	r7, sp, #0
 8003a46:	6078      	str	r0, [r7, #4]
  uint32_t tmp_csr;
  uint32_t exti_line;
  uint32_t comp_voltage_scaler_initialized; /* Value "0" if comparator voltage scaler is not initialized */
  __IO uint32_t wait_loop_index = 0UL;
 8003a48:	2300      	movs	r3, #0
 8003a4a:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef status = HAL_OK;
 8003a4c:	2300      	movs	r3, #0
 8003a4e:	77fb      	strb	r3, [r7, #31]

  /* Check the COMP handle allocation and lock status */
  if(hcomp == NULL)
 8003a50:	687b      	ldr	r3, [r7, #4]
 8003a52:	2b00      	cmp	r3, #0
 8003a54:	d102      	bne.n	8003a5c <HAL_COMP_Init+0x1c>
  {
    status = HAL_ERROR;
 8003a56:	2301      	movs	r3, #1
 8003a58:	77fb      	strb	r3, [r7, #31]
 8003a5a:	e180      	b.n	8003d5e <HAL_COMP_Init+0x31e>
  }
  else if(__HAL_COMP_IS_LOCKED(hcomp))
 8003a5c:	687b      	ldr	r3, [r7, #4]
 8003a5e:	681b      	ldr	r3, [r3, #0]
 8003a60:	681b      	ldr	r3, [r3, #0]
 8003a62:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8003a66:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8003a6a:	d102      	bne.n	8003a72 <HAL_COMP_Init+0x32>
  {
    status = HAL_ERROR;
 8003a6c:	2301      	movs	r3, #1
 8003a6e:	77fb      	strb	r3, [r7, #31]
 8003a70:	e175      	b.n	8003d5e <HAL_COMP_Init+0x31e>
    assert_param(IS_COMP_OUTPUTPOL(hcomp->Init.OutputPol));
    assert_param(IS_COMP_HYSTERESIS(hcomp->Init.Hysteresis));
    assert_param(IS_COMP_BLANKINGSRC_INSTANCE(hcomp->Instance, hcomp->Init.BlankingSrce));
    assert_param(IS_COMP_TRIGGERMODE(hcomp->Init.TriggerMode));

    if(hcomp->State == HAL_COMP_STATE_RESET)
 8003a72:	687b      	ldr	r3, [r7, #4]
 8003a74:	7f5b      	ldrb	r3, [r3, #29]
 8003a76:	b2db      	uxtb	r3, r3
 8003a78:	2b00      	cmp	r3, #0
 8003a7a:	d108      	bne.n	8003a8e <HAL_COMP_Init+0x4e>
    {
      /* Allocate lock resource and initialize it */
      hcomp->Lock = HAL_UNLOCKED;
 8003a7c:	687b      	ldr	r3, [r7, #4]
 8003a7e:	2200      	movs	r2, #0
 8003a80:	771a      	strb	r2, [r3, #28]

      /* Set COMP error code to none */
      COMP_CLEAR_ERRORCODE(hcomp);
 8003a82:	687b      	ldr	r3, [r7, #4]
 8003a84:	2200      	movs	r2, #0
 8003a86:	621a      	str	r2, [r3, #32]
#else
      /* Init the low level hardware */
      /* Note: Internal control clock of the comparators must                 */
      /*       be enabled in "HAL_COMP_MspInit()"                             */
      /*       using "__HAL_RCC_SYSCFG_CLK_ENABLE()".                         */
      HAL_COMP_MspInit(hcomp);
 8003a88:	6878      	ldr	r0, [r7, #4]
 8003a8a:	f7fd f8ed 	bl	8000c68 <HAL_COMP_MspInit>
#endif /* USE_HAL_COMP_REGISTER_CALLBACKS */
    }

    /* Memorize voltage scaler state before initialization */
    comp_voltage_scaler_initialized = READ_BIT(hcomp->Instance->CSR, COMP_CSR_SCALEN);
 8003a8e:	687b      	ldr	r3, [r7, #4]
 8003a90:	681b      	ldr	r3, [r3, #0]
 8003a92:	681b      	ldr	r3, [r3, #0]
 8003a94:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8003a98:	61bb      	str	r3, [r7, #24]

    /* Set COMP parameters */
    tmp_csr = (  hcomp->Init.InputMinus
 8003a9a:	687b      	ldr	r3, [r7, #4]
 8003a9c:	689a      	ldr	r2, [r3, #8]
               | hcomp->Init.InputPlus
 8003a9e:	687b      	ldr	r3, [r7, #4]
 8003aa0:	685b      	ldr	r3, [r3, #4]
 8003aa2:	431a      	orrs	r2, r3
               | hcomp->Init.BlankingSrce
 8003aa4:	687b      	ldr	r3, [r7, #4]
 8003aa6:	695b      	ldr	r3, [r3, #20]
 8003aa8:	431a      	orrs	r2, r3
               | hcomp->Init.Hysteresis
 8003aaa:	687b      	ldr	r3, [r7, #4]
 8003aac:	68db      	ldr	r3, [r3, #12]
 8003aae:	431a      	orrs	r2, r3
               | hcomp->Init.OutputPol
 8003ab0:	687b      	ldr	r3, [r7, #4]
 8003ab2:	691b      	ldr	r3, [r3, #16]
    tmp_csr = (  hcomp->Init.InputMinus
 8003ab4:	4313      	orrs	r3, r2
 8003ab6:	617b      	str	r3, [r7, #20]
              );

    /* Set parameters in COMP register */
    /* Note: Update all bits except read-only, lock and enable bits */
    MODIFY_REG(hcomp->Instance->CSR,
 8003ab8:	687b      	ldr	r3, [r7, #4]
 8003aba:	681b      	ldr	r3, [r3, #0]
 8003abc:	681a      	ldr	r2, [r3, #0]
 8003abe:	4b98      	ldr	r3, [pc, #608]	; (8003d20 <HAL_COMP_Init+0x2e0>)
 8003ac0:	4013      	ands	r3, r2
 8003ac2:	687a      	ldr	r2, [r7, #4]
 8003ac4:	6812      	ldr	r2, [r2, #0]
 8003ac6:	6979      	ldr	r1, [r7, #20]
 8003ac8:	430b      	orrs	r3, r1
 8003aca:	6013      	str	r3, [r2, #0]
               tmp_csr
              );

    /* Delay for COMP scaler bridge voltage stabilization */
    /* Apply the delay if voltage scaler bridge is required and not already enabled */
    if ((READ_BIT(hcomp->Instance->CSR, COMP_CSR_SCALEN) != 0UL) &&
 8003acc:	687b      	ldr	r3, [r7, #4]
 8003ace:	681b      	ldr	r3, [r3, #0]
 8003ad0:	681b      	ldr	r3, [r3, #0]
 8003ad2:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8003ad6:	2b00      	cmp	r3, #0
 8003ad8:	d015      	beq.n	8003b06 <HAL_COMP_Init+0xc6>
 8003ada:	69bb      	ldr	r3, [r7, #24]
 8003adc:	2b00      	cmp	r3, #0
 8003ade:	d112      	bne.n	8003b06 <HAL_COMP_Init+0xc6>
    {
      /* Wait loop initialization and execution */
      /* Note: Variable divided by 2 to compensate partially              */
      /*       CPU processing cycles, scaling in us split to not          */
      /*       exceed 32 bits register capacity and handle low frequency. */
      wait_loop_index = ((COMP_DELAY_VOLTAGE_SCALER_STAB_US / 10UL) * (SystemCoreClock / (100000UL * 2UL)));
 8003ae0:	4b90      	ldr	r3, [pc, #576]	; (8003d24 <HAL_COMP_Init+0x2e4>)
 8003ae2:	681b      	ldr	r3, [r3, #0]
 8003ae4:	099b      	lsrs	r3, r3, #6
 8003ae6:	4a90      	ldr	r2, [pc, #576]	; (8003d28 <HAL_COMP_Init+0x2e8>)
 8003ae8:	fba2 2303 	umull	r2, r3, r2, r3
 8003aec:	099a      	lsrs	r2, r3, #6
 8003aee:	4613      	mov	r3, r2
 8003af0:	009b      	lsls	r3, r3, #2
 8003af2:	4413      	add	r3, r2
 8003af4:	009b      	lsls	r3, r3, #2
 8003af6:	60fb      	str	r3, [r7, #12]
      while(wait_loop_index != 0UL)
 8003af8:	e002      	b.n	8003b00 <HAL_COMP_Init+0xc0>
      {
        wait_loop_index--;
 8003afa:	68fb      	ldr	r3, [r7, #12]
 8003afc:	3b01      	subs	r3, #1
 8003afe:	60fb      	str	r3, [r7, #12]
      while(wait_loop_index != 0UL)
 8003b00:	68fb      	ldr	r3, [r7, #12]
 8003b02:	2b00      	cmp	r3, #0
 8003b04:	d1f9      	bne.n	8003afa <HAL_COMP_Init+0xba>
      }
    }

    /* Get the EXTI line corresponding to the selected COMP instance */
    exti_line = COMP_GET_EXTI_LINE(hcomp->Instance);
 8003b06:	687b      	ldr	r3, [r7, #4]
 8003b08:	681b      	ldr	r3, [r3, #0]
 8003b0a:	4a88      	ldr	r2, [pc, #544]	; (8003d2c <HAL_COMP_Init+0x2ec>)
 8003b0c:	4293      	cmp	r3, r2
 8003b0e:	d028      	beq.n	8003b62 <HAL_COMP_Init+0x122>
 8003b10:	687b      	ldr	r3, [r7, #4]
 8003b12:	681b      	ldr	r3, [r3, #0]
 8003b14:	4a86      	ldr	r2, [pc, #536]	; (8003d30 <HAL_COMP_Init+0x2f0>)
 8003b16:	4293      	cmp	r3, r2
 8003b18:	d020      	beq.n	8003b5c <HAL_COMP_Init+0x11c>
 8003b1a:	687b      	ldr	r3, [r7, #4]
 8003b1c:	681b      	ldr	r3, [r3, #0]
 8003b1e:	4a85      	ldr	r2, [pc, #532]	; (8003d34 <HAL_COMP_Init+0x2f4>)
 8003b20:	4293      	cmp	r3, r2
 8003b22:	d018      	beq.n	8003b56 <HAL_COMP_Init+0x116>
 8003b24:	687b      	ldr	r3, [r7, #4]
 8003b26:	681b      	ldr	r3, [r3, #0]
 8003b28:	4a83      	ldr	r2, [pc, #524]	; (8003d38 <HAL_COMP_Init+0x2f8>)
 8003b2a:	4293      	cmp	r3, r2
 8003b2c:	d010      	beq.n	8003b50 <HAL_COMP_Init+0x110>
 8003b2e:	687b      	ldr	r3, [r7, #4]
 8003b30:	681b      	ldr	r3, [r3, #0]
 8003b32:	4a82      	ldr	r2, [pc, #520]	; (8003d3c <HAL_COMP_Init+0x2fc>)
 8003b34:	4293      	cmp	r3, r2
 8003b36:	d008      	beq.n	8003b4a <HAL_COMP_Init+0x10a>
 8003b38:	687b      	ldr	r3, [r7, #4]
 8003b3a:	681b      	ldr	r3, [r3, #0]
 8003b3c:	4a80      	ldr	r2, [pc, #512]	; (8003d40 <HAL_COMP_Init+0x300>)
 8003b3e:	4293      	cmp	r3, r2
 8003b40:	d101      	bne.n	8003b46 <HAL_COMP_Init+0x106>
 8003b42:	2301      	movs	r3, #1
 8003b44:	e00f      	b.n	8003b66 <HAL_COMP_Init+0x126>
 8003b46:	2302      	movs	r3, #2
 8003b48:	e00d      	b.n	8003b66 <HAL_COMP_Init+0x126>
 8003b4a:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8003b4e:	e00a      	b.n	8003b66 <HAL_COMP_Init+0x126>
 8003b50:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8003b54:	e007      	b.n	8003b66 <HAL_COMP_Init+0x126>
 8003b56:	f04f 5300 	mov.w	r3, #536870912	; 0x20000000
 8003b5a:	e004      	b.n	8003b66 <HAL_COMP_Init+0x126>
 8003b5c:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8003b60:	e001      	b.n	8003b66 <HAL_COMP_Init+0x126>
 8003b62:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8003b66:	613b      	str	r3, [r7, #16]

    /* Manage EXTI settings */
    if((hcomp->Init.TriggerMode & (COMP_EXTI_IT | COMP_EXTI_EVENT)) != 0UL)
 8003b68:	687b      	ldr	r3, [r7, #4]
 8003b6a:	699b      	ldr	r3, [r3, #24]
 8003b6c:	f003 0303 	and.w	r3, r3, #3
 8003b70:	2b00      	cmp	r3, #0
 8003b72:	f000 80b6 	beq.w	8003ce2 <HAL_COMP_Init+0x2a2>
    {
      /* Configure EXTI rising edge */
      if((hcomp->Init.TriggerMode & COMP_EXTI_RISING) != 0UL)
 8003b76:	687b      	ldr	r3, [r7, #4]
 8003b78:	699b      	ldr	r3, [r3, #24]
 8003b7a:	f003 0310 	and.w	r3, r3, #16
 8003b7e:	2b00      	cmp	r3, #0
 8003b80:	d011      	beq.n	8003ba6 <HAL_COMP_Init+0x166>
      {
#if defined(STM32G474xx) || defined(STM32G484xx) || defined(STM32G473xx) || defined(STM32G483xx)
        if((hcomp->Instance == COMP6) || (hcomp->Instance == COMP7))
 8003b82:	687b      	ldr	r3, [r7, #4]
 8003b84:	681b      	ldr	r3, [r3, #0]
 8003b86:	4a6e      	ldr	r2, [pc, #440]	; (8003d40 <HAL_COMP_Init+0x300>)
 8003b88:	4293      	cmp	r3, r2
 8003b8a:	d004      	beq.n	8003b96 <HAL_COMP_Init+0x156>
 8003b8c:	687b      	ldr	r3, [r7, #4]
 8003b8e:	681b      	ldr	r3, [r3, #0]
 8003b90:	4a6c      	ldr	r2, [pc, #432]	; (8003d44 <HAL_COMP_Init+0x304>)
 8003b92:	4293      	cmp	r3, r2
 8003b94:	d103      	bne.n	8003b9e <HAL_COMP_Init+0x15e>
        {
          LL_EXTI_EnableRisingTrig_32_63(exti_line);
 8003b96:	6938      	ldr	r0, [r7, #16]
 8003b98:	f7ff feac 	bl	80038f4 <LL_EXTI_EnableRisingTrig_32_63>
 8003b9c:	e014      	b.n	8003bc8 <HAL_COMP_Init+0x188>
        }
        else
        {
          LL_EXTI_EnableRisingTrig_0_31(exti_line);
 8003b9e:	6938      	ldr	r0, [r7, #16]
 8003ba0:	f7ff fe96 	bl	80038d0 <LL_EXTI_EnableRisingTrig_0_31>
 8003ba4:	e010      	b.n	8003bc8 <HAL_COMP_Init+0x188>
#endif
      }
      else
      {
#if defined(STM32G474xx) || defined(STM32G484xx) || defined(STM32G473xx) || defined(STM32G483xx)
        if((hcomp->Instance == COMP6) || (hcomp->Instance == COMP7))
 8003ba6:	687b      	ldr	r3, [r7, #4]
 8003ba8:	681b      	ldr	r3, [r3, #0]
 8003baa:	4a65      	ldr	r2, [pc, #404]	; (8003d40 <HAL_COMP_Init+0x300>)
 8003bac:	4293      	cmp	r3, r2
 8003bae:	d004      	beq.n	8003bba <HAL_COMP_Init+0x17a>
 8003bb0:	687b      	ldr	r3, [r7, #4]
 8003bb2:	681b      	ldr	r3, [r3, #0]
 8003bb4:	4a63      	ldr	r2, [pc, #396]	; (8003d44 <HAL_COMP_Init+0x304>)
 8003bb6:	4293      	cmp	r3, r2
 8003bb8:	d103      	bne.n	8003bc2 <HAL_COMP_Init+0x182>
        {
          LL_EXTI_DisableRisingTrig_32_63(exti_line);
 8003bba:	6938      	ldr	r0, [r7, #16]
 8003bbc:	f7ff fec0 	bl	8003940 <LL_EXTI_DisableRisingTrig_32_63>
 8003bc0:	e002      	b.n	8003bc8 <HAL_COMP_Init+0x188>
        }
        else
        {
          LL_EXTI_DisableRisingTrig_0_31(exti_line);
 8003bc2:	6938      	ldr	r0, [r7, #16]
 8003bc4:	f7ff fea8 	bl	8003918 <LL_EXTI_DisableRisingTrig_0_31>
        LL_EXTI_DisableRisingTrig_0_31(exti_line);
#endif
      }

      /* Configure EXTI falling edge */
      if((hcomp->Init.TriggerMode & COMP_EXTI_FALLING) != 0UL)
 8003bc8:	687b      	ldr	r3, [r7, #4]
 8003bca:	699b      	ldr	r3, [r3, #24]
 8003bcc:	f003 0320 	and.w	r3, r3, #32
 8003bd0:	2b00      	cmp	r3, #0
 8003bd2:	d011      	beq.n	8003bf8 <HAL_COMP_Init+0x1b8>
      {
#if defined(STM32G474xx) || defined(STM32G484xx) || defined(STM32G473xx) || defined(STM32G483xx)
        if((hcomp->Instance == COMP6) || (hcomp->Instance == COMP7))
 8003bd4:	687b      	ldr	r3, [r7, #4]
 8003bd6:	681b      	ldr	r3, [r3, #0]
 8003bd8:	4a59      	ldr	r2, [pc, #356]	; (8003d40 <HAL_COMP_Init+0x300>)
 8003bda:	4293      	cmp	r3, r2
 8003bdc:	d004      	beq.n	8003be8 <HAL_COMP_Init+0x1a8>
 8003bde:	687b      	ldr	r3, [r7, #4]
 8003be0:	681b      	ldr	r3, [r3, #0]
 8003be2:	4a58      	ldr	r2, [pc, #352]	; (8003d44 <HAL_COMP_Init+0x304>)
 8003be4:	4293      	cmp	r3, r2
 8003be6:	d103      	bne.n	8003bf0 <HAL_COMP_Init+0x1b0>
        {
          LL_EXTI_EnableFallingTrig_32_63(exti_line);
 8003be8:	6938      	ldr	r0, [r7, #16]
 8003bea:	f7ff fecf 	bl	800398c <LL_EXTI_EnableFallingTrig_32_63>
 8003bee:	e014      	b.n	8003c1a <HAL_COMP_Init+0x1da>
        }
        else
        {
          LL_EXTI_EnableFallingTrig_0_31(exti_line);
 8003bf0:	6938      	ldr	r0, [r7, #16]
 8003bf2:	f7ff feb9 	bl	8003968 <LL_EXTI_EnableFallingTrig_0_31>
 8003bf6:	e010      	b.n	8003c1a <HAL_COMP_Init+0x1da>
#endif
      }
      else
      {
#if defined(STM32G474xx) || defined(STM32G484xx) || defined(STM32G473xx) || defined(STM32G483xx)
        if((hcomp->Instance == COMP6) || (hcomp->Instance == COMP7))
 8003bf8:	687b      	ldr	r3, [r7, #4]
 8003bfa:	681b      	ldr	r3, [r3, #0]
 8003bfc:	4a50      	ldr	r2, [pc, #320]	; (8003d40 <HAL_COMP_Init+0x300>)
 8003bfe:	4293      	cmp	r3, r2
 8003c00:	d004      	beq.n	8003c0c <HAL_COMP_Init+0x1cc>
 8003c02:	687b      	ldr	r3, [r7, #4]
 8003c04:	681b      	ldr	r3, [r3, #0]
 8003c06:	4a4f      	ldr	r2, [pc, #316]	; (8003d44 <HAL_COMP_Init+0x304>)
 8003c08:	4293      	cmp	r3, r2
 8003c0a:	d103      	bne.n	8003c14 <HAL_COMP_Init+0x1d4>
        {
          LL_EXTI_DisableFallingTrig_32_63(exti_line);
 8003c0c:	6938      	ldr	r0, [r7, #16]
 8003c0e:	f7ff fee3 	bl	80039d8 <LL_EXTI_DisableFallingTrig_32_63>
 8003c12:	e002      	b.n	8003c1a <HAL_COMP_Init+0x1da>
        }
        else
        {
          LL_EXTI_DisableFallingTrig_0_31(exti_line);
 8003c14:	6938      	ldr	r0, [r7, #16]
 8003c16:	f7ff fecb 	bl	80039b0 <LL_EXTI_DisableFallingTrig_0_31>
#endif
      }

      /* Clear COMP EXTI pending bit (if any) */
#if defined(STM32G474xx) || defined(STM32G484xx) || defined(STM32G473xx) || defined(STM32G483xx)
      if((hcomp->Instance == COMP6) || (hcomp->Instance == COMP7))
 8003c1a:	687b      	ldr	r3, [r7, #4]
 8003c1c:	681b      	ldr	r3, [r3, #0]
 8003c1e:	4a48      	ldr	r2, [pc, #288]	; (8003d40 <HAL_COMP_Init+0x300>)
 8003c20:	4293      	cmp	r3, r2
 8003c22:	d004      	beq.n	8003c2e <HAL_COMP_Init+0x1ee>
 8003c24:	687b      	ldr	r3, [r7, #4]
 8003c26:	681b      	ldr	r3, [r3, #0]
 8003c28:	4a46      	ldr	r2, [pc, #280]	; (8003d44 <HAL_COMP_Init+0x304>)
 8003c2a:	4293      	cmp	r3, r2
 8003c2c:	d103      	bne.n	8003c36 <HAL_COMP_Init+0x1f6>
      {
        LL_EXTI_ClearFlag_32_63(exti_line);
 8003c2e:	6938      	ldr	r0, [r7, #16]
 8003c30:	f7ff fef6 	bl	8003a20 <LL_EXTI_ClearFlag_32_63>
 8003c34:	e002      	b.n	8003c3c <HAL_COMP_Init+0x1fc>
      }
      else
      {
        LL_EXTI_ClearFlag_0_31(exti_line);
 8003c36:	6938      	ldr	r0, [r7, #16]
 8003c38:	f7ff fee2 	bl	8003a00 <LL_EXTI_ClearFlag_0_31>
#else
      LL_EXTI_ClearFlag_0_31(exti_line);
#endif

      /* Configure EXTI event mode */
      if((hcomp->Init.TriggerMode & COMP_EXTI_EVENT) != 0UL)
 8003c3c:	687b      	ldr	r3, [r7, #4]
 8003c3e:	699b      	ldr	r3, [r3, #24]
 8003c40:	f003 0302 	and.w	r3, r3, #2
 8003c44:	2b00      	cmp	r3, #0
 8003c46:	d011      	beq.n	8003c6c <HAL_COMP_Init+0x22c>
      {
#if defined(STM32G474xx) || defined(STM32G484xx) || defined(STM32G473xx) || defined(STM32G483xx)
        if((hcomp->Instance == COMP6) || (hcomp->Instance == COMP7))
 8003c48:	687b      	ldr	r3, [r7, #4]
 8003c4a:	681b      	ldr	r3, [r3, #0]
 8003c4c:	4a3c      	ldr	r2, [pc, #240]	; (8003d40 <HAL_COMP_Init+0x300>)
 8003c4e:	4293      	cmp	r3, r2
 8003c50:	d004      	beq.n	8003c5c <HAL_COMP_Init+0x21c>
 8003c52:	687b      	ldr	r3, [r7, #4]
 8003c54:	681b      	ldr	r3, [r3, #0]
 8003c56:	4a3b      	ldr	r2, [pc, #236]	; (8003d44 <HAL_COMP_Init+0x304>)
 8003c58:	4293      	cmp	r3, r2
 8003c5a:	d103      	bne.n	8003c64 <HAL_COMP_Init+0x224>
        {
          LL_EXTI_EnableEvent_32_63(exti_line);
 8003c5c:	6938      	ldr	r0, [r7, #16]
 8003c5e:	f7ff fdfd 	bl	800385c <LL_EXTI_EnableEvent_32_63>
 8003c62:	e014      	b.n	8003c8e <HAL_COMP_Init+0x24e>
        }
        else
        {
          LL_EXTI_EnableEvent_0_31(exti_line);
 8003c64:	6938      	ldr	r0, [r7, #16]
 8003c66:	f7ff fde7 	bl	8003838 <LL_EXTI_EnableEvent_0_31>
 8003c6a:	e010      	b.n	8003c8e <HAL_COMP_Init+0x24e>
#endif
      }
      else
      {
#if defined(STM32G474xx) || defined(STM32G484xx) || defined(STM32G473xx) || defined(STM32G483xx)
        if((hcomp->Instance == COMP6) || (hcomp->Instance == COMP7))
 8003c6c:	687b      	ldr	r3, [r7, #4]
 8003c6e:	681b      	ldr	r3, [r3, #0]
 8003c70:	4a33      	ldr	r2, [pc, #204]	; (8003d40 <HAL_COMP_Init+0x300>)
 8003c72:	4293      	cmp	r3, r2
 8003c74:	d004      	beq.n	8003c80 <HAL_COMP_Init+0x240>
 8003c76:	687b      	ldr	r3, [r7, #4]
 8003c78:	681b      	ldr	r3, [r3, #0]
 8003c7a:	4a32      	ldr	r2, [pc, #200]	; (8003d44 <HAL_COMP_Init+0x304>)
 8003c7c:	4293      	cmp	r3, r2
 8003c7e:	d103      	bne.n	8003c88 <HAL_COMP_Init+0x248>
        {
          LL_EXTI_DisableEvent_32_63(exti_line);
 8003c80:	6938      	ldr	r0, [r7, #16]
 8003c82:	f7ff fe11 	bl	80038a8 <LL_EXTI_DisableEvent_32_63>
 8003c86:	e002      	b.n	8003c8e <HAL_COMP_Init+0x24e>
        }
        else
        {
          LL_EXTI_DisableEvent_0_31(exti_line);
 8003c88:	6938      	ldr	r0, [r7, #16]
 8003c8a:	f7ff fdf9 	bl	8003880 <LL_EXTI_DisableEvent_0_31>
        LL_EXTI_DisableEvent_0_31(exti_line);
#endif
      }

      /* Configure EXTI interrupt mode */
      if((hcomp->Init.TriggerMode & COMP_EXTI_IT) != 0UL)
 8003c8e:	687b      	ldr	r3, [r7, #4]
 8003c90:	699b      	ldr	r3, [r3, #24]
 8003c92:	f003 0301 	and.w	r3, r3, #1
 8003c96:	2b00      	cmp	r3, #0
 8003c98:	d011      	beq.n	8003cbe <HAL_COMP_Init+0x27e>
      {
#if defined(STM32G474xx) || defined(STM32G484xx) || defined(STM32G473xx) || defined(STM32G483xx)
        if((hcomp->Instance == COMP6) || (hcomp->Instance == COMP7))
 8003c9a:	687b      	ldr	r3, [r7, #4]
 8003c9c:	681b      	ldr	r3, [r3, #0]
 8003c9e:	4a28      	ldr	r2, [pc, #160]	; (8003d40 <HAL_COMP_Init+0x300>)
 8003ca0:	4293      	cmp	r3, r2
 8003ca2:	d004      	beq.n	8003cae <HAL_COMP_Init+0x26e>
 8003ca4:	687b      	ldr	r3, [r7, #4]
 8003ca6:	681b      	ldr	r3, [r3, #0]
 8003ca8:	4a26      	ldr	r2, [pc, #152]	; (8003d44 <HAL_COMP_Init+0x304>)
 8003caa:	4293      	cmp	r3, r2
 8003cac:	d103      	bne.n	8003cb6 <HAL_COMP_Init+0x276>
        {
          LL_EXTI_EnableIT_32_63(exti_line);
 8003cae:	6938      	ldr	r0, [r7, #16]
 8003cb0:	f7ff fd88 	bl	80037c4 <LL_EXTI_EnableIT_32_63>
 8003cb4:	e04b      	b.n	8003d4e <HAL_COMP_Init+0x30e>
        }
        else
        {
          LL_EXTI_EnableIT_0_31(exti_line);
 8003cb6:	6938      	ldr	r0, [r7, #16]
 8003cb8:	f7ff fd72 	bl	80037a0 <LL_EXTI_EnableIT_0_31>
 8003cbc:	e047      	b.n	8003d4e <HAL_COMP_Init+0x30e>
#endif
      }
      else
      {
#if defined(STM32G474xx) || defined(STM32G484xx) || defined(STM32G473xx) || defined(STM32G483xx)
        if((hcomp->Instance == COMP6) || (hcomp->Instance == COMP7))
 8003cbe:	687b      	ldr	r3, [r7, #4]
 8003cc0:	681b      	ldr	r3, [r3, #0]
 8003cc2:	4a1f      	ldr	r2, [pc, #124]	; (8003d40 <HAL_COMP_Init+0x300>)
 8003cc4:	4293      	cmp	r3, r2
 8003cc6:	d004      	beq.n	8003cd2 <HAL_COMP_Init+0x292>
 8003cc8:	687b      	ldr	r3, [r7, #4]
 8003cca:	681b      	ldr	r3, [r3, #0]
 8003ccc:	4a1d      	ldr	r2, [pc, #116]	; (8003d44 <HAL_COMP_Init+0x304>)
 8003cce:	4293      	cmp	r3, r2
 8003cd0:	d103      	bne.n	8003cda <HAL_COMP_Init+0x29a>
        {
          LL_EXTI_DisableIT_32_63(exti_line);
 8003cd2:	6938      	ldr	r0, [r7, #16]
 8003cd4:	f7ff fd9c 	bl	8003810 <LL_EXTI_DisableIT_32_63>
 8003cd8:	e039      	b.n	8003d4e <HAL_COMP_Init+0x30e>
        }
        else
        {
          LL_EXTI_DisableIT_0_31(exti_line);
 8003cda:	6938      	ldr	r0, [r7, #16]
 8003cdc:	f7ff fd84 	bl	80037e8 <LL_EXTI_DisableIT_0_31>
 8003ce0:	e035      	b.n	8003d4e <HAL_COMP_Init+0x30e>
    }
    else
    {
      /* Disable EXTI event mode */
#if defined(STM32G474xx) || defined(STM32G484xx) || defined(STM32G473xx) || defined(STM32G483xx)
      if((hcomp->Instance == COMP6) || (hcomp->Instance == COMP7))
 8003ce2:	687b      	ldr	r3, [r7, #4]
 8003ce4:	681b      	ldr	r3, [r3, #0]
 8003ce6:	4a16      	ldr	r2, [pc, #88]	; (8003d40 <HAL_COMP_Init+0x300>)
 8003ce8:	4293      	cmp	r3, r2
 8003cea:	d004      	beq.n	8003cf6 <HAL_COMP_Init+0x2b6>
 8003cec:	687b      	ldr	r3, [r7, #4]
 8003cee:	681b      	ldr	r3, [r3, #0]
 8003cf0:	4a14      	ldr	r2, [pc, #80]	; (8003d44 <HAL_COMP_Init+0x304>)
 8003cf2:	4293      	cmp	r3, r2
 8003cf4:	d103      	bne.n	8003cfe <HAL_COMP_Init+0x2be>
      {
        LL_EXTI_DisableEvent_32_63(exti_line);
 8003cf6:	6938      	ldr	r0, [r7, #16]
 8003cf8:	f7ff fdd6 	bl	80038a8 <LL_EXTI_DisableEvent_32_63>
 8003cfc:	e002      	b.n	8003d04 <HAL_COMP_Init+0x2c4>
      }
      else
      {
        LL_EXTI_DisableEvent_0_31(exti_line);
 8003cfe:	6938      	ldr	r0, [r7, #16]
 8003d00:	f7ff fdbe 	bl	8003880 <LL_EXTI_DisableEvent_0_31>
      LL_EXTI_DisableEvent_0_31(exti_line);
#endif

      /* Disable EXTI interrupt mode */
#if defined(STM32G474xx) || defined(STM32G484xx) || defined(STM32G473xx) || defined(STM32G483xx)
      if((hcomp->Instance == COMP6) || (hcomp->Instance == COMP7))
 8003d04:	687b      	ldr	r3, [r7, #4]
 8003d06:	681b      	ldr	r3, [r3, #0]
 8003d08:	4a0d      	ldr	r2, [pc, #52]	; (8003d40 <HAL_COMP_Init+0x300>)
 8003d0a:	4293      	cmp	r3, r2
 8003d0c:	d004      	beq.n	8003d18 <HAL_COMP_Init+0x2d8>
 8003d0e:	687b      	ldr	r3, [r7, #4]
 8003d10:	681b      	ldr	r3, [r3, #0]
 8003d12:	4a0c      	ldr	r2, [pc, #48]	; (8003d44 <HAL_COMP_Init+0x304>)
 8003d14:	4293      	cmp	r3, r2
 8003d16:	d117      	bne.n	8003d48 <HAL_COMP_Init+0x308>
      {
        LL_EXTI_DisableIT_32_63(exti_line);
 8003d18:	6938      	ldr	r0, [r7, #16]
 8003d1a:	f7ff fd79 	bl	8003810 <LL_EXTI_DisableIT_32_63>
 8003d1e:	e016      	b.n	8003d4e <HAL_COMP_Init+0x30e>
 8003d20:	ff007e0f 	.word	0xff007e0f
 8003d24:	2000000c 	.word	0x2000000c
 8003d28:	053e2d63 	.word	0x053e2d63
 8003d2c:	40010200 	.word	0x40010200
 8003d30:	40010204 	.word	0x40010204
 8003d34:	40010208 	.word	0x40010208
 8003d38:	4001020c 	.word	0x4001020c
 8003d3c:	40010210 	.word	0x40010210
 8003d40:	40010214 	.word	0x40010214
 8003d44:	40010218 	.word	0x40010218
      }
      else
      {
        LL_EXTI_DisableIT_0_31(exti_line);
 8003d48:	6938      	ldr	r0, [r7, #16]
 8003d4a:	f7ff fd4d 	bl	80037e8 <LL_EXTI_DisableIT_0_31>
    }

    /* Set HAL COMP handle state */
    /* Note: Transition from state reset to state ready,                      */
    /*       otherwise (coming from state ready or busy) no state update.     */
    if (hcomp->State == HAL_COMP_STATE_RESET)
 8003d4e:	687b      	ldr	r3, [r7, #4]
 8003d50:	7f5b      	ldrb	r3, [r3, #29]
 8003d52:	b2db      	uxtb	r3, r3
 8003d54:	2b00      	cmp	r3, #0
 8003d56:	d102      	bne.n	8003d5e <HAL_COMP_Init+0x31e>
    {
      hcomp->State = HAL_COMP_STATE_READY;
 8003d58:	687b      	ldr	r3, [r7, #4]
 8003d5a:	2201      	movs	r2, #1
 8003d5c:	775a      	strb	r2, [r3, #29]
    }
  }

  return status;
 8003d5e:	7ffb      	ldrb	r3, [r7, #31]
}
 8003d60:	4618      	mov	r0, r3
 8003d62:	3720      	adds	r7, #32
 8003d64:	46bd      	mov	sp, r7
 8003d66:	bd80      	pop	{r7, pc}

08003d68 <__NVIC_SetPriorityGrouping>:
{
 8003d68:	b480      	push	{r7}
 8003d6a:	b085      	sub	sp, #20
 8003d6c:	af00      	add	r7, sp, #0
 8003d6e:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003d70:	687b      	ldr	r3, [r7, #4]
 8003d72:	f003 0307 	and.w	r3, r3, #7
 8003d76:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003d78:	4b0c      	ldr	r3, [pc, #48]	; (8003dac <__NVIC_SetPriorityGrouping+0x44>)
 8003d7a:	68db      	ldr	r3, [r3, #12]
 8003d7c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8003d7e:	68ba      	ldr	r2, [r7, #8]
 8003d80:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8003d84:	4013      	ands	r3, r2
 8003d86:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8003d88:	68fb      	ldr	r3, [r7, #12]
 8003d8a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003d8c:	68bb      	ldr	r3, [r7, #8]
 8003d8e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8003d90:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8003d94:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003d98:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8003d9a:	4a04      	ldr	r2, [pc, #16]	; (8003dac <__NVIC_SetPriorityGrouping+0x44>)
 8003d9c:	68bb      	ldr	r3, [r7, #8]
 8003d9e:	60d3      	str	r3, [r2, #12]
}
 8003da0:	bf00      	nop
 8003da2:	3714      	adds	r7, #20
 8003da4:	46bd      	mov	sp, r7
 8003da6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003daa:	4770      	bx	lr
 8003dac:	e000ed00 	.word	0xe000ed00

08003db0 <__NVIC_GetPriorityGrouping>:
{
 8003db0:	b480      	push	{r7}
 8003db2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003db4:	4b04      	ldr	r3, [pc, #16]	; (8003dc8 <__NVIC_GetPriorityGrouping+0x18>)
 8003db6:	68db      	ldr	r3, [r3, #12]
 8003db8:	0a1b      	lsrs	r3, r3, #8
 8003dba:	f003 0307 	and.w	r3, r3, #7
}
 8003dbe:	4618      	mov	r0, r3
 8003dc0:	46bd      	mov	sp, r7
 8003dc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dc6:	4770      	bx	lr
 8003dc8:	e000ed00 	.word	0xe000ed00

08003dcc <__NVIC_EnableIRQ>:
{
 8003dcc:	b480      	push	{r7}
 8003dce:	b083      	sub	sp, #12
 8003dd0:	af00      	add	r7, sp, #0
 8003dd2:	4603      	mov	r3, r0
 8003dd4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003dd6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003dda:	2b00      	cmp	r3, #0
 8003ddc:	db0b      	blt.n	8003df6 <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003dde:	79fb      	ldrb	r3, [r7, #7]
 8003de0:	f003 021f 	and.w	r2, r3, #31
 8003de4:	4907      	ldr	r1, [pc, #28]	; (8003e04 <__NVIC_EnableIRQ+0x38>)
 8003de6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003dea:	095b      	lsrs	r3, r3, #5
 8003dec:	2001      	movs	r0, #1
 8003dee:	fa00 f202 	lsl.w	r2, r0, r2
 8003df2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8003df6:	bf00      	nop
 8003df8:	370c      	adds	r7, #12
 8003dfa:	46bd      	mov	sp, r7
 8003dfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e00:	4770      	bx	lr
 8003e02:	bf00      	nop
 8003e04:	e000e100 	.word	0xe000e100

08003e08 <__NVIC_SetPriority>:
{
 8003e08:	b480      	push	{r7}
 8003e0a:	b083      	sub	sp, #12
 8003e0c:	af00      	add	r7, sp, #0
 8003e0e:	4603      	mov	r3, r0
 8003e10:	6039      	str	r1, [r7, #0]
 8003e12:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003e14:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003e18:	2b00      	cmp	r3, #0
 8003e1a:	db0a      	blt.n	8003e32 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003e1c:	683b      	ldr	r3, [r7, #0]
 8003e1e:	b2da      	uxtb	r2, r3
 8003e20:	490c      	ldr	r1, [pc, #48]	; (8003e54 <__NVIC_SetPriority+0x4c>)
 8003e22:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003e26:	0112      	lsls	r2, r2, #4
 8003e28:	b2d2      	uxtb	r2, r2
 8003e2a:	440b      	add	r3, r1
 8003e2c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8003e30:	e00a      	b.n	8003e48 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003e32:	683b      	ldr	r3, [r7, #0]
 8003e34:	b2da      	uxtb	r2, r3
 8003e36:	4908      	ldr	r1, [pc, #32]	; (8003e58 <__NVIC_SetPriority+0x50>)
 8003e38:	79fb      	ldrb	r3, [r7, #7]
 8003e3a:	f003 030f 	and.w	r3, r3, #15
 8003e3e:	3b04      	subs	r3, #4
 8003e40:	0112      	lsls	r2, r2, #4
 8003e42:	b2d2      	uxtb	r2, r2
 8003e44:	440b      	add	r3, r1
 8003e46:	761a      	strb	r2, [r3, #24]
}
 8003e48:	bf00      	nop
 8003e4a:	370c      	adds	r7, #12
 8003e4c:	46bd      	mov	sp, r7
 8003e4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e52:	4770      	bx	lr
 8003e54:	e000e100 	.word	0xe000e100
 8003e58:	e000ed00 	.word	0xe000ed00

08003e5c <NVIC_EncodePriority>:
{
 8003e5c:	b480      	push	{r7}
 8003e5e:	b089      	sub	sp, #36	; 0x24
 8003e60:	af00      	add	r7, sp, #0
 8003e62:	60f8      	str	r0, [r7, #12]
 8003e64:	60b9      	str	r1, [r7, #8]
 8003e66:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003e68:	68fb      	ldr	r3, [r7, #12]
 8003e6a:	f003 0307 	and.w	r3, r3, #7
 8003e6e:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003e70:	69fb      	ldr	r3, [r7, #28]
 8003e72:	f1c3 0307 	rsb	r3, r3, #7
 8003e76:	2b04      	cmp	r3, #4
 8003e78:	bf28      	it	cs
 8003e7a:	2304      	movcs	r3, #4
 8003e7c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003e7e:	69fb      	ldr	r3, [r7, #28]
 8003e80:	3304      	adds	r3, #4
 8003e82:	2b06      	cmp	r3, #6
 8003e84:	d902      	bls.n	8003e8c <NVIC_EncodePriority+0x30>
 8003e86:	69fb      	ldr	r3, [r7, #28]
 8003e88:	3b03      	subs	r3, #3
 8003e8a:	e000      	b.n	8003e8e <NVIC_EncodePriority+0x32>
 8003e8c:	2300      	movs	r3, #0
 8003e8e:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003e90:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8003e94:	69bb      	ldr	r3, [r7, #24]
 8003e96:	fa02 f303 	lsl.w	r3, r2, r3
 8003e9a:	43da      	mvns	r2, r3
 8003e9c:	68bb      	ldr	r3, [r7, #8]
 8003e9e:	401a      	ands	r2, r3
 8003ea0:	697b      	ldr	r3, [r7, #20]
 8003ea2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003ea4:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8003ea8:	697b      	ldr	r3, [r7, #20]
 8003eaa:	fa01 f303 	lsl.w	r3, r1, r3
 8003eae:	43d9      	mvns	r1, r3
 8003eb0:	687b      	ldr	r3, [r7, #4]
 8003eb2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003eb4:	4313      	orrs	r3, r2
}
 8003eb6:	4618      	mov	r0, r3
 8003eb8:	3724      	adds	r7, #36	; 0x24
 8003eba:	46bd      	mov	sp, r7
 8003ebc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ec0:	4770      	bx	lr
	...

08003ec4 <SysTick_Config>:
{
 8003ec4:	b580      	push	{r7, lr}
 8003ec6:	b082      	sub	sp, #8
 8003ec8:	af00      	add	r7, sp, #0
 8003eca:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003ecc:	687b      	ldr	r3, [r7, #4]
 8003ece:	3b01      	subs	r3, #1
 8003ed0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8003ed4:	d301      	bcc.n	8003eda <SysTick_Config+0x16>
    return (1UL);                                                   /* Reload value impossible */
 8003ed6:	2301      	movs	r3, #1
 8003ed8:	e00f      	b.n	8003efa <SysTick_Config+0x36>
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8003eda:	4a0a      	ldr	r2, [pc, #40]	; (8003f04 <SysTick_Config+0x40>)
 8003edc:	687b      	ldr	r3, [r7, #4]
 8003ede:	3b01      	subs	r3, #1
 8003ee0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8003ee2:	210f      	movs	r1, #15
 8003ee4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8003ee8:	f7ff ff8e 	bl	8003e08 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003eec:	4b05      	ldr	r3, [pc, #20]	; (8003f04 <SysTick_Config+0x40>)
 8003eee:	2200      	movs	r2, #0
 8003ef0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8003ef2:	4b04      	ldr	r3, [pc, #16]	; (8003f04 <SysTick_Config+0x40>)
 8003ef4:	2207      	movs	r2, #7
 8003ef6:	601a      	str	r2, [r3, #0]
  return (0UL);                                                     /* Function successful */
 8003ef8:	2300      	movs	r3, #0
}
 8003efa:	4618      	mov	r0, r3
 8003efc:	3708      	adds	r7, #8
 8003efe:	46bd      	mov	sp, r7
 8003f00:	bd80      	pop	{r7, pc}
 8003f02:	bf00      	nop
 8003f04:	e000e010 	.word	0xe000e010

08003f08 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003f08:	b580      	push	{r7, lr}
 8003f0a:	b082      	sub	sp, #8
 8003f0c:	af00      	add	r7, sp, #0
 8003f0e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003f10:	6878      	ldr	r0, [r7, #4]
 8003f12:	f7ff ff29 	bl	8003d68 <__NVIC_SetPriorityGrouping>
}
 8003f16:	bf00      	nop
 8003f18:	3708      	adds	r7, #8
 8003f1a:	46bd      	mov	sp, r7
 8003f1c:	bd80      	pop	{r7, pc}

08003f1e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003f1e:	b580      	push	{r7, lr}
 8003f20:	b086      	sub	sp, #24
 8003f22:	af00      	add	r7, sp, #0
 8003f24:	4603      	mov	r3, r0
 8003f26:	60b9      	str	r1, [r7, #8]
 8003f28:	607a      	str	r2, [r7, #4]
 8003f2a:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8003f2c:	f7ff ff40 	bl	8003db0 <__NVIC_GetPriorityGrouping>
 8003f30:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8003f32:	687a      	ldr	r2, [r7, #4]
 8003f34:	68b9      	ldr	r1, [r7, #8]
 8003f36:	6978      	ldr	r0, [r7, #20]
 8003f38:	f7ff ff90 	bl	8003e5c <NVIC_EncodePriority>
 8003f3c:	4602      	mov	r2, r0
 8003f3e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003f42:	4611      	mov	r1, r2
 8003f44:	4618      	mov	r0, r3
 8003f46:	f7ff ff5f 	bl	8003e08 <__NVIC_SetPriority>
}
 8003f4a:	bf00      	nop
 8003f4c:	3718      	adds	r7, #24
 8003f4e:	46bd      	mov	sp, r7
 8003f50:	bd80      	pop	{r7, pc}

08003f52 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003f52:	b580      	push	{r7, lr}
 8003f54:	b082      	sub	sp, #8
 8003f56:	af00      	add	r7, sp, #0
 8003f58:	4603      	mov	r3, r0
 8003f5a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003f5c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003f60:	4618      	mov	r0, r3
 8003f62:	f7ff ff33 	bl	8003dcc <__NVIC_EnableIRQ>
}
 8003f66:	bf00      	nop
 8003f68:	3708      	adds	r7, #8
 8003f6a:	46bd      	mov	sp, r7
 8003f6c:	bd80      	pop	{r7, pc}

08003f6e <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8003f6e:	b580      	push	{r7, lr}
 8003f70:	b082      	sub	sp, #8
 8003f72:	af00      	add	r7, sp, #0
 8003f74:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8003f76:	6878      	ldr	r0, [r7, #4]
 8003f78:	f7ff ffa4 	bl	8003ec4 <SysTick_Config>
 8003f7c:	4603      	mov	r3, r0
}
 8003f7e:	4618      	mov	r0, r3
 8003f80:	3708      	adds	r7, #8
 8003f82:	46bd      	mov	sp, r7
 8003f84:	bd80      	pop	{r7, pc}

08003f86 <HAL_DAC_Init>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Init(DAC_HandleTypeDef *hdac)
{
 8003f86:	b580      	push	{r7, lr}
 8003f88:	b082      	sub	sp, #8
 8003f8a:	af00      	add	r7, sp, #0
 8003f8c:	6078      	str	r0, [r7, #4]
  /* Check DAC handle */
  if (hdac == NULL)
 8003f8e:	687b      	ldr	r3, [r7, #4]
 8003f90:	2b00      	cmp	r3, #0
 8003f92:	d101      	bne.n	8003f98 <HAL_DAC_Init+0x12>
  {
    return HAL_ERROR;
 8003f94:	2301      	movs	r3, #1
 8003f96:	e014      	b.n	8003fc2 <HAL_DAC_Init+0x3c>
  }
  /* Check the parameters */
  assert_param(IS_DAC_ALL_INSTANCE(hdac->Instance));

  if (hdac->State == HAL_DAC_STATE_RESET)
 8003f98:	687b      	ldr	r3, [r7, #4]
 8003f9a:	791b      	ldrb	r3, [r3, #4]
 8003f9c:	b2db      	uxtb	r3, r3
 8003f9e:	2b00      	cmp	r3, #0
 8003fa0:	d105      	bne.n	8003fae <HAL_DAC_Init+0x28>
      hdac->MspInitCallback             = HAL_DAC_MspInit;
    }
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

    /* Allocate lock resource and initialize it */
    hdac->Lock = HAL_UNLOCKED;
 8003fa2:	687b      	ldr	r3, [r7, #4]
 8003fa4:	2200      	movs	r2, #0
 8003fa6:	715a      	strb	r2, [r3, #5]
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
    /* Init the low level hardware */
    hdac->MspInitCallback(hdac);
#else
    /* Init the low level hardware */
    HAL_DAC_MspInit(hdac);
 8003fa8:	6878      	ldr	r0, [r7, #4]
 8003faa:	f7fc ff13 	bl	8000dd4 <HAL_DAC_MspInit>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
  }

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_BUSY;
 8003fae:	687b      	ldr	r3, [r7, #4]
 8003fb0:	2202      	movs	r2, #2
 8003fb2:	711a      	strb	r2, [r3, #4]

  /* Set DAC error code to none */
  hdac->ErrorCode = HAL_DAC_ERROR_NONE;
 8003fb4:	687b      	ldr	r3, [r7, #4]
 8003fb6:	2200      	movs	r2, #0
 8003fb8:	611a      	str	r2, [r3, #16]

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_READY;
 8003fba:	687b      	ldr	r3, [r7, #4]
 8003fbc:	2201      	movs	r2, #1
 8003fbe:	711a      	strb	r2, [r3, #4]

  /* Return function status */
  return HAL_OK;
 8003fc0:	2300      	movs	r3, #0
}
 8003fc2:	4618      	mov	r0, r3
 8003fc4:	3708      	adds	r7, #8
 8003fc6:	46bd      	mov	sp, r7
 8003fc8:	bd80      	pop	{r7, pc}

08003fca <HAL_DAC_Start>:
  *         (1) On this STM32 serie, parameter not available on all instances.
  *             Refer to device datasheet for channels availability.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Start(DAC_HandleTypeDef *hdac, uint32_t Channel)
{
 8003fca:	b580      	push	{r7, lr}
 8003fcc:	b082      	sub	sp, #8
 8003fce:	af00      	add	r7, sp, #0
 8003fd0:	6078      	str	r0, [r7, #4]
 8003fd2:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(hdac->Instance, Channel));

  /* Process locked */
  __HAL_LOCK(hdac);
 8003fd4:	687b      	ldr	r3, [r7, #4]
 8003fd6:	795b      	ldrb	r3, [r3, #5]
 8003fd8:	2b01      	cmp	r3, #1
 8003fda:	d101      	bne.n	8003fe0 <HAL_DAC_Start+0x16>
 8003fdc:	2302      	movs	r3, #2
 8003fde:	e043      	b.n	8004068 <HAL_DAC_Start+0x9e>
 8003fe0:	687b      	ldr	r3, [r7, #4]
 8003fe2:	2201      	movs	r2, #1
 8003fe4:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 8003fe6:	687b      	ldr	r3, [r7, #4]
 8003fe8:	2202      	movs	r2, #2
 8003fea:	711a      	strb	r2, [r3, #4]

  /* Enable the Peripheral */
  __HAL_DAC_ENABLE(hdac, Channel);
 8003fec:	687b      	ldr	r3, [r7, #4]
 8003fee:	681b      	ldr	r3, [r3, #0]
 8003ff0:	6819      	ldr	r1, [r3, #0]
 8003ff2:	683b      	ldr	r3, [r7, #0]
 8003ff4:	f003 0310 	and.w	r3, r3, #16
 8003ff8:	2201      	movs	r2, #1
 8003ffa:	409a      	lsls	r2, r3
 8003ffc:	687b      	ldr	r3, [r7, #4]
 8003ffe:	681b      	ldr	r3, [r3, #0]
 8004000:	430a      	orrs	r2, r1
 8004002:	601a      	str	r2, [r3, #0]
  /* Ensure minimum wait before using peripheral after enabling it */
  HAL_Delay(1);
 8004004:	2001      	movs	r0, #1
 8004006:	f7fe fb4d 	bl	80026a4 <HAL_Delay>

  if (Channel == DAC_CHANNEL_1)
 800400a:	683b      	ldr	r3, [r7, #0]
 800400c:	2b00      	cmp	r3, #0
 800400e:	d10f      	bne.n	8004030 <HAL_DAC_Start+0x66>
  {
    /* Check if software trigger enabled */
    if ((hdac->Instance->CR & (DAC_CR_TEN1 | DAC_CR_TSEL1)) == DAC_TRIGGER_SOFTWARE)
 8004010:	687b      	ldr	r3, [r7, #4]
 8004012:	681b      	ldr	r3, [r3, #0]
 8004014:	681b      	ldr	r3, [r3, #0]
 8004016:	f003 033e 	and.w	r3, r3, #62	; 0x3e
 800401a:	2b02      	cmp	r3, #2
 800401c:	d11d      	bne.n	800405a <HAL_DAC_Start+0x90>
    {
      /* Enable the selected DAC software conversion */
      SET_BIT(hdac->Instance->SWTRIGR, DAC_SWTRIGR_SWTRIG1);
 800401e:	687b      	ldr	r3, [r7, #4]
 8004020:	681b      	ldr	r3, [r3, #0]
 8004022:	685a      	ldr	r2, [r3, #4]
 8004024:	687b      	ldr	r3, [r7, #4]
 8004026:	681b      	ldr	r3, [r3, #0]
 8004028:	f042 0201 	orr.w	r2, r2, #1
 800402c:	605a      	str	r2, [r3, #4]
 800402e:	e014      	b.n	800405a <HAL_DAC_Start+0x90>
    }
  }
  else
  {
    /* Check if software trigger enabled */
    if ((hdac->Instance->CR & (DAC_CR_TEN2 | DAC_CR_TSEL2)) == (DAC_TRIGGER_SOFTWARE << (Channel & 0x10UL)))
 8004030:	687b      	ldr	r3, [r7, #4]
 8004032:	681b      	ldr	r3, [r3, #0]
 8004034:	681b      	ldr	r3, [r3, #0]
 8004036:	f403 1278 	and.w	r2, r3, #4063232	; 0x3e0000
 800403a:	683b      	ldr	r3, [r7, #0]
 800403c:	f003 0310 	and.w	r3, r3, #16
 8004040:	2102      	movs	r1, #2
 8004042:	fa01 f303 	lsl.w	r3, r1, r3
 8004046:	429a      	cmp	r2, r3
 8004048:	d107      	bne.n	800405a <HAL_DAC_Start+0x90>
    {
      /* Enable the selected DAC software conversion*/
      SET_BIT(hdac->Instance->SWTRIGR, DAC_SWTRIGR_SWTRIG2);
 800404a:	687b      	ldr	r3, [r7, #4]
 800404c:	681b      	ldr	r3, [r3, #0]
 800404e:	685a      	ldr	r2, [r3, #4]
 8004050:	687b      	ldr	r3, [r7, #4]
 8004052:	681b      	ldr	r3, [r3, #0]
 8004054:	f042 0202 	orr.w	r2, r2, #2
 8004058:	605a      	str	r2, [r3, #4]
    }
  }

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 800405a:	687b      	ldr	r3, [r7, #4]
 800405c:	2201      	movs	r2, #1
 800405e:	711a      	strb	r2, [r3, #4]

  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 8004060:	687b      	ldr	r3, [r7, #4]
 8004062:	2200      	movs	r2, #0
 8004064:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 8004066:	2300      	movs	r3, #0
}
 8004068:	4618      	mov	r0, r3
 800406a:	3708      	adds	r7, #8
 800406c:	46bd      	mov	sp, r7
 800406e:	bd80      	pop	{r7, pc}

08004070 <HAL_DAC_Start_DMA>:
  *            @arg DAC_ALIGN_12B_R: 12bit right data alignment selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Start_DMA(DAC_HandleTypeDef *hdac, uint32_t Channel, uint32_t *pData, uint32_t Length,
                                    uint32_t Alignment)
{
 8004070:	b580      	push	{r7, lr}
 8004072:	b086      	sub	sp, #24
 8004074:	af00      	add	r7, sp, #0
 8004076:	60f8      	str	r0, [r7, #12]
 8004078:	60b9      	str	r1, [r7, #8]
 800407a:	607a      	str	r2, [r7, #4]
 800407c:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status;
  uint32_t tmpreg = 0U;
 800407e:	2300      	movs	r3, #0
 8004080:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(hdac->Instance, Channel));
  assert_param(IS_DAC_ALIGN(Alignment));

  /* Process locked */
  __HAL_LOCK(hdac);
 8004082:	68fb      	ldr	r3, [r7, #12]
 8004084:	795b      	ldrb	r3, [r3, #5]
 8004086:	2b01      	cmp	r3, #1
 8004088:	d101      	bne.n	800408e <HAL_DAC_Start_DMA+0x1e>
 800408a:	2302      	movs	r3, #2
 800408c:	e0a1      	b.n	80041d2 <HAL_DAC_Start_DMA+0x162>
 800408e:	68fb      	ldr	r3, [r7, #12]
 8004090:	2201      	movs	r2, #1
 8004092:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 8004094:	68fb      	ldr	r3, [r7, #12]
 8004096:	2202      	movs	r2, #2
 8004098:	711a      	strb	r2, [r3, #4]

  if (Channel == DAC_CHANNEL_1)
 800409a:	68bb      	ldr	r3, [r7, #8]
 800409c:	2b00      	cmp	r3, #0
 800409e:	d12a      	bne.n	80040f6 <HAL_DAC_Start_DMA+0x86>
  {
    /* Set the DMA transfer complete callback for channel1 */
    hdac->DMA_Handle1->XferCpltCallback = DAC_DMAConvCpltCh1;
 80040a0:	68fb      	ldr	r3, [r7, #12]
 80040a2:	689b      	ldr	r3, [r3, #8]
 80040a4:	4a4d      	ldr	r2, [pc, #308]	; (80041dc <HAL_DAC_Start_DMA+0x16c>)
 80040a6:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Set the DMA half transfer complete callback for channel1 */
    hdac->DMA_Handle1->XferHalfCpltCallback = DAC_DMAHalfConvCpltCh1;
 80040a8:	68fb      	ldr	r3, [r7, #12]
 80040aa:	689b      	ldr	r3, [r3, #8]
 80040ac:	4a4c      	ldr	r2, [pc, #304]	; (80041e0 <HAL_DAC_Start_DMA+0x170>)
 80040ae:	631a      	str	r2, [r3, #48]	; 0x30

    /* Set the DMA error callback for channel1 */
    hdac->DMA_Handle1->XferErrorCallback = DAC_DMAErrorCh1;
 80040b0:	68fb      	ldr	r3, [r7, #12]
 80040b2:	689b      	ldr	r3, [r3, #8]
 80040b4:	4a4b      	ldr	r2, [pc, #300]	; (80041e4 <HAL_DAC_Start_DMA+0x174>)
 80040b6:	635a      	str	r2, [r3, #52]	; 0x34

    /* Enable the selected DAC channel1 DMA request */
    SET_BIT(hdac->Instance->CR, DAC_CR_DMAEN1);
 80040b8:	68fb      	ldr	r3, [r7, #12]
 80040ba:	681b      	ldr	r3, [r3, #0]
 80040bc:	681a      	ldr	r2, [r3, #0]
 80040be:	68fb      	ldr	r3, [r7, #12]
 80040c0:	681b      	ldr	r3, [r3, #0]
 80040c2:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 80040c6:	601a      	str	r2, [r3, #0]

    /* Case of use of channel 1 */
    switch (Alignment)
 80040c8:	6a3b      	ldr	r3, [r7, #32]
 80040ca:	2b04      	cmp	r3, #4
 80040cc:	d009      	beq.n	80040e2 <HAL_DAC_Start_DMA+0x72>
 80040ce:	2b08      	cmp	r3, #8
 80040d0:	d00c      	beq.n	80040ec <HAL_DAC_Start_DMA+0x7c>
 80040d2:	2b00      	cmp	r3, #0
 80040d4:	d000      	beq.n	80040d8 <HAL_DAC_Start_DMA+0x68>
      case DAC_ALIGN_8B_R:
        /* Get DHR8R1 address */
        tmpreg = (uint32_t)&hdac->Instance->DHR8R1;
        break;
      default:
        break;
 80040d6:	e039      	b.n	800414c <HAL_DAC_Start_DMA+0xdc>
        tmpreg = (uint32_t)&hdac->Instance->DHR12R1;
 80040d8:	68fb      	ldr	r3, [r7, #12]
 80040da:	681b      	ldr	r3, [r3, #0]
 80040dc:	3308      	adds	r3, #8
 80040de:	613b      	str	r3, [r7, #16]
        break;
 80040e0:	e034      	b.n	800414c <HAL_DAC_Start_DMA+0xdc>
        tmpreg = (uint32_t)&hdac->Instance->DHR12L1;
 80040e2:	68fb      	ldr	r3, [r7, #12]
 80040e4:	681b      	ldr	r3, [r3, #0]
 80040e6:	330c      	adds	r3, #12
 80040e8:	613b      	str	r3, [r7, #16]
        break;
 80040ea:	e02f      	b.n	800414c <HAL_DAC_Start_DMA+0xdc>
        tmpreg = (uint32_t)&hdac->Instance->DHR8R1;
 80040ec:	68fb      	ldr	r3, [r7, #12]
 80040ee:	681b      	ldr	r3, [r3, #0]
 80040f0:	3310      	adds	r3, #16
 80040f2:	613b      	str	r3, [r7, #16]
        break;
 80040f4:	e02a      	b.n	800414c <HAL_DAC_Start_DMA+0xdc>
    }
  }
  else
  {
    /* Set the DMA transfer complete callback for channel2 */
    hdac->DMA_Handle2->XferCpltCallback = DAC_DMAConvCpltCh2;
 80040f6:	68fb      	ldr	r3, [r7, #12]
 80040f8:	68db      	ldr	r3, [r3, #12]
 80040fa:	4a3b      	ldr	r2, [pc, #236]	; (80041e8 <HAL_DAC_Start_DMA+0x178>)
 80040fc:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Set the DMA half transfer complete callback for channel2 */
    hdac->DMA_Handle2->XferHalfCpltCallback = DAC_DMAHalfConvCpltCh2;
 80040fe:	68fb      	ldr	r3, [r7, #12]
 8004100:	68db      	ldr	r3, [r3, #12]
 8004102:	4a3a      	ldr	r2, [pc, #232]	; (80041ec <HAL_DAC_Start_DMA+0x17c>)
 8004104:	631a      	str	r2, [r3, #48]	; 0x30

    /* Set the DMA error callback for channel2 */
    hdac->DMA_Handle2->XferErrorCallback = DAC_DMAErrorCh2;
 8004106:	68fb      	ldr	r3, [r7, #12]
 8004108:	68db      	ldr	r3, [r3, #12]
 800410a:	4a39      	ldr	r2, [pc, #228]	; (80041f0 <HAL_DAC_Start_DMA+0x180>)
 800410c:	635a      	str	r2, [r3, #52]	; 0x34

    /* Enable the selected DAC channel2 DMA request */
    SET_BIT(hdac->Instance->CR, DAC_CR_DMAEN2);
 800410e:	68fb      	ldr	r3, [r7, #12]
 8004110:	681b      	ldr	r3, [r3, #0]
 8004112:	681a      	ldr	r2, [r3, #0]
 8004114:	68fb      	ldr	r3, [r7, #12]
 8004116:	681b      	ldr	r3, [r3, #0]
 8004118:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 800411c:	601a      	str	r2, [r3, #0]

    /* Case of use of channel 2 */
    switch (Alignment)
 800411e:	6a3b      	ldr	r3, [r7, #32]
 8004120:	2b04      	cmp	r3, #4
 8004122:	d009      	beq.n	8004138 <HAL_DAC_Start_DMA+0xc8>
 8004124:	2b08      	cmp	r3, #8
 8004126:	d00c      	beq.n	8004142 <HAL_DAC_Start_DMA+0xd2>
 8004128:	2b00      	cmp	r3, #0
 800412a:	d000      	beq.n	800412e <HAL_DAC_Start_DMA+0xbe>
      case DAC_ALIGN_8B_R:
        /* Get DHR8R2 address */
        tmpreg = (uint32_t)&hdac->Instance->DHR8R2;
        break;
      default:
        break;
 800412c:	e00e      	b.n	800414c <HAL_DAC_Start_DMA+0xdc>
        tmpreg = (uint32_t)&hdac->Instance->DHR12R2;
 800412e:	68fb      	ldr	r3, [r7, #12]
 8004130:	681b      	ldr	r3, [r3, #0]
 8004132:	3314      	adds	r3, #20
 8004134:	613b      	str	r3, [r7, #16]
        break;
 8004136:	e009      	b.n	800414c <HAL_DAC_Start_DMA+0xdc>
        tmpreg = (uint32_t)&hdac->Instance->DHR12L2;
 8004138:	68fb      	ldr	r3, [r7, #12]
 800413a:	681b      	ldr	r3, [r3, #0]
 800413c:	3318      	adds	r3, #24
 800413e:	613b      	str	r3, [r7, #16]
        break;
 8004140:	e004      	b.n	800414c <HAL_DAC_Start_DMA+0xdc>
        tmpreg = (uint32_t)&hdac->Instance->DHR8R2;
 8004142:	68fb      	ldr	r3, [r7, #12]
 8004144:	681b      	ldr	r3, [r3, #0]
 8004146:	331c      	adds	r3, #28
 8004148:	613b      	str	r3, [r7, #16]
        break;
 800414a:	bf00      	nop
    }
  }

  /* Enable the DMA channel */
  if (Channel == DAC_CHANNEL_1)
 800414c:	68bb      	ldr	r3, [r7, #8]
 800414e:	2b00      	cmp	r3, #0
 8004150:	d111      	bne.n	8004176 <HAL_DAC_Start_DMA+0x106>
  {
    /* Enable the DAC DMA underrun interrupt */
    __HAL_DAC_ENABLE_IT(hdac, DAC_IT_DMAUDR1);
 8004152:	68fb      	ldr	r3, [r7, #12]
 8004154:	681b      	ldr	r3, [r3, #0]
 8004156:	681a      	ldr	r2, [r3, #0]
 8004158:	68fb      	ldr	r3, [r7, #12]
 800415a:	681b      	ldr	r3, [r3, #0]
 800415c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8004160:	601a      	str	r2, [r3, #0]

    /* Enable the DMA channel */
    status = HAL_DMA_Start_IT(hdac->DMA_Handle1, (uint32_t)pData, tmpreg, Length);
 8004162:	68fb      	ldr	r3, [r7, #12]
 8004164:	6898      	ldr	r0, [r3, #8]
 8004166:	6879      	ldr	r1, [r7, #4]
 8004168:	683b      	ldr	r3, [r7, #0]
 800416a:	693a      	ldr	r2, [r7, #16]
 800416c:	f000 fbb2 	bl	80048d4 <HAL_DMA_Start_IT>
 8004170:	4603      	mov	r3, r0
 8004172:	75fb      	strb	r3, [r7, #23]
 8004174:	e010      	b.n	8004198 <HAL_DAC_Start_DMA+0x128>
  }
  else
  {
    /* Enable the DAC DMA underrun interrupt */
    __HAL_DAC_ENABLE_IT(hdac, DAC_IT_DMAUDR2);
 8004176:	68fb      	ldr	r3, [r7, #12]
 8004178:	681b      	ldr	r3, [r3, #0]
 800417a:	681a      	ldr	r2, [r3, #0]
 800417c:	68fb      	ldr	r3, [r7, #12]
 800417e:	681b      	ldr	r3, [r3, #0]
 8004180:	f042 5200 	orr.w	r2, r2, #536870912	; 0x20000000
 8004184:	601a      	str	r2, [r3, #0]

    /* Enable the DMA channel */
    status = HAL_DMA_Start_IT(hdac->DMA_Handle2, (uint32_t)pData, tmpreg, Length);
 8004186:	68fb      	ldr	r3, [r7, #12]
 8004188:	68d8      	ldr	r0, [r3, #12]
 800418a:	6879      	ldr	r1, [r7, #4]
 800418c:	683b      	ldr	r3, [r7, #0]
 800418e:	693a      	ldr	r2, [r7, #16]
 8004190:	f000 fba0 	bl	80048d4 <HAL_DMA_Start_IT>
 8004194:	4603      	mov	r3, r0
 8004196:	75fb      	strb	r3, [r7, #23]
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hdac);
 8004198:	68fb      	ldr	r3, [r7, #12]
 800419a:	2200      	movs	r2, #0
 800419c:	715a      	strb	r2, [r3, #5]

  if (status == HAL_OK)
 800419e:	7dfb      	ldrb	r3, [r7, #23]
 80041a0:	2b00      	cmp	r3, #0
 80041a2:	d10f      	bne.n	80041c4 <HAL_DAC_Start_DMA+0x154>
  {
    /* Enable the Peripheral */
    __HAL_DAC_ENABLE(hdac, Channel);
 80041a4:	68fb      	ldr	r3, [r7, #12]
 80041a6:	681b      	ldr	r3, [r3, #0]
 80041a8:	6819      	ldr	r1, [r3, #0]
 80041aa:	68bb      	ldr	r3, [r7, #8]
 80041ac:	f003 0310 	and.w	r3, r3, #16
 80041b0:	2201      	movs	r2, #1
 80041b2:	409a      	lsls	r2, r3
 80041b4:	68fb      	ldr	r3, [r7, #12]
 80041b6:	681b      	ldr	r3, [r3, #0]
 80041b8:	430a      	orrs	r2, r1
 80041ba:	601a      	str	r2, [r3, #0]
    /* Ensure minimum wait before using peripheral after enabling it */
    HAL_Delay(1);
 80041bc:	2001      	movs	r0, #1
 80041be:	f7fe fa71 	bl	80026a4 <HAL_Delay>
 80041c2:	e005      	b.n	80041d0 <HAL_DAC_Start_DMA+0x160>
  }
  else
  {
    hdac->ErrorCode |= HAL_DAC_ERROR_DMA;
 80041c4:	68fb      	ldr	r3, [r7, #12]
 80041c6:	691b      	ldr	r3, [r3, #16]
 80041c8:	f043 0204 	orr.w	r2, r3, #4
 80041cc:	68fb      	ldr	r3, [r7, #12]
 80041ce:	611a      	str	r2, [r3, #16]
  }

  /* Return function status */
  return status;
 80041d0:	7dfb      	ldrb	r3, [r7, #23]
}
 80041d2:	4618      	mov	r0, r3
 80041d4:	3718      	adds	r7, #24
 80041d6:	46bd      	mov	sp, r7
 80041d8:	bd80      	pop	{r7, pc}
 80041da:	bf00      	nop
 80041dc:	08004671 	.word	0x08004671
 80041e0:	08004693 	.word	0x08004693
 80041e4:	080046af 	.word	0x080046af
 80041e8:	08004719 	.word	0x08004719
 80041ec:	0800473b 	.word	0x0800473b
 80041f0:	08004757 	.word	0x08004757

080041f4 <HAL_DAC_Stop_DMA>:
  *         (1) On this STM32 serie, parameter not available on all instances.
  *             Refer to device datasheet for channels availability.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Stop_DMA(DAC_HandleTypeDef *hdac, uint32_t Channel)
{
 80041f4:	b580      	push	{r7, lr}
 80041f6:	b084      	sub	sp, #16
 80041f8:	af00      	add	r7, sp, #0
 80041fa:	6078      	str	r0, [r7, #4]
 80041fc:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(hdac->Instance, Channel));

  /* Disable the selected DAC channel DMA request */
  hdac->Instance->CR &= ~(DAC_CR_DMAEN1 << (Channel & 0x10UL));
 80041fe:	687b      	ldr	r3, [r7, #4]
 8004200:	681b      	ldr	r3, [r3, #0]
 8004202:	6819      	ldr	r1, [r3, #0]
 8004204:	683b      	ldr	r3, [r7, #0]
 8004206:	f003 0310 	and.w	r3, r3, #16
 800420a:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800420e:	fa02 f303 	lsl.w	r3, r2, r3
 8004212:	43da      	mvns	r2, r3
 8004214:	687b      	ldr	r3, [r7, #4]
 8004216:	681b      	ldr	r3, [r3, #0]
 8004218:	400a      	ands	r2, r1
 800421a:	601a      	str	r2, [r3, #0]

  /* Disable the Peripheral */
  __HAL_DAC_DISABLE(hdac, Channel);
 800421c:	687b      	ldr	r3, [r7, #4]
 800421e:	681b      	ldr	r3, [r3, #0]
 8004220:	6819      	ldr	r1, [r3, #0]
 8004222:	683b      	ldr	r3, [r7, #0]
 8004224:	f003 0310 	and.w	r3, r3, #16
 8004228:	2201      	movs	r2, #1
 800422a:	fa02 f303 	lsl.w	r3, r2, r3
 800422e:	43da      	mvns	r2, r3
 8004230:	687b      	ldr	r3, [r7, #4]
 8004232:	681b      	ldr	r3, [r3, #0]
 8004234:	400a      	ands	r2, r1
 8004236:	601a      	str	r2, [r3, #0]
  /* Ensure minimum wait before enabling peripheral after disabling it */
  HAL_Delay(1);
 8004238:	2001      	movs	r0, #1
 800423a:	f7fe fa33 	bl	80026a4 <HAL_Delay>

  /* Disable the DMA channel */

  /* Channel1 is used */
  if (Channel == DAC_CHANNEL_1)
 800423e:	683b      	ldr	r3, [r7, #0]
 8004240:	2b00      	cmp	r3, #0
 8004242:	d10f      	bne.n	8004264 <HAL_DAC_Stop_DMA+0x70>
  {
    /* Disable the DMA channel */
    status = HAL_DMA_Abort(hdac->DMA_Handle1);
 8004244:	687b      	ldr	r3, [r7, #4]
 8004246:	689b      	ldr	r3, [r3, #8]
 8004248:	4618      	mov	r0, r3
 800424a:	f000 fbbe 	bl	80049ca <HAL_DMA_Abort>
 800424e:	4603      	mov	r3, r0
 8004250:	73fb      	strb	r3, [r7, #15]

    /* Disable the DAC DMA underrun interrupt */
    __HAL_DAC_DISABLE_IT(hdac, DAC_IT_DMAUDR1);
 8004252:	687b      	ldr	r3, [r7, #4]
 8004254:	681b      	ldr	r3, [r3, #0]
 8004256:	681a      	ldr	r2, [r3, #0]
 8004258:	687b      	ldr	r3, [r7, #4]
 800425a:	681b      	ldr	r3, [r3, #0]
 800425c:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8004260:	601a      	str	r2, [r3, #0]
 8004262:	e00e      	b.n	8004282 <HAL_DAC_Stop_DMA+0x8e>
  }
  else /* Channel2 is used for */
  {
    /* Disable the DMA channel */
    status = HAL_DMA_Abort(hdac->DMA_Handle2);
 8004264:	687b      	ldr	r3, [r7, #4]
 8004266:	68db      	ldr	r3, [r3, #12]
 8004268:	4618      	mov	r0, r3
 800426a:	f000 fbae 	bl	80049ca <HAL_DMA_Abort>
 800426e:	4603      	mov	r3, r0
 8004270:	73fb      	strb	r3, [r7, #15]

    /* Disable the DAC DMA underrun interrupt */
    __HAL_DAC_DISABLE_IT(hdac, DAC_IT_DMAUDR2);
 8004272:	687b      	ldr	r3, [r7, #4]
 8004274:	681b      	ldr	r3, [r3, #0]
 8004276:	681a      	ldr	r2, [r3, #0]
 8004278:	687b      	ldr	r3, [r7, #4]
 800427a:	681b      	ldr	r3, [r3, #0]
 800427c:	f022 5200 	bic.w	r2, r2, #536870912	; 0x20000000
 8004280:	601a      	str	r2, [r3, #0]
  }

  /* Check if DMA Channel effectively disabled */
  if (status != HAL_OK)
 8004282:	7bfb      	ldrb	r3, [r7, #15]
 8004284:	2b00      	cmp	r3, #0
 8004286:	d003      	beq.n	8004290 <HAL_DAC_Stop_DMA+0x9c>
  {
    /* Update DAC state machine to error */
    hdac->State = HAL_DAC_STATE_ERROR;
 8004288:	687b      	ldr	r3, [r7, #4]
 800428a:	2204      	movs	r2, #4
 800428c:	711a      	strb	r2, [r3, #4]
 800428e:	e002      	b.n	8004296 <HAL_DAC_Stop_DMA+0xa2>
  }
  else
  {
    /* Change DAC state */
    hdac->State = HAL_DAC_STATE_READY;
 8004290:	687b      	ldr	r3, [r7, #4]
 8004292:	2201      	movs	r2, #1
 8004294:	711a      	strb	r2, [r3, #4]
  }

  /* Return function status */
  return status;
 8004296:	7bfb      	ldrb	r3, [r7, #15]
}
 8004298:	4618      	mov	r0, r3
 800429a:	3710      	adds	r7, #16
 800429c:	46bd      	mov	sp, r7
 800429e:	bd80      	pop	{r7, pc}

080042a0 <HAL_DAC_SetValue>:
  *            @arg DAC_ALIGN_12B_R: 12bit right data alignment selected
  * @param  Data Data to be loaded in the selected data holding register.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_SetValue(DAC_HandleTypeDef *hdac, uint32_t Channel, uint32_t Alignment, uint32_t Data)
{
 80042a0:	b480      	push	{r7}
 80042a2:	b087      	sub	sp, #28
 80042a4:	af00      	add	r7, sp, #0
 80042a6:	60f8      	str	r0, [r7, #12]
 80042a8:	60b9      	str	r1, [r7, #8]
 80042aa:	607a      	str	r2, [r7, #4]
 80042ac:	603b      	str	r3, [r7, #0]
  __IO uint32_t tmp = 0;
 80042ae:	2300      	movs	r3, #0
 80042b0:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(hdac->Instance, Channel));
  assert_param(IS_DAC_ALIGN(Alignment));
  /* In case DMA Double data mode is activated, DATA range is almost full uin32_t one: no check */
  if ((hdac->Instance->MCR & (DAC_MCR_DMADOUBLE1 << (Channel & 0x10UL))) == 0UL)
 80042b2:	68fb      	ldr	r3, [r7, #12]
 80042b4:	681b      	ldr	r3, [r3, #0]
 80042b6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
  {
    assert_param(IS_DAC_DATA(Data));
  }

  tmp = (uint32_t)hdac->Instance;
 80042b8:	68fb      	ldr	r3, [r7, #12]
 80042ba:	681b      	ldr	r3, [r3, #0]
 80042bc:	617b      	str	r3, [r7, #20]
  if (Channel == DAC_CHANNEL_1)
 80042be:	68bb      	ldr	r3, [r7, #8]
 80042c0:	2b00      	cmp	r3, #0
 80042c2:	d105      	bne.n	80042d0 <HAL_DAC_SetValue+0x30>
  {
    tmp += DAC_DHR12R1_ALIGNMENT(Alignment);
 80042c4:	697a      	ldr	r2, [r7, #20]
 80042c6:	687b      	ldr	r3, [r7, #4]
 80042c8:	4413      	add	r3, r2
 80042ca:	3308      	adds	r3, #8
 80042cc:	617b      	str	r3, [r7, #20]
 80042ce:	e004      	b.n	80042da <HAL_DAC_SetValue+0x3a>
  }
  else
  {
    tmp += DAC_DHR12R2_ALIGNMENT(Alignment);
 80042d0:	697a      	ldr	r2, [r7, #20]
 80042d2:	687b      	ldr	r3, [r7, #4]
 80042d4:	4413      	add	r3, r2
 80042d6:	3314      	adds	r3, #20
 80042d8:	617b      	str	r3, [r7, #20]
  }

  /* Set the DAC channel selected data holding register */
  *(__IO uint32_t *) tmp = Data;
 80042da:	697b      	ldr	r3, [r7, #20]
 80042dc:	461a      	mov	r2, r3
 80042de:	683b      	ldr	r3, [r7, #0]
 80042e0:	6013      	str	r3, [r2, #0]

  /* Return function status */
  return HAL_OK;
 80042e2:	2300      	movs	r3, #0
}
 80042e4:	4618      	mov	r0, r3
 80042e6:	371c      	adds	r7, #28
 80042e8:	46bd      	mov	sp, r7
 80042ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042ee:	4770      	bx	lr

080042f0 <HAL_DAC_ConvCpltCallbackCh1>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DAC_ConvCpltCallbackCh1(DAC_HandleTypeDef *hdac)
{
 80042f0:	b480      	push	{r7}
 80042f2:	b083      	sub	sp, #12
 80042f4:	af00      	add	r7, sp, #0
 80042f6:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DAC_ConvCpltCallbackCh1 could be implemented in the user file
   */
}
 80042f8:	bf00      	nop
 80042fa:	370c      	adds	r7, #12
 80042fc:	46bd      	mov	sp, r7
 80042fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004302:	4770      	bx	lr

08004304 <HAL_DAC_ConvHalfCpltCallbackCh1>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DAC_ConvHalfCpltCallbackCh1(DAC_HandleTypeDef *hdac)
{
 8004304:	b480      	push	{r7}
 8004306:	b083      	sub	sp, #12
 8004308:	af00      	add	r7, sp, #0
 800430a:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DAC_ConvHalfCpltCallbackCh1 could be implemented in the user file
   */
}
 800430c:	bf00      	nop
 800430e:	370c      	adds	r7, #12
 8004310:	46bd      	mov	sp, r7
 8004312:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004316:	4770      	bx	lr

08004318 <HAL_DAC_ConfigChannel>:
  *         (1) On this STM32 serie, parameter not available on all instances.
  *             Refer to device datasheet for channels availability.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_ConfigChannel(DAC_HandleTypeDef *hdac, DAC_ChannelConfTypeDef *sConfig, uint32_t Channel)
{
 8004318:	b580      	push	{r7, lr}
 800431a:	b08a      	sub	sp, #40	; 0x28
 800431c:	af00      	add	r7, sp, #0
 800431e:	60f8      	str	r0, [r7, #12]
 8004320:	60b9      	str	r1, [r7, #8]
 8004322:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg1;
  uint32_t tmpreg2;
  uint32_t tickstart = 0U;
 8004324:	2300      	movs	r3, #0
 8004326:	61fb      	str	r3, [r7, #28]
  assert_param(IS_DAC_CHANNEL(hdac->Instance, Channel));
  assert_param(IS_FUNCTIONAL_STATE(sConfig->DAC_DMADoubleDataMode));
  assert_param(IS_FUNCTIONAL_STATE(sConfig->DAC_SignedFormat));

  /* Process locked */
  __HAL_LOCK(hdac);
 8004328:	68fb      	ldr	r3, [r7, #12]
 800432a:	795b      	ldrb	r3, [r3, #5]
 800432c:	2b01      	cmp	r3, #1
 800432e:	d101      	bne.n	8004334 <HAL_DAC_ConfigChannel+0x1c>
 8004330:	2302      	movs	r3, #2
 8004332:	e194      	b.n	800465e <HAL_DAC_ConfigChannel+0x346>
 8004334:	68fb      	ldr	r3, [r7, #12]
 8004336:	2201      	movs	r2, #1
 8004338:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 800433a:	68fb      	ldr	r3, [r7, #12]
 800433c:	2202      	movs	r2, #2
 800433e:	711a      	strb	r2, [r3, #4]

  if (sConfig->DAC_SampleAndHold == DAC_SAMPLEANDHOLD_ENABLE)
 8004340:	68bb      	ldr	r3, [r7, #8]
 8004342:	689b      	ldr	r3, [r3, #8]
 8004344:	2b04      	cmp	r3, #4
 8004346:	d174      	bne.n	8004432 <HAL_DAC_ConfigChannel+0x11a>
    /* Sample on old configuration */
  {
    /* SampleTime */
    if (Channel == DAC_CHANNEL_1)
 8004348:	687b      	ldr	r3, [r7, #4]
 800434a:	2b00      	cmp	r3, #0
 800434c:	d137      	bne.n	80043be <HAL_DAC_ConfigChannel+0xa6>
    {
      /* Get timeout */
      tickstart = HAL_GetTick();
 800434e:	f7fe f99d 	bl	800268c <HAL_GetTick>
 8004352:	61f8      	str	r0, [r7, #28]

      /* SHSR1 can be written when BWST1 is cleared */
      while (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 8004354:	e011      	b.n	800437a <HAL_DAC_ConfigChannel+0x62>
      {
        /* Check for the Timeout */
        if ((HAL_GetTick() - tickstart) > TIMEOUT_DAC_CALIBCONFIG)
 8004356:	f7fe f999 	bl	800268c <HAL_GetTick>
 800435a:	4602      	mov	r2, r0
 800435c:	69fb      	ldr	r3, [r7, #28]
 800435e:	1ad3      	subs	r3, r2, r3
 8004360:	2b01      	cmp	r3, #1
 8004362:	d90a      	bls.n	800437a <HAL_DAC_ConfigChannel+0x62>
        {
          /* Update error code */
          SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_TIMEOUT);
 8004364:	68fb      	ldr	r3, [r7, #12]
 8004366:	691b      	ldr	r3, [r3, #16]
 8004368:	f043 0208 	orr.w	r2, r3, #8
 800436c:	68fb      	ldr	r3, [r7, #12]
 800436e:	611a      	str	r2, [r3, #16]

          /* Change the DMA state */
          hdac->State = HAL_DAC_STATE_TIMEOUT;
 8004370:	68fb      	ldr	r3, [r7, #12]
 8004372:	2203      	movs	r2, #3
 8004374:	711a      	strb	r2, [r3, #4]

          return HAL_TIMEOUT;
 8004376:	2303      	movs	r3, #3
 8004378:	e171      	b.n	800465e <HAL_DAC_ConfigChannel+0x346>
      while (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 800437a:	68fb      	ldr	r3, [r7, #12]
 800437c:	681b      	ldr	r3, [r3, #0]
 800437e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004380:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8004384:	2b00      	cmp	r3, #0
 8004386:	d1e6      	bne.n	8004356 <HAL_DAC_ConfigChannel+0x3e>
        }
      }
      HAL_Delay(1);
 8004388:	2001      	movs	r0, #1
 800438a:	f7fe f98b 	bl	80026a4 <HAL_Delay>
      hdac->Instance->SHSR1 = sConfig->DAC_SampleAndHoldConfig.DAC_SampleTime;
 800438e:	68fb      	ldr	r3, [r7, #12]
 8004390:	681b      	ldr	r3, [r3, #0]
 8004392:	68ba      	ldr	r2, [r7, #8]
 8004394:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8004396:	641a      	str	r2, [r3, #64]	; 0x40
 8004398:	e01e      	b.n	80043d8 <HAL_DAC_ConfigChannel+0xc0>
      /* SHSR2 can be written when BWST2 is cleared */

      while (((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
      {
        /* Check for the Timeout */
        if ((HAL_GetTick() - tickstart) > TIMEOUT_DAC_CALIBCONFIG)
 800439a:	f7fe f977 	bl	800268c <HAL_GetTick>
 800439e:	4602      	mov	r2, r0
 80043a0:	69fb      	ldr	r3, [r7, #28]
 80043a2:	1ad3      	subs	r3, r2, r3
 80043a4:	2b01      	cmp	r3, #1
 80043a6:	d90a      	bls.n	80043be <HAL_DAC_ConfigChannel+0xa6>
        {
          /* Update error code */
          SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_TIMEOUT);
 80043a8:	68fb      	ldr	r3, [r7, #12]
 80043aa:	691b      	ldr	r3, [r3, #16]
 80043ac:	f043 0208 	orr.w	r2, r3, #8
 80043b0:	68fb      	ldr	r3, [r7, #12]
 80043b2:	611a      	str	r2, [r3, #16]

          /* Change the DMA state */
          hdac->State = HAL_DAC_STATE_TIMEOUT;
 80043b4:	68fb      	ldr	r3, [r7, #12]
 80043b6:	2203      	movs	r2, #3
 80043b8:	711a      	strb	r2, [r3, #4]

          return HAL_TIMEOUT;
 80043ba:	2303      	movs	r3, #3
 80043bc:	e14f      	b.n	800465e <HAL_DAC_ConfigChannel+0x346>
      while (((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
 80043be:	68fb      	ldr	r3, [r7, #12]
 80043c0:	681b      	ldr	r3, [r3, #0]
 80043c2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80043c4:	2b00      	cmp	r3, #0
 80043c6:	dbe8      	blt.n	800439a <HAL_DAC_ConfigChannel+0x82>
        }
      }
      HAL_Delay(1U);
 80043c8:	2001      	movs	r0, #1
 80043ca:	f7fe f96b 	bl	80026a4 <HAL_Delay>
      hdac->Instance->SHSR2 = sConfig->DAC_SampleAndHoldConfig.DAC_SampleTime;
 80043ce:	68fb      	ldr	r3, [r7, #12]
 80043d0:	681b      	ldr	r3, [r3, #0]
 80043d2:	68ba      	ldr	r2, [r7, #8]
 80043d4:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80043d6:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* HoldTime */
    MODIFY_REG(hdac->Instance->SHHR, DAC_SHHR_THOLD1 << (Channel & 0x10UL), (sConfig->DAC_SampleAndHoldConfig.DAC_HoldTime) << (Channel & 0x10UL));
 80043d8:	68fb      	ldr	r3, [r7, #12]
 80043da:	681b      	ldr	r3, [r3, #0]
 80043dc:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80043de:	687b      	ldr	r3, [r7, #4]
 80043e0:	f003 0310 	and.w	r3, r3, #16
 80043e4:	f240 31ff 	movw	r1, #1023	; 0x3ff
 80043e8:	fa01 f303 	lsl.w	r3, r1, r3
 80043ec:	43db      	mvns	r3, r3
 80043ee:	ea02 0103 	and.w	r1, r2, r3
 80043f2:	68bb      	ldr	r3, [r7, #8]
 80043f4:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80043f6:	687b      	ldr	r3, [r7, #4]
 80043f8:	f003 0310 	and.w	r3, r3, #16
 80043fc:	409a      	lsls	r2, r3
 80043fe:	68fb      	ldr	r3, [r7, #12]
 8004400:	681b      	ldr	r3, [r3, #0]
 8004402:	430a      	orrs	r2, r1
 8004404:	649a      	str	r2, [r3, #72]	; 0x48
    /* RefreshTime */
    MODIFY_REG(hdac->Instance->SHRR, DAC_SHRR_TREFRESH1 << (Channel & 0x10UL), (sConfig->DAC_SampleAndHoldConfig.DAC_RefreshTime) << (Channel & 0x10UL));
 8004406:	68fb      	ldr	r3, [r7, #12]
 8004408:	681b      	ldr	r3, [r3, #0]
 800440a:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800440c:	687b      	ldr	r3, [r7, #4]
 800440e:	f003 0310 	and.w	r3, r3, #16
 8004412:	21ff      	movs	r1, #255	; 0xff
 8004414:	fa01 f303 	lsl.w	r3, r1, r3
 8004418:	43db      	mvns	r3, r3
 800441a:	ea02 0103 	and.w	r1, r2, r3
 800441e:	68bb      	ldr	r3, [r7, #8]
 8004420:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004422:	687b      	ldr	r3, [r7, #4]
 8004424:	f003 0310 	and.w	r3, r3, #16
 8004428:	409a      	lsls	r2, r3
 800442a:	68fb      	ldr	r3, [r7, #12]
 800442c:	681b      	ldr	r3, [r3, #0]
 800442e:	430a      	orrs	r2, r1
 8004430:	64da      	str	r2, [r3, #76]	; 0x4c
  }

  if (sConfig->DAC_UserTrimming == DAC_TRIMMING_USER)
 8004432:	68bb      	ldr	r3, [r7, #8]
 8004434:	69db      	ldr	r3, [r3, #28]
 8004436:	2b01      	cmp	r3, #1
 8004438:	d11d      	bne.n	8004476 <HAL_DAC_ConfigChannel+0x15e>
    /* USER TRIMMING */
  {
    /* Get the DAC CCR value */
    tmpreg1 = hdac->Instance->CCR;
 800443a:	68fb      	ldr	r3, [r7, #12]
 800443c:	681b      	ldr	r3, [r3, #0]
 800443e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004440:	627b      	str	r3, [r7, #36]	; 0x24
    /* Clear trimming value */
    tmpreg1 &= ~(((uint32_t)(DAC_CCR_OTRIM1)) << (Channel & 0x10UL));
 8004442:	687b      	ldr	r3, [r7, #4]
 8004444:	f003 0310 	and.w	r3, r3, #16
 8004448:	221f      	movs	r2, #31
 800444a:	fa02 f303 	lsl.w	r3, r2, r3
 800444e:	43db      	mvns	r3, r3
 8004450:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004452:	4013      	ands	r3, r2
 8004454:	627b      	str	r3, [r7, #36]	; 0x24
    /* Configure for the selected trimming offset */
    tmpreg2 = sConfig->DAC_TrimmingValue;
 8004456:	68bb      	ldr	r3, [r7, #8]
 8004458:	6a1b      	ldr	r3, [r3, #32]
 800445a:	61bb      	str	r3, [r7, #24]
    /* Calculate CCR register value depending on DAC_Channel */
    tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 800445c:	687b      	ldr	r3, [r7, #4]
 800445e:	f003 0310 	and.w	r3, r3, #16
 8004462:	69ba      	ldr	r2, [r7, #24]
 8004464:	fa02 f303 	lsl.w	r3, r2, r3
 8004468:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800446a:	4313      	orrs	r3, r2
 800446c:	627b      	str	r3, [r7, #36]	; 0x24
    /* Write to DAC CCR */
    hdac->Instance->CCR = tmpreg1;
 800446e:	68fb      	ldr	r3, [r7, #12]
 8004470:	681b      	ldr	r3, [r3, #0]
 8004472:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004474:	639a      	str	r2, [r3, #56]	; 0x38
  }
  /* else factory trimming is used (factory setting are available at reset)*/
  /* SW Nothing has nothing to do */

  /* Get the DAC MCR value */
  tmpreg1 = hdac->Instance->MCR;
 8004476:	68fb      	ldr	r3, [r7, #12]
 8004478:	681b      	ldr	r3, [r3, #0]
 800447a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800447c:	627b      	str	r3, [r7, #36]	; 0x24
  /* Clear DAC_MCR_MODEx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_MCR_MODE1)) << (Channel & 0x10UL));
 800447e:	687b      	ldr	r3, [r7, #4]
 8004480:	f003 0310 	and.w	r3, r3, #16
 8004484:	2207      	movs	r2, #7
 8004486:	fa02 f303 	lsl.w	r3, r2, r3
 800448a:	43db      	mvns	r3, r3
 800448c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800448e:	4013      	ands	r3, r2
 8004490:	627b      	str	r3, [r7, #36]	; 0x24
  /* Configure for the selected DAC channel: mode, buffer output & on chip peripheral connect */
  if ((sConfig->DAC_ConnectOnChipPeripheral & DAC_CHIPCONNECT_EXTERNAL) == DAC_CHIPCONNECT_EXTERNAL)
 8004492:	68bb      	ldr	r3, [r7, #8]
 8004494:	699b      	ldr	r3, [r3, #24]
 8004496:	f003 0301 	and.w	r3, r3, #1
 800449a:	2b00      	cmp	r3, #0
 800449c:	d002      	beq.n	80044a4 <HAL_DAC_ConfigChannel+0x18c>
  {
    connectOnChip = 0x00000000UL;
 800449e:	2300      	movs	r3, #0
 80044a0:	623b      	str	r3, [r7, #32]
 80044a2:	e011      	b.n	80044c8 <HAL_DAC_ConfigChannel+0x1b0>
  }
  else if ((sConfig->DAC_ConnectOnChipPeripheral & DAC_CHIPCONNECT_INTERNAL) == DAC_CHIPCONNECT_INTERNAL)
 80044a4:	68bb      	ldr	r3, [r7, #8]
 80044a6:	699b      	ldr	r3, [r3, #24]
 80044a8:	f003 0302 	and.w	r3, r3, #2
 80044ac:	2b00      	cmp	r3, #0
 80044ae:	d002      	beq.n	80044b6 <HAL_DAC_ConfigChannel+0x19e>
  {
    connectOnChip = DAC_MCR_MODE1_0;
 80044b0:	2301      	movs	r3, #1
 80044b2:	623b      	str	r3, [r7, #32]
 80044b4:	e008      	b.n	80044c8 <HAL_DAC_ConfigChannel+0x1b0>
  }
  else /* (sConfig->DAC_ConnectOnChipPeripheral & DAC_CHIPCONNECT_BOTH) == DAC_CHIPCONNECT_BOTH */
  {
    if (sConfig->DAC_OutputBuffer == DAC_OUTPUTBUFFER_ENABLE)
 80044b6:	68bb      	ldr	r3, [r7, #8]
 80044b8:	695b      	ldr	r3, [r3, #20]
 80044ba:	2b00      	cmp	r3, #0
 80044bc:	d102      	bne.n	80044c4 <HAL_DAC_ConfigChannel+0x1ac>
    {
      connectOnChip = DAC_MCR_MODE1_0;
 80044be:	2301      	movs	r3, #1
 80044c0:	623b      	str	r3, [r7, #32]
 80044c2:	e001      	b.n	80044c8 <HAL_DAC_ConfigChannel+0x1b0>
    }
    else
    {
      connectOnChip = 0x00000000UL;
 80044c4:	2300      	movs	r3, #0
 80044c6:	623b      	str	r3, [r7, #32]
    }
  }
  tmpreg2 = (sConfig->DAC_SampleAndHold | sConfig->DAC_OutputBuffer | connectOnChip);
 80044c8:	68bb      	ldr	r3, [r7, #8]
 80044ca:	689a      	ldr	r2, [r3, #8]
 80044cc:	68bb      	ldr	r3, [r7, #8]
 80044ce:	695b      	ldr	r3, [r3, #20]
 80044d0:	4313      	orrs	r3, r2
 80044d2:	6a3a      	ldr	r2, [r7, #32]
 80044d4:	4313      	orrs	r3, r2
 80044d6:	61bb      	str	r3, [r7, #24]
  /* Clear DAC_MCR_DMADOUBLEx */
  tmpreg1 &= ~(((uint32_t)(DAC_MCR_DMADOUBLE1)) << (Channel & 0x10UL));
 80044d8:	687b      	ldr	r3, [r7, #4]
 80044da:	f003 0310 	and.w	r3, r3, #16
 80044de:	f44f 7280 	mov.w	r2, #256	; 0x100
 80044e2:	fa02 f303 	lsl.w	r3, r2, r3
 80044e6:	43db      	mvns	r3, r3
 80044e8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80044ea:	4013      	ands	r3, r2
 80044ec:	627b      	str	r3, [r7, #36]	; 0x24
  /* Configure for the selected DAC channel: DMA double data mode */
  tmpreg2 |= (sConfig->DAC_DMADoubleDataMode == ENABLE) ? DAC_MCR_DMADOUBLE1 : 0UL;
 80044ee:	68bb      	ldr	r3, [r7, #8]
 80044f0:	791b      	ldrb	r3, [r3, #4]
 80044f2:	2b01      	cmp	r3, #1
 80044f4:	d102      	bne.n	80044fc <HAL_DAC_ConfigChannel+0x1e4>
 80044f6:	f44f 7380 	mov.w	r3, #256	; 0x100
 80044fa:	e000      	b.n	80044fe <HAL_DAC_ConfigChannel+0x1e6>
 80044fc:	2300      	movs	r3, #0
 80044fe:	69ba      	ldr	r2, [r7, #24]
 8004500:	4313      	orrs	r3, r2
 8004502:	61bb      	str	r3, [r7, #24]
  /* Clear DAC_MCR_SINFORMATx */
  tmpreg1 &= ~(((uint32_t)(DAC_MCR_SINFORMAT1)) << (Channel & 0x10UL));
 8004504:	687b      	ldr	r3, [r7, #4]
 8004506:	f003 0310 	and.w	r3, r3, #16
 800450a:	f44f 7200 	mov.w	r2, #512	; 0x200
 800450e:	fa02 f303 	lsl.w	r3, r2, r3
 8004512:	43db      	mvns	r3, r3
 8004514:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004516:	4013      	ands	r3, r2
 8004518:	627b      	str	r3, [r7, #36]	; 0x24
  /* Configure for the selected DAC channel: Signed format */
  tmpreg2 |= (sConfig->DAC_SignedFormat == ENABLE) ? DAC_MCR_SINFORMAT1 : 0UL;
 800451a:	68bb      	ldr	r3, [r7, #8]
 800451c:	795b      	ldrb	r3, [r3, #5]
 800451e:	2b01      	cmp	r3, #1
 8004520:	d102      	bne.n	8004528 <HAL_DAC_ConfigChannel+0x210>
 8004522:	f44f 7300 	mov.w	r3, #512	; 0x200
 8004526:	e000      	b.n	800452a <HAL_DAC_ConfigChannel+0x212>
 8004528:	2300      	movs	r3, #0
 800452a:	69ba      	ldr	r2, [r7, #24]
 800452c:	4313      	orrs	r3, r2
 800452e:	61bb      	str	r3, [r7, #24]
  /* Clear DAC_MCR_HFSEL bits */
  tmpreg1 &= ~(DAC_MCR_HFSEL);
 8004530:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004532:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8004536:	627b      	str	r3, [r7, #36]	; 0x24
  /* Configure for both DAC channels: high frequency mode */
  if (DAC_HIGH_FREQUENCY_INTERFACE_MODE_AUTOMATIC == sConfig->DAC_HighFrequency)
 8004538:	68bb      	ldr	r3, [r7, #8]
 800453a:	681b      	ldr	r3, [r3, #0]
 800453c:	2b02      	cmp	r3, #2
 800453e:	d114      	bne.n	800456a <HAL_DAC_ConfigChannel+0x252>
  {
    hclkfreq = HAL_RCC_GetHCLKFreq();
 8004540:	f001 faf8 	bl	8005b34 <HAL_RCC_GetHCLKFreq>
 8004544:	6178      	str	r0, [r7, #20]
    if (hclkfreq > HFSEL_ENABLE_THRESHOLD_160MHZ)
 8004546:	697b      	ldr	r3, [r7, #20]
 8004548:	4a47      	ldr	r2, [pc, #284]	; (8004668 <HAL_DAC_ConfigChannel+0x350>)
 800454a:	4293      	cmp	r3, r2
 800454c:	d904      	bls.n	8004558 <HAL_DAC_ConfigChannel+0x240>
    {
      tmpreg1 |= DAC_HIGH_FREQUENCY_INTERFACE_MODE_ABOVE_160MHZ;
 800454e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004550:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004554:	627b      	str	r3, [r7, #36]	; 0x24
 8004556:	e00d      	b.n	8004574 <HAL_DAC_ConfigChannel+0x25c>
    }
    else if (hclkfreq > HFSEL_ENABLE_THRESHOLD_80MHZ)
 8004558:	697b      	ldr	r3, [r7, #20]
 800455a:	4a44      	ldr	r2, [pc, #272]	; (800466c <HAL_DAC_ConfigChannel+0x354>)
 800455c:	4293      	cmp	r3, r2
 800455e:	d909      	bls.n	8004574 <HAL_DAC_ConfigChannel+0x25c>
    {
      tmpreg1 |= DAC_HIGH_FREQUENCY_INTERFACE_MODE_ABOVE_80MHZ;
 8004560:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004562:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8004566:	627b      	str	r3, [r7, #36]	; 0x24
 8004568:	e004      	b.n	8004574 <HAL_DAC_ConfigChannel+0x25c>
      tmpreg1 |= DAC_HIGH_FREQUENCY_INTERFACE_MODE_DISABLE;
    }
  }
  else
  {
    tmpreg1 |= sConfig->DAC_HighFrequency;
 800456a:	68bb      	ldr	r3, [r7, #8]
 800456c:	681b      	ldr	r3, [r3, #0]
 800456e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004570:	4313      	orrs	r3, r2
 8004572:	627b      	str	r3, [r7, #36]	; 0x24
  }
  /* Calculate MCR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 8004574:	687b      	ldr	r3, [r7, #4]
 8004576:	f003 0310 	and.w	r3, r3, #16
 800457a:	69ba      	ldr	r2, [r7, #24]
 800457c:	fa02 f303 	lsl.w	r3, r2, r3
 8004580:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004582:	4313      	orrs	r3, r2
 8004584:	627b      	str	r3, [r7, #36]	; 0x24
  /* Write to DAC MCR */
  hdac->Instance->MCR = tmpreg1;
 8004586:	68fb      	ldr	r3, [r7, #12]
 8004588:	681b      	ldr	r3, [r3, #0]
 800458a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800458c:	63da      	str	r2, [r3, #60]	; 0x3c

  /* DAC in normal operating mode hence clear DAC_CR_CENx bit */
  CLEAR_BIT(hdac->Instance->CR, DAC_CR_CEN1 << (Channel & 0x10UL));
 800458e:	68fb      	ldr	r3, [r7, #12]
 8004590:	681b      	ldr	r3, [r3, #0]
 8004592:	6819      	ldr	r1, [r3, #0]
 8004594:	687b      	ldr	r3, [r7, #4]
 8004596:	f003 0310 	and.w	r3, r3, #16
 800459a:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800459e:	fa02 f303 	lsl.w	r3, r2, r3
 80045a2:	43da      	mvns	r2, r3
 80045a4:	68fb      	ldr	r3, [r7, #12]
 80045a6:	681b      	ldr	r3, [r3, #0]
 80045a8:	400a      	ands	r2, r1
 80045aa:	601a      	str	r2, [r3, #0]

  /* Get the DAC CR value */
  tmpreg1 = hdac->Instance->CR;
 80045ac:	68fb      	ldr	r3, [r7, #12]
 80045ae:	681b      	ldr	r3, [r3, #0]
 80045b0:	681b      	ldr	r3, [r3, #0]
 80045b2:	627b      	str	r3, [r7, #36]	; 0x24
  /* Clear TENx, TSELx, WAVEx and MAMPx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1)) << (Channel & 0x10UL));
 80045b4:	687b      	ldr	r3, [r7, #4]
 80045b6:	f003 0310 	and.w	r3, r3, #16
 80045ba:	f640 72fe 	movw	r2, #4094	; 0xffe
 80045be:	fa02 f303 	lsl.w	r3, r2, r3
 80045c2:	43db      	mvns	r3, r3
 80045c4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80045c6:	4013      	ands	r3, r2
 80045c8:	627b      	str	r3, [r7, #36]	; 0x24
  /* Configure for the selected DAC channel: trigger */
  /* Set TSELx and TENx bits according to DAC_Trigger value */
  tmpreg2 = sConfig->DAC_Trigger;
 80045ca:	68bb      	ldr	r3, [r7, #8]
 80045cc:	68db      	ldr	r3, [r3, #12]
 80045ce:	61bb      	str	r3, [r7, #24]
  /* Calculate CR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 80045d0:	687b      	ldr	r3, [r7, #4]
 80045d2:	f003 0310 	and.w	r3, r3, #16
 80045d6:	69ba      	ldr	r2, [r7, #24]
 80045d8:	fa02 f303 	lsl.w	r3, r2, r3
 80045dc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80045de:	4313      	orrs	r3, r2
 80045e0:	627b      	str	r3, [r7, #36]	; 0x24
  /* Write to DAC CR */
  hdac->Instance->CR = tmpreg1;
 80045e2:	68fb      	ldr	r3, [r7, #12]
 80045e4:	681b      	ldr	r3, [r3, #0]
 80045e6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80045e8:	601a      	str	r2, [r3, #0]
  /* Disable wave generation */
  hdac->Instance->CR &= ~(DAC_CR_WAVE1 << (Channel & 0x10UL));
 80045ea:	68fb      	ldr	r3, [r7, #12]
 80045ec:	681b      	ldr	r3, [r3, #0]
 80045ee:	6819      	ldr	r1, [r3, #0]
 80045f0:	687b      	ldr	r3, [r7, #4]
 80045f2:	f003 0310 	and.w	r3, r3, #16
 80045f6:	22c0      	movs	r2, #192	; 0xc0
 80045f8:	fa02 f303 	lsl.w	r3, r2, r3
 80045fc:	43da      	mvns	r2, r3
 80045fe:	68fb      	ldr	r3, [r7, #12]
 8004600:	681b      	ldr	r3, [r3, #0]
 8004602:	400a      	ands	r2, r1
 8004604:	601a      	str	r2, [r3, #0]

  /* Set STRSTTRIGSELx and STINCTRIGSELx bits according to DAC_Trigger & DAC_Trigger2 values */
  tmpreg2 = ((sConfig->DAC_Trigger & DAC_CR_TSEL1) >> DAC_CR_TSEL1_Pos) << DAC_STMODR_STRSTTRIGSEL1_Pos;
 8004606:	68bb      	ldr	r3, [r7, #8]
 8004608:	68db      	ldr	r3, [r3, #12]
 800460a:	089b      	lsrs	r3, r3, #2
 800460c:	f003 030f 	and.w	r3, r3, #15
 8004610:	61bb      	str	r3, [r7, #24]
  tmpreg2 |= ((sConfig->DAC_Trigger2 & DAC_CR_TSEL1) >> DAC_CR_TSEL1_Pos) << DAC_STMODR_STINCTRIGSEL1_Pos;
 8004612:	68bb      	ldr	r3, [r7, #8]
 8004614:	691b      	ldr	r3, [r3, #16]
 8004616:	089b      	lsrs	r3, r3, #2
 8004618:	021b      	lsls	r3, r3, #8
 800461a:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 800461e:	69ba      	ldr	r2, [r7, #24]
 8004620:	4313      	orrs	r3, r2
 8004622:	61bb      	str	r3, [r7, #24]
  /* Modify STMODR register value depending on DAC_Channel */
  MODIFY_REG(hdac->Instance->STMODR, (DAC_STMODR_STINCTRIGSEL1 | DAC_STMODR_STRSTTRIGSEL1) << (Channel & 0x10UL), tmpreg2 << (Channel & 0x10UL));
 8004624:	68fb      	ldr	r3, [r7, #12]
 8004626:	681b      	ldr	r3, [r3, #0]
 8004628:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 800462a:	687b      	ldr	r3, [r7, #4]
 800462c:	f003 0310 	and.w	r3, r3, #16
 8004630:	f640 710f 	movw	r1, #3855	; 0xf0f
 8004634:	fa01 f303 	lsl.w	r3, r1, r3
 8004638:	43db      	mvns	r3, r3
 800463a:	ea02 0103 	and.w	r1, r2, r3
 800463e:	687b      	ldr	r3, [r7, #4]
 8004640:	f003 0310 	and.w	r3, r3, #16
 8004644:	69ba      	ldr	r2, [r7, #24]
 8004646:	409a      	lsls	r2, r3
 8004648:	68fb      	ldr	r3, [r7, #12]
 800464a:	681b      	ldr	r3, [r3, #0]
 800464c:	430a      	orrs	r2, r1
 800464e:	661a      	str	r2, [r3, #96]	; 0x60
  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 8004650:	68fb      	ldr	r3, [r7, #12]
 8004652:	2201      	movs	r2, #1
 8004654:	711a      	strb	r2, [r3, #4]

  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 8004656:	68fb      	ldr	r3, [r7, #12]
 8004658:	2200      	movs	r2, #0
 800465a:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 800465c:	2300      	movs	r3, #0
}
 800465e:	4618      	mov	r0, r3
 8004660:	3728      	adds	r7, #40	; 0x28
 8004662:	46bd      	mov	sp, r7
 8004664:	bd80      	pop	{r7, pc}
 8004666:	bf00      	nop
 8004668:	09896800 	.word	0x09896800
 800466c:	04c4b400 	.word	0x04c4b400

08004670 <DAC_DMAConvCpltCh1>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAConvCpltCh1(DMA_HandleTypeDef *hdma)
{
 8004670:	b580      	push	{r7, lr}
 8004672:	b084      	sub	sp, #16
 8004674:	af00      	add	r7, sp, #0
 8004676:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004678:	687b      	ldr	r3, [r7, #4]
 800467a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800467c:	60fb      	str	r3, [r7, #12]

#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvCpltCallbackCh1(hdac);
#else
  HAL_DAC_ConvCpltCallbackCh1(hdac);
 800467e:	68f8      	ldr	r0, [r7, #12]
 8004680:	f7ff fe36 	bl	80042f0 <HAL_DAC_ConvCpltCallbackCh1>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

  hdac->State = HAL_DAC_STATE_READY;
 8004684:	68fb      	ldr	r3, [r7, #12]
 8004686:	2201      	movs	r2, #1
 8004688:	711a      	strb	r2, [r3, #4]
}
 800468a:	bf00      	nop
 800468c:	3710      	adds	r7, #16
 800468e:	46bd      	mov	sp, r7
 8004690:	bd80      	pop	{r7, pc}

08004692 <DAC_DMAHalfConvCpltCh1>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAHalfConvCpltCh1(DMA_HandleTypeDef *hdma)
{
 8004692:	b580      	push	{r7, lr}
 8004694:	b084      	sub	sp, #16
 8004696:	af00      	add	r7, sp, #0
 8004698:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800469a:	687b      	ldr	r3, [r7, #4]
 800469c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800469e:	60fb      	str	r3, [r7, #12]
  /* Conversion complete callback */
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvHalfCpltCallbackCh1(hdac);
#else
  HAL_DAC_ConvHalfCpltCallbackCh1(hdac);
 80046a0:	68f8      	ldr	r0, [r7, #12]
 80046a2:	f7ff fe2f 	bl	8004304 <HAL_DAC_ConvHalfCpltCallbackCh1>
#endif  /* USE_HAL_DAC_REGISTER_CALLBACKS */
}
 80046a6:	bf00      	nop
 80046a8:	3710      	adds	r7, #16
 80046aa:	46bd      	mov	sp, r7
 80046ac:	bd80      	pop	{r7, pc}

080046ae <DAC_DMAErrorCh1>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAErrorCh1(DMA_HandleTypeDef *hdma)
{
 80046ae:	b580      	push	{r7, lr}
 80046b0:	b084      	sub	sp, #16
 80046b2:	af00      	add	r7, sp, #0
 80046b4:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80046b6:	687b      	ldr	r3, [r7, #4]
 80046b8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80046ba:	60fb      	str	r3, [r7, #12]

  /* Set DAC error code to DMA error */
  hdac->ErrorCode |= HAL_DAC_ERROR_DMA;
 80046bc:	68fb      	ldr	r3, [r7, #12]
 80046be:	691b      	ldr	r3, [r3, #16]
 80046c0:	f043 0204 	orr.w	r2, r3, #4
 80046c4:	68fb      	ldr	r3, [r7, #12]
 80046c6:	611a      	str	r2, [r3, #16]

#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ErrorCallbackCh1(hdac);
#else
  HAL_DAC_ErrorCallbackCh1(hdac);
 80046c8:	68f8      	ldr	r0, [r7, #12]
 80046ca:	f7fd f828 	bl	800171e <HAL_DAC_ErrorCallbackCh1>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

  hdac->State = HAL_DAC_STATE_READY;
 80046ce:	68fb      	ldr	r3, [r7, #12]
 80046d0:	2201      	movs	r2, #1
 80046d2:	711a      	strb	r2, [r3, #4]
}
 80046d4:	bf00      	nop
 80046d6:	3710      	adds	r7, #16
 80046d8:	46bd      	mov	sp, r7
 80046da:	bd80      	pop	{r7, pc}

080046dc <HAL_DACEx_ConvCpltCallbackCh2>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DACEx_ConvCpltCallbackCh2(DAC_HandleTypeDef *hdac)
{
 80046dc:	b480      	push	{r7}
 80046de:	b083      	sub	sp, #12
 80046e0:	af00      	add	r7, sp, #0
 80046e2:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DACEx_ConvCpltCallbackCh2 could be implemented in the user file
   */
}
 80046e4:	bf00      	nop
 80046e6:	370c      	adds	r7, #12
 80046e8:	46bd      	mov	sp, r7
 80046ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046ee:	4770      	bx	lr

080046f0 <HAL_DACEx_ConvHalfCpltCallbackCh2>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DACEx_ConvHalfCpltCallbackCh2(DAC_HandleTypeDef *hdac)
{
 80046f0:	b480      	push	{r7}
 80046f2:	b083      	sub	sp, #12
 80046f4:	af00      	add	r7, sp, #0
 80046f6:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DACEx_ConvHalfCpltCallbackCh2 could be implemented in the user file
   */
}
 80046f8:	bf00      	nop
 80046fa:	370c      	adds	r7, #12
 80046fc:	46bd      	mov	sp, r7
 80046fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004702:	4770      	bx	lr

08004704 <HAL_DACEx_ErrorCallbackCh2>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DACEx_ErrorCallbackCh2(DAC_HandleTypeDef *hdac)
{
 8004704:	b480      	push	{r7}
 8004706:	b083      	sub	sp, #12
 8004708:	af00      	add	r7, sp, #0
 800470a:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DACEx_ErrorCallbackCh2 could be implemented in the user file
   */
}
 800470c:	bf00      	nop
 800470e:	370c      	adds	r7, #12
 8004710:	46bd      	mov	sp, r7
 8004712:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004716:	4770      	bx	lr

08004718 <DAC_DMAConvCpltCh2>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAConvCpltCh2(DMA_HandleTypeDef *hdma)
{
 8004718:	b580      	push	{r7, lr}
 800471a:	b084      	sub	sp, #16
 800471c:	af00      	add	r7, sp, #0
 800471e:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004720:	687b      	ldr	r3, [r7, #4]
 8004722:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004724:	60fb      	str	r3, [r7, #12]

#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvCpltCallbackCh2(hdac);
#else
  HAL_DACEx_ConvCpltCallbackCh2(hdac);
 8004726:	68f8      	ldr	r0, [r7, #12]
 8004728:	f7ff ffd8 	bl	80046dc <HAL_DACEx_ConvCpltCallbackCh2>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

  hdac->State = HAL_DAC_STATE_READY;
 800472c:	68fb      	ldr	r3, [r7, #12]
 800472e:	2201      	movs	r2, #1
 8004730:	711a      	strb	r2, [r3, #4]
}
 8004732:	bf00      	nop
 8004734:	3710      	adds	r7, #16
 8004736:	46bd      	mov	sp, r7
 8004738:	bd80      	pop	{r7, pc}

0800473a <DAC_DMAHalfConvCpltCh2>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAHalfConvCpltCh2(DMA_HandleTypeDef *hdma)
{
 800473a:	b580      	push	{r7, lr}
 800473c:	b084      	sub	sp, #16
 800473e:	af00      	add	r7, sp, #0
 8004740:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004742:	687b      	ldr	r3, [r7, #4]
 8004744:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004746:	60fb      	str	r3, [r7, #12]
  /* Conversion complete callback */
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvHalfCpltCallbackCh2(hdac);
#else
  HAL_DACEx_ConvHalfCpltCallbackCh2(hdac);
 8004748:	68f8      	ldr	r0, [r7, #12]
 800474a:	f7ff ffd1 	bl	80046f0 <HAL_DACEx_ConvHalfCpltCallbackCh2>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
}
 800474e:	bf00      	nop
 8004750:	3710      	adds	r7, #16
 8004752:	46bd      	mov	sp, r7
 8004754:	bd80      	pop	{r7, pc}

08004756 <DAC_DMAErrorCh2>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAErrorCh2(DMA_HandleTypeDef *hdma)
{
 8004756:	b580      	push	{r7, lr}
 8004758:	b084      	sub	sp, #16
 800475a:	af00      	add	r7, sp, #0
 800475c:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800475e:	687b      	ldr	r3, [r7, #4]
 8004760:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004762:	60fb      	str	r3, [r7, #12]

  /* Set DAC error code to DMA error */
  hdac->ErrorCode |= HAL_DAC_ERROR_DMA;
 8004764:	68fb      	ldr	r3, [r7, #12]
 8004766:	691b      	ldr	r3, [r3, #16]
 8004768:	f043 0204 	orr.w	r2, r3, #4
 800476c:	68fb      	ldr	r3, [r7, #12]
 800476e:	611a      	str	r2, [r3, #16]

#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ErrorCallbackCh2(hdac);
#else
  HAL_DACEx_ErrorCallbackCh2(hdac);
 8004770:	68f8      	ldr	r0, [r7, #12]
 8004772:	f7ff ffc7 	bl	8004704 <HAL_DACEx_ErrorCallbackCh2>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

  hdac->State = HAL_DAC_STATE_READY;
 8004776:	68fb      	ldr	r3, [r7, #12]
 8004778:	2201      	movs	r2, #1
 800477a:	711a      	strb	r2, [r3, #4]
}
 800477c:	bf00      	nop
 800477e:	3710      	adds	r7, #16
 8004780:	46bd      	mov	sp, r7
 8004782:	bd80      	pop	{r7, pc}

08004784 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8004784:	b580      	push	{r7, lr}
 8004786:	b084      	sub	sp, #16
 8004788:	af00      	add	r7, sp, #0
 800478a:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if (hdma == NULL)
 800478c:	687b      	ldr	r3, [r7, #4]
 800478e:	2b00      	cmp	r3, #0
 8004790:	d101      	bne.n	8004796 <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 8004792:	2301      	movs	r3, #1
 8004794:	e08d      	b.n	80048b2 <HAL_DMA_Init+0x12e>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 8004796:	687b      	ldr	r3, [r7, #4]
 8004798:	681b      	ldr	r3, [r3, #0]
 800479a:	461a      	mov	r2, r3
 800479c:	4b47      	ldr	r3, [pc, #284]	; (80048bc <HAL_DMA_Init+0x138>)
 800479e:	429a      	cmp	r2, r3
 80047a0:	d80f      	bhi.n	80047c2 <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 80047a2:	687b      	ldr	r3, [r7, #4]
 80047a4:	681b      	ldr	r3, [r3, #0]
 80047a6:	461a      	mov	r2, r3
 80047a8:	4b45      	ldr	r3, [pc, #276]	; (80048c0 <HAL_DMA_Init+0x13c>)
 80047aa:	4413      	add	r3, r2
 80047ac:	4a45      	ldr	r2, [pc, #276]	; (80048c4 <HAL_DMA_Init+0x140>)
 80047ae:	fba2 2303 	umull	r2, r3, r2, r3
 80047b2:	091b      	lsrs	r3, r3, #4
 80047b4:	009a      	lsls	r2, r3, #2
 80047b6:	687b      	ldr	r3, [r7, #4]
 80047b8:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA1;
 80047ba:	687b      	ldr	r3, [r7, #4]
 80047bc:	4a42      	ldr	r2, [pc, #264]	; (80048c8 <HAL_DMA_Init+0x144>)
 80047be:	641a      	str	r2, [r3, #64]	; 0x40
 80047c0:	e00e      	b.n	80047e0 <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
 80047c2:	687b      	ldr	r3, [r7, #4]
 80047c4:	681b      	ldr	r3, [r3, #0]
 80047c6:	461a      	mov	r2, r3
 80047c8:	4b40      	ldr	r3, [pc, #256]	; (80048cc <HAL_DMA_Init+0x148>)
 80047ca:	4413      	add	r3, r2
 80047cc:	4a3d      	ldr	r2, [pc, #244]	; (80048c4 <HAL_DMA_Init+0x140>)
 80047ce:	fba2 2303 	umull	r2, r3, r2, r3
 80047d2:	091b      	lsrs	r3, r3, #4
 80047d4:	009a      	lsls	r2, r3, #2
 80047d6:	687b      	ldr	r3, [r7, #4]
 80047d8:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA2;
 80047da:	687b      	ldr	r3, [r7, #4]
 80047dc:	4a3c      	ldr	r2, [pc, #240]	; (80048d0 <HAL_DMA_Init+0x14c>)
 80047de:	641a      	str	r2, [r3, #64]	; 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80047e0:	687b      	ldr	r3, [r7, #4]
 80047e2:	2202      	movs	r2, #2
 80047e4:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 80047e8:	687b      	ldr	r3, [r7, #4]
 80047ea:	681b      	ldr	r3, [r3, #0]
 80047ec:	681b      	ldr	r3, [r3, #0]
 80047ee:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 80047f0:	68fb      	ldr	r3, [r7, #12]
 80047f2:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 80047f6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80047fa:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 80047fc:	687b      	ldr	r3, [r7, #4]
 80047fe:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004800:	687b      	ldr	r3, [r7, #4]
 8004802:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 8004804:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004806:	687b      	ldr	r3, [r7, #4]
 8004808:	691b      	ldr	r3, [r3, #16]
 800480a:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800480c:	687b      	ldr	r3, [r7, #4]
 800480e:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004810:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004812:	687b      	ldr	r3, [r7, #4]
 8004814:	699b      	ldr	r3, [r3, #24]
 8004816:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8004818:	687b      	ldr	r3, [r7, #4]
 800481a:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800481c:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800481e:	687b      	ldr	r3, [r7, #4]
 8004820:	6a1b      	ldr	r3, [r3, #32]
 8004822:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8004824:	68fa      	ldr	r2, [r7, #12]
 8004826:	4313      	orrs	r3, r2
 8004828:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 800482a:	687b      	ldr	r3, [r7, #4]
 800482c:	681b      	ldr	r3, [r3, #0]
 800482e:	68fa      	ldr	r2, [r7, #12]
 8004830:	601a      	str	r2, [r3, #0]

  /* Initialize parameters for DMAMUX channel :
     DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
  */
  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 8004832:	6878      	ldr	r0, [r7, #4]
 8004834:	f000 fa10 	bl	8004c58 <DMA_CalcDMAMUXChannelBaseAndMask>

  if (hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8004838:	687b      	ldr	r3, [r7, #4]
 800483a:	689b      	ldr	r3, [r3, #8]
 800483c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8004840:	d102      	bne.n	8004848 <HAL_DMA_Init+0xc4>
  {
    /* if memory to memory force the request to 0*/
    hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 8004842:	687b      	ldr	r3, [r7, #4]
 8004844:	2200      	movs	r2, #0
 8004846:	605a      	str	r2, [r3, #4]
  }

  /* Set peripheral request  to DMAMUX channel */
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8004848:	687b      	ldr	r3, [r7, #4]
 800484a:	685a      	ldr	r2, [r3, #4]
 800484c:	687b      	ldr	r3, [r7, #4]
 800484e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004850:	b2d2      	uxtb	r2, r2
 8004852:	601a      	str	r2, [r3, #0]

  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8004854:	687b      	ldr	r3, [r7, #4]
 8004856:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004858:	687a      	ldr	r2, [r7, #4]
 800485a:	6d12      	ldr	r2, [r2, #80]	; 0x50
 800485c:	605a      	str	r2, [r3, #4]

  if (((hdma->Init.Request >  0U) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 800485e:	687b      	ldr	r3, [r7, #4]
 8004860:	685b      	ldr	r3, [r3, #4]
 8004862:	2b00      	cmp	r3, #0
 8004864:	d010      	beq.n	8004888 <HAL_DMA_Init+0x104>
 8004866:	687b      	ldr	r3, [r7, #4]
 8004868:	685b      	ldr	r3, [r3, #4]
 800486a:	2b04      	cmp	r3, #4
 800486c:	d80c      	bhi.n	8004888 <HAL_DMA_Init+0x104>
  {
    /* Initialize parameters for DMAMUX request generator :
       DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask
    */
    DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 800486e:	6878      	ldr	r0, [r7, #4]
 8004870:	f000 fa30 	bl	8004cd4 <DMA_CalcDMAMUXRequestGenBaseAndMask>

    /* Reset the DMAMUX request generator register*/
    hdma->DMAmuxRequestGen->RGCR = 0U;
 8004874:	687b      	ldr	r3, [r7, #4]
 8004876:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004878:	2200      	movs	r2, #0
 800487a:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800487c:	687b      	ldr	r3, [r7, #4]
 800487e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004880:	687a      	ldr	r2, [r7, #4]
 8004882:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 8004884:	605a      	str	r2, [r3, #4]
 8004886:	e008      	b.n	800489a <HAL_DMA_Init+0x116>
  }
  else
  {
    hdma->DMAmuxRequestGen = 0U;
 8004888:	687b      	ldr	r3, [r7, #4]
 800488a:	2200      	movs	r2, #0
 800488c:	655a      	str	r2, [r3, #84]	; 0x54
    hdma->DMAmuxRequestGenStatus = 0U;
 800488e:	687b      	ldr	r3, [r7, #4]
 8004890:	2200      	movs	r2, #0
 8004892:	659a      	str	r2, [r3, #88]	; 0x58
    hdma->DMAmuxRequestGenStatusMask = 0U;
 8004894:	687b      	ldr	r3, [r7, #4]
 8004896:	2200      	movs	r2, #0
 8004898:	65da      	str	r2, [r3, #92]	; 0x5c
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800489a:	687b      	ldr	r3, [r7, #4]
 800489c:	2200      	movs	r2, #0
 800489e:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA state*/
  hdma->State  = HAL_DMA_STATE_READY;
 80048a0:	687b      	ldr	r3, [r7, #4]
 80048a2:	2201      	movs	r2, #1
 80048a4:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 80048a8:	687b      	ldr	r3, [r7, #4]
 80048aa:	2200      	movs	r2, #0
 80048ac:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  return HAL_OK;
 80048b0:	2300      	movs	r3, #0
}
 80048b2:	4618      	mov	r0, r3
 80048b4:	3710      	adds	r7, #16
 80048b6:	46bd      	mov	sp, r7
 80048b8:	bd80      	pop	{r7, pc}
 80048ba:	bf00      	nop
 80048bc:	40020407 	.word	0x40020407
 80048c0:	bffdfff8 	.word	0xbffdfff8
 80048c4:	cccccccd 	.word	0xcccccccd
 80048c8:	40020000 	.word	0x40020000
 80048cc:	bffdfbf8 	.word	0xbffdfbf8
 80048d0:	40020400 	.word	0x40020400

080048d4 <HAL_DMA_Start_IT>:
  * @param  DataLength The length of data to be transferred from source to destination (up to 256Kbytes-1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress,
                                   uint32_t DataLength)
{
 80048d4:	b580      	push	{r7, lr}
 80048d6:	b086      	sub	sp, #24
 80048d8:	af00      	add	r7, sp, #0
 80048da:	60f8      	str	r0, [r7, #12]
 80048dc:	60b9      	str	r1, [r7, #8]
 80048de:	607a      	str	r2, [r7, #4]
 80048e0:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80048e2:	2300      	movs	r3, #0
 80048e4:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 80048e6:	68fb      	ldr	r3, [r7, #12]
 80048e8:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80048ec:	2b01      	cmp	r3, #1
 80048ee:	d101      	bne.n	80048f4 <HAL_DMA_Start_IT+0x20>
 80048f0:	2302      	movs	r3, #2
 80048f2:	e066      	b.n	80049c2 <HAL_DMA_Start_IT+0xee>
 80048f4:	68fb      	ldr	r3, [r7, #12]
 80048f6:	2201      	movs	r2, #1
 80048f8:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  if (HAL_DMA_STATE_READY == hdma->State)
 80048fc:	68fb      	ldr	r3, [r7, #12]
 80048fe:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8004902:	b2db      	uxtb	r3, r3
 8004904:	2b01      	cmp	r3, #1
 8004906:	d155      	bne.n	80049b4 <HAL_DMA_Start_IT+0xe0>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8004908:	68fb      	ldr	r3, [r7, #12]
 800490a:	2202      	movs	r2, #2
 800490c:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8004910:	68fb      	ldr	r3, [r7, #12]
 8004912:	2200      	movs	r2, #0
 8004914:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8004916:	68fb      	ldr	r3, [r7, #12]
 8004918:	681b      	ldr	r3, [r3, #0]
 800491a:	681a      	ldr	r2, [r3, #0]
 800491c:	68fb      	ldr	r3, [r7, #12]
 800491e:	681b      	ldr	r3, [r3, #0]
 8004920:	f022 0201 	bic.w	r2, r2, #1
 8004924:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8004926:	683b      	ldr	r3, [r7, #0]
 8004928:	687a      	ldr	r2, [r7, #4]
 800492a:	68b9      	ldr	r1, [r7, #8]
 800492c:	68f8      	ldr	r0, [r7, #12]
 800492e:	f000 f954 	bl	8004bda <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if (NULL != hdma->XferHalfCpltCallback)
 8004932:	68fb      	ldr	r3, [r7, #12]
 8004934:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004936:	2b00      	cmp	r3, #0
 8004938:	d008      	beq.n	800494c <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800493a:	68fb      	ldr	r3, [r7, #12]
 800493c:	681b      	ldr	r3, [r3, #0]
 800493e:	681a      	ldr	r2, [r3, #0]
 8004940:	68fb      	ldr	r3, [r7, #12]
 8004942:	681b      	ldr	r3, [r3, #0]
 8004944:	f042 020e 	orr.w	r2, r2, #14
 8004948:	601a      	str	r2, [r3, #0]
 800494a:	e00f      	b.n	800496c <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 800494c:	68fb      	ldr	r3, [r7, #12]
 800494e:	681b      	ldr	r3, [r3, #0]
 8004950:	681a      	ldr	r2, [r3, #0]
 8004952:	68fb      	ldr	r3, [r7, #12]
 8004954:	681b      	ldr	r3, [r3, #0]
 8004956:	f022 0204 	bic.w	r2, r2, #4
 800495a:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 800495c:	68fb      	ldr	r3, [r7, #12]
 800495e:	681b      	ldr	r3, [r3, #0]
 8004960:	681a      	ldr	r2, [r3, #0]
 8004962:	68fb      	ldr	r3, [r7, #12]
 8004964:	681b      	ldr	r3, [r3, #0]
 8004966:	f042 020a 	orr.w	r2, r2, #10
 800496a:	601a      	str	r2, [r3, #0]
    }

    /* Check if DMAMUX Synchronization is enabled*/
    if ((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 800496c:	68fb      	ldr	r3, [r7, #12]
 800496e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004970:	681b      	ldr	r3, [r3, #0]
 8004972:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004976:	2b00      	cmp	r3, #0
 8004978:	d007      	beq.n	800498a <HAL_DMA_Start_IT+0xb6>
    {
      /* Enable DMAMUX sync overrun IT*/
      hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 800497a:	68fb      	ldr	r3, [r7, #12]
 800497c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800497e:	681a      	ldr	r2, [r3, #0]
 8004980:	68fb      	ldr	r3, [r7, #12]
 8004982:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004984:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004988:	601a      	str	r2, [r3, #0]
    }

    if (hdma->DMAmuxRequestGen != 0U)
 800498a:	68fb      	ldr	r3, [r7, #12]
 800498c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800498e:	2b00      	cmp	r3, #0
 8004990:	d007      	beq.n	80049a2 <HAL_DMA_Start_IT+0xce>
    {
      /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
      /* enable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 8004992:	68fb      	ldr	r3, [r7, #12]
 8004994:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004996:	681a      	ldr	r2, [r3, #0]
 8004998:	68fb      	ldr	r3, [r7, #12]
 800499a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800499c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80049a0:	601a      	str	r2, [r3, #0]
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 80049a2:	68fb      	ldr	r3, [r7, #12]
 80049a4:	681b      	ldr	r3, [r3, #0]
 80049a6:	681a      	ldr	r2, [r3, #0]
 80049a8:	68fb      	ldr	r3, [r7, #12]
 80049aa:	681b      	ldr	r3, [r3, #0]
 80049ac:	f042 0201 	orr.w	r2, r2, #1
 80049b0:	601a      	str	r2, [r3, #0]
 80049b2:	e005      	b.n	80049c0 <HAL_DMA_Start_IT+0xec>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80049b4:	68fb      	ldr	r3, [r7, #12]
 80049b6:	2200      	movs	r2, #0
 80049b8:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Remain BUSY */
    status = HAL_BUSY;
 80049bc:	2302      	movs	r3, #2
 80049be:	75fb      	strb	r3, [r7, #23]
  }
  return status;
 80049c0:	7dfb      	ldrb	r3, [r7, #23]
}
 80049c2:	4618      	mov	r0, r3
 80049c4:	3718      	adds	r7, #24
 80049c6:	46bd      	mov	sp, r7
 80049c8:	bd80      	pop	{r7, pc}

080049ca <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80049ca:	b480      	push	{r7}
 80049cc:	b085      	sub	sp, #20
 80049ce:	af00      	add	r7, sp, #0
 80049d0:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80049d2:	2300      	movs	r3, #0
 80049d4:	73fb      	strb	r3, [r7, #15]

  if(hdma->State != HAL_DMA_STATE_BUSY)
 80049d6:	687b      	ldr	r3, [r7, #4]
 80049d8:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 80049dc:	b2db      	uxtb	r3, r3
 80049de:	2b02      	cmp	r3, #2
 80049e0:	d005      	beq.n	80049ee <HAL_DMA_Abort+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80049e2:	687b      	ldr	r3, [r7, #4]
 80049e4:	2204      	movs	r2, #4
 80049e6:	63da      	str	r2, [r3, #60]	; 0x3c

    status = HAL_ERROR;
 80049e8:	2301      	movs	r3, #1
 80049ea:	73fb      	strb	r3, [r7, #15]
 80049ec:	e037      	b.n	8004a5e <HAL_DMA_Abort+0x94>
  }
  else
  {
     /* Disable DMA IT */
     __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80049ee:	687b      	ldr	r3, [r7, #4]
 80049f0:	681b      	ldr	r3, [r3, #0]
 80049f2:	681a      	ldr	r2, [r3, #0]
 80049f4:	687b      	ldr	r3, [r7, #4]
 80049f6:	681b      	ldr	r3, [r3, #0]
 80049f8:	f022 020e 	bic.w	r2, r2, #14
 80049fc:	601a      	str	r2, [r3, #0]
     
     /* disable the DMAMUX sync overrun IT*/
     hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 80049fe:	687b      	ldr	r3, [r7, #4]
 8004a00:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004a02:	681a      	ldr	r2, [r3, #0]
 8004a04:	687b      	ldr	r3, [r7, #4]
 8004a06:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004a08:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8004a0c:	601a      	str	r2, [r3, #0]
     
     /* Disable the channel */
     __HAL_DMA_DISABLE(hdma);
 8004a0e:	687b      	ldr	r3, [r7, #4]
 8004a10:	681b      	ldr	r3, [r3, #0]
 8004a12:	681a      	ldr	r2, [r3, #0]
 8004a14:	687b      	ldr	r3, [r7, #4]
 8004a16:	681b      	ldr	r3, [r3, #0]
 8004a18:	f022 0201 	bic.w	r2, r2, #1
 8004a1c:	601a      	str	r2, [r3, #0]
     
     /* Clear all flags */
     hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 8004a1e:	687b      	ldr	r3, [r7, #4]
 8004a20:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004a22:	f003 021f 	and.w	r2, r3, #31
 8004a26:	687b      	ldr	r3, [r7, #4]
 8004a28:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004a2a:	2101      	movs	r1, #1
 8004a2c:	fa01 f202 	lsl.w	r2, r1, r2
 8004a30:	605a      	str	r2, [r3, #4]
     
     /* Clear the DMAMUX synchro overrun flag */
     hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8004a32:	687b      	ldr	r3, [r7, #4]
 8004a34:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004a36:	687a      	ldr	r2, [r7, #4]
 8004a38:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8004a3a:	605a      	str	r2, [r3, #4]
     
     if (hdma->DMAmuxRequestGen != 0U)
 8004a3c:	687b      	ldr	r3, [r7, #4]
 8004a3e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004a40:	2b00      	cmp	r3, #0
 8004a42:	d00c      	beq.n	8004a5e <HAL_DMA_Abort+0x94>
     {
       /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
       /* disable the request gen overrun IT*/
       hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8004a44:	687b      	ldr	r3, [r7, #4]
 8004a46:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004a48:	681a      	ldr	r2, [r3, #0]
 8004a4a:	687b      	ldr	r3, [r7, #4]
 8004a4c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004a4e:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8004a52:	601a      	str	r2, [r3, #0]
     
       /* Clear the DMAMUX request generator overrun flag */
       hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8004a54:	687b      	ldr	r3, [r7, #4]
 8004a56:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004a58:	687a      	ldr	r2, [r7, #4]
 8004a5a:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 8004a5c:	605a      	str	r2, [r3, #4]
     }
  }  
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8004a5e:	687b      	ldr	r3, [r7, #4]
 8004a60:	2201      	movs	r2, #1
 8004a62:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);
 8004a66:	687b      	ldr	r3, [r7, #4]
 8004a68:	2200      	movs	r2, #0
 8004a6a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  return status;
 8004a6e:	7bfb      	ldrb	r3, [r7, #15]
}
 8004a70:	4618      	mov	r0, r3
 8004a72:	3714      	adds	r7, #20
 8004a74:	46bd      	mov	sp, r7
 8004a76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a7a:	4770      	bx	lr

08004a7c <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8004a7c:	b580      	push	{r7, lr}
 8004a7e:	b084      	sub	sp, #16
 8004a80:	af00      	add	r7, sp, #0
 8004a82:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8004a84:	687b      	ldr	r3, [r7, #4]
 8004a86:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004a88:	681b      	ldr	r3, [r3, #0]
 8004a8a:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8004a8c:	687b      	ldr	r3, [r7, #4]
 8004a8e:	681b      	ldr	r3, [r3, #0]
 8004a90:	681b      	ldr	r3, [r3, #0]
 8004a92:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if ((0U != (flag_it & ((uint32_t)DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1FU)))) && (0U != (source_it & DMA_IT_HT)))
 8004a94:	687b      	ldr	r3, [r7, #4]
 8004a96:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004a98:	f003 031f 	and.w	r3, r3, #31
 8004a9c:	2204      	movs	r2, #4
 8004a9e:	409a      	lsls	r2, r3
 8004aa0:	68fb      	ldr	r3, [r7, #12]
 8004aa2:	4013      	ands	r3, r2
 8004aa4:	2b00      	cmp	r3, #0
 8004aa6:	d026      	beq.n	8004af6 <HAL_DMA_IRQHandler+0x7a>
 8004aa8:	68bb      	ldr	r3, [r7, #8]
 8004aaa:	f003 0304 	and.w	r3, r3, #4
 8004aae:	2b00      	cmp	r3, #0
 8004ab0:	d021      	beq.n	8004af6 <HAL_DMA_IRQHandler+0x7a>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8004ab2:	687b      	ldr	r3, [r7, #4]
 8004ab4:	681b      	ldr	r3, [r3, #0]
 8004ab6:	681b      	ldr	r3, [r3, #0]
 8004ab8:	f003 0320 	and.w	r3, r3, #32
 8004abc:	2b00      	cmp	r3, #0
 8004abe:	d107      	bne.n	8004ad0 <HAL_DMA_IRQHandler+0x54>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8004ac0:	687b      	ldr	r3, [r7, #4]
 8004ac2:	681b      	ldr	r3, [r3, #0]
 8004ac4:	681a      	ldr	r2, [r3, #0]
 8004ac6:	687b      	ldr	r3, [r7, #4]
 8004ac8:	681b      	ldr	r3, [r3, #0]
 8004aca:	f022 0204 	bic.w	r2, r2, #4
 8004ace:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1FU));
 8004ad0:	687b      	ldr	r3, [r7, #4]
 8004ad2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004ad4:	f003 021f 	and.w	r2, r3, #31
 8004ad8:	687b      	ldr	r3, [r7, #4]
 8004ada:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004adc:	2104      	movs	r1, #4
 8004ade:	fa01 f202 	lsl.w	r2, r1, r2
 8004ae2:	605a      	str	r2, [r3, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if (hdma->XferHalfCpltCallback != NULL)
 8004ae4:	687b      	ldr	r3, [r7, #4]
 8004ae6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004ae8:	2b00      	cmp	r3, #0
 8004aea:	d071      	beq.n	8004bd0 <HAL_DMA_IRQHandler+0x154>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 8004aec:	687b      	ldr	r3, [r7, #4]
 8004aee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004af0:	6878      	ldr	r0, [r7, #4]
 8004af2:	4798      	blx	r3
    if (hdma->XferHalfCpltCallback != NULL)
 8004af4:	e06c      	b.n	8004bd0 <HAL_DMA_IRQHandler+0x154>
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  else if ((0U != (flag_it & ((uint32_t)DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1FU))))
 8004af6:	687b      	ldr	r3, [r7, #4]
 8004af8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004afa:	f003 031f 	and.w	r3, r3, #31
 8004afe:	2202      	movs	r2, #2
 8004b00:	409a      	lsls	r2, r3
 8004b02:	68fb      	ldr	r3, [r7, #12]
 8004b04:	4013      	ands	r3, r2
 8004b06:	2b00      	cmp	r3, #0
 8004b08:	d02e      	beq.n	8004b68 <HAL_DMA_IRQHandler+0xec>
           && (0U != (source_it & DMA_IT_TC)))
 8004b0a:	68bb      	ldr	r3, [r7, #8]
 8004b0c:	f003 0302 	and.w	r3, r3, #2
 8004b10:	2b00      	cmp	r3, #0
 8004b12:	d029      	beq.n	8004b68 <HAL_DMA_IRQHandler+0xec>
  {
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8004b14:	687b      	ldr	r3, [r7, #4]
 8004b16:	681b      	ldr	r3, [r3, #0]
 8004b18:	681b      	ldr	r3, [r3, #0]
 8004b1a:	f003 0320 	and.w	r3, r3, #32
 8004b1e:	2b00      	cmp	r3, #0
 8004b20:	d10b      	bne.n	8004b3a <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8004b22:	687b      	ldr	r3, [r7, #4]
 8004b24:	681b      	ldr	r3, [r3, #0]
 8004b26:	681a      	ldr	r2, [r3, #0]
 8004b28:	687b      	ldr	r3, [r7, #4]
 8004b2a:	681b      	ldr	r3, [r3, #0]
 8004b2c:	f022 020a 	bic.w	r2, r2, #10
 8004b30:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8004b32:	687b      	ldr	r3, [r7, #4]
 8004b34:	2201      	movs	r2, #1
 8004b36:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1FU));
 8004b3a:	687b      	ldr	r3, [r7, #4]
 8004b3c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004b3e:	f003 021f 	and.w	r2, r3, #31
 8004b42:	687b      	ldr	r3, [r7, #4]
 8004b44:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004b46:	2102      	movs	r1, #2
 8004b48:	fa01 f202 	lsl.w	r2, r1, r2
 8004b4c:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004b4e:	687b      	ldr	r3, [r7, #4]
 8004b50:	2200      	movs	r2, #0
 8004b52:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferCpltCallback != NULL)
 8004b56:	687b      	ldr	r3, [r7, #4]
 8004b58:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004b5a:	2b00      	cmp	r3, #0
 8004b5c:	d038      	beq.n	8004bd0 <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8004b5e:	687b      	ldr	r3, [r7, #4]
 8004b60:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004b62:	6878      	ldr	r0, [r7, #4]
 8004b64:	4798      	blx	r3
    if (hdma->XferCpltCallback != NULL)
 8004b66:	e033      	b.n	8004bd0 <HAL_DMA_IRQHandler+0x154>
    }
  }
  /* Transfer Error Interrupt management **************************************/
  else if ((0U != (flag_it & ((uint32_t)DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1FU))))
 8004b68:	687b      	ldr	r3, [r7, #4]
 8004b6a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004b6c:	f003 031f 	and.w	r3, r3, #31
 8004b70:	2208      	movs	r2, #8
 8004b72:	409a      	lsls	r2, r3
 8004b74:	68fb      	ldr	r3, [r7, #12]
 8004b76:	4013      	ands	r3, r2
 8004b78:	2b00      	cmp	r3, #0
 8004b7a:	d02a      	beq.n	8004bd2 <HAL_DMA_IRQHandler+0x156>
           && (0U != (source_it & DMA_IT_TE)))
 8004b7c:	68bb      	ldr	r3, [r7, #8]
 8004b7e:	f003 0308 	and.w	r3, r3, #8
 8004b82:	2b00      	cmp	r3, #0
 8004b84:	d025      	beq.n	8004bd2 <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8004b86:	687b      	ldr	r3, [r7, #4]
 8004b88:	681b      	ldr	r3, [r3, #0]
 8004b8a:	681a      	ldr	r2, [r3, #0]
 8004b8c:	687b      	ldr	r3, [r7, #4]
 8004b8e:	681b      	ldr	r3, [r3, #0]
 8004b90:	f022 020e 	bic.w	r2, r2, #14
 8004b94:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 8004b96:	687b      	ldr	r3, [r7, #4]
 8004b98:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004b9a:	f003 021f 	and.w	r2, r3, #31
 8004b9e:	687b      	ldr	r3, [r7, #4]
 8004ba0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004ba2:	2101      	movs	r1, #1
 8004ba4:	fa01 f202 	lsl.w	r2, r1, r2
 8004ba8:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8004baa:	687b      	ldr	r3, [r7, #4]
 8004bac:	2201      	movs	r2, #1
 8004bae:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8004bb0:	687b      	ldr	r3, [r7, #4]
 8004bb2:	2201      	movs	r2, #1
 8004bb4:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004bb8:	687b      	ldr	r3, [r7, #4]
 8004bba:	2200      	movs	r2, #0
 8004bbc:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferErrorCallback != NULL)
 8004bc0:	687b      	ldr	r3, [r7, #4]
 8004bc2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004bc4:	2b00      	cmp	r3, #0
 8004bc6:	d004      	beq.n	8004bd2 <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8004bc8:	687b      	ldr	r3, [r7, #4]
 8004bca:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004bcc:	6878      	ldr	r0, [r7, #4]
 8004bce:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 8004bd0:	bf00      	nop
 8004bd2:	bf00      	nop
}
 8004bd4:	3710      	adds	r7, #16
 8004bd6:	46bd      	mov	sp, r7
 8004bd8:	bd80      	pop	{r7, pc}

08004bda <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8004bda:	b480      	push	{r7}
 8004bdc:	b085      	sub	sp, #20
 8004bde:	af00      	add	r7, sp, #0
 8004be0:	60f8      	str	r0, [r7, #12]
 8004be2:	60b9      	str	r1, [r7, #8]
 8004be4:	607a      	str	r2, [r7, #4]
 8004be6:	603b      	str	r3, [r7, #0]
  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8004be8:	68fb      	ldr	r3, [r7, #12]
 8004bea:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004bec:	68fa      	ldr	r2, [r7, #12]
 8004bee:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8004bf0:	605a      	str	r2, [r3, #4]

  if (hdma->DMAmuxRequestGen != 0U)
 8004bf2:	68fb      	ldr	r3, [r7, #12]
 8004bf4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004bf6:	2b00      	cmp	r3, #0
 8004bf8:	d004      	beq.n	8004c04 <DMA_SetConfig+0x2a>
  {
    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8004bfa:	68fb      	ldr	r3, [r7, #12]
 8004bfc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004bfe:	68fa      	ldr	r2, [r7, #12]
 8004c00:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 8004c02:	605a      	str	r2, [r3, #4]
  }

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 8004c04:	68fb      	ldr	r3, [r7, #12]
 8004c06:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004c08:	f003 021f 	and.w	r2, r3, #31
 8004c0c:	68fb      	ldr	r3, [r7, #12]
 8004c0e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004c10:	2101      	movs	r1, #1
 8004c12:	fa01 f202 	lsl.w	r2, r1, r2
 8004c16:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8004c18:	68fb      	ldr	r3, [r7, #12]
 8004c1a:	681b      	ldr	r3, [r3, #0]
 8004c1c:	683a      	ldr	r2, [r7, #0]
 8004c1e:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if ((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8004c20:	68fb      	ldr	r3, [r7, #12]
 8004c22:	689b      	ldr	r3, [r3, #8]
 8004c24:	2b10      	cmp	r3, #16
 8004c26:	d108      	bne.n	8004c3a <DMA_SetConfig+0x60>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8004c28:	68fb      	ldr	r3, [r7, #12]
 8004c2a:	681b      	ldr	r3, [r3, #0]
 8004c2c:	687a      	ldr	r2, [r7, #4]
 8004c2e:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8004c30:	68fb      	ldr	r3, [r7, #12]
 8004c32:	681b      	ldr	r3, [r3, #0]
 8004c34:	68ba      	ldr	r2, [r7, #8]
 8004c36:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8004c38:	e007      	b.n	8004c4a <DMA_SetConfig+0x70>
    hdma->Instance->CPAR = SrcAddress;
 8004c3a:	68fb      	ldr	r3, [r7, #12]
 8004c3c:	681b      	ldr	r3, [r3, #0]
 8004c3e:	68ba      	ldr	r2, [r7, #8]
 8004c40:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8004c42:	68fb      	ldr	r3, [r7, #12]
 8004c44:	681b      	ldr	r3, [r3, #0]
 8004c46:	687a      	ldr	r2, [r7, #4]
 8004c48:	60da      	str	r2, [r3, #12]
}
 8004c4a:	bf00      	nop
 8004c4c:	3714      	adds	r7, #20
 8004c4e:	46bd      	mov	sp, r7
 8004c50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c54:	4770      	bx	lr
	...

08004c58 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma        pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval None
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8004c58:	b480      	push	{r7}
 8004c5a:	b087      	sub	sp, #28
 8004c5c:	af00      	add	r7, sp, #0
 8004c5e:	6078      	str	r0, [r7, #4]
  uint32_t dmamux_base_addr;
  uint32_t channel_number;
  DMAMUX_Channel_TypeDef *DMAMUX1_ChannelBase;

  /* check if instance is not outside the DMA channel range */
  if ((uint32_t)hdma->Instance < (uint32_t)DMA2_Channel1)
 8004c60:	687b      	ldr	r3, [r7, #4]
 8004c62:	681b      	ldr	r3, [r3, #0]
 8004c64:	461a      	mov	r2, r3
 8004c66:	4b16      	ldr	r3, [pc, #88]	; (8004cc0 <DMA_CalcDMAMUXChannelBaseAndMask+0x68>)
 8004c68:	429a      	cmp	r2, r3
 8004c6a:	d802      	bhi.n	8004c72 <DMA_CalcDMAMUXChannelBaseAndMask+0x1a>
  {
    /* DMA1 */
    DMAMUX1_ChannelBase = DMAMUX1_Channel0;
 8004c6c:	4b15      	ldr	r3, [pc, #84]	; (8004cc4 <DMA_CalcDMAMUXChannelBaseAndMask+0x6c>)
 8004c6e:	617b      	str	r3, [r7, #20]
 8004c70:	e001      	b.n	8004c76 <DMA_CalcDMAMUXChannelBaseAndMask+0x1e>
  }
  else
  {
    /* DMA2 */
#if defined (STM32G471xx) || defined (STM32G473xx) || defined (STM32G474xx) || defined (STM32G483xx) || defined (STM32G484xx)
    DMAMUX1_ChannelBase = DMAMUX1_Channel8;
 8004c72:	4b15      	ldr	r3, [pc, #84]	; (8004cc8 <DMA_CalcDMAMUXChannelBaseAndMask+0x70>)
 8004c74:	617b      	str	r3, [r7, #20]
    DMAMUX1_ChannelBase = DMAMUX1_Channel6;
#else
    DMAMUX1_ChannelBase = DMAMUX1_Channel7;
#endif /* STM32G4x1xx) */
  }
  dmamux_base_addr = (uint32_t)DMAMUX1_ChannelBase;
 8004c76:	697b      	ldr	r3, [r7, #20]
 8004c78:	613b      	str	r3, [r7, #16]
  channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 8004c7a:	687b      	ldr	r3, [r7, #4]
 8004c7c:	681b      	ldr	r3, [r3, #0]
 8004c7e:	b2db      	uxtb	r3, r3
 8004c80:	3b08      	subs	r3, #8
 8004c82:	4a12      	ldr	r2, [pc, #72]	; (8004ccc <DMA_CalcDMAMUXChannelBaseAndMask+0x74>)
 8004c84:	fba2 2303 	umull	r2, r3, r2, r3
 8004c88:	091b      	lsrs	r3, r3, #4
 8004c8a:	60fb      	str	r3, [r7, #12]
  hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)(uint32_t)(dmamux_base_addr + ((hdma->ChannelIndex >> 2U) * ((uint32_t)DMAMUX1_Channel1 - (uint32_t)DMAMUX1_Channel0)));
 8004c8c:	687b      	ldr	r3, [r7, #4]
 8004c8e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004c90:	089b      	lsrs	r3, r3, #2
 8004c92:	009a      	lsls	r2, r3, #2
 8004c94:	693b      	ldr	r3, [r7, #16]
 8004c96:	4413      	add	r3, r2
 8004c98:	461a      	mov	r2, r3
 8004c9a:	687b      	ldr	r3, [r7, #4]
 8004c9c:	649a      	str	r2, [r3, #72]	; 0x48
  hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 8004c9e:	687b      	ldr	r3, [r7, #4]
 8004ca0:	4a0b      	ldr	r2, [pc, #44]	; (8004cd0 <DMA_CalcDMAMUXChannelBaseAndMask+0x78>)
 8004ca2:	64da      	str	r2, [r3, #76]	; 0x4c
  hdma->DMAmuxChannelStatusMask = 1UL << (channel_number & 0x1FU);
 8004ca4:	68fb      	ldr	r3, [r7, #12]
 8004ca6:	f003 031f 	and.w	r3, r3, #31
 8004caa:	2201      	movs	r2, #1
 8004cac:	409a      	lsls	r2, r3
 8004cae:	687b      	ldr	r3, [r7, #4]
 8004cb0:	651a      	str	r2, [r3, #80]	; 0x50
}
 8004cb2:	bf00      	nop
 8004cb4:	371c      	adds	r7, #28
 8004cb6:	46bd      	mov	sp, r7
 8004cb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cbc:	4770      	bx	lr
 8004cbe:	bf00      	nop
 8004cc0:	40020407 	.word	0x40020407
 8004cc4:	40020800 	.word	0x40020800
 8004cc8:	40020820 	.word	0x40020820
 8004ccc:	cccccccd 	.word	0xcccccccd
 8004cd0:	40020880 	.word	0x40020880

08004cd4 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  *                     the configuration information for the specified DMA Channel.
  * @retval None
  */

static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8004cd4:	b480      	push	{r7}
 8004cd6:	b085      	sub	sp, #20
 8004cd8:	af00      	add	r7, sp, #0
 8004cda:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 8004cdc:	687b      	ldr	r3, [r7, #4]
 8004cde:	685b      	ldr	r3, [r3, #4]
 8004ce0:	b2db      	uxtb	r3, r3
 8004ce2:	60fb      	str	r3, [r7, #12]

  /* DMA Channels are connected to DMAMUX1 request generator blocks*/
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 8004ce4:	68fa      	ldr	r2, [r7, #12]
 8004ce6:	4b0b      	ldr	r3, [pc, #44]	; (8004d14 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x40>)
 8004ce8:	4413      	add	r3, r2
 8004cea:	009b      	lsls	r3, r3, #2
 8004cec:	461a      	mov	r2, r3
 8004cee:	687b      	ldr	r3, [r7, #4]
 8004cf0:	655a      	str	r2, [r3, #84]	; 0x54

  hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 8004cf2:	687b      	ldr	r3, [r7, #4]
 8004cf4:	4a08      	ldr	r2, [pc, #32]	; (8004d18 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x44>)
 8004cf6:	659a      	str	r2, [r3, #88]	; 0x58

  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x1FU);
 8004cf8:	68fb      	ldr	r3, [r7, #12]
 8004cfa:	3b01      	subs	r3, #1
 8004cfc:	f003 031f 	and.w	r3, r3, #31
 8004d00:	2201      	movs	r2, #1
 8004d02:	409a      	lsls	r2, r3
 8004d04:	687b      	ldr	r3, [r7, #4]
 8004d06:	65da      	str	r2, [r3, #92]	; 0x5c
}
 8004d08:	bf00      	nop
 8004d0a:	3714      	adds	r7, #20
 8004d0c:	46bd      	mov	sp, r7
 8004d0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d12:	4770      	bx	lr
 8004d14:	1000823f 	.word	0x1000823f
 8004d18:	40020940 	.word	0x40020940

08004d1c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8004d1c:	b480      	push	{r7}
 8004d1e:	b087      	sub	sp, #28
 8004d20:	af00      	add	r7, sp, #0
 8004d22:	6078      	str	r0, [r7, #4]
 8004d24:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8004d26:	2300      	movs	r3, #0
 8004d28:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 8004d2a:	e15a      	b.n	8004fe2 <HAL_GPIO_Init+0x2c6>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8004d2c:	683b      	ldr	r3, [r7, #0]
 8004d2e:	681a      	ldr	r2, [r3, #0]
 8004d30:	2101      	movs	r1, #1
 8004d32:	697b      	ldr	r3, [r7, #20]
 8004d34:	fa01 f303 	lsl.w	r3, r1, r3
 8004d38:	4013      	ands	r3, r2
 8004d3a:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8004d3c:	68fb      	ldr	r3, [r7, #12]
 8004d3e:	2b00      	cmp	r3, #0
 8004d40:	f000 814c 	beq.w	8004fdc <HAL_GPIO_Init+0x2c0>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8004d44:	683b      	ldr	r3, [r7, #0]
 8004d46:	685b      	ldr	r3, [r3, #4]
 8004d48:	2b01      	cmp	r3, #1
 8004d4a:	d00b      	beq.n	8004d64 <HAL_GPIO_Init+0x48>
 8004d4c:	683b      	ldr	r3, [r7, #0]
 8004d4e:	685b      	ldr	r3, [r3, #4]
 8004d50:	2b02      	cmp	r3, #2
 8004d52:	d007      	beq.n	8004d64 <HAL_GPIO_Init+0x48>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8004d54:	683b      	ldr	r3, [r7, #0]
 8004d56:	685b      	ldr	r3, [r3, #4]
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8004d58:	2b11      	cmp	r3, #17
 8004d5a:	d003      	beq.n	8004d64 <HAL_GPIO_Init+0x48>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8004d5c:	683b      	ldr	r3, [r7, #0]
 8004d5e:	685b      	ldr	r3, [r3, #4]
 8004d60:	2b12      	cmp	r3, #18
 8004d62:	d130      	bne.n	8004dc6 <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8004d64:	687b      	ldr	r3, [r7, #4]
 8004d66:	689b      	ldr	r3, [r3, #8]
 8004d68:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8004d6a:	697b      	ldr	r3, [r7, #20]
 8004d6c:	005b      	lsls	r3, r3, #1
 8004d6e:	2203      	movs	r2, #3
 8004d70:	fa02 f303 	lsl.w	r3, r2, r3
 8004d74:	43db      	mvns	r3, r3
 8004d76:	693a      	ldr	r2, [r7, #16]
 8004d78:	4013      	ands	r3, r2
 8004d7a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8004d7c:	683b      	ldr	r3, [r7, #0]
 8004d7e:	68da      	ldr	r2, [r3, #12]
 8004d80:	697b      	ldr	r3, [r7, #20]
 8004d82:	005b      	lsls	r3, r3, #1
 8004d84:	fa02 f303 	lsl.w	r3, r2, r3
 8004d88:	693a      	ldr	r2, [r7, #16]
 8004d8a:	4313      	orrs	r3, r2
 8004d8c:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8004d8e:	687b      	ldr	r3, [r7, #4]
 8004d90:	693a      	ldr	r2, [r7, #16]
 8004d92:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8004d94:	687b      	ldr	r3, [r7, #4]
 8004d96:	685b      	ldr	r3, [r3, #4]
 8004d98:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8004d9a:	2201      	movs	r2, #1
 8004d9c:	697b      	ldr	r3, [r7, #20]
 8004d9e:	fa02 f303 	lsl.w	r3, r2, r3
 8004da2:	43db      	mvns	r3, r3
 8004da4:	693a      	ldr	r2, [r7, #16]
 8004da6:	4013      	ands	r3, r2
 8004da8:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8004daa:	683b      	ldr	r3, [r7, #0]
 8004dac:	685b      	ldr	r3, [r3, #4]
 8004dae:	091b      	lsrs	r3, r3, #4
 8004db0:	f003 0201 	and.w	r2, r3, #1
 8004db4:	697b      	ldr	r3, [r7, #20]
 8004db6:	fa02 f303 	lsl.w	r3, r2, r3
 8004dba:	693a      	ldr	r2, [r7, #16]
 8004dbc:	4313      	orrs	r3, r2
 8004dbe:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8004dc0:	687b      	ldr	r3, [r7, #4]
 8004dc2:	693a      	ldr	r2, [r7, #16]
 8004dc4:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8004dc6:	687b      	ldr	r3, [r7, #4]
 8004dc8:	68db      	ldr	r3, [r3, #12]
 8004dca:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8004dcc:	697b      	ldr	r3, [r7, #20]
 8004dce:	005b      	lsls	r3, r3, #1
 8004dd0:	2203      	movs	r2, #3
 8004dd2:	fa02 f303 	lsl.w	r3, r2, r3
 8004dd6:	43db      	mvns	r3, r3
 8004dd8:	693a      	ldr	r2, [r7, #16]
 8004dda:	4013      	ands	r3, r2
 8004ddc:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8004dde:	683b      	ldr	r3, [r7, #0]
 8004de0:	689a      	ldr	r2, [r3, #8]
 8004de2:	697b      	ldr	r3, [r7, #20]
 8004de4:	005b      	lsls	r3, r3, #1
 8004de6:	fa02 f303 	lsl.w	r3, r2, r3
 8004dea:	693a      	ldr	r2, [r7, #16]
 8004dec:	4313      	orrs	r3, r2
 8004dee:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 8004df0:	687b      	ldr	r3, [r7, #4]
 8004df2:	693a      	ldr	r2, [r7, #16]
 8004df4:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8004df6:	683b      	ldr	r3, [r7, #0]
 8004df8:	685b      	ldr	r3, [r3, #4]
 8004dfa:	2b02      	cmp	r3, #2
 8004dfc:	d003      	beq.n	8004e06 <HAL_GPIO_Init+0xea>
 8004dfe:	683b      	ldr	r3, [r7, #0]
 8004e00:	685b      	ldr	r3, [r3, #4]
 8004e02:	2b12      	cmp	r3, #18
 8004e04:	d123      	bne.n	8004e4e <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8004e06:	697b      	ldr	r3, [r7, #20]
 8004e08:	08da      	lsrs	r2, r3, #3
 8004e0a:	687b      	ldr	r3, [r7, #4]
 8004e0c:	3208      	adds	r2, #8
 8004e0e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004e12:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8004e14:	697b      	ldr	r3, [r7, #20]
 8004e16:	f003 0307 	and.w	r3, r3, #7
 8004e1a:	009b      	lsls	r3, r3, #2
 8004e1c:	220f      	movs	r2, #15
 8004e1e:	fa02 f303 	lsl.w	r3, r2, r3
 8004e22:	43db      	mvns	r3, r3
 8004e24:	693a      	ldr	r2, [r7, #16]
 8004e26:	4013      	ands	r3, r2
 8004e28:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8004e2a:	683b      	ldr	r3, [r7, #0]
 8004e2c:	691a      	ldr	r2, [r3, #16]
 8004e2e:	697b      	ldr	r3, [r7, #20]
 8004e30:	f003 0307 	and.w	r3, r3, #7
 8004e34:	009b      	lsls	r3, r3, #2
 8004e36:	fa02 f303 	lsl.w	r3, r2, r3
 8004e3a:	693a      	ldr	r2, [r7, #16]
 8004e3c:	4313      	orrs	r3, r2
 8004e3e:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 8004e40:	697b      	ldr	r3, [r7, #20]
 8004e42:	08da      	lsrs	r2, r3, #3
 8004e44:	687b      	ldr	r3, [r7, #4]
 8004e46:	3208      	adds	r2, #8
 8004e48:	6939      	ldr	r1, [r7, #16]
 8004e4a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8004e4e:	687b      	ldr	r3, [r7, #4]
 8004e50:	681b      	ldr	r3, [r3, #0]
 8004e52:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8004e54:	697b      	ldr	r3, [r7, #20]
 8004e56:	005b      	lsls	r3, r3, #1
 8004e58:	2203      	movs	r2, #3
 8004e5a:	fa02 f303 	lsl.w	r3, r2, r3
 8004e5e:	43db      	mvns	r3, r3
 8004e60:	693a      	ldr	r2, [r7, #16]
 8004e62:	4013      	ands	r3, r2
 8004e64:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8004e66:	683b      	ldr	r3, [r7, #0]
 8004e68:	685b      	ldr	r3, [r3, #4]
 8004e6a:	f003 0203 	and.w	r2, r3, #3
 8004e6e:	697b      	ldr	r3, [r7, #20]
 8004e70:	005b      	lsls	r3, r3, #1
 8004e72:	fa02 f303 	lsl.w	r3, r2, r3
 8004e76:	693a      	ldr	r2, [r7, #16]
 8004e78:	4313      	orrs	r3, r2
 8004e7a:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8004e7c:	687b      	ldr	r3, [r7, #4]
 8004e7e:	693a      	ldr	r2, [r7, #16]
 8004e80:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8004e82:	683b      	ldr	r3, [r7, #0]
 8004e84:	685b      	ldr	r3, [r3, #4]
 8004e86:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004e8a:	2b00      	cmp	r3, #0
 8004e8c:	f000 80a6 	beq.w	8004fdc <HAL_GPIO_Init+0x2c0>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004e90:	4b5b      	ldr	r3, [pc, #364]	; (8005000 <HAL_GPIO_Init+0x2e4>)
 8004e92:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004e94:	4a5a      	ldr	r2, [pc, #360]	; (8005000 <HAL_GPIO_Init+0x2e4>)
 8004e96:	f043 0301 	orr.w	r3, r3, #1
 8004e9a:	6613      	str	r3, [r2, #96]	; 0x60
 8004e9c:	4b58      	ldr	r3, [pc, #352]	; (8005000 <HAL_GPIO_Init+0x2e4>)
 8004e9e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004ea0:	f003 0301 	and.w	r3, r3, #1
 8004ea4:	60bb      	str	r3, [r7, #8]
 8004ea6:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2U];
 8004ea8:	4a56      	ldr	r2, [pc, #344]	; (8005004 <HAL_GPIO_Init+0x2e8>)
 8004eaa:	697b      	ldr	r3, [r7, #20]
 8004eac:	089b      	lsrs	r3, r3, #2
 8004eae:	3302      	adds	r3, #2
 8004eb0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004eb4:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8004eb6:	697b      	ldr	r3, [r7, #20]
 8004eb8:	f003 0303 	and.w	r3, r3, #3
 8004ebc:	009b      	lsls	r3, r3, #2
 8004ebe:	220f      	movs	r2, #15
 8004ec0:	fa02 f303 	lsl.w	r3, r2, r3
 8004ec4:	43db      	mvns	r3, r3
 8004ec6:	693a      	ldr	r2, [r7, #16]
 8004ec8:	4013      	ands	r3, r2
 8004eca:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8004ecc:	687b      	ldr	r3, [r7, #4]
 8004ece:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8004ed2:	d01f      	beq.n	8004f14 <HAL_GPIO_Init+0x1f8>
 8004ed4:	687b      	ldr	r3, [r7, #4]
 8004ed6:	4a4c      	ldr	r2, [pc, #304]	; (8005008 <HAL_GPIO_Init+0x2ec>)
 8004ed8:	4293      	cmp	r3, r2
 8004eda:	d019      	beq.n	8004f10 <HAL_GPIO_Init+0x1f4>
 8004edc:	687b      	ldr	r3, [r7, #4]
 8004ede:	4a4b      	ldr	r2, [pc, #300]	; (800500c <HAL_GPIO_Init+0x2f0>)
 8004ee0:	4293      	cmp	r3, r2
 8004ee2:	d013      	beq.n	8004f0c <HAL_GPIO_Init+0x1f0>
 8004ee4:	687b      	ldr	r3, [r7, #4]
 8004ee6:	4a4a      	ldr	r2, [pc, #296]	; (8005010 <HAL_GPIO_Init+0x2f4>)
 8004ee8:	4293      	cmp	r3, r2
 8004eea:	d00d      	beq.n	8004f08 <HAL_GPIO_Init+0x1ec>
 8004eec:	687b      	ldr	r3, [r7, #4]
 8004eee:	4a49      	ldr	r2, [pc, #292]	; (8005014 <HAL_GPIO_Init+0x2f8>)
 8004ef0:	4293      	cmp	r3, r2
 8004ef2:	d007      	beq.n	8004f04 <HAL_GPIO_Init+0x1e8>
 8004ef4:	687b      	ldr	r3, [r7, #4]
 8004ef6:	4a48      	ldr	r2, [pc, #288]	; (8005018 <HAL_GPIO_Init+0x2fc>)
 8004ef8:	4293      	cmp	r3, r2
 8004efa:	d101      	bne.n	8004f00 <HAL_GPIO_Init+0x1e4>
 8004efc:	2305      	movs	r3, #5
 8004efe:	e00a      	b.n	8004f16 <HAL_GPIO_Init+0x1fa>
 8004f00:	2306      	movs	r3, #6
 8004f02:	e008      	b.n	8004f16 <HAL_GPIO_Init+0x1fa>
 8004f04:	2304      	movs	r3, #4
 8004f06:	e006      	b.n	8004f16 <HAL_GPIO_Init+0x1fa>
 8004f08:	2303      	movs	r3, #3
 8004f0a:	e004      	b.n	8004f16 <HAL_GPIO_Init+0x1fa>
 8004f0c:	2302      	movs	r3, #2
 8004f0e:	e002      	b.n	8004f16 <HAL_GPIO_Init+0x1fa>
 8004f10:	2301      	movs	r3, #1
 8004f12:	e000      	b.n	8004f16 <HAL_GPIO_Init+0x1fa>
 8004f14:	2300      	movs	r3, #0
 8004f16:	697a      	ldr	r2, [r7, #20]
 8004f18:	f002 0203 	and.w	r2, r2, #3
 8004f1c:	0092      	lsls	r2, r2, #2
 8004f1e:	4093      	lsls	r3, r2
 8004f20:	693a      	ldr	r2, [r7, #16]
 8004f22:	4313      	orrs	r3, r2
 8004f24:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8004f26:	4937      	ldr	r1, [pc, #220]	; (8005004 <HAL_GPIO_Init+0x2e8>)
 8004f28:	697b      	ldr	r3, [r7, #20]
 8004f2a:	089b      	lsrs	r3, r3, #2
 8004f2c:	3302      	adds	r3, #2
 8004f2e:	693a      	ldr	r2, [r7, #16]
 8004f30:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8004f34:	4b39      	ldr	r3, [pc, #228]	; (800501c <HAL_GPIO_Init+0x300>)
 8004f36:	681b      	ldr	r3, [r3, #0]
 8004f38:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004f3a:	68fb      	ldr	r3, [r7, #12]
 8004f3c:	43db      	mvns	r3, r3
 8004f3e:	693a      	ldr	r2, [r7, #16]
 8004f40:	4013      	ands	r3, r2
 8004f42:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8004f44:	683b      	ldr	r3, [r7, #0]
 8004f46:	685b      	ldr	r3, [r3, #4]
 8004f48:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004f4c:	2b00      	cmp	r3, #0
 8004f4e:	d003      	beq.n	8004f58 <HAL_GPIO_Init+0x23c>
        {
          temp |= iocurrent;
 8004f50:	693a      	ldr	r2, [r7, #16]
 8004f52:	68fb      	ldr	r3, [r7, #12]
 8004f54:	4313      	orrs	r3, r2
 8004f56:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8004f58:	4a30      	ldr	r2, [pc, #192]	; (800501c <HAL_GPIO_Init+0x300>)
 8004f5a:	693b      	ldr	r3, [r7, #16]
 8004f5c:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR1;
 8004f5e:	4b2f      	ldr	r3, [pc, #188]	; (800501c <HAL_GPIO_Init+0x300>)
 8004f60:	685b      	ldr	r3, [r3, #4]
 8004f62:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004f64:	68fb      	ldr	r3, [r7, #12]
 8004f66:	43db      	mvns	r3, r3
 8004f68:	693a      	ldr	r2, [r7, #16]
 8004f6a:	4013      	ands	r3, r2
 8004f6c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8004f6e:	683b      	ldr	r3, [r7, #0]
 8004f70:	685b      	ldr	r3, [r3, #4]
 8004f72:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004f76:	2b00      	cmp	r3, #0
 8004f78:	d003      	beq.n	8004f82 <HAL_GPIO_Init+0x266>
        {
          temp |= iocurrent;
 8004f7a:	693a      	ldr	r2, [r7, #16]
 8004f7c:	68fb      	ldr	r3, [r7, #12]
 8004f7e:	4313      	orrs	r3, r2
 8004f80:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8004f82:	4a26      	ldr	r2, [pc, #152]	; (800501c <HAL_GPIO_Init+0x300>)
 8004f84:	693b      	ldr	r3, [r7, #16]
 8004f86:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8004f88:	4b24      	ldr	r3, [pc, #144]	; (800501c <HAL_GPIO_Init+0x300>)
 8004f8a:	689b      	ldr	r3, [r3, #8]
 8004f8c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004f8e:	68fb      	ldr	r3, [r7, #12]
 8004f90:	43db      	mvns	r3, r3
 8004f92:	693a      	ldr	r2, [r7, #16]
 8004f94:	4013      	ands	r3, r2
 8004f96:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8004f98:	683b      	ldr	r3, [r7, #0]
 8004f9a:	685b      	ldr	r3, [r3, #4]
 8004f9c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004fa0:	2b00      	cmp	r3, #0
 8004fa2:	d003      	beq.n	8004fac <HAL_GPIO_Init+0x290>
        {
          temp |= iocurrent;
 8004fa4:	693a      	ldr	r2, [r7, #16]
 8004fa6:	68fb      	ldr	r3, [r7, #12]
 8004fa8:	4313      	orrs	r3, r2
 8004faa:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8004fac:	4a1b      	ldr	r2, [pc, #108]	; (800501c <HAL_GPIO_Init+0x300>)
 8004fae:	693b      	ldr	r3, [r7, #16]
 8004fb0:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8004fb2:	4b1a      	ldr	r3, [pc, #104]	; (800501c <HAL_GPIO_Init+0x300>)
 8004fb4:	68db      	ldr	r3, [r3, #12]
 8004fb6:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004fb8:	68fb      	ldr	r3, [r7, #12]
 8004fba:	43db      	mvns	r3, r3
 8004fbc:	693a      	ldr	r2, [r7, #16]
 8004fbe:	4013      	ands	r3, r2
 8004fc0:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8004fc2:	683b      	ldr	r3, [r7, #0]
 8004fc4:	685b      	ldr	r3, [r3, #4]
 8004fc6:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004fca:	2b00      	cmp	r3, #0
 8004fcc:	d003      	beq.n	8004fd6 <HAL_GPIO_Init+0x2ba>
        {
          temp |= iocurrent;
 8004fce:	693a      	ldr	r2, [r7, #16]
 8004fd0:	68fb      	ldr	r3, [r7, #12]
 8004fd2:	4313      	orrs	r3, r2
 8004fd4:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8004fd6:	4a11      	ldr	r2, [pc, #68]	; (800501c <HAL_GPIO_Init+0x300>)
 8004fd8:	693b      	ldr	r3, [r7, #16]
 8004fda:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 8004fdc:	697b      	ldr	r3, [r7, #20]
 8004fde:	3301      	adds	r3, #1
 8004fe0:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0U)
 8004fe2:	683b      	ldr	r3, [r7, #0]
 8004fe4:	681a      	ldr	r2, [r3, #0]
 8004fe6:	697b      	ldr	r3, [r7, #20]
 8004fe8:	fa22 f303 	lsr.w	r3, r2, r3
 8004fec:	2b00      	cmp	r3, #0
 8004fee:	f47f ae9d 	bne.w	8004d2c <HAL_GPIO_Init+0x10>
  }
}
 8004ff2:	bf00      	nop
 8004ff4:	371c      	adds	r7, #28
 8004ff6:	46bd      	mov	sp, r7
 8004ff8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ffc:	4770      	bx	lr
 8004ffe:	bf00      	nop
 8005000:	40021000 	.word	0x40021000
 8005004:	40010000 	.word	0x40010000
 8005008:	48000400 	.word	0x48000400
 800500c:	48000800 	.word	0x48000800
 8005010:	48000c00 	.word	0x48000c00
 8005014:	48001000 	.word	0x48001000
 8005018:	48001400 	.word	0x48001400
 800501c:	40010400 	.word	0x40010400

08005020 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be any combination of GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8005020:	b480      	push	{r7}
 8005022:	b085      	sub	sp, #20
 8005024:	af00      	add	r7, sp, #0
 8005026:	6078      	str	r0, [r7, #4]
 8005028:	460b      	mov	r3, r1
 800502a:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00U)
 800502c:	687b      	ldr	r3, [r7, #4]
 800502e:	691a      	ldr	r2, [r3, #16]
 8005030:	887b      	ldrh	r3, [r7, #2]
 8005032:	4013      	ands	r3, r2
 8005034:	2b00      	cmp	r3, #0
 8005036:	d002      	beq.n	800503e <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8005038:	2301      	movs	r3, #1
 800503a:	73fb      	strb	r3, [r7, #15]
 800503c:	e001      	b.n	8005042 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800503e:	2300      	movs	r3, #0
 8005040:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8005042:	7bfb      	ldrb	r3, [r7, #15]
}
 8005044:	4618      	mov	r0, r3
 8005046:	3714      	adds	r7, #20
 8005048:	46bd      	mov	sp, r7
 800504a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800504e:	4770      	bx	lr

08005050 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8005050:	b480      	push	{r7}
 8005052:	b083      	sub	sp, #12
 8005054:	af00      	add	r7, sp, #0
 8005056:	6078      	str	r0, [r7, #4]
 8005058:	460b      	mov	r3, r1
 800505a:	807b      	strh	r3, [r7, #2]
 800505c:	4613      	mov	r3, r2
 800505e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8005060:	787b      	ldrb	r3, [r7, #1]
 8005062:	2b00      	cmp	r3, #0
 8005064:	d003      	beq.n	800506e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8005066:	887a      	ldrh	r2, [r7, #2]
 8005068:	687b      	ldr	r3, [r7, #4]
 800506a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 800506c:	e002      	b.n	8005074 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 800506e:	887a      	ldrh	r2, [r7, #2]
 8005070:	687b      	ldr	r3, [r7, #4]
 8005072:	629a      	str	r2, [r3, #40]	; 0x28
}
 8005074:	bf00      	nop
 8005076:	370c      	adds	r7, #12
 8005078:	46bd      	mov	sp, r7
 800507a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800507e:	4770      	bx	lr

08005080 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8005080:	b480      	push	{r7}
 8005082:	b085      	sub	sp, #20
 8005084:	af00      	add	r7, sp, #0
 8005086:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 8005088:	687b      	ldr	r3, [r7, #4]
 800508a:	2b00      	cmp	r3, #0
 800508c:	d141      	bne.n	8005112 <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 800508e:	4b4b      	ldr	r3, [pc, #300]	; (80051bc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005090:	681b      	ldr	r3, [r3, #0]
 8005092:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8005096:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800509a:	d131      	bne.n	8005100 <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 800509c:	4b47      	ldr	r3, [pc, #284]	; (80051bc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800509e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80050a2:	4a46      	ldr	r2, [pc, #280]	; (80051bc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80050a4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80050a8:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 80050ac:	4b43      	ldr	r3, [pc, #268]	; (80051bc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80050ae:	681b      	ldr	r3, [r3, #0]
 80050b0:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80050b4:	4a41      	ldr	r2, [pc, #260]	; (80051bc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80050b6:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80050ba:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 80050bc:	4b40      	ldr	r3, [pc, #256]	; (80051c0 <HAL_PWREx_ControlVoltageScaling+0x140>)
 80050be:	681b      	ldr	r3, [r3, #0]
 80050c0:	2232      	movs	r2, #50	; 0x32
 80050c2:	fb02 f303 	mul.w	r3, r2, r3
 80050c6:	4a3f      	ldr	r2, [pc, #252]	; (80051c4 <HAL_PWREx_ControlVoltageScaling+0x144>)
 80050c8:	fba2 2303 	umull	r2, r3, r2, r3
 80050cc:	0c9b      	lsrs	r3, r3, #18
 80050ce:	3301      	adds	r3, #1
 80050d0:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80050d2:	e002      	b.n	80050da <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 80050d4:	68fb      	ldr	r3, [r7, #12]
 80050d6:	3b01      	subs	r3, #1
 80050d8:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80050da:	4b38      	ldr	r3, [pc, #224]	; (80051bc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80050dc:	695b      	ldr	r3, [r3, #20]
 80050de:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80050e2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80050e6:	d102      	bne.n	80050ee <HAL_PWREx_ControlVoltageScaling+0x6e>
 80050e8:	68fb      	ldr	r3, [r7, #12]
 80050ea:	2b00      	cmp	r3, #0
 80050ec:	d1f2      	bne.n	80050d4 <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80050ee:	4b33      	ldr	r3, [pc, #204]	; (80051bc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80050f0:	695b      	ldr	r3, [r3, #20]
 80050f2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80050f6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80050fa:	d158      	bne.n	80051ae <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 80050fc:	2303      	movs	r3, #3
 80050fe:	e057      	b.n	80051b0 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8005100:	4b2e      	ldr	r3, [pc, #184]	; (80051bc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005102:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8005106:	4a2d      	ldr	r2, [pc, #180]	; (80051bc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005108:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800510c:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 8005110:	e04d      	b.n	80051ae <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8005112:	687b      	ldr	r3, [r7, #4]
 8005114:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005118:	d141      	bne.n	800519e <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 800511a:	4b28      	ldr	r3, [pc, #160]	; (80051bc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800511c:	681b      	ldr	r3, [r3, #0]
 800511e:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8005122:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005126:	d131      	bne.n	800518c <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8005128:	4b24      	ldr	r3, [pc, #144]	; (80051bc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800512a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800512e:	4a23      	ldr	r2, [pc, #140]	; (80051bc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005130:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005134:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8005138:	4b20      	ldr	r3, [pc, #128]	; (80051bc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800513a:	681b      	ldr	r3, [r3, #0]
 800513c:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8005140:	4a1e      	ldr	r2, [pc, #120]	; (80051bc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005142:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8005146:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8005148:	4b1d      	ldr	r3, [pc, #116]	; (80051c0 <HAL_PWREx_ControlVoltageScaling+0x140>)
 800514a:	681b      	ldr	r3, [r3, #0]
 800514c:	2232      	movs	r2, #50	; 0x32
 800514e:	fb02 f303 	mul.w	r3, r2, r3
 8005152:	4a1c      	ldr	r2, [pc, #112]	; (80051c4 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8005154:	fba2 2303 	umull	r2, r3, r2, r3
 8005158:	0c9b      	lsrs	r3, r3, #18
 800515a:	3301      	adds	r3, #1
 800515c:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800515e:	e002      	b.n	8005166 <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 8005160:	68fb      	ldr	r3, [r7, #12]
 8005162:	3b01      	subs	r3, #1
 8005164:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8005166:	4b15      	ldr	r3, [pc, #84]	; (80051bc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005168:	695b      	ldr	r3, [r3, #20]
 800516a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800516e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005172:	d102      	bne.n	800517a <HAL_PWREx_ControlVoltageScaling+0xfa>
 8005174:	68fb      	ldr	r3, [r7, #12]
 8005176:	2b00      	cmp	r3, #0
 8005178:	d1f2      	bne.n	8005160 <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 800517a:	4b10      	ldr	r3, [pc, #64]	; (80051bc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800517c:	695b      	ldr	r3, [r3, #20]
 800517e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005182:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005186:	d112      	bne.n	80051ae <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8005188:	2303      	movs	r3, #3
 800518a:	e011      	b.n	80051b0 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 800518c:	4b0b      	ldr	r3, [pc, #44]	; (80051bc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800518e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8005192:	4a0a      	ldr	r2, [pc, #40]	; (80051bc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005194:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005198:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 800519c:	e007      	b.n	80051ae <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 800519e:	4b07      	ldr	r3, [pc, #28]	; (80051bc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80051a0:	681b      	ldr	r3, [r3, #0]
 80051a2:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80051a6:	4a05      	ldr	r2, [pc, #20]	; (80051bc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80051a8:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80051ac:	6013      	str	r3, [r2, #0]
    /* No need to wait for VOSF to be cleared for this transition */
    /* PWR_CR5_R1MODE bit setting has no effect in Range 2        */
  }

  return HAL_OK;
 80051ae:	2300      	movs	r3, #0
}
 80051b0:	4618      	mov	r0, r3
 80051b2:	3714      	adds	r7, #20
 80051b4:	46bd      	mov	sp, r7
 80051b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051ba:	4770      	bx	lr
 80051bc:	40007000 	.word	0x40007000
 80051c0:	2000000c 	.word	0x2000000c
 80051c4:	431bde83 	.word	0x431bde83

080051c8 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80051c8:	b580      	push	{r7, lr}
 80051ca:	b088      	sub	sp, #32
 80051cc:	af00      	add	r7, sp, #0
 80051ce:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80051d0:	687b      	ldr	r3, [r7, #4]
 80051d2:	2b00      	cmp	r3, #0
 80051d4:	d101      	bne.n	80051da <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80051d6:	2301      	movs	r3, #1
 80051d8:	e308      	b.n	80057ec <HAL_RCC_OscConfig+0x624>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80051da:	687b      	ldr	r3, [r7, #4]
 80051dc:	681b      	ldr	r3, [r3, #0]
 80051de:	f003 0301 	and.w	r3, r3, #1
 80051e2:	2b00      	cmp	r3, #0
 80051e4:	d075      	beq.n	80052d2 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80051e6:	4ba3      	ldr	r3, [pc, #652]	; (8005474 <HAL_RCC_OscConfig+0x2ac>)
 80051e8:	689b      	ldr	r3, [r3, #8]
 80051ea:	f003 030c 	and.w	r3, r3, #12
 80051ee:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 80051f0:	4ba0      	ldr	r3, [pc, #640]	; (8005474 <HAL_RCC_OscConfig+0x2ac>)
 80051f2:	68db      	ldr	r3, [r3, #12]
 80051f4:	f003 0303 	and.w	r3, r3, #3
 80051f8:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 80051fa:	69bb      	ldr	r3, [r7, #24]
 80051fc:	2b0c      	cmp	r3, #12
 80051fe:	d102      	bne.n	8005206 <HAL_RCC_OscConfig+0x3e>
 8005200:	697b      	ldr	r3, [r7, #20]
 8005202:	2b03      	cmp	r3, #3
 8005204:	d002      	beq.n	800520c <HAL_RCC_OscConfig+0x44>
 8005206:	69bb      	ldr	r3, [r7, #24]
 8005208:	2b08      	cmp	r3, #8
 800520a:	d10b      	bne.n	8005224 <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800520c:	4b99      	ldr	r3, [pc, #612]	; (8005474 <HAL_RCC_OscConfig+0x2ac>)
 800520e:	681b      	ldr	r3, [r3, #0]
 8005210:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005214:	2b00      	cmp	r3, #0
 8005216:	d05b      	beq.n	80052d0 <HAL_RCC_OscConfig+0x108>
 8005218:	687b      	ldr	r3, [r7, #4]
 800521a:	685b      	ldr	r3, [r3, #4]
 800521c:	2b00      	cmp	r3, #0
 800521e:	d157      	bne.n	80052d0 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8005220:	2301      	movs	r3, #1
 8005222:	e2e3      	b.n	80057ec <HAL_RCC_OscConfig+0x624>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8005224:	687b      	ldr	r3, [r7, #4]
 8005226:	685b      	ldr	r3, [r3, #4]
 8005228:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800522c:	d106      	bne.n	800523c <HAL_RCC_OscConfig+0x74>
 800522e:	4b91      	ldr	r3, [pc, #580]	; (8005474 <HAL_RCC_OscConfig+0x2ac>)
 8005230:	681b      	ldr	r3, [r3, #0]
 8005232:	4a90      	ldr	r2, [pc, #576]	; (8005474 <HAL_RCC_OscConfig+0x2ac>)
 8005234:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005238:	6013      	str	r3, [r2, #0]
 800523a:	e01d      	b.n	8005278 <HAL_RCC_OscConfig+0xb0>
 800523c:	687b      	ldr	r3, [r7, #4]
 800523e:	685b      	ldr	r3, [r3, #4]
 8005240:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8005244:	d10c      	bne.n	8005260 <HAL_RCC_OscConfig+0x98>
 8005246:	4b8b      	ldr	r3, [pc, #556]	; (8005474 <HAL_RCC_OscConfig+0x2ac>)
 8005248:	681b      	ldr	r3, [r3, #0]
 800524a:	4a8a      	ldr	r2, [pc, #552]	; (8005474 <HAL_RCC_OscConfig+0x2ac>)
 800524c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8005250:	6013      	str	r3, [r2, #0]
 8005252:	4b88      	ldr	r3, [pc, #544]	; (8005474 <HAL_RCC_OscConfig+0x2ac>)
 8005254:	681b      	ldr	r3, [r3, #0]
 8005256:	4a87      	ldr	r2, [pc, #540]	; (8005474 <HAL_RCC_OscConfig+0x2ac>)
 8005258:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800525c:	6013      	str	r3, [r2, #0]
 800525e:	e00b      	b.n	8005278 <HAL_RCC_OscConfig+0xb0>
 8005260:	4b84      	ldr	r3, [pc, #528]	; (8005474 <HAL_RCC_OscConfig+0x2ac>)
 8005262:	681b      	ldr	r3, [r3, #0]
 8005264:	4a83      	ldr	r2, [pc, #524]	; (8005474 <HAL_RCC_OscConfig+0x2ac>)
 8005266:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800526a:	6013      	str	r3, [r2, #0]
 800526c:	4b81      	ldr	r3, [pc, #516]	; (8005474 <HAL_RCC_OscConfig+0x2ac>)
 800526e:	681b      	ldr	r3, [r3, #0]
 8005270:	4a80      	ldr	r2, [pc, #512]	; (8005474 <HAL_RCC_OscConfig+0x2ac>)
 8005272:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8005276:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8005278:	687b      	ldr	r3, [r7, #4]
 800527a:	685b      	ldr	r3, [r3, #4]
 800527c:	2b00      	cmp	r3, #0
 800527e:	d013      	beq.n	80052a8 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005280:	f7fd fa04 	bl	800268c <HAL_GetTick>
 8005284:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8005286:	e008      	b.n	800529a <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8005288:	f7fd fa00 	bl	800268c <HAL_GetTick>
 800528c:	4602      	mov	r2, r0
 800528e:	693b      	ldr	r3, [r7, #16]
 8005290:	1ad3      	subs	r3, r2, r3
 8005292:	2b64      	cmp	r3, #100	; 0x64
 8005294:	d901      	bls.n	800529a <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8005296:	2303      	movs	r3, #3
 8005298:	e2a8      	b.n	80057ec <HAL_RCC_OscConfig+0x624>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800529a:	4b76      	ldr	r3, [pc, #472]	; (8005474 <HAL_RCC_OscConfig+0x2ac>)
 800529c:	681b      	ldr	r3, [r3, #0]
 800529e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80052a2:	2b00      	cmp	r3, #0
 80052a4:	d0f0      	beq.n	8005288 <HAL_RCC_OscConfig+0xc0>
 80052a6:	e014      	b.n	80052d2 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80052a8:	f7fd f9f0 	bl	800268c <HAL_GetTick>
 80052ac:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80052ae:	e008      	b.n	80052c2 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80052b0:	f7fd f9ec 	bl	800268c <HAL_GetTick>
 80052b4:	4602      	mov	r2, r0
 80052b6:	693b      	ldr	r3, [r7, #16]
 80052b8:	1ad3      	subs	r3, r2, r3
 80052ba:	2b64      	cmp	r3, #100	; 0x64
 80052bc:	d901      	bls.n	80052c2 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80052be:	2303      	movs	r3, #3
 80052c0:	e294      	b.n	80057ec <HAL_RCC_OscConfig+0x624>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80052c2:	4b6c      	ldr	r3, [pc, #432]	; (8005474 <HAL_RCC_OscConfig+0x2ac>)
 80052c4:	681b      	ldr	r3, [r3, #0]
 80052c6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80052ca:	2b00      	cmp	r3, #0
 80052cc:	d1f0      	bne.n	80052b0 <HAL_RCC_OscConfig+0xe8>
 80052ce:	e000      	b.n	80052d2 <HAL_RCC_OscConfig+0x10a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80052d0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80052d2:	687b      	ldr	r3, [r7, #4]
 80052d4:	681b      	ldr	r3, [r3, #0]
 80052d6:	f003 0302 	and.w	r3, r3, #2
 80052da:	2b00      	cmp	r3, #0
 80052dc:	d075      	beq.n	80053ca <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80052de:	4b65      	ldr	r3, [pc, #404]	; (8005474 <HAL_RCC_OscConfig+0x2ac>)
 80052e0:	689b      	ldr	r3, [r3, #8]
 80052e2:	f003 030c 	and.w	r3, r3, #12
 80052e6:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 80052e8:	4b62      	ldr	r3, [pc, #392]	; (8005474 <HAL_RCC_OscConfig+0x2ac>)
 80052ea:	68db      	ldr	r3, [r3, #12]
 80052ec:	f003 0303 	and.w	r3, r3, #3
 80052f0:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 80052f2:	69bb      	ldr	r3, [r7, #24]
 80052f4:	2b0c      	cmp	r3, #12
 80052f6:	d102      	bne.n	80052fe <HAL_RCC_OscConfig+0x136>
 80052f8:	697b      	ldr	r3, [r7, #20]
 80052fa:	2b02      	cmp	r3, #2
 80052fc:	d002      	beq.n	8005304 <HAL_RCC_OscConfig+0x13c>
 80052fe:	69bb      	ldr	r3, [r7, #24]
 8005300:	2b04      	cmp	r3, #4
 8005302:	d11f      	bne.n	8005344 <HAL_RCC_OscConfig+0x17c>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8005304:	4b5b      	ldr	r3, [pc, #364]	; (8005474 <HAL_RCC_OscConfig+0x2ac>)
 8005306:	681b      	ldr	r3, [r3, #0]
 8005308:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800530c:	2b00      	cmp	r3, #0
 800530e:	d005      	beq.n	800531c <HAL_RCC_OscConfig+0x154>
 8005310:	687b      	ldr	r3, [r7, #4]
 8005312:	68db      	ldr	r3, [r3, #12]
 8005314:	2b00      	cmp	r3, #0
 8005316:	d101      	bne.n	800531c <HAL_RCC_OscConfig+0x154>
      {
        return HAL_ERROR;
 8005318:	2301      	movs	r3, #1
 800531a:	e267      	b.n	80057ec <HAL_RCC_OscConfig+0x624>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800531c:	4b55      	ldr	r3, [pc, #340]	; (8005474 <HAL_RCC_OscConfig+0x2ac>)
 800531e:	685b      	ldr	r3, [r3, #4]
 8005320:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8005324:	687b      	ldr	r3, [r7, #4]
 8005326:	691b      	ldr	r3, [r3, #16]
 8005328:	061b      	lsls	r3, r3, #24
 800532a:	4952      	ldr	r1, [pc, #328]	; (8005474 <HAL_RCC_OscConfig+0x2ac>)
 800532c:	4313      	orrs	r3, r2
 800532e:	604b      	str	r3, [r1, #4]

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8005330:	4b51      	ldr	r3, [pc, #324]	; (8005478 <HAL_RCC_OscConfig+0x2b0>)
 8005332:	681b      	ldr	r3, [r3, #0]
 8005334:	4618      	mov	r0, r3
 8005336:	f7fd f95d 	bl	80025f4 <HAL_InitTick>
 800533a:	4603      	mov	r3, r0
 800533c:	2b00      	cmp	r3, #0
 800533e:	d043      	beq.n	80053c8 <HAL_RCC_OscConfig+0x200>
        {
          return HAL_ERROR;
 8005340:	2301      	movs	r3, #1
 8005342:	e253      	b.n	80057ec <HAL_RCC_OscConfig+0x624>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8005344:	687b      	ldr	r3, [r7, #4]
 8005346:	68db      	ldr	r3, [r3, #12]
 8005348:	2b00      	cmp	r3, #0
 800534a:	d023      	beq.n	8005394 <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800534c:	4b49      	ldr	r3, [pc, #292]	; (8005474 <HAL_RCC_OscConfig+0x2ac>)
 800534e:	681b      	ldr	r3, [r3, #0]
 8005350:	4a48      	ldr	r2, [pc, #288]	; (8005474 <HAL_RCC_OscConfig+0x2ac>)
 8005352:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005356:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005358:	f7fd f998 	bl	800268c <HAL_GetTick>
 800535c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800535e:	e008      	b.n	8005372 <HAL_RCC_OscConfig+0x1aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8005360:	f7fd f994 	bl	800268c <HAL_GetTick>
 8005364:	4602      	mov	r2, r0
 8005366:	693b      	ldr	r3, [r7, #16]
 8005368:	1ad3      	subs	r3, r2, r3
 800536a:	2b02      	cmp	r3, #2
 800536c:	d901      	bls.n	8005372 <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 800536e:	2303      	movs	r3, #3
 8005370:	e23c      	b.n	80057ec <HAL_RCC_OscConfig+0x624>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8005372:	4b40      	ldr	r3, [pc, #256]	; (8005474 <HAL_RCC_OscConfig+0x2ac>)
 8005374:	681b      	ldr	r3, [r3, #0]
 8005376:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800537a:	2b00      	cmp	r3, #0
 800537c:	d0f0      	beq.n	8005360 <HAL_RCC_OscConfig+0x198>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800537e:	4b3d      	ldr	r3, [pc, #244]	; (8005474 <HAL_RCC_OscConfig+0x2ac>)
 8005380:	685b      	ldr	r3, [r3, #4]
 8005382:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8005386:	687b      	ldr	r3, [r7, #4]
 8005388:	691b      	ldr	r3, [r3, #16]
 800538a:	061b      	lsls	r3, r3, #24
 800538c:	4939      	ldr	r1, [pc, #228]	; (8005474 <HAL_RCC_OscConfig+0x2ac>)
 800538e:	4313      	orrs	r3, r2
 8005390:	604b      	str	r3, [r1, #4]
 8005392:	e01a      	b.n	80053ca <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8005394:	4b37      	ldr	r3, [pc, #220]	; (8005474 <HAL_RCC_OscConfig+0x2ac>)
 8005396:	681b      	ldr	r3, [r3, #0]
 8005398:	4a36      	ldr	r2, [pc, #216]	; (8005474 <HAL_RCC_OscConfig+0x2ac>)
 800539a:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800539e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80053a0:	f7fd f974 	bl	800268c <HAL_GetTick>
 80053a4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80053a6:	e008      	b.n	80053ba <HAL_RCC_OscConfig+0x1f2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80053a8:	f7fd f970 	bl	800268c <HAL_GetTick>
 80053ac:	4602      	mov	r2, r0
 80053ae:	693b      	ldr	r3, [r7, #16]
 80053b0:	1ad3      	subs	r3, r2, r3
 80053b2:	2b02      	cmp	r3, #2
 80053b4:	d901      	bls.n	80053ba <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 80053b6:	2303      	movs	r3, #3
 80053b8:	e218      	b.n	80057ec <HAL_RCC_OscConfig+0x624>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80053ba:	4b2e      	ldr	r3, [pc, #184]	; (8005474 <HAL_RCC_OscConfig+0x2ac>)
 80053bc:	681b      	ldr	r3, [r3, #0]
 80053be:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80053c2:	2b00      	cmp	r3, #0
 80053c4:	d1f0      	bne.n	80053a8 <HAL_RCC_OscConfig+0x1e0>
 80053c6:	e000      	b.n	80053ca <HAL_RCC_OscConfig+0x202>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80053c8:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80053ca:	687b      	ldr	r3, [r7, #4]
 80053cc:	681b      	ldr	r3, [r3, #0]
 80053ce:	f003 0308 	and.w	r3, r3, #8
 80053d2:	2b00      	cmp	r3, #0
 80053d4:	d03c      	beq.n	8005450 <HAL_RCC_OscConfig+0x288>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80053d6:	687b      	ldr	r3, [r7, #4]
 80053d8:	695b      	ldr	r3, [r3, #20]
 80053da:	2b00      	cmp	r3, #0
 80053dc:	d01c      	beq.n	8005418 <HAL_RCC_OscConfig+0x250>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80053de:	4b25      	ldr	r3, [pc, #148]	; (8005474 <HAL_RCC_OscConfig+0x2ac>)
 80053e0:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80053e4:	4a23      	ldr	r2, [pc, #140]	; (8005474 <HAL_RCC_OscConfig+0x2ac>)
 80053e6:	f043 0301 	orr.w	r3, r3, #1
 80053ea:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80053ee:	f7fd f94d 	bl	800268c <HAL_GetTick>
 80053f2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80053f4:	e008      	b.n	8005408 <HAL_RCC_OscConfig+0x240>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80053f6:	f7fd f949 	bl	800268c <HAL_GetTick>
 80053fa:	4602      	mov	r2, r0
 80053fc:	693b      	ldr	r3, [r7, #16]
 80053fe:	1ad3      	subs	r3, r2, r3
 8005400:	2b02      	cmp	r3, #2
 8005402:	d901      	bls.n	8005408 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8005404:	2303      	movs	r3, #3
 8005406:	e1f1      	b.n	80057ec <HAL_RCC_OscConfig+0x624>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8005408:	4b1a      	ldr	r3, [pc, #104]	; (8005474 <HAL_RCC_OscConfig+0x2ac>)
 800540a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800540e:	f003 0302 	and.w	r3, r3, #2
 8005412:	2b00      	cmp	r3, #0
 8005414:	d0ef      	beq.n	80053f6 <HAL_RCC_OscConfig+0x22e>
 8005416:	e01b      	b.n	8005450 <HAL_RCC_OscConfig+0x288>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8005418:	4b16      	ldr	r3, [pc, #88]	; (8005474 <HAL_RCC_OscConfig+0x2ac>)
 800541a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800541e:	4a15      	ldr	r2, [pc, #84]	; (8005474 <HAL_RCC_OscConfig+0x2ac>)
 8005420:	f023 0301 	bic.w	r3, r3, #1
 8005424:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005428:	f7fd f930 	bl	800268c <HAL_GetTick>
 800542c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800542e:	e008      	b.n	8005442 <HAL_RCC_OscConfig+0x27a>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8005430:	f7fd f92c 	bl	800268c <HAL_GetTick>
 8005434:	4602      	mov	r2, r0
 8005436:	693b      	ldr	r3, [r7, #16]
 8005438:	1ad3      	subs	r3, r2, r3
 800543a:	2b02      	cmp	r3, #2
 800543c:	d901      	bls.n	8005442 <HAL_RCC_OscConfig+0x27a>
        {
          return HAL_TIMEOUT;
 800543e:	2303      	movs	r3, #3
 8005440:	e1d4      	b.n	80057ec <HAL_RCC_OscConfig+0x624>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8005442:	4b0c      	ldr	r3, [pc, #48]	; (8005474 <HAL_RCC_OscConfig+0x2ac>)
 8005444:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8005448:	f003 0302 	and.w	r3, r3, #2
 800544c:	2b00      	cmp	r3, #0
 800544e:	d1ef      	bne.n	8005430 <HAL_RCC_OscConfig+0x268>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8005450:	687b      	ldr	r3, [r7, #4]
 8005452:	681b      	ldr	r3, [r3, #0]
 8005454:	f003 0304 	and.w	r3, r3, #4
 8005458:	2b00      	cmp	r3, #0
 800545a:	f000 80ab 	beq.w	80055b4 <HAL_RCC_OscConfig+0x3ec>
  {
    FlagStatus       pwrclkchanged = RESET;
 800545e:	2300      	movs	r3, #0
 8005460:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain if necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8005462:	4b04      	ldr	r3, [pc, #16]	; (8005474 <HAL_RCC_OscConfig+0x2ac>)
 8005464:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005466:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800546a:	2b00      	cmp	r3, #0
 800546c:	d106      	bne.n	800547c <HAL_RCC_OscConfig+0x2b4>
 800546e:	2301      	movs	r3, #1
 8005470:	e005      	b.n	800547e <HAL_RCC_OscConfig+0x2b6>
 8005472:	bf00      	nop
 8005474:	40021000 	.word	0x40021000
 8005478:	20000010 	.word	0x20000010
 800547c:	2300      	movs	r3, #0
 800547e:	2b00      	cmp	r3, #0
 8005480:	d00d      	beq.n	800549e <HAL_RCC_OscConfig+0x2d6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8005482:	4baf      	ldr	r3, [pc, #700]	; (8005740 <HAL_RCC_OscConfig+0x578>)
 8005484:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005486:	4aae      	ldr	r2, [pc, #696]	; (8005740 <HAL_RCC_OscConfig+0x578>)
 8005488:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800548c:	6593      	str	r3, [r2, #88]	; 0x58
 800548e:	4bac      	ldr	r3, [pc, #688]	; (8005740 <HAL_RCC_OscConfig+0x578>)
 8005490:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005492:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005496:	60fb      	str	r3, [r7, #12]
 8005498:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 800549a:	2301      	movs	r3, #1
 800549c:	77fb      	strb	r3, [r7, #31]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800549e:	4ba9      	ldr	r3, [pc, #676]	; (8005744 <HAL_RCC_OscConfig+0x57c>)
 80054a0:	681b      	ldr	r3, [r3, #0]
 80054a2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80054a6:	2b00      	cmp	r3, #0
 80054a8:	d118      	bne.n	80054dc <HAL_RCC_OscConfig+0x314>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80054aa:	4ba6      	ldr	r3, [pc, #664]	; (8005744 <HAL_RCC_OscConfig+0x57c>)
 80054ac:	681b      	ldr	r3, [r3, #0]
 80054ae:	4aa5      	ldr	r2, [pc, #660]	; (8005744 <HAL_RCC_OscConfig+0x57c>)
 80054b0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80054b4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80054b6:	f7fd f8e9 	bl	800268c <HAL_GetTick>
 80054ba:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80054bc:	e008      	b.n	80054d0 <HAL_RCC_OscConfig+0x308>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80054be:	f7fd f8e5 	bl	800268c <HAL_GetTick>
 80054c2:	4602      	mov	r2, r0
 80054c4:	693b      	ldr	r3, [r7, #16]
 80054c6:	1ad3      	subs	r3, r2, r3
 80054c8:	2b02      	cmp	r3, #2
 80054ca:	d901      	bls.n	80054d0 <HAL_RCC_OscConfig+0x308>
        {
          return HAL_TIMEOUT;
 80054cc:	2303      	movs	r3, #3
 80054ce:	e18d      	b.n	80057ec <HAL_RCC_OscConfig+0x624>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80054d0:	4b9c      	ldr	r3, [pc, #624]	; (8005744 <HAL_RCC_OscConfig+0x57c>)
 80054d2:	681b      	ldr	r3, [r3, #0]
 80054d4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80054d8:	2b00      	cmp	r3, #0
 80054da:	d0f0      	beq.n	80054be <HAL_RCC_OscConfig+0x2f6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80054dc:	687b      	ldr	r3, [r7, #4]
 80054de:	689b      	ldr	r3, [r3, #8]
 80054e0:	2b01      	cmp	r3, #1
 80054e2:	d108      	bne.n	80054f6 <HAL_RCC_OscConfig+0x32e>
 80054e4:	4b96      	ldr	r3, [pc, #600]	; (8005740 <HAL_RCC_OscConfig+0x578>)
 80054e6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80054ea:	4a95      	ldr	r2, [pc, #596]	; (8005740 <HAL_RCC_OscConfig+0x578>)
 80054ec:	f043 0301 	orr.w	r3, r3, #1
 80054f0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80054f4:	e024      	b.n	8005540 <HAL_RCC_OscConfig+0x378>
 80054f6:	687b      	ldr	r3, [r7, #4]
 80054f8:	689b      	ldr	r3, [r3, #8]
 80054fa:	2b05      	cmp	r3, #5
 80054fc:	d110      	bne.n	8005520 <HAL_RCC_OscConfig+0x358>
 80054fe:	4b90      	ldr	r3, [pc, #576]	; (8005740 <HAL_RCC_OscConfig+0x578>)
 8005500:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005504:	4a8e      	ldr	r2, [pc, #568]	; (8005740 <HAL_RCC_OscConfig+0x578>)
 8005506:	f043 0304 	orr.w	r3, r3, #4
 800550a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800550e:	4b8c      	ldr	r3, [pc, #560]	; (8005740 <HAL_RCC_OscConfig+0x578>)
 8005510:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005514:	4a8a      	ldr	r2, [pc, #552]	; (8005740 <HAL_RCC_OscConfig+0x578>)
 8005516:	f043 0301 	orr.w	r3, r3, #1
 800551a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800551e:	e00f      	b.n	8005540 <HAL_RCC_OscConfig+0x378>
 8005520:	4b87      	ldr	r3, [pc, #540]	; (8005740 <HAL_RCC_OscConfig+0x578>)
 8005522:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005526:	4a86      	ldr	r2, [pc, #536]	; (8005740 <HAL_RCC_OscConfig+0x578>)
 8005528:	f023 0301 	bic.w	r3, r3, #1
 800552c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8005530:	4b83      	ldr	r3, [pc, #524]	; (8005740 <HAL_RCC_OscConfig+0x578>)
 8005532:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005536:	4a82      	ldr	r2, [pc, #520]	; (8005740 <HAL_RCC_OscConfig+0x578>)
 8005538:	f023 0304 	bic.w	r3, r3, #4
 800553c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8005540:	687b      	ldr	r3, [r7, #4]
 8005542:	689b      	ldr	r3, [r3, #8]
 8005544:	2b00      	cmp	r3, #0
 8005546:	d016      	beq.n	8005576 <HAL_RCC_OscConfig+0x3ae>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005548:	f7fd f8a0 	bl	800268c <HAL_GetTick>
 800554c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800554e:	e00a      	b.n	8005566 <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005550:	f7fd f89c 	bl	800268c <HAL_GetTick>
 8005554:	4602      	mov	r2, r0
 8005556:	693b      	ldr	r3, [r7, #16]
 8005558:	1ad3      	subs	r3, r2, r3
 800555a:	f241 3288 	movw	r2, #5000	; 0x1388
 800555e:	4293      	cmp	r3, r2
 8005560:	d901      	bls.n	8005566 <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 8005562:	2303      	movs	r3, #3
 8005564:	e142      	b.n	80057ec <HAL_RCC_OscConfig+0x624>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8005566:	4b76      	ldr	r3, [pc, #472]	; (8005740 <HAL_RCC_OscConfig+0x578>)
 8005568:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800556c:	f003 0302 	and.w	r3, r3, #2
 8005570:	2b00      	cmp	r3, #0
 8005572:	d0ed      	beq.n	8005550 <HAL_RCC_OscConfig+0x388>
 8005574:	e015      	b.n	80055a2 <HAL_RCC_OscConfig+0x3da>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005576:	f7fd f889 	bl	800268c <HAL_GetTick>
 800557a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800557c:	e00a      	b.n	8005594 <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800557e:	f7fd f885 	bl	800268c <HAL_GetTick>
 8005582:	4602      	mov	r2, r0
 8005584:	693b      	ldr	r3, [r7, #16]
 8005586:	1ad3      	subs	r3, r2, r3
 8005588:	f241 3288 	movw	r2, #5000	; 0x1388
 800558c:	4293      	cmp	r3, r2
 800558e:	d901      	bls.n	8005594 <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 8005590:	2303      	movs	r3, #3
 8005592:	e12b      	b.n	80057ec <HAL_RCC_OscConfig+0x624>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8005594:	4b6a      	ldr	r3, [pc, #424]	; (8005740 <HAL_RCC_OscConfig+0x578>)
 8005596:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800559a:	f003 0302 	and.w	r3, r3, #2
 800559e:	2b00      	cmp	r3, #0
 80055a0:	d1ed      	bne.n	800557e <HAL_RCC_OscConfig+0x3b6>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 80055a2:	7ffb      	ldrb	r3, [r7, #31]
 80055a4:	2b01      	cmp	r3, #1
 80055a6:	d105      	bne.n	80055b4 <HAL_RCC_OscConfig+0x3ec>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80055a8:	4b65      	ldr	r3, [pc, #404]	; (8005740 <HAL_RCC_OscConfig+0x578>)
 80055aa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80055ac:	4a64      	ldr	r2, [pc, #400]	; (8005740 <HAL_RCC_OscConfig+0x578>)
 80055ae:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80055b2:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 80055b4:	687b      	ldr	r3, [r7, #4]
 80055b6:	681b      	ldr	r3, [r3, #0]
 80055b8:	f003 0320 	and.w	r3, r3, #32
 80055bc:	2b00      	cmp	r3, #0
 80055be:	d03c      	beq.n	800563a <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 80055c0:	687b      	ldr	r3, [r7, #4]
 80055c2:	699b      	ldr	r3, [r3, #24]
 80055c4:	2b00      	cmp	r3, #0
 80055c6:	d01c      	beq.n	8005602 <HAL_RCC_OscConfig+0x43a>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 80055c8:	4b5d      	ldr	r3, [pc, #372]	; (8005740 <HAL_RCC_OscConfig+0x578>)
 80055ca:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80055ce:	4a5c      	ldr	r2, [pc, #368]	; (8005740 <HAL_RCC_OscConfig+0x578>)
 80055d0:	f043 0301 	orr.w	r3, r3, #1
 80055d4:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80055d8:	f7fd f858 	bl	800268c <HAL_GetTick>
 80055dc:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 80055de:	e008      	b.n	80055f2 <HAL_RCC_OscConfig+0x42a>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80055e0:	f7fd f854 	bl	800268c <HAL_GetTick>
 80055e4:	4602      	mov	r2, r0
 80055e6:	693b      	ldr	r3, [r7, #16]
 80055e8:	1ad3      	subs	r3, r2, r3
 80055ea:	2b02      	cmp	r3, #2
 80055ec:	d901      	bls.n	80055f2 <HAL_RCC_OscConfig+0x42a>
        {
          return HAL_TIMEOUT;
 80055ee:	2303      	movs	r3, #3
 80055f0:	e0fc      	b.n	80057ec <HAL_RCC_OscConfig+0x624>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 80055f2:	4b53      	ldr	r3, [pc, #332]	; (8005740 <HAL_RCC_OscConfig+0x578>)
 80055f4:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80055f8:	f003 0302 	and.w	r3, r3, #2
 80055fc:	2b00      	cmp	r3, #0
 80055fe:	d0ef      	beq.n	80055e0 <HAL_RCC_OscConfig+0x418>
 8005600:	e01b      	b.n	800563a <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8005602:	4b4f      	ldr	r3, [pc, #316]	; (8005740 <HAL_RCC_OscConfig+0x578>)
 8005604:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8005608:	4a4d      	ldr	r2, [pc, #308]	; (8005740 <HAL_RCC_OscConfig+0x578>)
 800560a:	f023 0301 	bic.w	r3, r3, #1
 800560e:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005612:	f7fd f83b 	bl	800268c <HAL_GetTick>
 8005616:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8005618:	e008      	b.n	800562c <HAL_RCC_OscConfig+0x464>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800561a:	f7fd f837 	bl	800268c <HAL_GetTick>
 800561e:	4602      	mov	r2, r0
 8005620:	693b      	ldr	r3, [r7, #16]
 8005622:	1ad3      	subs	r3, r2, r3
 8005624:	2b02      	cmp	r3, #2
 8005626:	d901      	bls.n	800562c <HAL_RCC_OscConfig+0x464>
        {
          return HAL_TIMEOUT;
 8005628:	2303      	movs	r3, #3
 800562a:	e0df      	b.n	80057ec <HAL_RCC_OscConfig+0x624>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 800562c:	4b44      	ldr	r3, [pc, #272]	; (8005740 <HAL_RCC_OscConfig+0x578>)
 800562e:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8005632:	f003 0302 	and.w	r3, r3, #2
 8005636:	2b00      	cmp	r3, #0
 8005638:	d1ef      	bne.n	800561a <HAL_RCC_OscConfig+0x452>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 800563a:	687b      	ldr	r3, [r7, #4]
 800563c:	69db      	ldr	r3, [r3, #28]
 800563e:	2b00      	cmp	r3, #0
 8005640:	f000 80d3 	beq.w	80057ea <HAL_RCC_OscConfig+0x622>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8005644:	4b3e      	ldr	r3, [pc, #248]	; (8005740 <HAL_RCC_OscConfig+0x578>)
 8005646:	689b      	ldr	r3, [r3, #8]
 8005648:	f003 030c 	and.w	r3, r3, #12
 800564c:	2b0c      	cmp	r3, #12
 800564e:	f000 808d 	beq.w	800576c <HAL_RCC_OscConfig+0x5a4>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8005652:	687b      	ldr	r3, [r7, #4]
 8005654:	69db      	ldr	r3, [r3, #28]
 8005656:	2b02      	cmp	r3, #2
 8005658:	d15a      	bne.n	8005710 <HAL_RCC_OscConfig+0x548>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800565a:	4b39      	ldr	r3, [pc, #228]	; (8005740 <HAL_RCC_OscConfig+0x578>)
 800565c:	681b      	ldr	r3, [r3, #0]
 800565e:	4a38      	ldr	r2, [pc, #224]	; (8005740 <HAL_RCC_OscConfig+0x578>)
 8005660:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8005664:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005666:	f7fd f811 	bl	800268c <HAL_GetTick>
 800566a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800566c:	e008      	b.n	8005680 <HAL_RCC_OscConfig+0x4b8>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800566e:	f7fd f80d 	bl	800268c <HAL_GetTick>
 8005672:	4602      	mov	r2, r0
 8005674:	693b      	ldr	r3, [r7, #16]
 8005676:	1ad3      	subs	r3, r2, r3
 8005678:	2b02      	cmp	r3, #2
 800567a:	d901      	bls.n	8005680 <HAL_RCC_OscConfig+0x4b8>
          {
            return HAL_TIMEOUT;
 800567c:	2303      	movs	r3, #3
 800567e:	e0b5      	b.n	80057ec <HAL_RCC_OscConfig+0x624>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8005680:	4b2f      	ldr	r3, [pc, #188]	; (8005740 <HAL_RCC_OscConfig+0x578>)
 8005682:	681b      	ldr	r3, [r3, #0]
 8005684:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005688:	2b00      	cmp	r3, #0
 800568a:	d1f0      	bne.n	800566e <HAL_RCC_OscConfig+0x4a6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800568c:	4b2c      	ldr	r3, [pc, #176]	; (8005740 <HAL_RCC_OscConfig+0x578>)
 800568e:	68da      	ldr	r2, [r3, #12]
 8005690:	4b2d      	ldr	r3, [pc, #180]	; (8005748 <HAL_RCC_OscConfig+0x580>)
 8005692:	4013      	ands	r3, r2
 8005694:	687a      	ldr	r2, [r7, #4]
 8005696:	6a11      	ldr	r1, [r2, #32]
 8005698:	687a      	ldr	r2, [r7, #4]
 800569a:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800569c:	3a01      	subs	r2, #1
 800569e:	0112      	lsls	r2, r2, #4
 80056a0:	4311      	orrs	r1, r2
 80056a2:	687a      	ldr	r2, [r7, #4]
 80056a4:	6a92      	ldr	r2, [r2, #40]	; 0x28
 80056a6:	0212      	lsls	r2, r2, #8
 80056a8:	4311      	orrs	r1, r2
 80056aa:	687a      	ldr	r2, [r7, #4]
 80056ac:	6b12      	ldr	r2, [r2, #48]	; 0x30
 80056ae:	0852      	lsrs	r2, r2, #1
 80056b0:	3a01      	subs	r2, #1
 80056b2:	0552      	lsls	r2, r2, #21
 80056b4:	4311      	orrs	r1, r2
 80056b6:	687a      	ldr	r2, [r7, #4]
 80056b8:	6b52      	ldr	r2, [r2, #52]	; 0x34
 80056ba:	0852      	lsrs	r2, r2, #1
 80056bc:	3a01      	subs	r2, #1
 80056be:	0652      	lsls	r2, r2, #25
 80056c0:	4311      	orrs	r1, r2
 80056c2:	687a      	ldr	r2, [r7, #4]
 80056c4:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 80056c6:	06d2      	lsls	r2, r2, #27
 80056c8:	430a      	orrs	r2, r1
 80056ca:	491d      	ldr	r1, [pc, #116]	; (8005740 <HAL_RCC_OscConfig+0x578>)
 80056cc:	4313      	orrs	r3, r2
 80056ce:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80056d0:	4b1b      	ldr	r3, [pc, #108]	; (8005740 <HAL_RCC_OscConfig+0x578>)
 80056d2:	681b      	ldr	r3, [r3, #0]
 80056d4:	4a1a      	ldr	r2, [pc, #104]	; (8005740 <HAL_RCC_OscConfig+0x578>)
 80056d6:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80056da:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80056dc:	4b18      	ldr	r3, [pc, #96]	; (8005740 <HAL_RCC_OscConfig+0x578>)
 80056de:	68db      	ldr	r3, [r3, #12]
 80056e0:	4a17      	ldr	r2, [pc, #92]	; (8005740 <HAL_RCC_OscConfig+0x578>)
 80056e2:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80056e6:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80056e8:	f7fc ffd0 	bl	800268c <HAL_GetTick>
 80056ec:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80056ee:	e008      	b.n	8005702 <HAL_RCC_OscConfig+0x53a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80056f0:	f7fc ffcc 	bl	800268c <HAL_GetTick>
 80056f4:	4602      	mov	r2, r0
 80056f6:	693b      	ldr	r3, [r7, #16]
 80056f8:	1ad3      	subs	r3, r2, r3
 80056fa:	2b02      	cmp	r3, #2
 80056fc:	d901      	bls.n	8005702 <HAL_RCC_OscConfig+0x53a>
          {
            return HAL_TIMEOUT;
 80056fe:	2303      	movs	r3, #3
 8005700:	e074      	b.n	80057ec <HAL_RCC_OscConfig+0x624>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8005702:	4b0f      	ldr	r3, [pc, #60]	; (8005740 <HAL_RCC_OscConfig+0x578>)
 8005704:	681b      	ldr	r3, [r3, #0]
 8005706:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800570a:	2b00      	cmp	r3, #0
 800570c:	d0f0      	beq.n	80056f0 <HAL_RCC_OscConfig+0x528>
 800570e:	e06c      	b.n	80057ea <HAL_RCC_OscConfig+0x622>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005710:	4b0b      	ldr	r3, [pc, #44]	; (8005740 <HAL_RCC_OscConfig+0x578>)
 8005712:	681b      	ldr	r3, [r3, #0]
 8005714:	4a0a      	ldr	r2, [pc, #40]	; (8005740 <HAL_RCC_OscConfig+0x578>)
 8005716:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800571a:	6013      	str	r3, [r2, #0]

        /* Disable all PLL outputs to save power if no PLLs on */
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 800571c:	4b08      	ldr	r3, [pc, #32]	; (8005740 <HAL_RCC_OscConfig+0x578>)
 800571e:	68db      	ldr	r3, [r3, #12]
 8005720:	4a07      	ldr	r2, [pc, #28]	; (8005740 <HAL_RCC_OscConfig+0x578>)
 8005722:	f023 0303 	bic.w	r3, r3, #3
 8005726:	60d3      	str	r3, [r2, #12]
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_ADCCLK);
 8005728:	4b05      	ldr	r3, [pc, #20]	; (8005740 <HAL_RCC_OscConfig+0x578>)
 800572a:	68db      	ldr	r3, [r3, #12]
 800572c:	4a04      	ldr	r2, [pc, #16]	; (8005740 <HAL_RCC_OscConfig+0x578>)
 800572e:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 8005732:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005736:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005738:	f7fc ffa8 	bl	800268c <HAL_GetTick>
 800573c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800573e:	e00e      	b.n	800575e <HAL_RCC_OscConfig+0x596>
 8005740:	40021000 	.word	0x40021000
 8005744:	40007000 	.word	0x40007000
 8005748:	019f800c 	.word	0x019f800c
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800574c:	f7fc ff9e 	bl	800268c <HAL_GetTick>
 8005750:	4602      	mov	r2, r0
 8005752:	693b      	ldr	r3, [r7, #16]
 8005754:	1ad3      	subs	r3, r2, r3
 8005756:	2b02      	cmp	r3, #2
 8005758:	d901      	bls.n	800575e <HAL_RCC_OscConfig+0x596>
          {
            return HAL_TIMEOUT;
 800575a:	2303      	movs	r3, #3
 800575c:	e046      	b.n	80057ec <HAL_RCC_OscConfig+0x624>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800575e:	4b25      	ldr	r3, [pc, #148]	; (80057f4 <HAL_RCC_OscConfig+0x62c>)
 8005760:	681b      	ldr	r3, [r3, #0]
 8005762:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005766:	2b00      	cmp	r3, #0
 8005768:	d1f0      	bne.n	800574c <HAL_RCC_OscConfig+0x584>
 800576a:	e03e      	b.n	80057ea <HAL_RCC_OscConfig+0x622>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800576c:	687b      	ldr	r3, [r7, #4]
 800576e:	69db      	ldr	r3, [r3, #28]
 8005770:	2b01      	cmp	r3, #1
 8005772:	d101      	bne.n	8005778 <HAL_RCC_OscConfig+0x5b0>
      {
        return HAL_ERROR;
 8005774:	2301      	movs	r3, #1
 8005776:	e039      	b.n	80057ec <HAL_RCC_OscConfig+0x624>
      }
      else
      {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp_pllckcfg = RCC->PLLCFGR;
 8005778:	4b1e      	ldr	r3, [pc, #120]	; (80057f4 <HAL_RCC_OscConfig+0x62c>)
 800577a:	68db      	ldr	r3, [r3, #12]
 800577c:	617b      	str	r3, [r7, #20]
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800577e:	697b      	ldr	r3, [r7, #20]
 8005780:	f003 0203 	and.w	r2, r3, #3
 8005784:	687b      	ldr	r3, [r7, #4]
 8005786:	6a1b      	ldr	r3, [r3, #32]
 8005788:	429a      	cmp	r2, r3
 800578a:	d12c      	bne.n	80057e6 <HAL_RCC_OscConfig+0x61e>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800578c:	697b      	ldr	r3, [r7, #20]
 800578e:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8005792:	687b      	ldr	r3, [r7, #4]
 8005794:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005796:	3b01      	subs	r3, #1
 8005798:	011b      	lsls	r3, r3, #4
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800579a:	429a      	cmp	r2, r3
 800579c:	d123      	bne.n	80057e6 <HAL_RCC_OscConfig+0x61e>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 800579e:	697b      	ldr	r3, [r7, #20]
 80057a0:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 80057a4:	687b      	ldr	r3, [r7, #4]
 80057a6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80057a8:	021b      	lsls	r3, r3, #8
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80057aa:	429a      	cmp	r2, r3
 80057ac:	d11b      	bne.n	80057e6 <HAL_RCC_OscConfig+0x61e>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 80057ae:	697b      	ldr	r3, [r7, #20]
 80057b0:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 80057b4:	687b      	ldr	r3, [r7, #4]
 80057b6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80057b8:	06db      	lsls	r3, r3, #27
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 80057ba:	429a      	cmp	r2, r3
 80057bc:	d113      	bne.n	80057e6 <HAL_RCC_OscConfig+0x61e>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80057be:	697b      	ldr	r3, [r7, #20]
 80057c0:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 80057c4:	687b      	ldr	r3, [r7, #4]
 80057c6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80057c8:	085b      	lsrs	r3, r3, #1
 80057ca:	3b01      	subs	r3, #1
 80057cc:	055b      	lsls	r3, r3, #21
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 80057ce:	429a      	cmp	r2, r3
 80057d0:	d109      	bne.n	80057e6 <HAL_RCC_OscConfig+0x61e>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 80057d2:	697b      	ldr	r3, [r7, #20]
 80057d4:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 80057d8:	687b      	ldr	r3, [r7, #4]
 80057da:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80057dc:	085b      	lsrs	r3, r3, #1
 80057de:	3b01      	subs	r3, #1
 80057e0:	065b      	lsls	r3, r3, #25
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80057e2:	429a      	cmp	r2, r3
 80057e4:	d001      	beq.n	80057ea <HAL_RCC_OscConfig+0x622>
      {
        return HAL_ERROR;
 80057e6:	2301      	movs	r3, #1
 80057e8:	e000      	b.n	80057ec <HAL_RCC_OscConfig+0x624>
      }
    }
  }
  }

  return HAL_OK;
 80057ea:	2300      	movs	r3, #0
}
 80057ec:	4618      	mov	r0, r3
 80057ee:	3720      	adds	r7, #32
 80057f0:	46bd      	mov	sp, r7
 80057f2:	bd80      	pop	{r7, pc}
 80057f4:	40021000 	.word	0x40021000

080057f8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80057f8:	b580      	push	{r7, lr}
 80057fa:	b086      	sub	sp, #24
 80057fc:	af00      	add	r7, sp, #0
 80057fe:	6078      	str	r0, [r7, #4]
 8005800:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t pllfreq;
  uint32_t hpre = RCC_SYSCLK_DIV1;
 8005802:	2300      	movs	r3, #0
 8005804:	617b      	str	r3, [r7, #20]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8005806:	687b      	ldr	r3, [r7, #4]
 8005808:	2b00      	cmp	r3, #0
 800580a:	d101      	bne.n	8005810 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 800580c:	2301      	movs	r3, #1
 800580e:	e11e      	b.n	8005a4e <HAL_RCC_ClockConfig+0x256>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8005810:	4b91      	ldr	r3, [pc, #580]	; (8005a58 <HAL_RCC_ClockConfig+0x260>)
 8005812:	681b      	ldr	r3, [r3, #0]
 8005814:	f003 030f 	and.w	r3, r3, #15
 8005818:	683a      	ldr	r2, [r7, #0]
 800581a:	429a      	cmp	r2, r3
 800581c:	d910      	bls.n	8005840 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800581e:	4b8e      	ldr	r3, [pc, #568]	; (8005a58 <HAL_RCC_ClockConfig+0x260>)
 8005820:	681b      	ldr	r3, [r3, #0]
 8005822:	f023 020f 	bic.w	r2, r3, #15
 8005826:	498c      	ldr	r1, [pc, #560]	; (8005a58 <HAL_RCC_ClockConfig+0x260>)
 8005828:	683b      	ldr	r3, [r7, #0]
 800582a:	4313      	orrs	r3, r2
 800582c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800582e:	4b8a      	ldr	r3, [pc, #552]	; (8005a58 <HAL_RCC_ClockConfig+0x260>)
 8005830:	681b      	ldr	r3, [r3, #0]
 8005832:	f003 030f 	and.w	r3, r3, #15
 8005836:	683a      	ldr	r2, [r7, #0]
 8005838:	429a      	cmp	r2, r3
 800583a:	d001      	beq.n	8005840 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 800583c:	2301      	movs	r3, #1
 800583e:	e106      	b.n	8005a4e <HAL_RCC_ClockConfig+0x256>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8005840:	687b      	ldr	r3, [r7, #4]
 8005842:	681b      	ldr	r3, [r3, #0]
 8005844:	f003 0301 	and.w	r3, r3, #1
 8005848:	2b00      	cmp	r3, #0
 800584a:	d073      	beq.n	8005934 <HAL_RCC_ClockConfig+0x13c>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800584c:	687b      	ldr	r3, [r7, #4]
 800584e:	685b      	ldr	r3, [r3, #4]
 8005850:	2b03      	cmp	r3, #3
 8005852:	d129      	bne.n	80058a8 <HAL_RCC_ClockConfig+0xb0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8005854:	4b81      	ldr	r3, [pc, #516]	; (8005a5c <HAL_RCC_ClockConfig+0x264>)
 8005856:	681b      	ldr	r3, [r3, #0]
 8005858:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800585c:	2b00      	cmp	r3, #0
 800585e:	d101      	bne.n	8005864 <HAL_RCC_ClockConfig+0x6c>
      {
        return HAL_ERROR;
 8005860:	2301      	movs	r3, #1
 8005862:	e0f4      	b.n	8005a4e <HAL_RCC_ClockConfig+0x256>
      }
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      pllfreq = RCC_GetSysClockFreqFromPLLSource();
 8005864:	f000 f972 	bl	8005b4c <RCC_GetSysClockFreqFromPLLSource>
 8005868:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
      if(pllfreq > 80000000U)
 800586a:	693b      	ldr	r3, [r7, #16]
 800586c:	4a7c      	ldr	r2, [pc, #496]	; (8005a60 <HAL_RCC_ClockConfig+0x268>)
 800586e:	4293      	cmp	r3, r2
 8005870:	d93f      	bls.n	80058f2 <HAL_RCC_ClockConfig+0xfa>
      {
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8005872:	4b7a      	ldr	r3, [pc, #488]	; (8005a5c <HAL_RCC_ClockConfig+0x264>)
 8005874:	689b      	ldr	r3, [r3, #8]
 8005876:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800587a:	2b00      	cmp	r3, #0
 800587c:	d009      	beq.n	8005892 <HAL_RCC_ClockConfig+0x9a>
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 800587e:	687b      	ldr	r3, [r7, #4]
 8005880:	681b      	ldr	r3, [r3, #0]
 8005882:	f003 0302 	and.w	r3, r3, #2
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8005886:	2b00      	cmp	r3, #0
 8005888:	d033      	beq.n	80058f2 <HAL_RCC_ClockConfig+0xfa>
              (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))))
 800588a:	687b      	ldr	r3, [r7, #4]
 800588c:	689b      	ldr	r3, [r3, #8]
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 800588e:	2b00      	cmp	r3, #0
 8005890:	d12f      	bne.n	80058f2 <HAL_RCC_ClockConfig+0xfa>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8005892:	4b72      	ldr	r3, [pc, #456]	; (8005a5c <HAL_RCC_ClockConfig+0x264>)
 8005894:	689b      	ldr	r3, [r3, #8]
 8005896:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800589a:	4a70      	ldr	r2, [pc, #448]	; (8005a5c <HAL_RCC_ClockConfig+0x264>)
 800589c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80058a0:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 80058a2:	2380      	movs	r3, #128	; 0x80
 80058a4:	617b      	str	r3, [r7, #20]
 80058a6:	e024      	b.n	80058f2 <HAL_RCC_ClockConfig+0xfa>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80058a8:	687b      	ldr	r3, [r7, #4]
 80058aa:	685b      	ldr	r3, [r3, #4]
 80058ac:	2b02      	cmp	r3, #2
 80058ae:	d107      	bne.n	80058c0 <HAL_RCC_ClockConfig+0xc8>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80058b0:	4b6a      	ldr	r3, [pc, #424]	; (8005a5c <HAL_RCC_ClockConfig+0x264>)
 80058b2:	681b      	ldr	r3, [r3, #0]
 80058b4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80058b8:	2b00      	cmp	r3, #0
 80058ba:	d109      	bne.n	80058d0 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 80058bc:	2301      	movs	r3, #1
 80058be:	e0c6      	b.n	8005a4e <HAL_RCC_ClockConfig+0x256>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80058c0:	4b66      	ldr	r3, [pc, #408]	; (8005a5c <HAL_RCC_ClockConfig+0x264>)
 80058c2:	681b      	ldr	r3, [r3, #0]
 80058c4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80058c8:	2b00      	cmp	r3, #0
 80058ca:	d101      	bne.n	80058d0 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 80058cc:	2301      	movs	r3, #1
 80058ce:	e0be      	b.n	8005a4e <HAL_RCC_ClockConfig+0x256>
        }
      }
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      pllfreq = HAL_RCC_GetSysClockFreq();
 80058d0:	f000 f8ce 	bl	8005a70 <HAL_RCC_GetSysClockFreq>
 80058d4:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
      if(pllfreq > 80000000U)
 80058d6:	693b      	ldr	r3, [r7, #16]
 80058d8:	4a61      	ldr	r2, [pc, #388]	; (8005a60 <HAL_RCC_ClockConfig+0x268>)
 80058da:	4293      	cmp	r3, r2
 80058dc:	d909      	bls.n	80058f2 <HAL_RCC_ClockConfig+0xfa>
      {
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 80058de:	4b5f      	ldr	r3, [pc, #380]	; (8005a5c <HAL_RCC_ClockConfig+0x264>)
 80058e0:	689b      	ldr	r3, [r3, #8]
 80058e2:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80058e6:	4a5d      	ldr	r2, [pc, #372]	; (8005a5c <HAL_RCC_ClockConfig+0x264>)
 80058e8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80058ec:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 80058ee:	2380      	movs	r3, #128	; 0x80
 80058f0:	617b      	str	r3, [r7, #20]
      }

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80058f2:	4b5a      	ldr	r3, [pc, #360]	; (8005a5c <HAL_RCC_ClockConfig+0x264>)
 80058f4:	689b      	ldr	r3, [r3, #8]
 80058f6:	f023 0203 	bic.w	r2, r3, #3
 80058fa:	687b      	ldr	r3, [r7, #4]
 80058fc:	685b      	ldr	r3, [r3, #4]
 80058fe:	4957      	ldr	r1, [pc, #348]	; (8005a5c <HAL_RCC_ClockConfig+0x264>)
 8005900:	4313      	orrs	r3, r2
 8005902:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005904:	f7fc fec2 	bl	800268c <HAL_GetTick>
 8005908:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800590a:	e00a      	b.n	8005922 <HAL_RCC_ClockConfig+0x12a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800590c:	f7fc febe 	bl	800268c <HAL_GetTick>
 8005910:	4602      	mov	r2, r0
 8005912:	68fb      	ldr	r3, [r7, #12]
 8005914:	1ad3      	subs	r3, r2, r3
 8005916:	f241 3288 	movw	r2, #5000	; 0x1388
 800591a:	4293      	cmp	r3, r2
 800591c:	d901      	bls.n	8005922 <HAL_RCC_ClockConfig+0x12a>
      {
        return HAL_TIMEOUT;
 800591e:	2303      	movs	r3, #3
 8005920:	e095      	b.n	8005a4e <HAL_RCC_ClockConfig+0x256>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005922:	4b4e      	ldr	r3, [pc, #312]	; (8005a5c <HAL_RCC_ClockConfig+0x264>)
 8005924:	689b      	ldr	r3, [r3, #8]
 8005926:	f003 020c 	and.w	r2, r3, #12
 800592a:	687b      	ldr	r3, [r7, #4]
 800592c:	685b      	ldr	r3, [r3, #4]
 800592e:	009b      	lsls	r3, r3, #2
 8005930:	429a      	cmp	r2, r3
 8005932:	d1eb      	bne.n	800590c <HAL_RCC_ClockConfig+0x114>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005934:	687b      	ldr	r3, [r7, #4]
 8005936:	681b      	ldr	r3, [r3, #0]
 8005938:	f003 0302 	and.w	r3, r3, #2
 800593c:	2b00      	cmp	r3, #0
 800593e:	d023      	beq.n	8005988 <HAL_RCC_ClockConfig+0x190>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005940:	687b      	ldr	r3, [r7, #4]
 8005942:	681b      	ldr	r3, [r3, #0]
 8005944:	f003 0304 	and.w	r3, r3, #4
 8005948:	2b00      	cmp	r3, #0
 800594a:	d005      	beq.n	8005958 <HAL_RCC_ClockConfig+0x160>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800594c:	4b43      	ldr	r3, [pc, #268]	; (8005a5c <HAL_RCC_ClockConfig+0x264>)
 800594e:	689b      	ldr	r3, [r3, #8]
 8005950:	4a42      	ldr	r2, [pc, #264]	; (8005a5c <HAL_RCC_ClockConfig+0x264>)
 8005952:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8005956:	6093      	str	r3, [r2, #8]
    }
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005958:	687b      	ldr	r3, [r7, #4]
 800595a:	681b      	ldr	r3, [r3, #0]
 800595c:	f003 0308 	and.w	r3, r3, #8
 8005960:	2b00      	cmp	r3, #0
 8005962:	d007      	beq.n	8005974 <HAL_RCC_ClockConfig+0x17c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, RCC_HCLK_DIV16);
 8005964:	4b3d      	ldr	r3, [pc, #244]	; (8005a5c <HAL_RCC_ClockConfig+0x264>)
 8005966:	689b      	ldr	r3, [r3, #8]
 8005968:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 800596c:	4a3b      	ldr	r2, [pc, #236]	; (8005a5c <HAL_RCC_ClockConfig+0x264>)
 800596e:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8005972:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005974:	4b39      	ldr	r3, [pc, #228]	; (8005a5c <HAL_RCC_ClockConfig+0x264>)
 8005976:	689b      	ldr	r3, [r3, #8]
 8005978:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800597c:	687b      	ldr	r3, [r7, #4]
 800597e:	689b      	ldr	r3, [r3, #8]
 8005980:	4936      	ldr	r1, [pc, #216]	; (8005a5c <HAL_RCC_ClockConfig+0x264>)
 8005982:	4313      	orrs	r3, r2
 8005984:	608b      	str	r3, [r1, #8]
 8005986:	e008      	b.n	800599a <HAL_RCC_ClockConfig+0x1a2>
  }
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if(hpre == RCC_SYSCLK_DIV2)
 8005988:	697b      	ldr	r3, [r7, #20]
 800598a:	2b80      	cmp	r3, #128	; 0x80
 800598c:	d105      	bne.n	800599a <HAL_RCC_ClockConfig+0x1a2>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 800598e:	4b33      	ldr	r3, [pc, #204]	; (8005a5c <HAL_RCC_ClockConfig+0x264>)
 8005990:	689b      	ldr	r3, [r3, #8]
 8005992:	4a32      	ldr	r2, [pc, #200]	; (8005a5c <HAL_RCC_ClockConfig+0x264>)
 8005994:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8005998:	6093      	str	r3, [r2, #8]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800599a:	4b2f      	ldr	r3, [pc, #188]	; (8005a58 <HAL_RCC_ClockConfig+0x260>)
 800599c:	681b      	ldr	r3, [r3, #0]
 800599e:	f003 030f 	and.w	r3, r3, #15
 80059a2:	683a      	ldr	r2, [r7, #0]
 80059a4:	429a      	cmp	r2, r3
 80059a6:	d21d      	bcs.n	80059e4 <HAL_RCC_ClockConfig+0x1ec>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80059a8:	4b2b      	ldr	r3, [pc, #172]	; (8005a58 <HAL_RCC_ClockConfig+0x260>)
 80059aa:	681b      	ldr	r3, [r3, #0]
 80059ac:	f023 020f 	bic.w	r2, r3, #15
 80059b0:	4929      	ldr	r1, [pc, #164]	; (8005a58 <HAL_RCC_ClockConfig+0x260>)
 80059b2:	683b      	ldr	r3, [r7, #0]
 80059b4:	4313      	orrs	r3, r2
 80059b6:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 80059b8:	f7fc fe68 	bl	800268c <HAL_GetTick>
 80059bc:	60f8      	str	r0, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80059be:	e00a      	b.n	80059d6 <HAL_RCC_ClockConfig+0x1de>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80059c0:	f7fc fe64 	bl	800268c <HAL_GetTick>
 80059c4:	4602      	mov	r2, r0
 80059c6:	68fb      	ldr	r3, [r7, #12]
 80059c8:	1ad3      	subs	r3, r2, r3
 80059ca:	f241 3288 	movw	r2, #5000	; 0x1388
 80059ce:	4293      	cmp	r3, r2
 80059d0:	d901      	bls.n	80059d6 <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_TIMEOUT;
 80059d2:	2303      	movs	r3, #3
 80059d4:	e03b      	b.n	8005a4e <HAL_RCC_ClockConfig+0x256>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80059d6:	4b20      	ldr	r3, [pc, #128]	; (8005a58 <HAL_RCC_ClockConfig+0x260>)
 80059d8:	681b      	ldr	r3, [r3, #0]
 80059da:	f003 030f 	and.w	r3, r3, #15
 80059de:	683a      	ldr	r2, [r7, #0]
 80059e0:	429a      	cmp	r2, r3
 80059e2:	d1ed      	bne.n	80059c0 <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80059e4:	687b      	ldr	r3, [r7, #4]
 80059e6:	681b      	ldr	r3, [r3, #0]
 80059e8:	f003 0304 	and.w	r3, r3, #4
 80059ec:	2b00      	cmp	r3, #0
 80059ee:	d008      	beq.n	8005a02 <HAL_RCC_ClockConfig+0x20a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80059f0:	4b1a      	ldr	r3, [pc, #104]	; (8005a5c <HAL_RCC_ClockConfig+0x264>)
 80059f2:	689b      	ldr	r3, [r3, #8]
 80059f4:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80059f8:	687b      	ldr	r3, [r7, #4]
 80059fa:	68db      	ldr	r3, [r3, #12]
 80059fc:	4917      	ldr	r1, [pc, #92]	; (8005a5c <HAL_RCC_ClockConfig+0x264>)
 80059fe:	4313      	orrs	r3, r2
 8005a00:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005a02:	687b      	ldr	r3, [r7, #4]
 8005a04:	681b      	ldr	r3, [r3, #0]
 8005a06:	f003 0308 	and.w	r3, r3, #8
 8005a0a:	2b00      	cmp	r3, #0
 8005a0c:	d009      	beq.n	8005a22 <HAL_RCC_ClockConfig+0x22a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8005a0e:	4b13      	ldr	r3, [pc, #76]	; (8005a5c <HAL_RCC_ClockConfig+0x264>)
 8005a10:	689b      	ldr	r3, [r3, #8]
 8005a12:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8005a16:	687b      	ldr	r3, [r7, #4]
 8005a18:	691b      	ldr	r3, [r3, #16]
 8005a1a:	00db      	lsls	r3, r3, #3
 8005a1c:	490f      	ldr	r1, [pc, #60]	; (8005a5c <HAL_RCC_ClockConfig+0x264>)
 8005a1e:	4313      	orrs	r3, r2
 8005a20:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8005a22:	f000 f825 	bl	8005a70 <HAL_RCC_GetSysClockFreq>
 8005a26:	4601      	mov	r1, r0
 8005a28:	4b0c      	ldr	r3, [pc, #48]	; (8005a5c <HAL_RCC_ClockConfig+0x264>)
 8005a2a:	689b      	ldr	r3, [r3, #8]
 8005a2c:	091b      	lsrs	r3, r3, #4
 8005a2e:	f003 030f 	and.w	r3, r3, #15
 8005a32:	4a0c      	ldr	r2, [pc, #48]	; (8005a64 <HAL_RCC_ClockConfig+0x26c>)
 8005a34:	5cd3      	ldrb	r3, [r2, r3]
 8005a36:	f003 031f 	and.w	r3, r3, #31
 8005a3a:	fa21 f303 	lsr.w	r3, r1, r3
 8005a3e:	4a0a      	ldr	r2, [pc, #40]	; (8005a68 <HAL_RCC_ClockConfig+0x270>)
 8005a40:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 8005a42:	4b0a      	ldr	r3, [pc, #40]	; (8005a6c <HAL_RCC_ClockConfig+0x274>)
 8005a44:	681b      	ldr	r3, [r3, #0]
 8005a46:	4618      	mov	r0, r3
 8005a48:	f7fc fdd4 	bl	80025f4 <HAL_InitTick>
 8005a4c:	4603      	mov	r3, r0
}
 8005a4e:	4618      	mov	r0, r3
 8005a50:	3718      	adds	r7, #24
 8005a52:	46bd      	mov	sp, r7
 8005a54:	bd80      	pop	{r7, pc}
 8005a56:	bf00      	nop
 8005a58:	40022000 	.word	0x40022000
 8005a5c:	40021000 	.word	0x40021000
 8005a60:	04c4b400 	.word	0x04c4b400
 8005a64:	080095e8 	.word	0x080095e8
 8005a68:	2000000c 	.word	0x2000000c
 8005a6c:	20000010 	.word	0x20000010

08005a70 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8005a70:	b480      	push	{r7}
 8005a72:	b087      	sub	sp, #28
 8005a74:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 8005a76:	4b2c      	ldr	r3, [pc, #176]	; (8005b28 <HAL_RCC_GetSysClockFreq+0xb8>)
 8005a78:	689b      	ldr	r3, [r3, #8]
 8005a7a:	f003 030c 	and.w	r3, r3, #12
 8005a7e:	2b04      	cmp	r3, #4
 8005a80:	d102      	bne.n	8005a88 <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8005a82:	4b2a      	ldr	r3, [pc, #168]	; (8005b2c <HAL_RCC_GetSysClockFreq+0xbc>)
 8005a84:	613b      	str	r3, [r7, #16]
 8005a86:	e047      	b.n	8005b18 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 8005a88:	4b27      	ldr	r3, [pc, #156]	; (8005b28 <HAL_RCC_GetSysClockFreq+0xb8>)
 8005a8a:	689b      	ldr	r3, [r3, #8]
 8005a8c:	f003 030c 	and.w	r3, r3, #12
 8005a90:	2b08      	cmp	r3, #8
 8005a92:	d102      	bne.n	8005a9a <HAL_RCC_GetSysClockFreq+0x2a>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8005a94:	4b26      	ldr	r3, [pc, #152]	; (8005b30 <HAL_RCC_GetSysClockFreq+0xc0>)
 8005a96:	613b      	str	r3, [r7, #16]
 8005a98:	e03e      	b.n	8005b18 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 8005a9a:	4b23      	ldr	r3, [pc, #140]	; (8005b28 <HAL_RCC_GetSysClockFreq+0xb8>)
 8005a9c:	689b      	ldr	r3, [r3, #8]
 8005a9e:	f003 030c 	and.w	r3, r3, #12
 8005aa2:	2b0c      	cmp	r3, #12
 8005aa4:	d136      	bne.n	8005b14 <HAL_RCC_GetSysClockFreq+0xa4>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8005aa6:	4b20      	ldr	r3, [pc, #128]	; (8005b28 <HAL_RCC_GetSysClockFreq+0xb8>)
 8005aa8:	68db      	ldr	r3, [r3, #12]
 8005aaa:	f003 0303 	and.w	r3, r3, #3
 8005aae:	60fb      	str	r3, [r7, #12]
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8005ab0:	4b1d      	ldr	r3, [pc, #116]	; (8005b28 <HAL_RCC_GetSysClockFreq+0xb8>)
 8005ab2:	68db      	ldr	r3, [r3, #12]
 8005ab4:	091b      	lsrs	r3, r3, #4
 8005ab6:	f003 030f 	and.w	r3, r3, #15
 8005aba:	3301      	adds	r3, #1
 8005abc:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8005abe:	68fb      	ldr	r3, [r7, #12]
 8005ac0:	2b03      	cmp	r3, #3
 8005ac2:	d10c      	bne.n	8005ade <HAL_RCC_GetSysClockFreq+0x6e>
    {
    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8005ac4:	4a1a      	ldr	r2, [pc, #104]	; (8005b30 <HAL_RCC_GetSysClockFreq+0xc0>)
 8005ac6:	68bb      	ldr	r3, [r7, #8]
 8005ac8:	fbb2 f3f3 	udiv	r3, r2, r3
 8005acc:	4a16      	ldr	r2, [pc, #88]	; (8005b28 <HAL_RCC_GetSysClockFreq+0xb8>)
 8005ace:	68d2      	ldr	r2, [r2, #12]
 8005ad0:	0a12      	lsrs	r2, r2, #8
 8005ad2:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8005ad6:	fb02 f303 	mul.w	r3, r2, r3
 8005ada:	617b      	str	r3, [r7, #20]
      break;
 8005adc:	e00c      	b.n	8005af8 <HAL_RCC_GetSysClockFreq+0x88>

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    default:
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8005ade:	4a13      	ldr	r2, [pc, #76]	; (8005b2c <HAL_RCC_GetSysClockFreq+0xbc>)
 8005ae0:	68bb      	ldr	r3, [r7, #8]
 8005ae2:	fbb2 f3f3 	udiv	r3, r2, r3
 8005ae6:	4a10      	ldr	r2, [pc, #64]	; (8005b28 <HAL_RCC_GetSysClockFreq+0xb8>)
 8005ae8:	68d2      	ldr	r2, [r2, #12]
 8005aea:	0a12      	lsrs	r2, r2, #8
 8005aec:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8005af0:	fb02 f303 	mul.w	r3, r2, r3
 8005af4:	617b      	str	r3, [r7, #20]
      break;
 8005af6:	bf00      	nop
    }
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8005af8:	4b0b      	ldr	r3, [pc, #44]	; (8005b28 <HAL_RCC_GetSysClockFreq+0xb8>)
 8005afa:	68db      	ldr	r3, [r3, #12]
 8005afc:	0e5b      	lsrs	r3, r3, #25
 8005afe:	f003 0303 	and.w	r3, r3, #3
 8005b02:	3301      	adds	r3, #1
 8005b04:	005b      	lsls	r3, r3, #1
 8005b06:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco/pllr;
 8005b08:	697a      	ldr	r2, [r7, #20]
 8005b0a:	687b      	ldr	r3, [r7, #4]
 8005b0c:	fbb2 f3f3 	udiv	r3, r2, r3
 8005b10:	613b      	str	r3, [r7, #16]
 8005b12:	e001      	b.n	8005b18 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else
  {
    sysclockfreq = 0U;
 8005b14:	2300      	movs	r3, #0
 8005b16:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 8005b18:	693b      	ldr	r3, [r7, #16]
}
 8005b1a:	4618      	mov	r0, r3
 8005b1c:	371c      	adds	r7, #28
 8005b1e:	46bd      	mov	sp, r7
 8005b20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b24:	4770      	bx	lr
 8005b26:	bf00      	nop
 8005b28:	40021000 	.word	0x40021000
 8005b2c:	00f42400 	.word	0x00f42400
 8005b30:	007a1200 	.word	0x007a1200

08005b34 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8005b34:	b480      	push	{r7}
 8005b36:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8005b38:	4b03      	ldr	r3, [pc, #12]	; (8005b48 <HAL_RCC_GetHCLKFreq+0x14>)
 8005b3a:	681b      	ldr	r3, [r3, #0]
}
 8005b3c:	4618      	mov	r0, r3
 8005b3e:	46bd      	mov	sp, r7
 8005b40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b44:	4770      	bx	lr
 8005b46:	bf00      	nop
 8005b48:	2000000c 	.word	0x2000000c

08005b4c <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 8005b4c:	b480      	push	{r7}
 8005b4e:	b087      	sub	sp, #28
 8005b50:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8005b52:	4b1e      	ldr	r3, [pc, #120]	; (8005bcc <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8005b54:	68db      	ldr	r3, [r3, #12]
 8005b56:	f003 0303 	and.w	r3, r3, #3
 8005b5a:	613b      	str	r3, [r7, #16]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8005b5c:	4b1b      	ldr	r3, [pc, #108]	; (8005bcc <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8005b5e:	68db      	ldr	r3, [r3, #12]
 8005b60:	091b      	lsrs	r3, r3, #4
 8005b62:	f003 030f 	and.w	r3, r3, #15
 8005b66:	3301      	adds	r3, #1
 8005b68:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 8005b6a:	693b      	ldr	r3, [r7, #16]
 8005b6c:	2b03      	cmp	r3, #3
 8005b6e:	d10c      	bne.n	8005b8a <RCC_GetSysClockFreqFromPLLSource+0x3e>
  {
  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8005b70:	4a17      	ldr	r2, [pc, #92]	; (8005bd0 <RCC_GetSysClockFreqFromPLLSource+0x84>)
 8005b72:	68fb      	ldr	r3, [r7, #12]
 8005b74:	fbb2 f3f3 	udiv	r3, r2, r3
 8005b78:	4a14      	ldr	r2, [pc, #80]	; (8005bcc <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8005b7a:	68d2      	ldr	r2, [r2, #12]
 8005b7c:	0a12      	lsrs	r2, r2, #8
 8005b7e:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8005b82:	fb02 f303 	mul.w	r3, r2, r3
 8005b86:	617b      	str	r3, [r7, #20]
    break;
 8005b88:	e00c      	b.n	8005ba4 <RCC_GetSysClockFreqFromPLLSource+0x58>

  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
  default:
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8005b8a:	4a12      	ldr	r2, [pc, #72]	; (8005bd4 <RCC_GetSysClockFreqFromPLLSource+0x88>)
 8005b8c:	68fb      	ldr	r3, [r7, #12]
 8005b8e:	fbb2 f3f3 	udiv	r3, r2, r3
 8005b92:	4a0e      	ldr	r2, [pc, #56]	; (8005bcc <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8005b94:	68d2      	ldr	r2, [r2, #12]
 8005b96:	0a12      	lsrs	r2, r2, #8
 8005b98:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8005b9c:	fb02 f303 	mul.w	r3, r2, r3
 8005ba0:	617b      	str	r3, [r7, #20]
    break;
 8005ba2:	bf00      	nop
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8005ba4:	4b09      	ldr	r3, [pc, #36]	; (8005bcc <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8005ba6:	68db      	ldr	r3, [r3, #12]
 8005ba8:	0e5b      	lsrs	r3, r3, #25
 8005baa:	f003 0303 	and.w	r3, r3, #3
 8005bae:	3301      	adds	r3, #1
 8005bb0:	005b      	lsls	r3, r3, #1
 8005bb2:	60bb      	str	r3, [r7, #8]
  sysclockfreq = pllvco/pllr;
 8005bb4:	697a      	ldr	r2, [r7, #20]
 8005bb6:	68bb      	ldr	r3, [r7, #8]
 8005bb8:	fbb2 f3f3 	udiv	r3, r2, r3
 8005bbc:	607b      	str	r3, [r7, #4]

  return sysclockfreq;
 8005bbe:	687b      	ldr	r3, [r7, #4]
}
 8005bc0:	4618      	mov	r0, r3
 8005bc2:	371c      	adds	r7, #28
 8005bc4:	46bd      	mov	sp, r7
 8005bc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bca:	4770      	bx	lr
 8005bcc:	40021000 	.word	0x40021000
 8005bd0:	007a1200 	.word	0x007a1200
 8005bd4:	00f42400 	.word	0x00f42400

08005bd8 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8005bd8:	b580      	push	{r7, lr}
 8005bda:	b086      	sub	sp, #24
 8005bdc:	af00      	add	r7, sp, #0
 8005bde:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8005be0:	2300      	movs	r3, #0
 8005be2:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8005be4:	2300      	movs	r3, #0
 8005be6:	74bb      	strb	r3, [r7, #18]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8005be8:	687b      	ldr	r3, [r7, #4]
 8005bea:	681b      	ldr	r3, [r3, #0]
 8005bec:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8005bf0:	2b00      	cmp	r3, #0
 8005bf2:	f000 8098 	beq.w	8005d26 <HAL_RCCEx_PeriphCLKConfig+0x14e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8005bf6:	2300      	movs	r3, #0
 8005bf8:	747b      	strb	r3, [r7, #17]
    
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8005bfa:	4b43      	ldr	r3, [pc, #268]	; (8005d08 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005bfc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005bfe:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005c02:	2b00      	cmp	r3, #0
 8005c04:	d10d      	bne.n	8005c22 <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8005c06:	4b40      	ldr	r3, [pc, #256]	; (8005d08 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005c08:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005c0a:	4a3f      	ldr	r2, [pc, #252]	; (8005d08 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005c0c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005c10:	6593      	str	r3, [r2, #88]	; 0x58
 8005c12:	4b3d      	ldr	r3, [pc, #244]	; (8005d08 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005c14:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005c16:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005c1a:	60bb      	str	r3, [r7, #8]
 8005c1c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8005c1e:	2301      	movs	r3, #1
 8005c20:	747b      	strb	r3, [r7, #17]
    }
      
    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8005c22:	4b3a      	ldr	r3, [pc, #232]	; (8005d0c <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8005c24:	681b      	ldr	r3, [r3, #0]
 8005c26:	4a39      	ldr	r2, [pc, #228]	; (8005d0c <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8005c28:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005c2c:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8005c2e:	f7fc fd2d 	bl	800268c <HAL_GetTick>
 8005c32:	60f8      	str	r0, [r7, #12]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8005c34:	e009      	b.n	8005c4a <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005c36:	f7fc fd29 	bl	800268c <HAL_GetTick>
 8005c3a:	4602      	mov	r2, r0
 8005c3c:	68fb      	ldr	r3, [r7, #12]
 8005c3e:	1ad3      	subs	r3, r2, r3
 8005c40:	2b02      	cmp	r3, #2
 8005c42:	d902      	bls.n	8005c4a <HAL_RCCEx_PeriphCLKConfig+0x72>
      {
        ret = HAL_TIMEOUT;
 8005c44:	2303      	movs	r3, #3
 8005c46:	74fb      	strb	r3, [r7, #19]
        break;
 8005c48:	e005      	b.n	8005c56 <HAL_RCCEx_PeriphCLKConfig+0x7e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8005c4a:	4b30      	ldr	r3, [pc, #192]	; (8005d0c <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8005c4c:	681b      	ldr	r3, [r3, #0]
 8005c4e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005c52:	2b00      	cmp	r3, #0
 8005c54:	d0ef      	beq.n	8005c36 <HAL_RCCEx_PeriphCLKConfig+0x5e>
      }
    }

    if(ret == HAL_OK)
 8005c56:	7cfb      	ldrb	r3, [r7, #19]
 8005c58:	2b00      	cmp	r3, #0
 8005c5a:	d159      	bne.n	8005d10 <HAL_RCCEx_PeriphCLKConfig+0x138>
    { 
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8005c5c:	4b2a      	ldr	r3, [pc, #168]	; (8005d08 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005c5e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005c62:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005c66:	617b      	str	r3, [r7, #20]
      
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8005c68:	697b      	ldr	r3, [r7, #20]
 8005c6a:	2b00      	cmp	r3, #0
 8005c6c:	d01e      	beq.n	8005cac <HAL_RCCEx_PeriphCLKConfig+0xd4>
 8005c6e:	687b      	ldr	r3, [r7, #4]
 8005c70:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005c72:	697a      	ldr	r2, [r7, #20]
 8005c74:	429a      	cmp	r2, r3
 8005c76:	d019      	beq.n	8005cac <HAL_RCCEx_PeriphCLKConfig+0xd4>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8005c78:	4b23      	ldr	r3, [pc, #140]	; (8005d08 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005c7a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005c7e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005c82:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8005c84:	4b20      	ldr	r3, [pc, #128]	; (8005d08 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005c86:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005c8a:	4a1f      	ldr	r2, [pc, #124]	; (8005d08 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005c8c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005c90:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8005c94:	4b1c      	ldr	r3, [pc, #112]	; (8005d08 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005c96:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005c9a:	4a1b      	ldr	r2, [pc, #108]	; (8005d08 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005c9c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005ca0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8005ca4:	4a18      	ldr	r2, [pc, #96]	; (8005d08 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005ca6:	697b      	ldr	r3, [r7, #20]
 8005ca8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8005cac:	697b      	ldr	r3, [r7, #20]
 8005cae:	f003 0301 	and.w	r3, r3, #1
 8005cb2:	2b00      	cmp	r3, #0
 8005cb4:	d016      	beq.n	8005ce4 <HAL_RCCEx_PeriphCLKConfig+0x10c>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005cb6:	f7fc fce9 	bl	800268c <HAL_GetTick>
 8005cba:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8005cbc:	e00b      	b.n	8005cd6 <HAL_RCCEx_PeriphCLKConfig+0xfe>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005cbe:	f7fc fce5 	bl	800268c <HAL_GetTick>
 8005cc2:	4602      	mov	r2, r0
 8005cc4:	68fb      	ldr	r3, [r7, #12]
 8005cc6:	1ad3      	subs	r3, r2, r3
 8005cc8:	f241 3288 	movw	r2, #5000	; 0x1388
 8005ccc:	4293      	cmp	r3, r2
 8005cce:	d902      	bls.n	8005cd6 <HAL_RCCEx_PeriphCLKConfig+0xfe>
          {
            ret = HAL_TIMEOUT;
 8005cd0:	2303      	movs	r3, #3
 8005cd2:	74fb      	strb	r3, [r7, #19]
            break;
 8005cd4:	e006      	b.n	8005ce4 <HAL_RCCEx_PeriphCLKConfig+0x10c>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8005cd6:	4b0c      	ldr	r3, [pc, #48]	; (8005d08 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005cd8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005cdc:	f003 0302 	and.w	r3, r3, #2
 8005ce0:	2b00      	cmp	r3, #0
 8005ce2:	d0ec      	beq.n	8005cbe <HAL_RCCEx_PeriphCLKConfig+0xe6>
          }
        }
      }
      
      if(ret == HAL_OK)
 8005ce4:	7cfb      	ldrb	r3, [r7, #19]
 8005ce6:	2b00      	cmp	r3, #0
 8005ce8:	d10b      	bne.n	8005d02 <HAL_RCCEx_PeriphCLKConfig+0x12a>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8005cea:	4b07      	ldr	r3, [pc, #28]	; (8005d08 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005cec:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005cf0:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8005cf4:	687b      	ldr	r3, [r7, #4]
 8005cf6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005cf8:	4903      	ldr	r1, [pc, #12]	; (8005d08 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005cfa:	4313      	orrs	r3, r2
 8005cfc:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8005d00:	e008      	b.n	8005d14 <HAL_RCCEx_PeriphCLKConfig+0x13c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8005d02:	7cfb      	ldrb	r3, [r7, #19]
 8005d04:	74bb      	strb	r3, [r7, #18]
 8005d06:	e005      	b.n	8005d14 <HAL_RCCEx_PeriphCLKConfig+0x13c>
 8005d08:	40021000 	.word	0x40021000
 8005d0c:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005d10:	7cfb      	ldrb	r3, [r7, #19]
 8005d12:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8005d14:	7c7b      	ldrb	r3, [r7, #17]
 8005d16:	2b01      	cmp	r3, #1
 8005d18:	d105      	bne.n	8005d26 <HAL_RCCEx_PeriphCLKConfig+0x14e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005d1a:	4baf      	ldr	r3, [pc, #700]	; (8005fd8 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8005d1c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005d1e:	4aae      	ldr	r2, [pc, #696]	; (8005fd8 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8005d20:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005d24:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8005d26:	687b      	ldr	r3, [r7, #4]
 8005d28:	681b      	ldr	r3, [r3, #0]
 8005d2a:	f003 0301 	and.w	r3, r3, #1
 8005d2e:	2b00      	cmp	r3, #0
 8005d30:	d00a      	beq.n	8005d48 <HAL_RCCEx_PeriphCLKConfig+0x170>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8005d32:	4ba9      	ldr	r3, [pc, #676]	; (8005fd8 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8005d34:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005d38:	f023 0203 	bic.w	r2, r3, #3
 8005d3c:	687b      	ldr	r3, [r7, #4]
 8005d3e:	685b      	ldr	r3, [r3, #4]
 8005d40:	49a5      	ldr	r1, [pc, #660]	; (8005fd8 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8005d42:	4313      	orrs	r3, r2
 8005d44:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8005d48:	687b      	ldr	r3, [r7, #4]
 8005d4a:	681b      	ldr	r3, [r3, #0]
 8005d4c:	f003 0302 	and.w	r3, r3, #2
 8005d50:	2b00      	cmp	r3, #0
 8005d52:	d00a      	beq.n	8005d6a <HAL_RCCEx_PeriphCLKConfig+0x192>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8005d54:	4ba0      	ldr	r3, [pc, #640]	; (8005fd8 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8005d56:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005d5a:	f023 020c 	bic.w	r2, r3, #12
 8005d5e:	687b      	ldr	r3, [r7, #4]
 8005d60:	689b      	ldr	r3, [r3, #8]
 8005d62:	499d      	ldr	r1, [pc, #628]	; (8005fd8 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8005d64:	4313      	orrs	r3, r2
 8005d66:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8005d6a:	687b      	ldr	r3, [r7, #4]
 8005d6c:	681b      	ldr	r3, [r3, #0]
 8005d6e:	f003 0304 	and.w	r3, r3, #4
 8005d72:	2b00      	cmp	r3, #0
 8005d74:	d00a      	beq.n	8005d8c <HAL_RCCEx_PeriphCLKConfig+0x1b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8005d76:	4b98      	ldr	r3, [pc, #608]	; (8005fd8 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8005d78:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005d7c:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8005d80:	687b      	ldr	r3, [r7, #4]
 8005d82:	68db      	ldr	r3, [r3, #12]
 8005d84:	4994      	ldr	r1, [pc, #592]	; (8005fd8 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8005d86:	4313      	orrs	r3, r2
 8005d88:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(UART4)
  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8005d8c:	687b      	ldr	r3, [r7, #4]
 8005d8e:	681b      	ldr	r3, [r3, #0]
 8005d90:	f003 0308 	and.w	r3, r3, #8
 8005d94:	2b00      	cmp	r3, #0
 8005d96:	d00a      	beq.n	8005dae <HAL_RCCEx_PeriphCLKConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8005d98:	4b8f      	ldr	r3, [pc, #572]	; (8005fd8 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8005d9a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005d9e:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8005da2:	687b      	ldr	r3, [r7, #4]
 8005da4:	691b      	ldr	r3, [r3, #16]
 8005da6:	498c      	ldr	r1, [pc, #560]	; (8005fd8 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8005da8:	4313      	orrs	r3, r2
 8005daa:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8005dae:	687b      	ldr	r3, [r7, #4]
 8005db0:	681b      	ldr	r3, [r3, #0]
 8005db2:	f003 0310 	and.w	r3, r3, #16
 8005db6:	2b00      	cmp	r3, #0
 8005db8:	d00a      	beq.n	8005dd0 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8005dba:	4b87      	ldr	r3, [pc, #540]	; (8005fd8 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8005dbc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005dc0:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8005dc4:	687b      	ldr	r3, [r7, #4]
 8005dc6:	695b      	ldr	r3, [r3, #20]
 8005dc8:	4983      	ldr	r1, [pc, #524]	; (8005fd8 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8005dca:	4313      	orrs	r3, r2
 8005dcc:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8005dd0:	687b      	ldr	r3, [r7, #4]
 8005dd2:	681b      	ldr	r3, [r3, #0]
 8005dd4:	f003 0320 	and.w	r3, r3, #32
 8005dd8:	2b00      	cmp	r3, #0
 8005dda:	d00a      	beq.n	8005df2 <HAL_RCCEx_PeriphCLKConfig+0x21a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8005ddc:	4b7e      	ldr	r3, [pc, #504]	; (8005fd8 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8005dde:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005de2:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8005de6:	687b      	ldr	r3, [r7, #4]
 8005de8:	699b      	ldr	r3, [r3, #24]
 8005dea:	497b      	ldr	r1, [pc, #492]	; (8005fd8 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8005dec:	4313      	orrs	r3, r2
 8005dee:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8005df2:	687b      	ldr	r3, [r7, #4]
 8005df4:	681b      	ldr	r3, [r3, #0]
 8005df6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005dfa:	2b00      	cmp	r3, #0
 8005dfc:	d00a      	beq.n	8005e14 <HAL_RCCEx_PeriphCLKConfig+0x23c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8005dfe:	4b76      	ldr	r3, [pc, #472]	; (8005fd8 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8005e00:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005e04:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8005e08:	687b      	ldr	r3, [r7, #4]
 8005e0a:	69db      	ldr	r3, [r3, #28]
 8005e0c:	4972      	ldr	r1, [pc, #456]	; (8005fd8 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8005e0e:	4313      	orrs	r3, r2
 8005e10:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8005e14:	687b      	ldr	r3, [r7, #4]
 8005e16:	681b      	ldr	r3, [r3, #0]
 8005e18:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005e1c:	2b00      	cmp	r3, #0
 8005e1e:	d00a      	beq.n	8005e36 <HAL_RCCEx_PeriphCLKConfig+0x25e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8005e20:	4b6d      	ldr	r3, [pc, #436]	; (8005fd8 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8005e22:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005e26:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8005e2a:	687b      	ldr	r3, [r7, #4]
 8005e2c:	6a1b      	ldr	r3, [r3, #32]
 8005e2e:	496a      	ldr	r1, [pc, #424]	; (8005fd8 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8005e30:	4313      	orrs	r3, r2
 8005e32:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8005e36:	687b      	ldr	r3, [r7, #4]
 8005e38:	681b      	ldr	r3, [r3, #0]
 8005e3a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005e3e:	2b00      	cmp	r3, #0
 8005e40:	d00a      	beq.n	8005e58 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8005e42:	4b65      	ldr	r3, [pc, #404]	; (8005fd8 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8005e44:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005e48:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8005e4c:	687b      	ldr	r3, [r7, #4]
 8005e4e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005e50:	4961      	ldr	r1, [pc, #388]	; (8005fd8 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8005e52:	4313      	orrs	r3, r2
 8005e54:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C4)  

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8005e58:	687b      	ldr	r3, [r7, #4]
 8005e5a:	681b      	ldr	r3, [r3, #0]
 8005e5c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005e60:	2b00      	cmp	r3, #0
 8005e62:	d00a      	beq.n	8005e7a <HAL_RCCEx_PeriphCLKConfig+0x2a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8005e64:	4b5c      	ldr	r3, [pc, #368]	; (8005fd8 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8005e66:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8005e6a:	f023 0203 	bic.w	r2, r3, #3
 8005e6e:	687b      	ldr	r3, [r7, #4]
 8005e70:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005e72:	4959      	ldr	r1, [pc, #356]	; (8005fd8 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8005e74:	4313      	orrs	r3, r2
 8005e76:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
  }

#endif /* I2C4 */

  /*-------------------------- LPTIM1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8005e7a:	687b      	ldr	r3, [r7, #4]
 8005e7c:	681b      	ldr	r3, [r3, #0]
 8005e7e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8005e82:	2b00      	cmp	r3, #0
 8005e84:	d00a      	beq.n	8005e9c <HAL_RCCEx_PeriphCLKConfig+0x2c4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8005e86:	4b54      	ldr	r3, [pc, #336]	; (8005fd8 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8005e88:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005e8c:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8005e90:	687b      	ldr	r3, [r7, #4]
 8005e92:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005e94:	4950      	ldr	r1, [pc, #320]	; (8005fd8 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8005e96:	4313      	orrs	r3, r2
 8005e98:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8005e9c:	687b      	ldr	r3, [r7, #4]
 8005e9e:	681b      	ldr	r3, [r3, #0]
 8005ea0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005ea4:	2b00      	cmp	r3, #0
 8005ea6:	d015      	beq.n	8005ed4 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure the SAI1 interface clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8005ea8:	4b4b      	ldr	r3, [pc, #300]	; (8005fd8 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8005eaa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005eae:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8005eb2:	687b      	ldr	r3, [r7, #4]
 8005eb4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005eb6:	4948      	ldr	r1, [pc, #288]	; (8005fd8 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8005eb8:	4313      	orrs	r3, r2
 8005eba:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLL)
 8005ebe:	687b      	ldr	r3, [r7, #4]
 8005ec0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005ec2:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005ec6:	d105      	bne.n	8005ed4 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8005ec8:	4b43      	ldr	r3, [pc, #268]	; (8005fd8 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8005eca:	68db      	ldr	r3, [r3, #12]
 8005ecc:	4a42      	ldr	r2, [pc, #264]	; (8005fd8 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8005ece:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8005ed2:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- I2S clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 8005ed4:	687b      	ldr	r3, [r7, #4]
 8005ed6:	681b      	ldr	r3, [r3, #0]
 8005ed8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005edc:	2b00      	cmp	r3, #0
 8005ede:	d015      	beq.n	8005f0c <HAL_RCCEx_PeriphCLKConfig+0x334>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure the I2S interface clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8005ee0:	4b3d      	ldr	r3, [pc, #244]	; (8005fd8 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8005ee2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005ee6:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8005eea:	687b      	ldr	r3, [r7, #4]
 8005eec:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005eee:	493a      	ldr	r1, [pc, #232]	; (8005fd8 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8005ef0:	4313      	orrs	r3, r2
 8005ef2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLL)
 8005ef6:	687b      	ldr	r3, [r7, #4]
 8005ef8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005efa:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8005efe:	d105      	bne.n	8005f0c <HAL_RCCEx_PeriphCLKConfig+0x334>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8005f00:	4b35      	ldr	r3, [pc, #212]	; (8005fd8 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8005f02:	68db      	ldr	r3, [r3, #12]
 8005f04:	4a34      	ldr	r2, [pc, #208]	; (8005fd8 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8005f06:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8005f0a:	60d3      	str	r3, [r2, #12]
    }
  }

#if defined(FDCAN1)
  /*-------------------------- FDCAN clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8005f0c:	687b      	ldr	r3, [r7, #4]
 8005f0e:	681b      	ldr	r3, [r3, #0]
 8005f10:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8005f14:	2b00      	cmp	r3, #0
 8005f16:	d015      	beq.n	8005f44 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN interface clock source */
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8005f18:	4b2f      	ldr	r3, [pc, #188]	; (8005fd8 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8005f1a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005f1e:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8005f22:	687b      	ldr	r3, [r7, #4]
 8005f24:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005f26:	492c      	ldr	r1, [pc, #176]	; (8005fd8 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8005f28:	4313      	orrs	r3, r2
 8005f2a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 8005f2e:	687b      	ldr	r3, [r7, #4]
 8005f30:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005f32:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8005f36:	d105      	bne.n	8005f44 <HAL_RCCEx_PeriphCLKConfig+0x36c>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8005f38:	4b27      	ldr	r3, [pc, #156]	; (8005fd8 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8005f3a:	68db      	ldr	r3, [r3, #12]
 8005f3c:	4a26      	ldr	r2, [pc, #152]	; (8005fd8 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8005f3e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8005f42:	60d3      	str	r3, [r2, #12]
#endif /* FDCAN1 */

#if defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8005f44:	687b      	ldr	r3, [r7, #4]
 8005f46:	681b      	ldr	r3, [r3, #0]
 8005f48:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8005f4c:	2b00      	cmp	r3, #0
 8005f4e:	d015      	beq.n	8005f7c <HAL_RCCEx_PeriphCLKConfig+0x3a4>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8005f50:	4b21      	ldr	r3, [pc, #132]	; (8005fd8 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8005f52:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005f56:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8005f5a:	687b      	ldr	r3, [r7, #4]
 8005f5c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005f5e:	491e      	ldr	r1, [pc, #120]	; (8005fd8 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8005f60:	4313      	orrs	r3, r2
 8005f62:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8005f66:	687b      	ldr	r3, [r7, #4]
 8005f68:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005f6a:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8005f6e:	d105      	bne.n	8005f7c <HAL_RCCEx_PeriphCLKConfig+0x3a4>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8005f70:	4b19      	ldr	r3, [pc, #100]	; (8005fd8 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8005f72:	68db      	ldr	r3, [r3, #12]
 8005f74:	4a18      	ldr	r2, [pc, #96]	; (8005fd8 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8005f76:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8005f7a:	60d3      	str	r3, [r2, #12]
  }

#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8005f7c:	687b      	ldr	r3, [r7, #4]
 8005f7e:	681b      	ldr	r3, [r3, #0]
 8005f80:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005f84:	2b00      	cmp	r3, #0
 8005f86:	d015      	beq.n	8005fb4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8005f88:	4b13      	ldr	r3, [pc, #76]	; (8005fd8 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8005f8a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005f8e:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8005f92:	687b      	ldr	r3, [r7, #4]
 8005f94:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005f96:	4910      	ldr	r1, [pc, #64]	; (8005fd8 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8005f98:	4313      	orrs	r3, r2
 8005f9a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8005f9e:	687b      	ldr	r3, [r7, #4]
 8005fa0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005fa2:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8005fa6:	d105      	bne.n	8005fb4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8005fa8:	4b0b      	ldr	r3, [pc, #44]	; (8005fd8 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8005faa:	68db      	ldr	r3, [r3, #12]
 8005fac:	4a0a      	ldr	r2, [pc, #40]	; (8005fd8 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8005fae:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8005fb2:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- ADC12 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 8005fb4:	687b      	ldr	r3, [r7, #4]
 8005fb6:	681b      	ldr	r3, [r3, #0]
 8005fb8:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8005fbc:	2b00      	cmp	r3, #0
 8005fbe:	d018      	beq.n	8005ff2 <HAL_RCCEx_PeriphCLKConfig+0x41a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12CLKSOURCE(PeriphClkInit->Adc12ClockSelection));

    /* Configure the ADC12 interface clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 8005fc0:	4b05      	ldr	r3, [pc, #20]	; (8005fd8 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8005fc2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005fc6:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8005fca:	687b      	ldr	r3, [r7, #4]
 8005fcc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005fce:	4902      	ldr	r1, [pc, #8]	; (8005fd8 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8005fd0:	4313      	orrs	r3, r2
 8005fd2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 8005fd6:	e001      	b.n	8005fdc <HAL_RCCEx_PeriphCLKConfig+0x404>
 8005fd8:	40021000 	.word	0x40021000
    
    if(PeriphClkInit->Adc12ClockSelection == RCC_ADC12CLKSOURCE_PLL)
 8005fdc:	687b      	ldr	r3, [r7, #4]
 8005fde:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005fe0:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8005fe4:	d105      	bne.n	8005ff2 <HAL_RCCEx_PeriphCLKConfig+0x41a>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8005fe6:	4b21      	ldr	r3, [pc, #132]	; (800606c <HAL_RCCEx_PeriphCLKConfig+0x494>)
 8005fe8:	68db      	ldr	r3, [r3, #12]
 8005fea:	4a20      	ldr	r2, [pc, #128]	; (800606c <HAL_RCCEx_PeriphCLKConfig+0x494>)
 8005fec:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005ff0:	60d3      	str	r3, [r2, #12]
    }
  }
  
#if defined(ADC345_COMMON)
  /*-------------------------- ADC345 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC345) == RCC_PERIPHCLK_ADC345)
 8005ff2:	687b      	ldr	r3, [r7, #4]
 8005ff4:	681b      	ldr	r3, [r3, #0]
 8005ff6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005ffa:	2b00      	cmp	r3, #0
 8005ffc:	d015      	beq.n	800602a <HAL_RCCEx_PeriphCLKConfig+0x452>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC345CLKSOURCE(PeriphClkInit->Adc345ClockSelection));

    /* Configure the ADC345 interface clock source */
    __HAL_RCC_ADC345_CONFIG(PeriphClkInit->Adc345ClockSelection);
 8005ffe:	4b1b      	ldr	r3, [pc, #108]	; (800606c <HAL_RCCEx_PeriphCLKConfig+0x494>)
 8006000:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006004:	f023 4240 	bic.w	r2, r3, #3221225472	; 0xc0000000
 8006008:	687b      	ldr	r3, [r7, #4]
 800600a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800600c:	4917      	ldr	r1, [pc, #92]	; (800606c <HAL_RCCEx_PeriphCLKConfig+0x494>)
 800600e:	4313      	orrs	r3, r2
 8006010:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Adc345ClockSelection == RCC_ADC345CLKSOURCE_PLL)
 8006014:	687b      	ldr	r3, [r7, #4]
 8006016:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006018:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800601c:	d105      	bne.n	800602a <HAL_RCCEx_PeriphCLKConfig+0x452>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 800601e:	4b13      	ldr	r3, [pc, #76]	; (800606c <HAL_RCCEx_PeriphCLKConfig+0x494>)
 8006020:	68db      	ldr	r3, [r3, #12]
 8006022:	4a12      	ldr	r2, [pc, #72]	; (800606c <HAL_RCCEx_PeriphCLKConfig+0x494>)
 8006024:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006028:	60d3      	str	r3, [r2, #12]
#endif /* ADC345_COMMON */

#if defined(QUADSPI)

  /*-------------------------- QuadSPIx clock source configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 800602a:	687b      	ldr	r3, [r7, #4]
 800602c:	681b      	ldr	r3, [r3, #0]
 800602e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8006032:	2b00      	cmp	r3, #0
 8006034:	d015      	beq.n	8006062 <HAL_RCCEx_PeriphCLKConfig+0x48a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_QSPICLKSOURCE(PeriphClkInit->QspiClockSelection));

    /* Configure the QuadSPI clock source */
    __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 8006036:	4b0d      	ldr	r3, [pc, #52]	; (800606c <HAL_RCCEx_PeriphCLKConfig+0x494>)
 8006038:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800603c:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8006040:	687b      	ldr	r3, [r7, #4]
 8006042:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006044:	4909      	ldr	r1, [pc, #36]	; (800606c <HAL_RCCEx_PeriphCLKConfig+0x494>)
 8006046:	4313      	orrs	r3, r2
 8006048:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c

    if(PeriphClkInit->QspiClockSelection == RCC_QSPICLKSOURCE_PLL)
 800604c:	687b      	ldr	r3, [r7, #4]
 800604e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006050:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8006054:	d105      	bne.n	8006062 <HAL_RCCEx_PeriphCLKConfig+0x48a>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8006056:	4b05      	ldr	r3, [pc, #20]	; (800606c <HAL_RCCEx_PeriphCLKConfig+0x494>)
 8006058:	68db      	ldr	r3, [r3, #12]
 800605a:	4a04      	ldr	r2, [pc, #16]	; (800606c <HAL_RCCEx_PeriphCLKConfig+0x494>)
 800605c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8006060:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* QUADSPI */

  return status;
 8006062:	7cbb      	ldrb	r3, [r7, #18]
}
 8006064:	4618      	mov	r0, r3
 8006066:	3718      	adds	r7, #24
 8006068:	46bd      	mov	sp, r7
 800606a:	bd80      	pop	{r7, pc}
 800606c:	40021000 	.word	0x40021000

08006070 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8006070:	b580      	push	{r7, lr}
 8006072:	b084      	sub	sp, #16
 8006074:	af00      	add	r7, sp, #0
 8006076:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8006078:	687b      	ldr	r3, [r7, #4]
 800607a:	2b00      	cmp	r3, #0
 800607c:	d101      	bne.n	8006082 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800607e:	2301      	movs	r3, #1
 8006080:	e084      	b.n	800618c <HAL_SPI_Init+0x11c>
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8006082:	687b      	ldr	r3, [r7, #4]
 8006084:	2200      	movs	r2, #0
 8006086:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8006088:	687b      	ldr	r3, [r7, #4]
 800608a:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 800608e:	b2db      	uxtb	r3, r3
 8006090:	2b00      	cmp	r3, #0
 8006092:	d106      	bne.n	80060a2 <HAL_SPI_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8006094:	687b      	ldr	r3, [r7, #4]
 8006096:	2200      	movs	r2, #0
 8006098:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800609c:	6878      	ldr	r0, [r7, #4]
 800609e:	f7fb fcd9 	bl	8001a54 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80060a2:	687b      	ldr	r3, [r7, #4]
 80060a4:	2202      	movs	r2, #2
 80060a6:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80060aa:	687b      	ldr	r3, [r7, #4]
 80060ac:	681b      	ldr	r3, [r3, #0]
 80060ae:	681a      	ldr	r2, [r3, #0]
 80060b0:	687b      	ldr	r3, [r7, #4]
 80060b2:	681b      	ldr	r3, [r3, #0]
 80060b4:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80060b8:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80060ba:	687b      	ldr	r3, [r7, #4]
 80060bc:	68db      	ldr	r3, [r3, #12]
 80060be:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 80060c2:	d902      	bls.n	80060ca <HAL_SPI_Init+0x5a>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 80060c4:	2300      	movs	r3, #0
 80060c6:	60fb      	str	r3, [r7, #12]
 80060c8:	e002      	b.n	80060d0 <HAL_SPI_Init+0x60>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 80060ca:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80060ce:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 80060d0:	687b      	ldr	r3, [r7, #4]
 80060d2:	68db      	ldr	r3, [r3, #12]
 80060d4:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 80060d8:	d007      	beq.n	80060ea <HAL_SPI_Init+0x7a>
 80060da:	687b      	ldr	r3, [r7, #4]
 80060dc:	68db      	ldr	r3, [r3, #12]
 80060de:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 80060e2:	d002      	beq.n	80060ea <HAL_SPI_Init+0x7a>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80060e4:	687b      	ldr	r3, [r7, #4]
 80060e6:	2200      	movs	r2, #0
 80060e8:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Align the CRC Length on the data size */
  if (hspi->Init.CRCLength == SPI_CRC_LENGTH_DATASIZE)
 80060ea:	687b      	ldr	r3, [r7, #4]
 80060ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80060ee:	2b00      	cmp	r3, #0
 80060f0:	d10b      	bne.n	800610a <HAL_SPI_Init+0x9a>
  {
    /* CRC Length aligned on the data size : value set by default */
    if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80060f2:	687b      	ldr	r3, [r7, #4]
 80060f4:	68db      	ldr	r3, [r3, #12]
 80060f6:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 80060fa:	d903      	bls.n	8006104 <HAL_SPI_Init+0x94>
    {
      hspi->Init.CRCLength = SPI_CRC_LENGTH_16BIT;
 80060fc:	687b      	ldr	r3, [r7, #4]
 80060fe:	2202      	movs	r2, #2
 8006100:	631a      	str	r2, [r3, #48]	; 0x30
 8006102:	e002      	b.n	800610a <HAL_SPI_Init+0x9a>
    }
    else
    {
      hspi->Init.CRCLength = SPI_CRC_LENGTH_8BIT;
 8006104:	687b      	ldr	r3, [r7, #4]
 8006106:	2201      	movs	r2, #1
 8006108:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction |
 800610a:	687b      	ldr	r3, [r7, #4]
 800610c:	685a      	ldr	r2, [r3, #4]
 800610e:	687b      	ldr	r3, [r7, #4]
 8006110:	689b      	ldr	r3, [r3, #8]
 8006112:	431a      	orrs	r2, r3
 8006114:	687b      	ldr	r3, [r7, #4]
 8006116:	691b      	ldr	r3, [r3, #16]
 8006118:	431a      	orrs	r2, r3
 800611a:	687b      	ldr	r3, [r7, #4]
 800611c:	695b      	ldr	r3, [r3, #20]
 800611e:	431a      	orrs	r2, r3
 8006120:	687b      	ldr	r3, [r7, #4]
 8006122:	699b      	ldr	r3, [r3, #24]
 8006124:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8006128:	431a      	orrs	r2, r3
 800612a:	687b      	ldr	r3, [r7, #4]
 800612c:	69db      	ldr	r3, [r3, #28]
 800612e:	431a      	orrs	r2, r3
 8006130:	687b      	ldr	r3, [r7, #4]
 8006132:	6a1b      	ldr	r3, [r3, #32]
 8006134:	ea42 0103 	orr.w	r1, r2, r3
 8006138:	687b      	ldr	r3, [r7, #4]
 800613a:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800613c:	687b      	ldr	r3, [r7, #4]
 800613e:	681b      	ldr	r3, [r3, #0]
 8006140:	430a      	orrs	r2, r1
 8006142:	601a      	str	r2, [r3, #0]
    hspi->Instance->CR1 |= SPI_CR1_CRCL;
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | hspi->Init.TIMode |
 8006144:	687b      	ldr	r3, [r7, #4]
 8006146:	699b      	ldr	r3, [r3, #24]
 8006148:	0c1b      	lsrs	r3, r3, #16
 800614a:	f003 0204 	and.w	r2, r3, #4
 800614e:	687b      	ldr	r3, [r7, #4]
 8006150:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006152:	431a      	orrs	r2, r3
 8006154:	687b      	ldr	r3, [r7, #4]
 8006156:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006158:	431a      	orrs	r2, r3
 800615a:	687b      	ldr	r3, [r7, #4]
 800615c:	68db      	ldr	r3, [r3, #12]
 800615e:	ea42 0103 	orr.w	r1, r2, r3
 8006162:	687b      	ldr	r3, [r7, #4]
 8006164:	681b      	ldr	r3, [r3, #0]
 8006166:	68fa      	ldr	r2, [r7, #12]
 8006168:	430a      	orrs	r2, r1
 800616a:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800616c:	687b      	ldr	r3, [r7, #4]
 800616e:	681b      	ldr	r3, [r3, #0]
 8006170:	69da      	ldr	r2, [r3, #28]
 8006172:	687b      	ldr	r3, [r7, #4]
 8006174:	681b      	ldr	r3, [r3, #0]
 8006176:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800617a:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800617c:	687b      	ldr	r3, [r7, #4]
 800617e:	2200      	movs	r2, #0
 8006180:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8006182:	687b      	ldr	r3, [r7, #4]
 8006184:	2201      	movs	r2, #1
 8006186:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 800618a:	2300      	movs	r3, #0
}
 800618c:	4618      	mov	r0, r3
 800618e:	3710      	adds	r7, #16
 8006190:	46bd      	mov	sp, r7
 8006192:	bd80      	pop	{r7, pc}

08006194 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006194:	b580      	push	{r7, lr}
 8006196:	b088      	sub	sp, #32
 8006198:	af00      	add	r7, sp, #0
 800619a:	60f8      	str	r0, [r7, #12]
 800619c:	60b9      	str	r1, [r7, #8]
 800619e:	603b      	str	r3, [r7, #0]
 80061a0:	4613      	mov	r3, r2
 80061a2:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 80061a4:	2300      	movs	r3, #0
 80061a6:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 80061a8:	68fb      	ldr	r3, [r7, #12]
 80061aa:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 80061ae:	2b01      	cmp	r3, #1
 80061b0:	d101      	bne.n	80061b6 <HAL_SPI_Transmit+0x22>
 80061b2:	2302      	movs	r3, #2
 80061b4:	e150      	b.n	8006458 <HAL_SPI_Transmit+0x2c4>
 80061b6:	68fb      	ldr	r3, [r7, #12]
 80061b8:	2201      	movs	r2, #1
 80061ba:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80061be:	f7fc fa65 	bl	800268c <HAL_GetTick>
 80061c2:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 80061c4:	88fb      	ldrh	r3, [r7, #6]
 80061c6:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 80061c8:	68fb      	ldr	r3, [r7, #12]
 80061ca:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 80061ce:	b2db      	uxtb	r3, r3
 80061d0:	2b01      	cmp	r3, #1
 80061d2:	d002      	beq.n	80061da <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 80061d4:	2302      	movs	r3, #2
 80061d6:	77fb      	strb	r3, [r7, #31]
    goto error;
 80061d8:	e135      	b.n	8006446 <HAL_SPI_Transmit+0x2b2>
  }

  if ((pData == NULL) || (Size == 0U))
 80061da:	68bb      	ldr	r3, [r7, #8]
 80061dc:	2b00      	cmp	r3, #0
 80061de:	d002      	beq.n	80061e6 <HAL_SPI_Transmit+0x52>
 80061e0:	88fb      	ldrh	r3, [r7, #6]
 80061e2:	2b00      	cmp	r3, #0
 80061e4:	d102      	bne.n	80061ec <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 80061e6:	2301      	movs	r3, #1
 80061e8:	77fb      	strb	r3, [r7, #31]
    goto error;
 80061ea:	e12c      	b.n	8006446 <HAL_SPI_Transmit+0x2b2>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 80061ec:	68fb      	ldr	r3, [r7, #12]
 80061ee:	2203      	movs	r2, #3
 80061f0:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80061f4:	68fb      	ldr	r3, [r7, #12]
 80061f6:	2200      	movs	r2, #0
 80061f8:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 80061fa:	68fb      	ldr	r3, [r7, #12]
 80061fc:	68ba      	ldr	r2, [r7, #8]
 80061fe:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = Size;
 8006200:	68fb      	ldr	r3, [r7, #12]
 8006202:	88fa      	ldrh	r2, [r7, #6]
 8006204:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = Size;
 8006206:	68fb      	ldr	r3, [r7, #12]
 8006208:	88fa      	ldrh	r2, [r7, #6]
 800620a:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 800620c:	68fb      	ldr	r3, [r7, #12]
 800620e:	2200      	movs	r2, #0
 8006210:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = 0U;
 8006212:	68fb      	ldr	r3, [r7, #12]
 8006214:	2200      	movs	r2, #0
 8006216:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->RxXferCount = 0U;
 800621a:	68fb      	ldr	r3, [r7, #12]
 800621c:	2200      	movs	r2, #0
 800621e:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->TxISR       = NULL;
 8006222:	68fb      	ldr	r3, [r7, #12]
 8006224:	2200      	movs	r2, #0
 8006226:	651a      	str	r2, [r3, #80]	; 0x50
  hspi->RxISR       = NULL;
 8006228:	68fb      	ldr	r3, [r7, #12]
 800622a:	2200      	movs	r2, #0
 800622c:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800622e:	68fb      	ldr	r3, [r7, #12]
 8006230:	689b      	ldr	r3, [r3, #8]
 8006232:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006236:	d107      	bne.n	8006248 <HAL_SPI_Transmit+0xb4>
  {
    SPI_1LINE_TX(hspi);
 8006238:	68fb      	ldr	r3, [r7, #12]
 800623a:	681b      	ldr	r3, [r3, #0]
 800623c:	681a      	ldr	r2, [r3, #0]
 800623e:	68fb      	ldr	r3, [r7, #12]
 8006240:	681b      	ldr	r3, [r3, #0]
 8006242:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8006246:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8006248:	68fb      	ldr	r3, [r7, #12]
 800624a:	681b      	ldr	r3, [r3, #0]
 800624c:	681b      	ldr	r3, [r3, #0]
 800624e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006252:	2b40      	cmp	r3, #64	; 0x40
 8006254:	d007      	beq.n	8006266 <HAL_SPI_Transmit+0xd2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8006256:	68fb      	ldr	r3, [r7, #12]
 8006258:	681b      	ldr	r3, [r3, #0]
 800625a:	681a      	ldr	r2, [r3, #0]
 800625c:	68fb      	ldr	r3, [r7, #12]
 800625e:	681b      	ldr	r3, [r3, #0]
 8006260:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8006264:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8006266:	68fb      	ldr	r3, [r7, #12]
 8006268:	68db      	ldr	r3, [r3, #12]
 800626a:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800626e:	d94b      	bls.n	8006308 <HAL_SPI_Transmit+0x174>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8006270:	68fb      	ldr	r3, [r7, #12]
 8006272:	685b      	ldr	r3, [r3, #4]
 8006274:	2b00      	cmp	r3, #0
 8006276:	d002      	beq.n	800627e <HAL_SPI_Transmit+0xea>
 8006278:	8afb      	ldrh	r3, [r7, #22]
 800627a:	2b01      	cmp	r3, #1
 800627c:	d13e      	bne.n	80062fc <HAL_SPI_Transmit+0x168>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800627e:	68fb      	ldr	r3, [r7, #12]
 8006280:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006282:	881a      	ldrh	r2, [r3, #0]
 8006284:	68fb      	ldr	r3, [r7, #12]
 8006286:	681b      	ldr	r3, [r3, #0]
 8006288:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800628a:	68fb      	ldr	r3, [r7, #12]
 800628c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800628e:	1c9a      	adds	r2, r3, #2
 8006290:	68fb      	ldr	r3, [r7, #12]
 8006292:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 8006294:	68fb      	ldr	r3, [r7, #12]
 8006296:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006298:	b29b      	uxth	r3, r3
 800629a:	3b01      	subs	r3, #1
 800629c:	b29a      	uxth	r2, r3
 800629e:	68fb      	ldr	r3, [r7, #12]
 80062a0:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 80062a2:	e02b      	b.n	80062fc <HAL_SPI_Transmit+0x168>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80062a4:	68fb      	ldr	r3, [r7, #12]
 80062a6:	681b      	ldr	r3, [r3, #0]
 80062a8:	689b      	ldr	r3, [r3, #8]
 80062aa:	f003 0302 	and.w	r3, r3, #2
 80062ae:	2b02      	cmp	r3, #2
 80062b0:	d112      	bne.n	80062d8 <HAL_SPI_Transmit+0x144>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80062b2:	68fb      	ldr	r3, [r7, #12]
 80062b4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80062b6:	881a      	ldrh	r2, [r3, #0]
 80062b8:	68fb      	ldr	r3, [r7, #12]
 80062ba:	681b      	ldr	r3, [r3, #0]
 80062bc:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80062be:	68fb      	ldr	r3, [r7, #12]
 80062c0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80062c2:	1c9a      	adds	r2, r3, #2
 80062c4:	68fb      	ldr	r3, [r7, #12]
 80062c6:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 80062c8:	68fb      	ldr	r3, [r7, #12]
 80062ca:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80062cc:	b29b      	uxth	r3, r3
 80062ce:	3b01      	subs	r3, #1
 80062d0:	b29a      	uxth	r2, r3
 80062d2:	68fb      	ldr	r3, [r7, #12]
 80062d4:	87da      	strh	r2, [r3, #62]	; 0x3e
 80062d6:	e011      	b.n	80062fc <HAL_SPI_Transmit+0x168>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80062d8:	f7fc f9d8 	bl	800268c <HAL_GetTick>
 80062dc:	4602      	mov	r2, r0
 80062de:	69bb      	ldr	r3, [r7, #24]
 80062e0:	1ad3      	subs	r3, r2, r3
 80062e2:	683a      	ldr	r2, [r7, #0]
 80062e4:	429a      	cmp	r2, r3
 80062e6:	d803      	bhi.n	80062f0 <HAL_SPI_Transmit+0x15c>
 80062e8:	683b      	ldr	r3, [r7, #0]
 80062ea:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80062ee:	d102      	bne.n	80062f6 <HAL_SPI_Transmit+0x162>
 80062f0:	683b      	ldr	r3, [r7, #0]
 80062f2:	2b00      	cmp	r3, #0
 80062f4:	d102      	bne.n	80062fc <HAL_SPI_Transmit+0x168>
        {
          errorcode = HAL_TIMEOUT;
 80062f6:	2303      	movs	r3, #3
 80062f8:	77fb      	strb	r3, [r7, #31]
          goto error;
 80062fa:	e0a4      	b.n	8006446 <HAL_SPI_Transmit+0x2b2>
    while (hspi->TxXferCount > 0U)
 80062fc:	68fb      	ldr	r3, [r7, #12]
 80062fe:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006300:	b29b      	uxth	r3, r3
 8006302:	2b00      	cmp	r3, #0
 8006304:	d1ce      	bne.n	80062a4 <HAL_SPI_Transmit+0x110>
 8006306:	e07c      	b.n	8006402 <HAL_SPI_Transmit+0x26e>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8006308:	68fb      	ldr	r3, [r7, #12]
 800630a:	685b      	ldr	r3, [r3, #4]
 800630c:	2b00      	cmp	r3, #0
 800630e:	d002      	beq.n	8006316 <HAL_SPI_Transmit+0x182>
 8006310:	8afb      	ldrh	r3, [r7, #22]
 8006312:	2b01      	cmp	r3, #1
 8006314:	d170      	bne.n	80063f8 <HAL_SPI_Transmit+0x264>
    {
      if (hspi->TxXferCount > 1U)
 8006316:	68fb      	ldr	r3, [r7, #12]
 8006318:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800631a:	b29b      	uxth	r3, r3
 800631c:	2b01      	cmp	r3, #1
 800631e:	d912      	bls.n	8006346 <HAL_SPI_Transmit+0x1b2>
      {
        /* write on the data register in packing mode */
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8006320:	68fb      	ldr	r3, [r7, #12]
 8006322:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006324:	881a      	ldrh	r2, [r3, #0]
 8006326:	68fb      	ldr	r3, [r7, #12]
 8006328:	681b      	ldr	r3, [r3, #0]
 800632a:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800632c:	68fb      	ldr	r3, [r7, #12]
 800632e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006330:	1c9a      	adds	r2, r3, #2
 8006332:	68fb      	ldr	r3, [r7, #12]
 8006334:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount -= 2U;
 8006336:	68fb      	ldr	r3, [r7, #12]
 8006338:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800633a:	b29b      	uxth	r3, r3
 800633c:	3b02      	subs	r3, #2
 800633e:	b29a      	uxth	r2, r3
 8006340:	68fb      	ldr	r3, [r7, #12]
 8006342:	87da      	strh	r2, [r3, #62]	; 0x3e
 8006344:	e058      	b.n	80063f8 <HAL_SPI_Transmit+0x264>
      }
      else
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8006346:	68fb      	ldr	r3, [r7, #12]
 8006348:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800634a:	68fb      	ldr	r3, [r7, #12]
 800634c:	681b      	ldr	r3, [r3, #0]
 800634e:	330c      	adds	r3, #12
 8006350:	7812      	ldrb	r2, [r2, #0]
 8006352:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr ++;
 8006354:	68fb      	ldr	r3, [r7, #12]
 8006356:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006358:	1c5a      	adds	r2, r3, #1
 800635a:	68fb      	ldr	r3, [r7, #12]
 800635c:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 800635e:	68fb      	ldr	r3, [r7, #12]
 8006360:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006362:	b29b      	uxth	r3, r3
 8006364:	3b01      	subs	r3, #1
 8006366:	b29a      	uxth	r2, r3
 8006368:	68fb      	ldr	r3, [r7, #12]
 800636a:	87da      	strh	r2, [r3, #62]	; 0x3e
      }
    }
    while (hspi->TxXferCount > 0U)
 800636c:	e044      	b.n	80063f8 <HAL_SPI_Transmit+0x264>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800636e:	68fb      	ldr	r3, [r7, #12]
 8006370:	681b      	ldr	r3, [r3, #0]
 8006372:	689b      	ldr	r3, [r3, #8]
 8006374:	f003 0302 	and.w	r3, r3, #2
 8006378:	2b02      	cmp	r3, #2
 800637a:	d12b      	bne.n	80063d4 <HAL_SPI_Transmit+0x240>
      {
        if (hspi->TxXferCount > 1U)
 800637c:	68fb      	ldr	r3, [r7, #12]
 800637e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006380:	b29b      	uxth	r3, r3
 8006382:	2b01      	cmp	r3, #1
 8006384:	d912      	bls.n	80063ac <HAL_SPI_Transmit+0x218>
        {
          /* write on the data register in packing mode */
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8006386:	68fb      	ldr	r3, [r7, #12]
 8006388:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800638a:	881a      	ldrh	r2, [r3, #0]
 800638c:	68fb      	ldr	r3, [r7, #12]
 800638e:	681b      	ldr	r3, [r3, #0]
 8006390:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8006392:	68fb      	ldr	r3, [r7, #12]
 8006394:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006396:	1c9a      	adds	r2, r3, #2
 8006398:	68fb      	ldr	r3, [r7, #12]
 800639a:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount -= 2U;
 800639c:	68fb      	ldr	r3, [r7, #12]
 800639e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80063a0:	b29b      	uxth	r3, r3
 80063a2:	3b02      	subs	r3, #2
 80063a4:	b29a      	uxth	r2, r3
 80063a6:	68fb      	ldr	r3, [r7, #12]
 80063a8:	87da      	strh	r2, [r3, #62]	; 0x3e
 80063aa:	e025      	b.n	80063f8 <HAL_SPI_Transmit+0x264>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80063ac:	68fb      	ldr	r3, [r7, #12]
 80063ae:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80063b0:	68fb      	ldr	r3, [r7, #12]
 80063b2:	681b      	ldr	r3, [r3, #0]
 80063b4:	330c      	adds	r3, #12
 80063b6:	7812      	ldrb	r2, [r2, #0]
 80063b8:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 80063ba:	68fb      	ldr	r3, [r7, #12]
 80063bc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80063be:	1c5a      	adds	r2, r3, #1
 80063c0:	68fb      	ldr	r3, [r7, #12]
 80063c2:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount--;
 80063c4:	68fb      	ldr	r3, [r7, #12]
 80063c6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80063c8:	b29b      	uxth	r3, r3
 80063ca:	3b01      	subs	r3, #1
 80063cc:	b29a      	uxth	r2, r3
 80063ce:	68fb      	ldr	r3, [r7, #12]
 80063d0:	87da      	strh	r2, [r3, #62]	; 0x3e
 80063d2:	e011      	b.n	80063f8 <HAL_SPI_Transmit+0x264>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80063d4:	f7fc f95a 	bl	800268c <HAL_GetTick>
 80063d8:	4602      	mov	r2, r0
 80063da:	69bb      	ldr	r3, [r7, #24]
 80063dc:	1ad3      	subs	r3, r2, r3
 80063de:	683a      	ldr	r2, [r7, #0]
 80063e0:	429a      	cmp	r2, r3
 80063e2:	d803      	bhi.n	80063ec <HAL_SPI_Transmit+0x258>
 80063e4:	683b      	ldr	r3, [r7, #0]
 80063e6:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80063ea:	d102      	bne.n	80063f2 <HAL_SPI_Transmit+0x25e>
 80063ec:	683b      	ldr	r3, [r7, #0]
 80063ee:	2b00      	cmp	r3, #0
 80063f0:	d102      	bne.n	80063f8 <HAL_SPI_Transmit+0x264>
        {
          errorcode = HAL_TIMEOUT;
 80063f2:	2303      	movs	r3, #3
 80063f4:	77fb      	strb	r3, [r7, #31]
          goto error;
 80063f6:	e026      	b.n	8006446 <HAL_SPI_Transmit+0x2b2>
    while (hspi->TxXferCount > 0U)
 80063f8:	68fb      	ldr	r3, [r7, #12]
 80063fa:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80063fc:	b29b      	uxth	r3, r3
 80063fe:	2b00      	cmp	r3, #0
 8006400:	d1b5      	bne.n	800636e <HAL_SPI_Transmit+0x1da>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8006402:	69ba      	ldr	r2, [r7, #24]
 8006404:	6839      	ldr	r1, [r7, #0]
 8006406:	68f8      	ldr	r0, [r7, #12]
 8006408:	f000 f901 	bl	800660e <SPI_EndRxTxTransaction>
 800640c:	4603      	mov	r3, r0
 800640e:	2b00      	cmp	r3, #0
 8006410:	d002      	beq.n	8006418 <HAL_SPI_Transmit+0x284>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8006412:	68fb      	ldr	r3, [r7, #12]
 8006414:	2220      	movs	r2, #32
 8006416:	661a      	str	r2, [r3, #96]	; 0x60
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8006418:	68fb      	ldr	r3, [r7, #12]
 800641a:	689b      	ldr	r3, [r3, #8]
 800641c:	2b00      	cmp	r3, #0
 800641e:	d10a      	bne.n	8006436 <HAL_SPI_Transmit+0x2a2>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8006420:	2300      	movs	r3, #0
 8006422:	613b      	str	r3, [r7, #16]
 8006424:	68fb      	ldr	r3, [r7, #12]
 8006426:	681b      	ldr	r3, [r3, #0]
 8006428:	68db      	ldr	r3, [r3, #12]
 800642a:	613b      	str	r3, [r7, #16]
 800642c:	68fb      	ldr	r3, [r7, #12]
 800642e:	681b      	ldr	r3, [r3, #0]
 8006430:	689b      	ldr	r3, [r3, #8]
 8006432:	613b      	str	r3, [r7, #16]
 8006434:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8006436:	68fb      	ldr	r3, [r7, #12]
 8006438:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800643a:	2b00      	cmp	r3, #0
 800643c:	d002      	beq.n	8006444 <HAL_SPI_Transmit+0x2b0>
  {
    errorcode = HAL_ERROR;
 800643e:	2301      	movs	r3, #1
 8006440:	77fb      	strb	r3, [r7, #31]
 8006442:	e000      	b.n	8006446 <HAL_SPI_Transmit+0x2b2>
  }

error:
 8006444:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8006446:	68fb      	ldr	r3, [r7, #12]
 8006448:	2201      	movs	r2, #1
 800644a:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 800644e:	68fb      	ldr	r3, [r7, #12]
 8006450:	2200      	movs	r2, #0
 8006452:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 8006456:	7ffb      	ldrb	r3, [r7, #31]
}
 8006458:	4618      	mov	r0, r3
 800645a:	3720      	adds	r7, #32
 800645c:	46bd      	mov	sp, r7
 800645e:	bd80      	pop	{r7, pc}

08006460 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8006460:	b580      	push	{r7, lr}
 8006462:	b084      	sub	sp, #16
 8006464:	af00      	add	r7, sp, #0
 8006466:	60f8      	str	r0, [r7, #12]
 8006468:	60b9      	str	r1, [r7, #8]
 800646a:	603b      	str	r3, [r7, #0]
 800646c:	4613      	mov	r3, r2
 800646e:	71fb      	strb	r3, [r7, #7]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8006470:	e04c      	b.n	800650c <SPI_WaitFlagStateUntilTimeout+0xac>
  {
    if (Timeout != HAL_MAX_DELAY)
 8006472:	683b      	ldr	r3, [r7, #0]
 8006474:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8006478:	d048      	beq.n	800650c <SPI_WaitFlagStateUntilTimeout+0xac>
    {
      if (((HAL_GetTick() - Tickstart) >= Timeout) || (Timeout == 0U))
 800647a:	f7fc f907 	bl	800268c <HAL_GetTick>
 800647e:	4602      	mov	r2, r0
 8006480:	69bb      	ldr	r3, [r7, #24]
 8006482:	1ad3      	subs	r3, r2, r3
 8006484:	683a      	ldr	r2, [r7, #0]
 8006486:	429a      	cmp	r2, r3
 8006488:	d902      	bls.n	8006490 <SPI_WaitFlagStateUntilTimeout+0x30>
 800648a:	683b      	ldr	r3, [r7, #0]
 800648c:	2b00      	cmp	r3, #0
 800648e:	d13d      	bne.n	800650c <SPI_WaitFlagStateUntilTimeout+0xac>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
        on both master and slave sides in order to resynchronize the master
        and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8006490:	68fb      	ldr	r3, [r7, #12]
 8006492:	681b      	ldr	r3, [r3, #0]
 8006494:	685a      	ldr	r2, [r3, #4]
 8006496:	68fb      	ldr	r3, [r7, #12]
 8006498:	681b      	ldr	r3, [r3, #0]
 800649a:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 800649e:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80064a0:	68fb      	ldr	r3, [r7, #12]
 80064a2:	685b      	ldr	r3, [r3, #4]
 80064a4:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80064a8:	d111      	bne.n	80064ce <SPI_WaitFlagStateUntilTimeout+0x6e>
 80064aa:	68fb      	ldr	r3, [r7, #12]
 80064ac:	689b      	ldr	r3, [r3, #8]
 80064ae:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80064b2:	d004      	beq.n	80064be <SPI_WaitFlagStateUntilTimeout+0x5e>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80064b4:	68fb      	ldr	r3, [r7, #12]
 80064b6:	689b      	ldr	r3, [r3, #8]
 80064b8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80064bc:	d107      	bne.n	80064ce <SPI_WaitFlagStateUntilTimeout+0x6e>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 80064be:	68fb      	ldr	r3, [r7, #12]
 80064c0:	681b      	ldr	r3, [r3, #0]
 80064c2:	681a      	ldr	r2, [r3, #0]
 80064c4:	68fb      	ldr	r3, [r7, #12]
 80064c6:	681b      	ldr	r3, [r3, #0]
 80064c8:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80064cc:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80064ce:	68fb      	ldr	r3, [r7, #12]
 80064d0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80064d2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80064d6:	d10f      	bne.n	80064f8 <SPI_WaitFlagStateUntilTimeout+0x98>
        {
          SPI_RESET_CRC(hspi);
 80064d8:	68fb      	ldr	r3, [r7, #12]
 80064da:	681b      	ldr	r3, [r3, #0]
 80064dc:	681a      	ldr	r2, [r3, #0]
 80064de:	68fb      	ldr	r3, [r7, #12]
 80064e0:	681b      	ldr	r3, [r3, #0]
 80064e2:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80064e6:	601a      	str	r2, [r3, #0]
 80064e8:	68fb      	ldr	r3, [r7, #12]
 80064ea:	681b      	ldr	r3, [r3, #0]
 80064ec:	681a      	ldr	r2, [r3, #0]
 80064ee:	68fb      	ldr	r3, [r7, #12]
 80064f0:	681b      	ldr	r3, [r3, #0]
 80064f2:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80064f6:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 80064f8:	68fb      	ldr	r3, [r7, #12]
 80064fa:	2201      	movs	r2, #1
 80064fc:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8006500:	68fb      	ldr	r3, [r7, #12]
 8006502:	2200      	movs	r2, #0
 8006504:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 8006508:	2303      	movs	r3, #3
 800650a:	e00f      	b.n	800652c <SPI_WaitFlagStateUntilTimeout+0xcc>
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800650c:	68fb      	ldr	r3, [r7, #12]
 800650e:	681b      	ldr	r3, [r3, #0]
 8006510:	689a      	ldr	r2, [r3, #8]
 8006512:	68bb      	ldr	r3, [r7, #8]
 8006514:	4013      	ands	r3, r2
 8006516:	68ba      	ldr	r2, [r7, #8]
 8006518:	429a      	cmp	r2, r3
 800651a:	bf0c      	ite	eq
 800651c:	2301      	moveq	r3, #1
 800651e:	2300      	movne	r3, #0
 8006520:	b2db      	uxtb	r3, r3
 8006522:	461a      	mov	r2, r3
 8006524:	79fb      	ldrb	r3, [r7, #7]
 8006526:	429a      	cmp	r2, r3
 8006528:	d1a3      	bne.n	8006472 <SPI_WaitFlagStateUntilTimeout+0x12>
      }
    }
  }

  return HAL_OK;
 800652a:	2300      	movs	r3, #0
}
 800652c:	4618      	mov	r0, r3
 800652e:	3710      	adds	r7, #16
 8006530:	46bd      	mov	sp, r7
 8006532:	bd80      	pop	{r7, pc}

08006534 <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8006534:	b580      	push	{r7, lr}
 8006536:	b084      	sub	sp, #16
 8006538:	af00      	add	r7, sp, #0
 800653a:	60f8      	str	r0, [r7, #12]
 800653c:	60b9      	str	r1, [r7, #8]
 800653e:	607a      	str	r2, [r7, #4]
 8006540:	603b      	str	r3, [r7, #0]
  while ((hspi->Instance->SR & Fifo) != State)
 8006542:	e057      	b.n	80065f4 <SPI_WaitFifoStateUntilTimeout+0xc0>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 8006544:	68bb      	ldr	r3, [r7, #8]
 8006546:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 800654a:	d106      	bne.n	800655a <SPI_WaitFifoStateUntilTimeout+0x26>
 800654c:	687b      	ldr	r3, [r7, #4]
 800654e:	2b00      	cmp	r3, #0
 8006550:	d103      	bne.n	800655a <SPI_WaitFifoStateUntilTimeout+0x26>
    {
      /* Read 8bit CRC to flush Data Register */
      READ_REG(*((__IO uint8_t *)&hspi->Instance->DR));
 8006552:	68fb      	ldr	r3, [r7, #12]
 8006554:	681b      	ldr	r3, [r3, #0]
 8006556:	330c      	adds	r3, #12
 8006558:	781b      	ldrb	r3, [r3, #0]
    }

    if (Timeout != HAL_MAX_DELAY)
 800655a:	683b      	ldr	r3, [r7, #0]
 800655c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8006560:	d048      	beq.n	80065f4 <SPI_WaitFifoStateUntilTimeout+0xc0>
    {
      if (((HAL_GetTick() - Tickstart) >= Timeout) || (Timeout == 0U))
 8006562:	f7fc f893 	bl	800268c <HAL_GetTick>
 8006566:	4602      	mov	r2, r0
 8006568:	69bb      	ldr	r3, [r7, #24]
 800656a:	1ad3      	subs	r3, r2, r3
 800656c:	683a      	ldr	r2, [r7, #0]
 800656e:	429a      	cmp	r2, r3
 8006570:	d902      	bls.n	8006578 <SPI_WaitFifoStateUntilTimeout+0x44>
 8006572:	683b      	ldr	r3, [r7, #0]
 8006574:	2b00      	cmp	r3, #0
 8006576:	d13d      	bne.n	80065f4 <SPI_WaitFifoStateUntilTimeout+0xc0>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8006578:	68fb      	ldr	r3, [r7, #12]
 800657a:	681b      	ldr	r3, [r3, #0]
 800657c:	685a      	ldr	r2, [r3, #4]
 800657e:	68fb      	ldr	r3, [r7, #12]
 8006580:	681b      	ldr	r3, [r3, #0]
 8006582:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8006586:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8006588:	68fb      	ldr	r3, [r7, #12]
 800658a:	685b      	ldr	r3, [r3, #4]
 800658c:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8006590:	d111      	bne.n	80065b6 <SPI_WaitFifoStateUntilTimeout+0x82>
 8006592:	68fb      	ldr	r3, [r7, #12]
 8006594:	689b      	ldr	r3, [r3, #8]
 8006596:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800659a:	d004      	beq.n	80065a6 <SPI_WaitFifoStateUntilTimeout+0x72>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800659c:	68fb      	ldr	r3, [r7, #12]
 800659e:	689b      	ldr	r3, [r3, #8]
 80065a0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80065a4:	d107      	bne.n	80065b6 <SPI_WaitFifoStateUntilTimeout+0x82>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 80065a6:	68fb      	ldr	r3, [r7, #12]
 80065a8:	681b      	ldr	r3, [r3, #0]
 80065aa:	681a      	ldr	r2, [r3, #0]
 80065ac:	68fb      	ldr	r3, [r7, #12]
 80065ae:	681b      	ldr	r3, [r3, #0]
 80065b0:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80065b4:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80065b6:	68fb      	ldr	r3, [r7, #12]
 80065b8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80065ba:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80065be:	d10f      	bne.n	80065e0 <SPI_WaitFifoStateUntilTimeout+0xac>
        {
          SPI_RESET_CRC(hspi);
 80065c0:	68fb      	ldr	r3, [r7, #12]
 80065c2:	681b      	ldr	r3, [r3, #0]
 80065c4:	681a      	ldr	r2, [r3, #0]
 80065c6:	68fb      	ldr	r3, [r7, #12]
 80065c8:	681b      	ldr	r3, [r3, #0]
 80065ca:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80065ce:	601a      	str	r2, [r3, #0]
 80065d0:	68fb      	ldr	r3, [r7, #12]
 80065d2:	681b      	ldr	r3, [r3, #0]
 80065d4:	681a      	ldr	r2, [r3, #0]
 80065d6:	68fb      	ldr	r3, [r7, #12]
 80065d8:	681b      	ldr	r3, [r3, #0]
 80065da:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80065de:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 80065e0:	68fb      	ldr	r3, [r7, #12]
 80065e2:	2201      	movs	r2, #1
 80065e4:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80065e8:	68fb      	ldr	r3, [r7, #12]
 80065ea:	2200      	movs	r2, #0
 80065ec:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 80065f0:	2303      	movs	r3, #3
 80065f2:	e008      	b.n	8006606 <SPI_WaitFifoStateUntilTimeout+0xd2>
  while ((hspi->Instance->SR & Fifo) != State)
 80065f4:	68fb      	ldr	r3, [r7, #12]
 80065f6:	681b      	ldr	r3, [r3, #0]
 80065f8:	689a      	ldr	r2, [r3, #8]
 80065fa:	68bb      	ldr	r3, [r7, #8]
 80065fc:	4013      	ands	r3, r2
 80065fe:	687a      	ldr	r2, [r7, #4]
 8006600:	429a      	cmp	r2, r3
 8006602:	d19f      	bne.n	8006544 <SPI_WaitFifoStateUntilTimeout+0x10>
      }
    }
  }

  return HAL_OK;
 8006604:	2300      	movs	r3, #0
}
 8006606:	4618      	mov	r0, r3
 8006608:	3710      	adds	r7, #16
 800660a:	46bd      	mov	sp, r7
 800660c:	bd80      	pop	{r7, pc}

0800660e <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 800660e:	b580      	push	{r7, lr}
 8006610:	b086      	sub	sp, #24
 8006612:	af02      	add	r7, sp, #8
 8006614:	60f8      	str	r0, [r7, #12]
 8006616:	60b9      	str	r1, [r7, #8]
 8006618:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 800661a:	687b      	ldr	r3, [r7, #4]
 800661c:	9300      	str	r3, [sp, #0]
 800661e:	68bb      	ldr	r3, [r7, #8]
 8006620:	2200      	movs	r2, #0
 8006622:	f44f 51c0 	mov.w	r1, #6144	; 0x1800
 8006626:	68f8      	ldr	r0, [r7, #12]
 8006628:	f7ff ff84 	bl	8006534 <SPI_WaitFifoStateUntilTimeout>
 800662c:	4603      	mov	r3, r0
 800662e:	2b00      	cmp	r3, #0
 8006630:	d007      	beq.n	8006642 <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8006632:	68fb      	ldr	r3, [r7, #12]
 8006634:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006636:	f043 0220 	orr.w	r2, r3, #32
 800663a:	68fb      	ldr	r3, [r7, #12]
 800663c:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 800663e:	2303      	movs	r3, #3
 8006640:	e027      	b.n	8006692 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8006642:	687b      	ldr	r3, [r7, #4]
 8006644:	9300      	str	r3, [sp, #0]
 8006646:	68bb      	ldr	r3, [r7, #8]
 8006648:	2200      	movs	r2, #0
 800664a:	2180      	movs	r1, #128	; 0x80
 800664c:	68f8      	ldr	r0, [r7, #12]
 800664e:	f7ff ff07 	bl	8006460 <SPI_WaitFlagStateUntilTimeout>
 8006652:	4603      	mov	r3, r0
 8006654:	2b00      	cmp	r3, #0
 8006656:	d007      	beq.n	8006668 <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8006658:	68fb      	ldr	r3, [r7, #12]
 800665a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800665c:	f043 0220 	orr.w	r2, r3, #32
 8006660:	68fb      	ldr	r3, [r7, #12]
 8006662:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8006664:	2303      	movs	r3, #3
 8006666:	e014      	b.n	8006692 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8006668:	687b      	ldr	r3, [r7, #4]
 800666a:	9300      	str	r3, [sp, #0]
 800666c:	68bb      	ldr	r3, [r7, #8]
 800666e:	2200      	movs	r2, #0
 8006670:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 8006674:	68f8      	ldr	r0, [r7, #12]
 8006676:	f7ff ff5d 	bl	8006534 <SPI_WaitFifoStateUntilTimeout>
 800667a:	4603      	mov	r3, r0
 800667c:	2b00      	cmp	r3, #0
 800667e:	d007      	beq.n	8006690 <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8006680:	68fb      	ldr	r3, [r7, #12]
 8006682:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006684:	f043 0220 	orr.w	r2, r3, #32
 8006688:	68fb      	ldr	r3, [r7, #12]
 800668a:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 800668c:	2303      	movs	r3, #3
 800668e:	e000      	b.n	8006692 <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 8006690:	2300      	movs	r3, #0
}
 8006692:	4618      	mov	r0, r3
 8006694:	3710      	adds	r7, #16
 8006696:	46bd      	mov	sp, r7
 8006698:	bd80      	pop	{r7, pc}

0800669a <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800669a:	b580      	push	{r7, lr}
 800669c:	b082      	sub	sp, #8
 800669e:	af00      	add	r7, sp, #0
 80066a0:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80066a2:	687b      	ldr	r3, [r7, #4]
 80066a4:	2b00      	cmp	r3, #0
 80066a6:	d101      	bne.n	80066ac <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80066a8:	2301      	movs	r3, #1
 80066aa:	e049      	b.n	8006740 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80066ac:	687b      	ldr	r3, [r7, #4]
 80066ae:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80066b2:	b2db      	uxtb	r3, r3
 80066b4:	2b00      	cmp	r3, #0
 80066b6:	d106      	bne.n	80066c6 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80066b8:	687b      	ldr	r3, [r7, #4]
 80066ba:	2200      	movs	r2, #0
 80066bc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80066c0:	6878      	ldr	r0, [r7, #4]
 80066c2:	f7fb fe91 	bl	80023e8 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80066c6:	687b      	ldr	r3, [r7, #4]
 80066c8:	2202      	movs	r2, #2
 80066ca:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80066ce:	687b      	ldr	r3, [r7, #4]
 80066d0:	681a      	ldr	r2, [r3, #0]
 80066d2:	687b      	ldr	r3, [r7, #4]
 80066d4:	3304      	adds	r3, #4
 80066d6:	4619      	mov	r1, r3
 80066d8:	4610      	mov	r0, r2
 80066da:	f000 fc51 	bl	8006f80 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80066de:	687b      	ldr	r3, [r7, #4]
 80066e0:	2201      	movs	r2, #1
 80066e2:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80066e6:	687b      	ldr	r3, [r7, #4]
 80066e8:	2201      	movs	r2, #1
 80066ea:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80066ee:	687b      	ldr	r3, [r7, #4]
 80066f0:	2201      	movs	r2, #1
 80066f2:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80066f6:	687b      	ldr	r3, [r7, #4]
 80066f8:	2201      	movs	r2, #1
 80066fa:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80066fe:	687b      	ldr	r3, [r7, #4]
 8006700:	2201      	movs	r2, #1
 8006702:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8006706:	687b      	ldr	r3, [r7, #4]
 8006708:	2201      	movs	r2, #1
 800670a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800670e:	687b      	ldr	r3, [r7, #4]
 8006710:	2201      	movs	r2, #1
 8006712:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006716:	687b      	ldr	r3, [r7, #4]
 8006718:	2201      	movs	r2, #1
 800671a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800671e:	687b      	ldr	r3, [r7, #4]
 8006720:	2201      	movs	r2, #1
 8006722:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8006726:	687b      	ldr	r3, [r7, #4]
 8006728:	2201      	movs	r2, #1
 800672a:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800672e:	687b      	ldr	r3, [r7, #4]
 8006730:	2201      	movs	r2, #1
 8006732:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006736:	687b      	ldr	r3, [r7, #4]
 8006738:	2201      	movs	r2, #1
 800673a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800673e:	2300      	movs	r3, #0
}
 8006740:	4618      	mov	r0, r3
 8006742:	3708      	adds	r7, #8
 8006744:	46bd      	mov	sp, r7
 8006746:	bd80      	pop	{r7, pc}

08006748 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8006748:	b480      	push	{r7}
 800674a:	b085      	sub	sp, #20
 800674c:	af00      	add	r7, sp, #0
 800674e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8006750:	687b      	ldr	r3, [r7, #4]
 8006752:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006756:	b2db      	uxtb	r3, r3
 8006758:	2b01      	cmp	r3, #1
 800675a:	d001      	beq.n	8006760 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 800675c:	2301      	movs	r3, #1
 800675e:	e019      	b.n	8006794 <HAL_TIM_Base_Start+0x4c>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006760:	687b      	ldr	r3, [r7, #4]
 8006762:	2202      	movs	r2, #2
 8006764:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8006768:	687b      	ldr	r3, [r7, #4]
 800676a:	681b      	ldr	r3, [r3, #0]
 800676c:	689a      	ldr	r2, [r3, #8]
 800676e:	4b0c      	ldr	r3, [pc, #48]	; (80067a0 <HAL_TIM_Base_Start+0x58>)
 8006770:	4013      	ands	r3, r2
 8006772:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006774:	68fb      	ldr	r3, [r7, #12]
 8006776:	2b06      	cmp	r3, #6
 8006778:	d00b      	beq.n	8006792 <HAL_TIM_Base_Start+0x4a>
 800677a:	68fb      	ldr	r3, [r7, #12]
 800677c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006780:	d007      	beq.n	8006792 <HAL_TIM_Base_Start+0x4a>
  {
    __HAL_TIM_ENABLE(htim);
 8006782:	687b      	ldr	r3, [r7, #4]
 8006784:	681b      	ldr	r3, [r3, #0]
 8006786:	681a      	ldr	r2, [r3, #0]
 8006788:	687b      	ldr	r3, [r7, #4]
 800678a:	681b      	ldr	r3, [r3, #0]
 800678c:	f042 0201 	orr.w	r2, r2, #1
 8006790:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8006792:	2300      	movs	r3, #0
}
 8006794:	4618      	mov	r0, r3
 8006796:	3714      	adds	r7, #20
 8006798:	46bd      	mov	sp, r7
 800679a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800679e:	4770      	bx	lr
 80067a0:	00010007 	.word	0x00010007

080067a4 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80067a4:	b480      	push	{r7}
 80067a6:	b085      	sub	sp, #20
 80067a8:	af00      	add	r7, sp, #0
 80067aa:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80067ac:	687b      	ldr	r3, [r7, #4]
 80067ae:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80067b2:	b2db      	uxtb	r3, r3
 80067b4:	2b01      	cmp	r3, #1
 80067b6:	d001      	beq.n	80067bc <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80067b8:	2301      	movs	r3, #1
 80067ba:	e021      	b.n	8006800 <HAL_TIM_Base_Start_IT+0x5c>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80067bc:	687b      	ldr	r3, [r7, #4]
 80067be:	2202      	movs	r2, #2
 80067c0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80067c4:	687b      	ldr	r3, [r7, #4]
 80067c6:	681b      	ldr	r3, [r3, #0]
 80067c8:	68da      	ldr	r2, [r3, #12]
 80067ca:	687b      	ldr	r3, [r7, #4]
 80067cc:	681b      	ldr	r3, [r3, #0]
 80067ce:	f042 0201 	orr.w	r2, r2, #1
 80067d2:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80067d4:	687b      	ldr	r3, [r7, #4]
 80067d6:	681b      	ldr	r3, [r3, #0]
 80067d8:	689a      	ldr	r2, [r3, #8]
 80067da:	4b0c      	ldr	r3, [pc, #48]	; (800680c <HAL_TIM_Base_Start_IT+0x68>)
 80067dc:	4013      	ands	r3, r2
 80067de:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80067e0:	68fb      	ldr	r3, [r7, #12]
 80067e2:	2b06      	cmp	r3, #6
 80067e4:	d00b      	beq.n	80067fe <HAL_TIM_Base_Start_IT+0x5a>
 80067e6:	68fb      	ldr	r3, [r7, #12]
 80067e8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80067ec:	d007      	beq.n	80067fe <HAL_TIM_Base_Start_IT+0x5a>
  {
    __HAL_TIM_ENABLE(htim);
 80067ee:	687b      	ldr	r3, [r7, #4]
 80067f0:	681b      	ldr	r3, [r3, #0]
 80067f2:	681a      	ldr	r2, [r3, #0]
 80067f4:	687b      	ldr	r3, [r7, #4]
 80067f6:	681b      	ldr	r3, [r3, #0]
 80067f8:	f042 0201 	orr.w	r2, r2, #1
 80067fc:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80067fe:	2300      	movs	r3, #0
}
 8006800:	4618      	mov	r0, r3
 8006802:	3714      	adds	r7, #20
 8006804:	46bd      	mov	sp, r7
 8006806:	f85d 7b04 	ldr.w	r7, [sp], #4
 800680a:	4770      	bx	lr
 800680c:	00010007 	.word	0x00010007

08006810 <HAL_TIM_Base_Stop_IT>:
  * @brief  Stops the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop_IT(TIM_HandleTypeDef *htim)
{
 8006810:	b480      	push	{r7}
 8006812:	b083      	sub	sp, #12
 8006814:	af00      	add	r7, sp, #0
 8006816:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  
  /* Disable the TIM Update interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_UPDATE);
 8006818:	687b      	ldr	r3, [r7, #4]
 800681a:	681b      	ldr	r3, [r3, #0]
 800681c:	68da      	ldr	r2, [r3, #12]
 800681e:	687b      	ldr	r3, [r7, #4]
 8006820:	681b      	ldr	r3, [r3, #0]
 8006822:	f022 0201 	bic.w	r2, r2, #1
 8006826:	60da      	str	r2, [r3, #12]

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8006828:	687b      	ldr	r3, [r7, #4]
 800682a:	681b      	ldr	r3, [r3, #0]
 800682c:	6a1a      	ldr	r2, [r3, #32]
 800682e:	f241 1311 	movw	r3, #4369	; 0x1111
 8006832:	4013      	ands	r3, r2
 8006834:	2b00      	cmp	r3, #0
 8006836:	d10f      	bne.n	8006858 <HAL_TIM_Base_Stop_IT+0x48>
 8006838:	687b      	ldr	r3, [r7, #4]
 800683a:	681b      	ldr	r3, [r3, #0]
 800683c:	6a1a      	ldr	r2, [r3, #32]
 800683e:	f244 4344 	movw	r3, #17476	; 0x4444
 8006842:	4013      	ands	r3, r2
 8006844:	2b00      	cmp	r3, #0
 8006846:	d107      	bne.n	8006858 <HAL_TIM_Base_Stop_IT+0x48>
 8006848:	687b      	ldr	r3, [r7, #4]
 800684a:	681b      	ldr	r3, [r3, #0]
 800684c:	681a      	ldr	r2, [r3, #0]
 800684e:	687b      	ldr	r3, [r7, #4]
 8006850:	681b      	ldr	r3, [r3, #0]
 8006852:	f022 0201 	bic.w	r2, r2, #1
 8006856:	601a      	str	r2, [r3, #0]

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 8006858:	687b      	ldr	r3, [r7, #4]
 800685a:	2201      	movs	r2, #1
 800685c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Return function status */
  return HAL_OK;
 8006860:	2300      	movs	r3, #0
}
 8006862:	4618      	mov	r0, r3
 8006864:	370c      	adds	r7, #12
 8006866:	46bd      	mov	sp, r7
 8006868:	f85d 7b04 	ldr.w	r7, [sp], #4
 800686c:	4770      	bx	lr

0800686e <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim,  TIM_Encoder_InitTypeDef *sConfig)
{
 800686e:	b580      	push	{r7, lr}
 8006870:	b086      	sub	sp, #24
 8006872:	af00      	add	r7, sp, #0
 8006874:	6078      	str	r0, [r7, #4]
 8006876:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 8006878:	687b      	ldr	r3, [r7, #4]
 800687a:	2b00      	cmp	r3, #0
 800687c:	d101      	bne.n	8006882 <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 800687e:	2301      	movs	r3, #1
 8006880:	e097      	b.n	80069b2 <HAL_TIM_Encoder_Init+0x144>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC1Prescaler));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));

  if (htim->State == HAL_TIM_STATE_RESET)
 8006882:	687b      	ldr	r3, [r7, #4]
 8006884:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006888:	b2db      	uxtb	r3, r3
 800688a:	2b00      	cmp	r3, #0
 800688c:	d106      	bne.n	800689c <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800688e:	687b      	ldr	r3, [r7, #4]
 8006890:	2200      	movs	r2, #0
 8006892:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 8006896:	6878      	ldr	r0, [r7, #4]
 8006898:	f7fb fd4a 	bl	8002330 <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800689c:	687b      	ldr	r3, [r7, #4]
 800689e:	2202      	movs	r2, #2
 80068a0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 80068a4:	687b      	ldr	r3, [r7, #4]
 80068a6:	681b      	ldr	r3, [r3, #0]
 80068a8:	689b      	ldr	r3, [r3, #8]
 80068aa:	687a      	ldr	r2, [r7, #4]
 80068ac:	6812      	ldr	r2, [r2, #0]
 80068ae:	f423 33a0 	bic.w	r3, r3, #81920	; 0x14000
 80068b2:	f023 0307 	bic.w	r3, r3, #7
 80068b6:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80068b8:	687b      	ldr	r3, [r7, #4]
 80068ba:	681a      	ldr	r2, [r3, #0]
 80068bc:	687b      	ldr	r3, [r7, #4]
 80068be:	3304      	adds	r3, #4
 80068c0:	4619      	mov	r1, r3
 80068c2:	4610      	mov	r0, r2
 80068c4:	f000 fb5c 	bl	8006f80 <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80068c8:	687b      	ldr	r3, [r7, #4]
 80068ca:	681b      	ldr	r3, [r3, #0]
 80068cc:	689b      	ldr	r3, [r3, #8]
 80068ce:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 80068d0:	687b      	ldr	r3, [r7, #4]
 80068d2:	681b      	ldr	r3, [r3, #0]
 80068d4:	699b      	ldr	r3, [r3, #24]
 80068d6:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 80068d8:	687b      	ldr	r3, [r7, #4]
 80068da:	681b      	ldr	r3, [r3, #0]
 80068dc:	6a1b      	ldr	r3, [r3, #32]
 80068de:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 80068e0:	683b      	ldr	r3, [r7, #0]
 80068e2:	681b      	ldr	r3, [r3, #0]
 80068e4:	697a      	ldr	r2, [r7, #20]
 80068e6:	4313      	orrs	r3, r2
 80068e8:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 80068ea:	693b      	ldr	r3, [r7, #16]
 80068ec:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80068f0:	f023 0303 	bic.w	r3, r3, #3
 80068f4:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 80068f6:	683b      	ldr	r3, [r7, #0]
 80068f8:	689a      	ldr	r2, [r3, #8]
 80068fa:	683b      	ldr	r3, [r7, #0]
 80068fc:	699b      	ldr	r3, [r3, #24]
 80068fe:	021b      	lsls	r3, r3, #8
 8006900:	4313      	orrs	r3, r2
 8006902:	693a      	ldr	r2, [r7, #16]
 8006904:	4313      	orrs	r3, r2
 8006906:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 8006908:	693b      	ldr	r3, [r7, #16]
 800690a:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 800690e:	f023 030c 	bic.w	r3, r3, #12
 8006912:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 8006914:	693b      	ldr	r3, [r7, #16]
 8006916:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800691a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800691e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 8006920:	683b      	ldr	r3, [r7, #0]
 8006922:	68da      	ldr	r2, [r3, #12]
 8006924:	683b      	ldr	r3, [r7, #0]
 8006926:	69db      	ldr	r3, [r3, #28]
 8006928:	021b      	lsls	r3, r3, #8
 800692a:	4313      	orrs	r3, r2
 800692c:	693a      	ldr	r2, [r7, #16]
 800692e:	4313      	orrs	r3, r2
 8006930:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 8006932:	683b      	ldr	r3, [r7, #0]
 8006934:	691b      	ldr	r3, [r3, #16]
 8006936:	011a      	lsls	r2, r3, #4
 8006938:	683b      	ldr	r3, [r7, #0]
 800693a:	6a1b      	ldr	r3, [r3, #32]
 800693c:	031b      	lsls	r3, r3, #12
 800693e:	4313      	orrs	r3, r2
 8006940:	693a      	ldr	r2, [r7, #16]
 8006942:	4313      	orrs	r3, r2
 8006944:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 8006946:	68fb      	ldr	r3, [r7, #12]
 8006948:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 800694c:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 800694e:	68fb      	ldr	r3, [r7, #12]
 8006950:	f023 0388 	bic.w	r3, r3, #136	; 0x88
 8006954:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 8006956:	683b      	ldr	r3, [r7, #0]
 8006958:	685a      	ldr	r2, [r3, #4]
 800695a:	683b      	ldr	r3, [r7, #0]
 800695c:	695b      	ldr	r3, [r3, #20]
 800695e:	011b      	lsls	r3, r3, #4
 8006960:	4313      	orrs	r3, r2
 8006962:	68fa      	ldr	r2, [r7, #12]
 8006964:	4313      	orrs	r3, r2
 8006966:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8006968:	687b      	ldr	r3, [r7, #4]
 800696a:	681b      	ldr	r3, [r3, #0]
 800696c:	697a      	ldr	r2, [r7, #20]
 800696e:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 8006970:	687b      	ldr	r3, [r7, #4]
 8006972:	681b      	ldr	r3, [r3, #0]
 8006974:	693a      	ldr	r2, [r7, #16]
 8006976:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 8006978:	687b      	ldr	r3, [r7, #4]
 800697a:	681b      	ldr	r3, [r3, #0]
 800697c:	68fa      	ldr	r2, [r7, #12]
 800697e:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8006980:	687b      	ldr	r3, [r7, #4]
 8006982:	2201      	movs	r2, #1
 8006984:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8006988:	687b      	ldr	r3, [r7, #4]
 800698a:	2201      	movs	r2, #1
 800698c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8006990:	687b      	ldr	r3, [r7, #4]
 8006992:	2201      	movs	r2, #1
 8006994:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8006998:	687b      	ldr	r3, [r7, #4]
 800699a:	2201      	movs	r2, #1
 800699c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 80069a0:	687b      	ldr	r3, [r7, #4]
 80069a2:	2201      	movs	r2, #1
 80069a4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80069a8:	687b      	ldr	r3, [r7, #4]
 80069aa:	2201      	movs	r2, #1
 80069ac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80069b0:	2300      	movs	r3, #0
}
 80069b2:	4618      	mov	r0, r3
 80069b4:	3718      	adds	r7, #24
 80069b6:	46bd      	mov	sp, r7
 80069b8:	bd80      	pop	{r7, pc}

080069ba <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80069ba:	b580      	push	{r7, lr}
 80069bc:	b082      	sub	sp, #8
 80069be:	af00      	add	r7, sp, #0
 80069c0:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80069c2:	687b      	ldr	r3, [r7, #4]
 80069c4:	681b      	ldr	r3, [r3, #0]
 80069c6:	691b      	ldr	r3, [r3, #16]
 80069c8:	f003 0302 	and.w	r3, r3, #2
 80069cc:	2b02      	cmp	r3, #2
 80069ce:	d122      	bne.n	8006a16 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80069d0:	687b      	ldr	r3, [r7, #4]
 80069d2:	681b      	ldr	r3, [r3, #0]
 80069d4:	68db      	ldr	r3, [r3, #12]
 80069d6:	f003 0302 	and.w	r3, r3, #2
 80069da:	2b02      	cmp	r3, #2
 80069dc:	d11b      	bne.n	8006a16 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80069de:	687b      	ldr	r3, [r7, #4]
 80069e0:	681b      	ldr	r3, [r3, #0]
 80069e2:	f06f 0202 	mvn.w	r2, #2
 80069e6:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80069e8:	687b      	ldr	r3, [r7, #4]
 80069ea:	2201      	movs	r2, #1
 80069ec:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80069ee:	687b      	ldr	r3, [r7, #4]
 80069f0:	681b      	ldr	r3, [r3, #0]
 80069f2:	699b      	ldr	r3, [r3, #24]
 80069f4:	f003 0303 	and.w	r3, r3, #3
 80069f8:	2b00      	cmp	r3, #0
 80069fa:	d003      	beq.n	8006a04 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80069fc:	6878      	ldr	r0, [r7, #4]
 80069fe:	f000 faa1 	bl	8006f44 <HAL_TIM_IC_CaptureCallback>
 8006a02:	e005      	b.n	8006a10 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8006a04:	6878      	ldr	r0, [r7, #4]
 8006a06:	f000 fa93 	bl	8006f30 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006a0a:	6878      	ldr	r0, [r7, #4]
 8006a0c:	f000 faa4 	bl	8006f58 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006a10:	687b      	ldr	r3, [r7, #4]
 8006a12:	2200      	movs	r2, #0
 8006a14:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8006a16:	687b      	ldr	r3, [r7, #4]
 8006a18:	681b      	ldr	r3, [r3, #0]
 8006a1a:	691b      	ldr	r3, [r3, #16]
 8006a1c:	f003 0304 	and.w	r3, r3, #4
 8006a20:	2b04      	cmp	r3, #4
 8006a22:	d122      	bne.n	8006a6a <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8006a24:	687b      	ldr	r3, [r7, #4]
 8006a26:	681b      	ldr	r3, [r3, #0]
 8006a28:	68db      	ldr	r3, [r3, #12]
 8006a2a:	f003 0304 	and.w	r3, r3, #4
 8006a2e:	2b04      	cmp	r3, #4
 8006a30:	d11b      	bne.n	8006a6a <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8006a32:	687b      	ldr	r3, [r7, #4]
 8006a34:	681b      	ldr	r3, [r3, #0]
 8006a36:	f06f 0204 	mvn.w	r2, #4
 8006a3a:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8006a3c:	687b      	ldr	r3, [r7, #4]
 8006a3e:	2202      	movs	r2, #2
 8006a40:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8006a42:	687b      	ldr	r3, [r7, #4]
 8006a44:	681b      	ldr	r3, [r3, #0]
 8006a46:	699b      	ldr	r3, [r3, #24]
 8006a48:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006a4c:	2b00      	cmp	r3, #0
 8006a4e:	d003      	beq.n	8006a58 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006a50:	6878      	ldr	r0, [r7, #4]
 8006a52:	f000 fa77 	bl	8006f44 <HAL_TIM_IC_CaptureCallback>
 8006a56:	e005      	b.n	8006a64 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006a58:	6878      	ldr	r0, [r7, #4]
 8006a5a:	f000 fa69 	bl	8006f30 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006a5e:	6878      	ldr	r0, [r7, #4]
 8006a60:	f000 fa7a 	bl	8006f58 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006a64:	687b      	ldr	r3, [r7, #4]
 8006a66:	2200      	movs	r2, #0
 8006a68:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8006a6a:	687b      	ldr	r3, [r7, #4]
 8006a6c:	681b      	ldr	r3, [r3, #0]
 8006a6e:	691b      	ldr	r3, [r3, #16]
 8006a70:	f003 0308 	and.w	r3, r3, #8
 8006a74:	2b08      	cmp	r3, #8
 8006a76:	d122      	bne.n	8006abe <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8006a78:	687b      	ldr	r3, [r7, #4]
 8006a7a:	681b      	ldr	r3, [r3, #0]
 8006a7c:	68db      	ldr	r3, [r3, #12]
 8006a7e:	f003 0308 	and.w	r3, r3, #8
 8006a82:	2b08      	cmp	r3, #8
 8006a84:	d11b      	bne.n	8006abe <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8006a86:	687b      	ldr	r3, [r7, #4]
 8006a88:	681b      	ldr	r3, [r3, #0]
 8006a8a:	f06f 0208 	mvn.w	r2, #8
 8006a8e:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8006a90:	687b      	ldr	r3, [r7, #4]
 8006a92:	2204      	movs	r2, #4
 8006a94:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8006a96:	687b      	ldr	r3, [r7, #4]
 8006a98:	681b      	ldr	r3, [r3, #0]
 8006a9a:	69db      	ldr	r3, [r3, #28]
 8006a9c:	f003 0303 	and.w	r3, r3, #3
 8006aa0:	2b00      	cmp	r3, #0
 8006aa2:	d003      	beq.n	8006aac <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006aa4:	6878      	ldr	r0, [r7, #4]
 8006aa6:	f000 fa4d 	bl	8006f44 <HAL_TIM_IC_CaptureCallback>
 8006aaa:	e005      	b.n	8006ab8 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006aac:	6878      	ldr	r0, [r7, #4]
 8006aae:	f000 fa3f 	bl	8006f30 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006ab2:	6878      	ldr	r0, [r7, #4]
 8006ab4:	f000 fa50 	bl	8006f58 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006ab8:	687b      	ldr	r3, [r7, #4]
 8006aba:	2200      	movs	r2, #0
 8006abc:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8006abe:	687b      	ldr	r3, [r7, #4]
 8006ac0:	681b      	ldr	r3, [r3, #0]
 8006ac2:	691b      	ldr	r3, [r3, #16]
 8006ac4:	f003 0310 	and.w	r3, r3, #16
 8006ac8:	2b10      	cmp	r3, #16
 8006aca:	d122      	bne.n	8006b12 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8006acc:	687b      	ldr	r3, [r7, #4]
 8006ace:	681b      	ldr	r3, [r3, #0]
 8006ad0:	68db      	ldr	r3, [r3, #12]
 8006ad2:	f003 0310 	and.w	r3, r3, #16
 8006ad6:	2b10      	cmp	r3, #16
 8006ad8:	d11b      	bne.n	8006b12 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8006ada:	687b      	ldr	r3, [r7, #4]
 8006adc:	681b      	ldr	r3, [r3, #0]
 8006ade:	f06f 0210 	mvn.w	r2, #16
 8006ae2:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8006ae4:	687b      	ldr	r3, [r7, #4]
 8006ae6:	2208      	movs	r2, #8
 8006ae8:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8006aea:	687b      	ldr	r3, [r7, #4]
 8006aec:	681b      	ldr	r3, [r3, #0]
 8006aee:	69db      	ldr	r3, [r3, #28]
 8006af0:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006af4:	2b00      	cmp	r3, #0
 8006af6:	d003      	beq.n	8006b00 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006af8:	6878      	ldr	r0, [r7, #4]
 8006afa:	f000 fa23 	bl	8006f44 <HAL_TIM_IC_CaptureCallback>
 8006afe:	e005      	b.n	8006b0c <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006b00:	6878      	ldr	r0, [r7, #4]
 8006b02:	f000 fa15 	bl	8006f30 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006b06:	6878      	ldr	r0, [r7, #4]
 8006b08:	f000 fa26 	bl	8006f58 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006b0c:	687b      	ldr	r3, [r7, #4]
 8006b0e:	2200      	movs	r2, #0
 8006b10:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8006b12:	687b      	ldr	r3, [r7, #4]
 8006b14:	681b      	ldr	r3, [r3, #0]
 8006b16:	691b      	ldr	r3, [r3, #16]
 8006b18:	f003 0301 	and.w	r3, r3, #1
 8006b1c:	2b01      	cmp	r3, #1
 8006b1e:	d10e      	bne.n	8006b3e <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8006b20:	687b      	ldr	r3, [r7, #4]
 8006b22:	681b      	ldr	r3, [r3, #0]
 8006b24:	68db      	ldr	r3, [r3, #12]
 8006b26:	f003 0301 	and.w	r3, r3, #1
 8006b2a:	2b01      	cmp	r3, #1
 8006b2c:	d107      	bne.n	8006b3e <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8006b2e:	687b      	ldr	r3, [r7, #4]
 8006b30:	681b      	ldr	r3, [r3, #0]
 8006b32:	f06f 0201 	mvn.w	r2, #1
 8006b36:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8006b38:	6878      	ldr	r0, [r7, #4]
 8006b3a:	f000 f9ef 	bl	8006f1c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8006b3e:	687b      	ldr	r3, [r7, #4]
 8006b40:	681b      	ldr	r3, [r3, #0]
 8006b42:	691b      	ldr	r3, [r3, #16]
 8006b44:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006b48:	2b80      	cmp	r3, #128	; 0x80
 8006b4a:	d10e      	bne.n	8006b6a <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8006b4c:	687b      	ldr	r3, [r7, #4]
 8006b4e:	681b      	ldr	r3, [r3, #0]
 8006b50:	68db      	ldr	r3, [r3, #12]
 8006b52:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006b56:	2b80      	cmp	r3, #128	; 0x80
 8006b58:	d107      	bne.n	8006b6a <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8006b5a:	687b      	ldr	r3, [r7, #4]
 8006b5c:	681b      	ldr	r3, [r3, #0]
 8006b5e:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8006b62:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8006b64:	6878      	ldr	r0, [r7, #4]
 8006b66:	f000 fd5d 	bl	8007624 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8006b6a:	687b      	ldr	r3, [r7, #4]
 8006b6c:	681b      	ldr	r3, [r3, #0]
 8006b6e:	691b      	ldr	r3, [r3, #16]
 8006b70:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006b74:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006b78:	d10e      	bne.n	8006b98 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8006b7a:	687b      	ldr	r3, [r7, #4]
 8006b7c:	681b      	ldr	r3, [r3, #0]
 8006b7e:	68db      	ldr	r3, [r3, #12]
 8006b80:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006b84:	2b80      	cmp	r3, #128	; 0x80
 8006b86:	d107      	bne.n	8006b98 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8006b88:	687b      	ldr	r3, [r7, #4]
 8006b8a:	681b      	ldr	r3, [r3, #0]
 8006b8c:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8006b90:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8006b92:	6878      	ldr	r0, [r7, #4]
 8006b94:	f000 fd50 	bl	8007638 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8006b98:	687b      	ldr	r3, [r7, #4]
 8006b9a:	681b      	ldr	r3, [r3, #0]
 8006b9c:	691b      	ldr	r3, [r3, #16]
 8006b9e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006ba2:	2b40      	cmp	r3, #64	; 0x40
 8006ba4:	d10e      	bne.n	8006bc4 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8006ba6:	687b      	ldr	r3, [r7, #4]
 8006ba8:	681b      	ldr	r3, [r3, #0]
 8006baa:	68db      	ldr	r3, [r3, #12]
 8006bac:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006bb0:	2b40      	cmp	r3, #64	; 0x40
 8006bb2:	d107      	bne.n	8006bc4 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8006bb4:	687b      	ldr	r3, [r7, #4]
 8006bb6:	681b      	ldr	r3, [r3, #0]
 8006bb8:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8006bbc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8006bbe:	6878      	ldr	r0, [r7, #4]
 8006bc0:	f000 f9d4 	bl	8006f6c <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8006bc4:	687b      	ldr	r3, [r7, #4]
 8006bc6:	681b      	ldr	r3, [r3, #0]
 8006bc8:	691b      	ldr	r3, [r3, #16]
 8006bca:	f003 0320 	and.w	r3, r3, #32
 8006bce:	2b20      	cmp	r3, #32
 8006bd0:	d10e      	bne.n	8006bf0 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8006bd2:	687b      	ldr	r3, [r7, #4]
 8006bd4:	681b      	ldr	r3, [r3, #0]
 8006bd6:	68db      	ldr	r3, [r3, #12]
 8006bd8:	f003 0320 	and.w	r3, r3, #32
 8006bdc:	2b20      	cmp	r3, #32
 8006bde:	d107      	bne.n	8006bf0 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8006be0:	687b      	ldr	r3, [r7, #4]
 8006be2:	681b      	ldr	r3, [r3, #0]
 8006be4:	f06f 0220 	mvn.w	r2, #32
 8006be8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8006bea:	6878      	ldr	r0, [r7, #4]
 8006bec:	f000 fd10 	bl	8007610 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Encoder index event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_IDX) != RESET)
 8006bf0:	687b      	ldr	r3, [r7, #4]
 8006bf2:	681b      	ldr	r3, [r3, #0]
 8006bf4:	691b      	ldr	r3, [r3, #16]
 8006bf6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8006bfa:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8006bfe:	d10f      	bne.n	8006c20 <HAL_TIM_IRQHandler+0x266>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_IDX) != RESET)
 8006c00:	687b      	ldr	r3, [r7, #4]
 8006c02:	681b      	ldr	r3, [r3, #0]
 8006c04:	68db      	ldr	r3, [r3, #12]
 8006c06:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8006c0a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8006c0e:	d107      	bne.n	8006c20 <HAL_TIM_IRQHandler+0x266>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_IDX);
 8006c10:	687b      	ldr	r3, [r7, #4]
 8006c12:	681b      	ldr	r3, [r3, #0]
 8006c14:	f46f 1280 	mvn.w	r2, #1048576	; 0x100000
 8006c18:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->EncoderIndexCallback(htim);
#else
      HAL_TIMEx_EncoderIndexCallback(htim);
 8006c1a:	6878      	ldr	r0, [r7, #4]
 8006c1c:	f000 fd16 	bl	800764c <HAL_TIMEx_EncoderIndexCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Direction change event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_DIR) != RESET)
 8006c20:	687b      	ldr	r3, [r7, #4]
 8006c22:	681b      	ldr	r3, [r3, #0]
 8006c24:	691b      	ldr	r3, [r3, #16]
 8006c26:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8006c2a:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8006c2e:	d10f      	bne.n	8006c50 <HAL_TIM_IRQHandler+0x296>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_DIR) != RESET)
 8006c30:	687b      	ldr	r3, [r7, #4]
 8006c32:	681b      	ldr	r3, [r3, #0]
 8006c34:	68db      	ldr	r3, [r3, #12]
 8006c36:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8006c3a:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8006c3e:	d107      	bne.n	8006c50 <HAL_TIM_IRQHandler+0x296>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_DIR);
 8006c40:	687b      	ldr	r3, [r7, #4]
 8006c42:	681b      	ldr	r3, [r3, #0]
 8006c44:	f46f 1200 	mvn.w	r2, #2097152	; 0x200000
 8006c48:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->DirectionChangeCallback(htim);
#else
      HAL_TIMEx_DirectionChangeCallback(htim);
 8006c4a:	6878      	ldr	r0, [r7, #4]
 8006c4c:	f000 fd08 	bl	8007660 <HAL_TIMEx_DirectionChangeCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Index error event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_IERR) != RESET)
 8006c50:	687b      	ldr	r3, [r7, #4]
 8006c52:	681b      	ldr	r3, [r3, #0]
 8006c54:	691b      	ldr	r3, [r3, #16]
 8006c56:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8006c5a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8006c5e:	d10f      	bne.n	8006c80 <HAL_TIM_IRQHandler+0x2c6>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_IERR) != RESET)
 8006c60:	687b      	ldr	r3, [r7, #4]
 8006c62:	681b      	ldr	r3, [r3, #0]
 8006c64:	68db      	ldr	r3, [r3, #12]
 8006c66:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8006c6a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8006c6e:	d107      	bne.n	8006c80 <HAL_TIM_IRQHandler+0x2c6>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_IERR);
 8006c70:	687b      	ldr	r3, [r7, #4]
 8006c72:	681b      	ldr	r3, [r3, #0]
 8006c74:	f46f 0280 	mvn.w	r2, #4194304	; 0x400000
 8006c78:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->IndexErrorCallback(htim);
#else
      HAL_TIMEx_IndexErrorCallback(htim);
 8006c7a:	6878      	ldr	r0, [r7, #4]
 8006c7c:	f000 fcfa 	bl	8007674 <HAL_TIMEx_IndexErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Transition error event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TERR) != RESET)
 8006c80:	687b      	ldr	r3, [r7, #4]
 8006c82:	681b      	ldr	r3, [r3, #0]
 8006c84:	691b      	ldr	r3, [r3, #16]
 8006c86:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8006c8a:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8006c8e:	d10f      	bne.n	8006cb0 <HAL_TIM_IRQHandler+0x2f6>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TERR) != RESET)
 8006c90:	687b      	ldr	r3, [r7, #4]
 8006c92:	681b      	ldr	r3, [r3, #0]
 8006c94:	68db      	ldr	r3, [r3, #12]
 8006c96:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8006c9a:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8006c9e:	d107      	bne.n	8006cb0 <HAL_TIM_IRQHandler+0x2f6>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_TERR);
 8006ca0:	687b      	ldr	r3, [r7, #4]
 8006ca2:	681b      	ldr	r3, [r3, #0]
 8006ca4:	f46f 0200 	mvn.w	r2, #8388608	; 0x800000
 8006ca8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TransitionErrorCallback(htim);
#else
      HAL_TIMEx_TransitionErrorCallback(htim);
 8006caa:	6878      	ldr	r0, [r7, #4]
 8006cac:	f000 fcec 	bl	8007688 <HAL_TIMEx_TransitionErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8006cb0:	bf00      	nop
 8006cb2:	3708      	adds	r7, #8
 8006cb4:	46bd      	mov	sp, r7
 8006cb6:	bd80      	pop	{r7, pc}

08006cb8 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8006cb8:	b580      	push	{r7, lr}
 8006cba:	b084      	sub	sp, #16
 8006cbc:	af00      	add	r7, sp, #0
 8006cbe:	6078      	str	r0, [r7, #4]
 8006cc0:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8006cc2:	687b      	ldr	r3, [r7, #4]
 8006cc4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006cc8:	2b01      	cmp	r3, #1
 8006cca:	d101      	bne.n	8006cd0 <HAL_TIM_ConfigClockSource+0x18>
 8006ccc:	2302      	movs	r3, #2
 8006cce:	e0d2      	b.n	8006e76 <HAL_TIM_ConfigClockSource+0x1be>
 8006cd0:	687b      	ldr	r3, [r7, #4]
 8006cd2:	2201      	movs	r2, #1
 8006cd4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8006cd8:	687b      	ldr	r3, [r7, #4]
 8006cda:	2202      	movs	r2, #2
 8006cdc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8006ce0:	687b      	ldr	r3, [r7, #4]
 8006ce2:	681b      	ldr	r3, [r3, #0]
 8006ce4:	689b      	ldr	r3, [r3, #8]
 8006ce6:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8006ce8:	68fb      	ldr	r3, [r7, #12]
 8006cea:	f423 1344 	bic.w	r3, r3, #3211264	; 0x310000
 8006cee:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8006cf2:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8006cf4:	68fb      	ldr	r3, [r7, #12]
 8006cf6:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8006cfa:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8006cfc:	687b      	ldr	r3, [r7, #4]
 8006cfe:	681b      	ldr	r3, [r3, #0]
 8006d00:	68fa      	ldr	r2, [r7, #12]
 8006d02:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8006d04:	683b      	ldr	r3, [r7, #0]
 8006d06:	681b      	ldr	r3, [r3, #0]
 8006d08:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006d0c:	f000 80a9 	beq.w	8006e62 <HAL_TIM_ConfigClockSource+0x1aa>
 8006d10:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006d14:	d81a      	bhi.n	8006d4c <HAL_TIM_ConfigClockSource+0x94>
 8006d16:	2b30      	cmp	r3, #48	; 0x30
 8006d18:	f000 809a 	beq.w	8006e50 <HAL_TIM_ConfigClockSource+0x198>
 8006d1c:	2b30      	cmp	r3, #48	; 0x30
 8006d1e:	d809      	bhi.n	8006d34 <HAL_TIM_ConfigClockSource+0x7c>
 8006d20:	2b10      	cmp	r3, #16
 8006d22:	f000 8095 	beq.w	8006e50 <HAL_TIM_ConfigClockSource+0x198>
 8006d26:	2b20      	cmp	r3, #32
 8006d28:	f000 8092 	beq.w	8006e50 <HAL_TIM_ConfigClockSource+0x198>
 8006d2c:	2b00      	cmp	r3, #0
 8006d2e:	f000 808f 	beq.w	8006e50 <HAL_TIM_ConfigClockSource+0x198>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
      break;
    }

    default:
      break;
 8006d32:	e097      	b.n	8006e64 <HAL_TIM_ConfigClockSource+0x1ac>
  switch (sClockSourceConfig->ClockSource)
 8006d34:	2b50      	cmp	r3, #80	; 0x50
 8006d36:	d05b      	beq.n	8006df0 <HAL_TIM_ConfigClockSource+0x138>
 8006d38:	2b50      	cmp	r3, #80	; 0x50
 8006d3a:	d802      	bhi.n	8006d42 <HAL_TIM_ConfigClockSource+0x8a>
 8006d3c:	2b40      	cmp	r3, #64	; 0x40
 8006d3e:	d077      	beq.n	8006e30 <HAL_TIM_ConfigClockSource+0x178>
      break;
 8006d40:	e090      	b.n	8006e64 <HAL_TIM_ConfigClockSource+0x1ac>
  switch (sClockSourceConfig->ClockSource)
 8006d42:	2b60      	cmp	r3, #96	; 0x60
 8006d44:	d064      	beq.n	8006e10 <HAL_TIM_ConfigClockSource+0x158>
 8006d46:	2b70      	cmp	r3, #112	; 0x70
 8006d48:	d028      	beq.n	8006d9c <HAL_TIM_ConfigClockSource+0xe4>
      break;
 8006d4a:	e08b      	b.n	8006e64 <HAL_TIM_ConfigClockSource+0x1ac>
  switch (sClockSourceConfig->ClockSource)
 8006d4c:	4a4c      	ldr	r2, [pc, #304]	; (8006e80 <HAL_TIM_ConfigClockSource+0x1c8>)
 8006d4e:	4293      	cmp	r3, r2
 8006d50:	d07e      	beq.n	8006e50 <HAL_TIM_ConfigClockSource+0x198>
 8006d52:	4a4b      	ldr	r2, [pc, #300]	; (8006e80 <HAL_TIM_ConfigClockSource+0x1c8>)
 8006d54:	4293      	cmp	r3, r2
 8006d56:	d810      	bhi.n	8006d7a <HAL_TIM_ConfigClockSource+0xc2>
 8006d58:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8006d5c:	d078      	beq.n	8006e50 <HAL_TIM_ConfigClockSource+0x198>
 8006d5e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8006d62:	d803      	bhi.n	8006d6c <HAL_TIM_ConfigClockSource+0xb4>
 8006d64:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006d68:	d02f      	beq.n	8006dca <HAL_TIM_ConfigClockSource+0x112>
      break;
 8006d6a:	e07b      	b.n	8006e64 <HAL_TIM_ConfigClockSource+0x1ac>
  switch (sClockSourceConfig->ClockSource)
 8006d6c:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 8006d70:	d06e      	beq.n	8006e50 <HAL_TIM_ConfigClockSource+0x198>
 8006d72:	4a44      	ldr	r2, [pc, #272]	; (8006e84 <HAL_TIM_ConfigClockSource+0x1cc>)
 8006d74:	4293      	cmp	r3, r2
 8006d76:	d06b      	beq.n	8006e50 <HAL_TIM_ConfigClockSource+0x198>
      break;
 8006d78:	e074      	b.n	8006e64 <HAL_TIM_ConfigClockSource+0x1ac>
  switch (sClockSourceConfig->ClockSource)
 8006d7a:	4a43      	ldr	r2, [pc, #268]	; (8006e88 <HAL_TIM_ConfigClockSource+0x1d0>)
 8006d7c:	4293      	cmp	r3, r2
 8006d7e:	d067      	beq.n	8006e50 <HAL_TIM_ConfigClockSource+0x198>
 8006d80:	4a41      	ldr	r2, [pc, #260]	; (8006e88 <HAL_TIM_ConfigClockSource+0x1d0>)
 8006d82:	4293      	cmp	r3, r2
 8006d84:	d803      	bhi.n	8006d8e <HAL_TIM_ConfigClockSource+0xd6>
 8006d86:	4a41      	ldr	r2, [pc, #260]	; (8006e8c <HAL_TIM_ConfigClockSource+0x1d4>)
 8006d88:	4293      	cmp	r3, r2
 8006d8a:	d061      	beq.n	8006e50 <HAL_TIM_ConfigClockSource+0x198>
      break;
 8006d8c:	e06a      	b.n	8006e64 <HAL_TIM_ConfigClockSource+0x1ac>
  switch (sClockSourceConfig->ClockSource)
 8006d8e:	4a40      	ldr	r2, [pc, #256]	; (8006e90 <HAL_TIM_ConfigClockSource+0x1d8>)
 8006d90:	4293      	cmp	r3, r2
 8006d92:	d05d      	beq.n	8006e50 <HAL_TIM_ConfigClockSource+0x198>
 8006d94:	4a3f      	ldr	r2, [pc, #252]	; (8006e94 <HAL_TIM_ConfigClockSource+0x1dc>)
 8006d96:	4293      	cmp	r3, r2
 8006d98:	d05a      	beq.n	8006e50 <HAL_TIM_ConfigClockSource+0x198>
      break;
 8006d9a:	e063      	b.n	8006e64 <HAL_TIM_ConfigClockSource+0x1ac>
      TIM_ETR_SetConfig(htim->Instance,
 8006d9c:	687b      	ldr	r3, [r7, #4]
 8006d9e:	6818      	ldr	r0, [r3, #0]
 8006da0:	683b      	ldr	r3, [r7, #0]
 8006da2:	6899      	ldr	r1, [r3, #8]
 8006da4:	683b      	ldr	r3, [r7, #0]
 8006da6:	685a      	ldr	r2, [r3, #4]
 8006da8:	683b      	ldr	r3, [r7, #0]
 8006daa:	68db      	ldr	r3, [r3, #12]
 8006dac:	f000 fac8 	bl	8007340 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8006db0:	687b      	ldr	r3, [r7, #4]
 8006db2:	681b      	ldr	r3, [r3, #0]
 8006db4:	689b      	ldr	r3, [r3, #8]
 8006db6:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8006db8:	68fb      	ldr	r3, [r7, #12]
 8006dba:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8006dbe:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 8006dc0:	687b      	ldr	r3, [r7, #4]
 8006dc2:	681b      	ldr	r3, [r3, #0]
 8006dc4:	68fa      	ldr	r2, [r7, #12]
 8006dc6:	609a      	str	r2, [r3, #8]
      break;
 8006dc8:	e04c      	b.n	8006e64 <HAL_TIM_ConfigClockSource+0x1ac>
      TIM_ETR_SetConfig(htim->Instance,
 8006dca:	687b      	ldr	r3, [r7, #4]
 8006dcc:	6818      	ldr	r0, [r3, #0]
 8006dce:	683b      	ldr	r3, [r7, #0]
 8006dd0:	6899      	ldr	r1, [r3, #8]
 8006dd2:	683b      	ldr	r3, [r7, #0]
 8006dd4:	685a      	ldr	r2, [r3, #4]
 8006dd6:	683b      	ldr	r3, [r7, #0]
 8006dd8:	68db      	ldr	r3, [r3, #12]
 8006dda:	f000 fab1 	bl	8007340 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8006dde:	687b      	ldr	r3, [r7, #4]
 8006de0:	681b      	ldr	r3, [r3, #0]
 8006de2:	689a      	ldr	r2, [r3, #8]
 8006de4:	687b      	ldr	r3, [r7, #4]
 8006de6:	681b      	ldr	r3, [r3, #0]
 8006de8:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8006dec:	609a      	str	r2, [r3, #8]
      break;
 8006dee:	e039      	b.n	8006e64 <HAL_TIM_ConfigClockSource+0x1ac>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8006df0:	687b      	ldr	r3, [r7, #4]
 8006df2:	6818      	ldr	r0, [r3, #0]
 8006df4:	683b      	ldr	r3, [r7, #0]
 8006df6:	6859      	ldr	r1, [r3, #4]
 8006df8:	683b      	ldr	r3, [r7, #0]
 8006dfa:	68db      	ldr	r3, [r3, #12]
 8006dfc:	461a      	mov	r2, r3
 8006dfe:	f000 fa23 	bl	8007248 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8006e02:	687b      	ldr	r3, [r7, #4]
 8006e04:	681b      	ldr	r3, [r3, #0]
 8006e06:	2150      	movs	r1, #80	; 0x50
 8006e08:	4618      	mov	r0, r3
 8006e0a:	f000 fa7c 	bl	8007306 <TIM_ITRx_SetConfig>
      break;
 8006e0e:	e029      	b.n	8006e64 <HAL_TIM_ConfigClockSource+0x1ac>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8006e10:	687b      	ldr	r3, [r7, #4]
 8006e12:	6818      	ldr	r0, [r3, #0]
 8006e14:	683b      	ldr	r3, [r7, #0]
 8006e16:	6859      	ldr	r1, [r3, #4]
 8006e18:	683b      	ldr	r3, [r7, #0]
 8006e1a:	68db      	ldr	r3, [r3, #12]
 8006e1c:	461a      	mov	r2, r3
 8006e1e:	f000 fa42 	bl	80072a6 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8006e22:	687b      	ldr	r3, [r7, #4]
 8006e24:	681b      	ldr	r3, [r3, #0]
 8006e26:	2160      	movs	r1, #96	; 0x60
 8006e28:	4618      	mov	r0, r3
 8006e2a:	f000 fa6c 	bl	8007306 <TIM_ITRx_SetConfig>
      break;
 8006e2e:	e019      	b.n	8006e64 <HAL_TIM_ConfigClockSource+0x1ac>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8006e30:	687b      	ldr	r3, [r7, #4]
 8006e32:	6818      	ldr	r0, [r3, #0]
 8006e34:	683b      	ldr	r3, [r7, #0]
 8006e36:	6859      	ldr	r1, [r3, #4]
 8006e38:	683b      	ldr	r3, [r7, #0]
 8006e3a:	68db      	ldr	r3, [r3, #12]
 8006e3c:	461a      	mov	r2, r3
 8006e3e:	f000 fa03 	bl	8007248 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8006e42:	687b      	ldr	r3, [r7, #4]
 8006e44:	681b      	ldr	r3, [r3, #0]
 8006e46:	2140      	movs	r1, #64	; 0x40
 8006e48:	4618      	mov	r0, r3
 8006e4a:	f000 fa5c 	bl	8007306 <TIM_ITRx_SetConfig>
      break;
 8006e4e:	e009      	b.n	8006e64 <HAL_TIM_ConfigClockSource+0x1ac>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8006e50:	687b      	ldr	r3, [r7, #4]
 8006e52:	681a      	ldr	r2, [r3, #0]
 8006e54:	683b      	ldr	r3, [r7, #0]
 8006e56:	681b      	ldr	r3, [r3, #0]
 8006e58:	4619      	mov	r1, r3
 8006e5a:	4610      	mov	r0, r2
 8006e5c:	f000 fa53 	bl	8007306 <TIM_ITRx_SetConfig>
      break;
 8006e60:	e000      	b.n	8006e64 <HAL_TIM_ConfigClockSource+0x1ac>
      break;
 8006e62:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8006e64:	687b      	ldr	r3, [r7, #4]
 8006e66:	2201      	movs	r2, #1
 8006e68:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8006e6c:	687b      	ldr	r3, [r7, #4]
 8006e6e:	2200      	movs	r2, #0
 8006e70:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8006e74:	2300      	movs	r3, #0
}
 8006e76:	4618      	mov	r0, r3
 8006e78:	3710      	adds	r7, #16
 8006e7a:	46bd      	mov	sp, r7
 8006e7c:	bd80      	pop	{r7, pc}
 8006e7e:	bf00      	nop
 8006e80:	00100030 	.word	0x00100030
 8006e84:	00100020 	.word	0x00100020
 8006e88:	00100050 	.word	0x00100050
 8006e8c:	00100040 	.word	0x00100040
 8006e90:	00100060 	.word	0x00100060
 8006e94:	00100070 	.word	0x00100070

08006e98 <HAL_TIM_SlaveConfigSynchro>:
  *         timer input or external trigger input) and the Slave mode
  *         (Disable, Reset, Gated, Trigger, External clock mode 1, Reset + Trigger, Gated + Reset).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_SlaveConfigSynchro(TIM_HandleTypeDef *htim, TIM_SlaveConfigTypeDef *sSlaveConfig)
{
 8006e98:	b580      	push	{r7, lr}
 8006e9a:	b082      	sub	sp, #8
 8006e9c:	af00      	add	r7, sp, #0
 8006e9e:	6078      	str	r0, [r7, #4]
 8006ea0:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_SLAVE_INSTANCE(htim->Instance));
  assert_param(IS_TIM_SLAVE_MODE(sSlaveConfig->SlaveMode));
  assert_param(IS_TIM_TRIGGER_INSTANCE(htim->Instance, sSlaveConfig->InputTrigger));

  __HAL_LOCK(htim);
 8006ea2:	687b      	ldr	r3, [r7, #4]
 8006ea4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006ea8:	2b01      	cmp	r3, #1
 8006eaa:	d101      	bne.n	8006eb0 <HAL_TIM_SlaveConfigSynchro+0x18>
 8006eac:	2302      	movs	r3, #2
 8006eae:	e031      	b.n	8006f14 <HAL_TIM_SlaveConfigSynchro+0x7c>
 8006eb0:	687b      	ldr	r3, [r7, #4]
 8006eb2:	2201      	movs	r2, #1
 8006eb4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8006eb8:	687b      	ldr	r3, [r7, #4]
 8006eba:	2202      	movs	r2, #2
 8006ebc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  if (TIM_SlaveTimer_SetConfig(htim, sSlaveConfig) != HAL_OK)
 8006ec0:	6839      	ldr	r1, [r7, #0]
 8006ec2:	6878      	ldr	r0, [r7, #4]
 8006ec4:	f000 f904 	bl	80070d0 <TIM_SlaveTimer_SetConfig>
 8006ec8:	4603      	mov	r3, r0
 8006eca:	2b00      	cmp	r3, #0
 8006ecc:	d009      	beq.n	8006ee2 <HAL_TIM_SlaveConfigSynchro+0x4a>
  {
    htim->State = HAL_TIM_STATE_READY;
 8006ece:	687b      	ldr	r3, [r7, #4]
 8006ed0:	2201      	movs	r2, #1
 8006ed2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    __HAL_UNLOCK(htim);
 8006ed6:	687b      	ldr	r3, [r7, #4]
 8006ed8:	2200      	movs	r2, #0
 8006eda:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    return HAL_ERROR;
 8006ede:	2301      	movs	r3, #1
 8006ee0:	e018      	b.n	8006f14 <HAL_TIM_SlaveConfigSynchro+0x7c>
  }

  /* Disable Trigger Interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_TRIGGER);
 8006ee2:	687b      	ldr	r3, [r7, #4]
 8006ee4:	681b      	ldr	r3, [r3, #0]
 8006ee6:	68da      	ldr	r2, [r3, #12]
 8006ee8:	687b      	ldr	r3, [r7, #4]
 8006eea:	681b      	ldr	r3, [r3, #0]
 8006eec:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006ef0:	60da      	str	r2, [r3, #12]

  /* Disable Trigger DMA request */
  __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_TRIGGER);
 8006ef2:	687b      	ldr	r3, [r7, #4]
 8006ef4:	681b      	ldr	r3, [r3, #0]
 8006ef6:	68da      	ldr	r2, [r3, #12]
 8006ef8:	687b      	ldr	r3, [r7, #4]
 8006efa:	681b      	ldr	r3, [r3, #0]
 8006efc:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8006f00:	60da      	str	r2, [r3, #12]

  htim->State = HAL_TIM_STATE_READY;
 8006f02:	687b      	ldr	r3, [r7, #4]
 8006f04:	2201      	movs	r2, #1
 8006f06:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8006f0a:	687b      	ldr	r3, [r7, #4]
 8006f0c:	2200      	movs	r2, #0
 8006f0e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8006f12:	2300      	movs	r3, #0
}
 8006f14:	4618      	mov	r0, r3
 8006f16:	3708      	adds	r7, #8
 8006f18:	46bd      	mov	sp, r7
 8006f1a:	bd80      	pop	{r7, pc}

08006f1c <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8006f1c:	b480      	push	{r7}
 8006f1e:	b083      	sub	sp, #12
 8006f20:	af00      	add	r7, sp, #0
 8006f22:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 8006f24:	bf00      	nop
 8006f26:	370c      	adds	r7, #12
 8006f28:	46bd      	mov	sp, r7
 8006f2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f2e:	4770      	bx	lr

08006f30 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8006f30:	b480      	push	{r7}
 8006f32:	b083      	sub	sp, #12
 8006f34:	af00      	add	r7, sp, #0
 8006f36:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8006f38:	bf00      	nop
 8006f3a:	370c      	adds	r7, #12
 8006f3c:	46bd      	mov	sp, r7
 8006f3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f42:	4770      	bx	lr

08006f44 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8006f44:	b480      	push	{r7}
 8006f46:	b083      	sub	sp, #12
 8006f48:	af00      	add	r7, sp, #0
 8006f4a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8006f4c:	bf00      	nop
 8006f4e:	370c      	adds	r7, #12
 8006f50:	46bd      	mov	sp, r7
 8006f52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f56:	4770      	bx	lr

08006f58 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8006f58:	b480      	push	{r7}
 8006f5a:	b083      	sub	sp, #12
 8006f5c:	af00      	add	r7, sp, #0
 8006f5e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8006f60:	bf00      	nop
 8006f62:	370c      	adds	r7, #12
 8006f64:	46bd      	mov	sp, r7
 8006f66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f6a:	4770      	bx	lr

08006f6c <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8006f6c:	b480      	push	{r7}
 8006f6e:	b083      	sub	sp, #12
 8006f70:	af00      	add	r7, sp, #0
 8006f72:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8006f74:	bf00      	nop
 8006f76:	370c      	adds	r7, #12
 8006f78:	46bd      	mov	sp, r7
 8006f7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f7e:	4770      	bx	lr

08006f80 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8006f80:	b480      	push	{r7}
 8006f82:	b085      	sub	sp, #20
 8006f84:	af00      	add	r7, sp, #0
 8006f86:	6078      	str	r0, [r7, #4]
 8006f88:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8006f8a:	687b      	ldr	r3, [r7, #4]
 8006f8c:	681b      	ldr	r3, [r3, #0]
 8006f8e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8006f90:	687b      	ldr	r3, [r7, #4]
 8006f92:	4a46      	ldr	r2, [pc, #280]	; (80070ac <TIM_Base_SetConfig+0x12c>)
 8006f94:	4293      	cmp	r3, r2
 8006f96:	d017      	beq.n	8006fc8 <TIM_Base_SetConfig+0x48>
 8006f98:	687b      	ldr	r3, [r7, #4]
 8006f9a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006f9e:	d013      	beq.n	8006fc8 <TIM_Base_SetConfig+0x48>
 8006fa0:	687b      	ldr	r3, [r7, #4]
 8006fa2:	4a43      	ldr	r2, [pc, #268]	; (80070b0 <TIM_Base_SetConfig+0x130>)
 8006fa4:	4293      	cmp	r3, r2
 8006fa6:	d00f      	beq.n	8006fc8 <TIM_Base_SetConfig+0x48>
 8006fa8:	687b      	ldr	r3, [r7, #4]
 8006faa:	4a42      	ldr	r2, [pc, #264]	; (80070b4 <TIM_Base_SetConfig+0x134>)
 8006fac:	4293      	cmp	r3, r2
 8006fae:	d00b      	beq.n	8006fc8 <TIM_Base_SetConfig+0x48>
 8006fb0:	687b      	ldr	r3, [r7, #4]
 8006fb2:	4a41      	ldr	r2, [pc, #260]	; (80070b8 <TIM_Base_SetConfig+0x138>)
 8006fb4:	4293      	cmp	r3, r2
 8006fb6:	d007      	beq.n	8006fc8 <TIM_Base_SetConfig+0x48>
 8006fb8:	687b      	ldr	r3, [r7, #4]
 8006fba:	4a40      	ldr	r2, [pc, #256]	; (80070bc <TIM_Base_SetConfig+0x13c>)
 8006fbc:	4293      	cmp	r3, r2
 8006fbe:	d003      	beq.n	8006fc8 <TIM_Base_SetConfig+0x48>
 8006fc0:	687b      	ldr	r3, [r7, #4]
 8006fc2:	4a3f      	ldr	r2, [pc, #252]	; (80070c0 <TIM_Base_SetConfig+0x140>)
 8006fc4:	4293      	cmp	r3, r2
 8006fc6:	d108      	bne.n	8006fda <TIM_Base_SetConfig+0x5a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8006fc8:	68fb      	ldr	r3, [r7, #12]
 8006fca:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006fce:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8006fd0:	683b      	ldr	r3, [r7, #0]
 8006fd2:	685b      	ldr	r3, [r3, #4]
 8006fd4:	68fa      	ldr	r2, [r7, #12]
 8006fd6:	4313      	orrs	r3, r2
 8006fd8:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8006fda:	687b      	ldr	r3, [r7, #4]
 8006fdc:	4a33      	ldr	r2, [pc, #204]	; (80070ac <TIM_Base_SetConfig+0x12c>)
 8006fde:	4293      	cmp	r3, r2
 8006fe0:	d023      	beq.n	800702a <TIM_Base_SetConfig+0xaa>
 8006fe2:	687b      	ldr	r3, [r7, #4]
 8006fe4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006fe8:	d01f      	beq.n	800702a <TIM_Base_SetConfig+0xaa>
 8006fea:	687b      	ldr	r3, [r7, #4]
 8006fec:	4a30      	ldr	r2, [pc, #192]	; (80070b0 <TIM_Base_SetConfig+0x130>)
 8006fee:	4293      	cmp	r3, r2
 8006ff0:	d01b      	beq.n	800702a <TIM_Base_SetConfig+0xaa>
 8006ff2:	687b      	ldr	r3, [r7, #4]
 8006ff4:	4a2f      	ldr	r2, [pc, #188]	; (80070b4 <TIM_Base_SetConfig+0x134>)
 8006ff6:	4293      	cmp	r3, r2
 8006ff8:	d017      	beq.n	800702a <TIM_Base_SetConfig+0xaa>
 8006ffa:	687b      	ldr	r3, [r7, #4]
 8006ffc:	4a2e      	ldr	r2, [pc, #184]	; (80070b8 <TIM_Base_SetConfig+0x138>)
 8006ffe:	4293      	cmp	r3, r2
 8007000:	d013      	beq.n	800702a <TIM_Base_SetConfig+0xaa>
 8007002:	687b      	ldr	r3, [r7, #4]
 8007004:	4a2d      	ldr	r2, [pc, #180]	; (80070bc <TIM_Base_SetConfig+0x13c>)
 8007006:	4293      	cmp	r3, r2
 8007008:	d00f      	beq.n	800702a <TIM_Base_SetConfig+0xaa>
 800700a:	687b      	ldr	r3, [r7, #4]
 800700c:	4a2d      	ldr	r2, [pc, #180]	; (80070c4 <TIM_Base_SetConfig+0x144>)
 800700e:	4293      	cmp	r3, r2
 8007010:	d00b      	beq.n	800702a <TIM_Base_SetConfig+0xaa>
 8007012:	687b      	ldr	r3, [r7, #4]
 8007014:	4a2c      	ldr	r2, [pc, #176]	; (80070c8 <TIM_Base_SetConfig+0x148>)
 8007016:	4293      	cmp	r3, r2
 8007018:	d007      	beq.n	800702a <TIM_Base_SetConfig+0xaa>
 800701a:	687b      	ldr	r3, [r7, #4]
 800701c:	4a2b      	ldr	r2, [pc, #172]	; (80070cc <TIM_Base_SetConfig+0x14c>)
 800701e:	4293      	cmp	r3, r2
 8007020:	d003      	beq.n	800702a <TIM_Base_SetConfig+0xaa>
 8007022:	687b      	ldr	r3, [r7, #4]
 8007024:	4a26      	ldr	r2, [pc, #152]	; (80070c0 <TIM_Base_SetConfig+0x140>)
 8007026:	4293      	cmp	r3, r2
 8007028:	d108      	bne.n	800703c <TIM_Base_SetConfig+0xbc>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800702a:	68fb      	ldr	r3, [r7, #12]
 800702c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007030:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8007032:	683b      	ldr	r3, [r7, #0]
 8007034:	68db      	ldr	r3, [r3, #12]
 8007036:	68fa      	ldr	r2, [r7, #12]
 8007038:	4313      	orrs	r3, r2
 800703a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800703c:	68fb      	ldr	r3, [r7, #12]
 800703e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8007042:	683b      	ldr	r3, [r7, #0]
 8007044:	695b      	ldr	r3, [r3, #20]
 8007046:	4313      	orrs	r3, r2
 8007048:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800704a:	687b      	ldr	r3, [r7, #4]
 800704c:	68fa      	ldr	r2, [r7, #12]
 800704e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8007050:	683b      	ldr	r3, [r7, #0]
 8007052:	689a      	ldr	r2, [r3, #8]
 8007054:	687b      	ldr	r3, [r7, #4]
 8007056:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8007058:	683b      	ldr	r3, [r7, #0]
 800705a:	681a      	ldr	r2, [r3, #0]
 800705c:	687b      	ldr	r3, [r7, #4]
 800705e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8007060:	687b      	ldr	r3, [r7, #4]
 8007062:	4a12      	ldr	r2, [pc, #72]	; (80070ac <TIM_Base_SetConfig+0x12c>)
 8007064:	4293      	cmp	r3, r2
 8007066:	d013      	beq.n	8007090 <TIM_Base_SetConfig+0x110>
 8007068:	687b      	ldr	r3, [r7, #4]
 800706a:	4a14      	ldr	r2, [pc, #80]	; (80070bc <TIM_Base_SetConfig+0x13c>)
 800706c:	4293      	cmp	r3, r2
 800706e:	d00f      	beq.n	8007090 <TIM_Base_SetConfig+0x110>
 8007070:	687b      	ldr	r3, [r7, #4]
 8007072:	4a14      	ldr	r2, [pc, #80]	; (80070c4 <TIM_Base_SetConfig+0x144>)
 8007074:	4293      	cmp	r3, r2
 8007076:	d00b      	beq.n	8007090 <TIM_Base_SetConfig+0x110>
 8007078:	687b      	ldr	r3, [r7, #4]
 800707a:	4a13      	ldr	r2, [pc, #76]	; (80070c8 <TIM_Base_SetConfig+0x148>)
 800707c:	4293      	cmp	r3, r2
 800707e:	d007      	beq.n	8007090 <TIM_Base_SetConfig+0x110>
 8007080:	687b      	ldr	r3, [r7, #4]
 8007082:	4a12      	ldr	r2, [pc, #72]	; (80070cc <TIM_Base_SetConfig+0x14c>)
 8007084:	4293      	cmp	r3, r2
 8007086:	d003      	beq.n	8007090 <TIM_Base_SetConfig+0x110>
 8007088:	687b      	ldr	r3, [r7, #4]
 800708a:	4a0d      	ldr	r2, [pc, #52]	; (80070c0 <TIM_Base_SetConfig+0x140>)
 800708c:	4293      	cmp	r3, r2
 800708e:	d103      	bne.n	8007098 <TIM_Base_SetConfig+0x118>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8007090:	683b      	ldr	r3, [r7, #0]
 8007092:	691a      	ldr	r2, [r3, #16]
 8007094:	687b      	ldr	r3, [r7, #4]
 8007096:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8007098:	687b      	ldr	r3, [r7, #4]
 800709a:	2201      	movs	r2, #1
 800709c:	615a      	str	r2, [r3, #20]
}
 800709e:	bf00      	nop
 80070a0:	3714      	adds	r7, #20
 80070a2:	46bd      	mov	sp, r7
 80070a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070a8:	4770      	bx	lr
 80070aa:	bf00      	nop
 80070ac:	40012c00 	.word	0x40012c00
 80070b0:	40000400 	.word	0x40000400
 80070b4:	40000800 	.word	0x40000800
 80070b8:	40000c00 	.word	0x40000c00
 80070bc:	40013400 	.word	0x40013400
 80070c0:	40015000 	.word	0x40015000
 80070c4:	40014000 	.word	0x40014000
 80070c8:	40014400 	.word	0x40014400
 80070cc:	40014800 	.word	0x40014800

080070d0 <TIM_SlaveTimer_SetConfig>:
  * @param  sSlaveConfig Slave timer configuration
  * @retval None
  */
static HAL_StatusTypeDef TIM_SlaveTimer_SetConfig(TIM_HandleTypeDef *htim,
                                                  TIM_SlaveConfigTypeDef *sSlaveConfig)
{
 80070d0:	b580      	push	{r7, lr}
 80070d2:	b086      	sub	sp, #24
 80070d4:	af00      	add	r7, sp, #0
 80070d6:	6078      	str	r0, [r7, #4]
 80070d8:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80070da:	687b      	ldr	r3, [r7, #4]
 80070dc:	681b      	ldr	r3, [r3, #0]
 80070de:	689b      	ldr	r3, [r3, #8]
 80070e0:	617b      	str	r3, [r7, #20]

  /* Reset the Trigger Selection Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80070e2:	697b      	ldr	r3, [r7, #20]
 80070e4:	f423 1340 	bic.w	r3, r3, #3145728	; 0x300000
 80070e8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80070ec:	617b      	str	r3, [r7, #20]
  /* Set the Input Trigger source */
  tmpsmcr |= sSlaveConfig->InputTrigger;
 80070ee:	683b      	ldr	r3, [r7, #0]
 80070f0:	685b      	ldr	r3, [r3, #4]
 80070f2:	697a      	ldr	r2, [r7, #20]
 80070f4:	4313      	orrs	r3, r2
 80070f6:	617b      	str	r3, [r7, #20]

  /* Reset the slave mode Bits */
  tmpsmcr &= ~TIM_SMCR_SMS;
 80070f8:	697b      	ldr	r3, [r7, #20]
 80070fa:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80070fe:	f023 0307 	bic.w	r3, r3, #7
 8007102:	617b      	str	r3, [r7, #20]
  /* Set the slave mode */
  tmpsmcr |= sSlaveConfig->SlaveMode;
 8007104:	683b      	ldr	r3, [r7, #0]
 8007106:	681b      	ldr	r3, [r3, #0]
 8007108:	697a      	ldr	r2, [r7, #20]
 800710a:	4313      	orrs	r3, r2
 800710c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 800710e:	687b      	ldr	r3, [r7, #4]
 8007110:	681b      	ldr	r3, [r3, #0]
 8007112:	697a      	ldr	r2, [r7, #20]
 8007114:	609a      	str	r2, [r3, #8]

  /* Configure the trigger prescaler, filter, and polarity */
  switch (sSlaveConfig->InputTrigger)
 8007116:	683b      	ldr	r3, [r7, #0]
 8007118:	685b      	ldr	r3, [r3, #4]
 800711a:	2b70      	cmp	r3, #112	; 0x70
 800711c:	d034      	beq.n	8007188 <TIM_SlaveTimer_SetConfig+0xb8>
 800711e:	2b70      	cmp	r3, #112	; 0x70
 8007120:	d811      	bhi.n	8007146 <TIM_SlaveTimer_SetConfig+0x76>
 8007122:	2b30      	cmp	r3, #48	; 0x30
 8007124:	d07d      	beq.n	8007222 <TIM_SlaveTimer_SetConfig+0x152>
 8007126:	2b30      	cmp	r3, #48	; 0x30
 8007128:	d806      	bhi.n	8007138 <TIM_SlaveTimer_SetConfig+0x68>
 800712a:	2b10      	cmp	r3, #16
 800712c:	d079      	beq.n	8007222 <TIM_SlaveTimer_SetConfig+0x152>
 800712e:	2b20      	cmp	r3, #32
 8007130:	d077      	beq.n	8007222 <TIM_SlaveTimer_SetConfig+0x152>
 8007132:	2b00      	cmp	r3, #0
 8007134:	d075      	beq.n	8007222 <TIM_SlaveTimer_SetConfig+0x152>
      assert_param(IS_TIM_INTERNAL_TRIGGEREVENT_INSTANCE((htim->Instance), sSlaveConfig->InputTrigger));
      break;
    }

    default:
      break;
 8007136:	e075      	b.n	8007224 <TIM_SlaveTimer_SetConfig+0x154>
  switch (sSlaveConfig->InputTrigger)
 8007138:	2b50      	cmp	r3, #80	; 0x50
 800713a:	d05e      	beq.n	80071fa <TIM_SlaveTimer_SetConfig+0x12a>
 800713c:	2b60      	cmp	r3, #96	; 0x60
 800713e:	d066      	beq.n	800720e <TIM_SlaveTimer_SetConfig+0x13e>
 8007140:	2b40      	cmp	r3, #64	; 0x40
 8007142:	d02c      	beq.n	800719e <TIM_SlaveTimer_SetConfig+0xce>
      break;
 8007144:	e06e      	b.n	8007224 <TIM_SlaveTimer_SetConfig+0x154>
  switch (sSlaveConfig->InputTrigger)
 8007146:	4a3a      	ldr	r2, [pc, #232]	; (8007230 <TIM_SlaveTimer_SetConfig+0x160>)
 8007148:	4293      	cmp	r3, r2
 800714a:	d06a      	beq.n	8007222 <TIM_SlaveTimer_SetConfig+0x152>
 800714c:	4a38      	ldr	r2, [pc, #224]	; (8007230 <TIM_SlaveTimer_SetConfig+0x160>)
 800714e:	4293      	cmp	r3, r2
 8007150:	d809      	bhi.n	8007166 <TIM_SlaveTimer_SetConfig+0x96>
 8007152:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 8007156:	d064      	beq.n	8007222 <TIM_SlaveTimer_SetConfig+0x152>
 8007158:	4a36      	ldr	r2, [pc, #216]	; (8007234 <TIM_SlaveTimer_SetConfig+0x164>)
 800715a:	4293      	cmp	r3, r2
 800715c:	d061      	beq.n	8007222 <TIM_SlaveTimer_SetConfig+0x152>
 800715e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8007162:	d05e      	beq.n	8007222 <TIM_SlaveTimer_SetConfig+0x152>
      break;
 8007164:	e05e      	b.n	8007224 <TIM_SlaveTimer_SetConfig+0x154>
  switch (sSlaveConfig->InputTrigger)
 8007166:	4a34      	ldr	r2, [pc, #208]	; (8007238 <TIM_SlaveTimer_SetConfig+0x168>)
 8007168:	4293      	cmp	r3, r2
 800716a:	d05a      	beq.n	8007222 <TIM_SlaveTimer_SetConfig+0x152>
 800716c:	4a32      	ldr	r2, [pc, #200]	; (8007238 <TIM_SlaveTimer_SetConfig+0x168>)
 800716e:	4293      	cmp	r3, r2
 8007170:	d803      	bhi.n	800717a <TIM_SlaveTimer_SetConfig+0xaa>
 8007172:	4a32      	ldr	r2, [pc, #200]	; (800723c <TIM_SlaveTimer_SetConfig+0x16c>)
 8007174:	4293      	cmp	r3, r2
 8007176:	d054      	beq.n	8007222 <TIM_SlaveTimer_SetConfig+0x152>
      break;
 8007178:	e054      	b.n	8007224 <TIM_SlaveTimer_SetConfig+0x154>
  switch (sSlaveConfig->InputTrigger)
 800717a:	4a31      	ldr	r2, [pc, #196]	; (8007240 <TIM_SlaveTimer_SetConfig+0x170>)
 800717c:	4293      	cmp	r3, r2
 800717e:	d050      	beq.n	8007222 <TIM_SlaveTimer_SetConfig+0x152>
 8007180:	4a30      	ldr	r2, [pc, #192]	; (8007244 <TIM_SlaveTimer_SetConfig+0x174>)
 8007182:	4293      	cmp	r3, r2
 8007184:	d04d      	beq.n	8007222 <TIM_SlaveTimer_SetConfig+0x152>
      break;
 8007186:	e04d      	b.n	8007224 <TIM_SlaveTimer_SetConfig+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 8007188:	687b      	ldr	r3, [r7, #4]
 800718a:	6818      	ldr	r0, [r3, #0]
 800718c:	683b      	ldr	r3, [r7, #0]
 800718e:	68d9      	ldr	r1, [r3, #12]
 8007190:	683b      	ldr	r3, [r7, #0]
 8007192:	689a      	ldr	r2, [r3, #8]
 8007194:	683b      	ldr	r3, [r7, #0]
 8007196:	691b      	ldr	r3, [r3, #16]
 8007198:	f000 f8d2 	bl	8007340 <TIM_ETR_SetConfig>
      break;
 800719c:	e042      	b.n	8007224 <TIM_SlaveTimer_SetConfig+0x154>
      if ((sSlaveConfig->SlaveMode == TIM_SLAVEMODE_GATED) || (sSlaveConfig->SlaveMode == TIM_SLAVEMODE_COMBINED_GATEDRESET))
 800719e:	683b      	ldr	r3, [r7, #0]
 80071a0:	681b      	ldr	r3, [r3, #0]
 80071a2:	2b05      	cmp	r3, #5
 80071a4:	d004      	beq.n	80071b0 <TIM_SlaveTimer_SetConfig+0xe0>
 80071a6:	683b      	ldr	r3, [r7, #0]
 80071a8:	681b      	ldr	r3, [r3, #0]
 80071aa:	f1b3 1f01 	cmp.w	r3, #65537	; 0x10001
 80071ae:	d101      	bne.n	80071b4 <TIM_SlaveTimer_SetConfig+0xe4>
        return HAL_ERROR;
 80071b0:	2301      	movs	r3, #1
 80071b2:	e038      	b.n	8007226 <TIM_SlaveTimer_SetConfig+0x156>
      tmpccer = htim->Instance->CCER;
 80071b4:	687b      	ldr	r3, [r7, #4]
 80071b6:	681b      	ldr	r3, [r3, #0]
 80071b8:	6a1b      	ldr	r3, [r3, #32]
 80071ba:	613b      	str	r3, [r7, #16]
      htim->Instance->CCER &= ~TIM_CCER_CC1E;
 80071bc:	687b      	ldr	r3, [r7, #4]
 80071be:	681b      	ldr	r3, [r3, #0]
 80071c0:	6a1a      	ldr	r2, [r3, #32]
 80071c2:	687b      	ldr	r3, [r7, #4]
 80071c4:	681b      	ldr	r3, [r3, #0]
 80071c6:	f022 0201 	bic.w	r2, r2, #1
 80071ca:	621a      	str	r2, [r3, #32]
      tmpccmr1 = htim->Instance->CCMR1;
 80071cc:	687b      	ldr	r3, [r7, #4]
 80071ce:	681b      	ldr	r3, [r3, #0]
 80071d0:	699b      	ldr	r3, [r3, #24]
 80071d2:	60fb      	str	r3, [r7, #12]
      tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80071d4:	68fb      	ldr	r3, [r7, #12]
 80071d6:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80071da:	60fb      	str	r3, [r7, #12]
      tmpccmr1 |= ((sSlaveConfig->TriggerFilter) << 4U);
 80071dc:	683b      	ldr	r3, [r7, #0]
 80071de:	691b      	ldr	r3, [r3, #16]
 80071e0:	011b      	lsls	r3, r3, #4
 80071e2:	68fa      	ldr	r2, [r7, #12]
 80071e4:	4313      	orrs	r3, r2
 80071e6:	60fb      	str	r3, [r7, #12]
      htim->Instance->CCMR1 = tmpccmr1;
 80071e8:	687b      	ldr	r3, [r7, #4]
 80071ea:	681b      	ldr	r3, [r3, #0]
 80071ec:	68fa      	ldr	r2, [r7, #12]
 80071ee:	619a      	str	r2, [r3, #24]
      htim->Instance->CCER = tmpccer;
 80071f0:	687b      	ldr	r3, [r7, #4]
 80071f2:	681b      	ldr	r3, [r3, #0]
 80071f4:	693a      	ldr	r2, [r7, #16]
 80071f6:	621a      	str	r2, [r3, #32]
      break;
 80071f8:	e014      	b.n	8007224 <TIM_SlaveTimer_SetConfig+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 80071fa:	687b      	ldr	r3, [r7, #4]
 80071fc:	6818      	ldr	r0, [r3, #0]
 80071fe:	683b      	ldr	r3, [r7, #0]
 8007200:	6899      	ldr	r1, [r3, #8]
 8007202:	683b      	ldr	r3, [r7, #0]
 8007204:	691b      	ldr	r3, [r3, #16]
 8007206:	461a      	mov	r2, r3
 8007208:	f000 f81e 	bl	8007248 <TIM_TI1_ConfigInputStage>
      break;
 800720c:	e00a      	b.n	8007224 <TIM_SlaveTimer_SetConfig+0x154>
      TIM_TI2_ConfigInputStage(htim->Instance,
 800720e:	687b      	ldr	r3, [r7, #4]
 8007210:	6818      	ldr	r0, [r3, #0]
 8007212:	683b      	ldr	r3, [r7, #0]
 8007214:	6899      	ldr	r1, [r3, #8]
 8007216:	683b      	ldr	r3, [r7, #0]
 8007218:	691b      	ldr	r3, [r3, #16]
 800721a:	461a      	mov	r2, r3
 800721c:	f000 f843 	bl	80072a6 <TIM_TI2_ConfigInputStage>
      break;
 8007220:	e000      	b.n	8007224 <TIM_SlaveTimer_SetConfig+0x154>
      break;
 8007222:	bf00      	nop
  }
  return HAL_OK;
 8007224:	2300      	movs	r3, #0
}
 8007226:	4618      	mov	r0, r3
 8007228:	3718      	adds	r7, #24
 800722a:	46bd      	mov	sp, r7
 800722c:	bd80      	pop	{r7, pc}
 800722e:	bf00      	nop
 8007230:	00100030 	.word	0x00100030
 8007234:	00100020 	.word	0x00100020
 8007238:	00100050 	.word	0x00100050
 800723c:	00100040 	.word	0x00100040
 8007240:	00100060 	.word	0x00100060
 8007244:	00100070 	.word	0x00100070

08007248 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8007248:	b480      	push	{r7}
 800724a:	b087      	sub	sp, #28
 800724c:	af00      	add	r7, sp, #0
 800724e:	60f8      	str	r0, [r7, #12]
 8007250:	60b9      	str	r1, [r7, #8]
 8007252:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8007254:	68fb      	ldr	r3, [r7, #12]
 8007256:	6a1b      	ldr	r3, [r3, #32]
 8007258:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800725a:	68fb      	ldr	r3, [r7, #12]
 800725c:	6a1b      	ldr	r3, [r3, #32]
 800725e:	f023 0201 	bic.w	r2, r3, #1
 8007262:	68fb      	ldr	r3, [r7, #12]
 8007264:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8007266:	68fb      	ldr	r3, [r7, #12]
 8007268:	699b      	ldr	r3, [r3, #24]
 800726a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800726c:	693b      	ldr	r3, [r7, #16]
 800726e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8007272:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8007274:	687b      	ldr	r3, [r7, #4]
 8007276:	011b      	lsls	r3, r3, #4
 8007278:	693a      	ldr	r2, [r7, #16]
 800727a:	4313      	orrs	r3, r2
 800727c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800727e:	697b      	ldr	r3, [r7, #20]
 8007280:	f023 030a 	bic.w	r3, r3, #10
 8007284:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8007286:	697a      	ldr	r2, [r7, #20]
 8007288:	68bb      	ldr	r3, [r7, #8]
 800728a:	4313      	orrs	r3, r2
 800728c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800728e:	68fb      	ldr	r3, [r7, #12]
 8007290:	693a      	ldr	r2, [r7, #16]
 8007292:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8007294:	68fb      	ldr	r3, [r7, #12]
 8007296:	697a      	ldr	r2, [r7, #20]
 8007298:	621a      	str	r2, [r3, #32]
}
 800729a:	bf00      	nop
 800729c:	371c      	adds	r7, #28
 800729e:	46bd      	mov	sp, r7
 80072a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072a4:	4770      	bx	lr

080072a6 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80072a6:	b480      	push	{r7}
 80072a8:	b087      	sub	sp, #28
 80072aa:	af00      	add	r7, sp, #0
 80072ac:	60f8      	str	r0, [r7, #12]
 80072ae:	60b9      	str	r1, [r7, #8]
 80072b0:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80072b2:	68fb      	ldr	r3, [r7, #12]
 80072b4:	6a1b      	ldr	r3, [r3, #32]
 80072b6:	f023 0210 	bic.w	r2, r3, #16
 80072ba:	68fb      	ldr	r3, [r7, #12]
 80072bc:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80072be:	68fb      	ldr	r3, [r7, #12]
 80072c0:	699b      	ldr	r3, [r3, #24]
 80072c2:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80072c4:	68fb      	ldr	r3, [r7, #12]
 80072c6:	6a1b      	ldr	r3, [r3, #32]
 80072c8:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80072ca:	697b      	ldr	r3, [r7, #20]
 80072cc:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80072d0:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80072d2:	687b      	ldr	r3, [r7, #4]
 80072d4:	031b      	lsls	r3, r3, #12
 80072d6:	697a      	ldr	r2, [r7, #20]
 80072d8:	4313      	orrs	r3, r2
 80072da:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80072dc:	693b      	ldr	r3, [r7, #16]
 80072de:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80072e2:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 80072e4:	68bb      	ldr	r3, [r7, #8]
 80072e6:	011b      	lsls	r3, r3, #4
 80072e8:	693a      	ldr	r2, [r7, #16]
 80072ea:	4313      	orrs	r3, r2
 80072ec:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80072ee:	68fb      	ldr	r3, [r7, #12]
 80072f0:	697a      	ldr	r2, [r7, #20]
 80072f2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80072f4:	68fb      	ldr	r3, [r7, #12]
 80072f6:	693a      	ldr	r2, [r7, #16]
 80072f8:	621a      	str	r2, [r3, #32]
}
 80072fa:	bf00      	nop
 80072fc:	371c      	adds	r7, #28
 80072fe:	46bd      	mov	sp, r7
 8007300:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007304:	4770      	bx	lr

08007306 <TIM_ITRx_SetConfig>:
  *       (*)  Value not defined in all devices.
  *
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8007306:	b480      	push	{r7}
 8007308:	b085      	sub	sp, #20
 800730a:	af00      	add	r7, sp, #0
 800730c:	6078      	str	r0, [r7, #4]
 800730e:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8007310:	687b      	ldr	r3, [r7, #4]
 8007312:	689b      	ldr	r3, [r3, #8]
 8007314:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8007316:	68fb      	ldr	r3, [r7, #12]
 8007318:	f423 1340 	bic.w	r3, r3, #3145728	; 0x300000
 800731c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007320:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8007322:	683a      	ldr	r2, [r7, #0]
 8007324:	68fb      	ldr	r3, [r7, #12]
 8007326:	4313      	orrs	r3, r2
 8007328:	f043 0307 	orr.w	r3, r3, #7
 800732c:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800732e:	687b      	ldr	r3, [r7, #4]
 8007330:	68fa      	ldr	r2, [r7, #12]
 8007332:	609a      	str	r2, [r3, #8]
}
 8007334:	bf00      	nop
 8007336:	3714      	adds	r7, #20
 8007338:	46bd      	mov	sp, r7
 800733a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800733e:	4770      	bx	lr

08007340 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8007340:	b480      	push	{r7}
 8007342:	b087      	sub	sp, #28
 8007344:	af00      	add	r7, sp, #0
 8007346:	60f8      	str	r0, [r7, #12]
 8007348:	60b9      	str	r1, [r7, #8]
 800734a:	607a      	str	r2, [r7, #4]
 800734c:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800734e:	68fb      	ldr	r3, [r7, #12]
 8007350:	689b      	ldr	r3, [r3, #8]
 8007352:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8007354:	697b      	ldr	r3, [r7, #20]
 8007356:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800735a:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800735c:	683b      	ldr	r3, [r7, #0]
 800735e:	021a      	lsls	r2, r3, #8
 8007360:	687b      	ldr	r3, [r7, #4]
 8007362:	431a      	orrs	r2, r3
 8007364:	68bb      	ldr	r3, [r7, #8]
 8007366:	4313      	orrs	r3, r2
 8007368:	697a      	ldr	r2, [r7, #20]
 800736a:	4313      	orrs	r3, r2
 800736c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800736e:	68fb      	ldr	r3, [r7, #12]
 8007370:	697a      	ldr	r2, [r7, #20]
 8007372:	609a      	str	r2, [r3, #8]
}
 8007374:	bf00      	nop
 8007376:	371c      	adds	r7, #28
 8007378:	46bd      	mov	sp, r7
 800737a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800737e:	4770      	bx	lr

08007380 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8007380:	b480      	push	{r7}
 8007382:	b085      	sub	sp, #20
 8007384:	af00      	add	r7, sp, #0
 8007386:	6078      	str	r0, [r7, #4]
 8007388:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800738a:	687b      	ldr	r3, [r7, #4]
 800738c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007390:	2b01      	cmp	r3, #1
 8007392:	d101      	bne.n	8007398 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8007394:	2302      	movs	r3, #2
 8007396:	e074      	b.n	8007482 <HAL_TIMEx_MasterConfigSynchronization+0x102>
 8007398:	687b      	ldr	r3, [r7, #4]
 800739a:	2201      	movs	r2, #1
 800739c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80073a0:	687b      	ldr	r3, [r7, #4]
 80073a2:	2202      	movs	r2, #2
 80073a4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80073a8:	687b      	ldr	r3, [r7, #4]
 80073aa:	681b      	ldr	r3, [r3, #0]
 80073ac:	685b      	ldr	r3, [r3, #4]
 80073ae:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80073b0:	687b      	ldr	r3, [r7, #4]
 80073b2:	681b      	ldr	r3, [r3, #0]
 80073b4:	689b      	ldr	r3, [r3, #8]
 80073b6:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 80073b8:	687b      	ldr	r3, [r7, #4]
 80073ba:	681b      	ldr	r3, [r3, #0]
 80073bc:	4a34      	ldr	r2, [pc, #208]	; (8007490 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 80073be:	4293      	cmp	r3, r2
 80073c0:	d009      	beq.n	80073d6 <HAL_TIMEx_MasterConfigSynchronization+0x56>
 80073c2:	687b      	ldr	r3, [r7, #4]
 80073c4:	681b      	ldr	r3, [r3, #0]
 80073c6:	4a33      	ldr	r2, [pc, #204]	; (8007494 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 80073c8:	4293      	cmp	r3, r2
 80073ca:	d004      	beq.n	80073d6 <HAL_TIMEx_MasterConfigSynchronization+0x56>
 80073cc:	687b      	ldr	r3, [r7, #4]
 80073ce:	681b      	ldr	r3, [r3, #0]
 80073d0:	4a31      	ldr	r2, [pc, #196]	; (8007498 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 80073d2:	4293      	cmp	r3, r2
 80073d4:	d108      	bne.n	80073e8 <HAL_TIMEx_MasterConfigSynchronization+0x68>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 80073d6:	68fb      	ldr	r3, [r7, #12]
 80073d8:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 80073dc:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 80073de:	683b      	ldr	r3, [r7, #0]
 80073e0:	685b      	ldr	r3, [r3, #4]
 80073e2:	68fa      	ldr	r2, [r7, #12]
 80073e4:	4313      	orrs	r3, r2
 80073e6:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80073e8:	68fb      	ldr	r3, [r7, #12]
 80073ea:	f023 7300 	bic.w	r3, r3, #33554432	; 0x2000000
 80073ee:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80073f2:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80073f4:	683b      	ldr	r3, [r7, #0]
 80073f6:	681b      	ldr	r3, [r3, #0]
 80073f8:	68fa      	ldr	r2, [r7, #12]
 80073fa:	4313      	orrs	r3, r2
 80073fc:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80073fe:	687b      	ldr	r3, [r7, #4]
 8007400:	681b      	ldr	r3, [r3, #0]
 8007402:	68fa      	ldr	r2, [r7, #12]
 8007404:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007406:	687b      	ldr	r3, [r7, #4]
 8007408:	681b      	ldr	r3, [r3, #0]
 800740a:	4a21      	ldr	r2, [pc, #132]	; (8007490 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 800740c:	4293      	cmp	r3, r2
 800740e:	d022      	beq.n	8007456 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8007410:	687b      	ldr	r3, [r7, #4]
 8007412:	681b      	ldr	r3, [r3, #0]
 8007414:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007418:	d01d      	beq.n	8007456 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 800741a:	687b      	ldr	r3, [r7, #4]
 800741c:	681b      	ldr	r3, [r3, #0]
 800741e:	4a1f      	ldr	r2, [pc, #124]	; (800749c <HAL_TIMEx_MasterConfigSynchronization+0x11c>)
 8007420:	4293      	cmp	r3, r2
 8007422:	d018      	beq.n	8007456 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8007424:	687b      	ldr	r3, [r7, #4]
 8007426:	681b      	ldr	r3, [r3, #0]
 8007428:	4a1d      	ldr	r2, [pc, #116]	; (80074a0 <HAL_TIMEx_MasterConfigSynchronization+0x120>)
 800742a:	4293      	cmp	r3, r2
 800742c:	d013      	beq.n	8007456 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 800742e:	687b      	ldr	r3, [r7, #4]
 8007430:	681b      	ldr	r3, [r3, #0]
 8007432:	4a1c      	ldr	r2, [pc, #112]	; (80074a4 <HAL_TIMEx_MasterConfigSynchronization+0x124>)
 8007434:	4293      	cmp	r3, r2
 8007436:	d00e      	beq.n	8007456 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8007438:	687b      	ldr	r3, [r7, #4]
 800743a:	681b      	ldr	r3, [r3, #0]
 800743c:	4a15      	ldr	r2, [pc, #84]	; (8007494 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 800743e:	4293      	cmp	r3, r2
 8007440:	d009      	beq.n	8007456 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8007442:	687b      	ldr	r3, [r7, #4]
 8007444:	681b      	ldr	r3, [r3, #0]
 8007446:	4a18      	ldr	r2, [pc, #96]	; (80074a8 <HAL_TIMEx_MasterConfigSynchronization+0x128>)
 8007448:	4293      	cmp	r3, r2
 800744a:	d004      	beq.n	8007456 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 800744c:	687b      	ldr	r3, [r7, #4]
 800744e:	681b      	ldr	r3, [r3, #0]
 8007450:	4a11      	ldr	r2, [pc, #68]	; (8007498 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 8007452:	4293      	cmp	r3, r2
 8007454:	d10c      	bne.n	8007470 <HAL_TIMEx_MasterConfigSynchronization+0xf0>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8007456:	68bb      	ldr	r3, [r7, #8]
 8007458:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800745c:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800745e:	683b      	ldr	r3, [r7, #0]
 8007460:	689b      	ldr	r3, [r3, #8]
 8007462:	68ba      	ldr	r2, [r7, #8]
 8007464:	4313      	orrs	r3, r2
 8007466:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8007468:	687b      	ldr	r3, [r7, #4]
 800746a:	681b      	ldr	r3, [r3, #0]
 800746c:	68ba      	ldr	r2, [r7, #8]
 800746e:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8007470:	687b      	ldr	r3, [r7, #4]
 8007472:	2201      	movs	r2, #1
 8007474:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8007478:	687b      	ldr	r3, [r7, #4]
 800747a:	2200      	movs	r2, #0
 800747c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8007480:	2300      	movs	r3, #0
}
 8007482:	4618      	mov	r0, r3
 8007484:	3714      	adds	r7, #20
 8007486:	46bd      	mov	sp, r7
 8007488:	f85d 7b04 	ldr.w	r7, [sp], #4
 800748c:	4770      	bx	lr
 800748e:	bf00      	nop
 8007490:	40012c00 	.word	0x40012c00
 8007494:	40013400 	.word	0x40013400
 8007498:	40015000 	.word	0x40015000
 800749c:	40000400 	.word	0x40000400
 80074a0:	40000800 	.word	0x40000800
 80074a4:	40000c00 	.word	0x40000c00
 80074a8:	40014000 	.word	0x40014000

080074ac <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 80074ac:	b480      	push	{r7}
 80074ae:	b085      	sub	sp, #20
 80074b0:	af00      	add	r7, sp, #0
 80074b2:	6078      	str	r0, [r7, #4]
 80074b4:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 80074b6:	2300      	movs	r3, #0
 80074b8:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 80074ba:	687b      	ldr	r3, [r7, #4]
 80074bc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80074c0:	2b01      	cmp	r3, #1
 80074c2:	d101      	bne.n	80074c8 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 80074c4:	2302      	movs	r3, #2
 80074c6:	e096      	b.n	80075f6 <HAL_TIMEx_ConfigBreakDeadTime+0x14a>
 80074c8:	687b      	ldr	r3, [r7, #4]
 80074ca:	2201      	movs	r2, #1
 80074cc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 80074d0:	68fb      	ldr	r3, [r7, #12]
 80074d2:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 80074d6:	683b      	ldr	r3, [r7, #0]
 80074d8:	68db      	ldr	r3, [r3, #12]
 80074da:	4313      	orrs	r3, r2
 80074dc:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 80074de:	68fb      	ldr	r3, [r7, #12]
 80074e0:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80074e4:	683b      	ldr	r3, [r7, #0]
 80074e6:	689b      	ldr	r3, [r3, #8]
 80074e8:	4313      	orrs	r3, r2
 80074ea:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 80074ec:	68fb      	ldr	r3, [r7, #12]
 80074ee:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 80074f2:	683b      	ldr	r3, [r7, #0]
 80074f4:	685b      	ldr	r3, [r3, #4]
 80074f6:	4313      	orrs	r3, r2
 80074f8:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 80074fa:	68fb      	ldr	r3, [r7, #12]
 80074fc:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8007500:	683b      	ldr	r3, [r7, #0]
 8007502:	681b      	ldr	r3, [r3, #0]
 8007504:	4313      	orrs	r3, r2
 8007506:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8007508:	68fb      	ldr	r3, [r7, #12]
 800750a:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800750e:	683b      	ldr	r3, [r7, #0]
 8007510:	691b      	ldr	r3, [r3, #16]
 8007512:	4313      	orrs	r3, r2
 8007514:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8007516:	68fb      	ldr	r3, [r7, #12]
 8007518:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 800751c:	683b      	ldr	r3, [r7, #0]
 800751e:	695b      	ldr	r3, [r3, #20]
 8007520:	4313      	orrs	r3, r2
 8007522:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8007524:	68fb      	ldr	r3, [r7, #12]
 8007526:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 800752a:	683b      	ldr	r3, [r7, #0]
 800752c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800752e:	4313      	orrs	r3, r2
 8007530:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 8007532:	68fb      	ldr	r3, [r7, #12]
 8007534:	f423 2270 	bic.w	r2, r3, #983040	; 0xf0000
 8007538:	683b      	ldr	r3, [r7, #0]
 800753a:	699b      	ldr	r3, [r3, #24]
 800753c:	041b      	lsls	r3, r3, #16
 800753e:	4313      	orrs	r3, r2
 8007540:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_ADVANCED_INSTANCE(htim->Instance))
 8007542:	687b      	ldr	r3, [r7, #4]
 8007544:	681b      	ldr	r3, [r3, #0]
 8007546:	4a2f      	ldr	r2, [pc, #188]	; (8007604 <HAL_TIMEx_ConfigBreakDeadTime+0x158>)
 8007548:	4293      	cmp	r3, r2
 800754a:	d009      	beq.n	8007560 <HAL_TIMEx_ConfigBreakDeadTime+0xb4>
 800754c:	687b      	ldr	r3, [r7, #4]
 800754e:	681b      	ldr	r3, [r3, #0]
 8007550:	4a2d      	ldr	r2, [pc, #180]	; (8007608 <HAL_TIMEx_ConfigBreakDeadTime+0x15c>)
 8007552:	4293      	cmp	r3, r2
 8007554:	d004      	beq.n	8007560 <HAL_TIMEx_ConfigBreakDeadTime+0xb4>
 8007556:	687b      	ldr	r3, [r7, #4]
 8007558:	681b      	ldr	r3, [r3, #0]
 800755a:	4a2c      	ldr	r2, [pc, #176]	; (800760c <HAL_TIMEx_ConfigBreakDeadTime+0x160>)
 800755c:	4293      	cmp	r3, r2
 800755e:	d106      	bne.n	800756e <HAL_TIMEx_ConfigBreakDeadTime+0xc2>
  {
    /* Check the parameters */
    assert_param(IS_TIM_BREAK_AFMODE(sBreakDeadTimeConfig->BreakAFMode));

    /* Set BREAK AF mode */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BKBID, sBreakDeadTimeConfig->BreakAFMode);
 8007560:	68fb      	ldr	r3, [r7, #12]
 8007562:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 8007566:	683b      	ldr	r3, [r7, #0]
 8007568:	69db      	ldr	r3, [r3, #28]
 800756a:	4313      	orrs	r3, r2
 800756c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 800756e:	687b      	ldr	r3, [r7, #4]
 8007570:	681b      	ldr	r3, [r3, #0]
 8007572:	4a24      	ldr	r2, [pc, #144]	; (8007604 <HAL_TIMEx_ConfigBreakDeadTime+0x158>)
 8007574:	4293      	cmp	r3, r2
 8007576:	d009      	beq.n	800758c <HAL_TIMEx_ConfigBreakDeadTime+0xe0>
 8007578:	687b      	ldr	r3, [r7, #4]
 800757a:	681b      	ldr	r3, [r3, #0]
 800757c:	4a22      	ldr	r2, [pc, #136]	; (8007608 <HAL_TIMEx_ConfigBreakDeadTime+0x15c>)
 800757e:	4293      	cmp	r3, r2
 8007580:	d004      	beq.n	800758c <HAL_TIMEx_ConfigBreakDeadTime+0xe0>
 8007582:	687b      	ldr	r3, [r7, #4]
 8007584:	681b      	ldr	r3, [r3, #0]
 8007586:	4a21      	ldr	r2, [pc, #132]	; (800760c <HAL_TIMEx_ConfigBreakDeadTime+0x160>)
 8007588:	4293      	cmp	r3, r2
 800758a:	d12b      	bne.n	80075e4 <HAL_TIMEx_ConfigBreakDeadTime+0x138>
    assert_param(IS_TIM_BREAK2_STATE(sBreakDeadTimeConfig->Break2State));
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 800758c:	68fb      	ldr	r3, [r7, #12]
 800758e:	f423 0270 	bic.w	r2, r3, #15728640	; 0xf00000
 8007592:	683b      	ldr	r3, [r7, #0]
 8007594:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007596:	051b      	lsls	r3, r3, #20
 8007598:	4313      	orrs	r3, r2
 800759a:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 800759c:	68fb      	ldr	r3, [r7, #12]
 800759e:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 80075a2:	683b      	ldr	r3, [r7, #0]
 80075a4:	6a1b      	ldr	r3, [r3, #32]
 80075a6:	4313      	orrs	r3, r2
 80075a8:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 80075aa:	68fb      	ldr	r3, [r7, #12]
 80075ac:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 80075b0:	683b      	ldr	r3, [r7, #0]
 80075b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80075b4:	4313      	orrs	r3, r2
 80075b6:	60fb      	str	r3, [r7, #12]

    if (IS_TIM_ADVANCED_INSTANCE(htim->Instance))
 80075b8:	687b      	ldr	r3, [r7, #4]
 80075ba:	681b      	ldr	r3, [r3, #0]
 80075bc:	4a11      	ldr	r2, [pc, #68]	; (8007604 <HAL_TIMEx_ConfigBreakDeadTime+0x158>)
 80075be:	4293      	cmp	r3, r2
 80075c0:	d009      	beq.n	80075d6 <HAL_TIMEx_ConfigBreakDeadTime+0x12a>
 80075c2:	687b      	ldr	r3, [r7, #4]
 80075c4:	681b      	ldr	r3, [r3, #0]
 80075c6:	4a10      	ldr	r2, [pc, #64]	; (8007608 <HAL_TIMEx_ConfigBreakDeadTime+0x15c>)
 80075c8:	4293      	cmp	r3, r2
 80075ca:	d004      	beq.n	80075d6 <HAL_TIMEx_ConfigBreakDeadTime+0x12a>
 80075cc:	687b      	ldr	r3, [r7, #4]
 80075ce:	681b      	ldr	r3, [r3, #0]
 80075d0:	4a0e      	ldr	r2, [pc, #56]	; (800760c <HAL_TIMEx_ConfigBreakDeadTime+0x160>)
 80075d2:	4293      	cmp	r3, r2
 80075d4:	d106      	bne.n	80075e4 <HAL_TIMEx_ConfigBreakDeadTime+0x138>
    {
      /* Check the parameters */
      assert_param(IS_TIM_BREAK2_AFMODE(sBreakDeadTimeConfig->Break2AFMode));

      /* Set BREAK2 AF mode */
      MODIFY_REG(tmpbdtr, TIM_BDTR_BK2BID, sBreakDeadTimeConfig->Break2AFMode);
 80075d6:	68fb      	ldr	r3, [r7, #12]
 80075d8:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
 80075dc:	683b      	ldr	r3, [r7, #0]
 80075de:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80075e0:	4313      	orrs	r3, r2
 80075e2:	60fb      	str	r3, [r7, #12]
    }
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 80075e4:	687b      	ldr	r3, [r7, #4]
 80075e6:	681b      	ldr	r3, [r3, #0]
 80075e8:	68fa      	ldr	r2, [r7, #12]
 80075ea:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 80075ec:	687b      	ldr	r3, [r7, #4]
 80075ee:	2200      	movs	r2, #0
 80075f0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80075f4:	2300      	movs	r3, #0
}
 80075f6:	4618      	mov	r0, r3
 80075f8:	3714      	adds	r7, #20
 80075fa:	46bd      	mov	sp, r7
 80075fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007600:	4770      	bx	lr
 8007602:	bf00      	nop
 8007604:	40012c00 	.word	0x40012c00
 8007608:	40013400 	.word	0x40013400
 800760c:	40015000 	.word	0x40015000

08007610 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8007610:	b480      	push	{r7}
 8007612:	b083      	sub	sp, #12
 8007614:	af00      	add	r7, sp, #0
 8007616:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8007618:	bf00      	nop
 800761a:	370c      	adds	r7, #12
 800761c:	46bd      	mov	sp, r7
 800761e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007622:	4770      	bx	lr

08007624 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8007624:	b480      	push	{r7}
 8007626:	b083      	sub	sp, #12
 8007628:	af00      	add	r7, sp, #0
 800762a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800762c:	bf00      	nop
 800762e:	370c      	adds	r7, #12
 8007630:	46bd      	mov	sp, r7
 8007632:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007636:	4770      	bx	lr

08007638 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8007638:	b480      	push	{r7}
 800763a:	b083      	sub	sp, #12
 800763c:	af00      	add	r7, sp, #0
 800763e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8007640:	bf00      	nop
 8007642:	370c      	adds	r7, #12
 8007644:	46bd      	mov	sp, r7
 8007646:	f85d 7b04 	ldr.w	r7, [sp], #4
 800764a:	4770      	bx	lr

0800764c <HAL_TIMEx_EncoderIndexCallback>:
  * @brief  Encoder index callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_EncoderIndexCallback(TIM_HandleTypeDef *htim)
{
 800764c:	b480      	push	{r7}
 800764e:	b083      	sub	sp, #12
 8007650:	af00      	add	r7, sp, #0
 8007652:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_EncoderIndexCallback could be implemented in the user file
   */
}
 8007654:	bf00      	nop
 8007656:	370c      	adds	r7, #12
 8007658:	46bd      	mov	sp, r7
 800765a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800765e:	4770      	bx	lr

08007660 <HAL_TIMEx_DirectionChangeCallback>:
  * @brief  Direction change callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_DirectionChangeCallback(TIM_HandleTypeDef *htim)
{
 8007660:	b480      	push	{r7}
 8007662:	b083      	sub	sp, #12
 8007664:	af00      	add	r7, sp, #0
 8007666:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_DirectionChangeCallback could be implemented in the user file
   */
}
 8007668:	bf00      	nop
 800766a:	370c      	adds	r7, #12
 800766c:	46bd      	mov	sp, r7
 800766e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007672:	4770      	bx	lr

08007674 <HAL_TIMEx_IndexErrorCallback>:
  * @brief  Index error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_IndexErrorCallback(TIM_HandleTypeDef *htim)
{
 8007674:	b480      	push	{r7}
 8007676:	b083      	sub	sp, #12
 8007678:	af00      	add	r7, sp, #0
 800767a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_IndexErrorCallback could be implemented in the user file
   */
}
 800767c:	bf00      	nop
 800767e:	370c      	adds	r7, #12
 8007680:	46bd      	mov	sp, r7
 8007682:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007686:	4770      	bx	lr

08007688 <HAL_TIMEx_TransitionErrorCallback>:
  * @brief  Transition error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_TransitionErrorCallback(TIM_HandleTypeDef *htim)
{
 8007688:	b480      	push	{r7}
 800768a:	b083      	sub	sp, #12
 800768c:	af00      	add	r7, sp, #0
 800768e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_TransitionErrorCallback could be implemented in the user file
   */
}
 8007690:	bf00      	nop
 8007692:	370c      	adds	r7, #12
 8007694:	46bd      	mov	sp, r7
 8007696:	f85d 7b04 	ldr.w	r7, [sp], #4
 800769a:	4770      	bx	lr

0800769c <LL_EXTI_EnableIT_0_31>:
{
 800769c:	b480      	push	{r7}
 800769e:	b083      	sub	sp, #12
 80076a0:	af00      	add	r7, sp, #0
 80076a2:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->IMR1, ExtiLine);
 80076a4:	4b05      	ldr	r3, [pc, #20]	; (80076bc <LL_EXTI_EnableIT_0_31+0x20>)
 80076a6:	681a      	ldr	r2, [r3, #0]
 80076a8:	4904      	ldr	r1, [pc, #16]	; (80076bc <LL_EXTI_EnableIT_0_31+0x20>)
 80076aa:	687b      	ldr	r3, [r7, #4]
 80076ac:	4313      	orrs	r3, r2
 80076ae:	600b      	str	r3, [r1, #0]
}
 80076b0:	bf00      	nop
 80076b2:	370c      	adds	r7, #12
 80076b4:	46bd      	mov	sp, r7
 80076b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076ba:	4770      	bx	lr
 80076bc:	40010400 	.word	0x40010400

080076c0 <LL_EXTI_EnableIT_32_63>:
{
 80076c0:	b480      	push	{r7}
 80076c2:	b083      	sub	sp, #12
 80076c4:	af00      	add	r7, sp, #0
 80076c6:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->IMR2, ExtiLine);
 80076c8:	4b05      	ldr	r3, [pc, #20]	; (80076e0 <LL_EXTI_EnableIT_32_63+0x20>)
 80076ca:	6a1a      	ldr	r2, [r3, #32]
 80076cc:	4904      	ldr	r1, [pc, #16]	; (80076e0 <LL_EXTI_EnableIT_32_63+0x20>)
 80076ce:	687b      	ldr	r3, [r7, #4]
 80076d0:	4313      	orrs	r3, r2
 80076d2:	620b      	str	r3, [r1, #32]
}
 80076d4:	bf00      	nop
 80076d6:	370c      	adds	r7, #12
 80076d8:	46bd      	mov	sp, r7
 80076da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076de:	4770      	bx	lr
 80076e0:	40010400 	.word	0x40010400

080076e4 <LL_EXTI_DisableIT_0_31>:
{
 80076e4:	b480      	push	{r7}
 80076e6:	b083      	sub	sp, #12
 80076e8:	af00      	add	r7, sp, #0
 80076ea:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->IMR1, ExtiLine);
 80076ec:	4b06      	ldr	r3, [pc, #24]	; (8007708 <LL_EXTI_DisableIT_0_31+0x24>)
 80076ee:	681a      	ldr	r2, [r3, #0]
 80076f0:	687b      	ldr	r3, [r7, #4]
 80076f2:	43db      	mvns	r3, r3
 80076f4:	4904      	ldr	r1, [pc, #16]	; (8007708 <LL_EXTI_DisableIT_0_31+0x24>)
 80076f6:	4013      	ands	r3, r2
 80076f8:	600b      	str	r3, [r1, #0]
}
 80076fa:	bf00      	nop
 80076fc:	370c      	adds	r7, #12
 80076fe:	46bd      	mov	sp, r7
 8007700:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007704:	4770      	bx	lr
 8007706:	bf00      	nop
 8007708:	40010400 	.word	0x40010400

0800770c <LL_EXTI_DisableIT_32_63>:
{
 800770c:	b480      	push	{r7}
 800770e:	b083      	sub	sp, #12
 8007710:	af00      	add	r7, sp, #0
 8007712:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->IMR2, ExtiLine);
 8007714:	4b06      	ldr	r3, [pc, #24]	; (8007730 <LL_EXTI_DisableIT_32_63+0x24>)
 8007716:	6a1a      	ldr	r2, [r3, #32]
 8007718:	687b      	ldr	r3, [r7, #4]
 800771a:	43db      	mvns	r3, r3
 800771c:	4904      	ldr	r1, [pc, #16]	; (8007730 <LL_EXTI_DisableIT_32_63+0x24>)
 800771e:	4013      	ands	r3, r2
 8007720:	620b      	str	r3, [r1, #32]
}
 8007722:	bf00      	nop
 8007724:	370c      	adds	r7, #12
 8007726:	46bd      	mov	sp, r7
 8007728:	f85d 7b04 	ldr.w	r7, [sp], #4
 800772c:	4770      	bx	lr
 800772e:	bf00      	nop
 8007730:	40010400 	.word	0x40010400

08007734 <LL_EXTI_EnableEvent_0_31>:
{
 8007734:	b480      	push	{r7}
 8007736:	b083      	sub	sp, #12
 8007738:	af00      	add	r7, sp, #0
 800773a:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->EMR1, ExtiLine);
 800773c:	4b05      	ldr	r3, [pc, #20]	; (8007754 <LL_EXTI_EnableEvent_0_31+0x20>)
 800773e:	685a      	ldr	r2, [r3, #4]
 8007740:	4904      	ldr	r1, [pc, #16]	; (8007754 <LL_EXTI_EnableEvent_0_31+0x20>)
 8007742:	687b      	ldr	r3, [r7, #4]
 8007744:	4313      	orrs	r3, r2
 8007746:	604b      	str	r3, [r1, #4]
}
 8007748:	bf00      	nop
 800774a:	370c      	adds	r7, #12
 800774c:	46bd      	mov	sp, r7
 800774e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007752:	4770      	bx	lr
 8007754:	40010400 	.word	0x40010400

08007758 <LL_EXTI_EnableEvent_32_63>:
{
 8007758:	b480      	push	{r7}
 800775a:	b083      	sub	sp, #12
 800775c:	af00      	add	r7, sp, #0
 800775e:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->EMR2, ExtiLine);
 8007760:	4b05      	ldr	r3, [pc, #20]	; (8007778 <LL_EXTI_EnableEvent_32_63+0x20>)
 8007762:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8007764:	4904      	ldr	r1, [pc, #16]	; (8007778 <LL_EXTI_EnableEvent_32_63+0x20>)
 8007766:	687b      	ldr	r3, [r7, #4]
 8007768:	4313      	orrs	r3, r2
 800776a:	624b      	str	r3, [r1, #36]	; 0x24
}
 800776c:	bf00      	nop
 800776e:	370c      	adds	r7, #12
 8007770:	46bd      	mov	sp, r7
 8007772:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007776:	4770      	bx	lr
 8007778:	40010400 	.word	0x40010400

0800777c <LL_EXTI_DisableEvent_0_31>:
{
 800777c:	b480      	push	{r7}
 800777e:	b083      	sub	sp, #12
 8007780:	af00      	add	r7, sp, #0
 8007782:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->EMR1, ExtiLine);
 8007784:	4b06      	ldr	r3, [pc, #24]	; (80077a0 <LL_EXTI_DisableEvent_0_31+0x24>)
 8007786:	685a      	ldr	r2, [r3, #4]
 8007788:	687b      	ldr	r3, [r7, #4]
 800778a:	43db      	mvns	r3, r3
 800778c:	4904      	ldr	r1, [pc, #16]	; (80077a0 <LL_EXTI_DisableEvent_0_31+0x24>)
 800778e:	4013      	ands	r3, r2
 8007790:	604b      	str	r3, [r1, #4]
}
 8007792:	bf00      	nop
 8007794:	370c      	adds	r7, #12
 8007796:	46bd      	mov	sp, r7
 8007798:	f85d 7b04 	ldr.w	r7, [sp], #4
 800779c:	4770      	bx	lr
 800779e:	bf00      	nop
 80077a0:	40010400 	.word	0x40010400

080077a4 <LL_EXTI_DisableEvent_32_63>:
{
 80077a4:	b480      	push	{r7}
 80077a6:	b083      	sub	sp, #12
 80077a8:	af00      	add	r7, sp, #0
 80077aa:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->EMR2, ExtiLine);
 80077ac:	4b06      	ldr	r3, [pc, #24]	; (80077c8 <LL_EXTI_DisableEvent_32_63+0x24>)
 80077ae:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80077b0:	687b      	ldr	r3, [r7, #4]
 80077b2:	43db      	mvns	r3, r3
 80077b4:	4904      	ldr	r1, [pc, #16]	; (80077c8 <LL_EXTI_DisableEvent_32_63+0x24>)
 80077b6:	4013      	ands	r3, r2
 80077b8:	624b      	str	r3, [r1, #36]	; 0x24
}
 80077ba:	bf00      	nop
 80077bc:	370c      	adds	r7, #12
 80077be:	46bd      	mov	sp, r7
 80077c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077c4:	4770      	bx	lr
 80077c6:	bf00      	nop
 80077c8:	40010400 	.word	0x40010400

080077cc <LL_EXTI_EnableRisingTrig_0_31>:
{
 80077cc:	b480      	push	{r7}
 80077ce:	b083      	sub	sp, #12
 80077d0:	af00      	add	r7, sp, #0
 80077d2:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->RTSR1, ExtiLine);
 80077d4:	4b05      	ldr	r3, [pc, #20]	; (80077ec <LL_EXTI_EnableRisingTrig_0_31+0x20>)
 80077d6:	689a      	ldr	r2, [r3, #8]
 80077d8:	4904      	ldr	r1, [pc, #16]	; (80077ec <LL_EXTI_EnableRisingTrig_0_31+0x20>)
 80077da:	687b      	ldr	r3, [r7, #4]
 80077dc:	4313      	orrs	r3, r2
 80077de:	608b      	str	r3, [r1, #8]
}
 80077e0:	bf00      	nop
 80077e2:	370c      	adds	r7, #12
 80077e4:	46bd      	mov	sp, r7
 80077e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077ea:	4770      	bx	lr
 80077ec:	40010400 	.word	0x40010400

080077f0 <LL_EXTI_EnableRisingTrig_32_63>:
{
 80077f0:	b480      	push	{r7}
 80077f2:	b083      	sub	sp, #12
 80077f4:	af00      	add	r7, sp, #0
 80077f6:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->RTSR2, ExtiLine);
 80077f8:	4b05      	ldr	r3, [pc, #20]	; (8007810 <LL_EXTI_EnableRisingTrig_32_63+0x20>)
 80077fa:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80077fc:	4904      	ldr	r1, [pc, #16]	; (8007810 <LL_EXTI_EnableRisingTrig_32_63+0x20>)
 80077fe:	687b      	ldr	r3, [r7, #4]
 8007800:	4313      	orrs	r3, r2
 8007802:	628b      	str	r3, [r1, #40]	; 0x28
}
 8007804:	bf00      	nop
 8007806:	370c      	adds	r7, #12
 8007808:	46bd      	mov	sp, r7
 800780a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800780e:	4770      	bx	lr
 8007810:	40010400 	.word	0x40010400

08007814 <LL_EXTI_DisableRisingTrig_0_31>:
{
 8007814:	b480      	push	{r7}
 8007816:	b083      	sub	sp, #12
 8007818:	af00      	add	r7, sp, #0
 800781a:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->RTSR1, ExtiLine);
 800781c:	4b06      	ldr	r3, [pc, #24]	; (8007838 <LL_EXTI_DisableRisingTrig_0_31+0x24>)
 800781e:	689a      	ldr	r2, [r3, #8]
 8007820:	687b      	ldr	r3, [r7, #4]
 8007822:	43db      	mvns	r3, r3
 8007824:	4904      	ldr	r1, [pc, #16]	; (8007838 <LL_EXTI_DisableRisingTrig_0_31+0x24>)
 8007826:	4013      	ands	r3, r2
 8007828:	608b      	str	r3, [r1, #8]
}
 800782a:	bf00      	nop
 800782c:	370c      	adds	r7, #12
 800782e:	46bd      	mov	sp, r7
 8007830:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007834:	4770      	bx	lr
 8007836:	bf00      	nop
 8007838:	40010400 	.word	0x40010400

0800783c <LL_EXTI_DisableRisingTrig_32_63>:
{
 800783c:	b480      	push	{r7}
 800783e:	b083      	sub	sp, #12
 8007840:	af00      	add	r7, sp, #0
 8007842:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->RTSR2, ExtiLine);
 8007844:	4b06      	ldr	r3, [pc, #24]	; (8007860 <LL_EXTI_DisableRisingTrig_32_63+0x24>)
 8007846:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8007848:	687b      	ldr	r3, [r7, #4]
 800784a:	43db      	mvns	r3, r3
 800784c:	4904      	ldr	r1, [pc, #16]	; (8007860 <LL_EXTI_DisableRisingTrig_32_63+0x24>)
 800784e:	4013      	ands	r3, r2
 8007850:	628b      	str	r3, [r1, #40]	; 0x28
}
 8007852:	bf00      	nop
 8007854:	370c      	adds	r7, #12
 8007856:	46bd      	mov	sp, r7
 8007858:	f85d 7b04 	ldr.w	r7, [sp], #4
 800785c:	4770      	bx	lr
 800785e:	bf00      	nop
 8007860:	40010400 	.word	0x40010400

08007864 <LL_EXTI_EnableFallingTrig_0_31>:
{
 8007864:	b480      	push	{r7}
 8007866:	b083      	sub	sp, #12
 8007868:	af00      	add	r7, sp, #0
 800786a:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->FTSR1, ExtiLine);
 800786c:	4b05      	ldr	r3, [pc, #20]	; (8007884 <LL_EXTI_EnableFallingTrig_0_31+0x20>)
 800786e:	68da      	ldr	r2, [r3, #12]
 8007870:	4904      	ldr	r1, [pc, #16]	; (8007884 <LL_EXTI_EnableFallingTrig_0_31+0x20>)
 8007872:	687b      	ldr	r3, [r7, #4]
 8007874:	4313      	orrs	r3, r2
 8007876:	60cb      	str	r3, [r1, #12]
}
 8007878:	bf00      	nop
 800787a:	370c      	adds	r7, #12
 800787c:	46bd      	mov	sp, r7
 800787e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007882:	4770      	bx	lr
 8007884:	40010400 	.word	0x40010400

08007888 <LL_EXTI_EnableFallingTrig_32_63>:
{
 8007888:	b480      	push	{r7}
 800788a:	b083      	sub	sp, #12
 800788c:	af00      	add	r7, sp, #0
 800788e:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->FTSR2, ExtiLine);
 8007890:	4b05      	ldr	r3, [pc, #20]	; (80078a8 <LL_EXTI_EnableFallingTrig_32_63+0x20>)
 8007892:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007894:	4904      	ldr	r1, [pc, #16]	; (80078a8 <LL_EXTI_EnableFallingTrig_32_63+0x20>)
 8007896:	687b      	ldr	r3, [r7, #4]
 8007898:	4313      	orrs	r3, r2
 800789a:	62cb      	str	r3, [r1, #44]	; 0x2c
}
 800789c:	bf00      	nop
 800789e:	370c      	adds	r7, #12
 80078a0:	46bd      	mov	sp, r7
 80078a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078a6:	4770      	bx	lr
 80078a8:	40010400 	.word	0x40010400

080078ac <LL_EXTI_DisableFallingTrig_0_31>:
{
 80078ac:	b480      	push	{r7}
 80078ae:	b083      	sub	sp, #12
 80078b0:	af00      	add	r7, sp, #0
 80078b2:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->FTSR1, ExtiLine);
 80078b4:	4b06      	ldr	r3, [pc, #24]	; (80078d0 <LL_EXTI_DisableFallingTrig_0_31+0x24>)
 80078b6:	68da      	ldr	r2, [r3, #12]
 80078b8:	687b      	ldr	r3, [r7, #4]
 80078ba:	43db      	mvns	r3, r3
 80078bc:	4904      	ldr	r1, [pc, #16]	; (80078d0 <LL_EXTI_DisableFallingTrig_0_31+0x24>)
 80078be:	4013      	ands	r3, r2
 80078c0:	60cb      	str	r3, [r1, #12]
}
 80078c2:	bf00      	nop
 80078c4:	370c      	adds	r7, #12
 80078c6:	46bd      	mov	sp, r7
 80078c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078cc:	4770      	bx	lr
 80078ce:	bf00      	nop
 80078d0:	40010400 	.word	0x40010400

080078d4 <LL_EXTI_DisableFallingTrig_32_63>:
{
 80078d4:	b480      	push	{r7}
 80078d6:	b083      	sub	sp, #12
 80078d8:	af00      	add	r7, sp, #0
 80078da:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->FTSR2, ExtiLine);
 80078dc:	4b06      	ldr	r3, [pc, #24]	; (80078f8 <LL_EXTI_DisableFallingTrig_32_63+0x24>)
 80078de:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80078e0:	687b      	ldr	r3, [r7, #4]
 80078e2:	43db      	mvns	r3, r3
 80078e4:	4904      	ldr	r1, [pc, #16]	; (80078f8 <LL_EXTI_DisableFallingTrig_32_63+0x24>)
 80078e6:	4013      	ands	r3, r2
 80078e8:	62cb      	str	r3, [r1, #44]	; 0x2c
}
 80078ea:	bf00      	nop
 80078ec:	370c      	adds	r7, #12
 80078ee:	46bd      	mov	sp, r7
 80078f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078f4:	4770      	bx	lr
 80078f6:	bf00      	nop
 80078f8:	40010400 	.word	0x40010400

080078fc <LL_EXTI_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - 0x00: EXTI registers are initialized
  *          - any other calue : wrong configuration
  */
uint32_t LL_EXTI_Init(LL_EXTI_InitTypeDef *EXTI_InitStruct)
{
 80078fc:	b580      	push	{r7, lr}
 80078fe:	b084      	sub	sp, #16
 8007900:	af00      	add	r7, sp, #0
 8007902:	6078      	str	r0, [r7, #4]
  uint32_t status = 0x00u;
 8007904:	2300      	movs	r3, #0
 8007906:	60fb      	str	r3, [r7, #12]
  assert_param(IS_LL_EXTI_LINE_32_63(EXTI_InitStruct->Line_32_63));
  assert_param(IS_FUNCTIONAL_STATE(EXTI_InitStruct->LineCommand));
  assert_param(IS_LL_EXTI_MODE(EXTI_InitStruct->Mode));

  /* ENABLE LineCommand */
  if (EXTI_InitStruct->LineCommand != DISABLE)
 8007908:	687b      	ldr	r3, [r7, #4]
 800790a:	7a1b      	ldrb	r3, [r3, #8]
 800790c:	2b00      	cmp	r3, #0
 800790e:	f000 80c8 	beq.w	8007aa2 <LL_EXTI_Init+0x1a6>
  {
    assert_param(IS_LL_EXTI_TRIGGER(EXTI_InitStruct->Trigger));

    /* Configure EXTI Lines in range from 0 to 31 */
    if (EXTI_InitStruct->Line_0_31 != LL_EXTI_LINE_NONE)
 8007912:	687b      	ldr	r3, [r7, #4]
 8007914:	681b      	ldr	r3, [r3, #0]
 8007916:	2b00      	cmp	r3, #0
 8007918:	d05d      	beq.n	80079d6 <LL_EXTI_Init+0xda>
    {
      switch (EXTI_InitStruct->Mode)
 800791a:	687b      	ldr	r3, [r7, #4]
 800791c:	7a5b      	ldrb	r3, [r3, #9]
 800791e:	2b01      	cmp	r3, #1
 8007920:	d00e      	beq.n	8007940 <LL_EXTI_Init+0x44>
 8007922:	2b02      	cmp	r3, #2
 8007924:	d017      	beq.n	8007956 <LL_EXTI_Init+0x5a>
 8007926:	2b00      	cmp	r3, #0
 8007928:	d120      	bne.n	800796c <LL_EXTI_Init+0x70>
      {
        case LL_EXTI_MODE_IT:
          /* First Disable Event on provided Lines */
          LL_EXTI_DisableEvent_0_31(EXTI_InitStruct->Line_0_31);
 800792a:	687b      	ldr	r3, [r7, #4]
 800792c:	681b      	ldr	r3, [r3, #0]
 800792e:	4618      	mov	r0, r3
 8007930:	f7ff ff24 	bl	800777c <LL_EXTI_DisableEvent_0_31>
          /* Then Enable IT on provided Lines */
          LL_EXTI_EnableIT_0_31(EXTI_InitStruct->Line_0_31);
 8007934:	687b      	ldr	r3, [r7, #4]
 8007936:	681b      	ldr	r3, [r3, #0]
 8007938:	4618      	mov	r0, r3
 800793a:	f7ff feaf 	bl	800769c <LL_EXTI_EnableIT_0_31>
          break;
 800793e:	e018      	b.n	8007972 <LL_EXTI_Init+0x76>
        case LL_EXTI_MODE_EVENT:
          /* First Disable IT on provided Lines */
          LL_EXTI_DisableIT_0_31(EXTI_InitStruct->Line_0_31);
 8007940:	687b      	ldr	r3, [r7, #4]
 8007942:	681b      	ldr	r3, [r3, #0]
 8007944:	4618      	mov	r0, r3
 8007946:	f7ff fecd 	bl	80076e4 <LL_EXTI_DisableIT_0_31>
          /* Then Enable Event on provided Lines */
          LL_EXTI_EnableEvent_0_31(EXTI_InitStruct->Line_0_31);
 800794a:	687b      	ldr	r3, [r7, #4]
 800794c:	681b      	ldr	r3, [r3, #0]
 800794e:	4618      	mov	r0, r3
 8007950:	f7ff fef0 	bl	8007734 <LL_EXTI_EnableEvent_0_31>
          break;
 8007954:	e00d      	b.n	8007972 <LL_EXTI_Init+0x76>
        case LL_EXTI_MODE_IT_EVENT:
          /* Directly Enable IT on provided Lines */
          LL_EXTI_EnableIT_0_31(EXTI_InitStruct->Line_0_31);
 8007956:	687b      	ldr	r3, [r7, #4]
 8007958:	681b      	ldr	r3, [r3, #0]
 800795a:	4618      	mov	r0, r3
 800795c:	f7ff fe9e 	bl	800769c <LL_EXTI_EnableIT_0_31>
          /* Directly Enable Event on provided Lines */
          LL_EXTI_EnableEvent_0_31(EXTI_InitStruct->Line_0_31);
 8007960:	687b      	ldr	r3, [r7, #4]
 8007962:	681b      	ldr	r3, [r3, #0]
 8007964:	4618      	mov	r0, r3
 8007966:	f7ff fee5 	bl	8007734 <LL_EXTI_EnableEvent_0_31>
          break;
 800796a:	e002      	b.n	8007972 <LL_EXTI_Init+0x76>
        default:
          status = 0x01u;
 800796c:	2301      	movs	r3, #1
 800796e:	60fb      	str	r3, [r7, #12]
          break;
 8007970:	bf00      	nop
      }
      if (EXTI_InitStruct->Trigger != LL_EXTI_TRIGGER_NONE)
 8007972:	687b      	ldr	r3, [r7, #4]
 8007974:	7a9b      	ldrb	r3, [r3, #10]
 8007976:	2b00      	cmp	r3, #0
 8007978:	d02d      	beq.n	80079d6 <LL_EXTI_Init+0xda>
      {
        switch (EXTI_InitStruct->Trigger)
 800797a:	687b      	ldr	r3, [r7, #4]
 800797c:	7a9b      	ldrb	r3, [r3, #10]
 800797e:	2b02      	cmp	r3, #2
 8007980:	d00e      	beq.n	80079a0 <LL_EXTI_Init+0xa4>
 8007982:	2b03      	cmp	r3, #3
 8007984:	d017      	beq.n	80079b6 <LL_EXTI_Init+0xba>
 8007986:	2b01      	cmp	r3, #1
 8007988:	d120      	bne.n	80079cc <LL_EXTI_Init+0xd0>
        {
          case LL_EXTI_TRIGGER_RISING:
            /* First Disable Falling Trigger on provided Lines */
            LL_EXTI_DisableFallingTrig_0_31(EXTI_InitStruct->Line_0_31);
 800798a:	687b      	ldr	r3, [r7, #4]
 800798c:	681b      	ldr	r3, [r3, #0]
 800798e:	4618      	mov	r0, r3
 8007990:	f7ff ff8c 	bl	80078ac <LL_EXTI_DisableFallingTrig_0_31>
            /* Then Enable Rising Trigger on provided Lines */
            LL_EXTI_EnableRisingTrig_0_31(EXTI_InitStruct->Line_0_31);
 8007994:	687b      	ldr	r3, [r7, #4]
 8007996:	681b      	ldr	r3, [r3, #0]
 8007998:	4618      	mov	r0, r3
 800799a:	f7ff ff17 	bl	80077cc <LL_EXTI_EnableRisingTrig_0_31>
            break;
 800799e:	e01b      	b.n	80079d8 <LL_EXTI_Init+0xdc>
          case LL_EXTI_TRIGGER_FALLING:
            /* First Disable Rising Trigger on provided Lines */
            LL_EXTI_DisableRisingTrig_0_31(EXTI_InitStruct->Line_0_31);
 80079a0:	687b      	ldr	r3, [r7, #4]
 80079a2:	681b      	ldr	r3, [r3, #0]
 80079a4:	4618      	mov	r0, r3
 80079a6:	f7ff ff35 	bl	8007814 <LL_EXTI_DisableRisingTrig_0_31>
            /* Then Enable Falling Trigger on provided Lines */
            LL_EXTI_EnableFallingTrig_0_31(EXTI_InitStruct->Line_0_31);
 80079aa:	687b      	ldr	r3, [r7, #4]
 80079ac:	681b      	ldr	r3, [r3, #0]
 80079ae:	4618      	mov	r0, r3
 80079b0:	f7ff ff58 	bl	8007864 <LL_EXTI_EnableFallingTrig_0_31>
            break;
 80079b4:	e010      	b.n	80079d8 <LL_EXTI_Init+0xdc>
          case LL_EXTI_TRIGGER_RISING_FALLING:
            /* Enable Rising Trigger on provided Lines */
            LL_EXTI_EnableRisingTrig_0_31(EXTI_InitStruct->Line_0_31);
 80079b6:	687b      	ldr	r3, [r7, #4]
 80079b8:	681b      	ldr	r3, [r3, #0]
 80079ba:	4618      	mov	r0, r3
 80079bc:	f7ff ff06 	bl	80077cc <LL_EXTI_EnableRisingTrig_0_31>
            /* Enable Falling Trigger on provided Lines */
            LL_EXTI_EnableFallingTrig_0_31(EXTI_InitStruct->Line_0_31);
 80079c0:	687b      	ldr	r3, [r7, #4]
 80079c2:	681b      	ldr	r3, [r3, #0]
 80079c4:	4618      	mov	r0, r3
 80079c6:	f7ff ff4d 	bl	8007864 <LL_EXTI_EnableFallingTrig_0_31>
            break;
 80079ca:	e005      	b.n	80079d8 <LL_EXTI_Init+0xdc>
          default:
            status |= 0x02u;
 80079cc:	68fb      	ldr	r3, [r7, #12]
 80079ce:	f043 0302 	orr.w	r3, r3, #2
 80079d2:	60fb      	str	r3, [r7, #12]
            break;
 80079d4:	e000      	b.n	80079d8 <LL_EXTI_Init+0xdc>
        }
      }
 80079d6:	bf00      	nop
    }
    /* Configure EXTI Lines in range from 32 to 63 */
    if (EXTI_InitStruct->Line_32_63 != LL_EXTI_LINE_NONE)
 80079d8:	687b      	ldr	r3, [r7, #4]
 80079da:	685b      	ldr	r3, [r3, #4]
 80079dc:	2b00      	cmp	r3, #0
 80079de:	d075      	beq.n	8007acc <LL_EXTI_Init+0x1d0>
    {
      switch (EXTI_InitStruct->Mode)
 80079e0:	687b      	ldr	r3, [r7, #4]
 80079e2:	7a5b      	ldrb	r3, [r3, #9]
 80079e4:	2b01      	cmp	r3, #1
 80079e6:	d00e      	beq.n	8007a06 <LL_EXTI_Init+0x10a>
 80079e8:	2b02      	cmp	r3, #2
 80079ea:	d017      	beq.n	8007a1c <LL_EXTI_Init+0x120>
 80079ec:	2b00      	cmp	r3, #0
 80079ee:	d120      	bne.n	8007a32 <LL_EXTI_Init+0x136>
      {
        case LL_EXTI_MODE_IT:
          /* First Disable Event on provided Lines */
          LL_EXTI_DisableEvent_32_63(EXTI_InitStruct->Line_32_63);
 80079f0:	687b      	ldr	r3, [r7, #4]
 80079f2:	685b      	ldr	r3, [r3, #4]
 80079f4:	4618      	mov	r0, r3
 80079f6:	f7ff fed5 	bl	80077a4 <LL_EXTI_DisableEvent_32_63>
          /* Then Enable IT on provided Lines */
          LL_EXTI_EnableIT_32_63(EXTI_InitStruct->Line_32_63);
 80079fa:	687b      	ldr	r3, [r7, #4]
 80079fc:	685b      	ldr	r3, [r3, #4]
 80079fe:	4618      	mov	r0, r3
 8007a00:	f7ff fe5e 	bl	80076c0 <LL_EXTI_EnableIT_32_63>
          break;
 8007a04:	e01a      	b.n	8007a3c <LL_EXTI_Init+0x140>
        case LL_EXTI_MODE_EVENT:
          /* First Disable IT on provided Lines */
          LL_EXTI_DisableIT_32_63(EXTI_InitStruct->Line_32_63);
 8007a06:	687b      	ldr	r3, [r7, #4]
 8007a08:	685b      	ldr	r3, [r3, #4]
 8007a0a:	4618      	mov	r0, r3
 8007a0c:	f7ff fe7e 	bl	800770c <LL_EXTI_DisableIT_32_63>
          /* Then Enable Event on provided Lines */
          LL_EXTI_EnableEvent_32_63(EXTI_InitStruct->Line_32_63);
 8007a10:	687b      	ldr	r3, [r7, #4]
 8007a12:	685b      	ldr	r3, [r3, #4]
 8007a14:	4618      	mov	r0, r3
 8007a16:	f7ff fe9f 	bl	8007758 <LL_EXTI_EnableEvent_32_63>
          break;
 8007a1a:	e00f      	b.n	8007a3c <LL_EXTI_Init+0x140>
        case LL_EXTI_MODE_IT_EVENT:
          /* Directly Enable IT on provided Lines */
          LL_EXTI_EnableIT_32_63(EXTI_InitStruct->Line_32_63);
 8007a1c:	687b      	ldr	r3, [r7, #4]
 8007a1e:	685b      	ldr	r3, [r3, #4]
 8007a20:	4618      	mov	r0, r3
 8007a22:	f7ff fe4d 	bl	80076c0 <LL_EXTI_EnableIT_32_63>
          /* Directly Enable IT on provided Lines */
          LL_EXTI_EnableEvent_32_63(EXTI_InitStruct->Line_32_63);
 8007a26:	687b      	ldr	r3, [r7, #4]
 8007a28:	685b      	ldr	r3, [r3, #4]
 8007a2a:	4618      	mov	r0, r3
 8007a2c:	f7ff fe94 	bl	8007758 <LL_EXTI_EnableEvent_32_63>
          break;
 8007a30:	e004      	b.n	8007a3c <LL_EXTI_Init+0x140>
        default:
          status |= 0x04u;
 8007a32:	68fb      	ldr	r3, [r7, #12]
 8007a34:	f043 0304 	orr.w	r3, r3, #4
 8007a38:	60fb      	str	r3, [r7, #12]
          break;
 8007a3a:	bf00      	nop
      }
      if (EXTI_InitStruct->Trigger != LL_EXTI_TRIGGER_NONE)
 8007a3c:	687b      	ldr	r3, [r7, #4]
 8007a3e:	7a9b      	ldrb	r3, [r3, #10]
 8007a40:	2b00      	cmp	r3, #0
 8007a42:	d043      	beq.n	8007acc <LL_EXTI_Init+0x1d0>
      {
        switch (EXTI_InitStruct->Trigger)
 8007a44:	687b      	ldr	r3, [r7, #4]
 8007a46:	7a9b      	ldrb	r3, [r3, #10]
 8007a48:	2b02      	cmp	r3, #2
 8007a4a:	d00e      	beq.n	8007a6a <LL_EXTI_Init+0x16e>
 8007a4c:	2b03      	cmp	r3, #3
 8007a4e:	d017      	beq.n	8007a80 <LL_EXTI_Init+0x184>
 8007a50:	2b01      	cmp	r3, #1
 8007a52:	d120      	bne.n	8007a96 <LL_EXTI_Init+0x19a>
        {
          case LL_EXTI_TRIGGER_RISING:
            /* First Disable Falling Trigger on provided Lines */
            LL_EXTI_DisableFallingTrig_32_63(EXTI_InitStruct->Line_32_63);
 8007a54:	687b      	ldr	r3, [r7, #4]
 8007a56:	685b      	ldr	r3, [r3, #4]
 8007a58:	4618      	mov	r0, r3
 8007a5a:	f7ff ff3b 	bl	80078d4 <LL_EXTI_DisableFallingTrig_32_63>
            /* Then Enable IT on provided Lines */
            LL_EXTI_EnableRisingTrig_32_63(EXTI_InitStruct->Line_32_63);
 8007a5e:	687b      	ldr	r3, [r7, #4]
 8007a60:	685b      	ldr	r3, [r3, #4]
 8007a62:	4618      	mov	r0, r3
 8007a64:	f7ff fec4 	bl	80077f0 <LL_EXTI_EnableRisingTrig_32_63>
            break;
 8007a68:	e031      	b.n	8007ace <LL_EXTI_Init+0x1d2>
          case LL_EXTI_TRIGGER_FALLING:
            /* First Disable Rising Trigger on provided Lines */
            LL_EXTI_DisableRisingTrig_32_63(EXTI_InitStruct->Line_32_63);
 8007a6a:	687b      	ldr	r3, [r7, #4]
 8007a6c:	685b      	ldr	r3, [r3, #4]
 8007a6e:	4618      	mov	r0, r3
 8007a70:	f7ff fee4 	bl	800783c <LL_EXTI_DisableRisingTrig_32_63>
            /* Then Enable Falling Trigger on provided Lines */
            LL_EXTI_EnableFallingTrig_32_63(EXTI_InitStruct->Line_32_63);
 8007a74:	687b      	ldr	r3, [r7, #4]
 8007a76:	685b      	ldr	r3, [r3, #4]
 8007a78:	4618      	mov	r0, r3
 8007a7a:	f7ff ff05 	bl	8007888 <LL_EXTI_EnableFallingTrig_32_63>
            break;
 8007a7e:	e026      	b.n	8007ace <LL_EXTI_Init+0x1d2>
          case LL_EXTI_TRIGGER_RISING_FALLING:
            /* Enable Rising Trigger on provided Lines */
            LL_EXTI_EnableRisingTrig_32_63(EXTI_InitStruct->Line_32_63);
 8007a80:	687b      	ldr	r3, [r7, #4]
 8007a82:	685b      	ldr	r3, [r3, #4]
 8007a84:	4618      	mov	r0, r3
 8007a86:	f7ff feb3 	bl	80077f0 <LL_EXTI_EnableRisingTrig_32_63>
            /* Enable Falling Trigger on provided Lines */
            LL_EXTI_EnableFallingTrig_32_63(EXTI_InitStruct->Line_32_63);
 8007a8a:	687b      	ldr	r3, [r7, #4]
 8007a8c:	685b      	ldr	r3, [r3, #4]
 8007a8e:	4618      	mov	r0, r3
 8007a90:	f7ff fefa 	bl	8007888 <LL_EXTI_EnableFallingTrig_32_63>
            break;
 8007a94:	e01b      	b.n	8007ace <LL_EXTI_Init+0x1d2>
          default:
            status |= 0x05u;
 8007a96:	68fb      	ldr	r3, [r7, #12]
 8007a98:	f043 0305 	orr.w	r3, r3, #5
 8007a9c:	60fb      	str	r3, [r7, #12]
            break;
 8007a9e:	bf00      	nop
 8007aa0:	e015      	b.n	8007ace <LL_EXTI_Init+0x1d2>
  }
  /* DISABLE LineCommand */
  else
  {
    /* De-configure IT EXTI Lines in range from 0 to 31 */
    LL_EXTI_DisableIT_0_31(EXTI_InitStruct->Line_0_31);
 8007aa2:	687b      	ldr	r3, [r7, #4]
 8007aa4:	681b      	ldr	r3, [r3, #0]
 8007aa6:	4618      	mov	r0, r3
 8007aa8:	f7ff fe1c 	bl	80076e4 <LL_EXTI_DisableIT_0_31>
    /* De-configure Event EXTI Lines in range from 0 to 31 */
    LL_EXTI_DisableEvent_0_31(EXTI_InitStruct->Line_0_31);
 8007aac:	687b      	ldr	r3, [r7, #4]
 8007aae:	681b      	ldr	r3, [r3, #0]
 8007ab0:	4618      	mov	r0, r3
 8007ab2:	f7ff fe63 	bl	800777c <LL_EXTI_DisableEvent_0_31>
    /* De-configure IT EXTI Lines in range from 32 to 63 */
    LL_EXTI_DisableIT_32_63(EXTI_InitStruct->Line_32_63);
 8007ab6:	687b      	ldr	r3, [r7, #4]
 8007ab8:	685b      	ldr	r3, [r3, #4]
 8007aba:	4618      	mov	r0, r3
 8007abc:	f7ff fe26 	bl	800770c <LL_EXTI_DisableIT_32_63>
    /* De-configure Event EXTI Lines in range from 32 to 63 */
    LL_EXTI_DisableEvent_32_63(EXTI_InitStruct->Line_32_63);
 8007ac0:	687b      	ldr	r3, [r7, #4]
 8007ac2:	685b      	ldr	r3, [r3, #4]
 8007ac4:	4618      	mov	r0, r3
 8007ac6:	f7ff fe6d 	bl	80077a4 <LL_EXTI_DisableEvent_32_63>
 8007aca:	e000      	b.n	8007ace <LL_EXTI_Init+0x1d2>
      }
 8007acc:	bf00      	nop
  }

  return status;
 8007ace:	68fb      	ldr	r3, [r7, #12]
}
 8007ad0:	4618      	mov	r0, r3
 8007ad2:	3710      	adds	r7, #16
 8007ad4:	46bd      	mov	sp, r7
 8007ad6:	bd80      	pop	{r7, pc}

08007ad8 <LL_GPIO_SetPinMode>:
{
 8007ad8:	b480      	push	{r7}
 8007ada:	b089      	sub	sp, #36	; 0x24
 8007adc:	af00      	add	r7, sp, #0
 8007ade:	60f8      	str	r0, [r7, #12]
 8007ae0:	60b9      	str	r1, [r7, #8]
 8007ae2:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->MODER, (GPIO_MODER_MODE0 << (POSITION_VAL(Pin) * 2U)), (Mode << (POSITION_VAL(Pin) * 2U)));
 8007ae4:	68fb      	ldr	r3, [r7, #12]
 8007ae6:	681a      	ldr	r2, [r3, #0]
 8007ae8:	68bb      	ldr	r3, [r7, #8]
 8007aea:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8007aec:	697b      	ldr	r3, [r7, #20]
 8007aee:	fa93 f3a3 	rbit	r3, r3
 8007af2:	613b      	str	r3, [r7, #16]
  return result;
 8007af4:	693b      	ldr	r3, [r7, #16]
 8007af6:	fab3 f383 	clz	r3, r3
 8007afa:	b2db      	uxtb	r3, r3
 8007afc:	005b      	lsls	r3, r3, #1
 8007afe:	2103      	movs	r1, #3
 8007b00:	fa01 f303 	lsl.w	r3, r1, r3
 8007b04:	43db      	mvns	r3, r3
 8007b06:	401a      	ands	r2, r3
 8007b08:	68bb      	ldr	r3, [r7, #8]
 8007b0a:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8007b0c:	69fb      	ldr	r3, [r7, #28]
 8007b0e:	fa93 f3a3 	rbit	r3, r3
 8007b12:	61bb      	str	r3, [r7, #24]
  return result;
 8007b14:	69bb      	ldr	r3, [r7, #24]
 8007b16:	fab3 f383 	clz	r3, r3
 8007b1a:	b2db      	uxtb	r3, r3
 8007b1c:	005b      	lsls	r3, r3, #1
 8007b1e:	6879      	ldr	r1, [r7, #4]
 8007b20:	fa01 f303 	lsl.w	r3, r1, r3
 8007b24:	431a      	orrs	r2, r3
 8007b26:	68fb      	ldr	r3, [r7, #12]
 8007b28:	601a      	str	r2, [r3, #0]
}
 8007b2a:	bf00      	nop
 8007b2c:	3724      	adds	r7, #36	; 0x24
 8007b2e:	46bd      	mov	sp, r7
 8007b30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b34:	4770      	bx	lr

08007b36 <LL_GPIO_SetPinOutputType>:
{
 8007b36:	b480      	push	{r7}
 8007b38:	b085      	sub	sp, #20
 8007b3a:	af00      	add	r7, sp, #0
 8007b3c:	60f8      	str	r0, [r7, #12]
 8007b3e:	60b9      	str	r1, [r7, #8]
 8007b40:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->OTYPER, PinMask, (PinMask * OutputType));
 8007b42:	68fb      	ldr	r3, [r7, #12]
 8007b44:	685a      	ldr	r2, [r3, #4]
 8007b46:	68bb      	ldr	r3, [r7, #8]
 8007b48:	43db      	mvns	r3, r3
 8007b4a:	401a      	ands	r2, r3
 8007b4c:	68bb      	ldr	r3, [r7, #8]
 8007b4e:	6879      	ldr	r1, [r7, #4]
 8007b50:	fb01 f303 	mul.w	r3, r1, r3
 8007b54:	431a      	orrs	r2, r3
 8007b56:	68fb      	ldr	r3, [r7, #12]
 8007b58:	605a      	str	r2, [r3, #4]
}
 8007b5a:	bf00      	nop
 8007b5c:	3714      	adds	r7, #20
 8007b5e:	46bd      	mov	sp, r7
 8007b60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b64:	4770      	bx	lr

08007b66 <LL_GPIO_SetPinSpeed>:
{
 8007b66:	b480      	push	{r7}
 8007b68:	b089      	sub	sp, #36	; 0x24
 8007b6a:	af00      	add	r7, sp, #0
 8007b6c:	60f8      	str	r0, [r7, #12]
 8007b6e:	60b9      	str	r1, [r7, #8]
 8007b70:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->OSPEEDR, (GPIO_OSPEEDR_OSPEED0 << (POSITION_VAL(Pin) * 2U)),
 8007b72:	68fb      	ldr	r3, [r7, #12]
 8007b74:	689a      	ldr	r2, [r3, #8]
 8007b76:	68bb      	ldr	r3, [r7, #8]
 8007b78:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8007b7a:	697b      	ldr	r3, [r7, #20]
 8007b7c:	fa93 f3a3 	rbit	r3, r3
 8007b80:	613b      	str	r3, [r7, #16]
  return result;
 8007b82:	693b      	ldr	r3, [r7, #16]
 8007b84:	fab3 f383 	clz	r3, r3
 8007b88:	b2db      	uxtb	r3, r3
 8007b8a:	005b      	lsls	r3, r3, #1
 8007b8c:	2103      	movs	r1, #3
 8007b8e:	fa01 f303 	lsl.w	r3, r1, r3
 8007b92:	43db      	mvns	r3, r3
 8007b94:	401a      	ands	r2, r3
 8007b96:	68bb      	ldr	r3, [r7, #8]
 8007b98:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8007b9a:	69fb      	ldr	r3, [r7, #28]
 8007b9c:	fa93 f3a3 	rbit	r3, r3
 8007ba0:	61bb      	str	r3, [r7, #24]
  return result;
 8007ba2:	69bb      	ldr	r3, [r7, #24]
 8007ba4:	fab3 f383 	clz	r3, r3
 8007ba8:	b2db      	uxtb	r3, r3
 8007baa:	005b      	lsls	r3, r3, #1
 8007bac:	6879      	ldr	r1, [r7, #4]
 8007bae:	fa01 f303 	lsl.w	r3, r1, r3
 8007bb2:	431a      	orrs	r2, r3
 8007bb4:	68fb      	ldr	r3, [r7, #12]
 8007bb6:	609a      	str	r2, [r3, #8]
}
 8007bb8:	bf00      	nop
 8007bba:	3724      	adds	r7, #36	; 0x24
 8007bbc:	46bd      	mov	sp, r7
 8007bbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007bc2:	4770      	bx	lr

08007bc4 <LL_GPIO_SetPinPull>:
{
 8007bc4:	b480      	push	{r7}
 8007bc6:	b089      	sub	sp, #36	; 0x24
 8007bc8:	af00      	add	r7, sp, #0
 8007bca:	60f8      	str	r0, [r7, #12]
 8007bcc:	60b9      	str	r1, [r7, #8]
 8007bce:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->PUPDR, (GPIO_PUPDR_PUPD0 << (POSITION_VAL(Pin) * 2U)), (Pull << (POSITION_VAL(Pin) * 2U)));
 8007bd0:	68fb      	ldr	r3, [r7, #12]
 8007bd2:	68da      	ldr	r2, [r3, #12]
 8007bd4:	68bb      	ldr	r3, [r7, #8]
 8007bd6:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8007bd8:	697b      	ldr	r3, [r7, #20]
 8007bda:	fa93 f3a3 	rbit	r3, r3
 8007bde:	613b      	str	r3, [r7, #16]
  return result;
 8007be0:	693b      	ldr	r3, [r7, #16]
 8007be2:	fab3 f383 	clz	r3, r3
 8007be6:	b2db      	uxtb	r3, r3
 8007be8:	005b      	lsls	r3, r3, #1
 8007bea:	2103      	movs	r1, #3
 8007bec:	fa01 f303 	lsl.w	r3, r1, r3
 8007bf0:	43db      	mvns	r3, r3
 8007bf2:	401a      	ands	r2, r3
 8007bf4:	68bb      	ldr	r3, [r7, #8]
 8007bf6:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8007bf8:	69fb      	ldr	r3, [r7, #28]
 8007bfa:	fa93 f3a3 	rbit	r3, r3
 8007bfe:	61bb      	str	r3, [r7, #24]
  return result;
 8007c00:	69bb      	ldr	r3, [r7, #24]
 8007c02:	fab3 f383 	clz	r3, r3
 8007c06:	b2db      	uxtb	r3, r3
 8007c08:	005b      	lsls	r3, r3, #1
 8007c0a:	6879      	ldr	r1, [r7, #4]
 8007c0c:	fa01 f303 	lsl.w	r3, r1, r3
 8007c10:	431a      	orrs	r2, r3
 8007c12:	68fb      	ldr	r3, [r7, #12]
 8007c14:	60da      	str	r2, [r3, #12]
}
 8007c16:	bf00      	nop
 8007c18:	3724      	adds	r7, #36	; 0x24
 8007c1a:	46bd      	mov	sp, r7
 8007c1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c20:	4770      	bx	lr

08007c22 <LL_GPIO_SetAFPin_0_7>:
{
 8007c22:	b480      	push	{r7}
 8007c24:	b089      	sub	sp, #36	; 0x24
 8007c26:	af00      	add	r7, sp, #0
 8007c28:	60f8      	str	r0, [r7, #12]
 8007c2a:	60b9      	str	r1, [r7, #8]
 8007c2c:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->AFR[0], (GPIO_AFRL_AFSEL0 << (POSITION_VAL(Pin) * 4U)),
 8007c2e:	68fb      	ldr	r3, [r7, #12]
 8007c30:	6a1a      	ldr	r2, [r3, #32]
 8007c32:	68bb      	ldr	r3, [r7, #8]
 8007c34:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8007c36:	697b      	ldr	r3, [r7, #20]
 8007c38:	fa93 f3a3 	rbit	r3, r3
 8007c3c:	613b      	str	r3, [r7, #16]
  return result;
 8007c3e:	693b      	ldr	r3, [r7, #16]
 8007c40:	fab3 f383 	clz	r3, r3
 8007c44:	b2db      	uxtb	r3, r3
 8007c46:	009b      	lsls	r3, r3, #2
 8007c48:	210f      	movs	r1, #15
 8007c4a:	fa01 f303 	lsl.w	r3, r1, r3
 8007c4e:	43db      	mvns	r3, r3
 8007c50:	401a      	ands	r2, r3
 8007c52:	68bb      	ldr	r3, [r7, #8]
 8007c54:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8007c56:	69fb      	ldr	r3, [r7, #28]
 8007c58:	fa93 f3a3 	rbit	r3, r3
 8007c5c:	61bb      	str	r3, [r7, #24]
  return result;
 8007c5e:	69bb      	ldr	r3, [r7, #24]
 8007c60:	fab3 f383 	clz	r3, r3
 8007c64:	b2db      	uxtb	r3, r3
 8007c66:	009b      	lsls	r3, r3, #2
 8007c68:	6879      	ldr	r1, [r7, #4]
 8007c6a:	fa01 f303 	lsl.w	r3, r1, r3
 8007c6e:	431a      	orrs	r2, r3
 8007c70:	68fb      	ldr	r3, [r7, #12]
 8007c72:	621a      	str	r2, [r3, #32]
}
 8007c74:	bf00      	nop
 8007c76:	3724      	adds	r7, #36	; 0x24
 8007c78:	46bd      	mov	sp, r7
 8007c7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c7e:	4770      	bx	lr

08007c80 <LL_GPIO_SetAFPin_8_15>:
{
 8007c80:	b480      	push	{r7}
 8007c82:	b089      	sub	sp, #36	; 0x24
 8007c84:	af00      	add	r7, sp, #0
 8007c86:	60f8      	str	r0, [r7, #12]
 8007c88:	60b9      	str	r1, [r7, #8]
 8007c8a:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->AFR[1], (GPIO_AFRH_AFSEL8 << (POSITION_VAL(Pin >> 8U) * 4U)),
 8007c8c:	68fb      	ldr	r3, [r7, #12]
 8007c8e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8007c90:	68bb      	ldr	r3, [r7, #8]
 8007c92:	0a1b      	lsrs	r3, r3, #8
 8007c94:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8007c96:	697b      	ldr	r3, [r7, #20]
 8007c98:	fa93 f3a3 	rbit	r3, r3
 8007c9c:	613b      	str	r3, [r7, #16]
  return result;
 8007c9e:	693b      	ldr	r3, [r7, #16]
 8007ca0:	fab3 f383 	clz	r3, r3
 8007ca4:	b2db      	uxtb	r3, r3
 8007ca6:	009b      	lsls	r3, r3, #2
 8007ca8:	210f      	movs	r1, #15
 8007caa:	fa01 f303 	lsl.w	r3, r1, r3
 8007cae:	43db      	mvns	r3, r3
 8007cb0:	401a      	ands	r2, r3
 8007cb2:	68bb      	ldr	r3, [r7, #8]
 8007cb4:	0a1b      	lsrs	r3, r3, #8
 8007cb6:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8007cb8:	69fb      	ldr	r3, [r7, #28]
 8007cba:	fa93 f3a3 	rbit	r3, r3
 8007cbe:	61bb      	str	r3, [r7, #24]
  return result;
 8007cc0:	69bb      	ldr	r3, [r7, #24]
 8007cc2:	fab3 f383 	clz	r3, r3
 8007cc6:	b2db      	uxtb	r3, r3
 8007cc8:	009b      	lsls	r3, r3, #2
 8007cca:	6879      	ldr	r1, [r7, #4]
 8007ccc:	fa01 f303 	lsl.w	r3, r1, r3
 8007cd0:	431a      	orrs	r2, r3
 8007cd2:	68fb      	ldr	r3, [r7, #12]
 8007cd4:	625a      	str	r2, [r3, #36]	; 0x24
}
 8007cd6:	bf00      	nop
 8007cd8:	3724      	adds	r7, #36	; 0x24
 8007cda:	46bd      	mov	sp, r7
 8007cdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ce0:	4770      	bx	lr

08007ce2 <LL_GPIO_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: GPIO registers are initialized according to GPIO_InitStruct content
  *          - ERROR:   Not applicable
  */
ErrorStatus LL_GPIO_Init(GPIO_TypeDef *GPIOx, LL_GPIO_InitTypeDef *GPIO_InitStruct)
{
 8007ce2:	b580      	push	{r7, lr}
 8007ce4:	b086      	sub	sp, #24
 8007ce6:	af00      	add	r7, sp, #0
 8007ce8:	6078      	str	r0, [r7, #4]
 8007cea:	6039      	str	r1, [r7, #0]
  assert_param(IS_LL_GPIO_MODE(GPIO_InitStruct->Mode));
  assert_param(IS_LL_GPIO_PULL(GPIO_InitStruct->Pull));

  /* ------------------------- Configure the port pins ---------------- */
  /* Initialize  pinpos on first pin set */
  pinpos = POSITION_VAL(GPIO_InitStruct->Pin);
 8007cec:	683b      	ldr	r3, [r7, #0]
 8007cee:	681b      	ldr	r3, [r3, #0]
 8007cf0:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8007cf2:	68fb      	ldr	r3, [r7, #12]
 8007cf4:	fa93 f3a3 	rbit	r3, r3
 8007cf8:	60bb      	str	r3, [r7, #8]
  return result;
 8007cfa:	68bb      	ldr	r3, [r7, #8]
 8007cfc:	fab3 f383 	clz	r3, r3
 8007d00:	b2db      	uxtb	r3, r3
 8007d02:	617b      	str	r3, [r7, #20]

  /* Configure the port pins */
  while (((GPIO_InitStruct->Pin) >> pinpos) != 0x00000000U)
 8007d04:	e040      	b.n	8007d88 <LL_GPIO_Init+0xa6>
  {
    /* Get current io position */
    currentpin = (GPIO_InitStruct->Pin) & (0x00000001UL << pinpos);
 8007d06:	683b      	ldr	r3, [r7, #0]
 8007d08:	681a      	ldr	r2, [r3, #0]
 8007d0a:	2101      	movs	r1, #1
 8007d0c:	697b      	ldr	r3, [r7, #20]
 8007d0e:	fa01 f303 	lsl.w	r3, r1, r3
 8007d12:	4013      	ands	r3, r2
 8007d14:	613b      	str	r3, [r7, #16]

    if (currentpin != 0x00u)
 8007d16:	693b      	ldr	r3, [r7, #16]
 8007d18:	2b00      	cmp	r3, #0
 8007d1a:	d032      	beq.n	8007d82 <LL_GPIO_Init+0xa0>
    {
      /* Pin Mode configuration */
      LL_GPIO_SetPinMode(GPIOx, currentpin, GPIO_InitStruct->Mode);
 8007d1c:	683b      	ldr	r3, [r7, #0]
 8007d1e:	685b      	ldr	r3, [r3, #4]
 8007d20:	461a      	mov	r2, r3
 8007d22:	6939      	ldr	r1, [r7, #16]
 8007d24:	6878      	ldr	r0, [r7, #4]
 8007d26:	f7ff fed7 	bl	8007ad8 <LL_GPIO_SetPinMode>

      if ((GPIO_InitStruct->Mode == LL_GPIO_MODE_OUTPUT) || (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE))
 8007d2a:	683b      	ldr	r3, [r7, #0]
 8007d2c:	685b      	ldr	r3, [r3, #4]
 8007d2e:	2b01      	cmp	r3, #1
 8007d30:	d003      	beq.n	8007d3a <LL_GPIO_Init+0x58>
 8007d32:	683b      	ldr	r3, [r7, #0]
 8007d34:	685b      	ldr	r3, [r3, #4]
 8007d36:	2b02      	cmp	r3, #2
 8007d38:	d106      	bne.n	8007d48 <LL_GPIO_Init+0x66>
      {
        /* Check Speed mode parameters */
        assert_param(IS_LL_GPIO_SPEED(GPIO_InitStruct->Speed));

        /* Speed mode configuration */
        LL_GPIO_SetPinSpeed(GPIOx, currentpin, GPIO_InitStruct->Speed);
 8007d3a:	683b      	ldr	r3, [r7, #0]
 8007d3c:	689b      	ldr	r3, [r3, #8]
 8007d3e:	461a      	mov	r2, r3
 8007d40:	6939      	ldr	r1, [r7, #16]
 8007d42:	6878      	ldr	r0, [r7, #4]
 8007d44:	f7ff ff0f 	bl	8007b66 <LL_GPIO_SetPinSpeed>
      }

      /* Pull-up Pull down resistor configuration*/
      LL_GPIO_SetPinPull(GPIOx, currentpin, GPIO_InitStruct->Pull);
 8007d48:	683b      	ldr	r3, [r7, #0]
 8007d4a:	691b      	ldr	r3, [r3, #16]
 8007d4c:	461a      	mov	r2, r3
 8007d4e:	6939      	ldr	r1, [r7, #16]
 8007d50:	6878      	ldr	r0, [r7, #4]
 8007d52:	f7ff ff37 	bl	8007bc4 <LL_GPIO_SetPinPull>

      if (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE)
 8007d56:	683b      	ldr	r3, [r7, #0]
 8007d58:	685b      	ldr	r3, [r3, #4]
 8007d5a:	2b02      	cmp	r3, #2
 8007d5c:	d111      	bne.n	8007d82 <LL_GPIO_Init+0xa0>
      {
        /* Check Alternate parameter */
        assert_param(IS_LL_GPIO_ALTERNATE(GPIO_InitStruct->Alternate));

        /* Speed mode configuration */
        if (currentpin < LL_GPIO_PIN_8)
 8007d5e:	693b      	ldr	r3, [r7, #16]
 8007d60:	2bff      	cmp	r3, #255	; 0xff
 8007d62:	d807      	bhi.n	8007d74 <LL_GPIO_Init+0x92>
        {
          LL_GPIO_SetAFPin_0_7(GPIOx, currentpin, GPIO_InitStruct->Alternate);
 8007d64:	683b      	ldr	r3, [r7, #0]
 8007d66:	695b      	ldr	r3, [r3, #20]
 8007d68:	461a      	mov	r2, r3
 8007d6a:	6939      	ldr	r1, [r7, #16]
 8007d6c:	6878      	ldr	r0, [r7, #4]
 8007d6e:	f7ff ff58 	bl	8007c22 <LL_GPIO_SetAFPin_0_7>
 8007d72:	e006      	b.n	8007d82 <LL_GPIO_Init+0xa0>
        }
        else
        {
          LL_GPIO_SetAFPin_8_15(GPIOx, currentpin, GPIO_InitStruct->Alternate);
 8007d74:	683b      	ldr	r3, [r7, #0]
 8007d76:	695b      	ldr	r3, [r3, #20]
 8007d78:	461a      	mov	r2, r3
 8007d7a:	6939      	ldr	r1, [r7, #16]
 8007d7c:	6878      	ldr	r0, [r7, #4]
 8007d7e:	f7ff ff7f 	bl	8007c80 <LL_GPIO_SetAFPin_8_15>
        }
      }
    }
    pinpos++;
 8007d82:	697b      	ldr	r3, [r7, #20]
 8007d84:	3301      	adds	r3, #1
 8007d86:	617b      	str	r3, [r7, #20]
  while (((GPIO_InitStruct->Pin) >> pinpos) != 0x00000000U)
 8007d88:	683b      	ldr	r3, [r7, #0]
 8007d8a:	681a      	ldr	r2, [r3, #0]
 8007d8c:	697b      	ldr	r3, [r7, #20]
 8007d8e:	fa22 f303 	lsr.w	r3, r2, r3
 8007d92:	2b00      	cmp	r3, #0
 8007d94:	d1b7      	bne.n	8007d06 <LL_GPIO_Init+0x24>
  }

  if ((GPIO_InitStruct->Mode == LL_GPIO_MODE_OUTPUT) || (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE))
 8007d96:	683b      	ldr	r3, [r7, #0]
 8007d98:	685b      	ldr	r3, [r3, #4]
 8007d9a:	2b01      	cmp	r3, #1
 8007d9c:	d003      	beq.n	8007da6 <LL_GPIO_Init+0xc4>
 8007d9e:	683b      	ldr	r3, [r7, #0]
 8007da0:	685b      	ldr	r3, [r3, #4]
 8007da2:	2b02      	cmp	r3, #2
 8007da4:	d107      	bne.n	8007db6 <LL_GPIO_Init+0xd4>
  {
    /* Check Output mode parameters */
    assert_param(IS_LL_GPIO_OUTPUT_TYPE(GPIO_InitStruct->OutputType));

    /* Output mode configuration*/
    LL_GPIO_SetPinOutputType(GPIOx, GPIO_InitStruct->Pin, GPIO_InitStruct->OutputType);
 8007da6:	683b      	ldr	r3, [r7, #0]
 8007da8:	6819      	ldr	r1, [r3, #0]
 8007daa:	683b      	ldr	r3, [r7, #0]
 8007dac:	68db      	ldr	r3, [r3, #12]
 8007dae:	461a      	mov	r2, r3
 8007db0:	6878      	ldr	r0, [r7, #4]
 8007db2:	f7ff fec0 	bl	8007b36 <LL_GPIO_SetPinOutputType>

  }
  return (SUCCESS);
 8007db6:	2300      	movs	r3, #0
}
 8007db8:	4618      	mov	r0, r3
 8007dba:	3718      	adds	r7, #24
 8007dbc:	46bd      	mov	sp, r7
 8007dbe:	bd80      	pop	{r7, pc}

08007dc0 <ILI9341_Draw_Bordered_Filled_Rectangle_Coord>:
 *
 *
 */

void ILI9341_Draw_Bordered_Filled_Rectangle_Coord(uint16_t x, uint16_t y, uint16_t w, uint16_t h, uint16_t inner_colour, uint8_t border_weight, uint8_t border_colour)
{
 8007dc0:	b590      	push	{r4, r7, lr}
 8007dc2:	b087      	sub	sp, #28
 8007dc4:	af02      	add	r7, sp, #8
 8007dc6:	4604      	mov	r4, r0
 8007dc8:	4608      	mov	r0, r1
 8007dca:	4611      	mov	r1, r2
 8007dcc:	461a      	mov	r2, r3
 8007dce:	4623      	mov	r3, r4
 8007dd0:	80fb      	strh	r3, [r7, #6]
 8007dd2:	4603      	mov	r3, r0
 8007dd4:	80bb      	strh	r3, [r7, #4]
 8007dd6:	460b      	mov	r3, r1
 8007dd8:	807b      	strh	r3, [r7, #2]
 8007dda:	4613      	mov	r3, r2
 8007ddc:	803b      	strh	r3, [r7, #0]

	// Draw inwards (and shorter) for each level of border weight
	for(uint8_t b = 0; ; b++)
 8007dde:	2300      	movs	r3, #0
 8007de0:	73fb      	strb	r3, [r7, #15]
	{


		if(b > border_weight)
 8007de2:	7bfa      	ldrb	r2, [r7, #15]
 8007de4:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8007de8:	429a      	cmp	r2, r3
 8007dea:	d93a      	bls.n	8007e62 <ILI9341_Draw_Bordered_Filled_Rectangle_Coord+0xa2>
		{

			// stop before the inner space reaches zero! (hard fault)
			if( ((y + b) == ((y + h) - b)) || ((x + b) == ((x + w) - b)) )
 8007dec:	88ba      	ldrh	r2, [r7, #4]
 8007dee:	7bfb      	ldrb	r3, [r7, #15]
 8007df0:	441a      	add	r2, r3
 8007df2:	88b9      	ldrh	r1, [r7, #4]
 8007df4:	883b      	ldrh	r3, [r7, #0]
 8007df6:	4419      	add	r1, r3
 8007df8:	7bfb      	ldrb	r3, [r7, #15]
 8007dfa:	1acb      	subs	r3, r1, r3
 8007dfc:	429a      	cmp	r2, r3
 8007dfe:	f000 8090 	beq.w	8007f22 <ILI9341_Draw_Bordered_Filled_Rectangle_Coord+0x162>
 8007e02:	88fa      	ldrh	r2, [r7, #6]
 8007e04:	7bfb      	ldrb	r3, [r7, #15]
 8007e06:	441a      	add	r2, r3
 8007e08:	88f9      	ldrh	r1, [r7, #6]
 8007e0a:	887b      	ldrh	r3, [r7, #2]
 8007e0c:	4419      	add	r1, r3
 8007e0e:	7bfb      	ldrb	r3, [r7, #15]
 8007e10:	1acb      	subs	r3, r1, r3
 8007e12:	429a      	cmp	r2, r3
 8007e14:	f000 8085 	beq.w	8007f22 <ILI9341_Draw_Bordered_Filled_Rectangle_Coord+0x162>
				// add final line?
				goto finish;
			}
			else
			{
				ILI9341_Draw_Rectangle(x + b, y + b, (w - (2*b)) + 1, (h - (2*b)) + 1, inner_colour, AREA_CHUNK);
 8007e18:	7bfb      	ldrb	r3, [r7, #15]
 8007e1a:	b29a      	uxth	r2, r3
 8007e1c:	88fb      	ldrh	r3, [r7, #6]
 8007e1e:	4413      	add	r3, r2
 8007e20:	b298      	uxth	r0, r3
 8007e22:	7bfb      	ldrb	r3, [r7, #15]
 8007e24:	b29a      	uxth	r2, r3
 8007e26:	88bb      	ldrh	r3, [r7, #4]
 8007e28:	4413      	add	r3, r2
 8007e2a:	b299      	uxth	r1, r3
 8007e2c:	7bfb      	ldrb	r3, [r7, #15]
 8007e2e:	b29b      	uxth	r3, r3
 8007e30:	005b      	lsls	r3, r3, #1
 8007e32:	b29b      	uxth	r3, r3
 8007e34:	887a      	ldrh	r2, [r7, #2]
 8007e36:	1ad3      	subs	r3, r2, r3
 8007e38:	b29b      	uxth	r3, r3
 8007e3a:	3301      	adds	r3, #1
 8007e3c:	b29c      	uxth	r4, r3
 8007e3e:	7bfb      	ldrb	r3, [r7, #15]
 8007e40:	b29b      	uxth	r3, r3
 8007e42:	005b      	lsls	r3, r3, #1
 8007e44:	b29b      	uxth	r3, r3
 8007e46:	883a      	ldrh	r2, [r7, #0]
 8007e48:	1ad3      	subs	r3, r2, r3
 8007e4a:	b29b      	uxth	r3, r3
 8007e4c:	3301      	adds	r3, #1
 8007e4e:	b29a      	uxth	r2, r3
 8007e50:	2304      	movs	r3, #4
 8007e52:	9301      	str	r3, [sp, #4]
 8007e54:	8c3b      	ldrh	r3, [r7, #32]
 8007e56:	9300      	str	r3, [sp, #0]
 8007e58:	4613      	mov	r3, r2
 8007e5a:	4622      	mov	r2, r4
 8007e5c:	f000 fd32 	bl	80088c4 <ILI9341_Draw_Rectangle>
				goto finish;
 8007e60:	e060      	b.n	8007f24 <ILI9341_Draw_Bordered_Filled_Rectangle_Coord+0x164>
			}
		}

		// Horizontal lines
		ILI9341_Draw_Horizontal_Line(	x + b,
 8007e62:	7bfb      	ldrb	r3, [r7, #15]
 8007e64:	b29a      	uxth	r2, r3
 8007e66:	88fb      	ldrh	r3, [r7, #6]
 8007e68:	4413      	add	r3, r2
 8007e6a:	b298      	uxth	r0, r3
 8007e6c:	7bfb      	ldrb	r3, [r7, #15]
 8007e6e:	b29a      	uxth	r2, r3
 8007e70:	88bb      	ldrh	r3, [r7, #4]
 8007e72:	4413      	add	r3, r2
 8007e74:	b299      	uxth	r1, r3
 8007e76:	7bfb      	ldrb	r3, [r7, #15]
 8007e78:	b29b      	uxth	r3, r3
 8007e7a:	005b      	lsls	r3, r3, #1
 8007e7c:	b29b      	uxth	r3, r3
 8007e7e:	887a      	ldrh	r2, [r7, #2]
 8007e80:	1ad3      	subs	r3, r2, r3
 8007e82:	b29a      	uxth	r2, r3
 8007e84:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8007e88:	b29b      	uxth	r3, r3
 8007e8a:	f000 fda1 	bl	80089d0 <ILI9341_Draw_Horizontal_Line>
										y + b,
										w - (2*b),
										border_colour);

		ILI9341_Draw_Horizontal_Line(	x + b,
 8007e8e:	7bfb      	ldrb	r3, [r7, #15]
 8007e90:	b29a      	uxth	r2, r3
 8007e92:	88fb      	ldrh	r3, [r7, #6]
 8007e94:	4413      	add	r3, r2
 8007e96:	b298      	uxth	r0, r3
										(y + h) - b,
 8007e98:	88ba      	ldrh	r2, [r7, #4]
 8007e9a:	883b      	ldrh	r3, [r7, #0]
 8007e9c:	4413      	add	r3, r2
 8007e9e:	b29a      	uxth	r2, r3
		ILI9341_Draw_Horizontal_Line(	x + b,
 8007ea0:	7bfb      	ldrb	r3, [r7, #15]
 8007ea2:	b29b      	uxth	r3, r3
 8007ea4:	1ad3      	subs	r3, r2, r3
 8007ea6:	b299      	uxth	r1, r3
 8007ea8:	7bfb      	ldrb	r3, [r7, #15]
 8007eaa:	b29b      	uxth	r3, r3
 8007eac:	887a      	ldrh	r2, [r7, #2]
 8007eae:	1ad3      	subs	r3, r2, r3
 8007eb0:	b29a      	uxth	r2, r3
 8007eb2:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8007eb6:	b29b      	uxth	r3, r3
 8007eb8:	f000 fd8a 	bl	80089d0 <ILI9341_Draw_Horizontal_Line>
										w - (b),
										border_colour);


		// Vertical lines
		ILI9341_Draw_Vertical_Line(		x + b,
 8007ebc:	7bfb      	ldrb	r3, [r7, #15]
 8007ebe:	b29a      	uxth	r2, r3
 8007ec0:	88fb      	ldrh	r3, [r7, #6]
 8007ec2:	4413      	add	r3, r2
 8007ec4:	b298      	uxth	r0, r3
 8007ec6:	7bfb      	ldrb	r3, [r7, #15]
 8007ec8:	b29a      	uxth	r2, r3
 8007eca:	88bb      	ldrh	r3, [r7, #4]
 8007ecc:	4413      	add	r3, r2
 8007ece:	b299      	uxth	r1, r3
 8007ed0:	7bfb      	ldrb	r3, [r7, #15]
 8007ed2:	b29b      	uxth	r3, r3
 8007ed4:	005b      	lsls	r3, r3, #1
 8007ed6:	b29b      	uxth	r3, r3
 8007ed8:	883a      	ldrh	r2, [r7, #0]
 8007eda:	1ad3      	subs	r3, r2, r3
 8007edc:	b29a      	uxth	r2, r3
 8007ede:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8007ee2:	b29b      	uxth	r3, r3
 8007ee4:	f000 fdbc 	bl	8008a60 <ILI9341_Draw_Vertical_Line>
										y + b,
										h - (2*b),
										border_colour);

		ILI9341_Draw_Vertical_Line(		(x + w) - b,
 8007ee8:	88fa      	ldrh	r2, [r7, #6]
 8007eea:	887b      	ldrh	r3, [r7, #2]
 8007eec:	4413      	add	r3, r2
 8007eee:	b29a      	uxth	r2, r3
 8007ef0:	7bfb      	ldrb	r3, [r7, #15]
 8007ef2:	b29b      	uxth	r3, r3
 8007ef4:	1ad3      	subs	r3, r2, r3
 8007ef6:	b298      	uxth	r0, r3
 8007ef8:	7bfb      	ldrb	r3, [r7, #15]
 8007efa:	b29a      	uxth	r2, r3
 8007efc:	88bb      	ldrh	r3, [r7, #4]
 8007efe:	4413      	add	r3, r2
 8007f00:	b299      	uxth	r1, r3
 8007f02:	7bfb      	ldrb	r3, [r7, #15]
 8007f04:	b29b      	uxth	r3, r3
 8007f06:	005b      	lsls	r3, r3, #1
 8007f08:	b29b      	uxth	r3, r3
 8007f0a:	883a      	ldrh	r2, [r7, #0]
 8007f0c:	1ad3      	subs	r3, r2, r3
 8007f0e:	b29a      	uxth	r2, r3
 8007f10:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8007f14:	b29b      	uxth	r3, r3
 8007f16:	f000 fda3 	bl	8008a60 <ILI9341_Draw_Vertical_Line>
	for(uint8_t b = 0; ; b++)
 8007f1a:	7bfb      	ldrb	r3, [r7, #15]
 8007f1c:	3301      	adds	r3, #1
 8007f1e:	73fb      	strb	r3, [r7, #15]
		if(b > border_weight)
 8007f20:	e75f      	b.n	8007de2 <ILI9341_Draw_Bordered_Filled_Rectangle_Coord+0x22>
										h - (2*b),
										border_colour);

	}

	finish:
 8007f22:	bf00      	nop
	// done
	return;
 8007f24:	bf00      	nop
}
 8007f26:	3714      	adds	r7, #20
 8007f28:	46bd      	mov	sp, r7
 8007f2a:	bd90      	pop	{r4, r7, pc}

08007f2c <ILI9341_Draw_Char>:
}

/*Draws a character (fonts imported from fonts.h) at x,Y location with specified font colour, size and Background colour*/
/*See fonts.h implementation of font on what is required for changing to a different font when switching fonts libraries*/
void ILI9341_Draw_Char(char character, uint16_t x, uint16_t y, uint16_t colour, uint16_t size, uint16_t bgcolour)
{
 8007f2c:	b590      	push	{r4, r7, lr}
 8007f2e:	b089      	sub	sp, #36	; 0x24
 8007f30:	af02      	add	r7, sp, #8
 8007f32:	4604      	mov	r4, r0
 8007f34:	4608      	mov	r0, r1
 8007f36:	4611      	mov	r1, r2
 8007f38:	461a      	mov	r2, r3
 8007f3a:	4623      	mov	r3, r4
 8007f3c:	71fb      	strb	r3, [r7, #7]
 8007f3e:	4603      	mov	r3, r0
 8007f40:	80bb      	strh	r3, [r7, #4]
 8007f42:	460b      	mov	r3, r1
 8007f44:	807b      	strh	r3, [r7, #2]
 8007f46:	4613      	mov	r3, r2
 8007f48:	803b      	strh	r3, [r7, #0]
    uint8_t 	i,j;
		



	function_char = character;
 8007f4a:	79fb      	ldrb	r3, [r7, #7]
 8007f4c:	75fb      	strb	r3, [r7, #23]
		
    if (function_char < ' ')
 8007f4e:	7dfb      	ldrb	r3, [r7, #23]
 8007f50:	2b1f      	cmp	r3, #31
 8007f52:	d802      	bhi.n	8007f5a <ILI9341_Draw_Char+0x2e>
    {
        character = 0;
 8007f54:	2300      	movs	r3, #0
 8007f56:	71fb      	strb	r3, [r7, #7]
 8007f58:	e002      	b.n	8007f60 <ILI9341_Draw_Char+0x34>
    }
    else
    {
    	function_char -= 32;
 8007f5a:	7dfb      	ldrb	r3, [r7, #23]
 8007f5c:	3b20      	subs	r3, #32
 8007f5e:	75fb      	strb	r3, [r7, #23]
	}
   	
	char temp[CHAR_WIDTH];

	for(uint8_t k = 0; k<CHAR_WIDTH; k++)
 8007f60:	2300      	movs	r3, #0
 8007f62:	753b      	strb	r3, [r7, #20]
 8007f64:	e012      	b.n	8007f8c <ILI9341_Draw_Char+0x60>
	{
		temp[k] = font[function_char][k];
 8007f66:	7dfa      	ldrb	r2, [r7, #23]
 8007f68:	7d38      	ldrb	r0, [r7, #20]
 8007f6a:	7d39      	ldrb	r1, [r7, #20]
 8007f6c:	4c48      	ldr	r4, [pc, #288]	; (8008090 <ILI9341_Draw_Char+0x164>)
 8007f6e:	4613      	mov	r3, r2
 8007f70:	005b      	lsls	r3, r3, #1
 8007f72:	4413      	add	r3, r2
 8007f74:	005b      	lsls	r3, r3, #1
 8007f76:	4423      	add	r3, r4
 8007f78:	4403      	add	r3, r0
 8007f7a:	781a      	ldrb	r2, [r3, #0]
 8007f7c:	f107 0318 	add.w	r3, r7, #24
 8007f80:	440b      	add	r3, r1
 8007f82:	f803 2c0c 	strb.w	r2, [r3, #-12]
	for(uint8_t k = 0; k<CHAR_WIDTH; k++)
 8007f86:	7d3b      	ldrb	r3, [r7, #20]
 8007f88:	3301      	adds	r3, #1
 8007f8a:	753b      	strb	r3, [r7, #20]
 8007f8c:	7d3b      	ldrb	r3, [r7, #20]
 8007f8e:	2b05      	cmp	r3, #5
 8007f90:	d9e9      	bls.n	8007f66 <ILI9341_Draw_Char+0x3a>
	}
		
    // Draw pixels
	//ILI9341_Draw_Rectangle(x, Y, CHAR_WIDTH*size, CHAR_HEIGHT*size, bgcolour);
    for (j=0; j<CHAR_WIDTH; j++)
 8007f92:	2300      	movs	r3, #0
 8007f94:	757b      	strb	r3, [r7, #21]
 8007f96:	e074      	b.n	8008082 <ILI9341_Draw_Char+0x156>
    {
        for (i=0; i<CHAR_HEIGHT; i++)
 8007f98:	2300      	movs	r3, #0
 8007f9a:	75bb      	strb	r3, [r7, #22]
 8007f9c:	e06b      	b.n	8008076 <ILI9341_Draw_Char+0x14a>
        {
            if (temp[j] & (1<<i))
 8007f9e:	7d7b      	ldrb	r3, [r7, #21]
 8007fa0:	f107 0218 	add.w	r2, r7, #24
 8007fa4:	4413      	add	r3, r2
 8007fa6:	f813 3c0c 	ldrb.w	r3, [r3, #-12]
 8007faa:	461a      	mov	r2, r3
 8007fac:	7dbb      	ldrb	r3, [r7, #22]
 8007fae:	fa42 f303 	asr.w	r3, r2, r3
 8007fb2:	f003 0301 	and.w	r3, r3, #1
 8007fb6:	2b00      	cmp	r3, #0
 8007fb8:	d02d      	beq.n	8008016 <ILI9341_Draw_Char+0xea>
            {
            	if(size == 1)
 8007fba:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8007fbc:	2b01      	cmp	r3, #1
 8007fbe:	d10e      	bne.n	8007fde <ILI9341_Draw_Char+0xb2>
				{
            		ILI9341_Draw_Pixel(x+j, y+i, colour);
 8007fc0:	7d7b      	ldrb	r3, [r7, #21]
 8007fc2:	b29a      	uxth	r2, r3
 8007fc4:	88bb      	ldrh	r3, [r7, #4]
 8007fc6:	4413      	add	r3, r2
 8007fc8:	b298      	uxth	r0, r3
 8007fca:	7dbb      	ldrb	r3, [r7, #22]
 8007fcc:	b29a      	uxth	r2, r3
 8007fce:	887b      	ldrh	r3, [r7, #2]
 8007fd0:	4413      	add	r3, r2
 8007fd2:	b29b      	uxth	r3, r3
 8007fd4:	883a      	ldrh	r2, [r7, #0]
 8007fd6:	4619      	mov	r1, r3
 8007fd8:	f000 fb9a 	bl	8008710 <ILI9341_Draw_Pixel>
 8007fdc:	e048      	b.n	8008070 <ILI9341_Draw_Char+0x144>
				}
				else
				{
					ILI9341_Draw_Rectangle(x+(j*size), y+(i*size), size, size, colour, TEXT_CHUNK);
 8007fde:	7d7b      	ldrb	r3, [r7, #21]
 8007fe0:	b29b      	uxth	r3, r3
 8007fe2:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 8007fe4:	fb12 f303 	smulbb	r3, r2, r3
 8007fe8:	b29a      	uxth	r2, r3
 8007fea:	88bb      	ldrh	r3, [r7, #4]
 8007fec:	4413      	add	r3, r2
 8007fee:	b298      	uxth	r0, r3
 8007ff0:	7dbb      	ldrb	r3, [r7, #22]
 8007ff2:	b29b      	uxth	r3, r3
 8007ff4:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 8007ff6:	fb12 f303 	smulbb	r3, r2, r3
 8007ffa:	b29a      	uxth	r2, r3
 8007ffc:	887b      	ldrh	r3, [r7, #2]
 8007ffe:	4413      	add	r3, r2
 8008000:	b299      	uxth	r1, r3
 8008002:	8d3c      	ldrh	r4, [r7, #40]	; 0x28
 8008004:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 8008006:	2301      	movs	r3, #1
 8008008:	9301      	str	r3, [sp, #4]
 800800a:	883b      	ldrh	r3, [r7, #0]
 800800c:	9300      	str	r3, [sp, #0]
 800800e:	4623      	mov	r3, r4
 8008010:	f000 fc58 	bl	80088c4 <ILI9341_Draw_Rectangle>
 8008014:	e02c      	b.n	8008070 <ILI9341_Draw_Char+0x144>
				}
            }
            else
            {
               	if(size == 1)
 8008016:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8008018:	2b01      	cmp	r3, #1
 800801a:	d10e      	bne.n	800803a <ILI9341_Draw_Char+0x10e>
				{
					ILI9341_Draw_Pixel(x+j, y+i, bgcolour);
 800801c:	7d7b      	ldrb	r3, [r7, #21]
 800801e:	b29a      	uxth	r2, r3
 8008020:	88bb      	ldrh	r3, [r7, #4]
 8008022:	4413      	add	r3, r2
 8008024:	b298      	uxth	r0, r3
 8008026:	7dbb      	ldrb	r3, [r7, #22]
 8008028:	b29a      	uxth	r2, r3
 800802a:	887b      	ldrh	r3, [r7, #2]
 800802c:	4413      	add	r3, r2
 800802e:	b29b      	uxth	r3, r3
 8008030:	8dba      	ldrh	r2, [r7, #44]	; 0x2c
 8008032:	4619      	mov	r1, r3
 8008034:	f000 fb6c 	bl	8008710 <ILI9341_Draw_Pixel>
 8008038:	e01a      	b.n	8008070 <ILI9341_Draw_Char+0x144>
				}
				else
				{
					ILI9341_Draw_Rectangle(x+(j*size), y+(i*size), size, size, bgcolour, TEXT_CHUNK);
 800803a:	7d7b      	ldrb	r3, [r7, #21]
 800803c:	b29b      	uxth	r3, r3
 800803e:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 8008040:	fb12 f303 	smulbb	r3, r2, r3
 8008044:	b29a      	uxth	r2, r3
 8008046:	88bb      	ldrh	r3, [r7, #4]
 8008048:	4413      	add	r3, r2
 800804a:	b298      	uxth	r0, r3
 800804c:	7dbb      	ldrb	r3, [r7, #22]
 800804e:	b29b      	uxth	r3, r3
 8008050:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 8008052:	fb12 f303 	smulbb	r3, r2, r3
 8008056:	b29a      	uxth	r2, r3
 8008058:	887b      	ldrh	r3, [r7, #2]
 800805a:	4413      	add	r3, r2
 800805c:	b299      	uxth	r1, r3
 800805e:	8d3c      	ldrh	r4, [r7, #40]	; 0x28
 8008060:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 8008062:	2301      	movs	r3, #1
 8008064:	9301      	str	r3, [sp, #4]
 8008066:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8008068:	9300      	str	r3, [sp, #0]
 800806a:	4623      	mov	r3, r4
 800806c:	f000 fc2a 	bl	80088c4 <ILI9341_Draw_Rectangle>
        for (i=0; i<CHAR_HEIGHT; i++)
 8008070:	7dbb      	ldrb	r3, [r7, #22]
 8008072:	3301      	adds	r3, #1
 8008074:	75bb      	strb	r3, [r7, #22]
 8008076:	7dbb      	ldrb	r3, [r7, #22]
 8008078:	2b07      	cmp	r3, #7
 800807a:	d990      	bls.n	8007f9e <ILI9341_Draw_Char+0x72>
    for (j=0; j<CHAR_WIDTH; j++)
 800807c:	7d7b      	ldrb	r3, [r7, #21]
 800807e:	3301      	adds	r3, #1
 8008080:	757b      	strb	r3, [r7, #21]
 8008082:	7d7b      	ldrb	r3, [r7, #21]
 8008084:	2b05      	cmp	r3, #5
 8008086:	d987      	bls.n	8007f98 <ILI9341_Draw_Char+0x6c>
				}
            }
        }
    }
}
 8008088:	bf00      	nop
 800808a:	371c      	adds	r7, #28
 800808c:	46bd      	mov	sp, r7
 800808e:	bd90      	pop	{r4, r7, pc}
 8008090:	080095f8 	.word	0x080095f8

08008094 <ILI9341_Draw_Text>:

/*Draws an array of characters (fonts imported from fonts.h) at x,Y location with specified font colour, size and Background colour*/
/*See fonts.h implementation of font on what is required for changing to a different font when switching fonts libraries*/
void ILI9341_Draw_Text(const char* Text, uint16_t x, uint16_t y, uint16_t colour, uint16_t size, uint16_t bgcolour)
{
 8008094:	b590      	push	{r4, r7, lr}
 8008096:	b087      	sub	sp, #28
 8008098:	af02      	add	r7, sp, #8
 800809a:	60f8      	str	r0, [r7, #12]
 800809c:	4608      	mov	r0, r1
 800809e:	4611      	mov	r1, r2
 80080a0:	461a      	mov	r2, r3
 80080a2:	4603      	mov	r3, r0
 80080a4:	817b      	strh	r3, [r7, #10]
 80080a6:	460b      	mov	r3, r1
 80080a8:	813b      	strh	r3, [r7, #8]
 80080aa:	4613      	mov	r3, r2
 80080ac:	80fb      	strh	r3, [r7, #6]
    /*if(size & 1)
    {
    	size = ((size >> 1) * 2);
    }*/

    while (*Text) {
 80080ae:	e016      	b.n	80080de <ILI9341_Draw_Text+0x4a>
        ILI9341_Draw_Char(*Text++, x, y, colour, size, bgcolour);
 80080b0:	68fb      	ldr	r3, [r7, #12]
 80080b2:	1c5a      	adds	r2, r3, #1
 80080b4:	60fa      	str	r2, [r7, #12]
 80080b6:	7818      	ldrb	r0, [r3, #0]
 80080b8:	88fc      	ldrh	r4, [r7, #6]
 80080ba:	893a      	ldrh	r2, [r7, #8]
 80080bc:	8979      	ldrh	r1, [r7, #10]
 80080be:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80080c0:	9301      	str	r3, [sp, #4]
 80080c2:	8c3b      	ldrh	r3, [r7, #32]
 80080c4:	9300      	str	r3, [sp, #0]
 80080c6:	4623      	mov	r3, r4
 80080c8:	f7ff ff30 	bl	8007f2c <ILI9341_Draw_Char>
        x += CHAR_WIDTH*size;
 80080cc:	8c3b      	ldrh	r3, [r7, #32]
 80080ce:	461a      	mov	r2, r3
 80080d0:	0052      	lsls	r2, r2, #1
 80080d2:	4413      	add	r3, r2
 80080d4:	005b      	lsls	r3, r3, #1
 80080d6:	b29a      	uxth	r2, r3
 80080d8:	897b      	ldrh	r3, [r7, #10]
 80080da:	4413      	add	r3, r2
 80080dc:	817b      	strh	r3, [r7, #10]
    while (*Text) {
 80080de:	68fb      	ldr	r3, [r7, #12]
 80080e0:	781b      	ldrb	r3, [r3, #0]
 80080e2:	2b00      	cmp	r3, #0
 80080e4:	d1e4      	bne.n	80080b0 <ILI9341_Draw_Text+0x1c>
    }


}
 80080e6:	bf00      	nop
 80080e8:	3714      	adds	r7, #20
 80080ea:	46bd      	mov	sp, r7
 80080ec:	bd90      	pop	{r4, r7, pc}
	...

080080f0 <ILI9341_SPI_Init>:



/* Initialize SPI */
void ILI9341_SPI_Init(void)
{
 80080f0:	b480      	push	{r7}
 80080f2:	af00      	add	r7, sp, #0

	//GPIO INIT
	LCD_CS_PORT->ODR &= ~(LCD_CS_PIN);
 80080f4:	4b05      	ldr	r3, [pc, #20]	; (800810c <ILI9341_SPI_Init+0x1c>)
 80080f6:	695b      	ldr	r3, [r3, #20]
 80080f8:	4a04      	ldr	r2, [pc, #16]	; (800810c <ILI9341_SPI_Init+0x1c>)
 80080fa:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80080fe:	6153      	str	r3, [r2, #20]
}
 8008100:	bf00      	nop
 8008102:	46bd      	mov	sp, r7
 8008104:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008108:	4770      	bx	lr
 800810a:	bf00      	nop
 800810c:	48000400 	.word	0x48000400

08008110 <ILI9341_SPI_Send>:

/*Send data (char) to LCD*/
void ILI9341_SPI_Send(unsigned char SPI_Data)
{
 8008110:	b580      	push	{r7, lr}
 8008112:	b084      	sub	sp, #16
 8008114:	af00      	add	r7, sp, #0
 8008116:	4603      	mov	r3, r0
 8008118:	71fb      	strb	r3, [r7, #7]
	HAL_StatusTypeDef res;

		if( ((res = HAL_SPI_Transmit(HSPI_INSTANCE, &SPI_Data, 1, 1)) != HAL_OK) )
 800811a:	1df9      	adds	r1, r7, #7
 800811c:	2301      	movs	r3, #1
 800811e:	2201      	movs	r2, #1
 8008120:	4804      	ldr	r0, [pc, #16]	; (8008134 <ILI9341_SPI_Send+0x24>)
 8008122:	f7fe f837 	bl	8006194 <HAL_SPI_Transmit>
 8008126:	4603      	mov	r3, r0
 8008128:	73fb      	strb	r3, [r7, #15]
		{
			//printf("HAL_SPI_Transmit Error #%u, ", res);
		}


}
 800812a:	bf00      	nop
 800812c:	3710      	adds	r7, #16
 800812e:	46bd      	mov	sp, r7
 8008130:	bd80      	pop	{r7, pc}
 8008132:	bf00      	nop
 8008134:	20000de4 	.word	0x20000de4

08008138 <ILI9341_Write_Command>:

/* Send command (char) to LCD */
void ILI9341_Write_Command(uint8_t Command)
{
 8008138:	b580      	push	{r7, lr}
 800813a:	b082      	sub	sp, #8
 800813c:	af00      	add	r7, sp, #0
 800813e:	4603      	mov	r3, r0
 8008140:	71fb      	strb	r3, [r7, #7]
	LCD_CS_PORT->ODR &= ~(LCD_CS_PIN);
 8008142:	4b0d      	ldr	r3, [pc, #52]	; (8008178 <ILI9341_Write_Command+0x40>)
 8008144:	695b      	ldr	r3, [r3, #20]
 8008146:	4a0c      	ldr	r2, [pc, #48]	; (8008178 <ILI9341_Write_Command+0x40>)
 8008148:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800814c:	6153      	str	r3, [r2, #20]
	LCD_DC_PORT->ODR &= ~(LCD_DC_PIN);
 800814e:	4b0a      	ldr	r3, [pc, #40]	; (8008178 <ILI9341_Write_Command+0x40>)
 8008150:	695b      	ldr	r3, [r3, #20]
 8008152:	4a09      	ldr	r2, [pc, #36]	; (8008178 <ILI9341_Write_Command+0x40>)
 8008154:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8008158:	6153      	str	r3, [r2, #20]
	ILI9341_SPI_Send(Command);
 800815a:	79fb      	ldrb	r3, [r7, #7]
 800815c:	4618      	mov	r0, r3
 800815e:	f7ff ffd7 	bl	8008110 <ILI9341_SPI_Send>
	LCD_CS_PORT->ODR |= LCD_CS_PIN;
 8008162:	4b05      	ldr	r3, [pc, #20]	; (8008178 <ILI9341_Write_Command+0x40>)
 8008164:	695b      	ldr	r3, [r3, #20]
 8008166:	4a04      	ldr	r2, [pc, #16]	; (8008178 <ILI9341_Write_Command+0x40>)
 8008168:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800816c:	6153      	str	r3, [r2, #20]
}
 800816e:	bf00      	nop
 8008170:	3708      	adds	r7, #8
 8008172:	46bd      	mov	sp, r7
 8008174:	bd80      	pop	{r7, pc}
 8008176:	bf00      	nop
 8008178:	48000400 	.word	0x48000400

0800817c <ILI9341_Write_Data>:

/* Send Data (char) to LCD */
void ILI9341_Write_Data(uint8_t Data)
{
 800817c:	b580      	push	{r7, lr}
 800817e:	b082      	sub	sp, #8
 8008180:	af00      	add	r7, sp, #0
 8008182:	4603      	mov	r3, r0
 8008184:	71fb      	strb	r3, [r7, #7]
	LCD_DC_PORT->ODR |= LCD_DC_PIN;
 8008186:	4b0d      	ldr	r3, [pc, #52]	; (80081bc <ILI9341_Write_Data+0x40>)
 8008188:	695b      	ldr	r3, [r3, #20]
 800818a:	4a0c      	ldr	r2, [pc, #48]	; (80081bc <ILI9341_Write_Data+0x40>)
 800818c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008190:	6153      	str	r3, [r2, #20]
	LCD_CS_PORT->ODR &= ~(LCD_CS_PIN);
 8008192:	4b0a      	ldr	r3, [pc, #40]	; (80081bc <ILI9341_Write_Data+0x40>)
 8008194:	695b      	ldr	r3, [r3, #20]
 8008196:	4a09      	ldr	r2, [pc, #36]	; (80081bc <ILI9341_Write_Data+0x40>)
 8008198:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800819c:	6153      	str	r3, [r2, #20]
	ILI9341_SPI_Send(Data);
 800819e:	79fb      	ldrb	r3, [r7, #7]
 80081a0:	4618      	mov	r0, r3
 80081a2:	f7ff ffb5 	bl	8008110 <ILI9341_SPI_Send>
	LCD_CS_PORT->ODR &= ~(LCD_CS_PIN);
 80081a6:	4b05      	ldr	r3, [pc, #20]	; (80081bc <ILI9341_Write_Data+0x40>)
 80081a8:	695b      	ldr	r3, [r3, #20]
 80081aa:	4a04      	ldr	r2, [pc, #16]	; (80081bc <ILI9341_Write_Data+0x40>)
 80081ac:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80081b0:	6153      	str	r3, [r2, #20]
}
 80081b2:	bf00      	nop
 80081b4:	3708      	adds	r7, #8
 80081b6:	46bd      	mov	sp, r7
 80081b8:	bd80      	pop	{r7, pc}
 80081ba:	bf00      	nop
 80081bc:	48000400 	.word	0x48000400

080081c0 <ILI9341_Set_Address>:

/* Set Address - Location block - to draw into */
void ILI9341_Set_Address(uint16_t X1, uint16_t Y1, uint16_t X2, uint16_t Y2)
{
 80081c0:	b590      	push	{r4, r7, lr}
 80081c2:	b083      	sub	sp, #12
 80081c4:	af00      	add	r7, sp, #0
 80081c6:	4604      	mov	r4, r0
 80081c8:	4608      	mov	r0, r1
 80081ca:	4611      	mov	r1, r2
 80081cc:	461a      	mov	r2, r3
 80081ce:	4623      	mov	r3, r4
 80081d0:	80fb      	strh	r3, [r7, #6]
 80081d2:	4603      	mov	r3, r0
 80081d4:	80bb      	strh	r3, [r7, #4]
 80081d6:	460b      	mov	r3, r1
 80081d8:	807b      	strh	r3, [r7, #2]
 80081da:	4613      	mov	r3, r2
 80081dc:	803b      	strh	r3, [r7, #0]
	ILI9341_Write_Command(0x2A);
 80081de:	202a      	movs	r0, #42	; 0x2a
 80081e0:	f7ff ffaa 	bl	8008138 <ILI9341_Write_Command>
	ILI9341_Write_Data(X1>>8);
 80081e4:	88fb      	ldrh	r3, [r7, #6]
 80081e6:	0a1b      	lsrs	r3, r3, #8
 80081e8:	b29b      	uxth	r3, r3
 80081ea:	b2db      	uxtb	r3, r3
 80081ec:	4618      	mov	r0, r3
 80081ee:	f7ff ffc5 	bl	800817c <ILI9341_Write_Data>
	ILI9341_Write_Data(X1);
 80081f2:	88fb      	ldrh	r3, [r7, #6]
 80081f4:	b2db      	uxtb	r3, r3
 80081f6:	4618      	mov	r0, r3
 80081f8:	f7ff ffc0 	bl	800817c <ILI9341_Write_Data>
	ILI9341_Write_Data(X2>>8);
 80081fc:	887b      	ldrh	r3, [r7, #2]
 80081fe:	0a1b      	lsrs	r3, r3, #8
 8008200:	b29b      	uxth	r3, r3
 8008202:	b2db      	uxtb	r3, r3
 8008204:	4618      	mov	r0, r3
 8008206:	f7ff ffb9 	bl	800817c <ILI9341_Write_Data>
	ILI9341_Write_Data(X2);
 800820a:	887b      	ldrh	r3, [r7, #2]
 800820c:	b2db      	uxtb	r3, r3
 800820e:	4618      	mov	r0, r3
 8008210:	f7ff ffb4 	bl	800817c <ILI9341_Write_Data>

	ILI9341_Write_Command(0x2B);
 8008214:	202b      	movs	r0, #43	; 0x2b
 8008216:	f7ff ff8f 	bl	8008138 <ILI9341_Write_Command>
	ILI9341_Write_Data(Y1>>8);
 800821a:	88bb      	ldrh	r3, [r7, #4]
 800821c:	0a1b      	lsrs	r3, r3, #8
 800821e:	b29b      	uxth	r3, r3
 8008220:	b2db      	uxtb	r3, r3
 8008222:	4618      	mov	r0, r3
 8008224:	f7ff ffaa 	bl	800817c <ILI9341_Write_Data>
	ILI9341_Write_Data(Y1);
 8008228:	88bb      	ldrh	r3, [r7, #4]
 800822a:	b2db      	uxtb	r3, r3
 800822c:	4618      	mov	r0, r3
 800822e:	f7ff ffa5 	bl	800817c <ILI9341_Write_Data>
	ILI9341_Write_Data(Y2>>8);
 8008232:	883b      	ldrh	r3, [r7, #0]
 8008234:	0a1b      	lsrs	r3, r3, #8
 8008236:	b29b      	uxth	r3, r3
 8008238:	b2db      	uxtb	r3, r3
 800823a:	4618      	mov	r0, r3
 800823c:	f7ff ff9e 	bl	800817c <ILI9341_Write_Data>
	ILI9341_Write_Data(Y2);
 8008240:	883b      	ldrh	r3, [r7, #0]
 8008242:	b2db      	uxtb	r3, r3
 8008244:	4618      	mov	r0, r3
 8008246:	f7ff ff99 	bl	800817c <ILI9341_Write_Data>

	ILI9341_Write_Command(0x2C);
 800824a:	202c      	movs	r0, #44	; 0x2c
 800824c:	f7ff ff74 	bl	8008138 <ILI9341_Write_Command>
}
 8008250:	bf00      	nop
 8008252:	370c      	adds	r7, #12
 8008254:	46bd      	mov	sp, r7
 8008256:	bd90      	pop	{r4, r7, pc}

08008258 <ILI9341_Reset>:

/*HARDWARE RESET*/
void ILI9341_Reset(void)
{
 8008258:	b580      	push	{r7, lr}
 800825a:	af00      	add	r7, sp, #0
	LCD_RST_PORT->ODR &= ~(LCD_RST_PIN);
 800825c:	4b0c      	ldr	r3, [pc, #48]	; (8008290 <ILI9341_Reset+0x38>)
 800825e:	695b      	ldr	r3, [r3, #20]
 8008260:	4a0b      	ldr	r2, [pc, #44]	; (8008290 <ILI9341_Reset+0x38>)
 8008262:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8008266:	6153      	str	r3, [r2, #20]
	HAL_Delay(200);
 8008268:	20c8      	movs	r0, #200	; 0xc8
 800826a:	f7fa fa1b 	bl	80026a4 <HAL_Delay>
	LCD_CS_PORT->ODR &= ~(LCD_CS_PIN);
 800826e:	4b08      	ldr	r3, [pc, #32]	; (8008290 <ILI9341_Reset+0x38>)
 8008270:	695b      	ldr	r3, [r3, #20]
 8008272:	4a07      	ldr	r2, [pc, #28]	; (8008290 <ILI9341_Reset+0x38>)
 8008274:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8008278:	6153      	str	r3, [r2, #20]
	HAL_Delay(200);
 800827a:	20c8      	movs	r0, #200	; 0xc8
 800827c:	f7fa fa12 	bl	80026a4 <HAL_Delay>
	LCD_RST_PORT->ODR |= LCD_RST_PIN;
 8008280:	4b03      	ldr	r3, [pc, #12]	; (8008290 <ILI9341_Reset+0x38>)
 8008282:	695b      	ldr	r3, [r3, #20]
 8008284:	4a02      	ldr	r2, [pc, #8]	; (8008290 <ILI9341_Reset+0x38>)
 8008286:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800828a:	6153      	str	r3, [r2, #20]
}
 800828c:	bf00      	nop
 800828e:	bd80      	pop	{r7, pc}
 8008290:	48000400 	.word	0x48000400

08008294 <ILI9341_Set_Rotation>:

/*Ser rotation of the screen - changes x0 and y0*/
void ILI9341_Set_Rotation(uint8_t Rotation) 
{
 8008294:	b580      	push	{r7, lr}
 8008296:	b084      	sub	sp, #16
 8008298:	af00      	add	r7, sp, #0
 800829a:	4603      	mov	r3, r0
 800829c:	71fb      	strb	r3, [r7, #7]
	
	uint8_t screen_rotation = Rotation;
 800829e:	79fb      	ldrb	r3, [r7, #7]
 80082a0:	73fb      	strb	r3, [r7, #15]
	
	ILI9341_Write_Command(0x36);
 80082a2:	2036      	movs	r0, #54	; 0x36
 80082a4:	f7ff ff48 	bl	8008138 <ILI9341_Write_Command>
	//HAL_Delay(1);

	switch(screen_rotation)
 80082a8:	7bfb      	ldrb	r3, [r7, #15]
 80082aa:	2b03      	cmp	r3, #3
 80082ac:	d836      	bhi.n	800831c <ILI9341_Set_Rotation+0x88>
 80082ae:	a201      	add	r2, pc, #4	; (adr r2, 80082b4 <ILI9341_Set_Rotation+0x20>)
 80082b0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80082b4:	080082c5 	.word	0x080082c5
 80082b8:	080082db 	.word	0x080082db
 80082bc:	080082f1 	.word	0x080082f1
 80082c0:	08008307 	.word	0x08008307
	{
		case SCREEN_VERTICAL_1:
			ILI9341_Write_Data(0x40|0x08);
 80082c4:	2048      	movs	r0, #72	; 0x48
 80082c6:	f7ff ff59 	bl	800817c <ILI9341_Write_Data>
			LCD_WIDTH = 240;
 80082ca:	4b17      	ldr	r3, [pc, #92]	; (8008328 <ILI9341_Set_Rotation+0x94>)
 80082cc:	22f0      	movs	r2, #240	; 0xf0
 80082ce:	801a      	strh	r2, [r3, #0]
			LCD_HEIGHT = 320;
 80082d0:	4b16      	ldr	r3, [pc, #88]	; (800832c <ILI9341_Set_Rotation+0x98>)
 80082d2:	f44f 72a0 	mov.w	r2, #320	; 0x140
 80082d6:	801a      	strh	r2, [r3, #0]
			break;
 80082d8:	e021      	b.n	800831e <ILI9341_Set_Rotation+0x8a>
		case SCREEN_HORIZONTAL_1:
			ILI9341_Write_Data(0x20|0x08);
 80082da:	2028      	movs	r0, #40	; 0x28
 80082dc:	f7ff ff4e 	bl	800817c <ILI9341_Write_Data>
			LCD_WIDTH  = 320;
 80082e0:	4b11      	ldr	r3, [pc, #68]	; (8008328 <ILI9341_Set_Rotation+0x94>)
 80082e2:	f44f 72a0 	mov.w	r2, #320	; 0x140
 80082e6:	801a      	strh	r2, [r3, #0]
			LCD_HEIGHT = 240;
 80082e8:	4b10      	ldr	r3, [pc, #64]	; (800832c <ILI9341_Set_Rotation+0x98>)
 80082ea:	22f0      	movs	r2, #240	; 0xf0
 80082ec:	801a      	strh	r2, [r3, #0]
			break;
 80082ee:	e016      	b.n	800831e <ILI9341_Set_Rotation+0x8a>
		case SCREEN_VERTICAL_2:
			ILI9341_Write_Data(0x80|0x08);
 80082f0:	2088      	movs	r0, #136	; 0x88
 80082f2:	f7ff ff43 	bl	800817c <ILI9341_Write_Data>
			LCD_WIDTH  = 240;
 80082f6:	4b0c      	ldr	r3, [pc, #48]	; (8008328 <ILI9341_Set_Rotation+0x94>)
 80082f8:	22f0      	movs	r2, #240	; 0xf0
 80082fa:	801a      	strh	r2, [r3, #0]
			LCD_HEIGHT = 320;
 80082fc:	4b0b      	ldr	r3, [pc, #44]	; (800832c <ILI9341_Set_Rotation+0x98>)
 80082fe:	f44f 72a0 	mov.w	r2, #320	; 0x140
 8008302:	801a      	strh	r2, [r3, #0]
			break;
 8008304:	e00b      	b.n	800831e <ILI9341_Set_Rotation+0x8a>
		case SCREEN_HORIZONTAL_2:
			ILI9341_Write_Data(0x40|0x80|0x20|0x08);
 8008306:	20e8      	movs	r0, #232	; 0xe8
 8008308:	f7ff ff38 	bl	800817c <ILI9341_Write_Data>
			LCD_WIDTH  = 320;
 800830c:	4b06      	ldr	r3, [pc, #24]	; (8008328 <ILI9341_Set_Rotation+0x94>)
 800830e:	f44f 72a0 	mov.w	r2, #320	; 0x140
 8008312:	801a      	strh	r2, [r3, #0]
			LCD_HEIGHT = 240;
 8008314:	4b05      	ldr	r3, [pc, #20]	; (800832c <ILI9341_Set_Rotation+0x98>)
 8008316:	22f0      	movs	r2, #240	; 0xf0
 8008318:	801a      	strh	r2, [r3, #0]
			break;
 800831a:	e000      	b.n	800831e <ILI9341_Set_Rotation+0x8a>
		default:
			//EXIT IF SCREEN ROTATION NOT VALID!
			break;
 800831c:	bf00      	nop
	}
}
 800831e:	bf00      	nop
 8008320:	3710      	adds	r7, #16
 8008322:	46bd      	mov	sp, r7
 8008324:	bd80      	pop	{r7, pc}
 8008326:	bf00      	nop
 8008328:	2000001a 	.word	0x2000001a
 800832c:	20000018 	.word	0x20000018

08008330 <ILI9341_Enable>:

/*Enable LCD display*/
void ILI9341_Enable(void)
{
 8008330:	b480      	push	{r7}
 8008332:	af00      	add	r7, sp, #0
	LCD_RST_PORT->ODR |= LCD_RST_PIN;
 8008334:	4b05      	ldr	r3, [pc, #20]	; (800834c <ILI9341_Enable+0x1c>)
 8008336:	695b      	ldr	r3, [r3, #20]
 8008338:	4a04      	ldr	r2, [pc, #16]	; (800834c <ILI9341_Enable+0x1c>)
 800833a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800833e:	6153      	str	r3, [r2, #20]
}
 8008340:	bf00      	nop
 8008342:	46bd      	mov	sp, r7
 8008344:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008348:	4770      	bx	lr
 800834a:	bf00      	nop
 800834c:	48000400 	.word	0x48000400

08008350 <ILI9341_Init>:

/*Initialize LCD display*/
void ILI9341_Init(void)
{
 8008350:	b580      	push	{r7, lr}
 8008352:	af00      	add	r7, sp, #0

	ILI9341_Enable();
 8008354:	f7ff ffec 	bl	8008330 <ILI9341_Enable>
	ILI9341_SPI_Init();
 8008358:	f7ff feca 	bl	80080f0 <ILI9341_SPI_Init>
	ILI9341_Reset();
 800835c:	f7ff ff7c 	bl	8008258 <ILI9341_Reset>

	//SOFTWARE RESET
	ILI9341_Write_Command(0x01);
 8008360:	2001      	movs	r0, #1
 8008362:	f7ff fee9 	bl	8008138 <ILI9341_Write_Command>
	HAL_Delay(2000);
 8008366:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 800836a:	f7fa f99b 	bl	80026a4 <HAL_Delay>

	//POWER CONTROL A
	ILI9341_Write_Command(0xCB);
 800836e:	20cb      	movs	r0, #203	; 0xcb
 8008370:	f7ff fee2 	bl	8008138 <ILI9341_Write_Command>
	ILI9341_Write_Data(0x39);
 8008374:	2039      	movs	r0, #57	; 0x39
 8008376:	f7ff ff01 	bl	800817c <ILI9341_Write_Data>
	ILI9341_Write_Data(0x2C);
 800837a:	202c      	movs	r0, #44	; 0x2c
 800837c:	f7ff fefe 	bl	800817c <ILI9341_Write_Data>
	ILI9341_Write_Data(0x00);
 8008380:	2000      	movs	r0, #0
 8008382:	f7ff fefb 	bl	800817c <ILI9341_Write_Data>
	ILI9341_Write_Data(0x34);
 8008386:	2034      	movs	r0, #52	; 0x34
 8008388:	f7ff fef8 	bl	800817c <ILI9341_Write_Data>
	ILI9341_Write_Data(0x02);
 800838c:	2002      	movs	r0, #2
 800838e:	f7ff fef5 	bl	800817c <ILI9341_Write_Data>

	//POWER CONTROL B
	ILI9341_Write_Command(0xCF);
 8008392:	20cf      	movs	r0, #207	; 0xcf
 8008394:	f7ff fed0 	bl	8008138 <ILI9341_Write_Command>
	ILI9341_Write_Data(0x00);
 8008398:	2000      	movs	r0, #0
 800839a:	f7ff feef 	bl	800817c <ILI9341_Write_Data>
	ILI9341_Write_Data(0xC1);
 800839e:	20c1      	movs	r0, #193	; 0xc1
 80083a0:	f7ff feec 	bl	800817c <ILI9341_Write_Data>
	ILI9341_Write_Data(0x30);
 80083a4:	2030      	movs	r0, #48	; 0x30
 80083a6:	f7ff fee9 	bl	800817c <ILI9341_Write_Data>

	//DRIVER TIMING CONTROL A
	ILI9341_Write_Command(0xE8);
 80083aa:	20e8      	movs	r0, #232	; 0xe8
 80083ac:	f7ff fec4 	bl	8008138 <ILI9341_Write_Command>
	ILI9341_Write_Data(0x85);
 80083b0:	2085      	movs	r0, #133	; 0x85
 80083b2:	f7ff fee3 	bl	800817c <ILI9341_Write_Data>
	ILI9341_Write_Data(0x00);
 80083b6:	2000      	movs	r0, #0
 80083b8:	f7ff fee0 	bl	800817c <ILI9341_Write_Data>
	ILI9341_Write_Data(0x78);
 80083bc:	2078      	movs	r0, #120	; 0x78
 80083be:	f7ff fedd 	bl	800817c <ILI9341_Write_Data>

	//DRIVER TIMING CONTROL B
	ILI9341_Write_Command(0xEA);
 80083c2:	20ea      	movs	r0, #234	; 0xea
 80083c4:	f7ff feb8 	bl	8008138 <ILI9341_Write_Command>
	ILI9341_Write_Data(0x00);
 80083c8:	2000      	movs	r0, #0
 80083ca:	f7ff fed7 	bl	800817c <ILI9341_Write_Data>
	ILI9341_Write_Data(0x00);
 80083ce:	2000      	movs	r0, #0
 80083d0:	f7ff fed4 	bl	800817c <ILI9341_Write_Data>

	//POWER ON SEQUENCE CONTROL
	ILI9341_Write_Command(0xED);
 80083d4:	20ed      	movs	r0, #237	; 0xed
 80083d6:	f7ff feaf 	bl	8008138 <ILI9341_Write_Command>
	ILI9341_Write_Data(0x64);
 80083da:	2064      	movs	r0, #100	; 0x64
 80083dc:	f7ff fece 	bl	800817c <ILI9341_Write_Data>
	ILI9341_Write_Data(0x03);
 80083e0:	2003      	movs	r0, #3
 80083e2:	f7ff fecb 	bl	800817c <ILI9341_Write_Data>
	ILI9341_Write_Data(0x12);
 80083e6:	2012      	movs	r0, #18
 80083e8:	f7ff fec8 	bl	800817c <ILI9341_Write_Data>
	ILI9341_Write_Data(0x81);
 80083ec:	2081      	movs	r0, #129	; 0x81
 80083ee:	f7ff fec5 	bl	800817c <ILI9341_Write_Data>

	//PUMP RATIO CONTROL
	ILI9341_Write_Command(0xF7);
 80083f2:	20f7      	movs	r0, #247	; 0xf7
 80083f4:	f7ff fea0 	bl	8008138 <ILI9341_Write_Command>
	ILI9341_Write_Data(0x20);
 80083f8:	2020      	movs	r0, #32
 80083fa:	f7ff febf 	bl	800817c <ILI9341_Write_Data>

	//POWER CONTROL,VRH[5:0]
	ILI9341_Write_Command(0xC0);
 80083fe:	20c0      	movs	r0, #192	; 0xc0
 8008400:	f7ff fe9a 	bl	8008138 <ILI9341_Write_Command>
	ILI9341_Write_Data(0x23);
 8008404:	2023      	movs	r0, #35	; 0x23
 8008406:	f7ff feb9 	bl	800817c <ILI9341_Write_Data>

	//POWER CONTROL,SAP[2:0];BT[3:0]
	ILI9341_Write_Command(0xC1);
 800840a:	20c1      	movs	r0, #193	; 0xc1
 800840c:	f7ff fe94 	bl	8008138 <ILI9341_Write_Command>
	ILI9341_Write_Data(0x10);
 8008410:	2010      	movs	r0, #16
 8008412:	f7ff feb3 	bl	800817c <ILI9341_Write_Data>

	//VCM CONTROL
	ILI9341_Write_Command(0xC5);
 8008416:	20c5      	movs	r0, #197	; 0xc5
 8008418:	f7ff fe8e 	bl	8008138 <ILI9341_Write_Command>
	ILI9341_Write_Data(0x3E);
 800841c:	203e      	movs	r0, #62	; 0x3e
 800841e:	f7ff fead 	bl	800817c <ILI9341_Write_Data>
	ILI9341_Write_Data(0x28);
 8008422:	2028      	movs	r0, #40	; 0x28
 8008424:	f7ff feaa 	bl	800817c <ILI9341_Write_Data>

	//VCM CONTROL 2
	ILI9341_Write_Command(0xC7);
 8008428:	20c7      	movs	r0, #199	; 0xc7
 800842a:	f7ff fe85 	bl	8008138 <ILI9341_Write_Command>
	ILI9341_Write_Data(0x86);
 800842e:	2086      	movs	r0, #134	; 0x86
 8008430:	f7ff fea4 	bl	800817c <ILI9341_Write_Data>

	//MEMORY ACCESS CONTROL
	ILI9341_Write_Command(0x36);
 8008434:	2036      	movs	r0, #54	; 0x36
 8008436:	f7ff fe7f 	bl	8008138 <ILI9341_Write_Command>
	ILI9341_Write_Data(0x48);
 800843a:	2048      	movs	r0, #72	; 0x48
 800843c:	f7ff fe9e 	bl	800817c <ILI9341_Write_Data>


	//PIXEL FORMAT
	ILI9341_Write_Command(0x3A);
 8008440:	203a      	movs	r0, #58	; 0x3a
 8008442:	f7ff fe79 	bl	8008138 <ILI9341_Write_Command>
	ILI9341_Write_Data(0x55);
 8008446:	2055      	movs	r0, #85	; 0x55
 8008448:	f7ff fe98 	bl	800817c <ILI9341_Write_Data>

	//FRAME RATIO CONTROL, STANDARD RGB COLOR
	ILI9341_Write_Command(0xB1);
 800844c:	20b1      	movs	r0, #177	; 0xb1
 800844e:	f7ff fe73 	bl	8008138 <ILI9341_Write_Command>
	ILI9341_Write_Data(0x00);
 8008452:	2000      	movs	r0, #0
 8008454:	f7ff fe92 	bl	800817c <ILI9341_Write_Data>
	ILI9341_Write_Data(0x18);
 8008458:	2018      	movs	r0, #24
 800845a:	f7ff fe8f 	bl	800817c <ILI9341_Write_Data>

	//DISPLAY FUNCTION CONTROL
	ILI9341_Write_Command(0xB6);
 800845e:	20b6      	movs	r0, #182	; 0xb6
 8008460:	f7ff fe6a 	bl	8008138 <ILI9341_Write_Command>
	ILI9341_Write_Data(0x08);
 8008464:	2008      	movs	r0, #8
 8008466:	f7ff fe89 	bl	800817c <ILI9341_Write_Data>
	ILI9341_Write_Data(0x82);
 800846a:	2082      	movs	r0, #130	; 0x82
 800846c:	f7ff fe86 	bl	800817c <ILI9341_Write_Data>
	ILI9341_Write_Data(0x27);
 8008470:	2027      	movs	r0, #39	; 0x27
 8008472:	f7ff fe83 	bl	800817c <ILI9341_Write_Data>


	//3GAMMA FUNCTION DISABLE
	ILI9341_Write_Command(0xF2);
 8008476:	20f2      	movs	r0, #242	; 0xf2
 8008478:	f7ff fe5e 	bl	8008138 <ILI9341_Write_Command>
	ILI9341_Write_Data(0x00);
 800847c:	2000      	movs	r0, #0
 800847e:	f7ff fe7d 	bl	800817c <ILI9341_Write_Data>

	//GAMMA CURVE SELECTED
	ILI9341_Write_Command(0x26);
 8008482:	2026      	movs	r0, #38	; 0x26
 8008484:	f7ff fe58 	bl	8008138 <ILI9341_Write_Command>
	ILI9341_Write_Data(0x01);
 8008488:	2001      	movs	r0, #1
 800848a:	f7ff fe77 	bl	800817c <ILI9341_Write_Data>

	//POSITIVE GAMMA CORRECTION
	ILI9341_Write_Command(0xE0);
 800848e:	20e0      	movs	r0, #224	; 0xe0
 8008490:	f7ff fe52 	bl	8008138 <ILI9341_Write_Command>
	ILI9341_Write_Data(0x0F);
 8008494:	200f      	movs	r0, #15
 8008496:	f7ff fe71 	bl	800817c <ILI9341_Write_Data>
	ILI9341_Write_Data(0x31);
 800849a:	2031      	movs	r0, #49	; 0x31
 800849c:	f7ff fe6e 	bl	800817c <ILI9341_Write_Data>
	ILI9341_Write_Data(0x2B);
 80084a0:	202b      	movs	r0, #43	; 0x2b
 80084a2:	f7ff fe6b 	bl	800817c <ILI9341_Write_Data>
	ILI9341_Write_Data(0x0C);
 80084a6:	200c      	movs	r0, #12
 80084a8:	f7ff fe68 	bl	800817c <ILI9341_Write_Data>
	ILI9341_Write_Data(0x0E);
 80084ac:	200e      	movs	r0, #14
 80084ae:	f7ff fe65 	bl	800817c <ILI9341_Write_Data>
	ILI9341_Write_Data(0x08);
 80084b2:	2008      	movs	r0, #8
 80084b4:	f7ff fe62 	bl	800817c <ILI9341_Write_Data>
	ILI9341_Write_Data(0x4E);
 80084b8:	204e      	movs	r0, #78	; 0x4e
 80084ba:	f7ff fe5f 	bl	800817c <ILI9341_Write_Data>
	ILI9341_Write_Data(0xF1);
 80084be:	20f1      	movs	r0, #241	; 0xf1
 80084c0:	f7ff fe5c 	bl	800817c <ILI9341_Write_Data>
	ILI9341_Write_Data(0x37);
 80084c4:	2037      	movs	r0, #55	; 0x37
 80084c6:	f7ff fe59 	bl	800817c <ILI9341_Write_Data>
	ILI9341_Write_Data(0x07);
 80084ca:	2007      	movs	r0, #7
 80084cc:	f7ff fe56 	bl	800817c <ILI9341_Write_Data>
	ILI9341_Write_Data(0x10);
 80084d0:	2010      	movs	r0, #16
 80084d2:	f7ff fe53 	bl	800817c <ILI9341_Write_Data>
	ILI9341_Write_Data(0x03);
 80084d6:	2003      	movs	r0, #3
 80084d8:	f7ff fe50 	bl	800817c <ILI9341_Write_Data>
	ILI9341_Write_Data(0x0E);
 80084dc:	200e      	movs	r0, #14
 80084de:	f7ff fe4d 	bl	800817c <ILI9341_Write_Data>
	ILI9341_Write_Data(0x09);
 80084e2:	2009      	movs	r0, #9
 80084e4:	f7ff fe4a 	bl	800817c <ILI9341_Write_Data>
	ILI9341_Write_Data(0x00);
 80084e8:	2000      	movs	r0, #0
 80084ea:	f7ff fe47 	bl	800817c <ILI9341_Write_Data>

	//NEGATIVE GAMMA CORRECTION
	ILI9341_Write_Command(0xE1);
 80084ee:	20e1      	movs	r0, #225	; 0xe1
 80084f0:	f7ff fe22 	bl	8008138 <ILI9341_Write_Command>
	ILI9341_Write_Data(0x00);
 80084f4:	2000      	movs	r0, #0
 80084f6:	f7ff fe41 	bl	800817c <ILI9341_Write_Data>
	ILI9341_Write_Data(0x0E);
 80084fa:	200e      	movs	r0, #14
 80084fc:	f7ff fe3e 	bl	800817c <ILI9341_Write_Data>
	ILI9341_Write_Data(0x14);
 8008500:	2014      	movs	r0, #20
 8008502:	f7ff fe3b 	bl	800817c <ILI9341_Write_Data>
	ILI9341_Write_Data(0x03);
 8008506:	2003      	movs	r0, #3
 8008508:	f7ff fe38 	bl	800817c <ILI9341_Write_Data>
	ILI9341_Write_Data(0x11);
 800850c:	2011      	movs	r0, #17
 800850e:	f7ff fe35 	bl	800817c <ILI9341_Write_Data>
	ILI9341_Write_Data(0x07);
 8008512:	2007      	movs	r0, #7
 8008514:	f7ff fe32 	bl	800817c <ILI9341_Write_Data>
	ILI9341_Write_Data(0x31);
 8008518:	2031      	movs	r0, #49	; 0x31
 800851a:	f7ff fe2f 	bl	800817c <ILI9341_Write_Data>
	ILI9341_Write_Data(0xC1);
 800851e:	20c1      	movs	r0, #193	; 0xc1
 8008520:	f7ff fe2c 	bl	800817c <ILI9341_Write_Data>
	ILI9341_Write_Data(0x48);
 8008524:	2048      	movs	r0, #72	; 0x48
 8008526:	f7ff fe29 	bl	800817c <ILI9341_Write_Data>
	ILI9341_Write_Data(0x08);
 800852a:	2008      	movs	r0, #8
 800852c:	f7ff fe26 	bl	800817c <ILI9341_Write_Data>
	ILI9341_Write_Data(0x0F);
 8008530:	200f      	movs	r0, #15
 8008532:	f7ff fe23 	bl	800817c <ILI9341_Write_Data>
	ILI9341_Write_Data(0x0C);
 8008536:	200c      	movs	r0, #12
 8008538:	f7ff fe20 	bl	800817c <ILI9341_Write_Data>
	ILI9341_Write_Data(0x31);
 800853c:	2031      	movs	r0, #49	; 0x31
 800853e:	f7ff fe1d 	bl	800817c <ILI9341_Write_Data>
	ILI9341_Write_Data(0x36);
 8008542:	2036      	movs	r0, #54	; 0x36
 8008544:	f7ff fe1a 	bl	800817c <ILI9341_Write_Data>
	ILI9341_Write_Data(0x0F);
 8008548:	200f      	movs	r0, #15
 800854a:	f7ff fe17 	bl	800817c <ILI9341_Write_Data>

	//EXIT SLEEP
	ILI9341_Write_Command(0x11);
 800854e:	2011      	movs	r0, #17
 8008550:	f7ff fdf2 	bl	8008138 <ILI9341_Write_Command>
	HAL_Delay(240);
 8008554:	20f0      	movs	r0, #240	; 0xf0
 8008556:	f7fa f8a5 	bl	80026a4 <HAL_Delay>

	//TURN ON DISPLAY
	ILI9341_Write_Command(0x29);
 800855a:	2029      	movs	r0, #41	; 0x29
 800855c:	f7ff fdec 	bl	8008138 <ILI9341_Write_Command>
	
	//STARTING ROTATION
	ILI9341_Set_Rotation(SCREEN_VERTICAL_1);
 8008560:	2000      	movs	r0, #0
 8008562:	f7ff fe97 	bl	8008294 <ILI9341_Set_Rotation>
}
 8008566:	bf00      	nop
 8008568:	bd80      	pop	{r7, pc}
	...

0800856c <ILI9341_Draw_colour_Burst>:
}

//INTERNAL FUNCTION OF LIBRARY
/*Sends block colour information to LCD*/
void ILI9341_Draw_colour_Burst(uint16_t chunk_xpos, uint16_t chunk_ypos, uint16_t colour, uint32_t chunk_size, CHUNK_Type chunk_type)
{
 800856c:	b5b0      	push	{r4, r5, r7, lr}
 800856e:	b08e      	sub	sp, #56	; 0x38
 8008570:	af00      	add	r7, sp, #0
 8008572:	607b      	str	r3, [r7, #4]
 8008574:	4603      	mov	r3, r0
 8008576:	81fb      	strh	r3, [r7, #14]
 8008578:	460b      	mov	r3, r1
 800857a:	81bb      	strh	r3, [r7, #12]
 800857c:	4613      	mov	r3, r2
 800857e:	817b      	strh	r3, [r7, #10]
 8008580:	466b      	mov	r3, sp
 8008582:	461d      	mov	r5, r3

	// 	entire data sent to this function is a CHUNK < BURST_MAX_SIZE
	// 	each CHUNK is broken down into smaller BLOCKS


	uint32_t buffer_size = 0;
 8008584:	2300      	movs	r3, #0
 8008586:	62fb      	str	r3, [r7, #44]	; 0x2c
	if((chunk_size*2) < BURST_MAX_SIZE)
 8008588:	687b      	ldr	r3, [r7, #4]
 800858a:	005b      	lsls	r3, r3, #1
 800858c:	4a48      	ldr	r2, [pc, #288]	; (80086b0 <ILI9341_Draw_colour_Burst+0x144>)
 800858e:	8812      	ldrh	r2, [r2, #0]
 8008590:	4293      	cmp	r3, r2
 8008592:	d202      	bcs.n	800859a <ILI9341_Draw_colour_Burst+0x2e>
	{
		buffer_size = chunk_size;
 8008594:	687b      	ldr	r3, [r7, #4]
 8008596:	62fb      	str	r3, [r7, #44]	; 0x2c
 8008598:	e002      	b.n	80085a0 <ILI9341_Draw_colour_Burst+0x34>
	}
	else
	{
		buffer_size = BURST_MAX_SIZE;
 800859a:	4b45      	ldr	r3, [pc, #276]	; (80086b0 <ILI9341_Draw_colour_Burst+0x144>)
 800859c:	881b      	ldrh	r3, [r3, #0]
 800859e:	62fb      	str	r3, [r7, #44]	; 0x2c
	}




	unsigned char chifted = 	colour>>8;;
 80085a0:	897b      	ldrh	r3, [r7, #10]
 80085a2:	0a1b      	lsrs	r3, r3, #8
 80085a4:	b29b      	uxth	r3, r3
 80085a6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
	unsigned char burst_buffer[buffer_size];
 80085aa:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80085ac:	4603      	mov	r3, r0
 80085ae:	3b01      	subs	r3, #1
 80085b0:	61fb      	str	r3, [r7, #28]
 80085b2:	4601      	mov	r1, r0
 80085b4:	f04f 0200 	mov.w	r2, #0
 80085b8:	f04f 0300 	mov.w	r3, #0
 80085bc:	f04f 0400 	mov.w	r4, #0
 80085c0:	00d4      	lsls	r4, r2, #3
 80085c2:	ea44 7451 	orr.w	r4, r4, r1, lsr #29
 80085c6:	00cb      	lsls	r3, r1, #3
 80085c8:	4601      	mov	r1, r0
 80085ca:	f04f 0200 	mov.w	r2, #0
 80085ce:	f04f 0300 	mov.w	r3, #0
 80085d2:	f04f 0400 	mov.w	r4, #0
 80085d6:	00d4      	lsls	r4, r2, #3
 80085d8:	ea44 7451 	orr.w	r4, r4, r1, lsr #29
 80085dc:	00cb      	lsls	r3, r1, #3
 80085de:	1dc3      	adds	r3, r0, #7
 80085e0:	08db      	lsrs	r3, r3, #3
 80085e2:	00db      	lsls	r3, r3, #3
 80085e4:	ebad 0d03 	sub.w	sp, sp, r3
 80085e8:	466b      	mov	r3, sp
 80085ea:	3300      	adds	r3, #0
 80085ec:	61bb      	str	r3, [r7, #24]
	for(uint32_t j = 0; j < buffer_size; j+=2)
 80085ee:	2300      	movs	r3, #0
 80085f0:	633b      	str	r3, [r7, #48]	; 0x30
 80085f2:	e00e      	b.n	8008612 <ILI9341_Draw_colour_Burst+0xa6>
	{

			burst_buffer[j] = 	chifted;
 80085f4:	69ba      	ldr	r2, [r7, #24]
 80085f6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80085f8:	4413      	add	r3, r2
 80085fa:	f897 2023 	ldrb.w	r2, [r7, #35]	; 0x23
 80085fe:	701a      	strb	r2, [r3, #0]

			burst_buffer[j+1] = colour;
 8008600:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008602:	3301      	adds	r3, #1
 8008604:	897a      	ldrh	r2, [r7, #10]
 8008606:	b2d1      	uxtb	r1, r2
 8008608:	69ba      	ldr	r2, [r7, #24]
 800860a:	54d1      	strb	r1, [r2, r3]
	for(uint32_t j = 0; j < buffer_size; j+=2)
 800860c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800860e:	3302      	adds	r3, #2
 8008610:	633b      	str	r3, [r7, #48]	; 0x30
 8008612:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8008614:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008616:	429a      	cmp	r2, r3
 8008618:	d3ec      	bcc.n	80085f4 <ILI9341_Draw_colour_Burst+0x88>


	}
	
	uint32_t Sending_size = chunk_size*2;
 800861a:	687b      	ldr	r3, [r7, #4]
 800861c:	005b      	lsls	r3, r3, #1
 800861e:	617b      	str	r3, [r7, #20]

	// make sure we don't divide by size=0
	uint32_t Sending_in_Block = 1;
 8008620:	2301      	movs	r3, #1
 8008622:	637b      	str	r3, [r7, #52]	; 0x34
	uint32_t Remainder_from_block = 0;
 8008624:	2300      	movs	r3, #0
 8008626:	62bb      	str	r3, [r7, #40]	; 0x28
	if(chunk_size > 0)
 8008628:	687b      	ldr	r3, [r7, #4]
 800862a:	2b00      	cmp	r3, #0
 800862c:	d00d      	beq.n	800864a <ILI9341_Draw_colour_Burst+0xde>
	{
			Sending_in_Block 		= Sending_size/buffer_size;
 800862e:	697a      	ldr	r2, [r7, #20]
 8008630:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008632:	fbb2 f3f3 	udiv	r3, r2, r3
 8008636:	637b      	str	r3, [r7, #52]	; 0x34
			Remainder_from_block 	= Sending_size%buffer_size;
 8008638:	697b      	ldr	r3, [r7, #20]
 800863a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800863c:	fbb3 f2f2 	udiv	r2, r3, r2
 8008640:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8008642:	fb01 f202 	mul.w	r2, r1, r2
 8008646:	1a9b      	subs	r3, r3, r2
 8008648:	62bb      	str	r3, [r7, #40]	; 0x28
	}

	// send blocks
	LCD_DC_PORT->ODR |= LCD_DC_PIN;
 800864a:	4b1a      	ldr	r3, [pc, #104]	; (80086b4 <ILI9341_Draw_colour_Burst+0x148>)
 800864c:	695b      	ldr	r3, [r3, #20]
 800864e:	4a19      	ldr	r2, [pc, #100]	; (80086b4 <ILI9341_Draw_colour_Burst+0x148>)
 8008650:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008654:	6153      	str	r3, [r2, #20]
	LCD_CS_PORT->ODR &= ~(LCD_CS_PIN);
 8008656:	4b17      	ldr	r3, [pc, #92]	; (80086b4 <ILI9341_Draw_colour_Burst+0x148>)
 8008658:	695b      	ldr	r3, [r3, #20]
 800865a:	4a16      	ldr	r2, [pc, #88]	; (80086b4 <ILI9341_Draw_colour_Burst+0x148>)
 800865c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8008660:	6153      	str	r3, [r2, #20]

	if(Sending_in_Block != 0)
 8008662:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008664:	2b00      	cmp	r3, #0
 8008666:	d010      	beq.n	800868a <ILI9341_Draw_colour_Burst+0x11e>
	{
		for(uint32_t j = 0; j < (Sending_in_Block); j++)
 8008668:	2300      	movs	r3, #0
 800866a:	627b      	str	r3, [r7, #36]	; 0x24
 800866c:	e009      	b.n	8008682 <ILI9341_Draw_colour_Burst+0x116>
		{

			HAL_SPI_Transmit(HSPI_INSTANCE, (unsigned char *)burst_buffer, buffer_size, 2);
 800866e:	69b9      	ldr	r1, [r7, #24]
 8008670:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008672:	b29a      	uxth	r2, r3
 8008674:	2302      	movs	r3, #2
 8008676:	4810      	ldr	r0, [pc, #64]	; (80086b8 <ILI9341_Draw_colour_Burst+0x14c>)
 8008678:	f7fd fd8c 	bl	8006194 <HAL_SPI_Transmit>
		for(uint32_t j = 0; j < (Sending_in_Block); j++)
 800867c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800867e:	3301      	adds	r3, #1
 8008680:	627b      	str	r3, [r7, #36]	; 0x24
 8008682:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008684:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008686:	429a      	cmp	r2, r3
 8008688:	d3f1      	bcc.n	800866e <ILI9341_Draw_colour_Burst+0x102>
		}
	}

	//REMAINDER!
	HAL_SPI_Transmit(HSPI_INSTANCE, (unsigned char *)burst_buffer, Remainder_from_block, 2);
 800868a:	69b9      	ldr	r1, [r7, #24]
 800868c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800868e:	b29a      	uxth	r2, r3
 8008690:	2302      	movs	r3, #2
 8008692:	4809      	ldr	r0, [pc, #36]	; (80086b8 <ILI9341_Draw_colour_Burst+0x14c>)
 8008694:	f7fd fd7e 	bl	8006194 <HAL_SPI_Transmit>

	LCD_CS_PORT->ODR |= LCD_CS_PIN;
 8008698:	4b06      	ldr	r3, [pc, #24]	; (80086b4 <ILI9341_Draw_colour_Burst+0x148>)
 800869a:	695b      	ldr	r3, [r3, #20]
 800869c:	4a05      	ldr	r2, [pc, #20]	; (80086b4 <ILI9341_Draw_colour_Burst+0x148>)
 800869e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80086a2:	6153      	str	r3, [r2, #20]
 80086a4:	46ad      	mov	sp, r5


}
 80086a6:	bf00      	nop
 80086a8:	3738      	adds	r7, #56	; 0x38
 80086aa:	46bd      	mov	sp, r7
 80086ac:	bdb0      	pop	{r4, r5, r7, pc}
 80086ae:	bf00      	nop
 80086b0:	2000001c 	.word	0x2000001c
 80086b4:	48000400 	.word	0x48000400
 80086b8:	20000de4 	.word	0x20000de4

080086bc <ILI9341_Fill_Screen>:

//FILL THE ENTIRE SCREEN WITH SELECTED COLOUR (either #define-d ones or custom 16bit)
/*Sets address (entire screen) and Sends height*width ammount of colour information to LCD*/
void ILI9341_Fill_Screen(uint16_t colour)
{
 80086bc:	b580      	push	{r7, lr}
 80086be:	b084      	sub	sp, #16
 80086c0:	af02      	add	r7, sp, #8
 80086c2:	4603      	mov	r3, r0
 80086c4:	80fb      	strh	r3, [r7, #6]
	ILI9341_Set_Address(0,0,LCD_WIDTH,LCD_HEIGHT);
 80086c6:	4b10      	ldr	r3, [pc, #64]	; (8008708 <ILI9341_Fill_Screen+0x4c>)
 80086c8:	881b      	ldrh	r3, [r3, #0]
 80086ca:	b29a      	uxth	r2, r3
 80086cc:	4b0f      	ldr	r3, [pc, #60]	; (800870c <ILI9341_Fill_Screen+0x50>)
 80086ce:	881b      	ldrh	r3, [r3, #0]
 80086d0:	b29b      	uxth	r3, r3
 80086d2:	2100      	movs	r1, #0
 80086d4:	2000      	movs	r0, #0
 80086d6:	f7ff fd73 	bl	80081c0 <ILI9341_Set_Address>
	ILI9341_Draw_colour_Burst(0, 0, colour, LCD_WIDTH*LCD_HEIGHT, AREA_CHUNK);
 80086da:	4b0b      	ldr	r3, [pc, #44]	; (8008708 <ILI9341_Fill_Screen+0x4c>)
 80086dc:	881b      	ldrh	r3, [r3, #0]
 80086de:	b29b      	uxth	r3, r3
 80086e0:	461a      	mov	r2, r3
 80086e2:	4b0a      	ldr	r3, [pc, #40]	; (800870c <ILI9341_Fill_Screen+0x50>)
 80086e4:	881b      	ldrh	r3, [r3, #0]
 80086e6:	b29b      	uxth	r3, r3
 80086e8:	fb03 f302 	mul.w	r3, r3, r2
 80086ec:	4619      	mov	r1, r3
 80086ee:	88fa      	ldrh	r2, [r7, #6]
 80086f0:	2304      	movs	r3, #4
 80086f2:	9300      	str	r3, [sp, #0]
 80086f4:	460b      	mov	r3, r1
 80086f6:	2100      	movs	r1, #0
 80086f8:	2000      	movs	r0, #0
 80086fa:	f7ff ff37 	bl	800856c <ILI9341_Draw_colour_Burst>
}
 80086fe:	bf00      	nop
 8008700:	3708      	adds	r7, #8
 8008702:	46bd      	mov	sp, r7
 8008704:	bd80      	pop	{r7, pc}
 8008706:	bf00      	nop
 8008708:	2000001a 	.word	0x2000001a
 800870c:	20000018 	.word	0x20000018

08008710 <ILI9341_Draw_Pixel>:
//Location is dependant on screen orientation. x0 and y0 locations change with orientations.
//Using pixels to draw big simple structures is not recommended as it is really slow
//Try using either rectangles or lines if possible
//
void ILI9341_Draw_Pixel(uint16_t X,uint16_t Y,uint16_t colour)
{
 8008710:	b580      	push	{r7, lr}
 8008712:	b086      	sub	sp, #24
 8008714:	af00      	add	r7, sp, #0
 8008716:	4603      	mov	r3, r0
 8008718:	80fb      	strh	r3, [r7, #6]
 800871a:	460b      	mov	r3, r1
 800871c:	80bb      	strh	r3, [r7, #4]
 800871e:	4613      	mov	r3, r2
 8008720:	807b      	strh	r3, [r7, #2]
	if((X >=LCD_WIDTH) || (Y >=LCD_HEIGHT)) return;	//OUT OF BOUNDS!
 8008722:	4b64      	ldr	r3, [pc, #400]	; (80088b4 <ILI9341_Draw_Pixel+0x1a4>)
 8008724:	881b      	ldrh	r3, [r3, #0]
 8008726:	b29b      	uxth	r3, r3
 8008728:	88fa      	ldrh	r2, [r7, #6]
 800872a:	429a      	cmp	r2, r3
 800872c:	f080 80be 	bcs.w	80088ac <ILI9341_Draw_Pixel+0x19c>
 8008730:	4b61      	ldr	r3, [pc, #388]	; (80088b8 <ILI9341_Draw_Pixel+0x1a8>)
 8008732:	881b      	ldrh	r3, [r3, #0]
 8008734:	b29b      	uxth	r3, r3
 8008736:	88ba      	ldrh	r2, [r7, #4]
 8008738:	429a      	cmp	r2, r3
 800873a:	f080 80b7 	bcs.w	80088ac <ILI9341_Draw_Pixel+0x19c>

	//ADDRESS
	LCD_DC_PORT->ODR &= ~(LCD_DC_PIN);
 800873e:	4b5f      	ldr	r3, [pc, #380]	; (80088bc <ILI9341_Draw_Pixel+0x1ac>)
 8008740:	695b      	ldr	r3, [r3, #20]
 8008742:	4a5e      	ldr	r2, [pc, #376]	; (80088bc <ILI9341_Draw_Pixel+0x1ac>)
 8008744:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8008748:	6153      	str	r3, [r2, #20]
	LCD_CS_PORT->ODR &= ~(LCD_CS_PIN);
 800874a:	4b5c      	ldr	r3, [pc, #368]	; (80088bc <ILI9341_Draw_Pixel+0x1ac>)
 800874c:	695b      	ldr	r3, [r3, #20]
 800874e:	4a5b      	ldr	r2, [pc, #364]	; (80088bc <ILI9341_Draw_Pixel+0x1ac>)
 8008750:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8008754:	6153      	str	r3, [r2, #20]
	ILI9341_SPI_Send(0x2A);
 8008756:	202a      	movs	r0, #42	; 0x2a
 8008758:	f7ff fcda 	bl	8008110 <ILI9341_SPI_Send>

	LCD_DC_PORT->ODR |= LCD_DC_PIN;
 800875c:	4b57      	ldr	r3, [pc, #348]	; (80088bc <ILI9341_Draw_Pixel+0x1ac>)
 800875e:	695b      	ldr	r3, [r3, #20]
 8008760:	4a56      	ldr	r2, [pc, #344]	; (80088bc <ILI9341_Draw_Pixel+0x1ac>)
 8008762:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008766:	6153      	str	r3, [r2, #20]
	LCD_CS_PORT->ODR |= LCD_CS_PIN;
 8008768:	4b54      	ldr	r3, [pc, #336]	; (80088bc <ILI9341_Draw_Pixel+0x1ac>)
 800876a:	695b      	ldr	r3, [r3, #20]
 800876c:	4a53      	ldr	r2, [pc, #332]	; (80088bc <ILI9341_Draw_Pixel+0x1ac>)
 800876e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008772:	6153      	str	r3, [r2, #20]

	//XDATA
	LCD_CS_PORT->ODR &= ~(LCD_CS_PIN);
 8008774:	4b51      	ldr	r3, [pc, #324]	; (80088bc <ILI9341_Draw_Pixel+0x1ac>)
 8008776:	695b      	ldr	r3, [r3, #20]
 8008778:	4a50      	ldr	r2, [pc, #320]	; (80088bc <ILI9341_Draw_Pixel+0x1ac>)
 800877a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800877e:	6153      	str	r3, [r2, #20]
	unsigned char Temp_Buffer[4] = {X>>8,X, (X+1)>>8, (X+1)};
 8008780:	88fb      	ldrh	r3, [r7, #6]
 8008782:	0a1b      	lsrs	r3, r3, #8
 8008784:	b29b      	uxth	r3, r3
 8008786:	b2db      	uxtb	r3, r3
 8008788:	753b      	strb	r3, [r7, #20]
 800878a:	88fb      	ldrh	r3, [r7, #6]
 800878c:	b2db      	uxtb	r3, r3
 800878e:	757b      	strb	r3, [r7, #21]
 8008790:	88fb      	ldrh	r3, [r7, #6]
 8008792:	3301      	adds	r3, #1
 8008794:	121b      	asrs	r3, r3, #8
 8008796:	b2db      	uxtb	r3, r3
 8008798:	75bb      	strb	r3, [r7, #22]
 800879a:	88fb      	ldrh	r3, [r7, #6]
 800879c:	b2db      	uxtb	r3, r3
 800879e:	3301      	adds	r3, #1
 80087a0:	b2db      	uxtb	r3, r3
 80087a2:	75fb      	strb	r3, [r7, #23]
	HAL_SPI_Transmit(HSPI_INSTANCE, Temp_Buffer, 4, 1);
 80087a4:	f107 0114 	add.w	r1, r7, #20
 80087a8:	2301      	movs	r3, #1
 80087aa:	2204      	movs	r2, #4
 80087ac:	4844      	ldr	r0, [pc, #272]	; (80088c0 <ILI9341_Draw_Pixel+0x1b0>)
 80087ae:	f7fd fcf1 	bl	8006194 <HAL_SPI_Transmit>
	LCD_CS_PORT->ODR |= LCD_CS_PIN;
 80087b2:	4b42      	ldr	r3, [pc, #264]	; (80088bc <ILI9341_Draw_Pixel+0x1ac>)
 80087b4:	695b      	ldr	r3, [r3, #20]
 80087b6:	4a41      	ldr	r2, [pc, #260]	; (80088bc <ILI9341_Draw_Pixel+0x1ac>)
 80087b8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80087bc:	6153      	str	r3, [r2, #20]

	//ADDRESS
	LCD_DC_PORT->ODR &= ~(LCD_DC_PIN);
 80087be:	4b3f      	ldr	r3, [pc, #252]	; (80088bc <ILI9341_Draw_Pixel+0x1ac>)
 80087c0:	695b      	ldr	r3, [r3, #20]
 80087c2:	4a3e      	ldr	r2, [pc, #248]	; (80088bc <ILI9341_Draw_Pixel+0x1ac>)
 80087c4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80087c8:	6153      	str	r3, [r2, #20]
	LCD_CS_PORT->ODR &= ~(LCD_CS_PIN);
 80087ca:	4b3c      	ldr	r3, [pc, #240]	; (80088bc <ILI9341_Draw_Pixel+0x1ac>)
 80087cc:	695b      	ldr	r3, [r3, #20]
 80087ce:	4a3b      	ldr	r2, [pc, #236]	; (80088bc <ILI9341_Draw_Pixel+0x1ac>)
 80087d0:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80087d4:	6153      	str	r3, [r2, #20]

	ILI9341_SPI_Send(0x2B);
 80087d6:	202b      	movs	r0, #43	; 0x2b
 80087d8:	f7ff fc9a 	bl	8008110 <ILI9341_SPI_Send>
	LCD_DC_PORT->ODR |= LCD_DC_PIN;
 80087dc:	4b37      	ldr	r3, [pc, #220]	; (80088bc <ILI9341_Draw_Pixel+0x1ac>)
 80087de:	695b      	ldr	r3, [r3, #20]
 80087e0:	4a36      	ldr	r2, [pc, #216]	; (80088bc <ILI9341_Draw_Pixel+0x1ac>)
 80087e2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80087e6:	6153      	str	r3, [r2, #20]
	LCD_CS_PORT->ODR |= LCD_CS_PIN;
 80087e8:	4b34      	ldr	r3, [pc, #208]	; (80088bc <ILI9341_Draw_Pixel+0x1ac>)
 80087ea:	695b      	ldr	r3, [r3, #20]
 80087ec:	4a33      	ldr	r2, [pc, #204]	; (80088bc <ILI9341_Draw_Pixel+0x1ac>)
 80087ee:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80087f2:	6153      	str	r3, [r2, #20]

	//YDATA
	LCD_CS_PORT->ODR &= ~(LCD_CS_PIN);
 80087f4:	4b31      	ldr	r3, [pc, #196]	; (80088bc <ILI9341_Draw_Pixel+0x1ac>)
 80087f6:	695b      	ldr	r3, [r3, #20]
 80087f8:	4a30      	ldr	r2, [pc, #192]	; (80088bc <ILI9341_Draw_Pixel+0x1ac>)
 80087fa:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80087fe:	6153      	str	r3, [r2, #20]
	unsigned char Temp_Buffer1[4] = {Y>>8,Y, (Y+1)>>8, (Y+1)};
 8008800:	88bb      	ldrh	r3, [r7, #4]
 8008802:	0a1b      	lsrs	r3, r3, #8
 8008804:	b29b      	uxth	r3, r3
 8008806:	b2db      	uxtb	r3, r3
 8008808:	743b      	strb	r3, [r7, #16]
 800880a:	88bb      	ldrh	r3, [r7, #4]
 800880c:	b2db      	uxtb	r3, r3
 800880e:	747b      	strb	r3, [r7, #17]
 8008810:	88bb      	ldrh	r3, [r7, #4]
 8008812:	3301      	adds	r3, #1
 8008814:	121b      	asrs	r3, r3, #8
 8008816:	b2db      	uxtb	r3, r3
 8008818:	74bb      	strb	r3, [r7, #18]
 800881a:	88bb      	ldrh	r3, [r7, #4]
 800881c:	b2db      	uxtb	r3, r3
 800881e:	3301      	adds	r3, #1
 8008820:	b2db      	uxtb	r3, r3
 8008822:	74fb      	strb	r3, [r7, #19]
	HAL_SPI_Transmit(HSPI_INSTANCE, Temp_Buffer1, 4, 1);
 8008824:	f107 0110 	add.w	r1, r7, #16
 8008828:	2301      	movs	r3, #1
 800882a:	2204      	movs	r2, #4
 800882c:	4824      	ldr	r0, [pc, #144]	; (80088c0 <ILI9341_Draw_Pixel+0x1b0>)
 800882e:	f7fd fcb1 	bl	8006194 <HAL_SPI_Transmit>
	LCD_CS_PORT->ODR |= LCD_CS_PIN;
 8008832:	4b22      	ldr	r3, [pc, #136]	; (80088bc <ILI9341_Draw_Pixel+0x1ac>)
 8008834:	695b      	ldr	r3, [r3, #20]
 8008836:	4a21      	ldr	r2, [pc, #132]	; (80088bc <ILI9341_Draw_Pixel+0x1ac>)
 8008838:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800883c:	6153      	str	r3, [r2, #20]

	//ADDRESS
	LCD_DC_PORT->ODR &= ~(LCD_DC_PIN);
 800883e:	4b1f      	ldr	r3, [pc, #124]	; (80088bc <ILI9341_Draw_Pixel+0x1ac>)
 8008840:	695b      	ldr	r3, [r3, #20]
 8008842:	4a1e      	ldr	r2, [pc, #120]	; (80088bc <ILI9341_Draw_Pixel+0x1ac>)
 8008844:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8008848:	6153      	str	r3, [r2, #20]
	LCD_CS_PORT->ODR &= ~(LCD_CS_PIN);
 800884a:	4b1c      	ldr	r3, [pc, #112]	; (80088bc <ILI9341_Draw_Pixel+0x1ac>)
 800884c:	695b      	ldr	r3, [r3, #20]
 800884e:	4a1b      	ldr	r2, [pc, #108]	; (80088bc <ILI9341_Draw_Pixel+0x1ac>)
 8008850:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8008854:	6153      	str	r3, [r2, #20]
	ILI9341_SPI_Send(0x2C);
 8008856:	202c      	movs	r0, #44	; 0x2c
 8008858:	f7ff fc5a 	bl	8008110 <ILI9341_SPI_Send>
	LCD_DC_PORT->ODR |= LCD_DC_PIN;
 800885c:	4b17      	ldr	r3, [pc, #92]	; (80088bc <ILI9341_Draw_Pixel+0x1ac>)
 800885e:	695b      	ldr	r3, [r3, #20]
 8008860:	4a16      	ldr	r2, [pc, #88]	; (80088bc <ILI9341_Draw_Pixel+0x1ac>)
 8008862:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008866:	6153      	str	r3, [r2, #20]
	LCD_CS_PORT->ODR |= LCD_CS_PIN;
 8008868:	4b14      	ldr	r3, [pc, #80]	; (80088bc <ILI9341_Draw_Pixel+0x1ac>)
 800886a:	695b      	ldr	r3, [r3, #20]
 800886c:	4a13      	ldr	r2, [pc, #76]	; (80088bc <ILI9341_Draw_Pixel+0x1ac>)
 800886e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008872:	6153      	str	r3, [r2, #20]
	
	//COLOUR
	LCD_CS_PORT->ODR &= ~(LCD_CS_PIN);
 8008874:	4b11      	ldr	r3, [pc, #68]	; (80088bc <ILI9341_Draw_Pixel+0x1ac>)
 8008876:	695b      	ldr	r3, [r3, #20]
 8008878:	4a10      	ldr	r2, [pc, #64]	; (80088bc <ILI9341_Draw_Pixel+0x1ac>)
 800887a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800887e:	6153      	str	r3, [r2, #20]
	unsigned char Temp_Buffer2[2] = {colour>>8, colour};
 8008880:	887b      	ldrh	r3, [r7, #2]
 8008882:	0a1b      	lsrs	r3, r3, #8
 8008884:	b29b      	uxth	r3, r3
 8008886:	b2db      	uxtb	r3, r3
 8008888:	733b      	strb	r3, [r7, #12]
 800888a:	887b      	ldrh	r3, [r7, #2]
 800888c:	b2db      	uxtb	r3, r3
 800888e:	737b      	strb	r3, [r7, #13]
	HAL_SPI_Transmit(HSPI_INSTANCE, Temp_Buffer2, 2, 1);
 8008890:	f107 010c 	add.w	r1, r7, #12
 8008894:	2301      	movs	r3, #1
 8008896:	2202      	movs	r2, #2
 8008898:	4809      	ldr	r0, [pc, #36]	; (80088c0 <ILI9341_Draw_Pixel+0x1b0>)
 800889a:	f7fd fc7b 	bl	8006194 <HAL_SPI_Transmit>
	LCD_CS_PORT->ODR |= LCD_CS_PIN;
 800889e:	4b07      	ldr	r3, [pc, #28]	; (80088bc <ILI9341_Draw_Pixel+0x1ac>)
 80088a0:	695b      	ldr	r3, [r3, #20]
 80088a2:	4a06      	ldr	r2, [pc, #24]	; (80088bc <ILI9341_Draw_Pixel+0x1ac>)
 80088a4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80088a8:	6153      	str	r3, [r2, #20]
 80088aa:	e000      	b.n	80088ae <ILI9341_Draw_Pixel+0x19e>
	if((X >=LCD_WIDTH) || (Y >=LCD_HEIGHT)) return;	//OUT OF BOUNDS!
 80088ac:	bf00      	nop

	
}
 80088ae:	3718      	adds	r7, #24
 80088b0:	46bd      	mov	sp, r7
 80088b2:	bd80      	pop	{r7, pc}
 80088b4:	2000001a 	.word	0x2000001a
 80088b8:	20000018 	.word	0x20000018
 80088bc:	48000400 	.word	0x48000400
 80088c0:	20000de4 	.word	0x20000de4

080088c4 <ILI9341_Draw_Rectangle>:
 *
 *
 */

void ILI9341_Draw_Rectangle(uint16_t xpos, uint16_t ypos, uint16_t width, uint16_t height, uint16_t colour, CHUNK_Type chunk_type)
{
 80088c4:	b590      	push	{r4, r7, lr}
 80088c6:	b087      	sub	sp, #28
 80088c8:	af02      	add	r7, sp, #8
 80088ca:	4604      	mov	r4, r0
 80088cc:	4608      	mov	r0, r1
 80088ce:	4611      	mov	r1, r2
 80088d0:	461a      	mov	r2, r3
 80088d2:	4623      	mov	r3, r4
 80088d4:	80fb      	strh	r3, [r7, #6]
 80088d6:	4603      	mov	r3, r0
 80088d8:	80bb      	strh	r3, [r7, #4]
 80088da:	460b      	mov	r3, r1
 80088dc:	807b      	strh	r3, [r7, #2]
 80088de:	4613      	mov	r3, r2
 80088e0:	803b      	strh	r3, [r7, #0]
	if((xpos >=LCD_WIDTH) || (ypos >=LCD_HEIGHT)) return;
 80088e2:	4b39      	ldr	r3, [pc, #228]	; (80089c8 <ILI9341_Draw_Rectangle+0x104>)
 80088e4:	881b      	ldrh	r3, [r3, #0]
 80088e6:	b29b      	uxth	r3, r3
 80088e8:	88fa      	ldrh	r2, [r7, #6]
 80088ea:	429a      	cmp	r2, r3
 80088ec:	d268      	bcs.n	80089c0 <ILI9341_Draw_Rectangle+0xfc>
 80088ee:	4b37      	ldr	r3, [pc, #220]	; (80089cc <ILI9341_Draw_Rectangle+0x108>)
 80088f0:	881b      	ldrh	r3, [r3, #0]
 80088f2:	b29b      	uxth	r3, r3
 80088f4:	88ba      	ldrh	r2, [r7, #4]
 80088f6:	429a      	cmp	r2, r3
 80088f8:	d262      	bcs.n	80089c0 <ILI9341_Draw_Rectangle+0xfc>
	if((xpos+width-1)>=LCD_WIDTH)
 80088fa:	88fa      	ldrh	r2, [r7, #6]
 80088fc:	887b      	ldrh	r3, [r7, #2]
 80088fe:	4413      	add	r3, r2
 8008900:	3b01      	subs	r3, #1
 8008902:	4a31      	ldr	r2, [pc, #196]	; (80089c8 <ILI9341_Draw_Rectangle+0x104>)
 8008904:	8812      	ldrh	r2, [r2, #0]
 8008906:	b292      	uxth	r2, r2
 8008908:	4293      	cmp	r3, r2
 800890a:	db05      	blt.n	8008918 <ILI9341_Draw_Rectangle+0x54>
		{
			width=LCD_WIDTH-xpos;
 800890c:	4b2e      	ldr	r3, [pc, #184]	; (80089c8 <ILI9341_Draw_Rectangle+0x104>)
 800890e:	881b      	ldrh	r3, [r3, #0]
 8008910:	b29a      	uxth	r2, r3
 8008912:	88fb      	ldrh	r3, [r7, #6]
 8008914:	1ad3      	subs	r3, r2, r3
 8008916:	807b      	strh	r3, [r7, #2]
		}
	if((ypos+height-1)>=LCD_HEIGHT)
 8008918:	88ba      	ldrh	r2, [r7, #4]
 800891a:	883b      	ldrh	r3, [r7, #0]
 800891c:	4413      	add	r3, r2
 800891e:	3b01      	subs	r3, #1
 8008920:	4a2a      	ldr	r2, [pc, #168]	; (80089cc <ILI9341_Draw_Rectangle+0x108>)
 8008922:	8812      	ldrh	r2, [r2, #0]
 8008924:	b292      	uxth	r2, r2
 8008926:	4293      	cmp	r3, r2
 8008928:	db05      	blt.n	8008936 <ILI9341_Draw_Rectangle+0x72>
		{
			height=LCD_HEIGHT-ypos;
 800892a:	4b28      	ldr	r3, [pc, #160]	; (80089cc <ILI9341_Draw_Rectangle+0x108>)
 800892c:	881b      	ldrh	r3, [r3, #0]
 800892e:	b29a      	uxth	r2, r3
 8008930:	88bb      	ldrh	r3, [r7, #4]
 8008932:	1ad3      	subs	r3, r2, r3
 8008934:	803b      	strh	r3, [r7, #0]
		}
	ILI9341_Set_Address(xpos,
						ypos,
						(xpos + width) - 1,
 8008936:	88fa      	ldrh	r2, [r7, #6]
 8008938:	887b      	ldrh	r3, [r7, #2]
 800893a:	4413      	add	r3, r2
 800893c:	b29b      	uxth	r3, r3
	ILI9341_Set_Address(xpos,
 800893e:	3b01      	subs	r3, #1
 8008940:	b29c      	uxth	r4, r3
						(ypos + height) - 1);
 8008942:	88ba      	ldrh	r2, [r7, #4]
 8008944:	883b      	ldrh	r3, [r7, #0]
 8008946:	4413      	add	r3, r2
 8008948:	b29b      	uxth	r3, r3
	ILI9341_Set_Address(xpos,
 800894a:	3b01      	subs	r3, #1
 800894c:	b29b      	uxth	r3, r3
 800894e:	88b9      	ldrh	r1, [r7, #4]
 8008950:	88f8      	ldrh	r0, [r7, #6]
 8008952:	4622      	mov	r2, r4
 8008954:	f7ff fc34 	bl	80081c0 <ILI9341_Set_Address>
	// if odd numbered rect area is requested, we round down to nearest even number
	// to keep ILI9341_Draw_colour_Burst() happy.

	// Note, truncated pixel will be needed at function end.

	uint16_t size = height*width;
 8008958:	883a      	ldrh	r2, [r7, #0]
 800895a:	887b      	ldrh	r3, [r7, #2]
 800895c:	fb12 f303 	smulbb	r3, r2, r3
 8008960:	81fb      	strh	r3, [r7, #14]
	uint8_t truncated = 0;
 8008962:	2300      	movs	r3, #0
 8008964:	737b      	strb	r3, [r7, #13]

	if((size & 1) && (size > 1))		// don't round down to zero!
 8008966:	89fb      	ldrh	r3, [r7, #14]
 8008968:	f003 0301 	and.w	r3, r3, #1
 800896c:	2b00      	cmp	r3, #0
 800896e:	d009      	beq.n	8008984 <ILI9341_Draw_Rectangle+0xc0>
 8008970:	89fb      	ldrh	r3, [r7, #14]
 8008972:	2b01      	cmp	r3, #1
 8008974:	d906      	bls.n	8008984 <ILI9341_Draw_Rectangle+0xc0>
	{
		truncated = 1;
 8008976:	2301      	movs	r3, #1
 8008978:	737b      	strb	r3, [r7, #13]
	 	size = ((size >> 1) * 2);
 800897a:	89fb      	ldrh	r3, [r7, #14]
 800897c:	085b      	lsrs	r3, r3, #1
 800897e:	b29b      	uxth	r3, r3
 8008980:	005b      	lsls	r3, r3, #1
 8008982:	81fb      	strh	r3, [r7, #14]
	}

	ILI9341_Draw_colour_Burst(	xpos,
 8008984:	89fc      	ldrh	r4, [r7, #14]
 8008986:	8c3a      	ldrh	r2, [r7, #32]
 8008988:	88b9      	ldrh	r1, [r7, #4]
 800898a:	88f8      	ldrh	r0, [r7, #6]
 800898c:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8008990:	9300      	str	r3, [sp, #0]
 8008992:	4623      	mov	r3, r4
 8008994:	f7ff fdea 	bl	800856c <ILI9341_Draw_colour_Burst>
								colour,
								size,
								chunk_type);

	// add the truncated pixel now
	if(truncated)
 8008998:	7b7b      	ldrb	r3, [r7, #13]
 800899a:	2b00      	cmp	r3, #0
 800899c:	d011      	beq.n	80089c2 <ILI9341_Draw_Rectangle+0xfe>
	{
		ILI9341_Draw_Pixel(	(xpos + width) - 1,
 800899e:	88fa      	ldrh	r2, [r7, #6]
 80089a0:	887b      	ldrh	r3, [r7, #2]
 80089a2:	4413      	add	r3, r2
 80089a4:	b29b      	uxth	r3, r3
 80089a6:	3b01      	subs	r3, #1
 80089a8:	b298      	uxth	r0, r3
							(ypos + height) - 1,
 80089aa:	88ba      	ldrh	r2, [r7, #4]
 80089ac:	883b      	ldrh	r3, [r7, #0]
 80089ae:	4413      	add	r3, r2
 80089b0:	b29b      	uxth	r3, r3
		ILI9341_Draw_Pixel(	(xpos + width) - 1,
 80089b2:	3b01      	subs	r3, #1
 80089b4:	b29b      	uxth	r3, r3
 80089b6:	8c3a      	ldrh	r2, [r7, #32]
 80089b8:	4619      	mov	r1, r3
 80089ba:	f7ff fea9 	bl	8008710 <ILI9341_Draw_Pixel>
 80089be:	e000      	b.n	80089c2 <ILI9341_Draw_Rectangle+0xfe>
	if((xpos >=LCD_WIDTH) || (ypos >=LCD_HEIGHT)) return;
 80089c0:	bf00      	nop
							colour);
	}
}
 80089c2:	3714      	adds	r7, #20
 80089c4:	46bd      	mov	sp, r7
 80089c6:	bd90      	pop	{r4, r7, pc}
 80089c8:	2000001a 	.word	0x2000001a
 80089cc:	20000018 	.word	0x20000018

080089d0 <ILI9341_Draw_Horizontal_Line>:
 *
 *
 */

void ILI9341_Draw_Horizontal_Line(uint16_t xpos, uint16_t ypos, uint16_t width, uint16_t colour)
{
 80089d0:	b590      	push	{r4, r7, lr}
 80089d2:	b085      	sub	sp, #20
 80089d4:	af02      	add	r7, sp, #8
 80089d6:	4604      	mov	r4, r0
 80089d8:	4608      	mov	r0, r1
 80089da:	4611      	mov	r1, r2
 80089dc:	461a      	mov	r2, r3
 80089de:	4623      	mov	r3, r4
 80089e0:	80fb      	strh	r3, [r7, #6]
 80089e2:	4603      	mov	r3, r0
 80089e4:	80bb      	strh	r3, [r7, #4]
 80089e6:	460b      	mov	r3, r1
 80089e8:	807b      	strh	r3, [r7, #2]
 80089ea:	4613      	mov	r3, r2
 80089ec:	803b      	strh	r3, [r7, #0]
	if((xpos >=LCD_WIDTH) || (ypos >=LCD_HEIGHT)) return;
 80089ee:	4b1a      	ldr	r3, [pc, #104]	; (8008a58 <ILI9341_Draw_Horizontal_Line+0x88>)
 80089f0:	881b      	ldrh	r3, [r3, #0]
 80089f2:	b29b      	uxth	r3, r3
 80089f4:	88fa      	ldrh	r2, [r7, #6]
 80089f6:	429a      	cmp	r2, r3
 80089f8:	d229      	bcs.n	8008a4e <ILI9341_Draw_Horizontal_Line+0x7e>
 80089fa:	4b18      	ldr	r3, [pc, #96]	; (8008a5c <ILI9341_Draw_Horizontal_Line+0x8c>)
 80089fc:	881b      	ldrh	r3, [r3, #0]
 80089fe:	b29b      	uxth	r3, r3
 8008a00:	88ba      	ldrh	r2, [r7, #4]
 8008a02:	429a      	cmp	r2, r3
 8008a04:	d223      	bcs.n	8008a4e <ILI9341_Draw_Horizontal_Line+0x7e>
	if(((xpos + width) - 1 ) >= LCD_WIDTH)
 8008a06:	88fa      	ldrh	r2, [r7, #6]
 8008a08:	887b      	ldrh	r3, [r7, #2]
 8008a0a:	4413      	add	r3, r2
 8008a0c:	3b01      	subs	r3, #1
 8008a0e:	4a12      	ldr	r2, [pc, #72]	; (8008a58 <ILI9341_Draw_Horizontal_Line+0x88>)
 8008a10:	8812      	ldrh	r2, [r2, #0]
 8008a12:	b292      	uxth	r2, r2
 8008a14:	4293      	cmp	r3, r2
 8008a16:	db05      	blt.n	8008a24 <ILI9341_Draw_Horizontal_Line+0x54>
		{
			width= LCD_WIDTH - xpos;
 8008a18:	4b0f      	ldr	r3, [pc, #60]	; (8008a58 <ILI9341_Draw_Horizontal_Line+0x88>)
 8008a1a:	881b      	ldrh	r3, [r3, #0]
 8008a1c:	b29a      	uxth	r2, r3
 8008a1e:	88fb      	ldrh	r3, [r7, #6]
 8008a20:	1ad3      	subs	r3, r2, r3
 8008a22:	807b      	strh	r3, [r7, #2]
		}
	ILI9341_Set_Address(	xpos,
							ypos,
							(xpos + width) - 1,
 8008a24:	88fa      	ldrh	r2, [r7, #6]
 8008a26:	887b      	ldrh	r3, [r7, #2]
 8008a28:	4413      	add	r3, r2
 8008a2a:	b29b      	uxth	r3, r3
	ILI9341_Set_Address(	xpos,
 8008a2c:	3b01      	subs	r3, #1
 8008a2e:	b29a      	uxth	r2, r3
 8008a30:	88bb      	ldrh	r3, [r7, #4]
 8008a32:	88b9      	ldrh	r1, [r7, #4]
 8008a34:	88f8      	ldrh	r0, [r7, #6]
 8008a36:	f7ff fbc3 	bl	80081c0 <ILI9341_Set_Address>
							ypos);

	ILI9341_Draw_colour_Burst(xpos, ypos, colour, width, LINE_CHUNK);
 8008a3a:	887c      	ldrh	r4, [r7, #2]
 8008a3c:	883a      	ldrh	r2, [r7, #0]
 8008a3e:	88b9      	ldrh	r1, [r7, #4]
 8008a40:	88f8      	ldrh	r0, [r7, #6]
 8008a42:	2303      	movs	r3, #3
 8008a44:	9300      	str	r3, [sp, #0]
 8008a46:	4623      	mov	r3, r4
 8008a48:	f7ff fd90 	bl	800856c <ILI9341_Draw_colour_Burst>
 8008a4c:	e000      	b.n	8008a50 <ILI9341_Draw_Horizontal_Line+0x80>
	if((xpos >=LCD_WIDTH) || (ypos >=LCD_HEIGHT)) return;
 8008a4e:	bf00      	nop
}
 8008a50:	370c      	adds	r7, #12
 8008a52:	46bd      	mov	sp, r7
 8008a54:	bd90      	pop	{r4, r7, pc}
 8008a56:	bf00      	nop
 8008a58:	2000001a 	.word	0x2000001a
 8008a5c:	20000018 	.word	0x20000018

08008a60 <ILI9341_Draw_Vertical_Line>:

//DRAW LINE FROM X,Y LOCATION to X,Y+height LOCATION
void ILI9341_Draw_Vertical_Line(uint16_t xpos, uint16_t ypos, uint16_t height, uint16_t colour)
{
 8008a60:	b590      	push	{r4, r7, lr}
 8008a62:	b085      	sub	sp, #20
 8008a64:	af02      	add	r7, sp, #8
 8008a66:	4604      	mov	r4, r0
 8008a68:	4608      	mov	r0, r1
 8008a6a:	4611      	mov	r1, r2
 8008a6c:	461a      	mov	r2, r3
 8008a6e:	4623      	mov	r3, r4
 8008a70:	80fb      	strh	r3, [r7, #6]
 8008a72:	4603      	mov	r3, r0
 8008a74:	80bb      	strh	r3, [r7, #4]
 8008a76:	460b      	mov	r3, r1
 8008a78:	807b      	strh	r3, [r7, #2]
 8008a7a:	4613      	mov	r3, r2
 8008a7c:	803b      	strh	r3, [r7, #0]
	if((xpos >= LCD_WIDTH) || (ypos >= LCD_HEIGHT)) return;
 8008a7e:	4b1a      	ldr	r3, [pc, #104]	; (8008ae8 <ILI9341_Draw_Vertical_Line+0x88>)
 8008a80:	881b      	ldrh	r3, [r3, #0]
 8008a82:	b29b      	uxth	r3, r3
 8008a84:	88fa      	ldrh	r2, [r7, #6]
 8008a86:	429a      	cmp	r2, r3
 8008a88:	d229      	bcs.n	8008ade <ILI9341_Draw_Vertical_Line+0x7e>
 8008a8a:	4b18      	ldr	r3, [pc, #96]	; (8008aec <ILI9341_Draw_Vertical_Line+0x8c>)
 8008a8c:	881b      	ldrh	r3, [r3, #0]
 8008a8e:	b29b      	uxth	r3, r3
 8008a90:	88ba      	ldrh	r2, [r7, #4]
 8008a92:	429a      	cmp	r2, r3
 8008a94:	d223      	bcs.n	8008ade <ILI9341_Draw_Vertical_Line+0x7e>
	if(((ypos + height) - 1) >= LCD_HEIGHT)
 8008a96:	88ba      	ldrh	r2, [r7, #4]
 8008a98:	887b      	ldrh	r3, [r7, #2]
 8008a9a:	4413      	add	r3, r2
 8008a9c:	3b01      	subs	r3, #1
 8008a9e:	4a13      	ldr	r2, [pc, #76]	; (8008aec <ILI9341_Draw_Vertical_Line+0x8c>)
 8008aa0:	8812      	ldrh	r2, [r2, #0]
 8008aa2:	b292      	uxth	r2, r2
 8008aa4:	4293      	cmp	r3, r2
 8008aa6:	db05      	blt.n	8008ab4 <ILI9341_Draw_Vertical_Line+0x54>
		{
			height= LCD_HEIGHT - ypos;
 8008aa8:	4b10      	ldr	r3, [pc, #64]	; (8008aec <ILI9341_Draw_Vertical_Line+0x8c>)
 8008aaa:	881b      	ldrh	r3, [r3, #0]
 8008aac:	b29a      	uxth	r2, r3
 8008aae:	88bb      	ldrh	r3, [r7, #4]
 8008ab0:	1ad3      	subs	r3, r2, r3
 8008ab2:	807b      	strh	r3, [r7, #2]
		}
	ILI9341_Set_Address(xpos, ypos, xpos, (ypos + height) - 1);
 8008ab4:	88ba      	ldrh	r2, [r7, #4]
 8008ab6:	887b      	ldrh	r3, [r7, #2]
 8008ab8:	4413      	add	r3, r2
 8008aba:	b29b      	uxth	r3, r3
 8008abc:	3b01      	subs	r3, #1
 8008abe:	b29b      	uxth	r3, r3
 8008ac0:	88fa      	ldrh	r2, [r7, #6]
 8008ac2:	88b9      	ldrh	r1, [r7, #4]
 8008ac4:	88f8      	ldrh	r0, [r7, #6]
 8008ac6:	f7ff fb7b 	bl	80081c0 <ILI9341_Set_Address>
	ILI9341_Draw_colour_Burst(xpos, ypos, colour, height, LINE_CHUNK);
 8008aca:	887c      	ldrh	r4, [r7, #2]
 8008acc:	883a      	ldrh	r2, [r7, #0]
 8008ace:	88b9      	ldrh	r1, [r7, #4]
 8008ad0:	88f8      	ldrh	r0, [r7, #6]
 8008ad2:	2303      	movs	r3, #3
 8008ad4:	9300      	str	r3, [sp, #0]
 8008ad6:	4623      	mov	r3, r4
 8008ad8:	f7ff fd48 	bl	800856c <ILI9341_Draw_colour_Burst>
 8008adc:	e000      	b.n	8008ae0 <ILI9341_Draw_Vertical_Line+0x80>
	if((xpos >= LCD_WIDTH) || (ypos >= LCD_HEIGHT)) return;
 8008ade:	bf00      	nop
}
 8008ae0:	370c      	adds	r7, #12
 8008ae2:	46bd      	mov	sp, r7
 8008ae4:	bd90      	pop	{r4, r7, pc}
 8008ae6:	bf00      	nop
 8008ae8:	2000001a 	.word	0x2000001a
 8008aec:	20000018 	.word	0x20000018

08008af0 <__errno>:
 8008af0:	4b01      	ldr	r3, [pc, #4]	; (8008af8 <__errno+0x8>)
 8008af2:	6818      	ldr	r0, [r3, #0]
 8008af4:	4770      	bx	lr
 8008af6:	bf00      	nop
 8008af8:	20000b60 	.word	0x20000b60

08008afc <__libc_init_array>:
 8008afc:	b570      	push	{r4, r5, r6, lr}
 8008afe:	4e0d      	ldr	r6, [pc, #52]	; (8008b34 <__libc_init_array+0x38>)
 8008b00:	4c0d      	ldr	r4, [pc, #52]	; (8008b38 <__libc_init_array+0x3c>)
 8008b02:	1ba4      	subs	r4, r4, r6
 8008b04:	10a4      	asrs	r4, r4, #2
 8008b06:	2500      	movs	r5, #0
 8008b08:	42a5      	cmp	r5, r4
 8008b0a:	d109      	bne.n	8008b20 <__libc_init_array+0x24>
 8008b0c:	4e0b      	ldr	r6, [pc, #44]	; (8008b3c <__libc_init_array+0x40>)
 8008b0e:	4c0c      	ldr	r4, [pc, #48]	; (8008b40 <__libc_init_array+0x44>)
 8008b10:	f000 fc88 	bl	8009424 <_init>
 8008b14:	1ba4      	subs	r4, r4, r6
 8008b16:	10a4      	asrs	r4, r4, #2
 8008b18:	2500      	movs	r5, #0
 8008b1a:	42a5      	cmp	r5, r4
 8008b1c:	d105      	bne.n	8008b2a <__libc_init_array+0x2e>
 8008b1e:	bd70      	pop	{r4, r5, r6, pc}
 8008b20:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8008b24:	4798      	blx	r3
 8008b26:	3501      	adds	r5, #1
 8008b28:	e7ee      	b.n	8008b08 <__libc_init_array+0xc>
 8008b2a:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8008b2e:	4798      	blx	r3
 8008b30:	3501      	adds	r5, #1
 8008b32:	e7f2      	b.n	8008b1a <__libc_init_array+0x1e>
 8008b34:	0800989c 	.word	0x0800989c
 8008b38:	0800989c 	.word	0x0800989c
 8008b3c:	0800989c 	.word	0x0800989c
 8008b40:	080098a0 	.word	0x080098a0

08008b44 <memset>:
 8008b44:	4402      	add	r2, r0
 8008b46:	4603      	mov	r3, r0
 8008b48:	4293      	cmp	r3, r2
 8008b4a:	d100      	bne.n	8008b4e <memset+0xa>
 8008b4c:	4770      	bx	lr
 8008b4e:	f803 1b01 	strb.w	r1, [r3], #1
 8008b52:	e7f9      	b.n	8008b48 <memset+0x4>

08008b54 <_puts_r>:
 8008b54:	b570      	push	{r4, r5, r6, lr}
 8008b56:	460e      	mov	r6, r1
 8008b58:	4605      	mov	r5, r0
 8008b5a:	b118      	cbz	r0, 8008b64 <_puts_r+0x10>
 8008b5c:	6983      	ldr	r3, [r0, #24]
 8008b5e:	b90b      	cbnz	r3, 8008b64 <_puts_r+0x10>
 8008b60:	f000 fa0c 	bl	8008f7c <__sinit>
 8008b64:	69ab      	ldr	r3, [r5, #24]
 8008b66:	68ac      	ldr	r4, [r5, #8]
 8008b68:	b913      	cbnz	r3, 8008b70 <_puts_r+0x1c>
 8008b6a:	4628      	mov	r0, r5
 8008b6c:	f000 fa06 	bl	8008f7c <__sinit>
 8008b70:	4b23      	ldr	r3, [pc, #140]	; (8008c00 <_puts_r+0xac>)
 8008b72:	429c      	cmp	r4, r3
 8008b74:	d117      	bne.n	8008ba6 <_puts_r+0x52>
 8008b76:	686c      	ldr	r4, [r5, #4]
 8008b78:	89a3      	ldrh	r3, [r4, #12]
 8008b7a:	071b      	lsls	r3, r3, #28
 8008b7c:	d51d      	bpl.n	8008bba <_puts_r+0x66>
 8008b7e:	6923      	ldr	r3, [r4, #16]
 8008b80:	b1db      	cbz	r3, 8008bba <_puts_r+0x66>
 8008b82:	3e01      	subs	r6, #1
 8008b84:	68a3      	ldr	r3, [r4, #8]
 8008b86:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8008b8a:	3b01      	subs	r3, #1
 8008b8c:	60a3      	str	r3, [r4, #8]
 8008b8e:	b9e9      	cbnz	r1, 8008bcc <_puts_r+0x78>
 8008b90:	2b00      	cmp	r3, #0
 8008b92:	da2e      	bge.n	8008bf2 <_puts_r+0x9e>
 8008b94:	4622      	mov	r2, r4
 8008b96:	210a      	movs	r1, #10
 8008b98:	4628      	mov	r0, r5
 8008b9a:	f000 f83f 	bl	8008c1c <__swbuf_r>
 8008b9e:	3001      	adds	r0, #1
 8008ba0:	d011      	beq.n	8008bc6 <_puts_r+0x72>
 8008ba2:	200a      	movs	r0, #10
 8008ba4:	e011      	b.n	8008bca <_puts_r+0x76>
 8008ba6:	4b17      	ldr	r3, [pc, #92]	; (8008c04 <_puts_r+0xb0>)
 8008ba8:	429c      	cmp	r4, r3
 8008baa:	d101      	bne.n	8008bb0 <_puts_r+0x5c>
 8008bac:	68ac      	ldr	r4, [r5, #8]
 8008bae:	e7e3      	b.n	8008b78 <_puts_r+0x24>
 8008bb0:	4b15      	ldr	r3, [pc, #84]	; (8008c08 <_puts_r+0xb4>)
 8008bb2:	429c      	cmp	r4, r3
 8008bb4:	bf08      	it	eq
 8008bb6:	68ec      	ldreq	r4, [r5, #12]
 8008bb8:	e7de      	b.n	8008b78 <_puts_r+0x24>
 8008bba:	4621      	mov	r1, r4
 8008bbc:	4628      	mov	r0, r5
 8008bbe:	f000 f87f 	bl	8008cc0 <__swsetup_r>
 8008bc2:	2800      	cmp	r0, #0
 8008bc4:	d0dd      	beq.n	8008b82 <_puts_r+0x2e>
 8008bc6:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8008bca:	bd70      	pop	{r4, r5, r6, pc}
 8008bcc:	2b00      	cmp	r3, #0
 8008bce:	da04      	bge.n	8008bda <_puts_r+0x86>
 8008bd0:	69a2      	ldr	r2, [r4, #24]
 8008bd2:	429a      	cmp	r2, r3
 8008bd4:	dc06      	bgt.n	8008be4 <_puts_r+0x90>
 8008bd6:	290a      	cmp	r1, #10
 8008bd8:	d004      	beq.n	8008be4 <_puts_r+0x90>
 8008bda:	6823      	ldr	r3, [r4, #0]
 8008bdc:	1c5a      	adds	r2, r3, #1
 8008bde:	6022      	str	r2, [r4, #0]
 8008be0:	7019      	strb	r1, [r3, #0]
 8008be2:	e7cf      	b.n	8008b84 <_puts_r+0x30>
 8008be4:	4622      	mov	r2, r4
 8008be6:	4628      	mov	r0, r5
 8008be8:	f000 f818 	bl	8008c1c <__swbuf_r>
 8008bec:	3001      	adds	r0, #1
 8008bee:	d1c9      	bne.n	8008b84 <_puts_r+0x30>
 8008bf0:	e7e9      	b.n	8008bc6 <_puts_r+0x72>
 8008bf2:	6823      	ldr	r3, [r4, #0]
 8008bf4:	200a      	movs	r0, #10
 8008bf6:	1c5a      	adds	r2, r3, #1
 8008bf8:	6022      	str	r2, [r4, #0]
 8008bfa:	7018      	strb	r0, [r3, #0]
 8008bfc:	e7e5      	b.n	8008bca <_puts_r+0x76>
 8008bfe:	bf00      	nop
 8008c00:	0800985c 	.word	0x0800985c
 8008c04:	0800987c 	.word	0x0800987c
 8008c08:	0800983c 	.word	0x0800983c

08008c0c <puts>:
 8008c0c:	4b02      	ldr	r3, [pc, #8]	; (8008c18 <puts+0xc>)
 8008c0e:	4601      	mov	r1, r0
 8008c10:	6818      	ldr	r0, [r3, #0]
 8008c12:	f7ff bf9f 	b.w	8008b54 <_puts_r>
 8008c16:	bf00      	nop
 8008c18:	20000b60 	.word	0x20000b60

08008c1c <__swbuf_r>:
 8008c1c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008c1e:	460e      	mov	r6, r1
 8008c20:	4614      	mov	r4, r2
 8008c22:	4605      	mov	r5, r0
 8008c24:	b118      	cbz	r0, 8008c2e <__swbuf_r+0x12>
 8008c26:	6983      	ldr	r3, [r0, #24]
 8008c28:	b90b      	cbnz	r3, 8008c2e <__swbuf_r+0x12>
 8008c2a:	f000 f9a7 	bl	8008f7c <__sinit>
 8008c2e:	4b21      	ldr	r3, [pc, #132]	; (8008cb4 <__swbuf_r+0x98>)
 8008c30:	429c      	cmp	r4, r3
 8008c32:	d12a      	bne.n	8008c8a <__swbuf_r+0x6e>
 8008c34:	686c      	ldr	r4, [r5, #4]
 8008c36:	69a3      	ldr	r3, [r4, #24]
 8008c38:	60a3      	str	r3, [r4, #8]
 8008c3a:	89a3      	ldrh	r3, [r4, #12]
 8008c3c:	071a      	lsls	r2, r3, #28
 8008c3e:	d52e      	bpl.n	8008c9e <__swbuf_r+0x82>
 8008c40:	6923      	ldr	r3, [r4, #16]
 8008c42:	b363      	cbz	r3, 8008c9e <__swbuf_r+0x82>
 8008c44:	6923      	ldr	r3, [r4, #16]
 8008c46:	6820      	ldr	r0, [r4, #0]
 8008c48:	1ac0      	subs	r0, r0, r3
 8008c4a:	6963      	ldr	r3, [r4, #20]
 8008c4c:	b2f6      	uxtb	r6, r6
 8008c4e:	4283      	cmp	r3, r0
 8008c50:	4637      	mov	r7, r6
 8008c52:	dc04      	bgt.n	8008c5e <__swbuf_r+0x42>
 8008c54:	4621      	mov	r1, r4
 8008c56:	4628      	mov	r0, r5
 8008c58:	f000 f926 	bl	8008ea8 <_fflush_r>
 8008c5c:	bb28      	cbnz	r0, 8008caa <__swbuf_r+0x8e>
 8008c5e:	68a3      	ldr	r3, [r4, #8]
 8008c60:	3b01      	subs	r3, #1
 8008c62:	60a3      	str	r3, [r4, #8]
 8008c64:	6823      	ldr	r3, [r4, #0]
 8008c66:	1c5a      	adds	r2, r3, #1
 8008c68:	6022      	str	r2, [r4, #0]
 8008c6a:	701e      	strb	r6, [r3, #0]
 8008c6c:	6963      	ldr	r3, [r4, #20]
 8008c6e:	3001      	adds	r0, #1
 8008c70:	4283      	cmp	r3, r0
 8008c72:	d004      	beq.n	8008c7e <__swbuf_r+0x62>
 8008c74:	89a3      	ldrh	r3, [r4, #12]
 8008c76:	07db      	lsls	r3, r3, #31
 8008c78:	d519      	bpl.n	8008cae <__swbuf_r+0x92>
 8008c7a:	2e0a      	cmp	r6, #10
 8008c7c:	d117      	bne.n	8008cae <__swbuf_r+0x92>
 8008c7e:	4621      	mov	r1, r4
 8008c80:	4628      	mov	r0, r5
 8008c82:	f000 f911 	bl	8008ea8 <_fflush_r>
 8008c86:	b190      	cbz	r0, 8008cae <__swbuf_r+0x92>
 8008c88:	e00f      	b.n	8008caa <__swbuf_r+0x8e>
 8008c8a:	4b0b      	ldr	r3, [pc, #44]	; (8008cb8 <__swbuf_r+0x9c>)
 8008c8c:	429c      	cmp	r4, r3
 8008c8e:	d101      	bne.n	8008c94 <__swbuf_r+0x78>
 8008c90:	68ac      	ldr	r4, [r5, #8]
 8008c92:	e7d0      	b.n	8008c36 <__swbuf_r+0x1a>
 8008c94:	4b09      	ldr	r3, [pc, #36]	; (8008cbc <__swbuf_r+0xa0>)
 8008c96:	429c      	cmp	r4, r3
 8008c98:	bf08      	it	eq
 8008c9a:	68ec      	ldreq	r4, [r5, #12]
 8008c9c:	e7cb      	b.n	8008c36 <__swbuf_r+0x1a>
 8008c9e:	4621      	mov	r1, r4
 8008ca0:	4628      	mov	r0, r5
 8008ca2:	f000 f80d 	bl	8008cc0 <__swsetup_r>
 8008ca6:	2800      	cmp	r0, #0
 8008ca8:	d0cc      	beq.n	8008c44 <__swbuf_r+0x28>
 8008caa:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 8008cae:	4638      	mov	r0, r7
 8008cb0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008cb2:	bf00      	nop
 8008cb4:	0800985c 	.word	0x0800985c
 8008cb8:	0800987c 	.word	0x0800987c
 8008cbc:	0800983c 	.word	0x0800983c

08008cc0 <__swsetup_r>:
 8008cc0:	4b32      	ldr	r3, [pc, #200]	; (8008d8c <__swsetup_r+0xcc>)
 8008cc2:	b570      	push	{r4, r5, r6, lr}
 8008cc4:	681d      	ldr	r5, [r3, #0]
 8008cc6:	4606      	mov	r6, r0
 8008cc8:	460c      	mov	r4, r1
 8008cca:	b125      	cbz	r5, 8008cd6 <__swsetup_r+0x16>
 8008ccc:	69ab      	ldr	r3, [r5, #24]
 8008cce:	b913      	cbnz	r3, 8008cd6 <__swsetup_r+0x16>
 8008cd0:	4628      	mov	r0, r5
 8008cd2:	f000 f953 	bl	8008f7c <__sinit>
 8008cd6:	4b2e      	ldr	r3, [pc, #184]	; (8008d90 <__swsetup_r+0xd0>)
 8008cd8:	429c      	cmp	r4, r3
 8008cda:	d10f      	bne.n	8008cfc <__swsetup_r+0x3c>
 8008cdc:	686c      	ldr	r4, [r5, #4]
 8008cde:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008ce2:	b29a      	uxth	r2, r3
 8008ce4:	0715      	lsls	r5, r2, #28
 8008ce6:	d42c      	bmi.n	8008d42 <__swsetup_r+0x82>
 8008ce8:	06d0      	lsls	r0, r2, #27
 8008cea:	d411      	bmi.n	8008d10 <__swsetup_r+0x50>
 8008cec:	2209      	movs	r2, #9
 8008cee:	6032      	str	r2, [r6, #0]
 8008cf0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008cf4:	81a3      	strh	r3, [r4, #12]
 8008cf6:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8008cfa:	e03e      	b.n	8008d7a <__swsetup_r+0xba>
 8008cfc:	4b25      	ldr	r3, [pc, #148]	; (8008d94 <__swsetup_r+0xd4>)
 8008cfe:	429c      	cmp	r4, r3
 8008d00:	d101      	bne.n	8008d06 <__swsetup_r+0x46>
 8008d02:	68ac      	ldr	r4, [r5, #8]
 8008d04:	e7eb      	b.n	8008cde <__swsetup_r+0x1e>
 8008d06:	4b24      	ldr	r3, [pc, #144]	; (8008d98 <__swsetup_r+0xd8>)
 8008d08:	429c      	cmp	r4, r3
 8008d0a:	bf08      	it	eq
 8008d0c:	68ec      	ldreq	r4, [r5, #12]
 8008d0e:	e7e6      	b.n	8008cde <__swsetup_r+0x1e>
 8008d10:	0751      	lsls	r1, r2, #29
 8008d12:	d512      	bpl.n	8008d3a <__swsetup_r+0x7a>
 8008d14:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8008d16:	b141      	cbz	r1, 8008d2a <__swsetup_r+0x6a>
 8008d18:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8008d1c:	4299      	cmp	r1, r3
 8008d1e:	d002      	beq.n	8008d26 <__swsetup_r+0x66>
 8008d20:	4630      	mov	r0, r6
 8008d22:	f000 fa19 	bl	8009158 <_free_r>
 8008d26:	2300      	movs	r3, #0
 8008d28:	6363      	str	r3, [r4, #52]	; 0x34
 8008d2a:	89a3      	ldrh	r3, [r4, #12]
 8008d2c:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8008d30:	81a3      	strh	r3, [r4, #12]
 8008d32:	2300      	movs	r3, #0
 8008d34:	6063      	str	r3, [r4, #4]
 8008d36:	6923      	ldr	r3, [r4, #16]
 8008d38:	6023      	str	r3, [r4, #0]
 8008d3a:	89a3      	ldrh	r3, [r4, #12]
 8008d3c:	f043 0308 	orr.w	r3, r3, #8
 8008d40:	81a3      	strh	r3, [r4, #12]
 8008d42:	6923      	ldr	r3, [r4, #16]
 8008d44:	b94b      	cbnz	r3, 8008d5a <__swsetup_r+0x9a>
 8008d46:	89a3      	ldrh	r3, [r4, #12]
 8008d48:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8008d4c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8008d50:	d003      	beq.n	8008d5a <__swsetup_r+0x9a>
 8008d52:	4621      	mov	r1, r4
 8008d54:	4630      	mov	r0, r6
 8008d56:	f000 f9bf 	bl	80090d8 <__smakebuf_r>
 8008d5a:	89a2      	ldrh	r2, [r4, #12]
 8008d5c:	f012 0301 	ands.w	r3, r2, #1
 8008d60:	d00c      	beq.n	8008d7c <__swsetup_r+0xbc>
 8008d62:	2300      	movs	r3, #0
 8008d64:	60a3      	str	r3, [r4, #8]
 8008d66:	6963      	ldr	r3, [r4, #20]
 8008d68:	425b      	negs	r3, r3
 8008d6a:	61a3      	str	r3, [r4, #24]
 8008d6c:	6923      	ldr	r3, [r4, #16]
 8008d6e:	b953      	cbnz	r3, 8008d86 <__swsetup_r+0xc6>
 8008d70:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008d74:	f013 0080 	ands.w	r0, r3, #128	; 0x80
 8008d78:	d1ba      	bne.n	8008cf0 <__swsetup_r+0x30>
 8008d7a:	bd70      	pop	{r4, r5, r6, pc}
 8008d7c:	0792      	lsls	r2, r2, #30
 8008d7e:	bf58      	it	pl
 8008d80:	6963      	ldrpl	r3, [r4, #20]
 8008d82:	60a3      	str	r3, [r4, #8]
 8008d84:	e7f2      	b.n	8008d6c <__swsetup_r+0xac>
 8008d86:	2000      	movs	r0, #0
 8008d88:	e7f7      	b.n	8008d7a <__swsetup_r+0xba>
 8008d8a:	bf00      	nop
 8008d8c:	20000b60 	.word	0x20000b60
 8008d90:	0800985c 	.word	0x0800985c
 8008d94:	0800987c 	.word	0x0800987c
 8008d98:	0800983c 	.word	0x0800983c

08008d9c <__sflush_r>:
 8008d9c:	898a      	ldrh	r2, [r1, #12]
 8008d9e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008da2:	4605      	mov	r5, r0
 8008da4:	0710      	lsls	r0, r2, #28
 8008da6:	460c      	mov	r4, r1
 8008da8:	d458      	bmi.n	8008e5c <__sflush_r+0xc0>
 8008daa:	684b      	ldr	r3, [r1, #4]
 8008dac:	2b00      	cmp	r3, #0
 8008dae:	dc05      	bgt.n	8008dbc <__sflush_r+0x20>
 8008db0:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8008db2:	2b00      	cmp	r3, #0
 8008db4:	dc02      	bgt.n	8008dbc <__sflush_r+0x20>
 8008db6:	2000      	movs	r0, #0
 8008db8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008dbc:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8008dbe:	2e00      	cmp	r6, #0
 8008dc0:	d0f9      	beq.n	8008db6 <__sflush_r+0x1a>
 8008dc2:	2300      	movs	r3, #0
 8008dc4:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8008dc8:	682f      	ldr	r7, [r5, #0]
 8008dca:	6a21      	ldr	r1, [r4, #32]
 8008dcc:	602b      	str	r3, [r5, #0]
 8008dce:	d032      	beq.n	8008e36 <__sflush_r+0x9a>
 8008dd0:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8008dd2:	89a3      	ldrh	r3, [r4, #12]
 8008dd4:	075a      	lsls	r2, r3, #29
 8008dd6:	d505      	bpl.n	8008de4 <__sflush_r+0x48>
 8008dd8:	6863      	ldr	r3, [r4, #4]
 8008dda:	1ac0      	subs	r0, r0, r3
 8008ddc:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8008dde:	b10b      	cbz	r3, 8008de4 <__sflush_r+0x48>
 8008de0:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8008de2:	1ac0      	subs	r0, r0, r3
 8008de4:	2300      	movs	r3, #0
 8008de6:	4602      	mov	r2, r0
 8008de8:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8008dea:	6a21      	ldr	r1, [r4, #32]
 8008dec:	4628      	mov	r0, r5
 8008dee:	47b0      	blx	r6
 8008df0:	1c43      	adds	r3, r0, #1
 8008df2:	89a3      	ldrh	r3, [r4, #12]
 8008df4:	d106      	bne.n	8008e04 <__sflush_r+0x68>
 8008df6:	6829      	ldr	r1, [r5, #0]
 8008df8:	291d      	cmp	r1, #29
 8008dfa:	d848      	bhi.n	8008e8e <__sflush_r+0xf2>
 8008dfc:	4a29      	ldr	r2, [pc, #164]	; (8008ea4 <__sflush_r+0x108>)
 8008dfe:	40ca      	lsrs	r2, r1
 8008e00:	07d6      	lsls	r6, r2, #31
 8008e02:	d544      	bpl.n	8008e8e <__sflush_r+0xf2>
 8008e04:	2200      	movs	r2, #0
 8008e06:	6062      	str	r2, [r4, #4]
 8008e08:	04d9      	lsls	r1, r3, #19
 8008e0a:	6922      	ldr	r2, [r4, #16]
 8008e0c:	6022      	str	r2, [r4, #0]
 8008e0e:	d504      	bpl.n	8008e1a <__sflush_r+0x7e>
 8008e10:	1c42      	adds	r2, r0, #1
 8008e12:	d101      	bne.n	8008e18 <__sflush_r+0x7c>
 8008e14:	682b      	ldr	r3, [r5, #0]
 8008e16:	b903      	cbnz	r3, 8008e1a <__sflush_r+0x7e>
 8008e18:	6560      	str	r0, [r4, #84]	; 0x54
 8008e1a:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8008e1c:	602f      	str	r7, [r5, #0]
 8008e1e:	2900      	cmp	r1, #0
 8008e20:	d0c9      	beq.n	8008db6 <__sflush_r+0x1a>
 8008e22:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8008e26:	4299      	cmp	r1, r3
 8008e28:	d002      	beq.n	8008e30 <__sflush_r+0x94>
 8008e2a:	4628      	mov	r0, r5
 8008e2c:	f000 f994 	bl	8009158 <_free_r>
 8008e30:	2000      	movs	r0, #0
 8008e32:	6360      	str	r0, [r4, #52]	; 0x34
 8008e34:	e7c0      	b.n	8008db8 <__sflush_r+0x1c>
 8008e36:	2301      	movs	r3, #1
 8008e38:	4628      	mov	r0, r5
 8008e3a:	47b0      	blx	r6
 8008e3c:	1c41      	adds	r1, r0, #1
 8008e3e:	d1c8      	bne.n	8008dd2 <__sflush_r+0x36>
 8008e40:	682b      	ldr	r3, [r5, #0]
 8008e42:	2b00      	cmp	r3, #0
 8008e44:	d0c5      	beq.n	8008dd2 <__sflush_r+0x36>
 8008e46:	2b1d      	cmp	r3, #29
 8008e48:	d001      	beq.n	8008e4e <__sflush_r+0xb2>
 8008e4a:	2b16      	cmp	r3, #22
 8008e4c:	d101      	bne.n	8008e52 <__sflush_r+0xb6>
 8008e4e:	602f      	str	r7, [r5, #0]
 8008e50:	e7b1      	b.n	8008db6 <__sflush_r+0x1a>
 8008e52:	89a3      	ldrh	r3, [r4, #12]
 8008e54:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008e58:	81a3      	strh	r3, [r4, #12]
 8008e5a:	e7ad      	b.n	8008db8 <__sflush_r+0x1c>
 8008e5c:	690f      	ldr	r7, [r1, #16]
 8008e5e:	2f00      	cmp	r7, #0
 8008e60:	d0a9      	beq.n	8008db6 <__sflush_r+0x1a>
 8008e62:	0793      	lsls	r3, r2, #30
 8008e64:	680e      	ldr	r6, [r1, #0]
 8008e66:	bf08      	it	eq
 8008e68:	694b      	ldreq	r3, [r1, #20]
 8008e6a:	600f      	str	r7, [r1, #0]
 8008e6c:	bf18      	it	ne
 8008e6e:	2300      	movne	r3, #0
 8008e70:	eba6 0807 	sub.w	r8, r6, r7
 8008e74:	608b      	str	r3, [r1, #8]
 8008e76:	f1b8 0f00 	cmp.w	r8, #0
 8008e7a:	dd9c      	ble.n	8008db6 <__sflush_r+0x1a>
 8008e7c:	4643      	mov	r3, r8
 8008e7e:	463a      	mov	r2, r7
 8008e80:	6a21      	ldr	r1, [r4, #32]
 8008e82:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8008e84:	4628      	mov	r0, r5
 8008e86:	47b0      	blx	r6
 8008e88:	2800      	cmp	r0, #0
 8008e8a:	dc06      	bgt.n	8008e9a <__sflush_r+0xfe>
 8008e8c:	89a3      	ldrh	r3, [r4, #12]
 8008e8e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008e92:	81a3      	strh	r3, [r4, #12]
 8008e94:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8008e98:	e78e      	b.n	8008db8 <__sflush_r+0x1c>
 8008e9a:	4407      	add	r7, r0
 8008e9c:	eba8 0800 	sub.w	r8, r8, r0
 8008ea0:	e7e9      	b.n	8008e76 <__sflush_r+0xda>
 8008ea2:	bf00      	nop
 8008ea4:	20400001 	.word	0x20400001

08008ea8 <_fflush_r>:
 8008ea8:	b538      	push	{r3, r4, r5, lr}
 8008eaa:	690b      	ldr	r3, [r1, #16]
 8008eac:	4605      	mov	r5, r0
 8008eae:	460c      	mov	r4, r1
 8008eb0:	b1db      	cbz	r3, 8008eea <_fflush_r+0x42>
 8008eb2:	b118      	cbz	r0, 8008ebc <_fflush_r+0x14>
 8008eb4:	6983      	ldr	r3, [r0, #24]
 8008eb6:	b90b      	cbnz	r3, 8008ebc <_fflush_r+0x14>
 8008eb8:	f000 f860 	bl	8008f7c <__sinit>
 8008ebc:	4b0c      	ldr	r3, [pc, #48]	; (8008ef0 <_fflush_r+0x48>)
 8008ebe:	429c      	cmp	r4, r3
 8008ec0:	d109      	bne.n	8008ed6 <_fflush_r+0x2e>
 8008ec2:	686c      	ldr	r4, [r5, #4]
 8008ec4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008ec8:	b17b      	cbz	r3, 8008eea <_fflush_r+0x42>
 8008eca:	4621      	mov	r1, r4
 8008ecc:	4628      	mov	r0, r5
 8008ece:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8008ed2:	f7ff bf63 	b.w	8008d9c <__sflush_r>
 8008ed6:	4b07      	ldr	r3, [pc, #28]	; (8008ef4 <_fflush_r+0x4c>)
 8008ed8:	429c      	cmp	r4, r3
 8008eda:	d101      	bne.n	8008ee0 <_fflush_r+0x38>
 8008edc:	68ac      	ldr	r4, [r5, #8]
 8008ede:	e7f1      	b.n	8008ec4 <_fflush_r+0x1c>
 8008ee0:	4b05      	ldr	r3, [pc, #20]	; (8008ef8 <_fflush_r+0x50>)
 8008ee2:	429c      	cmp	r4, r3
 8008ee4:	bf08      	it	eq
 8008ee6:	68ec      	ldreq	r4, [r5, #12]
 8008ee8:	e7ec      	b.n	8008ec4 <_fflush_r+0x1c>
 8008eea:	2000      	movs	r0, #0
 8008eec:	bd38      	pop	{r3, r4, r5, pc}
 8008eee:	bf00      	nop
 8008ef0:	0800985c 	.word	0x0800985c
 8008ef4:	0800987c 	.word	0x0800987c
 8008ef8:	0800983c 	.word	0x0800983c

08008efc <std>:
 8008efc:	2300      	movs	r3, #0
 8008efe:	b510      	push	{r4, lr}
 8008f00:	4604      	mov	r4, r0
 8008f02:	e9c0 3300 	strd	r3, r3, [r0]
 8008f06:	6083      	str	r3, [r0, #8]
 8008f08:	8181      	strh	r1, [r0, #12]
 8008f0a:	6643      	str	r3, [r0, #100]	; 0x64
 8008f0c:	81c2      	strh	r2, [r0, #14]
 8008f0e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8008f12:	6183      	str	r3, [r0, #24]
 8008f14:	4619      	mov	r1, r3
 8008f16:	2208      	movs	r2, #8
 8008f18:	305c      	adds	r0, #92	; 0x5c
 8008f1a:	f7ff fe13 	bl	8008b44 <memset>
 8008f1e:	4b05      	ldr	r3, [pc, #20]	; (8008f34 <std+0x38>)
 8008f20:	6263      	str	r3, [r4, #36]	; 0x24
 8008f22:	4b05      	ldr	r3, [pc, #20]	; (8008f38 <std+0x3c>)
 8008f24:	62a3      	str	r3, [r4, #40]	; 0x28
 8008f26:	4b05      	ldr	r3, [pc, #20]	; (8008f3c <std+0x40>)
 8008f28:	62e3      	str	r3, [r4, #44]	; 0x2c
 8008f2a:	4b05      	ldr	r3, [pc, #20]	; (8008f40 <std+0x44>)
 8008f2c:	6224      	str	r4, [r4, #32]
 8008f2e:	6323      	str	r3, [r4, #48]	; 0x30
 8008f30:	bd10      	pop	{r4, pc}
 8008f32:	bf00      	nop
 8008f34:	080092c9 	.word	0x080092c9
 8008f38:	080092eb 	.word	0x080092eb
 8008f3c:	08009323 	.word	0x08009323
 8008f40:	08009347 	.word	0x08009347

08008f44 <_cleanup_r>:
 8008f44:	4901      	ldr	r1, [pc, #4]	; (8008f4c <_cleanup_r+0x8>)
 8008f46:	f000 b885 	b.w	8009054 <_fwalk_reent>
 8008f4a:	bf00      	nop
 8008f4c:	08008ea9 	.word	0x08008ea9

08008f50 <__sfmoreglue>:
 8008f50:	b570      	push	{r4, r5, r6, lr}
 8008f52:	1e4a      	subs	r2, r1, #1
 8008f54:	2568      	movs	r5, #104	; 0x68
 8008f56:	4355      	muls	r5, r2
 8008f58:	460e      	mov	r6, r1
 8008f5a:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8008f5e:	f000 f949 	bl	80091f4 <_malloc_r>
 8008f62:	4604      	mov	r4, r0
 8008f64:	b140      	cbz	r0, 8008f78 <__sfmoreglue+0x28>
 8008f66:	2100      	movs	r1, #0
 8008f68:	e9c0 1600 	strd	r1, r6, [r0]
 8008f6c:	300c      	adds	r0, #12
 8008f6e:	60a0      	str	r0, [r4, #8]
 8008f70:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8008f74:	f7ff fde6 	bl	8008b44 <memset>
 8008f78:	4620      	mov	r0, r4
 8008f7a:	bd70      	pop	{r4, r5, r6, pc}

08008f7c <__sinit>:
 8008f7c:	6983      	ldr	r3, [r0, #24]
 8008f7e:	b510      	push	{r4, lr}
 8008f80:	4604      	mov	r4, r0
 8008f82:	bb33      	cbnz	r3, 8008fd2 <__sinit+0x56>
 8008f84:	e9c0 3312 	strd	r3, r3, [r0, #72]	; 0x48
 8008f88:	6503      	str	r3, [r0, #80]	; 0x50
 8008f8a:	4b12      	ldr	r3, [pc, #72]	; (8008fd4 <__sinit+0x58>)
 8008f8c:	4a12      	ldr	r2, [pc, #72]	; (8008fd8 <__sinit+0x5c>)
 8008f8e:	681b      	ldr	r3, [r3, #0]
 8008f90:	6282      	str	r2, [r0, #40]	; 0x28
 8008f92:	4298      	cmp	r0, r3
 8008f94:	bf04      	itt	eq
 8008f96:	2301      	moveq	r3, #1
 8008f98:	6183      	streq	r3, [r0, #24]
 8008f9a:	f000 f81f 	bl	8008fdc <__sfp>
 8008f9e:	6060      	str	r0, [r4, #4]
 8008fa0:	4620      	mov	r0, r4
 8008fa2:	f000 f81b 	bl	8008fdc <__sfp>
 8008fa6:	60a0      	str	r0, [r4, #8]
 8008fa8:	4620      	mov	r0, r4
 8008faa:	f000 f817 	bl	8008fdc <__sfp>
 8008fae:	2200      	movs	r2, #0
 8008fb0:	60e0      	str	r0, [r4, #12]
 8008fb2:	2104      	movs	r1, #4
 8008fb4:	6860      	ldr	r0, [r4, #4]
 8008fb6:	f7ff ffa1 	bl	8008efc <std>
 8008fba:	2201      	movs	r2, #1
 8008fbc:	2109      	movs	r1, #9
 8008fbe:	68a0      	ldr	r0, [r4, #8]
 8008fc0:	f7ff ff9c 	bl	8008efc <std>
 8008fc4:	2202      	movs	r2, #2
 8008fc6:	2112      	movs	r1, #18
 8008fc8:	68e0      	ldr	r0, [r4, #12]
 8008fca:	f7ff ff97 	bl	8008efc <std>
 8008fce:	2301      	movs	r3, #1
 8008fd0:	61a3      	str	r3, [r4, #24]
 8008fd2:	bd10      	pop	{r4, pc}
 8008fd4:	08009838 	.word	0x08009838
 8008fd8:	08008f45 	.word	0x08008f45

08008fdc <__sfp>:
 8008fdc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008fde:	4b1b      	ldr	r3, [pc, #108]	; (800904c <__sfp+0x70>)
 8008fe0:	681e      	ldr	r6, [r3, #0]
 8008fe2:	69b3      	ldr	r3, [r6, #24]
 8008fe4:	4607      	mov	r7, r0
 8008fe6:	b913      	cbnz	r3, 8008fee <__sfp+0x12>
 8008fe8:	4630      	mov	r0, r6
 8008fea:	f7ff ffc7 	bl	8008f7c <__sinit>
 8008fee:	3648      	adds	r6, #72	; 0x48
 8008ff0:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8008ff4:	3b01      	subs	r3, #1
 8008ff6:	d503      	bpl.n	8009000 <__sfp+0x24>
 8008ff8:	6833      	ldr	r3, [r6, #0]
 8008ffa:	b133      	cbz	r3, 800900a <__sfp+0x2e>
 8008ffc:	6836      	ldr	r6, [r6, #0]
 8008ffe:	e7f7      	b.n	8008ff0 <__sfp+0x14>
 8009000:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8009004:	b16d      	cbz	r5, 8009022 <__sfp+0x46>
 8009006:	3468      	adds	r4, #104	; 0x68
 8009008:	e7f4      	b.n	8008ff4 <__sfp+0x18>
 800900a:	2104      	movs	r1, #4
 800900c:	4638      	mov	r0, r7
 800900e:	f7ff ff9f 	bl	8008f50 <__sfmoreglue>
 8009012:	6030      	str	r0, [r6, #0]
 8009014:	2800      	cmp	r0, #0
 8009016:	d1f1      	bne.n	8008ffc <__sfp+0x20>
 8009018:	230c      	movs	r3, #12
 800901a:	603b      	str	r3, [r7, #0]
 800901c:	4604      	mov	r4, r0
 800901e:	4620      	mov	r0, r4
 8009020:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8009022:	4b0b      	ldr	r3, [pc, #44]	; (8009050 <__sfp+0x74>)
 8009024:	6665      	str	r5, [r4, #100]	; 0x64
 8009026:	e9c4 5500 	strd	r5, r5, [r4]
 800902a:	60a5      	str	r5, [r4, #8]
 800902c:	e9c4 3503 	strd	r3, r5, [r4, #12]
 8009030:	e9c4 5505 	strd	r5, r5, [r4, #20]
 8009034:	2208      	movs	r2, #8
 8009036:	4629      	mov	r1, r5
 8009038:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800903c:	f7ff fd82 	bl	8008b44 <memset>
 8009040:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8009044:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8009048:	e7e9      	b.n	800901e <__sfp+0x42>
 800904a:	bf00      	nop
 800904c:	08009838 	.word	0x08009838
 8009050:	ffff0001 	.word	0xffff0001

08009054 <_fwalk_reent>:
 8009054:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8009058:	4680      	mov	r8, r0
 800905a:	4689      	mov	r9, r1
 800905c:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8009060:	2600      	movs	r6, #0
 8009062:	b914      	cbnz	r4, 800906a <_fwalk_reent+0x16>
 8009064:	4630      	mov	r0, r6
 8009066:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800906a:	e9d4 7501 	ldrd	r7, r5, [r4, #4]
 800906e:	3f01      	subs	r7, #1
 8009070:	d501      	bpl.n	8009076 <_fwalk_reent+0x22>
 8009072:	6824      	ldr	r4, [r4, #0]
 8009074:	e7f5      	b.n	8009062 <_fwalk_reent+0xe>
 8009076:	89ab      	ldrh	r3, [r5, #12]
 8009078:	2b01      	cmp	r3, #1
 800907a:	d907      	bls.n	800908c <_fwalk_reent+0x38>
 800907c:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8009080:	3301      	adds	r3, #1
 8009082:	d003      	beq.n	800908c <_fwalk_reent+0x38>
 8009084:	4629      	mov	r1, r5
 8009086:	4640      	mov	r0, r8
 8009088:	47c8      	blx	r9
 800908a:	4306      	orrs	r6, r0
 800908c:	3568      	adds	r5, #104	; 0x68
 800908e:	e7ee      	b.n	800906e <_fwalk_reent+0x1a>

08009090 <__swhatbuf_r>:
 8009090:	b570      	push	{r4, r5, r6, lr}
 8009092:	460e      	mov	r6, r1
 8009094:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009098:	2900      	cmp	r1, #0
 800909a:	b096      	sub	sp, #88	; 0x58
 800909c:	4614      	mov	r4, r2
 800909e:	461d      	mov	r5, r3
 80090a0:	da07      	bge.n	80090b2 <__swhatbuf_r+0x22>
 80090a2:	2300      	movs	r3, #0
 80090a4:	602b      	str	r3, [r5, #0]
 80090a6:	89b3      	ldrh	r3, [r6, #12]
 80090a8:	061a      	lsls	r2, r3, #24
 80090aa:	d410      	bmi.n	80090ce <__swhatbuf_r+0x3e>
 80090ac:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80090b0:	e00e      	b.n	80090d0 <__swhatbuf_r+0x40>
 80090b2:	466a      	mov	r2, sp
 80090b4:	f000 f96e 	bl	8009394 <_fstat_r>
 80090b8:	2800      	cmp	r0, #0
 80090ba:	dbf2      	blt.n	80090a2 <__swhatbuf_r+0x12>
 80090bc:	9a01      	ldr	r2, [sp, #4]
 80090be:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 80090c2:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 80090c6:	425a      	negs	r2, r3
 80090c8:	415a      	adcs	r2, r3
 80090ca:	602a      	str	r2, [r5, #0]
 80090cc:	e7ee      	b.n	80090ac <__swhatbuf_r+0x1c>
 80090ce:	2340      	movs	r3, #64	; 0x40
 80090d0:	2000      	movs	r0, #0
 80090d2:	6023      	str	r3, [r4, #0]
 80090d4:	b016      	add	sp, #88	; 0x58
 80090d6:	bd70      	pop	{r4, r5, r6, pc}

080090d8 <__smakebuf_r>:
 80090d8:	898b      	ldrh	r3, [r1, #12]
 80090da:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80090dc:	079d      	lsls	r5, r3, #30
 80090de:	4606      	mov	r6, r0
 80090e0:	460c      	mov	r4, r1
 80090e2:	d507      	bpl.n	80090f4 <__smakebuf_r+0x1c>
 80090e4:	f104 0347 	add.w	r3, r4, #71	; 0x47
 80090e8:	6023      	str	r3, [r4, #0]
 80090ea:	6123      	str	r3, [r4, #16]
 80090ec:	2301      	movs	r3, #1
 80090ee:	6163      	str	r3, [r4, #20]
 80090f0:	b002      	add	sp, #8
 80090f2:	bd70      	pop	{r4, r5, r6, pc}
 80090f4:	ab01      	add	r3, sp, #4
 80090f6:	466a      	mov	r2, sp
 80090f8:	f7ff ffca 	bl	8009090 <__swhatbuf_r>
 80090fc:	9900      	ldr	r1, [sp, #0]
 80090fe:	4605      	mov	r5, r0
 8009100:	4630      	mov	r0, r6
 8009102:	f000 f877 	bl	80091f4 <_malloc_r>
 8009106:	b948      	cbnz	r0, 800911c <__smakebuf_r+0x44>
 8009108:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800910c:	059a      	lsls	r2, r3, #22
 800910e:	d4ef      	bmi.n	80090f0 <__smakebuf_r+0x18>
 8009110:	f023 0303 	bic.w	r3, r3, #3
 8009114:	f043 0302 	orr.w	r3, r3, #2
 8009118:	81a3      	strh	r3, [r4, #12]
 800911a:	e7e3      	b.n	80090e4 <__smakebuf_r+0xc>
 800911c:	4b0d      	ldr	r3, [pc, #52]	; (8009154 <__smakebuf_r+0x7c>)
 800911e:	62b3      	str	r3, [r6, #40]	; 0x28
 8009120:	89a3      	ldrh	r3, [r4, #12]
 8009122:	6020      	str	r0, [r4, #0]
 8009124:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009128:	81a3      	strh	r3, [r4, #12]
 800912a:	9b00      	ldr	r3, [sp, #0]
 800912c:	6163      	str	r3, [r4, #20]
 800912e:	9b01      	ldr	r3, [sp, #4]
 8009130:	6120      	str	r0, [r4, #16]
 8009132:	b15b      	cbz	r3, 800914c <__smakebuf_r+0x74>
 8009134:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8009138:	4630      	mov	r0, r6
 800913a:	f000 f93d 	bl	80093b8 <_isatty_r>
 800913e:	b128      	cbz	r0, 800914c <__smakebuf_r+0x74>
 8009140:	89a3      	ldrh	r3, [r4, #12]
 8009142:	f023 0303 	bic.w	r3, r3, #3
 8009146:	f043 0301 	orr.w	r3, r3, #1
 800914a:	81a3      	strh	r3, [r4, #12]
 800914c:	89a3      	ldrh	r3, [r4, #12]
 800914e:	431d      	orrs	r5, r3
 8009150:	81a5      	strh	r5, [r4, #12]
 8009152:	e7cd      	b.n	80090f0 <__smakebuf_r+0x18>
 8009154:	08008f45 	.word	0x08008f45

08009158 <_free_r>:
 8009158:	b538      	push	{r3, r4, r5, lr}
 800915a:	4605      	mov	r5, r0
 800915c:	2900      	cmp	r1, #0
 800915e:	d045      	beq.n	80091ec <_free_r+0x94>
 8009160:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8009164:	1f0c      	subs	r4, r1, #4
 8009166:	2b00      	cmp	r3, #0
 8009168:	bfb8      	it	lt
 800916a:	18e4      	addlt	r4, r4, r3
 800916c:	f000 f946 	bl	80093fc <__malloc_lock>
 8009170:	4a1f      	ldr	r2, [pc, #124]	; (80091f0 <_free_r+0x98>)
 8009172:	6813      	ldr	r3, [r2, #0]
 8009174:	4610      	mov	r0, r2
 8009176:	b933      	cbnz	r3, 8009186 <_free_r+0x2e>
 8009178:	6063      	str	r3, [r4, #4]
 800917a:	6014      	str	r4, [r2, #0]
 800917c:	4628      	mov	r0, r5
 800917e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8009182:	f000 b93c 	b.w	80093fe <__malloc_unlock>
 8009186:	42a3      	cmp	r3, r4
 8009188:	d90c      	bls.n	80091a4 <_free_r+0x4c>
 800918a:	6821      	ldr	r1, [r4, #0]
 800918c:	1862      	adds	r2, r4, r1
 800918e:	4293      	cmp	r3, r2
 8009190:	bf04      	itt	eq
 8009192:	681a      	ldreq	r2, [r3, #0]
 8009194:	685b      	ldreq	r3, [r3, #4]
 8009196:	6063      	str	r3, [r4, #4]
 8009198:	bf04      	itt	eq
 800919a:	1852      	addeq	r2, r2, r1
 800919c:	6022      	streq	r2, [r4, #0]
 800919e:	6004      	str	r4, [r0, #0]
 80091a0:	e7ec      	b.n	800917c <_free_r+0x24>
 80091a2:	4613      	mov	r3, r2
 80091a4:	685a      	ldr	r2, [r3, #4]
 80091a6:	b10a      	cbz	r2, 80091ac <_free_r+0x54>
 80091a8:	42a2      	cmp	r2, r4
 80091aa:	d9fa      	bls.n	80091a2 <_free_r+0x4a>
 80091ac:	6819      	ldr	r1, [r3, #0]
 80091ae:	1858      	adds	r0, r3, r1
 80091b0:	42a0      	cmp	r0, r4
 80091b2:	d10b      	bne.n	80091cc <_free_r+0x74>
 80091b4:	6820      	ldr	r0, [r4, #0]
 80091b6:	4401      	add	r1, r0
 80091b8:	1858      	adds	r0, r3, r1
 80091ba:	4282      	cmp	r2, r0
 80091bc:	6019      	str	r1, [r3, #0]
 80091be:	d1dd      	bne.n	800917c <_free_r+0x24>
 80091c0:	6810      	ldr	r0, [r2, #0]
 80091c2:	6852      	ldr	r2, [r2, #4]
 80091c4:	605a      	str	r2, [r3, #4]
 80091c6:	4401      	add	r1, r0
 80091c8:	6019      	str	r1, [r3, #0]
 80091ca:	e7d7      	b.n	800917c <_free_r+0x24>
 80091cc:	d902      	bls.n	80091d4 <_free_r+0x7c>
 80091ce:	230c      	movs	r3, #12
 80091d0:	602b      	str	r3, [r5, #0]
 80091d2:	e7d3      	b.n	800917c <_free_r+0x24>
 80091d4:	6820      	ldr	r0, [r4, #0]
 80091d6:	1821      	adds	r1, r4, r0
 80091d8:	428a      	cmp	r2, r1
 80091da:	bf04      	itt	eq
 80091dc:	6811      	ldreq	r1, [r2, #0]
 80091de:	6852      	ldreq	r2, [r2, #4]
 80091e0:	6062      	str	r2, [r4, #4]
 80091e2:	bf04      	itt	eq
 80091e4:	1809      	addeq	r1, r1, r0
 80091e6:	6021      	streq	r1, [r4, #0]
 80091e8:	605c      	str	r4, [r3, #4]
 80091ea:	e7c7      	b.n	800917c <_free_r+0x24>
 80091ec:	bd38      	pop	{r3, r4, r5, pc}
 80091ee:	bf00      	nop
 80091f0:	20000bf8 	.word	0x20000bf8

080091f4 <_malloc_r>:
 80091f4:	b570      	push	{r4, r5, r6, lr}
 80091f6:	1ccd      	adds	r5, r1, #3
 80091f8:	f025 0503 	bic.w	r5, r5, #3
 80091fc:	3508      	adds	r5, #8
 80091fe:	2d0c      	cmp	r5, #12
 8009200:	bf38      	it	cc
 8009202:	250c      	movcc	r5, #12
 8009204:	2d00      	cmp	r5, #0
 8009206:	4606      	mov	r6, r0
 8009208:	db01      	blt.n	800920e <_malloc_r+0x1a>
 800920a:	42a9      	cmp	r1, r5
 800920c:	d903      	bls.n	8009216 <_malloc_r+0x22>
 800920e:	230c      	movs	r3, #12
 8009210:	6033      	str	r3, [r6, #0]
 8009212:	2000      	movs	r0, #0
 8009214:	bd70      	pop	{r4, r5, r6, pc}
 8009216:	f000 f8f1 	bl	80093fc <__malloc_lock>
 800921a:	4a21      	ldr	r2, [pc, #132]	; (80092a0 <_malloc_r+0xac>)
 800921c:	6814      	ldr	r4, [r2, #0]
 800921e:	4621      	mov	r1, r4
 8009220:	b991      	cbnz	r1, 8009248 <_malloc_r+0x54>
 8009222:	4c20      	ldr	r4, [pc, #128]	; (80092a4 <_malloc_r+0xb0>)
 8009224:	6823      	ldr	r3, [r4, #0]
 8009226:	b91b      	cbnz	r3, 8009230 <_malloc_r+0x3c>
 8009228:	4630      	mov	r0, r6
 800922a:	f000 f83d 	bl	80092a8 <_sbrk_r>
 800922e:	6020      	str	r0, [r4, #0]
 8009230:	4629      	mov	r1, r5
 8009232:	4630      	mov	r0, r6
 8009234:	f000 f838 	bl	80092a8 <_sbrk_r>
 8009238:	1c43      	adds	r3, r0, #1
 800923a:	d124      	bne.n	8009286 <_malloc_r+0x92>
 800923c:	230c      	movs	r3, #12
 800923e:	6033      	str	r3, [r6, #0]
 8009240:	4630      	mov	r0, r6
 8009242:	f000 f8dc 	bl	80093fe <__malloc_unlock>
 8009246:	e7e4      	b.n	8009212 <_malloc_r+0x1e>
 8009248:	680b      	ldr	r3, [r1, #0]
 800924a:	1b5b      	subs	r3, r3, r5
 800924c:	d418      	bmi.n	8009280 <_malloc_r+0x8c>
 800924e:	2b0b      	cmp	r3, #11
 8009250:	d90f      	bls.n	8009272 <_malloc_r+0x7e>
 8009252:	600b      	str	r3, [r1, #0]
 8009254:	50cd      	str	r5, [r1, r3]
 8009256:	18cc      	adds	r4, r1, r3
 8009258:	4630      	mov	r0, r6
 800925a:	f000 f8d0 	bl	80093fe <__malloc_unlock>
 800925e:	f104 000b 	add.w	r0, r4, #11
 8009262:	1d23      	adds	r3, r4, #4
 8009264:	f020 0007 	bic.w	r0, r0, #7
 8009268:	1ac3      	subs	r3, r0, r3
 800926a:	d0d3      	beq.n	8009214 <_malloc_r+0x20>
 800926c:	425a      	negs	r2, r3
 800926e:	50e2      	str	r2, [r4, r3]
 8009270:	e7d0      	b.n	8009214 <_malloc_r+0x20>
 8009272:	428c      	cmp	r4, r1
 8009274:	684b      	ldr	r3, [r1, #4]
 8009276:	bf16      	itet	ne
 8009278:	6063      	strne	r3, [r4, #4]
 800927a:	6013      	streq	r3, [r2, #0]
 800927c:	460c      	movne	r4, r1
 800927e:	e7eb      	b.n	8009258 <_malloc_r+0x64>
 8009280:	460c      	mov	r4, r1
 8009282:	6849      	ldr	r1, [r1, #4]
 8009284:	e7cc      	b.n	8009220 <_malloc_r+0x2c>
 8009286:	1cc4      	adds	r4, r0, #3
 8009288:	f024 0403 	bic.w	r4, r4, #3
 800928c:	42a0      	cmp	r0, r4
 800928e:	d005      	beq.n	800929c <_malloc_r+0xa8>
 8009290:	1a21      	subs	r1, r4, r0
 8009292:	4630      	mov	r0, r6
 8009294:	f000 f808 	bl	80092a8 <_sbrk_r>
 8009298:	3001      	adds	r0, #1
 800929a:	d0cf      	beq.n	800923c <_malloc_r+0x48>
 800929c:	6025      	str	r5, [r4, #0]
 800929e:	e7db      	b.n	8009258 <_malloc_r+0x64>
 80092a0:	20000bf8 	.word	0x20000bf8
 80092a4:	20000bfc 	.word	0x20000bfc

080092a8 <_sbrk_r>:
 80092a8:	b538      	push	{r3, r4, r5, lr}
 80092aa:	4c06      	ldr	r4, [pc, #24]	; (80092c4 <_sbrk_r+0x1c>)
 80092ac:	2300      	movs	r3, #0
 80092ae:	4605      	mov	r5, r0
 80092b0:	4608      	mov	r0, r1
 80092b2:	6023      	str	r3, [r4, #0]
 80092b4:	f7f8 fdca 	bl	8001e4c <_sbrk>
 80092b8:	1c43      	adds	r3, r0, #1
 80092ba:	d102      	bne.n	80092c2 <_sbrk_r+0x1a>
 80092bc:	6823      	ldr	r3, [r4, #0]
 80092be:	b103      	cbz	r3, 80092c2 <_sbrk_r+0x1a>
 80092c0:	602b      	str	r3, [r5, #0]
 80092c2:	bd38      	pop	{r3, r4, r5, pc}
 80092c4:	20001060 	.word	0x20001060

080092c8 <__sread>:
 80092c8:	b510      	push	{r4, lr}
 80092ca:	460c      	mov	r4, r1
 80092cc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80092d0:	f000 f896 	bl	8009400 <_read_r>
 80092d4:	2800      	cmp	r0, #0
 80092d6:	bfab      	itete	ge
 80092d8:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 80092da:	89a3      	ldrhlt	r3, [r4, #12]
 80092dc:	181b      	addge	r3, r3, r0
 80092de:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 80092e2:	bfac      	ite	ge
 80092e4:	6563      	strge	r3, [r4, #84]	; 0x54
 80092e6:	81a3      	strhlt	r3, [r4, #12]
 80092e8:	bd10      	pop	{r4, pc}

080092ea <__swrite>:
 80092ea:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80092ee:	461f      	mov	r7, r3
 80092f0:	898b      	ldrh	r3, [r1, #12]
 80092f2:	05db      	lsls	r3, r3, #23
 80092f4:	4605      	mov	r5, r0
 80092f6:	460c      	mov	r4, r1
 80092f8:	4616      	mov	r6, r2
 80092fa:	d505      	bpl.n	8009308 <__swrite+0x1e>
 80092fc:	2302      	movs	r3, #2
 80092fe:	2200      	movs	r2, #0
 8009300:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009304:	f000 f868 	bl	80093d8 <_lseek_r>
 8009308:	89a3      	ldrh	r3, [r4, #12]
 800930a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800930e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8009312:	81a3      	strh	r3, [r4, #12]
 8009314:	4632      	mov	r2, r6
 8009316:	463b      	mov	r3, r7
 8009318:	4628      	mov	r0, r5
 800931a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800931e:	f000 b817 	b.w	8009350 <_write_r>

08009322 <__sseek>:
 8009322:	b510      	push	{r4, lr}
 8009324:	460c      	mov	r4, r1
 8009326:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800932a:	f000 f855 	bl	80093d8 <_lseek_r>
 800932e:	1c43      	adds	r3, r0, #1
 8009330:	89a3      	ldrh	r3, [r4, #12]
 8009332:	bf15      	itete	ne
 8009334:	6560      	strne	r0, [r4, #84]	; 0x54
 8009336:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800933a:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800933e:	81a3      	strheq	r3, [r4, #12]
 8009340:	bf18      	it	ne
 8009342:	81a3      	strhne	r3, [r4, #12]
 8009344:	bd10      	pop	{r4, pc}

08009346 <__sclose>:
 8009346:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800934a:	f000 b813 	b.w	8009374 <_close_r>
	...

08009350 <_write_r>:
 8009350:	b538      	push	{r3, r4, r5, lr}
 8009352:	4c07      	ldr	r4, [pc, #28]	; (8009370 <_write_r+0x20>)
 8009354:	4605      	mov	r5, r0
 8009356:	4608      	mov	r0, r1
 8009358:	4611      	mov	r1, r2
 800935a:	2200      	movs	r2, #0
 800935c:	6022      	str	r2, [r4, #0]
 800935e:	461a      	mov	r2, r3
 8009360:	f7f8 f9bf 	bl	80016e2 <_write>
 8009364:	1c43      	adds	r3, r0, #1
 8009366:	d102      	bne.n	800936e <_write_r+0x1e>
 8009368:	6823      	ldr	r3, [r4, #0]
 800936a:	b103      	cbz	r3, 800936e <_write_r+0x1e>
 800936c:	602b      	str	r3, [r5, #0]
 800936e:	bd38      	pop	{r3, r4, r5, pc}
 8009370:	20001060 	.word	0x20001060

08009374 <_close_r>:
 8009374:	b538      	push	{r3, r4, r5, lr}
 8009376:	4c06      	ldr	r4, [pc, #24]	; (8009390 <_close_r+0x1c>)
 8009378:	2300      	movs	r3, #0
 800937a:	4605      	mov	r5, r0
 800937c:	4608      	mov	r0, r1
 800937e:	6023      	str	r3, [r4, #0]
 8009380:	f7f8 fd2f 	bl	8001de2 <_close>
 8009384:	1c43      	adds	r3, r0, #1
 8009386:	d102      	bne.n	800938e <_close_r+0x1a>
 8009388:	6823      	ldr	r3, [r4, #0]
 800938a:	b103      	cbz	r3, 800938e <_close_r+0x1a>
 800938c:	602b      	str	r3, [r5, #0]
 800938e:	bd38      	pop	{r3, r4, r5, pc}
 8009390:	20001060 	.word	0x20001060

08009394 <_fstat_r>:
 8009394:	b538      	push	{r3, r4, r5, lr}
 8009396:	4c07      	ldr	r4, [pc, #28]	; (80093b4 <_fstat_r+0x20>)
 8009398:	2300      	movs	r3, #0
 800939a:	4605      	mov	r5, r0
 800939c:	4608      	mov	r0, r1
 800939e:	4611      	mov	r1, r2
 80093a0:	6023      	str	r3, [r4, #0]
 80093a2:	f7f8 fd2a 	bl	8001dfa <_fstat>
 80093a6:	1c43      	adds	r3, r0, #1
 80093a8:	d102      	bne.n	80093b0 <_fstat_r+0x1c>
 80093aa:	6823      	ldr	r3, [r4, #0]
 80093ac:	b103      	cbz	r3, 80093b0 <_fstat_r+0x1c>
 80093ae:	602b      	str	r3, [r5, #0]
 80093b0:	bd38      	pop	{r3, r4, r5, pc}
 80093b2:	bf00      	nop
 80093b4:	20001060 	.word	0x20001060

080093b8 <_isatty_r>:
 80093b8:	b538      	push	{r3, r4, r5, lr}
 80093ba:	4c06      	ldr	r4, [pc, #24]	; (80093d4 <_isatty_r+0x1c>)
 80093bc:	2300      	movs	r3, #0
 80093be:	4605      	mov	r5, r0
 80093c0:	4608      	mov	r0, r1
 80093c2:	6023      	str	r3, [r4, #0]
 80093c4:	f7f8 fd29 	bl	8001e1a <_isatty>
 80093c8:	1c43      	adds	r3, r0, #1
 80093ca:	d102      	bne.n	80093d2 <_isatty_r+0x1a>
 80093cc:	6823      	ldr	r3, [r4, #0]
 80093ce:	b103      	cbz	r3, 80093d2 <_isatty_r+0x1a>
 80093d0:	602b      	str	r3, [r5, #0]
 80093d2:	bd38      	pop	{r3, r4, r5, pc}
 80093d4:	20001060 	.word	0x20001060

080093d8 <_lseek_r>:
 80093d8:	b538      	push	{r3, r4, r5, lr}
 80093da:	4c07      	ldr	r4, [pc, #28]	; (80093f8 <_lseek_r+0x20>)
 80093dc:	4605      	mov	r5, r0
 80093de:	4608      	mov	r0, r1
 80093e0:	4611      	mov	r1, r2
 80093e2:	2200      	movs	r2, #0
 80093e4:	6022      	str	r2, [r4, #0]
 80093e6:	461a      	mov	r2, r3
 80093e8:	f7f8 fd22 	bl	8001e30 <_lseek>
 80093ec:	1c43      	adds	r3, r0, #1
 80093ee:	d102      	bne.n	80093f6 <_lseek_r+0x1e>
 80093f0:	6823      	ldr	r3, [r4, #0]
 80093f2:	b103      	cbz	r3, 80093f6 <_lseek_r+0x1e>
 80093f4:	602b      	str	r3, [r5, #0]
 80093f6:	bd38      	pop	{r3, r4, r5, pc}
 80093f8:	20001060 	.word	0x20001060

080093fc <__malloc_lock>:
 80093fc:	4770      	bx	lr

080093fe <__malloc_unlock>:
 80093fe:	4770      	bx	lr

08009400 <_read_r>:
 8009400:	b538      	push	{r3, r4, r5, lr}
 8009402:	4c07      	ldr	r4, [pc, #28]	; (8009420 <_read_r+0x20>)
 8009404:	4605      	mov	r5, r0
 8009406:	4608      	mov	r0, r1
 8009408:	4611      	mov	r1, r2
 800940a:	2200      	movs	r2, #0
 800940c:	6022      	str	r2, [r4, #0]
 800940e:	461a      	mov	r2, r3
 8009410:	f7f8 fcca 	bl	8001da8 <_read>
 8009414:	1c43      	adds	r3, r0, #1
 8009416:	d102      	bne.n	800941e <_read_r+0x1e>
 8009418:	6823      	ldr	r3, [r4, #0]
 800941a:	b103      	cbz	r3, 800941e <_read_r+0x1e>
 800941c:	602b      	str	r3, [r5, #0]
 800941e:	bd38      	pop	{r3, r4, r5, pc}
 8009420:	20001060 	.word	0x20001060

08009424 <_init>:
 8009424:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009426:	bf00      	nop
 8009428:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800942a:	bc08      	pop	{r3}
 800942c:	469e      	mov	lr, r3
 800942e:	4770      	bx	lr

08009430 <_fini>:
 8009430:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009432:	bf00      	nop
 8009434:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009436:	bc08      	pop	{r3}
 8009438:	469e      	mov	lr, r3
 800943a:	4770      	bx	lr
