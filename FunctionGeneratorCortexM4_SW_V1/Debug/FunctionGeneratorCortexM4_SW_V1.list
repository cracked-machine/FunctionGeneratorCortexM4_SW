
FunctionGeneratorCortexM4_SW_V1.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000e748  080001e0  080001e0  000101e0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000b78  0800e928  0800e928  0001e928  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800f4a0  0800f4a0  00021604  2**0
                  CONTENTS
  4 .ARM          00000000  0800f4a0  0800f4a0  00021604  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800f4a0  0800f4a0  00021604  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800f4a0  0800f4a0  0001f4a0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800f4a4  0800f4a4  0001f4a4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00001604  20000000  0800f4a8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000888  20001604  08010aac  00021604  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20001e8c  08010aac  00021e8c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00021604  2**0
                  CONTENTS, READONLY
 12 .debug_info   0002cd66  00000000  00000000  00021634  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00005bec  00000000  00000000  0004e39a  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00001eb8  00000000  00000000  00053f88  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00001b70  00000000  00000000  00055e40  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  0003087c  00000000  00000000  000579b0  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   00021f8a  00000000  00000000  0008822c  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    00124da4  00000000  00000000  000aa1b6  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  001cef5a  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000089b4  00000000  00000000  001cefd8  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001e0 <__do_global_dtors_aux>:
 80001e0:	b510      	push	{r4, lr}
 80001e2:	4c05      	ldr	r4, [pc, #20]	; (80001f8 <__do_global_dtors_aux+0x18>)
 80001e4:	7823      	ldrb	r3, [r4, #0]
 80001e6:	b933      	cbnz	r3, 80001f6 <__do_global_dtors_aux+0x16>
 80001e8:	4b04      	ldr	r3, [pc, #16]	; (80001fc <__do_global_dtors_aux+0x1c>)
 80001ea:	b113      	cbz	r3, 80001f2 <__do_global_dtors_aux+0x12>
 80001ec:	4804      	ldr	r0, [pc, #16]	; (8000200 <__do_global_dtors_aux+0x20>)
 80001ee:	f3af 8000 	nop.w
 80001f2:	2301      	movs	r3, #1
 80001f4:	7023      	strb	r3, [r4, #0]
 80001f6:	bd10      	pop	{r4, pc}
 80001f8:	20001604 	.word	0x20001604
 80001fc:	00000000 	.word	0x00000000
 8000200:	0800e910 	.word	0x0800e910

08000204 <frame_dummy>:
 8000204:	b508      	push	{r3, lr}
 8000206:	4b03      	ldr	r3, [pc, #12]	; (8000214 <frame_dummy+0x10>)
 8000208:	b11b      	cbz	r3, 8000212 <frame_dummy+0xe>
 800020a:	4903      	ldr	r1, [pc, #12]	; (8000218 <frame_dummy+0x14>)
 800020c:	4803      	ldr	r0, [pc, #12]	; (800021c <frame_dummy+0x18>)
 800020e:	f3af 8000 	nop.w
 8000212:	bd08      	pop	{r3, pc}
 8000214:	00000000 	.word	0x00000000
 8000218:	20001608 	.word	0x20001608
 800021c:	0800e910 	.word	0x0800e910

08000220 <strlen>:
 8000220:	4603      	mov	r3, r0
 8000222:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000226:	2a00      	cmp	r2, #0
 8000228:	d1fb      	bne.n	8000222 <strlen+0x2>
 800022a:	1a18      	subs	r0, r3, r0
 800022c:	3801      	subs	r0, #1
 800022e:	4770      	bx	lr

08000230 <memchr>:
 8000230:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000234:	2a10      	cmp	r2, #16
 8000236:	db2b      	blt.n	8000290 <memchr+0x60>
 8000238:	f010 0f07 	tst.w	r0, #7
 800023c:	d008      	beq.n	8000250 <memchr+0x20>
 800023e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000242:	3a01      	subs	r2, #1
 8000244:	428b      	cmp	r3, r1
 8000246:	d02d      	beq.n	80002a4 <memchr+0x74>
 8000248:	f010 0f07 	tst.w	r0, #7
 800024c:	b342      	cbz	r2, 80002a0 <memchr+0x70>
 800024e:	d1f6      	bne.n	800023e <memchr+0xe>
 8000250:	b4f0      	push	{r4, r5, r6, r7}
 8000252:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000256:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800025a:	f022 0407 	bic.w	r4, r2, #7
 800025e:	f07f 0700 	mvns.w	r7, #0
 8000262:	2300      	movs	r3, #0
 8000264:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000268:	3c08      	subs	r4, #8
 800026a:	ea85 0501 	eor.w	r5, r5, r1
 800026e:	ea86 0601 	eor.w	r6, r6, r1
 8000272:	fa85 f547 	uadd8	r5, r5, r7
 8000276:	faa3 f587 	sel	r5, r3, r7
 800027a:	fa86 f647 	uadd8	r6, r6, r7
 800027e:	faa5 f687 	sel	r6, r5, r7
 8000282:	b98e      	cbnz	r6, 80002a8 <memchr+0x78>
 8000284:	d1ee      	bne.n	8000264 <memchr+0x34>
 8000286:	bcf0      	pop	{r4, r5, r6, r7}
 8000288:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800028c:	f002 0207 	and.w	r2, r2, #7
 8000290:	b132      	cbz	r2, 80002a0 <memchr+0x70>
 8000292:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000296:	3a01      	subs	r2, #1
 8000298:	ea83 0301 	eor.w	r3, r3, r1
 800029c:	b113      	cbz	r3, 80002a4 <memchr+0x74>
 800029e:	d1f8      	bne.n	8000292 <memchr+0x62>
 80002a0:	2000      	movs	r0, #0
 80002a2:	4770      	bx	lr
 80002a4:	3801      	subs	r0, #1
 80002a6:	4770      	bx	lr
 80002a8:	2d00      	cmp	r5, #0
 80002aa:	bf06      	itte	eq
 80002ac:	4635      	moveq	r5, r6
 80002ae:	3803      	subeq	r0, #3
 80002b0:	3807      	subne	r0, #7
 80002b2:	f015 0f01 	tst.w	r5, #1
 80002b6:	d107      	bne.n	80002c8 <memchr+0x98>
 80002b8:	3001      	adds	r0, #1
 80002ba:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002be:	bf02      	ittt	eq
 80002c0:	3001      	addeq	r0, #1
 80002c2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002c6:	3001      	addeq	r0, #1
 80002c8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ca:	3801      	subs	r0, #1
 80002cc:	4770      	bx	lr
 80002ce:	bf00      	nop

080002d0 <__aeabi_drsub>:
 80002d0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002d4:	e002      	b.n	80002dc <__adddf3>
 80002d6:	bf00      	nop

080002d8 <__aeabi_dsub>:
 80002d8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002dc <__adddf3>:
 80002dc:	b530      	push	{r4, r5, lr}
 80002de:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002e2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002e6:	ea94 0f05 	teq	r4, r5
 80002ea:	bf08      	it	eq
 80002ec:	ea90 0f02 	teqeq	r0, r2
 80002f0:	bf1f      	itttt	ne
 80002f2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002f6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002fa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002fe:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000302:	f000 80e2 	beq.w	80004ca <__adddf3+0x1ee>
 8000306:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800030a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800030e:	bfb8      	it	lt
 8000310:	426d      	neglt	r5, r5
 8000312:	dd0c      	ble.n	800032e <__adddf3+0x52>
 8000314:	442c      	add	r4, r5
 8000316:	ea80 0202 	eor.w	r2, r0, r2
 800031a:	ea81 0303 	eor.w	r3, r1, r3
 800031e:	ea82 0000 	eor.w	r0, r2, r0
 8000322:	ea83 0101 	eor.w	r1, r3, r1
 8000326:	ea80 0202 	eor.w	r2, r0, r2
 800032a:	ea81 0303 	eor.w	r3, r1, r3
 800032e:	2d36      	cmp	r5, #54	; 0x36
 8000330:	bf88      	it	hi
 8000332:	bd30      	pophi	{r4, r5, pc}
 8000334:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000338:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800033c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000340:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000344:	d002      	beq.n	800034c <__adddf3+0x70>
 8000346:	4240      	negs	r0, r0
 8000348:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800034c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000350:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000354:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000358:	d002      	beq.n	8000360 <__adddf3+0x84>
 800035a:	4252      	negs	r2, r2
 800035c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000360:	ea94 0f05 	teq	r4, r5
 8000364:	f000 80a7 	beq.w	80004b6 <__adddf3+0x1da>
 8000368:	f1a4 0401 	sub.w	r4, r4, #1
 800036c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000370:	db0d      	blt.n	800038e <__adddf3+0xb2>
 8000372:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000376:	fa22 f205 	lsr.w	r2, r2, r5
 800037a:	1880      	adds	r0, r0, r2
 800037c:	f141 0100 	adc.w	r1, r1, #0
 8000380:	fa03 f20e 	lsl.w	r2, r3, lr
 8000384:	1880      	adds	r0, r0, r2
 8000386:	fa43 f305 	asr.w	r3, r3, r5
 800038a:	4159      	adcs	r1, r3
 800038c:	e00e      	b.n	80003ac <__adddf3+0xd0>
 800038e:	f1a5 0520 	sub.w	r5, r5, #32
 8000392:	f10e 0e20 	add.w	lr, lr, #32
 8000396:	2a01      	cmp	r2, #1
 8000398:	fa03 fc0e 	lsl.w	ip, r3, lr
 800039c:	bf28      	it	cs
 800039e:	f04c 0c02 	orrcs.w	ip, ip, #2
 80003a2:	fa43 f305 	asr.w	r3, r3, r5
 80003a6:	18c0      	adds	r0, r0, r3
 80003a8:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80003ac:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003b0:	d507      	bpl.n	80003c2 <__adddf3+0xe6>
 80003b2:	f04f 0e00 	mov.w	lr, #0
 80003b6:	f1dc 0c00 	rsbs	ip, ip, #0
 80003ba:	eb7e 0000 	sbcs.w	r0, lr, r0
 80003be:	eb6e 0101 	sbc.w	r1, lr, r1
 80003c2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80003c6:	d31b      	bcc.n	8000400 <__adddf3+0x124>
 80003c8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80003cc:	d30c      	bcc.n	80003e8 <__adddf3+0x10c>
 80003ce:	0849      	lsrs	r1, r1, #1
 80003d0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003d4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003d8:	f104 0401 	add.w	r4, r4, #1
 80003dc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003e0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003e4:	f080 809a 	bcs.w	800051c <__adddf3+0x240>
 80003e8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003ec:	bf08      	it	eq
 80003ee:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003f2:	f150 0000 	adcs.w	r0, r0, #0
 80003f6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003fa:	ea41 0105 	orr.w	r1, r1, r5
 80003fe:	bd30      	pop	{r4, r5, pc}
 8000400:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000404:	4140      	adcs	r0, r0
 8000406:	eb41 0101 	adc.w	r1, r1, r1
 800040a:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 800040e:	f1a4 0401 	sub.w	r4, r4, #1
 8000412:	d1e9      	bne.n	80003e8 <__adddf3+0x10c>
 8000414:	f091 0f00 	teq	r1, #0
 8000418:	bf04      	itt	eq
 800041a:	4601      	moveq	r1, r0
 800041c:	2000      	moveq	r0, #0
 800041e:	fab1 f381 	clz	r3, r1
 8000422:	bf08      	it	eq
 8000424:	3320      	addeq	r3, #32
 8000426:	f1a3 030b 	sub.w	r3, r3, #11
 800042a:	f1b3 0220 	subs.w	r2, r3, #32
 800042e:	da0c      	bge.n	800044a <__adddf3+0x16e>
 8000430:	320c      	adds	r2, #12
 8000432:	dd08      	ble.n	8000446 <__adddf3+0x16a>
 8000434:	f102 0c14 	add.w	ip, r2, #20
 8000438:	f1c2 020c 	rsb	r2, r2, #12
 800043c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000440:	fa21 f102 	lsr.w	r1, r1, r2
 8000444:	e00c      	b.n	8000460 <__adddf3+0x184>
 8000446:	f102 0214 	add.w	r2, r2, #20
 800044a:	bfd8      	it	le
 800044c:	f1c2 0c20 	rsble	ip, r2, #32
 8000450:	fa01 f102 	lsl.w	r1, r1, r2
 8000454:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000458:	bfdc      	itt	le
 800045a:	ea41 010c 	orrle.w	r1, r1, ip
 800045e:	4090      	lslle	r0, r2
 8000460:	1ae4      	subs	r4, r4, r3
 8000462:	bfa2      	ittt	ge
 8000464:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000468:	4329      	orrge	r1, r5
 800046a:	bd30      	popge	{r4, r5, pc}
 800046c:	ea6f 0404 	mvn.w	r4, r4
 8000470:	3c1f      	subs	r4, #31
 8000472:	da1c      	bge.n	80004ae <__adddf3+0x1d2>
 8000474:	340c      	adds	r4, #12
 8000476:	dc0e      	bgt.n	8000496 <__adddf3+0x1ba>
 8000478:	f104 0414 	add.w	r4, r4, #20
 800047c:	f1c4 0220 	rsb	r2, r4, #32
 8000480:	fa20 f004 	lsr.w	r0, r0, r4
 8000484:	fa01 f302 	lsl.w	r3, r1, r2
 8000488:	ea40 0003 	orr.w	r0, r0, r3
 800048c:	fa21 f304 	lsr.w	r3, r1, r4
 8000490:	ea45 0103 	orr.w	r1, r5, r3
 8000494:	bd30      	pop	{r4, r5, pc}
 8000496:	f1c4 040c 	rsb	r4, r4, #12
 800049a:	f1c4 0220 	rsb	r2, r4, #32
 800049e:	fa20 f002 	lsr.w	r0, r0, r2
 80004a2:	fa01 f304 	lsl.w	r3, r1, r4
 80004a6:	ea40 0003 	orr.w	r0, r0, r3
 80004aa:	4629      	mov	r1, r5
 80004ac:	bd30      	pop	{r4, r5, pc}
 80004ae:	fa21 f004 	lsr.w	r0, r1, r4
 80004b2:	4629      	mov	r1, r5
 80004b4:	bd30      	pop	{r4, r5, pc}
 80004b6:	f094 0f00 	teq	r4, #0
 80004ba:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80004be:	bf06      	itte	eq
 80004c0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80004c4:	3401      	addeq	r4, #1
 80004c6:	3d01      	subne	r5, #1
 80004c8:	e74e      	b.n	8000368 <__adddf3+0x8c>
 80004ca:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ce:	bf18      	it	ne
 80004d0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004d4:	d029      	beq.n	800052a <__adddf3+0x24e>
 80004d6:	ea94 0f05 	teq	r4, r5
 80004da:	bf08      	it	eq
 80004dc:	ea90 0f02 	teqeq	r0, r2
 80004e0:	d005      	beq.n	80004ee <__adddf3+0x212>
 80004e2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004e6:	bf04      	itt	eq
 80004e8:	4619      	moveq	r1, r3
 80004ea:	4610      	moveq	r0, r2
 80004ec:	bd30      	pop	{r4, r5, pc}
 80004ee:	ea91 0f03 	teq	r1, r3
 80004f2:	bf1e      	ittt	ne
 80004f4:	2100      	movne	r1, #0
 80004f6:	2000      	movne	r0, #0
 80004f8:	bd30      	popne	{r4, r5, pc}
 80004fa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004fe:	d105      	bne.n	800050c <__adddf3+0x230>
 8000500:	0040      	lsls	r0, r0, #1
 8000502:	4149      	adcs	r1, r1
 8000504:	bf28      	it	cs
 8000506:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800050a:	bd30      	pop	{r4, r5, pc}
 800050c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000510:	bf3c      	itt	cc
 8000512:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000516:	bd30      	popcc	{r4, r5, pc}
 8000518:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800051c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000520:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000524:	f04f 0000 	mov.w	r0, #0
 8000528:	bd30      	pop	{r4, r5, pc}
 800052a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800052e:	bf1a      	itte	ne
 8000530:	4619      	movne	r1, r3
 8000532:	4610      	movne	r0, r2
 8000534:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000538:	bf1c      	itt	ne
 800053a:	460b      	movne	r3, r1
 800053c:	4602      	movne	r2, r0
 800053e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000542:	bf06      	itte	eq
 8000544:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000548:	ea91 0f03 	teqeq	r1, r3
 800054c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000550:	bd30      	pop	{r4, r5, pc}
 8000552:	bf00      	nop

08000554 <__aeabi_ui2d>:
 8000554:	f090 0f00 	teq	r0, #0
 8000558:	bf04      	itt	eq
 800055a:	2100      	moveq	r1, #0
 800055c:	4770      	bxeq	lr
 800055e:	b530      	push	{r4, r5, lr}
 8000560:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000564:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000568:	f04f 0500 	mov.w	r5, #0
 800056c:	f04f 0100 	mov.w	r1, #0
 8000570:	e750      	b.n	8000414 <__adddf3+0x138>
 8000572:	bf00      	nop

08000574 <__aeabi_i2d>:
 8000574:	f090 0f00 	teq	r0, #0
 8000578:	bf04      	itt	eq
 800057a:	2100      	moveq	r1, #0
 800057c:	4770      	bxeq	lr
 800057e:	b530      	push	{r4, r5, lr}
 8000580:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000584:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000588:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800058c:	bf48      	it	mi
 800058e:	4240      	negmi	r0, r0
 8000590:	f04f 0100 	mov.w	r1, #0
 8000594:	e73e      	b.n	8000414 <__adddf3+0x138>
 8000596:	bf00      	nop

08000598 <__aeabi_f2d>:
 8000598:	0042      	lsls	r2, r0, #1
 800059a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800059e:	ea4f 0131 	mov.w	r1, r1, rrx
 80005a2:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80005a6:	bf1f      	itttt	ne
 80005a8:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80005ac:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80005b0:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80005b4:	4770      	bxne	lr
 80005b6:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80005ba:	bf08      	it	eq
 80005bc:	4770      	bxeq	lr
 80005be:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80005c2:	bf04      	itt	eq
 80005c4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80005c8:	4770      	bxeq	lr
 80005ca:	b530      	push	{r4, r5, lr}
 80005cc:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005d0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005d4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005d8:	e71c      	b.n	8000414 <__adddf3+0x138>
 80005da:	bf00      	nop

080005dc <__aeabi_ul2d>:
 80005dc:	ea50 0201 	orrs.w	r2, r0, r1
 80005e0:	bf08      	it	eq
 80005e2:	4770      	bxeq	lr
 80005e4:	b530      	push	{r4, r5, lr}
 80005e6:	f04f 0500 	mov.w	r5, #0
 80005ea:	e00a      	b.n	8000602 <__aeabi_l2d+0x16>

080005ec <__aeabi_l2d>:
 80005ec:	ea50 0201 	orrs.w	r2, r0, r1
 80005f0:	bf08      	it	eq
 80005f2:	4770      	bxeq	lr
 80005f4:	b530      	push	{r4, r5, lr}
 80005f6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005fa:	d502      	bpl.n	8000602 <__aeabi_l2d+0x16>
 80005fc:	4240      	negs	r0, r0
 80005fe:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000602:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000606:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800060a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800060e:	f43f aed8 	beq.w	80003c2 <__adddf3+0xe6>
 8000612:	f04f 0203 	mov.w	r2, #3
 8000616:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800061a:	bf18      	it	ne
 800061c:	3203      	addne	r2, #3
 800061e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000622:	bf18      	it	ne
 8000624:	3203      	addne	r2, #3
 8000626:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800062a:	f1c2 0320 	rsb	r3, r2, #32
 800062e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000632:	fa20 f002 	lsr.w	r0, r0, r2
 8000636:	fa01 fe03 	lsl.w	lr, r1, r3
 800063a:	ea40 000e 	orr.w	r0, r0, lr
 800063e:	fa21 f102 	lsr.w	r1, r1, r2
 8000642:	4414      	add	r4, r2
 8000644:	e6bd      	b.n	80003c2 <__adddf3+0xe6>
 8000646:	bf00      	nop

08000648 <__aeabi_dmul>:
 8000648:	b570      	push	{r4, r5, r6, lr}
 800064a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800064e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000652:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000656:	bf1d      	ittte	ne
 8000658:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800065c:	ea94 0f0c 	teqne	r4, ip
 8000660:	ea95 0f0c 	teqne	r5, ip
 8000664:	f000 f8de 	bleq	8000824 <__aeabi_dmul+0x1dc>
 8000668:	442c      	add	r4, r5
 800066a:	ea81 0603 	eor.w	r6, r1, r3
 800066e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000672:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000676:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800067a:	bf18      	it	ne
 800067c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000680:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000684:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000688:	d038      	beq.n	80006fc <__aeabi_dmul+0xb4>
 800068a:	fba0 ce02 	umull	ip, lr, r0, r2
 800068e:	f04f 0500 	mov.w	r5, #0
 8000692:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000696:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800069a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800069e:	f04f 0600 	mov.w	r6, #0
 80006a2:	fbe1 5603 	umlal	r5, r6, r1, r3
 80006a6:	f09c 0f00 	teq	ip, #0
 80006aa:	bf18      	it	ne
 80006ac:	f04e 0e01 	orrne.w	lr, lr, #1
 80006b0:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80006b4:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80006b8:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80006bc:	d204      	bcs.n	80006c8 <__aeabi_dmul+0x80>
 80006be:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006c2:	416d      	adcs	r5, r5
 80006c4:	eb46 0606 	adc.w	r6, r6, r6
 80006c8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006cc:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006d0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006d4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006d8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006dc:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006e0:	bf88      	it	hi
 80006e2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006e6:	d81e      	bhi.n	8000726 <__aeabi_dmul+0xde>
 80006e8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006ec:	bf08      	it	eq
 80006ee:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006f2:	f150 0000 	adcs.w	r0, r0, #0
 80006f6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006fa:	bd70      	pop	{r4, r5, r6, pc}
 80006fc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000700:	ea46 0101 	orr.w	r1, r6, r1
 8000704:	ea40 0002 	orr.w	r0, r0, r2
 8000708:	ea81 0103 	eor.w	r1, r1, r3
 800070c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000710:	bfc2      	ittt	gt
 8000712:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000716:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800071a:	bd70      	popgt	{r4, r5, r6, pc}
 800071c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000720:	f04f 0e00 	mov.w	lr, #0
 8000724:	3c01      	subs	r4, #1
 8000726:	f300 80ab 	bgt.w	8000880 <__aeabi_dmul+0x238>
 800072a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800072e:	bfde      	ittt	le
 8000730:	2000      	movle	r0, #0
 8000732:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000736:	bd70      	pople	{r4, r5, r6, pc}
 8000738:	f1c4 0400 	rsb	r4, r4, #0
 800073c:	3c20      	subs	r4, #32
 800073e:	da35      	bge.n	80007ac <__aeabi_dmul+0x164>
 8000740:	340c      	adds	r4, #12
 8000742:	dc1b      	bgt.n	800077c <__aeabi_dmul+0x134>
 8000744:	f104 0414 	add.w	r4, r4, #20
 8000748:	f1c4 0520 	rsb	r5, r4, #32
 800074c:	fa00 f305 	lsl.w	r3, r0, r5
 8000750:	fa20 f004 	lsr.w	r0, r0, r4
 8000754:	fa01 f205 	lsl.w	r2, r1, r5
 8000758:	ea40 0002 	orr.w	r0, r0, r2
 800075c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000760:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000764:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000768:	fa21 f604 	lsr.w	r6, r1, r4
 800076c:	eb42 0106 	adc.w	r1, r2, r6
 8000770:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000774:	bf08      	it	eq
 8000776:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800077a:	bd70      	pop	{r4, r5, r6, pc}
 800077c:	f1c4 040c 	rsb	r4, r4, #12
 8000780:	f1c4 0520 	rsb	r5, r4, #32
 8000784:	fa00 f304 	lsl.w	r3, r0, r4
 8000788:	fa20 f005 	lsr.w	r0, r0, r5
 800078c:	fa01 f204 	lsl.w	r2, r1, r4
 8000790:	ea40 0002 	orr.w	r0, r0, r2
 8000794:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000798:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800079c:	f141 0100 	adc.w	r1, r1, #0
 80007a0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007a4:	bf08      	it	eq
 80007a6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007aa:	bd70      	pop	{r4, r5, r6, pc}
 80007ac:	f1c4 0520 	rsb	r5, r4, #32
 80007b0:	fa00 f205 	lsl.w	r2, r0, r5
 80007b4:	ea4e 0e02 	orr.w	lr, lr, r2
 80007b8:	fa20 f304 	lsr.w	r3, r0, r4
 80007bc:	fa01 f205 	lsl.w	r2, r1, r5
 80007c0:	ea43 0302 	orr.w	r3, r3, r2
 80007c4:	fa21 f004 	lsr.w	r0, r1, r4
 80007c8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007cc:	fa21 f204 	lsr.w	r2, r1, r4
 80007d0:	ea20 0002 	bic.w	r0, r0, r2
 80007d4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007d8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007dc:	bf08      	it	eq
 80007de:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007e2:	bd70      	pop	{r4, r5, r6, pc}
 80007e4:	f094 0f00 	teq	r4, #0
 80007e8:	d10f      	bne.n	800080a <__aeabi_dmul+0x1c2>
 80007ea:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007ee:	0040      	lsls	r0, r0, #1
 80007f0:	eb41 0101 	adc.w	r1, r1, r1
 80007f4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007f8:	bf08      	it	eq
 80007fa:	3c01      	subeq	r4, #1
 80007fc:	d0f7      	beq.n	80007ee <__aeabi_dmul+0x1a6>
 80007fe:	ea41 0106 	orr.w	r1, r1, r6
 8000802:	f095 0f00 	teq	r5, #0
 8000806:	bf18      	it	ne
 8000808:	4770      	bxne	lr
 800080a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800080e:	0052      	lsls	r2, r2, #1
 8000810:	eb43 0303 	adc.w	r3, r3, r3
 8000814:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000818:	bf08      	it	eq
 800081a:	3d01      	subeq	r5, #1
 800081c:	d0f7      	beq.n	800080e <__aeabi_dmul+0x1c6>
 800081e:	ea43 0306 	orr.w	r3, r3, r6
 8000822:	4770      	bx	lr
 8000824:	ea94 0f0c 	teq	r4, ip
 8000828:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800082c:	bf18      	it	ne
 800082e:	ea95 0f0c 	teqne	r5, ip
 8000832:	d00c      	beq.n	800084e <__aeabi_dmul+0x206>
 8000834:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000838:	bf18      	it	ne
 800083a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800083e:	d1d1      	bne.n	80007e4 <__aeabi_dmul+0x19c>
 8000840:	ea81 0103 	eor.w	r1, r1, r3
 8000844:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000848:	f04f 0000 	mov.w	r0, #0
 800084c:	bd70      	pop	{r4, r5, r6, pc}
 800084e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000852:	bf06      	itte	eq
 8000854:	4610      	moveq	r0, r2
 8000856:	4619      	moveq	r1, r3
 8000858:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800085c:	d019      	beq.n	8000892 <__aeabi_dmul+0x24a>
 800085e:	ea94 0f0c 	teq	r4, ip
 8000862:	d102      	bne.n	800086a <__aeabi_dmul+0x222>
 8000864:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000868:	d113      	bne.n	8000892 <__aeabi_dmul+0x24a>
 800086a:	ea95 0f0c 	teq	r5, ip
 800086e:	d105      	bne.n	800087c <__aeabi_dmul+0x234>
 8000870:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000874:	bf1c      	itt	ne
 8000876:	4610      	movne	r0, r2
 8000878:	4619      	movne	r1, r3
 800087a:	d10a      	bne.n	8000892 <__aeabi_dmul+0x24a>
 800087c:	ea81 0103 	eor.w	r1, r1, r3
 8000880:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000884:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000888:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800088c:	f04f 0000 	mov.w	r0, #0
 8000890:	bd70      	pop	{r4, r5, r6, pc}
 8000892:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000896:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800089a:	bd70      	pop	{r4, r5, r6, pc}

0800089c <__aeabi_ddiv>:
 800089c:	b570      	push	{r4, r5, r6, lr}
 800089e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80008a2:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80008a6:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80008aa:	bf1d      	ittte	ne
 80008ac:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80008b0:	ea94 0f0c 	teqne	r4, ip
 80008b4:	ea95 0f0c 	teqne	r5, ip
 80008b8:	f000 f8a7 	bleq	8000a0a <__aeabi_ddiv+0x16e>
 80008bc:	eba4 0405 	sub.w	r4, r4, r5
 80008c0:	ea81 0e03 	eor.w	lr, r1, r3
 80008c4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008c8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008cc:	f000 8088 	beq.w	80009e0 <__aeabi_ddiv+0x144>
 80008d0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008d4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80008d8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008dc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008e0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008e4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008e8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008ec:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008f0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008f4:	429d      	cmp	r5, r3
 80008f6:	bf08      	it	eq
 80008f8:	4296      	cmpeq	r6, r2
 80008fa:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008fe:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000902:	d202      	bcs.n	800090a <__aeabi_ddiv+0x6e>
 8000904:	085b      	lsrs	r3, r3, #1
 8000906:	ea4f 0232 	mov.w	r2, r2, rrx
 800090a:	1ab6      	subs	r6, r6, r2
 800090c:	eb65 0503 	sbc.w	r5, r5, r3
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800091a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800091e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000922:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000926:	bf22      	ittt	cs
 8000928:	1ab6      	subcs	r6, r6, r2
 800092a:	4675      	movcs	r5, lr
 800092c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000930:	085b      	lsrs	r3, r3, #1
 8000932:	ea4f 0232 	mov.w	r2, r2, rrx
 8000936:	ebb6 0e02 	subs.w	lr, r6, r2
 800093a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800093e:	bf22      	ittt	cs
 8000940:	1ab6      	subcs	r6, r6, r2
 8000942:	4675      	movcs	r5, lr
 8000944:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000948:	085b      	lsrs	r3, r3, #1
 800094a:	ea4f 0232 	mov.w	r2, r2, rrx
 800094e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000952:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000956:	bf22      	ittt	cs
 8000958:	1ab6      	subcs	r6, r6, r2
 800095a:	4675      	movcs	r5, lr
 800095c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000960:	085b      	lsrs	r3, r3, #1
 8000962:	ea4f 0232 	mov.w	r2, r2, rrx
 8000966:	ebb6 0e02 	subs.w	lr, r6, r2
 800096a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800096e:	bf22      	ittt	cs
 8000970:	1ab6      	subcs	r6, r6, r2
 8000972:	4675      	movcs	r5, lr
 8000974:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000978:	ea55 0e06 	orrs.w	lr, r5, r6
 800097c:	d018      	beq.n	80009b0 <__aeabi_ddiv+0x114>
 800097e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000982:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000986:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800098a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800098e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000992:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000996:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800099a:	d1c0      	bne.n	800091e <__aeabi_ddiv+0x82>
 800099c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80009a0:	d10b      	bne.n	80009ba <__aeabi_ddiv+0x11e>
 80009a2:	ea41 0100 	orr.w	r1, r1, r0
 80009a6:	f04f 0000 	mov.w	r0, #0
 80009aa:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80009ae:	e7b6      	b.n	800091e <__aeabi_ddiv+0x82>
 80009b0:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80009b4:	bf04      	itt	eq
 80009b6:	4301      	orreq	r1, r0
 80009b8:	2000      	moveq	r0, #0
 80009ba:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80009be:	bf88      	it	hi
 80009c0:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80009c4:	f63f aeaf 	bhi.w	8000726 <__aeabi_dmul+0xde>
 80009c8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009cc:	bf04      	itt	eq
 80009ce:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009d2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009d6:	f150 0000 	adcs.w	r0, r0, #0
 80009da:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009de:	bd70      	pop	{r4, r5, r6, pc}
 80009e0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009e4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009e8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009ec:	bfc2      	ittt	gt
 80009ee:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009f2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009f6:	bd70      	popgt	{r4, r5, r6, pc}
 80009f8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009fc:	f04f 0e00 	mov.w	lr, #0
 8000a00:	3c01      	subs	r4, #1
 8000a02:	e690      	b.n	8000726 <__aeabi_dmul+0xde>
 8000a04:	ea45 0e06 	orr.w	lr, r5, r6
 8000a08:	e68d      	b.n	8000726 <__aeabi_dmul+0xde>
 8000a0a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000a0e:	ea94 0f0c 	teq	r4, ip
 8000a12:	bf08      	it	eq
 8000a14:	ea95 0f0c 	teqeq	r5, ip
 8000a18:	f43f af3b 	beq.w	8000892 <__aeabi_dmul+0x24a>
 8000a1c:	ea94 0f0c 	teq	r4, ip
 8000a20:	d10a      	bne.n	8000a38 <__aeabi_ddiv+0x19c>
 8000a22:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a26:	f47f af34 	bne.w	8000892 <__aeabi_dmul+0x24a>
 8000a2a:	ea95 0f0c 	teq	r5, ip
 8000a2e:	f47f af25 	bne.w	800087c <__aeabi_dmul+0x234>
 8000a32:	4610      	mov	r0, r2
 8000a34:	4619      	mov	r1, r3
 8000a36:	e72c      	b.n	8000892 <__aeabi_dmul+0x24a>
 8000a38:	ea95 0f0c 	teq	r5, ip
 8000a3c:	d106      	bne.n	8000a4c <__aeabi_ddiv+0x1b0>
 8000a3e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a42:	f43f aefd 	beq.w	8000840 <__aeabi_dmul+0x1f8>
 8000a46:	4610      	mov	r0, r2
 8000a48:	4619      	mov	r1, r3
 8000a4a:	e722      	b.n	8000892 <__aeabi_dmul+0x24a>
 8000a4c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a50:	bf18      	it	ne
 8000a52:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a56:	f47f aec5 	bne.w	80007e4 <__aeabi_dmul+0x19c>
 8000a5a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a5e:	f47f af0d 	bne.w	800087c <__aeabi_dmul+0x234>
 8000a62:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a66:	f47f aeeb 	bne.w	8000840 <__aeabi_dmul+0x1f8>
 8000a6a:	e712      	b.n	8000892 <__aeabi_dmul+0x24a>

08000a6c <__gedf2>:
 8000a6c:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
 8000a70:	e006      	b.n	8000a80 <__cmpdf2+0x4>
 8000a72:	bf00      	nop

08000a74 <__ledf2>:
 8000a74:	f04f 0c01 	mov.w	ip, #1
 8000a78:	e002      	b.n	8000a80 <__cmpdf2+0x4>
 8000a7a:	bf00      	nop

08000a7c <__cmpdf2>:
 8000a7c:	f04f 0c01 	mov.w	ip, #1
 8000a80:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a84:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a88:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a8c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a90:	bf18      	it	ne
 8000a92:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a96:	d01b      	beq.n	8000ad0 <__cmpdf2+0x54>
 8000a98:	b001      	add	sp, #4
 8000a9a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a9e:	bf0c      	ite	eq
 8000aa0:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000aa4:	ea91 0f03 	teqne	r1, r3
 8000aa8:	bf02      	ittt	eq
 8000aaa:	ea90 0f02 	teqeq	r0, r2
 8000aae:	2000      	moveq	r0, #0
 8000ab0:	4770      	bxeq	lr
 8000ab2:	f110 0f00 	cmn.w	r0, #0
 8000ab6:	ea91 0f03 	teq	r1, r3
 8000aba:	bf58      	it	pl
 8000abc:	4299      	cmppl	r1, r3
 8000abe:	bf08      	it	eq
 8000ac0:	4290      	cmpeq	r0, r2
 8000ac2:	bf2c      	ite	cs
 8000ac4:	17d8      	asrcs	r0, r3, #31
 8000ac6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000aca:	f040 0001 	orr.w	r0, r0, #1
 8000ace:	4770      	bx	lr
 8000ad0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ad4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ad8:	d102      	bne.n	8000ae0 <__cmpdf2+0x64>
 8000ada:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000ade:	d107      	bne.n	8000af0 <__cmpdf2+0x74>
 8000ae0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ae4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ae8:	d1d6      	bne.n	8000a98 <__cmpdf2+0x1c>
 8000aea:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000aee:	d0d3      	beq.n	8000a98 <__cmpdf2+0x1c>
 8000af0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000af4:	4770      	bx	lr
 8000af6:	bf00      	nop

08000af8 <__aeabi_cdrcmple>:
 8000af8:	4684      	mov	ip, r0
 8000afa:	4610      	mov	r0, r2
 8000afc:	4662      	mov	r2, ip
 8000afe:	468c      	mov	ip, r1
 8000b00:	4619      	mov	r1, r3
 8000b02:	4663      	mov	r3, ip
 8000b04:	e000      	b.n	8000b08 <__aeabi_cdcmpeq>
 8000b06:	bf00      	nop

08000b08 <__aeabi_cdcmpeq>:
 8000b08:	b501      	push	{r0, lr}
 8000b0a:	f7ff ffb7 	bl	8000a7c <__cmpdf2>
 8000b0e:	2800      	cmp	r0, #0
 8000b10:	bf48      	it	mi
 8000b12:	f110 0f00 	cmnmi.w	r0, #0
 8000b16:	bd01      	pop	{r0, pc}

08000b18 <__aeabi_dcmpeq>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff fff4 	bl	8000b08 <__aeabi_cdcmpeq>
 8000b20:	bf0c      	ite	eq
 8000b22:	2001      	moveq	r0, #1
 8000b24:	2000      	movne	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmplt>:
 8000b2c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b30:	f7ff ffea 	bl	8000b08 <__aeabi_cdcmpeq>
 8000b34:	bf34      	ite	cc
 8000b36:	2001      	movcc	r0, #1
 8000b38:	2000      	movcs	r0, #0
 8000b3a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b3e:	bf00      	nop

08000b40 <__aeabi_dcmple>:
 8000b40:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b44:	f7ff ffe0 	bl	8000b08 <__aeabi_cdcmpeq>
 8000b48:	bf94      	ite	ls
 8000b4a:	2001      	movls	r0, #1
 8000b4c:	2000      	movhi	r0, #0
 8000b4e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b52:	bf00      	nop

08000b54 <__aeabi_dcmpge>:
 8000b54:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b58:	f7ff ffce 	bl	8000af8 <__aeabi_cdrcmple>
 8000b5c:	bf94      	ite	ls
 8000b5e:	2001      	movls	r0, #1
 8000b60:	2000      	movhi	r0, #0
 8000b62:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b66:	bf00      	nop

08000b68 <__aeabi_dcmpgt>:
 8000b68:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b6c:	f7ff ffc4 	bl	8000af8 <__aeabi_cdrcmple>
 8000b70:	bf34      	ite	cc
 8000b72:	2001      	movcc	r0, #1
 8000b74:	2000      	movcs	r0, #0
 8000b76:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b7a:	bf00      	nop

08000b7c <__aeabi_dcmpun>:
 8000b7c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b80:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b84:	d102      	bne.n	8000b8c <__aeabi_dcmpun+0x10>
 8000b86:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b8a:	d10a      	bne.n	8000ba2 <__aeabi_dcmpun+0x26>
 8000b8c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b90:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b94:	d102      	bne.n	8000b9c <__aeabi_dcmpun+0x20>
 8000b96:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b9a:	d102      	bne.n	8000ba2 <__aeabi_dcmpun+0x26>
 8000b9c:	f04f 0000 	mov.w	r0, #0
 8000ba0:	4770      	bx	lr
 8000ba2:	f04f 0001 	mov.w	r0, #1
 8000ba6:	4770      	bx	lr

08000ba8 <__aeabi_d2iz>:
 8000ba8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bac:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000bb0:	d215      	bcs.n	8000bde <__aeabi_d2iz+0x36>
 8000bb2:	d511      	bpl.n	8000bd8 <__aeabi_d2iz+0x30>
 8000bb4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000bb8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bbc:	d912      	bls.n	8000be4 <__aeabi_d2iz+0x3c>
 8000bbe:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bc2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bc6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bca:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000bce:	fa23 f002 	lsr.w	r0, r3, r2
 8000bd2:	bf18      	it	ne
 8000bd4:	4240      	negne	r0, r0
 8000bd6:	4770      	bx	lr
 8000bd8:	f04f 0000 	mov.w	r0, #0
 8000bdc:	4770      	bx	lr
 8000bde:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000be2:	d105      	bne.n	8000bf0 <__aeabi_d2iz+0x48>
 8000be4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000be8:	bf08      	it	eq
 8000bea:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bee:	4770      	bx	lr
 8000bf0:	f04f 0000 	mov.w	r0, #0
 8000bf4:	4770      	bx	lr
 8000bf6:	bf00      	nop

08000bf8 <__aeabi_d2uiz>:
 8000bf8:	004a      	lsls	r2, r1, #1
 8000bfa:	d211      	bcs.n	8000c20 <__aeabi_d2uiz+0x28>
 8000bfc:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000c00:	d211      	bcs.n	8000c26 <__aeabi_d2uiz+0x2e>
 8000c02:	d50d      	bpl.n	8000c20 <__aeabi_d2uiz+0x28>
 8000c04:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000c08:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000c0c:	d40e      	bmi.n	8000c2c <__aeabi_d2uiz+0x34>
 8000c0e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c12:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000c16:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000c1a:	fa23 f002 	lsr.w	r0, r3, r2
 8000c1e:	4770      	bx	lr
 8000c20:	f04f 0000 	mov.w	r0, #0
 8000c24:	4770      	bx	lr
 8000c26:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000c2a:	d102      	bne.n	8000c32 <__aeabi_d2uiz+0x3a>
 8000c2c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000c30:	4770      	bx	lr
 8000c32:	f04f 0000 	mov.w	r0, #0
 8000c36:	4770      	bx	lr

08000c38 <DM_Init>:
 *	@param None
 *	@retval None
 *
 */
void DM_Init()
{
 8000c38:	b580      	push	{r7, lr}
 8000c3a:	af00      	add	r7, sp, #0
	  ILI9341_Init();
 8000c3c:	f00a fc78 	bl	800b530 <ILI9341_Init>
	  ILI9341_Set_Rotation(SCREEN_HORIZONTAL_2);
 8000c40:	2003      	movs	r0, #3
 8000c42:	f00b f865 	bl	800bd10 <ILI9341_Set_Rotation>
	  ILI9341_Fill_Screen(WHITE);
 8000c46:	f64f 70ff 	movw	r0, #65535	; 0xffff
 8000c4a:	f00a fe79 	bl	800b940 <ILI9341_Fill_Screen>

}
 8000c4e:	bf00      	nop
 8000c50:	bd80      	pop	{r7, pc}
	...

08000c54 <DM_PostInit>:
 *	@param None
 *	@retval None
 *
 */
void DM_PostInit()
{
 8000c54:	b580      	push	{r7, lr}
 8000c56:	b082      	sub	sp, #8
 8000c58:	af02      	add	r7, sp, #8

	  ILI9341_Draw_Text("Initialising", 10, 10, BLACK, 1, WHITE);
 8000c5a:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000c5e:	9301      	str	r3, [sp, #4]
 8000c60:	2301      	movs	r3, #1
 8000c62:	9300      	str	r3, [sp, #0]
 8000c64:	2300      	movs	r3, #0
 8000c66:	220a      	movs	r2, #10
 8000c68:	210a      	movs	r1, #10
 8000c6a:	4807      	ldr	r0, [pc, #28]	; (8000c88 <DM_PostInit+0x34>)
 8000c6c:	f00a fc0e 	bl	800b48c <ILI9341_Draw_Text>
	  HAL_Delay(500);
 8000c70:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000c74:	f004 ff14 	bl	8005aa0 <HAL_Delay>

	  DM_RefreshBackgroundLayout();
 8000c78:	f000 fc2e 	bl	80014d8 <DM_RefreshBackgroundLayout>
	  printf("Init Completed\n");
 8000c7c:	4803      	ldr	r0, [pc, #12]	; (8000c8c <DM_PostInit+0x38>)
 8000c7e:	f00b feef 	bl	800ca60 <puts>
}
 8000c82:	bf00      	nop
 8000c84:	46bd      	mov	sp, r7
 8000c86:	bd80      	pop	{r7, pc}
 8000c88:	0800e928 	.word	0x0800e928
 8000c8c:	0800e938 	.word	0x0800e938

08000c90 <DM_DisplayFormattedOutput>:
 *	@param None
 *	@retval None
 *
 */
void DM_DisplayFormattedOutput()
{
 8000c90:	b590      	push	{r4, r7, lr}
 8000c92:	b093      	sub	sp, #76	; 0x4c
 8000c94:	af02      	add	r7, sp, #8
	char out_hertz[13] = "";
 8000c96:	2300      	movs	r3, #0
 8000c98:	61fb      	str	r3, [r7, #28]
 8000c9a:	f107 0320 	add.w	r3, r7, #32
 8000c9e:	2200      	movs	r2, #0
 8000ca0:	601a      	str	r2, [r3, #0]
 8000ca2:	605a      	str	r2, [r3, #4]
 8000ca4:	721a      	strb	r2, [r3, #8]
	uint8_t out_hertz_x = 70;
 8000ca6:	2346      	movs	r3, #70	; 0x46
 8000ca8:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
	uint8_t out_hertz_y = 50;
 8000cac:	2332      	movs	r3, #50	; 0x32
 8000cae:	f887 303a 	strb.w	r3, [r7, #58]	; 0x3a

	char out_decibels[8] = "";
 8000cb2:	2300      	movs	r3, #0
 8000cb4:	617b      	str	r3, [r7, #20]
 8000cb6:	2300      	movs	r3, #0
 8000cb8:	61bb      	str	r3, [r7, #24]
	uint8_t out_decibels_x = 70;
 8000cba:	2346      	movs	r3, #70	; 0x46
 8000cbc:	f887 3039 	strb.w	r3, [r7, #57]	; 0x39
	uint8_t out_decibels_y = 80;
 8000cc0:	2350      	movs	r3, #80	; 0x50
 8000cc2:	f887 3038 	strb.w	r3, [r7, #56]	; 0x38

	float volts_per_thou = 0.00075;
 8000cc6:	4b65      	ldr	r3, [pc, #404]	; (8000e5c <DM_DisplayFormattedOutput+0x1cc>)
 8000cc8:	637b      	str	r3, [r7, #52]	; 0x34
	char out_dcvolts[10] = "";
 8000cca:	2300      	movs	r3, #0
 8000ccc:	60bb      	str	r3, [r7, #8]
 8000cce:	f107 030c 	add.w	r3, r7, #12
 8000cd2:	2200      	movs	r2, #0
 8000cd4:	601a      	str	r2, [r3, #0]
 8000cd6:	809a      	strh	r2, [r3, #4]
	uint8_t out_dcvolts_x = 70;
 8000cd8:	2346      	movs	r3, #70	; 0x46
 8000cda:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
	uint8_t out_dcvolts_y = 110;
 8000cde:	236e      	movs	r3, #110	; 0x6e
 8000ce0:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32

	// display output in hertz
	snprintf(out_hertz, sizeof(out_hertz), "%4.2f Hz", SM_GetOutputInHertz());
 8000ce4:	f003 f85e 	bl	8003da4 <SM_GetOutputInHertz>
 8000ce8:	ee10 3a10 	vmov	r3, s0
 8000cec:	4618      	mov	r0, r3
 8000cee:	f7ff fc53 	bl	8000598 <__aeabi_f2d>
 8000cf2:	4603      	mov	r3, r0
 8000cf4:	460c      	mov	r4, r1
 8000cf6:	f107 001c 	add.w	r0, r7, #28
 8000cfa:	e9cd 3400 	strd	r3, r4, [sp]
 8000cfe:	4a58      	ldr	r2, [pc, #352]	; (8000e60 <DM_DisplayFormattedOutput+0x1d0>)
 8000d00:	210d      	movs	r1, #13
 8000d02:	f00b feb5 	bl	800ca70 <sniprintf>
	ILI9341_Draw_Text(out_hertz, out_hertz_x, out_hertz_y, BLACK, 3, WHITE);
 8000d06:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 8000d0a:	b299      	uxth	r1, r3
 8000d0c:	f897 303a 	ldrb.w	r3, [r7, #58]	; 0x3a
 8000d10:	b29a      	uxth	r2, r3
 8000d12:	f107 001c 	add.w	r0, r7, #28
 8000d16:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000d1a:	9301      	str	r3, [sp, #4]
 8000d1c:	2303      	movs	r3, #3
 8000d1e:	9300      	str	r3, [sp, #0]
 8000d20:	2300      	movs	r3, #0
 8000d22:	f00a fbb3 	bl	800b48c <ILI9341_Draw_Text>

	// display output in decibels
	Gain_Preset_Encoder_Pos_t *pGainPresetTmp =  GO_GetGPresetObject();
 8000d26:	f003 f809 	bl	8003d3c <GO_GetGPresetObject>
 8000d2a:	62f8      	str	r0, [r7, #44]	; 0x2c
	if(pGainPresetTmp)
 8000d2c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000d2e:	2b00      	cmp	r3, #0
 8000d30:	d027      	beq.n	8000d82 <DM_DisplayFormattedOutput+0xf2>
	{
		if(pGainPresetTmp->decibels < 0)
 8000d32:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000d34:	f993 3001 	ldrsb.w	r3, [r3, #1]
 8000d38:	2b00      	cmp	r3, #0
 8000d3a:	da06      	bge.n	8000d4a <DM_DisplayFormattedOutput+0xba>
			snprintf(out_decibels, sizeof(out_decibels), "AMP OFF");
 8000d3c:	4a49      	ldr	r2, [pc, #292]	; (8000e64 <DM_DisplayFormattedOutput+0x1d4>)
 8000d3e:	f107 0314 	add.w	r3, r7, #20
 8000d42:	e892 0003 	ldmia.w	r2, {r0, r1}
 8000d46:	e883 0003 	stmia.w	r3, {r0, r1}
		if(pGainPresetTmp->decibels == 0)
 8000d4a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000d4c:	f993 3001 	ldrsb.w	r3, [r3, #1]
 8000d50:	2b00      	cmp	r3, #0
 8000d52:	d108      	bne.n	8000d66 <DM_DisplayFormattedOutput+0xd6>
			snprintf(out_decibels, sizeof(out_decibels), "  %2d dB", pGainPresetTmp->decibels);
 8000d54:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000d56:	f993 3001 	ldrsb.w	r3, [r3, #1]
 8000d5a:	f107 0014 	add.w	r0, r7, #20
 8000d5e:	4a42      	ldr	r2, [pc, #264]	; (8000e68 <DM_DisplayFormattedOutput+0x1d8>)
 8000d60:	2108      	movs	r1, #8
 8000d62:	f00b fe85 	bl	800ca70 <sniprintf>
		if(pGainPresetTmp->decibels > 0)
 8000d66:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000d68:	f993 3001 	ldrsb.w	r3, [r3, #1]
 8000d6c:	2b00      	cmp	r3, #0
 8000d6e:	dd08      	ble.n	8000d82 <DM_DisplayFormattedOutput+0xf2>
			snprintf(out_decibels, sizeof(out_decibels), " +%2d dB", pGainPresetTmp->decibels);
 8000d70:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000d72:	f993 3001 	ldrsb.w	r3, [r3, #1]
 8000d76:	f107 0014 	add.w	r0, r7, #20
 8000d7a:	4a3c      	ldr	r2, [pc, #240]	; (8000e6c <DM_DisplayFormattedOutput+0x1dc>)
 8000d7c:	2108      	movs	r1, #8
 8000d7e:	f00b fe77 	bl	800ca70 <sniprintf>

	}

	ILI9341_Draw_Text(out_decibels, out_decibels_x, out_decibels_y, BLACK, 3, WHITE);
 8000d82:	f897 3039 	ldrb.w	r3, [r7, #57]	; 0x39
 8000d86:	b299      	uxth	r1, r3
 8000d88:	f897 3038 	ldrb.w	r3, [r7, #56]	; 0x38
 8000d8c:	b29a      	uxth	r2, r3
 8000d8e:	f107 0014 	add.w	r0, r7, #20
 8000d92:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000d96:	9301      	str	r3, [sp, #4]
 8000d98:	2303      	movs	r3, #3
 8000d9a:	9300      	str	r3, [sp, #0]
 8000d9c:	2300      	movs	r3, #0
 8000d9e:	f00a fb75 	bl	800b48c <ILI9341_Draw_Text>

	// display output bias in +/- Volts
	float dc_volts;
	(BO_GetOutputBias() == 0) ? (dc_volts = 0) : (dc_volts = volts_per_thou * (float)BO_GetOutputBias());
 8000da2:	f002 fb6d 	bl	8003480 <BO_GetOutputBias>
 8000da6:	4603      	mov	r3, r0
 8000da8:	2b00      	cmp	r3, #0
 8000daa:	d103      	bne.n	8000db4 <DM_DisplayFormattedOutput+0x124>
 8000dac:	f04f 0300 	mov.w	r3, #0
 8000db0:	63fb      	str	r3, [r7, #60]	; 0x3c
 8000db2:	e00b      	b.n	8000dcc <DM_DisplayFormattedOutput+0x13c>
 8000db4:	f002 fb64 	bl	8003480 <BO_GetOutputBias>
 8000db8:	ee07 0a90 	vmov	s15, r0
 8000dbc:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8000dc0:	ed97 7a0d 	vldr	s14, [r7, #52]	; 0x34
 8000dc4:	ee67 7a27 	vmul.f32	s15, s14, s15
 8000dc8:	edc7 7a0f 	vstr	s15, [r7, #60]	; 0x3c

	snprintf(out_dcvolts, sizeof(out_dcvolts), "%1.4f v", dc_volts);
 8000dcc:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8000dce:	f7ff fbe3 	bl	8000598 <__aeabi_f2d>
 8000dd2:	4603      	mov	r3, r0
 8000dd4:	460c      	mov	r4, r1
 8000dd6:	f107 0008 	add.w	r0, r7, #8
 8000dda:	e9cd 3400 	strd	r3, r4, [sp]
 8000dde:	4a24      	ldr	r2, [pc, #144]	; (8000e70 <DM_DisplayFormattedOutput+0x1e0>)
 8000de0:	210a      	movs	r1, #10
 8000de2:	f00b fe45 	bl	800ca70 <sniprintf>
	if(BO_GetBiasPolarity())
 8000de6:	f002 faeb 	bl	80033c0 <BO_GetBiasPolarity>
 8000dea:	4603      	mov	r3, r0
 8000dec:	2b00      	cmp	r3, #0
 8000dee:	d018      	beq.n	8000e22 <DM_DisplayFormattedOutput+0x192>
	{
		char symbol[2] = "+\0";
 8000df0:	4b20      	ldr	r3, [pc, #128]	; (8000e74 <DM_DisplayFormattedOutput+0x1e4>)
 8000df2:	881b      	ldrh	r3, [r3, #0]
 8000df4:	80bb      	strh	r3, [r7, #4]
		ILI9341_Draw_Text(strcat(symbol, out_dcvolts), out_dcvolts_x, out_dcvolts_y, BLACK, 3, WHITE);
 8000df6:	f107 0208 	add.w	r2, r7, #8
 8000dfa:	1d3b      	adds	r3, r7, #4
 8000dfc:	4611      	mov	r1, r2
 8000dfe:	4618      	mov	r0, r3
 8000e00:	f00b fe6a 	bl	800cad8 <strcat>
 8000e04:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8000e08:	b299      	uxth	r1, r3
 8000e0a:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 8000e0e:	b29a      	uxth	r2, r3
 8000e10:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000e14:	9301      	str	r3, [sp, #4]
 8000e16:	2303      	movs	r3, #3
 8000e18:	9300      	str	r3, [sp, #0]
 8000e1a:	2300      	movs	r3, #0
 8000e1c:	f00a fb36 	bl	800b48c <ILI9341_Draw_Text>
	{
		char symbol[2] = "-\0";
		ILI9341_Draw_Text(strcat(symbol, out_dcvolts), out_dcvolts_x, out_dcvolts_y, BLACK, 3, WHITE);
	}

}
 8000e20:	e017      	b.n	8000e52 <DM_DisplayFormattedOutput+0x1c2>
		char symbol[2] = "-\0";
 8000e22:	4b15      	ldr	r3, [pc, #84]	; (8000e78 <DM_DisplayFormattedOutput+0x1e8>)
 8000e24:	881b      	ldrh	r3, [r3, #0]
 8000e26:	803b      	strh	r3, [r7, #0]
		ILI9341_Draw_Text(strcat(symbol, out_dcvolts), out_dcvolts_x, out_dcvolts_y, BLACK, 3, WHITE);
 8000e28:	f107 0208 	add.w	r2, r7, #8
 8000e2c:	463b      	mov	r3, r7
 8000e2e:	4611      	mov	r1, r2
 8000e30:	4618      	mov	r0, r3
 8000e32:	f00b fe51 	bl	800cad8 <strcat>
 8000e36:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8000e3a:	b299      	uxth	r1, r3
 8000e3c:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 8000e40:	b29a      	uxth	r2, r3
 8000e42:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000e46:	9301      	str	r3, [sp, #4]
 8000e48:	2303      	movs	r3, #3
 8000e4a:	9300      	str	r3, [sp, #0]
 8000e4c:	2300      	movs	r3, #0
 8000e4e:	f00a fb1d 	bl	800b48c <ILI9341_Draw_Text>
}
 8000e52:	bf00      	nop
 8000e54:	3744      	adds	r7, #68	; 0x44
 8000e56:	46bd      	mov	sp, r7
 8000e58:	bd90      	pop	{r4, r7, pc}
 8000e5a:	bf00      	nop
 8000e5c:	3a449ba6 	.word	0x3a449ba6
 8000e60:	0800e948 	.word	0x0800e948
 8000e64:	0800e954 	.word	0x0800e954
 8000e68:	0800e95c 	.word	0x0800e95c
 8000e6c:	0800e968 	.word	0x0800e968
 8000e70:	0800e974 	.word	0x0800e974
 8000e74:	0800e97c 	.word	0x0800e97c
 8000e78:	0800e980 	.word	0x0800e980

08000e7c <DM_UpdateDisplay>:
 *	@param None
 *	@retval None
 *
 */
void DM_UpdateDisplay()
{
 8000e7c:	b580      	push	{r7, lr}
 8000e7e:	b084      	sub	sp, #16
 8000e80:	af02      	add	r7, sp, #8


	if(eNextFuncMenuStatus)		//  == ENABLE_FUNCMENU
 8000e82:	4b53      	ldr	r3, [pc, #332]	; (8000fd0 <DM_UpdateDisplay+0x154>)
 8000e84:	781b      	ldrb	r3, [r3, #0]
 8000e86:	2b00      	cmp	r3, #0
 8000e88:	d002      	beq.n	8000e90 <DM_UpdateDisplay+0x14>
 		ILI9341_Draw_Text("    ", 10, 210, BLACK, 2, DARKCYAN);
		ILI9341_Draw_Text("    ", 100, 210, BLACK, 2, DARKGREEN);
		ILI9341_Draw_Text("    ", 175, 210, BLACK, 2, YELLOW);
		ILI9341_Draw_Text("    ", 260, 210, BLACK, 2, RED);
*/
		_DrawFuncSelectMenu();
 8000e8a:	f000 f8c7 	bl	800101c <_DrawFuncSelectMenu>
 8000e8e:	e071      	b.n	8000f74 <DM_UpdateDisplay+0xf8>
	}
	else if(eNextGainMenuStatus)		//  == ENABLE_GAINMENU
 8000e90:	4b50      	ldr	r3, [pc, #320]	; (8000fd4 <DM_UpdateDisplay+0x158>)
 8000e92:	781b      	ldrb	r3, [r3, #0]
 8000e94:	2b00      	cmp	r3, #0
 8000e96:	d004      	beq.n	8000ea2 <DM_UpdateDisplay+0x26>
		ILI9341_Draw_Text("    ", 10, 210, BLACK, 2, DARKCYAN);
		ILI9341_Draw_Text("    ", 100, 210, BLACK, 2, DARKGREEN);
		ILI9341_Draw_Text("    ", 175, 210, BLACK, 2, YELLOW);
		ILI9341_Draw_Text("    ", 260, 210, BLACK, 2, RED);
*/
		DM_DisplayFormattedOutput();
 8000e98:	f7ff fefa 	bl	8000c90 <DM_DisplayFormattedOutput>
		_DrawGainSelectMenu();
 8000e9c:	f000 faaa 	bl	80013f4 <_DrawGainSelectMenu>
 8000ea0:	e068      	b.n	8000f74 <DM_UpdateDisplay+0xf8>
	}
	else if(eNextFreqMenuStatus)		//  frequency menu enabled
 8000ea2:	4b4d      	ldr	r3, [pc, #308]	; (8000fd8 <DM_UpdateDisplay+0x15c>)
 8000ea4:	781b      	ldrb	r3, [r3, #0]
 8000ea6:	2b00      	cmp	r3, #0
 8000ea8:	d02a      	beq.n	8000f00 <DM_UpdateDisplay+0x84>
	{

		ILI9341_Draw_Text("FREQUENCY MENU", 	30, 10, WHITE, 3, BLACK);
 8000eaa:	2300      	movs	r3, #0
 8000eac:	9301      	str	r3, [sp, #4]
 8000eae:	2303      	movs	r3, #3
 8000eb0:	9300      	str	r3, [sp, #0]
 8000eb2:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000eb6:	220a      	movs	r2, #10
 8000eb8:	211e      	movs	r1, #30
 8000eba:	4848      	ldr	r0, [pc, #288]	; (8000fdc <DM_UpdateDisplay+0x160>)
 8000ebc:	f00a fae6 	bl	800b48c <ILI9341_Draw_Text>
		ILI9341_Draw_Text("1Hz", 24, 210, BLACK, 2, DARKCYAN);
		ILI9341_Draw_Text("100Hz", 93, 210, BLACK, 2, DARKGREEN);
		ILI9341_Draw_Text("1KHz", 175, 210, BLACK, 2, YELLOW);
		ILI9341_Draw_Text("100KHz", 247, 210, BLACK, 2, RED);
*/
		switch(eNextFreqMenuStatus)
 8000ec0:	4b45      	ldr	r3, [pc, #276]	; (8000fd8 <DM_UpdateDisplay+0x15c>)
 8000ec2:	781b      	ldrb	r3, [r3, #0]
 8000ec4:	3b01      	subs	r3, #1
 8000ec6:	2b03      	cmp	r3, #3
 8000ec8:	d853      	bhi.n	8000f72 <DM_UpdateDisplay+0xf6>
 8000eca:	a201      	add	r2, pc, #4	; (adr r2, 8000ed0 <DM_UpdateDisplay+0x54>)
 8000ecc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000ed0:	08000ee1 	.word	0x08000ee1
 8000ed4:	08000eeb 	.word	0x08000eeb
 8000ed8:	08000ef1 	.word	0x08000ef1
 8000edc:	08000efb 	.word	0x08000efb
		{
			case ENABLE_FREQ_MAIN_MENU:

				DM_DisplayFormattedOutput();
 8000ee0:	f7ff fed6 	bl	8000c90 <DM_DisplayFormattedOutput>

				FreqMenu_DrawFreqMainMenu();
 8000ee4:	f000 fbc0 	bl	8001668 <FreqMenu_DrawFreqMainMenu>

				break;
 8000ee8:	e044      	b.n	8000f74 <DM_UpdateDisplay+0xf8>

			case ENABLE_FREQ_PRESET_MENU:
				FreqMenu_DrawFreqPresetMenu();
 8000eea:	f000 fbf7 	bl	80016dc <FreqMenu_DrawFreqPresetMenu>
				break;
 8000eee:	e041      	b.n	8000f74 <DM_UpdateDisplay+0xf8>

			case ENABLE_FREQ_ADJUST_MENU:

				DM_DisplayFormattedOutput();
 8000ef0:	f7ff fece 	bl	8000c90 <DM_DisplayFormattedOutput>

				FreqMenu_DrawFreqAdjustMenu();
 8000ef4:	f001 fe78 	bl	8002be8 <FreqMenu_DrawFreqAdjustMenu>

				break;
 8000ef8:	e03c      	b.n	8000f74 <DM_UpdateDisplay+0xf8>

			case ENABLE_FREQ_SWEEP_MENU:
				FreqMenu_DrawFreqSweepMenu();
 8000efa:	f001 fea5 	bl	8002c48 <FreqMenu_DrawFreqSweepMenu>
				break;
 8000efe:	e039      	b.n	8000f74 <DM_UpdateDisplay+0xf8>
			default:
				break;
		}

	}
	else if(eNextBiasMenuStatus)		//  == ENABLE_BIASMENU
 8000f00:	4b37      	ldr	r3, [pc, #220]	; (8000fe0 <DM_UpdateDisplay+0x164>)
 8000f02:	781b      	ldrb	r3, [r3, #0]
 8000f04:	2b00      	cmp	r3, #0
 8000f06:	d004      	beq.n	8000f12 <DM_UpdateDisplay+0x96>
		ILI9341_Draw_Text("    ", 10, 210, BLACK, 2, DARKCYAN);
		ILI9341_Draw_Text("    ", 100, 210, BLACK, 2, DARKGREEN);
		ILI9341_Draw_Text("    ", 175, 210, BLACK, 2, YELLOW);
		ILI9341_Draw_Text("    ", 260, 210, BLACK, 2, RED);
*/
		DM_DisplayFormattedOutput();
 8000f08:	f7ff fec2 	bl	8000c90 <DM_DisplayFormattedOutput>
		_DrawBiasSelectMenu();
 8000f0c:	f000 faa6 	bl	800145c <_DrawBiasSelectMenu>
 8000f10:	e030      	b.n	8000f74 <DM_UpdateDisplay+0xf8>
	}
	else
	{
		DM_DisplayFormattedOutput();
 8000f12:	f7ff febd 	bl	8000c90 <DM_DisplayFormattedOutput>

		ILI9341_Draw_Text("FUNC", 10, 210, BLACK, 2, DARKCYAN);
 8000f16:	f240 33ef 	movw	r3, #1007	; 0x3ef
 8000f1a:	9301      	str	r3, [sp, #4]
 8000f1c:	2302      	movs	r3, #2
 8000f1e:	9300      	str	r3, [sp, #0]
 8000f20:	2300      	movs	r3, #0
 8000f22:	22d2      	movs	r2, #210	; 0xd2
 8000f24:	210a      	movs	r1, #10
 8000f26:	482f      	ldr	r0, [pc, #188]	; (8000fe4 <DM_UpdateDisplay+0x168>)
 8000f28:	f00a fab0 	bl	800b48c <ILI9341_Draw_Text>
		ILI9341_Draw_Text("FREQ", 100, 210, BLACK, 2, DARKGREEN);
 8000f2c:	f44f 7378 	mov.w	r3, #992	; 0x3e0
 8000f30:	9301      	str	r3, [sp, #4]
 8000f32:	2302      	movs	r3, #2
 8000f34:	9300      	str	r3, [sp, #0]
 8000f36:	2300      	movs	r3, #0
 8000f38:	22d2      	movs	r2, #210	; 0xd2
 8000f3a:	2164      	movs	r1, #100	; 0x64
 8000f3c:	482a      	ldr	r0, [pc, #168]	; (8000fe8 <DM_UpdateDisplay+0x16c>)
 8000f3e:	f00a faa5 	bl	800b48c <ILI9341_Draw_Text>
		ILI9341_Draw_Text("GAIN", 175, 210, BLACK, 2, YELLOW);
 8000f42:	f64f 73e0 	movw	r3, #65504	; 0xffe0
 8000f46:	9301      	str	r3, [sp, #4]
 8000f48:	2302      	movs	r3, #2
 8000f4a:	9300      	str	r3, [sp, #0]
 8000f4c:	2300      	movs	r3, #0
 8000f4e:	22d2      	movs	r2, #210	; 0xd2
 8000f50:	21af      	movs	r1, #175	; 0xaf
 8000f52:	4826      	ldr	r0, [pc, #152]	; (8000fec <DM_UpdateDisplay+0x170>)
 8000f54:	f00a fa9a 	bl	800b48c <ILI9341_Draw_Text>
		ILI9341_Draw_Text("BIAS", 260, 210, BLACK, 2, RED);
 8000f58:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8000f5c:	9301      	str	r3, [sp, #4]
 8000f5e:	2302      	movs	r3, #2
 8000f60:	9300      	str	r3, [sp, #0]
 8000f62:	2300      	movs	r3, #0
 8000f64:	22d2      	movs	r2, #210	; 0xd2
 8000f66:	f44f 7182 	mov.w	r1, #260	; 0x104
 8000f6a:	4821      	ldr	r0, [pc, #132]	; (8000ff0 <DM_UpdateDisplay+0x174>)
 8000f6c:	f00a fa8e 	bl	800b48c <ILI9341_Draw_Text>
 8000f70:	e000      	b.n	8000f74 <DM_UpdateDisplay+0xf8>
				break;
 8000f72:	bf00      	nop
	}

#ifdef ENCODER_DEBUG
	char encoder_value[5] = "";
 8000f74:	2300      	movs	r3, #0
 8000f76:	603b      	str	r3, [r7, #0]
 8000f78:	2300      	movs	r3, #0
 8000f7a:	713b      	strb	r3, [r7, #4]
	//snprintf(tim1tmp, sizeof(tim1tmp), "%lu", ENCODER_TIMER->CNT);
	if(DM_AddDigitPadding(ENCODER_TIMER->CNT, encoder_value, sizeof(encoder_value)) == 0)
 8000f7c:	4b1d      	ldr	r3, [pc, #116]	; (8000ff4 <DM_UpdateDisplay+0x178>)
 8000f7e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000f80:	b29b      	uxth	r3, r3
 8000f82:	4639      	mov	r1, r7
 8000f84:	2205      	movs	r2, #5
 8000f86:	4618      	mov	r0, r3
 8000f88:	f000 fae8 	bl	800155c <DM_AddDigitPadding>
 8000f8c:	4603      	mov	r3, r0
 8000f8e:	2b00      	cmp	r3, #0
 8000f90:	d10b      	bne.n	8000faa <DM_UpdateDisplay+0x12e>
		ILI9341_Draw_Text(encoder_value, 280, 190, BLACK, 1, RED);
 8000f92:	4638      	mov	r0, r7
 8000f94:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8000f98:	9301      	str	r3, [sp, #4]
 8000f9a:	2301      	movs	r3, #1
 8000f9c:	9300      	str	r3, [sp, #0]
 8000f9e:	2300      	movs	r3, #0
 8000fa0:	22be      	movs	r2, #190	; 0xbe
 8000fa2:	f44f 718c 	mov.w	r1, #280	; 0x118
 8000fa6:	f00a fa71 	bl	800b48c <ILI9341_Draw_Text>
#endif //ENCODER_DEBUG

	if(*ErrorDebugMsg)
 8000faa:	4b13      	ldr	r3, [pc, #76]	; (8000ff8 <DM_UpdateDisplay+0x17c>)
 8000fac:	781b      	ldrb	r3, [r3, #0]
 8000fae:	2b00      	cmp	r3, #0
 8000fb0:	d00a      	beq.n	8000fc8 <DM_UpdateDisplay+0x14c>
		ILI9341_Draw_Text(ErrorDebugMsg, 10, 190, BLACK, 1, RED);
 8000fb2:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8000fb6:	9301      	str	r3, [sp, #4]
 8000fb8:	2301      	movs	r3, #1
 8000fba:	9300      	str	r3, [sp, #0]
 8000fbc:	2300      	movs	r3, #0
 8000fbe:	22be      	movs	r2, #190	; 0xbe
 8000fc0:	210a      	movs	r1, #10
 8000fc2:	480d      	ldr	r0, [pc, #52]	; (8000ff8 <DM_UpdateDisplay+0x17c>)
 8000fc4:	f00a fa62 	bl	800b48c <ILI9341_Draw_Text>

}
 8000fc8:	bf00      	nop
 8000fca:	3708      	adds	r7, #8
 8000fcc:	46bd      	mov	sp, r7
 8000fce:	bd80      	pop	{r7, pc}
 8000fd0:	20001620 	.word	0x20001620
 8000fd4:	20001621 	.word	0x20001621
 8000fd8:	20001622 	.word	0x20001622
 8000fdc:	0800e984 	.word	0x0800e984
 8000fe0:	20001623 	.word	0x20001623
 8000fe4:	0800e994 	.word	0x0800e994
 8000fe8:	0800e99c 	.word	0x0800e99c
 8000fec:	0800e9a4 	.word	0x0800e9a4
 8000ff0:	0800e9ac 	.word	0x0800e9ac
 8000ff4:	40012c00 	.word	0x40012c00
 8000ff8:	20001624 	.word	0x20001624

08000ffc <DM_ShowFuncSelectMenu>:
 *	@param None
 *	@retval None
 *
 */
void DM_ShowFuncSelectMenu(eFuncMenu_Status pValue)
{
 8000ffc:	b480      	push	{r7}
 8000ffe:	b083      	sub	sp, #12
 8001000:	af00      	add	r7, sp, #0
 8001002:	4603      	mov	r3, r0
 8001004:	71fb      	strb	r3, [r7, #7]
	eNextFuncMenuStatus = pValue;
 8001006:	4a04      	ldr	r2, [pc, #16]	; (8001018 <DM_ShowFuncSelectMenu+0x1c>)
 8001008:	79fb      	ldrb	r3, [r7, #7]
 800100a:	7013      	strb	r3, [r2, #0]
}
 800100c:	bf00      	nop
 800100e:	370c      	adds	r7, #12
 8001010:	46bd      	mov	sp, r7
 8001012:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001016:	4770      	bx	lr
 8001018:	20001620 	.word	0x20001620

0800101c <_DrawFuncSelectMenu>:
 *	@param None
 *	@retval None
 *
 */
void _DrawFuncSelectMenu()
{
 800101c:	b580      	push	{r7, lr}
 800101e:	b084      	sub	sp, #16
 8001020:	af02      	add	r7, sp, #8
	ILI9341_Draw_Text("SELECT FUNCTION", 	10, 10, WHITE, 3, BLACK);
 8001022:	2300      	movs	r3, #0
 8001024:	9301      	str	r3, [sp, #4]
 8001026:	2303      	movs	r3, #3
 8001028:	9300      	str	r3, [sp, #0]
 800102a:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800102e:	220a      	movs	r2, #10
 8001030:	210a      	movs	r1, #10
 8001032:	48b7      	ldr	r0, [pc, #732]	; (8001310 <_DrawFuncSelectMenu+0x2f4>)
 8001034:	f00a fa2a 	bl	800b48c <ILI9341_Draw_Text>

	Func_Preset_Encoder_Pos_t *pFuncPresetTmp = FuncO_GetFPresetObject();
 8001038:	f002 fd2c 	bl	8003a94 <FuncO_GetFPresetObject>
 800103c:	6078      	str	r0, [r7, #4]
	if(pFuncPresetTmp)
 800103e:	687b      	ldr	r3, [r7, #4]
 8001040:	2b00      	cmp	r3, #0
 8001042:	f000 81b6 	beq.w	80013b2 <_DrawFuncSelectMenu+0x396>
	{
		switch(pFuncPresetTmp->func)
 8001046:	687b      	ldr	r3, [r7, #4]
 8001048:	781b      	ldrb	r3, [r3, #0]
 800104a:	2b05      	cmp	r3, #5
 800104c:	f200 81b1 	bhi.w	80013b2 <_DrawFuncSelectMenu+0x396>
 8001050:	a201      	add	r2, pc, #4	; (adr r2, 8001058 <_DrawFuncSelectMenu+0x3c>)
 8001052:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001056:	bf00      	nop
 8001058:	08001071 	.word	0x08001071
 800105c:	080010f7 	.word	0x080010f7
 8001060:	0800117d 	.word	0x0800117d
 8001064:	08001203 	.word	0x08001203
 8001068:	08001289 	.word	0x08001289
 800106c:	0800132d 	.word	0x0800132d
		{
			case SINE_FUNC_MODE:
				ILI9341_Draw_Text("- SINE", 	10, 50, WHITE, 2, BLACK);
 8001070:	2300      	movs	r3, #0
 8001072:	9301      	str	r3, [sp, #4]
 8001074:	2302      	movs	r3, #2
 8001076:	9300      	str	r3, [sp, #0]
 8001078:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800107c:	2232      	movs	r2, #50	; 0x32
 800107e:	210a      	movs	r1, #10
 8001080:	48a4      	ldr	r0, [pc, #656]	; (8001314 <_DrawFuncSelectMenu+0x2f8>)
 8001082:	f00a fa03 	bl	800b48c <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- SQUARE", 	10, 70, BLACK, 2, WHITE);
 8001086:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800108a:	9301      	str	r3, [sp, #4]
 800108c:	2302      	movs	r3, #2
 800108e:	9300      	str	r3, [sp, #0]
 8001090:	2300      	movs	r3, #0
 8001092:	2246      	movs	r2, #70	; 0x46
 8001094:	210a      	movs	r1, #10
 8001096:	48a0      	ldr	r0, [pc, #640]	; (8001318 <_DrawFuncSelectMenu+0x2fc>)
 8001098:	f00a f9f8 	bl	800b48c <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- SAW", 		10, 90, BLACK, 2, WHITE);
 800109c:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80010a0:	9301      	str	r3, [sp, #4]
 80010a2:	2302      	movs	r3, #2
 80010a4:	9300      	str	r3, [sp, #0]
 80010a6:	2300      	movs	r3, #0
 80010a8:	225a      	movs	r2, #90	; 0x5a
 80010aa:	210a      	movs	r1, #10
 80010ac:	489b      	ldr	r0, [pc, #620]	; (800131c <_DrawFuncSelectMenu+0x300>)
 80010ae:	f00a f9ed 	bl	800b48c <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- REV SAW", 	10, 110, BLACK, 2, WHITE);
 80010b2:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80010b6:	9301      	str	r3, [sp, #4]
 80010b8:	2302      	movs	r3, #2
 80010ba:	9300      	str	r3, [sp, #0]
 80010bc:	2300      	movs	r3, #0
 80010be:	226e      	movs	r2, #110	; 0x6e
 80010c0:	210a      	movs	r1, #10
 80010c2:	4897      	ldr	r0, [pc, #604]	; (8001320 <_DrawFuncSelectMenu+0x304>)
 80010c4:	f00a f9e2 	bl	800b48c <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- TRIANGLE",	10, 130, BLACK, 2, WHITE);
 80010c8:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80010cc:	9301      	str	r3, [sp, #4]
 80010ce:	2302      	movs	r3, #2
 80010d0:	9300      	str	r3, [sp, #0]
 80010d2:	2300      	movs	r3, #0
 80010d4:	2282      	movs	r2, #130	; 0x82
 80010d6:	210a      	movs	r1, #10
 80010d8:	4892      	ldr	r0, [pc, #584]	; (8001324 <_DrawFuncSelectMenu+0x308>)
 80010da:	f00a f9d7 	bl	800b48c <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- UNIT", 	10, 150, BLACK, 2, WHITE);
 80010de:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80010e2:	9301      	str	r3, [sp, #4]
 80010e4:	2302      	movs	r3, #2
 80010e6:	9300      	str	r3, [sp, #0]
 80010e8:	2300      	movs	r3, #0
 80010ea:	2296      	movs	r2, #150	; 0x96
 80010ec:	210a      	movs	r1, #10
 80010ee:	488e      	ldr	r0, [pc, #568]	; (8001328 <_DrawFuncSelectMenu+0x30c>)
 80010f0:	f00a f9cc 	bl	800b48c <ILI9341_Draw_Text>
				break;
 80010f4:	e15d      	b.n	80013b2 <_DrawFuncSelectMenu+0x396>
			case SQUARE_FUNC_MODE:
				ILI9341_Draw_Text("- SINE", 	10, 50, BLACK, 2, WHITE);
 80010f6:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80010fa:	9301      	str	r3, [sp, #4]
 80010fc:	2302      	movs	r3, #2
 80010fe:	9300      	str	r3, [sp, #0]
 8001100:	2300      	movs	r3, #0
 8001102:	2232      	movs	r2, #50	; 0x32
 8001104:	210a      	movs	r1, #10
 8001106:	4883      	ldr	r0, [pc, #524]	; (8001314 <_DrawFuncSelectMenu+0x2f8>)
 8001108:	f00a f9c0 	bl	800b48c <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- SQUARE", 	10, 70, WHITE, 2, BLACK);
 800110c:	2300      	movs	r3, #0
 800110e:	9301      	str	r3, [sp, #4]
 8001110:	2302      	movs	r3, #2
 8001112:	9300      	str	r3, [sp, #0]
 8001114:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001118:	2246      	movs	r2, #70	; 0x46
 800111a:	210a      	movs	r1, #10
 800111c:	487e      	ldr	r0, [pc, #504]	; (8001318 <_DrawFuncSelectMenu+0x2fc>)
 800111e:	f00a f9b5 	bl	800b48c <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- SAW", 		10, 90, BLACK, 2, WHITE);
 8001122:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001126:	9301      	str	r3, [sp, #4]
 8001128:	2302      	movs	r3, #2
 800112a:	9300      	str	r3, [sp, #0]
 800112c:	2300      	movs	r3, #0
 800112e:	225a      	movs	r2, #90	; 0x5a
 8001130:	210a      	movs	r1, #10
 8001132:	487a      	ldr	r0, [pc, #488]	; (800131c <_DrawFuncSelectMenu+0x300>)
 8001134:	f00a f9aa 	bl	800b48c <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- REV SAW", 	10, 110, BLACK, 2, WHITE);
 8001138:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800113c:	9301      	str	r3, [sp, #4]
 800113e:	2302      	movs	r3, #2
 8001140:	9300      	str	r3, [sp, #0]
 8001142:	2300      	movs	r3, #0
 8001144:	226e      	movs	r2, #110	; 0x6e
 8001146:	210a      	movs	r1, #10
 8001148:	4875      	ldr	r0, [pc, #468]	; (8001320 <_DrawFuncSelectMenu+0x304>)
 800114a:	f00a f99f 	bl	800b48c <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- TRIANGLE",	10, 130, BLACK, 2, WHITE);
 800114e:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001152:	9301      	str	r3, [sp, #4]
 8001154:	2302      	movs	r3, #2
 8001156:	9300      	str	r3, [sp, #0]
 8001158:	2300      	movs	r3, #0
 800115a:	2282      	movs	r2, #130	; 0x82
 800115c:	210a      	movs	r1, #10
 800115e:	4871      	ldr	r0, [pc, #452]	; (8001324 <_DrawFuncSelectMenu+0x308>)
 8001160:	f00a f994 	bl	800b48c <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- UNIT", 	10, 150, BLACK, 2, WHITE);
 8001164:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001168:	9301      	str	r3, [sp, #4]
 800116a:	2302      	movs	r3, #2
 800116c:	9300      	str	r3, [sp, #0]
 800116e:	2300      	movs	r3, #0
 8001170:	2296      	movs	r2, #150	; 0x96
 8001172:	210a      	movs	r1, #10
 8001174:	486c      	ldr	r0, [pc, #432]	; (8001328 <_DrawFuncSelectMenu+0x30c>)
 8001176:	f00a f989 	bl	800b48c <ILI9341_Draw_Text>
				break;
 800117a:	e11a      	b.n	80013b2 <_DrawFuncSelectMenu+0x396>
			case SAW_FUNC_MODE:
				ILI9341_Draw_Text("- SINE", 	10, 50, BLACK, 2, WHITE);
 800117c:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001180:	9301      	str	r3, [sp, #4]
 8001182:	2302      	movs	r3, #2
 8001184:	9300      	str	r3, [sp, #0]
 8001186:	2300      	movs	r3, #0
 8001188:	2232      	movs	r2, #50	; 0x32
 800118a:	210a      	movs	r1, #10
 800118c:	4861      	ldr	r0, [pc, #388]	; (8001314 <_DrawFuncSelectMenu+0x2f8>)
 800118e:	f00a f97d 	bl	800b48c <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- SQUARE", 	10, 70, BLACK, 2, WHITE);
 8001192:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001196:	9301      	str	r3, [sp, #4]
 8001198:	2302      	movs	r3, #2
 800119a:	9300      	str	r3, [sp, #0]
 800119c:	2300      	movs	r3, #0
 800119e:	2246      	movs	r2, #70	; 0x46
 80011a0:	210a      	movs	r1, #10
 80011a2:	485d      	ldr	r0, [pc, #372]	; (8001318 <_DrawFuncSelectMenu+0x2fc>)
 80011a4:	f00a f972 	bl	800b48c <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- SAW", 		10, 90, WHITE, 2, BLACK);
 80011a8:	2300      	movs	r3, #0
 80011aa:	9301      	str	r3, [sp, #4]
 80011ac:	2302      	movs	r3, #2
 80011ae:	9300      	str	r3, [sp, #0]
 80011b0:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80011b4:	225a      	movs	r2, #90	; 0x5a
 80011b6:	210a      	movs	r1, #10
 80011b8:	4858      	ldr	r0, [pc, #352]	; (800131c <_DrawFuncSelectMenu+0x300>)
 80011ba:	f00a f967 	bl	800b48c <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- REV SAW", 	10, 110, BLACK, 2, WHITE);
 80011be:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80011c2:	9301      	str	r3, [sp, #4]
 80011c4:	2302      	movs	r3, #2
 80011c6:	9300      	str	r3, [sp, #0]
 80011c8:	2300      	movs	r3, #0
 80011ca:	226e      	movs	r2, #110	; 0x6e
 80011cc:	210a      	movs	r1, #10
 80011ce:	4854      	ldr	r0, [pc, #336]	; (8001320 <_DrawFuncSelectMenu+0x304>)
 80011d0:	f00a f95c 	bl	800b48c <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- TRIANGLE",	10, 130, BLACK, 2, WHITE);
 80011d4:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80011d8:	9301      	str	r3, [sp, #4]
 80011da:	2302      	movs	r3, #2
 80011dc:	9300      	str	r3, [sp, #0]
 80011de:	2300      	movs	r3, #0
 80011e0:	2282      	movs	r2, #130	; 0x82
 80011e2:	210a      	movs	r1, #10
 80011e4:	484f      	ldr	r0, [pc, #316]	; (8001324 <_DrawFuncSelectMenu+0x308>)
 80011e6:	f00a f951 	bl	800b48c <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- UNIT", 	10, 150, BLACK, 2, WHITE);
 80011ea:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80011ee:	9301      	str	r3, [sp, #4]
 80011f0:	2302      	movs	r3, #2
 80011f2:	9300      	str	r3, [sp, #0]
 80011f4:	2300      	movs	r3, #0
 80011f6:	2296      	movs	r2, #150	; 0x96
 80011f8:	210a      	movs	r1, #10
 80011fa:	484b      	ldr	r0, [pc, #300]	; (8001328 <_DrawFuncSelectMenu+0x30c>)
 80011fc:	f00a f946 	bl	800b48c <ILI9341_Draw_Text>
				break;
 8001200:	e0d7      	b.n	80013b2 <_DrawFuncSelectMenu+0x396>
			case REV_SAW_FUNC_MODE:
				ILI9341_Draw_Text("- SINE", 	10, 50, BLACK, 2, WHITE);
 8001202:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001206:	9301      	str	r3, [sp, #4]
 8001208:	2302      	movs	r3, #2
 800120a:	9300      	str	r3, [sp, #0]
 800120c:	2300      	movs	r3, #0
 800120e:	2232      	movs	r2, #50	; 0x32
 8001210:	210a      	movs	r1, #10
 8001212:	4840      	ldr	r0, [pc, #256]	; (8001314 <_DrawFuncSelectMenu+0x2f8>)
 8001214:	f00a f93a 	bl	800b48c <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- SQUARE", 	10, 70, BLACK, 2, WHITE);
 8001218:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800121c:	9301      	str	r3, [sp, #4]
 800121e:	2302      	movs	r3, #2
 8001220:	9300      	str	r3, [sp, #0]
 8001222:	2300      	movs	r3, #0
 8001224:	2246      	movs	r2, #70	; 0x46
 8001226:	210a      	movs	r1, #10
 8001228:	483b      	ldr	r0, [pc, #236]	; (8001318 <_DrawFuncSelectMenu+0x2fc>)
 800122a:	f00a f92f 	bl	800b48c <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- SAW", 		10, 90, BLACK, 2, WHITE);
 800122e:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001232:	9301      	str	r3, [sp, #4]
 8001234:	2302      	movs	r3, #2
 8001236:	9300      	str	r3, [sp, #0]
 8001238:	2300      	movs	r3, #0
 800123a:	225a      	movs	r2, #90	; 0x5a
 800123c:	210a      	movs	r1, #10
 800123e:	4837      	ldr	r0, [pc, #220]	; (800131c <_DrawFuncSelectMenu+0x300>)
 8001240:	f00a f924 	bl	800b48c <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- REV SAW", 	10, 110, WHITE, 2, BLACK);
 8001244:	2300      	movs	r3, #0
 8001246:	9301      	str	r3, [sp, #4]
 8001248:	2302      	movs	r3, #2
 800124a:	9300      	str	r3, [sp, #0]
 800124c:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001250:	226e      	movs	r2, #110	; 0x6e
 8001252:	210a      	movs	r1, #10
 8001254:	4832      	ldr	r0, [pc, #200]	; (8001320 <_DrawFuncSelectMenu+0x304>)
 8001256:	f00a f919 	bl	800b48c <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- TRIANGLE",	10, 130, BLACK, 2, WHITE);
 800125a:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800125e:	9301      	str	r3, [sp, #4]
 8001260:	2302      	movs	r3, #2
 8001262:	9300      	str	r3, [sp, #0]
 8001264:	2300      	movs	r3, #0
 8001266:	2282      	movs	r2, #130	; 0x82
 8001268:	210a      	movs	r1, #10
 800126a:	482e      	ldr	r0, [pc, #184]	; (8001324 <_DrawFuncSelectMenu+0x308>)
 800126c:	f00a f90e 	bl	800b48c <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- UNIT", 	10, 150, BLACK, 2, WHITE);
 8001270:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001274:	9301      	str	r3, [sp, #4]
 8001276:	2302      	movs	r3, #2
 8001278:	9300      	str	r3, [sp, #0]
 800127a:	2300      	movs	r3, #0
 800127c:	2296      	movs	r2, #150	; 0x96
 800127e:	210a      	movs	r1, #10
 8001280:	4829      	ldr	r0, [pc, #164]	; (8001328 <_DrawFuncSelectMenu+0x30c>)
 8001282:	f00a f903 	bl	800b48c <ILI9341_Draw_Text>
				break;
 8001286:	e094      	b.n	80013b2 <_DrawFuncSelectMenu+0x396>
			case TRIANGLE_FUNC_MODE:
				ILI9341_Draw_Text("- SINE", 	10, 50, BLACK, 2, WHITE);
 8001288:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800128c:	9301      	str	r3, [sp, #4]
 800128e:	2302      	movs	r3, #2
 8001290:	9300      	str	r3, [sp, #0]
 8001292:	2300      	movs	r3, #0
 8001294:	2232      	movs	r2, #50	; 0x32
 8001296:	210a      	movs	r1, #10
 8001298:	481e      	ldr	r0, [pc, #120]	; (8001314 <_DrawFuncSelectMenu+0x2f8>)
 800129a:	f00a f8f7 	bl	800b48c <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- SQUARE", 	10, 70, BLACK, 2, WHITE);
 800129e:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80012a2:	9301      	str	r3, [sp, #4]
 80012a4:	2302      	movs	r3, #2
 80012a6:	9300      	str	r3, [sp, #0]
 80012a8:	2300      	movs	r3, #0
 80012aa:	2246      	movs	r2, #70	; 0x46
 80012ac:	210a      	movs	r1, #10
 80012ae:	481a      	ldr	r0, [pc, #104]	; (8001318 <_DrawFuncSelectMenu+0x2fc>)
 80012b0:	f00a f8ec 	bl	800b48c <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- SAW", 		10, 90, BLACK, 2, WHITE);
 80012b4:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80012b8:	9301      	str	r3, [sp, #4]
 80012ba:	2302      	movs	r3, #2
 80012bc:	9300      	str	r3, [sp, #0]
 80012be:	2300      	movs	r3, #0
 80012c0:	225a      	movs	r2, #90	; 0x5a
 80012c2:	210a      	movs	r1, #10
 80012c4:	4815      	ldr	r0, [pc, #84]	; (800131c <_DrawFuncSelectMenu+0x300>)
 80012c6:	f00a f8e1 	bl	800b48c <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- REV SAW", 	10, 110, BLACK, 2, WHITE);
 80012ca:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80012ce:	9301      	str	r3, [sp, #4]
 80012d0:	2302      	movs	r3, #2
 80012d2:	9300      	str	r3, [sp, #0]
 80012d4:	2300      	movs	r3, #0
 80012d6:	226e      	movs	r2, #110	; 0x6e
 80012d8:	210a      	movs	r1, #10
 80012da:	4811      	ldr	r0, [pc, #68]	; (8001320 <_DrawFuncSelectMenu+0x304>)
 80012dc:	f00a f8d6 	bl	800b48c <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- TRIANGLE",	10, 130, WHITE, 2, BLACK);
 80012e0:	2300      	movs	r3, #0
 80012e2:	9301      	str	r3, [sp, #4]
 80012e4:	2302      	movs	r3, #2
 80012e6:	9300      	str	r3, [sp, #0]
 80012e8:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80012ec:	2282      	movs	r2, #130	; 0x82
 80012ee:	210a      	movs	r1, #10
 80012f0:	480c      	ldr	r0, [pc, #48]	; (8001324 <_DrawFuncSelectMenu+0x308>)
 80012f2:	f00a f8cb 	bl	800b48c <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- UNIT", 	10, 150, BLACK, 2, WHITE);
 80012f6:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80012fa:	9301      	str	r3, [sp, #4]
 80012fc:	2302      	movs	r3, #2
 80012fe:	9300      	str	r3, [sp, #0]
 8001300:	2300      	movs	r3, #0
 8001302:	2296      	movs	r2, #150	; 0x96
 8001304:	210a      	movs	r1, #10
 8001306:	4808      	ldr	r0, [pc, #32]	; (8001328 <_DrawFuncSelectMenu+0x30c>)
 8001308:	f00a f8c0 	bl	800b48c <ILI9341_Draw_Text>
				break;
 800130c:	e051      	b.n	80013b2 <_DrawFuncSelectMenu+0x396>
 800130e:	bf00      	nop
 8001310:	0800e9b4 	.word	0x0800e9b4
 8001314:	0800e9c4 	.word	0x0800e9c4
 8001318:	0800e9cc 	.word	0x0800e9cc
 800131c:	0800e9d8 	.word	0x0800e9d8
 8001320:	0800e9e0 	.word	0x0800e9e0
 8001324:	0800e9ec 	.word	0x0800e9ec
 8001328:	0800e9f8 	.word	0x0800e9f8
			case IMPULSE_FUNC_MODE:
				ILI9341_Draw_Text("- SINE", 	10, 50, BLACK, 2, WHITE);
 800132c:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001330:	9301      	str	r3, [sp, #4]
 8001332:	2302      	movs	r3, #2
 8001334:	9300      	str	r3, [sp, #0]
 8001336:	2300      	movs	r3, #0
 8001338:	2232      	movs	r2, #50	; 0x32
 800133a:	210a      	movs	r1, #10
 800133c:	481f      	ldr	r0, [pc, #124]	; (80013bc <_DrawFuncSelectMenu+0x3a0>)
 800133e:	f00a f8a5 	bl	800b48c <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- SQUARE", 	10, 70, BLACK, 2, WHITE);
 8001342:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001346:	9301      	str	r3, [sp, #4]
 8001348:	2302      	movs	r3, #2
 800134a:	9300      	str	r3, [sp, #0]
 800134c:	2300      	movs	r3, #0
 800134e:	2246      	movs	r2, #70	; 0x46
 8001350:	210a      	movs	r1, #10
 8001352:	481b      	ldr	r0, [pc, #108]	; (80013c0 <_DrawFuncSelectMenu+0x3a4>)
 8001354:	f00a f89a 	bl	800b48c <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- SAW", 		10, 90, BLACK, 2, WHITE);
 8001358:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800135c:	9301      	str	r3, [sp, #4]
 800135e:	2302      	movs	r3, #2
 8001360:	9300      	str	r3, [sp, #0]
 8001362:	2300      	movs	r3, #0
 8001364:	225a      	movs	r2, #90	; 0x5a
 8001366:	210a      	movs	r1, #10
 8001368:	4816      	ldr	r0, [pc, #88]	; (80013c4 <_DrawFuncSelectMenu+0x3a8>)
 800136a:	f00a f88f 	bl	800b48c <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- REV SAW", 	10, 110, BLACK, 2, WHITE);
 800136e:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001372:	9301      	str	r3, [sp, #4]
 8001374:	2302      	movs	r3, #2
 8001376:	9300      	str	r3, [sp, #0]
 8001378:	2300      	movs	r3, #0
 800137a:	226e      	movs	r2, #110	; 0x6e
 800137c:	210a      	movs	r1, #10
 800137e:	4812      	ldr	r0, [pc, #72]	; (80013c8 <_DrawFuncSelectMenu+0x3ac>)
 8001380:	f00a f884 	bl	800b48c <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- TRIANGLE",	10, 130, BLACK, 2, WHITE);
 8001384:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001388:	9301      	str	r3, [sp, #4]
 800138a:	2302      	movs	r3, #2
 800138c:	9300      	str	r3, [sp, #0]
 800138e:	2300      	movs	r3, #0
 8001390:	2282      	movs	r2, #130	; 0x82
 8001392:	210a      	movs	r1, #10
 8001394:	480d      	ldr	r0, [pc, #52]	; (80013cc <_DrawFuncSelectMenu+0x3b0>)
 8001396:	f00a f879 	bl	800b48c <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- UNIT", 	10, 150, WHITE, 2, BLACK);
 800139a:	2300      	movs	r3, #0
 800139c:	9301      	str	r3, [sp, #4]
 800139e:	2302      	movs	r3, #2
 80013a0:	9300      	str	r3, [sp, #0]
 80013a2:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80013a6:	2296      	movs	r2, #150	; 0x96
 80013a8:	210a      	movs	r1, #10
 80013aa:	4809      	ldr	r0, [pc, #36]	; (80013d0 <_DrawFuncSelectMenu+0x3b4>)
 80013ac:	f00a f86e 	bl	800b48c <ILI9341_Draw_Text>
				break;
 80013b0:	bf00      	nop

		}
	}


}
 80013b2:	bf00      	nop
 80013b4:	3708      	adds	r7, #8
 80013b6:	46bd      	mov	sp, r7
 80013b8:	bd80      	pop	{r7, pc}
 80013ba:	bf00      	nop
 80013bc:	0800e9c4 	.word	0x0800e9c4
 80013c0:	0800e9cc 	.word	0x0800e9cc
 80013c4:	0800e9d8 	.word	0x0800e9d8
 80013c8:	0800e9e0 	.word	0x0800e9e0
 80013cc:	0800e9ec 	.word	0x0800e9ec
 80013d0:	0800e9f8 	.word	0x0800e9f8

080013d4 <DM_ShowGainSelectMenu>:
 *	@param None
 *	@retval None
 *
 */
void DM_ShowGainSelectMenu(eGainMenu_Status pValue)
{
 80013d4:	b480      	push	{r7}
 80013d6:	b083      	sub	sp, #12
 80013d8:	af00      	add	r7, sp, #0
 80013da:	4603      	mov	r3, r0
 80013dc:	71fb      	strb	r3, [r7, #7]
	eNextGainMenuStatus = pValue;
 80013de:	4a04      	ldr	r2, [pc, #16]	; (80013f0 <DM_ShowGainSelectMenu+0x1c>)
 80013e0:	79fb      	ldrb	r3, [r7, #7]
 80013e2:	7013      	strb	r3, [r2, #0]
}
 80013e4:	bf00      	nop
 80013e6:	370c      	adds	r7, #12
 80013e8:	46bd      	mov	sp, r7
 80013ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013ee:	4770      	bx	lr
 80013f0:	20001621 	.word	0x20001621

080013f4 <_DrawGainSelectMenu>:
 *	@param None
 *	@retval None
 *
 */
void _DrawGainSelectMenu()
{
 80013f4:	b580      	push	{r7, lr}
 80013f6:	b082      	sub	sp, #8
 80013f8:	af02      	add	r7, sp, #8

	ILI9341_Draw_Text("ADJUST GAIN", 	40, 10, WHITE, 3, BLACK);
 80013fa:	2300      	movs	r3, #0
 80013fc:	9301      	str	r3, [sp, #4]
 80013fe:	2303      	movs	r3, #3
 8001400:	9300      	str	r3, [sp, #0]
 8001402:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001406:	220a      	movs	r2, #10
 8001408:	2128      	movs	r1, #40	; 0x28
 800140a:	4803      	ldr	r0, [pc, #12]	; (8001418 <_DrawGainSelectMenu+0x24>)
 800140c:	f00a f83e 	bl	800b48c <ILI9341_Draw_Text>

}
 8001410:	bf00      	nop
 8001412:	46bd      	mov	sp, r7
 8001414:	bd80      	pop	{r7, pc}
 8001416:	bf00      	nop
 8001418:	0800ea00 	.word	0x0800ea00

0800141c <DM_ShowFreqMenu>:
 *	@param None
 *	@retval None
 *
 */
void DM_ShowFreqMenu(eFreqMenu_Status pValue)
{
 800141c:	b480      	push	{r7}
 800141e:	b083      	sub	sp, #12
 8001420:	af00      	add	r7, sp, #0
 8001422:	4603      	mov	r3, r0
 8001424:	71fb      	strb	r3, [r7, #7]
	eNextFreqMenuStatus = pValue;
 8001426:	4a04      	ldr	r2, [pc, #16]	; (8001438 <DM_ShowFreqMenu+0x1c>)
 8001428:	79fb      	ldrb	r3, [r7, #7]
 800142a:	7013      	strb	r3, [r2, #0]
}
 800142c:	bf00      	nop
 800142e:	370c      	adds	r7, #12
 8001430:	46bd      	mov	sp, r7
 8001432:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001436:	4770      	bx	lr
 8001438:	20001622 	.word	0x20001622

0800143c <DM_ShowBiasSelectMenu>:
 *	@param None
 *	@retval None
 *
 */
void DM_ShowBiasSelectMenu(eBiasMenu_Status pValue)
{
 800143c:	b480      	push	{r7}
 800143e:	b083      	sub	sp, #12
 8001440:	af00      	add	r7, sp, #0
 8001442:	4603      	mov	r3, r0
 8001444:	71fb      	strb	r3, [r7, #7]
	eNextBiasMenuStatus = pValue;
 8001446:	4a04      	ldr	r2, [pc, #16]	; (8001458 <DM_ShowBiasSelectMenu+0x1c>)
 8001448:	79fb      	ldrb	r3, [r7, #7]
 800144a:	7013      	strb	r3, [r2, #0]
}
 800144c:	bf00      	nop
 800144e:	370c      	adds	r7, #12
 8001450:	46bd      	mov	sp, r7
 8001452:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001456:	4770      	bx	lr
 8001458:	20001623 	.word	0x20001623

0800145c <_DrawBiasSelectMenu>:
 *	@param None
 *	@retval None
 *
 */
void _DrawBiasSelectMenu()
{
 800145c:	b580      	push	{r7, lr}
 800145e:	b082      	sub	sp, #8
 8001460:	af02      	add	r7, sp, #8
	ILI9341_Draw_Text("ADJUST DC BIAS", 	30, 10, WHITE, 3, BLACK);
 8001462:	2300      	movs	r3, #0
 8001464:	9301      	str	r3, [sp, #4]
 8001466:	2303      	movs	r3, #3
 8001468:	9300      	str	r3, [sp, #0]
 800146a:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800146e:	220a      	movs	r2, #10
 8001470:	211e      	movs	r1, #30
 8001472:	4803      	ldr	r0, [pc, #12]	; (8001480 <_DrawBiasSelectMenu+0x24>)
 8001474:	f00a f80a 	bl	800b48c <ILI9341_Draw_Text>

}
 8001478:	bf00      	nop
 800147a:	46bd      	mov	sp, r7
 800147c:	bd80      	pop	{r7, pc}
 800147e:	bf00      	nop
 8001480:	0800ea0c 	.word	0x0800ea0c

08001484 <DM_DigitCount>:
 *	@param None
 *	@retval None
 *
 */
int DM_DigitCount(int num)
{
 8001484:	b480      	push	{r7}
 8001486:	b083      	sub	sp, #12
 8001488:	af00      	add	r7, sp, #0
 800148a:	6078      	str	r0, [r7, #4]
	if(num < 10)
 800148c:	687b      	ldr	r3, [r7, #4]
 800148e:	2b09      	cmp	r3, #9
 8001490:	dc01      	bgt.n	8001496 <DM_DigitCount+0x12>
		return 1;
 8001492:	2301      	movs	r3, #1
 8001494:	e018      	b.n	80014c8 <DM_DigitCount+0x44>
	if(num < 100)
 8001496:	687b      	ldr	r3, [r7, #4]
 8001498:	2b63      	cmp	r3, #99	; 0x63
 800149a:	dc01      	bgt.n	80014a0 <DM_DigitCount+0x1c>
		return 2;
 800149c:	2302      	movs	r3, #2
 800149e:	e013      	b.n	80014c8 <DM_DigitCount+0x44>
	if(num < 1000)
 80014a0:	687b      	ldr	r3, [r7, #4]
 80014a2:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80014a6:	da01      	bge.n	80014ac <DM_DigitCount+0x28>
		return 3;
 80014a8:	2303      	movs	r3, #3
 80014aa:	e00d      	b.n	80014c8 <DM_DigitCount+0x44>
	if(num < 10000)
 80014ac:	687b      	ldr	r3, [r7, #4]
 80014ae:	f242 720f 	movw	r2, #9999	; 0x270f
 80014b2:	4293      	cmp	r3, r2
 80014b4:	dc01      	bgt.n	80014ba <DM_DigitCount+0x36>
		return 4;
 80014b6:	2304      	movs	r3, #4
 80014b8:	e006      	b.n	80014c8 <DM_DigitCount+0x44>
	if(num < 100000)
 80014ba:	687b      	ldr	r3, [r7, #4]
 80014bc:	4a05      	ldr	r2, [pc, #20]	; (80014d4 <DM_DigitCount+0x50>)
 80014be:	4293      	cmp	r3, r2
 80014c0:	dc01      	bgt.n	80014c6 <DM_DigitCount+0x42>
		return 5;
 80014c2:	2305      	movs	r3, #5
 80014c4:	e000      	b.n	80014c8 <DM_DigitCount+0x44>
	else
		return 0;
 80014c6:	2300      	movs	r3, #0
}
 80014c8:	4618      	mov	r0, r3
 80014ca:	370c      	adds	r7, #12
 80014cc:	46bd      	mov	sp, r7
 80014ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014d2:	4770      	bx	lr
 80014d4:	0001869f 	.word	0x0001869f

080014d8 <DM_RefreshBackgroundLayout>:
 *	@param None
 *	@retval None
 *
 */
void DM_RefreshBackgroundLayout()
{
 80014d8:	b580      	push	{r7, lr}
 80014da:	b084      	sub	sp, #16
 80014dc:	af04      	add	r7, sp, #16


	//ILI9341_Fill_Screen(WHITE);
	ILI9341_FillScreenGradient();
 80014de:	f00a f803 	bl	800b4e8 <ILI9341_FillScreenGradient>

	ILI9341_Draw_Bordered_Filled_Rectangle_Coord(	btn_x_pos[0],
 80014e2:	4b1d      	ldr	r3, [pc, #116]	; (8001558 <DM_RefreshBackgroundLayout+0x80>)
 80014e4:	8818      	ldrh	r0, [r3, #0]
 80014e6:	2300      	movs	r3, #0
 80014e8:	9302      	str	r3, [sp, #8]
 80014ea:	2302      	movs	r3, #2
 80014ec:	9301      	str	r3, [sp, #4]
 80014ee:	f240 33ef 	movw	r3, #1007	; 0x3ef
 80014f2:	9300      	str	r3, [sp, #0]
 80014f4:	2332      	movs	r3, #50	; 0x32
 80014f6:	2250      	movs	r2, #80	; 0x50
 80014f8:	21c8      	movs	r1, #200	; 0xc8
 80014fa:	f009 fe5d 	bl	800b1b8 <ILI9341_Draw_Bordered_Filled_Rectangle_Coord>
													BTN_HEIGHT,
													DARKCYAN,
													BORDER_SIZE,
													BLACK);

	ILI9341_Draw_Bordered_Filled_Rectangle_Coord(	btn_x_pos[1],
 80014fe:	4b16      	ldr	r3, [pc, #88]	; (8001558 <DM_RefreshBackgroundLayout+0x80>)
 8001500:	8858      	ldrh	r0, [r3, #2]
 8001502:	2300      	movs	r3, #0
 8001504:	9302      	str	r3, [sp, #8]
 8001506:	2302      	movs	r3, #2
 8001508:	9301      	str	r3, [sp, #4]
 800150a:	f44f 7378 	mov.w	r3, #992	; 0x3e0
 800150e:	9300      	str	r3, [sp, #0]
 8001510:	2332      	movs	r3, #50	; 0x32
 8001512:	2250      	movs	r2, #80	; 0x50
 8001514:	21c8      	movs	r1, #200	; 0xc8
 8001516:	f009 fe4f 	bl	800b1b8 <ILI9341_Draw_Bordered_Filled_Rectangle_Coord>
													BTN_HEIGHT,
													DARKGREEN,
													BORDER_SIZE,
													BLACK);

	ILI9341_Draw_Bordered_Filled_Rectangle_Coord(	btn_x_pos[2],
 800151a:	4b0f      	ldr	r3, [pc, #60]	; (8001558 <DM_RefreshBackgroundLayout+0x80>)
 800151c:	8898      	ldrh	r0, [r3, #4]
 800151e:	2300      	movs	r3, #0
 8001520:	9302      	str	r3, [sp, #8]
 8001522:	2302      	movs	r3, #2
 8001524:	9301      	str	r3, [sp, #4]
 8001526:	f64f 73e0 	movw	r3, #65504	; 0xffe0
 800152a:	9300      	str	r3, [sp, #0]
 800152c:	2332      	movs	r3, #50	; 0x32
 800152e:	2250      	movs	r2, #80	; 0x50
 8001530:	21c8      	movs	r1, #200	; 0xc8
 8001532:	f009 fe41 	bl	800b1b8 <ILI9341_Draw_Bordered_Filled_Rectangle_Coord>
													BTN_HEIGHT,
													YELLOW,
													BORDER_SIZE,
													BLACK);

	ILI9341_Draw_Bordered_Filled_Rectangle_Coord(	btn_x_pos[3],
 8001536:	4b08      	ldr	r3, [pc, #32]	; (8001558 <DM_RefreshBackgroundLayout+0x80>)
 8001538:	88d8      	ldrh	r0, [r3, #6]
 800153a:	2300      	movs	r3, #0
 800153c:	9302      	str	r3, [sp, #8]
 800153e:	2302      	movs	r3, #2
 8001540:	9301      	str	r3, [sp, #4]
 8001542:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8001546:	9300      	str	r3, [sp, #0]
 8001548:	2332      	movs	r3, #50	; 0x32
 800154a:	2250      	movs	r2, #80	; 0x50
 800154c:	21c8      	movs	r1, #200	; 0xc8
 800154e:	f009 fe33 	bl	800b1b8 <ILI9341_Draw_Bordered_Filled_Rectangle_Coord>
													BTN_WIDTH,
													BTN_HEIGHT,
													RED,
													BORDER_SIZE,
													BLACK);
}
 8001552:	bf00      	nop
 8001554:	46bd      	mov	sp, r7
 8001556:	bd80      	pop	{r7, pc}
 8001558:	20000000 	.word	0x20000000

0800155c <DM_AddDigitPadding>:
 *			1 if buflen is invalid size
 *			2 unknown error
 *
 */
int DM_AddDigitPadding(uint16_t num, char *buffer, uint16_t buflen)
{
 800155c:	b580      	push	{r7, lr}
 800155e:	b084      	sub	sp, #16
 8001560:	af00      	add	r7, sp, #0
 8001562:	4603      	mov	r3, r0
 8001564:	6039      	str	r1, [r7, #0]
 8001566:	80fb      	strh	r3, [r7, #6]
 8001568:	4613      	mov	r3, r2
 800156a:	80bb      	strh	r3, [r7, #4]
	if((buflen < 1) || (buflen > 6))
 800156c:	88bb      	ldrh	r3, [r7, #4]
 800156e:	2b00      	cmp	r3, #0
 8001570:	d002      	beq.n	8001578 <DM_AddDigitPadding+0x1c>
 8001572:	88bb      	ldrh	r3, [r7, #4]
 8001574:	2b06      	cmp	r3, #6
 8001576:	d904      	bls.n	8001582 <DM_AddDigitPadding+0x26>
	{
		DM_SetErrorDebugMsg("DM_AddDigitPadding: invalid input string size");
 8001578:	482a      	ldr	r0, [pc, #168]	; (8001624 <DM_AddDigitPadding+0xc8>)
 800157a:	f000 f863 	bl	8001644 <DM_SetErrorDebugMsg>
		return 1;
 800157e:	2301      	movs	r3, #1
 8001580:	e04c      	b.n	800161c <DM_AddDigitPadding+0xc0>
	}

	//char* tmpbuf = malloc(sizeof(buffer) * buflen);

	uint16_t tmpcnt = num;
 8001582:	88fb      	ldrh	r3, [r7, #6]
 8001584:	81fb      	strh	r3, [r7, #14]
	switch(DM_DigitCount(tmpcnt))
 8001586:	89fb      	ldrh	r3, [r7, #14]
 8001588:	4618      	mov	r0, r3
 800158a:	f7ff ff7b 	bl	8001484 <DM_DigitCount>
 800158e:	4603      	mov	r3, r0
 8001590:	2b05      	cmp	r3, #5
 8001592:	d83f      	bhi.n	8001614 <DM_AddDigitPadding+0xb8>
 8001594:	a201      	add	r2, pc, #4	; (adr r2, 800159c <DM_AddDigitPadding+0x40>)
 8001596:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800159a:	bf00      	nop
 800159c:	080015b5 	.word	0x080015b5
 80015a0:	080015c5 	.word	0x080015c5
 80015a4:	080015d5 	.word	0x080015d5
 80015a8:	080015e5 	.word	0x080015e5
 80015ac:	080015f5 	.word	0x080015f5
 80015b0:	08001605 	.word	0x08001605
	{

		case 0:
			snprintf(buffer,buflen, "     ");
 80015b4:	88bb      	ldrh	r3, [r7, #4]
 80015b6:	4a1c      	ldr	r2, [pc, #112]	; (8001628 <DM_AddDigitPadding+0xcc>)
 80015b8:	4619      	mov	r1, r3
 80015ba:	6838      	ldr	r0, [r7, #0]
 80015bc:	f00b fa58 	bl	800ca70 <sniprintf>
			return 0;
 80015c0:	2300      	movs	r3, #0
 80015c2:	e02b      	b.n	800161c <DM_AddDigitPadding+0xc0>
		case 1:
			snprintf(buffer, buflen, "%u    ", tmpcnt);
 80015c4:	88b9      	ldrh	r1, [r7, #4]
 80015c6:	89fb      	ldrh	r3, [r7, #14]
 80015c8:	4a18      	ldr	r2, [pc, #96]	; (800162c <DM_AddDigitPadding+0xd0>)
 80015ca:	6838      	ldr	r0, [r7, #0]
 80015cc:	f00b fa50 	bl	800ca70 <sniprintf>
			return 0;
 80015d0:	2300      	movs	r3, #0
 80015d2:	e023      	b.n	800161c <DM_AddDigitPadding+0xc0>
		case 2:
			snprintf(buffer, buflen, "%u   ", tmpcnt);
 80015d4:	88b9      	ldrh	r1, [r7, #4]
 80015d6:	89fb      	ldrh	r3, [r7, #14]
 80015d8:	4a15      	ldr	r2, [pc, #84]	; (8001630 <DM_AddDigitPadding+0xd4>)
 80015da:	6838      	ldr	r0, [r7, #0]
 80015dc:	f00b fa48 	bl	800ca70 <sniprintf>
			return 0;
 80015e0:	2300      	movs	r3, #0
 80015e2:	e01b      	b.n	800161c <DM_AddDigitPadding+0xc0>
		case 3:
			snprintf(buffer, buflen, "%u  ", tmpcnt);
 80015e4:	88b9      	ldrh	r1, [r7, #4]
 80015e6:	89fb      	ldrh	r3, [r7, #14]
 80015e8:	4a12      	ldr	r2, [pc, #72]	; (8001634 <DM_AddDigitPadding+0xd8>)
 80015ea:	6838      	ldr	r0, [r7, #0]
 80015ec:	f00b fa40 	bl	800ca70 <sniprintf>
			return 0;
 80015f0:	2300      	movs	r3, #0
 80015f2:	e013      	b.n	800161c <DM_AddDigitPadding+0xc0>
		case 4:
			snprintf(buffer, buflen, "%u ", tmpcnt);
 80015f4:	88b9      	ldrh	r1, [r7, #4]
 80015f6:	89fb      	ldrh	r3, [r7, #14]
 80015f8:	4a0f      	ldr	r2, [pc, #60]	; (8001638 <DM_AddDigitPadding+0xdc>)
 80015fa:	6838      	ldr	r0, [r7, #0]
 80015fc:	f00b fa38 	bl	800ca70 <sniprintf>
			return 0;
 8001600:	2300      	movs	r3, #0
 8001602:	e00b      	b.n	800161c <DM_AddDigitPadding+0xc0>
		case 5:
			snprintf(buffer, buflen, "%u", tmpcnt);
 8001604:	88b9      	ldrh	r1, [r7, #4]
 8001606:	89fb      	ldrh	r3, [r7, #14]
 8001608:	4a0c      	ldr	r2, [pc, #48]	; (800163c <DM_AddDigitPadding+0xe0>)
 800160a:	6838      	ldr	r0, [r7, #0]
 800160c:	f00b fa30 	bl	800ca70 <sniprintf>
			return 0;
 8001610:	2300      	movs	r3, #0
 8001612:	e003      	b.n	800161c <DM_AddDigitPadding+0xc0>

	}
	DM_SetErrorDebugMsg("DM_AddDigitPadding: unknown error");
 8001614:	480a      	ldr	r0, [pc, #40]	; (8001640 <DM_AddDigitPadding+0xe4>)
 8001616:	f000 f815 	bl	8001644 <DM_SetErrorDebugMsg>
	return 2;
 800161a:	2302      	movs	r3, #2


}
 800161c:	4618      	mov	r0, r3
 800161e:	3710      	adds	r7, #16
 8001620:	46bd      	mov	sp, r7
 8001622:	bd80      	pop	{r7, pc}
 8001624:	0800ea54 	.word	0x0800ea54
 8001628:	0800ea84 	.word	0x0800ea84
 800162c:	0800ea8c 	.word	0x0800ea8c
 8001630:	0800ea94 	.word	0x0800ea94
 8001634:	0800ea9c 	.word	0x0800ea9c
 8001638:	0800eaa4 	.word	0x0800eaa4
 800163c:	0800eaa8 	.word	0x0800eaa8
 8001640:	0800eaac 	.word	0x0800eaac

08001644 <DM_SetErrorDebugMsg>:
	ILI9341_Draw_Text("- SINE", 	10, 30, WHITE, 2, BLACK);
	*/
}

void DM_SetErrorDebugMsg(char* msg)
{
 8001644:	b580      	push	{r7, lr}
 8001646:	b082      	sub	sp, #8
 8001648:	af00      	add	r7, sp, #0
 800164a:	6078      	str	r0, [r7, #4]
	snprintf(ErrorDebugMsg, sizeof(ErrorDebugMsg), "%s", msg);
 800164c:	687b      	ldr	r3, [r7, #4]
 800164e:	4a04      	ldr	r2, [pc, #16]	; (8001660 <DM_SetErrorDebugMsg+0x1c>)
 8001650:	212d      	movs	r1, #45	; 0x2d
 8001652:	4804      	ldr	r0, [pc, #16]	; (8001664 <DM_SetErrorDebugMsg+0x20>)
 8001654:	f00b fa0c 	bl	800ca70 <sniprintf>
}
 8001658:	bf00      	nop
 800165a:	3708      	adds	r7, #8
 800165c:	46bd      	mov	sp, r7
 800165e:	bd80      	pop	{r7, pc}
 8001660:	0800ead0 	.word	0x0800ead0
 8001664:	20001624 	.word	0x20001624

08001668 <FreqMenu_DrawFreqMainMenu>:
 *	@param None
 *	@retval None
 *
 */
void FreqMenu_DrawFreqMainMenu()
{
 8001668:	b580      	push	{r7, lr}
 800166a:	b082      	sub	sp, #8
 800166c:	af02      	add	r7, sp, #8
	// main
	ILI9341_Draw_Text("Select an option below", 	30, 150, BLACK, 2, WHITE);
 800166e:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001672:	9301      	str	r3, [sp, #4]
 8001674:	2302      	movs	r3, #2
 8001676:	9300      	str	r3, [sp, #0]
 8001678:	2300      	movs	r3, #0
 800167a:	2296      	movs	r2, #150	; 0x96
 800167c:	211e      	movs	r1, #30
 800167e:	4813      	ldr	r0, [pc, #76]	; (80016cc <FreqMenu_DrawFreqMainMenu+0x64>)
 8001680:	f009 ff04 	bl	800b48c <ILI9341_Draw_Text>

	// buttons
	ILI9341_Draw_Text("PRESET", 5, 210, BLACK, 2, DARKCYAN);
 8001684:	f240 33ef 	movw	r3, #1007	; 0x3ef
 8001688:	9301      	str	r3, [sp, #4]
 800168a:	2302      	movs	r3, #2
 800168c:	9300      	str	r3, [sp, #0]
 800168e:	2300      	movs	r3, #0
 8001690:	22d2      	movs	r2, #210	; 0xd2
 8001692:	2105      	movs	r1, #5
 8001694:	480e      	ldr	r0, [pc, #56]	; (80016d0 <FreqMenu_DrawFreqMainMenu+0x68>)
 8001696:	f009 fef9 	bl	800b48c <ILI9341_Draw_Text>
	ILI9341_Draw_Text("ADJUST", 87, 210, BLACK, 2, DARKGREEN);
 800169a:	f44f 7378 	mov.w	r3, #992	; 0x3e0
 800169e:	9301      	str	r3, [sp, #4]
 80016a0:	2302      	movs	r3, #2
 80016a2:	9300      	str	r3, [sp, #0]
 80016a4:	2300      	movs	r3, #0
 80016a6:	22d2      	movs	r2, #210	; 0xd2
 80016a8:	2157      	movs	r1, #87	; 0x57
 80016aa:	480a      	ldr	r0, [pc, #40]	; (80016d4 <FreqMenu_DrawFreqMainMenu+0x6c>)
 80016ac:	f009 feee 	bl	800b48c <ILI9341_Draw_Text>
	ILI9341_Draw_Text("SWEEP", 174, 210, BLACK, 2, YELLOW);
 80016b0:	f64f 73e0 	movw	r3, #65504	; 0xffe0
 80016b4:	9301      	str	r3, [sp, #4]
 80016b6:	2302      	movs	r3, #2
 80016b8:	9300      	str	r3, [sp, #0]
 80016ba:	2300      	movs	r3, #0
 80016bc:	22d2      	movs	r2, #210	; 0xd2
 80016be:	21ae      	movs	r1, #174	; 0xae
 80016c0:	4805      	ldr	r0, [pc, #20]	; (80016d8 <FreqMenu_DrawFreqMainMenu+0x70>)
 80016c2:	f009 fee3 	bl	800b48c <ILI9341_Draw_Text>
	//ILI9341_Draw_Text("    ", 260, 210, BLACK, 2, RED);
}
 80016c6:	bf00      	nop
 80016c8:	46bd      	mov	sp, r7
 80016ca:	bd80      	pop	{r7, pc}
 80016cc:	0800ead4 	.word	0x0800ead4
 80016d0:	0800eaec 	.word	0x0800eaec
 80016d4:	0800eaf4 	.word	0x0800eaf4
 80016d8:	0800eafc 	.word	0x0800eafc

080016dc <FreqMenu_DrawFreqPresetMenu>:
 *	@param None
 *	@retval None
 *
 */
void FreqMenu_DrawFreqPresetMenu()
{
 80016dc:	b580      	push	{r7, lr}
 80016de:	b086      	sub	sp, #24
 80016e0:	af02      	add	r7, sp, #8

	uint8_t menu_pos_y1 = 50;
 80016e2:	2332      	movs	r3, #50	; 0x32
 80016e4:	73fb      	strb	r3, [r7, #15]
	uint8_t menu_pos_y2 = 70;
 80016e6:	2346      	movs	r3, #70	; 0x46
 80016e8:	73bb      	strb	r3, [r7, #14]
	uint8_t menu_pos_y3 = 90;
 80016ea:	235a      	movs	r3, #90	; 0x5a
 80016ec:	737b      	strb	r3, [r7, #13]
	uint8_t menu_pos_y4 = 110;
 80016ee:	236e      	movs	r3, #110	; 0x6e
 80016f0:	733b      	strb	r3, [r7, #12]
	uint8_t menu_pos_y5 = 130;
 80016f2:	2382      	movs	r3, #130	; 0x82
 80016f4:	72fb      	strb	r3, [r7, #11]
	uint8_t menu_pos_y6 = 150;
 80016f6:	2396      	movs	r3, #150	; 0x96
 80016f8:	72bb      	strb	r3, [r7, #10]
	uint8_t menu_pos_y7 = 170;
 80016fa:	23aa      	movs	r3, #170	; 0xaa
 80016fc:	727b      	strb	r3, [r7, #9]
	Freq_Preset_Encoder_Pos_t *pFreqPresetTmp =  FreqO_GetFPresetObject();
 80016fe:	f002 f875 	bl	80037ec <FreqO_GetFPresetObject>
 8001702:	6078      	str	r0, [r7, #4]
	if(pFreqPresetTmp)
 8001704:	687b      	ldr	r3, [r7, #4]
 8001706:	2b00      	cmp	r3, #0
 8001708:	f001 823f 	beq.w	8002b8a <FreqMenu_DrawFreqPresetMenu+0x14ae>
	{
		switch(pFreqPresetTmp->hertz)
 800170c:	687b      	ldr	r3, [r7, #4]
 800170e:	681b      	ldr	r3, [r3, #0]
 8001710:	f240 22ee 	movw	r2, #750	; 0x2ee
 8001714:	4293      	cmp	r3, r2
 8001716:	f000 8499 	beq.w	800204c <FreqMenu_DrawFreqPresetMenu+0x970>
 800171a:	f240 22ee 	movw	r2, #750	; 0x2ee
 800171e:	4293      	cmp	r3, r2
 8001720:	d817      	bhi.n	8001752 <FreqMenu_DrawFreqPresetMenu+0x76>
 8001722:	2b32      	cmp	r3, #50	; 0x32
 8001724:	f000 81b2 	beq.w	8001a8c <FreqMenu_DrawFreqPresetMenu+0x3b0>
 8001728:	2b32      	cmp	r3, #50	; 0x32
 800172a:	d806      	bhi.n	800173a <FreqMenu_DrawFreqPresetMenu+0x5e>
 800172c:	2b01      	cmp	r3, #1
 800172e:	d038      	beq.n	80017a2 <FreqMenu_DrawFreqPresetMenu+0xc6>
 8001730:	2b0a      	cmp	r3, #10
 8001732:	f000 80e0 	beq.w	80018f6 <FreqMenu_DrawFreqPresetMenu+0x21a>
	else
	{
		ILI9341_Draw_Text("FreqMenus::FreqMenu_DrawFreqPresetMenu() Error", 		10, 180, RED, 1, BLACK);
	}

}
 8001736:	f001 ba34 	b.w	8002ba2 <FreqMenu_DrawFreqPresetMenu+0x14c6>
		switch(pFreqPresetTmp->hertz)
 800173a:	2bfa      	cmp	r3, #250	; 0xfa
 800173c:	f000 8316 	beq.w	8001d6c <FreqMenu_DrawFreqPresetMenu+0x690>
 8001740:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8001744:	f000 83bc 	beq.w	8001ec0 <FreqMenu_DrawFreqPresetMenu+0x7e4>
 8001748:	2b64      	cmp	r3, #100	; 0x64
 800174a:	f000 8249 	beq.w	8001be0 <FreqMenu_DrawFreqPresetMenu+0x504>
}
 800174e:	f001 ba28 	b.w	8002ba2 <FreqMenu_DrawFreqPresetMenu+0x14c6>
		switch(pFreqPresetTmp->hertz)
 8001752:	f246 12a8 	movw	r2, #25000	; 0x61a8
 8001756:	4293      	cmp	r3, r2
 8001758:	f000 8756 	beq.w	8002608 <FreqMenu_DrawFreqPresetMenu+0xf2c>
 800175c:	f246 12a8 	movw	r2, #25000	; 0x61a8
 8001760:	4293      	cmp	r3, r2
 8001762:	d80f      	bhi.n	8001784 <FreqMenu_DrawFreqPresetMenu+0xa8>
 8001764:	f241 3288 	movw	r2, #5000	; 0x1388
 8001768:	4293      	cmp	r3, r2
 800176a:	f000 85df 	beq.w	800232c <FreqMenu_DrawFreqPresetMenu+0xc50>
 800176e:	f242 7210 	movw	r2, #10000	; 0x2710
 8001772:	4293      	cmp	r3, r2
 8001774:	f000 8683 	beq.w	800247e <FreqMenu_DrawFreqPresetMenu+0xda2>
 8001778:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800177c:	f000 8510 	beq.w	80021a0 <FreqMenu_DrawFreqPresetMenu+0xac4>
}
 8001780:	f001 ba0f 	b.w	8002ba2 <FreqMenu_DrawFreqPresetMenu+0x14c6>
		switch(pFreqPresetTmp->hertz)
 8001784:	4ab1      	ldr	r2, [pc, #708]	; (8001a4c <FreqMenu_DrawFreqPresetMenu+0x370>)
 8001786:	4293      	cmp	r3, r2
 8001788:	f001 80ac 	beq.w	80028e4 <FreqMenu_DrawFreqPresetMenu+0x1208>
 800178c:	4ab0      	ldr	r2, [pc, #704]	; (8001a50 <FreqMenu_DrawFreqPresetMenu+0x374>)
 800178e:	4293      	cmp	r3, r2
 8001790:	f001 8151 	beq.w	8002a36 <FreqMenu_DrawFreqPresetMenu+0x135a>
 8001794:	f24c 3250 	movw	r2, #50000	; 0xc350
 8001798:	4293      	cmp	r3, r2
 800179a:	f000 87de 	beq.w	800275a <FreqMenu_DrawFreqPresetMenu+0x107e>
}
 800179e:	f001 ba00 	b.w	8002ba2 <FreqMenu_DrawFreqPresetMenu+0x14c6>
				ILI9341_Draw_Text("- 1Hz", 		10, menu_pos_y1, WHITE, 2, BLACK);
 80017a2:	7bfb      	ldrb	r3, [r7, #15]
 80017a4:	b29a      	uxth	r2, r3
 80017a6:	2300      	movs	r3, #0
 80017a8:	9301      	str	r3, [sp, #4]
 80017aa:	2302      	movs	r3, #2
 80017ac:	9300      	str	r3, [sp, #0]
 80017ae:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80017b2:	210a      	movs	r1, #10
 80017b4:	48a7      	ldr	r0, [pc, #668]	; (8001a54 <FreqMenu_DrawFreqPresetMenu+0x378>)
 80017b6:	f009 fe69 	bl	800b48c <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 10Hz", 	10, menu_pos_y2, BLACK, 2, WHITE);
 80017ba:	7bbb      	ldrb	r3, [r7, #14]
 80017bc:	b29a      	uxth	r2, r3
 80017be:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80017c2:	9301      	str	r3, [sp, #4]
 80017c4:	2302      	movs	r3, #2
 80017c6:	9300      	str	r3, [sp, #0]
 80017c8:	2300      	movs	r3, #0
 80017ca:	210a      	movs	r1, #10
 80017cc:	48a2      	ldr	r0, [pc, #648]	; (8001a58 <FreqMenu_DrawFreqPresetMenu+0x37c>)
 80017ce:	f009 fe5d 	bl	800b48c <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 50Hz", 	10, menu_pos_y3, BLACK, 2, WHITE);
 80017d2:	7b7b      	ldrb	r3, [r7, #13]
 80017d4:	b29a      	uxth	r2, r3
 80017d6:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80017da:	9301      	str	r3, [sp, #4]
 80017dc:	2302      	movs	r3, #2
 80017de:	9300      	str	r3, [sp, #0]
 80017e0:	2300      	movs	r3, #0
 80017e2:	210a      	movs	r1, #10
 80017e4:	489d      	ldr	r0, [pc, #628]	; (8001a5c <FreqMenu_DrawFreqPresetMenu+0x380>)
 80017e6:	f009 fe51 	bl	800b48c <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 100Hz", 	10, menu_pos_y4, BLACK, 2, WHITE);
 80017ea:	7b3b      	ldrb	r3, [r7, #12]
 80017ec:	b29a      	uxth	r2, r3
 80017ee:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80017f2:	9301      	str	r3, [sp, #4]
 80017f4:	2302      	movs	r3, #2
 80017f6:	9300      	str	r3, [sp, #0]
 80017f8:	2300      	movs	r3, #0
 80017fa:	210a      	movs	r1, #10
 80017fc:	4898      	ldr	r0, [pc, #608]	; (8001a60 <FreqMenu_DrawFreqPresetMenu+0x384>)
 80017fe:	f009 fe45 	bl	800b48c <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 250Hz", 	10, menu_pos_y5, BLACK, 2, WHITE);
 8001802:	7afb      	ldrb	r3, [r7, #11]
 8001804:	b29a      	uxth	r2, r3
 8001806:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800180a:	9301      	str	r3, [sp, #4]
 800180c:	2302      	movs	r3, #2
 800180e:	9300      	str	r3, [sp, #0]
 8001810:	2300      	movs	r3, #0
 8001812:	210a      	movs	r1, #10
 8001814:	4893      	ldr	r0, [pc, #588]	; (8001a64 <FreqMenu_DrawFreqPresetMenu+0x388>)
 8001816:	f009 fe39 	bl	800b48c <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 500Hz",	10, menu_pos_y6, BLACK, 2, WHITE);
 800181a:	7abb      	ldrb	r3, [r7, #10]
 800181c:	b29a      	uxth	r2, r3
 800181e:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001822:	9301      	str	r3, [sp, #4]
 8001824:	2302      	movs	r3, #2
 8001826:	9300      	str	r3, [sp, #0]
 8001828:	2300      	movs	r3, #0
 800182a:	210a      	movs	r1, #10
 800182c:	488e      	ldr	r0, [pc, #568]	; (8001a68 <FreqMenu_DrawFreqPresetMenu+0x38c>)
 800182e:	f009 fe2d 	bl	800b48c <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 750Hz", 	10, menu_pos_y7, BLACK, 2, WHITE);
 8001832:	7a7b      	ldrb	r3, [r7, #9]
 8001834:	b29a      	uxth	r2, r3
 8001836:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800183a:	9301      	str	r3, [sp, #4]
 800183c:	2302      	movs	r3, #2
 800183e:	9300      	str	r3, [sp, #0]
 8001840:	2300      	movs	r3, #0
 8001842:	210a      	movs	r1, #10
 8001844:	4889      	ldr	r0, [pc, #548]	; (8001a6c <FreqMenu_DrawFreqPresetMenu+0x390>)
 8001846:	f009 fe21 	bl	800b48c <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 1KHz", 	120, menu_pos_y1, BLACK, 2, WHITE);
 800184a:	7bfb      	ldrb	r3, [r7, #15]
 800184c:	b29a      	uxth	r2, r3
 800184e:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001852:	9301      	str	r3, [sp, #4]
 8001854:	2302      	movs	r3, #2
 8001856:	9300      	str	r3, [sp, #0]
 8001858:	2300      	movs	r3, #0
 800185a:	2178      	movs	r1, #120	; 0x78
 800185c:	4884      	ldr	r0, [pc, #528]	; (8001a70 <FreqMenu_DrawFreqPresetMenu+0x394>)
 800185e:	f009 fe15 	bl	800b48c <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 5KHz", 	120, menu_pos_y2, BLACK, 2, WHITE);
 8001862:	7bbb      	ldrb	r3, [r7, #14]
 8001864:	b29a      	uxth	r2, r3
 8001866:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800186a:	9301      	str	r3, [sp, #4]
 800186c:	2302      	movs	r3, #2
 800186e:	9300      	str	r3, [sp, #0]
 8001870:	2300      	movs	r3, #0
 8001872:	2178      	movs	r1, #120	; 0x78
 8001874:	487f      	ldr	r0, [pc, #508]	; (8001a74 <FreqMenu_DrawFreqPresetMenu+0x398>)
 8001876:	f009 fe09 	bl	800b48c <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 10KHz", 	120, menu_pos_y3, BLACK, 2, WHITE);
 800187a:	7b7b      	ldrb	r3, [r7, #13]
 800187c:	b29a      	uxth	r2, r3
 800187e:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001882:	9301      	str	r3, [sp, #4]
 8001884:	2302      	movs	r3, #2
 8001886:	9300      	str	r3, [sp, #0]
 8001888:	2300      	movs	r3, #0
 800188a:	2178      	movs	r1, #120	; 0x78
 800188c:	487a      	ldr	r0, [pc, #488]	; (8001a78 <FreqMenu_DrawFreqPresetMenu+0x39c>)
 800188e:	f009 fdfd 	bl	800b48c <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 25KHz", 	120, menu_pos_y4, BLACK, 2, WHITE);
 8001892:	7b3b      	ldrb	r3, [r7, #12]
 8001894:	b29a      	uxth	r2, r3
 8001896:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800189a:	9301      	str	r3, [sp, #4]
 800189c:	2302      	movs	r3, #2
 800189e:	9300      	str	r3, [sp, #0]
 80018a0:	2300      	movs	r3, #0
 80018a2:	2178      	movs	r1, #120	; 0x78
 80018a4:	4875      	ldr	r0, [pc, #468]	; (8001a7c <FreqMenu_DrawFreqPresetMenu+0x3a0>)
 80018a6:	f009 fdf1 	bl	800b48c <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 50KHz", 	120, menu_pos_y5, BLACK, 2, WHITE);
 80018aa:	7afb      	ldrb	r3, [r7, #11]
 80018ac:	b29a      	uxth	r2, r3
 80018ae:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80018b2:	9301      	str	r3, [sp, #4]
 80018b4:	2302      	movs	r3, #2
 80018b6:	9300      	str	r3, [sp, #0]
 80018b8:	2300      	movs	r3, #0
 80018ba:	2178      	movs	r1, #120	; 0x78
 80018bc:	4870      	ldr	r0, [pc, #448]	; (8001a80 <FreqMenu_DrawFreqPresetMenu+0x3a4>)
 80018be:	f009 fde5 	bl	800b48c <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 75KHz",	120, menu_pos_y6, BLACK, 2, WHITE);
 80018c2:	7abb      	ldrb	r3, [r7, #10]
 80018c4:	b29a      	uxth	r2, r3
 80018c6:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80018ca:	9301      	str	r3, [sp, #4]
 80018cc:	2302      	movs	r3, #2
 80018ce:	9300      	str	r3, [sp, #0]
 80018d0:	2300      	movs	r3, #0
 80018d2:	2178      	movs	r1, #120	; 0x78
 80018d4:	486b      	ldr	r0, [pc, #428]	; (8001a84 <FreqMenu_DrawFreqPresetMenu+0x3a8>)
 80018d6:	f009 fdd9 	bl	800b48c <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 100KHz", 	120, menu_pos_y7, BLACK, 2, WHITE);
 80018da:	7a7b      	ldrb	r3, [r7, #9]
 80018dc:	b29a      	uxth	r2, r3
 80018de:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80018e2:	9301      	str	r3, [sp, #4]
 80018e4:	2302      	movs	r3, #2
 80018e6:	9300      	str	r3, [sp, #0]
 80018e8:	2300      	movs	r3, #0
 80018ea:	2178      	movs	r1, #120	; 0x78
 80018ec:	4866      	ldr	r0, [pc, #408]	; (8001a88 <FreqMenu_DrawFreqPresetMenu+0x3ac>)
 80018ee:	f009 fdcd 	bl	800b48c <ILI9341_Draw_Text>
				break;
 80018f2:	f001 b956 	b.w	8002ba2 <FreqMenu_DrawFreqPresetMenu+0x14c6>
				ILI9341_Draw_Text("- 1Hz", 		10, menu_pos_y1, BLACK, 2, WHITE);
 80018f6:	7bfb      	ldrb	r3, [r7, #15]
 80018f8:	b29a      	uxth	r2, r3
 80018fa:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80018fe:	9301      	str	r3, [sp, #4]
 8001900:	2302      	movs	r3, #2
 8001902:	9300      	str	r3, [sp, #0]
 8001904:	2300      	movs	r3, #0
 8001906:	210a      	movs	r1, #10
 8001908:	4852      	ldr	r0, [pc, #328]	; (8001a54 <FreqMenu_DrawFreqPresetMenu+0x378>)
 800190a:	f009 fdbf 	bl	800b48c <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 10Hz", 	10, menu_pos_y2, WHITE, 2, BLACK);
 800190e:	7bbb      	ldrb	r3, [r7, #14]
 8001910:	b29a      	uxth	r2, r3
 8001912:	2300      	movs	r3, #0
 8001914:	9301      	str	r3, [sp, #4]
 8001916:	2302      	movs	r3, #2
 8001918:	9300      	str	r3, [sp, #0]
 800191a:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800191e:	210a      	movs	r1, #10
 8001920:	484d      	ldr	r0, [pc, #308]	; (8001a58 <FreqMenu_DrawFreqPresetMenu+0x37c>)
 8001922:	f009 fdb3 	bl	800b48c <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 50Hz", 	10, menu_pos_y3, BLACK, 2, WHITE);
 8001926:	7b7b      	ldrb	r3, [r7, #13]
 8001928:	b29a      	uxth	r2, r3
 800192a:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800192e:	9301      	str	r3, [sp, #4]
 8001930:	2302      	movs	r3, #2
 8001932:	9300      	str	r3, [sp, #0]
 8001934:	2300      	movs	r3, #0
 8001936:	210a      	movs	r1, #10
 8001938:	4848      	ldr	r0, [pc, #288]	; (8001a5c <FreqMenu_DrawFreqPresetMenu+0x380>)
 800193a:	f009 fda7 	bl	800b48c <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 100Hz", 	10, menu_pos_y4, BLACK, 2, WHITE);
 800193e:	7b3b      	ldrb	r3, [r7, #12]
 8001940:	b29a      	uxth	r2, r3
 8001942:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001946:	9301      	str	r3, [sp, #4]
 8001948:	2302      	movs	r3, #2
 800194a:	9300      	str	r3, [sp, #0]
 800194c:	2300      	movs	r3, #0
 800194e:	210a      	movs	r1, #10
 8001950:	4843      	ldr	r0, [pc, #268]	; (8001a60 <FreqMenu_DrawFreqPresetMenu+0x384>)
 8001952:	f009 fd9b 	bl	800b48c <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 250Hz", 	10, menu_pos_y5, BLACK, 2, WHITE);
 8001956:	7afb      	ldrb	r3, [r7, #11]
 8001958:	b29a      	uxth	r2, r3
 800195a:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800195e:	9301      	str	r3, [sp, #4]
 8001960:	2302      	movs	r3, #2
 8001962:	9300      	str	r3, [sp, #0]
 8001964:	2300      	movs	r3, #0
 8001966:	210a      	movs	r1, #10
 8001968:	483e      	ldr	r0, [pc, #248]	; (8001a64 <FreqMenu_DrawFreqPresetMenu+0x388>)
 800196a:	f009 fd8f 	bl	800b48c <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 500Hz",	10, menu_pos_y6, BLACK, 2, WHITE);
 800196e:	7abb      	ldrb	r3, [r7, #10]
 8001970:	b29a      	uxth	r2, r3
 8001972:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001976:	9301      	str	r3, [sp, #4]
 8001978:	2302      	movs	r3, #2
 800197a:	9300      	str	r3, [sp, #0]
 800197c:	2300      	movs	r3, #0
 800197e:	210a      	movs	r1, #10
 8001980:	4839      	ldr	r0, [pc, #228]	; (8001a68 <FreqMenu_DrawFreqPresetMenu+0x38c>)
 8001982:	f009 fd83 	bl	800b48c <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 750Hz", 	10, menu_pos_y7, BLACK, 2, WHITE);
 8001986:	7a7b      	ldrb	r3, [r7, #9]
 8001988:	b29a      	uxth	r2, r3
 800198a:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800198e:	9301      	str	r3, [sp, #4]
 8001990:	2302      	movs	r3, #2
 8001992:	9300      	str	r3, [sp, #0]
 8001994:	2300      	movs	r3, #0
 8001996:	210a      	movs	r1, #10
 8001998:	4834      	ldr	r0, [pc, #208]	; (8001a6c <FreqMenu_DrawFreqPresetMenu+0x390>)
 800199a:	f009 fd77 	bl	800b48c <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 1KHz", 	120, menu_pos_y1, BLACK, 2, WHITE);
 800199e:	7bfb      	ldrb	r3, [r7, #15]
 80019a0:	b29a      	uxth	r2, r3
 80019a2:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80019a6:	9301      	str	r3, [sp, #4]
 80019a8:	2302      	movs	r3, #2
 80019aa:	9300      	str	r3, [sp, #0]
 80019ac:	2300      	movs	r3, #0
 80019ae:	2178      	movs	r1, #120	; 0x78
 80019b0:	482f      	ldr	r0, [pc, #188]	; (8001a70 <FreqMenu_DrawFreqPresetMenu+0x394>)
 80019b2:	f009 fd6b 	bl	800b48c <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 5KHz", 	120, menu_pos_y2, BLACK, 2, WHITE);
 80019b6:	7bbb      	ldrb	r3, [r7, #14]
 80019b8:	b29a      	uxth	r2, r3
 80019ba:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80019be:	9301      	str	r3, [sp, #4]
 80019c0:	2302      	movs	r3, #2
 80019c2:	9300      	str	r3, [sp, #0]
 80019c4:	2300      	movs	r3, #0
 80019c6:	2178      	movs	r1, #120	; 0x78
 80019c8:	482a      	ldr	r0, [pc, #168]	; (8001a74 <FreqMenu_DrawFreqPresetMenu+0x398>)
 80019ca:	f009 fd5f 	bl	800b48c <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 10KHz", 	120, menu_pos_y3, BLACK, 2, WHITE);
 80019ce:	7b7b      	ldrb	r3, [r7, #13]
 80019d0:	b29a      	uxth	r2, r3
 80019d2:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80019d6:	9301      	str	r3, [sp, #4]
 80019d8:	2302      	movs	r3, #2
 80019da:	9300      	str	r3, [sp, #0]
 80019dc:	2300      	movs	r3, #0
 80019de:	2178      	movs	r1, #120	; 0x78
 80019e0:	4825      	ldr	r0, [pc, #148]	; (8001a78 <FreqMenu_DrawFreqPresetMenu+0x39c>)
 80019e2:	f009 fd53 	bl	800b48c <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 25KHz", 	120, menu_pos_y4, BLACK, 2, WHITE);
 80019e6:	7b3b      	ldrb	r3, [r7, #12]
 80019e8:	b29a      	uxth	r2, r3
 80019ea:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80019ee:	9301      	str	r3, [sp, #4]
 80019f0:	2302      	movs	r3, #2
 80019f2:	9300      	str	r3, [sp, #0]
 80019f4:	2300      	movs	r3, #0
 80019f6:	2178      	movs	r1, #120	; 0x78
 80019f8:	4820      	ldr	r0, [pc, #128]	; (8001a7c <FreqMenu_DrawFreqPresetMenu+0x3a0>)
 80019fa:	f009 fd47 	bl	800b48c <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 50KHz", 	120, menu_pos_y5, BLACK, 2, WHITE);
 80019fe:	7afb      	ldrb	r3, [r7, #11]
 8001a00:	b29a      	uxth	r2, r3
 8001a02:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001a06:	9301      	str	r3, [sp, #4]
 8001a08:	2302      	movs	r3, #2
 8001a0a:	9300      	str	r3, [sp, #0]
 8001a0c:	2300      	movs	r3, #0
 8001a0e:	2178      	movs	r1, #120	; 0x78
 8001a10:	481b      	ldr	r0, [pc, #108]	; (8001a80 <FreqMenu_DrawFreqPresetMenu+0x3a4>)
 8001a12:	f009 fd3b 	bl	800b48c <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 75KHz",	120, menu_pos_y6, BLACK, 2, WHITE);
 8001a16:	7abb      	ldrb	r3, [r7, #10]
 8001a18:	b29a      	uxth	r2, r3
 8001a1a:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001a1e:	9301      	str	r3, [sp, #4]
 8001a20:	2302      	movs	r3, #2
 8001a22:	9300      	str	r3, [sp, #0]
 8001a24:	2300      	movs	r3, #0
 8001a26:	2178      	movs	r1, #120	; 0x78
 8001a28:	4816      	ldr	r0, [pc, #88]	; (8001a84 <FreqMenu_DrawFreqPresetMenu+0x3a8>)
 8001a2a:	f009 fd2f 	bl	800b48c <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 100KHz", 	120, menu_pos_y7, BLACK, 2, WHITE);
 8001a2e:	7a7b      	ldrb	r3, [r7, #9]
 8001a30:	b29a      	uxth	r2, r3
 8001a32:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001a36:	9301      	str	r3, [sp, #4]
 8001a38:	2302      	movs	r3, #2
 8001a3a:	9300      	str	r3, [sp, #0]
 8001a3c:	2300      	movs	r3, #0
 8001a3e:	2178      	movs	r1, #120	; 0x78
 8001a40:	4811      	ldr	r0, [pc, #68]	; (8001a88 <FreqMenu_DrawFreqPresetMenu+0x3ac>)
 8001a42:	f009 fd23 	bl	800b48c <ILI9341_Draw_Text>
				break;
 8001a46:	f001 b8ac 	b.w	8002ba2 <FreqMenu_DrawFreqPresetMenu+0x14c6>
 8001a4a:	bf00      	nop
 8001a4c:	000124f8 	.word	0x000124f8
 8001a50:	000186a0 	.word	0x000186a0
 8001a54:	0800eb04 	.word	0x0800eb04
 8001a58:	0800eb0c 	.word	0x0800eb0c
 8001a5c:	0800eb14 	.word	0x0800eb14
 8001a60:	0800eb1c 	.word	0x0800eb1c
 8001a64:	0800eb24 	.word	0x0800eb24
 8001a68:	0800eb2c 	.word	0x0800eb2c
 8001a6c:	0800eb34 	.word	0x0800eb34
 8001a70:	0800eb3c 	.word	0x0800eb3c
 8001a74:	0800eb44 	.word	0x0800eb44
 8001a78:	0800eb4c 	.word	0x0800eb4c
 8001a7c:	0800eb54 	.word	0x0800eb54
 8001a80:	0800eb5c 	.word	0x0800eb5c
 8001a84:	0800eb64 	.word	0x0800eb64
 8001a88:	0800eb6c 	.word	0x0800eb6c
				ILI9341_Draw_Text("- 1Hz", 		10, menu_pos_y1, BLACK, 2, WHITE);
 8001a8c:	7bfb      	ldrb	r3, [r7, #15]
 8001a8e:	b29a      	uxth	r2, r3
 8001a90:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001a94:	9301      	str	r3, [sp, #4]
 8001a96:	2302      	movs	r3, #2
 8001a98:	9300      	str	r3, [sp, #0]
 8001a9a:	2300      	movs	r3, #0
 8001a9c:	210a      	movs	r1, #10
 8001a9e:	48a5      	ldr	r0, [pc, #660]	; (8001d34 <FreqMenu_DrawFreqPresetMenu+0x658>)
 8001aa0:	f009 fcf4 	bl	800b48c <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 10Hz", 	10, menu_pos_y2, BLACK, 2, WHITE);
 8001aa4:	7bbb      	ldrb	r3, [r7, #14]
 8001aa6:	b29a      	uxth	r2, r3
 8001aa8:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001aac:	9301      	str	r3, [sp, #4]
 8001aae:	2302      	movs	r3, #2
 8001ab0:	9300      	str	r3, [sp, #0]
 8001ab2:	2300      	movs	r3, #0
 8001ab4:	210a      	movs	r1, #10
 8001ab6:	48a0      	ldr	r0, [pc, #640]	; (8001d38 <FreqMenu_DrawFreqPresetMenu+0x65c>)
 8001ab8:	f009 fce8 	bl	800b48c <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 50Hz", 	10, menu_pos_y3, WHITE, 2, BLACK);
 8001abc:	7b7b      	ldrb	r3, [r7, #13]
 8001abe:	b29a      	uxth	r2, r3
 8001ac0:	2300      	movs	r3, #0
 8001ac2:	9301      	str	r3, [sp, #4]
 8001ac4:	2302      	movs	r3, #2
 8001ac6:	9300      	str	r3, [sp, #0]
 8001ac8:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001acc:	210a      	movs	r1, #10
 8001ace:	489b      	ldr	r0, [pc, #620]	; (8001d3c <FreqMenu_DrawFreqPresetMenu+0x660>)
 8001ad0:	f009 fcdc 	bl	800b48c <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 100Hz", 	10, menu_pos_y4, BLACK, 2, WHITE);
 8001ad4:	7b3b      	ldrb	r3, [r7, #12]
 8001ad6:	b29a      	uxth	r2, r3
 8001ad8:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001adc:	9301      	str	r3, [sp, #4]
 8001ade:	2302      	movs	r3, #2
 8001ae0:	9300      	str	r3, [sp, #0]
 8001ae2:	2300      	movs	r3, #0
 8001ae4:	210a      	movs	r1, #10
 8001ae6:	4896      	ldr	r0, [pc, #600]	; (8001d40 <FreqMenu_DrawFreqPresetMenu+0x664>)
 8001ae8:	f009 fcd0 	bl	800b48c <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 250Hz", 	10, menu_pos_y5, BLACK, 2, WHITE);
 8001aec:	7afb      	ldrb	r3, [r7, #11]
 8001aee:	b29a      	uxth	r2, r3
 8001af0:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001af4:	9301      	str	r3, [sp, #4]
 8001af6:	2302      	movs	r3, #2
 8001af8:	9300      	str	r3, [sp, #0]
 8001afa:	2300      	movs	r3, #0
 8001afc:	210a      	movs	r1, #10
 8001afe:	4891      	ldr	r0, [pc, #580]	; (8001d44 <FreqMenu_DrawFreqPresetMenu+0x668>)
 8001b00:	f009 fcc4 	bl	800b48c <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 500Hz",	10, menu_pos_y6, BLACK, 2, WHITE);
 8001b04:	7abb      	ldrb	r3, [r7, #10]
 8001b06:	b29a      	uxth	r2, r3
 8001b08:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001b0c:	9301      	str	r3, [sp, #4]
 8001b0e:	2302      	movs	r3, #2
 8001b10:	9300      	str	r3, [sp, #0]
 8001b12:	2300      	movs	r3, #0
 8001b14:	210a      	movs	r1, #10
 8001b16:	488c      	ldr	r0, [pc, #560]	; (8001d48 <FreqMenu_DrawFreqPresetMenu+0x66c>)
 8001b18:	f009 fcb8 	bl	800b48c <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 750Hz", 	10, menu_pos_y7, BLACK, 2, WHITE);
 8001b1c:	7a7b      	ldrb	r3, [r7, #9]
 8001b1e:	b29a      	uxth	r2, r3
 8001b20:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001b24:	9301      	str	r3, [sp, #4]
 8001b26:	2302      	movs	r3, #2
 8001b28:	9300      	str	r3, [sp, #0]
 8001b2a:	2300      	movs	r3, #0
 8001b2c:	210a      	movs	r1, #10
 8001b2e:	4887      	ldr	r0, [pc, #540]	; (8001d4c <FreqMenu_DrawFreqPresetMenu+0x670>)
 8001b30:	f009 fcac 	bl	800b48c <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 1KHz", 	120, menu_pos_y1, BLACK, 2, WHITE);
 8001b34:	7bfb      	ldrb	r3, [r7, #15]
 8001b36:	b29a      	uxth	r2, r3
 8001b38:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001b3c:	9301      	str	r3, [sp, #4]
 8001b3e:	2302      	movs	r3, #2
 8001b40:	9300      	str	r3, [sp, #0]
 8001b42:	2300      	movs	r3, #0
 8001b44:	2178      	movs	r1, #120	; 0x78
 8001b46:	4882      	ldr	r0, [pc, #520]	; (8001d50 <FreqMenu_DrawFreqPresetMenu+0x674>)
 8001b48:	f009 fca0 	bl	800b48c <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 5KHz", 	120, menu_pos_y2, BLACK, 2, WHITE);
 8001b4c:	7bbb      	ldrb	r3, [r7, #14]
 8001b4e:	b29a      	uxth	r2, r3
 8001b50:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001b54:	9301      	str	r3, [sp, #4]
 8001b56:	2302      	movs	r3, #2
 8001b58:	9300      	str	r3, [sp, #0]
 8001b5a:	2300      	movs	r3, #0
 8001b5c:	2178      	movs	r1, #120	; 0x78
 8001b5e:	487d      	ldr	r0, [pc, #500]	; (8001d54 <FreqMenu_DrawFreqPresetMenu+0x678>)
 8001b60:	f009 fc94 	bl	800b48c <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 10KHz", 	120, menu_pos_y3, BLACK, 2, WHITE);
 8001b64:	7b7b      	ldrb	r3, [r7, #13]
 8001b66:	b29a      	uxth	r2, r3
 8001b68:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001b6c:	9301      	str	r3, [sp, #4]
 8001b6e:	2302      	movs	r3, #2
 8001b70:	9300      	str	r3, [sp, #0]
 8001b72:	2300      	movs	r3, #0
 8001b74:	2178      	movs	r1, #120	; 0x78
 8001b76:	4878      	ldr	r0, [pc, #480]	; (8001d58 <FreqMenu_DrawFreqPresetMenu+0x67c>)
 8001b78:	f009 fc88 	bl	800b48c <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 25KHz", 	120, menu_pos_y4, BLACK, 2, WHITE);
 8001b7c:	7b3b      	ldrb	r3, [r7, #12]
 8001b7e:	b29a      	uxth	r2, r3
 8001b80:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001b84:	9301      	str	r3, [sp, #4]
 8001b86:	2302      	movs	r3, #2
 8001b88:	9300      	str	r3, [sp, #0]
 8001b8a:	2300      	movs	r3, #0
 8001b8c:	2178      	movs	r1, #120	; 0x78
 8001b8e:	4873      	ldr	r0, [pc, #460]	; (8001d5c <FreqMenu_DrawFreqPresetMenu+0x680>)
 8001b90:	f009 fc7c 	bl	800b48c <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 50KHz", 	120, menu_pos_y5, BLACK, 2, WHITE);
 8001b94:	7afb      	ldrb	r3, [r7, #11]
 8001b96:	b29a      	uxth	r2, r3
 8001b98:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001b9c:	9301      	str	r3, [sp, #4]
 8001b9e:	2302      	movs	r3, #2
 8001ba0:	9300      	str	r3, [sp, #0]
 8001ba2:	2300      	movs	r3, #0
 8001ba4:	2178      	movs	r1, #120	; 0x78
 8001ba6:	486e      	ldr	r0, [pc, #440]	; (8001d60 <FreqMenu_DrawFreqPresetMenu+0x684>)
 8001ba8:	f009 fc70 	bl	800b48c <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 75KHz",	120, menu_pos_y6, BLACK, 2, WHITE);
 8001bac:	7abb      	ldrb	r3, [r7, #10]
 8001bae:	b29a      	uxth	r2, r3
 8001bb0:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001bb4:	9301      	str	r3, [sp, #4]
 8001bb6:	2302      	movs	r3, #2
 8001bb8:	9300      	str	r3, [sp, #0]
 8001bba:	2300      	movs	r3, #0
 8001bbc:	2178      	movs	r1, #120	; 0x78
 8001bbe:	4869      	ldr	r0, [pc, #420]	; (8001d64 <FreqMenu_DrawFreqPresetMenu+0x688>)
 8001bc0:	f009 fc64 	bl	800b48c <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 100KHz", 	120, menu_pos_y7, BLACK, 2, WHITE);
 8001bc4:	7a7b      	ldrb	r3, [r7, #9]
 8001bc6:	b29a      	uxth	r2, r3
 8001bc8:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001bcc:	9301      	str	r3, [sp, #4]
 8001bce:	2302      	movs	r3, #2
 8001bd0:	9300      	str	r3, [sp, #0]
 8001bd2:	2300      	movs	r3, #0
 8001bd4:	2178      	movs	r1, #120	; 0x78
 8001bd6:	4864      	ldr	r0, [pc, #400]	; (8001d68 <FreqMenu_DrawFreqPresetMenu+0x68c>)
 8001bd8:	f009 fc58 	bl	800b48c <ILI9341_Draw_Text>
				break;
 8001bdc:	f000 bfe1 	b.w	8002ba2 <FreqMenu_DrawFreqPresetMenu+0x14c6>
				ILI9341_Draw_Text("- 1Hz", 		10, menu_pos_y1, BLACK, 2, WHITE);
 8001be0:	7bfb      	ldrb	r3, [r7, #15]
 8001be2:	b29a      	uxth	r2, r3
 8001be4:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001be8:	9301      	str	r3, [sp, #4]
 8001bea:	2302      	movs	r3, #2
 8001bec:	9300      	str	r3, [sp, #0]
 8001bee:	2300      	movs	r3, #0
 8001bf0:	210a      	movs	r1, #10
 8001bf2:	4850      	ldr	r0, [pc, #320]	; (8001d34 <FreqMenu_DrawFreqPresetMenu+0x658>)
 8001bf4:	f009 fc4a 	bl	800b48c <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 10Hz", 	10, menu_pos_y2, BLACK, 2, WHITE);
 8001bf8:	7bbb      	ldrb	r3, [r7, #14]
 8001bfa:	b29a      	uxth	r2, r3
 8001bfc:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001c00:	9301      	str	r3, [sp, #4]
 8001c02:	2302      	movs	r3, #2
 8001c04:	9300      	str	r3, [sp, #0]
 8001c06:	2300      	movs	r3, #0
 8001c08:	210a      	movs	r1, #10
 8001c0a:	484b      	ldr	r0, [pc, #300]	; (8001d38 <FreqMenu_DrawFreqPresetMenu+0x65c>)
 8001c0c:	f009 fc3e 	bl	800b48c <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 50Hz", 	10, menu_pos_y3, BLACK, 2, WHITE);
 8001c10:	7b7b      	ldrb	r3, [r7, #13]
 8001c12:	b29a      	uxth	r2, r3
 8001c14:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001c18:	9301      	str	r3, [sp, #4]
 8001c1a:	2302      	movs	r3, #2
 8001c1c:	9300      	str	r3, [sp, #0]
 8001c1e:	2300      	movs	r3, #0
 8001c20:	210a      	movs	r1, #10
 8001c22:	4846      	ldr	r0, [pc, #280]	; (8001d3c <FreqMenu_DrawFreqPresetMenu+0x660>)
 8001c24:	f009 fc32 	bl	800b48c <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 100Hz", 	10, menu_pos_y4, WHITE, 2, BLACK);
 8001c28:	7b3b      	ldrb	r3, [r7, #12]
 8001c2a:	b29a      	uxth	r2, r3
 8001c2c:	2300      	movs	r3, #0
 8001c2e:	9301      	str	r3, [sp, #4]
 8001c30:	2302      	movs	r3, #2
 8001c32:	9300      	str	r3, [sp, #0]
 8001c34:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001c38:	210a      	movs	r1, #10
 8001c3a:	4841      	ldr	r0, [pc, #260]	; (8001d40 <FreqMenu_DrawFreqPresetMenu+0x664>)
 8001c3c:	f009 fc26 	bl	800b48c <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 250Hz", 	10, menu_pos_y5, BLACK, 2, WHITE);
 8001c40:	7afb      	ldrb	r3, [r7, #11]
 8001c42:	b29a      	uxth	r2, r3
 8001c44:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001c48:	9301      	str	r3, [sp, #4]
 8001c4a:	2302      	movs	r3, #2
 8001c4c:	9300      	str	r3, [sp, #0]
 8001c4e:	2300      	movs	r3, #0
 8001c50:	210a      	movs	r1, #10
 8001c52:	483c      	ldr	r0, [pc, #240]	; (8001d44 <FreqMenu_DrawFreqPresetMenu+0x668>)
 8001c54:	f009 fc1a 	bl	800b48c <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 500Hz",	10, menu_pos_y6, BLACK, 2, WHITE);
 8001c58:	7abb      	ldrb	r3, [r7, #10]
 8001c5a:	b29a      	uxth	r2, r3
 8001c5c:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001c60:	9301      	str	r3, [sp, #4]
 8001c62:	2302      	movs	r3, #2
 8001c64:	9300      	str	r3, [sp, #0]
 8001c66:	2300      	movs	r3, #0
 8001c68:	210a      	movs	r1, #10
 8001c6a:	4837      	ldr	r0, [pc, #220]	; (8001d48 <FreqMenu_DrawFreqPresetMenu+0x66c>)
 8001c6c:	f009 fc0e 	bl	800b48c <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 750Hz", 	10, menu_pos_y7, BLACK, 2, WHITE);
 8001c70:	7a7b      	ldrb	r3, [r7, #9]
 8001c72:	b29a      	uxth	r2, r3
 8001c74:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001c78:	9301      	str	r3, [sp, #4]
 8001c7a:	2302      	movs	r3, #2
 8001c7c:	9300      	str	r3, [sp, #0]
 8001c7e:	2300      	movs	r3, #0
 8001c80:	210a      	movs	r1, #10
 8001c82:	4832      	ldr	r0, [pc, #200]	; (8001d4c <FreqMenu_DrawFreqPresetMenu+0x670>)
 8001c84:	f009 fc02 	bl	800b48c <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 1KHz", 	120, menu_pos_y1, BLACK, 2, WHITE);
 8001c88:	7bfb      	ldrb	r3, [r7, #15]
 8001c8a:	b29a      	uxth	r2, r3
 8001c8c:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001c90:	9301      	str	r3, [sp, #4]
 8001c92:	2302      	movs	r3, #2
 8001c94:	9300      	str	r3, [sp, #0]
 8001c96:	2300      	movs	r3, #0
 8001c98:	2178      	movs	r1, #120	; 0x78
 8001c9a:	482d      	ldr	r0, [pc, #180]	; (8001d50 <FreqMenu_DrawFreqPresetMenu+0x674>)
 8001c9c:	f009 fbf6 	bl	800b48c <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 5KHz", 	120, menu_pos_y2, BLACK, 2, WHITE);
 8001ca0:	7bbb      	ldrb	r3, [r7, #14]
 8001ca2:	b29a      	uxth	r2, r3
 8001ca4:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001ca8:	9301      	str	r3, [sp, #4]
 8001caa:	2302      	movs	r3, #2
 8001cac:	9300      	str	r3, [sp, #0]
 8001cae:	2300      	movs	r3, #0
 8001cb0:	2178      	movs	r1, #120	; 0x78
 8001cb2:	4828      	ldr	r0, [pc, #160]	; (8001d54 <FreqMenu_DrawFreqPresetMenu+0x678>)
 8001cb4:	f009 fbea 	bl	800b48c <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 10KHz", 	120, menu_pos_y3, BLACK, 2, WHITE);
 8001cb8:	7b7b      	ldrb	r3, [r7, #13]
 8001cba:	b29a      	uxth	r2, r3
 8001cbc:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001cc0:	9301      	str	r3, [sp, #4]
 8001cc2:	2302      	movs	r3, #2
 8001cc4:	9300      	str	r3, [sp, #0]
 8001cc6:	2300      	movs	r3, #0
 8001cc8:	2178      	movs	r1, #120	; 0x78
 8001cca:	4823      	ldr	r0, [pc, #140]	; (8001d58 <FreqMenu_DrawFreqPresetMenu+0x67c>)
 8001ccc:	f009 fbde 	bl	800b48c <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 25KHz", 	120, menu_pos_y4, BLACK, 2, WHITE);
 8001cd0:	7b3b      	ldrb	r3, [r7, #12]
 8001cd2:	b29a      	uxth	r2, r3
 8001cd4:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001cd8:	9301      	str	r3, [sp, #4]
 8001cda:	2302      	movs	r3, #2
 8001cdc:	9300      	str	r3, [sp, #0]
 8001cde:	2300      	movs	r3, #0
 8001ce0:	2178      	movs	r1, #120	; 0x78
 8001ce2:	481e      	ldr	r0, [pc, #120]	; (8001d5c <FreqMenu_DrawFreqPresetMenu+0x680>)
 8001ce4:	f009 fbd2 	bl	800b48c <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 50KHz", 	120, menu_pos_y5, BLACK, 2, WHITE);
 8001ce8:	7afb      	ldrb	r3, [r7, #11]
 8001cea:	b29a      	uxth	r2, r3
 8001cec:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001cf0:	9301      	str	r3, [sp, #4]
 8001cf2:	2302      	movs	r3, #2
 8001cf4:	9300      	str	r3, [sp, #0]
 8001cf6:	2300      	movs	r3, #0
 8001cf8:	2178      	movs	r1, #120	; 0x78
 8001cfa:	4819      	ldr	r0, [pc, #100]	; (8001d60 <FreqMenu_DrawFreqPresetMenu+0x684>)
 8001cfc:	f009 fbc6 	bl	800b48c <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 75KHz",	120, menu_pos_y6, BLACK, 2, WHITE);
 8001d00:	7abb      	ldrb	r3, [r7, #10]
 8001d02:	b29a      	uxth	r2, r3
 8001d04:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001d08:	9301      	str	r3, [sp, #4]
 8001d0a:	2302      	movs	r3, #2
 8001d0c:	9300      	str	r3, [sp, #0]
 8001d0e:	2300      	movs	r3, #0
 8001d10:	2178      	movs	r1, #120	; 0x78
 8001d12:	4814      	ldr	r0, [pc, #80]	; (8001d64 <FreqMenu_DrawFreqPresetMenu+0x688>)
 8001d14:	f009 fbba 	bl	800b48c <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 100KHz", 	120, menu_pos_y7, BLACK, 2, WHITE);
 8001d18:	7a7b      	ldrb	r3, [r7, #9]
 8001d1a:	b29a      	uxth	r2, r3
 8001d1c:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001d20:	9301      	str	r3, [sp, #4]
 8001d22:	2302      	movs	r3, #2
 8001d24:	9300      	str	r3, [sp, #0]
 8001d26:	2300      	movs	r3, #0
 8001d28:	2178      	movs	r1, #120	; 0x78
 8001d2a:	480f      	ldr	r0, [pc, #60]	; (8001d68 <FreqMenu_DrawFreqPresetMenu+0x68c>)
 8001d2c:	f009 fbae 	bl	800b48c <ILI9341_Draw_Text>
				break;
 8001d30:	f000 bf37 	b.w	8002ba2 <FreqMenu_DrawFreqPresetMenu+0x14c6>
 8001d34:	0800eb04 	.word	0x0800eb04
 8001d38:	0800eb0c 	.word	0x0800eb0c
 8001d3c:	0800eb14 	.word	0x0800eb14
 8001d40:	0800eb1c 	.word	0x0800eb1c
 8001d44:	0800eb24 	.word	0x0800eb24
 8001d48:	0800eb2c 	.word	0x0800eb2c
 8001d4c:	0800eb34 	.word	0x0800eb34
 8001d50:	0800eb3c 	.word	0x0800eb3c
 8001d54:	0800eb44 	.word	0x0800eb44
 8001d58:	0800eb4c 	.word	0x0800eb4c
 8001d5c:	0800eb54 	.word	0x0800eb54
 8001d60:	0800eb5c 	.word	0x0800eb5c
 8001d64:	0800eb64 	.word	0x0800eb64
 8001d68:	0800eb6c 	.word	0x0800eb6c
				ILI9341_Draw_Text("- 1Hz", 		10, menu_pos_y1, BLACK, 2, WHITE);
 8001d6c:	7bfb      	ldrb	r3, [r7, #15]
 8001d6e:	b29a      	uxth	r2, r3
 8001d70:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001d74:	9301      	str	r3, [sp, #4]
 8001d76:	2302      	movs	r3, #2
 8001d78:	9300      	str	r3, [sp, #0]
 8001d7a:	2300      	movs	r3, #0
 8001d7c:	210a      	movs	r1, #10
 8001d7e:	48a5      	ldr	r0, [pc, #660]	; (8002014 <FreqMenu_DrawFreqPresetMenu+0x938>)
 8001d80:	f009 fb84 	bl	800b48c <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 10Hz", 	10, menu_pos_y2, BLACK, 2, WHITE);
 8001d84:	7bbb      	ldrb	r3, [r7, #14]
 8001d86:	b29a      	uxth	r2, r3
 8001d88:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001d8c:	9301      	str	r3, [sp, #4]
 8001d8e:	2302      	movs	r3, #2
 8001d90:	9300      	str	r3, [sp, #0]
 8001d92:	2300      	movs	r3, #0
 8001d94:	210a      	movs	r1, #10
 8001d96:	48a0      	ldr	r0, [pc, #640]	; (8002018 <FreqMenu_DrawFreqPresetMenu+0x93c>)
 8001d98:	f009 fb78 	bl	800b48c <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 50Hz", 	10, menu_pos_y3, BLACK, 2, WHITE);
 8001d9c:	7b7b      	ldrb	r3, [r7, #13]
 8001d9e:	b29a      	uxth	r2, r3
 8001da0:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001da4:	9301      	str	r3, [sp, #4]
 8001da6:	2302      	movs	r3, #2
 8001da8:	9300      	str	r3, [sp, #0]
 8001daa:	2300      	movs	r3, #0
 8001dac:	210a      	movs	r1, #10
 8001dae:	489b      	ldr	r0, [pc, #620]	; (800201c <FreqMenu_DrawFreqPresetMenu+0x940>)
 8001db0:	f009 fb6c 	bl	800b48c <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 100Hz", 	10, menu_pos_y4, BLACK, 2, WHITE);
 8001db4:	7b3b      	ldrb	r3, [r7, #12]
 8001db6:	b29a      	uxth	r2, r3
 8001db8:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001dbc:	9301      	str	r3, [sp, #4]
 8001dbe:	2302      	movs	r3, #2
 8001dc0:	9300      	str	r3, [sp, #0]
 8001dc2:	2300      	movs	r3, #0
 8001dc4:	210a      	movs	r1, #10
 8001dc6:	4896      	ldr	r0, [pc, #600]	; (8002020 <FreqMenu_DrawFreqPresetMenu+0x944>)
 8001dc8:	f009 fb60 	bl	800b48c <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 250Hz", 	10, menu_pos_y5, WHITE, 2, BLACK);
 8001dcc:	7afb      	ldrb	r3, [r7, #11]
 8001dce:	b29a      	uxth	r2, r3
 8001dd0:	2300      	movs	r3, #0
 8001dd2:	9301      	str	r3, [sp, #4]
 8001dd4:	2302      	movs	r3, #2
 8001dd6:	9300      	str	r3, [sp, #0]
 8001dd8:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001ddc:	210a      	movs	r1, #10
 8001dde:	4891      	ldr	r0, [pc, #580]	; (8002024 <FreqMenu_DrawFreqPresetMenu+0x948>)
 8001de0:	f009 fb54 	bl	800b48c <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 500Hz",	10, menu_pos_y6, BLACK, 2, WHITE);
 8001de4:	7abb      	ldrb	r3, [r7, #10]
 8001de6:	b29a      	uxth	r2, r3
 8001de8:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001dec:	9301      	str	r3, [sp, #4]
 8001dee:	2302      	movs	r3, #2
 8001df0:	9300      	str	r3, [sp, #0]
 8001df2:	2300      	movs	r3, #0
 8001df4:	210a      	movs	r1, #10
 8001df6:	488c      	ldr	r0, [pc, #560]	; (8002028 <FreqMenu_DrawFreqPresetMenu+0x94c>)
 8001df8:	f009 fb48 	bl	800b48c <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 750Hz", 	10, menu_pos_y7, BLACK, 2, WHITE);
 8001dfc:	7a7b      	ldrb	r3, [r7, #9]
 8001dfe:	b29a      	uxth	r2, r3
 8001e00:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001e04:	9301      	str	r3, [sp, #4]
 8001e06:	2302      	movs	r3, #2
 8001e08:	9300      	str	r3, [sp, #0]
 8001e0a:	2300      	movs	r3, #0
 8001e0c:	210a      	movs	r1, #10
 8001e0e:	4887      	ldr	r0, [pc, #540]	; (800202c <FreqMenu_DrawFreqPresetMenu+0x950>)
 8001e10:	f009 fb3c 	bl	800b48c <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 1KHz", 	120, menu_pos_y1, BLACK, 2, WHITE);
 8001e14:	7bfb      	ldrb	r3, [r7, #15]
 8001e16:	b29a      	uxth	r2, r3
 8001e18:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001e1c:	9301      	str	r3, [sp, #4]
 8001e1e:	2302      	movs	r3, #2
 8001e20:	9300      	str	r3, [sp, #0]
 8001e22:	2300      	movs	r3, #0
 8001e24:	2178      	movs	r1, #120	; 0x78
 8001e26:	4882      	ldr	r0, [pc, #520]	; (8002030 <FreqMenu_DrawFreqPresetMenu+0x954>)
 8001e28:	f009 fb30 	bl	800b48c <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 5KHz", 	120, menu_pos_y2, BLACK, 2, WHITE);
 8001e2c:	7bbb      	ldrb	r3, [r7, #14]
 8001e2e:	b29a      	uxth	r2, r3
 8001e30:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001e34:	9301      	str	r3, [sp, #4]
 8001e36:	2302      	movs	r3, #2
 8001e38:	9300      	str	r3, [sp, #0]
 8001e3a:	2300      	movs	r3, #0
 8001e3c:	2178      	movs	r1, #120	; 0x78
 8001e3e:	487d      	ldr	r0, [pc, #500]	; (8002034 <FreqMenu_DrawFreqPresetMenu+0x958>)
 8001e40:	f009 fb24 	bl	800b48c <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 10KHz", 	120, menu_pos_y3, BLACK, 2, WHITE);
 8001e44:	7b7b      	ldrb	r3, [r7, #13]
 8001e46:	b29a      	uxth	r2, r3
 8001e48:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001e4c:	9301      	str	r3, [sp, #4]
 8001e4e:	2302      	movs	r3, #2
 8001e50:	9300      	str	r3, [sp, #0]
 8001e52:	2300      	movs	r3, #0
 8001e54:	2178      	movs	r1, #120	; 0x78
 8001e56:	4878      	ldr	r0, [pc, #480]	; (8002038 <FreqMenu_DrawFreqPresetMenu+0x95c>)
 8001e58:	f009 fb18 	bl	800b48c <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 25KHz", 	120, menu_pos_y4, BLACK, 2, WHITE);
 8001e5c:	7b3b      	ldrb	r3, [r7, #12]
 8001e5e:	b29a      	uxth	r2, r3
 8001e60:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001e64:	9301      	str	r3, [sp, #4]
 8001e66:	2302      	movs	r3, #2
 8001e68:	9300      	str	r3, [sp, #0]
 8001e6a:	2300      	movs	r3, #0
 8001e6c:	2178      	movs	r1, #120	; 0x78
 8001e6e:	4873      	ldr	r0, [pc, #460]	; (800203c <FreqMenu_DrawFreqPresetMenu+0x960>)
 8001e70:	f009 fb0c 	bl	800b48c <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 50KHz", 	120, menu_pos_y5, BLACK, 2, WHITE);
 8001e74:	7afb      	ldrb	r3, [r7, #11]
 8001e76:	b29a      	uxth	r2, r3
 8001e78:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001e7c:	9301      	str	r3, [sp, #4]
 8001e7e:	2302      	movs	r3, #2
 8001e80:	9300      	str	r3, [sp, #0]
 8001e82:	2300      	movs	r3, #0
 8001e84:	2178      	movs	r1, #120	; 0x78
 8001e86:	486e      	ldr	r0, [pc, #440]	; (8002040 <FreqMenu_DrawFreqPresetMenu+0x964>)
 8001e88:	f009 fb00 	bl	800b48c <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 75KHz",	120, menu_pos_y6, BLACK, 2, WHITE);
 8001e8c:	7abb      	ldrb	r3, [r7, #10]
 8001e8e:	b29a      	uxth	r2, r3
 8001e90:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001e94:	9301      	str	r3, [sp, #4]
 8001e96:	2302      	movs	r3, #2
 8001e98:	9300      	str	r3, [sp, #0]
 8001e9a:	2300      	movs	r3, #0
 8001e9c:	2178      	movs	r1, #120	; 0x78
 8001e9e:	4869      	ldr	r0, [pc, #420]	; (8002044 <FreqMenu_DrawFreqPresetMenu+0x968>)
 8001ea0:	f009 faf4 	bl	800b48c <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 100KHz", 	120, menu_pos_y7, BLACK, 2, WHITE);
 8001ea4:	7a7b      	ldrb	r3, [r7, #9]
 8001ea6:	b29a      	uxth	r2, r3
 8001ea8:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001eac:	9301      	str	r3, [sp, #4]
 8001eae:	2302      	movs	r3, #2
 8001eb0:	9300      	str	r3, [sp, #0]
 8001eb2:	2300      	movs	r3, #0
 8001eb4:	2178      	movs	r1, #120	; 0x78
 8001eb6:	4864      	ldr	r0, [pc, #400]	; (8002048 <FreqMenu_DrawFreqPresetMenu+0x96c>)
 8001eb8:	f009 fae8 	bl	800b48c <ILI9341_Draw_Text>
				break;
 8001ebc:	f000 be71 	b.w	8002ba2 <FreqMenu_DrawFreqPresetMenu+0x14c6>
				ILI9341_Draw_Text("- 1Hz", 		10, menu_pos_y1, BLACK, 2, WHITE);
 8001ec0:	7bfb      	ldrb	r3, [r7, #15]
 8001ec2:	b29a      	uxth	r2, r3
 8001ec4:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001ec8:	9301      	str	r3, [sp, #4]
 8001eca:	2302      	movs	r3, #2
 8001ecc:	9300      	str	r3, [sp, #0]
 8001ece:	2300      	movs	r3, #0
 8001ed0:	210a      	movs	r1, #10
 8001ed2:	4850      	ldr	r0, [pc, #320]	; (8002014 <FreqMenu_DrawFreqPresetMenu+0x938>)
 8001ed4:	f009 fada 	bl	800b48c <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 10Hz", 	10, menu_pos_y2, BLACK, 2, WHITE);
 8001ed8:	7bbb      	ldrb	r3, [r7, #14]
 8001eda:	b29a      	uxth	r2, r3
 8001edc:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001ee0:	9301      	str	r3, [sp, #4]
 8001ee2:	2302      	movs	r3, #2
 8001ee4:	9300      	str	r3, [sp, #0]
 8001ee6:	2300      	movs	r3, #0
 8001ee8:	210a      	movs	r1, #10
 8001eea:	484b      	ldr	r0, [pc, #300]	; (8002018 <FreqMenu_DrawFreqPresetMenu+0x93c>)
 8001eec:	f009 face 	bl	800b48c <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 50Hz", 	10, menu_pos_y3, BLACK, 2, WHITE);
 8001ef0:	7b7b      	ldrb	r3, [r7, #13]
 8001ef2:	b29a      	uxth	r2, r3
 8001ef4:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001ef8:	9301      	str	r3, [sp, #4]
 8001efa:	2302      	movs	r3, #2
 8001efc:	9300      	str	r3, [sp, #0]
 8001efe:	2300      	movs	r3, #0
 8001f00:	210a      	movs	r1, #10
 8001f02:	4846      	ldr	r0, [pc, #280]	; (800201c <FreqMenu_DrawFreqPresetMenu+0x940>)
 8001f04:	f009 fac2 	bl	800b48c <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 100Hz", 	10, menu_pos_y4, BLACK, 2, WHITE);
 8001f08:	7b3b      	ldrb	r3, [r7, #12]
 8001f0a:	b29a      	uxth	r2, r3
 8001f0c:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001f10:	9301      	str	r3, [sp, #4]
 8001f12:	2302      	movs	r3, #2
 8001f14:	9300      	str	r3, [sp, #0]
 8001f16:	2300      	movs	r3, #0
 8001f18:	210a      	movs	r1, #10
 8001f1a:	4841      	ldr	r0, [pc, #260]	; (8002020 <FreqMenu_DrawFreqPresetMenu+0x944>)
 8001f1c:	f009 fab6 	bl	800b48c <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 250Hz", 	10, menu_pos_y5, BLACK, 2, WHITE);
 8001f20:	7afb      	ldrb	r3, [r7, #11]
 8001f22:	b29a      	uxth	r2, r3
 8001f24:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001f28:	9301      	str	r3, [sp, #4]
 8001f2a:	2302      	movs	r3, #2
 8001f2c:	9300      	str	r3, [sp, #0]
 8001f2e:	2300      	movs	r3, #0
 8001f30:	210a      	movs	r1, #10
 8001f32:	483c      	ldr	r0, [pc, #240]	; (8002024 <FreqMenu_DrawFreqPresetMenu+0x948>)
 8001f34:	f009 faaa 	bl	800b48c <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 500Hz",	10, menu_pos_y6, WHITE, 2, BLACK);
 8001f38:	7abb      	ldrb	r3, [r7, #10]
 8001f3a:	b29a      	uxth	r2, r3
 8001f3c:	2300      	movs	r3, #0
 8001f3e:	9301      	str	r3, [sp, #4]
 8001f40:	2302      	movs	r3, #2
 8001f42:	9300      	str	r3, [sp, #0]
 8001f44:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001f48:	210a      	movs	r1, #10
 8001f4a:	4837      	ldr	r0, [pc, #220]	; (8002028 <FreqMenu_DrawFreqPresetMenu+0x94c>)
 8001f4c:	f009 fa9e 	bl	800b48c <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 750Hz", 	10, menu_pos_y7, BLACK, 2, WHITE);
 8001f50:	7a7b      	ldrb	r3, [r7, #9]
 8001f52:	b29a      	uxth	r2, r3
 8001f54:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001f58:	9301      	str	r3, [sp, #4]
 8001f5a:	2302      	movs	r3, #2
 8001f5c:	9300      	str	r3, [sp, #0]
 8001f5e:	2300      	movs	r3, #0
 8001f60:	210a      	movs	r1, #10
 8001f62:	4832      	ldr	r0, [pc, #200]	; (800202c <FreqMenu_DrawFreqPresetMenu+0x950>)
 8001f64:	f009 fa92 	bl	800b48c <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 1KHz", 	120, menu_pos_y1, BLACK, 2, WHITE);
 8001f68:	7bfb      	ldrb	r3, [r7, #15]
 8001f6a:	b29a      	uxth	r2, r3
 8001f6c:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001f70:	9301      	str	r3, [sp, #4]
 8001f72:	2302      	movs	r3, #2
 8001f74:	9300      	str	r3, [sp, #0]
 8001f76:	2300      	movs	r3, #0
 8001f78:	2178      	movs	r1, #120	; 0x78
 8001f7a:	482d      	ldr	r0, [pc, #180]	; (8002030 <FreqMenu_DrawFreqPresetMenu+0x954>)
 8001f7c:	f009 fa86 	bl	800b48c <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 5KHz", 	120, menu_pos_y2, BLACK, 2, WHITE);
 8001f80:	7bbb      	ldrb	r3, [r7, #14]
 8001f82:	b29a      	uxth	r2, r3
 8001f84:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001f88:	9301      	str	r3, [sp, #4]
 8001f8a:	2302      	movs	r3, #2
 8001f8c:	9300      	str	r3, [sp, #0]
 8001f8e:	2300      	movs	r3, #0
 8001f90:	2178      	movs	r1, #120	; 0x78
 8001f92:	4828      	ldr	r0, [pc, #160]	; (8002034 <FreqMenu_DrawFreqPresetMenu+0x958>)
 8001f94:	f009 fa7a 	bl	800b48c <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 10KHz", 	120, menu_pos_y3, BLACK, 2, WHITE);
 8001f98:	7b7b      	ldrb	r3, [r7, #13]
 8001f9a:	b29a      	uxth	r2, r3
 8001f9c:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001fa0:	9301      	str	r3, [sp, #4]
 8001fa2:	2302      	movs	r3, #2
 8001fa4:	9300      	str	r3, [sp, #0]
 8001fa6:	2300      	movs	r3, #0
 8001fa8:	2178      	movs	r1, #120	; 0x78
 8001faa:	4823      	ldr	r0, [pc, #140]	; (8002038 <FreqMenu_DrawFreqPresetMenu+0x95c>)
 8001fac:	f009 fa6e 	bl	800b48c <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 25KHz", 	120, menu_pos_y4, BLACK, 2, WHITE);
 8001fb0:	7b3b      	ldrb	r3, [r7, #12]
 8001fb2:	b29a      	uxth	r2, r3
 8001fb4:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001fb8:	9301      	str	r3, [sp, #4]
 8001fba:	2302      	movs	r3, #2
 8001fbc:	9300      	str	r3, [sp, #0]
 8001fbe:	2300      	movs	r3, #0
 8001fc0:	2178      	movs	r1, #120	; 0x78
 8001fc2:	481e      	ldr	r0, [pc, #120]	; (800203c <FreqMenu_DrawFreqPresetMenu+0x960>)
 8001fc4:	f009 fa62 	bl	800b48c <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 50KHz", 	120, menu_pos_y5, BLACK, 2, WHITE);
 8001fc8:	7afb      	ldrb	r3, [r7, #11]
 8001fca:	b29a      	uxth	r2, r3
 8001fcc:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001fd0:	9301      	str	r3, [sp, #4]
 8001fd2:	2302      	movs	r3, #2
 8001fd4:	9300      	str	r3, [sp, #0]
 8001fd6:	2300      	movs	r3, #0
 8001fd8:	2178      	movs	r1, #120	; 0x78
 8001fda:	4819      	ldr	r0, [pc, #100]	; (8002040 <FreqMenu_DrawFreqPresetMenu+0x964>)
 8001fdc:	f009 fa56 	bl	800b48c <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 75KHz",	120, menu_pos_y6, BLACK, 2, WHITE);
 8001fe0:	7abb      	ldrb	r3, [r7, #10]
 8001fe2:	b29a      	uxth	r2, r3
 8001fe4:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001fe8:	9301      	str	r3, [sp, #4]
 8001fea:	2302      	movs	r3, #2
 8001fec:	9300      	str	r3, [sp, #0]
 8001fee:	2300      	movs	r3, #0
 8001ff0:	2178      	movs	r1, #120	; 0x78
 8001ff2:	4814      	ldr	r0, [pc, #80]	; (8002044 <FreqMenu_DrawFreqPresetMenu+0x968>)
 8001ff4:	f009 fa4a 	bl	800b48c <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 100KHz", 	120, menu_pos_y7, BLACK, 2, WHITE);
 8001ff8:	7a7b      	ldrb	r3, [r7, #9]
 8001ffa:	b29a      	uxth	r2, r3
 8001ffc:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8002000:	9301      	str	r3, [sp, #4]
 8002002:	2302      	movs	r3, #2
 8002004:	9300      	str	r3, [sp, #0]
 8002006:	2300      	movs	r3, #0
 8002008:	2178      	movs	r1, #120	; 0x78
 800200a:	480f      	ldr	r0, [pc, #60]	; (8002048 <FreqMenu_DrawFreqPresetMenu+0x96c>)
 800200c:	f009 fa3e 	bl	800b48c <ILI9341_Draw_Text>
				break;
 8002010:	f000 bdc7 	b.w	8002ba2 <FreqMenu_DrawFreqPresetMenu+0x14c6>
 8002014:	0800eb04 	.word	0x0800eb04
 8002018:	0800eb0c 	.word	0x0800eb0c
 800201c:	0800eb14 	.word	0x0800eb14
 8002020:	0800eb1c 	.word	0x0800eb1c
 8002024:	0800eb24 	.word	0x0800eb24
 8002028:	0800eb2c 	.word	0x0800eb2c
 800202c:	0800eb34 	.word	0x0800eb34
 8002030:	0800eb3c 	.word	0x0800eb3c
 8002034:	0800eb44 	.word	0x0800eb44
 8002038:	0800eb4c 	.word	0x0800eb4c
 800203c:	0800eb54 	.word	0x0800eb54
 8002040:	0800eb5c 	.word	0x0800eb5c
 8002044:	0800eb64 	.word	0x0800eb64
 8002048:	0800eb6c 	.word	0x0800eb6c
				ILI9341_Draw_Text("- 1Hz", 		10, menu_pos_y1, BLACK, 2, WHITE);
 800204c:	7bfb      	ldrb	r3, [r7, #15]
 800204e:	b29a      	uxth	r2, r3
 8002050:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8002054:	9301      	str	r3, [sp, #4]
 8002056:	2302      	movs	r3, #2
 8002058:	9300      	str	r3, [sp, #0]
 800205a:	2300      	movs	r3, #0
 800205c:	210a      	movs	r1, #10
 800205e:	48a5      	ldr	r0, [pc, #660]	; (80022f4 <FreqMenu_DrawFreqPresetMenu+0xc18>)
 8002060:	f009 fa14 	bl	800b48c <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 10Hz", 	10, menu_pos_y2, BLACK, 2, WHITE);
 8002064:	7bbb      	ldrb	r3, [r7, #14]
 8002066:	b29a      	uxth	r2, r3
 8002068:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800206c:	9301      	str	r3, [sp, #4]
 800206e:	2302      	movs	r3, #2
 8002070:	9300      	str	r3, [sp, #0]
 8002072:	2300      	movs	r3, #0
 8002074:	210a      	movs	r1, #10
 8002076:	48a0      	ldr	r0, [pc, #640]	; (80022f8 <FreqMenu_DrawFreqPresetMenu+0xc1c>)
 8002078:	f009 fa08 	bl	800b48c <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 50Hz", 	10, menu_pos_y3, BLACK, 2, WHITE);
 800207c:	7b7b      	ldrb	r3, [r7, #13]
 800207e:	b29a      	uxth	r2, r3
 8002080:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8002084:	9301      	str	r3, [sp, #4]
 8002086:	2302      	movs	r3, #2
 8002088:	9300      	str	r3, [sp, #0]
 800208a:	2300      	movs	r3, #0
 800208c:	210a      	movs	r1, #10
 800208e:	489b      	ldr	r0, [pc, #620]	; (80022fc <FreqMenu_DrawFreqPresetMenu+0xc20>)
 8002090:	f009 f9fc 	bl	800b48c <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 100Hz", 	10, menu_pos_y4, BLACK, 2, WHITE);
 8002094:	7b3b      	ldrb	r3, [r7, #12]
 8002096:	b29a      	uxth	r2, r3
 8002098:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800209c:	9301      	str	r3, [sp, #4]
 800209e:	2302      	movs	r3, #2
 80020a0:	9300      	str	r3, [sp, #0]
 80020a2:	2300      	movs	r3, #0
 80020a4:	210a      	movs	r1, #10
 80020a6:	4896      	ldr	r0, [pc, #600]	; (8002300 <FreqMenu_DrawFreqPresetMenu+0xc24>)
 80020a8:	f009 f9f0 	bl	800b48c <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 250Hz", 	10, menu_pos_y5, BLACK, 2, WHITE);
 80020ac:	7afb      	ldrb	r3, [r7, #11]
 80020ae:	b29a      	uxth	r2, r3
 80020b0:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80020b4:	9301      	str	r3, [sp, #4]
 80020b6:	2302      	movs	r3, #2
 80020b8:	9300      	str	r3, [sp, #0]
 80020ba:	2300      	movs	r3, #0
 80020bc:	210a      	movs	r1, #10
 80020be:	4891      	ldr	r0, [pc, #580]	; (8002304 <FreqMenu_DrawFreqPresetMenu+0xc28>)
 80020c0:	f009 f9e4 	bl	800b48c <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 500Hz",	10, menu_pos_y6, BLACK, 2, WHITE);
 80020c4:	7abb      	ldrb	r3, [r7, #10]
 80020c6:	b29a      	uxth	r2, r3
 80020c8:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80020cc:	9301      	str	r3, [sp, #4]
 80020ce:	2302      	movs	r3, #2
 80020d0:	9300      	str	r3, [sp, #0]
 80020d2:	2300      	movs	r3, #0
 80020d4:	210a      	movs	r1, #10
 80020d6:	488c      	ldr	r0, [pc, #560]	; (8002308 <FreqMenu_DrawFreqPresetMenu+0xc2c>)
 80020d8:	f009 f9d8 	bl	800b48c <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 750Hz", 	10, menu_pos_y7, WHITE, 2, BLACK);
 80020dc:	7a7b      	ldrb	r3, [r7, #9]
 80020de:	b29a      	uxth	r2, r3
 80020e0:	2300      	movs	r3, #0
 80020e2:	9301      	str	r3, [sp, #4]
 80020e4:	2302      	movs	r3, #2
 80020e6:	9300      	str	r3, [sp, #0]
 80020e8:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80020ec:	210a      	movs	r1, #10
 80020ee:	4887      	ldr	r0, [pc, #540]	; (800230c <FreqMenu_DrawFreqPresetMenu+0xc30>)
 80020f0:	f009 f9cc 	bl	800b48c <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 1KHz", 	120, menu_pos_y1, BLACK, 2, WHITE);
 80020f4:	7bfb      	ldrb	r3, [r7, #15]
 80020f6:	b29a      	uxth	r2, r3
 80020f8:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80020fc:	9301      	str	r3, [sp, #4]
 80020fe:	2302      	movs	r3, #2
 8002100:	9300      	str	r3, [sp, #0]
 8002102:	2300      	movs	r3, #0
 8002104:	2178      	movs	r1, #120	; 0x78
 8002106:	4882      	ldr	r0, [pc, #520]	; (8002310 <FreqMenu_DrawFreqPresetMenu+0xc34>)
 8002108:	f009 f9c0 	bl	800b48c <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 5KHz", 	120, menu_pos_y2, BLACK, 2, WHITE);
 800210c:	7bbb      	ldrb	r3, [r7, #14]
 800210e:	b29a      	uxth	r2, r3
 8002110:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8002114:	9301      	str	r3, [sp, #4]
 8002116:	2302      	movs	r3, #2
 8002118:	9300      	str	r3, [sp, #0]
 800211a:	2300      	movs	r3, #0
 800211c:	2178      	movs	r1, #120	; 0x78
 800211e:	487d      	ldr	r0, [pc, #500]	; (8002314 <FreqMenu_DrawFreqPresetMenu+0xc38>)
 8002120:	f009 f9b4 	bl	800b48c <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 10KHz", 	120, menu_pos_y3, BLACK, 2, WHITE);
 8002124:	7b7b      	ldrb	r3, [r7, #13]
 8002126:	b29a      	uxth	r2, r3
 8002128:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800212c:	9301      	str	r3, [sp, #4]
 800212e:	2302      	movs	r3, #2
 8002130:	9300      	str	r3, [sp, #0]
 8002132:	2300      	movs	r3, #0
 8002134:	2178      	movs	r1, #120	; 0x78
 8002136:	4878      	ldr	r0, [pc, #480]	; (8002318 <FreqMenu_DrawFreqPresetMenu+0xc3c>)
 8002138:	f009 f9a8 	bl	800b48c <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 25KHz", 	120, menu_pos_y4, BLACK, 2, WHITE);
 800213c:	7b3b      	ldrb	r3, [r7, #12]
 800213e:	b29a      	uxth	r2, r3
 8002140:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8002144:	9301      	str	r3, [sp, #4]
 8002146:	2302      	movs	r3, #2
 8002148:	9300      	str	r3, [sp, #0]
 800214a:	2300      	movs	r3, #0
 800214c:	2178      	movs	r1, #120	; 0x78
 800214e:	4873      	ldr	r0, [pc, #460]	; (800231c <FreqMenu_DrawFreqPresetMenu+0xc40>)
 8002150:	f009 f99c 	bl	800b48c <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 50KHz", 	120, menu_pos_y5, BLACK, 2, WHITE);
 8002154:	7afb      	ldrb	r3, [r7, #11]
 8002156:	b29a      	uxth	r2, r3
 8002158:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800215c:	9301      	str	r3, [sp, #4]
 800215e:	2302      	movs	r3, #2
 8002160:	9300      	str	r3, [sp, #0]
 8002162:	2300      	movs	r3, #0
 8002164:	2178      	movs	r1, #120	; 0x78
 8002166:	486e      	ldr	r0, [pc, #440]	; (8002320 <FreqMenu_DrawFreqPresetMenu+0xc44>)
 8002168:	f009 f990 	bl	800b48c <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 75KHz",	120, menu_pos_y6, BLACK, 2, WHITE);
 800216c:	7abb      	ldrb	r3, [r7, #10]
 800216e:	b29a      	uxth	r2, r3
 8002170:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8002174:	9301      	str	r3, [sp, #4]
 8002176:	2302      	movs	r3, #2
 8002178:	9300      	str	r3, [sp, #0]
 800217a:	2300      	movs	r3, #0
 800217c:	2178      	movs	r1, #120	; 0x78
 800217e:	4869      	ldr	r0, [pc, #420]	; (8002324 <FreqMenu_DrawFreqPresetMenu+0xc48>)
 8002180:	f009 f984 	bl	800b48c <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 100KHz", 	120, menu_pos_y7, BLACK, 2, WHITE);
 8002184:	7a7b      	ldrb	r3, [r7, #9]
 8002186:	b29a      	uxth	r2, r3
 8002188:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800218c:	9301      	str	r3, [sp, #4]
 800218e:	2302      	movs	r3, #2
 8002190:	9300      	str	r3, [sp, #0]
 8002192:	2300      	movs	r3, #0
 8002194:	2178      	movs	r1, #120	; 0x78
 8002196:	4864      	ldr	r0, [pc, #400]	; (8002328 <FreqMenu_DrawFreqPresetMenu+0xc4c>)
 8002198:	f009 f978 	bl	800b48c <ILI9341_Draw_Text>
				break;
 800219c:	f000 bd01 	b.w	8002ba2 <FreqMenu_DrawFreqPresetMenu+0x14c6>
				ILI9341_Draw_Text("- 1Hz", 		10, menu_pos_y1, BLACK, 2, WHITE);
 80021a0:	7bfb      	ldrb	r3, [r7, #15]
 80021a2:	b29a      	uxth	r2, r3
 80021a4:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80021a8:	9301      	str	r3, [sp, #4]
 80021aa:	2302      	movs	r3, #2
 80021ac:	9300      	str	r3, [sp, #0]
 80021ae:	2300      	movs	r3, #0
 80021b0:	210a      	movs	r1, #10
 80021b2:	4850      	ldr	r0, [pc, #320]	; (80022f4 <FreqMenu_DrawFreqPresetMenu+0xc18>)
 80021b4:	f009 f96a 	bl	800b48c <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 10Hz", 	10, menu_pos_y2, BLACK, 2, WHITE);
 80021b8:	7bbb      	ldrb	r3, [r7, #14]
 80021ba:	b29a      	uxth	r2, r3
 80021bc:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80021c0:	9301      	str	r3, [sp, #4]
 80021c2:	2302      	movs	r3, #2
 80021c4:	9300      	str	r3, [sp, #0]
 80021c6:	2300      	movs	r3, #0
 80021c8:	210a      	movs	r1, #10
 80021ca:	484b      	ldr	r0, [pc, #300]	; (80022f8 <FreqMenu_DrawFreqPresetMenu+0xc1c>)
 80021cc:	f009 f95e 	bl	800b48c <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 50Hz", 	10, menu_pos_y3, BLACK, 2, WHITE);
 80021d0:	7b7b      	ldrb	r3, [r7, #13]
 80021d2:	b29a      	uxth	r2, r3
 80021d4:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80021d8:	9301      	str	r3, [sp, #4]
 80021da:	2302      	movs	r3, #2
 80021dc:	9300      	str	r3, [sp, #0]
 80021de:	2300      	movs	r3, #0
 80021e0:	210a      	movs	r1, #10
 80021e2:	4846      	ldr	r0, [pc, #280]	; (80022fc <FreqMenu_DrawFreqPresetMenu+0xc20>)
 80021e4:	f009 f952 	bl	800b48c <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 100Hz", 	10, menu_pos_y4, BLACK, 2, WHITE);
 80021e8:	7b3b      	ldrb	r3, [r7, #12]
 80021ea:	b29a      	uxth	r2, r3
 80021ec:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80021f0:	9301      	str	r3, [sp, #4]
 80021f2:	2302      	movs	r3, #2
 80021f4:	9300      	str	r3, [sp, #0]
 80021f6:	2300      	movs	r3, #0
 80021f8:	210a      	movs	r1, #10
 80021fa:	4841      	ldr	r0, [pc, #260]	; (8002300 <FreqMenu_DrawFreqPresetMenu+0xc24>)
 80021fc:	f009 f946 	bl	800b48c <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 250Hz", 	10, menu_pos_y5, BLACK, 2, WHITE);
 8002200:	7afb      	ldrb	r3, [r7, #11]
 8002202:	b29a      	uxth	r2, r3
 8002204:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8002208:	9301      	str	r3, [sp, #4]
 800220a:	2302      	movs	r3, #2
 800220c:	9300      	str	r3, [sp, #0]
 800220e:	2300      	movs	r3, #0
 8002210:	210a      	movs	r1, #10
 8002212:	483c      	ldr	r0, [pc, #240]	; (8002304 <FreqMenu_DrawFreqPresetMenu+0xc28>)
 8002214:	f009 f93a 	bl	800b48c <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 500Hz",	10, menu_pos_y6, BLACK, 2, WHITE);
 8002218:	7abb      	ldrb	r3, [r7, #10]
 800221a:	b29a      	uxth	r2, r3
 800221c:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8002220:	9301      	str	r3, [sp, #4]
 8002222:	2302      	movs	r3, #2
 8002224:	9300      	str	r3, [sp, #0]
 8002226:	2300      	movs	r3, #0
 8002228:	210a      	movs	r1, #10
 800222a:	4837      	ldr	r0, [pc, #220]	; (8002308 <FreqMenu_DrawFreqPresetMenu+0xc2c>)
 800222c:	f009 f92e 	bl	800b48c <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 750Hz", 	10, menu_pos_y7, BLACK, 2, WHITE);
 8002230:	7a7b      	ldrb	r3, [r7, #9]
 8002232:	b29a      	uxth	r2, r3
 8002234:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8002238:	9301      	str	r3, [sp, #4]
 800223a:	2302      	movs	r3, #2
 800223c:	9300      	str	r3, [sp, #0]
 800223e:	2300      	movs	r3, #0
 8002240:	210a      	movs	r1, #10
 8002242:	4832      	ldr	r0, [pc, #200]	; (800230c <FreqMenu_DrawFreqPresetMenu+0xc30>)
 8002244:	f009 f922 	bl	800b48c <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 1KHz", 	120, menu_pos_y1, WHITE, 2, BLACK);
 8002248:	7bfb      	ldrb	r3, [r7, #15]
 800224a:	b29a      	uxth	r2, r3
 800224c:	2300      	movs	r3, #0
 800224e:	9301      	str	r3, [sp, #4]
 8002250:	2302      	movs	r3, #2
 8002252:	9300      	str	r3, [sp, #0]
 8002254:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8002258:	2178      	movs	r1, #120	; 0x78
 800225a:	482d      	ldr	r0, [pc, #180]	; (8002310 <FreqMenu_DrawFreqPresetMenu+0xc34>)
 800225c:	f009 f916 	bl	800b48c <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 5KHz", 	120, menu_pos_y2, BLACK, 2, WHITE);
 8002260:	7bbb      	ldrb	r3, [r7, #14]
 8002262:	b29a      	uxth	r2, r3
 8002264:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8002268:	9301      	str	r3, [sp, #4]
 800226a:	2302      	movs	r3, #2
 800226c:	9300      	str	r3, [sp, #0]
 800226e:	2300      	movs	r3, #0
 8002270:	2178      	movs	r1, #120	; 0x78
 8002272:	4828      	ldr	r0, [pc, #160]	; (8002314 <FreqMenu_DrawFreqPresetMenu+0xc38>)
 8002274:	f009 f90a 	bl	800b48c <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 10KHz", 	120, menu_pos_y3, BLACK, 2, WHITE);
 8002278:	7b7b      	ldrb	r3, [r7, #13]
 800227a:	b29a      	uxth	r2, r3
 800227c:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8002280:	9301      	str	r3, [sp, #4]
 8002282:	2302      	movs	r3, #2
 8002284:	9300      	str	r3, [sp, #0]
 8002286:	2300      	movs	r3, #0
 8002288:	2178      	movs	r1, #120	; 0x78
 800228a:	4823      	ldr	r0, [pc, #140]	; (8002318 <FreqMenu_DrawFreqPresetMenu+0xc3c>)
 800228c:	f009 f8fe 	bl	800b48c <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 25KHz", 	120, menu_pos_y4, BLACK, 2, WHITE);
 8002290:	7b3b      	ldrb	r3, [r7, #12]
 8002292:	b29a      	uxth	r2, r3
 8002294:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8002298:	9301      	str	r3, [sp, #4]
 800229a:	2302      	movs	r3, #2
 800229c:	9300      	str	r3, [sp, #0]
 800229e:	2300      	movs	r3, #0
 80022a0:	2178      	movs	r1, #120	; 0x78
 80022a2:	481e      	ldr	r0, [pc, #120]	; (800231c <FreqMenu_DrawFreqPresetMenu+0xc40>)
 80022a4:	f009 f8f2 	bl	800b48c <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 50KHz", 	120, menu_pos_y5, BLACK, 2, WHITE);
 80022a8:	7afb      	ldrb	r3, [r7, #11]
 80022aa:	b29a      	uxth	r2, r3
 80022ac:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80022b0:	9301      	str	r3, [sp, #4]
 80022b2:	2302      	movs	r3, #2
 80022b4:	9300      	str	r3, [sp, #0]
 80022b6:	2300      	movs	r3, #0
 80022b8:	2178      	movs	r1, #120	; 0x78
 80022ba:	4819      	ldr	r0, [pc, #100]	; (8002320 <FreqMenu_DrawFreqPresetMenu+0xc44>)
 80022bc:	f009 f8e6 	bl	800b48c <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 75KHz",	120, menu_pos_y6, BLACK, 2, WHITE);
 80022c0:	7abb      	ldrb	r3, [r7, #10]
 80022c2:	b29a      	uxth	r2, r3
 80022c4:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80022c8:	9301      	str	r3, [sp, #4]
 80022ca:	2302      	movs	r3, #2
 80022cc:	9300      	str	r3, [sp, #0]
 80022ce:	2300      	movs	r3, #0
 80022d0:	2178      	movs	r1, #120	; 0x78
 80022d2:	4814      	ldr	r0, [pc, #80]	; (8002324 <FreqMenu_DrawFreqPresetMenu+0xc48>)
 80022d4:	f009 f8da 	bl	800b48c <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 100KHz", 	120, menu_pos_y7, BLACK, 2, WHITE);
 80022d8:	7a7b      	ldrb	r3, [r7, #9]
 80022da:	b29a      	uxth	r2, r3
 80022dc:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80022e0:	9301      	str	r3, [sp, #4]
 80022e2:	2302      	movs	r3, #2
 80022e4:	9300      	str	r3, [sp, #0]
 80022e6:	2300      	movs	r3, #0
 80022e8:	2178      	movs	r1, #120	; 0x78
 80022ea:	480f      	ldr	r0, [pc, #60]	; (8002328 <FreqMenu_DrawFreqPresetMenu+0xc4c>)
 80022ec:	f009 f8ce 	bl	800b48c <ILI9341_Draw_Text>
				break;
 80022f0:	f000 bc57 	b.w	8002ba2 <FreqMenu_DrawFreqPresetMenu+0x14c6>
 80022f4:	0800eb04 	.word	0x0800eb04
 80022f8:	0800eb0c 	.word	0x0800eb0c
 80022fc:	0800eb14 	.word	0x0800eb14
 8002300:	0800eb1c 	.word	0x0800eb1c
 8002304:	0800eb24 	.word	0x0800eb24
 8002308:	0800eb2c 	.word	0x0800eb2c
 800230c:	0800eb34 	.word	0x0800eb34
 8002310:	0800eb3c 	.word	0x0800eb3c
 8002314:	0800eb44 	.word	0x0800eb44
 8002318:	0800eb4c 	.word	0x0800eb4c
 800231c:	0800eb54 	.word	0x0800eb54
 8002320:	0800eb5c 	.word	0x0800eb5c
 8002324:	0800eb64 	.word	0x0800eb64
 8002328:	0800eb6c 	.word	0x0800eb6c
				ILI9341_Draw_Text("- 1Hz", 		10, menu_pos_y1, BLACK, 2, WHITE);
 800232c:	7bfb      	ldrb	r3, [r7, #15]
 800232e:	b29a      	uxth	r2, r3
 8002330:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8002334:	9301      	str	r3, [sp, #4]
 8002336:	2302      	movs	r3, #2
 8002338:	9300      	str	r3, [sp, #0]
 800233a:	2300      	movs	r3, #0
 800233c:	210a      	movs	r1, #10
 800233e:	48a4      	ldr	r0, [pc, #656]	; (80025d0 <FreqMenu_DrawFreqPresetMenu+0xef4>)
 8002340:	f009 f8a4 	bl	800b48c <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 10Hz", 	10, menu_pos_y2, BLACK, 2, WHITE);
 8002344:	7bbb      	ldrb	r3, [r7, #14]
 8002346:	b29a      	uxth	r2, r3
 8002348:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800234c:	9301      	str	r3, [sp, #4]
 800234e:	2302      	movs	r3, #2
 8002350:	9300      	str	r3, [sp, #0]
 8002352:	2300      	movs	r3, #0
 8002354:	210a      	movs	r1, #10
 8002356:	489f      	ldr	r0, [pc, #636]	; (80025d4 <FreqMenu_DrawFreqPresetMenu+0xef8>)
 8002358:	f009 f898 	bl	800b48c <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 50Hz", 	10, menu_pos_y3, BLACK, 2, WHITE);
 800235c:	7b7b      	ldrb	r3, [r7, #13]
 800235e:	b29a      	uxth	r2, r3
 8002360:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8002364:	9301      	str	r3, [sp, #4]
 8002366:	2302      	movs	r3, #2
 8002368:	9300      	str	r3, [sp, #0]
 800236a:	2300      	movs	r3, #0
 800236c:	210a      	movs	r1, #10
 800236e:	489a      	ldr	r0, [pc, #616]	; (80025d8 <FreqMenu_DrawFreqPresetMenu+0xefc>)
 8002370:	f009 f88c 	bl	800b48c <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 100Hz", 	10, menu_pos_y4, BLACK, 2, WHITE);
 8002374:	7b3b      	ldrb	r3, [r7, #12]
 8002376:	b29a      	uxth	r2, r3
 8002378:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800237c:	9301      	str	r3, [sp, #4]
 800237e:	2302      	movs	r3, #2
 8002380:	9300      	str	r3, [sp, #0]
 8002382:	2300      	movs	r3, #0
 8002384:	210a      	movs	r1, #10
 8002386:	4895      	ldr	r0, [pc, #596]	; (80025dc <FreqMenu_DrawFreqPresetMenu+0xf00>)
 8002388:	f009 f880 	bl	800b48c <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 250Hz", 	10, menu_pos_y5, BLACK, 2, WHITE);
 800238c:	7afb      	ldrb	r3, [r7, #11]
 800238e:	b29a      	uxth	r2, r3
 8002390:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8002394:	9301      	str	r3, [sp, #4]
 8002396:	2302      	movs	r3, #2
 8002398:	9300      	str	r3, [sp, #0]
 800239a:	2300      	movs	r3, #0
 800239c:	210a      	movs	r1, #10
 800239e:	4890      	ldr	r0, [pc, #576]	; (80025e0 <FreqMenu_DrawFreqPresetMenu+0xf04>)
 80023a0:	f009 f874 	bl	800b48c <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 500Hz",	10, menu_pos_y6, BLACK, 2, WHITE);
 80023a4:	7abb      	ldrb	r3, [r7, #10]
 80023a6:	b29a      	uxth	r2, r3
 80023a8:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80023ac:	9301      	str	r3, [sp, #4]
 80023ae:	2302      	movs	r3, #2
 80023b0:	9300      	str	r3, [sp, #0]
 80023b2:	2300      	movs	r3, #0
 80023b4:	210a      	movs	r1, #10
 80023b6:	488b      	ldr	r0, [pc, #556]	; (80025e4 <FreqMenu_DrawFreqPresetMenu+0xf08>)
 80023b8:	f009 f868 	bl	800b48c <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 750Hz", 	10, menu_pos_y7, BLACK, 2, WHITE);
 80023bc:	7a7b      	ldrb	r3, [r7, #9]
 80023be:	b29a      	uxth	r2, r3
 80023c0:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80023c4:	9301      	str	r3, [sp, #4]
 80023c6:	2302      	movs	r3, #2
 80023c8:	9300      	str	r3, [sp, #0]
 80023ca:	2300      	movs	r3, #0
 80023cc:	210a      	movs	r1, #10
 80023ce:	4886      	ldr	r0, [pc, #536]	; (80025e8 <FreqMenu_DrawFreqPresetMenu+0xf0c>)
 80023d0:	f009 f85c 	bl	800b48c <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 1KHz", 	120, menu_pos_y1, BLACK, 2, WHITE);
 80023d4:	7bfb      	ldrb	r3, [r7, #15]
 80023d6:	b29a      	uxth	r2, r3
 80023d8:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80023dc:	9301      	str	r3, [sp, #4]
 80023de:	2302      	movs	r3, #2
 80023e0:	9300      	str	r3, [sp, #0]
 80023e2:	2300      	movs	r3, #0
 80023e4:	2178      	movs	r1, #120	; 0x78
 80023e6:	4881      	ldr	r0, [pc, #516]	; (80025ec <FreqMenu_DrawFreqPresetMenu+0xf10>)
 80023e8:	f009 f850 	bl	800b48c <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 5KHz", 	120, menu_pos_y2, WHITE, 2, BLACK);
 80023ec:	7bbb      	ldrb	r3, [r7, #14]
 80023ee:	b29a      	uxth	r2, r3
 80023f0:	2300      	movs	r3, #0
 80023f2:	9301      	str	r3, [sp, #4]
 80023f4:	2302      	movs	r3, #2
 80023f6:	9300      	str	r3, [sp, #0]
 80023f8:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80023fc:	2178      	movs	r1, #120	; 0x78
 80023fe:	487c      	ldr	r0, [pc, #496]	; (80025f0 <FreqMenu_DrawFreqPresetMenu+0xf14>)
 8002400:	f009 f844 	bl	800b48c <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 10KHz", 	120, menu_pos_y3, BLACK, 2, WHITE);
 8002404:	7b7b      	ldrb	r3, [r7, #13]
 8002406:	b29a      	uxth	r2, r3
 8002408:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800240c:	9301      	str	r3, [sp, #4]
 800240e:	2302      	movs	r3, #2
 8002410:	9300      	str	r3, [sp, #0]
 8002412:	2300      	movs	r3, #0
 8002414:	2178      	movs	r1, #120	; 0x78
 8002416:	4877      	ldr	r0, [pc, #476]	; (80025f4 <FreqMenu_DrawFreqPresetMenu+0xf18>)
 8002418:	f009 f838 	bl	800b48c <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 25KHz", 	120, menu_pos_y4, BLACK, 2, WHITE);
 800241c:	7b3b      	ldrb	r3, [r7, #12]
 800241e:	b29a      	uxth	r2, r3
 8002420:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8002424:	9301      	str	r3, [sp, #4]
 8002426:	2302      	movs	r3, #2
 8002428:	9300      	str	r3, [sp, #0]
 800242a:	2300      	movs	r3, #0
 800242c:	2178      	movs	r1, #120	; 0x78
 800242e:	4872      	ldr	r0, [pc, #456]	; (80025f8 <FreqMenu_DrawFreqPresetMenu+0xf1c>)
 8002430:	f009 f82c 	bl	800b48c <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 50KHz", 	120, menu_pos_y5, BLACK, 2, WHITE);
 8002434:	7afb      	ldrb	r3, [r7, #11]
 8002436:	b29a      	uxth	r2, r3
 8002438:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800243c:	9301      	str	r3, [sp, #4]
 800243e:	2302      	movs	r3, #2
 8002440:	9300      	str	r3, [sp, #0]
 8002442:	2300      	movs	r3, #0
 8002444:	2178      	movs	r1, #120	; 0x78
 8002446:	486d      	ldr	r0, [pc, #436]	; (80025fc <FreqMenu_DrawFreqPresetMenu+0xf20>)
 8002448:	f009 f820 	bl	800b48c <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 75KHz",	120, menu_pos_y6, BLACK, 2, WHITE);
 800244c:	7abb      	ldrb	r3, [r7, #10]
 800244e:	b29a      	uxth	r2, r3
 8002450:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8002454:	9301      	str	r3, [sp, #4]
 8002456:	2302      	movs	r3, #2
 8002458:	9300      	str	r3, [sp, #0]
 800245a:	2300      	movs	r3, #0
 800245c:	2178      	movs	r1, #120	; 0x78
 800245e:	4868      	ldr	r0, [pc, #416]	; (8002600 <FreqMenu_DrawFreqPresetMenu+0xf24>)
 8002460:	f009 f814 	bl	800b48c <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 100KHz", 	120, menu_pos_y7, BLACK, 2, WHITE);
 8002464:	7a7b      	ldrb	r3, [r7, #9]
 8002466:	b29a      	uxth	r2, r3
 8002468:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800246c:	9301      	str	r3, [sp, #4]
 800246e:	2302      	movs	r3, #2
 8002470:	9300      	str	r3, [sp, #0]
 8002472:	2300      	movs	r3, #0
 8002474:	2178      	movs	r1, #120	; 0x78
 8002476:	4863      	ldr	r0, [pc, #396]	; (8002604 <FreqMenu_DrawFreqPresetMenu+0xf28>)
 8002478:	f009 f808 	bl	800b48c <ILI9341_Draw_Text>
				break;
 800247c:	e391      	b.n	8002ba2 <FreqMenu_DrawFreqPresetMenu+0x14c6>
				ILI9341_Draw_Text("- 1Hz", 		10, menu_pos_y1, BLACK, 2, WHITE);
 800247e:	7bfb      	ldrb	r3, [r7, #15]
 8002480:	b29a      	uxth	r2, r3
 8002482:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8002486:	9301      	str	r3, [sp, #4]
 8002488:	2302      	movs	r3, #2
 800248a:	9300      	str	r3, [sp, #0]
 800248c:	2300      	movs	r3, #0
 800248e:	210a      	movs	r1, #10
 8002490:	484f      	ldr	r0, [pc, #316]	; (80025d0 <FreqMenu_DrawFreqPresetMenu+0xef4>)
 8002492:	f008 fffb 	bl	800b48c <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 10Hz", 	10, menu_pos_y2, BLACK, 2, WHITE);
 8002496:	7bbb      	ldrb	r3, [r7, #14]
 8002498:	b29a      	uxth	r2, r3
 800249a:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800249e:	9301      	str	r3, [sp, #4]
 80024a0:	2302      	movs	r3, #2
 80024a2:	9300      	str	r3, [sp, #0]
 80024a4:	2300      	movs	r3, #0
 80024a6:	210a      	movs	r1, #10
 80024a8:	484a      	ldr	r0, [pc, #296]	; (80025d4 <FreqMenu_DrawFreqPresetMenu+0xef8>)
 80024aa:	f008 ffef 	bl	800b48c <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 50Hz", 	10, menu_pos_y3, BLACK, 2, WHITE);
 80024ae:	7b7b      	ldrb	r3, [r7, #13]
 80024b0:	b29a      	uxth	r2, r3
 80024b2:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80024b6:	9301      	str	r3, [sp, #4]
 80024b8:	2302      	movs	r3, #2
 80024ba:	9300      	str	r3, [sp, #0]
 80024bc:	2300      	movs	r3, #0
 80024be:	210a      	movs	r1, #10
 80024c0:	4845      	ldr	r0, [pc, #276]	; (80025d8 <FreqMenu_DrawFreqPresetMenu+0xefc>)
 80024c2:	f008 ffe3 	bl	800b48c <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 100Hz", 	10, menu_pos_y4, BLACK, 2, WHITE);
 80024c6:	7b3b      	ldrb	r3, [r7, #12]
 80024c8:	b29a      	uxth	r2, r3
 80024ca:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80024ce:	9301      	str	r3, [sp, #4]
 80024d0:	2302      	movs	r3, #2
 80024d2:	9300      	str	r3, [sp, #0]
 80024d4:	2300      	movs	r3, #0
 80024d6:	210a      	movs	r1, #10
 80024d8:	4840      	ldr	r0, [pc, #256]	; (80025dc <FreqMenu_DrawFreqPresetMenu+0xf00>)
 80024da:	f008 ffd7 	bl	800b48c <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 250Hz", 	10, menu_pos_y5, BLACK, 2, WHITE);
 80024de:	7afb      	ldrb	r3, [r7, #11]
 80024e0:	b29a      	uxth	r2, r3
 80024e2:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80024e6:	9301      	str	r3, [sp, #4]
 80024e8:	2302      	movs	r3, #2
 80024ea:	9300      	str	r3, [sp, #0]
 80024ec:	2300      	movs	r3, #0
 80024ee:	210a      	movs	r1, #10
 80024f0:	483b      	ldr	r0, [pc, #236]	; (80025e0 <FreqMenu_DrawFreqPresetMenu+0xf04>)
 80024f2:	f008 ffcb 	bl	800b48c <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 500Hz",	10, menu_pos_y6, BLACK, 2, WHITE);
 80024f6:	7abb      	ldrb	r3, [r7, #10]
 80024f8:	b29a      	uxth	r2, r3
 80024fa:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80024fe:	9301      	str	r3, [sp, #4]
 8002500:	2302      	movs	r3, #2
 8002502:	9300      	str	r3, [sp, #0]
 8002504:	2300      	movs	r3, #0
 8002506:	210a      	movs	r1, #10
 8002508:	4836      	ldr	r0, [pc, #216]	; (80025e4 <FreqMenu_DrawFreqPresetMenu+0xf08>)
 800250a:	f008 ffbf 	bl	800b48c <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 750Hz", 	10, menu_pos_y7, BLACK, 2, WHITE);
 800250e:	7a7b      	ldrb	r3, [r7, #9]
 8002510:	b29a      	uxth	r2, r3
 8002512:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8002516:	9301      	str	r3, [sp, #4]
 8002518:	2302      	movs	r3, #2
 800251a:	9300      	str	r3, [sp, #0]
 800251c:	2300      	movs	r3, #0
 800251e:	210a      	movs	r1, #10
 8002520:	4831      	ldr	r0, [pc, #196]	; (80025e8 <FreqMenu_DrawFreqPresetMenu+0xf0c>)
 8002522:	f008 ffb3 	bl	800b48c <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 1KHz", 	120, menu_pos_y1, BLACK, 2, WHITE);
 8002526:	7bfb      	ldrb	r3, [r7, #15]
 8002528:	b29a      	uxth	r2, r3
 800252a:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800252e:	9301      	str	r3, [sp, #4]
 8002530:	2302      	movs	r3, #2
 8002532:	9300      	str	r3, [sp, #0]
 8002534:	2300      	movs	r3, #0
 8002536:	2178      	movs	r1, #120	; 0x78
 8002538:	482c      	ldr	r0, [pc, #176]	; (80025ec <FreqMenu_DrawFreqPresetMenu+0xf10>)
 800253a:	f008 ffa7 	bl	800b48c <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 5KHz", 	120, menu_pos_y2, BLACK, 2, WHITE);
 800253e:	7bbb      	ldrb	r3, [r7, #14]
 8002540:	b29a      	uxth	r2, r3
 8002542:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8002546:	9301      	str	r3, [sp, #4]
 8002548:	2302      	movs	r3, #2
 800254a:	9300      	str	r3, [sp, #0]
 800254c:	2300      	movs	r3, #0
 800254e:	2178      	movs	r1, #120	; 0x78
 8002550:	4827      	ldr	r0, [pc, #156]	; (80025f0 <FreqMenu_DrawFreqPresetMenu+0xf14>)
 8002552:	f008 ff9b 	bl	800b48c <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 10KHz", 	120, menu_pos_y3, WHITE, 2, BLACK);
 8002556:	7b7b      	ldrb	r3, [r7, #13]
 8002558:	b29a      	uxth	r2, r3
 800255a:	2300      	movs	r3, #0
 800255c:	9301      	str	r3, [sp, #4]
 800255e:	2302      	movs	r3, #2
 8002560:	9300      	str	r3, [sp, #0]
 8002562:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8002566:	2178      	movs	r1, #120	; 0x78
 8002568:	4822      	ldr	r0, [pc, #136]	; (80025f4 <FreqMenu_DrawFreqPresetMenu+0xf18>)
 800256a:	f008 ff8f 	bl	800b48c <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 25KHz", 	120, menu_pos_y4, BLACK, 2, WHITE);
 800256e:	7b3b      	ldrb	r3, [r7, #12]
 8002570:	b29a      	uxth	r2, r3
 8002572:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8002576:	9301      	str	r3, [sp, #4]
 8002578:	2302      	movs	r3, #2
 800257a:	9300      	str	r3, [sp, #0]
 800257c:	2300      	movs	r3, #0
 800257e:	2178      	movs	r1, #120	; 0x78
 8002580:	481d      	ldr	r0, [pc, #116]	; (80025f8 <FreqMenu_DrawFreqPresetMenu+0xf1c>)
 8002582:	f008 ff83 	bl	800b48c <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 50KHz", 	120, menu_pos_y5, BLACK, 2, WHITE);
 8002586:	7afb      	ldrb	r3, [r7, #11]
 8002588:	b29a      	uxth	r2, r3
 800258a:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800258e:	9301      	str	r3, [sp, #4]
 8002590:	2302      	movs	r3, #2
 8002592:	9300      	str	r3, [sp, #0]
 8002594:	2300      	movs	r3, #0
 8002596:	2178      	movs	r1, #120	; 0x78
 8002598:	4818      	ldr	r0, [pc, #96]	; (80025fc <FreqMenu_DrawFreqPresetMenu+0xf20>)
 800259a:	f008 ff77 	bl	800b48c <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 75KHz",	120, menu_pos_y6, BLACK, 2, WHITE);
 800259e:	7abb      	ldrb	r3, [r7, #10]
 80025a0:	b29a      	uxth	r2, r3
 80025a2:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80025a6:	9301      	str	r3, [sp, #4]
 80025a8:	2302      	movs	r3, #2
 80025aa:	9300      	str	r3, [sp, #0]
 80025ac:	2300      	movs	r3, #0
 80025ae:	2178      	movs	r1, #120	; 0x78
 80025b0:	4813      	ldr	r0, [pc, #76]	; (8002600 <FreqMenu_DrawFreqPresetMenu+0xf24>)
 80025b2:	f008 ff6b 	bl	800b48c <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 100KHz", 	120, menu_pos_y7, BLACK, 2, WHITE);
 80025b6:	7a7b      	ldrb	r3, [r7, #9]
 80025b8:	b29a      	uxth	r2, r3
 80025ba:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80025be:	9301      	str	r3, [sp, #4]
 80025c0:	2302      	movs	r3, #2
 80025c2:	9300      	str	r3, [sp, #0]
 80025c4:	2300      	movs	r3, #0
 80025c6:	2178      	movs	r1, #120	; 0x78
 80025c8:	480e      	ldr	r0, [pc, #56]	; (8002604 <FreqMenu_DrawFreqPresetMenu+0xf28>)
 80025ca:	f008 ff5f 	bl	800b48c <ILI9341_Draw_Text>
				break;
 80025ce:	e2e8      	b.n	8002ba2 <FreqMenu_DrawFreqPresetMenu+0x14c6>
 80025d0:	0800eb04 	.word	0x0800eb04
 80025d4:	0800eb0c 	.word	0x0800eb0c
 80025d8:	0800eb14 	.word	0x0800eb14
 80025dc:	0800eb1c 	.word	0x0800eb1c
 80025e0:	0800eb24 	.word	0x0800eb24
 80025e4:	0800eb2c 	.word	0x0800eb2c
 80025e8:	0800eb34 	.word	0x0800eb34
 80025ec:	0800eb3c 	.word	0x0800eb3c
 80025f0:	0800eb44 	.word	0x0800eb44
 80025f4:	0800eb4c 	.word	0x0800eb4c
 80025f8:	0800eb54 	.word	0x0800eb54
 80025fc:	0800eb5c 	.word	0x0800eb5c
 8002600:	0800eb64 	.word	0x0800eb64
 8002604:	0800eb6c 	.word	0x0800eb6c
				ILI9341_Draw_Text("- 1Hz", 		10, menu_pos_y1, BLACK, 2, WHITE);
 8002608:	7bfb      	ldrb	r3, [r7, #15]
 800260a:	b29a      	uxth	r2, r3
 800260c:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8002610:	9301      	str	r3, [sp, #4]
 8002612:	2302      	movs	r3, #2
 8002614:	9300      	str	r3, [sp, #0]
 8002616:	2300      	movs	r3, #0
 8002618:	210a      	movs	r1, #10
 800261a:	48a4      	ldr	r0, [pc, #656]	; (80028ac <FreqMenu_DrawFreqPresetMenu+0x11d0>)
 800261c:	f008 ff36 	bl	800b48c <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 10Hz", 	10, menu_pos_y2, BLACK, 2, WHITE);
 8002620:	7bbb      	ldrb	r3, [r7, #14]
 8002622:	b29a      	uxth	r2, r3
 8002624:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8002628:	9301      	str	r3, [sp, #4]
 800262a:	2302      	movs	r3, #2
 800262c:	9300      	str	r3, [sp, #0]
 800262e:	2300      	movs	r3, #0
 8002630:	210a      	movs	r1, #10
 8002632:	489f      	ldr	r0, [pc, #636]	; (80028b0 <FreqMenu_DrawFreqPresetMenu+0x11d4>)
 8002634:	f008 ff2a 	bl	800b48c <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 50Hz", 	10, menu_pos_y3, BLACK, 2, WHITE);
 8002638:	7b7b      	ldrb	r3, [r7, #13]
 800263a:	b29a      	uxth	r2, r3
 800263c:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8002640:	9301      	str	r3, [sp, #4]
 8002642:	2302      	movs	r3, #2
 8002644:	9300      	str	r3, [sp, #0]
 8002646:	2300      	movs	r3, #0
 8002648:	210a      	movs	r1, #10
 800264a:	489a      	ldr	r0, [pc, #616]	; (80028b4 <FreqMenu_DrawFreqPresetMenu+0x11d8>)
 800264c:	f008 ff1e 	bl	800b48c <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 100Hz", 	10, menu_pos_y4, BLACK, 2, WHITE);
 8002650:	7b3b      	ldrb	r3, [r7, #12]
 8002652:	b29a      	uxth	r2, r3
 8002654:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8002658:	9301      	str	r3, [sp, #4]
 800265a:	2302      	movs	r3, #2
 800265c:	9300      	str	r3, [sp, #0]
 800265e:	2300      	movs	r3, #0
 8002660:	210a      	movs	r1, #10
 8002662:	4895      	ldr	r0, [pc, #596]	; (80028b8 <FreqMenu_DrawFreqPresetMenu+0x11dc>)
 8002664:	f008 ff12 	bl	800b48c <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 250Hz", 	10, menu_pos_y5, BLACK, 2, WHITE);
 8002668:	7afb      	ldrb	r3, [r7, #11]
 800266a:	b29a      	uxth	r2, r3
 800266c:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8002670:	9301      	str	r3, [sp, #4]
 8002672:	2302      	movs	r3, #2
 8002674:	9300      	str	r3, [sp, #0]
 8002676:	2300      	movs	r3, #0
 8002678:	210a      	movs	r1, #10
 800267a:	4890      	ldr	r0, [pc, #576]	; (80028bc <FreqMenu_DrawFreqPresetMenu+0x11e0>)
 800267c:	f008 ff06 	bl	800b48c <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 500Hz",	10, menu_pos_y6, BLACK, 2, WHITE);
 8002680:	7abb      	ldrb	r3, [r7, #10]
 8002682:	b29a      	uxth	r2, r3
 8002684:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8002688:	9301      	str	r3, [sp, #4]
 800268a:	2302      	movs	r3, #2
 800268c:	9300      	str	r3, [sp, #0]
 800268e:	2300      	movs	r3, #0
 8002690:	210a      	movs	r1, #10
 8002692:	488b      	ldr	r0, [pc, #556]	; (80028c0 <FreqMenu_DrawFreqPresetMenu+0x11e4>)
 8002694:	f008 fefa 	bl	800b48c <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 750Hz", 	10, menu_pos_y7, BLACK, 2, WHITE);
 8002698:	7a7b      	ldrb	r3, [r7, #9]
 800269a:	b29a      	uxth	r2, r3
 800269c:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80026a0:	9301      	str	r3, [sp, #4]
 80026a2:	2302      	movs	r3, #2
 80026a4:	9300      	str	r3, [sp, #0]
 80026a6:	2300      	movs	r3, #0
 80026a8:	210a      	movs	r1, #10
 80026aa:	4886      	ldr	r0, [pc, #536]	; (80028c4 <FreqMenu_DrawFreqPresetMenu+0x11e8>)
 80026ac:	f008 feee 	bl	800b48c <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 1KHz", 	120, menu_pos_y1, BLACK, 2, WHITE);
 80026b0:	7bfb      	ldrb	r3, [r7, #15]
 80026b2:	b29a      	uxth	r2, r3
 80026b4:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80026b8:	9301      	str	r3, [sp, #4]
 80026ba:	2302      	movs	r3, #2
 80026bc:	9300      	str	r3, [sp, #0]
 80026be:	2300      	movs	r3, #0
 80026c0:	2178      	movs	r1, #120	; 0x78
 80026c2:	4881      	ldr	r0, [pc, #516]	; (80028c8 <FreqMenu_DrawFreqPresetMenu+0x11ec>)
 80026c4:	f008 fee2 	bl	800b48c <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 5KHz", 	120, menu_pos_y2, BLACK, 2, WHITE);
 80026c8:	7bbb      	ldrb	r3, [r7, #14]
 80026ca:	b29a      	uxth	r2, r3
 80026cc:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80026d0:	9301      	str	r3, [sp, #4]
 80026d2:	2302      	movs	r3, #2
 80026d4:	9300      	str	r3, [sp, #0]
 80026d6:	2300      	movs	r3, #0
 80026d8:	2178      	movs	r1, #120	; 0x78
 80026da:	487c      	ldr	r0, [pc, #496]	; (80028cc <FreqMenu_DrawFreqPresetMenu+0x11f0>)
 80026dc:	f008 fed6 	bl	800b48c <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 10KHz", 	120, menu_pos_y3, BLACK, 2, WHITE);
 80026e0:	7b7b      	ldrb	r3, [r7, #13]
 80026e2:	b29a      	uxth	r2, r3
 80026e4:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80026e8:	9301      	str	r3, [sp, #4]
 80026ea:	2302      	movs	r3, #2
 80026ec:	9300      	str	r3, [sp, #0]
 80026ee:	2300      	movs	r3, #0
 80026f0:	2178      	movs	r1, #120	; 0x78
 80026f2:	4877      	ldr	r0, [pc, #476]	; (80028d0 <FreqMenu_DrawFreqPresetMenu+0x11f4>)
 80026f4:	f008 feca 	bl	800b48c <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 25KHz", 	120, menu_pos_y4, WHITE, 2, BLACK);
 80026f8:	7b3b      	ldrb	r3, [r7, #12]
 80026fa:	b29a      	uxth	r2, r3
 80026fc:	2300      	movs	r3, #0
 80026fe:	9301      	str	r3, [sp, #4]
 8002700:	2302      	movs	r3, #2
 8002702:	9300      	str	r3, [sp, #0]
 8002704:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8002708:	2178      	movs	r1, #120	; 0x78
 800270a:	4872      	ldr	r0, [pc, #456]	; (80028d4 <FreqMenu_DrawFreqPresetMenu+0x11f8>)
 800270c:	f008 febe 	bl	800b48c <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 50KHz", 	120, menu_pos_y5, BLACK, 2, WHITE);
 8002710:	7afb      	ldrb	r3, [r7, #11]
 8002712:	b29a      	uxth	r2, r3
 8002714:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8002718:	9301      	str	r3, [sp, #4]
 800271a:	2302      	movs	r3, #2
 800271c:	9300      	str	r3, [sp, #0]
 800271e:	2300      	movs	r3, #0
 8002720:	2178      	movs	r1, #120	; 0x78
 8002722:	486d      	ldr	r0, [pc, #436]	; (80028d8 <FreqMenu_DrawFreqPresetMenu+0x11fc>)
 8002724:	f008 feb2 	bl	800b48c <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 75KHz",	120, menu_pos_y6, BLACK, 2, WHITE);
 8002728:	7abb      	ldrb	r3, [r7, #10]
 800272a:	b29a      	uxth	r2, r3
 800272c:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8002730:	9301      	str	r3, [sp, #4]
 8002732:	2302      	movs	r3, #2
 8002734:	9300      	str	r3, [sp, #0]
 8002736:	2300      	movs	r3, #0
 8002738:	2178      	movs	r1, #120	; 0x78
 800273a:	4868      	ldr	r0, [pc, #416]	; (80028dc <FreqMenu_DrawFreqPresetMenu+0x1200>)
 800273c:	f008 fea6 	bl	800b48c <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 100KHz", 	120, menu_pos_y7, BLACK, 2, WHITE);
 8002740:	7a7b      	ldrb	r3, [r7, #9]
 8002742:	b29a      	uxth	r2, r3
 8002744:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8002748:	9301      	str	r3, [sp, #4]
 800274a:	2302      	movs	r3, #2
 800274c:	9300      	str	r3, [sp, #0]
 800274e:	2300      	movs	r3, #0
 8002750:	2178      	movs	r1, #120	; 0x78
 8002752:	4863      	ldr	r0, [pc, #396]	; (80028e0 <FreqMenu_DrawFreqPresetMenu+0x1204>)
 8002754:	f008 fe9a 	bl	800b48c <ILI9341_Draw_Text>
				break;
 8002758:	e223      	b.n	8002ba2 <FreqMenu_DrawFreqPresetMenu+0x14c6>
				ILI9341_Draw_Text("- 1Hz", 		10, menu_pos_y1, BLACK, 2, WHITE);
 800275a:	7bfb      	ldrb	r3, [r7, #15]
 800275c:	b29a      	uxth	r2, r3
 800275e:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8002762:	9301      	str	r3, [sp, #4]
 8002764:	2302      	movs	r3, #2
 8002766:	9300      	str	r3, [sp, #0]
 8002768:	2300      	movs	r3, #0
 800276a:	210a      	movs	r1, #10
 800276c:	484f      	ldr	r0, [pc, #316]	; (80028ac <FreqMenu_DrawFreqPresetMenu+0x11d0>)
 800276e:	f008 fe8d 	bl	800b48c <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 10Hz", 	10, menu_pos_y2, BLACK, 2, WHITE);
 8002772:	7bbb      	ldrb	r3, [r7, #14]
 8002774:	b29a      	uxth	r2, r3
 8002776:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800277a:	9301      	str	r3, [sp, #4]
 800277c:	2302      	movs	r3, #2
 800277e:	9300      	str	r3, [sp, #0]
 8002780:	2300      	movs	r3, #0
 8002782:	210a      	movs	r1, #10
 8002784:	484a      	ldr	r0, [pc, #296]	; (80028b0 <FreqMenu_DrawFreqPresetMenu+0x11d4>)
 8002786:	f008 fe81 	bl	800b48c <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 50Hz", 	10, menu_pos_y3, BLACK, 2, WHITE);
 800278a:	7b7b      	ldrb	r3, [r7, #13]
 800278c:	b29a      	uxth	r2, r3
 800278e:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8002792:	9301      	str	r3, [sp, #4]
 8002794:	2302      	movs	r3, #2
 8002796:	9300      	str	r3, [sp, #0]
 8002798:	2300      	movs	r3, #0
 800279a:	210a      	movs	r1, #10
 800279c:	4845      	ldr	r0, [pc, #276]	; (80028b4 <FreqMenu_DrawFreqPresetMenu+0x11d8>)
 800279e:	f008 fe75 	bl	800b48c <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 100Hz", 	10, menu_pos_y4, BLACK, 2, WHITE);
 80027a2:	7b3b      	ldrb	r3, [r7, #12]
 80027a4:	b29a      	uxth	r2, r3
 80027a6:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80027aa:	9301      	str	r3, [sp, #4]
 80027ac:	2302      	movs	r3, #2
 80027ae:	9300      	str	r3, [sp, #0]
 80027b0:	2300      	movs	r3, #0
 80027b2:	210a      	movs	r1, #10
 80027b4:	4840      	ldr	r0, [pc, #256]	; (80028b8 <FreqMenu_DrawFreqPresetMenu+0x11dc>)
 80027b6:	f008 fe69 	bl	800b48c <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 250Hz", 	10, menu_pos_y5, BLACK, 2, WHITE);
 80027ba:	7afb      	ldrb	r3, [r7, #11]
 80027bc:	b29a      	uxth	r2, r3
 80027be:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80027c2:	9301      	str	r3, [sp, #4]
 80027c4:	2302      	movs	r3, #2
 80027c6:	9300      	str	r3, [sp, #0]
 80027c8:	2300      	movs	r3, #0
 80027ca:	210a      	movs	r1, #10
 80027cc:	483b      	ldr	r0, [pc, #236]	; (80028bc <FreqMenu_DrawFreqPresetMenu+0x11e0>)
 80027ce:	f008 fe5d 	bl	800b48c <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 500Hz",	10, menu_pos_y6, BLACK, 2, WHITE);
 80027d2:	7abb      	ldrb	r3, [r7, #10]
 80027d4:	b29a      	uxth	r2, r3
 80027d6:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80027da:	9301      	str	r3, [sp, #4]
 80027dc:	2302      	movs	r3, #2
 80027de:	9300      	str	r3, [sp, #0]
 80027e0:	2300      	movs	r3, #0
 80027e2:	210a      	movs	r1, #10
 80027e4:	4836      	ldr	r0, [pc, #216]	; (80028c0 <FreqMenu_DrawFreqPresetMenu+0x11e4>)
 80027e6:	f008 fe51 	bl	800b48c <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 750Hz", 	10, menu_pos_y7, BLACK, 2, WHITE);
 80027ea:	7a7b      	ldrb	r3, [r7, #9]
 80027ec:	b29a      	uxth	r2, r3
 80027ee:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80027f2:	9301      	str	r3, [sp, #4]
 80027f4:	2302      	movs	r3, #2
 80027f6:	9300      	str	r3, [sp, #0]
 80027f8:	2300      	movs	r3, #0
 80027fa:	210a      	movs	r1, #10
 80027fc:	4831      	ldr	r0, [pc, #196]	; (80028c4 <FreqMenu_DrawFreqPresetMenu+0x11e8>)
 80027fe:	f008 fe45 	bl	800b48c <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 1KHz", 	120, menu_pos_y1, BLACK, 2, WHITE);
 8002802:	7bfb      	ldrb	r3, [r7, #15]
 8002804:	b29a      	uxth	r2, r3
 8002806:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800280a:	9301      	str	r3, [sp, #4]
 800280c:	2302      	movs	r3, #2
 800280e:	9300      	str	r3, [sp, #0]
 8002810:	2300      	movs	r3, #0
 8002812:	2178      	movs	r1, #120	; 0x78
 8002814:	482c      	ldr	r0, [pc, #176]	; (80028c8 <FreqMenu_DrawFreqPresetMenu+0x11ec>)
 8002816:	f008 fe39 	bl	800b48c <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 5KHz", 	120, menu_pos_y2, BLACK, 2, WHITE);
 800281a:	7bbb      	ldrb	r3, [r7, #14]
 800281c:	b29a      	uxth	r2, r3
 800281e:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8002822:	9301      	str	r3, [sp, #4]
 8002824:	2302      	movs	r3, #2
 8002826:	9300      	str	r3, [sp, #0]
 8002828:	2300      	movs	r3, #0
 800282a:	2178      	movs	r1, #120	; 0x78
 800282c:	4827      	ldr	r0, [pc, #156]	; (80028cc <FreqMenu_DrawFreqPresetMenu+0x11f0>)
 800282e:	f008 fe2d 	bl	800b48c <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 10KHz", 	120, menu_pos_y3, BLACK, 2, WHITE);
 8002832:	7b7b      	ldrb	r3, [r7, #13]
 8002834:	b29a      	uxth	r2, r3
 8002836:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800283a:	9301      	str	r3, [sp, #4]
 800283c:	2302      	movs	r3, #2
 800283e:	9300      	str	r3, [sp, #0]
 8002840:	2300      	movs	r3, #0
 8002842:	2178      	movs	r1, #120	; 0x78
 8002844:	4822      	ldr	r0, [pc, #136]	; (80028d0 <FreqMenu_DrawFreqPresetMenu+0x11f4>)
 8002846:	f008 fe21 	bl	800b48c <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 25KHz", 	120, menu_pos_y4, BLACK, 2, WHITE);
 800284a:	7b3b      	ldrb	r3, [r7, #12]
 800284c:	b29a      	uxth	r2, r3
 800284e:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8002852:	9301      	str	r3, [sp, #4]
 8002854:	2302      	movs	r3, #2
 8002856:	9300      	str	r3, [sp, #0]
 8002858:	2300      	movs	r3, #0
 800285a:	2178      	movs	r1, #120	; 0x78
 800285c:	481d      	ldr	r0, [pc, #116]	; (80028d4 <FreqMenu_DrawFreqPresetMenu+0x11f8>)
 800285e:	f008 fe15 	bl	800b48c <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 50KHz", 	120, menu_pos_y5, WHITE, 2, BLACK);
 8002862:	7afb      	ldrb	r3, [r7, #11]
 8002864:	b29a      	uxth	r2, r3
 8002866:	2300      	movs	r3, #0
 8002868:	9301      	str	r3, [sp, #4]
 800286a:	2302      	movs	r3, #2
 800286c:	9300      	str	r3, [sp, #0]
 800286e:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8002872:	2178      	movs	r1, #120	; 0x78
 8002874:	4818      	ldr	r0, [pc, #96]	; (80028d8 <FreqMenu_DrawFreqPresetMenu+0x11fc>)
 8002876:	f008 fe09 	bl	800b48c <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 75KHz",	120, menu_pos_y6, BLACK, 2, WHITE);
 800287a:	7abb      	ldrb	r3, [r7, #10]
 800287c:	b29a      	uxth	r2, r3
 800287e:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8002882:	9301      	str	r3, [sp, #4]
 8002884:	2302      	movs	r3, #2
 8002886:	9300      	str	r3, [sp, #0]
 8002888:	2300      	movs	r3, #0
 800288a:	2178      	movs	r1, #120	; 0x78
 800288c:	4813      	ldr	r0, [pc, #76]	; (80028dc <FreqMenu_DrawFreqPresetMenu+0x1200>)
 800288e:	f008 fdfd 	bl	800b48c <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 100KHz", 	120, menu_pos_y7, BLACK, 2, WHITE);
 8002892:	7a7b      	ldrb	r3, [r7, #9]
 8002894:	b29a      	uxth	r2, r3
 8002896:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800289a:	9301      	str	r3, [sp, #4]
 800289c:	2302      	movs	r3, #2
 800289e:	9300      	str	r3, [sp, #0]
 80028a0:	2300      	movs	r3, #0
 80028a2:	2178      	movs	r1, #120	; 0x78
 80028a4:	480e      	ldr	r0, [pc, #56]	; (80028e0 <FreqMenu_DrawFreqPresetMenu+0x1204>)
 80028a6:	f008 fdf1 	bl	800b48c <ILI9341_Draw_Text>
			break;
 80028aa:	e17a      	b.n	8002ba2 <FreqMenu_DrawFreqPresetMenu+0x14c6>
 80028ac:	0800eb04 	.word	0x0800eb04
 80028b0:	0800eb0c 	.word	0x0800eb0c
 80028b4:	0800eb14 	.word	0x0800eb14
 80028b8:	0800eb1c 	.word	0x0800eb1c
 80028bc:	0800eb24 	.word	0x0800eb24
 80028c0:	0800eb2c 	.word	0x0800eb2c
 80028c4:	0800eb34 	.word	0x0800eb34
 80028c8:	0800eb3c 	.word	0x0800eb3c
 80028cc:	0800eb44 	.word	0x0800eb44
 80028d0:	0800eb4c 	.word	0x0800eb4c
 80028d4:	0800eb54 	.word	0x0800eb54
 80028d8:	0800eb5c 	.word	0x0800eb5c
 80028dc:	0800eb64 	.word	0x0800eb64
 80028e0:	0800eb6c 	.word	0x0800eb6c
				ILI9341_Draw_Text("- 1Hz", 		10, menu_pos_y1, BLACK, 2, WHITE);
 80028e4:	7bfb      	ldrb	r3, [r7, #15]
 80028e6:	b29a      	uxth	r2, r3
 80028e8:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80028ec:	9301      	str	r3, [sp, #4]
 80028ee:	2302      	movs	r3, #2
 80028f0:	9300      	str	r3, [sp, #0]
 80028f2:	2300      	movs	r3, #0
 80028f4:	210a      	movs	r1, #10
 80028f6:	48ad      	ldr	r0, [pc, #692]	; (8002bac <FreqMenu_DrawFreqPresetMenu+0x14d0>)
 80028f8:	f008 fdc8 	bl	800b48c <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 10Hz", 	10, menu_pos_y2, BLACK, 2, WHITE);
 80028fc:	7bbb      	ldrb	r3, [r7, #14]
 80028fe:	b29a      	uxth	r2, r3
 8002900:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8002904:	9301      	str	r3, [sp, #4]
 8002906:	2302      	movs	r3, #2
 8002908:	9300      	str	r3, [sp, #0]
 800290a:	2300      	movs	r3, #0
 800290c:	210a      	movs	r1, #10
 800290e:	48a8      	ldr	r0, [pc, #672]	; (8002bb0 <FreqMenu_DrawFreqPresetMenu+0x14d4>)
 8002910:	f008 fdbc 	bl	800b48c <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 50Hz", 	10, menu_pos_y3, BLACK, 2, WHITE);
 8002914:	7b7b      	ldrb	r3, [r7, #13]
 8002916:	b29a      	uxth	r2, r3
 8002918:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800291c:	9301      	str	r3, [sp, #4]
 800291e:	2302      	movs	r3, #2
 8002920:	9300      	str	r3, [sp, #0]
 8002922:	2300      	movs	r3, #0
 8002924:	210a      	movs	r1, #10
 8002926:	48a3      	ldr	r0, [pc, #652]	; (8002bb4 <FreqMenu_DrawFreqPresetMenu+0x14d8>)
 8002928:	f008 fdb0 	bl	800b48c <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 100Hz", 	10, menu_pos_y4, BLACK, 2, WHITE);
 800292c:	7b3b      	ldrb	r3, [r7, #12]
 800292e:	b29a      	uxth	r2, r3
 8002930:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8002934:	9301      	str	r3, [sp, #4]
 8002936:	2302      	movs	r3, #2
 8002938:	9300      	str	r3, [sp, #0]
 800293a:	2300      	movs	r3, #0
 800293c:	210a      	movs	r1, #10
 800293e:	489e      	ldr	r0, [pc, #632]	; (8002bb8 <FreqMenu_DrawFreqPresetMenu+0x14dc>)
 8002940:	f008 fda4 	bl	800b48c <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 250Hz", 	10, menu_pos_y5, BLACK, 2, WHITE);
 8002944:	7afb      	ldrb	r3, [r7, #11]
 8002946:	b29a      	uxth	r2, r3
 8002948:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800294c:	9301      	str	r3, [sp, #4]
 800294e:	2302      	movs	r3, #2
 8002950:	9300      	str	r3, [sp, #0]
 8002952:	2300      	movs	r3, #0
 8002954:	210a      	movs	r1, #10
 8002956:	4899      	ldr	r0, [pc, #612]	; (8002bbc <FreqMenu_DrawFreqPresetMenu+0x14e0>)
 8002958:	f008 fd98 	bl	800b48c <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 500Hz",	10, menu_pos_y6, BLACK, 2, WHITE);
 800295c:	7abb      	ldrb	r3, [r7, #10]
 800295e:	b29a      	uxth	r2, r3
 8002960:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8002964:	9301      	str	r3, [sp, #4]
 8002966:	2302      	movs	r3, #2
 8002968:	9300      	str	r3, [sp, #0]
 800296a:	2300      	movs	r3, #0
 800296c:	210a      	movs	r1, #10
 800296e:	4894      	ldr	r0, [pc, #592]	; (8002bc0 <FreqMenu_DrawFreqPresetMenu+0x14e4>)
 8002970:	f008 fd8c 	bl	800b48c <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 750Hz", 	10, menu_pos_y7, BLACK, 2, WHITE);
 8002974:	7a7b      	ldrb	r3, [r7, #9]
 8002976:	b29a      	uxth	r2, r3
 8002978:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800297c:	9301      	str	r3, [sp, #4]
 800297e:	2302      	movs	r3, #2
 8002980:	9300      	str	r3, [sp, #0]
 8002982:	2300      	movs	r3, #0
 8002984:	210a      	movs	r1, #10
 8002986:	488f      	ldr	r0, [pc, #572]	; (8002bc4 <FreqMenu_DrawFreqPresetMenu+0x14e8>)
 8002988:	f008 fd80 	bl	800b48c <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 1KHz", 	120, menu_pos_y1, BLACK, 2, WHITE);
 800298c:	7bfb      	ldrb	r3, [r7, #15]
 800298e:	b29a      	uxth	r2, r3
 8002990:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8002994:	9301      	str	r3, [sp, #4]
 8002996:	2302      	movs	r3, #2
 8002998:	9300      	str	r3, [sp, #0]
 800299a:	2300      	movs	r3, #0
 800299c:	2178      	movs	r1, #120	; 0x78
 800299e:	488a      	ldr	r0, [pc, #552]	; (8002bc8 <FreqMenu_DrawFreqPresetMenu+0x14ec>)
 80029a0:	f008 fd74 	bl	800b48c <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 5KHz", 	120, menu_pos_y2, BLACK, 2, WHITE);
 80029a4:	7bbb      	ldrb	r3, [r7, #14]
 80029a6:	b29a      	uxth	r2, r3
 80029a8:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80029ac:	9301      	str	r3, [sp, #4]
 80029ae:	2302      	movs	r3, #2
 80029b0:	9300      	str	r3, [sp, #0]
 80029b2:	2300      	movs	r3, #0
 80029b4:	2178      	movs	r1, #120	; 0x78
 80029b6:	4885      	ldr	r0, [pc, #532]	; (8002bcc <FreqMenu_DrawFreqPresetMenu+0x14f0>)
 80029b8:	f008 fd68 	bl	800b48c <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 10KHz", 	120, menu_pos_y3, BLACK, 2, WHITE);
 80029bc:	7b7b      	ldrb	r3, [r7, #13]
 80029be:	b29a      	uxth	r2, r3
 80029c0:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80029c4:	9301      	str	r3, [sp, #4]
 80029c6:	2302      	movs	r3, #2
 80029c8:	9300      	str	r3, [sp, #0]
 80029ca:	2300      	movs	r3, #0
 80029cc:	2178      	movs	r1, #120	; 0x78
 80029ce:	4880      	ldr	r0, [pc, #512]	; (8002bd0 <FreqMenu_DrawFreqPresetMenu+0x14f4>)
 80029d0:	f008 fd5c 	bl	800b48c <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 25KHz", 	120, menu_pos_y4, BLACK, 2, WHITE);
 80029d4:	7b3b      	ldrb	r3, [r7, #12]
 80029d6:	b29a      	uxth	r2, r3
 80029d8:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80029dc:	9301      	str	r3, [sp, #4]
 80029de:	2302      	movs	r3, #2
 80029e0:	9300      	str	r3, [sp, #0]
 80029e2:	2300      	movs	r3, #0
 80029e4:	2178      	movs	r1, #120	; 0x78
 80029e6:	487b      	ldr	r0, [pc, #492]	; (8002bd4 <FreqMenu_DrawFreqPresetMenu+0x14f8>)
 80029e8:	f008 fd50 	bl	800b48c <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 50KHz", 	120, menu_pos_y5, BLACK, 2, WHITE);
 80029ec:	7afb      	ldrb	r3, [r7, #11]
 80029ee:	b29a      	uxth	r2, r3
 80029f0:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80029f4:	9301      	str	r3, [sp, #4]
 80029f6:	2302      	movs	r3, #2
 80029f8:	9300      	str	r3, [sp, #0]
 80029fa:	2300      	movs	r3, #0
 80029fc:	2178      	movs	r1, #120	; 0x78
 80029fe:	4876      	ldr	r0, [pc, #472]	; (8002bd8 <FreqMenu_DrawFreqPresetMenu+0x14fc>)
 8002a00:	f008 fd44 	bl	800b48c <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 75KHz",	120, menu_pos_y6, WHITE, 2, BLACK);
 8002a04:	7abb      	ldrb	r3, [r7, #10]
 8002a06:	b29a      	uxth	r2, r3
 8002a08:	2300      	movs	r3, #0
 8002a0a:	9301      	str	r3, [sp, #4]
 8002a0c:	2302      	movs	r3, #2
 8002a0e:	9300      	str	r3, [sp, #0]
 8002a10:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8002a14:	2178      	movs	r1, #120	; 0x78
 8002a16:	4871      	ldr	r0, [pc, #452]	; (8002bdc <FreqMenu_DrawFreqPresetMenu+0x1500>)
 8002a18:	f008 fd38 	bl	800b48c <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 100KHz", 	120, menu_pos_y7, BLACK, 2, WHITE);
 8002a1c:	7a7b      	ldrb	r3, [r7, #9]
 8002a1e:	b29a      	uxth	r2, r3
 8002a20:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8002a24:	9301      	str	r3, [sp, #4]
 8002a26:	2302      	movs	r3, #2
 8002a28:	9300      	str	r3, [sp, #0]
 8002a2a:	2300      	movs	r3, #0
 8002a2c:	2178      	movs	r1, #120	; 0x78
 8002a2e:	486c      	ldr	r0, [pc, #432]	; (8002be0 <FreqMenu_DrawFreqPresetMenu+0x1504>)
 8002a30:	f008 fd2c 	bl	800b48c <ILI9341_Draw_Text>
			break;
 8002a34:	e0b5      	b.n	8002ba2 <FreqMenu_DrawFreqPresetMenu+0x14c6>
				ILI9341_Draw_Text("- 1Hz", 		10, menu_pos_y1, BLACK, 2, WHITE);
 8002a36:	7bfb      	ldrb	r3, [r7, #15]
 8002a38:	b29a      	uxth	r2, r3
 8002a3a:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8002a3e:	9301      	str	r3, [sp, #4]
 8002a40:	2302      	movs	r3, #2
 8002a42:	9300      	str	r3, [sp, #0]
 8002a44:	2300      	movs	r3, #0
 8002a46:	210a      	movs	r1, #10
 8002a48:	4858      	ldr	r0, [pc, #352]	; (8002bac <FreqMenu_DrawFreqPresetMenu+0x14d0>)
 8002a4a:	f008 fd1f 	bl	800b48c <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 10Hz", 	10, menu_pos_y2, BLACK, 2, WHITE);
 8002a4e:	7bbb      	ldrb	r3, [r7, #14]
 8002a50:	b29a      	uxth	r2, r3
 8002a52:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8002a56:	9301      	str	r3, [sp, #4]
 8002a58:	2302      	movs	r3, #2
 8002a5a:	9300      	str	r3, [sp, #0]
 8002a5c:	2300      	movs	r3, #0
 8002a5e:	210a      	movs	r1, #10
 8002a60:	4853      	ldr	r0, [pc, #332]	; (8002bb0 <FreqMenu_DrawFreqPresetMenu+0x14d4>)
 8002a62:	f008 fd13 	bl	800b48c <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 50Hz", 	10, menu_pos_y3, BLACK, 2, WHITE);
 8002a66:	7b7b      	ldrb	r3, [r7, #13]
 8002a68:	b29a      	uxth	r2, r3
 8002a6a:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8002a6e:	9301      	str	r3, [sp, #4]
 8002a70:	2302      	movs	r3, #2
 8002a72:	9300      	str	r3, [sp, #0]
 8002a74:	2300      	movs	r3, #0
 8002a76:	210a      	movs	r1, #10
 8002a78:	484e      	ldr	r0, [pc, #312]	; (8002bb4 <FreqMenu_DrawFreqPresetMenu+0x14d8>)
 8002a7a:	f008 fd07 	bl	800b48c <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 100Hz", 	10, menu_pos_y4, BLACK, 2, WHITE);
 8002a7e:	7b3b      	ldrb	r3, [r7, #12]
 8002a80:	b29a      	uxth	r2, r3
 8002a82:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8002a86:	9301      	str	r3, [sp, #4]
 8002a88:	2302      	movs	r3, #2
 8002a8a:	9300      	str	r3, [sp, #0]
 8002a8c:	2300      	movs	r3, #0
 8002a8e:	210a      	movs	r1, #10
 8002a90:	4849      	ldr	r0, [pc, #292]	; (8002bb8 <FreqMenu_DrawFreqPresetMenu+0x14dc>)
 8002a92:	f008 fcfb 	bl	800b48c <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 250Hz", 	10, menu_pos_y5, BLACK, 2, WHITE);
 8002a96:	7afb      	ldrb	r3, [r7, #11]
 8002a98:	b29a      	uxth	r2, r3
 8002a9a:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8002a9e:	9301      	str	r3, [sp, #4]
 8002aa0:	2302      	movs	r3, #2
 8002aa2:	9300      	str	r3, [sp, #0]
 8002aa4:	2300      	movs	r3, #0
 8002aa6:	210a      	movs	r1, #10
 8002aa8:	4844      	ldr	r0, [pc, #272]	; (8002bbc <FreqMenu_DrawFreqPresetMenu+0x14e0>)
 8002aaa:	f008 fcef 	bl	800b48c <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 500Hz",	10, menu_pos_y6, BLACK, 2, WHITE);
 8002aae:	7abb      	ldrb	r3, [r7, #10]
 8002ab0:	b29a      	uxth	r2, r3
 8002ab2:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8002ab6:	9301      	str	r3, [sp, #4]
 8002ab8:	2302      	movs	r3, #2
 8002aba:	9300      	str	r3, [sp, #0]
 8002abc:	2300      	movs	r3, #0
 8002abe:	210a      	movs	r1, #10
 8002ac0:	483f      	ldr	r0, [pc, #252]	; (8002bc0 <FreqMenu_DrawFreqPresetMenu+0x14e4>)
 8002ac2:	f008 fce3 	bl	800b48c <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 750Hz", 	10, menu_pos_y7, BLACK, 2, WHITE);
 8002ac6:	7a7b      	ldrb	r3, [r7, #9]
 8002ac8:	b29a      	uxth	r2, r3
 8002aca:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8002ace:	9301      	str	r3, [sp, #4]
 8002ad0:	2302      	movs	r3, #2
 8002ad2:	9300      	str	r3, [sp, #0]
 8002ad4:	2300      	movs	r3, #0
 8002ad6:	210a      	movs	r1, #10
 8002ad8:	483a      	ldr	r0, [pc, #232]	; (8002bc4 <FreqMenu_DrawFreqPresetMenu+0x14e8>)
 8002ada:	f008 fcd7 	bl	800b48c <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 1KHz", 	120, menu_pos_y1, BLACK, 2, WHITE);
 8002ade:	7bfb      	ldrb	r3, [r7, #15]
 8002ae0:	b29a      	uxth	r2, r3
 8002ae2:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8002ae6:	9301      	str	r3, [sp, #4]
 8002ae8:	2302      	movs	r3, #2
 8002aea:	9300      	str	r3, [sp, #0]
 8002aec:	2300      	movs	r3, #0
 8002aee:	2178      	movs	r1, #120	; 0x78
 8002af0:	4835      	ldr	r0, [pc, #212]	; (8002bc8 <FreqMenu_DrawFreqPresetMenu+0x14ec>)
 8002af2:	f008 fccb 	bl	800b48c <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 5KHz", 	120, menu_pos_y2, BLACK, 2, WHITE);
 8002af6:	7bbb      	ldrb	r3, [r7, #14]
 8002af8:	b29a      	uxth	r2, r3
 8002afa:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8002afe:	9301      	str	r3, [sp, #4]
 8002b00:	2302      	movs	r3, #2
 8002b02:	9300      	str	r3, [sp, #0]
 8002b04:	2300      	movs	r3, #0
 8002b06:	2178      	movs	r1, #120	; 0x78
 8002b08:	4830      	ldr	r0, [pc, #192]	; (8002bcc <FreqMenu_DrawFreqPresetMenu+0x14f0>)
 8002b0a:	f008 fcbf 	bl	800b48c <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 10KHz", 	120, menu_pos_y3, BLACK, 2, WHITE);
 8002b0e:	7b7b      	ldrb	r3, [r7, #13]
 8002b10:	b29a      	uxth	r2, r3
 8002b12:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8002b16:	9301      	str	r3, [sp, #4]
 8002b18:	2302      	movs	r3, #2
 8002b1a:	9300      	str	r3, [sp, #0]
 8002b1c:	2300      	movs	r3, #0
 8002b1e:	2178      	movs	r1, #120	; 0x78
 8002b20:	482b      	ldr	r0, [pc, #172]	; (8002bd0 <FreqMenu_DrawFreqPresetMenu+0x14f4>)
 8002b22:	f008 fcb3 	bl	800b48c <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 25KHz", 	120, menu_pos_y4, BLACK, 2, WHITE);
 8002b26:	7b3b      	ldrb	r3, [r7, #12]
 8002b28:	b29a      	uxth	r2, r3
 8002b2a:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8002b2e:	9301      	str	r3, [sp, #4]
 8002b30:	2302      	movs	r3, #2
 8002b32:	9300      	str	r3, [sp, #0]
 8002b34:	2300      	movs	r3, #0
 8002b36:	2178      	movs	r1, #120	; 0x78
 8002b38:	4826      	ldr	r0, [pc, #152]	; (8002bd4 <FreqMenu_DrawFreqPresetMenu+0x14f8>)
 8002b3a:	f008 fca7 	bl	800b48c <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 50KHz", 	120, menu_pos_y5, BLACK, 2, WHITE);
 8002b3e:	7afb      	ldrb	r3, [r7, #11]
 8002b40:	b29a      	uxth	r2, r3
 8002b42:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8002b46:	9301      	str	r3, [sp, #4]
 8002b48:	2302      	movs	r3, #2
 8002b4a:	9300      	str	r3, [sp, #0]
 8002b4c:	2300      	movs	r3, #0
 8002b4e:	2178      	movs	r1, #120	; 0x78
 8002b50:	4821      	ldr	r0, [pc, #132]	; (8002bd8 <FreqMenu_DrawFreqPresetMenu+0x14fc>)
 8002b52:	f008 fc9b 	bl	800b48c <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 75KHz",	120, menu_pos_y6, BLACK, 2, WHITE);
 8002b56:	7abb      	ldrb	r3, [r7, #10]
 8002b58:	b29a      	uxth	r2, r3
 8002b5a:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8002b5e:	9301      	str	r3, [sp, #4]
 8002b60:	2302      	movs	r3, #2
 8002b62:	9300      	str	r3, [sp, #0]
 8002b64:	2300      	movs	r3, #0
 8002b66:	2178      	movs	r1, #120	; 0x78
 8002b68:	481c      	ldr	r0, [pc, #112]	; (8002bdc <FreqMenu_DrawFreqPresetMenu+0x1500>)
 8002b6a:	f008 fc8f 	bl	800b48c <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 100KHz", 	120, menu_pos_y7, WHITE, 2, BLACK);
 8002b6e:	7a7b      	ldrb	r3, [r7, #9]
 8002b70:	b29a      	uxth	r2, r3
 8002b72:	2300      	movs	r3, #0
 8002b74:	9301      	str	r3, [sp, #4]
 8002b76:	2302      	movs	r3, #2
 8002b78:	9300      	str	r3, [sp, #0]
 8002b7a:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8002b7e:	2178      	movs	r1, #120	; 0x78
 8002b80:	4817      	ldr	r0, [pc, #92]	; (8002be0 <FreqMenu_DrawFreqPresetMenu+0x1504>)
 8002b82:	f008 fc83 	bl	800b48c <ILI9341_Draw_Text>
			break;
 8002b86:	bf00      	nop
 8002b88:	e00b      	b.n	8002ba2 <FreqMenu_DrawFreqPresetMenu+0x14c6>
		ILI9341_Draw_Text("FreqMenus::FreqMenu_DrawFreqPresetMenu() Error", 		10, 180, RED, 1, BLACK);
 8002b8a:	2300      	movs	r3, #0
 8002b8c:	9301      	str	r3, [sp, #4]
 8002b8e:	2301      	movs	r3, #1
 8002b90:	9300      	str	r3, [sp, #0]
 8002b92:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8002b96:	22b4      	movs	r2, #180	; 0xb4
 8002b98:	210a      	movs	r1, #10
 8002b9a:	4812      	ldr	r0, [pc, #72]	; (8002be4 <FreqMenu_DrawFreqPresetMenu+0x1508>)
 8002b9c:	f008 fc76 	bl	800b48c <ILI9341_Draw_Text>
}
 8002ba0:	e7ff      	b.n	8002ba2 <FreqMenu_DrawFreqPresetMenu+0x14c6>
 8002ba2:	bf00      	nop
 8002ba4:	3710      	adds	r7, #16
 8002ba6:	46bd      	mov	sp, r7
 8002ba8:	bd80      	pop	{r7, pc}
 8002baa:	bf00      	nop
 8002bac:	0800eb04 	.word	0x0800eb04
 8002bb0:	0800eb0c 	.word	0x0800eb0c
 8002bb4:	0800eb14 	.word	0x0800eb14
 8002bb8:	0800eb1c 	.word	0x0800eb1c
 8002bbc:	0800eb24 	.word	0x0800eb24
 8002bc0:	0800eb2c 	.word	0x0800eb2c
 8002bc4:	0800eb34 	.word	0x0800eb34
 8002bc8:	0800eb3c 	.word	0x0800eb3c
 8002bcc:	0800eb44 	.word	0x0800eb44
 8002bd0:	0800eb4c 	.word	0x0800eb4c
 8002bd4:	0800eb54 	.word	0x0800eb54
 8002bd8:	0800eb5c 	.word	0x0800eb5c
 8002bdc:	0800eb64 	.word	0x0800eb64
 8002be0:	0800eb6c 	.word	0x0800eb6c
 8002be4:	0800eb78 	.word	0x0800eb78

08002be8 <FreqMenu_DrawFreqAdjustMenu>:
 *	@param None
 *	@retval None
 *
 */
void FreqMenu_DrawFreqAdjustMenu()
{
 8002be8:	b580      	push	{r7, lr}
 8002bea:	b084      	sub	sp, #16
 8002bec:	af02      	add	r7, sp, #8

	ILI9341_Draw_Text("Output Signal Freq: ", 	10, 150, BLACK, 1, WHITE);
 8002bee:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8002bf2:	9301      	str	r3, [sp, #4]
 8002bf4:	2301      	movs	r3, #1
 8002bf6:	9300      	str	r3, [sp, #0]
 8002bf8:	2300      	movs	r3, #0
 8002bfa:	2296      	movs	r2, #150	; 0x96
 8002bfc:	210a      	movs	r1, #10
 8002bfe:	4811      	ldr	r0, [pc, #68]	; (8002c44 <FreqMenu_DrawFreqAdjustMenu+0x5c>)
 8002c00:	f008 fc44 	bl	800b48c <ILI9341_Draw_Text>

	char freq[6] = "";
 8002c04:	2300      	movs	r3, #0
 8002c06:	603b      	str	r3, [r7, #0]
 8002c08:	2300      	movs	r3, #0
 8002c0a:	80bb      	strh	r3, [r7, #4]
	//snprintf(freq, sizeof(freq), "%u", (uint8_t)FreqO_GetOutputFreq());
	if(DM_AddDigitPadding((uint16_t)FreqO_GetOutputFreq(), freq, sizeof(freq)) == 0)
 8002c0c:	f000 fe2c 	bl	8003868 <FreqO_GetOutputFreq>
 8002c10:	4603      	mov	r3, r0
 8002c12:	b29b      	uxth	r3, r3
 8002c14:	4639      	mov	r1, r7
 8002c16:	2206      	movs	r2, #6
 8002c18:	4618      	mov	r0, r3
 8002c1a:	f7fe fc9f 	bl	800155c <DM_AddDigitPadding>
 8002c1e:	4603      	mov	r3, r0
 8002c20:	2b00      	cmp	r3, #0
 8002c22:	d10a      	bne.n	8002c3a <FreqMenu_DrawFreqAdjustMenu+0x52>
		ILI9341_Draw_Text(freq, 250, 150, WHITE, 1, BLACK);
 8002c24:	4638      	mov	r0, r7
 8002c26:	2300      	movs	r3, #0
 8002c28:	9301      	str	r3, [sp, #4]
 8002c2a:	2301      	movs	r3, #1
 8002c2c:	9300      	str	r3, [sp, #0]
 8002c2e:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8002c32:	2296      	movs	r2, #150	; 0x96
 8002c34:	21fa      	movs	r1, #250	; 0xfa
 8002c36:	f008 fc29 	bl	800b48c <ILI9341_Draw_Text>


}
 8002c3a:	bf00      	nop
 8002c3c:	3708      	adds	r7, #8
 8002c3e:	46bd      	mov	sp, r7
 8002c40:	bd80      	pop	{r7, pc}
 8002c42:	bf00      	nop
 8002c44:	0800eba8 	.word	0x0800eba8

08002c48 <FreqMenu_DrawFreqSweepMenu>:
 *	@param None
 *	@retval None
 *
 */
void FreqMenu_DrawFreqSweepMenu()
{
 8002c48:	b580      	push	{r7, lr}
 8002c4a:	b082      	sub	sp, #8
 8002c4c:	af02      	add	r7, sp, #8

	ILI9341_Draw_Text("TODO: Freq Sweep Menu", 	10, 120, BLACK, 2, WHITE);
 8002c4e:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8002c52:	9301      	str	r3, [sp, #4]
 8002c54:	2302      	movs	r3, #2
 8002c56:	9300      	str	r3, [sp, #0]
 8002c58:	2300      	movs	r3, #0
 8002c5a:	2278      	movs	r2, #120	; 0x78
 8002c5c:	210a      	movs	r1, #10
 8002c5e:	4803      	ldr	r0, [pc, #12]	; (8002c6c <FreqMenu_DrawFreqSweepMenu+0x24>)
 8002c60:	f008 fc14 	bl	800b48c <ILI9341_Draw_Text>




}
 8002c64:	bf00      	nop
 8002c66:	46bd      	mov	sp, r7
 8002c68:	bd80      	pop	{r7, pc}
 8002c6a:	bf00      	nop
 8002c6c:	0800ebc0 	.word	0x0800ebc0

08002c70 <EM_ProcessEvent>:
 *	@param None
 *	@retval None
 *
 */
void EM_ProcessEvent()
{
 8002c70:	b5b0      	push	{r4, r5, r7, lr}
 8002c72:	b084      	sub	sp, #16
 8002c74:	af00      	add	r7, sp, #0

	switch(eNextState)
 8002c76:	4bb8      	ldr	r3, [pc, #736]	; (8002f58 <EM_ProcessEvent+0x2e8>)
 8002c78:	781b      	ldrb	r3, [r3, #0]
 8002c7a:	2b07      	cmp	r3, #7
 8002c7c:	f200 8160 	bhi.w	8002f40 <EM_ProcessEvent+0x2d0>
 8002c80:	a201      	add	r2, pc, #4	; (adr r2, 8002c88 <EM_ProcessEvent+0x18>)
 8002c82:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002c86:	bf00      	nop
 8002c88:	08002ca9 	.word	0x08002ca9
 8002c8c:	08002e03 	.word	0x08002e03
 8002c90:	08002e2f 	.word	0x08002e2f
 8002c94:	08002e5b 	.word	0x08002e5b
 8002c98:	08002ead 	.word	0x08002ead
 8002c9c:	08002ed7 	.word	0x08002ed7
 8002ca0:	08002f01 	.word	0x08002f01
 8002ca4:	08002f17 	.word	0x08002f17
	{
		case Idle_State:


			TIM1->ARR = 12;
 8002ca8:	4bac      	ldr	r3, [pc, #688]	; (8002f5c <EM_ProcessEvent+0x2ec>)
 8002caa:	220c      	movs	r2, #12
 8002cac:	62da      	str	r2, [r3, #44]	; 0x2c

			if(eNewEvent == evBlueBtn)
 8002cae:	4bac      	ldr	r3, [pc, #688]	; (8002f60 <EM_ProcessEvent+0x2f0>)
 8002cb0:	781b      	ldrb	r3, [r3, #0]
 8002cb2:	2b01      	cmp	r3, #1
 8002cb4:	d105      	bne.n	8002cc2 <EM_ProcessEvent+0x52>
			{
				eNextState = _FuncMenuEntryHandler();
 8002cb6:	f000 f96d 	bl	8002f94 <_FuncMenuEntryHandler>
 8002cba:	4603      	mov	r3, r0
 8002cbc:	461a      	mov	r2, r3
 8002cbe:	4ba6      	ldr	r3, [pc, #664]	; (8002f58 <EM_ProcessEvent+0x2e8>)
 8002cc0:	701a      	strb	r2, [r3, #0]
			}
			if(eNewEvent == evGreenBtn)
 8002cc2:	4ba7      	ldr	r3, [pc, #668]	; (8002f60 <EM_ProcessEvent+0x2f0>)
 8002cc4:	781b      	ldrb	r3, [r3, #0]
 8002cc6:	2b02      	cmp	r3, #2
 8002cc8:	d105      	bne.n	8002cd6 <EM_ProcessEvent+0x66>
			{
				eNextState = _FreqMainMenuEntryHandler();
 8002cca:	f000 fa63 	bl	8003194 <_FreqMainMenuEntryHandler>
 8002cce:	4603      	mov	r3, r0
 8002cd0:	461a      	mov	r2, r3
 8002cd2:	4ba1      	ldr	r3, [pc, #644]	; (8002f58 <EM_ProcessEvent+0x2e8>)
 8002cd4:	701a      	strb	r2, [r3, #0]
			}
			if(eNewEvent == evYellowBtn)
 8002cd6:	4ba2      	ldr	r3, [pc, #648]	; (8002f60 <EM_ProcessEvent+0x2f0>)
 8002cd8:	781b      	ldrb	r3, [r3, #0]
 8002cda:	2b03      	cmp	r3, #3
 8002cdc:	d105      	bne.n	8002cea <EM_ProcessEvent+0x7a>
			{
				eNextState = _GainMenuEntryHandler();
 8002cde:	f000 f9b3 	bl	8003048 <_GainMenuEntryHandler>
 8002ce2:	4603      	mov	r3, r0
 8002ce4:	461a      	mov	r2, r3
 8002ce6:	4b9c      	ldr	r3, [pc, #624]	; (8002f58 <EM_ProcessEvent+0x2e8>)
 8002ce8:	701a      	strb	r2, [r3, #0]
			}
			if(eNewEvent == evRedBtn)
 8002cea:	4b9d      	ldr	r3, [pc, #628]	; (8002f60 <EM_ProcessEvent+0x2f0>)
 8002cec:	781b      	ldrb	r3, [r3, #0]
 8002cee:	2b04      	cmp	r3, #4
 8002cf0:	d105      	bne.n	8002cfe <EM_ProcessEvent+0x8e>
			{
				eNextState = _BiasMenuEntryHandler();
 8002cf2:	f000 fa05 	bl	8003100 <_BiasMenuEntryHandler>
 8002cf6:	4603      	mov	r3, r0
 8002cf8:	461a      	mov	r2, r3
 8002cfa:	4b97      	ldr	r3, [pc, #604]	; (8002f58 <EM_ProcessEvent+0x2e8>)
 8002cfc:	701a      	strb	r2, [r3, #0]
			}
			if(eNewEvent == evEncoderSet)
 8002cfe:	4b98      	ldr	r3, [pc, #608]	; (8002f60 <EM_ProcessEvent+0x2f0>)
 8002d00:	781b      	ldrb	r3, [r3, #0]
 8002d02:	2b05      	cmp	r3, #5
 8002d04:	f040 811e 	bne.w	8002f44 <EM_ProcessEvent+0x2d4>
			{

				for(int i = 0; i < SINE_DATA_SIZE; i++)
 8002d08:	2300      	movs	r3, #0
 8002d0a:	60fb      	str	r3, [r7, #12]
 8002d0c:	e00c      	b.n	8002d28 <EM_ProcessEvent+0xb8>
				{
					tmpDataTable[i] = pOriginalDataTable[i];
 8002d0e:	4b95      	ldr	r3, [pc, #596]	; (8002f64 <EM_ProcessEvent+0x2f4>)
 8002d10:	681a      	ldr	r2, [r3, #0]
 8002d12:	68fb      	ldr	r3, [r7, #12]
 8002d14:	009b      	lsls	r3, r3, #2
 8002d16:	4413      	add	r3, r2
 8002d18:	681a      	ldr	r2, [r3, #0]
 8002d1a:	4993      	ldr	r1, [pc, #588]	; (8002f68 <EM_ProcessEvent+0x2f8>)
 8002d1c:	68fb      	ldr	r3, [r7, #12]
 8002d1e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
				for(int i = 0; i < SINE_DATA_SIZE; i++)
 8002d22:	68fb      	ldr	r3, [r7, #12]
 8002d24:	3301      	adds	r3, #1
 8002d26:	60fb      	str	r3, [r7, #12]
 8002d28:	68fb      	ldr	r3, [r7, #12]
 8002d2a:	2b77      	cmp	r3, #119	; 0x77
 8002d2c:	ddef      	ble.n	8002d0e <EM_ProcessEvent+0x9e>
				}

				float gain_coeff = 1;
 8002d2e:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 8002d32:	60bb      	str	r3, [r7, #8]
				if(TIM1->CNT)
 8002d34:	4b89      	ldr	r3, [pc, #548]	; (8002f5c <EM_ProcessEvent+0x2ec>)
 8002d36:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d38:	2b00      	cmp	r3, #0
 8002d3a:	d008      	beq.n	8002d4e <EM_ProcessEvent+0xde>
					gain_coeff = (TIM1->CNT/4);
 8002d3c:	4b87      	ldr	r3, [pc, #540]	; (8002f5c <EM_ProcessEvent+0x2ec>)
 8002d3e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d40:	089b      	lsrs	r3, r3, #2
 8002d42:	ee07 3a90 	vmov	s15, r3
 8002d46:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002d4a:	edc7 7a02 	vstr	s15, [r7, #8]

				for(int i = 0; i < SINE_DATA_SIZE; i++)
 8002d4e:	2300      	movs	r3, #0
 8002d50:	607b      	str	r3, [r7, #4]
 8002d52:	e03e      	b.n	8002dd2 <EM_ProcessEvent+0x162>
				{

					tmpDataTable[i] = tmpDataTable[i] * (0.8/gain_coeff);
 8002d54:	4a84      	ldr	r2, [pc, #528]	; (8002f68 <EM_ProcessEvent+0x2f8>)
 8002d56:	687b      	ldr	r3, [r7, #4]
 8002d58:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002d5c:	4618      	mov	r0, r3
 8002d5e:	f7fd fbf9 	bl	8000554 <__aeabi_ui2d>
 8002d62:	4604      	mov	r4, r0
 8002d64:	460d      	mov	r5, r1
 8002d66:	68b8      	ldr	r0, [r7, #8]
 8002d68:	f7fd fc16 	bl	8000598 <__aeabi_f2d>
 8002d6c:	4602      	mov	r2, r0
 8002d6e:	460b      	mov	r3, r1
 8002d70:	a177      	add	r1, pc, #476	; (adr r1, 8002f50 <EM_ProcessEvent+0x2e0>)
 8002d72:	e9d1 0100 	ldrd	r0, r1, [r1]
 8002d76:	f7fd fd91 	bl	800089c <__aeabi_ddiv>
 8002d7a:	4602      	mov	r2, r0
 8002d7c:	460b      	mov	r3, r1
 8002d7e:	4620      	mov	r0, r4
 8002d80:	4629      	mov	r1, r5
 8002d82:	f7fd fc61 	bl	8000648 <__aeabi_dmul>
 8002d86:	4603      	mov	r3, r0
 8002d88:	460c      	mov	r4, r1
 8002d8a:	4618      	mov	r0, r3
 8002d8c:	4621      	mov	r1, r4
 8002d8e:	f7fd ff33 	bl	8000bf8 <__aeabi_d2uiz>
 8002d92:	4601      	mov	r1, r0
 8002d94:	4a74      	ldr	r2, [pc, #464]	; (8002f68 <EM_ProcessEvent+0x2f8>)
 8002d96:	687b      	ldr	r3, [r7, #4]
 8002d98:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
					tmpDataTable[i] = tmpDataTable[i] + (800 * gain_coeff);
 8002d9c:	4a72      	ldr	r2, [pc, #456]	; (8002f68 <EM_ProcessEvent+0x2f8>)
 8002d9e:	687b      	ldr	r3, [r7, #4]
 8002da0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002da4:	ee07 3a90 	vmov	s15, r3
 8002da8:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8002dac:	edd7 7a02 	vldr	s15, [r7, #8]
 8002db0:	eddf 6a6e 	vldr	s13, [pc, #440]	; 8002f6c <EM_ProcessEvent+0x2fc>
 8002db4:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8002db8:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002dbc:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8002dc0:	ee17 1a90 	vmov	r1, s15
 8002dc4:	4a68      	ldr	r2, [pc, #416]	; (8002f68 <EM_ProcessEvent+0x2f8>)
 8002dc6:	687b      	ldr	r3, [r7, #4]
 8002dc8:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
				for(int i = 0; i < SINE_DATA_SIZE; i++)
 8002dcc:	687b      	ldr	r3, [r7, #4]
 8002dce:	3301      	adds	r3, #1
 8002dd0:	607b      	str	r3, [r7, #4]
 8002dd2:	687b      	ldr	r3, [r7, #4]
 8002dd4:	2b77      	cmp	r3, #119	; 0x77
 8002dd6:	ddbd      	ble.n	8002d54 <EM_ProcessEvent+0xe4>
				}
				for(int i = 0; i < SINE_DATA_SIZE; i++)
 8002dd8:	2300      	movs	r3, #0
 8002dda:	603b      	str	r3, [r7, #0]
 8002ddc:	e00a      	b.n	8002df4 <EM_ProcessEvent+0x184>
				{
					aModdedDataTable[i] = tmpDataTable[i];
 8002dde:	4a62      	ldr	r2, [pc, #392]	; (8002f68 <EM_ProcessEvent+0x2f8>)
 8002de0:	683b      	ldr	r3, [r7, #0]
 8002de2:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8002de6:	4962      	ldr	r1, [pc, #392]	; (8002f70 <EM_ProcessEvent+0x300>)
 8002de8:	683b      	ldr	r3, [r7, #0]
 8002dea:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
				for(int i = 0; i < SINE_DATA_SIZE; i++)
 8002dee:	683b      	ldr	r3, [r7, #0]
 8002df0:	3301      	adds	r3, #1
 8002df2:	603b      	str	r3, [r7, #0]
 8002df4:	683b      	ldr	r3, [r7, #0]
 8002df6:	2b77      	cmp	r3, #119	; 0x77
 8002df8:	ddf1      	ble.n	8002dde <EM_ProcessEvent+0x16e>
				}


				//FuncO_ApplyPreset_Fast(SINE_FUNC_MODE);
				eNewEvent = evIdle;
 8002dfa:	4b59      	ldr	r3, [pc, #356]	; (8002f60 <EM_ProcessEvent+0x2f0>)
 8002dfc:	2200      	movs	r2, #0
 8002dfe:	701a      	strb	r2, [r3, #0]

			}

			break;
 8002e00:	e0a0      	b.n	8002f44 <EM_ProcessEvent+0x2d4>

		case Func_Menu_State:

			if(eNewEvent == evEncoderSet)
 8002e02:	4b57      	ldr	r3, [pc, #348]	; (8002f60 <EM_ProcessEvent+0x2f0>)
 8002e04:	781b      	ldrb	r3, [r3, #0]
 8002e06:	2b05      	cmp	r3, #5
 8002e08:	d105      	bne.n	8002e16 <EM_ProcessEvent+0x1a6>
			{
				eNextState = _FuncMenuInputHandler();
 8002e0a:	f000 f8ed 	bl	8002fe8 <_FuncMenuInputHandler>
 8002e0e:	4603      	mov	r3, r0
 8002e10:	461a      	mov	r2, r3
 8002e12:	4b51      	ldr	r3, [pc, #324]	; (8002f58 <EM_ProcessEvent+0x2e8>)
 8002e14:	701a      	strb	r2, [r3, #0]
			}
			if(eNewEvent == evEncoderPush)
 8002e16:	4b52      	ldr	r3, [pc, #328]	; (8002f60 <EM_ProcessEvent+0x2f0>)
 8002e18:	781b      	ldrb	r3, [r3, #0]
 8002e1a:	2b06      	cmp	r3, #6
 8002e1c:	f040 8094 	bne.w	8002f48 <EM_ProcessEvent+0x2d8>
			{
				eNextState = _FuncMenuExitHandler();
 8002e20:	f000 f8f8 	bl	8003014 <_FuncMenuExitHandler>
 8002e24:	4603      	mov	r3, r0
 8002e26:	461a      	mov	r2, r3
 8002e28:	4b4b      	ldr	r3, [pc, #300]	; (8002f58 <EM_ProcessEvent+0x2e8>)
 8002e2a:	701a      	strb	r2, [r3, #0]
			}
			break;
 8002e2c:	e08c      	b.n	8002f48 <EM_ProcessEvent+0x2d8>

		case Gain_Menu_State:

			if(eNewEvent == evEncoderSet)
 8002e2e:	4b4c      	ldr	r3, [pc, #304]	; (8002f60 <EM_ProcessEvent+0x2f0>)
 8002e30:	781b      	ldrb	r3, [r3, #0]
 8002e32:	2b05      	cmp	r3, #5
 8002e34:	d105      	bne.n	8002e42 <EM_ProcessEvent+0x1d2>
			{
				eNextState = _GainMenuInputHandler();
 8002e36:	f000 f931 	bl	800309c <_GainMenuInputHandler>
 8002e3a:	4603      	mov	r3, r0
 8002e3c:	461a      	mov	r2, r3
 8002e3e:	4b46      	ldr	r3, [pc, #280]	; (8002f58 <EM_ProcessEvent+0x2e8>)
 8002e40:	701a      	strb	r2, [r3, #0]
			}
			if(eNewEvent == evEncoderPush)
 8002e42:	4b47      	ldr	r3, [pc, #284]	; (8002f60 <EM_ProcessEvent+0x2f0>)
 8002e44:	781b      	ldrb	r3, [r3, #0]
 8002e46:	2b06      	cmp	r3, #6
 8002e48:	f040 8094 	bne.w	8002f74 <EM_ProcessEvent+0x304>
			{
				eNextState = _GainMenuExitHandler();
 8002e4c:	f000 f93c 	bl	80030c8 <_GainMenuExitHandler>
 8002e50:	4603      	mov	r3, r0
 8002e52:	461a      	mov	r2, r3
 8002e54:	4b40      	ldr	r3, [pc, #256]	; (8002f58 <EM_ProcessEvent+0x2e8>)
 8002e56:	701a      	strb	r2, [r3, #0]
			}
			break;
 8002e58:	e08c      	b.n	8002f74 <EM_ProcessEvent+0x304>

			if(eNewEvent == evEncoderSet)
			{
//				eNextState = _FreqMainMenuSetHandler();
			}
			if(eNewEvent == evEncoderPush)
 8002e5a:	4b41      	ldr	r3, [pc, #260]	; (8002f60 <EM_ProcessEvent+0x2f0>)
 8002e5c:	781b      	ldrb	r3, [r3, #0]
 8002e5e:	2b06      	cmp	r3, #6
 8002e60:	d105      	bne.n	8002e6e <EM_ProcessEvent+0x1fe>
			{
				eNextState = _FreqMainMenuExitHandler();
 8002e62:	f000 f9ab 	bl	80031bc <_FreqMainMenuExitHandler>
 8002e66:	4603      	mov	r3, r0
 8002e68:	461a      	mov	r2, r3
 8002e6a:	4b3b      	ldr	r3, [pc, #236]	; (8002f58 <EM_ProcessEvent+0x2e8>)
 8002e6c:	701a      	strb	r2, [r3, #0]
			}
			if(eNewEvent == evBlueBtn)
 8002e6e:	4b3c      	ldr	r3, [pc, #240]	; (8002f60 <EM_ProcessEvent+0x2f0>)
 8002e70:	781b      	ldrb	r3, [r3, #0]
 8002e72:	2b01      	cmp	r3, #1
 8002e74:	d105      	bne.n	8002e82 <EM_ProcessEvent+0x212>
			{
//				FreqO_ApplyPreset(FPRESET_1HZ);
				eNextState = _FreqPresetMenuEntryHandler();
 8002e76:	f000 f9bb 	bl	80031f0 <_FreqPresetMenuEntryHandler>
 8002e7a:	4603      	mov	r3, r0
 8002e7c:	461a      	mov	r2, r3
 8002e7e:	4b36      	ldr	r3, [pc, #216]	; (8002f58 <EM_ProcessEvent+0x2e8>)
 8002e80:	701a      	strb	r2, [r3, #0]
			}
			if(eNewEvent == evGreenBtn)
 8002e82:	4b37      	ldr	r3, [pc, #220]	; (8002f60 <EM_ProcessEvent+0x2f0>)
 8002e84:	781b      	ldrb	r3, [r3, #0]
 8002e86:	2b02      	cmp	r3, #2
 8002e88:	d105      	bne.n	8002e96 <EM_ProcessEvent+0x226>
			{
//				FreqO_ApplyPreset(FPRESET_100HZ);
				eNextState = _FreqAdjustMenuEntryHandler();
 8002e8a:	f000 fa09 	bl	80032a0 <_FreqAdjustMenuEntryHandler>
 8002e8e:	4603      	mov	r3, r0
 8002e90:	461a      	mov	r2, r3
 8002e92:	4b31      	ldr	r3, [pc, #196]	; (8002f58 <EM_ProcessEvent+0x2e8>)
 8002e94:	701a      	strb	r2, [r3, #0]
			}
			if(eNewEvent == evYellowBtn)
 8002e96:	4b32      	ldr	r3, [pc, #200]	; (8002f60 <EM_ProcessEvent+0x2f0>)
 8002e98:	781b      	ldrb	r3, [r3, #0]
 8002e9a:	2b03      	cmp	r3, #3
 8002e9c:	d16c      	bne.n	8002f78 <EM_ProcessEvent+0x308>
			{
//				FreqO_ApplyPreset(FPRESET_1KHZ);
				eNextState = _FreqSweepMenuEntryHandler();
 8002e9e:	f000 fa43 	bl	8003328 <_FreqSweepMenuEntryHandler>
 8002ea2:	4603      	mov	r3, r0
 8002ea4:	461a      	mov	r2, r3
 8002ea6:	4b2c      	ldr	r3, [pc, #176]	; (8002f58 <EM_ProcessEvent+0x2e8>)
 8002ea8:	701a      	strb	r2, [r3, #0]
			}
			if(eNewEvent == evRedBtn)
			{
				// No menu action
			}
			break;
 8002eaa:	e065      	b.n	8002f78 <EM_ProcessEvent+0x308>

		case Freq_Preset_Menu_State:
			if(eNewEvent == evEncoderSet)
 8002eac:	4b2c      	ldr	r3, [pc, #176]	; (8002f60 <EM_ProcessEvent+0x2f0>)
 8002eae:	781b      	ldrb	r3, [r3, #0]
 8002eb0:	2b05      	cmp	r3, #5
 8002eb2:	d105      	bne.n	8002ec0 <EM_ProcessEvent+0x250>
			{
				eNextState = _FreqPresetMenuInputHandler();
 8002eb4:	f000 f9cc 	bl	8003250 <_FreqPresetMenuInputHandler>
 8002eb8:	4603      	mov	r3, r0
 8002eba:	461a      	mov	r2, r3
 8002ebc:	4b26      	ldr	r3, [pc, #152]	; (8002f58 <EM_ProcessEvent+0x2e8>)
 8002ebe:	701a      	strb	r2, [r3, #0]
			}
			if(eNewEvent == evEncoderPush)
 8002ec0:	4b27      	ldr	r3, [pc, #156]	; (8002f60 <EM_ProcessEvent+0x2f0>)
 8002ec2:	781b      	ldrb	r3, [r3, #0]
 8002ec4:	2b06      	cmp	r3, #6
 8002ec6:	d159      	bne.n	8002f7c <EM_ProcessEvent+0x30c>
			{
				eNextState = _FreqPresetMenuExitHandler();
 8002ec8:	f000 f9d8 	bl	800327c <_FreqPresetMenuExitHandler>
 8002ecc:	4603      	mov	r3, r0
 8002ece:	461a      	mov	r2, r3
 8002ed0:	4b21      	ldr	r3, [pc, #132]	; (8002f58 <EM_ProcessEvent+0x2e8>)
 8002ed2:	701a      	strb	r2, [r3, #0]
			}
			break;
 8002ed4:	e052      	b.n	8002f7c <EM_ProcessEvent+0x30c>

		case Freq_Adjust_Menu_State:
			if(eNewEvent == evEncoderSet)
 8002ed6:	4b22      	ldr	r3, [pc, #136]	; (8002f60 <EM_ProcessEvent+0x2f0>)
 8002ed8:	781b      	ldrb	r3, [r3, #0]
 8002eda:	2b05      	cmp	r3, #5
 8002edc:	d105      	bne.n	8002eea <EM_ProcessEvent+0x27a>
			{
				eNextState = _FreqAdjustMenuInputHandler();
 8002ede:	f000 f9ff 	bl	80032e0 <_FreqAdjustMenuInputHandler>
 8002ee2:	4603      	mov	r3, r0
 8002ee4:	461a      	mov	r2, r3
 8002ee6:	4b1c      	ldr	r3, [pc, #112]	; (8002f58 <EM_ProcessEvent+0x2e8>)
 8002ee8:	701a      	strb	r2, [r3, #0]
			}
			if(eNewEvent == evEncoderPush)
 8002eea:	4b1d      	ldr	r3, [pc, #116]	; (8002f60 <EM_ProcessEvent+0x2f0>)
 8002eec:	781b      	ldrb	r3, [r3, #0]
 8002eee:	2b06      	cmp	r3, #6
 8002ef0:	d146      	bne.n	8002f80 <EM_ProcessEvent+0x310>
			{
				eNextState = _FreqAdjustMenuExitHandler();
 8002ef2:	f000 fa07 	bl	8003304 <_FreqAdjustMenuExitHandler>
 8002ef6:	4603      	mov	r3, r0
 8002ef8:	461a      	mov	r2, r3
 8002efa:	4b17      	ldr	r3, [pc, #92]	; (8002f58 <EM_ProcessEvent+0x2e8>)
 8002efc:	701a      	strb	r2, [r3, #0]
			}
			break;
 8002efe:	e03f      	b.n	8002f80 <EM_ProcessEvent+0x310>
		case Freq_Sweep_Menu_State:
			if(eNewEvent == evEncoderSet)
			{
//				eNextState = _FreqMainMenuSetHandler();
			}
			if(eNewEvent == evEncoderPush)
 8002f00:	4b17      	ldr	r3, [pc, #92]	; (8002f60 <EM_ProcessEvent+0x2f0>)
 8002f02:	781b      	ldrb	r3, [r3, #0]
 8002f04:	2b06      	cmp	r3, #6
 8002f06:	d13d      	bne.n	8002f84 <EM_ProcessEvent+0x314>
			{
				eNextState = _FreqSweepMenuExitHandler();
 8002f08:	f000 fa2a 	bl	8003360 <_FreqSweepMenuExitHandler>
 8002f0c:	4603      	mov	r3, r0
 8002f0e:	461a      	mov	r2, r3
 8002f10:	4b11      	ldr	r3, [pc, #68]	; (8002f58 <EM_ProcessEvent+0x2e8>)
 8002f12:	701a      	strb	r2, [r3, #0]
			}
			break;
 8002f14:	e036      	b.n	8002f84 <EM_ProcessEvent+0x314>

		case Bias_Menu_State:
			if(eNewEvent == evEncoderSet)
 8002f16:	4b12      	ldr	r3, [pc, #72]	; (8002f60 <EM_ProcessEvent+0x2f0>)
 8002f18:	781b      	ldrb	r3, [r3, #0]
 8002f1a:	2b05      	cmp	r3, #5
 8002f1c:	d105      	bne.n	8002f2a <EM_ProcessEvent+0x2ba>
			{
				eNextState = _BiasMenuInputHandler();
 8002f1e:	f000 f90f 	bl	8003140 <_BiasMenuInputHandler>
 8002f22:	4603      	mov	r3, r0
 8002f24:	461a      	mov	r2, r3
 8002f26:	4b0c      	ldr	r3, [pc, #48]	; (8002f58 <EM_ProcessEvent+0x2e8>)
 8002f28:	701a      	strb	r2, [r3, #0]
			}
			if(eNewEvent == evEncoderPush)
 8002f2a:	4b0d      	ldr	r3, [pc, #52]	; (8002f60 <EM_ProcessEvent+0x2f0>)
 8002f2c:	781b      	ldrb	r3, [r3, #0]
 8002f2e:	2b06      	cmp	r3, #6
 8002f30:	d12a      	bne.n	8002f88 <EM_ProcessEvent+0x318>
			{
				eNextState = _BiasMenuExitHandler();
 8002f32:	f000 f91b 	bl	800316c <_BiasMenuExitHandler>
 8002f36:	4603      	mov	r3, r0
 8002f38:	461a      	mov	r2, r3
 8002f3a:	4b07      	ldr	r3, [pc, #28]	; (8002f58 <EM_ProcessEvent+0x2e8>)
 8002f3c:	701a      	strb	r2, [r3, #0]
			}

			break;
 8002f3e:	e023      	b.n	8002f88 <EM_ProcessEvent+0x318>

		default:
			break;
 8002f40:	bf00      	nop
 8002f42:	e022      	b.n	8002f8a <EM_ProcessEvent+0x31a>
			break;
 8002f44:	bf00      	nop
 8002f46:	e020      	b.n	8002f8a <EM_ProcessEvent+0x31a>
			break;
 8002f48:	bf00      	nop
 8002f4a:	e01e      	b.n	8002f8a <EM_ProcessEvent+0x31a>
 8002f4c:	f3af 8000 	nop.w
 8002f50:	9999999a 	.word	0x9999999a
 8002f54:	3fe99999 	.word	0x3fe99999
 8002f58:	20001651 	.word	0x20001651
 8002f5c:	40012c00 	.word	0x40012c00
 8002f60:	20001652 	.word	0x20001652
 8002f64:	200001b0 	.word	0x200001b0
 8002f68:	20001854 	.word	0x20001854
 8002f6c:	44480000 	.word	0x44480000
 8002f70:	20001674 	.word	0x20001674
			break;
 8002f74:	bf00      	nop
 8002f76:	e008      	b.n	8002f8a <EM_ProcessEvent+0x31a>
			break;
 8002f78:	bf00      	nop
 8002f7a:	e006      	b.n	8002f8a <EM_ProcessEvent+0x31a>
			break;
 8002f7c:	bf00      	nop
 8002f7e:	e004      	b.n	8002f8a <EM_ProcessEvent+0x31a>
			break;
 8002f80:	bf00      	nop
 8002f82:	e002      	b.n	8002f8a <EM_ProcessEvent+0x31a>
			break;
 8002f84:	bf00      	nop
 8002f86:	e000      	b.n	8002f8a <EM_ProcessEvent+0x31a>
			break;
 8002f88:	bf00      	nop
	}

}
 8002f8a:	bf00      	nop
 8002f8c:	3710      	adds	r7, #16
 8002f8e:	46bd      	mov	sp, r7
 8002f90:	bdb0      	pop	{r4, r5, r7, pc}
 8002f92:	bf00      	nop

08002f94 <_FuncMenuEntryHandler>:
 *	@param None
 *	@retval None
 *
 */
eSystemState _FuncMenuEntryHandler(void)
{
 8002f94:	b580      	push	{r7, lr}
 8002f96:	b082      	sub	sp, #8
 8002f98:	af00      	add	r7, sp, #0
#ifdef EM_SWV_DEBUG
	printf("FunctionMenu Event captured\n");
 8002f9a:	4810      	ldr	r0, [pc, #64]	; (8002fdc <_FuncMenuEntryHandler+0x48>)
 8002f9c:	f009 fd60 	bl	800ca60 <puts>
#endif

	_RefreshDisplay();
 8002fa0:	f000 fa00 	bl	80033a4 <_RefreshDisplay>

	DM_ShowFuncSelectMenu(ENABLE_FUNCMENU);
 8002fa4:	2001      	movs	r0, #1
 8002fa6:	f7fe f829 	bl	8000ffc <DM_ShowFuncSelectMenu>

	Func_Preset_Encoder_Pos_t *pFuncPresetTmp =  FuncO_GetFPresetObject();
 8002faa:	f000 fd73 	bl	8003a94 <FuncO_GetFPresetObject>
 8002fae:	6078      	str	r0, [r7, #4]
	if(pFuncPresetTmp)
 8002fb0:	687b      	ldr	r3, [r7, #4]
 8002fb2:	2b00      	cmp	r3, #0
 8002fb4:	d00a      	beq.n	8002fcc <_FuncMenuEntryHandler+0x38>
	{
		ENCODER_TIMER->CNT = pFuncPresetTmp->epos;
 8002fb6:	687b      	ldr	r3, [r7, #4]
 8002fb8:	785a      	ldrb	r2, [r3, #1]
 8002fba:	4b09      	ldr	r3, [pc, #36]	; (8002fe0 <_FuncMenuEntryHandler+0x4c>)
 8002fbc:	625a      	str	r2, [r3, #36]	; 0x24
		ENCODER_TIMER->ARR = FuncO_GetFuncPresetEncoderRange();
 8002fbe:	f000 fd75 	bl	8003aac <FuncO_GetFuncPresetEncoderRange>
 8002fc2:	4603      	mov	r3, r0
 8002fc4:	461a      	mov	r2, r3
 8002fc6:	4b06      	ldr	r3, [pc, #24]	; (8002fe0 <_FuncMenuEntryHandler+0x4c>)
 8002fc8:	62da      	str	r2, [r3, #44]	; 0x2c
 8002fca:	e002      	b.n	8002fd2 <_FuncMenuEntryHandler+0x3e>
	}
	else
	{
		DM_SetErrorDebugMsg("_FuncMenuEntryHandler: pFuncPresetTmp null pointer");
 8002fcc:	4805      	ldr	r0, [pc, #20]	; (8002fe4 <_FuncMenuEntryHandler+0x50>)
 8002fce:	f7fe fb39 	bl	8001644 <DM_SetErrorDebugMsg>
	}


	return Func_Menu_State;
 8002fd2:	2301      	movs	r3, #1
}
 8002fd4:	4618      	mov	r0, r3
 8002fd6:	3708      	adds	r7, #8
 8002fd8:	46bd      	mov	sp, r7
 8002fda:	bd80      	pop	{r7, pc}
 8002fdc:	0800ebd8 	.word	0x0800ebd8
 8002fe0:	40012c00 	.word	0x40012c00
 8002fe4:	0800ebf4 	.word	0x0800ebf4

08002fe8 <_FuncMenuInputHandler>:
 *	@param None
 *	@retval None
 *
 */
eSystemState _FuncMenuInputHandler(void)
{
 8002fe8:	b580      	push	{r7, lr}
 8002fea:	af00      	add	r7, sp, #0
#ifdef EM_SWV_DEBUG
	printf("FunctionAdjust Event captured\n");
 8002fec:	4807      	ldr	r0, [pc, #28]	; (800300c <_FuncMenuInputHandler+0x24>)
 8002fee:	f009 fd37 	bl	800ca60 <puts>
#endif


	FuncO_ModifyOutput(SM_GetEncoderValue(ENCODER_REVERSE));
 8002ff2:	2001      	movs	r0, #1
 8002ff4:	f000 feba 	bl	8003d6c <SM_GetEncoderValue>
 8002ff8:	4603      	mov	r3, r0
 8002ffa:	4618      	mov	r0, r3
 8002ffc:	f000 fc5e 	bl	80038bc <FuncO_ModifyOutput>
	eNewEvent = evBlueBtn;
 8003000:	4b03      	ldr	r3, [pc, #12]	; (8003010 <_FuncMenuInputHandler+0x28>)
 8003002:	2201      	movs	r2, #1
 8003004:	701a      	strb	r2, [r3, #0]
	return Func_Menu_State;
 8003006:	2301      	movs	r3, #1
}
 8003008:	4618      	mov	r0, r3
 800300a:	bd80      	pop	{r7, pc}
 800300c:	0800ec28 	.word	0x0800ec28
 8003010:	20001652 	.word	0x20001652

08003014 <_FuncMenuExitHandler>:
 *	@param None
 *	@retval None
 *
 */
eSystemState _FuncMenuExitHandler()
{
 8003014:	b580      	push	{r7, lr}
 8003016:	af00      	add	r7, sp, #0
#ifdef EM_SWV_DEBUG
	printf("ExitFuncMenu Event captured\n");
 8003018:	4808      	ldr	r0, [pc, #32]	; (800303c <_FuncMenuExitHandler+0x28>)
 800301a:	f009 fd21 	bl	800ca60 <puts>
#endif

	// disable the menu

	DM_ShowFuncSelectMenu(DISABLE_FUNCMENU);
 800301e:	2000      	movs	r0, #0
 8003020:	f7fd ffec 	bl	8000ffc <DM_ShowFuncSelectMenu>

	// reset the encoder range

	ENCODER_TIMER->ARR = 1024;
 8003024:	4b06      	ldr	r3, [pc, #24]	; (8003040 <_FuncMenuExitHandler+0x2c>)
 8003026:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800302a:	62da      	str	r2, [r3, #44]	; 0x2c

	_RefreshDisplay();
 800302c:	f000 f9ba 	bl	80033a4 <_RefreshDisplay>

	eNewEvent = evIdle;
 8003030:	4b04      	ldr	r3, [pc, #16]	; (8003044 <_FuncMenuExitHandler+0x30>)
 8003032:	2200      	movs	r2, #0
 8003034:	701a      	strb	r2, [r3, #0]
	return Idle_State;
 8003036:	2300      	movs	r3, #0
}
 8003038:	4618      	mov	r0, r3
 800303a:	bd80      	pop	{r7, pc}
 800303c:	0800ec48 	.word	0x0800ec48
 8003040:	40012c00 	.word	0x40012c00
 8003044:	20001652 	.word	0x20001652

08003048 <_GainMenuEntryHandler>:
 *	@param None
 *	@retval None
 *
 */
eSystemState _GainMenuEntryHandler()
{
 8003048:	b580      	push	{r7, lr}
 800304a:	b082      	sub	sp, #8
 800304c:	af00      	add	r7, sp, #0
#ifdef EM_SWV_DEBUG
	printf("GainMenu Event captured\n");
 800304e:	4810      	ldr	r0, [pc, #64]	; (8003090 <_GainMenuEntryHandler+0x48>)
 8003050:	f009 fd06 	bl	800ca60 <puts>
#endif

	_RefreshDisplay();
 8003054:	f000 f9a6 	bl	80033a4 <_RefreshDisplay>

	DM_ShowGainSelectMenu(ENABLE_GAINMENU);
 8003058:	2001      	movs	r0, #1
 800305a:	f7fe f9bb 	bl	80013d4 <DM_ShowGainSelectMenu>

	Gain_Preset_Encoder_Pos_t *pGainPresetTmp =  GO_GetGPresetObject();
 800305e:	f000 fe6d 	bl	8003d3c <GO_GetGPresetObject>
 8003062:	6078      	str	r0, [r7, #4]
	if(pGainPresetTmp)
 8003064:	687b      	ldr	r3, [r7, #4]
 8003066:	2b00      	cmp	r3, #0
 8003068:	d00a      	beq.n	8003080 <_GainMenuEntryHandler+0x38>
	{
		ENCODER_TIMER->CNT = pGainPresetTmp->epos;
 800306a:	687b      	ldr	r3, [r7, #4]
 800306c:	789a      	ldrb	r2, [r3, #2]
 800306e:	4b09      	ldr	r3, [pc, #36]	; (8003094 <_GainMenuEntryHandler+0x4c>)
 8003070:	625a      	str	r2, [r3, #36]	; 0x24
		ENCODER_TIMER->ARR = GO_GetGainPresetEncoderRange();
 8003072:	f000 fe6f 	bl	8003d54 <GO_GetGainPresetEncoderRange>
 8003076:	4603      	mov	r3, r0
 8003078:	461a      	mov	r2, r3
 800307a:	4b06      	ldr	r3, [pc, #24]	; (8003094 <_GainMenuEntryHandler+0x4c>)
 800307c:	62da      	str	r2, [r3, #44]	; 0x2c
 800307e:	e002      	b.n	8003086 <_GainMenuEntryHandler+0x3e>
	}
	else
	{
		DM_SetErrorDebugMsg("_GainMenuEntryHandler: pGainPresetTmp null pointer");
 8003080:	4805      	ldr	r0, [pc, #20]	; (8003098 <_GainMenuEntryHandler+0x50>)
 8003082:	f7fe fadf 	bl	8001644 <DM_SetErrorDebugMsg>
	}


	return Gain_Menu_State;
 8003086:	2302      	movs	r3, #2
}
 8003088:	4618      	mov	r0, r3
 800308a:	3708      	adds	r7, #8
 800308c:	46bd      	mov	sp, r7
 800308e:	bd80      	pop	{r7, pc}
 8003090:	0800ec64 	.word	0x0800ec64
 8003094:	40012c00 	.word	0x40012c00
 8003098:	0800ec7c 	.word	0x0800ec7c

0800309c <_GainMenuInputHandler>:
 *	@param None
 *	@retval None
 *
 */
eSystemState _GainMenuInputHandler()
{
 800309c:	b580      	push	{r7, lr}
 800309e:	af00      	add	r7, sp, #0
#ifdef EM_SWV_DEBUG
	printf("GainSet Event captured\n");
 80030a0:	4807      	ldr	r0, [pc, #28]	; (80030c0 <_GainMenuInputHandler+0x24>)
 80030a2:	f009 fcdd 	bl	800ca60 <puts>
#endif

	GO_ModifyOutput(SM_GetEncoderValue(ENCODER_REVERSE));
 80030a6:	2001      	movs	r0, #1
 80030a8:	f000 fe60 	bl	8003d6c <SM_GetEncoderValue>
 80030ac:	4603      	mov	r3, r0
 80030ae:	4618      	mov	r0, r3
 80030b0:	f000 fd08 	bl	8003ac4 <GO_ModifyOutput>

	eNewEvent = evYellowBtn;
 80030b4:	4b03      	ldr	r3, [pc, #12]	; (80030c4 <_GainMenuInputHandler+0x28>)
 80030b6:	2203      	movs	r2, #3
 80030b8:	701a      	strb	r2, [r3, #0]
	return Gain_Menu_State;
 80030ba:	2302      	movs	r3, #2
}
 80030bc:	4618      	mov	r0, r3
 80030be:	bd80      	pop	{r7, pc}
 80030c0:	0800ecb0 	.word	0x0800ecb0
 80030c4:	20001652 	.word	0x20001652

080030c8 <_GainMenuExitHandler>:
 *	@param None
 *	@retval None
 *
 */
eSystemState _GainMenuExitHandler()
{
 80030c8:	b580      	push	{r7, lr}
 80030ca:	af00      	add	r7, sp, #0
#ifdef EM_SWV_DEBUG
	printf("ExitGainMenu Event captured\n");
 80030cc:	4809      	ldr	r0, [pc, #36]	; (80030f4 <_GainMenuExitHandler+0x2c>)
 80030ce:	f009 fcc7 	bl	800ca60 <puts>
#endif


	// disable the menu
	DM_ShowGainSelectMenu(DISABLE_GAINMENU);
 80030d2:	2000      	movs	r0, #0
 80030d4:	f7fe f97e 	bl	80013d4 <DM_ShowGainSelectMenu>

	// reset the encoder range
	ENCODER_TIMER->CNT = 0;
 80030d8:	4b07      	ldr	r3, [pc, #28]	; (80030f8 <_GainMenuExitHandler+0x30>)
 80030da:	2200      	movs	r2, #0
 80030dc:	625a      	str	r2, [r3, #36]	; 0x24
	ENCODER_TIMER->ARR = 12;
 80030de:	4b06      	ldr	r3, [pc, #24]	; (80030f8 <_GainMenuExitHandler+0x30>)
 80030e0:	220c      	movs	r2, #12
 80030e2:	62da      	str	r2, [r3, #44]	; 0x2c

	_RefreshDisplay();
 80030e4:	f000 f95e 	bl	80033a4 <_RefreshDisplay>

	eNewEvent = evIdle;
 80030e8:	4b04      	ldr	r3, [pc, #16]	; (80030fc <_GainMenuExitHandler+0x34>)
 80030ea:	2200      	movs	r2, #0
 80030ec:	701a      	strb	r2, [r3, #0]
	return Idle_State;
 80030ee:	2300      	movs	r3, #0
}
 80030f0:	4618      	mov	r0, r3
 80030f2:	bd80      	pop	{r7, pc}
 80030f4:	0800ecc8 	.word	0x0800ecc8
 80030f8:	40012c00 	.word	0x40012c00
 80030fc:	20001652 	.word	0x20001652

08003100 <_BiasMenuEntryHandler>:
 *	@param None
 *	@retval None
 *
 */
eSystemState _BiasMenuEntryHandler()
{
 8003100:	b580      	push	{r7, lr}
 8003102:	af00      	add	r7, sp, #0
#ifdef EM_SWV_DEBUG
	printf("BiasMenu Event captured\n");
 8003104:	480b      	ldr	r0, [pc, #44]	; (8003134 <_BiasMenuEntryHandler+0x34>)
 8003106:	f009 fcab 	bl	800ca60 <puts>
#endif

	_RefreshDisplay();
 800310a:	f000 f94b 	bl	80033a4 <_RefreshDisplay>

	DM_ShowBiasSelectMenu(ENABLE_BIASMENU);
 800310e:	2001      	movs	r0, #1
 8003110:	f7fe f994 	bl	800143c <DM_ShowBiasSelectMenu>

	ENCODER_TIMER->ARR = BIAS_MAX;
 8003114:	4b08      	ldr	r3, [pc, #32]	; (8003138 <_BiasMenuEntryHandler+0x38>)
 8003116:	f44f 7248 	mov.w	r2, #800	; 0x320
 800311a:	62da      	str	r2, [r3, #44]	; 0x2c
	ENCODER_TIMER->CNT = BO_GetDcBiasEncoderValue();
 800311c:	f000 f95c 	bl	80033d8 <BO_GetDcBiasEncoderValue>
 8003120:	4603      	mov	r3, r0
 8003122:	461a      	mov	r2, r3
 8003124:	4b04      	ldr	r3, [pc, #16]	; (8003138 <_BiasMenuEntryHandler+0x38>)
 8003126:	625a      	str	r2, [r3, #36]	; 0x24

	eNewEvent = evIdle;
 8003128:	4b04      	ldr	r3, [pc, #16]	; (800313c <_BiasMenuEntryHandler+0x3c>)
 800312a:	2200      	movs	r2, #0
 800312c:	701a      	strb	r2, [r3, #0]
	return Bias_Menu_State;
 800312e:	2307      	movs	r3, #7
}
 8003130:	4618      	mov	r0, r3
 8003132:	bd80      	pop	{r7, pc}
 8003134:	0800ece4 	.word	0x0800ece4
 8003138:	40012c00 	.word	0x40012c00
 800313c:	20001652 	.word	0x20001652

08003140 <_BiasMenuInputHandler>:
 *	@param None
 *	@retval None
 *
 */
eSystemState _BiasMenuInputHandler()
{
 8003140:	b580      	push	{r7, lr}
 8003142:	af00      	add	r7, sp, #0
#ifdef EM_SWV_DEBUG
	printf("BiasSet Event captured\n");
 8003144:	4807      	ldr	r0, [pc, #28]	; (8003164 <_BiasMenuInputHandler+0x24>)
 8003146:	f009 fc8b 	bl	800ca60 <puts>
#endif

	BO_ModifyOutput(SM_GetEncoderValue(ENCODER_REVERSE));
 800314a:	2001      	movs	r0, #1
 800314c:	f000 fe0e 	bl	8003d6c <SM_GetEncoderValue>
 8003150:	4603      	mov	r3, r0
 8003152:	4618      	mov	r0, r3
 8003154:	f000 f94c 	bl	80033f0 <BO_ModifyOutput>

	eNewEvent = evIdle;
 8003158:	4b03      	ldr	r3, [pc, #12]	; (8003168 <_BiasMenuInputHandler+0x28>)
 800315a:	2200      	movs	r2, #0
 800315c:	701a      	strb	r2, [r3, #0]
	return Bias_Menu_State;
 800315e:	2307      	movs	r3, #7
}
 8003160:	4618      	mov	r0, r3
 8003162:	bd80      	pop	{r7, pc}
 8003164:	0800ecfc 	.word	0x0800ecfc
 8003168:	20001652 	.word	0x20001652

0800316c <_BiasMenuExitHandler>:
 *	@param None
 *	@retval None
 *
 */
eSystemState _BiasMenuExitHandler()
{
 800316c:	b580      	push	{r7, lr}
 800316e:	af00      	add	r7, sp, #0
#ifdef EM_SWV_DEBUG
	printf("ExitBiasMenu Event captured\n");
 8003170:	4806      	ldr	r0, [pc, #24]	; (800318c <_BiasMenuExitHandler+0x20>)
 8003172:	f009 fc75 	bl	800ca60 <puts>
#endif


	// disable the menu
	DM_ShowBiasSelectMenu(DISABLE_BIASMENU);
 8003176:	2000      	movs	r0, #0
 8003178:	f7fe f960 	bl	800143c <DM_ShowBiasSelectMenu>

	// reset the encoder range

	//ENCODER_TIMER->ARR = 1024;

	_RefreshDisplay();
 800317c:	f000 f912 	bl	80033a4 <_RefreshDisplay>

	eNewEvent = evIdle;
 8003180:	4b03      	ldr	r3, [pc, #12]	; (8003190 <_BiasMenuExitHandler+0x24>)
 8003182:	2200      	movs	r2, #0
 8003184:	701a      	strb	r2, [r3, #0]
	return Idle_State;
 8003186:	2300      	movs	r3, #0
}
 8003188:	4618      	mov	r0, r3
 800318a:	bd80      	pop	{r7, pc}
 800318c:	0800ed14 	.word	0x0800ed14
 8003190:	20001652 	.word	0x20001652

08003194 <_FreqMainMenuEntryHandler>:
 *	@param None
 *	@retval None
 *
 */
eSystemState _FreqMainMenuEntryHandler()
{
 8003194:	b580      	push	{r7, lr}
 8003196:	af00      	add	r7, sp, #0
#ifdef EM_SWV_DEBUG
	printf("FreqMenu Event captured\n");
 8003198:	4806      	ldr	r0, [pc, #24]	; (80031b4 <_FreqMainMenuEntryHandler+0x20>)
 800319a:	f009 fc61 	bl	800ca60 <puts>
#endif

	_RefreshDisplay();
 800319e:	f000 f901 	bl	80033a4 <_RefreshDisplay>

	DM_ShowFreqMenu(ENABLE_FREQ_MAIN_MENU);
 80031a2:	2001      	movs	r0, #1
 80031a4:	f7fe f93a 	bl	800141c <DM_ShowFreqMenu>

	// stay in this state
	eNewEvent = evIdle;
 80031a8:	4b03      	ldr	r3, [pc, #12]	; (80031b8 <_FreqMainMenuEntryHandler+0x24>)
 80031aa:	2200      	movs	r2, #0
 80031ac:	701a      	strb	r2, [r3, #0]
	return Freq_Main_Menu_State;
 80031ae:	2303      	movs	r3, #3
}
 80031b0:	4618      	mov	r0, r3
 80031b2:	bd80      	pop	{r7, pc}
 80031b4:	0800ed30 	.word	0x0800ed30
 80031b8:	20001652 	.word	0x20001652

080031bc <_FreqMainMenuExitHandler>:
 *	@param None
 *	@retval None
 *
 */
eSystemState _FreqMainMenuExitHandler()
{
 80031bc:	b580      	push	{r7, lr}
 80031be:	af00      	add	r7, sp, #0
#ifdef EM_SWV_DEBUG
	printf("Exit Freq Main Menu Event captured\n");
 80031c0:	4808      	ldr	r0, [pc, #32]	; (80031e4 <_FreqMainMenuExitHandler+0x28>)
 80031c2:	f009 fc4d 	bl	800ca60 <puts>
#endif


	// disable the menu
	DM_ShowFreqMenu(DISABLE_FREQ_MENU);
 80031c6:	2000      	movs	r0, #0
 80031c8:	f7fe f928 	bl	800141c <DM_ShowFreqMenu>

	// reset the encoder range

	ENCODER_TIMER->ARR = 1024;
 80031cc:	4b06      	ldr	r3, [pc, #24]	; (80031e8 <_FreqMainMenuExitHandler+0x2c>)
 80031ce:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80031d2:	62da      	str	r2, [r3, #44]	; 0x2c

	_RefreshDisplay();
 80031d4:	f000 f8e6 	bl	80033a4 <_RefreshDisplay>

	eNewEvent = evIdle;
 80031d8:	4b04      	ldr	r3, [pc, #16]	; (80031ec <_FreqMainMenuExitHandler+0x30>)
 80031da:	2200      	movs	r2, #0
 80031dc:	701a      	strb	r2, [r3, #0]
	return Idle_State;
 80031de:	2300      	movs	r3, #0
}
 80031e0:	4618      	mov	r0, r3
 80031e2:	bd80      	pop	{r7, pc}
 80031e4:	0800ed60 	.word	0x0800ed60
 80031e8:	40012c00 	.word	0x40012c00
 80031ec:	20001652 	.word	0x20001652

080031f0 <_FreqPresetMenuEntryHandler>:
 *	@param None
 *	@retval None
 *
 */
eSystemState _FreqPresetMenuEntryHandler()
{
 80031f0:	b580      	push	{r7, lr}
 80031f2:	b082      	sub	sp, #8
 80031f4:	af00      	add	r7, sp, #0
#ifdef EM_SWV_DEBUG
	printf("Freq Preset Menu Entry Event captured\n");
 80031f6:	4812      	ldr	r0, [pc, #72]	; (8003240 <_FreqPresetMenuEntryHandler+0x50>)
 80031f8:	f009 fc32 	bl	800ca60 <puts>
#endif

	_RefreshDisplay();
 80031fc:	f000 f8d2 	bl	80033a4 <_RefreshDisplay>

	DM_ShowFreqMenu(ENABLE_FREQ_PRESET_MENU);
 8003200:	2002      	movs	r0, #2
 8003202:	f7fe f90b 	bl	800141c <DM_ShowFreqMenu>

	Freq_Preset_Encoder_Pos_t *pFreqPresetTmp =  FreqO_GetFPresetObject();
 8003206:	f000 faf1 	bl	80037ec <FreqO_GetFPresetObject>
 800320a:	6078      	str	r0, [r7, #4]
	if(pFreqPresetTmp)
 800320c:	687b      	ldr	r3, [r7, #4]
 800320e:	2b00      	cmp	r3, #0
 8003210:	d00a      	beq.n	8003228 <_FreqPresetMenuEntryHandler+0x38>
	{
		ENCODER_TIMER->CNT = pFreqPresetTmp->epos;
 8003212:	687b      	ldr	r3, [r7, #4]
 8003214:	791a      	ldrb	r2, [r3, #4]
 8003216:	4b0b      	ldr	r3, [pc, #44]	; (8003244 <_FreqPresetMenuEntryHandler+0x54>)
 8003218:	625a      	str	r2, [r3, #36]	; 0x24
		ENCODER_TIMER->ARR = FreqO_GetFreqPresetEncoderRange();
 800321a:	f000 fb19 	bl	8003850 <FreqO_GetFreqPresetEncoderRange>
 800321e:	4603      	mov	r3, r0
 8003220:	461a      	mov	r2, r3
 8003222:	4b08      	ldr	r3, [pc, #32]	; (8003244 <_FreqPresetMenuEntryHandler+0x54>)
 8003224:	62da      	str	r2, [r3, #44]	; 0x2c
 8003226:	e002      	b.n	800322e <_FreqPresetMenuEntryHandler+0x3e>
	}
	else
	{
		DM_SetErrorDebugMsg("_FreqPresetMenuEntryHandler: pFreqPresetTmp null pointer");
 8003228:	4807      	ldr	r0, [pc, #28]	; (8003248 <_FreqPresetMenuEntryHandler+0x58>)
 800322a:	f7fe fa0b 	bl	8001644 <DM_SetErrorDebugMsg>
	}


	// stay in this state
	eNewEvent = evIdle;
 800322e:	4b07      	ldr	r3, [pc, #28]	; (800324c <_FreqPresetMenuEntryHandler+0x5c>)
 8003230:	2200      	movs	r2, #0
 8003232:	701a      	strb	r2, [r3, #0]
	return Freq_Preset_Menu_State;
 8003234:	2304      	movs	r3, #4
}
 8003236:	4618      	mov	r0, r3
 8003238:	3708      	adds	r7, #8
 800323a:	46bd      	mov	sp, r7
 800323c:	bd80      	pop	{r7, pc}
 800323e:	bf00      	nop
 8003240:	0800ed84 	.word	0x0800ed84
 8003244:	40012c00 	.word	0x40012c00
 8003248:	0800edac 	.word	0x0800edac
 800324c:	20001652 	.word	0x20001652

08003250 <_FreqPresetMenuInputHandler>:
 *	@param None
 *	@retval None
 *
 */
eSystemState _FreqPresetMenuInputHandler()
{
 8003250:	b580      	push	{r7, lr}
 8003252:	af00      	add	r7, sp, #0
#ifdef EM_SWV_DEBUG
	printf("FreqSet Event captured\n");
 8003254:	4807      	ldr	r0, [pc, #28]	; (8003274 <_FreqPresetMenuInputHandler+0x24>)
 8003256:	f009 fc03 	bl	800ca60 <puts>
#endif

	FreqO_ModifyOutput(SM_GetEncoderValue(ENCODER_REVERSE));
 800325a:	2001      	movs	r0, #1
 800325c:	f000 fd86 	bl	8003d6c <SM_GetEncoderValue>
 8003260:	4603      	mov	r3, r0
 8003262:	4618      	mov	r0, r3
 8003264:	f000 f9d0 	bl	8003608 <FreqO_ModifyOutput>

	// stay in this state
	eNewEvent = evIdle;
 8003268:	4b03      	ldr	r3, [pc, #12]	; (8003278 <_FreqPresetMenuInputHandler+0x28>)
 800326a:	2200      	movs	r2, #0
 800326c:	701a      	strb	r2, [r3, #0]
	return Freq_Preset_Menu_State;
 800326e:	2304      	movs	r3, #4
}
 8003270:	4618      	mov	r0, r3
 8003272:	bd80      	pop	{r7, pc}
 8003274:	0800ed48 	.word	0x0800ed48
 8003278:	20001652 	.word	0x20001652

0800327c <_FreqPresetMenuExitHandler>:
 *	@param None
 *	@retval None
 *
 */
eSystemState _FreqPresetMenuExitHandler()
{
 800327c:	b580      	push	{r7, lr}
 800327e:	af00      	add	r7, sp, #0
#ifdef EM_SWV_DEBUG
	printf("Exit Freq Menu Event captured\n");
 8003280:	4805      	ldr	r0, [pc, #20]	; (8003298 <_FreqPresetMenuExitHandler+0x1c>)
 8003282:	f009 fbed 	bl	800ca60 <puts>
#endif


	// disable the menu
	DM_ShowFreqMenu(DISABLE_FREQ_MENU);
 8003286:	2000      	movs	r0, #0
 8003288:	f7fe f8c8 	bl	800141c <DM_ShowFreqMenu>

	// back to main freq menu
	eNewEvent = evGreenBtn;
 800328c:	4b03      	ldr	r3, [pc, #12]	; (800329c <_FreqPresetMenuExitHandler+0x20>)
 800328e:	2202      	movs	r2, #2
 8003290:	701a      	strb	r2, [r3, #0]
	return Idle_State;
 8003292:	2300      	movs	r3, #0
}
 8003294:	4618      	mov	r0, r3
 8003296:	bd80      	pop	{r7, pc}
 8003298:	0800ede8 	.word	0x0800ede8
 800329c:	20001652 	.word	0x20001652

080032a0 <_FreqAdjustMenuEntryHandler>:
 *	@param None
 *	@retval None
 *
 */
eSystemState _FreqAdjustMenuEntryHandler()
{
 80032a0:	b580      	push	{r7, lr}
 80032a2:	af00      	add	r7, sp, #0
#ifdef EM_SWV_DEBUG
	printf("Freq Adjust Menu Event captured\n");
 80032a4:	480a      	ldr	r0, [pc, #40]	; (80032d0 <_FreqAdjustMenuEntryHandler+0x30>)
 80032a6:	f009 fbdb 	bl	800ca60 <puts>
#endif

	_RefreshDisplay();
 80032aa:	f000 f87b 	bl	80033a4 <_RefreshDisplay>

	DM_ShowFreqMenu(ENABLE_FREQ_ADJUST_MENU);
 80032ae:	2003      	movs	r0, #3
 80032b0:	f7fe f8b4 	bl	800141c <DM_ShowFreqMenu>

	// set the rotary encoder limits to 0-? for this menu
	ENCODER_TIMER->CNT = TIM8->ARR;
 80032b4:	4b07      	ldr	r3, [pc, #28]	; (80032d4 <_FreqAdjustMenuEntryHandler+0x34>)
 80032b6:	4a08      	ldr	r2, [pc, #32]	; (80032d8 <_FreqAdjustMenuEntryHandler+0x38>)
 80032b8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80032ba:	6253      	str	r3, [r2, #36]	; 0x24
	ENCODER_TIMER->ARR = 65535;
 80032bc:	4b06      	ldr	r3, [pc, #24]	; (80032d8 <_FreqAdjustMenuEntryHandler+0x38>)
 80032be:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80032c2:	62da      	str	r2, [r3, #44]	; 0x2c

	// stay in this state
	eNewEvent = evIdle;
 80032c4:	4b05      	ldr	r3, [pc, #20]	; (80032dc <_FreqAdjustMenuEntryHandler+0x3c>)
 80032c6:	2200      	movs	r2, #0
 80032c8:	701a      	strb	r2, [r3, #0]
	return Freq_Adjust_Menu_State;
 80032ca:	2305      	movs	r3, #5
}
 80032cc:	4618      	mov	r0, r3
 80032ce:	bd80      	pop	{r7, pc}
 80032d0:	0800ee08 	.word	0x0800ee08
 80032d4:	40013400 	.word	0x40013400
 80032d8:	40012c00 	.word	0x40012c00
 80032dc:	20001652 	.word	0x20001652

080032e0 <_FreqAdjustMenuInputHandler>:
 *	@param None
 *	@retval None
 *
 */
eSystemState _FreqAdjustMenuInputHandler()
{
 80032e0:	b580      	push	{r7, lr}
 80032e2:	af00      	add	r7, sp, #0
#ifdef EM_SWV_DEBUG
	printf("FreqSet Event captured\n");
 80032e4:	4805      	ldr	r0, [pc, #20]	; (80032fc <_FreqAdjustMenuInputHandler+0x1c>)
 80032e6:	f009 fbbb 	bl	800ca60 <puts>
#endif

	FreqO_AdjustFreq();
 80032ea:	f000 f97f 	bl	80035ec <FreqO_AdjustFreq>

	// stay in this state
	eNewEvent = evIdle;
 80032ee:	4b04      	ldr	r3, [pc, #16]	; (8003300 <_FreqAdjustMenuInputHandler+0x20>)
 80032f0:	2200      	movs	r2, #0
 80032f2:	701a      	strb	r2, [r3, #0]
	return Freq_Adjust_Menu_State;
 80032f4:	2305      	movs	r3, #5
}
 80032f6:	4618      	mov	r0, r3
 80032f8:	bd80      	pop	{r7, pc}
 80032fa:	bf00      	nop
 80032fc:	0800ed48 	.word	0x0800ed48
 8003300:	20001652 	.word	0x20001652

08003304 <_FreqAdjustMenuExitHandler>:
 *	@param None
 *	@retval None
 *
 */
eSystemState _FreqAdjustMenuExitHandler()
{
 8003304:	b580      	push	{r7, lr}
 8003306:	af00      	add	r7, sp, #0
#ifdef EM_SWV_DEBUG
	printf("Exit Freq Adjust Menu Exit Event captured\n");
 8003308:	4805      	ldr	r0, [pc, #20]	; (8003320 <_FreqAdjustMenuExitHandler+0x1c>)
 800330a:	f009 fba9 	bl	800ca60 <puts>
#endif


	// disable the menu
	DM_ShowFreqMenu(DISABLE_FREQ_MENU);
 800330e:	2000      	movs	r0, #0
 8003310:	f7fe f884 	bl	800141c <DM_ShowFreqMenu>

	// back to main freq menu
	eNewEvent = evGreenBtn;
 8003314:	4b03      	ldr	r3, [pc, #12]	; (8003324 <_FreqAdjustMenuExitHandler+0x20>)
 8003316:	2202      	movs	r2, #2
 8003318:	701a      	strb	r2, [r3, #0]
	return Idle_State;
 800331a:	2300      	movs	r3, #0
}
 800331c:	4618      	mov	r0, r3
 800331e:	bd80      	pop	{r7, pc}
 8003320:	0800ee28 	.word	0x0800ee28
 8003324:	20001652 	.word	0x20001652

08003328 <_FreqSweepMenuEntryHandler>:
 *	@param None
 *	@retval None
 *
 */
eSystemState _FreqSweepMenuEntryHandler()
{
 8003328:	b580      	push	{r7, lr}
 800332a:	af00      	add	r7, sp, #0
#ifdef EM_SWV_DEBUG
	printf("Freq Sweep Menu Event captured\n");
 800332c:	4809      	ldr	r0, [pc, #36]	; (8003354 <_FreqSweepMenuEntryHandler+0x2c>)
 800332e:	f009 fb97 	bl	800ca60 <puts>
#endif

	_RefreshDisplay();
 8003332:	f000 f837 	bl	80033a4 <_RefreshDisplay>

	DM_ShowFreqMenu(ENABLE_FREQ_SWEEP_MENU);
 8003336:	2004      	movs	r0, #4
 8003338:	f7fe f870 	bl	800141c <DM_ShowFreqMenu>

	// set the rotary encoder limits to 0-? for this menu
	ENCODER_TIMER->CNT = 0;
 800333c:	4b06      	ldr	r3, [pc, #24]	; (8003358 <_FreqSweepMenuEntryHandler+0x30>)
 800333e:	2200      	movs	r2, #0
 8003340:	625a      	str	r2, [r3, #36]	; 0x24
	ENCODER_TIMER->ARR = 56;
 8003342:	4b05      	ldr	r3, [pc, #20]	; (8003358 <_FreqSweepMenuEntryHandler+0x30>)
 8003344:	2238      	movs	r2, #56	; 0x38
 8003346:	62da      	str	r2, [r3, #44]	; 0x2c

	// stay in this state
	eNewEvent = evIdle;
 8003348:	4b04      	ldr	r3, [pc, #16]	; (800335c <_FreqSweepMenuEntryHandler+0x34>)
 800334a:	2200      	movs	r2, #0
 800334c:	701a      	strb	r2, [r3, #0]
	return Freq_Sweep_Menu_State;
 800334e:	2306      	movs	r3, #6
}
 8003350:	4618      	mov	r0, r3
 8003352:	bd80      	pop	{r7, pc}
 8003354:	0800ee54 	.word	0x0800ee54
 8003358:	40012c00 	.word	0x40012c00
 800335c:	20001652 	.word	0x20001652

08003360 <_FreqSweepMenuExitHandler>:
 *	@param None
 *	@retval None
 *
 */
eSystemState _FreqSweepMenuExitHandler()
{
 8003360:	b580      	push	{r7, lr}
 8003362:	af00      	add	r7, sp, #0
#ifdef EM_SWV_DEBUG
	printf("Exit Freq Sweep Menu Exit Event captured\n");
 8003364:	4805      	ldr	r0, [pc, #20]	; (800337c <_FreqSweepMenuExitHandler+0x1c>)
 8003366:	f009 fb7b 	bl	800ca60 <puts>
#endif


	// disable the menu
	DM_ShowFreqMenu(DISABLE_FREQ_MENU);
 800336a:	2000      	movs	r0, #0
 800336c:	f7fe f856 	bl	800141c <DM_ShowFreqMenu>

	// back to main freq menu
	eNewEvent = evGreenBtn;
 8003370:	4b03      	ldr	r3, [pc, #12]	; (8003380 <_FreqSweepMenuExitHandler+0x20>)
 8003372:	2202      	movs	r2, #2
 8003374:	701a      	strb	r2, [r3, #0]
	return Idle_State;
 8003376:	2300      	movs	r3, #0
}
 8003378:	4618      	mov	r0, r3
 800337a:	bd80      	pop	{r7, pc}
 800337c:	0800ee74 	.word	0x0800ee74
 8003380:	20001652 	.word	0x20001652

08003384 <EM_SetNewEvent>:
 *	@param None
 *	@retval None
 *
 */
void EM_SetNewEvent(eSystemEvent pEvent)
{
 8003384:	b480      	push	{r7}
 8003386:	b083      	sub	sp, #12
 8003388:	af00      	add	r7, sp, #0
 800338a:	4603      	mov	r3, r0
 800338c:	71fb      	strb	r3, [r7, #7]
	eNewEvent = pEvent;
 800338e:	4a04      	ldr	r2, [pc, #16]	; (80033a0 <EM_SetNewEvent+0x1c>)
 8003390:	79fb      	ldrb	r3, [r7, #7]
 8003392:	7013      	strb	r3, [r2, #0]
}
 8003394:	bf00      	nop
 8003396:	370c      	adds	r7, #12
 8003398:	46bd      	mov	sp, r7
 800339a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800339e:	4770      	bx	lr
 80033a0:	20001652 	.word	0x20001652

080033a4 <_RefreshDisplay>:
 *	@param None
 *	@retval None
 *
 */
void _RefreshDisplay()
{
 80033a4:	b580      	push	{r7, lr}
 80033a6:	af00      	add	r7, sp, #0
	// don't let the DisplayManager interrupt the LCD refresh
	HAL_TIM_Base_Stop_IT(&htim15);
 80033a8:	4804      	ldr	r0, [pc, #16]	; (80033bc <_RefreshDisplay+0x18>)
 80033aa:	f006 fc2d 	bl	8009c08 <HAL_TIM_Base_Stop_IT>
	{
		DM_RefreshBackgroundLayout();
 80033ae:	f7fe f893 	bl	80014d8 <DM_RefreshBackgroundLayout>
	}
	HAL_TIM_Base_Start_IT(&htim15);
 80033b2:	4802      	ldr	r0, [pc, #8]	; (80033bc <_RefreshDisplay+0x18>)
 80033b4:	f006 fbf2 	bl	8009b9c <HAL_TIM_Base_Start_IT>
}
 80033b8:	bf00      	nop
 80033ba:	bd80      	pop	{r7, pc}
 80033bc:	20001cbc 	.word	0x20001cbc

080033c0 <BO_GetBiasPolarity>:
 *	@param None
 *	@retval None
 *
 */
eBias_Polarity BO_GetBiasPolarity()
{
 80033c0:	b480      	push	{r7}
 80033c2:	af00      	add	r7, sp, #0
	return eBiasPolarity;
 80033c4:	4b03      	ldr	r3, [pc, #12]	; (80033d4 <BO_GetBiasPolarity+0x14>)
 80033c6:	781b      	ldrb	r3, [r3, #0]
}
 80033c8:	4618      	mov	r0, r3
 80033ca:	46bd      	mov	sp, r7
 80033cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033d0:	4770      	bx	lr
 80033d2:	bf00      	nop
 80033d4:	20000008 	.word	0x20000008

080033d8 <BO_GetDcBiasEncoderValue>:
 *	@param None
 *	@retval None
 *
 */
uint16_t BO_GetDcBiasEncoderValue()
{
 80033d8:	b480      	push	{r7}
 80033da:	af00      	add	r7, sp, #0
	return dc_bias_encoder_value;
 80033dc:	4b03      	ldr	r3, [pc, #12]	; (80033ec <BO_GetDcBiasEncoderValue+0x14>)
 80033de:	881b      	ldrh	r3, [r3, #0]
}
 80033e0:	4618      	mov	r0, r3
 80033e2:	46bd      	mov	sp, r7
 80033e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033e8:	4770      	bx	lr
 80033ea:	bf00      	nop
 80033ec:	2000000a 	.word	0x2000000a

080033f0 <BO_ModifyOutput>:
 *	@param None
 *	@retval None
 *
 */
void BO_ModifyOutput(uint16_t pEncoderValue)
{
 80033f0:	b580      	push	{r7, lr}
 80033f2:	b082      	sub	sp, #8
 80033f4:	af00      	add	r7, sp, #0
 80033f6:	4603      	mov	r3, r0
 80033f8:	80fb      	strh	r3, [r7, #6]
	// pEncoderValue is reversed for correct rotary encoder operation.
	// However, we want to retain the forward direction value to prevent polarity flip!
	dc_bias_encoder_value = SM_GetEncoderValue(ENCODER_FORWARD);
 80033fa:	2000      	movs	r0, #0
 80033fc:	f000 fcb6 	bl	8003d6c <SM_GetEncoderValue>
 8003400:	4603      	mov	r3, r0
 8003402:	461a      	mov	r2, r3
 8003404:	4b1b      	ldr	r3, [pc, #108]	; (8003474 <BO_ModifyOutput+0x84>)
 8003406:	801a      	strh	r2, [r3, #0]

	// apply negative dc bias
	if(pEncoderValue < BIAS_CENTER) {
 8003408:	88fb      	ldrh	r3, [r7, #6]
 800340a:	f5b3 7fc8 	cmp.w	r3, #400	; 0x190
 800340e:	d214      	bcs.n	800343a <BO_ModifyOutput+0x4a>

		eBiasPolarity = INVERSEBIAS;
 8003410:	4b19      	ldr	r3, [pc, #100]	; (8003478 <BO_ModifyOutput+0x88>)
 8003412:	2200      	movs	r2, #0
 8003414:	701a      	strb	r2, [r3, #0]


		HAL_DAC_SetValue(	&hdac1,
							DAC1_CHANNEL_2,
							DAC_ALIGN_12B_R,
							((BIAS_CENTER - pEncoderValue) * BIAS_MAG));
 8003416:	88fb      	ldrh	r3, [r7, #6]
 8003418:	f5c3 72c8 	rsb	r2, r3, #400	; 0x190
 800341c:	4613      	mov	r3, r2
 800341e:	009b      	lsls	r3, r3, #2
 8003420:	4413      	add	r3, r2
 8003422:	005b      	lsls	r3, r3, #1
		HAL_DAC_SetValue(	&hdac1,
 8003424:	2200      	movs	r2, #0
 8003426:	2110      	movs	r1, #16
 8003428:	4814      	ldr	r0, [pc, #80]	; (800347c <BO_ModifyOutput+0x8c>)
 800342a:	f004 f937 	bl	800769c <HAL_DAC_SetValue>

		HAL_GPIO_WritePin(	DCBIAS_INVERT_GPIO_Port,
 800342e:	2201      	movs	r2, #1
 8003430:	2108      	movs	r1, #8
 8003432:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8003436:	f005 f807 	bl	8008448 <HAL_GPIO_WritePin>
							DCBIAS_INVERT_Pin,
							GPIO_PIN_SET);
	}
	// apply positive dc bias
	if(pEncoderValue >= BIAS_CENTER) {
 800343a:	88fb      	ldrh	r3, [r7, #6]
 800343c:	f5b3 7fc8 	cmp.w	r3, #400	; 0x190
 8003440:	d314      	bcc.n	800346c <BO_ModifyOutput+0x7c>

		eBiasPolarity = NORMALBIAS;
 8003442:	4b0d      	ldr	r3, [pc, #52]	; (8003478 <BO_ModifyOutput+0x88>)
 8003444:	2201      	movs	r2, #1
 8003446:	701a      	strb	r2, [r3, #0]
		//TIM1->CNT = pEncoderValue;

		HAL_DAC_SetValue(	&hdac1,
							DAC1_CHANNEL_2,
							DAC_ALIGN_12B_R,
							((pEncoderValue - BIAS_CENTER) * BIAS_MAG));
 8003448:	88fb      	ldrh	r3, [r7, #6]
 800344a:	f5a3 72c8 	sub.w	r2, r3, #400	; 0x190
 800344e:	4613      	mov	r3, r2
 8003450:	009b      	lsls	r3, r3, #2
 8003452:	4413      	add	r3, r2
 8003454:	005b      	lsls	r3, r3, #1
		HAL_DAC_SetValue(	&hdac1,
 8003456:	2200      	movs	r2, #0
 8003458:	2110      	movs	r1, #16
 800345a:	4808      	ldr	r0, [pc, #32]	; (800347c <BO_ModifyOutput+0x8c>)
 800345c:	f004 f91e 	bl	800769c <HAL_DAC_SetValue>

		HAL_GPIO_WritePin(	DCBIAS_INVERT_GPIO_Port,
 8003460:	2200      	movs	r2, #0
 8003462:	2108      	movs	r1, #8
 8003464:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8003468:	f004 ffee 	bl	8008448 <HAL_GPIO_WritePin>
							DCBIAS_INVERT_Pin,
							GPIO_PIN_RESET);
	}
}
 800346c:	bf00      	nop
 800346e:	3708      	adds	r7, #8
 8003470:	46bd      	mov	sp, r7
 8003472:	bd80      	pop	{r7, pc}
 8003474:	2000000a 	.word	0x2000000a
 8003478:	20000008 	.word	0x20000008
 800347c:	20001b38 	.word	0x20001b38

08003480 <BO_GetOutputBias>:
 *	@param None
 *	@retval None
 *
 */
uint32_t BO_GetOutputBias()
{
 8003480:	b580      	push	{r7, lr}
 8003482:	af00      	add	r7, sp, #0
	return HAL_DAC_GetValue(&hdac1, DAC1_CHANNEL_2);
 8003484:	2110      	movs	r1, #16
 8003486:	4803      	ldr	r0, [pc, #12]	; (8003494 <BO_GetOutputBias+0x14>)
 8003488:	f004 f944 	bl	8007714 <HAL_DAC_GetValue>
 800348c:	4603      	mov	r3, r0
}
 800348e:	4618      	mov	r0, r3
 8003490:	bd80      	pop	{r7, pc}
 8003492:	bf00      	nop
 8003494:	20001b38 	.word	0x20001b38

08003498 <DT_InitRegister>:
 *	@param None
 *	@retval None
 *
 */
void DT_InitRegister()
{
 8003498:	b480      	push	{r7}
 800349a:	b083      	sub	sp, #12
 800349c:	af00      	add	r7, sp, #0
	for(int i = 0; i < MAX_DAC_TIMER_SETTINGS; i++)
 800349e:	2300      	movs	r3, #0
 80034a0:	607b      	str	r3, [r7, #4]
 80034a2:	e06b      	b.n	800357c <DT_InitRegister+0xe4>
	{
		// prevent divide by zero (prescaler)
		if(DacTimerReg[i].psc == 0)
 80034a4:	493a      	ldr	r1, [pc, #232]	; (8003590 <DT_InitRegister+0xf8>)
 80034a6:	687a      	ldr	r2, [r7, #4]
 80034a8:	4613      	mov	r3, r2
 80034aa:	009b      	lsls	r3, r3, #2
 80034ac:	4413      	add	r3, r2
 80034ae:	009b      	lsls	r3, r3, #2
 80034b0:	440b      	add	r3, r1
 80034b2:	3308      	adds	r3, #8
 80034b4:	681b      	ldr	r3, [r3, #0]
 80034b6:	2b00      	cmp	r3, #0
 80034b8:	d129      	bne.n	800350e <DT_InitRegister+0x76>
			DacTimerReg[i].arr = ((SM_MCLK / DacTimerReg[i].hertz) / SM_FSAMP) * DacTimerReg[i].error;
 80034ba:	4935      	ldr	r1, [pc, #212]	; (8003590 <DT_InitRegister+0xf8>)
 80034bc:	687a      	ldr	r2, [r7, #4]
 80034be:	4613      	mov	r3, r2
 80034c0:	009b      	lsls	r3, r3, #2
 80034c2:	4413      	add	r3, r2
 80034c4:	009b      	lsls	r3, r3, #2
 80034c6:	440b      	add	r3, r1
 80034c8:	3304      	adds	r3, #4
 80034ca:	681b      	ldr	r3, [r3, #0]
 80034cc:	4a31      	ldr	r2, [pc, #196]	; (8003594 <DT_InitRegister+0xfc>)
 80034ce:	fbb2 f3f3 	udiv	r3, r2, r3
 80034d2:	ee07 3a90 	vmov	s15, r3
 80034d6:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80034da:	492d      	ldr	r1, [pc, #180]	; (8003590 <DT_InitRegister+0xf8>)
 80034dc:	687a      	ldr	r2, [r7, #4]
 80034de:	4613      	mov	r3, r2
 80034e0:	009b      	lsls	r3, r3, #2
 80034e2:	4413      	add	r3, r2
 80034e4:	009b      	lsls	r3, r3, #2
 80034e6:	440b      	add	r3, r1
 80034e8:	3310      	adds	r3, #16
 80034ea:	edd3 7a00 	vldr	s15, [r3]
 80034ee:	ee67 7a27 	vmul.f32	s15, s14, s15
 80034f2:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80034f6:	ee17 0a90 	vmov	r0, s15
 80034fa:	4925      	ldr	r1, [pc, #148]	; (8003590 <DT_InitRegister+0xf8>)
 80034fc:	687a      	ldr	r2, [r7, #4]
 80034fe:	4613      	mov	r3, r2
 8003500:	009b      	lsls	r3, r3, #2
 8003502:	4413      	add	r3, r2
 8003504:	009b      	lsls	r3, r3, #2
 8003506:	440b      	add	r3, r1
 8003508:	330c      	adds	r3, #12
 800350a:	6018      	str	r0, [r3, #0]
 800350c:	e033      	b.n	8003576 <DT_InitRegister+0xde>
		else
			DacTimerReg[i].arr = (((SM_MCLK / DacTimerReg[i].hertz) / DacTimerReg[i].psc) / SM_FSAMP) * DacTimerReg[i].error;
 800350e:	4920      	ldr	r1, [pc, #128]	; (8003590 <DT_InitRegister+0xf8>)
 8003510:	687a      	ldr	r2, [r7, #4]
 8003512:	4613      	mov	r3, r2
 8003514:	009b      	lsls	r3, r3, #2
 8003516:	4413      	add	r3, r2
 8003518:	009b      	lsls	r3, r3, #2
 800351a:	440b      	add	r3, r1
 800351c:	3304      	adds	r3, #4
 800351e:	681b      	ldr	r3, [r3, #0]
 8003520:	4a1c      	ldr	r2, [pc, #112]	; (8003594 <DT_InitRegister+0xfc>)
 8003522:	fbb2 f1f3 	udiv	r1, r2, r3
 8003526:	481a      	ldr	r0, [pc, #104]	; (8003590 <DT_InitRegister+0xf8>)
 8003528:	687a      	ldr	r2, [r7, #4]
 800352a:	4613      	mov	r3, r2
 800352c:	009b      	lsls	r3, r3, #2
 800352e:	4413      	add	r3, r2
 8003530:	009b      	lsls	r3, r3, #2
 8003532:	4403      	add	r3, r0
 8003534:	3308      	adds	r3, #8
 8003536:	681b      	ldr	r3, [r3, #0]
 8003538:	fbb1 f3f3 	udiv	r3, r1, r3
 800353c:	ee07 3a90 	vmov	s15, r3
 8003540:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8003544:	4912      	ldr	r1, [pc, #72]	; (8003590 <DT_InitRegister+0xf8>)
 8003546:	687a      	ldr	r2, [r7, #4]
 8003548:	4613      	mov	r3, r2
 800354a:	009b      	lsls	r3, r3, #2
 800354c:	4413      	add	r3, r2
 800354e:	009b      	lsls	r3, r3, #2
 8003550:	440b      	add	r3, r1
 8003552:	3310      	adds	r3, #16
 8003554:	edd3 7a00 	vldr	s15, [r3]
 8003558:	ee67 7a27 	vmul.f32	s15, s14, s15
 800355c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003560:	ee17 0a90 	vmov	r0, s15
 8003564:	490a      	ldr	r1, [pc, #40]	; (8003590 <DT_InitRegister+0xf8>)
 8003566:	687a      	ldr	r2, [r7, #4]
 8003568:	4613      	mov	r3, r2
 800356a:	009b      	lsls	r3, r3, #2
 800356c:	4413      	add	r3, r2
 800356e:	009b      	lsls	r3, r3, #2
 8003570:	440b      	add	r3, r1
 8003572:	330c      	adds	r3, #12
 8003574:	6018      	str	r0, [r3, #0]
	for(int i = 0; i < MAX_DAC_TIMER_SETTINGS; i++)
 8003576:	687b      	ldr	r3, [r7, #4]
 8003578:	3301      	adds	r3, #1
 800357a:	607b      	str	r3, [r7, #4]
 800357c:	687b      	ldr	r3, [r7, #4]
 800357e:	2b0d      	cmp	r3, #13
 8003580:	dd90      	ble.n	80034a4 <DT_InitRegister+0xc>
	}
}
 8003582:	bf00      	nop
 8003584:	370c      	adds	r7, #12
 8003586:	46bd      	mov	sp, r7
 8003588:	f85d 7b04 	ldr.w	r7, [sp], #4
 800358c:	4770      	bx	lr
 800358e:	bf00      	nop
 8003590:	2000000c 	.word	0x2000000c
 8003594:	00155cc0 	.word	0x00155cc0

08003598 <DT_GetRegisterByEnum>:
 *	@param pEnum Enummeration (eFreq_Preset) search criteria. Not an index
 *	@retval Pointer to the found DacTimeReg_t struct. Null if no result!
 *
 */
DacTimeReg_t* DT_GetRegisterByEnum(eFreq_Preset pEnum)
{
 8003598:	b480      	push	{r7}
 800359a:	b085      	sub	sp, #20
 800359c:	af00      	add	r7, sp, #0
 800359e:	6078      	str	r0, [r7, #4]
	for(int i = 0; i < MAX_DAC_TIMER_SETTINGS; i++)
 80035a0:	2300      	movs	r3, #0
 80035a2:	60fb      	str	r3, [r7, #12]
 80035a4:	e016      	b.n	80035d4 <DT_GetRegisterByEnum+0x3c>
		if(DacTimerReg[i].hertz == pEnum)
 80035a6:	4910      	ldr	r1, [pc, #64]	; (80035e8 <DT_GetRegisterByEnum+0x50>)
 80035a8:	68fa      	ldr	r2, [r7, #12]
 80035aa:	4613      	mov	r3, r2
 80035ac:	009b      	lsls	r3, r3, #2
 80035ae:	4413      	add	r3, r2
 80035b0:	009b      	lsls	r3, r3, #2
 80035b2:	440b      	add	r3, r1
 80035b4:	3304      	adds	r3, #4
 80035b6:	681b      	ldr	r3, [r3, #0]
 80035b8:	687a      	ldr	r2, [r7, #4]
 80035ba:	429a      	cmp	r2, r3
 80035bc:	d107      	bne.n	80035ce <DT_GetRegisterByEnum+0x36>
			return &DacTimerReg[i];
 80035be:	68fa      	ldr	r2, [r7, #12]
 80035c0:	4613      	mov	r3, r2
 80035c2:	009b      	lsls	r3, r3, #2
 80035c4:	4413      	add	r3, r2
 80035c6:	009b      	lsls	r3, r3, #2
 80035c8:	4a07      	ldr	r2, [pc, #28]	; (80035e8 <DT_GetRegisterByEnum+0x50>)
 80035ca:	4413      	add	r3, r2
 80035cc:	e006      	b.n	80035dc <DT_GetRegisterByEnum+0x44>
	for(int i = 0; i < MAX_DAC_TIMER_SETTINGS; i++)
 80035ce:	68fb      	ldr	r3, [r7, #12]
 80035d0:	3301      	adds	r3, #1
 80035d2:	60fb      	str	r3, [r7, #12]
 80035d4:	68fb      	ldr	r3, [r7, #12]
 80035d6:	2b0d      	cmp	r3, #13
 80035d8:	dde5      	ble.n	80035a6 <DT_GetRegisterByEnum+0xe>

	return 0;
 80035da:	2300      	movs	r3, #0
}
 80035dc:	4618      	mov	r0, r3
 80035de:	3714      	adds	r7, #20
 80035e0:	46bd      	mov	sp, r7
 80035e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035e6:	4770      	bx	lr
 80035e8:	2000000c 	.word	0x2000000c

080035ec <FreqO_AdjustFreq>:
 *	@param None
 *	@retval None
 *
 */
void FreqO_AdjustFreq()
{
 80035ec:	b580      	push	{r7, lr}
 80035ee:	af00      	add	r7, sp, #0
		//TIM8->ARR = SM_GetEncoderValue(ENCODER_FORWARD) * FREQ_ENCODER_HIFREQ_MAG;
		TIM8->ARR = SM_GetEncoderValue(ENCODER_FORWARD); //* FREQ_ENCODER_MIDFREQ_MAG;
 80035f0:	2000      	movs	r0, #0
 80035f2:	f000 fbbb 	bl	8003d6c <SM_GetEncoderValue>
 80035f6:	4603      	mov	r3, r0
 80035f8:	461a      	mov	r2, r3
 80035fa:	4b02      	ldr	r3, [pc, #8]	; (8003604 <FreqO_AdjustFreq+0x18>)
 80035fc:	62da      	str	r2, [r3, #44]	; 0x2c
		//TIM8->ARR = SM_GetEncoderValue(ENCODER_FORWARD) * FREQ_ENCODER_LOFREQ_MAG;
}
 80035fe:	bf00      	nop
 8003600:	bd80      	pop	{r7, pc}
 8003602:	bf00      	nop
 8003604:	40013400 	.word	0x40013400

08003608 <FreqO_ModifyOutput>:
 *	@param None
 *	@retval None
 *
 */
void FreqO_ModifyOutput(uint16_t pEncValue)
{
 8003608:	b580      	push	{r7, lr}
 800360a:	b082      	sub	sp, #8
 800360c:	af00      	add	r7, sp, #0
 800360e:	4603      	mov	r3, r0
 8003610:	80fb      	strh	r3, [r7, #6]

	switch(pEncValue)
 8003612:	88fb      	ldrh	r3, [r7, #6]
 8003614:	2b38      	cmp	r3, #56	; 0x38
 8003616:	f200 80b4 	bhi.w	8003782 <FreqO_ModifyOutput+0x17a>
 800361a:	a201      	add	r2, pc, #4	; (adr r2, 8003620 <FreqO_ModifyOutput+0x18>)
 800361c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003620:	08003705 	.word	0x08003705
 8003624:	08003705 	.word	0x08003705
 8003628:	08003705 	.word	0x08003705
 800362c:	08003705 	.word	0x08003705
 8003630:	0800370d 	.word	0x0800370d
 8003634:	0800370d 	.word	0x0800370d
 8003638:	0800370d 	.word	0x0800370d
 800363c:	0800370d 	.word	0x0800370d
 8003640:	08003715 	.word	0x08003715
 8003644:	08003715 	.word	0x08003715
 8003648:	08003715 	.word	0x08003715
 800364c:	08003715 	.word	0x08003715
 8003650:	0800371d 	.word	0x0800371d
 8003654:	0800371d 	.word	0x0800371d
 8003658:	0800371d 	.word	0x0800371d
 800365c:	0800371d 	.word	0x0800371d
 8003660:	08003725 	.word	0x08003725
 8003664:	08003725 	.word	0x08003725
 8003668:	08003725 	.word	0x08003725
 800366c:	08003725 	.word	0x08003725
 8003670:	0800372d 	.word	0x0800372d
 8003674:	0800372d 	.word	0x0800372d
 8003678:	0800372d 	.word	0x0800372d
 800367c:	0800372d 	.word	0x0800372d
 8003680:	08003737 	.word	0x08003737
 8003684:	08003737 	.word	0x08003737
 8003688:	08003737 	.word	0x08003737
 800368c:	08003737 	.word	0x08003737
 8003690:	08003741 	.word	0x08003741
 8003694:	08003741 	.word	0x08003741
 8003698:	08003741 	.word	0x08003741
 800369c:	08003783 	.word	0x08003783
 80036a0:	08003741 	.word	0x08003741
 80036a4:	0800374b 	.word	0x0800374b
 80036a8:	0800374b 	.word	0x0800374b
 80036ac:	0800374b 	.word	0x0800374b
 80036b0:	0800374b 	.word	0x0800374b
 80036b4:	08003755 	.word	0x08003755
 80036b8:	08003755 	.word	0x08003755
 80036bc:	08003755 	.word	0x08003755
 80036c0:	08003755 	.word	0x08003755
 80036c4:	0800375f 	.word	0x0800375f
 80036c8:	0800375f 	.word	0x0800375f
 80036cc:	0800375f 	.word	0x0800375f
 80036d0:	0800375f 	.word	0x0800375f
 80036d4:	08003769 	.word	0x08003769
 80036d8:	08003769 	.word	0x08003769
 80036dc:	08003769 	.word	0x08003769
 80036e0:	08003769 	.word	0x08003769
 80036e4:	08003773 	.word	0x08003773
 80036e8:	08003773 	.word	0x08003773
 80036ec:	08003773 	.word	0x08003773
 80036f0:	08003773 	.word	0x08003773
 80036f4:	0800377b 	.word	0x0800377b
 80036f8:	0800377b 	.word	0x0800377b
 80036fc:	0800377b 	.word	0x0800377b
 8003700:	0800377b 	.word	0x0800377b
	{
		case 0:
		case 1:
		case 2:
		case 3:
			FreqO_ApplyPreset(FPRESET_1HZ);
 8003704:	2001      	movs	r0, #1
 8003706:	f000 f845 	bl	8003794 <FreqO_ApplyPreset>
			break;
 800370a:	e03a      	b.n	8003782 <FreqO_ModifyOutput+0x17a>
		case 4:
		case 5:
		case 6:
		case 7:
			FreqO_ApplyPreset(FPRESET_10HZ);
 800370c:	200a      	movs	r0, #10
 800370e:	f000 f841 	bl	8003794 <FreqO_ApplyPreset>
			break;
 8003712:	e036      	b.n	8003782 <FreqO_ModifyOutput+0x17a>
		case 8:
		case 9:
		case 10:
		case 11:
			FreqO_ApplyPreset(FPRESET_50HZ);
 8003714:	2032      	movs	r0, #50	; 0x32
 8003716:	f000 f83d 	bl	8003794 <FreqO_ApplyPreset>
			break;
 800371a:	e032      	b.n	8003782 <FreqO_ModifyOutput+0x17a>
		case 12:
		case 13:
		case 14:
		case 15:
			FreqO_ApplyPreset(FPRESET_100HZ);
 800371c:	2064      	movs	r0, #100	; 0x64
 800371e:	f000 f839 	bl	8003794 <FreqO_ApplyPreset>
			break;
 8003722:	e02e      	b.n	8003782 <FreqO_ModifyOutput+0x17a>
		case 16:
		case 17:
		case 18:
		case 19:
			FreqO_ApplyPreset(FPRESET_250HZ);
 8003724:	20fa      	movs	r0, #250	; 0xfa
 8003726:	f000 f835 	bl	8003794 <FreqO_ApplyPreset>
			break;
 800372a:	e02a      	b.n	8003782 <FreqO_ModifyOutput+0x17a>
		case 20:
		case 21:
		case 22:
		case 23:
			FreqO_ApplyPreset(FPRESET_500HZ);
 800372c:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8003730:	f000 f830 	bl	8003794 <FreqO_ApplyPreset>
			break;
 8003734:	e025      	b.n	8003782 <FreqO_ModifyOutput+0x17a>
		case 24:
		case 25:
		case 26:
		case 27:
			FreqO_ApplyPreset(FPRESET_750HZ);
 8003736:	f240 20ee 	movw	r0, #750	; 0x2ee
 800373a:	f000 f82b 	bl	8003794 <FreqO_ApplyPreset>
			break;
 800373e:	e020      	b.n	8003782 <FreqO_ModifyOutput+0x17a>
		case 28:
		case 29:
		case 30:
		case 32:
			FreqO_ApplyPreset(FPRESET_1KHZ);
 8003740:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8003744:	f000 f826 	bl	8003794 <FreqO_ApplyPreset>
			break;
 8003748:	e01b      	b.n	8003782 <FreqO_ModifyOutput+0x17a>
		case 33:
		case 34:
		case 35:
		case 36:
			FreqO_ApplyPreset(FPRESET_5KHZ);
 800374a:	f241 3088 	movw	r0, #5000	; 0x1388
 800374e:	f000 f821 	bl	8003794 <FreqO_ApplyPreset>
			break;
 8003752:	e016      	b.n	8003782 <FreqO_ModifyOutput+0x17a>
		case 37:
		case 38:
		case 39:
		case 40:
			FreqO_ApplyPreset(FPRESET_10KHZ);
 8003754:	f242 7010 	movw	r0, #10000	; 0x2710
 8003758:	f000 f81c 	bl	8003794 <FreqO_ApplyPreset>
			break;
 800375c:	e011      	b.n	8003782 <FreqO_ModifyOutput+0x17a>
		case 41:
		case 42:
		case 43:
		case 44:
			FreqO_ApplyPreset(FPRESET_25KHZ);
 800375e:	f246 10a8 	movw	r0, #25000	; 0x61a8
 8003762:	f000 f817 	bl	8003794 <FreqO_ApplyPreset>
			break;
 8003766:	e00c      	b.n	8003782 <FreqO_ModifyOutput+0x17a>
		case 45:
		case 46:
		case 47:
		case 48:
			FreqO_ApplyPreset(FPRESET_50KHZ);
 8003768:	f24c 3050 	movw	r0, #50000	; 0xc350
 800376c:	f000 f812 	bl	8003794 <FreqO_ApplyPreset>
			break;
 8003770:	e007      	b.n	8003782 <FreqO_ModifyOutput+0x17a>
		case 49:
		case 50:
		case 51:
		case 52:
			FreqO_ApplyPreset(FPRESET_75KHZ);
 8003772:	4806      	ldr	r0, [pc, #24]	; (800378c <FreqO_ModifyOutput+0x184>)
 8003774:	f000 f80e 	bl	8003794 <FreqO_ApplyPreset>
			break;
 8003778:	e003      	b.n	8003782 <FreqO_ModifyOutput+0x17a>
		case 53:
		case 54:
		case 55:
		case 56:
			FreqO_ApplyPreset(FPRESET_100KHZ);
 800377a:	4805      	ldr	r0, [pc, #20]	; (8003790 <FreqO_ModifyOutput+0x188>)
 800377c:	f000 f80a 	bl	8003794 <FreqO_ApplyPreset>
			break;
 8003780:	bf00      	nop
	}

}
 8003782:	bf00      	nop
 8003784:	3708      	adds	r7, #8
 8003786:	46bd      	mov	sp, r7
 8003788:	bd80      	pop	{r7, pc}
 800378a:	bf00      	nop
 800378c:	000124f8 	.word	0x000124f8
 8003790:	000186a0 	.word	0x000186a0

08003794 <FreqO_ApplyPreset>:

 *	@retval None
 *
 */
void FreqO_ApplyPreset(eFreq_Preset pPresetEnum)
{
 8003794:	b580      	push	{r7, lr}
 8003796:	b084      	sub	sp, #16
 8003798:	af00      	add	r7, sp, #0
 800379a:	6078      	str	r0, [r7, #4]
	DacTimeReg_t* tmp = DT_GetRegisterByEnum(pPresetEnum);
 800379c:	6878      	ldr	r0, [r7, #4]
 800379e:	f7ff fefb 	bl	8003598 <DT_GetRegisterByEnum>
 80037a2:	60f8      	str	r0, [r7, #12]
	if(tmp)
 80037a4:	68fb      	ldr	r3, [r7, #12]
 80037a6:	2b00      	cmp	r3, #0
 80037a8:	d015      	beq.n	80037d6 <FreqO_ApplyPreset+0x42>
	{
		TIM8->PSC = tmp->psc;
 80037aa:	4a0d      	ldr	r2, [pc, #52]	; (80037e0 <FreqO_ApplyPreset+0x4c>)
 80037ac:	68fb      	ldr	r3, [r7, #12]
 80037ae:	689b      	ldr	r3, [r3, #8]
 80037b0:	6293      	str	r3, [r2, #40]	; 0x28
		TIM8->ARR = tmp->arr;
 80037b2:	4a0b      	ldr	r2, [pc, #44]	; (80037e0 <FreqO_ApplyPreset+0x4c>)
 80037b4:	68fb      	ldr	r3, [r7, #12]
 80037b6:	68db      	ldr	r3, [r3, #12]
 80037b8:	62d3      	str	r3, [r2, #44]	; 0x2c
		//eNewFreqPreset = pPresetEnum;
		Freq_Preset_Encoder_Pos_t * tmp = FreqO_FindFPresetObject(pPresetEnum);
 80037ba:	6878      	ldr	r0, [r7, #4]
 80037bc:	f000 f822 	bl	8003804 <FreqO_FindFPresetObject>
 80037c0:	60b8      	str	r0, [r7, #8]
		if(tmp)
 80037c2:	68bb      	ldr	r3, [r7, #8]
 80037c4:	2b00      	cmp	r3, #0
 80037c6:	d003      	beq.n	80037d0 <FreqO_ApplyPreset+0x3c>
		{
			pNewFreqPresetEncoderPos = tmp;
 80037c8:	4a06      	ldr	r2, [pc, #24]	; (80037e4 <FreqO_ApplyPreset+0x50>)
 80037ca:	68bb      	ldr	r3, [r7, #8]
 80037cc:	6013      	str	r3, [r2, #0]
		{
			DM_SetErrorDebugMsg("FreqO_ApplyPreset() null pointer error");
		}

	}
}
 80037ce:	e002      	b.n	80037d6 <FreqO_ApplyPreset+0x42>
			DM_SetErrorDebugMsg("FreqO_ApplyPreset() null pointer error");
 80037d0:	4805      	ldr	r0, [pc, #20]	; (80037e8 <FreqO_ApplyPreset+0x54>)
 80037d2:	f7fd ff37 	bl	8001644 <DM_SetErrorDebugMsg>
}
 80037d6:	bf00      	nop
 80037d8:	3710      	adds	r7, #16
 80037da:	46bd      	mov	sp, r7
 80037dc:	bd80      	pop	{r7, pc}
 80037de:	bf00      	nop
 80037e0:	40013400 	.word	0x40013400
 80037e4:	20000198 	.word	0x20000198
 80037e8:	0800eea0 	.word	0x0800eea0

080037ec <FreqO_GetFPresetObject>:
 *	@param None
 *	@retval pointer to Freq_Preset_Encoder_Pos_t struct
 *
 */
Freq_Preset_Encoder_Pos_t * FreqO_GetFPresetObject()
{
 80037ec:	b480      	push	{r7}
 80037ee:	af00      	add	r7, sp, #0
	return pNewFreqPresetEncoderPos;
 80037f0:	4b03      	ldr	r3, [pc, #12]	; (8003800 <FreqO_GetFPresetObject+0x14>)
 80037f2:	681b      	ldr	r3, [r3, #0]
}
 80037f4:	4618      	mov	r0, r3
 80037f6:	46bd      	mov	sp, r7
 80037f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037fc:	4770      	bx	lr
 80037fe:	bf00      	nop
 8003800:	20000198 	.word	0x20000198

08003804 <FreqO_FindFPresetObject>:

 *	@retval pointer to Freq_Preset_Encoder_Pos_t struct
 *
 */
Freq_Preset_Encoder_Pos_t * FreqO_FindFPresetObject(eFreq_Preset pEnum)
{
 8003804:	b580      	push	{r7, lr}
 8003806:	b084      	sub	sp, #16
 8003808:	af00      	add	r7, sp, #0
 800380a:	6078      	str	r0, [r7, #4]
	for(int i = 0; i < MAX_NUM_FREQ_PRESETS; i++ )
 800380c:	2300      	movs	r3, #0
 800380e:	60fb      	str	r3, [r7, #12]
 8003810:	e00e      	b.n	8003830 <FreqO_FindFPresetObject+0x2c>
	{
		if(aFreqPresetEncoderPos[i].hertz == pEnum)
 8003812:	4a0d      	ldr	r2, [pc, #52]	; (8003848 <FreqO_FindFPresetObject+0x44>)
 8003814:	68fb      	ldr	r3, [r7, #12]
 8003816:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 800381a:	687a      	ldr	r2, [r7, #4]
 800381c:	429a      	cmp	r2, r3
 800381e:	d104      	bne.n	800382a <FreqO_FindFPresetObject+0x26>
		{
			return &aFreqPresetEncoderPos[i];
 8003820:	68fb      	ldr	r3, [r7, #12]
 8003822:	00db      	lsls	r3, r3, #3
 8003824:	4a08      	ldr	r2, [pc, #32]	; (8003848 <FreqO_FindFPresetObject+0x44>)
 8003826:	4413      	add	r3, r2
 8003828:	e009      	b.n	800383e <FreqO_FindFPresetObject+0x3a>
	for(int i = 0; i < MAX_NUM_FREQ_PRESETS; i++ )
 800382a:	68fb      	ldr	r3, [r7, #12]
 800382c:	3301      	adds	r3, #1
 800382e:	60fb      	str	r3, [r7, #12]
 8003830:	68fb      	ldr	r3, [r7, #12]
 8003832:	2b0d      	cmp	r3, #13
 8003834:	dded      	ble.n	8003812 <FreqO_FindFPresetObject+0xe>
		}
	}
	// error!
	DM_SetErrorDebugMsg("FreqO_FindFPresetObject(): no FPreset obj found");
 8003836:	4805      	ldr	r0, [pc, #20]	; (800384c <FreqO_FindFPresetObject+0x48>)
 8003838:	f7fd ff04 	bl	8001644 <DM_SetErrorDebugMsg>
	return 0;
 800383c:	2300      	movs	r3, #0
}
 800383e:	4618      	mov	r0, r3
 8003840:	3710      	adds	r7, #16
 8003842:	46bd      	mov	sp, r7
 8003844:	bd80      	pop	{r7, pc}
 8003846:	bf00      	nop
 8003848:	20000128 	.word	0x20000128
 800384c:	0800eec8 	.word	0x0800eec8

08003850 <FreqO_GetFreqPresetEncoderRange>:
 *	@param None
 *	@retval uint8_t
 *
 */
uint8_t FreqO_GetFreqPresetEncoderRange()
{
 8003850:	b480      	push	{r7}
 8003852:	af00      	add	r7, sp, #0
	return FreqPresetEncoderRange;
 8003854:	4b03      	ldr	r3, [pc, #12]	; (8003864 <FreqO_GetFreqPresetEncoderRange+0x14>)
 8003856:	781b      	ldrb	r3, [r3, #0]
}
 8003858:	4618      	mov	r0, r3
 800385a:	46bd      	mov	sp, r7
 800385c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003860:	4770      	bx	lr
 8003862:	bf00      	nop
 8003864:	20000124 	.word	0x20000124

08003868 <FreqO_GetOutputFreq>:
 *	@param None
 *	@retval uint32_t
 *
 */
uint32_t FreqO_GetOutputFreq()
{
 8003868:	b480      	push	{r7}
 800386a:	af00      	add	r7, sp, #0
	return TIM8->ARR;
 800386c:	4b03      	ldr	r3, [pc, #12]	; (800387c <FreqO_GetOutputFreq+0x14>)
 800386e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
}
 8003870:	4618      	mov	r0, r3
 8003872:	46bd      	mov	sp, r7
 8003874:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003878:	4770      	bx	lr
 800387a:	bf00      	nop
 800387c:	40013400 	.word	0x40013400

08003880 <FuncO_Init>:
#include "SignalManager.h"

uint32_t *pOriginalDataTable = sine_data_table_1300;

void FuncO_Init()
{
 8003880:	b480      	push	{r7}
 8003882:	b083      	sub	sp, #12
 8003884:	af00      	add	r7, sp, #0
	for(int i = 0; i < SINE_DATA_SIZE; i++)
 8003886:	2300      	movs	r3, #0
 8003888:	607b      	str	r3, [r7, #4]
 800388a:	e00a      	b.n	80038a2 <FuncO_Init+0x22>
		aModdedDataTable[i] = sine_data_table_1300[i];
 800388c:	4a09      	ldr	r2, [pc, #36]	; (80038b4 <FuncO_Init+0x34>)
 800388e:	687b      	ldr	r3, [r7, #4]
 8003890:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8003894:	4908      	ldr	r1, [pc, #32]	; (80038b8 <FuncO_Init+0x38>)
 8003896:	687b      	ldr	r3, [r7, #4]
 8003898:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
	for(int i = 0; i < SINE_DATA_SIZE; i++)
 800389c:	687b      	ldr	r3, [r7, #4]
 800389e:	3301      	adds	r3, #1
 80038a0:	607b      	str	r3, [r7, #4]
 80038a2:	687b      	ldr	r3, [r7, #4]
 80038a4:	2b77      	cmp	r3, #119	; 0x77
 80038a6:	ddf1      	ble.n	800388c <FuncO_Init+0xc>
}
 80038a8:	bf00      	nop
 80038aa:	370c      	adds	r7, #12
 80038ac:	46bd      	mov	sp, r7
 80038ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038b2:	4770      	bx	lr
 80038b4:	20000cb4 	.word	0x20000cb4
 80038b8:	20001674 	.word	0x20001674

080038bc <FuncO_ModifyOutput>:
 *	@param None
 *	@retval None
 *
 */
void FuncO_ModifyOutput(uint16_t pEncoderValue)
{
 80038bc:	b580      	push	{r7, lr}
 80038be:	b082      	sub	sp, #8
 80038c0:	af00      	add	r7, sp, #0
 80038c2:	4603      	mov	r3, r0
 80038c4:	80fb      	strh	r3, [r7, #6]


	switch(pEncoderValue)
 80038c6:	88fb      	ldrh	r3, [r7, #6]
 80038c8:	2b17      	cmp	r3, #23
 80038ca:	d84b      	bhi.n	8003964 <FuncO_ModifyOutput+0xa8>
 80038cc:	a201      	add	r2, pc, #4	; (adr r2, 80038d4 <FuncO_ModifyOutput+0x18>)
 80038ce:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80038d2:	bf00      	nop
 80038d4:	08003935 	.word	0x08003935
 80038d8:	08003935 	.word	0x08003935
 80038dc:	08003935 	.word	0x08003935
 80038e0:	0800393d 	.word	0x0800393d
 80038e4:	0800393d 	.word	0x0800393d
 80038e8:	0800393d 	.word	0x0800393d
 80038ec:	0800393d 	.word	0x0800393d
 80038f0:	08003945 	.word	0x08003945
 80038f4:	08003945 	.word	0x08003945
 80038f8:	08003945 	.word	0x08003945
 80038fc:	08003945 	.word	0x08003945
 8003900:	0800394d 	.word	0x0800394d
 8003904:	0800394d 	.word	0x0800394d
 8003908:	0800394d 	.word	0x0800394d
 800390c:	0800394d 	.word	0x0800394d
 8003910:	08003955 	.word	0x08003955
 8003914:	08003955 	.word	0x08003955
 8003918:	08003955 	.word	0x08003955
 800391c:	08003955 	.word	0x08003955
 8003920:	0800395d 	.word	0x0800395d
 8003924:	0800395d 	.word	0x0800395d
 8003928:	0800395d 	.word	0x0800395d
 800392c:	0800395d 	.word	0x0800395d
 8003930:	0800395d 	.word	0x0800395d
	{
		case 0:
		case 1:
		case 2:

			FuncO_ApplyPreset_Fast(SINE_FUNC_MODE);
 8003934:	2000      	movs	r0, #0
 8003936:	f000 f819 	bl	800396c <FuncO_ApplyPreset_Fast>
			break;
 800393a:	e013      	b.n	8003964 <FuncO_ModifyOutput+0xa8>
		case 3:
		case 4:
		case 5:
		case 6:

			FuncO_ApplyPreset_Fast(SQUARE_FUNC_MODE);
 800393c:	2001      	movs	r0, #1
 800393e:	f000 f815 	bl	800396c <FuncO_ApplyPreset_Fast>

			break;
 8003942:	e00f      	b.n	8003964 <FuncO_ModifyOutput+0xa8>
		case 7:
		case 8:
		case 9:
		case 10:

			FuncO_ApplyPreset_Fast(SAW_FUNC_MODE);
 8003944:	2002      	movs	r0, #2
 8003946:	f000 f811 	bl	800396c <FuncO_ApplyPreset_Fast>
			break;
 800394a:	e00b      	b.n	8003964 <FuncO_ModifyOutput+0xa8>
		case 11:
		case 12:
		case 13:
		case 14:

			FuncO_ApplyPreset_Fast(REV_SAW_FUNC_MODE);
 800394c:	2003      	movs	r0, #3
 800394e:	f000 f80d 	bl	800396c <FuncO_ApplyPreset_Fast>
			break;
 8003952:	e007      	b.n	8003964 <FuncO_ModifyOutput+0xa8>
		case 15:
		case 16:
		case 17:
		case 18:

			FuncO_ApplyPreset_Fast(TRIANGLE_FUNC_MODE);
 8003954:	2004      	movs	r0, #4
 8003956:	f000 f809 	bl	800396c <FuncO_ApplyPreset_Fast>
			break;
 800395a:	e003      	b.n	8003964 <FuncO_ModifyOutput+0xa8>
		case 20:
		case 21:
		case 22:
		case 23:

			FuncO_ApplyPreset_Fast(IMPULSE_FUNC_MODE);
 800395c:	2005      	movs	r0, #5
 800395e:	f000 f805 	bl	800396c <FuncO_ApplyPreset_Fast>
			break;
 8003962:	bf00      	nop
	}
}
 8003964:	bf00      	nop
 8003966:	3708      	adds	r7, #8
 8003968:	46bd      	mov	sp, r7
 800396a:	bd80      	pop	{r7, pc}

0800396c <FuncO_ApplyPreset_Fast>:

 *	@retval None
 *
 */
void FuncO_ApplyPreset_Fast(eOutput_mode pPresetEnum)
{
 800396c:	b580      	push	{r7, lr}
 800396e:	b084      	sub	sp, #16
 8003970:	af02      	add	r7, sp, #8
 8003972:	4603      	mov	r3, r0
 8003974:	71fb      	strb	r3, [r7, #7]

	switch(pPresetEnum)
 8003976:	79fb      	ldrb	r3, [r7, #7]
 8003978:	2b05      	cmp	r3, #5
 800397a:	d86b      	bhi.n	8003a54 <FuncO_ApplyPreset_Fast+0xe8>
 800397c:	a201      	add	r2, pc, #4	; (adr r2, 8003984 <FuncO_ApplyPreset_Fast+0x18>)
 800397e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003982:	bf00      	nop
 8003984:	0800399d 	.word	0x0800399d
 8003988:	080039b5 	.word	0x080039b5
 800398c:	080039d5 	.word	0x080039d5
 8003990:	080039f5 	.word	0x080039f5
 8003994:	08003a15 	.word	0x08003a15
 8003998:	08003a35 	.word	0x08003a35
	{
		case SINE_FUNC_MODE:
			pNewFuncPresetEncoderPos = &aFuncPresetEncoderPos[0];
 800399c:	4b2f      	ldr	r3, [pc, #188]	; (8003a5c <FuncO_ApplyPreset_Fast+0xf0>)
 800399e:	4a30      	ldr	r2, [pc, #192]	; (8003a60 <FuncO_ApplyPreset_Fast+0xf4>)
 80039a0:	601a      	str	r2, [r3, #0]
			//HAL_DAC_Stop_DMA(&hdac1, DAC1_CHANNEL_1);
			HAL_DAC_Start_DMA(&hdac1, DAC1_CHANNEL_1, (uint32_t*)aModdedDataTable, SINE_DATA_SIZE, DAC_ALIGN_12B_R);
 80039a2:	2300      	movs	r3, #0
 80039a4:	9300      	str	r3, [sp, #0]
 80039a6:	2378      	movs	r3, #120	; 0x78
 80039a8:	4a2e      	ldr	r2, [pc, #184]	; (8003a64 <FuncO_ApplyPreset_Fast+0xf8>)
 80039aa:	2100      	movs	r1, #0
 80039ac:	482e      	ldr	r0, [pc, #184]	; (8003a68 <FuncO_ApplyPreset_Fast+0xfc>)
 80039ae:	f003 fd5d 	bl	800746c <HAL_DAC_Start_DMA>
			break;
 80039b2:	e04f      	b.n	8003a54 <FuncO_ApplyPreset_Fast+0xe8>

		case SQUARE_FUNC_MODE:
			pNewFuncPresetEncoderPos = &aFuncPresetEncoderPos[1];
 80039b4:	4b29      	ldr	r3, [pc, #164]	; (8003a5c <FuncO_ApplyPreset_Fast+0xf0>)
 80039b6:	4a2d      	ldr	r2, [pc, #180]	; (8003a6c <FuncO_ApplyPreset_Fast+0x100>)
 80039b8:	601a      	str	r2, [r3, #0]
			HAL_DAC_Stop_DMA(&hdac1, DAC1_CHANNEL_1);
 80039ba:	2100      	movs	r1, #0
 80039bc:	482a      	ldr	r0, [pc, #168]	; (8003a68 <FuncO_ApplyPreset_Fast+0xfc>)
 80039be:	f003 fe17 	bl	80075f0 <HAL_DAC_Stop_DMA>
			HAL_DAC_Start_DMA(&hdac1, DAC1_CHANNEL_1, square_data_table, SQUARE_DATA_SIZE, DAC_ALIGN_12B_R);
 80039c2:	2300      	movs	r3, #0
 80039c4:	9300      	str	r3, [sp, #0]
 80039c6:	2378      	movs	r3, #120	; 0x78
 80039c8:	4a29      	ldr	r2, [pc, #164]	; (8003a70 <FuncO_ApplyPreset_Fast+0x104>)
 80039ca:	2100      	movs	r1, #0
 80039cc:	4826      	ldr	r0, [pc, #152]	; (8003a68 <FuncO_ApplyPreset_Fast+0xfc>)
 80039ce:	f003 fd4d 	bl	800746c <HAL_DAC_Start_DMA>
			break;
 80039d2:	e03f      	b.n	8003a54 <FuncO_ApplyPreset_Fast+0xe8>

		case SAW_FUNC_MODE:
			pNewFuncPresetEncoderPos = &aFuncPresetEncoderPos[2];
 80039d4:	4b21      	ldr	r3, [pc, #132]	; (8003a5c <FuncO_ApplyPreset_Fast+0xf0>)
 80039d6:	4a27      	ldr	r2, [pc, #156]	; (8003a74 <FuncO_ApplyPreset_Fast+0x108>)
 80039d8:	601a      	str	r2, [r3, #0]
			HAL_DAC_Stop_DMA(&hdac1, DAC1_CHANNEL_1);
 80039da:	2100      	movs	r1, #0
 80039dc:	4822      	ldr	r0, [pc, #136]	; (8003a68 <FuncO_ApplyPreset_Fast+0xfc>)
 80039de:	f003 fe07 	bl	80075f0 <HAL_DAC_Stop_DMA>
			HAL_DAC_Start_DMA(&hdac1, DAC1_CHANNEL_1, saw_data_table, SAW_DATA_SIZE, DAC_ALIGN_12B_R);
 80039e2:	2300      	movs	r3, #0
 80039e4:	9300      	str	r3, [sp, #0]
 80039e6:	2378      	movs	r3, #120	; 0x78
 80039e8:	4a23      	ldr	r2, [pc, #140]	; (8003a78 <FuncO_ApplyPreset_Fast+0x10c>)
 80039ea:	2100      	movs	r1, #0
 80039ec:	481e      	ldr	r0, [pc, #120]	; (8003a68 <FuncO_ApplyPreset_Fast+0xfc>)
 80039ee:	f003 fd3d 	bl	800746c <HAL_DAC_Start_DMA>
			break;
 80039f2:	e02f      	b.n	8003a54 <FuncO_ApplyPreset_Fast+0xe8>

		case REV_SAW_FUNC_MODE:
			pNewFuncPresetEncoderPos = &aFuncPresetEncoderPos[3];
 80039f4:	4b19      	ldr	r3, [pc, #100]	; (8003a5c <FuncO_ApplyPreset_Fast+0xf0>)
 80039f6:	4a21      	ldr	r2, [pc, #132]	; (8003a7c <FuncO_ApplyPreset_Fast+0x110>)
 80039f8:	601a      	str	r2, [r3, #0]
			HAL_DAC_Stop_DMA(&hdac1, DAC1_CHANNEL_1);
 80039fa:	2100      	movs	r1, #0
 80039fc:	481a      	ldr	r0, [pc, #104]	; (8003a68 <FuncO_ApplyPreset_Fast+0xfc>)
 80039fe:	f003 fdf7 	bl	80075f0 <HAL_DAC_Stop_DMA>
			HAL_DAC_Start_DMA(&hdac1, DAC1_CHANNEL_1, saw_rev_data_table, SAW_REV_DATA_SIZE, DAC_ALIGN_12B_R);
 8003a02:	2300      	movs	r3, #0
 8003a04:	9300      	str	r3, [sp, #0]
 8003a06:	2378      	movs	r3, #120	; 0x78
 8003a08:	4a1d      	ldr	r2, [pc, #116]	; (8003a80 <FuncO_ApplyPreset_Fast+0x114>)
 8003a0a:	2100      	movs	r1, #0
 8003a0c:	4816      	ldr	r0, [pc, #88]	; (8003a68 <FuncO_ApplyPreset_Fast+0xfc>)
 8003a0e:	f003 fd2d 	bl	800746c <HAL_DAC_Start_DMA>
			break;
 8003a12:	e01f      	b.n	8003a54 <FuncO_ApplyPreset_Fast+0xe8>

		case TRIANGLE_FUNC_MODE:
			pNewFuncPresetEncoderPos = &aFuncPresetEncoderPos[4];
 8003a14:	4b11      	ldr	r3, [pc, #68]	; (8003a5c <FuncO_ApplyPreset_Fast+0xf0>)
 8003a16:	4a1b      	ldr	r2, [pc, #108]	; (8003a84 <FuncO_ApplyPreset_Fast+0x118>)
 8003a18:	601a      	str	r2, [r3, #0]
			HAL_DAC_Stop_DMA(&hdac1, DAC1_CHANNEL_1);
 8003a1a:	2100      	movs	r1, #0
 8003a1c:	4812      	ldr	r0, [pc, #72]	; (8003a68 <FuncO_ApplyPreset_Fast+0xfc>)
 8003a1e:	f003 fde7 	bl	80075f0 <HAL_DAC_Stop_DMA>
			HAL_DAC_Start_DMA(&hdac1, DAC1_CHANNEL_1, triangle_data_table, TRIANGLE_DATA_SIZE, DAC_ALIGN_12B_R);
 8003a22:	2300      	movs	r3, #0
 8003a24:	9300      	str	r3, [sp, #0]
 8003a26:	2378      	movs	r3, #120	; 0x78
 8003a28:	4a17      	ldr	r2, [pc, #92]	; (8003a88 <FuncO_ApplyPreset_Fast+0x11c>)
 8003a2a:	2100      	movs	r1, #0
 8003a2c:	480e      	ldr	r0, [pc, #56]	; (8003a68 <FuncO_ApplyPreset_Fast+0xfc>)
 8003a2e:	f003 fd1d 	bl	800746c <HAL_DAC_Start_DMA>
			break;
 8003a32:	e00f      	b.n	8003a54 <FuncO_ApplyPreset_Fast+0xe8>

		case IMPULSE_FUNC_MODE:
			pNewFuncPresetEncoderPos = &aFuncPresetEncoderPos[5];
 8003a34:	4b09      	ldr	r3, [pc, #36]	; (8003a5c <FuncO_ApplyPreset_Fast+0xf0>)
 8003a36:	4a15      	ldr	r2, [pc, #84]	; (8003a8c <FuncO_ApplyPreset_Fast+0x120>)
 8003a38:	601a      	str	r2, [r3, #0]
			HAL_DAC_Stop_DMA(&hdac1, DAC1_CHANNEL_1);
 8003a3a:	2100      	movs	r1, #0
 8003a3c:	480a      	ldr	r0, [pc, #40]	; (8003a68 <FuncO_ApplyPreset_Fast+0xfc>)
 8003a3e:	f003 fdd7 	bl	80075f0 <HAL_DAC_Stop_DMA>
			HAL_DAC_Start_DMA(&hdac1, DAC1_CHANNEL_1, unitimpulse_data_table, UNITIMPULSE_DATA_SIZE,  DAC_ALIGN_12B_R);
 8003a42:	2300      	movs	r3, #0
 8003a44:	9300      	str	r3, [sp, #0]
 8003a46:	2378      	movs	r3, #120	; 0x78
 8003a48:	4a11      	ldr	r2, [pc, #68]	; (8003a90 <FuncO_ApplyPreset_Fast+0x124>)
 8003a4a:	2100      	movs	r1, #0
 8003a4c:	4806      	ldr	r0, [pc, #24]	; (8003a68 <FuncO_ApplyPreset_Fast+0xfc>)
 8003a4e:	f003 fd0d 	bl	800746c <HAL_DAC_Start_DMA>
			break;
 8003a52:	bf00      	nop

	//
	}

}
 8003a54:	bf00      	nop
 8003a56:	3708      	adds	r7, #8
 8003a58:	46bd      	mov	sp, r7
 8003a5a:	bd80      	pop	{r7, pc}
 8003a5c:	200001ac 	.word	0x200001ac
 8003a60:	200001a0 	.word	0x200001a0
 8003a64:	20001674 	.word	0x20001674
 8003a68:	20001b38 	.word	0x20001b38
 8003a6c:	200001a2 	.word	0x200001a2
 8003a70:	20000e94 	.word	0x20000e94
 8003a74:	200001a4 	.word	0x200001a4
 8003a78:	20000714 	.word	0x20000714
 8003a7c:	200001a6 	.word	0x200001a6
 8003a80:	200008f4 	.word	0x200008f4
 8003a84:	200001a8 	.word	0x200001a8
 8003a88:	20001074 	.word	0x20001074
 8003a8c:	200001aa 	.word	0x200001aa
 8003a90:	20001254 	.word	0x20001254

08003a94 <FuncO_GetFPresetObject>:
 *	@param None
 *	@retval pointer to Func_Preset_Encoder_Pos_t struct
 *
 */
Func_Preset_Encoder_Pos_t * FuncO_GetFPresetObject()
{
 8003a94:	b480      	push	{r7}
 8003a96:	af00      	add	r7, sp, #0
	return pNewFuncPresetEncoderPos;
 8003a98:	4b03      	ldr	r3, [pc, #12]	; (8003aa8 <FuncO_GetFPresetObject+0x14>)
 8003a9a:	681b      	ldr	r3, [r3, #0]
}
 8003a9c:	4618      	mov	r0, r3
 8003a9e:	46bd      	mov	sp, r7
 8003aa0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003aa4:	4770      	bx	lr
 8003aa6:	bf00      	nop
 8003aa8:	200001ac 	.word	0x200001ac

08003aac <FuncO_GetFuncPresetEncoderRange>:
 *	@param None
 *	@retval uint8_t
 *
 */
uint8_t FuncO_GetFuncPresetEncoderRange()
{
 8003aac:	b480      	push	{r7}
 8003aae:	af00      	add	r7, sp, #0
	return FuncPresetEncoderRange;
 8003ab0:	4b03      	ldr	r3, [pc, #12]	; (8003ac0 <FuncO_GetFuncPresetEncoderRange+0x14>)
 8003ab2:	781b      	ldrb	r3, [r3, #0]
}
 8003ab4:	4618      	mov	r0, r3
 8003ab6:	46bd      	mov	sp, r7
 8003ab8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003abc:	4770      	bx	lr
 8003abe:	bf00      	nop
 8003ac0:	2000019c 	.word	0x2000019c

08003ac4 <GO_ModifyOutput>:
// signal output gain
eOutput_gain eNewOutGain = ONE_GAIN;


void GO_ModifyOutput(uint16_t pEncoderValue)
{
 8003ac4:	b580      	push	{r7, lr}
 8003ac6:	b082      	sub	sp, #8
 8003ac8:	af00      	add	r7, sp, #0
 8003aca:	4603      	mov	r3, r0
 8003acc:	80fb      	strh	r3, [r7, #6]


	switch(pEncoderValue)
 8003ace:	88fb      	ldrh	r3, [r7, #6]
 8003ad0:	2b1e      	cmp	r3, #30
 8003ad2:	d861      	bhi.n	8003b98 <GO_ModifyOutput+0xd4>
 8003ad4:	a201      	add	r2, pc, #4	; (adr r2, 8003adc <GO_ModifyOutput+0x18>)
 8003ad6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003ada:	bf00      	nop
 8003adc:	08003b59 	.word	0x08003b59
 8003ae0:	08003b59 	.word	0x08003b59
 8003ae4:	08003b59 	.word	0x08003b59
 8003ae8:	08003b61 	.word	0x08003b61
 8003aec:	08003b61 	.word	0x08003b61
 8003af0:	08003b61 	.word	0x08003b61
 8003af4:	08003b61 	.word	0x08003b61
 8003af8:	08003b69 	.word	0x08003b69
 8003afc:	08003b69 	.word	0x08003b69
 8003b00:	08003b69 	.word	0x08003b69
 8003b04:	08003b69 	.word	0x08003b69
 8003b08:	08003b71 	.word	0x08003b71
 8003b0c:	08003b71 	.word	0x08003b71
 8003b10:	08003b71 	.word	0x08003b71
 8003b14:	08003b71 	.word	0x08003b71
 8003b18:	08003b79 	.word	0x08003b79
 8003b1c:	08003b79 	.word	0x08003b79
 8003b20:	08003b79 	.word	0x08003b79
 8003b24:	08003b79 	.word	0x08003b79
 8003b28:	08003b81 	.word	0x08003b81
 8003b2c:	08003b81 	.word	0x08003b81
 8003b30:	08003b81 	.word	0x08003b81
 8003b34:	08003b81 	.word	0x08003b81
 8003b38:	08003b89 	.word	0x08003b89
 8003b3c:	08003b89 	.word	0x08003b89
 8003b40:	08003b89 	.word	0x08003b89
 8003b44:	08003b89 	.word	0x08003b89
 8003b48:	08003b91 	.word	0x08003b91
 8003b4c:	08003b91 	.word	0x08003b91
 8003b50:	08003b91 	.word	0x08003b91
 8003b54:	08003b91 	.word	0x08003b91
	{
		case 0:
		case 1:
		case 2:
			GO_ApplyPreset_Fast(ZERO_GAIN);
 8003b58:	2000      	movs	r0, #0
 8003b5a:	f000 f821 	bl	8003ba0 <GO_ApplyPreset_Fast>
			//FuncO_SetNewDataTable(pNewGainPresetEncoderPos->data_table);
			break;
 8003b5e:	e01b      	b.n	8003b98 <GO_ModifyOutput+0xd4>
		case 3:
		case 4:
		case 5:
		case 6:
			GO_ApplyPreset_Fast(ONE_GAIN);
 8003b60:	2001      	movs	r0, #1
 8003b62:	f000 f81d 	bl	8003ba0 <GO_ApplyPreset_Fast>
			//FuncO_SetNewDataTable(pNewGainPresetEncoderPos->data_table);
			break;
 8003b66:	e017      	b.n	8003b98 <GO_ModifyOutput+0xd4>
		case 7:
		case 8:
		case 9:
		case 10:
			GO_ApplyPreset_Fast(TWO_GAIN);
 8003b68:	2002      	movs	r0, #2
 8003b6a:	f000 f819 	bl	8003ba0 <GO_ApplyPreset_Fast>
			//FuncO_SetNewDataTable(pNewGainPresetEncoderPos->data_table);
			break;
 8003b6e:	e013      	b.n	8003b98 <GO_ModifyOutput+0xd4>
		case 11:
		case 12:
		case 13:
		case 14:
			GO_ApplyPreset_Fast(THREE_GAIN);
 8003b70:	2003      	movs	r0, #3
 8003b72:	f000 f815 	bl	8003ba0 <GO_ApplyPreset_Fast>
			//FuncO_SetNewDataTable(pNewGainPresetEncoderPos->data_table);
			break;
 8003b76:	e00f      	b.n	8003b98 <GO_ModifyOutput+0xd4>
		case 15:
		case 16:
		case 17:
		case 18:
			GO_ApplyPreset_Fast(FOUR_GAIN);
 8003b78:	2004      	movs	r0, #4
 8003b7a:	f000 f811 	bl	8003ba0 <GO_ApplyPreset_Fast>
			//FuncO_SetNewDataTable(pNewGainPresetEncoderPos->data_table);
			break;
 8003b7e:	e00b      	b.n	8003b98 <GO_ModifyOutput+0xd4>
		case 19:
		case 20:
		case 21:
		case 22:
			GO_ApplyPreset_Fast(FIVE_GAIN);
 8003b80:	2005      	movs	r0, #5
 8003b82:	f000 f80d 	bl	8003ba0 <GO_ApplyPreset_Fast>
			//FuncO_SetNewDataTable(pNewGainPresetEncoderPos->data_table);
			break;
 8003b86:	e007      	b.n	8003b98 <GO_ModifyOutput+0xd4>
		case 23:
		case 24:
		case 25:
		case 26:
			GO_ApplyPreset_Fast(SIX_GAIN);
 8003b88:	2006      	movs	r0, #6
 8003b8a:	f000 f809 	bl	8003ba0 <GO_ApplyPreset_Fast>
			//FuncO_SetNewDataTable(pNewGainPresetEncoderPos->data_table);
			break;
 8003b8e:	e003      	b.n	8003b98 <GO_ModifyOutput+0xd4>
		case 27:
		case 28:
		case 29:
		case 30:
			GO_ApplyPreset_Fast(SEVEN_GAIN);
 8003b90:	2007      	movs	r0, #7
 8003b92:	f000 f805 	bl	8003ba0 <GO_ApplyPreset_Fast>
			//FuncO_SetNewDataTable(pNewGainPresetEncoderPos->data_table);
			break;
 8003b96:	bf00      	nop


	}
}
 8003b98:	bf00      	nop
 8003b9a:	3708      	adds	r7, #8
 8003b9c:	46bd      	mov	sp, r7
 8003b9e:	bd80      	pop	{r7, pc}

08003ba0 <GO_ApplyPreset_Fast>:
 *	@param None
 *	@retval None
 *
 */
void GO_ApplyPreset_Fast(eOutput_gain pPresetEnum)
{
 8003ba0:	b580      	push	{r7, lr}
 8003ba2:	b082      	sub	sp, #8
 8003ba4:	af00      	add	r7, sp, #0
 8003ba6:	4603      	mov	r3, r0
 8003ba8:	71fb      	strb	r3, [r7, #7]



	switch(pPresetEnum)
 8003baa:	79fb      	ldrb	r3, [r7, #7]
 8003bac:	2b07      	cmp	r3, #7
 8003bae:	f200 80ab 	bhi.w	8003d08 <GO_ApplyPreset_Fast+0x168>
 8003bb2:	a201      	add	r2, pc, #4	; (adr r2, 8003bb8 <GO_ApplyPreset_Fast+0x18>)
 8003bb4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003bb8:	08003bd9 	.word	0x08003bd9
 8003bbc:	08003bff 	.word	0x08003bff
 8003bc0:	08003c25 	.word	0x08003c25
 8003bc4:	08003c4b 	.word	0x08003c4b
 8003bc8:	08003c71 	.word	0x08003c71
 8003bcc:	08003c97 	.word	0x08003c97
 8003bd0:	08003cbd 	.word	0x08003cbd
 8003bd4:	08003ce3 	.word	0x08003ce3
	{
		case ZERO_GAIN:
			pNewGainPresetEncoderPos = &aGainPresetEncoderPos[0];
 8003bd8:	4b4d      	ldr	r3, [pc, #308]	; (8003d10 <GO_ApplyPreset_Fast+0x170>)
 8003bda:	4a4e      	ldr	r2, [pc, #312]	; (8003d14 <GO_ApplyPreset_Fast+0x174>)
 8003bdc:	601a      	str	r2, [r3, #0]
			HAL_GPIO_WritePin(SG0_GPIO_Port, SG0_Pin, GPIO_PIN_RESET);
 8003bde:	2200      	movs	r2, #0
 8003be0:	2101      	movs	r1, #1
 8003be2:	484d      	ldr	r0, [pc, #308]	; (8003d18 <GO_ApplyPreset_Fast+0x178>)
 8003be4:	f004 fc30 	bl	8008448 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(SG1_GPIO_Port, SG1_Pin, GPIO_PIN_RESET);
 8003be8:	2200      	movs	r2, #0
 8003bea:	2120      	movs	r1, #32
 8003bec:	484b      	ldr	r0, [pc, #300]	; (8003d1c <GO_ApplyPreset_Fast+0x17c>)
 8003bee:	f004 fc2b 	bl	8008448 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(SG2_GPIO_Port, SG2_Pin, GPIO_PIN_RESET);
 8003bf2:	2200      	movs	r2, #0
 8003bf4:	2110      	movs	r1, #16
 8003bf6:	4849      	ldr	r0, [pc, #292]	; (8003d1c <GO_ApplyPreset_Fast+0x17c>)
 8003bf8:	f004 fc26 	bl	8008448 <HAL_GPIO_WritePin>
			break;
 8003bfc:	e084      	b.n	8003d08 <GO_ApplyPreset_Fast+0x168>

		case ONE_GAIN:
			pNewGainPresetEncoderPos = &aGainPresetEncoderPos[1];
 8003bfe:	4b44      	ldr	r3, [pc, #272]	; (8003d10 <GO_ApplyPreset_Fast+0x170>)
 8003c00:	4a47      	ldr	r2, [pc, #284]	; (8003d20 <GO_ApplyPreset_Fast+0x180>)
 8003c02:	601a      	str	r2, [r3, #0]
			HAL_GPIO_WritePin(SG0_GPIO_Port, SG0_Pin, GPIO_PIN_SET);
 8003c04:	2201      	movs	r2, #1
 8003c06:	2101      	movs	r1, #1
 8003c08:	4843      	ldr	r0, [pc, #268]	; (8003d18 <GO_ApplyPreset_Fast+0x178>)
 8003c0a:	f004 fc1d 	bl	8008448 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(SG1_GPIO_Port, SG1_Pin, GPIO_PIN_RESET);
 8003c0e:	2200      	movs	r2, #0
 8003c10:	2120      	movs	r1, #32
 8003c12:	4842      	ldr	r0, [pc, #264]	; (8003d1c <GO_ApplyPreset_Fast+0x17c>)
 8003c14:	f004 fc18 	bl	8008448 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(SG2_GPIO_Port, SG2_Pin, GPIO_PIN_RESET);
 8003c18:	2200      	movs	r2, #0
 8003c1a:	2110      	movs	r1, #16
 8003c1c:	483f      	ldr	r0, [pc, #252]	; (8003d1c <GO_ApplyPreset_Fast+0x17c>)
 8003c1e:	f004 fc13 	bl	8008448 <HAL_GPIO_WritePin>
			break;
 8003c22:	e071      	b.n	8003d08 <GO_ApplyPreset_Fast+0x168>

		case TWO_GAIN:
			pNewGainPresetEncoderPos = &aGainPresetEncoderPos[2];
 8003c24:	4b3a      	ldr	r3, [pc, #232]	; (8003d10 <GO_ApplyPreset_Fast+0x170>)
 8003c26:	4a3f      	ldr	r2, [pc, #252]	; (8003d24 <GO_ApplyPreset_Fast+0x184>)
 8003c28:	601a      	str	r2, [r3, #0]
			HAL_GPIO_WritePin(SG0_GPIO_Port, SG0_Pin, GPIO_PIN_RESET);
 8003c2a:	2200      	movs	r2, #0
 8003c2c:	2101      	movs	r1, #1
 8003c2e:	483a      	ldr	r0, [pc, #232]	; (8003d18 <GO_ApplyPreset_Fast+0x178>)
 8003c30:	f004 fc0a 	bl	8008448 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(SG1_GPIO_Port, SG1_Pin, GPIO_PIN_SET);
 8003c34:	2201      	movs	r2, #1
 8003c36:	2120      	movs	r1, #32
 8003c38:	4838      	ldr	r0, [pc, #224]	; (8003d1c <GO_ApplyPreset_Fast+0x17c>)
 8003c3a:	f004 fc05 	bl	8008448 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(SG2_GPIO_Port, SG2_Pin, GPIO_PIN_RESET);
 8003c3e:	2200      	movs	r2, #0
 8003c40:	2110      	movs	r1, #16
 8003c42:	4836      	ldr	r0, [pc, #216]	; (8003d1c <GO_ApplyPreset_Fast+0x17c>)
 8003c44:	f004 fc00 	bl	8008448 <HAL_GPIO_WritePin>
			break;
 8003c48:	e05e      	b.n	8003d08 <GO_ApplyPreset_Fast+0x168>

		case THREE_GAIN:
			pNewGainPresetEncoderPos = &aGainPresetEncoderPos[3];
 8003c4a:	4b31      	ldr	r3, [pc, #196]	; (8003d10 <GO_ApplyPreset_Fast+0x170>)
 8003c4c:	4a36      	ldr	r2, [pc, #216]	; (8003d28 <GO_ApplyPreset_Fast+0x188>)
 8003c4e:	601a      	str	r2, [r3, #0]
			HAL_GPIO_WritePin(SG0_GPIO_Port, SG0_Pin, GPIO_PIN_SET);
 8003c50:	2201      	movs	r2, #1
 8003c52:	2101      	movs	r1, #1
 8003c54:	4830      	ldr	r0, [pc, #192]	; (8003d18 <GO_ApplyPreset_Fast+0x178>)
 8003c56:	f004 fbf7 	bl	8008448 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(SG1_GPIO_Port, SG1_Pin, GPIO_PIN_SET);
 8003c5a:	2201      	movs	r2, #1
 8003c5c:	2120      	movs	r1, #32
 8003c5e:	482f      	ldr	r0, [pc, #188]	; (8003d1c <GO_ApplyPreset_Fast+0x17c>)
 8003c60:	f004 fbf2 	bl	8008448 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(SG2_GPIO_Port, SG2_Pin, GPIO_PIN_RESET);
 8003c64:	2200      	movs	r2, #0
 8003c66:	2110      	movs	r1, #16
 8003c68:	482c      	ldr	r0, [pc, #176]	; (8003d1c <GO_ApplyPreset_Fast+0x17c>)
 8003c6a:	f004 fbed 	bl	8008448 <HAL_GPIO_WritePin>
			break;
 8003c6e:	e04b      	b.n	8003d08 <GO_ApplyPreset_Fast+0x168>

		case FOUR_GAIN:
			pNewGainPresetEncoderPos = &aGainPresetEncoderPos[4];
 8003c70:	4b27      	ldr	r3, [pc, #156]	; (8003d10 <GO_ApplyPreset_Fast+0x170>)
 8003c72:	4a2e      	ldr	r2, [pc, #184]	; (8003d2c <GO_ApplyPreset_Fast+0x18c>)
 8003c74:	601a      	str	r2, [r3, #0]
			HAL_GPIO_WritePin(SG0_GPIO_Port, SG0_Pin, GPIO_PIN_RESET);
 8003c76:	2200      	movs	r2, #0
 8003c78:	2101      	movs	r1, #1
 8003c7a:	4827      	ldr	r0, [pc, #156]	; (8003d18 <GO_ApplyPreset_Fast+0x178>)
 8003c7c:	f004 fbe4 	bl	8008448 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(SG1_GPIO_Port, SG1_Pin, GPIO_PIN_RESET);
 8003c80:	2200      	movs	r2, #0
 8003c82:	2120      	movs	r1, #32
 8003c84:	4825      	ldr	r0, [pc, #148]	; (8003d1c <GO_ApplyPreset_Fast+0x17c>)
 8003c86:	f004 fbdf 	bl	8008448 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(SG2_GPIO_Port, SG2_Pin, GPIO_PIN_SET);
 8003c8a:	2201      	movs	r2, #1
 8003c8c:	2110      	movs	r1, #16
 8003c8e:	4823      	ldr	r0, [pc, #140]	; (8003d1c <GO_ApplyPreset_Fast+0x17c>)
 8003c90:	f004 fbda 	bl	8008448 <HAL_GPIO_WritePin>
			break;
 8003c94:	e038      	b.n	8003d08 <GO_ApplyPreset_Fast+0x168>

		case FIVE_GAIN:
			pNewGainPresetEncoderPos = &aGainPresetEncoderPos[5];
 8003c96:	4b1e      	ldr	r3, [pc, #120]	; (8003d10 <GO_ApplyPreset_Fast+0x170>)
 8003c98:	4a25      	ldr	r2, [pc, #148]	; (8003d30 <GO_ApplyPreset_Fast+0x190>)
 8003c9a:	601a      	str	r2, [r3, #0]
			HAL_GPIO_WritePin(SG0_GPIO_Port, SG0_Pin, GPIO_PIN_SET);
 8003c9c:	2201      	movs	r2, #1
 8003c9e:	2101      	movs	r1, #1
 8003ca0:	481d      	ldr	r0, [pc, #116]	; (8003d18 <GO_ApplyPreset_Fast+0x178>)
 8003ca2:	f004 fbd1 	bl	8008448 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(SG1_GPIO_Port, SG1_Pin, GPIO_PIN_RESET);
 8003ca6:	2200      	movs	r2, #0
 8003ca8:	2120      	movs	r1, #32
 8003caa:	481c      	ldr	r0, [pc, #112]	; (8003d1c <GO_ApplyPreset_Fast+0x17c>)
 8003cac:	f004 fbcc 	bl	8008448 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(SG2_GPIO_Port, SG2_Pin, GPIO_PIN_SET);
 8003cb0:	2201      	movs	r2, #1
 8003cb2:	2110      	movs	r1, #16
 8003cb4:	4819      	ldr	r0, [pc, #100]	; (8003d1c <GO_ApplyPreset_Fast+0x17c>)
 8003cb6:	f004 fbc7 	bl	8008448 <HAL_GPIO_WritePin>
			break;
 8003cba:	e025      	b.n	8003d08 <GO_ApplyPreset_Fast+0x168>

		case SIX_GAIN:
			pNewGainPresetEncoderPos = &aGainPresetEncoderPos[6];
 8003cbc:	4b14      	ldr	r3, [pc, #80]	; (8003d10 <GO_ApplyPreset_Fast+0x170>)
 8003cbe:	4a1d      	ldr	r2, [pc, #116]	; (8003d34 <GO_ApplyPreset_Fast+0x194>)
 8003cc0:	601a      	str	r2, [r3, #0]
			HAL_GPIO_WritePin(SG0_GPIO_Port, SG0_Pin, GPIO_PIN_RESET);
 8003cc2:	2200      	movs	r2, #0
 8003cc4:	2101      	movs	r1, #1
 8003cc6:	4814      	ldr	r0, [pc, #80]	; (8003d18 <GO_ApplyPreset_Fast+0x178>)
 8003cc8:	f004 fbbe 	bl	8008448 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(SG1_GPIO_Port, SG1_Pin, GPIO_PIN_SET);
 8003ccc:	2201      	movs	r2, #1
 8003cce:	2120      	movs	r1, #32
 8003cd0:	4812      	ldr	r0, [pc, #72]	; (8003d1c <GO_ApplyPreset_Fast+0x17c>)
 8003cd2:	f004 fbb9 	bl	8008448 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(SG2_GPIO_Port, SG2_Pin, GPIO_PIN_SET);
 8003cd6:	2201      	movs	r2, #1
 8003cd8:	2110      	movs	r1, #16
 8003cda:	4810      	ldr	r0, [pc, #64]	; (8003d1c <GO_ApplyPreset_Fast+0x17c>)
 8003cdc:	f004 fbb4 	bl	8008448 <HAL_GPIO_WritePin>
			break;
 8003ce0:	e012      	b.n	8003d08 <GO_ApplyPreset_Fast+0x168>

		case SEVEN_GAIN:
			pNewGainPresetEncoderPos = &aGainPresetEncoderPos[7];
 8003ce2:	4b0b      	ldr	r3, [pc, #44]	; (8003d10 <GO_ApplyPreset_Fast+0x170>)
 8003ce4:	4a14      	ldr	r2, [pc, #80]	; (8003d38 <GO_ApplyPreset_Fast+0x198>)
 8003ce6:	601a      	str	r2, [r3, #0]
			HAL_GPIO_WritePin(SG0_GPIO_Port, SG0_Pin, GPIO_PIN_SET);
 8003ce8:	2201      	movs	r2, #1
 8003cea:	2101      	movs	r1, #1
 8003cec:	480a      	ldr	r0, [pc, #40]	; (8003d18 <GO_ApplyPreset_Fast+0x178>)
 8003cee:	f004 fbab 	bl	8008448 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(SG1_GPIO_Port, SG1_Pin, GPIO_PIN_SET);
 8003cf2:	2201      	movs	r2, #1
 8003cf4:	2120      	movs	r1, #32
 8003cf6:	4809      	ldr	r0, [pc, #36]	; (8003d1c <GO_ApplyPreset_Fast+0x17c>)
 8003cf8:	f004 fba6 	bl	8008448 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(SG2_GPIO_Port, SG2_Pin, GPIO_PIN_SET);
 8003cfc:	2201      	movs	r2, #1
 8003cfe:	2110      	movs	r1, #16
 8003d00:	4806      	ldr	r0, [pc, #24]	; (8003d1c <GO_ApplyPreset_Fast+0x17c>)
 8003d02:	f004 fba1 	bl	8008448 <HAL_GPIO_WritePin>
			break;
 8003d06:	bf00      	nop
	}
}
 8003d08:	bf00      	nop
 8003d0a:	3708      	adds	r7, #8
 8003d0c:	46bd      	mov	sp, r7
 8003d0e:	bd80      	pop	{r7, pc}
 8003d10:	200001f4 	.word	0x200001f4
 8003d14:	200001b4 	.word	0x200001b4
 8003d18:	48000400 	.word	0x48000400
 8003d1c:	48000800 	.word	0x48000800
 8003d20:	200001bc 	.word	0x200001bc
 8003d24:	200001c4 	.word	0x200001c4
 8003d28:	200001cc 	.word	0x200001cc
 8003d2c:	200001d4 	.word	0x200001d4
 8003d30:	200001dc 	.word	0x200001dc
 8003d34:	200001e4 	.word	0x200001e4
 8003d38:	200001ec 	.word	0x200001ec

08003d3c <GO_GetGPresetObject>:
 *	@param None
 *	@retval None
 *
 */
Gain_Preset_Encoder_Pos_t * GO_GetGPresetObject()
{
 8003d3c:	b480      	push	{r7}
 8003d3e:	af00      	add	r7, sp, #0
	return pNewGainPresetEncoderPos;
 8003d40:	4b03      	ldr	r3, [pc, #12]	; (8003d50 <GO_GetGPresetObject+0x14>)
 8003d42:	681b      	ldr	r3, [r3, #0]
}
 8003d44:	4618      	mov	r0, r3
 8003d46:	46bd      	mov	sp, r7
 8003d48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d4c:	4770      	bx	lr
 8003d4e:	bf00      	nop
 8003d50:	200001f4 	.word	0x200001f4

08003d54 <GO_GetGainPresetEncoderRange>:
 *	@param None
 *	@retval None
 *
 */
uint8_t GO_GetGainPresetEncoderRange()
{
 8003d54:	b480      	push	{r7}
 8003d56:	af00      	add	r7, sp, #0
	return GainPresetEncoderRange;
 8003d58:	4b03      	ldr	r3, [pc, #12]	; (8003d68 <GO_GetGainPresetEncoderRange+0x14>)
 8003d5a:	781b      	ldrb	r3, [r3, #0]
}
 8003d5c:	4618      	mov	r0, r3
 8003d5e:	46bd      	mov	sp, r7
 8003d60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d64:	4770      	bx	lr
 8003d66:	bf00      	nop
 8003d68:	200001f8 	.word	0x200001f8

08003d6c <SM_GetEncoderValue>:
 *	@param None
 *	@retval None
 *
 */
uint16_t SM_GetEncoderValue(eEncoder_Direction direction)
{
 8003d6c:	b480      	push	{r7}
 8003d6e:	b083      	sub	sp, #12
 8003d70:	af00      	add	r7, sp, #0
 8003d72:	4603      	mov	r3, r0
 8003d74:	71fb      	strb	r3, [r7, #7]
	if(direction)
 8003d76:	79fb      	ldrb	r3, [r7, #7]
 8003d78:	2b00      	cmp	r3, #0
 8003d7a:	d008      	beq.n	8003d8e <SM_GetEncoderValue+0x22>
	{
		return ENCODER_TIMER->ARR - ENCODER_TIMER->CNT;
 8003d7c:	4b08      	ldr	r3, [pc, #32]	; (8003da0 <SM_GetEncoderValue+0x34>)
 8003d7e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003d80:	b29a      	uxth	r2, r3
 8003d82:	4b07      	ldr	r3, [pc, #28]	; (8003da0 <SM_GetEncoderValue+0x34>)
 8003d84:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d86:	b29b      	uxth	r3, r3
 8003d88:	1ad3      	subs	r3, r2, r3
 8003d8a:	b29b      	uxth	r3, r3
 8003d8c:	e002      	b.n	8003d94 <SM_GetEncoderValue+0x28>
	}
	else
	{
		return ENCODER_TIMER->CNT;
 8003d8e:	4b04      	ldr	r3, [pc, #16]	; (8003da0 <SM_GetEncoderValue+0x34>)
 8003d90:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d92:	b29b      	uxth	r3, r3
	}
}
 8003d94:	4618      	mov	r0, r3
 8003d96:	370c      	adds	r7, #12
 8003d98:	46bd      	mov	sp, r7
 8003d9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d9e:	4770      	bx	lr
 8003da0:	40012c00 	.word	0x40012c00

08003da4 <SM_GetOutputInHertz>:
 *	@param None
 *	@retval None
 *
 */
float SM_GetOutputInHertz()
{
 8003da4:	b480      	push	{r7}
 8003da6:	b085      	sub	sp, #20
 8003da8:	af00      	add	r7, sp, #0
	volatile float tim8_psc;
	volatile float tim8_arr;

	// safe-guard against divide by zero
	(TIM8->PSC == 0) ? (tim8_psc = 1) : (tim8_psc = TIM8->PSC);
 8003daa:	4b1d      	ldr	r3, [pc, #116]	; (8003e20 <SM_GetOutputInHertz+0x7c>)
 8003dac:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003dae:	2b00      	cmp	r3, #0
 8003db0:	d103      	bne.n	8003dba <SM_GetOutputInHertz+0x16>
 8003db2:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 8003db6:	60bb      	str	r3, [r7, #8]
 8003db8:	e007      	b.n	8003dca <SM_GetOutputInHertz+0x26>
 8003dba:	4b19      	ldr	r3, [pc, #100]	; (8003e20 <SM_GetOutputInHertz+0x7c>)
 8003dbc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003dbe:	ee07 3a90 	vmov	s15, r3
 8003dc2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003dc6:	edc7 7a02 	vstr	s15, [r7, #8]
	(TIM8->ARR == 0) ? (tim8_arr = 1) : (tim8_arr = TIM8->ARR);
 8003dca:	4b15      	ldr	r3, [pc, #84]	; (8003e20 <SM_GetOutputInHertz+0x7c>)
 8003dcc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003dce:	2b00      	cmp	r3, #0
 8003dd0:	d103      	bne.n	8003dda <SM_GetOutputInHertz+0x36>
 8003dd2:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 8003dd6:	607b      	str	r3, [r7, #4]
 8003dd8:	e007      	b.n	8003dea <SM_GetOutputInHertz+0x46>
 8003dda:	4b11      	ldr	r3, [pc, #68]	; (8003e20 <SM_GetOutputInHertz+0x7c>)
 8003ddc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003dde:	ee07 3a90 	vmov	s15, r3
 8003de2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003de6:	edc7 7a01 	vstr	s15, [r7, #4]

	float tim8_freq = SM_MCLK / (tim8_psc * tim8_arr);
 8003dea:	ed97 7a02 	vldr	s14, [r7, #8]
 8003dee:	edd7 7a01 	vldr	s15, [r7, #4]
 8003df2:	ee27 7a27 	vmul.f32	s14, s14, s15
 8003df6:	eddf 6a0b 	vldr	s13, [pc, #44]	; 8003e24 <SM_GetOutputInHertz+0x80>
 8003dfa:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8003dfe:	edc7 7a03 	vstr	s15, [r7, #12]


	return tim8_freq / SM_FSAMP;
 8003e02:	edd7 7a03 	vldr	s15, [r7, #12]
 8003e06:	ed9f 7a08 	vldr	s14, [pc, #32]	; 8003e28 <SM_GetOutputInHertz+0x84>
 8003e0a:	eec7 6a87 	vdiv.f32	s13, s15, s14
 8003e0e:	eef0 7a66 	vmov.f32	s15, s13
}
 8003e12:	eeb0 0a67 	vmov.f32	s0, s15
 8003e16:	3714      	adds	r7, #20
 8003e18:	46bd      	mov	sp, r7
 8003e1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e1e:	4770      	bx	lr
 8003e20:	40013400 	.word	0x40013400
 8003e24:	4d2037a0 	.word	0x4d2037a0
 8003e28:	42f00000 	.word	0x42f00000

08003e2c <MX_ADC1_Init>:
ADC_HandleTypeDef hadc1;
DMA_HandleTypeDef hdma_adc1;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 8003e2c:	b580      	push	{r7, lr}
 8003e2e:	b08c      	sub	sp, #48	; 0x30
 8003e30:	af00      	add	r7, sp, #0
  ADC_MultiModeTypeDef multimode = {0};
 8003e32:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003e36:	2200      	movs	r2, #0
 8003e38:	601a      	str	r2, [r3, #0]
 8003e3a:	605a      	str	r2, [r3, #4]
 8003e3c:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 8003e3e:	1d3b      	adds	r3, r7, #4
 8003e40:	2220      	movs	r2, #32
 8003e42:	2100      	movs	r1, #0
 8003e44:	4618      	mov	r0, r3
 8003e46:	f008 f94b 	bl	800c0e0 <memset>

  /** Common config 
  */
  hadc1.Instance = ADC1;
 8003e4a:	4b32      	ldr	r3, [pc, #200]	; (8003f14 <MX_ADC1_Init+0xe8>)
 8003e4c:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8003e50:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 8003e52:	4b30      	ldr	r3, [pc, #192]	; (8003f14 <MX_ADC1_Init+0xe8>)
 8003e54:	2200      	movs	r2, #0
 8003e56:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8003e58:	4b2e      	ldr	r3, [pc, #184]	; (8003f14 <MX_ADC1_Init+0xe8>)
 8003e5a:	2200      	movs	r2, #0
 8003e5c:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8003e5e:	4b2d      	ldr	r3, [pc, #180]	; (8003f14 <MX_ADC1_Init+0xe8>)
 8003e60:	2200      	movs	r2, #0
 8003e62:	60da      	str	r2, [r3, #12]
  hadc1.Init.GainCompensation = 0;
 8003e64:	4b2b      	ldr	r3, [pc, #172]	; (8003f14 <MX_ADC1_Init+0xe8>)
 8003e66:	2200      	movs	r2, #0
 8003e68:	611a      	str	r2, [r3, #16]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8003e6a:	4b2a      	ldr	r3, [pc, #168]	; (8003f14 <MX_ADC1_Init+0xe8>)
 8003e6c:	2200      	movs	r2, #0
 8003e6e:	615a      	str	r2, [r3, #20]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8003e70:	4b28      	ldr	r3, [pc, #160]	; (8003f14 <MX_ADC1_Init+0xe8>)
 8003e72:	2204      	movs	r2, #4
 8003e74:	619a      	str	r2, [r3, #24]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8003e76:	4b27      	ldr	r3, [pc, #156]	; (8003f14 <MX_ADC1_Init+0xe8>)
 8003e78:	2200      	movs	r2, #0
 8003e7a:	771a      	strb	r2, [r3, #28]
  hadc1.Init.ContinuousConvMode = ENABLE;
 8003e7c:	4b25      	ldr	r3, [pc, #148]	; (8003f14 <MX_ADC1_Init+0xe8>)
 8003e7e:	2201      	movs	r2, #1
 8003e80:	775a      	strb	r2, [r3, #29]
  hadc1.Init.NbrOfConversion = 1;
 8003e82:	4b24      	ldr	r3, [pc, #144]	; (8003f14 <MX_ADC1_Init+0xe8>)
 8003e84:	2201      	movs	r2, #1
 8003e86:	621a      	str	r2, [r3, #32]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8003e88:	4b22      	ldr	r3, [pc, #136]	; (8003f14 <MX_ADC1_Init+0xe8>)
 8003e8a:	2200      	movs	r2, #0
 8003e8c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8003e90:	4b20      	ldr	r3, [pc, #128]	; (8003f14 <MX_ADC1_Init+0xe8>)
 8003e92:	2200      	movs	r2, #0
 8003e94:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8003e96:	4b1f      	ldr	r3, [pc, #124]	; (8003f14 <MX_ADC1_Init+0xe8>)
 8003e98:	2200      	movs	r2, #0
 8003e9a:	631a      	str	r2, [r3, #48]	; 0x30
  hadc1.Init.DMAContinuousRequests = ENABLE;
 8003e9c:	4b1d      	ldr	r3, [pc, #116]	; (8003f14 <MX_ADC1_Init+0xe8>)
 8003e9e:	2201      	movs	r2, #1
 8003ea0:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hadc1.Init.Overrun = ADC_OVR_DATA_OVERWRITTEN;
 8003ea4:	4b1b      	ldr	r3, [pc, #108]	; (8003f14 <MX_ADC1_Init+0xe8>)
 8003ea6:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8003eaa:	63da      	str	r2, [r3, #60]	; 0x3c
  hadc1.Init.OversamplingMode = DISABLE;
 8003eac:	4b19      	ldr	r3, [pc, #100]	; (8003f14 <MX_ADC1_Init+0xe8>)
 8003eae:	2200      	movs	r2, #0
 8003eb0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8003eb4:	4817      	ldr	r0, [pc, #92]	; (8003f14 <MX_ADC1_Init+0xe8>)
 8003eb6:	f001 ffd7 	bl	8005e68 <HAL_ADC_Init>
 8003eba:	4603      	mov	r3, r0
 8003ebc:	2b00      	cmp	r3, #0
 8003ebe:	d001      	beq.n	8003ec4 <MX_ADC1_Init+0x98>
  {
    Error_Handler();
 8003ec0:	f000 ff2c 	bl	8004d1c <Error_Handler>
  }
  /** Configure the ADC multi-mode 
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 8003ec4:	2300      	movs	r3, #0
 8003ec6:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 8003ec8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003ecc:	4619      	mov	r1, r3
 8003ece:	4811      	ldr	r0, [pc, #68]	; (8003f14 <MX_ADC1_Init+0xe8>)
 8003ed0:	f002 fd60 	bl	8006994 <HAL_ADCEx_MultiModeConfigChannel>
 8003ed4:	4603      	mov	r3, r0
 8003ed6:	2b00      	cmp	r3, #0
 8003ed8:	d001      	beq.n	8003ede <MX_ADC1_Init+0xb2>
  {
    Error_Handler();
 8003eda:	f000 ff1f 	bl	8004d1c <Error_Handler>
  }
  /** Configure Regular Channel 
  */
  sConfig.Channel = ADC_CHANNEL_3;
 8003ede:	4b0e      	ldr	r3, [pc, #56]	; (8003f18 <MX_ADC1_Init+0xec>)
 8003ee0:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8003ee2:	2306      	movs	r3, #6
 8003ee4:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 8003ee6:	2300      	movs	r3, #0
 8003ee8:	60fb      	str	r3, [r7, #12]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8003eea:	237f      	movs	r3, #127	; 0x7f
 8003eec:	613b      	str	r3, [r7, #16]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8003eee:	2304      	movs	r3, #4
 8003ef0:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 8003ef2:	2300      	movs	r3, #0
 8003ef4:	61bb      	str	r3, [r7, #24]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8003ef6:	1d3b      	adds	r3, r7, #4
 8003ef8:	4619      	mov	r1, r3
 8003efa:	4806      	ldr	r0, [pc, #24]	; (8003f14 <MX_ADC1_Init+0xe8>)
 8003efc:	f002 f974 	bl	80061e8 <HAL_ADC_ConfigChannel>
 8003f00:	4603      	mov	r3, r0
 8003f02:	2b00      	cmp	r3, #0
 8003f04:	d001      	beq.n	8003f0a <MX_ADC1_Init+0xde>
  {
    Error_Handler();
 8003f06:	f000 ff09 	bl	8004d1c <Error_Handler>
  }

}
 8003f0a:	bf00      	nop
 8003f0c:	3730      	adds	r7, #48	; 0x30
 8003f0e:	46bd      	mov	sp, r7
 8003f10:	bd80      	pop	{r7, pc}
 8003f12:	bf00      	nop
 8003f14:	20001a34 	.word	0x20001a34
 8003f18:	0c900008 	.word	0x0c900008

08003f1c <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 8003f1c:	b580      	push	{r7, lr}
 8003f1e:	b08a      	sub	sp, #40	; 0x28
 8003f20:	af00      	add	r7, sp, #0
 8003f22:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003f24:	f107 0314 	add.w	r3, r7, #20
 8003f28:	2200      	movs	r2, #0
 8003f2a:	601a      	str	r2, [r3, #0]
 8003f2c:	605a      	str	r2, [r3, #4]
 8003f2e:	609a      	str	r2, [r3, #8]
 8003f30:	60da      	str	r2, [r3, #12]
 8003f32:	611a      	str	r2, [r3, #16]
  if(adcHandle->Instance==ADC1)
 8003f34:	687b      	ldr	r3, [r7, #4]
 8003f36:	681b      	ldr	r3, [r3, #0]
 8003f38:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8003f3c:	d14f      	bne.n	8003fde <HAL_ADC_MspInit+0xc2>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* ADC1 clock enable */
    __HAL_RCC_ADC12_CLK_ENABLE();
 8003f3e:	4b2a      	ldr	r3, [pc, #168]	; (8003fe8 <HAL_ADC_MspInit+0xcc>)
 8003f40:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003f42:	4a29      	ldr	r2, [pc, #164]	; (8003fe8 <HAL_ADC_MspInit+0xcc>)
 8003f44:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8003f48:	64d3      	str	r3, [r2, #76]	; 0x4c
 8003f4a:	4b27      	ldr	r3, [pc, #156]	; (8003fe8 <HAL_ADC_MspInit+0xcc>)
 8003f4c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003f4e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003f52:	613b      	str	r3, [r7, #16]
 8003f54:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003f56:	4b24      	ldr	r3, [pc, #144]	; (8003fe8 <HAL_ADC_MspInit+0xcc>)
 8003f58:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003f5a:	4a23      	ldr	r2, [pc, #140]	; (8003fe8 <HAL_ADC_MspInit+0xcc>)
 8003f5c:	f043 0301 	orr.w	r3, r3, #1
 8003f60:	64d3      	str	r3, [r2, #76]	; 0x4c
 8003f62:	4b21      	ldr	r3, [pc, #132]	; (8003fe8 <HAL_ADC_MspInit+0xcc>)
 8003f64:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003f66:	f003 0301 	and.w	r3, r3, #1
 8003f6a:	60fb      	str	r3, [r7, #12]
 8003f6c:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration    
    PA2     ------> ADC1_IN3 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8003f6e:	2304      	movs	r3, #4
 8003f70:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8003f72:	2303      	movs	r3, #3
 8003f74:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003f76:	2300      	movs	r3, #0
 8003f78:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003f7a:	f107 0314 	add.w	r3, r7, #20
 8003f7e:	4619      	mov	r1, r3
 8003f80:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8003f84:	f004 f8de 	bl	8008144 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Channel1;
 8003f88:	4b18      	ldr	r3, [pc, #96]	; (8003fec <HAL_ADC_MspInit+0xd0>)
 8003f8a:	4a19      	ldr	r2, [pc, #100]	; (8003ff0 <HAL_ADC_MspInit+0xd4>)
 8003f8c:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Request = DMA_REQUEST_ADC1;
 8003f8e:	4b17      	ldr	r3, [pc, #92]	; (8003fec <HAL_ADC_MspInit+0xd0>)
 8003f90:	2205      	movs	r2, #5
 8003f92:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8003f94:	4b15      	ldr	r3, [pc, #84]	; (8003fec <HAL_ADC_MspInit+0xd0>)
 8003f96:	2200      	movs	r2, #0
 8003f98:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8003f9a:	4b14      	ldr	r3, [pc, #80]	; (8003fec <HAL_ADC_MspInit+0xd0>)
 8003f9c:	2200      	movs	r2, #0
 8003f9e:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8003fa0:	4b12      	ldr	r3, [pc, #72]	; (8003fec <HAL_ADC_MspInit+0xd0>)
 8003fa2:	2280      	movs	r2, #128	; 0x80
 8003fa4:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8003fa6:	4b11      	ldr	r3, [pc, #68]	; (8003fec <HAL_ADC_MspInit+0xd0>)
 8003fa8:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003fac:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8003fae:	4b0f      	ldr	r3, [pc, #60]	; (8003fec <HAL_ADC_MspInit+0xd0>)
 8003fb0:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8003fb4:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 8003fb6:	4b0d      	ldr	r3, [pc, #52]	; (8003fec <HAL_ADC_MspInit+0xd0>)
 8003fb8:	2220      	movs	r2, #32
 8003fba:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 8003fbc:	4b0b      	ldr	r3, [pc, #44]	; (8003fec <HAL_ADC_MspInit+0xd0>)
 8003fbe:	2200      	movs	r2, #0
 8003fc0:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8003fc2:	480a      	ldr	r0, [pc, #40]	; (8003fec <HAL_ADC_MspInit+0xd0>)
 8003fc4:	f003 fdf2 	bl	8007bac <HAL_DMA_Init>
 8003fc8:	4603      	mov	r3, r0
 8003fca:	2b00      	cmp	r3, #0
 8003fcc:	d001      	beq.n	8003fd2 <HAL_ADC_MspInit+0xb6>
    {
      Error_Handler();
 8003fce:	f000 fea5 	bl	8004d1c <Error_Handler>
    }

    __HAL_LINKDMA(adcHandle,DMA_Handle,hdma_adc1);
 8003fd2:	687b      	ldr	r3, [r7, #4]
 8003fd4:	4a05      	ldr	r2, [pc, #20]	; (8003fec <HAL_ADC_MspInit+0xd0>)
 8003fd6:	655a      	str	r2, [r3, #84]	; 0x54
 8003fd8:	4a04      	ldr	r2, [pc, #16]	; (8003fec <HAL_ADC_MspInit+0xd0>)
 8003fda:	687b      	ldr	r3, [r7, #4]
 8003fdc:	6293      	str	r3, [r2, #40]	; 0x28

  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 8003fde:	bf00      	nop
 8003fe0:	3728      	adds	r7, #40	; 0x28
 8003fe2:	46bd      	mov	sp, r7
 8003fe4:	bd80      	pop	{r7, pc}
 8003fe6:	bf00      	nop
 8003fe8:	40021000 	.word	0x40021000
 8003fec:	20001aa0 	.word	0x20001aa0
 8003ff0:	40020008 	.word	0x40020008

08003ff4 <MX_COMP1_Init>:

COMP_HandleTypeDef hcomp1;

/* COMP1 init function */
void MX_COMP1_Init(void)
{
 8003ff4:	b580      	push	{r7, lr}
 8003ff6:	af00      	add	r7, sp, #0

  hcomp1.Instance = COMP1;
 8003ff8:	4b0f      	ldr	r3, [pc, #60]	; (8004038 <MX_COMP1_Init+0x44>)
 8003ffa:	4a10      	ldr	r2, [pc, #64]	; (800403c <MX_COMP1_Init+0x48>)
 8003ffc:	601a      	str	r2, [r3, #0]
  hcomp1.Init.InputPlus = COMP_INPUT_PLUS_IO1;
 8003ffe:	4b0e      	ldr	r3, [pc, #56]	; (8004038 <MX_COMP1_Init+0x44>)
 8004000:	2200      	movs	r2, #0
 8004002:	605a      	str	r2, [r3, #4]
  hcomp1.Init.InputMinus = COMP_INPUT_MINUS_VREFINT;
 8004004:	4b0c      	ldr	r3, [pc, #48]	; (8004038 <MX_COMP1_Init+0x44>)
 8004006:	4a0e      	ldr	r2, [pc, #56]	; (8004040 <MX_COMP1_Init+0x4c>)
 8004008:	609a      	str	r2, [r3, #8]
  hcomp1.Init.OutputPol = COMP_OUTPUTPOL_NONINVERTED;
 800400a:	4b0b      	ldr	r3, [pc, #44]	; (8004038 <MX_COMP1_Init+0x44>)
 800400c:	2200      	movs	r2, #0
 800400e:	611a      	str	r2, [r3, #16]
  hcomp1.Init.Hysteresis = COMP_HYSTERESIS_NONE;
 8004010:	4b09      	ldr	r3, [pc, #36]	; (8004038 <MX_COMP1_Init+0x44>)
 8004012:	2200      	movs	r2, #0
 8004014:	60da      	str	r2, [r3, #12]
  hcomp1.Init.BlankingSrce = COMP_BLANKINGSRC_NONE;
 8004016:	4b08      	ldr	r3, [pc, #32]	; (8004038 <MX_COMP1_Init+0x44>)
 8004018:	2200      	movs	r2, #0
 800401a:	615a      	str	r2, [r3, #20]
  hcomp1.Init.TriggerMode = COMP_TRIGGERMODE_NONE;
 800401c:	4b06      	ldr	r3, [pc, #24]	; (8004038 <MX_COMP1_Init+0x44>)
 800401e:	2200      	movs	r2, #0
 8004020:	619a      	str	r2, [r3, #24]
  if (HAL_COMP_Init(&hcomp1) != HAL_OK)
 8004022:	4805      	ldr	r0, [pc, #20]	; (8004038 <MX_COMP1_Init+0x44>)
 8004024:	f002 ff0a 	bl	8006e3c <HAL_COMP_Init>
 8004028:	4603      	mov	r3, r0
 800402a:	2b00      	cmp	r3, #0
 800402c:	d001      	beq.n	8004032 <MX_COMP1_Init+0x3e>
  {
    Error_Handler();
 800402e:	f000 fe75 	bl	8004d1c <Error_Handler>
  }

}
 8004032:	bf00      	nop
 8004034:	bd80      	pop	{r7, pc}
 8004036:	bf00      	nop
 8004038:	20001b00 	.word	0x20001b00
 800403c:	40010200 	.word	0x40010200
 8004040:	00800030 	.word	0x00800030

08004044 <HAL_COMP_MspInit>:

void HAL_COMP_MspInit(COMP_HandleTypeDef* compHandle)
{
 8004044:	b580      	push	{r7, lr}
 8004046:	b088      	sub	sp, #32
 8004048:	af00      	add	r7, sp, #0
 800404a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800404c:	f107 030c 	add.w	r3, r7, #12
 8004050:	2200      	movs	r2, #0
 8004052:	601a      	str	r2, [r3, #0]
 8004054:	605a      	str	r2, [r3, #4]
 8004056:	609a      	str	r2, [r3, #8]
 8004058:	60da      	str	r2, [r3, #12]
 800405a:	611a      	str	r2, [r3, #16]
  if(compHandle->Instance==COMP1)
 800405c:	687b      	ldr	r3, [r7, #4]
 800405e:	681b      	ldr	r3, [r3, #0]
 8004060:	4a0f      	ldr	r2, [pc, #60]	; (80040a0 <HAL_COMP_MspInit+0x5c>)
 8004062:	4293      	cmp	r3, r2
 8004064:	d118      	bne.n	8004098 <HAL_COMP_MspInit+0x54>
  {
  /* USER CODE BEGIN COMP1_MspInit 0 */

  /* USER CODE END COMP1_MspInit 0 */
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8004066:	4b0f      	ldr	r3, [pc, #60]	; (80040a4 <HAL_COMP_MspInit+0x60>)
 8004068:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800406a:	4a0e      	ldr	r2, [pc, #56]	; (80040a4 <HAL_COMP_MspInit+0x60>)
 800406c:	f043 0301 	orr.w	r3, r3, #1
 8004070:	64d3      	str	r3, [r2, #76]	; 0x4c
 8004072:	4b0c      	ldr	r3, [pc, #48]	; (80040a4 <HAL_COMP_MspInit+0x60>)
 8004074:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004076:	f003 0301 	and.w	r3, r3, #1
 800407a:	60bb      	str	r3, [r7, #8]
 800407c:	68bb      	ldr	r3, [r7, #8]
    /**COMP1 GPIO Configuration    
    PA1     ------> COMP1_INP 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 800407e:	2302      	movs	r3, #2
 8004080:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8004082:	2303      	movs	r3, #3
 8004084:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004086:	2300      	movs	r3, #0
 8004088:	617b      	str	r3, [r7, #20]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800408a:	f107 030c 	add.w	r3, r7, #12
 800408e:	4619      	mov	r1, r3
 8004090:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8004094:	f004 f856 	bl	8008144 <HAL_GPIO_Init>

  /* USER CODE BEGIN COMP1_MspInit 1 */

  /* USER CODE END COMP1_MspInit 1 */
  }
}
 8004098:	bf00      	nop
 800409a:	3720      	adds	r7, #32
 800409c:	46bd      	mov	sp, r7
 800409e:	bd80      	pop	{r7, pc}
 80040a0:	40010200 	.word	0x40010200
 80040a4:	40021000 	.word	0x40021000

080040a8 <MX_DAC1_Init>:
DMA_HandleTypeDef hdma_dac1_ch1;
DMA_HandleTypeDef hdma_dac2_ch1;

/* DAC1 init function */
void MX_DAC1_Init(void)
{
 80040a8:	b580      	push	{r7, lr}
 80040aa:	b08c      	sub	sp, #48	; 0x30
 80040ac:	af00      	add	r7, sp, #0
  DAC_ChannelConfTypeDef sConfig = {0};
 80040ae:	463b      	mov	r3, r7
 80040b0:	2230      	movs	r2, #48	; 0x30
 80040b2:	2100      	movs	r1, #0
 80040b4:	4618      	mov	r0, r3
 80040b6:	f008 f813 	bl	800c0e0 <memset>

  /** DAC Initialization 
  */
  hdac1.Instance = DAC1;
 80040ba:	4b1e      	ldr	r3, [pc, #120]	; (8004134 <MX_DAC1_Init+0x8c>)
 80040bc:	4a1e      	ldr	r2, [pc, #120]	; (8004138 <MX_DAC1_Init+0x90>)
 80040be:	601a      	str	r2, [r3, #0]
  if (HAL_DAC_Init(&hdac1) != HAL_OK)
 80040c0:	481c      	ldr	r0, [pc, #112]	; (8004134 <MX_DAC1_Init+0x8c>)
 80040c2:	f003 f95e 	bl	8007382 <HAL_DAC_Init>
 80040c6:	4603      	mov	r3, r0
 80040c8:	2b00      	cmp	r3, #0
 80040ca:	d001      	beq.n	80040d0 <MX_DAC1_Init+0x28>
  {
    Error_Handler();
 80040cc:	f000 fe26 	bl	8004d1c <Error_Handler>
  }
  /** DAC channel OUT1 config 
  */
  sConfig.DAC_HighFrequency = DAC_HIGH_FREQUENCY_INTERFACE_MODE_ABOVE_80MHZ;
 80040d0:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80040d4:	603b      	str	r3, [r7, #0]
  sConfig.DAC_DMADoubleDataMode = DISABLE;
 80040d6:	2300      	movs	r3, #0
 80040d8:	713b      	strb	r3, [r7, #4]
  sConfig.DAC_SignedFormat = DISABLE;
 80040da:	2300      	movs	r3, #0
 80040dc:	717b      	strb	r3, [r7, #5]
  sConfig.DAC_SampleAndHold = DAC_SAMPLEANDHOLD_DISABLE;
 80040de:	2300      	movs	r3, #0
 80040e0:	60bb      	str	r3, [r7, #8]
  sConfig.DAC_Trigger = DAC_TRIGGER_T8_TRGO;
 80040e2:	2306      	movs	r3, #6
 80040e4:	60fb      	str	r3, [r7, #12]
  sConfig.DAC_Trigger2 = DAC_TRIGGER_NONE;
 80040e6:	2300      	movs	r3, #0
 80040e8:	613b      	str	r3, [r7, #16]
  sConfig.DAC_OutputBuffer = DAC_OUTPUTBUFFER_ENABLE;
 80040ea:	2300      	movs	r3, #0
 80040ec:	617b      	str	r3, [r7, #20]
  sConfig.DAC_ConnectOnChipPeripheral = DAC_CHIPCONNECT_DISABLE;
 80040ee:	2301      	movs	r3, #1
 80040f0:	61bb      	str	r3, [r7, #24]
  sConfig.DAC_UserTrimming = DAC_TRIMMING_FACTORY;
 80040f2:	2300      	movs	r3, #0
 80040f4:	61fb      	str	r3, [r7, #28]
  if (HAL_DAC_ConfigChannel(&hdac1, &sConfig, DAC_CHANNEL_1) != HAL_OK)
 80040f6:	463b      	mov	r3, r7
 80040f8:	2200      	movs	r2, #0
 80040fa:	4619      	mov	r1, r3
 80040fc:	480d      	ldr	r0, [pc, #52]	; (8004134 <MX_DAC1_Init+0x8c>)
 80040fe:	f003 fb1f 	bl	8007740 <HAL_DAC_ConfigChannel>
 8004102:	4603      	mov	r3, r0
 8004104:	2b00      	cmp	r3, #0
 8004106:	d001      	beq.n	800410c <MX_DAC1_Init+0x64>
  {
    Error_Handler();
 8004108:	f000 fe08 	bl	8004d1c <Error_Handler>
  }
  /** DAC channel OUT2 config 
  */
  sConfig.DAC_Trigger = DAC_TRIGGER_NONE;
 800410c:	2300      	movs	r3, #0
 800410e:	60fb      	str	r3, [r7, #12]
  sConfig.DAC_ConnectOnChipPeripheral = DAC_CHIPCONNECT_DISABLE;
 8004110:	2301      	movs	r3, #1
 8004112:	61bb      	str	r3, [r7, #24]
  if (HAL_DAC_ConfigChannel(&hdac1, &sConfig, DAC_CHANNEL_2) != HAL_OK)
 8004114:	463b      	mov	r3, r7
 8004116:	2210      	movs	r2, #16
 8004118:	4619      	mov	r1, r3
 800411a:	4806      	ldr	r0, [pc, #24]	; (8004134 <MX_DAC1_Init+0x8c>)
 800411c:	f003 fb10 	bl	8007740 <HAL_DAC_ConfigChannel>
 8004120:	4603      	mov	r3, r0
 8004122:	2b00      	cmp	r3, #0
 8004124:	d001      	beq.n	800412a <MX_DAC1_Init+0x82>
  {
    Error_Handler();
 8004126:	f000 fdf9 	bl	8004d1c <Error_Handler>
  }

}
 800412a:	bf00      	nop
 800412c:	3730      	adds	r7, #48	; 0x30
 800412e:	46bd      	mov	sp, r7
 8004130:	bd80      	pop	{r7, pc}
 8004132:	bf00      	nop
 8004134:	20001b38 	.word	0x20001b38
 8004138:	50000800 	.word	0x50000800

0800413c <MX_DAC2_Init>:
/* DAC2 init function */
void MX_DAC2_Init(void)
{
 800413c:	b580      	push	{r7, lr}
 800413e:	b08c      	sub	sp, #48	; 0x30
 8004140:	af00      	add	r7, sp, #0
  DAC_ChannelConfTypeDef sConfig = {0};
 8004142:	463b      	mov	r3, r7
 8004144:	2230      	movs	r2, #48	; 0x30
 8004146:	2100      	movs	r1, #0
 8004148:	4618      	mov	r0, r3
 800414a:	f007 ffc9 	bl	800c0e0 <memset>

  /** DAC Initialization 
  */
  hdac2.Instance = DAC2;
 800414e:	4b16      	ldr	r3, [pc, #88]	; (80041a8 <MX_DAC2_Init+0x6c>)
 8004150:	4a16      	ldr	r2, [pc, #88]	; (80041ac <MX_DAC2_Init+0x70>)
 8004152:	601a      	str	r2, [r3, #0]
  if (HAL_DAC_Init(&hdac2) != HAL_OK)
 8004154:	4814      	ldr	r0, [pc, #80]	; (80041a8 <MX_DAC2_Init+0x6c>)
 8004156:	f003 f914 	bl	8007382 <HAL_DAC_Init>
 800415a:	4603      	mov	r3, r0
 800415c:	2b00      	cmp	r3, #0
 800415e:	d001      	beq.n	8004164 <MX_DAC2_Init+0x28>
  {
    Error_Handler();
 8004160:	f000 fddc 	bl	8004d1c <Error_Handler>
  }
  /** DAC channel OUT1 config 
  */
  sConfig.DAC_HighFrequency = DAC_HIGH_FREQUENCY_INTERFACE_MODE_ABOVE_80MHZ;
 8004164:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8004168:	603b      	str	r3, [r7, #0]
  sConfig.DAC_DMADoubleDataMode = DISABLE;
 800416a:	2300      	movs	r3, #0
 800416c:	713b      	strb	r3, [r7, #4]
  sConfig.DAC_SignedFormat = DISABLE;
 800416e:	2300      	movs	r3, #0
 8004170:	717b      	strb	r3, [r7, #5]
  sConfig.DAC_SampleAndHold = DAC_SAMPLEANDHOLD_DISABLE;
 8004172:	2300      	movs	r3, #0
 8004174:	60bb      	str	r3, [r7, #8]
  sConfig.DAC_Trigger = DAC_TRIGGER_T8_TRGO;
 8004176:	2306      	movs	r3, #6
 8004178:	60fb      	str	r3, [r7, #12]
  sConfig.DAC_Trigger2 = DAC_TRIGGER_NONE;
 800417a:	2300      	movs	r3, #0
 800417c:	613b      	str	r3, [r7, #16]
  sConfig.DAC_OutputBuffer = DAC_OUTPUTBUFFER_ENABLE;
 800417e:	2300      	movs	r3, #0
 8004180:	617b      	str	r3, [r7, #20]
  sConfig.DAC_ConnectOnChipPeripheral = DAC_CHIPCONNECT_DISABLE;
 8004182:	2301      	movs	r3, #1
 8004184:	61bb      	str	r3, [r7, #24]
  sConfig.DAC_UserTrimming = DAC_TRIMMING_FACTORY;
 8004186:	2300      	movs	r3, #0
 8004188:	61fb      	str	r3, [r7, #28]
  if (HAL_DAC_ConfigChannel(&hdac2, &sConfig, DAC_CHANNEL_1) != HAL_OK)
 800418a:	463b      	mov	r3, r7
 800418c:	2200      	movs	r2, #0
 800418e:	4619      	mov	r1, r3
 8004190:	4805      	ldr	r0, [pc, #20]	; (80041a8 <MX_DAC2_Init+0x6c>)
 8004192:	f003 fad5 	bl	8007740 <HAL_DAC_ConfigChannel>
 8004196:	4603      	mov	r3, r0
 8004198:	2b00      	cmp	r3, #0
 800419a:	d001      	beq.n	80041a0 <MX_DAC2_Init+0x64>
  {
    Error_Handler();
 800419c:	f000 fdbe 	bl	8004d1c <Error_Handler>
  }

}
 80041a0:	bf00      	nop
 80041a2:	3730      	adds	r7, #48	; 0x30
 80041a4:	46bd      	mov	sp, r7
 80041a6:	bd80      	pop	{r7, pc}
 80041a8:	20001b24 	.word	0x20001b24
 80041ac:	50000c00 	.word	0x50000c00

080041b0 <HAL_DAC_MspInit>:

void HAL_DAC_MspInit(DAC_HandleTypeDef* dacHandle)
{
 80041b0:	b580      	push	{r7, lr}
 80041b2:	b08c      	sub	sp, #48	; 0x30
 80041b4:	af00      	add	r7, sp, #0
 80041b6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80041b8:	f107 031c 	add.w	r3, r7, #28
 80041bc:	2200      	movs	r2, #0
 80041be:	601a      	str	r2, [r3, #0]
 80041c0:	605a      	str	r2, [r3, #4]
 80041c2:	609a      	str	r2, [r3, #8]
 80041c4:	60da      	str	r2, [r3, #12]
 80041c6:	611a      	str	r2, [r3, #16]
  if(dacHandle->Instance==DAC1)
 80041c8:	687b      	ldr	r3, [r7, #4]
 80041ca:	681b      	ldr	r3, [r3, #0]
 80041cc:	4a56      	ldr	r2, [pc, #344]	; (8004328 <HAL_DAC_MspInit+0x178>)
 80041ce:	4293      	cmp	r3, r2
 80041d0:	d150      	bne.n	8004274 <HAL_DAC_MspInit+0xc4>
  {
  /* USER CODE BEGIN DAC1_MspInit 0 */

  /* USER CODE END DAC1_MspInit 0 */
    /* DAC1 clock enable */
    __HAL_RCC_DAC1_CLK_ENABLE();
 80041d2:	4b56      	ldr	r3, [pc, #344]	; (800432c <HAL_DAC_MspInit+0x17c>)
 80041d4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80041d6:	4a55      	ldr	r2, [pc, #340]	; (800432c <HAL_DAC_MspInit+0x17c>)
 80041d8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80041dc:	64d3      	str	r3, [r2, #76]	; 0x4c
 80041de:	4b53      	ldr	r3, [pc, #332]	; (800432c <HAL_DAC_MspInit+0x17c>)
 80041e0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80041e2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80041e6:	61bb      	str	r3, [r7, #24]
 80041e8:	69bb      	ldr	r3, [r7, #24]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80041ea:	4b50      	ldr	r3, [pc, #320]	; (800432c <HAL_DAC_MspInit+0x17c>)
 80041ec:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80041ee:	4a4f      	ldr	r2, [pc, #316]	; (800432c <HAL_DAC_MspInit+0x17c>)
 80041f0:	f043 0301 	orr.w	r3, r3, #1
 80041f4:	64d3      	str	r3, [r2, #76]	; 0x4c
 80041f6:	4b4d      	ldr	r3, [pc, #308]	; (800432c <HAL_DAC_MspInit+0x17c>)
 80041f8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80041fa:	f003 0301 	and.w	r3, r3, #1
 80041fe:	617b      	str	r3, [r7, #20]
 8004200:	697b      	ldr	r3, [r7, #20]
    /**DAC1 GPIO Configuration    
    PA4     ------> DAC1_OUT1
    PA5     ------> DAC1_OUT2 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 8004202:	2330      	movs	r3, #48	; 0x30
 8004204:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8004206:	2303      	movs	r3, #3
 8004208:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800420a:	2300      	movs	r3, #0
 800420c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800420e:	f107 031c 	add.w	r3, r7, #28
 8004212:	4619      	mov	r1, r3
 8004214:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8004218:	f003 ff94 	bl	8008144 <HAL_GPIO_Init>

    /* DAC1 DMA Init */
    /* DAC1_CH1 Init */
    hdma_dac1_ch1.Instance = DMA1_Channel2;
 800421c:	4b44      	ldr	r3, [pc, #272]	; (8004330 <HAL_DAC_MspInit+0x180>)
 800421e:	4a45      	ldr	r2, [pc, #276]	; (8004334 <HAL_DAC_MspInit+0x184>)
 8004220:	601a      	str	r2, [r3, #0]
    hdma_dac1_ch1.Init.Request = DMA_REQUEST_DAC1_CHANNEL1;
 8004222:	4b43      	ldr	r3, [pc, #268]	; (8004330 <HAL_DAC_MspInit+0x180>)
 8004224:	2206      	movs	r2, #6
 8004226:	605a      	str	r2, [r3, #4]
    hdma_dac1_ch1.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8004228:	4b41      	ldr	r3, [pc, #260]	; (8004330 <HAL_DAC_MspInit+0x180>)
 800422a:	2210      	movs	r2, #16
 800422c:	609a      	str	r2, [r3, #8]
    hdma_dac1_ch1.Init.PeriphInc = DMA_PINC_DISABLE;
 800422e:	4b40      	ldr	r3, [pc, #256]	; (8004330 <HAL_DAC_MspInit+0x180>)
 8004230:	2200      	movs	r2, #0
 8004232:	60da      	str	r2, [r3, #12]
    hdma_dac1_ch1.Init.MemInc = DMA_MINC_ENABLE;
 8004234:	4b3e      	ldr	r3, [pc, #248]	; (8004330 <HAL_DAC_MspInit+0x180>)
 8004236:	2280      	movs	r2, #128	; 0x80
 8004238:	611a      	str	r2, [r3, #16]
    hdma_dac1_ch1.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 800423a:	4b3d      	ldr	r3, [pc, #244]	; (8004330 <HAL_DAC_MspInit+0x180>)
 800423c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8004240:	615a      	str	r2, [r3, #20]
    hdma_dac1_ch1.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8004242:	4b3b      	ldr	r3, [pc, #236]	; (8004330 <HAL_DAC_MspInit+0x180>)
 8004244:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8004248:	619a      	str	r2, [r3, #24]
    hdma_dac1_ch1.Init.Mode = DMA_CIRCULAR;
 800424a:	4b39      	ldr	r3, [pc, #228]	; (8004330 <HAL_DAC_MspInit+0x180>)
 800424c:	2220      	movs	r2, #32
 800424e:	61da      	str	r2, [r3, #28]
    hdma_dac1_ch1.Init.Priority = DMA_PRIORITY_LOW;
 8004250:	4b37      	ldr	r3, [pc, #220]	; (8004330 <HAL_DAC_MspInit+0x180>)
 8004252:	2200      	movs	r2, #0
 8004254:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_dac1_ch1) != HAL_OK)
 8004256:	4836      	ldr	r0, [pc, #216]	; (8004330 <HAL_DAC_MspInit+0x180>)
 8004258:	f003 fca8 	bl	8007bac <HAL_DMA_Init>
 800425c:	4603      	mov	r3, r0
 800425e:	2b00      	cmp	r3, #0
 8004260:	d001      	beq.n	8004266 <HAL_DAC_MspInit+0xb6>
    {
      Error_Handler();
 8004262:	f000 fd5b 	bl	8004d1c <Error_Handler>
    }

    __HAL_LINKDMA(dacHandle,DMA_Handle1,hdma_dac1_ch1);
 8004266:	687b      	ldr	r3, [r7, #4]
 8004268:	4a31      	ldr	r2, [pc, #196]	; (8004330 <HAL_DAC_MspInit+0x180>)
 800426a:	609a      	str	r2, [r3, #8]
 800426c:	4a30      	ldr	r2, [pc, #192]	; (8004330 <HAL_DAC_MspInit+0x180>)
 800426e:	687b      	ldr	r3, [r7, #4]
 8004270:	6293      	str	r3, [r2, #40]	; 0x28

  /* USER CODE BEGIN DAC2_MspInit 1 */

  /* USER CODE END DAC2_MspInit 1 */
  }
}
 8004272:	e054      	b.n	800431e <HAL_DAC_MspInit+0x16e>
  else if(dacHandle->Instance==DAC2)
 8004274:	687b      	ldr	r3, [r7, #4]
 8004276:	681b      	ldr	r3, [r3, #0]
 8004278:	4a2f      	ldr	r2, [pc, #188]	; (8004338 <HAL_DAC_MspInit+0x188>)
 800427a:	4293      	cmp	r3, r2
 800427c:	d14f      	bne.n	800431e <HAL_DAC_MspInit+0x16e>
    __HAL_RCC_DAC2_CLK_ENABLE();
 800427e:	4b2b      	ldr	r3, [pc, #172]	; (800432c <HAL_DAC_MspInit+0x17c>)
 8004280:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004282:	4a2a      	ldr	r2, [pc, #168]	; (800432c <HAL_DAC_MspInit+0x17c>)
 8004284:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004288:	64d3      	str	r3, [r2, #76]	; 0x4c
 800428a:	4b28      	ldr	r3, [pc, #160]	; (800432c <HAL_DAC_MspInit+0x17c>)
 800428c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800428e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004292:	613b      	str	r3, [r7, #16]
 8004294:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8004296:	4b25      	ldr	r3, [pc, #148]	; (800432c <HAL_DAC_MspInit+0x17c>)
 8004298:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800429a:	4a24      	ldr	r2, [pc, #144]	; (800432c <HAL_DAC_MspInit+0x17c>)
 800429c:	f043 0301 	orr.w	r3, r3, #1
 80042a0:	64d3      	str	r3, [r2, #76]	; 0x4c
 80042a2:	4b22      	ldr	r3, [pc, #136]	; (800432c <HAL_DAC_MspInit+0x17c>)
 80042a4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80042a6:	f003 0301 	and.w	r3, r3, #1
 80042aa:	60fb      	str	r3, [r7, #12]
 80042ac:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 80042ae:	2340      	movs	r3, #64	; 0x40
 80042b0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80042b2:	2303      	movs	r3, #3
 80042b4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80042b6:	2300      	movs	r3, #0
 80042b8:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80042ba:	f107 031c 	add.w	r3, r7, #28
 80042be:	4619      	mov	r1, r3
 80042c0:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80042c4:	f003 ff3e 	bl	8008144 <HAL_GPIO_Init>
    hdma_dac2_ch1.Instance = DMA1_Channel3;
 80042c8:	4b1c      	ldr	r3, [pc, #112]	; (800433c <HAL_DAC_MspInit+0x18c>)
 80042ca:	4a1d      	ldr	r2, [pc, #116]	; (8004340 <HAL_DAC_MspInit+0x190>)
 80042cc:	601a      	str	r2, [r3, #0]
    hdma_dac2_ch1.Init.Request = DMA_REQUEST_DAC2_CHANNEL1;
 80042ce:	4b1b      	ldr	r3, [pc, #108]	; (800433c <HAL_DAC_MspInit+0x18c>)
 80042d0:	2229      	movs	r2, #41	; 0x29
 80042d2:	605a      	str	r2, [r3, #4]
    hdma_dac2_ch1.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80042d4:	4b19      	ldr	r3, [pc, #100]	; (800433c <HAL_DAC_MspInit+0x18c>)
 80042d6:	2210      	movs	r2, #16
 80042d8:	609a      	str	r2, [r3, #8]
    hdma_dac2_ch1.Init.PeriphInc = DMA_PINC_DISABLE;
 80042da:	4b18      	ldr	r3, [pc, #96]	; (800433c <HAL_DAC_MspInit+0x18c>)
 80042dc:	2200      	movs	r2, #0
 80042de:	60da      	str	r2, [r3, #12]
    hdma_dac2_ch1.Init.MemInc = DMA_MINC_ENABLE;
 80042e0:	4b16      	ldr	r3, [pc, #88]	; (800433c <HAL_DAC_MspInit+0x18c>)
 80042e2:	2280      	movs	r2, #128	; 0x80
 80042e4:	611a      	str	r2, [r3, #16]
    hdma_dac2_ch1.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 80042e6:	4b15      	ldr	r3, [pc, #84]	; (800433c <HAL_DAC_MspInit+0x18c>)
 80042e8:	f44f 7200 	mov.w	r2, #512	; 0x200
 80042ec:	615a      	str	r2, [r3, #20]
    hdma_dac2_ch1.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 80042ee:	4b13      	ldr	r3, [pc, #76]	; (800433c <HAL_DAC_MspInit+0x18c>)
 80042f0:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80042f4:	619a      	str	r2, [r3, #24]
    hdma_dac2_ch1.Init.Mode = DMA_CIRCULAR;
 80042f6:	4b11      	ldr	r3, [pc, #68]	; (800433c <HAL_DAC_MspInit+0x18c>)
 80042f8:	2220      	movs	r2, #32
 80042fa:	61da      	str	r2, [r3, #28]
    hdma_dac2_ch1.Init.Priority = DMA_PRIORITY_LOW;
 80042fc:	4b0f      	ldr	r3, [pc, #60]	; (800433c <HAL_DAC_MspInit+0x18c>)
 80042fe:	2200      	movs	r2, #0
 8004300:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_dac2_ch1) != HAL_OK)
 8004302:	480e      	ldr	r0, [pc, #56]	; (800433c <HAL_DAC_MspInit+0x18c>)
 8004304:	f003 fc52 	bl	8007bac <HAL_DMA_Init>
 8004308:	4603      	mov	r3, r0
 800430a:	2b00      	cmp	r3, #0
 800430c:	d001      	beq.n	8004312 <HAL_DAC_MspInit+0x162>
      Error_Handler();
 800430e:	f000 fd05 	bl	8004d1c <Error_Handler>
    __HAL_LINKDMA(dacHandle,DMA_Handle1,hdma_dac2_ch1);
 8004312:	687b      	ldr	r3, [r7, #4]
 8004314:	4a09      	ldr	r2, [pc, #36]	; (800433c <HAL_DAC_MspInit+0x18c>)
 8004316:	609a      	str	r2, [r3, #8]
 8004318:	4a08      	ldr	r2, [pc, #32]	; (800433c <HAL_DAC_MspInit+0x18c>)
 800431a:	687b      	ldr	r3, [r7, #4]
 800431c:	6293      	str	r3, [r2, #40]	; 0x28
}
 800431e:	bf00      	nop
 8004320:	3730      	adds	r7, #48	; 0x30
 8004322:	46bd      	mov	sp, r7
 8004324:	bd80      	pop	{r7, pc}
 8004326:	bf00      	nop
 8004328:	50000800 	.word	0x50000800
 800432c:	40021000 	.word	0x40021000
 8004330:	20001b4c 	.word	0x20001b4c
 8004334:	4002001c 	.word	0x4002001c
 8004338:	50000c00 	.word	0x50000c00
 800433c:	20001bac 	.word	0x20001bac
 8004340:	40020030 	.word	0x40020030

08004344 <MX_DMA_Init>:

/** 
  * Enable DMA controller clock
  */
void MX_DMA_Init(void) 
{
 8004344:	b580      	push	{r7, lr}
 8004346:	b082      	sub	sp, #8
 8004348:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMAMUX1_CLK_ENABLE();
 800434a:	4b1a      	ldr	r3, [pc, #104]	; (80043b4 <MX_DMA_Init+0x70>)
 800434c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800434e:	4a19      	ldr	r2, [pc, #100]	; (80043b4 <MX_DMA_Init+0x70>)
 8004350:	f043 0304 	orr.w	r3, r3, #4
 8004354:	6493      	str	r3, [r2, #72]	; 0x48
 8004356:	4b17      	ldr	r3, [pc, #92]	; (80043b4 <MX_DMA_Init+0x70>)
 8004358:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800435a:	f003 0304 	and.w	r3, r3, #4
 800435e:	607b      	str	r3, [r7, #4]
 8004360:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA1_CLK_ENABLE();
 8004362:	4b14      	ldr	r3, [pc, #80]	; (80043b4 <MX_DMA_Init+0x70>)
 8004364:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004366:	4a13      	ldr	r2, [pc, #76]	; (80043b4 <MX_DMA_Init+0x70>)
 8004368:	f043 0301 	orr.w	r3, r3, #1
 800436c:	6493      	str	r3, [r2, #72]	; 0x48
 800436e:	4b11      	ldr	r3, [pc, #68]	; (80043b4 <MX_DMA_Init+0x70>)
 8004370:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004372:	f003 0301 	and.w	r3, r3, #1
 8004376:	603b      	str	r3, [r7, #0]
 8004378:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 1, 0);
 800437a:	2200      	movs	r2, #0
 800437c:	2101      	movs	r1, #1
 800437e:	200b      	movs	r0, #11
 8004380:	f002 ffcb 	bl	800731a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 8004384:	200b      	movs	r0, #11
 8004386:	f002 ffe2 	bl	800734e <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel2_IRQn, 0, 0);
 800438a:	2200      	movs	r2, #0
 800438c:	2100      	movs	r1, #0
 800438e:	200c      	movs	r0, #12
 8004390:	f002 ffc3 	bl	800731a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel2_IRQn);
 8004394:	200c      	movs	r0, #12
 8004396:	f002 ffda 	bl	800734e <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel3_IRQn, 0, 0);
 800439a:	2200      	movs	r2, #0
 800439c:	2100      	movs	r1, #0
 800439e:	200d      	movs	r0, #13
 80043a0:	f002 ffbb 	bl	800731a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel3_IRQn);
 80043a4:	200d      	movs	r0, #13
 80043a6:	f002 ffd2 	bl	800734e <HAL_NVIC_EnableIRQ>

}
 80043aa:	bf00      	nop
 80043ac:	3708      	adds	r7, #8
 80043ae:	46bd      	mov	sp, r7
 80043b0:	bd80      	pop	{r7, pc}
 80043b2:	bf00      	nop
 80043b4:	40021000 	.word	0x40021000

080043b8 <update_dc_bias_sweep>:
uint16_t dcbias = 0;
int dcbias_dir = 1;
int dcinverted = 0;

void update_dc_bias_sweep()
{
 80043b8:	b580      	push	{r7, lr}
 80043ba:	af00      	add	r7, sp, #0
	  // up=1, down=0
	  (dcbias_dir) ? (dcbias++) : (dcbias--);
 80043bc:	4b20      	ldr	r3, [pc, #128]	; (8004440 <update_dc_bias_sweep+0x88>)
 80043be:	681b      	ldr	r3, [r3, #0]
 80043c0:	2b00      	cmp	r3, #0
 80043c2:	d006      	beq.n	80043d2 <update_dc_bias_sweep+0x1a>
 80043c4:	4b1f      	ldr	r3, [pc, #124]	; (8004444 <update_dc_bias_sweep+0x8c>)
 80043c6:	881b      	ldrh	r3, [r3, #0]
 80043c8:	3301      	adds	r3, #1
 80043ca:	b29a      	uxth	r2, r3
 80043cc:	4b1d      	ldr	r3, [pc, #116]	; (8004444 <update_dc_bias_sweep+0x8c>)
 80043ce:	801a      	strh	r2, [r3, #0]
 80043d0:	e005      	b.n	80043de <update_dc_bias_sweep+0x26>
 80043d2:	4b1c      	ldr	r3, [pc, #112]	; (8004444 <update_dc_bias_sweep+0x8c>)
 80043d4:	881b      	ldrh	r3, [r3, #0]
 80043d6:	3b01      	subs	r3, #1
 80043d8:	b29a      	uxth	r2, r3
 80043da:	4b1a      	ldr	r3, [pc, #104]	; (8004444 <update_dc_bias_sweep+0x8c>)
 80043dc:	801a      	strh	r2, [r3, #0]

	  // invert the bias signal at zero crossing
	  if(dcbias < 1) {
 80043de:	4b19      	ldr	r3, [pc, #100]	; (8004444 <update_dc_bias_sweep+0x8c>)
 80043e0:	881b      	ldrh	r3, [r3, #0]
 80043e2:	2b00      	cmp	r3, #0
 80043e4:	d10a      	bne.n	80043fc <update_dc_bias_sweep+0x44>
		(dcinverted) ? (dcinverted=0) : (dcinverted=1);
 80043e6:	4b18      	ldr	r3, [pc, #96]	; (8004448 <update_dc_bias_sweep+0x90>)
 80043e8:	681b      	ldr	r3, [r3, #0]
 80043ea:	2b00      	cmp	r3, #0
 80043ec:	d003      	beq.n	80043f6 <update_dc_bias_sweep+0x3e>
 80043ee:	4b16      	ldr	r3, [pc, #88]	; (8004448 <update_dc_bias_sweep+0x90>)
 80043f0:	2200      	movs	r2, #0
 80043f2:	601a      	str	r2, [r3, #0]
 80043f4:	e002      	b.n	80043fc <update_dc_bias_sweep+0x44>
 80043f6:	4b14      	ldr	r3, [pc, #80]	; (8004448 <update_dc_bias_sweep+0x90>)
 80043f8:	2201      	movs	r2, #1
 80043fa:	601a      	str	r2, [r3, #0]
	  }

	  // change direction if dac limits are reached
	  if(dcbias < 1) 	{ dcbias_dir = 1; }
 80043fc:	4b11      	ldr	r3, [pc, #68]	; (8004444 <update_dc_bias_sweep+0x8c>)
 80043fe:	881b      	ldrh	r3, [r3, #0]
 8004400:	2b00      	cmp	r3, #0
 8004402:	d102      	bne.n	800440a <update_dc_bias_sweep+0x52>
 8004404:	4b0e      	ldr	r3, [pc, #56]	; (8004440 <update_dc_bias_sweep+0x88>)
 8004406:	2201      	movs	r2, #1
 8004408:	601a      	str	r2, [r3, #0]
	  if(dcbias > 4095) { dcbias_dir = 0; }
 800440a:	4b0e      	ldr	r3, [pc, #56]	; (8004444 <update_dc_bias_sweep+0x8c>)
 800440c:	881b      	ldrh	r3, [r3, #0]
 800440e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004412:	d302      	bcc.n	800441a <update_dc_bias_sweep+0x62>
 8004414:	4b0a      	ldr	r3, [pc, #40]	; (8004440 <update_dc_bias_sweep+0x88>)
 8004416:	2200      	movs	r2, #0
 8004418:	601a      	str	r2, [r3, #0]


	  HAL_GPIO_WritePin(DCBIAS_INVERT_GPIO_Port, DCBIAS_INVERT_Pin, dcinverted);
 800441a:	4b0b      	ldr	r3, [pc, #44]	; (8004448 <update_dc_bias_sweep+0x90>)
 800441c:	681b      	ldr	r3, [r3, #0]
 800441e:	b2db      	uxtb	r3, r3
 8004420:	461a      	mov	r2, r3
 8004422:	2108      	movs	r1, #8
 8004424:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8004428:	f004 f80e 	bl	8008448 <HAL_GPIO_WritePin>
	  HAL_DAC_SetValue(&hdac1, DAC1_CHANNEL_2, DAC_ALIGN_12B_R, dcbias);
 800442c:	4b05      	ldr	r3, [pc, #20]	; (8004444 <update_dc_bias_sweep+0x8c>)
 800442e:	881b      	ldrh	r3, [r3, #0]
 8004430:	2200      	movs	r2, #0
 8004432:	2110      	movs	r1, #16
 8004434:	4805      	ldr	r0, [pc, #20]	; (800444c <update_dc_bias_sweep+0x94>)
 8004436:	f003 f931 	bl	800769c <HAL_DAC_SetValue>
}
 800443a:	bf00      	nop
 800443c:	bd80      	pop	{r7, pc}
 800443e:	bf00      	nop
 8004440:	200001fc 	.word	0x200001fc
 8004444:	20001654 	.word	0x20001654
 8004448:	20001658 	.word	0x20001658
 800444c:	20001b38 	.word	0x20001b38

08004450 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8004450:	b480      	push	{r7}
 8004452:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8004454:	4b04      	ldr	r3, [pc, #16]	; (8004468 <__NVIC_GetPriorityGrouping+0x18>)
 8004456:	68db      	ldr	r3, [r3, #12]
 8004458:	0a1b      	lsrs	r3, r3, #8
 800445a:	f003 0307 	and.w	r3, r3, #7
}
 800445e:	4618      	mov	r0, r3
 8004460:	46bd      	mov	sp, r7
 8004462:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004466:	4770      	bx	lr
 8004468:	e000ed00 	.word	0xe000ed00

0800446c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800446c:	b480      	push	{r7}
 800446e:	b083      	sub	sp, #12
 8004470:	af00      	add	r7, sp, #0
 8004472:	4603      	mov	r3, r0
 8004474:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004476:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800447a:	2b00      	cmp	r3, #0
 800447c:	db0b      	blt.n	8004496 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800447e:	79fb      	ldrb	r3, [r7, #7]
 8004480:	f003 021f 	and.w	r2, r3, #31
 8004484:	4907      	ldr	r1, [pc, #28]	; (80044a4 <__NVIC_EnableIRQ+0x38>)
 8004486:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800448a:	095b      	lsrs	r3, r3, #5
 800448c:	2001      	movs	r0, #1
 800448e:	fa00 f202 	lsl.w	r2, r0, r2
 8004492:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8004496:	bf00      	nop
 8004498:	370c      	adds	r7, #12
 800449a:	46bd      	mov	sp, r7
 800449c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044a0:	4770      	bx	lr
 80044a2:	bf00      	nop
 80044a4:	e000e100 	.word	0xe000e100

080044a8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80044a8:	b480      	push	{r7}
 80044aa:	b083      	sub	sp, #12
 80044ac:	af00      	add	r7, sp, #0
 80044ae:	4603      	mov	r3, r0
 80044b0:	6039      	str	r1, [r7, #0]
 80044b2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80044b4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80044b8:	2b00      	cmp	r3, #0
 80044ba:	db0a      	blt.n	80044d2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80044bc:	683b      	ldr	r3, [r7, #0]
 80044be:	b2da      	uxtb	r2, r3
 80044c0:	490c      	ldr	r1, [pc, #48]	; (80044f4 <__NVIC_SetPriority+0x4c>)
 80044c2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80044c6:	0112      	lsls	r2, r2, #4
 80044c8:	b2d2      	uxtb	r2, r2
 80044ca:	440b      	add	r3, r1
 80044cc:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80044d0:	e00a      	b.n	80044e8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80044d2:	683b      	ldr	r3, [r7, #0]
 80044d4:	b2da      	uxtb	r2, r3
 80044d6:	4908      	ldr	r1, [pc, #32]	; (80044f8 <__NVIC_SetPriority+0x50>)
 80044d8:	79fb      	ldrb	r3, [r7, #7]
 80044da:	f003 030f 	and.w	r3, r3, #15
 80044de:	3b04      	subs	r3, #4
 80044e0:	0112      	lsls	r2, r2, #4
 80044e2:	b2d2      	uxtb	r2, r2
 80044e4:	440b      	add	r3, r1
 80044e6:	761a      	strb	r2, [r3, #24]
}
 80044e8:	bf00      	nop
 80044ea:	370c      	adds	r7, #12
 80044ec:	46bd      	mov	sp, r7
 80044ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044f2:	4770      	bx	lr
 80044f4:	e000e100 	.word	0xe000e100
 80044f8:	e000ed00 	.word	0xe000ed00

080044fc <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80044fc:	b480      	push	{r7}
 80044fe:	b089      	sub	sp, #36	; 0x24
 8004500:	af00      	add	r7, sp, #0
 8004502:	60f8      	str	r0, [r7, #12]
 8004504:	60b9      	str	r1, [r7, #8]
 8004506:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8004508:	68fb      	ldr	r3, [r7, #12]
 800450a:	f003 0307 	and.w	r3, r3, #7
 800450e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8004510:	69fb      	ldr	r3, [r7, #28]
 8004512:	f1c3 0307 	rsb	r3, r3, #7
 8004516:	2b04      	cmp	r3, #4
 8004518:	bf28      	it	cs
 800451a:	2304      	movcs	r3, #4
 800451c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800451e:	69fb      	ldr	r3, [r7, #28]
 8004520:	3304      	adds	r3, #4
 8004522:	2b06      	cmp	r3, #6
 8004524:	d902      	bls.n	800452c <NVIC_EncodePriority+0x30>
 8004526:	69fb      	ldr	r3, [r7, #28]
 8004528:	3b03      	subs	r3, #3
 800452a:	e000      	b.n	800452e <NVIC_EncodePriority+0x32>
 800452c:	2300      	movs	r3, #0
 800452e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004530:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8004534:	69bb      	ldr	r3, [r7, #24]
 8004536:	fa02 f303 	lsl.w	r3, r2, r3
 800453a:	43da      	mvns	r2, r3
 800453c:	68bb      	ldr	r3, [r7, #8]
 800453e:	401a      	ands	r2, r3
 8004540:	697b      	ldr	r3, [r7, #20]
 8004542:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8004544:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8004548:	697b      	ldr	r3, [r7, #20]
 800454a:	fa01 f303 	lsl.w	r3, r1, r3
 800454e:	43d9      	mvns	r1, r3
 8004550:	687b      	ldr	r3, [r7, #4]
 8004552:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004554:	4313      	orrs	r3, r2
         );
}
 8004556:	4618      	mov	r0, r3
 8004558:	3724      	adds	r7, #36	; 0x24
 800455a:	46bd      	mov	sp, r7
 800455c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004560:	4770      	bx	lr
	...

08004564 <LL_SYSCFG_SetEXTISource>:
  *         @arg @ref LL_SYSCFG_EXTI_LINE14
  *         @arg @ref LL_SYSCFG_EXTI_LINE15
  * @retval None
  */
__STATIC_INLINE void LL_SYSCFG_SetEXTISource(uint32_t Port, uint32_t Line)
{
 8004564:	b480      	push	{r7}
 8004566:	b085      	sub	sp, #20
 8004568:	af00      	add	r7, sp, #0
 800456a:	6078      	str	r0, [r7, #4]
 800456c:	6039      	str	r1, [r7, #0]
  MODIFY_REG(SYSCFG->EXTICR[Line & 0x3U], (Line >> 16U), Port << (POSITION_VAL((Line >> 16U)) & 0x1FU) );
 800456e:	4a14      	ldr	r2, [pc, #80]	; (80045c0 <LL_SYSCFG_SetEXTISource+0x5c>)
 8004570:	683b      	ldr	r3, [r7, #0]
 8004572:	f003 0303 	and.w	r3, r3, #3
 8004576:	3302      	adds	r3, #2
 8004578:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 800457c:	683b      	ldr	r3, [r7, #0]
 800457e:	0c1b      	lsrs	r3, r3, #16
 8004580:	43db      	mvns	r3, r3
 8004582:	ea02 0103 	and.w	r1, r2, r3
 8004586:	683b      	ldr	r3, [r7, #0]
 8004588:	0c1b      	lsrs	r3, r3, #16
 800458a:	60fb      	str	r3, [r7, #12]
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800458c:	68fb      	ldr	r3, [r7, #12]
 800458e:	fa93 f3a3 	rbit	r3, r3
 8004592:	60bb      	str	r3, [r7, #8]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8004594:	68bb      	ldr	r3, [r7, #8]
 8004596:	fab3 f383 	clz	r3, r3
 800459a:	b2db      	uxtb	r3, r3
 800459c:	f003 031f 	and.w	r3, r3, #31
 80045a0:	687a      	ldr	r2, [r7, #4]
 80045a2:	409a      	lsls	r2, r3
 80045a4:	4806      	ldr	r0, [pc, #24]	; (80045c0 <LL_SYSCFG_SetEXTISource+0x5c>)
 80045a6:	683b      	ldr	r3, [r7, #0]
 80045a8:	f003 0303 	and.w	r3, r3, #3
 80045ac:	430a      	orrs	r2, r1
 80045ae:	3302      	adds	r3, #2
 80045b0:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
}
 80045b4:	bf00      	nop
 80045b6:	3714      	adds	r7, #20
 80045b8:	46bd      	mov	sp, r7
 80045ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045be:	4770      	bx	lr
 80045c0:	40010000 	.word	0x40010000

080045c4 <LL_GPIO_SetPinMode>:
  *         @arg @ref LL_GPIO_MODE_ALTERNATE
  *         @arg @ref LL_GPIO_MODE_ANALOG
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetPinMode(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t Mode)
{
 80045c4:	b480      	push	{r7}
 80045c6:	b089      	sub	sp, #36	; 0x24
 80045c8:	af00      	add	r7, sp, #0
 80045ca:	60f8      	str	r0, [r7, #12]
 80045cc:	60b9      	str	r1, [r7, #8]
 80045ce:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->MODER, (GPIO_MODER_MODE0 << (POSITION_VAL(Pin) * 2U)), (Mode << (POSITION_VAL(Pin) * 2U)));
 80045d0:	68fb      	ldr	r3, [r7, #12]
 80045d2:	681a      	ldr	r2, [r3, #0]
 80045d4:	68bb      	ldr	r3, [r7, #8]
 80045d6:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80045d8:	697b      	ldr	r3, [r7, #20]
 80045da:	fa93 f3a3 	rbit	r3, r3
 80045de:	613b      	str	r3, [r7, #16]
  return result;
 80045e0:	693b      	ldr	r3, [r7, #16]
 80045e2:	fab3 f383 	clz	r3, r3
 80045e6:	b2db      	uxtb	r3, r3
 80045e8:	005b      	lsls	r3, r3, #1
 80045ea:	2103      	movs	r1, #3
 80045ec:	fa01 f303 	lsl.w	r3, r1, r3
 80045f0:	43db      	mvns	r3, r3
 80045f2:	401a      	ands	r2, r3
 80045f4:	68bb      	ldr	r3, [r7, #8]
 80045f6:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80045f8:	69fb      	ldr	r3, [r7, #28]
 80045fa:	fa93 f3a3 	rbit	r3, r3
 80045fe:	61bb      	str	r3, [r7, #24]
  return result;
 8004600:	69bb      	ldr	r3, [r7, #24]
 8004602:	fab3 f383 	clz	r3, r3
 8004606:	b2db      	uxtb	r3, r3
 8004608:	005b      	lsls	r3, r3, #1
 800460a:	6879      	ldr	r1, [r7, #4]
 800460c:	fa01 f303 	lsl.w	r3, r1, r3
 8004610:	431a      	orrs	r2, r3
 8004612:	68fb      	ldr	r3, [r7, #12]
 8004614:	601a      	str	r2, [r3, #0]
}
 8004616:	bf00      	nop
 8004618:	3724      	adds	r7, #36	; 0x24
 800461a:	46bd      	mov	sp, r7
 800461c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004620:	4770      	bx	lr

08004622 <LL_GPIO_SetPinPull>:
  *         @arg @ref LL_GPIO_PULL_UP
  *         @arg @ref LL_GPIO_PULL_DOWN
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetPinPull(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t Pull)
{
 8004622:	b480      	push	{r7}
 8004624:	b089      	sub	sp, #36	; 0x24
 8004626:	af00      	add	r7, sp, #0
 8004628:	60f8      	str	r0, [r7, #12]
 800462a:	60b9      	str	r1, [r7, #8]
 800462c:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->PUPDR, (GPIO_PUPDR_PUPD0 << (POSITION_VAL(Pin) * 2U)), (Pull << (POSITION_VAL(Pin) * 2U)));
 800462e:	68fb      	ldr	r3, [r7, #12]
 8004630:	68da      	ldr	r2, [r3, #12]
 8004632:	68bb      	ldr	r3, [r7, #8]
 8004634:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004636:	697b      	ldr	r3, [r7, #20]
 8004638:	fa93 f3a3 	rbit	r3, r3
 800463c:	613b      	str	r3, [r7, #16]
  return result;
 800463e:	693b      	ldr	r3, [r7, #16]
 8004640:	fab3 f383 	clz	r3, r3
 8004644:	b2db      	uxtb	r3, r3
 8004646:	005b      	lsls	r3, r3, #1
 8004648:	2103      	movs	r1, #3
 800464a:	fa01 f303 	lsl.w	r3, r1, r3
 800464e:	43db      	mvns	r3, r3
 8004650:	401a      	ands	r2, r3
 8004652:	68bb      	ldr	r3, [r7, #8]
 8004654:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004656:	69fb      	ldr	r3, [r7, #28]
 8004658:	fa93 f3a3 	rbit	r3, r3
 800465c:	61bb      	str	r3, [r7, #24]
  return result;
 800465e:	69bb      	ldr	r3, [r7, #24]
 8004660:	fab3 f383 	clz	r3, r3
 8004664:	b2db      	uxtb	r3, r3
 8004666:	005b      	lsls	r3, r3, #1
 8004668:	6879      	ldr	r1, [r7, #4]
 800466a:	fa01 f303 	lsl.w	r3, r1, r3
 800466e:	431a      	orrs	r2, r3
 8004670:	68fb      	ldr	r3, [r7, #12]
 8004672:	60da      	str	r2, [r3, #12]
}
 8004674:	bf00      	nop
 8004676:	3724      	adds	r7, #36	; 0x24
 8004678:	46bd      	mov	sp, r7
 800467a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800467e:	4770      	bx	lr

08004680 <LL_GPIO_ResetOutputPin>:
  *         @arg @ref LL_GPIO_PIN_15
  *         @arg @ref LL_GPIO_PIN_ALL
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_ResetOutputPin(GPIO_TypeDef *GPIOx, uint32_t PinMask)
{
 8004680:	b480      	push	{r7}
 8004682:	b083      	sub	sp, #12
 8004684:	af00      	add	r7, sp, #0
 8004686:	6078      	str	r0, [r7, #4]
 8004688:	6039      	str	r1, [r7, #0]
  WRITE_REG(GPIOx->BRR, PinMask);
 800468a:	687b      	ldr	r3, [r7, #4]
 800468c:	683a      	ldr	r2, [r7, #0]
 800468e:	629a      	str	r2, [r3, #40]	; 0x28
}
 8004690:	bf00      	nop
 8004692:	370c      	adds	r7, #12
 8004694:	46bd      	mov	sp, r7
 8004696:	f85d 7b04 	ldr.w	r7, [sp], #4
 800469a:	4770      	bx	lr

0800469c <LL_AHB2_GRP1_EnableClock>:
  *
  *         (*) value not defined in all devices.
  * @retval None
  */
__STATIC_INLINE void LL_AHB2_GRP1_EnableClock(uint32_t Periphs)
{
 800469c:	b480      	push	{r7}
 800469e:	b085      	sub	sp, #20
 80046a0:	af00      	add	r7, sp, #0
 80046a2:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->AHB2ENR, Periphs);
 80046a4:	4b08      	ldr	r3, [pc, #32]	; (80046c8 <LL_AHB2_GRP1_EnableClock+0x2c>)
 80046a6:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80046a8:	4907      	ldr	r1, [pc, #28]	; (80046c8 <LL_AHB2_GRP1_EnableClock+0x2c>)
 80046aa:	687b      	ldr	r3, [r7, #4]
 80046ac:	4313      	orrs	r3, r2
 80046ae:	64cb      	str	r3, [r1, #76]	; 0x4c
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 80046b0:	4b05      	ldr	r3, [pc, #20]	; (80046c8 <LL_AHB2_GRP1_EnableClock+0x2c>)
 80046b2:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80046b4:	687b      	ldr	r3, [r7, #4]
 80046b6:	4013      	ands	r3, r2
 80046b8:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80046ba:	68fb      	ldr	r3, [r7, #12]
}
 80046bc:	bf00      	nop
 80046be:	3714      	adds	r7, #20
 80046c0:	46bd      	mov	sp, r7
 80046c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046c6:	4770      	bx	lr
 80046c8:	40021000 	.word	0x40021000

080046cc <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 80046cc:	b580      	push	{r7, lr}
 80046ce:	b08a      	sub	sp, #40	; 0x28
 80046d0:	af00      	add	r7, sp, #0

  LL_EXTI_InitTypeDef EXTI_InitStruct = {0};
 80046d2:	f107 031c 	add.w	r3, r7, #28
 80046d6:	2200      	movs	r2, #0
 80046d8:	601a      	str	r2, [r3, #0]
 80046da:	605a      	str	r2, [r3, #4]
 80046dc:	609a      	str	r2, [r3, #8]
  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 80046de:	1d3b      	adds	r3, r7, #4
 80046e0:	2200      	movs	r2, #0
 80046e2:	601a      	str	r2, [r3, #0]
 80046e4:	605a      	str	r2, [r3, #4]
 80046e6:	609a      	str	r2, [r3, #8]
 80046e8:	60da      	str	r2, [r3, #12]
 80046ea:	611a      	str	r2, [r3, #16]
 80046ec:	615a      	str	r2, [r3, #20]

  /* GPIO Ports Clock Enable */
  LL_AHB2_GRP1_EnableClock(LL_AHB2_GRP1_PERIPH_GPIOC);
 80046ee:	2004      	movs	r0, #4
 80046f0:	f7ff ffd4 	bl	800469c <LL_AHB2_GRP1_EnableClock>
  LL_AHB2_GRP1_EnableClock(LL_AHB2_GRP1_PERIPH_GPIOF);
 80046f4:	2020      	movs	r0, #32
 80046f6:	f7ff ffd1 	bl	800469c <LL_AHB2_GRP1_EnableClock>
  LL_AHB2_GRP1_EnableClock(LL_AHB2_GRP1_PERIPH_GPIOA);
 80046fa:	2001      	movs	r0, #1
 80046fc:	f7ff ffce 	bl	800469c <LL_AHB2_GRP1_EnableClock>
  LL_AHB2_GRP1_EnableClock(LL_AHB2_GRP1_PERIPH_GPIOB);
 8004700:	2002      	movs	r0, #2
 8004702:	f7ff ffcb 	bl	800469c <LL_AHB2_GRP1_EnableClock>

  /**/
  LL_GPIO_ResetOutputPin(TRIGMODE_GPIO_Port, TRIGMODE_Pin);
 8004706:	2108      	movs	r1, #8
 8004708:	48d3      	ldr	r0, [pc, #844]	; (8004a58 <MX_GPIO_Init+0x38c>)
 800470a:	f7ff ffb9 	bl	8004680 <LL_GPIO_ResetOutputPin>

  /**/
  LL_GPIO_ResetOutputPin(DCBIAS_INVERT_GPIO_Port, DCBIAS_INVERT_Pin);
 800470e:	2108      	movs	r1, #8
 8004710:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8004714:	f7ff ffb4 	bl	8004680 <LL_GPIO_ResetOutputPin>

  /**/
  LL_GPIO_ResetOutputPin(SG2_GPIO_Port, SG2_Pin);
 8004718:	2110      	movs	r1, #16
 800471a:	48cf      	ldr	r0, [pc, #828]	; (8004a58 <MX_GPIO_Init+0x38c>)
 800471c:	f7ff ffb0 	bl	8004680 <LL_GPIO_ResetOutputPin>

  /**/
  LL_GPIO_ResetOutputPin(SG1_GPIO_Port, SG1_Pin);
 8004720:	2120      	movs	r1, #32
 8004722:	48cd      	ldr	r0, [pc, #820]	; (8004a58 <MX_GPIO_Init+0x38c>)
 8004724:	f7ff ffac 	bl	8004680 <LL_GPIO_ResetOutputPin>

  /**/
  LL_GPIO_ResetOutputPin(SG0_GPIO_Port, SG0_Pin);
 8004728:	2101      	movs	r1, #1
 800472a:	48cc      	ldr	r0, [pc, #816]	; (8004a5c <MX_GPIO_Init+0x390>)
 800472c:	f7ff ffa8 	bl	8004680 <LL_GPIO_ResetOutputPin>

  /**/
  LL_GPIO_ResetOutputPin(TRIGMUX1_GPIO_Port, TRIGMUX1_Pin);
 8004730:	f44f 7180 	mov.w	r1, #256	; 0x100
 8004734:	48c8      	ldr	r0, [pc, #800]	; (8004a58 <MX_GPIO_Init+0x38c>)
 8004736:	f7ff ffa3 	bl	8004680 <LL_GPIO_ResetOutputPin>

  /**/
  LL_GPIO_ResetOutputPin(TRIGMUX2_GPIO_Port, TRIGMUX2_Pin);
 800473a:	f44f 7100 	mov.w	r1, #512	; 0x200
 800473e:	48c6      	ldr	r0, [pc, #792]	; (8004a58 <MX_GPIO_Init+0x38c>)
 8004740:	f7ff ff9e 	bl	8004680 <LL_GPIO_ResetOutputPin>

  /**/
  LL_GPIO_ResetOutputPin(DC_GPIO_Port, DC_Pin);
 8004744:	2140      	movs	r1, #64	; 0x40
 8004746:	48c5      	ldr	r0, [pc, #788]	; (8004a5c <MX_GPIO_Init+0x390>)
 8004748:	f7ff ff9a 	bl	8004680 <LL_GPIO_ResetOutputPin>

  /**/
  LL_GPIO_ResetOutputPin(CS_GPIO_Port, CS_Pin);
 800474c:	2180      	movs	r1, #128	; 0x80
 800474e:	48c3      	ldr	r0, [pc, #780]	; (8004a5c <MX_GPIO_Init+0x390>)
 8004750:	f7ff ff96 	bl	8004680 <LL_GPIO_ResetOutputPin>

  /**/
  LL_GPIO_ResetOutputPin(RST_GPIO_Port, RST_Pin);
 8004754:	f44f 7100 	mov.w	r1, #512	; 0x200
 8004758:	48c0      	ldr	r0, [pc, #768]	; (8004a5c <MX_GPIO_Init+0x390>)
 800475a:	f7ff ff91 	bl	8004680 <LL_GPIO_ResetOutputPin>

  /**/
  LL_SYSCFG_SetEXTISource(LL_SYSCFG_EXTI_PORTC, LL_SYSCFG_EXTI_LINE14);
 800475e:	49c0      	ldr	r1, [pc, #768]	; (8004a60 <MX_GPIO_Init+0x394>)
 8004760:	2002      	movs	r0, #2
 8004762:	f7ff feff 	bl	8004564 <LL_SYSCFG_SetEXTISource>

  /**/
  LL_SYSCFG_SetEXTISource(LL_SYSCFG_EXTI_PORTC, LL_SYSCFG_EXTI_LINE15);
 8004766:	49bf      	ldr	r1, [pc, #764]	; (8004a64 <MX_GPIO_Init+0x398>)
 8004768:	2002      	movs	r0, #2
 800476a:	f7ff fefb 	bl	8004564 <LL_SYSCFG_SetEXTISource>

  /**/
  LL_SYSCFG_SetEXTISource(LL_SYSCFG_EXTI_PORTF, LL_SYSCFG_EXTI_LINE0);
 800476e:	f44f 2170 	mov.w	r1, #983040	; 0xf0000
 8004772:	2005      	movs	r0, #5
 8004774:	f7ff fef6 	bl	8004564 <LL_SYSCFG_SetEXTISource>

  /**/
  LL_SYSCFG_SetEXTISource(LL_SYSCFG_EXTI_PORTF, LL_SYSCFG_EXTI_LINE1);
 8004778:	f44f 0170 	mov.w	r1, #15728640	; 0xf00000
 800477c:	2005      	movs	r0, #5
 800477e:	f7ff fef1 	bl	8004564 <LL_SYSCFG_SetEXTISource>

  /**/
  LL_SYSCFG_SetEXTISource(LL_SYSCFG_EXTI_PORTC, LL_SYSCFG_EXTI_LINE2);
 8004782:	f04f 6170 	mov.w	r1, #251658240	; 0xf000000
 8004786:	2002      	movs	r0, #2
 8004788:	f7ff feec 	bl	8004564 <LL_SYSCFG_SetEXTISource>

  /**/
  EXTI_InitStruct.Line_0_31 = LL_EXTI_LINE_14;
 800478c:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8004790:	61fb      	str	r3, [r7, #28]
  EXTI_InitStruct.LineCommand = ENABLE;
 8004792:	2301      	movs	r3, #1
 8004794:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
  EXTI_InitStruct.Mode = LL_EXTI_MODE_IT;
 8004798:	2300      	movs	r3, #0
 800479a:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
  EXTI_InitStruct.Trigger = LL_EXTI_TRIGGER_FALLING;
 800479e:	2302      	movs	r3, #2
 80047a0:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
  LL_EXTI_Init(&EXTI_InitStruct);
 80047a4:	f107 031c 	add.w	r3, r7, #28
 80047a8:	4618      	mov	r0, r3
 80047aa:	f006 faa3 	bl	800acf4 <LL_EXTI_Init>

  /**/
  EXTI_InitStruct.Line_0_31 = LL_EXTI_LINE_15;
 80047ae:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80047b2:	61fb      	str	r3, [r7, #28]
  EXTI_InitStruct.LineCommand = ENABLE;
 80047b4:	2301      	movs	r3, #1
 80047b6:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
  EXTI_InitStruct.Mode = LL_EXTI_MODE_IT;
 80047ba:	2300      	movs	r3, #0
 80047bc:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
  EXTI_InitStruct.Trigger = LL_EXTI_TRIGGER_FALLING;
 80047c0:	2302      	movs	r3, #2
 80047c2:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
  LL_EXTI_Init(&EXTI_InitStruct);
 80047c6:	f107 031c 	add.w	r3, r7, #28
 80047ca:	4618      	mov	r0, r3
 80047cc:	f006 fa92 	bl	800acf4 <LL_EXTI_Init>

  /**/
  EXTI_InitStruct.Line_0_31 = LL_EXTI_LINE_0;
 80047d0:	2301      	movs	r3, #1
 80047d2:	61fb      	str	r3, [r7, #28]
  EXTI_InitStruct.LineCommand = ENABLE;
 80047d4:	2301      	movs	r3, #1
 80047d6:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
  EXTI_InitStruct.Mode = LL_EXTI_MODE_IT;
 80047da:	2300      	movs	r3, #0
 80047dc:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
  EXTI_InitStruct.Trigger = LL_EXTI_TRIGGER_FALLING;
 80047e0:	2302      	movs	r3, #2
 80047e2:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
  LL_EXTI_Init(&EXTI_InitStruct);
 80047e6:	f107 031c 	add.w	r3, r7, #28
 80047ea:	4618      	mov	r0, r3
 80047ec:	f006 fa82 	bl	800acf4 <LL_EXTI_Init>

  /**/
  EXTI_InitStruct.Line_0_31 = LL_EXTI_LINE_1;
 80047f0:	2302      	movs	r3, #2
 80047f2:	61fb      	str	r3, [r7, #28]
  EXTI_InitStruct.LineCommand = ENABLE;
 80047f4:	2301      	movs	r3, #1
 80047f6:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
  EXTI_InitStruct.Mode = LL_EXTI_MODE_IT;
 80047fa:	2300      	movs	r3, #0
 80047fc:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
  EXTI_InitStruct.Trigger = LL_EXTI_TRIGGER_FALLING;
 8004800:	2302      	movs	r3, #2
 8004802:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
  LL_EXTI_Init(&EXTI_InitStruct);
 8004806:	f107 031c 	add.w	r3, r7, #28
 800480a:	4618      	mov	r0, r3
 800480c:	f006 fa72 	bl	800acf4 <LL_EXTI_Init>

  /**/
  EXTI_InitStruct.Line_0_31 = LL_EXTI_LINE_2;
 8004810:	2304      	movs	r3, #4
 8004812:	61fb      	str	r3, [r7, #28]
  EXTI_InitStruct.LineCommand = ENABLE;
 8004814:	2301      	movs	r3, #1
 8004816:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
  EXTI_InitStruct.Mode = LL_EXTI_MODE_IT;
 800481a:	2300      	movs	r3, #0
 800481c:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
  EXTI_InitStruct.Trigger = LL_EXTI_TRIGGER_FALLING;
 8004820:	2302      	movs	r3, #2
 8004822:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
  LL_EXTI_Init(&EXTI_InitStruct);
 8004826:	f107 031c 	add.w	r3, r7, #28
 800482a:	4618      	mov	r0, r3
 800482c:	f006 fa62 	bl	800acf4 <LL_EXTI_Init>

  /**/
  LL_GPIO_SetPinPull(BTN1_EXTI14_GPIO_Port, BTN1_EXTI14_Pin, LL_GPIO_PULL_UP);
 8004830:	2201      	movs	r2, #1
 8004832:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8004836:	4888      	ldr	r0, [pc, #544]	; (8004a58 <MX_GPIO_Init+0x38c>)
 8004838:	f7ff fef3 	bl	8004622 <LL_GPIO_SetPinPull>

  /**/
  LL_GPIO_SetPinPull(BTN2_EXTI15_GPIO_Port, BTN2_EXTI15_Pin, LL_GPIO_PULL_UP);
 800483c:	2201      	movs	r2, #1
 800483e:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8004842:	4885      	ldr	r0, [pc, #532]	; (8004a58 <MX_GPIO_Init+0x38c>)
 8004844:	f7ff feed 	bl	8004622 <LL_GPIO_SetPinPull>

  /**/
  LL_GPIO_SetPinPull(BTN3_EXTI0_GPIO_Port, BTN3_EXTI0_Pin, LL_GPIO_PULL_UP);
 8004848:	2201      	movs	r2, #1
 800484a:	2101      	movs	r1, #1
 800484c:	4886      	ldr	r0, [pc, #536]	; (8004a68 <MX_GPIO_Init+0x39c>)
 800484e:	f7ff fee8 	bl	8004622 <LL_GPIO_SetPinPull>

  /**/
  LL_GPIO_SetPinPull(BTN4_EXTI1_GPIO_Port, BTN4_EXTI1_Pin, LL_GPIO_PULL_UP);
 8004852:	2201      	movs	r2, #1
 8004854:	2102      	movs	r1, #2
 8004856:	4884      	ldr	r0, [pc, #528]	; (8004a68 <MX_GPIO_Init+0x39c>)
 8004858:	f7ff fee3 	bl	8004622 <LL_GPIO_SetPinPull>

  /**/
  LL_GPIO_SetPinPull(ENC_EXTI2_GPIO_Port, ENC_EXTI2_Pin, LL_GPIO_PULL_UP);
 800485c:	2201      	movs	r2, #1
 800485e:	2104      	movs	r1, #4
 8004860:	487d      	ldr	r0, [pc, #500]	; (8004a58 <MX_GPIO_Init+0x38c>)
 8004862:	f7ff fede 	bl	8004622 <LL_GPIO_SetPinPull>

  /**/
  LL_GPIO_SetPinMode(BTN1_EXTI14_GPIO_Port, BTN1_EXTI14_Pin, LL_GPIO_MODE_INPUT);
 8004866:	2200      	movs	r2, #0
 8004868:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800486c:	487a      	ldr	r0, [pc, #488]	; (8004a58 <MX_GPIO_Init+0x38c>)
 800486e:	f7ff fea9 	bl	80045c4 <LL_GPIO_SetPinMode>

  /**/
  LL_GPIO_SetPinMode(BTN2_EXTI15_GPIO_Port, BTN2_EXTI15_Pin, LL_GPIO_MODE_INPUT);
 8004872:	2200      	movs	r2, #0
 8004874:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8004878:	4877      	ldr	r0, [pc, #476]	; (8004a58 <MX_GPIO_Init+0x38c>)
 800487a:	f7ff fea3 	bl	80045c4 <LL_GPIO_SetPinMode>

  /**/
  LL_GPIO_SetPinMode(BTN3_EXTI0_GPIO_Port, BTN3_EXTI0_Pin, LL_GPIO_MODE_INPUT);
 800487e:	2200      	movs	r2, #0
 8004880:	2101      	movs	r1, #1
 8004882:	4879      	ldr	r0, [pc, #484]	; (8004a68 <MX_GPIO_Init+0x39c>)
 8004884:	f7ff fe9e 	bl	80045c4 <LL_GPIO_SetPinMode>

  /**/
  LL_GPIO_SetPinMode(BTN4_EXTI1_GPIO_Port, BTN4_EXTI1_Pin, LL_GPIO_MODE_INPUT);
 8004888:	2200      	movs	r2, #0
 800488a:	2102      	movs	r1, #2
 800488c:	4876      	ldr	r0, [pc, #472]	; (8004a68 <MX_GPIO_Init+0x39c>)
 800488e:	f7ff fe99 	bl	80045c4 <LL_GPIO_SetPinMode>

  /**/
  LL_GPIO_SetPinMode(ENC_EXTI2_GPIO_Port, ENC_EXTI2_Pin, LL_GPIO_MODE_INPUT);
 8004892:	2200      	movs	r2, #0
 8004894:	2104      	movs	r1, #4
 8004896:	4870      	ldr	r0, [pc, #448]	; (8004a58 <MX_GPIO_Init+0x38c>)
 8004898:	f7ff fe94 	bl	80045c4 <LL_GPIO_SetPinMode>

  /**/
  GPIO_InitStruct.Pin = TRIGMODE_Pin;
 800489c:	2308      	movs	r3, #8
 800489e:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 80048a0:	2301      	movs	r3, #1
 80048a2:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 80048a4:	2300      	movs	r3, #0
 80048a6:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 80048a8:	2300      	movs	r3, #0
 80048aa:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_DOWN;
 80048ac:	2302      	movs	r3, #2
 80048ae:	617b      	str	r3, [r7, #20]
  LL_GPIO_Init(TRIGMODE_GPIO_Port, &GPIO_InitStruct);
 80048b0:	1d3b      	adds	r3, r7, #4
 80048b2:	4619      	mov	r1, r3
 80048b4:	4868      	ldr	r0, [pc, #416]	; (8004a58 <MX_GPIO_Init+0x38c>)
 80048b6:	f006 fc10 	bl	800b0da <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = DCBIAS_INVERT_Pin;
 80048ba:	2308      	movs	r3, #8
 80048bc:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 80048be:	2301      	movs	r3, #1
 80048c0:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 80048c2:	2300      	movs	r3, #0
 80048c4:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 80048c6:	2300      	movs	r3, #0
 80048c8:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 80048ca:	2300      	movs	r3, #0
 80048cc:	617b      	str	r3, [r7, #20]
  LL_GPIO_Init(DCBIAS_INVERT_GPIO_Port, &GPIO_InitStruct);
 80048ce:	1d3b      	adds	r3, r7, #4
 80048d0:	4619      	mov	r1, r3
 80048d2:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80048d6:	f006 fc00 	bl	800b0da <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = SG2_Pin;
 80048da:	2310      	movs	r3, #16
 80048dc:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 80048de:	2301      	movs	r3, #1
 80048e0:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 80048e2:	2300      	movs	r3, #0
 80048e4:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 80048e6:	2300      	movs	r3, #0
 80048e8:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 80048ea:	2300      	movs	r3, #0
 80048ec:	617b      	str	r3, [r7, #20]
  LL_GPIO_Init(SG2_GPIO_Port, &GPIO_InitStruct);
 80048ee:	1d3b      	adds	r3, r7, #4
 80048f0:	4619      	mov	r1, r3
 80048f2:	4859      	ldr	r0, [pc, #356]	; (8004a58 <MX_GPIO_Init+0x38c>)
 80048f4:	f006 fbf1 	bl	800b0da <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = SG1_Pin;
 80048f8:	2320      	movs	r3, #32
 80048fa:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 80048fc:	2301      	movs	r3, #1
 80048fe:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 8004900:	2300      	movs	r3, #0
 8004902:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8004904:	2300      	movs	r3, #0
 8004906:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8004908:	2300      	movs	r3, #0
 800490a:	617b      	str	r3, [r7, #20]
  LL_GPIO_Init(SG1_GPIO_Port, &GPIO_InitStruct);
 800490c:	1d3b      	adds	r3, r7, #4
 800490e:	4619      	mov	r1, r3
 8004910:	4851      	ldr	r0, [pc, #324]	; (8004a58 <MX_GPIO_Init+0x38c>)
 8004912:	f006 fbe2 	bl	800b0da <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = SG0_Pin;
 8004916:	2301      	movs	r3, #1
 8004918:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 800491a:	2301      	movs	r3, #1
 800491c:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 800491e:	2300      	movs	r3, #0
 8004920:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8004922:	2300      	movs	r3, #0
 8004924:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8004926:	2300      	movs	r3, #0
 8004928:	617b      	str	r3, [r7, #20]
  LL_GPIO_Init(SG0_GPIO_Port, &GPIO_InitStruct);
 800492a:	1d3b      	adds	r3, r7, #4
 800492c:	4619      	mov	r1, r3
 800492e:	484b      	ldr	r0, [pc, #300]	; (8004a5c <MX_GPIO_Init+0x390>)
 8004930:	f006 fbd3 	bl	800b0da <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = TRIGMUX1_Pin;
 8004934:	f44f 7380 	mov.w	r3, #256	; 0x100
 8004938:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 800493a:	2301      	movs	r3, #1
 800493c:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 800493e:	2300      	movs	r3, #0
 8004940:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8004942:	2300      	movs	r3, #0
 8004944:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8004946:	2300      	movs	r3, #0
 8004948:	617b      	str	r3, [r7, #20]
  LL_GPIO_Init(TRIGMUX1_GPIO_Port, &GPIO_InitStruct);
 800494a:	1d3b      	adds	r3, r7, #4
 800494c:	4619      	mov	r1, r3
 800494e:	4842      	ldr	r0, [pc, #264]	; (8004a58 <MX_GPIO_Init+0x38c>)
 8004950:	f006 fbc3 	bl	800b0da <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = TRIGMUX2_Pin;
 8004954:	f44f 7300 	mov.w	r3, #512	; 0x200
 8004958:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 800495a:	2301      	movs	r3, #1
 800495c:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 800495e:	2300      	movs	r3, #0
 8004960:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8004962:	2300      	movs	r3, #0
 8004964:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8004966:	2300      	movs	r3, #0
 8004968:	617b      	str	r3, [r7, #20]
  LL_GPIO_Init(TRIGMUX2_GPIO_Port, &GPIO_InitStruct);
 800496a:	1d3b      	adds	r3, r7, #4
 800496c:	4619      	mov	r1, r3
 800496e:	483a      	ldr	r0, [pc, #232]	; (8004a58 <MX_GPIO_Init+0x38c>)
 8004970:	f006 fbb3 	bl	800b0da <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = DC_Pin;
 8004974:	2340      	movs	r3, #64	; 0x40
 8004976:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 8004978:	2301      	movs	r3, #1
 800497a:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_VERY_HIGH;
 800497c:	2303      	movs	r3, #3
 800497e:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8004980:	2300      	movs	r3, #0
 8004982:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8004984:	2300      	movs	r3, #0
 8004986:	617b      	str	r3, [r7, #20]
  LL_GPIO_Init(DC_GPIO_Port, &GPIO_InitStruct);
 8004988:	1d3b      	adds	r3, r7, #4
 800498a:	4619      	mov	r1, r3
 800498c:	4833      	ldr	r0, [pc, #204]	; (8004a5c <MX_GPIO_Init+0x390>)
 800498e:	f006 fba4 	bl	800b0da <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = CS_Pin;
 8004992:	2380      	movs	r3, #128	; 0x80
 8004994:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 8004996:	2301      	movs	r3, #1
 8004998:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_VERY_HIGH;
 800499a:	2303      	movs	r3, #3
 800499c:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 800499e:	2300      	movs	r3, #0
 80049a0:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 80049a2:	2300      	movs	r3, #0
 80049a4:	617b      	str	r3, [r7, #20]
  LL_GPIO_Init(CS_GPIO_Port, &GPIO_InitStruct);
 80049a6:	1d3b      	adds	r3, r7, #4
 80049a8:	4619      	mov	r1, r3
 80049aa:	482c      	ldr	r0, [pc, #176]	; (8004a5c <MX_GPIO_Init+0x390>)
 80049ac:	f006 fb95 	bl	800b0da <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = RST_Pin;
 80049b0:	f44f 7300 	mov.w	r3, #512	; 0x200
 80049b4:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 80049b6:	2301      	movs	r3, #1
 80049b8:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_VERY_HIGH;
 80049ba:	2303      	movs	r3, #3
 80049bc:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 80049be:	2300      	movs	r3, #0
 80049c0:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 80049c2:	2300      	movs	r3, #0
 80049c4:	617b      	str	r3, [r7, #20]
  LL_GPIO_Init(RST_GPIO_Port, &GPIO_InitStruct);
 80049c6:	1d3b      	adds	r3, r7, #4
 80049c8:	4619      	mov	r1, r3
 80049ca:	4824      	ldr	r0, [pc, #144]	; (8004a5c <MX_GPIO_Init+0x390>)
 80049cc:	f006 fb85 	bl	800b0da <LL_GPIO_Init>

  /* EXTI interrupt init*/
  NVIC_SetPriority(EXTI0_IRQn, NVIC_EncodePriority(NVIC_GetPriorityGrouping(),0, 0));
 80049d0:	f7ff fd3e 	bl	8004450 <__NVIC_GetPriorityGrouping>
 80049d4:	4603      	mov	r3, r0
 80049d6:	2200      	movs	r2, #0
 80049d8:	2100      	movs	r1, #0
 80049da:	4618      	mov	r0, r3
 80049dc:	f7ff fd8e 	bl	80044fc <NVIC_EncodePriority>
 80049e0:	4603      	mov	r3, r0
 80049e2:	4619      	mov	r1, r3
 80049e4:	2006      	movs	r0, #6
 80049e6:	f7ff fd5f 	bl	80044a8 <__NVIC_SetPriority>
  NVIC_EnableIRQ(EXTI0_IRQn);
 80049ea:	2006      	movs	r0, #6
 80049ec:	f7ff fd3e 	bl	800446c <__NVIC_EnableIRQ>
  NVIC_SetPriority(EXTI1_IRQn, NVIC_EncodePriority(NVIC_GetPriorityGrouping(),0, 0));
 80049f0:	f7ff fd2e 	bl	8004450 <__NVIC_GetPriorityGrouping>
 80049f4:	4603      	mov	r3, r0
 80049f6:	2200      	movs	r2, #0
 80049f8:	2100      	movs	r1, #0
 80049fa:	4618      	mov	r0, r3
 80049fc:	f7ff fd7e 	bl	80044fc <NVIC_EncodePriority>
 8004a00:	4603      	mov	r3, r0
 8004a02:	4619      	mov	r1, r3
 8004a04:	2007      	movs	r0, #7
 8004a06:	f7ff fd4f 	bl	80044a8 <__NVIC_SetPriority>
  NVIC_EnableIRQ(EXTI1_IRQn);
 8004a0a:	2007      	movs	r0, #7
 8004a0c:	f7ff fd2e 	bl	800446c <__NVIC_EnableIRQ>
  NVIC_SetPriority(EXTI2_IRQn, NVIC_EncodePriority(NVIC_GetPriorityGrouping(),0, 0));
 8004a10:	f7ff fd1e 	bl	8004450 <__NVIC_GetPriorityGrouping>
 8004a14:	4603      	mov	r3, r0
 8004a16:	2200      	movs	r2, #0
 8004a18:	2100      	movs	r1, #0
 8004a1a:	4618      	mov	r0, r3
 8004a1c:	f7ff fd6e 	bl	80044fc <NVIC_EncodePriority>
 8004a20:	4603      	mov	r3, r0
 8004a22:	4619      	mov	r1, r3
 8004a24:	2008      	movs	r0, #8
 8004a26:	f7ff fd3f 	bl	80044a8 <__NVIC_SetPriority>
  NVIC_EnableIRQ(EXTI2_IRQn);
 8004a2a:	2008      	movs	r0, #8
 8004a2c:	f7ff fd1e 	bl	800446c <__NVIC_EnableIRQ>
  NVIC_SetPriority(EXTI15_10_IRQn, NVIC_EncodePriority(NVIC_GetPriorityGrouping(),0, 0));
 8004a30:	f7ff fd0e 	bl	8004450 <__NVIC_GetPriorityGrouping>
 8004a34:	4603      	mov	r3, r0
 8004a36:	2200      	movs	r2, #0
 8004a38:	2100      	movs	r1, #0
 8004a3a:	4618      	mov	r0, r3
 8004a3c:	f7ff fd5e 	bl	80044fc <NVIC_EncodePriority>
 8004a40:	4603      	mov	r3, r0
 8004a42:	4619      	mov	r1, r3
 8004a44:	2028      	movs	r0, #40	; 0x28
 8004a46:	f7ff fd2f 	bl	80044a8 <__NVIC_SetPriority>
  NVIC_EnableIRQ(EXTI15_10_IRQn);
 8004a4a:	2028      	movs	r0, #40	; 0x28
 8004a4c:	f7ff fd0e 	bl	800446c <__NVIC_EnableIRQ>

}
 8004a50:	bf00      	nop
 8004a52:	3728      	adds	r7, #40	; 0x28
 8004a54:	46bd      	mov	sp, r7
 8004a56:	e009      	b.n	8004a6c <MX_GPIO_Init+0x3a0>
 8004a58:	48000800 	.word	0x48000800
 8004a5c:	48000400 	.word	0x48000400
 8004a60:	0f000003 	.word	0x0f000003
 8004a64:	f0000003 	.word	0xf0000003
 8004a68:	48001400 	.word	0x48001400
 8004a6c:	bd80      	pop	{r7, pc}
 8004a6e:	bf00      	nop

08004a70 <ITM_SendChar>:
           \li Is blocking when a debugger is connected, but the previous character sent has not been transmitted.
  \param [in]     ch  Character to transmit.
  \returns            Character to transmit.
 */
__STATIC_INLINE uint32_t ITM_SendChar (uint32_t ch)
{
 8004a70:	b480      	push	{r7}
 8004a72:	b083      	sub	sp, #12
 8004a74:	af00      	add	r7, sp, #0
 8004a76:	6078      	str	r0, [r7, #4]
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 8004a78:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8004a7c:	f8d3 3e80 	ldr.w	r3, [r3, #3712]	; 0xe80
 8004a80:	f003 0301 	and.w	r3, r3, #1
 8004a84:	2b00      	cmp	r3, #0
 8004a86:	d013      	beq.n	8004ab0 <ITM_SendChar+0x40>
      ((ITM->TER & 1UL               ) != 0UL)   )     /* ITM Port #0 enabled */
 8004a88:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8004a8c:	f8d3 3e00 	ldr.w	r3, [r3, #3584]	; 0xe00
 8004a90:	f003 0301 	and.w	r3, r3, #1
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 8004a94:	2b00      	cmp	r3, #0
 8004a96:	d00b      	beq.n	8004ab0 <ITM_SendChar+0x40>
  {
    while (ITM->PORT[0U].u32 == 0UL)
 8004a98:	e000      	b.n	8004a9c <ITM_SendChar+0x2c>
    {
      __NOP();
 8004a9a:	bf00      	nop
    while (ITM->PORT[0U].u32 == 0UL)
 8004a9c:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8004aa0:	681b      	ldr	r3, [r3, #0]
 8004aa2:	2b00      	cmp	r3, #0
 8004aa4:	d0f9      	beq.n	8004a9a <ITM_SendChar+0x2a>
    }
    ITM->PORT[0U].u8 = (uint8_t)ch;
 8004aa6:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8004aaa:	687a      	ldr	r2, [r7, #4]
 8004aac:	b2d2      	uxtb	r2, r2
 8004aae:	701a      	strb	r2, [r3, #0]
  }
  return (ch);
 8004ab0:	687b      	ldr	r3, [r7, #4]
}
 8004ab2:	4618      	mov	r0, r3
 8004ab4:	370c      	adds	r7, #12
 8004ab6:	46bd      	mov	sp, r7
 8004ab8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004abc:	4770      	bx	lr

08004abe <_write>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
int _write(int file, char *ptr, int len)
{
 8004abe:	b580      	push	{r7, lr}
 8004ac0:	b086      	sub	sp, #24
 8004ac2:	af00      	add	r7, sp, #0
 8004ac4:	60f8      	str	r0, [r7, #12]
 8004ac6:	60b9      	str	r1, [r7, #8]
 8004ac8:	607a      	str	r2, [r7, #4]
  /* Implement your write code here, this is used by puts and printf for example */
  int i=0;
 8004aca:	2300      	movs	r3, #0
 8004acc:	617b      	str	r3, [r7, #20]
  for(i=0 ; i<len ; i++)
 8004ace:	2300      	movs	r3, #0
 8004ad0:	617b      	str	r3, [r7, #20]
 8004ad2:	e009      	b.n	8004ae8 <_write+0x2a>
    ITM_SendChar((*ptr++));
 8004ad4:	68bb      	ldr	r3, [r7, #8]
 8004ad6:	1c5a      	adds	r2, r3, #1
 8004ad8:	60ba      	str	r2, [r7, #8]
 8004ada:	781b      	ldrb	r3, [r3, #0]
 8004adc:	4618      	mov	r0, r3
 8004ade:	f7ff ffc7 	bl	8004a70 <ITM_SendChar>
  for(i=0 ; i<len ; i++)
 8004ae2:	697b      	ldr	r3, [r7, #20]
 8004ae4:	3301      	adds	r3, #1
 8004ae6:	617b      	str	r3, [r7, #20]
 8004ae8:	697a      	ldr	r2, [r7, #20]
 8004aea:	687b      	ldr	r3, [r7, #4]
 8004aec:	429a      	cmp	r2, r3
 8004aee:	dbf1      	blt.n	8004ad4 <_write+0x16>
  return len;
 8004af0:	687b      	ldr	r3, [r7, #4]
}
 8004af2:	4618      	mov	r0, r3
 8004af4:	3718      	adds	r7, #24
 8004af6:	46bd      	mov	sp, r7
 8004af8:	bd80      	pop	{r7, pc}

08004afa <HAL_DAC_ErrorCallbackCh1>:

void HAL_DAC_ErrorCallbackCh1(DAC_HandleTypeDef *hdac)
{
 8004afa:	b480      	push	{r7}
 8004afc:	b083      	sub	sp, #12
 8004afe:	af00      	add	r7, sp, #0
 8004b00:	6078      	str	r0, [r7, #4]
	// do something
}
 8004b02:	bf00      	nop
 8004b04:	370c      	adds	r7, #12
 8004b06:	46bd      	mov	sp, r7
 8004b08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b0c:	4770      	bx	lr
	...

08004b10 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8004b10:	b580      	push	{r7, lr}
 8004b12:	b082      	sub	sp, #8
 8004b14:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8004b16:	f000 ff52 	bl	80059be <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8004b1a:	f000 f891 	bl	8004c40 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8004b1e:	f7ff fdd5 	bl	80046cc <MX_GPIO_Init>
  MX_DMA_Init();
 8004b22:	f7ff fc0f 	bl	8004344 <MX_DMA_Init>
  MX_DAC1_Init();
 8004b26:	f7ff fabf 	bl	80040a8 <MX_DAC1_Init>
  MX_DAC2_Init();
 8004b2a:	f7ff fb07 	bl	800413c <MX_DAC2_Init>
  MX_ADC1_Init();
 8004b2e:	f7ff f97d 	bl	8003e2c <MX_ADC1_Init>
  MX_COMP1_Init();
 8004b32:	f7ff fa5f 	bl	8003ff4 <MX_COMP1_Init>
  MX_TIM2_Init();
 8004b36:	f000 fc37 	bl	80053a8 <MX_TIM2_Init>
  MX_TIM17_Init();
 8004b3a:	f000 fdd1 	bl	80056e0 <MX_TIM17_Init>
  MX_SPI3_Init();
 8004b3e:	f000 f92b 	bl	8004d98 <MX_SPI3_Init>
  MX_RNG_Init();
 8004b42:	f000 f91b 	bl	8004d7c <MX_RNG_Init>
  MX_TIM1_Init();
 8004b46:	f000 fbbf 	bl	80052c8 <MX_TIM1_Init>
  MX_TIM8_Init();
 8004b4a:	f000 fce7 	bl	800551c <MX_TIM8_Init>
  MX_TIM16_Init();
 8004b4e:	f000 fd9f 	bl	8005690 <MX_TIM16_Init>
  MX_TIM15_Init();
 8004b52:	f000 fd4b 	bl	80055ec <MX_TIM15_Init>
  MX_TIM5_Init();
 8004b56:	f000 fc91 	bl	800547c <MX_TIM5_Init>
  /* USER CODE BEGIN 2 */

  DT_InitRegister();
 8004b5a:	f7fe fc9d 	bl	8003498 <DT_InitRegister>

  // main signal function output (external)
  FuncO_Init();
 8004b5e:	f7fe fe8f 	bl	8003880 <FuncO_Init>
  FuncO_ApplyPreset_Fast(eDefaultFuncPreset);
 8004b62:	2000      	movs	r0, #0
 8004b64:	f7fe ff02 	bl	800396c <FuncO_ApplyPreset_Fast>
  //HAL_DAC_Start_DMA(&hdac1, DAC1_CHANNEL_1, sine_data_table, SINE_DATA_SIZE, DAC_ALIGN_12B_R);
  //TIM8->ARR = sin1_max_arr;

  // DC bias output (internal)
  HAL_DAC_Start(&hdac1, DAC1_CHANNEL_2);
 8004b68:	2110      	movs	r1, #16
 8004b6a:	482b      	ldr	r0, [pc, #172]	; (8004c18 <main+0x108>)
 8004b6c:	f002 fc2b 	bl	80073c6 <HAL_DAC_Start>
  //HAL_DAC_Start_DMA(&hdac2, DAC2_CHANNEL_1, sine_data_table, SINE_DATA_SIZE, DAC_ALIGN_12B_R);
  //HAL_DAC_Start_DMA(&hdac2, DAC2_CHANNEL_1, square_data_table, SQUARE_DATA_SIZE, DAC_ALIGN_12B_R);
  //HAL_DAC_Start_DMA(&hdac2, DAC2_CHANNEL_1, unitimpulse_data_table, UNITIMPULSE_DATA_SIZE, DAC_ALIGN_12B_R);
  //HAL_DAC_Start_DMA(&hdac2, DAC2_CHANNEL_1, saw_data_table, SAW_DATA_SIZE, DAC_ALIGN_12B_R);
  //HAL_DAC_Start_DMA(&hdac2, DAC2_CHANNEL_1, saw_rev_data_table, SAW_REV_DATA_SIZE, DAC_ALIGN_12B_R);
  HAL_DAC_Start_DMA(&hdac2, DAC2_CHANNEL_1, triangle_data_table, TRIANGLE_DATA_SIZE, DAC_ALIGN_12B_R);
 8004b70:	2300      	movs	r3, #0
 8004b72:	9300      	str	r3, [sp, #0]
 8004b74:	2378      	movs	r3, #120	; 0x78
 8004b76:	4a29      	ldr	r2, [pc, #164]	; (8004c1c <main+0x10c>)
 8004b78:	2100      	movs	r1, #0
 8004b7a:	4829      	ldr	r0, [pc, #164]	; (8004c20 <main+0x110>)
 8004b7c:	f002 fc76 	bl	800746c <HAL_DAC_Start_DMA>
  //HAL_DAC_Start_DMA(&hdac2, DAC2_CHANNEL_1, trigger_input, TRIGGER_DATA_SIZE, DAC_ALIGN_12B_R);

#ifndef DISABLE_ALL_TIMERS

  // single clock to run all DAC channels. TODO add independent clocks
  HAL_TIM_Base_Start(&htim8);
 8004b80:	4828      	ldr	r0, [pc, #160]	; (8004c24 <main+0x114>)
 8004b82:	f004 ffdd 	bl	8009b40 <HAL_TIM_Base_Start>
  FreqO_ApplyPreset(eDefaultFreqPreset);
 8004b86:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8004b8a:	f7fe fe03 	bl	8003794 <FreqO_ApplyPreset>

#endif //DISABLE_ALL_TIMERS

  // DC bias inversion
  HAL_GPIO_WritePin(DCBIAS_INVERT_GPIO_Port, DCBIAS_INVERT_Pin, GPIO_PIN_SET);
 8004b8e:	2201      	movs	r2, #1
 8004b90:	2108      	movs	r1, #8
 8004b92:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8004b96:	f003 fc57 	bl	8008448 <HAL_GPIO_WritePin>

  // PGA gain
  GO_ApplyPreset_Fast(eDefaultGainPreset);
 8004b9a:	2001      	movs	r0, #1
 8004b9c:	f7ff f800 	bl	8003ba0 <GO_ApplyPreset_Fast>
  //HAL_TIM_Base_Start_IT(&htim17);
#endif	//DISABLE_ALL_TIMERS


// http://www.ti.com/lit/ds/symlink/ts5a3357.pdf
  HAL_GPIO_WritePin(TRIGMUX1_GPIO_Port, TRIGMUX1_Pin, GPIO_PIN_RESET);	// TS5A3357 Pin6
 8004ba0:	2200      	movs	r2, #0
 8004ba2:	f44f 7180 	mov.w	r1, #256	; 0x100
 8004ba6:	4820      	ldr	r0, [pc, #128]	; (8004c28 <main+0x118>)
 8004ba8:	f003 fc4e 	bl	8008448 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(TRIGMUX2_GPIO_Port, TRIGMUX2_Pin, GPIO_PIN_RESET);	// TS5A3357 Pin5
 8004bac:	2200      	movs	r2, #0
 8004bae:	f44f 7100 	mov.w	r1, #512	; 0x200
 8004bb2:	481d      	ldr	r0, [pc, #116]	; (8004c28 <main+0x118>)
 8004bb4:	f003 fc48 	bl	8008448 <HAL_GPIO_WritePin>

#ifdef TIM_TRIGGER_MODE
  // input capture on in TIM2 slave-mode TF1FP1

  // set HW switch to direct ext. trigger input to TIM pin
  HAL_GPIO_WritePin(TRIGMODE_GPIO_Port, TRIGMODE_Pin, GPIO_PIN_SET);
 8004bb8:	2201      	movs	r2, #1
 8004bba:	2108      	movs	r1, #8
 8004bbc:	481a      	ldr	r0, [pc, #104]	; (8004c28 <main+0x118>)
 8004bbe:	f003 fc43 	bl	8008448 <HAL_GPIO_WritePin>
  //HAL_GPIO_WritePin(TRIGMUX1_GPIO_Port, TRIGMUX1_Pin, GPIO_PIN_SET);	// TS5A3357 Pin6
  //HAL_GPIO_WritePin(TRIGMUX2_GPIO_Port, TRIGMUX2_Pin, GPIO_PIN_RESET); // TS5A3357 Pin5

  // clear slave mode select reg
  TIM2->SMCR &= ~(TIM_SMCR_SMS_0 | TIM_SMCR_SMS_1 | TIM_SMCR_SMS_2);
 8004bc2:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8004bc6:	689b      	ldr	r3, [r3, #8]
 8004bc8:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8004bcc:	f023 0307 	bic.w	r3, r3, #7
 8004bd0:	6093      	str	r3, [r2, #8]

  // slave mode
  //TIM2->SMCR |= TIM_SMCR_SMS_2;						// SLAVE MODE: RESET
  TIM2->SMCR |= TIM_SMCR_SMS_0 | TIM_SMCR_SMS_2;	// SLAVE MODE: GATED
 8004bd2:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8004bd6:	689b      	ldr	r3, [r3, #8]
 8004bd8:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8004bdc:	f043 0305 	orr.w	r3, r3, #5
 8004be0:	6093      	str	r3, [r2, #8]
  //TIM2->SMCR |= TIM_SMCR_SMS_1 | TIM_SMCR_SMS_2;	// SLAVE MODE: TRIGGER

#ifndef DISABLE_ALL_TIMERS
  HAL_TIM_Base_Start_IT(&htim2);
 8004be2:	4812      	ldr	r0, [pc, #72]	; (8004c2c <main+0x11c>)
 8004be4:	f004 ffda 	bl	8009b9c <HAL_TIM_Base_Start_IT>



#ifndef DISABLE_ALL_TIMERS
  // encoder input
  HAL_TIM_Base_Start(&htim1);		// enable encoder timer
 8004be8:	4811      	ldr	r0, [pc, #68]	; (8004c30 <main+0x120>)
 8004bea:	f004 ffa9 	bl	8009b40 <HAL_TIM_Base_Start>
  //TIM1->DIER |= TIM_DIER_IDXIE;		// enable index interrupts

#endif	//DISABLE_ALL_TIMERS

  TIM6->PSC = 65535;
 8004bee:	4b11      	ldr	r3, [pc, #68]	; (8004c34 <main+0x124>)
 8004bf0:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8004bf4:	629a      	str	r2, [r3, #40]	; 0x28
  TIM6->ARR = 65535;
 8004bf6:	4b0f      	ldr	r3, [pc, #60]	; (8004c34 <main+0x124>)
 8004bf8:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8004bfc:	62da      	str	r2, [r3, #44]	; 0x2c



  // TFT lib enable
  DM_Init();
 8004bfe:	f7fc f81b 	bl	8000c38 <DM_Init>
  DM_PostInit();
 8004c02:	f7fc f827 	bl	8000c54 <DM_PostInit>

  // DM_UpdateDisplay()
  HAL_TIM_Base_Start_IT(&htim15);
 8004c06:	480c      	ldr	r0, [pc, #48]	; (8004c38 <main+0x128>)
 8004c08:	f004 ffc8 	bl	8009b9c <HAL_TIM_Base_Start_IT>

  //HAL_TIM_Base_Start_IT(&htim16);

  // debounce timer
  HAL_TIM_Base_Start(&htim5);
 8004c0c:	480b      	ldr	r0, [pc, #44]	; (8004c3c <main+0x12c>)
 8004c0e:	f004 ff97 	bl	8009b40 <HAL_TIM_Base_Start>
  /* USER CODE BEGIN WHILE */
  while (1)
  {


	EM_ProcessEvent();
 8004c12:	f7fe f82d 	bl	8002c70 <EM_ProcessEvent>
 8004c16:	e7fc      	b.n	8004c12 <main+0x102>
 8004c18:	20001b38 	.word	0x20001b38
 8004c1c:	20001074 	.word	0x20001074
 8004c20:	20001b24 	.word	0x20001b24
 8004c24:	20001c70 	.word	0x20001c70
 8004c28:	48000800 	.word	0x48000800
 8004c2c:	20001dec 	.word	0x20001dec
 8004c30:	20001da0 	.word	0x20001da0
 8004c34:	40001000 	.word	0x40001000
 8004c38:	20001cbc 	.word	0x20001cbc
 8004c3c:	20001d54 	.word	0x20001d54

08004c40 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8004c40:	b580      	push	{r7, lr}
 8004c42:	b0a8      	sub	sp, #160	; 0xa0
 8004c44:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8004c46:	f107 0368 	add.w	r3, r7, #104	; 0x68
 8004c4a:	2238      	movs	r2, #56	; 0x38
 8004c4c:	2100      	movs	r1, #0
 8004c4e:	4618      	mov	r0, r3
 8004c50:	f007 fa46 	bl	800c0e0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8004c54:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8004c58:	2200      	movs	r2, #0
 8004c5a:	601a      	str	r2, [r3, #0]
 8004c5c:	605a      	str	r2, [r3, #4]
 8004c5e:	609a      	str	r2, [r3, #8]
 8004c60:	60da      	str	r2, [r3, #12]
 8004c62:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8004c64:	463b      	mov	r3, r7
 8004c66:	2254      	movs	r2, #84	; 0x54
 8004c68:	2100      	movs	r1, #0
 8004c6a:	4618      	mov	r0, r3
 8004c6c:	f007 fa38 	bl	800c0e0 <memset>

  /** Configure the main internal regulator output voltage 
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1_BOOST);
 8004c70:	2000      	movs	r0, #0
 8004c72:	f003 fc01 	bl	8008478 <HAL_PWREx_ControlVoltageScaling>
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_HSI48;
 8004c76:	2322      	movs	r3, #34	; 0x22
 8004c78:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8004c7a:	f44f 7380 	mov.w	r3, #256	; 0x100
 8004c7e:	677b      	str	r3, [r7, #116]	; 0x74
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8004c80:	2340      	movs	r3, #64	; 0x40
 8004c82:	67bb      	str	r3, [r7, #120]	; 0x78
  RCC_OscInitStruct.HSI48State = RCC_HSI48_ON;
 8004c84:	2301      	movs	r3, #1
 8004c86:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8004c8a:	2302      	movs	r3, #2
 8004c8c:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8004c90:	2302      	movs	r3, #2
 8004c92:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV2;
 8004c96:	2302      	movs	r3, #2
 8004c98:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  RCC_OscInitStruct.PLL.PLLN = 42;
 8004c9c:	232a      	movs	r3, #42	; 0x2a
 8004c9e:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8004ca2:	2302      	movs	r3, #2
 8004ca4:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV4;
 8004ca8:	2304      	movs	r3, #4
 8004caa:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8004cae:	2302      	movs	r3, #2
 8004cb0:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8004cb4:	f107 0368 	add.w	r3, r7, #104	; 0x68
 8004cb8:	4618      	mov	r0, r3
 8004cba:	f003 fc81 	bl	80085c0 <HAL_RCC_OscConfig>
 8004cbe:	4603      	mov	r3, r0
 8004cc0:	2b00      	cmp	r3, #0
 8004cc2:	d001      	beq.n	8004cc8 <SystemClock_Config+0x88>
  {
    Error_Handler();
 8004cc4:	f000 f82a 	bl	8004d1c <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8004cc8:	230f      	movs	r3, #15
 8004cca:	657b      	str	r3, [r7, #84]	; 0x54
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8004ccc:	2303      	movs	r3, #3
 8004cce:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8004cd0:	2300      	movs	r3, #0
 8004cd2:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8004cd4:	2300      	movs	r3, #0
 8004cd6:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8004cd8:	2300      	movs	r3, #0
 8004cda:	667b      	str	r3, [r7, #100]	; 0x64

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_8) != HAL_OK)
 8004cdc:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8004ce0:	2108      	movs	r1, #8
 8004ce2:	4618      	mov	r0, r3
 8004ce4:	f003 ff84 	bl	8008bf0 <HAL_RCC_ClockConfig>
 8004ce8:	4603      	mov	r3, r0
 8004cea:	2b00      	cmp	r3, #0
 8004cec:	d001      	beq.n	8004cf2 <SystemClock_Config+0xb2>
  {
    Error_Handler();
 8004cee:	f000 f815 	bl	8004d1c <Error_Handler>
  }
  /** Initializes the peripherals clocks 
  */
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_RNG|RCC_PERIPHCLK_ADC12;
 8004cf2:	f44f 4340 	mov.w	r3, #49152	; 0xc000
 8004cf6:	603b      	str	r3, [r7, #0]
  PeriphClkInit.RngClockSelection = RCC_RNGCLKSOURCE_HSI48;
 8004cf8:	2300      	movs	r3, #0
 8004cfa:	643b      	str	r3, [r7, #64]	; 0x40
  PeriphClkInit.Adc12ClockSelection = RCC_ADC12CLKSOURCE_SYSCLK;
 8004cfc:	f04f 5300 	mov.w	r3, #536870912	; 0x20000000
 8004d00:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8004d02:	463b      	mov	r3, r7
 8004d04:	4618      	mov	r0, r3
 8004d06:	f004 f963 	bl	8008fd0 <HAL_RCCEx_PeriphCLKConfig>
 8004d0a:	4603      	mov	r3, r0
 8004d0c:	2b00      	cmp	r3, #0
 8004d0e:	d001      	beq.n	8004d14 <SystemClock_Config+0xd4>
  {
    Error_Handler();
 8004d10:	f000 f804 	bl	8004d1c <Error_Handler>
  }
}
 8004d14:	bf00      	nop
 8004d16:	37a0      	adds	r7, #160	; 0xa0
 8004d18:	46bd      	mov	sp, r7
 8004d1a:	bd80      	pop	{r7, pc}

08004d1c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8004d1c:	b480      	push	{r7}
 8004d1e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8004d20:	bf00      	nop
 8004d22:	46bd      	mov	sp, r7
 8004d24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d28:	4770      	bx	lr

08004d2a <LL_RNG_Enable>:
  * @rmtoll CR           RNGEN         LL_RNG_Enable
  * @param  RNGx RNG Instance
  * @retval None
  */
__STATIC_INLINE void LL_RNG_Enable(RNG_TypeDef *RNGx)
{
 8004d2a:	b480      	push	{r7}
 8004d2c:	b083      	sub	sp, #12
 8004d2e:	af00      	add	r7, sp, #0
 8004d30:	6078      	str	r0, [r7, #4]
  SET_BIT(RNGx->CR, RNG_CR_RNGEN);
 8004d32:	687b      	ldr	r3, [r7, #4]
 8004d34:	681b      	ldr	r3, [r3, #0]
 8004d36:	f043 0204 	orr.w	r2, r3, #4
 8004d3a:	687b      	ldr	r3, [r7, #4]
 8004d3c:	601a      	str	r2, [r3, #0]
}
 8004d3e:	bf00      	nop
 8004d40:	370c      	adds	r7, #12
 8004d42:	46bd      	mov	sp, r7
 8004d44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d48:	4770      	bx	lr
	...

08004d4c <LL_AHB2_GRP1_EnableClock>:
{
 8004d4c:	b480      	push	{r7}
 8004d4e:	b085      	sub	sp, #20
 8004d50:	af00      	add	r7, sp, #0
 8004d52:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB2ENR, Periphs);
 8004d54:	4b08      	ldr	r3, [pc, #32]	; (8004d78 <LL_AHB2_GRP1_EnableClock+0x2c>)
 8004d56:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8004d58:	4907      	ldr	r1, [pc, #28]	; (8004d78 <LL_AHB2_GRP1_EnableClock+0x2c>)
 8004d5a:	687b      	ldr	r3, [r7, #4]
 8004d5c:	4313      	orrs	r3, r2
 8004d5e:	64cb      	str	r3, [r1, #76]	; 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 8004d60:	4b05      	ldr	r3, [pc, #20]	; (8004d78 <LL_AHB2_GRP1_EnableClock+0x2c>)
 8004d62:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8004d64:	687b      	ldr	r3, [r7, #4]
 8004d66:	4013      	ands	r3, r2
 8004d68:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8004d6a:	68fb      	ldr	r3, [r7, #12]
}
 8004d6c:	bf00      	nop
 8004d6e:	3714      	adds	r7, #20
 8004d70:	46bd      	mov	sp, r7
 8004d72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d76:	4770      	bx	lr
 8004d78:	40021000 	.word	0x40021000

08004d7c <MX_RNG_Init>:

/* USER CODE END 0 */

/* RNG init function */
void MX_RNG_Init(void)
{
 8004d7c:	b580      	push	{r7, lr}
 8004d7e:	af00      	add	r7, sp, #0

  /* Peripheral clock enable */
  LL_AHB2_GRP1_EnableClock(LL_AHB2_GRP1_PERIPH_RNG);
 8004d80:	f04f 6080 	mov.w	r0, #67108864	; 0x4000000
 8004d84:	f7ff ffe2 	bl	8004d4c <LL_AHB2_GRP1_EnableClock>

  LL_RNG_Enable(RNG);
 8004d88:	4802      	ldr	r0, [pc, #8]	; (8004d94 <MX_RNG_Init+0x18>)
 8004d8a:	f7ff ffce 	bl	8004d2a <LL_RNG_Enable>

}
 8004d8e:	bf00      	nop
 8004d90:	bd80      	pop	{r7, pc}
 8004d92:	bf00      	nop
 8004d94:	50060800 	.word	0x50060800

08004d98 <MX_SPI3_Init>:

SPI_HandleTypeDef hspi3;

/* SPI3 init function */
void MX_SPI3_Init(void)
{
 8004d98:	b580      	push	{r7, lr}
 8004d9a:	af00      	add	r7, sp, #0

  hspi3.Instance = SPI3;
 8004d9c:	4b1b      	ldr	r3, [pc, #108]	; (8004e0c <MX_SPI3_Init+0x74>)
 8004d9e:	4a1c      	ldr	r2, [pc, #112]	; (8004e10 <MX_SPI3_Init+0x78>)
 8004da0:	601a      	str	r2, [r3, #0]
  hspi3.Init.Mode = SPI_MODE_MASTER;
 8004da2:	4b1a      	ldr	r3, [pc, #104]	; (8004e0c <MX_SPI3_Init+0x74>)
 8004da4:	f44f 7282 	mov.w	r2, #260	; 0x104
 8004da8:	605a      	str	r2, [r3, #4]
  hspi3.Init.Direction = SPI_DIRECTION_2LINES;
 8004daa:	4b18      	ldr	r3, [pc, #96]	; (8004e0c <MX_SPI3_Init+0x74>)
 8004dac:	2200      	movs	r2, #0
 8004dae:	609a      	str	r2, [r3, #8]
  hspi3.Init.DataSize = SPI_DATASIZE_8BIT;
 8004db0:	4b16      	ldr	r3, [pc, #88]	; (8004e0c <MX_SPI3_Init+0x74>)
 8004db2:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 8004db6:	60da      	str	r2, [r3, #12]
  hspi3.Init.CLKPolarity = SPI_POLARITY_LOW;
 8004db8:	4b14      	ldr	r3, [pc, #80]	; (8004e0c <MX_SPI3_Init+0x74>)
 8004dba:	2200      	movs	r2, #0
 8004dbc:	611a      	str	r2, [r3, #16]
  hspi3.Init.CLKPhase = SPI_PHASE_1EDGE;
 8004dbe:	4b13      	ldr	r3, [pc, #76]	; (8004e0c <MX_SPI3_Init+0x74>)
 8004dc0:	2200      	movs	r2, #0
 8004dc2:	615a      	str	r2, [r3, #20]
  hspi3.Init.NSS = SPI_NSS_SOFT;
 8004dc4:	4b11      	ldr	r3, [pc, #68]	; (8004e0c <MX_SPI3_Init+0x74>)
 8004dc6:	f44f 7200 	mov.w	r2, #512	; 0x200
 8004dca:	619a      	str	r2, [r3, #24]
  hspi3.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_8;
 8004dcc:	4b0f      	ldr	r3, [pc, #60]	; (8004e0c <MX_SPI3_Init+0x74>)
 8004dce:	2210      	movs	r2, #16
 8004dd0:	61da      	str	r2, [r3, #28]
  hspi3.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8004dd2:	4b0e      	ldr	r3, [pc, #56]	; (8004e0c <MX_SPI3_Init+0x74>)
 8004dd4:	2200      	movs	r2, #0
 8004dd6:	621a      	str	r2, [r3, #32]
  hspi3.Init.TIMode = SPI_TIMODE_DISABLE;
 8004dd8:	4b0c      	ldr	r3, [pc, #48]	; (8004e0c <MX_SPI3_Init+0x74>)
 8004dda:	2200      	movs	r2, #0
 8004ddc:	625a      	str	r2, [r3, #36]	; 0x24
  hspi3.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8004dde:	4b0b      	ldr	r3, [pc, #44]	; (8004e0c <MX_SPI3_Init+0x74>)
 8004de0:	2200      	movs	r2, #0
 8004de2:	629a      	str	r2, [r3, #40]	; 0x28
  hspi3.Init.CRCPolynomial = 7;
 8004de4:	4b09      	ldr	r3, [pc, #36]	; (8004e0c <MX_SPI3_Init+0x74>)
 8004de6:	2207      	movs	r2, #7
 8004de8:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi3.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8004dea:	4b08      	ldr	r3, [pc, #32]	; (8004e0c <MX_SPI3_Init+0x74>)
 8004dec:	2200      	movs	r2, #0
 8004dee:	631a      	str	r2, [r3, #48]	; 0x30
  hspi3.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8004df0:	4b06      	ldr	r3, [pc, #24]	; (8004e0c <MX_SPI3_Init+0x74>)
 8004df2:	2208      	movs	r2, #8
 8004df4:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi3) != HAL_OK)
 8004df6:	4805      	ldr	r0, [pc, #20]	; (8004e0c <MX_SPI3_Init+0x74>)
 8004df8:	f004 fb36 	bl	8009468 <HAL_SPI_Init>
 8004dfc:	4603      	mov	r3, r0
 8004dfe:	2b00      	cmp	r3, #0
 8004e00:	d001      	beq.n	8004e06 <MX_SPI3_Init+0x6e>
  {
    Error_Handler();
 8004e02:	f7ff ff8b 	bl	8004d1c <Error_Handler>
  }

}
 8004e06:	bf00      	nop
 8004e08:	bd80      	pop	{r7, pc}
 8004e0a:	bf00      	nop
 8004e0c:	20001c0c 	.word	0x20001c0c
 8004e10:	40003c00 	.word	0x40003c00

08004e14 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8004e14:	b580      	push	{r7, lr}
 8004e16:	b08a      	sub	sp, #40	; 0x28
 8004e18:	af00      	add	r7, sp, #0
 8004e1a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004e1c:	f107 0314 	add.w	r3, r7, #20
 8004e20:	2200      	movs	r2, #0
 8004e22:	601a      	str	r2, [r3, #0]
 8004e24:	605a      	str	r2, [r3, #4]
 8004e26:	609a      	str	r2, [r3, #8]
 8004e28:	60da      	str	r2, [r3, #12]
 8004e2a:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI3)
 8004e2c:	687b      	ldr	r3, [r7, #4]
 8004e2e:	681b      	ldr	r3, [r3, #0]
 8004e30:	4a17      	ldr	r2, [pc, #92]	; (8004e90 <HAL_SPI_MspInit+0x7c>)
 8004e32:	4293      	cmp	r3, r2
 8004e34:	d128      	bne.n	8004e88 <HAL_SPI_MspInit+0x74>
  {
  /* USER CODE BEGIN SPI3_MspInit 0 */

  /* USER CODE END SPI3_MspInit 0 */
    /* SPI3 clock enable */
    __HAL_RCC_SPI3_CLK_ENABLE();
 8004e36:	4b17      	ldr	r3, [pc, #92]	; (8004e94 <HAL_SPI_MspInit+0x80>)
 8004e38:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004e3a:	4a16      	ldr	r2, [pc, #88]	; (8004e94 <HAL_SPI_MspInit+0x80>)
 8004e3c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004e40:	6593      	str	r3, [r2, #88]	; 0x58
 8004e42:	4b14      	ldr	r3, [pc, #80]	; (8004e94 <HAL_SPI_MspInit+0x80>)
 8004e44:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004e46:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8004e4a:	613b      	str	r3, [r7, #16]
 8004e4c:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8004e4e:	4b11      	ldr	r3, [pc, #68]	; (8004e94 <HAL_SPI_MspInit+0x80>)
 8004e50:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004e52:	4a10      	ldr	r2, [pc, #64]	; (8004e94 <HAL_SPI_MspInit+0x80>)
 8004e54:	f043 0304 	orr.w	r3, r3, #4
 8004e58:	64d3      	str	r3, [r2, #76]	; 0x4c
 8004e5a:	4b0e      	ldr	r3, [pc, #56]	; (8004e94 <HAL_SPI_MspInit+0x80>)
 8004e5c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004e5e:	f003 0304 	and.w	r3, r3, #4
 8004e62:	60fb      	str	r3, [r7, #12]
 8004e64:	68fb      	ldr	r3, [r7, #12]
    /**SPI3 GPIO Configuration    
    PC10     ------> SPI3_SCK
    PC11     ------> SPI3_MISO
    PC12     ------> SPI3_MOSI 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12;
 8004e66:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 8004e6a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004e6c:	2302      	movs	r3, #2
 8004e6e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004e70:	2300      	movs	r3, #0
 8004e72:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004e74:	2300      	movs	r3, #0
 8004e76:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8004e78:	2306      	movs	r3, #6
 8004e7a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8004e7c:	f107 0314 	add.w	r3, r7, #20
 8004e80:	4619      	mov	r1, r3
 8004e82:	4805      	ldr	r0, [pc, #20]	; (8004e98 <HAL_SPI_MspInit+0x84>)
 8004e84:	f003 f95e 	bl	8008144 <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }
}
 8004e88:	bf00      	nop
 8004e8a:	3728      	adds	r7, #40	; 0x28
 8004e8c:	46bd      	mov	sp, r7
 8004e8e:	bd80      	pop	{r7, pc}
 8004e90:	40003c00 	.word	0x40003c00
 8004e94:	40021000 	.word	0x40021000
 8004e98:	48000800 	.word	0x48000800

08004e9c <LL_PWR_DisableUCPDDeadBattery>:
  *         control to the UCPD (which should therefore be initialized before doing the disable).
  * @rmtoll CR3          UCPD_DBDIS           LL_PWR_DisableUCPDDeadBattery
  * @retval None
  */
__STATIC_INLINE void LL_PWR_DisableUCPDDeadBattery(void)
{
 8004e9c:	b480      	push	{r7}
 8004e9e:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR3, PWR_CR3_UCPD_DBDIS);
 8004ea0:	4b05      	ldr	r3, [pc, #20]	; (8004eb8 <LL_PWR_DisableUCPDDeadBattery+0x1c>)
 8004ea2:	689b      	ldr	r3, [r3, #8]
 8004ea4:	4a04      	ldr	r2, [pc, #16]	; (8004eb8 <LL_PWR_DisableUCPDDeadBattery+0x1c>)
 8004ea6:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8004eaa:	6093      	str	r3, [r2, #8]
}
 8004eac:	bf00      	nop
 8004eae:	46bd      	mov	sp, r7
 8004eb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004eb4:	4770      	bx	lr
 8004eb6:	bf00      	nop
 8004eb8:	40007000 	.word	0x40007000

08004ebc <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8004ebc:	b580      	push	{r7, lr}
 8004ebe:	b082      	sub	sp, #8
 8004ec0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004ec2:	4b0f      	ldr	r3, [pc, #60]	; (8004f00 <HAL_MspInit+0x44>)
 8004ec4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004ec6:	4a0e      	ldr	r2, [pc, #56]	; (8004f00 <HAL_MspInit+0x44>)
 8004ec8:	f043 0301 	orr.w	r3, r3, #1
 8004ecc:	6613      	str	r3, [r2, #96]	; 0x60
 8004ece:	4b0c      	ldr	r3, [pc, #48]	; (8004f00 <HAL_MspInit+0x44>)
 8004ed0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004ed2:	f003 0301 	and.w	r3, r3, #1
 8004ed6:	607b      	str	r3, [r7, #4]
 8004ed8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8004eda:	4b09      	ldr	r3, [pc, #36]	; (8004f00 <HAL_MspInit+0x44>)
 8004edc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004ede:	4a08      	ldr	r2, [pc, #32]	; (8004f00 <HAL_MspInit+0x44>)
 8004ee0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004ee4:	6593      	str	r3, [r2, #88]	; 0x58
 8004ee6:	4b06      	ldr	r3, [pc, #24]	; (8004f00 <HAL_MspInit+0x44>)
 8004ee8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004eea:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004eee:	603b      	str	r3, [r7, #0]
 8004ef0:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral 
  */
  LL_PWR_DisableDeadBatteryPD();
 8004ef2:	f7ff ffd3 	bl	8004e9c <LL_PWR_DisableUCPDDeadBattery>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8004ef6:	bf00      	nop
 8004ef8:	3708      	adds	r7, #8
 8004efa:	46bd      	mov	sp, r7
 8004efc:	bd80      	pop	{r7, pc}
 8004efe:	bf00      	nop
 8004f00:	40021000 	.word	0x40021000

08004f04 <LL_EXTI_IsActiveFlag_0_31>:
  * @note   (*): Available in some devices
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_EXTI_IsActiveFlag_0_31(uint32_t ExtiLine)
{
 8004f04:	b480      	push	{r7}
 8004f06:	b083      	sub	sp, #12
 8004f08:	af00      	add	r7, sp, #0
 8004f0a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(EXTI->PR1, ExtiLine) == (ExtiLine)) ? 1UL : 0UL);
 8004f0c:	4b07      	ldr	r3, [pc, #28]	; (8004f2c <LL_EXTI_IsActiveFlag_0_31+0x28>)
 8004f0e:	695a      	ldr	r2, [r3, #20]
 8004f10:	687b      	ldr	r3, [r7, #4]
 8004f12:	4013      	ands	r3, r2
 8004f14:	687a      	ldr	r2, [r7, #4]
 8004f16:	429a      	cmp	r2, r3
 8004f18:	d101      	bne.n	8004f1e <LL_EXTI_IsActiveFlag_0_31+0x1a>
 8004f1a:	2301      	movs	r3, #1
 8004f1c:	e000      	b.n	8004f20 <LL_EXTI_IsActiveFlag_0_31+0x1c>
 8004f1e:	2300      	movs	r3, #0
}
 8004f20:	4618      	mov	r0, r3
 8004f22:	370c      	adds	r7, #12
 8004f24:	46bd      	mov	sp, r7
 8004f26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f2a:	4770      	bx	lr
 8004f2c:	40010400 	.word	0x40010400

08004f30 <LL_EXTI_ClearFlag_0_31>:
  * @note   (*): Available in some devices
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_ClearFlag_0_31(uint32_t ExtiLine)
{
 8004f30:	b480      	push	{r7}
 8004f32:	b083      	sub	sp, #12
 8004f34:	af00      	add	r7, sp, #0
 8004f36:	6078      	str	r0, [r7, #4]
  WRITE_REG(EXTI->PR1, ExtiLine);
 8004f38:	4a04      	ldr	r2, [pc, #16]	; (8004f4c <LL_EXTI_ClearFlag_0_31+0x1c>)
 8004f3a:	687b      	ldr	r3, [r7, #4]
 8004f3c:	6153      	str	r3, [r2, #20]
}
 8004f3e:	bf00      	nop
 8004f40:	370c      	adds	r7, #12
 8004f42:	46bd      	mov	sp, r7
 8004f44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f48:	4770      	bx	lr
 8004f4a:	bf00      	nop
 8004f4c:	40010400 	.word	0x40010400

08004f50 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8004f50:	b480      	push	{r7}
 8004f52:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8004f54:	bf00      	nop
 8004f56:	46bd      	mov	sp, r7
 8004f58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f5c:	4770      	bx	lr

08004f5e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8004f5e:	b480      	push	{r7}
 8004f60:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8004f62:	e7fe      	b.n	8004f62 <HardFault_Handler+0x4>

08004f64 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8004f64:	b480      	push	{r7}
 8004f66:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8004f68:	e7fe      	b.n	8004f68 <MemManage_Handler+0x4>

08004f6a <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8004f6a:	b480      	push	{r7}
 8004f6c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8004f6e:	e7fe      	b.n	8004f6e <BusFault_Handler+0x4>

08004f70 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8004f70:	b480      	push	{r7}
 8004f72:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8004f74:	e7fe      	b.n	8004f74 <UsageFault_Handler+0x4>

08004f76 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8004f76:	b480      	push	{r7}
 8004f78:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8004f7a:	bf00      	nop
 8004f7c:	46bd      	mov	sp, r7
 8004f7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f82:	4770      	bx	lr

08004f84 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8004f84:	b480      	push	{r7}
 8004f86:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8004f88:	bf00      	nop
 8004f8a:	46bd      	mov	sp, r7
 8004f8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f90:	4770      	bx	lr

08004f92 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8004f92:	b480      	push	{r7}
 8004f94:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8004f96:	bf00      	nop
 8004f98:	46bd      	mov	sp, r7
 8004f9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f9e:	4770      	bx	lr

08004fa0 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8004fa0:	b580      	push	{r7, lr}
 8004fa2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8004fa4:	f000 fd5e 	bl	8005a64 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8004fa8:	bf00      	nop
 8004faa:	bd80      	pop	{r7, pc}

08004fac <EXTI0_IRQHandler>:

/**
  * @brief This function handles EXTI line0 interrupt.
  */
void EXTI0_IRQHandler(void)
{
 8004fac:	b580      	push	{r7, lr}
 8004fae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI0_IRQn 0 */
	if (LL_EXTI_IsActiveFlag_0_31(LL_EXTI_LINE_0))
 8004fb0:	2001      	movs	r0, #1
 8004fb2:	f7ff ffa7 	bl	8004f04 <LL_EXTI_IsActiveFlag_0_31>
 8004fb6:	4603      	mov	r3, r0
 8004fb8:	2b00      	cmp	r3, #0
 8004fba:	d005      	beq.n	8004fc8 <EXTI0_IRQHandler+0x1c>
	{
		EM_SetNewEvent(evRedBtn);
 8004fbc:	2004      	movs	r0, #4
 8004fbe:	f7fe f9e1 	bl	8003384 <EM_SetNewEvent>
		printf("'Red' BTN3_EXTI0_Pin\n");
 8004fc2:	4807      	ldr	r0, [pc, #28]	; (8004fe0 <EXTI0_IRQHandler+0x34>)
 8004fc4:	f007 fd4c 	bl	800ca60 <puts>
	}

  /* USER CODE END EXTI0_IRQn 0 */
  if (LL_EXTI_IsActiveFlag_0_31(LL_EXTI_LINE_0) != RESET)
 8004fc8:	2001      	movs	r0, #1
 8004fca:	f7ff ff9b 	bl	8004f04 <LL_EXTI_IsActiveFlag_0_31>
 8004fce:	4603      	mov	r3, r0
 8004fd0:	2b00      	cmp	r3, #0
 8004fd2:	d002      	beq.n	8004fda <EXTI0_IRQHandler+0x2e>
  {
    LL_EXTI_ClearFlag_0_31(LL_EXTI_LINE_0);
 8004fd4:	2001      	movs	r0, #1
 8004fd6:	f7ff ffab 	bl	8004f30 <LL_EXTI_ClearFlag_0_31>
    /* USER CODE END LL_EXTI_LINE_0 */
  }
  /* USER CODE BEGIN EXTI0_IRQn 1 */

  /* USER CODE END EXTI0_IRQn 1 */
}
 8004fda:	bf00      	nop
 8004fdc:	bd80      	pop	{r7, pc}
 8004fde:	bf00      	nop
 8004fe0:	0800eef8 	.word	0x0800eef8

08004fe4 <EXTI1_IRQHandler>:

/**
  * @brief This function handles EXTI line1 interrupt.
  */
void EXTI1_IRQHandler(void)
{
 8004fe4:	b580      	push	{r7, lr}
 8004fe6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI1_IRQn 0 */

	if (LL_EXTI_IsActiveFlag_0_31(LL_EXTI_LINE_1))
 8004fe8:	2002      	movs	r0, #2
 8004fea:	f7ff ff8b 	bl	8004f04 <LL_EXTI_IsActiveFlag_0_31>
 8004fee:	4603      	mov	r3, r0
 8004ff0:	2b00      	cmp	r3, #0
 8004ff2:	d005      	beq.n	8005000 <EXTI1_IRQHandler+0x1c>
	{
		EM_SetNewEvent(evGreenBtn);
 8004ff4:	2002      	movs	r0, #2
 8004ff6:	f7fe f9c5 	bl	8003384 <EM_SetNewEvent>
		printf("'Green' BTN4_EXTI1_Pin\n");
 8004ffa:	4807      	ldr	r0, [pc, #28]	; (8005018 <EXTI1_IRQHandler+0x34>)
 8004ffc:	f007 fd30 	bl	800ca60 <puts>
	}


  /* USER CODE END EXTI1_IRQn 0 */
  if (LL_EXTI_IsActiveFlag_0_31(LL_EXTI_LINE_1) != RESET)
 8005000:	2002      	movs	r0, #2
 8005002:	f7ff ff7f 	bl	8004f04 <LL_EXTI_IsActiveFlag_0_31>
 8005006:	4603      	mov	r3, r0
 8005008:	2b00      	cmp	r3, #0
 800500a:	d002      	beq.n	8005012 <EXTI1_IRQHandler+0x2e>
  {
    LL_EXTI_ClearFlag_0_31(LL_EXTI_LINE_1);
 800500c:	2002      	movs	r0, #2
 800500e:	f7ff ff8f 	bl	8004f30 <LL_EXTI_ClearFlag_0_31>
    /* USER CODE END LL_EXTI_LINE_1 */
  }
  /* USER CODE BEGIN EXTI1_IRQn 1 */

  /* USER CODE END EXTI1_IRQn 1 */
}
 8005012:	bf00      	nop
 8005014:	bd80      	pop	{r7, pc}
 8005016:	bf00      	nop
 8005018:	0800ef10 	.word	0x0800ef10

0800501c <EXTI2_IRQHandler>:

/**
  * @brief This function handles EXTI line2 interrupt.
  */
void EXTI2_IRQHandler(void)
{
 800501c:	b580      	push	{r7, lr}
 800501e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI2_IRQn 0 */

	if (LL_EXTI_IsActiveFlag_0_31(LL_EXTI_LINE_2))
 8005020:	2004      	movs	r0, #4
 8005022:	f7ff ff6f 	bl	8004f04 <LL_EXTI_IsActiveFlag_0_31>
 8005026:	4603      	mov	r3, r0
 8005028:	2b00      	cmp	r3, #0
 800502a:	d005      	beq.n	8005038 <EXTI2_IRQHandler+0x1c>
	{
		EM_SetNewEvent(evEncoderPush);
 800502c:	2006      	movs	r0, #6
 800502e:	f7fe f9a9 	bl	8003384 <EM_SetNewEvent>
		printf("'EncoderPush' ENC_EXTI2_Pin\n");
 8005032:	4807      	ldr	r0, [pc, #28]	; (8005050 <EXTI2_IRQHandler+0x34>)
 8005034:	f007 fd14 	bl	800ca60 <puts>
	}


  /* USER CODE END EXTI2_IRQn 0 */
  if (LL_EXTI_IsActiveFlag_0_31(LL_EXTI_LINE_2) != RESET)
 8005038:	2004      	movs	r0, #4
 800503a:	f7ff ff63 	bl	8004f04 <LL_EXTI_IsActiveFlag_0_31>
 800503e:	4603      	mov	r3, r0
 8005040:	2b00      	cmp	r3, #0
 8005042:	d002      	beq.n	800504a <EXTI2_IRQHandler+0x2e>
  {
    LL_EXTI_ClearFlag_0_31(LL_EXTI_LINE_2);
 8005044:	2004      	movs	r0, #4
 8005046:	f7ff ff73 	bl	8004f30 <LL_EXTI_ClearFlag_0_31>
    /* USER CODE END LL_EXTI_LINE_2 */
  }
  /* USER CODE BEGIN EXTI2_IRQn 1 */

  /* USER CODE END EXTI2_IRQn 1 */
}
 800504a:	bf00      	nop
 800504c:	bd80      	pop	{r7, pc}
 800504e:	bf00      	nop
 8005050:	0800ef28 	.word	0x0800ef28

08005054 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 8005054:	b580      	push	{r7, lr}
 8005056:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */
	//printf("Test\n");
	//printf("%lu\n", trigger_input[0]);
  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8005058:	4802      	ldr	r0, [pc, #8]	; (8005064 <DMA1_Channel1_IRQHandler+0x10>)
 800505a:	f002 ff23 	bl	8007ea4 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 800505e:	bf00      	nop
 8005060:	bd80      	pop	{r7, pc}
 8005062:	bf00      	nop
 8005064:	20001aa0 	.word	0x20001aa0

08005068 <DMA1_Channel2_IRQHandler>:

/**
  * @brief This function handles DMA1 channel2 global interrupt.
  */
void DMA1_Channel2_IRQHandler(void)
{
 8005068:	b580      	push	{r7, lr}
 800506a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel2_IRQn 0 */

  /* USER CODE END DMA1_Channel2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_dac1_ch1);
 800506c:	4802      	ldr	r0, [pc, #8]	; (8005078 <DMA1_Channel2_IRQHandler+0x10>)
 800506e:	f002 ff19 	bl	8007ea4 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel2_IRQn 1 */

  /* USER CODE END DMA1_Channel2_IRQn 1 */
}
 8005072:	bf00      	nop
 8005074:	bd80      	pop	{r7, pc}
 8005076:	bf00      	nop
 8005078:	20001b4c 	.word	0x20001b4c

0800507c <DMA1_Channel3_IRQHandler>:

/**
  * @brief This function handles DMA1 channel3 global interrupt.
  */
void DMA1_Channel3_IRQHandler(void)
{
 800507c:	b580      	push	{r7, lr}
 800507e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel3_IRQn 0 */

  /* USER CODE END DMA1_Channel3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_dac2_ch1);
 8005080:	4802      	ldr	r0, [pc, #8]	; (800508c <DMA1_Channel3_IRQHandler+0x10>)
 8005082:	f002 ff0f 	bl	8007ea4 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel3_IRQn 1 */

  /* USER CODE END DMA1_Channel3_IRQn 1 */
}
 8005086:	bf00      	nop
 8005088:	bd80      	pop	{r7, pc}
 800508a:	bf00      	nop
 800508c:	20001bac 	.word	0x20001bac

08005090 <TIM1_BRK_TIM15_IRQHandler>:

/**
  * @brief This function handles TIM1 break interrupt and TIM15 global interrupt.
  */
void TIM1_BRK_TIM15_IRQHandler(void)
{
 8005090:	b580      	push	{r7, lr}
 8005092:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_BRK_TIM15_IRQn 0 */
	DM_UpdateDisplay();
 8005094:	f7fb fef2 	bl	8000e7c <DM_UpdateDisplay>
	{
		printf("Encoder turned\n");
		TIM1->SR &= ~(TIM_SR_IDXF);
	}
*/
	if((TIM1->SR & TIM_SR_DIRF) == TIM_SR_DIRF)
 8005098:	4b0d      	ldr	r3, [pc, #52]	; (80050d0 <TIM1_BRK_TIM15_IRQHandler+0x40>)
 800509a:	691b      	ldr	r3, [r3, #16]
 800509c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80050a0:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80050a4:	d10b      	bne.n	80050be <TIM1_BRK_TIM15_IRQHandler+0x2e>
	{
		EM_SetNewEvent(evEncoderSet);
 80050a6:	2005      	movs	r0, #5
 80050a8:	f7fe f96c 	bl	8003384 <EM_SetNewEvent>
		printf("Encoder new direction\n");
 80050ac:	4809      	ldr	r0, [pc, #36]	; (80050d4 <TIM1_BRK_TIM15_IRQHandler+0x44>)
 80050ae:	f007 fcd7 	bl	800ca60 <puts>
		TIM1->SR &= ~(TIM_SR_DIRF);
 80050b2:	4b07      	ldr	r3, [pc, #28]	; (80050d0 <TIM1_BRK_TIM15_IRQHandler+0x40>)
 80050b4:	691b      	ldr	r3, [r3, #16]
 80050b6:	4a06      	ldr	r2, [pc, #24]	; (80050d0 <TIM1_BRK_TIM15_IRQHandler+0x40>)
 80050b8:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80050bc:	6113      	str	r3, [r2, #16]

	}
  /* USER CODE END TIM1_BRK_TIM15_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 80050be:	4806      	ldr	r0, [pc, #24]	; (80050d8 <TIM1_BRK_TIM15_IRQHandler+0x48>)
 80050c0:	f004 fe77 	bl	8009db2 <HAL_TIM_IRQHandler>
  HAL_TIM_IRQHandler(&htim15);
 80050c4:	4805      	ldr	r0, [pc, #20]	; (80050dc <TIM1_BRK_TIM15_IRQHandler+0x4c>)
 80050c6:	f004 fe74 	bl	8009db2 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_BRK_TIM15_IRQn 1 */

  /* USER CODE END TIM1_BRK_TIM15_IRQn 1 */
}
 80050ca:	bf00      	nop
 80050cc:	bd80      	pop	{r7, pc}
 80050ce:	bf00      	nop
 80050d0:	40012c00 	.word	0x40012c00
 80050d4:	0800ef44 	.word	0x0800ef44
 80050d8:	20001da0 	.word	0x20001da0
 80050dc:	20001cbc 	.word	0x20001cbc

080050e0 <TIM1_UP_TIM16_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM16 global interrupt.
  */
void TIM1_UP_TIM16_IRQHandler(void)
{
 80050e0:	b580      	push	{r7, lr}
 80050e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 0 */
	//snprintf(control_pressed, sizeof(control_pressed), " ");
  /* USER CODE END TIM1_UP_TIM16_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 80050e4:	4803      	ldr	r0, [pc, #12]	; (80050f4 <TIM1_UP_TIM16_IRQHandler+0x14>)
 80050e6:	f004 fe64 	bl	8009db2 <HAL_TIM_IRQHandler>
  HAL_TIM_IRQHandler(&htim16);
 80050ea:	4803      	ldr	r0, [pc, #12]	; (80050f8 <TIM1_UP_TIM16_IRQHandler+0x18>)
 80050ec:	f004 fe61 	bl	8009db2 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 1 */
}
 80050f0:	bf00      	nop
 80050f2:	bd80      	pop	{r7, pc}
 80050f4:	20001da0 	.word	0x20001da0
 80050f8:	20001e38 	.word	0x20001e38

080050fc <TIM1_TRG_COM_TIM17_IRQHandler>:

/**
  * @brief This function handles TIM1 trigger and commutation interrupts and TIM17 global interrupt.
  */
void TIM1_TRG_COM_TIM17_IRQHandler(void)
{
 80050fc:	b580      	push	{r7, lr}
 80050fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_TRG_COM_TIM17_IRQn 0 */
	update_dc_bias_sweep();
 8005100:	f7ff f95a 	bl	80043b8 <update_dc_bias_sweep>




  /* USER CODE END TIM1_TRG_COM_TIM17_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8005104:	4803      	ldr	r0, [pc, #12]	; (8005114 <TIM1_TRG_COM_TIM17_IRQHandler+0x18>)
 8005106:	f004 fe54 	bl	8009db2 <HAL_TIM_IRQHandler>
  HAL_TIM_IRQHandler(&htim17);
 800510a:	4803      	ldr	r0, [pc, #12]	; (8005118 <TIM1_TRG_COM_TIM17_IRQHandler+0x1c>)
 800510c:	f004 fe51 	bl	8009db2 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_TRG_COM_TIM17_IRQn 1 */

  /* USER CODE END TIM1_TRG_COM_TIM17_IRQn 1 */
}
 8005110:	bf00      	nop
 8005112:	bd80      	pop	{r7, pc}
 8005114:	20001da0 	.word	0x20001da0
 8005118:	20001d08 	.word	0x20001d08

0800511c <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 800511c:	b580      	push	{r7, lr}
 800511e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8005120:	4802      	ldr	r0, [pc, #8]	; (800512c <TIM2_IRQHandler+0x10>)
 8005122:	f004 fe46 	bl	8009db2 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8005126:	bf00      	nop
 8005128:	bd80      	pop	{r7, pc}
 800512a:	bf00      	nop
 800512c:	20001dec 	.word	0x20001dec

08005130 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8005130:	b580      	push	{r7, lr}
 8005132:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */


	if (LL_EXTI_IsActiveFlag_0_31(LL_EXTI_LINE_14))
 8005134:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 8005138:	f7ff fee4 	bl	8004f04 <LL_EXTI_IsActiveFlag_0_31>
 800513c:	4603      	mov	r3, r0
 800513e:	2b00      	cmp	r3, #0
 8005140:	d005      	beq.n	800514e <EXTI15_10_IRQHandler+0x1e>
	{

		EM_SetNewEvent(evBlueBtn);
 8005142:	2001      	movs	r0, #1
 8005144:	f7fe f91e 	bl	8003384 <EM_SetNewEvent>
		printf("'Blue' BTN1_EXTI14_Pin\n");
 8005148:	4813      	ldr	r0, [pc, #76]	; (8005198 <EXTI15_10_IRQHandler+0x68>)
 800514a:	f007 fc89 	bl	800ca60 <puts>
	}
	if (LL_EXTI_IsActiveFlag_0_31(LL_EXTI_LINE_15))
 800514e:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 8005152:	f7ff fed7 	bl	8004f04 <LL_EXTI_IsActiveFlag_0_31>
 8005156:	4603      	mov	r3, r0
 8005158:	2b00      	cmp	r3, #0
 800515a:	d005      	beq.n	8005168 <EXTI15_10_IRQHandler+0x38>
	{
		EM_SetNewEvent(evYellowBtn);
 800515c:	2003      	movs	r0, #3
 800515e:	f7fe f911 	bl	8003384 <EM_SetNewEvent>
		printf("'Yellow' BTN2_EXTI15_Pin\n");
 8005162:	480e      	ldr	r0, [pc, #56]	; (800519c <EXTI15_10_IRQHandler+0x6c>)
 8005164:	f007 fc7c 	bl	800ca60 <puts>
	}

  /* USER CODE END EXTI15_10_IRQn 0 */
  if (LL_EXTI_IsActiveFlag_0_31(LL_EXTI_LINE_14) != RESET)
 8005168:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 800516c:	f7ff feca 	bl	8004f04 <LL_EXTI_IsActiveFlag_0_31>
 8005170:	4603      	mov	r3, r0
 8005172:	2b00      	cmp	r3, #0
 8005174:	d003      	beq.n	800517e <EXTI15_10_IRQHandler+0x4e>
  {
    LL_EXTI_ClearFlag_0_31(LL_EXTI_LINE_14);
 8005176:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 800517a:	f7ff fed9 	bl	8004f30 <LL_EXTI_ClearFlag_0_31>
    /* USER CODE BEGIN LL_EXTI_LINE_14 */
    
    /* USER CODE END LL_EXTI_LINE_14 */
  }
  if (LL_EXTI_IsActiveFlag_0_31(LL_EXTI_LINE_15) != RESET)
 800517e:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 8005182:	f7ff febf 	bl	8004f04 <LL_EXTI_IsActiveFlag_0_31>
 8005186:	4603      	mov	r3, r0
 8005188:	2b00      	cmp	r3, #0
 800518a:	d003      	beq.n	8005194 <EXTI15_10_IRQHandler+0x64>
  {
    LL_EXTI_ClearFlag_0_31(LL_EXTI_LINE_15);
 800518c:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 8005190:	f7ff fece 	bl	8004f30 <LL_EXTI_ClearFlag_0_31>
    /* USER CODE END LL_EXTI_LINE_15 */
  }
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8005194:	bf00      	nop
 8005196:	bd80      	pop	{r7, pc}
 8005198:	0800ef5c 	.word	0x0800ef5c
 800519c:	0800ef74 	.word	0x0800ef74

080051a0 <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80051a0:	b580      	push	{r7, lr}
 80051a2:	b086      	sub	sp, #24
 80051a4:	af00      	add	r7, sp, #0
 80051a6:	60f8      	str	r0, [r7, #12]
 80051a8:	60b9      	str	r1, [r7, #8]
 80051aa:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80051ac:	2300      	movs	r3, #0
 80051ae:	617b      	str	r3, [r7, #20]
 80051b0:	e00a      	b.n	80051c8 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 80051b2:	f3af 8000 	nop.w
 80051b6:	4601      	mov	r1, r0
 80051b8:	68bb      	ldr	r3, [r7, #8]
 80051ba:	1c5a      	adds	r2, r3, #1
 80051bc:	60ba      	str	r2, [r7, #8]
 80051be:	b2ca      	uxtb	r2, r1
 80051c0:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80051c2:	697b      	ldr	r3, [r7, #20]
 80051c4:	3301      	adds	r3, #1
 80051c6:	617b      	str	r3, [r7, #20]
 80051c8:	697a      	ldr	r2, [r7, #20]
 80051ca:	687b      	ldr	r3, [r7, #4]
 80051cc:	429a      	cmp	r2, r3
 80051ce:	dbf0      	blt.n	80051b2 <_read+0x12>
	}

return len;
 80051d0:	687b      	ldr	r3, [r7, #4]
}
 80051d2:	4618      	mov	r0, r3
 80051d4:	3718      	adds	r7, #24
 80051d6:	46bd      	mov	sp, r7
 80051d8:	bd80      	pop	{r7, pc}

080051da <_close>:
	}
	return len;
}

int _close(int file)
{
 80051da:	b480      	push	{r7}
 80051dc:	b083      	sub	sp, #12
 80051de:	af00      	add	r7, sp, #0
 80051e0:	6078      	str	r0, [r7, #4]
	return -1;
 80051e2:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 80051e6:	4618      	mov	r0, r3
 80051e8:	370c      	adds	r7, #12
 80051ea:	46bd      	mov	sp, r7
 80051ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051f0:	4770      	bx	lr

080051f2 <_fstat>:


int _fstat(int file, struct stat *st)
{
 80051f2:	b480      	push	{r7}
 80051f4:	b083      	sub	sp, #12
 80051f6:	af00      	add	r7, sp, #0
 80051f8:	6078      	str	r0, [r7, #4]
 80051fa:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 80051fc:	683b      	ldr	r3, [r7, #0]
 80051fe:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8005202:	605a      	str	r2, [r3, #4]
	return 0;
 8005204:	2300      	movs	r3, #0
}
 8005206:	4618      	mov	r0, r3
 8005208:	370c      	adds	r7, #12
 800520a:	46bd      	mov	sp, r7
 800520c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005210:	4770      	bx	lr

08005212 <_isatty>:

int _isatty(int file)
{
 8005212:	b480      	push	{r7}
 8005214:	b083      	sub	sp, #12
 8005216:	af00      	add	r7, sp, #0
 8005218:	6078      	str	r0, [r7, #4]
	return 1;
 800521a:	2301      	movs	r3, #1
}
 800521c:	4618      	mov	r0, r3
 800521e:	370c      	adds	r7, #12
 8005220:	46bd      	mov	sp, r7
 8005222:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005226:	4770      	bx	lr

08005228 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8005228:	b480      	push	{r7}
 800522a:	b085      	sub	sp, #20
 800522c:	af00      	add	r7, sp, #0
 800522e:	60f8      	str	r0, [r7, #12]
 8005230:	60b9      	str	r1, [r7, #8]
 8005232:	607a      	str	r2, [r7, #4]
	return 0;
 8005234:	2300      	movs	r3, #0
}
 8005236:	4618      	mov	r0, r3
 8005238:	3714      	adds	r7, #20
 800523a:	46bd      	mov	sp, r7
 800523c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005240:	4770      	bx	lr
	...

08005244 <_sbrk>:
/**
 _sbrk
 Increase program data space. Malloc and related functions depend on this
**/
caddr_t _sbrk(int incr)
{
 8005244:	b580      	push	{r7, lr}
 8005246:	b084      	sub	sp, #16
 8005248:	af00      	add	r7, sp, #0
 800524a:	6078      	str	r0, [r7, #4]
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 800524c:	4b11      	ldr	r3, [pc, #68]	; (8005294 <_sbrk+0x50>)
 800524e:	681b      	ldr	r3, [r3, #0]
 8005250:	2b00      	cmp	r3, #0
 8005252:	d102      	bne.n	800525a <_sbrk+0x16>
		heap_end = &end;
 8005254:	4b0f      	ldr	r3, [pc, #60]	; (8005294 <_sbrk+0x50>)
 8005256:	4a10      	ldr	r2, [pc, #64]	; (8005298 <_sbrk+0x54>)
 8005258:	601a      	str	r2, [r3, #0]

	prev_heap_end = heap_end;
 800525a:	4b0e      	ldr	r3, [pc, #56]	; (8005294 <_sbrk+0x50>)
 800525c:	681b      	ldr	r3, [r3, #0]
 800525e:	60fb      	str	r3, [r7, #12]
	if (heap_end + incr > stack_ptr)
 8005260:	4b0c      	ldr	r3, [pc, #48]	; (8005294 <_sbrk+0x50>)
 8005262:	681a      	ldr	r2, [r3, #0]
 8005264:	687b      	ldr	r3, [r7, #4]
 8005266:	4413      	add	r3, r2
 8005268:	466a      	mov	r2, sp
 800526a:	4293      	cmp	r3, r2
 800526c:	d907      	bls.n	800527e <_sbrk+0x3a>
	{
		errno = ENOMEM;
 800526e:	f006 ff0d 	bl	800c08c <__errno>
 8005272:	4602      	mov	r2, r0
 8005274:	230c      	movs	r3, #12
 8005276:	6013      	str	r3, [r2, #0]
		return (caddr_t) -1;
 8005278:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800527c:	e006      	b.n	800528c <_sbrk+0x48>
	}

	heap_end += incr;
 800527e:	4b05      	ldr	r3, [pc, #20]	; (8005294 <_sbrk+0x50>)
 8005280:	681a      	ldr	r2, [r3, #0]
 8005282:	687b      	ldr	r3, [r7, #4]
 8005284:	4413      	add	r3, r2
 8005286:	4a03      	ldr	r2, [pc, #12]	; (8005294 <_sbrk+0x50>)
 8005288:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap_end;
 800528a:	68fb      	ldr	r3, [r7, #12]
}
 800528c:	4618      	mov	r0, r3
 800528e:	3710      	adds	r7, #16
 8005290:	46bd      	mov	sp, r7
 8005292:	bd80      	pop	{r7, pc}
 8005294:	2000165c 	.word	0x2000165c
 8005298:	20001e90 	.word	0x20001e90

0800529c <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 800529c:	b480      	push	{r7}
 800529e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 80052a0:	4b08      	ldr	r3, [pc, #32]	; (80052c4 <SystemInit+0x28>)
 80052a2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80052a6:	4a07      	ldr	r2, [pc, #28]	; (80052c4 <SystemInit+0x28>)
 80052a8:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80052ac:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 80052b0:	4b04      	ldr	r3, [pc, #16]	; (80052c4 <SystemInit+0x28>)
 80052b2:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80052b6:	609a      	str	r2, [r3, #8]
#endif
}
 80052b8:	bf00      	nop
 80052ba:	46bd      	mov	sp, r7
 80052bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052c0:	4770      	bx	lr
 80052c2:	bf00      	nop
 80052c4:	e000ed00 	.word	0xe000ed00

080052c8 <MX_TIM1_Init>:
TIM_HandleTypeDef htim16;
TIM_HandleTypeDef htim17;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 80052c8:	b580      	push	{r7, lr}
 80052ca:	b09a      	sub	sp, #104	; 0x68
 80052cc:	af00      	add	r7, sp, #0
  TIM_Encoder_InitTypeDef sConfig = {0};
 80052ce:	f107 0344 	add.w	r3, r7, #68	; 0x44
 80052d2:	2224      	movs	r2, #36	; 0x24
 80052d4:	2100      	movs	r1, #0
 80052d6:	4618      	mov	r0, r3
 80052d8:	f006 ff02 	bl	800c0e0 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80052dc:	f107 0338 	add.w	r3, r7, #56	; 0x38
 80052e0:	2200      	movs	r2, #0
 80052e2:	601a      	str	r2, [r3, #0]
 80052e4:	605a      	str	r2, [r3, #4]
 80052e6:	609a      	str	r2, [r3, #8]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 80052e8:	1d3b      	adds	r3, r7, #4
 80052ea:	2234      	movs	r2, #52	; 0x34
 80052ec:	2100      	movs	r1, #0
 80052ee:	4618      	mov	r0, r3
 80052f0:	f006 fef6 	bl	800c0e0 <memset>

  htim1.Instance = TIM1;
 80052f4:	4b2a      	ldr	r3, [pc, #168]	; (80053a0 <MX_TIM1_Init+0xd8>)
 80052f6:	4a2b      	ldr	r2, [pc, #172]	; (80053a4 <MX_TIM1_Init+0xdc>)
 80052f8:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 80052fa:	4b29      	ldr	r3, [pc, #164]	; (80053a0 <MX_TIM1_Init+0xd8>)
 80052fc:	2200      	movs	r2, #0
 80052fe:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_CENTERALIGNED2;
 8005300:	4b27      	ldr	r3, [pc, #156]	; (80053a0 <MX_TIM1_Init+0xd8>)
 8005302:	2240      	movs	r2, #64	; 0x40
 8005304:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 1024;
 8005306:	4b26      	ldr	r3, [pc, #152]	; (80053a0 <MX_TIM1_Init+0xd8>)
 8005308:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800530c:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800530e:	4b24      	ldr	r3, [pc, #144]	; (80053a0 <MX_TIM1_Init+0xd8>)
 8005310:	2200      	movs	r2, #0
 8005312:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8005314:	4b22      	ldr	r3, [pc, #136]	; (80053a0 <MX_TIM1_Init+0xd8>)
 8005316:	2200      	movs	r2, #0
 8005318:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800531a:	4b21      	ldr	r3, [pc, #132]	; (80053a0 <MX_TIM1_Init+0xd8>)
 800531c:	2200      	movs	r2, #0
 800531e:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 8005320:	2303      	movs	r3, #3
 8005322:	647b      	str	r3, [r7, #68]	; 0x44
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8005324:	2300      	movs	r3, #0
 8005326:	64bb      	str	r3, [r7, #72]	; 0x48
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8005328:	2301      	movs	r3, #1
 800532a:	64fb      	str	r3, [r7, #76]	; 0x4c
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 800532c:	2300      	movs	r3, #0
 800532e:	653b      	str	r3, [r7, #80]	; 0x50
  sConfig.IC1Filter = 0;
 8005330:	2300      	movs	r3, #0
 8005332:	657b      	str	r3, [r7, #84]	; 0x54
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8005334:	2300      	movs	r3, #0
 8005336:	65bb      	str	r3, [r7, #88]	; 0x58
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8005338:	2301      	movs	r3, #1
 800533a:	65fb      	str	r3, [r7, #92]	; 0x5c
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 800533c:	2300      	movs	r3, #0
 800533e:	663b      	str	r3, [r7, #96]	; 0x60
  sConfig.IC2Filter = 0;
 8005340:	2300      	movs	r3, #0
 8005342:	667b      	str	r3, [r7, #100]	; 0x64
  if (HAL_TIM_Encoder_Init(&htim1, &sConfig) != HAL_OK)
 8005344:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8005348:	4619      	mov	r1, r3
 800534a:	4815      	ldr	r0, [pc, #84]	; (80053a0 <MX_TIM1_Init+0xd8>)
 800534c:	f004 fc8b 	bl	8009c66 <HAL_TIM_Encoder_Init>
 8005350:	4603      	mov	r3, r0
 8005352:	2b00      	cmp	r3, #0
 8005354:	d001      	beq.n	800535a <MX_TIM1_Init+0x92>
  {
    Error_Handler();
 8005356:	f7ff fce1 	bl	8004d1c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 800535a:	2320      	movs	r3, #32
 800535c:	63bb      	str	r3, [r7, #56]	; 0x38
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 800535e:	2300      	movs	r3, #0
 8005360:	63fb      	str	r3, [r7, #60]	; 0x3c
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8005362:	2300      	movs	r3, #0
 8005364:	643b      	str	r3, [r7, #64]	; 0x40
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8005366:	f107 0338 	add.w	r3, r7, #56	; 0x38
 800536a:	4619      	mov	r1, r3
 800536c:	480c      	ldr	r0, [pc, #48]	; (80053a0 <MX_TIM1_Init+0xd8>)
 800536e:	f005 fa03 	bl	800a778 <HAL_TIMEx_MasterConfigSynchronization>
 8005372:	4603      	mov	r3, r0
 8005374:	2b00      	cmp	r3, #0
 8005376:	d001      	beq.n	800537c <MX_TIM1_Init+0xb4>
  {
    Error_Handler();
 8005378:	f7ff fcd0 	bl	8004d1c <Error_Handler>
  }
  sBreakDeadTimeConfig.BreakAFMode = TIM_BREAK_AFMODE_INPUT;
 800537c:	2300      	movs	r3, #0
 800537e:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2AFMode = TIM_BREAK_AFMODE_INPUT;
 8005380:	2300      	movs	r3, #0
 8005382:	633b      	str	r3, [r7, #48]	; 0x30
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8005384:	1d3b      	adds	r3, r7, #4
 8005386:	4619      	mov	r1, r3
 8005388:	4805      	ldr	r0, [pc, #20]	; (80053a0 <MX_TIM1_Init+0xd8>)
 800538a:	f005 fa8b 	bl	800a8a4 <HAL_TIMEx_ConfigBreakDeadTime>
 800538e:	4603      	mov	r3, r0
 8005390:	2b00      	cmp	r3, #0
 8005392:	d001      	beq.n	8005398 <MX_TIM1_Init+0xd0>
  {
    Error_Handler();
 8005394:	f7ff fcc2 	bl	8004d1c <Error_Handler>
  }

}
 8005398:	bf00      	nop
 800539a:	3768      	adds	r7, #104	; 0x68
 800539c:	46bd      	mov	sp, r7
 800539e:	bd80      	pop	{r7, pc}
 80053a0:	20001da0 	.word	0x20001da0
 80053a4:	40012c00 	.word	0x40012c00

080053a8 <MX_TIM2_Init>:
/* TIM2 init function */
void MX_TIM2_Init(void)
{
 80053a8:	b580      	push	{r7, lr}
 80053aa:	b08c      	sub	sp, #48	; 0x30
 80053ac:	af00      	add	r7, sp, #0
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80053ae:	f107 0320 	add.w	r3, r7, #32
 80053b2:	2200      	movs	r2, #0
 80053b4:	601a      	str	r2, [r3, #0]
 80053b6:	605a      	str	r2, [r3, #4]
 80053b8:	609a      	str	r2, [r3, #8]
 80053ba:	60da      	str	r2, [r3, #12]
  TIM_SlaveConfigTypeDef sSlaveConfig = {0};
 80053bc:	f107 030c 	add.w	r3, r7, #12
 80053c0:	2200      	movs	r2, #0
 80053c2:	601a      	str	r2, [r3, #0]
 80053c4:	605a      	str	r2, [r3, #4]
 80053c6:	609a      	str	r2, [r3, #8]
 80053c8:	60da      	str	r2, [r3, #12]
 80053ca:	611a      	str	r2, [r3, #16]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80053cc:	463b      	mov	r3, r7
 80053ce:	2200      	movs	r2, #0
 80053d0:	601a      	str	r2, [r3, #0]
 80053d2:	605a      	str	r2, [r3, #4]
 80053d4:	609a      	str	r2, [r3, #8]

  htim2.Instance = TIM2;
 80053d6:	4b28      	ldr	r3, [pc, #160]	; (8005478 <MX_TIM2_Init+0xd0>)
 80053d8:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80053dc:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 2047;
 80053de:	4b26      	ldr	r3, [pc, #152]	; (8005478 <MX_TIM2_Init+0xd0>)
 80053e0:	f240 72ff 	movw	r2, #2047	; 0x7ff
 80053e4:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80053e6:	4b24      	ldr	r3, [pc, #144]	; (8005478 <MX_TIM2_Init+0xd0>)
 80053e8:	2200      	movs	r2, #0
 80053ea:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 1024;
 80053ec:	4b22      	ldr	r3, [pc, #136]	; (8005478 <MX_TIM2_Init+0xd0>)
 80053ee:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80053f2:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80053f4:	4b20      	ldr	r3, [pc, #128]	; (8005478 <MX_TIM2_Init+0xd0>)
 80053f6:	2200      	movs	r2, #0
 80053f8:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80053fa:	4b1f      	ldr	r3, [pc, #124]	; (8005478 <MX_TIM2_Init+0xd0>)
 80053fc:	2200      	movs	r2, #0
 80053fe:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8005400:	481d      	ldr	r0, [pc, #116]	; (8005478 <MX_TIM2_Init+0xd0>)
 8005402:	f004 fb46 	bl	8009a92 <HAL_TIM_Base_Init>
 8005406:	4603      	mov	r3, r0
 8005408:	2b00      	cmp	r3, #0
 800540a:	d001      	beq.n	8005410 <MX_TIM2_Init+0x68>
  {
    Error_Handler();
 800540c:	f7ff fc86 	bl	8004d1c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8005410:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8005414:	623b      	str	r3, [r7, #32]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8005416:	f107 0320 	add.w	r3, r7, #32
 800541a:	4619      	mov	r1, r3
 800541c:	4816      	ldr	r0, [pc, #88]	; (8005478 <MX_TIM2_Init+0xd0>)
 800541e:	f004 fe47 	bl	800a0b0 <HAL_TIM_ConfigClockSource>
 8005422:	4603      	mov	r3, r0
 8005424:	2b00      	cmp	r3, #0
 8005426:	d001      	beq.n	800542c <MX_TIM2_Init+0x84>
  {
    Error_Handler();
 8005428:	f7ff fc78 	bl	8004d1c <Error_Handler>
  }
  sSlaveConfig.SlaveMode = TIM_SLAVEMODE_GATED;
 800542c:	2305      	movs	r3, #5
 800542e:	60fb      	str	r3, [r7, #12]
  sSlaveConfig.InputTrigger = TIM_TS_TI1FP1;
 8005430:	2350      	movs	r3, #80	; 0x50
 8005432:	613b      	str	r3, [r7, #16]
  sSlaveConfig.TriggerPolarity = TIM_TRIGGERPOLARITY_RISING;
 8005434:	2300      	movs	r3, #0
 8005436:	617b      	str	r3, [r7, #20]
  sSlaveConfig.TriggerFilter = 0;
 8005438:	2300      	movs	r3, #0
 800543a:	61fb      	str	r3, [r7, #28]
  if (HAL_TIM_SlaveConfigSynchro(&htim2, &sSlaveConfig) != HAL_OK)
 800543c:	f107 030c 	add.w	r3, r7, #12
 8005440:	4619      	mov	r1, r3
 8005442:	480d      	ldr	r0, [pc, #52]	; (8005478 <MX_TIM2_Init+0xd0>)
 8005444:	f004 ff24 	bl	800a290 <HAL_TIM_SlaveConfigSynchro>
 8005448:	4603      	mov	r3, r0
 800544a:	2b00      	cmp	r3, #0
 800544c:	d001      	beq.n	8005452 <MX_TIM2_Init+0xaa>
  {
    Error_Handler();
 800544e:	f7ff fc65 	bl	8004d1c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8005452:	2300      	movs	r3, #0
 8005454:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8005456:	2300      	movs	r3, #0
 8005458:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 800545a:	463b      	mov	r3, r7
 800545c:	4619      	mov	r1, r3
 800545e:	4806      	ldr	r0, [pc, #24]	; (8005478 <MX_TIM2_Init+0xd0>)
 8005460:	f005 f98a 	bl	800a778 <HAL_TIMEx_MasterConfigSynchronization>
 8005464:	4603      	mov	r3, r0
 8005466:	2b00      	cmp	r3, #0
 8005468:	d001      	beq.n	800546e <MX_TIM2_Init+0xc6>
  {
    Error_Handler();
 800546a:	f7ff fc57 	bl	8004d1c <Error_Handler>
  }

}
 800546e:	bf00      	nop
 8005470:	3730      	adds	r7, #48	; 0x30
 8005472:	46bd      	mov	sp, r7
 8005474:	bd80      	pop	{r7, pc}
 8005476:	bf00      	nop
 8005478:	20001dec 	.word	0x20001dec

0800547c <MX_TIM5_Init>:
/* TIM5 init function */
void MX_TIM5_Init(void)
{
 800547c:	b580      	push	{r7, lr}
 800547e:	b088      	sub	sp, #32
 8005480:	af00      	add	r7, sp, #0
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8005482:	f107 0310 	add.w	r3, r7, #16
 8005486:	2200      	movs	r2, #0
 8005488:	601a      	str	r2, [r3, #0]
 800548a:	605a      	str	r2, [r3, #4]
 800548c:	609a      	str	r2, [r3, #8]
 800548e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8005490:	1d3b      	adds	r3, r7, #4
 8005492:	2200      	movs	r2, #0
 8005494:	601a      	str	r2, [r3, #0]
 8005496:	605a      	str	r2, [r3, #4]
 8005498:	609a      	str	r2, [r3, #8]

  htim5.Instance = TIM5;
 800549a:	4b1e      	ldr	r3, [pc, #120]	; (8005514 <MX_TIM5_Init+0x98>)
 800549c:	4a1e      	ldr	r2, [pc, #120]	; (8005518 <MX_TIM5_Init+0x9c>)
 800549e:	601a      	str	r2, [r3, #0]
  htim5.Init.Prescaler = 65535;
 80054a0:	4b1c      	ldr	r3, [pc, #112]	; (8005514 <MX_TIM5_Init+0x98>)
 80054a2:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80054a6:	605a      	str	r2, [r3, #4]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 80054a8:	4b1a      	ldr	r3, [pc, #104]	; (8005514 <MX_TIM5_Init+0x98>)
 80054aa:	2200      	movs	r2, #0
 80054ac:	609a      	str	r2, [r3, #8]
  htim5.Init.Period = 65535;
 80054ae:	4b19      	ldr	r3, [pc, #100]	; (8005514 <MX_TIM5_Init+0x98>)
 80054b0:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80054b4:	60da      	str	r2, [r3, #12]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV4;
 80054b6:	4b17      	ldr	r3, [pc, #92]	; (8005514 <MX_TIM5_Init+0x98>)
 80054b8:	f44f 7200 	mov.w	r2, #512	; 0x200
 80054bc:	611a      	str	r2, [r3, #16]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80054be:	4b15      	ldr	r3, [pc, #84]	; (8005514 <MX_TIM5_Init+0x98>)
 80054c0:	2200      	movs	r2, #0
 80054c2:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim5) != HAL_OK)
 80054c4:	4813      	ldr	r0, [pc, #76]	; (8005514 <MX_TIM5_Init+0x98>)
 80054c6:	f004 fae4 	bl	8009a92 <HAL_TIM_Base_Init>
 80054ca:	4603      	mov	r3, r0
 80054cc:	2b00      	cmp	r3, #0
 80054ce:	d001      	beq.n	80054d4 <MX_TIM5_Init+0x58>
  {
    Error_Handler();
 80054d0:	f7ff fc24 	bl	8004d1c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80054d4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80054d8:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim5, &sClockSourceConfig) != HAL_OK)
 80054da:	f107 0310 	add.w	r3, r7, #16
 80054de:	4619      	mov	r1, r3
 80054e0:	480c      	ldr	r0, [pc, #48]	; (8005514 <MX_TIM5_Init+0x98>)
 80054e2:	f004 fde5 	bl	800a0b0 <HAL_TIM_ConfigClockSource>
 80054e6:	4603      	mov	r3, r0
 80054e8:	2b00      	cmp	r3, #0
 80054ea:	d001      	beq.n	80054f0 <MX_TIM5_Init+0x74>
  {
    Error_Handler();
 80054ec:	f7ff fc16 	bl	8004d1c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80054f0:	2300      	movs	r3, #0
 80054f2:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80054f4:	2300      	movs	r3, #0
 80054f6:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 80054f8:	1d3b      	adds	r3, r7, #4
 80054fa:	4619      	mov	r1, r3
 80054fc:	4805      	ldr	r0, [pc, #20]	; (8005514 <MX_TIM5_Init+0x98>)
 80054fe:	f005 f93b 	bl	800a778 <HAL_TIMEx_MasterConfigSynchronization>
 8005502:	4603      	mov	r3, r0
 8005504:	2b00      	cmp	r3, #0
 8005506:	d001      	beq.n	800550c <MX_TIM5_Init+0x90>
  {
    Error_Handler();
 8005508:	f7ff fc08 	bl	8004d1c <Error_Handler>
  }

}
 800550c:	bf00      	nop
 800550e:	3720      	adds	r7, #32
 8005510:	46bd      	mov	sp, r7
 8005512:	bd80      	pop	{r7, pc}
 8005514:	20001d54 	.word	0x20001d54
 8005518:	40000c00 	.word	0x40000c00

0800551c <MX_TIM8_Init>:
/* TIM8 init function */
void MX_TIM8_Init(void)
{
 800551c:	b580      	push	{r7, lr}
 800551e:	b094      	sub	sp, #80	; 0x50
 8005520:	af00      	add	r7, sp, #0
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8005522:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8005526:	2200      	movs	r2, #0
 8005528:	601a      	str	r2, [r3, #0]
 800552a:	605a      	str	r2, [r3, #4]
 800552c:	609a      	str	r2, [r3, #8]
 800552e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8005530:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8005534:	2200      	movs	r2, #0
 8005536:	601a      	str	r2, [r3, #0]
 8005538:	605a      	str	r2, [r3, #4]
 800553a:	609a      	str	r2, [r3, #8]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 800553c:	463b      	mov	r3, r7
 800553e:	2234      	movs	r2, #52	; 0x34
 8005540:	2100      	movs	r1, #0
 8005542:	4618      	mov	r0, r3
 8005544:	f006 fdcc 	bl	800c0e0 <memset>

  htim8.Instance = TIM8;
 8005548:	4b26      	ldr	r3, [pc, #152]	; (80055e4 <MX_TIM8_Init+0xc8>)
 800554a:	4a27      	ldr	r2, [pc, #156]	; (80055e8 <MX_TIM8_Init+0xcc>)
 800554c:	601a      	str	r2, [r3, #0]
  htim8.Init.Prescaler = 0;
 800554e:	4b25      	ldr	r3, [pc, #148]	; (80055e4 <MX_TIM8_Init+0xc8>)
 8005550:	2200      	movs	r2, #0
 8005552:	605a      	str	r2, [r3, #4]
  htim8.Init.CounterMode = TIM_COUNTERMODE_UP;
 8005554:	4b23      	ldr	r3, [pc, #140]	; (80055e4 <MX_TIM8_Init+0xc8>)
 8005556:	2200      	movs	r2, #0
 8005558:	609a      	str	r2, [r3, #8]
  htim8.Init.Period = 1;
 800555a:	4b22      	ldr	r3, [pc, #136]	; (80055e4 <MX_TIM8_Init+0xc8>)
 800555c:	2201      	movs	r2, #1
 800555e:	60da      	str	r2, [r3, #12]
  htim8.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8005560:	4b20      	ldr	r3, [pc, #128]	; (80055e4 <MX_TIM8_Init+0xc8>)
 8005562:	2200      	movs	r2, #0
 8005564:	611a      	str	r2, [r3, #16]
  htim8.Init.RepetitionCounter = 0;
 8005566:	4b1f      	ldr	r3, [pc, #124]	; (80055e4 <MX_TIM8_Init+0xc8>)
 8005568:	2200      	movs	r2, #0
 800556a:	615a      	str	r2, [r3, #20]
  htim8.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800556c:	4b1d      	ldr	r3, [pc, #116]	; (80055e4 <MX_TIM8_Init+0xc8>)
 800556e:	2200      	movs	r2, #0
 8005570:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim8) != HAL_OK)
 8005572:	481c      	ldr	r0, [pc, #112]	; (80055e4 <MX_TIM8_Init+0xc8>)
 8005574:	f004 fa8d 	bl	8009a92 <HAL_TIM_Base_Init>
 8005578:	4603      	mov	r3, r0
 800557a:	2b00      	cmp	r3, #0
 800557c:	d001      	beq.n	8005582 <MX_TIM8_Init+0x66>
  {
    Error_Handler();
 800557e:	f7ff fbcd 	bl	8004d1c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8005582:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8005586:	643b      	str	r3, [r7, #64]	; 0x40
  if (HAL_TIM_ConfigClockSource(&htim8, &sClockSourceConfig) != HAL_OK)
 8005588:	f107 0340 	add.w	r3, r7, #64	; 0x40
 800558c:	4619      	mov	r1, r3
 800558e:	4815      	ldr	r0, [pc, #84]	; (80055e4 <MX_TIM8_Init+0xc8>)
 8005590:	f004 fd8e 	bl	800a0b0 <HAL_TIM_ConfigClockSource>
 8005594:	4603      	mov	r3, r0
 8005596:	2b00      	cmp	r3, #0
 8005598:	d001      	beq.n	800559e <MX_TIM8_Init+0x82>
  {
    Error_Handler();
 800559a:	f7ff fbbf 	bl	8004d1c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 800559e:	2320      	movs	r3, #32
 80055a0:	637b      	str	r3, [r7, #52]	; 0x34
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 80055a2:	2300      	movs	r3, #0
 80055a4:	63bb      	str	r3, [r7, #56]	; 0x38
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80055a6:	2300      	movs	r3, #0
 80055a8:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_TIMEx_MasterConfigSynchronization(&htim8, &sMasterConfig) != HAL_OK)
 80055aa:	f107 0334 	add.w	r3, r7, #52	; 0x34
 80055ae:	4619      	mov	r1, r3
 80055b0:	480c      	ldr	r0, [pc, #48]	; (80055e4 <MX_TIM8_Init+0xc8>)
 80055b2:	f005 f8e1 	bl	800a778 <HAL_TIMEx_MasterConfigSynchronization>
 80055b6:	4603      	mov	r3, r0
 80055b8:	2b00      	cmp	r3, #0
 80055ba:	d001      	beq.n	80055c0 <MX_TIM8_Init+0xa4>
  {
    Error_Handler();
 80055bc:	f7ff fbae 	bl	8004d1c <Error_Handler>
  }
  sBreakDeadTimeConfig.BreakAFMode = TIM_BREAK_AFMODE_INPUT;
 80055c0:	2300      	movs	r3, #0
 80055c2:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.Break2AFMode = TIM_BREAK_AFMODE_INPUT;
 80055c4:	2300      	movs	r3, #0
 80055c6:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim8, &sBreakDeadTimeConfig) != HAL_OK)
 80055c8:	463b      	mov	r3, r7
 80055ca:	4619      	mov	r1, r3
 80055cc:	4805      	ldr	r0, [pc, #20]	; (80055e4 <MX_TIM8_Init+0xc8>)
 80055ce:	f005 f969 	bl	800a8a4 <HAL_TIMEx_ConfigBreakDeadTime>
 80055d2:	4603      	mov	r3, r0
 80055d4:	2b00      	cmp	r3, #0
 80055d6:	d001      	beq.n	80055dc <MX_TIM8_Init+0xc0>
  {
    Error_Handler();
 80055d8:	f7ff fba0 	bl	8004d1c <Error_Handler>
  }

}
 80055dc:	bf00      	nop
 80055de:	3750      	adds	r7, #80	; 0x50
 80055e0:	46bd      	mov	sp, r7
 80055e2:	bd80      	pop	{r7, pc}
 80055e4:	20001c70 	.word	0x20001c70
 80055e8:	40013400 	.word	0x40013400

080055ec <MX_TIM15_Init>:
/* TIM15 init function */
void MX_TIM15_Init(void)
{
 80055ec:	b580      	push	{r7, lr}
 80055ee:	b088      	sub	sp, #32
 80055f0:	af00      	add	r7, sp, #0
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80055f2:	f107 0310 	add.w	r3, r7, #16
 80055f6:	2200      	movs	r2, #0
 80055f8:	601a      	str	r2, [r3, #0]
 80055fa:	605a      	str	r2, [r3, #4]
 80055fc:	609a      	str	r2, [r3, #8]
 80055fe:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8005600:	1d3b      	adds	r3, r7, #4
 8005602:	2200      	movs	r2, #0
 8005604:	601a      	str	r2, [r3, #0]
 8005606:	605a      	str	r2, [r3, #4]
 8005608:	609a      	str	r2, [r3, #8]

  htim15.Instance = TIM15;
 800560a:	4b1f      	ldr	r3, [pc, #124]	; (8005688 <MX_TIM15_Init+0x9c>)
 800560c:	4a1f      	ldr	r2, [pc, #124]	; (800568c <MX_TIM15_Init+0xa0>)
 800560e:	601a      	str	r2, [r3, #0]
  htim15.Init.Prescaler = 1024;
 8005610:	4b1d      	ldr	r3, [pc, #116]	; (8005688 <MX_TIM15_Init+0x9c>)
 8005612:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8005616:	605a      	str	r2, [r3, #4]
  htim15.Init.CounterMode = TIM_COUNTERMODE_UP;
 8005618:	4b1b      	ldr	r3, [pc, #108]	; (8005688 <MX_TIM15_Init+0x9c>)
 800561a:	2200      	movs	r2, #0
 800561c:	609a      	str	r2, [r3, #8]
  htim15.Init.Period = 1024;
 800561e:	4b1a      	ldr	r3, [pc, #104]	; (8005688 <MX_TIM15_Init+0x9c>)
 8005620:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8005624:	60da      	str	r2, [r3, #12]
  htim15.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8005626:	4b18      	ldr	r3, [pc, #96]	; (8005688 <MX_TIM15_Init+0x9c>)
 8005628:	2200      	movs	r2, #0
 800562a:	611a      	str	r2, [r3, #16]
  htim15.Init.RepetitionCounter = 0;
 800562c:	4b16      	ldr	r3, [pc, #88]	; (8005688 <MX_TIM15_Init+0x9c>)
 800562e:	2200      	movs	r2, #0
 8005630:	615a      	str	r2, [r3, #20]
  htim15.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8005632:	4b15      	ldr	r3, [pc, #84]	; (8005688 <MX_TIM15_Init+0x9c>)
 8005634:	2200      	movs	r2, #0
 8005636:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim15) != HAL_OK)
 8005638:	4813      	ldr	r0, [pc, #76]	; (8005688 <MX_TIM15_Init+0x9c>)
 800563a:	f004 fa2a 	bl	8009a92 <HAL_TIM_Base_Init>
 800563e:	4603      	mov	r3, r0
 8005640:	2b00      	cmp	r3, #0
 8005642:	d001      	beq.n	8005648 <MX_TIM15_Init+0x5c>
  {
    Error_Handler();
 8005644:	f7ff fb6a 	bl	8004d1c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8005648:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800564c:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim15, &sClockSourceConfig) != HAL_OK)
 800564e:	f107 0310 	add.w	r3, r7, #16
 8005652:	4619      	mov	r1, r3
 8005654:	480c      	ldr	r0, [pc, #48]	; (8005688 <MX_TIM15_Init+0x9c>)
 8005656:	f004 fd2b 	bl	800a0b0 <HAL_TIM_ConfigClockSource>
 800565a:	4603      	mov	r3, r0
 800565c:	2b00      	cmp	r3, #0
 800565e:	d001      	beq.n	8005664 <MX_TIM15_Init+0x78>
  {
    Error_Handler();
 8005660:	f7ff fb5c 	bl	8004d1c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8005664:	2300      	movs	r3, #0
 8005666:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8005668:	2300      	movs	r3, #0
 800566a:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim15, &sMasterConfig) != HAL_OK)
 800566c:	1d3b      	adds	r3, r7, #4
 800566e:	4619      	mov	r1, r3
 8005670:	4805      	ldr	r0, [pc, #20]	; (8005688 <MX_TIM15_Init+0x9c>)
 8005672:	f005 f881 	bl	800a778 <HAL_TIMEx_MasterConfigSynchronization>
 8005676:	4603      	mov	r3, r0
 8005678:	2b00      	cmp	r3, #0
 800567a:	d001      	beq.n	8005680 <MX_TIM15_Init+0x94>
  {
    Error_Handler();
 800567c:	f7ff fb4e 	bl	8004d1c <Error_Handler>
  }

}
 8005680:	bf00      	nop
 8005682:	3720      	adds	r7, #32
 8005684:	46bd      	mov	sp, r7
 8005686:	bd80      	pop	{r7, pc}
 8005688:	20001cbc 	.word	0x20001cbc
 800568c:	40014000 	.word	0x40014000

08005690 <MX_TIM16_Init>:
/* TIM16 init function */
void MX_TIM16_Init(void)
{
 8005690:	b580      	push	{r7, lr}
 8005692:	af00      	add	r7, sp, #0

  htim16.Instance = TIM16;
 8005694:	4b10      	ldr	r3, [pc, #64]	; (80056d8 <MX_TIM16_Init+0x48>)
 8005696:	4a11      	ldr	r2, [pc, #68]	; (80056dc <MX_TIM16_Init+0x4c>)
 8005698:	601a      	str	r2, [r3, #0]
  htim16.Init.Prescaler = 1024;
 800569a:	4b0f      	ldr	r3, [pc, #60]	; (80056d8 <MX_TIM16_Init+0x48>)
 800569c:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80056a0:	605a      	str	r2, [r3, #4]
  htim16.Init.CounterMode = TIM_COUNTERMODE_UP;
 80056a2:	4b0d      	ldr	r3, [pc, #52]	; (80056d8 <MX_TIM16_Init+0x48>)
 80056a4:	2200      	movs	r2, #0
 80056a6:	609a      	str	r2, [r3, #8]
  htim16.Init.Period = 1024;
 80056a8:	4b0b      	ldr	r3, [pc, #44]	; (80056d8 <MX_TIM16_Init+0x48>)
 80056aa:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80056ae:	60da      	str	r2, [r3, #12]
  htim16.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80056b0:	4b09      	ldr	r3, [pc, #36]	; (80056d8 <MX_TIM16_Init+0x48>)
 80056b2:	2200      	movs	r2, #0
 80056b4:	611a      	str	r2, [r3, #16]
  htim16.Init.RepetitionCounter = 0;
 80056b6:	4b08      	ldr	r3, [pc, #32]	; (80056d8 <MX_TIM16_Init+0x48>)
 80056b8:	2200      	movs	r2, #0
 80056ba:	615a      	str	r2, [r3, #20]
  htim16.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80056bc:	4b06      	ldr	r3, [pc, #24]	; (80056d8 <MX_TIM16_Init+0x48>)
 80056be:	2200      	movs	r2, #0
 80056c0:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim16) != HAL_OK)
 80056c2:	4805      	ldr	r0, [pc, #20]	; (80056d8 <MX_TIM16_Init+0x48>)
 80056c4:	f004 f9e5 	bl	8009a92 <HAL_TIM_Base_Init>
 80056c8:	4603      	mov	r3, r0
 80056ca:	2b00      	cmp	r3, #0
 80056cc:	d001      	beq.n	80056d2 <MX_TIM16_Init+0x42>
  {
    Error_Handler();
 80056ce:	f7ff fb25 	bl	8004d1c <Error_Handler>
  }

}
 80056d2:	bf00      	nop
 80056d4:	bd80      	pop	{r7, pc}
 80056d6:	bf00      	nop
 80056d8:	20001e38 	.word	0x20001e38
 80056dc:	40014400 	.word	0x40014400

080056e0 <MX_TIM17_Init>:
/* TIM17 init function */
void MX_TIM17_Init(void)
{
 80056e0:	b580      	push	{r7, lr}
 80056e2:	af00      	add	r7, sp, #0

  htim17.Instance = TIM17;
 80056e4:	4b0f      	ldr	r3, [pc, #60]	; (8005724 <MX_TIM17_Init+0x44>)
 80056e6:	4a10      	ldr	r2, [pc, #64]	; (8005728 <MX_TIM17_Init+0x48>)
 80056e8:	601a      	str	r2, [r3, #0]
  htim17.Init.Prescaler = 1023;
 80056ea:	4b0e      	ldr	r3, [pc, #56]	; (8005724 <MX_TIM17_Init+0x44>)
 80056ec:	f240 32ff 	movw	r2, #1023	; 0x3ff
 80056f0:	605a      	str	r2, [r3, #4]
  htim17.Init.CounterMode = TIM_COUNTERMODE_UP;
 80056f2:	4b0c      	ldr	r3, [pc, #48]	; (8005724 <MX_TIM17_Init+0x44>)
 80056f4:	2200      	movs	r2, #0
 80056f6:	609a      	str	r2, [r3, #8]
  htim17.Init.Period = 64;
 80056f8:	4b0a      	ldr	r3, [pc, #40]	; (8005724 <MX_TIM17_Init+0x44>)
 80056fa:	2240      	movs	r2, #64	; 0x40
 80056fc:	60da      	str	r2, [r3, #12]
  htim17.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80056fe:	4b09      	ldr	r3, [pc, #36]	; (8005724 <MX_TIM17_Init+0x44>)
 8005700:	2200      	movs	r2, #0
 8005702:	611a      	str	r2, [r3, #16]
  htim17.Init.RepetitionCounter = 0;
 8005704:	4b07      	ldr	r3, [pc, #28]	; (8005724 <MX_TIM17_Init+0x44>)
 8005706:	2200      	movs	r2, #0
 8005708:	615a      	str	r2, [r3, #20]
  htim17.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800570a:	4b06      	ldr	r3, [pc, #24]	; (8005724 <MX_TIM17_Init+0x44>)
 800570c:	2200      	movs	r2, #0
 800570e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim17) != HAL_OK)
 8005710:	4804      	ldr	r0, [pc, #16]	; (8005724 <MX_TIM17_Init+0x44>)
 8005712:	f004 f9be 	bl	8009a92 <HAL_TIM_Base_Init>
 8005716:	4603      	mov	r3, r0
 8005718:	2b00      	cmp	r3, #0
 800571a:	d001      	beq.n	8005720 <MX_TIM17_Init+0x40>
  {
    Error_Handler();
 800571c:	f7ff fafe 	bl	8004d1c <Error_Handler>
  }

}
 8005720:	bf00      	nop
 8005722:	bd80      	pop	{r7, pc}
 8005724:	20001d08 	.word	0x20001d08
 8005728:	40014800 	.word	0x40014800

0800572c <HAL_TIM_Encoder_MspInit>:

void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* tim_encoderHandle)
{
 800572c:	b580      	push	{r7, lr}
 800572e:	b08a      	sub	sp, #40	; 0x28
 8005730:	af00      	add	r7, sp, #0
 8005732:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8005734:	f107 0314 	add.w	r3, r7, #20
 8005738:	2200      	movs	r2, #0
 800573a:	601a      	str	r2, [r3, #0]
 800573c:	605a      	str	r2, [r3, #4]
 800573e:	609a      	str	r2, [r3, #8]
 8005740:	60da      	str	r2, [r3, #12]
 8005742:	611a      	str	r2, [r3, #16]
  if(tim_encoderHandle->Instance==TIM1)
 8005744:	687b      	ldr	r3, [r7, #4]
 8005746:	681b      	ldr	r3, [r3, #0]
 8005748:	4a23      	ldr	r2, [pc, #140]	; (80057d8 <HAL_TIM_Encoder_MspInit+0xac>)
 800574a:	4293      	cmp	r3, r2
 800574c:	d13f      	bne.n	80057ce <HAL_TIM_Encoder_MspInit+0xa2>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 800574e:	4b23      	ldr	r3, [pc, #140]	; (80057dc <HAL_TIM_Encoder_MspInit+0xb0>)
 8005750:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005752:	4a22      	ldr	r2, [pc, #136]	; (80057dc <HAL_TIM_Encoder_MspInit+0xb0>)
 8005754:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8005758:	6613      	str	r3, [r2, #96]	; 0x60
 800575a:	4b20      	ldr	r3, [pc, #128]	; (80057dc <HAL_TIM_Encoder_MspInit+0xb0>)
 800575c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800575e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005762:	613b      	str	r3, [r7, #16]
 8005764:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8005766:	4b1d      	ldr	r3, [pc, #116]	; (80057dc <HAL_TIM_Encoder_MspInit+0xb0>)
 8005768:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800576a:	4a1c      	ldr	r2, [pc, #112]	; (80057dc <HAL_TIM_Encoder_MspInit+0xb0>)
 800576c:	f043 0304 	orr.w	r3, r3, #4
 8005770:	64d3      	str	r3, [r2, #76]	; 0x4c
 8005772:	4b1a      	ldr	r3, [pc, #104]	; (80057dc <HAL_TIM_Encoder_MspInit+0xb0>)
 8005774:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005776:	f003 0304 	and.w	r3, r3, #4
 800577a:	60fb      	str	r3, [r7, #12]
 800577c:	68fb      	ldr	r3, [r7, #12]
    /**TIM1 GPIO Configuration    
    PC0     ------> TIM1_CH1
    PC1     ------> TIM1_CH2 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 800577e:	2303      	movs	r3, #3
 8005780:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005782:	2302      	movs	r3, #2
 8005784:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005786:	2300      	movs	r3, #0
 8005788:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800578a:	2300      	movs	r3, #0
 800578c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM1;
 800578e:	2302      	movs	r3, #2
 8005790:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8005792:	f107 0314 	add.w	r3, r7, #20
 8005796:	4619      	mov	r1, r3
 8005798:	4811      	ldr	r0, [pc, #68]	; (80057e0 <HAL_TIM_Encoder_MspInit+0xb4>)
 800579a:	f002 fcd3 	bl	8008144 <HAL_GPIO_Init>

    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_BRK_TIM15_IRQn, 0, 0);
 800579e:	2200      	movs	r2, #0
 80057a0:	2100      	movs	r1, #0
 80057a2:	2018      	movs	r0, #24
 80057a4:	f001 fdb9 	bl	800731a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_BRK_TIM15_IRQn);
 80057a8:	2018      	movs	r0, #24
 80057aa:	f001 fdd0 	bl	800734e <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM1_UP_TIM16_IRQn, 1, 0);
 80057ae:	2200      	movs	r2, #0
 80057b0:	2101      	movs	r1, #1
 80057b2:	2019      	movs	r0, #25
 80057b4:	f001 fdb1 	bl	800731a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM16_IRQn);
 80057b8:	2019      	movs	r0, #25
 80057ba:	f001 fdc8 	bl	800734e <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM1_TRG_COM_TIM17_IRQn, 1, 0);
 80057be:	2200      	movs	r2, #0
 80057c0:	2101      	movs	r1, #1
 80057c2:	201a      	movs	r0, #26
 80057c4:	f001 fda9 	bl	800731a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_TRG_COM_TIM17_IRQn);
 80057c8:	201a      	movs	r0, #26
 80057ca:	f001 fdc0 	bl	800734e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }
}
 80057ce:	bf00      	nop
 80057d0:	3728      	adds	r7, #40	; 0x28
 80057d2:	46bd      	mov	sp, r7
 80057d4:	bd80      	pop	{r7, pc}
 80057d6:	bf00      	nop
 80057d8:	40012c00 	.word	0x40012c00
 80057dc:	40021000 	.word	0x40021000
 80057e0:	48000800 	.word	0x48000800

080057e4 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 80057e4:	b580      	push	{r7, lr}
 80057e6:	b08e      	sub	sp, #56	; 0x38
 80057e8:	af00      	add	r7, sp, #0
 80057ea:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80057ec:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80057f0:	2200      	movs	r2, #0
 80057f2:	601a      	str	r2, [r3, #0]
 80057f4:	605a      	str	r2, [r3, #4]
 80057f6:	609a      	str	r2, [r3, #8]
 80057f8:	60da      	str	r2, [r3, #12]
 80057fa:	611a      	str	r2, [r3, #16]
  if(tim_baseHandle->Instance==TIM2)
 80057fc:	687b      	ldr	r3, [r7, #4]
 80057fe:	681b      	ldr	r3, [r3, #0]
 8005800:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005804:	d131      	bne.n	800586a <HAL_TIM_Base_MspInit+0x86>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8005806:	4b53      	ldr	r3, [pc, #332]	; (8005954 <HAL_TIM_Base_MspInit+0x170>)
 8005808:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800580a:	4a52      	ldr	r2, [pc, #328]	; (8005954 <HAL_TIM_Base_MspInit+0x170>)
 800580c:	f043 0301 	orr.w	r3, r3, #1
 8005810:	6593      	str	r3, [r2, #88]	; 0x58
 8005812:	4b50      	ldr	r3, [pc, #320]	; (8005954 <HAL_TIM_Base_MspInit+0x170>)
 8005814:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005816:	f003 0301 	and.w	r3, r3, #1
 800581a:	623b      	str	r3, [r7, #32]
 800581c:	6a3b      	ldr	r3, [r7, #32]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800581e:	4b4d      	ldr	r3, [pc, #308]	; (8005954 <HAL_TIM_Base_MspInit+0x170>)
 8005820:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005822:	4a4c      	ldr	r2, [pc, #304]	; (8005954 <HAL_TIM_Base_MspInit+0x170>)
 8005824:	f043 0301 	orr.w	r3, r3, #1
 8005828:	64d3      	str	r3, [r2, #76]	; 0x4c
 800582a:	4b4a      	ldr	r3, [pc, #296]	; (8005954 <HAL_TIM_Base_MspInit+0x170>)
 800582c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800582e:	f003 0301 	and.w	r3, r3, #1
 8005832:	61fb      	str	r3, [r7, #28]
 8005834:	69fb      	ldr	r3, [r7, #28]
    /**TIM2 GPIO Configuration    
    PA0     ------> TIM2_CH1 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8005836:	2301      	movs	r3, #1
 8005838:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800583a:	2302      	movs	r3, #2
 800583c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800583e:	2300      	movs	r3, #0
 8005840:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8005842:	2300      	movs	r3, #0
 8005844:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8005846:	2301      	movs	r3, #1
 8005848:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800584a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800584e:	4619      	mov	r1, r3
 8005850:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8005854:	f002 fc76 	bl	8008144 <HAL_GPIO_Init>

    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 1, 0);
 8005858:	2200      	movs	r2, #0
 800585a:	2101      	movs	r1, #1
 800585c:	201c      	movs	r0, #28
 800585e:	f001 fd5c 	bl	800731a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8005862:	201c      	movs	r0, #28
 8005864:	f001 fd73 	bl	800734e <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(TIM1_TRG_COM_TIM17_IRQn);
  /* USER CODE BEGIN TIM17_MspInit 1 */

  /* USER CODE END TIM17_MspInit 1 */
  }
}
 8005868:	e070      	b.n	800594c <HAL_TIM_Base_MspInit+0x168>
  else if(tim_baseHandle->Instance==TIM5)
 800586a:	687b      	ldr	r3, [r7, #4]
 800586c:	681b      	ldr	r3, [r3, #0]
 800586e:	4a3a      	ldr	r2, [pc, #232]	; (8005958 <HAL_TIM_Base_MspInit+0x174>)
 8005870:	4293      	cmp	r3, r2
 8005872:	d10c      	bne.n	800588e <HAL_TIM_Base_MspInit+0xaa>
    __HAL_RCC_TIM5_CLK_ENABLE();
 8005874:	4b37      	ldr	r3, [pc, #220]	; (8005954 <HAL_TIM_Base_MspInit+0x170>)
 8005876:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005878:	4a36      	ldr	r2, [pc, #216]	; (8005954 <HAL_TIM_Base_MspInit+0x170>)
 800587a:	f043 0308 	orr.w	r3, r3, #8
 800587e:	6593      	str	r3, [r2, #88]	; 0x58
 8005880:	4b34      	ldr	r3, [pc, #208]	; (8005954 <HAL_TIM_Base_MspInit+0x170>)
 8005882:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005884:	f003 0308 	and.w	r3, r3, #8
 8005888:	61bb      	str	r3, [r7, #24]
 800588a:	69bb      	ldr	r3, [r7, #24]
}
 800588c:	e05e      	b.n	800594c <HAL_TIM_Base_MspInit+0x168>
  else if(tim_baseHandle->Instance==TIM8)
 800588e:	687b      	ldr	r3, [r7, #4]
 8005890:	681b      	ldr	r3, [r3, #0]
 8005892:	4a32      	ldr	r2, [pc, #200]	; (800595c <HAL_TIM_Base_MspInit+0x178>)
 8005894:	4293      	cmp	r3, r2
 8005896:	d10c      	bne.n	80058b2 <HAL_TIM_Base_MspInit+0xce>
    __HAL_RCC_TIM8_CLK_ENABLE();
 8005898:	4b2e      	ldr	r3, [pc, #184]	; (8005954 <HAL_TIM_Base_MspInit+0x170>)
 800589a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800589c:	4a2d      	ldr	r2, [pc, #180]	; (8005954 <HAL_TIM_Base_MspInit+0x170>)
 800589e:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80058a2:	6613      	str	r3, [r2, #96]	; 0x60
 80058a4:	4b2b      	ldr	r3, [pc, #172]	; (8005954 <HAL_TIM_Base_MspInit+0x170>)
 80058a6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80058a8:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80058ac:	617b      	str	r3, [r7, #20]
 80058ae:	697b      	ldr	r3, [r7, #20]
}
 80058b0:	e04c      	b.n	800594c <HAL_TIM_Base_MspInit+0x168>
  else if(tim_baseHandle->Instance==TIM15)
 80058b2:	687b      	ldr	r3, [r7, #4]
 80058b4:	681b      	ldr	r3, [r3, #0]
 80058b6:	4a2a      	ldr	r2, [pc, #168]	; (8005960 <HAL_TIM_Base_MspInit+0x17c>)
 80058b8:	4293      	cmp	r3, r2
 80058ba:	d114      	bne.n	80058e6 <HAL_TIM_Base_MspInit+0x102>
    __HAL_RCC_TIM15_CLK_ENABLE();
 80058bc:	4b25      	ldr	r3, [pc, #148]	; (8005954 <HAL_TIM_Base_MspInit+0x170>)
 80058be:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80058c0:	4a24      	ldr	r2, [pc, #144]	; (8005954 <HAL_TIM_Base_MspInit+0x170>)
 80058c2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80058c6:	6613      	str	r3, [r2, #96]	; 0x60
 80058c8:	4b22      	ldr	r3, [pc, #136]	; (8005954 <HAL_TIM_Base_MspInit+0x170>)
 80058ca:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80058cc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80058d0:	613b      	str	r3, [r7, #16]
 80058d2:	693b      	ldr	r3, [r7, #16]
    HAL_NVIC_SetPriority(TIM1_BRK_TIM15_IRQn, 0, 0);
 80058d4:	2200      	movs	r2, #0
 80058d6:	2100      	movs	r1, #0
 80058d8:	2018      	movs	r0, #24
 80058da:	f001 fd1e 	bl	800731a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_BRK_TIM15_IRQn);
 80058de:	2018      	movs	r0, #24
 80058e0:	f001 fd35 	bl	800734e <HAL_NVIC_EnableIRQ>
}
 80058e4:	e032      	b.n	800594c <HAL_TIM_Base_MspInit+0x168>
  else if(tim_baseHandle->Instance==TIM16)
 80058e6:	687b      	ldr	r3, [r7, #4]
 80058e8:	681b      	ldr	r3, [r3, #0]
 80058ea:	4a1e      	ldr	r2, [pc, #120]	; (8005964 <HAL_TIM_Base_MspInit+0x180>)
 80058ec:	4293      	cmp	r3, r2
 80058ee:	d114      	bne.n	800591a <HAL_TIM_Base_MspInit+0x136>
    __HAL_RCC_TIM16_CLK_ENABLE();
 80058f0:	4b18      	ldr	r3, [pc, #96]	; (8005954 <HAL_TIM_Base_MspInit+0x170>)
 80058f2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80058f4:	4a17      	ldr	r2, [pc, #92]	; (8005954 <HAL_TIM_Base_MspInit+0x170>)
 80058f6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80058fa:	6613      	str	r3, [r2, #96]	; 0x60
 80058fc:	4b15      	ldr	r3, [pc, #84]	; (8005954 <HAL_TIM_Base_MspInit+0x170>)
 80058fe:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005900:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005904:	60fb      	str	r3, [r7, #12]
 8005906:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_SetPriority(TIM1_UP_TIM16_IRQn, 1, 0);
 8005908:	2200      	movs	r2, #0
 800590a:	2101      	movs	r1, #1
 800590c:	2019      	movs	r0, #25
 800590e:	f001 fd04 	bl	800731a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM16_IRQn);
 8005912:	2019      	movs	r0, #25
 8005914:	f001 fd1b 	bl	800734e <HAL_NVIC_EnableIRQ>
}
 8005918:	e018      	b.n	800594c <HAL_TIM_Base_MspInit+0x168>
  else if(tim_baseHandle->Instance==TIM17)
 800591a:	687b      	ldr	r3, [r7, #4]
 800591c:	681b      	ldr	r3, [r3, #0]
 800591e:	4a12      	ldr	r2, [pc, #72]	; (8005968 <HAL_TIM_Base_MspInit+0x184>)
 8005920:	4293      	cmp	r3, r2
 8005922:	d113      	bne.n	800594c <HAL_TIM_Base_MspInit+0x168>
    __HAL_RCC_TIM17_CLK_ENABLE();
 8005924:	4b0b      	ldr	r3, [pc, #44]	; (8005954 <HAL_TIM_Base_MspInit+0x170>)
 8005926:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005928:	4a0a      	ldr	r2, [pc, #40]	; (8005954 <HAL_TIM_Base_MspInit+0x170>)
 800592a:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800592e:	6613      	str	r3, [r2, #96]	; 0x60
 8005930:	4b08      	ldr	r3, [pc, #32]	; (8005954 <HAL_TIM_Base_MspInit+0x170>)
 8005932:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005934:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8005938:	60bb      	str	r3, [r7, #8]
 800593a:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM1_TRG_COM_TIM17_IRQn, 1, 0);
 800593c:	2200      	movs	r2, #0
 800593e:	2101      	movs	r1, #1
 8005940:	201a      	movs	r0, #26
 8005942:	f001 fcea 	bl	800731a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_TRG_COM_TIM17_IRQn);
 8005946:	201a      	movs	r0, #26
 8005948:	f001 fd01 	bl	800734e <HAL_NVIC_EnableIRQ>
}
 800594c:	bf00      	nop
 800594e:	3738      	adds	r7, #56	; 0x38
 8005950:	46bd      	mov	sp, r7
 8005952:	bd80      	pop	{r7, pc}
 8005954:	40021000 	.word	0x40021000
 8005958:	40000c00 	.word	0x40000c00
 800595c:	40013400 	.word	0x40013400
 8005960:	40014000 	.word	0x40014000
 8005964:	40014400 	.word	0x40014400
 8005968:	40014800 	.word	0x40014800

0800596c <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 800596c:	480d      	ldr	r0, [pc, #52]	; (80059a4 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 800596e:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8005970:	480d      	ldr	r0, [pc, #52]	; (80059a8 <LoopForever+0x6>)
  ldr r1, =_edata
 8005972:	490e      	ldr	r1, [pc, #56]	; (80059ac <LoopForever+0xa>)
  ldr r2, =_sidata
 8005974:	4a0e      	ldr	r2, [pc, #56]	; (80059b0 <LoopForever+0xe>)
  movs r3, #0
 8005976:	2300      	movs	r3, #0
  b	LoopCopyDataInit
 8005978:	e002      	b.n	8005980 <LoopCopyDataInit>

0800597a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800597a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800597c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800597e:	3304      	adds	r3, #4

08005980 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8005980:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8005982:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8005984:	d3f9      	bcc.n	800597a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8005986:	4a0b      	ldr	r2, [pc, #44]	; (80059b4 <LoopForever+0x12>)
  ldr r4, =_ebss
 8005988:	4c0b      	ldr	r4, [pc, #44]	; (80059b8 <LoopForever+0x16>)
  movs r3, #0
 800598a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800598c:	e001      	b.n	8005992 <LoopFillZerobss>

0800598e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800598e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8005990:	3204      	adds	r2, #4

08005992 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8005992:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8005994:	d3fb      	bcc.n	800598e <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8005996:	f7ff fc81 	bl	800529c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800599a:	f006 fb7d 	bl	800c098 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 800599e:	f7ff f8b7 	bl	8004b10 <main>

080059a2 <LoopForever>:

LoopForever:
    b LoopForever
 80059a2:	e7fe      	b.n	80059a2 <LoopForever>
  ldr   r0, =_estack
 80059a4:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80059a8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80059ac:	20001604 	.word	0x20001604
  ldr r2, =_sidata
 80059b0:	0800f4a8 	.word	0x0800f4a8
  ldr r2, =_sbss
 80059b4:	20001604 	.word	0x20001604
  ldr r4, =_ebss
 80059b8:	20001e8c 	.word	0x20001e8c

080059bc <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 80059bc:	e7fe      	b.n	80059bc <ADC1_2_IRQHandler>

080059be <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80059be:	b580      	push	{r7, lr}
 80059c0:	b082      	sub	sp, #8
 80059c2:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 80059c4:	2300      	movs	r3, #0
 80059c6:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80059c8:	2003      	movs	r0, #3
 80059ca:	f001 fc9b 	bl	8007304 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80059ce:	2000      	movs	r0, #0
 80059d0:	f000 f80e 	bl	80059f0 <HAL_InitTick>
 80059d4:	4603      	mov	r3, r0
 80059d6:	2b00      	cmp	r3, #0
 80059d8:	d002      	beq.n	80059e0 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 80059da:	2301      	movs	r3, #1
 80059dc:	71fb      	strb	r3, [r7, #7]
 80059de:	e001      	b.n	80059e4 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 80059e0:	f7ff fa6c 	bl	8004ebc <HAL_MspInit>
  }

  /* Return function status */
  return status;
 80059e4:	79fb      	ldrb	r3, [r7, #7]

}
 80059e6:	4618      	mov	r0, r3
 80059e8:	3708      	adds	r7, #8
 80059ea:	46bd      	mov	sp, r7
 80059ec:	bd80      	pop	{r7, pc}
	...

080059f0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80059f0:	b580      	push	{r7, lr}
 80059f2:	b084      	sub	sp, #16
 80059f4:	af00      	add	r7, sp, #0
 80059f6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 80059f8:	2300      	movs	r3, #0
 80059fa:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 80059fc:	4b16      	ldr	r3, [pc, #88]	; (8005a58 <HAL_InitTick+0x68>)
 80059fe:	681b      	ldr	r3, [r3, #0]
 8005a00:	2b00      	cmp	r3, #0
 8005a02:	d022      	beq.n	8005a4a <HAL_InitTick+0x5a>
  {
    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 8005a04:	4b15      	ldr	r3, [pc, #84]	; (8005a5c <HAL_InitTick+0x6c>)
 8005a06:	681a      	ldr	r2, [r3, #0]
 8005a08:	4b13      	ldr	r3, [pc, #76]	; (8005a58 <HAL_InitTick+0x68>)
 8005a0a:	681b      	ldr	r3, [r3, #0]
 8005a0c:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8005a10:	fbb1 f3f3 	udiv	r3, r1, r3
 8005a14:	fbb2 f3f3 	udiv	r3, r2, r3
 8005a18:	4618      	mov	r0, r3
 8005a1a:	f001 fca6 	bl	800736a <HAL_SYSTICK_Config>
 8005a1e:	4603      	mov	r3, r0
 8005a20:	2b00      	cmp	r3, #0
 8005a22:	d10f      	bne.n	8005a44 <HAL_InitTick+0x54>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8005a24:	687b      	ldr	r3, [r7, #4]
 8005a26:	2b0f      	cmp	r3, #15
 8005a28:	d809      	bhi.n	8005a3e <HAL_InitTick+0x4e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8005a2a:	2200      	movs	r2, #0
 8005a2c:	6879      	ldr	r1, [r7, #4]
 8005a2e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8005a32:	f001 fc72 	bl	800731a <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8005a36:	4a0a      	ldr	r2, [pc, #40]	; (8005a60 <HAL_InitTick+0x70>)
 8005a38:	687b      	ldr	r3, [r7, #4]
 8005a3a:	6013      	str	r3, [r2, #0]
 8005a3c:	e007      	b.n	8005a4e <HAL_InitTick+0x5e>
      }
      else
      {
        status = HAL_ERROR;
 8005a3e:	2301      	movs	r3, #1
 8005a40:	73fb      	strb	r3, [r7, #15]
 8005a42:	e004      	b.n	8005a4e <HAL_InitTick+0x5e>
      }
    }
    else
    {
      status = HAL_ERROR;
 8005a44:	2301      	movs	r3, #1
 8005a46:	73fb      	strb	r3, [r7, #15]
 8005a48:	e001      	b.n	8005a4e <HAL_InitTick+0x5e>
    }
  }
  else
  {
    status = HAL_ERROR;
 8005a4a:	2301      	movs	r3, #1
 8005a4c:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8005a4e:	7bfb      	ldrb	r3, [r7, #15]
}
 8005a50:	4618      	mov	r0, r3
 8005a52:	3710      	adds	r7, #16
 8005a54:	46bd      	mov	sp, r7
 8005a56:	bd80      	pop	{r7, pc}
 8005a58:	20000208 	.word	0x20000208
 8005a5c:	20000200 	.word	0x20000200
 8005a60:	20000204 	.word	0x20000204

08005a64 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8005a64:	b480      	push	{r7}
 8005a66:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8005a68:	4b05      	ldr	r3, [pc, #20]	; (8005a80 <HAL_IncTick+0x1c>)
 8005a6a:	681a      	ldr	r2, [r3, #0]
 8005a6c:	4b05      	ldr	r3, [pc, #20]	; (8005a84 <HAL_IncTick+0x20>)
 8005a6e:	681b      	ldr	r3, [r3, #0]
 8005a70:	4413      	add	r3, r2
 8005a72:	4a03      	ldr	r2, [pc, #12]	; (8005a80 <HAL_IncTick+0x1c>)
 8005a74:	6013      	str	r3, [r2, #0]
}
 8005a76:	bf00      	nop
 8005a78:	46bd      	mov	sp, r7
 8005a7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a7e:	4770      	bx	lr
 8005a80:	20001e84 	.word	0x20001e84
 8005a84:	20000208 	.word	0x20000208

08005a88 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8005a88:	b480      	push	{r7}
 8005a8a:	af00      	add	r7, sp, #0
  return uwTick;
 8005a8c:	4b03      	ldr	r3, [pc, #12]	; (8005a9c <HAL_GetTick+0x14>)
 8005a8e:	681b      	ldr	r3, [r3, #0]
}
 8005a90:	4618      	mov	r0, r3
 8005a92:	46bd      	mov	sp, r7
 8005a94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a98:	4770      	bx	lr
 8005a9a:	bf00      	nop
 8005a9c:	20001e84 	.word	0x20001e84

08005aa0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8005aa0:	b580      	push	{r7, lr}
 8005aa2:	b084      	sub	sp, #16
 8005aa4:	af00      	add	r7, sp, #0
 8005aa6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8005aa8:	f7ff ffee 	bl	8005a88 <HAL_GetTick>
 8005aac:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8005aae:	687b      	ldr	r3, [r7, #4]
 8005ab0:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8005ab2:	68fb      	ldr	r3, [r7, #12]
 8005ab4:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8005ab8:	d004      	beq.n	8005ac4 <HAL_Delay+0x24>
  {
    wait += (uint32_t)(uwTickFreq);
 8005aba:	4b09      	ldr	r3, [pc, #36]	; (8005ae0 <HAL_Delay+0x40>)
 8005abc:	681b      	ldr	r3, [r3, #0]
 8005abe:	68fa      	ldr	r2, [r7, #12]
 8005ac0:	4413      	add	r3, r2
 8005ac2:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8005ac4:	bf00      	nop
 8005ac6:	f7ff ffdf 	bl	8005a88 <HAL_GetTick>
 8005aca:	4602      	mov	r2, r0
 8005acc:	68bb      	ldr	r3, [r7, #8]
 8005ace:	1ad3      	subs	r3, r2, r3
 8005ad0:	68fa      	ldr	r2, [r7, #12]
 8005ad2:	429a      	cmp	r2, r3
 8005ad4:	d8f7      	bhi.n	8005ac6 <HAL_Delay+0x26>
  {
  }
}
 8005ad6:	bf00      	nop
 8005ad8:	3710      	adds	r7, #16
 8005ada:	46bd      	mov	sp, r7
 8005adc:	bd80      	pop	{r7, pc}
 8005ade:	bf00      	nop
 8005ae0:	20000208 	.word	0x20000208

08005ae4 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 8005ae4:	b480      	push	{r7}
 8005ae6:	b083      	sub	sp, #12
 8005ae8:	af00      	add	r7, sp, #0
 8005aea:	6078      	str	r0, [r7, #4]
 8005aec:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 8005aee:	687b      	ldr	r3, [r7, #4]
 8005af0:	689b      	ldr	r3, [r3, #8]
 8005af2:	f423 127c 	bic.w	r2, r3, #4128768	; 0x3f0000
 8005af6:	683b      	ldr	r3, [r7, #0]
 8005af8:	431a      	orrs	r2, r3
 8005afa:	687b      	ldr	r3, [r7, #4]
 8005afc:	609a      	str	r2, [r3, #8]
}
 8005afe:	bf00      	nop
 8005b00:	370c      	adds	r7, #12
 8005b02:	46bd      	mov	sp, r7
 8005b04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b08:	4770      	bx	lr

08005b0a <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 8005b0a:	b480      	push	{r7}
 8005b0c:	b083      	sub	sp, #12
 8005b0e:	af00      	add	r7, sp, #0
 8005b10:	6078      	str	r0, [r7, #4]
 8005b12:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL, PathInternal);
 8005b14:	687b      	ldr	r3, [r7, #4]
 8005b16:	689b      	ldr	r3, [r3, #8]
 8005b18:	f023 72e0 	bic.w	r2, r3, #29360128	; 0x1c00000
 8005b1c:	683b      	ldr	r3, [r7, #0]
 8005b1e:	431a      	orrs	r2, r3
 8005b20:	687b      	ldr	r3, [r7, #4]
 8005b22:	609a      	str	r2, [r3, #8]
}
 8005b24:	bf00      	nop
 8005b26:	370c      	adds	r7, #12
 8005b28:	46bd      	mov	sp, r7
 8005b2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b2e:	4770      	bx	lr

08005b30 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8005b30:	b480      	push	{r7}
 8005b32:	b083      	sub	sp, #12
 8005b34:	af00      	add	r7, sp, #0
 8005b36:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL));
 8005b38:	687b      	ldr	r3, [r7, #4]
 8005b3a:	689b      	ldr	r3, [r3, #8]
 8005b3c:	f003 73e0 	and.w	r3, r3, #29360128	; 0x1c00000
}
 8005b40:	4618      	mov	r0, r3
 8005b42:	370c      	adds	r7, #12
 8005b44:	46bd      	mov	sp, r7
 8005b46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b4a:	4770      	bx	lr

08005b4c <LL_ADC_SetOffset>:
  *             Other channels are slow channels  allows: 6.5 (sampling) + 12.5 (conversion) = 19 ADC clock cycles (fADC) to convert in 12-bit resolution.\n
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 8005b4c:	b490      	push	{r4, r7}
 8005b4e:	b084      	sub	sp, #16
 8005b50:	af00      	add	r7, sp, #0
 8005b52:	60f8      	str	r0, [r7, #12]
 8005b54:	60b9      	str	r1, [r7, #8]
 8005b56:	607a      	str	r2, [r7, #4]
 8005b58:	603b      	str	r3, [r7, #0]
  register __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8005b5a:	68fb      	ldr	r3, [r7, #12]
 8005b5c:	3360      	adds	r3, #96	; 0x60
 8005b5e:	461a      	mov	r2, r3
 8005b60:	68bb      	ldr	r3, [r7, #8]
 8005b62:	009b      	lsls	r3, r3, #2
 8005b64:	4413      	add	r3, r2
 8005b66:	461c      	mov	r4, r3

  MODIFY_REG(*preg,
 8005b68:	6822      	ldr	r2, [r4, #0]
 8005b6a:	4b08      	ldr	r3, [pc, #32]	; (8005b8c <LL_ADC_SetOffset+0x40>)
 8005b6c:	4013      	ands	r3, r2
 8005b6e:	687a      	ldr	r2, [r7, #4]
 8005b70:	f002 41f8 	and.w	r1, r2, #2080374784	; 0x7c000000
 8005b74:	683a      	ldr	r2, [r7, #0]
 8005b76:	430a      	orrs	r2, r1
 8005b78:	4313      	orrs	r3, r2
 8005b7a:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8005b7e:	6023      	str	r3, [r4, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 8005b80:	bf00      	nop
 8005b82:	3710      	adds	r7, #16
 8005b84:	46bd      	mov	sp, r7
 8005b86:	bc90      	pop	{r4, r7}
 8005b88:	4770      	bx	lr
 8005b8a:	bf00      	nop
 8005b8c:	03fff000 	.word	0x03fff000

08005b90 <LL_ADC_GetOffsetChannel>:
  *         (1, 2, 3, 4, 5, 7) For ADC channel read back from ADC register,
  *                      comparison with internal channel parameter to be done
  *                      using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(ADC_TypeDef *ADCx, uint32_t Offsety)
{
 8005b90:	b490      	push	{r4, r7}
 8005b92:	b082      	sub	sp, #8
 8005b94:	af00      	add	r7, sp, #0
 8005b96:	6078      	str	r0, [r7, #4]
 8005b98:	6039      	str	r1, [r7, #0]
  register const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8005b9a:	687b      	ldr	r3, [r7, #4]
 8005b9c:	3360      	adds	r3, #96	; 0x60
 8005b9e:	461a      	mov	r2, r3
 8005ba0:	683b      	ldr	r3, [r7, #0]
 8005ba2:	009b      	lsls	r3, r3, #2
 8005ba4:	4413      	add	r3, r2
 8005ba6:	461c      	mov	r4, r3

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8005ba8:	6823      	ldr	r3, [r4, #0]
 8005baa:	f003 43f8 	and.w	r3, r3, #2080374784	; 0x7c000000
}
 8005bae:	4618      	mov	r0, r3
 8005bb0:	3708      	adds	r7, #8
 8005bb2:	46bd      	mov	sp, r7
 8005bb4:	bc90      	pop	{r4, r7}
 8005bb6:	4770      	bx	lr

08005bb8 <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 8005bb8:	b490      	push	{r4, r7}
 8005bba:	b084      	sub	sp, #16
 8005bbc:	af00      	add	r7, sp, #0
 8005bbe:	60f8      	str	r0, [r7, #12]
 8005bc0:	60b9      	str	r1, [r7, #8]
 8005bc2:	607a      	str	r2, [r7, #4]
  register __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8005bc4:	68fb      	ldr	r3, [r7, #12]
 8005bc6:	3360      	adds	r3, #96	; 0x60
 8005bc8:	461a      	mov	r2, r3
 8005bca:	68bb      	ldr	r3, [r7, #8]
 8005bcc:	009b      	lsls	r3, r3, #2
 8005bce:	4413      	add	r3, r2
 8005bd0:	461c      	mov	r4, r3

  MODIFY_REG(*preg,
 8005bd2:	6823      	ldr	r3, [r4, #0]
 8005bd4:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8005bd8:	687b      	ldr	r3, [r7, #4]
 8005bda:	4313      	orrs	r3, r2
 8005bdc:	6023      	str	r3, [r4, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 8005bde:	bf00      	nop
 8005be0:	3710      	adds	r7, #16
 8005be2:	46bd      	mov	sp, r7
 8005be4:	bc90      	pop	{r4, r7}
 8005be6:	4770      	bx	lr

08005be8 <LL_ADC_SetOffsetSign>:
  *         @arg @ref LL_ADC_OFFSET_SIGN_NEGATIVE
  *         @arg @ref LL_ADC_OFFSET_SIGN_POSITIVE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSign(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSign)
{
 8005be8:	b490      	push	{r4, r7}
 8005bea:	b084      	sub	sp, #16
 8005bec:	af00      	add	r7, sp, #0
 8005bee:	60f8      	str	r0, [r7, #12]
 8005bf0:	60b9      	str	r1, [r7, #8]
 8005bf2:	607a      	str	r2, [r7, #4]
  register __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8005bf4:	68fb      	ldr	r3, [r7, #12]
 8005bf6:	3360      	adds	r3, #96	; 0x60
 8005bf8:	461a      	mov	r2, r3
 8005bfa:	68bb      	ldr	r3, [r7, #8]
 8005bfc:	009b      	lsls	r3, r3, #2
 8005bfe:	4413      	add	r3, r2
 8005c00:	461c      	mov	r4, r3

  MODIFY_REG(*preg,
 8005c02:	6823      	ldr	r3, [r4, #0]
 8005c04:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 8005c08:	687b      	ldr	r3, [r7, #4]
 8005c0a:	4313      	orrs	r3, r2
 8005c0c:	6023      	str	r3, [r4, #0]
             ADC_OFR1_OFFSETPOS,
             OffsetSign);
}
 8005c0e:	bf00      	nop
 8005c10:	3710      	adds	r7, #16
 8005c12:	46bd      	mov	sp, r7
 8005c14:	bc90      	pop	{r4, r7}
 8005c16:	4770      	bx	lr

08005c18 <LL_ADC_SetOffsetSaturation>:
  *         @arg @ref LL_ADC_OFFSET_SATURATION_ENABLE
  *         @arg @ref LL_ADC_OFFSET_SATURATION_DISABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSaturation(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSaturation)
{
 8005c18:	b490      	push	{r4, r7}
 8005c1a:	b084      	sub	sp, #16
 8005c1c:	af00      	add	r7, sp, #0
 8005c1e:	60f8      	str	r0, [r7, #12]
 8005c20:	60b9      	str	r1, [r7, #8]
 8005c22:	607a      	str	r2, [r7, #4]
  register __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8005c24:	68fb      	ldr	r3, [r7, #12]
 8005c26:	3360      	adds	r3, #96	; 0x60
 8005c28:	461a      	mov	r2, r3
 8005c2a:	68bb      	ldr	r3, [r7, #8]
 8005c2c:	009b      	lsls	r3, r3, #2
 8005c2e:	4413      	add	r3, r2
 8005c30:	461c      	mov	r4, r3

  MODIFY_REG(*preg,
 8005c32:	6823      	ldr	r3, [r4, #0]
 8005c34:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 8005c38:	687b      	ldr	r3, [r7, #4]
 8005c3a:	4313      	orrs	r3, r2
 8005c3c:	6023      	str	r3, [r4, #0]
             ADC_OFR1_SATEN,
             OffsetSaturation);
}
 8005c3e:	bf00      	nop
 8005c40:	3710      	adds	r7, #16
 8005c42:	46bd      	mov	sp, r7
 8005c44:	bc90      	pop	{r4, r7}
 8005c46:	4770      	bx	lr

08005c48 <LL_ADC_SetSamplingTimeCommonConfig>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_DEFAULT
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetSamplingTimeCommonConfig(ADC_TypeDef *ADCx, uint32_t SamplingTimeCommonConfig)
{
 8005c48:	b480      	push	{r7}
 8005c4a:	b083      	sub	sp, #12
 8005c4c:	af00      	add	r7, sp, #0
 8005c4e:	6078      	str	r0, [r7, #4]
 8005c50:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->SMPR1, ADC_SMPR1_SMPPLUS, SamplingTimeCommonConfig);
 8005c52:	687b      	ldr	r3, [r7, #4]
 8005c54:	695b      	ldr	r3, [r3, #20]
 8005c56:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8005c5a:	683b      	ldr	r3, [r7, #0]
 8005c5c:	431a      	orrs	r2, r3
 8005c5e:	687b      	ldr	r3, [r7, #4]
 8005c60:	615a      	str	r2, [r3, #20]
}
 8005c62:	bf00      	nop
 8005c64:	370c      	adds	r7, #12
 8005c66:	46bd      	mov	sp, r7
 8005c68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c6c:	4770      	bx	lr

08005c6e <LL_ADC_REG_SetSequencerRanks>:
  *         (8) On STM32G4, fast channel allows: 2.5 (sampling) + 12.5 (conversion) = 15 ADC clock cycles (fADC) to convert in 12-bit resolution.
  *             Other channels are slow channels  allows: 6.5 (sampling) + 12.5 (conversion) = 19 ADC clock cycles (fADC) to convert in 12-bit resolution.\n
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8005c6e:	b490      	push	{r4, r7}
 8005c70:	b084      	sub	sp, #16
 8005c72:	af00      	add	r7, sp, #0
 8005c74:	60f8      	str	r0, [r7, #12]
 8005c76:	60b9      	str	r1, [r7, #8]
 8005c78:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  register __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 8005c7a:	68fb      	ldr	r3, [r7, #12]
 8005c7c:	3330      	adds	r3, #48	; 0x30
 8005c7e:	461a      	mov	r2, r3
 8005c80:	68bb      	ldr	r3, [r7, #8]
 8005c82:	0a1b      	lsrs	r3, r3, #8
 8005c84:	009b      	lsls	r3, r3, #2
 8005c86:	f003 030c 	and.w	r3, r3, #12
 8005c8a:	4413      	add	r3, r2
 8005c8c:	461c      	mov	r4, r3

  MODIFY_REG(*preg,
 8005c8e:	6822      	ldr	r2, [r4, #0]
 8005c90:	68bb      	ldr	r3, [r7, #8]
 8005c92:	f003 031f 	and.w	r3, r3, #31
 8005c96:	211f      	movs	r1, #31
 8005c98:	fa01 f303 	lsl.w	r3, r1, r3
 8005c9c:	43db      	mvns	r3, r3
 8005c9e:	401a      	ands	r2, r3
 8005ca0:	687b      	ldr	r3, [r7, #4]
 8005ca2:	0e9b      	lsrs	r3, r3, #26
 8005ca4:	f003 011f 	and.w	r1, r3, #31
 8005ca8:	68bb      	ldr	r3, [r7, #8]
 8005caa:	f003 031f 	and.w	r3, r3, #31
 8005cae:	fa01 f303 	lsl.w	r3, r1, r3
 8005cb2:	4313      	orrs	r3, r2
 8005cb4:	6023      	str	r3, [r4, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS) << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 8005cb6:	bf00      	nop
 8005cb8:	3710      	adds	r7, #16
 8005cba:	46bd      	mov	sp, r7
 8005cbc:	bc90      	pop	{r4, r7}
 8005cbe:	4770      	bx	lr

08005cc0 <LL_ADC_SetChannelSamplingTime>:
  *             can be replaced by 3.5 ADC clock cycles.
  *             Refer to function @ref LL_ADC_SetSamplingTimeCommonConfig().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 8005cc0:	b490      	push	{r4, r7}
 8005cc2:	b084      	sub	sp, #16
 8005cc4:	af00      	add	r7, sp, #0
 8005cc6:	60f8      	str	r0, [r7, #12]
 8005cc8:	60b9      	str	r1, [r7, #8]
 8005cca:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  register __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 8005ccc:	68fb      	ldr	r3, [r7, #12]
 8005cce:	3314      	adds	r3, #20
 8005cd0:	461a      	mov	r2, r3
 8005cd2:	68bb      	ldr	r3, [r7, #8]
 8005cd4:	0e5b      	lsrs	r3, r3, #25
 8005cd6:	009b      	lsls	r3, r3, #2
 8005cd8:	f003 0304 	and.w	r3, r3, #4
 8005cdc:	4413      	add	r3, r2
 8005cde:	461c      	mov	r4, r3

  MODIFY_REG(*preg,
 8005ce0:	6822      	ldr	r2, [r4, #0]
 8005ce2:	68bb      	ldr	r3, [r7, #8]
 8005ce4:	0d1b      	lsrs	r3, r3, #20
 8005ce6:	f003 031f 	and.w	r3, r3, #31
 8005cea:	2107      	movs	r1, #7
 8005cec:	fa01 f303 	lsl.w	r3, r1, r3
 8005cf0:	43db      	mvns	r3, r3
 8005cf2:	401a      	ands	r2, r3
 8005cf4:	68bb      	ldr	r3, [r7, #8]
 8005cf6:	0d1b      	lsrs	r3, r3, #20
 8005cf8:	f003 031f 	and.w	r3, r3, #31
 8005cfc:	6879      	ldr	r1, [r7, #4]
 8005cfe:	fa01 f303 	lsl.w	r3, r1, r3
 8005d02:	4313      	orrs	r3, r2
 8005d04:	6023      	str	r3, [r4, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 8005d06:	bf00      	nop
 8005d08:	3710      	adds	r7, #16
 8005d0a:	46bd      	mov	sp, r7
 8005d0c:	bc90      	pop	{r4, r7}
 8005d0e:	4770      	bx	lr

08005d10 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 8005d10:	b480      	push	{r7}
 8005d12:	b085      	sub	sp, #20
 8005d14:	af00      	add	r7, sp, #0
 8005d16:	60f8      	str	r0, [r7, #12]
 8005d18:	60b9      	str	r1, [r7, #8]
 8005d1a:	607a      	str	r2, [r7, #4]
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 8005d1c:	68fb      	ldr	r3, [r7, #12]
 8005d1e:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 8005d22:	68bb      	ldr	r3, [r7, #8]
 8005d24:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005d28:	43db      	mvns	r3, r3
 8005d2a:	401a      	ands	r2, r3
 8005d2c:	687b      	ldr	r3, [r7, #4]
 8005d2e:	f003 0318 	and.w	r3, r3, #24
 8005d32:	4908      	ldr	r1, [pc, #32]	; (8005d54 <LL_ADC_SetChannelSingleDiff+0x44>)
 8005d34:	40d9      	lsrs	r1, r3
 8005d36:	68bb      	ldr	r3, [r7, #8]
 8005d38:	400b      	ands	r3, r1
 8005d3a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005d3e:	431a      	orrs	r2, r3
 8005d40:	68fb      	ldr	r3, [r7, #12]
 8005d42:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK) & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
}
 8005d46:	bf00      	nop
 8005d48:	3714      	adds	r7, #20
 8005d4a:	46bd      	mov	sp, r7
 8005d4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d50:	4770      	bx	lr
 8005d52:	bf00      	nop
 8005d54:	0007ffff 	.word	0x0007ffff

08005d58 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 8005d58:	b480      	push	{r7}
 8005d5a:	b083      	sub	sp, #12
 8005d5c:	af00      	add	r7, sp, #0
 8005d5e:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8005d60:	687b      	ldr	r3, [r7, #4]
 8005d62:	689b      	ldr	r3, [r3, #8]
 8005d64:	f023 4320 	bic.w	r3, r3, #2684354560	; 0xa0000000
 8005d68:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8005d6c:	687a      	ldr	r2, [r7, #4]
 8005d6e:	6093      	str	r3, [r2, #8]
}
 8005d70:	bf00      	nop
 8005d72:	370c      	adds	r7, #12
 8005d74:	46bd      	mov	sp, r7
 8005d76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d7a:	4770      	bx	lr

08005d7c <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(ADC_TypeDef *ADCx)
{
 8005d7c:	b480      	push	{r7}
 8005d7e:	b083      	sub	sp, #12
 8005d80:	af00      	add	r7, sp, #0
 8005d82:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8005d84:	687b      	ldr	r3, [r7, #4]
 8005d86:	689b      	ldr	r3, [r3, #8]
 8005d88:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8005d8c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8005d90:	d101      	bne.n	8005d96 <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 8005d92:	2301      	movs	r3, #1
 8005d94:	e000      	b.n	8005d98 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 8005d96:	2300      	movs	r3, #0
}
 8005d98:	4618      	mov	r0, r3
 8005d9a:	370c      	adds	r7, #12
 8005d9c:	46bd      	mov	sp, r7
 8005d9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005da2:	4770      	bx	lr

08005da4 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8005da4:	b480      	push	{r7}
 8005da6:	b083      	sub	sp, #12
 8005da8:	af00      	add	r7, sp, #0
 8005daa:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8005dac:	687b      	ldr	r3, [r7, #4]
 8005dae:	689b      	ldr	r3, [r3, #8]
 8005db0:	f023 4310 	bic.w	r3, r3, #2415919104	; 0x90000000
 8005db4:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8005db8:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8005dbc:	687b      	ldr	r3, [r7, #4]
 8005dbe:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8005dc0:	bf00      	nop
 8005dc2:	370c      	adds	r7, #12
 8005dc4:	46bd      	mov	sp, r7
 8005dc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005dca:	4770      	bx	lr

08005dcc <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
{
 8005dcc:	b480      	push	{r7}
 8005dce:	b083      	sub	sp, #12
 8005dd0:	af00      	add	r7, sp, #0
 8005dd2:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8005dd4:	687b      	ldr	r3, [r7, #4]
 8005dd6:	689b      	ldr	r3, [r3, #8]
 8005dd8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005ddc:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8005de0:	d101      	bne.n	8005de6 <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 8005de2:	2301      	movs	r3, #1
 8005de4:	e000      	b.n	8005de8 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 8005de6:	2300      	movs	r3, #0
}
 8005de8:	4618      	mov	r0, r3
 8005dea:	370c      	adds	r7, #12
 8005dec:	46bd      	mov	sp, r7
 8005dee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005df2:	4770      	bx	lr

08005df4 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
 8005df4:	b480      	push	{r7}
 8005df6:	b083      	sub	sp, #12
 8005df8:	af00      	add	r7, sp, #0
 8005dfa:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8005dfc:	687b      	ldr	r3, [r7, #4]
 8005dfe:	689b      	ldr	r3, [r3, #8]
 8005e00:	f003 0301 	and.w	r3, r3, #1
 8005e04:	2b01      	cmp	r3, #1
 8005e06:	d101      	bne.n	8005e0c <LL_ADC_IsEnabled+0x18>
 8005e08:	2301      	movs	r3, #1
 8005e0a:	e000      	b.n	8005e0e <LL_ADC_IsEnabled+0x1a>
 8005e0c:	2300      	movs	r3, #0
}
 8005e0e:	4618      	mov	r0, r3
 8005e10:	370c      	adds	r7, #12
 8005e12:	46bd      	mov	sp, r7
 8005e14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e18:	4770      	bx	lr

08005e1a <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8005e1a:	b480      	push	{r7}
 8005e1c:	b083      	sub	sp, #12
 8005e1e:	af00      	add	r7, sp, #0
 8005e20:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8005e22:	687b      	ldr	r3, [r7, #4]
 8005e24:	689b      	ldr	r3, [r3, #8]
 8005e26:	f003 0304 	and.w	r3, r3, #4
 8005e2a:	2b04      	cmp	r3, #4
 8005e2c:	d101      	bne.n	8005e32 <LL_ADC_REG_IsConversionOngoing+0x18>
 8005e2e:	2301      	movs	r3, #1
 8005e30:	e000      	b.n	8005e34 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8005e32:	2300      	movs	r3, #0
}
 8005e34:	4618      	mov	r0, r3
 8005e36:	370c      	adds	r7, #12
 8005e38:	46bd      	mov	sp, r7
 8005e3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e3e:	4770      	bx	lr

08005e40 <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8005e40:	b480      	push	{r7}
 8005e42:	b083      	sub	sp, #12
 8005e44:	af00      	add	r7, sp, #0
 8005e46:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8005e48:	687b      	ldr	r3, [r7, #4]
 8005e4a:	689b      	ldr	r3, [r3, #8]
 8005e4c:	f003 0308 	and.w	r3, r3, #8
 8005e50:	2b08      	cmp	r3, #8
 8005e52:	d101      	bne.n	8005e58 <LL_ADC_INJ_IsConversionOngoing+0x18>
 8005e54:	2301      	movs	r3, #1
 8005e56:	e000      	b.n	8005e5a <LL_ADC_INJ_IsConversionOngoing+0x1a>
 8005e58:	2300      	movs	r3, #0
}
 8005e5a:	4618      	mov	r0, r3
 8005e5c:	370c      	adds	r7, #12
 8005e5e:	46bd      	mov	sp, r7
 8005e60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e64:	4770      	bx	lr
	...

08005e68 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8005e68:	b590      	push	{r4, r7, lr}
 8005e6a:	b089      	sub	sp, #36	; 0x24
 8005e6c:	af00      	add	r7, sp, #0
 8005e6e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8005e70:	2300      	movs	r3, #0
 8005e72:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpCFGR;
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 8005e74:	2300      	movs	r3, #0
 8005e76:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;

  /* Check ADC handle */
  if (hadc == NULL)
 8005e78:	687b      	ldr	r3, [r7, #4]
 8005e7a:	2b00      	cmp	r3, #0
 8005e7c:	d101      	bne.n	8005e82 <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 8005e7e:	2301      	movs	r3, #1
 8005e80:	e1ad      	b.n	80061de <HAL_ADC_Init+0x376>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8005e82:	687b      	ldr	r3, [r7, #4]
 8005e84:	695b      	ldr	r3, [r3, #20]
 8005e86:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8005e88:	687b      	ldr	r3, [r7, #4]
 8005e8a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005e8c:	2b00      	cmp	r3, #0
 8005e8e:	d109      	bne.n	8005ea4 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8005e90:	6878      	ldr	r0, [r7, #4]
 8005e92:	f7fe f843 	bl	8003f1c <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8005e96:	687b      	ldr	r3, [r7, #4]
 8005e98:	2200      	movs	r2, #0
 8005e9a:	661a      	str	r2, [r3, #96]	; 0x60

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8005e9c:	687b      	ldr	r3, [r7, #4]
 8005e9e:	2200      	movs	r2, #0
 8005ea0:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8005ea4:	687b      	ldr	r3, [r7, #4]
 8005ea6:	681b      	ldr	r3, [r3, #0]
 8005ea8:	4618      	mov	r0, r3
 8005eaa:	f7ff ff67 	bl	8005d7c <LL_ADC_IsDeepPowerDownEnabled>
 8005eae:	4603      	mov	r3, r0
 8005eb0:	2b00      	cmp	r3, #0
 8005eb2:	d004      	beq.n	8005ebe <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 8005eb4:	687b      	ldr	r3, [r7, #4]
 8005eb6:	681b      	ldr	r3, [r3, #0]
 8005eb8:	4618      	mov	r0, r3
 8005eba:	f7ff ff4d 	bl	8005d58 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8005ebe:	687b      	ldr	r3, [r7, #4]
 8005ec0:	681b      	ldr	r3, [r3, #0]
 8005ec2:	4618      	mov	r0, r3
 8005ec4:	f7ff ff82 	bl	8005dcc <LL_ADC_IsInternalRegulatorEnabled>
 8005ec8:	4603      	mov	r3, r0
 8005eca:	2b00      	cmp	r3, #0
 8005ecc:	d113      	bne.n	8005ef6 <HAL_ADC_Init+0x8e>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 8005ece:	687b      	ldr	r3, [r7, #4]
 8005ed0:	681b      	ldr	r3, [r3, #0]
 8005ed2:	4618      	mov	r0, r3
 8005ed4:	f7ff ff66 	bl	8005da4 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * (SystemCoreClock / (100000UL * 2UL)));
 8005ed8:	4b9e      	ldr	r3, [pc, #632]	; (8006154 <HAL_ADC_Init+0x2ec>)
 8005eda:	681b      	ldr	r3, [r3, #0]
 8005edc:	099b      	lsrs	r3, r3, #6
 8005ede:	4a9e      	ldr	r2, [pc, #632]	; (8006158 <HAL_ADC_Init+0x2f0>)
 8005ee0:	fba2 2303 	umull	r2, r3, r2, r3
 8005ee4:	099b      	lsrs	r3, r3, #6
 8005ee6:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8005ee8:	e002      	b.n	8005ef0 <HAL_ADC_Init+0x88>
    {
      wait_loop_index--;
 8005eea:	68bb      	ldr	r3, [r7, #8]
 8005eec:	3b01      	subs	r3, #1
 8005eee:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8005ef0:	68bb      	ldr	r3, [r7, #8]
 8005ef2:	2b00      	cmp	r3, #0
 8005ef4:	d1f9      	bne.n	8005eea <HAL_ADC_Init+0x82>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8005ef6:	687b      	ldr	r3, [r7, #4]
 8005ef8:	681b      	ldr	r3, [r3, #0]
 8005efa:	4618      	mov	r0, r3
 8005efc:	f7ff ff66 	bl	8005dcc <LL_ADC_IsInternalRegulatorEnabled>
 8005f00:	4603      	mov	r3, r0
 8005f02:	2b00      	cmp	r3, #0
 8005f04:	d10d      	bne.n	8005f22 <HAL_ADC_Init+0xba>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8005f06:	687b      	ldr	r3, [r7, #4]
 8005f08:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005f0a:	f043 0210 	orr.w	r2, r3, #16
 8005f0e:	687b      	ldr	r3, [r7, #4]
 8005f10:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8005f12:	687b      	ldr	r3, [r7, #4]
 8005f14:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005f16:	f043 0201 	orr.w	r2, r3, #1
 8005f1a:	687b      	ldr	r3, [r7, #4]
 8005f1c:	661a      	str	r2, [r3, #96]	; 0x60

    tmp_hal_status = HAL_ERROR;
 8005f1e:	2301      	movs	r3, #1
 8005f20:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8005f22:	687b      	ldr	r3, [r7, #4]
 8005f24:	681b      	ldr	r3, [r3, #0]
 8005f26:	4618      	mov	r0, r3
 8005f28:	f7ff ff77 	bl	8005e1a <LL_ADC_REG_IsConversionOngoing>
 8005f2c:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8005f2e:	687b      	ldr	r3, [r7, #4]
 8005f30:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005f32:	f003 0310 	and.w	r3, r3, #16
 8005f36:	2b00      	cmp	r3, #0
 8005f38:	f040 8148 	bne.w	80061cc <HAL_ADC_Init+0x364>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 8005f3c:	697b      	ldr	r3, [r7, #20]
 8005f3e:	2b00      	cmp	r3, #0
 8005f40:	f040 8144 	bne.w	80061cc <HAL_ADC_Init+0x364>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8005f44:	687b      	ldr	r3, [r7, #4]
 8005f46:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005f48:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 8005f4c:	f043 0202 	orr.w	r2, r3, #2
 8005f50:	687b      	ldr	r3, [r7, #4]
 8005f52:	65da      	str	r2, [r3, #92]	; 0x5c
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8005f54:	687b      	ldr	r3, [r7, #4]
 8005f56:	681b      	ldr	r3, [r3, #0]
 8005f58:	4618      	mov	r0, r3
 8005f5a:	f7ff ff4b 	bl	8005df4 <LL_ADC_IsEnabled>
 8005f5e:	4603      	mov	r3, r0
 8005f60:	2b00      	cmp	r3, #0
 8005f62:	d141      	bne.n	8005fe8 <HAL_ADC_Init+0x180>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8005f64:	687b      	ldr	r3, [r7, #4]
 8005f66:	681b      	ldr	r3, [r3, #0]
 8005f68:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8005f6c:	d004      	beq.n	8005f78 <HAL_ADC_Init+0x110>
 8005f6e:	687b      	ldr	r3, [r7, #4]
 8005f70:	681b      	ldr	r3, [r3, #0]
 8005f72:	4a7a      	ldr	r2, [pc, #488]	; (800615c <HAL_ADC_Init+0x2f4>)
 8005f74:	4293      	cmp	r3, r2
 8005f76:	d10f      	bne.n	8005f98 <HAL_ADC_Init+0x130>
 8005f78:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
 8005f7c:	f7ff ff3a 	bl	8005df4 <LL_ADC_IsEnabled>
 8005f80:	4604      	mov	r4, r0
 8005f82:	4876      	ldr	r0, [pc, #472]	; (800615c <HAL_ADC_Init+0x2f4>)
 8005f84:	f7ff ff36 	bl	8005df4 <LL_ADC_IsEnabled>
 8005f88:	4603      	mov	r3, r0
 8005f8a:	4323      	orrs	r3, r4
 8005f8c:	2b00      	cmp	r3, #0
 8005f8e:	bf0c      	ite	eq
 8005f90:	2301      	moveq	r3, #1
 8005f92:	2300      	movne	r3, #0
 8005f94:	b2db      	uxtb	r3, r3
 8005f96:	e012      	b.n	8005fbe <HAL_ADC_Init+0x156>
 8005f98:	4871      	ldr	r0, [pc, #452]	; (8006160 <HAL_ADC_Init+0x2f8>)
 8005f9a:	f7ff ff2b 	bl	8005df4 <LL_ADC_IsEnabled>
 8005f9e:	4604      	mov	r4, r0
 8005fa0:	4870      	ldr	r0, [pc, #448]	; (8006164 <HAL_ADC_Init+0x2fc>)
 8005fa2:	f7ff ff27 	bl	8005df4 <LL_ADC_IsEnabled>
 8005fa6:	4603      	mov	r3, r0
 8005fa8:	431c      	orrs	r4, r3
 8005faa:	486f      	ldr	r0, [pc, #444]	; (8006168 <HAL_ADC_Init+0x300>)
 8005fac:	f7ff ff22 	bl	8005df4 <LL_ADC_IsEnabled>
 8005fb0:	4603      	mov	r3, r0
 8005fb2:	4323      	orrs	r3, r4
 8005fb4:	2b00      	cmp	r3, #0
 8005fb6:	bf0c      	ite	eq
 8005fb8:	2301      	moveq	r3, #1
 8005fba:	2300      	movne	r3, #0
 8005fbc:	b2db      	uxtb	r3, r3
 8005fbe:	2b00      	cmp	r3, #0
 8005fc0:	d012      	beq.n	8005fe8 <HAL_ADC_Init+0x180>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 8005fc2:	687b      	ldr	r3, [r7, #4]
 8005fc4:	681b      	ldr	r3, [r3, #0]
 8005fc6:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8005fca:	d004      	beq.n	8005fd6 <HAL_ADC_Init+0x16e>
 8005fcc:	687b      	ldr	r3, [r7, #4]
 8005fce:	681b      	ldr	r3, [r3, #0]
 8005fd0:	4a62      	ldr	r2, [pc, #392]	; (800615c <HAL_ADC_Init+0x2f4>)
 8005fd2:	4293      	cmp	r3, r2
 8005fd4:	d101      	bne.n	8005fda <HAL_ADC_Init+0x172>
 8005fd6:	4a65      	ldr	r2, [pc, #404]	; (800616c <HAL_ADC_Init+0x304>)
 8005fd8:	e000      	b.n	8005fdc <HAL_ADC_Init+0x174>
 8005fda:	4a65      	ldr	r2, [pc, #404]	; (8006170 <HAL_ADC_Init+0x308>)
 8005fdc:	687b      	ldr	r3, [r7, #4]
 8005fde:	685b      	ldr	r3, [r3, #4]
 8005fe0:	4619      	mov	r1, r3
 8005fe2:	4610      	mov	r0, r2
 8005fe4:	f7ff fd7e 	bl	8005ae4 <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8005fe8:	687b      	ldr	r3, [r7, #4]
 8005fea:	7f5b      	ldrb	r3, [r3, #29]
 8005fec:	035a      	lsls	r2, r3, #13
                hadc->Init.Overrun                                                     |
 8005fee:	687b      	ldr	r3, [r7, #4]
 8005ff0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8005ff2:	431a      	orrs	r2, r3
                hadc->Init.DataAlign                                                   |
 8005ff4:	687b      	ldr	r3, [r7, #4]
 8005ff6:	68db      	ldr	r3, [r3, #12]
                hadc->Init.Overrun                                                     |
 8005ff8:	431a      	orrs	r2, r3
                hadc->Init.Resolution                                                  |
 8005ffa:	687b      	ldr	r3, [r7, #4]
 8005ffc:	689b      	ldr	r3, [r3, #8]
                hadc->Init.DataAlign                                                   |
 8005ffe:	431a      	orrs	r2, r3
                ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8006000:	687b      	ldr	r3, [r7, #4]
 8006002:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8006006:	041b      	lsls	r3, r3, #16
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8006008:	4313      	orrs	r3, r2
 800600a:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 800600c:	687b      	ldr	r3, [r7, #4]
 800600e:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8006012:	2b01      	cmp	r3, #1
 8006014:	d106      	bne.n	8006024 <HAL_ADC_Init+0x1bc>
    {
      tmpCFGR |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 8006016:	687b      	ldr	r3, [r7, #4]
 8006018:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800601a:	3b01      	subs	r3, #1
 800601c:	045b      	lsls	r3, r3, #17
 800601e:	69ba      	ldr	r2, [r7, #24]
 8006020:	4313      	orrs	r3, r2
 8006022:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8006024:	687b      	ldr	r3, [r7, #4]
 8006026:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006028:	2b00      	cmp	r3, #0
 800602a:	d009      	beq.n	8006040 <HAL_ADC_Init+0x1d8>
    {
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 800602c:	687b      	ldr	r3, [r7, #4]
 800602e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006030:	f403 7278 	and.w	r2, r3, #992	; 0x3e0
                  | hadc->Init.ExternalTrigConvEdge
 8006034:	687b      	ldr	r3, [r7, #4]
 8006036:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006038:	4313      	orrs	r3, r2
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 800603a:	69ba      	ldr	r2, [r7, #24]
 800603c:	4313      	orrs	r3, r2
 800603e:	61bb      	str	r3, [r7, #24]
                 );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
 8006040:	687b      	ldr	r3, [r7, #4]
 8006042:	681b      	ldr	r3, [r3, #0]
 8006044:	68da      	ldr	r2, [r3, #12]
 8006046:	4b4b      	ldr	r3, [pc, #300]	; (8006174 <HAL_ADC_Init+0x30c>)
 8006048:	4013      	ands	r3, r2
 800604a:	687a      	ldr	r2, [r7, #4]
 800604c:	6812      	ldr	r2, [r2, #0]
 800604e:	69b9      	ldr	r1, [r7, #24]
 8006050:	430b      	orrs	r3, r1
 8006052:	60d3      	str	r3, [r2, #12]

    /* Configuration of sampling mode */
    MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_BULB | ADC_CFGR2_SMPTRIG, hadc->Init.SamplingMode);
 8006054:	687b      	ldr	r3, [r7, #4]
 8006056:	681b      	ldr	r3, [r3, #0]
 8006058:	691b      	ldr	r3, [r3, #16]
 800605a:	f023 6140 	bic.w	r1, r3, #201326592	; 0xc000000
 800605e:	687b      	ldr	r3, [r7, #4]
 8006060:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8006062:	687b      	ldr	r3, [r7, #4]
 8006064:	681b      	ldr	r3, [r3, #0]
 8006066:	430a      	orrs	r2, r1
 8006068:	611a      	str	r2, [r3, #16]
    /* conversion on going on regular and injected groups:                    */
    /*  - Gain Compensation               Init.GainCompensation               */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 800606a:	687b      	ldr	r3, [r7, #4]
 800606c:	681b      	ldr	r3, [r3, #0]
 800606e:	4618      	mov	r0, r3
 8006070:	f7ff fed3 	bl	8005e1a <LL_ADC_REG_IsConversionOngoing>
 8006074:	6138      	str	r0, [r7, #16]
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8006076:	687b      	ldr	r3, [r7, #4]
 8006078:	681b      	ldr	r3, [r3, #0]
 800607a:	4618      	mov	r0, r3
 800607c:	f7ff fee0 	bl	8005e40 <LL_ADC_INJ_IsConversionOngoing>
 8006080:	60f8      	str	r0, [r7, #12]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8006082:	693b      	ldr	r3, [r7, #16]
 8006084:	2b00      	cmp	r3, #0
 8006086:	d17f      	bne.n	8006188 <HAL_ADC_Init+0x320>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8006088:	68fb      	ldr	r3, [r7, #12]
 800608a:	2b00      	cmp	r3, #0
 800608c:	d17c      	bne.n	8006188 <HAL_ADC_Init+0x320>
       )
    {
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
                 ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 800608e:	687b      	ldr	r3, [r7, #4]
 8006090:	7f1b      	ldrb	r3, [r3, #28]
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 8006092:	039a      	lsls	r2, r3, #14
                 ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 8006094:	687b      	ldr	r3, [r7, #4]
 8006096:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 800609a:	005b      	lsls	r3, r3, #1
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 800609c:	4313      	orrs	r3, r2
 800609e:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 80060a0:	687b      	ldr	r3, [r7, #4]
 80060a2:	681b      	ldr	r3, [r3, #0]
 80060a4:	68db      	ldr	r3, [r3, #12]
 80060a6:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80060aa:	f023 0302 	bic.w	r3, r3, #2
 80060ae:	687a      	ldr	r2, [r7, #4]
 80060b0:	6812      	ldr	r2, [r2, #0]
 80060b2:	69b9      	ldr	r1, [r7, #24]
 80060b4:	430b      	orrs	r3, r1
 80060b6:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.GainCompensation != 0UL)
 80060b8:	687b      	ldr	r3, [r7, #4]
 80060ba:	691b      	ldr	r3, [r3, #16]
 80060bc:	2b00      	cmp	r3, #0
 80060be:	d017      	beq.n	80060f0 <HAL_ADC_Init+0x288>
      {
        SET_BIT(hadc->Instance->CFGR2, ADC_CFGR2_GCOMP);
 80060c0:	687b      	ldr	r3, [r7, #4]
 80060c2:	681b      	ldr	r3, [r3, #0]
 80060c4:	691a      	ldr	r2, [r3, #16]
 80060c6:	687b      	ldr	r3, [r7, #4]
 80060c8:	681b      	ldr	r3, [r3, #0]
 80060ca:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 80060ce:	611a      	str	r2, [r3, #16]
        MODIFY_REG(hadc->Instance->GCOMP, ADC_GCOMP_GCOMPCOEFF, hadc->Init.GainCompensation);
 80060d0:	687b      	ldr	r3, [r7, #4]
 80060d2:	681b      	ldr	r3, [r3, #0]
 80060d4:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 80060d8:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 80060dc:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 80060e0:	687a      	ldr	r2, [r7, #4]
 80060e2:	6911      	ldr	r1, [r2, #16]
 80060e4:	687a      	ldr	r2, [r7, #4]
 80060e6:	6812      	ldr	r2, [r2, #0]
 80060e8:	430b      	orrs	r3, r1
 80060ea:	f8c2 30c0 	str.w	r3, [r2, #192]	; 0xc0
 80060ee:	e013      	b.n	8006118 <HAL_ADC_Init+0x2b0>
      }
      else
      {
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_GCOMP);
 80060f0:	687b      	ldr	r3, [r7, #4]
 80060f2:	681b      	ldr	r3, [r3, #0]
 80060f4:	691a      	ldr	r2, [r3, #16]
 80060f6:	687b      	ldr	r3, [r7, #4]
 80060f8:	681b      	ldr	r3, [r3, #0]
 80060fa:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 80060fe:	611a      	str	r2, [r3, #16]
        MODIFY_REG(hadc->Instance->GCOMP, ADC_GCOMP_GCOMPCOEFF, 0UL);
 8006100:	687b      	ldr	r3, [r7, #4]
 8006102:	681b      	ldr	r3, [r3, #0]
 8006104:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 8006108:	687a      	ldr	r2, [r7, #4]
 800610a:	6812      	ldr	r2, [r2, #0]
 800610c:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 8006110:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8006114:	f8c2 30c0 	str.w	r3, [r2, #192]	; 0xc0
      }

      if (hadc->Init.OversamplingMode == ENABLE)
 8006118:	687b      	ldr	r3, [r7, #4]
 800611a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800611e:	2b01      	cmp	r3, #1
 8006120:	d12a      	bne.n	8006178 <HAL_ADC_Init+0x310>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 8006122:	687b      	ldr	r3, [r7, #4]
 8006124:	681b      	ldr	r3, [r3, #0]
 8006126:	691b      	ldr	r3, [r3, #16]
 8006128:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 800612c:	f023 0304 	bic.w	r3, r3, #4
 8006130:	687a      	ldr	r2, [r7, #4]
 8006132:	6c51      	ldr	r1, [r2, #68]	; 0x44
 8006134:	687a      	ldr	r2, [r7, #4]
 8006136:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8006138:	4311      	orrs	r1, r2
 800613a:	687a      	ldr	r2, [r7, #4]
 800613c:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 800613e:	4311      	orrs	r1, r2
 8006140:	687a      	ldr	r2, [r7, #4]
 8006142:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8006144:	430a      	orrs	r2, r1
 8006146:	431a      	orrs	r2, r3
 8006148:	687b      	ldr	r3, [r7, #4]
 800614a:	681b      	ldr	r3, [r3, #0]
 800614c:	f042 0201 	orr.w	r2, r2, #1
 8006150:	611a      	str	r2, [r3, #16]
 8006152:	e019      	b.n	8006188 <HAL_ADC_Init+0x320>
 8006154:	20000200 	.word	0x20000200
 8006158:	053e2d63 	.word	0x053e2d63
 800615c:	50000100 	.word	0x50000100
 8006160:	50000400 	.word	0x50000400
 8006164:	50000500 	.word	0x50000500
 8006168:	50000600 	.word	0x50000600
 800616c:	50000300 	.word	0x50000300
 8006170:	50000700 	.word	0x50000700
 8006174:	fff04007 	.word	0xfff04007
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 8006178:	687b      	ldr	r3, [r7, #4]
 800617a:	681b      	ldr	r3, [r3, #0]
 800617c:	691a      	ldr	r2, [r3, #16]
 800617e:	687b      	ldr	r3, [r7, #4]
 8006180:	681b      	ldr	r3, [r3, #0]
 8006182:	f022 0201 	bic.w	r2, r2, #1
 8006186:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8006188:	687b      	ldr	r3, [r7, #4]
 800618a:	695b      	ldr	r3, [r3, #20]
 800618c:	2b01      	cmp	r3, #1
 800618e:	d10c      	bne.n	80061aa <HAL_ADC_Init+0x342>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 8006190:	687b      	ldr	r3, [r7, #4]
 8006192:	681b      	ldr	r3, [r3, #0]
 8006194:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006196:	f023 010f 	bic.w	r1, r3, #15
 800619a:	687b      	ldr	r3, [r7, #4]
 800619c:	6a1b      	ldr	r3, [r3, #32]
 800619e:	1e5a      	subs	r2, r3, #1
 80061a0:	687b      	ldr	r3, [r7, #4]
 80061a2:	681b      	ldr	r3, [r3, #0]
 80061a4:	430a      	orrs	r2, r1
 80061a6:	631a      	str	r2, [r3, #48]	; 0x30
 80061a8:	e007      	b.n	80061ba <HAL_ADC_Init+0x352>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 80061aa:	687b      	ldr	r3, [r7, #4]
 80061ac:	681b      	ldr	r3, [r3, #0]
 80061ae:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80061b0:	687b      	ldr	r3, [r7, #4]
 80061b2:	681b      	ldr	r3, [r3, #0]
 80061b4:	f022 020f 	bic.w	r2, r2, #15
 80061b8:	631a      	str	r2, [r3, #48]	; 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 80061ba:	687b      	ldr	r3, [r7, #4]
 80061bc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80061be:	f023 0303 	bic.w	r3, r3, #3
 80061c2:	f043 0201 	orr.w	r2, r3, #1
 80061c6:	687b      	ldr	r3, [r7, #4]
 80061c8:	65da      	str	r2, [r3, #92]	; 0x5c
 80061ca:	e007      	b.n	80061dc <HAL_ADC_Init+0x374>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80061cc:	687b      	ldr	r3, [r7, #4]
 80061ce:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80061d0:	f043 0210 	orr.w	r2, r3, #16
 80061d4:	687b      	ldr	r3, [r7, #4]
 80061d6:	65da      	str	r2, [r3, #92]	; 0x5c

    tmp_hal_status = HAL_ERROR;
 80061d8:	2301      	movs	r3, #1
 80061da:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 80061dc:	7ffb      	ldrb	r3, [r7, #31]
}
 80061de:	4618      	mov	r0, r3
 80061e0:	3724      	adds	r7, #36	; 0x24
 80061e2:	46bd      	mov	sp, r7
 80061e4:	bd90      	pop	{r4, r7, pc}
 80061e6:	bf00      	nop

080061e8 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 80061e8:	b580      	push	{r7, lr}
 80061ea:	b0a6      	sub	sp, #152	; 0x98
 80061ec:	af00      	add	r7, sp, #0
 80061ee:	6078      	str	r0, [r7, #4]
 80061f0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80061f2:	2300      	movs	r3, #0
 80061f4:	f887 3097 	strb.w	r3, [r7, #151]	; 0x97
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0;
 80061f8:	2300      	movs	r3, #0
 80061fa:	60bb      	str	r3, [r7, #8]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, sConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 80061fc:	687b      	ldr	r3, [r7, #4]
 80061fe:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 8006202:	2b01      	cmp	r3, #1
 8006204:	d101      	bne.n	800620a <HAL_ADC_ConfigChannel+0x22>
 8006206:	2302      	movs	r3, #2
 8006208:	e38e      	b.n	8006928 <HAL_ADC_ConfigChannel+0x740>
 800620a:	687b      	ldr	r3, [r7, #4]
 800620c:	2201      	movs	r2, #1
 800620e:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8006212:	687b      	ldr	r3, [r7, #4]
 8006214:	681b      	ldr	r3, [r3, #0]
 8006216:	4618      	mov	r0, r3
 8006218:	f7ff fdff 	bl	8005e1a <LL_ADC_REG_IsConversionOngoing>
 800621c:	4603      	mov	r3, r0
 800621e:	2b00      	cmp	r3, #0
 8006220:	f040 836f 	bne.w	8006902 <HAL_ADC_ConfigChannel+0x71a>
  {
    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, sConfig->Rank, sConfig->Channel);
 8006224:	687b      	ldr	r3, [r7, #4]
 8006226:	6818      	ldr	r0, [r3, #0]
 8006228:	683b      	ldr	r3, [r7, #0]
 800622a:	6859      	ldr	r1, [r3, #4]
 800622c:	683b      	ldr	r3, [r7, #0]
 800622e:	681b      	ldr	r3, [r3, #0]
 8006230:	461a      	mov	r2, r3
 8006232:	f7ff fd1c 	bl	8005c6e <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8006236:	687b      	ldr	r3, [r7, #4]
 8006238:	681b      	ldr	r3, [r3, #0]
 800623a:	4618      	mov	r0, r3
 800623c:	f7ff fded 	bl	8005e1a <LL_ADC_REG_IsConversionOngoing>
 8006240:	f8c7 0090 	str.w	r0, [r7, #144]	; 0x90
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8006244:	687b      	ldr	r3, [r7, #4]
 8006246:	681b      	ldr	r3, [r3, #0]
 8006248:	4618      	mov	r0, r3
 800624a:	f7ff fdf9 	bl	8005e40 <LL_ADC_INJ_IsConversionOngoing>
 800624e:	f8c7 008c 	str.w	r0, [r7, #140]	; 0x8c
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8006252:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8006256:	2b00      	cmp	r3, #0
 8006258:	f040 817b 	bne.w	8006552 <HAL_ADC_ConfigChannel+0x36a>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 800625c:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8006260:	2b00      	cmp	r3, #0
 8006262:	f040 8176 	bne.w	8006552 <HAL_ADC_ConfigChannel+0x36a>
       )
    {
      /* Manage specific case of sampling time 3.5 cycles replacing 2.5 cyles */
      if (sConfig->SamplingTime == ADC_SAMPLETIME_3CYCLES_5)
 8006266:	683b      	ldr	r3, [r7, #0]
 8006268:	689b      	ldr	r3, [r3, #8]
 800626a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800626e:	d10f      	bne.n	8006290 <HAL_ADC_ConfigChannel+0xa8>
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, LL_ADC_SAMPLINGTIME_2CYCLES_5);
 8006270:	687b      	ldr	r3, [r7, #4]
 8006272:	6818      	ldr	r0, [r3, #0]
 8006274:	683b      	ldr	r3, [r7, #0]
 8006276:	681b      	ldr	r3, [r3, #0]
 8006278:	2200      	movs	r2, #0
 800627a:	4619      	mov	r1, r3
 800627c:	f7ff fd20 	bl	8005cc0 <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5);
 8006280:	687b      	ldr	r3, [r7, #4]
 8006282:	681b      	ldr	r3, [r3, #0]
 8006284:	f04f 4100 	mov.w	r1, #2147483648	; 0x80000000
 8006288:	4618      	mov	r0, r3
 800628a:	f7ff fcdd 	bl	8005c48 <LL_ADC_SetSamplingTimeCommonConfig>
 800628e:	e00e      	b.n	80062ae <HAL_ADC_ConfigChannel+0xc6>
      }
      else
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, sConfig->SamplingTime);
 8006290:	687b      	ldr	r3, [r7, #4]
 8006292:	6818      	ldr	r0, [r3, #0]
 8006294:	683b      	ldr	r3, [r7, #0]
 8006296:	6819      	ldr	r1, [r3, #0]
 8006298:	683b      	ldr	r3, [r7, #0]
 800629a:	689b      	ldr	r3, [r3, #8]
 800629c:	461a      	mov	r2, r3
 800629e:	f7ff fd0f 	bl	8005cc0 <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
 80062a2:	687b      	ldr	r3, [r7, #4]
 80062a4:	681b      	ldr	r3, [r3, #0]
 80062a6:	2100      	movs	r1, #0
 80062a8:	4618      	mov	r0, r3
 80062aa:	f7ff fccd 	bl	8005c48 <LL_ADC_SetSamplingTimeCommonConfig>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 80062ae:	683b      	ldr	r3, [r7, #0]
 80062b0:	695a      	ldr	r2, [r3, #20]
 80062b2:	687b      	ldr	r3, [r7, #4]
 80062b4:	681b      	ldr	r3, [r3, #0]
 80062b6:	68db      	ldr	r3, [r3, #12]
 80062b8:	08db      	lsrs	r3, r3, #3
 80062ba:	f003 0303 	and.w	r3, r3, #3
 80062be:	005b      	lsls	r3, r3, #1
 80062c0:	fa02 f303 	lsl.w	r3, r2, r3
 80062c4:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88

      if (sConfig->OffsetNumber != ADC_OFFSET_NONE)
 80062c8:	683b      	ldr	r3, [r7, #0]
 80062ca:	691b      	ldr	r3, [r3, #16]
 80062cc:	2b04      	cmp	r3, #4
 80062ce:	d022      	beq.n	8006316 <HAL_ADC_ConfigChannel+0x12e>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, sConfig->OffsetNumber, sConfig->Channel, tmpOffsetShifted);
 80062d0:	687b      	ldr	r3, [r7, #4]
 80062d2:	6818      	ldr	r0, [r3, #0]
 80062d4:	683b      	ldr	r3, [r7, #0]
 80062d6:	6919      	ldr	r1, [r3, #16]
 80062d8:	683b      	ldr	r3, [r7, #0]
 80062da:	681a      	ldr	r2, [r3, #0]
 80062dc:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80062e0:	f7ff fc34 	bl	8005b4c <LL_ADC_SetOffset>

        assert_param(IS_ADC_OFFSET_SIGN(sConfig->OffsetSign));
        assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetSaturation));
        /* Set ADC selected offset sign & saturation */
        LL_ADC_SetOffsetSign(hadc->Instance, sConfig->OffsetNumber, sConfig->OffsetSign);
 80062e4:	687b      	ldr	r3, [r7, #4]
 80062e6:	6818      	ldr	r0, [r3, #0]
 80062e8:	683b      	ldr	r3, [r7, #0]
 80062ea:	6919      	ldr	r1, [r3, #16]
 80062ec:	683b      	ldr	r3, [r7, #0]
 80062ee:	699b      	ldr	r3, [r3, #24]
 80062f0:	461a      	mov	r2, r3
 80062f2:	f7ff fc79 	bl	8005be8 <LL_ADC_SetOffsetSign>
        LL_ADC_SetOffsetSaturation(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetSaturation == ENABLE) ? LL_ADC_OFFSET_SATURATION_ENABLE : LL_ADC_OFFSET_SATURATION_DISABLE);
 80062f6:	687b      	ldr	r3, [r7, #4]
 80062f8:	6818      	ldr	r0, [r3, #0]
 80062fa:	683b      	ldr	r3, [r7, #0]
 80062fc:	6919      	ldr	r1, [r3, #16]
 80062fe:	683b      	ldr	r3, [r7, #0]
 8006300:	7f1b      	ldrb	r3, [r3, #28]
 8006302:	2b01      	cmp	r3, #1
 8006304:	d102      	bne.n	800630c <HAL_ADC_ConfigChannel+0x124>
 8006306:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800630a:	e000      	b.n	800630e <HAL_ADC_ConfigChannel+0x126>
 800630c:	2300      	movs	r3, #0
 800630e:	461a      	mov	r2, r3
 8006310:	f7ff fc82 	bl	8005c18 <LL_ADC_SetOffsetSaturation>
 8006314:	e11d      	b.n	8006552 <HAL_ADC_ConfigChannel+0x36a>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if(__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8006316:	687b      	ldr	r3, [r7, #4]
 8006318:	681b      	ldr	r3, [r3, #0]
 800631a:	2100      	movs	r1, #0
 800631c:	4618      	mov	r0, r3
 800631e:	f7ff fc37 	bl	8005b90 <LL_ADC_GetOffsetChannel>
 8006322:	4603      	mov	r3, r0
 8006324:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8006328:	2b00      	cmp	r3, #0
 800632a:	d10a      	bne.n	8006342 <HAL_ADC_ConfigChannel+0x15a>
 800632c:	687b      	ldr	r3, [r7, #4]
 800632e:	681b      	ldr	r3, [r3, #0]
 8006330:	2100      	movs	r1, #0
 8006332:	4618      	mov	r0, r3
 8006334:	f7ff fc2c 	bl	8005b90 <LL_ADC_GetOffsetChannel>
 8006338:	4603      	mov	r3, r0
 800633a:	0e9b      	lsrs	r3, r3, #26
 800633c:	f003 021f 	and.w	r2, r3, #31
 8006340:	e012      	b.n	8006368 <HAL_ADC_ConfigChannel+0x180>
 8006342:	687b      	ldr	r3, [r7, #4]
 8006344:	681b      	ldr	r3, [r3, #0]
 8006346:	2100      	movs	r1, #0
 8006348:	4618      	mov	r0, r3
 800634a:	f7ff fc21 	bl	8005b90 <LL_ADC_GetOffsetChannel>
 800634e:	4603      	mov	r3, r0
 8006350:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006354:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8006358:	fa93 f3a3 	rbit	r3, r3
 800635c:	67fb      	str	r3, [r7, #124]	; 0x7c
  return result;
 800635e:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8006360:	fab3 f383 	clz	r3, r3
 8006364:	b2db      	uxtb	r3, r3
 8006366:	461a      	mov	r2, r3
 8006368:	683b      	ldr	r3, [r7, #0]
 800636a:	681b      	ldr	r3, [r3, #0]
 800636c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8006370:	2b00      	cmp	r3, #0
 8006372:	d105      	bne.n	8006380 <HAL_ADC_ConfigChannel+0x198>
 8006374:	683b      	ldr	r3, [r7, #0]
 8006376:	681b      	ldr	r3, [r3, #0]
 8006378:	0e9b      	lsrs	r3, r3, #26
 800637a:	f003 031f 	and.w	r3, r3, #31
 800637e:	e00a      	b.n	8006396 <HAL_ADC_ConfigChannel+0x1ae>
 8006380:	683b      	ldr	r3, [r7, #0]
 8006382:	681b      	ldr	r3, [r3, #0]
 8006384:	67bb      	str	r3, [r7, #120]	; 0x78
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006386:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8006388:	fa93 f3a3 	rbit	r3, r3
 800638c:	677b      	str	r3, [r7, #116]	; 0x74
  return result;
 800638e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8006390:	fab3 f383 	clz	r3, r3
 8006394:	b2db      	uxtb	r3, r3
 8006396:	429a      	cmp	r2, r3
 8006398:	d106      	bne.n	80063a8 <HAL_ADC_ConfigChannel+0x1c0>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 800639a:	687b      	ldr	r3, [r7, #4]
 800639c:	681b      	ldr	r3, [r3, #0]
 800639e:	2200      	movs	r2, #0
 80063a0:	2100      	movs	r1, #0
 80063a2:	4618      	mov	r0, r3
 80063a4:	f7ff fc08 	bl	8005bb8 <LL_ADC_SetOffsetState>
        }
        if(__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 80063a8:	687b      	ldr	r3, [r7, #4]
 80063aa:	681b      	ldr	r3, [r3, #0]
 80063ac:	2101      	movs	r1, #1
 80063ae:	4618      	mov	r0, r3
 80063b0:	f7ff fbee 	bl	8005b90 <LL_ADC_GetOffsetChannel>
 80063b4:	4603      	mov	r3, r0
 80063b6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80063ba:	2b00      	cmp	r3, #0
 80063bc:	d10a      	bne.n	80063d4 <HAL_ADC_ConfigChannel+0x1ec>
 80063be:	687b      	ldr	r3, [r7, #4]
 80063c0:	681b      	ldr	r3, [r3, #0]
 80063c2:	2101      	movs	r1, #1
 80063c4:	4618      	mov	r0, r3
 80063c6:	f7ff fbe3 	bl	8005b90 <LL_ADC_GetOffsetChannel>
 80063ca:	4603      	mov	r3, r0
 80063cc:	0e9b      	lsrs	r3, r3, #26
 80063ce:	f003 021f 	and.w	r2, r3, #31
 80063d2:	e010      	b.n	80063f6 <HAL_ADC_ConfigChannel+0x20e>
 80063d4:	687b      	ldr	r3, [r7, #4]
 80063d6:	681b      	ldr	r3, [r3, #0]
 80063d8:	2101      	movs	r1, #1
 80063da:	4618      	mov	r0, r3
 80063dc:	f7ff fbd8 	bl	8005b90 <LL_ADC_GetOffsetChannel>
 80063e0:	4603      	mov	r3, r0
 80063e2:	673b      	str	r3, [r7, #112]	; 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80063e4:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80063e6:	fa93 f3a3 	rbit	r3, r3
 80063ea:	66fb      	str	r3, [r7, #108]	; 0x6c
  return result;
 80063ec:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80063ee:	fab3 f383 	clz	r3, r3
 80063f2:	b2db      	uxtb	r3, r3
 80063f4:	461a      	mov	r2, r3
 80063f6:	683b      	ldr	r3, [r7, #0]
 80063f8:	681b      	ldr	r3, [r3, #0]
 80063fa:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80063fe:	2b00      	cmp	r3, #0
 8006400:	d105      	bne.n	800640e <HAL_ADC_ConfigChannel+0x226>
 8006402:	683b      	ldr	r3, [r7, #0]
 8006404:	681b      	ldr	r3, [r3, #0]
 8006406:	0e9b      	lsrs	r3, r3, #26
 8006408:	f003 031f 	and.w	r3, r3, #31
 800640c:	e00a      	b.n	8006424 <HAL_ADC_ConfigChannel+0x23c>
 800640e:	683b      	ldr	r3, [r7, #0]
 8006410:	681b      	ldr	r3, [r3, #0]
 8006412:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006414:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8006416:	fa93 f3a3 	rbit	r3, r3
 800641a:	667b      	str	r3, [r7, #100]	; 0x64
  return result;
 800641c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800641e:	fab3 f383 	clz	r3, r3
 8006422:	b2db      	uxtb	r3, r3
 8006424:	429a      	cmp	r2, r3
 8006426:	d106      	bne.n	8006436 <HAL_ADC_ConfigChannel+0x24e>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 8006428:	687b      	ldr	r3, [r7, #4]
 800642a:	681b      	ldr	r3, [r3, #0]
 800642c:	2200      	movs	r2, #0
 800642e:	2101      	movs	r1, #1
 8006430:	4618      	mov	r0, r3
 8006432:	f7ff fbc1 	bl	8005bb8 <LL_ADC_SetOffsetState>
        }
        if(__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8006436:	687b      	ldr	r3, [r7, #4]
 8006438:	681b      	ldr	r3, [r3, #0]
 800643a:	2102      	movs	r1, #2
 800643c:	4618      	mov	r0, r3
 800643e:	f7ff fba7 	bl	8005b90 <LL_ADC_GetOffsetChannel>
 8006442:	4603      	mov	r3, r0
 8006444:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8006448:	2b00      	cmp	r3, #0
 800644a:	d10a      	bne.n	8006462 <HAL_ADC_ConfigChannel+0x27a>
 800644c:	687b      	ldr	r3, [r7, #4]
 800644e:	681b      	ldr	r3, [r3, #0]
 8006450:	2102      	movs	r1, #2
 8006452:	4618      	mov	r0, r3
 8006454:	f7ff fb9c 	bl	8005b90 <LL_ADC_GetOffsetChannel>
 8006458:	4603      	mov	r3, r0
 800645a:	0e9b      	lsrs	r3, r3, #26
 800645c:	f003 021f 	and.w	r2, r3, #31
 8006460:	e010      	b.n	8006484 <HAL_ADC_ConfigChannel+0x29c>
 8006462:	687b      	ldr	r3, [r7, #4]
 8006464:	681b      	ldr	r3, [r3, #0]
 8006466:	2102      	movs	r1, #2
 8006468:	4618      	mov	r0, r3
 800646a:	f7ff fb91 	bl	8005b90 <LL_ADC_GetOffsetChannel>
 800646e:	4603      	mov	r3, r0
 8006470:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006472:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8006474:	fa93 f3a3 	rbit	r3, r3
 8006478:	65fb      	str	r3, [r7, #92]	; 0x5c
  return result;
 800647a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800647c:	fab3 f383 	clz	r3, r3
 8006480:	b2db      	uxtb	r3, r3
 8006482:	461a      	mov	r2, r3
 8006484:	683b      	ldr	r3, [r7, #0]
 8006486:	681b      	ldr	r3, [r3, #0]
 8006488:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800648c:	2b00      	cmp	r3, #0
 800648e:	d105      	bne.n	800649c <HAL_ADC_ConfigChannel+0x2b4>
 8006490:	683b      	ldr	r3, [r7, #0]
 8006492:	681b      	ldr	r3, [r3, #0]
 8006494:	0e9b      	lsrs	r3, r3, #26
 8006496:	f003 031f 	and.w	r3, r3, #31
 800649a:	e00a      	b.n	80064b2 <HAL_ADC_ConfigChannel+0x2ca>
 800649c:	683b      	ldr	r3, [r7, #0]
 800649e:	681b      	ldr	r3, [r3, #0]
 80064a0:	65bb      	str	r3, [r7, #88]	; 0x58
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80064a2:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80064a4:	fa93 f3a3 	rbit	r3, r3
 80064a8:	657b      	str	r3, [r7, #84]	; 0x54
  return result;
 80064aa:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80064ac:	fab3 f383 	clz	r3, r3
 80064b0:	b2db      	uxtb	r3, r3
 80064b2:	429a      	cmp	r2, r3
 80064b4:	d106      	bne.n	80064c4 <HAL_ADC_ConfigChannel+0x2dc>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 80064b6:	687b      	ldr	r3, [r7, #4]
 80064b8:	681b      	ldr	r3, [r3, #0]
 80064ba:	2200      	movs	r2, #0
 80064bc:	2102      	movs	r1, #2
 80064be:	4618      	mov	r0, r3
 80064c0:	f7ff fb7a 	bl	8005bb8 <LL_ADC_SetOffsetState>
        }
        if(__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 80064c4:	687b      	ldr	r3, [r7, #4]
 80064c6:	681b      	ldr	r3, [r3, #0]
 80064c8:	2103      	movs	r1, #3
 80064ca:	4618      	mov	r0, r3
 80064cc:	f7ff fb60 	bl	8005b90 <LL_ADC_GetOffsetChannel>
 80064d0:	4603      	mov	r3, r0
 80064d2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80064d6:	2b00      	cmp	r3, #0
 80064d8:	d10a      	bne.n	80064f0 <HAL_ADC_ConfigChannel+0x308>
 80064da:	687b      	ldr	r3, [r7, #4]
 80064dc:	681b      	ldr	r3, [r3, #0]
 80064de:	2103      	movs	r1, #3
 80064e0:	4618      	mov	r0, r3
 80064e2:	f7ff fb55 	bl	8005b90 <LL_ADC_GetOffsetChannel>
 80064e6:	4603      	mov	r3, r0
 80064e8:	0e9b      	lsrs	r3, r3, #26
 80064ea:	f003 021f 	and.w	r2, r3, #31
 80064ee:	e010      	b.n	8006512 <HAL_ADC_ConfigChannel+0x32a>
 80064f0:	687b      	ldr	r3, [r7, #4]
 80064f2:	681b      	ldr	r3, [r3, #0]
 80064f4:	2103      	movs	r1, #3
 80064f6:	4618      	mov	r0, r3
 80064f8:	f7ff fb4a 	bl	8005b90 <LL_ADC_GetOffsetChannel>
 80064fc:	4603      	mov	r3, r0
 80064fe:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006500:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006502:	fa93 f3a3 	rbit	r3, r3
 8006506:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 8006508:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800650a:	fab3 f383 	clz	r3, r3
 800650e:	b2db      	uxtb	r3, r3
 8006510:	461a      	mov	r2, r3
 8006512:	683b      	ldr	r3, [r7, #0]
 8006514:	681b      	ldr	r3, [r3, #0]
 8006516:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800651a:	2b00      	cmp	r3, #0
 800651c:	d105      	bne.n	800652a <HAL_ADC_ConfigChannel+0x342>
 800651e:	683b      	ldr	r3, [r7, #0]
 8006520:	681b      	ldr	r3, [r3, #0]
 8006522:	0e9b      	lsrs	r3, r3, #26
 8006524:	f003 031f 	and.w	r3, r3, #31
 8006528:	e00a      	b.n	8006540 <HAL_ADC_ConfigChannel+0x358>
 800652a:	683b      	ldr	r3, [r7, #0]
 800652c:	681b      	ldr	r3, [r3, #0]
 800652e:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006530:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006532:	fa93 f3a3 	rbit	r3, r3
 8006536:	647b      	str	r3, [r7, #68]	; 0x44
  return result;
 8006538:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800653a:	fab3 f383 	clz	r3, r3
 800653e:	b2db      	uxtb	r3, r3
 8006540:	429a      	cmp	r2, r3
 8006542:	d106      	bne.n	8006552 <HAL_ADC_ConfigChannel+0x36a>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 8006544:	687b      	ldr	r3, [r7, #4]
 8006546:	681b      	ldr	r3, [r3, #0]
 8006548:	2200      	movs	r2, #0
 800654a:	2103      	movs	r1, #3
 800654c:	4618      	mov	r0, r3
 800654e:	f7ff fb33 	bl	8005bb8 <LL_ADC_SetOffsetState>
    }

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8006552:	687b      	ldr	r3, [r7, #4]
 8006554:	681b      	ldr	r3, [r3, #0]
 8006556:	4618      	mov	r0, r3
 8006558:	f7ff fc4c 	bl	8005df4 <LL_ADC_IsEnabled>
 800655c:	4603      	mov	r3, r0
 800655e:	2b00      	cmp	r3, #0
 8006560:	f040 810c 	bne.w	800677c <HAL_ADC_ConfigChannel+0x594>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfig->Channel, sConfig->SingleDiff);
 8006564:	687b      	ldr	r3, [r7, #4]
 8006566:	6818      	ldr	r0, [r3, #0]
 8006568:	683b      	ldr	r3, [r7, #0]
 800656a:	6819      	ldr	r1, [r3, #0]
 800656c:	683b      	ldr	r3, [r7, #0]
 800656e:	68db      	ldr	r3, [r3, #12]
 8006570:	461a      	mov	r2, r3
 8006572:	f7ff fbcd 	bl	8005d10 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (sConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 8006576:	683b      	ldr	r3, [r7, #0]
 8006578:	68db      	ldr	r3, [r3, #12]
 800657a:	4aaf      	ldr	r2, [pc, #700]	; (8006838 <HAL_ADC_ConfigChannel+0x650>)
 800657c:	4293      	cmp	r3, r2
 800657e:	f040 80fd 	bne.w	800677c <HAL_ADC_ConfigChannel+0x594>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8006582:	687b      	ldr	r3, [r7, #4]
 8006584:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8006586:	683b      	ldr	r3, [r7, #0]
 8006588:	681b      	ldr	r3, [r3, #0]
 800658a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800658e:	2b00      	cmp	r3, #0
 8006590:	d10b      	bne.n	80065aa <HAL_ADC_ConfigChannel+0x3c2>
 8006592:	683b      	ldr	r3, [r7, #0]
 8006594:	681b      	ldr	r3, [r3, #0]
 8006596:	0e9b      	lsrs	r3, r3, #26
 8006598:	3301      	adds	r3, #1
 800659a:	f003 031f 	and.w	r3, r3, #31
 800659e:	2b09      	cmp	r3, #9
 80065a0:	bf94      	ite	ls
 80065a2:	2301      	movls	r3, #1
 80065a4:	2300      	movhi	r3, #0
 80065a6:	b2db      	uxtb	r3, r3
 80065a8:	e012      	b.n	80065d0 <HAL_ADC_ConfigChannel+0x3e8>
 80065aa:	683b      	ldr	r3, [r7, #0]
 80065ac:	681b      	ldr	r3, [r3, #0]
 80065ae:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80065b0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80065b2:	fa93 f3a3 	rbit	r3, r3
 80065b6:	63fb      	str	r3, [r7, #60]	; 0x3c
  return result;
 80065b8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80065ba:	fab3 f383 	clz	r3, r3
 80065be:	b2db      	uxtb	r3, r3
 80065c0:	3301      	adds	r3, #1
 80065c2:	f003 031f 	and.w	r3, r3, #31
 80065c6:	2b09      	cmp	r3, #9
 80065c8:	bf94      	ite	ls
 80065ca:	2301      	movls	r3, #1
 80065cc:	2300      	movhi	r3, #0
 80065ce:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80065d0:	2b00      	cmp	r3, #0
 80065d2:	d064      	beq.n	800669e <HAL_ADC_ConfigChannel+0x4b6>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 80065d4:	683b      	ldr	r3, [r7, #0]
 80065d6:	681b      	ldr	r3, [r3, #0]
 80065d8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80065dc:	2b00      	cmp	r3, #0
 80065de:	d107      	bne.n	80065f0 <HAL_ADC_ConfigChannel+0x408>
 80065e0:	683b      	ldr	r3, [r7, #0]
 80065e2:	681b      	ldr	r3, [r3, #0]
 80065e4:	0e9b      	lsrs	r3, r3, #26
 80065e6:	3301      	adds	r3, #1
 80065e8:	069b      	lsls	r3, r3, #26
 80065ea:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80065ee:	e00e      	b.n	800660e <HAL_ADC_ConfigChannel+0x426>
 80065f0:	683b      	ldr	r3, [r7, #0]
 80065f2:	681b      	ldr	r3, [r3, #0]
 80065f4:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80065f6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80065f8:	fa93 f3a3 	rbit	r3, r3
 80065fc:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 80065fe:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006600:	fab3 f383 	clz	r3, r3
 8006604:	b2db      	uxtb	r3, r3
 8006606:	3301      	adds	r3, #1
 8006608:	069b      	lsls	r3, r3, #26
 800660a:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 800660e:	683b      	ldr	r3, [r7, #0]
 8006610:	681b      	ldr	r3, [r3, #0]
 8006612:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8006616:	2b00      	cmp	r3, #0
 8006618:	d109      	bne.n	800662e <HAL_ADC_ConfigChannel+0x446>
 800661a:	683b      	ldr	r3, [r7, #0]
 800661c:	681b      	ldr	r3, [r3, #0]
 800661e:	0e9b      	lsrs	r3, r3, #26
 8006620:	3301      	adds	r3, #1
 8006622:	f003 031f 	and.w	r3, r3, #31
 8006626:	2101      	movs	r1, #1
 8006628:	fa01 f303 	lsl.w	r3, r1, r3
 800662c:	e010      	b.n	8006650 <HAL_ADC_ConfigChannel+0x468>
 800662e:	683b      	ldr	r3, [r7, #0]
 8006630:	681b      	ldr	r3, [r3, #0]
 8006632:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006634:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006636:	fa93 f3a3 	rbit	r3, r3
 800663a:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 800663c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800663e:	fab3 f383 	clz	r3, r3
 8006642:	b2db      	uxtb	r3, r3
 8006644:	3301      	adds	r3, #1
 8006646:	f003 031f 	and.w	r3, r3, #31
 800664a:	2101      	movs	r1, #1
 800664c:	fa01 f303 	lsl.w	r3, r1, r3
 8006650:	ea42 0103 	orr.w	r1, r2, r3
 8006654:	683b      	ldr	r3, [r7, #0]
 8006656:	681b      	ldr	r3, [r3, #0]
 8006658:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800665c:	2b00      	cmp	r3, #0
 800665e:	d10a      	bne.n	8006676 <HAL_ADC_ConfigChannel+0x48e>
 8006660:	683b      	ldr	r3, [r7, #0]
 8006662:	681b      	ldr	r3, [r3, #0]
 8006664:	0e9b      	lsrs	r3, r3, #26
 8006666:	3301      	adds	r3, #1
 8006668:	f003 021f 	and.w	r2, r3, #31
 800666c:	4613      	mov	r3, r2
 800666e:	005b      	lsls	r3, r3, #1
 8006670:	4413      	add	r3, r2
 8006672:	051b      	lsls	r3, r3, #20
 8006674:	e011      	b.n	800669a <HAL_ADC_ConfigChannel+0x4b2>
 8006676:	683b      	ldr	r3, [r7, #0]
 8006678:	681b      	ldr	r3, [r3, #0]
 800667a:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800667c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800667e:	fa93 f3a3 	rbit	r3, r3
 8006682:	627b      	str	r3, [r7, #36]	; 0x24
  return result;
 8006684:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006686:	fab3 f383 	clz	r3, r3
 800668a:	b2db      	uxtb	r3, r3
 800668c:	3301      	adds	r3, #1
 800668e:	f003 021f 	and.w	r2, r3, #31
 8006692:	4613      	mov	r3, r2
 8006694:	005b      	lsls	r3, r3, #1
 8006696:	4413      	add	r3, r2
 8006698:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 800669a:	430b      	orrs	r3, r1
 800669c:	e069      	b.n	8006772 <HAL_ADC_ConfigChannel+0x58a>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 800669e:	683b      	ldr	r3, [r7, #0]
 80066a0:	681b      	ldr	r3, [r3, #0]
 80066a2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80066a6:	2b00      	cmp	r3, #0
 80066a8:	d107      	bne.n	80066ba <HAL_ADC_ConfigChannel+0x4d2>
 80066aa:	683b      	ldr	r3, [r7, #0]
 80066ac:	681b      	ldr	r3, [r3, #0]
 80066ae:	0e9b      	lsrs	r3, r3, #26
 80066b0:	3301      	adds	r3, #1
 80066b2:	069b      	lsls	r3, r3, #26
 80066b4:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80066b8:	e00e      	b.n	80066d8 <HAL_ADC_ConfigChannel+0x4f0>
 80066ba:	683b      	ldr	r3, [r7, #0]
 80066bc:	681b      	ldr	r3, [r3, #0]
 80066be:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80066c0:	6a3b      	ldr	r3, [r7, #32]
 80066c2:	fa93 f3a3 	rbit	r3, r3
 80066c6:	61fb      	str	r3, [r7, #28]
  return result;
 80066c8:	69fb      	ldr	r3, [r7, #28]
 80066ca:	fab3 f383 	clz	r3, r3
 80066ce:	b2db      	uxtb	r3, r3
 80066d0:	3301      	adds	r3, #1
 80066d2:	069b      	lsls	r3, r3, #26
 80066d4:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80066d8:	683b      	ldr	r3, [r7, #0]
 80066da:	681b      	ldr	r3, [r3, #0]
 80066dc:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80066e0:	2b00      	cmp	r3, #0
 80066e2:	d109      	bne.n	80066f8 <HAL_ADC_ConfigChannel+0x510>
 80066e4:	683b      	ldr	r3, [r7, #0]
 80066e6:	681b      	ldr	r3, [r3, #0]
 80066e8:	0e9b      	lsrs	r3, r3, #26
 80066ea:	3301      	adds	r3, #1
 80066ec:	f003 031f 	and.w	r3, r3, #31
 80066f0:	2101      	movs	r1, #1
 80066f2:	fa01 f303 	lsl.w	r3, r1, r3
 80066f6:	e010      	b.n	800671a <HAL_ADC_ConfigChannel+0x532>
 80066f8:	683b      	ldr	r3, [r7, #0]
 80066fa:	681b      	ldr	r3, [r3, #0]
 80066fc:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80066fe:	69bb      	ldr	r3, [r7, #24]
 8006700:	fa93 f3a3 	rbit	r3, r3
 8006704:	617b      	str	r3, [r7, #20]
  return result;
 8006706:	697b      	ldr	r3, [r7, #20]
 8006708:	fab3 f383 	clz	r3, r3
 800670c:	b2db      	uxtb	r3, r3
 800670e:	3301      	adds	r3, #1
 8006710:	f003 031f 	and.w	r3, r3, #31
 8006714:	2101      	movs	r1, #1
 8006716:	fa01 f303 	lsl.w	r3, r1, r3
 800671a:	ea42 0103 	orr.w	r1, r2, r3
 800671e:	683b      	ldr	r3, [r7, #0]
 8006720:	681b      	ldr	r3, [r3, #0]
 8006722:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8006726:	2b00      	cmp	r3, #0
 8006728:	d10d      	bne.n	8006746 <HAL_ADC_ConfigChannel+0x55e>
 800672a:	683b      	ldr	r3, [r7, #0]
 800672c:	681b      	ldr	r3, [r3, #0]
 800672e:	0e9b      	lsrs	r3, r3, #26
 8006730:	3301      	adds	r3, #1
 8006732:	f003 021f 	and.w	r2, r3, #31
 8006736:	4613      	mov	r3, r2
 8006738:	005b      	lsls	r3, r3, #1
 800673a:	4413      	add	r3, r2
 800673c:	3b1e      	subs	r3, #30
 800673e:	051b      	lsls	r3, r3, #20
 8006740:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8006744:	e014      	b.n	8006770 <HAL_ADC_ConfigChannel+0x588>
 8006746:	683b      	ldr	r3, [r7, #0]
 8006748:	681b      	ldr	r3, [r3, #0]
 800674a:	613b      	str	r3, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800674c:	693b      	ldr	r3, [r7, #16]
 800674e:	fa93 f3a3 	rbit	r3, r3
 8006752:	60fb      	str	r3, [r7, #12]
  return result;
 8006754:	68fb      	ldr	r3, [r7, #12]
 8006756:	fab3 f383 	clz	r3, r3
 800675a:	b2db      	uxtb	r3, r3
 800675c:	3301      	adds	r3, #1
 800675e:	f003 021f 	and.w	r2, r3, #31
 8006762:	4613      	mov	r3, r2
 8006764:	005b      	lsls	r3, r3, #1
 8006766:	4413      	add	r3, r2
 8006768:	3b1e      	subs	r3, #30
 800676a:	051b      	lsls	r3, r3, #20
 800676c:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8006770:	430b      	orrs	r3, r1
 8006772:	683a      	ldr	r2, [r7, #0]
 8006774:	6892      	ldr	r2, [r2, #8]
 8006776:	4619      	mov	r1, r3
 8006778:	f7ff faa2 	bl	8005cc0 <LL_ADC_SetChannelSamplingTime>
    /* If internal channel selected, enable dedicated internal buffers and    */
    /* paths.                                                                 */
    /* Note: these internal measurement paths can be disabled using           */
    /* HAL_ADC_DeInit().                                                      */

    if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 800677c:	683b      	ldr	r3, [r7, #0]
 800677e:	681a      	ldr	r2, [r3, #0]
 8006780:	4b2e      	ldr	r3, [pc, #184]	; (800683c <HAL_ADC_ConfigChannel+0x654>)
 8006782:	4013      	ands	r3, r2
 8006784:	2b00      	cmp	r3, #0
 8006786:	f000 80c9 	beq.w	800691c <HAL_ADC_ConfigChannel+0x734>
    {
      tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 800678a:	687b      	ldr	r3, [r7, #4]
 800678c:	681b      	ldr	r3, [r3, #0]
 800678e:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8006792:	d004      	beq.n	800679e <HAL_ADC_ConfigChannel+0x5b6>
 8006794:	687b      	ldr	r3, [r7, #4]
 8006796:	681b      	ldr	r3, [r3, #0]
 8006798:	4a29      	ldr	r2, [pc, #164]	; (8006840 <HAL_ADC_ConfigChannel+0x658>)
 800679a:	4293      	cmp	r3, r2
 800679c:	d101      	bne.n	80067a2 <HAL_ADC_ConfigChannel+0x5ba>
 800679e:	4b29      	ldr	r3, [pc, #164]	; (8006844 <HAL_ADC_ConfigChannel+0x65c>)
 80067a0:	e000      	b.n	80067a4 <HAL_ADC_ConfigChannel+0x5bc>
 80067a2:	4b29      	ldr	r3, [pc, #164]	; (8006848 <HAL_ADC_ConfigChannel+0x660>)
 80067a4:	4618      	mov	r0, r3
 80067a6:	f7ff f9c3 	bl	8005b30 <LL_ADC_GetCommonPathInternalCh>
 80067aa:	f8c7 0084 	str.w	r0, [r7, #132]	; 0x84

      /* If the requested internal measurement path has already been enabled, */
      /* bypass the configuration processing.                                 */
      if (((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR_ADC1) || (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR_ADC5))
 80067ae:	683b      	ldr	r3, [r7, #0]
 80067b0:	681b      	ldr	r3, [r3, #0]
 80067b2:	4a26      	ldr	r2, [pc, #152]	; (800684c <HAL_ADC_ConfigChannel+0x664>)
 80067b4:	4293      	cmp	r3, r2
 80067b6:	d004      	beq.n	80067c2 <HAL_ADC_ConfigChannel+0x5da>
 80067b8:	683b      	ldr	r3, [r7, #0]
 80067ba:	681b      	ldr	r3, [r3, #0]
 80067bc:	4a24      	ldr	r2, [pc, #144]	; (8006850 <HAL_ADC_ConfigChannel+0x668>)
 80067be:	4293      	cmp	r3, r2
 80067c0:	d14e      	bne.n	8006860 <HAL_ADC_ConfigChannel+0x678>
          && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 80067c2:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80067c6:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80067ca:	2b00      	cmp	r3, #0
 80067cc:	d148      	bne.n	8006860 <HAL_ADC_ConfigChannel+0x678>
      {
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 80067ce:	687b      	ldr	r3, [r7, #4]
 80067d0:	681b      	ldr	r3, [r3, #0]
 80067d2:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80067d6:	d005      	beq.n	80067e4 <HAL_ADC_ConfigChannel+0x5fc>
 80067d8:	687b      	ldr	r3, [r7, #4]
 80067da:	681b      	ldr	r3, [r3, #0]
 80067dc:	4a1d      	ldr	r2, [pc, #116]	; (8006854 <HAL_ADC_ConfigChannel+0x66c>)
 80067de:	4293      	cmp	r3, r2
 80067e0:	f040 8099 	bne.w	8006916 <HAL_ADC_ConfigChannel+0x72e>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80067e4:	687b      	ldr	r3, [r7, #4]
 80067e6:	681b      	ldr	r3, [r3, #0]
 80067e8:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80067ec:	d004      	beq.n	80067f8 <HAL_ADC_ConfigChannel+0x610>
 80067ee:	687b      	ldr	r3, [r7, #4]
 80067f0:	681b      	ldr	r3, [r3, #0]
 80067f2:	4a13      	ldr	r2, [pc, #76]	; (8006840 <HAL_ADC_ConfigChannel+0x658>)
 80067f4:	4293      	cmp	r3, r2
 80067f6:	d101      	bne.n	80067fc <HAL_ADC_ConfigChannel+0x614>
 80067f8:	4a12      	ldr	r2, [pc, #72]	; (8006844 <HAL_ADC_ConfigChannel+0x65c>)
 80067fa:	e000      	b.n	80067fe <HAL_ADC_ConfigChannel+0x616>
 80067fc:	4a12      	ldr	r2, [pc, #72]	; (8006848 <HAL_ADC_ConfigChannel+0x660>)
 80067fe:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8006802:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8006806:	4619      	mov	r1, r3
 8006808:	4610      	mov	r0, r2
 800680a:	f7ff f97e 	bl	8005b0a <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * (SystemCoreClock / (100000UL * 2UL)));
 800680e:	4b12      	ldr	r3, [pc, #72]	; (8006858 <HAL_ADC_ConfigChannel+0x670>)
 8006810:	681b      	ldr	r3, [r3, #0]
 8006812:	099b      	lsrs	r3, r3, #6
 8006814:	4a11      	ldr	r2, [pc, #68]	; (800685c <HAL_ADC_ConfigChannel+0x674>)
 8006816:	fba2 2303 	umull	r2, r3, r2, r3
 800681a:	099a      	lsrs	r2, r3, #6
 800681c:	4613      	mov	r3, r2
 800681e:	005b      	lsls	r3, r3, #1
 8006820:	4413      	add	r3, r2
 8006822:	009b      	lsls	r3, r3, #2
 8006824:	60bb      	str	r3, [r7, #8]
          while (wait_loop_index != 0UL)
 8006826:	e002      	b.n	800682e <HAL_ADC_ConfigChannel+0x646>
          {
            wait_loop_index--;
 8006828:	68bb      	ldr	r3, [r7, #8]
 800682a:	3b01      	subs	r3, #1
 800682c:	60bb      	str	r3, [r7, #8]
          while (wait_loop_index != 0UL)
 800682e:	68bb      	ldr	r3, [r7, #8]
 8006830:	2b00      	cmp	r3, #0
 8006832:	d1f9      	bne.n	8006828 <HAL_ADC_ConfigChannel+0x640>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8006834:	e06f      	b.n	8006916 <HAL_ADC_ConfigChannel+0x72e>
 8006836:	bf00      	nop
 8006838:	407f0000 	.word	0x407f0000
 800683c:	80080000 	.word	0x80080000
 8006840:	50000100 	.word	0x50000100
 8006844:	50000300 	.word	0x50000300
 8006848:	50000700 	.word	0x50000700
 800684c:	c3210000 	.word	0xc3210000
 8006850:	90c00010 	.word	0x90c00010
 8006854:	50000600 	.word	0x50000600
 8006858:	20000200 	.word	0x20000200
 800685c:	053e2d63 	.word	0x053e2d63
          }
        }
      }
      else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8006860:	683b      	ldr	r3, [r7, #0]
 8006862:	681b      	ldr	r3, [r3, #0]
 8006864:	4a32      	ldr	r2, [pc, #200]	; (8006930 <HAL_ADC_ConfigChannel+0x748>)
 8006866:	4293      	cmp	r3, r2
 8006868:	d125      	bne.n	80068b6 <HAL_ADC_ConfigChannel+0x6ce>
 800686a:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800686e:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8006872:	2b00      	cmp	r3, #0
 8006874:	d11f      	bne.n	80068b6 <HAL_ADC_ConfigChannel+0x6ce>
      {
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8006876:	687b      	ldr	r3, [r7, #4]
 8006878:	681b      	ldr	r3, [r3, #0]
 800687a:	4a2e      	ldr	r2, [pc, #184]	; (8006934 <HAL_ADC_ConfigChannel+0x74c>)
 800687c:	4293      	cmp	r3, r2
 800687e:	d104      	bne.n	800688a <HAL_ADC_ConfigChannel+0x6a2>
 8006880:	687b      	ldr	r3, [r7, #4]
 8006882:	681b      	ldr	r3, [r3, #0]
 8006884:	4a2c      	ldr	r2, [pc, #176]	; (8006938 <HAL_ADC_ConfigChannel+0x750>)
 8006886:	4293      	cmp	r3, r2
 8006888:	d047      	beq.n	800691a <HAL_ADC_ConfigChannel+0x732>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 800688a:	687b      	ldr	r3, [r7, #4]
 800688c:	681b      	ldr	r3, [r3, #0]
 800688e:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8006892:	d004      	beq.n	800689e <HAL_ADC_ConfigChannel+0x6b6>
 8006894:	687b      	ldr	r3, [r7, #4]
 8006896:	681b      	ldr	r3, [r3, #0]
 8006898:	4a26      	ldr	r2, [pc, #152]	; (8006934 <HAL_ADC_ConfigChannel+0x74c>)
 800689a:	4293      	cmp	r3, r2
 800689c:	d101      	bne.n	80068a2 <HAL_ADC_ConfigChannel+0x6ba>
 800689e:	4a27      	ldr	r2, [pc, #156]	; (800693c <HAL_ADC_ConfigChannel+0x754>)
 80068a0:	e000      	b.n	80068a4 <HAL_ADC_ConfigChannel+0x6bc>
 80068a2:	4a27      	ldr	r2, [pc, #156]	; (8006940 <HAL_ADC_ConfigChannel+0x758>)
 80068a4:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80068a8:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80068ac:	4619      	mov	r1, r3
 80068ae:	4610      	mov	r0, r2
 80068b0:	f7ff f92b 	bl	8005b0a <LL_ADC_SetCommonPathInternalCh>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 80068b4:	e031      	b.n	800691a <HAL_ADC_ConfigChannel+0x732>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
      }
      else if ((sConfig->Channel == ADC_CHANNEL_VREFINT)
 80068b6:	683b      	ldr	r3, [r7, #0]
 80068b8:	681b      	ldr	r3, [r3, #0]
 80068ba:	4a22      	ldr	r2, [pc, #136]	; (8006944 <HAL_ADC_ConfigChannel+0x75c>)
 80068bc:	4293      	cmp	r3, r2
 80068be:	d12d      	bne.n	800691c <HAL_ADC_ConfigChannel+0x734>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 80068c0:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80068c4:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80068c8:	2b00      	cmp	r3, #0
 80068ca:	d127      	bne.n	800691c <HAL_ADC_ConfigChannel+0x734>
      {
        if (ADC_VREFINT_INSTANCE(hadc))
 80068cc:	687b      	ldr	r3, [r7, #4]
 80068ce:	681b      	ldr	r3, [r3, #0]
 80068d0:	4a18      	ldr	r2, [pc, #96]	; (8006934 <HAL_ADC_ConfigChannel+0x74c>)
 80068d2:	4293      	cmp	r3, r2
 80068d4:	d022      	beq.n	800691c <HAL_ADC_ConfigChannel+0x734>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80068d6:	687b      	ldr	r3, [r7, #4]
 80068d8:	681b      	ldr	r3, [r3, #0]
 80068da:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80068de:	d004      	beq.n	80068ea <HAL_ADC_ConfigChannel+0x702>
 80068e0:	687b      	ldr	r3, [r7, #4]
 80068e2:	681b      	ldr	r3, [r3, #0]
 80068e4:	4a13      	ldr	r2, [pc, #76]	; (8006934 <HAL_ADC_ConfigChannel+0x74c>)
 80068e6:	4293      	cmp	r3, r2
 80068e8:	d101      	bne.n	80068ee <HAL_ADC_ConfigChannel+0x706>
 80068ea:	4a14      	ldr	r2, [pc, #80]	; (800693c <HAL_ADC_ConfigChannel+0x754>)
 80068ec:	e000      	b.n	80068f0 <HAL_ADC_ConfigChannel+0x708>
 80068ee:	4a14      	ldr	r2, [pc, #80]	; (8006940 <HAL_ADC_ConfigChannel+0x758>)
 80068f0:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80068f4:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80068f8:	4619      	mov	r1, r3
 80068fa:	4610      	mov	r0, r2
 80068fc:	f7ff f905 	bl	8005b0a <LL_ADC_SetCommonPathInternalCh>
 8006900:	e00c      	b.n	800691c <HAL_ADC_ConfigChannel+0x734>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8006902:	687b      	ldr	r3, [r7, #4]
 8006904:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006906:	f043 0220 	orr.w	r2, r3, #32
 800690a:	687b      	ldr	r3, [r7, #4]
 800690c:	65da      	str	r2, [r3, #92]	; 0x5c

    tmp_hal_status = HAL_ERROR;
 800690e:	2301      	movs	r3, #1
 8006910:	f887 3097 	strb.w	r3, [r7, #151]	; 0x97
 8006914:	e002      	b.n	800691c <HAL_ADC_ConfigChannel+0x734>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8006916:	bf00      	nop
 8006918:	e000      	b.n	800691c <HAL_ADC_ConfigChannel+0x734>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 800691a:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800691c:	687b      	ldr	r3, [r7, #4]
 800691e:	2200      	movs	r2, #0
 8006920:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

  /* Return function status */
  return tmp_hal_status;
 8006924:	f897 3097 	ldrb.w	r3, [r7, #151]	; 0x97
}
 8006928:	4618      	mov	r0, r3
 800692a:	3798      	adds	r7, #152	; 0x98
 800692c:	46bd      	mov	sp, r7
 800692e:	bd80      	pop	{r7, pc}
 8006930:	c7520000 	.word	0xc7520000
 8006934:	50000100 	.word	0x50000100
 8006938:	50000500 	.word	0x50000500
 800693c:	50000300 	.word	0x50000300
 8006940:	50000700 	.word	0x50000700
 8006944:	cb840000 	.word	0xcb840000

08006948 <LL_ADC_IsEnabled>:
{
 8006948:	b480      	push	{r7}
 800694a:	b083      	sub	sp, #12
 800694c:	af00      	add	r7, sp, #0
 800694e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8006950:	687b      	ldr	r3, [r7, #4]
 8006952:	689b      	ldr	r3, [r3, #8]
 8006954:	f003 0301 	and.w	r3, r3, #1
 8006958:	2b01      	cmp	r3, #1
 800695a:	d101      	bne.n	8006960 <LL_ADC_IsEnabled+0x18>
 800695c:	2301      	movs	r3, #1
 800695e:	e000      	b.n	8006962 <LL_ADC_IsEnabled+0x1a>
 8006960:	2300      	movs	r3, #0
}
 8006962:	4618      	mov	r0, r3
 8006964:	370c      	adds	r7, #12
 8006966:	46bd      	mov	sp, r7
 8006968:	f85d 7b04 	ldr.w	r7, [sp], #4
 800696c:	4770      	bx	lr

0800696e <LL_ADC_REG_IsConversionOngoing>:
{
 800696e:	b480      	push	{r7}
 8006970:	b083      	sub	sp, #12
 8006972:	af00      	add	r7, sp, #0
 8006974:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8006976:	687b      	ldr	r3, [r7, #4]
 8006978:	689b      	ldr	r3, [r3, #8]
 800697a:	f003 0304 	and.w	r3, r3, #4
 800697e:	2b04      	cmp	r3, #4
 8006980:	d101      	bne.n	8006986 <LL_ADC_REG_IsConversionOngoing+0x18>
 8006982:	2301      	movs	r3, #1
 8006984:	e000      	b.n	8006988 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8006986:	2300      	movs	r3, #0
}
 8006988:	4618      	mov	r0, r3
 800698a:	370c      	adds	r7, #12
 800698c:	46bd      	mov	sp, r7
 800698e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006992:	4770      	bx	lr

08006994 <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param multimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, ADC_MultiModeTypeDef *multimode)
{
 8006994:	b590      	push	{r4, r7, lr}
 8006996:	b0a1      	sub	sp, #132	; 0x84
 8006998:	af00      	add	r7, sp, #0
 800699a:	6078      	str	r0, [r7, #4]
 800699c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800699e:	2300      	movs	r3, #0
 80069a0:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
    assert_param(IS_ADC_DMA_ACCESS_MULTIMODE(multimode->DMAAccessMode));
    assert_param(IS_ADC_SAMPLING_DELAY(multimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 80069a4:	687b      	ldr	r3, [r7, #4]
 80069a6:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 80069aa:	2b01      	cmp	r3, #1
 80069ac:	d101      	bne.n	80069b2 <HAL_ADCEx_MultiModeConfigChannel+0x1e>
 80069ae:	2302      	movs	r3, #2
 80069b0:	e0e3      	b.n	8006b7a <HAL_ADCEx_MultiModeConfigChannel+0x1e6>
 80069b2:	687b      	ldr	r3, [r7, #4]
 80069b4:	2201      	movs	r2, #1
 80069b6:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

  ADC_MULTI_SLAVE(hadc, &tmphadcSlave);
 80069ba:	687b      	ldr	r3, [r7, #4]
 80069bc:	681b      	ldr	r3, [r3, #0]
 80069be:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80069c2:	d102      	bne.n	80069ca <HAL_ADCEx_MultiModeConfigChannel+0x36>
 80069c4:	4b6f      	ldr	r3, [pc, #444]	; (8006b84 <HAL_ADCEx_MultiModeConfigChannel+0x1f0>)
 80069c6:	60bb      	str	r3, [r7, #8]
 80069c8:	e009      	b.n	80069de <HAL_ADCEx_MultiModeConfigChannel+0x4a>
 80069ca:	687b      	ldr	r3, [r7, #4]
 80069cc:	681b      	ldr	r3, [r3, #0]
 80069ce:	4a6e      	ldr	r2, [pc, #440]	; (8006b88 <HAL_ADCEx_MultiModeConfigChannel+0x1f4>)
 80069d0:	4293      	cmp	r3, r2
 80069d2:	d102      	bne.n	80069da <HAL_ADCEx_MultiModeConfigChannel+0x46>
 80069d4:	4b6d      	ldr	r3, [pc, #436]	; (8006b8c <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 80069d6:	60bb      	str	r3, [r7, #8]
 80069d8:	e001      	b.n	80069de <HAL_ADCEx_MultiModeConfigChannel+0x4a>
 80069da:	2300      	movs	r3, #0
 80069dc:	60bb      	str	r3, [r7, #8]

  if (tmphadcSlave.Instance == NULL)
 80069de:	68bb      	ldr	r3, [r7, #8]
 80069e0:	2b00      	cmp	r3, #0
 80069e2:	d10b      	bne.n	80069fc <HAL_ADCEx_MultiModeConfigChannel+0x68>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80069e4:	687b      	ldr	r3, [r7, #4]
 80069e6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80069e8:	f043 0220 	orr.w	r2, r3, #32
 80069ec:	687b      	ldr	r3, [r7, #4]
 80069ee:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 80069f0:	687b      	ldr	r3, [r7, #4]
 80069f2:	2200      	movs	r2, #0
 80069f4:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

    return HAL_ERROR;
 80069f8:	2301      	movs	r3, #1
 80069fa:	e0be      	b.n	8006b7a <HAL_ADCEx_MultiModeConfigChannel+0x1e6>
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DMA configuration                                           */
  /*  - Multimode DMA mode                                                    */
  tmphadcSlave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmphadcSlave)->Instance);
 80069fc:	68bb      	ldr	r3, [r7, #8]
 80069fe:	4618      	mov	r0, r3
 8006a00:	f7ff ffb5 	bl	800696e <LL_ADC_REG_IsConversionOngoing>
 8006a04:	67b8      	str	r0, [r7, #120]	; 0x78
  if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8006a06:	687b      	ldr	r3, [r7, #4]
 8006a08:	681b      	ldr	r3, [r3, #0]
 8006a0a:	4618      	mov	r0, r3
 8006a0c:	f7ff ffaf 	bl	800696e <LL_ADC_REG_IsConversionOngoing>
 8006a10:	4603      	mov	r3, r0
 8006a12:	2b00      	cmp	r3, #0
 8006a14:	f040 80a0 	bne.w	8006b58 <HAL_ADCEx_MultiModeConfigChannel+0x1c4>
      && (tmphadcSlave_conversion_on_going == 0UL))
 8006a18:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8006a1a:	2b00      	cmp	r3, #0
 8006a1c:	f040 809c 	bne.w	8006b58 <HAL_ADCEx_MultiModeConfigChannel+0x1c4>
  {
    /* Pointer to the common control register */
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 8006a20:	687b      	ldr	r3, [r7, #4]
 8006a22:	681b      	ldr	r3, [r3, #0]
 8006a24:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8006a28:	d004      	beq.n	8006a34 <HAL_ADCEx_MultiModeConfigChannel+0xa0>
 8006a2a:	687b      	ldr	r3, [r7, #4]
 8006a2c:	681b      	ldr	r3, [r3, #0]
 8006a2e:	4a55      	ldr	r2, [pc, #340]	; (8006b84 <HAL_ADCEx_MultiModeConfigChannel+0x1f0>)
 8006a30:	4293      	cmp	r3, r2
 8006a32:	d101      	bne.n	8006a38 <HAL_ADCEx_MultiModeConfigChannel+0xa4>
 8006a34:	4b56      	ldr	r3, [pc, #344]	; (8006b90 <HAL_ADCEx_MultiModeConfigChannel+0x1fc>)
 8006a36:	e000      	b.n	8006a3a <HAL_ADCEx_MultiModeConfigChannel+0xa6>
 8006a38:	4b56      	ldr	r3, [pc, #344]	; (8006b94 <HAL_ADCEx_MultiModeConfigChannel+0x200>)
 8006a3a:	677b      	str	r3, [r7, #116]	; 0x74

    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8006a3c:	683b      	ldr	r3, [r7, #0]
 8006a3e:	681b      	ldr	r3, [r3, #0]
 8006a40:	2b00      	cmp	r3, #0
 8006a42:	d04b      	beq.n	8006adc <HAL_ADCEx_MultiModeConfigChannel+0x148>
    {
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG,
 8006a44:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8006a46:	689b      	ldr	r3, [r3, #8]
 8006a48:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8006a4c:	683b      	ldr	r3, [r7, #0]
 8006a4e:	6859      	ldr	r1, [r3, #4]
 8006a50:	687b      	ldr	r3, [r7, #4]
 8006a52:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8006a56:	035b      	lsls	r3, r3, #13
 8006a58:	430b      	orrs	r3, r1
 8006a5a:	431a      	orrs	r2, r3
 8006a5c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8006a5e:	609a      	str	r2, [r3, #8]
      /*      from 1 to 10 clock cycles for 10 bits,                              */
      /*      from 1 to 8 clock cycles for 8 bits                                 */
      /*      from 1 to 6 clock cycles for 6 bits                                 */
      /*    If a higher delay is selected, it will be clipped to maximum delay    */
      /*    range                                                                 */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8006a60:	687b      	ldr	r3, [r7, #4]
 8006a62:	681b      	ldr	r3, [r3, #0]
 8006a64:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8006a68:	d004      	beq.n	8006a74 <HAL_ADCEx_MultiModeConfigChannel+0xe0>
 8006a6a:	687b      	ldr	r3, [r7, #4]
 8006a6c:	681b      	ldr	r3, [r3, #0]
 8006a6e:	4a45      	ldr	r2, [pc, #276]	; (8006b84 <HAL_ADCEx_MultiModeConfigChannel+0x1f0>)
 8006a70:	4293      	cmp	r3, r2
 8006a72:	d10f      	bne.n	8006a94 <HAL_ADCEx_MultiModeConfigChannel+0x100>
 8006a74:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
 8006a78:	f7ff ff66 	bl	8006948 <LL_ADC_IsEnabled>
 8006a7c:	4604      	mov	r4, r0
 8006a7e:	4841      	ldr	r0, [pc, #260]	; (8006b84 <HAL_ADCEx_MultiModeConfigChannel+0x1f0>)
 8006a80:	f7ff ff62 	bl	8006948 <LL_ADC_IsEnabled>
 8006a84:	4603      	mov	r3, r0
 8006a86:	4323      	orrs	r3, r4
 8006a88:	2b00      	cmp	r3, #0
 8006a8a:	bf0c      	ite	eq
 8006a8c:	2301      	moveq	r3, #1
 8006a8e:	2300      	movne	r3, #0
 8006a90:	b2db      	uxtb	r3, r3
 8006a92:	e012      	b.n	8006aba <HAL_ADCEx_MultiModeConfigChannel+0x126>
 8006a94:	483c      	ldr	r0, [pc, #240]	; (8006b88 <HAL_ADCEx_MultiModeConfigChannel+0x1f4>)
 8006a96:	f7ff ff57 	bl	8006948 <LL_ADC_IsEnabled>
 8006a9a:	4604      	mov	r4, r0
 8006a9c:	483b      	ldr	r0, [pc, #236]	; (8006b8c <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 8006a9e:	f7ff ff53 	bl	8006948 <LL_ADC_IsEnabled>
 8006aa2:	4603      	mov	r3, r0
 8006aa4:	431c      	orrs	r4, r3
 8006aa6:	483c      	ldr	r0, [pc, #240]	; (8006b98 <HAL_ADCEx_MultiModeConfigChannel+0x204>)
 8006aa8:	f7ff ff4e 	bl	8006948 <LL_ADC_IsEnabled>
 8006aac:	4603      	mov	r3, r0
 8006aae:	4323      	orrs	r3, r4
 8006ab0:	2b00      	cmp	r3, #0
 8006ab2:	bf0c      	ite	eq
 8006ab4:	2301      	moveq	r3, #1
 8006ab6:	2300      	movne	r3, #0
 8006ab8:	b2db      	uxtb	r3, r3
 8006aba:	2b00      	cmp	r3, #0
 8006abc:	d056      	beq.n	8006b6c <HAL_ADCEx_MultiModeConfigChannel+0x1d8>
      {
        MODIFY_REG(tmpADC_Common->CCR,
 8006abe:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8006ac0:	689b      	ldr	r3, [r3, #8]
 8006ac2:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 8006ac6:	f023 030f 	bic.w	r3, r3, #15
 8006aca:	683a      	ldr	r2, [r7, #0]
 8006acc:	6811      	ldr	r1, [r2, #0]
 8006ace:	683a      	ldr	r2, [r7, #0]
 8006ad0:	6892      	ldr	r2, [r2, #8]
 8006ad2:	430a      	orrs	r2, r1
 8006ad4:	431a      	orrs	r2, r3
 8006ad6:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8006ad8:	609a      	str	r2, [r3, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8006ada:	e047      	b.n	8006b6c <HAL_ADCEx_MultiModeConfigChannel+0x1d8>
                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG);
 8006adc:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8006ade:	689b      	ldr	r3, [r3, #8]
 8006ae0:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8006ae4:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8006ae6:	609a      	str	r2, [r3, #8]

      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8006ae8:	687b      	ldr	r3, [r7, #4]
 8006aea:	681b      	ldr	r3, [r3, #0]
 8006aec:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8006af0:	d004      	beq.n	8006afc <HAL_ADCEx_MultiModeConfigChannel+0x168>
 8006af2:	687b      	ldr	r3, [r7, #4]
 8006af4:	681b      	ldr	r3, [r3, #0]
 8006af6:	4a23      	ldr	r2, [pc, #140]	; (8006b84 <HAL_ADCEx_MultiModeConfigChannel+0x1f0>)
 8006af8:	4293      	cmp	r3, r2
 8006afa:	d10f      	bne.n	8006b1c <HAL_ADCEx_MultiModeConfigChannel+0x188>
 8006afc:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
 8006b00:	f7ff ff22 	bl	8006948 <LL_ADC_IsEnabled>
 8006b04:	4604      	mov	r4, r0
 8006b06:	481f      	ldr	r0, [pc, #124]	; (8006b84 <HAL_ADCEx_MultiModeConfigChannel+0x1f0>)
 8006b08:	f7ff ff1e 	bl	8006948 <LL_ADC_IsEnabled>
 8006b0c:	4603      	mov	r3, r0
 8006b0e:	4323      	orrs	r3, r4
 8006b10:	2b00      	cmp	r3, #0
 8006b12:	bf0c      	ite	eq
 8006b14:	2301      	moveq	r3, #1
 8006b16:	2300      	movne	r3, #0
 8006b18:	b2db      	uxtb	r3, r3
 8006b1a:	e012      	b.n	8006b42 <HAL_ADCEx_MultiModeConfigChannel+0x1ae>
 8006b1c:	481a      	ldr	r0, [pc, #104]	; (8006b88 <HAL_ADCEx_MultiModeConfigChannel+0x1f4>)
 8006b1e:	f7ff ff13 	bl	8006948 <LL_ADC_IsEnabled>
 8006b22:	4604      	mov	r4, r0
 8006b24:	4819      	ldr	r0, [pc, #100]	; (8006b8c <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 8006b26:	f7ff ff0f 	bl	8006948 <LL_ADC_IsEnabled>
 8006b2a:	4603      	mov	r3, r0
 8006b2c:	431c      	orrs	r4, r3
 8006b2e:	481a      	ldr	r0, [pc, #104]	; (8006b98 <HAL_ADCEx_MultiModeConfigChannel+0x204>)
 8006b30:	f7ff ff0a 	bl	8006948 <LL_ADC_IsEnabled>
 8006b34:	4603      	mov	r3, r0
 8006b36:	4323      	orrs	r3, r4
 8006b38:	2b00      	cmp	r3, #0
 8006b3a:	bf0c      	ite	eq
 8006b3c:	2301      	moveq	r3, #1
 8006b3e:	2300      	movne	r3, #0
 8006b40:	b2db      	uxtb	r3, r3
 8006b42:	2b00      	cmp	r3, #0
 8006b44:	d012      	beq.n	8006b6c <HAL_ADCEx_MultiModeConfigChannel+0x1d8>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 8006b46:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8006b48:	689b      	ldr	r3, [r3, #8]
 8006b4a:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 8006b4e:	f023 030f 	bic.w	r3, r3, #15
 8006b52:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 8006b54:	6093      	str	r3, [r2, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8006b56:	e009      	b.n	8006b6c <HAL_ADCEx_MultiModeConfigChannel+0x1d8>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8006b58:	687b      	ldr	r3, [r7, #4]
 8006b5a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006b5c:	f043 0220 	orr.w	r2, r3, #32
 8006b60:	687b      	ldr	r3, [r7, #4]
 8006b62:	65da      	str	r2, [r3, #92]	; 0x5c

    tmp_hal_status = HAL_ERROR;
 8006b64:	2301      	movs	r3, #1
 8006b66:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
 8006b6a:	e000      	b.n	8006b6e <HAL_ADCEx_MultiModeConfigChannel+0x1da>
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8006b6c:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8006b6e:	687b      	ldr	r3, [r7, #4]
 8006b70:	2200      	movs	r2, #0
 8006b72:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

  /* Return function status */
  return tmp_hal_status;
 8006b76:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
}
 8006b7a:	4618      	mov	r0, r3
 8006b7c:	3784      	adds	r7, #132	; 0x84
 8006b7e:	46bd      	mov	sp, r7
 8006b80:	bd90      	pop	{r4, r7, pc}
 8006b82:	bf00      	nop
 8006b84:	50000100 	.word	0x50000100
 8006b88:	50000400 	.word	0x50000400
 8006b8c:	50000500 	.word	0x50000500
 8006b90:	50000300 	.word	0x50000300
 8006b94:	50000700 	.word	0x50000700
 8006b98:	50000600 	.word	0x50000600

08006b9c <LL_EXTI_EnableIT_0_31>:
{
 8006b9c:	b480      	push	{r7}
 8006b9e:	b083      	sub	sp, #12
 8006ba0:	af00      	add	r7, sp, #0
 8006ba2:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->IMR1, ExtiLine);
 8006ba4:	4b05      	ldr	r3, [pc, #20]	; (8006bbc <LL_EXTI_EnableIT_0_31+0x20>)
 8006ba6:	681a      	ldr	r2, [r3, #0]
 8006ba8:	4904      	ldr	r1, [pc, #16]	; (8006bbc <LL_EXTI_EnableIT_0_31+0x20>)
 8006baa:	687b      	ldr	r3, [r7, #4]
 8006bac:	4313      	orrs	r3, r2
 8006bae:	600b      	str	r3, [r1, #0]
}
 8006bb0:	bf00      	nop
 8006bb2:	370c      	adds	r7, #12
 8006bb4:	46bd      	mov	sp, r7
 8006bb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006bba:	4770      	bx	lr
 8006bbc:	40010400 	.word	0x40010400

08006bc0 <LL_EXTI_EnableIT_32_63>:
{
 8006bc0:	b480      	push	{r7}
 8006bc2:	b083      	sub	sp, #12
 8006bc4:	af00      	add	r7, sp, #0
 8006bc6:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->IMR2, ExtiLine);
 8006bc8:	4b05      	ldr	r3, [pc, #20]	; (8006be0 <LL_EXTI_EnableIT_32_63+0x20>)
 8006bca:	6a1a      	ldr	r2, [r3, #32]
 8006bcc:	4904      	ldr	r1, [pc, #16]	; (8006be0 <LL_EXTI_EnableIT_32_63+0x20>)
 8006bce:	687b      	ldr	r3, [r7, #4]
 8006bd0:	4313      	orrs	r3, r2
 8006bd2:	620b      	str	r3, [r1, #32]
}
 8006bd4:	bf00      	nop
 8006bd6:	370c      	adds	r7, #12
 8006bd8:	46bd      	mov	sp, r7
 8006bda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006bde:	4770      	bx	lr
 8006be0:	40010400 	.word	0x40010400

08006be4 <LL_EXTI_DisableIT_0_31>:
{
 8006be4:	b480      	push	{r7}
 8006be6:	b083      	sub	sp, #12
 8006be8:	af00      	add	r7, sp, #0
 8006bea:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->IMR1, ExtiLine);
 8006bec:	4b06      	ldr	r3, [pc, #24]	; (8006c08 <LL_EXTI_DisableIT_0_31+0x24>)
 8006bee:	681a      	ldr	r2, [r3, #0]
 8006bf0:	687b      	ldr	r3, [r7, #4]
 8006bf2:	43db      	mvns	r3, r3
 8006bf4:	4904      	ldr	r1, [pc, #16]	; (8006c08 <LL_EXTI_DisableIT_0_31+0x24>)
 8006bf6:	4013      	ands	r3, r2
 8006bf8:	600b      	str	r3, [r1, #0]
}
 8006bfa:	bf00      	nop
 8006bfc:	370c      	adds	r7, #12
 8006bfe:	46bd      	mov	sp, r7
 8006c00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c04:	4770      	bx	lr
 8006c06:	bf00      	nop
 8006c08:	40010400 	.word	0x40010400

08006c0c <LL_EXTI_DisableIT_32_63>:
{
 8006c0c:	b480      	push	{r7}
 8006c0e:	b083      	sub	sp, #12
 8006c10:	af00      	add	r7, sp, #0
 8006c12:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->IMR2, ExtiLine);
 8006c14:	4b06      	ldr	r3, [pc, #24]	; (8006c30 <LL_EXTI_DisableIT_32_63+0x24>)
 8006c16:	6a1a      	ldr	r2, [r3, #32]
 8006c18:	687b      	ldr	r3, [r7, #4]
 8006c1a:	43db      	mvns	r3, r3
 8006c1c:	4904      	ldr	r1, [pc, #16]	; (8006c30 <LL_EXTI_DisableIT_32_63+0x24>)
 8006c1e:	4013      	ands	r3, r2
 8006c20:	620b      	str	r3, [r1, #32]
}
 8006c22:	bf00      	nop
 8006c24:	370c      	adds	r7, #12
 8006c26:	46bd      	mov	sp, r7
 8006c28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c2c:	4770      	bx	lr
 8006c2e:	bf00      	nop
 8006c30:	40010400 	.word	0x40010400

08006c34 <LL_EXTI_EnableEvent_0_31>:
{
 8006c34:	b480      	push	{r7}
 8006c36:	b083      	sub	sp, #12
 8006c38:	af00      	add	r7, sp, #0
 8006c3a:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->EMR1, ExtiLine);
 8006c3c:	4b05      	ldr	r3, [pc, #20]	; (8006c54 <LL_EXTI_EnableEvent_0_31+0x20>)
 8006c3e:	685a      	ldr	r2, [r3, #4]
 8006c40:	4904      	ldr	r1, [pc, #16]	; (8006c54 <LL_EXTI_EnableEvent_0_31+0x20>)
 8006c42:	687b      	ldr	r3, [r7, #4]
 8006c44:	4313      	orrs	r3, r2
 8006c46:	604b      	str	r3, [r1, #4]
}
 8006c48:	bf00      	nop
 8006c4a:	370c      	adds	r7, #12
 8006c4c:	46bd      	mov	sp, r7
 8006c4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c52:	4770      	bx	lr
 8006c54:	40010400 	.word	0x40010400

08006c58 <LL_EXTI_EnableEvent_32_63>:
{
 8006c58:	b480      	push	{r7}
 8006c5a:	b083      	sub	sp, #12
 8006c5c:	af00      	add	r7, sp, #0
 8006c5e:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->EMR2, ExtiLine);
 8006c60:	4b05      	ldr	r3, [pc, #20]	; (8006c78 <LL_EXTI_EnableEvent_32_63+0x20>)
 8006c62:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8006c64:	4904      	ldr	r1, [pc, #16]	; (8006c78 <LL_EXTI_EnableEvent_32_63+0x20>)
 8006c66:	687b      	ldr	r3, [r7, #4]
 8006c68:	4313      	orrs	r3, r2
 8006c6a:	624b      	str	r3, [r1, #36]	; 0x24
}
 8006c6c:	bf00      	nop
 8006c6e:	370c      	adds	r7, #12
 8006c70:	46bd      	mov	sp, r7
 8006c72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c76:	4770      	bx	lr
 8006c78:	40010400 	.word	0x40010400

08006c7c <LL_EXTI_DisableEvent_0_31>:
{
 8006c7c:	b480      	push	{r7}
 8006c7e:	b083      	sub	sp, #12
 8006c80:	af00      	add	r7, sp, #0
 8006c82:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->EMR1, ExtiLine);
 8006c84:	4b06      	ldr	r3, [pc, #24]	; (8006ca0 <LL_EXTI_DisableEvent_0_31+0x24>)
 8006c86:	685a      	ldr	r2, [r3, #4]
 8006c88:	687b      	ldr	r3, [r7, #4]
 8006c8a:	43db      	mvns	r3, r3
 8006c8c:	4904      	ldr	r1, [pc, #16]	; (8006ca0 <LL_EXTI_DisableEvent_0_31+0x24>)
 8006c8e:	4013      	ands	r3, r2
 8006c90:	604b      	str	r3, [r1, #4]
}
 8006c92:	bf00      	nop
 8006c94:	370c      	adds	r7, #12
 8006c96:	46bd      	mov	sp, r7
 8006c98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c9c:	4770      	bx	lr
 8006c9e:	bf00      	nop
 8006ca0:	40010400 	.word	0x40010400

08006ca4 <LL_EXTI_DisableEvent_32_63>:
{
 8006ca4:	b480      	push	{r7}
 8006ca6:	b083      	sub	sp, #12
 8006ca8:	af00      	add	r7, sp, #0
 8006caa:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->EMR2, ExtiLine);
 8006cac:	4b06      	ldr	r3, [pc, #24]	; (8006cc8 <LL_EXTI_DisableEvent_32_63+0x24>)
 8006cae:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8006cb0:	687b      	ldr	r3, [r7, #4]
 8006cb2:	43db      	mvns	r3, r3
 8006cb4:	4904      	ldr	r1, [pc, #16]	; (8006cc8 <LL_EXTI_DisableEvent_32_63+0x24>)
 8006cb6:	4013      	ands	r3, r2
 8006cb8:	624b      	str	r3, [r1, #36]	; 0x24
}
 8006cba:	bf00      	nop
 8006cbc:	370c      	adds	r7, #12
 8006cbe:	46bd      	mov	sp, r7
 8006cc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006cc4:	4770      	bx	lr
 8006cc6:	bf00      	nop
 8006cc8:	40010400 	.word	0x40010400

08006ccc <LL_EXTI_EnableRisingTrig_0_31>:
{
 8006ccc:	b480      	push	{r7}
 8006cce:	b083      	sub	sp, #12
 8006cd0:	af00      	add	r7, sp, #0
 8006cd2:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->RTSR1, ExtiLine);
 8006cd4:	4b05      	ldr	r3, [pc, #20]	; (8006cec <LL_EXTI_EnableRisingTrig_0_31+0x20>)
 8006cd6:	689a      	ldr	r2, [r3, #8]
 8006cd8:	4904      	ldr	r1, [pc, #16]	; (8006cec <LL_EXTI_EnableRisingTrig_0_31+0x20>)
 8006cda:	687b      	ldr	r3, [r7, #4]
 8006cdc:	4313      	orrs	r3, r2
 8006cde:	608b      	str	r3, [r1, #8]
}
 8006ce0:	bf00      	nop
 8006ce2:	370c      	adds	r7, #12
 8006ce4:	46bd      	mov	sp, r7
 8006ce6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006cea:	4770      	bx	lr
 8006cec:	40010400 	.word	0x40010400

08006cf0 <LL_EXTI_EnableRisingTrig_32_63>:
{
 8006cf0:	b480      	push	{r7}
 8006cf2:	b083      	sub	sp, #12
 8006cf4:	af00      	add	r7, sp, #0
 8006cf6:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->RTSR2, ExtiLine);
 8006cf8:	4b05      	ldr	r3, [pc, #20]	; (8006d10 <LL_EXTI_EnableRisingTrig_32_63+0x20>)
 8006cfa:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8006cfc:	4904      	ldr	r1, [pc, #16]	; (8006d10 <LL_EXTI_EnableRisingTrig_32_63+0x20>)
 8006cfe:	687b      	ldr	r3, [r7, #4]
 8006d00:	4313      	orrs	r3, r2
 8006d02:	628b      	str	r3, [r1, #40]	; 0x28
}
 8006d04:	bf00      	nop
 8006d06:	370c      	adds	r7, #12
 8006d08:	46bd      	mov	sp, r7
 8006d0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d0e:	4770      	bx	lr
 8006d10:	40010400 	.word	0x40010400

08006d14 <LL_EXTI_DisableRisingTrig_0_31>:
{
 8006d14:	b480      	push	{r7}
 8006d16:	b083      	sub	sp, #12
 8006d18:	af00      	add	r7, sp, #0
 8006d1a:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->RTSR1, ExtiLine);
 8006d1c:	4b06      	ldr	r3, [pc, #24]	; (8006d38 <LL_EXTI_DisableRisingTrig_0_31+0x24>)
 8006d1e:	689a      	ldr	r2, [r3, #8]
 8006d20:	687b      	ldr	r3, [r7, #4]
 8006d22:	43db      	mvns	r3, r3
 8006d24:	4904      	ldr	r1, [pc, #16]	; (8006d38 <LL_EXTI_DisableRisingTrig_0_31+0x24>)
 8006d26:	4013      	ands	r3, r2
 8006d28:	608b      	str	r3, [r1, #8]
}
 8006d2a:	bf00      	nop
 8006d2c:	370c      	adds	r7, #12
 8006d2e:	46bd      	mov	sp, r7
 8006d30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d34:	4770      	bx	lr
 8006d36:	bf00      	nop
 8006d38:	40010400 	.word	0x40010400

08006d3c <LL_EXTI_DisableRisingTrig_32_63>:
{
 8006d3c:	b480      	push	{r7}
 8006d3e:	b083      	sub	sp, #12
 8006d40:	af00      	add	r7, sp, #0
 8006d42:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->RTSR2, ExtiLine);
 8006d44:	4b06      	ldr	r3, [pc, #24]	; (8006d60 <LL_EXTI_DisableRisingTrig_32_63+0x24>)
 8006d46:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8006d48:	687b      	ldr	r3, [r7, #4]
 8006d4a:	43db      	mvns	r3, r3
 8006d4c:	4904      	ldr	r1, [pc, #16]	; (8006d60 <LL_EXTI_DisableRisingTrig_32_63+0x24>)
 8006d4e:	4013      	ands	r3, r2
 8006d50:	628b      	str	r3, [r1, #40]	; 0x28
}
 8006d52:	bf00      	nop
 8006d54:	370c      	adds	r7, #12
 8006d56:	46bd      	mov	sp, r7
 8006d58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d5c:	4770      	bx	lr
 8006d5e:	bf00      	nop
 8006d60:	40010400 	.word	0x40010400

08006d64 <LL_EXTI_EnableFallingTrig_0_31>:
{
 8006d64:	b480      	push	{r7}
 8006d66:	b083      	sub	sp, #12
 8006d68:	af00      	add	r7, sp, #0
 8006d6a:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->FTSR1, ExtiLine);
 8006d6c:	4b05      	ldr	r3, [pc, #20]	; (8006d84 <LL_EXTI_EnableFallingTrig_0_31+0x20>)
 8006d6e:	68da      	ldr	r2, [r3, #12]
 8006d70:	4904      	ldr	r1, [pc, #16]	; (8006d84 <LL_EXTI_EnableFallingTrig_0_31+0x20>)
 8006d72:	687b      	ldr	r3, [r7, #4]
 8006d74:	4313      	orrs	r3, r2
 8006d76:	60cb      	str	r3, [r1, #12]
}
 8006d78:	bf00      	nop
 8006d7a:	370c      	adds	r7, #12
 8006d7c:	46bd      	mov	sp, r7
 8006d7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d82:	4770      	bx	lr
 8006d84:	40010400 	.word	0x40010400

08006d88 <LL_EXTI_EnableFallingTrig_32_63>:
{
 8006d88:	b480      	push	{r7}
 8006d8a:	b083      	sub	sp, #12
 8006d8c:	af00      	add	r7, sp, #0
 8006d8e:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->FTSR2, ExtiLine);
 8006d90:	4b05      	ldr	r3, [pc, #20]	; (8006da8 <LL_EXTI_EnableFallingTrig_32_63+0x20>)
 8006d92:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006d94:	4904      	ldr	r1, [pc, #16]	; (8006da8 <LL_EXTI_EnableFallingTrig_32_63+0x20>)
 8006d96:	687b      	ldr	r3, [r7, #4]
 8006d98:	4313      	orrs	r3, r2
 8006d9a:	62cb      	str	r3, [r1, #44]	; 0x2c
}
 8006d9c:	bf00      	nop
 8006d9e:	370c      	adds	r7, #12
 8006da0:	46bd      	mov	sp, r7
 8006da2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006da6:	4770      	bx	lr
 8006da8:	40010400 	.word	0x40010400

08006dac <LL_EXTI_DisableFallingTrig_0_31>:
{
 8006dac:	b480      	push	{r7}
 8006dae:	b083      	sub	sp, #12
 8006db0:	af00      	add	r7, sp, #0
 8006db2:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->FTSR1, ExtiLine);
 8006db4:	4b06      	ldr	r3, [pc, #24]	; (8006dd0 <LL_EXTI_DisableFallingTrig_0_31+0x24>)
 8006db6:	68da      	ldr	r2, [r3, #12]
 8006db8:	687b      	ldr	r3, [r7, #4]
 8006dba:	43db      	mvns	r3, r3
 8006dbc:	4904      	ldr	r1, [pc, #16]	; (8006dd0 <LL_EXTI_DisableFallingTrig_0_31+0x24>)
 8006dbe:	4013      	ands	r3, r2
 8006dc0:	60cb      	str	r3, [r1, #12]
}
 8006dc2:	bf00      	nop
 8006dc4:	370c      	adds	r7, #12
 8006dc6:	46bd      	mov	sp, r7
 8006dc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006dcc:	4770      	bx	lr
 8006dce:	bf00      	nop
 8006dd0:	40010400 	.word	0x40010400

08006dd4 <LL_EXTI_DisableFallingTrig_32_63>:
{
 8006dd4:	b480      	push	{r7}
 8006dd6:	b083      	sub	sp, #12
 8006dd8:	af00      	add	r7, sp, #0
 8006dda:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->FTSR2, ExtiLine);
 8006ddc:	4b06      	ldr	r3, [pc, #24]	; (8006df8 <LL_EXTI_DisableFallingTrig_32_63+0x24>)
 8006dde:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006de0:	687b      	ldr	r3, [r7, #4]
 8006de2:	43db      	mvns	r3, r3
 8006de4:	4904      	ldr	r1, [pc, #16]	; (8006df8 <LL_EXTI_DisableFallingTrig_32_63+0x24>)
 8006de6:	4013      	ands	r3, r2
 8006de8:	62cb      	str	r3, [r1, #44]	; 0x2c
}
 8006dea:	bf00      	nop
 8006dec:	370c      	adds	r7, #12
 8006dee:	46bd      	mov	sp, r7
 8006df0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006df4:	4770      	bx	lr
 8006df6:	bf00      	nop
 8006df8:	40010400 	.word	0x40010400

08006dfc <LL_EXTI_ClearFlag_0_31>:
{
 8006dfc:	b480      	push	{r7}
 8006dfe:	b083      	sub	sp, #12
 8006e00:	af00      	add	r7, sp, #0
 8006e02:	6078      	str	r0, [r7, #4]
  WRITE_REG(EXTI->PR1, ExtiLine);
 8006e04:	4a04      	ldr	r2, [pc, #16]	; (8006e18 <LL_EXTI_ClearFlag_0_31+0x1c>)
 8006e06:	687b      	ldr	r3, [r7, #4]
 8006e08:	6153      	str	r3, [r2, #20]
}
 8006e0a:	bf00      	nop
 8006e0c:	370c      	adds	r7, #12
 8006e0e:	46bd      	mov	sp, r7
 8006e10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e14:	4770      	bx	lr
 8006e16:	bf00      	nop
 8006e18:	40010400 	.word	0x40010400

08006e1c <LL_EXTI_ClearFlag_32_63>:
  *         @arg @ref LL_EXTI_LINE_41
  * @note   (*): Available in some devices
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_ClearFlag_32_63(uint32_t ExtiLine)
{
 8006e1c:	b480      	push	{r7}
 8006e1e:	b083      	sub	sp, #12
 8006e20:	af00      	add	r7, sp, #0
 8006e22:	6078      	str	r0, [r7, #4]
  WRITE_REG(EXTI->PR2, ExtiLine);
 8006e24:	4a04      	ldr	r2, [pc, #16]	; (8006e38 <LL_EXTI_ClearFlag_32_63+0x1c>)
 8006e26:	687b      	ldr	r3, [r7, #4]
 8006e28:	6353      	str	r3, [r2, #52]	; 0x34
}
 8006e2a:	bf00      	nop
 8006e2c:	370c      	adds	r7, #12
 8006e2e:	46bd      	mov	sp, r7
 8006e30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e34:	4770      	bx	lr
 8006e36:	bf00      	nop
 8006e38:	40010400 	.word	0x40010400

08006e3c <HAL_COMP_Init>:
  *         To unlock the configuration, perform a system reset.
  * @param  hcomp  COMP handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_COMP_Init(COMP_HandleTypeDef *hcomp)
{
 8006e3c:	b580      	push	{r7, lr}
 8006e3e:	b088      	sub	sp, #32
 8006e40:	af00      	add	r7, sp, #0
 8006e42:	6078      	str	r0, [r7, #4]
  uint32_t tmp_csr;
  uint32_t exti_line;
  uint32_t comp_voltage_scaler_initialized; /* Value "0" if comparator voltage scaler is not initialized */
  __IO uint32_t wait_loop_index = 0UL;
 8006e44:	2300      	movs	r3, #0
 8006e46:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef status = HAL_OK;
 8006e48:	2300      	movs	r3, #0
 8006e4a:	77fb      	strb	r3, [r7, #31]

  /* Check the COMP handle allocation and lock status */
  if(hcomp == NULL)
 8006e4c:	687b      	ldr	r3, [r7, #4]
 8006e4e:	2b00      	cmp	r3, #0
 8006e50:	d102      	bne.n	8006e58 <HAL_COMP_Init+0x1c>
  {
    status = HAL_ERROR;
 8006e52:	2301      	movs	r3, #1
 8006e54:	77fb      	strb	r3, [r7, #31]
 8006e56:	e180      	b.n	800715a <HAL_COMP_Init+0x31e>
  }
  else if(__HAL_COMP_IS_LOCKED(hcomp))
 8006e58:	687b      	ldr	r3, [r7, #4]
 8006e5a:	681b      	ldr	r3, [r3, #0]
 8006e5c:	681b      	ldr	r3, [r3, #0]
 8006e5e:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8006e62:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8006e66:	d102      	bne.n	8006e6e <HAL_COMP_Init+0x32>
  {
    status = HAL_ERROR;
 8006e68:	2301      	movs	r3, #1
 8006e6a:	77fb      	strb	r3, [r7, #31]
 8006e6c:	e175      	b.n	800715a <HAL_COMP_Init+0x31e>
    assert_param(IS_COMP_OUTPUTPOL(hcomp->Init.OutputPol));
    assert_param(IS_COMP_HYSTERESIS(hcomp->Init.Hysteresis));
    assert_param(IS_COMP_BLANKINGSRC_INSTANCE(hcomp->Instance, hcomp->Init.BlankingSrce));
    assert_param(IS_COMP_TRIGGERMODE(hcomp->Init.TriggerMode));

    if(hcomp->State == HAL_COMP_STATE_RESET)
 8006e6e:	687b      	ldr	r3, [r7, #4]
 8006e70:	7f5b      	ldrb	r3, [r3, #29]
 8006e72:	b2db      	uxtb	r3, r3
 8006e74:	2b00      	cmp	r3, #0
 8006e76:	d108      	bne.n	8006e8a <HAL_COMP_Init+0x4e>
    {
      /* Allocate lock resource and initialize it */
      hcomp->Lock = HAL_UNLOCKED;
 8006e78:	687b      	ldr	r3, [r7, #4]
 8006e7a:	2200      	movs	r2, #0
 8006e7c:	771a      	strb	r2, [r3, #28]

      /* Set COMP error code to none */
      COMP_CLEAR_ERRORCODE(hcomp);
 8006e7e:	687b      	ldr	r3, [r7, #4]
 8006e80:	2200      	movs	r2, #0
 8006e82:	621a      	str	r2, [r3, #32]
#else
      /* Init the low level hardware */
      /* Note: Internal control clock of the comparators must                 */
      /*       be enabled in "HAL_COMP_MspInit()"                             */
      /*       using "__HAL_RCC_SYSCFG_CLK_ENABLE()".                         */
      HAL_COMP_MspInit(hcomp);
 8006e84:	6878      	ldr	r0, [r7, #4]
 8006e86:	f7fd f8dd 	bl	8004044 <HAL_COMP_MspInit>
#endif /* USE_HAL_COMP_REGISTER_CALLBACKS */
    }

    /* Memorize voltage scaler state before initialization */
    comp_voltage_scaler_initialized = READ_BIT(hcomp->Instance->CSR, COMP_CSR_SCALEN);
 8006e8a:	687b      	ldr	r3, [r7, #4]
 8006e8c:	681b      	ldr	r3, [r3, #0]
 8006e8e:	681b      	ldr	r3, [r3, #0]
 8006e90:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8006e94:	61bb      	str	r3, [r7, #24]

    /* Set COMP parameters */
    tmp_csr = (  hcomp->Init.InputMinus
 8006e96:	687b      	ldr	r3, [r7, #4]
 8006e98:	689a      	ldr	r2, [r3, #8]
               | hcomp->Init.InputPlus
 8006e9a:	687b      	ldr	r3, [r7, #4]
 8006e9c:	685b      	ldr	r3, [r3, #4]
 8006e9e:	431a      	orrs	r2, r3
               | hcomp->Init.BlankingSrce
 8006ea0:	687b      	ldr	r3, [r7, #4]
 8006ea2:	695b      	ldr	r3, [r3, #20]
 8006ea4:	431a      	orrs	r2, r3
               | hcomp->Init.Hysteresis
 8006ea6:	687b      	ldr	r3, [r7, #4]
 8006ea8:	68db      	ldr	r3, [r3, #12]
 8006eaa:	431a      	orrs	r2, r3
               | hcomp->Init.OutputPol
 8006eac:	687b      	ldr	r3, [r7, #4]
 8006eae:	691b      	ldr	r3, [r3, #16]
    tmp_csr = (  hcomp->Init.InputMinus
 8006eb0:	4313      	orrs	r3, r2
 8006eb2:	617b      	str	r3, [r7, #20]
              );

    /* Set parameters in COMP register */
    /* Note: Update all bits except read-only, lock and enable bits */
    MODIFY_REG(hcomp->Instance->CSR,
 8006eb4:	687b      	ldr	r3, [r7, #4]
 8006eb6:	681b      	ldr	r3, [r3, #0]
 8006eb8:	681a      	ldr	r2, [r3, #0]
 8006eba:	4b98      	ldr	r3, [pc, #608]	; (800711c <HAL_COMP_Init+0x2e0>)
 8006ebc:	4013      	ands	r3, r2
 8006ebe:	687a      	ldr	r2, [r7, #4]
 8006ec0:	6812      	ldr	r2, [r2, #0]
 8006ec2:	6979      	ldr	r1, [r7, #20]
 8006ec4:	430b      	orrs	r3, r1
 8006ec6:	6013      	str	r3, [r2, #0]
               tmp_csr
              );

    /* Delay for COMP scaler bridge voltage stabilization */
    /* Apply the delay if voltage scaler bridge is required and not already enabled */
    if ((READ_BIT(hcomp->Instance->CSR, COMP_CSR_SCALEN) != 0UL) &&
 8006ec8:	687b      	ldr	r3, [r7, #4]
 8006eca:	681b      	ldr	r3, [r3, #0]
 8006ecc:	681b      	ldr	r3, [r3, #0]
 8006ece:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8006ed2:	2b00      	cmp	r3, #0
 8006ed4:	d015      	beq.n	8006f02 <HAL_COMP_Init+0xc6>
 8006ed6:	69bb      	ldr	r3, [r7, #24]
 8006ed8:	2b00      	cmp	r3, #0
 8006eda:	d112      	bne.n	8006f02 <HAL_COMP_Init+0xc6>
    {
      /* Wait loop initialization and execution */
      /* Note: Variable divided by 2 to compensate partially              */
      /*       CPU processing cycles, scaling in us split to not          */
      /*       exceed 32 bits register capacity and handle low frequency. */
      wait_loop_index = ((COMP_DELAY_VOLTAGE_SCALER_STAB_US / 10UL) * (SystemCoreClock / (100000UL * 2UL)));
 8006edc:	4b90      	ldr	r3, [pc, #576]	; (8007120 <HAL_COMP_Init+0x2e4>)
 8006ede:	681b      	ldr	r3, [r3, #0]
 8006ee0:	099b      	lsrs	r3, r3, #6
 8006ee2:	4a90      	ldr	r2, [pc, #576]	; (8007124 <HAL_COMP_Init+0x2e8>)
 8006ee4:	fba2 2303 	umull	r2, r3, r2, r3
 8006ee8:	099a      	lsrs	r2, r3, #6
 8006eea:	4613      	mov	r3, r2
 8006eec:	009b      	lsls	r3, r3, #2
 8006eee:	4413      	add	r3, r2
 8006ef0:	009b      	lsls	r3, r3, #2
 8006ef2:	60fb      	str	r3, [r7, #12]
      while(wait_loop_index != 0UL)
 8006ef4:	e002      	b.n	8006efc <HAL_COMP_Init+0xc0>
      {
        wait_loop_index--;
 8006ef6:	68fb      	ldr	r3, [r7, #12]
 8006ef8:	3b01      	subs	r3, #1
 8006efa:	60fb      	str	r3, [r7, #12]
      while(wait_loop_index != 0UL)
 8006efc:	68fb      	ldr	r3, [r7, #12]
 8006efe:	2b00      	cmp	r3, #0
 8006f00:	d1f9      	bne.n	8006ef6 <HAL_COMP_Init+0xba>
      }
    }

    /* Get the EXTI line corresponding to the selected COMP instance */
    exti_line = COMP_GET_EXTI_LINE(hcomp->Instance);
 8006f02:	687b      	ldr	r3, [r7, #4]
 8006f04:	681b      	ldr	r3, [r3, #0]
 8006f06:	4a88      	ldr	r2, [pc, #544]	; (8007128 <HAL_COMP_Init+0x2ec>)
 8006f08:	4293      	cmp	r3, r2
 8006f0a:	d028      	beq.n	8006f5e <HAL_COMP_Init+0x122>
 8006f0c:	687b      	ldr	r3, [r7, #4]
 8006f0e:	681b      	ldr	r3, [r3, #0]
 8006f10:	4a86      	ldr	r2, [pc, #536]	; (800712c <HAL_COMP_Init+0x2f0>)
 8006f12:	4293      	cmp	r3, r2
 8006f14:	d020      	beq.n	8006f58 <HAL_COMP_Init+0x11c>
 8006f16:	687b      	ldr	r3, [r7, #4]
 8006f18:	681b      	ldr	r3, [r3, #0]
 8006f1a:	4a85      	ldr	r2, [pc, #532]	; (8007130 <HAL_COMP_Init+0x2f4>)
 8006f1c:	4293      	cmp	r3, r2
 8006f1e:	d018      	beq.n	8006f52 <HAL_COMP_Init+0x116>
 8006f20:	687b      	ldr	r3, [r7, #4]
 8006f22:	681b      	ldr	r3, [r3, #0]
 8006f24:	4a83      	ldr	r2, [pc, #524]	; (8007134 <HAL_COMP_Init+0x2f8>)
 8006f26:	4293      	cmp	r3, r2
 8006f28:	d010      	beq.n	8006f4c <HAL_COMP_Init+0x110>
 8006f2a:	687b      	ldr	r3, [r7, #4]
 8006f2c:	681b      	ldr	r3, [r3, #0]
 8006f2e:	4a82      	ldr	r2, [pc, #520]	; (8007138 <HAL_COMP_Init+0x2fc>)
 8006f30:	4293      	cmp	r3, r2
 8006f32:	d008      	beq.n	8006f46 <HAL_COMP_Init+0x10a>
 8006f34:	687b      	ldr	r3, [r7, #4]
 8006f36:	681b      	ldr	r3, [r3, #0]
 8006f38:	4a80      	ldr	r2, [pc, #512]	; (800713c <HAL_COMP_Init+0x300>)
 8006f3a:	4293      	cmp	r3, r2
 8006f3c:	d101      	bne.n	8006f42 <HAL_COMP_Init+0x106>
 8006f3e:	2301      	movs	r3, #1
 8006f40:	e00f      	b.n	8006f62 <HAL_COMP_Init+0x126>
 8006f42:	2302      	movs	r3, #2
 8006f44:	e00d      	b.n	8006f62 <HAL_COMP_Init+0x126>
 8006f46:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8006f4a:	e00a      	b.n	8006f62 <HAL_COMP_Init+0x126>
 8006f4c:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8006f50:	e007      	b.n	8006f62 <HAL_COMP_Init+0x126>
 8006f52:	f04f 5300 	mov.w	r3, #536870912	; 0x20000000
 8006f56:	e004      	b.n	8006f62 <HAL_COMP_Init+0x126>
 8006f58:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8006f5c:	e001      	b.n	8006f62 <HAL_COMP_Init+0x126>
 8006f5e:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8006f62:	613b      	str	r3, [r7, #16]

    /* Manage EXTI settings */
    if((hcomp->Init.TriggerMode & (COMP_EXTI_IT | COMP_EXTI_EVENT)) != 0UL)
 8006f64:	687b      	ldr	r3, [r7, #4]
 8006f66:	699b      	ldr	r3, [r3, #24]
 8006f68:	f003 0303 	and.w	r3, r3, #3
 8006f6c:	2b00      	cmp	r3, #0
 8006f6e:	f000 80b6 	beq.w	80070de <HAL_COMP_Init+0x2a2>
    {
      /* Configure EXTI rising edge */
      if((hcomp->Init.TriggerMode & COMP_EXTI_RISING) != 0UL)
 8006f72:	687b      	ldr	r3, [r7, #4]
 8006f74:	699b      	ldr	r3, [r3, #24]
 8006f76:	f003 0310 	and.w	r3, r3, #16
 8006f7a:	2b00      	cmp	r3, #0
 8006f7c:	d011      	beq.n	8006fa2 <HAL_COMP_Init+0x166>
      {
#if defined(STM32G474xx) || defined(STM32G484xx) || defined(STM32G473xx) || defined(STM32G483xx)
        if((hcomp->Instance == COMP6) || (hcomp->Instance == COMP7))
 8006f7e:	687b      	ldr	r3, [r7, #4]
 8006f80:	681b      	ldr	r3, [r3, #0]
 8006f82:	4a6e      	ldr	r2, [pc, #440]	; (800713c <HAL_COMP_Init+0x300>)
 8006f84:	4293      	cmp	r3, r2
 8006f86:	d004      	beq.n	8006f92 <HAL_COMP_Init+0x156>
 8006f88:	687b      	ldr	r3, [r7, #4]
 8006f8a:	681b      	ldr	r3, [r3, #0]
 8006f8c:	4a6c      	ldr	r2, [pc, #432]	; (8007140 <HAL_COMP_Init+0x304>)
 8006f8e:	4293      	cmp	r3, r2
 8006f90:	d103      	bne.n	8006f9a <HAL_COMP_Init+0x15e>
        {
          LL_EXTI_EnableRisingTrig_32_63(exti_line);
 8006f92:	6938      	ldr	r0, [r7, #16]
 8006f94:	f7ff feac 	bl	8006cf0 <LL_EXTI_EnableRisingTrig_32_63>
 8006f98:	e014      	b.n	8006fc4 <HAL_COMP_Init+0x188>
        }
        else
        {
          LL_EXTI_EnableRisingTrig_0_31(exti_line);
 8006f9a:	6938      	ldr	r0, [r7, #16]
 8006f9c:	f7ff fe96 	bl	8006ccc <LL_EXTI_EnableRisingTrig_0_31>
 8006fa0:	e010      	b.n	8006fc4 <HAL_COMP_Init+0x188>
#endif
      }
      else
      {
#if defined(STM32G474xx) || defined(STM32G484xx) || defined(STM32G473xx) || defined(STM32G483xx)
        if((hcomp->Instance == COMP6) || (hcomp->Instance == COMP7))
 8006fa2:	687b      	ldr	r3, [r7, #4]
 8006fa4:	681b      	ldr	r3, [r3, #0]
 8006fa6:	4a65      	ldr	r2, [pc, #404]	; (800713c <HAL_COMP_Init+0x300>)
 8006fa8:	4293      	cmp	r3, r2
 8006faa:	d004      	beq.n	8006fb6 <HAL_COMP_Init+0x17a>
 8006fac:	687b      	ldr	r3, [r7, #4]
 8006fae:	681b      	ldr	r3, [r3, #0]
 8006fb0:	4a63      	ldr	r2, [pc, #396]	; (8007140 <HAL_COMP_Init+0x304>)
 8006fb2:	4293      	cmp	r3, r2
 8006fb4:	d103      	bne.n	8006fbe <HAL_COMP_Init+0x182>
        {
          LL_EXTI_DisableRisingTrig_32_63(exti_line);
 8006fb6:	6938      	ldr	r0, [r7, #16]
 8006fb8:	f7ff fec0 	bl	8006d3c <LL_EXTI_DisableRisingTrig_32_63>
 8006fbc:	e002      	b.n	8006fc4 <HAL_COMP_Init+0x188>
        }
        else
        {
          LL_EXTI_DisableRisingTrig_0_31(exti_line);
 8006fbe:	6938      	ldr	r0, [r7, #16]
 8006fc0:	f7ff fea8 	bl	8006d14 <LL_EXTI_DisableRisingTrig_0_31>
        LL_EXTI_DisableRisingTrig_0_31(exti_line);
#endif
      }

      /* Configure EXTI falling edge */
      if((hcomp->Init.TriggerMode & COMP_EXTI_FALLING) != 0UL)
 8006fc4:	687b      	ldr	r3, [r7, #4]
 8006fc6:	699b      	ldr	r3, [r3, #24]
 8006fc8:	f003 0320 	and.w	r3, r3, #32
 8006fcc:	2b00      	cmp	r3, #0
 8006fce:	d011      	beq.n	8006ff4 <HAL_COMP_Init+0x1b8>
      {
#if defined(STM32G474xx) || defined(STM32G484xx) || defined(STM32G473xx) || defined(STM32G483xx)
        if((hcomp->Instance == COMP6) || (hcomp->Instance == COMP7))
 8006fd0:	687b      	ldr	r3, [r7, #4]
 8006fd2:	681b      	ldr	r3, [r3, #0]
 8006fd4:	4a59      	ldr	r2, [pc, #356]	; (800713c <HAL_COMP_Init+0x300>)
 8006fd6:	4293      	cmp	r3, r2
 8006fd8:	d004      	beq.n	8006fe4 <HAL_COMP_Init+0x1a8>
 8006fda:	687b      	ldr	r3, [r7, #4]
 8006fdc:	681b      	ldr	r3, [r3, #0]
 8006fde:	4a58      	ldr	r2, [pc, #352]	; (8007140 <HAL_COMP_Init+0x304>)
 8006fe0:	4293      	cmp	r3, r2
 8006fe2:	d103      	bne.n	8006fec <HAL_COMP_Init+0x1b0>
        {
          LL_EXTI_EnableFallingTrig_32_63(exti_line);
 8006fe4:	6938      	ldr	r0, [r7, #16]
 8006fe6:	f7ff fecf 	bl	8006d88 <LL_EXTI_EnableFallingTrig_32_63>
 8006fea:	e014      	b.n	8007016 <HAL_COMP_Init+0x1da>
        }
        else
        {
          LL_EXTI_EnableFallingTrig_0_31(exti_line);
 8006fec:	6938      	ldr	r0, [r7, #16]
 8006fee:	f7ff feb9 	bl	8006d64 <LL_EXTI_EnableFallingTrig_0_31>
 8006ff2:	e010      	b.n	8007016 <HAL_COMP_Init+0x1da>
#endif
      }
      else
      {
#if defined(STM32G474xx) || defined(STM32G484xx) || defined(STM32G473xx) || defined(STM32G483xx)
        if((hcomp->Instance == COMP6) || (hcomp->Instance == COMP7))
 8006ff4:	687b      	ldr	r3, [r7, #4]
 8006ff6:	681b      	ldr	r3, [r3, #0]
 8006ff8:	4a50      	ldr	r2, [pc, #320]	; (800713c <HAL_COMP_Init+0x300>)
 8006ffa:	4293      	cmp	r3, r2
 8006ffc:	d004      	beq.n	8007008 <HAL_COMP_Init+0x1cc>
 8006ffe:	687b      	ldr	r3, [r7, #4]
 8007000:	681b      	ldr	r3, [r3, #0]
 8007002:	4a4f      	ldr	r2, [pc, #316]	; (8007140 <HAL_COMP_Init+0x304>)
 8007004:	4293      	cmp	r3, r2
 8007006:	d103      	bne.n	8007010 <HAL_COMP_Init+0x1d4>
        {
          LL_EXTI_DisableFallingTrig_32_63(exti_line);
 8007008:	6938      	ldr	r0, [r7, #16]
 800700a:	f7ff fee3 	bl	8006dd4 <LL_EXTI_DisableFallingTrig_32_63>
 800700e:	e002      	b.n	8007016 <HAL_COMP_Init+0x1da>
        }
        else
        {
          LL_EXTI_DisableFallingTrig_0_31(exti_line);
 8007010:	6938      	ldr	r0, [r7, #16]
 8007012:	f7ff fecb 	bl	8006dac <LL_EXTI_DisableFallingTrig_0_31>
#endif
      }

      /* Clear COMP EXTI pending bit (if any) */
#if defined(STM32G474xx) || defined(STM32G484xx) || defined(STM32G473xx) || defined(STM32G483xx)
      if((hcomp->Instance == COMP6) || (hcomp->Instance == COMP7))
 8007016:	687b      	ldr	r3, [r7, #4]
 8007018:	681b      	ldr	r3, [r3, #0]
 800701a:	4a48      	ldr	r2, [pc, #288]	; (800713c <HAL_COMP_Init+0x300>)
 800701c:	4293      	cmp	r3, r2
 800701e:	d004      	beq.n	800702a <HAL_COMP_Init+0x1ee>
 8007020:	687b      	ldr	r3, [r7, #4]
 8007022:	681b      	ldr	r3, [r3, #0]
 8007024:	4a46      	ldr	r2, [pc, #280]	; (8007140 <HAL_COMP_Init+0x304>)
 8007026:	4293      	cmp	r3, r2
 8007028:	d103      	bne.n	8007032 <HAL_COMP_Init+0x1f6>
      {
        LL_EXTI_ClearFlag_32_63(exti_line);
 800702a:	6938      	ldr	r0, [r7, #16]
 800702c:	f7ff fef6 	bl	8006e1c <LL_EXTI_ClearFlag_32_63>
 8007030:	e002      	b.n	8007038 <HAL_COMP_Init+0x1fc>
      }
      else
      {
        LL_EXTI_ClearFlag_0_31(exti_line);
 8007032:	6938      	ldr	r0, [r7, #16]
 8007034:	f7ff fee2 	bl	8006dfc <LL_EXTI_ClearFlag_0_31>
#else
      LL_EXTI_ClearFlag_0_31(exti_line);
#endif

      /* Configure EXTI event mode */
      if((hcomp->Init.TriggerMode & COMP_EXTI_EVENT) != 0UL)
 8007038:	687b      	ldr	r3, [r7, #4]
 800703a:	699b      	ldr	r3, [r3, #24]
 800703c:	f003 0302 	and.w	r3, r3, #2
 8007040:	2b00      	cmp	r3, #0
 8007042:	d011      	beq.n	8007068 <HAL_COMP_Init+0x22c>
      {
#if defined(STM32G474xx) || defined(STM32G484xx) || defined(STM32G473xx) || defined(STM32G483xx)
        if((hcomp->Instance == COMP6) || (hcomp->Instance == COMP7))
 8007044:	687b      	ldr	r3, [r7, #4]
 8007046:	681b      	ldr	r3, [r3, #0]
 8007048:	4a3c      	ldr	r2, [pc, #240]	; (800713c <HAL_COMP_Init+0x300>)
 800704a:	4293      	cmp	r3, r2
 800704c:	d004      	beq.n	8007058 <HAL_COMP_Init+0x21c>
 800704e:	687b      	ldr	r3, [r7, #4]
 8007050:	681b      	ldr	r3, [r3, #0]
 8007052:	4a3b      	ldr	r2, [pc, #236]	; (8007140 <HAL_COMP_Init+0x304>)
 8007054:	4293      	cmp	r3, r2
 8007056:	d103      	bne.n	8007060 <HAL_COMP_Init+0x224>
        {
          LL_EXTI_EnableEvent_32_63(exti_line);
 8007058:	6938      	ldr	r0, [r7, #16]
 800705a:	f7ff fdfd 	bl	8006c58 <LL_EXTI_EnableEvent_32_63>
 800705e:	e014      	b.n	800708a <HAL_COMP_Init+0x24e>
        }
        else
        {
          LL_EXTI_EnableEvent_0_31(exti_line);
 8007060:	6938      	ldr	r0, [r7, #16]
 8007062:	f7ff fde7 	bl	8006c34 <LL_EXTI_EnableEvent_0_31>
 8007066:	e010      	b.n	800708a <HAL_COMP_Init+0x24e>
#endif
      }
      else
      {
#if defined(STM32G474xx) || defined(STM32G484xx) || defined(STM32G473xx) || defined(STM32G483xx)
        if((hcomp->Instance == COMP6) || (hcomp->Instance == COMP7))
 8007068:	687b      	ldr	r3, [r7, #4]
 800706a:	681b      	ldr	r3, [r3, #0]
 800706c:	4a33      	ldr	r2, [pc, #204]	; (800713c <HAL_COMP_Init+0x300>)
 800706e:	4293      	cmp	r3, r2
 8007070:	d004      	beq.n	800707c <HAL_COMP_Init+0x240>
 8007072:	687b      	ldr	r3, [r7, #4]
 8007074:	681b      	ldr	r3, [r3, #0]
 8007076:	4a32      	ldr	r2, [pc, #200]	; (8007140 <HAL_COMP_Init+0x304>)
 8007078:	4293      	cmp	r3, r2
 800707a:	d103      	bne.n	8007084 <HAL_COMP_Init+0x248>
        {
          LL_EXTI_DisableEvent_32_63(exti_line);
 800707c:	6938      	ldr	r0, [r7, #16]
 800707e:	f7ff fe11 	bl	8006ca4 <LL_EXTI_DisableEvent_32_63>
 8007082:	e002      	b.n	800708a <HAL_COMP_Init+0x24e>
        }
        else
        {
          LL_EXTI_DisableEvent_0_31(exti_line);
 8007084:	6938      	ldr	r0, [r7, #16]
 8007086:	f7ff fdf9 	bl	8006c7c <LL_EXTI_DisableEvent_0_31>
        LL_EXTI_DisableEvent_0_31(exti_line);
#endif
      }

      /* Configure EXTI interrupt mode */
      if((hcomp->Init.TriggerMode & COMP_EXTI_IT) != 0UL)
 800708a:	687b      	ldr	r3, [r7, #4]
 800708c:	699b      	ldr	r3, [r3, #24]
 800708e:	f003 0301 	and.w	r3, r3, #1
 8007092:	2b00      	cmp	r3, #0
 8007094:	d011      	beq.n	80070ba <HAL_COMP_Init+0x27e>
      {
#if defined(STM32G474xx) || defined(STM32G484xx) || defined(STM32G473xx) || defined(STM32G483xx)
        if((hcomp->Instance == COMP6) || (hcomp->Instance == COMP7))
 8007096:	687b      	ldr	r3, [r7, #4]
 8007098:	681b      	ldr	r3, [r3, #0]
 800709a:	4a28      	ldr	r2, [pc, #160]	; (800713c <HAL_COMP_Init+0x300>)
 800709c:	4293      	cmp	r3, r2
 800709e:	d004      	beq.n	80070aa <HAL_COMP_Init+0x26e>
 80070a0:	687b      	ldr	r3, [r7, #4]
 80070a2:	681b      	ldr	r3, [r3, #0]
 80070a4:	4a26      	ldr	r2, [pc, #152]	; (8007140 <HAL_COMP_Init+0x304>)
 80070a6:	4293      	cmp	r3, r2
 80070a8:	d103      	bne.n	80070b2 <HAL_COMP_Init+0x276>
        {
          LL_EXTI_EnableIT_32_63(exti_line);
 80070aa:	6938      	ldr	r0, [r7, #16]
 80070ac:	f7ff fd88 	bl	8006bc0 <LL_EXTI_EnableIT_32_63>
 80070b0:	e04b      	b.n	800714a <HAL_COMP_Init+0x30e>
        }
        else
        {
          LL_EXTI_EnableIT_0_31(exti_line);
 80070b2:	6938      	ldr	r0, [r7, #16]
 80070b4:	f7ff fd72 	bl	8006b9c <LL_EXTI_EnableIT_0_31>
 80070b8:	e047      	b.n	800714a <HAL_COMP_Init+0x30e>
#endif
      }
      else
      {
#if defined(STM32G474xx) || defined(STM32G484xx) || defined(STM32G473xx) || defined(STM32G483xx)
        if((hcomp->Instance == COMP6) || (hcomp->Instance == COMP7))
 80070ba:	687b      	ldr	r3, [r7, #4]
 80070bc:	681b      	ldr	r3, [r3, #0]
 80070be:	4a1f      	ldr	r2, [pc, #124]	; (800713c <HAL_COMP_Init+0x300>)
 80070c0:	4293      	cmp	r3, r2
 80070c2:	d004      	beq.n	80070ce <HAL_COMP_Init+0x292>
 80070c4:	687b      	ldr	r3, [r7, #4]
 80070c6:	681b      	ldr	r3, [r3, #0]
 80070c8:	4a1d      	ldr	r2, [pc, #116]	; (8007140 <HAL_COMP_Init+0x304>)
 80070ca:	4293      	cmp	r3, r2
 80070cc:	d103      	bne.n	80070d6 <HAL_COMP_Init+0x29a>
        {
          LL_EXTI_DisableIT_32_63(exti_line);
 80070ce:	6938      	ldr	r0, [r7, #16]
 80070d0:	f7ff fd9c 	bl	8006c0c <LL_EXTI_DisableIT_32_63>
 80070d4:	e039      	b.n	800714a <HAL_COMP_Init+0x30e>
        }
        else
        {
          LL_EXTI_DisableIT_0_31(exti_line);
 80070d6:	6938      	ldr	r0, [r7, #16]
 80070d8:	f7ff fd84 	bl	8006be4 <LL_EXTI_DisableIT_0_31>
 80070dc:	e035      	b.n	800714a <HAL_COMP_Init+0x30e>
    }
    else
    {
      /* Disable EXTI event mode */
#if defined(STM32G474xx) || defined(STM32G484xx) || defined(STM32G473xx) || defined(STM32G483xx)
      if((hcomp->Instance == COMP6) || (hcomp->Instance == COMP7))
 80070de:	687b      	ldr	r3, [r7, #4]
 80070e0:	681b      	ldr	r3, [r3, #0]
 80070e2:	4a16      	ldr	r2, [pc, #88]	; (800713c <HAL_COMP_Init+0x300>)
 80070e4:	4293      	cmp	r3, r2
 80070e6:	d004      	beq.n	80070f2 <HAL_COMP_Init+0x2b6>
 80070e8:	687b      	ldr	r3, [r7, #4]
 80070ea:	681b      	ldr	r3, [r3, #0]
 80070ec:	4a14      	ldr	r2, [pc, #80]	; (8007140 <HAL_COMP_Init+0x304>)
 80070ee:	4293      	cmp	r3, r2
 80070f0:	d103      	bne.n	80070fa <HAL_COMP_Init+0x2be>
      {
        LL_EXTI_DisableEvent_32_63(exti_line);
 80070f2:	6938      	ldr	r0, [r7, #16]
 80070f4:	f7ff fdd6 	bl	8006ca4 <LL_EXTI_DisableEvent_32_63>
 80070f8:	e002      	b.n	8007100 <HAL_COMP_Init+0x2c4>
      }
      else
      {
        LL_EXTI_DisableEvent_0_31(exti_line);
 80070fa:	6938      	ldr	r0, [r7, #16]
 80070fc:	f7ff fdbe 	bl	8006c7c <LL_EXTI_DisableEvent_0_31>
      LL_EXTI_DisableEvent_0_31(exti_line);
#endif

      /* Disable EXTI interrupt mode */
#if defined(STM32G474xx) || defined(STM32G484xx) || defined(STM32G473xx) || defined(STM32G483xx)
      if((hcomp->Instance == COMP6) || (hcomp->Instance == COMP7))
 8007100:	687b      	ldr	r3, [r7, #4]
 8007102:	681b      	ldr	r3, [r3, #0]
 8007104:	4a0d      	ldr	r2, [pc, #52]	; (800713c <HAL_COMP_Init+0x300>)
 8007106:	4293      	cmp	r3, r2
 8007108:	d004      	beq.n	8007114 <HAL_COMP_Init+0x2d8>
 800710a:	687b      	ldr	r3, [r7, #4]
 800710c:	681b      	ldr	r3, [r3, #0]
 800710e:	4a0c      	ldr	r2, [pc, #48]	; (8007140 <HAL_COMP_Init+0x304>)
 8007110:	4293      	cmp	r3, r2
 8007112:	d117      	bne.n	8007144 <HAL_COMP_Init+0x308>
      {
        LL_EXTI_DisableIT_32_63(exti_line);
 8007114:	6938      	ldr	r0, [r7, #16]
 8007116:	f7ff fd79 	bl	8006c0c <LL_EXTI_DisableIT_32_63>
 800711a:	e016      	b.n	800714a <HAL_COMP_Init+0x30e>
 800711c:	ff007e0f 	.word	0xff007e0f
 8007120:	20000200 	.word	0x20000200
 8007124:	053e2d63 	.word	0x053e2d63
 8007128:	40010200 	.word	0x40010200
 800712c:	40010204 	.word	0x40010204
 8007130:	40010208 	.word	0x40010208
 8007134:	4001020c 	.word	0x4001020c
 8007138:	40010210 	.word	0x40010210
 800713c:	40010214 	.word	0x40010214
 8007140:	40010218 	.word	0x40010218
      }
      else
      {
        LL_EXTI_DisableIT_0_31(exti_line);
 8007144:	6938      	ldr	r0, [r7, #16]
 8007146:	f7ff fd4d 	bl	8006be4 <LL_EXTI_DisableIT_0_31>
    }

    /* Set HAL COMP handle state */
    /* Note: Transition from state reset to state ready,                      */
    /*       otherwise (coming from state ready or busy) no state update.     */
    if (hcomp->State == HAL_COMP_STATE_RESET)
 800714a:	687b      	ldr	r3, [r7, #4]
 800714c:	7f5b      	ldrb	r3, [r3, #29]
 800714e:	b2db      	uxtb	r3, r3
 8007150:	2b00      	cmp	r3, #0
 8007152:	d102      	bne.n	800715a <HAL_COMP_Init+0x31e>
    {
      hcomp->State = HAL_COMP_STATE_READY;
 8007154:	687b      	ldr	r3, [r7, #4]
 8007156:	2201      	movs	r2, #1
 8007158:	775a      	strb	r2, [r3, #29]
    }
  }

  return status;
 800715a:	7ffb      	ldrb	r3, [r7, #31]
}
 800715c:	4618      	mov	r0, r3
 800715e:	3720      	adds	r7, #32
 8007160:	46bd      	mov	sp, r7
 8007162:	bd80      	pop	{r7, pc}

08007164 <__NVIC_SetPriorityGrouping>:
{
 8007164:	b480      	push	{r7}
 8007166:	b085      	sub	sp, #20
 8007168:	af00      	add	r7, sp, #0
 800716a:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800716c:	687b      	ldr	r3, [r7, #4]
 800716e:	f003 0307 	and.w	r3, r3, #7
 8007172:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8007174:	4b0c      	ldr	r3, [pc, #48]	; (80071a8 <__NVIC_SetPriorityGrouping+0x44>)
 8007176:	68db      	ldr	r3, [r3, #12]
 8007178:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800717a:	68ba      	ldr	r2, [r7, #8]
 800717c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8007180:	4013      	ands	r3, r2
 8007182:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8007184:	68fb      	ldr	r3, [r7, #12]
 8007186:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8007188:	68bb      	ldr	r3, [r7, #8]
 800718a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800718c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8007190:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8007194:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8007196:	4a04      	ldr	r2, [pc, #16]	; (80071a8 <__NVIC_SetPriorityGrouping+0x44>)
 8007198:	68bb      	ldr	r3, [r7, #8]
 800719a:	60d3      	str	r3, [r2, #12]
}
 800719c:	bf00      	nop
 800719e:	3714      	adds	r7, #20
 80071a0:	46bd      	mov	sp, r7
 80071a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071a6:	4770      	bx	lr
 80071a8:	e000ed00 	.word	0xe000ed00

080071ac <__NVIC_GetPriorityGrouping>:
{
 80071ac:	b480      	push	{r7}
 80071ae:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80071b0:	4b04      	ldr	r3, [pc, #16]	; (80071c4 <__NVIC_GetPriorityGrouping+0x18>)
 80071b2:	68db      	ldr	r3, [r3, #12]
 80071b4:	0a1b      	lsrs	r3, r3, #8
 80071b6:	f003 0307 	and.w	r3, r3, #7
}
 80071ba:	4618      	mov	r0, r3
 80071bc:	46bd      	mov	sp, r7
 80071be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071c2:	4770      	bx	lr
 80071c4:	e000ed00 	.word	0xe000ed00

080071c8 <__NVIC_EnableIRQ>:
{
 80071c8:	b480      	push	{r7}
 80071ca:	b083      	sub	sp, #12
 80071cc:	af00      	add	r7, sp, #0
 80071ce:	4603      	mov	r3, r0
 80071d0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80071d2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80071d6:	2b00      	cmp	r3, #0
 80071d8:	db0b      	blt.n	80071f2 <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80071da:	79fb      	ldrb	r3, [r7, #7]
 80071dc:	f003 021f 	and.w	r2, r3, #31
 80071e0:	4907      	ldr	r1, [pc, #28]	; (8007200 <__NVIC_EnableIRQ+0x38>)
 80071e2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80071e6:	095b      	lsrs	r3, r3, #5
 80071e8:	2001      	movs	r0, #1
 80071ea:	fa00 f202 	lsl.w	r2, r0, r2
 80071ee:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 80071f2:	bf00      	nop
 80071f4:	370c      	adds	r7, #12
 80071f6:	46bd      	mov	sp, r7
 80071f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071fc:	4770      	bx	lr
 80071fe:	bf00      	nop
 8007200:	e000e100 	.word	0xe000e100

08007204 <__NVIC_SetPriority>:
{
 8007204:	b480      	push	{r7}
 8007206:	b083      	sub	sp, #12
 8007208:	af00      	add	r7, sp, #0
 800720a:	4603      	mov	r3, r0
 800720c:	6039      	str	r1, [r7, #0]
 800720e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8007210:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8007214:	2b00      	cmp	r3, #0
 8007216:	db0a      	blt.n	800722e <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8007218:	683b      	ldr	r3, [r7, #0]
 800721a:	b2da      	uxtb	r2, r3
 800721c:	490c      	ldr	r1, [pc, #48]	; (8007250 <__NVIC_SetPriority+0x4c>)
 800721e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8007222:	0112      	lsls	r2, r2, #4
 8007224:	b2d2      	uxtb	r2, r2
 8007226:	440b      	add	r3, r1
 8007228:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 800722c:	e00a      	b.n	8007244 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800722e:	683b      	ldr	r3, [r7, #0]
 8007230:	b2da      	uxtb	r2, r3
 8007232:	4908      	ldr	r1, [pc, #32]	; (8007254 <__NVIC_SetPriority+0x50>)
 8007234:	79fb      	ldrb	r3, [r7, #7]
 8007236:	f003 030f 	and.w	r3, r3, #15
 800723a:	3b04      	subs	r3, #4
 800723c:	0112      	lsls	r2, r2, #4
 800723e:	b2d2      	uxtb	r2, r2
 8007240:	440b      	add	r3, r1
 8007242:	761a      	strb	r2, [r3, #24]
}
 8007244:	bf00      	nop
 8007246:	370c      	adds	r7, #12
 8007248:	46bd      	mov	sp, r7
 800724a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800724e:	4770      	bx	lr
 8007250:	e000e100 	.word	0xe000e100
 8007254:	e000ed00 	.word	0xe000ed00

08007258 <NVIC_EncodePriority>:
{
 8007258:	b480      	push	{r7}
 800725a:	b089      	sub	sp, #36	; 0x24
 800725c:	af00      	add	r7, sp, #0
 800725e:	60f8      	str	r0, [r7, #12]
 8007260:	60b9      	str	r1, [r7, #8]
 8007262:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8007264:	68fb      	ldr	r3, [r7, #12]
 8007266:	f003 0307 	and.w	r3, r3, #7
 800726a:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800726c:	69fb      	ldr	r3, [r7, #28]
 800726e:	f1c3 0307 	rsb	r3, r3, #7
 8007272:	2b04      	cmp	r3, #4
 8007274:	bf28      	it	cs
 8007276:	2304      	movcs	r3, #4
 8007278:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800727a:	69fb      	ldr	r3, [r7, #28]
 800727c:	3304      	adds	r3, #4
 800727e:	2b06      	cmp	r3, #6
 8007280:	d902      	bls.n	8007288 <NVIC_EncodePriority+0x30>
 8007282:	69fb      	ldr	r3, [r7, #28]
 8007284:	3b03      	subs	r3, #3
 8007286:	e000      	b.n	800728a <NVIC_EncodePriority+0x32>
 8007288:	2300      	movs	r3, #0
 800728a:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800728c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8007290:	69bb      	ldr	r3, [r7, #24]
 8007292:	fa02 f303 	lsl.w	r3, r2, r3
 8007296:	43da      	mvns	r2, r3
 8007298:	68bb      	ldr	r3, [r7, #8]
 800729a:	401a      	ands	r2, r3
 800729c:	697b      	ldr	r3, [r7, #20]
 800729e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80072a0:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 80072a4:	697b      	ldr	r3, [r7, #20]
 80072a6:	fa01 f303 	lsl.w	r3, r1, r3
 80072aa:	43d9      	mvns	r1, r3
 80072ac:	687b      	ldr	r3, [r7, #4]
 80072ae:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80072b0:	4313      	orrs	r3, r2
}
 80072b2:	4618      	mov	r0, r3
 80072b4:	3724      	adds	r7, #36	; 0x24
 80072b6:	46bd      	mov	sp, r7
 80072b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072bc:	4770      	bx	lr
	...

080072c0 <SysTick_Config>:
{
 80072c0:	b580      	push	{r7, lr}
 80072c2:	b082      	sub	sp, #8
 80072c4:	af00      	add	r7, sp, #0
 80072c6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80072c8:	687b      	ldr	r3, [r7, #4]
 80072ca:	3b01      	subs	r3, #1
 80072cc:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80072d0:	d301      	bcc.n	80072d6 <SysTick_Config+0x16>
    return (1UL);                                                   /* Reload value impossible */
 80072d2:	2301      	movs	r3, #1
 80072d4:	e00f      	b.n	80072f6 <SysTick_Config+0x36>
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80072d6:	4a0a      	ldr	r2, [pc, #40]	; (8007300 <SysTick_Config+0x40>)
 80072d8:	687b      	ldr	r3, [r7, #4]
 80072da:	3b01      	subs	r3, #1
 80072dc:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80072de:	210f      	movs	r1, #15
 80072e0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80072e4:	f7ff ff8e 	bl	8007204 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80072e8:	4b05      	ldr	r3, [pc, #20]	; (8007300 <SysTick_Config+0x40>)
 80072ea:	2200      	movs	r2, #0
 80072ec:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80072ee:	4b04      	ldr	r3, [pc, #16]	; (8007300 <SysTick_Config+0x40>)
 80072f0:	2207      	movs	r2, #7
 80072f2:	601a      	str	r2, [r3, #0]
  return (0UL);                                                     /* Function successful */
 80072f4:	2300      	movs	r3, #0
}
 80072f6:	4618      	mov	r0, r3
 80072f8:	3708      	adds	r7, #8
 80072fa:	46bd      	mov	sp, r7
 80072fc:	bd80      	pop	{r7, pc}
 80072fe:	bf00      	nop
 8007300:	e000e010 	.word	0xe000e010

08007304 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8007304:	b580      	push	{r7, lr}
 8007306:	b082      	sub	sp, #8
 8007308:	af00      	add	r7, sp, #0
 800730a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800730c:	6878      	ldr	r0, [r7, #4]
 800730e:	f7ff ff29 	bl	8007164 <__NVIC_SetPriorityGrouping>
}
 8007312:	bf00      	nop
 8007314:	3708      	adds	r7, #8
 8007316:	46bd      	mov	sp, r7
 8007318:	bd80      	pop	{r7, pc}

0800731a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800731a:	b580      	push	{r7, lr}
 800731c:	b086      	sub	sp, #24
 800731e:	af00      	add	r7, sp, #0
 8007320:	4603      	mov	r3, r0
 8007322:	60b9      	str	r1, [r7, #8]
 8007324:	607a      	str	r2, [r7, #4]
 8007326:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8007328:	f7ff ff40 	bl	80071ac <__NVIC_GetPriorityGrouping>
 800732c:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800732e:	687a      	ldr	r2, [r7, #4]
 8007330:	68b9      	ldr	r1, [r7, #8]
 8007332:	6978      	ldr	r0, [r7, #20]
 8007334:	f7ff ff90 	bl	8007258 <NVIC_EncodePriority>
 8007338:	4602      	mov	r2, r0
 800733a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800733e:	4611      	mov	r1, r2
 8007340:	4618      	mov	r0, r3
 8007342:	f7ff ff5f 	bl	8007204 <__NVIC_SetPriority>
}
 8007346:	bf00      	nop
 8007348:	3718      	adds	r7, #24
 800734a:	46bd      	mov	sp, r7
 800734c:	bd80      	pop	{r7, pc}

0800734e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800734e:	b580      	push	{r7, lr}
 8007350:	b082      	sub	sp, #8
 8007352:	af00      	add	r7, sp, #0
 8007354:	4603      	mov	r3, r0
 8007356:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8007358:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800735c:	4618      	mov	r0, r3
 800735e:	f7ff ff33 	bl	80071c8 <__NVIC_EnableIRQ>
}
 8007362:	bf00      	nop
 8007364:	3708      	adds	r7, #8
 8007366:	46bd      	mov	sp, r7
 8007368:	bd80      	pop	{r7, pc}

0800736a <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800736a:	b580      	push	{r7, lr}
 800736c:	b082      	sub	sp, #8
 800736e:	af00      	add	r7, sp, #0
 8007370:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8007372:	6878      	ldr	r0, [r7, #4]
 8007374:	f7ff ffa4 	bl	80072c0 <SysTick_Config>
 8007378:	4603      	mov	r3, r0
}
 800737a:	4618      	mov	r0, r3
 800737c:	3708      	adds	r7, #8
 800737e:	46bd      	mov	sp, r7
 8007380:	bd80      	pop	{r7, pc}

08007382 <HAL_DAC_Init>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Init(DAC_HandleTypeDef *hdac)
{
 8007382:	b580      	push	{r7, lr}
 8007384:	b082      	sub	sp, #8
 8007386:	af00      	add	r7, sp, #0
 8007388:	6078      	str	r0, [r7, #4]
  /* Check DAC handle */
  if (hdac == NULL)
 800738a:	687b      	ldr	r3, [r7, #4]
 800738c:	2b00      	cmp	r3, #0
 800738e:	d101      	bne.n	8007394 <HAL_DAC_Init+0x12>
  {
    return HAL_ERROR;
 8007390:	2301      	movs	r3, #1
 8007392:	e014      	b.n	80073be <HAL_DAC_Init+0x3c>
  }
  /* Check the parameters */
  assert_param(IS_DAC_ALL_INSTANCE(hdac->Instance));

  if (hdac->State == HAL_DAC_STATE_RESET)
 8007394:	687b      	ldr	r3, [r7, #4]
 8007396:	791b      	ldrb	r3, [r3, #4]
 8007398:	b2db      	uxtb	r3, r3
 800739a:	2b00      	cmp	r3, #0
 800739c:	d105      	bne.n	80073aa <HAL_DAC_Init+0x28>
      hdac->MspInitCallback             = HAL_DAC_MspInit;
    }
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

    /* Allocate lock resource and initialize it */
    hdac->Lock = HAL_UNLOCKED;
 800739e:	687b      	ldr	r3, [r7, #4]
 80073a0:	2200      	movs	r2, #0
 80073a2:	715a      	strb	r2, [r3, #5]
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
    /* Init the low level hardware */
    hdac->MspInitCallback(hdac);
#else
    /* Init the low level hardware */
    HAL_DAC_MspInit(hdac);
 80073a4:	6878      	ldr	r0, [r7, #4]
 80073a6:	f7fc ff03 	bl	80041b0 <HAL_DAC_MspInit>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
  }

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_BUSY;
 80073aa:	687b      	ldr	r3, [r7, #4]
 80073ac:	2202      	movs	r2, #2
 80073ae:	711a      	strb	r2, [r3, #4]

  /* Set DAC error code to none */
  hdac->ErrorCode = HAL_DAC_ERROR_NONE;
 80073b0:	687b      	ldr	r3, [r7, #4]
 80073b2:	2200      	movs	r2, #0
 80073b4:	611a      	str	r2, [r3, #16]

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_READY;
 80073b6:	687b      	ldr	r3, [r7, #4]
 80073b8:	2201      	movs	r2, #1
 80073ba:	711a      	strb	r2, [r3, #4]

  /* Return function status */
  return HAL_OK;
 80073bc:	2300      	movs	r3, #0
}
 80073be:	4618      	mov	r0, r3
 80073c0:	3708      	adds	r7, #8
 80073c2:	46bd      	mov	sp, r7
 80073c4:	bd80      	pop	{r7, pc}

080073c6 <HAL_DAC_Start>:
  *         (1) On this STM32 serie, parameter not available on all instances.
  *             Refer to device datasheet for channels availability.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Start(DAC_HandleTypeDef *hdac, uint32_t Channel)
{
 80073c6:	b580      	push	{r7, lr}
 80073c8:	b082      	sub	sp, #8
 80073ca:	af00      	add	r7, sp, #0
 80073cc:	6078      	str	r0, [r7, #4]
 80073ce:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(hdac->Instance, Channel));

  /* Process locked */
  __HAL_LOCK(hdac);
 80073d0:	687b      	ldr	r3, [r7, #4]
 80073d2:	795b      	ldrb	r3, [r3, #5]
 80073d4:	2b01      	cmp	r3, #1
 80073d6:	d101      	bne.n	80073dc <HAL_DAC_Start+0x16>
 80073d8:	2302      	movs	r3, #2
 80073da:	e043      	b.n	8007464 <HAL_DAC_Start+0x9e>
 80073dc:	687b      	ldr	r3, [r7, #4]
 80073de:	2201      	movs	r2, #1
 80073e0:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 80073e2:	687b      	ldr	r3, [r7, #4]
 80073e4:	2202      	movs	r2, #2
 80073e6:	711a      	strb	r2, [r3, #4]

  /* Enable the Peripheral */
  __HAL_DAC_ENABLE(hdac, Channel);
 80073e8:	687b      	ldr	r3, [r7, #4]
 80073ea:	681b      	ldr	r3, [r3, #0]
 80073ec:	6819      	ldr	r1, [r3, #0]
 80073ee:	683b      	ldr	r3, [r7, #0]
 80073f0:	f003 0310 	and.w	r3, r3, #16
 80073f4:	2201      	movs	r2, #1
 80073f6:	409a      	lsls	r2, r3
 80073f8:	687b      	ldr	r3, [r7, #4]
 80073fa:	681b      	ldr	r3, [r3, #0]
 80073fc:	430a      	orrs	r2, r1
 80073fe:	601a      	str	r2, [r3, #0]
  /* Ensure minimum wait before using peripheral after enabling it */
  HAL_Delay(1);
 8007400:	2001      	movs	r0, #1
 8007402:	f7fe fb4d 	bl	8005aa0 <HAL_Delay>

  if (Channel == DAC_CHANNEL_1)
 8007406:	683b      	ldr	r3, [r7, #0]
 8007408:	2b00      	cmp	r3, #0
 800740a:	d10f      	bne.n	800742c <HAL_DAC_Start+0x66>
  {
    /* Check if software trigger enabled */
    if ((hdac->Instance->CR & (DAC_CR_TEN1 | DAC_CR_TSEL1)) == DAC_TRIGGER_SOFTWARE)
 800740c:	687b      	ldr	r3, [r7, #4]
 800740e:	681b      	ldr	r3, [r3, #0]
 8007410:	681b      	ldr	r3, [r3, #0]
 8007412:	f003 033e 	and.w	r3, r3, #62	; 0x3e
 8007416:	2b02      	cmp	r3, #2
 8007418:	d11d      	bne.n	8007456 <HAL_DAC_Start+0x90>
    {
      /* Enable the selected DAC software conversion */
      SET_BIT(hdac->Instance->SWTRIGR, DAC_SWTRIGR_SWTRIG1);
 800741a:	687b      	ldr	r3, [r7, #4]
 800741c:	681b      	ldr	r3, [r3, #0]
 800741e:	685a      	ldr	r2, [r3, #4]
 8007420:	687b      	ldr	r3, [r7, #4]
 8007422:	681b      	ldr	r3, [r3, #0]
 8007424:	f042 0201 	orr.w	r2, r2, #1
 8007428:	605a      	str	r2, [r3, #4]
 800742a:	e014      	b.n	8007456 <HAL_DAC_Start+0x90>
    }
  }
  else
  {
    /* Check if software trigger enabled */
    if ((hdac->Instance->CR & (DAC_CR_TEN2 | DAC_CR_TSEL2)) == (DAC_TRIGGER_SOFTWARE << (Channel & 0x10UL)))
 800742c:	687b      	ldr	r3, [r7, #4]
 800742e:	681b      	ldr	r3, [r3, #0]
 8007430:	681b      	ldr	r3, [r3, #0]
 8007432:	f403 1278 	and.w	r2, r3, #4063232	; 0x3e0000
 8007436:	683b      	ldr	r3, [r7, #0]
 8007438:	f003 0310 	and.w	r3, r3, #16
 800743c:	2102      	movs	r1, #2
 800743e:	fa01 f303 	lsl.w	r3, r1, r3
 8007442:	429a      	cmp	r2, r3
 8007444:	d107      	bne.n	8007456 <HAL_DAC_Start+0x90>
    {
      /* Enable the selected DAC software conversion*/
      SET_BIT(hdac->Instance->SWTRIGR, DAC_SWTRIGR_SWTRIG2);
 8007446:	687b      	ldr	r3, [r7, #4]
 8007448:	681b      	ldr	r3, [r3, #0]
 800744a:	685a      	ldr	r2, [r3, #4]
 800744c:	687b      	ldr	r3, [r7, #4]
 800744e:	681b      	ldr	r3, [r3, #0]
 8007450:	f042 0202 	orr.w	r2, r2, #2
 8007454:	605a      	str	r2, [r3, #4]
    }
  }

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 8007456:	687b      	ldr	r3, [r7, #4]
 8007458:	2201      	movs	r2, #1
 800745a:	711a      	strb	r2, [r3, #4]

  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 800745c:	687b      	ldr	r3, [r7, #4]
 800745e:	2200      	movs	r2, #0
 8007460:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 8007462:	2300      	movs	r3, #0
}
 8007464:	4618      	mov	r0, r3
 8007466:	3708      	adds	r7, #8
 8007468:	46bd      	mov	sp, r7
 800746a:	bd80      	pop	{r7, pc}

0800746c <HAL_DAC_Start_DMA>:
  *            @arg DAC_ALIGN_12B_R: 12bit right data alignment selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Start_DMA(DAC_HandleTypeDef *hdac, uint32_t Channel, uint32_t *pData, uint32_t Length,
                                    uint32_t Alignment)
{
 800746c:	b580      	push	{r7, lr}
 800746e:	b086      	sub	sp, #24
 8007470:	af00      	add	r7, sp, #0
 8007472:	60f8      	str	r0, [r7, #12]
 8007474:	60b9      	str	r1, [r7, #8]
 8007476:	607a      	str	r2, [r7, #4]
 8007478:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status;
  uint32_t tmpreg = 0U;
 800747a:	2300      	movs	r3, #0
 800747c:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(hdac->Instance, Channel));
  assert_param(IS_DAC_ALIGN(Alignment));

  /* Process locked */
  __HAL_LOCK(hdac);
 800747e:	68fb      	ldr	r3, [r7, #12]
 8007480:	795b      	ldrb	r3, [r3, #5]
 8007482:	2b01      	cmp	r3, #1
 8007484:	d101      	bne.n	800748a <HAL_DAC_Start_DMA+0x1e>
 8007486:	2302      	movs	r3, #2
 8007488:	e0a1      	b.n	80075ce <HAL_DAC_Start_DMA+0x162>
 800748a:	68fb      	ldr	r3, [r7, #12]
 800748c:	2201      	movs	r2, #1
 800748e:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 8007490:	68fb      	ldr	r3, [r7, #12]
 8007492:	2202      	movs	r2, #2
 8007494:	711a      	strb	r2, [r3, #4]

  if (Channel == DAC_CHANNEL_1)
 8007496:	68bb      	ldr	r3, [r7, #8]
 8007498:	2b00      	cmp	r3, #0
 800749a:	d12a      	bne.n	80074f2 <HAL_DAC_Start_DMA+0x86>
  {
    /* Set the DMA transfer complete callback for channel1 */
    hdac->DMA_Handle1->XferCpltCallback = DAC_DMAConvCpltCh1;
 800749c:	68fb      	ldr	r3, [r7, #12]
 800749e:	689b      	ldr	r3, [r3, #8]
 80074a0:	4a4d      	ldr	r2, [pc, #308]	; (80075d8 <HAL_DAC_Start_DMA+0x16c>)
 80074a2:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Set the DMA half transfer complete callback for channel1 */
    hdac->DMA_Handle1->XferHalfCpltCallback = DAC_DMAHalfConvCpltCh1;
 80074a4:	68fb      	ldr	r3, [r7, #12]
 80074a6:	689b      	ldr	r3, [r3, #8]
 80074a8:	4a4c      	ldr	r2, [pc, #304]	; (80075dc <HAL_DAC_Start_DMA+0x170>)
 80074aa:	631a      	str	r2, [r3, #48]	; 0x30

    /* Set the DMA error callback for channel1 */
    hdac->DMA_Handle1->XferErrorCallback = DAC_DMAErrorCh1;
 80074ac:	68fb      	ldr	r3, [r7, #12]
 80074ae:	689b      	ldr	r3, [r3, #8]
 80074b0:	4a4b      	ldr	r2, [pc, #300]	; (80075e0 <HAL_DAC_Start_DMA+0x174>)
 80074b2:	635a      	str	r2, [r3, #52]	; 0x34

    /* Enable the selected DAC channel1 DMA request */
    SET_BIT(hdac->Instance->CR, DAC_CR_DMAEN1);
 80074b4:	68fb      	ldr	r3, [r7, #12]
 80074b6:	681b      	ldr	r3, [r3, #0]
 80074b8:	681a      	ldr	r2, [r3, #0]
 80074ba:	68fb      	ldr	r3, [r7, #12]
 80074bc:	681b      	ldr	r3, [r3, #0]
 80074be:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 80074c2:	601a      	str	r2, [r3, #0]

    /* Case of use of channel 1 */
    switch (Alignment)
 80074c4:	6a3b      	ldr	r3, [r7, #32]
 80074c6:	2b04      	cmp	r3, #4
 80074c8:	d009      	beq.n	80074de <HAL_DAC_Start_DMA+0x72>
 80074ca:	2b08      	cmp	r3, #8
 80074cc:	d00c      	beq.n	80074e8 <HAL_DAC_Start_DMA+0x7c>
 80074ce:	2b00      	cmp	r3, #0
 80074d0:	d000      	beq.n	80074d4 <HAL_DAC_Start_DMA+0x68>
      case DAC_ALIGN_8B_R:
        /* Get DHR8R1 address */
        tmpreg = (uint32_t)&hdac->Instance->DHR8R1;
        break;
      default:
        break;
 80074d2:	e039      	b.n	8007548 <HAL_DAC_Start_DMA+0xdc>
        tmpreg = (uint32_t)&hdac->Instance->DHR12R1;
 80074d4:	68fb      	ldr	r3, [r7, #12]
 80074d6:	681b      	ldr	r3, [r3, #0]
 80074d8:	3308      	adds	r3, #8
 80074da:	613b      	str	r3, [r7, #16]
        break;
 80074dc:	e034      	b.n	8007548 <HAL_DAC_Start_DMA+0xdc>
        tmpreg = (uint32_t)&hdac->Instance->DHR12L1;
 80074de:	68fb      	ldr	r3, [r7, #12]
 80074e0:	681b      	ldr	r3, [r3, #0]
 80074e2:	330c      	adds	r3, #12
 80074e4:	613b      	str	r3, [r7, #16]
        break;
 80074e6:	e02f      	b.n	8007548 <HAL_DAC_Start_DMA+0xdc>
        tmpreg = (uint32_t)&hdac->Instance->DHR8R1;
 80074e8:	68fb      	ldr	r3, [r7, #12]
 80074ea:	681b      	ldr	r3, [r3, #0]
 80074ec:	3310      	adds	r3, #16
 80074ee:	613b      	str	r3, [r7, #16]
        break;
 80074f0:	e02a      	b.n	8007548 <HAL_DAC_Start_DMA+0xdc>
    }
  }
  else
  {
    /* Set the DMA transfer complete callback for channel2 */
    hdac->DMA_Handle2->XferCpltCallback = DAC_DMAConvCpltCh2;
 80074f2:	68fb      	ldr	r3, [r7, #12]
 80074f4:	68db      	ldr	r3, [r3, #12]
 80074f6:	4a3b      	ldr	r2, [pc, #236]	; (80075e4 <HAL_DAC_Start_DMA+0x178>)
 80074f8:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Set the DMA half transfer complete callback for channel2 */
    hdac->DMA_Handle2->XferHalfCpltCallback = DAC_DMAHalfConvCpltCh2;
 80074fa:	68fb      	ldr	r3, [r7, #12]
 80074fc:	68db      	ldr	r3, [r3, #12]
 80074fe:	4a3a      	ldr	r2, [pc, #232]	; (80075e8 <HAL_DAC_Start_DMA+0x17c>)
 8007500:	631a      	str	r2, [r3, #48]	; 0x30

    /* Set the DMA error callback for channel2 */
    hdac->DMA_Handle2->XferErrorCallback = DAC_DMAErrorCh2;
 8007502:	68fb      	ldr	r3, [r7, #12]
 8007504:	68db      	ldr	r3, [r3, #12]
 8007506:	4a39      	ldr	r2, [pc, #228]	; (80075ec <HAL_DAC_Start_DMA+0x180>)
 8007508:	635a      	str	r2, [r3, #52]	; 0x34

    /* Enable the selected DAC channel2 DMA request */
    SET_BIT(hdac->Instance->CR, DAC_CR_DMAEN2);
 800750a:	68fb      	ldr	r3, [r7, #12]
 800750c:	681b      	ldr	r3, [r3, #0]
 800750e:	681a      	ldr	r2, [r3, #0]
 8007510:	68fb      	ldr	r3, [r7, #12]
 8007512:	681b      	ldr	r3, [r3, #0]
 8007514:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8007518:	601a      	str	r2, [r3, #0]

    /* Case of use of channel 2 */
    switch (Alignment)
 800751a:	6a3b      	ldr	r3, [r7, #32]
 800751c:	2b04      	cmp	r3, #4
 800751e:	d009      	beq.n	8007534 <HAL_DAC_Start_DMA+0xc8>
 8007520:	2b08      	cmp	r3, #8
 8007522:	d00c      	beq.n	800753e <HAL_DAC_Start_DMA+0xd2>
 8007524:	2b00      	cmp	r3, #0
 8007526:	d000      	beq.n	800752a <HAL_DAC_Start_DMA+0xbe>
      case DAC_ALIGN_8B_R:
        /* Get DHR8R2 address */
        tmpreg = (uint32_t)&hdac->Instance->DHR8R2;
        break;
      default:
        break;
 8007528:	e00e      	b.n	8007548 <HAL_DAC_Start_DMA+0xdc>
        tmpreg = (uint32_t)&hdac->Instance->DHR12R2;
 800752a:	68fb      	ldr	r3, [r7, #12]
 800752c:	681b      	ldr	r3, [r3, #0]
 800752e:	3314      	adds	r3, #20
 8007530:	613b      	str	r3, [r7, #16]
        break;
 8007532:	e009      	b.n	8007548 <HAL_DAC_Start_DMA+0xdc>
        tmpreg = (uint32_t)&hdac->Instance->DHR12L2;
 8007534:	68fb      	ldr	r3, [r7, #12]
 8007536:	681b      	ldr	r3, [r3, #0]
 8007538:	3318      	adds	r3, #24
 800753a:	613b      	str	r3, [r7, #16]
        break;
 800753c:	e004      	b.n	8007548 <HAL_DAC_Start_DMA+0xdc>
        tmpreg = (uint32_t)&hdac->Instance->DHR8R2;
 800753e:	68fb      	ldr	r3, [r7, #12]
 8007540:	681b      	ldr	r3, [r3, #0]
 8007542:	331c      	adds	r3, #28
 8007544:	613b      	str	r3, [r7, #16]
        break;
 8007546:	bf00      	nop
    }
  }

  /* Enable the DMA channel */
  if (Channel == DAC_CHANNEL_1)
 8007548:	68bb      	ldr	r3, [r7, #8]
 800754a:	2b00      	cmp	r3, #0
 800754c:	d111      	bne.n	8007572 <HAL_DAC_Start_DMA+0x106>
  {
    /* Enable the DAC DMA underrun interrupt */
    __HAL_DAC_ENABLE_IT(hdac, DAC_IT_DMAUDR1);
 800754e:	68fb      	ldr	r3, [r7, #12]
 8007550:	681b      	ldr	r3, [r3, #0]
 8007552:	681a      	ldr	r2, [r3, #0]
 8007554:	68fb      	ldr	r3, [r7, #12]
 8007556:	681b      	ldr	r3, [r3, #0]
 8007558:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800755c:	601a      	str	r2, [r3, #0]

    /* Enable the DMA channel */
    status = HAL_DMA_Start_IT(hdac->DMA_Handle1, (uint32_t)pData, tmpreg, Length);
 800755e:	68fb      	ldr	r3, [r7, #12]
 8007560:	6898      	ldr	r0, [r3, #8]
 8007562:	6879      	ldr	r1, [r7, #4]
 8007564:	683b      	ldr	r3, [r7, #0]
 8007566:	693a      	ldr	r2, [r7, #16]
 8007568:	f000 fbc8 	bl	8007cfc <HAL_DMA_Start_IT>
 800756c:	4603      	mov	r3, r0
 800756e:	75fb      	strb	r3, [r7, #23]
 8007570:	e010      	b.n	8007594 <HAL_DAC_Start_DMA+0x128>
  }
  else
  {
    /* Enable the DAC DMA underrun interrupt */
    __HAL_DAC_ENABLE_IT(hdac, DAC_IT_DMAUDR2);
 8007572:	68fb      	ldr	r3, [r7, #12]
 8007574:	681b      	ldr	r3, [r3, #0]
 8007576:	681a      	ldr	r2, [r3, #0]
 8007578:	68fb      	ldr	r3, [r7, #12]
 800757a:	681b      	ldr	r3, [r3, #0]
 800757c:	f042 5200 	orr.w	r2, r2, #536870912	; 0x20000000
 8007580:	601a      	str	r2, [r3, #0]

    /* Enable the DMA channel */
    status = HAL_DMA_Start_IT(hdac->DMA_Handle2, (uint32_t)pData, tmpreg, Length);
 8007582:	68fb      	ldr	r3, [r7, #12]
 8007584:	68d8      	ldr	r0, [r3, #12]
 8007586:	6879      	ldr	r1, [r7, #4]
 8007588:	683b      	ldr	r3, [r7, #0]
 800758a:	693a      	ldr	r2, [r7, #16]
 800758c:	f000 fbb6 	bl	8007cfc <HAL_DMA_Start_IT>
 8007590:	4603      	mov	r3, r0
 8007592:	75fb      	strb	r3, [r7, #23]
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hdac);
 8007594:	68fb      	ldr	r3, [r7, #12]
 8007596:	2200      	movs	r2, #0
 8007598:	715a      	strb	r2, [r3, #5]

  if (status == HAL_OK)
 800759a:	7dfb      	ldrb	r3, [r7, #23]
 800759c:	2b00      	cmp	r3, #0
 800759e:	d10f      	bne.n	80075c0 <HAL_DAC_Start_DMA+0x154>
  {
    /* Enable the Peripheral */
    __HAL_DAC_ENABLE(hdac, Channel);
 80075a0:	68fb      	ldr	r3, [r7, #12]
 80075a2:	681b      	ldr	r3, [r3, #0]
 80075a4:	6819      	ldr	r1, [r3, #0]
 80075a6:	68bb      	ldr	r3, [r7, #8]
 80075a8:	f003 0310 	and.w	r3, r3, #16
 80075ac:	2201      	movs	r2, #1
 80075ae:	409a      	lsls	r2, r3
 80075b0:	68fb      	ldr	r3, [r7, #12]
 80075b2:	681b      	ldr	r3, [r3, #0]
 80075b4:	430a      	orrs	r2, r1
 80075b6:	601a      	str	r2, [r3, #0]
    /* Ensure minimum wait before using peripheral after enabling it */
    HAL_Delay(1);
 80075b8:	2001      	movs	r0, #1
 80075ba:	f7fe fa71 	bl	8005aa0 <HAL_Delay>
 80075be:	e005      	b.n	80075cc <HAL_DAC_Start_DMA+0x160>
  }
  else
  {
    hdac->ErrorCode |= HAL_DAC_ERROR_DMA;
 80075c0:	68fb      	ldr	r3, [r7, #12]
 80075c2:	691b      	ldr	r3, [r3, #16]
 80075c4:	f043 0204 	orr.w	r2, r3, #4
 80075c8:	68fb      	ldr	r3, [r7, #12]
 80075ca:	611a      	str	r2, [r3, #16]
  }

  /* Return function status */
  return status;
 80075cc:	7dfb      	ldrb	r3, [r7, #23]
}
 80075ce:	4618      	mov	r0, r3
 80075d0:	3718      	adds	r7, #24
 80075d2:	46bd      	mov	sp, r7
 80075d4:	bd80      	pop	{r7, pc}
 80075d6:	bf00      	nop
 80075d8:	08007a99 	.word	0x08007a99
 80075dc:	08007abb 	.word	0x08007abb
 80075e0:	08007ad7 	.word	0x08007ad7
 80075e4:	08007b41 	.word	0x08007b41
 80075e8:	08007b63 	.word	0x08007b63
 80075ec:	08007b7f 	.word	0x08007b7f

080075f0 <HAL_DAC_Stop_DMA>:
  *         (1) On this STM32 serie, parameter not available on all instances.
  *             Refer to device datasheet for channels availability.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Stop_DMA(DAC_HandleTypeDef *hdac, uint32_t Channel)
{
 80075f0:	b580      	push	{r7, lr}
 80075f2:	b084      	sub	sp, #16
 80075f4:	af00      	add	r7, sp, #0
 80075f6:	6078      	str	r0, [r7, #4]
 80075f8:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(hdac->Instance, Channel));

  /* Disable the selected DAC channel DMA request */
  hdac->Instance->CR &= ~(DAC_CR_DMAEN1 << (Channel & 0x10UL));
 80075fa:	687b      	ldr	r3, [r7, #4]
 80075fc:	681b      	ldr	r3, [r3, #0]
 80075fe:	6819      	ldr	r1, [r3, #0]
 8007600:	683b      	ldr	r3, [r7, #0]
 8007602:	f003 0310 	and.w	r3, r3, #16
 8007606:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800760a:	fa02 f303 	lsl.w	r3, r2, r3
 800760e:	43da      	mvns	r2, r3
 8007610:	687b      	ldr	r3, [r7, #4]
 8007612:	681b      	ldr	r3, [r3, #0]
 8007614:	400a      	ands	r2, r1
 8007616:	601a      	str	r2, [r3, #0]

  /* Disable the Peripheral */
  __HAL_DAC_DISABLE(hdac, Channel);
 8007618:	687b      	ldr	r3, [r7, #4]
 800761a:	681b      	ldr	r3, [r3, #0]
 800761c:	6819      	ldr	r1, [r3, #0]
 800761e:	683b      	ldr	r3, [r7, #0]
 8007620:	f003 0310 	and.w	r3, r3, #16
 8007624:	2201      	movs	r2, #1
 8007626:	fa02 f303 	lsl.w	r3, r2, r3
 800762a:	43da      	mvns	r2, r3
 800762c:	687b      	ldr	r3, [r7, #4]
 800762e:	681b      	ldr	r3, [r3, #0]
 8007630:	400a      	ands	r2, r1
 8007632:	601a      	str	r2, [r3, #0]
  /* Ensure minimum wait before enabling peripheral after disabling it */
  HAL_Delay(1);
 8007634:	2001      	movs	r0, #1
 8007636:	f7fe fa33 	bl	8005aa0 <HAL_Delay>

  /* Disable the DMA channel */

  /* Channel1 is used */
  if (Channel == DAC_CHANNEL_1)
 800763a:	683b      	ldr	r3, [r7, #0]
 800763c:	2b00      	cmp	r3, #0
 800763e:	d10f      	bne.n	8007660 <HAL_DAC_Stop_DMA+0x70>
  {
    /* Disable the DMA channel */
    status = HAL_DMA_Abort(hdac->DMA_Handle1);
 8007640:	687b      	ldr	r3, [r7, #4]
 8007642:	689b      	ldr	r3, [r3, #8]
 8007644:	4618      	mov	r0, r3
 8007646:	f000 fbd4 	bl	8007df2 <HAL_DMA_Abort>
 800764a:	4603      	mov	r3, r0
 800764c:	73fb      	strb	r3, [r7, #15]

    /* Disable the DAC DMA underrun interrupt */
    __HAL_DAC_DISABLE_IT(hdac, DAC_IT_DMAUDR1);
 800764e:	687b      	ldr	r3, [r7, #4]
 8007650:	681b      	ldr	r3, [r3, #0]
 8007652:	681a      	ldr	r2, [r3, #0]
 8007654:	687b      	ldr	r3, [r7, #4]
 8007656:	681b      	ldr	r3, [r3, #0]
 8007658:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800765c:	601a      	str	r2, [r3, #0]
 800765e:	e00e      	b.n	800767e <HAL_DAC_Stop_DMA+0x8e>
  }
  else /* Channel2 is used for */
  {
    /* Disable the DMA channel */
    status = HAL_DMA_Abort(hdac->DMA_Handle2);
 8007660:	687b      	ldr	r3, [r7, #4]
 8007662:	68db      	ldr	r3, [r3, #12]
 8007664:	4618      	mov	r0, r3
 8007666:	f000 fbc4 	bl	8007df2 <HAL_DMA_Abort>
 800766a:	4603      	mov	r3, r0
 800766c:	73fb      	strb	r3, [r7, #15]

    /* Disable the DAC DMA underrun interrupt */
    __HAL_DAC_DISABLE_IT(hdac, DAC_IT_DMAUDR2);
 800766e:	687b      	ldr	r3, [r7, #4]
 8007670:	681b      	ldr	r3, [r3, #0]
 8007672:	681a      	ldr	r2, [r3, #0]
 8007674:	687b      	ldr	r3, [r7, #4]
 8007676:	681b      	ldr	r3, [r3, #0]
 8007678:	f022 5200 	bic.w	r2, r2, #536870912	; 0x20000000
 800767c:	601a      	str	r2, [r3, #0]
  }

  /* Check if DMA Channel effectively disabled */
  if (status != HAL_OK)
 800767e:	7bfb      	ldrb	r3, [r7, #15]
 8007680:	2b00      	cmp	r3, #0
 8007682:	d003      	beq.n	800768c <HAL_DAC_Stop_DMA+0x9c>
  {
    /* Update DAC state machine to error */
    hdac->State = HAL_DAC_STATE_ERROR;
 8007684:	687b      	ldr	r3, [r7, #4]
 8007686:	2204      	movs	r2, #4
 8007688:	711a      	strb	r2, [r3, #4]
 800768a:	e002      	b.n	8007692 <HAL_DAC_Stop_DMA+0xa2>
  }
  else
  {
    /* Change DAC state */
    hdac->State = HAL_DAC_STATE_READY;
 800768c:	687b      	ldr	r3, [r7, #4]
 800768e:	2201      	movs	r2, #1
 8007690:	711a      	strb	r2, [r3, #4]
  }

  /* Return function status */
  return status;
 8007692:	7bfb      	ldrb	r3, [r7, #15]
}
 8007694:	4618      	mov	r0, r3
 8007696:	3710      	adds	r7, #16
 8007698:	46bd      	mov	sp, r7
 800769a:	bd80      	pop	{r7, pc}

0800769c <HAL_DAC_SetValue>:
  *            @arg DAC_ALIGN_12B_R: 12bit right data alignment selected
  * @param  Data Data to be loaded in the selected data holding register.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_SetValue(DAC_HandleTypeDef *hdac, uint32_t Channel, uint32_t Alignment, uint32_t Data)
{
 800769c:	b480      	push	{r7}
 800769e:	b087      	sub	sp, #28
 80076a0:	af00      	add	r7, sp, #0
 80076a2:	60f8      	str	r0, [r7, #12]
 80076a4:	60b9      	str	r1, [r7, #8]
 80076a6:	607a      	str	r2, [r7, #4]
 80076a8:	603b      	str	r3, [r7, #0]
  __IO uint32_t tmp = 0;
 80076aa:	2300      	movs	r3, #0
 80076ac:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(hdac->Instance, Channel));
  assert_param(IS_DAC_ALIGN(Alignment));
  /* In case DMA Double data mode is activated, DATA range is almost full uin32_t one: no check */
  if ((hdac->Instance->MCR & (DAC_MCR_DMADOUBLE1 << (Channel & 0x10UL))) == 0UL)
 80076ae:	68fb      	ldr	r3, [r7, #12]
 80076b0:	681b      	ldr	r3, [r3, #0]
 80076b2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
  {
    assert_param(IS_DAC_DATA(Data));
  }

  tmp = (uint32_t)hdac->Instance;
 80076b4:	68fb      	ldr	r3, [r7, #12]
 80076b6:	681b      	ldr	r3, [r3, #0]
 80076b8:	617b      	str	r3, [r7, #20]
  if (Channel == DAC_CHANNEL_1)
 80076ba:	68bb      	ldr	r3, [r7, #8]
 80076bc:	2b00      	cmp	r3, #0
 80076be:	d105      	bne.n	80076cc <HAL_DAC_SetValue+0x30>
  {
    tmp += DAC_DHR12R1_ALIGNMENT(Alignment);
 80076c0:	697a      	ldr	r2, [r7, #20]
 80076c2:	687b      	ldr	r3, [r7, #4]
 80076c4:	4413      	add	r3, r2
 80076c6:	3308      	adds	r3, #8
 80076c8:	617b      	str	r3, [r7, #20]
 80076ca:	e004      	b.n	80076d6 <HAL_DAC_SetValue+0x3a>
  }
  else
  {
    tmp += DAC_DHR12R2_ALIGNMENT(Alignment);
 80076cc:	697a      	ldr	r2, [r7, #20]
 80076ce:	687b      	ldr	r3, [r7, #4]
 80076d0:	4413      	add	r3, r2
 80076d2:	3314      	adds	r3, #20
 80076d4:	617b      	str	r3, [r7, #20]
  }

  /* Set the DAC channel selected data holding register */
  *(__IO uint32_t *) tmp = Data;
 80076d6:	697b      	ldr	r3, [r7, #20]
 80076d8:	461a      	mov	r2, r3
 80076da:	683b      	ldr	r3, [r7, #0]
 80076dc:	6013      	str	r3, [r2, #0]

  /* Return function status */
  return HAL_OK;
 80076de:	2300      	movs	r3, #0
}
 80076e0:	4618      	mov	r0, r3
 80076e2:	371c      	adds	r7, #28
 80076e4:	46bd      	mov	sp, r7
 80076e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076ea:	4770      	bx	lr

080076ec <HAL_DAC_ConvCpltCallbackCh1>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DAC_ConvCpltCallbackCh1(DAC_HandleTypeDef *hdac)
{
 80076ec:	b480      	push	{r7}
 80076ee:	b083      	sub	sp, #12
 80076f0:	af00      	add	r7, sp, #0
 80076f2:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DAC_ConvCpltCallbackCh1 could be implemented in the user file
   */
}
 80076f4:	bf00      	nop
 80076f6:	370c      	adds	r7, #12
 80076f8:	46bd      	mov	sp, r7
 80076fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076fe:	4770      	bx	lr

08007700 <HAL_DAC_ConvHalfCpltCallbackCh1>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DAC_ConvHalfCpltCallbackCh1(DAC_HandleTypeDef *hdac)
{
 8007700:	b480      	push	{r7}
 8007702:	b083      	sub	sp, #12
 8007704:	af00      	add	r7, sp, #0
 8007706:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DAC_ConvHalfCpltCallbackCh1 could be implemented in the user file
   */
}
 8007708:	bf00      	nop
 800770a:	370c      	adds	r7, #12
 800770c:	46bd      	mov	sp, r7
 800770e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007712:	4770      	bx	lr

08007714 <HAL_DAC_GetValue>:
  *         (1) On this STM32 serie, parameter not available on all instances.
  *             Refer to device datasheet for channels availability.
  * @retval The selected DAC channel data output value.
  */
uint32_t HAL_DAC_GetValue(DAC_HandleTypeDef *hdac, uint32_t Channel)
{
 8007714:	b480      	push	{r7}
 8007716:	b083      	sub	sp, #12
 8007718:	af00      	add	r7, sp, #0
 800771a:	6078      	str	r0, [r7, #4]
 800771c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(hdac->Instance, Channel));

  /* Returns the DAC channel data output register value */
  if (Channel == DAC_CHANNEL_1)
 800771e:	683b      	ldr	r3, [r7, #0]
 8007720:	2b00      	cmp	r3, #0
 8007722:	d103      	bne.n	800772c <HAL_DAC_GetValue+0x18>
  {
    return hdac->Instance->DOR1;
 8007724:	687b      	ldr	r3, [r7, #4]
 8007726:	681b      	ldr	r3, [r3, #0]
 8007728:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800772a:	e002      	b.n	8007732 <HAL_DAC_GetValue+0x1e>
  }
  else
  {
    return hdac->Instance->DOR2;
 800772c:	687b      	ldr	r3, [r7, #4]
 800772e:	681b      	ldr	r3, [r3, #0]
 8007730:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  }
}
 8007732:	4618      	mov	r0, r3
 8007734:	370c      	adds	r7, #12
 8007736:	46bd      	mov	sp, r7
 8007738:	f85d 7b04 	ldr.w	r7, [sp], #4
 800773c:	4770      	bx	lr
	...

08007740 <HAL_DAC_ConfigChannel>:
  *         (1) On this STM32 serie, parameter not available on all instances.
  *             Refer to device datasheet for channels availability.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_ConfigChannel(DAC_HandleTypeDef *hdac, DAC_ChannelConfTypeDef *sConfig, uint32_t Channel)
{
 8007740:	b580      	push	{r7, lr}
 8007742:	b08a      	sub	sp, #40	; 0x28
 8007744:	af00      	add	r7, sp, #0
 8007746:	60f8      	str	r0, [r7, #12]
 8007748:	60b9      	str	r1, [r7, #8]
 800774a:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg1;
  uint32_t tmpreg2;
  uint32_t tickstart = 0U;
 800774c:	2300      	movs	r3, #0
 800774e:	61fb      	str	r3, [r7, #28]
  assert_param(IS_DAC_CHANNEL(hdac->Instance, Channel));
  assert_param(IS_FUNCTIONAL_STATE(sConfig->DAC_DMADoubleDataMode));
  assert_param(IS_FUNCTIONAL_STATE(sConfig->DAC_SignedFormat));

  /* Process locked */
  __HAL_LOCK(hdac);
 8007750:	68fb      	ldr	r3, [r7, #12]
 8007752:	795b      	ldrb	r3, [r3, #5]
 8007754:	2b01      	cmp	r3, #1
 8007756:	d101      	bne.n	800775c <HAL_DAC_ConfigChannel+0x1c>
 8007758:	2302      	movs	r3, #2
 800775a:	e194      	b.n	8007a86 <HAL_DAC_ConfigChannel+0x346>
 800775c:	68fb      	ldr	r3, [r7, #12]
 800775e:	2201      	movs	r2, #1
 8007760:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 8007762:	68fb      	ldr	r3, [r7, #12]
 8007764:	2202      	movs	r2, #2
 8007766:	711a      	strb	r2, [r3, #4]

  if (sConfig->DAC_SampleAndHold == DAC_SAMPLEANDHOLD_ENABLE)
 8007768:	68bb      	ldr	r3, [r7, #8]
 800776a:	689b      	ldr	r3, [r3, #8]
 800776c:	2b04      	cmp	r3, #4
 800776e:	d174      	bne.n	800785a <HAL_DAC_ConfigChannel+0x11a>
    /* Sample on old configuration */
  {
    /* SampleTime */
    if (Channel == DAC_CHANNEL_1)
 8007770:	687b      	ldr	r3, [r7, #4]
 8007772:	2b00      	cmp	r3, #0
 8007774:	d137      	bne.n	80077e6 <HAL_DAC_ConfigChannel+0xa6>
    {
      /* Get timeout */
      tickstart = HAL_GetTick();
 8007776:	f7fe f987 	bl	8005a88 <HAL_GetTick>
 800777a:	61f8      	str	r0, [r7, #28]

      /* SHSR1 can be written when BWST1 is cleared */
      while (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 800777c:	e011      	b.n	80077a2 <HAL_DAC_ConfigChannel+0x62>
      {
        /* Check for the Timeout */
        if ((HAL_GetTick() - tickstart) > TIMEOUT_DAC_CALIBCONFIG)
 800777e:	f7fe f983 	bl	8005a88 <HAL_GetTick>
 8007782:	4602      	mov	r2, r0
 8007784:	69fb      	ldr	r3, [r7, #28]
 8007786:	1ad3      	subs	r3, r2, r3
 8007788:	2b01      	cmp	r3, #1
 800778a:	d90a      	bls.n	80077a2 <HAL_DAC_ConfigChannel+0x62>
        {
          /* Update error code */
          SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_TIMEOUT);
 800778c:	68fb      	ldr	r3, [r7, #12]
 800778e:	691b      	ldr	r3, [r3, #16]
 8007790:	f043 0208 	orr.w	r2, r3, #8
 8007794:	68fb      	ldr	r3, [r7, #12]
 8007796:	611a      	str	r2, [r3, #16]

          /* Change the DMA state */
          hdac->State = HAL_DAC_STATE_TIMEOUT;
 8007798:	68fb      	ldr	r3, [r7, #12]
 800779a:	2203      	movs	r2, #3
 800779c:	711a      	strb	r2, [r3, #4]

          return HAL_TIMEOUT;
 800779e:	2303      	movs	r3, #3
 80077a0:	e171      	b.n	8007a86 <HAL_DAC_ConfigChannel+0x346>
      while (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 80077a2:	68fb      	ldr	r3, [r7, #12]
 80077a4:	681b      	ldr	r3, [r3, #0]
 80077a6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80077a8:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80077ac:	2b00      	cmp	r3, #0
 80077ae:	d1e6      	bne.n	800777e <HAL_DAC_ConfigChannel+0x3e>
        }
      }
      HAL_Delay(1);
 80077b0:	2001      	movs	r0, #1
 80077b2:	f7fe f975 	bl	8005aa0 <HAL_Delay>
      hdac->Instance->SHSR1 = sConfig->DAC_SampleAndHoldConfig.DAC_SampleTime;
 80077b6:	68fb      	ldr	r3, [r7, #12]
 80077b8:	681b      	ldr	r3, [r3, #0]
 80077ba:	68ba      	ldr	r2, [r7, #8]
 80077bc:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80077be:	641a      	str	r2, [r3, #64]	; 0x40
 80077c0:	e01e      	b.n	8007800 <HAL_DAC_ConfigChannel+0xc0>
      /* SHSR2 can be written when BWST2 is cleared */

      while (((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
      {
        /* Check for the Timeout */
        if ((HAL_GetTick() - tickstart) > TIMEOUT_DAC_CALIBCONFIG)
 80077c2:	f7fe f961 	bl	8005a88 <HAL_GetTick>
 80077c6:	4602      	mov	r2, r0
 80077c8:	69fb      	ldr	r3, [r7, #28]
 80077ca:	1ad3      	subs	r3, r2, r3
 80077cc:	2b01      	cmp	r3, #1
 80077ce:	d90a      	bls.n	80077e6 <HAL_DAC_ConfigChannel+0xa6>
        {
          /* Update error code */
          SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_TIMEOUT);
 80077d0:	68fb      	ldr	r3, [r7, #12]
 80077d2:	691b      	ldr	r3, [r3, #16]
 80077d4:	f043 0208 	orr.w	r2, r3, #8
 80077d8:	68fb      	ldr	r3, [r7, #12]
 80077da:	611a      	str	r2, [r3, #16]

          /* Change the DMA state */
          hdac->State = HAL_DAC_STATE_TIMEOUT;
 80077dc:	68fb      	ldr	r3, [r7, #12]
 80077de:	2203      	movs	r2, #3
 80077e0:	711a      	strb	r2, [r3, #4]

          return HAL_TIMEOUT;
 80077e2:	2303      	movs	r3, #3
 80077e4:	e14f      	b.n	8007a86 <HAL_DAC_ConfigChannel+0x346>
      while (((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
 80077e6:	68fb      	ldr	r3, [r7, #12]
 80077e8:	681b      	ldr	r3, [r3, #0]
 80077ea:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80077ec:	2b00      	cmp	r3, #0
 80077ee:	dbe8      	blt.n	80077c2 <HAL_DAC_ConfigChannel+0x82>
        }
      }
      HAL_Delay(1U);
 80077f0:	2001      	movs	r0, #1
 80077f2:	f7fe f955 	bl	8005aa0 <HAL_Delay>
      hdac->Instance->SHSR2 = sConfig->DAC_SampleAndHoldConfig.DAC_SampleTime;
 80077f6:	68fb      	ldr	r3, [r7, #12]
 80077f8:	681b      	ldr	r3, [r3, #0]
 80077fa:	68ba      	ldr	r2, [r7, #8]
 80077fc:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80077fe:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* HoldTime */
    MODIFY_REG(hdac->Instance->SHHR, DAC_SHHR_THOLD1 << (Channel & 0x10UL), (sConfig->DAC_SampleAndHoldConfig.DAC_HoldTime) << (Channel & 0x10UL));
 8007800:	68fb      	ldr	r3, [r7, #12]
 8007802:	681b      	ldr	r3, [r3, #0]
 8007804:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8007806:	687b      	ldr	r3, [r7, #4]
 8007808:	f003 0310 	and.w	r3, r3, #16
 800780c:	f240 31ff 	movw	r1, #1023	; 0x3ff
 8007810:	fa01 f303 	lsl.w	r3, r1, r3
 8007814:	43db      	mvns	r3, r3
 8007816:	ea02 0103 	and.w	r1, r2, r3
 800781a:	68bb      	ldr	r3, [r7, #8]
 800781c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800781e:	687b      	ldr	r3, [r7, #4]
 8007820:	f003 0310 	and.w	r3, r3, #16
 8007824:	409a      	lsls	r2, r3
 8007826:	68fb      	ldr	r3, [r7, #12]
 8007828:	681b      	ldr	r3, [r3, #0]
 800782a:	430a      	orrs	r2, r1
 800782c:	649a      	str	r2, [r3, #72]	; 0x48
    /* RefreshTime */
    MODIFY_REG(hdac->Instance->SHRR, DAC_SHRR_TREFRESH1 << (Channel & 0x10UL), (sConfig->DAC_SampleAndHoldConfig.DAC_RefreshTime) << (Channel & 0x10UL));
 800782e:	68fb      	ldr	r3, [r7, #12]
 8007830:	681b      	ldr	r3, [r3, #0]
 8007832:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8007834:	687b      	ldr	r3, [r7, #4]
 8007836:	f003 0310 	and.w	r3, r3, #16
 800783a:	21ff      	movs	r1, #255	; 0xff
 800783c:	fa01 f303 	lsl.w	r3, r1, r3
 8007840:	43db      	mvns	r3, r3
 8007842:	ea02 0103 	and.w	r1, r2, r3
 8007846:	68bb      	ldr	r3, [r7, #8]
 8007848:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800784a:	687b      	ldr	r3, [r7, #4]
 800784c:	f003 0310 	and.w	r3, r3, #16
 8007850:	409a      	lsls	r2, r3
 8007852:	68fb      	ldr	r3, [r7, #12]
 8007854:	681b      	ldr	r3, [r3, #0]
 8007856:	430a      	orrs	r2, r1
 8007858:	64da      	str	r2, [r3, #76]	; 0x4c
  }

  if (sConfig->DAC_UserTrimming == DAC_TRIMMING_USER)
 800785a:	68bb      	ldr	r3, [r7, #8]
 800785c:	69db      	ldr	r3, [r3, #28]
 800785e:	2b01      	cmp	r3, #1
 8007860:	d11d      	bne.n	800789e <HAL_DAC_ConfigChannel+0x15e>
    /* USER TRIMMING */
  {
    /* Get the DAC CCR value */
    tmpreg1 = hdac->Instance->CCR;
 8007862:	68fb      	ldr	r3, [r7, #12]
 8007864:	681b      	ldr	r3, [r3, #0]
 8007866:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007868:	627b      	str	r3, [r7, #36]	; 0x24
    /* Clear trimming value */
    tmpreg1 &= ~(((uint32_t)(DAC_CCR_OTRIM1)) << (Channel & 0x10UL));
 800786a:	687b      	ldr	r3, [r7, #4]
 800786c:	f003 0310 	and.w	r3, r3, #16
 8007870:	221f      	movs	r2, #31
 8007872:	fa02 f303 	lsl.w	r3, r2, r3
 8007876:	43db      	mvns	r3, r3
 8007878:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800787a:	4013      	ands	r3, r2
 800787c:	627b      	str	r3, [r7, #36]	; 0x24
    /* Configure for the selected trimming offset */
    tmpreg2 = sConfig->DAC_TrimmingValue;
 800787e:	68bb      	ldr	r3, [r7, #8]
 8007880:	6a1b      	ldr	r3, [r3, #32]
 8007882:	61bb      	str	r3, [r7, #24]
    /* Calculate CCR register value depending on DAC_Channel */
    tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 8007884:	687b      	ldr	r3, [r7, #4]
 8007886:	f003 0310 	and.w	r3, r3, #16
 800788a:	69ba      	ldr	r2, [r7, #24]
 800788c:	fa02 f303 	lsl.w	r3, r2, r3
 8007890:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007892:	4313      	orrs	r3, r2
 8007894:	627b      	str	r3, [r7, #36]	; 0x24
    /* Write to DAC CCR */
    hdac->Instance->CCR = tmpreg1;
 8007896:	68fb      	ldr	r3, [r7, #12]
 8007898:	681b      	ldr	r3, [r3, #0]
 800789a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800789c:	639a      	str	r2, [r3, #56]	; 0x38
  }
  /* else factory trimming is used (factory setting are available at reset)*/
  /* SW Nothing has nothing to do */

  /* Get the DAC MCR value */
  tmpreg1 = hdac->Instance->MCR;
 800789e:	68fb      	ldr	r3, [r7, #12]
 80078a0:	681b      	ldr	r3, [r3, #0]
 80078a2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80078a4:	627b      	str	r3, [r7, #36]	; 0x24
  /* Clear DAC_MCR_MODEx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_MCR_MODE1)) << (Channel & 0x10UL));
 80078a6:	687b      	ldr	r3, [r7, #4]
 80078a8:	f003 0310 	and.w	r3, r3, #16
 80078ac:	2207      	movs	r2, #7
 80078ae:	fa02 f303 	lsl.w	r3, r2, r3
 80078b2:	43db      	mvns	r3, r3
 80078b4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80078b6:	4013      	ands	r3, r2
 80078b8:	627b      	str	r3, [r7, #36]	; 0x24
  /* Configure for the selected DAC channel: mode, buffer output & on chip peripheral connect */
  if ((sConfig->DAC_ConnectOnChipPeripheral & DAC_CHIPCONNECT_EXTERNAL) == DAC_CHIPCONNECT_EXTERNAL)
 80078ba:	68bb      	ldr	r3, [r7, #8]
 80078bc:	699b      	ldr	r3, [r3, #24]
 80078be:	f003 0301 	and.w	r3, r3, #1
 80078c2:	2b00      	cmp	r3, #0
 80078c4:	d002      	beq.n	80078cc <HAL_DAC_ConfigChannel+0x18c>
  {
    connectOnChip = 0x00000000UL;
 80078c6:	2300      	movs	r3, #0
 80078c8:	623b      	str	r3, [r7, #32]
 80078ca:	e011      	b.n	80078f0 <HAL_DAC_ConfigChannel+0x1b0>
  }
  else if ((sConfig->DAC_ConnectOnChipPeripheral & DAC_CHIPCONNECT_INTERNAL) == DAC_CHIPCONNECT_INTERNAL)
 80078cc:	68bb      	ldr	r3, [r7, #8]
 80078ce:	699b      	ldr	r3, [r3, #24]
 80078d0:	f003 0302 	and.w	r3, r3, #2
 80078d4:	2b00      	cmp	r3, #0
 80078d6:	d002      	beq.n	80078de <HAL_DAC_ConfigChannel+0x19e>
  {
    connectOnChip = DAC_MCR_MODE1_0;
 80078d8:	2301      	movs	r3, #1
 80078da:	623b      	str	r3, [r7, #32]
 80078dc:	e008      	b.n	80078f0 <HAL_DAC_ConfigChannel+0x1b0>
  }
  else /* (sConfig->DAC_ConnectOnChipPeripheral & DAC_CHIPCONNECT_BOTH) == DAC_CHIPCONNECT_BOTH */
  {
    if (sConfig->DAC_OutputBuffer == DAC_OUTPUTBUFFER_ENABLE)
 80078de:	68bb      	ldr	r3, [r7, #8]
 80078e0:	695b      	ldr	r3, [r3, #20]
 80078e2:	2b00      	cmp	r3, #0
 80078e4:	d102      	bne.n	80078ec <HAL_DAC_ConfigChannel+0x1ac>
    {
      connectOnChip = DAC_MCR_MODE1_0;
 80078e6:	2301      	movs	r3, #1
 80078e8:	623b      	str	r3, [r7, #32]
 80078ea:	e001      	b.n	80078f0 <HAL_DAC_ConfigChannel+0x1b0>
    }
    else
    {
      connectOnChip = 0x00000000UL;
 80078ec:	2300      	movs	r3, #0
 80078ee:	623b      	str	r3, [r7, #32]
    }
  }
  tmpreg2 = (sConfig->DAC_SampleAndHold | sConfig->DAC_OutputBuffer | connectOnChip);
 80078f0:	68bb      	ldr	r3, [r7, #8]
 80078f2:	689a      	ldr	r2, [r3, #8]
 80078f4:	68bb      	ldr	r3, [r7, #8]
 80078f6:	695b      	ldr	r3, [r3, #20]
 80078f8:	4313      	orrs	r3, r2
 80078fa:	6a3a      	ldr	r2, [r7, #32]
 80078fc:	4313      	orrs	r3, r2
 80078fe:	61bb      	str	r3, [r7, #24]
  /* Clear DAC_MCR_DMADOUBLEx */
  tmpreg1 &= ~(((uint32_t)(DAC_MCR_DMADOUBLE1)) << (Channel & 0x10UL));
 8007900:	687b      	ldr	r3, [r7, #4]
 8007902:	f003 0310 	and.w	r3, r3, #16
 8007906:	f44f 7280 	mov.w	r2, #256	; 0x100
 800790a:	fa02 f303 	lsl.w	r3, r2, r3
 800790e:	43db      	mvns	r3, r3
 8007910:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007912:	4013      	ands	r3, r2
 8007914:	627b      	str	r3, [r7, #36]	; 0x24
  /* Configure for the selected DAC channel: DMA double data mode */
  tmpreg2 |= (sConfig->DAC_DMADoubleDataMode == ENABLE) ? DAC_MCR_DMADOUBLE1 : 0UL;
 8007916:	68bb      	ldr	r3, [r7, #8]
 8007918:	791b      	ldrb	r3, [r3, #4]
 800791a:	2b01      	cmp	r3, #1
 800791c:	d102      	bne.n	8007924 <HAL_DAC_ConfigChannel+0x1e4>
 800791e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8007922:	e000      	b.n	8007926 <HAL_DAC_ConfigChannel+0x1e6>
 8007924:	2300      	movs	r3, #0
 8007926:	69ba      	ldr	r2, [r7, #24]
 8007928:	4313      	orrs	r3, r2
 800792a:	61bb      	str	r3, [r7, #24]
  /* Clear DAC_MCR_SINFORMATx */
  tmpreg1 &= ~(((uint32_t)(DAC_MCR_SINFORMAT1)) << (Channel & 0x10UL));
 800792c:	687b      	ldr	r3, [r7, #4]
 800792e:	f003 0310 	and.w	r3, r3, #16
 8007932:	f44f 7200 	mov.w	r2, #512	; 0x200
 8007936:	fa02 f303 	lsl.w	r3, r2, r3
 800793a:	43db      	mvns	r3, r3
 800793c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800793e:	4013      	ands	r3, r2
 8007940:	627b      	str	r3, [r7, #36]	; 0x24
  /* Configure for the selected DAC channel: Signed format */
  tmpreg2 |= (sConfig->DAC_SignedFormat == ENABLE) ? DAC_MCR_SINFORMAT1 : 0UL;
 8007942:	68bb      	ldr	r3, [r7, #8]
 8007944:	795b      	ldrb	r3, [r3, #5]
 8007946:	2b01      	cmp	r3, #1
 8007948:	d102      	bne.n	8007950 <HAL_DAC_ConfigChannel+0x210>
 800794a:	f44f 7300 	mov.w	r3, #512	; 0x200
 800794e:	e000      	b.n	8007952 <HAL_DAC_ConfigChannel+0x212>
 8007950:	2300      	movs	r3, #0
 8007952:	69ba      	ldr	r2, [r7, #24]
 8007954:	4313      	orrs	r3, r2
 8007956:	61bb      	str	r3, [r7, #24]
  /* Clear DAC_MCR_HFSEL bits */
  tmpreg1 &= ~(DAC_MCR_HFSEL);
 8007958:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800795a:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 800795e:	627b      	str	r3, [r7, #36]	; 0x24
  /* Configure for both DAC channels: high frequency mode */
  if (DAC_HIGH_FREQUENCY_INTERFACE_MODE_AUTOMATIC == sConfig->DAC_HighFrequency)
 8007960:	68bb      	ldr	r3, [r7, #8]
 8007962:	681b      	ldr	r3, [r3, #0]
 8007964:	2b02      	cmp	r3, #2
 8007966:	d114      	bne.n	8007992 <HAL_DAC_ConfigChannel+0x252>
  {
    hclkfreq = HAL_RCC_GetHCLKFreq();
 8007968:	f001 fae0 	bl	8008f2c <HAL_RCC_GetHCLKFreq>
 800796c:	6178      	str	r0, [r7, #20]
    if (hclkfreq > HFSEL_ENABLE_THRESHOLD_160MHZ)
 800796e:	697b      	ldr	r3, [r7, #20]
 8007970:	4a47      	ldr	r2, [pc, #284]	; (8007a90 <HAL_DAC_ConfigChannel+0x350>)
 8007972:	4293      	cmp	r3, r2
 8007974:	d904      	bls.n	8007980 <HAL_DAC_ConfigChannel+0x240>
    {
      tmpreg1 |= DAC_HIGH_FREQUENCY_INTERFACE_MODE_ABOVE_160MHZ;
 8007976:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007978:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800797c:	627b      	str	r3, [r7, #36]	; 0x24
 800797e:	e00d      	b.n	800799c <HAL_DAC_ConfigChannel+0x25c>
    }
    else if (hclkfreq > HFSEL_ENABLE_THRESHOLD_80MHZ)
 8007980:	697b      	ldr	r3, [r7, #20]
 8007982:	4a44      	ldr	r2, [pc, #272]	; (8007a94 <HAL_DAC_ConfigChannel+0x354>)
 8007984:	4293      	cmp	r3, r2
 8007986:	d909      	bls.n	800799c <HAL_DAC_ConfigChannel+0x25c>
    {
      tmpreg1 |= DAC_HIGH_FREQUENCY_INTERFACE_MODE_ABOVE_80MHZ;
 8007988:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800798a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800798e:	627b      	str	r3, [r7, #36]	; 0x24
 8007990:	e004      	b.n	800799c <HAL_DAC_ConfigChannel+0x25c>
      tmpreg1 |= DAC_HIGH_FREQUENCY_INTERFACE_MODE_DISABLE;
    }
  }
  else
  {
    tmpreg1 |= sConfig->DAC_HighFrequency;
 8007992:	68bb      	ldr	r3, [r7, #8]
 8007994:	681b      	ldr	r3, [r3, #0]
 8007996:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007998:	4313      	orrs	r3, r2
 800799a:	627b      	str	r3, [r7, #36]	; 0x24
  }
  /* Calculate MCR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 800799c:	687b      	ldr	r3, [r7, #4]
 800799e:	f003 0310 	and.w	r3, r3, #16
 80079a2:	69ba      	ldr	r2, [r7, #24]
 80079a4:	fa02 f303 	lsl.w	r3, r2, r3
 80079a8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80079aa:	4313      	orrs	r3, r2
 80079ac:	627b      	str	r3, [r7, #36]	; 0x24
  /* Write to DAC MCR */
  hdac->Instance->MCR = tmpreg1;
 80079ae:	68fb      	ldr	r3, [r7, #12]
 80079b0:	681b      	ldr	r3, [r3, #0]
 80079b2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80079b4:	63da      	str	r2, [r3, #60]	; 0x3c

  /* DAC in normal operating mode hence clear DAC_CR_CENx bit */
  CLEAR_BIT(hdac->Instance->CR, DAC_CR_CEN1 << (Channel & 0x10UL));
 80079b6:	68fb      	ldr	r3, [r7, #12]
 80079b8:	681b      	ldr	r3, [r3, #0]
 80079ba:	6819      	ldr	r1, [r3, #0]
 80079bc:	687b      	ldr	r3, [r7, #4]
 80079be:	f003 0310 	and.w	r3, r3, #16
 80079c2:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80079c6:	fa02 f303 	lsl.w	r3, r2, r3
 80079ca:	43da      	mvns	r2, r3
 80079cc:	68fb      	ldr	r3, [r7, #12]
 80079ce:	681b      	ldr	r3, [r3, #0]
 80079d0:	400a      	ands	r2, r1
 80079d2:	601a      	str	r2, [r3, #0]

  /* Get the DAC CR value */
  tmpreg1 = hdac->Instance->CR;
 80079d4:	68fb      	ldr	r3, [r7, #12]
 80079d6:	681b      	ldr	r3, [r3, #0]
 80079d8:	681b      	ldr	r3, [r3, #0]
 80079da:	627b      	str	r3, [r7, #36]	; 0x24
  /* Clear TENx, TSELx, WAVEx and MAMPx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1)) << (Channel & 0x10UL));
 80079dc:	687b      	ldr	r3, [r7, #4]
 80079de:	f003 0310 	and.w	r3, r3, #16
 80079e2:	f640 72fe 	movw	r2, #4094	; 0xffe
 80079e6:	fa02 f303 	lsl.w	r3, r2, r3
 80079ea:	43db      	mvns	r3, r3
 80079ec:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80079ee:	4013      	ands	r3, r2
 80079f0:	627b      	str	r3, [r7, #36]	; 0x24
  /* Configure for the selected DAC channel: trigger */
  /* Set TSELx and TENx bits according to DAC_Trigger value */
  tmpreg2 = sConfig->DAC_Trigger;
 80079f2:	68bb      	ldr	r3, [r7, #8]
 80079f4:	68db      	ldr	r3, [r3, #12]
 80079f6:	61bb      	str	r3, [r7, #24]
  /* Calculate CR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 80079f8:	687b      	ldr	r3, [r7, #4]
 80079fa:	f003 0310 	and.w	r3, r3, #16
 80079fe:	69ba      	ldr	r2, [r7, #24]
 8007a00:	fa02 f303 	lsl.w	r3, r2, r3
 8007a04:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007a06:	4313      	orrs	r3, r2
 8007a08:	627b      	str	r3, [r7, #36]	; 0x24
  /* Write to DAC CR */
  hdac->Instance->CR = tmpreg1;
 8007a0a:	68fb      	ldr	r3, [r7, #12]
 8007a0c:	681b      	ldr	r3, [r3, #0]
 8007a0e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007a10:	601a      	str	r2, [r3, #0]
  /* Disable wave generation */
  hdac->Instance->CR &= ~(DAC_CR_WAVE1 << (Channel & 0x10UL));
 8007a12:	68fb      	ldr	r3, [r7, #12]
 8007a14:	681b      	ldr	r3, [r3, #0]
 8007a16:	6819      	ldr	r1, [r3, #0]
 8007a18:	687b      	ldr	r3, [r7, #4]
 8007a1a:	f003 0310 	and.w	r3, r3, #16
 8007a1e:	22c0      	movs	r2, #192	; 0xc0
 8007a20:	fa02 f303 	lsl.w	r3, r2, r3
 8007a24:	43da      	mvns	r2, r3
 8007a26:	68fb      	ldr	r3, [r7, #12]
 8007a28:	681b      	ldr	r3, [r3, #0]
 8007a2a:	400a      	ands	r2, r1
 8007a2c:	601a      	str	r2, [r3, #0]

  /* Set STRSTTRIGSELx and STINCTRIGSELx bits according to DAC_Trigger & DAC_Trigger2 values */
  tmpreg2 = ((sConfig->DAC_Trigger & DAC_CR_TSEL1) >> DAC_CR_TSEL1_Pos) << DAC_STMODR_STRSTTRIGSEL1_Pos;
 8007a2e:	68bb      	ldr	r3, [r7, #8]
 8007a30:	68db      	ldr	r3, [r3, #12]
 8007a32:	089b      	lsrs	r3, r3, #2
 8007a34:	f003 030f 	and.w	r3, r3, #15
 8007a38:	61bb      	str	r3, [r7, #24]
  tmpreg2 |= ((sConfig->DAC_Trigger2 & DAC_CR_TSEL1) >> DAC_CR_TSEL1_Pos) << DAC_STMODR_STINCTRIGSEL1_Pos;
 8007a3a:	68bb      	ldr	r3, [r7, #8]
 8007a3c:	691b      	ldr	r3, [r3, #16]
 8007a3e:	089b      	lsrs	r3, r3, #2
 8007a40:	021b      	lsls	r3, r3, #8
 8007a42:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 8007a46:	69ba      	ldr	r2, [r7, #24]
 8007a48:	4313      	orrs	r3, r2
 8007a4a:	61bb      	str	r3, [r7, #24]
  /* Modify STMODR register value depending on DAC_Channel */
  MODIFY_REG(hdac->Instance->STMODR, (DAC_STMODR_STINCTRIGSEL1 | DAC_STMODR_STRSTTRIGSEL1) << (Channel & 0x10UL), tmpreg2 << (Channel & 0x10UL));
 8007a4c:	68fb      	ldr	r3, [r7, #12]
 8007a4e:	681b      	ldr	r3, [r3, #0]
 8007a50:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8007a52:	687b      	ldr	r3, [r7, #4]
 8007a54:	f003 0310 	and.w	r3, r3, #16
 8007a58:	f640 710f 	movw	r1, #3855	; 0xf0f
 8007a5c:	fa01 f303 	lsl.w	r3, r1, r3
 8007a60:	43db      	mvns	r3, r3
 8007a62:	ea02 0103 	and.w	r1, r2, r3
 8007a66:	687b      	ldr	r3, [r7, #4]
 8007a68:	f003 0310 	and.w	r3, r3, #16
 8007a6c:	69ba      	ldr	r2, [r7, #24]
 8007a6e:	409a      	lsls	r2, r3
 8007a70:	68fb      	ldr	r3, [r7, #12]
 8007a72:	681b      	ldr	r3, [r3, #0]
 8007a74:	430a      	orrs	r2, r1
 8007a76:	661a      	str	r2, [r3, #96]	; 0x60
  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 8007a78:	68fb      	ldr	r3, [r7, #12]
 8007a7a:	2201      	movs	r2, #1
 8007a7c:	711a      	strb	r2, [r3, #4]

  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 8007a7e:	68fb      	ldr	r3, [r7, #12]
 8007a80:	2200      	movs	r2, #0
 8007a82:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 8007a84:	2300      	movs	r3, #0
}
 8007a86:	4618      	mov	r0, r3
 8007a88:	3728      	adds	r7, #40	; 0x28
 8007a8a:	46bd      	mov	sp, r7
 8007a8c:	bd80      	pop	{r7, pc}
 8007a8e:	bf00      	nop
 8007a90:	09896800 	.word	0x09896800
 8007a94:	04c4b400 	.word	0x04c4b400

08007a98 <DAC_DMAConvCpltCh1>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAConvCpltCh1(DMA_HandleTypeDef *hdma)
{
 8007a98:	b580      	push	{r7, lr}
 8007a9a:	b084      	sub	sp, #16
 8007a9c:	af00      	add	r7, sp, #0
 8007a9e:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8007aa0:	687b      	ldr	r3, [r7, #4]
 8007aa2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007aa4:	60fb      	str	r3, [r7, #12]

#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvCpltCallbackCh1(hdac);
#else
  HAL_DAC_ConvCpltCallbackCh1(hdac);
 8007aa6:	68f8      	ldr	r0, [r7, #12]
 8007aa8:	f7ff fe20 	bl	80076ec <HAL_DAC_ConvCpltCallbackCh1>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

  hdac->State = HAL_DAC_STATE_READY;
 8007aac:	68fb      	ldr	r3, [r7, #12]
 8007aae:	2201      	movs	r2, #1
 8007ab0:	711a      	strb	r2, [r3, #4]
}
 8007ab2:	bf00      	nop
 8007ab4:	3710      	adds	r7, #16
 8007ab6:	46bd      	mov	sp, r7
 8007ab8:	bd80      	pop	{r7, pc}

08007aba <DAC_DMAHalfConvCpltCh1>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAHalfConvCpltCh1(DMA_HandleTypeDef *hdma)
{
 8007aba:	b580      	push	{r7, lr}
 8007abc:	b084      	sub	sp, #16
 8007abe:	af00      	add	r7, sp, #0
 8007ac0:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8007ac2:	687b      	ldr	r3, [r7, #4]
 8007ac4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007ac6:	60fb      	str	r3, [r7, #12]
  /* Conversion complete callback */
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvHalfCpltCallbackCh1(hdac);
#else
  HAL_DAC_ConvHalfCpltCallbackCh1(hdac);
 8007ac8:	68f8      	ldr	r0, [r7, #12]
 8007aca:	f7ff fe19 	bl	8007700 <HAL_DAC_ConvHalfCpltCallbackCh1>
#endif  /* USE_HAL_DAC_REGISTER_CALLBACKS */
}
 8007ace:	bf00      	nop
 8007ad0:	3710      	adds	r7, #16
 8007ad2:	46bd      	mov	sp, r7
 8007ad4:	bd80      	pop	{r7, pc}

08007ad6 <DAC_DMAErrorCh1>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAErrorCh1(DMA_HandleTypeDef *hdma)
{
 8007ad6:	b580      	push	{r7, lr}
 8007ad8:	b084      	sub	sp, #16
 8007ada:	af00      	add	r7, sp, #0
 8007adc:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8007ade:	687b      	ldr	r3, [r7, #4]
 8007ae0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007ae2:	60fb      	str	r3, [r7, #12]

  /* Set DAC error code to DMA error */
  hdac->ErrorCode |= HAL_DAC_ERROR_DMA;
 8007ae4:	68fb      	ldr	r3, [r7, #12]
 8007ae6:	691b      	ldr	r3, [r3, #16]
 8007ae8:	f043 0204 	orr.w	r2, r3, #4
 8007aec:	68fb      	ldr	r3, [r7, #12]
 8007aee:	611a      	str	r2, [r3, #16]

#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ErrorCallbackCh1(hdac);
#else
  HAL_DAC_ErrorCallbackCh1(hdac);
 8007af0:	68f8      	ldr	r0, [r7, #12]
 8007af2:	f7fd f802 	bl	8004afa <HAL_DAC_ErrorCallbackCh1>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

  hdac->State = HAL_DAC_STATE_READY;
 8007af6:	68fb      	ldr	r3, [r7, #12]
 8007af8:	2201      	movs	r2, #1
 8007afa:	711a      	strb	r2, [r3, #4]
}
 8007afc:	bf00      	nop
 8007afe:	3710      	adds	r7, #16
 8007b00:	46bd      	mov	sp, r7
 8007b02:	bd80      	pop	{r7, pc}

08007b04 <HAL_DACEx_ConvCpltCallbackCh2>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DACEx_ConvCpltCallbackCh2(DAC_HandleTypeDef *hdac)
{
 8007b04:	b480      	push	{r7}
 8007b06:	b083      	sub	sp, #12
 8007b08:	af00      	add	r7, sp, #0
 8007b0a:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DACEx_ConvCpltCallbackCh2 could be implemented in the user file
   */
}
 8007b0c:	bf00      	nop
 8007b0e:	370c      	adds	r7, #12
 8007b10:	46bd      	mov	sp, r7
 8007b12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b16:	4770      	bx	lr

08007b18 <HAL_DACEx_ConvHalfCpltCallbackCh2>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DACEx_ConvHalfCpltCallbackCh2(DAC_HandleTypeDef *hdac)
{
 8007b18:	b480      	push	{r7}
 8007b1a:	b083      	sub	sp, #12
 8007b1c:	af00      	add	r7, sp, #0
 8007b1e:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DACEx_ConvHalfCpltCallbackCh2 could be implemented in the user file
   */
}
 8007b20:	bf00      	nop
 8007b22:	370c      	adds	r7, #12
 8007b24:	46bd      	mov	sp, r7
 8007b26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b2a:	4770      	bx	lr

08007b2c <HAL_DACEx_ErrorCallbackCh2>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DACEx_ErrorCallbackCh2(DAC_HandleTypeDef *hdac)
{
 8007b2c:	b480      	push	{r7}
 8007b2e:	b083      	sub	sp, #12
 8007b30:	af00      	add	r7, sp, #0
 8007b32:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DACEx_ErrorCallbackCh2 could be implemented in the user file
   */
}
 8007b34:	bf00      	nop
 8007b36:	370c      	adds	r7, #12
 8007b38:	46bd      	mov	sp, r7
 8007b3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b3e:	4770      	bx	lr

08007b40 <DAC_DMAConvCpltCh2>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAConvCpltCh2(DMA_HandleTypeDef *hdma)
{
 8007b40:	b580      	push	{r7, lr}
 8007b42:	b084      	sub	sp, #16
 8007b44:	af00      	add	r7, sp, #0
 8007b46:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8007b48:	687b      	ldr	r3, [r7, #4]
 8007b4a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007b4c:	60fb      	str	r3, [r7, #12]

#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvCpltCallbackCh2(hdac);
#else
  HAL_DACEx_ConvCpltCallbackCh2(hdac);
 8007b4e:	68f8      	ldr	r0, [r7, #12]
 8007b50:	f7ff ffd8 	bl	8007b04 <HAL_DACEx_ConvCpltCallbackCh2>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

  hdac->State = HAL_DAC_STATE_READY;
 8007b54:	68fb      	ldr	r3, [r7, #12]
 8007b56:	2201      	movs	r2, #1
 8007b58:	711a      	strb	r2, [r3, #4]
}
 8007b5a:	bf00      	nop
 8007b5c:	3710      	adds	r7, #16
 8007b5e:	46bd      	mov	sp, r7
 8007b60:	bd80      	pop	{r7, pc}

08007b62 <DAC_DMAHalfConvCpltCh2>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAHalfConvCpltCh2(DMA_HandleTypeDef *hdma)
{
 8007b62:	b580      	push	{r7, lr}
 8007b64:	b084      	sub	sp, #16
 8007b66:	af00      	add	r7, sp, #0
 8007b68:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8007b6a:	687b      	ldr	r3, [r7, #4]
 8007b6c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007b6e:	60fb      	str	r3, [r7, #12]
  /* Conversion complete callback */
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvHalfCpltCallbackCh2(hdac);
#else
  HAL_DACEx_ConvHalfCpltCallbackCh2(hdac);
 8007b70:	68f8      	ldr	r0, [r7, #12]
 8007b72:	f7ff ffd1 	bl	8007b18 <HAL_DACEx_ConvHalfCpltCallbackCh2>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
}
 8007b76:	bf00      	nop
 8007b78:	3710      	adds	r7, #16
 8007b7a:	46bd      	mov	sp, r7
 8007b7c:	bd80      	pop	{r7, pc}

08007b7e <DAC_DMAErrorCh2>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAErrorCh2(DMA_HandleTypeDef *hdma)
{
 8007b7e:	b580      	push	{r7, lr}
 8007b80:	b084      	sub	sp, #16
 8007b82:	af00      	add	r7, sp, #0
 8007b84:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8007b86:	687b      	ldr	r3, [r7, #4]
 8007b88:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007b8a:	60fb      	str	r3, [r7, #12]

  /* Set DAC error code to DMA error */
  hdac->ErrorCode |= HAL_DAC_ERROR_DMA;
 8007b8c:	68fb      	ldr	r3, [r7, #12]
 8007b8e:	691b      	ldr	r3, [r3, #16]
 8007b90:	f043 0204 	orr.w	r2, r3, #4
 8007b94:	68fb      	ldr	r3, [r7, #12]
 8007b96:	611a      	str	r2, [r3, #16]

#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ErrorCallbackCh2(hdac);
#else
  HAL_DACEx_ErrorCallbackCh2(hdac);
 8007b98:	68f8      	ldr	r0, [r7, #12]
 8007b9a:	f7ff ffc7 	bl	8007b2c <HAL_DACEx_ErrorCallbackCh2>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

  hdac->State = HAL_DAC_STATE_READY;
 8007b9e:	68fb      	ldr	r3, [r7, #12]
 8007ba0:	2201      	movs	r2, #1
 8007ba2:	711a      	strb	r2, [r3, #4]
}
 8007ba4:	bf00      	nop
 8007ba6:	3710      	adds	r7, #16
 8007ba8:	46bd      	mov	sp, r7
 8007baa:	bd80      	pop	{r7, pc}

08007bac <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8007bac:	b580      	push	{r7, lr}
 8007bae:	b084      	sub	sp, #16
 8007bb0:	af00      	add	r7, sp, #0
 8007bb2:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if (hdma == NULL)
 8007bb4:	687b      	ldr	r3, [r7, #4]
 8007bb6:	2b00      	cmp	r3, #0
 8007bb8:	d101      	bne.n	8007bbe <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 8007bba:	2301      	movs	r3, #1
 8007bbc:	e08d      	b.n	8007cda <HAL_DMA_Init+0x12e>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 8007bbe:	687b      	ldr	r3, [r7, #4]
 8007bc0:	681b      	ldr	r3, [r3, #0]
 8007bc2:	461a      	mov	r2, r3
 8007bc4:	4b47      	ldr	r3, [pc, #284]	; (8007ce4 <HAL_DMA_Init+0x138>)
 8007bc6:	429a      	cmp	r2, r3
 8007bc8:	d80f      	bhi.n	8007bea <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 8007bca:	687b      	ldr	r3, [r7, #4]
 8007bcc:	681b      	ldr	r3, [r3, #0]
 8007bce:	461a      	mov	r2, r3
 8007bd0:	4b45      	ldr	r3, [pc, #276]	; (8007ce8 <HAL_DMA_Init+0x13c>)
 8007bd2:	4413      	add	r3, r2
 8007bd4:	4a45      	ldr	r2, [pc, #276]	; (8007cec <HAL_DMA_Init+0x140>)
 8007bd6:	fba2 2303 	umull	r2, r3, r2, r3
 8007bda:	091b      	lsrs	r3, r3, #4
 8007bdc:	009a      	lsls	r2, r3, #2
 8007bde:	687b      	ldr	r3, [r7, #4]
 8007be0:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA1;
 8007be2:	687b      	ldr	r3, [r7, #4]
 8007be4:	4a42      	ldr	r2, [pc, #264]	; (8007cf0 <HAL_DMA_Init+0x144>)
 8007be6:	641a      	str	r2, [r3, #64]	; 0x40
 8007be8:	e00e      	b.n	8007c08 <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
 8007bea:	687b      	ldr	r3, [r7, #4]
 8007bec:	681b      	ldr	r3, [r3, #0]
 8007bee:	461a      	mov	r2, r3
 8007bf0:	4b40      	ldr	r3, [pc, #256]	; (8007cf4 <HAL_DMA_Init+0x148>)
 8007bf2:	4413      	add	r3, r2
 8007bf4:	4a3d      	ldr	r2, [pc, #244]	; (8007cec <HAL_DMA_Init+0x140>)
 8007bf6:	fba2 2303 	umull	r2, r3, r2, r3
 8007bfa:	091b      	lsrs	r3, r3, #4
 8007bfc:	009a      	lsls	r2, r3, #2
 8007bfe:	687b      	ldr	r3, [r7, #4]
 8007c00:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA2;
 8007c02:	687b      	ldr	r3, [r7, #4]
 8007c04:	4a3c      	ldr	r2, [pc, #240]	; (8007cf8 <HAL_DMA_Init+0x14c>)
 8007c06:	641a      	str	r2, [r3, #64]	; 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8007c08:	687b      	ldr	r3, [r7, #4]
 8007c0a:	2202      	movs	r2, #2
 8007c0c:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8007c10:	687b      	ldr	r3, [r7, #4]
 8007c12:	681b      	ldr	r3, [r3, #0]
 8007c14:	681b      	ldr	r3, [r3, #0]
 8007c16:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 8007c18:	68fb      	ldr	r3, [r7, #12]
 8007c1a:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 8007c1e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007c22:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8007c24:	687b      	ldr	r3, [r7, #4]
 8007c26:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8007c28:	687b      	ldr	r3, [r7, #4]
 8007c2a:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 8007c2c:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8007c2e:	687b      	ldr	r3, [r7, #4]
 8007c30:	691b      	ldr	r3, [r3, #16]
 8007c32:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8007c34:	687b      	ldr	r3, [r7, #4]
 8007c36:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8007c38:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8007c3a:	687b      	ldr	r3, [r7, #4]
 8007c3c:	699b      	ldr	r3, [r3, #24]
 8007c3e:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8007c40:	687b      	ldr	r3, [r7, #4]
 8007c42:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8007c44:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8007c46:	687b      	ldr	r3, [r7, #4]
 8007c48:	6a1b      	ldr	r3, [r3, #32]
 8007c4a:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8007c4c:	68fa      	ldr	r2, [r7, #12]
 8007c4e:	4313      	orrs	r3, r2
 8007c50:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8007c52:	687b      	ldr	r3, [r7, #4]
 8007c54:	681b      	ldr	r3, [r3, #0]
 8007c56:	68fa      	ldr	r2, [r7, #12]
 8007c58:	601a      	str	r2, [r3, #0]

  /* Initialize parameters for DMAMUX channel :
     DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
  */
  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 8007c5a:	6878      	ldr	r0, [r7, #4]
 8007c5c:	f000 fa10 	bl	8008080 <DMA_CalcDMAMUXChannelBaseAndMask>

  if (hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8007c60:	687b      	ldr	r3, [r7, #4]
 8007c62:	689b      	ldr	r3, [r3, #8]
 8007c64:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8007c68:	d102      	bne.n	8007c70 <HAL_DMA_Init+0xc4>
  {
    /* if memory to memory force the request to 0*/
    hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 8007c6a:	687b      	ldr	r3, [r7, #4]
 8007c6c:	2200      	movs	r2, #0
 8007c6e:	605a      	str	r2, [r3, #4]
  }

  /* Set peripheral request  to DMAMUX channel */
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8007c70:	687b      	ldr	r3, [r7, #4]
 8007c72:	685a      	ldr	r2, [r3, #4]
 8007c74:	687b      	ldr	r3, [r7, #4]
 8007c76:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007c78:	b2d2      	uxtb	r2, r2
 8007c7a:	601a      	str	r2, [r3, #0]

  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8007c7c:	687b      	ldr	r3, [r7, #4]
 8007c7e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007c80:	687a      	ldr	r2, [r7, #4]
 8007c82:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8007c84:	605a      	str	r2, [r3, #4]

  if (((hdma->Init.Request >  0U) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 8007c86:	687b      	ldr	r3, [r7, #4]
 8007c88:	685b      	ldr	r3, [r3, #4]
 8007c8a:	2b00      	cmp	r3, #0
 8007c8c:	d010      	beq.n	8007cb0 <HAL_DMA_Init+0x104>
 8007c8e:	687b      	ldr	r3, [r7, #4]
 8007c90:	685b      	ldr	r3, [r3, #4]
 8007c92:	2b04      	cmp	r3, #4
 8007c94:	d80c      	bhi.n	8007cb0 <HAL_DMA_Init+0x104>
  {
    /* Initialize parameters for DMAMUX request generator :
       DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask
    */
    DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 8007c96:	6878      	ldr	r0, [r7, #4]
 8007c98:	f000 fa30 	bl	80080fc <DMA_CalcDMAMUXRequestGenBaseAndMask>

    /* Reset the DMAMUX request generator register*/
    hdma->DMAmuxRequestGen->RGCR = 0U;
 8007c9c:	687b      	ldr	r3, [r7, #4]
 8007c9e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007ca0:	2200      	movs	r2, #0
 8007ca2:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8007ca4:	687b      	ldr	r3, [r7, #4]
 8007ca6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007ca8:	687a      	ldr	r2, [r7, #4]
 8007caa:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 8007cac:	605a      	str	r2, [r3, #4]
 8007cae:	e008      	b.n	8007cc2 <HAL_DMA_Init+0x116>
  }
  else
  {
    hdma->DMAmuxRequestGen = 0U;
 8007cb0:	687b      	ldr	r3, [r7, #4]
 8007cb2:	2200      	movs	r2, #0
 8007cb4:	655a      	str	r2, [r3, #84]	; 0x54
    hdma->DMAmuxRequestGenStatus = 0U;
 8007cb6:	687b      	ldr	r3, [r7, #4]
 8007cb8:	2200      	movs	r2, #0
 8007cba:	659a      	str	r2, [r3, #88]	; 0x58
    hdma->DMAmuxRequestGenStatusMask = 0U;
 8007cbc:	687b      	ldr	r3, [r7, #4]
 8007cbe:	2200      	movs	r2, #0
 8007cc0:	65da      	str	r2, [r3, #92]	; 0x5c
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8007cc2:	687b      	ldr	r3, [r7, #4]
 8007cc4:	2200      	movs	r2, #0
 8007cc6:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA state*/
  hdma->State  = HAL_DMA_STATE_READY;
 8007cc8:	687b      	ldr	r3, [r7, #4]
 8007cca:	2201      	movs	r2, #1
 8007ccc:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8007cd0:	687b      	ldr	r3, [r7, #4]
 8007cd2:	2200      	movs	r2, #0
 8007cd4:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  return HAL_OK;
 8007cd8:	2300      	movs	r3, #0
}
 8007cda:	4618      	mov	r0, r3
 8007cdc:	3710      	adds	r7, #16
 8007cde:	46bd      	mov	sp, r7
 8007ce0:	bd80      	pop	{r7, pc}
 8007ce2:	bf00      	nop
 8007ce4:	40020407 	.word	0x40020407
 8007ce8:	bffdfff8 	.word	0xbffdfff8
 8007cec:	cccccccd 	.word	0xcccccccd
 8007cf0:	40020000 	.word	0x40020000
 8007cf4:	bffdfbf8 	.word	0xbffdfbf8
 8007cf8:	40020400 	.word	0x40020400

08007cfc <HAL_DMA_Start_IT>:
  * @param  DataLength The length of data to be transferred from source to destination (up to 256Kbytes-1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress,
                                   uint32_t DataLength)
{
 8007cfc:	b580      	push	{r7, lr}
 8007cfe:	b086      	sub	sp, #24
 8007d00:	af00      	add	r7, sp, #0
 8007d02:	60f8      	str	r0, [r7, #12]
 8007d04:	60b9      	str	r1, [r7, #8]
 8007d06:	607a      	str	r2, [r7, #4]
 8007d08:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8007d0a:	2300      	movs	r3, #0
 8007d0c:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8007d0e:	68fb      	ldr	r3, [r7, #12]
 8007d10:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8007d14:	2b01      	cmp	r3, #1
 8007d16:	d101      	bne.n	8007d1c <HAL_DMA_Start_IT+0x20>
 8007d18:	2302      	movs	r3, #2
 8007d1a:	e066      	b.n	8007dea <HAL_DMA_Start_IT+0xee>
 8007d1c:	68fb      	ldr	r3, [r7, #12]
 8007d1e:	2201      	movs	r2, #1
 8007d20:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  if (HAL_DMA_STATE_READY == hdma->State)
 8007d24:	68fb      	ldr	r3, [r7, #12]
 8007d26:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8007d2a:	b2db      	uxtb	r3, r3
 8007d2c:	2b01      	cmp	r3, #1
 8007d2e:	d155      	bne.n	8007ddc <HAL_DMA_Start_IT+0xe0>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8007d30:	68fb      	ldr	r3, [r7, #12]
 8007d32:	2202      	movs	r2, #2
 8007d34:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8007d38:	68fb      	ldr	r3, [r7, #12]
 8007d3a:	2200      	movs	r2, #0
 8007d3c:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8007d3e:	68fb      	ldr	r3, [r7, #12]
 8007d40:	681b      	ldr	r3, [r3, #0]
 8007d42:	681a      	ldr	r2, [r3, #0]
 8007d44:	68fb      	ldr	r3, [r7, #12]
 8007d46:	681b      	ldr	r3, [r3, #0]
 8007d48:	f022 0201 	bic.w	r2, r2, #1
 8007d4c:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8007d4e:	683b      	ldr	r3, [r7, #0]
 8007d50:	687a      	ldr	r2, [r7, #4]
 8007d52:	68b9      	ldr	r1, [r7, #8]
 8007d54:	68f8      	ldr	r0, [r7, #12]
 8007d56:	f000 f954 	bl	8008002 <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if (NULL != hdma->XferHalfCpltCallback)
 8007d5a:	68fb      	ldr	r3, [r7, #12]
 8007d5c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007d5e:	2b00      	cmp	r3, #0
 8007d60:	d008      	beq.n	8007d74 <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8007d62:	68fb      	ldr	r3, [r7, #12]
 8007d64:	681b      	ldr	r3, [r3, #0]
 8007d66:	681a      	ldr	r2, [r3, #0]
 8007d68:	68fb      	ldr	r3, [r7, #12]
 8007d6a:	681b      	ldr	r3, [r3, #0]
 8007d6c:	f042 020e 	orr.w	r2, r2, #14
 8007d70:	601a      	str	r2, [r3, #0]
 8007d72:	e00f      	b.n	8007d94 <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8007d74:	68fb      	ldr	r3, [r7, #12]
 8007d76:	681b      	ldr	r3, [r3, #0]
 8007d78:	681a      	ldr	r2, [r3, #0]
 8007d7a:	68fb      	ldr	r3, [r7, #12]
 8007d7c:	681b      	ldr	r3, [r3, #0]
 8007d7e:	f022 0204 	bic.w	r2, r2, #4
 8007d82:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8007d84:	68fb      	ldr	r3, [r7, #12]
 8007d86:	681b      	ldr	r3, [r3, #0]
 8007d88:	681a      	ldr	r2, [r3, #0]
 8007d8a:	68fb      	ldr	r3, [r7, #12]
 8007d8c:	681b      	ldr	r3, [r3, #0]
 8007d8e:	f042 020a 	orr.w	r2, r2, #10
 8007d92:	601a      	str	r2, [r3, #0]
    }

    /* Check if DMAMUX Synchronization is enabled*/
    if ((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 8007d94:	68fb      	ldr	r3, [r7, #12]
 8007d96:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007d98:	681b      	ldr	r3, [r3, #0]
 8007d9a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8007d9e:	2b00      	cmp	r3, #0
 8007da0:	d007      	beq.n	8007db2 <HAL_DMA_Start_IT+0xb6>
    {
      /* Enable DMAMUX sync overrun IT*/
      hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 8007da2:	68fb      	ldr	r3, [r7, #12]
 8007da4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007da6:	681a      	ldr	r2, [r3, #0]
 8007da8:	68fb      	ldr	r3, [r7, #12]
 8007daa:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007dac:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8007db0:	601a      	str	r2, [r3, #0]
    }

    if (hdma->DMAmuxRequestGen != 0U)
 8007db2:	68fb      	ldr	r3, [r7, #12]
 8007db4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007db6:	2b00      	cmp	r3, #0
 8007db8:	d007      	beq.n	8007dca <HAL_DMA_Start_IT+0xce>
    {
      /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
      /* enable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 8007dba:	68fb      	ldr	r3, [r7, #12]
 8007dbc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007dbe:	681a      	ldr	r2, [r3, #0]
 8007dc0:	68fb      	ldr	r3, [r7, #12]
 8007dc2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007dc4:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8007dc8:	601a      	str	r2, [r3, #0]
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8007dca:	68fb      	ldr	r3, [r7, #12]
 8007dcc:	681b      	ldr	r3, [r3, #0]
 8007dce:	681a      	ldr	r2, [r3, #0]
 8007dd0:	68fb      	ldr	r3, [r7, #12]
 8007dd2:	681b      	ldr	r3, [r3, #0]
 8007dd4:	f042 0201 	orr.w	r2, r2, #1
 8007dd8:	601a      	str	r2, [r3, #0]
 8007dda:	e005      	b.n	8007de8 <HAL_DMA_Start_IT+0xec>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8007ddc:	68fb      	ldr	r3, [r7, #12]
 8007dde:	2200      	movs	r2, #0
 8007de0:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Remain BUSY */
    status = HAL_BUSY;
 8007de4:	2302      	movs	r3, #2
 8007de6:	75fb      	strb	r3, [r7, #23]
  }
  return status;
 8007de8:	7dfb      	ldrb	r3, [r7, #23]
}
 8007dea:	4618      	mov	r0, r3
 8007dec:	3718      	adds	r7, #24
 8007dee:	46bd      	mov	sp, r7
 8007df0:	bd80      	pop	{r7, pc}

08007df2 <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8007df2:	b480      	push	{r7}
 8007df4:	b085      	sub	sp, #20
 8007df6:	af00      	add	r7, sp, #0
 8007df8:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8007dfa:	2300      	movs	r3, #0
 8007dfc:	73fb      	strb	r3, [r7, #15]

  if(hdma->State != HAL_DMA_STATE_BUSY)
 8007dfe:	687b      	ldr	r3, [r7, #4]
 8007e00:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8007e04:	b2db      	uxtb	r3, r3
 8007e06:	2b02      	cmp	r3, #2
 8007e08:	d005      	beq.n	8007e16 <HAL_DMA_Abort+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8007e0a:	687b      	ldr	r3, [r7, #4]
 8007e0c:	2204      	movs	r2, #4
 8007e0e:	63da      	str	r2, [r3, #60]	; 0x3c

    status = HAL_ERROR;
 8007e10:	2301      	movs	r3, #1
 8007e12:	73fb      	strb	r3, [r7, #15]
 8007e14:	e037      	b.n	8007e86 <HAL_DMA_Abort+0x94>
  }
  else
  {
     /* Disable DMA IT */
     __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8007e16:	687b      	ldr	r3, [r7, #4]
 8007e18:	681b      	ldr	r3, [r3, #0]
 8007e1a:	681a      	ldr	r2, [r3, #0]
 8007e1c:	687b      	ldr	r3, [r7, #4]
 8007e1e:	681b      	ldr	r3, [r3, #0]
 8007e20:	f022 020e 	bic.w	r2, r2, #14
 8007e24:	601a      	str	r2, [r3, #0]
     
     /* disable the DMAMUX sync overrun IT*/
     hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8007e26:	687b      	ldr	r3, [r7, #4]
 8007e28:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007e2a:	681a      	ldr	r2, [r3, #0]
 8007e2c:	687b      	ldr	r3, [r7, #4]
 8007e2e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007e30:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8007e34:	601a      	str	r2, [r3, #0]
     
     /* Disable the channel */
     __HAL_DMA_DISABLE(hdma);
 8007e36:	687b      	ldr	r3, [r7, #4]
 8007e38:	681b      	ldr	r3, [r3, #0]
 8007e3a:	681a      	ldr	r2, [r3, #0]
 8007e3c:	687b      	ldr	r3, [r7, #4]
 8007e3e:	681b      	ldr	r3, [r3, #0]
 8007e40:	f022 0201 	bic.w	r2, r2, #1
 8007e44:	601a      	str	r2, [r3, #0]
     
     /* Clear all flags */
     hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 8007e46:	687b      	ldr	r3, [r7, #4]
 8007e48:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007e4a:	f003 021f 	and.w	r2, r3, #31
 8007e4e:	687b      	ldr	r3, [r7, #4]
 8007e50:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007e52:	2101      	movs	r1, #1
 8007e54:	fa01 f202 	lsl.w	r2, r1, r2
 8007e58:	605a      	str	r2, [r3, #4]
     
     /* Clear the DMAMUX synchro overrun flag */
     hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8007e5a:	687b      	ldr	r3, [r7, #4]
 8007e5c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007e5e:	687a      	ldr	r2, [r7, #4]
 8007e60:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8007e62:	605a      	str	r2, [r3, #4]
     
     if (hdma->DMAmuxRequestGen != 0U)
 8007e64:	687b      	ldr	r3, [r7, #4]
 8007e66:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007e68:	2b00      	cmp	r3, #0
 8007e6a:	d00c      	beq.n	8007e86 <HAL_DMA_Abort+0x94>
     {
       /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
       /* disable the request gen overrun IT*/
       hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8007e6c:	687b      	ldr	r3, [r7, #4]
 8007e6e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007e70:	681a      	ldr	r2, [r3, #0]
 8007e72:	687b      	ldr	r3, [r7, #4]
 8007e74:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007e76:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8007e7a:	601a      	str	r2, [r3, #0]
     
       /* Clear the DMAMUX request generator overrun flag */
       hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8007e7c:	687b      	ldr	r3, [r7, #4]
 8007e7e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007e80:	687a      	ldr	r2, [r7, #4]
 8007e82:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 8007e84:	605a      	str	r2, [r3, #4]
     }
  }  
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8007e86:	687b      	ldr	r3, [r7, #4]
 8007e88:	2201      	movs	r2, #1
 8007e8a:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);
 8007e8e:	687b      	ldr	r3, [r7, #4]
 8007e90:	2200      	movs	r2, #0
 8007e92:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  return status;
 8007e96:	7bfb      	ldrb	r3, [r7, #15]
}
 8007e98:	4618      	mov	r0, r3
 8007e9a:	3714      	adds	r7, #20
 8007e9c:	46bd      	mov	sp, r7
 8007e9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ea2:	4770      	bx	lr

08007ea4 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8007ea4:	b580      	push	{r7, lr}
 8007ea6:	b084      	sub	sp, #16
 8007ea8:	af00      	add	r7, sp, #0
 8007eaa:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8007eac:	687b      	ldr	r3, [r7, #4]
 8007eae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007eb0:	681b      	ldr	r3, [r3, #0]
 8007eb2:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8007eb4:	687b      	ldr	r3, [r7, #4]
 8007eb6:	681b      	ldr	r3, [r3, #0]
 8007eb8:	681b      	ldr	r3, [r3, #0]
 8007eba:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if ((0U != (flag_it & ((uint32_t)DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1FU)))) && (0U != (source_it & DMA_IT_HT)))
 8007ebc:	687b      	ldr	r3, [r7, #4]
 8007ebe:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007ec0:	f003 031f 	and.w	r3, r3, #31
 8007ec4:	2204      	movs	r2, #4
 8007ec6:	409a      	lsls	r2, r3
 8007ec8:	68fb      	ldr	r3, [r7, #12]
 8007eca:	4013      	ands	r3, r2
 8007ecc:	2b00      	cmp	r3, #0
 8007ece:	d026      	beq.n	8007f1e <HAL_DMA_IRQHandler+0x7a>
 8007ed0:	68bb      	ldr	r3, [r7, #8]
 8007ed2:	f003 0304 	and.w	r3, r3, #4
 8007ed6:	2b00      	cmp	r3, #0
 8007ed8:	d021      	beq.n	8007f1e <HAL_DMA_IRQHandler+0x7a>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8007eda:	687b      	ldr	r3, [r7, #4]
 8007edc:	681b      	ldr	r3, [r3, #0]
 8007ede:	681b      	ldr	r3, [r3, #0]
 8007ee0:	f003 0320 	and.w	r3, r3, #32
 8007ee4:	2b00      	cmp	r3, #0
 8007ee6:	d107      	bne.n	8007ef8 <HAL_DMA_IRQHandler+0x54>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8007ee8:	687b      	ldr	r3, [r7, #4]
 8007eea:	681b      	ldr	r3, [r3, #0]
 8007eec:	681a      	ldr	r2, [r3, #0]
 8007eee:	687b      	ldr	r3, [r7, #4]
 8007ef0:	681b      	ldr	r3, [r3, #0]
 8007ef2:	f022 0204 	bic.w	r2, r2, #4
 8007ef6:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1FU));
 8007ef8:	687b      	ldr	r3, [r7, #4]
 8007efa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007efc:	f003 021f 	and.w	r2, r3, #31
 8007f00:	687b      	ldr	r3, [r7, #4]
 8007f02:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007f04:	2104      	movs	r1, #4
 8007f06:	fa01 f202 	lsl.w	r2, r1, r2
 8007f0a:	605a      	str	r2, [r3, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if (hdma->XferHalfCpltCallback != NULL)
 8007f0c:	687b      	ldr	r3, [r7, #4]
 8007f0e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007f10:	2b00      	cmp	r3, #0
 8007f12:	d071      	beq.n	8007ff8 <HAL_DMA_IRQHandler+0x154>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 8007f14:	687b      	ldr	r3, [r7, #4]
 8007f16:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007f18:	6878      	ldr	r0, [r7, #4]
 8007f1a:	4798      	blx	r3
    if (hdma->XferHalfCpltCallback != NULL)
 8007f1c:	e06c      	b.n	8007ff8 <HAL_DMA_IRQHandler+0x154>
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  else if ((0U != (flag_it & ((uint32_t)DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1FU))))
 8007f1e:	687b      	ldr	r3, [r7, #4]
 8007f20:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007f22:	f003 031f 	and.w	r3, r3, #31
 8007f26:	2202      	movs	r2, #2
 8007f28:	409a      	lsls	r2, r3
 8007f2a:	68fb      	ldr	r3, [r7, #12]
 8007f2c:	4013      	ands	r3, r2
 8007f2e:	2b00      	cmp	r3, #0
 8007f30:	d02e      	beq.n	8007f90 <HAL_DMA_IRQHandler+0xec>
           && (0U != (source_it & DMA_IT_TC)))
 8007f32:	68bb      	ldr	r3, [r7, #8]
 8007f34:	f003 0302 	and.w	r3, r3, #2
 8007f38:	2b00      	cmp	r3, #0
 8007f3a:	d029      	beq.n	8007f90 <HAL_DMA_IRQHandler+0xec>
  {
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8007f3c:	687b      	ldr	r3, [r7, #4]
 8007f3e:	681b      	ldr	r3, [r3, #0]
 8007f40:	681b      	ldr	r3, [r3, #0]
 8007f42:	f003 0320 	and.w	r3, r3, #32
 8007f46:	2b00      	cmp	r3, #0
 8007f48:	d10b      	bne.n	8007f62 <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8007f4a:	687b      	ldr	r3, [r7, #4]
 8007f4c:	681b      	ldr	r3, [r3, #0]
 8007f4e:	681a      	ldr	r2, [r3, #0]
 8007f50:	687b      	ldr	r3, [r7, #4]
 8007f52:	681b      	ldr	r3, [r3, #0]
 8007f54:	f022 020a 	bic.w	r2, r2, #10
 8007f58:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8007f5a:	687b      	ldr	r3, [r7, #4]
 8007f5c:	2201      	movs	r2, #1
 8007f5e:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1FU));
 8007f62:	687b      	ldr	r3, [r7, #4]
 8007f64:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007f66:	f003 021f 	and.w	r2, r3, #31
 8007f6a:	687b      	ldr	r3, [r7, #4]
 8007f6c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007f6e:	2102      	movs	r1, #2
 8007f70:	fa01 f202 	lsl.w	r2, r1, r2
 8007f74:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8007f76:	687b      	ldr	r3, [r7, #4]
 8007f78:	2200      	movs	r2, #0
 8007f7a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferCpltCallback != NULL)
 8007f7e:	687b      	ldr	r3, [r7, #4]
 8007f80:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007f82:	2b00      	cmp	r3, #0
 8007f84:	d038      	beq.n	8007ff8 <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8007f86:	687b      	ldr	r3, [r7, #4]
 8007f88:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007f8a:	6878      	ldr	r0, [r7, #4]
 8007f8c:	4798      	blx	r3
    if (hdma->XferCpltCallback != NULL)
 8007f8e:	e033      	b.n	8007ff8 <HAL_DMA_IRQHandler+0x154>
    }
  }
  /* Transfer Error Interrupt management **************************************/
  else if ((0U != (flag_it & ((uint32_t)DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1FU))))
 8007f90:	687b      	ldr	r3, [r7, #4]
 8007f92:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007f94:	f003 031f 	and.w	r3, r3, #31
 8007f98:	2208      	movs	r2, #8
 8007f9a:	409a      	lsls	r2, r3
 8007f9c:	68fb      	ldr	r3, [r7, #12]
 8007f9e:	4013      	ands	r3, r2
 8007fa0:	2b00      	cmp	r3, #0
 8007fa2:	d02a      	beq.n	8007ffa <HAL_DMA_IRQHandler+0x156>
           && (0U != (source_it & DMA_IT_TE)))
 8007fa4:	68bb      	ldr	r3, [r7, #8]
 8007fa6:	f003 0308 	and.w	r3, r3, #8
 8007faa:	2b00      	cmp	r3, #0
 8007fac:	d025      	beq.n	8007ffa <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8007fae:	687b      	ldr	r3, [r7, #4]
 8007fb0:	681b      	ldr	r3, [r3, #0]
 8007fb2:	681a      	ldr	r2, [r3, #0]
 8007fb4:	687b      	ldr	r3, [r7, #4]
 8007fb6:	681b      	ldr	r3, [r3, #0]
 8007fb8:	f022 020e 	bic.w	r2, r2, #14
 8007fbc:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 8007fbe:	687b      	ldr	r3, [r7, #4]
 8007fc0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007fc2:	f003 021f 	and.w	r2, r3, #31
 8007fc6:	687b      	ldr	r3, [r7, #4]
 8007fc8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007fca:	2101      	movs	r1, #1
 8007fcc:	fa01 f202 	lsl.w	r2, r1, r2
 8007fd0:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8007fd2:	687b      	ldr	r3, [r7, #4]
 8007fd4:	2201      	movs	r2, #1
 8007fd6:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8007fd8:	687b      	ldr	r3, [r7, #4]
 8007fda:	2201      	movs	r2, #1
 8007fdc:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8007fe0:	687b      	ldr	r3, [r7, #4]
 8007fe2:	2200      	movs	r2, #0
 8007fe4:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferErrorCallback != NULL)
 8007fe8:	687b      	ldr	r3, [r7, #4]
 8007fea:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007fec:	2b00      	cmp	r3, #0
 8007fee:	d004      	beq.n	8007ffa <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8007ff0:	687b      	ldr	r3, [r7, #4]
 8007ff2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007ff4:	6878      	ldr	r0, [r7, #4]
 8007ff6:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 8007ff8:	bf00      	nop
 8007ffa:	bf00      	nop
}
 8007ffc:	3710      	adds	r7, #16
 8007ffe:	46bd      	mov	sp, r7
 8008000:	bd80      	pop	{r7, pc}

08008002 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8008002:	b480      	push	{r7}
 8008004:	b085      	sub	sp, #20
 8008006:	af00      	add	r7, sp, #0
 8008008:	60f8      	str	r0, [r7, #12]
 800800a:	60b9      	str	r1, [r7, #8]
 800800c:	607a      	str	r2, [r7, #4]
 800800e:	603b      	str	r3, [r7, #0]
  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8008010:	68fb      	ldr	r3, [r7, #12]
 8008012:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008014:	68fa      	ldr	r2, [r7, #12]
 8008016:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8008018:	605a      	str	r2, [r3, #4]

  if (hdma->DMAmuxRequestGen != 0U)
 800801a:	68fb      	ldr	r3, [r7, #12]
 800801c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800801e:	2b00      	cmp	r3, #0
 8008020:	d004      	beq.n	800802c <DMA_SetConfig+0x2a>
  {
    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8008022:	68fb      	ldr	r3, [r7, #12]
 8008024:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008026:	68fa      	ldr	r2, [r7, #12]
 8008028:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 800802a:	605a      	str	r2, [r3, #4]
  }

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 800802c:	68fb      	ldr	r3, [r7, #12]
 800802e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008030:	f003 021f 	and.w	r2, r3, #31
 8008034:	68fb      	ldr	r3, [r7, #12]
 8008036:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008038:	2101      	movs	r1, #1
 800803a:	fa01 f202 	lsl.w	r2, r1, r2
 800803e:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8008040:	68fb      	ldr	r3, [r7, #12]
 8008042:	681b      	ldr	r3, [r3, #0]
 8008044:	683a      	ldr	r2, [r7, #0]
 8008046:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if ((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8008048:	68fb      	ldr	r3, [r7, #12]
 800804a:	689b      	ldr	r3, [r3, #8]
 800804c:	2b10      	cmp	r3, #16
 800804e:	d108      	bne.n	8008062 <DMA_SetConfig+0x60>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8008050:	68fb      	ldr	r3, [r7, #12]
 8008052:	681b      	ldr	r3, [r3, #0]
 8008054:	687a      	ldr	r2, [r7, #4]
 8008056:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8008058:	68fb      	ldr	r3, [r7, #12]
 800805a:	681b      	ldr	r3, [r3, #0]
 800805c:	68ba      	ldr	r2, [r7, #8]
 800805e:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8008060:	e007      	b.n	8008072 <DMA_SetConfig+0x70>
    hdma->Instance->CPAR = SrcAddress;
 8008062:	68fb      	ldr	r3, [r7, #12]
 8008064:	681b      	ldr	r3, [r3, #0]
 8008066:	68ba      	ldr	r2, [r7, #8]
 8008068:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 800806a:	68fb      	ldr	r3, [r7, #12]
 800806c:	681b      	ldr	r3, [r3, #0]
 800806e:	687a      	ldr	r2, [r7, #4]
 8008070:	60da      	str	r2, [r3, #12]
}
 8008072:	bf00      	nop
 8008074:	3714      	adds	r7, #20
 8008076:	46bd      	mov	sp, r7
 8008078:	f85d 7b04 	ldr.w	r7, [sp], #4
 800807c:	4770      	bx	lr
	...

08008080 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma        pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval None
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8008080:	b480      	push	{r7}
 8008082:	b087      	sub	sp, #28
 8008084:	af00      	add	r7, sp, #0
 8008086:	6078      	str	r0, [r7, #4]
  uint32_t dmamux_base_addr;
  uint32_t channel_number;
  DMAMUX_Channel_TypeDef *DMAMUX1_ChannelBase;

  /* check if instance is not outside the DMA channel range */
  if ((uint32_t)hdma->Instance < (uint32_t)DMA2_Channel1)
 8008088:	687b      	ldr	r3, [r7, #4]
 800808a:	681b      	ldr	r3, [r3, #0]
 800808c:	461a      	mov	r2, r3
 800808e:	4b16      	ldr	r3, [pc, #88]	; (80080e8 <DMA_CalcDMAMUXChannelBaseAndMask+0x68>)
 8008090:	429a      	cmp	r2, r3
 8008092:	d802      	bhi.n	800809a <DMA_CalcDMAMUXChannelBaseAndMask+0x1a>
  {
    /* DMA1 */
    DMAMUX1_ChannelBase = DMAMUX1_Channel0;
 8008094:	4b15      	ldr	r3, [pc, #84]	; (80080ec <DMA_CalcDMAMUXChannelBaseAndMask+0x6c>)
 8008096:	617b      	str	r3, [r7, #20]
 8008098:	e001      	b.n	800809e <DMA_CalcDMAMUXChannelBaseAndMask+0x1e>
  }
  else
  {
    /* DMA2 */
#if defined (STM32G471xx) || defined (STM32G473xx) || defined (STM32G474xx) || defined (STM32G483xx) || defined (STM32G484xx)
    DMAMUX1_ChannelBase = DMAMUX1_Channel8;
 800809a:	4b15      	ldr	r3, [pc, #84]	; (80080f0 <DMA_CalcDMAMUXChannelBaseAndMask+0x70>)
 800809c:	617b      	str	r3, [r7, #20]
    DMAMUX1_ChannelBase = DMAMUX1_Channel6;
#else
    DMAMUX1_ChannelBase = DMAMUX1_Channel7;
#endif /* STM32G4x1xx) */
  }
  dmamux_base_addr = (uint32_t)DMAMUX1_ChannelBase;
 800809e:	697b      	ldr	r3, [r7, #20]
 80080a0:	613b      	str	r3, [r7, #16]
  channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 80080a2:	687b      	ldr	r3, [r7, #4]
 80080a4:	681b      	ldr	r3, [r3, #0]
 80080a6:	b2db      	uxtb	r3, r3
 80080a8:	3b08      	subs	r3, #8
 80080aa:	4a12      	ldr	r2, [pc, #72]	; (80080f4 <DMA_CalcDMAMUXChannelBaseAndMask+0x74>)
 80080ac:	fba2 2303 	umull	r2, r3, r2, r3
 80080b0:	091b      	lsrs	r3, r3, #4
 80080b2:	60fb      	str	r3, [r7, #12]
  hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)(uint32_t)(dmamux_base_addr + ((hdma->ChannelIndex >> 2U) * ((uint32_t)DMAMUX1_Channel1 - (uint32_t)DMAMUX1_Channel0)));
 80080b4:	687b      	ldr	r3, [r7, #4]
 80080b6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80080b8:	089b      	lsrs	r3, r3, #2
 80080ba:	009a      	lsls	r2, r3, #2
 80080bc:	693b      	ldr	r3, [r7, #16]
 80080be:	4413      	add	r3, r2
 80080c0:	461a      	mov	r2, r3
 80080c2:	687b      	ldr	r3, [r7, #4]
 80080c4:	649a      	str	r2, [r3, #72]	; 0x48
  hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 80080c6:	687b      	ldr	r3, [r7, #4]
 80080c8:	4a0b      	ldr	r2, [pc, #44]	; (80080f8 <DMA_CalcDMAMUXChannelBaseAndMask+0x78>)
 80080ca:	64da      	str	r2, [r3, #76]	; 0x4c
  hdma->DMAmuxChannelStatusMask = 1UL << (channel_number & 0x1FU);
 80080cc:	68fb      	ldr	r3, [r7, #12]
 80080ce:	f003 031f 	and.w	r3, r3, #31
 80080d2:	2201      	movs	r2, #1
 80080d4:	409a      	lsls	r2, r3
 80080d6:	687b      	ldr	r3, [r7, #4]
 80080d8:	651a      	str	r2, [r3, #80]	; 0x50
}
 80080da:	bf00      	nop
 80080dc:	371c      	adds	r7, #28
 80080de:	46bd      	mov	sp, r7
 80080e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080e4:	4770      	bx	lr
 80080e6:	bf00      	nop
 80080e8:	40020407 	.word	0x40020407
 80080ec:	40020800 	.word	0x40020800
 80080f0:	40020820 	.word	0x40020820
 80080f4:	cccccccd 	.word	0xcccccccd
 80080f8:	40020880 	.word	0x40020880

080080fc <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  *                     the configuration information for the specified DMA Channel.
  * @retval None
  */

static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 80080fc:	b480      	push	{r7}
 80080fe:	b085      	sub	sp, #20
 8008100:	af00      	add	r7, sp, #0
 8008102:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 8008104:	687b      	ldr	r3, [r7, #4]
 8008106:	685b      	ldr	r3, [r3, #4]
 8008108:	b2db      	uxtb	r3, r3
 800810a:	60fb      	str	r3, [r7, #12]

  /* DMA Channels are connected to DMAMUX1 request generator blocks*/
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 800810c:	68fa      	ldr	r2, [r7, #12]
 800810e:	4b0b      	ldr	r3, [pc, #44]	; (800813c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x40>)
 8008110:	4413      	add	r3, r2
 8008112:	009b      	lsls	r3, r3, #2
 8008114:	461a      	mov	r2, r3
 8008116:	687b      	ldr	r3, [r7, #4]
 8008118:	655a      	str	r2, [r3, #84]	; 0x54

  hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 800811a:	687b      	ldr	r3, [r7, #4]
 800811c:	4a08      	ldr	r2, [pc, #32]	; (8008140 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x44>)
 800811e:	659a      	str	r2, [r3, #88]	; 0x58

  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x1FU);
 8008120:	68fb      	ldr	r3, [r7, #12]
 8008122:	3b01      	subs	r3, #1
 8008124:	f003 031f 	and.w	r3, r3, #31
 8008128:	2201      	movs	r2, #1
 800812a:	409a      	lsls	r2, r3
 800812c:	687b      	ldr	r3, [r7, #4]
 800812e:	65da      	str	r2, [r3, #92]	; 0x5c
}
 8008130:	bf00      	nop
 8008132:	3714      	adds	r7, #20
 8008134:	46bd      	mov	sp, r7
 8008136:	f85d 7b04 	ldr.w	r7, [sp], #4
 800813a:	4770      	bx	lr
 800813c:	1000823f 	.word	0x1000823f
 8008140:	40020940 	.word	0x40020940

08008144 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8008144:	b480      	push	{r7}
 8008146:	b087      	sub	sp, #28
 8008148:	af00      	add	r7, sp, #0
 800814a:	6078      	str	r0, [r7, #4]
 800814c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 800814e:	2300      	movs	r3, #0
 8008150:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 8008152:	e15a      	b.n	800840a <HAL_GPIO_Init+0x2c6>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8008154:	683b      	ldr	r3, [r7, #0]
 8008156:	681a      	ldr	r2, [r3, #0]
 8008158:	2101      	movs	r1, #1
 800815a:	697b      	ldr	r3, [r7, #20]
 800815c:	fa01 f303 	lsl.w	r3, r1, r3
 8008160:	4013      	ands	r3, r2
 8008162:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8008164:	68fb      	ldr	r3, [r7, #12]
 8008166:	2b00      	cmp	r3, #0
 8008168:	f000 814c 	beq.w	8008404 <HAL_GPIO_Init+0x2c0>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800816c:	683b      	ldr	r3, [r7, #0]
 800816e:	685b      	ldr	r3, [r3, #4]
 8008170:	2b01      	cmp	r3, #1
 8008172:	d00b      	beq.n	800818c <HAL_GPIO_Init+0x48>
 8008174:	683b      	ldr	r3, [r7, #0]
 8008176:	685b      	ldr	r3, [r3, #4]
 8008178:	2b02      	cmp	r3, #2
 800817a:	d007      	beq.n	800818c <HAL_GPIO_Init+0x48>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800817c:	683b      	ldr	r3, [r7, #0]
 800817e:	685b      	ldr	r3, [r3, #4]
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8008180:	2b11      	cmp	r3, #17
 8008182:	d003      	beq.n	800818c <HAL_GPIO_Init+0x48>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8008184:	683b      	ldr	r3, [r7, #0]
 8008186:	685b      	ldr	r3, [r3, #4]
 8008188:	2b12      	cmp	r3, #18
 800818a:	d130      	bne.n	80081ee <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 800818c:	687b      	ldr	r3, [r7, #4]
 800818e:	689b      	ldr	r3, [r3, #8]
 8008190:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8008192:	697b      	ldr	r3, [r7, #20]
 8008194:	005b      	lsls	r3, r3, #1
 8008196:	2203      	movs	r2, #3
 8008198:	fa02 f303 	lsl.w	r3, r2, r3
 800819c:	43db      	mvns	r3, r3
 800819e:	693a      	ldr	r2, [r7, #16]
 80081a0:	4013      	ands	r3, r2
 80081a2:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80081a4:	683b      	ldr	r3, [r7, #0]
 80081a6:	68da      	ldr	r2, [r3, #12]
 80081a8:	697b      	ldr	r3, [r7, #20]
 80081aa:	005b      	lsls	r3, r3, #1
 80081ac:	fa02 f303 	lsl.w	r3, r2, r3
 80081b0:	693a      	ldr	r2, [r7, #16]
 80081b2:	4313      	orrs	r3, r2
 80081b4:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80081b6:	687b      	ldr	r3, [r7, #4]
 80081b8:	693a      	ldr	r2, [r7, #16]
 80081ba:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80081bc:	687b      	ldr	r3, [r7, #4]
 80081be:	685b      	ldr	r3, [r3, #4]
 80081c0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80081c2:	2201      	movs	r2, #1
 80081c4:	697b      	ldr	r3, [r7, #20]
 80081c6:	fa02 f303 	lsl.w	r3, r2, r3
 80081ca:	43db      	mvns	r3, r3
 80081cc:	693a      	ldr	r2, [r7, #16]
 80081ce:	4013      	ands	r3, r2
 80081d0:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 80081d2:	683b      	ldr	r3, [r7, #0]
 80081d4:	685b      	ldr	r3, [r3, #4]
 80081d6:	091b      	lsrs	r3, r3, #4
 80081d8:	f003 0201 	and.w	r2, r3, #1
 80081dc:	697b      	ldr	r3, [r7, #20]
 80081de:	fa02 f303 	lsl.w	r3, r2, r3
 80081e2:	693a      	ldr	r2, [r7, #16]
 80081e4:	4313      	orrs	r3, r2
 80081e6:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80081e8:	687b      	ldr	r3, [r7, #4]
 80081ea:	693a      	ldr	r2, [r7, #16]
 80081ec:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 80081ee:	687b      	ldr	r3, [r7, #4]
 80081f0:	68db      	ldr	r3, [r3, #12]
 80081f2:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80081f4:	697b      	ldr	r3, [r7, #20]
 80081f6:	005b      	lsls	r3, r3, #1
 80081f8:	2203      	movs	r2, #3
 80081fa:	fa02 f303 	lsl.w	r3, r2, r3
 80081fe:	43db      	mvns	r3, r3
 8008200:	693a      	ldr	r2, [r7, #16]
 8008202:	4013      	ands	r3, r2
 8008204:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8008206:	683b      	ldr	r3, [r7, #0]
 8008208:	689a      	ldr	r2, [r3, #8]
 800820a:	697b      	ldr	r3, [r7, #20]
 800820c:	005b      	lsls	r3, r3, #1
 800820e:	fa02 f303 	lsl.w	r3, r2, r3
 8008212:	693a      	ldr	r2, [r7, #16]
 8008214:	4313      	orrs	r3, r2
 8008216:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 8008218:	687b      	ldr	r3, [r7, #4]
 800821a:	693a      	ldr	r2, [r7, #16]
 800821c:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800821e:	683b      	ldr	r3, [r7, #0]
 8008220:	685b      	ldr	r3, [r3, #4]
 8008222:	2b02      	cmp	r3, #2
 8008224:	d003      	beq.n	800822e <HAL_GPIO_Init+0xea>
 8008226:	683b      	ldr	r3, [r7, #0]
 8008228:	685b      	ldr	r3, [r3, #4]
 800822a:	2b12      	cmp	r3, #18
 800822c:	d123      	bne.n	8008276 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800822e:	697b      	ldr	r3, [r7, #20]
 8008230:	08da      	lsrs	r2, r3, #3
 8008232:	687b      	ldr	r3, [r7, #4]
 8008234:	3208      	adds	r2, #8
 8008236:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800823a:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 800823c:	697b      	ldr	r3, [r7, #20]
 800823e:	f003 0307 	and.w	r3, r3, #7
 8008242:	009b      	lsls	r3, r3, #2
 8008244:	220f      	movs	r2, #15
 8008246:	fa02 f303 	lsl.w	r3, r2, r3
 800824a:	43db      	mvns	r3, r3
 800824c:	693a      	ldr	r2, [r7, #16]
 800824e:	4013      	ands	r3, r2
 8008250:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8008252:	683b      	ldr	r3, [r7, #0]
 8008254:	691a      	ldr	r2, [r3, #16]
 8008256:	697b      	ldr	r3, [r7, #20]
 8008258:	f003 0307 	and.w	r3, r3, #7
 800825c:	009b      	lsls	r3, r3, #2
 800825e:	fa02 f303 	lsl.w	r3, r2, r3
 8008262:	693a      	ldr	r2, [r7, #16]
 8008264:	4313      	orrs	r3, r2
 8008266:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 8008268:	697b      	ldr	r3, [r7, #20]
 800826a:	08da      	lsrs	r2, r3, #3
 800826c:	687b      	ldr	r3, [r7, #4]
 800826e:	3208      	adds	r2, #8
 8008270:	6939      	ldr	r1, [r7, #16]
 8008272:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8008276:	687b      	ldr	r3, [r7, #4]
 8008278:	681b      	ldr	r3, [r3, #0]
 800827a:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 800827c:	697b      	ldr	r3, [r7, #20]
 800827e:	005b      	lsls	r3, r3, #1
 8008280:	2203      	movs	r2, #3
 8008282:	fa02 f303 	lsl.w	r3, r2, r3
 8008286:	43db      	mvns	r3, r3
 8008288:	693a      	ldr	r2, [r7, #16]
 800828a:	4013      	ands	r3, r2
 800828c:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800828e:	683b      	ldr	r3, [r7, #0]
 8008290:	685b      	ldr	r3, [r3, #4]
 8008292:	f003 0203 	and.w	r2, r3, #3
 8008296:	697b      	ldr	r3, [r7, #20]
 8008298:	005b      	lsls	r3, r3, #1
 800829a:	fa02 f303 	lsl.w	r3, r2, r3
 800829e:	693a      	ldr	r2, [r7, #16]
 80082a0:	4313      	orrs	r3, r2
 80082a2:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80082a4:	687b      	ldr	r3, [r7, #4]
 80082a6:	693a      	ldr	r2, [r7, #16]
 80082a8:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80082aa:	683b      	ldr	r3, [r7, #0]
 80082ac:	685b      	ldr	r3, [r3, #4]
 80082ae:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80082b2:	2b00      	cmp	r3, #0
 80082b4:	f000 80a6 	beq.w	8008404 <HAL_GPIO_Init+0x2c0>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80082b8:	4b5b      	ldr	r3, [pc, #364]	; (8008428 <HAL_GPIO_Init+0x2e4>)
 80082ba:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80082bc:	4a5a      	ldr	r2, [pc, #360]	; (8008428 <HAL_GPIO_Init+0x2e4>)
 80082be:	f043 0301 	orr.w	r3, r3, #1
 80082c2:	6613      	str	r3, [r2, #96]	; 0x60
 80082c4:	4b58      	ldr	r3, [pc, #352]	; (8008428 <HAL_GPIO_Init+0x2e4>)
 80082c6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80082c8:	f003 0301 	and.w	r3, r3, #1
 80082cc:	60bb      	str	r3, [r7, #8]
 80082ce:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2U];
 80082d0:	4a56      	ldr	r2, [pc, #344]	; (800842c <HAL_GPIO_Init+0x2e8>)
 80082d2:	697b      	ldr	r3, [r7, #20]
 80082d4:	089b      	lsrs	r3, r3, #2
 80082d6:	3302      	adds	r3, #2
 80082d8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80082dc:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 80082de:	697b      	ldr	r3, [r7, #20]
 80082e0:	f003 0303 	and.w	r3, r3, #3
 80082e4:	009b      	lsls	r3, r3, #2
 80082e6:	220f      	movs	r2, #15
 80082e8:	fa02 f303 	lsl.w	r3, r2, r3
 80082ec:	43db      	mvns	r3, r3
 80082ee:	693a      	ldr	r2, [r7, #16]
 80082f0:	4013      	ands	r3, r2
 80082f2:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 80082f4:	687b      	ldr	r3, [r7, #4]
 80082f6:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 80082fa:	d01f      	beq.n	800833c <HAL_GPIO_Init+0x1f8>
 80082fc:	687b      	ldr	r3, [r7, #4]
 80082fe:	4a4c      	ldr	r2, [pc, #304]	; (8008430 <HAL_GPIO_Init+0x2ec>)
 8008300:	4293      	cmp	r3, r2
 8008302:	d019      	beq.n	8008338 <HAL_GPIO_Init+0x1f4>
 8008304:	687b      	ldr	r3, [r7, #4]
 8008306:	4a4b      	ldr	r2, [pc, #300]	; (8008434 <HAL_GPIO_Init+0x2f0>)
 8008308:	4293      	cmp	r3, r2
 800830a:	d013      	beq.n	8008334 <HAL_GPIO_Init+0x1f0>
 800830c:	687b      	ldr	r3, [r7, #4]
 800830e:	4a4a      	ldr	r2, [pc, #296]	; (8008438 <HAL_GPIO_Init+0x2f4>)
 8008310:	4293      	cmp	r3, r2
 8008312:	d00d      	beq.n	8008330 <HAL_GPIO_Init+0x1ec>
 8008314:	687b      	ldr	r3, [r7, #4]
 8008316:	4a49      	ldr	r2, [pc, #292]	; (800843c <HAL_GPIO_Init+0x2f8>)
 8008318:	4293      	cmp	r3, r2
 800831a:	d007      	beq.n	800832c <HAL_GPIO_Init+0x1e8>
 800831c:	687b      	ldr	r3, [r7, #4]
 800831e:	4a48      	ldr	r2, [pc, #288]	; (8008440 <HAL_GPIO_Init+0x2fc>)
 8008320:	4293      	cmp	r3, r2
 8008322:	d101      	bne.n	8008328 <HAL_GPIO_Init+0x1e4>
 8008324:	2305      	movs	r3, #5
 8008326:	e00a      	b.n	800833e <HAL_GPIO_Init+0x1fa>
 8008328:	2306      	movs	r3, #6
 800832a:	e008      	b.n	800833e <HAL_GPIO_Init+0x1fa>
 800832c:	2304      	movs	r3, #4
 800832e:	e006      	b.n	800833e <HAL_GPIO_Init+0x1fa>
 8008330:	2303      	movs	r3, #3
 8008332:	e004      	b.n	800833e <HAL_GPIO_Init+0x1fa>
 8008334:	2302      	movs	r3, #2
 8008336:	e002      	b.n	800833e <HAL_GPIO_Init+0x1fa>
 8008338:	2301      	movs	r3, #1
 800833a:	e000      	b.n	800833e <HAL_GPIO_Init+0x1fa>
 800833c:	2300      	movs	r3, #0
 800833e:	697a      	ldr	r2, [r7, #20]
 8008340:	f002 0203 	and.w	r2, r2, #3
 8008344:	0092      	lsls	r2, r2, #2
 8008346:	4093      	lsls	r3, r2
 8008348:	693a      	ldr	r2, [r7, #16]
 800834a:	4313      	orrs	r3, r2
 800834c:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800834e:	4937      	ldr	r1, [pc, #220]	; (800842c <HAL_GPIO_Init+0x2e8>)
 8008350:	697b      	ldr	r3, [r7, #20]
 8008352:	089b      	lsrs	r3, r3, #2
 8008354:	3302      	adds	r3, #2
 8008356:	693a      	ldr	r2, [r7, #16]
 8008358:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 800835c:	4b39      	ldr	r3, [pc, #228]	; (8008444 <HAL_GPIO_Init+0x300>)
 800835e:	681b      	ldr	r3, [r3, #0]
 8008360:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8008362:	68fb      	ldr	r3, [r7, #12]
 8008364:	43db      	mvns	r3, r3
 8008366:	693a      	ldr	r2, [r7, #16]
 8008368:	4013      	ands	r3, r2
 800836a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800836c:	683b      	ldr	r3, [r7, #0]
 800836e:	685b      	ldr	r3, [r3, #4]
 8008370:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8008374:	2b00      	cmp	r3, #0
 8008376:	d003      	beq.n	8008380 <HAL_GPIO_Init+0x23c>
        {
          temp |= iocurrent;
 8008378:	693a      	ldr	r2, [r7, #16]
 800837a:	68fb      	ldr	r3, [r7, #12]
 800837c:	4313      	orrs	r3, r2
 800837e:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8008380:	4a30      	ldr	r2, [pc, #192]	; (8008444 <HAL_GPIO_Init+0x300>)
 8008382:	693b      	ldr	r3, [r7, #16]
 8008384:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR1;
 8008386:	4b2f      	ldr	r3, [pc, #188]	; (8008444 <HAL_GPIO_Init+0x300>)
 8008388:	685b      	ldr	r3, [r3, #4]
 800838a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800838c:	68fb      	ldr	r3, [r7, #12]
 800838e:	43db      	mvns	r3, r3
 8008390:	693a      	ldr	r2, [r7, #16]
 8008392:	4013      	ands	r3, r2
 8008394:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8008396:	683b      	ldr	r3, [r7, #0]
 8008398:	685b      	ldr	r3, [r3, #4]
 800839a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800839e:	2b00      	cmp	r3, #0
 80083a0:	d003      	beq.n	80083aa <HAL_GPIO_Init+0x266>
        {
          temp |= iocurrent;
 80083a2:	693a      	ldr	r2, [r7, #16]
 80083a4:	68fb      	ldr	r3, [r7, #12]
 80083a6:	4313      	orrs	r3, r2
 80083a8:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 80083aa:	4a26      	ldr	r2, [pc, #152]	; (8008444 <HAL_GPIO_Init+0x300>)
 80083ac:	693b      	ldr	r3, [r7, #16]
 80083ae:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80083b0:	4b24      	ldr	r3, [pc, #144]	; (8008444 <HAL_GPIO_Init+0x300>)
 80083b2:	689b      	ldr	r3, [r3, #8]
 80083b4:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80083b6:	68fb      	ldr	r3, [r7, #12]
 80083b8:	43db      	mvns	r3, r3
 80083ba:	693a      	ldr	r2, [r7, #16]
 80083bc:	4013      	ands	r3, r2
 80083be:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80083c0:	683b      	ldr	r3, [r7, #0]
 80083c2:	685b      	ldr	r3, [r3, #4]
 80083c4:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80083c8:	2b00      	cmp	r3, #0
 80083ca:	d003      	beq.n	80083d4 <HAL_GPIO_Init+0x290>
        {
          temp |= iocurrent;
 80083cc:	693a      	ldr	r2, [r7, #16]
 80083ce:	68fb      	ldr	r3, [r7, #12]
 80083d0:	4313      	orrs	r3, r2
 80083d2:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 80083d4:	4a1b      	ldr	r2, [pc, #108]	; (8008444 <HAL_GPIO_Init+0x300>)
 80083d6:	693b      	ldr	r3, [r7, #16]
 80083d8:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 80083da:	4b1a      	ldr	r3, [pc, #104]	; (8008444 <HAL_GPIO_Init+0x300>)
 80083dc:	68db      	ldr	r3, [r3, #12]
 80083de:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80083e0:	68fb      	ldr	r3, [r7, #12]
 80083e2:	43db      	mvns	r3, r3
 80083e4:	693a      	ldr	r2, [r7, #16]
 80083e6:	4013      	ands	r3, r2
 80083e8:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80083ea:	683b      	ldr	r3, [r7, #0]
 80083ec:	685b      	ldr	r3, [r3, #4]
 80083ee:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80083f2:	2b00      	cmp	r3, #0
 80083f4:	d003      	beq.n	80083fe <HAL_GPIO_Init+0x2ba>
        {
          temp |= iocurrent;
 80083f6:	693a      	ldr	r2, [r7, #16]
 80083f8:	68fb      	ldr	r3, [r7, #12]
 80083fa:	4313      	orrs	r3, r2
 80083fc:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 80083fe:	4a11      	ldr	r2, [pc, #68]	; (8008444 <HAL_GPIO_Init+0x300>)
 8008400:	693b      	ldr	r3, [r7, #16]
 8008402:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 8008404:	697b      	ldr	r3, [r7, #20]
 8008406:	3301      	adds	r3, #1
 8008408:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0U)
 800840a:	683b      	ldr	r3, [r7, #0]
 800840c:	681a      	ldr	r2, [r3, #0]
 800840e:	697b      	ldr	r3, [r7, #20]
 8008410:	fa22 f303 	lsr.w	r3, r2, r3
 8008414:	2b00      	cmp	r3, #0
 8008416:	f47f ae9d 	bne.w	8008154 <HAL_GPIO_Init+0x10>
  }
}
 800841a:	bf00      	nop
 800841c:	371c      	adds	r7, #28
 800841e:	46bd      	mov	sp, r7
 8008420:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008424:	4770      	bx	lr
 8008426:	bf00      	nop
 8008428:	40021000 	.word	0x40021000
 800842c:	40010000 	.word	0x40010000
 8008430:	48000400 	.word	0x48000400
 8008434:	48000800 	.word	0x48000800
 8008438:	48000c00 	.word	0x48000c00
 800843c:	48001000 	.word	0x48001000
 8008440:	48001400 	.word	0x48001400
 8008444:	40010400 	.word	0x40010400

08008448 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8008448:	b480      	push	{r7}
 800844a:	b083      	sub	sp, #12
 800844c:	af00      	add	r7, sp, #0
 800844e:	6078      	str	r0, [r7, #4]
 8008450:	460b      	mov	r3, r1
 8008452:	807b      	strh	r3, [r7, #2]
 8008454:	4613      	mov	r3, r2
 8008456:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8008458:	787b      	ldrb	r3, [r7, #1]
 800845a:	2b00      	cmp	r3, #0
 800845c:	d003      	beq.n	8008466 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800845e:	887a      	ldrh	r2, [r7, #2]
 8008460:	687b      	ldr	r3, [r7, #4]
 8008462:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8008464:	e002      	b.n	800846c <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8008466:	887a      	ldrh	r2, [r7, #2]
 8008468:	687b      	ldr	r3, [r7, #4]
 800846a:	629a      	str	r2, [r3, #40]	; 0x28
}
 800846c:	bf00      	nop
 800846e:	370c      	adds	r7, #12
 8008470:	46bd      	mov	sp, r7
 8008472:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008476:	4770      	bx	lr

08008478 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8008478:	b480      	push	{r7}
 800847a:	b085      	sub	sp, #20
 800847c:	af00      	add	r7, sp, #0
 800847e:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 8008480:	687b      	ldr	r3, [r7, #4]
 8008482:	2b00      	cmp	r3, #0
 8008484:	d141      	bne.n	800850a <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8008486:	4b4b      	ldr	r3, [pc, #300]	; (80085b4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8008488:	681b      	ldr	r3, [r3, #0]
 800848a:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800848e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8008492:	d131      	bne.n	80084f8 <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8008494:	4b47      	ldr	r3, [pc, #284]	; (80085b4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8008496:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800849a:	4a46      	ldr	r2, [pc, #280]	; (80085b4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800849c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80084a0:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 80084a4:	4b43      	ldr	r3, [pc, #268]	; (80085b4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80084a6:	681b      	ldr	r3, [r3, #0]
 80084a8:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80084ac:	4a41      	ldr	r2, [pc, #260]	; (80085b4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80084ae:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80084b2:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 80084b4:	4b40      	ldr	r3, [pc, #256]	; (80085b8 <HAL_PWREx_ControlVoltageScaling+0x140>)
 80084b6:	681b      	ldr	r3, [r3, #0]
 80084b8:	2232      	movs	r2, #50	; 0x32
 80084ba:	fb02 f303 	mul.w	r3, r2, r3
 80084be:	4a3f      	ldr	r2, [pc, #252]	; (80085bc <HAL_PWREx_ControlVoltageScaling+0x144>)
 80084c0:	fba2 2303 	umull	r2, r3, r2, r3
 80084c4:	0c9b      	lsrs	r3, r3, #18
 80084c6:	3301      	adds	r3, #1
 80084c8:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80084ca:	e002      	b.n	80084d2 <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 80084cc:	68fb      	ldr	r3, [r7, #12]
 80084ce:	3b01      	subs	r3, #1
 80084d0:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80084d2:	4b38      	ldr	r3, [pc, #224]	; (80085b4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80084d4:	695b      	ldr	r3, [r3, #20]
 80084d6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80084da:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80084de:	d102      	bne.n	80084e6 <HAL_PWREx_ControlVoltageScaling+0x6e>
 80084e0:	68fb      	ldr	r3, [r7, #12]
 80084e2:	2b00      	cmp	r3, #0
 80084e4:	d1f2      	bne.n	80084cc <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80084e6:	4b33      	ldr	r3, [pc, #204]	; (80085b4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80084e8:	695b      	ldr	r3, [r3, #20]
 80084ea:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80084ee:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80084f2:	d158      	bne.n	80085a6 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 80084f4:	2303      	movs	r3, #3
 80084f6:	e057      	b.n	80085a8 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80084f8:	4b2e      	ldr	r3, [pc, #184]	; (80085b4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80084fa:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80084fe:	4a2d      	ldr	r2, [pc, #180]	; (80085b4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8008500:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8008504:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 8008508:	e04d      	b.n	80085a6 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 800850a:	687b      	ldr	r3, [r7, #4]
 800850c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8008510:	d141      	bne.n	8008596 <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8008512:	4b28      	ldr	r3, [pc, #160]	; (80085b4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8008514:	681b      	ldr	r3, [r3, #0]
 8008516:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800851a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800851e:	d131      	bne.n	8008584 <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8008520:	4b24      	ldr	r3, [pc, #144]	; (80085b4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8008522:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8008526:	4a23      	ldr	r2, [pc, #140]	; (80085b4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8008528:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800852c:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8008530:	4b20      	ldr	r3, [pc, #128]	; (80085b4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8008532:	681b      	ldr	r3, [r3, #0]
 8008534:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8008538:	4a1e      	ldr	r2, [pc, #120]	; (80085b4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800853a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800853e:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8008540:	4b1d      	ldr	r3, [pc, #116]	; (80085b8 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8008542:	681b      	ldr	r3, [r3, #0]
 8008544:	2232      	movs	r2, #50	; 0x32
 8008546:	fb02 f303 	mul.w	r3, r2, r3
 800854a:	4a1c      	ldr	r2, [pc, #112]	; (80085bc <HAL_PWREx_ControlVoltageScaling+0x144>)
 800854c:	fba2 2303 	umull	r2, r3, r2, r3
 8008550:	0c9b      	lsrs	r3, r3, #18
 8008552:	3301      	adds	r3, #1
 8008554:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8008556:	e002      	b.n	800855e <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 8008558:	68fb      	ldr	r3, [r7, #12]
 800855a:	3b01      	subs	r3, #1
 800855c:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800855e:	4b15      	ldr	r3, [pc, #84]	; (80085b4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8008560:	695b      	ldr	r3, [r3, #20]
 8008562:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8008566:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800856a:	d102      	bne.n	8008572 <HAL_PWREx_ControlVoltageScaling+0xfa>
 800856c:	68fb      	ldr	r3, [r7, #12]
 800856e:	2b00      	cmp	r3, #0
 8008570:	d1f2      	bne.n	8008558 <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8008572:	4b10      	ldr	r3, [pc, #64]	; (80085b4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8008574:	695b      	ldr	r3, [r3, #20]
 8008576:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800857a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800857e:	d112      	bne.n	80085a6 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8008580:	2303      	movs	r3, #3
 8008582:	e011      	b.n	80085a8 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8008584:	4b0b      	ldr	r3, [pc, #44]	; (80085b4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8008586:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800858a:	4a0a      	ldr	r2, [pc, #40]	; (80085b4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800858c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8008590:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 8008594:	e007      	b.n	80085a6 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8008596:	4b07      	ldr	r3, [pc, #28]	; (80085b4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8008598:	681b      	ldr	r3, [r3, #0]
 800859a:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 800859e:	4a05      	ldr	r2, [pc, #20]	; (80085b4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80085a0:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80085a4:	6013      	str	r3, [r2, #0]
    /* No need to wait for VOSF to be cleared for this transition */
    /* PWR_CR5_R1MODE bit setting has no effect in Range 2        */
  }

  return HAL_OK;
 80085a6:	2300      	movs	r3, #0
}
 80085a8:	4618      	mov	r0, r3
 80085aa:	3714      	adds	r7, #20
 80085ac:	46bd      	mov	sp, r7
 80085ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80085b2:	4770      	bx	lr
 80085b4:	40007000 	.word	0x40007000
 80085b8:	20000200 	.word	0x20000200
 80085bc:	431bde83 	.word	0x431bde83

080085c0 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80085c0:	b580      	push	{r7, lr}
 80085c2:	b088      	sub	sp, #32
 80085c4:	af00      	add	r7, sp, #0
 80085c6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80085c8:	687b      	ldr	r3, [r7, #4]
 80085ca:	2b00      	cmp	r3, #0
 80085cc:	d101      	bne.n	80085d2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80085ce:	2301      	movs	r3, #1
 80085d0:	e308      	b.n	8008be4 <HAL_RCC_OscConfig+0x624>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80085d2:	687b      	ldr	r3, [r7, #4]
 80085d4:	681b      	ldr	r3, [r3, #0]
 80085d6:	f003 0301 	and.w	r3, r3, #1
 80085da:	2b00      	cmp	r3, #0
 80085dc:	d075      	beq.n	80086ca <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80085de:	4ba3      	ldr	r3, [pc, #652]	; (800886c <HAL_RCC_OscConfig+0x2ac>)
 80085e0:	689b      	ldr	r3, [r3, #8]
 80085e2:	f003 030c 	and.w	r3, r3, #12
 80085e6:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 80085e8:	4ba0      	ldr	r3, [pc, #640]	; (800886c <HAL_RCC_OscConfig+0x2ac>)
 80085ea:	68db      	ldr	r3, [r3, #12]
 80085ec:	f003 0303 	and.w	r3, r3, #3
 80085f0:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 80085f2:	69bb      	ldr	r3, [r7, #24]
 80085f4:	2b0c      	cmp	r3, #12
 80085f6:	d102      	bne.n	80085fe <HAL_RCC_OscConfig+0x3e>
 80085f8:	697b      	ldr	r3, [r7, #20]
 80085fa:	2b03      	cmp	r3, #3
 80085fc:	d002      	beq.n	8008604 <HAL_RCC_OscConfig+0x44>
 80085fe:	69bb      	ldr	r3, [r7, #24]
 8008600:	2b08      	cmp	r3, #8
 8008602:	d10b      	bne.n	800861c <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8008604:	4b99      	ldr	r3, [pc, #612]	; (800886c <HAL_RCC_OscConfig+0x2ac>)
 8008606:	681b      	ldr	r3, [r3, #0]
 8008608:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800860c:	2b00      	cmp	r3, #0
 800860e:	d05b      	beq.n	80086c8 <HAL_RCC_OscConfig+0x108>
 8008610:	687b      	ldr	r3, [r7, #4]
 8008612:	685b      	ldr	r3, [r3, #4]
 8008614:	2b00      	cmp	r3, #0
 8008616:	d157      	bne.n	80086c8 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8008618:	2301      	movs	r3, #1
 800861a:	e2e3      	b.n	8008be4 <HAL_RCC_OscConfig+0x624>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800861c:	687b      	ldr	r3, [r7, #4]
 800861e:	685b      	ldr	r3, [r3, #4]
 8008620:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8008624:	d106      	bne.n	8008634 <HAL_RCC_OscConfig+0x74>
 8008626:	4b91      	ldr	r3, [pc, #580]	; (800886c <HAL_RCC_OscConfig+0x2ac>)
 8008628:	681b      	ldr	r3, [r3, #0]
 800862a:	4a90      	ldr	r2, [pc, #576]	; (800886c <HAL_RCC_OscConfig+0x2ac>)
 800862c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8008630:	6013      	str	r3, [r2, #0]
 8008632:	e01d      	b.n	8008670 <HAL_RCC_OscConfig+0xb0>
 8008634:	687b      	ldr	r3, [r7, #4]
 8008636:	685b      	ldr	r3, [r3, #4]
 8008638:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800863c:	d10c      	bne.n	8008658 <HAL_RCC_OscConfig+0x98>
 800863e:	4b8b      	ldr	r3, [pc, #556]	; (800886c <HAL_RCC_OscConfig+0x2ac>)
 8008640:	681b      	ldr	r3, [r3, #0]
 8008642:	4a8a      	ldr	r2, [pc, #552]	; (800886c <HAL_RCC_OscConfig+0x2ac>)
 8008644:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8008648:	6013      	str	r3, [r2, #0]
 800864a:	4b88      	ldr	r3, [pc, #544]	; (800886c <HAL_RCC_OscConfig+0x2ac>)
 800864c:	681b      	ldr	r3, [r3, #0]
 800864e:	4a87      	ldr	r2, [pc, #540]	; (800886c <HAL_RCC_OscConfig+0x2ac>)
 8008650:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8008654:	6013      	str	r3, [r2, #0]
 8008656:	e00b      	b.n	8008670 <HAL_RCC_OscConfig+0xb0>
 8008658:	4b84      	ldr	r3, [pc, #528]	; (800886c <HAL_RCC_OscConfig+0x2ac>)
 800865a:	681b      	ldr	r3, [r3, #0]
 800865c:	4a83      	ldr	r2, [pc, #524]	; (800886c <HAL_RCC_OscConfig+0x2ac>)
 800865e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8008662:	6013      	str	r3, [r2, #0]
 8008664:	4b81      	ldr	r3, [pc, #516]	; (800886c <HAL_RCC_OscConfig+0x2ac>)
 8008666:	681b      	ldr	r3, [r3, #0]
 8008668:	4a80      	ldr	r2, [pc, #512]	; (800886c <HAL_RCC_OscConfig+0x2ac>)
 800866a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800866e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8008670:	687b      	ldr	r3, [r7, #4]
 8008672:	685b      	ldr	r3, [r3, #4]
 8008674:	2b00      	cmp	r3, #0
 8008676:	d013      	beq.n	80086a0 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008678:	f7fd fa06 	bl	8005a88 <HAL_GetTick>
 800867c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800867e:	e008      	b.n	8008692 <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8008680:	f7fd fa02 	bl	8005a88 <HAL_GetTick>
 8008684:	4602      	mov	r2, r0
 8008686:	693b      	ldr	r3, [r7, #16]
 8008688:	1ad3      	subs	r3, r2, r3
 800868a:	2b64      	cmp	r3, #100	; 0x64
 800868c:	d901      	bls.n	8008692 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800868e:	2303      	movs	r3, #3
 8008690:	e2a8      	b.n	8008be4 <HAL_RCC_OscConfig+0x624>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8008692:	4b76      	ldr	r3, [pc, #472]	; (800886c <HAL_RCC_OscConfig+0x2ac>)
 8008694:	681b      	ldr	r3, [r3, #0]
 8008696:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800869a:	2b00      	cmp	r3, #0
 800869c:	d0f0      	beq.n	8008680 <HAL_RCC_OscConfig+0xc0>
 800869e:	e014      	b.n	80086ca <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80086a0:	f7fd f9f2 	bl	8005a88 <HAL_GetTick>
 80086a4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80086a6:	e008      	b.n	80086ba <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80086a8:	f7fd f9ee 	bl	8005a88 <HAL_GetTick>
 80086ac:	4602      	mov	r2, r0
 80086ae:	693b      	ldr	r3, [r7, #16]
 80086b0:	1ad3      	subs	r3, r2, r3
 80086b2:	2b64      	cmp	r3, #100	; 0x64
 80086b4:	d901      	bls.n	80086ba <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80086b6:	2303      	movs	r3, #3
 80086b8:	e294      	b.n	8008be4 <HAL_RCC_OscConfig+0x624>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80086ba:	4b6c      	ldr	r3, [pc, #432]	; (800886c <HAL_RCC_OscConfig+0x2ac>)
 80086bc:	681b      	ldr	r3, [r3, #0]
 80086be:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80086c2:	2b00      	cmp	r3, #0
 80086c4:	d1f0      	bne.n	80086a8 <HAL_RCC_OscConfig+0xe8>
 80086c6:	e000      	b.n	80086ca <HAL_RCC_OscConfig+0x10a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80086c8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80086ca:	687b      	ldr	r3, [r7, #4]
 80086cc:	681b      	ldr	r3, [r3, #0]
 80086ce:	f003 0302 	and.w	r3, r3, #2
 80086d2:	2b00      	cmp	r3, #0
 80086d4:	d075      	beq.n	80087c2 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80086d6:	4b65      	ldr	r3, [pc, #404]	; (800886c <HAL_RCC_OscConfig+0x2ac>)
 80086d8:	689b      	ldr	r3, [r3, #8]
 80086da:	f003 030c 	and.w	r3, r3, #12
 80086de:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 80086e0:	4b62      	ldr	r3, [pc, #392]	; (800886c <HAL_RCC_OscConfig+0x2ac>)
 80086e2:	68db      	ldr	r3, [r3, #12]
 80086e4:	f003 0303 	and.w	r3, r3, #3
 80086e8:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 80086ea:	69bb      	ldr	r3, [r7, #24]
 80086ec:	2b0c      	cmp	r3, #12
 80086ee:	d102      	bne.n	80086f6 <HAL_RCC_OscConfig+0x136>
 80086f0:	697b      	ldr	r3, [r7, #20]
 80086f2:	2b02      	cmp	r3, #2
 80086f4:	d002      	beq.n	80086fc <HAL_RCC_OscConfig+0x13c>
 80086f6:	69bb      	ldr	r3, [r7, #24]
 80086f8:	2b04      	cmp	r3, #4
 80086fa:	d11f      	bne.n	800873c <HAL_RCC_OscConfig+0x17c>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80086fc:	4b5b      	ldr	r3, [pc, #364]	; (800886c <HAL_RCC_OscConfig+0x2ac>)
 80086fe:	681b      	ldr	r3, [r3, #0]
 8008700:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8008704:	2b00      	cmp	r3, #0
 8008706:	d005      	beq.n	8008714 <HAL_RCC_OscConfig+0x154>
 8008708:	687b      	ldr	r3, [r7, #4]
 800870a:	68db      	ldr	r3, [r3, #12]
 800870c:	2b00      	cmp	r3, #0
 800870e:	d101      	bne.n	8008714 <HAL_RCC_OscConfig+0x154>
      {
        return HAL_ERROR;
 8008710:	2301      	movs	r3, #1
 8008712:	e267      	b.n	8008be4 <HAL_RCC_OscConfig+0x624>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8008714:	4b55      	ldr	r3, [pc, #340]	; (800886c <HAL_RCC_OscConfig+0x2ac>)
 8008716:	685b      	ldr	r3, [r3, #4]
 8008718:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 800871c:	687b      	ldr	r3, [r7, #4]
 800871e:	691b      	ldr	r3, [r3, #16]
 8008720:	061b      	lsls	r3, r3, #24
 8008722:	4952      	ldr	r1, [pc, #328]	; (800886c <HAL_RCC_OscConfig+0x2ac>)
 8008724:	4313      	orrs	r3, r2
 8008726:	604b      	str	r3, [r1, #4]

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8008728:	4b51      	ldr	r3, [pc, #324]	; (8008870 <HAL_RCC_OscConfig+0x2b0>)
 800872a:	681b      	ldr	r3, [r3, #0]
 800872c:	4618      	mov	r0, r3
 800872e:	f7fd f95f 	bl	80059f0 <HAL_InitTick>
 8008732:	4603      	mov	r3, r0
 8008734:	2b00      	cmp	r3, #0
 8008736:	d043      	beq.n	80087c0 <HAL_RCC_OscConfig+0x200>
        {
          return HAL_ERROR;
 8008738:	2301      	movs	r3, #1
 800873a:	e253      	b.n	8008be4 <HAL_RCC_OscConfig+0x624>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800873c:	687b      	ldr	r3, [r7, #4]
 800873e:	68db      	ldr	r3, [r3, #12]
 8008740:	2b00      	cmp	r3, #0
 8008742:	d023      	beq.n	800878c <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8008744:	4b49      	ldr	r3, [pc, #292]	; (800886c <HAL_RCC_OscConfig+0x2ac>)
 8008746:	681b      	ldr	r3, [r3, #0]
 8008748:	4a48      	ldr	r2, [pc, #288]	; (800886c <HAL_RCC_OscConfig+0x2ac>)
 800874a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800874e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008750:	f7fd f99a 	bl	8005a88 <HAL_GetTick>
 8008754:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8008756:	e008      	b.n	800876a <HAL_RCC_OscConfig+0x1aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8008758:	f7fd f996 	bl	8005a88 <HAL_GetTick>
 800875c:	4602      	mov	r2, r0
 800875e:	693b      	ldr	r3, [r7, #16]
 8008760:	1ad3      	subs	r3, r2, r3
 8008762:	2b02      	cmp	r3, #2
 8008764:	d901      	bls.n	800876a <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 8008766:	2303      	movs	r3, #3
 8008768:	e23c      	b.n	8008be4 <HAL_RCC_OscConfig+0x624>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800876a:	4b40      	ldr	r3, [pc, #256]	; (800886c <HAL_RCC_OscConfig+0x2ac>)
 800876c:	681b      	ldr	r3, [r3, #0]
 800876e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8008772:	2b00      	cmp	r3, #0
 8008774:	d0f0      	beq.n	8008758 <HAL_RCC_OscConfig+0x198>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8008776:	4b3d      	ldr	r3, [pc, #244]	; (800886c <HAL_RCC_OscConfig+0x2ac>)
 8008778:	685b      	ldr	r3, [r3, #4]
 800877a:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 800877e:	687b      	ldr	r3, [r7, #4]
 8008780:	691b      	ldr	r3, [r3, #16]
 8008782:	061b      	lsls	r3, r3, #24
 8008784:	4939      	ldr	r1, [pc, #228]	; (800886c <HAL_RCC_OscConfig+0x2ac>)
 8008786:	4313      	orrs	r3, r2
 8008788:	604b      	str	r3, [r1, #4]
 800878a:	e01a      	b.n	80087c2 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800878c:	4b37      	ldr	r3, [pc, #220]	; (800886c <HAL_RCC_OscConfig+0x2ac>)
 800878e:	681b      	ldr	r3, [r3, #0]
 8008790:	4a36      	ldr	r2, [pc, #216]	; (800886c <HAL_RCC_OscConfig+0x2ac>)
 8008792:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8008796:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008798:	f7fd f976 	bl	8005a88 <HAL_GetTick>
 800879c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800879e:	e008      	b.n	80087b2 <HAL_RCC_OscConfig+0x1f2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80087a0:	f7fd f972 	bl	8005a88 <HAL_GetTick>
 80087a4:	4602      	mov	r2, r0
 80087a6:	693b      	ldr	r3, [r7, #16]
 80087a8:	1ad3      	subs	r3, r2, r3
 80087aa:	2b02      	cmp	r3, #2
 80087ac:	d901      	bls.n	80087b2 <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 80087ae:	2303      	movs	r3, #3
 80087b0:	e218      	b.n	8008be4 <HAL_RCC_OscConfig+0x624>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80087b2:	4b2e      	ldr	r3, [pc, #184]	; (800886c <HAL_RCC_OscConfig+0x2ac>)
 80087b4:	681b      	ldr	r3, [r3, #0]
 80087b6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80087ba:	2b00      	cmp	r3, #0
 80087bc:	d1f0      	bne.n	80087a0 <HAL_RCC_OscConfig+0x1e0>
 80087be:	e000      	b.n	80087c2 <HAL_RCC_OscConfig+0x202>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80087c0:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80087c2:	687b      	ldr	r3, [r7, #4]
 80087c4:	681b      	ldr	r3, [r3, #0]
 80087c6:	f003 0308 	and.w	r3, r3, #8
 80087ca:	2b00      	cmp	r3, #0
 80087cc:	d03c      	beq.n	8008848 <HAL_RCC_OscConfig+0x288>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80087ce:	687b      	ldr	r3, [r7, #4]
 80087d0:	695b      	ldr	r3, [r3, #20]
 80087d2:	2b00      	cmp	r3, #0
 80087d4:	d01c      	beq.n	8008810 <HAL_RCC_OscConfig+0x250>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80087d6:	4b25      	ldr	r3, [pc, #148]	; (800886c <HAL_RCC_OscConfig+0x2ac>)
 80087d8:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80087dc:	4a23      	ldr	r2, [pc, #140]	; (800886c <HAL_RCC_OscConfig+0x2ac>)
 80087de:	f043 0301 	orr.w	r3, r3, #1
 80087e2:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80087e6:	f7fd f94f 	bl	8005a88 <HAL_GetTick>
 80087ea:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80087ec:	e008      	b.n	8008800 <HAL_RCC_OscConfig+0x240>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80087ee:	f7fd f94b 	bl	8005a88 <HAL_GetTick>
 80087f2:	4602      	mov	r2, r0
 80087f4:	693b      	ldr	r3, [r7, #16]
 80087f6:	1ad3      	subs	r3, r2, r3
 80087f8:	2b02      	cmp	r3, #2
 80087fa:	d901      	bls.n	8008800 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 80087fc:	2303      	movs	r3, #3
 80087fe:	e1f1      	b.n	8008be4 <HAL_RCC_OscConfig+0x624>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8008800:	4b1a      	ldr	r3, [pc, #104]	; (800886c <HAL_RCC_OscConfig+0x2ac>)
 8008802:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8008806:	f003 0302 	and.w	r3, r3, #2
 800880a:	2b00      	cmp	r3, #0
 800880c:	d0ef      	beq.n	80087ee <HAL_RCC_OscConfig+0x22e>
 800880e:	e01b      	b.n	8008848 <HAL_RCC_OscConfig+0x288>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8008810:	4b16      	ldr	r3, [pc, #88]	; (800886c <HAL_RCC_OscConfig+0x2ac>)
 8008812:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8008816:	4a15      	ldr	r2, [pc, #84]	; (800886c <HAL_RCC_OscConfig+0x2ac>)
 8008818:	f023 0301 	bic.w	r3, r3, #1
 800881c:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8008820:	f7fd f932 	bl	8005a88 <HAL_GetTick>
 8008824:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8008826:	e008      	b.n	800883a <HAL_RCC_OscConfig+0x27a>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8008828:	f7fd f92e 	bl	8005a88 <HAL_GetTick>
 800882c:	4602      	mov	r2, r0
 800882e:	693b      	ldr	r3, [r7, #16]
 8008830:	1ad3      	subs	r3, r2, r3
 8008832:	2b02      	cmp	r3, #2
 8008834:	d901      	bls.n	800883a <HAL_RCC_OscConfig+0x27a>
        {
          return HAL_TIMEOUT;
 8008836:	2303      	movs	r3, #3
 8008838:	e1d4      	b.n	8008be4 <HAL_RCC_OscConfig+0x624>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800883a:	4b0c      	ldr	r3, [pc, #48]	; (800886c <HAL_RCC_OscConfig+0x2ac>)
 800883c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8008840:	f003 0302 	and.w	r3, r3, #2
 8008844:	2b00      	cmp	r3, #0
 8008846:	d1ef      	bne.n	8008828 <HAL_RCC_OscConfig+0x268>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8008848:	687b      	ldr	r3, [r7, #4]
 800884a:	681b      	ldr	r3, [r3, #0]
 800884c:	f003 0304 	and.w	r3, r3, #4
 8008850:	2b00      	cmp	r3, #0
 8008852:	f000 80ab 	beq.w	80089ac <HAL_RCC_OscConfig+0x3ec>
  {
    FlagStatus       pwrclkchanged = RESET;
 8008856:	2300      	movs	r3, #0
 8008858:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain if necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 800885a:	4b04      	ldr	r3, [pc, #16]	; (800886c <HAL_RCC_OscConfig+0x2ac>)
 800885c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800885e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8008862:	2b00      	cmp	r3, #0
 8008864:	d106      	bne.n	8008874 <HAL_RCC_OscConfig+0x2b4>
 8008866:	2301      	movs	r3, #1
 8008868:	e005      	b.n	8008876 <HAL_RCC_OscConfig+0x2b6>
 800886a:	bf00      	nop
 800886c:	40021000 	.word	0x40021000
 8008870:	20000204 	.word	0x20000204
 8008874:	2300      	movs	r3, #0
 8008876:	2b00      	cmp	r3, #0
 8008878:	d00d      	beq.n	8008896 <HAL_RCC_OscConfig+0x2d6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800887a:	4baf      	ldr	r3, [pc, #700]	; (8008b38 <HAL_RCC_OscConfig+0x578>)
 800887c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800887e:	4aae      	ldr	r2, [pc, #696]	; (8008b38 <HAL_RCC_OscConfig+0x578>)
 8008880:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8008884:	6593      	str	r3, [r2, #88]	; 0x58
 8008886:	4bac      	ldr	r3, [pc, #688]	; (8008b38 <HAL_RCC_OscConfig+0x578>)
 8008888:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800888a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800888e:	60fb      	str	r3, [r7, #12]
 8008890:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8008892:	2301      	movs	r3, #1
 8008894:	77fb      	strb	r3, [r7, #31]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8008896:	4ba9      	ldr	r3, [pc, #676]	; (8008b3c <HAL_RCC_OscConfig+0x57c>)
 8008898:	681b      	ldr	r3, [r3, #0]
 800889a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800889e:	2b00      	cmp	r3, #0
 80088a0:	d118      	bne.n	80088d4 <HAL_RCC_OscConfig+0x314>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80088a2:	4ba6      	ldr	r3, [pc, #664]	; (8008b3c <HAL_RCC_OscConfig+0x57c>)
 80088a4:	681b      	ldr	r3, [r3, #0]
 80088a6:	4aa5      	ldr	r2, [pc, #660]	; (8008b3c <HAL_RCC_OscConfig+0x57c>)
 80088a8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80088ac:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80088ae:	f7fd f8eb 	bl	8005a88 <HAL_GetTick>
 80088b2:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80088b4:	e008      	b.n	80088c8 <HAL_RCC_OscConfig+0x308>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80088b6:	f7fd f8e7 	bl	8005a88 <HAL_GetTick>
 80088ba:	4602      	mov	r2, r0
 80088bc:	693b      	ldr	r3, [r7, #16]
 80088be:	1ad3      	subs	r3, r2, r3
 80088c0:	2b02      	cmp	r3, #2
 80088c2:	d901      	bls.n	80088c8 <HAL_RCC_OscConfig+0x308>
        {
          return HAL_TIMEOUT;
 80088c4:	2303      	movs	r3, #3
 80088c6:	e18d      	b.n	8008be4 <HAL_RCC_OscConfig+0x624>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80088c8:	4b9c      	ldr	r3, [pc, #624]	; (8008b3c <HAL_RCC_OscConfig+0x57c>)
 80088ca:	681b      	ldr	r3, [r3, #0]
 80088cc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80088d0:	2b00      	cmp	r3, #0
 80088d2:	d0f0      	beq.n	80088b6 <HAL_RCC_OscConfig+0x2f6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80088d4:	687b      	ldr	r3, [r7, #4]
 80088d6:	689b      	ldr	r3, [r3, #8]
 80088d8:	2b01      	cmp	r3, #1
 80088da:	d108      	bne.n	80088ee <HAL_RCC_OscConfig+0x32e>
 80088dc:	4b96      	ldr	r3, [pc, #600]	; (8008b38 <HAL_RCC_OscConfig+0x578>)
 80088de:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80088e2:	4a95      	ldr	r2, [pc, #596]	; (8008b38 <HAL_RCC_OscConfig+0x578>)
 80088e4:	f043 0301 	orr.w	r3, r3, #1
 80088e8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80088ec:	e024      	b.n	8008938 <HAL_RCC_OscConfig+0x378>
 80088ee:	687b      	ldr	r3, [r7, #4]
 80088f0:	689b      	ldr	r3, [r3, #8]
 80088f2:	2b05      	cmp	r3, #5
 80088f4:	d110      	bne.n	8008918 <HAL_RCC_OscConfig+0x358>
 80088f6:	4b90      	ldr	r3, [pc, #576]	; (8008b38 <HAL_RCC_OscConfig+0x578>)
 80088f8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80088fc:	4a8e      	ldr	r2, [pc, #568]	; (8008b38 <HAL_RCC_OscConfig+0x578>)
 80088fe:	f043 0304 	orr.w	r3, r3, #4
 8008902:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8008906:	4b8c      	ldr	r3, [pc, #560]	; (8008b38 <HAL_RCC_OscConfig+0x578>)
 8008908:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800890c:	4a8a      	ldr	r2, [pc, #552]	; (8008b38 <HAL_RCC_OscConfig+0x578>)
 800890e:	f043 0301 	orr.w	r3, r3, #1
 8008912:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8008916:	e00f      	b.n	8008938 <HAL_RCC_OscConfig+0x378>
 8008918:	4b87      	ldr	r3, [pc, #540]	; (8008b38 <HAL_RCC_OscConfig+0x578>)
 800891a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800891e:	4a86      	ldr	r2, [pc, #536]	; (8008b38 <HAL_RCC_OscConfig+0x578>)
 8008920:	f023 0301 	bic.w	r3, r3, #1
 8008924:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8008928:	4b83      	ldr	r3, [pc, #524]	; (8008b38 <HAL_RCC_OscConfig+0x578>)
 800892a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800892e:	4a82      	ldr	r2, [pc, #520]	; (8008b38 <HAL_RCC_OscConfig+0x578>)
 8008930:	f023 0304 	bic.w	r3, r3, #4
 8008934:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8008938:	687b      	ldr	r3, [r7, #4]
 800893a:	689b      	ldr	r3, [r3, #8]
 800893c:	2b00      	cmp	r3, #0
 800893e:	d016      	beq.n	800896e <HAL_RCC_OscConfig+0x3ae>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8008940:	f7fd f8a2 	bl	8005a88 <HAL_GetTick>
 8008944:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8008946:	e00a      	b.n	800895e <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8008948:	f7fd f89e 	bl	8005a88 <HAL_GetTick>
 800894c:	4602      	mov	r2, r0
 800894e:	693b      	ldr	r3, [r7, #16]
 8008950:	1ad3      	subs	r3, r2, r3
 8008952:	f241 3288 	movw	r2, #5000	; 0x1388
 8008956:	4293      	cmp	r3, r2
 8008958:	d901      	bls.n	800895e <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 800895a:	2303      	movs	r3, #3
 800895c:	e142      	b.n	8008be4 <HAL_RCC_OscConfig+0x624>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800895e:	4b76      	ldr	r3, [pc, #472]	; (8008b38 <HAL_RCC_OscConfig+0x578>)
 8008960:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008964:	f003 0302 	and.w	r3, r3, #2
 8008968:	2b00      	cmp	r3, #0
 800896a:	d0ed      	beq.n	8008948 <HAL_RCC_OscConfig+0x388>
 800896c:	e015      	b.n	800899a <HAL_RCC_OscConfig+0x3da>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800896e:	f7fd f88b 	bl	8005a88 <HAL_GetTick>
 8008972:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8008974:	e00a      	b.n	800898c <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8008976:	f7fd f887 	bl	8005a88 <HAL_GetTick>
 800897a:	4602      	mov	r2, r0
 800897c:	693b      	ldr	r3, [r7, #16]
 800897e:	1ad3      	subs	r3, r2, r3
 8008980:	f241 3288 	movw	r2, #5000	; 0x1388
 8008984:	4293      	cmp	r3, r2
 8008986:	d901      	bls.n	800898c <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 8008988:	2303      	movs	r3, #3
 800898a:	e12b      	b.n	8008be4 <HAL_RCC_OscConfig+0x624>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800898c:	4b6a      	ldr	r3, [pc, #424]	; (8008b38 <HAL_RCC_OscConfig+0x578>)
 800898e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008992:	f003 0302 	and.w	r3, r3, #2
 8008996:	2b00      	cmp	r3, #0
 8008998:	d1ed      	bne.n	8008976 <HAL_RCC_OscConfig+0x3b6>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 800899a:	7ffb      	ldrb	r3, [r7, #31]
 800899c:	2b01      	cmp	r3, #1
 800899e:	d105      	bne.n	80089ac <HAL_RCC_OscConfig+0x3ec>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80089a0:	4b65      	ldr	r3, [pc, #404]	; (8008b38 <HAL_RCC_OscConfig+0x578>)
 80089a2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80089a4:	4a64      	ldr	r2, [pc, #400]	; (8008b38 <HAL_RCC_OscConfig+0x578>)
 80089a6:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80089aa:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 80089ac:	687b      	ldr	r3, [r7, #4]
 80089ae:	681b      	ldr	r3, [r3, #0]
 80089b0:	f003 0320 	and.w	r3, r3, #32
 80089b4:	2b00      	cmp	r3, #0
 80089b6:	d03c      	beq.n	8008a32 <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 80089b8:	687b      	ldr	r3, [r7, #4]
 80089ba:	699b      	ldr	r3, [r3, #24]
 80089bc:	2b00      	cmp	r3, #0
 80089be:	d01c      	beq.n	80089fa <HAL_RCC_OscConfig+0x43a>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 80089c0:	4b5d      	ldr	r3, [pc, #372]	; (8008b38 <HAL_RCC_OscConfig+0x578>)
 80089c2:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80089c6:	4a5c      	ldr	r2, [pc, #368]	; (8008b38 <HAL_RCC_OscConfig+0x578>)
 80089c8:	f043 0301 	orr.w	r3, r3, #1
 80089cc:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80089d0:	f7fd f85a 	bl	8005a88 <HAL_GetTick>
 80089d4:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 80089d6:	e008      	b.n	80089ea <HAL_RCC_OscConfig+0x42a>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80089d8:	f7fd f856 	bl	8005a88 <HAL_GetTick>
 80089dc:	4602      	mov	r2, r0
 80089de:	693b      	ldr	r3, [r7, #16]
 80089e0:	1ad3      	subs	r3, r2, r3
 80089e2:	2b02      	cmp	r3, #2
 80089e4:	d901      	bls.n	80089ea <HAL_RCC_OscConfig+0x42a>
        {
          return HAL_TIMEOUT;
 80089e6:	2303      	movs	r3, #3
 80089e8:	e0fc      	b.n	8008be4 <HAL_RCC_OscConfig+0x624>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 80089ea:	4b53      	ldr	r3, [pc, #332]	; (8008b38 <HAL_RCC_OscConfig+0x578>)
 80089ec:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80089f0:	f003 0302 	and.w	r3, r3, #2
 80089f4:	2b00      	cmp	r3, #0
 80089f6:	d0ef      	beq.n	80089d8 <HAL_RCC_OscConfig+0x418>
 80089f8:	e01b      	b.n	8008a32 <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 80089fa:	4b4f      	ldr	r3, [pc, #316]	; (8008b38 <HAL_RCC_OscConfig+0x578>)
 80089fc:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8008a00:	4a4d      	ldr	r2, [pc, #308]	; (8008b38 <HAL_RCC_OscConfig+0x578>)
 8008a02:	f023 0301 	bic.w	r3, r3, #1
 8008a06:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8008a0a:	f7fd f83d 	bl	8005a88 <HAL_GetTick>
 8008a0e:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8008a10:	e008      	b.n	8008a24 <HAL_RCC_OscConfig+0x464>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8008a12:	f7fd f839 	bl	8005a88 <HAL_GetTick>
 8008a16:	4602      	mov	r2, r0
 8008a18:	693b      	ldr	r3, [r7, #16]
 8008a1a:	1ad3      	subs	r3, r2, r3
 8008a1c:	2b02      	cmp	r3, #2
 8008a1e:	d901      	bls.n	8008a24 <HAL_RCC_OscConfig+0x464>
        {
          return HAL_TIMEOUT;
 8008a20:	2303      	movs	r3, #3
 8008a22:	e0df      	b.n	8008be4 <HAL_RCC_OscConfig+0x624>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8008a24:	4b44      	ldr	r3, [pc, #272]	; (8008b38 <HAL_RCC_OscConfig+0x578>)
 8008a26:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8008a2a:	f003 0302 	and.w	r3, r3, #2
 8008a2e:	2b00      	cmp	r3, #0
 8008a30:	d1ef      	bne.n	8008a12 <HAL_RCC_OscConfig+0x452>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8008a32:	687b      	ldr	r3, [r7, #4]
 8008a34:	69db      	ldr	r3, [r3, #28]
 8008a36:	2b00      	cmp	r3, #0
 8008a38:	f000 80d3 	beq.w	8008be2 <HAL_RCC_OscConfig+0x622>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8008a3c:	4b3e      	ldr	r3, [pc, #248]	; (8008b38 <HAL_RCC_OscConfig+0x578>)
 8008a3e:	689b      	ldr	r3, [r3, #8]
 8008a40:	f003 030c 	and.w	r3, r3, #12
 8008a44:	2b0c      	cmp	r3, #12
 8008a46:	f000 808d 	beq.w	8008b64 <HAL_RCC_OscConfig+0x5a4>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8008a4a:	687b      	ldr	r3, [r7, #4]
 8008a4c:	69db      	ldr	r3, [r3, #28]
 8008a4e:	2b02      	cmp	r3, #2
 8008a50:	d15a      	bne.n	8008b08 <HAL_RCC_OscConfig+0x548>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8008a52:	4b39      	ldr	r3, [pc, #228]	; (8008b38 <HAL_RCC_OscConfig+0x578>)
 8008a54:	681b      	ldr	r3, [r3, #0]
 8008a56:	4a38      	ldr	r2, [pc, #224]	; (8008b38 <HAL_RCC_OscConfig+0x578>)
 8008a58:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8008a5c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008a5e:	f7fd f813 	bl	8005a88 <HAL_GetTick>
 8008a62:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8008a64:	e008      	b.n	8008a78 <HAL_RCC_OscConfig+0x4b8>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8008a66:	f7fd f80f 	bl	8005a88 <HAL_GetTick>
 8008a6a:	4602      	mov	r2, r0
 8008a6c:	693b      	ldr	r3, [r7, #16]
 8008a6e:	1ad3      	subs	r3, r2, r3
 8008a70:	2b02      	cmp	r3, #2
 8008a72:	d901      	bls.n	8008a78 <HAL_RCC_OscConfig+0x4b8>
          {
            return HAL_TIMEOUT;
 8008a74:	2303      	movs	r3, #3
 8008a76:	e0b5      	b.n	8008be4 <HAL_RCC_OscConfig+0x624>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8008a78:	4b2f      	ldr	r3, [pc, #188]	; (8008b38 <HAL_RCC_OscConfig+0x578>)
 8008a7a:	681b      	ldr	r3, [r3, #0]
 8008a7c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8008a80:	2b00      	cmp	r3, #0
 8008a82:	d1f0      	bne.n	8008a66 <HAL_RCC_OscConfig+0x4a6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8008a84:	4b2c      	ldr	r3, [pc, #176]	; (8008b38 <HAL_RCC_OscConfig+0x578>)
 8008a86:	68da      	ldr	r2, [r3, #12]
 8008a88:	4b2d      	ldr	r3, [pc, #180]	; (8008b40 <HAL_RCC_OscConfig+0x580>)
 8008a8a:	4013      	ands	r3, r2
 8008a8c:	687a      	ldr	r2, [r7, #4]
 8008a8e:	6a11      	ldr	r1, [r2, #32]
 8008a90:	687a      	ldr	r2, [r7, #4]
 8008a92:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8008a94:	3a01      	subs	r2, #1
 8008a96:	0112      	lsls	r2, r2, #4
 8008a98:	4311      	orrs	r1, r2
 8008a9a:	687a      	ldr	r2, [r7, #4]
 8008a9c:	6a92      	ldr	r2, [r2, #40]	; 0x28
 8008a9e:	0212      	lsls	r2, r2, #8
 8008aa0:	4311      	orrs	r1, r2
 8008aa2:	687a      	ldr	r2, [r7, #4]
 8008aa4:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8008aa6:	0852      	lsrs	r2, r2, #1
 8008aa8:	3a01      	subs	r2, #1
 8008aaa:	0552      	lsls	r2, r2, #21
 8008aac:	4311      	orrs	r1, r2
 8008aae:	687a      	ldr	r2, [r7, #4]
 8008ab0:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8008ab2:	0852      	lsrs	r2, r2, #1
 8008ab4:	3a01      	subs	r2, #1
 8008ab6:	0652      	lsls	r2, r2, #25
 8008ab8:	4311      	orrs	r1, r2
 8008aba:	687a      	ldr	r2, [r7, #4]
 8008abc:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8008abe:	06d2      	lsls	r2, r2, #27
 8008ac0:	430a      	orrs	r2, r1
 8008ac2:	491d      	ldr	r1, [pc, #116]	; (8008b38 <HAL_RCC_OscConfig+0x578>)
 8008ac4:	4313      	orrs	r3, r2
 8008ac6:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8008ac8:	4b1b      	ldr	r3, [pc, #108]	; (8008b38 <HAL_RCC_OscConfig+0x578>)
 8008aca:	681b      	ldr	r3, [r3, #0]
 8008acc:	4a1a      	ldr	r2, [pc, #104]	; (8008b38 <HAL_RCC_OscConfig+0x578>)
 8008ace:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8008ad2:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8008ad4:	4b18      	ldr	r3, [pc, #96]	; (8008b38 <HAL_RCC_OscConfig+0x578>)
 8008ad6:	68db      	ldr	r3, [r3, #12]
 8008ad8:	4a17      	ldr	r2, [pc, #92]	; (8008b38 <HAL_RCC_OscConfig+0x578>)
 8008ada:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8008ade:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008ae0:	f7fc ffd2 	bl	8005a88 <HAL_GetTick>
 8008ae4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8008ae6:	e008      	b.n	8008afa <HAL_RCC_OscConfig+0x53a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8008ae8:	f7fc ffce 	bl	8005a88 <HAL_GetTick>
 8008aec:	4602      	mov	r2, r0
 8008aee:	693b      	ldr	r3, [r7, #16]
 8008af0:	1ad3      	subs	r3, r2, r3
 8008af2:	2b02      	cmp	r3, #2
 8008af4:	d901      	bls.n	8008afa <HAL_RCC_OscConfig+0x53a>
          {
            return HAL_TIMEOUT;
 8008af6:	2303      	movs	r3, #3
 8008af8:	e074      	b.n	8008be4 <HAL_RCC_OscConfig+0x624>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8008afa:	4b0f      	ldr	r3, [pc, #60]	; (8008b38 <HAL_RCC_OscConfig+0x578>)
 8008afc:	681b      	ldr	r3, [r3, #0]
 8008afe:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8008b02:	2b00      	cmp	r3, #0
 8008b04:	d0f0      	beq.n	8008ae8 <HAL_RCC_OscConfig+0x528>
 8008b06:	e06c      	b.n	8008be2 <HAL_RCC_OscConfig+0x622>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8008b08:	4b0b      	ldr	r3, [pc, #44]	; (8008b38 <HAL_RCC_OscConfig+0x578>)
 8008b0a:	681b      	ldr	r3, [r3, #0]
 8008b0c:	4a0a      	ldr	r2, [pc, #40]	; (8008b38 <HAL_RCC_OscConfig+0x578>)
 8008b0e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8008b12:	6013      	str	r3, [r2, #0]

        /* Disable all PLL outputs to save power if no PLLs on */
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 8008b14:	4b08      	ldr	r3, [pc, #32]	; (8008b38 <HAL_RCC_OscConfig+0x578>)
 8008b16:	68db      	ldr	r3, [r3, #12]
 8008b18:	4a07      	ldr	r2, [pc, #28]	; (8008b38 <HAL_RCC_OscConfig+0x578>)
 8008b1a:	f023 0303 	bic.w	r3, r3, #3
 8008b1e:	60d3      	str	r3, [r2, #12]
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_ADCCLK);
 8008b20:	4b05      	ldr	r3, [pc, #20]	; (8008b38 <HAL_RCC_OscConfig+0x578>)
 8008b22:	68db      	ldr	r3, [r3, #12]
 8008b24:	4a04      	ldr	r2, [pc, #16]	; (8008b38 <HAL_RCC_OscConfig+0x578>)
 8008b26:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 8008b2a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8008b2e:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008b30:	f7fc ffaa 	bl	8005a88 <HAL_GetTick>
 8008b34:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8008b36:	e00e      	b.n	8008b56 <HAL_RCC_OscConfig+0x596>
 8008b38:	40021000 	.word	0x40021000
 8008b3c:	40007000 	.word	0x40007000
 8008b40:	019f800c 	.word	0x019f800c
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8008b44:	f7fc ffa0 	bl	8005a88 <HAL_GetTick>
 8008b48:	4602      	mov	r2, r0
 8008b4a:	693b      	ldr	r3, [r7, #16]
 8008b4c:	1ad3      	subs	r3, r2, r3
 8008b4e:	2b02      	cmp	r3, #2
 8008b50:	d901      	bls.n	8008b56 <HAL_RCC_OscConfig+0x596>
          {
            return HAL_TIMEOUT;
 8008b52:	2303      	movs	r3, #3
 8008b54:	e046      	b.n	8008be4 <HAL_RCC_OscConfig+0x624>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8008b56:	4b25      	ldr	r3, [pc, #148]	; (8008bec <HAL_RCC_OscConfig+0x62c>)
 8008b58:	681b      	ldr	r3, [r3, #0]
 8008b5a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8008b5e:	2b00      	cmp	r3, #0
 8008b60:	d1f0      	bne.n	8008b44 <HAL_RCC_OscConfig+0x584>
 8008b62:	e03e      	b.n	8008be2 <HAL_RCC_OscConfig+0x622>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8008b64:	687b      	ldr	r3, [r7, #4]
 8008b66:	69db      	ldr	r3, [r3, #28]
 8008b68:	2b01      	cmp	r3, #1
 8008b6a:	d101      	bne.n	8008b70 <HAL_RCC_OscConfig+0x5b0>
      {
        return HAL_ERROR;
 8008b6c:	2301      	movs	r3, #1
 8008b6e:	e039      	b.n	8008be4 <HAL_RCC_OscConfig+0x624>
      }
      else
      {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp_pllckcfg = RCC->PLLCFGR;
 8008b70:	4b1e      	ldr	r3, [pc, #120]	; (8008bec <HAL_RCC_OscConfig+0x62c>)
 8008b72:	68db      	ldr	r3, [r3, #12]
 8008b74:	617b      	str	r3, [r7, #20]
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8008b76:	697b      	ldr	r3, [r7, #20]
 8008b78:	f003 0203 	and.w	r2, r3, #3
 8008b7c:	687b      	ldr	r3, [r7, #4]
 8008b7e:	6a1b      	ldr	r3, [r3, #32]
 8008b80:	429a      	cmp	r2, r3
 8008b82:	d12c      	bne.n	8008bde <HAL_RCC_OscConfig+0x61e>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8008b84:	697b      	ldr	r3, [r7, #20]
 8008b86:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8008b8a:	687b      	ldr	r3, [r7, #4]
 8008b8c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008b8e:	3b01      	subs	r3, #1
 8008b90:	011b      	lsls	r3, r3, #4
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8008b92:	429a      	cmp	r2, r3
 8008b94:	d123      	bne.n	8008bde <HAL_RCC_OscConfig+0x61e>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8008b96:	697b      	ldr	r3, [r7, #20]
 8008b98:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8008b9c:	687b      	ldr	r3, [r7, #4]
 8008b9e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008ba0:	021b      	lsls	r3, r3, #8
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8008ba2:	429a      	cmp	r2, r3
 8008ba4:	d11b      	bne.n	8008bde <HAL_RCC_OscConfig+0x61e>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8008ba6:	697b      	ldr	r3, [r7, #20]
 8008ba8:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 8008bac:	687b      	ldr	r3, [r7, #4]
 8008bae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008bb0:	06db      	lsls	r3, r3, #27
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8008bb2:	429a      	cmp	r2, r3
 8008bb4:	d113      	bne.n	8008bde <HAL_RCC_OscConfig+0x61e>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8008bb6:	697b      	ldr	r3, [r7, #20]
 8008bb8:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8008bbc:	687b      	ldr	r3, [r7, #4]
 8008bbe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008bc0:	085b      	lsrs	r3, r3, #1
 8008bc2:	3b01      	subs	r3, #1
 8008bc4:	055b      	lsls	r3, r3, #21
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8008bc6:	429a      	cmp	r2, r3
 8008bc8:	d109      	bne.n	8008bde <HAL_RCC_OscConfig+0x61e>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8008bca:	697b      	ldr	r3, [r7, #20]
 8008bcc:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8008bd0:	687b      	ldr	r3, [r7, #4]
 8008bd2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008bd4:	085b      	lsrs	r3, r3, #1
 8008bd6:	3b01      	subs	r3, #1
 8008bd8:	065b      	lsls	r3, r3, #25
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8008bda:	429a      	cmp	r2, r3
 8008bdc:	d001      	beq.n	8008be2 <HAL_RCC_OscConfig+0x622>
      {
        return HAL_ERROR;
 8008bde:	2301      	movs	r3, #1
 8008be0:	e000      	b.n	8008be4 <HAL_RCC_OscConfig+0x624>
      }
    }
  }
  }

  return HAL_OK;
 8008be2:	2300      	movs	r3, #0
}
 8008be4:	4618      	mov	r0, r3
 8008be6:	3720      	adds	r7, #32
 8008be8:	46bd      	mov	sp, r7
 8008bea:	bd80      	pop	{r7, pc}
 8008bec:	40021000 	.word	0x40021000

08008bf0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8008bf0:	b580      	push	{r7, lr}
 8008bf2:	b086      	sub	sp, #24
 8008bf4:	af00      	add	r7, sp, #0
 8008bf6:	6078      	str	r0, [r7, #4]
 8008bf8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t pllfreq;
  uint32_t hpre = RCC_SYSCLK_DIV1;
 8008bfa:	2300      	movs	r3, #0
 8008bfc:	617b      	str	r3, [r7, #20]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8008bfe:	687b      	ldr	r3, [r7, #4]
 8008c00:	2b00      	cmp	r3, #0
 8008c02:	d101      	bne.n	8008c08 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8008c04:	2301      	movs	r3, #1
 8008c06:	e11e      	b.n	8008e46 <HAL_RCC_ClockConfig+0x256>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8008c08:	4b91      	ldr	r3, [pc, #580]	; (8008e50 <HAL_RCC_ClockConfig+0x260>)
 8008c0a:	681b      	ldr	r3, [r3, #0]
 8008c0c:	f003 030f 	and.w	r3, r3, #15
 8008c10:	683a      	ldr	r2, [r7, #0]
 8008c12:	429a      	cmp	r2, r3
 8008c14:	d910      	bls.n	8008c38 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8008c16:	4b8e      	ldr	r3, [pc, #568]	; (8008e50 <HAL_RCC_ClockConfig+0x260>)
 8008c18:	681b      	ldr	r3, [r3, #0]
 8008c1a:	f023 020f 	bic.w	r2, r3, #15
 8008c1e:	498c      	ldr	r1, [pc, #560]	; (8008e50 <HAL_RCC_ClockConfig+0x260>)
 8008c20:	683b      	ldr	r3, [r7, #0]
 8008c22:	4313      	orrs	r3, r2
 8008c24:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8008c26:	4b8a      	ldr	r3, [pc, #552]	; (8008e50 <HAL_RCC_ClockConfig+0x260>)
 8008c28:	681b      	ldr	r3, [r3, #0]
 8008c2a:	f003 030f 	and.w	r3, r3, #15
 8008c2e:	683a      	ldr	r2, [r7, #0]
 8008c30:	429a      	cmp	r2, r3
 8008c32:	d001      	beq.n	8008c38 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8008c34:	2301      	movs	r3, #1
 8008c36:	e106      	b.n	8008e46 <HAL_RCC_ClockConfig+0x256>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8008c38:	687b      	ldr	r3, [r7, #4]
 8008c3a:	681b      	ldr	r3, [r3, #0]
 8008c3c:	f003 0301 	and.w	r3, r3, #1
 8008c40:	2b00      	cmp	r3, #0
 8008c42:	d073      	beq.n	8008d2c <HAL_RCC_ClockConfig+0x13c>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8008c44:	687b      	ldr	r3, [r7, #4]
 8008c46:	685b      	ldr	r3, [r3, #4]
 8008c48:	2b03      	cmp	r3, #3
 8008c4a:	d129      	bne.n	8008ca0 <HAL_RCC_ClockConfig+0xb0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8008c4c:	4b81      	ldr	r3, [pc, #516]	; (8008e54 <HAL_RCC_ClockConfig+0x264>)
 8008c4e:	681b      	ldr	r3, [r3, #0]
 8008c50:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8008c54:	2b00      	cmp	r3, #0
 8008c56:	d101      	bne.n	8008c5c <HAL_RCC_ClockConfig+0x6c>
      {
        return HAL_ERROR;
 8008c58:	2301      	movs	r3, #1
 8008c5a:	e0f4      	b.n	8008e46 <HAL_RCC_ClockConfig+0x256>
      }
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      pllfreq = RCC_GetSysClockFreqFromPLLSource();
 8008c5c:	f000 f972 	bl	8008f44 <RCC_GetSysClockFreqFromPLLSource>
 8008c60:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
      if(pllfreq > 80000000U)
 8008c62:	693b      	ldr	r3, [r7, #16]
 8008c64:	4a7c      	ldr	r2, [pc, #496]	; (8008e58 <HAL_RCC_ClockConfig+0x268>)
 8008c66:	4293      	cmp	r3, r2
 8008c68:	d93f      	bls.n	8008cea <HAL_RCC_ClockConfig+0xfa>
      {
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8008c6a:	4b7a      	ldr	r3, [pc, #488]	; (8008e54 <HAL_RCC_ClockConfig+0x264>)
 8008c6c:	689b      	ldr	r3, [r3, #8]
 8008c6e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8008c72:	2b00      	cmp	r3, #0
 8008c74:	d009      	beq.n	8008c8a <HAL_RCC_ClockConfig+0x9a>
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8008c76:	687b      	ldr	r3, [r7, #4]
 8008c78:	681b      	ldr	r3, [r3, #0]
 8008c7a:	f003 0302 	and.w	r3, r3, #2
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8008c7e:	2b00      	cmp	r3, #0
 8008c80:	d033      	beq.n	8008cea <HAL_RCC_ClockConfig+0xfa>
              (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))))
 8008c82:	687b      	ldr	r3, [r7, #4]
 8008c84:	689b      	ldr	r3, [r3, #8]
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8008c86:	2b00      	cmp	r3, #0
 8008c88:	d12f      	bne.n	8008cea <HAL_RCC_ClockConfig+0xfa>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8008c8a:	4b72      	ldr	r3, [pc, #456]	; (8008e54 <HAL_RCC_ClockConfig+0x264>)
 8008c8c:	689b      	ldr	r3, [r3, #8]
 8008c8e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8008c92:	4a70      	ldr	r2, [pc, #448]	; (8008e54 <HAL_RCC_ClockConfig+0x264>)
 8008c94:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008c98:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 8008c9a:	2380      	movs	r3, #128	; 0x80
 8008c9c:	617b      	str	r3, [r7, #20]
 8008c9e:	e024      	b.n	8008cea <HAL_RCC_ClockConfig+0xfa>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8008ca0:	687b      	ldr	r3, [r7, #4]
 8008ca2:	685b      	ldr	r3, [r3, #4]
 8008ca4:	2b02      	cmp	r3, #2
 8008ca6:	d107      	bne.n	8008cb8 <HAL_RCC_ClockConfig+0xc8>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8008ca8:	4b6a      	ldr	r3, [pc, #424]	; (8008e54 <HAL_RCC_ClockConfig+0x264>)
 8008caa:	681b      	ldr	r3, [r3, #0]
 8008cac:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008cb0:	2b00      	cmp	r3, #0
 8008cb2:	d109      	bne.n	8008cc8 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8008cb4:	2301      	movs	r3, #1
 8008cb6:	e0c6      	b.n	8008e46 <HAL_RCC_ClockConfig+0x256>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8008cb8:	4b66      	ldr	r3, [pc, #408]	; (8008e54 <HAL_RCC_ClockConfig+0x264>)
 8008cba:	681b      	ldr	r3, [r3, #0]
 8008cbc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8008cc0:	2b00      	cmp	r3, #0
 8008cc2:	d101      	bne.n	8008cc8 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8008cc4:	2301      	movs	r3, #1
 8008cc6:	e0be      	b.n	8008e46 <HAL_RCC_ClockConfig+0x256>
        }
      }
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      pllfreq = HAL_RCC_GetSysClockFreq();
 8008cc8:	f000 f8ce 	bl	8008e68 <HAL_RCC_GetSysClockFreq>
 8008ccc:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
      if(pllfreq > 80000000U)
 8008cce:	693b      	ldr	r3, [r7, #16]
 8008cd0:	4a61      	ldr	r2, [pc, #388]	; (8008e58 <HAL_RCC_ClockConfig+0x268>)
 8008cd2:	4293      	cmp	r3, r2
 8008cd4:	d909      	bls.n	8008cea <HAL_RCC_ClockConfig+0xfa>
      {
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8008cd6:	4b5f      	ldr	r3, [pc, #380]	; (8008e54 <HAL_RCC_ClockConfig+0x264>)
 8008cd8:	689b      	ldr	r3, [r3, #8]
 8008cda:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8008cde:	4a5d      	ldr	r2, [pc, #372]	; (8008e54 <HAL_RCC_ClockConfig+0x264>)
 8008ce0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008ce4:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 8008ce6:	2380      	movs	r3, #128	; 0x80
 8008ce8:	617b      	str	r3, [r7, #20]
      }

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8008cea:	4b5a      	ldr	r3, [pc, #360]	; (8008e54 <HAL_RCC_ClockConfig+0x264>)
 8008cec:	689b      	ldr	r3, [r3, #8]
 8008cee:	f023 0203 	bic.w	r2, r3, #3
 8008cf2:	687b      	ldr	r3, [r7, #4]
 8008cf4:	685b      	ldr	r3, [r3, #4]
 8008cf6:	4957      	ldr	r1, [pc, #348]	; (8008e54 <HAL_RCC_ClockConfig+0x264>)
 8008cf8:	4313      	orrs	r3, r2
 8008cfa:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8008cfc:	f7fc fec4 	bl	8005a88 <HAL_GetTick>
 8008d00:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8008d02:	e00a      	b.n	8008d1a <HAL_RCC_ClockConfig+0x12a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8008d04:	f7fc fec0 	bl	8005a88 <HAL_GetTick>
 8008d08:	4602      	mov	r2, r0
 8008d0a:	68fb      	ldr	r3, [r7, #12]
 8008d0c:	1ad3      	subs	r3, r2, r3
 8008d0e:	f241 3288 	movw	r2, #5000	; 0x1388
 8008d12:	4293      	cmp	r3, r2
 8008d14:	d901      	bls.n	8008d1a <HAL_RCC_ClockConfig+0x12a>
      {
        return HAL_TIMEOUT;
 8008d16:	2303      	movs	r3, #3
 8008d18:	e095      	b.n	8008e46 <HAL_RCC_ClockConfig+0x256>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8008d1a:	4b4e      	ldr	r3, [pc, #312]	; (8008e54 <HAL_RCC_ClockConfig+0x264>)
 8008d1c:	689b      	ldr	r3, [r3, #8]
 8008d1e:	f003 020c 	and.w	r2, r3, #12
 8008d22:	687b      	ldr	r3, [r7, #4]
 8008d24:	685b      	ldr	r3, [r3, #4]
 8008d26:	009b      	lsls	r3, r3, #2
 8008d28:	429a      	cmp	r2, r3
 8008d2a:	d1eb      	bne.n	8008d04 <HAL_RCC_ClockConfig+0x114>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8008d2c:	687b      	ldr	r3, [r7, #4]
 8008d2e:	681b      	ldr	r3, [r3, #0]
 8008d30:	f003 0302 	and.w	r3, r3, #2
 8008d34:	2b00      	cmp	r3, #0
 8008d36:	d023      	beq.n	8008d80 <HAL_RCC_ClockConfig+0x190>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8008d38:	687b      	ldr	r3, [r7, #4]
 8008d3a:	681b      	ldr	r3, [r3, #0]
 8008d3c:	f003 0304 	and.w	r3, r3, #4
 8008d40:	2b00      	cmp	r3, #0
 8008d42:	d005      	beq.n	8008d50 <HAL_RCC_ClockConfig+0x160>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8008d44:	4b43      	ldr	r3, [pc, #268]	; (8008e54 <HAL_RCC_ClockConfig+0x264>)
 8008d46:	689b      	ldr	r3, [r3, #8]
 8008d48:	4a42      	ldr	r2, [pc, #264]	; (8008e54 <HAL_RCC_ClockConfig+0x264>)
 8008d4a:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8008d4e:	6093      	str	r3, [r2, #8]
    }
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8008d50:	687b      	ldr	r3, [r7, #4]
 8008d52:	681b      	ldr	r3, [r3, #0]
 8008d54:	f003 0308 	and.w	r3, r3, #8
 8008d58:	2b00      	cmp	r3, #0
 8008d5a:	d007      	beq.n	8008d6c <HAL_RCC_ClockConfig+0x17c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, RCC_HCLK_DIV16);
 8008d5c:	4b3d      	ldr	r3, [pc, #244]	; (8008e54 <HAL_RCC_ClockConfig+0x264>)
 8008d5e:	689b      	ldr	r3, [r3, #8]
 8008d60:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8008d64:	4a3b      	ldr	r2, [pc, #236]	; (8008e54 <HAL_RCC_ClockConfig+0x264>)
 8008d66:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8008d6a:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8008d6c:	4b39      	ldr	r3, [pc, #228]	; (8008e54 <HAL_RCC_ClockConfig+0x264>)
 8008d6e:	689b      	ldr	r3, [r3, #8]
 8008d70:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8008d74:	687b      	ldr	r3, [r7, #4]
 8008d76:	689b      	ldr	r3, [r3, #8]
 8008d78:	4936      	ldr	r1, [pc, #216]	; (8008e54 <HAL_RCC_ClockConfig+0x264>)
 8008d7a:	4313      	orrs	r3, r2
 8008d7c:	608b      	str	r3, [r1, #8]
 8008d7e:	e008      	b.n	8008d92 <HAL_RCC_ClockConfig+0x1a2>
  }
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if(hpre == RCC_SYSCLK_DIV2)
 8008d80:	697b      	ldr	r3, [r7, #20]
 8008d82:	2b80      	cmp	r3, #128	; 0x80
 8008d84:	d105      	bne.n	8008d92 <HAL_RCC_ClockConfig+0x1a2>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 8008d86:	4b33      	ldr	r3, [pc, #204]	; (8008e54 <HAL_RCC_ClockConfig+0x264>)
 8008d88:	689b      	ldr	r3, [r3, #8]
 8008d8a:	4a32      	ldr	r2, [pc, #200]	; (8008e54 <HAL_RCC_ClockConfig+0x264>)
 8008d8c:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8008d90:	6093      	str	r3, [r2, #8]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8008d92:	4b2f      	ldr	r3, [pc, #188]	; (8008e50 <HAL_RCC_ClockConfig+0x260>)
 8008d94:	681b      	ldr	r3, [r3, #0]
 8008d96:	f003 030f 	and.w	r3, r3, #15
 8008d9a:	683a      	ldr	r2, [r7, #0]
 8008d9c:	429a      	cmp	r2, r3
 8008d9e:	d21d      	bcs.n	8008ddc <HAL_RCC_ClockConfig+0x1ec>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8008da0:	4b2b      	ldr	r3, [pc, #172]	; (8008e50 <HAL_RCC_ClockConfig+0x260>)
 8008da2:	681b      	ldr	r3, [r3, #0]
 8008da4:	f023 020f 	bic.w	r2, r3, #15
 8008da8:	4929      	ldr	r1, [pc, #164]	; (8008e50 <HAL_RCC_ClockConfig+0x260>)
 8008daa:	683b      	ldr	r3, [r7, #0]
 8008dac:	4313      	orrs	r3, r2
 8008dae:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8008db0:	f7fc fe6a 	bl	8005a88 <HAL_GetTick>
 8008db4:	60f8      	str	r0, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8008db6:	e00a      	b.n	8008dce <HAL_RCC_ClockConfig+0x1de>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8008db8:	f7fc fe66 	bl	8005a88 <HAL_GetTick>
 8008dbc:	4602      	mov	r2, r0
 8008dbe:	68fb      	ldr	r3, [r7, #12]
 8008dc0:	1ad3      	subs	r3, r2, r3
 8008dc2:	f241 3288 	movw	r2, #5000	; 0x1388
 8008dc6:	4293      	cmp	r3, r2
 8008dc8:	d901      	bls.n	8008dce <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_TIMEOUT;
 8008dca:	2303      	movs	r3, #3
 8008dcc:	e03b      	b.n	8008e46 <HAL_RCC_ClockConfig+0x256>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8008dce:	4b20      	ldr	r3, [pc, #128]	; (8008e50 <HAL_RCC_ClockConfig+0x260>)
 8008dd0:	681b      	ldr	r3, [r3, #0]
 8008dd2:	f003 030f 	and.w	r3, r3, #15
 8008dd6:	683a      	ldr	r2, [r7, #0]
 8008dd8:	429a      	cmp	r2, r3
 8008dda:	d1ed      	bne.n	8008db8 <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8008ddc:	687b      	ldr	r3, [r7, #4]
 8008dde:	681b      	ldr	r3, [r3, #0]
 8008de0:	f003 0304 	and.w	r3, r3, #4
 8008de4:	2b00      	cmp	r3, #0
 8008de6:	d008      	beq.n	8008dfa <HAL_RCC_ClockConfig+0x20a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8008de8:	4b1a      	ldr	r3, [pc, #104]	; (8008e54 <HAL_RCC_ClockConfig+0x264>)
 8008dea:	689b      	ldr	r3, [r3, #8]
 8008dec:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8008df0:	687b      	ldr	r3, [r7, #4]
 8008df2:	68db      	ldr	r3, [r3, #12]
 8008df4:	4917      	ldr	r1, [pc, #92]	; (8008e54 <HAL_RCC_ClockConfig+0x264>)
 8008df6:	4313      	orrs	r3, r2
 8008df8:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8008dfa:	687b      	ldr	r3, [r7, #4]
 8008dfc:	681b      	ldr	r3, [r3, #0]
 8008dfe:	f003 0308 	and.w	r3, r3, #8
 8008e02:	2b00      	cmp	r3, #0
 8008e04:	d009      	beq.n	8008e1a <HAL_RCC_ClockConfig+0x22a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8008e06:	4b13      	ldr	r3, [pc, #76]	; (8008e54 <HAL_RCC_ClockConfig+0x264>)
 8008e08:	689b      	ldr	r3, [r3, #8]
 8008e0a:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8008e0e:	687b      	ldr	r3, [r7, #4]
 8008e10:	691b      	ldr	r3, [r3, #16]
 8008e12:	00db      	lsls	r3, r3, #3
 8008e14:	490f      	ldr	r1, [pc, #60]	; (8008e54 <HAL_RCC_ClockConfig+0x264>)
 8008e16:	4313      	orrs	r3, r2
 8008e18:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8008e1a:	f000 f825 	bl	8008e68 <HAL_RCC_GetSysClockFreq>
 8008e1e:	4601      	mov	r1, r0
 8008e20:	4b0c      	ldr	r3, [pc, #48]	; (8008e54 <HAL_RCC_ClockConfig+0x264>)
 8008e22:	689b      	ldr	r3, [r3, #8]
 8008e24:	091b      	lsrs	r3, r3, #4
 8008e26:	f003 030f 	and.w	r3, r3, #15
 8008e2a:	4a0c      	ldr	r2, [pc, #48]	; (8008e5c <HAL_RCC_ClockConfig+0x26c>)
 8008e2c:	5cd3      	ldrb	r3, [r2, r3]
 8008e2e:	f003 031f 	and.w	r3, r3, #31
 8008e32:	fa21 f303 	lsr.w	r3, r1, r3
 8008e36:	4a0a      	ldr	r2, [pc, #40]	; (8008e60 <HAL_RCC_ClockConfig+0x270>)
 8008e38:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 8008e3a:	4b0a      	ldr	r3, [pc, #40]	; (8008e64 <HAL_RCC_ClockConfig+0x274>)
 8008e3c:	681b      	ldr	r3, [r3, #0]
 8008e3e:	4618      	mov	r0, r3
 8008e40:	f7fc fdd6 	bl	80059f0 <HAL_InitTick>
 8008e44:	4603      	mov	r3, r0
}
 8008e46:	4618      	mov	r0, r3
 8008e48:	3718      	adds	r7, #24
 8008e4a:	46bd      	mov	sp, r7
 8008e4c:	bd80      	pop	{r7, pc}
 8008e4e:	bf00      	nop
 8008e50:	40022000 	.word	0x40022000
 8008e54:	40021000 	.word	0x40021000
 8008e58:	04c4b400 	.word	0x04c4b400
 8008e5c:	0800ef90 	.word	0x0800ef90
 8008e60:	20000200 	.word	0x20000200
 8008e64:	20000204 	.word	0x20000204

08008e68 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8008e68:	b480      	push	{r7}
 8008e6a:	b087      	sub	sp, #28
 8008e6c:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 8008e6e:	4b2c      	ldr	r3, [pc, #176]	; (8008f20 <HAL_RCC_GetSysClockFreq+0xb8>)
 8008e70:	689b      	ldr	r3, [r3, #8]
 8008e72:	f003 030c 	and.w	r3, r3, #12
 8008e76:	2b04      	cmp	r3, #4
 8008e78:	d102      	bne.n	8008e80 <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8008e7a:	4b2a      	ldr	r3, [pc, #168]	; (8008f24 <HAL_RCC_GetSysClockFreq+0xbc>)
 8008e7c:	613b      	str	r3, [r7, #16]
 8008e7e:	e047      	b.n	8008f10 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 8008e80:	4b27      	ldr	r3, [pc, #156]	; (8008f20 <HAL_RCC_GetSysClockFreq+0xb8>)
 8008e82:	689b      	ldr	r3, [r3, #8]
 8008e84:	f003 030c 	and.w	r3, r3, #12
 8008e88:	2b08      	cmp	r3, #8
 8008e8a:	d102      	bne.n	8008e92 <HAL_RCC_GetSysClockFreq+0x2a>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8008e8c:	4b26      	ldr	r3, [pc, #152]	; (8008f28 <HAL_RCC_GetSysClockFreq+0xc0>)
 8008e8e:	613b      	str	r3, [r7, #16]
 8008e90:	e03e      	b.n	8008f10 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 8008e92:	4b23      	ldr	r3, [pc, #140]	; (8008f20 <HAL_RCC_GetSysClockFreq+0xb8>)
 8008e94:	689b      	ldr	r3, [r3, #8]
 8008e96:	f003 030c 	and.w	r3, r3, #12
 8008e9a:	2b0c      	cmp	r3, #12
 8008e9c:	d136      	bne.n	8008f0c <HAL_RCC_GetSysClockFreq+0xa4>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8008e9e:	4b20      	ldr	r3, [pc, #128]	; (8008f20 <HAL_RCC_GetSysClockFreq+0xb8>)
 8008ea0:	68db      	ldr	r3, [r3, #12]
 8008ea2:	f003 0303 	and.w	r3, r3, #3
 8008ea6:	60fb      	str	r3, [r7, #12]
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8008ea8:	4b1d      	ldr	r3, [pc, #116]	; (8008f20 <HAL_RCC_GetSysClockFreq+0xb8>)
 8008eaa:	68db      	ldr	r3, [r3, #12]
 8008eac:	091b      	lsrs	r3, r3, #4
 8008eae:	f003 030f 	and.w	r3, r3, #15
 8008eb2:	3301      	adds	r3, #1
 8008eb4:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8008eb6:	68fb      	ldr	r3, [r7, #12]
 8008eb8:	2b03      	cmp	r3, #3
 8008eba:	d10c      	bne.n	8008ed6 <HAL_RCC_GetSysClockFreq+0x6e>
    {
    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8008ebc:	4a1a      	ldr	r2, [pc, #104]	; (8008f28 <HAL_RCC_GetSysClockFreq+0xc0>)
 8008ebe:	68bb      	ldr	r3, [r7, #8]
 8008ec0:	fbb2 f3f3 	udiv	r3, r2, r3
 8008ec4:	4a16      	ldr	r2, [pc, #88]	; (8008f20 <HAL_RCC_GetSysClockFreq+0xb8>)
 8008ec6:	68d2      	ldr	r2, [r2, #12]
 8008ec8:	0a12      	lsrs	r2, r2, #8
 8008eca:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8008ece:	fb02 f303 	mul.w	r3, r2, r3
 8008ed2:	617b      	str	r3, [r7, #20]
      break;
 8008ed4:	e00c      	b.n	8008ef0 <HAL_RCC_GetSysClockFreq+0x88>

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    default:
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8008ed6:	4a13      	ldr	r2, [pc, #76]	; (8008f24 <HAL_RCC_GetSysClockFreq+0xbc>)
 8008ed8:	68bb      	ldr	r3, [r7, #8]
 8008eda:	fbb2 f3f3 	udiv	r3, r2, r3
 8008ede:	4a10      	ldr	r2, [pc, #64]	; (8008f20 <HAL_RCC_GetSysClockFreq+0xb8>)
 8008ee0:	68d2      	ldr	r2, [r2, #12]
 8008ee2:	0a12      	lsrs	r2, r2, #8
 8008ee4:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8008ee8:	fb02 f303 	mul.w	r3, r2, r3
 8008eec:	617b      	str	r3, [r7, #20]
      break;
 8008eee:	bf00      	nop
    }
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8008ef0:	4b0b      	ldr	r3, [pc, #44]	; (8008f20 <HAL_RCC_GetSysClockFreq+0xb8>)
 8008ef2:	68db      	ldr	r3, [r3, #12]
 8008ef4:	0e5b      	lsrs	r3, r3, #25
 8008ef6:	f003 0303 	and.w	r3, r3, #3
 8008efa:	3301      	adds	r3, #1
 8008efc:	005b      	lsls	r3, r3, #1
 8008efe:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco/pllr;
 8008f00:	697a      	ldr	r2, [r7, #20]
 8008f02:	687b      	ldr	r3, [r7, #4]
 8008f04:	fbb2 f3f3 	udiv	r3, r2, r3
 8008f08:	613b      	str	r3, [r7, #16]
 8008f0a:	e001      	b.n	8008f10 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else
  {
    sysclockfreq = 0U;
 8008f0c:	2300      	movs	r3, #0
 8008f0e:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 8008f10:	693b      	ldr	r3, [r7, #16]
}
 8008f12:	4618      	mov	r0, r3
 8008f14:	371c      	adds	r7, #28
 8008f16:	46bd      	mov	sp, r7
 8008f18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f1c:	4770      	bx	lr
 8008f1e:	bf00      	nop
 8008f20:	40021000 	.word	0x40021000
 8008f24:	00f42400 	.word	0x00f42400
 8008f28:	007a1200 	.word	0x007a1200

08008f2c <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8008f2c:	b480      	push	{r7}
 8008f2e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8008f30:	4b03      	ldr	r3, [pc, #12]	; (8008f40 <HAL_RCC_GetHCLKFreq+0x14>)
 8008f32:	681b      	ldr	r3, [r3, #0]
}
 8008f34:	4618      	mov	r0, r3
 8008f36:	46bd      	mov	sp, r7
 8008f38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f3c:	4770      	bx	lr
 8008f3e:	bf00      	nop
 8008f40:	20000200 	.word	0x20000200

08008f44 <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 8008f44:	b480      	push	{r7}
 8008f46:	b087      	sub	sp, #28
 8008f48:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8008f4a:	4b1e      	ldr	r3, [pc, #120]	; (8008fc4 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8008f4c:	68db      	ldr	r3, [r3, #12]
 8008f4e:	f003 0303 	and.w	r3, r3, #3
 8008f52:	613b      	str	r3, [r7, #16]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8008f54:	4b1b      	ldr	r3, [pc, #108]	; (8008fc4 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8008f56:	68db      	ldr	r3, [r3, #12]
 8008f58:	091b      	lsrs	r3, r3, #4
 8008f5a:	f003 030f 	and.w	r3, r3, #15
 8008f5e:	3301      	adds	r3, #1
 8008f60:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 8008f62:	693b      	ldr	r3, [r7, #16]
 8008f64:	2b03      	cmp	r3, #3
 8008f66:	d10c      	bne.n	8008f82 <RCC_GetSysClockFreqFromPLLSource+0x3e>
  {
  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8008f68:	4a17      	ldr	r2, [pc, #92]	; (8008fc8 <RCC_GetSysClockFreqFromPLLSource+0x84>)
 8008f6a:	68fb      	ldr	r3, [r7, #12]
 8008f6c:	fbb2 f3f3 	udiv	r3, r2, r3
 8008f70:	4a14      	ldr	r2, [pc, #80]	; (8008fc4 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8008f72:	68d2      	ldr	r2, [r2, #12]
 8008f74:	0a12      	lsrs	r2, r2, #8
 8008f76:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8008f7a:	fb02 f303 	mul.w	r3, r2, r3
 8008f7e:	617b      	str	r3, [r7, #20]
    break;
 8008f80:	e00c      	b.n	8008f9c <RCC_GetSysClockFreqFromPLLSource+0x58>

  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
  default:
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8008f82:	4a12      	ldr	r2, [pc, #72]	; (8008fcc <RCC_GetSysClockFreqFromPLLSource+0x88>)
 8008f84:	68fb      	ldr	r3, [r7, #12]
 8008f86:	fbb2 f3f3 	udiv	r3, r2, r3
 8008f8a:	4a0e      	ldr	r2, [pc, #56]	; (8008fc4 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8008f8c:	68d2      	ldr	r2, [r2, #12]
 8008f8e:	0a12      	lsrs	r2, r2, #8
 8008f90:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8008f94:	fb02 f303 	mul.w	r3, r2, r3
 8008f98:	617b      	str	r3, [r7, #20]
    break;
 8008f9a:	bf00      	nop
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8008f9c:	4b09      	ldr	r3, [pc, #36]	; (8008fc4 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8008f9e:	68db      	ldr	r3, [r3, #12]
 8008fa0:	0e5b      	lsrs	r3, r3, #25
 8008fa2:	f003 0303 	and.w	r3, r3, #3
 8008fa6:	3301      	adds	r3, #1
 8008fa8:	005b      	lsls	r3, r3, #1
 8008faa:	60bb      	str	r3, [r7, #8]
  sysclockfreq = pllvco/pllr;
 8008fac:	697a      	ldr	r2, [r7, #20]
 8008fae:	68bb      	ldr	r3, [r7, #8]
 8008fb0:	fbb2 f3f3 	udiv	r3, r2, r3
 8008fb4:	607b      	str	r3, [r7, #4]

  return sysclockfreq;
 8008fb6:	687b      	ldr	r3, [r7, #4]
}
 8008fb8:	4618      	mov	r0, r3
 8008fba:	371c      	adds	r7, #28
 8008fbc:	46bd      	mov	sp, r7
 8008fbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008fc2:	4770      	bx	lr
 8008fc4:	40021000 	.word	0x40021000
 8008fc8:	007a1200 	.word	0x007a1200
 8008fcc:	00f42400 	.word	0x00f42400

08008fd0 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8008fd0:	b580      	push	{r7, lr}
 8008fd2:	b086      	sub	sp, #24
 8008fd4:	af00      	add	r7, sp, #0
 8008fd6:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8008fd8:	2300      	movs	r3, #0
 8008fda:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8008fdc:	2300      	movs	r3, #0
 8008fde:	74bb      	strb	r3, [r7, #18]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8008fe0:	687b      	ldr	r3, [r7, #4]
 8008fe2:	681b      	ldr	r3, [r3, #0]
 8008fe4:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8008fe8:	2b00      	cmp	r3, #0
 8008fea:	f000 8098 	beq.w	800911e <HAL_RCCEx_PeriphCLKConfig+0x14e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8008fee:	2300      	movs	r3, #0
 8008ff0:	747b      	strb	r3, [r7, #17]
    
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8008ff2:	4b43      	ldr	r3, [pc, #268]	; (8009100 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8008ff4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008ff6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8008ffa:	2b00      	cmp	r3, #0
 8008ffc:	d10d      	bne.n	800901a <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8008ffe:	4b40      	ldr	r3, [pc, #256]	; (8009100 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8009000:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009002:	4a3f      	ldr	r2, [pc, #252]	; (8009100 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8009004:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8009008:	6593      	str	r3, [r2, #88]	; 0x58
 800900a:	4b3d      	ldr	r3, [pc, #244]	; (8009100 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800900c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800900e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8009012:	60bb      	str	r3, [r7, #8]
 8009014:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8009016:	2301      	movs	r3, #1
 8009018:	747b      	strb	r3, [r7, #17]
    }
      
    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800901a:	4b3a      	ldr	r3, [pc, #232]	; (8009104 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 800901c:	681b      	ldr	r3, [r3, #0]
 800901e:	4a39      	ldr	r2, [pc, #228]	; (8009104 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8009020:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8009024:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8009026:	f7fc fd2f 	bl	8005a88 <HAL_GetTick>
 800902a:	60f8      	str	r0, [r7, #12]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800902c:	e009      	b.n	8009042 <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800902e:	f7fc fd2b 	bl	8005a88 <HAL_GetTick>
 8009032:	4602      	mov	r2, r0
 8009034:	68fb      	ldr	r3, [r7, #12]
 8009036:	1ad3      	subs	r3, r2, r3
 8009038:	2b02      	cmp	r3, #2
 800903a:	d902      	bls.n	8009042 <HAL_RCCEx_PeriphCLKConfig+0x72>
      {
        ret = HAL_TIMEOUT;
 800903c:	2303      	movs	r3, #3
 800903e:	74fb      	strb	r3, [r7, #19]
        break;
 8009040:	e005      	b.n	800904e <HAL_RCCEx_PeriphCLKConfig+0x7e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8009042:	4b30      	ldr	r3, [pc, #192]	; (8009104 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8009044:	681b      	ldr	r3, [r3, #0]
 8009046:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800904a:	2b00      	cmp	r3, #0
 800904c:	d0ef      	beq.n	800902e <HAL_RCCEx_PeriphCLKConfig+0x5e>
      }
    }

    if(ret == HAL_OK)
 800904e:	7cfb      	ldrb	r3, [r7, #19]
 8009050:	2b00      	cmp	r3, #0
 8009052:	d159      	bne.n	8009108 <HAL_RCCEx_PeriphCLKConfig+0x138>
    { 
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8009054:	4b2a      	ldr	r3, [pc, #168]	; (8009100 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8009056:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800905a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800905e:	617b      	str	r3, [r7, #20]
      
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8009060:	697b      	ldr	r3, [r7, #20]
 8009062:	2b00      	cmp	r3, #0
 8009064:	d01e      	beq.n	80090a4 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 8009066:	687b      	ldr	r3, [r7, #4]
 8009068:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800906a:	697a      	ldr	r2, [r7, #20]
 800906c:	429a      	cmp	r2, r3
 800906e:	d019      	beq.n	80090a4 <HAL_RCCEx_PeriphCLKConfig+0xd4>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8009070:	4b23      	ldr	r3, [pc, #140]	; (8009100 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8009072:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8009076:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800907a:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 800907c:	4b20      	ldr	r3, [pc, #128]	; (8009100 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800907e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8009082:	4a1f      	ldr	r2, [pc, #124]	; (8009100 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8009084:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8009088:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 800908c:	4b1c      	ldr	r3, [pc, #112]	; (8009100 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800908e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8009092:	4a1b      	ldr	r2, [pc, #108]	; (8009100 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8009094:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8009098:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 800909c:	4a18      	ldr	r2, [pc, #96]	; (8009100 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800909e:	697b      	ldr	r3, [r7, #20]
 80090a0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 80090a4:	697b      	ldr	r3, [r7, #20]
 80090a6:	f003 0301 	and.w	r3, r3, #1
 80090aa:	2b00      	cmp	r3, #0
 80090ac:	d016      	beq.n	80090dc <HAL_RCCEx_PeriphCLKConfig+0x10c>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80090ae:	f7fc fceb 	bl	8005a88 <HAL_GetTick>
 80090b2:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80090b4:	e00b      	b.n	80090ce <HAL_RCCEx_PeriphCLKConfig+0xfe>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80090b6:	f7fc fce7 	bl	8005a88 <HAL_GetTick>
 80090ba:	4602      	mov	r2, r0
 80090bc:	68fb      	ldr	r3, [r7, #12]
 80090be:	1ad3      	subs	r3, r2, r3
 80090c0:	f241 3288 	movw	r2, #5000	; 0x1388
 80090c4:	4293      	cmp	r3, r2
 80090c6:	d902      	bls.n	80090ce <HAL_RCCEx_PeriphCLKConfig+0xfe>
          {
            ret = HAL_TIMEOUT;
 80090c8:	2303      	movs	r3, #3
 80090ca:	74fb      	strb	r3, [r7, #19]
            break;
 80090cc:	e006      	b.n	80090dc <HAL_RCCEx_PeriphCLKConfig+0x10c>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80090ce:	4b0c      	ldr	r3, [pc, #48]	; (8009100 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80090d0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80090d4:	f003 0302 	and.w	r3, r3, #2
 80090d8:	2b00      	cmp	r3, #0
 80090da:	d0ec      	beq.n	80090b6 <HAL_RCCEx_PeriphCLKConfig+0xe6>
          }
        }
      }
      
      if(ret == HAL_OK)
 80090dc:	7cfb      	ldrb	r3, [r7, #19]
 80090de:	2b00      	cmp	r3, #0
 80090e0:	d10b      	bne.n	80090fa <HAL_RCCEx_PeriphCLKConfig+0x12a>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80090e2:	4b07      	ldr	r3, [pc, #28]	; (8009100 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80090e4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80090e8:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80090ec:	687b      	ldr	r3, [r7, #4]
 80090ee:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80090f0:	4903      	ldr	r1, [pc, #12]	; (8009100 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80090f2:	4313      	orrs	r3, r2
 80090f4:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 80090f8:	e008      	b.n	800910c <HAL_RCCEx_PeriphCLKConfig+0x13c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 80090fa:	7cfb      	ldrb	r3, [r7, #19]
 80090fc:	74bb      	strb	r3, [r7, #18]
 80090fe:	e005      	b.n	800910c <HAL_RCCEx_PeriphCLKConfig+0x13c>
 8009100:	40021000 	.word	0x40021000
 8009104:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009108:	7cfb      	ldrb	r3, [r7, #19]
 800910a:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800910c:	7c7b      	ldrb	r3, [r7, #17]
 800910e:	2b01      	cmp	r3, #1
 8009110:	d105      	bne.n	800911e <HAL_RCCEx_PeriphCLKConfig+0x14e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8009112:	4baf      	ldr	r3, [pc, #700]	; (80093d0 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8009114:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009116:	4aae      	ldr	r2, [pc, #696]	; (80093d0 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8009118:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800911c:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800911e:	687b      	ldr	r3, [r7, #4]
 8009120:	681b      	ldr	r3, [r3, #0]
 8009122:	f003 0301 	and.w	r3, r3, #1
 8009126:	2b00      	cmp	r3, #0
 8009128:	d00a      	beq.n	8009140 <HAL_RCCEx_PeriphCLKConfig+0x170>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800912a:	4ba9      	ldr	r3, [pc, #676]	; (80093d0 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 800912c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009130:	f023 0203 	bic.w	r2, r3, #3
 8009134:	687b      	ldr	r3, [r7, #4]
 8009136:	685b      	ldr	r3, [r3, #4]
 8009138:	49a5      	ldr	r1, [pc, #660]	; (80093d0 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 800913a:	4313      	orrs	r3, r2
 800913c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8009140:	687b      	ldr	r3, [r7, #4]
 8009142:	681b      	ldr	r3, [r3, #0]
 8009144:	f003 0302 	and.w	r3, r3, #2
 8009148:	2b00      	cmp	r3, #0
 800914a:	d00a      	beq.n	8009162 <HAL_RCCEx_PeriphCLKConfig+0x192>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 800914c:	4ba0      	ldr	r3, [pc, #640]	; (80093d0 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 800914e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009152:	f023 020c 	bic.w	r2, r3, #12
 8009156:	687b      	ldr	r3, [r7, #4]
 8009158:	689b      	ldr	r3, [r3, #8]
 800915a:	499d      	ldr	r1, [pc, #628]	; (80093d0 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 800915c:	4313      	orrs	r3, r2
 800915e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8009162:	687b      	ldr	r3, [r7, #4]
 8009164:	681b      	ldr	r3, [r3, #0]
 8009166:	f003 0304 	and.w	r3, r3, #4
 800916a:	2b00      	cmp	r3, #0
 800916c:	d00a      	beq.n	8009184 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 800916e:	4b98      	ldr	r3, [pc, #608]	; (80093d0 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8009170:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009174:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8009178:	687b      	ldr	r3, [r7, #4]
 800917a:	68db      	ldr	r3, [r3, #12]
 800917c:	4994      	ldr	r1, [pc, #592]	; (80093d0 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 800917e:	4313      	orrs	r3, r2
 8009180:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(UART4)
  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8009184:	687b      	ldr	r3, [r7, #4]
 8009186:	681b      	ldr	r3, [r3, #0]
 8009188:	f003 0308 	and.w	r3, r3, #8
 800918c:	2b00      	cmp	r3, #0
 800918e:	d00a      	beq.n	80091a6 <HAL_RCCEx_PeriphCLKConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8009190:	4b8f      	ldr	r3, [pc, #572]	; (80093d0 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8009192:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009196:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 800919a:	687b      	ldr	r3, [r7, #4]
 800919c:	691b      	ldr	r3, [r3, #16]
 800919e:	498c      	ldr	r1, [pc, #560]	; (80093d0 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 80091a0:	4313      	orrs	r3, r2
 80091a2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 80091a6:	687b      	ldr	r3, [r7, #4]
 80091a8:	681b      	ldr	r3, [r3, #0]
 80091aa:	f003 0310 	and.w	r3, r3, #16
 80091ae:	2b00      	cmp	r3, #0
 80091b0:	d00a      	beq.n	80091c8 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 80091b2:	4b87      	ldr	r3, [pc, #540]	; (80093d0 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 80091b4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80091b8:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80091bc:	687b      	ldr	r3, [r7, #4]
 80091be:	695b      	ldr	r3, [r3, #20]
 80091c0:	4983      	ldr	r1, [pc, #524]	; (80093d0 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 80091c2:	4313      	orrs	r3, r2
 80091c4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80091c8:	687b      	ldr	r3, [r7, #4]
 80091ca:	681b      	ldr	r3, [r3, #0]
 80091cc:	f003 0320 	and.w	r3, r3, #32
 80091d0:	2b00      	cmp	r3, #0
 80091d2:	d00a      	beq.n	80091ea <HAL_RCCEx_PeriphCLKConfig+0x21a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80091d4:	4b7e      	ldr	r3, [pc, #504]	; (80093d0 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 80091d6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80091da:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 80091de:	687b      	ldr	r3, [r7, #4]
 80091e0:	699b      	ldr	r3, [r3, #24]
 80091e2:	497b      	ldr	r1, [pc, #492]	; (80093d0 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 80091e4:	4313      	orrs	r3, r2
 80091e6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80091ea:	687b      	ldr	r3, [r7, #4]
 80091ec:	681b      	ldr	r3, [r3, #0]
 80091ee:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80091f2:	2b00      	cmp	r3, #0
 80091f4:	d00a      	beq.n	800920c <HAL_RCCEx_PeriphCLKConfig+0x23c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80091f6:	4b76      	ldr	r3, [pc, #472]	; (80093d0 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 80091f8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80091fc:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8009200:	687b      	ldr	r3, [r7, #4]
 8009202:	69db      	ldr	r3, [r3, #28]
 8009204:	4972      	ldr	r1, [pc, #456]	; (80093d0 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8009206:	4313      	orrs	r3, r2
 8009208:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 800920c:	687b      	ldr	r3, [r7, #4]
 800920e:	681b      	ldr	r3, [r3, #0]
 8009210:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009214:	2b00      	cmp	r3, #0
 8009216:	d00a      	beq.n	800922e <HAL_RCCEx_PeriphCLKConfig+0x25e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8009218:	4b6d      	ldr	r3, [pc, #436]	; (80093d0 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 800921a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800921e:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8009222:	687b      	ldr	r3, [r7, #4]
 8009224:	6a1b      	ldr	r3, [r3, #32]
 8009226:	496a      	ldr	r1, [pc, #424]	; (80093d0 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8009228:	4313      	orrs	r3, r2
 800922a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 800922e:	687b      	ldr	r3, [r7, #4]
 8009230:	681b      	ldr	r3, [r3, #0]
 8009232:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009236:	2b00      	cmp	r3, #0
 8009238:	d00a      	beq.n	8009250 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 800923a:	4b65      	ldr	r3, [pc, #404]	; (80093d0 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 800923c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009240:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8009244:	687b      	ldr	r3, [r7, #4]
 8009246:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009248:	4961      	ldr	r1, [pc, #388]	; (80093d0 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 800924a:	4313      	orrs	r3, r2
 800924c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C4)  

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8009250:	687b      	ldr	r3, [r7, #4]
 8009252:	681b      	ldr	r3, [r3, #0]
 8009254:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8009258:	2b00      	cmp	r3, #0
 800925a:	d00a      	beq.n	8009272 <HAL_RCCEx_PeriphCLKConfig+0x2a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 800925c:	4b5c      	ldr	r3, [pc, #368]	; (80093d0 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 800925e:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8009262:	f023 0203 	bic.w	r2, r3, #3
 8009266:	687b      	ldr	r3, [r7, #4]
 8009268:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800926a:	4959      	ldr	r1, [pc, #356]	; (80093d0 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 800926c:	4313      	orrs	r3, r2
 800926e:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
  }

#endif /* I2C4 */

  /*-------------------------- LPTIM1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8009272:	687b      	ldr	r3, [r7, #4]
 8009274:	681b      	ldr	r3, [r3, #0]
 8009276:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800927a:	2b00      	cmp	r3, #0
 800927c:	d00a      	beq.n	8009294 <HAL_RCCEx_PeriphCLKConfig+0x2c4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800927e:	4b54      	ldr	r3, [pc, #336]	; (80093d0 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8009280:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009284:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8009288:	687b      	ldr	r3, [r7, #4]
 800928a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800928c:	4950      	ldr	r1, [pc, #320]	; (80093d0 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 800928e:	4313      	orrs	r3, r2
 8009290:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8009294:	687b      	ldr	r3, [r7, #4]
 8009296:	681b      	ldr	r3, [r3, #0]
 8009298:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800929c:	2b00      	cmp	r3, #0
 800929e:	d015      	beq.n	80092cc <HAL_RCCEx_PeriphCLKConfig+0x2fc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure the SAI1 interface clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80092a0:	4b4b      	ldr	r3, [pc, #300]	; (80093d0 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 80092a2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80092a6:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80092aa:	687b      	ldr	r3, [r7, #4]
 80092ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80092ae:	4948      	ldr	r1, [pc, #288]	; (80093d0 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 80092b0:	4313      	orrs	r3, r2
 80092b2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLL)
 80092b6:	687b      	ldr	r3, [r7, #4]
 80092b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80092ba:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80092be:	d105      	bne.n	80092cc <HAL_RCCEx_PeriphCLKConfig+0x2fc>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80092c0:	4b43      	ldr	r3, [pc, #268]	; (80093d0 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 80092c2:	68db      	ldr	r3, [r3, #12]
 80092c4:	4a42      	ldr	r2, [pc, #264]	; (80093d0 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 80092c6:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80092ca:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- I2S clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 80092cc:	687b      	ldr	r3, [r7, #4]
 80092ce:	681b      	ldr	r3, [r3, #0]
 80092d0:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80092d4:	2b00      	cmp	r3, #0
 80092d6:	d015      	beq.n	8009304 <HAL_RCCEx_PeriphCLKConfig+0x334>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure the I2S interface clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 80092d8:	4b3d      	ldr	r3, [pc, #244]	; (80093d0 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 80092da:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80092de:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 80092e2:	687b      	ldr	r3, [r7, #4]
 80092e4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80092e6:	493a      	ldr	r1, [pc, #232]	; (80093d0 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 80092e8:	4313      	orrs	r3, r2
 80092ea:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLL)
 80092ee:	687b      	ldr	r3, [r7, #4]
 80092f0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80092f2:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80092f6:	d105      	bne.n	8009304 <HAL_RCCEx_PeriphCLKConfig+0x334>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80092f8:	4b35      	ldr	r3, [pc, #212]	; (80093d0 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 80092fa:	68db      	ldr	r3, [r3, #12]
 80092fc:	4a34      	ldr	r2, [pc, #208]	; (80093d0 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 80092fe:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8009302:	60d3      	str	r3, [r2, #12]
    }
  }

#if defined(FDCAN1)
  /*-------------------------- FDCAN clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8009304:	687b      	ldr	r3, [r7, #4]
 8009306:	681b      	ldr	r3, [r3, #0]
 8009308:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800930c:	2b00      	cmp	r3, #0
 800930e:	d015      	beq.n	800933c <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN interface clock source */
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8009310:	4b2f      	ldr	r3, [pc, #188]	; (80093d0 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8009312:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009316:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 800931a:	687b      	ldr	r3, [r7, #4]
 800931c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800931e:	492c      	ldr	r1, [pc, #176]	; (80093d0 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8009320:	4313      	orrs	r3, r2
 8009322:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 8009326:	687b      	ldr	r3, [r7, #4]
 8009328:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800932a:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800932e:	d105      	bne.n	800933c <HAL_RCCEx_PeriphCLKConfig+0x36c>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8009330:	4b27      	ldr	r3, [pc, #156]	; (80093d0 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8009332:	68db      	ldr	r3, [r3, #12]
 8009334:	4a26      	ldr	r2, [pc, #152]	; (80093d0 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8009336:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800933a:	60d3      	str	r3, [r2, #12]
#endif /* FDCAN1 */

#if defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 800933c:	687b      	ldr	r3, [r7, #4]
 800933e:	681b      	ldr	r3, [r3, #0]
 8009340:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8009344:	2b00      	cmp	r3, #0
 8009346:	d015      	beq.n	8009374 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8009348:	4b21      	ldr	r3, [pc, #132]	; (80093d0 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 800934a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800934e:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8009352:	687b      	ldr	r3, [r7, #4]
 8009354:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009356:	491e      	ldr	r1, [pc, #120]	; (80093d0 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8009358:	4313      	orrs	r3, r2
 800935a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 800935e:	687b      	ldr	r3, [r7, #4]
 8009360:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009362:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8009366:	d105      	bne.n	8009374 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8009368:	4b19      	ldr	r3, [pc, #100]	; (80093d0 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 800936a:	68db      	ldr	r3, [r3, #12]
 800936c:	4a18      	ldr	r2, [pc, #96]	; (80093d0 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 800936e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8009372:	60d3      	str	r3, [r2, #12]
  }

#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8009374:	687b      	ldr	r3, [r7, #4]
 8009376:	681b      	ldr	r3, [r3, #0]
 8009378:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800937c:	2b00      	cmp	r3, #0
 800937e:	d015      	beq.n	80093ac <HAL_RCCEx_PeriphCLKConfig+0x3dc>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8009380:	4b13      	ldr	r3, [pc, #76]	; (80093d0 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8009382:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009386:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 800938a:	687b      	ldr	r3, [r7, #4]
 800938c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800938e:	4910      	ldr	r1, [pc, #64]	; (80093d0 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8009390:	4313      	orrs	r3, r2
 8009392:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8009396:	687b      	ldr	r3, [r7, #4]
 8009398:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800939a:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800939e:	d105      	bne.n	80093ac <HAL_RCCEx_PeriphCLKConfig+0x3dc>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80093a0:	4b0b      	ldr	r3, [pc, #44]	; (80093d0 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 80093a2:	68db      	ldr	r3, [r3, #12]
 80093a4:	4a0a      	ldr	r2, [pc, #40]	; (80093d0 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 80093a6:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80093aa:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- ADC12 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 80093ac:	687b      	ldr	r3, [r7, #4]
 80093ae:	681b      	ldr	r3, [r3, #0]
 80093b0:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80093b4:	2b00      	cmp	r3, #0
 80093b6:	d018      	beq.n	80093ea <HAL_RCCEx_PeriphCLKConfig+0x41a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12CLKSOURCE(PeriphClkInit->Adc12ClockSelection));

    /* Configure the ADC12 interface clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 80093b8:	4b05      	ldr	r3, [pc, #20]	; (80093d0 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 80093ba:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80093be:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 80093c2:	687b      	ldr	r3, [r7, #4]
 80093c4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80093c6:	4902      	ldr	r1, [pc, #8]	; (80093d0 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 80093c8:	4313      	orrs	r3, r2
 80093ca:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 80093ce:	e001      	b.n	80093d4 <HAL_RCCEx_PeriphCLKConfig+0x404>
 80093d0:	40021000 	.word	0x40021000
    
    if(PeriphClkInit->Adc12ClockSelection == RCC_ADC12CLKSOURCE_PLL)
 80093d4:	687b      	ldr	r3, [r7, #4]
 80093d6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80093d8:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80093dc:	d105      	bne.n	80093ea <HAL_RCCEx_PeriphCLKConfig+0x41a>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 80093de:	4b21      	ldr	r3, [pc, #132]	; (8009464 <HAL_RCCEx_PeriphCLKConfig+0x494>)
 80093e0:	68db      	ldr	r3, [r3, #12]
 80093e2:	4a20      	ldr	r2, [pc, #128]	; (8009464 <HAL_RCCEx_PeriphCLKConfig+0x494>)
 80093e4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80093e8:	60d3      	str	r3, [r2, #12]
    }
  }
  
#if defined(ADC345_COMMON)
  /*-------------------------- ADC345 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC345) == RCC_PERIPHCLK_ADC345)
 80093ea:	687b      	ldr	r3, [r7, #4]
 80093ec:	681b      	ldr	r3, [r3, #0]
 80093ee:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80093f2:	2b00      	cmp	r3, #0
 80093f4:	d015      	beq.n	8009422 <HAL_RCCEx_PeriphCLKConfig+0x452>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC345CLKSOURCE(PeriphClkInit->Adc345ClockSelection));

    /* Configure the ADC345 interface clock source */
    __HAL_RCC_ADC345_CONFIG(PeriphClkInit->Adc345ClockSelection);
 80093f6:	4b1b      	ldr	r3, [pc, #108]	; (8009464 <HAL_RCCEx_PeriphCLKConfig+0x494>)
 80093f8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80093fc:	f023 4240 	bic.w	r2, r3, #3221225472	; 0xc0000000
 8009400:	687b      	ldr	r3, [r7, #4]
 8009402:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8009404:	4917      	ldr	r1, [pc, #92]	; (8009464 <HAL_RCCEx_PeriphCLKConfig+0x494>)
 8009406:	4313      	orrs	r3, r2
 8009408:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Adc345ClockSelection == RCC_ADC345CLKSOURCE_PLL)
 800940c:	687b      	ldr	r3, [r7, #4]
 800940e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8009410:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8009414:	d105      	bne.n	8009422 <HAL_RCCEx_PeriphCLKConfig+0x452>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8009416:	4b13      	ldr	r3, [pc, #76]	; (8009464 <HAL_RCCEx_PeriphCLKConfig+0x494>)
 8009418:	68db      	ldr	r3, [r3, #12]
 800941a:	4a12      	ldr	r2, [pc, #72]	; (8009464 <HAL_RCCEx_PeriphCLKConfig+0x494>)
 800941c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8009420:	60d3      	str	r3, [r2, #12]
#endif /* ADC345_COMMON */

#if defined(QUADSPI)

  /*-------------------------- QuadSPIx clock source configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 8009422:	687b      	ldr	r3, [r7, #4]
 8009424:	681b      	ldr	r3, [r3, #0]
 8009426:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800942a:	2b00      	cmp	r3, #0
 800942c:	d015      	beq.n	800945a <HAL_RCCEx_PeriphCLKConfig+0x48a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_QSPICLKSOURCE(PeriphClkInit->QspiClockSelection));

    /* Configure the QuadSPI clock source */
    __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 800942e:	4b0d      	ldr	r3, [pc, #52]	; (8009464 <HAL_RCCEx_PeriphCLKConfig+0x494>)
 8009430:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8009434:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8009438:	687b      	ldr	r3, [r7, #4]
 800943a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800943c:	4909      	ldr	r1, [pc, #36]	; (8009464 <HAL_RCCEx_PeriphCLKConfig+0x494>)
 800943e:	4313      	orrs	r3, r2
 8009440:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c

    if(PeriphClkInit->QspiClockSelection == RCC_QSPICLKSOURCE_PLL)
 8009444:	687b      	ldr	r3, [r7, #4]
 8009446:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8009448:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800944c:	d105      	bne.n	800945a <HAL_RCCEx_PeriphCLKConfig+0x48a>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800944e:	4b05      	ldr	r3, [pc, #20]	; (8009464 <HAL_RCCEx_PeriphCLKConfig+0x494>)
 8009450:	68db      	ldr	r3, [r3, #12]
 8009452:	4a04      	ldr	r2, [pc, #16]	; (8009464 <HAL_RCCEx_PeriphCLKConfig+0x494>)
 8009454:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8009458:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* QUADSPI */

  return status;
 800945a:	7cbb      	ldrb	r3, [r7, #18]
}
 800945c:	4618      	mov	r0, r3
 800945e:	3718      	adds	r7, #24
 8009460:	46bd      	mov	sp, r7
 8009462:	bd80      	pop	{r7, pc}
 8009464:	40021000 	.word	0x40021000

08009468 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8009468:	b580      	push	{r7, lr}
 800946a:	b084      	sub	sp, #16
 800946c:	af00      	add	r7, sp, #0
 800946e:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8009470:	687b      	ldr	r3, [r7, #4]
 8009472:	2b00      	cmp	r3, #0
 8009474:	d101      	bne.n	800947a <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8009476:	2301      	movs	r3, #1
 8009478:	e084      	b.n	8009584 <HAL_SPI_Init+0x11c>
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800947a:	687b      	ldr	r3, [r7, #4]
 800947c:	2200      	movs	r2, #0
 800947e:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8009480:	687b      	ldr	r3, [r7, #4]
 8009482:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8009486:	b2db      	uxtb	r3, r3
 8009488:	2b00      	cmp	r3, #0
 800948a:	d106      	bne.n	800949a <HAL_SPI_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800948c:	687b      	ldr	r3, [r7, #4]
 800948e:	2200      	movs	r2, #0
 8009490:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8009494:	6878      	ldr	r0, [r7, #4]
 8009496:	f7fb fcbd 	bl	8004e14 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800949a:	687b      	ldr	r3, [r7, #4]
 800949c:	2202      	movs	r2, #2
 800949e:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80094a2:	687b      	ldr	r3, [r7, #4]
 80094a4:	681b      	ldr	r3, [r3, #0]
 80094a6:	681a      	ldr	r2, [r3, #0]
 80094a8:	687b      	ldr	r3, [r7, #4]
 80094aa:	681b      	ldr	r3, [r3, #0]
 80094ac:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80094b0:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80094b2:	687b      	ldr	r3, [r7, #4]
 80094b4:	68db      	ldr	r3, [r3, #12]
 80094b6:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 80094ba:	d902      	bls.n	80094c2 <HAL_SPI_Init+0x5a>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 80094bc:	2300      	movs	r3, #0
 80094be:	60fb      	str	r3, [r7, #12]
 80094c0:	e002      	b.n	80094c8 <HAL_SPI_Init+0x60>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 80094c2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80094c6:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 80094c8:	687b      	ldr	r3, [r7, #4]
 80094ca:	68db      	ldr	r3, [r3, #12]
 80094cc:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 80094d0:	d007      	beq.n	80094e2 <HAL_SPI_Init+0x7a>
 80094d2:	687b      	ldr	r3, [r7, #4]
 80094d4:	68db      	ldr	r3, [r3, #12]
 80094d6:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 80094da:	d002      	beq.n	80094e2 <HAL_SPI_Init+0x7a>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80094dc:	687b      	ldr	r3, [r7, #4]
 80094de:	2200      	movs	r2, #0
 80094e0:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Align the CRC Length on the data size */
  if (hspi->Init.CRCLength == SPI_CRC_LENGTH_DATASIZE)
 80094e2:	687b      	ldr	r3, [r7, #4]
 80094e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80094e6:	2b00      	cmp	r3, #0
 80094e8:	d10b      	bne.n	8009502 <HAL_SPI_Init+0x9a>
  {
    /* CRC Length aligned on the data size : value set by default */
    if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80094ea:	687b      	ldr	r3, [r7, #4]
 80094ec:	68db      	ldr	r3, [r3, #12]
 80094ee:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 80094f2:	d903      	bls.n	80094fc <HAL_SPI_Init+0x94>
    {
      hspi->Init.CRCLength = SPI_CRC_LENGTH_16BIT;
 80094f4:	687b      	ldr	r3, [r7, #4]
 80094f6:	2202      	movs	r2, #2
 80094f8:	631a      	str	r2, [r3, #48]	; 0x30
 80094fa:	e002      	b.n	8009502 <HAL_SPI_Init+0x9a>
    }
    else
    {
      hspi->Init.CRCLength = SPI_CRC_LENGTH_8BIT;
 80094fc:	687b      	ldr	r3, [r7, #4]
 80094fe:	2201      	movs	r2, #1
 8009500:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction |
 8009502:	687b      	ldr	r3, [r7, #4]
 8009504:	685a      	ldr	r2, [r3, #4]
 8009506:	687b      	ldr	r3, [r7, #4]
 8009508:	689b      	ldr	r3, [r3, #8]
 800950a:	431a      	orrs	r2, r3
 800950c:	687b      	ldr	r3, [r7, #4]
 800950e:	691b      	ldr	r3, [r3, #16]
 8009510:	431a      	orrs	r2, r3
 8009512:	687b      	ldr	r3, [r7, #4]
 8009514:	695b      	ldr	r3, [r3, #20]
 8009516:	431a      	orrs	r2, r3
 8009518:	687b      	ldr	r3, [r7, #4]
 800951a:	699b      	ldr	r3, [r3, #24]
 800951c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8009520:	431a      	orrs	r2, r3
 8009522:	687b      	ldr	r3, [r7, #4]
 8009524:	69db      	ldr	r3, [r3, #28]
 8009526:	431a      	orrs	r2, r3
 8009528:	687b      	ldr	r3, [r7, #4]
 800952a:	6a1b      	ldr	r3, [r3, #32]
 800952c:	ea42 0103 	orr.w	r1, r2, r3
 8009530:	687b      	ldr	r3, [r7, #4]
 8009532:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8009534:	687b      	ldr	r3, [r7, #4]
 8009536:	681b      	ldr	r3, [r3, #0]
 8009538:	430a      	orrs	r2, r1
 800953a:	601a      	str	r2, [r3, #0]
    hspi->Instance->CR1 |= SPI_CR1_CRCL;
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | hspi->Init.TIMode |
 800953c:	687b      	ldr	r3, [r7, #4]
 800953e:	699b      	ldr	r3, [r3, #24]
 8009540:	0c1b      	lsrs	r3, r3, #16
 8009542:	f003 0204 	and.w	r2, r3, #4
 8009546:	687b      	ldr	r3, [r7, #4]
 8009548:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800954a:	431a      	orrs	r2, r3
 800954c:	687b      	ldr	r3, [r7, #4]
 800954e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009550:	431a      	orrs	r2, r3
 8009552:	687b      	ldr	r3, [r7, #4]
 8009554:	68db      	ldr	r3, [r3, #12]
 8009556:	ea42 0103 	orr.w	r1, r2, r3
 800955a:	687b      	ldr	r3, [r7, #4]
 800955c:	681b      	ldr	r3, [r3, #0]
 800955e:	68fa      	ldr	r2, [r7, #12]
 8009560:	430a      	orrs	r2, r1
 8009562:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8009564:	687b      	ldr	r3, [r7, #4]
 8009566:	681b      	ldr	r3, [r3, #0]
 8009568:	69da      	ldr	r2, [r3, #28]
 800956a:	687b      	ldr	r3, [r7, #4]
 800956c:	681b      	ldr	r3, [r3, #0]
 800956e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8009572:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8009574:	687b      	ldr	r3, [r7, #4]
 8009576:	2200      	movs	r2, #0
 8009578:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 800957a:	687b      	ldr	r3, [r7, #4]
 800957c:	2201      	movs	r2, #1
 800957e:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 8009582:	2300      	movs	r3, #0
}
 8009584:	4618      	mov	r0, r3
 8009586:	3710      	adds	r7, #16
 8009588:	46bd      	mov	sp, r7
 800958a:	bd80      	pop	{r7, pc}

0800958c <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800958c:	b580      	push	{r7, lr}
 800958e:	b088      	sub	sp, #32
 8009590:	af00      	add	r7, sp, #0
 8009592:	60f8      	str	r0, [r7, #12]
 8009594:	60b9      	str	r1, [r7, #8]
 8009596:	603b      	str	r3, [r7, #0]
 8009598:	4613      	mov	r3, r2
 800959a:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 800959c:	2300      	movs	r3, #0
 800959e:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 80095a0:	68fb      	ldr	r3, [r7, #12]
 80095a2:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 80095a6:	2b01      	cmp	r3, #1
 80095a8:	d101      	bne.n	80095ae <HAL_SPI_Transmit+0x22>
 80095aa:	2302      	movs	r3, #2
 80095ac:	e150      	b.n	8009850 <HAL_SPI_Transmit+0x2c4>
 80095ae:	68fb      	ldr	r3, [r7, #12]
 80095b0:	2201      	movs	r2, #1
 80095b2:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80095b6:	f7fc fa67 	bl	8005a88 <HAL_GetTick>
 80095ba:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 80095bc:	88fb      	ldrh	r3, [r7, #6]
 80095be:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 80095c0:	68fb      	ldr	r3, [r7, #12]
 80095c2:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 80095c6:	b2db      	uxtb	r3, r3
 80095c8:	2b01      	cmp	r3, #1
 80095ca:	d002      	beq.n	80095d2 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 80095cc:	2302      	movs	r3, #2
 80095ce:	77fb      	strb	r3, [r7, #31]
    goto error;
 80095d0:	e135      	b.n	800983e <HAL_SPI_Transmit+0x2b2>
  }

  if ((pData == NULL) || (Size == 0U))
 80095d2:	68bb      	ldr	r3, [r7, #8]
 80095d4:	2b00      	cmp	r3, #0
 80095d6:	d002      	beq.n	80095de <HAL_SPI_Transmit+0x52>
 80095d8:	88fb      	ldrh	r3, [r7, #6]
 80095da:	2b00      	cmp	r3, #0
 80095dc:	d102      	bne.n	80095e4 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 80095de:	2301      	movs	r3, #1
 80095e0:	77fb      	strb	r3, [r7, #31]
    goto error;
 80095e2:	e12c      	b.n	800983e <HAL_SPI_Transmit+0x2b2>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 80095e4:	68fb      	ldr	r3, [r7, #12]
 80095e6:	2203      	movs	r2, #3
 80095e8:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80095ec:	68fb      	ldr	r3, [r7, #12]
 80095ee:	2200      	movs	r2, #0
 80095f0:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 80095f2:	68fb      	ldr	r3, [r7, #12]
 80095f4:	68ba      	ldr	r2, [r7, #8]
 80095f6:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = Size;
 80095f8:	68fb      	ldr	r3, [r7, #12]
 80095fa:	88fa      	ldrh	r2, [r7, #6]
 80095fc:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = Size;
 80095fe:	68fb      	ldr	r3, [r7, #12]
 8009600:	88fa      	ldrh	r2, [r7, #6]
 8009602:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8009604:	68fb      	ldr	r3, [r7, #12]
 8009606:	2200      	movs	r2, #0
 8009608:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = 0U;
 800960a:	68fb      	ldr	r3, [r7, #12]
 800960c:	2200      	movs	r2, #0
 800960e:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->RxXferCount = 0U;
 8009612:	68fb      	ldr	r3, [r7, #12]
 8009614:	2200      	movs	r2, #0
 8009616:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->TxISR       = NULL;
 800961a:	68fb      	ldr	r3, [r7, #12]
 800961c:	2200      	movs	r2, #0
 800961e:	651a      	str	r2, [r3, #80]	; 0x50
  hspi->RxISR       = NULL;
 8009620:	68fb      	ldr	r3, [r7, #12]
 8009622:	2200      	movs	r2, #0
 8009624:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8009626:	68fb      	ldr	r3, [r7, #12]
 8009628:	689b      	ldr	r3, [r3, #8]
 800962a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800962e:	d107      	bne.n	8009640 <HAL_SPI_Transmit+0xb4>
  {
    SPI_1LINE_TX(hspi);
 8009630:	68fb      	ldr	r3, [r7, #12]
 8009632:	681b      	ldr	r3, [r3, #0]
 8009634:	681a      	ldr	r2, [r3, #0]
 8009636:	68fb      	ldr	r3, [r7, #12]
 8009638:	681b      	ldr	r3, [r3, #0]
 800963a:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800963e:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8009640:	68fb      	ldr	r3, [r7, #12]
 8009642:	681b      	ldr	r3, [r3, #0]
 8009644:	681b      	ldr	r3, [r3, #0]
 8009646:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800964a:	2b40      	cmp	r3, #64	; 0x40
 800964c:	d007      	beq.n	800965e <HAL_SPI_Transmit+0xd2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800964e:	68fb      	ldr	r3, [r7, #12]
 8009650:	681b      	ldr	r3, [r3, #0]
 8009652:	681a      	ldr	r2, [r3, #0]
 8009654:	68fb      	ldr	r3, [r7, #12]
 8009656:	681b      	ldr	r3, [r3, #0]
 8009658:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800965c:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800965e:	68fb      	ldr	r3, [r7, #12]
 8009660:	68db      	ldr	r3, [r3, #12]
 8009662:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8009666:	d94b      	bls.n	8009700 <HAL_SPI_Transmit+0x174>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8009668:	68fb      	ldr	r3, [r7, #12]
 800966a:	685b      	ldr	r3, [r3, #4]
 800966c:	2b00      	cmp	r3, #0
 800966e:	d002      	beq.n	8009676 <HAL_SPI_Transmit+0xea>
 8009670:	8afb      	ldrh	r3, [r7, #22]
 8009672:	2b01      	cmp	r3, #1
 8009674:	d13e      	bne.n	80096f4 <HAL_SPI_Transmit+0x168>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8009676:	68fb      	ldr	r3, [r7, #12]
 8009678:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800967a:	881a      	ldrh	r2, [r3, #0]
 800967c:	68fb      	ldr	r3, [r7, #12]
 800967e:	681b      	ldr	r3, [r3, #0]
 8009680:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8009682:	68fb      	ldr	r3, [r7, #12]
 8009684:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009686:	1c9a      	adds	r2, r3, #2
 8009688:	68fb      	ldr	r3, [r7, #12]
 800968a:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 800968c:	68fb      	ldr	r3, [r7, #12]
 800968e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8009690:	b29b      	uxth	r3, r3
 8009692:	3b01      	subs	r3, #1
 8009694:	b29a      	uxth	r2, r3
 8009696:	68fb      	ldr	r3, [r7, #12]
 8009698:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 800969a:	e02b      	b.n	80096f4 <HAL_SPI_Transmit+0x168>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800969c:	68fb      	ldr	r3, [r7, #12]
 800969e:	681b      	ldr	r3, [r3, #0]
 80096a0:	689b      	ldr	r3, [r3, #8]
 80096a2:	f003 0302 	and.w	r3, r3, #2
 80096a6:	2b02      	cmp	r3, #2
 80096a8:	d112      	bne.n	80096d0 <HAL_SPI_Transmit+0x144>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80096aa:	68fb      	ldr	r3, [r7, #12]
 80096ac:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80096ae:	881a      	ldrh	r2, [r3, #0]
 80096b0:	68fb      	ldr	r3, [r7, #12]
 80096b2:	681b      	ldr	r3, [r3, #0]
 80096b4:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80096b6:	68fb      	ldr	r3, [r7, #12]
 80096b8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80096ba:	1c9a      	adds	r2, r3, #2
 80096bc:	68fb      	ldr	r3, [r7, #12]
 80096be:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 80096c0:	68fb      	ldr	r3, [r7, #12]
 80096c2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80096c4:	b29b      	uxth	r3, r3
 80096c6:	3b01      	subs	r3, #1
 80096c8:	b29a      	uxth	r2, r3
 80096ca:	68fb      	ldr	r3, [r7, #12]
 80096cc:	87da      	strh	r2, [r3, #62]	; 0x3e
 80096ce:	e011      	b.n	80096f4 <HAL_SPI_Transmit+0x168>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80096d0:	f7fc f9da 	bl	8005a88 <HAL_GetTick>
 80096d4:	4602      	mov	r2, r0
 80096d6:	69bb      	ldr	r3, [r7, #24]
 80096d8:	1ad3      	subs	r3, r2, r3
 80096da:	683a      	ldr	r2, [r7, #0]
 80096dc:	429a      	cmp	r2, r3
 80096de:	d803      	bhi.n	80096e8 <HAL_SPI_Transmit+0x15c>
 80096e0:	683b      	ldr	r3, [r7, #0]
 80096e2:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80096e6:	d102      	bne.n	80096ee <HAL_SPI_Transmit+0x162>
 80096e8:	683b      	ldr	r3, [r7, #0]
 80096ea:	2b00      	cmp	r3, #0
 80096ec:	d102      	bne.n	80096f4 <HAL_SPI_Transmit+0x168>
        {
          errorcode = HAL_TIMEOUT;
 80096ee:	2303      	movs	r3, #3
 80096f0:	77fb      	strb	r3, [r7, #31]
          goto error;
 80096f2:	e0a4      	b.n	800983e <HAL_SPI_Transmit+0x2b2>
    while (hspi->TxXferCount > 0U)
 80096f4:	68fb      	ldr	r3, [r7, #12]
 80096f6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80096f8:	b29b      	uxth	r3, r3
 80096fa:	2b00      	cmp	r3, #0
 80096fc:	d1ce      	bne.n	800969c <HAL_SPI_Transmit+0x110>
 80096fe:	e07c      	b.n	80097fa <HAL_SPI_Transmit+0x26e>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8009700:	68fb      	ldr	r3, [r7, #12]
 8009702:	685b      	ldr	r3, [r3, #4]
 8009704:	2b00      	cmp	r3, #0
 8009706:	d002      	beq.n	800970e <HAL_SPI_Transmit+0x182>
 8009708:	8afb      	ldrh	r3, [r7, #22]
 800970a:	2b01      	cmp	r3, #1
 800970c:	d170      	bne.n	80097f0 <HAL_SPI_Transmit+0x264>
    {
      if (hspi->TxXferCount > 1U)
 800970e:	68fb      	ldr	r3, [r7, #12]
 8009710:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8009712:	b29b      	uxth	r3, r3
 8009714:	2b01      	cmp	r3, #1
 8009716:	d912      	bls.n	800973e <HAL_SPI_Transmit+0x1b2>
      {
        /* write on the data register in packing mode */
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8009718:	68fb      	ldr	r3, [r7, #12]
 800971a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800971c:	881a      	ldrh	r2, [r3, #0]
 800971e:	68fb      	ldr	r3, [r7, #12]
 8009720:	681b      	ldr	r3, [r3, #0]
 8009722:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8009724:	68fb      	ldr	r3, [r7, #12]
 8009726:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009728:	1c9a      	adds	r2, r3, #2
 800972a:	68fb      	ldr	r3, [r7, #12]
 800972c:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount -= 2U;
 800972e:	68fb      	ldr	r3, [r7, #12]
 8009730:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8009732:	b29b      	uxth	r3, r3
 8009734:	3b02      	subs	r3, #2
 8009736:	b29a      	uxth	r2, r3
 8009738:	68fb      	ldr	r3, [r7, #12]
 800973a:	87da      	strh	r2, [r3, #62]	; 0x3e
 800973c:	e058      	b.n	80097f0 <HAL_SPI_Transmit+0x264>
      }
      else
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800973e:	68fb      	ldr	r3, [r7, #12]
 8009740:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8009742:	68fb      	ldr	r3, [r7, #12]
 8009744:	681b      	ldr	r3, [r3, #0]
 8009746:	330c      	adds	r3, #12
 8009748:	7812      	ldrb	r2, [r2, #0]
 800974a:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr ++;
 800974c:	68fb      	ldr	r3, [r7, #12]
 800974e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009750:	1c5a      	adds	r2, r3, #1
 8009752:	68fb      	ldr	r3, [r7, #12]
 8009754:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8009756:	68fb      	ldr	r3, [r7, #12]
 8009758:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800975a:	b29b      	uxth	r3, r3
 800975c:	3b01      	subs	r3, #1
 800975e:	b29a      	uxth	r2, r3
 8009760:	68fb      	ldr	r3, [r7, #12]
 8009762:	87da      	strh	r2, [r3, #62]	; 0x3e
      }
    }
    while (hspi->TxXferCount > 0U)
 8009764:	e044      	b.n	80097f0 <HAL_SPI_Transmit+0x264>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8009766:	68fb      	ldr	r3, [r7, #12]
 8009768:	681b      	ldr	r3, [r3, #0]
 800976a:	689b      	ldr	r3, [r3, #8]
 800976c:	f003 0302 	and.w	r3, r3, #2
 8009770:	2b02      	cmp	r3, #2
 8009772:	d12b      	bne.n	80097cc <HAL_SPI_Transmit+0x240>
      {
        if (hspi->TxXferCount > 1U)
 8009774:	68fb      	ldr	r3, [r7, #12]
 8009776:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8009778:	b29b      	uxth	r3, r3
 800977a:	2b01      	cmp	r3, #1
 800977c:	d912      	bls.n	80097a4 <HAL_SPI_Transmit+0x218>
        {
          /* write on the data register in packing mode */
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800977e:	68fb      	ldr	r3, [r7, #12]
 8009780:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009782:	881a      	ldrh	r2, [r3, #0]
 8009784:	68fb      	ldr	r3, [r7, #12]
 8009786:	681b      	ldr	r3, [r3, #0]
 8009788:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 800978a:	68fb      	ldr	r3, [r7, #12]
 800978c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800978e:	1c9a      	adds	r2, r3, #2
 8009790:	68fb      	ldr	r3, [r7, #12]
 8009792:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount -= 2U;
 8009794:	68fb      	ldr	r3, [r7, #12]
 8009796:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8009798:	b29b      	uxth	r3, r3
 800979a:	3b02      	subs	r3, #2
 800979c:	b29a      	uxth	r2, r3
 800979e:	68fb      	ldr	r3, [r7, #12]
 80097a0:	87da      	strh	r2, [r3, #62]	; 0x3e
 80097a2:	e025      	b.n	80097f0 <HAL_SPI_Transmit+0x264>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80097a4:	68fb      	ldr	r3, [r7, #12]
 80097a6:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80097a8:	68fb      	ldr	r3, [r7, #12]
 80097aa:	681b      	ldr	r3, [r3, #0]
 80097ac:	330c      	adds	r3, #12
 80097ae:	7812      	ldrb	r2, [r2, #0]
 80097b0:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 80097b2:	68fb      	ldr	r3, [r7, #12]
 80097b4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80097b6:	1c5a      	adds	r2, r3, #1
 80097b8:	68fb      	ldr	r3, [r7, #12]
 80097ba:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount--;
 80097bc:	68fb      	ldr	r3, [r7, #12]
 80097be:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80097c0:	b29b      	uxth	r3, r3
 80097c2:	3b01      	subs	r3, #1
 80097c4:	b29a      	uxth	r2, r3
 80097c6:	68fb      	ldr	r3, [r7, #12]
 80097c8:	87da      	strh	r2, [r3, #62]	; 0x3e
 80097ca:	e011      	b.n	80097f0 <HAL_SPI_Transmit+0x264>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80097cc:	f7fc f95c 	bl	8005a88 <HAL_GetTick>
 80097d0:	4602      	mov	r2, r0
 80097d2:	69bb      	ldr	r3, [r7, #24]
 80097d4:	1ad3      	subs	r3, r2, r3
 80097d6:	683a      	ldr	r2, [r7, #0]
 80097d8:	429a      	cmp	r2, r3
 80097da:	d803      	bhi.n	80097e4 <HAL_SPI_Transmit+0x258>
 80097dc:	683b      	ldr	r3, [r7, #0]
 80097de:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80097e2:	d102      	bne.n	80097ea <HAL_SPI_Transmit+0x25e>
 80097e4:	683b      	ldr	r3, [r7, #0]
 80097e6:	2b00      	cmp	r3, #0
 80097e8:	d102      	bne.n	80097f0 <HAL_SPI_Transmit+0x264>
        {
          errorcode = HAL_TIMEOUT;
 80097ea:	2303      	movs	r3, #3
 80097ec:	77fb      	strb	r3, [r7, #31]
          goto error;
 80097ee:	e026      	b.n	800983e <HAL_SPI_Transmit+0x2b2>
    while (hspi->TxXferCount > 0U)
 80097f0:	68fb      	ldr	r3, [r7, #12]
 80097f2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80097f4:	b29b      	uxth	r3, r3
 80097f6:	2b00      	cmp	r3, #0
 80097f8:	d1b5      	bne.n	8009766 <HAL_SPI_Transmit+0x1da>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80097fa:	69ba      	ldr	r2, [r7, #24]
 80097fc:	6839      	ldr	r1, [r7, #0]
 80097fe:	68f8      	ldr	r0, [r7, #12]
 8009800:	f000 f901 	bl	8009a06 <SPI_EndRxTxTransaction>
 8009804:	4603      	mov	r3, r0
 8009806:	2b00      	cmp	r3, #0
 8009808:	d002      	beq.n	8009810 <HAL_SPI_Transmit+0x284>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800980a:	68fb      	ldr	r3, [r7, #12]
 800980c:	2220      	movs	r2, #32
 800980e:	661a      	str	r2, [r3, #96]	; 0x60
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8009810:	68fb      	ldr	r3, [r7, #12]
 8009812:	689b      	ldr	r3, [r3, #8]
 8009814:	2b00      	cmp	r3, #0
 8009816:	d10a      	bne.n	800982e <HAL_SPI_Transmit+0x2a2>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8009818:	2300      	movs	r3, #0
 800981a:	613b      	str	r3, [r7, #16]
 800981c:	68fb      	ldr	r3, [r7, #12]
 800981e:	681b      	ldr	r3, [r3, #0]
 8009820:	68db      	ldr	r3, [r3, #12]
 8009822:	613b      	str	r3, [r7, #16]
 8009824:	68fb      	ldr	r3, [r7, #12]
 8009826:	681b      	ldr	r3, [r3, #0]
 8009828:	689b      	ldr	r3, [r3, #8]
 800982a:	613b      	str	r3, [r7, #16]
 800982c:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800982e:	68fb      	ldr	r3, [r7, #12]
 8009830:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8009832:	2b00      	cmp	r3, #0
 8009834:	d002      	beq.n	800983c <HAL_SPI_Transmit+0x2b0>
  {
    errorcode = HAL_ERROR;
 8009836:	2301      	movs	r3, #1
 8009838:	77fb      	strb	r3, [r7, #31]
 800983a:	e000      	b.n	800983e <HAL_SPI_Transmit+0x2b2>
  }

error:
 800983c:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 800983e:	68fb      	ldr	r3, [r7, #12]
 8009840:	2201      	movs	r2, #1
 8009842:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8009846:	68fb      	ldr	r3, [r7, #12]
 8009848:	2200      	movs	r2, #0
 800984a:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 800984e:	7ffb      	ldrb	r3, [r7, #31]
}
 8009850:	4618      	mov	r0, r3
 8009852:	3720      	adds	r7, #32
 8009854:	46bd      	mov	sp, r7
 8009856:	bd80      	pop	{r7, pc}

08009858 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8009858:	b580      	push	{r7, lr}
 800985a:	b084      	sub	sp, #16
 800985c:	af00      	add	r7, sp, #0
 800985e:	60f8      	str	r0, [r7, #12]
 8009860:	60b9      	str	r1, [r7, #8]
 8009862:	603b      	str	r3, [r7, #0]
 8009864:	4613      	mov	r3, r2
 8009866:	71fb      	strb	r3, [r7, #7]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8009868:	e04c      	b.n	8009904 <SPI_WaitFlagStateUntilTimeout+0xac>
  {
    if (Timeout != HAL_MAX_DELAY)
 800986a:	683b      	ldr	r3, [r7, #0]
 800986c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8009870:	d048      	beq.n	8009904 <SPI_WaitFlagStateUntilTimeout+0xac>
    {
      if (((HAL_GetTick() - Tickstart) >= Timeout) || (Timeout == 0U))
 8009872:	f7fc f909 	bl	8005a88 <HAL_GetTick>
 8009876:	4602      	mov	r2, r0
 8009878:	69bb      	ldr	r3, [r7, #24]
 800987a:	1ad3      	subs	r3, r2, r3
 800987c:	683a      	ldr	r2, [r7, #0]
 800987e:	429a      	cmp	r2, r3
 8009880:	d902      	bls.n	8009888 <SPI_WaitFlagStateUntilTimeout+0x30>
 8009882:	683b      	ldr	r3, [r7, #0]
 8009884:	2b00      	cmp	r3, #0
 8009886:	d13d      	bne.n	8009904 <SPI_WaitFlagStateUntilTimeout+0xac>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
        on both master and slave sides in order to resynchronize the master
        and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8009888:	68fb      	ldr	r3, [r7, #12]
 800988a:	681b      	ldr	r3, [r3, #0]
 800988c:	685a      	ldr	r2, [r3, #4]
 800988e:	68fb      	ldr	r3, [r7, #12]
 8009890:	681b      	ldr	r3, [r3, #0]
 8009892:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8009896:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8009898:	68fb      	ldr	r3, [r7, #12]
 800989a:	685b      	ldr	r3, [r3, #4]
 800989c:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80098a0:	d111      	bne.n	80098c6 <SPI_WaitFlagStateUntilTimeout+0x6e>
 80098a2:	68fb      	ldr	r3, [r7, #12]
 80098a4:	689b      	ldr	r3, [r3, #8]
 80098a6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80098aa:	d004      	beq.n	80098b6 <SPI_WaitFlagStateUntilTimeout+0x5e>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80098ac:	68fb      	ldr	r3, [r7, #12]
 80098ae:	689b      	ldr	r3, [r3, #8]
 80098b0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80098b4:	d107      	bne.n	80098c6 <SPI_WaitFlagStateUntilTimeout+0x6e>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 80098b6:	68fb      	ldr	r3, [r7, #12]
 80098b8:	681b      	ldr	r3, [r3, #0]
 80098ba:	681a      	ldr	r2, [r3, #0]
 80098bc:	68fb      	ldr	r3, [r7, #12]
 80098be:	681b      	ldr	r3, [r3, #0]
 80098c0:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80098c4:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80098c6:	68fb      	ldr	r3, [r7, #12]
 80098c8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80098ca:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80098ce:	d10f      	bne.n	80098f0 <SPI_WaitFlagStateUntilTimeout+0x98>
        {
          SPI_RESET_CRC(hspi);
 80098d0:	68fb      	ldr	r3, [r7, #12]
 80098d2:	681b      	ldr	r3, [r3, #0]
 80098d4:	681a      	ldr	r2, [r3, #0]
 80098d6:	68fb      	ldr	r3, [r7, #12]
 80098d8:	681b      	ldr	r3, [r3, #0]
 80098da:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80098de:	601a      	str	r2, [r3, #0]
 80098e0:	68fb      	ldr	r3, [r7, #12]
 80098e2:	681b      	ldr	r3, [r3, #0]
 80098e4:	681a      	ldr	r2, [r3, #0]
 80098e6:	68fb      	ldr	r3, [r7, #12]
 80098e8:	681b      	ldr	r3, [r3, #0]
 80098ea:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80098ee:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 80098f0:	68fb      	ldr	r3, [r7, #12]
 80098f2:	2201      	movs	r2, #1
 80098f4:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80098f8:	68fb      	ldr	r3, [r7, #12]
 80098fa:	2200      	movs	r2, #0
 80098fc:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 8009900:	2303      	movs	r3, #3
 8009902:	e00f      	b.n	8009924 <SPI_WaitFlagStateUntilTimeout+0xcc>
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8009904:	68fb      	ldr	r3, [r7, #12]
 8009906:	681b      	ldr	r3, [r3, #0]
 8009908:	689a      	ldr	r2, [r3, #8]
 800990a:	68bb      	ldr	r3, [r7, #8]
 800990c:	4013      	ands	r3, r2
 800990e:	68ba      	ldr	r2, [r7, #8]
 8009910:	429a      	cmp	r2, r3
 8009912:	bf0c      	ite	eq
 8009914:	2301      	moveq	r3, #1
 8009916:	2300      	movne	r3, #0
 8009918:	b2db      	uxtb	r3, r3
 800991a:	461a      	mov	r2, r3
 800991c:	79fb      	ldrb	r3, [r7, #7]
 800991e:	429a      	cmp	r2, r3
 8009920:	d1a3      	bne.n	800986a <SPI_WaitFlagStateUntilTimeout+0x12>
      }
    }
  }

  return HAL_OK;
 8009922:	2300      	movs	r3, #0
}
 8009924:	4618      	mov	r0, r3
 8009926:	3710      	adds	r7, #16
 8009928:	46bd      	mov	sp, r7
 800992a:	bd80      	pop	{r7, pc}

0800992c <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 800992c:	b580      	push	{r7, lr}
 800992e:	b084      	sub	sp, #16
 8009930:	af00      	add	r7, sp, #0
 8009932:	60f8      	str	r0, [r7, #12]
 8009934:	60b9      	str	r1, [r7, #8]
 8009936:	607a      	str	r2, [r7, #4]
 8009938:	603b      	str	r3, [r7, #0]
  while ((hspi->Instance->SR & Fifo) != State)
 800993a:	e057      	b.n	80099ec <SPI_WaitFifoStateUntilTimeout+0xc0>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 800993c:	68bb      	ldr	r3, [r7, #8]
 800993e:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 8009942:	d106      	bne.n	8009952 <SPI_WaitFifoStateUntilTimeout+0x26>
 8009944:	687b      	ldr	r3, [r7, #4]
 8009946:	2b00      	cmp	r3, #0
 8009948:	d103      	bne.n	8009952 <SPI_WaitFifoStateUntilTimeout+0x26>
    {
      /* Read 8bit CRC to flush Data Register */
      READ_REG(*((__IO uint8_t *)&hspi->Instance->DR));
 800994a:	68fb      	ldr	r3, [r7, #12]
 800994c:	681b      	ldr	r3, [r3, #0]
 800994e:	330c      	adds	r3, #12
 8009950:	781b      	ldrb	r3, [r3, #0]
    }

    if (Timeout != HAL_MAX_DELAY)
 8009952:	683b      	ldr	r3, [r7, #0]
 8009954:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8009958:	d048      	beq.n	80099ec <SPI_WaitFifoStateUntilTimeout+0xc0>
    {
      if (((HAL_GetTick() - Tickstart) >= Timeout) || (Timeout == 0U))
 800995a:	f7fc f895 	bl	8005a88 <HAL_GetTick>
 800995e:	4602      	mov	r2, r0
 8009960:	69bb      	ldr	r3, [r7, #24]
 8009962:	1ad3      	subs	r3, r2, r3
 8009964:	683a      	ldr	r2, [r7, #0]
 8009966:	429a      	cmp	r2, r3
 8009968:	d902      	bls.n	8009970 <SPI_WaitFifoStateUntilTimeout+0x44>
 800996a:	683b      	ldr	r3, [r7, #0]
 800996c:	2b00      	cmp	r3, #0
 800996e:	d13d      	bne.n	80099ec <SPI_WaitFifoStateUntilTimeout+0xc0>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8009970:	68fb      	ldr	r3, [r7, #12]
 8009972:	681b      	ldr	r3, [r3, #0]
 8009974:	685a      	ldr	r2, [r3, #4]
 8009976:	68fb      	ldr	r3, [r7, #12]
 8009978:	681b      	ldr	r3, [r3, #0]
 800997a:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 800997e:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8009980:	68fb      	ldr	r3, [r7, #12]
 8009982:	685b      	ldr	r3, [r3, #4]
 8009984:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8009988:	d111      	bne.n	80099ae <SPI_WaitFifoStateUntilTimeout+0x82>
 800998a:	68fb      	ldr	r3, [r7, #12]
 800998c:	689b      	ldr	r3, [r3, #8]
 800998e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8009992:	d004      	beq.n	800999e <SPI_WaitFifoStateUntilTimeout+0x72>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8009994:	68fb      	ldr	r3, [r7, #12]
 8009996:	689b      	ldr	r3, [r3, #8]
 8009998:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800999c:	d107      	bne.n	80099ae <SPI_WaitFifoStateUntilTimeout+0x82>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 800999e:	68fb      	ldr	r3, [r7, #12]
 80099a0:	681b      	ldr	r3, [r3, #0]
 80099a2:	681a      	ldr	r2, [r3, #0]
 80099a4:	68fb      	ldr	r3, [r7, #12]
 80099a6:	681b      	ldr	r3, [r3, #0]
 80099a8:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80099ac:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80099ae:	68fb      	ldr	r3, [r7, #12]
 80099b0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80099b2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80099b6:	d10f      	bne.n	80099d8 <SPI_WaitFifoStateUntilTimeout+0xac>
        {
          SPI_RESET_CRC(hspi);
 80099b8:	68fb      	ldr	r3, [r7, #12]
 80099ba:	681b      	ldr	r3, [r3, #0]
 80099bc:	681a      	ldr	r2, [r3, #0]
 80099be:	68fb      	ldr	r3, [r7, #12]
 80099c0:	681b      	ldr	r3, [r3, #0]
 80099c2:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80099c6:	601a      	str	r2, [r3, #0]
 80099c8:	68fb      	ldr	r3, [r7, #12]
 80099ca:	681b      	ldr	r3, [r3, #0]
 80099cc:	681a      	ldr	r2, [r3, #0]
 80099ce:	68fb      	ldr	r3, [r7, #12]
 80099d0:	681b      	ldr	r3, [r3, #0]
 80099d2:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80099d6:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 80099d8:	68fb      	ldr	r3, [r7, #12]
 80099da:	2201      	movs	r2, #1
 80099dc:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80099e0:	68fb      	ldr	r3, [r7, #12]
 80099e2:	2200      	movs	r2, #0
 80099e4:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 80099e8:	2303      	movs	r3, #3
 80099ea:	e008      	b.n	80099fe <SPI_WaitFifoStateUntilTimeout+0xd2>
  while ((hspi->Instance->SR & Fifo) != State)
 80099ec:	68fb      	ldr	r3, [r7, #12]
 80099ee:	681b      	ldr	r3, [r3, #0]
 80099f0:	689a      	ldr	r2, [r3, #8]
 80099f2:	68bb      	ldr	r3, [r7, #8]
 80099f4:	4013      	ands	r3, r2
 80099f6:	687a      	ldr	r2, [r7, #4]
 80099f8:	429a      	cmp	r2, r3
 80099fa:	d19f      	bne.n	800993c <SPI_WaitFifoStateUntilTimeout+0x10>
      }
    }
  }

  return HAL_OK;
 80099fc:	2300      	movs	r3, #0
}
 80099fe:	4618      	mov	r0, r3
 8009a00:	3710      	adds	r7, #16
 8009a02:	46bd      	mov	sp, r7
 8009a04:	bd80      	pop	{r7, pc}

08009a06 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8009a06:	b580      	push	{r7, lr}
 8009a08:	b086      	sub	sp, #24
 8009a0a:	af02      	add	r7, sp, #8
 8009a0c:	60f8      	str	r0, [r7, #12]
 8009a0e:	60b9      	str	r1, [r7, #8]
 8009a10:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8009a12:	687b      	ldr	r3, [r7, #4]
 8009a14:	9300      	str	r3, [sp, #0]
 8009a16:	68bb      	ldr	r3, [r7, #8]
 8009a18:	2200      	movs	r2, #0
 8009a1a:	f44f 51c0 	mov.w	r1, #6144	; 0x1800
 8009a1e:	68f8      	ldr	r0, [r7, #12]
 8009a20:	f7ff ff84 	bl	800992c <SPI_WaitFifoStateUntilTimeout>
 8009a24:	4603      	mov	r3, r0
 8009a26:	2b00      	cmp	r3, #0
 8009a28:	d007      	beq.n	8009a3a <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8009a2a:	68fb      	ldr	r3, [r7, #12]
 8009a2c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8009a2e:	f043 0220 	orr.w	r2, r3, #32
 8009a32:	68fb      	ldr	r3, [r7, #12]
 8009a34:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8009a36:	2303      	movs	r3, #3
 8009a38:	e027      	b.n	8009a8a <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8009a3a:	687b      	ldr	r3, [r7, #4]
 8009a3c:	9300      	str	r3, [sp, #0]
 8009a3e:	68bb      	ldr	r3, [r7, #8]
 8009a40:	2200      	movs	r2, #0
 8009a42:	2180      	movs	r1, #128	; 0x80
 8009a44:	68f8      	ldr	r0, [r7, #12]
 8009a46:	f7ff ff07 	bl	8009858 <SPI_WaitFlagStateUntilTimeout>
 8009a4a:	4603      	mov	r3, r0
 8009a4c:	2b00      	cmp	r3, #0
 8009a4e:	d007      	beq.n	8009a60 <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8009a50:	68fb      	ldr	r3, [r7, #12]
 8009a52:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8009a54:	f043 0220 	orr.w	r2, r3, #32
 8009a58:	68fb      	ldr	r3, [r7, #12]
 8009a5a:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8009a5c:	2303      	movs	r3, #3
 8009a5e:	e014      	b.n	8009a8a <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8009a60:	687b      	ldr	r3, [r7, #4]
 8009a62:	9300      	str	r3, [sp, #0]
 8009a64:	68bb      	ldr	r3, [r7, #8]
 8009a66:	2200      	movs	r2, #0
 8009a68:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 8009a6c:	68f8      	ldr	r0, [r7, #12]
 8009a6e:	f7ff ff5d 	bl	800992c <SPI_WaitFifoStateUntilTimeout>
 8009a72:	4603      	mov	r3, r0
 8009a74:	2b00      	cmp	r3, #0
 8009a76:	d007      	beq.n	8009a88 <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8009a78:	68fb      	ldr	r3, [r7, #12]
 8009a7a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8009a7c:	f043 0220 	orr.w	r2, r3, #32
 8009a80:	68fb      	ldr	r3, [r7, #12]
 8009a82:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8009a84:	2303      	movs	r3, #3
 8009a86:	e000      	b.n	8009a8a <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 8009a88:	2300      	movs	r3, #0
}
 8009a8a:	4618      	mov	r0, r3
 8009a8c:	3710      	adds	r7, #16
 8009a8e:	46bd      	mov	sp, r7
 8009a90:	bd80      	pop	{r7, pc}

08009a92 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8009a92:	b580      	push	{r7, lr}
 8009a94:	b082      	sub	sp, #8
 8009a96:	af00      	add	r7, sp, #0
 8009a98:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8009a9a:	687b      	ldr	r3, [r7, #4]
 8009a9c:	2b00      	cmp	r3, #0
 8009a9e:	d101      	bne.n	8009aa4 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8009aa0:	2301      	movs	r3, #1
 8009aa2:	e049      	b.n	8009b38 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8009aa4:	687b      	ldr	r3, [r7, #4]
 8009aa6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8009aaa:	b2db      	uxtb	r3, r3
 8009aac:	2b00      	cmp	r3, #0
 8009aae:	d106      	bne.n	8009abe <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8009ab0:	687b      	ldr	r3, [r7, #4]
 8009ab2:	2200      	movs	r2, #0
 8009ab4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8009ab8:	6878      	ldr	r0, [r7, #4]
 8009aba:	f7fb fe93 	bl	80057e4 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8009abe:	687b      	ldr	r3, [r7, #4]
 8009ac0:	2202      	movs	r2, #2
 8009ac2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8009ac6:	687b      	ldr	r3, [r7, #4]
 8009ac8:	681a      	ldr	r2, [r3, #0]
 8009aca:	687b      	ldr	r3, [r7, #4]
 8009acc:	3304      	adds	r3, #4
 8009ace:	4619      	mov	r1, r3
 8009ad0:	4610      	mov	r0, r2
 8009ad2:	f000 fc51 	bl	800a378 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8009ad6:	687b      	ldr	r3, [r7, #4]
 8009ad8:	2201      	movs	r2, #1
 8009ada:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8009ade:	687b      	ldr	r3, [r7, #4]
 8009ae0:	2201      	movs	r2, #1
 8009ae2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8009ae6:	687b      	ldr	r3, [r7, #4]
 8009ae8:	2201      	movs	r2, #1
 8009aea:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8009aee:	687b      	ldr	r3, [r7, #4]
 8009af0:	2201      	movs	r2, #1
 8009af2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8009af6:	687b      	ldr	r3, [r7, #4]
 8009af8:	2201      	movs	r2, #1
 8009afa:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8009afe:	687b      	ldr	r3, [r7, #4]
 8009b00:	2201      	movs	r2, #1
 8009b02:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8009b06:	687b      	ldr	r3, [r7, #4]
 8009b08:	2201      	movs	r2, #1
 8009b0a:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8009b0e:	687b      	ldr	r3, [r7, #4]
 8009b10:	2201      	movs	r2, #1
 8009b12:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8009b16:	687b      	ldr	r3, [r7, #4]
 8009b18:	2201      	movs	r2, #1
 8009b1a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8009b1e:	687b      	ldr	r3, [r7, #4]
 8009b20:	2201      	movs	r2, #1
 8009b22:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8009b26:	687b      	ldr	r3, [r7, #4]
 8009b28:	2201      	movs	r2, #1
 8009b2a:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8009b2e:	687b      	ldr	r3, [r7, #4]
 8009b30:	2201      	movs	r2, #1
 8009b32:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8009b36:	2300      	movs	r3, #0
}
 8009b38:	4618      	mov	r0, r3
 8009b3a:	3708      	adds	r7, #8
 8009b3c:	46bd      	mov	sp, r7
 8009b3e:	bd80      	pop	{r7, pc}

08009b40 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8009b40:	b480      	push	{r7}
 8009b42:	b085      	sub	sp, #20
 8009b44:	af00      	add	r7, sp, #0
 8009b46:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8009b48:	687b      	ldr	r3, [r7, #4]
 8009b4a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8009b4e:	b2db      	uxtb	r3, r3
 8009b50:	2b01      	cmp	r3, #1
 8009b52:	d001      	beq.n	8009b58 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8009b54:	2301      	movs	r3, #1
 8009b56:	e019      	b.n	8009b8c <HAL_TIM_Base_Start+0x4c>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8009b58:	687b      	ldr	r3, [r7, #4]
 8009b5a:	2202      	movs	r2, #2
 8009b5c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8009b60:	687b      	ldr	r3, [r7, #4]
 8009b62:	681b      	ldr	r3, [r3, #0]
 8009b64:	689a      	ldr	r2, [r3, #8]
 8009b66:	4b0c      	ldr	r3, [pc, #48]	; (8009b98 <HAL_TIM_Base_Start+0x58>)
 8009b68:	4013      	ands	r3, r2
 8009b6a:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8009b6c:	68fb      	ldr	r3, [r7, #12]
 8009b6e:	2b06      	cmp	r3, #6
 8009b70:	d00b      	beq.n	8009b8a <HAL_TIM_Base_Start+0x4a>
 8009b72:	68fb      	ldr	r3, [r7, #12]
 8009b74:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8009b78:	d007      	beq.n	8009b8a <HAL_TIM_Base_Start+0x4a>
  {
    __HAL_TIM_ENABLE(htim);
 8009b7a:	687b      	ldr	r3, [r7, #4]
 8009b7c:	681b      	ldr	r3, [r3, #0]
 8009b7e:	681a      	ldr	r2, [r3, #0]
 8009b80:	687b      	ldr	r3, [r7, #4]
 8009b82:	681b      	ldr	r3, [r3, #0]
 8009b84:	f042 0201 	orr.w	r2, r2, #1
 8009b88:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8009b8a:	2300      	movs	r3, #0
}
 8009b8c:	4618      	mov	r0, r3
 8009b8e:	3714      	adds	r7, #20
 8009b90:	46bd      	mov	sp, r7
 8009b92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b96:	4770      	bx	lr
 8009b98:	00010007 	.word	0x00010007

08009b9c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8009b9c:	b480      	push	{r7}
 8009b9e:	b085      	sub	sp, #20
 8009ba0:	af00      	add	r7, sp, #0
 8009ba2:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8009ba4:	687b      	ldr	r3, [r7, #4]
 8009ba6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8009baa:	b2db      	uxtb	r3, r3
 8009bac:	2b01      	cmp	r3, #1
 8009bae:	d001      	beq.n	8009bb4 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8009bb0:	2301      	movs	r3, #1
 8009bb2:	e021      	b.n	8009bf8 <HAL_TIM_Base_Start_IT+0x5c>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8009bb4:	687b      	ldr	r3, [r7, #4]
 8009bb6:	2202      	movs	r2, #2
 8009bb8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8009bbc:	687b      	ldr	r3, [r7, #4]
 8009bbe:	681b      	ldr	r3, [r3, #0]
 8009bc0:	68da      	ldr	r2, [r3, #12]
 8009bc2:	687b      	ldr	r3, [r7, #4]
 8009bc4:	681b      	ldr	r3, [r3, #0]
 8009bc6:	f042 0201 	orr.w	r2, r2, #1
 8009bca:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8009bcc:	687b      	ldr	r3, [r7, #4]
 8009bce:	681b      	ldr	r3, [r3, #0]
 8009bd0:	689a      	ldr	r2, [r3, #8]
 8009bd2:	4b0c      	ldr	r3, [pc, #48]	; (8009c04 <HAL_TIM_Base_Start_IT+0x68>)
 8009bd4:	4013      	ands	r3, r2
 8009bd6:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8009bd8:	68fb      	ldr	r3, [r7, #12]
 8009bda:	2b06      	cmp	r3, #6
 8009bdc:	d00b      	beq.n	8009bf6 <HAL_TIM_Base_Start_IT+0x5a>
 8009bde:	68fb      	ldr	r3, [r7, #12]
 8009be0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8009be4:	d007      	beq.n	8009bf6 <HAL_TIM_Base_Start_IT+0x5a>
  {
    __HAL_TIM_ENABLE(htim);
 8009be6:	687b      	ldr	r3, [r7, #4]
 8009be8:	681b      	ldr	r3, [r3, #0]
 8009bea:	681a      	ldr	r2, [r3, #0]
 8009bec:	687b      	ldr	r3, [r7, #4]
 8009bee:	681b      	ldr	r3, [r3, #0]
 8009bf0:	f042 0201 	orr.w	r2, r2, #1
 8009bf4:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8009bf6:	2300      	movs	r3, #0
}
 8009bf8:	4618      	mov	r0, r3
 8009bfa:	3714      	adds	r7, #20
 8009bfc:	46bd      	mov	sp, r7
 8009bfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c02:	4770      	bx	lr
 8009c04:	00010007 	.word	0x00010007

08009c08 <HAL_TIM_Base_Stop_IT>:
  * @brief  Stops the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop_IT(TIM_HandleTypeDef *htim)
{
 8009c08:	b480      	push	{r7}
 8009c0a:	b083      	sub	sp, #12
 8009c0c:	af00      	add	r7, sp, #0
 8009c0e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  
  /* Disable the TIM Update interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_UPDATE);
 8009c10:	687b      	ldr	r3, [r7, #4]
 8009c12:	681b      	ldr	r3, [r3, #0]
 8009c14:	68da      	ldr	r2, [r3, #12]
 8009c16:	687b      	ldr	r3, [r7, #4]
 8009c18:	681b      	ldr	r3, [r3, #0]
 8009c1a:	f022 0201 	bic.w	r2, r2, #1
 8009c1e:	60da      	str	r2, [r3, #12]

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8009c20:	687b      	ldr	r3, [r7, #4]
 8009c22:	681b      	ldr	r3, [r3, #0]
 8009c24:	6a1a      	ldr	r2, [r3, #32]
 8009c26:	f241 1311 	movw	r3, #4369	; 0x1111
 8009c2a:	4013      	ands	r3, r2
 8009c2c:	2b00      	cmp	r3, #0
 8009c2e:	d10f      	bne.n	8009c50 <HAL_TIM_Base_Stop_IT+0x48>
 8009c30:	687b      	ldr	r3, [r7, #4]
 8009c32:	681b      	ldr	r3, [r3, #0]
 8009c34:	6a1a      	ldr	r2, [r3, #32]
 8009c36:	f244 4344 	movw	r3, #17476	; 0x4444
 8009c3a:	4013      	ands	r3, r2
 8009c3c:	2b00      	cmp	r3, #0
 8009c3e:	d107      	bne.n	8009c50 <HAL_TIM_Base_Stop_IT+0x48>
 8009c40:	687b      	ldr	r3, [r7, #4]
 8009c42:	681b      	ldr	r3, [r3, #0]
 8009c44:	681a      	ldr	r2, [r3, #0]
 8009c46:	687b      	ldr	r3, [r7, #4]
 8009c48:	681b      	ldr	r3, [r3, #0]
 8009c4a:	f022 0201 	bic.w	r2, r2, #1
 8009c4e:	601a      	str	r2, [r3, #0]

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 8009c50:	687b      	ldr	r3, [r7, #4]
 8009c52:	2201      	movs	r2, #1
 8009c54:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Return function status */
  return HAL_OK;
 8009c58:	2300      	movs	r3, #0
}
 8009c5a:	4618      	mov	r0, r3
 8009c5c:	370c      	adds	r7, #12
 8009c5e:	46bd      	mov	sp, r7
 8009c60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c64:	4770      	bx	lr

08009c66 <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim,  TIM_Encoder_InitTypeDef *sConfig)
{
 8009c66:	b580      	push	{r7, lr}
 8009c68:	b086      	sub	sp, #24
 8009c6a:	af00      	add	r7, sp, #0
 8009c6c:	6078      	str	r0, [r7, #4]
 8009c6e:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 8009c70:	687b      	ldr	r3, [r7, #4]
 8009c72:	2b00      	cmp	r3, #0
 8009c74:	d101      	bne.n	8009c7a <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 8009c76:	2301      	movs	r3, #1
 8009c78:	e097      	b.n	8009daa <HAL_TIM_Encoder_Init+0x144>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC1Prescaler));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));

  if (htim->State == HAL_TIM_STATE_RESET)
 8009c7a:	687b      	ldr	r3, [r7, #4]
 8009c7c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8009c80:	b2db      	uxtb	r3, r3
 8009c82:	2b00      	cmp	r3, #0
 8009c84:	d106      	bne.n	8009c94 <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8009c86:	687b      	ldr	r3, [r7, #4]
 8009c88:	2200      	movs	r2, #0
 8009c8a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 8009c8e:	6878      	ldr	r0, [r7, #4]
 8009c90:	f7fb fd4c 	bl	800572c <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8009c94:	687b      	ldr	r3, [r7, #4]
 8009c96:	2202      	movs	r2, #2
 8009c98:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 8009c9c:	687b      	ldr	r3, [r7, #4]
 8009c9e:	681b      	ldr	r3, [r3, #0]
 8009ca0:	689b      	ldr	r3, [r3, #8]
 8009ca2:	687a      	ldr	r2, [r7, #4]
 8009ca4:	6812      	ldr	r2, [r2, #0]
 8009ca6:	f423 33a0 	bic.w	r3, r3, #81920	; 0x14000
 8009caa:	f023 0307 	bic.w	r3, r3, #7
 8009cae:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8009cb0:	687b      	ldr	r3, [r7, #4]
 8009cb2:	681a      	ldr	r2, [r3, #0]
 8009cb4:	687b      	ldr	r3, [r7, #4]
 8009cb6:	3304      	adds	r3, #4
 8009cb8:	4619      	mov	r1, r3
 8009cba:	4610      	mov	r0, r2
 8009cbc:	f000 fb5c 	bl	800a378 <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8009cc0:	687b      	ldr	r3, [r7, #4]
 8009cc2:	681b      	ldr	r3, [r3, #0]
 8009cc4:	689b      	ldr	r3, [r3, #8]
 8009cc6:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 8009cc8:	687b      	ldr	r3, [r7, #4]
 8009cca:	681b      	ldr	r3, [r3, #0]
 8009ccc:	699b      	ldr	r3, [r3, #24]
 8009cce:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 8009cd0:	687b      	ldr	r3, [r7, #4]
 8009cd2:	681b      	ldr	r3, [r3, #0]
 8009cd4:	6a1b      	ldr	r3, [r3, #32]
 8009cd6:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 8009cd8:	683b      	ldr	r3, [r7, #0]
 8009cda:	681b      	ldr	r3, [r3, #0]
 8009cdc:	697a      	ldr	r2, [r7, #20]
 8009cde:	4313      	orrs	r3, r2
 8009ce0:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 8009ce2:	693b      	ldr	r3, [r7, #16]
 8009ce4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8009ce8:	f023 0303 	bic.w	r3, r3, #3
 8009cec:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 8009cee:	683b      	ldr	r3, [r7, #0]
 8009cf0:	689a      	ldr	r2, [r3, #8]
 8009cf2:	683b      	ldr	r3, [r7, #0]
 8009cf4:	699b      	ldr	r3, [r3, #24]
 8009cf6:	021b      	lsls	r3, r3, #8
 8009cf8:	4313      	orrs	r3, r2
 8009cfa:	693a      	ldr	r2, [r7, #16]
 8009cfc:	4313      	orrs	r3, r2
 8009cfe:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 8009d00:	693b      	ldr	r3, [r7, #16]
 8009d02:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 8009d06:	f023 030c 	bic.w	r3, r3, #12
 8009d0a:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 8009d0c:	693b      	ldr	r3, [r7, #16]
 8009d0e:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8009d12:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8009d16:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 8009d18:	683b      	ldr	r3, [r7, #0]
 8009d1a:	68da      	ldr	r2, [r3, #12]
 8009d1c:	683b      	ldr	r3, [r7, #0]
 8009d1e:	69db      	ldr	r3, [r3, #28]
 8009d20:	021b      	lsls	r3, r3, #8
 8009d22:	4313      	orrs	r3, r2
 8009d24:	693a      	ldr	r2, [r7, #16]
 8009d26:	4313      	orrs	r3, r2
 8009d28:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 8009d2a:	683b      	ldr	r3, [r7, #0]
 8009d2c:	691b      	ldr	r3, [r3, #16]
 8009d2e:	011a      	lsls	r2, r3, #4
 8009d30:	683b      	ldr	r3, [r7, #0]
 8009d32:	6a1b      	ldr	r3, [r3, #32]
 8009d34:	031b      	lsls	r3, r3, #12
 8009d36:	4313      	orrs	r3, r2
 8009d38:	693a      	ldr	r2, [r7, #16]
 8009d3a:	4313      	orrs	r3, r2
 8009d3c:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 8009d3e:	68fb      	ldr	r3, [r7, #12]
 8009d40:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 8009d44:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 8009d46:	68fb      	ldr	r3, [r7, #12]
 8009d48:	f023 0388 	bic.w	r3, r3, #136	; 0x88
 8009d4c:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 8009d4e:	683b      	ldr	r3, [r7, #0]
 8009d50:	685a      	ldr	r2, [r3, #4]
 8009d52:	683b      	ldr	r3, [r7, #0]
 8009d54:	695b      	ldr	r3, [r3, #20]
 8009d56:	011b      	lsls	r3, r3, #4
 8009d58:	4313      	orrs	r3, r2
 8009d5a:	68fa      	ldr	r2, [r7, #12]
 8009d5c:	4313      	orrs	r3, r2
 8009d5e:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8009d60:	687b      	ldr	r3, [r7, #4]
 8009d62:	681b      	ldr	r3, [r3, #0]
 8009d64:	697a      	ldr	r2, [r7, #20]
 8009d66:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 8009d68:	687b      	ldr	r3, [r7, #4]
 8009d6a:	681b      	ldr	r3, [r3, #0]
 8009d6c:	693a      	ldr	r2, [r7, #16]
 8009d6e:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 8009d70:	687b      	ldr	r3, [r7, #4]
 8009d72:	681b      	ldr	r3, [r3, #0]
 8009d74:	68fa      	ldr	r2, [r7, #12]
 8009d76:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8009d78:	687b      	ldr	r3, [r7, #4]
 8009d7a:	2201      	movs	r2, #1
 8009d7c:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8009d80:	687b      	ldr	r3, [r7, #4]
 8009d82:	2201      	movs	r2, #1
 8009d84:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8009d88:	687b      	ldr	r3, [r7, #4]
 8009d8a:	2201      	movs	r2, #1
 8009d8c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8009d90:	687b      	ldr	r3, [r7, #4]
 8009d92:	2201      	movs	r2, #1
 8009d94:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8009d98:	687b      	ldr	r3, [r7, #4]
 8009d9a:	2201      	movs	r2, #1
 8009d9c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8009da0:	687b      	ldr	r3, [r7, #4]
 8009da2:	2201      	movs	r2, #1
 8009da4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8009da8:	2300      	movs	r3, #0
}
 8009daa:	4618      	mov	r0, r3
 8009dac:	3718      	adds	r7, #24
 8009dae:	46bd      	mov	sp, r7
 8009db0:	bd80      	pop	{r7, pc}

08009db2 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8009db2:	b580      	push	{r7, lr}
 8009db4:	b082      	sub	sp, #8
 8009db6:	af00      	add	r7, sp, #0
 8009db8:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8009dba:	687b      	ldr	r3, [r7, #4]
 8009dbc:	681b      	ldr	r3, [r3, #0]
 8009dbe:	691b      	ldr	r3, [r3, #16]
 8009dc0:	f003 0302 	and.w	r3, r3, #2
 8009dc4:	2b02      	cmp	r3, #2
 8009dc6:	d122      	bne.n	8009e0e <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8009dc8:	687b      	ldr	r3, [r7, #4]
 8009dca:	681b      	ldr	r3, [r3, #0]
 8009dcc:	68db      	ldr	r3, [r3, #12]
 8009dce:	f003 0302 	and.w	r3, r3, #2
 8009dd2:	2b02      	cmp	r3, #2
 8009dd4:	d11b      	bne.n	8009e0e <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8009dd6:	687b      	ldr	r3, [r7, #4]
 8009dd8:	681b      	ldr	r3, [r3, #0]
 8009dda:	f06f 0202 	mvn.w	r2, #2
 8009dde:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8009de0:	687b      	ldr	r3, [r7, #4]
 8009de2:	2201      	movs	r2, #1
 8009de4:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8009de6:	687b      	ldr	r3, [r7, #4]
 8009de8:	681b      	ldr	r3, [r3, #0]
 8009dea:	699b      	ldr	r3, [r3, #24]
 8009dec:	f003 0303 	and.w	r3, r3, #3
 8009df0:	2b00      	cmp	r3, #0
 8009df2:	d003      	beq.n	8009dfc <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8009df4:	6878      	ldr	r0, [r7, #4]
 8009df6:	f000 faa1 	bl	800a33c <HAL_TIM_IC_CaptureCallback>
 8009dfa:	e005      	b.n	8009e08 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8009dfc:	6878      	ldr	r0, [r7, #4]
 8009dfe:	f000 fa93 	bl	800a328 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8009e02:	6878      	ldr	r0, [r7, #4]
 8009e04:	f000 faa4 	bl	800a350 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8009e08:	687b      	ldr	r3, [r7, #4]
 8009e0a:	2200      	movs	r2, #0
 8009e0c:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8009e0e:	687b      	ldr	r3, [r7, #4]
 8009e10:	681b      	ldr	r3, [r3, #0]
 8009e12:	691b      	ldr	r3, [r3, #16]
 8009e14:	f003 0304 	and.w	r3, r3, #4
 8009e18:	2b04      	cmp	r3, #4
 8009e1a:	d122      	bne.n	8009e62 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8009e1c:	687b      	ldr	r3, [r7, #4]
 8009e1e:	681b      	ldr	r3, [r3, #0]
 8009e20:	68db      	ldr	r3, [r3, #12]
 8009e22:	f003 0304 	and.w	r3, r3, #4
 8009e26:	2b04      	cmp	r3, #4
 8009e28:	d11b      	bne.n	8009e62 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8009e2a:	687b      	ldr	r3, [r7, #4]
 8009e2c:	681b      	ldr	r3, [r3, #0]
 8009e2e:	f06f 0204 	mvn.w	r2, #4
 8009e32:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8009e34:	687b      	ldr	r3, [r7, #4]
 8009e36:	2202      	movs	r2, #2
 8009e38:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8009e3a:	687b      	ldr	r3, [r7, #4]
 8009e3c:	681b      	ldr	r3, [r3, #0]
 8009e3e:	699b      	ldr	r3, [r3, #24]
 8009e40:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8009e44:	2b00      	cmp	r3, #0
 8009e46:	d003      	beq.n	8009e50 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8009e48:	6878      	ldr	r0, [r7, #4]
 8009e4a:	f000 fa77 	bl	800a33c <HAL_TIM_IC_CaptureCallback>
 8009e4e:	e005      	b.n	8009e5c <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8009e50:	6878      	ldr	r0, [r7, #4]
 8009e52:	f000 fa69 	bl	800a328 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8009e56:	6878      	ldr	r0, [r7, #4]
 8009e58:	f000 fa7a 	bl	800a350 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8009e5c:	687b      	ldr	r3, [r7, #4]
 8009e5e:	2200      	movs	r2, #0
 8009e60:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8009e62:	687b      	ldr	r3, [r7, #4]
 8009e64:	681b      	ldr	r3, [r3, #0]
 8009e66:	691b      	ldr	r3, [r3, #16]
 8009e68:	f003 0308 	and.w	r3, r3, #8
 8009e6c:	2b08      	cmp	r3, #8
 8009e6e:	d122      	bne.n	8009eb6 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8009e70:	687b      	ldr	r3, [r7, #4]
 8009e72:	681b      	ldr	r3, [r3, #0]
 8009e74:	68db      	ldr	r3, [r3, #12]
 8009e76:	f003 0308 	and.w	r3, r3, #8
 8009e7a:	2b08      	cmp	r3, #8
 8009e7c:	d11b      	bne.n	8009eb6 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8009e7e:	687b      	ldr	r3, [r7, #4]
 8009e80:	681b      	ldr	r3, [r3, #0]
 8009e82:	f06f 0208 	mvn.w	r2, #8
 8009e86:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8009e88:	687b      	ldr	r3, [r7, #4]
 8009e8a:	2204      	movs	r2, #4
 8009e8c:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8009e8e:	687b      	ldr	r3, [r7, #4]
 8009e90:	681b      	ldr	r3, [r3, #0]
 8009e92:	69db      	ldr	r3, [r3, #28]
 8009e94:	f003 0303 	and.w	r3, r3, #3
 8009e98:	2b00      	cmp	r3, #0
 8009e9a:	d003      	beq.n	8009ea4 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8009e9c:	6878      	ldr	r0, [r7, #4]
 8009e9e:	f000 fa4d 	bl	800a33c <HAL_TIM_IC_CaptureCallback>
 8009ea2:	e005      	b.n	8009eb0 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8009ea4:	6878      	ldr	r0, [r7, #4]
 8009ea6:	f000 fa3f 	bl	800a328 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8009eaa:	6878      	ldr	r0, [r7, #4]
 8009eac:	f000 fa50 	bl	800a350 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8009eb0:	687b      	ldr	r3, [r7, #4]
 8009eb2:	2200      	movs	r2, #0
 8009eb4:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8009eb6:	687b      	ldr	r3, [r7, #4]
 8009eb8:	681b      	ldr	r3, [r3, #0]
 8009eba:	691b      	ldr	r3, [r3, #16]
 8009ebc:	f003 0310 	and.w	r3, r3, #16
 8009ec0:	2b10      	cmp	r3, #16
 8009ec2:	d122      	bne.n	8009f0a <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8009ec4:	687b      	ldr	r3, [r7, #4]
 8009ec6:	681b      	ldr	r3, [r3, #0]
 8009ec8:	68db      	ldr	r3, [r3, #12]
 8009eca:	f003 0310 	and.w	r3, r3, #16
 8009ece:	2b10      	cmp	r3, #16
 8009ed0:	d11b      	bne.n	8009f0a <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8009ed2:	687b      	ldr	r3, [r7, #4]
 8009ed4:	681b      	ldr	r3, [r3, #0]
 8009ed6:	f06f 0210 	mvn.w	r2, #16
 8009eda:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8009edc:	687b      	ldr	r3, [r7, #4]
 8009ede:	2208      	movs	r2, #8
 8009ee0:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8009ee2:	687b      	ldr	r3, [r7, #4]
 8009ee4:	681b      	ldr	r3, [r3, #0]
 8009ee6:	69db      	ldr	r3, [r3, #28]
 8009ee8:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8009eec:	2b00      	cmp	r3, #0
 8009eee:	d003      	beq.n	8009ef8 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8009ef0:	6878      	ldr	r0, [r7, #4]
 8009ef2:	f000 fa23 	bl	800a33c <HAL_TIM_IC_CaptureCallback>
 8009ef6:	e005      	b.n	8009f04 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8009ef8:	6878      	ldr	r0, [r7, #4]
 8009efa:	f000 fa15 	bl	800a328 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8009efe:	6878      	ldr	r0, [r7, #4]
 8009f00:	f000 fa26 	bl	800a350 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8009f04:	687b      	ldr	r3, [r7, #4]
 8009f06:	2200      	movs	r2, #0
 8009f08:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8009f0a:	687b      	ldr	r3, [r7, #4]
 8009f0c:	681b      	ldr	r3, [r3, #0]
 8009f0e:	691b      	ldr	r3, [r3, #16]
 8009f10:	f003 0301 	and.w	r3, r3, #1
 8009f14:	2b01      	cmp	r3, #1
 8009f16:	d10e      	bne.n	8009f36 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8009f18:	687b      	ldr	r3, [r7, #4]
 8009f1a:	681b      	ldr	r3, [r3, #0]
 8009f1c:	68db      	ldr	r3, [r3, #12]
 8009f1e:	f003 0301 	and.w	r3, r3, #1
 8009f22:	2b01      	cmp	r3, #1
 8009f24:	d107      	bne.n	8009f36 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8009f26:	687b      	ldr	r3, [r7, #4]
 8009f28:	681b      	ldr	r3, [r3, #0]
 8009f2a:	f06f 0201 	mvn.w	r2, #1
 8009f2e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8009f30:	6878      	ldr	r0, [r7, #4]
 8009f32:	f000 f9ef 	bl	800a314 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8009f36:	687b      	ldr	r3, [r7, #4]
 8009f38:	681b      	ldr	r3, [r3, #0]
 8009f3a:	691b      	ldr	r3, [r3, #16]
 8009f3c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009f40:	2b80      	cmp	r3, #128	; 0x80
 8009f42:	d10e      	bne.n	8009f62 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8009f44:	687b      	ldr	r3, [r7, #4]
 8009f46:	681b      	ldr	r3, [r3, #0]
 8009f48:	68db      	ldr	r3, [r3, #12]
 8009f4a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009f4e:	2b80      	cmp	r3, #128	; 0x80
 8009f50:	d107      	bne.n	8009f62 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8009f52:	687b      	ldr	r3, [r7, #4]
 8009f54:	681b      	ldr	r3, [r3, #0]
 8009f56:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8009f5a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8009f5c:	6878      	ldr	r0, [r7, #4]
 8009f5e:	f000 fd5d 	bl	800aa1c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8009f62:	687b      	ldr	r3, [r7, #4]
 8009f64:	681b      	ldr	r3, [r3, #0]
 8009f66:	691b      	ldr	r3, [r3, #16]
 8009f68:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009f6c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8009f70:	d10e      	bne.n	8009f90 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8009f72:	687b      	ldr	r3, [r7, #4]
 8009f74:	681b      	ldr	r3, [r3, #0]
 8009f76:	68db      	ldr	r3, [r3, #12]
 8009f78:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009f7c:	2b80      	cmp	r3, #128	; 0x80
 8009f7e:	d107      	bne.n	8009f90 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8009f80:	687b      	ldr	r3, [r7, #4]
 8009f82:	681b      	ldr	r3, [r3, #0]
 8009f84:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8009f88:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8009f8a:	6878      	ldr	r0, [r7, #4]
 8009f8c:	f000 fd50 	bl	800aa30 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8009f90:	687b      	ldr	r3, [r7, #4]
 8009f92:	681b      	ldr	r3, [r3, #0]
 8009f94:	691b      	ldr	r3, [r3, #16]
 8009f96:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009f9a:	2b40      	cmp	r3, #64	; 0x40
 8009f9c:	d10e      	bne.n	8009fbc <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8009f9e:	687b      	ldr	r3, [r7, #4]
 8009fa0:	681b      	ldr	r3, [r3, #0]
 8009fa2:	68db      	ldr	r3, [r3, #12]
 8009fa4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009fa8:	2b40      	cmp	r3, #64	; 0x40
 8009faa:	d107      	bne.n	8009fbc <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8009fac:	687b      	ldr	r3, [r7, #4]
 8009fae:	681b      	ldr	r3, [r3, #0]
 8009fb0:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8009fb4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8009fb6:	6878      	ldr	r0, [r7, #4]
 8009fb8:	f000 f9d4 	bl	800a364 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8009fbc:	687b      	ldr	r3, [r7, #4]
 8009fbe:	681b      	ldr	r3, [r3, #0]
 8009fc0:	691b      	ldr	r3, [r3, #16]
 8009fc2:	f003 0320 	and.w	r3, r3, #32
 8009fc6:	2b20      	cmp	r3, #32
 8009fc8:	d10e      	bne.n	8009fe8 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8009fca:	687b      	ldr	r3, [r7, #4]
 8009fcc:	681b      	ldr	r3, [r3, #0]
 8009fce:	68db      	ldr	r3, [r3, #12]
 8009fd0:	f003 0320 	and.w	r3, r3, #32
 8009fd4:	2b20      	cmp	r3, #32
 8009fd6:	d107      	bne.n	8009fe8 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8009fd8:	687b      	ldr	r3, [r7, #4]
 8009fda:	681b      	ldr	r3, [r3, #0]
 8009fdc:	f06f 0220 	mvn.w	r2, #32
 8009fe0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8009fe2:	6878      	ldr	r0, [r7, #4]
 8009fe4:	f000 fd10 	bl	800aa08 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Encoder index event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_IDX) != RESET)
 8009fe8:	687b      	ldr	r3, [r7, #4]
 8009fea:	681b      	ldr	r3, [r3, #0]
 8009fec:	691b      	ldr	r3, [r3, #16]
 8009fee:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8009ff2:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8009ff6:	d10f      	bne.n	800a018 <HAL_TIM_IRQHandler+0x266>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_IDX) != RESET)
 8009ff8:	687b      	ldr	r3, [r7, #4]
 8009ffa:	681b      	ldr	r3, [r3, #0]
 8009ffc:	68db      	ldr	r3, [r3, #12]
 8009ffe:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800a002:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800a006:	d107      	bne.n	800a018 <HAL_TIM_IRQHandler+0x266>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_IDX);
 800a008:	687b      	ldr	r3, [r7, #4]
 800a00a:	681b      	ldr	r3, [r3, #0]
 800a00c:	f46f 1280 	mvn.w	r2, #1048576	; 0x100000
 800a010:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->EncoderIndexCallback(htim);
#else
      HAL_TIMEx_EncoderIndexCallback(htim);
 800a012:	6878      	ldr	r0, [r7, #4]
 800a014:	f000 fd16 	bl	800aa44 <HAL_TIMEx_EncoderIndexCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Direction change event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_DIR) != RESET)
 800a018:	687b      	ldr	r3, [r7, #4]
 800a01a:	681b      	ldr	r3, [r3, #0]
 800a01c:	691b      	ldr	r3, [r3, #16]
 800a01e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800a022:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800a026:	d10f      	bne.n	800a048 <HAL_TIM_IRQHandler+0x296>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_DIR) != RESET)
 800a028:	687b      	ldr	r3, [r7, #4]
 800a02a:	681b      	ldr	r3, [r3, #0]
 800a02c:	68db      	ldr	r3, [r3, #12]
 800a02e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800a032:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800a036:	d107      	bne.n	800a048 <HAL_TIM_IRQHandler+0x296>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_DIR);
 800a038:	687b      	ldr	r3, [r7, #4]
 800a03a:	681b      	ldr	r3, [r3, #0]
 800a03c:	f46f 1200 	mvn.w	r2, #2097152	; 0x200000
 800a040:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->DirectionChangeCallback(htim);
#else
      HAL_TIMEx_DirectionChangeCallback(htim);
 800a042:	6878      	ldr	r0, [r7, #4]
 800a044:	f000 fd08 	bl	800aa58 <HAL_TIMEx_DirectionChangeCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Index error event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_IERR) != RESET)
 800a048:	687b      	ldr	r3, [r7, #4]
 800a04a:	681b      	ldr	r3, [r3, #0]
 800a04c:	691b      	ldr	r3, [r3, #16]
 800a04e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800a052:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800a056:	d10f      	bne.n	800a078 <HAL_TIM_IRQHandler+0x2c6>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_IERR) != RESET)
 800a058:	687b      	ldr	r3, [r7, #4]
 800a05a:	681b      	ldr	r3, [r3, #0]
 800a05c:	68db      	ldr	r3, [r3, #12]
 800a05e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800a062:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800a066:	d107      	bne.n	800a078 <HAL_TIM_IRQHandler+0x2c6>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_IERR);
 800a068:	687b      	ldr	r3, [r7, #4]
 800a06a:	681b      	ldr	r3, [r3, #0]
 800a06c:	f46f 0280 	mvn.w	r2, #4194304	; 0x400000
 800a070:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->IndexErrorCallback(htim);
#else
      HAL_TIMEx_IndexErrorCallback(htim);
 800a072:	6878      	ldr	r0, [r7, #4]
 800a074:	f000 fcfa 	bl	800aa6c <HAL_TIMEx_IndexErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Transition error event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TERR) != RESET)
 800a078:	687b      	ldr	r3, [r7, #4]
 800a07a:	681b      	ldr	r3, [r3, #0]
 800a07c:	691b      	ldr	r3, [r3, #16]
 800a07e:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800a082:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800a086:	d10f      	bne.n	800a0a8 <HAL_TIM_IRQHandler+0x2f6>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TERR) != RESET)
 800a088:	687b      	ldr	r3, [r7, #4]
 800a08a:	681b      	ldr	r3, [r3, #0]
 800a08c:	68db      	ldr	r3, [r3, #12]
 800a08e:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800a092:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800a096:	d107      	bne.n	800a0a8 <HAL_TIM_IRQHandler+0x2f6>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_TERR);
 800a098:	687b      	ldr	r3, [r7, #4]
 800a09a:	681b      	ldr	r3, [r3, #0]
 800a09c:	f46f 0200 	mvn.w	r2, #8388608	; 0x800000
 800a0a0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TransitionErrorCallback(htim);
#else
      HAL_TIMEx_TransitionErrorCallback(htim);
 800a0a2:	6878      	ldr	r0, [r7, #4]
 800a0a4:	f000 fcec 	bl	800aa80 <HAL_TIMEx_TransitionErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800a0a8:	bf00      	nop
 800a0aa:	3708      	adds	r7, #8
 800a0ac:	46bd      	mov	sp, r7
 800a0ae:	bd80      	pop	{r7, pc}

0800a0b0 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800a0b0:	b580      	push	{r7, lr}
 800a0b2:	b084      	sub	sp, #16
 800a0b4:	af00      	add	r7, sp, #0
 800a0b6:	6078      	str	r0, [r7, #4]
 800a0b8:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800a0ba:	687b      	ldr	r3, [r7, #4]
 800a0bc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800a0c0:	2b01      	cmp	r3, #1
 800a0c2:	d101      	bne.n	800a0c8 <HAL_TIM_ConfigClockSource+0x18>
 800a0c4:	2302      	movs	r3, #2
 800a0c6:	e0d2      	b.n	800a26e <HAL_TIM_ConfigClockSource+0x1be>
 800a0c8:	687b      	ldr	r3, [r7, #4]
 800a0ca:	2201      	movs	r2, #1
 800a0cc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800a0d0:	687b      	ldr	r3, [r7, #4]
 800a0d2:	2202      	movs	r2, #2
 800a0d4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800a0d8:	687b      	ldr	r3, [r7, #4]
 800a0da:	681b      	ldr	r3, [r3, #0]
 800a0dc:	689b      	ldr	r3, [r3, #8]
 800a0de:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800a0e0:	68fb      	ldr	r3, [r7, #12]
 800a0e2:	f423 1344 	bic.w	r3, r3, #3211264	; 0x310000
 800a0e6:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 800a0ea:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800a0ec:	68fb      	ldr	r3, [r7, #12]
 800a0ee:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800a0f2:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 800a0f4:	687b      	ldr	r3, [r7, #4]
 800a0f6:	681b      	ldr	r3, [r3, #0]
 800a0f8:	68fa      	ldr	r2, [r7, #12]
 800a0fa:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800a0fc:	683b      	ldr	r3, [r7, #0]
 800a0fe:	681b      	ldr	r3, [r3, #0]
 800a100:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800a104:	f000 80a9 	beq.w	800a25a <HAL_TIM_ConfigClockSource+0x1aa>
 800a108:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800a10c:	d81a      	bhi.n	800a144 <HAL_TIM_ConfigClockSource+0x94>
 800a10e:	2b30      	cmp	r3, #48	; 0x30
 800a110:	f000 809a 	beq.w	800a248 <HAL_TIM_ConfigClockSource+0x198>
 800a114:	2b30      	cmp	r3, #48	; 0x30
 800a116:	d809      	bhi.n	800a12c <HAL_TIM_ConfigClockSource+0x7c>
 800a118:	2b10      	cmp	r3, #16
 800a11a:	f000 8095 	beq.w	800a248 <HAL_TIM_ConfigClockSource+0x198>
 800a11e:	2b20      	cmp	r3, #32
 800a120:	f000 8092 	beq.w	800a248 <HAL_TIM_ConfigClockSource+0x198>
 800a124:	2b00      	cmp	r3, #0
 800a126:	f000 808f 	beq.w	800a248 <HAL_TIM_ConfigClockSource+0x198>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
      break;
    }

    default:
      break;
 800a12a:	e097      	b.n	800a25c <HAL_TIM_ConfigClockSource+0x1ac>
  switch (sClockSourceConfig->ClockSource)
 800a12c:	2b50      	cmp	r3, #80	; 0x50
 800a12e:	d05b      	beq.n	800a1e8 <HAL_TIM_ConfigClockSource+0x138>
 800a130:	2b50      	cmp	r3, #80	; 0x50
 800a132:	d802      	bhi.n	800a13a <HAL_TIM_ConfigClockSource+0x8a>
 800a134:	2b40      	cmp	r3, #64	; 0x40
 800a136:	d077      	beq.n	800a228 <HAL_TIM_ConfigClockSource+0x178>
      break;
 800a138:	e090      	b.n	800a25c <HAL_TIM_ConfigClockSource+0x1ac>
  switch (sClockSourceConfig->ClockSource)
 800a13a:	2b60      	cmp	r3, #96	; 0x60
 800a13c:	d064      	beq.n	800a208 <HAL_TIM_ConfigClockSource+0x158>
 800a13e:	2b70      	cmp	r3, #112	; 0x70
 800a140:	d028      	beq.n	800a194 <HAL_TIM_ConfigClockSource+0xe4>
      break;
 800a142:	e08b      	b.n	800a25c <HAL_TIM_ConfigClockSource+0x1ac>
  switch (sClockSourceConfig->ClockSource)
 800a144:	4a4c      	ldr	r2, [pc, #304]	; (800a278 <HAL_TIM_ConfigClockSource+0x1c8>)
 800a146:	4293      	cmp	r3, r2
 800a148:	d07e      	beq.n	800a248 <HAL_TIM_ConfigClockSource+0x198>
 800a14a:	4a4b      	ldr	r2, [pc, #300]	; (800a278 <HAL_TIM_ConfigClockSource+0x1c8>)
 800a14c:	4293      	cmp	r3, r2
 800a14e:	d810      	bhi.n	800a172 <HAL_TIM_ConfigClockSource+0xc2>
 800a150:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800a154:	d078      	beq.n	800a248 <HAL_TIM_ConfigClockSource+0x198>
 800a156:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800a15a:	d803      	bhi.n	800a164 <HAL_TIM_ConfigClockSource+0xb4>
 800a15c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800a160:	d02f      	beq.n	800a1c2 <HAL_TIM_ConfigClockSource+0x112>
      break;
 800a162:	e07b      	b.n	800a25c <HAL_TIM_ConfigClockSource+0x1ac>
  switch (sClockSourceConfig->ClockSource)
 800a164:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 800a168:	d06e      	beq.n	800a248 <HAL_TIM_ConfigClockSource+0x198>
 800a16a:	4a44      	ldr	r2, [pc, #272]	; (800a27c <HAL_TIM_ConfigClockSource+0x1cc>)
 800a16c:	4293      	cmp	r3, r2
 800a16e:	d06b      	beq.n	800a248 <HAL_TIM_ConfigClockSource+0x198>
      break;
 800a170:	e074      	b.n	800a25c <HAL_TIM_ConfigClockSource+0x1ac>
  switch (sClockSourceConfig->ClockSource)
 800a172:	4a43      	ldr	r2, [pc, #268]	; (800a280 <HAL_TIM_ConfigClockSource+0x1d0>)
 800a174:	4293      	cmp	r3, r2
 800a176:	d067      	beq.n	800a248 <HAL_TIM_ConfigClockSource+0x198>
 800a178:	4a41      	ldr	r2, [pc, #260]	; (800a280 <HAL_TIM_ConfigClockSource+0x1d0>)
 800a17a:	4293      	cmp	r3, r2
 800a17c:	d803      	bhi.n	800a186 <HAL_TIM_ConfigClockSource+0xd6>
 800a17e:	4a41      	ldr	r2, [pc, #260]	; (800a284 <HAL_TIM_ConfigClockSource+0x1d4>)
 800a180:	4293      	cmp	r3, r2
 800a182:	d061      	beq.n	800a248 <HAL_TIM_ConfigClockSource+0x198>
      break;
 800a184:	e06a      	b.n	800a25c <HAL_TIM_ConfigClockSource+0x1ac>
  switch (sClockSourceConfig->ClockSource)
 800a186:	4a40      	ldr	r2, [pc, #256]	; (800a288 <HAL_TIM_ConfigClockSource+0x1d8>)
 800a188:	4293      	cmp	r3, r2
 800a18a:	d05d      	beq.n	800a248 <HAL_TIM_ConfigClockSource+0x198>
 800a18c:	4a3f      	ldr	r2, [pc, #252]	; (800a28c <HAL_TIM_ConfigClockSource+0x1dc>)
 800a18e:	4293      	cmp	r3, r2
 800a190:	d05a      	beq.n	800a248 <HAL_TIM_ConfigClockSource+0x198>
      break;
 800a192:	e063      	b.n	800a25c <HAL_TIM_ConfigClockSource+0x1ac>
      TIM_ETR_SetConfig(htim->Instance,
 800a194:	687b      	ldr	r3, [r7, #4]
 800a196:	6818      	ldr	r0, [r3, #0]
 800a198:	683b      	ldr	r3, [r7, #0]
 800a19a:	6899      	ldr	r1, [r3, #8]
 800a19c:	683b      	ldr	r3, [r7, #0]
 800a19e:	685a      	ldr	r2, [r3, #4]
 800a1a0:	683b      	ldr	r3, [r7, #0]
 800a1a2:	68db      	ldr	r3, [r3, #12]
 800a1a4:	f000 fac8 	bl	800a738 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 800a1a8:	687b      	ldr	r3, [r7, #4]
 800a1aa:	681b      	ldr	r3, [r3, #0]
 800a1ac:	689b      	ldr	r3, [r3, #8]
 800a1ae:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800a1b0:	68fb      	ldr	r3, [r7, #12]
 800a1b2:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 800a1b6:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 800a1b8:	687b      	ldr	r3, [r7, #4]
 800a1ba:	681b      	ldr	r3, [r3, #0]
 800a1bc:	68fa      	ldr	r2, [r7, #12]
 800a1be:	609a      	str	r2, [r3, #8]
      break;
 800a1c0:	e04c      	b.n	800a25c <HAL_TIM_ConfigClockSource+0x1ac>
      TIM_ETR_SetConfig(htim->Instance,
 800a1c2:	687b      	ldr	r3, [r7, #4]
 800a1c4:	6818      	ldr	r0, [r3, #0]
 800a1c6:	683b      	ldr	r3, [r7, #0]
 800a1c8:	6899      	ldr	r1, [r3, #8]
 800a1ca:	683b      	ldr	r3, [r7, #0]
 800a1cc:	685a      	ldr	r2, [r3, #4]
 800a1ce:	683b      	ldr	r3, [r7, #0]
 800a1d0:	68db      	ldr	r3, [r3, #12]
 800a1d2:	f000 fab1 	bl	800a738 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800a1d6:	687b      	ldr	r3, [r7, #4]
 800a1d8:	681b      	ldr	r3, [r3, #0]
 800a1da:	689a      	ldr	r2, [r3, #8]
 800a1dc:	687b      	ldr	r3, [r7, #4]
 800a1de:	681b      	ldr	r3, [r3, #0]
 800a1e0:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800a1e4:	609a      	str	r2, [r3, #8]
      break;
 800a1e6:	e039      	b.n	800a25c <HAL_TIM_ConfigClockSource+0x1ac>
      TIM_TI1_ConfigInputStage(htim->Instance,
 800a1e8:	687b      	ldr	r3, [r7, #4]
 800a1ea:	6818      	ldr	r0, [r3, #0]
 800a1ec:	683b      	ldr	r3, [r7, #0]
 800a1ee:	6859      	ldr	r1, [r3, #4]
 800a1f0:	683b      	ldr	r3, [r7, #0]
 800a1f2:	68db      	ldr	r3, [r3, #12]
 800a1f4:	461a      	mov	r2, r3
 800a1f6:	f000 fa23 	bl	800a640 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800a1fa:	687b      	ldr	r3, [r7, #4]
 800a1fc:	681b      	ldr	r3, [r3, #0]
 800a1fe:	2150      	movs	r1, #80	; 0x50
 800a200:	4618      	mov	r0, r3
 800a202:	f000 fa7c 	bl	800a6fe <TIM_ITRx_SetConfig>
      break;
 800a206:	e029      	b.n	800a25c <HAL_TIM_ConfigClockSource+0x1ac>
      TIM_TI2_ConfigInputStage(htim->Instance,
 800a208:	687b      	ldr	r3, [r7, #4]
 800a20a:	6818      	ldr	r0, [r3, #0]
 800a20c:	683b      	ldr	r3, [r7, #0]
 800a20e:	6859      	ldr	r1, [r3, #4]
 800a210:	683b      	ldr	r3, [r7, #0]
 800a212:	68db      	ldr	r3, [r3, #12]
 800a214:	461a      	mov	r2, r3
 800a216:	f000 fa42 	bl	800a69e <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800a21a:	687b      	ldr	r3, [r7, #4]
 800a21c:	681b      	ldr	r3, [r3, #0]
 800a21e:	2160      	movs	r1, #96	; 0x60
 800a220:	4618      	mov	r0, r3
 800a222:	f000 fa6c 	bl	800a6fe <TIM_ITRx_SetConfig>
      break;
 800a226:	e019      	b.n	800a25c <HAL_TIM_ConfigClockSource+0x1ac>
      TIM_TI1_ConfigInputStage(htim->Instance,
 800a228:	687b      	ldr	r3, [r7, #4]
 800a22a:	6818      	ldr	r0, [r3, #0]
 800a22c:	683b      	ldr	r3, [r7, #0]
 800a22e:	6859      	ldr	r1, [r3, #4]
 800a230:	683b      	ldr	r3, [r7, #0]
 800a232:	68db      	ldr	r3, [r3, #12]
 800a234:	461a      	mov	r2, r3
 800a236:	f000 fa03 	bl	800a640 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800a23a:	687b      	ldr	r3, [r7, #4]
 800a23c:	681b      	ldr	r3, [r3, #0]
 800a23e:	2140      	movs	r1, #64	; 0x40
 800a240:	4618      	mov	r0, r3
 800a242:	f000 fa5c 	bl	800a6fe <TIM_ITRx_SetConfig>
      break;
 800a246:	e009      	b.n	800a25c <HAL_TIM_ConfigClockSource+0x1ac>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800a248:	687b      	ldr	r3, [r7, #4]
 800a24a:	681a      	ldr	r2, [r3, #0]
 800a24c:	683b      	ldr	r3, [r7, #0]
 800a24e:	681b      	ldr	r3, [r3, #0]
 800a250:	4619      	mov	r1, r3
 800a252:	4610      	mov	r0, r2
 800a254:	f000 fa53 	bl	800a6fe <TIM_ITRx_SetConfig>
      break;
 800a258:	e000      	b.n	800a25c <HAL_TIM_ConfigClockSource+0x1ac>
      break;
 800a25a:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800a25c:	687b      	ldr	r3, [r7, #4]
 800a25e:	2201      	movs	r2, #1
 800a260:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800a264:	687b      	ldr	r3, [r7, #4]
 800a266:	2200      	movs	r2, #0
 800a268:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800a26c:	2300      	movs	r3, #0
}
 800a26e:	4618      	mov	r0, r3
 800a270:	3710      	adds	r7, #16
 800a272:	46bd      	mov	sp, r7
 800a274:	bd80      	pop	{r7, pc}
 800a276:	bf00      	nop
 800a278:	00100030 	.word	0x00100030
 800a27c:	00100020 	.word	0x00100020
 800a280:	00100050 	.word	0x00100050
 800a284:	00100040 	.word	0x00100040
 800a288:	00100060 	.word	0x00100060
 800a28c:	00100070 	.word	0x00100070

0800a290 <HAL_TIM_SlaveConfigSynchro>:
  *         timer input or external trigger input) and the Slave mode
  *         (Disable, Reset, Gated, Trigger, External clock mode 1, Reset + Trigger, Gated + Reset).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_SlaveConfigSynchro(TIM_HandleTypeDef *htim, TIM_SlaveConfigTypeDef *sSlaveConfig)
{
 800a290:	b580      	push	{r7, lr}
 800a292:	b082      	sub	sp, #8
 800a294:	af00      	add	r7, sp, #0
 800a296:	6078      	str	r0, [r7, #4]
 800a298:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_SLAVE_INSTANCE(htim->Instance));
  assert_param(IS_TIM_SLAVE_MODE(sSlaveConfig->SlaveMode));
  assert_param(IS_TIM_TRIGGER_INSTANCE(htim->Instance, sSlaveConfig->InputTrigger));

  __HAL_LOCK(htim);
 800a29a:	687b      	ldr	r3, [r7, #4]
 800a29c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800a2a0:	2b01      	cmp	r3, #1
 800a2a2:	d101      	bne.n	800a2a8 <HAL_TIM_SlaveConfigSynchro+0x18>
 800a2a4:	2302      	movs	r3, #2
 800a2a6:	e031      	b.n	800a30c <HAL_TIM_SlaveConfigSynchro+0x7c>
 800a2a8:	687b      	ldr	r3, [r7, #4]
 800a2aa:	2201      	movs	r2, #1
 800a2ac:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800a2b0:	687b      	ldr	r3, [r7, #4]
 800a2b2:	2202      	movs	r2, #2
 800a2b4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  if (TIM_SlaveTimer_SetConfig(htim, sSlaveConfig) != HAL_OK)
 800a2b8:	6839      	ldr	r1, [r7, #0]
 800a2ba:	6878      	ldr	r0, [r7, #4]
 800a2bc:	f000 f904 	bl	800a4c8 <TIM_SlaveTimer_SetConfig>
 800a2c0:	4603      	mov	r3, r0
 800a2c2:	2b00      	cmp	r3, #0
 800a2c4:	d009      	beq.n	800a2da <HAL_TIM_SlaveConfigSynchro+0x4a>
  {
    htim->State = HAL_TIM_STATE_READY;
 800a2c6:	687b      	ldr	r3, [r7, #4]
 800a2c8:	2201      	movs	r2, #1
 800a2ca:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    __HAL_UNLOCK(htim);
 800a2ce:	687b      	ldr	r3, [r7, #4]
 800a2d0:	2200      	movs	r2, #0
 800a2d2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    return HAL_ERROR;
 800a2d6:	2301      	movs	r3, #1
 800a2d8:	e018      	b.n	800a30c <HAL_TIM_SlaveConfigSynchro+0x7c>
  }

  /* Disable Trigger Interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_TRIGGER);
 800a2da:	687b      	ldr	r3, [r7, #4]
 800a2dc:	681b      	ldr	r3, [r3, #0]
 800a2de:	68da      	ldr	r2, [r3, #12]
 800a2e0:	687b      	ldr	r3, [r7, #4]
 800a2e2:	681b      	ldr	r3, [r3, #0]
 800a2e4:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800a2e8:	60da      	str	r2, [r3, #12]

  /* Disable Trigger DMA request */
  __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_TRIGGER);
 800a2ea:	687b      	ldr	r3, [r7, #4]
 800a2ec:	681b      	ldr	r3, [r3, #0]
 800a2ee:	68da      	ldr	r2, [r3, #12]
 800a2f0:	687b      	ldr	r3, [r7, #4]
 800a2f2:	681b      	ldr	r3, [r3, #0]
 800a2f4:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 800a2f8:	60da      	str	r2, [r3, #12]

  htim->State = HAL_TIM_STATE_READY;
 800a2fa:	687b      	ldr	r3, [r7, #4]
 800a2fc:	2201      	movs	r2, #1
 800a2fe:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800a302:	687b      	ldr	r3, [r7, #4]
 800a304:	2200      	movs	r2, #0
 800a306:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800a30a:	2300      	movs	r3, #0
}
 800a30c:	4618      	mov	r0, r3
 800a30e:	3708      	adds	r7, #8
 800a310:	46bd      	mov	sp, r7
 800a312:	bd80      	pop	{r7, pc}

0800a314 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 800a314:	b480      	push	{r7}
 800a316:	b083      	sub	sp, #12
 800a318:	af00      	add	r7, sp, #0
 800a31a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 800a31c:	bf00      	nop
 800a31e:	370c      	adds	r7, #12
 800a320:	46bd      	mov	sp, r7
 800a322:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a326:	4770      	bx	lr

0800a328 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800a328:	b480      	push	{r7}
 800a32a:	b083      	sub	sp, #12
 800a32c:	af00      	add	r7, sp, #0
 800a32e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800a330:	bf00      	nop
 800a332:	370c      	adds	r7, #12
 800a334:	46bd      	mov	sp, r7
 800a336:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a33a:	4770      	bx	lr

0800a33c <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800a33c:	b480      	push	{r7}
 800a33e:	b083      	sub	sp, #12
 800a340:	af00      	add	r7, sp, #0
 800a342:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800a344:	bf00      	nop
 800a346:	370c      	adds	r7, #12
 800a348:	46bd      	mov	sp, r7
 800a34a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a34e:	4770      	bx	lr

0800a350 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800a350:	b480      	push	{r7}
 800a352:	b083      	sub	sp, #12
 800a354:	af00      	add	r7, sp, #0
 800a356:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800a358:	bf00      	nop
 800a35a:	370c      	adds	r7, #12
 800a35c:	46bd      	mov	sp, r7
 800a35e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a362:	4770      	bx	lr

0800a364 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800a364:	b480      	push	{r7}
 800a366:	b083      	sub	sp, #12
 800a368:	af00      	add	r7, sp, #0
 800a36a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800a36c:	bf00      	nop
 800a36e:	370c      	adds	r7, #12
 800a370:	46bd      	mov	sp, r7
 800a372:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a376:	4770      	bx	lr

0800a378 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 800a378:	b480      	push	{r7}
 800a37a:	b085      	sub	sp, #20
 800a37c:	af00      	add	r7, sp, #0
 800a37e:	6078      	str	r0, [r7, #4]
 800a380:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800a382:	687b      	ldr	r3, [r7, #4]
 800a384:	681b      	ldr	r3, [r3, #0]
 800a386:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800a388:	687b      	ldr	r3, [r7, #4]
 800a38a:	4a46      	ldr	r2, [pc, #280]	; (800a4a4 <TIM_Base_SetConfig+0x12c>)
 800a38c:	4293      	cmp	r3, r2
 800a38e:	d017      	beq.n	800a3c0 <TIM_Base_SetConfig+0x48>
 800a390:	687b      	ldr	r3, [r7, #4]
 800a392:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800a396:	d013      	beq.n	800a3c0 <TIM_Base_SetConfig+0x48>
 800a398:	687b      	ldr	r3, [r7, #4]
 800a39a:	4a43      	ldr	r2, [pc, #268]	; (800a4a8 <TIM_Base_SetConfig+0x130>)
 800a39c:	4293      	cmp	r3, r2
 800a39e:	d00f      	beq.n	800a3c0 <TIM_Base_SetConfig+0x48>
 800a3a0:	687b      	ldr	r3, [r7, #4]
 800a3a2:	4a42      	ldr	r2, [pc, #264]	; (800a4ac <TIM_Base_SetConfig+0x134>)
 800a3a4:	4293      	cmp	r3, r2
 800a3a6:	d00b      	beq.n	800a3c0 <TIM_Base_SetConfig+0x48>
 800a3a8:	687b      	ldr	r3, [r7, #4]
 800a3aa:	4a41      	ldr	r2, [pc, #260]	; (800a4b0 <TIM_Base_SetConfig+0x138>)
 800a3ac:	4293      	cmp	r3, r2
 800a3ae:	d007      	beq.n	800a3c0 <TIM_Base_SetConfig+0x48>
 800a3b0:	687b      	ldr	r3, [r7, #4]
 800a3b2:	4a40      	ldr	r2, [pc, #256]	; (800a4b4 <TIM_Base_SetConfig+0x13c>)
 800a3b4:	4293      	cmp	r3, r2
 800a3b6:	d003      	beq.n	800a3c0 <TIM_Base_SetConfig+0x48>
 800a3b8:	687b      	ldr	r3, [r7, #4]
 800a3ba:	4a3f      	ldr	r2, [pc, #252]	; (800a4b8 <TIM_Base_SetConfig+0x140>)
 800a3bc:	4293      	cmp	r3, r2
 800a3be:	d108      	bne.n	800a3d2 <TIM_Base_SetConfig+0x5a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800a3c0:	68fb      	ldr	r3, [r7, #12]
 800a3c2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800a3c6:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800a3c8:	683b      	ldr	r3, [r7, #0]
 800a3ca:	685b      	ldr	r3, [r3, #4]
 800a3cc:	68fa      	ldr	r2, [r7, #12]
 800a3ce:	4313      	orrs	r3, r2
 800a3d0:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800a3d2:	687b      	ldr	r3, [r7, #4]
 800a3d4:	4a33      	ldr	r2, [pc, #204]	; (800a4a4 <TIM_Base_SetConfig+0x12c>)
 800a3d6:	4293      	cmp	r3, r2
 800a3d8:	d023      	beq.n	800a422 <TIM_Base_SetConfig+0xaa>
 800a3da:	687b      	ldr	r3, [r7, #4]
 800a3dc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800a3e0:	d01f      	beq.n	800a422 <TIM_Base_SetConfig+0xaa>
 800a3e2:	687b      	ldr	r3, [r7, #4]
 800a3e4:	4a30      	ldr	r2, [pc, #192]	; (800a4a8 <TIM_Base_SetConfig+0x130>)
 800a3e6:	4293      	cmp	r3, r2
 800a3e8:	d01b      	beq.n	800a422 <TIM_Base_SetConfig+0xaa>
 800a3ea:	687b      	ldr	r3, [r7, #4]
 800a3ec:	4a2f      	ldr	r2, [pc, #188]	; (800a4ac <TIM_Base_SetConfig+0x134>)
 800a3ee:	4293      	cmp	r3, r2
 800a3f0:	d017      	beq.n	800a422 <TIM_Base_SetConfig+0xaa>
 800a3f2:	687b      	ldr	r3, [r7, #4]
 800a3f4:	4a2e      	ldr	r2, [pc, #184]	; (800a4b0 <TIM_Base_SetConfig+0x138>)
 800a3f6:	4293      	cmp	r3, r2
 800a3f8:	d013      	beq.n	800a422 <TIM_Base_SetConfig+0xaa>
 800a3fa:	687b      	ldr	r3, [r7, #4]
 800a3fc:	4a2d      	ldr	r2, [pc, #180]	; (800a4b4 <TIM_Base_SetConfig+0x13c>)
 800a3fe:	4293      	cmp	r3, r2
 800a400:	d00f      	beq.n	800a422 <TIM_Base_SetConfig+0xaa>
 800a402:	687b      	ldr	r3, [r7, #4]
 800a404:	4a2d      	ldr	r2, [pc, #180]	; (800a4bc <TIM_Base_SetConfig+0x144>)
 800a406:	4293      	cmp	r3, r2
 800a408:	d00b      	beq.n	800a422 <TIM_Base_SetConfig+0xaa>
 800a40a:	687b      	ldr	r3, [r7, #4]
 800a40c:	4a2c      	ldr	r2, [pc, #176]	; (800a4c0 <TIM_Base_SetConfig+0x148>)
 800a40e:	4293      	cmp	r3, r2
 800a410:	d007      	beq.n	800a422 <TIM_Base_SetConfig+0xaa>
 800a412:	687b      	ldr	r3, [r7, #4]
 800a414:	4a2b      	ldr	r2, [pc, #172]	; (800a4c4 <TIM_Base_SetConfig+0x14c>)
 800a416:	4293      	cmp	r3, r2
 800a418:	d003      	beq.n	800a422 <TIM_Base_SetConfig+0xaa>
 800a41a:	687b      	ldr	r3, [r7, #4]
 800a41c:	4a26      	ldr	r2, [pc, #152]	; (800a4b8 <TIM_Base_SetConfig+0x140>)
 800a41e:	4293      	cmp	r3, r2
 800a420:	d108      	bne.n	800a434 <TIM_Base_SetConfig+0xbc>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800a422:	68fb      	ldr	r3, [r7, #12]
 800a424:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800a428:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800a42a:	683b      	ldr	r3, [r7, #0]
 800a42c:	68db      	ldr	r3, [r3, #12]
 800a42e:	68fa      	ldr	r2, [r7, #12]
 800a430:	4313      	orrs	r3, r2
 800a432:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800a434:	68fb      	ldr	r3, [r7, #12]
 800a436:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800a43a:	683b      	ldr	r3, [r7, #0]
 800a43c:	695b      	ldr	r3, [r3, #20]
 800a43e:	4313      	orrs	r3, r2
 800a440:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800a442:	687b      	ldr	r3, [r7, #4]
 800a444:	68fa      	ldr	r2, [r7, #12]
 800a446:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800a448:	683b      	ldr	r3, [r7, #0]
 800a44a:	689a      	ldr	r2, [r3, #8]
 800a44c:	687b      	ldr	r3, [r7, #4]
 800a44e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800a450:	683b      	ldr	r3, [r7, #0]
 800a452:	681a      	ldr	r2, [r3, #0]
 800a454:	687b      	ldr	r3, [r7, #4]
 800a456:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800a458:	687b      	ldr	r3, [r7, #4]
 800a45a:	4a12      	ldr	r2, [pc, #72]	; (800a4a4 <TIM_Base_SetConfig+0x12c>)
 800a45c:	4293      	cmp	r3, r2
 800a45e:	d013      	beq.n	800a488 <TIM_Base_SetConfig+0x110>
 800a460:	687b      	ldr	r3, [r7, #4]
 800a462:	4a14      	ldr	r2, [pc, #80]	; (800a4b4 <TIM_Base_SetConfig+0x13c>)
 800a464:	4293      	cmp	r3, r2
 800a466:	d00f      	beq.n	800a488 <TIM_Base_SetConfig+0x110>
 800a468:	687b      	ldr	r3, [r7, #4]
 800a46a:	4a14      	ldr	r2, [pc, #80]	; (800a4bc <TIM_Base_SetConfig+0x144>)
 800a46c:	4293      	cmp	r3, r2
 800a46e:	d00b      	beq.n	800a488 <TIM_Base_SetConfig+0x110>
 800a470:	687b      	ldr	r3, [r7, #4]
 800a472:	4a13      	ldr	r2, [pc, #76]	; (800a4c0 <TIM_Base_SetConfig+0x148>)
 800a474:	4293      	cmp	r3, r2
 800a476:	d007      	beq.n	800a488 <TIM_Base_SetConfig+0x110>
 800a478:	687b      	ldr	r3, [r7, #4]
 800a47a:	4a12      	ldr	r2, [pc, #72]	; (800a4c4 <TIM_Base_SetConfig+0x14c>)
 800a47c:	4293      	cmp	r3, r2
 800a47e:	d003      	beq.n	800a488 <TIM_Base_SetConfig+0x110>
 800a480:	687b      	ldr	r3, [r7, #4]
 800a482:	4a0d      	ldr	r2, [pc, #52]	; (800a4b8 <TIM_Base_SetConfig+0x140>)
 800a484:	4293      	cmp	r3, r2
 800a486:	d103      	bne.n	800a490 <TIM_Base_SetConfig+0x118>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800a488:	683b      	ldr	r3, [r7, #0]
 800a48a:	691a      	ldr	r2, [r3, #16]
 800a48c:	687b      	ldr	r3, [r7, #4]
 800a48e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800a490:	687b      	ldr	r3, [r7, #4]
 800a492:	2201      	movs	r2, #1
 800a494:	615a      	str	r2, [r3, #20]
}
 800a496:	bf00      	nop
 800a498:	3714      	adds	r7, #20
 800a49a:	46bd      	mov	sp, r7
 800a49c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a4a0:	4770      	bx	lr
 800a4a2:	bf00      	nop
 800a4a4:	40012c00 	.word	0x40012c00
 800a4a8:	40000400 	.word	0x40000400
 800a4ac:	40000800 	.word	0x40000800
 800a4b0:	40000c00 	.word	0x40000c00
 800a4b4:	40013400 	.word	0x40013400
 800a4b8:	40015000 	.word	0x40015000
 800a4bc:	40014000 	.word	0x40014000
 800a4c0:	40014400 	.word	0x40014400
 800a4c4:	40014800 	.word	0x40014800

0800a4c8 <TIM_SlaveTimer_SetConfig>:
  * @param  sSlaveConfig Slave timer configuration
  * @retval None
  */
static HAL_StatusTypeDef TIM_SlaveTimer_SetConfig(TIM_HandleTypeDef *htim,
                                                  TIM_SlaveConfigTypeDef *sSlaveConfig)
{
 800a4c8:	b580      	push	{r7, lr}
 800a4ca:	b086      	sub	sp, #24
 800a4cc:	af00      	add	r7, sp, #0
 800a4ce:	6078      	str	r0, [r7, #4]
 800a4d0:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800a4d2:	687b      	ldr	r3, [r7, #4]
 800a4d4:	681b      	ldr	r3, [r3, #0]
 800a4d6:	689b      	ldr	r3, [r3, #8]
 800a4d8:	617b      	str	r3, [r7, #20]

  /* Reset the Trigger Selection Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800a4da:	697b      	ldr	r3, [r7, #20]
 800a4dc:	f423 1340 	bic.w	r3, r3, #3145728	; 0x300000
 800a4e0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800a4e4:	617b      	str	r3, [r7, #20]
  /* Set the Input Trigger source */
  tmpsmcr |= sSlaveConfig->InputTrigger;
 800a4e6:	683b      	ldr	r3, [r7, #0]
 800a4e8:	685b      	ldr	r3, [r3, #4]
 800a4ea:	697a      	ldr	r2, [r7, #20]
 800a4ec:	4313      	orrs	r3, r2
 800a4ee:	617b      	str	r3, [r7, #20]

  /* Reset the slave mode Bits */
  tmpsmcr &= ~TIM_SMCR_SMS;
 800a4f0:	697b      	ldr	r3, [r7, #20]
 800a4f2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800a4f6:	f023 0307 	bic.w	r3, r3, #7
 800a4fa:	617b      	str	r3, [r7, #20]
  /* Set the slave mode */
  tmpsmcr |= sSlaveConfig->SlaveMode;
 800a4fc:	683b      	ldr	r3, [r7, #0]
 800a4fe:	681b      	ldr	r3, [r3, #0]
 800a500:	697a      	ldr	r2, [r7, #20]
 800a502:	4313      	orrs	r3, r2
 800a504:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 800a506:	687b      	ldr	r3, [r7, #4]
 800a508:	681b      	ldr	r3, [r3, #0]
 800a50a:	697a      	ldr	r2, [r7, #20]
 800a50c:	609a      	str	r2, [r3, #8]

  /* Configure the trigger prescaler, filter, and polarity */
  switch (sSlaveConfig->InputTrigger)
 800a50e:	683b      	ldr	r3, [r7, #0]
 800a510:	685b      	ldr	r3, [r3, #4]
 800a512:	2b70      	cmp	r3, #112	; 0x70
 800a514:	d034      	beq.n	800a580 <TIM_SlaveTimer_SetConfig+0xb8>
 800a516:	2b70      	cmp	r3, #112	; 0x70
 800a518:	d811      	bhi.n	800a53e <TIM_SlaveTimer_SetConfig+0x76>
 800a51a:	2b30      	cmp	r3, #48	; 0x30
 800a51c:	d07d      	beq.n	800a61a <TIM_SlaveTimer_SetConfig+0x152>
 800a51e:	2b30      	cmp	r3, #48	; 0x30
 800a520:	d806      	bhi.n	800a530 <TIM_SlaveTimer_SetConfig+0x68>
 800a522:	2b10      	cmp	r3, #16
 800a524:	d079      	beq.n	800a61a <TIM_SlaveTimer_SetConfig+0x152>
 800a526:	2b20      	cmp	r3, #32
 800a528:	d077      	beq.n	800a61a <TIM_SlaveTimer_SetConfig+0x152>
 800a52a:	2b00      	cmp	r3, #0
 800a52c:	d075      	beq.n	800a61a <TIM_SlaveTimer_SetConfig+0x152>
      assert_param(IS_TIM_INTERNAL_TRIGGEREVENT_INSTANCE((htim->Instance), sSlaveConfig->InputTrigger));
      break;
    }

    default:
      break;
 800a52e:	e075      	b.n	800a61c <TIM_SlaveTimer_SetConfig+0x154>
  switch (sSlaveConfig->InputTrigger)
 800a530:	2b50      	cmp	r3, #80	; 0x50
 800a532:	d05e      	beq.n	800a5f2 <TIM_SlaveTimer_SetConfig+0x12a>
 800a534:	2b60      	cmp	r3, #96	; 0x60
 800a536:	d066      	beq.n	800a606 <TIM_SlaveTimer_SetConfig+0x13e>
 800a538:	2b40      	cmp	r3, #64	; 0x40
 800a53a:	d02c      	beq.n	800a596 <TIM_SlaveTimer_SetConfig+0xce>
      break;
 800a53c:	e06e      	b.n	800a61c <TIM_SlaveTimer_SetConfig+0x154>
  switch (sSlaveConfig->InputTrigger)
 800a53e:	4a3a      	ldr	r2, [pc, #232]	; (800a628 <TIM_SlaveTimer_SetConfig+0x160>)
 800a540:	4293      	cmp	r3, r2
 800a542:	d06a      	beq.n	800a61a <TIM_SlaveTimer_SetConfig+0x152>
 800a544:	4a38      	ldr	r2, [pc, #224]	; (800a628 <TIM_SlaveTimer_SetConfig+0x160>)
 800a546:	4293      	cmp	r3, r2
 800a548:	d809      	bhi.n	800a55e <TIM_SlaveTimer_SetConfig+0x96>
 800a54a:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 800a54e:	d064      	beq.n	800a61a <TIM_SlaveTimer_SetConfig+0x152>
 800a550:	4a36      	ldr	r2, [pc, #216]	; (800a62c <TIM_SlaveTimer_SetConfig+0x164>)
 800a552:	4293      	cmp	r3, r2
 800a554:	d061      	beq.n	800a61a <TIM_SlaveTimer_SetConfig+0x152>
 800a556:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800a55a:	d05e      	beq.n	800a61a <TIM_SlaveTimer_SetConfig+0x152>
      break;
 800a55c:	e05e      	b.n	800a61c <TIM_SlaveTimer_SetConfig+0x154>
  switch (sSlaveConfig->InputTrigger)
 800a55e:	4a34      	ldr	r2, [pc, #208]	; (800a630 <TIM_SlaveTimer_SetConfig+0x168>)
 800a560:	4293      	cmp	r3, r2
 800a562:	d05a      	beq.n	800a61a <TIM_SlaveTimer_SetConfig+0x152>
 800a564:	4a32      	ldr	r2, [pc, #200]	; (800a630 <TIM_SlaveTimer_SetConfig+0x168>)
 800a566:	4293      	cmp	r3, r2
 800a568:	d803      	bhi.n	800a572 <TIM_SlaveTimer_SetConfig+0xaa>
 800a56a:	4a32      	ldr	r2, [pc, #200]	; (800a634 <TIM_SlaveTimer_SetConfig+0x16c>)
 800a56c:	4293      	cmp	r3, r2
 800a56e:	d054      	beq.n	800a61a <TIM_SlaveTimer_SetConfig+0x152>
      break;
 800a570:	e054      	b.n	800a61c <TIM_SlaveTimer_SetConfig+0x154>
  switch (sSlaveConfig->InputTrigger)
 800a572:	4a31      	ldr	r2, [pc, #196]	; (800a638 <TIM_SlaveTimer_SetConfig+0x170>)
 800a574:	4293      	cmp	r3, r2
 800a576:	d050      	beq.n	800a61a <TIM_SlaveTimer_SetConfig+0x152>
 800a578:	4a30      	ldr	r2, [pc, #192]	; (800a63c <TIM_SlaveTimer_SetConfig+0x174>)
 800a57a:	4293      	cmp	r3, r2
 800a57c:	d04d      	beq.n	800a61a <TIM_SlaveTimer_SetConfig+0x152>
      break;
 800a57e:	e04d      	b.n	800a61c <TIM_SlaveTimer_SetConfig+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 800a580:	687b      	ldr	r3, [r7, #4]
 800a582:	6818      	ldr	r0, [r3, #0]
 800a584:	683b      	ldr	r3, [r7, #0]
 800a586:	68d9      	ldr	r1, [r3, #12]
 800a588:	683b      	ldr	r3, [r7, #0]
 800a58a:	689a      	ldr	r2, [r3, #8]
 800a58c:	683b      	ldr	r3, [r7, #0]
 800a58e:	691b      	ldr	r3, [r3, #16]
 800a590:	f000 f8d2 	bl	800a738 <TIM_ETR_SetConfig>
      break;
 800a594:	e042      	b.n	800a61c <TIM_SlaveTimer_SetConfig+0x154>
      if ((sSlaveConfig->SlaveMode == TIM_SLAVEMODE_GATED) || (sSlaveConfig->SlaveMode == TIM_SLAVEMODE_COMBINED_GATEDRESET))
 800a596:	683b      	ldr	r3, [r7, #0]
 800a598:	681b      	ldr	r3, [r3, #0]
 800a59a:	2b05      	cmp	r3, #5
 800a59c:	d004      	beq.n	800a5a8 <TIM_SlaveTimer_SetConfig+0xe0>
 800a59e:	683b      	ldr	r3, [r7, #0]
 800a5a0:	681b      	ldr	r3, [r3, #0]
 800a5a2:	f1b3 1f01 	cmp.w	r3, #65537	; 0x10001
 800a5a6:	d101      	bne.n	800a5ac <TIM_SlaveTimer_SetConfig+0xe4>
        return HAL_ERROR;
 800a5a8:	2301      	movs	r3, #1
 800a5aa:	e038      	b.n	800a61e <TIM_SlaveTimer_SetConfig+0x156>
      tmpccer = htim->Instance->CCER;
 800a5ac:	687b      	ldr	r3, [r7, #4]
 800a5ae:	681b      	ldr	r3, [r3, #0]
 800a5b0:	6a1b      	ldr	r3, [r3, #32]
 800a5b2:	613b      	str	r3, [r7, #16]
      htim->Instance->CCER &= ~TIM_CCER_CC1E;
 800a5b4:	687b      	ldr	r3, [r7, #4]
 800a5b6:	681b      	ldr	r3, [r3, #0]
 800a5b8:	6a1a      	ldr	r2, [r3, #32]
 800a5ba:	687b      	ldr	r3, [r7, #4]
 800a5bc:	681b      	ldr	r3, [r3, #0]
 800a5be:	f022 0201 	bic.w	r2, r2, #1
 800a5c2:	621a      	str	r2, [r3, #32]
      tmpccmr1 = htim->Instance->CCMR1;
 800a5c4:	687b      	ldr	r3, [r7, #4]
 800a5c6:	681b      	ldr	r3, [r3, #0]
 800a5c8:	699b      	ldr	r3, [r3, #24]
 800a5ca:	60fb      	str	r3, [r7, #12]
      tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800a5cc:	68fb      	ldr	r3, [r7, #12]
 800a5ce:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800a5d2:	60fb      	str	r3, [r7, #12]
      tmpccmr1 |= ((sSlaveConfig->TriggerFilter) << 4U);
 800a5d4:	683b      	ldr	r3, [r7, #0]
 800a5d6:	691b      	ldr	r3, [r3, #16]
 800a5d8:	011b      	lsls	r3, r3, #4
 800a5da:	68fa      	ldr	r2, [r7, #12]
 800a5dc:	4313      	orrs	r3, r2
 800a5de:	60fb      	str	r3, [r7, #12]
      htim->Instance->CCMR1 = tmpccmr1;
 800a5e0:	687b      	ldr	r3, [r7, #4]
 800a5e2:	681b      	ldr	r3, [r3, #0]
 800a5e4:	68fa      	ldr	r2, [r7, #12]
 800a5e6:	619a      	str	r2, [r3, #24]
      htim->Instance->CCER = tmpccer;
 800a5e8:	687b      	ldr	r3, [r7, #4]
 800a5ea:	681b      	ldr	r3, [r3, #0]
 800a5ec:	693a      	ldr	r2, [r7, #16]
 800a5ee:	621a      	str	r2, [r3, #32]
      break;
 800a5f0:	e014      	b.n	800a61c <TIM_SlaveTimer_SetConfig+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 800a5f2:	687b      	ldr	r3, [r7, #4]
 800a5f4:	6818      	ldr	r0, [r3, #0]
 800a5f6:	683b      	ldr	r3, [r7, #0]
 800a5f8:	6899      	ldr	r1, [r3, #8]
 800a5fa:	683b      	ldr	r3, [r7, #0]
 800a5fc:	691b      	ldr	r3, [r3, #16]
 800a5fe:	461a      	mov	r2, r3
 800a600:	f000 f81e 	bl	800a640 <TIM_TI1_ConfigInputStage>
      break;
 800a604:	e00a      	b.n	800a61c <TIM_SlaveTimer_SetConfig+0x154>
      TIM_TI2_ConfigInputStage(htim->Instance,
 800a606:	687b      	ldr	r3, [r7, #4]
 800a608:	6818      	ldr	r0, [r3, #0]
 800a60a:	683b      	ldr	r3, [r7, #0]
 800a60c:	6899      	ldr	r1, [r3, #8]
 800a60e:	683b      	ldr	r3, [r7, #0]
 800a610:	691b      	ldr	r3, [r3, #16]
 800a612:	461a      	mov	r2, r3
 800a614:	f000 f843 	bl	800a69e <TIM_TI2_ConfigInputStage>
      break;
 800a618:	e000      	b.n	800a61c <TIM_SlaveTimer_SetConfig+0x154>
      break;
 800a61a:	bf00      	nop
  }
  return HAL_OK;
 800a61c:	2300      	movs	r3, #0
}
 800a61e:	4618      	mov	r0, r3
 800a620:	3718      	adds	r7, #24
 800a622:	46bd      	mov	sp, r7
 800a624:	bd80      	pop	{r7, pc}
 800a626:	bf00      	nop
 800a628:	00100030 	.word	0x00100030
 800a62c:	00100020 	.word	0x00100020
 800a630:	00100050 	.word	0x00100050
 800a634:	00100040 	.word	0x00100040
 800a638:	00100060 	.word	0x00100060
 800a63c:	00100070 	.word	0x00100070

0800a640 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800a640:	b480      	push	{r7}
 800a642:	b087      	sub	sp, #28
 800a644:	af00      	add	r7, sp, #0
 800a646:	60f8      	str	r0, [r7, #12]
 800a648:	60b9      	str	r1, [r7, #8]
 800a64a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800a64c:	68fb      	ldr	r3, [r7, #12]
 800a64e:	6a1b      	ldr	r3, [r3, #32]
 800a650:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800a652:	68fb      	ldr	r3, [r7, #12]
 800a654:	6a1b      	ldr	r3, [r3, #32]
 800a656:	f023 0201 	bic.w	r2, r3, #1
 800a65a:	68fb      	ldr	r3, [r7, #12]
 800a65c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800a65e:	68fb      	ldr	r3, [r7, #12]
 800a660:	699b      	ldr	r3, [r3, #24]
 800a662:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800a664:	693b      	ldr	r3, [r7, #16]
 800a666:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800a66a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800a66c:	687b      	ldr	r3, [r7, #4]
 800a66e:	011b      	lsls	r3, r3, #4
 800a670:	693a      	ldr	r2, [r7, #16]
 800a672:	4313      	orrs	r3, r2
 800a674:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800a676:	697b      	ldr	r3, [r7, #20]
 800a678:	f023 030a 	bic.w	r3, r3, #10
 800a67c:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800a67e:	697a      	ldr	r2, [r7, #20]
 800a680:	68bb      	ldr	r3, [r7, #8]
 800a682:	4313      	orrs	r3, r2
 800a684:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800a686:	68fb      	ldr	r3, [r7, #12]
 800a688:	693a      	ldr	r2, [r7, #16]
 800a68a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800a68c:	68fb      	ldr	r3, [r7, #12]
 800a68e:	697a      	ldr	r2, [r7, #20]
 800a690:	621a      	str	r2, [r3, #32]
}
 800a692:	bf00      	nop
 800a694:	371c      	adds	r7, #28
 800a696:	46bd      	mov	sp, r7
 800a698:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a69c:	4770      	bx	lr

0800a69e <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800a69e:	b480      	push	{r7}
 800a6a0:	b087      	sub	sp, #28
 800a6a2:	af00      	add	r7, sp, #0
 800a6a4:	60f8      	str	r0, [r7, #12]
 800a6a6:	60b9      	str	r1, [r7, #8]
 800a6a8:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800a6aa:	68fb      	ldr	r3, [r7, #12]
 800a6ac:	6a1b      	ldr	r3, [r3, #32]
 800a6ae:	f023 0210 	bic.w	r2, r3, #16
 800a6b2:	68fb      	ldr	r3, [r7, #12]
 800a6b4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800a6b6:	68fb      	ldr	r3, [r7, #12]
 800a6b8:	699b      	ldr	r3, [r3, #24]
 800a6ba:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800a6bc:	68fb      	ldr	r3, [r7, #12]
 800a6be:	6a1b      	ldr	r3, [r3, #32]
 800a6c0:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800a6c2:	697b      	ldr	r3, [r7, #20]
 800a6c4:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800a6c8:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800a6ca:	687b      	ldr	r3, [r7, #4]
 800a6cc:	031b      	lsls	r3, r3, #12
 800a6ce:	697a      	ldr	r2, [r7, #20]
 800a6d0:	4313      	orrs	r3, r2
 800a6d2:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800a6d4:	693b      	ldr	r3, [r7, #16]
 800a6d6:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800a6da:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 800a6dc:	68bb      	ldr	r3, [r7, #8]
 800a6de:	011b      	lsls	r3, r3, #4
 800a6e0:	693a      	ldr	r2, [r7, #16]
 800a6e2:	4313      	orrs	r3, r2
 800a6e4:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800a6e6:	68fb      	ldr	r3, [r7, #12]
 800a6e8:	697a      	ldr	r2, [r7, #20]
 800a6ea:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800a6ec:	68fb      	ldr	r3, [r7, #12]
 800a6ee:	693a      	ldr	r2, [r7, #16]
 800a6f0:	621a      	str	r2, [r3, #32]
}
 800a6f2:	bf00      	nop
 800a6f4:	371c      	adds	r7, #28
 800a6f6:	46bd      	mov	sp, r7
 800a6f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a6fc:	4770      	bx	lr

0800a6fe <TIM_ITRx_SetConfig>:
  *       (*)  Value not defined in all devices.
  *
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800a6fe:	b480      	push	{r7}
 800a700:	b085      	sub	sp, #20
 800a702:	af00      	add	r7, sp, #0
 800a704:	6078      	str	r0, [r7, #4]
 800a706:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800a708:	687b      	ldr	r3, [r7, #4]
 800a70a:	689b      	ldr	r3, [r3, #8]
 800a70c:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800a70e:	68fb      	ldr	r3, [r7, #12]
 800a710:	f423 1340 	bic.w	r3, r3, #3145728	; 0x300000
 800a714:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800a718:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800a71a:	683a      	ldr	r2, [r7, #0]
 800a71c:	68fb      	ldr	r3, [r7, #12]
 800a71e:	4313      	orrs	r3, r2
 800a720:	f043 0307 	orr.w	r3, r3, #7
 800a724:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800a726:	687b      	ldr	r3, [r7, #4]
 800a728:	68fa      	ldr	r2, [r7, #12]
 800a72a:	609a      	str	r2, [r3, #8]
}
 800a72c:	bf00      	nop
 800a72e:	3714      	adds	r7, #20
 800a730:	46bd      	mov	sp, r7
 800a732:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a736:	4770      	bx	lr

0800a738 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800a738:	b480      	push	{r7}
 800a73a:	b087      	sub	sp, #28
 800a73c:	af00      	add	r7, sp, #0
 800a73e:	60f8      	str	r0, [r7, #12]
 800a740:	60b9      	str	r1, [r7, #8]
 800a742:	607a      	str	r2, [r7, #4]
 800a744:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800a746:	68fb      	ldr	r3, [r7, #12]
 800a748:	689b      	ldr	r3, [r3, #8]
 800a74a:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800a74c:	697b      	ldr	r3, [r7, #20]
 800a74e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800a752:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800a754:	683b      	ldr	r3, [r7, #0]
 800a756:	021a      	lsls	r2, r3, #8
 800a758:	687b      	ldr	r3, [r7, #4]
 800a75a:	431a      	orrs	r2, r3
 800a75c:	68bb      	ldr	r3, [r7, #8]
 800a75e:	4313      	orrs	r3, r2
 800a760:	697a      	ldr	r2, [r7, #20]
 800a762:	4313      	orrs	r3, r2
 800a764:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800a766:	68fb      	ldr	r3, [r7, #12]
 800a768:	697a      	ldr	r2, [r7, #20]
 800a76a:	609a      	str	r2, [r3, #8]
}
 800a76c:	bf00      	nop
 800a76e:	371c      	adds	r7, #28
 800a770:	46bd      	mov	sp, r7
 800a772:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a776:	4770      	bx	lr

0800a778 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 800a778:	b480      	push	{r7}
 800a77a:	b085      	sub	sp, #20
 800a77c:	af00      	add	r7, sp, #0
 800a77e:	6078      	str	r0, [r7, #4]
 800a780:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800a782:	687b      	ldr	r3, [r7, #4]
 800a784:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800a788:	2b01      	cmp	r3, #1
 800a78a:	d101      	bne.n	800a790 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800a78c:	2302      	movs	r3, #2
 800a78e:	e074      	b.n	800a87a <HAL_TIMEx_MasterConfigSynchronization+0x102>
 800a790:	687b      	ldr	r3, [r7, #4]
 800a792:	2201      	movs	r2, #1
 800a794:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800a798:	687b      	ldr	r3, [r7, #4]
 800a79a:	2202      	movs	r2, #2
 800a79c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800a7a0:	687b      	ldr	r3, [r7, #4]
 800a7a2:	681b      	ldr	r3, [r3, #0]
 800a7a4:	685b      	ldr	r3, [r3, #4]
 800a7a6:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800a7a8:	687b      	ldr	r3, [r7, #4]
 800a7aa:	681b      	ldr	r3, [r3, #0]
 800a7ac:	689b      	ldr	r3, [r3, #8]
 800a7ae:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 800a7b0:	687b      	ldr	r3, [r7, #4]
 800a7b2:	681b      	ldr	r3, [r3, #0]
 800a7b4:	4a34      	ldr	r2, [pc, #208]	; (800a888 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 800a7b6:	4293      	cmp	r3, r2
 800a7b8:	d009      	beq.n	800a7ce <HAL_TIMEx_MasterConfigSynchronization+0x56>
 800a7ba:	687b      	ldr	r3, [r7, #4]
 800a7bc:	681b      	ldr	r3, [r3, #0]
 800a7be:	4a33      	ldr	r2, [pc, #204]	; (800a88c <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 800a7c0:	4293      	cmp	r3, r2
 800a7c2:	d004      	beq.n	800a7ce <HAL_TIMEx_MasterConfigSynchronization+0x56>
 800a7c4:	687b      	ldr	r3, [r7, #4]
 800a7c6:	681b      	ldr	r3, [r3, #0]
 800a7c8:	4a31      	ldr	r2, [pc, #196]	; (800a890 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 800a7ca:	4293      	cmp	r3, r2
 800a7cc:	d108      	bne.n	800a7e0 <HAL_TIMEx_MasterConfigSynchronization+0x68>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 800a7ce:	68fb      	ldr	r3, [r7, #12]
 800a7d0:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 800a7d4:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800a7d6:	683b      	ldr	r3, [r7, #0]
 800a7d8:	685b      	ldr	r3, [r3, #4]
 800a7da:	68fa      	ldr	r2, [r7, #12]
 800a7dc:	4313      	orrs	r3, r2
 800a7de:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800a7e0:	68fb      	ldr	r3, [r7, #12]
 800a7e2:	f023 7300 	bic.w	r3, r3, #33554432	; 0x2000000
 800a7e6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800a7ea:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800a7ec:	683b      	ldr	r3, [r7, #0]
 800a7ee:	681b      	ldr	r3, [r3, #0]
 800a7f0:	68fa      	ldr	r2, [r7, #12]
 800a7f2:	4313      	orrs	r3, r2
 800a7f4:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800a7f6:	687b      	ldr	r3, [r7, #4]
 800a7f8:	681b      	ldr	r3, [r3, #0]
 800a7fa:	68fa      	ldr	r2, [r7, #12]
 800a7fc:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800a7fe:	687b      	ldr	r3, [r7, #4]
 800a800:	681b      	ldr	r3, [r3, #0]
 800a802:	4a21      	ldr	r2, [pc, #132]	; (800a888 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 800a804:	4293      	cmp	r3, r2
 800a806:	d022      	beq.n	800a84e <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 800a808:	687b      	ldr	r3, [r7, #4]
 800a80a:	681b      	ldr	r3, [r3, #0]
 800a80c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800a810:	d01d      	beq.n	800a84e <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 800a812:	687b      	ldr	r3, [r7, #4]
 800a814:	681b      	ldr	r3, [r3, #0]
 800a816:	4a1f      	ldr	r2, [pc, #124]	; (800a894 <HAL_TIMEx_MasterConfigSynchronization+0x11c>)
 800a818:	4293      	cmp	r3, r2
 800a81a:	d018      	beq.n	800a84e <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 800a81c:	687b      	ldr	r3, [r7, #4]
 800a81e:	681b      	ldr	r3, [r3, #0]
 800a820:	4a1d      	ldr	r2, [pc, #116]	; (800a898 <HAL_TIMEx_MasterConfigSynchronization+0x120>)
 800a822:	4293      	cmp	r3, r2
 800a824:	d013      	beq.n	800a84e <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 800a826:	687b      	ldr	r3, [r7, #4]
 800a828:	681b      	ldr	r3, [r3, #0]
 800a82a:	4a1c      	ldr	r2, [pc, #112]	; (800a89c <HAL_TIMEx_MasterConfigSynchronization+0x124>)
 800a82c:	4293      	cmp	r3, r2
 800a82e:	d00e      	beq.n	800a84e <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 800a830:	687b      	ldr	r3, [r7, #4]
 800a832:	681b      	ldr	r3, [r3, #0]
 800a834:	4a15      	ldr	r2, [pc, #84]	; (800a88c <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 800a836:	4293      	cmp	r3, r2
 800a838:	d009      	beq.n	800a84e <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 800a83a:	687b      	ldr	r3, [r7, #4]
 800a83c:	681b      	ldr	r3, [r3, #0]
 800a83e:	4a18      	ldr	r2, [pc, #96]	; (800a8a0 <HAL_TIMEx_MasterConfigSynchronization+0x128>)
 800a840:	4293      	cmp	r3, r2
 800a842:	d004      	beq.n	800a84e <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 800a844:	687b      	ldr	r3, [r7, #4]
 800a846:	681b      	ldr	r3, [r3, #0]
 800a848:	4a11      	ldr	r2, [pc, #68]	; (800a890 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 800a84a:	4293      	cmp	r3, r2
 800a84c:	d10c      	bne.n	800a868 <HAL_TIMEx_MasterConfigSynchronization+0xf0>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800a84e:	68bb      	ldr	r3, [r7, #8]
 800a850:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800a854:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800a856:	683b      	ldr	r3, [r7, #0]
 800a858:	689b      	ldr	r3, [r3, #8]
 800a85a:	68ba      	ldr	r2, [r7, #8]
 800a85c:	4313      	orrs	r3, r2
 800a85e:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800a860:	687b      	ldr	r3, [r7, #4]
 800a862:	681b      	ldr	r3, [r3, #0]
 800a864:	68ba      	ldr	r2, [r7, #8]
 800a866:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800a868:	687b      	ldr	r3, [r7, #4]
 800a86a:	2201      	movs	r2, #1
 800a86c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800a870:	687b      	ldr	r3, [r7, #4]
 800a872:	2200      	movs	r2, #0
 800a874:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800a878:	2300      	movs	r3, #0
}
 800a87a:	4618      	mov	r0, r3
 800a87c:	3714      	adds	r7, #20
 800a87e:	46bd      	mov	sp, r7
 800a880:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a884:	4770      	bx	lr
 800a886:	bf00      	nop
 800a888:	40012c00 	.word	0x40012c00
 800a88c:	40013400 	.word	0x40013400
 800a890:	40015000 	.word	0x40015000
 800a894:	40000400 	.word	0x40000400
 800a898:	40000800 	.word	0x40000800
 800a89c:	40000c00 	.word	0x40000c00
 800a8a0:	40014000 	.word	0x40014000

0800a8a4 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 800a8a4:	b480      	push	{r7}
 800a8a6:	b085      	sub	sp, #20
 800a8a8:	af00      	add	r7, sp, #0
 800a8aa:	6078      	str	r0, [r7, #4]
 800a8ac:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 800a8ae:	2300      	movs	r3, #0
 800a8b0:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 800a8b2:	687b      	ldr	r3, [r7, #4]
 800a8b4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800a8b8:	2b01      	cmp	r3, #1
 800a8ba:	d101      	bne.n	800a8c0 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 800a8bc:	2302      	movs	r3, #2
 800a8be:	e096      	b.n	800a9ee <HAL_TIMEx_ConfigBreakDeadTime+0x14a>
 800a8c0:	687b      	ldr	r3, [r7, #4]
 800a8c2:	2201      	movs	r2, #1
 800a8c4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 800a8c8:	68fb      	ldr	r3, [r7, #12]
 800a8ca:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 800a8ce:	683b      	ldr	r3, [r7, #0]
 800a8d0:	68db      	ldr	r3, [r3, #12]
 800a8d2:	4313      	orrs	r3, r2
 800a8d4:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 800a8d6:	68fb      	ldr	r3, [r7, #12]
 800a8d8:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800a8dc:	683b      	ldr	r3, [r7, #0]
 800a8de:	689b      	ldr	r3, [r3, #8]
 800a8e0:	4313      	orrs	r3, r2
 800a8e2:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 800a8e4:	68fb      	ldr	r3, [r7, #12]
 800a8e6:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 800a8ea:	683b      	ldr	r3, [r7, #0]
 800a8ec:	685b      	ldr	r3, [r3, #4]
 800a8ee:	4313      	orrs	r3, r2
 800a8f0:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 800a8f2:	68fb      	ldr	r3, [r7, #12]
 800a8f4:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 800a8f8:	683b      	ldr	r3, [r7, #0]
 800a8fa:	681b      	ldr	r3, [r3, #0]
 800a8fc:	4313      	orrs	r3, r2
 800a8fe:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 800a900:	68fb      	ldr	r3, [r7, #12]
 800a902:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800a906:	683b      	ldr	r3, [r7, #0]
 800a908:	691b      	ldr	r3, [r3, #16]
 800a90a:	4313      	orrs	r3, r2
 800a90c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 800a90e:	68fb      	ldr	r3, [r7, #12]
 800a910:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 800a914:	683b      	ldr	r3, [r7, #0]
 800a916:	695b      	ldr	r3, [r3, #20]
 800a918:	4313      	orrs	r3, r2
 800a91a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 800a91c:	68fb      	ldr	r3, [r7, #12]
 800a91e:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 800a922:	683b      	ldr	r3, [r7, #0]
 800a924:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a926:	4313      	orrs	r3, r2
 800a928:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 800a92a:	68fb      	ldr	r3, [r7, #12]
 800a92c:	f423 2270 	bic.w	r2, r3, #983040	; 0xf0000
 800a930:	683b      	ldr	r3, [r7, #0]
 800a932:	699b      	ldr	r3, [r3, #24]
 800a934:	041b      	lsls	r3, r3, #16
 800a936:	4313      	orrs	r3, r2
 800a938:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_ADVANCED_INSTANCE(htim->Instance))
 800a93a:	687b      	ldr	r3, [r7, #4]
 800a93c:	681b      	ldr	r3, [r3, #0]
 800a93e:	4a2f      	ldr	r2, [pc, #188]	; (800a9fc <HAL_TIMEx_ConfigBreakDeadTime+0x158>)
 800a940:	4293      	cmp	r3, r2
 800a942:	d009      	beq.n	800a958 <HAL_TIMEx_ConfigBreakDeadTime+0xb4>
 800a944:	687b      	ldr	r3, [r7, #4]
 800a946:	681b      	ldr	r3, [r3, #0]
 800a948:	4a2d      	ldr	r2, [pc, #180]	; (800aa00 <HAL_TIMEx_ConfigBreakDeadTime+0x15c>)
 800a94a:	4293      	cmp	r3, r2
 800a94c:	d004      	beq.n	800a958 <HAL_TIMEx_ConfigBreakDeadTime+0xb4>
 800a94e:	687b      	ldr	r3, [r7, #4]
 800a950:	681b      	ldr	r3, [r3, #0]
 800a952:	4a2c      	ldr	r2, [pc, #176]	; (800aa04 <HAL_TIMEx_ConfigBreakDeadTime+0x160>)
 800a954:	4293      	cmp	r3, r2
 800a956:	d106      	bne.n	800a966 <HAL_TIMEx_ConfigBreakDeadTime+0xc2>
  {
    /* Check the parameters */
    assert_param(IS_TIM_BREAK_AFMODE(sBreakDeadTimeConfig->BreakAFMode));

    /* Set BREAK AF mode */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BKBID, sBreakDeadTimeConfig->BreakAFMode);
 800a958:	68fb      	ldr	r3, [r7, #12]
 800a95a:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 800a95e:	683b      	ldr	r3, [r7, #0]
 800a960:	69db      	ldr	r3, [r3, #28]
 800a962:	4313      	orrs	r3, r2
 800a964:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 800a966:	687b      	ldr	r3, [r7, #4]
 800a968:	681b      	ldr	r3, [r3, #0]
 800a96a:	4a24      	ldr	r2, [pc, #144]	; (800a9fc <HAL_TIMEx_ConfigBreakDeadTime+0x158>)
 800a96c:	4293      	cmp	r3, r2
 800a96e:	d009      	beq.n	800a984 <HAL_TIMEx_ConfigBreakDeadTime+0xe0>
 800a970:	687b      	ldr	r3, [r7, #4]
 800a972:	681b      	ldr	r3, [r3, #0]
 800a974:	4a22      	ldr	r2, [pc, #136]	; (800aa00 <HAL_TIMEx_ConfigBreakDeadTime+0x15c>)
 800a976:	4293      	cmp	r3, r2
 800a978:	d004      	beq.n	800a984 <HAL_TIMEx_ConfigBreakDeadTime+0xe0>
 800a97a:	687b      	ldr	r3, [r7, #4]
 800a97c:	681b      	ldr	r3, [r3, #0]
 800a97e:	4a21      	ldr	r2, [pc, #132]	; (800aa04 <HAL_TIMEx_ConfigBreakDeadTime+0x160>)
 800a980:	4293      	cmp	r3, r2
 800a982:	d12b      	bne.n	800a9dc <HAL_TIMEx_ConfigBreakDeadTime+0x138>
    assert_param(IS_TIM_BREAK2_STATE(sBreakDeadTimeConfig->Break2State));
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 800a984:	68fb      	ldr	r3, [r7, #12]
 800a986:	f423 0270 	bic.w	r2, r3, #15728640	; 0xf00000
 800a98a:	683b      	ldr	r3, [r7, #0]
 800a98c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a98e:	051b      	lsls	r3, r3, #20
 800a990:	4313      	orrs	r3, r2
 800a992:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 800a994:	68fb      	ldr	r3, [r7, #12]
 800a996:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 800a99a:	683b      	ldr	r3, [r7, #0]
 800a99c:	6a1b      	ldr	r3, [r3, #32]
 800a99e:	4313      	orrs	r3, r2
 800a9a0:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 800a9a2:	68fb      	ldr	r3, [r7, #12]
 800a9a4:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 800a9a8:	683b      	ldr	r3, [r7, #0]
 800a9aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a9ac:	4313      	orrs	r3, r2
 800a9ae:	60fb      	str	r3, [r7, #12]

    if (IS_TIM_ADVANCED_INSTANCE(htim->Instance))
 800a9b0:	687b      	ldr	r3, [r7, #4]
 800a9b2:	681b      	ldr	r3, [r3, #0]
 800a9b4:	4a11      	ldr	r2, [pc, #68]	; (800a9fc <HAL_TIMEx_ConfigBreakDeadTime+0x158>)
 800a9b6:	4293      	cmp	r3, r2
 800a9b8:	d009      	beq.n	800a9ce <HAL_TIMEx_ConfigBreakDeadTime+0x12a>
 800a9ba:	687b      	ldr	r3, [r7, #4]
 800a9bc:	681b      	ldr	r3, [r3, #0]
 800a9be:	4a10      	ldr	r2, [pc, #64]	; (800aa00 <HAL_TIMEx_ConfigBreakDeadTime+0x15c>)
 800a9c0:	4293      	cmp	r3, r2
 800a9c2:	d004      	beq.n	800a9ce <HAL_TIMEx_ConfigBreakDeadTime+0x12a>
 800a9c4:	687b      	ldr	r3, [r7, #4]
 800a9c6:	681b      	ldr	r3, [r3, #0]
 800a9c8:	4a0e      	ldr	r2, [pc, #56]	; (800aa04 <HAL_TIMEx_ConfigBreakDeadTime+0x160>)
 800a9ca:	4293      	cmp	r3, r2
 800a9cc:	d106      	bne.n	800a9dc <HAL_TIMEx_ConfigBreakDeadTime+0x138>
    {
      /* Check the parameters */
      assert_param(IS_TIM_BREAK2_AFMODE(sBreakDeadTimeConfig->Break2AFMode));

      /* Set BREAK2 AF mode */
      MODIFY_REG(tmpbdtr, TIM_BDTR_BK2BID, sBreakDeadTimeConfig->Break2AFMode);
 800a9ce:	68fb      	ldr	r3, [r7, #12]
 800a9d0:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
 800a9d4:	683b      	ldr	r3, [r7, #0]
 800a9d6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a9d8:	4313      	orrs	r3, r2
 800a9da:	60fb      	str	r3, [r7, #12]
    }
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 800a9dc:	687b      	ldr	r3, [r7, #4]
 800a9de:	681b      	ldr	r3, [r3, #0]
 800a9e0:	68fa      	ldr	r2, [r7, #12]
 800a9e2:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 800a9e4:	687b      	ldr	r3, [r7, #4]
 800a9e6:	2200      	movs	r2, #0
 800a9e8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800a9ec:	2300      	movs	r3, #0
}
 800a9ee:	4618      	mov	r0, r3
 800a9f0:	3714      	adds	r7, #20
 800a9f2:	46bd      	mov	sp, r7
 800a9f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a9f8:	4770      	bx	lr
 800a9fa:	bf00      	nop
 800a9fc:	40012c00 	.word	0x40012c00
 800aa00:	40013400 	.word	0x40013400
 800aa04:	40015000 	.word	0x40015000

0800aa08 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800aa08:	b480      	push	{r7}
 800aa0a:	b083      	sub	sp, #12
 800aa0c:	af00      	add	r7, sp, #0
 800aa0e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800aa10:	bf00      	nop
 800aa12:	370c      	adds	r7, #12
 800aa14:	46bd      	mov	sp, r7
 800aa16:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa1a:	4770      	bx	lr

0800aa1c <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800aa1c:	b480      	push	{r7}
 800aa1e:	b083      	sub	sp, #12
 800aa20:	af00      	add	r7, sp, #0
 800aa22:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800aa24:	bf00      	nop
 800aa26:	370c      	adds	r7, #12
 800aa28:	46bd      	mov	sp, r7
 800aa2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa2e:	4770      	bx	lr

0800aa30 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 800aa30:	b480      	push	{r7}
 800aa32:	b083      	sub	sp, #12
 800aa34:	af00      	add	r7, sp, #0
 800aa36:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 800aa38:	bf00      	nop
 800aa3a:	370c      	adds	r7, #12
 800aa3c:	46bd      	mov	sp, r7
 800aa3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa42:	4770      	bx	lr

0800aa44 <HAL_TIMEx_EncoderIndexCallback>:
  * @brief  Encoder index callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_EncoderIndexCallback(TIM_HandleTypeDef *htim)
{
 800aa44:	b480      	push	{r7}
 800aa46:	b083      	sub	sp, #12
 800aa48:	af00      	add	r7, sp, #0
 800aa4a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_EncoderIndexCallback could be implemented in the user file
   */
}
 800aa4c:	bf00      	nop
 800aa4e:	370c      	adds	r7, #12
 800aa50:	46bd      	mov	sp, r7
 800aa52:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa56:	4770      	bx	lr

0800aa58 <HAL_TIMEx_DirectionChangeCallback>:
  * @brief  Direction change callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_DirectionChangeCallback(TIM_HandleTypeDef *htim)
{
 800aa58:	b480      	push	{r7}
 800aa5a:	b083      	sub	sp, #12
 800aa5c:	af00      	add	r7, sp, #0
 800aa5e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_DirectionChangeCallback could be implemented in the user file
   */
}
 800aa60:	bf00      	nop
 800aa62:	370c      	adds	r7, #12
 800aa64:	46bd      	mov	sp, r7
 800aa66:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa6a:	4770      	bx	lr

0800aa6c <HAL_TIMEx_IndexErrorCallback>:
  * @brief  Index error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_IndexErrorCallback(TIM_HandleTypeDef *htim)
{
 800aa6c:	b480      	push	{r7}
 800aa6e:	b083      	sub	sp, #12
 800aa70:	af00      	add	r7, sp, #0
 800aa72:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_IndexErrorCallback could be implemented in the user file
   */
}
 800aa74:	bf00      	nop
 800aa76:	370c      	adds	r7, #12
 800aa78:	46bd      	mov	sp, r7
 800aa7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa7e:	4770      	bx	lr

0800aa80 <HAL_TIMEx_TransitionErrorCallback>:
  * @brief  Transition error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_TransitionErrorCallback(TIM_HandleTypeDef *htim)
{
 800aa80:	b480      	push	{r7}
 800aa82:	b083      	sub	sp, #12
 800aa84:	af00      	add	r7, sp, #0
 800aa86:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_TransitionErrorCallback could be implemented in the user file
   */
}
 800aa88:	bf00      	nop
 800aa8a:	370c      	adds	r7, #12
 800aa8c:	46bd      	mov	sp, r7
 800aa8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa92:	4770      	bx	lr

0800aa94 <LL_EXTI_EnableIT_0_31>:
{
 800aa94:	b480      	push	{r7}
 800aa96:	b083      	sub	sp, #12
 800aa98:	af00      	add	r7, sp, #0
 800aa9a:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->IMR1, ExtiLine);
 800aa9c:	4b05      	ldr	r3, [pc, #20]	; (800aab4 <LL_EXTI_EnableIT_0_31+0x20>)
 800aa9e:	681a      	ldr	r2, [r3, #0]
 800aaa0:	4904      	ldr	r1, [pc, #16]	; (800aab4 <LL_EXTI_EnableIT_0_31+0x20>)
 800aaa2:	687b      	ldr	r3, [r7, #4]
 800aaa4:	4313      	orrs	r3, r2
 800aaa6:	600b      	str	r3, [r1, #0]
}
 800aaa8:	bf00      	nop
 800aaaa:	370c      	adds	r7, #12
 800aaac:	46bd      	mov	sp, r7
 800aaae:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aab2:	4770      	bx	lr
 800aab4:	40010400 	.word	0x40010400

0800aab8 <LL_EXTI_EnableIT_32_63>:
{
 800aab8:	b480      	push	{r7}
 800aaba:	b083      	sub	sp, #12
 800aabc:	af00      	add	r7, sp, #0
 800aabe:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->IMR2, ExtiLine);
 800aac0:	4b05      	ldr	r3, [pc, #20]	; (800aad8 <LL_EXTI_EnableIT_32_63+0x20>)
 800aac2:	6a1a      	ldr	r2, [r3, #32]
 800aac4:	4904      	ldr	r1, [pc, #16]	; (800aad8 <LL_EXTI_EnableIT_32_63+0x20>)
 800aac6:	687b      	ldr	r3, [r7, #4]
 800aac8:	4313      	orrs	r3, r2
 800aaca:	620b      	str	r3, [r1, #32]
}
 800aacc:	bf00      	nop
 800aace:	370c      	adds	r7, #12
 800aad0:	46bd      	mov	sp, r7
 800aad2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aad6:	4770      	bx	lr
 800aad8:	40010400 	.word	0x40010400

0800aadc <LL_EXTI_DisableIT_0_31>:
{
 800aadc:	b480      	push	{r7}
 800aade:	b083      	sub	sp, #12
 800aae0:	af00      	add	r7, sp, #0
 800aae2:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->IMR1, ExtiLine);
 800aae4:	4b06      	ldr	r3, [pc, #24]	; (800ab00 <LL_EXTI_DisableIT_0_31+0x24>)
 800aae6:	681a      	ldr	r2, [r3, #0]
 800aae8:	687b      	ldr	r3, [r7, #4]
 800aaea:	43db      	mvns	r3, r3
 800aaec:	4904      	ldr	r1, [pc, #16]	; (800ab00 <LL_EXTI_DisableIT_0_31+0x24>)
 800aaee:	4013      	ands	r3, r2
 800aaf0:	600b      	str	r3, [r1, #0]
}
 800aaf2:	bf00      	nop
 800aaf4:	370c      	adds	r7, #12
 800aaf6:	46bd      	mov	sp, r7
 800aaf8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aafc:	4770      	bx	lr
 800aafe:	bf00      	nop
 800ab00:	40010400 	.word	0x40010400

0800ab04 <LL_EXTI_DisableIT_32_63>:
{
 800ab04:	b480      	push	{r7}
 800ab06:	b083      	sub	sp, #12
 800ab08:	af00      	add	r7, sp, #0
 800ab0a:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->IMR2, ExtiLine);
 800ab0c:	4b06      	ldr	r3, [pc, #24]	; (800ab28 <LL_EXTI_DisableIT_32_63+0x24>)
 800ab0e:	6a1a      	ldr	r2, [r3, #32]
 800ab10:	687b      	ldr	r3, [r7, #4]
 800ab12:	43db      	mvns	r3, r3
 800ab14:	4904      	ldr	r1, [pc, #16]	; (800ab28 <LL_EXTI_DisableIT_32_63+0x24>)
 800ab16:	4013      	ands	r3, r2
 800ab18:	620b      	str	r3, [r1, #32]
}
 800ab1a:	bf00      	nop
 800ab1c:	370c      	adds	r7, #12
 800ab1e:	46bd      	mov	sp, r7
 800ab20:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab24:	4770      	bx	lr
 800ab26:	bf00      	nop
 800ab28:	40010400 	.word	0x40010400

0800ab2c <LL_EXTI_EnableEvent_0_31>:
{
 800ab2c:	b480      	push	{r7}
 800ab2e:	b083      	sub	sp, #12
 800ab30:	af00      	add	r7, sp, #0
 800ab32:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->EMR1, ExtiLine);
 800ab34:	4b05      	ldr	r3, [pc, #20]	; (800ab4c <LL_EXTI_EnableEvent_0_31+0x20>)
 800ab36:	685a      	ldr	r2, [r3, #4]
 800ab38:	4904      	ldr	r1, [pc, #16]	; (800ab4c <LL_EXTI_EnableEvent_0_31+0x20>)
 800ab3a:	687b      	ldr	r3, [r7, #4]
 800ab3c:	4313      	orrs	r3, r2
 800ab3e:	604b      	str	r3, [r1, #4]
}
 800ab40:	bf00      	nop
 800ab42:	370c      	adds	r7, #12
 800ab44:	46bd      	mov	sp, r7
 800ab46:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab4a:	4770      	bx	lr
 800ab4c:	40010400 	.word	0x40010400

0800ab50 <LL_EXTI_EnableEvent_32_63>:
{
 800ab50:	b480      	push	{r7}
 800ab52:	b083      	sub	sp, #12
 800ab54:	af00      	add	r7, sp, #0
 800ab56:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->EMR2, ExtiLine);
 800ab58:	4b05      	ldr	r3, [pc, #20]	; (800ab70 <LL_EXTI_EnableEvent_32_63+0x20>)
 800ab5a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800ab5c:	4904      	ldr	r1, [pc, #16]	; (800ab70 <LL_EXTI_EnableEvent_32_63+0x20>)
 800ab5e:	687b      	ldr	r3, [r7, #4]
 800ab60:	4313      	orrs	r3, r2
 800ab62:	624b      	str	r3, [r1, #36]	; 0x24
}
 800ab64:	bf00      	nop
 800ab66:	370c      	adds	r7, #12
 800ab68:	46bd      	mov	sp, r7
 800ab6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab6e:	4770      	bx	lr
 800ab70:	40010400 	.word	0x40010400

0800ab74 <LL_EXTI_DisableEvent_0_31>:
{
 800ab74:	b480      	push	{r7}
 800ab76:	b083      	sub	sp, #12
 800ab78:	af00      	add	r7, sp, #0
 800ab7a:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->EMR1, ExtiLine);
 800ab7c:	4b06      	ldr	r3, [pc, #24]	; (800ab98 <LL_EXTI_DisableEvent_0_31+0x24>)
 800ab7e:	685a      	ldr	r2, [r3, #4]
 800ab80:	687b      	ldr	r3, [r7, #4]
 800ab82:	43db      	mvns	r3, r3
 800ab84:	4904      	ldr	r1, [pc, #16]	; (800ab98 <LL_EXTI_DisableEvent_0_31+0x24>)
 800ab86:	4013      	ands	r3, r2
 800ab88:	604b      	str	r3, [r1, #4]
}
 800ab8a:	bf00      	nop
 800ab8c:	370c      	adds	r7, #12
 800ab8e:	46bd      	mov	sp, r7
 800ab90:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab94:	4770      	bx	lr
 800ab96:	bf00      	nop
 800ab98:	40010400 	.word	0x40010400

0800ab9c <LL_EXTI_DisableEvent_32_63>:
{
 800ab9c:	b480      	push	{r7}
 800ab9e:	b083      	sub	sp, #12
 800aba0:	af00      	add	r7, sp, #0
 800aba2:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->EMR2, ExtiLine);
 800aba4:	4b06      	ldr	r3, [pc, #24]	; (800abc0 <LL_EXTI_DisableEvent_32_63+0x24>)
 800aba6:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800aba8:	687b      	ldr	r3, [r7, #4]
 800abaa:	43db      	mvns	r3, r3
 800abac:	4904      	ldr	r1, [pc, #16]	; (800abc0 <LL_EXTI_DisableEvent_32_63+0x24>)
 800abae:	4013      	ands	r3, r2
 800abb0:	624b      	str	r3, [r1, #36]	; 0x24
}
 800abb2:	bf00      	nop
 800abb4:	370c      	adds	r7, #12
 800abb6:	46bd      	mov	sp, r7
 800abb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800abbc:	4770      	bx	lr
 800abbe:	bf00      	nop
 800abc0:	40010400 	.word	0x40010400

0800abc4 <LL_EXTI_EnableRisingTrig_0_31>:
{
 800abc4:	b480      	push	{r7}
 800abc6:	b083      	sub	sp, #12
 800abc8:	af00      	add	r7, sp, #0
 800abca:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->RTSR1, ExtiLine);
 800abcc:	4b05      	ldr	r3, [pc, #20]	; (800abe4 <LL_EXTI_EnableRisingTrig_0_31+0x20>)
 800abce:	689a      	ldr	r2, [r3, #8]
 800abd0:	4904      	ldr	r1, [pc, #16]	; (800abe4 <LL_EXTI_EnableRisingTrig_0_31+0x20>)
 800abd2:	687b      	ldr	r3, [r7, #4]
 800abd4:	4313      	orrs	r3, r2
 800abd6:	608b      	str	r3, [r1, #8]
}
 800abd8:	bf00      	nop
 800abda:	370c      	adds	r7, #12
 800abdc:	46bd      	mov	sp, r7
 800abde:	f85d 7b04 	ldr.w	r7, [sp], #4
 800abe2:	4770      	bx	lr
 800abe4:	40010400 	.word	0x40010400

0800abe8 <LL_EXTI_EnableRisingTrig_32_63>:
{
 800abe8:	b480      	push	{r7}
 800abea:	b083      	sub	sp, #12
 800abec:	af00      	add	r7, sp, #0
 800abee:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->RTSR2, ExtiLine);
 800abf0:	4b05      	ldr	r3, [pc, #20]	; (800ac08 <LL_EXTI_EnableRisingTrig_32_63+0x20>)
 800abf2:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800abf4:	4904      	ldr	r1, [pc, #16]	; (800ac08 <LL_EXTI_EnableRisingTrig_32_63+0x20>)
 800abf6:	687b      	ldr	r3, [r7, #4]
 800abf8:	4313      	orrs	r3, r2
 800abfa:	628b      	str	r3, [r1, #40]	; 0x28
}
 800abfc:	bf00      	nop
 800abfe:	370c      	adds	r7, #12
 800ac00:	46bd      	mov	sp, r7
 800ac02:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac06:	4770      	bx	lr
 800ac08:	40010400 	.word	0x40010400

0800ac0c <LL_EXTI_DisableRisingTrig_0_31>:
{
 800ac0c:	b480      	push	{r7}
 800ac0e:	b083      	sub	sp, #12
 800ac10:	af00      	add	r7, sp, #0
 800ac12:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->RTSR1, ExtiLine);
 800ac14:	4b06      	ldr	r3, [pc, #24]	; (800ac30 <LL_EXTI_DisableRisingTrig_0_31+0x24>)
 800ac16:	689a      	ldr	r2, [r3, #8]
 800ac18:	687b      	ldr	r3, [r7, #4]
 800ac1a:	43db      	mvns	r3, r3
 800ac1c:	4904      	ldr	r1, [pc, #16]	; (800ac30 <LL_EXTI_DisableRisingTrig_0_31+0x24>)
 800ac1e:	4013      	ands	r3, r2
 800ac20:	608b      	str	r3, [r1, #8]
}
 800ac22:	bf00      	nop
 800ac24:	370c      	adds	r7, #12
 800ac26:	46bd      	mov	sp, r7
 800ac28:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac2c:	4770      	bx	lr
 800ac2e:	bf00      	nop
 800ac30:	40010400 	.word	0x40010400

0800ac34 <LL_EXTI_DisableRisingTrig_32_63>:
{
 800ac34:	b480      	push	{r7}
 800ac36:	b083      	sub	sp, #12
 800ac38:	af00      	add	r7, sp, #0
 800ac3a:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->RTSR2, ExtiLine);
 800ac3c:	4b06      	ldr	r3, [pc, #24]	; (800ac58 <LL_EXTI_DisableRisingTrig_32_63+0x24>)
 800ac3e:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800ac40:	687b      	ldr	r3, [r7, #4]
 800ac42:	43db      	mvns	r3, r3
 800ac44:	4904      	ldr	r1, [pc, #16]	; (800ac58 <LL_EXTI_DisableRisingTrig_32_63+0x24>)
 800ac46:	4013      	ands	r3, r2
 800ac48:	628b      	str	r3, [r1, #40]	; 0x28
}
 800ac4a:	bf00      	nop
 800ac4c:	370c      	adds	r7, #12
 800ac4e:	46bd      	mov	sp, r7
 800ac50:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac54:	4770      	bx	lr
 800ac56:	bf00      	nop
 800ac58:	40010400 	.word	0x40010400

0800ac5c <LL_EXTI_EnableFallingTrig_0_31>:
{
 800ac5c:	b480      	push	{r7}
 800ac5e:	b083      	sub	sp, #12
 800ac60:	af00      	add	r7, sp, #0
 800ac62:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->FTSR1, ExtiLine);
 800ac64:	4b05      	ldr	r3, [pc, #20]	; (800ac7c <LL_EXTI_EnableFallingTrig_0_31+0x20>)
 800ac66:	68da      	ldr	r2, [r3, #12]
 800ac68:	4904      	ldr	r1, [pc, #16]	; (800ac7c <LL_EXTI_EnableFallingTrig_0_31+0x20>)
 800ac6a:	687b      	ldr	r3, [r7, #4]
 800ac6c:	4313      	orrs	r3, r2
 800ac6e:	60cb      	str	r3, [r1, #12]
}
 800ac70:	bf00      	nop
 800ac72:	370c      	adds	r7, #12
 800ac74:	46bd      	mov	sp, r7
 800ac76:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac7a:	4770      	bx	lr
 800ac7c:	40010400 	.word	0x40010400

0800ac80 <LL_EXTI_EnableFallingTrig_32_63>:
{
 800ac80:	b480      	push	{r7}
 800ac82:	b083      	sub	sp, #12
 800ac84:	af00      	add	r7, sp, #0
 800ac86:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->FTSR2, ExtiLine);
 800ac88:	4b05      	ldr	r3, [pc, #20]	; (800aca0 <LL_EXTI_EnableFallingTrig_32_63+0x20>)
 800ac8a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ac8c:	4904      	ldr	r1, [pc, #16]	; (800aca0 <LL_EXTI_EnableFallingTrig_32_63+0x20>)
 800ac8e:	687b      	ldr	r3, [r7, #4]
 800ac90:	4313      	orrs	r3, r2
 800ac92:	62cb      	str	r3, [r1, #44]	; 0x2c
}
 800ac94:	bf00      	nop
 800ac96:	370c      	adds	r7, #12
 800ac98:	46bd      	mov	sp, r7
 800ac9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac9e:	4770      	bx	lr
 800aca0:	40010400 	.word	0x40010400

0800aca4 <LL_EXTI_DisableFallingTrig_0_31>:
{
 800aca4:	b480      	push	{r7}
 800aca6:	b083      	sub	sp, #12
 800aca8:	af00      	add	r7, sp, #0
 800acaa:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->FTSR1, ExtiLine);
 800acac:	4b06      	ldr	r3, [pc, #24]	; (800acc8 <LL_EXTI_DisableFallingTrig_0_31+0x24>)
 800acae:	68da      	ldr	r2, [r3, #12]
 800acb0:	687b      	ldr	r3, [r7, #4]
 800acb2:	43db      	mvns	r3, r3
 800acb4:	4904      	ldr	r1, [pc, #16]	; (800acc8 <LL_EXTI_DisableFallingTrig_0_31+0x24>)
 800acb6:	4013      	ands	r3, r2
 800acb8:	60cb      	str	r3, [r1, #12]
}
 800acba:	bf00      	nop
 800acbc:	370c      	adds	r7, #12
 800acbe:	46bd      	mov	sp, r7
 800acc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800acc4:	4770      	bx	lr
 800acc6:	bf00      	nop
 800acc8:	40010400 	.word	0x40010400

0800accc <LL_EXTI_DisableFallingTrig_32_63>:
{
 800accc:	b480      	push	{r7}
 800acce:	b083      	sub	sp, #12
 800acd0:	af00      	add	r7, sp, #0
 800acd2:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->FTSR2, ExtiLine);
 800acd4:	4b06      	ldr	r3, [pc, #24]	; (800acf0 <LL_EXTI_DisableFallingTrig_32_63+0x24>)
 800acd6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800acd8:	687b      	ldr	r3, [r7, #4]
 800acda:	43db      	mvns	r3, r3
 800acdc:	4904      	ldr	r1, [pc, #16]	; (800acf0 <LL_EXTI_DisableFallingTrig_32_63+0x24>)
 800acde:	4013      	ands	r3, r2
 800ace0:	62cb      	str	r3, [r1, #44]	; 0x2c
}
 800ace2:	bf00      	nop
 800ace4:	370c      	adds	r7, #12
 800ace6:	46bd      	mov	sp, r7
 800ace8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800acec:	4770      	bx	lr
 800acee:	bf00      	nop
 800acf0:	40010400 	.word	0x40010400

0800acf4 <LL_EXTI_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - 0x00: EXTI registers are initialized
  *          - any other calue : wrong configuration
  */
uint32_t LL_EXTI_Init(LL_EXTI_InitTypeDef *EXTI_InitStruct)
{
 800acf4:	b580      	push	{r7, lr}
 800acf6:	b084      	sub	sp, #16
 800acf8:	af00      	add	r7, sp, #0
 800acfa:	6078      	str	r0, [r7, #4]
  uint32_t status = 0x00u;
 800acfc:	2300      	movs	r3, #0
 800acfe:	60fb      	str	r3, [r7, #12]
  assert_param(IS_LL_EXTI_LINE_32_63(EXTI_InitStruct->Line_32_63));
  assert_param(IS_FUNCTIONAL_STATE(EXTI_InitStruct->LineCommand));
  assert_param(IS_LL_EXTI_MODE(EXTI_InitStruct->Mode));

  /* ENABLE LineCommand */
  if (EXTI_InitStruct->LineCommand != DISABLE)
 800ad00:	687b      	ldr	r3, [r7, #4]
 800ad02:	7a1b      	ldrb	r3, [r3, #8]
 800ad04:	2b00      	cmp	r3, #0
 800ad06:	f000 80c8 	beq.w	800ae9a <LL_EXTI_Init+0x1a6>
  {
    assert_param(IS_LL_EXTI_TRIGGER(EXTI_InitStruct->Trigger));

    /* Configure EXTI Lines in range from 0 to 31 */
    if (EXTI_InitStruct->Line_0_31 != LL_EXTI_LINE_NONE)
 800ad0a:	687b      	ldr	r3, [r7, #4]
 800ad0c:	681b      	ldr	r3, [r3, #0]
 800ad0e:	2b00      	cmp	r3, #0
 800ad10:	d05d      	beq.n	800adce <LL_EXTI_Init+0xda>
    {
      switch (EXTI_InitStruct->Mode)
 800ad12:	687b      	ldr	r3, [r7, #4]
 800ad14:	7a5b      	ldrb	r3, [r3, #9]
 800ad16:	2b01      	cmp	r3, #1
 800ad18:	d00e      	beq.n	800ad38 <LL_EXTI_Init+0x44>
 800ad1a:	2b02      	cmp	r3, #2
 800ad1c:	d017      	beq.n	800ad4e <LL_EXTI_Init+0x5a>
 800ad1e:	2b00      	cmp	r3, #0
 800ad20:	d120      	bne.n	800ad64 <LL_EXTI_Init+0x70>
      {
        case LL_EXTI_MODE_IT:
          /* First Disable Event on provided Lines */
          LL_EXTI_DisableEvent_0_31(EXTI_InitStruct->Line_0_31);
 800ad22:	687b      	ldr	r3, [r7, #4]
 800ad24:	681b      	ldr	r3, [r3, #0]
 800ad26:	4618      	mov	r0, r3
 800ad28:	f7ff ff24 	bl	800ab74 <LL_EXTI_DisableEvent_0_31>
          /* Then Enable IT on provided Lines */
          LL_EXTI_EnableIT_0_31(EXTI_InitStruct->Line_0_31);
 800ad2c:	687b      	ldr	r3, [r7, #4]
 800ad2e:	681b      	ldr	r3, [r3, #0]
 800ad30:	4618      	mov	r0, r3
 800ad32:	f7ff feaf 	bl	800aa94 <LL_EXTI_EnableIT_0_31>
          break;
 800ad36:	e018      	b.n	800ad6a <LL_EXTI_Init+0x76>
        case LL_EXTI_MODE_EVENT:
          /* First Disable IT on provided Lines */
          LL_EXTI_DisableIT_0_31(EXTI_InitStruct->Line_0_31);
 800ad38:	687b      	ldr	r3, [r7, #4]
 800ad3a:	681b      	ldr	r3, [r3, #0]
 800ad3c:	4618      	mov	r0, r3
 800ad3e:	f7ff fecd 	bl	800aadc <LL_EXTI_DisableIT_0_31>
          /* Then Enable Event on provided Lines */
          LL_EXTI_EnableEvent_0_31(EXTI_InitStruct->Line_0_31);
 800ad42:	687b      	ldr	r3, [r7, #4]
 800ad44:	681b      	ldr	r3, [r3, #0]
 800ad46:	4618      	mov	r0, r3
 800ad48:	f7ff fef0 	bl	800ab2c <LL_EXTI_EnableEvent_0_31>
          break;
 800ad4c:	e00d      	b.n	800ad6a <LL_EXTI_Init+0x76>
        case LL_EXTI_MODE_IT_EVENT:
          /* Directly Enable IT on provided Lines */
          LL_EXTI_EnableIT_0_31(EXTI_InitStruct->Line_0_31);
 800ad4e:	687b      	ldr	r3, [r7, #4]
 800ad50:	681b      	ldr	r3, [r3, #0]
 800ad52:	4618      	mov	r0, r3
 800ad54:	f7ff fe9e 	bl	800aa94 <LL_EXTI_EnableIT_0_31>
          /* Directly Enable Event on provided Lines */
          LL_EXTI_EnableEvent_0_31(EXTI_InitStruct->Line_0_31);
 800ad58:	687b      	ldr	r3, [r7, #4]
 800ad5a:	681b      	ldr	r3, [r3, #0]
 800ad5c:	4618      	mov	r0, r3
 800ad5e:	f7ff fee5 	bl	800ab2c <LL_EXTI_EnableEvent_0_31>
          break;
 800ad62:	e002      	b.n	800ad6a <LL_EXTI_Init+0x76>
        default:
          status = 0x01u;
 800ad64:	2301      	movs	r3, #1
 800ad66:	60fb      	str	r3, [r7, #12]
          break;
 800ad68:	bf00      	nop
      }
      if (EXTI_InitStruct->Trigger != LL_EXTI_TRIGGER_NONE)
 800ad6a:	687b      	ldr	r3, [r7, #4]
 800ad6c:	7a9b      	ldrb	r3, [r3, #10]
 800ad6e:	2b00      	cmp	r3, #0
 800ad70:	d02d      	beq.n	800adce <LL_EXTI_Init+0xda>
      {
        switch (EXTI_InitStruct->Trigger)
 800ad72:	687b      	ldr	r3, [r7, #4]
 800ad74:	7a9b      	ldrb	r3, [r3, #10]
 800ad76:	2b02      	cmp	r3, #2
 800ad78:	d00e      	beq.n	800ad98 <LL_EXTI_Init+0xa4>
 800ad7a:	2b03      	cmp	r3, #3
 800ad7c:	d017      	beq.n	800adae <LL_EXTI_Init+0xba>
 800ad7e:	2b01      	cmp	r3, #1
 800ad80:	d120      	bne.n	800adc4 <LL_EXTI_Init+0xd0>
        {
          case LL_EXTI_TRIGGER_RISING:
            /* First Disable Falling Trigger on provided Lines */
            LL_EXTI_DisableFallingTrig_0_31(EXTI_InitStruct->Line_0_31);
 800ad82:	687b      	ldr	r3, [r7, #4]
 800ad84:	681b      	ldr	r3, [r3, #0]
 800ad86:	4618      	mov	r0, r3
 800ad88:	f7ff ff8c 	bl	800aca4 <LL_EXTI_DisableFallingTrig_0_31>
            /* Then Enable Rising Trigger on provided Lines */
            LL_EXTI_EnableRisingTrig_0_31(EXTI_InitStruct->Line_0_31);
 800ad8c:	687b      	ldr	r3, [r7, #4]
 800ad8e:	681b      	ldr	r3, [r3, #0]
 800ad90:	4618      	mov	r0, r3
 800ad92:	f7ff ff17 	bl	800abc4 <LL_EXTI_EnableRisingTrig_0_31>
            break;
 800ad96:	e01b      	b.n	800add0 <LL_EXTI_Init+0xdc>
          case LL_EXTI_TRIGGER_FALLING:
            /* First Disable Rising Trigger on provided Lines */
            LL_EXTI_DisableRisingTrig_0_31(EXTI_InitStruct->Line_0_31);
 800ad98:	687b      	ldr	r3, [r7, #4]
 800ad9a:	681b      	ldr	r3, [r3, #0]
 800ad9c:	4618      	mov	r0, r3
 800ad9e:	f7ff ff35 	bl	800ac0c <LL_EXTI_DisableRisingTrig_0_31>
            /* Then Enable Falling Trigger on provided Lines */
            LL_EXTI_EnableFallingTrig_0_31(EXTI_InitStruct->Line_0_31);
 800ada2:	687b      	ldr	r3, [r7, #4]
 800ada4:	681b      	ldr	r3, [r3, #0]
 800ada6:	4618      	mov	r0, r3
 800ada8:	f7ff ff58 	bl	800ac5c <LL_EXTI_EnableFallingTrig_0_31>
            break;
 800adac:	e010      	b.n	800add0 <LL_EXTI_Init+0xdc>
          case LL_EXTI_TRIGGER_RISING_FALLING:
            /* Enable Rising Trigger on provided Lines */
            LL_EXTI_EnableRisingTrig_0_31(EXTI_InitStruct->Line_0_31);
 800adae:	687b      	ldr	r3, [r7, #4]
 800adb0:	681b      	ldr	r3, [r3, #0]
 800adb2:	4618      	mov	r0, r3
 800adb4:	f7ff ff06 	bl	800abc4 <LL_EXTI_EnableRisingTrig_0_31>
            /* Enable Falling Trigger on provided Lines */
            LL_EXTI_EnableFallingTrig_0_31(EXTI_InitStruct->Line_0_31);
 800adb8:	687b      	ldr	r3, [r7, #4]
 800adba:	681b      	ldr	r3, [r3, #0]
 800adbc:	4618      	mov	r0, r3
 800adbe:	f7ff ff4d 	bl	800ac5c <LL_EXTI_EnableFallingTrig_0_31>
            break;
 800adc2:	e005      	b.n	800add0 <LL_EXTI_Init+0xdc>
          default:
            status |= 0x02u;
 800adc4:	68fb      	ldr	r3, [r7, #12]
 800adc6:	f043 0302 	orr.w	r3, r3, #2
 800adca:	60fb      	str	r3, [r7, #12]
            break;
 800adcc:	e000      	b.n	800add0 <LL_EXTI_Init+0xdc>
        }
      }
 800adce:	bf00      	nop
    }
    /* Configure EXTI Lines in range from 32 to 63 */
    if (EXTI_InitStruct->Line_32_63 != LL_EXTI_LINE_NONE)
 800add0:	687b      	ldr	r3, [r7, #4]
 800add2:	685b      	ldr	r3, [r3, #4]
 800add4:	2b00      	cmp	r3, #0
 800add6:	d075      	beq.n	800aec4 <LL_EXTI_Init+0x1d0>
    {
      switch (EXTI_InitStruct->Mode)
 800add8:	687b      	ldr	r3, [r7, #4]
 800adda:	7a5b      	ldrb	r3, [r3, #9]
 800addc:	2b01      	cmp	r3, #1
 800adde:	d00e      	beq.n	800adfe <LL_EXTI_Init+0x10a>
 800ade0:	2b02      	cmp	r3, #2
 800ade2:	d017      	beq.n	800ae14 <LL_EXTI_Init+0x120>
 800ade4:	2b00      	cmp	r3, #0
 800ade6:	d120      	bne.n	800ae2a <LL_EXTI_Init+0x136>
      {
        case LL_EXTI_MODE_IT:
          /* First Disable Event on provided Lines */
          LL_EXTI_DisableEvent_32_63(EXTI_InitStruct->Line_32_63);
 800ade8:	687b      	ldr	r3, [r7, #4]
 800adea:	685b      	ldr	r3, [r3, #4]
 800adec:	4618      	mov	r0, r3
 800adee:	f7ff fed5 	bl	800ab9c <LL_EXTI_DisableEvent_32_63>
          /* Then Enable IT on provided Lines */
          LL_EXTI_EnableIT_32_63(EXTI_InitStruct->Line_32_63);
 800adf2:	687b      	ldr	r3, [r7, #4]
 800adf4:	685b      	ldr	r3, [r3, #4]
 800adf6:	4618      	mov	r0, r3
 800adf8:	f7ff fe5e 	bl	800aab8 <LL_EXTI_EnableIT_32_63>
          break;
 800adfc:	e01a      	b.n	800ae34 <LL_EXTI_Init+0x140>
        case LL_EXTI_MODE_EVENT:
          /* First Disable IT on provided Lines */
          LL_EXTI_DisableIT_32_63(EXTI_InitStruct->Line_32_63);
 800adfe:	687b      	ldr	r3, [r7, #4]
 800ae00:	685b      	ldr	r3, [r3, #4]
 800ae02:	4618      	mov	r0, r3
 800ae04:	f7ff fe7e 	bl	800ab04 <LL_EXTI_DisableIT_32_63>
          /* Then Enable Event on provided Lines */
          LL_EXTI_EnableEvent_32_63(EXTI_InitStruct->Line_32_63);
 800ae08:	687b      	ldr	r3, [r7, #4]
 800ae0a:	685b      	ldr	r3, [r3, #4]
 800ae0c:	4618      	mov	r0, r3
 800ae0e:	f7ff fe9f 	bl	800ab50 <LL_EXTI_EnableEvent_32_63>
          break;
 800ae12:	e00f      	b.n	800ae34 <LL_EXTI_Init+0x140>
        case LL_EXTI_MODE_IT_EVENT:
          /* Directly Enable IT on provided Lines */
          LL_EXTI_EnableIT_32_63(EXTI_InitStruct->Line_32_63);
 800ae14:	687b      	ldr	r3, [r7, #4]
 800ae16:	685b      	ldr	r3, [r3, #4]
 800ae18:	4618      	mov	r0, r3
 800ae1a:	f7ff fe4d 	bl	800aab8 <LL_EXTI_EnableIT_32_63>
          /* Directly Enable IT on provided Lines */
          LL_EXTI_EnableEvent_32_63(EXTI_InitStruct->Line_32_63);
 800ae1e:	687b      	ldr	r3, [r7, #4]
 800ae20:	685b      	ldr	r3, [r3, #4]
 800ae22:	4618      	mov	r0, r3
 800ae24:	f7ff fe94 	bl	800ab50 <LL_EXTI_EnableEvent_32_63>
          break;
 800ae28:	e004      	b.n	800ae34 <LL_EXTI_Init+0x140>
        default:
          status |= 0x04u;
 800ae2a:	68fb      	ldr	r3, [r7, #12]
 800ae2c:	f043 0304 	orr.w	r3, r3, #4
 800ae30:	60fb      	str	r3, [r7, #12]
          break;
 800ae32:	bf00      	nop
      }
      if (EXTI_InitStruct->Trigger != LL_EXTI_TRIGGER_NONE)
 800ae34:	687b      	ldr	r3, [r7, #4]
 800ae36:	7a9b      	ldrb	r3, [r3, #10]
 800ae38:	2b00      	cmp	r3, #0
 800ae3a:	d043      	beq.n	800aec4 <LL_EXTI_Init+0x1d0>
      {
        switch (EXTI_InitStruct->Trigger)
 800ae3c:	687b      	ldr	r3, [r7, #4]
 800ae3e:	7a9b      	ldrb	r3, [r3, #10]
 800ae40:	2b02      	cmp	r3, #2
 800ae42:	d00e      	beq.n	800ae62 <LL_EXTI_Init+0x16e>
 800ae44:	2b03      	cmp	r3, #3
 800ae46:	d017      	beq.n	800ae78 <LL_EXTI_Init+0x184>
 800ae48:	2b01      	cmp	r3, #1
 800ae4a:	d120      	bne.n	800ae8e <LL_EXTI_Init+0x19a>
        {
          case LL_EXTI_TRIGGER_RISING:
            /* First Disable Falling Trigger on provided Lines */
            LL_EXTI_DisableFallingTrig_32_63(EXTI_InitStruct->Line_32_63);
 800ae4c:	687b      	ldr	r3, [r7, #4]
 800ae4e:	685b      	ldr	r3, [r3, #4]
 800ae50:	4618      	mov	r0, r3
 800ae52:	f7ff ff3b 	bl	800accc <LL_EXTI_DisableFallingTrig_32_63>
            /* Then Enable IT on provided Lines */
            LL_EXTI_EnableRisingTrig_32_63(EXTI_InitStruct->Line_32_63);
 800ae56:	687b      	ldr	r3, [r7, #4]
 800ae58:	685b      	ldr	r3, [r3, #4]
 800ae5a:	4618      	mov	r0, r3
 800ae5c:	f7ff fec4 	bl	800abe8 <LL_EXTI_EnableRisingTrig_32_63>
            break;
 800ae60:	e031      	b.n	800aec6 <LL_EXTI_Init+0x1d2>
          case LL_EXTI_TRIGGER_FALLING:
            /* First Disable Rising Trigger on provided Lines */
            LL_EXTI_DisableRisingTrig_32_63(EXTI_InitStruct->Line_32_63);
 800ae62:	687b      	ldr	r3, [r7, #4]
 800ae64:	685b      	ldr	r3, [r3, #4]
 800ae66:	4618      	mov	r0, r3
 800ae68:	f7ff fee4 	bl	800ac34 <LL_EXTI_DisableRisingTrig_32_63>
            /* Then Enable Falling Trigger on provided Lines */
            LL_EXTI_EnableFallingTrig_32_63(EXTI_InitStruct->Line_32_63);
 800ae6c:	687b      	ldr	r3, [r7, #4]
 800ae6e:	685b      	ldr	r3, [r3, #4]
 800ae70:	4618      	mov	r0, r3
 800ae72:	f7ff ff05 	bl	800ac80 <LL_EXTI_EnableFallingTrig_32_63>
            break;
 800ae76:	e026      	b.n	800aec6 <LL_EXTI_Init+0x1d2>
          case LL_EXTI_TRIGGER_RISING_FALLING:
            /* Enable Rising Trigger on provided Lines */
            LL_EXTI_EnableRisingTrig_32_63(EXTI_InitStruct->Line_32_63);
 800ae78:	687b      	ldr	r3, [r7, #4]
 800ae7a:	685b      	ldr	r3, [r3, #4]
 800ae7c:	4618      	mov	r0, r3
 800ae7e:	f7ff feb3 	bl	800abe8 <LL_EXTI_EnableRisingTrig_32_63>
            /* Enable Falling Trigger on provided Lines */
            LL_EXTI_EnableFallingTrig_32_63(EXTI_InitStruct->Line_32_63);
 800ae82:	687b      	ldr	r3, [r7, #4]
 800ae84:	685b      	ldr	r3, [r3, #4]
 800ae86:	4618      	mov	r0, r3
 800ae88:	f7ff fefa 	bl	800ac80 <LL_EXTI_EnableFallingTrig_32_63>
            break;
 800ae8c:	e01b      	b.n	800aec6 <LL_EXTI_Init+0x1d2>
          default:
            status |= 0x05u;
 800ae8e:	68fb      	ldr	r3, [r7, #12]
 800ae90:	f043 0305 	orr.w	r3, r3, #5
 800ae94:	60fb      	str	r3, [r7, #12]
            break;
 800ae96:	bf00      	nop
 800ae98:	e015      	b.n	800aec6 <LL_EXTI_Init+0x1d2>
  }
  /* DISABLE LineCommand */
  else
  {
    /* De-configure IT EXTI Lines in range from 0 to 31 */
    LL_EXTI_DisableIT_0_31(EXTI_InitStruct->Line_0_31);
 800ae9a:	687b      	ldr	r3, [r7, #4]
 800ae9c:	681b      	ldr	r3, [r3, #0]
 800ae9e:	4618      	mov	r0, r3
 800aea0:	f7ff fe1c 	bl	800aadc <LL_EXTI_DisableIT_0_31>
    /* De-configure Event EXTI Lines in range from 0 to 31 */
    LL_EXTI_DisableEvent_0_31(EXTI_InitStruct->Line_0_31);
 800aea4:	687b      	ldr	r3, [r7, #4]
 800aea6:	681b      	ldr	r3, [r3, #0]
 800aea8:	4618      	mov	r0, r3
 800aeaa:	f7ff fe63 	bl	800ab74 <LL_EXTI_DisableEvent_0_31>
    /* De-configure IT EXTI Lines in range from 32 to 63 */
    LL_EXTI_DisableIT_32_63(EXTI_InitStruct->Line_32_63);
 800aeae:	687b      	ldr	r3, [r7, #4]
 800aeb0:	685b      	ldr	r3, [r3, #4]
 800aeb2:	4618      	mov	r0, r3
 800aeb4:	f7ff fe26 	bl	800ab04 <LL_EXTI_DisableIT_32_63>
    /* De-configure Event EXTI Lines in range from 32 to 63 */
    LL_EXTI_DisableEvent_32_63(EXTI_InitStruct->Line_32_63);
 800aeb8:	687b      	ldr	r3, [r7, #4]
 800aeba:	685b      	ldr	r3, [r3, #4]
 800aebc:	4618      	mov	r0, r3
 800aebe:	f7ff fe6d 	bl	800ab9c <LL_EXTI_DisableEvent_32_63>
 800aec2:	e000      	b.n	800aec6 <LL_EXTI_Init+0x1d2>
      }
 800aec4:	bf00      	nop
  }

  return status;
 800aec6:	68fb      	ldr	r3, [r7, #12]
}
 800aec8:	4618      	mov	r0, r3
 800aeca:	3710      	adds	r7, #16
 800aecc:	46bd      	mov	sp, r7
 800aece:	bd80      	pop	{r7, pc}

0800aed0 <LL_GPIO_SetPinMode>:
{
 800aed0:	b480      	push	{r7}
 800aed2:	b089      	sub	sp, #36	; 0x24
 800aed4:	af00      	add	r7, sp, #0
 800aed6:	60f8      	str	r0, [r7, #12]
 800aed8:	60b9      	str	r1, [r7, #8]
 800aeda:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->MODER, (GPIO_MODER_MODE0 << (POSITION_VAL(Pin) * 2U)), (Mode << (POSITION_VAL(Pin) * 2U)));
 800aedc:	68fb      	ldr	r3, [r7, #12]
 800aede:	681a      	ldr	r2, [r3, #0]
 800aee0:	68bb      	ldr	r3, [r7, #8]
 800aee2:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800aee4:	697b      	ldr	r3, [r7, #20]
 800aee6:	fa93 f3a3 	rbit	r3, r3
 800aeea:	613b      	str	r3, [r7, #16]
  return result;
 800aeec:	693b      	ldr	r3, [r7, #16]
 800aeee:	fab3 f383 	clz	r3, r3
 800aef2:	b2db      	uxtb	r3, r3
 800aef4:	005b      	lsls	r3, r3, #1
 800aef6:	2103      	movs	r1, #3
 800aef8:	fa01 f303 	lsl.w	r3, r1, r3
 800aefc:	43db      	mvns	r3, r3
 800aefe:	401a      	ands	r2, r3
 800af00:	68bb      	ldr	r3, [r7, #8]
 800af02:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800af04:	69fb      	ldr	r3, [r7, #28]
 800af06:	fa93 f3a3 	rbit	r3, r3
 800af0a:	61bb      	str	r3, [r7, #24]
  return result;
 800af0c:	69bb      	ldr	r3, [r7, #24]
 800af0e:	fab3 f383 	clz	r3, r3
 800af12:	b2db      	uxtb	r3, r3
 800af14:	005b      	lsls	r3, r3, #1
 800af16:	6879      	ldr	r1, [r7, #4]
 800af18:	fa01 f303 	lsl.w	r3, r1, r3
 800af1c:	431a      	orrs	r2, r3
 800af1e:	68fb      	ldr	r3, [r7, #12]
 800af20:	601a      	str	r2, [r3, #0]
}
 800af22:	bf00      	nop
 800af24:	3724      	adds	r7, #36	; 0x24
 800af26:	46bd      	mov	sp, r7
 800af28:	f85d 7b04 	ldr.w	r7, [sp], #4
 800af2c:	4770      	bx	lr

0800af2e <LL_GPIO_SetPinOutputType>:
{
 800af2e:	b480      	push	{r7}
 800af30:	b085      	sub	sp, #20
 800af32:	af00      	add	r7, sp, #0
 800af34:	60f8      	str	r0, [r7, #12]
 800af36:	60b9      	str	r1, [r7, #8]
 800af38:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->OTYPER, PinMask, (PinMask * OutputType));
 800af3a:	68fb      	ldr	r3, [r7, #12]
 800af3c:	685a      	ldr	r2, [r3, #4]
 800af3e:	68bb      	ldr	r3, [r7, #8]
 800af40:	43db      	mvns	r3, r3
 800af42:	401a      	ands	r2, r3
 800af44:	68bb      	ldr	r3, [r7, #8]
 800af46:	6879      	ldr	r1, [r7, #4]
 800af48:	fb01 f303 	mul.w	r3, r1, r3
 800af4c:	431a      	orrs	r2, r3
 800af4e:	68fb      	ldr	r3, [r7, #12]
 800af50:	605a      	str	r2, [r3, #4]
}
 800af52:	bf00      	nop
 800af54:	3714      	adds	r7, #20
 800af56:	46bd      	mov	sp, r7
 800af58:	f85d 7b04 	ldr.w	r7, [sp], #4
 800af5c:	4770      	bx	lr

0800af5e <LL_GPIO_SetPinSpeed>:
{
 800af5e:	b480      	push	{r7}
 800af60:	b089      	sub	sp, #36	; 0x24
 800af62:	af00      	add	r7, sp, #0
 800af64:	60f8      	str	r0, [r7, #12]
 800af66:	60b9      	str	r1, [r7, #8]
 800af68:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->OSPEEDR, (GPIO_OSPEEDR_OSPEED0 << (POSITION_VAL(Pin) * 2U)),
 800af6a:	68fb      	ldr	r3, [r7, #12]
 800af6c:	689a      	ldr	r2, [r3, #8]
 800af6e:	68bb      	ldr	r3, [r7, #8]
 800af70:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800af72:	697b      	ldr	r3, [r7, #20]
 800af74:	fa93 f3a3 	rbit	r3, r3
 800af78:	613b      	str	r3, [r7, #16]
  return result;
 800af7a:	693b      	ldr	r3, [r7, #16]
 800af7c:	fab3 f383 	clz	r3, r3
 800af80:	b2db      	uxtb	r3, r3
 800af82:	005b      	lsls	r3, r3, #1
 800af84:	2103      	movs	r1, #3
 800af86:	fa01 f303 	lsl.w	r3, r1, r3
 800af8a:	43db      	mvns	r3, r3
 800af8c:	401a      	ands	r2, r3
 800af8e:	68bb      	ldr	r3, [r7, #8]
 800af90:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800af92:	69fb      	ldr	r3, [r7, #28]
 800af94:	fa93 f3a3 	rbit	r3, r3
 800af98:	61bb      	str	r3, [r7, #24]
  return result;
 800af9a:	69bb      	ldr	r3, [r7, #24]
 800af9c:	fab3 f383 	clz	r3, r3
 800afa0:	b2db      	uxtb	r3, r3
 800afa2:	005b      	lsls	r3, r3, #1
 800afa4:	6879      	ldr	r1, [r7, #4]
 800afa6:	fa01 f303 	lsl.w	r3, r1, r3
 800afaa:	431a      	orrs	r2, r3
 800afac:	68fb      	ldr	r3, [r7, #12]
 800afae:	609a      	str	r2, [r3, #8]
}
 800afb0:	bf00      	nop
 800afb2:	3724      	adds	r7, #36	; 0x24
 800afb4:	46bd      	mov	sp, r7
 800afb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800afba:	4770      	bx	lr

0800afbc <LL_GPIO_SetPinPull>:
{
 800afbc:	b480      	push	{r7}
 800afbe:	b089      	sub	sp, #36	; 0x24
 800afc0:	af00      	add	r7, sp, #0
 800afc2:	60f8      	str	r0, [r7, #12]
 800afc4:	60b9      	str	r1, [r7, #8]
 800afc6:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->PUPDR, (GPIO_PUPDR_PUPD0 << (POSITION_VAL(Pin) * 2U)), (Pull << (POSITION_VAL(Pin) * 2U)));
 800afc8:	68fb      	ldr	r3, [r7, #12]
 800afca:	68da      	ldr	r2, [r3, #12]
 800afcc:	68bb      	ldr	r3, [r7, #8]
 800afce:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800afd0:	697b      	ldr	r3, [r7, #20]
 800afd2:	fa93 f3a3 	rbit	r3, r3
 800afd6:	613b      	str	r3, [r7, #16]
  return result;
 800afd8:	693b      	ldr	r3, [r7, #16]
 800afda:	fab3 f383 	clz	r3, r3
 800afde:	b2db      	uxtb	r3, r3
 800afe0:	005b      	lsls	r3, r3, #1
 800afe2:	2103      	movs	r1, #3
 800afe4:	fa01 f303 	lsl.w	r3, r1, r3
 800afe8:	43db      	mvns	r3, r3
 800afea:	401a      	ands	r2, r3
 800afec:	68bb      	ldr	r3, [r7, #8]
 800afee:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800aff0:	69fb      	ldr	r3, [r7, #28]
 800aff2:	fa93 f3a3 	rbit	r3, r3
 800aff6:	61bb      	str	r3, [r7, #24]
  return result;
 800aff8:	69bb      	ldr	r3, [r7, #24]
 800affa:	fab3 f383 	clz	r3, r3
 800affe:	b2db      	uxtb	r3, r3
 800b000:	005b      	lsls	r3, r3, #1
 800b002:	6879      	ldr	r1, [r7, #4]
 800b004:	fa01 f303 	lsl.w	r3, r1, r3
 800b008:	431a      	orrs	r2, r3
 800b00a:	68fb      	ldr	r3, [r7, #12]
 800b00c:	60da      	str	r2, [r3, #12]
}
 800b00e:	bf00      	nop
 800b010:	3724      	adds	r7, #36	; 0x24
 800b012:	46bd      	mov	sp, r7
 800b014:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b018:	4770      	bx	lr

0800b01a <LL_GPIO_SetAFPin_0_7>:
{
 800b01a:	b480      	push	{r7}
 800b01c:	b089      	sub	sp, #36	; 0x24
 800b01e:	af00      	add	r7, sp, #0
 800b020:	60f8      	str	r0, [r7, #12]
 800b022:	60b9      	str	r1, [r7, #8]
 800b024:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->AFR[0], (GPIO_AFRL_AFSEL0 << (POSITION_VAL(Pin) * 4U)),
 800b026:	68fb      	ldr	r3, [r7, #12]
 800b028:	6a1a      	ldr	r2, [r3, #32]
 800b02a:	68bb      	ldr	r3, [r7, #8]
 800b02c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800b02e:	697b      	ldr	r3, [r7, #20]
 800b030:	fa93 f3a3 	rbit	r3, r3
 800b034:	613b      	str	r3, [r7, #16]
  return result;
 800b036:	693b      	ldr	r3, [r7, #16]
 800b038:	fab3 f383 	clz	r3, r3
 800b03c:	b2db      	uxtb	r3, r3
 800b03e:	009b      	lsls	r3, r3, #2
 800b040:	210f      	movs	r1, #15
 800b042:	fa01 f303 	lsl.w	r3, r1, r3
 800b046:	43db      	mvns	r3, r3
 800b048:	401a      	ands	r2, r3
 800b04a:	68bb      	ldr	r3, [r7, #8]
 800b04c:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800b04e:	69fb      	ldr	r3, [r7, #28]
 800b050:	fa93 f3a3 	rbit	r3, r3
 800b054:	61bb      	str	r3, [r7, #24]
  return result;
 800b056:	69bb      	ldr	r3, [r7, #24]
 800b058:	fab3 f383 	clz	r3, r3
 800b05c:	b2db      	uxtb	r3, r3
 800b05e:	009b      	lsls	r3, r3, #2
 800b060:	6879      	ldr	r1, [r7, #4]
 800b062:	fa01 f303 	lsl.w	r3, r1, r3
 800b066:	431a      	orrs	r2, r3
 800b068:	68fb      	ldr	r3, [r7, #12]
 800b06a:	621a      	str	r2, [r3, #32]
}
 800b06c:	bf00      	nop
 800b06e:	3724      	adds	r7, #36	; 0x24
 800b070:	46bd      	mov	sp, r7
 800b072:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b076:	4770      	bx	lr

0800b078 <LL_GPIO_SetAFPin_8_15>:
{
 800b078:	b480      	push	{r7}
 800b07a:	b089      	sub	sp, #36	; 0x24
 800b07c:	af00      	add	r7, sp, #0
 800b07e:	60f8      	str	r0, [r7, #12]
 800b080:	60b9      	str	r1, [r7, #8]
 800b082:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->AFR[1], (GPIO_AFRH_AFSEL8 << (POSITION_VAL(Pin >> 8U) * 4U)),
 800b084:	68fb      	ldr	r3, [r7, #12]
 800b086:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800b088:	68bb      	ldr	r3, [r7, #8]
 800b08a:	0a1b      	lsrs	r3, r3, #8
 800b08c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800b08e:	697b      	ldr	r3, [r7, #20]
 800b090:	fa93 f3a3 	rbit	r3, r3
 800b094:	613b      	str	r3, [r7, #16]
  return result;
 800b096:	693b      	ldr	r3, [r7, #16]
 800b098:	fab3 f383 	clz	r3, r3
 800b09c:	b2db      	uxtb	r3, r3
 800b09e:	009b      	lsls	r3, r3, #2
 800b0a0:	210f      	movs	r1, #15
 800b0a2:	fa01 f303 	lsl.w	r3, r1, r3
 800b0a6:	43db      	mvns	r3, r3
 800b0a8:	401a      	ands	r2, r3
 800b0aa:	68bb      	ldr	r3, [r7, #8]
 800b0ac:	0a1b      	lsrs	r3, r3, #8
 800b0ae:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800b0b0:	69fb      	ldr	r3, [r7, #28]
 800b0b2:	fa93 f3a3 	rbit	r3, r3
 800b0b6:	61bb      	str	r3, [r7, #24]
  return result;
 800b0b8:	69bb      	ldr	r3, [r7, #24]
 800b0ba:	fab3 f383 	clz	r3, r3
 800b0be:	b2db      	uxtb	r3, r3
 800b0c0:	009b      	lsls	r3, r3, #2
 800b0c2:	6879      	ldr	r1, [r7, #4]
 800b0c4:	fa01 f303 	lsl.w	r3, r1, r3
 800b0c8:	431a      	orrs	r2, r3
 800b0ca:	68fb      	ldr	r3, [r7, #12]
 800b0cc:	625a      	str	r2, [r3, #36]	; 0x24
}
 800b0ce:	bf00      	nop
 800b0d0:	3724      	adds	r7, #36	; 0x24
 800b0d2:	46bd      	mov	sp, r7
 800b0d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b0d8:	4770      	bx	lr

0800b0da <LL_GPIO_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: GPIO registers are initialized according to GPIO_InitStruct content
  *          - ERROR:   Not applicable
  */
ErrorStatus LL_GPIO_Init(GPIO_TypeDef *GPIOx, LL_GPIO_InitTypeDef *GPIO_InitStruct)
{
 800b0da:	b580      	push	{r7, lr}
 800b0dc:	b086      	sub	sp, #24
 800b0de:	af00      	add	r7, sp, #0
 800b0e0:	6078      	str	r0, [r7, #4]
 800b0e2:	6039      	str	r1, [r7, #0]
  assert_param(IS_LL_GPIO_MODE(GPIO_InitStruct->Mode));
  assert_param(IS_LL_GPIO_PULL(GPIO_InitStruct->Pull));

  /* ------------------------- Configure the port pins ---------------- */
  /* Initialize  pinpos on first pin set */
  pinpos = POSITION_VAL(GPIO_InitStruct->Pin);
 800b0e4:	683b      	ldr	r3, [r7, #0]
 800b0e6:	681b      	ldr	r3, [r3, #0]
 800b0e8:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800b0ea:	68fb      	ldr	r3, [r7, #12]
 800b0ec:	fa93 f3a3 	rbit	r3, r3
 800b0f0:	60bb      	str	r3, [r7, #8]
  return result;
 800b0f2:	68bb      	ldr	r3, [r7, #8]
 800b0f4:	fab3 f383 	clz	r3, r3
 800b0f8:	b2db      	uxtb	r3, r3
 800b0fa:	617b      	str	r3, [r7, #20]

  /* Configure the port pins */
  while (((GPIO_InitStruct->Pin) >> pinpos) != 0x00000000U)
 800b0fc:	e040      	b.n	800b180 <LL_GPIO_Init+0xa6>
  {
    /* Get current io position */
    currentpin = (GPIO_InitStruct->Pin) & (0x00000001UL << pinpos);
 800b0fe:	683b      	ldr	r3, [r7, #0]
 800b100:	681a      	ldr	r2, [r3, #0]
 800b102:	2101      	movs	r1, #1
 800b104:	697b      	ldr	r3, [r7, #20]
 800b106:	fa01 f303 	lsl.w	r3, r1, r3
 800b10a:	4013      	ands	r3, r2
 800b10c:	613b      	str	r3, [r7, #16]

    if (currentpin != 0x00u)
 800b10e:	693b      	ldr	r3, [r7, #16]
 800b110:	2b00      	cmp	r3, #0
 800b112:	d032      	beq.n	800b17a <LL_GPIO_Init+0xa0>
    {
      /* Pin Mode configuration */
      LL_GPIO_SetPinMode(GPIOx, currentpin, GPIO_InitStruct->Mode);
 800b114:	683b      	ldr	r3, [r7, #0]
 800b116:	685b      	ldr	r3, [r3, #4]
 800b118:	461a      	mov	r2, r3
 800b11a:	6939      	ldr	r1, [r7, #16]
 800b11c:	6878      	ldr	r0, [r7, #4]
 800b11e:	f7ff fed7 	bl	800aed0 <LL_GPIO_SetPinMode>

      if ((GPIO_InitStruct->Mode == LL_GPIO_MODE_OUTPUT) || (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE))
 800b122:	683b      	ldr	r3, [r7, #0]
 800b124:	685b      	ldr	r3, [r3, #4]
 800b126:	2b01      	cmp	r3, #1
 800b128:	d003      	beq.n	800b132 <LL_GPIO_Init+0x58>
 800b12a:	683b      	ldr	r3, [r7, #0]
 800b12c:	685b      	ldr	r3, [r3, #4]
 800b12e:	2b02      	cmp	r3, #2
 800b130:	d106      	bne.n	800b140 <LL_GPIO_Init+0x66>
      {
        /* Check Speed mode parameters */
        assert_param(IS_LL_GPIO_SPEED(GPIO_InitStruct->Speed));

        /* Speed mode configuration */
        LL_GPIO_SetPinSpeed(GPIOx, currentpin, GPIO_InitStruct->Speed);
 800b132:	683b      	ldr	r3, [r7, #0]
 800b134:	689b      	ldr	r3, [r3, #8]
 800b136:	461a      	mov	r2, r3
 800b138:	6939      	ldr	r1, [r7, #16]
 800b13a:	6878      	ldr	r0, [r7, #4]
 800b13c:	f7ff ff0f 	bl	800af5e <LL_GPIO_SetPinSpeed>
      }

      /* Pull-up Pull down resistor configuration*/
      LL_GPIO_SetPinPull(GPIOx, currentpin, GPIO_InitStruct->Pull);
 800b140:	683b      	ldr	r3, [r7, #0]
 800b142:	691b      	ldr	r3, [r3, #16]
 800b144:	461a      	mov	r2, r3
 800b146:	6939      	ldr	r1, [r7, #16]
 800b148:	6878      	ldr	r0, [r7, #4]
 800b14a:	f7ff ff37 	bl	800afbc <LL_GPIO_SetPinPull>

      if (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE)
 800b14e:	683b      	ldr	r3, [r7, #0]
 800b150:	685b      	ldr	r3, [r3, #4]
 800b152:	2b02      	cmp	r3, #2
 800b154:	d111      	bne.n	800b17a <LL_GPIO_Init+0xa0>
      {
        /* Check Alternate parameter */
        assert_param(IS_LL_GPIO_ALTERNATE(GPIO_InitStruct->Alternate));

        /* Speed mode configuration */
        if (currentpin < LL_GPIO_PIN_8)
 800b156:	693b      	ldr	r3, [r7, #16]
 800b158:	2bff      	cmp	r3, #255	; 0xff
 800b15a:	d807      	bhi.n	800b16c <LL_GPIO_Init+0x92>
        {
          LL_GPIO_SetAFPin_0_7(GPIOx, currentpin, GPIO_InitStruct->Alternate);
 800b15c:	683b      	ldr	r3, [r7, #0]
 800b15e:	695b      	ldr	r3, [r3, #20]
 800b160:	461a      	mov	r2, r3
 800b162:	6939      	ldr	r1, [r7, #16]
 800b164:	6878      	ldr	r0, [r7, #4]
 800b166:	f7ff ff58 	bl	800b01a <LL_GPIO_SetAFPin_0_7>
 800b16a:	e006      	b.n	800b17a <LL_GPIO_Init+0xa0>
        }
        else
        {
          LL_GPIO_SetAFPin_8_15(GPIOx, currentpin, GPIO_InitStruct->Alternate);
 800b16c:	683b      	ldr	r3, [r7, #0]
 800b16e:	695b      	ldr	r3, [r3, #20]
 800b170:	461a      	mov	r2, r3
 800b172:	6939      	ldr	r1, [r7, #16]
 800b174:	6878      	ldr	r0, [r7, #4]
 800b176:	f7ff ff7f 	bl	800b078 <LL_GPIO_SetAFPin_8_15>
        }
      }
    }
    pinpos++;
 800b17a:	697b      	ldr	r3, [r7, #20]
 800b17c:	3301      	adds	r3, #1
 800b17e:	617b      	str	r3, [r7, #20]
  while (((GPIO_InitStruct->Pin) >> pinpos) != 0x00000000U)
 800b180:	683b      	ldr	r3, [r7, #0]
 800b182:	681a      	ldr	r2, [r3, #0]
 800b184:	697b      	ldr	r3, [r7, #20]
 800b186:	fa22 f303 	lsr.w	r3, r2, r3
 800b18a:	2b00      	cmp	r3, #0
 800b18c:	d1b7      	bne.n	800b0fe <LL_GPIO_Init+0x24>
  }

  if ((GPIO_InitStruct->Mode == LL_GPIO_MODE_OUTPUT) || (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE))
 800b18e:	683b      	ldr	r3, [r7, #0]
 800b190:	685b      	ldr	r3, [r3, #4]
 800b192:	2b01      	cmp	r3, #1
 800b194:	d003      	beq.n	800b19e <LL_GPIO_Init+0xc4>
 800b196:	683b      	ldr	r3, [r7, #0]
 800b198:	685b      	ldr	r3, [r3, #4]
 800b19a:	2b02      	cmp	r3, #2
 800b19c:	d107      	bne.n	800b1ae <LL_GPIO_Init+0xd4>
  {
    /* Check Output mode parameters */
    assert_param(IS_LL_GPIO_OUTPUT_TYPE(GPIO_InitStruct->OutputType));

    /* Output mode configuration*/
    LL_GPIO_SetPinOutputType(GPIOx, GPIO_InitStruct->Pin, GPIO_InitStruct->OutputType);
 800b19e:	683b      	ldr	r3, [r7, #0]
 800b1a0:	6819      	ldr	r1, [r3, #0]
 800b1a2:	683b      	ldr	r3, [r7, #0]
 800b1a4:	68db      	ldr	r3, [r3, #12]
 800b1a6:	461a      	mov	r2, r3
 800b1a8:	6878      	ldr	r0, [r7, #4]
 800b1aa:	f7ff fec0 	bl	800af2e <LL_GPIO_SetPinOutputType>

  }
  return (SUCCESS);
 800b1ae:	2300      	movs	r3, #0
}
 800b1b0:	4618      	mov	r0, r3
 800b1b2:	3718      	adds	r7, #24
 800b1b4:	46bd      	mov	sp, r7
 800b1b6:	bd80      	pop	{r7, pc}

0800b1b8 <ILI9341_Draw_Bordered_Filled_Rectangle_Coord>:
 *
 *
 */

void ILI9341_Draw_Bordered_Filled_Rectangle_Coord(uint16_t x, uint16_t y, uint16_t w, uint16_t h, uint16_t inner_colour, uint8_t border_weight, uint8_t border_colour)
{
 800b1b8:	b590      	push	{r4, r7, lr}
 800b1ba:	b087      	sub	sp, #28
 800b1bc:	af02      	add	r7, sp, #8
 800b1be:	4604      	mov	r4, r0
 800b1c0:	4608      	mov	r0, r1
 800b1c2:	4611      	mov	r1, r2
 800b1c4:	461a      	mov	r2, r3
 800b1c6:	4623      	mov	r3, r4
 800b1c8:	80fb      	strh	r3, [r7, #6]
 800b1ca:	4603      	mov	r3, r0
 800b1cc:	80bb      	strh	r3, [r7, #4]
 800b1ce:	460b      	mov	r3, r1
 800b1d0:	807b      	strh	r3, [r7, #2]
 800b1d2:	4613      	mov	r3, r2
 800b1d4:	803b      	strh	r3, [r7, #0]

	// Draw inwards (and shorter) for each level of border weight
	for(uint8_t b = 0; ; b++)
 800b1d6:	2300      	movs	r3, #0
 800b1d8:	73fb      	strb	r3, [r7, #15]
	{


		if(b > border_weight)
 800b1da:	7bfa      	ldrb	r2, [r7, #15]
 800b1dc:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 800b1e0:	429a      	cmp	r2, r3
 800b1e2:	d93a      	bls.n	800b25a <ILI9341_Draw_Bordered_Filled_Rectangle_Coord+0xa2>
		{

			// stop before the inner space reaches zero! (hard fault)
			if( ((y + b) == ((y + h) - b)) || ((x + b) == ((x + w) - b)) )
 800b1e4:	88ba      	ldrh	r2, [r7, #4]
 800b1e6:	7bfb      	ldrb	r3, [r7, #15]
 800b1e8:	441a      	add	r2, r3
 800b1ea:	88b9      	ldrh	r1, [r7, #4]
 800b1ec:	883b      	ldrh	r3, [r7, #0]
 800b1ee:	4419      	add	r1, r3
 800b1f0:	7bfb      	ldrb	r3, [r7, #15]
 800b1f2:	1acb      	subs	r3, r1, r3
 800b1f4:	429a      	cmp	r2, r3
 800b1f6:	f000 8090 	beq.w	800b31a <ILI9341_Draw_Bordered_Filled_Rectangle_Coord+0x162>
 800b1fa:	88fa      	ldrh	r2, [r7, #6]
 800b1fc:	7bfb      	ldrb	r3, [r7, #15]
 800b1fe:	441a      	add	r2, r3
 800b200:	88f9      	ldrh	r1, [r7, #6]
 800b202:	887b      	ldrh	r3, [r7, #2]
 800b204:	4419      	add	r1, r3
 800b206:	7bfb      	ldrb	r3, [r7, #15]
 800b208:	1acb      	subs	r3, r1, r3
 800b20a:	429a      	cmp	r2, r3
 800b20c:	f000 8085 	beq.w	800b31a <ILI9341_Draw_Bordered_Filled_Rectangle_Coord+0x162>
				// add final line?
				goto finish;
			}
			else
			{
				ILI9341_Draw_Rectangle(x + b, y + b, (w - (2*b)) + 1, (h - (2*b)) + 1, inner_colour, AREA_CHUNK);
 800b210:	7bfb      	ldrb	r3, [r7, #15]
 800b212:	b29a      	uxth	r2, r3
 800b214:	88fb      	ldrh	r3, [r7, #6]
 800b216:	4413      	add	r3, r2
 800b218:	b298      	uxth	r0, r3
 800b21a:	7bfb      	ldrb	r3, [r7, #15]
 800b21c:	b29a      	uxth	r2, r3
 800b21e:	88bb      	ldrh	r3, [r7, #4]
 800b220:	4413      	add	r3, r2
 800b222:	b299      	uxth	r1, r3
 800b224:	7bfb      	ldrb	r3, [r7, #15]
 800b226:	b29b      	uxth	r3, r3
 800b228:	005b      	lsls	r3, r3, #1
 800b22a:	b29b      	uxth	r3, r3
 800b22c:	887a      	ldrh	r2, [r7, #2]
 800b22e:	1ad3      	subs	r3, r2, r3
 800b230:	b29b      	uxth	r3, r3
 800b232:	3301      	adds	r3, #1
 800b234:	b29c      	uxth	r4, r3
 800b236:	7bfb      	ldrb	r3, [r7, #15]
 800b238:	b29b      	uxth	r3, r3
 800b23a:	005b      	lsls	r3, r3, #1
 800b23c:	b29b      	uxth	r3, r3
 800b23e:	883a      	ldrh	r2, [r7, #0]
 800b240:	1ad3      	subs	r3, r2, r3
 800b242:	b29b      	uxth	r3, r3
 800b244:	3301      	adds	r3, #1
 800b246:	b29a      	uxth	r2, r3
 800b248:	2304      	movs	r3, #4
 800b24a:	9301      	str	r3, [sp, #4]
 800b24c:	8c3b      	ldrh	r3, [r7, #32]
 800b24e:	9300      	str	r3, [sp, #0]
 800b250:	4613      	mov	r3, r2
 800b252:	4622      	mov	r2, r4
 800b254:	f000 fcd6 	bl	800bc04 <ILI9341_Draw_Rectangle>
				goto finish;
 800b258:	e060      	b.n	800b31c <ILI9341_Draw_Bordered_Filled_Rectangle_Coord+0x164>
			}
		}

		// Horizontal lines
		ILI9341_Draw_Horizontal_Line(	x + b,
 800b25a:	7bfb      	ldrb	r3, [r7, #15]
 800b25c:	b29a      	uxth	r2, r3
 800b25e:	88fb      	ldrh	r3, [r7, #6]
 800b260:	4413      	add	r3, r2
 800b262:	b298      	uxth	r0, r3
 800b264:	7bfb      	ldrb	r3, [r7, #15]
 800b266:	b29a      	uxth	r2, r3
 800b268:	88bb      	ldrh	r3, [r7, #4]
 800b26a:	4413      	add	r3, r2
 800b26c:	b299      	uxth	r1, r3
 800b26e:	7bfb      	ldrb	r3, [r7, #15]
 800b270:	b29b      	uxth	r3, r3
 800b272:	005b      	lsls	r3, r3, #1
 800b274:	b29b      	uxth	r3, r3
 800b276:	887a      	ldrh	r2, [r7, #2]
 800b278:	1ad3      	subs	r3, r2, r3
 800b27a:	b29a      	uxth	r2, r3
 800b27c:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800b280:	b29b      	uxth	r3, r3
 800b282:	f000 fa81 	bl	800b788 <ILI9341_Draw_Horizontal_Line>
										y + b,
										w - (2*b),
										border_colour);

		ILI9341_Draw_Horizontal_Line(	x + b,
 800b286:	7bfb      	ldrb	r3, [r7, #15]
 800b288:	b29a      	uxth	r2, r3
 800b28a:	88fb      	ldrh	r3, [r7, #6]
 800b28c:	4413      	add	r3, r2
 800b28e:	b298      	uxth	r0, r3
										(y + h) - b,
 800b290:	88ba      	ldrh	r2, [r7, #4]
 800b292:	883b      	ldrh	r3, [r7, #0]
 800b294:	4413      	add	r3, r2
 800b296:	b29a      	uxth	r2, r3
		ILI9341_Draw_Horizontal_Line(	x + b,
 800b298:	7bfb      	ldrb	r3, [r7, #15]
 800b29a:	b29b      	uxth	r3, r3
 800b29c:	1ad3      	subs	r3, r2, r3
 800b29e:	b299      	uxth	r1, r3
 800b2a0:	7bfb      	ldrb	r3, [r7, #15]
 800b2a2:	b29b      	uxth	r3, r3
 800b2a4:	887a      	ldrh	r2, [r7, #2]
 800b2a6:	1ad3      	subs	r3, r2, r3
 800b2a8:	b29a      	uxth	r2, r3
 800b2aa:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800b2ae:	b29b      	uxth	r3, r3
 800b2b0:	f000 fa6a 	bl	800b788 <ILI9341_Draw_Horizontal_Line>
										w - (b),
										border_colour);


		// Vertical lines
		ILI9341_Draw_Vertical_Line(		x + b,
 800b2b4:	7bfb      	ldrb	r3, [r7, #15]
 800b2b6:	b29a      	uxth	r2, r3
 800b2b8:	88fb      	ldrh	r3, [r7, #6]
 800b2ba:	4413      	add	r3, r2
 800b2bc:	b298      	uxth	r0, r3
 800b2be:	7bfb      	ldrb	r3, [r7, #15]
 800b2c0:	b29a      	uxth	r2, r3
 800b2c2:	88bb      	ldrh	r3, [r7, #4]
 800b2c4:	4413      	add	r3, r2
 800b2c6:	b299      	uxth	r1, r3
 800b2c8:	7bfb      	ldrb	r3, [r7, #15]
 800b2ca:	b29b      	uxth	r3, r3
 800b2cc:	005b      	lsls	r3, r3, #1
 800b2ce:	b29b      	uxth	r3, r3
 800b2d0:	883a      	ldrh	r2, [r7, #0]
 800b2d2:	1ad3      	subs	r3, r2, r3
 800b2d4:	b29a      	uxth	r2, r3
 800b2d6:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800b2da:	b29b      	uxth	r3, r3
 800b2dc:	f000 fa9c 	bl	800b818 <ILI9341_Draw_Vertical_Line>
										y + b,
										h - (2*b),
										border_colour);

		ILI9341_Draw_Vertical_Line(		(x + w) - b,
 800b2e0:	88fa      	ldrh	r2, [r7, #6]
 800b2e2:	887b      	ldrh	r3, [r7, #2]
 800b2e4:	4413      	add	r3, r2
 800b2e6:	b29a      	uxth	r2, r3
 800b2e8:	7bfb      	ldrb	r3, [r7, #15]
 800b2ea:	b29b      	uxth	r3, r3
 800b2ec:	1ad3      	subs	r3, r2, r3
 800b2ee:	b298      	uxth	r0, r3
 800b2f0:	7bfb      	ldrb	r3, [r7, #15]
 800b2f2:	b29a      	uxth	r2, r3
 800b2f4:	88bb      	ldrh	r3, [r7, #4]
 800b2f6:	4413      	add	r3, r2
 800b2f8:	b299      	uxth	r1, r3
 800b2fa:	7bfb      	ldrb	r3, [r7, #15]
 800b2fc:	b29b      	uxth	r3, r3
 800b2fe:	005b      	lsls	r3, r3, #1
 800b300:	b29b      	uxth	r3, r3
 800b302:	883a      	ldrh	r2, [r7, #0]
 800b304:	1ad3      	subs	r3, r2, r3
 800b306:	b29a      	uxth	r2, r3
 800b308:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800b30c:	b29b      	uxth	r3, r3
 800b30e:	f000 fa83 	bl	800b818 <ILI9341_Draw_Vertical_Line>
	for(uint8_t b = 0; ; b++)
 800b312:	7bfb      	ldrb	r3, [r7, #15]
 800b314:	3301      	adds	r3, #1
 800b316:	73fb      	strb	r3, [r7, #15]
		if(b > border_weight)
 800b318:	e75f      	b.n	800b1da <ILI9341_Draw_Bordered_Filled_Rectangle_Coord+0x22>
										h - (2*b),
										border_colour);

	}

	finish:
 800b31a:	bf00      	nop
	// done
	return;
 800b31c:	bf00      	nop
}
 800b31e:	3714      	adds	r7, #20
 800b320:	46bd      	mov	sp, r7
 800b322:	bd90      	pop	{r4, r7, pc}

0800b324 <ILI9341_Draw_Char>:
}

/*Draws a character (fonts imported from fonts.h) at x,Y location with specified font colour, size and Background colour*/
/*See fonts.h implementation of font on what is required for changing to a different font when switching fonts libraries*/
void ILI9341_Draw_Char(char character, uint16_t x, uint16_t y, uint16_t colour, uint16_t size, uint16_t bgcolour)
{
 800b324:	b590      	push	{r4, r7, lr}
 800b326:	b089      	sub	sp, #36	; 0x24
 800b328:	af02      	add	r7, sp, #8
 800b32a:	4604      	mov	r4, r0
 800b32c:	4608      	mov	r0, r1
 800b32e:	4611      	mov	r1, r2
 800b330:	461a      	mov	r2, r3
 800b332:	4623      	mov	r3, r4
 800b334:	71fb      	strb	r3, [r7, #7]
 800b336:	4603      	mov	r3, r0
 800b338:	80bb      	strh	r3, [r7, #4]
 800b33a:	460b      	mov	r3, r1
 800b33c:	807b      	strh	r3, [r7, #2]
 800b33e:	4613      	mov	r3, r2
 800b340:	803b      	strh	r3, [r7, #0]
    uint8_t 	i,j;
		



	function_char = character;
 800b342:	79fb      	ldrb	r3, [r7, #7]
 800b344:	75fb      	strb	r3, [r7, #23]
		
    if (function_char < ' ')
 800b346:	7dfb      	ldrb	r3, [r7, #23]
 800b348:	2b1f      	cmp	r3, #31
 800b34a:	d802      	bhi.n	800b352 <ILI9341_Draw_Char+0x2e>
    {
        character = 0;
 800b34c:	2300      	movs	r3, #0
 800b34e:	71fb      	strb	r3, [r7, #7]
 800b350:	e002      	b.n	800b358 <ILI9341_Draw_Char+0x34>
    }
    else
    {
    	function_char -= 32;
 800b352:	7dfb      	ldrb	r3, [r7, #23]
 800b354:	3b20      	subs	r3, #32
 800b356:	75fb      	strb	r3, [r7, #23]
	}
   	
	char temp[CHAR_WIDTH];

	for(uint8_t k = 0; k<CHAR_WIDTH; k++)
 800b358:	2300      	movs	r3, #0
 800b35a:	753b      	strb	r3, [r7, #20]
 800b35c:	e012      	b.n	800b384 <ILI9341_Draw_Char+0x60>
	{
		temp[k] = font[function_char][k];
 800b35e:	7dfa      	ldrb	r2, [r7, #23]
 800b360:	7d38      	ldrb	r0, [r7, #20]
 800b362:	7d39      	ldrb	r1, [r7, #20]
 800b364:	4c48      	ldr	r4, [pc, #288]	; (800b488 <ILI9341_Draw_Char+0x164>)
 800b366:	4613      	mov	r3, r2
 800b368:	005b      	lsls	r3, r3, #1
 800b36a:	4413      	add	r3, r2
 800b36c:	005b      	lsls	r3, r3, #1
 800b36e:	4423      	add	r3, r4
 800b370:	4403      	add	r3, r0
 800b372:	781a      	ldrb	r2, [r3, #0]
 800b374:	f107 0318 	add.w	r3, r7, #24
 800b378:	440b      	add	r3, r1
 800b37a:	f803 2c0c 	strb.w	r2, [r3, #-12]
	for(uint8_t k = 0; k<CHAR_WIDTH; k++)
 800b37e:	7d3b      	ldrb	r3, [r7, #20]
 800b380:	3301      	adds	r3, #1
 800b382:	753b      	strb	r3, [r7, #20]
 800b384:	7d3b      	ldrb	r3, [r7, #20]
 800b386:	2b05      	cmp	r3, #5
 800b388:	d9e9      	bls.n	800b35e <ILI9341_Draw_Char+0x3a>
	}
		
    // Draw pixels
	//ILI9341_Draw_Rectangle(x, Y, CHAR_WIDTH*size, CHAR_HEIGHT*size, bgcolour);
    for (j=0; j<CHAR_WIDTH; j++)
 800b38a:	2300      	movs	r3, #0
 800b38c:	757b      	strb	r3, [r7, #21]
 800b38e:	e074      	b.n	800b47a <ILI9341_Draw_Char+0x156>
    {
        for (i=0; i<CHAR_HEIGHT; i++)
 800b390:	2300      	movs	r3, #0
 800b392:	75bb      	strb	r3, [r7, #22]
 800b394:	e06b      	b.n	800b46e <ILI9341_Draw_Char+0x14a>
        {
            if (temp[j] & (1<<i))
 800b396:	7d7b      	ldrb	r3, [r7, #21]
 800b398:	f107 0218 	add.w	r2, r7, #24
 800b39c:	4413      	add	r3, r2
 800b39e:	f813 3c0c 	ldrb.w	r3, [r3, #-12]
 800b3a2:	461a      	mov	r2, r3
 800b3a4:	7dbb      	ldrb	r3, [r7, #22]
 800b3a6:	fa42 f303 	asr.w	r3, r2, r3
 800b3aa:	f003 0301 	and.w	r3, r3, #1
 800b3ae:	2b00      	cmp	r3, #0
 800b3b0:	d02d      	beq.n	800b40e <ILI9341_Draw_Char+0xea>
            {
            	if(size == 1)
 800b3b2:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 800b3b4:	2b01      	cmp	r3, #1
 800b3b6:	d10e      	bne.n	800b3d6 <ILI9341_Draw_Char+0xb2>
				{
            		ILI9341_Draw_Pixel(x+j, y+i, colour);
 800b3b8:	7d7b      	ldrb	r3, [r7, #21]
 800b3ba:	b29a      	uxth	r2, r3
 800b3bc:	88bb      	ldrh	r3, [r7, #4]
 800b3be:	4413      	add	r3, r2
 800b3c0:	b298      	uxth	r0, r3
 800b3c2:	7dbb      	ldrb	r3, [r7, #22]
 800b3c4:	b29a      	uxth	r2, r3
 800b3c6:	887b      	ldrh	r3, [r7, #2]
 800b3c8:	4413      	add	r3, r2
 800b3ca:	b29b      	uxth	r3, r3
 800b3cc:	883a      	ldrh	r2, [r7, #0]
 800b3ce:	4619      	mov	r1, r3
 800b3d0:	f000 fae0 	bl	800b994 <ILI9341_Draw_Pixel>
 800b3d4:	e048      	b.n	800b468 <ILI9341_Draw_Char+0x144>
				}
				else
				{
					ILI9341_Draw_Rectangle(x+(j*size), y+(i*size), size, size, colour, TEXT_CHUNK);
 800b3d6:	7d7b      	ldrb	r3, [r7, #21]
 800b3d8:	b29b      	uxth	r3, r3
 800b3da:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 800b3dc:	fb12 f303 	smulbb	r3, r2, r3
 800b3e0:	b29a      	uxth	r2, r3
 800b3e2:	88bb      	ldrh	r3, [r7, #4]
 800b3e4:	4413      	add	r3, r2
 800b3e6:	b298      	uxth	r0, r3
 800b3e8:	7dbb      	ldrb	r3, [r7, #22]
 800b3ea:	b29b      	uxth	r3, r3
 800b3ec:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 800b3ee:	fb12 f303 	smulbb	r3, r2, r3
 800b3f2:	b29a      	uxth	r2, r3
 800b3f4:	887b      	ldrh	r3, [r7, #2]
 800b3f6:	4413      	add	r3, r2
 800b3f8:	b299      	uxth	r1, r3
 800b3fa:	8d3c      	ldrh	r4, [r7, #40]	; 0x28
 800b3fc:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 800b3fe:	2301      	movs	r3, #1
 800b400:	9301      	str	r3, [sp, #4]
 800b402:	883b      	ldrh	r3, [r7, #0]
 800b404:	9300      	str	r3, [sp, #0]
 800b406:	4623      	mov	r3, r4
 800b408:	f000 fbfc 	bl	800bc04 <ILI9341_Draw_Rectangle>
 800b40c:	e02c      	b.n	800b468 <ILI9341_Draw_Char+0x144>
				}
            }
            else
            {
               	if(size == 1)
 800b40e:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 800b410:	2b01      	cmp	r3, #1
 800b412:	d10e      	bne.n	800b432 <ILI9341_Draw_Char+0x10e>
				{
					ILI9341_Draw_Pixel(x+j, y+i, bgcolour);
 800b414:	7d7b      	ldrb	r3, [r7, #21]
 800b416:	b29a      	uxth	r2, r3
 800b418:	88bb      	ldrh	r3, [r7, #4]
 800b41a:	4413      	add	r3, r2
 800b41c:	b298      	uxth	r0, r3
 800b41e:	7dbb      	ldrb	r3, [r7, #22]
 800b420:	b29a      	uxth	r2, r3
 800b422:	887b      	ldrh	r3, [r7, #2]
 800b424:	4413      	add	r3, r2
 800b426:	b29b      	uxth	r3, r3
 800b428:	8dba      	ldrh	r2, [r7, #44]	; 0x2c
 800b42a:	4619      	mov	r1, r3
 800b42c:	f000 fab2 	bl	800b994 <ILI9341_Draw_Pixel>
 800b430:	e01a      	b.n	800b468 <ILI9341_Draw_Char+0x144>
				}
				else
				{
					ILI9341_Draw_Rectangle(x+(j*size), y+(i*size), size, size, bgcolour, TEXT_CHUNK);
 800b432:	7d7b      	ldrb	r3, [r7, #21]
 800b434:	b29b      	uxth	r3, r3
 800b436:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 800b438:	fb12 f303 	smulbb	r3, r2, r3
 800b43c:	b29a      	uxth	r2, r3
 800b43e:	88bb      	ldrh	r3, [r7, #4]
 800b440:	4413      	add	r3, r2
 800b442:	b298      	uxth	r0, r3
 800b444:	7dbb      	ldrb	r3, [r7, #22]
 800b446:	b29b      	uxth	r3, r3
 800b448:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 800b44a:	fb12 f303 	smulbb	r3, r2, r3
 800b44e:	b29a      	uxth	r2, r3
 800b450:	887b      	ldrh	r3, [r7, #2]
 800b452:	4413      	add	r3, r2
 800b454:	b299      	uxth	r1, r3
 800b456:	8d3c      	ldrh	r4, [r7, #40]	; 0x28
 800b458:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 800b45a:	2301      	movs	r3, #1
 800b45c:	9301      	str	r3, [sp, #4]
 800b45e:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 800b460:	9300      	str	r3, [sp, #0]
 800b462:	4623      	mov	r3, r4
 800b464:	f000 fbce 	bl	800bc04 <ILI9341_Draw_Rectangle>
        for (i=0; i<CHAR_HEIGHT; i++)
 800b468:	7dbb      	ldrb	r3, [r7, #22]
 800b46a:	3301      	adds	r3, #1
 800b46c:	75bb      	strb	r3, [r7, #22]
 800b46e:	7dbb      	ldrb	r3, [r7, #22]
 800b470:	2b07      	cmp	r3, #7
 800b472:	d990      	bls.n	800b396 <ILI9341_Draw_Char+0x72>
    for (j=0; j<CHAR_WIDTH; j++)
 800b474:	7d7b      	ldrb	r3, [r7, #21]
 800b476:	3301      	adds	r3, #1
 800b478:	757b      	strb	r3, [r7, #21]
 800b47a:	7d7b      	ldrb	r3, [r7, #21]
 800b47c:	2b05      	cmp	r3, #5
 800b47e:	d987      	bls.n	800b390 <ILI9341_Draw_Char+0x6c>
				}
            }
        }
    }
}
 800b480:	bf00      	nop
 800b482:	371c      	adds	r7, #28
 800b484:	46bd      	mov	sp, r7
 800b486:	bd90      	pop	{r4, r7, pc}
 800b488:	0800efa0 	.word	0x0800efa0

0800b48c <ILI9341_Draw_Text>:

/*Draws an array of characters (fonts imported from fonts.h) at x,Y location with specified font colour, size and Background colour*/
/*See fonts.h implementation of font on what is required for changing to a different font when switching fonts libraries*/
void ILI9341_Draw_Text(const char* Text, uint16_t x, uint16_t y, uint16_t colour, uint16_t size, uint16_t bgcolour)
{
 800b48c:	b590      	push	{r4, r7, lr}
 800b48e:	b087      	sub	sp, #28
 800b490:	af02      	add	r7, sp, #8
 800b492:	60f8      	str	r0, [r7, #12]
 800b494:	4608      	mov	r0, r1
 800b496:	4611      	mov	r1, r2
 800b498:	461a      	mov	r2, r3
 800b49a:	4603      	mov	r3, r0
 800b49c:	817b      	strh	r3, [r7, #10]
 800b49e:	460b      	mov	r3, r1
 800b4a0:	813b      	strh	r3, [r7, #8]
 800b4a2:	4613      	mov	r3, r2
 800b4a4:	80fb      	strh	r3, [r7, #6]
    /*if(size & 1)
    {
    	size = ((size >> 1) * 2);
    }*/

    while (*Text) {
 800b4a6:	e016      	b.n	800b4d6 <ILI9341_Draw_Text+0x4a>
        ILI9341_Draw_Char(*Text++, x, y, colour, size, bgcolour);
 800b4a8:	68fb      	ldr	r3, [r7, #12]
 800b4aa:	1c5a      	adds	r2, r3, #1
 800b4ac:	60fa      	str	r2, [r7, #12]
 800b4ae:	7818      	ldrb	r0, [r3, #0]
 800b4b0:	88fc      	ldrh	r4, [r7, #6]
 800b4b2:	893a      	ldrh	r2, [r7, #8]
 800b4b4:	8979      	ldrh	r1, [r7, #10]
 800b4b6:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800b4b8:	9301      	str	r3, [sp, #4]
 800b4ba:	8c3b      	ldrh	r3, [r7, #32]
 800b4bc:	9300      	str	r3, [sp, #0]
 800b4be:	4623      	mov	r3, r4
 800b4c0:	f7ff ff30 	bl	800b324 <ILI9341_Draw_Char>
        x += CHAR_WIDTH*size;
 800b4c4:	8c3b      	ldrh	r3, [r7, #32]
 800b4c6:	461a      	mov	r2, r3
 800b4c8:	0052      	lsls	r2, r2, #1
 800b4ca:	4413      	add	r3, r2
 800b4cc:	005b      	lsls	r3, r3, #1
 800b4ce:	b29a      	uxth	r2, r3
 800b4d0:	897b      	ldrh	r3, [r7, #10]
 800b4d2:	4413      	add	r3, r2
 800b4d4:	817b      	strh	r3, [r7, #10]
    while (*Text) {
 800b4d6:	68fb      	ldr	r3, [r7, #12]
 800b4d8:	781b      	ldrb	r3, [r3, #0]
 800b4da:	2b00      	cmp	r3, #0
 800b4dc:	d1e4      	bne.n	800b4a8 <ILI9341_Draw_Text+0x1c>
    }


}
 800b4de:	bf00      	nop
 800b4e0:	3714      	adds	r7, #20
 800b4e2:	46bd      	mov	sp, r7
 800b4e4:	bd90      	pop	{r4, r7, pc}
	...

0800b4e8 <ILI9341_FillScreenGradient>:
		GPIOC->ODR |= CS_Pin;
	}
}

void ILI9341_FillScreenGradient()
{
 800b4e8:	b580      	push	{r7, lr}
 800b4ea:	b084      	sub	sp, #16
 800b4ec:	af02      	add	r7, sp, #8
	uint16_t x = 0;
 800b4ee:	2300      	movs	r3, #0
 800b4f0:	80bb      	strh	r3, [r7, #4]
	//ILI9341_Draw_Text("Colour gradient", 10, 10, BLACK, 1, WHITE);
	//ILI9341_Draw_Text("Grayscale", 10, 20, BLACK, 1, WHITE);



	for(uint16_t i = 0; i <= (320); i++)
 800b4f2:	2300      	movs	r3, #0
 800b4f4:	80fb      	strh	r3, [r7, #6]
 800b4f6:	e010      	b.n	800b51a <ILI9341_FillScreenGradient+0x32>

		uint16_t RGB_color = Red + Green + Blue;
		ILI9341_Draw_Rectangle(i, x, 1, 240, RGB_color, AREA_CHUNK);
*/

	ILI9341_Draw_Rectangle(i, x, 1, 240, (uint16_t)fade_log_seq_data_table[i], AREA_CHUNK);
 800b4f8:	88fb      	ldrh	r3, [r7, #6]
 800b4fa:	4a0c      	ldr	r2, [pc, #48]	; (800b52c <ILI9341_FillScreenGradient+0x44>)
 800b4fc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800b500:	b29b      	uxth	r3, r3
 800b502:	88b9      	ldrh	r1, [r7, #4]
 800b504:	88f8      	ldrh	r0, [r7, #6]
 800b506:	2204      	movs	r2, #4
 800b508:	9201      	str	r2, [sp, #4]
 800b50a:	9300      	str	r3, [sp, #0]
 800b50c:	23f0      	movs	r3, #240	; 0xf0
 800b50e:	2201      	movs	r2, #1
 800b510:	f000 fb78 	bl	800bc04 <ILI9341_Draw_Rectangle>
	for(uint16_t i = 0; i <= (320); i++)
 800b514:	88fb      	ldrh	r3, [r7, #6]
 800b516:	3301      	adds	r3, #1
 800b518:	80fb      	strh	r3, [r7, #6]
 800b51a:	88fb      	ldrh	r3, [r7, #6]
 800b51c:	f5b3 7fa0 	cmp.w	r3, #320	; 0x140
 800b520:	d9ea      	bls.n	800b4f8 <ILI9341_FillScreenGradient+0x10>

	}
}
 800b522:	bf00      	nop
 800b524:	3708      	adds	r7, #8
 800b526:	46bd      	mov	sp, r7
 800b528:	bd80      	pop	{r7, pc}
 800b52a:	bf00      	nop
 800b52c:	20000214 	.word	0x20000214

0800b530 <ILI9341_Init>:
 *
 * Initialize LCD display
 *
 */
void ILI9341_Init(void)
{
 800b530:	b580      	push	{r7, lr}
 800b532:	af00      	add	r7, sp, #0

	_LCD_Enable();
 800b534:	f000 fc3a 	bl	800bdac <_LCD_Enable>
	ILI9341_SPI_Init();
 800b538:	f000 f908 	bl	800b74c <ILI9341_SPI_Init>
	_LCD_Reset();
 800b53c:	f000 fc46 	bl	800bdcc <_LCD_Reset>

	//SOFTWARE RESET
	_LCD_SendCommand(0x01);
 800b540:	2001      	movs	r0, #1
 800b542:	f000 fd11 	bl	800bf68 <_LCD_SendCommand>
	HAL_Delay(2000);
 800b546:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 800b54a:	f7fa faa9 	bl	8005aa0 <HAL_Delay>

	//POWER CONTROL A
	_LCD_SendCommand(0xCB);
 800b54e:	20cb      	movs	r0, #203	; 0xcb
 800b550:	f000 fd0a 	bl	800bf68 <_LCD_SendCommand>
	_LCD_SendData(0x39);
 800b554:	2039      	movs	r0, #57	; 0x39
 800b556:	f000 fd39 	bl	800bfcc <_LCD_SendData>
	_LCD_SendData(0x2C);
 800b55a:	202c      	movs	r0, #44	; 0x2c
 800b55c:	f000 fd36 	bl	800bfcc <_LCD_SendData>
	_LCD_SendData(0x00);
 800b560:	2000      	movs	r0, #0
 800b562:	f000 fd33 	bl	800bfcc <_LCD_SendData>
	_LCD_SendData(0x34);
 800b566:	2034      	movs	r0, #52	; 0x34
 800b568:	f000 fd30 	bl	800bfcc <_LCD_SendData>
	_LCD_SendData(0x02);
 800b56c:	2002      	movs	r0, #2
 800b56e:	f000 fd2d 	bl	800bfcc <_LCD_SendData>

	//POWER CONTROL B
	_LCD_SendCommand(0xCF);
 800b572:	20cf      	movs	r0, #207	; 0xcf
 800b574:	f000 fcf8 	bl	800bf68 <_LCD_SendCommand>
	_LCD_SendData(0x00);
 800b578:	2000      	movs	r0, #0
 800b57a:	f000 fd27 	bl	800bfcc <_LCD_SendData>
	_LCD_SendData(0xC1);
 800b57e:	20c1      	movs	r0, #193	; 0xc1
 800b580:	f000 fd24 	bl	800bfcc <_LCD_SendData>
	_LCD_SendData(0x30);
 800b584:	2030      	movs	r0, #48	; 0x30
 800b586:	f000 fd21 	bl	800bfcc <_LCD_SendData>

	//DRIVER TIMING CONTROL A
	_LCD_SendCommand(0xE8);
 800b58a:	20e8      	movs	r0, #232	; 0xe8
 800b58c:	f000 fcec 	bl	800bf68 <_LCD_SendCommand>
	_LCD_SendData(0x85);
 800b590:	2085      	movs	r0, #133	; 0x85
 800b592:	f000 fd1b 	bl	800bfcc <_LCD_SendData>
	_LCD_SendData(0x00);
 800b596:	2000      	movs	r0, #0
 800b598:	f000 fd18 	bl	800bfcc <_LCD_SendData>
	_LCD_SendData(0x78);
 800b59c:	2078      	movs	r0, #120	; 0x78
 800b59e:	f000 fd15 	bl	800bfcc <_LCD_SendData>

	//DRIVER TIMING CONTROL B
	_LCD_SendCommand(0xEA);
 800b5a2:	20ea      	movs	r0, #234	; 0xea
 800b5a4:	f000 fce0 	bl	800bf68 <_LCD_SendCommand>
	_LCD_SendData(0x00);
 800b5a8:	2000      	movs	r0, #0
 800b5aa:	f000 fd0f 	bl	800bfcc <_LCD_SendData>
	_LCD_SendData(0x00);
 800b5ae:	2000      	movs	r0, #0
 800b5b0:	f000 fd0c 	bl	800bfcc <_LCD_SendData>

	//POWER ON SEQUENCE CONTROL
	_LCD_SendCommand(0xED);
 800b5b4:	20ed      	movs	r0, #237	; 0xed
 800b5b6:	f000 fcd7 	bl	800bf68 <_LCD_SendCommand>
	_LCD_SendData(0x64);
 800b5ba:	2064      	movs	r0, #100	; 0x64
 800b5bc:	f000 fd06 	bl	800bfcc <_LCD_SendData>
	_LCD_SendData(0x03);
 800b5c0:	2003      	movs	r0, #3
 800b5c2:	f000 fd03 	bl	800bfcc <_LCD_SendData>
	_LCD_SendData(0x12);
 800b5c6:	2012      	movs	r0, #18
 800b5c8:	f000 fd00 	bl	800bfcc <_LCD_SendData>
	_LCD_SendData(0x81);
 800b5cc:	2081      	movs	r0, #129	; 0x81
 800b5ce:	f000 fcfd 	bl	800bfcc <_LCD_SendData>

	//PUMP RATIO CONTROL
	_LCD_SendCommand(0xF7);
 800b5d2:	20f7      	movs	r0, #247	; 0xf7
 800b5d4:	f000 fcc8 	bl	800bf68 <_LCD_SendCommand>
	_LCD_SendData(0x20);
 800b5d8:	2020      	movs	r0, #32
 800b5da:	f000 fcf7 	bl	800bfcc <_LCD_SendData>

	//POWER CONTROL,VRH[5:0]
	_LCD_SendCommand(0xC0);
 800b5de:	20c0      	movs	r0, #192	; 0xc0
 800b5e0:	f000 fcc2 	bl	800bf68 <_LCD_SendCommand>
	_LCD_SendData(0x23);
 800b5e4:	2023      	movs	r0, #35	; 0x23
 800b5e6:	f000 fcf1 	bl	800bfcc <_LCD_SendData>

	//POWER CONTROL,SAP[2:0];BT[3:0]
	_LCD_SendCommand(0xC1);
 800b5ea:	20c1      	movs	r0, #193	; 0xc1
 800b5ec:	f000 fcbc 	bl	800bf68 <_LCD_SendCommand>
	_LCD_SendData(0x10);
 800b5f0:	2010      	movs	r0, #16
 800b5f2:	f000 fceb 	bl	800bfcc <_LCD_SendData>

	//VCM CONTROL
	_LCD_SendCommand(0xC5);
 800b5f6:	20c5      	movs	r0, #197	; 0xc5
 800b5f8:	f000 fcb6 	bl	800bf68 <_LCD_SendCommand>
	_LCD_SendData(0x3E);
 800b5fc:	203e      	movs	r0, #62	; 0x3e
 800b5fe:	f000 fce5 	bl	800bfcc <_LCD_SendData>
	_LCD_SendData(0x28);
 800b602:	2028      	movs	r0, #40	; 0x28
 800b604:	f000 fce2 	bl	800bfcc <_LCD_SendData>

	//VCM CONTROL 2
	_LCD_SendCommand(0xC7);
 800b608:	20c7      	movs	r0, #199	; 0xc7
 800b60a:	f000 fcad 	bl	800bf68 <_LCD_SendCommand>
	_LCD_SendData(0x86);
 800b60e:	2086      	movs	r0, #134	; 0x86
 800b610:	f000 fcdc 	bl	800bfcc <_LCD_SendData>

	//MEMORY ACCESS CONTROL
	_LCD_SendCommand(0x36);
 800b614:	2036      	movs	r0, #54	; 0x36
 800b616:	f000 fca7 	bl	800bf68 <_LCD_SendCommand>
	_LCD_SendData(0x48);
 800b61a:	2048      	movs	r0, #72	; 0x48
 800b61c:	f000 fcd6 	bl	800bfcc <_LCD_SendData>


	//PIXEL FORMAT
	_LCD_SendCommand(0x3A);
 800b620:	203a      	movs	r0, #58	; 0x3a
 800b622:	f000 fca1 	bl	800bf68 <_LCD_SendCommand>
	_LCD_SendData(0x55);
 800b626:	2055      	movs	r0, #85	; 0x55
 800b628:	f000 fcd0 	bl	800bfcc <_LCD_SendData>

	//FRAME RATIO CONTROL, STANDARD RGB COLOR
	_LCD_SendCommand(0xB1);
 800b62c:	20b1      	movs	r0, #177	; 0xb1
 800b62e:	f000 fc9b 	bl	800bf68 <_LCD_SendCommand>
	_LCD_SendData(0x00);
 800b632:	2000      	movs	r0, #0
 800b634:	f000 fcca 	bl	800bfcc <_LCD_SendData>
	_LCD_SendData(0x18);
 800b638:	2018      	movs	r0, #24
 800b63a:	f000 fcc7 	bl	800bfcc <_LCD_SendData>

	//DISPLAY FUNCTION CONTROL
	_LCD_SendCommand(0xB6);
 800b63e:	20b6      	movs	r0, #182	; 0xb6
 800b640:	f000 fc92 	bl	800bf68 <_LCD_SendCommand>
	_LCD_SendData(0x08);
 800b644:	2008      	movs	r0, #8
 800b646:	f000 fcc1 	bl	800bfcc <_LCD_SendData>
	_LCD_SendData(0x82);
 800b64a:	2082      	movs	r0, #130	; 0x82
 800b64c:	f000 fcbe 	bl	800bfcc <_LCD_SendData>
	_LCD_SendData(0x27);
 800b650:	2027      	movs	r0, #39	; 0x27
 800b652:	f000 fcbb 	bl	800bfcc <_LCD_SendData>


	//3GAMMA FUNCTION DISABLE
	_LCD_SendCommand(0xF2);
 800b656:	20f2      	movs	r0, #242	; 0xf2
 800b658:	f000 fc86 	bl	800bf68 <_LCD_SendCommand>
	_LCD_SendData(0x00);
 800b65c:	2000      	movs	r0, #0
 800b65e:	f000 fcb5 	bl	800bfcc <_LCD_SendData>

	//GAMMA CURVE SELECTED
	_LCD_SendCommand(0x26);
 800b662:	2026      	movs	r0, #38	; 0x26
 800b664:	f000 fc80 	bl	800bf68 <_LCD_SendCommand>
	_LCD_SendData(0x01);
 800b668:	2001      	movs	r0, #1
 800b66a:	f000 fcaf 	bl	800bfcc <_LCD_SendData>

	//POSITIVE GAMMA CORRECTION
	_LCD_SendCommand(0xE0);
 800b66e:	20e0      	movs	r0, #224	; 0xe0
 800b670:	f000 fc7a 	bl	800bf68 <_LCD_SendCommand>
	_LCD_SendData(0x0F);
 800b674:	200f      	movs	r0, #15
 800b676:	f000 fca9 	bl	800bfcc <_LCD_SendData>
	_LCD_SendData(0x31);
 800b67a:	2031      	movs	r0, #49	; 0x31
 800b67c:	f000 fca6 	bl	800bfcc <_LCD_SendData>
	_LCD_SendData(0x2B);
 800b680:	202b      	movs	r0, #43	; 0x2b
 800b682:	f000 fca3 	bl	800bfcc <_LCD_SendData>
	_LCD_SendData(0x0C);
 800b686:	200c      	movs	r0, #12
 800b688:	f000 fca0 	bl	800bfcc <_LCD_SendData>
	_LCD_SendData(0x0E);
 800b68c:	200e      	movs	r0, #14
 800b68e:	f000 fc9d 	bl	800bfcc <_LCD_SendData>
	_LCD_SendData(0x08);
 800b692:	2008      	movs	r0, #8
 800b694:	f000 fc9a 	bl	800bfcc <_LCD_SendData>
	_LCD_SendData(0x4E);
 800b698:	204e      	movs	r0, #78	; 0x4e
 800b69a:	f000 fc97 	bl	800bfcc <_LCD_SendData>
	_LCD_SendData(0xF1);
 800b69e:	20f1      	movs	r0, #241	; 0xf1
 800b6a0:	f000 fc94 	bl	800bfcc <_LCD_SendData>
	_LCD_SendData(0x37);
 800b6a4:	2037      	movs	r0, #55	; 0x37
 800b6a6:	f000 fc91 	bl	800bfcc <_LCD_SendData>
	_LCD_SendData(0x07);
 800b6aa:	2007      	movs	r0, #7
 800b6ac:	f000 fc8e 	bl	800bfcc <_LCD_SendData>
	_LCD_SendData(0x10);
 800b6b0:	2010      	movs	r0, #16
 800b6b2:	f000 fc8b 	bl	800bfcc <_LCD_SendData>
	_LCD_SendData(0x03);
 800b6b6:	2003      	movs	r0, #3
 800b6b8:	f000 fc88 	bl	800bfcc <_LCD_SendData>
	_LCD_SendData(0x0E);
 800b6bc:	200e      	movs	r0, #14
 800b6be:	f000 fc85 	bl	800bfcc <_LCD_SendData>
	_LCD_SendData(0x09);
 800b6c2:	2009      	movs	r0, #9
 800b6c4:	f000 fc82 	bl	800bfcc <_LCD_SendData>
	_LCD_SendData(0x00);
 800b6c8:	2000      	movs	r0, #0
 800b6ca:	f000 fc7f 	bl	800bfcc <_LCD_SendData>

	//NEGATIVE GAMMA CORRECTION
	_LCD_SendCommand(0xE1);
 800b6ce:	20e1      	movs	r0, #225	; 0xe1
 800b6d0:	f000 fc4a 	bl	800bf68 <_LCD_SendCommand>
	_LCD_SendData(0x00);
 800b6d4:	2000      	movs	r0, #0
 800b6d6:	f000 fc79 	bl	800bfcc <_LCD_SendData>
	_LCD_SendData(0x0E);
 800b6da:	200e      	movs	r0, #14
 800b6dc:	f000 fc76 	bl	800bfcc <_LCD_SendData>
	_LCD_SendData(0x14);
 800b6e0:	2014      	movs	r0, #20
 800b6e2:	f000 fc73 	bl	800bfcc <_LCD_SendData>
	_LCD_SendData(0x03);
 800b6e6:	2003      	movs	r0, #3
 800b6e8:	f000 fc70 	bl	800bfcc <_LCD_SendData>
	_LCD_SendData(0x11);
 800b6ec:	2011      	movs	r0, #17
 800b6ee:	f000 fc6d 	bl	800bfcc <_LCD_SendData>
	_LCD_SendData(0x07);
 800b6f2:	2007      	movs	r0, #7
 800b6f4:	f000 fc6a 	bl	800bfcc <_LCD_SendData>
	_LCD_SendData(0x31);
 800b6f8:	2031      	movs	r0, #49	; 0x31
 800b6fa:	f000 fc67 	bl	800bfcc <_LCD_SendData>
	_LCD_SendData(0xC1);
 800b6fe:	20c1      	movs	r0, #193	; 0xc1
 800b700:	f000 fc64 	bl	800bfcc <_LCD_SendData>
	_LCD_SendData(0x48);
 800b704:	2048      	movs	r0, #72	; 0x48
 800b706:	f000 fc61 	bl	800bfcc <_LCD_SendData>
	_LCD_SendData(0x08);
 800b70a:	2008      	movs	r0, #8
 800b70c:	f000 fc5e 	bl	800bfcc <_LCD_SendData>
	_LCD_SendData(0x0F);
 800b710:	200f      	movs	r0, #15
 800b712:	f000 fc5b 	bl	800bfcc <_LCD_SendData>
	_LCD_SendData(0x0C);
 800b716:	200c      	movs	r0, #12
 800b718:	f000 fc58 	bl	800bfcc <_LCD_SendData>
	_LCD_SendData(0x31);
 800b71c:	2031      	movs	r0, #49	; 0x31
 800b71e:	f000 fc55 	bl	800bfcc <_LCD_SendData>
	_LCD_SendData(0x36);
 800b722:	2036      	movs	r0, #54	; 0x36
 800b724:	f000 fc52 	bl	800bfcc <_LCD_SendData>
	_LCD_SendData(0x0F);
 800b728:	200f      	movs	r0, #15
 800b72a:	f000 fc4f 	bl	800bfcc <_LCD_SendData>

	//EXIT SLEEP
	_LCD_SendCommand(0x11);
 800b72e:	2011      	movs	r0, #17
 800b730:	f000 fc1a 	bl	800bf68 <_LCD_SendCommand>
	HAL_Delay(240);
 800b734:	20f0      	movs	r0, #240	; 0xf0
 800b736:	f7fa f9b3 	bl	8005aa0 <HAL_Delay>

	//TURN ON DISPLAY
	_LCD_SendCommand(0x29);
 800b73a:	2029      	movs	r0, #41	; 0x29
 800b73c:	f000 fc14 	bl	800bf68 <_LCD_SendCommand>

	//STARTING ROTATION
	ILI9341_Set_Rotation(SCREEN_VERTICAL_1);
 800b740:	2000      	movs	r0, #0
 800b742:	f000 fae5 	bl	800bd10 <ILI9341_Set_Rotation>
}
 800b746:	bf00      	nop
 800b748:	bd80      	pop	{r7, pc}
	...

0800b74c <ILI9341_SPI_Init>:
 *
 * 	Initialise SPI peripheral
 *
 */
void ILI9341_SPI_Init(void)
{
 800b74c:	b480      	push	{r7}
 800b74e:	af00      	add	r7, sp, #0

   	// check SPI enabled
	if ((SPI_PERIPH->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800b750:	4b0b      	ldr	r3, [pc, #44]	; (800b780 <ILI9341_SPI_Init+0x34>)
 800b752:	681b      	ldr	r3, [r3, #0]
 800b754:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b758:	2b40      	cmp	r3, #64	; 0x40
 800b75a:	d005      	beq.n	800b768 <ILI9341_SPI_Init+0x1c>
	{
		SPI_PERIPH->CR1 |= SPI_CR1_SPE;
 800b75c:	4b08      	ldr	r3, [pc, #32]	; (800b780 <ILI9341_SPI_Init+0x34>)
 800b75e:	681b      	ldr	r3, [r3, #0]
 800b760:	4a07      	ldr	r2, [pc, #28]	; (800b780 <ILI9341_SPI_Init+0x34>)
 800b762:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800b766:	6013      	str	r3, [r2, #0]
	}

	LCD_CS_PORT->ODR &= ~(LCD_CS_PIN);
 800b768:	4b06      	ldr	r3, [pc, #24]	; (800b784 <ILI9341_SPI_Init+0x38>)
 800b76a:	695b      	ldr	r3, [r3, #20]
 800b76c:	4a05      	ldr	r2, [pc, #20]	; (800b784 <ILI9341_SPI_Init+0x38>)
 800b76e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800b772:	6153      	str	r3, [r2, #20]
}
 800b774:	bf00      	nop
 800b776:	46bd      	mov	sp, r7
 800b778:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b77c:	4770      	bx	lr
 800b77e:	bf00      	nop
 800b780:	40003c00 	.word	0x40003c00
 800b784:	48000400 	.word	0x48000400

0800b788 <ILI9341_Draw_Horizontal_Line>:
 *	Draw horizontal line
 *
 */

void ILI9341_Draw_Horizontal_Line(uint16_t xpos, uint16_t ypos, uint16_t width, uint16_t colour)
{
 800b788:	b590      	push	{r4, r7, lr}
 800b78a:	b085      	sub	sp, #20
 800b78c:	af02      	add	r7, sp, #8
 800b78e:	4604      	mov	r4, r0
 800b790:	4608      	mov	r0, r1
 800b792:	4611      	mov	r1, r2
 800b794:	461a      	mov	r2, r3
 800b796:	4623      	mov	r3, r4
 800b798:	80fb      	strh	r3, [r7, #6]
 800b79a:	4603      	mov	r3, r0
 800b79c:	80bb      	strh	r3, [r7, #4]
 800b79e:	460b      	mov	r3, r1
 800b7a0:	807b      	strh	r3, [r7, #2]
 800b7a2:	4613      	mov	r3, r2
 800b7a4:	803b      	strh	r3, [r7, #0]
	if((xpos >=LCD_WIDTH) || (ypos >=LCD_HEIGHT)) return;
 800b7a6:	4b1a      	ldr	r3, [pc, #104]	; (800b810 <ILI9341_Draw_Horizontal_Line+0x88>)
 800b7a8:	881b      	ldrh	r3, [r3, #0]
 800b7aa:	b29b      	uxth	r3, r3
 800b7ac:	88fa      	ldrh	r2, [r7, #6]
 800b7ae:	429a      	cmp	r2, r3
 800b7b0:	d229      	bcs.n	800b806 <ILI9341_Draw_Horizontal_Line+0x7e>
 800b7b2:	4b18      	ldr	r3, [pc, #96]	; (800b814 <ILI9341_Draw_Horizontal_Line+0x8c>)
 800b7b4:	881b      	ldrh	r3, [r3, #0]
 800b7b6:	b29b      	uxth	r3, r3
 800b7b8:	88ba      	ldrh	r2, [r7, #4]
 800b7ba:	429a      	cmp	r2, r3
 800b7bc:	d223      	bcs.n	800b806 <ILI9341_Draw_Horizontal_Line+0x7e>
	if(((xpos + width) - 1 ) >= LCD_WIDTH)
 800b7be:	88fa      	ldrh	r2, [r7, #6]
 800b7c0:	887b      	ldrh	r3, [r7, #2]
 800b7c2:	4413      	add	r3, r2
 800b7c4:	3b01      	subs	r3, #1
 800b7c6:	4a12      	ldr	r2, [pc, #72]	; (800b810 <ILI9341_Draw_Horizontal_Line+0x88>)
 800b7c8:	8812      	ldrh	r2, [r2, #0]
 800b7ca:	b292      	uxth	r2, r2
 800b7cc:	4293      	cmp	r3, r2
 800b7ce:	db05      	blt.n	800b7dc <ILI9341_Draw_Horizontal_Line+0x54>
		{
			width= LCD_WIDTH - xpos;
 800b7d0:	4b0f      	ldr	r3, [pc, #60]	; (800b810 <ILI9341_Draw_Horizontal_Line+0x88>)
 800b7d2:	881b      	ldrh	r3, [r3, #0]
 800b7d4:	b29a      	uxth	r2, r3
 800b7d6:	88fb      	ldrh	r3, [r7, #6]
 800b7d8:	1ad3      	subs	r3, r2, r3
 800b7da:	807b      	strh	r3, [r7, #2]
		}
	ILI9341_Set_Frame(	xpos,
							ypos,
							(xpos + width) - 1,
 800b7dc:	88fa      	ldrh	r2, [r7, #6]
 800b7de:	887b      	ldrh	r3, [r7, #2]
 800b7e0:	4413      	add	r3, r2
 800b7e2:	b29b      	uxth	r3, r3
	ILI9341_Set_Frame(	xpos,
 800b7e4:	3b01      	subs	r3, #1
 800b7e6:	b29a      	uxth	r2, r3
 800b7e8:	88bb      	ldrh	r3, [r7, #4]
 800b7ea:	88b9      	ldrh	r1, [r7, #4]
 800b7ec:	88f8      	ldrh	r0, [r7, #6]
 800b7ee:	f000 f85b 	bl	800b8a8 <ILI9341_Set_Frame>
							ypos);

	_LCD_Write_Frame(xpos, ypos, colour, width, LINE_CHUNK);
 800b7f2:	887c      	ldrh	r4, [r7, #2]
 800b7f4:	883a      	ldrh	r2, [r7, #0]
 800b7f6:	88b9      	ldrh	r1, [r7, #4]
 800b7f8:	88f8      	ldrh	r0, [r7, #6]
 800b7fa:	2303      	movs	r3, #3
 800b7fc:	9300      	str	r3, [sp, #0]
 800b7fe:	4623      	mov	r3, r4
 800b800:	f000 fb02 	bl	800be08 <_LCD_Write_Frame>
 800b804:	e000      	b.n	800b808 <ILI9341_Draw_Horizontal_Line+0x80>
	if((xpos >=LCD_WIDTH) || (ypos >=LCD_HEIGHT)) return;
 800b806:	bf00      	nop
}
 800b808:	370c      	adds	r7, #12
 800b80a:	46bd      	mov	sp, r7
 800b80c:	bd90      	pop	{r4, r7, pc}
 800b80e:	bf00      	nop
 800b810:	2000020e 	.word	0x2000020e
 800b814:	2000020c 	.word	0x2000020c

0800b818 <ILI9341_Draw_Vertical_Line>:
 *
 *  Draw vertical line
 *
 */
void ILI9341_Draw_Vertical_Line(uint16_t xpos, uint16_t ypos, uint16_t height, uint16_t colour)
{
 800b818:	b590      	push	{r4, r7, lr}
 800b81a:	b085      	sub	sp, #20
 800b81c:	af02      	add	r7, sp, #8
 800b81e:	4604      	mov	r4, r0
 800b820:	4608      	mov	r0, r1
 800b822:	4611      	mov	r1, r2
 800b824:	461a      	mov	r2, r3
 800b826:	4623      	mov	r3, r4
 800b828:	80fb      	strh	r3, [r7, #6]
 800b82a:	4603      	mov	r3, r0
 800b82c:	80bb      	strh	r3, [r7, #4]
 800b82e:	460b      	mov	r3, r1
 800b830:	807b      	strh	r3, [r7, #2]
 800b832:	4613      	mov	r3, r2
 800b834:	803b      	strh	r3, [r7, #0]
	if((xpos >= LCD_WIDTH) || (ypos >= LCD_HEIGHT)) return;
 800b836:	4b1a      	ldr	r3, [pc, #104]	; (800b8a0 <ILI9341_Draw_Vertical_Line+0x88>)
 800b838:	881b      	ldrh	r3, [r3, #0]
 800b83a:	b29b      	uxth	r3, r3
 800b83c:	88fa      	ldrh	r2, [r7, #6]
 800b83e:	429a      	cmp	r2, r3
 800b840:	d229      	bcs.n	800b896 <ILI9341_Draw_Vertical_Line+0x7e>
 800b842:	4b18      	ldr	r3, [pc, #96]	; (800b8a4 <ILI9341_Draw_Vertical_Line+0x8c>)
 800b844:	881b      	ldrh	r3, [r3, #0]
 800b846:	b29b      	uxth	r3, r3
 800b848:	88ba      	ldrh	r2, [r7, #4]
 800b84a:	429a      	cmp	r2, r3
 800b84c:	d223      	bcs.n	800b896 <ILI9341_Draw_Vertical_Line+0x7e>
	if(((ypos + height) - 1) >= LCD_HEIGHT)
 800b84e:	88ba      	ldrh	r2, [r7, #4]
 800b850:	887b      	ldrh	r3, [r7, #2]
 800b852:	4413      	add	r3, r2
 800b854:	3b01      	subs	r3, #1
 800b856:	4a13      	ldr	r2, [pc, #76]	; (800b8a4 <ILI9341_Draw_Vertical_Line+0x8c>)
 800b858:	8812      	ldrh	r2, [r2, #0]
 800b85a:	b292      	uxth	r2, r2
 800b85c:	4293      	cmp	r3, r2
 800b85e:	db05      	blt.n	800b86c <ILI9341_Draw_Vertical_Line+0x54>
		{
			height= LCD_HEIGHT - ypos;
 800b860:	4b10      	ldr	r3, [pc, #64]	; (800b8a4 <ILI9341_Draw_Vertical_Line+0x8c>)
 800b862:	881b      	ldrh	r3, [r3, #0]
 800b864:	b29a      	uxth	r2, r3
 800b866:	88bb      	ldrh	r3, [r7, #4]
 800b868:	1ad3      	subs	r3, r2, r3
 800b86a:	807b      	strh	r3, [r7, #2]
		}
	ILI9341_Set_Frame(xpos, ypos, xpos, (ypos + height) - 1);
 800b86c:	88ba      	ldrh	r2, [r7, #4]
 800b86e:	887b      	ldrh	r3, [r7, #2]
 800b870:	4413      	add	r3, r2
 800b872:	b29b      	uxth	r3, r3
 800b874:	3b01      	subs	r3, #1
 800b876:	b29b      	uxth	r3, r3
 800b878:	88fa      	ldrh	r2, [r7, #6]
 800b87a:	88b9      	ldrh	r1, [r7, #4]
 800b87c:	88f8      	ldrh	r0, [r7, #6]
 800b87e:	f000 f813 	bl	800b8a8 <ILI9341_Set_Frame>
	_LCD_Write_Frame(xpos, ypos, colour, height, LINE_CHUNK);
 800b882:	887c      	ldrh	r4, [r7, #2]
 800b884:	883a      	ldrh	r2, [r7, #0]
 800b886:	88b9      	ldrh	r1, [r7, #4]
 800b888:	88f8      	ldrh	r0, [r7, #6]
 800b88a:	2303      	movs	r3, #3
 800b88c:	9300      	str	r3, [sp, #0]
 800b88e:	4623      	mov	r3, r4
 800b890:	f000 faba 	bl	800be08 <_LCD_Write_Frame>
 800b894:	e000      	b.n	800b898 <ILI9341_Draw_Vertical_Line+0x80>
	if((xpos >= LCD_WIDTH) || (ypos >= LCD_HEIGHT)) return;
 800b896:	bf00      	nop
}
 800b898:	370c      	adds	r7, #12
 800b89a:	46bd      	mov	sp, r7
 800b89c:	bd90      	pop	{r4, r7, pc}
 800b89e:	bf00      	nop
 800b8a0:	2000020e 	.word	0x2000020e
 800b8a4:	2000020c 	.word	0x2000020c

0800b8a8 <ILI9341_Set_Frame>:
 *	bottom right of area (ec, ep):
 *	ec 	- 	"end column"
 *	ep	- 	"end page"
 */
void ILI9341_Set_Frame(uint16_t sc, uint16_t sp, uint16_t ec, uint16_t ep)
{
 800b8a8:	b590      	push	{r4, r7, lr}
 800b8aa:	b083      	sub	sp, #12
 800b8ac:	af00      	add	r7, sp, #0
 800b8ae:	4604      	mov	r4, r0
 800b8b0:	4608      	mov	r0, r1
 800b8b2:	4611      	mov	r1, r2
 800b8b4:	461a      	mov	r2, r3
 800b8b6:	4623      	mov	r3, r4
 800b8b8:	80fb      	strh	r3, [r7, #6]
 800b8ba:	4603      	mov	r3, r0
 800b8bc:	80bb      	strh	r3, [r7, #4]
 800b8be:	460b      	mov	r3, r1
 800b8c0:	807b      	strh	r3, [r7, #2]
 800b8c2:	4613      	mov	r3, r2
 800b8c4:	803b      	strh	r3, [r7, #0]
	// send "Column Address Set" command
	_LCD_SendCommand(0x2A);
 800b8c6:	202a      	movs	r0, #42	; 0x2a
 800b8c8:	f000 fb4e 	bl	800bf68 <_LCD_SendCommand>
	_LCD_SendData(sc >> 8);
 800b8cc:	88fb      	ldrh	r3, [r7, #6]
 800b8ce:	0a1b      	lsrs	r3, r3, #8
 800b8d0:	b29b      	uxth	r3, r3
 800b8d2:	b2db      	uxtb	r3, r3
 800b8d4:	4618      	mov	r0, r3
 800b8d6:	f000 fb79 	bl	800bfcc <_LCD_SendData>
	_LCD_SendData(sc);
 800b8da:	88fb      	ldrh	r3, [r7, #6]
 800b8dc:	b2db      	uxtb	r3, r3
 800b8de:	4618      	mov	r0, r3
 800b8e0:	f000 fb74 	bl	800bfcc <_LCD_SendData>
	_LCD_SendData(ec >> 8);
 800b8e4:	887b      	ldrh	r3, [r7, #2]
 800b8e6:	0a1b      	lsrs	r3, r3, #8
 800b8e8:	b29b      	uxth	r3, r3
 800b8ea:	b2db      	uxtb	r3, r3
 800b8ec:	4618      	mov	r0, r3
 800b8ee:	f000 fb6d 	bl	800bfcc <_LCD_SendData>
	_LCD_SendData(ec);
 800b8f2:	887b      	ldrh	r3, [r7, #2]
 800b8f4:	b2db      	uxtb	r3, r3
 800b8f6:	4618      	mov	r0, r3
 800b8f8:	f000 fb68 	bl	800bfcc <_LCD_SendData>

	// send "Page Address Set" command
	_LCD_SendCommand(0x2B);
 800b8fc:	202b      	movs	r0, #43	; 0x2b
 800b8fe:	f000 fb33 	bl	800bf68 <_LCD_SendCommand>
	_LCD_SendData(sp >> 8);
 800b902:	88bb      	ldrh	r3, [r7, #4]
 800b904:	0a1b      	lsrs	r3, r3, #8
 800b906:	b29b      	uxth	r3, r3
 800b908:	b2db      	uxtb	r3, r3
 800b90a:	4618      	mov	r0, r3
 800b90c:	f000 fb5e 	bl	800bfcc <_LCD_SendData>
	_LCD_SendData(sp);
 800b910:	88bb      	ldrh	r3, [r7, #4]
 800b912:	b2db      	uxtb	r3, r3
 800b914:	4618      	mov	r0, r3
 800b916:	f000 fb59 	bl	800bfcc <_LCD_SendData>
	_LCD_SendData(ep >> 8);
 800b91a:	883b      	ldrh	r3, [r7, #0]
 800b91c:	0a1b      	lsrs	r3, r3, #8
 800b91e:	b29b      	uxth	r3, r3
 800b920:	b2db      	uxtb	r3, r3
 800b922:	4618      	mov	r0, r3
 800b924:	f000 fb52 	bl	800bfcc <_LCD_SendData>
	_LCD_SendData(ep);
 800b928:	883b      	ldrh	r3, [r7, #0]
 800b92a:	b2db      	uxtb	r3, r3
 800b92c:	4618      	mov	r0, r3
 800b92e:	f000 fb4d 	bl	800bfcc <_LCD_SendData>

	_LCD_SendCommand(0x2C);
 800b932:	202c      	movs	r0, #44	; 0x2c
 800b934:	f000 fb18 	bl	800bf68 <_LCD_SendCommand>
}
 800b938:	bf00      	nop
 800b93a:	370c      	adds	r7, #12
 800b93c:	46bd      	mov	sp, r7
 800b93e:	bd90      	pop	{r4, r7, pc}

0800b940 <ILI9341_Fill_Screen>:
 *
 * 	Sets address (entire screen) and Sends height*width ammount of colour information to LCD
 *
 */
void ILI9341_Fill_Screen(uint16_t colour)
{
 800b940:	b580      	push	{r7, lr}
 800b942:	b084      	sub	sp, #16
 800b944:	af02      	add	r7, sp, #8
 800b946:	4603      	mov	r3, r0
 800b948:	80fb      	strh	r3, [r7, #6]
	ILI9341_Set_Frame(0,0,LCD_WIDTH,LCD_HEIGHT);
 800b94a:	4b10      	ldr	r3, [pc, #64]	; (800b98c <ILI9341_Fill_Screen+0x4c>)
 800b94c:	881b      	ldrh	r3, [r3, #0]
 800b94e:	b29a      	uxth	r2, r3
 800b950:	4b0f      	ldr	r3, [pc, #60]	; (800b990 <ILI9341_Fill_Screen+0x50>)
 800b952:	881b      	ldrh	r3, [r3, #0]
 800b954:	b29b      	uxth	r3, r3
 800b956:	2100      	movs	r1, #0
 800b958:	2000      	movs	r0, #0
 800b95a:	f7ff ffa5 	bl	800b8a8 <ILI9341_Set_Frame>
	_LCD_Write_Frame(0, 0, colour, LCD_WIDTH*LCD_HEIGHT, AREA_CHUNK);
 800b95e:	4b0b      	ldr	r3, [pc, #44]	; (800b98c <ILI9341_Fill_Screen+0x4c>)
 800b960:	881b      	ldrh	r3, [r3, #0]
 800b962:	b29b      	uxth	r3, r3
 800b964:	461a      	mov	r2, r3
 800b966:	4b0a      	ldr	r3, [pc, #40]	; (800b990 <ILI9341_Fill_Screen+0x50>)
 800b968:	881b      	ldrh	r3, [r3, #0]
 800b96a:	b29b      	uxth	r3, r3
 800b96c:	fb03 f302 	mul.w	r3, r3, r2
 800b970:	4619      	mov	r1, r3
 800b972:	88fa      	ldrh	r2, [r7, #6]
 800b974:	2304      	movs	r3, #4
 800b976:	9300      	str	r3, [sp, #0]
 800b978:	460b      	mov	r3, r1
 800b97a:	2100      	movs	r1, #0
 800b97c:	2000      	movs	r0, #0
 800b97e:	f000 fa43 	bl	800be08 <_LCD_Write_Frame>
}
 800b982:	bf00      	nop
 800b984:	3708      	adds	r7, #8
 800b986:	46bd      	mov	sp, r7
 800b988:	bd80      	pop	{r7, pc}
 800b98a:	bf00      	nop
 800b98c:	2000020e 	.word	0x2000020e
 800b990:	2000020c 	.word	0x2000020c

0800b994 <ILI9341_Draw_Pixel>:
 * 	Using pixels to draw big simple structures is not recommended as it is really slow
 * 	Try using either rectangles or lines if possible
 *
 */
void ILI9341_Draw_Pixel(uint16_t x,uint16_t y,uint16_t colour)
{
 800b994:	b580      	push	{r7, lr}
 800b996:	b08c      	sub	sp, #48	; 0x30
 800b998:	af00      	add	r7, sp, #0
 800b99a:	4603      	mov	r3, r0
 800b99c:	80fb      	strh	r3, [r7, #6]
 800b99e:	460b      	mov	r3, r1
 800b9a0:	80bb      	strh	r3, [r7, #4]
 800b9a2:	4613      	mov	r3, r2
 800b9a4:	807b      	strh	r3, [r7, #2]
	if((x >= LCD_WIDTH) || (y >= LCD_HEIGHT)) return;	//OUT OF BOUNDS!
 800b9a6:	4b94      	ldr	r3, [pc, #592]	; (800bbf8 <ILI9341_Draw_Pixel+0x264>)
 800b9a8:	881b      	ldrh	r3, [r3, #0]
 800b9aa:	b29b      	uxth	r3, r3
 800b9ac:	88fa      	ldrh	r2, [r7, #6]
 800b9ae:	429a      	cmp	r2, r3
 800b9b0:	f080 811e 	bcs.w	800bbf0 <ILI9341_Draw_Pixel+0x25c>
 800b9b4:	4b91      	ldr	r3, [pc, #580]	; (800bbfc <ILI9341_Draw_Pixel+0x268>)
 800b9b6:	881b      	ldrh	r3, [r3, #0]
 800b9b8:	b29b      	uxth	r3, r3
 800b9ba:	88ba      	ldrh	r2, [r7, #4]
 800b9bc:	429a      	cmp	r2, r3
 800b9be:	f080 8117 	bcs.w	800bbf0 <ILI9341_Draw_Pixel+0x25c>

	//ADDRESS
	LCD_DC_PORT->ODR &= ~(LCD_DC_PIN);
 800b9c2:	4b8f      	ldr	r3, [pc, #572]	; (800bc00 <ILI9341_Draw_Pixel+0x26c>)
 800b9c4:	695b      	ldr	r3, [r3, #20]
 800b9c6:	4a8e      	ldr	r2, [pc, #568]	; (800bc00 <ILI9341_Draw_Pixel+0x26c>)
 800b9c8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800b9cc:	6153      	str	r3, [r2, #20]
	LCD_CS_PORT->ODR &= ~(LCD_CS_PIN);
 800b9ce:	4b8c      	ldr	r3, [pc, #560]	; (800bc00 <ILI9341_Draw_Pixel+0x26c>)
 800b9d0:	695b      	ldr	r3, [r3, #20]
 800b9d2:	4a8b      	ldr	r2, [pc, #556]	; (800bc00 <ILI9341_Draw_Pixel+0x26c>)
 800b9d4:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800b9d8:	6153      	str	r3, [r2, #20]

	_SPI_SendByte(0x2A, 0, 0);
 800b9da:	2200      	movs	r2, #0
 800b9dc:	2100      	movs	r1, #0
 800b9de:	202a      	movs	r0, #42	; 0x2a
 800b9e0:	f000 fb26 	bl	800c030 <_SPI_SendByte>

	// Additional SPI CS "low" hold
	for(int s=0; s < SPI_DELAY_HOLD; s++)
 800b9e4:	2300      	movs	r3, #0
 800b9e6:	62fb      	str	r3, [r7, #44]	; 0x2c
 800b9e8:	e008      	b.n	800b9fc <ILI9341_Draw_Pixel+0x68>
		LCD_CS_PORT->ODR &= ~(LCD_CS_PIN);
 800b9ea:	4b85      	ldr	r3, [pc, #532]	; (800bc00 <ILI9341_Draw_Pixel+0x26c>)
 800b9ec:	695b      	ldr	r3, [r3, #20]
 800b9ee:	4a84      	ldr	r2, [pc, #528]	; (800bc00 <ILI9341_Draw_Pixel+0x26c>)
 800b9f0:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800b9f4:	6153      	str	r3, [r2, #20]
	for(int s=0; s < SPI_DELAY_HOLD; s++)
 800b9f6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b9f8:	3301      	adds	r3, #1
 800b9fa:	62fb      	str	r3, [r7, #44]	; 0x2c
 800b9fc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b9fe:	2b02      	cmp	r3, #2
 800ba00:	ddf3      	ble.n	800b9ea <ILI9341_Draw_Pixel+0x56>

	LCD_DC_PORT->ODR |= LCD_DC_PIN;
 800ba02:	4b7f      	ldr	r3, [pc, #508]	; (800bc00 <ILI9341_Draw_Pixel+0x26c>)
 800ba04:	695b      	ldr	r3, [r3, #20]
 800ba06:	4a7e      	ldr	r2, [pc, #504]	; (800bc00 <ILI9341_Draw_Pixel+0x26c>)
 800ba08:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800ba0c:	6153      	str	r3, [r2, #20]
	LCD_CS_PORT->ODR |= LCD_CS_PIN;
 800ba0e:	4b7c      	ldr	r3, [pc, #496]	; (800bc00 <ILI9341_Draw_Pixel+0x26c>)
 800ba10:	695b      	ldr	r3, [r3, #20]
 800ba12:	4a7b      	ldr	r2, [pc, #492]	; (800bc00 <ILI9341_Draw_Pixel+0x26c>)
 800ba14:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800ba18:	6153      	str	r3, [r2, #20]

	//XDATA
	LCD_CS_PORT->ODR &= ~(LCD_CS_PIN);
 800ba1a:	4b79      	ldr	r3, [pc, #484]	; (800bc00 <ILI9341_Draw_Pixel+0x26c>)
 800ba1c:	695b      	ldr	r3, [r3, #20]
 800ba1e:	4a78      	ldr	r2, [pc, #480]	; (800bc00 <ILI9341_Draw_Pixel+0x26c>)
 800ba20:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800ba24:	6153      	str	r3, [r2, #20]
	unsigned char Temp_Buffer[4] =
 800ba26:	88fb      	ldrh	r3, [r7, #6]
 800ba28:	0a1b      	lsrs	r3, r3, #8
 800ba2a:	b29b      	uxth	r3, r3
 800ba2c:	b2db      	uxtb	r3, r3
 800ba2e:	753b      	strb	r3, [r7, #20]
 800ba30:	88fb      	ldrh	r3, [r7, #6]
 800ba32:	b2db      	uxtb	r3, r3
 800ba34:	757b      	strb	r3, [r7, #21]
	{
			x >> 8,
			x,
			(x + 1) >> 8,
 800ba36:	88fb      	ldrh	r3, [r7, #6]
 800ba38:	3301      	adds	r3, #1
 800ba3a:	121b      	asrs	r3, r3, #8
	unsigned char Temp_Buffer[4] =
 800ba3c:	b2db      	uxtb	r3, r3
 800ba3e:	75bb      	strb	r3, [r7, #22]
			(x + 1)
 800ba40:	88fb      	ldrh	r3, [r7, #6]
 800ba42:	b2db      	uxtb	r3, r3
 800ba44:	3301      	adds	r3, #1
 800ba46:	b2db      	uxtb	r3, r3
	unsigned char Temp_Buffer[4] =
 800ba48:	75fb      	strb	r3, [r7, #23]
	};

	_SPI_SendByteMultiByte(Temp_Buffer, 4, 0, 9);
 800ba4a:	f107 0014 	add.w	r0, r7, #20
 800ba4e:	2309      	movs	r3, #9
 800ba50:	2200      	movs	r2, #0
 800ba52:	2104      	movs	r1, #4
 800ba54:	f000 fb02 	bl	800c05c <_SPI_SendByteMultiByte>
	//HAL_SPI_Transmit(HSPI_INSTANCE, Temp_Buffer, 4, 1 );

	// Additional SPI CS "low" hold
	for(int s=0; s < SPI_DELAY_HOLD; s++)
 800ba58:	2300      	movs	r3, #0
 800ba5a:	62bb      	str	r3, [r7, #40]	; 0x28
 800ba5c:	e008      	b.n	800ba70 <ILI9341_Draw_Pixel+0xdc>
		LCD_CS_PORT->ODR &= ~(LCD_CS_PIN);
 800ba5e:	4b68      	ldr	r3, [pc, #416]	; (800bc00 <ILI9341_Draw_Pixel+0x26c>)
 800ba60:	695b      	ldr	r3, [r3, #20]
 800ba62:	4a67      	ldr	r2, [pc, #412]	; (800bc00 <ILI9341_Draw_Pixel+0x26c>)
 800ba64:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800ba68:	6153      	str	r3, [r2, #20]
	for(int s=0; s < SPI_DELAY_HOLD; s++)
 800ba6a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ba6c:	3301      	adds	r3, #1
 800ba6e:	62bb      	str	r3, [r7, #40]	; 0x28
 800ba70:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ba72:	2b02      	cmp	r3, #2
 800ba74:	ddf3      	ble.n	800ba5e <ILI9341_Draw_Pixel+0xca>

	LCD_CS_PORT->ODR |= LCD_CS_PIN;
 800ba76:	4b62      	ldr	r3, [pc, #392]	; (800bc00 <ILI9341_Draw_Pixel+0x26c>)
 800ba78:	695b      	ldr	r3, [r3, #20]
 800ba7a:	4a61      	ldr	r2, [pc, #388]	; (800bc00 <ILI9341_Draw_Pixel+0x26c>)
 800ba7c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800ba80:	6153      	str	r3, [r2, #20]

	//ADDRESS
	LCD_DC_PORT->ODR &= ~(LCD_DC_PIN);
 800ba82:	4b5f      	ldr	r3, [pc, #380]	; (800bc00 <ILI9341_Draw_Pixel+0x26c>)
 800ba84:	695b      	ldr	r3, [r3, #20]
 800ba86:	4a5e      	ldr	r2, [pc, #376]	; (800bc00 <ILI9341_Draw_Pixel+0x26c>)
 800ba88:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800ba8c:	6153      	str	r3, [r2, #20]
	LCD_CS_PORT->ODR &= ~(LCD_CS_PIN);
 800ba8e:	4b5c      	ldr	r3, [pc, #368]	; (800bc00 <ILI9341_Draw_Pixel+0x26c>)
 800ba90:	695b      	ldr	r3, [r3, #20]
 800ba92:	4a5b      	ldr	r2, [pc, #364]	; (800bc00 <ILI9341_Draw_Pixel+0x26c>)
 800ba94:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800ba98:	6153      	str	r3, [r2, #20]

	_SPI_SendByte(0x2B, 0, 0);
 800ba9a:	2200      	movs	r2, #0
 800ba9c:	2100      	movs	r1, #0
 800ba9e:	202b      	movs	r0, #43	; 0x2b
 800baa0:	f000 fac6 	bl	800c030 <_SPI_SendByte>

	// Additional SPI CS "low" hold
	for(int s=0; s < SPI_DELAY_HOLD; s++)
 800baa4:	2300      	movs	r3, #0
 800baa6:	627b      	str	r3, [r7, #36]	; 0x24
 800baa8:	e008      	b.n	800babc <ILI9341_Draw_Pixel+0x128>
		LCD_CS_PORT->ODR &= ~(LCD_CS_PIN);
 800baaa:	4b55      	ldr	r3, [pc, #340]	; (800bc00 <ILI9341_Draw_Pixel+0x26c>)
 800baac:	695b      	ldr	r3, [r3, #20]
 800baae:	4a54      	ldr	r2, [pc, #336]	; (800bc00 <ILI9341_Draw_Pixel+0x26c>)
 800bab0:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800bab4:	6153      	str	r3, [r2, #20]
	for(int s=0; s < SPI_DELAY_HOLD; s++)
 800bab6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bab8:	3301      	adds	r3, #1
 800baba:	627b      	str	r3, [r7, #36]	; 0x24
 800babc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800babe:	2b02      	cmp	r3, #2
 800bac0:	ddf3      	ble.n	800baaa <ILI9341_Draw_Pixel+0x116>

	LCD_DC_PORT->ODR |= LCD_DC_PIN;
 800bac2:	4b4f      	ldr	r3, [pc, #316]	; (800bc00 <ILI9341_Draw_Pixel+0x26c>)
 800bac4:	695b      	ldr	r3, [r3, #20]
 800bac6:	4a4e      	ldr	r2, [pc, #312]	; (800bc00 <ILI9341_Draw_Pixel+0x26c>)
 800bac8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800bacc:	6153      	str	r3, [r2, #20]
	LCD_CS_PORT->ODR |= LCD_CS_PIN;
 800bace:	4b4c      	ldr	r3, [pc, #304]	; (800bc00 <ILI9341_Draw_Pixel+0x26c>)
 800bad0:	695b      	ldr	r3, [r3, #20]
 800bad2:	4a4b      	ldr	r2, [pc, #300]	; (800bc00 <ILI9341_Draw_Pixel+0x26c>)
 800bad4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800bad8:	6153      	str	r3, [r2, #20]

	//YDATA
	LCD_CS_PORT->ODR &= ~(LCD_CS_PIN);
 800bada:	4b49      	ldr	r3, [pc, #292]	; (800bc00 <ILI9341_Draw_Pixel+0x26c>)
 800badc:	695b      	ldr	r3, [r3, #20]
 800bade:	4a48      	ldr	r2, [pc, #288]	; (800bc00 <ILI9341_Draw_Pixel+0x26c>)
 800bae0:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800bae4:	6153      	str	r3, [r2, #20]
	unsigned char Temp_Buffer1[4] =
 800bae6:	88bb      	ldrh	r3, [r7, #4]
 800bae8:	0a1b      	lsrs	r3, r3, #8
 800baea:	b29b      	uxth	r3, r3
 800baec:	b2db      	uxtb	r3, r3
 800baee:	743b      	strb	r3, [r7, #16]
 800baf0:	88bb      	ldrh	r3, [r7, #4]
 800baf2:	b2db      	uxtb	r3, r3
 800baf4:	747b      	strb	r3, [r7, #17]
	{
			y >> 8,
			y,
			(y + 1) >> 8,
 800baf6:	88bb      	ldrh	r3, [r7, #4]
 800baf8:	3301      	adds	r3, #1
 800bafa:	121b      	asrs	r3, r3, #8
	unsigned char Temp_Buffer1[4] =
 800bafc:	b2db      	uxtb	r3, r3
 800bafe:	74bb      	strb	r3, [r7, #18]
			(y + 1)
 800bb00:	88bb      	ldrh	r3, [r7, #4]
 800bb02:	b2db      	uxtb	r3, r3
 800bb04:	3301      	adds	r3, #1
 800bb06:	b2db      	uxtb	r3, r3
	unsigned char Temp_Buffer1[4] =
 800bb08:	74fb      	strb	r3, [r7, #19]
	};

	//HAL_SPI_Transmit(HSPI_INSTANCE, Temp_Buffer1, 4, 1 );
	_SPI_SendByteMultiByte(Temp_Buffer1, 4, 0, 9);
 800bb0a:	f107 0010 	add.w	r0, r7, #16
 800bb0e:	2309      	movs	r3, #9
 800bb10:	2200      	movs	r2, #0
 800bb12:	2104      	movs	r1, #4
 800bb14:	f000 faa2 	bl	800c05c <_SPI_SendByteMultiByte>

	// Additional SPI CS "low" hold
	for(int s=0; s < SPI_DELAY_HOLD; s++)
 800bb18:	2300      	movs	r3, #0
 800bb1a:	623b      	str	r3, [r7, #32]
 800bb1c:	e008      	b.n	800bb30 <ILI9341_Draw_Pixel+0x19c>
		LCD_CS_PORT->ODR &= ~(LCD_CS_PIN);
 800bb1e:	4b38      	ldr	r3, [pc, #224]	; (800bc00 <ILI9341_Draw_Pixel+0x26c>)
 800bb20:	695b      	ldr	r3, [r3, #20]
 800bb22:	4a37      	ldr	r2, [pc, #220]	; (800bc00 <ILI9341_Draw_Pixel+0x26c>)
 800bb24:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800bb28:	6153      	str	r3, [r2, #20]
	for(int s=0; s < SPI_DELAY_HOLD; s++)
 800bb2a:	6a3b      	ldr	r3, [r7, #32]
 800bb2c:	3301      	adds	r3, #1
 800bb2e:	623b      	str	r3, [r7, #32]
 800bb30:	6a3b      	ldr	r3, [r7, #32]
 800bb32:	2b02      	cmp	r3, #2
 800bb34:	ddf3      	ble.n	800bb1e <ILI9341_Draw_Pixel+0x18a>

	LCD_CS_PORT->ODR |= LCD_CS_PIN;
 800bb36:	4b32      	ldr	r3, [pc, #200]	; (800bc00 <ILI9341_Draw_Pixel+0x26c>)
 800bb38:	695b      	ldr	r3, [r3, #20]
 800bb3a:	4a31      	ldr	r2, [pc, #196]	; (800bc00 <ILI9341_Draw_Pixel+0x26c>)
 800bb3c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800bb40:	6153      	str	r3, [r2, #20]

	//ADDRESS
	LCD_DC_PORT->ODR &= ~(LCD_DC_PIN);
 800bb42:	4b2f      	ldr	r3, [pc, #188]	; (800bc00 <ILI9341_Draw_Pixel+0x26c>)
 800bb44:	695b      	ldr	r3, [r3, #20]
 800bb46:	4a2e      	ldr	r2, [pc, #184]	; (800bc00 <ILI9341_Draw_Pixel+0x26c>)
 800bb48:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800bb4c:	6153      	str	r3, [r2, #20]
	LCD_CS_PORT->ODR &= ~(LCD_CS_PIN);
 800bb4e:	4b2c      	ldr	r3, [pc, #176]	; (800bc00 <ILI9341_Draw_Pixel+0x26c>)
 800bb50:	695b      	ldr	r3, [r3, #20]
 800bb52:	4a2b      	ldr	r2, [pc, #172]	; (800bc00 <ILI9341_Draw_Pixel+0x26c>)
 800bb54:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800bb58:	6153      	str	r3, [r2, #20]

	_SPI_SendByte(0x2C, 0, 0);
 800bb5a:	2200      	movs	r2, #0
 800bb5c:	2100      	movs	r1, #0
 800bb5e:	202c      	movs	r0, #44	; 0x2c
 800bb60:	f000 fa66 	bl	800c030 <_SPI_SendByte>

	// Additional SPI CS "low" hold
	for(int s=0; s < SPI_DELAY_HOLD; s++)
 800bb64:	2300      	movs	r3, #0
 800bb66:	61fb      	str	r3, [r7, #28]
 800bb68:	e008      	b.n	800bb7c <ILI9341_Draw_Pixel+0x1e8>
		LCD_CS_PORT->ODR &= ~(LCD_CS_PIN);
 800bb6a:	4b25      	ldr	r3, [pc, #148]	; (800bc00 <ILI9341_Draw_Pixel+0x26c>)
 800bb6c:	695b      	ldr	r3, [r3, #20]
 800bb6e:	4a24      	ldr	r2, [pc, #144]	; (800bc00 <ILI9341_Draw_Pixel+0x26c>)
 800bb70:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800bb74:	6153      	str	r3, [r2, #20]
	for(int s=0; s < SPI_DELAY_HOLD; s++)
 800bb76:	69fb      	ldr	r3, [r7, #28]
 800bb78:	3301      	adds	r3, #1
 800bb7a:	61fb      	str	r3, [r7, #28]
 800bb7c:	69fb      	ldr	r3, [r7, #28]
 800bb7e:	2b02      	cmp	r3, #2
 800bb80:	ddf3      	ble.n	800bb6a <ILI9341_Draw_Pixel+0x1d6>

	LCD_DC_PORT->ODR |= LCD_DC_PIN;
 800bb82:	4b1f      	ldr	r3, [pc, #124]	; (800bc00 <ILI9341_Draw_Pixel+0x26c>)
 800bb84:	695b      	ldr	r3, [r3, #20]
 800bb86:	4a1e      	ldr	r2, [pc, #120]	; (800bc00 <ILI9341_Draw_Pixel+0x26c>)
 800bb88:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800bb8c:	6153      	str	r3, [r2, #20]
	LCD_CS_PORT->ODR |= LCD_CS_PIN;
 800bb8e:	4b1c      	ldr	r3, [pc, #112]	; (800bc00 <ILI9341_Draw_Pixel+0x26c>)
 800bb90:	695b      	ldr	r3, [r3, #20]
 800bb92:	4a1b      	ldr	r2, [pc, #108]	; (800bc00 <ILI9341_Draw_Pixel+0x26c>)
 800bb94:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800bb98:	6153      	str	r3, [r2, #20]

	//COLOUR
	LCD_CS_PORT->ODR &= ~(LCD_CS_PIN);
 800bb9a:	4b19      	ldr	r3, [pc, #100]	; (800bc00 <ILI9341_Draw_Pixel+0x26c>)
 800bb9c:	695b      	ldr	r3, [r3, #20]
 800bb9e:	4a18      	ldr	r2, [pc, #96]	; (800bc00 <ILI9341_Draw_Pixel+0x26c>)
 800bba0:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800bba4:	6153      	str	r3, [r2, #20]
	unsigned char Temp_Buffer2[2] = {colour>>8, colour};
 800bba6:	887b      	ldrh	r3, [r7, #2]
 800bba8:	0a1b      	lsrs	r3, r3, #8
 800bbaa:	b29b      	uxth	r3, r3
 800bbac:	b2db      	uxtb	r3, r3
 800bbae:	733b      	strb	r3, [r7, #12]
 800bbb0:	887b      	ldrh	r3, [r7, #2]
 800bbb2:	b2db      	uxtb	r3, r3
 800bbb4:	737b      	strb	r3, [r7, #13]

	//HAL_SPI_Transmit(HSPI_INSTANCE, Temp_Buffer2, 2, 1 );
	_SPI_SendByteMultiByte(Temp_Buffer2, 4, 0, 9);
 800bbb6:	f107 000c 	add.w	r0, r7, #12
 800bbba:	2309      	movs	r3, #9
 800bbbc:	2200      	movs	r2, #0
 800bbbe:	2104      	movs	r1, #4
 800bbc0:	f000 fa4c 	bl	800c05c <_SPI_SendByteMultiByte>

	// Additional SPI CS "low" hold
	for(int s=0; s < SPI_DELAY_HOLD; s++)
 800bbc4:	2300      	movs	r3, #0
 800bbc6:	61bb      	str	r3, [r7, #24]
 800bbc8:	e008      	b.n	800bbdc <ILI9341_Draw_Pixel+0x248>
		LCD_CS_PORT->ODR &= ~(LCD_CS_PIN);
 800bbca:	4b0d      	ldr	r3, [pc, #52]	; (800bc00 <ILI9341_Draw_Pixel+0x26c>)
 800bbcc:	695b      	ldr	r3, [r3, #20]
 800bbce:	4a0c      	ldr	r2, [pc, #48]	; (800bc00 <ILI9341_Draw_Pixel+0x26c>)
 800bbd0:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800bbd4:	6153      	str	r3, [r2, #20]
	for(int s=0; s < SPI_DELAY_HOLD; s++)
 800bbd6:	69bb      	ldr	r3, [r7, #24]
 800bbd8:	3301      	adds	r3, #1
 800bbda:	61bb      	str	r3, [r7, #24]
 800bbdc:	69bb      	ldr	r3, [r7, #24]
 800bbde:	2b02      	cmp	r3, #2
 800bbe0:	ddf3      	ble.n	800bbca <ILI9341_Draw_Pixel+0x236>

	LCD_CS_PORT->ODR |= LCD_CS_PIN;
 800bbe2:	4b07      	ldr	r3, [pc, #28]	; (800bc00 <ILI9341_Draw_Pixel+0x26c>)
 800bbe4:	695b      	ldr	r3, [r3, #20]
 800bbe6:	4a06      	ldr	r2, [pc, #24]	; (800bc00 <ILI9341_Draw_Pixel+0x26c>)
 800bbe8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800bbec:	6153      	str	r3, [r2, #20]
 800bbee:	e000      	b.n	800bbf2 <ILI9341_Draw_Pixel+0x25e>
	if((x >= LCD_WIDTH) || (y >= LCD_HEIGHT)) return;	//OUT OF BOUNDS!
 800bbf0:	bf00      	nop


}
 800bbf2:	3730      	adds	r7, #48	; 0x30
 800bbf4:	46bd      	mov	sp, r7
 800bbf6:	bd80      	pop	{r7, pc}
 800bbf8:	2000020e 	.word	0x2000020e
 800bbfc:	2000020c 	.word	0x2000020c
 800bc00:	48000400 	.word	0x48000400

0800bc04 <ILI9341_Draw_Rectangle>:
 *
 *
 */

void ILI9341_Draw_Rectangle(uint16_t xpos, uint16_t ypos, uint16_t width, uint16_t height, uint16_t colour, CHUNK_Type chunk_type)
{
 800bc04:	b590      	push	{r4, r7, lr}
 800bc06:	b087      	sub	sp, #28
 800bc08:	af02      	add	r7, sp, #8
 800bc0a:	4604      	mov	r4, r0
 800bc0c:	4608      	mov	r0, r1
 800bc0e:	4611      	mov	r1, r2
 800bc10:	461a      	mov	r2, r3
 800bc12:	4623      	mov	r3, r4
 800bc14:	80fb      	strh	r3, [r7, #6]
 800bc16:	4603      	mov	r3, r0
 800bc18:	80bb      	strh	r3, [r7, #4]
 800bc1a:	460b      	mov	r3, r1
 800bc1c:	807b      	strh	r3, [r7, #2]
 800bc1e:	4613      	mov	r3, r2
 800bc20:	803b      	strh	r3, [r7, #0]
	if((xpos >=LCD_WIDTH) || (ypos >=LCD_HEIGHT)) return;
 800bc22:	4b39      	ldr	r3, [pc, #228]	; (800bd08 <ILI9341_Draw_Rectangle+0x104>)
 800bc24:	881b      	ldrh	r3, [r3, #0]
 800bc26:	b29b      	uxth	r3, r3
 800bc28:	88fa      	ldrh	r2, [r7, #6]
 800bc2a:	429a      	cmp	r2, r3
 800bc2c:	d268      	bcs.n	800bd00 <ILI9341_Draw_Rectangle+0xfc>
 800bc2e:	4b37      	ldr	r3, [pc, #220]	; (800bd0c <ILI9341_Draw_Rectangle+0x108>)
 800bc30:	881b      	ldrh	r3, [r3, #0]
 800bc32:	b29b      	uxth	r3, r3
 800bc34:	88ba      	ldrh	r2, [r7, #4]
 800bc36:	429a      	cmp	r2, r3
 800bc38:	d262      	bcs.n	800bd00 <ILI9341_Draw_Rectangle+0xfc>
	if((xpos+width-1)>=LCD_WIDTH)
 800bc3a:	88fa      	ldrh	r2, [r7, #6]
 800bc3c:	887b      	ldrh	r3, [r7, #2]
 800bc3e:	4413      	add	r3, r2
 800bc40:	3b01      	subs	r3, #1
 800bc42:	4a31      	ldr	r2, [pc, #196]	; (800bd08 <ILI9341_Draw_Rectangle+0x104>)
 800bc44:	8812      	ldrh	r2, [r2, #0]
 800bc46:	b292      	uxth	r2, r2
 800bc48:	4293      	cmp	r3, r2
 800bc4a:	db05      	blt.n	800bc58 <ILI9341_Draw_Rectangle+0x54>
		{
			width=LCD_WIDTH-xpos;
 800bc4c:	4b2e      	ldr	r3, [pc, #184]	; (800bd08 <ILI9341_Draw_Rectangle+0x104>)
 800bc4e:	881b      	ldrh	r3, [r3, #0]
 800bc50:	b29a      	uxth	r2, r3
 800bc52:	88fb      	ldrh	r3, [r7, #6]
 800bc54:	1ad3      	subs	r3, r2, r3
 800bc56:	807b      	strh	r3, [r7, #2]
		}
	if((ypos+height-1)>=LCD_HEIGHT)
 800bc58:	88ba      	ldrh	r2, [r7, #4]
 800bc5a:	883b      	ldrh	r3, [r7, #0]
 800bc5c:	4413      	add	r3, r2
 800bc5e:	3b01      	subs	r3, #1
 800bc60:	4a2a      	ldr	r2, [pc, #168]	; (800bd0c <ILI9341_Draw_Rectangle+0x108>)
 800bc62:	8812      	ldrh	r2, [r2, #0]
 800bc64:	b292      	uxth	r2, r2
 800bc66:	4293      	cmp	r3, r2
 800bc68:	db05      	blt.n	800bc76 <ILI9341_Draw_Rectangle+0x72>
		{
			height=LCD_HEIGHT-ypos;
 800bc6a:	4b28      	ldr	r3, [pc, #160]	; (800bd0c <ILI9341_Draw_Rectangle+0x108>)
 800bc6c:	881b      	ldrh	r3, [r3, #0]
 800bc6e:	b29a      	uxth	r2, r3
 800bc70:	88bb      	ldrh	r3, [r7, #4]
 800bc72:	1ad3      	subs	r3, r2, r3
 800bc74:	803b      	strh	r3, [r7, #0]
		}
	ILI9341_Set_Frame(	xpos,
						ypos,
						(xpos + width) - 1,
 800bc76:	88fa      	ldrh	r2, [r7, #6]
 800bc78:	887b      	ldrh	r3, [r7, #2]
 800bc7a:	4413      	add	r3, r2
 800bc7c:	b29b      	uxth	r3, r3
	ILI9341_Set_Frame(	xpos,
 800bc7e:	3b01      	subs	r3, #1
 800bc80:	b29c      	uxth	r4, r3
						(ypos + height) - 1);
 800bc82:	88ba      	ldrh	r2, [r7, #4]
 800bc84:	883b      	ldrh	r3, [r7, #0]
 800bc86:	4413      	add	r3, r2
 800bc88:	b29b      	uxth	r3, r3
	ILI9341_Set_Frame(	xpos,
 800bc8a:	3b01      	subs	r3, #1
 800bc8c:	b29b      	uxth	r3, r3
 800bc8e:	88b9      	ldrh	r1, [r7, #4]
 800bc90:	88f8      	ldrh	r0, [r7, #6]
 800bc92:	4622      	mov	r2, r4
 800bc94:	f7ff fe08 	bl	800b8a8 <ILI9341_Set_Frame>
	// if odd numbered rect area is requested, we round down to nearest even number
	// to keep _LCD_Write_Frame() happy.

	// Note, truncated pixel will be needed at function end.

	uint16_t size = height*width;
 800bc98:	883a      	ldrh	r2, [r7, #0]
 800bc9a:	887b      	ldrh	r3, [r7, #2]
 800bc9c:	fb12 f303 	smulbb	r3, r2, r3
 800bca0:	81fb      	strh	r3, [r7, #14]
	uint8_t truncated = 0;
 800bca2:	2300      	movs	r3, #0
 800bca4:	737b      	strb	r3, [r7, #13]

	if((size & 1) && (size > 1))		// don't round down to zero!
 800bca6:	89fb      	ldrh	r3, [r7, #14]
 800bca8:	f003 0301 	and.w	r3, r3, #1
 800bcac:	2b00      	cmp	r3, #0
 800bcae:	d009      	beq.n	800bcc4 <ILI9341_Draw_Rectangle+0xc0>
 800bcb0:	89fb      	ldrh	r3, [r7, #14]
 800bcb2:	2b01      	cmp	r3, #1
 800bcb4:	d906      	bls.n	800bcc4 <ILI9341_Draw_Rectangle+0xc0>
	{
		truncated = 1;
 800bcb6:	2301      	movs	r3, #1
 800bcb8:	737b      	strb	r3, [r7, #13]
	 	size = ((size >> 1) * 2);
 800bcba:	89fb      	ldrh	r3, [r7, #14]
 800bcbc:	085b      	lsrs	r3, r3, #1
 800bcbe:	b29b      	uxth	r3, r3
 800bcc0:	005b      	lsls	r3, r3, #1
 800bcc2:	81fb      	strh	r3, [r7, #14]
	}

	_LCD_Write_Frame(	xpos,
 800bcc4:	89fc      	ldrh	r4, [r7, #14]
 800bcc6:	8c3a      	ldrh	r2, [r7, #32]
 800bcc8:	88b9      	ldrh	r1, [r7, #4]
 800bcca:	88f8      	ldrh	r0, [r7, #6]
 800bccc:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 800bcd0:	9300      	str	r3, [sp, #0]
 800bcd2:	4623      	mov	r3, r4
 800bcd4:	f000 f898 	bl	800be08 <_LCD_Write_Frame>
						colour,
						size,
						chunk_type);

	// add the truncated pixel now
	if(truncated)
 800bcd8:	7b7b      	ldrb	r3, [r7, #13]
 800bcda:	2b00      	cmp	r3, #0
 800bcdc:	d011      	beq.n	800bd02 <ILI9341_Draw_Rectangle+0xfe>
	{
		ILI9341_Draw_Pixel(	(xpos + width) - 1,
 800bcde:	88fa      	ldrh	r2, [r7, #6]
 800bce0:	887b      	ldrh	r3, [r7, #2]
 800bce2:	4413      	add	r3, r2
 800bce4:	b29b      	uxth	r3, r3
 800bce6:	3b01      	subs	r3, #1
 800bce8:	b298      	uxth	r0, r3
							(ypos + height) - 1,
 800bcea:	88ba      	ldrh	r2, [r7, #4]
 800bcec:	883b      	ldrh	r3, [r7, #0]
 800bcee:	4413      	add	r3, r2
 800bcf0:	b29b      	uxth	r3, r3
		ILI9341_Draw_Pixel(	(xpos + width) - 1,
 800bcf2:	3b01      	subs	r3, #1
 800bcf4:	b29b      	uxth	r3, r3
 800bcf6:	8c3a      	ldrh	r2, [r7, #32]
 800bcf8:	4619      	mov	r1, r3
 800bcfa:	f7ff fe4b 	bl	800b994 <ILI9341_Draw_Pixel>
 800bcfe:	e000      	b.n	800bd02 <ILI9341_Draw_Rectangle+0xfe>
	if((xpos >=LCD_WIDTH) || (ypos >=LCD_HEIGHT)) return;
 800bd00:	bf00      	nop
							colour);
	}
}
 800bd02:	3714      	adds	r7, #20
 800bd04:	46bd      	mov	sp, r7
 800bd06:	bd90      	pop	{r4, r7, pc}
 800bd08:	2000020e 	.word	0x2000020e
 800bd0c:	2000020c 	.word	0x2000020c

0800bd10 <ILI9341_Set_Rotation>:
 *
 * 	Set LCD orientation
 *
 */
void ILI9341_Set_Rotation(uint8_t rotation)
{
 800bd10:	b580      	push	{r7, lr}
 800bd12:	b084      	sub	sp, #16
 800bd14:	af00      	add	r7, sp, #0
 800bd16:	4603      	mov	r3, r0
 800bd18:	71fb      	strb	r3, [r7, #7]

	uint8_t screen_rotation = rotation;
 800bd1a:	79fb      	ldrb	r3, [r7, #7]
 800bd1c:	73fb      	strb	r3, [r7, #15]

	_LCD_SendCommand(0x36);
 800bd1e:	2036      	movs	r0, #54	; 0x36
 800bd20:	f000 f922 	bl	800bf68 <_LCD_SendCommand>
	//HAL_Delay(1);

	switch(screen_rotation)
 800bd24:	7bfb      	ldrb	r3, [r7, #15]
 800bd26:	2b03      	cmp	r3, #3
 800bd28:	d836      	bhi.n	800bd98 <ILI9341_Set_Rotation+0x88>
 800bd2a:	a201      	add	r2, pc, #4	; (adr r2, 800bd30 <ILI9341_Set_Rotation+0x20>)
 800bd2c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800bd30:	0800bd41 	.word	0x0800bd41
 800bd34:	0800bd57 	.word	0x0800bd57
 800bd38:	0800bd6d 	.word	0x0800bd6d
 800bd3c:	0800bd83 	.word	0x0800bd83
	{
		case SCREEN_VERTICAL_1:
			_LCD_SendData(0x40|0x08);
 800bd40:	2048      	movs	r0, #72	; 0x48
 800bd42:	f000 f943 	bl	800bfcc <_LCD_SendData>
			LCD_WIDTH = 240;
 800bd46:	4b17      	ldr	r3, [pc, #92]	; (800bda4 <ILI9341_Set_Rotation+0x94>)
 800bd48:	22f0      	movs	r2, #240	; 0xf0
 800bd4a:	801a      	strh	r2, [r3, #0]
			LCD_HEIGHT = 320;
 800bd4c:	4b16      	ldr	r3, [pc, #88]	; (800bda8 <ILI9341_Set_Rotation+0x98>)
 800bd4e:	f44f 72a0 	mov.w	r2, #320	; 0x140
 800bd52:	801a      	strh	r2, [r3, #0]
			break;
 800bd54:	e021      	b.n	800bd9a <ILI9341_Set_Rotation+0x8a>
		case SCREEN_HORIZONTAL_1:
			_LCD_SendData(0x20|0x08);
 800bd56:	2028      	movs	r0, #40	; 0x28
 800bd58:	f000 f938 	bl	800bfcc <_LCD_SendData>
			LCD_WIDTH  = 320;
 800bd5c:	4b11      	ldr	r3, [pc, #68]	; (800bda4 <ILI9341_Set_Rotation+0x94>)
 800bd5e:	f44f 72a0 	mov.w	r2, #320	; 0x140
 800bd62:	801a      	strh	r2, [r3, #0]
			LCD_HEIGHT = 240;
 800bd64:	4b10      	ldr	r3, [pc, #64]	; (800bda8 <ILI9341_Set_Rotation+0x98>)
 800bd66:	22f0      	movs	r2, #240	; 0xf0
 800bd68:	801a      	strh	r2, [r3, #0]
			break;
 800bd6a:	e016      	b.n	800bd9a <ILI9341_Set_Rotation+0x8a>
		case SCREEN_VERTICAL_2:
			_LCD_SendData(0x80|0x08);
 800bd6c:	2088      	movs	r0, #136	; 0x88
 800bd6e:	f000 f92d 	bl	800bfcc <_LCD_SendData>
			LCD_WIDTH  = 240;
 800bd72:	4b0c      	ldr	r3, [pc, #48]	; (800bda4 <ILI9341_Set_Rotation+0x94>)
 800bd74:	22f0      	movs	r2, #240	; 0xf0
 800bd76:	801a      	strh	r2, [r3, #0]
			LCD_HEIGHT = 320;
 800bd78:	4b0b      	ldr	r3, [pc, #44]	; (800bda8 <ILI9341_Set_Rotation+0x98>)
 800bd7a:	f44f 72a0 	mov.w	r2, #320	; 0x140
 800bd7e:	801a      	strh	r2, [r3, #0]
			break;
 800bd80:	e00b      	b.n	800bd9a <ILI9341_Set_Rotation+0x8a>
		case SCREEN_HORIZONTAL_2:
			_LCD_SendData(0x40|0x80|0x20|0x08);
 800bd82:	20e8      	movs	r0, #232	; 0xe8
 800bd84:	f000 f922 	bl	800bfcc <_LCD_SendData>
			LCD_WIDTH  = 320;
 800bd88:	4b06      	ldr	r3, [pc, #24]	; (800bda4 <ILI9341_Set_Rotation+0x94>)
 800bd8a:	f44f 72a0 	mov.w	r2, #320	; 0x140
 800bd8e:	801a      	strh	r2, [r3, #0]
			LCD_HEIGHT = 240;
 800bd90:	4b05      	ldr	r3, [pc, #20]	; (800bda8 <ILI9341_Set_Rotation+0x98>)
 800bd92:	22f0      	movs	r2, #240	; 0xf0
 800bd94:	801a      	strh	r2, [r3, #0]
			break;
 800bd96:	e000      	b.n	800bd9a <ILI9341_Set_Rotation+0x8a>
		default:
			//EXIT IF SCREEN ROTATION NOT VALID!
			break;
 800bd98:	bf00      	nop
	}
}
 800bd9a:	bf00      	nop
 800bd9c:	3710      	adds	r7, #16
 800bd9e:	46bd      	mov	sp, r7
 800bda0:	bd80      	pop	{r7, pc}
 800bda2:	bf00      	nop
 800bda4:	2000020e 	.word	0x2000020e
 800bda8:	2000020c 	.word	0x2000020c

0800bdac <_LCD_Enable>:
 *
 * Enable LCD display
 *
 */
void _LCD_Enable()
{
 800bdac:	b480      	push	{r7}
 800bdae:	af00      	add	r7, sp, #0
	LCD_RST_PORT->ODR |= LCD_RST_PIN;
 800bdb0:	4b05      	ldr	r3, [pc, #20]	; (800bdc8 <_LCD_Enable+0x1c>)
 800bdb2:	695b      	ldr	r3, [r3, #20]
 800bdb4:	4a04      	ldr	r2, [pc, #16]	; (800bdc8 <_LCD_Enable+0x1c>)
 800bdb6:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800bdba:	6153      	str	r3, [r2, #20]
}
 800bdbc:	bf00      	nop
 800bdbe:	46bd      	mov	sp, r7
 800bdc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bdc4:	4770      	bx	lr
 800bdc6:	bf00      	nop
 800bdc8:	48000400 	.word	0x48000400

0800bdcc <_LCD_Reset>:
 *
 * 	Reset LCD
 *
 */
void _LCD_Reset()
{
 800bdcc:	b580      	push	{r7, lr}
 800bdce:	af00      	add	r7, sp, #0
	LCD_RST_PORT->ODR &= ~(LCD_RST_PIN);
 800bdd0:	4b0c      	ldr	r3, [pc, #48]	; (800be04 <_LCD_Reset+0x38>)
 800bdd2:	695b      	ldr	r3, [r3, #20]
 800bdd4:	4a0b      	ldr	r2, [pc, #44]	; (800be04 <_LCD_Reset+0x38>)
 800bdd6:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800bdda:	6153      	str	r3, [r2, #20]
	HAL_Delay(200);
 800bddc:	20c8      	movs	r0, #200	; 0xc8
 800bdde:	f7f9 fe5f 	bl	8005aa0 <HAL_Delay>
	LCD_CS_PORT->ODR &= ~(LCD_CS_PIN);
 800bde2:	4b08      	ldr	r3, [pc, #32]	; (800be04 <_LCD_Reset+0x38>)
 800bde4:	695b      	ldr	r3, [r3, #20]
 800bde6:	4a07      	ldr	r2, [pc, #28]	; (800be04 <_LCD_Reset+0x38>)
 800bde8:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800bdec:	6153      	str	r3, [r2, #20]
	HAL_Delay(200);
 800bdee:	20c8      	movs	r0, #200	; 0xc8
 800bdf0:	f7f9 fe56 	bl	8005aa0 <HAL_Delay>
	LCD_RST_PORT->ODR |= LCD_RST_PIN;
 800bdf4:	4b03      	ldr	r3, [pc, #12]	; (800be04 <_LCD_Reset+0x38>)
 800bdf6:	695b      	ldr	r3, [r3, #20]
 800bdf8:	4a02      	ldr	r2, [pc, #8]	; (800be04 <_LCD_Reset+0x38>)
 800bdfa:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800bdfe:	6153      	str	r3, [r2, #20]
}
 800be00:	bf00      	nop
 800be02:	bd80      	pop	{r7, pc}
 800be04:	48000400 	.word	0x48000400

0800be08 <_LCD_Write_Frame>:
 *
 *	entire data sent to this function is a CHUNK < BURST_MAX_SIZE
 *	each CHUNK is broken down into smaller BLOCKS
 */
void _LCD_Write_Frame(uint16_t chunk_xpos, uint16_t chunk_ypos, uint16_t colour, uint32_t chunk_size, CHUNK_Type chunk_type)
{
 800be08:	b5b0      	push	{r4, r5, r7, lr}
 800be0a:	b08e      	sub	sp, #56	; 0x38
 800be0c:	af00      	add	r7, sp, #0
 800be0e:	607b      	str	r3, [r7, #4]
 800be10:	4603      	mov	r3, r0
 800be12:	81fb      	strh	r3, [r7, #14]
 800be14:	460b      	mov	r3, r1
 800be16:	81bb      	strh	r3, [r7, #12]
 800be18:	4613      	mov	r3, r2
 800be1a:	817b      	strh	r3, [r7, #10]
 800be1c:	466b      	mov	r3, sp
 800be1e:	461d      	mov	r5, r3

	uint32_t buffer_size = 0;
 800be20:	2300      	movs	r3, #0
 800be22:	62fb      	str	r3, [r7, #44]	; 0x2c
	if((chunk_size*2) < BURST_MAX_SIZE)
 800be24:	687b      	ldr	r3, [r7, #4]
 800be26:	005b      	lsls	r3, r3, #1
 800be28:	4a4d      	ldr	r2, [pc, #308]	; (800bf60 <_LCD_Write_Frame+0x158>)
 800be2a:	8812      	ldrh	r2, [r2, #0]
 800be2c:	4293      	cmp	r3, r2
 800be2e:	d202      	bcs.n	800be36 <_LCD_Write_Frame+0x2e>
	{
		buffer_size = chunk_size;
 800be30:	687b      	ldr	r3, [r7, #4]
 800be32:	62fb      	str	r3, [r7, #44]	; 0x2c
 800be34:	e002      	b.n	800be3c <_LCD_Write_Frame+0x34>
	}
	else
	{
		buffer_size = BURST_MAX_SIZE;
 800be36:	4b4a      	ldr	r3, [pc, #296]	; (800bf60 <_LCD_Write_Frame+0x158>)
 800be38:	881b      	ldrh	r3, [r3, #0]
 800be3a:	62fb      	str	r3, [r7, #44]	; 0x2c
	}

	unsigned char chifted = 	colour>>8;;
 800be3c:	897b      	ldrh	r3, [r7, #10]
 800be3e:	0a1b      	lsrs	r3, r3, #8
 800be40:	b29b      	uxth	r3, r3
 800be42:	77fb      	strb	r3, [r7, #31]
	unsigned char burst_buffer[buffer_size];
 800be44:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800be46:	4603      	mov	r3, r0
 800be48:	3b01      	subs	r3, #1
 800be4a:	61bb      	str	r3, [r7, #24]
 800be4c:	4601      	mov	r1, r0
 800be4e:	f04f 0200 	mov.w	r2, #0
 800be52:	f04f 0300 	mov.w	r3, #0
 800be56:	f04f 0400 	mov.w	r4, #0
 800be5a:	00d4      	lsls	r4, r2, #3
 800be5c:	ea44 7451 	orr.w	r4, r4, r1, lsr #29
 800be60:	00cb      	lsls	r3, r1, #3
 800be62:	4601      	mov	r1, r0
 800be64:	f04f 0200 	mov.w	r2, #0
 800be68:	f04f 0300 	mov.w	r3, #0
 800be6c:	f04f 0400 	mov.w	r4, #0
 800be70:	00d4      	lsls	r4, r2, #3
 800be72:	ea44 7451 	orr.w	r4, r4, r1, lsr #29
 800be76:	00cb      	lsls	r3, r1, #3
 800be78:	1dc3      	adds	r3, r0, #7
 800be7a:	08db      	lsrs	r3, r3, #3
 800be7c:	00db      	lsls	r3, r3, #3
 800be7e:	ebad 0d03 	sub.w	sp, sp, r3
 800be82:	466b      	mov	r3, sp
 800be84:	3300      	adds	r3, #0
 800be86:	617b      	str	r3, [r7, #20]
	for(uint32_t j = 0; j < buffer_size; j+=2)
 800be88:	2300      	movs	r3, #0
 800be8a:	633b      	str	r3, [r7, #48]	; 0x30
 800be8c:	e00d      	b.n	800beaa <_LCD_Write_Frame+0xa2>
	{
			burst_buffer[j] = 	chifted;
 800be8e:	697a      	ldr	r2, [r7, #20]
 800be90:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800be92:	4413      	add	r3, r2
 800be94:	7ffa      	ldrb	r2, [r7, #31]
 800be96:	701a      	strb	r2, [r3, #0]
			burst_buffer[j+1] = colour;
 800be98:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800be9a:	3301      	adds	r3, #1
 800be9c:	897a      	ldrh	r2, [r7, #10]
 800be9e:	b2d1      	uxtb	r1, r2
 800bea0:	697a      	ldr	r2, [r7, #20]
 800bea2:	54d1      	strb	r1, [r2, r3]
	for(uint32_t j = 0; j < buffer_size; j+=2)
 800bea4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bea6:	3302      	adds	r3, #2
 800bea8:	633b      	str	r3, [r7, #48]	; 0x30
 800beaa:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800beac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800beae:	429a      	cmp	r2, r3
 800beb0:	d3ed      	bcc.n	800be8e <_LCD_Write_Frame+0x86>
	}
	
	uint32_t Sending_size = chunk_size*2;
 800beb2:	687b      	ldr	r3, [r7, #4]
 800beb4:	005b      	lsls	r3, r3, #1
 800beb6:	613b      	str	r3, [r7, #16]

	// make sure we don't divide by size=0
	uint32_t Sending_in_Block = 1;
 800beb8:	2301      	movs	r3, #1
 800beba:	637b      	str	r3, [r7, #52]	; 0x34
	uint32_t Remainder_from_block = 0;
 800bebc:	2300      	movs	r3, #0
 800bebe:	62bb      	str	r3, [r7, #40]	; 0x28
	if(chunk_size > 0)
 800bec0:	687b      	ldr	r3, [r7, #4]
 800bec2:	2b00      	cmp	r3, #0
 800bec4:	d00d      	beq.n	800bee2 <_LCD_Write_Frame+0xda>
	{
			Sending_in_Block 		= Sending_size/buffer_size;
 800bec6:	693a      	ldr	r2, [r7, #16]
 800bec8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800beca:	fbb2 f3f3 	udiv	r3, r2, r3
 800bece:	637b      	str	r3, [r7, #52]	; 0x34
			Remainder_from_block 	= Sending_size%buffer_size;
 800bed0:	693b      	ldr	r3, [r7, #16]
 800bed2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800bed4:	fbb3 f2f2 	udiv	r2, r3, r2
 800bed8:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800beda:	fb01 f202 	mul.w	r2, r1, r2
 800bede:	1a9b      	subs	r3, r3, r2
 800bee0:	62bb      	str	r3, [r7, #40]	; 0x28
	}

	// send blocks
	LCD_DC_PORT->ODR |= LCD_DC_PIN;
 800bee2:	4b20      	ldr	r3, [pc, #128]	; (800bf64 <_LCD_Write_Frame+0x15c>)
 800bee4:	695b      	ldr	r3, [r3, #20]
 800bee6:	4a1f      	ldr	r2, [pc, #124]	; (800bf64 <_LCD_Write_Frame+0x15c>)
 800bee8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800beec:	6153      	str	r3, [r2, #20]
	LCD_CS_PORT->ODR &= ~(LCD_CS_PIN);
 800beee:	4b1d      	ldr	r3, [pc, #116]	; (800bf64 <_LCD_Write_Frame+0x15c>)
 800bef0:	695b      	ldr	r3, [r3, #20]
 800bef2:	4a1c      	ldr	r2, [pc, #112]	; (800bf64 <_LCD_Write_Frame+0x15c>)
 800bef4:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800bef8:	6153      	str	r3, [r2, #20]

	if(Sending_in_Block != 0)
 800befa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800befc:	2b00      	cmp	r3, #0
 800befe:	d00f      	beq.n	800bf20 <_LCD_Write_Frame+0x118>
	{
		for(uint32_t j = 0; j < (Sending_in_Block); j++)
 800bf00:	2300      	movs	r3, #0
 800bf02:	627b      	str	r3, [r7, #36]	; 0x24
 800bf04:	e008      	b.n	800bf18 <_LCD_Write_Frame+0x110>
		{
			_SPI_SendByteMultiByte(burst_buffer, buffer_size, 0, 9);
 800bf06:	6978      	ldr	r0, [r7, #20]
 800bf08:	2309      	movs	r3, #9
 800bf0a:	2200      	movs	r2, #0
 800bf0c:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800bf0e:	f000 f8a5 	bl	800c05c <_SPI_SendByteMultiByte>
		for(uint32_t j = 0; j < (Sending_in_Block); j++)
 800bf12:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bf14:	3301      	adds	r3, #1
 800bf16:	627b      	str	r3, [r7, #36]	; 0x24
 800bf18:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800bf1a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800bf1c:	429a      	cmp	r2, r3
 800bf1e:	d3f2      	bcc.n	800bf06 <_LCD_Write_Frame+0xfe>
		}
	}

	_SPI_SendByteMultiByte(burst_buffer, Remainder_from_block, 0, 9);
 800bf20:	6978      	ldr	r0, [r7, #20]
 800bf22:	2309      	movs	r3, #9
 800bf24:	2200      	movs	r2, #0
 800bf26:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800bf28:	f000 f898 	bl	800c05c <_SPI_SendByteMultiByte>


	// Additional SPI CS "low" hold
	for(int x=0; x < SPI_DELAY_HOLD; x++)
 800bf2c:	2300      	movs	r3, #0
 800bf2e:	623b      	str	r3, [r7, #32]
 800bf30:	e008      	b.n	800bf44 <_LCD_Write_Frame+0x13c>
		LCD_CS_PORT->ODR &= ~(LCD_CS_PIN);
 800bf32:	4b0c      	ldr	r3, [pc, #48]	; (800bf64 <_LCD_Write_Frame+0x15c>)
 800bf34:	695b      	ldr	r3, [r3, #20]
 800bf36:	4a0b      	ldr	r2, [pc, #44]	; (800bf64 <_LCD_Write_Frame+0x15c>)
 800bf38:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800bf3c:	6153      	str	r3, [r2, #20]
	for(int x=0; x < SPI_DELAY_HOLD; x++)
 800bf3e:	6a3b      	ldr	r3, [r7, #32]
 800bf40:	3301      	adds	r3, #1
 800bf42:	623b      	str	r3, [r7, #32]
 800bf44:	6a3b      	ldr	r3, [r7, #32]
 800bf46:	2b02      	cmp	r3, #2
 800bf48:	ddf3      	ble.n	800bf32 <_LCD_Write_Frame+0x12a>

	LCD_CS_PORT->ODR |= LCD_CS_PIN;
 800bf4a:	4b06      	ldr	r3, [pc, #24]	; (800bf64 <_LCD_Write_Frame+0x15c>)
 800bf4c:	695b      	ldr	r3, [r3, #20]
 800bf4e:	4a05      	ldr	r2, [pc, #20]	; (800bf64 <_LCD_Write_Frame+0x15c>)
 800bf50:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800bf54:	6153      	str	r3, [r2, #20]
 800bf56:	46ad      	mov	sp, r5

}
 800bf58:	bf00      	nop
 800bf5a:	3738      	adds	r7, #56	; 0x38
 800bf5c:	46bd      	mov	sp, r7
 800bf5e:	bdb0      	pop	{r4, r5, r7, pc}
 800bf60:	20000210 	.word	0x20000210
 800bf64:	48000400 	.word	0x48000400

0800bf68 <_LCD_SendCommand>:
 *
 * 	Send command to LCD
 *
 */
void _LCD_SendCommand(uint8_t command)
{
 800bf68:	b580      	push	{r7, lr}
 800bf6a:	b084      	sub	sp, #16
 800bf6c:	af00      	add	r7, sp, #0
 800bf6e:	4603      	mov	r3, r0
 800bf70:	71fb      	strb	r3, [r7, #7]
	LCD_CS_PORT->ODR &= ~(LCD_CS_PIN);
 800bf72:	4b15      	ldr	r3, [pc, #84]	; (800bfc8 <_LCD_SendCommand+0x60>)
 800bf74:	695b      	ldr	r3, [r3, #20]
 800bf76:	4a14      	ldr	r2, [pc, #80]	; (800bfc8 <_LCD_SendCommand+0x60>)
 800bf78:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800bf7c:	6153      	str	r3, [r2, #20]
	LCD_DC_PORT->ODR &= ~(LCD_DC_PIN);
 800bf7e:	4b12      	ldr	r3, [pc, #72]	; (800bfc8 <_LCD_SendCommand+0x60>)
 800bf80:	695b      	ldr	r3, [r3, #20]
 800bf82:	4a11      	ldr	r2, [pc, #68]	; (800bfc8 <_LCD_SendCommand+0x60>)
 800bf84:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800bf88:	6153      	str	r3, [r2, #20]

	_SPI_SendByte(command, 0 , 0);
 800bf8a:	79fb      	ldrb	r3, [r7, #7]
 800bf8c:	2200      	movs	r2, #0
 800bf8e:	2100      	movs	r1, #0
 800bf90:	4618      	mov	r0, r3
 800bf92:	f000 f84d 	bl	800c030 <_SPI_SendByte>

	// Additional SPI CS "low" hold
	for(int x=0; x < SPI_DELAY_HOLD; x++)
 800bf96:	2300      	movs	r3, #0
 800bf98:	60fb      	str	r3, [r7, #12]
 800bf9a:	e008      	b.n	800bfae <_LCD_SendCommand+0x46>
		LCD_CS_PORT->ODR &= ~(LCD_CS_PIN);
 800bf9c:	4b0a      	ldr	r3, [pc, #40]	; (800bfc8 <_LCD_SendCommand+0x60>)
 800bf9e:	695b      	ldr	r3, [r3, #20]
 800bfa0:	4a09      	ldr	r2, [pc, #36]	; (800bfc8 <_LCD_SendCommand+0x60>)
 800bfa2:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800bfa6:	6153      	str	r3, [r2, #20]
	for(int x=0; x < SPI_DELAY_HOLD; x++)
 800bfa8:	68fb      	ldr	r3, [r7, #12]
 800bfaa:	3301      	adds	r3, #1
 800bfac:	60fb      	str	r3, [r7, #12]
 800bfae:	68fb      	ldr	r3, [r7, #12]
 800bfb0:	2b02      	cmp	r3, #2
 800bfb2:	ddf3      	ble.n	800bf9c <_LCD_SendCommand+0x34>

	LCD_CS_PORT->ODR |= LCD_CS_PIN;
 800bfb4:	4b04      	ldr	r3, [pc, #16]	; (800bfc8 <_LCD_SendCommand+0x60>)
 800bfb6:	695b      	ldr	r3, [r3, #20]
 800bfb8:	4a03      	ldr	r2, [pc, #12]	; (800bfc8 <_LCD_SendCommand+0x60>)
 800bfba:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800bfbe:	6153      	str	r3, [r2, #20]
}
 800bfc0:	bf00      	nop
 800bfc2:	3710      	adds	r7, #16
 800bfc4:	46bd      	mov	sp, r7
 800bfc6:	bd80      	pop	{r7, pc}
 800bfc8:	48000400 	.word	0x48000400

0800bfcc <_LCD_SendData>:
 *
 * 	Send Data to LCD
 *
 */
void _LCD_SendData(uint8_t data)
{
 800bfcc:	b580      	push	{r7, lr}
 800bfce:	b084      	sub	sp, #16
 800bfd0:	af00      	add	r7, sp, #0
 800bfd2:	4603      	mov	r3, r0
 800bfd4:	71fb      	strb	r3, [r7, #7]
	LCD_DC_PORT->ODR |= LCD_DC_PIN;
 800bfd6:	4b15      	ldr	r3, [pc, #84]	; (800c02c <_LCD_SendData+0x60>)
 800bfd8:	695b      	ldr	r3, [r3, #20]
 800bfda:	4a14      	ldr	r2, [pc, #80]	; (800c02c <_LCD_SendData+0x60>)
 800bfdc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800bfe0:	6153      	str	r3, [r2, #20]
	LCD_CS_PORT->ODR &= ~(LCD_CS_PIN);
 800bfe2:	4b12      	ldr	r3, [pc, #72]	; (800c02c <_LCD_SendData+0x60>)
 800bfe4:	695b      	ldr	r3, [r3, #20]
 800bfe6:	4a11      	ldr	r2, [pc, #68]	; (800c02c <_LCD_SendData+0x60>)
 800bfe8:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800bfec:	6153      	str	r3, [r2, #20]

	_SPI_SendByte(data, 0 , 0);
 800bfee:	79fb      	ldrb	r3, [r7, #7]
 800bff0:	2200      	movs	r2, #0
 800bff2:	2100      	movs	r1, #0
 800bff4:	4618      	mov	r0, r3
 800bff6:	f000 f81b 	bl	800c030 <_SPI_SendByte>

	// Additional SPI CS "low" hold
	for(int x=0; x < SPI_DELAY_HOLD; x++)
 800bffa:	2300      	movs	r3, #0
 800bffc:	60fb      	str	r3, [r7, #12]
 800bffe:	e008      	b.n	800c012 <_LCD_SendData+0x46>
		LCD_CS_PORT->ODR &= ~(LCD_CS_PIN);
 800c000:	4b0a      	ldr	r3, [pc, #40]	; (800c02c <_LCD_SendData+0x60>)
 800c002:	695b      	ldr	r3, [r3, #20]
 800c004:	4a09      	ldr	r2, [pc, #36]	; (800c02c <_LCD_SendData+0x60>)
 800c006:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800c00a:	6153      	str	r3, [r2, #20]
	for(int x=0; x < SPI_DELAY_HOLD; x++)
 800c00c:	68fb      	ldr	r3, [r7, #12]
 800c00e:	3301      	adds	r3, #1
 800c010:	60fb      	str	r3, [r7, #12]
 800c012:	68fb      	ldr	r3, [r7, #12]
 800c014:	2b02      	cmp	r3, #2
 800c016:	ddf3      	ble.n	800c000 <_LCD_SendData+0x34>

	LCD_CS_PORT->ODR &= ~(LCD_CS_PIN);
 800c018:	4b04      	ldr	r3, [pc, #16]	; (800c02c <_LCD_SendData+0x60>)
 800c01a:	695b      	ldr	r3, [r3, #20]
 800c01c:	4a03      	ldr	r2, [pc, #12]	; (800c02c <_LCD_SendData+0x60>)
 800c01e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800c022:	6153      	str	r3, [r2, #20]
}
 800c024:	bf00      	nop
 800c026:	3710      	adds	r7, #16
 800c028:	46bd      	mov	sp, r7
 800c02a:	bd80      	pop	{r7, pc}
 800c02c:	48000400 	.word	0x48000400

0800c030 <_SPI_SendByte>:
 *
 * 	Send single byte over SPI using HAL or (optimised) direct-to-register
 *
 */
void _SPI_SendByte(unsigned char data_buffer, uint8_t pre_frame_delay, uint8_t post_frame_delay)
{
 800c030:	b580      	push	{r7, lr}
 800c032:	b082      	sub	sp, #8
 800c034:	af00      	add	r7, sp, #0
 800c036:	4603      	mov	r3, r0
 800c038:	71fb      	strb	r3, [r7, #7]
 800c03a:	460b      	mov	r3, r1
 800c03c:	71bb      	strb	r3, [r7, #6]
 800c03e:	4613      	mov	r3, r2
 800c040:	717b      	strb	r3, [r7, #5]

#ifdef USE_HAL_SPI
	HAL_SPI_Transmit(HSPI_INSTANCE, &data_buffer, 1, 1);
 800c042:	1df9      	adds	r1, r7, #7
 800c044:	2301      	movs	r3, #1
 800c046:	2201      	movs	r2, #1
 800c048:	4803      	ldr	r0, [pc, #12]	; (800c058 <_SPI_SendByte+0x28>)
 800c04a:	f7fd fa9f 	bl	800958c <HAL_SPI_Transmit>
   	for(int d = 0; d < post_frame_delay ; d++)
   		asm("nop");

#endif

}
 800c04e:	bf00      	nop
 800c050:	3708      	adds	r7, #8
 800c052:	46bd      	mov	sp, r7
 800c054:	bd80      	pop	{r7, pc}
 800c056:	bf00      	nop
 800c058:	20001c0c 	.word	0x20001c0c

0800c05c <_SPI_SendByteMultiByte>:
 *
 * 	Send multiple bytes over SPI using HAL or (optimised) direct-to-register
 *
 */
void _SPI_SendByteMultiByte(unsigned char *data_buffer, uint32_t buffer_size, uint8_t pre_frame_delay, uint8_t post_frame_delay)
{
 800c05c:	b580      	push	{r7, lr}
 800c05e:	b084      	sub	sp, #16
 800c060:	af00      	add	r7, sp, #0
 800c062:	60f8      	str	r0, [r7, #12]
 800c064:	60b9      	str	r1, [r7, #8]
 800c066:	4611      	mov	r1, r2
 800c068:	461a      	mov	r2, r3
 800c06a:	460b      	mov	r3, r1
 800c06c:	71fb      	strb	r3, [r7, #7]
 800c06e:	4613      	mov	r3, r2
 800c070:	71bb      	strb	r3, [r7, #6]

#ifdef USE_HAL_SPI
	HAL_SPI_Transmit(HSPI_INSTANCE, (unsigned char *)data_buffer, buffer_size, 2 );
 800c072:	68bb      	ldr	r3, [r7, #8]
 800c074:	b29a      	uxth	r2, r3
 800c076:	2302      	movs	r3, #2
 800c078:	68f9      	ldr	r1, [r7, #12]
 800c07a:	4803      	ldr	r0, [pc, #12]	; (800c088 <_SPI_SendByteMultiByte+0x2c>)
 800c07c:	f7fd fa86 	bl	800958c <HAL_SPI_Transmit>
   	for(int d = 0; d < post_frame_delay ; d++)
   		asm("nop");

#endif

}
 800c080:	bf00      	nop
 800c082:	3710      	adds	r7, #16
 800c084:	46bd      	mov	sp, r7
 800c086:	bd80      	pop	{r7, pc}
 800c088:	20001c0c 	.word	0x20001c0c

0800c08c <__errno>:
 800c08c:	4b01      	ldr	r3, [pc, #4]	; (800c094 <__errno+0x8>)
 800c08e:	6818      	ldr	r0, [r3, #0]
 800c090:	4770      	bx	lr
 800c092:	bf00      	nop
 800c094:	20001434 	.word	0x20001434

0800c098 <__libc_init_array>:
 800c098:	b570      	push	{r4, r5, r6, lr}
 800c09a:	4e0d      	ldr	r6, [pc, #52]	; (800c0d0 <__libc_init_array+0x38>)
 800c09c:	4c0d      	ldr	r4, [pc, #52]	; (800c0d4 <__libc_init_array+0x3c>)
 800c09e:	1ba4      	subs	r4, r4, r6
 800c0a0:	10a4      	asrs	r4, r4, #2
 800c0a2:	2500      	movs	r5, #0
 800c0a4:	42a5      	cmp	r5, r4
 800c0a6:	d109      	bne.n	800c0bc <__libc_init_array+0x24>
 800c0a8:	4e0b      	ldr	r6, [pc, #44]	; (800c0d8 <__libc_init_array+0x40>)
 800c0aa:	4c0c      	ldr	r4, [pc, #48]	; (800c0dc <__libc_init_array+0x44>)
 800c0ac:	f002 fc30 	bl	800e910 <_init>
 800c0b0:	1ba4      	subs	r4, r4, r6
 800c0b2:	10a4      	asrs	r4, r4, #2
 800c0b4:	2500      	movs	r5, #0
 800c0b6:	42a5      	cmp	r5, r4
 800c0b8:	d105      	bne.n	800c0c6 <__libc_init_array+0x2e>
 800c0ba:	bd70      	pop	{r4, r5, r6, pc}
 800c0bc:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800c0c0:	4798      	blx	r3
 800c0c2:	3501      	adds	r5, #1
 800c0c4:	e7ee      	b.n	800c0a4 <__libc_init_array+0xc>
 800c0c6:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800c0ca:	4798      	blx	r3
 800c0cc:	3501      	adds	r5, #1
 800c0ce:	e7f2      	b.n	800c0b6 <__libc_init_array+0x1e>
 800c0d0:	0800f4a0 	.word	0x0800f4a0
 800c0d4:	0800f4a0 	.word	0x0800f4a0
 800c0d8:	0800f4a0 	.word	0x0800f4a0
 800c0dc:	0800f4a4 	.word	0x0800f4a4

0800c0e0 <memset>:
 800c0e0:	4402      	add	r2, r0
 800c0e2:	4603      	mov	r3, r0
 800c0e4:	4293      	cmp	r3, r2
 800c0e6:	d100      	bne.n	800c0ea <memset+0xa>
 800c0e8:	4770      	bx	lr
 800c0ea:	f803 1b01 	strb.w	r1, [r3], #1
 800c0ee:	e7f9      	b.n	800c0e4 <memset+0x4>

0800c0f0 <__cvt>:
 800c0f0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800c0f4:	ec55 4b10 	vmov	r4, r5, d0
 800c0f8:	9f0d      	ldr	r7, [sp, #52]	; 0x34
 800c0fa:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 800c0fe:	2d00      	cmp	r5, #0
 800c100:	460e      	mov	r6, r1
 800c102:	4691      	mov	r9, r2
 800c104:	4619      	mov	r1, r3
 800c106:	bfb8      	it	lt
 800c108:	4622      	movlt	r2, r4
 800c10a:	462b      	mov	r3, r5
 800c10c:	f027 0720 	bic.w	r7, r7, #32
 800c110:	bfbb      	ittet	lt
 800c112:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 800c116:	461d      	movlt	r5, r3
 800c118:	2300      	movge	r3, #0
 800c11a:	232d      	movlt	r3, #45	; 0x2d
 800c11c:	bfb8      	it	lt
 800c11e:	4614      	movlt	r4, r2
 800c120:	2f46      	cmp	r7, #70	; 0x46
 800c122:	700b      	strb	r3, [r1, #0]
 800c124:	d004      	beq.n	800c130 <__cvt+0x40>
 800c126:	2f45      	cmp	r7, #69	; 0x45
 800c128:	d100      	bne.n	800c12c <__cvt+0x3c>
 800c12a:	3601      	adds	r6, #1
 800c12c:	2102      	movs	r1, #2
 800c12e:	e000      	b.n	800c132 <__cvt+0x42>
 800c130:	2103      	movs	r1, #3
 800c132:	ab03      	add	r3, sp, #12
 800c134:	9301      	str	r3, [sp, #4]
 800c136:	ab02      	add	r3, sp, #8
 800c138:	9300      	str	r3, [sp, #0]
 800c13a:	4632      	mov	r2, r6
 800c13c:	4653      	mov	r3, sl
 800c13e:	ec45 4b10 	vmov	d0, r4, r5
 800c142:	f000 fe25 	bl	800cd90 <_dtoa_r>
 800c146:	2f47      	cmp	r7, #71	; 0x47
 800c148:	4680      	mov	r8, r0
 800c14a:	d102      	bne.n	800c152 <__cvt+0x62>
 800c14c:	f019 0f01 	tst.w	r9, #1
 800c150:	d026      	beq.n	800c1a0 <__cvt+0xb0>
 800c152:	2f46      	cmp	r7, #70	; 0x46
 800c154:	eb08 0906 	add.w	r9, r8, r6
 800c158:	d111      	bne.n	800c17e <__cvt+0x8e>
 800c15a:	f898 3000 	ldrb.w	r3, [r8]
 800c15e:	2b30      	cmp	r3, #48	; 0x30
 800c160:	d10a      	bne.n	800c178 <__cvt+0x88>
 800c162:	2200      	movs	r2, #0
 800c164:	2300      	movs	r3, #0
 800c166:	4620      	mov	r0, r4
 800c168:	4629      	mov	r1, r5
 800c16a:	f7f4 fcd5 	bl	8000b18 <__aeabi_dcmpeq>
 800c16e:	b918      	cbnz	r0, 800c178 <__cvt+0x88>
 800c170:	f1c6 0601 	rsb	r6, r6, #1
 800c174:	f8ca 6000 	str.w	r6, [sl]
 800c178:	f8da 3000 	ldr.w	r3, [sl]
 800c17c:	4499      	add	r9, r3
 800c17e:	2200      	movs	r2, #0
 800c180:	2300      	movs	r3, #0
 800c182:	4620      	mov	r0, r4
 800c184:	4629      	mov	r1, r5
 800c186:	f7f4 fcc7 	bl	8000b18 <__aeabi_dcmpeq>
 800c18a:	b938      	cbnz	r0, 800c19c <__cvt+0xac>
 800c18c:	2230      	movs	r2, #48	; 0x30
 800c18e:	9b03      	ldr	r3, [sp, #12]
 800c190:	454b      	cmp	r3, r9
 800c192:	d205      	bcs.n	800c1a0 <__cvt+0xb0>
 800c194:	1c59      	adds	r1, r3, #1
 800c196:	9103      	str	r1, [sp, #12]
 800c198:	701a      	strb	r2, [r3, #0]
 800c19a:	e7f8      	b.n	800c18e <__cvt+0x9e>
 800c19c:	f8cd 900c 	str.w	r9, [sp, #12]
 800c1a0:	9b03      	ldr	r3, [sp, #12]
 800c1a2:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800c1a4:	eba3 0308 	sub.w	r3, r3, r8
 800c1a8:	4640      	mov	r0, r8
 800c1aa:	6013      	str	r3, [r2, #0]
 800c1ac:	b004      	add	sp, #16
 800c1ae:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

0800c1b2 <__exponent>:
 800c1b2:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800c1b4:	2900      	cmp	r1, #0
 800c1b6:	4604      	mov	r4, r0
 800c1b8:	bfba      	itte	lt
 800c1ba:	4249      	neglt	r1, r1
 800c1bc:	232d      	movlt	r3, #45	; 0x2d
 800c1be:	232b      	movge	r3, #43	; 0x2b
 800c1c0:	2909      	cmp	r1, #9
 800c1c2:	f804 2b02 	strb.w	r2, [r4], #2
 800c1c6:	7043      	strb	r3, [r0, #1]
 800c1c8:	dd20      	ble.n	800c20c <__exponent+0x5a>
 800c1ca:	f10d 0307 	add.w	r3, sp, #7
 800c1ce:	461f      	mov	r7, r3
 800c1d0:	260a      	movs	r6, #10
 800c1d2:	fb91 f5f6 	sdiv	r5, r1, r6
 800c1d6:	fb06 1115 	mls	r1, r6, r5, r1
 800c1da:	3130      	adds	r1, #48	; 0x30
 800c1dc:	2d09      	cmp	r5, #9
 800c1de:	f803 1c01 	strb.w	r1, [r3, #-1]
 800c1e2:	f103 32ff 	add.w	r2, r3, #4294967295	; 0xffffffff
 800c1e6:	4629      	mov	r1, r5
 800c1e8:	dc09      	bgt.n	800c1fe <__exponent+0x4c>
 800c1ea:	3130      	adds	r1, #48	; 0x30
 800c1ec:	3b02      	subs	r3, #2
 800c1ee:	f802 1c01 	strb.w	r1, [r2, #-1]
 800c1f2:	42bb      	cmp	r3, r7
 800c1f4:	4622      	mov	r2, r4
 800c1f6:	d304      	bcc.n	800c202 <__exponent+0x50>
 800c1f8:	1a10      	subs	r0, r2, r0
 800c1fa:	b003      	add	sp, #12
 800c1fc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800c1fe:	4613      	mov	r3, r2
 800c200:	e7e7      	b.n	800c1d2 <__exponent+0x20>
 800c202:	f813 2b01 	ldrb.w	r2, [r3], #1
 800c206:	f804 2b01 	strb.w	r2, [r4], #1
 800c20a:	e7f2      	b.n	800c1f2 <__exponent+0x40>
 800c20c:	2330      	movs	r3, #48	; 0x30
 800c20e:	4419      	add	r1, r3
 800c210:	7083      	strb	r3, [r0, #2]
 800c212:	1d02      	adds	r2, r0, #4
 800c214:	70c1      	strb	r1, [r0, #3]
 800c216:	e7ef      	b.n	800c1f8 <__exponent+0x46>

0800c218 <_printf_float>:
 800c218:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c21c:	b08d      	sub	sp, #52	; 0x34
 800c21e:	460c      	mov	r4, r1
 800c220:	f8dd 8058 	ldr.w	r8, [sp, #88]	; 0x58
 800c224:	4616      	mov	r6, r2
 800c226:	461f      	mov	r7, r3
 800c228:	4605      	mov	r5, r0
 800c22a:	f001 fce3 	bl	800dbf4 <_localeconv_r>
 800c22e:	6803      	ldr	r3, [r0, #0]
 800c230:	9304      	str	r3, [sp, #16]
 800c232:	4618      	mov	r0, r3
 800c234:	f7f3 fff4 	bl	8000220 <strlen>
 800c238:	2300      	movs	r3, #0
 800c23a:	930a      	str	r3, [sp, #40]	; 0x28
 800c23c:	f8d8 3000 	ldr.w	r3, [r8]
 800c240:	9005      	str	r0, [sp, #20]
 800c242:	3307      	adds	r3, #7
 800c244:	f023 0307 	bic.w	r3, r3, #7
 800c248:	f103 0208 	add.w	r2, r3, #8
 800c24c:	f894 a018 	ldrb.w	sl, [r4, #24]
 800c250:	f8d4 b000 	ldr.w	fp, [r4]
 800c254:	f8c8 2000 	str.w	r2, [r8]
 800c258:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c25c:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 800c260:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 800c264:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 800c268:	9307      	str	r3, [sp, #28]
 800c26a:	f8cd 8018 	str.w	r8, [sp, #24]
 800c26e:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800c272:	4ba7      	ldr	r3, [pc, #668]	; (800c510 <_printf_float+0x2f8>)
 800c274:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800c278:	f7f4 fc80 	bl	8000b7c <__aeabi_dcmpun>
 800c27c:	bb70      	cbnz	r0, 800c2dc <_printf_float+0xc4>
 800c27e:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800c282:	4ba3      	ldr	r3, [pc, #652]	; (800c510 <_printf_float+0x2f8>)
 800c284:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800c288:	f7f4 fc5a 	bl	8000b40 <__aeabi_dcmple>
 800c28c:	bb30      	cbnz	r0, 800c2dc <_printf_float+0xc4>
 800c28e:	2200      	movs	r2, #0
 800c290:	2300      	movs	r3, #0
 800c292:	4640      	mov	r0, r8
 800c294:	4649      	mov	r1, r9
 800c296:	f7f4 fc49 	bl	8000b2c <__aeabi_dcmplt>
 800c29a:	b110      	cbz	r0, 800c2a2 <_printf_float+0x8a>
 800c29c:	232d      	movs	r3, #45	; 0x2d
 800c29e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800c2a2:	4a9c      	ldr	r2, [pc, #624]	; (800c514 <_printf_float+0x2fc>)
 800c2a4:	4b9c      	ldr	r3, [pc, #624]	; (800c518 <_printf_float+0x300>)
 800c2a6:	f1ba 0f47 	cmp.w	sl, #71	; 0x47
 800c2aa:	bf8c      	ite	hi
 800c2ac:	4690      	movhi	r8, r2
 800c2ae:	4698      	movls	r8, r3
 800c2b0:	2303      	movs	r3, #3
 800c2b2:	f02b 0204 	bic.w	r2, fp, #4
 800c2b6:	6123      	str	r3, [r4, #16]
 800c2b8:	6022      	str	r2, [r4, #0]
 800c2ba:	f04f 0900 	mov.w	r9, #0
 800c2be:	9700      	str	r7, [sp, #0]
 800c2c0:	4633      	mov	r3, r6
 800c2c2:	aa0b      	add	r2, sp, #44	; 0x2c
 800c2c4:	4621      	mov	r1, r4
 800c2c6:	4628      	mov	r0, r5
 800c2c8:	f000 f9e6 	bl	800c698 <_printf_common>
 800c2cc:	3001      	adds	r0, #1
 800c2ce:	f040 808d 	bne.w	800c3ec <_printf_float+0x1d4>
 800c2d2:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800c2d6:	b00d      	add	sp, #52	; 0x34
 800c2d8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c2dc:	4642      	mov	r2, r8
 800c2de:	464b      	mov	r3, r9
 800c2e0:	4640      	mov	r0, r8
 800c2e2:	4649      	mov	r1, r9
 800c2e4:	f7f4 fc4a 	bl	8000b7c <__aeabi_dcmpun>
 800c2e8:	b110      	cbz	r0, 800c2f0 <_printf_float+0xd8>
 800c2ea:	4a8c      	ldr	r2, [pc, #560]	; (800c51c <_printf_float+0x304>)
 800c2ec:	4b8c      	ldr	r3, [pc, #560]	; (800c520 <_printf_float+0x308>)
 800c2ee:	e7da      	b.n	800c2a6 <_printf_float+0x8e>
 800c2f0:	6861      	ldr	r1, [r4, #4]
 800c2f2:	1c4b      	adds	r3, r1, #1
 800c2f4:	f44b 6280 	orr.w	r2, fp, #1024	; 0x400
 800c2f8:	a80a      	add	r0, sp, #40	; 0x28
 800c2fa:	d13e      	bne.n	800c37a <_printf_float+0x162>
 800c2fc:	2306      	movs	r3, #6
 800c2fe:	6063      	str	r3, [r4, #4]
 800c300:	2300      	movs	r3, #0
 800c302:	e9cd 0302 	strd	r0, r3, [sp, #8]
 800c306:	ab09      	add	r3, sp, #36	; 0x24
 800c308:	9300      	str	r3, [sp, #0]
 800c30a:	ec49 8b10 	vmov	d0, r8, r9
 800c30e:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 800c312:	6022      	str	r2, [r4, #0]
 800c314:	f8cd a004 	str.w	sl, [sp, #4]
 800c318:	6861      	ldr	r1, [r4, #4]
 800c31a:	4628      	mov	r0, r5
 800c31c:	f7ff fee8 	bl	800c0f0 <__cvt>
 800c320:	f00a 03df 	and.w	r3, sl, #223	; 0xdf
 800c324:	2b47      	cmp	r3, #71	; 0x47
 800c326:	4680      	mov	r8, r0
 800c328:	d109      	bne.n	800c33e <_printf_float+0x126>
 800c32a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c32c:	1cd8      	adds	r0, r3, #3
 800c32e:	db02      	blt.n	800c336 <_printf_float+0x11e>
 800c330:	6862      	ldr	r2, [r4, #4]
 800c332:	4293      	cmp	r3, r2
 800c334:	dd47      	ble.n	800c3c6 <_printf_float+0x1ae>
 800c336:	f1aa 0a02 	sub.w	sl, sl, #2
 800c33a:	fa5f fa8a 	uxtb.w	sl, sl
 800c33e:	f1ba 0f65 	cmp.w	sl, #101	; 0x65
 800c342:	9909      	ldr	r1, [sp, #36]	; 0x24
 800c344:	d824      	bhi.n	800c390 <_printf_float+0x178>
 800c346:	3901      	subs	r1, #1
 800c348:	4652      	mov	r2, sl
 800c34a:	f104 0050 	add.w	r0, r4, #80	; 0x50
 800c34e:	9109      	str	r1, [sp, #36]	; 0x24
 800c350:	f7ff ff2f 	bl	800c1b2 <__exponent>
 800c354:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800c356:	1813      	adds	r3, r2, r0
 800c358:	2a01      	cmp	r2, #1
 800c35a:	4681      	mov	r9, r0
 800c35c:	6123      	str	r3, [r4, #16]
 800c35e:	dc02      	bgt.n	800c366 <_printf_float+0x14e>
 800c360:	6822      	ldr	r2, [r4, #0]
 800c362:	07d1      	lsls	r1, r2, #31
 800c364:	d501      	bpl.n	800c36a <_printf_float+0x152>
 800c366:	3301      	adds	r3, #1
 800c368:	6123      	str	r3, [r4, #16]
 800c36a:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 800c36e:	2b00      	cmp	r3, #0
 800c370:	d0a5      	beq.n	800c2be <_printf_float+0xa6>
 800c372:	232d      	movs	r3, #45	; 0x2d
 800c374:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800c378:	e7a1      	b.n	800c2be <_printf_float+0xa6>
 800c37a:	f1ba 0f67 	cmp.w	sl, #103	; 0x67
 800c37e:	f000 8177 	beq.w	800c670 <_printf_float+0x458>
 800c382:	f1ba 0f47 	cmp.w	sl, #71	; 0x47
 800c386:	d1bb      	bne.n	800c300 <_printf_float+0xe8>
 800c388:	2900      	cmp	r1, #0
 800c38a:	d1b9      	bne.n	800c300 <_printf_float+0xe8>
 800c38c:	2301      	movs	r3, #1
 800c38e:	e7b6      	b.n	800c2fe <_printf_float+0xe6>
 800c390:	f1ba 0f66 	cmp.w	sl, #102	; 0x66
 800c394:	d119      	bne.n	800c3ca <_printf_float+0x1b2>
 800c396:	2900      	cmp	r1, #0
 800c398:	6863      	ldr	r3, [r4, #4]
 800c39a:	dd0c      	ble.n	800c3b6 <_printf_float+0x19e>
 800c39c:	6121      	str	r1, [r4, #16]
 800c39e:	b913      	cbnz	r3, 800c3a6 <_printf_float+0x18e>
 800c3a0:	6822      	ldr	r2, [r4, #0]
 800c3a2:	07d2      	lsls	r2, r2, #31
 800c3a4:	d502      	bpl.n	800c3ac <_printf_float+0x194>
 800c3a6:	3301      	adds	r3, #1
 800c3a8:	440b      	add	r3, r1
 800c3aa:	6123      	str	r3, [r4, #16]
 800c3ac:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c3ae:	65a3      	str	r3, [r4, #88]	; 0x58
 800c3b0:	f04f 0900 	mov.w	r9, #0
 800c3b4:	e7d9      	b.n	800c36a <_printf_float+0x152>
 800c3b6:	b913      	cbnz	r3, 800c3be <_printf_float+0x1a6>
 800c3b8:	6822      	ldr	r2, [r4, #0]
 800c3ba:	07d0      	lsls	r0, r2, #31
 800c3bc:	d501      	bpl.n	800c3c2 <_printf_float+0x1aa>
 800c3be:	3302      	adds	r3, #2
 800c3c0:	e7f3      	b.n	800c3aa <_printf_float+0x192>
 800c3c2:	2301      	movs	r3, #1
 800c3c4:	e7f1      	b.n	800c3aa <_printf_float+0x192>
 800c3c6:	f04f 0a67 	mov.w	sl, #103	; 0x67
 800c3ca:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 800c3ce:	4293      	cmp	r3, r2
 800c3d0:	db05      	blt.n	800c3de <_printf_float+0x1c6>
 800c3d2:	6822      	ldr	r2, [r4, #0]
 800c3d4:	6123      	str	r3, [r4, #16]
 800c3d6:	07d1      	lsls	r1, r2, #31
 800c3d8:	d5e8      	bpl.n	800c3ac <_printf_float+0x194>
 800c3da:	3301      	adds	r3, #1
 800c3dc:	e7e5      	b.n	800c3aa <_printf_float+0x192>
 800c3de:	2b00      	cmp	r3, #0
 800c3e0:	bfd4      	ite	le
 800c3e2:	f1c3 0302 	rsble	r3, r3, #2
 800c3e6:	2301      	movgt	r3, #1
 800c3e8:	4413      	add	r3, r2
 800c3ea:	e7de      	b.n	800c3aa <_printf_float+0x192>
 800c3ec:	6823      	ldr	r3, [r4, #0]
 800c3ee:	055a      	lsls	r2, r3, #21
 800c3f0:	d407      	bmi.n	800c402 <_printf_float+0x1ea>
 800c3f2:	6923      	ldr	r3, [r4, #16]
 800c3f4:	4642      	mov	r2, r8
 800c3f6:	4631      	mov	r1, r6
 800c3f8:	4628      	mov	r0, r5
 800c3fa:	47b8      	blx	r7
 800c3fc:	3001      	adds	r0, #1
 800c3fe:	d12b      	bne.n	800c458 <_printf_float+0x240>
 800c400:	e767      	b.n	800c2d2 <_printf_float+0xba>
 800c402:	f1ba 0f65 	cmp.w	sl, #101	; 0x65
 800c406:	f240 80dc 	bls.w	800c5c2 <_printf_float+0x3aa>
 800c40a:	2200      	movs	r2, #0
 800c40c:	2300      	movs	r3, #0
 800c40e:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800c412:	f7f4 fb81 	bl	8000b18 <__aeabi_dcmpeq>
 800c416:	2800      	cmp	r0, #0
 800c418:	d033      	beq.n	800c482 <_printf_float+0x26a>
 800c41a:	2301      	movs	r3, #1
 800c41c:	4a41      	ldr	r2, [pc, #260]	; (800c524 <_printf_float+0x30c>)
 800c41e:	4631      	mov	r1, r6
 800c420:	4628      	mov	r0, r5
 800c422:	47b8      	blx	r7
 800c424:	3001      	adds	r0, #1
 800c426:	f43f af54 	beq.w	800c2d2 <_printf_float+0xba>
 800c42a:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800c42e:	429a      	cmp	r2, r3
 800c430:	db02      	blt.n	800c438 <_printf_float+0x220>
 800c432:	6823      	ldr	r3, [r4, #0]
 800c434:	07d8      	lsls	r0, r3, #31
 800c436:	d50f      	bpl.n	800c458 <_printf_float+0x240>
 800c438:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800c43c:	4631      	mov	r1, r6
 800c43e:	4628      	mov	r0, r5
 800c440:	47b8      	blx	r7
 800c442:	3001      	adds	r0, #1
 800c444:	f43f af45 	beq.w	800c2d2 <_printf_float+0xba>
 800c448:	f04f 0800 	mov.w	r8, #0
 800c44c:	f104 091a 	add.w	r9, r4, #26
 800c450:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800c452:	3b01      	subs	r3, #1
 800c454:	4543      	cmp	r3, r8
 800c456:	dc09      	bgt.n	800c46c <_printf_float+0x254>
 800c458:	6823      	ldr	r3, [r4, #0]
 800c45a:	079b      	lsls	r3, r3, #30
 800c45c:	f100 8103 	bmi.w	800c666 <_printf_float+0x44e>
 800c460:	68e0      	ldr	r0, [r4, #12]
 800c462:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800c464:	4298      	cmp	r0, r3
 800c466:	bfb8      	it	lt
 800c468:	4618      	movlt	r0, r3
 800c46a:	e734      	b.n	800c2d6 <_printf_float+0xbe>
 800c46c:	2301      	movs	r3, #1
 800c46e:	464a      	mov	r2, r9
 800c470:	4631      	mov	r1, r6
 800c472:	4628      	mov	r0, r5
 800c474:	47b8      	blx	r7
 800c476:	3001      	adds	r0, #1
 800c478:	f43f af2b 	beq.w	800c2d2 <_printf_float+0xba>
 800c47c:	f108 0801 	add.w	r8, r8, #1
 800c480:	e7e6      	b.n	800c450 <_printf_float+0x238>
 800c482:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c484:	2b00      	cmp	r3, #0
 800c486:	dc2b      	bgt.n	800c4e0 <_printf_float+0x2c8>
 800c488:	2301      	movs	r3, #1
 800c48a:	4a26      	ldr	r2, [pc, #152]	; (800c524 <_printf_float+0x30c>)
 800c48c:	4631      	mov	r1, r6
 800c48e:	4628      	mov	r0, r5
 800c490:	47b8      	blx	r7
 800c492:	3001      	adds	r0, #1
 800c494:	f43f af1d 	beq.w	800c2d2 <_printf_float+0xba>
 800c498:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c49a:	b923      	cbnz	r3, 800c4a6 <_printf_float+0x28e>
 800c49c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800c49e:	b913      	cbnz	r3, 800c4a6 <_printf_float+0x28e>
 800c4a0:	6823      	ldr	r3, [r4, #0]
 800c4a2:	07d9      	lsls	r1, r3, #31
 800c4a4:	d5d8      	bpl.n	800c458 <_printf_float+0x240>
 800c4a6:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800c4aa:	4631      	mov	r1, r6
 800c4ac:	4628      	mov	r0, r5
 800c4ae:	47b8      	blx	r7
 800c4b0:	3001      	adds	r0, #1
 800c4b2:	f43f af0e 	beq.w	800c2d2 <_printf_float+0xba>
 800c4b6:	f04f 0900 	mov.w	r9, #0
 800c4ba:	f104 0a1a 	add.w	sl, r4, #26
 800c4be:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c4c0:	425b      	negs	r3, r3
 800c4c2:	454b      	cmp	r3, r9
 800c4c4:	dc01      	bgt.n	800c4ca <_printf_float+0x2b2>
 800c4c6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800c4c8:	e794      	b.n	800c3f4 <_printf_float+0x1dc>
 800c4ca:	2301      	movs	r3, #1
 800c4cc:	4652      	mov	r2, sl
 800c4ce:	4631      	mov	r1, r6
 800c4d0:	4628      	mov	r0, r5
 800c4d2:	47b8      	blx	r7
 800c4d4:	3001      	adds	r0, #1
 800c4d6:	f43f aefc 	beq.w	800c2d2 <_printf_float+0xba>
 800c4da:	f109 0901 	add.w	r9, r9, #1
 800c4de:	e7ee      	b.n	800c4be <_printf_float+0x2a6>
 800c4e0:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800c4e2:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800c4e4:	429a      	cmp	r2, r3
 800c4e6:	bfa8      	it	ge
 800c4e8:	461a      	movge	r2, r3
 800c4ea:	2a00      	cmp	r2, #0
 800c4ec:	4691      	mov	r9, r2
 800c4ee:	dd07      	ble.n	800c500 <_printf_float+0x2e8>
 800c4f0:	4613      	mov	r3, r2
 800c4f2:	4631      	mov	r1, r6
 800c4f4:	4642      	mov	r2, r8
 800c4f6:	4628      	mov	r0, r5
 800c4f8:	47b8      	blx	r7
 800c4fa:	3001      	adds	r0, #1
 800c4fc:	f43f aee9 	beq.w	800c2d2 <_printf_float+0xba>
 800c500:	f104 031a 	add.w	r3, r4, #26
 800c504:	f04f 0b00 	mov.w	fp, #0
 800c508:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800c50c:	9306      	str	r3, [sp, #24]
 800c50e:	e015      	b.n	800c53c <_printf_float+0x324>
 800c510:	7fefffff 	.word	0x7fefffff
 800c514:	0800f1e8 	.word	0x0800f1e8
 800c518:	0800f1e4 	.word	0x0800f1e4
 800c51c:	0800f1f0 	.word	0x0800f1f0
 800c520:	0800f1ec 	.word	0x0800f1ec
 800c524:	0800f1f4 	.word	0x0800f1f4
 800c528:	2301      	movs	r3, #1
 800c52a:	9a06      	ldr	r2, [sp, #24]
 800c52c:	4631      	mov	r1, r6
 800c52e:	4628      	mov	r0, r5
 800c530:	47b8      	blx	r7
 800c532:	3001      	adds	r0, #1
 800c534:	f43f aecd 	beq.w	800c2d2 <_printf_float+0xba>
 800c538:	f10b 0b01 	add.w	fp, fp, #1
 800c53c:	f8d4 a058 	ldr.w	sl, [r4, #88]	; 0x58
 800c540:	ebaa 0309 	sub.w	r3, sl, r9
 800c544:	455b      	cmp	r3, fp
 800c546:	dcef      	bgt.n	800c528 <_printf_float+0x310>
 800c548:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800c54c:	429a      	cmp	r2, r3
 800c54e:	44d0      	add	r8, sl
 800c550:	db15      	blt.n	800c57e <_printf_float+0x366>
 800c552:	6823      	ldr	r3, [r4, #0]
 800c554:	07da      	lsls	r2, r3, #31
 800c556:	d412      	bmi.n	800c57e <_printf_float+0x366>
 800c558:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800c55a:	9909      	ldr	r1, [sp, #36]	; 0x24
 800c55c:	eba3 020a 	sub.w	r2, r3, sl
 800c560:	eba3 0a01 	sub.w	sl, r3, r1
 800c564:	4592      	cmp	sl, r2
 800c566:	bfa8      	it	ge
 800c568:	4692      	movge	sl, r2
 800c56a:	f1ba 0f00 	cmp.w	sl, #0
 800c56e:	dc0e      	bgt.n	800c58e <_printf_float+0x376>
 800c570:	f04f 0800 	mov.w	r8, #0
 800c574:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800c578:	f104 091a 	add.w	r9, r4, #26
 800c57c:	e019      	b.n	800c5b2 <_printf_float+0x39a>
 800c57e:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800c582:	4631      	mov	r1, r6
 800c584:	4628      	mov	r0, r5
 800c586:	47b8      	blx	r7
 800c588:	3001      	adds	r0, #1
 800c58a:	d1e5      	bne.n	800c558 <_printf_float+0x340>
 800c58c:	e6a1      	b.n	800c2d2 <_printf_float+0xba>
 800c58e:	4653      	mov	r3, sl
 800c590:	4642      	mov	r2, r8
 800c592:	4631      	mov	r1, r6
 800c594:	4628      	mov	r0, r5
 800c596:	47b8      	blx	r7
 800c598:	3001      	adds	r0, #1
 800c59a:	d1e9      	bne.n	800c570 <_printf_float+0x358>
 800c59c:	e699      	b.n	800c2d2 <_printf_float+0xba>
 800c59e:	2301      	movs	r3, #1
 800c5a0:	464a      	mov	r2, r9
 800c5a2:	4631      	mov	r1, r6
 800c5a4:	4628      	mov	r0, r5
 800c5a6:	47b8      	blx	r7
 800c5a8:	3001      	adds	r0, #1
 800c5aa:	f43f ae92 	beq.w	800c2d2 <_printf_float+0xba>
 800c5ae:	f108 0801 	add.w	r8, r8, #1
 800c5b2:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800c5b6:	1a9b      	subs	r3, r3, r2
 800c5b8:	eba3 030a 	sub.w	r3, r3, sl
 800c5bc:	4543      	cmp	r3, r8
 800c5be:	dcee      	bgt.n	800c59e <_printf_float+0x386>
 800c5c0:	e74a      	b.n	800c458 <_printf_float+0x240>
 800c5c2:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800c5c4:	2a01      	cmp	r2, #1
 800c5c6:	dc01      	bgt.n	800c5cc <_printf_float+0x3b4>
 800c5c8:	07db      	lsls	r3, r3, #31
 800c5ca:	d53a      	bpl.n	800c642 <_printf_float+0x42a>
 800c5cc:	2301      	movs	r3, #1
 800c5ce:	4642      	mov	r2, r8
 800c5d0:	4631      	mov	r1, r6
 800c5d2:	4628      	mov	r0, r5
 800c5d4:	47b8      	blx	r7
 800c5d6:	3001      	adds	r0, #1
 800c5d8:	f43f ae7b 	beq.w	800c2d2 <_printf_float+0xba>
 800c5dc:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800c5e0:	4631      	mov	r1, r6
 800c5e2:	4628      	mov	r0, r5
 800c5e4:	47b8      	blx	r7
 800c5e6:	3001      	adds	r0, #1
 800c5e8:	f108 0801 	add.w	r8, r8, #1
 800c5ec:	f43f ae71 	beq.w	800c2d2 <_printf_float+0xba>
 800c5f0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800c5f2:	2200      	movs	r2, #0
 800c5f4:	f103 3aff 	add.w	sl, r3, #4294967295	; 0xffffffff
 800c5f8:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800c5fc:	2300      	movs	r3, #0
 800c5fe:	f7f4 fa8b 	bl	8000b18 <__aeabi_dcmpeq>
 800c602:	b9c8      	cbnz	r0, 800c638 <_printf_float+0x420>
 800c604:	4653      	mov	r3, sl
 800c606:	4642      	mov	r2, r8
 800c608:	4631      	mov	r1, r6
 800c60a:	4628      	mov	r0, r5
 800c60c:	47b8      	blx	r7
 800c60e:	3001      	adds	r0, #1
 800c610:	d10e      	bne.n	800c630 <_printf_float+0x418>
 800c612:	e65e      	b.n	800c2d2 <_printf_float+0xba>
 800c614:	2301      	movs	r3, #1
 800c616:	4652      	mov	r2, sl
 800c618:	4631      	mov	r1, r6
 800c61a:	4628      	mov	r0, r5
 800c61c:	47b8      	blx	r7
 800c61e:	3001      	adds	r0, #1
 800c620:	f43f ae57 	beq.w	800c2d2 <_printf_float+0xba>
 800c624:	f108 0801 	add.w	r8, r8, #1
 800c628:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800c62a:	3b01      	subs	r3, #1
 800c62c:	4543      	cmp	r3, r8
 800c62e:	dcf1      	bgt.n	800c614 <_printf_float+0x3fc>
 800c630:	464b      	mov	r3, r9
 800c632:	f104 0250 	add.w	r2, r4, #80	; 0x50
 800c636:	e6de      	b.n	800c3f6 <_printf_float+0x1de>
 800c638:	f04f 0800 	mov.w	r8, #0
 800c63c:	f104 0a1a 	add.w	sl, r4, #26
 800c640:	e7f2      	b.n	800c628 <_printf_float+0x410>
 800c642:	2301      	movs	r3, #1
 800c644:	e7df      	b.n	800c606 <_printf_float+0x3ee>
 800c646:	2301      	movs	r3, #1
 800c648:	464a      	mov	r2, r9
 800c64a:	4631      	mov	r1, r6
 800c64c:	4628      	mov	r0, r5
 800c64e:	47b8      	blx	r7
 800c650:	3001      	adds	r0, #1
 800c652:	f43f ae3e 	beq.w	800c2d2 <_printf_float+0xba>
 800c656:	f108 0801 	add.w	r8, r8, #1
 800c65a:	68e3      	ldr	r3, [r4, #12]
 800c65c:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800c65e:	1a9b      	subs	r3, r3, r2
 800c660:	4543      	cmp	r3, r8
 800c662:	dcf0      	bgt.n	800c646 <_printf_float+0x42e>
 800c664:	e6fc      	b.n	800c460 <_printf_float+0x248>
 800c666:	f04f 0800 	mov.w	r8, #0
 800c66a:	f104 0919 	add.w	r9, r4, #25
 800c66e:	e7f4      	b.n	800c65a <_printf_float+0x442>
 800c670:	2900      	cmp	r1, #0
 800c672:	f43f ae8b 	beq.w	800c38c <_printf_float+0x174>
 800c676:	2300      	movs	r3, #0
 800c678:	e9cd 0302 	strd	r0, r3, [sp, #8]
 800c67c:	ab09      	add	r3, sp, #36	; 0x24
 800c67e:	9300      	str	r3, [sp, #0]
 800c680:	ec49 8b10 	vmov	d0, r8, r9
 800c684:	6022      	str	r2, [r4, #0]
 800c686:	f8cd a004 	str.w	sl, [sp, #4]
 800c68a:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 800c68e:	4628      	mov	r0, r5
 800c690:	f7ff fd2e 	bl	800c0f0 <__cvt>
 800c694:	4680      	mov	r8, r0
 800c696:	e648      	b.n	800c32a <_printf_float+0x112>

0800c698 <_printf_common>:
 800c698:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800c69c:	4691      	mov	r9, r2
 800c69e:	461f      	mov	r7, r3
 800c6a0:	688a      	ldr	r2, [r1, #8]
 800c6a2:	690b      	ldr	r3, [r1, #16]
 800c6a4:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800c6a8:	4293      	cmp	r3, r2
 800c6aa:	bfb8      	it	lt
 800c6ac:	4613      	movlt	r3, r2
 800c6ae:	f8c9 3000 	str.w	r3, [r9]
 800c6b2:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800c6b6:	4606      	mov	r6, r0
 800c6b8:	460c      	mov	r4, r1
 800c6ba:	b112      	cbz	r2, 800c6c2 <_printf_common+0x2a>
 800c6bc:	3301      	adds	r3, #1
 800c6be:	f8c9 3000 	str.w	r3, [r9]
 800c6c2:	6823      	ldr	r3, [r4, #0]
 800c6c4:	0699      	lsls	r1, r3, #26
 800c6c6:	bf42      	ittt	mi
 800c6c8:	f8d9 3000 	ldrmi.w	r3, [r9]
 800c6cc:	3302      	addmi	r3, #2
 800c6ce:	f8c9 3000 	strmi.w	r3, [r9]
 800c6d2:	6825      	ldr	r5, [r4, #0]
 800c6d4:	f015 0506 	ands.w	r5, r5, #6
 800c6d8:	d107      	bne.n	800c6ea <_printf_common+0x52>
 800c6da:	f104 0a19 	add.w	sl, r4, #25
 800c6de:	68e3      	ldr	r3, [r4, #12]
 800c6e0:	f8d9 2000 	ldr.w	r2, [r9]
 800c6e4:	1a9b      	subs	r3, r3, r2
 800c6e6:	42ab      	cmp	r3, r5
 800c6e8:	dc28      	bgt.n	800c73c <_printf_common+0xa4>
 800c6ea:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 800c6ee:	6822      	ldr	r2, [r4, #0]
 800c6f0:	3300      	adds	r3, #0
 800c6f2:	bf18      	it	ne
 800c6f4:	2301      	movne	r3, #1
 800c6f6:	0692      	lsls	r2, r2, #26
 800c6f8:	d42d      	bmi.n	800c756 <_printf_common+0xbe>
 800c6fa:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800c6fe:	4639      	mov	r1, r7
 800c700:	4630      	mov	r0, r6
 800c702:	47c0      	blx	r8
 800c704:	3001      	adds	r0, #1
 800c706:	d020      	beq.n	800c74a <_printf_common+0xb2>
 800c708:	6823      	ldr	r3, [r4, #0]
 800c70a:	68e5      	ldr	r5, [r4, #12]
 800c70c:	f8d9 2000 	ldr.w	r2, [r9]
 800c710:	f003 0306 	and.w	r3, r3, #6
 800c714:	2b04      	cmp	r3, #4
 800c716:	bf08      	it	eq
 800c718:	1aad      	subeq	r5, r5, r2
 800c71a:	68a3      	ldr	r3, [r4, #8]
 800c71c:	6922      	ldr	r2, [r4, #16]
 800c71e:	bf0c      	ite	eq
 800c720:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800c724:	2500      	movne	r5, #0
 800c726:	4293      	cmp	r3, r2
 800c728:	bfc4      	itt	gt
 800c72a:	1a9b      	subgt	r3, r3, r2
 800c72c:	18ed      	addgt	r5, r5, r3
 800c72e:	f04f 0900 	mov.w	r9, #0
 800c732:	341a      	adds	r4, #26
 800c734:	454d      	cmp	r5, r9
 800c736:	d11a      	bne.n	800c76e <_printf_common+0xd6>
 800c738:	2000      	movs	r0, #0
 800c73a:	e008      	b.n	800c74e <_printf_common+0xb6>
 800c73c:	2301      	movs	r3, #1
 800c73e:	4652      	mov	r2, sl
 800c740:	4639      	mov	r1, r7
 800c742:	4630      	mov	r0, r6
 800c744:	47c0      	blx	r8
 800c746:	3001      	adds	r0, #1
 800c748:	d103      	bne.n	800c752 <_printf_common+0xba>
 800c74a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800c74e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c752:	3501      	adds	r5, #1
 800c754:	e7c3      	b.n	800c6de <_printf_common+0x46>
 800c756:	18e1      	adds	r1, r4, r3
 800c758:	1c5a      	adds	r2, r3, #1
 800c75a:	2030      	movs	r0, #48	; 0x30
 800c75c:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800c760:	4422      	add	r2, r4
 800c762:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800c766:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800c76a:	3302      	adds	r3, #2
 800c76c:	e7c5      	b.n	800c6fa <_printf_common+0x62>
 800c76e:	2301      	movs	r3, #1
 800c770:	4622      	mov	r2, r4
 800c772:	4639      	mov	r1, r7
 800c774:	4630      	mov	r0, r6
 800c776:	47c0      	blx	r8
 800c778:	3001      	adds	r0, #1
 800c77a:	d0e6      	beq.n	800c74a <_printf_common+0xb2>
 800c77c:	f109 0901 	add.w	r9, r9, #1
 800c780:	e7d8      	b.n	800c734 <_printf_common+0x9c>
	...

0800c784 <_printf_i>:
 800c784:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800c788:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 800c78c:	460c      	mov	r4, r1
 800c78e:	7e09      	ldrb	r1, [r1, #24]
 800c790:	b085      	sub	sp, #20
 800c792:	296e      	cmp	r1, #110	; 0x6e
 800c794:	4617      	mov	r7, r2
 800c796:	4606      	mov	r6, r0
 800c798:	4698      	mov	r8, r3
 800c79a:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800c79c:	f000 80b3 	beq.w	800c906 <_printf_i+0x182>
 800c7a0:	d822      	bhi.n	800c7e8 <_printf_i+0x64>
 800c7a2:	2963      	cmp	r1, #99	; 0x63
 800c7a4:	d036      	beq.n	800c814 <_printf_i+0x90>
 800c7a6:	d80a      	bhi.n	800c7be <_printf_i+0x3a>
 800c7a8:	2900      	cmp	r1, #0
 800c7aa:	f000 80b9 	beq.w	800c920 <_printf_i+0x19c>
 800c7ae:	2958      	cmp	r1, #88	; 0x58
 800c7b0:	f000 8083 	beq.w	800c8ba <_printf_i+0x136>
 800c7b4:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800c7b8:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 800c7bc:	e032      	b.n	800c824 <_printf_i+0xa0>
 800c7be:	2964      	cmp	r1, #100	; 0x64
 800c7c0:	d001      	beq.n	800c7c6 <_printf_i+0x42>
 800c7c2:	2969      	cmp	r1, #105	; 0x69
 800c7c4:	d1f6      	bne.n	800c7b4 <_printf_i+0x30>
 800c7c6:	6820      	ldr	r0, [r4, #0]
 800c7c8:	6813      	ldr	r3, [r2, #0]
 800c7ca:	0605      	lsls	r5, r0, #24
 800c7cc:	f103 0104 	add.w	r1, r3, #4
 800c7d0:	d52a      	bpl.n	800c828 <_printf_i+0xa4>
 800c7d2:	681b      	ldr	r3, [r3, #0]
 800c7d4:	6011      	str	r1, [r2, #0]
 800c7d6:	2b00      	cmp	r3, #0
 800c7d8:	da03      	bge.n	800c7e2 <_printf_i+0x5e>
 800c7da:	222d      	movs	r2, #45	; 0x2d
 800c7dc:	425b      	negs	r3, r3
 800c7de:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 800c7e2:	486f      	ldr	r0, [pc, #444]	; (800c9a0 <_printf_i+0x21c>)
 800c7e4:	220a      	movs	r2, #10
 800c7e6:	e039      	b.n	800c85c <_printf_i+0xd8>
 800c7e8:	2973      	cmp	r1, #115	; 0x73
 800c7ea:	f000 809d 	beq.w	800c928 <_printf_i+0x1a4>
 800c7ee:	d808      	bhi.n	800c802 <_printf_i+0x7e>
 800c7f0:	296f      	cmp	r1, #111	; 0x6f
 800c7f2:	d020      	beq.n	800c836 <_printf_i+0xb2>
 800c7f4:	2970      	cmp	r1, #112	; 0x70
 800c7f6:	d1dd      	bne.n	800c7b4 <_printf_i+0x30>
 800c7f8:	6823      	ldr	r3, [r4, #0]
 800c7fa:	f043 0320 	orr.w	r3, r3, #32
 800c7fe:	6023      	str	r3, [r4, #0]
 800c800:	e003      	b.n	800c80a <_printf_i+0x86>
 800c802:	2975      	cmp	r1, #117	; 0x75
 800c804:	d017      	beq.n	800c836 <_printf_i+0xb2>
 800c806:	2978      	cmp	r1, #120	; 0x78
 800c808:	d1d4      	bne.n	800c7b4 <_printf_i+0x30>
 800c80a:	2378      	movs	r3, #120	; 0x78
 800c80c:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800c810:	4864      	ldr	r0, [pc, #400]	; (800c9a4 <_printf_i+0x220>)
 800c812:	e055      	b.n	800c8c0 <_printf_i+0x13c>
 800c814:	6813      	ldr	r3, [r2, #0]
 800c816:	1d19      	adds	r1, r3, #4
 800c818:	681b      	ldr	r3, [r3, #0]
 800c81a:	6011      	str	r1, [r2, #0]
 800c81c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800c820:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800c824:	2301      	movs	r3, #1
 800c826:	e08c      	b.n	800c942 <_printf_i+0x1be>
 800c828:	681b      	ldr	r3, [r3, #0]
 800c82a:	6011      	str	r1, [r2, #0]
 800c82c:	f010 0f40 	tst.w	r0, #64	; 0x40
 800c830:	bf18      	it	ne
 800c832:	b21b      	sxthne	r3, r3
 800c834:	e7cf      	b.n	800c7d6 <_printf_i+0x52>
 800c836:	6813      	ldr	r3, [r2, #0]
 800c838:	6825      	ldr	r5, [r4, #0]
 800c83a:	1d18      	adds	r0, r3, #4
 800c83c:	6010      	str	r0, [r2, #0]
 800c83e:	0628      	lsls	r0, r5, #24
 800c840:	d501      	bpl.n	800c846 <_printf_i+0xc2>
 800c842:	681b      	ldr	r3, [r3, #0]
 800c844:	e002      	b.n	800c84c <_printf_i+0xc8>
 800c846:	0668      	lsls	r0, r5, #25
 800c848:	d5fb      	bpl.n	800c842 <_printf_i+0xbe>
 800c84a:	881b      	ldrh	r3, [r3, #0]
 800c84c:	4854      	ldr	r0, [pc, #336]	; (800c9a0 <_printf_i+0x21c>)
 800c84e:	296f      	cmp	r1, #111	; 0x6f
 800c850:	bf14      	ite	ne
 800c852:	220a      	movne	r2, #10
 800c854:	2208      	moveq	r2, #8
 800c856:	2100      	movs	r1, #0
 800c858:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800c85c:	6865      	ldr	r5, [r4, #4]
 800c85e:	60a5      	str	r5, [r4, #8]
 800c860:	2d00      	cmp	r5, #0
 800c862:	f2c0 8095 	blt.w	800c990 <_printf_i+0x20c>
 800c866:	6821      	ldr	r1, [r4, #0]
 800c868:	f021 0104 	bic.w	r1, r1, #4
 800c86c:	6021      	str	r1, [r4, #0]
 800c86e:	2b00      	cmp	r3, #0
 800c870:	d13d      	bne.n	800c8ee <_printf_i+0x16a>
 800c872:	2d00      	cmp	r5, #0
 800c874:	f040 808e 	bne.w	800c994 <_printf_i+0x210>
 800c878:	4665      	mov	r5, ip
 800c87a:	2a08      	cmp	r2, #8
 800c87c:	d10b      	bne.n	800c896 <_printf_i+0x112>
 800c87e:	6823      	ldr	r3, [r4, #0]
 800c880:	07db      	lsls	r3, r3, #31
 800c882:	d508      	bpl.n	800c896 <_printf_i+0x112>
 800c884:	6923      	ldr	r3, [r4, #16]
 800c886:	6862      	ldr	r2, [r4, #4]
 800c888:	429a      	cmp	r2, r3
 800c88a:	bfde      	ittt	le
 800c88c:	2330      	movle	r3, #48	; 0x30
 800c88e:	f805 3c01 	strble.w	r3, [r5, #-1]
 800c892:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 800c896:	ebac 0305 	sub.w	r3, ip, r5
 800c89a:	6123      	str	r3, [r4, #16]
 800c89c:	f8cd 8000 	str.w	r8, [sp]
 800c8a0:	463b      	mov	r3, r7
 800c8a2:	aa03      	add	r2, sp, #12
 800c8a4:	4621      	mov	r1, r4
 800c8a6:	4630      	mov	r0, r6
 800c8a8:	f7ff fef6 	bl	800c698 <_printf_common>
 800c8ac:	3001      	adds	r0, #1
 800c8ae:	d14d      	bne.n	800c94c <_printf_i+0x1c8>
 800c8b0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800c8b4:	b005      	add	sp, #20
 800c8b6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800c8ba:	4839      	ldr	r0, [pc, #228]	; (800c9a0 <_printf_i+0x21c>)
 800c8bc:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 800c8c0:	6813      	ldr	r3, [r2, #0]
 800c8c2:	6821      	ldr	r1, [r4, #0]
 800c8c4:	1d1d      	adds	r5, r3, #4
 800c8c6:	681b      	ldr	r3, [r3, #0]
 800c8c8:	6015      	str	r5, [r2, #0]
 800c8ca:	060a      	lsls	r2, r1, #24
 800c8cc:	d50b      	bpl.n	800c8e6 <_printf_i+0x162>
 800c8ce:	07ca      	lsls	r2, r1, #31
 800c8d0:	bf44      	itt	mi
 800c8d2:	f041 0120 	orrmi.w	r1, r1, #32
 800c8d6:	6021      	strmi	r1, [r4, #0]
 800c8d8:	b91b      	cbnz	r3, 800c8e2 <_printf_i+0x15e>
 800c8da:	6822      	ldr	r2, [r4, #0]
 800c8dc:	f022 0220 	bic.w	r2, r2, #32
 800c8e0:	6022      	str	r2, [r4, #0]
 800c8e2:	2210      	movs	r2, #16
 800c8e4:	e7b7      	b.n	800c856 <_printf_i+0xd2>
 800c8e6:	064d      	lsls	r5, r1, #25
 800c8e8:	bf48      	it	mi
 800c8ea:	b29b      	uxthmi	r3, r3
 800c8ec:	e7ef      	b.n	800c8ce <_printf_i+0x14a>
 800c8ee:	4665      	mov	r5, ip
 800c8f0:	fbb3 f1f2 	udiv	r1, r3, r2
 800c8f4:	fb02 3311 	mls	r3, r2, r1, r3
 800c8f8:	5cc3      	ldrb	r3, [r0, r3]
 800c8fa:	f805 3d01 	strb.w	r3, [r5, #-1]!
 800c8fe:	460b      	mov	r3, r1
 800c900:	2900      	cmp	r1, #0
 800c902:	d1f5      	bne.n	800c8f0 <_printf_i+0x16c>
 800c904:	e7b9      	b.n	800c87a <_printf_i+0xf6>
 800c906:	6813      	ldr	r3, [r2, #0]
 800c908:	6825      	ldr	r5, [r4, #0]
 800c90a:	6961      	ldr	r1, [r4, #20]
 800c90c:	1d18      	adds	r0, r3, #4
 800c90e:	6010      	str	r0, [r2, #0]
 800c910:	0628      	lsls	r0, r5, #24
 800c912:	681b      	ldr	r3, [r3, #0]
 800c914:	d501      	bpl.n	800c91a <_printf_i+0x196>
 800c916:	6019      	str	r1, [r3, #0]
 800c918:	e002      	b.n	800c920 <_printf_i+0x19c>
 800c91a:	066a      	lsls	r2, r5, #25
 800c91c:	d5fb      	bpl.n	800c916 <_printf_i+0x192>
 800c91e:	8019      	strh	r1, [r3, #0]
 800c920:	2300      	movs	r3, #0
 800c922:	6123      	str	r3, [r4, #16]
 800c924:	4665      	mov	r5, ip
 800c926:	e7b9      	b.n	800c89c <_printf_i+0x118>
 800c928:	6813      	ldr	r3, [r2, #0]
 800c92a:	1d19      	adds	r1, r3, #4
 800c92c:	6011      	str	r1, [r2, #0]
 800c92e:	681d      	ldr	r5, [r3, #0]
 800c930:	6862      	ldr	r2, [r4, #4]
 800c932:	2100      	movs	r1, #0
 800c934:	4628      	mov	r0, r5
 800c936:	f7f3 fc7b 	bl	8000230 <memchr>
 800c93a:	b108      	cbz	r0, 800c940 <_printf_i+0x1bc>
 800c93c:	1b40      	subs	r0, r0, r5
 800c93e:	6060      	str	r0, [r4, #4]
 800c940:	6863      	ldr	r3, [r4, #4]
 800c942:	6123      	str	r3, [r4, #16]
 800c944:	2300      	movs	r3, #0
 800c946:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800c94a:	e7a7      	b.n	800c89c <_printf_i+0x118>
 800c94c:	6923      	ldr	r3, [r4, #16]
 800c94e:	462a      	mov	r2, r5
 800c950:	4639      	mov	r1, r7
 800c952:	4630      	mov	r0, r6
 800c954:	47c0      	blx	r8
 800c956:	3001      	adds	r0, #1
 800c958:	d0aa      	beq.n	800c8b0 <_printf_i+0x12c>
 800c95a:	6823      	ldr	r3, [r4, #0]
 800c95c:	079b      	lsls	r3, r3, #30
 800c95e:	d413      	bmi.n	800c988 <_printf_i+0x204>
 800c960:	68e0      	ldr	r0, [r4, #12]
 800c962:	9b03      	ldr	r3, [sp, #12]
 800c964:	4298      	cmp	r0, r3
 800c966:	bfb8      	it	lt
 800c968:	4618      	movlt	r0, r3
 800c96a:	e7a3      	b.n	800c8b4 <_printf_i+0x130>
 800c96c:	2301      	movs	r3, #1
 800c96e:	464a      	mov	r2, r9
 800c970:	4639      	mov	r1, r7
 800c972:	4630      	mov	r0, r6
 800c974:	47c0      	blx	r8
 800c976:	3001      	adds	r0, #1
 800c978:	d09a      	beq.n	800c8b0 <_printf_i+0x12c>
 800c97a:	3501      	adds	r5, #1
 800c97c:	68e3      	ldr	r3, [r4, #12]
 800c97e:	9a03      	ldr	r2, [sp, #12]
 800c980:	1a9b      	subs	r3, r3, r2
 800c982:	42ab      	cmp	r3, r5
 800c984:	dcf2      	bgt.n	800c96c <_printf_i+0x1e8>
 800c986:	e7eb      	b.n	800c960 <_printf_i+0x1dc>
 800c988:	2500      	movs	r5, #0
 800c98a:	f104 0919 	add.w	r9, r4, #25
 800c98e:	e7f5      	b.n	800c97c <_printf_i+0x1f8>
 800c990:	2b00      	cmp	r3, #0
 800c992:	d1ac      	bne.n	800c8ee <_printf_i+0x16a>
 800c994:	7803      	ldrb	r3, [r0, #0]
 800c996:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800c99a:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800c99e:	e76c      	b.n	800c87a <_printf_i+0xf6>
 800c9a0:	0800f1f6 	.word	0x0800f1f6
 800c9a4:	0800f207 	.word	0x0800f207

0800c9a8 <_puts_r>:
 800c9a8:	b570      	push	{r4, r5, r6, lr}
 800c9aa:	460e      	mov	r6, r1
 800c9ac:	4605      	mov	r5, r0
 800c9ae:	b118      	cbz	r0, 800c9b8 <_puts_r+0x10>
 800c9b0:	6983      	ldr	r3, [r0, #24]
 800c9b2:	b90b      	cbnz	r3, 800c9b8 <_puts_r+0x10>
 800c9b4:	f001 f894 	bl	800dae0 <__sinit>
 800c9b8:	69ab      	ldr	r3, [r5, #24]
 800c9ba:	68ac      	ldr	r4, [r5, #8]
 800c9bc:	b913      	cbnz	r3, 800c9c4 <_puts_r+0x1c>
 800c9be:	4628      	mov	r0, r5
 800c9c0:	f001 f88e 	bl	800dae0 <__sinit>
 800c9c4:	4b23      	ldr	r3, [pc, #140]	; (800ca54 <_puts_r+0xac>)
 800c9c6:	429c      	cmp	r4, r3
 800c9c8:	d117      	bne.n	800c9fa <_puts_r+0x52>
 800c9ca:	686c      	ldr	r4, [r5, #4]
 800c9cc:	89a3      	ldrh	r3, [r4, #12]
 800c9ce:	071b      	lsls	r3, r3, #28
 800c9d0:	d51d      	bpl.n	800ca0e <_puts_r+0x66>
 800c9d2:	6923      	ldr	r3, [r4, #16]
 800c9d4:	b1db      	cbz	r3, 800ca0e <_puts_r+0x66>
 800c9d6:	3e01      	subs	r6, #1
 800c9d8:	68a3      	ldr	r3, [r4, #8]
 800c9da:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 800c9de:	3b01      	subs	r3, #1
 800c9e0:	60a3      	str	r3, [r4, #8]
 800c9e2:	b9e9      	cbnz	r1, 800ca20 <_puts_r+0x78>
 800c9e4:	2b00      	cmp	r3, #0
 800c9e6:	da2e      	bge.n	800ca46 <_puts_r+0x9e>
 800c9e8:	4622      	mov	r2, r4
 800c9ea:	210a      	movs	r1, #10
 800c9ec:	4628      	mov	r0, r5
 800c9ee:	f000 f883 	bl	800caf8 <__swbuf_r>
 800c9f2:	3001      	adds	r0, #1
 800c9f4:	d011      	beq.n	800ca1a <_puts_r+0x72>
 800c9f6:	200a      	movs	r0, #10
 800c9f8:	e011      	b.n	800ca1e <_puts_r+0x76>
 800c9fa:	4b17      	ldr	r3, [pc, #92]	; (800ca58 <_puts_r+0xb0>)
 800c9fc:	429c      	cmp	r4, r3
 800c9fe:	d101      	bne.n	800ca04 <_puts_r+0x5c>
 800ca00:	68ac      	ldr	r4, [r5, #8]
 800ca02:	e7e3      	b.n	800c9cc <_puts_r+0x24>
 800ca04:	4b15      	ldr	r3, [pc, #84]	; (800ca5c <_puts_r+0xb4>)
 800ca06:	429c      	cmp	r4, r3
 800ca08:	bf08      	it	eq
 800ca0a:	68ec      	ldreq	r4, [r5, #12]
 800ca0c:	e7de      	b.n	800c9cc <_puts_r+0x24>
 800ca0e:	4621      	mov	r1, r4
 800ca10:	4628      	mov	r0, r5
 800ca12:	f000 f8c3 	bl	800cb9c <__swsetup_r>
 800ca16:	2800      	cmp	r0, #0
 800ca18:	d0dd      	beq.n	800c9d6 <_puts_r+0x2e>
 800ca1a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800ca1e:	bd70      	pop	{r4, r5, r6, pc}
 800ca20:	2b00      	cmp	r3, #0
 800ca22:	da04      	bge.n	800ca2e <_puts_r+0x86>
 800ca24:	69a2      	ldr	r2, [r4, #24]
 800ca26:	429a      	cmp	r2, r3
 800ca28:	dc06      	bgt.n	800ca38 <_puts_r+0x90>
 800ca2a:	290a      	cmp	r1, #10
 800ca2c:	d004      	beq.n	800ca38 <_puts_r+0x90>
 800ca2e:	6823      	ldr	r3, [r4, #0]
 800ca30:	1c5a      	adds	r2, r3, #1
 800ca32:	6022      	str	r2, [r4, #0]
 800ca34:	7019      	strb	r1, [r3, #0]
 800ca36:	e7cf      	b.n	800c9d8 <_puts_r+0x30>
 800ca38:	4622      	mov	r2, r4
 800ca3a:	4628      	mov	r0, r5
 800ca3c:	f000 f85c 	bl	800caf8 <__swbuf_r>
 800ca40:	3001      	adds	r0, #1
 800ca42:	d1c9      	bne.n	800c9d8 <_puts_r+0x30>
 800ca44:	e7e9      	b.n	800ca1a <_puts_r+0x72>
 800ca46:	6823      	ldr	r3, [r4, #0]
 800ca48:	200a      	movs	r0, #10
 800ca4a:	1c5a      	adds	r2, r3, #1
 800ca4c:	6022      	str	r2, [r4, #0]
 800ca4e:	7018      	strb	r0, [r3, #0]
 800ca50:	e7e5      	b.n	800ca1e <_puts_r+0x76>
 800ca52:	bf00      	nop
 800ca54:	0800f248 	.word	0x0800f248
 800ca58:	0800f268 	.word	0x0800f268
 800ca5c:	0800f228 	.word	0x0800f228

0800ca60 <puts>:
 800ca60:	4b02      	ldr	r3, [pc, #8]	; (800ca6c <puts+0xc>)
 800ca62:	4601      	mov	r1, r0
 800ca64:	6818      	ldr	r0, [r3, #0]
 800ca66:	f7ff bf9f 	b.w	800c9a8 <_puts_r>
 800ca6a:	bf00      	nop
 800ca6c:	20001434 	.word	0x20001434

0800ca70 <sniprintf>:
 800ca70:	b40c      	push	{r2, r3}
 800ca72:	b530      	push	{r4, r5, lr}
 800ca74:	4b17      	ldr	r3, [pc, #92]	; (800cad4 <sniprintf+0x64>)
 800ca76:	1e0c      	subs	r4, r1, #0
 800ca78:	b09d      	sub	sp, #116	; 0x74
 800ca7a:	681d      	ldr	r5, [r3, #0]
 800ca7c:	da08      	bge.n	800ca90 <sniprintf+0x20>
 800ca7e:	238b      	movs	r3, #139	; 0x8b
 800ca80:	602b      	str	r3, [r5, #0]
 800ca82:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800ca86:	b01d      	add	sp, #116	; 0x74
 800ca88:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800ca8c:	b002      	add	sp, #8
 800ca8e:	4770      	bx	lr
 800ca90:	f44f 7302 	mov.w	r3, #520	; 0x208
 800ca94:	f8ad 3014 	strh.w	r3, [sp, #20]
 800ca98:	bf14      	ite	ne
 800ca9a:	f104 33ff 	addne.w	r3, r4, #4294967295	; 0xffffffff
 800ca9e:	4623      	moveq	r3, r4
 800caa0:	9304      	str	r3, [sp, #16]
 800caa2:	9307      	str	r3, [sp, #28]
 800caa4:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800caa8:	9002      	str	r0, [sp, #8]
 800caaa:	9006      	str	r0, [sp, #24]
 800caac:	f8ad 3016 	strh.w	r3, [sp, #22]
 800cab0:	9a20      	ldr	r2, [sp, #128]	; 0x80
 800cab2:	ab21      	add	r3, sp, #132	; 0x84
 800cab4:	a902      	add	r1, sp, #8
 800cab6:	4628      	mov	r0, r5
 800cab8:	9301      	str	r3, [sp, #4]
 800caba:	f001 fd0b 	bl	800e4d4 <_svfiprintf_r>
 800cabe:	1c43      	adds	r3, r0, #1
 800cac0:	bfbc      	itt	lt
 800cac2:	238b      	movlt	r3, #139	; 0x8b
 800cac4:	602b      	strlt	r3, [r5, #0]
 800cac6:	2c00      	cmp	r4, #0
 800cac8:	d0dd      	beq.n	800ca86 <sniprintf+0x16>
 800caca:	9b02      	ldr	r3, [sp, #8]
 800cacc:	2200      	movs	r2, #0
 800cace:	701a      	strb	r2, [r3, #0]
 800cad0:	e7d9      	b.n	800ca86 <sniprintf+0x16>
 800cad2:	bf00      	nop
 800cad4:	20001434 	.word	0x20001434

0800cad8 <strcat>:
 800cad8:	b510      	push	{r4, lr}
 800cada:	4603      	mov	r3, r0
 800cadc:	781a      	ldrb	r2, [r3, #0]
 800cade:	1c5c      	adds	r4, r3, #1
 800cae0:	b93a      	cbnz	r2, 800caf2 <strcat+0x1a>
 800cae2:	3b01      	subs	r3, #1
 800cae4:	f811 2b01 	ldrb.w	r2, [r1], #1
 800cae8:	f803 2f01 	strb.w	r2, [r3, #1]!
 800caec:	2a00      	cmp	r2, #0
 800caee:	d1f9      	bne.n	800cae4 <strcat+0xc>
 800caf0:	bd10      	pop	{r4, pc}
 800caf2:	4623      	mov	r3, r4
 800caf4:	e7f2      	b.n	800cadc <strcat+0x4>
	...

0800caf8 <__swbuf_r>:
 800caf8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800cafa:	460e      	mov	r6, r1
 800cafc:	4614      	mov	r4, r2
 800cafe:	4605      	mov	r5, r0
 800cb00:	b118      	cbz	r0, 800cb0a <__swbuf_r+0x12>
 800cb02:	6983      	ldr	r3, [r0, #24]
 800cb04:	b90b      	cbnz	r3, 800cb0a <__swbuf_r+0x12>
 800cb06:	f000 ffeb 	bl	800dae0 <__sinit>
 800cb0a:	4b21      	ldr	r3, [pc, #132]	; (800cb90 <__swbuf_r+0x98>)
 800cb0c:	429c      	cmp	r4, r3
 800cb0e:	d12a      	bne.n	800cb66 <__swbuf_r+0x6e>
 800cb10:	686c      	ldr	r4, [r5, #4]
 800cb12:	69a3      	ldr	r3, [r4, #24]
 800cb14:	60a3      	str	r3, [r4, #8]
 800cb16:	89a3      	ldrh	r3, [r4, #12]
 800cb18:	071a      	lsls	r2, r3, #28
 800cb1a:	d52e      	bpl.n	800cb7a <__swbuf_r+0x82>
 800cb1c:	6923      	ldr	r3, [r4, #16]
 800cb1e:	b363      	cbz	r3, 800cb7a <__swbuf_r+0x82>
 800cb20:	6923      	ldr	r3, [r4, #16]
 800cb22:	6820      	ldr	r0, [r4, #0]
 800cb24:	1ac0      	subs	r0, r0, r3
 800cb26:	6963      	ldr	r3, [r4, #20]
 800cb28:	b2f6      	uxtb	r6, r6
 800cb2a:	4283      	cmp	r3, r0
 800cb2c:	4637      	mov	r7, r6
 800cb2e:	dc04      	bgt.n	800cb3a <__swbuf_r+0x42>
 800cb30:	4621      	mov	r1, r4
 800cb32:	4628      	mov	r0, r5
 800cb34:	f000 ff6a 	bl	800da0c <_fflush_r>
 800cb38:	bb28      	cbnz	r0, 800cb86 <__swbuf_r+0x8e>
 800cb3a:	68a3      	ldr	r3, [r4, #8]
 800cb3c:	3b01      	subs	r3, #1
 800cb3e:	60a3      	str	r3, [r4, #8]
 800cb40:	6823      	ldr	r3, [r4, #0]
 800cb42:	1c5a      	adds	r2, r3, #1
 800cb44:	6022      	str	r2, [r4, #0]
 800cb46:	701e      	strb	r6, [r3, #0]
 800cb48:	6963      	ldr	r3, [r4, #20]
 800cb4a:	3001      	adds	r0, #1
 800cb4c:	4283      	cmp	r3, r0
 800cb4e:	d004      	beq.n	800cb5a <__swbuf_r+0x62>
 800cb50:	89a3      	ldrh	r3, [r4, #12]
 800cb52:	07db      	lsls	r3, r3, #31
 800cb54:	d519      	bpl.n	800cb8a <__swbuf_r+0x92>
 800cb56:	2e0a      	cmp	r6, #10
 800cb58:	d117      	bne.n	800cb8a <__swbuf_r+0x92>
 800cb5a:	4621      	mov	r1, r4
 800cb5c:	4628      	mov	r0, r5
 800cb5e:	f000 ff55 	bl	800da0c <_fflush_r>
 800cb62:	b190      	cbz	r0, 800cb8a <__swbuf_r+0x92>
 800cb64:	e00f      	b.n	800cb86 <__swbuf_r+0x8e>
 800cb66:	4b0b      	ldr	r3, [pc, #44]	; (800cb94 <__swbuf_r+0x9c>)
 800cb68:	429c      	cmp	r4, r3
 800cb6a:	d101      	bne.n	800cb70 <__swbuf_r+0x78>
 800cb6c:	68ac      	ldr	r4, [r5, #8]
 800cb6e:	e7d0      	b.n	800cb12 <__swbuf_r+0x1a>
 800cb70:	4b09      	ldr	r3, [pc, #36]	; (800cb98 <__swbuf_r+0xa0>)
 800cb72:	429c      	cmp	r4, r3
 800cb74:	bf08      	it	eq
 800cb76:	68ec      	ldreq	r4, [r5, #12]
 800cb78:	e7cb      	b.n	800cb12 <__swbuf_r+0x1a>
 800cb7a:	4621      	mov	r1, r4
 800cb7c:	4628      	mov	r0, r5
 800cb7e:	f000 f80d 	bl	800cb9c <__swsetup_r>
 800cb82:	2800      	cmp	r0, #0
 800cb84:	d0cc      	beq.n	800cb20 <__swbuf_r+0x28>
 800cb86:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 800cb8a:	4638      	mov	r0, r7
 800cb8c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800cb8e:	bf00      	nop
 800cb90:	0800f248 	.word	0x0800f248
 800cb94:	0800f268 	.word	0x0800f268
 800cb98:	0800f228 	.word	0x0800f228

0800cb9c <__swsetup_r>:
 800cb9c:	4b32      	ldr	r3, [pc, #200]	; (800cc68 <__swsetup_r+0xcc>)
 800cb9e:	b570      	push	{r4, r5, r6, lr}
 800cba0:	681d      	ldr	r5, [r3, #0]
 800cba2:	4606      	mov	r6, r0
 800cba4:	460c      	mov	r4, r1
 800cba6:	b125      	cbz	r5, 800cbb2 <__swsetup_r+0x16>
 800cba8:	69ab      	ldr	r3, [r5, #24]
 800cbaa:	b913      	cbnz	r3, 800cbb2 <__swsetup_r+0x16>
 800cbac:	4628      	mov	r0, r5
 800cbae:	f000 ff97 	bl	800dae0 <__sinit>
 800cbb2:	4b2e      	ldr	r3, [pc, #184]	; (800cc6c <__swsetup_r+0xd0>)
 800cbb4:	429c      	cmp	r4, r3
 800cbb6:	d10f      	bne.n	800cbd8 <__swsetup_r+0x3c>
 800cbb8:	686c      	ldr	r4, [r5, #4]
 800cbba:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800cbbe:	b29a      	uxth	r2, r3
 800cbc0:	0715      	lsls	r5, r2, #28
 800cbc2:	d42c      	bmi.n	800cc1e <__swsetup_r+0x82>
 800cbc4:	06d0      	lsls	r0, r2, #27
 800cbc6:	d411      	bmi.n	800cbec <__swsetup_r+0x50>
 800cbc8:	2209      	movs	r2, #9
 800cbca:	6032      	str	r2, [r6, #0]
 800cbcc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800cbd0:	81a3      	strh	r3, [r4, #12]
 800cbd2:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800cbd6:	e03e      	b.n	800cc56 <__swsetup_r+0xba>
 800cbd8:	4b25      	ldr	r3, [pc, #148]	; (800cc70 <__swsetup_r+0xd4>)
 800cbda:	429c      	cmp	r4, r3
 800cbdc:	d101      	bne.n	800cbe2 <__swsetup_r+0x46>
 800cbde:	68ac      	ldr	r4, [r5, #8]
 800cbe0:	e7eb      	b.n	800cbba <__swsetup_r+0x1e>
 800cbe2:	4b24      	ldr	r3, [pc, #144]	; (800cc74 <__swsetup_r+0xd8>)
 800cbe4:	429c      	cmp	r4, r3
 800cbe6:	bf08      	it	eq
 800cbe8:	68ec      	ldreq	r4, [r5, #12]
 800cbea:	e7e6      	b.n	800cbba <__swsetup_r+0x1e>
 800cbec:	0751      	lsls	r1, r2, #29
 800cbee:	d512      	bpl.n	800cc16 <__swsetup_r+0x7a>
 800cbf0:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800cbf2:	b141      	cbz	r1, 800cc06 <__swsetup_r+0x6a>
 800cbf4:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800cbf8:	4299      	cmp	r1, r3
 800cbfa:	d002      	beq.n	800cc02 <__swsetup_r+0x66>
 800cbfc:	4630      	mov	r0, r6
 800cbfe:	f001 fb67 	bl	800e2d0 <_free_r>
 800cc02:	2300      	movs	r3, #0
 800cc04:	6363      	str	r3, [r4, #52]	; 0x34
 800cc06:	89a3      	ldrh	r3, [r4, #12]
 800cc08:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800cc0c:	81a3      	strh	r3, [r4, #12]
 800cc0e:	2300      	movs	r3, #0
 800cc10:	6063      	str	r3, [r4, #4]
 800cc12:	6923      	ldr	r3, [r4, #16]
 800cc14:	6023      	str	r3, [r4, #0]
 800cc16:	89a3      	ldrh	r3, [r4, #12]
 800cc18:	f043 0308 	orr.w	r3, r3, #8
 800cc1c:	81a3      	strh	r3, [r4, #12]
 800cc1e:	6923      	ldr	r3, [r4, #16]
 800cc20:	b94b      	cbnz	r3, 800cc36 <__swsetup_r+0x9a>
 800cc22:	89a3      	ldrh	r3, [r4, #12]
 800cc24:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800cc28:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800cc2c:	d003      	beq.n	800cc36 <__swsetup_r+0x9a>
 800cc2e:	4621      	mov	r1, r4
 800cc30:	4630      	mov	r0, r6
 800cc32:	f001 f811 	bl	800dc58 <__smakebuf_r>
 800cc36:	89a2      	ldrh	r2, [r4, #12]
 800cc38:	f012 0301 	ands.w	r3, r2, #1
 800cc3c:	d00c      	beq.n	800cc58 <__swsetup_r+0xbc>
 800cc3e:	2300      	movs	r3, #0
 800cc40:	60a3      	str	r3, [r4, #8]
 800cc42:	6963      	ldr	r3, [r4, #20]
 800cc44:	425b      	negs	r3, r3
 800cc46:	61a3      	str	r3, [r4, #24]
 800cc48:	6923      	ldr	r3, [r4, #16]
 800cc4a:	b953      	cbnz	r3, 800cc62 <__swsetup_r+0xc6>
 800cc4c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800cc50:	f013 0080 	ands.w	r0, r3, #128	; 0x80
 800cc54:	d1ba      	bne.n	800cbcc <__swsetup_r+0x30>
 800cc56:	bd70      	pop	{r4, r5, r6, pc}
 800cc58:	0792      	lsls	r2, r2, #30
 800cc5a:	bf58      	it	pl
 800cc5c:	6963      	ldrpl	r3, [r4, #20]
 800cc5e:	60a3      	str	r3, [r4, #8]
 800cc60:	e7f2      	b.n	800cc48 <__swsetup_r+0xac>
 800cc62:	2000      	movs	r0, #0
 800cc64:	e7f7      	b.n	800cc56 <__swsetup_r+0xba>
 800cc66:	bf00      	nop
 800cc68:	20001434 	.word	0x20001434
 800cc6c:	0800f248 	.word	0x0800f248
 800cc70:	0800f268 	.word	0x0800f268
 800cc74:	0800f228 	.word	0x0800f228

0800cc78 <quorem>:
 800cc78:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800cc7c:	6903      	ldr	r3, [r0, #16]
 800cc7e:	690c      	ldr	r4, [r1, #16]
 800cc80:	42a3      	cmp	r3, r4
 800cc82:	4680      	mov	r8, r0
 800cc84:	f2c0 8082 	blt.w	800cd8c <quorem+0x114>
 800cc88:	3c01      	subs	r4, #1
 800cc8a:	f101 0714 	add.w	r7, r1, #20
 800cc8e:	ea4f 0c84 	mov.w	ip, r4, lsl #2
 800cc92:	f100 0614 	add.w	r6, r0, #20
 800cc96:	f857 5024 	ldr.w	r5, [r7, r4, lsl #2]
 800cc9a:	f856 0024 	ldr.w	r0, [r6, r4, lsl #2]
 800cc9e:	eb06 030c 	add.w	r3, r6, ip
 800cca2:	3501      	adds	r5, #1
 800cca4:	eb07 090c 	add.w	r9, r7, ip
 800cca8:	9301      	str	r3, [sp, #4]
 800ccaa:	fbb0 f5f5 	udiv	r5, r0, r5
 800ccae:	b395      	cbz	r5, 800cd16 <quorem+0x9e>
 800ccb0:	f04f 0a00 	mov.w	sl, #0
 800ccb4:	4638      	mov	r0, r7
 800ccb6:	46b6      	mov	lr, r6
 800ccb8:	46d3      	mov	fp, sl
 800ccba:	f850 2b04 	ldr.w	r2, [r0], #4
 800ccbe:	b293      	uxth	r3, r2
 800ccc0:	fb05 a303 	mla	r3, r5, r3, sl
 800ccc4:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800ccc8:	b29b      	uxth	r3, r3
 800ccca:	ebab 0303 	sub.w	r3, fp, r3
 800ccce:	0c12      	lsrs	r2, r2, #16
 800ccd0:	f8de b000 	ldr.w	fp, [lr]
 800ccd4:	fb05 a202 	mla	r2, r5, r2, sl
 800ccd8:	fa13 f38b 	uxtah	r3, r3, fp
 800ccdc:	ea4f 4a12 	mov.w	sl, r2, lsr #16
 800cce0:	fa1f fb82 	uxth.w	fp, r2
 800cce4:	f8de 2000 	ldr.w	r2, [lr]
 800cce8:	ebcb 4212 	rsb	r2, fp, r2, lsr #16
 800ccec:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800ccf0:	b29b      	uxth	r3, r3
 800ccf2:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800ccf6:	4581      	cmp	r9, r0
 800ccf8:	ea4f 4b22 	mov.w	fp, r2, asr #16
 800ccfc:	f84e 3b04 	str.w	r3, [lr], #4
 800cd00:	d2db      	bcs.n	800ccba <quorem+0x42>
 800cd02:	f856 300c 	ldr.w	r3, [r6, ip]
 800cd06:	b933      	cbnz	r3, 800cd16 <quorem+0x9e>
 800cd08:	9b01      	ldr	r3, [sp, #4]
 800cd0a:	3b04      	subs	r3, #4
 800cd0c:	429e      	cmp	r6, r3
 800cd0e:	461a      	mov	r2, r3
 800cd10:	d330      	bcc.n	800cd74 <quorem+0xfc>
 800cd12:	f8c8 4010 	str.w	r4, [r8, #16]
 800cd16:	4640      	mov	r0, r8
 800cd18:	f001 fa06 	bl	800e128 <__mcmp>
 800cd1c:	2800      	cmp	r0, #0
 800cd1e:	db25      	blt.n	800cd6c <quorem+0xf4>
 800cd20:	3501      	adds	r5, #1
 800cd22:	4630      	mov	r0, r6
 800cd24:	f04f 0c00 	mov.w	ip, #0
 800cd28:	f857 2b04 	ldr.w	r2, [r7], #4
 800cd2c:	f8d0 e000 	ldr.w	lr, [r0]
 800cd30:	b293      	uxth	r3, r2
 800cd32:	ebac 0303 	sub.w	r3, ip, r3
 800cd36:	0c12      	lsrs	r2, r2, #16
 800cd38:	fa13 f38e 	uxtah	r3, r3, lr
 800cd3c:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 800cd40:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800cd44:	b29b      	uxth	r3, r3
 800cd46:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800cd4a:	45b9      	cmp	r9, r7
 800cd4c:	ea4f 4c22 	mov.w	ip, r2, asr #16
 800cd50:	f840 3b04 	str.w	r3, [r0], #4
 800cd54:	d2e8      	bcs.n	800cd28 <quorem+0xb0>
 800cd56:	f856 2024 	ldr.w	r2, [r6, r4, lsl #2]
 800cd5a:	eb06 0384 	add.w	r3, r6, r4, lsl #2
 800cd5e:	b92a      	cbnz	r2, 800cd6c <quorem+0xf4>
 800cd60:	3b04      	subs	r3, #4
 800cd62:	429e      	cmp	r6, r3
 800cd64:	461a      	mov	r2, r3
 800cd66:	d30b      	bcc.n	800cd80 <quorem+0x108>
 800cd68:	f8c8 4010 	str.w	r4, [r8, #16]
 800cd6c:	4628      	mov	r0, r5
 800cd6e:	b003      	add	sp, #12
 800cd70:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800cd74:	6812      	ldr	r2, [r2, #0]
 800cd76:	3b04      	subs	r3, #4
 800cd78:	2a00      	cmp	r2, #0
 800cd7a:	d1ca      	bne.n	800cd12 <quorem+0x9a>
 800cd7c:	3c01      	subs	r4, #1
 800cd7e:	e7c5      	b.n	800cd0c <quorem+0x94>
 800cd80:	6812      	ldr	r2, [r2, #0]
 800cd82:	3b04      	subs	r3, #4
 800cd84:	2a00      	cmp	r2, #0
 800cd86:	d1ef      	bne.n	800cd68 <quorem+0xf0>
 800cd88:	3c01      	subs	r4, #1
 800cd8a:	e7ea      	b.n	800cd62 <quorem+0xea>
 800cd8c:	2000      	movs	r0, #0
 800cd8e:	e7ee      	b.n	800cd6e <quorem+0xf6>

0800cd90 <_dtoa_r>:
 800cd90:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800cd94:	ec57 6b10 	vmov	r6, r7, d0
 800cd98:	b097      	sub	sp, #92	; 0x5c
 800cd9a:	6a45      	ldr	r5, [r0, #36]	; 0x24
 800cd9c:	9106      	str	r1, [sp, #24]
 800cd9e:	4604      	mov	r4, r0
 800cda0:	920b      	str	r2, [sp, #44]	; 0x2c
 800cda2:	9312      	str	r3, [sp, #72]	; 0x48
 800cda4:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 800cda8:	e9cd 6700 	strd	r6, r7, [sp]
 800cdac:	b93d      	cbnz	r5, 800cdbe <_dtoa_r+0x2e>
 800cdae:	2010      	movs	r0, #16
 800cdb0:	f000 ff92 	bl	800dcd8 <malloc>
 800cdb4:	6260      	str	r0, [r4, #36]	; 0x24
 800cdb6:	e9c0 5501 	strd	r5, r5, [r0, #4]
 800cdba:	6005      	str	r5, [r0, #0]
 800cdbc:	60c5      	str	r5, [r0, #12]
 800cdbe:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800cdc0:	6819      	ldr	r1, [r3, #0]
 800cdc2:	b151      	cbz	r1, 800cdda <_dtoa_r+0x4a>
 800cdc4:	685a      	ldr	r2, [r3, #4]
 800cdc6:	604a      	str	r2, [r1, #4]
 800cdc8:	2301      	movs	r3, #1
 800cdca:	4093      	lsls	r3, r2
 800cdcc:	608b      	str	r3, [r1, #8]
 800cdce:	4620      	mov	r0, r4
 800cdd0:	f000 ffc9 	bl	800dd66 <_Bfree>
 800cdd4:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800cdd6:	2200      	movs	r2, #0
 800cdd8:	601a      	str	r2, [r3, #0]
 800cdda:	1e3b      	subs	r3, r7, #0
 800cddc:	bfbb      	ittet	lt
 800cdde:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 800cde2:	9301      	strlt	r3, [sp, #4]
 800cde4:	2300      	movge	r3, #0
 800cde6:	2201      	movlt	r2, #1
 800cde8:	bfac      	ite	ge
 800cdea:	f8c8 3000 	strge.w	r3, [r8]
 800cdee:	f8c8 2000 	strlt.w	r2, [r8]
 800cdf2:	4baf      	ldr	r3, [pc, #700]	; (800d0b0 <_dtoa_r+0x320>)
 800cdf4:	f8dd 8004 	ldr.w	r8, [sp, #4]
 800cdf8:	ea33 0308 	bics.w	r3, r3, r8
 800cdfc:	d114      	bne.n	800ce28 <_dtoa_r+0x98>
 800cdfe:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800ce00:	f242 730f 	movw	r3, #9999	; 0x270f
 800ce04:	6013      	str	r3, [r2, #0]
 800ce06:	9b00      	ldr	r3, [sp, #0]
 800ce08:	b923      	cbnz	r3, 800ce14 <_dtoa_r+0x84>
 800ce0a:	f3c8 0013 	ubfx	r0, r8, #0, #20
 800ce0e:	2800      	cmp	r0, #0
 800ce10:	f000 8542 	beq.w	800d898 <_dtoa_r+0xb08>
 800ce14:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800ce16:	f8df b2ac 	ldr.w	fp, [pc, #684]	; 800d0c4 <_dtoa_r+0x334>
 800ce1a:	2b00      	cmp	r3, #0
 800ce1c:	f000 8544 	beq.w	800d8a8 <_dtoa_r+0xb18>
 800ce20:	f10b 0303 	add.w	r3, fp, #3
 800ce24:	f000 bd3e 	b.w	800d8a4 <_dtoa_r+0xb14>
 800ce28:	e9dd 6700 	ldrd	r6, r7, [sp]
 800ce2c:	2200      	movs	r2, #0
 800ce2e:	2300      	movs	r3, #0
 800ce30:	4630      	mov	r0, r6
 800ce32:	4639      	mov	r1, r7
 800ce34:	f7f3 fe70 	bl	8000b18 <__aeabi_dcmpeq>
 800ce38:	4681      	mov	r9, r0
 800ce3a:	b168      	cbz	r0, 800ce58 <_dtoa_r+0xc8>
 800ce3c:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800ce3e:	2301      	movs	r3, #1
 800ce40:	6013      	str	r3, [r2, #0]
 800ce42:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800ce44:	2b00      	cmp	r3, #0
 800ce46:	f000 8524 	beq.w	800d892 <_dtoa_r+0xb02>
 800ce4a:	4b9a      	ldr	r3, [pc, #616]	; (800d0b4 <_dtoa_r+0x324>)
 800ce4c:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800ce4e:	f103 3bff 	add.w	fp, r3, #4294967295	; 0xffffffff
 800ce52:	6013      	str	r3, [r2, #0]
 800ce54:	f000 bd28 	b.w	800d8a8 <_dtoa_r+0xb18>
 800ce58:	aa14      	add	r2, sp, #80	; 0x50
 800ce5a:	a915      	add	r1, sp, #84	; 0x54
 800ce5c:	ec47 6b10 	vmov	d0, r6, r7
 800ce60:	4620      	mov	r0, r4
 800ce62:	f001 f9d8 	bl	800e216 <__d2b>
 800ce66:	f3c8 550a 	ubfx	r5, r8, #20, #11
 800ce6a:	9004      	str	r0, [sp, #16]
 800ce6c:	2d00      	cmp	r5, #0
 800ce6e:	d07c      	beq.n	800cf6a <_dtoa_r+0x1da>
 800ce70:	f3c7 0313 	ubfx	r3, r7, #0, #20
 800ce74:	f043 5b7f 	orr.w	fp, r3, #1069547520	; 0x3fc00000
 800ce78:	46b2      	mov	sl, r6
 800ce7a:	f44b 1b40 	orr.w	fp, fp, #3145728	; 0x300000
 800ce7e:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 800ce82:	f8cd 904c 	str.w	r9, [sp, #76]	; 0x4c
 800ce86:	2200      	movs	r2, #0
 800ce88:	4b8b      	ldr	r3, [pc, #556]	; (800d0b8 <_dtoa_r+0x328>)
 800ce8a:	4650      	mov	r0, sl
 800ce8c:	4659      	mov	r1, fp
 800ce8e:	f7f3 fa23 	bl	80002d8 <__aeabi_dsub>
 800ce92:	a381      	add	r3, pc, #516	; (adr r3, 800d098 <_dtoa_r+0x308>)
 800ce94:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ce98:	f7f3 fbd6 	bl	8000648 <__aeabi_dmul>
 800ce9c:	a380      	add	r3, pc, #512	; (adr r3, 800d0a0 <_dtoa_r+0x310>)
 800ce9e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cea2:	f7f3 fa1b 	bl	80002dc <__adddf3>
 800cea6:	4606      	mov	r6, r0
 800cea8:	4628      	mov	r0, r5
 800ceaa:	460f      	mov	r7, r1
 800ceac:	f7f3 fb62 	bl	8000574 <__aeabi_i2d>
 800ceb0:	a37d      	add	r3, pc, #500	; (adr r3, 800d0a8 <_dtoa_r+0x318>)
 800ceb2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ceb6:	f7f3 fbc7 	bl	8000648 <__aeabi_dmul>
 800ceba:	4602      	mov	r2, r0
 800cebc:	460b      	mov	r3, r1
 800cebe:	4630      	mov	r0, r6
 800cec0:	4639      	mov	r1, r7
 800cec2:	f7f3 fa0b 	bl	80002dc <__adddf3>
 800cec6:	4606      	mov	r6, r0
 800cec8:	460f      	mov	r7, r1
 800ceca:	f7f3 fe6d 	bl	8000ba8 <__aeabi_d2iz>
 800cece:	2200      	movs	r2, #0
 800ced0:	4682      	mov	sl, r0
 800ced2:	2300      	movs	r3, #0
 800ced4:	4630      	mov	r0, r6
 800ced6:	4639      	mov	r1, r7
 800ced8:	f7f3 fe28 	bl	8000b2c <__aeabi_dcmplt>
 800cedc:	b148      	cbz	r0, 800cef2 <_dtoa_r+0x162>
 800cede:	4650      	mov	r0, sl
 800cee0:	f7f3 fb48 	bl	8000574 <__aeabi_i2d>
 800cee4:	4632      	mov	r2, r6
 800cee6:	463b      	mov	r3, r7
 800cee8:	f7f3 fe16 	bl	8000b18 <__aeabi_dcmpeq>
 800ceec:	b908      	cbnz	r0, 800cef2 <_dtoa_r+0x162>
 800ceee:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
 800cef2:	f1ba 0f16 	cmp.w	sl, #22
 800cef6:	d859      	bhi.n	800cfac <_dtoa_r+0x21c>
 800cef8:	4970      	ldr	r1, [pc, #448]	; (800d0bc <_dtoa_r+0x32c>)
 800cefa:	eb01 01ca 	add.w	r1, r1, sl, lsl #3
 800cefe:	e9dd 2300 	ldrd	r2, r3, [sp]
 800cf02:	e9d1 0100 	ldrd	r0, r1, [r1]
 800cf06:	f7f3 fe2f 	bl	8000b68 <__aeabi_dcmpgt>
 800cf0a:	2800      	cmp	r0, #0
 800cf0c:	d050      	beq.n	800cfb0 <_dtoa_r+0x220>
 800cf0e:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
 800cf12:	2300      	movs	r3, #0
 800cf14:	930f      	str	r3, [sp, #60]	; 0x3c
 800cf16:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800cf18:	1b5d      	subs	r5, r3, r5
 800cf1a:	f1b5 0801 	subs.w	r8, r5, #1
 800cf1e:	bf49      	itett	mi
 800cf20:	f1c5 0301 	rsbmi	r3, r5, #1
 800cf24:	2300      	movpl	r3, #0
 800cf26:	9305      	strmi	r3, [sp, #20]
 800cf28:	f04f 0800 	movmi.w	r8, #0
 800cf2c:	bf58      	it	pl
 800cf2e:	9305      	strpl	r3, [sp, #20]
 800cf30:	f1ba 0f00 	cmp.w	sl, #0
 800cf34:	db3e      	blt.n	800cfb4 <_dtoa_r+0x224>
 800cf36:	2300      	movs	r3, #0
 800cf38:	44d0      	add	r8, sl
 800cf3a:	f8cd a038 	str.w	sl, [sp, #56]	; 0x38
 800cf3e:	9307      	str	r3, [sp, #28]
 800cf40:	9b06      	ldr	r3, [sp, #24]
 800cf42:	2b09      	cmp	r3, #9
 800cf44:	f200 8090 	bhi.w	800d068 <_dtoa_r+0x2d8>
 800cf48:	2b05      	cmp	r3, #5
 800cf4a:	bfc4      	itt	gt
 800cf4c:	3b04      	subgt	r3, #4
 800cf4e:	9306      	strgt	r3, [sp, #24]
 800cf50:	9b06      	ldr	r3, [sp, #24]
 800cf52:	f1a3 0302 	sub.w	r3, r3, #2
 800cf56:	bfcc      	ite	gt
 800cf58:	2500      	movgt	r5, #0
 800cf5a:	2501      	movle	r5, #1
 800cf5c:	2b03      	cmp	r3, #3
 800cf5e:	f200 808f 	bhi.w	800d080 <_dtoa_r+0x2f0>
 800cf62:	e8df f003 	tbb	[pc, r3]
 800cf66:	7f7d      	.short	0x7f7d
 800cf68:	7131      	.short	0x7131
 800cf6a:	e9dd 5314 	ldrd	r5, r3, [sp, #80]	; 0x50
 800cf6e:	441d      	add	r5, r3
 800cf70:	f205 4032 	addw	r0, r5, #1074	; 0x432
 800cf74:	2820      	cmp	r0, #32
 800cf76:	dd13      	ble.n	800cfa0 <_dtoa_r+0x210>
 800cf78:	f1c0 0040 	rsb	r0, r0, #64	; 0x40
 800cf7c:	9b00      	ldr	r3, [sp, #0]
 800cf7e:	fa08 f800 	lsl.w	r8, r8, r0
 800cf82:	f205 4012 	addw	r0, r5, #1042	; 0x412
 800cf86:	fa23 f000 	lsr.w	r0, r3, r0
 800cf8a:	ea48 0000 	orr.w	r0, r8, r0
 800cf8e:	f7f3 fae1 	bl	8000554 <__aeabi_ui2d>
 800cf92:	2301      	movs	r3, #1
 800cf94:	4682      	mov	sl, r0
 800cf96:	f1a1 7bf8 	sub.w	fp, r1, #32505856	; 0x1f00000
 800cf9a:	3d01      	subs	r5, #1
 800cf9c:	9313      	str	r3, [sp, #76]	; 0x4c
 800cf9e:	e772      	b.n	800ce86 <_dtoa_r+0xf6>
 800cfa0:	9b00      	ldr	r3, [sp, #0]
 800cfa2:	f1c0 0020 	rsb	r0, r0, #32
 800cfa6:	fa03 f000 	lsl.w	r0, r3, r0
 800cfaa:	e7f0      	b.n	800cf8e <_dtoa_r+0x1fe>
 800cfac:	2301      	movs	r3, #1
 800cfae:	e7b1      	b.n	800cf14 <_dtoa_r+0x184>
 800cfb0:	900f      	str	r0, [sp, #60]	; 0x3c
 800cfb2:	e7b0      	b.n	800cf16 <_dtoa_r+0x186>
 800cfb4:	9b05      	ldr	r3, [sp, #20]
 800cfb6:	eba3 030a 	sub.w	r3, r3, sl
 800cfba:	9305      	str	r3, [sp, #20]
 800cfbc:	f1ca 0300 	rsb	r3, sl, #0
 800cfc0:	9307      	str	r3, [sp, #28]
 800cfc2:	2300      	movs	r3, #0
 800cfc4:	930e      	str	r3, [sp, #56]	; 0x38
 800cfc6:	e7bb      	b.n	800cf40 <_dtoa_r+0x1b0>
 800cfc8:	2301      	movs	r3, #1
 800cfca:	930a      	str	r3, [sp, #40]	; 0x28
 800cfcc:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800cfce:	2b00      	cmp	r3, #0
 800cfd0:	dd59      	ble.n	800d086 <_dtoa_r+0x2f6>
 800cfd2:	9302      	str	r3, [sp, #8]
 800cfd4:	4699      	mov	r9, r3
 800cfd6:	6a66      	ldr	r6, [r4, #36]	; 0x24
 800cfd8:	2200      	movs	r2, #0
 800cfda:	6072      	str	r2, [r6, #4]
 800cfdc:	2204      	movs	r2, #4
 800cfde:	f102 0014 	add.w	r0, r2, #20
 800cfe2:	4298      	cmp	r0, r3
 800cfe4:	6871      	ldr	r1, [r6, #4]
 800cfe6:	d953      	bls.n	800d090 <_dtoa_r+0x300>
 800cfe8:	4620      	mov	r0, r4
 800cfea:	f000 fe88 	bl	800dcfe <_Balloc>
 800cfee:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800cff0:	6030      	str	r0, [r6, #0]
 800cff2:	f1b9 0f0e 	cmp.w	r9, #14
 800cff6:	f8d3 b000 	ldr.w	fp, [r3]
 800cffa:	f200 80e6 	bhi.w	800d1ca <_dtoa_r+0x43a>
 800cffe:	2d00      	cmp	r5, #0
 800d000:	f000 80e3 	beq.w	800d1ca <_dtoa_r+0x43a>
 800d004:	ed9d 7b00 	vldr	d7, [sp]
 800d008:	f1ba 0f00 	cmp.w	sl, #0
 800d00c:	ed8d 7b10 	vstr	d7, [sp, #64]	; 0x40
 800d010:	dd74      	ble.n	800d0fc <_dtoa_r+0x36c>
 800d012:	4a2a      	ldr	r2, [pc, #168]	; (800d0bc <_dtoa_r+0x32c>)
 800d014:	f00a 030f 	and.w	r3, sl, #15
 800d018:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 800d01c:	ed93 7b00 	vldr	d7, [r3]
 800d020:	ea4f 162a 	mov.w	r6, sl, asr #4
 800d024:	06f0      	lsls	r0, r6, #27
 800d026:	ed8d 7b08 	vstr	d7, [sp, #32]
 800d02a:	d565      	bpl.n	800d0f8 <_dtoa_r+0x368>
 800d02c:	4b24      	ldr	r3, [pc, #144]	; (800d0c0 <_dtoa_r+0x330>)
 800d02e:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 800d032:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800d036:	f7f3 fc31 	bl	800089c <__aeabi_ddiv>
 800d03a:	e9cd 0100 	strd	r0, r1, [sp]
 800d03e:	f006 060f 	and.w	r6, r6, #15
 800d042:	2503      	movs	r5, #3
 800d044:	4f1e      	ldr	r7, [pc, #120]	; (800d0c0 <_dtoa_r+0x330>)
 800d046:	e04c      	b.n	800d0e2 <_dtoa_r+0x352>
 800d048:	2301      	movs	r3, #1
 800d04a:	930a      	str	r3, [sp, #40]	; 0x28
 800d04c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800d04e:	4453      	add	r3, sl
 800d050:	f103 0901 	add.w	r9, r3, #1
 800d054:	9302      	str	r3, [sp, #8]
 800d056:	464b      	mov	r3, r9
 800d058:	2b01      	cmp	r3, #1
 800d05a:	bfb8      	it	lt
 800d05c:	2301      	movlt	r3, #1
 800d05e:	e7ba      	b.n	800cfd6 <_dtoa_r+0x246>
 800d060:	2300      	movs	r3, #0
 800d062:	e7b2      	b.n	800cfca <_dtoa_r+0x23a>
 800d064:	2300      	movs	r3, #0
 800d066:	e7f0      	b.n	800d04a <_dtoa_r+0x2ba>
 800d068:	2501      	movs	r5, #1
 800d06a:	2300      	movs	r3, #0
 800d06c:	9306      	str	r3, [sp, #24]
 800d06e:	950a      	str	r5, [sp, #40]	; 0x28
 800d070:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800d074:	9302      	str	r3, [sp, #8]
 800d076:	4699      	mov	r9, r3
 800d078:	2200      	movs	r2, #0
 800d07a:	2312      	movs	r3, #18
 800d07c:	920b      	str	r2, [sp, #44]	; 0x2c
 800d07e:	e7aa      	b.n	800cfd6 <_dtoa_r+0x246>
 800d080:	2301      	movs	r3, #1
 800d082:	930a      	str	r3, [sp, #40]	; 0x28
 800d084:	e7f4      	b.n	800d070 <_dtoa_r+0x2e0>
 800d086:	2301      	movs	r3, #1
 800d088:	9302      	str	r3, [sp, #8]
 800d08a:	4699      	mov	r9, r3
 800d08c:	461a      	mov	r2, r3
 800d08e:	e7f5      	b.n	800d07c <_dtoa_r+0x2ec>
 800d090:	3101      	adds	r1, #1
 800d092:	6071      	str	r1, [r6, #4]
 800d094:	0052      	lsls	r2, r2, #1
 800d096:	e7a2      	b.n	800cfde <_dtoa_r+0x24e>
 800d098:	636f4361 	.word	0x636f4361
 800d09c:	3fd287a7 	.word	0x3fd287a7
 800d0a0:	8b60c8b3 	.word	0x8b60c8b3
 800d0a4:	3fc68a28 	.word	0x3fc68a28
 800d0a8:	509f79fb 	.word	0x509f79fb
 800d0ac:	3fd34413 	.word	0x3fd34413
 800d0b0:	7ff00000 	.word	0x7ff00000
 800d0b4:	0800f1f5 	.word	0x0800f1f5
 800d0b8:	3ff80000 	.word	0x3ff80000
 800d0bc:	0800f2b0 	.word	0x0800f2b0
 800d0c0:	0800f288 	.word	0x0800f288
 800d0c4:	0800f221 	.word	0x0800f221
 800d0c8:	07f1      	lsls	r1, r6, #31
 800d0ca:	d508      	bpl.n	800d0de <_dtoa_r+0x34e>
 800d0cc:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 800d0d0:	e9d7 2300 	ldrd	r2, r3, [r7]
 800d0d4:	f7f3 fab8 	bl	8000648 <__aeabi_dmul>
 800d0d8:	e9cd 0108 	strd	r0, r1, [sp, #32]
 800d0dc:	3501      	adds	r5, #1
 800d0de:	1076      	asrs	r6, r6, #1
 800d0e0:	3708      	adds	r7, #8
 800d0e2:	2e00      	cmp	r6, #0
 800d0e4:	d1f0      	bne.n	800d0c8 <_dtoa_r+0x338>
 800d0e6:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 800d0ea:	e9dd 0100 	ldrd	r0, r1, [sp]
 800d0ee:	f7f3 fbd5 	bl	800089c <__aeabi_ddiv>
 800d0f2:	e9cd 0100 	strd	r0, r1, [sp]
 800d0f6:	e01a      	b.n	800d12e <_dtoa_r+0x39e>
 800d0f8:	2502      	movs	r5, #2
 800d0fa:	e7a3      	b.n	800d044 <_dtoa_r+0x2b4>
 800d0fc:	f000 80a0 	beq.w	800d240 <_dtoa_r+0x4b0>
 800d100:	f1ca 0600 	rsb	r6, sl, #0
 800d104:	4b9f      	ldr	r3, [pc, #636]	; (800d384 <_dtoa_r+0x5f4>)
 800d106:	4fa0      	ldr	r7, [pc, #640]	; (800d388 <_dtoa_r+0x5f8>)
 800d108:	f006 020f 	and.w	r2, r6, #15
 800d10c:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800d110:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d114:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 800d118:	f7f3 fa96 	bl	8000648 <__aeabi_dmul>
 800d11c:	e9cd 0100 	strd	r0, r1, [sp]
 800d120:	1136      	asrs	r6, r6, #4
 800d122:	2300      	movs	r3, #0
 800d124:	2502      	movs	r5, #2
 800d126:	2e00      	cmp	r6, #0
 800d128:	d17f      	bne.n	800d22a <_dtoa_r+0x49a>
 800d12a:	2b00      	cmp	r3, #0
 800d12c:	d1e1      	bne.n	800d0f2 <_dtoa_r+0x362>
 800d12e:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800d130:	2b00      	cmp	r3, #0
 800d132:	f000 8087 	beq.w	800d244 <_dtoa_r+0x4b4>
 800d136:	e9dd 6700 	ldrd	r6, r7, [sp]
 800d13a:	2200      	movs	r2, #0
 800d13c:	4b93      	ldr	r3, [pc, #588]	; (800d38c <_dtoa_r+0x5fc>)
 800d13e:	4630      	mov	r0, r6
 800d140:	4639      	mov	r1, r7
 800d142:	f7f3 fcf3 	bl	8000b2c <__aeabi_dcmplt>
 800d146:	2800      	cmp	r0, #0
 800d148:	d07c      	beq.n	800d244 <_dtoa_r+0x4b4>
 800d14a:	f1b9 0f00 	cmp.w	r9, #0
 800d14e:	d079      	beq.n	800d244 <_dtoa_r+0x4b4>
 800d150:	9b02      	ldr	r3, [sp, #8]
 800d152:	2b00      	cmp	r3, #0
 800d154:	dd35      	ble.n	800d1c2 <_dtoa_r+0x432>
 800d156:	f10a 33ff 	add.w	r3, sl, #4294967295	; 0xffffffff
 800d15a:	9308      	str	r3, [sp, #32]
 800d15c:	4639      	mov	r1, r7
 800d15e:	2200      	movs	r2, #0
 800d160:	4b8b      	ldr	r3, [pc, #556]	; (800d390 <_dtoa_r+0x600>)
 800d162:	4630      	mov	r0, r6
 800d164:	f7f3 fa70 	bl	8000648 <__aeabi_dmul>
 800d168:	e9cd 0100 	strd	r0, r1, [sp]
 800d16c:	9f02      	ldr	r7, [sp, #8]
 800d16e:	3501      	adds	r5, #1
 800d170:	4628      	mov	r0, r5
 800d172:	f7f3 f9ff 	bl	8000574 <__aeabi_i2d>
 800d176:	e9dd 2300 	ldrd	r2, r3, [sp]
 800d17a:	f7f3 fa65 	bl	8000648 <__aeabi_dmul>
 800d17e:	2200      	movs	r2, #0
 800d180:	4b84      	ldr	r3, [pc, #528]	; (800d394 <_dtoa_r+0x604>)
 800d182:	f7f3 f8ab 	bl	80002dc <__adddf3>
 800d186:	4605      	mov	r5, r0
 800d188:	f1a1 7650 	sub.w	r6, r1, #54525952	; 0x3400000
 800d18c:	2f00      	cmp	r7, #0
 800d18e:	d15d      	bne.n	800d24c <_dtoa_r+0x4bc>
 800d190:	2200      	movs	r2, #0
 800d192:	4b81      	ldr	r3, [pc, #516]	; (800d398 <_dtoa_r+0x608>)
 800d194:	e9dd 0100 	ldrd	r0, r1, [sp]
 800d198:	f7f3 f89e 	bl	80002d8 <__aeabi_dsub>
 800d19c:	462a      	mov	r2, r5
 800d19e:	4633      	mov	r3, r6
 800d1a0:	e9cd 0100 	strd	r0, r1, [sp]
 800d1a4:	f7f3 fce0 	bl	8000b68 <__aeabi_dcmpgt>
 800d1a8:	2800      	cmp	r0, #0
 800d1aa:	f040 8288 	bne.w	800d6be <_dtoa_r+0x92e>
 800d1ae:	462a      	mov	r2, r5
 800d1b0:	f106 4300 	add.w	r3, r6, #2147483648	; 0x80000000
 800d1b4:	e9dd 0100 	ldrd	r0, r1, [sp]
 800d1b8:	f7f3 fcb8 	bl	8000b2c <__aeabi_dcmplt>
 800d1bc:	2800      	cmp	r0, #0
 800d1be:	f040 827c 	bne.w	800d6ba <_dtoa_r+0x92a>
 800d1c2:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 800d1c6:	e9cd 2300 	strd	r2, r3, [sp]
 800d1ca:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800d1cc:	2b00      	cmp	r3, #0
 800d1ce:	f2c0 8150 	blt.w	800d472 <_dtoa_r+0x6e2>
 800d1d2:	f1ba 0f0e 	cmp.w	sl, #14
 800d1d6:	f300 814c 	bgt.w	800d472 <_dtoa_r+0x6e2>
 800d1da:	4b6a      	ldr	r3, [pc, #424]	; (800d384 <_dtoa_r+0x5f4>)
 800d1dc:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 800d1e0:	ed93 7b00 	vldr	d7, [r3]
 800d1e4:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800d1e6:	2b00      	cmp	r3, #0
 800d1e8:	ed8d 7b02 	vstr	d7, [sp, #8]
 800d1ec:	f280 80d8 	bge.w	800d3a0 <_dtoa_r+0x610>
 800d1f0:	f1b9 0f00 	cmp.w	r9, #0
 800d1f4:	f300 80d4 	bgt.w	800d3a0 <_dtoa_r+0x610>
 800d1f8:	f040 825e 	bne.w	800d6b8 <_dtoa_r+0x928>
 800d1fc:	2200      	movs	r2, #0
 800d1fe:	4b66      	ldr	r3, [pc, #408]	; (800d398 <_dtoa_r+0x608>)
 800d200:	ec51 0b17 	vmov	r0, r1, d7
 800d204:	f7f3 fa20 	bl	8000648 <__aeabi_dmul>
 800d208:	e9dd 2300 	ldrd	r2, r3, [sp]
 800d20c:	f7f3 fca2 	bl	8000b54 <__aeabi_dcmpge>
 800d210:	464f      	mov	r7, r9
 800d212:	464e      	mov	r6, r9
 800d214:	2800      	cmp	r0, #0
 800d216:	f040 8234 	bne.w	800d682 <_dtoa_r+0x8f2>
 800d21a:	2331      	movs	r3, #49	; 0x31
 800d21c:	f10b 0501 	add.w	r5, fp, #1
 800d220:	f88b 3000 	strb.w	r3, [fp]
 800d224:	f10a 0a01 	add.w	sl, sl, #1
 800d228:	e22f      	b.n	800d68a <_dtoa_r+0x8fa>
 800d22a:	07f2      	lsls	r2, r6, #31
 800d22c:	d505      	bpl.n	800d23a <_dtoa_r+0x4aa>
 800d22e:	e9d7 2300 	ldrd	r2, r3, [r7]
 800d232:	f7f3 fa09 	bl	8000648 <__aeabi_dmul>
 800d236:	3501      	adds	r5, #1
 800d238:	2301      	movs	r3, #1
 800d23a:	1076      	asrs	r6, r6, #1
 800d23c:	3708      	adds	r7, #8
 800d23e:	e772      	b.n	800d126 <_dtoa_r+0x396>
 800d240:	2502      	movs	r5, #2
 800d242:	e774      	b.n	800d12e <_dtoa_r+0x39e>
 800d244:	f8cd a020 	str.w	sl, [sp, #32]
 800d248:	464f      	mov	r7, r9
 800d24a:	e791      	b.n	800d170 <_dtoa_r+0x3e0>
 800d24c:	4b4d      	ldr	r3, [pc, #308]	; (800d384 <_dtoa_r+0x5f4>)
 800d24e:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 800d252:	e953 0102 	ldrd	r0, r1, [r3, #-8]
 800d256:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800d258:	2b00      	cmp	r3, #0
 800d25a:	d047      	beq.n	800d2ec <_dtoa_r+0x55c>
 800d25c:	4602      	mov	r2, r0
 800d25e:	460b      	mov	r3, r1
 800d260:	2000      	movs	r0, #0
 800d262:	494e      	ldr	r1, [pc, #312]	; (800d39c <_dtoa_r+0x60c>)
 800d264:	f7f3 fb1a 	bl	800089c <__aeabi_ddiv>
 800d268:	462a      	mov	r2, r5
 800d26a:	4633      	mov	r3, r6
 800d26c:	f7f3 f834 	bl	80002d8 <__aeabi_dsub>
 800d270:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 800d274:	465d      	mov	r5, fp
 800d276:	e9dd 0100 	ldrd	r0, r1, [sp]
 800d27a:	f7f3 fc95 	bl	8000ba8 <__aeabi_d2iz>
 800d27e:	4606      	mov	r6, r0
 800d280:	f7f3 f978 	bl	8000574 <__aeabi_i2d>
 800d284:	4602      	mov	r2, r0
 800d286:	460b      	mov	r3, r1
 800d288:	e9dd 0100 	ldrd	r0, r1, [sp]
 800d28c:	f7f3 f824 	bl	80002d8 <__aeabi_dsub>
 800d290:	3630      	adds	r6, #48	; 0x30
 800d292:	f805 6b01 	strb.w	r6, [r5], #1
 800d296:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 800d29a:	e9cd 0100 	strd	r0, r1, [sp]
 800d29e:	f7f3 fc45 	bl	8000b2c <__aeabi_dcmplt>
 800d2a2:	2800      	cmp	r0, #0
 800d2a4:	d163      	bne.n	800d36e <_dtoa_r+0x5de>
 800d2a6:	e9dd 2300 	ldrd	r2, r3, [sp]
 800d2aa:	2000      	movs	r0, #0
 800d2ac:	4937      	ldr	r1, [pc, #220]	; (800d38c <_dtoa_r+0x5fc>)
 800d2ae:	f7f3 f813 	bl	80002d8 <__aeabi_dsub>
 800d2b2:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 800d2b6:	f7f3 fc39 	bl	8000b2c <__aeabi_dcmplt>
 800d2ba:	2800      	cmp	r0, #0
 800d2bc:	f040 80b7 	bne.w	800d42e <_dtoa_r+0x69e>
 800d2c0:	eba5 030b 	sub.w	r3, r5, fp
 800d2c4:	429f      	cmp	r7, r3
 800d2c6:	f77f af7c 	ble.w	800d1c2 <_dtoa_r+0x432>
 800d2ca:	2200      	movs	r2, #0
 800d2cc:	4b30      	ldr	r3, [pc, #192]	; (800d390 <_dtoa_r+0x600>)
 800d2ce:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800d2d2:	f7f3 f9b9 	bl	8000648 <__aeabi_dmul>
 800d2d6:	2200      	movs	r2, #0
 800d2d8:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 800d2dc:	4b2c      	ldr	r3, [pc, #176]	; (800d390 <_dtoa_r+0x600>)
 800d2de:	e9dd 0100 	ldrd	r0, r1, [sp]
 800d2e2:	f7f3 f9b1 	bl	8000648 <__aeabi_dmul>
 800d2e6:	e9cd 0100 	strd	r0, r1, [sp]
 800d2ea:	e7c4      	b.n	800d276 <_dtoa_r+0x4e6>
 800d2ec:	462a      	mov	r2, r5
 800d2ee:	4633      	mov	r3, r6
 800d2f0:	f7f3 f9aa 	bl	8000648 <__aeabi_dmul>
 800d2f4:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 800d2f8:	eb0b 0507 	add.w	r5, fp, r7
 800d2fc:	465e      	mov	r6, fp
 800d2fe:	e9dd 0100 	ldrd	r0, r1, [sp]
 800d302:	f7f3 fc51 	bl	8000ba8 <__aeabi_d2iz>
 800d306:	4607      	mov	r7, r0
 800d308:	f7f3 f934 	bl	8000574 <__aeabi_i2d>
 800d30c:	3730      	adds	r7, #48	; 0x30
 800d30e:	4602      	mov	r2, r0
 800d310:	460b      	mov	r3, r1
 800d312:	e9dd 0100 	ldrd	r0, r1, [sp]
 800d316:	f7f2 ffdf 	bl	80002d8 <__aeabi_dsub>
 800d31a:	f806 7b01 	strb.w	r7, [r6], #1
 800d31e:	42ae      	cmp	r6, r5
 800d320:	e9cd 0100 	strd	r0, r1, [sp]
 800d324:	f04f 0200 	mov.w	r2, #0
 800d328:	d126      	bne.n	800d378 <_dtoa_r+0x5e8>
 800d32a:	4b1c      	ldr	r3, [pc, #112]	; (800d39c <_dtoa_r+0x60c>)
 800d32c:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800d330:	f7f2 ffd4 	bl	80002dc <__adddf3>
 800d334:	4602      	mov	r2, r0
 800d336:	460b      	mov	r3, r1
 800d338:	e9dd 0100 	ldrd	r0, r1, [sp]
 800d33c:	f7f3 fc14 	bl	8000b68 <__aeabi_dcmpgt>
 800d340:	2800      	cmp	r0, #0
 800d342:	d174      	bne.n	800d42e <_dtoa_r+0x69e>
 800d344:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 800d348:	2000      	movs	r0, #0
 800d34a:	4914      	ldr	r1, [pc, #80]	; (800d39c <_dtoa_r+0x60c>)
 800d34c:	f7f2 ffc4 	bl	80002d8 <__aeabi_dsub>
 800d350:	4602      	mov	r2, r0
 800d352:	460b      	mov	r3, r1
 800d354:	e9dd 0100 	ldrd	r0, r1, [sp]
 800d358:	f7f3 fbe8 	bl	8000b2c <__aeabi_dcmplt>
 800d35c:	2800      	cmp	r0, #0
 800d35e:	f43f af30 	beq.w	800d1c2 <_dtoa_r+0x432>
 800d362:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 800d366:	2b30      	cmp	r3, #48	; 0x30
 800d368:	f105 32ff 	add.w	r2, r5, #4294967295	; 0xffffffff
 800d36c:	d002      	beq.n	800d374 <_dtoa_r+0x5e4>
 800d36e:	f8dd a020 	ldr.w	sl, [sp, #32]
 800d372:	e04a      	b.n	800d40a <_dtoa_r+0x67a>
 800d374:	4615      	mov	r5, r2
 800d376:	e7f4      	b.n	800d362 <_dtoa_r+0x5d2>
 800d378:	4b05      	ldr	r3, [pc, #20]	; (800d390 <_dtoa_r+0x600>)
 800d37a:	f7f3 f965 	bl	8000648 <__aeabi_dmul>
 800d37e:	e9cd 0100 	strd	r0, r1, [sp]
 800d382:	e7bc      	b.n	800d2fe <_dtoa_r+0x56e>
 800d384:	0800f2b0 	.word	0x0800f2b0
 800d388:	0800f288 	.word	0x0800f288
 800d38c:	3ff00000 	.word	0x3ff00000
 800d390:	40240000 	.word	0x40240000
 800d394:	401c0000 	.word	0x401c0000
 800d398:	40140000 	.word	0x40140000
 800d39c:	3fe00000 	.word	0x3fe00000
 800d3a0:	e9dd 6700 	ldrd	r6, r7, [sp]
 800d3a4:	465d      	mov	r5, fp
 800d3a6:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800d3aa:	4630      	mov	r0, r6
 800d3ac:	4639      	mov	r1, r7
 800d3ae:	f7f3 fa75 	bl	800089c <__aeabi_ddiv>
 800d3b2:	f7f3 fbf9 	bl	8000ba8 <__aeabi_d2iz>
 800d3b6:	4680      	mov	r8, r0
 800d3b8:	f7f3 f8dc 	bl	8000574 <__aeabi_i2d>
 800d3bc:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800d3c0:	f7f3 f942 	bl	8000648 <__aeabi_dmul>
 800d3c4:	4602      	mov	r2, r0
 800d3c6:	460b      	mov	r3, r1
 800d3c8:	4630      	mov	r0, r6
 800d3ca:	4639      	mov	r1, r7
 800d3cc:	f108 0630 	add.w	r6, r8, #48	; 0x30
 800d3d0:	f7f2 ff82 	bl	80002d8 <__aeabi_dsub>
 800d3d4:	f805 6b01 	strb.w	r6, [r5], #1
 800d3d8:	eba5 060b 	sub.w	r6, r5, fp
 800d3dc:	45b1      	cmp	r9, r6
 800d3de:	4602      	mov	r2, r0
 800d3e0:	460b      	mov	r3, r1
 800d3e2:	d139      	bne.n	800d458 <_dtoa_r+0x6c8>
 800d3e4:	f7f2 ff7a 	bl	80002dc <__adddf3>
 800d3e8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800d3ec:	4606      	mov	r6, r0
 800d3ee:	460f      	mov	r7, r1
 800d3f0:	f7f3 fbba 	bl	8000b68 <__aeabi_dcmpgt>
 800d3f4:	b9c8      	cbnz	r0, 800d42a <_dtoa_r+0x69a>
 800d3f6:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800d3fa:	4630      	mov	r0, r6
 800d3fc:	4639      	mov	r1, r7
 800d3fe:	f7f3 fb8b 	bl	8000b18 <__aeabi_dcmpeq>
 800d402:	b110      	cbz	r0, 800d40a <_dtoa_r+0x67a>
 800d404:	f018 0f01 	tst.w	r8, #1
 800d408:	d10f      	bne.n	800d42a <_dtoa_r+0x69a>
 800d40a:	9904      	ldr	r1, [sp, #16]
 800d40c:	4620      	mov	r0, r4
 800d40e:	f000 fcaa 	bl	800dd66 <_Bfree>
 800d412:	2300      	movs	r3, #0
 800d414:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800d416:	702b      	strb	r3, [r5, #0]
 800d418:	f10a 0301 	add.w	r3, sl, #1
 800d41c:	6013      	str	r3, [r2, #0]
 800d41e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800d420:	2b00      	cmp	r3, #0
 800d422:	f000 8241 	beq.w	800d8a8 <_dtoa_r+0xb18>
 800d426:	601d      	str	r5, [r3, #0]
 800d428:	e23e      	b.n	800d8a8 <_dtoa_r+0xb18>
 800d42a:	f8cd a020 	str.w	sl, [sp, #32]
 800d42e:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 800d432:	2a39      	cmp	r2, #57	; 0x39
 800d434:	f105 33ff 	add.w	r3, r5, #4294967295	; 0xffffffff
 800d438:	d108      	bne.n	800d44c <_dtoa_r+0x6bc>
 800d43a:	459b      	cmp	fp, r3
 800d43c:	d10a      	bne.n	800d454 <_dtoa_r+0x6c4>
 800d43e:	9b08      	ldr	r3, [sp, #32]
 800d440:	3301      	adds	r3, #1
 800d442:	9308      	str	r3, [sp, #32]
 800d444:	2330      	movs	r3, #48	; 0x30
 800d446:	f88b 3000 	strb.w	r3, [fp]
 800d44a:	465b      	mov	r3, fp
 800d44c:	781a      	ldrb	r2, [r3, #0]
 800d44e:	3201      	adds	r2, #1
 800d450:	701a      	strb	r2, [r3, #0]
 800d452:	e78c      	b.n	800d36e <_dtoa_r+0x5de>
 800d454:	461d      	mov	r5, r3
 800d456:	e7ea      	b.n	800d42e <_dtoa_r+0x69e>
 800d458:	2200      	movs	r2, #0
 800d45a:	4b9b      	ldr	r3, [pc, #620]	; (800d6c8 <_dtoa_r+0x938>)
 800d45c:	f7f3 f8f4 	bl	8000648 <__aeabi_dmul>
 800d460:	2200      	movs	r2, #0
 800d462:	2300      	movs	r3, #0
 800d464:	4606      	mov	r6, r0
 800d466:	460f      	mov	r7, r1
 800d468:	f7f3 fb56 	bl	8000b18 <__aeabi_dcmpeq>
 800d46c:	2800      	cmp	r0, #0
 800d46e:	d09a      	beq.n	800d3a6 <_dtoa_r+0x616>
 800d470:	e7cb      	b.n	800d40a <_dtoa_r+0x67a>
 800d472:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800d474:	2a00      	cmp	r2, #0
 800d476:	f000 808b 	beq.w	800d590 <_dtoa_r+0x800>
 800d47a:	9a06      	ldr	r2, [sp, #24]
 800d47c:	2a01      	cmp	r2, #1
 800d47e:	dc6e      	bgt.n	800d55e <_dtoa_r+0x7ce>
 800d480:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 800d482:	2a00      	cmp	r2, #0
 800d484:	d067      	beq.n	800d556 <_dtoa_r+0x7c6>
 800d486:	f203 4333 	addw	r3, r3, #1075	; 0x433
 800d48a:	9f07      	ldr	r7, [sp, #28]
 800d48c:	9d05      	ldr	r5, [sp, #20]
 800d48e:	9a05      	ldr	r2, [sp, #20]
 800d490:	2101      	movs	r1, #1
 800d492:	441a      	add	r2, r3
 800d494:	4620      	mov	r0, r4
 800d496:	9205      	str	r2, [sp, #20]
 800d498:	4498      	add	r8, r3
 800d49a:	f000 fd04 	bl	800dea6 <__i2b>
 800d49e:	4606      	mov	r6, r0
 800d4a0:	2d00      	cmp	r5, #0
 800d4a2:	dd0c      	ble.n	800d4be <_dtoa_r+0x72e>
 800d4a4:	f1b8 0f00 	cmp.w	r8, #0
 800d4a8:	dd09      	ble.n	800d4be <_dtoa_r+0x72e>
 800d4aa:	4545      	cmp	r5, r8
 800d4ac:	9a05      	ldr	r2, [sp, #20]
 800d4ae:	462b      	mov	r3, r5
 800d4b0:	bfa8      	it	ge
 800d4b2:	4643      	movge	r3, r8
 800d4b4:	1ad2      	subs	r2, r2, r3
 800d4b6:	9205      	str	r2, [sp, #20]
 800d4b8:	1aed      	subs	r5, r5, r3
 800d4ba:	eba8 0803 	sub.w	r8, r8, r3
 800d4be:	9b07      	ldr	r3, [sp, #28]
 800d4c0:	b1eb      	cbz	r3, 800d4fe <_dtoa_r+0x76e>
 800d4c2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800d4c4:	2b00      	cmp	r3, #0
 800d4c6:	d067      	beq.n	800d598 <_dtoa_r+0x808>
 800d4c8:	b18f      	cbz	r7, 800d4ee <_dtoa_r+0x75e>
 800d4ca:	4631      	mov	r1, r6
 800d4cc:	463a      	mov	r2, r7
 800d4ce:	4620      	mov	r0, r4
 800d4d0:	f000 fd88 	bl	800dfe4 <__pow5mult>
 800d4d4:	9a04      	ldr	r2, [sp, #16]
 800d4d6:	4601      	mov	r1, r0
 800d4d8:	4606      	mov	r6, r0
 800d4da:	4620      	mov	r0, r4
 800d4dc:	f000 fcec 	bl	800deb8 <__multiply>
 800d4e0:	9904      	ldr	r1, [sp, #16]
 800d4e2:	9008      	str	r0, [sp, #32]
 800d4e4:	4620      	mov	r0, r4
 800d4e6:	f000 fc3e 	bl	800dd66 <_Bfree>
 800d4ea:	9b08      	ldr	r3, [sp, #32]
 800d4ec:	9304      	str	r3, [sp, #16]
 800d4ee:	9b07      	ldr	r3, [sp, #28]
 800d4f0:	1bda      	subs	r2, r3, r7
 800d4f2:	d004      	beq.n	800d4fe <_dtoa_r+0x76e>
 800d4f4:	9904      	ldr	r1, [sp, #16]
 800d4f6:	4620      	mov	r0, r4
 800d4f8:	f000 fd74 	bl	800dfe4 <__pow5mult>
 800d4fc:	9004      	str	r0, [sp, #16]
 800d4fe:	2101      	movs	r1, #1
 800d500:	4620      	mov	r0, r4
 800d502:	f000 fcd0 	bl	800dea6 <__i2b>
 800d506:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800d508:	4607      	mov	r7, r0
 800d50a:	2b00      	cmp	r3, #0
 800d50c:	f000 81d0 	beq.w	800d8b0 <_dtoa_r+0xb20>
 800d510:	461a      	mov	r2, r3
 800d512:	4601      	mov	r1, r0
 800d514:	4620      	mov	r0, r4
 800d516:	f000 fd65 	bl	800dfe4 <__pow5mult>
 800d51a:	9b06      	ldr	r3, [sp, #24]
 800d51c:	2b01      	cmp	r3, #1
 800d51e:	4607      	mov	r7, r0
 800d520:	dc40      	bgt.n	800d5a4 <_dtoa_r+0x814>
 800d522:	9b00      	ldr	r3, [sp, #0]
 800d524:	2b00      	cmp	r3, #0
 800d526:	d139      	bne.n	800d59c <_dtoa_r+0x80c>
 800d528:	9b01      	ldr	r3, [sp, #4]
 800d52a:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800d52e:	2b00      	cmp	r3, #0
 800d530:	d136      	bne.n	800d5a0 <_dtoa_r+0x810>
 800d532:	9b01      	ldr	r3, [sp, #4]
 800d534:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800d538:	0d1b      	lsrs	r3, r3, #20
 800d53a:	051b      	lsls	r3, r3, #20
 800d53c:	b12b      	cbz	r3, 800d54a <_dtoa_r+0x7ba>
 800d53e:	9b05      	ldr	r3, [sp, #20]
 800d540:	3301      	adds	r3, #1
 800d542:	9305      	str	r3, [sp, #20]
 800d544:	f108 0801 	add.w	r8, r8, #1
 800d548:	2301      	movs	r3, #1
 800d54a:	9307      	str	r3, [sp, #28]
 800d54c:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800d54e:	2b00      	cmp	r3, #0
 800d550:	d12a      	bne.n	800d5a8 <_dtoa_r+0x818>
 800d552:	2001      	movs	r0, #1
 800d554:	e030      	b.n	800d5b8 <_dtoa_r+0x828>
 800d556:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800d558:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 800d55c:	e795      	b.n	800d48a <_dtoa_r+0x6fa>
 800d55e:	9b07      	ldr	r3, [sp, #28]
 800d560:	f109 37ff 	add.w	r7, r9, #4294967295	; 0xffffffff
 800d564:	42bb      	cmp	r3, r7
 800d566:	bfbf      	itttt	lt
 800d568:	9b07      	ldrlt	r3, [sp, #28]
 800d56a:	9707      	strlt	r7, [sp, #28]
 800d56c:	1afa      	sublt	r2, r7, r3
 800d56e:	9b0e      	ldrlt	r3, [sp, #56]	; 0x38
 800d570:	bfbb      	ittet	lt
 800d572:	189b      	addlt	r3, r3, r2
 800d574:	930e      	strlt	r3, [sp, #56]	; 0x38
 800d576:	1bdf      	subge	r7, r3, r7
 800d578:	2700      	movlt	r7, #0
 800d57a:	f1b9 0f00 	cmp.w	r9, #0
 800d57e:	bfb5      	itete	lt
 800d580:	9b05      	ldrlt	r3, [sp, #20]
 800d582:	9d05      	ldrge	r5, [sp, #20]
 800d584:	eba3 0509 	sublt.w	r5, r3, r9
 800d588:	464b      	movge	r3, r9
 800d58a:	bfb8      	it	lt
 800d58c:	2300      	movlt	r3, #0
 800d58e:	e77e      	b.n	800d48e <_dtoa_r+0x6fe>
 800d590:	9f07      	ldr	r7, [sp, #28]
 800d592:	9d05      	ldr	r5, [sp, #20]
 800d594:	9e0a      	ldr	r6, [sp, #40]	; 0x28
 800d596:	e783      	b.n	800d4a0 <_dtoa_r+0x710>
 800d598:	9a07      	ldr	r2, [sp, #28]
 800d59a:	e7ab      	b.n	800d4f4 <_dtoa_r+0x764>
 800d59c:	2300      	movs	r3, #0
 800d59e:	e7d4      	b.n	800d54a <_dtoa_r+0x7ba>
 800d5a0:	9b00      	ldr	r3, [sp, #0]
 800d5a2:	e7d2      	b.n	800d54a <_dtoa_r+0x7ba>
 800d5a4:	2300      	movs	r3, #0
 800d5a6:	9307      	str	r3, [sp, #28]
 800d5a8:	693b      	ldr	r3, [r7, #16]
 800d5aa:	eb07 0383 	add.w	r3, r7, r3, lsl #2
 800d5ae:	6918      	ldr	r0, [r3, #16]
 800d5b0:	f000 fc2b 	bl	800de0a <__hi0bits>
 800d5b4:	f1c0 0020 	rsb	r0, r0, #32
 800d5b8:	4440      	add	r0, r8
 800d5ba:	f010 001f 	ands.w	r0, r0, #31
 800d5be:	d047      	beq.n	800d650 <_dtoa_r+0x8c0>
 800d5c0:	f1c0 0320 	rsb	r3, r0, #32
 800d5c4:	2b04      	cmp	r3, #4
 800d5c6:	dd3b      	ble.n	800d640 <_dtoa_r+0x8b0>
 800d5c8:	9b05      	ldr	r3, [sp, #20]
 800d5ca:	f1c0 001c 	rsb	r0, r0, #28
 800d5ce:	4403      	add	r3, r0
 800d5d0:	9305      	str	r3, [sp, #20]
 800d5d2:	4405      	add	r5, r0
 800d5d4:	4480      	add	r8, r0
 800d5d6:	9b05      	ldr	r3, [sp, #20]
 800d5d8:	2b00      	cmp	r3, #0
 800d5da:	dd05      	ble.n	800d5e8 <_dtoa_r+0x858>
 800d5dc:	461a      	mov	r2, r3
 800d5de:	9904      	ldr	r1, [sp, #16]
 800d5e0:	4620      	mov	r0, r4
 800d5e2:	f000 fd4d 	bl	800e080 <__lshift>
 800d5e6:	9004      	str	r0, [sp, #16]
 800d5e8:	f1b8 0f00 	cmp.w	r8, #0
 800d5ec:	dd05      	ble.n	800d5fa <_dtoa_r+0x86a>
 800d5ee:	4639      	mov	r1, r7
 800d5f0:	4642      	mov	r2, r8
 800d5f2:	4620      	mov	r0, r4
 800d5f4:	f000 fd44 	bl	800e080 <__lshift>
 800d5f8:	4607      	mov	r7, r0
 800d5fa:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800d5fc:	b353      	cbz	r3, 800d654 <_dtoa_r+0x8c4>
 800d5fe:	4639      	mov	r1, r7
 800d600:	9804      	ldr	r0, [sp, #16]
 800d602:	f000 fd91 	bl	800e128 <__mcmp>
 800d606:	2800      	cmp	r0, #0
 800d608:	da24      	bge.n	800d654 <_dtoa_r+0x8c4>
 800d60a:	2300      	movs	r3, #0
 800d60c:	220a      	movs	r2, #10
 800d60e:	9904      	ldr	r1, [sp, #16]
 800d610:	4620      	mov	r0, r4
 800d612:	f000 fbbf 	bl	800dd94 <__multadd>
 800d616:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800d618:	9004      	str	r0, [sp, #16]
 800d61a:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
 800d61e:	2b00      	cmp	r3, #0
 800d620:	f000 814d 	beq.w	800d8be <_dtoa_r+0xb2e>
 800d624:	2300      	movs	r3, #0
 800d626:	4631      	mov	r1, r6
 800d628:	220a      	movs	r2, #10
 800d62a:	4620      	mov	r0, r4
 800d62c:	f000 fbb2 	bl	800dd94 <__multadd>
 800d630:	9b02      	ldr	r3, [sp, #8]
 800d632:	2b00      	cmp	r3, #0
 800d634:	4606      	mov	r6, r0
 800d636:	dc4f      	bgt.n	800d6d8 <_dtoa_r+0x948>
 800d638:	9b06      	ldr	r3, [sp, #24]
 800d63a:	2b02      	cmp	r3, #2
 800d63c:	dd4c      	ble.n	800d6d8 <_dtoa_r+0x948>
 800d63e:	e011      	b.n	800d664 <_dtoa_r+0x8d4>
 800d640:	d0c9      	beq.n	800d5d6 <_dtoa_r+0x846>
 800d642:	9a05      	ldr	r2, [sp, #20]
 800d644:	331c      	adds	r3, #28
 800d646:	441a      	add	r2, r3
 800d648:	9205      	str	r2, [sp, #20]
 800d64a:	441d      	add	r5, r3
 800d64c:	4498      	add	r8, r3
 800d64e:	e7c2      	b.n	800d5d6 <_dtoa_r+0x846>
 800d650:	4603      	mov	r3, r0
 800d652:	e7f6      	b.n	800d642 <_dtoa_r+0x8b2>
 800d654:	f1b9 0f00 	cmp.w	r9, #0
 800d658:	dc38      	bgt.n	800d6cc <_dtoa_r+0x93c>
 800d65a:	9b06      	ldr	r3, [sp, #24]
 800d65c:	2b02      	cmp	r3, #2
 800d65e:	dd35      	ble.n	800d6cc <_dtoa_r+0x93c>
 800d660:	f8cd 9008 	str.w	r9, [sp, #8]
 800d664:	9b02      	ldr	r3, [sp, #8]
 800d666:	b963      	cbnz	r3, 800d682 <_dtoa_r+0x8f2>
 800d668:	4639      	mov	r1, r7
 800d66a:	2205      	movs	r2, #5
 800d66c:	4620      	mov	r0, r4
 800d66e:	f000 fb91 	bl	800dd94 <__multadd>
 800d672:	4601      	mov	r1, r0
 800d674:	4607      	mov	r7, r0
 800d676:	9804      	ldr	r0, [sp, #16]
 800d678:	f000 fd56 	bl	800e128 <__mcmp>
 800d67c:	2800      	cmp	r0, #0
 800d67e:	f73f adcc 	bgt.w	800d21a <_dtoa_r+0x48a>
 800d682:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800d684:	465d      	mov	r5, fp
 800d686:	ea6f 0a03 	mvn.w	sl, r3
 800d68a:	f04f 0900 	mov.w	r9, #0
 800d68e:	4639      	mov	r1, r7
 800d690:	4620      	mov	r0, r4
 800d692:	f000 fb68 	bl	800dd66 <_Bfree>
 800d696:	2e00      	cmp	r6, #0
 800d698:	f43f aeb7 	beq.w	800d40a <_dtoa_r+0x67a>
 800d69c:	f1b9 0f00 	cmp.w	r9, #0
 800d6a0:	d005      	beq.n	800d6ae <_dtoa_r+0x91e>
 800d6a2:	45b1      	cmp	r9, r6
 800d6a4:	d003      	beq.n	800d6ae <_dtoa_r+0x91e>
 800d6a6:	4649      	mov	r1, r9
 800d6a8:	4620      	mov	r0, r4
 800d6aa:	f000 fb5c 	bl	800dd66 <_Bfree>
 800d6ae:	4631      	mov	r1, r6
 800d6b0:	4620      	mov	r0, r4
 800d6b2:	f000 fb58 	bl	800dd66 <_Bfree>
 800d6b6:	e6a8      	b.n	800d40a <_dtoa_r+0x67a>
 800d6b8:	2700      	movs	r7, #0
 800d6ba:	463e      	mov	r6, r7
 800d6bc:	e7e1      	b.n	800d682 <_dtoa_r+0x8f2>
 800d6be:	f8dd a020 	ldr.w	sl, [sp, #32]
 800d6c2:	463e      	mov	r6, r7
 800d6c4:	e5a9      	b.n	800d21a <_dtoa_r+0x48a>
 800d6c6:	bf00      	nop
 800d6c8:	40240000 	.word	0x40240000
 800d6cc:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800d6ce:	f8cd 9008 	str.w	r9, [sp, #8]
 800d6d2:	2b00      	cmp	r3, #0
 800d6d4:	f000 80fa 	beq.w	800d8cc <_dtoa_r+0xb3c>
 800d6d8:	2d00      	cmp	r5, #0
 800d6da:	dd05      	ble.n	800d6e8 <_dtoa_r+0x958>
 800d6dc:	4631      	mov	r1, r6
 800d6de:	462a      	mov	r2, r5
 800d6e0:	4620      	mov	r0, r4
 800d6e2:	f000 fccd 	bl	800e080 <__lshift>
 800d6e6:	4606      	mov	r6, r0
 800d6e8:	9b07      	ldr	r3, [sp, #28]
 800d6ea:	2b00      	cmp	r3, #0
 800d6ec:	d04c      	beq.n	800d788 <_dtoa_r+0x9f8>
 800d6ee:	6871      	ldr	r1, [r6, #4]
 800d6f0:	4620      	mov	r0, r4
 800d6f2:	f000 fb04 	bl	800dcfe <_Balloc>
 800d6f6:	6932      	ldr	r2, [r6, #16]
 800d6f8:	3202      	adds	r2, #2
 800d6fa:	4605      	mov	r5, r0
 800d6fc:	0092      	lsls	r2, r2, #2
 800d6fe:	f106 010c 	add.w	r1, r6, #12
 800d702:	300c      	adds	r0, #12
 800d704:	f000 faf0 	bl	800dce8 <memcpy>
 800d708:	2201      	movs	r2, #1
 800d70a:	4629      	mov	r1, r5
 800d70c:	4620      	mov	r0, r4
 800d70e:	f000 fcb7 	bl	800e080 <__lshift>
 800d712:	9b00      	ldr	r3, [sp, #0]
 800d714:	f8cd b014 	str.w	fp, [sp, #20]
 800d718:	f003 0301 	and.w	r3, r3, #1
 800d71c:	46b1      	mov	r9, r6
 800d71e:	9307      	str	r3, [sp, #28]
 800d720:	4606      	mov	r6, r0
 800d722:	4639      	mov	r1, r7
 800d724:	9804      	ldr	r0, [sp, #16]
 800d726:	f7ff faa7 	bl	800cc78 <quorem>
 800d72a:	4649      	mov	r1, r9
 800d72c:	4605      	mov	r5, r0
 800d72e:	f100 0830 	add.w	r8, r0, #48	; 0x30
 800d732:	9804      	ldr	r0, [sp, #16]
 800d734:	f000 fcf8 	bl	800e128 <__mcmp>
 800d738:	4632      	mov	r2, r6
 800d73a:	9000      	str	r0, [sp, #0]
 800d73c:	4639      	mov	r1, r7
 800d73e:	4620      	mov	r0, r4
 800d740:	f000 fd0c 	bl	800e15c <__mdiff>
 800d744:	68c3      	ldr	r3, [r0, #12]
 800d746:	4602      	mov	r2, r0
 800d748:	bb03      	cbnz	r3, 800d78c <_dtoa_r+0x9fc>
 800d74a:	4601      	mov	r1, r0
 800d74c:	9008      	str	r0, [sp, #32]
 800d74e:	9804      	ldr	r0, [sp, #16]
 800d750:	f000 fcea 	bl	800e128 <__mcmp>
 800d754:	9a08      	ldr	r2, [sp, #32]
 800d756:	4603      	mov	r3, r0
 800d758:	4611      	mov	r1, r2
 800d75a:	4620      	mov	r0, r4
 800d75c:	9308      	str	r3, [sp, #32]
 800d75e:	f000 fb02 	bl	800dd66 <_Bfree>
 800d762:	9b08      	ldr	r3, [sp, #32]
 800d764:	b9a3      	cbnz	r3, 800d790 <_dtoa_r+0xa00>
 800d766:	9a06      	ldr	r2, [sp, #24]
 800d768:	b992      	cbnz	r2, 800d790 <_dtoa_r+0xa00>
 800d76a:	9a07      	ldr	r2, [sp, #28]
 800d76c:	b982      	cbnz	r2, 800d790 <_dtoa_r+0xa00>
 800d76e:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 800d772:	d029      	beq.n	800d7c8 <_dtoa_r+0xa38>
 800d774:	9b00      	ldr	r3, [sp, #0]
 800d776:	2b00      	cmp	r3, #0
 800d778:	dd01      	ble.n	800d77e <_dtoa_r+0x9ee>
 800d77a:	f105 0831 	add.w	r8, r5, #49	; 0x31
 800d77e:	9b05      	ldr	r3, [sp, #20]
 800d780:	1c5d      	adds	r5, r3, #1
 800d782:	f883 8000 	strb.w	r8, [r3]
 800d786:	e782      	b.n	800d68e <_dtoa_r+0x8fe>
 800d788:	4630      	mov	r0, r6
 800d78a:	e7c2      	b.n	800d712 <_dtoa_r+0x982>
 800d78c:	2301      	movs	r3, #1
 800d78e:	e7e3      	b.n	800d758 <_dtoa_r+0x9c8>
 800d790:	9a00      	ldr	r2, [sp, #0]
 800d792:	2a00      	cmp	r2, #0
 800d794:	db04      	blt.n	800d7a0 <_dtoa_r+0xa10>
 800d796:	d125      	bne.n	800d7e4 <_dtoa_r+0xa54>
 800d798:	9a06      	ldr	r2, [sp, #24]
 800d79a:	bb1a      	cbnz	r2, 800d7e4 <_dtoa_r+0xa54>
 800d79c:	9a07      	ldr	r2, [sp, #28]
 800d79e:	bb0a      	cbnz	r2, 800d7e4 <_dtoa_r+0xa54>
 800d7a0:	2b00      	cmp	r3, #0
 800d7a2:	ddec      	ble.n	800d77e <_dtoa_r+0x9ee>
 800d7a4:	2201      	movs	r2, #1
 800d7a6:	9904      	ldr	r1, [sp, #16]
 800d7a8:	4620      	mov	r0, r4
 800d7aa:	f000 fc69 	bl	800e080 <__lshift>
 800d7ae:	4639      	mov	r1, r7
 800d7b0:	9004      	str	r0, [sp, #16]
 800d7b2:	f000 fcb9 	bl	800e128 <__mcmp>
 800d7b6:	2800      	cmp	r0, #0
 800d7b8:	dc03      	bgt.n	800d7c2 <_dtoa_r+0xa32>
 800d7ba:	d1e0      	bne.n	800d77e <_dtoa_r+0x9ee>
 800d7bc:	f018 0f01 	tst.w	r8, #1
 800d7c0:	d0dd      	beq.n	800d77e <_dtoa_r+0x9ee>
 800d7c2:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 800d7c6:	d1d8      	bne.n	800d77a <_dtoa_r+0x9ea>
 800d7c8:	9b05      	ldr	r3, [sp, #20]
 800d7ca:	9a05      	ldr	r2, [sp, #20]
 800d7cc:	1c5d      	adds	r5, r3, #1
 800d7ce:	2339      	movs	r3, #57	; 0x39
 800d7d0:	7013      	strb	r3, [r2, #0]
 800d7d2:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 800d7d6:	2b39      	cmp	r3, #57	; 0x39
 800d7d8:	f105 32ff 	add.w	r2, r5, #4294967295	; 0xffffffff
 800d7dc:	d04f      	beq.n	800d87e <_dtoa_r+0xaee>
 800d7de:	3301      	adds	r3, #1
 800d7e0:	7013      	strb	r3, [r2, #0]
 800d7e2:	e754      	b.n	800d68e <_dtoa_r+0x8fe>
 800d7e4:	9a05      	ldr	r2, [sp, #20]
 800d7e6:	2b00      	cmp	r3, #0
 800d7e8:	f102 0501 	add.w	r5, r2, #1
 800d7ec:	dd06      	ble.n	800d7fc <_dtoa_r+0xa6c>
 800d7ee:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 800d7f2:	d0e9      	beq.n	800d7c8 <_dtoa_r+0xa38>
 800d7f4:	f108 0801 	add.w	r8, r8, #1
 800d7f8:	9b05      	ldr	r3, [sp, #20]
 800d7fa:	e7c2      	b.n	800d782 <_dtoa_r+0x9f2>
 800d7fc:	9a02      	ldr	r2, [sp, #8]
 800d7fe:	f805 8c01 	strb.w	r8, [r5, #-1]
 800d802:	eba5 030b 	sub.w	r3, r5, fp
 800d806:	4293      	cmp	r3, r2
 800d808:	d021      	beq.n	800d84e <_dtoa_r+0xabe>
 800d80a:	2300      	movs	r3, #0
 800d80c:	220a      	movs	r2, #10
 800d80e:	9904      	ldr	r1, [sp, #16]
 800d810:	4620      	mov	r0, r4
 800d812:	f000 fabf 	bl	800dd94 <__multadd>
 800d816:	45b1      	cmp	r9, r6
 800d818:	9004      	str	r0, [sp, #16]
 800d81a:	f04f 0300 	mov.w	r3, #0
 800d81e:	f04f 020a 	mov.w	r2, #10
 800d822:	4649      	mov	r1, r9
 800d824:	4620      	mov	r0, r4
 800d826:	d105      	bne.n	800d834 <_dtoa_r+0xaa4>
 800d828:	f000 fab4 	bl	800dd94 <__multadd>
 800d82c:	4681      	mov	r9, r0
 800d82e:	4606      	mov	r6, r0
 800d830:	9505      	str	r5, [sp, #20]
 800d832:	e776      	b.n	800d722 <_dtoa_r+0x992>
 800d834:	f000 faae 	bl	800dd94 <__multadd>
 800d838:	4631      	mov	r1, r6
 800d83a:	4681      	mov	r9, r0
 800d83c:	2300      	movs	r3, #0
 800d83e:	220a      	movs	r2, #10
 800d840:	4620      	mov	r0, r4
 800d842:	f000 faa7 	bl	800dd94 <__multadd>
 800d846:	4606      	mov	r6, r0
 800d848:	e7f2      	b.n	800d830 <_dtoa_r+0xaa0>
 800d84a:	f04f 0900 	mov.w	r9, #0
 800d84e:	2201      	movs	r2, #1
 800d850:	9904      	ldr	r1, [sp, #16]
 800d852:	4620      	mov	r0, r4
 800d854:	f000 fc14 	bl	800e080 <__lshift>
 800d858:	4639      	mov	r1, r7
 800d85a:	9004      	str	r0, [sp, #16]
 800d85c:	f000 fc64 	bl	800e128 <__mcmp>
 800d860:	2800      	cmp	r0, #0
 800d862:	dcb6      	bgt.n	800d7d2 <_dtoa_r+0xa42>
 800d864:	d102      	bne.n	800d86c <_dtoa_r+0xadc>
 800d866:	f018 0f01 	tst.w	r8, #1
 800d86a:	d1b2      	bne.n	800d7d2 <_dtoa_r+0xa42>
 800d86c:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 800d870:	2b30      	cmp	r3, #48	; 0x30
 800d872:	f105 32ff 	add.w	r2, r5, #4294967295	; 0xffffffff
 800d876:	f47f af0a 	bne.w	800d68e <_dtoa_r+0x8fe>
 800d87a:	4615      	mov	r5, r2
 800d87c:	e7f6      	b.n	800d86c <_dtoa_r+0xadc>
 800d87e:	4593      	cmp	fp, r2
 800d880:	d105      	bne.n	800d88e <_dtoa_r+0xafe>
 800d882:	2331      	movs	r3, #49	; 0x31
 800d884:	f10a 0a01 	add.w	sl, sl, #1
 800d888:	f88b 3000 	strb.w	r3, [fp]
 800d88c:	e6ff      	b.n	800d68e <_dtoa_r+0x8fe>
 800d88e:	4615      	mov	r5, r2
 800d890:	e79f      	b.n	800d7d2 <_dtoa_r+0xa42>
 800d892:	f8df b064 	ldr.w	fp, [pc, #100]	; 800d8f8 <_dtoa_r+0xb68>
 800d896:	e007      	b.n	800d8a8 <_dtoa_r+0xb18>
 800d898:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800d89a:	f8df b060 	ldr.w	fp, [pc, #96]	; 800d8fc <_dtoa_r+0xb6c>
 800d89e:	b11b      	cbz	r3, 800d8a8 <_dtoa_r+0xb18>
 800d8a0:	f10b 0308 	add.w	r3, fp, #8
 800d8a4:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800d8a6:	6013      	str	r3, [r2, #0]
 800d8a8:	4658      	mov	r0, fp
 800d8aa:	b017      	add	sp, #92	; 0x5c
 800d8ac:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d8b0:	9b06      	ldr	r3, [sp, #24]
 800d8b2:	2b01      	cmp	r3, #1
 800d8b4:	f77f ae35 	ble.w	800d522 <_dtoa_r+0x792>
 800d8b8:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800d8ba:	9307      	str	r3, [sp, #28]
 800d8bc:	e649      	b.n	800d552 <_dtoa_r+0x7c2>
 800d8be:	9b02      	ldr	r3, [sp, #8]
 800d8c0:	2b00      	cmp	r3, #0
 800d8c2:	dc03      	bgt.n	800d8cc <_dtoa_r+0xb3c>
 800d8c4:	9b06      	ldr	r3, [sp, #24]
 800d8c6:	2b02      	cmp	r3, #2
 800d8c8:	f73f aecc 	bgt.w	800d664 <_dtoa_r+0x8d4>
 800d8cc:	465d      	mov	r5, fp
 800d8ce:	4639      	mov	r1, r7
 800d8d0:	9804      	ldr	r0, [sp, #16]
 800d8d2:	f7ff f9d1 	bl	800cc78 <quorem>
 800d8d6:	f100 0830 	add.w	r8, r0, #48	; 0x30
 800d8da:	f805 8b01 	strb.w	r8, [r5], #1
 800d8de:	9a02      	ldr	r2, [sp, #8]
 800d8e0:	eba5 030b 	sub.w	r3, r5, fp
 800d8e4:	429a      	cmp	r2, r3
 800d8e6:	ddb0      	ble.n	800d84a <_dtoa_r+0xaba>
 800d8e8:	2300      	movs	r3, #0
 800d8ea:	220a      	movs	r2, #10
 800d8ec:	9904      	ldr	r1, [sp, #16]
 800d8ee:	4620      	mov	r0, r4
 800d8f0:	f000 fa50 	bl	800dd94 <__multadd>
 800d8f4:	9004      	str	r0, [sp, #16]
 800d8f6:	e7ea      	b.n	800d8ce <_dtoa_r+0xb3e>
 800d8f8:	0800f1f4 	.word	0x0800f1f4
 800d8fc:	0800f218 	.word	0x0800f218

0800d900 <__sflush_r>:
 800d900:	898a      	ldrh	r2, [r1, #12]
 800d902:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d906:	4605      	mov	r5, r0
 800d908:	0710      	lsls	r0, r2, #28
 800d90a:	460c      	mov	r4, r1
 800d90c:	d458      	bmi.n	800d9c0 <__sflush_r+0xc0>
 800d90e:	684b      	ldr	r3, [r1, #4]
 800d910:	2b00      	cmp	r3, #0
 800d912:	dc05      	bgt.n	800d920 <__sflush_r+0x20>
 800d914:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800d916:	2b00      	cmp	r3, #0
 800d918:	dc02      	bgt.n	800d920 <__sflush_r+0x20>
 800d91a:	2000      	movs	r0, #0
 800d91c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d920:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800d922:	2e00      	cmp	r6, #0
 800d924:	d0f9      	beq.n	800d91a <__sflush_r+0x1a>
 800d926:	2300      	movs	r3, #0
 800d928:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800d92c:	682f      	ldr	r7, [r5, #0]
 800d92e:	6a21      	ldr	r1, [r4, #32]
 800d930:	602b      	str	r3, [r5, #0]
 800d932:	d032      	beq.n	800d99a <__sflush_r+0x9a>
 800d934:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800d936:	89a3      	ldrh	r3, [r4, #12]
 800d938:	075a      	lsls	r2, r3, #29
 800d93a:	d505      	bpl.n	800d948 <__sflush_r+0x48>
 800d93c:	6863      	ldr	r3, [r4, #4]
 800d93e:	1ac0      	subs	r0, r0, r3
 800d940:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800d942:	b10b      	cbz	r3, 800d948 <__sflush_r+0x48>
 800d944:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800d946:	1ac0      	subs	r0, r0, r3
 800d948:	2300      	movs	r3, #0
 800d94a:	4602      	mov	r2, r0
 800d94c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800d94e:	6a21      	ldr	r1, [r4, #32]
 800d950:	4628      	mov	r0, r5
 800d952:	47b0      	blx	r6
 800d954:	1c43      	adds	r3, r0, #1
 800d956:	89a3      	ldrh	r3, [r4, #12]
 800d958:	d106      	bne.n	800d968 <__sflush_r+0x68>
 800d95a:	6829      	ldr	r1, [r5, #0]
 800d95c:	291d      	cmp	r1, #29
 800d95e:	d848      	bhi.n	800d9f2 <__sflush_r+0xf2>
 800d960:	4a29      	ldr	r2, [pc, #164]	; (800da08 <__sflush_r+0x108>)
 800d962:	40ca      	lsrs	r2, r1
 800d964:	07d6      	lsls	r6, r2, #31
 800d966:	d544      	bpl.n	800d9f2 <__sflush_r+0xf2>
 800d968:	2200      	movs	r2, #0
 800d96a:	6062      	str	r2, [r4, #4]
 800d96c:	04d9      	lsls	r1, r3, #19
 800d96e:	6922      	ldr	r2, [r4, #16]
 800d970:	6022      	str	r2, [r4, #0]
 800d972:	d504      	bpl.n	800d97e <__sflush_r+0x7e>
 800d974:	1c42      	adds	r2, r0, #1
 800d976:	d101      	bne.n	800d97c <__sflush_r+0x7c>
 800d978:	682b      	ldr	r3, [r5, #0]
 800d97a:	b903      	cbnz	r3, 800d97e <__sflush_r+0x7e>
 800d97c:	6560      	str	r0, [r4, #84]	; 0x54
 800d97e:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800d980:	602f      	str	r7, [r5, #0]
 800d982:	2900      	cmp	r1, #0
 800d984:	d0c9      	beq.n	800d91a <__sflush_r+0x1a>
 800d986:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800d98a:	4299      	cmp	r1, r3
 800d98c:	d002      	beq.n	800d994 <__sflush_r+0x94>
 800d98e:	4628      	mov	r0, r5
 800d990:	f000 fc9e 	bl	800e2d0 <_free_r>
 800d994:	2000      	movs	r0, #0
 800d996:	6360      	str	r0, [r4, #52]	; 0x34
 800d998:	e7c0      	b.n	800d91c <__sflush_r+0x1c>
 800d99a:	2301      	movs	r3, #1
 800d99c:	4628      	mov	r0, r5
 800d99e:	47b0      	blx	r6
 800d9a0:	1c41      	adds	r1, r0, #1
 800d9a2:	d1c8      	bne.n	800d936 <__sflush_r+0x36>
 800d9a4:	682b      	ldr	r3, [r5, #0]
 800d9a6:	2b00      	cmp	r3, #0
 800d9a8:	d0c5      	beq.n	800d936 <__sflush_r+0x36>
 800d9aa:	2b1d      	cmp	r3, #29
 800d9ac:	d001      	beq.n	800d9b2 <__sflush_r+0xb2>
 800d9ae:	2b16      	cmp	r3, #22
 800d9b0:	d101      	bne.n	800d9b6 <__sflush_r+0xb6>
 800d9b2:	602f      	str	r7, [r5, #0]
 800d9b4:	e7b1      	b.n	800d91a <__sflush_r+0x1a>
 800d9b6:	89a3      	ldrh	r3, [r4, #12]
 800d9b8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800d9bc:	81a3      	strh	r3, [r4, #12]
 800d9be:	e7ad      	b.n	800d91c <__sflush_r+0x1c>
 800d9c0:	690f      	ldr	r7, [r1, #16]
 800d9c2:	2f00      	cmp	r7, #0
 800d9c4:	d0a9      	beq.n	800d91a <__sflush_r+0x1a>
 800d9c6:	0793      	lsls	r3, r2, #30
 800d9c8:	680e      	ldr	r6, [r1, #0]
 800d9ca:	bf08      	it	eq
 800d9cc:	694b      	ldreq	r3, [r1, #20]
 800d9ce:	600f      	str	r7, [r1, #0]
 800d9d0:	bf18      	it	ne
 800d9d2:	2300      	movne	r3, #0
 800d9d4:	eba6 0807 	sub.w	r8, r6, r7
 800d9d8:	608b      	str	r3, [r1, #8]
 800d9da:	f1b8 0f00 	cmp.w	r8, #0
 800d9de:	dd9c      	ble.n	800d91a <__sflush_r+0x1a>
 800d9e0:	4643      	mov	r3, r8
 800d9e2:	463a      	mov	r2, r7
 800d9e4:	6a21      	ldr	r1, [r4, #32]
 800d9e6:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800d9e8:	4628      	mov	r0, r5
 800d9ea:	47b0      	blx	r6
 800d9ec:	2800      	cmp	r0, #0
 800d9ee:	dc06      	bgt.n	800d9fe <__sflush_r+0xfe>
 800d9f0:	89a3      	ldrh	r3, [r4, #12]
 800d9f2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800d9f6:	81a3      	strh	r3, [r4, #12]
 800d9f8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800d9fc:	e78e      	b.n	800d91c <__sflush_r+0x1c>
 800d9fe:	4407      	add	r7, r0
 800da00:	eba8 0800 	sub.w	r8, r8, r0
 800da04:	e7e9      	b.n	800d9da <__sflush_r+0xda>
 800da06:	bf00      	nop
 800da08:	20400001 	.word	0x20400001

0800da0c <_fflush_r>:
 800da0c:	b538      	push	{r3, r4, r5, lr}
 800da0e:	690b      	ldr	r3, [r1, #16]
 800da10:	4605      	mov	r5, r0
 800da12:	460c      	mov	r4, r1
 800da14:	b1db      	cbz	r3, 800da4e <_fflush_r+0x42>
 800da16:	b118      	cbz	r0, 800da20 <_fflush_r+0x14>
 800da18:	6983      	ldr	r3, [r0, #24]
 800da1a:	b90b      	cbnz	r3, 800da20 <_fflush_r+0x14>
 800da1c:	f000 f860 	bl	800dae0 <__sinit>
 800da20:	4b0c      	ldr	r3, [pc, #48]	; (800da54 <_fflush_r+0x48>)
 800da22:	429c      	cmp	r4, r3
 800da24:	d109      	bne.n	800da3a <_fflush_r+0x2e>
 800da26:	686c      	ldr	r4, [r5, #4]
 800da28:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800da2c:	b17b      	cbz	r3, 800da4e <_fflush_r+0x42>
 800da2e:	4621      	mov	r1, r4
 800da30:	4628      	mov	r0, r5
 800da32:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800da36:	f7ff bf63 	b.w	800d900 <__sflush_r>
 800da3a:	4b07      	ldr	r3, [pc, #28]	; (800da58 <_fflush_r+0x4c>)
 800da3c:	429c      	cmp	r4, r3
 800da3e:	d101      	bne.n	800da44 <_fflush_r+0x38>
 800da40:	68ac      	ldr	r4, [r5, #8]
 800da42:	e7f1      	b.n	800da28 <_fflush_r+0x1c>
 800da44:	4b05      	ldr	r3, [pc, #20]	; (800da5c <_fflush_r+0x50>)
 800da46:	429c      	cmp	r4, r3
 800da48:	bf08      	it	eq
 800da4a:	68ec      	ldreq	r4, [r5, #12]
 800da4c:	e7ec      	b.n	800da28 <_fflush_r+0x1c>
 800da4e:	2000      	movs	r0, #0
 800da50:	bd38      	pop	{r3, r4, r5, pc}
 800da52:	bf00      	nop
 800da54:	0800f248 	.word	0x0800f248
 800da58:	0800f268 	.word	0x0800f268
 800da5c:	0800f228 	.word	0x0800f228

0800da60 <std>:
 800da60:	2300      	movs	r3, #0
 800da62:	b510      	push	{r4, lr}
 800da64:	4604      	mov	r4, r0
 800da66:	e9c0 3300 	strd	r3, r3, [r0]
 800da6a:	6083      	str	r3, [r0, #8]
 800da6c:	8181      	strh	r1, [r0, #12]
 800da6e:	6643      	str	r3, [r0, #100]	; 0x64
 800da70:	81c2      	strh	r2, [r0, #14]
 800da72:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800da76:	6183      	str	r3, [r0, #24]
 800da78:	4619      	mov	r1, r3
 800da7a:	2208      	movs	r2, #8
 800da7c:	305c      	adds	r0, #92	; 0x5c
 800da7e:	f7fe fb2f 	bl	800c0e0 <memset>
 800da82:	4b05      	ldr	r3, [pc, #20]	; (800da98 <std+0x38>)
 800da84:	6263      	str	r3, [r4, #36]	; 0x24
 800da86:	4b05      	ldr	r3, [pc, #20]	; (800da9c <std+0x3c>)
 800da88:	62a3      	str	r3, [r4, #40]	; 0x28
 800da8a:	4b05      	ldr	r3, [pc, #20]	; (800daa0 <std+0x40>)
 800da8c:	62e3      	str	r3, [r4, #44]	; 0x2c
 800da8e:	4b05      	ldr	r3, [pc, #20]	; (800daa4 <std+0x44>)
 800da90:	6224      	str	r4, [r4, #32]
 800da92:	6323      	str	r3, [r4, #48]	; 0x30
 800da94:	bd10      	pop	{r4, pc}
 800da96:	bf00      	nop
 800da98:	0800e6e5 	.word	0x0800e6e5
 800da9c:	0800e707 	.word	0x0800e707
 800daa0:	0800e73f 	.word	0x0800e73f
 800daa4:	0800e763 	.word	0x0800e763

0800daa8 <_cleanup_r>:
 800daa8:	4901      	ldr	r1, [pc, #4]	; (800dab0 <_cleanup_r+0x8>)
 800daaa:	f000 b885 	b.w	800dbb8 <_fwalk_reent>
 800daae:	bf00      	nop
 800dab0:	0800da0d 	.word	0x0800da0d

0800dab4 <__sfmoreglue>:
 800dab4:	b570      	push	{r4, r5, r6, lr}
 800dab6:	1e4a      	subs	r2, r1, #1
 800dab8:	2568      	movs	r5, #104	; 0x68
 800daba:	4355      	muls	r5, r2
 800dabc:	460e      	mov	r6, r1
 800dabe:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800dac2:	f000 fc53 	bl	800e36c <_malloc_r>
 800dac6:	4604      	mov	r4, r0
 800dac8:	b140      	cbz	r0, 800dadc <__sfmoreglue+0x28>
 800daca:	2100      	movs	r1, #0
 800dacc:	e9c0 1600 	strd	r1, r6, [r0]
 800dad0:	300c      	adds	r0, #12
 800dad2:	60a0      	str	r0, [r4, #8]
 800dad4:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800dad8:	f7fe fb02 	bl	800c0e0 <memset>
 800dadc:	4620      	mov	r0, r4
 800dade:	bd70      	pop	{r4, r5, r6, pc}

0800dae0 <__sinit>:
 800dae0:	6983      	ldr	r3, [r0, #24]
 800dae2:	b510      	push	{r4, lr}
 800dae4:	4604      	mov	r4, r0
 800dae6:	bb33      	cbnz	r3, 800db36 <__sinit+0x56>
 800dae8:	e9c0 3312 	strd	r3, r3, [r0, #72]	; 0x48
 800daec:	6503      	str	r3, [r0, #80]	; 0x50
 800daee:	4b12      	ldr	r3, [pc, #72]	; (800db38 <__sinit+0x58>)
 800daf0:	4a12      	ldr	r2, [pc, #72]	; (800db3c <__sinit+0x5c>)
 800daf2:	681b      	ldr	r3, [r3, #0]
 800daf4:	6282      	str	r2, [r0, #40]	; 0x28
 800daf6:	4298      	cmp	r0, r3
 800daf8:	bf04      	itt	eq
 800dafa:	2301      	moveq	r3, #1
 800dafc:	6183      	streq	r3, [r0, #24]
 800dafe:	f000 f81f 	bl	800db40 <__sfp>
 800db02:	6060      	str	r0, [r4, #4]
 800db04:	4620      	mov	r0, r4
 800db06:	f000 f81b 	bl	800db40 <__sfp>
 800db0a:	60a0      	str	r0, [r4, #8]
 800db0c:	4620      	mov	r0, r4
 800db0e:	f000 f817 	bl	800db40 <__sfp>
 800db12:	2200      	movs	r2, #0
 800db14:	60e0      	str	r0, [r4, #12]
 800db16:	2104      	movs	r1, #4
 800db18:	6860      	ldr	r0, [r4, #4]
 800db1a:	f7ff ffa1 	bl	800da60 <std>
 800db1e:	2201      	movs	r2, #1
 800db20:	2109      	movs	r1, #9
 800db22:	68a0      	ldr	r0, [r4, #8]
 800db24:	f7ff ff9c 	bl	800da60 <std>
 800db28:	2202      	movs	r2, #2
 800db2a:	2112      	movs	r1, #18
 800db2c:	68e0      	ldr	r0, [r4, #12]
 800db2e:	f7ff ff97 	bl	800da60 <std>
 800db32:	2301      	movs	r3, #1
 800db34:	61a3      	str	r3, [r4, #24]
 800db36:	bd10      	pop	{r4, pc}
 800db38:	0800f1e0 	.word	0x0800f1e0
 800db3c:	0800daa9 	.word	0x0800daa9

0800db40 <__sfp>:
 800db40:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800db42:	4b1b      	ldr	r3, [pc, #108]	; (800dbb0 <__sfp+0x70>)
 800db44:	681e      	ldr	r6, [r3, #0]
 800db46:	69b3      	ldr	r3, [r6, #24]
 800db48:	4607      	mov	r7, r0
 800db4a:	b913      	cbnz	r3, 800db52 <__sfp+0x12>
 800db4c:	4630      	mov	r0, r6
 800db4e:	f7ff ffc7 	bl	800dae0 <__sinit>
 800db52:	3648      	adds	r6, #72	; 0x48
 800db54:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800db58:	3b01      	subs	r3, #1
 800db5a:	d503      	bpl.n	800db64 <__sfp+0x24>
 800db5c:	6833      	ldr	r3, [r6, #0]
 800db5e:	b133      	cbz	r3, 800db6e <__sfp+0x2e>
 800db60:	6836      	ldr	r6, [r6, #0]
 800db62:	e7f7      	b.n	800db54 <__sfp+0x14>
 800db64:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800db68:	b16d      	cbz	r5, 800db86 <__sfp+0x46>
 800db6a:	3468      	adds	r4, #104	; 0x68
 800db6c:	e7f4      	b.n	800db58 <__sfp+0x18>
 800db6e:	2104      	movs	r1, #4
 800db70:	4638      	mov	r0, r7
 800db72:	f7ff ff9f 	bl	800dab4 <__sfmoreglue>
 800db76:	6030      	str	r0, [r6, #0]
 800db78:	2800      	cmp	r0, #0
 800db7a:	d1f1      	bne.n	800db60 <__sfp+0x20>
 800db7c:	230c      	movs	r3, #12
 800db7e:	603b      	str	r3, [r7, #0]
 800db80:	4604      	mov	r4, r0
 800db82:	4620      	mov	r0, r4
 800db84:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800db86:	4b0b      	ldr	r3, [pc, #44]	; (800dbb4 <__sfp+0x74>)
 800db88:	6665      	str	r5, [r4, #100]	; 0x64
 800db8a:	e9c4 5500 	strd	r5, r5, [r4]
 800db8e:	60a5      	str	r5, [r4, #8]
 800db90:	e9c4 3503 	strd	r3, r5, [r4, #12]
 800db94:	e9c4 5505 	strd	r5, r5, [r4, #20]
 800db98:	2208      	movs	r2, #8
 800db9a:	4629      	mov	r1, r5
 800db9c:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800dba0:	f7fe fa9e 	bl	800c0e0 <memset>
 800dba4:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800dba8:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800dbac:	e7e9      	b.n	800db82 <__sfp+0x42>
 800dbae:	bf00      	nop
 800dbb0:	0800f1e0 	.word	0x0800f1e0
 800dbb4:	ffff0001 	.word	0xffff0001

0800dbb8 <_fwalk_reent>:
 800dbb8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800dbbc:	4680      	mov	r8, r0
 800dbbe:	4689      	mov	r9, r1
 800dbc0:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800dbc4:	2600      	movs	r6, #0
 800dbc6:	b914      	cbnz	r4, 800dbce <_fwalk_reent+0x16>
 800dbc8:	4630      	mov	r0, r6
 800dbca:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800dbce:	e9d4 7501 	ldrd	r7, r5, [r4, #4]
 800dbd2:	3f01      	subs	r7, #1
 800dbd4:	d501      	bpl.n	800dbda <_fwalk_reent+0x22>
 800dbd6:	6824      	ldr	r4, [r4, #0]
 800dbd8:	e7f5      	b.n	800dbc6 <_fwalk_reent+0xe>
 800dbda:	89ab      	ldrh	r3, [r5, #12]
 800dbdc:	2b01      	cmp	r3, #1
 800dbde:	d907      	bls.n	800dbf0 <_fwalk_reent+0x38>
 800dbe0:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800dbe4:	3301      	adds	r3, #1
 800dbe6:	d003      	beq.n	800dbf0 <_fwalk_reent+0x38>
 800dbe8:	4629      	mov	r1, r5
 800dbea:	4640      	mov	r0, r8
 800dbec:	47c8      	blx	r9
 800dbee:	4306      	orrs	r6, r0
 800dbf0:	3568      	adds	r5, #104	; 0x68
 800dbf2:	e7ee      	b.n	800dbd2 <_fwalk_reent+0x1a>

0800dbf4 <_localeconv_r>:
 800dbf4:	4b04      	ldr	r3, [pc, #16]	; (800dc08 <_localeconv_r+0x14>)
 800dbf6:	681b      	ldr	r3, [r3, #0]
 800dbf8:	6a18      	ldr	r0, [r3, #32]
 800dbfa:	4b04      	ldr	r3, [pc, #16]	; (800dc0c <_localeconv_r+0x18>)
 800dbfc:	2800      	cmp	r0, #0
 800dbfe:	bf08      	it	eq
 800dc00:	4618      	moveq	r0, r3
 800dc02:	30f0      	adds	r0, #240	; 0xf0
 800dc04:	4770      	bx	lr
 800dc06:	bf00      	nop
 800dc08:	20001434 	.word	0x20001434
 800dc0c:	20001498 	.word	0x20001498

0800dc10 <__swhatbuf_r>:
 800dc10:	b570      	push	{r4, r5, r6, lr}
 800dc12:	460e      	mov	r6, r1
 800dc14:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800dc18:	2900      	cmp	r1, #0
 800dc1a:	b096      	sub	sp, #88	; 0x58
 800dc1c:	4614      	mov	r4, r2
 800dc1e:	461d      	mov	r5, r3
 800dc20:	da07      	bge.n	800dc32 <__swhatbuf_r+0x22>
 800dc22:	2300      	movs	r3, #0
 800dc24:	602b      	str	r3, [r5, #0]
 800dc26:	89b3      	ldrh	r3, [r6, #12]
 800dc28:	061a      	lsls	r2, r3, #24
 800dc2a:	d410      	bmi.n	800dc4e <__swhatbuf_r+0x3e>
 800dc2c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800dc30:	e00e      	b.n	800dc50 <__swhatbuf_r+0x40>
 800dc32:	466a      	mov	r2, sp
 800dc34:	f000 fdbc 	bl	800e7b0 <_fstat_r>
 800dc38:	2800      	cmp	r0, #0
 800dc3a:	dbf2      	blt.n	800dc22 <__swhatbuf_r+0x12>
 800dc3c:	9a01      	ldr	r2, [sp, #4]
 800dc3e:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800dc42:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800dc46:	425a      	negs	r2, r3
 800dc48:	415a      	adcs	r2, r3
 800dc4a:	602a      	str	r2, [r5, #0]
 800dc4c:	e7ee      	b.n	800dc2c <__swhatbuf_r+0x1c>
 800dc4e:	2340      	movs	r3, #64	; 0x40
 800dc50:	2000      	movs	r0, #0
 800dc52:	6023      	str	r3, [r4, #0]
 800dc54:	b016      	add	sp, #88	; 0x58
 800dc56:	bd70      	pop	{r4, r5, r6, pc}

0800dc58 <__smakebuf_r>:
 800dc58:	898b      	ldrh	r3, [r1, #12]
 800dc5a:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800dc5c:	079d      	lsls	r5, r3, #30
 800dc5e:	4606      	mov	r6, r0
 800dc60:	460c      	mov	r4, r1
 800dc62:	d507      	bpl.n	800dc74 <__smakebuf_r+0x1c>
 800dc64:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800dc68:	6023      	str	r3, [r4, #0]
 800dc6a:	6123      	str	r3, [r4, #16]
 800dc6c:	2301      	movs	r3, #1
 800dc6e:	6163      	str	r3, [r4, #20]
 800dc70:	b002      	add	sp, #8
 800dc72:	bd70      	pop	{r4, r5, r6, pc}
 800dc74:	ab01      	add	r3, sp, #4
 800dc76:	466a      	mov	r2, sp
 800dc78:	f7ff ffca 	bl	800dc10 <__swhatbuf_r>
 800dc7c:	9900      	ldr	r1, [sp, #0]
 800dc7e:	4605      	mov	r5, r0
 800dc80:	4630      	mov	r0, r6
 800dc82:	f000 fb73 	bl	800e36c <_malloc_r>
 800dc86:	b948      	cbnz	r0, 800dc9c <__smakebuf_r+0x44>
 800dc88:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800dc8c:	059a      	lsls	r2, r3, #22
 800dc8e:	d4ef      	bmi.n	800dc70 <__smakebuf_r+0x18>
 800dc90:	f023 0303 	bic.w	r3, r3, #3
 800dc94:	f043 0302 	orr.w	r3, r3, #2
 800dc98:	81a3      	strh	r3, [r4, #12]
 800dc9a:	e7e3      	b.n	800dc64 <__smakebuf_r+0xc>
 800dc9c:	4b0d      	ldr	r3, [pc, #52]	; (800dcd4 <__smakebuf_r+0x7c>)
 800dc9e:	62b3      	str	r3, [r6, #40]	; 0x28
 800dca0:	89a3      	ldrh	r3, [r4, #12]
 800dca2:	6020      	str	r0, [r4, #0]
 800dca4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800dca8:	81a3      	strh	r3, [r4, #12]
 800dcaa:	9b00      	ldr	r3, [sp, #0]
 800dcac:	6163      	str	r3, [r4, #20]
 800dcae:	9b01      	ldr	r3, [sp, #4]
 800dcb0:	6120      	str	r0, [r4, #16]
 800dcb2:	b15b      	cbz	r3, 800dccc <__smakebuf_r+0x74>
 800dcb4:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800dcb8:	4630      	mov	r0, r6
 800dcba:	f000 fd8b 	bl	800e7d4 <_isatty_r>
 800dcbe:	b128      	cbz	r0, 800dccc <__smakebuf_r+0x74>
 800dcc0:	89a3      	ldrh	r3, [r4, #12]
 800dcc2:	f023 0303 	bic.w	r3, r3, #3
 800dcc6:	f043 0301 	orr.w	r3, r3, #1
 800dcca:	81a3      	strh	r3, [r4, #12]
 800dccc:	89a3      	ldrh	r3, [r4, #12]
 800dcce:	431d      	orrs	r5, r3
 800dcd0:	81a5      	strh	r5, [r4, #12]
 800dcd2:	e7cd      	b.n	800dc70 <__smakebuf_r+0x18>
 800dcd4:	0800daa9 	.word	0x0800daa9

0800dcd8 <malloc>:
 800dcd8:	4b02      	ldr	r3, [pc, #8]	; (800dce4 <malloc+0xc>)
 800dcda:	4601      	mov	r1, r0
 800dcdc:	6818      	ldr	r0, [r3, #0]
 800dcde:	f000 bb45 	b.w	800e36c <_malloc_r>
 800dce2:	bf00      	nop
 800dce4:	20001434 	.word	0x20001434

0800dce8 <memcpy>:
 800dce8:	b510      	push	{r4, lr}
 800dcea:	1e43      	subs	r3, r0, #1
 800dcec:	440a      	add	r2, r1
 800dcee:	4291      	cmp	r1, r2
 800dcf0:	d100      	bne.n	800dcf4 <memcpy+0xc>
 800dcf2:	bd10      	pop	{r4, pc}
 800dcf4:	f811 4b01 	ldrb.w	r4, [r1], #1
 800dcf8:	f803 4f01 	strb.w	r4, [r3, #1]!
 800dcfc:	e7f7      	b.n	800dcee <memcpy+0x6>

0800dcfe <_Balloc>:
 800dcfe:	b570      	push	{r4, r5, r6, lr}
 800dd00:	6a45      	ldr	r5, [r0, #36]	; 0x24
 800dd02:	4604      	mov	r4, r0
 800dd04:	460e      	mov	r6, r1
 800dd06:	b93d      	cbnz	r5, 800dd18 <_Balloc+0x1a>
 800dd08:	2010      	movs	r0, #16
 800dd0a:	f7ff ffe5 	bl	800dcd8 <malloc>
 800dd0e:	6260      	str	r0, [r4, #36]	; 0x24
 800dd10:	e9c0 5501 	strd	r5, r5, [r0, #4]
 800dd14:	6005      	str	r5, [r0, #0]
 800dd16:	60c5      	str	r5, [r0, #12]
 800dd18:	6a65      	ldr	r5, [r4, #36]	; 0x24
 800dd1a:	68eb      	ldr	r3, [r5, #12]
 800dd1c:	b183      	cbz	r3, 800dd40 <_Balloc+0x42>
 800dd1e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800dd20:	68db      	ldr	r3, [r3, #12]
 800dd22:	f853 0026 	ldr.w	r0, [r3, r6, lsl #2]
 800dd26:	b9b8      	cbnz	r0, 800dd58 <_Balloc+0x5a>
 800dd28:	2101      	movs	r1, #1
 800dd2a:	fa01 f506 	lsl.w	r5, r1, r6
 800dd2e:	1d6a      	adds	r2, r5, #5
 800dd30:	0092      	lsls	r2, r2, #2
 800dd32:	4620      	mov	r0, r4
 800dd34:	f000 fabe 	bl	800e2b4 <_calloc_r>
 800dd38:	b160      	cbz	r0, 800dd54 <_Balloc+0x56>
 800dd3a:	e9c0 6501 	strd	r6, r5, [r0, #4]
 800dd3e:	e00e      	b.n	800dd5e <_Balloc+0x60>
 800dd40:	2221      	movs	r2, #33	; 0x21
 800dd42:	2104      	movs	r1, #4
 800dd44:	4620      	mov	r0, r4
 800dd46:	f000 fab5 	bl	800e2b4 <_calloc_r>
 800dd4a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800dd4c:	60e8      	str	r0, [r5, #12]
 800dd4e:	68db      	ldr	r3, [r3, #12]
 800dd50:	2b00      	cmp	r3, #0
 800dd52:	d1e4      	bne.n	800dd1e <_Balloc+0x20>
 800dd54:	2000      	movs	r0, #0
 800dd56:	bd70      	pop	{r4, r5, r6, pc}
 800dd58:	6802      	ldr	r2, [r0, #0]
 800dd5a:	f843 2026 	str.w	r2, [r3, r6, lsl #2]
 800dd5e:	2300      	movs	r3, #0
 800dd60:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800dd64:	e7f7      	b.n	800dd56 <_Balloc+0x58>

0800dd66 <_Bfree>:
 800dd66:	b570      	push	{r4, r5, r6, lr}
 800dd68:	6a44      	ldr	r4, [r0, #36]	; 0x24
 800dd6a:	4606      	mov	r6, r0
 800dd6c:	460d      	mov	r5, r1
 800dd6e:	b93c      	cbnz	r4, 800dd80 <_Bfree+0x1a>
 800dd70:	2010      	movs	r0, #16
 800dd72:	f7ff ffb1 	bl	800dcd8 <malloc>
 800dd76:	6270      	str	r0, [r6, #36]	; 0x24
 800dd78:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800dd7c:	6004      	str	r4, [r0, #0]
 800dd7e:	60c4      	str	r4, [r0, #12]
 800dd80:	b13d      	cbz	r5, 800dd92 <_Bfree+0x2c>
 800dd82:	6a73      	ldr	r3, [r6, #36]	; 0x24
 800dd84:	686a      	ldr	r2, [r5, #4]
 800dd86:	68db      	ldr	r3, [r3, #12]
 800dd88:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800dd8c:	6029      	str	r1, [r5, #0]
 800dd8e:	f843 5022 	str.w	r5, [r3, r2, lsl #2]
 800dd92:	bd70      	pop	{r4, r5, r6, pc}

0800dd94 <__multadd>:
 800dd94:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800dd98:	690d      	ldr	r5, [r1, #16]
 800dd9a:	461f      	mov	r7, r3
 800dd9c:	4606      	mov	r6, r0
 800dd9e:	460c      	mov	r4, r1
 800dda0:	f101 0c14 	add.w	ip, r1, #20
 800dda4:	2300      	movs	r3, #0
 800dda6:	f8dc 0000 	ldr.w	r0, [ip]
 800ddaa:	b281      	uxth	r1, r0
 800ddac:	fb02 7101 	mla	r1, r2, r1, r7
 800ddb0:	0c0f      	lsrs	r7, r1, #16
 800ddb2:	0c00      	lsrs	r0, r0, #16
 800ddb4:	fb02 7000 	mla	r0, r2, r0, r7
 800ddb8:	b289      	uxth	r1, r1
 800ddba:	3301      	adds	r3, #1
 800ddbc:	eb01 4100 	add.w	r1, r1, r0, lsl #16
 800ddc0:	429d      	cmp	r5, r3
 800ddc2:	ea4f 4710 	mov.w	r7, r0, lsr #16
 800ddc6:	f84c 1b04 	str.w	r1, [ip], #4
 800ddca:	dcec      	bgt.n	800dda6 <__multadd+0x12>
 800ddcc:	b1d7      	cbz	r7, 800de04 <__multadd+0x70>
 800ddce:	68a3      	ldr	r3, [r4, #8]
 800ddd0:	42ab      	cmp	r3, r5
 800ddd2:	dc12      	bgt.n	800ddfa <__multadd+0x66>
 800ddd4:	6861      	ldr	r1, [r4, #4]
 800ddd6:	4630      	mov	r0, r6
 800ddd8:	3101      	adds	r1, #1
 800ddda:	f7ff ff90 	bl	800dcfe <_Balloc>
 800ddde:	6922      	ldr	r2, [r4, #16]
 800dde0:	3202      	adds	r2, #2
 800dde2:	f104 010c 	add.w	r1, r4, #12
 800dde6:	4680      	mov	r8, r0
 800dde8:	0092      	lsls	r2, r2, #2
 800ddea:	300c      	adds	r0, #12
 800ddec:	f7ff ff7c 	bl	800dce8 <memcpy>
 800ddf0:	4621      	mov	r1, r4
 800ddf2:	4630      	mov	r0, r6
 800ddf4:	f7ff ffb7 	bl	800dd66 <_Bfree>
 800ddf8:	4644      	mov	r4, r8
 800ddfa:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800ddfe:	3501      	adds	r5, #1
 800de00:	615f      	str	r7, [r3, #20]
 800de02:	6125      	str	r5, [r4, #16]
 800de04:	4620      	mov	r0, r4
 800de06:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0800de0a <__hi0bits>:
 800de0a:	0c02      	lsrs	r2, r0, #16
 800de0c:	0412      	lsls	r2, r2, #16
 800de0e:	4603      	mov	r3, r0
 800de10:	b9b2      	cbnz	r2, 800de40 <__hi0bits+0x36>
 800de12:	0403      	lsls	r3, r0, #16
 800de14:	2010      	movs	r0, #16
 800de16:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
 800de1a:	bf04      	itt	eq
 800de1c:	021b      	lsleq	r3, r3, #8
 800de1e:	3008      	addeq	r0, #8
 800de20:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
 800de24:	bf04      	itt	eq
 800de26:	011b      	lsleq	r3, r3, #4
 800de28:	3004      	addeq	r0, #4
 800de2a:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
 800de2e:	bf04      	itt	eq
 800de30:	009b      	lsleq	r3, r3, #2
 800de32:	3002      	addeq	r0, #2
 800de34:	2b00      	cmp	r3, #0
 800de36:	db06      	blt.n	800de46 <__hi0bits+0x3c>
 800de38:	005b      	lsls	r3, r3, #1
 800de3a:	d503      	bpl.n	800de44 <__hi0bits+0x3a>
 800de3c:	3001      	adds	r0, #1
 800de3e:	4770      	bx	lr
 800de40:	2000      	movs	r0, #0
 800de42:	e7e8      	b.n	800de16 <__hi0bits+0xc>
 800de44:	2020      	movs	r0, #32
 800de46:	4770      	bx	lr

0800de48 <__lo0bits>:
 800de48:	6803      	ldr	r3, [r0, #0]
 800de4a:	f013 0207 	ands.w	r2, r3, #7
 800de4e:	4601      	mov	r1, r0
 800de50:	d00b      	beq.n	800de6a <__lo0bits+0x22>
 800de52:	07da      	lsls	r2, r3, #31
 800de54:	d423      	bmi.n	800de9e <__lo0bits+0x56>
 800de56:	0798      	lsls	r0, r3, #30
 800de58:	bf49      	itett	mi
 800de5a:	085b      	lsrmi	r3, r3, #1
 800de5c:	089b      	lsrpl	r3, r3, #2
 800de5e:	2001      	movmi	r0, #1
 800de60:	600b      	strmi	r3, [r1, #0]
 800de62:	bf5c      	itt	pl
 800de64:	600b      	strpl	r3, [r1, #0]
 800de66:	2002      	movpl	r0, #2
 800de68:	4770      	bx	lr
 800de6a:	b298      	uxth	r0, r3
 800de6c:	b9a8      	cbnz	r0, 800de9a <__lo0bits+0x52>
 800de6e:	0c1b      	lsrs	r3, r3, #16
 800de70:	2010      	movs	r0, #16
 800de72:	f013 0fff 	tst.w	r3, #255	; 0xff
 800de76:	bf04      	itt	eq
 800de78:	0a1b      	lsreq	r3, r3, #8
 800de7a:	3008      	addeq	r0, #8
 800de7c:	071a      	lsls	r2, r3, #28
 800de7e:	bf04      	itt	eq
 800de80:	091b      	lsreq	r3, r3, #4
 800de82:	3004      	addeq	r0, #4
 800de84:	079a      	lsls	r2, r3, #30
 800de86:	bf04      	itt	eq
 800de88:	089b      	lsreq	r3, r3, #2
 800de8a:	3002      	addeq	r0, #2
 800de8c:	07da      	lsls	r2, r3, #31
 800de8e:	d402      	bmi.n	800de96 <__lo0bits+0x4e>
 800de90:	085b      	lsrs	r3, r3, #1
 800de92:	d006      	beq.n	800dea2 <__lo0bits+0x5a>
 800de94:	3001      	adds	r0, #1
 800de96:	600b      	str	r3, [r1, #0]
 800de98:	4770      	bx	lr
 800de9a:	4610      	mov	r0, r2
 800de9c:	e7e9      	b.n	800de72 <__lo0bits+0x2a>
 800de9e:	2000      	movs	r0, #0
 800dea0:	4770      	bx	lr
 800dea2:	2020      	movs	r0, #32
 800dea4:	4770      	bx	lr

0800dea6 <__i2b>:
 800dea6:	b510      	push	{r4, lr}
 800dea8:	460c      	mov	r4, r1
 800deaa:	2101      	movs	r1, #1
 800deac:	f7ff ff27 	bl	800dcfe <_Balloc>
 800deb0:	2201      	movs	r2, #1
 800deb2:	6144      	str	r4, [r0, #20]
 800deb4:	6102      	str	r2, [r0, #16]
 800deb6:	bd10      	pop	{r4, pc}

0800deb8 <__multiply>:
 800deb8:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800debc:	4614      	mov	r4, r2
 800debe:	690a      	ldr	r2, [r1, #16]
 800dec0:	6923      	ldr	r3, [r4, #16]
 800dec2:	429a      	cmp	r2, r3
 800dec4:	bfb8      	it	lt
 800dec6:	460b      	movlt	r3, r1
 800dec8:	4688      	mov	r8, r1
 800deca:	bfbc      	itt	lt
 800decc:	46a0      	movlt	r8, r4
 800dece:	461c      	movlt	r4, r3
 800ded0:	f8d8 7010 	ldr.w	r7, [r8, #16]
 800ded4:	f8d4 9010 	ldr.w	r9, [r4, #16]
 800ded8:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800dedc:	f8d8 1004 	ldr.w	r1, [r8, #4]
 800dee0:	eb07 0609 	add.w	r6, r7, r9
 800dee4:	42b3      	cmp	r3, r6
 800dee6:	bfb8      	it	lt
 800dee8:	3101      	addlt	r1, #1
 800deea:	f7ff ff08 	bl	800dcfe <_Balloc>
 800deee:	f100 0514 	add.w	r5, r0, #20
 800def2:	eb05 0e86 	add.w	lr, r5, r6, lsl #2
 800def6:	462b      	mov	r3, r5
 800def8:	2200      	movs	r2, #0
 800defa:	4573      	cmp	r3, lr
 800defc:	d316      	bcc.n	800df2c <__multiply+0x74>
 800defe:	f104 0214 	add.w	r2, r4, #20
 800df02:	f108 0114 	add.w	r1, r8, #20
 800df06:	eb02 0389 	add.w	r3, r2, r9, lsl #2
 800df0a:	eb01 0787 	add.w	r7, r1, r7, lsl #2
 800df0e:	9300      	str	r3, [sp, #0]
 800df10:	9b00      	ldr	r3, [sp, #0]
 800df12:	9201      	str	r2, [sp, #4]
 800df14:	4293      	cmp	r3, r2
 800df16:	d80c      	bhi.n	800df32 <__multiply+0x7a>
 800df18:	2e00      	cmp	r6, #0
 800df1a:	dd03      	ble.n	800df24 <__multiply+0x6c>
 800df1c:	f85e 3d04 	ldr.w	r3, [lr, #-4]!
 800df20:	2b00      	cmp	r3, #0
 800df22:	d05d      	beq.n	800dfe0 <__multiply+0x128>
 800df24:	6106      	str	r6, [r0, #16]
 800df26:	b003      	add	sp, #12
 800df28:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800df2c:	f843 2b04 	str.w	r2, [r3], #4
 800df30:	e7e3      	b.n	800defa <__multiply+0x42>
 800df32:	f8b2 b000 	ldrh.w	fp, [r2]
 800df36:	f1bb 0f00 	cmp.w	fp, #0
 800df3a:	d023      	beq.n	800df84 <__multiply+0xcc>
 800df3c:	4689      	mov	r9, r1
 800df3e:	46ac      	mov	ip, r5
 800df40:	f04f 0800 	mov.w	r8, #0
 800df44:	f859 4b04 	ldr.w	r4, [r9], #4
 800df48:	f8dc a000 	ldr.w	sl, [ip]
 800df4c:	b2a3      	uxth	r3, r4
 800df4e:	fa1f fa8a 	uxth.w	sl, sl
 800df52:	fb0b a303 	mla	r3, fp, r3, sl
 800df56:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 800df5a:	f8dc 4000 	ldr.w	r4, [ip]
 800df5e:	4443      	add	r3, r8
 800df60:	ea4f 4814 	mov.w	r8, r4, lsr #16
 800df64:	fb0b 840a 	mla	r4, fp, sl, r8
 800df68:	eb04 4413 	add.w	r4, r4, r3, lsr #16
 800df6c:	46e2      	mov	sl, ip
 800df6e:	b29b      	uxth	r3, r3
 800df70:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800df74:	454f      	cmp	r7, r9
 800df76:	ea4f 4814 	mov.w	r8, r4, lsr #16
 800df7a:	f84a 3b04 	str.w	r3, [sl], #4
 800df7e:	d82b      	bhi.n	800dfd8 <__multiply+0x120>
 800df80:	f8cc 8004 	str.w	r8, [ip, #4]
 800df84:	9b01      	ldr	r3, [sp, #4]
 800df86:	f8b3 a002 	ldrh.w	sl, [r3, #2]
 800df8a:	3204      	adds	r2, #4
 800df8c:	f1ba 0f00 	cmp.w	sl, #0
 800df90:	d020      	beq.n	800dfd4 <__multiply+0x11c>
 800df92:	682b      	ldr	r3, [r5, #0]
 800df94:	4689      	mov	r9, r1
 800df96:	46a8      	mov	r8, r5
 800df98:	f04f 0b00 	mov.w	fp, #0
 800df9c:	f8b9 c000 	ldrh.w	ip, [r9]
 800dfa0:	f8b8 4002 	ldrh.w	r4, [r8, #2]
 800dfa4:	fb0a 440c 	mla	r4, sl, ip, r4
 800dfa8:	445c      	add	r4, fp
 800dfaa:	46c4      	mov	ip, r8
 800dfac:	b29b      	uxth	r3, r3
 800dfae:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800dfb2:	f84c 3b04 	str.w	r3, [ip], #4
 800dfb6:	f859 3b04 	ldr.w	r3, [r9], #4
 800dfba:	f8b8 b004 	ldrh.w	fp, [r8, #4]
 800dfbe:	0c1b      	lsrs	r3, r3, #16
 800dfc0:	fb0a b303 	mla	r3, sl, r3, fp
 800dfc4:	eb03 4314 	add.w	r3, r3, r4, lsr #16
 800dfc8:	454f      	cmp	r7, r9
 800dfca:	ea4f 4b13 	mov.w	fp, r3, lsr #16
 800dfce:	d805      	bhi.n	800dfdc <__multiply+0x124>
 800dfd0:	f8c8 3004 	str.w	r3, [r8, #4]
 800dfd4:	3504      	adds	r5, #4
 800dfd6:	e79b      	b.n	800df10 <__multiply+0x58>
 800dfd8:	46d4      	mov	ip, sl
 800dfda:	e7b3      	b.n	800df44 <__multiply+0x8c>
 800dfdc:	46e0      	mov	r8, ip
 800dfde:	e7dd      	b.n	800df9c <__multiply+0xe4>
 800dfe0:	3e01      	subs	r6, #1
 800dfe2:	e799      	b.n	800df18 <__multiply+0x60>

0800dfe4 <__pow5mult>:
 800dfe4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800dfe8:	4615      	mov	r5, r2
 800dfea:	f012 0203 	ands.w	r2, r2, #3
 800dfee:	4606      	mov	r6, r0
 800dff0:	460f      	mov	r7, r1
 800dff2:	d007      	beq.n	800e004 <__pow5mult+0x20>
 800dff4:	3a01      	subs	r2, #1
 800dff6:	4c21      	ldr	r4, [pc, #132]	; (800e07c <__pow5mult+0x98>)
 800dff8:	2300      	movs	r3, #0
 800dffa:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800dffe:	f7ff fec9 	bl	800dd94 <__multadd>
 800e002:	4607      	mov	r7, r0
 800e004:	10ad      	asrs	r5, r5, #2
 800e006:	d035      	beq.n	800e074 <__pow5mult+0x90>
 800e008:	6a74      	ldr	r4, [r6, #36]	; 0x24
 800e00a:	b93c      	cbnz	r4, 800e01c <__pow5mult+0x38>
 800e00c:	2010      	movs	r0, #16
 800e00e:	f7ff fe63 	bl	800dcd8 <malloc>
 800e012:	6270      	str	r0, [r6, #36]	; 0x24
 800e014:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800e018:	6004      	str	r4, [r0, #0]
 800e01a:	60c4      	str	r4, [r0, #12]
 800e01c:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 800e020:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800e024:	b94c      	cbnz	r4, 800e03a <__pow5mult+0x56>
 800e026:	f240 2171 	movw	r1, #625	; 0x271
 800e02a:	4630      	mov	r0, r6
 800e02c:	f7ff ff3b 	bl	800dea6 <__i2b>
 800e030:	2300      	movs	r3, #0
 800e032:	f8c8 0008 	str.w	r0, [r8, #8]
 800e036:	4604      	mov	r4, r0
 800e038:	6003      	str	r3, [r0, #0]
 800e03a:	f04f 0800 	mov.w	r8, #0
 800e03e:	07eb      	lsls	r3, r5, #31
 800e040:	d50a      	bpl.n	800e058 <__pow5mult+0x74>
 800e042:	4639      	mov	r1, r7
 800e044:	4622      	mov	r2, r4
 800e046:	4630      	mov	r0, r6
 800e048:	f7ff ff36 	bl	800deb8 <__multiply>
 800e04c:	4639      	mov	r1, r7
 800e04e:	4681      	mov	r9, r0
 800e050:	4630      	mov	r0, r6
 800e052:	f7ff fe88 	bl	800dd66 <_Bfree>
 800e056:	464f      	mov	r7, r9
 800e058:	106d      	asrs	r5, r5, #1
 800e05a:	d00b      	beq.n	800e074 <__pow5mult+0x90>
 800e05c:	6820      	ldr	r0, [r4, #0]
 800e05e:	b938      	cbnz	r0, 800e070 <__pow5mult+0x8c>
 800e060:	4622      	mov	r2, r4
 800e062:	4621      	mov	r1, r4
 800e064:	4630      	mov	r0, r6
 800e066:	f7ff ff27 	bl	800deb8 <__multiply>
 800e06a:	6020      	str	r0, [r4, #0]
 800e06c:	f8c0 8000 	str.w	r8, [r0]
 800e070:	4604      	mov	r4, r0
 800e072:	e7e4      	b.n	800e03e <__pow5mult+0x5a>
 800e074:	4638      	mov	r0, r7
 800e076:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800e07a:	bf00      	nop
 800e07c:	0800f378 	.word	0x0800f378

0800e080 <__lshift>:
 800e080:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800e084:	460c      	mov	r4, r1
 800e086:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800e08a:	6923      	ldr	r3, [r4, #16]
 800e08c:	6849      	ldr	r1, [r1, #4]
 800e08e:	eb0a 0903 	add.w	r9, sl, r3
 800e092:	68a3      	ldr	r3, [r4, #8]
 800e094:	4607      	mov	r7, r0
 800e096:	4616      	mov	r6, r2
 800e098:	f109 0501 	add.w	r5, r9, #1
 800e09c:	42ab      	cmp	r3, r5
 800e09e:	db32      	blt.n	800e106 <__lshift+0x86>
 800e0a0:	4638      	mov	r0, r7
 800e0a2:	f7ff fe2c 	bl	800dcfe <_Balloc>
 800e0a6:	2300      	movs	r3, #0
 800e0a8:	4680      	mov	r8, r0
 800e0aa:	f100 0114 	add.w	r1, r0, #20
 800e0ae:	461a      	mov	r2, r3
 800e0b0:	4553      	cmp	r3, sl
 800e0b2:	db2b      	blt.n	800e10c <__lshift+0x8c>
 800e0b4:	6920      	ldr	r0, [r4, #16]
 800e0b6:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800e0ba:	f104 0314 	add.w	r3, r4, #20
 800e0be:	f016 021f 	ands.w	r2, r6, #31
 800e0c2:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800e0c6:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800e0ca:	d025      	beq.n	800e118 <__lshift+0x98>
 800e0cc:	f1c2 0e20 	rsb	lr, r2, #32
 800e0d0:	2000      	movs	r0, #0
 800e0d2:	681e      	ldr	r6, [r3, #0]
 800e0d4:	468a      	mov	sl, r1
 800e0d6:	4096      	lsls	r6, r2
 800e0d8:	4330      	orrs	r0, r6
 800e0da:	f84a 0b04 	str.w	r0, [sl], #4
 800e0de:	f853 0b04 	ldr.w	r0, [r3], #4
 800e0e2:	459c      	cmp	ip, r3
 800e0e4:	fa20 f00e 	lsr.w	r0, r0, lr
 800e0e8:	d814      	bhi.n	800e114 <__lshift+0x94>
 800e0ea:	6048      	str	r0, [r1, #4]
 800e0ec:	b108      	cbz	r0, 800e0f2 <__lshift+0x72>
 800e0ee:	f109 0502 	add.w	r5, r9, #2
 800e0f2:	3d01      	subs	r5, #1
 800e0f4:	4638      	mov	r0, r7
 800e0f6:	f8c8 5010 	str.w	r5, [r8, #16]
 800e0fa:	4621      	mov	r1, r4
 800e0fc:	f7ff fe33 	bl	800dd66 <_Bfree>
 800e100:	4640      	mov	r0, r8
 800e102:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800e106:	3101      	adds	r1, #1
 800e108:	005b      	lsls	r3, r3, #1
 800e10a:	e7c7      	b.n	800e09c <__lshift+0x1c>
 800e10c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 800e110:	3301      	adds	r3, #1
 800e112:	e7cd      	b.n	800e0b0 <__lshift+0x30>
 800e114:	4651      	mov	r1, sl
 800e116:	e7dc      	b.n	800e0d2 <__lshift+0x52>
 800e118:	3904      	subs	r1, #4
 800e11a:	f853 2b04 	ldr.w	r2, [r3], #4
 800e11e:	f841 2f04 	str.w	r2, [r1, #4]!
 800e122:	459c      	cmp	ip, r3
 800e124:	d8f9      	bhi.n	800e11a <__lshift+0x9a>
 800e126:	e7e4      	b.n	800e0f2 <__lshift+0x72>

0800e128 <__mcmp>:
 800e128:	6903      	ldr	r3, [r0, #16]
 800e12a:	690a      	ldr	r2, [r1, #16]
 800e12c:	1a9b      	subs	r3, r3, r2
 800e12e:	b530      	push	{r4, r5, lr}
 800e130:	d10c      	bne.n	800e14c <__mcmp+0x24>
 800e132:	0092      	lsls	r2, r2, #2
 800e134:	3014      	adds	r0, #20
 800e136:	3114      	adds	r1, #20
 800e138:	1884      	adds	r4, r0, r2
 800e13a:	4411      	add	r1, r2
 800e13c:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 800e140:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 800e144:	4295      	cmp	r5, r2
 800e146:	d003      	beq.n	800e150 <__mcmp+0x28>
 800e148:	d305      	bcc.n	800e156 <__mcmp+0x2e>
 800e14a:	2301      	movs	r3, #1
 800e14c:	4618      	mov	r0, r3
 800e14e:	bd30      	pop	{r4, r5, pc}
 800e150:	42a0      	cmp	r0, r4
 800e152:	d3f3      	bcc.n	800e13c <__mcmp+0x14>
 800e154:	e7fa      	b.n	800e14c <__mcmp+0x24>
 800e156:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800e15a:	e7f7      	b.n	800e14c <__mcmp+0x24>

0800e15c <__mdiff>:
 800e15c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800e160:	460d      	mov	r5, r1
 800e162:	4607      	mov	r7, r0
 800e164:	4611      	mov	r1, r2
 800e166:	4628      	mov	r0, r5
 800e168:	4614      	mov	r4, r2
 800e16a:	f7ff ffdd 	bl	800e128 <__mcmp>
 800e16e:	1e06      	subs	r6, r0, #0
 800e170:	d108      	bne.n	800e184 <__mdiff+0x28>
 800e172:	4631      	mov	r1, r6
 800e174:	4638      	mov	r0, r7
 800e176:	f7ff fdc2 	bl	800dcfe <_Balloc>
 800e17a:	2301      	movs	r3, #1
 800e17c:	e9c0 3604 	strd	r3, r6, [r0, #16]
 800e180:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800e184:	bfa4      	itt	ge
 800e186:	4623      	movge	r3, r4
 800e188:	462c      	movge	r4, r5
 800e18a:	4638      	mov	r0, r7
 800e18c:	6861      	ldr	r1, [r4, #4]
 800e18e:	bfa6      	itte	ge
 800e190:	461d      	movge	r5, r3
 800e192:	2600      	movge	r6, #0
 800e194:	2601      	movlt	r6, #1
 800e196:	f7ff fdb2 	bl	800dcfe <_Balloc>
 800e19a:	692b      	ldr	r3, [r5, #16]
 800e19c:	60c6      	str	r6, [r0, #12]
 800e19e:	6926      	ldr	r6, [r4, #16]
 800e1a0:	f105 0914 	add.w	r9, r5, #20
 800e1a4:	f104 0214 	add.w	r2, r4, #20
 800e1a8:	eb02 0786 	add.w	r7, r2, r6, lsl #2
 800e1ac:	eb09 0883 	add.w	r8, r9, r3, lsl #2
 800e1b0:	f100 0514 	add.w	r5, r0, #20
 800e1b4:	f04f 0e00 	mov.w	lr, #0
 800e1b8:	f852 ab04 	ldr.w	sl, [r2], #4
 800e1bc:	f859 4b04 	ldr.w	r4, [r9], #4
 800e1c0:	fa1e f18a 	uxtah	r1, lr, sl
 800e1c4:	b2a3      	uxth	r3, r4
 800e1c6:	1ac9      	subs	r1, r1, r3
 800e1c8:	0c23      	lsrs	r3, r4, #16
 800e1ca:	ebc3 431a 	rsb	r3, r3, sl, lsr #16
 800e1ce:	eb03 4321 	add.w	r3, r3, r1, asr #16
 800e1d2:	b289      	uxth	r1, r1
 800e1d4:	ea4f 4e23 	mov.w	lr, r3, asr #16
 800e1d8:	45c8      	cmp	r8, r9
 800e1da:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 800e1de:	4694      	mov	ip, r2
 800e1e0:	f845 3b04 	str.w	r3, [r5], #4
 800e1e4:	d8e8      	bhi.n	800e1b8 <__mdiff+0x5c>
 800e1e6:	45bc      	cmp	ip, r7
 800e1e8:	d304      	bcc.n	800e1f4 <__mdiff+0x98>
 800e1ea:	f855 3d04 	ldr.w	r3, [r5, #-4]!
 800e1ee:	b183      	cbz	r3, 800e212 <__mdiff+0xb6>
 800e1f0:	6106      	str	r6, [r0, #16]
 800e1f2:	e7c5      	b.n	800e180 <__mdiff+0x24>
 800e1f4:	f85c 1b04 	ldr.w	r1, [ip], #4
 800e1f8:	fa1e f381 	uxtah	r3, lr, r1
 800e1fc:	141a      	asrs	r2, r3, #16
 800e1fe:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 800e202:	b29b      	uxth	r3, r3
 800e204:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800e208:	ea4f 4e22 	mov.w	lr, r2, asr #16
 800e20c:	f845 3b04 	str.w	r3, [r5], #4
 800e210:	e7e9      	b.n	800e1e6 <__mdiff+0x8a>
 800e212:	3e01      	subs	r6, #1
 800e214:	e7e9      	b.n	800e1ea <__mdiff+0x8e>

0800e216 <__d2b>:
 800e216:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800e21a:	460e      	mov	r6, r1
 800e21c:	2101      	movs	r1, #1
 800e21e:	ec59 8b10 	vmov	r8, r9, d0
 800e222:	4615      	mov	r5, r2
 800e224:	f7ff fd6b 	bl	800dcfe <_Balloc>
 800e228:	f3c9 540a 	ubfx	r4, r9, #20, #11
 800e22c:	4607      	mov	r7, r0
 800e22e:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800e232:	bb34      	cbnz	r4, 800e282 <__d2b+0x6c>
 800e234:	9301      	str	r3, [sp, #4]
 800e236:	f1b8 0300 	subs.w	r3, r8, #0
 800e23a:	d027      	beq.n	800e28c <__d2b+0x76>
 800e23c:	a802      	add	r0, sp, #8
 800e23e:	f840 3d08 	str.w	r3, [r0, #-8]!
 800e242:	f7ff fe01 	bl	800de48 <__lo0bits>
 800e246:	9900      	ldr	r1, [sp, #0]
 800e248:	b1f0      	cbz	r0, 800e288 <__d2b+0x72>
 800e24a:	9a01      	ldr	r2, [sp, #4]
 800e24c:	f1c0 0320 	rsb	r3, r0, #32
 800e250:	fa02 f303 	lsl.w	r3, r2, r3
 800e254:	430b      	orrs	r3, r1
 800e256:	40c2      	lsrs	r2, r0
 800e258:	617b      	str	r3, [r7, #20]
 800e25a:	9201      	str	r2, [sp, #4]
 800e25c:	9b01      	ldr	r3, [sp, #4]
 800e25e:	61bb      	str	r3, [r7, #24]
 800e260:	2b00      	cmp	r3, #0
 800e262:	bf14      	ite	ne
 800e264:	2102      	movne	r1, #2
 800e266:	2101      	moveq	r1, #1
 800e268:	6139      	str	r1, [r7, #16]
 800e26a:	b1c4      	cbz	r4, 800e29e <__d2b+0x88>
 800e26c:	f2a4 4433 	subw	r4, r4, #1075	; 0x433
 800e270:	4404      	add	r4, r0
 800e272:	6034      	str	r4, [r6, #0]
 800e274:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800e278:	6028      	str	r0, [r5, #0]
 800e27a:	4638      	mov	r0, r7
 800e27c:	b003      	add	sp, #12
 800e27e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800e282:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800e286:	e7d5      	b.n	800e234 <__d2b+0x1e>
 800e288:	6179      	str	r1, [r7, #20]
 800e28a:	e7e7      	b.n	800e25c <__d2b+0x46>
 800e28c:	a801      	add	r0, sp, #4
 800e28e:	f7ff fddb 	bl	800de48 <__lo0bits>
 800e292:	9b01      	ldr	r3, [sp, #4]
 800e294:	617b      	str	r3, [r7, #20]
 800e296:	2101      	movs	r1, #1
 800e298:	6139      	str	r1, [r7, #16]
 800e29a:	3020      	adds	r0, #32
 800e29c:	e7e5      	b.n	800e26a <__d2b+0x54>
 800e29e:	eb07 0381 	add.w	r3, r7, r1, lsl #2
 800e2a2:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800e2a6:	6030      	str	r0, [r6, #0]
 800e2a8:	6918      	ldr	r0, [r3, #16]
 800e2aa:	f7ff fdae 	bl	800de0a <__hi0bits>
 800e2ae:	ebc0 1041 	rsb	r0, r0, r1, lsl #5
 800e2b2:	e7e1      	b.n	800e278 <__d2b+0x62>

0800e2b4 <_calloc_r>:
 800e2b4:	b538      	push	{r3, r4, r5, lr}
 800e2b6:	fb02 f401 	mul.w	r4, r2, r1
 800e2ba:	4621      	mov	r1, r4
 800e2bc:	f000 f856 	bl	800e36c <_malloc_r>
 800e2c0:	4605      	mov	r5, r0
 800e2c2:	b118      	cbz	r0, 800e2cc <_calloc_r+0x18>
 800e2c4:	4622      	mov	r2, r4
 800e2c6:	2100      	movs	r1, #0
 800e2c8:	f7fd ff0a 	bl	800c0e0 <memset>
 800e2cc:	4628      	mov	r0, r5
 800e2ce:	bd38      	pop	{r3, r4, r5, pc}

0800e2d0 <_free_r>:
 800e2d0:	b538      	push	{r3, r4, r5, lr}
 800e2d2:	4605      	mov	r5, r0
 800e2d4:	2900      	cmp	r1, #0
 800e2d6:	d045      	beq.n	800e364 <_free_r+0x94>
 800e2d8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800e2dc:	1f0c      	subs	r4, r1, #4
 800e2de:	2b00      	cmp	r3, #0
 800e2e0:	bfb8      	it	lt
 800e2e2:	18e4      	addlt	r4, r4, r3
 800e2e4:	f000 fac3 	bl	800e86e <__malloc_lock>
 800e2e8:	4a1f      	ldr	r2, [pc, #124]	; (800e368 <_free_r+0x98>)
 800e2ea:	6813      	ldr	r3, [r2, #0]
 800e2ec:	4610      	mov	r0, r2
 800e2ee:	b933      	cbnz	r3, 800e2fe <_free_r+0x2e>
 800e2f0:	6063      	str	r3, [r4, #4]
 800e2f2:	6014      	str	r4, [r2, #0]
 800e2f4:	4628      	mov	r0, r5
 800e2f6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800e2fa:	f000 bab9 	b.w	800e870 <__malloc_unlock>
 800e2fe:	42a3      	cmp	r3, r4
 800e300:	d90c      	bls.n	800e31c <_free_r+0x4c>
 800e302:	6821      	ldr	r1, [r4, #0]
 800e304:	1862      	adds	r2, r4, r1
 800e306:	4293      	cmp	r3, r2
 800e308:	bf04      	itt	eq
 800e30a:	681a      	ldreq	r2, [r3, #0]
 800e30c:	685b      	ldreq	r3, [r3, #4]
 800e30e:	6063      	str	r3, [r4, #4]
 800e310:	bf04      	itt	eq
 800e312:	1852      	addeq	r2, r2, r1
 800e314:	6022      	streq	r2, [r4, #0]
 800e316:	6004      	str	r4, [r0, #0]
 800e318:	e7ec      	b.n	800e2f4 <_free_r+0x24>
 800e31a:	4613      	mov	r3, r2
 800e31c:	685a      	ldr	r2, [r3, #4]
 800e31e:	b10a      	cbz	r2, 800e324 <_free_r+0x54>
 800e320:	42a2      	cmp	r2, r4
 800e322:	d9fa      	bls.n	800e31a <_free_r+0x4a>
 800e324:	6819      	ldr	r1, [r3, #0]
 800e326:	1858      	adds	r0, r3, r1
 800e328:	42a0      	cmp	r0, r4
 800e32a:	d10b      	bne.n	800e344 <_free_r+0x74>
 800e32c:	6820      	ldr	r0, [r4, #0]
 800e32e:	4401      	add	r1, r0
 800e330:	1858      	adds	r0, r3, r1
 800e332:	4282      	cmp	r2, r0
 800e334:	6019      	str	r1, [r3, #0]
 800e336:	d1dd      	bne.n	800e2f4 <_free_r+0x24>
 800e338:	6810      	ldr	r0, [r2, #0]
 800e33a:	6852      	ldr	r2, [r2, #4]
 800e33c:	605a      	str	r2, [r3, #4]
 800e33e:	4401      	add	r1, r0
 800e340:	6019      	str	r1, [r3, #0]
 800e342:	e7d7      	b.n	800e2f4 <_free_r+0x24>
 800e344:	d902      	bls.n	800e34c <_free_r+0x7c>
 800e346:	230c      	movs	r3, #12
 800e348:	602b      	str	r3, [r5, #0]
 800e34a:	e7d3      	b.n	800e2f4 <_free_r+0x24>
 800e34c:	6820      	ldr	r0, [r4, #0]
 800e34e:	1821      	adds	r1, r4, r0
 800e350:	428a      	cmp	r2, r1
 800e352:	bf04      	itt	eq
 800e354:	6811      	ldreq	r1, [r2, #0]
 800e356:	6852      	ldreq	r2, [r2, #4]
 800e358:	6062      	str	r2, [r4, #4]
 800e35a:	bf04      	itt	eq
 800e35c:	1809      	addeq	r1, r1, r0
 800e35e:	6021      	streq	r1, [r4, #0]
 800e360:	605c      	str	r4, [r3, #4]
 800e362:	e7c7      	b.n	800e2f4 <_free_r+0x24>
 800e364:	bd38      	pop	{r3, r4, r5, pc}
 800e366:	bf00      	nop
 800e368:	20001660 	.word	0x20001660

0800e36c <_malloc_r>:
 800e36c:	b570      	push	{r4, r5, r6, lr}
 800e36e:	1ccd      	adds	r5, r1, #3
 800e370:	f025 0503 	bic.w	r5, r5, #3
 800e374:	3508      	adds	r5, #8
 800e376:	2d0c      	cmp	r5, #12
 800e378:	bf38      	it	cc
 800e37a:	250c      	movcc	r5, #12
 800e37c:	2d00      	cmp	r5, #0
 800e37e:	4606      	mov	r6, r0
 800e380:	db01      	blt.n	800e386 <_malloc_r+0x1a>
 800e382:	42a9      	cmp	r1, r5
 800e384:	d903      	bls.n	800e38e <_malloc_r+0x22>
 800e386:	230c      	movs	r3, #12
 800e388:	6033      	str	r3, [r6, #0]
 800e38a:	2000      	movs	r0, #0
 800e38c:	bd70      	pop	{r4, r5, r6, pc}
 800e38e:	f000 fa6e 	bl	800e86e <__malloc_lock>
 800e392:	4a21      	ldr	r2, [pc, #132]	; (800e418 <_malloc_r+0xac>)
 800e394:	6814      	ldr	r4, [r2, #0]
 800e396:	4621      	mov	r1, r4
 800e398:	b991      	cbnz	r1, 800e3c0 <_malloc_r+0x54>
 800e39a:	4c20      	ldr	r4, [pc, #128]	; (800e41c <_malloc_r+0xb0>)
 800e39c:	6823      	ldr	r3, [r4, #0]
 800e39e:	b91b      	cbnz	r3, 800e3a8 <_malloc_r+0x3c>
 800e3a0:	4630      	mov	r0, r6
 800e3a2:	f000 f98f 	bl	800e6c4 <_sbrk_r>
 800e3a6:	6020      	str	r0, [r4, #0]
 800e3a8:	4629      	mov	r1, r5
 800e3aa:	4630      	mov	r0, r6
 800e3ac:	f000 f98a 	bl	800e6c4 <_sbrk_r>
 800e3b0:	1c43      	adds	r3, r0, #1
 800e3b2:	d124      	bne.n	800e3fe <_malloc_r+0x92>
 800e3b4:	230c      	movs	r3, #12
 800e3b6:	6033      	str	r3, [r6, #0]
 800e3b8:	4630      	mov	r0, r6
 800e3ba:	f000 fa59 	bl	800e870 <__malloc_unlock>
 800e3be:	e7e4      	b.n	800e38a <_malloc_r+0x1e>
 800e3c0:	680b      	ldr	r3, [r1, #0]
 800e3c2:	1b5b      	subs	r3, r3, r5
 800e3c4:	d418      	bmi.n	800e3f8 <_malloc_r+0x8c>
 800e3c6:	2b0b      	cmp	r3, #11
 800e3c8:	d90f      	bls.n	800e3ea <_malloc_r+0x7e>
 800e3ca:	600b      	str	r3, [r1, #0]
 800e3cc:	50cd      	str	r5, [r1, r3]
 800e3ce:	18cc      	adds	r4, r1, r3
 800e3d0:	4630      	mov	r0, r6
 800e3d2:	f000 fa4d 	bl	800e870 <__malloc_unlock>
 800e3d6:	f104 000b 	add.w	r0, r4, #11
 800e3da:	1d23      	adds	r3, r4, #4
 800e3dc:	f020 0007 	bic.w	r0, r0, #7
 800e3e0:	1ac3      	subs	r3, r0, r3
 800e3e2:	d0d3      	beq.n	800e38c <_malloc_r+0x20>
 800e3e4:	425a      	negs	r2, r3
 800e3e6:	50e2      	str	r2, [r4, r3]
 800e3e8:	e7d0      	b.n	800e38c <_malloc_r+0x20>
 800e3ea:	428c      	cmp	r4, r1
 800e3ec:	684b      	ldr	r3, [r1, #4]
 800e3ee:	bf16      	itet	ne
 800e3f0:	6063      	strne	r3, [r4, #4]
 800e3f2:	6013      	streq	r3, [r2, #0]
 800e3f4:	460c      	movne	r4, r1
 800e3f6:	e7eb      	b.n	800e3d0 <_malloc_r+0x64>
 800e3f8:	460c      	mov	r4, r1
 800e3fa:	6849      	ldr	r1, [r1, #4]
 800e3fc:	e7cc      	b.n	800e398 <_malloc_r+0x2c>
 800e3fe:	1cc4      	adds	r4, r0, #3
 800e400:	f024 0403 	bic.w	r4, r4, #3
 800e404:	42a0      	cmp	r0, r4
 800e406:	d005      	beq.n	800e414 <_malloc_r+0xa8>
 800e408:	1a21      	subs	r1, r4, r0
 800e40a:	4630      	mov	r0, r6
 800e40c:	f000 f95a 	bl	800e6c4 <_sbrk_r>
 800e410:	3001      	adds	r0, #1
 800e412:	d0cf      	beq.n	800e3b4 <_malloc_r+0x48>
 800e414:	6025      	str	r5, [r4, #0]
 800e416:	e7db      	b.n	800e3d0 <_malloc_r+0x64>
 800e418:	20001660 	.word	0x20001660
 800e41c:	20001664 	.word	0x20001664

0800e420 <__ssputs_r>:
 800e420:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800e424:	688e      	ldr	r6, [r1, #8]
 800e426:	429e      	cmp	r6, r3
 800e428:	4682      	mov	sl, r0
 800e42a:	460c      	mov	r4, r1
 800e42c:	4690      	mov	r8, r2
 800e42e:	4699      	mov	r9, r3
 800e430:	d837      	bhi.n	800e4a2 <__ssputs_r+0x82>
 800e432:	898a      	ldrh	r2, [r1, #12]
 800e434:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800e438:	d031      	beq.n	800e49e <__ssputs_r+0x7e>
 800e43a:	6825      	ldr	r5, [r4, #0]
 800e43c:	6909      	ldr	r1, [r1, #16]
 800e43e:	1a6f      	subs	r7, r5, r1
 800e440:	6965      	ldr	r5, [r4, #20]
 800e442:	2302      	movs	r3, #2
 800e444:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800e448:	fb95 f5f3 	sdiv	r5, r5, r3
 800e44c:	f109 0301 	add.w	r3, r9, #1
 800e450:	443b      	add	r3, r7
 800e452:	429d      	cmp	r5, r3
 800e454:	bf38      	it	cc
 800e456:	461d      	movcc	r5, r3
 800e458:	0553      	lsls	r3, r2, #21
 800e45a:	d530      	bpl.n	800e4be <__ssputs_r+0x9e>
 800e45c:	4629      	mov	r1, r5
 800e45e:	f7ff ff85 	bl	800e36c <_malloc_r>
 800e462:	4606      	mov	r6, r0
 800e464:	b950      	cbnz	r0, 800e47c <__ssputs_r+0x5c>
 800e466:	230c      	movs	r3, #12
 800e468:	f8ca 3000 	str.w	r3, [sl]
 800e46c:	89a3      	ldrh	r3, [r4, #12]
 800e46e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800e472:	81a3      	strh	r3, [r4, #12]
 800e474:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800e478:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800e47c:	463a      	mov	r2, r7
 800e47e:	6921      	ldr	r1, [r4, #16]
 800e480:	f7ff fc32 	bl	800dce8 <memcpy>
 800e484:	89a3      	ldrh	r3, [r4, #12]
 800e486:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800e48a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800e48e:	81a3      	strh	r3, [r4, #12]
 800e490:	6126      	str	r6, [r4, #16]
 800e492:	6165      	str	r5, [r4, #20]
 800e494:	443e      	add	r6, r7
 800e496:	1bed      	subs	r5, r5, r7
 800e498:	6026      	str	r6, [r4, #0]
 800e49a:	60a5      	str	r5, [r4, #8]
 800e49c:	464e      	mov	r6, r9
 800e49e:	454e      	cmp	r6, r9
 800e4a0:	d900      	bls.n	800e4a4 <__ssputs_r+0x84>
 800e4a2:	464e      	mov	r6, r9
 800e4a4:	4632      	mov	r2, r6
 800e4a6:	4641      	mov	r1, r8
 800e4a8:	6820      	ldr	r0, [r4, #0]
 800e4aa:	f000 f9c7 	bl	800e83c <memmove>
 800e4ae:	68a3      	ldr	r3, [r4, #8]
 800e4b0:	1b9b      	subs	r3, r3, r6
 800e4b2:	60a3      	str	r3, [r4, #8]
 800e4b4:	6823      	ldr	r3, [r4, #0]
 800e4b6:	441e      	add	r6, r3
 800e4b8:	6026      	str	r6, [r4, #0]
 800e4ba:	2000      	movs	r0, #0
 800e4bc:	e7dc      	b.n	800e478 <__ssputs_r+0x58>
 800e4be:	462a      	mov	r2, r5
 800e4c0:	f000 f9d7 	bl	800e872 <_realloc_r>
 800e4c4:	4606      	mov	r6, r0
 800e4c6:	2800      	cmp	r0, #0
 800e4c8:	d1e2      	bne.n	800e490 <__ssputs_r+0x70>
 800e4ca:	6921      	ldr	r1, [r4, #16]
 800e4cc:	4650      	mov	r0, sl
 800e4ce:	f7ff feff 	bl	800e2d0 <_free_r>
 800e4d2:	e7c8      	b.n	800e466 <__ssputs_r+0x46>

0800e4d4 <_svfiprintf_r>:
 800e4d4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e4d8:	461d      	mov	r5, r3
 800e4da:	898b      	ldrh	r3, [r1, #12]
 800e4dc:	061f      	lsls	r7, r3, #24
 800e4de:	b09d      	sub	sp, #116	; 0x74
 800e4e0:	4680      	mov	r8, r0
 800e4e2:	460c      	mov	r4, r1
 800e4e4:	4616      	mov	r6, r2
 800e4e6:	d50f      	bpl.n	800e508 <_svfiprintf_r+0x34>
 800e4e8:	690b      	ldr	r3, [r1, #16]
 800e4ea:	b96b      	cbnz	r3, 800e508 <_svfiprintf_r+0x34>
 800e4ec:	2140      	movs	r1, #64	; 0x40
 800e4ee:	f7ff ff3d 	bl	800e36c <_malloc_r>
 800e4f2:	6020      	str	r0, [r4, #0]
 800e4f4:	6120      	str	r0, [r4, #16]
 800e4f6:	b928      	cbnz	r0, 800e504 <_svfiprintf_r+0x30>
 800e4f8:	230c      	movs	r3, #12
 800e4fa:	f8c8 3000 	str.w	r3, [r8]
 800e4fe:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800e502:	e0c8      	b.n	800e696 <_svfiprintf_r+0x1c2>
 800e504:	2340      	movs	r3, #64	; 0x40
 800e506:	6163      	str	r3, [r4, #20]
 800e508:	2300      	movs	r3, #0
 800e50a:	9309      	str	r3, [sp, #36]	; 0x24
 800e50c:	2320      	movs	r3, #32
 800e50e:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800e512:	2330      	movs	r3, #48	; 0x30
 800e514:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800e518:	9503      	str	r5, [sp, #12]
 800e51a:	f04f 0b01 	mov.w	fp, #1
 800e51e:	4637      	mov	r7, r6
 800e520:	463d      	mov	r5, r7
 800e522:	f815 3b01 	ldrb.w	r3, [r5], #1
 800e526:	b10b      	cbz	r3, 800e52c <_svfiprintf_r+0x58>
 800e528:	2b25      	cmp	r3, #37	; 0x25
 800e52a:	d13e      	bne.n	800e5aa <_svfiprintf_r+0xd6>
 800e52c:	ebb7 0a06 	subs.w	sl, r7, r6
 800e530:	d00b      	beq.n	800e54a <_svfiprintf_r+0x76>
 800e532:	4653      	mov	r3, sl
 800e534:	4632      	mov	r2, r6
 800e536:	4621      	mov	r1, r4
 800e538:	4640      	mov	r0, r8
 800e53a:	f7ff ff71 	bl	800e420 <__ssputs_r>
 800e53e:	3001      	adds	r0, #1
 800e540:	f000 80a4 	beq.w	800e68c <_svfiprintf_r+0x1b8>
 800e544:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800e546:	4453      	add	r3, sl
 800e548:	9309      	str	r3, [sp, #36]	; 0x24
 800e54a:	783b      	ldrb	r3, [r7, #0]
 800e54c:	2b00      	cmp	r3, #0
 800e54e:	f000 809d 	beq.w	800e68c <_svfiprintf_r+0x1b8>
 800e552:	2300      	movs	r3, #0
 800e554:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800e558:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800e55c:	9304      	str	r3, [sp, #16]
 800e55e:	9307      	str	r3, [sp, #28]
 800e560:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800e564:	931a      	str	r3, [sp, #104]	; 0x68
 800e566:	462f      	mov	r7, r5
 800e568:	2205      	movs	r2, #5
 800e56a:	f817 1b01 	ldrb.w	r1, [r7], #1
 800e56e:	4850      	ldr	r0, [pc, #320]	; (800e6b0 <_svfiprintf_r+0x1dc>)
 800e570:	f7f1 fe5e 	bl	8000230 <memchr>
 800e574:	9b04      	ldr	r3, [sp, #16]
 800e576:	b9d0      	cbnz	r0, 800e5ae <_svfiprintf_r+0xda>
 800e578:	06d9      	lsls	r1, r3, #27
 800e57a:	bf44      	itt	mi
 800e57c:	2220      	movmi	r2, #32
 800e57e:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 800e582:	071a      	lsls	r2, r3, #28
 800e584:	bf44      	itt	mi
 800e586:	222b      	movmi	r2, #43	; 0x2b
 800e588:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 800e58c:	782a      	ldrb	r2, [r5, #0]
 800e58e:	2a2a      	cmp	r2, #42	; 0x2a
 800e590:	d015      	beq.n	800e5be <_svfiprintf_r+0xea>
 800e592:	9a07      	ldr	r2, [sp, #28]
 800e594:	462f      	mov	r7, r5
 800e596:	2000      	movs	r0, #0
 800e598:	250a      	movs	r5, #10
 800e59a:	4639      	mov	r1, r7
 800e59c:	f811 3b01 	ldrb.w	r3, [r1], #1
 800e5a0:	3b30      	subs	r3, #48	; 0x30
 800e5a2:	2b09      	cmp	r3, #9
 800e5a4:	d94d      	bls.n	800e642 <_svfiprintf_r+0x16e>
 800e5a6:	b1b8      	cbz	r0, 800e5d8 <_svfiprintf_r+0x104>
 800e5a8:	e00f      	b.n	800e5ca <_svfiprintf_r+0xf6>
 800e5aa:	462f      	mov	r7, r5
 800e5ac:	e7b8      	b.n	800e520 <_svfiprintf_r+0x4c>
 800e5ae:	4a40      	ldr	r2, [pc, #256]	; (800e6b0 <_svfiprintf_r+0x1dc>)
 800e5b0:	1a80      	subs	r0, r0, r2
 800e5b2:	fa0b f000 	lsl.w	r0, fp, r0
 800e5b6:	4318      	orrs	r0, r3
 800e5b8:	9004      	str	r0, [sp, #16]
 800e5ba:	463d      	mov	r5, r7
 800e5bc:	e7d3      	b.n	800e566 <_svfiprintf_r+0x92>
 800e5be:	9a03      	ldr	r2, [sp, #12]
 800e5c0:	1d11      	adds	r1, r2, #4
 800e5c2:	6812      	ldr	r2, [r2, #0]
 800e5c4:	9103      	str	r1, [sp, #12]
 800e5c6:	2a00      	cmp	r2, #0
 800e5c8:	db01      	blt.n	800e5ce <_svfiprintf_r+0xfa>
 800e5ca:	9207      	str	r2, [sp, #28]
 800e5cc:	e004      	b.n	800e5d8 <_svfiprintf_r+0x104>
 800e5ce:	4252      	negs	r2, r2
 800e5d0:	f043 0302 	orr.w	r3, r3, #2
 800e5d4:	9207      	str	r2, [sp, #28]
 800e5d6:	9304      	str	r3, [sp, #16]
 800e5d8:	783b      	ldrb	r3, [r7, #0]
 800e5da:	2b2e      	cmp	r3, #46	; 0x2e
 800e5dc:	d10c      	bne.n	800e5f8 <_svfiprintf_r+0x124>
 800e5de:	787b      	ldrb	r3, [r7, #1]
 800e5e0:	2b2a      	cmp	r3, #42	; 0x2a
 800e5e2:	d133      	bne.n	800e64c <_svfiprintf_r+0x178>
 800e5e4:	9b03      	ldr	r3, [sp, #12]
 800e5e6:	1d1a      	adds	r2, r3, #4
 800e5e8:	681b      	ldr	r3, [r3, #0]
 800e5ea:	9203      	str	r2, [sp, #12]
 800e5ec:	2b00      	cmp	r3, #0
 800e5ee:	bfb8      	it	lt
 800e5f0:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 800e5f4:	3702      	adds	r7, #2
 800e5f6:	9305      	str	r3, [sp, #20]
 800e5f8:	4d2e      	ldr	r5, [pc, #184]	; (800e6b4 <_svfiprintf_r+0x1e0>)
 800e5fa:	7839      	ldrb	r1, [r7, #0]
 800e5fc:	2203      	movs	r2, #3
 800e5fe:	4628      	mov	r0, r5
 800e600:	f7f1 fe16 	bl	8000230 <memchr>
 800e604:	b138      	cbz	r0, 800e616 <_svfiprintf_r+0x142>
 800e606:	2340      	movs	r3, #64	; 0x40
 800e608:	1b40      	subs	r0, r0, r5
 800e60a:	fa03 f000 	lsl.w	r0, r3, r0
 800e60e:	9b04      	ldr	r3, [sp, #16]
 800e610:	4303      	orrs	r3, r0
 800e612:	3701      	adds	r7, #1
 800e614:	9304      	str	r3, [sp, #16]
 800e616:	7839      	ldrb	r1, [r7, #0]
 800e618:	4827      	ldr	r0, [pc, #156]	; (800e6b8 <_svfiprintf_r+0x1e4>)
 800e61a:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800e61e:	2206      	movs	r2, #6
 800e620:	1c7e      	adds	r6, r7, #1
 800e622:	f7f1 fe05 	bl	8000230 <memchr>
 800e626:	2800      	cmp	r0, #0
 800e628:	d038      	beq.n	800e69c <_svfiprintf_r+0x1c8>
 800e62a:	4b24      	ldr	r3, [pc, #144]	; (800e6bc <_svfiprintf_r+0x1e8>)
 800e62c:	bb13      	cbnz	r3, 800e674 <_svfiprintf_r+0x1a0>
 800e62e:	9b03      	ldr	r3, [sp, #12]
 800e630:	3307      	adds	r3, #7
 800e632:	f023 0307 	bic.w	r3, r3, #7
 800e636:	3308      	adds	r3, #8
 800e638:	9303      	str	r3, [sp, #12]
 800e63a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800e63c:	444b      	add	r3, r9
 800e63e:	9309      	str	r3, [sp, #36]	; 0x24
 800e640:	e76d      	b.n	800e51e <_svfiprintf_r+0x4a>
 800e642:	fb05 3202 	mla	r2, r5, r2, r3
 800e646:	2001      	movs	r0, #1
 800e648:	460f      	mov	r7, r1
 800e64a:	e7a6      	b.n	800e59a <_svfiprintf_r+0xc6>
 800e64c:	2300      	movs	r3, #0
 800e64e:	3701      	adds	r7, #1
 800e650:	9305      	str	r3, [sp, #20]
 800e652:	4619      	mov	r1, r3
 800e654:	250a      	movs	r5, #10
 800e656:	4638      	mov	r0, r7
 800e658:	f810 2b01 	ldrb.w	r2, [r0], #1
 800e65c:	3a30      	subs	r2, #48	; 0x30
 800e65e:	2a09      	cmp	r2, #9
 800e660:	d903      	bls.n	800e66a <_svfiprintf_r+0x196>
 800e662:	2b00      	cmp	r3, #0
 800e664:	d0c8      	beq.n	800e5f8 <_svfiprintf_r+0x124>
 800e666:	9105      	str	r1, [sp, #20]
 800e668:	e7c6      	b.n	800e5f8 <_svfiprintf_r+0x124>
 800e66a:	fb05 2101 	mla	r1, r5, r1, r2
 800e66e:	2301      	movs	r3, #1
 800e670:	4607      	mov	r7, r0
 800e672:	e7f0      	b.n	800e656 <_svfiprintf_r+0x182>
 800e674:	ab03      	add	r3, sp, #12
 800e676:	9300      	str	r3, [sp, #0]
 800e678:	4622      	mov	r2, r4
 800e67a:	4b11      	ldr	r3, [pc, #68]	; (800e6c0 <_svfiprintf_r+0x1ec>)
 800e67c:	a904      	add	r1, sp, #16
 800e67e:	4640      	mov	r0, r8
 800e680:	f7fd fdca 	bl	800c218 <_printf_float>
 800e684:	f1b0 3fff 	cmp.w	r0, #4294967295	; 0xffffffff
 800e688:	4681      	mov	r9, r0
 800e68a:	d1d6      	bne.n	800e63a <_svfiprintf_r+0x166>
 800e68c:	89a3      	ldrh	r3, [r4, #12]
 800e68e:	065b      	lsls	r3, r3, #25
 800e690:	f53f af35 	bmi.w	800e4fe <_svfiprintf_r+0x2a>
 800e694:	9809      	ldr	r0, [sp, #36]	; 0x24
 800e696:	b01d      	add	sp, #116	; 0x74
 800e698:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e69c:	ab03      	add	r3, sp, #12
 800e69e:	9300      	str	r3, [sp, #0]
 800e6a0:	4622      	mov	r2, r4
 800e6a2:	4b07      	ldr	r3, [pc, #28]	; (800e6c0 <_svfiprintf_r+0x1ec>)
 800e6a4:	a904      	add	r1, sp, #16
 800e6a6:	4640      	mov	r0, r8
 800e6a8:	f7fe f86c 	bl	800c784 <_printf_i>
 800e6ac:	e7ea      	b.n	800e684 <_svfiprintf_r+0x1b0>
 800e6ae:	bf00      	nop
 800e6b0:	0800f384 	.word	0x0800f384
 800e6b4:	0800f38a 	.word	0x0800f38a
 800e6b8:	0800f38e 	.word	0x0800f38e
 800e6bc:	0800c219 	.word	0x0800c219
 800e6c0:	0800e421 	.word	0x0800e421

0800e6c4 <_sbrk_r>:
 800e6c4:	b538      	push	{r3, r4, r5, lr}
 800e6c6:	4c06      	ldr	r4, [pc, #24]	; (800e6e0 <_sbrk_r+0x1c>)
 800e6c8:	2300      	movs	r3, #0
 800e6ca:	4605      	mov	r5, r0
 800e6cc:	4608      	mov	r0, r1
 800e6ce:	6023      	str	r3, [r4, #0]
 800e6d0:	f7f6 fdb8 	bl	8005244 <_sbrk>
 800e6d4:	1c43      	adds	r3, r0, #1
 800e6d6:	d102      	bne.n	800e6de <_sbrk_r+0x1a>
 800e6d8:	6823      	ldr	r3, [r4, #0]
 800e6da:	b103      	cbz	r3, 800e6de <_sbrk_r+0x1a>
 800e6dc:	602b      	str	r3, [r5, #0]
 800e6de:	bd38      	pop	{r3, r4, r5, pc}
 800e6e0:	20001e88 	.word	0x20001e88

0800e6e4 <__sread>:
 800e6e4:	b510      	push	{r4, lr}
 800e6e6:	460c      	mov	r4, r1
 800e6e8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800e6ec:	f000 f8e8 	bl	800e8c0 <_read_r>
 800e6f0:	2800      	cmp	r0, #0
 800e6f2:	bfab      	itete	ge
 800e6f4:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800e6f6:	89a3      	ldrhlt	r3, [r4, #12]
 800e6f8:	181b      	addge	r3, r3, r0
 800e6fa:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800e6fe:	bfac      	ite	ge
 800e700:	6563      	strge	r3, [r4, #84]	; 0x54
 800e702:	81a3      	strhlt	r3, [r4, #12]
 800e704:	bd10      	pop	{r4, pc}

0800e706 <__swrite>:
 800e706:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800e70a:	461f      	mov	r7, r3
 800e70c:	898b      	ldrh	r3, [r1, #12]
 800e70e:	05db      	lsls	r3, r3, #23
 800e710:	4605      	mov	r5, r0
 800e712:	460c      	mov	r4, r1
 800e714:	4616      	mov	r6, r2
 800e716:	d505      	bpl.n	800e724 <__swrite+0x1e>
 800e718:	2302      	movs	r3, #2
 800e71a:	2200      	movs	r2, #0
 800e71c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800e720:	f000 f868 	bl	800e7f4 <_lseek_r>
 800e724:	89a3      	ldrh	r3, [r4, #12]
 800e726:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800e72a:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800e72e:	81a3      	strh	r3, [r4, #12]
 800e730:	4632      	mov	r2, r6
 800e732:	463b      	mov	r3, r7
 800e734:	4628      	mov	r0, r5
 800e736:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800e73a:	f000 b817 	b.w	800e76c <_write_r>

0800e73e <__sseek>:
 800e73e:	b510      	push	{r4, lr}
 800e740:	460c      	mov	r4, r1
 800e742:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800e746:	f000 f855 	bl	800e7f4 <_lseek_r>
 800e74a:	1c43      	adds	r3, r0, #1
 800e74c:	89a3      	ldrh	r3, [r4, #12]
 800e74e:	bf15      	itete	ne
 800e750:	6560      	strne	r0, [r4, #84]	; 0x54
 800e752:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800e756:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800e75a:	81a3      	strheq	r3, [r4, #12]
 800e75c:	bf18      	it	ne
 800e75e:	81a3      	strhne	r3, [r4, #12]
 800e760:	bd10      	pop	{r4, pc}

0800e762 <__sclose>:
 800e762:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800e766:	f000 b813 	b.w	800e790 <_close_r>
	...

0800e76c <_write_r>:
 800e76c:	b538      	push	{r3, r4, r5, lr}
 800e76e:	4c07      	ldr	r4, [pc, #28]	; (800e78c <_write_r+0x20>)
 800e770:	4605      	mov	r5, r0
 800e772:	4608      	mov	r0, r1
 800e774:	4611      	mov	r1, r2
 800e776:	2200      	movs	r2, #0
 800e778:	6022      	str	r2, [r4, #0]
 800e77a:	461a      	mov	r2, r3
 800e77c:	f7f6 f99f 	bl	8004abe <_write>
 800e780:	1c43      	adds	r3, r0, #1
 800e782:	d102      	bne.n	800e78a <_write_r+0x1e>
 800e784:	6823      	ldr	r3, [r4, #0]
 800e786:	b103      	cbz	r3, 800e78a <_write_r+0x1e>
 800e788:	602b      	str	r3, [r5, #0]
 800e78a:	bd38      	pop	{r3, r4, r5, pc}
 800e78c:	20001e88 	.word	0x20001e88

0800e790 <_close_r>:
 800e790:	b538      	push	{r3, r4, r5, lr}
 800e792:	4c06      	ldr	r4, [pc, #24]	; (800e7ac <_close_r+0x1c>)
 800e794:	2300      	movs	r3, #0
 800e796:	4605      	mov	r5, r0
 800e798:	4608      	mov	r0, r1
 800e79a:	6023      	str	r3, [r4, #0]
 800e79c:	f7f6 fd1d 	bl	80051da <_close>
 800e7a0:	1c43      	adds	r3, r0, #1
 800e7a2:	d102      	bne.n	800e7aa <_close_r+0x1a>
 800e7a4:	6823      	ldr	r3, [r4, #0]
 800e7a6:	b103      	cbz	r3, 800e7aa <_close_r+0x1a>
 800e7a8:	602b      	str	r3, [r5, #0]
 800e7aa:	bd38      	pop	{r3, r4, r5, pc}
 800e7ac:	20001e88 	.word	0x20001e88

0800e7b0 <_fstat_r>:
 800e7b0:	b538      	push	{r3, r4, r5, lr}
 800e7b2:	4c07      	ldr	r4, [pc, #28]	; (800e7d0 <_fstat_r+0x20>)
 800e7b4:	2300      	movs	r3, #0
 800e7b6:	4605      	mov	r5, r0
 800e7b8:	4608      	mov	r0, r1
 800e7ba:	4611      	mov	r1, r2
 800e7bc:	6023      	str	r3, [r4, #0]
 800e7be:	f7f6 fd18 	bl	80051f2 <_fstat>
 800e7c2:	1c43      	adds	r3, r0, #1
 800e7c4:	d102      	bne.n	800e7cc <_fstat_r+0x1c>
 800e7c6:	6823      	ldr	r3, [r4, #0]
 800e7c8:	b103      	cbz	r3, 800e7cc <_fstat_r+0x1c>
 800e7ca:	602b      	str	r3, [r5, #0]
 800e7cc:	bd38      	pop	{r3, r4, r5, pc}
 800e7ce:	bf00      	nop
 800e7d0:	20001e88 	.word	0x20001e88

0800e7d4 <_isatty_r>:
 800e7d4:	b538      	push	{r3, r4, r5, lr}
 800e7d6:	4c06      	ldr	r4, [pc, #24]	; (800e7f0 <_isatty_r+0x1c>)
 800e7d8:	2300      	movs	r3, #0
 800e7da:	4605      	mov	r5, r0
 800e7dc:	4608      	mov	r0, r1
 800e7de:	6023      	str	r3, [r4, #0]
 800e7e0:	f7f6 fd17 	bl	8005212 <_isatty>
 800e7e4:	1c43      	adds	r3, r0, #1
 800e7e6:	d102      	bne.n	800e7ee <_isatty_r+0x1a>
 800e7e8:	6823      	ldr	r3, [r4, #0]
 800e7ea:	b103      	cbz	r3, 800e7ee <_isatty_r+0x1a>
 800e7ec:	602b      	str	r3, [r5, #0]
 800e7ee:	bd38      	pop	{r3, r4, r5, pc}
 800e7f0:	20001e88 	.word	0x20001e88

0800e7f4 <_lseek_r>:
 800e7f4:	b538      	push	{r3, r4, r5, lr}
 800e7f6:	4c07      	ldr	r4, [pc, #28]	; (800e814 <_lseek_r+0x20>)
 800e7f8:	4605      	mov	r5, r0
 800e7fa:	4608      	mov	r0, r1
 800e7fc:	4611      	mov	r1, r2
 800e7fe:	2200      	movs	r2, #0
 800e800:	6022      	str	r2, [r4, #0]
 800e802:	461a      	mov	r2, r3
 800e804:	f7f6 fd10 	bl	8005228 <_lseek>
 800e808:	1c43      	adds	r3, r0, #1
 800e80a:	d102      	bne.n	800e812 <_lseek_r+0x1e>
 800e80c:	6823      	ldr	r3, [r4, #0]
 800e80e:	b103      	cbz	r3, 800e812 <_lseek_r+0x1e>
 800e810:	602b      	str	r3, [r5, #0]
 800e812:	bd38      	pop	{r3, r4, r5, pc}
 800e814:	20001e88 	.word	0x20001e88

0800e818 <__ascii_mbtowc>:
 800e818:	b082      	sub	sp, #8
 800e81a:	b901      	cbnz	r1, 800e81e <__ascii_mbtowc+0x6>
 800e81c:	a901      	add	r1, sp, #4
 800e81e:	b142      	cbz	r2, 800e832 <__ascii_mbtowc+0x1a>
 800e820:	b14b      	cbz	r3, 800e836 <__ascii_mbtowc+0x1e>
 800e822:	7813      	ldrb	r3, [r2, #0]
 800e824:	600b      	str	r3, [r1, #0]
 800e826:	7812      	ldrb	r2, [r2, #0]
 800e828:	1c10      	adds	r0, r2, #0
 800e82a:	bf18      	it	ne
 800e82c:	2001      	movne	r0, #1
 800e82e:	b002      	add	sp, #8
 800e830:	4770      	bx	lr
 800e832:	4610      	mov	r0, r2
 800e834:	e7fb      	b.n	800e82e <__ascii_mbtowc+0x16>
 800e836:	f06f 0001 	mvn.w	r0, #1
 800e83a:	e7f8      	b.n	800e82e <__ascii_mbtowc+0x16>

0800e83c <memmove>:
 800e83c:	4288      	cmp	r0, r1
 800e83e:	b510      	push	{r4, lr}
 800e840:	eb01 0302 	add.w	r3, r1, r2
 800e844:	d807      	bhi.n	800e856 <memmove+0x1a>
 800e846:	1e42      	subs	r2, r0, #1
 800e848:	4299      	cmp	r1, r3
 800e84a:	d00a      	beq.n	800e862 <memmove+0x26>
 800e84c:	f811 4b01 	ldrb.w	r4, [r1], #1
 800e850:	f802 4f01 	strb.w	r4, [r2, #1]!
 800e854:	e7f8      	b.n	800e848 <memmove+0xc>
 800e856:	4283      	cmp	r3, r0
 800e858:	d9f5      	bls.n	800e846 <memmove+0xa>
 800e85a:	1881      	adds	r1, r0, r2
 800e85c:	1ad2      	subs	r2, r2, r3
 800e85e:	42d3      	cmn	r3, r2
 800e860:	d100      	bne.n	800e864 <memmove+0x28>
 800e862:	bd10      	pop	{r4, pc}
 800e864:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800e868:	f801 4d01 	strb.w	r4, [r1, #-1]!
 800e86c:	e7f7      	b.n	800e85e <memmove+0x22>

0800e86e <__malloc_lock>:
 800e86e:	4770      	bx	lr

0800e870 <__malloc_unlock>:
 800e870:	4770      	bx	lr

0800e872 <_realloc_r>:
 800e872:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e874:	4607      	mov	r7, r0
 800e876:	4614      	mov	r4, r2
 800e878:	460e      	mov	r6, r1
 800e87a:	b921      	cbnz	r1, 800e886 <_realloc_r+0x14>
 800e87c:	4611      	mov	r1, r2
 800e87e:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 800e882:	f7ff bd73 	b.w	800e36c <_malloc_r>
 800e886:	b922      	cbnz	r2, 800e892 <_realloc_r+0x20>
 800e888:	f7ff fd22 	bl	800e2d0 <_free_r>
 800e88c:	4625      	mov	r5, r4
 800e88e:	4628      	mov	r0, r5
 800e890:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800e892:	f000 f834 	bl	800e8fe <_malloc_usable_size_r>
 800e896:	42a0      	cmp	r0, r4
 800e898:	d20f      	bcs.n	800e8ba <_realloc_r+0x48>
 800e89a:	4621      	mov	r1, r4
 800e89c:	4638      	mov	r0, r7
 800e89e:	f7ff fd65 	bl	800e36c <_malloc_r>
 800e8a2:	4605      	mov	r5, r0
 800e8a4:	2800      	cmp	r0, #0
 800e8a6:	d0f2      	beq.n	800e88e <_realloc_r+0x1c>
 800e8a8:	4631      	mov	r1, r6
 800e8aa:	4622      	mov	r2, r4
 800e8ac:	f7ff fa1c 	bl	800dce8 <memcpy>
 800e8b0:	4631      	mov	r1, r6
 800e8b2:	4638      	mov	r0, r7
 800e8b4:	f7ff fd0c 	bl	800e2d0 <_free_r>
 800e8b8:	e7e9      	b.n	800e88e <_realloc_r+0x1c>
 800e8ba:	4635      	mov	r5, r6
 800e8bc:	e7e7      	b.n	800e88e <_realloc_r+0x1c>
	...

0800e8c0 <_read_r>:
 800e8c0:	b538      	push	{r3, r4, r5, lr}
 800e8c2:	4c07      	ldr	r4, [pc, #28]	; (800e8e0 <_read_r+0x20>)
 800e8c4:	4605      	mov	r5, r0
 800e8c6:	4608      	mov	r0, r1
 800e8c8:	4611      	mov	r1, r2
 800e8ca:	2200      	movs	r2, #0
 800e8cc:	6022      	str	r2, [r4, #0]
 800e8ce:	461a      	mov	r2, r3
 800e8d0:	f7f6 fc66 	bl	80051a0 <_read>
 800e8d4:	1c43      	adds	r3, r0, #1
 800e8d6:	d102      	bne.n	800e8de <_read_r+0x1e>
 800e8d8:	6823      	ldr	r3, [r4, #0]
 800e8da:	b103      	cbz	r3, 800e8de <_read_r+0x1e>
 800e8dc:	602b      	str	r3, [r5, #0]
 800e8de:	bd38      	pop	{r3, r4, r5, pc}
 800e8e0:	20001e88 	.word	0x20001e88

0800e8e4 <__ascii_wctomb>:
 800e8e4:	b149      	cbz	r1, 800e8fa <__ascii_wctomb+0x16>
 800e8e6:	2aff      	cmp	r2, #255	; 0xff
 800e8e8:	bf85      	ittet	hi
 800e8ea:	238a      	movhi	r3, #138	; 0x8a
 800e8ec:	6003      	strhi	r3, [r0, #0]
 800e8ee:	700a      	strbls	r2, [r1, #0]
 800e8f0:	f04f 30ff 	movhi.w	r0, #4294967295	; 0xffffffff
 800e8f4:	bf98      	it	ls
 800e8f6:	2001      	movls	r0, #1
 800e8f8:	4770      	bx	lr
 800e8fa:	4608      	mov	r0, r1
 800e8fc:	4770      	bx	lr

0800e8fe <_malloc_usable_size_r>:
 800e8fe:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800e902:	1f18      	subs	r0, r3, #4
 800e904:	2b00      	cmp	r3, #0
 800e906:	bfbc      	itt	lt
 800e908:	580b      	ldrlt	r3, [r1, r0]
 800e90a:	18c0      	addlt	r0, r0, r3
 800e90c:	4770      	bx	lr
	...

0800e910 <_init>:
 800e910:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e912:	bf00      	nop
 800e914:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800e916:	bc08      	pop	{r3}
 800e918:	469e      	mov	lr, r3
 800e91a:	4770      	bx	lr

0800e91c <_fini>:
 800e91c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e91e:	bf00      	nop
 800e920:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800e922:	bc08      	pop	{r3}
 800e924:	469e      	mov	lr, r3
 800e926:	4770      	bx	lr
