
FunctionGeneratorCortexM4_SW_V1.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000a080  080001e0  080001e0  000101e0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000554  0800a260  0800a260  0001a260  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800a7b4  0800a7b4  00020bc8  2**0
                  CONTENTS
  4 .ARM          00000000  0800a7b4  0800a7b4  00020bc8  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800a7b4  0800a7b4  00020bc8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800a7b4  0800a7b4  0001a7b4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800a7b8  0800a7b8  0001a7b8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000bc8  20000000  0800a7bc  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000004a4  20000bc8  0800b384  00020bc8  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000106c  0800b384  0002106c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020bc8  2**0
                  CONTENTS, READONLY
 12 .debug_info   00025d81  00000000  00000000  00020bf8  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00004f01  00000000  00000000  00046979  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00001cf8  00000000  00000000  0004b880  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00001a00  00000000  00000000  0004d578  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  0002f853  00000000  00000000  0004ef78  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0001de63  00000000  00000000  0007e7cb  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    00123fe5  00000000  00000000  0009c62e  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  001c0613  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00007d0c  00000000  00000000  001c0690  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001e0 <__do_global_dtors_aux>:
 80001e0:	b510      	push	{r4, lr}
 80001e2:	4c05      	ldr	r4, [pc, #20]	; (80001f8 <__do_global_dtors_aux+0x18>)
 80001e4:	7823      	ldrb	r3, [r4, #0]
 80001e6:	b933      	cbnz	r3, 80001f6 <__do_global_dtors_aux+0x16>
 80001e8:	4b04      	ldr	r3, [pc, #16]	; (80001fc <__do_global_dtors_aux+0x1c>)
 80001ea:	b113      	cbz	r3, 80001f2 <__do_global_dtors_aux+0x12>
 80001ec:	4804      	ldr	r0, [pc, #16]	; (8000200 <__do_global_dtors_aux+0x20>)
 80001ee:	f3af 8000 	nop.w
 80001f2:	2301      	movs	r3, #1
 80001f4:	7023      	strb	r3, [r4, #0]
 80001f6:	bd10      	pop	{r4, pc}
 80001f8:	20000bc8 	.word	0x20000bc8
 80001fc:	00000000 	.word	0x00000000
 8000200:	0800a248 	.word	0x0800a248

08000204 <frame_dummy>:
 8000204:	b508      	push	{r3, lr}
 8000206:	4b03      	ldr	r3, [pc, #12]	; (8000214 <frame_dummy+0x10>)
 8000208:	b11b      	cbz	r3, 8000212 <frame_dummy+0xe>
 800020a:	4903      	ldr	r1, [pc, #12]	; (8000218 <frame_dummy+0x14>)
 800020c:	4803      	ldr	r0, [pc, #12]	; (800021c <frame_dummy+0x18>)
 800020e:	f3af 8000 	nop.w
 8000212:	bd08      	pop	{r3, pc}
 8000214:	00000000 	.word	0x00000000
 8000218:	20000bcc 	.word	0x20000bcc
 800021c:	0800a248 	.word	0x0800a248

08000220 <memchr>:
 8000220:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000224:	2a10      	cmp	r2, #16
 8000226:	db2b      	blt.n	8000280 <memchr+0x60>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	d008      	beq.n	8000240 <memchr+0x20>
 800022e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000232:	3a01      	subs	r2, #1
 8000234:	428b      	cmp	r3, r1
 8000236:	d02d      	beq.n	8000294 <memchr+0x74>
 8000238:	f010 0f07 	tst.w	r0, #7
 800023c:	b342      	cbz	r2, 8000290 <memchr+0x70>
 800023e:	d1f6      	bne.n	800022e <memchr+0xe>
 8000240:	b4f0      	push	{r4, r5, r6, r7}
 8000242:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000246:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800024a:	f022 0407 	bic.w	r4, r2, #7
 800024e:	f07f 0700 	mvns.w	r7, #0
 8000252:	2300      	movs	r3, #0
 8000254:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000258:	3c08      	subs	r4, #8
 800025a:	ea85 0501 	eor.w	r5, r5, r1
 800025e:	ea86 0601 	eor.w	r6, r6, r1
 8000262:	fa85 f547 	uadd8	r5, r5, r7
 8000266:	faa3 f587 	sel	r5, r3, r7
 800026a:	fa86 f647 	uadd8	r6, r6, r7
 800026e:	faa5 f687 	sel	r6, r5, r7
 8000272:	b98e      	cbnz	r6, 8000298 <memchr+0x78>
 8000274:	d1ee      	bne.n	8000254 <memchr+0x34>
 8000276:	bcf0      	pop	{r4, r5, r6, r7}
 8000278:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800027c:	f002 0207 	and.w	r2, r2, #7
 8000280:	b132      	cbz	r2, 8000290 <memchr+0x70>
 8000282:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000286:	3a01      	subs	r2, #1
 8000288:	ea83 0301 	eor.w	r3, r3, r1
 800028c:	b113      	cbz	r3, 8000294 <memchr+0x74>
 800028e:	d1f8      	bne.n	8000282 <memchr+0x62>
 8000290:	2000      	movs	r0, #0
 8000292:	4770      	bx	lr
 8000294:	3801      	subs	r0, #1
 8000296:	4770      	bx	lr
 8000298:	2d00      	cmp	r5, #0
 800029a:	bf06      	itte	eq
 800029c:	4635      	moveq	r5, r6
 800029e:	3803      	subeq	r0, #3
 80002a0:	3807      	subne	r0, #7
 80002a2:	f015 0f01 	tst.w	r5, #1
 80002a6:	d107      	bne.n	80002b8 <memchr+0x98>
 80002a8:	3001      	adds	r0, #1
 80002aa:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002ae:	bf02      	ittt	eq
 80002b0:	3001      	addeq	r0, #1
 80002b2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002b6:	3001      	addeq	r0, #1
 80002b8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ba:	3801      	subs	r0, #1
 80002bc:	4770      	bx	lr
 80002be:	bf00      	nop

080002c0 <DM_Init>:
 *
 *
 *
 */
void DM_Init()
{
 80002c0:	b580      	push	{r7, lr}
 80002c2:	af00      	add	r7, sp, #0
	  ILI9341_Init();
 80002c4:	f008 fbf6 	bl	8008ab4 <ILI9341_Init>
	  ILI9341_Set_Rotation(SCREEN_HORIZONTAL_2);
 80002c8:	2003      	movs	r0, #3
 80002ca:	f008 fb95 	bl	80089f8 <ILI9341_Set_Rotation>
	  ILI9341_Fill_Screen(WHITE);
 80002ce:	f64f 70ff 	movw	r0, #65535	; 0xffff
 80002d2:	f008 fda5 	bl	8008e20 <ILI9341_Fill_Screen>

}
 80002d6:	bf00      	nop
 80002d8:	bd80      	pop	{r7, pc}
	...

080002dc <DM_PostInit>:
 *
 *
 *
 */
void DM_PostInit()
{
 80002dc:	b580      	push	{r7, lr}
 80002de:	b082      	sub	sp, #8
 80002e0:	af02      	add	r7, sp, #8

	  ILI9341_Draw_Text("Initialising", 10, 10, BLACK, 1, WHITE);
 80002e2:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80002e6:	9301      	str	r3, [sp, #4]
 80002e8:	2301      	movs	r3, #1
 80002ea:	9300      	str	r3, [sp, #0]
 80002ec:	2300      	movs	r3, #0
 80002ee:	220a      	movs	r2, #10
 80002f0:	210a      	movs	r1, #10
 80002f2:	4807      	ldr	r0, [pc, #28]	; (8000310 <DM_PostInit+0x34>)
 80002f4:	f008 fa80 	bl	80087f8 <ILI9341_Draw_Text>
	  HAL_Delay(500);
 80002f8:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80002fc:	f002 fd6e 	bl	8002ddc <HAL_Delay>

	  DM_RefreshBackgroundLayout();
 8000300:	f000 fb16 	bl	8000930 <DM_RefreshBackgroundLayout>
	  printf("Init Completed\n");
 8000304:	4803      	ldr	r0, [pc, #12]	; (8000314 <DM_PostInit+0x38>)
 8000306:	f009 f833 	bl	8009370 <puts>
}
 800030a:	bf00      	nop
 800030c:	46bd      	mov	sp, r7
 800030e:	bd80      	pop	{r7, pc}
 8000310:	0800a260 	.word	0x0800a260
 8000314:	0800a270 	.word	0x0800a270

08000318 <DM_UpdateDisplay>:
 *
 *
 */

void DM_UpdateDisplay()
{
 8000318:	b580      	push	{r7, lr}
 800031a:	b086      	sub	sp, #24
 800031c:	af02      	add	r7, sp, #8

	ILI9341_Draw_Text("FUNC", 10, 210, BLACK, 2, DARKCYAN);
 800031e:	f240 33ef 	movw	r3, #1007	; 0x3ef
 8000322:	9301      	str	r3, [sp, #4]
 8000324:	2302      	movs	r3, #2
 8000326:	9300      	str	r3, [sp, #0]
 8000328:	2300      	movs	r3, #0
 800032a:	22d2      	movs	r2, #210	; 0xd2
 800032c:	210a      	movs	r1, #10
 800032e:	482e      	ldr	r0, [pc, #184]	; (80003e8 <DM_UpdateDisplay+0xd0>)
 8000330:	f008 fa62 	bl	80087f8 <ILI9341_Draw_Text>
	ILI9341_Draw_Text("FREQ", 100, 210, BLACK, 2, DARKGREEN);
 8000334:	f44f 7378 	mov.w	r3, #992	; 0x3e0
 8000338:	9301      	str	r3, [sp, #4]
 800033a:	2302      	movs	r3, #2
 800033c:	9300      	str	r3, [sp, #0]
 800033e:	2300      	movs	r3, #0
 8000340:	22d2      	movs	r2, #210	; 0xd2
 8000342:	2164      	movs	r1, #100	; 0x64
 8000344:	4829      	ldr	r0, [pc, #164]	; (80003ec <DM_UpdateDisplay+0xd4>)
 8000346:	f008 fa57 	bl	80087f8 <ILI9341_Draw_Text>
	ILI9341_Draw_Text("GAIN", 175, 210, BLACK, 2, YELLOW);
 800034a:	f64f 73e0 	movw	r3, #65504	; 0xffe0
 800034e:	9301      	str	r3, [sp, #4]
 8000350:	2302      	movs	r3, #2
 8000352:	9300      	str	r3, [sp, #0]
 8000354:	2300      	movs	r3, #0
 8000356:	22d2      	movs	r2, #210	; 0xd2
 8000358:	21af      	movs	r1, #175	; 0xaf
 800035a:	4825      	ldr	r0, [pc, #148]	; (80003f0 <DM_UpdateDisplay+0xd8>)
 800035c:	f008 fa4c 	bl	80087f8 <ILI9341_Draw_Text>
	ILI9341_Draw_Text("BIAS", 260, 210, BLACK, 2, RED);
 8000360:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8000364:	9301      	str	r3, [sp, #4]
 8000366:	2302      	movs	r3, #2
 8000368:	9300      	str	r3, [sp, #0]
 800036a:	2300      	movs	r3, #0
 800036c:	22d2      	movs	r2, #210	; 0xd2
 800036e:	f44f 7182 	mov.w	r1, #260	; 0x104
 8000372:	4820      	ldr	r0, [pc, #128]	; (80003f4 <DM_UpdateDisplay+0xdc>)
 8000374:	f008 fa40 	bl	80087f8 <ILI9341_Draw_Text>

	if(eNextFuncMenuStatus)		//  == ENABLE_FUNCMENU
 8000378:	4b1f      	ldr	r3, [pc, #124]	; (80003f8 <DM_UpdateDisplay+0xe0>)
 800037a:	781b      	ldrb	r3, [r3, #0]
 800037c:	2b00      	cmp	r3, #0
 800037e:	d001      	beq.n	8000384 <DM_UpdateDisplay+0x6c>
		_DrawFuncSelectMenu();
 8000380:	f000 f856 	bl	8000430 <_DrawFuncSelectMenu>

	if(eNextGainMenuStatus)		//  == ENABLE_GAINMENU
 8000384:	4b1d      	ldr	r3, [pc, #116]	; (80003fc <DM_UpdateDisplay+0xe4>)
 8000386:	781b      	ldrb	r3, [r3, #0]
 8000388:	2b00      	cmp	r3, #0
 800038a:	d001      	beq.n	8000390 <DM_UpdateDisplay+0x78>
		_DrawGainSelectMenu();
 800038c:	f000 fa1a 	bl	80007c4 <_DrawGainSelectMenu>

	if(eNextFreqMenuStatus)		//  == ENABLE_FREQMENU
 8000390:	4b1b      	ldr	r3, [pc, #108]	; (8000400 <DM_UpdateDisplay+0xe8>)
 8000392:	781b      	ldrb	r3, [r3, #0]
 8000394:	2b00      	cmp	r3, #0
 8000396:	d001      	beq.n	800039c <DM_UpdateDisplay+0x84>
		_DrawFreqSelectMenu();
 8000398:	f000 fa56 	bl	8000848 <_DrawFreqSelectMenu>

	if(eNextBiasMenuStatus)		//  == ENABLE_BIASMENU
 800039c:	4b19      	ldr	r3, [pc, #100]	; (8000404 <DM_UpdateDisplay+0xec>)
 800039e:	781b      	ldrb	r3, [r3, #0]
 80003a0:	2b00      	cmp	r3, #0
 80003a2:	d001      	beq.n	80003a8 <DM_UpdateDisplay+0x90>
		_DrawBiasSelectMenu();
 80003a4:	f000 fa92 	bl	80008cc <_DrawBiasSelectMenu>

#ifdef ENCODER_DEBUG
	char tim1tmp[11] = "";
 80003a8:	2300      	movs	r3, #0
 80003aa:	607b      	str	r3, [r7, #4]
 80003ac:	f107 0308 	add.w	r3, r7, #8
 80003b0:	2200      	movs	r2, #0
 80003b2:	601a      	str	r2, [r3, #0]
 80003b4:	f8c3 2003 	str.w	r2, [r3, #3]
	snprintf(tim1tmp, sizeof(tim1tmp), "%lu", TIM1->CNT);
 80003b8:	4b13      	ldr	r3, [pc, #76]	; (8000408 <DM_UpdateDisplay+0xf0>)
 80003ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80003bc:	1d38      	adds	r0, r7, #4
 80003be:	4a13      	ldr	r2, [pc, #76]	; (800040c <DM_UpdateDisplay+0xf4>)
 80003c0:	210b      	movs	r1, #11
 80003c2:	f008 ffdd 	bl	8009380 <sniprintf>
	ILI9341_Draw_Text(tim1tmp, 260, 50, BLACK, 2, RED);
 80003c6:	1d38      	adds	r0, r7, #4
 80003c8:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 80003cc:	9301      	str	r3, [sp, #4]
 80003ce:	2302      	movs	r3, #2
 80003d0:	9300      	str	r3, [sp, #0]
 80003d2:	2300      	movs	r3, #0
 80003d4:	2232      	movs	r2, #50	; 0x32
 80003d6:	f44f 7182 	mov.w	r1, #260	; 0x104
 80003da:	f008 fa0d 	bl	80087f8 <ILI9341_Draw_Text>
/*
	if((TIM1->SR & TIM_SR_IDXF) == TIM_SR_IDXF)
	{
		TIM1->SR &= ~(TIM_SR_IDXF);
	}*/
}
 80003de:	bf00      	nop
 80003e0:	3710      	adds	r7, #16
 80003e2:	46bd      	mov	sp, r7
 80003e4:	bd80      	pop	{r7, pc}
 80003e6:	bf00      	nop
 80003e8:	0800a280 	.word	0x0800a280
 80003ec:	0800a288 	.word	0x0800a288
 80003f0:	0800a290 	.word	0x0800a290
 80003f4:	0800a298 	.word	0x0800a298
 80003f8:	20000be4 	.word	0x20000be4
 80003fc:	20000be5 	.word	0x20000be5
 8000400:	20000be6 	.word	0x20000be6
 8000404:	20000be7 	.word	0x20000be7
 8000408:	40012c00 	.word	0x40012c00
 800040c:	0800a2a0 	.word	0x0800a2a0

08000410 <DM_ShowFuncSelectMenu>:
 *
 *
 *
 */
void DM_ShowFuncSelectMenu(eFuncMenu_Status pValue)
{
 8000410:	b480      	push	{r7}
 8000412:	b083      	sub	sp, #12
 8000414:	af00      	add	r7, sp, #0
 8000416:	4603      	mov	r3, r0
 8000418:	71fb      	strb	r3, [r7, #7]
	eNextFuncMenuStatus = pValue;
 800041a:	4a04      	ldr	r2, [pc, #16]	; (800042c <DM_ShowFuncSelectMenu+0x1c>)
 800041c:	79fb      	ldrb	r3, [r7, #7]
 800041e:	7013      	strb	r3, [r2, #0]
}
 8000420:	bf00      	nop
 8000422:	370c      	adds	r7, #12
 8000424:	46bd      	mov	sp, r7
 8000426:	f85d 7b04 	ldr.w	r7, [sp], #4
 800042a:	4770      	bx	lr
 800042c:	20000be4 	.word	0x20000be4

08000430 <_DrawFuncSelectMenu>:
 *
 *
 *
 */
void _DrawFuncSelectMenu()
{
 8000430:	b580      	push	{r7, lr}
 8000432:	b082      	sub	sp, #8
 8000434:	af02      	add	r7, sp, #8

	switch(FO_GetOutputMode())
 8000436:	f000 fda3 	bl	8000f80 <FO_GetOutputMode>
 800043a:	4603      	mov	r3, r0
 800043c:	2b05      	cmp	r3, #5
 800043e:	f200 81a1 	bhi.w	8000784 <_DrawFuncSelectMenu+0x354>
 8000442:	a201      	add	r2, pc, #4	; (adr r2, 8000448 <_DrawFuncSelectMenu+0x18>)
 8000444:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000448:	08000461 	.word	0x08000461
 800044c:	080004e7 	.word	0x080004e7
 8000450:	0800056d 	.word	0x0800056d
 8000454:	080005f3 	.word	0x080005f3
 8000458:	08000679 	.word	0x08000679
 800045c:	080006ff 	.word	0x080006ff
	{
		case Sine_Out_Mode:
			ILI9341_Draw_Text("- SINE", 	10, 30, WHITE, 2, BLACK);
 8000460:	2300      	movs	r3, #0
 8000462:	9301      	str	r3, [sp, #4]
 8000464:	2302      	movs	r3, #2
 8000466:	9300      	str	r3, [sp, #0]
 8000468:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800046c:	221e      	movs	r2, #30
 800046e:	210a      	movs	r1, #10
 8000470:	48c6      	ldr	r0, [pc, #792]	; (800078c <_DrawFuncSelectMenu+0x35c>)
 8000472:	f008 f9c1 	bl	80087f8 <ILI9341_Draw_Text>
			ILI9341_Draw_Text("- SQUARE", 	10, 50, BLACK, 2, WHITE);
 8000476:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800047a:	9301      	str	r3, [sp, #4]
 800047c:	2302      	movs	r3, #2
 800047e:	9300      	str	r3, [sp, #0]
 8000480:	2300      	movs	r3, #0
 8000482:	2232      	movs	r2, #50	; 0x32
 8000484:	210a      	movs	r1, #10
 8000486:	48c2      	ldr	r0, [pc, #776]	; (8000790 <_DrawFuncSelectMenu+0x360>)
 8000488:	f008 f9b6 	bl	80087f8 <ILI9341_Draw_Text>
			ILI9341_Draw_Text("- SAW", 		10, 70, BLACK, 2, WHITE);
 800048c:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000490:	9301      	str	r3, [sp, #4]
 8000492:	2302      	movs	r3, #2
 8000494:	9300      	str	r3, [sp, #0]
 8000496:	2300      	movs	r3, #0
 8000498:	2246      	movs	r2, #70	; 0x46
 800049a:	210a      	movs	r1, #10
 800049c:	48bd      	ldr	r0, [pc, #756]	; (8000794 <_DrawFuncSelectMenu+0x364>)
 800049e:	f008 f9ab 	bl	80087f8 <ILI9341_Draw_Text>
			ILI9341_Draw_Text("- REV SAW", 	10, 90, BLACK, 2, WHITE);
 80004a2:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80004a6:	9301      	str	r3, [sp, #4]
 80004a8:	2302      	movs	r3, #2
 80004aa:	9300      	str	r3, [sp, #0]
 80004ac:	2300      	movs	r3, #0
 80004ae:	225a      	movs	r2, #90	; 0x5a
 80004b0:	210a      	movs	r1, #10
 80004b2:	48b9      	ldr	r0, [pc, #740]	; (8000798 <_DrawFuncSelectMenu+0x368>)
 80004b4:	f008 f9a0 	bl	80087f8 <ILI9341_Draw_Text>
			ILI9341_Draw_Text("- TRIANGLE",	10, 110, BLACK, 2, WHITE);
 80004b8:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80004bc:	9301      	str	r3, [sp, #4]
 80004be:	2302      	movs	r3, #2
 80004c0:	9300      	str	r3, [sp, #0]
 80004c2:	2300      	movs	r3, #0
 80004c4:	226e      	movs	r2, #110	; 0x6e
 80004c6:	210a      	movs	r1, #10
 80004c8:	48b4      	ldr	r0, [pc, #720]	; (800079c <_DrawFuncSelectMenu+0x36c>)
 80004ca:	f008 f995 	bl	80087f8 <ILI9341_Draw_Text>
			ILI9341_Draw_Text("- UNIT", 	10, 130, BLACK, 2, WHITE);
 80004ce:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80004d2:	9301      	str	r3, [sp, #4]
 80004d4:	2302      	movs	r3, #2
 80004d6:	9300      	str	r3, [sp, #0]
 80004d8:	2300      	movs	r3, #0
 80004da:	2282      	movs	r2, #130	; 0x82
 80004dc:	210a      	movs	r1, #10
 80004de:	48b0      	ldr	r0, [pc, #704]	; (80007a0 <_DrawFuncSelectMenu+0x370>)
 80004e0:	f008 f98a 	bl	80087f8 <ILI9341_Draw_Text>
			break;
 80004e4:	e14e      	b.n	8000784 <_DrawFuncSelectMenu+0x354>
		case Square_Out_Mode:
			ILI9341_Draw_Text("- SINE", 	10, 30, BLACK, 2, WHITE);
 80004e6:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80004ea:	9301      	str	r3, [sp, #4]
 80004ec:	2302      	movs	r3, #2
 80004ee:	9300      	str	r3, [sp, #0]
 80004f0:	2300      	movs	r3, #0
 80004f2:	221e      	movs	r2, #30
 80004f4:	210a      	movs	r1, #10
 80004f6:	48a5      	ldr	r0, [pc, #660]	; (800078c <_DrawFuncSelectMenu+0x35c>)
 80004f8:	f008 f97e 	bl	80087f8 <ILI9341_Draw_Text>
			ILI9341_Draw_Text("- SQUARE", 	10, 50, WHITE, 2, BLACK);
 80004fc:	2300      	movs	r3, #0
 80004fe:	9301      	str	r3, [sp, #4]
 8000500:	2302      	movs	r3, #2
 8000502:	9300      	str	r3, [sp, #0]
 8000504:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000508:	2232      	movs	r2, #50	; 0x32
 800050a:	210a      	movs	r1, #10
 800050c:	48a0      	ldr	r0, [pc, #640]	; (8000790 <_DrawFuncSelectMenu+0x360>)
 800050e:	f008 f973 	bl	80087f8 <ILI9341_Draw_Text>
			ILI9341_Draw_Text("- SAW", 		10, 70, BLACK, 2, WHITE);
 8000512:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000516:	9301      	str	r3, [sp, #4]
 8000518:	2302      	movs	r3, #2
 800051a:	9300      	str	r3, [sp, #0]
 800051c:	2300      	movs	r3, #0
 800051e:	2246      	movs	r2, #70	; 0x46
 8000520:	210a      	movs	r1, #10
 8000522:	489c      	ldr	r0, [pc, #624]	; (8000794 <_DrawFuncSelectMenu+0x364>)
 8000524:	f008 f968 	bl	80087f8 <ILI9341_Draw_Text>
			ILI9341_Draw_Text("- REV SAW", 	10, 90, BLACK, 2, WHITE);
 8000528:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800052c:	9301      	str	r3, [sp, #4]
 800052e:	2302      	movs	r3, #2
 8000530:	9300      	str	r3, [sp, #0]
 8000532:	2300      	movs	r3, #0
 8000534:	225a      	movs	r2, #90	; 0x5a
 8000536:	210a      	movs	r1, #10
 8000538:	4897      	ldr	r0, [pc, #604]	; (8000798 <_DrawFuncSelectMenu+0x368>)
 800053a:	f008 f95d 	bl	80087f8 <ILI9341_Draw_Text>
			ILI9341_Draw_Text("- TRIANGLE",	10, 110, BLACK, 2, WHITE);
 800053e:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000542:	9301      	str	r3, [sp, #4]
 8000544:	2302      	movs	r3, #2
 8000546:	9300      	str	r3, [sp, #0]
 8000548:	2300      	movs	r3, #0
 800054a:	226e      	movs	r2, #110	; 0x6e
 800054c:	210a      	movs	r1, #10
 800054e:	4893      	ldr	r0, [pc, #588]	; (800079c <_DrawFuncSelectMenu+0x36c>)
 8000550:	f008 f952 	bl	80087f8 <ILI9341_Draw_Text>
			ILI9341_Draw_Text("- UNIT", 	10, 130, BLACK, 2, WHITE);
 8000554:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000558:	9301      	str	r3, [sp, #4]
 800055a:	2302      	movs	r3, #2
 800055c:	9300      	str	r3, [sp, #0]
 800055e:	2300      	movs	r3, #0
 8000560:	2282      	movs	r2, #130	; 0x82
 8000562:	210a      	movs	r1, #10
 8000564:	488e      	ldr	r0, [pc, #568]	; (80007a0 <_DrawFuncSelectMenu+0x370>)
 8000566:	f008 f947 	bl	80087f8 <ILI9341_Draw_Text>
			break;
 800056a:	e10b      	b.n	8000784 <_DrawFuncSelectMenu+0x354>
		case Saw_Out_Mode:
			ILI9341_Draw_Text("- SINE", 	10, 30, BLACK, 2, WHITE);
 800056c:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000570:	9301      	str	r3, [sp, #4]
 8000572:	2302      	movs	r3, #2
 8000574:	9300      	str	r3, [sp, #0]
 8000576:	2300      	movs	r3, #0
 8000578:	221e      	movs	r2, #30
 800057a:	210a      	movs	r1, #10
 800057c:	4883      	ldr	r0, [pc, #524]	; (800078c <_DrawFuncSelectMenu+0x35c>)
 800057e:	f008 f93b 	bl	80087f8 <ILI9341_Draw_Text>
			ILI9341_Draw_Text("- SQUARE", 	10, 50, BLACK, 2, WHITE);
 8000582:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000586:	9301      	str	r3, [sp, #4]
 8000588:	2302      	movs	r3, #2
 800058a:	9300      	str	r3, [sp, #0]
 800058c:	2300      	movs	r3, #0
 800058e:	2232      	movs	r2, #50	; 0x32
 8000590:	210a      	movs	r1, #10
 8000592:	487f      	ldr	r0, [pc, #508]	; (8000790 <_DrawFuncSelectMenu+0x360>)
 8000594:	f008 f930 	bl	80087f8 <ILI9341_Draw_Text>
			ILI9341_Draw_Text("- SAW", 		10, 70, WHITE, 2, BLACK);
 8000598:	2300      	movs	r3, #0
 800059a:	9301      	str	r3, [sp, #4]
 800059c:	2302      	movs	r3, #2
 800059e:	9300      	str	r3, [sp, #0]
 80005a0:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80005a4:	2246      	movs	r2, #70	; 0x46
 80005a6:	210a      	movs	r1, #10
 80005a8:	487a      	ldr	r0, [pc, #488]	; (8000794 <_DrawFuncSelectMenu+0x364>)
 80005aa:	f008 f925 	bl	80087f8 <ILI9341_Draw_Text>
			ILI9341_Draw_Text("- REV SAW", 	10, 90, BLACK, 2, WHITE);
 80005ae:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80005b2:	9301      	str	r3, [sp, #4]
 80005b4:	2302      	movs	r3, #2
 80005b6:	9300      	str	r3, [sp, #0]
 80005b8:	2300      	movs	r3, #0
 80005ba:	225a      	movs	r2, #90	; 0x5a
 80005bc:	210a      	movs	r1, #10
 80005be:	4876      	ldr	r0, [pc, #472]	; (8000798 <_DrawFuncSelectMenu+0x368>)
 80005c0:	f008 f91a 	bl	80087f8 <ILI9341_Draw_Text>
			ILI9341_Draw_Text("- TRIANGLE",	10, 110, BLACK, 2, WHITE);
 80005c4:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80005c8:	9301      	str	r3, [sp, #4]
 80005ca:	2302      	movs	r3, #2
 80005cc:	9300      	str	r3, [sp, #0]
 80005ce:	2300      	movs	r3, #0
 80005d0:	226e      	movs	r2, #110	; 0x6e
 80005d2:	210a      	movs	r1, #10
 80005d4:	4871      	ldr	r0, [pc, #452]	; (800079c <_DrawFuncSelectMenu+0x36c>)
 80005d6:	f008 f90f 	bl	80087f8 <ILI9341_Draw_Text>
			ILI9341_Draw_Text("- UNIT", 	10, 130, BLACK, 2, WHITE);
 80005da:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80005de:	9301      	str	r3, [sp, #4]
 80005e0:	2302      	movs	r3, #2
 80005e2:	9300      	str	r3, [sp, #0]
 80005e4:	2300      	movs	r3, #0
 80005e6:	2282      	movs	r2, #130	; 0x82
 80005e8:	210a      	movs	r1, #10
 80005ea:	486d      	ldr	r0, [pc, #436]	; (80007a0 <_DrawFuncSelectMenu+0x370>)
 80005ec:	f008 f904 	bl	80087f8 <ILI9341_Draw_Text>
			break;
 80005f0:	e0c8      	b.n	8000784 <_DrawFuncSelectMenu+0x354>
		case RevSaw_Out_Mode:
			ILI9341_Draw_Text("- SINE", 	10, 30, BLACK, 2, WHITE);
 80005f2:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80005f6:	9301      	str	r3, [sp, #4]
 80005f8:	2302      	movs	r3, #2
 80005fa:	9300      	str	r3, [sp, #0]
 80005fc:	2300      	movs	r3, #0
 80005fe:	221e      	movs	r2, #30
 8000600:	210a      	movs	r1, #10
 8000602:	4862      	ldr	r0, [pc, #392]	; (800078c <_DrawFuncSelectMenu+0x35c>)
 8000604:	f008 f8f8 	bl	80087f8 <ILI9341_Draw_Text>
			ILI9341_Draw_Text("- SQUARE", 	10, 50, BLACK, 2, WHITE);
 8000608:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800060c:	9301      	str	r3, [sp, #4]
 800060e:	2302      	movs	r3, #2
 8000610:	9300      	str	r3, [sp, #0]
 8000612:	2300      	movs	r3, #0
 8000614:	2232      	movs	r2, #50	; 0x32
 8000616:	210a      	movs	r1, #10
 8000618:	485d      	ldr	r0, [pc, #372]	; (8000790 <_DrawFuncSelectMenu+0x360>)
 800061a:	f008 f8ed 	bl	80087f8 <ILI9341_Draw_Text>
			ILI9341_Draw_Text("- SAW", 		10, 70, BLACK, 2, WHITE);
 800061e:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000622:	9301      	str	r3, [sp, #4]
 8000624:	2302      	movs	r3, #2
 8000626:	9300      	str	r3, [sp, #0]
 8000628:	2300      	movs	r3, #0
 800062a:	2246      	movs	r2, #70	; 0x46
 800062c:	210a      	movs	r1, #10
 800062e:	4859      	ldr	r0, [pc, #356]	; (8000794 <_DrawFuncSelectMenu+0x364>)
 8000630:	f008 f8e2 	bl	80087f8 <ILI9341_Draw_Text>
			ILI9341_Draw_Text("- REV SAW", 	10, 90, WHITE, 2, BLACK);
 8000634:	2300      	movs	r3, #0
 8000636:	9301      	str	r3, [sp, #4]
 8000638:	2302      	movs	r3, #2
 800063a:	9300      	str	r3, [sp, #0]
 800063c:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000640:	225a      	movs	r2, #90	; 0x5a
 8000642:	210a      	movs	r1, #10
 8000644:	4854      	ldr	r0, [pc, #336]	; (8000798 <_DrawFuncSelectMenu+0x368>)
 8000646:	f008 f8d7 	bl	80087f8 <ILI9341_Draw_Text>
			ILI9341_Draw_Text("- TRIANGLE",	10, 110, BLACK, 2, WHITE);
 800064a:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800064e:	9301      	str	r3, [sp, #4]
 8000650:	2302      	movs	r3, #2
 8000652:	9300      	str	r3, [sp, #0]
 8000654:	2300      	movs	r3, #0
 8000656:	226e      	movs	r2, #110	; 0x6e
 8000658:	210a      	movs	r1, #10
 800065a:	4850      	ldr	r0, [pc, #320]	; (800079c <_DrawFuncSelectMenu+0x36c>)
 800065c:	f008 f8cc 	bl	80087f8 <ILI9341_Draw_Text>
			ILI9341_Draw_Text("- UNIT", 	10, 130, BLACK, 2, WHITE);
 8000660:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000664:	9301      	str	r3, [sp, #4]
 8000666:	2302      	movs	r3, #2
 8000668:	9300      	str	r3, [sp, #0]
 800066a:	2300      	movs	r3, #0
 800066c:	2282      	movs	r2, #130	; 0x82
 800066e:	210a      	movs	r1, #10
 8000670:	484b      	ldr	r0, [pc, #300]	; (80007a0 <_DrawFuncSelectMenu+0x370>)
 8000672:	f008 f8c1 	bl	80087f8 <ILI9341_Draw_Text>
			break;
 8000676:	e085      	b.n	8000784 <_DrawFuncSelectMenu+0x354>
		case Triangle_Out_Mode:
			ILI9341_Draw_Text("- SINE", 	10, 30, BLACK, 2, WHITE);
 8000678:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800067c:	9301      	str	r3, [sp, #4]
 800067e:	2302      	movs	r3, #2
 8000680:	9300      	str	r3, [sp, #0]
 8000682:	2300      	movs	r3, #0
 8000684:	221e      	movs	r2, #30
 8000686:	210a      	movs	r1, #10
 8000688:	4840      	ldr	r0, [pc, #256]	; (800078c <_DrawFuncSelectMenu+0x35c>)
 800068a:	f008 f8b5 	bl	80087f8 <ILI9341_Draw_Text>
			ILI9341_Draw_Text("- SQUARE", 	10, 50, BLACK, 2, WHITE);
 800068e:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000692:	9301      	str	r3, [sp, #4]
 8000694:	2302      	movs	r3, #2
 8000696:	9300      	str	r3, [sp, #0]
 8000698:	2300      	movs	r3, #0
 800069a:	2232      	movs	r2, #50	; 0x32
 800069c:	210a      	movs	r1, #10
 800069e:	483c      	ldr	r0, [pc, #240]	; (8000790 <_DrawFuncSelectMenu+0x360>)
 80006a0:	f008 f8aa 	bl	80087f8 <ILI9341_Draw_Text>
			ILI9341_Draw_Text("- SAW", 		10, 70, BLACK, 2, WHITE);
 80006a4:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80006a8:	9301      	str	r3, [sp, #4]
 80006aa:	2302      	movs	r3, #2
 80006ac:	9300      	str	r3, [sp, #0]
 80006ae:	2300      	movs	r3, #0
 80006b0:	2246      	movs	r2, #70	; 0x46
 80006b2:	210a      	movs	r1, #10
 80006b4:	4837      	ldr	r0, [pc, #220]	; (8000794 <_DrawFuncSelectMenu+0x364>)
 80006b6:	f008 f89f 	bl	80087f8 <ILI9341_Draw_Text>
			ILI9341_Draw_Text("- REV SAW", 	10, 90, BLACK, 2, WHITE);
 80006ba:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80006be:	9301      	str	r3, [sp, #4]
 80006c0:	2302      	movs	r3, #2
 80006c2:	9300      	str	r3, [sp, #0]
 80006c4:	2300      	movs	r3, #0
 80006c6:	225a      	movs	r2, #90	; 0x5a
 80006c8:	210a      	movs	r1, #10
 80006ca:	4833      	ldr	r0, [pc, #204]	; (8000798 <_DrawFuncSelectMenu+0x368>)
 80006cc:	f008 f894 	bl	80087f8 <ILI9341_Draw_Text>
			ILI9341_Draw_Text("- TRIANGLE",	10, 110, WHITE, 2, BLACK);
 80006d0:	2300      	movs	r3, #0
 80006d2:	9301      	str	r3, [sp, #4]
 80006d4:	2302      	movs	r3, #2
 80006d6:	9300      	str	r3, [sp, #0]
 80006d8:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80006dc:	226e      	movs	r2, #110	; 0x6e
 80006de:	210a      	movs	r1, #10
 80006e0:	482e      	ldr	r0, [pc, #184]	; (800079c <_DrawFuncSelectMenu+0x36c>)
 80006e2:	f008 f889 	bl	80087f8 <ILI9341_Draw_Text>
			ILI9341_Draw_Text("- UNIT", 	10, 130, BLACK, 2, WHITE);
 80006e6:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80006ea:	9301      	str	r3, [sp, #4]
 80006ec:	2302      	movs	r3, #2
 80006ee:	9300      	str	r3, [sp, #0]
 80006f0:	2300      	movs	r3, #0
 80006f2:	2282      	movs	r2, #130	; 0x82
 80006f4:	210a      	movs	r1, #10
 80006f6:	482a      	ldr	r0, [pc, #168]	; (80007a0 <_DrawFuncSelectMenu+0x370>)
 80006f8:	f008 f87e 	bl	80087f8 <ILI9341_Draw_Text>
			break;
 80006fc:	e042      	b.n	8000784 <_DrawFuncSelectMenu+0x354>
		case Impulse_Out_Mode:
			ILI9341_Draw_Text("- SINE", 	10, 30, BLACK, 2, WHITE);
 80006fe:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000702:	9301      	str	r3, [sp, #4]
 8000704:	2302      	movs	r3, #2
 8000706:	9300      	str	r3, [sp, #0]
 8000708:	2300      	movs	r3, #0
 800070a:	221e      	movs	r2, #30
 800070c:	210a      	movs	r1, #10
 800070e:	481f      	ldr	r0, [pc, #124]	; (800078c <_DrawFuncSelectMenu+0x35c>)
 8000710:	f008 f872 	bl	80087f8 <ILI9341_Draw_Text>
			ILI9341_Draw_Text("- SQUARE", 	10, 50, BLACK, 2, WHITE);
 8000714:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000718:	9301      	str	r3, [sp, #4]
 800071a:	2302      	movs	r3, #2
 800071c:	9300      	str	r3, [sp, #0]
 800071e:	2300      	movs	r3, #0
 8000720:	2232      	movs	r2, #50	; 0x32
 8000722:	210a      	movs	r1, #10
 8000724:	481a      	ldr	r0, [pc, #104]	; (8000790 <_DrawFuncSelectMenu+0x360>)
 8000726:	f008 f867 	bl	80087f8 <ILI9341_Draw_Text>
			ILI9341_Draw_Text("- SAW", 		10, 70, BLACK, 2, WHITE);
 800072a:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800072e:	9301      	str	r3, [sp, #4]
 8000730:	2302      	movs	r3, #2
 8000732:	9300      	str	r3, [sp, #0]
 8000734:	2300      	movs	r3, #0
 8000736:	2246      	movs	r2, #70	; 0x46
 8000738:	210a      	movs	r1, #10
 800073a:	4816      	ldr	r0, [pc, #88]	; (8000794 <_DrawFuncSelectMenu+0x364>)
 800073c:	f008 f85c 	bl	80087f8 <ILI9341_Draw_Text>
			ILI9341_Draw_Text("- REV SAW", 	10, 90, BLACK, 2, WHITE);
 8000740:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000744:	9301      	str	r3, [sp, #4]
 8000746:	2302      	movs	r3, #2
 8000748:	9300      	str	r3, [sp, #0]
 800074a:	2300      	movs	r3, #0
 800074c:	225a      	movs	r2, #90	; 0x5a
 800074e:	210a      	movs	r1, #10
 8000750:	4811      	ldr	r0, [pc, #68]	; (8000798 <_DrawFuncSelectMenu+0x368>)
 8000752:	f008 f851 	bl	80087f8 <ILI9341_Draw_Text>
			ILI9341_Draw_Text("- TRIANGLE",	10, 110, BLACK, 2, WHITE);
 8000756:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800075a:	9301      	str	r3, [sp, #4]
 800075c:	2302      	movs	r3, #2
 800075e:	9300      	str	r3, [sp, #0]
 8000760:	2300      	movs	r3, #0
 8000762:	226e      	movs	r2, #110	; 0x6e
 8000764:	210a      	movs	r1, #10
 8000766:	480d      	ldr	r0, [pc, #52]	; (800079c <_DrawFuncSelectMenu+0x36c>)
 8000768:	f008 f846 	bl	80087f8 <ILI9341_Draw_Text>
			ILI9341_Draw_Text("- UNIT", 	10, 130, WHITE, 2, BLACK);
 800076c:	2300      	movs	r3, #0
 800076e:	9301      	str	r3, [sp, #4]
 8000770:	2302      	movs	r3, #2
 8000772:	9300      	str	r3, [sp, #0]
 8000774:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000778:	2282      	movs	r2, #130	; 0x82
 800077a:	210a      	movs	r1, #10
 800077c:	4808      	ldr	r0, [pc, #32]	; (80007a0 <_DrawFuncSelectMenu+0x370>)
 800077e:	f008 f83b 	bl	80087f8 <ILI9341_Draw_Text>
			break;
 8000782:	bf00      	nop

	}

}
 8000784:	bf00      	nop
 8000786:	46bd      	mov	sp, r7
 8000788:	bd80      	pop	{r7, pc}
 800078a:	bf00      	nop
 800078c:	0800a2a4 	.word	0x0800a2a4
 8000790:	0800a2ac 	.word	0x0800a2ac
 8000794:	0800a2b8 	.word	0x0800a2b8
 8000798:	0800a2c0 	.word	0x0800a2c0
 800079c:	0800a2cc 	.word	0x0800a2cc
 80007a0:	0800a2d8 	.word	0x0800a2d8

080007a4 <DM_ShowGainSelectMenu>:
 *
 *
 *
 */
void DM_ShowGainSelectMenu(eGainMenu_Status pValue)
{
 80007a4:	b480      	push	{r7}
 80007a6:	b083      	sub	sp, #12
 80007a8:	af00      	add	r7, sp, #0
 80007aa:	4603      	mov	r3, r0
 80007ac:	71fb      	strb	r3, [r7, #7]
	eNextGainMenuStatus = pValue;
 80007ae:	4a04      	ldr	r2, [pc, #16]	; (80007c0 <DM_ShowGainSelectMenu+0x1c>)
 80007b0:	79fb      	ldrb	r3, [r7, #7]
 80007b2:	7013      	strb	r3, [r2, #0]
}
 80007b4:	bf00      	nop
 80007b6:	370c      	adds	r7, #12
 80007b8:	46bd      	mov	sp, r7
 80007ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007be:	4770      	bx	lr
 80007c0:	20000be5 	.word	0x20000be5

080007c4 <_DrawGainSelectMenu>:
 *
 *
 *
 */
void _DrawGainSelectMenu()
{
 80007c4:	b580      	push	{r7, lr}
 80007c6:	b086      	sub	sp, #24
 80007c8:	af02      	add	r7, sp, #8

	ILI9341_Draw_Text("Output Signal Gain: ", 	10, 120, BLACK, 2, WHITE);
 80007ca:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80007ce:	9301      	str	r3, [sp, #4]
 80007d0:	2302      	movs	r3, #2
 80007d2:	9300      	str	r3, [sp, #0]
 80007d4:	2300      	movs	r3, #0
 80007d6:	2278      	movs	r2, #120	; 0x78
 80007d8:	210a      	movs	r1, #10
 80007da:	4811      	ldr	r0, [pc, #68]	; (8000820 <_DrawGainSelectMenu+0x5c>)
 80007dc:	f008 f80c 	bl	80087f8 <ILI9341_Draw_Text>

	char gain[11] = "";
 80007e0:	2300      	movs	r3, #0
 80007e2:	607b      	str	r3, [r7, #4]
 80007e4:	f107 0308 	add.w	r3, r7, #8
 80007e8:	2200      	movs	r2, #0
 80007ea:	601a      	str	r2, [r3, #0]
 80007ec:	f8c3 2003 	str.w	r2, [r3, #3]
	snprintf(gain, sizeof(gain), "%u", GO_GetOutputGain());
 80007f0:	f000 fcbe 	bl	8001170 <GO_GetOutputGain>
 80007f4:	4603      	mov	r3, r0
 80007f6:	1d38      	adds	r0, r7, #4
 80007f8:	4a0a      	ldr	r2, [pc, #40]	; (8000824 <_DrawGainSelectMenu+0x60>)
 80007fa:	210b      	movs	r1, #11
 80007fc:	f008 fdc0 	bl	8009380 <sniprintf>
	ILI9341_Draw_Text(gain, 250, 120, WHITE, 2, BLACK);
 8000800:	1d38      	adds	r0, r7, #4
 8000802:	2300      	movs	r3, #0
 8000804:	9301      	str	r3, [sp, #4]
 8000806:	2302      	movs	r3, #2
 8000808:	9300      	str	r3, [sp, #0]
 800080a:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800080e:	2278      	movs	r2, #120	; 0x78
 8000810:	21fa      	movs	r1, #250	; 0xfa
 8000812:	f007 fff1 	bl	80087f8 <ILI9341_Draw_Text>

}
 8000816:	bf00      	nop
 8000818:	3710      	adds	r7, #16
 800081a:	46bd      	mov	sp, r7
 800081c:	bd80      	pop	{r7, pc}
 800081e:	bf00      	nop
 8000820:	0800a2e0 	.word	0x0800a2e0
 8000824:	0800a2f8 	.word	0x0800a2f8

08000828 <DM_ShowFreqSelectMenu>:
 *
 *
 *
 */
void DM_ShowFreqSelectMenu(eFreqMenu_Status pValue)
{
 8000828:	b480      	push	{r7}
 800082a:	b083      	sub	sp, #12
 800082c:	af00      	add	r7, sp, #0
 800082e:	4603      	mov	r3, r0
 8000830:	71fb      	strb	r3, [r7, #7]
	eNextFreqMenuStatus = pValue;
 8000832:	4a04      	ldr	r2, [pc, #16]	; (8000844 <DM_ShowFreqSelectMenu+0x1c>)
 8000834:	79fb      	ldrb	r3, [r7, #7]
 8000836:	7013      	strb	r3, [r2, #0]
}
 8000838:	bf00      	nop
 800083a:	370c      	adds	r7, #12
 800083c:	46bd      	mov	sp, r7
 800083e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000842:	4770      	bx	lr
 8000844:	20000be6 	.word	0x20000be6

08000848 <_DrawFreqSelectMenu>:
 *
 *
 *
 */
void _DrawFreqSelectMenu()
{
 8000848:	b580      	push	{r7, lr}
 800084a:	b086      	sub	sp, #24
 800084c:	af02      	add	r7, sp, #8
	ILI9341_Draw_Text("Output Signal Freq: ", 	10, 120, BLACK, 2, WHITE);
 800084e:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000852:	9301      	str	r3, [sp, #4]
 8000854:	2302      	movs	r3, #2
 8000856:	9300      	str	r3, [sp, #0]
 8000858:	2300      	movs	r3, #0
 800085a:	2278      	movs	r2, #120	; 0x78
 800085c:	210a      	movs	r1, #10
 800085e:	4811      	ldr	r0, [pc, #68]	; (80008a4 <_DrawFreqSelectMenu+0x5c>)
 8000860:	f007 ffca 	bl	80087f8 <ILI9341_Draw_Text>

	char freq[11] = "";
 8000864:	2300      	movs	r3, #0
 8000866:	607b      	str	r3, [r7, #4]
 8000868:	f107 0308 	add.w	r3, r7, #8
 800086c:	2200      	movs	r2, #0
 800086e:	601a      	str	r2, [r3, #0]
 8000870:	f8c3 2003 	str.w	r2, [r3, #3]
	snprintf(freq, sizeof(freq), "%u", (uint8_t)EM_GetOutputFreq());
 8000874:	f000 faaa 	bl	8000dcc <EM_GetOutputFreq>
 8000878:	4603      	mov	r3, r0
 800087a:	b2db      	uxtb	r3, r3
 800087c:	1d38      	adds	r0, r7, #4
 800087e:	4a0a      	ldr	r2, [pc, #40]	; (80008a8 <_DrawFreqSelectMenu+0x60>)
 8000880:	210b      	movs	r1, #11
 8000882:	f008 fd7d 	bl	8009380 <sniprintf>
	ILI9341_Draw_Text(freq, 250, 120, WHITE, 2, BLACK);
 8000886:	1d38      	adds	r0, r7, #4
 8000888:	2300      	movs	r3, #0
 800088a:	9301      	str	r3, [sp, #4]
 800088c:	2302      	movs	r3, #2
 800088e:	9300      	str	r3, [sp, #0]
 8000890:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000894:	2278      	movs	r2, #120	; 0x78
 8000896:	21fa      	movs	r1, #250	; 0xfa
 8000898:	f007 ffae 	bl	80087f8 <ILI9341_Draw_Text>
}
 800089c:	bf00      	nop
 800089e:	3710      	adds	r7, #16
 80008a0:	46bd      	mov	sp, r7
 80008a2:	bd80      	pop	{r7, pc}
 80008a4:	0800a2fc 	.word	0x0800a2fc
 80008a8:	0800a2f8 	.word	0x0800a2f8

080008ac <DM_ShowBiasSelectMenu>:
 *
 *
 *
 */
void DM_ShowBiasSelectMenu(eBiasMenu_Status pValue)
{
 80008ac:	b480      	push	{r7}
 80008ae:	b083      	sub	sp, #12
 80008b0:	af00      	add	r7, sp, #0
 80008b2:	4603      	mov	r3, r0
 80008b4:	71fb      	strb	r3, [r7, #7]
	eNextBiasMenuStatus = pValue;
 80008b6:	4a04      	ldr	r2, [pc, #16]	; (80008c8 <DM_ShowBiasSelectMenu+0x1c>)
 80008b8:	79fb      	ldrb	r3, [r7, #7]
 80008ba:	7013      	strb	r3, [r2, #0]
}
 80008bc:	bf00      	nop
 80008be:	370c      	adds	r7, #12
 80008c0:	46bd      	mov	sp, r7
 80008c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008c6:	4770      	bx	lr
 80008c8:	20000be7 	.word	0x20000be7

080008cc <_DrawBiasSelectMenu>:
 *
 *
 *
 */
void _DrawBiasSelectMenu()
{
 80008cc:	b580      	push	{r7, lr}
 80008ce:	b086      	sub	sp, #24
 80008d0:	af02      	add	r7, sp, #8
	ILI9341_Draw_Text("Output Signal Bias: ", 	10, 120, BLACK, 2, WHITE);
 80008d2:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80008d6:	9301      	str	r3, [sp, #4]
 80008d8:	2302      	movs	r3, #2
 80008da:	9300      	str	r3, [sp, #0]
 80008dc:	2300      	movs	r3, #0
 80008de:	2278      	movs	r2, #120	; 0x78
 80008e0:	210a      	movs	r1, #10
 80008e2:	4811      	ldr	r0, [pc, #68]	; (8000928 <_DrawBiasSelectMenu+0x5c>)
 80008e4:	f007 ff88 	bl	80087f8 <ILI9341_Draw_Text>

	char bias[11] = "";
 80008e8:	2300      	movs	r3, #0
 80008ea:	607b      	str	r3, [r7, #4]
 80008ec:	f107 0308 	add.w	r3, r7, #8
 80008f0:	2200      	movs	r2, #0
 80008f2:	601a      	str	r2, [r3, #0]
 80008f4:	f8c3 2003 	str.w	r2, [r3, #3]
	snprintf(bias, sizeof(bias), "%u", (uint8_t)EM_GetOutputBias());
 80008f8:	f000 fa74 	bl	8000de4 <EM_GetOutputBias>
 80008fc:	4603      	mov	r3, r0
 80008fe:	b2db      	uxtb	r3, r3
 8000900:	1d38      	adds	r0, r7, #4
 8000902:	4a0a      	ldr	r2, [pc, #40]	; (800092c <_DrawBiasSelectMenu+0x60>)
 8000904:	210b      	movs	r1, #11
 8000906:	f008 fd3b 	bl	8009380 <sniprintf>
	ILI9341_Draw_Text(bias, 250, 120, WHITE, 2, BLACK);
 800090a:	1d38      	adds	r0, r7, #4
 800090c:	2300      	movs	r3, #0
 800090e:	9301      	str	r3, [sp, #4]
 8000910:	2302      	movs	r3, #2
 8000912:	9300      	str	r3, [sp, #0]
 8000914:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000918:	2278      	movs	r2, #120	; 0x78
 800091a:	21fa      	movs	r1, #250	; 0xfa
 800091c:	f007 ff6c 	bl	80087f8 <ILI9341_Draw_Text>
}
 8000920:	bf00      	nop
 8000922:	3710      	adds	r7, #16
 8000924:	46bd      	mov	sp, r7
 8000926:	bd80      	pop	{r7, pc}
 8000928:	0800a314 	.word	0x0800a314
 800092c:	0800a2f8 	.word	0x0800a2f8

08000930 <DM_RefreshBackgroundLayout>:
 * Call this only once during init.
 *
 *
 */
void DM_RefreshBackgroundLayout()
{
 8000930:	b580      	push	{r7, lr}
 8000932:	b084      	sub	sp, #16
 8000934:	af04      	add	r7, sp, #16


	ILI9341_Fill_Screen(WHITE);
 8000936:	f64f 70ff 	movw	r0, #65535	; 0xffff
 800093a:	f008 fa71 	bl	8008e20 <ILI9341_Fill_Screen>

	ILI9341_Draw_Bordered_Filled_Rectangle_Coord(	btn_x_pos[0],
 800093e:	4b1d      	ldr	r3, [pc, #116]	; (80009b4 <DM_RefreshBackgroundLayout+0x84>)
 8000940:	8818      	ldrh	r0, [r3, #0]
 8000942:	2300      	movs	r3, #0
 8000944:	9302      	str	r3, [sp, #8]
 8000946:	2302      	movs	r3, #2
 8000948:	9301      	str	r3, [sp, #4]
 800094a:	f240 33ef 	movw	r3, #1007	; 0x3ef
 800094e:	9300      	str	r3, [sp, #0]
 8000950:	2332      	movs	r3, #50	; 0x32
 8000952:	2250      	movs	r2, #80	; 0x50
 8000954:	21c8      	movs	r1, #200	; 0xc8
 8000956:	f007 fde5 	bl	8008524 <ILI9341_Draw_Bordered_Filled_Rectangle_Coord>
													BTN_HEIGHT,
													DARKCYAN,
													BORDER_SIZE,
													BLACK);

	ILI9341_Draw_Bordered_Filled_Rectangle_Coord(	btn_x_pos[1],
 800095a:	4b16      	ldr	r3, [pc, #88]	; (80009b4 <DM_RefreshBackgroundLayout+0x84>)
 800095c:	8858      	ldrh	r0, [r3, #2]
 800095e:	2300      	movs	r3, #0
 8000960:	9302      	str	r3, [sp, #8]
 8000962:	2302      	movs	r3, #2
 8000964:	9301      	str	r3, [sp, #4]
 8000966:	f44f 7378 	mov.w	r3, #992	; 0x3e0
 800096a:	9300      	str	r3, [sp, #0]
 800096c:	2332      	movs	r3, #50	; 0x32
 800096e:	2250      	movs	r2, #80	; 0x50
 8000970:	21c8      	movs	r1, #200	; 0xc8
 8000972:	f007 fdd7 	bl	8008524 <ILI9341_Draw_Bordered_Filled_Rectangle_Coord>
													BTN_HEIGHT,
													DARKGREEN,
													BORDER_SIZE,
													BLACK);

	ILI9341_Draw_Bordered_Filled_Rectangle_Coord(	btn_x_pos[2],
 8000976:	4b0f      	ldr	r3, [pc, #60]	; (80009b4 <DM_RefreshBackgroundLayout+0x84>)
 8000978:	8898      	ldrh	r0, [r3, #4]
 800097a:	2300      	movs	r3, #0
 800097c:	9302      	str	r3, [sp, #8]
 800097e:	2302      	movs	r3, #2
 8000980:	9301      	str	r3, [sp, #4]
 8000982:	f64f 73e0 	movw	r3, #65504	; 0xffe0
 8000986:	9300      	str	r3, [sp, #0]
 8000988:	2332      	movs	r3, #50	; 0x32
 800098a:	2250      	movs	r2, #80	; 0x50
 800098c:	21c8      	movs	r1, #200	; 0xc8
 800098e:	f007 fdc9 	bl	8008524 <ILI9341_Draw_Bordered_Filled_Rectangle_Coord>
													BTN_HEIGHT,
													YELLOW,
													BORDER_SIZE,
													BLACK);

	ILI9341_Draw_Bordered_Filled_Rectangle_Coord(	btn_x_pos[3],
 8000992:	4b08      	ldr	r3, [pc, #32]	; (80009b4 <DM_RefreshBackgroundLayout+0x84>)
 8000994:	88d8      	ldrh	r0, [r3, #6]
 8000996:	2300      	movs	r3, #0
 8000998:	9302      	str	r3, [sp, #8]
 800099a:	2302      	movs	r3, #2
 800099c:	9301      	str	r3, [sp, #4]
 800099e:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 80009a2:	9300      	str	r3, [sp, #0]
 80009a4:	2332      	movs	r3, #50	; 0x32
 80009a6:	2250      	movs	r2, #80	; 0x50
 80009a8:	21c8      	movs	r1, #200	; 0xc8
 80009aa:	f007 fdbb 	bl	8008524 <ILI9341_Draw_Bordered_Filled_Rectangle_Coord>
													BTN_WIDTH,
													BTN_HEIGHT,
													RED,
													BORDER_SIZE,
													BLACK);
}
 80009ae:	bf00      	nop
 80009b0:	46bd      	mov	sp, r7
 80009b2:	bd80      	pop	{r7, pc}
 80009b4:	20000000 	.word	0x20000000

080009b8 <EM_ProcessEvent>:
 *
 * 	Main state machine for event process
 *
 */
void EM_ProcessEvent()
{
 80009b8:	b580      	push	{r7, lr}
 80009ba:	af00      	add	r7, sp, #0

	switch(eNextState)
 80009bc:	4b4d      	ldr	r3, [pc, #308]	; (8000af4 <EM_ProcessEvent+0x13c>)
 80009be:	781b      	ldrb	r3, [r3, #0]
 80009c0:	2b04      	cmp	r3, #4
 80009c2:	f200 808a 	bhi.w	8000ada <EM_ProcessEvent+0x122>
 80009c6:	a201      	add	r2, pc, #4	; (adr r2, 80009cc <EM_ProcessEvent+0x14>)
 80009c8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80009cc:	080009e1 	.word	0x080009e1
 80009d0:	08000a33 	.word	0x08000a33
 80009d4:	08000a5d 	.word	0x08000a5d
 80009d8:	08000a87 	.word	0x08000a87
 80009dc:	08000ab1 	.word	0x08000ab1
	{
		case Idle_State:
			if(eNewEvent == evFuncMenu)
 80009e0:	4b45      	ldr	r3, [pc, #276]	; (8000af8 <EM_ProcessEvent+0x140>)
 80009e2:	781b      	ldrb	r3, [r3, #0]
 80009e4:	2b01      	cmp	r3, #1
 80009e6:	d105      	bne.n	80009f4 <EM_ProcessEvent+0x3c>
			{
				eNextState = _FuncMenuHandler();
 80009e8:	f000 f888 	bl	8000afc <_FuncMenuHandler>
 80009ec:	4603      	mov	r3, r0
 80009ee:	461a      	mov	r2, r3
 80009f0:	4b40      	ldr	r3, [pc, #256]	; (8000af4 <EM_ProcessEvent+0x13c>)
 80009f2:	701a      	strb	r2, [r3, #0]
			}
			if(eNewEvent == evFreqMenu)
 80009f4:	4b40      	ldr	r3, [pc, #256]	; (8000af8 <EM_ProcessEvent+0x140>)
 80009f6:	781b      	ldrb	r3, [r3, #0]
 80009f8:	2b02      	cmp	r3, #2
 80009fa:	d105      	bne.n	8000a08 <EM_ProcessEvent+0x50>
			{
				eNextState = _FreqMenuHandler();
 80009fc:	f000 f988 	bl	8000d10 <_FreqMenuHandler>
 8000a00:	4603      	mov	r3, r0
 8000a02:	461a      	mov	r2, r3
 8000a04:	4b3b      	ldr	r3, [pc, #236]	; (8000af4 <EM_ProcessEvent+0x13c>)
 8000a06:	701a      	strb	r2, [r3, #0]
			}
			if(eNewEvent == evGainMenu)
 8000a08:	4b3b      	ldr	r3, [pc, #236]	; (8000af8 <EM_ProcessEvent+0x140>)
 8000a0a:	781b      	ldrb	r3, [r3, #0]
 8000a0c:	2b03      	cmp	r3, #3
 8000a0e:	d105      	bne.n	8000a1c <EM_ProcessEvent+0x64>
			{
				eNextState = _GainMenuHandler();
 8000a10:	f000 f8ba 	bl	8000b88 <_GainMenuHandler>
 8000a14:	4603      	mov	r3, r0
 8000a16:	461a      	mov	r2, r3
 8000a18:	4b36      	ldr	r3, [pc, #216]	; (8000af4 <EM_ProcessEvent+0x13c>)
 8000a1a:	701a      	strb	r2, [r3, #0]
			}
			if(eNewEvent == evBiasMenu)
 8000a1c:	4b36      	ldr	r3, [pc, #216]	; (8000af8 <EM_ProcessEvent+0x140>)
 8000a1e:	781b      	ldrb	r3, [r3, #0]
 8000a20:	2b04      	cmp	r3, #4
 8000a22:	d15c      	bne.n	8000ade <EM_ProcessEvent+0x126>
			{
				eNextState = _BiasMenuHandler();
 8000a24:	f000 f8f6 	bl	8000c14 <_BiasMenuHandler>
 8000a28:	4603      	mov	r3, r0
 8000a2a:	461a      	mov	r2, r3
 8000a2c:	4b31      	ldr	r3, [pc, #196]	; (8000af4 <EM_ProcessEvent+0x13c>)
 8000a2e:	701a      	strb	r2, [r3, #0]
			}

			break;
 8000a30:	e055      	b.n	8000ade <EM_ProcessEvent+0x126>

		case Func_Menu_State:
			if(eNewEvent == evEncoderSet)
 8000a32:	4b31      	ldr	r3, [pc, #196]	; (8000af8 <EM_ProcessEvent+0x140>)
 8000a34:	781b      	ldrb	r3, [r3, #0]
 8000a36:	2b05      	cmp	r3, #5
 8000a38:	d105      	bne.n	8000a46 <EM_ProcessEvent+0x8e>
			{
				eNextState = _FuncSetHandler();
 8000a3a:	f000 f871 	bl	8000b20 <_FuncSetHandler>
 8000a3e:	4603      	mov	r3, r0
 8000a40:	461a      	mov	r2, r3
 8000a42:	4b2c      	ldr	r3, [pc, #176]	; (8000af4 <EM_ProcessEvent+0x13c>)
 8000a44:	701a      	strb	r2, [r3, #0]
			}
			if(eNewEvent == evEncoderPush)
 8000a46:	4b2c      	ldr	r3, [pc, #176]	; (8000af8 <EM_ProcessEvent+0x140>)
 8000a48:	781b      	ldrb	r3, [r3, #0]
 8000a4a:	2b06      	cmp	r3, #6
 8000a4c:	d149      	bne.n	8000ae2 <EM_ProcessEvent+0x12a>
			{
				eNextState = _ExitFuncMenuHandler();
 8000a4e:	f000 f879 	bl	8000b44 <_ExitFuncMenuHandler>
 8000a52:	4603      	mov	r3, r0
 8000a54:	461a      	mov	r2, r3
 8000a56:	4b27      	ldr	r3, [pc, #156]	; (8000af4 <EM_ProcessEvent+0x13c>)
 8000a58:	701a      	strb	r2, [r3, #0]
			}
			break;
 8000a5a:	e042      	b.n	8000ae2 <EM_ProcessEvent+0x12a>

		case Gain_Menu_State:
			if(eNewEvent == evEncoderSet)
 8000a5c:	4b26      	ldr	r3, [pc, #152]	; (8000af8 <EM_ProcessEvent+0x140>)
 8000a5e:	781b      	ldrb	r3, [r3, #0]
 8000a60:	2b05      	cmp	r3, #5
 8000a62:	d105      	bne.n	8000a70 <EM_ProcessEvent+0xb8>
			{
				eNextState = _GainSetHandler();
 8000a64:	f000 f8a2 	bl	8000bac <_GainSetHandler>
 8000a68:	4603      	mov	r3, r0
 8000a6a:	461a      	mov	r2, r3
 8000a6c:	4b21      	ldr	r3, [pc, #132]	; (8000af4 <EM_ProcessEvent+0x13c>)
 8000a6e:	701a      	strb	r2, [r3, #0]
			}
			if(eNewEvent == evEncoderPush)
 8000a70:	4b21      	ldr	r3, [pc, #132]	; (8000af8 <EM_ProcessEvent+0x140>)
 8000a72:	781b      	ldrb	r3, [r3, #0]
 8000a74:	2b06      	cmp	r3, #6
 8000a76:	d136      	bne.n	8000ae6 <EM_ProcessEvent+0x12e>
			{
				eNextState = _ExitGainMenuHandler();
 8000a78:	f000 f8aa 	bl	8000bd0 <_ExitGainMenuHandler>
 8000a7c:	4603      	mov	r3, r0
 8000a7e:	461a      	mov	r2, r3
 8000a80:	4b1c      	ldr	r3, [pc, #112]	; (8000af4 <EM_ProcessEvent+0x13c>)
 8000a82:	701a      	strb	r2, [r3, #0]
			}
			break;
 8000a84:	e02f      	b.n	8000ae6 <EM_ProcessEvent+0x12e>

		case Freq_Menu_State:
			if(eNewEvent == evEncoderSet)
 8000a86:	4b1c      	ldr	r3, [pc, #112]	; (8000af8 <EM_ProcessEvent+0x140>)
 8000a88:	781b      	ldrb	r3, [r3, #0]
 8000a8a:	2b05      	cmp	r3, #5
 8000a8c:	d105      	bne.n	8000a9a <EM_ProcessEvent+0xe2>
			{
				eNextState = _FreqSetHandler();
 8000a8e:	f000 f953 	bl	8000d38 <_FreqSetHandler>
 8000a92:	4603      	mov	r3, r0
 8000a94:	461a      	mov	r2, r3
 8000a96:	4b17      	ldr	r3, [pc, #92]	; (8000af4 <EM_ProcessEvent+0x13c>)
 8000a98:	701a      	strb	r2, [r3, #0]
			}
			if(eNewEvent == evEncoderPush)
 8000a9a:	4b17      	ldr	r3, [pc, #92]	; (8000af8 <EM_ProcessEvent+0x140>)
 8000a9c:	781b      	ldrb	r3, [r3, #0]
 8000a9e:	2b06      	cmp	r3, #6
 8000aa0:	d123      	bne.n	8000aea <EM_ProcessEvent+0x132>
			{
				eNextState = _ExitFreqMenuHandler();
 8000aa2:	f000 f961 	bl	8000d68 <_ExitFreqMenuHandler>
 8000aa6:	4603      	mov	r3, r0
 8000aa8:	461a      	mov	r2, r3
 8000aaa:	4b12      	ldr	r3, [pc, #72]	; (8000af4 <EM_ProcessEvent+0x13c>)
 8000aac:	701a      	strb	r2, [r3, #0]
			}
			break;
 8000aae:	e01c      	b.n	8000aea <EM_ProcessEvent+0x132>

		case Bias_Menu_State:
			if(eNewEvent == evEncoderSet)
 8000ab0:	4b11      	ldr	r3, [pc, #68]	; (8000af8 <EM_ProcessEvent+0x140>)
 8000ab2:	781b      	ldrb	r3, [r3, #0]
 8000ab4:	2b05      	cmp	r3, #5
 8000ab6:	d105      	bne.n	8000ac4 <EM_ProcessEvent+0x10c>
			{
				eNextState = _BiasSetHandler();
 8000ab8:	f000 f8c4 	bl	8000c44 <_BiasSetHandler>
 8000abc:	4603      	mov	r3, r0
 8000abe:	461a      	mov	r2, r3
 8000ac0:	4b0c      	ldr	r3, [pc, #48]	; (8000af4 <EM_ProcessEvent+0x13c>)
 8000ac2:	701a      	strb	r2, [r3, #0]
			}
			if(eNewEvent == evEncoderPush)
 8000ac4:	4b0c      	ldr	r3, [pc, #48]	; (8000af8 <EM_ProcessEvent+0x140>)
 8000ac6:	781b      	ldrb	r3, [r3, #0]
 8000ac8:	2b06      	cmp	r3, #6
 8000aca:	d110      	bne.n	8000aee <EM_ProcessEvent+0x136>
			{
				eNextState = _ExitBiasMenuHandler();
 8000acc:	f000 f8fe 	bl	8000ccc <_ExitBiasMenuHandler>
 8000ad0:	4603      	mov	r3, r0
 8000ad2:	461a      	mov	r2, r3
 8000ad4:	4b07      	ldr	r3, [pc, #28]	; (8000af4 <EM_ProcessEvent+0x13c>)
 8000ad6:	701a      	strb	r2, [r3, #0]
			}
			break;
 8000ad8:	e009      	b.n	8000aee <EM_ProcessEvent+0x136>

		default:
			break;
 8000ada:	bf00      	nop
 8000adc:	e008      	b.n	8000af0 <EM_ProcessEvent+0x138>
			break;
 8000ade:	bf00      	nop
 8000ae0:	e006      	b.n	8000af0 <EM_ProcessEvent+0x138>
			break;
 8000ae2:	bf00      	nop
 8000ae4:	e004      	b.n	8000af0 <EM_ProcessEvent+0x138>
			break;
 8000ae6:	bf00      	nop
 8000ae8:	e002      	b.n	8000af0 <EM_ProcessEvent+0x138>
			break;
 8000aea:	bf00      	nop
 8000aec:	e000      	b.n	8000af0 <EM_ProcessEvent+0x138>
			break;
 8000aee:	bf00      	nop
	}

}
 8000af0:	bf00      	nop
 8000af2:	bd80      	pop	{r7, pc}
 8000af4:	20000be8 	.word	0x20000be8
 8000af8:	20000be9 	.word	0x20000be9

08000afc <_FuncMenuHandler>:
 *
 *	Business logic for evFunctionMenu events
 *
 */
eSystemState _FuncMenuHandler(void)
{
 8000afc:	b580      	push	{r7, lr}
 8000afe:	af00      	add	r7, sp, #0
#ifdef EM_SWV_DEBUG
	printf("FunctionMenu Event captured\n");
 8000b00:	4805      	ldr	r0, [pc, #20]	; (8000b18 <_FuncMenuHandler+0x1c>)
 8000b02:	f008 fc35 	bl	8009370 <puts>
#endif

	DM_ShowFuncSelectMenu(ENABLE_FUNCMENU);
 8000b06:	2001      	movs	r0, #1
 8000b08:	f7ff fc82 	bl	8000410 <DM_ShowFuncSelectMenu>

	// set the rotary encoder limits to 0-20 for this menu
	TIM1->ARR = 20;
 8000b0c:	4b03      	ldr	r3, [pc, #12]	; (8000b1c <_FuncMenuHandler+0x20>)
 8000b0e:	2214      	movs	r2, #20
 8000b10:	62da      	str	r2, [r3, #44]	; 0x2c

	return Func_Menu_State;
 8000b12:	2301      	movs	r3, #1
}
 8000b14:	4618      	mov	r0, r3
 8000b16:	bd80      	pop	{r7, pc}
 8000b18:	0800a38c 	.word	0x0800a38c
 8000b1c:	40012c00 	.word	0x40012c00

08000b20 <_FuncSetHandler>:
 *
 *	Business logic for evFunctionSet events
 *
 */
eSystemState _FuncSetHandler(void)
{
 8000b20:	b580      	push	{r7, lr}
 8000b22:	af00      	add	r7, sp, #0
#ifdef EM_SWV_DEBUG
	printf("FunctionAdjust Event captured\n");
 8000b24:	4805      	ldr	r0, [pc, #20]	; (8000b3c <_FuncSetHandler+0x1c>)
 8000b26:	f008 fc23 	bl	8009370 <puts>
#endif

	FO_ModifyOutput();
 8000b2a:	f000 f977 	bl	8000e1c <FO_ModifyOutput>
	eNewEvent = evFuncMenu;
 8000b2e:	4b04      	ldr	r3, [pc, #16]	; (8000b40 <_FuncSetHandler+0x20>)
 8000b30:	2201      	movs	r2, #1
 8000b32:	701a      	strb	r2, [r3, #0]
	return Func_Menu_State;
 8000b34:	2301      	movs	r3, #1
}
 8000b36:	4618      	mov	r0, r3
 8000b38:	bd80      	pop	{r7, pc}
 8000b3a:	bf00      	nop
 8000b3c:	0800a3a8 	.word	0x0800a3a8
 8000b40:	20000be9 	.word	0x20000be9

08000b44 <_ExitFuncMenuHandler>:
 *
 *
 *
 */
eSystemState _ExitFuncMenuHandler()
{
 8000b44:	b580      	push	{r7, lr}
 8000b46:	af00      	add	r7, sp, #0
#ifdef EM_SWV_DEBUG
	printf("ExitFuncMenu Event captured\n");
 8000b48:	480b      	ldr	r0, [pc, #44]	; (8000b78 <_ExitFuncMenuHandler+0x34>)
 8000b4a:	f008 fc11 	bl	8009370 <puts>
#endif

	// disable the menu
	DM_ShowFuncSelectMenu(DISABLE_FUNCMENU);
 8000b4e:	2000      	movs	r0, #0
 8000b50:	f7ff fc5e 	bl	8000410 <DM_ShowFuncSelectMenu>

	// reset the encoder range
	TIM1->ARR = 1024;
 8000b54:	4b09      	ldr	r3, [pc, #36]	; (8000b7c <_ExitFuncMenuHandler+0x38>)
 8000b56:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000b5a:	62da      	str	r2, [r3, #44]	; 0x2c

	// don't let the DisplayManager interrupt the LCD refresh
	HAL_TIM_Base_Stop_IT(&htim15);
 8000b5c:	4808      	ldr	r0, [pc, #32]	; (8000b80 <_ExitFuncMenuHandler+0x3c>)
 8000b5e:	f006 fa09 	bl	8006f74 <HAL_TIM_Base_Stop_IT>
	{
		DM_RefreshBackgroundLayout();
 8000b62:	f7ff fee5 	bl	8000930 <DM_RefreshBackgroundLayout>
	}
	HAL_TIM_Base_Start_IT(&htim15);
 8000b66:	4806      	ldr	r0, [pc, #24]	; (8000b80 <_ExitFuncMenuHandler+0x3c>)
 8000b68:	f006 f9ce 	bl	8006f08 <HAL_TIM_Base_Start_IT>

	eNewEvent = evIdle;
 8000b6c:	4b05      	ldr	r3, [pc, #20]	; (8000b84 <_ExitFuncMenuHandler+0x40>)
 8000b6e:	2200      	movs	r2, #0
 8000b70:	701a      	strb	r2, [r3, #0]
	return Idle_State;
 8000b72:	2300      	movs	r3, #0
}
 8000b74:	4618      	mov	r0, r3
 8000b76:	bd80      	pop	{r7, pc}
 8000b78:	0800a3c8 	.word	0x0800a3c8
 8000b7c:	40012c00 	.word	0x40012c00
 8000b80:	20000e9c 	.word	0x20000e9c
 8000b84:	20000be9 	.word	0x20000be9

08000b88 <_GainMenuHandler>:
 *
 *	Business logic for AmplitudeAdjust events
 *
 */
eSystemState _GainMenuHandler()
{
 8000b88:	b580      	push	{r7, lr}
 8000b8a:	af00      	add	r7, sp, #0
#ifdef EM_SWV_DEBUG
	printf("GainMenu Event captured\n");
 8000b8c:	4805      	ldr	r0, [pc, #20]	; (8000ba4 <_GainMenuHandler+0x1c>)
 8000b8e:	f008 fbef 	bl	8009370 <puts>
#endif
	DM_ShowGainSelectMenu(ENABLE_GAINMENU);
 8000b92:	2001      	movs	r0, #1
 8000b94:	f7ff fe06 	bl	80007a4 <DM_ShowGainSelectMenu>

	// set the rotary encoder limits to 0-20 for this menu
	TIM1->ARR = 32;
 8000b98:	4b03      	ldr	r3, [pc, #12]	; (8000ba8 <_GainMenuHandler+0x20>)
 8000b9a:	2220      	movs	r2, #32
 8000b9c:	62da      	str	r2, [r3, #44]	; 0x2c

	return Gain_Menu_State;
 8000b9e:	2302      	movs	r3, #2
}
 8000ba0:	4618      	mov	r0, r3
 8000ba2:	bd80      	pop	{r7, pc}
 8000ba4:	0800a3e4 	.word	0x0800a3e4
 8000ba8:	40012c00 	.word	0x40012c00

08000bac <_GainSetHandler>:
 *
 *
 *
 */
eSystemState _GainSetHandler()
{
 8000bac:	b580      	push	{r7, lr}
 8000bae:	af00      	add	r7, sp, #0
#ifdef EM_SWV_DEBUG
	printf("GainSet Event captured\n");
 8000bb0:	4805      	ldr	r0, [pc, #20]	; (8000bc8 <_GainSetHandler+0x1c>)
 8000bb2:	f008 fbdd 	bl	8009370 <puts>
#endif

	GO_ModifyOutput();
 8000bb6:	f000 f9ef 	bl	8000f98 <GO_ModifyOutput>

	eNewEvent = evGainMenu;
 8000bba:	4b04      	ldr	r3, [pc, #16]	; (8000bcc <_GainSetHandler+0x20>)
 8000bbc:	2203      	movs	r2, #3
 8000bbe:	701a      	strb	r2, [r3, #0]
	return Gain_Menu_State;
 8000bc0:	2302      	movs	r3, #2
}
 8000bc2:	4618      	mov	r0, r3
 8000bc4:	bd80      	pop	{r7, pc}
 8000bc6:	bf00      	nop
 8000bc8:	0800a3fc 	.word	0x0800a3fc
 8000bcc:	20000be9 	.word	0x20000be9

08000bd0 <_ExitGainMenuHandler>:
 *
 *
 *
 */
eSystemState _ExitGainMenuHandler()
{
 8000bd0:	b580      	push	{r7, lr}
 8000bd2:	af00      	add	r7, sp, #0
#ifdef EM_SWV_DEBUG
	printf("ExitGainMenu Event captured\n");
 8000bd4:	480b      	ldr	r0, [pc, #44]	; (8000c04 <_ExitGainMenuHandler+0x34>)
 8000bd6:	f008 fbcb 	bl	8009370 <puts>
#endif


	// disable the menu
	DM_ShowGainSelectMenu(DISABLE_GAINMENU);
 8000bda:	2000      	movs	r0, #0
 8000bdc:	f7ff fde2 	bl	80007a4 <DM_ShowGainSelectMenu>

	// reset the encoder range
	TIM1->ARR = 1024;
 8000be0:	4b09      	ldr	r3, [pc, #36]	; (8000c08 <_ExitGainMenuHandler+0x38>)
 8000be2:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000be6:	62da      	str	r2, [r3, #44]	; 0x2c

	// don't let the DisplayManager interrupt the LCD refresh
	HAL_TIM_Base_Stop_IT(&htim15);
 8000be8:	4808      	ldr	r0, [pc, #32]	; (8000c0c <_ExitGainMenuHandler+0x3c>)
 8000bea:	f006 f9c3 	bl	8006f74 <HAL_TIM_Base_Stop_IT>
	{
		DM_RefreshBackgroundLayout();
 8000bee:	f7ff fe9f 	bl	8000930 <DM_RefreshBackgroundLayout>
	}
	HAL_TIM_Base_Start_IT(&htim15);
 8000bf2:	4806      	ldr	r0, [pc, #24]	; (8000c0c <_ExitGainMenuHandler+0x3c>)
 8000bf4:	f006 f988 	bl	8006f08 <HAL_TIM_Base_Start_IT>

	eNewEvent = evIdle;
 8000bf8:	4b05      	ldr	r3, [pc, #20]	; (8000c10 <_ExitGainMenuHandler+0x40>)
 8000bfa:	2200      	movs	r2, #0
 8000bfc:	701a      	strb	r2, [r3, #0]
	return Idle_State;
 8000bfe:	2300      	movs	r3, #0
}
 8000c00:	4618      	mov	r0, r3
 8000c02:	bd80      	pop	{r7, pc}
 8000c04:	0800a414 	.word	0x0800a414
 8000c08:	40012c00 	.word	0x40012c00
 8000c0c:	20000e9c 	.word	0x20000e9c
 8000c10:	20000be9 	.word	0x20000be9

08000c14 <_BiasMenuHandler>:
 *
 *	Business logic for BiasMenu events
 *
 */
eSystemState _BiasMenuHandler()
{
 8000c14:	b580      	push	{r7, lr}
 8000c16:	af00      	add	r7, sp, #0
#ifdef EM_SWV_DEBUG
	printf("BiasMenu Event captured\n");
 8000c18:	4808      	ldr	r0, [pc, #32]	; (8000c3c <_BiasMenuHandler+0x28>)
 8000c1a:	f008 fba9 	bl	8009370 <puts>
#endif
	DM_ShowBiasSelectMenu(ENABLE_BIASMENU);
 8000c1e:	2001      	movs	r0, #1
 8000c20:	f7ff fe44 	bl	80008ac <DM_ShowBiasSelectMenu>

	// set the rotary encoder limits to 0-20 for this menu


	TIM1->ARR = BIAS_MAX;
 8000c24:	4b06      	ldr	r3, [pc, #24]	; (8000c40 <_BiasMenuHandler+0x2c>)
 8000c26:	f240 3229 	movw	r2, #809	; 0x329
 8000c2a:	62da      	str	r2, [r3, #44]	; 0x2c
	TIM1->CNT = BIAS_CENTER;
 8000c2c:	4b04      	ldr	r3, [pc, #16]	; (8000c40 <_BiasMenuHandler+0x2c>)
 8000c2e:	f240 1299 	movw	r2, #409	; 0x199
 8000c32:	625a      	str	r2, [r3, #36]	; 0x24

	return Bias_Menu_State;
 8000c34:	2304      	movs	r3, #4
}
 8000c36:	4618      	mov	r0, r3
 8000c38:	bd80      	pop	{r7, pc}
 8000c3a:	bf00      	nop
 8000c3c:	0800a430 	.word	0x0800a430
 8000c40:	40012c00 	.word	0x40012c00

08000c44 <_BiasSetHandler>:
 *
 *
 *
 */
eSystemState _BiasSetHandler()
{
 8000c44:	b580      	push	{r7, lr}
 8000c46:	af00      	add	r7, sp, #0
#ifdef EM_SWV_DEBUG
	printf("BiasSet Event captured\n");
 8000c48:	481c      	ldr	r0, [pc, #112]	; (8000cbc <_BiasSetHandler+0x78>)
 8000c4a:	f008 fb91 	bl	8009370 <puts>
#endif

	// apply negative dc bias
	if(TIM1->CNT < 400) {
 8000c4e:	4b1c      	ldr	r3, [pc, #112]	; (8000cc0 <_BiasSetHandler+0x7c>)
 8000c50:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000c52:	f5b3 7fc8 	cmp.w	r3, #400	; 0x190
 8000c56:	d212      	bcs.n	8000c7e <_BiasSetHandler+0x3a>
		HAL_DAC_SetValue(&hdac1, DAC1_CHANNEL_2, DAC_ALIGN_12B_R, (BIAS_CENTER-TIM1->CNT)*BIAS_MAG);
 8000c58:	4b19      	ldr	r3, [pc, #100]	; (8000cc0 <_BiasSetHandler+0x7c>)
 8000c5a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000c5c:	f06f 0209 	mvn.w	r2, #9
 8000c60:	fb02 f303 	mul.w	r3, r2, r3
 8000c64:	f603 73fa 	addw	r3, r3, #4090	; 0xffa
 8000c68:	2200      	movs	r2, #0
 8000c6a:	2110      	movs	r1, #16
 8000c6c:	4815      	ldr	r0, [pc, #84]	; (8000cc4 <_BiasSetHandler+0x80>)
 8000c6e:	f003 feb3 	bl	80049d8 <HAL_DAC_SetValue>
	  HAL_GPIO_WritePin(DCBIAS_INVERT_GPIO_Port, DCBIAS_INVERT_Pin, GPIO_PIN_SET);
 8000c72:	2201      	movs	r2, #1
 8000c74:	2108      	movs	r1, #8
 8000c76:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000c7a:	f004 fd9b 	bl	80057b4 <HAL_GPIO_WritePin>
	}
	// apply positive dc bias
	if(TIM1->CNT >= 400) {
 8000c7e:	4b10      	ldr	r3, [pc, #64]	; (8000cc0 <_BiasSetHandler+0x7c>)
 8000c80:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000c82:	f5b3 7fc8 	cmp.w	r3, #400	; 0x190
 8000c86:	d312      	bcc.n	8000cae <_BiasSetHandler+0x6a>
		HAL_DAC_SetValue(&hdac1, DAC1_CHANNEL_2, DAC_ALIGN_12B_R, (TIM1->CNT-BIAS_CENTER)*BIAS_MAG);
 8000c88:	4b0d      	ldr	r3, [pc, #52]	; (8000cc0 <_BiasSetHandler+0x7c>)
 8000c8a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8000c8c:	4613      	mov	r3, r2
 8000c8e:	009b      	lsls	r3, r3, #2
 8000c90:	4413      	add	r3, r2
 8000c92:	005b      	lsls	r3, r3, #1
 8000c94:	f6a3 73fa 	subw	r3, r3, #4090	; 0xffa
 8000c98:	2200      	movs	r2, #0
 8000c9a:	2110      	movs	r1, #16
 8000c9c:	4809      	ldr	r0, [pc, #36]	; (8000cc4 <_BiasSetHandler+0x80>)
 8000c9e:	f003 fe9b 	bl	80049d8 <HAL_DAC_SetValue>
		HAL_GPIO_WritePin(DCBIAS_INVERT_GPIO_Port, DCBIAS_INVERT_Pin, GPIO_PIN_RESET);
 8000ca2:	2200      	movs	r2, #0
 8000ca4:	2108      	movs	r1, #8
 8000ca6:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000caa:	f004 fd83 	bl	80057b4 <HAL_GPIO_WritePin>
	}

	eNewEvent = evBiasMenu;
 8000cae:	4b06      	ldr	r3, [pc, #24]	; (8000cc8 <_BiasSetHandler+0x84>)
 8000cb0:	2204      	movs	r2, #4
 8000cb2:	701a      	strb	r2, [r3, #0]
	return Bias_Menu_State;
 8000cb4:	2304      	movs	r3, #4
}
 8000cb6:	4618      	mov	r0, r3
 8000cb8:	bd80      	pop	{r7, pc}
 8000cba:	bf00      	nop
 8000cbc:	0800a448 	.word	0x0800a448
 8000cc0:	40012c00 	.word	0x40012c00
 8000cc4:	20000d18 	.word	0x20000d18
 8000cc8:	20000be9 	.word	0x20000be9

08000ccc <_ExitBiasMenuHandler>:
 *
 *
 *
 */
eSystemState _ExitBiasMenuHandler()
{
 8000ccc:	b580      	push	{r7, lr}
 8000cce:	af00      	add	r7, sp, #0
#ifdef EM_SWV_DEBUG
	printf("ExitBiasMenu Event captured\n");
 8000cd0:	480b      	ldr	r0, [pc, #44]	; (8000d00 <_ExitBiasMenuHandler+0x34>)
 8000cd2:	f008 fb4d 	bl	8009370 <puts>
#endif


	// disable the menu
	DM_ShowBiasSelectMenu(DISABLE_BIASMENU);
 8000cd6:	2000      	movs	r0, #0
 8000cd8:	f7ff fde8 	bl	80008ac <DM_ShowBiasSelectMenu>

	// reset the encoder range
	TIM1->ARR = 1024;
 8000cdc:	4b09      	ldr	r3, [pc, #36]	; (8000d04 <_ExitBiasMenuHandler+0x38>)
 8000cde:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000ce2:	62da      	str	r2, [r3, #44]	; 0x2c

	// don't let the DisplayManager interrupt the LCD refresh
	HAL_TIM_Base_Stop_IT(&htim15);
 8000ce4:	4808      	ldr	r0, [pc, #32]	; (8000d08 <_ExitBiasMenuHandler+0x3c>)
 8000ce6:	f006 f945 	bl	8006f74 <HAL_TIM_Base_Stop_IT>
	{
		DM_RefreshBackgroundLayout();
 8000cea:	f7ff fe21 	bl	8000930 <DM_RefreshBackgroundLayout>
	}
	HAL_TIM_Base_Start_IT(&htim15);
 8000cee:	4806      	ldr	r0, [pc, #24]	; (8000d08 <_ExitBiasMenuHandler+0x3c>)
 8000cf0:	f006 f90a 	bl	8006f08 <HAL_TIM_Base_Start_IT>

	eNewEvent = evIdle;
 8000cf4:	4b05      	ldr	r3, [pc, #20]	; (8000d0c <_ExitBiasMenuHandler+0x40>)
 8000cf6:	2200      	movs	r2, #0
 8000cf8:	701a      	strb	r2, [r3, #0]
	return Idle_State;
 8000cfa:	2300      	movs	r3, #0
}
 8000cfc:	4618      	mov	r0, r3
 8000cfe:	bd80      	pop	{r7, pc}
 8000d00:	0800a460 	.word	0x0800a460
 8000d04:	40012c00 	.word	0x40012c00
 8000d08:	20000e9c 	.word	0x20000e9c
 8000d0c:	20000be9 	.word	0x20000be9

08000d10 <_FreqMenuHandler>:
 *
 *	Business logic for FREQ MENU events
 *
 */
eSystemState _FreqMenuHandler()
{
 8000d10:	b580      	push	{r7, lr}
 8000d12:	af00      	add	r7, sp, #0
#ifdef EM_SWV_DEBUG
	printf("FreqMenu Event captured\n");
 8000d14:	4806      	ldr	r0, [pc, #24]	; (8000d30 <_FreqMenuHandler+0x20>)
 8000d16:	f008 fb2b 	bl	8009370 <puts>
#endif
	DM_ShowFreqSelectMenu(ENABLE_FREQMENU);
 8000d1a:	2001      	movs	r0, #1
 8000d1c:	f7ff fd84 	bl	8000828 <DM_ShowFreqSelectMenu>

	// set the rotary encoder limits to 0-20 for this menu
	TIM1->ARR = 1024;
 8000d20:	4b04      	ldr	r3, [pc, #16]	; (8000d34 <_FreqMenuHandler+0x24>)
 8000d22:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000d26:	62da      	str	r2, [r3, #44]	; 0x2c

	return Freq_Menu_State;
 8000d28:	2303      	movs	r3, #3
}
 8000d2a:	4618      	mov	r0, r3
 8000d2c:	bd80      	pop	{r7, pc}
 8000d2e:	bf00      	nop
 8000d30:	0800a47c 	.word	0x0800a47c
 8000d34:	40012c00 	.word	0x40012c00

08000d38 <_FreqSetHandler>:
 *
 *
 *
 */
eSystemState _FreqSetHandler()
{
 8000d38:	b580      	push	{r7, lr}
 8000d3a:	af00      	add	r7, sp, #0
#ifdef EM_SWV_DEBUG
	printf("FreqSet Event captured\n");
 8000d3c:	4806      	ldr	r0, [pc, #24]	; (8000d58 <_FreqSetHandler+0x20>)
 8000d3e:	f008 fb17 	bl	8009370 <puts>
#endif

	TIM8->ARR = TIM1->CNT;
 8000d42:	4b06      	ldr	r3, [pc, #24]	; (8000d5c <_FreqSetHandler+0x24>)
 8000d44:	4a06      	ldr	r2, [pc, #24]	; (8000d60 <_FreqSetHandler+0x28>)
 8000d46:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000d48:	62d3      	str	r3, [r2, #44]	; 0x2c
	eNewEvent = evFreqMenu;
 8000d4a:	4b06      	ldr	r3, [pc, #24]	; (8000d64 <_FreqSetHandler+0x2c>)
 8000d4c:	2202      	movs	r2, #2
 8000d4e:	701a      	strb	r2, [r3, #0]
	return Freq_Menu_State;
 8000d50:	2303      	movs	r3, #3
}
 8000d52:	4618      	mov	r0, r3
 8000d54:	bd80      	pop	{r7, pc}
 8000d56:	bf00      	nop
 8000d58:	0800a494 	.word	0x0800a494
 8000d5c:	40012c00 	.word	0x40012c00
 8000d60:	40013400 	.word	0x40013400
 8000d64:	20000be9 	.word	0x20000be9

08000d68 <_ExitFreqMenuHandler>:
 *
 *
 *
 */
eSystemState _ExitFreqMenuHandler()
{
 8000d68:	b580      	push	{r7, lr}
 8000d6a:	af00      	add	r7, sp, #0
#ifdef EM_SWV_DEBUG
	printf("ExitFreqMenu Event captured\n");
 8000d6c:	480b      	ldr	r0, [pc, #44]	; (8000d9c <_ExitFreqMenuHandler+0x34>)
 8000d6e:	f008 faff 	bl	8009370 <puts>
#endif


	// disable the menu
	DM_ShowFreqSelectMenu(DISABLE_FREQMENU);
 8000d72:	2000      	movs	r0, #0
 8000d74:	f7ff fd58 	bl	8000828 <DM_ShowFreqSelectMenu>

	// reset the encoder range
	TIM1->ARR = 1024;
 8000d78:	4b09      	ldr	r3, [pc, #36]	; (8000da0 <_ExitFreqMenuHandler+0x38>)
 8000d7a:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000d7e:	62da      	str	r2, [r3, #44]	; 0x2c

	// don't let the DisplayManager interrupt the LCD refresh
	HAL_TIM_Base_Stop_IT(&htim15);
 8000d80:	4808      	ldr	r0, [pc, #32]	; (8000da4 <_ExitFreqMenuHandler+0x3c>)
 8000d82:	f006 f8f7 	bl	8006f74 <HAL_TIM_Base_Stop_IT>
	{
		DM_RefreshBackgroundLayout();
 8000d86:	f7ff fdd3 	bl	8000930 <DM_RefreshBackgroundLayout>
	}
	HAL_TIM_Base_Start_IT(&htim15);
 8000d8a:	4806      	ldr	r0, [pc, #24]	; (8000da4 <_ExitFreqMenuHandler+0x3c>)
 8000d8c:	f006 f8bc 	bl	8006f08 <HAL_TIM_Base_Start_IT>

	eNewEvent = evIdle;
 8000d90:	4b05      	ldr	r3, [pc, #20]	; (8000da8 <_ExitFreqMenuHandler+0x40>)
 8000d92:	2200      	movs	r2, #0
 8000d94:	701a      	strb	r2, [r3, #0]
	return Idle_State;
 8000d96:	2300      	movs	r3, #0
}
 8000d98:	4618      	mov	r0, r3
 8000d9a:	bd80      	pop	{r7, pc}
 8000d9c:	0800a4ac 	.word	0x0800a4ac
 8000da0:	40012c00 	.word	0x40012c00
 8000da4:	20000e9c 	.word	0x20000e9c
 8000da8:	20000be9 	.word	0x20000be9

08000dac <EM_SetNewEvent>:
 *
 * 	Set by NVIC interrupt handlers
 *
 */
void EM_SetNewEvent(eSystemEvent pEvent)
{
 8000dac:	b480      	push	{r7}
 8000dae:	b083      	sub	sp, #12
 8000db0:	af00      	add	r7, sp, #0
 8000db2:	4603      	mov	r3, r0
 8000db4:	71fb      	strb	r3, [r7, #7]
	eNewEvent = pEvent;
 8000db6:	4a04      	ldr	r2, [pc, #16]	; (8000dc8 <EM_SetNewEvent+0x1c>)
 8000db8:	79fb      	ldrb	r3, [r7, #7]
 8000dba:	7013      	strb	r3, [r2, #0]
}
 8000dbc:	bf00      	nop
 8000dbe:	370c      	adds	r7, #12
 8000dc0:	46bd      	mov	sp, r7
 8000dc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dc6:	4770      	bx	lr
 8000dc8:	20000be9 	.word	0x20000be9

08000dcc <EM_GetOutputFreq>:
 *
 *
 *
 */
uint32_t EM_GetOutputFreq()
{
 8000dcc:	b480      	push	{r7}
 8000dce:	af00      	add	r7, sp, #0
	return TIM8->ARR;
 8000dd0:	4b03      	ldr	r3, [pc, #12]	; (8000de0 <EM_GetOutputFreq+0x14>)
 8000dd2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
}
 8000dd4:	4618      	mov	r0, r3
 8000dd6:	46bd      	mov	sp, r7
 8000dd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ddc:	4770      	bx	lr
 8000dde:	bf00      	nop
 8000de0:	40013400 	.word	0x40013400

08000de4 <EM_GetOutputBias>:
 *
 *
 *
 */
uint32_t EM_GetOutputBias()
{
 8000de4:	b580      	push	{r7, lr}
 8000de6:	af00      	add	r7, sp, #0
	return HAL_DAC_GetValue(&hdac1, DAC1_CHANNEL_2);
 8000de8:	2110      	movs	r1, #16
 8000dea:	4803      	ldr	r0, [pc, #12]	; (8000df8 <EM_GetOutputBias+0x14>)
 8000dec:	f003 fe30 	bl	8004a50 <HAL_DAC_GetValue>
 8000df0:	4603      	mov	r3, r0
}
 8000df2:	4618      	mov	r0, r3
 8000df4:	bd80      	pop	{r7, pc}
 8000df6:	bf00      	nop
 8000df8:	20000d18 	.word	0x20000d18

08000dfc <EM_SetEncoderValue>:
 *
 *
 *
 */
void EM_SetEncoderValue(uint32_t pValue)
{
 8000dfc:	b480      	push	{r7}
 8000dfe:	b083      	sub	sp, #12
 8000e00:	af00      	add	r7, sp, #0
 8000e02:	6078      	str	r0, [r7, #4]
	newRotEncoderValue = pValue;
 8000e04:	4a04      	ldr	r2, [pc, #16]	; (8000e18 <EM_SetEncoderValue+0x1c>)
 8000e06:	687b      	ldr	r3, [r7, #4]
 8000e08:	6013      	str	r3, [r2, #0]


}
 8000e0a:	bf00      	nop
 8000e0c:	370c      	adds	r7, #12
 8000e0e:	46bd      	mov	sp, r7
 8000e10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e14:	4770      	bx	lr
 8000e16:	bf00      	nop
 8000e18:	20000bec 	.word	0x20000bec

08000e1c <FO_ModifyOutput>:

// signal output function
eOutput_mode eNewOutMode = Sine_Out_Mode;

void FO_ModifyOutput()
{
 8000e1c:	b580      	push	{r7, lr}
 8000e1e:	b082      	sub	sp, #8
 8000e20:	af02      	add	r7, sp, #8


	switch(TIM1->CNT)
 8000e22:	4b4e      	ldr	r3, [pc, #312]	; (8000f5c <FO_ModifyOutput+0x140>)
 8000e24:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000e26:	2b17      	cmp	r3, #23
 8000e28:	f200 8094 	bhi.w	8000f54 <FO_ModifyOutput+0x138>
 8000e2c:	a201      	add	r2, pc, #4	; (adr r2, 8000e34 <FO_ModifyOutput+0x18>)
 8000e2e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000e32:	bf00      	nop
 8000e34:	08000e95 	.word	0x08000e95
 8000e38:	08000e95 	.word	0x08000e95
 8000e3c:	08000e95 	.word	0x08000e95
 8000e40:	08000eb5 	.word	0x08000eb5
 8000e44:	08000eb5 	.word	0x08000eb5
 8000e48:	08000eb5 	.word	0x08000eb5
 8000e4c:	08000eb5 	.word	0x08000eb5
 8000e50:	08000ed5 	.word	0x08000ed5
 8000e54:	08000ed5 	.word	0x08000ed5
 8000e58:	08000ed5 	.word	0x08000ed5
 8000e5c:	08000ed5 	.word	0x08000ed5
 8000e60:	08000ef5 	.word	0x08000ef5
 8000e64:	08000ef5 	.word	0x08000ef5
 8000e68:	08000ef5 	.word	0x08000ef5
 8000e6c:	08000ef5 	.word	0x08000ef5
 8000e70:	08000f15 	.word	0x08000f15
 8000e74:	08000f15 	.word	0x08000f15
 8000e78:	08000f15 	.word	0x08000f15
 8000e7c:	08000f15 	.word	0x08000f15
 8000e80:	08000f35 	.word	0x08000f35
 8000e84:	08000f35 	.word	0x08000f35
 8000e88:	08000f35 	.word	0x08000f35
 8000e8c:	08000f35 	.word	0x08000f35
 8000e90:	08000f35 	.word	0x08000f35
	{
		case 0:
		case 1:
		case 2:

			eNewOutMode = Sine_Out_Mode;
 8000e94:	4b32      	ldr	r3, [pc, #200]	; (8000f60 <FO_ModifyOutput+0x144>)
 8000e96:	2200      	movs	r2, #0
 8000e98:	701a      	strb	r2, [r3, #0]
			HAL_DAC_Stop_DMA(&hdac1, DAC1_CHANNEL_1);
 8000e9a:	2100      	movs	r1, #0
 8000e9c:	4831      	ldr	r0, [pc, #196]	; (8000f64 <FO_ModifyOutput+0x148>)
 8000e9e:	f003 fd45 	bl	800492c <HAL_DAC_Stop_DMA>
			HAL_DAC_Start_DMA(&hdac1, DAC1_CHANNEL_1, sine_data_table, SINE_DATA_SIZE, DAC_ALIGN_12B_R);
 8000ea2:	2300      	movs	r3, #0
 8000ea4:	9300      	str	r3, [sp, #0]
 8000ea6:	2378      	movs	r3, #120	; 0x78
 8000ea8:	4a2f      	ldr	r2, [pc, #188]	; (8000f68 <FO_ModifyOutput+0x14c>)
 8000eaa:	2100      	movs	r1, #0
 8000eac:	482d      	ldr	r0, [pc, #180]	; (8000f64 <FO_ModifyOutput+0x148>)
 8000eae:	f003 fc7b 	bl	80047a8 <HAL_DAC_Start_DMA>
			break;
 8000eb2:	e04f      	b.n	8000f54 <FO_ModifyOutput+0x138>
		case 3:
		case 4:
		case 5:
		case 6:

			eNewOutMode = Square_Out_Mode;
 8000eb4:	4b2a      	ldr	r3, [pc, #168]	; (8000f60 <FO_ModifyOutput+0x144>)
 8000eb6:	2201      	movs	r2, #1
 8000eb8:	701a      	strb	r2, [r3, #0]
			HAL_DAC_Stop_DMA(&hdac1, DAC1_CHANNEL_1);
 8000eba:	2100      	movs	r1, #0
 8000ebc:	4829      	ldr	r0, [pc, #164]	; (8000f64 <FO_ModifyOutput+0x148>)
 8000ebe:	f003 fd35 	bl	800492c <HAL_DAC_Stop_DMA>
			HAL_DAC_Start_DMA(&hdac1, DAC1_CHANNEL_1, square_data_table, SQUARE_DATA_SIZE, DAC_ALIGN_12B_R);
 8000ec2:	2300      	movs	r3, #0
 8000ec4:	9300      	str	r3, [sp, #0]
 8000ec6:	2378      	movs	r3, #120	; 0x78
 8000ec8:	4a28      	ldr	r2, [pc, #160]	; (8000f6c <FO_ModifyOutput+0x150>)
 8000eca:	2100      	movs	r1, #0
 8000ecc:	4825      	ldr	r0, [pc, #148]	; (8000f64 <FO_ModifyOutput+0x148>)
 8000ece:	f003 fc6b 	bl	80047a8 <HAL_DAC_Start_DMA>

			break;
 8000ed2:	e03f      	b.n	8000f54 <FO_ModifyOutput+0x138>
		case 7:
		case 8:
		case 9:
		case 10:

			eNewOutMode = Saw_Out_Mode;
 8000ed4:	4b22      	ldr	r3, [pc, #136]	; (8000f60 <FO_ModifyOutput+0x144>)
 8000ed6:	2202      	movs	r2, #2
 8000ed8:	701a      	strb	r2, [r3, #0]
			HAL_DAC_Stop_DMA(&hdac1, DAC1_CHANNEL_1);
 8000eda:	2100      	movs	r1, #0
 8000edc:	4821      	ldr	r0, [pc, #132]	; (8000f64 <FO_ModifyOutput+0x148>)
 8000ede:	f003 fd25 	bl	800492c <HAL_DAC_Stop_DMA>
			HAL_DAC_Start_DMA(&hdac1, DAC1_CHANNEL_1, saw_data_table, SAW_DATA_SIZE, DAC_ALIGN_12B_R);
 8000ee2:	2300      	movs	r3, #0
 8000ee4:	9300      	str	r3, [sp, #0]
 8000ee6:	2378      	movs	r3, #120	; 0x78
 8000ee8:	4a21      	ldr	r2, [pc, #132]	; (8000f70 <FO_ModifyOutput+0x154>)
 8000eea:	2100      	movs	r1, #0
 8000eec:	481d      	ldr	r0, [pc, #116]	; (8000f64 <FO_ModifyOutput+0x148>)
 8000eee:	f003 fc5b 	bl	80047a8 <HAL_DAC_Start_DMA>
			break;
 8000ef2:	e02f      	b.n	8000f54 <FO_ModifyOutput+0x138>
		case 11:
		case 12:
		case 13:
		case 14:

			eNewOutMode = RevSaw_Out_Mode;
 8000ef4:	4b1a      	ldr	r3, [pc, #104]	; (8000f60 <FO_ModifyOutput+0x144>)
 8000ef6:	2203      	movs	r2, #3
 8000ef8:	701a      	strb	r2, [r3, #0]
			HAL_DAC_Stop_DMA(&hdac1, DAC1_CHANNEL_1);
 8000efa:	2100      	movs	r1, #0
 8000efc:	4819      	ldr	r0, [pc, #100]	; (8000f64 <FO_ModifyOutput+0x148>)
 8000efe:	f003 fd15 	bl	800492c <HAL_DAC_Stop_DMA>
			HAL_DAC_Start_DMA(&hdac1, DAC1_CHANNEL_1, saw_rev_data_table, SAW_REV_DATA_SIZE, DAC_ALIGN_12B_R);
 8000f02:	2300      	movs	r3, #0
 8000f04:	9300      	str	r3, [sp, #0]
 8000f06:	2378      	movs	r3, #120	; 0x78
 8000f08:	4a1a      	ldr	r2, [pc, #104]	; (8000f74 <FO_ModifyOutput+0x158>)
 8000f0a:	2100      	movs	r1, #0
 8000f0c:	4815      	ldr	r0, [pc, #84]	; (8000f64 <FO_ModifyOutput+0x148>)
 8000f0e:	f003 fc4b 	bl	80047a8 <HAL_DAC_Start_DMA>
			break;
 8000f12:	e01f      	b.n	8000f54 <FO_ModifyOutput+0x138>
		case 15:
		case 16:
		case 17:
		case 18:

			eNewOutMode = Triangle_Out_Mode;
 8000f14:	4b12      	ldr	r3, [pc, #72]	; (8000f60 <FO_ModifyOutput+0x144>)
 8000f16:	2204      	movs	r2, #4
 8000f18:	701a      	strb	r2, [r3, #0]
			HAL_DAC_Stop_DMA(&hdac1, DAC1_CHANNEL_1);
 8000f1a:	2100      	movs	r1, #0
 8000f1c:	4811      	ldr	r0, [pc, #68]	; (8000f64 <FO_ModifyOutput+0x148>)
 8000f1e:	f003 fd05 	bl	800492c <HAL_DAC_Stop_DMA>
			HAL_DAC_Start_DMA(&hdac1, DAC1_CHANNEL_1, triangle_data_table, TRIANGLE_DATA_SIZE, DAC_ALIGN_12B_R);
 8000f22:	2300      	movs	r3, #0
 8000f24:	9300      	str	r3, [sp, #0]
 8000f26:	2378      	movs	r3, #120	; 0x78
 8000f28:	4a13      	ldr	r2, [pc, #76]	; (8000f78 <FO_ModifyOutput+0x15c>)
 8000f2a:	2100      	movs	r1, #0
 8000f2c:	480d      	ldr	r0, [pc, #52]	; (8000f64 <FO_ModifyOutput+0x148>)
 8000f2e:	f003 fc3b 	bl	80047a8 <HAL_DAC_Start_DMA>
			break;
 8000f32:	e00f      	b.n	8000f54 <FO_ModifyOutput+0x138>
		case 20:
		case 21:
		case 22:
		case 23:

			eNewOutMode = Impulse_Out_Mode;
 8000f34:	4b0a      	ldr	r3, [pc, #40]	; (8000f60 <FO_ModifyOutput+0x144>)
 8000f36:	2205      	movs	r2, #5
 8000f38:	701a      	strb	r2, [r3, #0]
			HAL_DAC_Stop_DMA(&hdac1, DAC1_CHANNEL_1);
 8000f3a:	2100      	movs	r1, #0
 8000f3c:	4809      	ldr	r0, [pc, #36]	; (8000f64 <FO_ModifyOutput+0x148>)
 8000f3e:	f003 fcf5 	bl	800492c <HAL_DAC_Stop_DMA>
			HAL_DAC_Start_DMA(&hdac1, DAC1_CHANNEL_1, unitimpulse_data_table, UNITIMPULSE_DATA_SIZE, DAC_ALIGN_12B_R);
 8000f42:	2300      	movs	r3, #0
 8000f44:	9300      	str	r3, [sp, #0]
 8000f46:	2378      	movs	r3, #120	; 0x78
 8000f48:	4a0c      	ldr	r2, [pc, #48]	; (8000f7c <FO_ModifyOutput+0x160>)
 8000f4a:	2100      	movs	r1, #0
 8000f4c:	4805      	ldr	r0, [pc, #20]	; (8000f64 <FO_ModifyOutput+0x148>)
 8000f4e:	f003 fc2b 	bl	80047a8 <HAL_DAC_Start_DMA>
			break;
 8000f52:	bf00      	nop
	}
}
 8000f54:	bf00      	nop
 8000f56:	46bd      	mov	sp, r7
 8000f58:	bd80      	pop	{r7, pc}
 8000f5a:	bf00      	nop
 8000f5c:	40012c00 	.word	0x40012c00
 8000f60:	20000bf0 	.word	0x20000bf0
 8000f64:	20000d18 	.word	0x20000d18
 8000f68:	200003e4 	.word	0x200003e4
 8000f6c:	200005c4 	.word	0x200005c4
 8000f70:	20000024 	.word	0x20000024
 8000f74:	20000204 	.word	0x20000204
 8000f78:	200007a4 	.word	0x200007a4
 8000f7c:	20000984 	.word	0x20000984

08000f80 <FO_GetOutputMode>:
 *
 *
 *
 */
eOutput_mode FO_GetOutputMode()
{
 8000f80:	b480      	push	{r7}
 8000f82:	af00      	add	r7, sp, #0
	return eNewOutMode;
 8000f84:	4b03      	ldr	r3, [pc, #12]	; (8000f94 <FO_GetOutputMode+0x14>)
 8000f86:	781b      	ldrb	r3, [r3, #0]
}
 8000f88:	4618      	mov	r0, r3
 8000f8a:	46bd      	mov	sp, r7
 8000f8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f90:	4770      	bx	lr
 8000f92:	bf00      	nop
 8000f94:	20000bf0 	.word	0x20000bf0

08000f98 <GO_ModifyOutput>:
 *
 *
 *
 */
void GO_ModifyOutput()
{
 8000f98:	b580      	push	{r7, lr}
 8000f9a:	af00      	add	r7, sp, #0

	// PGA Truth table for LTC6910:
	// https://www.analog.com/media/en/technical-documentation/data-sheets/6910fb.pdf
	switch(TIM1->CNT)
 8000f9c:	4b70      	ldr	r3, [pc, #448]	; (8001160 <GO_ModifyOutput+0x1c8>)
 8000f9e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000fa0:	2b1f      	cmp	r3, #31
 8000fa2:	f200 80db 	bhi.w	800115c <GO_ModifyOutput+0x1c4>
 8000fa6:	a201      	add	r2, pc, #4	; (adr r2, 8000fac <GO_ModifyOutput+0x14>)
 8000fa8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000fac:	0800102d 	.word	0x0800102d
 8000fb0:	0800102d 	.word	0x0800102d
 8000fb4:	0800102d 	.word	0x0800102d
 8000fb8:	0800102d 	.word	0x0800102d
 8000fbc:	08001053 	.word	0x08001053
 8000fc0:	08001053 	.word	0x08001053
 8000fc4:	08001053 	.word	0x08001053
 8000fc8:	08001053 	.word	0x08001053
 8000fcc:	08001079 	.word	0x08001079
 8000fd0:	08001079 	.word	0x08001079
 8000fd4:	08001079 	.word	0x08001079
 8000fd8:	08001079 	.word	0x08001079
 8000fdc:	0800109f 	.word	0x0800109f
 8000fe0:	0800109f 	.word	0x0800109f
 8000fe4:	0800109f 	.word	0x0800109f
 8000fe8:	0800109f 	.word	0x0800109f
 8000fec:	080010c5 	.word	0x080010c5
 8000ff0:	080010c5 	.word	0x080010c5
 8000ff4:	080010c5 	.word	0x080010c5
 8000ff8:	080010c5 	.word	0x080010c5
 8000ffc:	080010eb 	.word	0x080010eb
 8001000:	080010eb 	.word	0x080010eb
 8001004:	080010eb 	.word	0x080010eb
 8001008:	080010eb 	.word	0x080010eb
 800100c:	08001111 	.word	0x08001111
 8001010:	08001111 	.word	0x08001111
 8001014:	08001111 	.word	0x08001111
 8001018:	08001111 	.word	0x08001111
 800101c:	08001137 	.word	0x08001137
 8001020:	08001137 	.word	0x08001137
 8001024:	08001137 	.word	0x08001137
 8001028:	08001137 	.word	0x08001137
	{
		case 0:
		case 1:
		case 2:
		case 3:
			HAL_GPIO_WritePin(SG0_GPIO_Port, SG0_Pin, GPIO_PIN_RESET);
 800102c:	2200      	movs	r2, #0
 800102e:	2101      	movs	r1, #1
 8001030:	484c      	ldr	r0, [pc, #304]	; (8001164 <GO_ModifyOutput+0x1cc>)
 8001032:	f004 fbbf 	bl	80057b4 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(SG1_GPIO_Port, SG1_Pin, GPIO_PIN_RESET);
 8001036:	2200      	movs	r2, #0
 8001038:	2120      	movs	r1, #32
 800103a:	484b      	ldr	r0, [pc, #300]	; (8001168 <GO_ModifyOutput+0x1d0>)
 800103c:	f004 fbba 	bl	80057b4 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(SG2_GPIO_Port, SG2_Pin, GPIO_PIN_RESET);
 8001040:	2200      	movs	r2, #0
 8001042:	2110      	movs	r1, #16
 8001044:	4848      	ldr	r0, [pc, #288]	; (8001168 <GO_ModifyOutput+0x1d0>)
 8001046:	f004 fbb5 	bl	80057b4 <HAL_GPIO_WritePin>
			eNewOutGain = Zero_Gain;
 800104a:	4b48      	ldr	r3, [pc, #288]	; (800116c <GO_ModifyOutput+0x1d4>)
 800104c:	2200      	movs	r2, #0
 800104e:	701a      	strb	r2, [r3, #0]
			break;
 8001050:	e084      	b.n	800115c <GO_ModifyOutput+0x1c4>
		case 4:
		case 5:
		case 6:
		case 7:
			HAL_GPIO_WritePin(SG0_GPIO_Port, SG0_Pin, GPIO_PIN_SET);
 8001052:	2201      	movs	r2, #1
 8001054:	2101      	movs	r1, #1
 8001056:	4843      	ldr	r0, [pc, #268]	; (8001164 <GO_ModifyOutput+0x1cc>)
 8001058:	f004 fbac 	bl	80057b4 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(SG1_GPIO_Port, SG1_Pin, GPIO_PIN_RESET);
 800105c:	2200      	movs	r2, #0
 800105e:	2120      	movs	r1, #32
 8001060:	4841      	ldr	r0, [pc, #260]	; (8001168 <GO_ModifyOutput+0x1d0>)
 8001062:	f004 fba7 	bl	80057b4 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(SG2_GPIO_Port, SG2_Pin, GPIO_PIN_RESET);
 8001066:	2200      	movs	r2, #0
 8001068:	2110      	movs	r1, #16
 800106a:	483f      	ldr	r0, [pc, #252]	; (8001168 <GO_ModifyOutput+0x1d0>)
 800106c:	f004 fba2 	bl	80057b4 <HAL_GPIO_WritePin>
			eNewOutGain = One_Gain;
 8001070:	4b3e      	ldr	r3, [pc, #248]	; (800116c <GO_ModifyOutput+0x1d4>)
 8001072:	2201      	movs	r2, #1
 8001074:	701a      	strb	r2, [r3, #0]
			break;
 8001076:	e071      	b.n	800115c <GO_ModifyOutput+0x1c4>
		case 8:
		case 9:
		case 10:
		case 11:
			HAL_GPIO_WritePin(SG0_GPIO_Port, SG0_Pin, GPIO_PIN_RESET);
 8001078:	2200      	movs	r2, #0
 800107a:	2101      	movs	r1, #1
 800107c:	4839      	ldr	r0, [pc, #228]	; (8001164 <GO_ModifyOutput+0x1cc>)
 800107e:	f004 fb99 	bl	80057b4 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(SG1_GPIO_Port, SG1_Pin, GPIO_PIN_SET);
 8001082:	2201      	movs	r2, #1
 8001084:	2120      	movs	r1, #32
 8001086:	4838      	ldr	r0, [pc, #224]	; (8001168 <GO_ModifyOutput+0x1d0>)
 8001088:	f004 fb94 	bl	80057b4 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(SG2_GPIO_Port, SG2_Pin, GPIO_PIN_RESET);
 800108c:	2200      	movs	r2, #0
 800108e:	2110      	movs	r1, #16
 8001090:	4835      	ldr	r0, [pc, #212]	; (8001168 <GO_ModifyOutput+0x1d0>)
 8001092:	f004 fb8f 	bl	80057b4 <HAL_GPIO_WritePin>
			eNewOutGain = Two_Gain;
 8001096:	4b35      	ldr	r3, [pc, #212]	; (800116c <GO_ModifyOutput+0x1d4>)
 8001098:	2202      	movs	r2, #2
 800109a:	701a      	strb	r2, [r3, #0]
			break;
 800109c:	e05e      	b.n	800115c <GO_ModifyOutput+0x1c4>
		case 12:
		case 13:
		case 14:
		case 15:
			HAL_GPIO_WritePin(SG0_GPIO_Port, SG0_Pin, GPIO_PIN_SET);
 800109e:	2201      	movs	r2, #1
 80010a0:	2101      	movs	r1, #1
 80010a2:	4830      	ldr	r0, [pc, #192]	; (8001164 <GO_ModifyOutput+0x1cc>)
 80010a4:	f004 fb86 	bl	80057b4 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(SG1_GPIO_Port, SG1_Pin, GPIO_PIN_SET);
 80010a8:	2201      	movs	r2, #1
 80010aa:	2120      	movs	r1, #32
 80010ac:	482e      	ldr	r0, [pc, #184]	; (8001168 <GO_ModifyOutput+0x1d0>)
 80010ae:	f004 fb81 	bl	80057b4 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(SG2_GPIO_Port, SG2_Pin, GPIO_PIN_RESET);
 80010b2:	2200      	movs	r2, #0
 80010b4:	2110      	movs	r1, #16
 80010b6:	482c      	ldr	r0, [pc, #176]	; (8001168 <GO_ModifyOutput+0x1d0>)
 80010b8:	f004 fb7c 	bl	80057b4 <HAL_GPIO_WritePin>
			eNewOutGain = Three_Gain;
 80010bc:	4b2b      	ldr	r3, [pc, #172]	; (800116c <GO_ModifyOutput+0x1d4>)
 80010be:	2203      	movs	r2, #3
 80010c0:	701a      	strb	r2, [r3, #0]
			break;
 80010c2:	e04b      	b.n	800115c <GO_ModifyOutput+0x1c4>
		case 16:
		case 17:
		case 18:
		case 19:
			HAL_GPIO_WritePin(SG0_GPIO_Port, SG0_Pin, GPIO_PIN_RESET);
 80010c4:	2200      	movs	r2, #0
 80010c6:	2101      	movs	r1, #1
 80010c8:	4826      	ldr	r0, [pc, #152]	; (8001164 <GO_ModifyOutput+0x1cc>)
 80010ca:	f004 fb73 	bl	80057b4 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(SG1_GPIO_Port, SG1_Pin, GPIO_PIN_RESET);
 80010ce:	2200      	movs	r2, #0
 80010d0:	2120      	movs	r1, #32
 80010d2:	4825      	ldr	r0, [pc, #148]	; (8001168 <GO_ModifyOutput+0x1d0>)
 80010d4:	f004 fb6e 	bl	80057b4 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(SG2_GPIO_Port, SG2_Pin, GPIO_PIN_SET);
 80010d8:	2201      	movs	r2, #1
 80010da:	2110      	movs	r1, #16
 80010dc:	4822      	ldr	r0, [pc, #136]	; (8001168 <GO_ModifyOutput+0x1d0>)
 80010de:	f004 fb69 	bl	80057b4 <HAL_GPIO_WritePin>
			eNewOutGain = Four_Gain;
 80010e2:	4b22      	ldr	r3, [pc, #136]	; (800116c <GO_ModifyOutput+0x1d4>)
 80010e4:	2204      	movs	r2, #4
 80010e6:	701a      	strb	r2, [r3, #0]
			break;
 80010e8:	e038      	b.n	800115c <GO_ModifyOutput+0x1c4>
		case 20:
		case 21:
		case 22:
		case 23:
			HAL_GPIO_WritePin(SG0_GPIO_Port, SG0_Pin, GPIO_PIN_SET);
 80010ea:	2201      	movs	r2, #1
 80010ec:	2101      	movs	r1, #1
 80010ee:	481d      	ldr	r0, [pc, #116]	; (8001164 <GO_ModifyOutput+0x1cc>)
 80010f0:	f004 fb60 	bl	80057b4 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(SG1_GPIO_Port, SG1_Pin, GPIO_PIN_RESET);
 80010f4:	2200      	movs	r2, #0
 80010f6:	2120      	movs	r1, #32
 80010f8:	481b      	ldr	r0, [pc, #108]	; (8001168 <GO_ModifyOutput+0x1d0>)
 80010fa:	f004 fb5b 	bl	80057b4 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(SG2_GPIO_Port, SG2_Pin, GPIO_PIN_SET);
 80010fe:	2201      	movs	r2, #1
 8001100:	2110      	movs	r1, #16
 8001102:	4819      	ldr	r0, [pc, #100]	; (8001168 <GO_ModifyOutput+0x1d0>)
 8001104:	f004 fb56 	bl	80057b4 <HAL_GPIO_WritePin>
			eNewOutGain = Five_Gain;
 8001108:	4b18      	ldr	r3, [pc, #96]	; (800116c <GO_ModifyOutput+0x1d4>)
 800110a:	2205      	movs	r2, #5
 800110c:	701a      	strb	r2, [r3, #0]
			break;
 800110e:	e025      	b.n	800115c <GO_ModifyOutput+0x1c4>
		case 24:
		case 25:
		case 26:
		case 27:
			HAL_GPIO_WritePin(SG0_GPIO_Port, SG0_Pin, GPIO_PIN_RESET);
 8001110:	2200      	movs	r2, #0
 8001112:	2101      	movs	r1, #1
 8001114:	4813      	ldr	r0, [pc, #76]	; (8001164 <GO_ModifyOutput+0x1cc>)
 8001116:	f004 fb4d 	bl	80057b4 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(SG1_GPIO_Port, SG1_Pin, GPIO_PIN_SET);
 800111a:	2201      	movs	r2, #1
 800111c:	2120      	movs	r1, #32
 800111e:	4812      	ldr	r0, [pc, #72]	; (8001168 <GO_ModifyOutput+0x1d0>)
 8001120:	f004 fb48 	bl	80057b4 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(SG2_GPIO_Port, SG2_Pin, GPIO_PIN_SET);
 8001124:	2201      	movs	r2, #1
 8001126:	2110      	movs	r1, #16
 8001128:	480f      	ldr	r0, [pc, #60]	; (8001168 <GO_ModifyOutput+0x1d0>)
 800112a:	f004 fb43 	bl	80057b4 <HAL_GPIO_WritePin>
			eNewOutGain = Six_Gain;
 800112e:	4b0f      	ldr	r3, [pc, #60]	; (800116c <GO_ModifyOutput+0x1d4>)
 8001130:	2206      	movs	r2, #6
 8001132:	701a      	strb	r2, [r3, #0]
			break;
 8001134:	e012      	b.n	800115c <GO_ModifyOutput+0x1c4>
		case 28:
		case 29:
		case 30:
		case 31:
			HAL_GPIO_WritePin(SG0_GPIO_Port, SG0_Pin, GPIO_PIN_SET);
 8001136:	2201      	movs	r2, #1
 8001138:	2101      	movs	r1, #1
 800113a:	480a      	ldr	r0, [pc, #40]	; (8001164 <GO_ModifyOutput+0x1cc>)
 800113c:	f004 fb3a 	bl	80057b4 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(SG1_GPIO_Port, SG1_Pin, GPIO_PIN_SET);
 8001140:	2201      	movs	r2, #1
 8001142:	2120      	movs	r1, #32
 8001144:	4808      	ldr	r0, [pc, #32]	; (8001168 <GO_ModifyOutput+0x1d0>)
 8001146:	f004 fb35 	bl	80057b4 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(SG2_GPIO_Port, SG2_Pin, GPIO_PIN_SET);
 800114a:	2201      	movs	r2, #1
 800114c:	2110      	movs	r1, #16
 800114e:	4806      	ldr	r0, [pc, #24]	; (8001168 <GO_ModifyOutput+0x1d0>)
 8001150:	f004 fb30 	bl	80057b4 <HAL_GPIO_WritePin>
			eNewOutGain = Seven_Gain;
 8001154:	4b05      	ldr	r3, [pc, #20]	; (800116c <GO_ModifyOutput+0x1d4>)
 8001156:	2207      	movs	r2, #7
 8001158:	701a      	strb	r2, [r3, #0]
			break;
 800115a:	bf00      	nop
	}

}
 800115c:	bf00      	nop
 800115e:	bd80      	pop	{r7, pc}
 8001160:	40012c00 	.word	0x40012c00
 8001164:	48000400 	.word	0x48000400
 8001168:	48000800 	.word	0x48000800
 800116c:	20000008 	.word	0x20000008

08001170 <GO_GetOutputGain>:
 *
 *
 *
 */
uint8_t GO_GetOutputGain()
{
 8001170:	b480      	push	{r7}
 8001172:	af00      	add	r7, sp, #0
	return (uint8_t)eNewOutGain;
 8001174:	4b03      	ldr	r3, [pc, #12]	; (8001184 <GO_GetOutputGain+0x14>)
 8001176:	781b      	ldrb	r3, [r3, #0]
}
 8001178:	4618      	mov	r0, r3
 800117a:	46bd      	mov	sp, r7
 800117c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001180:	4770      	bx	lr
 8001182:	bf00      	nop
 8001184:	20000008 	.word	0x20000008

08001188 <MX_ADC1_Init>:
ADC_HandleTypeDef hadc1;
DMA_HandleTypeDef hdma_adc1;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 8001188:	b580      	push	{r7, lr}
 800118a:	b08c      	sub	sp, #48	; 0x30
 800118c:	af00      	add	r7, sp, #0
  ADC_MultiModeTypeDef multimode = {0};
 800118e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001192:	2200      	movs	r2, #0
 8001194:	601a      	str	r2, [r3, #0]
 8001196:	605a      	str	r2, [r3, #4]
 8001198:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 800119a:	1d3b      	adds	r3, r7, #4
 800119c:	2220      	movs	r2, #32
 800119e:	2100      	movs	r1, #0
 80011a0:	4618      	mov	r0, r3
 80011a2:	f008 f881 	bl	80092a8 <memset>

  /** Common config 
  */
  hadc1.Instance = ADC1;
 80011a6:	4b32      	ldr	r3, [pc, #200]	; (8001270 <MX_ADC1_Init+0xe8>)
 80011a8:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 80011ac:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 80011ae:	4b30      	ldr	r3, [pc, #192]	; (8001270 <MX_ADC1_Init+0xe8>)
 80011b0:	2200      	movs	r2, #0
 80011b2:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 80011b4:	4b2e      	ldr	r3, [pc, #184]	; (8001270 <MX_ADC1_Init+0xe8>)
 80011b6:	2200      	movs	r2, #0
 80011b8:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80011ba:	4b2d      	ldr	r3, [pc, #180]	; (8001270 <MX_ADC1_Init+0xe8>)
 80011bc:	2200      	movs	r2, #0
 80011be:	60da      	str	r2, [r3, #12]
  hadc1.Init.GainCompensation = 0;
 80011c0:	4b2b      	ldr	r3, [pc, #172]	; (8001270 <MX_ADC1_Init+0xe8>)
 80011c2:	2200      	movs	r2, #0
 80011c4:	611a      	str	r2, [r3, #16]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 80011c6:	4b2a      	ldr	r3, [pc, #168]	; (8001270 <MX_ADC1_Init+0xe8>)
 80011c8:	2200      	movs	r2, #0
 80011ca:	615a      	str	r2, [r3, #20]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80011cc:	4b28      	ldr	r3, [pc, #160]	; (8001270 <MX_ADC1_Init+0xe8>)
 80011ce:	2204      	movs	r2, #4
 80011d0:	619a      	str	r2, [r3, #24]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 80011d2:	4b27      	ldr	r3, [pc, #156]	; (8001270 <MX_ADC1_Init+0xe8>)
 80011d4:	2200      	movs	r2, #0
 80011d6:	771a      	strb	r2, [r3, #28]
  hadc1.Init.ContinuousConvMode = ENABLE;
 80011d8:	4b25      	ldr	r3, [pc, #148]	; (8001270 <MX_ADC1_Init+0xe8>)
 80011da:	2201      	movs	r2, #1
 80011dc:	775a      	strb	r2, [r3, #29]
  hadc1.Init.NbrOfConversion = 1;
 80011de:	4b24      	ldr	r3, [pc, #144]	; (8001270 <MX_ADC1_Init+0xe8>)
 80011e0:	2201      	movs	r2, #1
 80011e2:	621a      	str	r2, [r3, #32]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80011e4:	4b22      	ldr	r3, [pc, #136]	; (8001270 <MX_ADC1_Init+0xe8>)
 80011e6:	2200      	movs	r2, #0
 80011e8:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80011ec:	4b20      	ldr	r3, [pc, #128]	; (8001270 <MX_ADC1_Init+0xe8>)
 80011ee:	2200      	movs	r2, #0
 80011f0:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80011f2:	4b1f      	ldr	r3, [pc, #124]	; (8001270 <MX_ADC1_Init+0xe8>)
 80011f4:	2200      	movs	r2, #0
 80011f6:	631a      	str	r2, [r3, #48]	; 0x30
  hadc1.Init.DMAContinuousRequests = ENABLE;
 80011f8:	4b1d      	ldr	r3, [pc, #116]	; (8001270 <MX_ADC1_Init+0xe8>)
 80011fa:	2201      	movs	r2, #1
 80011fc:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hadc1.Init.Overrun = ADC_OVR_DATA_OVERWRITTEN;
 8001200:	4b1b      	ldr	r3, [pc, #108]	; (8001270 <MX_ADC1_Init+0xe8>)
 8001202:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8001206:	63da      	str	r2, [r3, #60]	; 0x3c
  hadc1.Init.OversamplingMode = DISABLE;
 8001208:	4b19      	ldr	r3, [pc, #100]	; (8001270 <MX_ADC1_Init+0xe8>)
 800120a:	2200      	movs	r2, #0
 800120c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8001210:	4817      	ldr	r0, [pc, #92]	; (8001270 <MX_ADC1_Init+0xe8>)
 8001212:	f001 ffc7 	bl	80031a4 <HAL_ADC_Init>
 8001216:	4603      	mov	r3, r0
 8001218:	2b00      	cmp	r3, #0
 800121a:	d001      	beq.n	8001220 <MX_ADC1_Init+0x98>
  {
    Error_Handler();
 800121c:	f000 ff3a 	bl	8002094 <Error_Handler>
  }
  /** Configure the ADC multi-mode 
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 8001220:	2300      	movs	r3, #0
 8001222:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 8001224:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001228:	4619      	mov	r1, r3
 800122a:	4811      	ldr	r0, [pc, #68]	; (8001270 <MX_ADC1_Init+0xe8>)
 800122c:	f002 fd50 	bl	8003cd0 <HAL_ADCEx_MultiModeConfigChannel>
 8001230:	4603      	mov	r3, r0
 8001232:	2b00      	cmp	r3, #0
 8001234:	d001      	beq.n	800123a <MX_ADC1_Init+0xb2>
  {
    Error_Handler();
 8001236:	f000 ff2d 	bl	8002094 <Error_Handler>
  }
  /** Configure Regular Channel 
  */
  sConfig.Channel = ADC_CHANNEL_3;
 800123a:	4b0e      	ldr	r3, [pc, #56]	; (8001274 <MX_ADC1_Init+0xec>)
 800123c:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 800123e:	2306      	movs	r3, #6
 8001240:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 8001242:	2300      	movs	r3, #0
 8001244:	60fb      	str	r3, [r7, #12]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8001246:	237f      	movs	r3, #127	; 0x7f
 8001248:	613b      	str	r3, [r7, #16]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 800124a:	2304      	movs	r3, #4
 800124c:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 800124e:	2300      	movs	r3, #0
 8001250:	61bb      	str	r3, [r7, #24]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001252:	1d3b      	adds	r3, r7, #4
 8001254:	4619      	mov	r1, r3
 8001256:	4806      	ldr	r0, [pc, #24]	; (8001270 <MX_ADC1_Init+0xe8>)
 8001258:	f002 f964 	bl	8003524 <HAL_ADC_ConfigChannel>
 800125c:	4603      	mov	r3, r0
 800125e:	2b00      	cmp	r3, #0
 8001260:	d001      	beq.n	8001266 <MX_ADC1_Init+0xde>
  {
    Error_Handler();
 8001262:	f000 ff17 	bl	8002094 <Error_Handler>
  }

}
 8001266:	bf00      	nop
 8001268:	3730      	adds	r7, #48	; 0x30
 800126a:	46bd      	mov	sp, r7
 800126c:	bd80      	pop	{r7, pc}
 800126e:	bf00      	nop
 8001270:	20000c14 	.word	0x20000c14
 8001274:	0c900008 	.word	0x0c900008

08001278 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 8001278:	b580      	push	{r7, lr}
 800127a:	b08a      	sub	sp, #40	; 0x28
 800127c:	af00      	add	r7, sp, #0
 800127e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001280:	f107 0314 	add.w	r3, r7, #20
 8001284:	2200      	movs	r2, #0
 8001286:	601a      	str	r2, [r3, #0]
 8001288:	605a      	str	r2, [r3, #4]
 800128a:	609a      	str	r2, [r3, #8]
 800128c:	60da      	str	r2, [r3, #12]
 800128e:	611a      	str	r2, [r3, #16]
  if(adcHandle->Instance==ADC1)
 8001290:	687b      	ldr	r3, [r7, #4]
 8001292:	681b      	ldr	r3, [r3, #0]
 8001294:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8001298:	d14f      	bne.n	800133a <HAL_ADC_MspInit+0xc2>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* ADC1 clock enable */
    __HAL_RCC_ADC12_CLK_ENABLE();
 800129a:	4b2a      	ldr	r3, [pc, #168]	; (8001344 <HAL_ADC_MspInit+0xcc>)
 800129c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800129e:	4a29      	ldr	r2, [pc, #164]	; (8001344 <HAL_ADC_MspInit+0xcc>)
 80012a0:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80012a4:	64d3      	str	r3, [r2, #76]	; 0x4c
 80012a6:	4b27      	ldr	r3, [pc, #156]	; (8001344 <HAL_ADC_MspInit+0xcc>)
 80012a8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80012aa:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80012ae:	613b      	str	r3, [r7, #16]
 80012b0:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80012b2:	4b24      	ldr	r3, [pc, #144]	; (8001344 <HAL_ADC_MspInit+0xcc>)
 80012b4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80012b6:	4a23      	ldr	r2, [pc, #140]	; (8001344 <HAL_ADC_MspInit+0xcc>)
 80012b8:	f043 0301 	orr.w	r3, r3, #1
 80012bc:	64d3      	str	r3, [r2, #76]	; 0x4c
 80012be:	4b21      	ldr	r3, [pc, #132]	; (8001344 <HAL_ADC_MspInit+0xcc>)
 80012c0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80012c2:	f003 0301 	and.w	r3, r3, #1
 80012c6:	60fb      	str	r3, [r7, #12]
 80012c8:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration    
    PA2     ------> ADC1_IN3 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 80012ca:	2304      	movs	r3, #4
 80012cc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80012ce:	2303      	movs	r3, #3
 80012d0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012d2:	2300      	movs	r3, #0
 80012d4:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80012d6:	f107 0314 	add.w	r3, r7, #20
 80012da:	4619      	mov	r1, r3
 80012dc:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80012e0:	f004 f8ce 	bl	8005480 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Channel1;
 80012e4:	4b18      	ldr	r3, [pc, #96]	; (8001348 <HAL_ADC_MspInit+0xd0>)
 80012e6:	4a19      	ldr	r2, [pc, #100]	; (800134c <HAL_ADC_MspInit+0xd4>)
 80012e8:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Request = DMA_REQUEST_ADC1;
 80012ea:	4b17      	ldr	r3, [pc, #92]	; (8001348 <HAL_ADC_MspInit+0xd0>)
 80012ec:	2205      	movs	r2, #5
 80012ee:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80012f0:	4b15      	ldr	r3, [pc, #84]	; (8001348 <HAL_ADC_MspInit+0xd0>)
 80012f2:	2200      	movs	r2, #0
 80012f4:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 80012f6:	4b14      	ldr	r3, [pc, #80]	; (8001348 <HAL_ADC_MspInit+0xd0>)
 80012f8:	2200      	movs	r2, #0
 80012fa:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 80012fc:	4b12      	ldr	r3, [pc, #72]	; (8001348 <HAL_ADC_MspInit+0xd0>)
 80012fe:	2280      	movs	r2, #128	; 0x80
 8001300:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8001302:	4b11      	ldr	r3, [pc, #68]	; (8001348 <HAL_ADC_MspInit+0xd0>)
 8001304:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001308:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 800130a:	4b0f      	ldr	r3, [pc, #60]	; (8001348 <HAL_ADC_MspInit+0xd0>)
 800130c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8001310:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 8001312:	4b0d      	ldr	r3, [pc, #52]	; (8001348 <HAL_ADC_MspInit+0xd0>)
 8001314:	2220      	movs	r2, #32
 8001316:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 8001318:	4b0b      	ldr	r3, [pc, #44]	; (8001348 <HAL_ADC_MspInit+0xd0>)
 800131a:	2200      	movs	r2, #0
 800131c:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 800131e:	480a      	ldr	r0, [pc, #40]	; (8001348 <HAL_ADC_MspInit+0xd0>)
 8001320:	f003 fde2 	bl	8004ee8 <HAL_DMA_Init>
 8001324:	4603      	mov	r3, r0
 8001326:	2b00      	cmp	r3, #0
 8001328:	d001      	beq.n	800132e <HAL_ADC_MspInit+0xb6>
    {
      Error_Handler();
 800132a:	f000 feb3 	bl	8002094 <Error_Handler>
    }

    __HAL_LINKDMA(adcHandle,DMA_Handle,hdma_adc1);
 800132e:	687b      	ldr	r3, [r7, #4]
 8001330:	4a05      	ldr	r2, [pc, #20]	; (8001348 <HAL_ADC_MspInit+0xd0>)
 8001332:	655a      	str	r2, [r3, #84]	; 0x54
 8001334:	4a04      	ldr	r2, [pc, #16]	; (8001348 <HAL_ADC_MspInit+0xd0>)
 8001336:	687b      	ldr	r3, [r7, #4]
 8001338:	6293      	str	r3, [r2, #40]	; 0x28

  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 800133a:	bf00      	nop
 800133c:	3728      	adds	r7, #40	; 0x28
 800133e:	46bd      	mov	sp, r7
 8001340:	bd80      	pop	{r7, pc}
 8001342:	bf00      	nop
 8001344:	40021000 	.word	0x40021000
 8001348:	20000c80 	.word	0x20000c80
 800134c:	40020008 	.word	0x40020008

08001350 <MX_COMP1_Init>:

COMP_HandleTypeDef hcomp1;

/* COMP1 init function */
void MX_COMP1_Init(void)
{
 8001350:	b580      	push	{r7, lr}
 8001352:	af00      	add	r7, sp, #0

  hcomp1.Instance = COMP1;
 8001354:	4b0f      	ldr	r3, [pc, #60]	; (8001394 <MX_COMP1_Init+0x44>)
 8001356:	4a10      	ldr	r2, [pc, #64]	; (8001398 <MX_COMP1_Init+0x48>)
 8001358:	601a      	str	r2, [r3, #0]
  hcomp1.Init.InputPlus = COMP_INPUT_PLUS_IO1;
 800135a:	4b0e      	ldr	r3, [pc, #56]	; (8001394 <MX_COMP1_Init+0x44>)
 800135c:	2200      	movs	r2, #0
 800135e:	605a      	str	r2, [r3, #4]
  hcomp1.Init.InputMinus = COMP_INPUT_MINUS_VREFINT;
 8001360:	4b0c      	ldr	r3, [pc, #48]	; (8001394 <MX_COMP1_Init+0x44>)
 8001362:	4a0e      	ldr	r2, [pc, #56]	; (800139c <MX_COMP1_Init+0x4c>)
 8001364:	609a      	str	r2, [r3, #8]
  hcomp1.Init.OutputPol = COMP_OUTPUTPOL_NONINVERTED;
 8001366:	4b0b      	ldr	r3, [pc, #44]	; (8001394 <MX_COMP1_Init+0x44>)
 8001368:	2200      	movs	r2, #0
 800136a:	611a      	str	r2, [r3, #16]
  hcomp1.Init.Hysteresis = COMP_HYSTERESIS_NONE;
 800136c:	4b09      	ldr	r3, [pc, #36]	; (8001394 <MX_COMP1_Init+0x44>)
 800136e:	2200      	movs	r2, #0
 8001370:	60da      	str	r2, [r3, #12]
  hcomp1.Init.BlankingSrce = COMP_BLANKINGSRC_NONE;
 8001372:	4b08      	ldr	r3, [pc, #32]	; (8001394 <MX_COMP1_Init+0x44>)
 8001374:	2200      	movs	r2, #0
 8001376:	615a      	str	r2, [r3, #20]
  hcomp1.Init.TriggerMode = COMP_TRIGGERMODE_NONE;
 8001378:	4b06      	ldr	r3, [pc, #24]	; (8001394 <MX_COMP1_Init+0x44>)
 800137a:	2200      	movs	r2, #0
 800137c:	619a      	str	r2, [r3, #24]
  if (HAL_COMP_Init(&hcomp1) != HAL_OK)
 800137e:	4805      	ldr	r0, [pc, #20]	; (8001394 <MX_COMP1_Init+0x44>)
 8001380:	f002 fefa 	bl	8004178 <HAL_COMP_Init>
 8001384:	4603      	mov	r3, r0
 8001386:	2b00      	cmp	r3, #0
 8001388:	d001      	beq.n	800138e <MX_COMP1_Init+0x3e>
  {
    Error_Handler();
 800138a:	f000 fe83 	bl	8002094 <Error_Handler>
  }

}
 800138e:	bf00      	nop
 8001390:	bd80      	pop	{r7, pc}
 8001392:	bf00      	nop
 8001394:	20000ce0 	.word	0x20000ce0
 8001398:	40010200 	.word	0x40010200
 800139c:	00800030 	.word	0x00800030

080013a0 <HAL_COMP_MspInit>:

void HAL_COMP_MspInit(COMP_HandleTypeDef* compHandle)
{
 80013a0:	b580      	push	{r7, lr}
 80013a2:	b088      	sub	sp, #32
 80013a4:	af00      	add	r7, sp, #0
 80013a6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80013a8:	f107 030c 	add.w	r3, r7, #12
 80013ac:	2200      	movs	r2, #0
 80013ae:	601a      	str	r2, [r3, #0]
 80013b0:	605a      	str	r2, [r3, #4]
 80013b2:	609a      	str	r2, [r3, #8]
 80013b4:	60da      	str	r2, [r3, #12]
 80013b6:	611a      	str	r2, [r3, #16]
  if(compHandle->Instance==COMP1)
 80013b8:	687b      	ldr	r3, [r7, #4]
 80013ba:	681b      	ldr	r3, [r3, #0]
 80013bc:	4a0f      	ldr	r2, [pc, #60]	; (80013fc <HAL_COMP_MspInit+0x5c>)
 80013be:	4293      	cmp	r3, r2
 80013c0:	d118      	bne.n	80013f4 <HAL_COMP_MspInit+0x54>
  {
  /* USER CODE BEGIN COMP1_MspInit 0 */

  /* USER CODE END COMP1_MspInit 0 */
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80013c2:	4b0f      	ldr	r3, [pc, #60]	; (8001400 <HAL_COMP_MspInit+0x60>)
 80013c4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80013c6:	4a0e      	ldr	r2, [pc, #56]	; (8001400 <HAL_COMP_MspInit+0x60>)
 80013c8:	f043 0301 	orr.w	r3, r3, #1
 80013cc:	64d3      	str	r3, [r2, #76]	; 0x4c
 80013ce:	4b0c      	ldr	r3, [pc, #48]	; (8001400 <HAL_COMP_MspInit+0x60>)
 80013d0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80013d2:	f003 0301 	and.w	r3, r3, #1
 80013d6:	60bb      	str	r3, [r7, #8]
 80013d8:	68bb      	ldr	r3, [r7, #8]
    /**COMP1 GPIO Configuration    
    PA1     ------> COMP1_INP 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 80013da:	2302      	movs	r3, #2
 80013dc:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80013de:	2303      	movs	r3, #3
 80013e0:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013e2:	2300      	movs	r3, #0
 80013e4:	617b      	str	r3, [r7, #20]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80013e6:	f107 030c 	add.w	r3, r7, #12
 80013ea:	4619      	mov	r1, r3
 80013ec:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80013f0:	f004 f846 	bl	8005480 <HAL_GPIO_Init>

  /* USER CODE BEGIN COMP1_MspInit 1 */

  /* USER CODE END COMP1_MspInit 1 */
  }
}
 80013f4:	bf00      	nop
 80013f6:	3720      	adds	r7, #32
 80013f8:	46bd      	mov	sp, r7
 80013fa:	bd80      	pop	{r7, pc}
 80013fc:	40010200 	.word	0x40010200
 8001400:	40021000 	.word	0x40021000

08001404 <MX_DAC1_Init>:
DMA_HandleTypeDef hdma_dac1_ch1;
DMA_HandleTypeDef hdma_dac2_ch1;

/* DAC1 init function */
void MX_DAC1_Init(void)
{
 8001404:	b580      	push	{r7, lr}
 8001406:	b08c      	sub	sp, #48	; 0x30
 8001408:	af00      	add	r7, sp, #0
  DAC_ChannelConfTypeDef sConfig = {0};
 800140a:	463b      	mov	r3, r7
 800140c:	2230      	movs	r2, #48	; 0x30
 800140e:	2100      	movs	r1, #0
 8001410:	4618      	mov	r0, r3
 8001412:	f007 ff49 	bl	80092a8 <memset>

  /** DAC Initialization 
  */
  hdac1.Instance = DAC1;
 8001416:	4b1e      	ldr	r3, [pc, #120]	; (8001490 <MX_DAC1_Init+0x8c>)
 8001418:	4a1e      	ldr	r2, [pc, #120]	; (8001494 <MX_DAC1_Init+0x90>)
 800141a:	601a      	str	r2, [r3, #0]
  if (HAL_DAC_Init(&hdac1) != HAL_OK)
 800141c:	481c      	ldr	r0, [pc, #112]	; (8001490 <MX_DAC1_Init+0x8c>)
 800141e:	f003 f94e 	bl	80046be <HAL_DAC_Init>
 8001422:	4603      	mov	r3, r0
 8001424:	2b00      	cmp	r3, #0
 8001426:	d001      	beq.n	800142c <MX_DAC1_Init+0x28>
  {
    Error_Handler();
 8001428:	f000 fe34 	bl	8002094 <Error_Handler>
  }
  /** DAC channel OUT1 config 
  */
  sConfig.DAC_HighFrequency = DAC_HIGH_FREQUENCY_INTERFACE_MODE_ABOVE_80MHZ;
 800142c:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8001430:	603b      	str	r3, [r7, #0]
  sConfig.DAC_DMADoubleDataMode = DISABLE;
 8001432:	2300      	movs	r3, #0
 8001434:	713b      	strb	r3, [r7, #4]
  sConfig.DAC_SignedFormat = DISABLE;
 8001436:	2300      	movs	r3, #0
 8001438:	717b      	strb	r3, [r7, #5]
  sConfig.DAC_SampleAndHold = DAC_SAMPLEANDHOLD_DISABLE;
 800143a:	2300      	movs	r3, #0
 800143c:	60bb      	str	r3, [r7, #8]
  sConfig.DAC_Trigger = DAC_TRIGGER_T8_TRGO;
 800143e:	2306      	movs	r3, #6
 8001440:	60fb      	str	r3, [r7, #12]
  sConfig.DAC_Trigger2 = DAC_TRIGGER_NONE;
 8001442:	2300      	movs	r3, #0
 8001444:	613b      	str	r3, [r7, #16]
  sConfig.DAC_OutputBuffer = DAC_OUTPUTBUFFER_ENABLE;
 8001446:	2300      	movs	r3, #0
 8001448:	617b      	str	r3, [r7, #20]
  sConfig.DAC_ConnectOnChipPeripheral = DAC_CHIPCONNECT_DISABLE;
 800144a:	2301      	movs	r3, #1
 800144c:	61bb      	str	r3, [r7, #24]
  sConfig.DAC_UserTrimming = DAC_TRIMMING_FACTORY;
 800144e:	2300      	movs	r3, #0
 8001450:	61fb      	str	r3, [r7, #28]
  if (HAL_DAC_ConfigChannel(&hdac1, &sConfig, DAC_CHANNEL_1) != HAL_OK)
 8001452:	463b      	mov	r3, r7
 8001454:	2200      	movs	r2, #0
 8001456:	4619      	mov	r1, r3
 8001458:	480d      	ldr	r0, [pc, #52]	; (8001490 <MX_DAC1_Init+0x8c>)
 800145a:	f003 fb0f 	bl	8004a7c <HAL_DAC_ConfigChannel>
 800145e:	4603      	mov	r3, r0
 8001460:	2b00      	cmp	r3, #0
 8001462:	d001      	beq.n	8001468 <MX_DAC1_Init+0x64>
  {
    Error_Handler();
 8001464:	f000 fe16 	bl	8002094 <Error_Handler>
  }
  /** DAC channel OUT2 config 
  */
  sConfig.DAC_Trigger = DAC_TRIGGER_NONE;
 8001468:	2300      	movs	r3, #0
 800146a:	60fb      	str	r3, [r7, #12]
  sConfig.DAC_ConnectOnChipPeripheral = DAC_CHIPCONNECT_DISABLE;
 800146c:	2301      	movs	r3, #1
 800146e:	61bb      	str	r3, [r7, #24]
  if (HAL_DAC_ConfigChannel(&hdac1, &sConfig, DAC_CHANNEL_2) != HAL_OK)
 8001470:	463b      	mov	r3, r7
 8001472:	2210      	movs	r2, #16
 8001474:	4619      	mov	r1, r3
 8001476:	4806      	ldr	r0, [pc, #24]	; (8001490 <MX_DAC1_Init+0x8c>)
 8001478:	f003 fb00 	bl	8004a7c <HAL_DAC_ConfigChannel>
 800147c:	4603      	mov	r3, r0
 800147e:	2b00      	cmp	r3, #0
 8001480:	d001      	beq.n	8001486 <MX_DAC1_Init+0x82>
  {
    Error_Handler();
 8001482:	f000 fe07 	bl	8002094 <Error_Handler>
  }

}
 8001486:	bf00      	nop
 8001488:	3730      	adds	r7, #48	; 0x30
 800148a:	46bd      	mov	sp, r7
 800148c:	bd80      	pop	{r7, pc}
 800148e:	bf00      	nop
 8001490:	20000d18 	.word	0x20000d18
 8001494:	50000800 	.word	0x50000800

08001498 <MX_DAC2_Init>:
/* DAC2 init function */
void MX_DAC2_Init(void)
{
 8001498:	b580      	push	{r7, lr}
 800149a:	b08c      	sub	sp, #48	; 0x30
 800149c:	af00      	add	r7, sp, #0
  DAC_ChannelConfTypeDef sConfig = {0};
 800149e:	463b      	mov	r3, r7
 80014a0:	2230      	movs	r2, #48	; 0x30
 80014a2:	2100      	movs	r1, #0
 80014a4:	4618      	mov	r0, r3
 80014a6:	f007 feff 	bl	80092a8 <memset>

  /** DAC Initialization 
  */
  hdac2.Instance = DAC2;
 80014aa:	4b16      	ldr	r3, [pc, #88]	; (8001504 <MX_DAC2_Init+0x6c>)
 80014ac:	4a16      	ldr	r2, [pc, #88]	; (8001508 <MX_DAC2_Init+0x70>)
 80014ae:	601a      	str	r2, [r3, #0]
  if (HAL_DAC_Init(&hdac2) != HAL_OK)
 80014b0:	4814      	ldr	r0, [pc, #80]	; (8001504 <MX_DAC2_Init+0x6c>)
 80014b2:	f003 f904 	bl	80046be <HAL_DAC_Init>
 80014b6:	4603      	mov	r3, r0
 80014b8:	2b00      	cmp	r3, #0
 80014ba:	d001      	beq.n	80014c0 <MX_DAC2_Init+0x28>
  {
    Error_Handler();
 80014bc:	f000 fdea 	bl	8002094 <Error_Handler>
  }
  /** DAC channel OUT1 config 
  */
  sConfig.DAC_HighFrequency = DAC_HIGH_FREQUENCY_INTERFACE_MODE_ABOVE_80MHZ;
 80014c0:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80014c4:	603b      	str	r3, [r7, #0]
  sConfig.DAC_DMADoubleDataMode = DISABLE;
 80014c6:	2300      	movs	r3, #0
 80014c8:	713b      	strb	r3, [r7, #4]
  sConfig.DAC_SignedFormat = DISABLE;
 80014ca:	2300      	movs	r3, #0
 80014cc:	717b      	strb	r3, [r7, #5]
  sConfig.DAC_SampleAndHold = DAC_SAMPLEANDHOLD_DISABLE;
 80014ce:	2300      	movs	r3, #0
 80014d0:	60bb      	str	r3, [r7, #8]
  sConfig.DAC_Trigger = DAC_TRIGGER_T8_TRGO;
 80014d2:	2306      	movs	r3, #6
 80014d4:	60fb      	str	r3, [r7, #12]
  sConfig.DAC_Trigger2 = DAC_TRIGGER_NONE;
 80014d6:	2300      	movs	r3, #0
 80014d8:	613b      	str	r3, [r7, #16]
  sConfig.DAC_OutputBuffer = DAC_OUTPUTBUFFER_ENABLE;
 80014da:	2300      	movs	r3, #0
 80014dc:	617b      	str	r3, [r7, #20]
  sConfig.DAC_ConnectOnChipPeripheral = DAC_CHIPCONNECT_DISABLE;
 80014de:	2301      	movs	r3, #1
 80014e0:	61bb      	str	r3, [r7, #24]
  sConfig.DAC_UserTrimming = DAC_TRIMMING_FACTORY;
 80014e2:	2300      	movs	r3, #0
 80014e4:	61fb      	str	r3, [r7, #28]
  if (HAL_DAC_ConfigChannel(&hdac2, &sConfig, DAC_CHANNEL_1) != HAL_OK)
 80014e6:	463b      	mov	r3, r7
 80014e8:	2200      	movs	r2, #0
 80014ea:	4619      	mov	r1, r3
 80014ec:	4805      	ldr	r0, [pc, #20]	; (8001504 <MX_DAC2_Init+0x6c>)
 80014ee:	f003 fac5 	bl	8004a7c <HAL_DAC_ConfigChannel>
 80014f2:	4603      	mov	r3, r0
 80014f4:	2b00      	cmp	r3, #0
 80014f6:	d001      	beq.n	80014fc <MX_DAC2_Init+0x64>
  {
    Error_Handler();
 80014f8:	f000 fdcc 	bl	8002094 <Error_Handler>
  }

}
 80014fc:	bf00      	nop
 80014fe:	3730      	adds	r7, #48	; 0x30
 8001500:	46bd      	mov	sp, r7
 8001502:	bd80      	pop	{r7, pc}
 8001504:	20000d04 	.word	0x20000d04
 8001508:	50000c00 	.word	0x50000c00

0800150c <HAL_DAC_MspInit>:

void HAL_DAC_MspInit(DAC_HandleTypeDef* dacHandle)
{
 800150c:	b580      	push	{r7, lr}
 800150e:	b08c      	sub	sp, #48	; 0x30
 8001510:	af00      	add	r7, sp, #0
 8001512:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001514:	f107 031c 	add.w	r3, r7, #28
 8001518:	2200      	movs	r2, #0
 800151a:	601a      	str	r2, [r3, #0]
 800151c:	605a      	str	r2, [r3, #4]
 800151e:	609a      	str	r2, [r3, #8]
 8001520:	60da      	str	r2, [r3, #12]
 8001522:	611a      	str	r2, [r3, #16]
  if(dacHandle->Instance==DAC1)
 8001524:	687b      	ldr	r3, [r7, #4]
 8001526:	681b      	ldr	r3, [r3, #0]
 8001528:	4a56      	ldr	r2, [pc, #344]	; (8001684 <HAL_DAC_MspInit+0x178>)
 800152a:	4293      	cmp	r3, r2
 800152c:	d150      	bne.n	80015d0 <HAL_DAC_MspInit+0xc4>
  {
  /* USER CODE BEGIN DAC1_MspInit 0 */

  /* USER CODE END DAC1_MspInit 0 */
    /* DAC1 clock enable */
    __HAL_RCC_DAC1_CLK_ENABLE();
 800152e:	4b56      	ldr	r3, [pc, #344]	; (8001688 <HAL_DAC_MspInit+0x17c>)
 8001530:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001532:	4a55      	ldr	r2, [pc, #340]	; (8001688 <HAL_DAC_MspInit+0x17c>)
 8001534:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001538:	64d3      	str	r3, [r2, #76]	; 0x4c
 800153a:	4b53      	ldr	r3, [pc, #332]	; (8001688 <HAL_DAC_MspInit+0x17c>)
 800153c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800153e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001542:	61bb      	str	r3, [r7, #24]
 8001544:	69bb      	ldr	r3, [r7, #24]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001546:	4b50      	ldr	r3, [pc, #320]	; (8001688 <HAL_DAC_MspInit+0x17c>)
 8001548:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800154a:	4a4f      	ldr	r2, [pc, #316]	; (8001688 <HAL_DAC_MspInit+0x17c>)
 800154c:	f043 0301 	orr.w	r3, r3, #1
 8001550:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001552:	4b4d      	ldr	r3, [pc, #308]	; (8001688 <HAL_DAC_MspInit+0x17c>)
 8001554:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001556:	f003 0301 	and.w	r3, r3, #1
 800155a:	617b      	str	r3, [r7, #20]
 800155c:	697b      	ldr	r3, [r7, #20]
    /**DAC1 GPIO Configuration    
    PA4     ------> DAC1_OUT1
    PA5     ------> DAC1_OUT2 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 800155e:	2330      	movs	r3, #48	; 0x30
 8001560:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001562:	2303      	movs	r3, #3
 8001564:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001566:	2300      	movs	r3, #0
 8001568:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800156a:	f107 031c 	add.w	r3, r7, #28
 800156e:	4619      	mov	r1, r3
 8001570:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001574:	f003 ff84 	bl	8005480 <HAL_GPIO_Init>

    /* DAC1 DMA Init */
    /* DAC1_CH1 Init */
    hdma_dac1_ch1.Instance = DMA1_Channel2;
 8001578:	4b44      	ldr	r3, [pc, #272]	; (800168c <HAL_DAC_MspInit+0x180>)
 800157a:	4a45      	ldr	r2, [pc, #276]	; (8001690 <HAL_DAC_MspInit+0x184>)
 800157c:	601a      	str	r2, [r3, #0]
    hdma_dac1_ch1.Init.Request = DMA_REQUEST_DAC1_CHANNEL1;
 800157e:	4b43      	ldr	r3, [pc, #268]	; (800168c <HAL_DAC_MspInit+0x180>)
 8001580:	2206      	movs	r2, #6
 8001582:	605a      	str	r2, [r3, #4]
    hdma_dac1_ch1.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8001584:	4b41      	ldr	r3, [pc, #260]	; (800168c <HAL_DAC_MspInit+0x180>)
 8001586:	2210      	movs	r2, #16
 8001588:	609a      	str	r2, [r3, #8]
    hdma_dac1_ch1.Init.PeriphInc = DMA_PINC_DISABLE;
 800158a:	4b40      	ldr	r3, [pc, #256]	; (800168c <HAL_DAC_MspInit+0x180>)
 800158c:	2200      	movs	r2, #0
 800158e:	60da      	str	r2, [r3, #12]
    hdma_dac1_ch1.Init.MemInc = DMA_MINC_ENABLE;
 8001590:	4b3e      	ldr	r3, [pc, #248]	; (800168c <HAL_DAC_MspInit+0x180>)
 8001592:	2280      	movs	r2, #128	; 0x80
 8001594:	611a      	str	r2, [r3, #16]
    hdma_dac1_ch1.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8001596:	4b3d      	ldr	r3, [pc, #244]	; (800168c <HAL_DAC_MspInit+0x180>)
 8001598:	f44f 7200 	mov.w	r2, #512	; 0x200
 800159c:	615a      	str	r2, [r3, #20]
    hdma_dac1_ch1.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 800159e:	4b3b      	ldr	r3, [pc, #236]	; (800168c <HAL_DAC_MspInit+0x180>)
 80015a0:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80015a4:	619a      	str	r2, [r3, #24]
    hdma_dac1_ch1.Init.Mode = DMA_CIRCULAR;
 80015a6:	4b39      	ldr	r3, [pc, #228]	; (800168c <HAL_DAC_MspInit+0x180>)
 80015a8:	2220      	movs	r2, #32
 80015aa:	61da      	str	r2, [r3, #28]
    hdma_dac1_ch1.Init.Priority = DMA_PRIORITY_LOW;
 80015ac:	4b37      	ldr	r3, [pc, #220]	; (800168c <HAL_DAC_MspInit+0x180>)
 80015ae:	2200      	movs	r2, #0
 80015b0:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_dac1_ch1) != HAL_OK)
 80015b2:	4836      	ldr	r0, [pc, #216]	; (800168c <HAL_DAC_MspInit+0x180>)
 80015b4:	f003 fc98 	bl	8004ee8 <HAL_DMA_Init>
 80015b8:	4603      	mov	r3, r0
 80015ba:	2b00      	cmp	r3, #0
 80015bc:	d001      	beq.n	80015c2 <HAL_DAC_MspInit+0xb6>
    {
      Error_Handler();
 80015be:	f000 fd69 	bl	8002094 <Error_Handler>
    }

    __HAL_LINKDMA(dacHandle,DMA_Handle1,hdma_dac1_ch1);
 80015c2:	687b      	ldr	r3, [r7, #4]
 80015c4:	4a31      	ldr	r2, [pc, #196]	; (800168c <HAL_DAC_MspInit+0x180>)
 80015c6:	609a      	str	r2, [r3, #8]
 80015c8:	4a30      	ldr	r2, [pc, #192]	; (800168c <HAL_DAC_MspInit+0x180>)
 80015ca:	687b      	ldr	r3, [r7, #4]
 80015cc:	6293      	str	r3, [r2, #40]	; 0x28

  /* USER CODE BEGIN DAC2_MspInit 1 */

  /* USER CODE END DAC2_MspInit 1 */
  }
}
 80015ce:	e054      	b.n	800167a <HAL_DAC_MspInit+0x16e>
  else if(dacHandle->Instance==DAC2)
 80015d0:	687b      	ldr	r3, [r7, #4]
 80015d2:	681b      	ldr	r3, [r3, #0]
 80015d4:	4a2f      	ldr	r2, [pc, #188]	; (8001694 <HAL_DAC_MspInit+0x188>)
 80015d6:	4293      	cmp	r3, r2
 80015d8:	d14f      	bne.n	800167a <HAL_DAC_MspInit+0x16e>
    __HAL_RCC_DAC2_CLK_ENABLE();
 80015da:	4b2b      	ldr	r3, [pc, #172]	; (8001688 <HAL_DAC_MspInit+0x17c>)
 80015dc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80015de:	4a2a      	ldr	r2, [pc, #168]	; (8001688 <HAL_DAC_MspInit+0x17c>)
 80015e0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80015e4:	64d3      	str	r3, [r2, #76]	; 0x4c
 80015e6:	4b28      	ldr	r3, [pc, #160]	; (8001688 <HAL_DAC_MspInit+0x17c>)
 80015e8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80015ea:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80015ee:	613b      	str	r3, [r7, #16]
 80015f0:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80015f2:	4b25      	ldr	r3, [pc, #148]	; (8001688 <HAL_DAC_MspInit+0x17c>)
 80015f4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80015f6:	4a24      	ldr	r2, [pc, #144]	; (8001688 <HAL_DAC_MspInit+0x17c>)
 80015f8:	f043 0301 	orr.w	r3, r3, #1
 80015fc:	64d3      	str	r3, [r2, #76]	; 0x4c
 80015fe:	4b22      	ldr	r3, [pc, #136]	; (8001688 <HAL_DAC_MspInit+0x17c>)
 8001600:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001602:	f003 0301 	and.w	r3, r3, #1
 8001606:	60fb      	str	r3, [r7, #12]
 8001608:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 800160a:	2340      	movs	r3, #64	; 0x40
 800160c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800160e:	2303      	movs	r3, #3
 8001610:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001612:	2300      	movs	r3, #0
 8001614:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001616:	f107 031c 	add.w	r3, r7, #28
 800161a:	4619      	mov	r1, r3
 800161c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001620:	f003 ff2e 	bl	8005480 <HAL_GPIO_Init>
    hdma_dac2_ch1.Instance = DMA1_Channel3;
 8001624:	4b1c      	ldr	r3, [pc, #112]	; (8001698 <HAL_DAC_MspInit+0x18c>)
 8001626:	4a1d      	ldr	r2, [pc, #116]	; (800169c <HAL_DAC_MspInit+0x190>)
 8001628:	601a      	str	r2, [r3, #0]
    hdma_dac2_ch1.Init.Request = DMA_REQUEST_DAC2_CHANNEL1;
 800162a:	4b1b      	ldr	r3, [pc, #108]	; (8001698 <HAL_DAC_MspInit+0x18c>)
 800162c:	2229      	movs	r2, #41	; 0x29
 800162e:	605a      	str	r2, [r3, #4]
    hdma_dac2_ch1.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8001630:	4b19      	ldr	r3, [pc, #100]	; (8001698 <HAL_DAC_MspInit+0x18c>)
 8001632:	2210      	movs	r2, #16
 8001634:	609a      	str	r2, [r3, #8]
    hdma_dac2_ch1.Init.PeriphInc = DMA_PINC_DISABLE;
 8001636:	4b18      	ldr	r3, [pc, #96]	; (8001698 <HAL_DAC_MspInit+0x18c>)
 8001638:	2200      	movs	r2, #0
 800163a:	60da      	str	r2, [r3, #12]
    hdma_dac2_ch1.Init.MemInc = DMA_MINC_ENABLE;
 800163c:	4b16      	ldr	r3, [pc, #88]	; (8001698 <HAL_DAC_MspInit+0x18c>)
 800163e:	2280      	movs	r2, #128	; 0x80
 8001640:	611a      	str	r2, [r3, #16]
    hdma_dac2_ch1.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8001642:	4b15      	ldr	r3, [pc, #84]	; (8001698 <HAL_DAC_MspInit+0x18c>)
 8001644:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001648:	615a      	str	r2, [r3, #20]
    hdma_dac2_ch1.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 800164a:	4b13      	ldr	r3, [pc, #76]	; (8001698 <HAL_DAC_MspInit+0x18c>)
 800164c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8001650:	619a      	str	r2, [r3, #24]
    hdma_dac2_ch1.Init.Mode = DMA_CIRCULAR;
 8001652:	4b11      	ldr	r3, [pc, #68]	; (8001698 <HAL_DAC_MspInit+0x18c>)
 8001654:	2220      	movs	r2, #32
 8001656:	61da      	str	r2, [r3, #28]
    hdma_dac2_ch1.Init.Priority = DMA_PRIORITY_LOW;
 8001658:	4b0f      	ldr	r3, [pc, #60]	; (8001698 <HAL_DAC_MspInit+0x18c>)
 800165a:	2200      	movs	r2, #0
 800165c:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_dac2_ch1) != HAL_OK)
 800165e:	480e      	ldr	r0, [pc, #56]	; (8001698 <HAL_DAC_MspInit+0x18c>)
 8001660:	f003 fc42 	bl	8004ee8 <HAL_DMA_Init>
 8001664:	4603      	mov	r3, r0
 8001666:	2b00      	cmp	r3, #0
 8001668:	d001      	beq.n	800166e <HAL_DAC_MspInit+0x162>
      Error_Handler();
 800166a:	f000 fd13 	bl	8002094 <Error_Handler>
    __HAL_LINKDMA(dacHandle,DMA_Handle1,hdma_dac2_ch1);
 800166e:	687b      	ldr	r3, [r7, #4]
 8001670:	4a09      	ldr	r2, [pc, #36]	; (8001698 <HAL_DAC_MspInit+0x18c>)
 8001672:	609a      	str	r2, [r3, #8]
 8001674:	4a08      	ldr	r2, [pc, #32]	; (8001698 <HAL_DAC_MspInit+0x18c>)
 8001676:	687b      	ldr	r3, [r7, #4]
 8001678:	6293      	str	r3, [r2, #40]	; 0x28
}
 800167a:	bf00      	nop
 800167c:	3730      	adds	r7, #48	; 0x30
 800167e:	46bd      	mov	sp, r7
 8001680:	bd80      	pop	{r7, pc}
 8001682:	bf00      	nop
 8001684:	50000800 	.word	0x50000800
 8001688:	40021000 	.word	0x40021000
 800168c:	20000d2c 	.word	0x20000d2c
 8001690:	4002001c 	.word	0x4002001c
 8001694:	50000c00 	.word	0x50000c00
 8001698:	20000d8c 	.word	0x20000d8c
 800169c:	40020030 	.word	0x40020030

080016a0 <MX_DMA_Init>:

/** 
  * Enable DMA controller clock
  */
void MX_DMA_Init(void) 
{
 80016a0:	b580      	push	{r7, lr}
 80016a2:	b082      	sub	sp, #8
 80016a4:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMAMUX1_CLK_ENABLE();
 80016a6:	4b1a      	ldr	r3, [pc, #104]	; (8001710 <MX_DMA_Init+0x70>)
 80016a8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80016aa:	4a19      	ldr	r2, [pc, #100]	; (8001710 <MX_DMA_Init+0x70>)
 80016ac:	f043 0304 	orr.w	r3, r3, #4
 80016b0:	6493      	str	r3, [r2, #72]	; 0x48
 80016b2:	4b17      	ldr	r3, [pc, #92]	; (8001710 <MX_DMA_Init+0x70>)
 80016b4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80016b6:	f003 0304 	and.w	r3, r3, #4
 80016ba:	607b      	str	r3, [r7, #4]
 80016bc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA1_CLK_ENABLE();
 80016be:	4b14      	ldr	r3, [pc, #80]	; (8001710 <MX_DMA_Init+0x70>)
 80016c0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80016c2:	4a13      	ldr	r2, [pc, #76]	; (8001710 <MX_DMA_Init+0x70>)
 80016c4:	f043 0301 	orr.w	r3, r3, #1
 80016c8:	6493      	str	r3, [r2, #72]	; 0x48
 80016ca:	4b11      	ldr	r3, [pc, #68]	; (8001710 <MX_DMA_Init+0x70>)
 80016cc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80016ce:	f003 0301 	and.w	r3, r3, #1
 80016d2:	603b      	str	r3, [r7, #0]
 80016d4:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 1, 0);
 80016d6:	2200      	movs	r2, #0
 80016d8:	2101      	movs	r1, #1
 80016da:	200b      	movs	r0, #11
 80016dc:	f002 ffbb 	bl	8004656 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 80016e0:	200b      	movs	r0, #11
 80016e2:	f002 ffd2 	bl	800468a <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel2_IRQn, 0, 0);
 80016e6:	2200      	movs	r2, #0
 80016e8:	2100      	movs	r1, #0
 80016ea:	200c      	movs	r0, #12
 80016ec:	f002 ffb3 	bl	8004656 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel2_IRQn);
 80016f0:	200c      	movs	r0, #12
 80016f2:	f002 ffca 	bl	800468a <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel3_IRQn, 0, 0);
 80016f6:	2200      	movs	r2, #0
 80016f8:	2100      	movs	r1, #0
 80016fa:	200d      	movs	r0, #13
 80016fc:	f002 ffab 	bl	8004656 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel3_IRQn);
 8001700:	200d      	movs	r0, #13
 8001702:	f002 ffc2 	bl	800468a <HAL_NVIC_EnableIRQ>

}
 8001706:	bf00      	nop
 8001708:	3708      	adds	r7, #8
 800170a:	46bd      	mov	sp, r7
 800170c:	bd80      	pop	{r7, pc}
 800170e:	bf00      	nop
 8001710:	40021000 	.word	0x40021000

08001714 <update_dc_bias_sweep>:
uint16_t dcbias = 0;
int dcbias_dir = 1;
int dcinverted = 0;

void update_dc_bias_sweep()
{
 8001714:	b580      	push	{r7, lr}
 8001716:	af00      	add	r7, sp, #0
	  // up=1, down=0
	  (dcbias_dir) ? (dcbias++) : (dcbias--);
 8001718:	4b20      	ldr	r3, [pc, #128]	; (800179c <update_dc_bias_sweep+0x88>)
 800171a:	681b      	ldr	r3, [r3, #0]
 800171c:	2b00      	cmp	r3, #0
 800171e:	d006      	beq.n	800172e <update_dc_bias_sweep+0x1a>
 8001720:	4b1f      	ldr	r3, [pc, #124]	; (80017a0 <update_dc_bias_sweep+0x8c>)
 8001722:	881b      	ldrh	r3, [r3, #0]
 8001724:	3301      	adds	r3, #1
 8001726:	b29a      	uxth	r2, r3
 8001728:	4b1d      	ldr	r3, [pc, #116]	; (80017a0 <update_dc_bias_sweep+0x8c>)
 800172a:	801a      	strh	r2, [r3, #0]
 800172c:	e005      	b.n	800173a <update_dc_bias_sweep+0x26>
 800172e:	4b1c      	ldr	r3, [pc, #112]	; (80017a0 <update_dc_bias_sweep+0x8c>)
 8001730:	881b      	ldrh	r3, [r3, #0]
 8001732:	3b01      	subs	r3, #1
 8001734:	b29a      	uxth	r2, r3
 8001736:	4b1a      	ldr	r3, [pc, #104]	; (80017a0 <update_dc_bias_sweep+0x8c>)
 8001738:	801a      	strh	r2, [r3, #0]

	  // invert the bias signal at zero crossing
	  if(dcbias < 1) {
 800173a:	4b19      	ldr	r3, [pc, #100]	; (80017a0 <update_dc_bias_sweep+0x8c>)
 800173c:	881b      	ldrh	r3, [r3, #0]
 800173e:	2b00      	cmp	r3, #0
 8001740:	d10a      	bne.n	8001758 <update_dc_bias_sweep+0x44>
		(dcinverted) ? (dcinverted=0) : (dcinverted=1);
 8001742:	4b18      	ldr	r3, [pc, #96]	; (80017a4 <update_dc_bias_sweep+0x90>)
 8001744:	681b      	ldr	r3, [r3, #0]
 8001746:	2b00      	cmp	r3, #0
 8001748:	d003      	beq.n	8001752 <update_dc_bias_sweep+0x3e>
 800174a:	4b16      	ldr	r3, [pc, #88]	; (80017a4 <update_dc_bias_sweep+0x90>)
 800174c:	2200      	movs	r2, #0
 800174e:	601a      	str	r2, [r3, #0]
 8001750:	e002      	b.n	8001758 <update_dc_bias_sweep+0x44>
 8001752:	4b14      	ldr	r3, [pc, #80]	; (80017a4 <update_dc_bias_sweep+0x90>)
 8001754:	2201      	movs	r2, #1
 8001756:	601a      	str	r2, [r3, #0]
	  }

	  // change direction if dac limits are reached
	  if(dcbias < 1) 	{ dcbias_dir = 1; }
 8001758:	4b11      	ldr	r3, [pc, #68]	; (80017a0 <update_dc_bias_sweep+0x8c>)
 800175a:	881b      	ldrh	r3, [r3, #0]
 800175c:	2b00      	cmp	r3, #0
 800175e:	d102      	bne.n	8001766 <update_dc_bias_sweep+0x52>
 8001760:	4b0e      	ldr	r3, [pc, #56]	; (800179c <update_dc_bias_sweep+0x88>)
 8001762:	2201      	movs	r2, #1
 8001764:	601a      	str	r2, [r3, #0]
	  if(dcbias > 4095) { dcbias_dir = 0; }
 8001766:	4b0e      	ldr	r3, [pc, #56]	; (80017a0 <update_dc_bias_sweep+0x8c>)
 8001768:	881b      	ldrh	r3, [r3, #0]
 800176a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800176e:	d302      	bcc.n	8001776 <update_dc_bias_sweep+0x62>
 8001770:	4b0a      	ldr	r3, [pc, #40]	; (800179c <update_dc_bias_sweep+0x88>)
 8001772:	2200      	movs	r2, #0
 8001774:	601a      	str	r2, [r3, #0]


	  HAL_GPIO_WritePin(DCBIAS_INVERT_GPIO_Port, DCBIAS_INVERT_Pin, dcinverted);
 8001776:	4b0b      	ldr	r3, [pc, #44]	; (80017a4 <update_dc_bias_sweep+0x90>)
 8001778:	681b      	ldr	r3, [r3, #0]
 800177a:	b2db      	uxtb	r3, r3
 800177c:	461a      	mov	r2, r3
 800177e:	2108      	movs	r1, #8
 8001780:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001784:	f004 f816 	bl	80057b4 <HAL_GPIO_WritePin>
	  HAL_DAC_SetValue(&hdac1, DAC1_CHANNEL_2, DAC_ALIGN_12B_R, dcbias);
 8001788:	4b05      	ldr	r3, [pc, #20]	; (80017a0 <update_dc_bias_sweep+0x8c>)
 800178a:	881b      	ldrh	r3, [r3, #0]
 800178c:	2200      	movs	r2, #0
 800178e:	2110      	movs	r1, #16
 8001790:	4805      	ldr	r0, [pc, #20]	; (80017a8 <update_dc_bias_sweep+0x94>)
 8001792:	f003 f921 	bl	80049d8 <HAL_DAC_SetValue>
}
 8001796:	bf00      	nop
 8001798:	bd80      	pop	{r7, pc}
 800179a:	bf00      	nop
 800179c:	2000000c 	.word	0x2000000c
 80017a0:	20000bf2 	.word	0x20000bf2
 80017a4:	20000bf4 	.word	0x20000bf4
 80017a8:	20000d18 	.word	0x20000d18

080017ac <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80017ac:	b480      	push	{r7}
 80017ae:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80017b0:	4b04      	ldr	r3, [pc, #16]	; (80017c4 <__NVIC_GetPriorityGrouping+0x18>)
 80017b2:	68db      	ldr	r3, [r3, #12]
 80017b4:	0a1b      	lsrs	r3, r3, #8
 80017b6:	f003 0307 	and.w	r3, r3, #7
}
 80017ba:	4618      	mov	r0, r3
 80017bc:	46bd      	mov	sp, r7
 80017be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017c2:	4770      	bx	lr
 80017c4:	e000ed00 	.word	0xe000ed00

080017c8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80017c8:	b480      	push	{r7}
 80017ca:	b083      	sub	sp, #12
 80017cc:	af00      	add	r7, sp, #0
 80017ce:	4603      	mov	r3, r0
 80017d0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80017d2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80017d6:	2b00      	cmp	r3, #0
 80017d8:	db0b      	blt.n	80017f2 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80017da:	79fb      	ldrb	r3, [r7, #7]
 80017dc:	f003 021f 	and.w	r2, r3, #31
 80017e0:	4907      	ldr	r1, [pc, #28]	; (8001800 <__NVIC_EnableIRQ+0x38>)
 80017e2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80017e6:	095b      	lsrs	r3, r3, #5
 80017e8:	2001      	movs	r0, #1
 80017ea:	fa00 f202 	lsl.w	r2, r0, r2
 80017ee:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80017f2:	bf00      	nop
 80017f4:	370c      	adds	r7, #12
 80017f6:	46bd      	mov	sp, r7
 80017f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017fc:	4770      	bx	lr
 80017fe:	bf00      	nop
 8001800:	e000e100 	.word	0xe000e100

08001804 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001804:	b480      	push	{r7}
 8001806:	b083      	sub	sp, #12
 8001808:	af00      	add	r7, sp, #0
 800180a:	4603      	mov	r3, r0
 800180c:	6039      	str	r1, [r7, #0]
 800180e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001810:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001814:	2b00      	cmp	r3, #0
 8001816:	db0a      	blt.n	800182e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001818:	683b      	ldr	r3, [r7, #0]
 800181a:	b2da      	uxtb	r2, r3
 800181c:	490c      	ldr	r1, [pc, #48]	; (8001850 <__NVIC_SetPriority+0x4c>)
 800181e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001822:	0112      	lsls	r2, r2, #4
 8001824:	b2d2      	uxtb	r2, r2
 8001826:	440b      	add	r3, r1
 8001828:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800182c:	e00a      	b.n	8001844 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800182e:	683b      	ldr	r3, [r7, #0]
 8001830:	b2da      	uxtb	r2, r3
 8001832:	4908      	ldr	r1, [pc, #32]	; (8001854 <__NVIC_SetPriority+0x50>)
 8001834:	79fb      	ldrb	r3, [r7, #7]
 8001836:	f003 030f 	and.w	r3, r3, #15
 800183a:	3b04      	subs	r3, #4
 800183c:	0112      	lsls	r2, r2, #4
 800183e:	b2d2      	uxtb	r2, r2
 8001840:	440b      	add	r3, r1
 8001842:	761a      	strb	r2, [r3, #24]
}
 8001844:	bf00      	nop
 8001846:	370c      	adds	r7, #12
 8001848:	46bd      	mov	sp, r7
 800184a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800184e:	4770      	bx	lr
 8001850:	e000e100 	.word	0xe000e100
 8001854:	e000ed00 	.word	0xe000ed00

08001858 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001858:	b480      	push	{r7}
 800185a:	b089      	sub	sp, #36	; 0x24
 800185c:	af00      	add	r7, sp, #0
 800185e:	60f8      	str	r0, [r7, #12]
 8001860:	60b9      	str	r1, [r7, #8]
 8001862:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001864:	68fb      	ldr	r3, [r7, #12]
 8001866:	f003 0307 	and.w	r3, r3, #7
 800186a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800186c:	69fb      	ldr	r3, [r7, #28]
 800186e:	f1c3 0307 	rsb	r3, r3, #7
 8001872:	2b04      	cmp	r3, #4
 8001874:	bf28      	it	cs
 8001876:	2304      	movcs	r3, #4
 8001878:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800187a:	69fb      	ldr	r3, [r7, #28]
 800187c:	3304      	adds	r3, #4
 800187e:	2b06      	cmp	r3, #6
 8001880:	d902      	bls.n	8001888 <NVIC_EncodePriority+0x30>
 8001882:	69fb      	ldr	r3, [r7, #28]
 8001884:	3b03      	subs	r3, #3
 8001886:	e000      	b.n	800188a <NVIC_EncodePriority+0x32>
 8001888:	2300      	movs	r3, #0
 800188a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800188c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8001890:	69bb      	ldr	r3, [r7, #24]
 8001892:	fa02 f303 	lsl.w	r3, r2, r3
 8001896:	43da      	mvns	r2, r3
 8001898:	68bb      	ldr	r3, [r7, #8]
 800189a:	401a      	ands	r2, r3
 800189c:	697b      	ldr	r3, [r7, #20]
 800189e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80018a0:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 80018a4:	697b      	ldr	r3, [r7, #20]
 80018a6:	fa01 f303 	lsl.w	r3, r1, r3
 80018aa:	43d9      	mvns	r1, r3
 80018ac:	687b      	ldr	r3, [r7, #4]
 80018ae:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80018b0:	4313      	orrs	r3, r2
         );
}
 80018b2:	4618      	mov	r0, r3
 80018b4:	3724      	adds	r7, #36	; 0x24
 80018b6:	46bd      	mov	sp, r7
 80018b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018bc:	4770      	bx	lr
	...

080018c0 <LL_SYSCFG_SetEXTISource>:
  *         @arg @ref LL_SYSCFG_EXTI_LINE14
  *         @arg @ref LL_SYSCFG_EXTI_LINE15
  * @retval None
  */
__STATIC_INLINE void LL_SYSCFG_SetEXTISource(uint32_t Port, uint32_t Line)
{
 80018c0:	b480      	push	{r7}
 80018c2:	b085      	sub	sp, #20
 80018c4:	af00      	add	r7, sp, #0
 80018c6:	6078      	str	r0, [r7, #4]
 80018c8:	6039      	str	r1, [r7, #0]
  MODIFY_REG(SYSCFG->EXTICR[Line & 0x3U], (Line >> 16U), Port << (POSITION_VAL((Line >> 16U)) & 0x1FU) );
 80018ca:	4a14      	ldr	r2, [pc, #80]	; (800191c <LL_SYSCFG_SetEXTISource+0x5c>)
 80018cc:	683b      	ldr	r3, [r7, #0]
 80018ce:	f003 0303 	and.w	r3, r3, #3
 80018d2:	3302      	adds	r3, #2
 80018d4:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 80018d8:	683b      	ldr	r3, [r7, #0]
 80018da:	0c1b      	lsrs	r3, r3, #16
 80018dc:	43db      	mvns	r3, r3
 80018de:	ea02 0103 	and.w	r1, r2, r3
 80018e2:	683b      	ldr	r3, [r7, #0]
 80018e4:	0c1b      	lsrs	r3, r3, #16
 80018e6:	60fb      	str	r3, [r7, #12]
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80018e8:	68fb      	ldr	r3, [r7, #12]
 80018ea:	fa93 f3a3 	rbit	r3, r3
 80018ee:	60bb      	str	r3, [r7, #8]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 80018f0:	68bb      	ldr	r3, [r7, #8]
 80018f2:	fab3 f383 	clz	r3, r3
 80018f6:	b2db      	uxtb	r3, r3
 80018f8:	f003 031f 	and.w	r3, r3, #31
 80018fc:	687a      	ldr	r2, [r7, #4]
 80018fe:	409a      	lsls	r2, r3
 8001900:	4806      	ldr	r0, [pc, #24]	; (800191c <LL_SYSCFG_SetEXTISource+0x5c>)
 8001902:	683b      	ldr	r3, [r7, #0]
 8001904:	f003 0303 	and.w	r3, r3, #3
 8001908:	430a      	orrs	r2, r1
 800190a:	3302      	adds	r3, #2
 800190c:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
}
 8001910:	bf00      	nop
 8001912:	3714      	adds	r7, #20
 8001914:	46bd      	mov	sp, r7
 8001916:	f85d 7b04 	ldr.w	r7, [sp], #4
 800191a:	4770      	bx	lr
 800191c:	40010000 	.word	0x40010000

08001920 <LL_GPIO_SetPinMode>:
  *         @arg @ref LL_GPIO_MODE_ALTERNATE
  *         @arg @ref LL_GPIO_MODE_ANALOG
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetPinMode(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t Mode)
{
 8001920:	b480      	push	{r7}
 8001922:	b089      	sub	sp, #36	; 0x24
 8001924:	af00      	add	r7, sp, #0
 8001926:	60f8      	str	r0, [r7, #12]
 8001928:	60b9      	str	r1, [r7, #8]
 800192a:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->MODER, (GPIO_MODER_MODE0 << (POSITION_VAL(Pin) * 2U)), (Mode << (POSITION_VAL(Pin) * 2U)));
 800192c:	68fb      	ldr	r3, [r7, #12]
 800192e:	681a      	ldr	r2, [r3, #0]
 8001930:	68bb      	ldr	r3, [r7, #8]
 8001932:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001934:	697b      	ldr	r3, [r7, #20]
 8001936:	fa93 f3a3 	rbit	r3, r3
 800193a:	613b      	str	r3, [r7, #16]
  return result;
 800193c:	693b      	ldr	r3, [r7, #16]
 800193e:	fab3 f383 	clz	r3, r3
 8001942:	b2db      	uxtb	r3, r3
 8001944:	005b      	lsls	r3, r3, #1
 8001946:	2103      	movs	r1, #3
 8001948:	fa01 f303 	lsl.w	r3, r1, r3
 800194c:	43db      	mvns	r3, r3
 800194e:	401a      	ands	r2, r3
 8001950:	68bb      	ldr	r3, [r7, #8]
 8001952:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001954:	69fb      	ldr	r3, [r7, #28]
 8001956:	fa93 f3a3 	rbit	r3, r3
 800195a:	61bb      	str	r3, [r7, #24]
  return result;
 800195c:	69bb      	ldr	r3, [r7, #24]
 800195e:	fab3 f383 	clz	r3, r3
 8001962:	b2db      	uxtb	r3, r3
 8001964:	005b      	lsls	r3, r3, #1
 8001966:	6879      	ldr	r1, [r7, #4]
 8001968:	fa01 f303 	lsl.w	r3, r1, r3
 800196c:	431a      	orrs	r2, r3
 800196e:	68fb      	ldr	r3, [r7, #12]
 8001970:	601a      	str	r2, [r3, #0]
}
 8001972:	bf00      	nop
 8001974:	3724      	adds	r7, #36	; 0x24
 8001976:	46bd      	mov	sp, r7
 8001978:	f85d 7b04 	ldr.w	r7, [sp], #4
 800197c:	4770      	bx	lr

0800197e <LL_GPIO_SetPinPull>:
  *         @arg @ref LL_GPIO_PULL_UP
  *         @arg @ref LL_GPIO_PULL_DOWN
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetPinPull(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t Pull)
{
 800197e:	b480      	push	{r7}
 8001980:	b089      	sub	sp, #36	; 0x24
 8001982:	af00      	add	r7, sp, #0
 8001984:	60f8      	str	r0, [r7, #12]
 8001986:	60b9      	str	r1, [r7, #8]
 8001988:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->PUPDR, (GPIO_PUPDR_PUPD0 << (POSITION_VAL(Pin) * 2U)), (Pull << (POSITION_VAL(Pin) * 2U)));
 800198a:	68fb      	ldr	r3, [r7, #12]
 800198c:	68da      	ldr	r2, [r3, #12]
 800198e:	68bb      	ldr	r3, [r7, #8]
 8001990:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001992:	697b      	ldr	r3, [r7, #20]
 8001994:	fa93 f3a3 	rbit	r3, r3
 8001998:	613b      	str	r3, [r7, #16]
  return result;
 800199a:	693b      	ldr	r3, [r7, #16]
 800199c:	fab3 f383 	clz	r3, r3
 80019a0:	b2db      	uxtb	r3, r3
 80019a2:	005b      	lsls	r3, r3, #1
 80019a4:	2103      	movs	r1, #3
 80019a6:	fa01 f303 	lsl.w	r3, r1, r3
 80019aa:	43db      	mvns	r3, r3
 80019ac:	401a      	ands	r2, r3
 80019ae:	68bb      	ldr	r3, [r7, #8]
 80019b0:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80019b2:	69fb      	ldr	r3, [r7, #28]
 80019b4:	fa93 f3a3 	rbit	r3, r3
 80019b8:	61bb      	str	r3, [r7, #24]
  return result;
 80019ba:	69bb      	ldr	r3, [r7, #24]
 80019bc:	fab3 f383 	clz	r3, r3
 80019c0:	b2db      	uxtb	r3, r3
 80019c2:	005b      	lsls	r3, r3, #1
 80019c4:	6879      	ldr	r1, [r7, #4]
 80019c6:	fa01 f303 	lsl.w	r3, r1, r3
 80019ca:	431a      	orrs	r2, r3
 80019cc:	68fb      	ldr	r3, [r7, #12]
 80019ce:	60da      	str	r2, [r3, #12]
}
 80019d0:	bf00      	nop
 80019d2:	3724      	adds	r7, #36	; 0x24
 80019d4:	46bd      	mov	sp, r7
 80019d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019da:	4770      	bx	lr

080019dc <LL_GPIO_ResetOutputPin>:
  *         @arg @ref LL_GPIO_PIN_15
  *         @arg @ref LL_GPIO_PIN_ALL
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_ResetOutputPin(GPIO_TypeDef *GPIOx, uint32_t PinMask)
{
 80019dc:	b480      	push	{r7}
 80019de:	b083      	sub	sp, #12
 80019e0:	af00      	add	r7, sp, #0
 80019e2:	6078      	str	r0, [r7, #4]
 80019e4:	6039      	str	r1, [r7, #0]
  WRITE_REG(GPIOx->BRR, PinMask);
 80019e6:	687b      	ldr	r3, [r7, #4]
 80019e8:	683a      	ldr	r2, [r7, #0]
 80019ea:	629a      	str	r2, [r3, #40]	; 0x28
}
 80019ec:	bf00      	nop
 80019ee:	370c      	adds	r7, #12
 80019f0:	46bd      	mov	sp, r7
 80019f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019f6:	4770      	bx	lr

080019f8 <LL_AHB2_GRP1_EnableClock>:
  *
  *         (*) value not defined in all devices.
  * @retval None
  */
__STATIC_INLINE void LL_AHB2_GRP1_EnableClock(uint32_t Periphs)
{
 80019f8:	b480      	push	{r7}
 80019fa:	b085      	sub	sp, #20
 80019fc:	af00      	add	r7, sp, #0
 80019fe:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->AHB2ENR, Periphs);
 8001a00:	4b08      	ldr	r3, [pc, #32]	; (8001a24 <LL_AHB2_GRP1_EnableClock+0x2c>)
 8001a02:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8001a04:	4907      	ldr	r1, [pc, #28]	; (8001a24 <LL_AHB2_GRP1_EnableClock+0x2c>)
 8001a06:	687b      	ldr	r3, [r7, #4]
 8001a08:	4313      	orrs	r3, r2
 8001a0a:	64cb      	str	r3, [r1, #76]	; 0x4c
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 8001a0c:	4b05      	ldr	r3, [pc, #20]	; (8001a24 <LL_AHB2_GRP1_EnableClock+0x2c>)
 8001a0e:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8001a10:	687b      	ldr	r3, [r7, #4]
 8001a12:	4013      	ands	r3, r2
 8001a14:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8001a16:	68fb      	ldr	r3, [r7, #12]
}
 8001a18:	bf00      	nop
 8001a1a:	3714      	adds	r7, #20
 8001a1c:	46bd      	mov	sp, r7
 8001a1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a22:	4770      	bx	lr
 8001a24:	40021000 	.word	0x40021000

08001a28 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8001a28:	b580      	push	{r7, lr}
 8001a2a:	b08a      	sub	sp, #40	; 0x28
 8001a2c:	af00      	add	r7, sp, #0

  LL_EXTI_InitTypeDef EXTI_InitStruct = {0};
 8001a2e:	f107 031c 	add.w	r3, r7, #28
 8001a32:	2200      	movs	r2, #0
 8001a34:	601a      	str	r2, [r3, #0]
 8001a36:	605a      	str	r2, [r3, #4]
 8001a38:	609a      	str	r2, [r3, #8]
  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001a3a:	1d3b      	adds	r3, r7, #4
 8001a3c:	2200      	movs	r2, #0
 8001a3e:	601a      	str	r2, [r3, #0]
 8001a40:	605a      	str	r2, [r3, #4]
 8001a42:	609a      	str	r2, [r3, #8]
 8001a44:	60da      	str	r2, [r3, #12]
 8001a46:	611a      	str	r2, [r3, #16]
 8001a48:	615a      	str	r2, [r3, #20]

  /* GPIO Ports Clock Enable */
  LL_AHB2_GRP1_EnableClock(LL_AHB2_GRP1_PERIPH_GPIOC);
 8001a4a:	2004      	movs	r0, #4
 8001a4c:	f7ff ffd4 	bl	80019f8 <LL_AHB2_GRP1_EnableClock>
  LL_AHB2_GRP1_EnableClock(LL_AHB2_GRP1_PERIPH_GPIOF);
 8001a50:	2020      	movs	r0, #32
 8001a52:	f7ff ffd1 	bl	80019f8 <LL_AHB2_GRP1_EnableClock>
  LL_AHB2_GRP1_EnableClock(LL_AHB2_GRP1_PERIPH_GPIOA);
 8001a56:	2001      	movs	r0, #1
 8001a58:	f7ff ffce 	bl	80019f8 <LL_AHB2_GRP1_EnableClock>
  LL_AHB2_GRP1_EnableClock(LL_AHB2_GRP1_PERIPH_GPIOB);
 8001a5c:	2002      	movs	r0, #2
 8001a5e:	f7ff ffcb 	bl	80019f8 <LL_AHB2_GRP1_EnableClock>

  /**/
  LL_GPIO_ResetOutputPin(TRIGMODE_GPIO_Port, TRIGMODE_Pin);
 8001a62:	2108      	movs	r1, #8
 8001a64:	48d3      	ldr	r0, [pc, #844]	; (8001db4 <MX_GPIO_Init+0x38c>)
 8001a66:	f7ff ffb9 	bl	80019dc <LL_GPIO_ResetOutputPin>

  /**/
  LL_GPIO_ResetOutputPin(DCBIAS_INVERT_GPIO_Port, DCBIAS_INVERT_Pin);
 8001a6a:	2108      	movs	r1, #8
 8001a6c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001a70:	f7ff ffb4 	bl	80019dc <LL_GPIO_ResetOutputPin>

  /**/
  LL_GPIO_ResetOutputPin(SG2_GPIO_Port, SG2_Pin);
 8001a74:	2110      	movs	r1, #16
 8001a76:	48cf      	ldr	r0, [pc, #828]	; (8001db4 <MX_GPIO_Init+0x38c>)
 8001a78:	f7ff ffb0 	bl	80019dc <LL_GPIO_ResetOutputPin>

  /**/
  LL_GPIO_ResetOutputPin(SG1_GPIO_Port, SG1_Pin);
 8001a7c:	2120      	movs	r1, #32
 8001a7e:	48cd      	ldr	r0, [pc, #820]	; (8001db4 <MX_GPIO_Init+0x38c>)
 8001a80:	f7ff ffac 	bl	80019dc <LL_GPIO_ResetOutputPin>

  /**/
  LL_GPIO_ResetOutputPin(SG0_GPIO_Port, SG0_Pin);
 8001a84:	2101      	movs	r1, #1
 8001a86:	48cc      	ldr	r0, [pc, #816]	; (8001db8 <MX_GPIO_Init+0x390>)
 8001a88:	f7ff ffa8 	bl	80019dc <LL_GPIO_ResetOutputPin>

  /**/
  LL_GPIO_ResetOutputPin(TRIGMUX1_GPIO_Port, TRIGMUX1_Pin);
 8001a8c:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001a90:	48c8      	ldr	r0, [pc, #800]	; (8001db4 <MX_GPIO_Init+0x38c>)
 8001a92:	f7ff ffa3 	bl	80019dc <LL_GPIO_ResetOutputPin>

  /**/
  LL_GPIO_ResetOutputPin(TRIGMUX2_GPIO_Port, TRIGMUX2_Pin);
 8001a96:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001a9a:	48c6      	ldr	r0, [pc, #792]	; (8001db4 <MX_GPIO_Init+0x38c>)
 8001a9c:	f7ff ff9e 	bl	80019dc <LL_GPIO_ResetOutputPin>

  /**/
  LL_GPIO_ResetOutputPin(DC_GPIO_Port, DC_Pin);
 8001aa0:	2140      	movs	r1, #64	; 0x40
 8001aa2:	48c5      	ldr	r0, [pc, #788]	; (8001db8 <MX_GPIO_Init+0x390>)
 8001aa4:	f7ff ff9a 	bl	80019dc <LL_GPIO_ResetOutputPin>

  /**/
  LL_GPIO_ResetOutputPin(CS_GPIO_Port, CS_Pin);
 8001aa8:	2180      	movs	r1, #128	; 0x80
 8001aaa:	48c3      	ldr	r0, [pc, #780]	; (8001db8 <MX_GPIO_Init+0x390>)
 8001aac:	f7ff ff96 	bl	80019dc <LL_GPIO_ResetOutputPin>

  /**/
  LL_GPIO_ResetOutputPin(RST_GPIO_Port, RST_Pin);
 8001ab0:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001ab4:	48c0      	ldr	r0, [pc, #768]	; (8001db8 <MX_GPIO_Init+0x390>)
 8001ab6:	f7ff ff91 	bl	80019dc <LL_GPIO_ResetOutputPin>

  /**/
  LL_SYSCFG_SetEXTISource(LL_SYSCFG_EXTI_PORTC, LL_SYSCFG_EXTI_LINE14);
 8001aba:	49c0      	ldr	r1, [pc, #768]	; (8001dbc <MX_GPIO_Init+0x394>)
 8001abc:	2002      	movs	r0, #2
 8001abe:	f7ff feff 	bl	80018c0 <LL_SYSCFG_SetEXTISource>

  /**/
  LL_SYSCFG_SetEXTISource(LL_SYSCFG_EXTI_PORTC, LL_SYSCFG_EXTI_LINE15);
 8001ac2:	49bf      	ldr	r1, [pc, #764]	; (8001dc0 <MX_GPIO_Init+0x398>)
 8001ac4:	2002      	movs	r0, #2
 8001ac6:	f7ff fefb 	bl	80018c0 <LL_SYSCFG_SetEXTISource>

  /**/
  LL_SYSCFG_SetEXTISource(LL_SYSCFG_EXTI_PORTF, LL_SYSCFG_EXTI_LINE0);
 8001aca:	f44f 2170 	mov.w	r1, #983040	; 0xf0000
 8001ace:	2005      	movs	r0, #5
 8001ad0:	f7ff fef6 	bl	80018c0 <LL_SYSCFG_SetEXTISource>

  /**/
  LL_SYSCFG_SetEXTISource(LL_SYSCFG_EXTI_PORTF, LL_SYSCFG_EXTI_LINE1);
 8001ad4:	f44f 0170 	mov.w	r1, #15728640	; 0xf00000
 8001ad8:	2005      	movs	r0, #5
 8001ada:	f7ff fef1 	bl	80018c0 <LL_SYSCFG_SetEXTISource>

  /**/
  LL_SYSCFG_SetEXTISource(LL_SYSCFG_EXTI_PORTC, LL_SYSCFG_EXTI_LINE2);
 8001ade:	f04f 6170 	mov.w	r1, #251658240	; 0xf000000
 8001ae2:	2002      	movs	r0, #2
 8001ae4:	f7ff feec 	bl	80018c0 <LL_SYSCFG_SetEXTISource>

  /**/
  EXTI_InitStruct.Line_0_31 = LL_EXTI_LINE_14;
 8001ae8:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8001aec:	61fb      	str	r3, [r7, #28]
  EXTI_InitStruct.LineCommand = ENABLE;
 8001aee:	2301      	movs	r3, #1
 8001af0:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
  EXTI_InitStruct.Mode = LL_EXTI_MODE_IT;
 8001af4:	2300      	movs	r3, #0
 8001af6:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
  EXTI_InitStruct.Trigger = LL_EXTI_TRIGGER_FALLING;
 8001afa:	2302      	movs	r3, #2
 8001afc:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
  LL_EXTI_Init(&EXTI_InitStruct);
 8001b00:	f107 031c 	add.w	r3, r7, #28
 8001b04:	4618      	mov	r0, r3
 8001b06:	f006 faab 	bl	8008060 <LL_EXTI_Init>

  /**/
  EXTI_InitStruct.Line_0_31 = LL_EXTI_LINE_15;
 8001b0a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8001b0e:	61fb      	str	r3, [r7, #28]
  EXTI_InitStruct.LineCommand = ENABLE;
 8001b10:	2301      	movs	r3, #1
 8001b12:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
  EXTI_InitStruct.Mode = LL_EXTI_MODE_IT;
 8001b16:	2300      	movs	r3, #0
 8001b18:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
  EXTI_InitStruct.Trigger = LL_EXTI_TRIGGER_FALLING;
 8001b1c:	2302      	movs	r3, #2
 8001b1e:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
  LL_EXTI_Init(&EXTI_InitStruct);
 8001b22:	f107 031c 	add.w	r3, r7, #28
 8001b26:	4618      	mov	r0, r3
 8001b28:	f006 fa9a 	bl	8008060 <LL_EXTI_Init>

  /**/
  EXTI_InitStruct.Line_0_31 = LL_EXTI_LINE_0;
 8001b2c:	2301      	movs	r3, #1
 8001b2e:	61fb      	str	r3, [r7, #28]
  EXTI_InitStruct.LineCommand = ENABLE;
 8001b30:	2301      	movs	r3, #1
 8001b32:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
  EXTI_InitStruct.Mode = LL_EXTI_MODE_IT;
 8001b36:	2300      	movs	r3, #0
 8001b38:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
  EXTI_InitStruct.Trigger = LL_EXTI_TRIGGER_FALLING;
 8001b3c:	2302      	movs	r3, #2
 8001b3e:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
  LL_EXTI_Init(&EXTI_InitStruct);
 8001b42:	f107 031c 	add.w	r3, r7, #28
 8001b46:	4618      	mov	r0, r3
 8001b48:	f006 fa8a 	bl	8008060 <LL_EXTI_Init>

  /**/
  EXTI_InitStruct.Line_0_31 = LL_EXTI_LINE_1;
 8001b4c:	2302      	movs	r3, #2
 8001b4e:	61fb      	str	r3, [r7, #28]
  EXTI_InitStruct.LineCommand = ENABLE;
 8001b50:	2301      	movs	r3, #1
 8001b52:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
  EXTI_InitStruct.Mode = LL_EXTI_MODE_IT;
 8001b56:	2300      	movs	r3, #0
 8001b58:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
  EXTI_InitStruct.Trigger = LL_EXTI_TRIGGER_FALLING;
 8001b5c:	2302      	movs	r3, #2
 8001b5e:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
  LL_EXTI_Init(&EXTI_InitStruct);
 8001b62:	f107 031c 	add.w	r3, r7, #28
 8001b66:	4618      	mov	r0, r3
 8001b68:	f006 fa7a 	bl	8008060 <LL_EXTI_Init>

  /**/
  EXTI_InitStruct.Line_0_31 = LL_EXTI_LINE_2;
 8001b6c:	2304      	movs	r3, #4
 8001b6e:	61fb      	str	r3, [r7, #28]
  EXTI_InitStruct.LineCommand = ENABLE;
 8001b70:	2301      	movs	r3, #1
 8001b72:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
  EXTI_InitStruct.Mode = LL_EXTI_MODE_IT;
 8001b76:	2300      	movs	r3, #0
 8001b78:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
  EXTI_InitStruct.Trigger = LL_EXTI_TRIGGER_FALLING;
 8001b7c:	2302      	movs	r3, #2
 8001b7e:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
  LL_EXTI_Init(&EXTI_InitStruct);
 8001b82:	f107 031c 	add.w	r3, r7, #28
 8001b86:	4618      	mov	r0, r3
 8001b88:	f006 fa6a 	bl	8008060 <LL_EXTI_Init>

  /**/
  LL_GPIO_SetPinPull(BTN1_EXTI14_GPIO_Port, BTN1_EXTI14_Pin, LL_GPIO_PULL_UP);
 8001b8c:	2201      	movs	r2, #1
 8001b8e:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001b92:	4888      	ldr	r0, [pc, #544]	; (8001db4 <MX_GPIO_Init+0x38c>)
 8001b94:	f7ff fef3 	bl	800197e <LL_GPIO_SetPinPull>

  /**/
  LL_GPIO_SetPinPull(BTN2_EXTI15_GPIO_Port, BTN2_EXTI15_Pin, LL_GPIO_PULL_UP);
 8001b98:	2201      	movs	r2, #1
 8001b9a:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001b9e:	4885      	ldr	r0, [pc, #532]	; (8001db4 <MX_GPIO_Init+0x38c>)
 8001ba0:	f7ff feed 	bl	800197e <LL_GPIO_SetPinPull>

  /**/
  LL_GPIO_SetPinPull(BTN3_EXTI0_GPIO_Port, BTN3_EXTI0_Pin, LL_GPIO_PULL_UP);
 8001ba4:	2201      	movs	r2, #1
 8001ba6:	2101      	movs	r1, #1
 8001ba8:	4886      	ldr	r0, [pc, #536]	; (8001dc4 <MX_GPIO_Init+0x39c>)
 8001baa:	f7ff fee8 	bl	800197e <LL_GPIO_SetPinPull>

  /**/
  LL_GPIO_SetPinPull(BTN4_EXTI1_GPIO_Port, BTN4_EXTI1_Pin, LL_GPIO_PULL_UP);
 8001bae:	2201      	movs	r2, #1
 8001bb0:	2102      	movs	r1, #2
 8001bb2:	4884      	ldr	r0, [pc, #528]	; (8001dc4 <MX_GPIO_Init+0x39c>)
 8001bb4:	f7ff fee3 	bl	800197e <LL_GPIO_SetPinPull>

  /**/
  LL_GPIO_SetPinPull(ENC_EXTI2_GPIO_Port, ENC_EXTI2_Pin, LL_GPIO_PULL_UP);
 8001bb8:	2201      	movs	r2, #1
 8001bba:	2104      	movs	r1, #4
 8001bbc:	487d      	ldr	r0, [pc, #500]	; (8001db4 <MX_GPIO_Init+0x38c>)
 8001bbe:	f7ff fede 	bl	800197e <LL_GPIO_SetPinPull>

  /**/
  LL_GPIO_SetPinMode(BTN1_EXTI14_GPIO_Port, BTN1_EXTI14_Pin, LL_GPIO_MODE_INPUT);
 8001bc2:	2200      	movs	r2, #0
 8001bc4:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001bc8:	487a      	ldr	r0, [pc, #488]	; (8001db4 <MX_GPIO_Init+0x38c>)
 8001bca:	f7ff fea9 	bl	8001920 <LL_GPIO_SetPinMode>

  /**/
  LL_GPIO_SetPinMode(BTN2_EXTI15_GPIO_Port, BTN2_EXTI15_Pin, LL_GPIO_MODE_INPUT);
 8001bce:	2200      	movs	r2, #0
 8001bd0:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001bd4:	4877      	ldr	r0, [pc, #476]	; (8001db4 <MX_GPIO_Init+0x38c>)
 8001bd6:	f7ff fea3 	bl	8001920 <LL_GPIO_SetPinMode>

  /**/
  LL_GPIO_SetPinMode(BTN3_EXTI0_GPIO_Port, BTN3_EXTI0_Pin, LL_GPIO_MODE_INPUT);
 8001bda:	2200      	movs	r2, #0
 8001bdc:	2101      	movs	r1, #1
 8001bde:	4879      	ldr	r0, [pc, #484]	; (8001dc4 <MX_GPIO_Init+0x39c>)
 8001be0:	f7ff fe9e 	bl	8001920 <LL_GPIO_SetPinMode>

  /**/
  LL_GPIO_SetPinMode(BTN4_EXTI1_GPIO_Port, BTN4_EXTI1_Pin, LL_GPIO_MODE_INPUT);
 8001be4:	2200      	movs	r2, #0
 8001be6:	2102      	movs	r1, #2
 8001be8:	4876      	ldr	r0, [pc, #472]	; (8001dc4 <MX_GPIO_Init+0x39c>)
 8001bea:	f7ff fe99 	bl	8001920 <LL_GPIO_SetPinMode>

  /**/
  LL_GPIO_SetPinMode(ENC_EXTI2_GPIO_Port, ENC_EXTI2_Pin, LL_GPIO_MODE_INPUT);
 8001bee:	2200      	movs	r2, #0
 8001bf0:	2104      	movs	r1, #4
 8001bf2:	4870      	ldr	r0, [pc, #448]	; (8001db4 <MX_GPIO_Init+0x38c>)
 8001bf4:	f7ff fe94 	bl	8001920 <LL_GPIO_SetPinMode>

  /**/
  GPIO_InitStruct.Pin = TRIGMODE_Pin;
 8001bf8:	2308      	movs	r3, #8
 8001bfa:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 8001bfc:	2301      	movs	r3, #1
 8001bfe:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 8001c00:	2300      	movs	r3, #0
 8001c02:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8001c04:	2300      	movs	r3, #0
 8001c06:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_DOWN;
 8001c08:	2302      	movs	r3, #2
 8001c0a:	617b      	str	r3, [r7, #20]
  LL_GPIO_Init(TRIGMODE_GPIO_Port, &GPIO_InitStruct);
 8001c0c:	1d3b      	adds	r3, r7, #4
 8001c0e:	4619      	mov	r1, r3
 8001c10:	4868      	ldr	r0, [pc, #416]	; (8001db4 <MX_GPIO_Init+0x38c>)
 8001c12:	f006 fc18 	bl	8008446 <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = DCBIAS_INVERT_Pin;
 8001c16:	2308      	movs	r3, #8
 8001c18:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 8001c1a:	2301      	movs	r3, #1
 8001c1c:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 8001c1e:	2300      	movs	r3, #0
 8001c20:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8001c22:	2300      	movs	r3, #0
 8001c24:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8001c26:	2300      	movs	r3, #0
 8001c28:	617b      	str	r3, [r7, #20]
  LL_GPIO_Init(DCBIAS_INVERT_GPIO_Port, &GPIO_InitStruct);
 8001c2a:	1d3b      	adds	r3, r7, #4
 8001c2c:	4619      	mov	r1, r3
 8001c2e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001c32:	f006 fc08 	bl	8008446 <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = SG2_Pin;
 8001c36:	2310      	movs	r3, #16
 8001c38:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 8001c3a:	2301      	movs	r3, #1
 8001c3c:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 8001c3e:	2300      	movs	r3, #0
 8001c40:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8001c42:	2300      	movs	r3, #0
 8001c44:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8001c46:	2300      	movs	r3, #0
 8001c48:	617b      	str	r3, [r7, #20]
  LL_GPIO_Init(SG2_GPIO_Port, &GPIO_InitStruct);
 8001c4a:	1d3b      	adds	r3, r7, #4
 8001c4c:	4619      	mov	r1, r3
 8001c4e:	4859      	ldr	r0, [pc, #356]	; (8001db4 <MX_GPIO_Init+0x38c>)
 8001c50:	f006 fbf9 	bl	8008446 <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = SG1_Pin;
 8001c54:	2320      	movs	r3, #32
 8001c56:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 8001c58:	2301      	movs	r3, #1
 8001c5a:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 8001c5c:	2300      	movs	r3, #0
 8001c5e:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8001c60:	2300      	movs	r3, #0
 8001c62:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8001c64:	2300      	movs	r3, #0
 8001c66:	617b      	str	r3, [r7, #20]
  LL_GPIO_Init(SG1_GPIO_Port, &GPIO_InitStruct);
 8001c68:	1d3b      	adds	r3, r7, #4
 8001c6a:	4619      	mov	r1, r3
 8001c6c:	4851      	ldr	r0, [pc, #324]	; (8001db4 <MX_GPIO_Init+0x38c>)
 8001c6e:	f006 fbea 	bl	8008446 <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = SG0_Pin;
 8001c72:	2301      	movs	r3, #1
 8001c74:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 8001c76:	2301      	movs	r3, #1
 8001c78:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 8001c7a:	2300      	movs	r3, #0
 8001c7c:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8001c7e:	2300      	movs	r3, #0
 8001c80:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8001c82:	2300      	movs	r3, #0
 8001c84:	617b      	str	r3, [r7, #20]
  LL_GPIO_Init(SG0_GPIO_Port, &GPIO_InitStruct);
 8001c86:	1d3b      	adds	r3, r7, #4
 8001c88:	4619      	mov	r1, r3
 8001c8a:	484b      	ldr	r0, [pc, #300]	; (8001db8 <MX_GPIO_Init+0x390>)
 8001c8c:	f006 fbdb 	bl	8008446 <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = TRIGMUX1_Pin;
 8001c90:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001c94:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 8001c96:	2301      	movs	r3, #1
 8001c98:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 8001c9a:	2300      	movs	r3, #0
 8001c9c:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8001c9e:	2300      	movs	r3, #0
 8001ca0:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8001ca2:	2300      	movs	r3, #0
 8001ca4:	617b      	str	r3, [r7, #20]
  LL_GPIO_Init(TRIGMUX1_GPIO_Port, &GPIO_InitStruct);
 8001ca6:	1d3b      	adds	r3, r7, #4
 8001ca8:	4619      	mov	r1, r3
 8001caa:	4842      	ldr	r0, [pc, #264]	; (8001db4 <MX_GPIO_Init+0x38c>)
 8001cac:	f006 fbcb 	bl	8008446 <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = TRIGMUX2_Pin;
 8001cb0:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001cb4:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 8001cb6:	2301      	movs	r3, #1
 8001cb8:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 8001cba:	2300      	movs	r3, #0
 8001cbc:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8001cbe:	2300      	movs	r3, #0
 8001cc0:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8001cc2:	2300      	movs	r3, #0
 8001cc4:	617b      	str	r3, [r7, #20]
  LL_GPIO_Init(TRIGMUX2_GPIO_Port, &GPIO_InitStruct);
 8001cc6:	1d3b      	adds	r3, r7, #4
 8001cc8:	4619      	mov	r1, r3
 8001cca:	483a      	ldr	r0, [pc, #232]	; (8001db4 <MX_GPIO_Init+0x38c>)
 8001ccc:	f006 fbbb 	bl	8008446 <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = DC_Pin;
 8001cd0:	2340      	movs	r3, #64	; 0x40
 8001cd2:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 8001cd4:	2301      	movs	r3, #1
 8001cd6:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_VERY_HIGH;
 8001cd8:	2303      	movs	r3, #3
 8001cda:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8001cdc:	2300      	movs	r3, #0
 8001cde:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8001ce0:	2300      	movs	r3, #0
 8001ce2:	617b      	str	r3, [r7, #20]
  LL_GPIO_Init(DC_GPIO_Port, &GPIO_InitStruct);
 8001ce4:	1d3b      	adds	r3, r7, #4
 8001ce6:	4619      	mov	r1, r3
 8001ce8:	4833      	ldr	r0, [pc, #204]	; (8001db8 <MX_GPIO_Init+0x390>)
 8001cea:	f006 fbac 	bl	8008446 <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = CS_Pin;
 8001cee:	2380      	movs	r3, #128	; 0x80
 8001cf0:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 8001cf2:	2301      	movs	r3, #1
 8001cf4:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_VERY_HIGH;
 8001cf6:	2303      	movs	r3, #3
 8001cf8:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8001cfa:	2300      	movs	r3, #0
 8001cfc:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8001cfe:	2300      	movs	r3, #0
 8001d00:	617b      	str	r3, [r7, #20]
  LL_GPIO_Init(CS_GPIO_Port, &GPIO_InitStruct);
 8001d02:	1d3b      	adds	r3, r7, #4
 8001d04:	4619      	mov	r1, r3
 8001d06:	482c      	ldr	r0, [pc, #176]	; (8001db8 <MX_GPIO_Init+0x390>)
 8001d08:	f006 fb9d 	bl	8008446 <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = RST_Pin;
 8001d0c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001d10:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 8001d12:	2301      	movs	r3, #1
 8001d14:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_VERY_HIGH;
 8001d16:	2303      	movs	r3, #3
 8001d18:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8001d1a:	2300      	movs	r3, #0
 8001d1c:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8001d1e:	2300      	movs	r3, #0
 8001d20:	617b      	str	r3, [r7, #20]
  LL_GPIO_Init(RST_GPIO_Port, &GPIO_InitStruct);
 8001d22:	1d3b      	adds	r3, r7, #4
 8001d24:	4619      	mov	r1, r3
 8001d26:	4824      	ldr	r0, [pc, #144]	; (8001db8 <MX_GPIO_Init+0x390>)
 8001d28:	f006 fb8d 	bl	8008446 <LL_GPIO_Init>

  /* EXTI interrupt init*/
  NVIC_SetPriority(EXTI0_IRQn, NVIC_EncodePriority(NVIC_GetPriorityGrouping(),0, 0));
 8001d2c:	f7ff fd3e 	bl	80017ac <__NVIC_GetPriorityGrouping>
 8001d30:	4603      	mov	r3, r0
 8001d32:	2200      	movs	r2, #0
 8001d34:	2100      	movs	r1, #0
 8001d36:	4618      	mov	r0, r3
 8001d38:	f7ff fd8e 	bl	8001858 <NVIC_EncodePriority>
 8001d3c:	4603      	mov	r3, r0
 8001d3e:	4619      	mov	r1, r3
 8001d40:	2006      	movs	r0, #6
 8001d42:	f7ff fd5f 	bl	8001804 <__NVIC_SetPriority>
  NVIC_EnableIRQ(EXTI0_IRQn);
 8001d46:	2006      	movs	r0, #6
 8001d48:	f7ff fd3e 	bl	80017c8 <__NVIC_EnableIRQ>
  NVIC_SetPriority(EXTI1_IRQn, NVIC_EncodePriority(NVIC_GetPriorityGrouping(),0, 0));
 8001d4c:	f7ff fd2e 	bl	80017ac <__NVIC_GetPriorityGrouping>
 8001d50:	4603      	mov	r3, r0
 8001d52:	2200      	movs	r2, #0
 8001d54:	2100      	movs	r1, #0
 8001d56:	4618      	mov	r0, r3
 8001d58:	f7ff fd7e 	bl	8001858 <NVIC_EncodePriority>
 8001d5c:	4603      	mov	r3, r0
 8001d5e:	4619      	mov	r1, r3
 8001d60:	2007      	movs	r0, #7
 8001d62:	f7ff fd4f 	bl	8001804 <__NVIC_SetPriority>
  NVIC_EnableIRQ(EXTI1_IRQn);
 8001d66:	2007      	movs	r0, #7
 8001d68:	f7ff fd2e 	bl	80017c8 <__NVIC_EnableIRQ>
  NVIC_SetPriority(EXTI2_IRQn, NVIC_EncodePriority(NVIC_GetPriorityGrouping(),0, 0));
 8001d6c:	f7ff fd1e 	bl	80017ac <__NVIC_GetPriorityGrouping>
 8001d70:	4603      	mov	r3, r0
 8001d72:	2200      	movs	r2, #0
 8001d74:	2100      	movs	r1, #0
 8001d76:	4618      	mov	r0, r3
 8001d78:	f7ff fd6e 	bl	8001858 <NVIC_EncodePriority>
 8001d7c:	4603      	mov	r3, r0
 8001d7e:	4619      	mov	r1, r3
 8001d80:	2008      	movs	r0, #8
 8001d82:	f7ff fd3f 	bl	8001804 <__NVIC_SetPriority>
  NVIC_EnableIRQ(EXTI2_IRQn);
 8001d86:	2008      	movs	r0, #8
 8001d88:	f7ff fd1e 	bl	80017c8 <__NVIC_EnableIRQ>
  NVIC_SetPriority(EXTI15_10_IRQn, NVIC_EncodePriority(NVIC_GetPriorityGrouping(),0, 0));
 8001d8c:	f7ff fd0e 	bl	80017ac <__NVIC_GetPriorityGrouping>
 8001d90:	4603      	mov	r3, r0
 8001d92:	2200      	movs	r2, #0
 8001d94:	2100      	movs	r1, #0
 8001d96:	4618      	mov	r0, r3
 8001d98:	f7ff fd5e 	bl	8001858 <NVIC_EncodePriority>
 8001d9c:	4603      	mov	r3, r0
 8001d9e:	4619      	mov	r1, r3
 8001da0:	2028      	movs	r0, #40	; 0x28
 8001da2:	f7ff fd2f 	bl	8001804 <__NVIC_SetPriority>
  NVIC_EnableIRQ(EXTI15_10_IRQn);
 8001da6:	2028      	movs	r0, #40	; 0x28
 8001da8:	f7ff fd0e 	bl	80017c8 <__NVIC_EnableIRQ>

}
 8001dac:	bf00      	nop
 8001dae:	3728      	adds	r7, #40	; 0x28
 8001db0:	46bd      	mov	sp, r7
 8001db2:	e009      	b.n	8001dc8 <MX_GPIO_Init+0x3a0>
 8001db4:	48000800 	.word	0x48000800
 8001db8:	48000400 	.word	0x48000400
 8001dbc:	0f000003 	.word	0x0f000003
 8001dc0:	f0000003 	.word	0xf0000003
 8001dc4:	48001400 	.word	0x48001400
 8001dc8:	bd80      	pop	{r7, pc}
 8001dca:	bf00      	nop

08001dcc <ITM_SendChar>:
           \li Is blocking when a debugger is connected, but the previous character sent has not been transmitted.
  \param [in]     ch  Character to transmit.
  \returns            Character to transmit.
 */
__STATIC_INLINE uint32_t ITM_SendChar (uint32_t ch)
{
 8001dcc:	b480      	push	{r7}
 8001dce:	b083      	sub	sp, #12
 8001dd0:	af00      	add	r7, sp, #0
 8001dd2:	6078      	str	r0, [r7, #4]
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 8001dd4:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8001dd8:	f8d3 3e80 	ldr.w	r3, [r3, #3712]	; 0xe80
 8001ddc:	f003 0301 	and.w	r3, r3, #1
 8001de0:	2b00      	cmp	r3, #0
 8001de2:	d013      	beq.n	8001e0c <ITM_SendChar+0x40>
      ((ITM->TER & 1UL               ) != 0UL)   )     /* ITM Port #0 enabled */
 8001de4:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8001de8:	f8d3 3e00 	ldr.w	r3, [r3, #3584]	; 0xe00
 8001dec:	f003 0301 	and.w	r3, r3, #1
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 8001df0:	2b00      	cmp	r3, #0
 8001df2:	d00b      	beq.n	8001e0c <ITM_SendChar+0x40>
  {
    while (ITM->PORT[0U].u32 == 0UL)
 8001df4:	e000      	b.n	8001df8 <ITM_SendChar+0x2c>
    {
      __NOP();
 8001df6:	bf00      	nop
    while (ITM->PORT[0U].u32 == 0UL)
 8001df8:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8001dfc:	681b      	ldr	r3, [r3, #0]
 8001dfe:	2b00      	cmp	r3, #0
 8001e00:	d0f9      	beq.n	8001df6 <ITM_SendChar+0x2a>
    }
    ITM->PORT[0U].u8 = (uint8_t)ch;
 8001e02:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8001e06:	687a      	ldr	r2, [r7, #4]
 8001e08:	b2d2      	uxtb	r2, r2
 8001e0a:	701a      	strb	r2, [r3, #0]
  }
  return (ch);
 8001e0c:	687b      	ldr	r3, [r7, #4]
}
 8001e0e:	4618      	mov	r0, r3
 8001e10:	370c      	adds	r7, #12
 8001e12:	46bd      	mov	sp, r7
 8001e14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e18:	4770      	bx	lr

08001e1a <_write>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
int _write(int file, char *ptr, int len)
{
 8001e1a:	b580      	push	{r7, lr}
 8001e1c:	b086      	sub	sp, #24
 8001e1e:	af00      	add	r7, sp, #0
 8001e20:	60f8      	str	r0, [r7, #12]
 8001e22:	60b9      	str	r1, [r7, #8]
 8001e24:	607a      	str	r2, [r7, #4]
  /* Implement your write code here, this is used by puts and printf for example */
  int i=0;
 8001e26:	2300      	movs	r3, #0
 8001e28:	617b      	str	r3, [r7, #20]
  for(i=0 ; i<len ; i++)
 8001e2a:	2300      	movs	r3, #0
 8001e2c:	617b      	str	r3, [r7, #20]
 8001e2e:	e009      	b.n	8001e44 <_write+0x2a>
    ITM_SendChar((*ptr++));
 8001e30:	68bb      	ldr	r3, [r7, #8]
 8001e32:	1c5a      	adds	r2, r3, #1
 8001e34:	60ba      	str	r2, [r7, #8]
 8001e36:	781b      	ldrb	r3, [r3, #0]
 8001e38:	4618      	mov	r0, r3
 8001e3a:	f7ff ffc7 	bl	8001dcc <ITM_SendChar>
  for(i=0 ; i<len ; i++)
 8001e3e:	697b      	ldr	r3, [r7, #20]
 8001e40:	3301      	adds	r3, #1
 8001e42:	617b      	str	r3, [r7, #20]
 8001e44:	697a      	ldr	r2, [r7, #20]
 8001e46:	687b      	ldr	r3, [r7, #4]
 8001e48:	429a      	cmp	r2, r3
 8001e4a:	dbf1      	blt.n	8001e30 <_write+0x16>
  return len;
 8001e4c:	687b      	ldr	r3, [r7, #4]
}
 8001e4e:	4618      	mov	r0, r3
 8001e50:	3718      	adds	r7, #24
 8001e52:	46bd      	mov	sp, r7
 8001e54:	bd80      	pop	{r7, pc}

08001e56 <HAL_DAC_ErrorCallbackCh1>:

void HAL_DAC_ErrorCallbackCh1(DAC_HandleTypeDef *hdac)
{
 8001e56:	b480      	push	{r7}
 8001e58:	b083      	sub	sp, #12
 8001e5a:	af00      	add	r7, sp, #0
 8001e5c:	6078      	str	r0, [r7, #4]
	// do something
}
 8001e5e:	bf00      	nop
 8001e60:	370c      	adds	r7, #12
 8001e62:	46bd      	mov	sp, r7
 8001e64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e68:	4770      	bx	lr
	...

08001e6c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001e6c:	b580      	push	{r7, lr}
 8001e6e:	b082      	sub	sp, #8
 8001e70:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001e72:	f000 ff42 	bl	8002cfa <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001e76:	f000 f89f 	bl	8001fb8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001e7a:	f7ff fdd5 	bl	8001a28 <MX_GPIO_Init>
  MX_DMA_Init();
 8001e7e:	f7ff fc0f 	bl	80016a0 <MX_DMA_Init>
  MX_DAC1_Init();
 8001e82:	f7ff fabf 	bl	8001404 <MX_DAC1_Init>
  MX_DAC2_Init();
 8001e86:	f7ff fb07 	bl	8001498 <MX_DAC2_Init>
  MX_ADC1_Init();
 8001e8a:	f7ff f97d 	bl	8001188 <MX_ADC1_Init>
  MX_COMP1_Init();
 8001e8e:	f7ff fa5f 	bl	8001350 <MX_COMP1_Init>
  MX_TIM2_Init();
 8001e92:	f000 fc29 	bl	80026e8 <MX_TIM2_Init>
  MX_TIM17_Init();
 8001e96:	f000 fdc1 	bl	8002a1c <MX_TIM17_Init>
  MX_SPI3_Init();
 8001e9a:	f000 f939 	bl	8002110 <MX_SPI3_Init>
  MX_RNG_Init();
 8001e9e:	f000 f929 	bl	80020f4 <MX_RNG_Init>
  MX_TIM1_Init();
 8001ea2:	f000 fbb1 	bl	8002608 <MX_TIM1_Init>
  MX_TIM8_Init();
 8001ea6:	f000 fcd9 	bl	800285c <MX_TIM8_Init>
  MX_TIM16_Init();
 8001eaa:	f000 fd91 	bl	80029d0 <MX_TIM16_Init>
  MX_TIM15_Init();
 8001eae:	f000 fd3d 	bl	800292c <MX_TIM15_Init>
  MX_TIM5_Init();
 8001eb2:	f000 fc83 	bl	80027bc <MX_TIM5_Init>
  /* USER CODE BEGIN 2 */

  // main signal function output (external)
  HAL_DAC_Start_DMA(&hdac1, DAC1_CHANNEL_1, sine_data_table, SINE_DATA_SIZE, DAC_ALIGN_12B_R);
 8001eb6:	2300      	movs	r3, #0
 8001eb8:	9300      	str	r3, [sp, #0]
 8001eba:	2378      	movs	r3, #120	; 0x78
 8001ebc:	4a32      	ldr	r2, [pc, #200]	; (8001f88 <main+0x11c>)
 8001ebe:	2100      	movs	r1, #0
 8001ec0:	4832      	ldr	r0, [pc, #200]	; (8001f8c <main+0x120>)
 8001ec2:	f002 fc71 	bl	80047a8 <HAL_DAC_Start_DMA>
  //TIM8->ARR = sin1_max_arr;

  // DC bias output (internal)
  HAL_DAC_Start(&hdac1, DAC1_CHANNEL_2);
 8001ec6:	2110      	movs	r1, #16
 8001ec8:	4830      	ldr	r0, [pc, #192]	; (8001f8c <main+0x120>)
 8001eca:	f002 fc1a 	bl	8004702 <HAL_DAC_Start>
  //HAL_DAC_Start_DMA(&hdac2, DAC2_CHANNEL_1, sine_data_table, SINE_DATA_SIZE, DAC_ALIGN_12B_R);
  //HAL_DAC_Start_DMA(&hdac2, DAC2_CHANNEL_1, square_data_table, SQUARE_DATA_SIZE, DAC_ALIGN_12B_R);
  //HAL_DAC_Start_DMA(&hdac2, DAC2_CHANNEL_1, unitimpulse_data_table, UNITIMPULSE_DATA_SIZE, DAC_ALIGN_12B_R);
  //HAL_DAC_Start_DMA(&hdac2, DAC2_CHANNEL_1, saw_data_table, SAW_DATA_SIZE, DAC_ALIGN_12B_R);
  //HAL_DAC_Start_DMA(&hdac2, DAC2_CHANNEL_1, saw_rev_data_table, SAW_REV_DATA_SIZE, DAC_ALIGN_12B_R);
  HAL_DAC_Start_DMA(&hdac2, DAC2_CHANNEL_1, triangle_data_table, TRIANGLE_DATA_SIZE, DAC_ALIGN_12B_R);
 8001ece:	2300      	movs	r3, #0
 8001ed0:	9300      	str	r3, [sp, #0]
 8001ed2:	2378      	movs	r3, #120	; 0x78
 8001ed4:	4a2e      	ldr	r2, [pc, #184]	; (8001f90 <main+0x124>)
 8001ed6:	2100      	movs	r1, #0
 8001ed8:	482e      	ldr	r0, [pc, #184]	; (8001f94 <main+0x128>)
 8001eda:	f002 fc65 	bl	80047a8 <HAL_DAC_Start_DMA>

  //HAL_DAC_Start_DMA(&hdac2, DAC2_CHANNEL_1, trigger_input, TRIGGER_DATA_SIZE, DAC_ALIGN_12B_R);
#ifndef DISABLE_ALL_TIMERS
  // single clock to run all DAC channels. TODO add independent clocks
  HAL_TIM_Base_Start(&htim8);
 8001ede:	482e      	ldr	r0, [pc, #184]	; (8001f98 <main+0x12c>)
 8001ee0:	f004 ffe4 	bl	8006eac <HAL_TIM_Base_Start>
#endif //DISABLE_ALL_TIMERS

  // DC bias inversion
  HAL_GPIO_WritePin(DCBIAS_INVERT_GPIO_Port, DCBIAS_INVERT_Pin, GPIO_PIN_SET);
 8001ee4:	2201      	movs	r2, #1
 8001ee6:	2108      	movs	r1, #8
 8001ee8:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001eec:	f003 fc62 	bl	80057b4 <HAL_GPIO_WritePin>

  // PGA gain
  HAL_GPIO_WritePin(SG0_GPIO_Port, SG0_Pin, GPIO_PIN_SET);
 8001ef0:	2201      	movs	r2, #1
 8001ef2:	2101      	movs	r1, #1
 8001ef4:	4829      	ldr	r0, [pc, #164]	; (8001f9c <main+0x130>)
 8001ef6:	f003 fc5d 	bl	80057b4 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(SG1_GPIO_Port, SG1_Pin, GPIO_PIN_SET);
 8001efa:	2201      	movs	r2, #1
 8001efc:	2120      	movs	r1, #32
 8001efe:	4828      	ldr	r0, [pc, #160]	; (8001fa0 <main+0x134>)
 8001f00:	f003 fc58 	bl	80057b4 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(SG2_GPIO_Port, SG2_Pin, GPIO_PIN_SET);
 8001f04:	2201      	movs	r2, #1
 8001f06:	2110      	movs	r1, #16
 8001f08:	4825      	ldr	r0, [pc, #148]	; (8001fa0 <main+0x134>)
 8001f0a:	f003 fc53 	bl	80057b4 <HAL_GPIO_WritePin>
  //HAL_TIM_Base_Start_IT(&htim17);
#endif	//DISABLE_ALL_TIMERS


// http://www.ti.com/lit/ds/symlink/ts5a3357.pdf
  HAL_GPIO_WritePin(TRIGMUX1_GPIO_Port, TRIGMUX1_Pin, GPIO_PIN_RESET);	// TS5A3357 Pin6
 8001f0e:	2200      	movs	r2, #0
 8001f10:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001f14:	4822      	ldr	r0, [pc, #136]	; (8001fa0 <main+0x134>)
 8001f16:	f003 fc4d 	bl	80057b4 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(TRIGMUX2_GPIO_Port, TRIGMUX2_Pin, GPIO_PIN_RESET);	// TS5A3357 Pin5
 8001f1a:	2200      	movs	r2, #0
 8001f1c:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001f20:	481f      	ldr	r0, [pc, #124]	; (8001fa0 <main+0x134>)
 8001f22:	f003 fc47 	bl	80057b4 <HAL_GPIO_WritePin>

#ifdef TIM_TRIGGER_MODE
  // input capture on in TIM2 slave-mode TF1FP1

  // set HW switch to direct ext. trigger input to TIM pin
  HAL_GPIO_WritePin(TRIGMODE_GPIO_Port, TRIGMODE_Pin, GPIO_PIN_SET);
 8001f26:	2201      	movs	r2, #1
 8001f28:	2108      	movs	r1, #8
 8001f2a:	481d      	ldr	r0, [pc, #116]	; (8001fa0 <main+0x134>)
 8001f2c:	f003 fc42 	bl	80057b4 <HAL_GPIO_WritePin>
  //HAL_GPIO_WritePin(TRIGMUX1_GPIO_Port, TRIGMUX1_Pin, GPIO_PIN_SET);	// TS5A3357 Pin6
  //HAL_GPIO_WritePin(TRIGMUX2_GPIO_Port, TRIGMUX2_Pin, GPIO_PIN_RESET); // TS5A3357 Pin5

  // clear slave mode select reg
  TIM2->SMCR &= ~(TIM_SMCR_SMS_0 | TIM_SMCR_SMS_1 | TIM_SMCR_SMS_2);
 8001f30:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8001f34:	689b      	ldr	r3, [r3, #8]
 8001f36:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001f3a:	f023 0307 	bic.w	r3, r3, #7
 8001f3e:	6093      	str	r3, [r2, #8]

  // slave mode
  //TIM2->SMCR |= TIM_SMCR_SMS_2;						// SLAVE MODE: RESET
  TIM2->SMCR |= TIM_SMCR_SMS_0 | TIM_SMCR_SMS_2;	// SLAVE MODE: GATED
 8001f40:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8001f44:	689b      	ldr	r3, [r3, #8]
 8001f46:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001f4a:	f043 0305 	orr.w	r3, r3, #5
 8001f4e:	6093      	str	r3, [r2, #8]
  //TIM2->SMCR |= TIM_SMCR_SMS_1 | TIM_SMCR_SMS_2;	// SLAVE MODE: TRIGGER

#ifndef DISABLE_ALL_TIMERS
  HAL_TIM_Base_Start_IT(&htim2);
 8001f50:	4814      	ldr	r0, [pc, #80]	; (8001fa4 <main+0x138>)
 8001f52:	f004 ffd9 	bl	8006f08 <HAL_TIM_Base_Start_IT>



#ifndef DISABLE_ALL_TIMERS
  // encoder input
  HAL_TIM_Base_Start(&htim1);		// enable encoder timer
 8001f56:	4814      	ldr	r0, [pc, #80]	; (8001fa8 <main+0x13c>)
 8001f58:	f004 ffa8 	bl	8006eac <HAL_TIM_Base_Start>
  //TIM1->DIER |= TIM_DIER_IDXIE;		// enable index interrupts

#endif	//DISABLE_ALL_TIMERS

  TIM6->PSC = 65535;
 8001f5c:	4b13      	ldr	r3, [pc, #76]	; (8001fac <main+0x140>)
 8001f5e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001f62:	629a      	str	r2, [r3, #40]	; 0x28
  TIM6->ARR = 65535;
 8001f64:	4b11      	ldr	r3, [pc, #68]	; (8001fac <main+0x140>)
 8001f66:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001f6a:	62da      	str	r2, [r3, #44]	; 0x2c



  // TFT lib enable
  DM_Init();
 8001f6c:	f7fe f9a8 	bl	80002c0 <DM_Init>
  DM_PostInit();
 8001f70:	f7fe f9b4 	bl	80002dc <DM_PostInit>
  //DM_RegisterStrings();

  HAL_TIM_Base_Start_IT(&htim15);
 8001f74:	480e      	ldr	r0, [pc, #56]	; (8001fb0 <main+0x144>)
 8001f76:	f004 ffc7 	bl	8006f08 <HAL_TIM_Base_Start_IT>
  HAL_TIM_Base_Start(&htim5);
 8001f7a:	480e      	ldr	r0, [pc, #56]	; (8001fb4 <main+0x148>)
 8001f7c:	f004 ff96 	bl	8006eac <HAL_TIM_Base_Start>
  /* USER CODE BEGIN WHILE */
  while (1)
  {


	EM_ProcessEvent();
 8001f80:	f7fe fd1a 	bl	80009b8 <EM_ProcessEvent>
 8001f84:	e7fc      	b.n	8001f80 <main+0x114>
 8001f86:	bf00      	nop
 8001f88:	200003e4 	.word	0x200003e4
 8001f8c:	20000d18 	.word	0x20000d18
 8001f90:	200007a4 	.word	0x200007a4
 8001f94:	20000d04 	.word	0x20000d04
 8001f98:	20000e50 	.word	0x20000e50
 8001f9c:	48000400 	.word	0x48000400
 8001fa0:	48000800 	.word	0x48000800
 8001fa4:	20000fcc 	.word	0x20000fcc
 8001fa8:	20000f80 	.word	0x20000f80
 8001fac:	40001000 	.word	0x40001000
 8001fb0:	20000e9c 	.word	0x20000e9c
 8001fb4:	20000f34 	.word	0x20000f34

08001fb8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001fb8:	b580      	push	{r7, lr}
 8001fba:	b0a8      	sub	sp, #160	; 0xa0
 8001fbc:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001fbe:	f107 0368 	add.w	r3, r7, #104	; 0x68
 8001fc2:	2238      	movs	r2, #56	; 0x38
 8001fc4:	2100      	movs	r1, #0
 8001fc6:	4618      	mov	r0, r3
 8001fc8:	f007 f96e 	bl	80092a8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001fcc:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8001fd0:	2200      	movs	r2, #0
 8001fd2:	601a      	str	r2, [r3, #0]
 8001fd4:	605a      	str	r2, [r3, #4]
 8001fd6:	609a      	str	r2, [r3, #8]
 8001fd8:	60da      	str	r2, [r3, #12]
 8001fda:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001fdc:	463b      	mov	r3, r7
 8001fde:	2254      	movs	r2, #84	; 0x54
 8001fe0:	2100      	movs	r1, #0
 8001fe2:	4618      	mov	r0, r3
 8001fe4:	f007 f960 	bl	80092a8 <memset>

  /** Configure the main internal regulator output voltage 
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1_BOOST);
 8001fe8:	2000      	movs	r0, #0
 8001fea:	f003 fbfb 	bl	80057e4 <HAL_PWREx_ControlVoltageScaling>
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_HSI48;
 8001fee:	2322      	movs	r3, #34	; 0x22
 8001ff0:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001ff2:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001ff6:	677b      	str	r3, [r7, #116]	; 0x74
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001ff8:	2340      	movs	r3, #64	; 0x40
 8001ffa:	67bb      	str	r3, [r7, #120]	; 0x78
  RCC_OscInitStruct.HSI48State = RCC_HSI48_ON;
 8001ffc:	2301      	movs	r3, #1
 8001ffe:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8002002:	2302      	movs	r3, #2
 8002004:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8002008:	2302      	movs	r3, #2
 800200a:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV2;
 800200e:	2302      	movs	r3, #2
 8002010:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  RCC_OscInitStruct.PLL.PLLN = 42;
 8002014:	232a      	movs	r3, #42	; 0x2a
 8002016:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800201a:	2302      	movs	r3, #2
 800201c:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV4;
 8002020:	2304      	movs	r3, #4
 8002022:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8002026:	2302      	movs	r3, #2
 8002028:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800202c:	f107 0368 	add.w	r3, r7, #104	; 0x68
 8002030:	4618      	mov	r0, r3
 8002032:	f003 fc7b 	bl	800592c <HAL_RCC_OscConfig>
 8002036:	4603      	mov	r3, r0
 8002038:	2b00      	cmp	r3, #0
 800203a:	d001      	beq.n	8002040 <SystemClock_Config+0x88>
  {
    Error_Handler();
 800203c:	f000 f82a 	bl	8002094 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8002040:	230f      	movs	r3, #15
 8002042:	657b      	str	r3, [r7, #84]	; 0x54
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8002044:	2303      	movs	r3, #3
 8002046:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8002048:	2300      	movs	r3, #0
 800204a:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800204c:	2300      	movs	r3, #0
 800204e:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8002050:	2300      	movs	r3, #0
 8002052:	667b      	str	r3, [r7, #100]	; 0x64

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_8) != HAL_OK)
 8002054:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8002058:	2108      	movs	r1, #8
 800205a:	4618      	mov	r0, r3
 800205c:	f003 ff7e 	bl	8005f5c <HAL_RCC_ClockConfig>
 8002060:	4603      	mov	r3, r0
 8002062:	2b00      	cmp	r3, #0
 8002064:	d001      	beq.n	800206a <SystemClock_Config+0xb2>
  {
    Error_Handler();
 8002066:	f000 f815 	bl	8002094 <Error_Handler>
  }
  /** Initializes the peripherals clocks 
  */
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_RNG|RCC_PERIPHCLK_ADC12;
 800206a:	f44f 4340 	mov.w	r3, #49152	; 0xc000
 800206e:	603b      	str	r3, [r7, #0]
  PeriphClkInit.RngClockSelection = RCC_RNGCLKSOURCE_HSI48;
 8002070:	2300      	movs	r3, #0
 8002072:	643b      	str	r3, [r7, #64]	; 0x40
  PeriphClkInit.Adc12ClockSelection = RCC_ADC12CLKSOURCE_SYSCLK;
 8002074:	f04f 5300 	mov.w	r3, #536870912	; 0x20000000
 8002078:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800207a:	463b      	mov	r3, r7
 800207c:	4618      	mov	r0, r3
 800207e:	f004 f95d 	bl	800633c <HAL_RCCEx_PeriphCLKConfig>
 8002082:	4603      	mov	r3, r0
 8002084:	2b00      	cmp	r3, #0
 8002086:	d001      	beq.n	800208c <SystemClock_Config+0xd4>
  {
    Error_Handler();
 8002088:	f000 f804 	bl	8002094 <Error_Handler>
  }
}
 800208c:	bf00      	nop
 800208e:	37a0      	adds	r7, #160	; 0xa0
 8002090:	46bd      	mov	sp, r7
 8002092:	bd80      	pop	{r7, pc}

08002094 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002094:	b480      	push	{r7}
 8002096:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8002098:	bf00      	nop
 800209a:	46bd      	mov	sp, r7
 800209c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020a0:	4770      	bx	lr

080020a2 <LL_RNG_Enable>:
  * @rmtoll CR           RNGEN         LL_RNG_Enable
  * @param  RNGx RNG Instance
  * @retval None
  */
__STATIC_INLINE void LL_RNG_Enable(RNG_TypeDef *RNGx)
{
 80020a2:	b480      	push	{r7}
 80020a4:	b083      	sub	sp, #12
 80020a6:	af00      	add	r7, sp, #0
 80020a8:	6078      	str	r0, [r7, #4]
  SET_BIT(RNGx->CR, RNG_CR_RNGEN);
 80020aa:	687b      	ldr	r3, [r7, #4]
 80020ac:	681b      	ldr	r3, [r3, #0]
 80020ae:	f043 0204 	orr.w	r2, r3, #4
 80020b2:	687b      	ldr	r3, [r7, #4]
 80020b4:	601a      	str	r2, [r3, #0]
}
 80020b6:	bf00      	nop
 80020b8:	370c      	adds	r7, #12
 80020ba:	46bd      	mov	sp, r7
 80020bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020c0:	4770      	bx	lr
	...

080020c4 <LL_AHB2_GRP1_EnableClock>:
{
 80020c4:	b480      	push	{r7}
 80020c6:	b085      	sub	sp, #20
 80020c8:	af00      	add	r7, sp, #0
 80020ca:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB2ENR, Periphs);
 80020cc:	4b08      	ldr	r3, [pc, #32]	; (80020f0 <LL_AHB2_GRP1_EnableClock+0x2c>)
 80020ce:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80020d0:	4907      	ldr	r1, [pc, #28]	; (80020f0 <LL_AHB2_GRP1_EnableClock+0x2c>)
 80020d2:	687b      	ldr	r3, [r7, #4]
 80020d4:	4313      	orrs	r3, r2
 80020d6:	64cb      	str	r3, [r1, #76]	; 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 80020d8:	4b05      	ldr	r3, [pc, #20]	; (80020f0 <LL_AHB2_GRP1_EnableClock+0x2c>)
 80020da:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80020dc:	687b      	ldr	r3, [r7, #4]
 80020de:	4013      	ands	r3, r2
 80020e0:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80020e2:	68fb      	ldr	r3, [r7, #12]
}
 80020e4:	bf00      	nop
 80020e6:	3714      	adds	r7, #20
 80020e8:	46bd      	mov	sp, r7
 80020ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020ee:	4770      	bx	lr
 80020f0:	40021000 	.word	0x40021000

080020f4 <MX_RNG_Init>:

/* USER CODE END 0 */

/* RNG init function */
void MX_RNG_Init(void)
{
 80020f4:	b580      	push	{r7, lr}
 80020f6:	af00      	add	r7, sp, #0

  /* Peripheral clock enable */
  LL_AHB2_GRP1_EnableClock(LL_AHB2_GRP1_PERIPH_RNG);
 80020f8:	f04f 6080 	mov.w	r0, #67108864	; 0x4000000
 80020fc:	f7ff ffe2 	bl	80020c4 <LL_AHB2_GRP1_EnableClock>

  LL_RNG_Enable(RNG);
 8002100:	4802      	ldr	r0, [pc, #8]	; (800210c <MX_RNG_Init+0x18>)
 8002102:	f7ff ffce 	bl	80020a2 <LL_RNG_Enable>

}
 8002106:	bf00      	nop
 8002108:	bd80      	pop	{r7, pc}
 800210a:	bf00      	nop
 800210c:	50060800 	.word	0x50060800

08002110 <MX_SPI3_Init>:

SPI_HandleTypeDef hspi3;

/* SPI3 init function */
void MX_SPI3_Init(void)
{
 8002110:	b580      	push	{r7, lr}
 8002112:	af00      	add	r7, sp, #0

  hspi3.Instance = SPI3;
 8002114:	4b1b      	ldr	r3, [pc, #108]	; (8002184 <MX_SPI3_Init+0x74>)
 8002116:	4a1c      	ldr	r2, [pc, #112]	; (8002188 <MX_SPI3_Init+0x78>)
 8002118:	601a      	str	r2, [r3, #0]
  hspi3.Init.Mode = SPI_MODE_MASTER;
 800211a:	4b1a      	ldr	r3, [pc, #104]	; (8002184 <MX_SPI3_Init+0x74>)
 800211c:	f44f 7282 	mov.w	r2, #260	; 0x104
 8002120:	605a      	str	r2, [r3, #4]
  hspi3.Init.Direction = SPI_DIRECTION_2LINES;
 8002122:	4b18      	ldr	r3, [pc, #96]	; (8002184 <MX_SPI3_Init+0x74>)
 8002124:	2200      	movs	r2, #0
 8002126:	609a      	str	r2, [r3, #8]
  hspi3.Init.DataSize = SPI_DATASIZE_8BIT;
 8002128:	4b16      	ldr	r3, [pc, #88]	; (8002184 <MX_SPI3_Init+0x74>)
 800212a:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 800212e:	60da      	str	r2, [r3, #12]
  hspi3.Init.CLKPolarity = SPI_POLARITY_LOW;
 8002130:	4b14      	ldr	r3, [pc, #80]	; (8002184 <MX_SPI3_Init+0x74>)
 8002132:	2200      	movs	r2, #0
 8002134:	611a      	str	r2, [r3, #16]
  hspi3.Init.CLKPhase = SPI_PHASE_1EDGE;
 8002136:	4b13      	ldr	r3, [pc, #76]	; (8002184 <MX_SPI3_Init+0x74>)
 8002138:	2200      	movs	r2, #0
 800213a:	615a      	str	r2, [r3, #20]
  hspi3.Init.NSS = SPI_NSS_SOFT;
 800213c:	4b11      	ldr	r3, [pc, #68]	; (8002184 <MX_SPI3_Init+0x74>)
 800213e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002142:	619a      	str	r2, [r3, #24]
  hspi3.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_8;
 8002144:	4b0f      	ldr	r3, [pc, #60]	; (8002184 <MX_SPI3_Init+0x74>)
 8002146:	2210      	movs	r2, #16
 8002148:	61da      	str	r2, [r3, #28]
  hspi3.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800214a:	4b0e      	ldr	r3, [pc, #56]	; (8002184 <MX_SPI3_Init+0x74>)
 800214c:	2200      	movs	r2, #0
 800214e:	621a      	str	r2, [r3, #32]
  hspi3.Init.TIMode = SPI_TIMODE_DISABLE;
 8002150:	4b0c      	ldr	r3, [pc, #48]	; (8002184 <MX_SPI3_Init+0x74>)
 8002152:	2200      	movs	r2, #0
 8002154:	625a      	str	r2, [r3, #36]	; 0x24
  hspi3.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002156:	4b0b      	ldr	r3, [pc, #44]	; (8002184 <MX_SPI3_Init+0x74>)
 8002158:	2200      	movs	r2, #0
 800215a:	629a      	str	r2, [r3, #40]	; 0x28
  hspi3.Init.CRCPolynomial = 7;
 800215c:	4b09      	ldr	r3, [pc, #36]	; (8002184 <MX_SPI3_Init+0x74>)
 800215e:	2207      	movs	r2, #7
 8002160:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi3.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8002162:	4b08      	ldr	r3, [pc, #32]	; (8002184 <MX_SPI3_Init+0x74>)
 8002164:	2200      	movs	r2, #0
 8002166:	631a      	str	r2, [r3, #48]	; 0x30
  hspi3.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8002168:	4b06      	ldr	r3, [pc, #24]	; (8002184 <MX_SPI3_Init+0x74>)
 800216a:	2208      	movs	r2, #8
 800216c:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi3) != HAL_OK)
 800216e:	4805      	ldr	r0, [pc, #20]	; (8002184 <MX_SPI3_Init+0x74>)
 8002170:	f004 fb30 	bl	80067d4 <HAL_SPI_Init>
 8002174:	4603      	mov	r3, r0
 8002176:	2b00      	cmp	r3, #0
 8002178:	d001      	beq.n	800217e <MX_SPI3_Init+0x6e>
  {
    Error_Handler();
 800217a:	f7ff ff8b 	bl	8002094 <Error_Handler>
  }

}
 800217e:	bf00      	nop
 8002180:	bd80      	pop	{r7, pc}
 8002182:	bf00      	nop
 8002184:	20000dec 	.word	0x20000dec
 8002188:	40003c00 	.word	0x40003c00

0800218c <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 800218c:	b580      	push	{r7, lr}
 800218e:	b08a      	sub	sp, #40	; 0x28
 8002190:	af00      	add	r7, sp, #0
 8002192:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002194:	f107 0314 	add.w	r3, r7, #20
 8002198:	2200      	movs	r2, #0
 800219a:	601a      	str	r2, [r3, #0]
 800219c:	605a      	str	r2, [r3, #4]
 800219e:	609a      	str	r2, [r3, #8]
 80021a0:	60da      	str	r2, [r3, #12]
 80021a2:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI3)
 80021a4:	687b      	ldr	r3, [r7, #4]
 80021a6:	681b      	ldr	r3, [r3, #0]
 80021a8:	4a17      	ldr	r2, [pc, #92]	; (8002208 <HAL_SPI_MspInit+0x7c>)
 80021aa:	4293      	cmp	r3, r2
 80021ac:	d128      	bne.n	8002200 <HAL_SPI_MspInit+0x74>
  {
  /* USER CODE BEGIN SPI3_MspInit 0 */

  /* USER CODE END SPI3_MspInit 0 */
    /* SPI3 clock enable */
    __HAL_RCC_SPI3_CLK_ENABLE();
 80021ae:	4b17      	ldr	r3, [pc, #92]	; (800220c <HAL_SPI_MspInit+0x80>)
 80021b0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80021b2:	4a16      	ldr	r2, [pc, #88]	; (800220c <HAL_SPI_MspInit+0x80>)
 80021b4:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80021b8:	6593      	str	r3, [r2, #88]	; 0x58
 80021ba:	4b14      	ldr	r3, [pc, #80]	; (800220c <HAL_SPI_MspInit+0x80>)
 80021bc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80021be:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80021c2:	613b      	str	r3, [r7, #16]
 80021c4:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80021c6:	4b11      	ldr	r3, [pc, #68]	; (800220c <HAL_SPI_MspInit+0x80>)
 80021c8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80021ca:	4a10      	ldr	r2, [pc, #64]	; (800220c <HAL_SPI_MspInit+0x80>)
 80021cc:	f043 0304 	orr.w	r3, r3, #4
 80021d0:	64d3      	str	r3, [r2, #76]	; 0x4c
 80021d2:	4b0e      	ldr	r3, [pc, #56]	; (800220c <HAL_SPI_MspInit+0x80>)
 80021d4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80021d6:	f003 0304 	and.w	r3, r3, #4
 80021da:	60fb      	str	r3, [r7, #12]
 80021dc:	68fb      	ldr	r3, [r7, #12]
    /**SPI3 GPIO Configuration    
    PC10     ------> SPI3_SCK
    PC11     ------> SPI3_MISO
    PC12     ------> SPI3_MOSI 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12;
 80021de:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 80021e2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80021e4:	2302      	movs	r3, #2
 80021e6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80021e8:	2300      	movs	r3, #0
 80021ea:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80021ec:	2300      	movs	r3, #0
 80021ee:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 80021f0:	2306      	movs	r3, #6
 80021f2:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80021f4:	f107 0314 	add.w	r3, r7, #20
 80021f8:	4619      	mov	r1, r3
 80021fa:	4805      	ldr	r0, [pc, #20]	; (8002210 <HAL_SPI_MspInit+0x84>)
 80021fc:	f003 f940 	bl	8005480 <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }
}
 8002200:	bf00      	nop
 8002202:	3728      	adds	r7, #40	; 0x28
 8002204:	46bd      	mov	sp, r7
 8002206:	bd80      	pop	{r7, pc}
 8002208:	40003c00 	.word	0x40003c00
 800220c:	40021000 	.word	0x40021000
 8002210:	48000800 	.word	0x48000800

08002214 <LL_PWR_DisableUCPDDeadBattery>:
  *         control to the UCPD (which should therefore be initialized before doing the disable).
  * @rmtoll CR3          UCPD_DBDIS           LL_PWR_DisableUCPDDeadBattery
  * @retval None
  */
__STATIC_INLINE void LL_PWR_DisableUCPDDeadBattery(void)
{
 8002214:	b480      	push	{r7}
 8002216:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR3, PWR_CR3_UCPD_DBDIS);
 8002218:	4b05      	ldr	r3, [pc, #20]	; (8002230 <LL_PWR_DisableUCPDDeadBattery+0x1c>)
 800221a:	689b      	ldr	r3, [r3, #8]
 800221c:	4a04      	ldr	r2, [pc, #16]	; (8002230 <LL_PWR_DisableUCPDDeadBattery+0x1c>)
 800221e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002222:	6093      	str	r3, [r2, #8]
}
 8002224:	bf00      	nop
 8002226:	46bd      	mov	sp, r7
 8002228:	f85d 7b04 	ldr.w	r7, [sp], #4
 800222c:	4770      	bx	lr
 800222e:	bf00      	nop
 8002230:	40007000 	.word	0x40007000

08002234 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002234:	b580      	push	{r7, lr}
 8002236:	b082      	sub	sp, #8
 8002238:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800223a:	4b0f      	ldr	r3, [pc, #60]	; (8002278 <HAL_MspInit+0x44>)
 800223c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800223e:	4a0e      	ldr	r2, [pc, #56]	; (8002278 <HAL_MspInit+0x44>)
 8002240:	f043 0301 	orr.w	r3, r3, #1
 8002244:	6613      	str	r3, [r2, #96]	; 0x60
 8002246:	4b0c      	ldr	r3, [pc, #48]	; (8002278 <HAL_MspInit+0x44>)
 8002248:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800224a:	f003 0301 	and.w	r3, r3, #1
 800224e:	607b      	str	r3, [r7, #4]
 8002250:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8002252:	4b09      	ldr	r3, [pc, #36]	; (8002278 <HAL_MspInit+0x44>)
 8002254:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002256:	4a08      	ldr	r2, [pc, #32]	; (8002278 <HAL_MspInit+0x44>)
 8002258:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800225c:	6593      	str	r3, [r2, #88]	; 0x58
 800225e:	4b06      	ldr	r3, [pc, #24]	; (8002278 <HAL_MspInit+0x44>)
 8002260:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002262:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002266:	603b      	str	r3, [r7, #0]
 8002268:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral 
  */
  LL_PWR_DisableDeadBatteryPD();
 800226a:	f7ff ffd3 	bl	8002214 <LL_PWR_DisableUCPDDeadBattery>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800226e:	bf00      	nop
 8002270:	3708      	adds	r7, #8
 8002272:	46bd      	mov	sp, r7
 8002274:	bd80      	pop	{r7, pc}
 8002276:	bf00      	nop
 8002278:	40021000 	.word	0x40021000

0800227c <LL_EXTI_IsActiveFlag_0_31>:
  * @note   (*): Available in some devices
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_EXTI_IsActiveFlag_0_31(uint32_t ExtiLine)
{
 800227c:	b480      	push	{r7}
 800227e:	b083      	sub	sp, #12
 8002280:	af00      	add	r7, sp, #0
 8002282:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(EXTI->PR1, ExtiLine) == (ExtiLine)) ? 1UL : 0UL);
 8002284:	4b07      	ldr	r3, [pc, #28]	; (80022a4 <LL_EXTI_IsActiveFlag_0_31+0x28>)
 8002286:	695a      	ldr	r2, [r3, #20]
 8002288:	687b      	ldr	r3, [r7, #4]
 800228a:	4013      	ands	r3, r2
 800228c:	687a      	ldr	r2, [r7, #4]
 800228e:	429a      	cmp	r2, r3
 8002290:	d101      	bne.n	8002296 <LL_EXTI_IsActiveFlag_0_31+0x1a>
 8002292:	2301      	movs	r3, #1
 8002294:	e000      	b.n	8002298 <LL_EXTI_IsActiveFlag_0_31+0x1c>
 8002296:	2300      	movs	r3, #0
}
 8002298:	4618      	mov	r0, r3
 800229a:	370c      	adds	r7, #12
 800229c:	46bd      	mov	sp, r7
 800229e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022a2:	4770      	bx	lr
 80022a4:	40010400 	.word	0x40010400

080022a8 <LL_EXTI_ClearFlag_0_31>:
  * @note   (*): Available in some devices
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_ClearFlag_0_31(uint32_t ExtiLine)
{
 80022a8:	b480      	push	{r7}
 80022aa:	b083      	sub	sp, #12
 80022ac:	af00      	add	r7, sp, #0
 80022ae:	6078      	str	r0, [r7, #4]
  WRITE_REG(EXTI->PR1, ExtiLine);
 80022b0:	4a04      	ldr	r2, [pc, #16]	; (80022c4 <LL_EXTI_ClearFlag_0_31+0x1c>)
 80022b2:	687b      	ldr	r3, [r7, #4]
 80022b4:	6153      	str	r3, [r2, #20]
}
 80022b6:	bf00      	nop
 80022b8:	370c      	adds	r7, #12
 80022ba:	46bd      	mov	sp, r7
 80022bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022c0:	4770      	bx	lr
 80022c2:	bf00      	nop
 80022c4:	40010400 	.word	0x40010400

080022c8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80022c8:	b480      	push	{r7}
 80022ca:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 80022cc:	bf00      	nop
 80022ce:	46bd      	mov	sp, r7
 80022d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022d4:	4770      	bx	lr

080022d6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80022d6:	b480      	push	{r7}
 80022d8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80022da:	e7fe      	b.n	80022da <HardFault_Handler+0x4>

080022dc <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80022dc:	b480      	push	{r7}
 80022de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80022e0:	e7fe      	b.n	80022e0 <MemManage_Handler+0x4>

080022e2 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80022e2:	b480      	push	{r7}
 80022e4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80022e6:	e7fe      	b.n	80022e6 <BusFault_Handler+0x4>

080022e8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80022e8:	b480      	push	{r7}
 80022ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80022ec:	e7fe      	b.n	80022ec <UsageFault_Handler+0x4>

080022ee <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80022ee:	b480      	push	{r7}
 80022f0:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80022f2:	bf00      	nop
 80022f4:	46bd      	mov	sp, r7
 80022f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022fa:	4770      	bx	lr

080022fc <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80022fc:	b480      	push	{r7}
 80022fe:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002300:	bf00      	nop
 8002302:	46bd      	mov	sp, r7
 8002304:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002308:	4770      	bx	lr

0800230a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800230a:	b480      	push	{r7}
 800230c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800230e:	bf00      	nop
 8002310:	46bd      	mov	sp, r7
 8002312:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002316:	4770      	bx	lr

08002318 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002318:	b580      	push	{r7, lr}
 800231a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800231c:	f000 fd40 	bl	8002da0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002320:	bf00      	nop
 8002322:	bd80      	pop	{r7, pc}

08002324 <EXTI0_IRQHandler>:

/**
  * @brief This function handles EXTI line0 interrupt.
  */
void EXTI0_IRQHandler(void)
{
 8002324:	b580      	push	{r7, lr}
 8002326:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI0_IRQn 0 */

//	if(HAL_GPIO_ReadPin(BTN3_EXTI0_GPIO_Port, BTN3_EXTI0_Pin))
//	{
		//snprintf(control_pressed, sizeof(control_pressed), "BTN3");
		EM_SetNewEvent(evBiasMenu);
 8002328:	2004      	movs	r0, #4
 800232a:	f7fe fd3f 	bl	8000dac <EM_SetNewEvent>
 		//printf("BTN3_EXTI0_Pin\n");
//	}

  /* USER CODE END EXTI0_IRQn 0 */
  if (LL_EXTI_IsActiveFlag_0_31(LL_EXTI_LINE_0) != RESET)
 800232e:	2001      	movs	r0, #1
 8002330:	f7ff ffa4 	bl	800227c <LL_EXTI_IsActiveFlag_0_31>
 8002334:	4603      	mov	r3, r0
 8002336:	2b00      	cmp	r3, #0
 8002338:	d002      	beq.n	8002340 <EXTI0_IRQHandler+0x1c>
  {
    LL_EXTI_ClearFlag_0_31(LL_EXTI_LINE_0);
 800233a:	2001      	movs	r0, #1
 800233c:	f7ff ffb4 	bl	80022a8 <LL_EXTI_ClearFlag_0_31>
    /* USER CODE END LL_EXTI_LINE_0 */
  }
  /* USER CODE BEGIN EXTI0_IRQn 1 */

  /* USER CODE END EXTI0_IRQn 1 */
}
 8002340:	bf00      	nop
 8002342:	bd80      	pop	{r7, pc}

08002344 <EXTI1_IRQHandler>:

/**
  * @brief This function handles EXTI line1 interrupt.
  */
void EXTI1_IRQHandler(void)
{
 8002344:	b580      	push	{r7, lr}
 8002346:	af00      	add	r7, sp, #0

//	if(HAL_GPIO_ReadPin(BTN4_EXTI1_GPIO_Port, BTN4_EXTI1_Pin))
//	{
		//snprintf(control_pressed, sizeof(control_pressed), "BTN4");
		//printf("BTN4_EXTI1_Pin\n");
		EM_SetNewEvent(evFreqMenu);
 8002348:	2002      	movs	r0, #2
 800234a:	f7fe fd2f 	bl	8000dac <EM_SetNewEvent>
//	}

  /* USER CODE END EXTI1_IRQn 0 */
  if (LL_EXTI_IsActiveFlag_0_31(LL_EXTI_LINE_1) != RESET)
 800234e:	2002      	movs	r0, #2
 8002350:	f7ff ff94 	bl	800227c <LL_EXTI_IsActiveFlag_0_31>
 8002354:	4603      	mov	r3, r0
 8002356:	2b00      	cmp	r3, #0
 8002358:	d002      	beq.n	8002360 <EXTI1_IRQHandler+0x1c>
  {
    LL_EXTI_ClearFlag_0_31(LL_EXTI_LINE_1);
 800235a:	2002      	movs	r0, #2
 800235c:	f7ff ffa4 	bl	80022a8 <LL_EXTI_ClearFlag_0_31>
    /* USER CODE END LL_EXTI_LINE_1 */
  }
  /* USER CODE BEGIN EXTI1_IRQn 1 */

  /* USER CODE END EXTI1_IRQn 1 */
}
 8002360:	bf00      	nop
 8002362:	bd80      	pop	{r7, pc}

08002364 <EXTI2_IRQHandler>:

/**
  * @brief This function handles EXTI line2 interrupt.
  */
void EXTI2_IRQHandler(void)
{
 8002364:	b580      	push	{r7, lr}
 8002366:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI2_IRQn 0 */


		//snprintf(control_pressed, sizeof(control_pressed), "ENC_BTN");
		//printf("ENC_EXTI2_Pin\n");
		EM_SetNewEvent(evEncoderPush);
 8002368:	2006      	movs	r0, #6
 800236a:	f7fe fd1f 	bl	8000dac <EM_SetNewEvent>



  /* USER CODE END EXTI2_IRQn 0 */
  if (LL_EXTI_IsActiveFlag_0_31(LL_EXTI_LINE_2) != RESET)
 800236e:	2004      	movs	r0, #4
 8002370:	f7ff ff84 	bl	800227c <LL_EXTI_IsActiveFlag_0_31>
 8002374:	4603      	mov	r3, r0
 8002376:	2b00      	cmp	r3, #0
 8002378:	d002      	beq.n	8002380 <EXTI2_IRQHandler+0x1c>
  {
    LL_EXTI_ClearFlag_0_31(LL_EXTI_LINE_2);
 800237a:	2004      	movs	r0, #4
 800237c:	f7ff ff94 	bl	80022a8 <LL_EXTI_ClearFlag_0_31>
    /* USER CODE END LL_EXTI_LINE_2 */
  }
  /* USER CODE BEGIN EXTI2_IRQn 1 */

  /* USER CODE END EXTI2_IRQn 1 */
}
 8002380:	bf00      	nop
 8002382:	bd80      	pop	{r7, pc}

08002384 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 8002384:	b580      	push	{r7, lr}
 8002386:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */
	//printf("Test\n");
	//printf("%lu\n", trigger_input[0]);
  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8002388:	4802      	ldr	r0, [pc, #8]	; (8002394 <DMA1_Channel1_IRQHandler+0x10>)
 800238a:	f002 ff29 	bl	80051e0 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 800238e:	bf00      	nop
 8002390:	bd80      	pop	{r7, pc}
 8002392:	bf00      	nop
 8002394:	20000c80 	.word	0x20000c80

08002398 <DMA1_Channel2_IRQHandler>:

/**
  * @brief This function handles DMA1 channel2 global interrupt.
  */
void DMA1_Channel2_IRQHandler(void)
{
 8002398:	b580      	push	{r7, lr}
 800239a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel2_IRQn 0 */

  /* USER CODE END DMA1_Channel2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_dac1_ch1);
 800239c:	4802      	ldr	r0, [pc, #8]	; (80023a8 <DMA1_Channel2_IRQHandler+0x10>)
 800239e:	f002 ff1f 	bl	80051e0 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel2_IRQn 1 */

  /* USER CODE END DMA1_Channel2_IRQn 1 */
}
 80023a2:	bf00      	nop
 80023a4:	bd80      	pop	{r7, pc}
 80023a6:	bf00      	nop
 80023a8:	20000d2c 	.word	0x20000d2c

080023ac <DMA1_Channel3_IRQHandler>:

/**
  * @brief This function handles DMA1 channel3 global interrupt.
  */
void DMA1_Channel3_IRQHandler(void)
{
 80023ac:	b580      	push	{r7, lr}
 80023ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel3_IRQn 0 */

  /* USER CODE END DMA1_Channel3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_dac2_ch1);
 80023b0:	4802      	ldr	r0, [pc, #8]	; (80023bc <DMA1_Channel3_IRQHandler+0x10>)
 80023b2:	f002 ff15 	bl	80051e0 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel3_IRQn 1 */

  /* USER CODE END DMA1_Channel3_IRQn 1 */
}
 80023b6:	bf00      	nop
 80023b8:	bd80      	pop	{r7, pc}
 80023ba:	bf00      	nop
 80023bc:	20000d8c 	.word	0x20000d8c

080023c0 <TIM1_BRK_TIM15_IRQHandler>:

/**
  * @brief This function handles TIM1 break interrupt and TIM15 global interrupt.
  */
void TIM1_BRK_TIM15_IRQHandler(void)
{
 80023c0:	b580      	push	{r7, lr}
 80023c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_BRK_TIM15_IRQn 0 */
	DM_UpdateDisplay();
 80023c4:	f7fd ffa8 	bl	8000318 <DM_UpdateDisplay>

	if((TIM1->CNT < last_enc_value) || (TIM1->CNT > last_enc_value))
 80023c8:	4b10      	ldr	r3, [pc, #64]	; (800240c <TIM1_BRK_TIM15_IRQHandler+0x4c>)
 80023ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80023cc:	4a10      	ldr	r2, [pc, #64]	; (8002410 <TIM1_BRK_TIM15_IRQHandler+0x50>)
 80023ce:	8812      	ldrh	r2, [r2, #0]
 80023d0:	4293      	cmp	r3, r2
 80023d2:	d305      	bcc.n	80023e0 <TIM1_BRK_TIM15_IRQHandler+0x20>
 80023d4:	4b0d      	ldr	r3, [pc, #52]	; (800240c <TIM1_BRK_TIM15_IRQHandler+0x4c>)
 80023d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80023d8:	4a0d      	ldr	r2, [pc, #52]	; (8002410 <TIM1_BRK_TIM15_IRQHandler+0x50>)
 80023da:	8812      	ldrh	r2, [r2, #0]
 80023dc:	4293      	cmp	r3, r2
 80023de:	d907      	bls.n	80023f0 <TIM1_BRK_TIM15_IRQHandler+0x30>
	{
		EM_SetEncoderValue(TIM1->CNT);
 80023e0:	4b0a      	ldr	r3, [pc, #40]	; (800240c <TIM1_BRK_TIM15_IRQHandler+0x4c>)
 80023e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80023e4:	4618      	mov	r0, r3
 80023e6:	f7fe fd09 	bl	8000dfc <EM_SetEncoderValue>
		EM_SetNewEvent(evEncoderSet);
 80023ea:	2005      	movs	r0, #5
 80023ec:	f7fe fcde 	bl	8000dac <EM_SetNewEvent>

	}
	last_enc_value = TIM1->CNT;
 80023f0:	4b06      	ldr	r3, [pc, #24]	; (800240c <TIM1_BRK_TIM15_IRQHandler+0x4c>)
 80023f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80023f4:	b29a      	uxth	r2, r3
 80023f6:	4b06      	ldr	r3, [pc, #24]	; (8002410 <TIM1_BRK_TIM15_IRQHandler+0x50>)
 80023f8:	801a      	strh	r2, [r3, #0]

  /* USER CODE END TIM1_BRK_TIM15_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 80023fa:	4806      	ldr	r0, [pc, #24]	; (8002414 <TIM1_BRK_TIM15_IRQHandler+0x54>)
 80023fc:	f004 fe8f 	bl	800711e <HAL_TIM_IRQHandler>
  HAL_TIM_IRQHandler(&htim15);
 8002400:	4805      	ldr	r0, [pc, #20]	; (8002418 <TIM1_BRK_TIM15_IRQHandler+0x58>)
 8002402:	f004 fe8c 	bl	800711e <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_BRK_TIM15_IRQn 1 */

  /* USER CODE END TIM1_BRK_TIM15_IRQn 1 */
}
 8002406:	bf00      	nop
 8002408:	bd80      	pop	{r7, pc}
 800240a:	bf00      	nop
 800240c:	40012c00 	.word	0x40012c00
 8002410:	20000bf8 	.word	0x20000bf8
 8002414:	20000f80 	.word	0x20000f80
 8002418:	20000e9c 	.word	0x20000e9c

0800241c <TIM1_UP_TIM16_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM16 global interrupt.
  */
void TIM1_UP_TIM16_IRQHandler(void)
{
 800241c:	b580      	push	{r7, lr}
 800241e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 0 */
	snprintf(control_pressed, sizeof(control_pressed), " ");
 8002420:	4a05      	ldr	r2, [pc, #20]	; (8002438 <TIM1_UP_TIM16_IRQHandler+0x1c>)
 8002422:	4b06      	ldr	r3, [pc, #24]	; (800243c <TIM1_UP_TIM16_IRQHandler+0x20>)
 8002424:	881b      	ldrh	r3, [r3, #0]
 8002426:	8013      	strh	r3, [r2, #0]
  /* USER CODE END TIM1_UP_TIM16_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8002428:	4805      	ldr	r0, [pc, #20]	; (8002440 <TIM1_UP_TIM16_IRQHandler+0x24>)
 800242a:	f004 fe78 	bl	800711e <HAL_TIM_IRQHandler>
  HAL_TIM_IRQHandler(&htim16);
 800242e:	4805      	ldr	r0, [pc, #20]	; (8002444 <TIM1_UP_TIM16_IRQHandler+0x28>)
 8002430:	f004 fe75 	bl	800711e <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 1 */
}
 8002434:	bf00      	nop
 8002436:	bd80      	pop	{r7, pc}
 8002438:	20000c08 	.word	0x20000c08
 800243c:	0800a4c8 	.word	0x0800a4c8
 8002440:	20000f80 	.word	0x20000f80
 8002444:	20001018 	.word	0x20001018

08002448 <TIM1_TRG_COM_TIM17_IRQHandler>:

/**
  * @brief This function handles TIM1 trigger and commutation interrupts and TIM17 global interrupt.
  */
void TIM1_TRG_COM_TIM17_IRQHandler(void)
{
 8002448:	b580      	push	{r7, lr}
 800244a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_TRG_COM_TIM17_IRQn 0 */
	update_dc_bias_sweep();
 800244c:	f7ff f962 	bl	8001714 <update_dc_bias_sweep>




  /* USER CODE END TIM1_TRG_COM_TIM17_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8002450:	4803      	ldr	r0, [pc, #12]	; (8002460 <TIM1_TRG_COM_TIM17_IRQHandler+0x18>)
 8002452:	f004 fe64 	bl	800711e <HAL_TIM_IRQHandler>
  HAL_TIM_IRQHandler(&htim17);
 8002456:	4803      	ldr	r0, [pc, #12]	; (8002464 <TIM1_TRG_COM_TIM17_IRQHandler+0x1c>)
 8002458:	f004 fe61 	bl	800711e <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_TRG_COM_TIM17_IRQn 1 */

  /* USER CODE END TIM1_TRG_COM_TIM17_IRQn 1 */
}
 800245c:	bf00      	nop
 800245e:	bd80      	pop	{r7, pc}
 8002460:	20000f80 	.word	0x20000f80
 8002464:	20000ee8 	.word	0x20000ee8

08002468 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8002468:	b580      	push	{r7, lr}
 800246a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 800246c:	4802      	ldr	r0, [pc, #8]	; (8002478 <TIM2_IRQHandler+0x10>)
 800246e:	f004 fe56 	bl	800711e <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8002472:	bf00      	nop
 8002474:	bd80      	pop	{r7, pc}
 8002476:	bf00      	nop
 8002478:	20000fcc 	.word	0x20000fcc

0800247c <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 800247c:	b580      	push	{r7, lr}
 800247e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

	if(HAL_GPIO_ReadPin(BTN1_EXTI14_GPIO_Port, BTN1_EXTI14_Pin))
 8002480:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8002484:	4815      	ldr	r0, [pc, #84]	; (80024dc <EXTI15_10_IRQHandler+0x60>)
 8002486:	f003 f97d 	bl	8005784 <HAL_GPIO_ReadPin>
 800248a:	4603      	mov	r3, r0
 800248c:	2b00      	cmp	r3, #0
 800248e:	d002      	beq.n	8002496 <EXTI15_10_IRQHandler+0x1a>
	{
		EM_SetNewEvent(evGainMenu);
 8002490:	2003      	movs	r0, #3
 8002492:	f7fe fc8b 	bl	8000dac <EM_SetNewEvent>
		//snprintf(control_pressed, sizeof(control_pressed), "BTN1");
		//printf("BTN1_EXTI14_Pin\n");
	}
	if(HAL_GPIO_ReadPin(BTN2_EXTI15_GPIO_Port, BTN2_EXTI15_Pin))
 8002496:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800249a:	4810      	ldr	r0, [pc, #64]	; (80024dc <EXTI15_10_IRQHandler+0x60>)
 800249c:	f003 f972 	bl	8005784 <HAL_GPIO_ReadPin>
 80024a0:	4603      	mov	r3, r0
 80024a2:	2b00      	cmp	r3, #0
 80024a4:	d002      	beq.n	80024ac <EXTI15_10_IRQHandler+0x30>
	{
		EM_SetNewEvent(evFuncMenu);
 80024a6:	2001      	movs	r0, #1
 80024a8:	f7fe fc80 	bl	8000dac <EM_SetNewEvent>
		//snprintf(control_pressed, sizeof(control_pressed), "BTN2");
		//printf("BTN2_EXTI15_Pin\n");
	}

  /* USER CODE END EXTI15_10_IRQn 0 */
  if (LL_EXTI_IsActiveFlag_0_31(LL_EXTI_LINE_14) != RESET)
 80024ac:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 80024b0:	f7ff fee4 	bl	800227c <LL_EXTI_IsActiveFlag_0_31>
 80024b4:	4603      	mov	r3, r0
 80024b6:	2b00      	cmp	r3, #0
 80024b8:	d003      	beq.n	80024c2 <EXTI15_10_IRQHandler+0x46>
  {
    LL_EXTI_ClearFlag_0_31(LL_EXTI_LINE_14);
 80024ba:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 80024be:	f7ff fef3 	bl	80022a8 <LL_EXTI_ClearFlag_0_31>
    /* USER CODE BEGIN LL_EXTI_LINE_14 */
    
    /* USER CODE END LL_EXTI_LINE_14 */
  }
  if (LL_EXTI_IsActiveFlag_0_31(LL_EXTI_LINE_15) != RESET)
 80024c2:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 80024c6:	f7ff fed9 	bl	800227c <LL_EXTI_IsActiveFlag_0_31>
 80024ca:	4603      	mov	r3, r0
 80024cc:	2b00      	cmp	r3, #0
 80024ce:	d003      	beq.n	80024d8 <EXTI15_10_IRQHandler+0x5c>
  {
    LL_EXTI_ClearFlag_0_31(LL_EXTI_LINE_15);
 80024d0:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 80024d4:	f7ff fee8 	bl	80022a8 <LL_EXTI_ClearFlag_0_31>
    /* USER CODE END LL_EXTI_LINE_15 */
  }
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 80024d8:	bf00      	nop
 80024da:	bd80      	pop	{r7, pc}
 80024dc:	48000800 	.word	0x48000800

080024e0 <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80024e0:	b580      	push	{r7, lr}
 80024e2:	b086      	sub	sp, #24
 80024e4:	af00      	add	r7, sp, #0
 80024e6:	60f8      	str	r0, [r7, #12]
 80024e8:	60b9      	str	r1, [r7, #8]
 80024ea:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80024ec:	2300      	movs	r3, #0
 80024ee:	617b      	str	r3, [r7, #20]
 80024f0:	e00a      	b.n	8002508 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 80024f2:	f3af 8000 	nop.w
 80024f6:	4601      	mov	r1, r0
 80024f8:	68bb      	ldr	r3, [r7, #8]
 80024fa:	1c5a      	adds	r2, r3, #1
 80024fc:	60ba      	str	r2, [r7, #8]
 80024fe:	b2ca      	uxtb	r2, r1
 8002500:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002502:	697b      	ldr	r3, [r7, #20]
 8002504:	3301      	adds	r3, #1
 8002506:	617b      	str	r3, [r7, #20]
 8002508:	697a      	ldr	r2, [r7, #20]
 800250a:	687b      	ldr	r3, [r7, #4]
 800250c:	429a      	cmp	r2, r3
 800250e:	dbf0      	blt.n	80024f2 <_read+0x12>
	}

return len;
 8002510:	687b      	ldr	r3, [r7, #4]
}
 8002512:	4618      	mov	r0, r3
 8002514:	3718      	adds	r7, #24
 8002516:	46bd      	mov	sp, r7
 8002518:	bd80      	pop	{r7, pc}

0800251a <_close>:
	}
	return len;
}

int _close(int file)
{
 800251a:	b480      	push	{r7}
 800251c:	b083      	sub	sp, #12
 800251e:	af00      	add	r7, sp, #0
 8002520:	6078      	str	r0, [r7, #4]
	return -1;
 8002522:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8002526:	4618      	mov	r0, r3
 8002528:	370c      	adds	r7, #12
 800252a:	46bd      	mov	sp, r7
 800252c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002530:	4770      	bx	lr

08002532 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8002532:	b480      	push	{r7}
 8002534:	b083      	sub	sp, #12
 8002536:	af00      	add	r7, sp, #0
 8002538:	6078      	str	r0, [r7, #4]
 800253a:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 800253c:	683b      	ldr	r3, [r7, #0]
 800253e:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8002542:	605a      	str	r2, [r3, #4]
	return 0;
 8002544:	2300      	movs	r3, #0
}
 8002546:	4618      	mov	r0, r3
 8002548:	370c      	adds	r7, #12
 800254a:	46bd      	mov	sp, r7
 800254c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002550:	4770      	bx	lr

08002552 <_isatty>:

int _isatty(int file)
{
 8002552:	b480      	push	{r7}
 8002554:	b083      	sub	sp, #12
 8002556:	af00      	add	r7, sp, #0
 8002558:	6078      	str	r0, [r7, #4]
	return 1;
 800255a:	2301      	movs	r3, #1
}
 800255c:	4618      	mov	r0, r3
 800255e:	370c      	adds	r7, #12
 8002560:	46bd      	mov	sp, r7
 8002562:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002566:	4770      	bx	lr

08002568 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8002568:	b480      	push	{r7}
 800256a:	b085      	sub	sp, #20
 800256c:	af00      	add	r7, sp, #0
 800256e:	60f8      	str	r0, [r7, #12]
 8002570:	60b9      	str	r1, [r7, #8]
 8002572:	607a      	str	r2, [r7, #4]
	return 0;
 8002574:	2300      	movs	r3, #0
}
 8002576:	4618      	mov	r0, r3
 8002578:	3714      	adds	r7, #20
 800257a:	46bd      	mov	sp, r7
 800257c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002580:	4770      	bx	lr
	...

08002584 <_sbrk>:
/**
 _sbrk
 Increase program data space. Malloc and related functions depend on this
**/
caddr_t _sbrk(int incr)
{
 8002584:	b580      	push	{r7, lr}
 8002586:	b084      	sub	sp, #16
 8002588:	af00      	add	r7, sp, #0
 800258a:	6078      	str	r0, [r7, #4]
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 800258c:	4b11      	ldr	r3, [pc, #68]	; (80025d4 <_sbrk+0x50>)
 800258e:	681b      	ldr	r3, [r3, #0]
 8002590:	2b00      	cmp	r3, #0
 8002592:	d102      	bne.n	800259a <_sbrk+0x16>
		heap_end = &end;
 8002594:	4b0f      	ldr	r3, [pc, #60]	; (80025d4 <_sbrk+0x50>)
 8002596:	4a10      	ldr	r2, [pc, #64]	; (80025d8 <_sbrk+0x54>)
 8002598:	601a      	str	r2, [r3, #0]

	prev_heap_end = heap_end;
 800259a:	4b0e      	ldr	r3, [pc, #56]	; (80025d4 <_sbrk+0x50>)
 800259c:	681b      	ldr	r3, [r3, #0]
 800259e:	60fb      	str	r3, [r7, #12]
	if (heap_end + incr > stack_ptr)
 80025a0:	4b0c      	ldr	r3, [pc, #48]	; (80025d4 <_sbrk+0x50>)
 80025a2:	681a      	ldr	r2, [r3, #0]
 80025a4:	687b      	ldr	r3, [r7, #4]
 80025a6:	4413      	add	r3, r2
 80025a8:	466a      	mov	r2, sp
 80025aa:	4293      	cmp	r3, r2
 80025ac:	d907      	bls.n	80025be <_sbrk+0x3a>
	{
		errno = ENOMEM;
 80025ae:	f006 fe51 	bl	8009254 <__errno>
 80025b2:	4602      	mov	r2, r0
 80025b4:	230c      	movs	r3, #12
 80025b6:	6013      	str	r3, [r2, #0]
		return (caddr_t) -1;
 80025b8:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80025bc:	e006      	b.n	80025cc <_sbrk+0x48>
	}

	heap_end += incr;
 80025be:	4b05      	ldr	r3, [pc, #20]	; (80025d4 <_sbrk+0x50>)
 80025c0:	681a      	ldr	r2, [r3, #0]
 80025c2:	687b      	ldr	r3, [r7, #4]
 80025c4:	4413      	add	r3, r2
 80025c6:	4a03      	ldr	r2, [pc, #12]	; (80025d4 <_sbrk+0x50>)
 80025c8:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap_end;
 80025ca:	68fb      	ldr	r3, [r7, #12]
}
 80025cc:	4618      	mov	r0, r3
 80025ce:	3710      	adds	r7, #16
 80025d0:	46bd      	mov	sp, r7
 80025d2:	bd80      	pop	{r7, pc}
 80025d4:	20000bfc 	.word	0x20000bfc
 80025d8:	20001070 	.word	0x20001070

080025dc <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 80025dc:	b480      	push	{r7}
 80025de:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 80025e0:	4b08      	ldr	r3, [pc, #32]	; (8002604 <SystemInit+0x28>)
 80025e2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80025e6:	4a07      	ldr	r2, [pc, #28]	; (8002604 <SystemInit+0x28>)
 80025e8:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80025ec:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 80025f0:	4b04      	ldr	r3, [pc, #16]	; (8002604 <SystemInit+0x28>)
 80025f2:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80025f6:	609a      	str	r2, [r3, #8]
#endif
}
 80025f8:	bf00      	nop
 80025fa:	46bd      	mov	sp, r7
 80025fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002600:	4770      	bx	lr
 8002602:	bf00      	nop
 8002604:	e000ed00 	.word	0xe000ed00

08002608 <MX_TIM1_Init>:
TIM_HandleTypeDef htim16;
TIM_HandleTypeDef htim17;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 8002608:	b580      	push	{r7, lr}
 800260a:	b09a      	sub	sp, #104	; 0x68
 800260c:	af00      	add	r7, sp, #0
  TIM_Encoder_InitTypeDef sConfig = {0};
 800260e:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8002612:	2224      	movs	r2, #36	; 0x24
 8002614:	2100      	movs	r1, #0
 8002616:	4618      	mov	r0, r3
 8002618:	f006 fe46 	bl	80092a8 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800261c:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8002620:	2200      	movs	r2, #0
 8002622:	601a      	str	r2, [r3, #0]
 8002624:	605a      	str	r2, [r3, #4]
 8002626:	609a      	str	r2, [r3, #8]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8002628:	1d3b      	adds	r3, r7, #4
 800262a:	2234      	movs	r2, #52	; 0x34
 800262c:	2100      	movs	r1, #0
 800262e:	4618      	mov	r0, r3
 8002630:	f006 fe3a 	bl	80092a8 <memset>

  htim1.Instance = TIM1;
 8002634:	4b2a      	ldr	r3, [pc, #168]	; (80026e0 <MX_TIM1_Init+0xd8>)
 8002636:	4a2b      	ldr	r2, [pc, #172]	; (80026e4 <MX_TIM1_Init+0xdc>)
 8002638:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 800263a:	4b29      	ldr	r3, [pc, #164]	; (80026e0 <MX_TIM1_Init+0xd8>)
 800263c:	2200      	movs	r2, #0
 800263e:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_CENTERALIGNED2;
 8002640:	4b27      	ldr	r3, [pc, #156]	; (80026e0 <MX_TIM1_Init+0xd8>)
 8002642:	2240      	movs	r2, #64	; 0x40
 8002644:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 1024;
 8002646:	4b26      	ldr	r3, [pc, #152]	; (80026e0 <MX_TIM1_Init+0xd8>)
 8002648:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800264c:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800264e:	4b24      	ldr	r3, [pc, #144]	; (80026e0 <MX_TIM1_Init+0xd8>)
 8002650:	2200      	movs	r2, #0
 8002652:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8002654:	4b22      	ldr	r3, [pc, #136]	; (80026e0 <MX_TIM1_Init+0xd8>)
 8002656:	2200      	movs	r2, #0
 8002658:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800265a:	4b21      	ldr	r3, [pc, #132]	; (80026e0 <MX_TIM1_Init+0xd8>)
 800265c:	2200      	movs	r2, #0
 800265e:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 8002660:	2303      	movs	r3, #3
 8002662:	647b      	str	r3, [r7, #68]	; 0x44
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8002664:	2300      	movs	r3, #0
 8002666:	64bb      	str	r3, [r7, #72]	; 0x48
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8002668:	2301      	movs	r3, #1
 800266a:	64fb      	str	r3, [r7, #76]	; 0x4c
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 800266c:	2300      	movs	r3, #0
 800266e:	653b      	str	r3, [r7, #80]	; 0x50
  sConfig.IC1Filter = 0;
 8002670:	2300      	movs	r3, #0
 8002672:	657b      	str	r3, [r7, #84]	; 0x54
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8002674:	2300      	movs	r3, #0
 8002676:	65bb      	str	r3, [r7, #88]	; 0x58
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8002678:	2301      	movs	r3, #1
 800267a:	65fb      	str	r3, [r7, #92]	; 0x5c
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 800267c:	2300      	movs	r3, #0
 800267e:	663b      	str	r3, [r7, #96]	; 0x60
  sConfig.IC2Filter = 0;
 8002680:	2300      	movs	r3, #0
 8002682:	667b      	str	r3, [r7, #100]	; 0x64
  if (HAL_TIM_Encoder_Init(&htim1, &sConfig) != HAL_OK)
 8002684:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8002688:	4619      	mov	r1, r3
 800268a:	4815      	ldr	r0, [pc, #84]	; (80026e0 <MX_TIM1_Init+0xd8>)
 800268c:	f004 fca1 	bl	8006fd2 <HAL_TIM_Encoder_Init>
 8002690:	4603      	mov	r3, r0
 8002692:	2b00      	cmp	r3, #0
 8002694:	d001      	beq.n	800269a <MX_TIM1_Init+0x92>
  {
    Error_Handler();
 8002696:	f7ff fcfd 	bl	8002094 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800269a:	2300      	movs	r3, #0
 800269c:	63bb      	str	r3, [r7, #56]	; 0x38
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 800269e:	2300      	movs	r3, #0
 80026a0:	63fb      	str	r3, [r7, #60]	; 0x3c
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80026a2:	2300      	movs	r3, #0
 80026a4:	643b      	str	r3, [r7, #64]	; 0x40
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 80026a6:	f107 0338 	add.w	r3, r7, #56	; 0x38
 80026aa:	4619      	mov	r1, r3
 80026ac:	480c      	ldr	r0, [pc, #48]	; (80026e0 <MX_TIM1_Init+0xd8>)
 80026ae:	f005 fa19 	bl	8007ae4 <HAL_TIMEx_MasterConfigSynchronization>
 80026b2:	4603      	mov	r3, r0
 80026b4:	2b00      	cmp	r3, #0
 80026b6:	d001      	beq.n	80026bc <MX_TIM1_Init+0xb4>
  {
    Error_Handler();
 80026b8:	f7ff fcec 	bl	8002094 <Error_Handler>
  }
  sBreakDeadTimeConfig.BreakAFMode = TIM_BREAK_AFMODE_INPUT;
 80026bc:	2300      	movs	r3, #0
 80026be:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2AFMode = TIM_BREAK_AFMODE_INPUT;
 80026c0:	2300      	movs	r3, #0
 80026c2:	633b      	str	r3, [r7, #48]	; 0x30
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 80026c4:	1d3b      	adds	r3, r7, #4
 80026c6:	4619      	mov	r1, r3
 80026c8:	4805      	ldr	r0, [pc, #20]	; (80026e0 <MX_TIM1_Init+0xd8>)
 80026ca:	f005 faa1 	bl	8007c10 <HAL_TIMEx_ConfigBreakDeadTime>
 80026ce:	4603      	mov	r3, r0
 80026d0:	2b00      	cmp	r3, #0
 80026d2:	d001      	beq.n	80026d8 <MX_TIM1_Init+0xd0>
  {
    Error_Handler();
 80026d4:	f7ff fcde 	bl	8002094 <Error_Handler>
  }

}
 80026d8:	bf00      	nop
 80026da:	3768      	adds	r7, #104	; 0x68
 80026dc:	46bd      	mov	sp, r7
 80026de:	bd80      	pop	{r7, pc}
 80026e0:	20000f80 	.word	0x20000f80
 80026e4:	40012c00 	.word	0x40012c00

080026e8 <MX_TIM2_Init>:
/* TIM2 init function */
void MX_TIM2_Init(void)
{
 80026e8:	b580      	push	{r7, lr}
 80026ea:	b08c      	sub	sp, #48	; 0x30
 80026ec:	af00      	add	r7, sp, #0
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80026ee:	f107 0320 	add.w	r3, r7, #32
 80026f2:	2200      	movs	r2, #0
 80026f4:	601a      	str	r2, [r3, #0]
 80026f6:	605a      	str	r2, [r3, #4]
 80026f8:	609a      	str	r2, [r3, #8]
 80026fa:	60da      	str	r2, [r3, #12]
  TIM_SlaveConfigTypeDef sSlaveConfig = {0};
 80026fc:	f107 030c 	add.w	r3, r7, #12
 8002700:	2200      	movs	r2, #0
 8002702:	601a      	str	r2, [r3, #0]
 8002704:	605a      	str	r2, [r3, #4]
 8002706:	609a      	str	r2, [r3, #8]
 8002708:	60da      	str	r2, [r3, #12]
 800270a:	611a      	str	r2, [r3, #16]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800270c:	463b      	mov	r3, r7
 800270e:	2200      	movs	r2, #0
 8002710:	601a      	str	r2, [r3, #0]
 8002712:	605a      	str	r2, [r3, #4]
 8002714:	609a      	str	r2, [r3, #8]

  htim2.Instance = TIM2;
 8002716:	4b28      	ldr	r3, [pc, #160]	; (80027b8 <MX_TIM2_Init+0xd0>)
 8002718:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800271c:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 2047;
 800271e:	4b26      	ldr	r3, [pc, #152]	; (80027b8 <MX_TIM2_Init+0xd0>)
 8002720:	f240 72ff 	movw	r2, #2047	; 0x7ff
 8002724:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002726:	4b24      	ldr	r3, [pc, #144]	; (80027b8 <MX_TIM2_Init+0xd0>)
 8002728:	2200      	movs	r2, #0
 800272a:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 1024;
 800272c:	4b22      	ldr	r3, [pc, #136]	; (80027b8 <MX_TIM2_Init+0xd0>)
 800272e:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002732:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002734:	4b20      	ldr	r3, [pc, #128]	; (80027b8 <MX_TIM2_Init+0xd0>)
 8002736:	2200      	movs	r2, #0
 8002738:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800273a:	4b1f      	ldr	r3, [pc, #124]	; (80027b8 <MX_TIM2_Init+0xd0>)
 800273c:	2200      	movs	r2, #0
 800273e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8002740:	481d      	ldr	r0, [pc, #116]	; (80027b8 <MX_TIM2_Init+0xd0>)
 8002742:	f004 fb5c 	bl	8006dfe <HAL_TIM_Base_Init>
 8002746:	4603      	mov	r3, r0
 8002748:	2b00      	cmp	r3, #0
 800274a:	d001      	beq.n	8002750 <MX_TIM2_Init+0x68>
  {
    Error_Handler();
 800274c:	f7ff fca2 	bl	8002094 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002750:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002754:	623b      	str	r3, [r7, #32]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8002756:	f107 0320 	add.w	r3, r7, #32
 800275a:	4619      	mov	r1, r3
 800275c:	4816      	ldr	r0, [pc, #88]	; (80027b8 <MX_TIM2_Init+0xd0>)
 800275e:	f004 fe5d 	bl	800741c <HAL_TIM_ConfigClockSource>
 8002762:	4603      	mov	r3, r0
 8002764:	2b00      	cmp	r3, #0
 8002766:	d001      	beq.n	800276c <MX_TIM2_Init+0x84>
  {
    Error_Handler();
 8002768:	f7ff fc94 	bl	8002094 <Error_Handler>
  }
  sSlaveConfig.SlaveMode = TIM_SLAVEMODE_GATED;
 800276c:	2305      	movs	r3, #5
 800276e:	60fb      	str	r3, [r7, #12]
  sSlaveConfig.InputTrigger = TIM_TS_TI1FP1;
 8002770:	2350      	movs	r3, #80	; 0x50
 8002772:	613b      	str	r3, [r7, #16]
  sSlaveConfig.TriggerPolarity = TIM_TRIGGERPOLARITY_RISING;
 8002774:	2300      	movs	r3, #0
 8002776:	617b      	str	r3, [r7, #20]
  sSlaveConfig.TriggerFilter = 0;
 8002778:	2300      	movs	r3, #0
 800277a:	61fb      	str	r3, [r7, #28]
  if (HAL_TIM_SlaveConfigSynchro(&htim2, &sSlaveConfig) != HAL_OK)
 800277c:	f107 030c 	add.w	r3, r7, #12
 8002780:	4619      	mov	r1, r3
 8002782:	480d      	ldr	r0, [pc, #52]	; (80027b8 <MX_TIM2_Init+0xd0>)
 8002784:	f004 ff3a 	bl	80075fc <HAL_TIM_SlaveConfigSynchro>
 8002788:	4603      	mov	r3, r0
 800278a:	2b00      	cmp	r3, #0
 800278c:	d001      	beq.n	8002792 <MX_TIM2_Init+0xaa>
  {
    Error_Handler();
 800278e:	f7ff fc81 	bl	8002094 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002792:	2300      	movs	r3, #0
 8002794:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002796:	2300      	movs	r3, #0
 8002798:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 800279a:	463b      	mov	r3, r7
 800279c:	4619      	mov	r1, r3
 800279e:	4806      	ldr	r0, [pc, #24]	; (80027b8 <MX_TIM2_Init+0xd0>)
 80027a0:	f005 f9a0 	bl	8007ae4 <HAL_TIMEx_MasterConfigSynchronization>
 80027a4:	4603      	mov	r3, r0
 80027a6:	2b00      	cmp	r3, #0
 80027a8:	d001      	beq.n	80027ae <MX_TIM2_Init+0xc6>
  {
    Error_Handler();
 80027aa:	f7ff fc73 	bl	8002094 <Error_Handler>
  }

}
 80027ae:	bf00      	nop
 80027b0:	3730      	adds	r7, #48	; 0x30
 80027b2:	46bd      	mov	sp, r7
 80027b4:	bd80      	pop	{r7, pc}
 80027b6:	bf00      	nop
 80027b8:	20000fcc 	.word	0x20000fcc

080027bc <MX_TIM5_Init>:
/* TIM5 init function */
void MX_TIM5_Init(void)
{
 80027bc:	b580      	push	{r7, lr}
 80027be:	b088      	sub	sp, #32
 80027c0:	af00      	add	r7, sp, #0
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80027c2:	f107 0310 	add.w	r3, r7, #16
 80027c6:	2200      	movs	r2, #0
 80027c8:	601a      	str	r2, [r3, #0]
 80027ca:	605a      	str	r2, [r3, #4]
 80027cc:	609a      	str	r2, [r3, #8]
 80027ce:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80027d0:	1d3b      	adds	r3, r7, #4
 80027d2:	2200      	movs	r2, #0
 80027d4:	601a      	str	r2, [r3, #0]
 80027d6:	605a      	str	r2, [r3, #4]
 80027d8:	609a      	str	r2, [r3, #8]

  htim5.Instance = TIM5;
 80027da:	4b1e      	ldr	r3, [pc, #120]	; (8002854 <MX_TIM5_Init+0x98>)
 80027dc:	4a1e      	ldr	r2, [pc, #120]	; (8002858 <MX_TIM5_Init+0x9c>)
 80027de:	601a      	str	r2, [r3, #0]
  htim5.Init.Prescaler = 65535;
 80027e0:	4b1c      	ldr	r3, [pc, #112]	; (8002854 <MX_TIM5_Init+0x98>)
 80027e2:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80027e6:	605a      	str	r2, [r3, #4]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 80027e8:	4b1a      	ldr	r3, [pc, #104]	; (8002854 <MX_TIM5_Init+0x98>)
 80027ea:	2200      	movs	r2, #0
 80027ec:	609a      	str	r2, [r3, #8]
  htim5.Init.Period = 65535;
 80027ee:	4b19      	ldr	r3, [pc, #100]	; (8002854 <MX_TIM5_Init+0x98>)
 80027f0:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80027f4:	60da      	str	r2, [r3, #12]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV4;
 80027f6:	4b17      	ldr	r3, [pc, #92]	; (8002854 <MX_TIM5_Init+0x98>)
 80027f8:	f44f 7200 	mov.w	r2, #512	; 0x200
 80027fc:	611a      	str	r2, [r3, #16]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80027fe:	4b15      	ldr	r3, [pc, #84]	; (8002854 <MX_TIM5_Init+0x98>)
 8002800:	2200      	movs	r2, #0
 8002802:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim5) != HAL_OK)
 8002804:	4813      	ldr	r0, [pc, #76]	; (8002854 <MX_TIM5_Init+0x98>)
 8002806:	f004 fafa 	bl	8006dfe <HAL_TIM_Base_Init>
 800280a:	4603      	mov	r3, r0
 800280c:	2b00      	cmp	r3, #0
 800280e:	d001      	beq.n	8002814 <MX_TIM5_Init+0x58>
  {
    Error_Handler();
 8002810:	f7ff fc40 	bl	8002094 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002814:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002818:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim5, &sClockSourceConfig) != HAL_OK)
 800281a:	f107 0310 	add.w	r3, r7, #16
 800281e:	4619      	mov	r1, r3
 8002820:	480c      	ldr	r0, [pc, #48]	; (8002854 <MX_TIM5_Init+0x98>)
 8002822:	f004 fdfb 	bl	800741c <HAL_TIM_ConfigClockSource>
 8002826:	4603      	mov	r3, r0
 8002828:	2b00      	cmp	r3, #0
 800282a:	d001      	beq.n	8002830 <MX_TIM5_Init+0x74>
  {
    Error_Handler();
 800282c:	f7ff fc32 	bl	8002094 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002830:	2300      	movs	r3, #0
 8002832:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002834:	2300      	movs	r3, #0
 8002836:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 8002838:	1d3b      	adds	r3, r7, #4
 800283a:	4619      	mov	r1, r3
 800283c:	4805      	ldr	r0, [pc, #20]	; (8002854 <MX_TIM5_Init+0x98>)
 800283e:	f005 f951 	bl	8007ae4 <HAL_TIMEx_MasterConfigSynchronization>
 8002842:	4603      	mov	r3, r0
 8002844:	2b00      	cmp	r3, #0
 8002846:	d001      	beq.n	800284c <MX_TIM5_Init+0x90>
  {
    Error_Handler();
 8002848:	f7ff fc24 	bl	8002094 <Error_Handler>
  }

}
 800284c:	bf00      	nop
 800284e:	3720      	adds	r7, #32
 8002850:	46bd      	mov	sp, r7
 8002852:	bd80      	pop	{r7, pc}
 8002854:	20000f34 	.word	0x20000f34
 8002858:	40000c00 	.word	0x40000c00

0800285c <MX_TIM8_Init>:
/* TIM8 init function */
void MX_TIM8_Init(void)
{
 800285c:	b580      	push	{r7, lr}
 800285e:	b094      	sub	sp, #80	; 0x50
 8002860:	af00      	add	r7, sp, #0
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8002862:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8002866:	2200      	movs	r2, #0
 8002868:	601a      	str	r2, [r3, #0]
 800286a:	605a      	str	r2, [r3, #4]
 800286c:	609a      	str	r2, [r3, #8]
 800286e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002870:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8002874:	2200      	movs	r2, #0
 8002876:	601a      	str	r2, [r3, #0]
 8002878:	605a      	str	r2, [r3, #4]
 800287a:	609a      	str	r2, [r3, #8]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 800287c:	463b      	mov	r3, r7
 800287e:	2234      	movs	r2, #52	; 0x34
 8002880:	2100      	movs	r1, #0
 8002882:	4618      	mov	r0, r3
 8002884:	f006 fd10 	bl	80092a8 <memset>

  htim8.Instance = TIM8;
 8002888:	4b26      	ldr	r3, [pc, #152]	; (8002924 <MX_TIM8_Init+0xc8>)
 800288a:	4a27      	ldr	r2, [pc, #156]	; (8002928 <MX_TIM8_Init+0xcc>)
 800288c:	601a      	str	r2, [r3, #0]
  htim8.Init.Prescaler = 0;
 800288e:	4b25      	ldr	r3, [pc, #148]	; (8002924 <MX_TIM8_Init+0xc8>)
 8002890:	2200      	movs	r2, #0
 8002892:	605a      	str	r2, [r3, #4]
  htim8.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002894:	4b23      	ldr	r3, [pc, #140]	; (8002924 <MX_TIM8_Init+0xc8>)
 8002896:	2200      	movs	r2, #0
 8002898:	609a      	str	r2, [r3, #8]
  htim8.Init.Period = 1;
 800289a:	4b22      	ldr	r3, [pc, #136]	; (8002924 <MX_TIM8_Init+0xc8>)
 800289c:	2201      	movs	r2, #1
 800289e:	60da      	str	r2, [r3, #12]
  htim8.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80028a0:	4b20      	ldr	r3, [pc, #128]	; (8002924 <MX_TIM8_Init+0xc8>)
 80028a2:	2200      	movs	r2, #0
 80028a4:	611a      	str	r2, [r3, #16]
  htim8.Init.RepetitionCounter = 0;
 80028a6:	4b1f      	ldr	r3, [pc, #124]	; (8002924 <MX_TIM8_Init+0xc8>)
 80028a8:	2200      	movs	r2, #0
 80028aa:	615a      	str	r2, [r3, #20]
  htim8.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80028ac:	4b1d      	ldr	r3, [pc, #116]	; (8002924 <MX_TIM8_Init+0xc8>)
 80028ae:	2200      	movs	r2, #0
 80028b0:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim8) != HAL_OK)
 80028b2:	481c      	ldr	r0, [pc, #112]	; (8002924 <MX_TIM8_Init+0xc8>)
 80028b4:	f004 faa3 	bl	8006dfe <HAL_TIM_Base_Init>
 80028b8:	4603      	mov	r3, r0
 80028ba:	2b00      	cmp	r3, #0
 80028bc:	d001      	beq.n	80028c2 <MX_TIM8_Init+0x66>
  {
    Error_Handler();
 80028be:	f7ff fbe9 	bl	8002094 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80028c2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80028c6:	643b      	str	r3, [r7, #64]	; 0x40
  if (HAL_TIM_ConfigClockSource(&htim8, &sClockSourceConfig) != HAL_OK)
 80028c8:	f107 0340 	add.w	r3, r7, #64	; 0x40
 80028cc:	4619      	mov	r1, r3
 80028ce:	4815      	ldr	r0, [pc, #84]	; (8002924 <MX_TIM8_Init+0xc8>)
 80028d0:	f004 fda4 	bl	800741c <HAL_TIM_ConfigClockSource>
 80028d4:	4603      	mov	r3, r0
 80028d6:	2b00      	cmp	r3, #0
 80028d8:	d001      	beq.n	80028de <MX_TIM8_Init+0x82>
  {
    Error_Handler();
 80028da:	f7ff fbdb 	bl	8002094 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 80028de:	2320      	movs	r3, #32
 80028e0:	637b      	str	r3, [r7, #52]	; 0x34
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 80028e2:	2300      	movs	r3, #0
 80028e4:	63bb      	str	r3, [r7, #56]	; 0x38
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80028e6:	2300      	movs	r3, #0
 80028e8:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_TIMEx_MasterConfigSynchronization(&htim8, &sMasterConfig) != HAL_OK)
 80028ea:	f107 0334 	add.w	r3, r7, #52	; 0x34
 80028ee:	4619      	mov	r1, r3
 80028f0:	480c      	ldr	r0, [pc, #48]	; (8002924 <MX_TIM8_Init+0xc8>)
 80028f2:	f005 f8f7 	bl	8007ae4 <HAL_TIMEx_MasterConfigSynchronization>
 80028f6:	4603      	mov	r3, r0
 80028f8:	2b00      	cmp	r3, #0
 80028fa:	d001      	beq.n	8002900 <MX_TIM8_Init+0xa4>
  {
    Error_Handler();
 80028fc:	f7ff fbca 	bl	8002094 <Error_Handler>
  }
  sBreakDeadTimeConfig.BreakAFMode = TIM_BREAK_AFMODE_INPUT;
 8002900:	2300      	movs	r3, #0
 8002902:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.Break2AFMode = TIM_BREAK_AFMODE_INPUT;
 8002904:	2300      	movs	r3, #0
 8002906:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim8, &sBreakDeadTimeConfig) != HAL_OK)
 8002908:	463b      	mov	r3, r7
 800290a:	4619      	mov	r1, r3
 800290c:	4805      	ldr	r0, [pc, #20]	; (8002924 <MX_TIM8_Init+0xc8>)
 800290e:	f005 f97f 	bl	8007c10 <HAL_TIMEx_ConfigBreakDeadTime>
 8002912:	4603      	mov	r3, r0
 8002914:	2b00      	cmp	r3, #0
 8002916:	d001      	beq.n	800291c <MX_TIM8_Init+0xc0>
  {
    Error_Handler();
 8002918:	f7ff fbbc 	bl	8002094 <Error_Handler>
  }

}
 800291c:	bf00      	nop
 800291e:	3750      	adds	r7, #80	; 0x50
 8002920:	46bd      	mov	sp, r7
 8002922:	bd80      	pop	{r7, pc}
 8002924:	20000e50 	.word	0x20000e50
 8002928:	40013400 	.word	0x40013400

0800292c <MX_TIM15_Init>:
/* TIM15 init function */
void MX_TIM15_Init(void)
{
 800292c:	b580      	push	{r7, lr}
 800292e:	b088      	sub	sp, #32
 8002930:	af00      	add	r7, sp, #0
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8002932:	f107 0310 	add.w	r3, r7, #16
 8002936:	2200      	movs	r2, #0
 8002938:	601a      	str	r2, [r3, #0]
 800293a:	605a      	str	r2, [r3, #4]
 800293c:	609a      	str	r2, [r3, #8]
 800293e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002940:	1d3b      	adds	r3, r7, #4
 8002942:	2200      	movs	r2, #0
 8002944:	601a      	str	r2, [r3, #0]
 8002946:	605a      	str	r2, [r3, #4]
 8002948:	609a      	str	r2, [r3, #8]

  htim15.Instance = TIM15;
 800294a:	4b1f      	ldr	r3, [pc, #124]	; (80029c8 <MX_TIM15_Init+0x9c>)
 800294c:	4a1f      	ldr	r2, [pc, #124]	; (80029cc <MX_TIM15_Init+0xa0>)
 800294e:	601a      	str	r2, [r3, #0]
  htim15.Init.Prescaler = 1024;
 8002950:	4b1d      	ldr	r3, [pc, #116]	; (80029c8 <MX_TIM15_Init+0x9c>)
 8002952:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002956:	605a      	str	r2, [r3, #4]
  htim15.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002958:	4b1b      	ldr	r3, [pc, #108]	; (80029c8 <MX_TIM15_Init+0x9c>)
 800295a:	2200      	movs	r2, #0
 800295c:	609a      	str	r2, [r3, #8]
  htim15.Init.Period = 1024;
 800295e:	4b1a      	ldr	r3, [pc, #104]	; (80029c8 <MX_TIM15_Init+0x9c>)
 8002960:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002964:	60da      	str	r2, [r3, #12]
  htim15.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002966:	4b18      	ldr	r3, [pc, #96]	; (80029c8 <MX_TIM15_Init+0x9c>)
 8002968:	2200      	movs	r2, #0
 800296a:	611a      	str	r2, [r3, #16]
  htim15.Init.RepetitionCounter = 0;
 800296c:	4b16      	ldr	r3, [pc, #88]	; (80029c8 <MX_TIM15_Init+0x9c>)
 800296e:	2200      	movs	r2, #0
 8002970:	615a      	str	r2, [r3, #20]
  htim15.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002972:	4b15      	ldr	r3, [pc, #84]	; (80029c8 <MX_TIM15_Init+0x9c>)
 8002974:	2200      	movs	r2, #0
 8002976:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim15) != HAL_OK)
 8002978:	4813      	ldr	r0, [pc, #76]	; (80029c8 <MX_TIM15_Init+0x9c>)
 800297a:	f004 fa40 	bl	8006dfe <HAL_TIM_Base_Init>
 800297e:	4603      	mov	r3, r0
 8002980:	2b00      	cmp	r3, #0
 8002982:	d001      	beq.n	8002988 <MX_TIM15_Init+0x5c>
  {
    Error_Handler();
 8002984:	f7ff fb86 	bl	8002094 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002988:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800298c:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim15, &sClockSourceConfig) != HAL_OK)
 800298e:	f107 0310 	add.w	r3, r7, #16
 8002992:	4619      	mov	r1, r3
 8002994:	480c      	ldr	r0, [pc, #48]	; (80029c8 <MX_TIM15_Init+0x9c>)
 8002996:	f004 fd41 	bl	800741c <HAL_TIM_ConfigClockSource>
 800299a:	4603      	mov	r3, r0
 800299c:	2b00      	cmp	r3, #0
 800299e:	d001      	beq.n	80029a4 <MX_TIM15_Init+0x78>
  {
    Error_Handler();
 80029a0:	f7ff fb78 	bl	8002094 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80029a4:	2300      	movs	r3, #0
 80029a6:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80029a8:	2300      	movs	r3, #0
 80029aa:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim15, &sMasterConfig) != HAL_OK)
 80029ac:	1d3b      	adds	r3, r7, #4
 80029ae:	4619      	mov	r1, r3
 80029b0:	4805      	ldr	r0, [pc, #20]	; (80029c8 <MX_TIM15_Init+0x9c>)
 80029b2:	f005 f897 	bl	8007ae4 <HAL_TIMEx_MasterConfigSynchronization>
 80029b6:	4603      	mov	r3, r0
 80029b8:	2b00      	cmp	r3, #0
 80029ba:	d001      	beq.n	80029c0 <MX_TIM15_Init+0x94>
  {
    Error_Handler();
 80029bc:	f7ff fb6a 	bl	8002094 <Error_Handler>
  }

}
 80029c0:	bf00      	nop
 80029c2:	3720      	adds	r7, #32
 80029c4:	46bd      	mov	sp, r7
 80029c6:	bd80      	pop	{r7, pc}
 80029c8:	20000e9c 	.word	0x20000e9c
 80029cc:	40014000 	.word	0x40014000

080029d0 <MX_TIM16_Init>:
/* TIM16 init function */
void MX_TIM16_Init(void)
{
 80029d0:	b580      	push	{r7, lr}
 80029d2:	af00      	add	r7, sp, #0

  htim16.Instance = TIM16;
 80029d4:	4b0f      	ldr	r3, [pc, #60]	; (8002a14 <MX_TIM16_Init+0x44>)
 80029d6:	4a10      	ldr	r2, [pc, #64]	; (8002a18 <MX_TIM16_Init+0x48>)
 80029d8:	601a      	str	r2, [r3, #0]
  htim16.Init.Prescaler = 0;
 80029da:	4b0e      	ldr	r3, [pc, #56]	; (8002a14 <MX_TIM16_Init+0x44>)
 80029dc:	2200      	movs	r2, #0
 80029de:	605a      	str	r2, [r3, #4]
  htim16.Init.CounterMode = TIM_COUNTERMODE_UP;
 80029e0:	4b0c      	ldr	r3, [pc, #48]	; (8002a14 <MX_TIM16_Init+0x44>)
 80029e2:	2200      	movs	r2, #0
 80029e4:	609a      	str	r2, [r3, #8]
  htim16.Init.Period = 8191;
 80029e6:	4b0b      	ldr	r3, [pc, #44]	; (8002a14 <MX_TIM16_Init+0x44>)
 80029e8:	f641 72ff 	movw	r2, #8191	; 0x1fff
 80029ec:	60da      	str	r2, [r3, #12]
  htim16.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80029ee:	4b09      	ldr	r3, [pc, #36]	; (8002a14 <MX_TIM16_Init+0x44>)
 80029f0:	2200      	movs	r2, #0
 80029f2:	611a      	str	r2, [r3, #16]
  htim16.Init.RepetitionCounter = 0;
 80029f4:	4b07      	ldr	r3, [pc, #28]	; (8002a14 <MX_TIM16_Init+0x44>)
 80029f6:	2200      	movs	r2, #0
 80029f8:	615a      	str	r2, [r3, #20]
  htim16.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80029fa:	4b06      	ldr	r3, [pc, #24]	; (8002a14 <MX_TIM16_Init+0x44>)
 80029fc:	2200      	movs	r2, #0
 80029fe:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim16) != HAL_OK)
 8002a00:	4804      	ldr	r0, [pc, #16]	; (8002a14 <MX_TIM16_Init+0x44>)
 8002a02:	f004 f9fc 	bl	8006dfe <HAL_TIM_Base_Init>
 8002a06:	4603      	mov	r3, r0
 8002a08:	2b00      	cmp	r3, #0
 8002a0a:	d001      	beq.n	8002a10 <MX_TIM16_Init+0x40>
  {
    Error_Handler();
 8002a0c:	f7ff fb42 	bl	8002094 <Error_Handler>
  }

}
 8002a10:	bf00      	nop
 8002a12:	bd80      	pop	{r7, pc}
 8002a14:	20001018 	.word	0x20001018
 8002a18:	40014400 	.word	0x40014400

08002a1c <MX_TIM17_Init>:
/* TIM17 init function */
void MX_TIM17_Init(void)
{
 8002a1c:	b580      	push	{r7, lr}
 8002a1e:	af00      	add	r7, sp, #0

  htim17.Instance = TIM17;
 8002a20:	4b0f      	ldr	r3, [pc, #60]	; (8002a60 <MX_TIM17_Init+0x44>)
 8002a22:	4a10      	ldr	r2, [pc, #64]	; (8002a64 <MX_TIM17_Init+0x48>)
 8002a24:	601a      	str	r2, [r3, #0]
  htim17.Init.Prescaler = 1023;
 8002a26:	4b0e      	ldr	r3, [pc, #56]	; (8002a60 <MX_TIM17_Init+0x44>)
 8002a28:	f240 32ff 	movw	r2, #1023	; 0x3ff
 8002a2c:	605a      	str	r2, [r3, #4]
  htim17.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002a2e:	4b0c      	ldr	r3, [pc, #48]	; (8002a60 <MX_TIM17_Init+0x44>)
 8002a30:	2200      	movs	r2, #0
 8002a32:	609a      	str	r2, [r3, #8]
  htim17.Init.Period = 64;
 8002a34:	4b0a      	ldr	r3, [pc, #40]	; (8002a60 <MX_TIM17_Init+0x44>)
 8002a36:	2240      	movs	r2, #64	; 0x40
 8002a38:	60da      	str	r2, [r3, #12]
  htim17.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002a3a:	4b09      	ldr	r3, [pc, #36]	; (8002a60 <MX_TIM17_Init+0x44>)
 8002a3c:	2200      	movs	r2, #0
 8002a3e:	611a      	str	r2, [r3, #16]
  htim17.Init.RepetitionCounter = 0;
 8002a40:	4b07      	ldr	r3, [pc, #28]	; (8002a60 <MX_TIM17_Init+0x44>)
 8002a42:	2200      	movs	r2, #0
 8002a44:	615a      	str	r2, [r3, #20]
  htim17.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002a46:	4b06      	ldr	r3, [pc, #24]	; (8002a60 <MX_TIM17_Init+0x44>)
 8002a48:	2200      	movs	r2, #0
 8002a4a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim17) != HAL_OK)
 8002a4c:	4804      	ldr	r0, [pc, #16]	; (8002a60 <MX_TIM17_Init+0x44>)
 8002a4e:	f004 f9d6 	bl	8006dfe <HAL_TIM_Base_Init>
 8002a52:	4603      	mov	r3, r0
 8002a54:	2b00      	cmp	r3, #0
 8002a56:	d001      	beq.n	8002a5c <MX_TIM17_Init+0x40>
  {
    Error_Handler();
 8002a58:	f7ff fb1c 	bl	8002094 <Error_Handler>
  }

}
 8002a5c:	bf00      	nop
 8002a5e:	bd80      	pop	{r7, pc}
 8002a60:	20000ee8 	.word	0x20000ee8
 8002a64:	40014800 	.word	0x40014800

08002a68 <HAL_TIM_Encoder_MspInit>:

void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* tim_encoderHandle)
{
 8002a68:	b580      	push	{r7, lr}
 8002a6a:	b08a      	sub	sp, #40	; 0x28
 8002a6c:	af00      	add	r7, sp, #0
 8002a6e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002a70:	f107 0314 	add.w	r3, r7, #20
 8002a74:	2200      	movs	r2, #0
 8002a76:	601a      	str	r2, [r3, #0]
 8002a78:	605a      	str	r2, [r3, #4]
 8002a7a:	609a      	str	r2, [r3, #8]
 8002a7c:	60da      	str	r2, [r3, #12]
 8002a7e:	611a      	str	r2, [r3, #16]
  if(tim_encoderHandle->Instance==TIM1)
 8002a80:	687b      	ldr	r3, [r7, #4]
 8002a82:	681b      	ldr	r3, [r3, #0]
 8002a84:	4a23      	ldr	r2, [pc, #140]	; (8002b14 <HAL_TIM_Encoder_MspInit+0xac>)
 8002a86:	4293      	cmp	r3, r2
 8002a88:	d13f      	bne.n	8002b0a <HAL_TIM_Encoder_MspInit+0xa2>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8002a8a:	4b23      	ldr	r3, [pc, #140]	; (8002b18 <HAL_TIM_Encoder_MspInit+0xb0>)
 8002a8c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002a8e:	4a22      	ldr	r2, [pc, #136]	; (8002b18 <HAL_TIM_Encoder_MspInit+0xb0>)
 8002a90:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8002a94:	6613      	str	r3, [r2, #96]	; 0x60
 8002a96:	4b20      	ldr	r3, [pc, #128]	; (8002b18 <HAL_TIM_Encoder_MspInit+0xb0>)
 8002a98:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002a9a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002a9e:	613b      	str	r3, [r7, #16]
 8002aa0:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002aa2:	4b1d      	ldr	r3, [pc, #116]	; (8002b18 <HAL_TIM_Encoder_MspInit+0xb0>)
 8002aa4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002aa6:	4a1c      	ldr	r2, [pc, #112]	; (8002b18 <HAL_TIM_Encoder_MspInit+0xb0>)
 8002aa8:	f043 0304 	orr.w	r3, r3, #4
 8002aac:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002aae:	4b1a      	ldr	r3, [pc, #104]	; (8002b18 <HAL_TIM_Encoder_MspInit+0xb0>)
 8002ab0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002ab2:	f003 0304 	and.w	r3, r3, #4
 8002ab6:	60fb      	str	r3, [r7, #12]
 8002ab8:	68fb      	ldr	r3, [r7, #12]
    /**TIM1 GPIO Configuration    
    PC0     ------> TIM1_CH1
    PC1     ------> TIM1_CH2 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8002aba:	2303      	movs	r3, #3
 8002abc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002abe:	2302      	movs	r3, #2
 8002ac0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002ac2:	2300      	movs	r3, #0
 8002ac4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002ac6:	2300      	movs	r3, #0
 8002ac8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM1;
 8002aca:	2302      	movs	r3, #2
 8002acc:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002ace:	f107 0314 	add.w	r3, r7, #20
 8002ad2:	4619      	mov	r1, r3
 8002ad4:	4811      	ldr	r0, [pc, #68]	; (8002b1c <HAL_TIM_Encoder_MspInit+0xb4>)
 8002ad6:	f002 fcd3 	bl	8005480 <HAL_GPIO_Init>

    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_BRK_TIM15_IRQn, 0, 0);
 8002ada:	2200      	movs	r2, #0
 8002adc:	2100      	movs	r1, #0
 8002ade:	2018      	movs	r0, #24
 8002ae0:	f001 fdb9 	bl	8004656 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_BRK_TIM15_IRQn);
 8002ae4:	2018      	movs	r0, #24
 8002ae6:	f001 fdd0 	bl	800468a <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM1_UP_TIM16_IRQn, 1, 0);
 8002aea:	2200      	movs	r2, #0
 8002aec:	2101      	movs	r1, #1
 8002aee:	2019      	movs	r0, #25
 8002af0:	f001 fdb1 	bl	8004656 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM16_IRQn);
 8002af4:	2019      	movs	r0, #25
 8002af6:	f001 fdc8 	bl	800468a <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM1_TRG_COM_TIM17_IRQn, 1, 0);
 8002afa:	2200      	movs	r2, #0
 8002afc:	2101      	movs	r1, #1
 8002afe:	201a      	movs	r0, #26
 8002b00:	f001 fda9 	bl	8004656 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_TRG_COM_TIM17_IRQn);
 8002b04:	201a      	movs	r0, #26
 8002b06:	f001 fdc0 	bl	800468a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }
}
 8002b0a:	bf00      	nop
 8002b0c:	3728      	adds	r7, #40	; 0x28
 8002b0e:	46bd      	mov	sp, r7
 8002b10:	bd80      	pop	{r7, pc}
 8002b12:	bf00      	nop
 8002b14:	40012c00 	.word	0x40012c00
 8002b18:	40021000 	.word	0x40021000
 8002b1c:	48000800 	.word	0x48000800

08002b20 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8002b20:	b580      	push	{r7, lr}
 8002b22:	b08e      	sub	sp, #56	; 0x38
 8002b24:	af00      	add	r7, sp, #0
 8002b26:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002b28:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002b2c:	2200      	movs	r2, #0
 8002b2e:	601a      	str	r2, [r3, #0]
 8002b30:	605a      	str	r2, [r3, #4]
 8002b32:	609a      	str	r2, [r3, #8]
 8002b34:	60da      	str	r2, [r3, #12]
 8002b36:	611a      	str	r2, [r3, #16]
  if(tim_baseHandle->Instance==TIM2)
 8002b38:	687b      	ldr	r3, [r7, #4]
 8002b3a:	681b      	ldr	r3, [r3, #0]
 8002b3c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002b40:	d131      	bne.n	8002ba6 <HAL_TIM_Base_MspInit+0x86>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8002b42:	4b53      	ldr	r3, [pc, #332]	; (8002c90 <HAL_TIM_Base_MspInit+0x170>)
 8002b44:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002b46:	4a52      	ldr	r2, [pc, #328]	; (8002c90 <HAL_TIM_Base_MspInit+0x170>)
 8002b48:	f043 0301 	orr.w	r3, r3, #1
 8002b4c:	6593      	str	r3, [r2, #88]	; 0x58
 8002b4e:	4b50      	ldr	r3, [pc, #320]	; (8002c90 <HAL_TIM_Base_MspInit+0x170>)
 8002b50:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002b52:	f003 0301 	and.w	r3, r3, #1
 8002b56:	623b      	str	r3, [r7, #32]
 8002b58:	6a3b      	ldr	r3, [r7, #32]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002b5a:	4b4d      	ldr	r3, [pc, #308]	; (8002c90 <HAL_TIM_Base_MspInit+0x170>)
 8002b5c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002b5e:	4a4c      	ldr	r2, [pc, #304]	; (8002c90 <HAL_TIM_Base_MspInit+0x170>)
 8002b60:	f043 0301 	orr.w	r3, r3, #1
 8002b64:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002b66:	4b4a      	ldr	r3, [pc, #296]	; (8002c90 <HAL_TIM_Base_MspInit+0x170>)
 8002b68:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002b6a:	f003 0301 	and.w	r3, r3, #1
 8002b6e:	61fb      	str	r3, [r7, #28]
 8002b70:	69fb      	ldr	r3, [r7, #28]
    /**TIM2 GPIO Configuration    
    PA0     ------> TIM2_CH1 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8002b72:	2301      	movs	r3, #1
 8002b74:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002b76:	2302      	movs	r3, #2
 8002b78:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002b7a:	2300      	movs	r3, #0
 8002b7c:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002b7e:	2300      	movs	r3, #0
 8002b80:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8002b82:	2301      	movs	r3, #1
 8002b84:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002b86:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002b8a:	4619      	mov	r1, r3
 8002b8c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002b90:	f002 fc76 	bl	8005480 <HAL_GPIO_Init>

    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 1, 0);
 8002b94:	2200      	movs	r2, #0
 8002b96:	2101      	movs	r1, #1
 8002b98:	201c      	movs	r0, #28
 8002b9a:	f001 fd5c 	bl	8004656 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8002b9e:	201c      	movs	r0, #28
 8002ba0:	f001 fd73 	bl	800468a <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(TIM1_TRG_COM_TIM17_IRQn);
  /* USER CODE BEGIN TIM17_MspInit 1 */

  /* USER CODE END TIM17_MspInit 1 */
  }
}
 8002ba4:	e070      	b.n	8002c88 <HAL_TIM_Base_MspInit+0x168>
  else if(tim_baseHandle->Instance==TIM5)
 8002ba6:	687b      	ldr	r3, [r7, #4]
 8002ba8:	681b      	ldr	r3, [r3, #0]
 8002baa:	4a3a      	ldr	r2, [pc, #232]	; (8002c94 <HAL_TIM_Base_MspInit+0x174>)
 8002bac:	4293      	cmp	r3, r2
 8002bae:	d10c      	bne.n	8002bca <HAL_TIM_Base_MspInit+0xaa>
    __HAL_RCC_TIM5_CLK_ENABLE();
 8002bb0:	4b37      	ldr	r3, [pc, #220]	; (8002c90 <HAL_TIM_Base_MspInit+0x170>)
 8002bb2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002bb4:	4a36      	ldr	r2, [pc, #216]	; (8002c90 <HAL_TIM_Base_MspInit+0x170>)
 8002bb6:	f043 0308 	orr.w	r3, r3, #8
 8002bba:	6593      	str	r3, [r2, #88]	; 0x58
 8002bbc:	4b34      	ldr	r3, [pc, #208]	; (8002c90 <HAL_TIM_Base_MspInit+0x170>)
 8002bbe:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002bc0:	f003 0308 	and.w	r3, r3, #8
 8002bc4:	61bb      	str	r3, [r7, #24]
 8002bc6:	69bb      	ldr	r3, [r7, #24]
}
 8002bc8:	e05e      	b.n	8002c88 <HAL_TIM_Base_MspInit+0x168>
  else if(tim_baseHandle->Instance==TIM8)
 8002bca:	687b      	ldr	r3, [r7, #4]
 8002bcc:	681b      	ldr	r3, [r3, #0]
 8002bce:	4a32      	ldr	r2, [pc, #200]	; (8002c98 <HAL_TIM_Base_MspInit+0x178>)
 8002bd0:	4293      	cmp	r3, r2
 8002bd2:	d10c      	bne.n	8002bee <HAL_TIM_Base_MspInit+0xce>
    __HAL_RCC_TIM8_CLK_ENABLE();
 8002bd4:	4b2e      	ldr	r3, [pc, #184]	; (8002c90 <HAL_TIM_Base_MspInit+0x170>)
 8002bd6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002bd8:	4a2d      	ldr	r2, [pc, #180]	; (8002c90 <HAL_TIM_Base_MspInit+0x170>)
 8002bda:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8002bde:	6613      	str	r3, [r2, #96]	; 0x60
 8002be0:	4b2b      	ldr	r3, [pc, #172]	; (8002c90 <HAL_TIM_Base_MspInit+0x170>)
 8002be2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002be4:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002be8:	617b      	str	r3, [r7, #20]
 8002bea:	697b      	ldr	r3, [r7, #20]
}
 8002bec:	e04c      	b.n	8002c88 <HAL_TIM_Base_MspInit+0x168>
  else if(tim_baseHandle->Instance==TIM15)
 8002bee:	687b      	ldr	r3, [r7, #4]
 8002bf0:	681b      	ldr	r3, [r3, #0]
 8002bf2:	4a2a      	ldr	r2, [pc, #168]	; (8002c9c <HAL_TIM_Base_MspInit+0x17c>)
 8002bf4:	4293      	cmp	r3, r2
 8002bf6:	d114      	bne.n	8002c22 <HAL_TIM_Base_MspInit+0x102>
    __HAL_RCC_TIM15_CLK_ENABLE();
 8002bf8:	4b25      	ldr	r3, [pc, #148]	; (8002c90 <HAL_TIM_Base_MspInit+0x170>)
 8002bfa:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002bfc:	4a24      	ldr	r2, [pc, #144]	; (8002c90 <HAL_TIM_Base_MspInit+0x170>)
 8002bfe:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002c02:	6613      	str	r3, [r2, #96]	; 0x60
 8002c04:	4b22      	ldr	r3, [pc, #136]	; (8002c90 <HAL_TIM_Base_MspInit+0x170>)
 8002c06:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002c08:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002c0c:	613b      	str	r3, [r7, #16]
 8002c0e:	693b      	ldr	r3, [r7, #16]
    HAL_NVIC_SetPriority(TIM1_BRK_TIM15_IRQn, 0, 0);
 8002c10:	2200      	movs	r2, #0
 8002c12:	2100      	movs	r1, #0
 8002c14:	2018      	movs	r0, #24
 8002c16:	f001 fd1e 	bl	8004656 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_BRK_TIM15_IRQn);
 8002c1a:	2018      	movs	r0, #24
 8002c1c:	f001 fd35 	bl	800468a <HAL_NVIC_EnableIRQ>
}
 8002c20:	e032      	b.n	8002c88 <HAL_TIM_Base_MspInit+0x168>
  else if(tim_baseHandle->Instance==TIM16)
 8002c22:	687b      	ldr	r3, [r7, #4]
 8002c24:	681b      	ldr	r3, [r3, #0]
 8002c26:	4a1e      	ldr	r2, [pc, #120]	; (8002ca0 <HAL_TIM_Base_MspInit+0x180>)
 8002c28:	4293      	cmp	r3, r2
 8002c2a:	d114      	bne.n	8002c56 <HAL_TIM_Base_MspInit+0x136>
    __HAL_RCC_TIM16_CLK_ENABLE();
 8002c2c:	4b18      	ldr	r3, [pc, #96]	; (8002c90 <HAL_TIM_Base_MspInit+0x170>)
 8002c2e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002c30:	4a17      	ldr	r2, [pc, #92]	; (8002c90 <HAL_TIM_Base_MspInit+0x170>)
 8002c32:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002c36:	6613      	str	r3, [r2, #96]	; 0x60
 8002c38:	4b15      	ldr	r3, [pc, #84]	; (8002c90 <HAL_TIM_Base_MspInit+0x170>)
 8002c3a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002c3c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002c40:	60fb      	str	r3, [r7, #12]
 8002c42:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_SetPriority(TIM1_UP_TIM16_IRQn, 1, 0);
 8002c44:	2200      	movs	r2, #0
 8002c46:	2101      	movs	r1, #1
 8002c48:	2019      	movs	r0, #25
 8002c4a:	f001 fd04 	bl	8004656 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM16_IRQn);
 8002c4e:	2019      	movs	r0, #25
 8002c50:	f001 fd1b 	bl	800468a <HAL_NVIC_EnableIRQ>
}
 8002c54:	e018      	b.n	8002c88 <HAL_TIM_Base_MspInit+0x168>
  else if(tim_baseHandle->Instance==TIM17)
 8002c56:	687b      	ldr	r3, [r7, #4]
 8002c58:	681b      	ldr	r3, [r3, #0]
 8002c5a:	4a12      	ldr	r2, [pc, #72]	; (8002ca4 <HAL_TIM_Base_MspInit+0x184>)
 8002c5c:	4293      	cmp	r3, r2
 8002c5e:	d113      	bne.n	8002c88 <HAL_TIM_Base_MspInit+0x168>
    __HAL_RCC_TIM17_CLK_ENABLE();
 8002c60:	4b0b      	ldr	r3, [pc, #44]	; (8002c90 <HAL_TIM_Base_MspInit+0x170>)
 8002c62:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002c64:	4a0a      	ldr	r2, [pc, #40]	; (8002c90 <HAL_TIM_Base_MspInit+0x170>)
 8002c66:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002c6a:	6613      	str	r3, [r2, #96]	; 0x60
 8002c6c:	4b08      	ldr	r3, [pc, #32]	; (8002c90 <HAL_TIM_Base_MspInit+0x170>)
 8002c6e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002c70:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002c74:	60bb      	str	r3, [r7, #8]
 8002c76:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM1_TRG_COM_TIM17_IRQn, 1, 0);
 8002c78:	2200      	movs	r2, #0
 8002c7a:	2101      	movs	r1, #1
 8002c7c:	201a      	movs	r0, #26
 8002c7e:	f001 fcea 	bl	8004656 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_TRG_COM_TIM17_IRQn);
 8002c82:	201a      	movs	r0, #26
 8002c84:	f001 fd01 	bl	800468a <HAL_NVIC_EnableIRQ>
}
 8002c88:	bf00      	nop
 8002c8a:	3738      	adds	r7, #56	; 0x38
 8002c8c:	46bd      	mov	sp, r7
 8002c8e:	bd80      	pop	{r7, pc}
 8002c90:	40021000 	.word	0x40021000
 8002c94:	40000c00 	.word	0x40000c00
 8002c98:	40013400 	.word	0x40013400
 8002c9c:	40014000 	.word	0x40014000
 8002ca0:	40014400 	.word	0x40014400
 8002ca4:	40014800 	.word	0x40014800

08002ca8 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8002ca8:	480d      	ldr	r0, [pc, #52]	; (8002ce0 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8002caa:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8002cac:	480d      	ldr	r0, [pc, #52]	; (8002ce4 <LoopForever+0x6>)
  ldr r1, =_edata
 8002cae:	490e      	ldr	r1, [pc, #56]	; (8002ce8 <LoopForever+0xa>)
  ldr r2, =_sidata
 8002cb0:	4a0e      	ldr	r2, [pc, #56]	; (8002cec <LoopForever+0xe>)
  movs r3, #0
 8002cb2:	2300      	movs	r3, #0
  b	LoopCopyDataInit
 8002cb4:	e002      	b.n	8002cbc <LoopCopyDataInit>

08002cb6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002cb6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002cb8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002cba:	3304      	adds	r3, #4

08002cbc <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002cbc:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002cbe:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002cc0:	d3f9      	bcc.n	8002cb6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002cc2:	4a0b      	ldr	r2, [pc, #44]	; (8002cf0 <LoopForever+0x12>)
  ldr r4, =_ebss
 8002cc4:	4c0b      	ldr	r4, [pc, #44]	; (8002cf4 <LoopForever+0x16>)
  movs r3, #0
 8002cc6:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002cc8:	e001      	b.n	8002cce <LoopFillZerobss>

08002cca <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002cca:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002ccc:	3204      	adds	r2, #4

08002cce <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002cce:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002cd0:	d3fb      	bcc.n	8002cca <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8002cd2:	f7ff fc83 	bl	80025dc <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8002cd6:	f006 fac3 	bl	8009260 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8002cda:	f7ff f8c7 	bl	8001e6c <main>

08002cde <LoopForever>:

LoopForever:
    b LoopForever
 8002cde:	e7fe      	b.n	8002cde <LoopForever>
  ldr   r0, =_estack
 8002ce0:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8002ce4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002ce8:	20000bc8 	.word	0x20000bc8
  ldr r2, =_sidata
 8002cec:	0800a7bc 	.word	0x0800a7bc
  ldr r2, =_sbss
 8002cf0:	20000bc8 	.word	0x20000bc8
  ldr r4, =_ebss
 8002cf4:	2000106c 	.word	0x2000106c

08002cf8 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8002cf8:	e7fe      	b.n	8002cf8 <ADC1_2_IRQHandler>

08002cfa <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002cfa:	b580      	push	{r7, lr}
 8002cfc:	b082      	sub	sp, #8
 8002cfe:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8002d00:	2300      	movs	r3, #0
 8002d02:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002d04:	2003      	movs	r0, #3
 8002d06:	f001 fc9b 	bl	8004640 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8002d0a:	2000      	movs	r0, #0
 8002d0c:	f000 f80e 	bl	8002d2c <HAL_InitTick>
 8002d10:	4603      	mov	r3, r0
 8002d12:	2b00      	cmp	r3, #0
 8002d14:	d002      	beq.n	8002d1c <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8002d16:	2301      	movs	r3, #1
 8002d18:	71fb      	strb	r3, [r7, #7]
 8002d1a:	e001      	b.n	8002d20 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8002d1c:	f7ff fa8a 	bl	8002234 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8002d20:	79fb      	ldrb	r3, [r7, #7]

}
 8002d22:	4618      	mov	r0, r3
 8002d24:	3708      	adds	r7, #8
 8002d26:	46bd      	mov	sp, r7
 8002d28:	bd80      	pop	{r7, pc}
	...

08002d2c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002d2c:	b580      	push	{r7, lr}
 8002d2e:	b084      	sub	sp, #16
 8002d30:	af00      	add	r7, sp, #0
 8002d32:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8002d34:	2300      	movs	r3, #0
 8002d36:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 8002d38:	4b16      	ldr	r3, [pc, #88]	; (8002d94 <HAL_InitTick+0x68>)
 8002d3a:	681b      	ldr	r3, [r3, #0]
 8002d3c:	2b00      	cmp	r3, #0
 8002d3e:	d022      	beq.n	8002d86 <HAL_InitTick+0x5a>
  {
    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 8002d40:	4b15      	ldr	r3, [pc, #84]	; (8002d98 <HAL_InitTick+0x6c>)
 8002d42:	681a      	ldr	r2, [r3, #0]
 8002d44:	4b13      	ldr	r3, [pc, #76]	; (8002d94 <HAL_InitTick+0x68>)
 8002d46:	681b      	ldr	r3, [r3, #0]
 8002d48:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8002d4c:	fbb1 f3f3 	udiv	r3, r1, r3
 8002d50:	fbb2 f3f3 	udiv	r3, r2, r3
 8002d54:	4618      	mov	r0, r3
 8002d56:	f001 fca6 	bl	80046a6 <HAL_SYSTICK_Config>
 8002d5a:	4603      	mov	r3, r0
 8002d5c:	2b00      	cmp	r3, #0
 8002d5e:	d10f      	bne.n	8002d80 <HAL_InitTick+0x54>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002d60:	687b      	ldr	r3, [r7, #4]
 8002d62:	2b0f      	cmp	r3, #15
 8002d64:	d809      	bhi.n	8002d7a <HAL_InitTick+0x4e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002d66:	2200      	movs	r2, #0
 8002d68:	6879      	ldr	r1, [r7, #4]
 8002d6a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8002d6e:	f001 fc72 	bl	8004656 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8002d72:	4a0a      	ldr	r2, [pc, #40]	; (8002d9c <HAL_InitTick+0x70>)
 8002d74:	687b      	ldr	r3, [r7, #4]
 8002d76:	6013      	str	r3, [r2, #0]
 8002d78:	e007      	b.n	8002d8a <HAL_InitTick+0x5e>
      }
      else
      {
        status = HAL_ERROR;
 8002d7a:	2301      	movs	r3, #1
 8002d7c:	73fb      	strb	r3, [r7, #15]
 8002d7e:	e004      	b.n	8002d8a <HAL_InitTick+0x5e>
      }
    }
    else
    {
      status = HAL_ERROR;
 8002d80:	2301      	movs	r3, #1
 8002d82:	73fb      	strb	r3, [r7, #15]
 8002d84:	e001      	b.n	8002d8a <HAL_InitTick+0x5e>
    }
  }
  else
  {
    status = HAL_ERROR;
 8002d86:	2301      	movs	r3, #1
 8002d88:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8002d8a:	7bfb      	ldrb	r3, [r7, #15]
}
 8002d8c:	4618      	mov	r0, r3
 8002d8e:	3710      	adds	r7, #16
 8002d90:	46bd      	mov	sp, r7
 8002d92:	bd80      	pop	{r7, pc}
 8002d94:	20000018 	.word	0x20000018
 8002d98:	20000010 	.word	0x20000010
 8002d9c:	20000014 	.word	0x20000014

08002da0 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002da0:	b480      	push	{r7}
 8002da2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002da4:	4b05      	ldr	r3, [pc, #20]	; (8002dbc <HAL_IncTick+0x1c>)
 8002da6:	681a      	ldr	r2, [r3, #0]
 8002da8:	4b05      	ldr	r3, [pc, #20]	; (8002dc0 <HAL_IncTick+0x20>)
 8002daa:	681b      	ldr	r3, [r3, #0]
 8002dac:	4413      	add	r3, r2
 8002dae:	4a03      	ldr	r2, [pc, #12]	; (8002dbc <HAL_IncTick+0x1c>)
 8002db0:	6013      	str	r3, [r2, #0]
}
 8002db2:	bf00      	nop
 8002db4:	46bd      	mov	sp, r7
 8002db6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dba:	4770      	bx	lr
 8002dbc:	20001064 	.word	0x20001064
 8002dc0:	20000018 	.word	0x20000018

08002dc4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002dc4:	b480      	push	{r7}
 8002dc6:	af00      	add	r7, sp, #0
  return uwTick;
 8002dc8:	4b03      	ldr	r3, [pc, #12]	; (8002dd8 <HAL_GetTick+0x14>)
 8002dca:	681b      	ldr	r3, [r3, #0]
}
 8002dcc:	4618      	mov	r0, r3
 8002dce:	46bd      	mov	sp, r7
 8002dd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dd4:	4770      	bx	lr
 8002dd6:	bf00      	nop
 8002dd8:	20001064 	.word	0x20001064

08002ddc <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002ddc:	b580      	push	{r7, lr}
 8002dde:	b084      	sub	sp, #16
 8002de0:	af00      	add	r7, sp, #0
 8002de2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002de4:	f7ff ffee 	bl	8002dc4 <HAL_GetTick>
 8002de8:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002dea:	687b      	ldr	r3, [r7, #4]
 8002dec:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002dee:	68fb      	ldr	r3, [r7, #12]
 8002df0:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002df4:	d004      	beq.n	8002e00 <HAL_Delay+0x24>
  {
    wait += (uint32_t)(uwTickFreq);
 8002df6:	4b09      	ldr	r3, [pc, #36]	; (8002e1c <HAL_Delay+0x40>)
 8002df8:	681b      	ldr	r3, [r3, #0]
 8002dfa:	68fa      	ldr	r2, [r7, #12]
 8002dfc:	4413      	add	r3, r2
 8002dfe:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8002e00:	bf00      	nop
 8002e02:	f7ff ffdf 	bl	8002dc4 <HAL_GetTick>
 8002e06:	4602      	mov	r2, r0
 8002e08:	68bb      	ldr	r3, [r7, #8]
 8002e0a:	1ad3      	subs	r3, r2, r3
 8002e0c:	68fa      	ldr	r2, [r7, #12]
 8002e0e:	429a      	cmp	r2, r3
 8002e10:	d8f7      	bhi.n	8002e02 <HAL_Delay+0x26>
  {
  }
}
 8002e12:	bf00      	nop
 8002e14:	3710      	adds	r7, #16
 8002e16:	46bd      	mov	sp, r7
 8002e18:	bd80      	pop	{r7, pc}
 8002e1a:	bf00      	nop
 8002e1c:	20000018 	.word	0x20000018

08002e20 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 8002e20:	b480      	push	{r7}
 8002e22:	b083      	sub	sp, #12
 8002e24:	af00      	add	r7, sp, #0
 8002e26:	6078      	str	r0, [r7, #4]
 8002e28:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 8002e2a:	687b      	ldr	r3, [r7, #4]
 8002e2c:	689b      	ldr	r3, [r3, #8]
 8002e2e:	f423 127c 	bic.w	r2, r3, #4128768	; 0x3f0000
 8002e32:	683b      	ldr	r3, [r7, #0]
 8002e34:	431a      	orrs	r2, r3
 8002e36:	687b      	ldr	r3, [r7, #4]
 8002e38:	609a      	str	r2, [r3, #8]
}
 8002e3a:	bf00      	nop
 8002e3c:	370c      	adds	r7, #12
 8002e3e:	46bd      	mov	sp, r7
 8002e40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e44:	4770      	bx	lr

08002e46 <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 8002e46:	b480      	push	{r7}
 8002e48:	b083      	sub	sp, #12
 8002e4a:	af00      	add	r7, sp, #0
 8002e4c:	6078      	str	r0, [r7, #4]
 8002e4e:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL, PathInternal);
 8002e50:	687b      	ldr	r3, [r7, #4]
 8002e52:	689b      	ldr	r3, [r3, #8]
 8002e54:	f023 72e0 	bic.w	r2, r3, #29360128	; 0x1c00000
 8002e58:	683b      	ldr	r3, [r7, #0]
 8002e5a:	431a      	orrs	r2, r3
 8002e5c:	687b      	ldr	r3, [r7, #4]
 8002e5e:	609a      	str	r2, [r3, #8]
}
 8002e60:	bf00      	nop
 8002e62:	370c      	adds	r7, #12
 8002e64:	46bd      	mov	sp, r7
 8002e66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e6a:	4770      	bx	lr

08002e6c <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8002e6c:	b480      	push	{r7}
 8002e6e:	b083      	sub	sp, #12
 8002e70:	af00      	add	r7, sp, #0
 8002e72:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL));
 8002e74:	687b      	ldr	r3, [r7, #4]
 8002e76:	689b      	ldr	r3, [r3, #8]
 8002e78:	f003 73e0 	and.w	r3, r3, #29360128	; 0x1c00000
}
 8002e7c:	4618      	mov	r0, r3
 8002e7e:	370c      	adds	r7, #12
 8002e80:	46bd      	mov	sp, r7
 8002e82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e86:	4770      	bx	lr

08002e88 <LL_ADC_SetOffset>:
  *             Other channels are slow channels  allows: 6.5 (sampling) + 12.5 (conversion) = 19 ADC clock cycles (fADC) to convert in 12-bit resolution.\n
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 8002e88:	b490      	push	{r4, r7}
 8002e8a:	b084      	sub	sp, #16
 8002e8c:	af00      	add	r7, sp, #0
 8002e8e:	60f8      	str	r0, [r7, #12]
 8002e90:	60b9      	str	r1, [r7, #8]
 8002e92:	607a      	str	r2, [r7, #4]
 8002e94:	603b      	str	r3, [r7, #0]
  register __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8002e96:	68fb      	ldr	r3, [r7, #12]
 8002e98:	3360      	adds	r3, #96	; 0x60
 8002e9a:	461a      	mov	r2, r3
 8002e9c:	68bb      	ldr	r3, [r7, #8]
 8002e9e:	009b      	lsls	r3, r3, #2
 8002ea0:	4413      	add	r3, r2
 8002ea2:	461c      	mov	r4, r3

  MODIFY_REG(*preg,
 8002ea4:	6822      	ldr	r2, [r4, #0]
 8002ea6:	4b08      	ldr	r3, [pc, #32]	; (8002ec8 <LL_ADC_SetOffset+0x40>)
 8002ea8:	4013      	ands	r3, r2
 8002eaa:	687a      	ldr	r2, [r7, #4]
 8002eac:	f002 41f8 	and.w	r1, r2, #2080374784	; 0x7c000000
 8002eb0:	683a      	ldr	r2, [r7, #0]
 8002eb2:	430a      	orrs	r2, r1
 8002eb4:	4313      	orrs	r3, r2
 8002eb6:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8002eba:	6023      	str	r3, [r4, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 8002ebc:	bf00      	nop
 8002ebe:	3710      	adds	r7, #16
 8002ec0:	46bd      	mov	sp, r7
 8002ec2:	bc90      	pop	{r4, r7}
 8002ec4:	4770      	bx	lr
 8002ec6:	bf00      	nop
 8002ec8:	03fff000 	.word	0x03fff000

08002ecc <LL_ADC_GetOffsetChannel>:
  *         (1, 2, 3, 4, 5, 7) For ADC channel read back from ADC register,
  *                      comparison with internal channel parameter to be done
  *                      using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(ADC_TypeDef *ADCx, uint32_t Offsety)
{
 8002ecc:	b490      	push	{r4, r7}
 8002ece:	b082      	sub	sp, #8
 8002ed0:	af00      	add	r7, sp, #0
 8002ed2:	6078      	str	r0, [r7, #4]
 8002ed4:	6039      	str	r1, [r7, #0]
  register const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8002ed6:	687b      	ldr	r3, [r7, #4]
 8002ed8:	3360      	adds	r3, #96	; 0x60
 8002eda:	461a      	mov	r2, r3
 8002edc:	683b      	ldr	r3, [r7, #0]
 8002ede:	009b      	lsls	r3, r3, #2
 8002ee0:	4413      	add	r3, r2
 8002ee2:	461c      	mov	r4, r3

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8002ee4:	6823      	ldr	r3, [r4, #0]
 8002ee6:	f003 43f8 	and.w	r3, r3, #2080374784	; 0x7c000000
}
 8002eea:	4618      	mov	r0, r3
 8002eec:	3708      	adds	r7, #8
 8002eee:	46bd      	mov	sp, r7
 8002ef0:	bc90      	pop	{r4, r7}
 8002ef2:	4770      	bx	lr

08002ef4 <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 8002ef4:	b490      	push	{r4, r7}
 8002ef6:	b084      	sub	sp, #16
 8002ef8:	af00      	add	r7, sp, #0
 8002efa:	60f8      	str	r0, [r7, #12]
 8002efc:	60b9      	str	r1, [r7, #8]
 8002efe:	607a      	str	r2, [r7, #4]
  register __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8002f00:	68fb      	ldr	r3, [r7, #12]
 8002f02:	3360      	adds	r3, #96	; 0x60
 8002f04:	461a      	mov	r2, r3
 8002f06:	68bb      	ldr	r3, [r7, #8]
 8002f08:	009b      	lsls	r3, r3, #2
 8002f0a:	4413      	add	r3, r2
 8002f0c:	461c      	mov	r4, r3

  MODIFY_REG(*preg,
 8002f0e:	6823      	ldr	r3, [r4, #0]
 8002f10:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8002f14:	687b      	ldr	r3, [r7, #4]
 8002f16:	4313      	orrs	r3, r2
 8002f18:	6023      	str	r3, [r4, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 8002f1a:	bf00      	nop
 8002f1c:	3710      	adds	r7, #16
 8002f1e:	46bd      	mov	sp, r7
 8002f20:	bc90      	pop	{r4, r7}
 8002f22:	4770      	bx	lr

08002f24 <LL_ADC_SetOffsetSign>:
  *         @arg @ref LL_ADC_OFFSET_SIGN_NEGATIVE
  *         @arg @ref LL_ADC_OFFSET_SIGN_POSITIVE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSign(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSign)
{
 8002f24:	b490      	push	{r4, r7}
 8002f26:	b084      	sub	sp, #16
 8002f28:	af00      	add	r7, sp, #0
 8002f2a:	60f8      	str	r0, [r7, #12]
 8002f2c:	60b9      	str	r1, [r7, #8]
 8002f2e:	607a      	str	r2, [r7, #4]
  register __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8002f30:	68fb      	ldr	r3, [r7, #12]
 8002f32:	3360      	adds	r3, #96	; 0x60
 8002f34:	461a      	mov	r2, r3
 8002f36:	68bb      	ldr	r3, [r7, #8]
 8002f38:	009b      	lsls	r3, r3, #2
 8002f3a:	4413      	add	r3, r2
 8002f3c:	461c      	mov	r4, r3

  MODIFY_REG(*preg,
 8002f3e:	6823      	ldr	r3, [r4, #0]
 8002f40:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 8002f44:	687b      	ldr	r3, [r7, #4]
 8002f46:	4313      	orrs	r3, r2
 8002f48:	6023      	str	r3, [r4, #0]
             ADC_OFR1_OFFSETPOS,
             OffsetSign);
}
 8002f4a:	bf00      	nop
 8002f4c:	3710      	adds	r7, #16
 8002f4e:	46bd      	mov	sp, r7
 8002f50:	bc90      	pop	{r4, r7}
 8002f52:	4770      	bx	lr

08002f54 <LL_ADC_SetOffsetSaturation>:
  *         @arg @ref LL_ADC_OFFSET_SATURATION_ENABLE
  *         @arg @ref LL_ADC_OFFSET_SATURATION_DISABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSaturation(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSaturation)
{
 8002f54:	b490      	push	{r4, r7}
 8002f56:	b084      	sub	sp, #16
 8002f58:	af00      	add	r7, sp, #0
 8002f5a:	60f8      	str	r0, [r7, #12]
 8002f5c:	60b9      	str	r1, [r7, #8]
 8002f5e:	607a      	str	r2, [r7, #4]
  register __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8002f60:	68fb      	ldr	r3, [r7, #12]
 8002f62:	3360      	adds	r3, #96	; 0x60
 8002f64:	461a      	mov	r2, r3
 8002f66:	68bb      	ldr	r3, [r7, #8]
 8002f68:	009b      	lsls	r3, r3, #2
 8002f6a:	4413      	add	r3, r2
 8002f6c:	461c      	mov	r4, r3

  MODIFY_REG(*preg,
 8002f6e:	6823      	ldr	r3, [r4, #0]
 8002f70:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 8002f74:	687b      	ldr	r3, [r7, #4]
 8002f76:	4313      	orrs	r3, r2
 8002f78:	6023      	str	r3, [r4, #0]
             ADC_OFR1_SATEN,
             OffsetSaturation);
}
 8002f7a:	bf00      	nop
 8002f7c:	3710      	adds	r7, #16
 8002f7e:	46bd      	mov	sp, r7
 8002f80:	bc90      	pop	{r4, r7}
 8002f82:	4770      	bx	lr

08002f84 <LL_ADC_SetSamplingTimeCommonConfig>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_DEFAULT
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetSamplingTimeCommonConfig(ADC_TypeDef *ADCx, uint32_t SamplingTimeCommonConfig)
{
 8002f84:	b480      	push	{r7}
 8002f86:	b083      	sub	sp, #12
 8002f88:	af00      	add	r7, sp, #0
 8002f8a:	6078      	str	r0, [r7, #4]
 8002f8c:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->SMPR1, ADC_SMPR1_SMPPLUS, SamplingTimeCommonConfig);
 8002f8e:	687b      	ldr	r3, [r7, #4]
 8002f90:	695b      	ldr	r3, [r3, #20]
 8002f92:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8002f96:	683b      	ldr	r3, [r7, #0]
 8002f98:	431a      	orrs	r2, r3
 8002f9a:	687b      	ldr	r3, [r7, #4]
 8002f9c:	615a      	str	r2, [r3, #20]
}
 8002f9e:	bf00      	nop
 8002fa0:	370c      	adds	r7, #12
 8002fa2:	46bd      	mov	sp, r7
 8002fa4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fa8:	4770      	bx	lr

08002faa <LL_ADC_REG_SetSequencerRanks>:
  *         (8) On STM32G4, fast channel allows: 2.5 (sampling) + 12.5 (conversion) = 15 ADC clock cycles (fADC) to convert in 12-bit resolution.
  *             Other channels are slow channels  allows: 6.5 (sampling) + 12.5 (conversion) = 19 ADC clock cycles (fADC) to convert in 12-bit resolution.\n
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8002faa:	b490      	push	{r4, r7}
 8002fac:	b084      	sub	sp, #16
 8002fae:	af00      	add	r7, sp, #0
 8002fb0:	60f8      	str	r0, [r7, #12]
 8002fb2:	60b9      	str	r1, [r7, #8]
 8002fb4:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  register __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 8002fb6:	68fb      	ldr	r3, [r7, #12]
 8002fb8:	3330      	adds	r3, #48	; 0x30
 8002fba:	461a      	mov	r2, r3
 8002fbc:	68bb      	ldr	r3, [r7, #8]
 8002fbe:	0a1b      	lsrs	r3, r3, #8
 8002fc0:	009b      	lsls	r3, r3, #2
 8002fc2:	f003 030c 	and.w	r3, r3, #12
 8002fc6:	4413      	add	r3, r2
 8002fc8:	461c      	mov	r4, r3

  MODIFY_REG(*preg,
 8002fca:	6822      	ldr	r2, [r4, #0]
 8002fcc:	68bb      	ldr	r3, [r7, #8]
 8002fce:	f003 031f 	and.w	r3, r3, #31
 8002fd2:	211f      	movs	r1, #31
 8002fd4:	fa01 f303 	lsl.w	r3, r1, r3
 8002fd8:	43db      	mvns	r3, r3
 8002fda:	401a      	ands	r2, r3
 8002fdc:	687b      	ldr	r3, [r7, #4]
 8002fde:	0e9b      	lsrs	r3, r3, #26
 8002fe0:	f003 011f 	and.w	r1, r3, #31
 8002fe4:	68bb      	ldr	r3, [r7, #8]
 8002fe6:	f003 031f 	and.w	r3, r3, #31
 8002fea:	fa01 f303 	lsl.w	r3, r1, r3
 8002fee:	4313      	orrs	r3, r2
 8002ff0:	6023      	str	r3, [r4, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS) << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 8002ff2:	bf00      	nop
 8002ff4:	3710      	adds	r7, #16
 8002ff6:	46bd      	mov	sp, r7
 8002ff8:	bc90      	pop	{r4, r7}
 8002ffa:	4770      	bx	lr

08002ffc <LL_ADC_SetChannelSamplingTime>:
  *             can be replaced by 3.5 ADC clock cycles.
  *             Refer to function @ref LL_ADC_SetSamplingTimeCommonConfig().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 8002ffc:	b490      	push	{r4, r7}
 8002ffe:	b084      	sub	sp, #16
 8003000:	af00      	add	r7, sp, #0
 8003002:	60f8      	str	r0, [r7, #12]
 8003004:	60b9      	str	r1, [r7, #8]
 8003006:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  register __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 8003008:	68fb      	ldr	r3, [r7, #12]
 800300a:	3314      	adds	r3, #20
 800300c:	461a      	mov	r2, r3
 800300e:	68bb      	ldr	r3, [r7, #8]
 8003010:	0e5b      	lsrs	r3, r3, #25
 8003012:	009b      	lsls	r3, r3, #2
 8003014:	f003 0304 	and.w	r3, r3, #4
 8003018:	4413      	add	r3, r2
 800301a:	461c      	mov	r4, r3

  MODIFY_REG(*preg,
 800301c:	6822      	ldr	r2, [r4, #0]
 800301e:	68bb      	ldr	r3, [r7, #8]
 8003020:	0d1b      	lsrs	r3, r3, #20
 8003022:	f003 031f 	and.w	r3, r3, #31
 8003026:	2107      	movs	r1, #7
 8003028:	fa01 f303 	lsl.w	r3, r1, r3
 800302c:	43db      	mvns	r3, r3
 800302e:	401a      	ands	r2, r3
 8003030:	68bb      	ldr	r3, [r7, #8]
 8003032:	0d1b      	lsrs	r3, r3, #20
 8003034:	f003 031f 	and.w	r3, r3, #31
 8003038:	6879      	ldr	r1, [r7, #4]
 800303a:	fa01 f303 	lsl.w	r3, r1, r3
 800303e:	4313      	orrs	r3, r2
 8003040:	6023      	str	r3, [r4, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 8003042:	bf00      	nop
 8003044:	3710      	adds	r7, #16
 8003046:	46bd      	mov	sp, r7
 8003048:	bc90      	pop	{r4, r7}
 800304a:	4770      	bx	lr

0800304c <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 800304c:	b480      	push	{r7}
 800304e:	b085      	sub	sp, #20
 8003050:	af00      	add	r7, sp, #0
 8003052:	60f8      	str	r0, [r7, #12]
 8003054:	60b9      	str	r1, [r7, #8]
 8003056:	607a      	str	r2, [r7, #4]
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 8003058:	68fb      	ldr	r3, [r7, #12]
 800305a:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 800305e:	68bb      	ldr	r3, [r7, #8]
 8003060:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003064:	43db      	mvns	r3, r3
 8003066:	401a      	ands	r2, r3
 8003068:	687b      	ldr	r3, [r7, #4]
 800306a:	f003 0318 	and.w	r3, r3, #24
 800306e:	4908      	ldr	r1, [pc, #32]	; (8003090 <LL_ADC_SetChannelSingleDiff+0x44>)
 8003070:	40d9      	lsrs	r1, r3
 8003072:	68bb      	ldr	r3, [r7, #8]
 8003074:	400b      	ands	r3, r1
 8003076:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800307a:	431a      	orrs	r2, r3
 800307c:	68fb      	ldr	r3, [r7, #12]
 800307e:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK) & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
}
 8003082:	bf00      	nop
 8003084:	3714      	adds	r7, #20
 8003086:	46bd      	mov	sp, r7
 8003088:	f85d 7b04 	ldr.w	r7, [sp], #4
 800308c:	4770      	bx	lr
 800308e:	bf00      	nop
 8003090:	0007ffff 	.word	0x0007ffff

08003094 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 8003094:	b480      	push	{r7}
 8003096:	b083      	sub	sp, #12
 8003098:	af00      	add	r7, sp, #0
 800309a:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 800309c:	687b      	ldr	r3, [r7, #4]
 800309e:	689b      	ldr	r3, [r3, #8]
 80030a0:	f023 4320 	bic.w	r3, r3, #2684354560	; 0xa0000000
 80030a4:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 80030a8:	687a      	ldr	r2, [r7, #4]
 80030aa:	6093      	str	r3, [r2, #8]
}
 80030ac:	bf00      	nop
 80030ae:	370c      	adds	r7, #12
 80030b0:	46bd      	mov	sp, r7
 80030b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030b6:	4770      	bx	lr

080030b8 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(ADC_TypeDef *ADCx)
{
 80030b8:	b480      	push	{r7}
 80030ba:	b083      	sub	sp, #12
 80030bc:	af00      	add	r7, sp, #0
 80030be:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 80030c0:	687b      	ldr	r3, [r7, #4]
 80030c2:	689b      	ldr	r3, [r3, #8]
 80030c4:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80030c8:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80030cc:	d101      	bne.n	80030d2 <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 80030ce:	2301      	movs	r3, #1
 80030d0:	e000      	b.n	80030d4 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 80030d2:	2300      	movs	r3, #0
}
 80030d4:	4618      	mov	r0, r3
 80030d6:	370c      	adds	r7, #12
 80030d8:	46bd      	mov	sp, r7
 80030da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030de:	4770      	bx	lr

080030e0 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 80030e0:	b480      	push	{r7}
 80030e2:	b083      	sub	sp, #12
 80030e4:	af00      	add	r7, sp, #0
 80030e6:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80030e8:	687b      	ldr	r3, [r7, #4]
 80030ea:	689b      	ldr	r3, [r3, #8]
 80030ec:	f023 4310 	bic.w	r3, r3, #2415919104	; 0x90000000
 80030f0:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 80030f4:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 80030f8:	687b      	ldr	r3, [r7, #4]
 80030fa:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 80030fc:	bf00      	nop
 80030fe:	370c      	adds	r7, #12
 8003100:	46bd      	mov	sp, r7
 8003102:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003106:	4770      	bx	lr

08003108 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
{
 8003108:	b480      	push	{r7}
 800310a:	b083      	sub	sp, #12
 800310c:	af00      	add	r7, sp, #0
 800310e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8003110:	687b      	ldr	r3, [r7, #4]
 8003112:	689b      	ldr	r3, [r3, #8]
 8003114:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003118:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800311c:	d101      	bne.n	8003122 <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 800311e:	2301      	movs	r3, #1
 8003120:	e000      	b.n	8003124 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 8003122:	2300      	movs	r3, #0
}
 8003124:	4618      	mov	r0, r3
 8003126:	370c      	adds	r7, #12
 8003128:	46bd      	mov	sp, r7
 800312a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800312e:	4770      	bx	lr

08003130 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
 8003130:	b480      	push	{r7}
 8003132:	b083      	sub	sp, #12
 8003134:	af00      	add	r7, sp, #0
 8003136:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8003138:	687b      	ldr	r3, [r7, #4]
 800313a:	689b      	ldr	r3, [r3, #8]
 800313c:	f003 0301 	and.w	r3, r3, #1
 8003140:	2b01      	cmp	r3, #1
 8003142:	d101      	bne.n	8003148 <LL_ADC_IsEnabled+0x18>
 8003144:	2301      	movs	r3, #1
 8003146:	e000      	b.n	800314a <LL_ADC_IsEnabled+0x1a>
 8003148:	2300      	movs	r3, #0
}
 800314a:	4618      	mov	r0, r3
 800314c:	370c      	adds	r7, #12
 800314e:	46bd      	mov	sp, r7
 8003150:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003154:	4770      	bx	lr

08003156 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8003156:	b480      	push	{r7}
 8003158:	b083      	sub	sp, #12
 800315a:	af00      	add	r7, sp, #0
 800315c:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 800315e:	687b      	ldr	r3, [r7, #4]
 8003160:	689b      	ldr	r3, [r3, #8]
 8003162:	f003 0304 	and.w	r3, r3, #4
 8003166:	2b04      	cmp	r3, #4
 8003168:	d101      	bne.n	800316e <LL_ADC_REG_IsConversionOngoing+0x18>
 800316a:	2301      	movs	r3, #1
 800316c:	e000      	b.n	8003170 <LL_ADC_REG_IsConversionOngoing+0x1a>
 800316e:	2300      	movs	r3, #0
}
 8003170:	4618      	mov	r0, r3
 8003172:	370c      	adds	r7, #12
 8003174:	46bd      	mov	sp, r7
 8003176:	f85d 7b04 	ldr.w	r7, [sp], #4
 800317a:	4770      	bx	lr

0800317c <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 800317c:	b480      	push	{r7}
 800317e:	b083      	sub	sp, #12
 8003180:	af00      	add	r7, sp, #0
 8003182:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8003184:	687b      	ldr	r3, [r7, #4]
 8003186:	689b      	ldr	r3, [r3, #8]
 8003188:	f003 0308 	and.w	r3, r3, #8
 800318c:	2b08      	cmp	r3, #8
 800318e:	d101      	bne.n	8003194 <LL_ADC_INJ_IsConversionOngoing+0x18>
 8003190:	2301      	movs	r3, #1
 8003192:	e000      	b.n	8003196 <LL_ADC_INJ_IsConversionOngoing+0x1a>
 8003194:	2300      	movs	r3, #0
}
 8003196:	4618      	mov	r0, r3
 8003198:	370c      	adds	r7, #12
 800319a:	46bd      	mov	sp, r7
 800319c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031a0:	4770      	bx	lr
	...

080031a4 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 80031a4:	b590      	push	{r4, r7, lr}
 80031a6:	b089      	sub	sp, #36	; 0x24
 80031a8:	af00      	add	r7, sp, #0
 80031aa:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80031ac:	2300      	movs	r3, #0
 80031ae:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpCFGR;
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 80031b0:	2300      	movs	r3, #0
 80031b2:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;

  /* Check ADC handle */
  if (hadc == NULL)
 80031b4:	687b      	ldr	r3, [r7, #4]
 80031b6:	2b00      	cmp	r3, #0
 80031b8:	d101      	bne.n	80031be <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 80031ba:	2301      	movs	r3, #1
 80031bc:	e1ad      	b.n	800351a <HAL_ADC_Init+0x376>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 80031be:	687b      	ldr	r3, [r7, #4]
 80031c0:	695b      	ldr	r3, [r3, #20]
 80031c2:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 80031c4:	687b      	ldr	r3, [r7, #4]
 80031c6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80031c8:	2b00      	cmp	r3, #0
 80031ca:	d109      	bne.n	80031e0 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80031cc:	6878      	ldr	r0, [r7, #4]
 80031ce:	f7fe f853 	bl	8001278 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 80031d2:	687b      	ldr	r3, [r7, #4]
 80031d4:	2200      	movs	r2, #0
 80031d6:	661a      	str	r2, [r3, #96]	; 0x60

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 80031d8:	687b      	ldr	r3, [r7, #4]
 80031da:	2200      	movs	r2, #0
 80031dc:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 80031e0:	687b      	ldr	r3, [r7, #4]
 80031e2:	681b      	ldr	r3, [r3, #0]
 80031e4:	4618      	mov	r0, r3
 80031e6:	f7ff ff67 	bl	80030b8 <LL_ADC_IsDeepPowerDownEnabled>
 80031ea:	4603      	mov	r3, r0
 80031ec:	2b00      	cmp	r3, #0
 80031ee:	d004      	beq.n	80031fa <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 80031f0:	687b      	ldr	r3, [r7, #4]
 80031f2:	681b      	ldr	r3, [r3, #0]
 80031f4:	4618      	mov	r0, r3
 80031f6:	f7ff ff4d 	bl	8003094 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 80031fa:	687b      	ldr	r3, [r7, #4]
 80031fc:	681b      	ldr	r3, [r3, #0]
 80031fe:	4618      	mov	r0, r3
 8003200:	f7ff ff82 	bl	8003108 <LL_ADC_IsInternalRegulatorEnabled>
 8003204:	4603      	mov	r3, r0
 8003206:	2b00      	cmp	r3, #0
 8003208:	d113      	bne.n	8003232 <HAL_ADC_Init+0x8e>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 800320a:	687b      	ldr	r3, [r7, #4]
 800320c:	681b      	ldr	r3, [r3, #0]
 800320e:	4618      	mov	r0, r3
 8003210:	f7ff ff66 	bl	80030e0 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * (SystemCoreClock / (100000UL * 2UL)));
 8003214:	4b9e      	ldr	r3, [pc, #632]	; (8003490 <HAL_ADC_Init+0x2ec>)
 8003216:	681b      	ldr	r3, [r3, #0]
 8003218:	099b      	lsrs	r3, r3, #6
 800321a:	4a9e      	ldr	r2, [pc, #632]	; (8003494 <HAL_ADC_Init+0x2f0>)
 800321c:	fba2 2303 	umull	r2, r3, r2, r3
 8003220:	099b      	lsrs	r3, r3, #6
 8003222:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8003224:	e002      	b.n	800322c <HAL_ADC_Init+0x88>
    {
      wait_loop_index--;
 8003226:	68bb      	ldr	r3, [r7, #8]
 8003228:	3b01      	subs	r3, #1
 800322a:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 800322c:	68bb      	ldr	r3, [r7, #8]
 800322e:	2b00      	cmp	r3, #0
 8003230:	d1f9      	bne.n	8003226 <HAL_ADC_Init+0x82>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8003232:	687b      	ldr	r3, [r7, #4]
 8003234:	681b      	ldr	r3, [r3, #0]
 8003236:	4618      	mov	r0, r3
 8003238:	f7ff ff66 	bl	8003108 <LL_ADC_IsInternalRegulatorEnabled>
 800323c:	4603      	mov	r3, r0
 800323e:	2b00      	cmp	r3, #0
 8003240:	d10d      	bne.n	800325e <HAL_ADC_Init+0xba>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003242:	687b      	ldr	r3, [r7, #4]
 8003244:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003246:	f043 0210 	orr.w	r2, r3, #16
 800324a:	687b      	ldr	r3, [r7, #4]
 800324c:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800324e:	687b      	ldr	r3, [r7, #4]
 8003250:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003252:	f043 0201 	orr.w	r2, r3, #1
 8003256:	687b      	ldr	r3, [r7, #4]
 8003258:	661a      	str	r2, [r3, #96]	; 0x60

    tmp_hal_status = HAL_ERROR;
 800325a:	2301      	movs	r3, #1
 800325c:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 800325e:	687b      	ldr	r3, [r7, #4]
 8003260:	681b      	ldr	r3, [r3, #0]
 8003262:	4618      	mov	r0, r3
 8003264:	f7ff ff77 	bl	8003156 <LL_ADC_REG_IsConversionOngoing>
 8003268:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 800326a:	687b      	ldr	r3, [r7, #4]
 800326c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800326e:	f003 0310 	and.w	r3, r3, #16
 8003272:	2b00      	cmp	r3, #0
 8003274:	f040 8148 	bne.w	8003508 <HAL_ADC_Init+0x364>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 8003278:	697b      	ldr	r3, [r7, #20]
 800327a:	2b00      	cmp	r3, #0
 800327c:	f040 8144 	bne.w	8003508 <HAL_ADC_Init+0x364>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8003280:	687b      	ldr	r3, [r7, #4]
 8003282:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003284:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 8003288:	f043 0202 	orr.w	r2, r3, #2
 800328c:	687b      	ldr	r3, [r7, #4]
 800328e:	65da      	str	r2, [r3, #92]	; 0x5c
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8003290:	687b      	ldr	r3, [r7, #4]
 8003292:	681b      	ldr	r3, [r3, #0]
 8003294:	4618      	mov	r0, r3
 8003296:	f7ff ff4b 	bl	8003130 <LL_ADC_IsEnabled>
 800329a:	4603      	mov	r3, r0
 800329c:	2b00      	cmp	r3, #0
 800329e:	d141      	bne.n	8003324 <HAL_ADC_Init+0x180>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 80032a0:	687b      	ldr	r3, [r7, #4]
 80032a2:	681b      	ldr	r3, [r3, #0]
 80032a4:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80032a8:	d004      	beq.n	80032b4 <HAL_ADC_Init+0x110>
 80032aa:	687b      	ldr	r3, [r7, #4]
 80032ac:	681b      	ldr	r3, [r3, #0]
 80032ae:	4a7a      	ldr	r2, [pc, #488]	; (8003498 <HAL_ADC_Init+0x2f4>)
 80032b0:	4293      	cmp	r3, r2
 80032b2:	d10f      	bne.n	80032d4 <HAL_ADC_Init+0x130>
 80032b4:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
 80032b8:	f7ff ff3a 	bl	8003130 <LL_ADC_IsEnabled>
 80032bc:	4604      	mov	r4, r0
 80032be:	4876      	ldr	r0, [pc, #472]	; (8003498 <HAL_ADC_Init+0x2f4>)
 80032c0:	f7ff ff36 	bl	8003130 <LL_ADC_IsEnabled>
 80032c4:	4603      	mov	r3, r0
 80032c6:	4323      	orrs	r3, r4
 80032c8:	2b00      	cmp	r3, #0
 80032ca:	bf0c      	ite	eq
 80032cc:	2301      	moveq	r3, #1
 80032ce:	2300      	movne	r3, #0
 80032d0:	b2db      	uxtb	r3, r3
 80032d2:	e012      	b.n	80032fa <HAL_ADC_Init+0x156>
 80032d4:	4871      	ldr	r0, [pc, #452]	; (800349c <HAL_ADC_Init+0x2f8>)
 80032d6:	f7ff ff2b 	bl	8003130 <LL_ADC_IsEnabled>
 80032da:	4604      	mov	r4, r0
 80032dc:	4870      	ldr	r0, [pc, #448]	; (80034a0 <HAL_ADC_Init+0x2fc>)
 80032de:	f7ff ff27 	bl	8003130 <LL_ADC_IsEnabled>
 80032e2:	4603      	mov	r3, r0
 80032e4:	431c      	orrs	r4, r3
 80032e6:	486f      	ldr	r0, [pc, #444]	; (80034a4 <HAL_ADC_Init+0x300>)
 80032e8:	f7ff ff22 	bl	8003130 <LL_ADC_IsEnabled>
 80032ec:	4603      	mov	r3, r0
 80032ee:	4323      	orrs	r3, r4
 80032f0:	2b00      	cmp	r3, #0
 80032f2:	bf0c      	ite	eq
 80032f4:	2301      	moveq	r3, #1
 80032f6:	2300      	movne	r3, #0
 80032f8:	b2db      	uxtb	r3, r3
 80032fa:	2b00      	cmp	r3, #0
 80032fc:	d012      	beq.n	8003324 <HAL_ADC_Init+0x180>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 80032fe:	687b      	ldr	r3, [r7, #4]
 8003300:	681b      	ldr	r3, [r3, #0]
 8003302:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8003306:	d004      	beq.n	8003312 <HAL_ADC_Init+0x16e>
 8003308:	687b      	ldr	r3, [r7, #4]
 800330a:	681b      	ldr	r3, [r3, #0]
 800330c:	4a62      	ldr	r2, [pc, #392]	; (8003498 <HAL_ADC_Init+0x2f4>)
 800330e:	4293      	cmp	r3, r2
 8003310:	d101      	bne.n	8003316 <HAL_ADC_Init+0x172>
 8003312:	4a65      	ldr	r2, [pc, #404]	; (80034a8 <HAL_ADC_Init+0x304>)
 8003314:	e000      	b.n	8003318 <HAL_ADC_Init+0x174>
 8003316:	4a65      	ldr	r2, [pc, #404]	; (80034ac <HAL_ADC_Init+0x308>)
 8003318:	687b      	ldr	r3, [r7, #4]
 800331a:	685b      	ldr	r3, [r3, #4]
 800331c:	4619      	mov	r1, r3
 800331e:	4610      	mov	r0, r2
 8003320:	f7ff fd7e 	bl	8002e20 <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8003324:	687b      	ldr	r3, [r7, #4]
 8003326:	7f5b      	ldrb	r3, [r3, #29]
 8003328:	035a      	lsls	r2, r3, #13
                hadc->Init.Overrun                                                     |
 800332a:	687b      	ldr	r3, [r7, #4]
 800332c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 800332e:	431a      	orrs	r2, r3
                hadc->Init.DataAlign                                                   |
 8003330:	687b      	ldr	r3, [r7, #4]
 8003332:	68db      	ldr	r3, [r3, #12]
                hadc->Init.Overrun                                                     |
 8003334:	431a      	orrs	r2, r3
                hadc->Init.Resolution                                                  |
 8003336:	687b      	ldr	r3, [r7, #4]
 8003338:	689b      	ldr	r3, [r3, #8]
                hadc->Init.DataAlign                                                   |
 800333a:	431a      	orrs	r2, r3
                ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 800333c:	687b      	ldr	r3, [r7, #4]
 800333e:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8003342:	041b      	lsls	r3, r3, #16
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8003344:	4313      	orrs	r3, r2
 8003346:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8003348:	687b      	ldr	r3, [r7, #4]
 800334a:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800334e:	2b01      	cmp	r3, #1
 8003350:	d106      	bne.n	8003360 <HAL_ADC_Init+0x1bc>
    {
      tmpCFGR |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 8003352:	687b      	ldr	r3, [r7, #4]
 8003354:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003356:	3b01      	subs	r3, #1
 8003358:	045b      	lsls	r3, r3, #17
 800335a:	69ba      	ldr	r2, [r7, #24]
 800335c:	4313      	orrs	r3, r2
 800335e:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8003360:	687b      	ldr	r3, [r7, #4]
 8003362:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003364:	2b00      	cmp	r3, #0
 8003366:	d009      	beq.n	800337c <HAL_ADC_Init+0x1d8>
    {
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8003368:	687b      	ldr	r3, [r7, #4]
 800336a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800336c:	f403 7278 	and.w	r2, r3, #992	; 0x3e0
                  | hadc->Init.ExternalTrigConvEdge
 8003370:	687b      	ldr	r3, [r7, #4]
 8003372:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003374:	4313      	orrs	r3, r2
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8003376:	69ba      	ldr	r2, [r7, #24]
 8003378:	4313      	orrs	r3, r2
 800337a:	61bb      	str	r3, [r7, #24]
                 );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
 800337c:	687b      	ldr	r3, [r7, #4]
 800337e:	681b      	ldr	r3, [r3, #0]
 8003380:	68da      	ldr	r2, [r3, #12]
 8003382:	4b4b      	ldr	r3, [pc, #300]	; (80034b0 <HAL_ADC_Init+0x30c>)
 8003384:	4013      	ands	r3, r2
 8003386:	687a      	ldr	r2, [r7, #4]
 8003388:	6812      	ldr	r2, [r2, #0]
 800338a:	69b9      	ldr	r1, [r7, #24]
 800338c:	430b      	orrs	r3, r1
 800338e:	60d3      	str	r3, [r2, #12]

    /* Configuration of sampling mode */
    MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_BULB | ADC_CFGR2_SMPTRIG, hadc->Init.SamplingMode);
 8003390:	687b      	ldr	r3, [r7, #4]
 8003392:	681b      	ldr	r3, [r3, #0]
 8003394:	691b      	ldr	r3, [r3, #16]
 8003396:	f023 6140 	bic.w	r1, r3, #201326592	; 0xc000000
 800339a:	687b      	ldr	r3, [r7, #4]
 800339c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800339e:	687b      	ldr	r3, [r7, #4]
 80033a0:	681b      	ldr	r3, [r3, #0]
 80033a2:	430a      	orrs	r2, r1
 80033a4:	611a      	str	r2, [r3, #16]
    /* conversion on going on regular and injected groups:                    */
    /*  - Gain Compensation               Init.GainCompensation               */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80033a6:	687b      	ldr	r3, [r7, #4]
 80033a8:	681b      	ldr	r3, [r3, #0]
 80033aa:	4618      	mov	r0, r3
 80033ac:	f7ff fed3 	bl	8003156 <LL_ADC_REG_IsConversionOngoing>
 80033b0:	6138      	str	r0, [r7, #16]
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 80033b2:	687b      	ldr	r3, [r7, #4]
 80033b4:	681b      	ldr	r3, [r3, #0]
 80033b6:	4618      	mov	r0, r3
 80033b8:	f7ff fee0 	bl	800317c <LL_ADC_INJ_IsConversionOngoing>
 80033bc:	60f8      	str	r0, [r7, #12]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 80033be:	693b      	ldr	r3, [r7, #16]
 80033c0:	2b00      	cmp	r3, #0
 80033c2:	d17f      	bne.n	80034c4 <HAL_ADC_Init+0x320>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 80033c4:	68fb      	ldr	r3, [r7, #12]
 80033c6:	2b00      	cmp	r3, #0
 80033c8:	d17c      	bne.n	80034c4 <HAL_ADC_Init+0x320>
       )
    {
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
                 ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 80033ca:	687b      	ldr	r3, [r7, #4]
 80033cc:	7f1b      	ldrb	r3, [r3, #28]
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 80033ce:	039a      	lsls	r2, r3, #14
                 ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 80033d0:	687b      	ldr	r3, [r7, #4]
 80033d2:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 80033d6:	005b      	lsls	r3, r3, #1
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 80033d8:	4313      	orrs	r3, r2
 80033da:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 80033dc:	687b      	ldr	r3, [r7, #4]
 80033de:	681b      	ldr	r3, [r3, #0]
 80033e0:	68db      	ldr	r3, [r3, #12]
 80033e2:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80033e6:	f023 0302 	bic.w	r3, r3, #2
 80033ea:	687a      	ldr	r2, [r7, #4]
 80033ec:	6812      	ldr	r2, [r2, #0]
 80033ee:	69b9      	ldr	r1, [r7, #24]
 80033f0:	430b      	orrs	r3, r1
 80033f2:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.GainCompensation != 0UL)
 80033f4:	687b      	ldr	r3, [r7, #4]
 80033f6:	691b      	ldr	r3, [r3, #16]
 80033f8:	2b00      	cmp	r3, #0
 80033fa:	d017      	beq.n	800342c <HAL_ADC_Init+0x288>
      {
        SET_BIT(hadc->Instance->CFGR2, ADC_CFGR2_GCOMP);
 80033fc:	687b      	ldr	r3, [r7, #4]
 80033fe:	681b      	ldr	r3, [r3, #0]
 8003400:	691a      	ldr	r2, [r3, #16]
 8003402:	687b      	ldr	r3, [r7, #4]
 8003404:	681b      	ldr	r3, [r3, #0]
 8003406:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 800340a:	611a      	str	r2, [r3, #16]
        MODIFY_REG(hadc->Instance->GCOMP, ADC_GCOMP_GCOMPCOEFF, hadc->Init.GainCompensation);
 800340c:	687b      	ldr	r3, [r7, #4]
 800340e:	681b      	ldr	r3, [r3, #0]
 8003410:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 8003414:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 8003418:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 800341c:	687a      	ldr	r2, [r7, #4]
 800341e:	6911      	ldr	r1, [r2, #16]
 8003420:	687a      	ldr	r2, [r7, #4]
 8003422:	6812      	ldr	r2, [r2, #0]
 8003424:	430b      	orrs	r3, r1
 8003426:	f8c2 30c0 	str.w	r3, [r2, #192]	; 0xc0
 800342a:	e013      	b.n	8003454 <HAL_ADC_Init+0x2b0>
      }
      else
      {
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_GCOMP);
 800342c:	687b      	ldr	r3, [r7, #4]
 800342e:	681b      	ldr	r3, [r3, #0]
 8003430:	691a      	ldr	r2, [r3, #16]
 8003432:	687b      	ldr	r3, [r7, #4]
 8003434:	681b      	ldr	r3, [r3, #0]
 8003436:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 800343a:	611a      	str	r2, [r3, #16]
        MODIFY_REG(hadc->Instance->GCOMP, ADC_GCOMP_GCOMPCOEFF, 0UL);
 800343c:	687b      	ldr	r3, [r7, #4]
 800343e:	681b      	ldr	r3, [r3, #0]
 8003440:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 8003444:	687a      	ldr	r2, [r7, #4]
 8003446:	6812      	ldr	r2, [r2, #0]
 8003448:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 800344c:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8003450:	f8c2 30c0 	str.w	r3, [r2, #192]	; 0xc0
      }

      if (hadc->Init.OversamplingMode == ENABLE)
 8003454:	687b      	ldr	r3, [r7, #4]
 8003456:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800345a:	2b01      	cmp	r3, #1
 800345c:	d12a      	bne.n	80034b4 <HAL_ADC_Init+0x310>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 800345e:	687b      	ldr	r3, [r7, #4]
 8003460:	681b      	ldr	r3, [r3, #0]
 8003462:	691b      	ldr	r3, [r3, #16]
 8003464:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 8003468:	f023 0304 	bic.w	r3, r3, #4
 800346c:	687a      	ldr	r2, [r7, #4]
 800346e:	6c51      	ldr	r1, [r2, #68]	; 0x44
 8003470:	687a      	ldr	r2, [r7, #4]
 8003472:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8003474:	4311      	orrs	r1, r2
 8003476:	687a      	ldr	r2, [r7, #4]
 8003478:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 800347a:	4311      	orrs	r1, r2
 800347c:	687a      	ldr	r2, [r7, #4]
 800347e:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8003480:	430a      	orrs	r2, r1
 8003482:	431a      	orrs	r2, r3
 8003484:	687b      	ldr	r3, [r7, #4]
 8003486:	681b      	ldr	r3, [r3, #0]
 8003488:	f042 0201 	orr.w	r2, r2, #1
 800348c:	611a      	str	r2, [r3, #16]
 800348e:	e019      	b.n	80034c4 <HAL_ADC_Init+0x320>
 8003490:	20000010 	.word	0x20000010
 8003494:	053e2d63 	.word	0x053e2d63
 8003498:	50000100 	.word	0x50000100
 800349c:	50000400 	.word	0x50000400
 80034a0:	50000500 	.word	0x50000500
 80034a4:	50000600 	.word	0x50000600
 80034a8:	50000300 	.word	0x50000300
 80034ac:	50000700 	.word	0x50000700
 80034b0:	fff04007 	.word	0xfff04007
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 80034b4:	687b      	ldr	r3, [r7, #4]
 80034b6:	681b      	ldr	r3, [r3, #0]
 80034b8:	691a      	ldr	r2, [r3, #16]
 80034ba:	687b      	ldr	r3, [r7, #4]
 80034bc:	681b      	ldr	r3, [r3, #0]
 80034be:	f022 0201 	bic.w	r2, r2, #1
 80034c2:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 80034c4:	687b      	ldr	r3, [r7, #4]
 80034c6:	695b      	ldr	r3, [r3, #20]
 80034c8:	2b01      	cmp	r3, #1
 80034ca:	d10c      	bne.n	80034e6 <HAL_ADC_Init+0x342>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 80034cc:	687b      	ldr	r3, [r7, #4]
 80034ce:	681b      	ldr	r3, [r3, #0]
 80034d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80034d2:	f023 010f 	bic.w	r1, r3, #15
 80034d6:	687b      	ldr	r3, [r7, #4]
 80034d8:	6a1b      	ldr	r3, [r3, #32]
 80034da:	1e5a      	subs	r2, r3, #1
 80034dc:	687b      	ldr	r3, [r7, #4]
 80034de:	681b      	ldr	r3, [r3, #0]
 80034e0:	430a      	orrs	r2, r1
 80034e2:	631a      	str	r2, [r3, #48]	; 0x30
 80034e4:	e007      	b.n	80034f6 <HAL_ADC_Init+0x352>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 80034e6:	687b      	ldr	r3, [r7, #4]
 80034e8:	681b      	ldr	r3, [r3, #0]
 80034ea:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80034ec:	687b      	ldr	r3, [r7, #4]
 80034ee:	681b      	ldr	r3, [r3, #0]
 80034f0:	f022 020f 	bic.w	r2, r2, #15
 80034f4:	631a      	str	r2, [r3, #48]	; 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 80034f6:	687b      	ldr	r3, [r7, #4]
 80034f8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80034fa:	f023 0303 	bic.w	r3, r3, #3
 80034fe:	f043 0201 	orr.w	r2, r3, #1
 8003502:	687b      	ldr	r3, [r7, #4]
 8003504:	65da      	str	r2, [r3, #92]	; 0x5c
 8003506:	e007      	b.n	8003518 <HAL_ADC_Init+0x374>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003508:	687b      	ldr	r3, [r7, #4]
 800350a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800350c:	f043 0210 	orr.w	r2, r3, #16
 8003510:	687b      	ldr	r3, [r7, #4]
 8003512:	65da      	str	r2, [r3, #92]	; 0x5c

    tmp_hal_status = HAL_ERROR;
 8003514:	2301      	movs	r3, #1
 8003516:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 8003518:	7ffb      	ldrb	r3, [r7, #31]
}
 800351a:	4618      	mov	r0, r3
 800351c:	3724      	adds	r7, #36	; 0x24
 800351e:	46bd      	mov	sp, r7
 8003520:	bd90      	pop	{r4, r7, pc}
 8003522:	bf00      	nop

08003524 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 8003524:	b580      	push	{r7, lr}
 8003526:	b0a6      	sub	sp, #152	; 0x98
 8003528:	af00      	add	r7, sp, #0
 800352a:	6078      	str	r0, [r7, #4]
 800352c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800352e:	2300      	movs	r3, #0
 8003530:	f887 3097 	strb.w	r3, [r7, #151]	; 0x97
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0;
 8003534:	2300      	movs	r3, #0
 8003536:	60bb      	str	r3, [r7, #8]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, sConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8003538:	687b      	ldr	r3, [r7, #4]
 800353a:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 800353e:	2b01      	cmp	r3, #1
 8003540:	d101      	bne.n	8003546 <HAL_ADC_ConfigChannel+0x22>
 8003542:	2302      	movs	r3, #2
 8003544:	e38e      	b.n	8003c64 <HAL_ADC_ConfigChannel+0x740>
 8003546:	687b      	ldr	r3, [r7, #4]
 8003548:	2201      	movs	r2, #1
 800354a:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 800354e:	687b      	ldr	r3, [r7, #4]
 8003550:	681b      	ldr	r3, [r3, #0]
 8003552:	4618      	mov	r0, r3
 8003554:	f7ff fdff 	bl	8003156 <LL_ADC_REG_IsConversionOngoing>
 8003558:	4603      	mov	r3, r0
 800355a:	2b00      	cmp	r3, #0
 800355c:	f040 836f 	bne.w	8003c3e <HAL_ADC_ConfigChannel+0x71a>
  {
    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, sConfig->Rank, sConfig->Channel);
 8003560:	687b      	ldr	r3, [r7, #4]
 8003562:	6818      	ldr	r0, [r3, #0]
 8003564:	683b      	ldr	r3, [r7, #0]
 8003566:	6859      	ldr	r1, [r3, #4]
 8003568:	683b      	ldr	r3, [r7, #0]
 800356a:	681b      	ldr	r3, [r3, #0]
 800356c:	461a      	mov	r2, r3
 800356e:	f7ff fd1c 	bl	8002faa <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8003572:	687b      	ldr	r3, [r7, #4]
 8003574:	681b      	ldr	r3, [r3, #0]
 8003576:	4618      	mov	r0, r3
 8003578:	f7ff fded 	bl	8003156 <LL_ADC_REG_IsConversionOngoing>
 800357c:	f8c7 0090 	str.w	r0, [r7, #144]	; 0x90
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8003580:	687b      	ldr	r3, [r7, #4]
 8003582:	681b      	ldr	r3, [r3, #0]
 8003584:	4618      	mov	r0, r3
 8003586:	f7ff fdf9 	bl	800317c <LL_ADC_INJ_IsConversionOngoing>
 800358a:	f8c7 008c 	str.w	r0, [r7, #140]	; 0x8c
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 800358e:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8003592:	2b00      	cmp	r3, #0
 8003594:	f040 817b 	bne.w	800388e <HAL_ADC_ConfigChannel+0x36a>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8003598:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800359c:	2b00      	cmp	r3, #0
 800359e:	f040 8176 	bne.w	800388e <HAL_ADC_ConfigChannel+0x36a>
       )
    {
      /* Manage specific case of sampling time 3.5 cycles replacing 2.5 cyles */
      if (sConfig->SamplingTime == ADC_SAMPLETIME_3CYCLES_5)
 80035a2:	683b      	ldr	r3, [r7, #0]
 80035a4:	689b      	ldr	r3, [r3, #8]
 80035a6:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80035aa:	d10f      	bne.n	80035cc <HAL_ADC_ConfigChannel+0xa8>
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, LL_ADC_SAMPLINGTIME_2CYCLES_5);
 80035ac:	687b      	ldr	r3, [r7, #4]
 80035ae:	6818      	ldr	r0, [r3, #0]
 80035b0:	683b      	ldr	r3, [r7, #0]
 80035b2:	681b      	ldr	r3, [r3, #0]
 80035b4:	2200      	movs	r2, #0
 80035b6:	4619      	mov	r1, r3
 80035b8:	f7ff fd20 	bl	8002ffc <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5);
 80035bc:	687b      	ldr	r3, [r7, #4]
 80035be:	681b      	ldr	r3, [r3, #0]
 80035c0:	f04f 4100 	mov.w	r1, #2147483648	; 0x80000000
 80035c4:	4618      	mov	r0, r3
 80035c6:	f7ff fcdd 	bl	8002f84 <LL_ADC_SetSamplingTimeCommonConfig>
 80035ca:	e00e      	b.n	80035ea <HAL_ADC_ConfigChannel+0xc6>
      }
      else
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, sConfig->SamplingTime);
 80035cc:	687b      	ldr	r3, [r7, #4]
 80035ce:	6818      	ldr	r0, [r3, #0]
 80035d0:	683b      	ldr	r3, [r7, #0]
 80035d2:	6819      	ldr	r1, [r3, #0]
 80035d4:	683b      	ldr	r3, [r7, #0]
 80035d6:	689b      	ldr	r3, [r3, #8]
 80035d8:	461a      	mov	r2, r3
 80035da:	f7ff fd0f 	bl	8002ffc <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
 80035de:	687b      	ldr	r3, [r7, #4]
 80035e0:	681b      	ldr	r3, [r3, #0]
 80035e2:	2100      	movs	r1, #0
 80035e4:	4618      	mov	r0, r3
 80035e6:	f7ff fccd 	bl	8002f84 <LL_ADC_SetSamplingTimeCommonConfig>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 80035ea:	683b      	ldr	r3, [r7, #0]
 80035ec:	695a      	ldr	r2, [r3, #20]
 80035ee:	687b      	ldr	r3, [r7, #4]
 80035f0:	681b      	ldr	r3, [r3, #0]
 80035f2:	68db      	ldr	r3, [r3, #12]
 80035f4:	08db      	lsrs	r3, r3, #3
 80035f6:	f003 0303 	and.w	r3, r3, #3
 80035fa:	005b      	lsls	r3, r3, #1
 80035fc:	fa02 f303 	lsl.w	r3, r2, r3
 8003600:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88

      if (sConfig->OffsetNumber != ADC_OFFSET_NONE)
 8003604:	683b      	ldr	r3, [r7, #0]
 8003606:	691b      	ldr	r3, [r3, #16]
 8003608:	2b04      	cmp	r3, #4
 800360a:	d022      	beq.n	8003652 <HAL_ADC_ConfigChannel+0x12e>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, sConfig->OffsetNumber, sConfig->Channel, tmpOffsetShifted);
 800360c:	687b      	ldr	r3, [r7, #4]
 800360e:	6818      	ldr	r0, [r3, #0]
 8003610:	683b      	ldr	r3, [r7, #0]
 8003612:	6919      	ldr	r1, [r3, #16]
 8003614:	683b      	ldr	r3, [r7, #0]
 8003616:	681a      	ldr	r2, [r3, #0]
 8003618:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800361c:	f7ff fc34 	bl	8002e88 <LL_ADC_SetOffset>

        assert_param(IS_ADC_OFFSET_SIGN(sConfig->OffsetSign));
        assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetSaturation));
        /* Set ADC selected offset sign & saturation */
        LL_ADC_SetOffsetSign(hadc->Instance, sConfig->OffsetNumber, sConfig->OffsetSign);
 8003620:	687b      	ldr	r3, [r7, #4]
 8003622:	6818      	ldr	r0, [r3, #0]
 8003624:	683b      	ldr	r3, [r7, #0]
 8003626:	6919      	ldr	r1, [r3, #16]
 8003628:	683b      	ldr	r3, [r7, #0]
 800362a:	699b      	ldr	r3, [r3, #24]
 800362c:	461a      	mov	r2, r3
 800362e:	f7ff fc79 	bl	8002f24 <LL_ADC_SetOffsetSign>
        LL_ADC_SetOffsetSaturation(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetSaturation == ENABLE) ? LL_ADC_OFFSET_SATURATION_ENABLE : LL_ADC_OFFSET_SATURATION_DISABLE);
 8003632:	687b      	ldr	r3, [r7, #4]
 8003634:	6818      	ldr	r0, [r3, #0]
 8003636:	683b      	ldr	r3, [r7, #0]
 8003638:	6919      	ldr	r1, [r3, #16]
 800363a:	683b      	ldr	r3, [r7, #0]
 800363c:	7f1b      	ldrb	r3, [r3, #28]
 800363e:	2b01      	cmp	r3, #1
 8003640:	d102      	bne.n	8003648 <HAL_ADC_ConfigChannel+0x124>
 8003642:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8003646:	e000      	b.n	800364a <HAL_ADC_ConfigChannel+0x126>
 8003648:	2300      	movs	r3, #0
 800364a:	461a      	mov	r2, r3
 800364c:	f7ff fc82 	bl	8002f54 <LL_ADC_SetOffsetSaturation>
 8003650:	e11d      	b.n	800388e <HAL_ADC_ConfigChannel+0x36a>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if(__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8003652:	687b      	ldr	r3, [r7, #4]
 8003654:	681b      	ldr	r3, [r3, #0]
 8003656:	2100      	movs	r1, #0
 8003658:	4618      	mov	r0, r3
 800365a:	f7ff fc37 	bl	8002ecc <LL_ADC_GetOffsetChannel>
 800365e:	4603      	mov	r3, r0
 8003660:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003664:	2b00      	cmp	r3, #0
 8003666:	d10a      	bne.n	800367e <HAL_ADC_ConfigChannel+0x15a>
 8003668:	687b      	ldr	r3, [r7, #4]
 800366a:	681b      	ldr	r3, [r3, #0]
 800366c:	2100      	movs	r1, #0
 800366e:	4618      	mov	r0, r3
 8003670:	f7ff fc2c 	bl	8002ecc <LL_ADC_GetOffsetChannel>
 8003674:	4603      	mov	r3, r0
 8003676:	0e9b      	lsrs	r3, r3, #26
 8003678:	f003 021f 	and.w	r2, r3, #31
 800367c:	e012      	b.n	80036a4 <HAL_ADC_ConfigChannel+0x180>
 800367e:	687b      	ldr	r3, [r7, #4]
 8003680:	681b      	ldr	r3, [r3, #0]
 8003682:	2100      	movs	r1, #0
 8003684:	4618      	mov	r0, r3
 8003686:	f7ff fc21 	bl	8002ecc <LL_ADC_GetOffsetChannel>
 800368a:	4603      	mov	r3, r0
 800368c:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003690:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8003694:	fa93 f3a3 	rbit	r3, r3
 8003698:	67fb      	str	r3, [r7, #124]	; 0x7c
  return result;
 800369a:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800369c:	fab3 f383 	clz	r3, r3
 80036a0:	b2db      	uxtb	r3, r3
 80036a2:	461a      	mov	r2, r3
 80036a4:	683b      	ldr	r3, [r7, #0]
 80036a6:	681b      	ldr	r3, [r3, #0]
 80036a8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80036ac:	2b00      	cmp	r3, #0
 80036ae:	d105      	bne.n	80036bc <HAL_ADC_ConfigChannel+0x198>
 80036b0:	683b      	ldr	r3, [r7, #0]
 80036b2:	681b      	ldr	r3, [r3, #0]
 80036b4:	0e9b      	lsrs	r3, r3, #26
 80036b6:	f003 031f 	and.w	r3, r3, #31
 80036ba:	e00a      	b.n	80036d2 <HAL_ADC_ConfigChannel+0x1ae>
 80036bc:	683b      	ldr	r3, [r7, #0]
 80036be:	681b      	ldr	r3, [r3, #0]
 80036c0:	67bb      	str	r3, [r7, #120]	; 0x78
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80036c2:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80036c4:	fa93 f3a3 	rbit	r3, r3
 80036c8:	677b      	str	r3, [r7, #116]	; 0x74
  return result;
 80036ca:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80036cc:	fab3 f383 	clz	r3, r3
 80036d0:	b2db      	uxtb	r3, r3
 80036d2:	429a      	cmp	r2, r3
 80036d4:	d106      	bne.n	80036e4 <HAL_ADC_ConfigChannel+0x1c0>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 80036d6:	687b      	ldr	r3, [r7, #4]
 80036d8:	681b      	ldr	r3, [r3, #0]
 80036da:	2200      	movs	r2, #0
 80036dc:	2100      	movs	r1, #0
 80036de:	4618      	mov	r0, r3
 80036e0:	f7ff fc08 	bl	8002ef4 <LL_ADC_SetOffsetState>
        }
        if(__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 80036e4:	687b      	ldr	r3, [r7, #4]
 80036e6:	681b      	ldr	r3, [r3, #0]
 80036e8:	2101      	movs	r1, #1
 80036ea:	4618      	mov	r0, r3
 80036ec:	f7ff fbee 	bl	8002ecc <LL_ADC_GetOffsetChannel>
 80036f0:	4603      	mov	r3, r0
 80036f2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80036f6:	2b00      	cmp	r3, #0
 80036f8:	d10a      	bne.n	8003710 <HAL_ADC_ConfigChannel+0x1ec>
 80036fa:	687b      	ldr	r3, [r7, #4]
 80036fc:	681b      	ldr	r3, [r3, #0]
 80036fe:	2101      	movs	r1, #1
 8003700:	4618      	mov	r0, r3
 8003702:	f7ff fbe3 	bl	8002ecc <LL_ADC_GetOffsetChannel>
 8003706:	4603      	mov	r3, r0
 8003708:	0e9b      	lsrs	r3, r3, #26
 800370a:	f003 021f 	and.w	r2, r3, #31
 800370e:	e010      	b.n	8003732 <HAL_ADC_ConfigChannel+0x20e>
 8003710:	687b      	ldr	r3, [r7, #4]
 8003712:	681b      	ldr	r3, [r3, #0]
 8003714:	2101      	movs	r1, #1
 8003716:	4618      	mov	r0, r3
 8003718:	f7ff fbd8 	bl	8002ecc <LL_ADC_GetOffsetChannel>
 800371c:	4603      	mov	r3, r0
 800371e:	673b      	str	r3, [r7, #112]	; 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003720:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8003722:	fa93 f3a3 	rbit	r3, r3
 8003726:	66fb      	str	r3, [r7, #108]	; 0x6c
  return result;
 8003728:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800372a:	fab3 f383 	clz	r3, r3
 800372e:	b2db      	uxtb	r3, r3
 8003730:	461a      	mov	r2, r3
 8003732:	683b      	ldr	r3, [r7, #0]
 8003734:	681b      	ldr	r3, [r3, #0]
 8003736:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800373a:	2b00      	cmp	r3, #0
 800373c:	d105      	bne.n	800374a <HAL_ADC_ConfigChannel+0x226>
 800373e:	683b      	ldr	r3, [r7, #0]
 8003740:	681b      	ldr	r3, [r3, #0]
 8003742:	0e9b      	lsrs	r3, r3, #26
 8003744:	f003 031f 	and.w	r3, r3, #31
 8003748:	e00a      	b.n	8003760 <HAL_ADC_ConfigChannel+0x23c>
 800374a:	683b      	ldr	r3, [r7, #0]
 800374c:	681b      	ldr	r3, [r3, #0]
 800374e:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003750:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8003752:	fa93 f3a3 	rbit	r3, r3
 8003756:	667b      	str	r3, [r7, #100]	; 0x64
  return result;
 8003758:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800375a:	fab3 f383 	clz	r3, r3
 800375e:	b2db      	uxtb	r3, r3
 8003760:	429a      	cmp	r2, r3
 8003762:	d106      	bne.n	8003772 <HAL_ADC_ConfigChannel+0x24e>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 8003764:	687b      	ldr	r3, [r7, #4]
 8003766:	681b      	ldr	r3, [r3, #0]
 8003768:	2200      	movs	r2, #0
 800376a:	2101      	movs	r1, #1
 800376c:	4618      	mov	r0, r3
 800376e:	f7ff fbc1 	bl	8002ef4 <LL_ADC_SetOffsetState>
        }
        if(__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8003772:	687b      	ldr	r3, [r7, #4]
 8003774:	681b      	ldr	r3, [r3, #0]
 8003776:	2102      	movs	r1, #2
 8003778:	4618      	mov	r0, r3
 800377a:	f7ff fba7 	bl	8002ecc <LL_ADC_GetOffsetChannel>
 800377e:	4603      	mov	r3, r0
 8003780:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003784:	2b00      	cmp	r3, #0
 8003786:	d10a      	bne.n	800379e <HAL_ADC_ConfigChannel+0x27a>
 8003788:	687b      	ldr	r3, [r7, #4]
 800378a:	681b      	ldr	r3, [r3, #0]
 800378c:	2102      	movs	r1, #2
 800378e:	4618      	mov	r0, r3
 8003790:	f7ff fb9c 	bl	8002ecc <LL_ADC_GetOffsetChannel>
 8003794:	4603      	mov	r3, r0
 8003796:	0e9b      	lsrs	r3, r3, #26
 8003798:	f003 021f 	and.w	r2, r3, #31
 800379c:	e010      	b.n	80037c0 <HAL_ADC_ConfigChannel+0x29c>
 800379e:	687b      	ldr	r3, [r7, #4]
 80037a0:	681b      	ldr	r3, [r3, #0]
 80037a2:	2102      	movs	r1, #2
 80037a4:	4618      	mov	r0, r3
 80037a6:	f7ff fb91 	bl	8002ecc <LL_ADC_GetOffsetChannel>
 80037aa:	4603      	mov	r3, r0
 80037ac:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80037ae:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80037b0:	fa93 f3a3 	rbit	r3, r3
 80037b4:	65fb      	str	r3, [r7, #92]	; 0x5c
  return result;
 80037b6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80037b8:	fab3 f383 	clz	r3, r3
 80037bc:	b2db      	uxtb	r3, r3
 80037be:	461a      	mov	r2, r3
 80037c0:	683b      	ldr	r3, [r7, #0]
 80037c2:	681b      	ldr	r3, [r3, #0]
 80037c4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80037c8:	2b00      	cmp	r3, #0
 80037ca:	d105      	bne.n	80037d8 <HAL_ADC_ConfigChannel+0x2b4>
 80037cc:	683b      	ldr	r3, [r7, #0]
 80037ce:	681b      	ldr	r3, [r3, #0]
 80037d0:	0e9b      	lsrs	r3, r3, #26
 80037d2:	f003 031f 	and.w	r3, r3, #31
 80037d6:	e00a      	b.n	80037ee <HAL_ADC_ConfigChannel+0x2ca>
 80037d8:	683b      	ldr	r3, [r7, #0]
 80037da:	681b      	ldr	r3, [r3, #0]
 80037dc:	65bb      	str	r3, [r7, #88]	; 0x58
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80037de:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80037e0:	fa93 f3a3 	rbit	r3, r3
 80037e4:	657b      	str	r3, [r7, #84]	; 0x54
  return result;
 80037e6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80037e8:	fab3 f383 	clz	r3, r3
 80037ec:	b2db      	uxtb	r3, r3
 80037ee:	429a      	cmp	r2, r3
 80037f0:	d106      	bne.n	8003800 <HAL_ADC_ConfigChannel+0x2dc>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 80037f2:	687b      	ldr	r3, [r7, #4]
 80037f4:	681b      	ldr	r3, [r3, #0]
 80037f6:	2200      	movs	r2, #0
 80037f8:	2102      	movs	r1, #2
 80037fa:	4618      	mov	r0, r3
 80037fc:	f7ff fb7a 	bl	8002ef4 <LL_ADC_SetOffsetState>
        }
        if(__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8003800:	687b      	ldr	r3, [r7, #4]
 8003802:	681b      	ldr	r3, [r3, #0]
 8003804:	2103      	movs	r1, #3
 8003806:	4618      	mov	r0, r3
 8003808:	f7ff fb60 	bl	8002ecc <LL_ADC_GetOffsetChannel>
 800380c:	4603      	mov	r3, r0
 800380e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003812:	2b00      	cmp	r3, #0
 8003814:	d10a      	bne.n	800382c <HAL_ADC_ConfigChannel+0x308>
 8003816:	687b      	ldr	r3, [r7, #4]
 8003818:	681b      	ldr	r3, [r3, #0]
 800381a:	2103      	movs	r1, #3
 800381c:	4618      	mov	r0, r3
 800381e:	f7ff fb55 	bl	8002ecc <LL_ADC_GetOffsetChannel>
 8003822:	4603      	mov	r3, r0
 8003824:	0e9b      	lsrs	r3, r3, #26
 8003826:	f003 021f 	and.w	r2, r3, #31
 800382a:	e010      	b.n	800384e <HAL_ADC_ConfigChannel+0x32a>
 800382c:	687b      	ldr	r3, [r7, #4]
 800382e:	681b      	ldr	r3, [r3, #0]
 8003830:	2103      	movs	r1, #3
 8003832:	4618      	mov	r0, r3
 8003834:	f7ff fb4a 	bl	8002ecc <LL_ADC_GetOffsetChannel>
 8003838:	4603      	mov	r3, r0
 800383a:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800383c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800383e:	fa93 f3a3 	rbit	r3, r3
 8003842:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 8003844:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003846:	fab3 f383 	clz	r3, r3
 800384a:	b2db      	uxtb	r3, r3
 800384c:	461a      	mov	r2, r3
 800384e:	683b      	ldr	r3, [r7, #0]
 8003850:	681b      	ldr	r3, [r3, #0]
 8003852:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003856:	2b00      	cmp	r3, #0
 8003858:	d105      	bne.n	8003866 <HAL_ADC_ConfigChannel+0x342>
 800385a:	683b      	ldr	r3, [r7, #0]
 800385c:	681b      	ldr	r3, [r3, #0]
 800385e:	0e9b      	lsrs	r3, r3, #26
 8003860:	f003 031f 	and.w	r3, r3, #31
 8003864:	e00a      	b.n	800387c <HAL_ADC_ConfigChannel+0x358>
 8003866:	683b      	ldr	r3, [r7, #0]
 8003868:	681b      	ldr	r3, [r3, #0]
 800386a:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800386c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800386e:	fa93 f3a3 	rbit	r3, r3
 8003872:	647b      	str	r3, [r7, #68]	; 0x44
  return result;
 8003874:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003876:	fab3 f383 	clz	r3, r3
 800387a:	b2db      	uxtb	r3, r3
 800387c:	429a      	cmp	r2, r3
 800387e:	d106      	bne.n	800388e <HAL_ADC_ConfigChannel+0x36a>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 8003880:	687b      	ldr	r3, [r7, #4]
 8003882:	681b      	ldr	r3, [r3, #0]
 8003884:	2200      	movs	r2, #0
 8003886:	2103      	movs	r1, #3
 8003888:	4618      	mov	r0, r3
 800388a:	f7ff fb33 	bl	8002ef4 <LL_ADC_SetOffsetState>
    }

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 800388e:	687b      	ldr	r3, [r7, #4]
 8003890:	681b      	ldr	r3, [r3, #0]
 8003892:	4618      	mov	r0, r3
 8003894:	f7ff fc4c 	bl	8003130 <LL_ADC_IsEnabled>
 8003898:	4603      	mov	r3, r0
 800389a:	2b00      	cmp	r3, #0
 800389c:	f040 810c 	bne.w	8003ab8 <HAL_ADC_ConfigChannel+0x594>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfig->Channel, sConfig->SingleDiff);
 80038a0:	687b      	ldr	r3, [r7, #4]
 80038a2:	6818      	ldr	r0, [r3, #0]
 80038a4:	683b      	ldr	r3, [r7, #0]
 80038a6:	6819      	ldr	r1, [r3, #0]
 80038a8:	683b      	ldr	r3, [r7, #0]
 80038aa:	68db      	ldr	r3, [r3, #12]
 80038ac:	461a      	mov	r2, r3
 80038ae:	f7ff fbcd 	bl	800304c <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (sConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 80038b2:	683b      	ldr	r3, [r7, #0]
 80038b4:	68db      	ldr	r3, [r3, #12]
 80038b6:	4aaf      	ldr	r2, [pc, #700]	; (8003b74 <HAL_ADC_ConfigChannel+0x650>)
 80038b8:	4293      	cmp	r3, r2
 80038ba:	f040 80fd 	bne.w	8003ab8 <HAL_ADC_ConfigChannel+0x594>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80038be:	687b      	ldr	r3, [r7, #4]
 80038c0:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 80038c2:	683b      	ldr	r3, [r7, #0]
 80038c4:	681b      	ldr	r3, [r3, #0]
 80038c6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80038ca:	2b00      	cmp	r3, #0
 80038cc:	d10b      	bne.n	80038e6 <HAL_ADC_ConfigChannel+0x3c2>
 80038ce:	683b      	ldr	r3, [r7, #0]
 80038d0:	681b      	ldr	r3, [r3, #0]
 80038d2:	0e9b      	lsrs	r3, r3, #26
 80038d4:	3301      	adds	r3, #1
 80038d6:	f003 031f 	and.w	r3, r3, #31
 80038da:	2b09      	cmp	r3, #9
 80038dc:	bf94      	ite	ls
 80038de:	2301      	movls	r3, #1
 80038e0:	2300      	movhi	r3, #0
 80038e2:	b2db      	uxtb	r3, r3
 80038e4:	e012      	b.n	800390c <HAL_ADC_ConfigChannel+0x3e8>
 80038e6:	683b      	ldr	r3, [r7, #0]
 80038e8:	681b      	ldr	r3, [r3, #0]
 80038ea:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80038ec:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80038ee:	fa93 f3a3 	rbit	r3, r3
 80038f2:	63fb      	str	r3, [r7, #60]	; 0x3c
  return result;
 80038f4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80038f6:	fab3 f383 	clz	r3, r3
 80038fa:	b2db      	uxtb	r3, r3
 80038fc:	3301      	adds	r3, #1
 80038fe:	f003 031f 	and.w	r3, r3, #31
 8003902:	2b09      	cmp	r3, #9
 8003904:	bf94      	ite	ls
 8003906:	2301      	movls	r3, #1
 8003908:	2300      	movhi	r3, #0
 800390a:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 800390c:	2b00      	cmp	r3, #0
 800390e:	d064      	beq.n	80039da <HAL_ADC_ConfigChannel+0x4b6>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8003910:	683b      	ldr	r3, [r7, #0]
 8003912:	681b      	ldr	r3, [r3, #0]
 8003914:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003918:	2b00      	cmp	r3, #0
 800391a:	d107      	bne.n	800392c <HAL_ADC_ConfigChannel+0x408>
 800391c:	683b      	ldr	r3, [r7, #0]
 800391e:	681b      	ldr	r3, [r3, #0]
 8003920:	0e9b      	lsrs	r3, r3, #26
 8003922:	3301      	adds	r3, #1
 8003924:	069b      	lsls	r3, r3, #26
 8003926:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 800392a:	e00e      	b.n	800394a <HAL_ADC_ConfigChannel+0x426>
 800392c:	683b      	ldr	r3, [r7, #0]
 800392e:	681b      	ldr	r3, [r3, #0]
 8003930:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003932:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003934:	fa93 f3a3 	rbit	r3, r3
 8003938:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 800393a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800393c:	fab3 f383 	clz	r3, r3
 8003940:	b2db      	uxtb	r3, r3
 8003942:	3301      	adds	r3, #1
 8003944:	069b      	lsls	r3, r3, #26
 8003946:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 800394a:	683b      	ldr	r3, [r7, #0]
 800394c:	681b      	ldr	r3, [r3, #0]
 800394e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003952:	2b00      	cmp	r3, #0
 8003954:	d109      	bne.n	800396a <HAL_ADC_ConfigChannel+0x446>
 8003956:	683b      	ldr	r3, [r7, #0]
 8003958:	681b      	ldr	r3, [r3, #0]
 800395a:	0e9b      	lsrs	r3, r3, #26
 800395c:	3301      	adds	r3, #1
 800395e:	f003 031f 	and.w	r3, r3, #31
 8003962:	2101      	movs	r1, #1
 8003964:	fa01 f303 	lsl.w	r3, r1, r3
 8003968:	e010      	b.n	800398c <HAL_ADC_ConfigChannel+0x468>
 800396a:	683b      	ldr	r3, [r7, #0]
 800396c:	681b      	ldr	r3, [r3, #0]
 800396e:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003970:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003972:	fa93 f3a3 	rbit	r3, r3
 8003976:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 8003978:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800397a:	fab3 f383 	clz	r3, r3
 800397e:	b2db      	uxtb	r3, r3
 8003980:	3301      	adds	r3, #1
 8003982:	f003 031f 	and.w	r3, r3, #31
 8003986:	2101      	movs	r1, #1
 8003988:	fa01 f303 	lsl.w	r3, r1, r3
 800398c:	ea42 0103 	orr.w	r1, r2, r3
 8003990:	683b      	ldr	r3, [r7, #0]
 8003992:	681b      	ldr	r3, [r3, #0]
 8003994:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003998:	2b00      	cmp	r3, #0
 800399a:	d10a      	bne.n	80039b2 <HAL_ADC_ConfigChannel+0x48e>
 800399c:	683b      	ldr	r3, [r7, #0]
 800399e:	681b      	ldr	r3, [r3, #0]
 80039a0:	0e9b      	lsrs	r3, r3, #26
 80039a2:	3301      	adds	r3, #1
 80039a4:	f003 021f 	and.w	r2, r3, #31
 80039a8:	4613      	mov	r3, r2
 80039aa:	005b      	lsls	r3, r3, #1
 80039ac:	4413      	add	r3, r2
 80039ae:	051b      	lsls	r3, r3, #20
 80039b0:	e011      	b.n	80039d6 <HAL_ADC_ConfigChannel+0x4b2>
 80039b2:	683b      	ldr	r3, [r7, #0]
 80039b4:	681b      	ldr	r3, [r3, #0]
 80039b6:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80039b8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80039ba:	fa93 f3a3 	rbit	r3, r3
 80039be:	627b      	str	r3, [r7, #36]	; 0x24
  return result;
 80039c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80039c2:	fab3 f383 	clz	r3, r3
 80039c6:	b2db      	uxtb	r3, r3
 80039c8:	3301      	adds	r3, #1
 80039ca:	f003 021f 	and.w	r2, r3, #31
 80039ce:	4613      	mov	r3, r2
 80039d0:	005b      	lsls	r3, r3, #1
 80039d2:	4413      	add	r3, r2
 80039d4:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80039d6:	430b      	orrs	r3, r1
 80039d8:	e069      	b.n	8003aae <HAL_ADC_ConfigChannel+0x58a>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 80039da:	683b      	ldr	r3, [r7, #0]
 80039dc:	681b      	ldr	r3, [r3, #0]
 80039de:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80039e2:	2b00      	cmp	r3, #0
 80039e4:	d107      	bne.n	80039f6 <HAL_ADC_ConfigChannel+0x4d2>
 80039e6:	683b      	ldr	r3, [r7, #0]
 80039e8:	681b      	ldr	r3, [r3, #0]
 80039ea:	0e9b      	lsrs	r3, r3, #26
 80039ec:	3301      	adds	r3, #1
 80039ee:	069b      	lsls	r3, r3, #26
 80039f0:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80039f4:	e00e      	b.n	8003a14 <HAL_ADC_ConfigChannel+0x4f0>
 80039f6:	683b      	ldr	r3, [r7, #0]
 80039f8:	681b      	ldr	r3, [r3, #0]
 80039fa:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80039fc:	6a3b      	ldr	r3, [r7, #32]
 80039fe:	fa93 f3a3 	rbit	r3, r3
 8003a02:	61fb      	str	r3, [r7, #28]
  return result;
 8003a04:	69fb      	ldr	r3, [r7, #28]
 8003a06:	fab3 f383 	clz	r3, r3
 8003a0a:	b2db      	uxtb	r3, r3
 8003a0c:	3301      	adds	r3, #1
 8003a0e:	069b      	lsls	r3, r3, #26
 8003a10:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8003a14:	683b      	ldr	r3, [r7, #0]
 8003a16:	681b      	ldr	r3, [r3, #0]
 8003a18:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003a1c:	2b00      	cmp	r3, #0
 8003a1e:	d109      	bne.n	8003a34 <HAL_ADC_ConfigChannel+0x510>
 8003a20:	683b      	ldr	r3, [r7, #0]
 8003a22:	681b      	ldr	r3, [r3, #0]
 8003a24:	0e9b      	lsrs	r3, r3, #26
 8003a26:	3301      	adds	r3, #1
 8003a28:	f003 031f 	and.w	r3, r3, #31
 8003a2c:	2101      	movs	r1, #1
 8003a2e:	fa01 f303 	lsl.w	r3, r1, r3
 8003a32:	e010      	b.n	8003a56 <HAL_ADC_ConfigChannel+0x532>
 8003a34:	683b      	ldr	r3, [r7, #0]
 8003a36:	681b      	ldr	r3, [r3, #0]
 8003a38:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003a3a:	69bb      	ldr	r3, [r7, #24]
 8003a3c:	fa93 f3a3 	rbit	r3, r3
 8003a40:	617b      	str	r3, [r7, #20]
  return result;
 8003a42:	697b      	ldr	r3, [r7, #20]
 8003a44:	fab3 f383 	clz	r3, r3
 8003a48:	b2db      	uxtb	r3, r3
 8003a4a:	3301      	adds	r3, #1
 8003a4c:	f003 031f 	and.w	r3, r3, #31
 8003a50:	2101      	movs	r1, #1
 8003a52:	fa01 f303 	lsl.w	r3, r1, r3
 8003a56:	ea42 0103 	orr.w	r1, r2, r3
 8003a5a:	683b      	ldr	r3, [r7, #0]
 8003a5c:	681b      	ldr	r3, [r3, #0]
 8003a5e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003a62:	2b00      	cmp	r3, #0
 8003a64:	d10d      	bne.n	8003a82 <HAL_ADC_ConfigChannel+0x55e>
 8003a66:	683b      	ldr	r3, [r7, #0]
 8003a68:	681b      	ldr	r3, [r3, #0]
 8003a6a:	0e9b      	lsrs	r3, r3, #26
 8003a6c:	3301      	adds	r3, #1
 8003a6e:	f003 021f 	and.w	r2, r3, #31
 8003a72:	4613      	mov	r3, r2
 8003a74:	005b      	lsls	r3, r3, #1
 8003a76:	4413      	add	r3, r2
 8003a78:	3b1e      	subs	r3, #30
 8003a7a:	051b      	lsls	r3, r3, #20
 8003a7c:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8003a80:	e014      	b.n	8003aac <HAL_ADC_ConfigChannel+0x588>
 8003a82:	683b      	ldr	r3, [r7, #0]
 8003a84:	681b      	ldr	r3, [r3, #0]
 8003a86:	613b      	str	r3, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003a88:	693b      	ldr	r3, [r7, #16]
 8003a8a:	fa93 f3a3 	rbit	r3, r3
 8003a8e:	60fb      	str	r3, [r7, #12]
  return result;
 8003a90:	68fb      	ldr	r3, [r7, #12]
 8003a92:	fab3 f383 	clz	r3, r3
 8003a96:	b2db      	uxtb	r3, r3
 8003a98:	3301      	adds	r3, #1
 8003a9a:	f003 021f 	and.w	r2, r3, #31
 8003a9e:	4613      	mov	r3, r2
 8003aa0:	005b      	lsls	r3, r3, #1
 8003aa2:	4413      	add	r3, r2
 8003aa4:	3b1e      	subs	r3, #30
 8003aa6:	051b      	lsls	r3, r3, #20
 8003aa8:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8003aac:	430b      	orrs	r3, r1
 8003aae:	683a      	ldr	r2, [r7, #0]
 8003ab0:	6892      	ldr	r2, [r2, #8]
 8003ab2:	4619      	mov	r1, r3
 8003ab4:	f7ff faa2 	bl	8002ffc <LL_ADC_SetChannelSamplingTime>
    /* If internal channel selected, enable dedicated internal buffers and    */
    /* paths.                                                                 */
    /* Note: these internal measurement paths can be disabled using           */
    /* HAL_ADC_DeInit().                                                      */

    if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 8003ab8:	683b      	ldr	r3, [r7, #0]
 8003aba:	681a      	ldr	r2, [r3, #0]
 8003abc:	4b2e      	ldr	r3, [pc, #184]	; (8003b78 <HAL_ADC_ConfigChannel+0x654>)
 8003abe:	4013      	ands	r3, r2
 8003ac0:	2b00      	cmp	r3, #0
 8003ac2:	f000 80c9 	beq.w	8003c58 <HAL_ADC_ConfigChannel+0x734>
    {
      tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8003ac6:	687b      	ldr	r3, [r7, #4]
 8003ac8:	681b      	ldr	r3, [r3, #0]
 8003aca:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8003ace:	d004      	beq.n	8003ada <HAL_ADC_ConfigChannel+0x5b6>
 8003ad0:	687b      	ldr	r3, [r7, #4]
 8003ad2:	681b      	ldr	r3, [r3, #0]
 8003ad4:	4a29      	ldr	r2, [pc, #164]	; (8003b7c <HAL_ADC_ConfigChannel+0x658>)
 8003ad6:	4293      	cmp	r3, r2
 8003ad8:	d101      	bne.n	8003ade <HAL_ADC_ConfigChannel+0x5ba>
 8003ada:	4b29      	ldr	r3, [pc, #164]	; (8003b80 <HAL_ADC_ConfigChannel+0x65c>)
 8003adc:	e000      	b.n	8003ae0 <HAL_ADC_ConfigChannel+0x5bc>
 8003ade:	4b29      	ldr	r3, [pc, #164]	; (8003b84 <HAL_ADC_ConfigChannel+0x660>)
 8003ae0:	4618      	mov	r0, r3
 8003ae2:	f7ff f9c3 	bl	8002e6c <LL_ADC_GetCommonPathInternalCh>
 8003ae6:	f8c7 0084 	str.w	r0, [r7, #132]	; 0x84

      /* If the requested internal measurement path has already been enabled, */
      /* bypass the configuration processing.                                 */
      if (((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR_ADC1) || (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR_ADC5))
 8003aea:	683b      	ldr	r3, [r7, #0]
 8003aec:	681b      	ldr	r3, [r3, #0]
 8003aee:	4a26      	ldr	r2, [pc, #152]	; (8003b88 <HAL_ADC_ConfigChannel+0x664>)
 8003af0:	4293      	cmp	r3, r2
 8003af2:	d004      	beq.n	8003afe <HAL_ADC_ConfigChannel+0x5da>
 8003af4:	683b      	ldr	r3, [r7, #0]
 8003af6:	681b      	ldr	r3, [r3, #0]
 8003af8:	4a24      	ldr	r2, [pc, #144]	; (8003b8c <HAL_ADC_ConfigChannel+0x668>)
 8003afa:	4293      	cmp	r3, r2
 8003afc:	d14e      	bne.n	8003b9c <HAL_ADC_ConfigChannel+0x678>
          && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8003afe:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8003b02:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8003b06:	2b00      	cmp	r3, #0
 8003b08:	d148      	bne.n	8003b9c <HAL_ADC_ConfigChannel+0x678>
      {
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8003b0a:	687b      	ldr	r3, [r7, #4]
 8003b0c:	681b      	ldr	r3, [r3, #0]
 8003b0e:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8003b12:	d005      	beq.n	8003b20 <HAL_ADC_ConfigChannel+0x5fc>
 8003b14:	687b      	ldr	r3, [r7, #4]
 8003b16:	681b      	ldr	r3, [r3, #0]
 8003b18:	4a1d      	ldr	r2, [pc, #116]	; (8003b90 <HAL_ADC_ConfigChannel+0x66c>)
 8003b1a:	4293      	cmp	r3, r2
 8003b1c:	f040 8099 	bne.w	8003c52 <HAL_ADC_ConfigChannel+0x72e>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8003b20:	687b      	ldr	r3, [r7, #4]
 8003b22:	681b      	ldr	r3, [r3, #0]
 8003b24:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8003b28:	d004      	beq.n	8003b34 <HAL_ADC_ConfigChannel+0x610>
 8003b2a:	687b      	ldr	r3, [r7, #4]
 8003b2c:	681b      	ldr	r3, [r3, #0]
 8003b2e:	4a13      	ldr	r2, [pc, #76]	; (8003b7c <HAL_ADC_ConfigChannel+0x658>)
 8003b30:	4293      	cmp	r3, r2
 8003b32:	d101      	bne.n	8003b38 <HAL_ADC_ConfigChannel+0x614>
 8003b34:	4a12      	ldr	r2, [pc, #72]	; (8003b80 <HAL_ADC_ConfigChannel+0x65c>)
 8003b36:	e000      	b.n	8003b3a <HAL_ADC_ConfigChannel+0x616>
 8003b38:	4a12      	ldr	r2, [pc, #72]	; (8003b84 <HAL_ADC_ConfigChannel+0x660>)
 8003b3a:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8003b3e:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8003b42:	4619      	mov	r1, r3
 8003b44:	4610      	mov	r0, r2
 8003b46:	f7ff f97e 	bl	8002e46 <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * (SystemCoreClock / (100000UL * 2UL)));
 8003b4a:	4b12      	ldr	r3, [pc, #72]	; (8003b94 <HAL_ADC_ConfigChannel+0x670>)
 8003b4c:	681b      	ldr	r3, [r3, #0]
 8003b4e:	099b      	lsrs	r3, r3, #6
 8003b50:	4a11      	ldr	r2, [pc, #68]	; (8003b98 <HAL_ADC_ConfigChannel+0x674>)
 8003b52:	fba2 2303 	umull	r2, r3, r2, r3
 8003b56:	099a      	lsrs	r2, r3, #6
 8003b58:	4613      	mov	r3, r2
 8003b5a:	005b      	lsls	r3, r3, #1
 8003b5c:	4413      	add	r3, r2
 8003b5e:	009b      	lsls	r3, r3, #2
 8003b60:	60bb      	str	r3, [r7, #8]
          while (wait_loop_index != 0UL)
 8003b62:	e002      	b.n	8003b6a <HAL_ADC_ConfigChannel+0x646>
          {
            wait_loop_index--;
 8003b64:	68bb      	ldr	r3, [r7, #8]
 8003b66:	3b01      	subs	r3, #1
 8003b68:	60bb      	str	r3, [r7, #8]
          while (wait_loop_index != 0UL)
 8003b6a:	68bb      	ldr	r3, [r7, #8]
 8003b6c:	2b00      	cmp	r3, #0
 8003b6e:	d1f9      	bne.n	8003b64 <HAL_ADC_ConfigChannel+0x640>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8003b70:	e06f      	b.n	8003c52 <HAL_ADC_ConfigChannel+0x72e>
 8003b72:	bf00      	nop
 8003b74:	407f0000 	.word	0x407f0000
 8003b78:	80080000 	.word	0x80080000
 8003b7c:	50000100 	.word	0x50000100
 8003b80:	50000300 	.word	0x50000300
 8003b84:	50000700 	.word	0x50000700
 8003b88:	c3210000 	.word	0xc3210000
 8003b8c:	90c00010 	.word	0x90c00010
 8003b90:	50000600 	.word	0x50000600
 8003b94:	20000010 	.word	0x20000010
 8003b98:	053e2d63 	.word	0x053e2d63
          }
        }
      }
      else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8003b9c:	683b      	ldr	r3, [r7, #0]
 8003b9e:	681b      	ldr	r3, [r3, #0]
 8003ba0:	4a32      	ldr	r2, [pc, #200]	; (8003c6c <HAL_ADC_ConfigChannel+0x748>)
 8003ba2:	4293      	cmp	r3, r2
 8003ba4:	d125      	bne.n	8003bf2 <HAL_ADC_ConfigChannel+0x6ce>
 8003ba6:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8003baa:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003bae:	2b00      	cmp	r3, #0
 8003bb0:	d11f      	bne.n	8003bf2 <HAL_ADC_ConfigChannel+0x6ce>
      {
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8003bb2:	687b      	ldr	r3, [r7, #4]
 8003bb4:	681b      	ldr	r3, [r3, #0]
 8003bb6:	4a2e      	ldr	r2, [pc, #184]	; (8003c70 <HAL_ADC_ConfigChannel+0x74c>)
 8003bb8:	4293      	cmp	r3, r2
 8003bba:	d104      	bne.n	8003bc6 <HAL_ADC_ConfigChannel+0x6a2>
 8003bbc:	687b      	ldr	r3, [r7, #4]
 8003bbe:	681b      	ldr	r3, [r3, #0]
 8003bc0:	4a2c      	ldr	r2, [pc, #176]	; (8003c74 <HAL_ADC_ConfigChannel+0x750>)
 8003bc2:	4293      	cmp	r3, r2
 8003bc4:	d047      	beq.n	8003c56 <HAL_ADC_ConfigChannel+0x732>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8003bc6:	687b      	ldr	r3, [r7, #4]
 8003bc8:	681b      	ldr	r3, [r3, #0]
 8003bca:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8003bce:	d004      	beq.n	8003bda <HAL_ADC_ConfigChannel+0x6b6>
 8003bd0:	687b      	ldr	r3, [r7, #4]
 8003bd2:	681b      	ldr	r3, [r3, #0]
 8003bd4:	4a26      	ldr	r2, [pc, #152]	; (8003c70 <HAL_ADC_ConfigChannel+0x74c>)
 8003bd6:	4293      	cmp	r3, r2
 8003bd8:	d101      	bne.n	8003bde <HAL_ADC_ConfigChannel+0x6ba>
 8003bda:	4a27      	ldr	r2, [pc, #156]	; (8003c78 <HAL_ADC_ConfigChannel+0x754>)
 8003bdc:	e000      	b.n	8003be0 <HAL_ADC_ConfigChannel+0x6bc>
 8003bde:	4a27      	ldr	r2, [pc, #156]	; (8003c7c <HAL_ADC_ConfigChannel+0x758>)
 8003be0:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8003be4:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003be8:	4619      	mov	r1, r3
 8003bea:	4610      	mov	r0, r2
 8003bec:	f7ff f92b 	bl	8002e46 <LL_ADC_SetCommonPathInternalCh>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8003bf0:	e031      	b.n	8003c56 <HAL_ADC_ConfigChannel+0x732>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
      }
      else if ((sConfig->Channel == ADC_CHANNEL_VREFINT)
 8003bf2:	683b      	ldr	r3, [r7, #0]
 8003bf4:	681b      	ldr	r3, [r3, #0]
 8003bf6:	4a22      	ldr	r2, [pc, #136]	; (8003c80 <HAL_ADC_ConfigChannel+0x75c>)
 8003bf8:	4293      	cmp	r3, r2
 8003bfa:	d12d      	bne.n	8003c58 <HAL_ADC_ConfigChannel+0x734>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8003bfc:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8003c00:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003c04:	2b00      	cmp	r3, #0
 8003c06:	d127      	bne.n	8003c58 <HAL_ADC_ConfigChannel+0x734>
      {
        if (ADC_VREFINT_INSTANCE(hadc))
 8003c08:	687b      	ldr	r3, [r7, #4]
 8003c0a:	681b      	ldr	r3, [r3, #0]
 8003c0c:	4a18      	ldr	r2, [pc, #96]	; (8003c70 <HAL_ADC_ConfigChannel+0x74c>)
 8003c0e:	4293      	cmp	r3, r2
 8003c10:	d022      	beq.n	8003c58 <HAL_ADC_ConfigChannel+0x734>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8003c12:	687b      	ldr	r3, [r7, #4]
 8003c14:	681b      	ldr	r3, [r3, #0]
 8003c16:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8003c1a:	d004      	beq.n	8003c26 <HAL_ADC_ConfigChannel+0x702>
 8003c1c:	687b      	ldr	r3, [r7, #4]
 8003c1e:	681b      	ldr	r3, [r3, #0]
 8003c20:	4a13      	ldr	r2, [pc, #76]	; (8003c70 <HAL_ADC_ConfigChannel+0x74c>)
 8003c22:	4293      	cmp	r3, r2
 8003c24:	d101      	bne.n	8003c2a <HAL_ADC_ConfigChannel+0x706>
 8003c26:	4a14      	ldr	r2, [pc, #80]	; (8003c78 <HAL_ADC_ConfigChannel+0x754>)
 8003c28:	e000      	b.n	8003c2c <HAL_ADC_ConfigChannel+0x708>
 8003c2a:	4a14      	ldr	r2, [pc, #80]	; (8003c7c <HAL_ADC_ConfigChannel+0x758>)
 8003c2c:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8003c30:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8003c34:	4619      	mov	r1, r3
 8003c36:	4610      	mov	r0, r2
 8003c38:	f7ff f905 	bl	8002e46 <LL_ADC_SetCommonPathInternalCh>
 8003c3c:	e00c      	b.n	8003c58 <HAL_ADC_ConfigChannel+0x734>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003c3e:	687b      	ldr	r3, [r7, #4]
 8003c40:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003c42:	f043 0220 	orr.w	r2, r3, #32
 8003c46:	687b      	ldr	r3, [r7, #4]
 8003c48:	65da      	str	r2, [r3, #92]	; 0x5c

    tmp_hal_status = HAL_ERROR;
 8003c4a:	2301      	movs	r3, #1
 8003c4c:	f887 3097 	strb.w	r3, [r7, #151]	; 0x97
 8003c50:	e002      	b.n	8003c58 <HAL_ADC_ConfigChannel+0x734>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8003c52:	bf00      	nop
 8003c54:	e000      	b.n	8003c58 <HAL_ADC_ConfigChannel+0x734>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8003c56:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8003c58:	687b      	ldr	r3, [r7, #4]
 8003c5a:	2200      	movs	r2, #0
 8003c5c:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

  /* Return function status */
  return tmp_hal_status;
 8003c60:	f897 3097 	ldrb.w	r3, [r7, #151]	; 0x97
}
 8003c64:	4618      	mov	r0, r3
 8003c66:	3798      	adds	r7, #152	; 0x98
 8003c68:	46bd      	mov	sp, r7
 8003c6a:	bd80      	pop	{r7, pc}
 8003c6c:	c7520000 	.word	0xc7520000
 8003c70:	50000100 	.word	0x50000100
 8003c74:	50000500 	.word	0x50000500
 8003c78:	50000300 	.word	0x50000300
 8003c7c:	50000700 	.word	0x50000700
 8003c80:	cb840000 	.word	0xcb840000

08003c84 <LL_ADC_IsEnabled>:
{
 8003c84:	b480      	push	{r7}
 8003c86:	b083      	sub	sp, #12
 8003c88:	af00      	add	r7, sp, #0
 8003c8a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8003c8c:	687b      	ldr	r3, [r7, #4]
 8003c8e:	689b      	ldr	r3, [r3, #8]
 8003c90:	f003 0301 	and.w	r3, r3, #1
 8003c94:	2b01      	cmp	r3, #1
 8003c96:	d101      	bne.n	8003c9c <LL_ADC_IsEnabled+0x18>
 8003c98:	2301      	movs	r3, #1
 8003c9a:	e000      	b.n	8003c9e <LL_ADC_IsEnabled+0x1a>
 8003c9c:	2300      	movs	r3, #0
}
 8003c9e:	4618      	mov	r0, r3
 8003ca0:	370c      	adds	r7, #12
 8003ca2:	46bd      	mov	sp, r7
 8003ca4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ca8:	4770      	bx	lr

08003caa <LL_ADC_REG_IsConversionOngoing>:
{
 8003caa:	b480      	push	{r7}
 8003cac:	b083      	sub	sp, #12
 8003cae:	af00      	add	r7, sp, #0
 8003cb0:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8003cb2:	687b      	ldr	r3, [r7, #4]
 8003cb4:	689b      	ldr	r3, [r3, #8]
 8003cb6:	f003 0304 	and.w	r3, r3, #4
 8003cba:	2b04      	cmp	r3, #4
 8003cbc:	d101      	bne.n	8003cc2 <LL_ADC_REG_IsConversionOngoing+0x18>
 8003cbe:	2301      	movs	r3, #1
 8003cc0:	e000      	b.n	8003cc4 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8003cc2:	2300      	movs	r3, #0
}
 8003cc4:	4618      	mov	r0, r3
 8003cc6:	370c      	adds	r7, #12
 8003cc8:	46bd      	mov	sp, r7
 8003cca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cce:	4770      	bx	lr

08003cd0 <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param multimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, ADC_MultiModeTypeDef *multimode)
{
 8003cd0:	b590      	push	{r4, r7, lr}
 8003cd2:	b0a1      	sub	sp, #132	; 0x84
 8003cd4:	af00      	add	r7, sp, #0
 8003cd6:	6078      	str	r0, [r7, #4]
 8003cd8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003cda:	2300      	movs	r3, #0
 8003cdc:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
    assert_param(IS_ADC_DMA_ACCESS_MULTIMODE(multimode->DMAAccessMode));
    assert_param(IS_ADC_SAMPLING_DELAY(multimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8003ce0:	687b      	ldr	r3, [r7, #4]
 8003ce2:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 8003ce6:	2b01      	cmp	r3, #1
 8003ce8:	d101      	bne.n	8003cee <HAL_ADCEx_MultiModeConfigChannel+0x1e>
 8003cea:	2302      	movs	r3, #2
 8003cec:	e0e3      	b.n	8003eb6 <HAL_ADCEx_MultiModeConfigChannel+0x1e6>
 8003cee:	687b      	ldr	r3, [r7, #4]
 8003cf0:	2201      	movs	r2, #1
 8003cf2:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

  ADC_MULTI_SLAVE(hadc, &tmphadcSlave);
 8003cf6:	687b      	ldr	r3, [r7, #4]
 8003cf8:	681b      	ldr	r3, [r3, #0]
 8003cfa:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8003cfe:	d102      	bne.n	8003d06 <HAL_ADCEx_MultiModeConfigChannel+0x36>
 8003d00:	4b6f      	ldr	r3, [pc, #444]	; (8003ec0 <HAL_ADCEx_MultiModeConfigChannel+0x1f0>)
 8003d02:	60bb      	str	r3, [r7, #8]
 8003d04:	e009      	b.n	8003d1a <HAL_ADCEx_MultiModeConfigChannel+0x4a>
 8003d06:	687b      	ldr	r3, [r7, #4]
 8003d08:	681b      	ldr	r3, [r3, #0]
 8003d0a:	4a6e      	ldr	r2, [pc, #440]	; (8003ec4 <HAL_ADCEx_MultiModeConfigChannel+0x1f4>)
 8003d0c:	4293      	cmp	r3, r2
 8003d0e:	d102      	bne.n	8003d16 <HAL_ADCEx_MultiModeConfigChannel+0x46>
 8003d10:	4b6d      	ldr	r3, [pc, #436]	; (8003ec8 <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 8003d12:	60bb      	str	r3, [r7, #8]
 8003d14:	e001      	b.n	8003d1a <HAL_ADCEx_MultiModeConfigChannel+0x4a>
 8003d16:	2300      	movs	r3, #0
 8003d18:	60bb      	str	r3, [r7, #8]

  if (tmphadcSlave.Instance == NULL)
 8003d1a:	68bb      	ldr	r3, [r7, #8]
 8003d1c:	2b00      	cmp	r3, #0
 8003d1e:	d10b      	bne.n	8003d38 <HAL_ADCEx_MultiModeConfigChannel+0x68>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003d20:	687b      	ldr	r3, [r7, #4]
 8003d22:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003d24:	f043 0220 	orr.w	r2, r3, #32
 8003d28:	687b      	ldr	r3, [r7, #4]
 8003d2a:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8003d2c:	687b      	ldr	r3, [r7, #4]
 8003d2e:	2200      	movs	r2, #0
 8003d30:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

    return HAL_ERROR;
 8003d34:	2301      	movs	r3, #1
 8003d36:	e0be      	b.n	8003eb6 <HAL_ADCEx_MultiModeConfigChannel+0x1e6>
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DMA configuration                                           */
  /*  - Multimode DMA mode                                                    */
  tmphadcSlave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmphadcSlave)->Instance);
 8003d38:	68bb      	ldr	r3, [r7, #8]
 8003d3a:	4618      	mov	r0, r3
 8003d3c:	f7ff ffb5 	bl	8003caa <LL_ADC_REG_IsConversionOngoing>
 8003d40:	67b8      	str	r0, [r7, #120]	; 0x78
  if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8003d42:	687b      	ldr	r3, [r7, #4]
 8003d44:	681b      	ldr	r3, [r3, #0]
 8003d46:	4618      	mov	r0, r3
 8003d48:	f7ff ffaf 	bl	8003caa <LL_ADC_REG_IsConversionOngoing>
 8003d4c:	4603      	mov	r3, r0
 8003d4e:	2b00      	cmp	r3, #0
 8003d50:	f040 80a0 	bne.w	8003e94 <HAL_ADCEx_MultiModeConfigChannel+0x1c4>
      && (tmphadcSlave_conversion_on_going == 0UL))
 8003d54:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8003d56:	2b00      	cmp	r3, #0
 8003d58:	f040 809c 	bne.w	8003e94 <HAL_ADCEx_MultiModeConfigChannel+0x1c4>
  {
    /* Pointer to the common control register */
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 8003d5c:	687b      	ldr	r3, [r7, #4]
 8003d5e:	681b      	ldr	r3, [r3, #0]
 8003d60:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8003d64:	d004      	beq.n	8003d70 <HAL_ADCEx_MultiModeConfigChannel+0xa0>
 8003d66:	687b      	ldr	r3, [r7, #4]
 8003d68:	681b      	ldr	r3, [r3, #0]
 8003d6a:	4a55      	ldr	r2, [pc, #340]	; (8003ec0 <HAL_ADCEx_MultiModeConfigChannel+0x1f0>)
 8003d6c:	4293      	cmp	r3, r2
 8003d6e:	d101      	bne.n	8003d74 <HAL_ADCEx_MultiModeConfigChannel+0xa4>
 8003d70:	4b56      	ldr	r3, [pc, #344]	; (8003ecc <HAL_ADCEx_MultiModeConfigChannel+0x1fc>)
 8003d72:	e000      	b.n	8003d76 <HAL_ADCEx_MultiModeConfigChannel+0xa6>
 8003d74:	4b56      	ldr	r3, [pc, #344]	; (8003ed0 <HAL_ADCEx_MultiModeConfigChannel+0x200>)
 8003d76:	677b      	str	r3, [r7, #116]	; 0x74

    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8003d78:	683b      	ldr	r3, [r7, #0]
 8003d7a:	681b      	ldr	r3, [r3, #0]
 8003d7c:	2b00      	cmp	r3, #0
 8003d7e:	d04b      	beq.n	8003e18 <HAL_ADCEx_MultiModeConfigChannel+0x148>
    {
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG,
 8003d80:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003d82:	689b      	ldr	r3, [r3, #8]
 8003d84:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8003d88:	683b      	ldr	r3, [r7, #0]
 8003d8a:	6859      	ldr	r1, [r3, #4]
 8003d8c:	687b      	ldr	r3, [r7, #4]
 8003d8e:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8003d92:	035b      	lsls	r3, r3, #13
 8003d94:	430b      	orrs	r3, r1
 8003d96:	431a      	orrs	r2, r3
 8003d98:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003d9a:	609a      	str	r2, [r3, #8]
      /*      from 1 to 10 clock cycles for 10 bits,                              */
      /*      from 1 to 8 clock cycles for 8 bits                                 */
      /*      from 1 to 6 clock cycles for 6 bits                                 */
      /*    If a higher delay is selected, it will be clipped to maximum delay    */
      /*    range                                                                 */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8003d9c:	687b      	ldr	r3, [r7, #4]
 8003d9e:	681b      	ldr	r3, [r3, #0]
 8003da0:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8003da4:	d004      	beq.n	8003db0 <HAL_ADCEx_MultiModeConfigChannel+0xe0>
 8003da6:	687b      	ldr	r3, [r7, #4]
 8003da8:	681b      	ldr	r3, [r3, #0]
 8003daa:	4a45      	ldr	r2, [pc, #276]	; (8003ec0 <HAL_ADCEx_MultiModeConfigChannel+0x1f0>)
 8003dac:	4293      	cmp	r3, r2
 8003dae:	d10f      	bne.n	8003dd0 <HAL_ADCEx_MultiModeConfigChannel+0x100>
 8003db0:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
 8003db4:	f7ff ff66 	bl	8003c84 <LL_ADC_IsEnabled>
 8003db8:	4604      	mov	r4, r0
 8003dba:	4841      	ldr	r0, [pc, #260]	; (8003ec0 <HAL_ADCEx_MultiModeConfigChannel+0x1f0>)
 8003dbc:	f7ff ff62 	bl	8003c84 <LL_ADC_IsEnabled>
 8003dc0:	4603      	mov	r3, r0
 8003dc2:	4323      	orrs	r3, r4
 8003dc4:	2b00      	cmp	r3, #0
 8003dc6:	bf0c      	ite	eq
 8003dc8:	2301      	moveq	r3, #1
 8003dca:	2300      	movne	r3, #0
 8003dcc:	b2db      	uxtb	r3, r3
 8003dce:	e012      	b.n	8003df6 <HAL_ADCEx_MultiModeConfigChannel+0x126>
 8003dd0:	483c      	ldr	r0, [pc, #240]	; (8003ec4 <HAL_ADCEx_MultiModeConfigChannel+0x1f4>)
 8003dd2:	f7ff ff57 	bl	8003c84 <LL_ADC_IsEnabled>
 8003dd6:	4604      	mov	r4, r0
 8003dd8:	483b      	ldr	r0, [pc, #236]	; (8003ec8 <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 8003dda:	f7ff ff53 	bl	8003c84 <LL_ADC_IsEnabled>
 8003dde:	4603      	mov	r3, r0
 8003de0:	431c      	orrs	r4, r3
 8003de2:	483c      	ldr	r0, [pc, #240]	; (8003ed4 <HAL_ADCEx_MultiModeConfigChannel+0x204>)
 8003de4:	f7ff ff4e 	bl	8003c84 <LL_ADC_IsEnabled>
 8003de8:	4603      	mov	r3, r0
 8003dea:	4323      	orrs	r3, r4
 8003dec:	2b00      	cmp	r3, #0
 8003dee:	bf0c      	ite	eq
 8003df0:	2301      	moveq	r3, #1
 8003df2:	2300      	movne	r3, #0
 8003df4:	b2db      	uxtb	r3, r3
 8003df6:	2b00      	cmp	r3, #0
 8003df8:	d056      	beq.n	8003ea8 <HAL_ADCEx_MultiModeConfigChannel+0x1d8>
      {
        MODIFY_REG(tmpADC_Common->CCR,
 8003dfa:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003dfc:	689b      	ldr	r3, [r3, #8]
 8003dfe:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 8003e02:	f023 030f 	bic.w	r3, r3, #15
 8003e06:	683a      	ldr	r2, [r7, #0]
 8003e08:	6811      	ldr	r1, [r2, #0]
 8003e0a:	683a      	ldr	r2, [r7, #0]
 8003e0c:	6892      	ldr	r2, [r2, #8]
 8003e0e:	430a      	orrs	r2, r1
 8003e10:	431a      	orrs	r2, r3
 8003e12:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003e14:	609a      	str	r2, [r3, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8003e16:	e047      	b.n	8003ea8 <HAL_ADCEx_MultiModeConfigChannel+0x1d8>
                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG);
 8003e18:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003e1a:	689b      	ldr	r3, [r3, #8]
 8003e1c:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8003e20:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003e22:	609a      	str	r2, [r3, #8]

      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8003e24:	687b      	ldr	r3, [r7, #4]
 8003e26:	681b      	ldr	r3, [r3, #0]
 8003e28:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8003e2c:	d004      	beq.n	8003e38 <HAL_ADCEx_MultiModeConfigChannel+0x168>
 8003e2e:	687b      	ldr	r3, [r7, #4]
 8003e30:	681b      	ldr	r3, [r3, #0]
 8003e32:	4a23      	ldr	r2, [pc, #140]	; (8003ec0 <HAL_ADCEx_MultiModeConfigChannel+0x1f0>)
 8003e34:	4293      	cmp	r3, r2
 8003e36:	d10f      	bne.n	8003e58 <HAL_ADCEx_MultiModeConfigChannel+0x188>
 8003e38:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
 8003e3c:	f7ff ff22 	bl	8003c84 <LL_ADC_IsEnabled>
 8003e40:	4604      	mov	r4, r0
 8003e42:	481f      	ldr	r0, [pc, #124]	; (8003ec0 <HAL_ADCEx_MultiModeConfigChannel+0x1f0>)
 8003e44:	f7ff ff1e 	bl	8003c84 <LL_ADC_IsEnabled>
 8003e48:	4603      	mov	r3, r0
 8003e4a:	4323      	orrs	r3, r4
 8003e4c:	2b00      	cmp	r3, #0
 8003e4e:	bf0c      	ite	eq
 8003e50:	2301      	moveq	r3, #1
 8003e52:	2300      	movne	r3, #0
 8003e54:	b2db      	uxtb	r3, r3
 8003e56:	e012      	b.n	8003e7e <HAL_ADCEx_MultiModeConfigChannel+0x1ae>
 8003e58:	481a      	ldr	r0, [pc, #104]	; (8003ec4 <HAL_ADCEx_MultiModeConfigChannel+0x1f4>)
 8003e5a:	f7ff ff13 	bl	8003c84 <LL_ADC_IsEnabled>
 8003e5e:	4604      	mov	r4, r0
 8003e60:	4819      	ldr	r0, [pc, #100]	; (8003ec8 <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 8003e62:	f7ff ff0f 	bl	8003c84 <LL_ADC_IsEnabled>
 8003e66:	4603      	mov	r3, r0
 8003e68:	431c      	orrs	r4, r3
 8003e6a:	481a      	ldr	r0, [pc, #104]	; (8003ed4 <HAL_ADCEx_MultiModeConfigChannel+0x204>)
 8003e6c:	f7ff ff0a 	bl	8003c84 <LL_ADC_IsEnabled>
 8003e70:	4603      	mov	r3, r0
 8003e72:	4323      	orrs	r3, r4
 8003e74:	2b00      	cmp	r3, #0
 8003e76:	bf0c      	ite	eq
 8003e78:	2301      	moveq	r3, #1
 8003e7a:	2300      	movne	r3, #0
 8003e7c:	b2db      	uxtb	r3, r3
 8003e7e:	2b00      	cmp	r3, #0
 8003e80:	d012      	beq.n	8003ea8 <HAL_ADCEx_MultiModeConfigChannel+0x1d8>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 8003e82:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003e84:	689b      	ldr	r3, [r3, #8]
 8003e86:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 8003e8a:	f023 030f 	bic.w	r3, r3, #15
 8003e8e:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 8003e90:	6093      	str	r3, [r2, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8003e92:	e009      	b.n	8003ea8 <HAL_ADCEx_MultiModeConfigChannel+0x1d8>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003e94:	687b      	ldr	r3, [r7, #4]
 8003e96:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003e98:	f043 0220 	orr.w	r2, r3, #32
 8003e9c:	687b      	ldr	r3, [r7, #4]
 8003e9e:	65da      	str	r2, [r3, #92]	; 0x5c

    tmp_hal_status = HAL_ERROR;
 8003ea0:	2301      	movs	r3, #1
 8003ea2:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
 8003ea6:	e000      	b.n	8003eaa <HAL_ADCEx_MultiModeConfigChannel+0x1da>
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8003ea8:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8003eaa:	687b      	ldr	r3, [r7, #4]
 8003eac:	2200      	movs	r2, #0
 8003eae:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

  /* Return function status */
  return tmp_hal_status;
 8003eb2:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
}
 8003eb6:	4618      	mov	r0, r3
 8003eb8:	3784      	adds	r7, #132	; 0x84
 8003eba:	46bd      	mov	sp, r7
 8003ebc:	bd90      	pop	{r4, r7, pc}
 8003ebe:	bf00      	nop
 8003ec0:	50000100 	.word	0x50000100
 8003ec4:	50000400 	.word	0x50000400
 8003ec8:	50000500 	.word	0x50000500
 8003ecc:	50000300 	.word	0x50000300
 8003ed0:	50000700 	.word	0x50000700
 8003ed4:	50000600 	.word	0x50000600

08003ed8 <LL_EXTI_EnableIT_0_31>:
{
 8003ed8:	b480      	push	{r7}
 8003eda:	b083      	sub	sp, #12
 8003edc:	af00      	add	r7, sp, #0
 8003ede:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->IMR1, ExtiLine);
 8003ee0:	4b05      	ldr	r3, [pc, #20]	; (8003ef8 <LL_EXTI_EnableIT_0_31+0x20>)
 8003ee2:	681a      	ldr	r2, [r3, #0]
 8003ee4:	4904      	ldr	r1, [pc, #16]	; (8003ef8 <LL_EXTI_EnableIT_0_31+0x20>)
 8003ee6:	687b      	ldr	r3, [r7, #4]
 8003ee8:	4313      	orrs	r3, r2
 8003eea:	600b      	str	r3, [r1, #0]
}
 8003eec:	bf00      	nop
 8003eee:	370c      	adds	r7, #12
 8003ef0:	46bd      	mov	sp, r7
 8003ef2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ef6:	4770      	bx	lr
 8003ef8:	40010400 	.word	0x40010400

08003efc <LL_EXTI_EnableIT_32_63>:
{
 8003efc:	b480      	push	{r7}
 8003efe:	b083      	sub	sp, #12
 8003f00:	af00      	add	r7, sp, #0
 8003f02:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->IMR2, ExtiLine);
 8003f04:	4b05      	ldr	r3, [pc, #20]	; (8003f1c <LL_EXTI_EnableIT_32_63+0x20>)
 8003f06:	6a1a      	ldr	r2, [r3, #32]
 8003f08:	4904      	ldr	r1, [pc, #16]	; (8003f1c <LL_EXTI_EnableIT_32_63+0x20>)
 8003f0a:	687b      	ldr	r3, [r7, #4]
 8003f0c:	4313      	orrs	r3, r2
 8003f0e:	620b      	str	r3, [r1, #32]
}
 8003f10:	bf00      	nop
 8003f12:	370c      	adds	r7, #12
 8003f14:	46bd      	mov	sp, r7
 8003f16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f1a:	4770      	bx	lr
 8003f1c:	40010400 	.word	0x40010400

08003f20 <LL_EXTI_DisableIT_0_31>:
{
 8003f20:	b480      	push	{r7}
 8003f22:	b083      	sub	sp, #12
 8003f24:	af00      	add	r7, sp, #0
 8003f26:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->IMR1, ExtiLine);
 8003f28:	4b06      	ldr	r3, [pc, #24]	; (8003f44 <LL_EXTI_DisableIT_0_31+0x24>)
 8003f2a:	681a      	ldr	r2, [r3, #0]
 8003f2c:	687b      	ldr	r3, [r7, #4]
 8003f2e:	43db      	mvns	r3, r3
 8003f30:	4904      	ldr	r1, [pc, #16]	; (8003f44 <LL_EXTI_DisableIT_0_31+0x24>)
 8003f32:	4013      	ands	r3, r2
 8003f34:	600b      	str	r3, [r1, #0]
}
 8003f36:	bf00      	nop
 8003f38:	370c      	adds	r7, #12
 8003f3a:	46bd      	mov	sp, r7
 8003f3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f40:	4770      	bx	lr
 8003f42:	bf00      	nop
 8003f44:	40010400 	.word	0x40010400

08003f48 <LL_EXTI_DisableIT_32_63>:
{
 8003f48:	b480      	push	{r7}
 8003f4a:	b083      	sub	sp, #12
 8003f4c:	af00      	add	r7, sp, #0
 8003f4e:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->IMR2, ExtiLine);
 8003f50:	4b06      	ldr	r3, [pc, #24]	; (8003f6c <LL_EXTI_DisableIT_32_63+0x24>)
 8003f52:	6a1a      	ldr	r2, [r3, #32]
 8003f54:	687b      	ldr	r3, [r7, #4]
 8003f56:	43db      	mvns	r3, r3
 8003f58:	4904      	ldr	r1, [pc, #16]	; (8003f6c <LL_EXTI_DisableIT_32_63+0x24>)
 8003f5a:	4013      	ands	r3, r2
 8003f5c:	620b      	str	r3, [r1, #32]
}
 8003f5e:	bf00      	nop
 8003f60:	370c      	adds	r7, #12
 8003f62:	46bd      	mov	sp, r7
 8003f64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f68:	4770      	bx	lr
 8003f6a:	bf00      	nop
 8003f6c:	40010400 	.word	0x40010400

08003f70 <LL_EXTI_EnableEvent_0_31>:
{
 8003f70:	b480      	push	{r7}
 8003f72:	b083      	sub	sp, #12
 8003f74:	af00      	add	r7, sp, #0
 8003f76:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->EMR1, ExtiLine);
 8003f78:	4b05      	ldr	r3, [pc, #20]	; (8003f90 <LL_EXTI_EnableEvent_0_31+0x20>)
 8003f7a:	685a      	ldr	r2, [r3, #4]
 8003f7c:	4904      	ldr	r1, [pc, #16]	; (8003f90 <LL_EXTI_EnableEvent_0_31+0x20>)
 8003f7e:	687b      	ldr	r3, [r7, #4]
 8003f80:	4313      	orrs	r3, r2
 8003f82:	604b      	str	r3, [r1, #4]
}
 8003f84:	bf00      	nop
 8003f86:	370c      	adds	r7, #12
 8003f88:	46bd      	mov	sp, r7
 8003f8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f8e:	4770      	bx	lr
 8003f90:	40010400 	.word	0x40010400

08003f94 <LL_EXTI_EnableEvent_32_63>:
{
 8003f94:	b480      	push	{r7}
 8003f96:	b083      	sub	sp, #12
 8003f98:	af00      	add	r7, sp, #0
 8003f9a:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->EMR2, ExtiLine);
 8003f9c:	4b05      	ldr	r3, [pc, #20]	; (8003fb4 <LL_EXTI_EnableEvent_32_63+0x20>)
 8003f9e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003fa0:	4904      	ldr	r1, [pc, #16]	; (8003fb4 <LL_EXTI_EnableEvent_32_63+0x20>)
 8003fa2:	687b      	ldr	r3, [r7, #4]
 8003fa4:	4313      	orrs	r3, r2
 8003fa6:	624b      	str	r3, [r1, #36]	; 0x24
}
 8003fa8:	bf00      	nop
 8003faa:	370c      	adds	r7, #12
 8003fac:	46bd      	mov	sp, r7
 8003fae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fb2:	4770      	bx	lr
 8003fb4:	40010400 	.word	0x40010400

08003fb8 <LL_EXTI_DisableEvent_0_31>:
{
 8003fb8:	b480      	push	{r7}
 8003fba:	b083      	sub	sp, #12
 8003fbc:	af00      	add	r7, sp, #0
 8003fbe:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->EMR1, ExtiLine);
 8003fc0:	4b06      	ldr	r3, [pc, #24]	; (8003fdc <LL_EXTI_DisableEvent_0_31+0x24>)
 8003fc2:	685a      	ldr	r2, [r3, #4]
 8003fc4:	687b      	ldr	r3, [r7, #4]
 8003fc6:	43db      	mvns	r3, r3
 8003fc8:	4904      	ldr	r1, [pc, #16]	; (8003fdc <LL_EXTI_DisableEvent_0_31+0x24>)
 8003fca:	4013      	ands	r3, r2
 8003fcc:	604b      	str	r3, [r1, #4]
}
 8003fce:	bf00      	nop
 8003fd0:	370c      	adds	r7, #12
 8003fd2:	46bd      	mov	sp, r7
 8003fd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fd8:	4770      	bx	lr
 8003fda:	bf00      	nop
 8003fdc:	40010400 	.word	0x40010400

08003fe0 <LL_EXTI_DisableEvent_32_63>:
{
 8003fe0:	b480      	push	{r7}
 8003fe2:	b083      	sub	sp, #12
 8003fe4:	af00      	add	r7, sp, #0
 8003fe6:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->EMR2, ExtiLine);
 8003fe8:	4b06      	ldr	r3, [pc, #24]	; (8004004 <LL_EXTI_DisableEvent_32_63+0x24>)
 8003fea:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003fec:	687b      	ldr	r3, [r7, #4]
 8003fee:	43db      	mvns	r3, r3
 8003ff0:	4904      	ldr	r1, [pc, #16]	; (8004004 <LL_EXTI_DisableEvent_32_63+0x24>)
 8003ff2:	4013      	ands	r3, r2
 8003ff4:	624b      	str	r3, [r1, #36]	; 0x24
}
 8003ff6:	bf00      	nop
 8003ff8:	370c      	adds	r7, #12
 8003ffa:	46bd      	mov	sp, r7
 8003ffc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004000:	4770      	bx	lr
 8004002:	bf00      	nop
 8004004:	40010400 	.word	0x40010400

08004008 <LL_EXTI_EnableRisingTrig_0_31>:
{
 8004008:	b480      	push	{r7}
 800400a:	b083      	sub	sp, #12
 800400c:	af00      	add	r7, sp, #0
 800400e:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->RTSR1, ExtiLine);
 8004010:	4b05      	ldr	r3, [pc, #20]	; (8004028 <LL_EXTI_EnableRisingTrig_0_31+0x20>)
 8004012:	689a      	ldr	r2, [r3, #8]
 8004014:	4904      	ldr	r1, [pc, #16]	; (8004028 <LL_EXTI_EnableRisingTrig_0_31+0x20>)
 8004016:	687b      	ldr	r3, [r7, #4]
 8004018:	4313      	orrs	r3, r2
 800401a:	608b      	str	r3, [r1, #8]
}
 800401c:	bf00      	nop
 800401e:	370c      	adds	r7, #12
 8004020:	46bd      	mov	sp, r7
 8004022:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004026:	4770      	bx	lr
 8004028:	40010400 	.word	0x40010400

0800402c <LL_EXTI_EnableRisingTrig_32_63>:
{
 800402c:	b480      	push	{r7}
 800402e:	b083      	sub	sp, #12
 8004030:	af00      	add	r7, sp, #0
 8004032:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->RTSR2, ExtiLine);
 8004034:	4b05      	ldr	r3, [pc, #20]	; (800404c <LL_EXTI_EnableRisingTrig_32_63+0x20>)
 8004036:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8004038:	4904      	ldr	r1, [pc, #16]	; (800404c <LL_EXTI_EnableRisingTrig_32_63+0x20>)
 800403a:	687b      	ldr	r3, [r7, #4]
 800403c:	4313      	orrs	r3, r2
 800403e:	628b      	str	r3, [r1, #40]	; 0x28
}
 8004040:	bf00      	nop
 8004042:	370c      	adds	r7, #12
 8004044:	46bd      	mov	sp, r7
 8004046:	f85d 7b04 	ldr.w	r7, [sp], #4
 800404a:	4770      	bx	lr
 800404c:	40010400 	.word	0x40010400

08004050 <LL_EXTI_DisableRisingTrig_0_31>:
{
 8004050:	b480      	push	{r7}
 8004052:	b083      	sub	sp, #12
 8004054:	af00      	add	r7, sp, #0
 8004056:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->RTSR1, ExtiLine);
 8004058:	4b06      	ldr	r3, [pc, #24]	; (8004074 <LL_EXTI_DisableRisingTrig_0_31+0x24>)
 800405a:	689a      	ldr	r2, [r3, #8]
 800405c:	687b      	ldr	r3, [r7, #4]
 800405e:	43db      	mvns	r3, r3
 8004060:	4904      	ldr	r1, [pc, #16]	; (8004074 <LL_EXTI_DisableRisingTrig_0_31+0x24>)
 8004062:	4013      	ands	r3, r2
 8004064:	608b      	str	r3, [r1, #8]
}
 8004066:	bf00      	nop
 8004068:	370c      	adds	r7, #12
 800406a:	46bd      	mov	sp, r7
 800406c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004070:	4770      	bx	lr
 8004072:	bf00      	nop
 8004074:	40010400 	.word	0x40010400

08004078 <LL_EXTI_DisableRisingTrig_32_63>:
{
 8004078:	b480      	push	{r7}
 800407a:	b083      	sub	sp, #12
 800407c:	af00      	add	r7, sp, #0
 800407e:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->RTSR2, ExtiLine);
 8004080:	4b06      	ldr	r3, [pc, #24]	; (800409c <LL_EXTI_DisableRisingTrig_32_63+0x24>)
 8004082:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8004084:	687b      	ldr	r3, [r7, #4]
 8004086:	43db      	mvns	r3, r3
 8004088:	4904      	ldr	r1, [pc, #16]	; (800409c <LL_EXTI_DisableRisingTrig_32_63+0x24>)
 800408a:	4013      	ands	r3, r2
 800408c:	628b      	str	r3, [r1, #40]	; 0x28
}
 800408e:	bf00      	nop
 8004090:	370c      	adds	r7, #12
 8004092:	46bd      	mov	sp, r7
 8004094:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004098:	4770      	bx	lr
 800409a:	bf00      	nop
 800409c:	40010400 	.word	0x40010400

080040a0 <LL_EXTI_EnableFallingTrig_0_31>:
{
 80040a0:	b480      	push	{r7}
 80040a2:	b083      	sub	sp, #12
 80040a4:	af00      	add	r7, sp, #0
 80040a6:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->FTSR1, ExtiLine);
 80040a8:	4b05      	ldr	r3, [pc, #20]	; (80040c0 <LL_EXTI_EnableFallingTrig_0_31+0x20>)
 80040aa:	68da      	ldr	r2, [r3, #12]
 80040ac:	4904      	ldr	r1, [pc, #16]	; (80040c0 <LL_EXTI_EnableFallingTrig_0_31+0x20>)
 80040ae:	687b      	ldr	r3, [r7, #4]
 80040b0:	4313      	orrs	r3, r2
 80040b2:	60cb      	str	r3, [r1, #12]
}
 80040b4:	bf00      	nop
 80040b6:	370c      	adds	r7, #12
 80040b8:	46bd      	mov	sp, r7
 80040ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040be:	4770      	bx	lr
 80040c0:	40010400 	.word	0x40010400

080040c4 <LL_EXTI_EnableFallingTrig_32_63>:
{
 80040c4:	b480      	push	{r7}
 80040c6:	b083      	sub	sp, #12
 80040c8:	af00      	add	r7, sp, #0
 80040ca:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->FTSR2, ExtiLine);
 80040cc:	4b05      	ldr	r3, [pc, #20]	; (80040e4 <LL_EXTI_EnableFallingTrig_32_63+0x20>)
 80040ce:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80040d0:	4904      	ldr	r1, [pc, #16]	; (80040e4 <LL_EXTI_EnableFallingTrig_32_63+0x20>)
 80040d2:	687b      	ldr	r3, [r7, #4]
 80040d4:	4313      	orrs	r3, r2
 80040d6:	62cb      	str	r3, [r1, #44]	; 0x2c
}
 80040d8:	bf00      	nop
 80040da:	370c      	adds	r7, #12
 80040dc:	46bd      	mov	sp, r7
 80040de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040e2:	4770      	bx	lr
 80040e4:	40010400 	.word	0x40010400

080040e8 <LL_EXTI_DisableFallingTrig_0_31>:
{
 80040e8:	b480      	push	{r7}
 80040ea:	b083      	sub	sp, #12
 80040ec:	af00      	add	r7, sp, #0
 80040ee:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->FTSR1, ExtiLine);
 80040f0:	4b06      	ldr	r3, [pc, #24]	; (800410c <LL_EXTI_DisableFallingTrig_0_31+0x24>)
 80040f2:	68da      	ldr	r2, [r3, #12]
 80040f4:	687b      	ldr	r3, [r7, #4]
 80040f6:	43db      	mvns	r3, r3
 80040f8:	4904      	ldr	r1, [pc, #16]	; (800410c <LL_EXTI_DisableFallingTrig_0_31+0x24>)
 80040fa:	4013      	ands	r3, r2
 80040fc:	60cb      	str	r3, [r1, #12]
}
 80040fe:	bf00      	nop
 8004100:	370c      	adds	r7, #12
 8004102:	46bd      	mov	sp, r7
 8004104:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004108:	4770      	bx	lr
 800410a:	bf00      	nop
 800410c:	40010400 	.word	0x40010400

08004110 <LL_EXTI_DisableFallingTrig_32_63>:
{
 8004110:	b480      	push	{r7}
 8004112:	b083      	sub	sp, #12
 8004114:	af00      	add	r7, sp, #0
 8004116:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->FTSR2, ExtiLine);
 8004118:	4b06      	ldr	r3, [pc, #24]	; (8004134 <LL_EXTI_DisableFallingTrig_32_63+0x24>)
 800411a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800411c:	687b      	ldr	r3, [r7, #4]
 800411e:	43db      	mvns	r3, r3
 8004120:	4904      	ldr	r1, [pc, #16]	; (8004134 <LL_EXTI_DisableFallingTrig_32_63+0x24>)
 8004122:	4013      	ands	r3, r2
 8004124:	62cb      	str	r3, [r1, #44]	; 0x2c
}
 8004126:	bf00      	nop
 8004128:	370c      	adds	r7, #12
 800412a:	46bd      	mov	sp, r7
 800412c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004130:	4770      	bx	lr
 8004132:	bf00      	nop
 8004134:	40010400 	.word	0x40010400

08004138 <LL_EXTI_ClearFlag_0_31>:
{
 8004138:	b480      	push	{r7}
 800413a:	b083      	sub	sp, #12
 800413c:	af00      	add	r7, sp, #0
 800413e:	6078      	str	r0, [r7, #4]
  WRITE_REG(EXTI->PR1, ExtiLine);
 8004140:	4a04      	ldr	r2, [pc, #16]	; (8004154 <LL_EXTI_ClearFlag_0_31+0x1c>)
 8004142:	687b      	ldr	r3, [r7, #4]
 8004144:	6153      	str	r3, [r2, #20]
}
 8004146:	bf00      	nop
 8004148:	370c      	adds	r7, #12
 800414a:	46bd      	mov	sp, r7
 800414c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004150:	4770      	bx	lr
 8004152:	bf00      	nop
 8004154:	40010400 	.word	0x40010400

08004158 <LL_EXTI_ClearFlag_32_63>:
  *         @arg @ref LL_EXTI_LINE_41
  * @note   (*): Available in some devices
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_ClearFlag_32_63(uint32_t ExtiLine)
{
 8004158:	b480      	push	{r7}
 800415a:	b083      	sub	sp, #12
 800415c:	af00      	add	r7, sp, #0
 800415e:	6078      	str	r0, [r7, #4]
  WRITE_REG(EXTI->PR2, ExtiLine);
 8004160:	4a04      	ldr	r2, [pc, #16]	; (8004174 <LL_EXTI_ClearFlag_32_63+0x1c>)
 8004162:	687b      	ldr	r3, [r7, #4]
 8004164:	6353      	str	r3, [r2, #52]	; 0x34
}
 8004166:	bf00      	nop
 8004168:	370c      	adds	r7, #12
 800416a:	46bd      	mov	sp, r7
 800416c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004170:	4770      	bx	lr
 8004172:	bf00      	nop
 8004174:	40010400 	.word	0x40010400

08004178 <HAL_COMP_Init>:
  *         To unlock the configuration, perform a system reset.
  * @param  hcomp  COMP handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_COMP_Init(COMP_HandleTypeDef *hcomp)
{
 8004178:	b580      	push	{r7, lr}
 800417a:	b088      	sub	sp, #32
 800417c:	af00      	add	r7, sp, #0
 800417e:	6078      	str	r0, [r7, #4]
  uint32_t tmp_csr;
  uint32_t exti_line;
  uint32_t comp_voltage_scaler_initialized; /* Value "0" if comparator voltage scaler is not initialized */
  __IO uint32_t wait_loop_index = 0UL;
 8004180:	2300      	movs	r3, #0
 8004182:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef status = HAL_OK;
 8004184:	2300      	movs	r3, #0
 8004186:	77fb      	strb	r3, [r7, #31]

  /* Check the COMP handle allocation and lock status */
  if(hcomp == NULL)
 8004188:	687b      	ldr	r3, [r7, #4]
 800418a:	2b00      	cmp	r3, #0
 800418c:	d102      	bne.n	8004194 <HAL_COMP_Init+0x1c>
  {
    status = HAL_ERROR;
 800418e:	2301      	movs	r3, #1
 8004190:	77fb      	strb	r3, [r7, #31]
 8004192:	e180      	b.n	8004496 <HAL_COMP_Init+0x31e>
  }
  else if(__HAL_COMP_IS_LOCKED(hcomp))
 8004194:	687b      	ldr	r3, [r7, #4]
 8004196:	681b      	ldr	r3, [r3, #0]
 8004198:	681b      	ldr	r3, [r3, #0]
 800419a:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800419e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80041a2:	d102      	bne.n	80041aa <HAL_COMP_Init+0x32>
  {
    status = HAL_ERROR;
 80041a4:	2301      	movs	r3, #1
 80041a6:	77fb      	strb	r3, [r7, #31]
 80041a8:	e175      	b.n	8004496 <HAL_COMP_Init+0x31e>
    assert_param(IS_COMP_OUTPUTPOL(hcomp->Init.OutputPol));
    assert_param(IS_COMP_HYSTERESIS(hcomp->Init.Hysteresis));
    assert_param(IS_COMP_BLANKINGSRC_INSTANCE(hcomp->Instance, hcomp->Init.BlankingSrce));
    assert_param(IS_COMP_TRIGGERMODE(hcomp->Init.TriggerMode));

    if(hcomp->State == HAL_COMP_STATE_RESET)
 80041aa:	687b      	ldr	r3, [r7, #4]
 80041ac:	7f5b      	ldrb	r3, [r3, #29]
 80041ae:	b2db      	uxtb	r3, r3
 80041b0:	2b00      	cmp	r3, #0
 80041b2:	d108      	bne.n	80041c6 <HAL_COMP_Init+0x4e>
    {
      /* Allocate lock resource and initialize it */
      hcomp->Lock = HAL_UNLOCKED;
 80041b4:	687b      	ldr	r3, [r7, #4]
 80041b6:	2200      	movs	r2, #0
 80041b8:	771a      	strb	r2, [r3, #28]

      /* Set COMP error code to none */
      COMP_CLEAR_ERRORCODE(hcomp);
 80041ba:	687b      	ldr	r3, [r7, #4]
 80041bc:	2200      	movs	r2, #0
 80041be:	621a      	str	r2, [r3, #32]
#else
      /* Init the low level hardware */
      /* Note: Internal control clock of the comparators must                 */
      /*       be enabled in "HAL_COMP_MspInit()"                             */
      /*       using "__HAL_RCC_SYSCFG_CLK_ENABLE()".                         */
      HAL_COMP_MspInit(hcomp);
 80041c0:	6878      	ldr	r0, [r7, #4]
 80041c2:	f7fd f8ed 	bl	80013a0 <HAL_COMP_MspInit>
#endif /* USE_HAL_COMP_REGISTER_CALLBACKS */
    }

    /* Memorize voltage scaler state before initialization */
    comp_voltage_scaler_initialized = READ_BIT(hcomp->Instance->CSR, COMP_CSR_SCALEN);
 80041c6:	687b      	ldr	r3, [r7, #4]
 80041c8:	681b      	ldr	r3, [r3, #0]
 80041ca:	681b      	ldr	r3, [r3, #0]
 80041cc:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80041d0:	61bb      	str	r3, [r7, #24]

    /* Set COMP parameters */
    tmp_csr = (  hcomp->Init.InputMinus
 80041d2:	687b      	ldr	r3, [r7, #4]
 80041d4:	689a      	ldr	r2, [r3, #8]
               | hcomp->Init.InputPlus
 80041d6:	687b      	ldr	r3, [r7, #4]
 80041d8:	685b      	ldr	r3, [r3, #4]
 80041da:	431a      	orrs	r2, r3
               | hcomp->Init.BlankingSrce
 80041dc:	687b      	ldr	r3, [r7, #4]
 80041de:	695b      	ldr	r3, [r3, #20]
 80041e0:	431a      	orrs	r2, r3
               | hcomp->Init.Hysteresis
 80041e2:	687b      	ldr	r3, [r7, #4]
 80041e4:	68db      	ldr	r3, [r3, #12]
 80041e6:	431a      	orrs	r2, r3
               | hcomp->Init.OutputPol
 80041e8:	687b      	ldr	r3, [r7, #4]
 80041ea:	691b      	ldr	r3, [r3, #16]
    tmp_csr = (  hcomp->Init.InputMinus
 80041ec:	4313      	orrs	r3, r2
 80041ee:	617b      	str	r3, [r7, #20]
              );

    /* Set parameters in COMP register */
    /* Note: Update all bits except read-only, lock and enable bits */
    MODIFY_REG(hcomp->Instance->CSR,
 80041f0:	687b      	ldr	r3, [r7, #4]
 80041f2:	681b      	ldr	r3, [r3, #0]
 80041f4:	681a      	ldr	r2, [r3, #0]
 80041f6:	4b98      	ldr	r3, [pc, #608]	; (8004458 <HAL_COMP_Init+0x2e0>)
 80041f8:	4013      	ands	r3, r2
 80041fa:	687a      	ldr	r2, [r7, #4]
 80041fc:	6812      	ldr	r2, [r2, #0]
 80041fe:	6979      	ldr	r1, [r7, #20]
 8004200:	430b      	orrs	r3, r1
 8004202:	6013      	str	r3, [r2, #0]
               tmp_csr
              );

    /* Delay for COMP scaler bridge voltage stabilization */
    /* Apply the delay if voltage scaler bridge is required and not already enabled */
    if ((READ_BIT(hcomp->Instance->CSR, COMP_CSR_SCALEN) != 0UL) &&
 8004204:	687b      	ldr	r3, [r7, #4]
 8004206:	681b      	ldr	r3, [r3, #0]
 8004208:	681b      	ldr	r3, [r3, #0]
 800420a:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800420e:	2b00      	cmp	r3, #0
 8004210:	d015      	beq.n	800423e <HAL_COMP_Init+0xc6>
 8004212:	69bb      	ldr	r3, [r7, #24]
 8004214:	2b00      	cmp	r3, #0
 8004216:	d112      	bne.n	800423e <HAL_COMP_Init+0xc6>
    {
      /* Wait loop initialization and execution */
      /* Note: Variable divided by 2 to compensate partially              */
      /*       CPU processing cycles, scaling in us split to not          */
      /*       exceed 32 bits register capacity and handle low frequency. */
      wait_loop_index = ((COMP_DELAY_VOLTAGE_SCALER_STAB_US / 10UL) * (SystemCoreClock / (100000UL * 2UL)));
 8004218:	4b90      	ldr	r3, [pc, #576]	; (800445c <HAL_COMP_Init+0x2e4>)
 800421a:	681b      	ldr	r3, [r3, #0]
 800421c:	099b      	lsrs	r3, r3, #6
 800421e:	4a90      	ldr	r2, [pc, #576]	; (8004460 <HAL_COMP_Init+0x2e8>)
 8004220:	fba2 2303 	umull	r2, r3, r2, r3
 8004224:	099a      	lsrs	r2, r3, #6
 8004226:	4613      	mov	r3, r2
 8004228:	009b      	lsls	r3, r3, #2
 800422a:	4413      	add	r3, r2
 800422c:	009b      	lsls	r3, r3, #2
 800422e:	60fb      	str	r3, [r7, #12]
      while(wait_loop_index != 0UL)
 8004230:	e002      	b.n	8004238 <HAL_COMP_Init+0xc0>
      {
        wait_loop_index--;
 8004232:	68fb      	ldr	r3, [r7, #12]
 8004234:	3b01      	subs	r3, #1
 8004236:	60fb      	str	r3, [r7, #12]
      while(wait_loop_index != 0UL)
 8004238:	68fb      	ldr	r3, [r7, #12]
 800423a:	2b00      	cmp	r3, #0
 800423c:	d1f9      	bne.n	8004232 <HAL_COMP_Init+0xba>
      }
    }

    /* Get the EXTI line corresponding to the selected COMP instance */
    exti_line = COMP_GET_EXTI_LINE(hcomp->Instance);
 800423e:	687b      	ldr	r3, [r7, #4]
 8004240:	681b      	ldr	r3, [r3, #0]
 8004242:	4a88      	ldr	r2, [pc, #544]	; (8004464 <HAL_COMP_Init+0x2ec>)
 8004244:	4293      	cmp	r3, r2
 8004246:	d028      	beq.n	800429a <HAL_COMP_Init+0x122>
 8004248:	687b      	ldr	r3, [r7, #4]
 800424a:	681b      	ldr	r3, [r3, #0]
 800424c:	4a86      	ldr	r2, [pc, #536]	; (8004468 <HAL_COMP_Init+0x2f0>)
 800424e:	4293      	cmp	r3, r2
 8004250:	d020      	beq.n	8004294 <HAL_COMP_Init+0x11c>
 8004252:	687b      	ldr	r3, [r7, #4]
 8004254:	681b      	ldr	r3, [r3, #0]
 8004256:	4a85      	ldr	r2, [pc, #532]	; (800446c <HAL_COMP_Init+0x2f4>)
 8004258:	4293      	cmp	r3, r2
 800425a:	d018      	beq.n	800428e <HAL_COMP_Init+0x116>
 800425c:	687b      	ldr	r3, [r7, #4]
 800425e:	681b      	ldr	r3, [r3, #0]
 8004260:	4a83      	ldr	r2, [pc, #524]	; (8004470 <HAL_COMP_Init+0x2f8>)
 8004262:	4293      	cmp	r3, r2
 8004264:	d010      	beq.n	8004288 <HAL_COMP_Init+0x110>
 8004266:	687b      	ldr	r3, [r7, #4]
 8004268:	681b      	ldr	r3, [r3, #0]
 800426a:	4a82      	ldr	r2, [pc, #520]	; (8004474 <HAL_COMP_Init+0x2fc>)
 800426c:	4293      	cmp	r3, r2
 800426e:	d008      	beq.n	8004282 <HAL_COMP_Init+0x10a>
 8004270:	687b      	ldr	r3, [r7, #4]
 8004272:	681b      	ldr	r3, [r3, #0]
 8004274:	4a80      	ldr	r2, [pc, #512]	; (8004478 <HAL_COMP_Init+0x300>)
 8004276:	4293      	cmp	r3, r2
 8004278:	d101      	bne.n	800427e <HAL_COMP_Init+0x106>
 800427a:	2301      	movs	r3, #1
 800427c:	e00f      	b.n	800429e <HAL_COMP_Init+0x126>
 800427e:	2302      	movs	r3, #2
 8004280:	e00d      	b.n	800429e <HAL_COMP_Init+0x126>
 8004282:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8004286:	e00a      	b.n	800429e <HAL_COMP_Init+0x126>
 8004288:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800428c:	e007      	b.n	800429e <HAL_COMP_Init+0x126>
 800428e:	f04f 5300 	mov.w	r3, #536870912	; 0x20000000
 8004292:	e004      	b.n	800429e <HAL_COMP_Init+0x126>
 8004294:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8004298:	e001      	b.n	800429e <HAL_COMP_Init+0x126>
 800429a:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 800429e:	613b      	str	r3, [r7, #16]

    /* Manage EXTI settings */
    if((hcomp->Init.TriggerMode & (COMP_EXTI_IT | COMP_EXTI_EVENT)) != 0UL)
 80042a0:	687b      	ldr	r3, [r7, #4]
 80042a2:	699b      	ldr	r3, [r3, #24]
 80042a4:	f003 0303 	and.w	r3, r3, #3
 80042a8:	2b00      	cmp	r3, #0
 80042aa:	f000 80b6 	beq.w	800441a <HAL_COMP_Init+0x2a2>
    {
      /* Configure EXTI rising edge */
      if((hcomp->Init.TriggerMode & COMP_EXTI_RISING) != 0UL)
 80042ae:	687b      	ldr	r3, [r7, #4]
 80042b0:	699b      	ldr	r3, [r3, #24]
 80042b2:	f003 0310 	and.w	r3, r3, #16
 80042b6:	2b00      	cmp	r3, #0
 80042b8:	d011      	beq.n	80042de <HAL_COMP_Init+0x166>
      {
#if defined(STM32G474xx) || defined(STM32G484xx) || defined(STM32G473xx) || defined(STM32G483xx)
        if((hcomp->Instance == COMP6) || (hcomp->Instance == COMP7))
 80042ba:	687b      	ldr	r3, [r7, #4]
 80042bc:	681b      	ldr	r3, [r3, #0]
 80042be:	4a6e      	ldr	r2, [pc, #440]	; (8004478 <HAL_COMP_Init+0x300>)
 80042c0:	4293      	cmp	r3, r2
 80042c2:	d004      	beq.n	80042ce <HAL_COMP_Init+0x156>
 80042c4:	687b      	ldr	r3, [r7, #4]
 80042c6:	681b      	ldr	r3, [r3, #0]
 80042c8:	4a6c      	ldr	r2, [pc, #432]	; (800447c <HAL_COMP_Init+0x304>)
 80042ca:	4293      	cmp	r3, r2
 80042cc:	d103      	bne.n	80042d6 <HAL_COMP_Init+0x15e>
        {
          LL_EXTI_EnableRisingTrig_32_63(exti_line);
 80042ce:	6938      	ldr	r0, [r7, #16]
 80042d0:	f7ff feac 	bl	800402c <LL_EXTI_EnableRisingTrig_32_63>
 80042d4:	e014      	b.n	8004300 <HAL_COMP_Init+0x188>
        }
        else
        {
          LL_EXTI_EnableRisingTrig_0_31(exti_line);
 80042d6:	6938      	ldr	r0, [r7, #16]
 80042d8:	f7ff fe96 	bl	8004008 <LL_EXTI_EnableRisingTrig_0_31>
 80042dc:	e010      	b.n	8004300 <HAL_COMP_Init+0x188>
#endif
      }
      else
      {
#if defined(STM32G474xx) || defined(STM32G484xx) || defined(STM32G473xx) || defined(STM32G483xx)
        if((hcomp->Instance == COMP6) || (hcomp->Instance == COMP7))
 80042de:	687b      	ldr	r3, [r7, #4]
 80042e0:	681b      	ldr	r3, [r3, #0]
 80042e2:	4a65      	ldr	r2, [pc, #404]	; (8004478 <HAL_COMP_Init+0x300>)
 80042e4:	4293      	cmp	r3, r2
 80042e6:	d004      	beq.n	80042f2 <HAL_COMP_Init+0x17a>
 80042e8:	687b      	ldr	r3, [r7, #4]
 80042ea:	681b      	ldr	r3, [r3, #0]
 80042ec:	4a63      	ldr	r2, [pc, #396]	; (800447c <HAL_COMP_Init+0x304>)
 80042ee:	4293      	cmp	r3, r2
 80042f0:	d103      	bne.n	80042fa <HAL_COMP_Init+0x182>
        {
          LL_EXTI_DisableRisingTrig_32_63(exti_line);
 80042f2:	6938      	ldr	r0, [r7, #16]
 80042f4:	f7ff fec0 	bl	8004078 <LL_EXTI_DisableRisingTrig_32_63>
 80042f8:	e002      	b.n	8004300 <HAL_COMP_Init+0x188>
        }
        else
        {
          LL_EXTI_DisableRisingTrig_0_31(exti_line);
 80042fa:	6938      	ldr	r0, [r7, #16]
 80042fc:	f7ff fea8 	bl	8004050 <LL_EXTI_DisableRisingTrig_0_31>
        LL_EXTI_DisableRisingTrig_0_31(exti_line);
#endif
      }

      /* Configure EXTI falling edge */
      if((hcomp->Init.TriggerMode & COMP_EXTI_FALLING) != 0UL)
 8004300:	687b      	ldr	r3, [r7, #4]
 8004302:	699b      	ldr	r3, [r3, #24]
 8004304:	f003 0320 	and.w	r3, r3, #32
 8004308:	2b00      	cmp	r3, #0
 800430a:	d011      	beq.n	8004330 <HAL_COMP_Init+0x1b8>
      {
#if defined(STM32G474xx) || defined(STM32G484xx) || defined(STM32G473xx) || defined(STM32G483xx)
        if((hcomp->Instance == COMP6) || (hcomp->Instance == COMP7))
 800430c:	687b      	ldr	r3, [r7, #4]
 800430e:	681b      	ldr	r3, [r3, #0]
 8004310:	4a59      	ldr	r2, [pc, #356]	; (8004478 <HAL_COMP_Init+0x300>)
 8004312:	4293      	cmp	r3, r2
 8004314:	d004      	beq.n	8004320 <HAL_COMP_Init+0x1a8>
 8004316:	687b      	ldr	r3, [r7, #4]
 8004318:	681b      	ldr	r3, [r3, #0]
 800431a:	4a58      	ldr	r2, [pc, #352]	; (800447c <HAL_COMP_Init+0x304>)
 800431c:	4293      	cmp	r3, r2
 800431e:	d103      	bne.n	8004328 <HAL_COMP_Init+0x1b0>
        {
          LL_EXTI_EnableFallingTrig_32_63(exti_line);
 8004320:	6938      	ldr	r0, [r7, #16]
 8004322:	f7ff fecf 	bl	80040c4 <LL_EXTI_EnableFallingTrig_32_63>
 8004326:	e014      	b.n	8004352 <HAL_COMP_Init+0x1da>
        }
        else
        {
          LL_EXTI_EnableFallingTrig_0_31(exti_line);
 8004328:	6938      	ldr	r0, [r7, #16]
 800432a:	f7ff feb9 	bl	80040a0 <LL_EXTI_EnableFallingTrig_0_31>
 800432e:	e010      	b.n	8004352 <HAL_COMP_Init+0x1da>
#endif
      }
      else
      {
#if defined(STM32G474xx) || defined(STM32G484xx) || defined(STM32G473xx) || defined(STM32G483xx)
        if((hcomp->Instance == COMP6) || (hcomp->Instance == COMP7))
 8004330:	687b      	ldr	r3, [r7, #4]
 8004332:	681b      	ldr	r3, [r3, #0]
 8004334:	4a50      	ldr	r2, [pc, #320]	; (8004478 <HAL_COMP_Init+0x300>)
 8004336:	4293      	cmp	r3, r2
 8004338:	d004      	beq.n	8004344 <HAL_COMP_Init+0x1cc>
 800433a:	687b      	ldr	r3, [r7, #4]
 800433c:	681b      	ldr	r3, [r3, #0]
 800433e:	4a4f      	ldr	r2, [pc, #316]	; (800447c <HAL_COMP_Init+0x304>)
 8004340:	4293      	cmp	r3, r2
 8004342:	d103      	bne.n	800434c <HAL_COMP_Init+0x1d4>
        {
          LL_EXTI_DisableFallingTrig_32_63(exti_line);
 8004344:	6938      	ldr	r0, [r7, #16]
 8004346:	f7ff fee3 	bl	8004110 <LL_EXTI_DisableFallingTrig_32_63>
 800434a:	e002      	b.n	8004352 <HAL_COMP_Init+0x1da>
        }
        else
        {
          LL_EXTI_DisableFallingTrig_0_31(exti_line);
 800434c:	6938      	ldr	r0, [r7, #16]
 800434e:	f7ff fecb 	bl	80040e8 <LL_EXTI_DisableFallingTrig_0_31>
#endif
      }

      /* Clear COMP EXTI pending bit (if any) */
#if defined(STM32G474xx) || defined(STM32G484xx) || defined(STM32G473xx) || defined(STM32G483xx)
      if((hcomp->Instance == COMP6) || (hcomp->Instance == COMP7))
 8004352:	687b      	ldr	r3, [r7, #4]
 8004354:	681b      	ldr	r3, [r3, #0]
 8004356:	4a48      	ldr	r2, [pc, #288]	; (8004478 <HAL_COMP_Init+0x300>)
 8004358:	4293      	cmp	r3, r2
 800435a:	d004      	beq.n	8004366 <HAL_COMP_Init+0x1ee>
 800435c:	687b      	ldr	r3, [r7, #4]
 800435e:	681b      	ldr	r3, [r3, #0]
 8004360:	4a46      	ldr	r2, [pc, #280]	; (800447c <HAL_COMP_Init+0x304>)
 8004362:	4293      	cmp	r3, r2
 8004364:	d103      	bne.n	800436e <HAL_COMP_Init+0x1f6>
      {
        LL_EXTI_ClearFlag_32_63(exti_line);
 8004366:	6938      	ldr	r0, [r7, #16]
 8004368:	f7ff fef6 	bl	8004158 <LL_EXTI_ClearFlag_32_63>
 800436c:	e002      	b.n	8004374 <HAL_COMP_Init+0x1fc>
      }
      else
      {
        LL_EXTI_ClearFlag_0_31(exti_line);
 800436e:	6938      	ldr	r0, [r7, #16]
 8004370:	f7ff fee2 	bl	8004138 <LL_EXTI_ClearFlag_0_31>
#else
      LL_EXTI_ClearFlag_0_31(exti_line);
#endif

      /* Configure EXTI event mode */
      if((hcomp->Init.TriggerMode & COMP_EXTI_EVENT) != 0UL)
 8004374:	687b      	ldr	r3, [r7, #4]
 8004376:	699b      	ldr	r3, [r3, #24]
 8004378:	f003 0302 	and.w	r3, r3, #2
 800437c:	2b00      	cmp	r3, #0
 800437e:	d011      	beq.n	80043a4 <HAL_COMP_Init+0x22c>
      {
#if defined(STM32G474xx) || defined(STM32G484xx) || defined(STM32G473xx) || defined(STM32G483xx)
        if((hcomp->Instance == COMP6) || (hcomp->Instance == COMP7))
 8004380:	687b      	ldr	r3, [r7, #4]
 8004382:	681b      	ldr	r3, [r3, #0]
 8004384:	4a3c      	ldr	r2, [pc, #240]	; (8004478 <HAL_COMP_Init+0x300>)
 8004386:	4293      	cmp	r3, r2
 8004388:	d004      	beq.n	8004394 <HAL_COMP_Init+0x21c>
 800438a:	687b      	ldr	r3, [r7, #4]
 800438c:	681b      	ldr	r3, [r3, #0]
 800438e:	4a3b      	ldr	r2, [pc, #236]	; (800447c <HAL_COMP_Init+0x304>)
 8004390:	4293      	cmp	r3, r2
 8004392:	d103      	bne.n	800439c <HAL_COMP_Init+0x224>
        {
          LL_EXTI_EnableEvent_32_63(exti_line);
 8004394:	6938      	ldr	r0, [r7, #16]
 8004396:	f7ff fdfd 	bl	8003f94 <LL_EXTI_EnableEvent_32_63>
 800439a:	e014      	b.n	80043c6 <HAL_COMP_Init+0x24e>
        }
        else
        {
          LL_EXTI_EnableEvent_0_31(exti_line);
 800439c:	6938      	ldr	r0, [r7, #16]
 800439e:	f7ff fde7 	bl	8003f70 <LL_EXTI_EnableEvent_0_31>
 80043a2:	e010      	b.n	80043c6 <HAL_COMP_Init+0x24e>
#endif
      }
      else
      {
#if defined(STM32G474xx) || defined(STM32G484xx) || defined(STM32G473xx) || defined(STM32G483xx)
        if((hcomp->Instance == COMP6) || (hcomp->Instance == COMP7))
 80043a4:	687b      	ldr	r3, [r7, #4]
 80043a6:	681b      	ldr	r3, [r3, #0]
 80043a8:	4a33      	ldr	r2, [pc, #204]	; (8004478 <HAL_COMP_Init+0x300>)
 80043aa:	4293      	cmp	r3, r2
 80043ac:	d004      	beq.n	80043b8 <HAL_COMP_Init+0x240>
 80043ae:	687b      	ldr	r3, [r7, #4]
 80043b0:	681b      	ldr	r3, [r3, #0]
 80043b2:	4a32      	ldr	r2, [pc, #200]	; (800447c <HAL_COMP_Init+0x304>)
 80043b4:	4293      	cmp	r3, r2
 80043b6:	d103      	bne.n	80043c0 <HAL_COMP_Init+0x248>
        {
          LL_EXTI_DisableEvent_32_63(exti_line);
 80043b8:	6938      	ldr	r0, [r7, #16]
 80043ba:	f7ff fe11 	bl	8003fe0 <LL_EXTI_DisableEvent_32_63>
 80043be:	e002      	b.n	80043c6 <HAL_COMP_Init+0x24e>
        }
        else
        {
          LL_EXTI_DisableEvent_0_31(exti_line);
 80043c0:	6938      	ldr	r0, [r7, #16]
 80043c2:	f7ff fdf9 	bl	8003fb8 <LL_EXTI_DisableEvent_0_31>
        LL_EXTI_DisableEvent_0_31(exti_line);
#endif
      }

      /* Configure EXTI interrupt mode */
      if((hcomp->Init.TriggerMode & COMP_EXTI_IT) != 0UL)
 80043c6:	687b      	ldr	r3, [r7, #4]
 80043c8:	699b      	ldr	r3, [r3, #24]
 80043ca:	f003 0301 	and.w	r3, r3, #1
 80043ce:	2b00      	cmp	r3, #0
 80043d0:	d011      	beq.n	80043f6 <HAL_COMP_Init+0x27e>
      {
#if defined(STM32G474xx) || defined(STM32G484xx) || defined(STM32G473xx) || defined(STM32G483xx)
        if((hcomp->Instance == COMP6) || (hcomp->Instance == COMP7))
 80043d2:	687b      	ldr	r3, [r7, #4]
 80043d4:	681b      	ldr	r3, [r3, #0]
 80043d6:	4a28      	ldr	r2, [pc, #160]	; (8004478 <HAL_COMP_Init+0x300>)
 80043d8:	4293      	cmp	r3, r2
 80043da:	d004      	beq.n	80043e6 <HAL_COMP_Init+0x26e>
 80043dc:	687b      	ldr	r3, [r7, #4]
 80043de:	681b      	ldr	r3, [r3, #0]
 80043e0:	4a26      	ldr	r2, [pc, #152]	; (800447c <HAL_COMP_Init+0x304>)
 80043e2:	4293      	cmp	r3, r2
 80043e4:	d103      	bne.n	80043ee <HAL_COMP_Init+0x276>
        {
          LL_EXTI_EnableIT_32_63(exti_line);
 80043e6:	6938      	ldr	r0, [r7, #16]
 80043e8:	f7ff fd88 	bl	8003efc <LL_EXTI_EnableIT_32_63>
 80043ec:	e04b      	b.n	8004486 <HAL_COMP_Init+0x30e>
        }
        else
        {
          LL_EXTI_EnableIT_0_31(exti_line);
 80043ee:	6938      	ldr	r0, [r7, #16]
 80043f0:	f7ff fd72 	bl	8003ed8 <LL_EXTI_EnableIT_0_31>
 80043f4:	e047      	b.n	8004486 <HAL_COMP_Init+0x30e>
#endif
      }
      else
      {
#if defined(STM32G474xx) || defined(STM32G484xx) || defined(STM32G473xx) || defined(STM32G483xx)
        if((hcomp->Instance == COMP6) || (hcomp->Instance == COMP7))
 80043f6:	687b      	ldr	r3, [r7, #4]
 80043f8:	681b      	ldr	r3, [r3, #0]
 80043fa:	4a1f      	ldr	r2, [pc, #124]	; (8004478 <HAL_COMP_Init+0x300>)
 80043fc:	4293      	cmp	r3, r2
 80043fe:	d004      	beq.n	800440a <HAL_COMP_Init+0x292>
 8004400:	687b      	ldr	r3, [r7, #4]
 8004402:	681b      	ldr	r3, [r3, #0]
 8004404:	4a1d      	ldr	r2, [pc, #116]	; (800447c <HAL_COMP_Init+0x304>)
 8004406:	4293      	cmp	r3, r2
 8004408:	d103      	bne.n	8004412 <HAL_COMP_Init+0x29a>
        {
          LL_EXTI_DisableIT_32_63(exti_line);
 800440a:	6938      	ldr	r0, [r7, #16]
 800440c:	f7ff fd9c 	bl	8003f48 <LL_EXTI_DisableIT_32_63>
 8004410:	e039      	b.n	8004486 <HAL_COMP_Init+0x30e>
        }
        else
        {
          LL_EXTI_DisableIT_0_31(exti_line);
 8004412:	6938      	ldr	r0, [r7, #16]
 8004414:	f7ff fd84 	bl	8003f20 <LL_EXTI_DisableIT_0_31>
 8004418:	e035      	b.n	8004486 <HAL_COMP_Init+0x30e>
    }
    else
    {
      /* Disable EXTI event mode */
#if defined(STM32G474xx) || defined(STM32G484xx) || defined(STM32G473xx) || defined(STM32G483xx)
      if((hcomp->Instance == COMP6) || (hcomp->Instance == COMP7))
 800441a:	687b      	ldr	r3, [r7, #4]
 800441c:	681b      	ldr	r3, [r3, #0]
 800441e:	4a16      	ldr	r2, [pc, #88]	; (8004478 <HAL_COMP_Init+0x300>)
 8004420:	4293      	cmp	r3, r2
 8004422:	d004      	beq.n	800442e <HAL_COMP_Init+0x2b6>
 8004424:	687b      	ldr	r3, [r7, #4]
 8004426:	681b      	ldr	r3, [r3, #0]
 8004428:	4a14      	ldr	r2, [pc, #80]	; (800447c <HAL_COMP_Init+0x304>)
 800442a:	4293      	cmp	r3, r2
 800442c:	d103      	bne.n	8004436 <HAL_COMP_Init+0x2be>
      {
        LL_EXTI_DisableEvent_32_63(exti_line);
 800442e:	6938      	ldr	r0, [r7, #16]
 8004430:	f7ff fdd6 	bl	8003fe0 <LL_EXTI_DisableEvent_32_63>
 8004434:	e002      	b.n	800443c <HAL_COMP_Init+0x2c4>
      }
      else
      {
        LL_EXTI_DisableEvent_0_31(exti_line);
 8004436:	6938      	ldr	r0, [r7, #16]
 8004438:	f7ff fdbe 	bl	8003fb8 <LL_EXTI_DisableEvent_0_31>
      LL_EXTI_DisableEvent_0_31(exti_line);
#endif

      /* Disable EXTI interrupt mode */
#if defined(STM32G474xx) || defined(STM32G484xx) || defined(STM32G473xx) || defined(STM32G483xx)
      if((hcomp->Instance == COMP6) || (hcomp->Instance == COMP7))
 800443c:	687b      	ldr	r3, [r7, #4]
 800443e:	681b      	ldr	r3, [r3, #0]
 8004440:	4a0d      	ldr	r2, [pc, #52]	; (8004478 <HAL_COMP_Init+0x300>)
 8004442:	4293      	cmp	r3, r2
 8004444:	d004      	beq.n	8004450 <HAL_COMP_Init+0x2d8>
 8004446:	687b      	ldr	r3, [r7, #4]
 8004448:	681b      	ldr	r3, [r3, #0]
 800444a:	4a0c      	ldr	r2, [pc, #48]	; (800447c <HAL_COMP_Init+0x304>)
 800444c:	4293      	cmp	r3, r2
 800444e:	d117      	bne.n	8004480 <HAL_COMP_Init+0x308>
      {
        LL_EXTI_DisableIT_32_63(exti_line);
 8004450:	6938      	ldr	r0, [r7, #16]
 8004452:	f7ff fd79 	bl	8003f48 <LL_EXTI_DisableIT_32_63>
 8004456:	e016      	b.n	8004486 <HAL_COMP_Init+0x30e>
 8004458:	ff007e0f 	.word	0xff007e0f
 800445c:	20000010 	.word	0x20000010
 8004460:	053e2d63 	.word	0x053e2d63
 8004464:	40010200 	.word	0x40010200
 8004468:	40010204 	.word	0x40010204
 800446c:	40010208 	.word	0x40010208
 8004470:	4001020c 	.word	0x4001020c
 8004474:	40010210 	.word	0x40010210
 8004478:	40010214 	.word	0x40010214
 800447c:	40010218 	.word	0x40010218
      }
      else
      {
        LL_EXTI_DisableIT_0_31(exti_line);
 8004480:	6938      	ldr	r0, [r7, #16]
 8004482:	f7ff fd4d 	bl	8003f20 <LL_EXTI_DisableIT_0_31>
    }

    /* Set HAL COMP handle state */
    /* Note: Transition from state reset to state ready,                      */
    /*       otherwise (coming from state ready or busy) no state update.     */
    if (hcomp->State == HAL_COMP_STATE_RESET)
 8004486:	687b      	ldr	r3, [r7, #4]
 8004488:	7f5b      	ldrb	r3, [r3, #29]
 800448a:	b2db      	uxtb	r3, r3
 800448c:	2b00      	cmp	r3, #0
 800448e:	d102      	bne.n	8004496 <HAL_COMP_Init+0x31e>
    {
      hcomp->State = HAL_COMP_STATE_READY;
 8004490:	687b      	ldr	r3, [r7, #4]
 8004492:	2201      	movs	r2, #1
 8004494:	775a      	strb	r2, [r3, #29]
    }
  }

  return status;
 8004496:	7ffb      	ldrb	r3, [r7, #31]
}
 8004498:	4618      	mov	r0, r3
 800449a:	3720      	adds	r7, #32
 800449c:	46bd      	mov	sp, r7
 800449e:	bd80      	pop	{r7, pc}

080044a0 <__NVIC_SetPriorityGrouping>:
{
 80044a0:	b480      	push	{r7}
 80044a2:	b085      	sub	sp, #20
 80044a4:	af00      	add	r7, sp, #0
 80044a6:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80044a8:	687b      	ldr	r3, [r7, #4]
 80044aa:	f003 0307 	and.w	r3, r3, #7
 80044ae:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80044b0:	4b0c      	ldr	r3, [pc, #48]	; (80044e4 <__NVIC_SetPriorityGrouping+0x44>)
 80044b2:	68db      	ldr	r3, [r3, #12]
 80044b4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80044b6:	68ba      	ldr	r2, [r7, #8]
 80044b8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80044bc:	4013      	ands	r3, r2
 80044be:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80044c0:	68fb      	ldr	r3, [r7, #12]
 80044c2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80044c4:	68bb      	ldr	r3, [r7, #8]
 80044c6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80044c8:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80044cc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80044d0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80044d2:	4a04      	ldr	r2, [pc, #16]	; (80044e4 <__NVIC_SetPriorityGrouping+0x44>)
 80044d4:	68bb      	ldr	r3, [r7, #8]
 80044d6:	60d3      	str	r3, [r2, #12]
}
 80044d8:	bf00      	nop
 80044da:	3714      	adds	r7, #20
 80044dc:	46bd      	mov	sp, r7
 80044de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044e2:	4770      	bx	lr
 80044e4:	e000ed00 	.word	0xe000ed00

080044e8 <__NVIC_GetPriorityGrouping>:
{
 80044e8:	b480      	push	{r7}
 80044ea:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80044ec:	4b04      	ldr	r3, [pc, #16]	; (8004500 <__NVIC_GetPriorityGrouping+0x18>)
 80044ee:	68db      	ldr	r3, [r3, #12]
 80044f0:	0a1b      	lsrs	r3, r3, #8
 80044f2:	f003 0307 	and.w	r3, r3, #7
}
 80044f6:	4618      	mov	r0, r3
 80044f8:	46bd      	mov	sp, r7
 80044fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044fe:	4770      	bx	lr
 8004500:	e000ed00 	.word	0xe000ed00

08004504 <__NVIC_EnableIRQ>:
{
 8004504:	b480      	push	{r7}
 8004506:	b083      	sub	sp, #12
 8004508:	af00      	add	r7, sp, #0
 800450a:	4603      	mov	r3, r0
 800450c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800450e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004512:	2b00      	cmp	r3, #0
 8004514:	db0b      	blt.n	800452e <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8004516:	79fb      	ldrb	r3, [r7, #7]
 8004518:	f003 021f 	and.w	r2, r3, #31
 800451c:	4907      	ldr	r1, [pc, #28]	; (800453c <__NVIC_EnableIRQ+0x38>)
 800451e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004522:	095b      	lsrs	r3, r3, #5
 8004524:	2001      	movs	r0, #1
 8004526:	fa00 f202 	lsl.w	r2, r0, r2
 800452a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 800452e:	bf00      	nop
 8004530:	370c      	adds	r7, #12
 8004532:	46bd      	mov	sp, r7
 8004534:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004538:	4770      	bx	lr
 800453a:	bf00      	nop
 800453c:	e000e100 	.word	0xe000e100

08004540 <__NVIC_SetPriority>:
{
 8004540:	b480      	push	{r7}
 8004542:	b083      	sub	sp, #12
 8004544:	af00      	add	r7, sp, #0
 8004546:	4603      	mov	r3, r0
 8004548:	6039      	str	r1, [r7, #0]
 800454a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800454c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004550:	2b00      	cmp	r3, #0
 8004552:	db0a      	blt.n	800456a <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004554:	683b      	ldr	r3, [r7, #0]
 8004556:	b2da      	uxtb	r2, r3
 8004558:	490c      	ldr	r1, [pc, #48]	; (800458c <__NVIC_SetPriority+0x4c>)
 800455a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800455e:	0112      	lsls	r2, r2, #4
 8004560:	b2d2      	uxtb	r2, r2
 8004562:	440b      	add	r3, r1
 8004564:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8004568:	e00a      	b.n	8004580 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800456a:	683b      	ldr	r3, [r7, #0]
 800456c:	b2da      	uxtb	r2, r3
 800456e:	4908      	ldr	r1, [pc, #32]	; (8004590 <__NVIC_SetPriority+0x50>)
 8004570:	79fb      	ldrb	r3, [r7, #7]
 8004572:	f003 030f 	and.w	r3, r3, #15
 8004576:	3b04      	subs	r3, #4
 8004578:	0112      	lsls	r2, r2, #4
 800457a:	b2d2      	uxtb	r2, r2
 800457c:	440b      	add	r3, r1
 800457e:	761a      	strb	r2, [r3, #24]
}
 8004580:	bf00      	nop
 8004582:	370c      	adds	r7, #12
 8004584:	46bd      	mov	sp, r7
 8004586:	f85d 7b04 	ldr.w	r7, [sp], #4
 800458a:	4770      	bx	lr
 800458c:	e000e100 	.word	0xe000e100
 8004590:	e000ed00 	.word	0xe000ed00

08004594 <NVIC_EncodePriority>:
{
 8004594:	b480      	push	{r7}
 8004596:	b089      	sub	sp, #36	; 0x24
 8004598:	af00      	add	r7, sp, #0
 800459a:	60f8      	str	r0, [r7, #12]
 800459c:	60b9      	str	r1, [r7, #8]
 800459e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80045a0:	68fb      	ldr	r3, [r7, #12]
 80045a2:	f003 0307 	and.w	r3, r3, #7
 80045a6:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80045a8:	69fb      	ldr	r3, [r7, #28]
 80045aa:	f1c3 0307 	rsb	r3, r3, #7
 80045ae:	2b04      	cmp	r3, #4
 80045b0:	bf28      	it	cs
 80045b2:	2304      	movcs	r3, #4
 80045b4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80045b6:	69fb      	ldr	r3, [r7, #28]
 80045b8:	3304      	adds	r3, #4
 80045ba:	2b06      	cmp	r3, #6
 80045bc:	d902      	bls.n	80045c4 <NVIC_EncodePriority+0x30>
 80045be:	69fb      	ldr	r3, [r7, #28]
 80045c0:	3b03      	subs	r3, #3
 80045c2:	e000      	b.n	80045c6 <NVIC_EncodePriority+0x32>
 80045c4:	2300      	movs	r3, #0
 80045c6:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80045c8:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80045cc:	69bb      	ldr	r3, [r7, #24]
 80045ce:	fa02 f303 	lsl.w	r3, r2, r3
 80045d2:	43da      	mvns	r2, r3
 80045d4:	68bb      	ldr	r3, [r7, #8]
 80045d6:	401a      	ands	r2, r3
 80045d8:	697b      	ldr	r3, [r7, #20]
 80045da:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80045dc:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 80045e0:	697b      	ldr	r3, [r7, #20]
 80045e2:	fa01 f303 	lsl.w	r3, r1, r3
 80045e6:	43d9      	mvns	r1, r3
 80045e8:	687b      	ldr	r3, [r7, #4]
 80045ea:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80045ec:	4313      	orrs	r3, r2
}
 80045ee:	4618      	mov	r0, r3
 80045f0:	3724      	adds	r7, #36	; 0x24
 80045f2:	46bd      	mov	sp, r7
 80045f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045f8:	4770      	bx	lr
	...

080045fc <SysTick_Config>:
{
 80045fc:	b580      	push	{r7, lr}
 80045fe:	b082      	sub	sp, #8
 8004600:	af00      	add	r7, sp, #0
 8004602:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8004604:	687b      	ldr	r3, [r7, #4]
 8004606:	3b01      	subs	r3, #1
 8004608:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800460c:	d301      	bcc.n	8004612 <SysTick_Config+0x16>
    return (1UL);                                                   /* Reload value impossible */
 800460e:	2301      	movs	r3, #1
 8004610:	e00f      	b.n	8004632 <SysTick_Config+0x36>
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8004612:	4a0a      	ldr	r2, [pc, #40]	; (800463c <SysTick_Config+0x40>)
 8004614:	687b      	ldr	r3, [r7, #4]
 8004616:	3b01      	subs	r3, #1
 8004618:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800461a:	210f      	movs	r1, #15
 800461c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8004620:	f7ff ff8e 	bl	8004540 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8004624:	4b05      	ldr	r3, [pc, #20]	; (800463c <SysTick_Config+0x40>)
 8004626:	2200      	movs	r2, #0
 8004628:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800462a:	4b04      	ldr	r3, [pc, #16]	; (800463c <SysTick_Config+0x40>)
 800462c:	2207      	movs	r2, #7
 800462e:	601a      	str	r2, [r3, #0]
  return (0UL);                                                     /* Function successful */
 8004630:	2300      	movs	r3, #0
}
 8004632:	4618      	mov	r0, r3
 8004634:	3708      	adds	r7, #8
 8004636:	46bd      	mov	sp, r7
 8004638:	bd80      	pop	{r7, pc}
 800463a:	bf00      	nop
 800463c:	e000e010 	.word	0xe000e010

08004640 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004640:	b580      	push	{r7, lr}
 8004642:	b082      	sub	sp, #8
 8004644:	af00      	add	r7, sp, #0
 8004646:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8004648:	6878      	ldr	r0, [r7, #4]
 800464a:	f7ff ff29 	bl	80044a0 <__NVIC_SetPriorityGrouping>
}
 800464e:	bf00      	nop
 8004650:	3708      	adds	r7, #8
 8004652:	46bd      	mov	sp, r7
 8004654:	bd80      	pop	{r7, pc}

08004656 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8004656:	b580      	push	{r7, lr}
 8004658:	b086      	sub	sp, #24
 800465a:	af00      	add	r7, sp, #0
 800465c:	4603      	mov	r3, r0
 800465e:	60b9      	str	r1, [r7, #8]
 8004660:	607a      	str	r2, [r7, #4]
 8004662:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8004664:	f7ff ff40 	bl	80044e8 <__NVIC_GetPriorityGrouping>
 8004668:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800466a:	687a      	ldr	r2, [r7, #4]
 800466c:	68b9      	ldr	r1, [r7, #8]
 800466e:	6978      	ldr	r0, [r7, #20]
 8004670:	f7ff ff90 	bl	8004594 <NVIC_EncodePriority>
 8004674:	4602      	mov	r2, r0
 8004676:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800467a:	4611      	mov	r1, r2
 800467c:	4618      	mov	r0, r3
 800467e:	f7ff ff5f 	bl	8004540 <__NVIC_SetPriority>
}
 8004682:	bf00      	nop
 8004684:	3718      	adds	r7, #24
 8004686:	46bd      	mov	sp, r7
 8004688:	bd80      	pop	{r7, pc}

0800468a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800468a:	b580      	push	{r7, lr}
 800468c:	b082      	sub	sp, #8
 800468e:	af00      	add	r7, sp, #0
 8004690:	4603      	mov	r3, r0
 8004692:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8004694:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004698:	4618      	mov	r0, r3
 800469a:	f7ff ff33 	bl	8004504 <__NVIC_EnableIRQ>
}
 800469e:	bf00      	nop
 80046a0:	3708      	adds	r7, #8
 80046a2:	46bd      	mov	sp, r7
 80046a4:	bd80      	pop	{r7, pc}

080046a6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80046a6:	b580      	push	{r7, lr}
 80046a8:	b082      	sub	sp, #8
 80046aa:	af00      	add	r7, sp, #0
 80046ac:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80046ae:	6878      	ldr	r0, [r7, #4]
 80046b0:	f7ff ffa4 	bl	80045fc <SysTick_Config>
 80046b4:	4603      	mov	r3, r0
}
 80046b6:	4618      	mov	r0, r3
 80046b8:	3708      	adds	r7, #8
 80046ba:	46bd      	mov	sp, r7
 80046bc:	bd80      	pop	{r7, pc}

080046be <HAL_DAC_Init>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Init(DAC_HandleTypeDef *hdac)
{
 80046be:	b580      	push	{r7, lr}
 80046c0:	b082      	sub	sp, #8
 80046c2:	af00      	add	r7, sp, #0
 80046c4:	6078      	str	r0, [r7, #4]
  /* Check DAC handle */
  if (hdac == NULL)
 80046c6:	687b      	ldr	r3, [r7, #4]
 80046c8:	2b00      	cmp	r3, #0
 80046ca:	d101      	bne.n	80046d0 <HAL_DAC_Init+0x12>
  {
    return HAL_ERROR;
 80046cc:	2301      	movs	r3, #1
 80046ce:	e014      	b.n	80046fa <HAL_DAC_Init+0x3c>
  }
  /* Check the parameters */
  assert_param(IS_DAC_ALL_INSTANCE(hdac->Instance));

  if (hdac->State == HAL_DAC_STATE_RESET)
 80046d0:	687b      	ldr	r3, [r7, #4]
 80046d2:	791b      	ldrb	r3, [r3, #4]
 80046d4:	b2db      	uxtb	r3, r3
 80046d6:	2b00      	cmp	r3, #0
 80046d8:	d105      	bne.n	80046e6 <HAL_DAC_Init+0x28>
      hdac->MspInitCallback             = HAL_DAC_MspInit;
    }
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

    /* Allocate lock resource and initialize it */
    hdac->Lock = HAL_UNLOCKED;
 80046da:	687b      	ldr	r3, [r7, #4]
 80046dc:	2200      	movs	r2, #0
 80046de:	715a      	strb	r2, [r3, #5]
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
    /* Init the low level hardware */
    hdac->MspInitCallback(hdac);
#else
    /* Init the low level hardware */
    HAL_DAC_MspInit(hdac);
 80046e0:	6878      	ldr	r0, [r7, #4]
 80046e2:	f7fc ff13 	bl	800150c <HAL_DAC_MspInit>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
  }

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_BUSY;
 80046e6:	687b      	ldr	r3, [r7, #4]
 80046e8:	2202      	movs	r2, #2
 80046ea:	711a      	strb	r2, [r3, #4]

  /* Set DAC error code to none */
  hdac->ErrorCode = HAL_DAC_ERROR_NONE;
 80046ec:	687b      	ldr	r3, [r7, #4]
 80046ee:	2200      	movs	r2, #0
 80046f0:	611a      	str	r2, [r3, #16]

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_READY;
 80046f2:	687b      	ldr	r3, [r7, #4]
 80046f4:	2201      	movs	r2, #1
 80046f6:	711a      	strb	r2, [r3, #4]

  /* Return function status */
  return HAL_OK;
 80046f8:	2300      	movs	r3, #0
}
 80046fa:	4618      	mov	r0, r3
 80046fc:	3708      	adds	r7, #8
 80046fe:	46bd      	mov	sp, r7
 8004700:	bd80      	pop	{r7, pc}

08004702 <HAL_DAC_Start>:
  *         (1) On this STM32 serie, parameter not available on all instances.
  *             Refer to device datasheet for channels availability.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Start(DAC_HandleTypeDef *hdac, uint32_t Channel)
{
 8004702:	b580      	push	{r7, lr}
 8004704:	b082      	sub	sp, #8
 8004706:	af00      	add	r7, sp, #0
 8004708:	6078      	str	r0, [r7, #4]
 800470a:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(hdac->Instance, Channel));

  /* Process locked */
  __HAL_LOCK(hdac);
 800470c:	687b      	ldr	r3, [r7, #4]
 800470e:	795b      	ldrb	r3, [r3, #5]
 8004710:	2b01      	cmp	r3, #1
 8004712:	d101      	bne.n	8004718 <HAL_DAC_Start+0x16>
 8004714:	2302      	movs	r3, #2
 8004716:	e043      	b.n	80047a0 <HAL_DAC_Start+0x9e>
 8004718:	687b      	ldr	r3, [r7, #4]
 800471a:	2201      	movs	r2, #1
 800471c:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 800471e:	687b      	ldr	r3, [r7, #4]
 8004720:	2202      	movs	r2, #2
 8004722:	711a      	strb	r2, [r3, #4]

  /* Enable the Peripheral */
  __HAL_DAC_ENABLE(hdac, Channel);
 8004724:	687b      	ldr	r3, [r7, #4]
 8004726:	681b      	ldr	r3, [r3, #0]
 8004728:	6819      	ldr	r1, [r3, #0]
 800472a:	683b      	ldr	r3, [r7, #0]
 800472c:	f003 0310 	and.w	r3, r3, #16
 8004730:	2201      	movs	r2, #1
 8004732:	409a      	lsls	r2, r3
 8004734:	687b      	ldr	r3, [r7, #4]
 8004736:	681b      	ldr	r3, [r3, #0]
 8004738:	430a      	orrs	r2, r1
 800473a:	601a      	str	r2, [r3, #0]
  /* Ensure minimum wait before using peripheral after enabling it */
  HAL_Delay(1);
 800473c:	2001      	movs	r0, #1
 800473e:	f7fe fb4d 	bl	8002ddc <HAL_Delay>

  if (Channel == DAC_CHANNEL_1)
 8004742:	683b      	ldr	r3, [r7, #0]
 8004744:	2b00      	cmp	r3, #0
 8004746:	d10f      	bne.n	8004768 <HAL_DAC_Start+0x66>
  {
    /* Check if software trigger enabled */
    if ((hdac->Instance->CR & (DAC_CR_TEN1 | DAC_CR_TSEL1)) == DAC_TRIGGER_SOFTWARE)
 8004748:	687b      	ldr	r3, [r7, #4]
 800474a:	681b      	ldr	r3, [r3, #0]
 800474c:	681b      	ldr	r3, [r3, #0]
 800474e:	f003 033e 	and.w	r3, r3, #62	; 0x3e
 8004752:	2b02      	cmp	r3, #2
 8004754:	d11d      	bne.n	8004792 <HAL_DAC_Start+0x90>
    {
      /* Enable the selected DAC software conversion */
      SET_BIT(hdac->Instance->SWTRIGR, DAC_SWTRIGR_SWTRIG1);
 8004756:	687b      	ldr	r3, [r7, #4]
 8004758:	681b      	ldr	r3, [r3, #0]
 800475a:	685a      	ldr	r2, [r3, #4]
 800475c:	687b      	ldr	r3, [r7, #4]
 800475e:	681b      	ldr	r3, [r3, #0]
 8004760:	f042 0201 	orr.w	r2, r2, #1
 8004764:	605a      	str	r2, [r3, #4]
 8004766:	e014      	b.n	8004792 <HAL_DAC_Start+0x90>
    }
  }
  else
  {
    /* Check if software trigger enabled */
    if ((hdac->Instance->CR & (DAC_CR_TEN2 | DAC_CR_TSEL2)) == (DAC_TRIGGER_SOFTWARE << (Channel & 0x10UL)))
 8004768:	687b      	ldr	r3, [r7, #4]
 800476a:	681b      	ldr	r3, [r3, #0]
 800476c:	681b      	ldr	r3, [r3, #0]
 800476e:	f403 1278 	and.w	r2, r3, #4063232	; 0x3e0000
 8004772:	683b      	ldr	r3, [r7, #0]
 8004774:	f003 0310 	and.w	r3, r3, #16
 8004778:	2102      	movs	r1, #2
 800477a:	fa01 f303 	lsl.w	r3, r1, r3
 800477e:	429a      	cmp	r2, r3
 8004780:	d107      	bne.n	8004792 <HAL_DAC_Start+0x90>
    {
      /* Enable the selected DAC software conversion*/
      SET_BIT(hdac->Instance->SWTRIGR, DAC_SWTRIGR_SWTRIG2);
 8004782:	687b      	ldr	r3, [r7, #4]
 8004784:	681b      	ldr	r3, [r3, #0]
 8004786:	685a      	ldr	r2, [r3, #4]
 8004788:	687b      	ldr	r3, [r7, #4]
 800478a:	681b      	ldr	r3, [r3, #0]
 800478c:	f042 0202 	orr.w	r2, r2, #2
 8004790:	605a      	str	r2, [r3, #4]
    }
  }

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 8004792:	687b      	ldr	r3, [r7, #4]
 8004794:	2201      	movs	r2, #1
 8004796:	711a      	strb	r2, [r3, #4]

  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 8004798:	687b      	ldr	r3, [r7, #4]
 800479a:	2200      	movs	r2, #0
 800479c:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 800479e:	2300      	movs	r3, #0
}
 80047a0:	4618      	mov	r0, r3
 80047a2:	3708      	adds	r7, #8
 80047a4:	46bd      	mov	sp, r7
 80047a6:	bd80      	pop	{r7, pc}

080047a8 <HAL_DAC_Start_DMA>:
  *            @arg DAC_ALIGN_12B_R: 12bit right data alignment selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Start_DMA(DAC_HandleTypeDef *hdac, uint32_t Channel, uint32_t *pData, uint32_t Length,
                                    uint32_t Alignment)
{
 80047a8:	b580      	push	{r7, lr}
 80047aa:	b086      	sub	sp, #24
 80047ac:	af00      	add	r7, sp, #0
 80047ae:	60f8      	str	r0, [r7, #12]
 80047b0:	60b9      	str	r1, [r7, #8]
 80047b2:	607a      	str	r2, [r7, #4]
 80047b4:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status;
  uint32_t tmpreg = 0U;
 80047b6:	2300      	movs	r3, #0
 80047b8:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(hdac->Instance, Channel));
  assert_param(IS_DAC_ALIGN(Alignment));

  /* Process locked */
  __HAL_LOCK(hdac);
 80047ba:	68fb      	ldr	r3, [r7, #12]
 80047bc:	795b      	ldrb	r3, [r3, #5]
 80047be:	2b01      	cmp	r3, #1
 80047c0:	d101      	bne.n	80047c6 <HAL_DAC_Start_DMA+0x1e>
 80047c2:	2302      	movs	r3, #2
 80047c4:	e0a1      	b.n	800490a <HAL_DAC_Start_DMA+0x162>
 80047c6:	68fb      	ldr	r3, [r7, #12]
 80047c8:	2201      	movs	r2, #1
 80047ca:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 80047cc:	68fb      	ldr	r3, [r7, #12]
 80047ce:	2202      	movs	r2, #2
 80047d0:	711a      	strb	r2, [r3, #4]

  if (Channel == DAC_CHANNEL_1)
 80047d2:	68bb      	ldr	r3, [r7, #8]
 80047d4:	2b00      	cmp	r3, #0
 80047d6:	d12a      	bne.n	800482e <HAL_DAC_Start_DMA+0x86>
  {
    /* Set the DMA transfer complete callback for channel1 */
    hdac->DMA_Handle1->XferCpltCallback = DAC_DMAConvCpltCh1;
 80047d8:	68fb      	ldr	r3, [r7, #12]
 80047da:	689b      	ldr	r3, [r3, #8]
 80047dc:	4a4d      	ldr	r2, [pc, #308]	; (8004914 <HAL_DAC_Start_DMA+0x16c>)
 80047de:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Set the DMA half transfer complete callback for channel1 */
    hdac->DMA_Handle1->XferHalfCpltCallback = DAC_DMAHalfConvCpltCh1;
 80047e0:	68fb      	ldr	r3, [r7, #12]
 80047e2:	689b      	ldr	r3, [r3, #8]
 80047e4:	4a4c      	ldr	r2, [pc, #304]	; (8004918 <HAL_DAC_Start_DMA+0x170>)
 80047e6:	631a      	str	r2, [r3, #48]	; 0x30

    /* Set the DMA error callback for channel1 */
    hdac->DMA_Handle1->XferErrorCallback = DAC_DMAErrorCh1;
 80047e8:	68fb      	ldr	r3, [r7, #12]
 80047ea:	689b      	ldr	r3, [r3, #8]
 80047ec:	4a4b      	ldr	r2, [pc, #300]	; (800491c <HAL_DAC_Start_DMA+0x174>)
 80047ee:	635a      	str	r2, [r3, #52]	; 0x34

    /* Enable the selected DAC channel1 DMA request */
    SET_BIT(hdac->Instance->CR, DAC_CR_DMAEN1);
 80047f0:	68fb      	ldr	r3, [r7, #12]
 80047f2:	681b      	ldr	r3, [r3, #0]
 80047f4:	681a      	ldr	r2, [r3, #0]
 80047f6:	68fb      	ldr	r3, [r7, #12]
 80047f8:	681b      	ldr	r3, [r3, #0]
 80047fa:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 80047fe:	601a      	str	r2, [r3, #0]

    /* Case of use of channel 1 */
    switch (Alignment)
 8004800:	6a3b      	ldr	r3, [r7, #32]
 8004802:	2b04      	cmp	r3, #4
 8004804:	d009      	beq.n	800481a <HAL_DAC_Start_DMA+0x72>
 8004806:	2b08      	cmp	r3, #8
 8004808:	d00c      	beq.n	8004824 <HAL_DAC_Start_DMA+0x7c>
 800480a:	2b00      	cmp	r3, #0
 800480c:	d000      	beq.n	8004810 <HAL_DAC_Start_DMA+0x68>
      case DAC_ALIGN_8B_R:
        /* Get DHR8R1 address */
        tmpreg = (uint32_t)&hdac->Instance->DHR8R1;
        break;
      default:
        break;
 800480e:	e039      	b.n	8004884 <HAL_DAC_Start_DMA+0xdc>
        tmpreg = (uint32_t)&hdac->Instance->DHR12R1;
 8004810:	68fb      	ldr	r3, [r7, #12]
 8004812:	681b      	ldr	r3, [r3, #0]
 8004814:	3308      	adds	r3, #8
 8004816:	613b      	str	r3, [r7, #16]
        break;
 8004818:	e034      	b.n	8004884 <HAL_DAC_Start_DMA+0xdc>
        tmpreg = (uint32_t)&hdac->Instance->DHR12L1;
 800481a:	68fb      	ldr	r3, [r7, #12]
 800481c:	681b      	ldr	r3, [r3, #0]
 800481e:	330c      	adds	r3, #12
 8004820:	613b      	str	r3, [r7, #16]
        break;
 8004822:	e02f      	b.n	8004884 <HAL_DAC_Start_DMA+0xdc>
        tmpreg = (uint32_t)&hdac->Instance->DHR8R1;
 8004824:	68fb      	ldr	r3, [r7, #12]
 8004826:	681b      	ldr	r3, [r3, #0]
 8004828:	3310      	adds	r3, #16
 800482a:	613b      	str	r3, [r7, #16]
        break;
 800482c:	e02a      	b.n	8004884 <HAL_DAC_Start_DMA+0xdc>
    }
  }
  else
  {
    /* Set the DMA transfer complete callback for channel2 */
    hdac->DMA_Handle2->XferCpltCallback = DAC_DMAConvCpltCh2;
 800482e:	68fb      	ldr	r3, [r7, #12]
 8004830:	68db      	ldr	r3, [r3, #12]
 8004832:	4a3b      	ldr	r2, [pc, #236]	; (8004920 <HAL_DAC_Start_DMA+0x178>)
 8004834:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Set the DMA half transfer complete callback for channel2 */
    hdac->DMA_Handle2->XferHalfCpltCallback = DAC_DMAHalfConvCpltCh2;
 8004836:	68fb      	ldr	r3, [r7, #12]
 8004838:	68db      	ldr	r3, [r3, #12]
 800483a:	4a3a      	ldr	r2, [pc, #232]	; (8004924 <HAL_DAC_Start_DMA+0x17c>)
 800483c:	631a      	str	r2, [r3, #48]	; 0x30

    /* Set the DMA error callback for channel2 */
    hdac->DMA_Handle2->XferErrorCallback = DAC_DMAErrorCh2;
 800483e:	68fb      	ldr	r3, [r7, #12]
 8004840:	68db      	ldr	r3, [r3, #12]
 8004842:	4a39      	ldr	r2, [pc, #228]	; (8004928 <HAL_DAC_Start_DMA+0x180>)
 8004844:	635a      	str	r2, [r3, #52]	; 0x34

    /* Enable the selected DAC channel2 DMA request */
    SET_BIT(hdac->Instance->CR, DAC_CR_DMAEN2);
 8004846:	68fb      	ldr	r3, [r7, #12]
 8004848:	681b      	ldr	r3, [r3, #0]
 800484a:	681a      	ldr	r2, [r3, #0]
 800484c:	68fb      	ldr	r3, [r7, #12]
 800484e:	681b      	ldr	r3, [r3, #0]
 8004850:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8004854:	601a      	str	r2, [r3, #0]

    /* Case of use of channel 2 */
    switch (Alignment)
 8004856:	6a3b      	ldr	r3, [r7, #32]
 8004858:	2b04      	cmp	r3, #4
 800485a:	d009      	beq.n	8004870 <HAL_DAC_Start_DMA+0xc8>
 800485c:	2b08      	cmp	r3, #8
 800485e:	d00c      	beq.n	800487a <HAL_DAC_Start_DMA+0xd2>
 8004860:	2b00      	cmp	r3, #0
 8004862:	d000      	beq.n	8004866 <HAL_DAC_Start_DMA+0xbe>
      case DAC_ALIGN_8B_R:
        /* Get DHR8R2 address */
        tmpreg = (uint32_t)&hdac->Instance->DHR8R2;
        break;
      default:
        break;
 8004864:	e00e      	b.n	8004884 <HAL_DAC_Start_DMA+0xdc>
        tmpreg = (uint32_t)&hdac->Instance->DHR12R2;
 8004866:	68fb      	ldr	r3, [r7, #12]
 8004868:	681b      	ldr	r3, [r3, #0]
 800486a:	3314      	adds	r3, #20
 800486c:	613b      	str	r3, [r7, #16]
        break;
 800486e:	e009      	b.n	8004884 <HAL_DAC_Start_DMA+0xdc>
        tmpreg = (uint32_t)&hdac->Instance->DHR12L2;
 8004870:	68fb      	ldr	r3, [r7, #12]
 8004872:	681b      	ldr	r3, [r3, #0]
 8004874:	3318      	adds	r3, #24
 8004876:	613b      	str	r3, [r7, #16]
        break;
 8004878:	e004      	b.n	8004884 <HAL_DAC_Start_DMA+0xdc>
        tmpreg = (uint32_t)&hdac->Instance->DHR8R2;
 800487a:	68fb      	ldr	r3, [r7, #12]
 800487c:	681b      	ldr	r3, [r3, #0]
 800487e:	331c      	adds	r3, #28
 8004880:	613b      	str	r3, [r7, #16]
        break;
 8004882:	bf00      	nop
    }
  }

  /* Enable the DMA channel */
  if (Channel == DAC_CHANNEL_1)
 8004884:	68bb      	ldr	r3, [r7, #8]
 8004886:	2b00      	cmp	r3, #0
 8004888:	d111      	bne.n	80048ae <HAL_DAC_Start_DMA+0x106>
  {
    /* Enable the DAC DMA underrun interrupt */
    __HAL_DAC_ENABLE_IT(hdac, DAC_IT_DMAUDR1);
 800488a:	68fb      	ldr	r3, [r7, #12]
 800488c:	681b      	ldr	r3, [r3, #0]
 800488e:	681a      	ldr	r2, [r3, #0]
 8004890:	68fb      	ldr	r3, [r7, #12]
 8004892:	681b      	ldr	r3, [r3, #0]
 8004894:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8004898:	601a      	str	r2, [r3, #0]

    /* Enable the DMA channel */
    status = HAL_DMA_Start_IT(hdac->DMA_Handle1, (uint32_t)pData, tmpreg, Length);
 800489a:	68fb      	ldr	r3, [r7, #12]
 800489c:	6898      	ldr	r0, [r3, #8]
 800489e:	6879      	ldr	r1, [r7, #4]
 80048a0:	683b      	ldr	r3, [r7, #0]
 80048a2:	693a      	ldr	r2, [r7, #16]
 80048a4:	f000 fbc8 	bl	8005038 <HAL_DMA_Start_IT>
 80048a8:	4603      	mov	r3, r0
 80048aa:	75fb      	strb	r3, [r7, #23]
 80048ac:	e010      	b.n	80048d0 <HAL_DAC_Start_DMA+0x128>
  }
  else
  {
    /* Enable the DAC DMA underrun interrupt */
    __HAL_DAC_ENABLE_IT(hdac, DAC_IT_DMAUDR2);
 80048ae:	68fb      	ldr	r3, [r7, #12]
 80048b0:	681b      	ldr	r3, [r3, #0]
 80048b2:	681a      	ldr	r2, [r3, #0]
 80048b4:	68fb      	ldr	r3, [r7, #12]
 80048b6:	681b      	ldr	r3, [r3, #0]
 80048b8:	f042 5200 	orr.w	r2, r2, #536870912	; 0x20000000
 80048bc:	601a      	str	r2, [r3, #0]

    /* Enable the DMA channel */
    status = HAL_DMA_Start_IT(hdac->DMA_Handle2, (uint32_t)pData, tmpreg, Length);
 80048be:	68fb      	ldr	r3, [r7, #12]
 80048c0:	68d8      	ldr	r0, [r3, #12]
 80048c2:	6879      	ldr	r1, [r7, #4]
 80048c4:	683b      	ldr	r3, [r7, #0]
 80048c6:	693a      	ldr	r2, [r7, #16]
 80048c8:	f000 fbb6 	bl	8005038 <HAL_DMA_Start_IT>
 80048cc:	4603      	mov	r3, r0
 80048ce:	75fb      	strb	r3, [r7, #23]
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hdac);
 80048d0:	68fb      	ldr	r3, [r7, #12]
 80048d2:	2200      	movs	r2, #0
 80048d4:	715a      	strb	r2, [r3, #5]

  if (status == HAL_OK)
 80048d6:	7dfb      	ldrb	r3, [r7, #23]
 80048d8:	2b00      	cmp	r3, #0
 80048da:	d10f      	bne.n	80048fc <HAL_DAC_Start_DMA+0x154>
  {
    /* Enable the Peripheral */
    __HAL_DAC_ENABLE(hdac, Channel);
 80048dc:	68fb      	ldr	r3, [r7, #12]
 80048de:	681b      	ldr	r3, [r3, #0]
 80048e0:	6819      	ldr	r1, [r3, #0]
 80048e2:	68bb      	ldr	r3, [r7, #8]
 80048e4:	f003 0310 	and.w	r3, r3, #16
 80048e8:	2201      	movs	r2, #1
 80048ea:	409a      	lsls	r2, r3
 80048ec:	68fb      	ldr	r3, [r7, #12]
 80048ee:	681b      	ldr	r3, [r3, #0]
 80048f0:	430a      	orrs	r2, r1
 80048f2:	601a      	str	r2, [r3, #0]
    /* Ensure minimum wait before using peripheral after enabling it */
    HAL_Delay(1);
 80048f4:	2001      	movs	r0, #1
 80048f6:	f7fe fa71 	bl	8002ddc <HAL_Delay>
 80048fa:	e005      	b.n	8004908 <HAL_DAC_Start_DMA+0x160>
  }
  else
  {
    hdac->ErrorCode |= HAL_DAC_ERROR_DMA;
 80048fc:	68fb      	ldr	r3, [r7, #12]
 80048fe:	691b      	ldr	r3, [r3, #16]
 8004900:	f043 0204 	orr.w	r2, r3, #4
 8004904:	68fb      	ldr	r3, [r7, #12]
 8004906:	611a      	str	r2, [r3, #16]
  }

  /* Return function status */
  return status;
 8004908:	7dfb      	ldrb	r3, [r7, #23]
}
 800490a:	4618      	mov	r0, r3
 800490c:	3718      	adds	r7, #24
 800490e:	46bd      	mov	sp, r7
 8004910:	bd80      	pop	{r7, pc}
 8004912:	bf00      	nop
 8004914:	08004dd5 	.word	0x08004dd5
 8004918:	08004df7 	.word	0x08004df7
 800491c:	08004e13 	.word	0x08004e13
 8004920:	08004e7d 	.word	0x08004e7d
 8004924:	08004e9f 	.word	0x08004e9f
 8004928:	08004ebb 	.word	0x08004ebb

0800492c <HAL_DAC_Stop_DMA>:
  *         (1) On this STM32 serie, parameter not available on all instances.
  *             Refer to device datasheet for channels availability.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Stop_DMA(DAC_HandleTypeDef *hdac, uint32_t Channel)
{
 800492c:	b580      	push	{r7, lr}
 800492e:	b084      	sub	sp, #16
 8004930:	af00      	add	r7, sp, #0
 8004932:	6078      	str	r0, [r7, #4]
 8004934:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(hdac->Instance, Channel));

  /* Disable the selected DAC channel DMA request */
  hdac->Instance->CR &= ~(DAC_CR_DMAEN1 << (Channel & 0x10UL));
 8004936:	687b      	ldr	r3, [r7, #4]
 8004938:	681b      	ldr	r3, [r3, #0]
 800493a:	6819      	ldr	r1, [r3, #0]
 800493c:	683b      	ldr	r3, [r7, #0]
 800493e:	f003 0310 	and.w	r3, r3, #16
 8004942:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8004946:	fa02 f303 	lsl.w	r3, r2, r3
 800494a:	43da      	mvns	r2, r3
 800494c:	687b      	ldr	r3, [r7, #4]
 800494e:	681b      	ldr	r3, [r3, #0]
 8004950:	400a      	ands	r2, r1
 8004952:	601a      	str	r2, [r3, #0]

  /* Disable the Peripheral */
  __HAL_DAC_DISABLE(hdac, Channel);
 8004954:	687b      	ldr	r3, [r7, #4]
 8004956:	681b      	ldr	r3, [r3, #0]
 8004958:	6819      	ldr	r1, [r3, #0]
 800495a:	683b      	ldr	r3, [r7, #0]
 800495c:	f003 0310 	and.w	r3, r3, #16
 8004960:	2201      	movs	r2, #1
 8004962:	fa02 f303 	lsl.w	r3, r2, r3
 8004966:	43da      	mvns	r2, r3
 8004968:	687b      	ldr	r3, [r7, #4]
 800496a:	681b      	ldr	r3, [r3, #0]
 800496c:	400a      	ands	r2, r1
 800496e:	601a      	str	r2, [r3, #0]
  /* Ensure minimum wait before enabling peripheral after disabling it */
  HAL_Delay(1);
 8004970:	2001      	movs	r0, #1
 8004972:	f7fe fa33 	bl	8002ddc <HAL_Delay>

  /* Disable the DMA channel */

  /* Channel1 is used */
  if (Channel == DAC_CHANNEL_1)
 8004976:	683b      	ldr	r3, [r7, #0]
 8004978:	2b00      	cmp	r3, #0
 800497a:	d10f      	bne.n	800499c <HAL_DAC_Stop_DMA+0x70>
  {
    /* Disable the DMA channel */
    status = HAL_DMA_Abort(hdac->DMA_Handle1);
 800497c:	687b      	ldr	r3, [r7, #4]
 800497e:	689b      	ldr	r3, [r3, #8]
 8004980:	4618      	mov	r0, r3
 8004982:	f000 fbd4 	bl	800512e <HAL_DMA_Abort>
 8004986:	4603      	mov	r3, r0
 8004988:	73fb      	strb	r3, [r7, #15]

    /* Disable the DAC DMA underrun interrupt */
    __HAL_DAC_DISABLE_IT(hdac, DAC_IT_DMAUDR1);
 800498a:	687b      	ldr	r3, [r7, #4]
 800498c:	681b      	ldr	r3, [r3, #0]
 800498e:	681a      	ldr	r2, [r3, #0]
 8004990:	687b      	ldr	r3, [r7, #4]
 8004992:	681b      	ldr	r3, [r3, #0]
 8004994:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8004998:	601a      	str	r2, [r3, #0]
 800499a:	e00e      	b.n	80049ba <HAL_DAC_Stop_DMA+0x8e>
  }
  else /* Channel2 is used for */
  {
    /* Disable the DMA channel */
    status = HAL_DMA_Abort(hdac->DMA_Handle2);
 800499c:	687b      	ldr	r3, [r7, #4]
 800499e:	68db      	ldr	r3, [r3, #12]
 80049a0:	4618      	mov	r0, r3
 80049a2:	f000 fbc4 	bl	800512e <HAL_DMA_Abort>
 80049a6:	4603      	mov	r3, r0
 80049a8:	73fb      	strb	r3, [r7, #15]

    /* Disable the DAC DMA underrun interrupt */
    __HAL_DAC_DISABLE_IT(hdac, DAC_IT_DMAUDR2);
 80049aa:	687b      	ldr	r3, [r7, #4]
 80049ac:	681b      	ldr	r3, [r3, #0]
 80049ae:	681a      	ldr	r2, [r3, #0]
 80049b0:	687b      	ldr	r3, [r7, #4]
 80049b2:	681b      	ldr	r3, [r3, #0]
 80049b4:	f022 5200 	bic.w	r2, r2, #536870912	; 0x20000000
 80049b8:	601a      	str	r2, [r3, #0]
  }

  /* Check if DMA Channel effectively disabled */
  if (status != HAL_OK)
 80049ba:	7bfb      	ldrb	r3, [r7, #15]
 80049bc:	2b00      	cmp	r3, #0
 80049be:	d003      	beq.n	80049c8 <HAL_DAC_Stop_DMA+0x9c>
  {
    /* Update DAC state machine to error */
    hdac->State = HAL_DAC_STATE_ERROR;
 80049c0:	687b      	ldr	r3, [r7, #4]
 80049c2:	2204      	movs	r2, #4
 80049c4:	711a      	strb	r2, [r3, #4]
 80049c6:	e002      	b.n	80049ce <HAL_DAC_Stop_DMA+0xa2>
  }
  else
  {
    /* Change DAC state */
    hdac->State = HAL_DAC_STATE_READY;
 80049c8:	687b      	ldr	r3, [r7, #4]
 80049ca:	2201      	movs	r2, #1
 80049cc:	711a      	strb	r2, [r3, #4]
  }

  /* Return function status */
  return status;
 80049ce:	7bfb      	ldrb	r3, [r7, #15]
}
 80049d0:	4618      	mov	r0, r3
 80049d2:	3710      	adds	r7, #16
 80049d4:	46bd      	mov	sp, r7
 80049d6:	bd80      	pop	{r7, pc}

080049d8 <HAL_DAC_SetValue>:
  *            @arg DAC_ALIGN_12B_R: 12bit right data alignment selected
  * @param  Data Data to be loaded in the selected data holding register.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_SetValue(DAC_HandleTypeDef *hdac, uint32_t Channel, uint32_t Alignment, uint32_t Data)
{
 80049d8:	b480      	push	{r7}
 80049da:	b087      	sub	sp, #28
 80049dc:	af00      	add	r7, sp, #0
 80049de:	60f8      	str	r0, [r7, #12]
 80049e0:	60b9      	str	r1, [r7, #8]
 80049e2:	607a      	str	r2, [r7, #4]
 80049e4:	603b      	str	r3, [r7, #0]
  __IO uint32_t tmp = 0;
 80049e6:	2300      	movs	r3, #0
 80049e8:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(hdac->Instance, Channel));
  assert_param(IS_DAC_ALIGN(Alignment));
  /* In case DMA Double data mode is activated, DATA range is almost full uin32_t one: no check */
  if ((hdac->Instance->MCR & (DAC_MCR_DMADOUBLE1 << (Channel & 0x10UL))) == 0UL)
 80049ea:	68fb      	ldr	r3, [r7, #12]
 80049ec:	681b      	ldr	r3, [r3, #0]
 80049ee:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
  {
    assert_param(IS_DAC_DATA(Data));
  }

  tmp = (uint32_t)hdac->Instance;
 80049f0:	68fb      	ldr	r3, [r7, #12]
 80049f2:	681b      	ldr	r3, [r3, #0]
 80049f4:	617b      	str	r3, [r7, #20]
  if (Channel == DAC_CHANNEL_1)
 80049f6:	68bb      	ldr	r3, [r7, #8]
 80049f8:	2b00      	cmp	r3, #0
 80049fa:	d105      	bne.n	8004a08 <HAL_DAC_SetValue+0x30>
  {
    tmp += DAC_DHR12R1_ALIGNMENT(Alignment);
 80049fc:	697a      	ldr	r2, [r7, #20]
 80049fe:	687b      	ldr	r3, [r7, #4]
 8004a00:	4413      	add	r3, r2
 8004a02:	3308      	adds	r3, #8
 8004a04:	617b      	str	r3, [r7, #20]
 8004a06:	e004      	b.n	8004a12 <HAL_DAC_SetValue+0x3a>
  }
  else
  {
    tmp += DAC_DHR12R2_ALIGNMENT(Alignment);
 8004a08:	697a      	ldr	r2, [r7, #20]
 8004a0a:	687b      	ldr	r3, [r7, #4]
 8004a0c:	4413      	add	r3, r2
 8004a0e:	3314      	adds	r3, #20
 8004a10:	617b      	str	r3, [r7, #20]
  }

  /* Set the DAC channel selected data holding register */
  *(__IO uint32_t *) tmp = Data;
 8004a12:	697b      	ldr	r3, [r7, #20]
 8004a14:	461a      	mov	r2, r3
 8004a16:	683b      	ldr	r3, [r7, #0]
 8004a18:	6013      	str	r3, [r2, #0]

  /* Return function status */
  return HAL_OK;
 8004a1a:	2300      	movs	r3, #0
}
 8004a1c:	4618      	mov	r0, r3
 8004a1e:	371c      	adds	r7, #28
 8004a20:	46bd      	mov	sp, r7
 8004a22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a26:	4770      	bx	lr

08004a28 <HAL_DAC_ConvCpltCallbackCh1>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DAC_ConvCpltCallbackCh1(DAC_HandleTypeDef *hdac)
{
 8004a28:	b480      	push	{r7}
 8004a2a:	b083      	sub	sp, #12
 8004a2c:	af00      	add	r7, sp, #0
 8004a2e:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DAC_ConvCpltCallbackCh1 could be implemented in the user file
   */
}
 8004a30:	bf00      	nop
 8004a32:	370c      	adds	r7, #12
 8004a34:	46bd      	mov	sp, r7
 8004a36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a3a:	4770      	bx	lr

08004a3c <HAL_DAC_ConvHalfCpltCallbackCh1>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DAC_ConvHalfCpltCallbackCh1(DAC_HandleTypeDef *hdac)
{
 8004a3c:	b480      	push	{r7}
 8004a3e:	b083      	sub	sp, #12
 8004a40:	af00      	add	r7, sp, #0
 8004a42:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DAC_ConvHalfCpltCallbackCh1 could be implemented in the user file
   */
}
 8004a44:	bf00      	nop
 8004a46:	370c      	adds	r7, #12
 8004a48:	46bd      	mov	sp, r7
 8004a4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a4e:	4770      	bx	lr

08004a50 <HAL_DAC_GetValue>:
  *         (1) On this STM32 serie, parameter not available on all instances.
  *             Refer to device datasheet for channels availability.
  * @retval The selected DAC channel data output value.
  */
uint32_t HAL_DAC_GetValue(DAC_HandleTypeDef *hdac, uint32_t Channel)
{
 8004a50:	b480      	push	{r7}
 8004a52:	b083      	sub	sp, #12
 8004a54:	af00      	add	r7, sp, #0
 8004a56:	6078      	str	r0, [r7, #4]
 8004a58:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(hdac->Instance, Channel));

  /* Returns the DAC channel data output register value */
  if (Channel == DAC_CHANNEL_1)
 8004a5a:	683b      	ldr	r3, [r7, #0]
 8004a5c:	2b00      	cmp	r3, #0
 8004a5e:	d103      	bne.n	8004a68 <HAL_DAC_GetValue+0x18>
  {
    return hdac->Instance->DOR1;
 8004a60:	687b      	ldr	r3, [r7, #4]
 8004a62:	681b      	ldr	r3, [r3, #0]
 8004a64:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004a66:	e002      	b.n	8004a6e <HAL_DAC_GetValue+0x1e>
  }
  else
  {
    return hdac->Instance->DOR2;
 8004a68:	687b      	ldr	r3, [r7, #4]
 8004a6a:	681b      	ldr	r3, [r3, #0]
 8004a6c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  }
}
 8004a6e:	4618      	mov	r0, r3
 8004a70:	370c      	adds	r7, #12
 8004a72:	46bd      	mov	sp, r7
 8004a74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a78:	4770      	bx	lr
	...

08004a7c <HAL_DAC_ConfigChannel>:
  *         (1) On this STM32 serie, parameter not available on all instances.
  *             Refer to device datasheet for channels availability.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_ConfigChannel(DAC_HandleTypeDef *hdac, DAC_ChannelConfTypeDef *sConfig, uint32_t Channel)
{
 8004a7c:	b580      	push	{r7, lr}
 8004a7e:	b08a      	sub	sp, #40	; 0x28
 8004a80:	af00      	add	r7, sp, #0
 8004a82:	60f8      	str	r0, [r7, #12]
 8004a84:	60b9      	str	r1, [r7, #8]
 8004a86:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg1;
  uint32_t tmpreg2;
  uint32_t tickstart = 0U;
 8004a88:	2300      	movs	r3, #0
 8004a8a:	61fb      	str	r3, [r7, #28]
  assert_param(IS_DAC_CHANNEL(hdac->Instance, Channel));
  assert_param(IS_FUNCTIONAL_STATE(sConfig->DAC_DMADoubleDataMode));
  assert_param(IS_FUNCTIONAL_STATE(sConfig->DAC_SignedFormat));

  /* Process locked */
  __HAL_LOCK(hdac);
 8004a8c:	68fb      	ldr	r3, [r7, #12]
 8004a8e:	795b      	ldrb	r3, [r3, #5]
 8004a90:	2b01      	cmp	r3, #1
 8004a92:	d101      	bne.n	8004a98 <HAL_DAC_ConfigChannel+0x1c>
 8004a94:	2302      	movs	r3, #2
 8004a96:	e194      	b.n	8004dc2 <HAL_DAC_ConfigChannel+0x346>
 8004a98:	68fb      	ldr	r3, [r7, #12]
 8004a9a:	2201      	movs	r2, #1
 8004a9c:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 8004a9e:	68fb      	ldr	r3, [r7, #12]
 8004aa0:	2202      	movs	r2, #2
 8004aa2:	711a      	strb	r2, [r3, #4]

  if (sConfig->DAC_SampleAndHold == DAC_SAMPLEANDHOLD_ENABLE)
 8004aa4:	68bb      	ldr	r3, [r7, #8]
 8004aa6:	689b      	ldr	r3, [r3, #8]
 8004aa8:	2b04      	cmp	r3, #4
 8004aaa:	d174      	bne.n	8004b96 <HAL_DAC_ConfigChannel+0x11a>
    /* Sample on old configuration */
  {
    /* SampleTime */
    if (Channel == DAC_CHANNEL_1)
 8004aac:	687b      	ldr	r3, [r7, #4]
 8004aae:	2b00      	cmp	r3, #0
 8004ab0:	d137      	bne.n	8004b22 <HAL_DAC_ConfigChannel+0xa6>
    {
      /* Get timeout */
      tickstart = HAL_GetTick();
 8004ab2:	f7fe f987 	bl	8002dc4 <HAL_GetTick>
 8004ab6:	61f8      	str	r0, [r7, #28]

      /* SHSR1 can be written when BWST1 is cleared */
      while (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 8004ab8:	e011      	b.n	8004ade <HAL_DAC_ConfigChannel+0x62>
      {
        /* Check for the Timeout */
        if ((HAL_GetTick() - tickstart) > TIMEOUT_DAC_CALIBCONFIG)
 8004aba:	f7fe f983 	bl	8002dc4 <HAL_GetTick>
 8004abe:	4602      	mov	r2, r0
 8004ac0:	69fb      	ldr	r3, [r7, #28]
 8004ac2:	1ad3      	subs	r3, r2, r3
 8004ac4:	2b01      	cmp	r3, #1
 8004ac6:	d90a      	bls.n	8004ade <HAL_DAC_ConfigChannel+0x62>
        {
          /* Update error code */
          SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_TIMEOUT);
 8004ac8:	68fb      	ldr	r3, [r7, #12]
 8004aca:	691b      	ldr	r3, [r3, #16]
 8004acc:	f043 0208 	orr.w	r2, r3, #8
 8004ad0:	68fb      	ldr	r3, [r7, #12]
 8004ad2:	611a      	str	r2, [r3, #16]

          /* Change the DMA state */
          hdac->State = HAL_DAC_STATE_TIMEOUT;
 8004ad4:	68fb      	ldr	r3, [r7, #12]
 8004ad6:	2203      	movs	r2, #3
 8004ad8:	711a      	strb	r2, [r3, #4]

          return HAL_TIMEOUT;
 8004ada:	2303      	movs	r3, #3
 8004adc:	e171      	b.n	8004dc2 <HAL_DAC_ConfigChannel+0x346>
      while (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 8004ade:	68fb      	ldr	r3, [r7, #12]
 8004ae0:	681b      	ldr	r3, [r3, #0]
 8004ae2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004ae4:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8004ae8:	2b00      	cmp	r3, #0
 8004aea:	d1e6      	bne.n	8004aba <HAL_DAC_ConfigChannel+0x3e>
        }
      }
      HAL_Delay(1);
 8004aec:	2001      	movs	r0, #1
 8004aee:	f7fe f975 	bl	8002ddc <HAL_Delay>
      hdac->Instance->SHSR1 = sConfig->DAC_SampleAndHoldConfig.DAC_SampleTime;
 8004af2:	68fb      	ldr	r3, [r7, #12]
 8004af4:	681b      	ldr	r3, [r3, #0]
 8004af6:	68ba      	ldr	r2, [r7, #8]
 8004af8:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8004afa:	641a      	str	r2, [r3, #64]	; 0x40
 8004afc:	e01e      	b.n	8004b3c <HAL_DAC_ConfigChannel+0xc0>
      /* SHSR2 can be written when BWST2 is cleared */

      while (((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
      {
        /* Check for the Timeout */
        if ((HAL_GetTick() - tickstart) > TIMEOUT_DAC_CALIBCONFIG)
 8004afe:	f7fe f961 	bl	8002dc4 <HAL_GetTick>
 8004b02:	4602      	mov	r2, r0
 8004b04:	69fb      	ldr	r3, [r7, #28]
 8004b06:	1ad3      	subs	r3, r2, r3
 8004b08:	2b01      	cmp	r3, #1
 8004b0a:	d90a      	bls.n	8004b22 <HAL_DAC_ConfigChannel+0xa6>
        {
          /* Update error code */
          SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_TIMEOUT);
 8004b0c:	68fb      	ldr	r3, [r7, #12]
 8004b0e:	691b      	ldr	r3, [r3, #16]
 8004b10:	f043 0208 	orr.w	r2, r3, #8
 8004b14:	68fb      	ldr	r3, [r7, #12]
 8004b16:	611a      	str	r2, [r3, #16]

          /* Change the DMA state */
          hdac->State = HAL_DAC_STATE_TIMEOUT;
 8004b18:	68fb      	ldr	r3, [r7, #12]
 8004b1a:	2203      	movs	r2, #3
 8004b1c:	711a      	strb	r2, [r3, #4]

          return HAL_TIMEOUT;
 8004b1e:	2303      	movs	r3, #3
 8004b20:	e14f      	b.n	8004dc2 <HAL_DAC_ConfigChannel+0x346>
      while (((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
 8004b22:	68fb      	ldr	r3, [r7, #12]
 8004b24:	681b      	ldr	r3, [r3, #0]
 8004b26:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004b28:	2b00      	cmp	r3, #0
 8004b2a:	dbe8      	blt.n	8004afe <HAL_DAC_ConfigChannel+0x82>
        }
      }
      HAL_Delay(1U);
 8004b2c:	2001      	movs	r0, #1
 8004b2e:	f7fe f955 	bl	8002ddc <HAL_Delay>
      hdac->Instance->SHSR2 = sConfig->DAC_SampleAndHoldConfig.DAC_SampleTime;
 8004b32:	68fb      	ldr	r3, [r7, #12]
 8004b34:	681b      	ldr	r3, [r3, #0]
 8004b36:	68ba      	ldr	r2, [r7, #8]
 8004b38:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8004b3a:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* HoldTime */
    MODIFY_REG(hdac->Instance->SHHR, DAC_SHHR_THOLD1 << (Channel & 0x10UL), (sConfig->DAC_SampleAndHoldConfig.DAC_HoldTime) << (Channel & 0x10UL));
 8004b3c:	68fb      	ldr	r3, [r7, #12]
 8004b3e:	681b      	ldr	r3, [r3, #0]
 8004b40:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8004b42:	687b      	ldr	r3, [r7, #4]
 8004b44:	f003 0310 	and.w	r3, r3, #16
 8004b48:	f240 31ff 	movw	r1, #1023	; 0x3ff
 8004b4c:	fa01 f303 	lsl.w	r3, r1, r3
 8004b50:	43db      	mvns	r3, r3
 8004b52:	ea02 0103 	and.w	r1, r2, r3
 8004b56:	68bb      	ldr	r3, [r7, #8]
 8004b58:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8004b5a:	687b      	ldr	r3, [r7, #4]
 8004b5c:	f003 0310 	and.w	r3, r3, #16
 8004b60:	409a      	lsls	r2, r3
 8004b62:	68fb      	ldr	r3, [r7, #12]
 8004b64:	681b      	ldr	r3, [r3, #0]
 8004b66:	430a      	orrs	r2, r1
 8004b68:	649a      	str	r2, [r3, #72]	; 0x48
    /* RefreshTime */
    MODIFY_REG(hdac->Instance->SHRR, DAC_SHRR_TREFRESH1 << (Channel & 0x10UL), (sConfig->DAC_SampleAndHoldConfig.DAC_RefreshTime) << (Channel & 0x10UL));
 8004b6a:	68fb      	ldr	r3, [r7, #12]
 8004b6c:	681b      	ldr	r3, [r3, #0]
 8004b6e:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8004b70:	687b      	ldr	r3, [r7, #4]
 8004b72:	f003 0310 	and.w	r3, r3, #16
 8004b76:	21ff      	movs	r1, #255	; 0xff
 8004b78:	fa01 f303 	lsl.w	r3, r1, r3
 8004b7c:	43db      	mvns	r3, r3
 8004b7e:	ea02 0103 	and.w	r1, r2, r3
 8004b82:	68bb      	ldr	r3, [r7, #8]
 8004b84:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004b86:	687b      	ldr	r3, [r7, #4]
 8004b88:	f003 0310 	and.w	r3, r3, #16
 8004b8c:	409a      	lsls	r2, r3
 8004b8e:	68fb      	ldr	r3, [r7, #12]
 8004b90:	681b      	ldr	r3, [r3, #0]
 8004b92:	430a      	orrs	r2, r1
 8004b94:	64da      	str	r2, [r3, #76]	; 0x4c
  }

  if (sConfig->DAC_UserTrimming == DAC_TRIMMING_USER)
 8004b96:	68bb      	ldr	r3, [r7, #8]
 8004b98:	69db      	ldr	r3, [r3, #28]
 8004b9a:	2b01      	cmp	r3, #1
 8004b9c:	d11d      	bne.n	8004bda <HAL_DAC_ConfigChannel+0x15e>
    /* USER TRIMMING */
  {
    /* Get the DAC CCR value */
    tmpreg1 = hdac->Instance->CCR;
 8004b9e:	68fb      	ldr	r3, [r7, #12]
 8004ba0:	681b      	ldr	r3, [r3, #0]
 8004ba2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004ba4:	627b      	str	r3, [r7, #36]	; 0x24
    /* Clear trimming value */
    tmpreg1 &= ~(((uint32_t)(DAC_CCR_OTRIM1)) << (Channel & 0x10UL));
 8004ba6:	687b      	ldr	r3, [r7, #4]
 8004ba8:	f003 0310 	and.w	r3, r3, #16
 8004bac:	221f      	movs	r2, #31
 8004bae:	fa02 f303 	lsl.w	r3, r2, r3
 8004bb2:	43db      	mvns	r3, r3
 8004bb4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004bb6:	4013      	ands	r3, r2
 8004bb8:	627b      	str	r3, [r7, #36]	; 0x24
    /* Configure for the selected trimming offset */
    tmpreg2 = sConfig->DAC_TrimmingValue;
 8004bba:	68bb      	ldr	r3, [r7, #8]
 8004bbc:	6a1b      	ldr	r3, [r3, #32]
 8004bbe:	61bb      	str	r3, [r7, #24]
    /* Calculate CCR register value depending on DAC_Channel */
    tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 8004bc0:	687b      	ldr	r3, [r7, #4]
 8004bc2:	f003 0310 	and.w	r3, r3, #16
 8004bc6:	69ba      	ldr	r2, [r7, #24]
 8004bc8:	fa02 f303 	lsl.w	r3, r2, r3
 8004bcc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004bce:	4313      	orrs	r3, r2
 8004bd0:	627b      	str	r3, [r7, #36]	; 0x24
    /* Write to DAC CCR */
    hdac->Instance->CCR = tmpreg1;
 8004bd2:	68fb      	ldr	r3, [r7, #12]
 8004bd4:	681b      	ldr	r3, [r3, #0]
 8004bd6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004bd8:	639a      	str	r2, [r3, #56]	; 0x38
  }
  /* else factory trimming is used (factory setting are available at reset)*/
  /* SW Nothing has nothing to do */

  /* Get the DAC MCR value */
  tmpreg1 = hdac->Instance->MCR;
 8004bda:	68fb      	ldr	r3, [r7, #12]
 8004bdc:	681b      	ldr	r3, [r3, #0]
 8004bde:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004be0:	627b      	str	r3, [r7, #36]	; 0x24
  /* Clear DAC_MCR_MODEx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_MCR_MODE1)) << (Channel & 0x10UL));
 8004be2:	687b      	ldr	r3, [r7, #4]
 8004be4:	f003 0310 	and.w	r3, r3, #16
 8004be8:	2207      	movs	r2, #7
 8004bea:	fa02 f303 	lsl.w	r3, r2, r3
 8004bee:	43db      	mvns	r3, r3
 8004bf0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004bf2:	4013      	ands	r3, r2
 8004bf4:	627b      	str	r3, [r7, #36]	; 0x24
  /* Configure for the selected DAC channel: mode, buffer output & on chip peripheral connect */
  if ((sConfig->DAC_ConnectOnChipPeripheral & DAC_CHIPCONNECT_EXTERNAL) == DAC_CHIPCONNECT_EXTERNAL)
 8004bf6:	68bb      	ldr	r3, [r7, #8]
 8004bf8:	699b      	ldr	r3, [r3, #24]
 8004bfa:	f003 0301 	and.w	r3, r3, #1
 8004bfe:	2b00      	cmp	r3, #0
 8004c00:	d002      	beq.n	8004c08 <HAL_DAC_ConfigChannel+0x18c>
  {
    connectOnChip = 0x00000000UL;
 8004c02:	2300      	movs	r3, #0
 8004c04:	623b      	str	r3, [r7, #32]
 8004c06:	e011      	b.n	8004c2c <HAL_DAC_ConfigChannel+0x1b0>
  }
  else if ((sConfig->DAC_ConnectOnChipPeripheral & DAC_CHIPCONNECT_INTERNAL) == DAC_CHIPCONNECT_INTERNAL)
 8004c08:	68bb      	ldr	r3, [r7, #8]
 8004c0a:	699b      	ldr	r3, [r3, #24]
 8004c0c:	f003 0302 	and.w	r3, r3, #2
 8004c10:	2b00      	cmp	r3, #0
 8004c12:	d002      	beq.n	8004c1a <HAL_DAC_ConfigChannel+0x19e>
  {
    connectOnChip = DAC_MCR_MODE1_0;
 8004c14:	2301      	movs	r3, #1
 8004c16:	623b      	str	r3, [r7, #32]
 8004c18:	e008      	b.n	8004c2c <HAL_DAC_ConfigChannel+0x1b0>
  }
  else /* (sConfig->DAC_ConnectOnChipPeripheral & DAC_CHIPCONNECT_BOTH) == DAC_CHIPCONNECT_BOTH */
  {
    if (sConfig->DAC_OutputBuffer == DAC_OUTPUTBUFFER_ENABLE)
 8004c1a:	68bb      	ldr	r3, [r7, #8]
 8004c1c:	695b      	ldr	r3, [r3, #20]
 8004c1e:	2b00      	cmp	r3, #0
 8004c20:	d102      	bne.n	8004c28 <HAL_DAC_ConfigChannel+0x1ac>
    {
      connectOnChip = DAC_MCR_MODE1_0;
 8004c22:	2301      	movs	r3, #1
 8004c24:	623b      	str	r3, [r7, #32]
 8004c26:	e001      	b.n	8004c2c <HAL_DAC_ConfigChannel+0x1b0>
    }
    else
    {
      connectOnChip = 0x00000000UL;
 8004c28:	2300      	movs	r3, #0
 8004c2a:	623b      	str	r3, [r7, #32]
    }
  }
  tmpreg2 = (sConfig->DAC_SampleAndHold | sConfig->DAC_OutputBuffer | connectOnChip);
 8004c2c:	68bb      	ldr	r3, [r7, #8]
 8004c2e:	689a      	ldr	r2, [r3, #8]
 8004c30:	68bb      	ldr	r3, [r7, #8]
 8004c32:	695b      	ldr	r3, [r3, #20]
 8004c34:	4313      	orrs	r3, r2
 8004c36:	6a3a      	ldr	r2, [r7, #32]
 8004c38:	4313      	orrs	r3, r2
 8004c3a:	61bb      	str	r3, [r7, #24]
  /* Clear DAC_MCR_DMADOUBLEx */
  tmpreg1 &= ~(((uint32_t)(DAC_MCR_DMADOUBLE1)) << (Channel & 0x10UL));
 8004c3c:	687b      	ldr	r3, [r7, #4]
 8004c3e:	f003 0310 	and.w	r3, r3, #16
 8004c42:	f44f 7280 	mov.w	r2, #256	; 0x100
 8004c46:	fa02 f303 	lsl.w	r3, r2, r3
 8004c4a:	43db      	mvns	r3, r3
 8004c4c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004c4e:	4013      	ands	r3, r2
 8004c50:	627b      	str	r3, [r7, #36]	; 0x24
  /* Configure for the selected DAC channel: DMA double data mode */
  tmpreg2 |= (sConfig->DAC_DMADoubleDataMode == ENABLE) ? DAC_MCR_DMADOUBLE1 : 0UL;
 8004c52:	68bb      	ldr	r3, [r7, #8]
 8004c54:	791b      	ldrb	r3, [r3, #4]
 8004c56:	2b01      	cmp	r3, #1
 8004c58:	d102      	bne.n	8004c60 <HAL_DAC_ConfigChannel+0x1e4>
 8004c5a:	f44f 7380 	mov.w	r3, #256	; 0x100
 8004c5e:	e000      	b.n	8004c62 <HAL_DAC_ConfigChannel+0x1e6>
 8004c60:	2300      	movs	r3, #0
 8004c62:	69ba      	ldr	r2, [r7, #24]
 8004c64:	4313      	orrs	r3, r2
 8004c66:	61bb      	str	r3, [r7, #24]
  /* Clear DAC_MCR_SINFORMATx */
  tmpreg1 &= ~(((uint32_t)(DAC_MCR_SINFORMAT1)) << (Channel & 0x10UL));
 8004c68:	687b      	ldr	r3, [r7, #4]
 8004c6a:	f003 0310 	and.w	r3, r3, #16
 8004c6e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8004c72:	fa02 f303 	lsl.w	r3, r2, r3
 8004c76:	43db      	mvns	r3, r3
 8004c78:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004c7a:	4013      	ands	r3, r2
 8004c7c:	627b      	str	r3, [r7, #36]	; 0x24
  /* Configure for the selected DAC channel: Signed format */
  tmpreg2 |= (sConfig->DAC_SignedFormat == ENABLE) ? DAC_MCR_SINFORMAT1 : 0UL;
 8004c7e:	68bb      	ldr	r3, [r7, #8]
 8004c80:	795b      	ldrb	r3, [r3, #5]
 8004c82:	2b01      	cmp	r3, #1
 8004c84:	d102      	bne.n	8004c8c <HAL_DAC_ConfigChannel+0x210>
 8004c86:	f44f 7300 	mov.w	r3, #512	; 0x200
 8004c8a:	e000      	b.n	8004c8e <HAL_DAC_ConfigChannel+0x212>
 8004c8c:	2300      	movs	r3, #0
 8004c8e:	69ba      	ldr	r2, [r7, #24]
 8004c90:	4313      	orrs	r3, r2
 8004c92:	61bb      	str	r3, [r7, #24]
  /* Clear DAC_MCR_HFSEL bits */
  tmpreg1 &= ~(DAC_MCR_HFSEL);
 8004c94:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004c96:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8004c9a:	627b      	str	r3, [r7, #36]	; 0x24
  /* Configure for both DAC channels: high frequency mode */
  if (DAC_HIGH_FREQUENCY_INTERFACE_MODE_AUTOMATIC == sConfig->DAC_HighFrequency)
 8004c9c:	68bb      	ldr	r3, [r7, #8]
 8004c9e:	681b      	ldr	r3, [r3, #0]
 8004ca0:	2b02      	cmp	r3, #2
 8004ca2:	d114      	bne.n	8004cce <HAL_DAC_ConfigChannel+0x252>
  {
    hclkfreq = HAL_RCC_GetHCLKFreq();
 8004ca4:	f001 faf8 	bl	8006298 <HAL_RCC_GetHCLKFreq>
 8004ca8:	6178      	str	r0, [r7, #20]
    if (hclkfreq > HFSEL_ENABLE_THRESHOLD_160MHZ)
 8004caa:	697b      	ldr	r3, [r7, #20]
 8004cac:	4a47      	ldr	r2, [pc, #284]	; (8004dcc <HAL_DAC_ConfigChannel+0x350>)
 8004cae:	4293      	cmp	r3, r2
 8004cb0:	d904      	bls.n	8004cbc <HAL_DAC_ConfigChannel+0x240>
    {
      tmpreg1 |= DAC_HIGH_FREQUENCY_INTERFACE_MODE_ABOVE_160MHZ;
 8004cb2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004cb4:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004cb8:	627b      	str	r3, [r7, #36]	; 0x24
 8004cba:	e00d      	b.n	8004cd8 <HAL_DAC_ConfigChannel+0x25c>
    }
    else if (hclkfreq > HFSEL_ENABLE_THRESHOLD_80MHZ)
 8004cbc:	697b      	ldr	r3, [r7, #20]
 8004cbe:	4a44      	ldr	r2, [pc, #272]	; (8004dd0 <HAL_DAC_ConfigChannel+0x354>)
 8004cc0:	4293      	cmp	r3, r2
 8004cc2:	d909      	bls.n	8004cd8 <HAL_DAC_ConfigChannel+0x25c>
    {
      tmpreg1 |= DAC_HIGH_FREQUENCY_INTERFACE_MODE_ABOVE_80MHZ;
 8004cc4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004cc6:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8004cca:	627b      	str	r3, [r7, #36]	; 0x24
 8004ccc:	e004      	b.n	8004cd8 <HAL_DAC_ConfigChannel+0x25c>
      tmpreg1 |= DAC_HIGH_FREQUENCY_INTERFACE_MODE_DISABLE;
    }
  }
  else
  {
    tmpreg1 |= sConfig->DAC_HighFrequency;
 8004cce:	68bb      	ldr	r3, [r7, #8]
 8004cd0:	681b      	ldr	r3, [r3, #0]
 8004cd2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004cd4:	4313      	orrs	r3, r2
 8004cd6:	627b      	str	r3, [r7, #36]	; 0x24
  }
  /* Calculate MCR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 8004cd8:	687b      	ldr	r3, [r7, #4]
 8004cda:	f003 0310 	and.w	r3, r3, #16
 8004cde:	69ba      	ldr	r2, [r7, #24]
 8004ce0:	fa02 f303 	lsl.w	r3, r2, r3
 8004ce4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004ce6:	4313      	orrs	r3, r2
 8004ce8:	627b      	str	r3, [r7, #36]	; 0x24
  /* Write to DAC MCR */
  hdac->Instance->MCR = tmpreg1;
 8004cea:	68fb      	ldr	r3, [r7, #12]
 8004cec:	681b      	ldr	r3, [r3, #0]
 8004cee:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004cf0:	63da      	str	r2, [r3, #60]	; 0x3c

  /* DAC in normal operating mode hence clear DAC_CR_CENx bit */
  CLEAR_BIT(hdac->Instance->CR, DAC_CR_CEN1 << (Channel & 0x10UL));
 8004cf2:	68fb      	ldr	r3, [r7, #12]
 8004cf4:	681b      	ldr	r3, [r3, #0]
 8004cf6:	6819      	ldr	r1, [r3, #0]
 8004cf8:	687b      	ldr	r3, [r7, #4]
 8004cfa:	f003 0310 	and.w	r3, r3, #16
 8004cfe:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8004d02:	fa02 f303 	lsl.w	r3, r2, r3
 8004d06:	43da      	mvns	r2, r3
 8004d08:	68fb      	ldr	r3, [r7, #12]
 8004d0a:	681b      	ldr	r3, [r3, #0]
 8004d0c:	400a      	ands	r2, r1
 8004d0e:	601a      	str	r2, [r3, #0]

  /* Get the DAC CR value */
  tmpreg1 = hdac->Instance->CR;
 8004d10:	68fb      	ldr	r3, [r7, #12]
 8004d12:	681b      	ldr	r3, [r3, #0]
 8004d14:	681b      	ldr	r3, [r3, #0]
 8004d16:	627b      	str	r3, [r7, #36]	; 0x24
  /* Clear TENx, TSELx, WAVEx and MAMPx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1)) << (Channel & 0x10UL));
 8004d18:	687b      	ldr	r3, [r7, #4]
 8004d1a:	f003 0310 	and.w	r3, r3, #16
 8004d1e:	f640 72fe 	movw	r2, #4094	; 0xffe
 8004d22:	fa02 f303 	lsl.w	r3, r2, r3
 8004d26:	43db      	mvns	r3, r3
 8004d28:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004d2a:	4013      	ands	r3, r2
 8004d2c:	627b      	str	r3, [r7, #36]	; 0x24
  /* Configure for the selected DAC channel: trigger */
  /* Set TSELx and TENx bits according to DAC_Trigger value */
  tmpreg2 = sConfig->DAC_Trigger;
 8004d2e:	68bb      	ldr	r3, [r7, #8]
 8004d30:	68db      	ldr	r3, [r3, #12]
 8004d32:	61bb      	str	r3, [r7, #24]
  /* Calculate CR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 8004d34:	687b      	ldr	r3, [r7, #4]
 8004d36:	f003 0310 	and.w	r3, r3, #16
 8004d3a:	69ba      	ldr	r2, [r7, #24]
 8004d3c:	fa02 f303 	lsl.w	r3, r2, r3
 8004d40:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004d42:	4313      	orrs	r3, r2
 8004d44:	627b      	str	r3, [r7, #36]	; 0x24
  /* Write to DAC CR */
  hdac->Instance->CR = tmpreg1;
 8004d46:	68fb      	ldr	r3, [r7, #12]
 8004d48:	681b      	ldr	r3, [r3, #0]
 8004d4a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004d4c:	601a      	str	r2, [r3, #0]
  /* Disable wave generation */
  hdac->Instance->CR &= ~(DAC_CR_WAVE1 << (Channel & 0x10UL));
 8004d4e:	68fb      	ldr	r3, [r7, #12]
 8004d50:	681b      	ldr	r3, [r3, #0]
 8004d52:	6819      	ldr	r1, [r3, #0]
 8004d54:	687b      	ldr	r3, [r7, #4]
 8004d56:	f003 0310 	and.w	r3, r3, #16
 8004d5a:	22c0      	movs	r2, #192	; 0xc0
 8004d5c:	fa02 f303 	lsl.w	r3, r2, r3
 8004d60:	43da      	mvns	r2, r3
 8004d62:	68fb      	ldr	r3, [r7, #12]
 8004d64:	681b      	ldr	r3, [r3, #0]
 8004d66:	400a      	ands	r2, r1
 8004d68:	601a      	str	r2, [r3, #0]

  /* Set STRSTTRIGSELx and STINCTRIGSELx bits according to DAC_Trigger & DAC_Trigger2 values */
  tmpreg2 = ((sConfig->DAC_Trigger & DAC_CR_TSEL1) >> DAC_CR_TSEL1_Pos) << DAC_STMODR_STRSTTRIGSEL1_Pos;
 8004d6a:	68bb      	ldr	r3, [r7, #8]
 8004d6c:	68db      	ldr	r3, [r3, #12]
 8004d6e:	089b      	lsrs	r3, r3, #2
 8004d70:	f003 030f 	and.w	r3, r3, #15
 8004d74:	61bb      	str	r3, [r7, #24]
  tmpreg2 |= ((sConfig->DAC_Trigger2 & DAC_CR_TSEL1) >> DAC_CR_TSEL1_Pos) << DAC_STMODR_STINCTRIGSEL1_Pos;
 8004d76:	68bb      	ldr	r3, [r7, #8]
 8004d78:	691b      	ldr	r3, [r3, #16]
 8004d7a:	089b      	lsrs	r3, r3, #2
 8004d7c:	021b      	lsls	r3, r3, #8
 8004d7e:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 8004d82:	69ba      	ldr	r2, [r7, #24]
 8004d84:	4313      	orrs	r3, r2
 8004d86:	61bb      	str	r3, [r7, #24]
  /* Modify STMODR register value depending on DAC_Channel */
  MODIFY_REG(hdac->Instance->STMODR, (DAC_STMODR_STINCTRIGSEL1 | DAC_STMODR_STRSTTRIGSEL1) << (Channel & 0x10UL), tmpreg2 << (Channel & 0x10UL));
 8004d88:	68fb      	ldr	r3, [r7, #12]
 8004d8a:	681b      	ldr	r3, [r3, #0]
 8004d8c:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8004d8e:	687b      	ldr	r3, [r7, #4]
 8004d90:	f003 0310 	and.w	r3, r3, #16
 8004d94:	f640 710f 	movw	r1, #3855	; 0xf0f
 8004d98:	fa01 f303 	lsl.w	r3, r1, r3
 8004d9c:	43db      	mvns	r3, r3
 8004d9e:	ea02 0103 	and.w	r1, r2, r3
 8004da2:	687b      	ldr	r3, [r7, #4]
 8004da4:	f003 0310 	and.w	r3, r3, #16
 8004da8:	69ba      	ldr	r2, [r7, #24]
 8004daa:	409a      	lsls	r2, r3
 8004dac:	68fb      	ldr	r3, [r7, #12]
 8004dae:	681b      	ldr	r3, [r3, #0]
 8004db0:	430a      	orrs	r2, r1
 8004db2:	661a      	str	r2, [r3, #96]	; 0x60
  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 8004db4:	68fb      	ldr	r3, [r7, #12]
 8004db6:	2201      	movs	r2, #1
 8004db8:	711a      	strb	r2, [r3, #4]

  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 8004dba:	68fb      	ldr	r3, [r7, #12]
 8004dbc:	2200      	movs	r2, #0
 8004dbe:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 8004dc0:	2300      	movs	r3, #0
}
 8004dc2:	4618      	mov	r0, r3
 8004dc4:	3728      	adds	r7, #40	; 0x28
 8004dc6:	46bd      	mov	sp, r7
 8004dc8:	bd80      	pop	{r7, pc}
 8004dca:	bf00      	nop
 8004dcc:	09896800 	.word	0x09896800
 8004dd0:	04c4b400 	.word	0x04c4b400

08004dd4 <DAC_DMAConvCpltCh1>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAConvCpltCh1(DMA_HandleTypeDef *hdma)
{
 8004dd4:	b580      	push	{r7, lr}
 8004dd6:	b084      	sub	sp, #16
 8004dd8:	af00      	add	r7, sp, #0
 8004dda:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004ddc:	687b      	ldr	r3, [r7, #4]
 8004dde:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004de0:	60fb      	str	r3, [r7, #12]

#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvCpltCallbackCh1(hdac);
#else
  HAL_DAC_ConvCpltCallbackCh1(hdac);
 8004de2:	68f8      	ldr	r0, [r7, #12]
 8004de4:	f7ff fe20 	bl	8004a28 <HAL_DAC_ConvCpltCallbackCh1>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

  hdac->State = HAL_DAC_STATE_READY;
 8004de8:	68fb      	ldr	r3, [r7, #12]
 8004dea:	2201      	movs	r2, #1
 8004dec:	711a      	strb	r2, [r3, #4]
}
 8004dee:	bf00      	nop
 8004df0:	3710      	adds	r7, #16
 8004df2:	46bd      	mov	sp, r7
 8004df4:	bd80      	pop	{r7, pc}

08004df6 <DAC_DMAHalfConvCpltCh1>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAHalfConvCpltCh1(DMA_HandleTypeDef *hdma)
{
 8004df6:	b580      	push	{r7, lr}
 8004df8:	b084      	sub	sp, #16
 8004dfa:	af00      	add	r7, sp, #0
 8004dfc:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004dfe:	687b      	ldr	r3, [r7, #4]
 8004e00:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004e02:	60fb      	str	r3, [r7, #12]
  /* Conversion complete callback */
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvHalfCpltCallbackCh1(hdac);
#else
  HAL_DAC_ConvHalfCpltCallbackCh1(hdac);
 8004e04:	68f8      	ldr	r0, [r7, #12]
 8004e06:	f7ff fe19 	bl	8004a3c <HAL_DAC_ConvHalfCpltCallbackCh1>
#endif  /* USE_HAL_DAC_REGISTER_CALLBACKS */
}
 8004e0a:	bf00      	nop
 8004e0c:	3710      	adds	r7, #16
 8004e0e:	46bd      	mov	sp, r7
 8004e10:	bd80      	pop	{r7, pc}

08004e12 <DAC_DMAErrorCh1>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAErrorCh1(DMA_HandleTypeDef *hdma)
{
 8004e12:	b580      	push	{r7, lr}
 8004e14:	b084      	sub	sp, #16
 8004e16:	af00      	add	r7, sp, #0
 8004e18:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004e1a:	687b      	ldr	r3, [r7, #4]
 8004e1c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004e1e:	60fb      	str	r3, [r7, #12]

  /* Set DAC error code to DMA error */
  hdac->ErrorCode |= HAL_DAC_ERROR_DMA;
 8004e20:	68fb      	ldr	r3, [r7, #12]
 8004e22:	691b      	ldr	r3, [r3, #16]
 8004e24:	f043 0204 	orr.w	r2, r3, #4
 8004e28:	68fb      	ldr	r3, [r7, #12]
 8004e2a:	611a      	str	r2, [r3, #16]

#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ErrorCallbackCh1(hdac);
#else
  HAL_DAC_ErrorCallbackCh1(hdac);
 8004e2c:	68f8      	ldr	r0, [r7, #12]
 8004e2e:	f7fd f812 	bl	8001e56 <HAL_DAC_ErrorCallbackCh1>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

  hdac->State = HAL_DAC_STATE_READY;
 8004e32:	68fb      	ldr	r3, [r7, #12]
 8004e34:	2201      	movs	r2, #1
 8004e36:	711a      	strb	r2, [r3, #4]
}
 8004e38:	bf00      	nop
 8004e3a:	3710      	adds	r7, #16
 8004e3c:	46bd      	mov	sp, r7
 8004e3e:	bd80      	pop	{r7, pc}

08004e40 <HAL_DACEx_ConvCpltCallbackCh2>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DACEx_ConvCpltCallbackCh2(DAC_HandleTypeDef *hdac)
{
 8004e40:	b480      	push	{r7}
 8004e42:	b083      	sub	sp, #12
 8004e44:	af00      	add	r7, sp, #0
 8004e46:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DACEx_ConvCpltCallbackCh2 could be implemented in the user file
   */
}
 8004e48:	bf00      	nop
 8004e4a:	370c      	adds	r7, #12
 8004e4c:	46bd      	mov	sp, r7
 8004e4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e52:	4770      	bx	lr

08004e54 <HAL_DACEx_ConvHalfCpltCallbackCh2>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DACEx_ConvHalfCpltCallbackCh2(DAC_HandleTypeDef *hdac)
{
 8004e54:	b480      	push	{r7}
 8004e56:	b083      	sub	sp, #12
 8004e58:	af00      	add	r7, sp, #0
 8004e5a:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DACEx_ConvHalfCpltCallbackCh2 could be implemented in the user file
   */
}
 8004e5c:	bf00      	nop
 8004e5e:	370c      	adds	r7, #12
 8004e60:	46bd      	mov	sp, r7
 8004e62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e66:	4770      	bx	lr

08004e68 <HAL_DACEx_ErrorCallbackCh2>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DACEx_ErrorCallbackCh2(DAC_HandleTypeDef *hdac)
{
 8004e68:	b480      	push	{r7}
 8004e6a:	b083      	sub	sp, #12
 8004e6c:	af00      	add	r7, sp, #0
 8004e6e:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DACEx_ErrorCallbackCh2 could be implemented in the user file
   */
}
 8004e70:	bf00      	nop
 8004e72:	370c      	adds	r7, #12
 8004e74:	46bd      	mov	sp, r7
 8004e76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e7a:	4770      	bx	lr

08004e7c <DAC_DMAConvCpltCh2>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAConvCpltCh2(DMA_HandleTypeDef *hdma)
{
 8004e7c:	b580      	push	{r7, lr}
 8004e7e:	b084      	sub	sp, #16
 8004e80:	af00      	add	r7, sp, #0
 8004e82:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004e84:	687b      	ldr	r3, [r7, #4]
 8004e86:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004e88:	60fb      	str	r3, [r7, #12]

#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvCpltCallbackCh2(hdac);
#else
  HAL_DACEx_ConvCpltCallbackCh2(hdac);
 8004e8a:	68f8      	ldr	r0, [r7, #12]
 8004e8c:	f7ff ffd8 	bl	8004e40 <HAL_DACEx_ConvCpltCallbackCh2>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

  hdac->State = HAL_DAC_STATE_READY;
 8004e90:	68fb      	ldr	r3, [r7, #12]
 8004e92:	2201      	movs	r2, #1
 8004e94:	711a      	strb	r2, [r3, #4]
}
 8004e96:	bf00      	nop
 8004e98:	3710      	adds	r7, #16
 8004e9a:	46bd      	mov	sp, r7
 8004e9c:	bd80      	pop	{r7, pc}

08004e9e <DAC_DMAHalfConvCpltCh2>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAHalfConvCpltCh2(DMA_HandleTypeDef *hdma)
{
 8004e9e:	b580      	push	{r7, lr}
 8004ea0:	b084      	sub	sp, #16
 8004ea2:	af00      	add	r7, sp, #0
 8004ea4:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004ea6:	687b      	ldr	r3, [r7, #4]
 8004ea8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004eaa:	60fb      	str	r3, [r7, #12]
  /* Conversion complete callback */
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvHalfCpltCallbackCh2(hdac);
#else
  HAL_DACEx_ConvHalfCpltCallbackCh2(hdac);
 8004eac:	68f8      	ldr	r0, [r7, #12]
 8004eae:	f7ff ffd1 	bl	8004e54 <HAL_DACEx_ConvHalfCpltCallbackCh2>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
}
 8004eb2:	bf00      	nop
 8004eb4:	3710      	adds	r7, #16
 8004eb6:	46bd      	mov	sp, r7
 8004eb8:	bd80      	pop	{r7, pc}

08004eba <DAC_DMAErrorCh2>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAErrorCh2(DMA_HandleTypeDef *hdma)
{
 8004eba:	b580      	push	{r7, lr}
 8004ebc:	b084      	sub	sp, #16
 8004ebe:	af00      	add	r7, sp, #0
 8004ec0:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004ec2:	687b      	ldr	r3, [r7, #4]
 8004ec4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004ec6:	60fb      	str	r3, [r7, #12]

  /* Set DAC error code to DMA error */
  hdac->ErrorCode |= HAL_DAC_ERROR_DMA;
 8004ec8:	68fb      	ldr	r3, [r7, #12]
 8004eca:	691b      	ldr	r3, [r3, #16]
 8004ecc:	f043 0204 	orr.w	r2, r3, #4
 8004ed0:	68fb      	ldr	r3, [r7, #12]
 8004ed2:	611a      	str	r2, [r3, #16]

#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ErrorCallbackCh2(hdac);
#else
  HAL_DACEx_ErrorCallbackCh2(hdac);
 8004ed4:	68f8      	ldr	r0, [r7, #12]
 8004ed6:	f7ff ffc7 	bl	8004e68 <HAL_DACEx_ErrorCallbackCh2>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

  hdac->State = HAL_DAC_STATE_READY;
 8004eda:	68fb      	ldr	r3, [r7, #12]
 8004edc:	2201      	movs	r2, #1
 8004ede:	711a      	strb	r2, [r3, #4]
}
 8004ee0:	bf00      	nop
 8004ee2:	3710      	adds	r7, #16
 8004ee4:	46bd      	mov	sp, r7
 8004ee6:	bd80      	pop	{r7, pc}

08004ee8 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8004ee8:	b580      	push	{r7, lr}
 8004eea:	b084      	sub	sp, #16
 8004eec:	af00      	add	r7, sp, #0
 8004eee:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if (hdma == NULL)
 8004ef0:	687b      	ldr	r3, [r7, #4]
 8004ef2:	2b00      	cmp	r3, #0
 8004ef4:	d101      	bne.n	8004efa <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 8004ef6:	2301      	movs	r3, #1
 8004ef8:	e08d      	b.n	8005016 <HAL_DMA_Init+0x12e>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 8004efa:	687b      	ldr	r3, [r7, #4]
 8004efc:	681b      	ldr	r3, [r3, #0]
 8004efe:	461a      	mov	r2, r3
 8004f00:	4b47      	ldr	r3, [pc, #284]	; (8005020 <HAL_DMA_Init+0x138>)
 8004f02:	429a      	cmp	r2, r3
 8004f04:	d80f      	bhi.n	8004f26 <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 8004f06:	687b      	ldr	r3, [r7, #4]
 8004f08:	681b      	ldr	r3, [r3, #0]
 8004f0a:	461a      	mov	r2, r3
 8004f0c:	4b45      	ldr	r3, [pc, #276]	; (8005024 <HAL_DMA_Init+0x13c>)
 8004f0e:	4413      	add	r3, r2
 8004f10:	4a45      	ldr	r2, [pc, #276]	; (8005028 <HAL_DMA_Init+0x140>)
 8004f12:	fba2 2303 	umull	r2, r3, r2, r3
 8004f16:	091b      	lsrs	r3, r3, #4
 8004f18:	009a      	lsls	r2, r3, #2
 8004f1a:	687b      	ldr	r3, [r7, #4]
 8004f1c:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA1;
 8004f1e:	687b      	ldr	r3, [r7, #4]
 8004f20:	4a42      	ldr	r2, [pc, #264]	; (800502c <HAL_DMA_Init+0x144>)
 8004f22:	641a      	str	r2, [r3, #64]	; 0x40
 8004f24:	e00e      	b.n	8004f44 <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
 8004f26:	687b      	ldr	r3, [r7, #4]
 8004f28:	681b      	ldr	r3, [r3, #0]
 8004f2a:	461a      	mov	r2, r3
 8004f2c:	4b40      	ldr	r3, [pc, #256]	; (8005030 <HAL_DMA_Init+0x148>)
 8004f2e:	4413      	add	r3, r2
 8004f30:	4a3d      	ldr	r2, [pc, #244]	; (8005028 <HAL_DMA_Init+0x140>)
 8004f32:	fba2 2303 	umull	r2, r3, r2, r3
 8004f36:	091b      	lsrs	r3, r3, #4
 8004f38:	009a      	lsls	r2, r3, #2
 8004f3a:	687b      	ldr	r3, [r7, #4]
 8004f3c:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA2;
 8004f3e:	687b      	ldr	r3, [r7, #4]
 8004f40:	4a3c      	ldr	r2, [pc, #240]	; (8005034 <HAL_DMA_Init+0x14c>)
 8004f42:	641a      	str	r2, [r3, #64]	; 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8004f44:	687b      	ldr	r3, [r7, #4]
 8004f46:	2202      	movs	r2, #2
 8004f48:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8004f4c:	687b      	ldr	r3, [r7, #4]
 8004f4e:	681b      	ldr	r3, [r3, #0]
 8004f50:	681b      	ldr	r3, [r3, #0]
 8004f52:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 8004f54:	68fb      	ldr	r3, [r7, #12]
 8004f56:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 8004f5a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004f5e:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8004f60:	687b      	ldr	r3, [r7, #4]
 8004f62:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004f64:	687b      	ldr	r3, [r7, #4]
 8004f66:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 8004f68:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004f6a:	687b      	ldr	r3, [r7, #4]
 8004f6c:	691b      	ldr	r3, [r3, #16]
 8004f6e:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004f70:	687b      	ldr	r3, [r7, #4]
 8004f72:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004f74:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004f76:	687b      	ldr	r3, [r7, #4]
 8004f78:	699b      	ldr	r3, [r3, #24]
 8004f7a:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8004f7c:	687b      	ldr	r3, [r7, #4]
 8004f7e:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004f80:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8004f82:	687b      	ldr	r3, [r7, #4]
 8004f84:	6a1b      	ldr	r3, [r3, #32]
 8004f86:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8004f88:	68fa      	ldr	r2, [r7, #12]
 8004f8a:	4313      	orrs	r3, r2
 8004f8c:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8004f8e:	687b      	ldr	r3, [r7, #4]
 8004f90:	681b      	ldr	r3, [r3, #0]
 8004f92:	68fa      	ldr	r2, [r7, #12]
 8004f94:	601a      	str	r2, [r3, #0]

  /* Initialize parameters for DMAMUX channel :
     DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
  */
  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 8004f96:	6878      	ldr	r0, [r7, #4]
 8004f98:	f000 fa10 	bl	80053bc <DMA_CalcDMAMUXChannelBaseAndMask>

  if (hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8004f9c:	687b      	ldr	r3, [r7, #4]
 8004f9e:	689b      	ldr	r3, [r3, #8]
 8004fa0:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8004fa4:	d102      	bne.n	8004fac <HAL_DMA_Init+0xc4>
  {
    /* if memory to memory force the request to 0*/
    hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 8004fa6:	687b      	ldr	r3, [r7, #4]
 8004fa8:	2200      	movs	r2, #0
 8004faa:	605a      	str	r2, [r3, #4]
  }

  /* Set peripheral request  to DMAMUX channel */
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8004fac:	687b      	ldr	r3, [r7, #4]
 8004fae:	685a      	ldr	r2, [r3, #4]
 8004fb0:	687b      	ldr	r3, [r7, #4]
 8004fb2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004fb4:	b2d2      	uxtb	r2, r2
 8004fb6:	601a      	str	r2, [r3, #0]

  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8004fb8:	687b      	ldr	r3, [r7, #4]
 8004fba:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004fbc:	687a      	ldr	r2, [r7, #4]
 8004fbe:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8004fc0:	605a      	str	r2, [r3, #4]

  if (((hdma->Init.Request >  0U) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 8004fc2:	687b      	ldr	r3, [r7, #4]
 8004fc4:	685b      	ldr	r3, [r3, #4]
 8004fc6:	2b00      	cmp	r3, #0
 8004fc8:	d010      	beq.n	8004fec <HAL_DMA_Init+0x104>
 8004fca:	687b      	ldr	r3, [r7, #4]
 8004fcc:	685b      	ldr	r3, [r3, #4]
 8004fce:	2b04      	cmp	r3, #4
 8004fd0:	d80c      	bhi.n	8004fec <HAL_DMA_Init+0x104>
  {
    /* Initialize parameters for DMAMUX request generator :
       DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask
    */
    DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 8004fd2:	6878      	ldr	r0, [r7, #4]
 8004fd4:	f000 fa30 	bl	8005438 <DMA_CalcDMAMUXRequestGenBaseAndMask>

    /* Reset the DMAMUX request generator register*/
    hdma->DMAmuxRequestGen->RGCR = 0U;
 8004fd8:	687b      	ldr	r3, [r7, #4]
 8004fda:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004fdc:	2200      	movs	r2, #0
 8004fde:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8004fe0:	687b      	ldr	r3, [r7, #4]
 8004fe2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004fe4:	687a      	ldr	r2, [r7, #4]
 8004fe6:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 8004fe8:	605a      	str	r2, [r3, #4]
 8004fea:	e008      	b.n	8004ffe <HAL_DMA_Init+0x116>
  }
  else
  {
    hdma->DMAmuxRequestGen = 0U;
 8004fec:	687b      	ldr	r3, [r7, #4]
 8004fee:	2200      	movs	r2, #0
 8004ff0:	655a      	str	r2, [r3, #84]	; 0x54
    hdma->DMAmuxRequestGenStatus = 0U;
 8004ff2:	687b      	ldr	r3, [r7, #4]
 8004ff4:	2200      	movs	r2, #0
 8004ff6:	659a      	str	r2, [r3, #88]	; 0x58
    hdma->DMAmuxRequestGenStatusMask = 0U;
 8004ff8:	687b      	ldr	r3, [r7, #4]
 8004ffa:	2200      	movs	r2, #0
 8004ffc:	65da      	str	r2, [r3, #92]	; 0x5c
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8004ffe:	687b      	ldr	r3, [r7, #4]
 8005000:	2200      	movs	r2, #0
 8005002:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA state*/
  hdma->State  = HAL_DMA_STATE_READY;
 8005004:	687b      	ldr	r3, [r7, #4]
 8005006:	2201      	movs	r2, #1
 8005008:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 800500c:	687b      	ldr	r3, [r7, #4]
 800500e:	2200      	movs	r2, #0
 8005010:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  return HAL_OK;
 8005014:	2300      	movs	r3, #0
}
 8005016:	4618      	mov	r0, r3
 8005018:	3710      	adds	r7, #16
 800501a:	46bd      	mov	sp, r7
 800501c:	bd80      	pop	{r7, pc}
 800501e:	bf00      	nop
 8005020:	40020407 	.word	0x40020407
 8005024:	bffdfff8 	.word	0xbffdfff8
 8005028:	cccccccd 	.word	0xcccccccd
 800502c:	40020000 	.word	0x40020000
 8005030:	bffdfbf8 	.word	0xbffdfbf8
 8005034:	40020400 	.word	0x40020400

08005038 <HAL_DMA_Start_IT>:
  * @param  DataLength The length of data to be transferred from source to destination (up to 256Kbytes-1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress,
                                   uint32_t DataLength)
{
 8005038:	b580      	push	{r7, lr}
 800503a:	b086      	sub	sp, #24
 800503c:	af00      	add	r7, sp, #0
 800503e:	60f8      	str	r0, [r7, #12]
 8005040:	60b9      	str	r1, [r7, #8]
 8005042:	607a      	str	r2, [r7, #4]
 8005044:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8005046:	2300      	movs	r3, #0
 8005048:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 800504a:	68fb      	ldr	r3, [r7, #12]
 800504c:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8005050:	2b01      	cmp	r3, #1
 8005052:	d101      	bne.n	8005058 <HAL_DMA_Start_IT+0x20>
 8005054:	2302      	movs	r3, #2
 8005056:	e066      	b.n	8005126 <HAL_DMA_Start_IT+0xee>
 8005058:	68fb      	ldr	r3, [r7, #12]
 800505a:	2201      	movs	r2, #1
 800505c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  if (HAL_DMA_STATE_READY == hdma->State)
 8005060:	68fb      	ldr	r3, [r7, #12]
 8005062:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8005066:	b2db      	uxtb	r3, r3
 8005068:	2b01      	cmp	r3, #1
 800506a:	d155      	bne.n	8005118 <HAL_DMA_Start_IT+0xe0>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 800506c:	68fb      	ldr	r3, [r7, #12]
 800506e:	2202      	movs	r2, #2
 8005070:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8005074:	68fb      	ldr	r3, [r7, #12]
 8005076:	2200      	movs	r2, #0
 8005078:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 800507a:	68fb      	ldr	r3, [r7, #12]
 800507c:	681b      	ldr	r3, [r3, #0]
 800507e:	681a      	ldr	r2, [r3, #0]
 8005080:	68fb      	ldr	r3, [r7, #12]
 8005082:	681b      	ldr	r3, [r3, #0]
 8005084:	f022 0201 	bic.w	r2, r2, #1
 8005088:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 800508a:	683b      	ldr	r3, [r7, #0]
 800508c:	687a      	ldr	r2, [r7, #4]
 800508e:	68b9      	ldr	r1, [r7, #8]
 8005090:	68f8      	ldr	r0, [r7, #12]
 8005092:	f000 f954 	bl	800533e <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if (NULL != hdma->XferHalfCpltCallback)
 8005096:	68fb      	ldr	r3, [r7, #12]
 8005098:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800509a:	2b00      	cmp	r3, #0
 800509c:	d008      	beq.n	80050b0 <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800509e:	68fb      	ldr	r3, [r7, #12]
 80050a0:	681b      	ldr	r3, [r3, #0]
 80050a2:	681a      	ldr	r2, [r3, #0]
 80050a4:	68fb      	ldr	r3, [r7, #12]
 80050a6:	681b      	ldr	r3, [r3, #0]
 80050a8:	f042 020e 	orr.w	r2, r2, #14
 80050ac:	601a      	str	r2, [r3, #0]
 80050ae:	e00f      	b.n	80050d0 <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80050b0:	68fb      	ldr	r3, [r7, #12]
 80050b2:	681b      	ldr	r3, [r3, #0]
 80050b4:	681a      	ldr	r2, [r3, #0]
 80050b6:	68fb      	ldr	r3, [r7, #12]
 80050b8:	681b      	ldr	r3, [r3, #0]
 80050ba:	f022 0204 	bic.w	r2, r2, #4
 80050be:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 80050c0:	68fb      	ldr	r3, [r7, #12]
 80050c2:	681b      	ldr	r3, [r3, #0]
 80050c4:	681a      	ldr	r2, [r3, #0]
 80050c6:	68fb      	ldr	r3, [r7, #12]
 80050c8:	681b      	ldr	r3, [r3, #0]
 80050ca:	f042 020a 	orr.w	r2, r2, #10
 80050ce:	601a      	str	r2, [r3, #0]
    }

    /* Check if DMAMUX Synchronization is enabled*/
    if ((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 80050d0:	68fb      	ldr	r3, [r7, #12]
 80050d2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80050d4:	681b      	ldr	r3, [r3, #0]
 80050d6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80050da:	2b00      	cmp	r3, #0
 80050dc:	d007      	beq.n	80050ee <HAL_DMA_Start_IT+0xb6>
    {
      /* Enable DMAMUX sync overrun IT*/
      hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 80050de:	68fb      	ldr	r3, [r7, #12]
 80050e0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80050e2:	681a      	ldr	r2, [r3, #0]
 80050e4:	68fb      	ldr	r3, [r7, #12]
 80050e6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80050e8:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80050ec:	601a      	str	r2, [r3, #0]
    }

    if (hdma->DMAmuxRequestGen != 0U)
 80050ee:	68fb      	ldr	r3, [r7, #12]
 80050f0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80050f2:	2b00      	cmp	r3, #0
 80050f4:	d007      	beq.n	8005106 <HAL_DMA_Start_IT+0xce>
    {
      /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
      /* enable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 80050f6:	68fb      	ldr	r3, [r7, #12]
 80050f8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80050fa:	681a      	ldr	r2, [r3, #0]
 80050fc:	68fb      	ldr	r3, [r7, #12]
 80050fe:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005100:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8005104:	601a      	str	r2, [r3, #0]
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8005106:	68fb      	ldr	r3, [r7, #12]
 8005108:	681b      	ldr	r3, [r3, #0]
 800510a:	681a      	ldr	r2, [r3, #0]
 800510c:	68fb      	ldr	r3, [r7, #12]
 800510e:	681b      	ldr	r3, [r3, #0]
 8005110:	f042 0201 	orr.w	r2, r2, #1
 8005114:	601a      	str	r2, [r3, #0]
 8005116:	e005      	b.n	8005124 <HAL_DMA_Start_IT+0xec>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8005118:	68fb      	ldr	r3, [r7, #12]
 800511a:	2200      	movs	r2, #0
 800511c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Remain BUSY */
    status = HAL_BUSY;
 8005120:	2302      	movs	r3, #2
 8005122:	75fb      	strb	r3, [r7, #23]
  }
  return status;
 8005124:	7dfb      	ldrb	r3, [r7, #23]
}
 8005126:	4618      	mov	r0, r3
 8005128:	3718      	adds	r7, #24
 800512a:	46bd      	mov	sp, r7
 800512c:	bd80      	pop	{r7, pc}

0800512e <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 800512e:	b480      	push	{r7}
 8005130:	b085      	sub	sp, #20
 8005132:	af00      	add	r7, sp, #0
 8005134:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005136:	2300      	movs	r3, #0
 8005138:	73fb      	strb	r3, [r7, #15]

  if(hdma->State != HAL_DMA_STATE_BUSY)
 800513a:	687b      	ldr	r3, [r7, #4]
 800513c:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8005140:	b2db      	uxtb	r3, r3
 8005142:	2b02      	cmp	r3, #2
 8005144:	d005      	beq.n	8005152 <HAL_DMA_Abort+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8005146:	687b      	ldr	r3, [r7, #4]
 8005148:	2204      	movs	r2, #4
 800514a:	63da      	str	r2, [r3, #60]	; 0x3c

    status = HAL_ERROR;
 800514c:	2301      	movs	r3, #1
 800514e:	73fb      	strb	r3, [r7, #15]
 8005150:	e037      	b.n	80051c2 <HAL_DMA_Abort+0x94>
  }
  else
  {
     /* Disable DMA IT */
     __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8005152:	687b      	ldr	r3, [r7, #4]
 8005154:	681b      	ldr	r3, [r3, #0]
 8005156:	681a      	ldr	r2, [r3, #0]
 8005158:	687b      	ldr	r3, [r7, #4]
 800515a:	681b      	ldr	r3, [r3, #0]
 800515c:	f022 020e 	bic.w	r2, r2, #14
 8005160:	601a      	str	r2, [r3, #0]
     
     /* disable the DMAMUX sync overrun IT*/
     hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8005162:	687b      	ldr	r3, [r7, #4]
 8005164:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005166:	681a      	ldr	r2, [r3, #0]
 8005168:	687b      	ldr	r3, [r7, #4]
 800516a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800516c:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8005170:	601a      	str	r2, [r3, #0]
     
     /* Disable the channel */
     __HAL_DMA_DISABLE(hdma);
 8005172:	687b      	ldr	r3, [r7, #4]
 8005174:	681b      	ldr	r3, [r3, #0]
 8005176:	681a      	ldr	r2, [r3, #0]
 8005178:	687b      	ldr	r3, [r7, #4]
 800517a:	681b      	ldr	r3, [r3, #0]
 800517c:	f022 0201 	bic.w	r2, r2, #1
 8005180:	601a      	str	r2, [r3, #0]
     
     /* Clear all flags */
     hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 8005182:	687b      	ldr	r3, [r7, #4]
 8005184:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005186:	f003 021f 	and.w	r2, r3, #31
 800518a:	687b      	ldr	r3, [r7, #4]
 800518c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800518e:	2101      	movs	r1, #1
 8005190:	fa01 f202 	lsl.w	r2, r1, r2
 8005194:	605a      	str	r2, [r3, #4]
     
     /* Clear the DMAMUX synchro overrun flag */
     hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8005196:	687b      	ldr	r3, [r7, #4]
 8005198:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800519a:	687a      	ldr	r2, [r7, #4]
 800519c:	6d12      	ldr	r2, [r2, #80]	; 0x50
 800519e:	605a      	str	r2, [r3, #4]
     
     if (hdma->DMAmuxRequestGen != 0U)
 80051a0:	687b      	ldr	r3, [r7, #4]
 80051a2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80051a4:	2b00      	cmp	r3, #0
 80051a6:	d00c      	beq.n	80051c2 <HAL_DMA_Abort+0x94>
     {
       /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
       /* disable the request gen overrun IT*/
       hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 80051a8:	687b      	ldr	r3, [r7, #4]
 80051aa:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80051ac:	681a      	ldr	r2, [r3, #0]
 80051ae:	687b      	ldr	r3, [r7, #4]
 80051b0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80051b2:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80051b6:	601a      	str	r2, [r3, #0]
     
       /* Clear the DMAMUX request generator overrun flag */
       hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80051b8:	687b      	ldr	r3, [r7, #4]
 80051ba:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80051bc:	687a      	ldr	r2, [r7, #4]
 80051be:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 80051c0:	605a      	str	r2, [r3, #4]
     }
  }  
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 80051c2:	687b      	ldr	r3, [r7, #4]
 80051c4:	2201      	movs	r2, #1
 80051c6:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);
 80051ca:	687b      	ldr	r3, [r7, #4]
 80051cc:	2200      	movs	r2, #0
 80051ce:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  return status;
 80051d2:	7bfb      	ldrb	r3, [r7, #15]
}
 80051d4:	4618      	mov	r0, r3
 80051d6:	3714      	adds	r7, #20
 80051d8:	46bd      	mov	sp, r7
 80051da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051de:	4770      	bx	lr

080051e0 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80051e0:	b580      	push	{r7, lr}
 80051e2:	b084      	sub	sp, #16
 80051e4:	af00      	add	r7, sp, #0
 80051e6:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 80051e8:	687b      	ldr	r3, [r7, #4]
 80051ea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80051ec:	681b      	ldr	r3, [r3, #0]
 80051ee:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 80051f0:	687b      	ldr	r3, [r7, #4]
 80051f2:	681b      	ldr	r3, [r3, #0]
 80051f4:	681b      	ldr	r3, [r3, #0]
 80051f6:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if ((0U != (flag_it & ((uint32_t)DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1FU)))) && (0U != (source_it & DMA_IT_HT)))
 80051f8:	687b      	ldr	r3, [r7, #4]
 80051fa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80051fc:	f003 031f 	and.w	r3, r3, #31
 8005200:	2204      	movs	r2, #4
 8005202:	409a      	lsls	r2, r3
 8005204:	68fb      	ldr	r3, [r7, #12]
 8005206:	4013      	ands	r3, r2
 8005208:	2b00      	cmp	r3, #0
 800520a:	d026      	beq.n	800525a <HAL_DMA_IRQHandler+0x7a>
 800520c:	68bb      	ldr	r3, [r7, #8]
 800520e:	f003 0304 	and.w	r3, r3, #4
 8005212:	2b00      	cmp	r3, #0
 8005214:	d021      	beq.n	800525a <HAL_DMA_IRQHandler+0x7a>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8005216:	687b      	ldr	r3, [r7, #4]
 8005218:	681b      	ldr	r3, [r3, #0]
 800521a:	681b      	ldr	r3, [r3, #0]
 800521c:	f003 0320 	and.w	r3, r3, #32
 8005220:	2b00      	cmp	r3, #0
 8005222:	d107      	bne.n	8005234 <HAL_DMA_IRQHandler+0x54>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8005224:	687b      	ldr	r3, [r7, #4]
 8005226:	681b      	ldr	r3, [r3, #0]
 8005228:	681a      	ldr	r2, [r3, #0]
 800522a:	687b      	ldr	r3, [r7, #4]
 800522c:	681b      	ldr	r3, [r3, #0]
 800522e:	f022 0204 	bic.w	r2, r2, #4
 8005232:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1FU));
 8005234:	687b      	ldr	r3, [r7, #4]
 8005236:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005238:	f003 021f 	and.w	r2, r3, #31
 800523c:	687b      	ldr	r3, [r7, #4]
 800523e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005240:	2104      	movs	r1, #4
 8005242:	fa01 f202 	lsl.w	r2, r1, r2
 8005246:	605a      	str	r2, [r3, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if (hdma->XferHalfCpltCallback != NULL)
 8005248:	687b      	ldr	r3, [r7, #4]
 800524a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800524c:	2b00      	cmp	r3, #0
 800524e:	d071      	beq.n	8005334 <HAL_DMA_IRQHandler+0x154>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 8005250:	687b      	ldr	r3, [r7, #4]
 8005252:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005254:	6878      	ldr	r0, [r7, #4]
 8005256:	4798      	blx	r3
    if (hdma->XferHalfCpltCallback != NULL)
 8005258:	e06c      	b.n	8005334 <HAL_DMA_IRQHandler+0x154>
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  else if ((0U != (flag_it & ((uint32_t)DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1FU))))
 800525a:	687b      	ldr	r3, [r7, #4]
 800525c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800525e:	f003 031f 	and.w	r3, r3, #31
 8005262:	2202      	movs	r2, #2
 8005264:	409a      	lsls	r2, r3
 8005266:	68fb      	ldr	r3, [r7, #12]
 8005268:	4013      	ands	r3, r2
 800526a:	2b00      	cmp	r3, #0
 800526c:	d02e      	beq.n	80052cc <HAL_DMA_IRQHandler+0xec>
           && (0U != (source_it & DMA_IT_TC)))
 800526e:	68bb      	ldr	r3, [r7, #8]
 8005270:	f003 0302 	and.w	r3, r3, #2
 8005274:	2b00      	cmp	r3, #0
 8005276:	d029      	beq.n	80052cc <HAL_DMA_IRQHandler+0xec>
  {
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8005278:	687b      	ldr	r3, [r7, #4]
 800527a:	681b      	ldr	r3, [r3, #0]
 800527c:	681b      	ldr	r3, [r3, #0]
 800527e:	f003 0320 	and.w	r3, r3, #32
 8005282:	2b00      	cmp	r3, #0
 8005284:	d10b      	bne.n	800529e <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8005286:	687b      	ldr	r3, [r7, #4]
 8005288:	681b      	ldr	r3, [r3, #0]
 800528a:	681a      	ldr	r2, [r3, #0]
 800528c:	687b      	ldr	r3, [r7, #4]
 800528e:	681b      	ldr	r3, [r3, #0]
 8005290:	f022 020a 	bic.w	r2, r2, #10
 8005294:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8005296:	687b      	ldr	r3, [r7, #4]
 8005298:	2201      	movs	r2, #1
 800529a:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1FU));
 800529e:	687b      	ldr	r3, [r7, #4]
 80052a0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80052a2:	f003 021f 	and.w	r2, r3, #31
 80052a6:	687b      	ldr	r3, [r7, #4]
 80052a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80052aa:	2102      	movs	r1, #2
 80052ac:	fa01 f202 	lsl.w	r2, r1, r2
 80052b0:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80052b2:	687b      	ldr	r3, [r7, #4]
 80052b4:	2200      	movs	r2, #0
 80052b6:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferCpltCallback != NULL)
 80052ba:	687b      	ldr	r3, [r7, #4]
 80052bc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80052be:	2b00      	cmp	r3, #0
 80052c0:	d038      	beq.n	8005334 <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 80052c2:	687b      	ldr	r3, [r7, #4]
 80052c4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80052c6:	6878      	ldr	r0, [r7, #4]
 80052c8:	4798      	blx	r3
    if (hdma->XferCpltCallback != NULL)
 80052ca:	e033      	b.n	8005334 <HAL_DMA_IRQHandler+0x154>
    }
  }
  /* Transfer Error Interrupt management **************************************/
  else if ((0U != (flag_it & ((uint32_t)DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1FU))))
 80052cc:	687b      	ldr	r3, [r7, #4]
 80052ce:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80052d0:	f003 031f 	and.w	r3, r3, #31
 80052d4:	2208      	movs	r2, #8
 80052d6:	409a      	lsls	r2, r3
 80052d8:	68fb      	ldr	r3, [r7, #12]
 80052da:	4013      	ands	r3, r2
 80052dc:	2b00      	cmp	r3, #0
 80052de:	d02a      	beq.n	8005336 <HAL_DMA_IRQHandler+0x156>
           && (0U != (source_it & DMA_IT_TE)))
 80052e0:	68bb      	ldr	r3, [r7, #8]
 80052e2:	f003 0308 	and.w	r3, r3, #8
 80052e6:	2b00      	cmp	r3, #0
 80052e8:	d025      	beq.n	8005336 <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80052ea:	687b      	ldr	r3, [r7, #4]
 80052ec:	681b      	ldr	r3, [r3, #0]
 80052ee:	681a      	ldr	r2, [r3, #0]
 80052f0:	687b      	ldr	r3, [r7, #4]
 80052f2:	681b      	ldr	r3, [r3, #0]
 80052f4:	f022 020e 	bic.w	r2, r2, #14
 80052f8:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 80052fa:	687b      	ldr	r3, [r7, #4]
 80052fc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80052fe:	f003 021f 	and.w	r2, r3, #31
 8005302:	687b      	ldr	r3, [r7, #4]
 8005304:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005306:	2101      	movs	r1, #1
 8005308:	fa01 f202 	lsl.w	r2, r1, r2
 800530c:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 800530e:	687b      	ldr	r3, [r7, #4]
 8005310:	2201      	movs	r2, #1
 8005312:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8005314:	687b      	ldr	r3, [r7, #4]
 8005316:	2201      	movs	r2, #1
 8005318:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800531c:	687b      	ldr	r3, [r7, #4]
 800531e:	2200      	movs	r2, #0
 8005320:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferErrorCallback != NULL)
 8005324:	687b      	ldr	r3, [r7, #4]
 8005326:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005328:	2b00      	cmp	r3, #0
 800532a:	d004      	beq.n	8005336 <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 800532c:	687b      	ldr	r3, [r7, #4]
 800532e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005330:	6878      	ldr	r0, [r7, #4]
 8005332:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 8005334:	bf00      	nop
 8005336:	bf00      	nop
}
 8005338:	3710      	adds	r7, #16
 800533a:	46bd      	mov	sp, r7
 800533c:	bd80      	pop	{r7, pc}

0800533e <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800533e:	b480      	push	{r7}
 8005340:	b085      	sub	sp, #20
 8005342:	af00      	add	r7, sp, #0
 8005344:	60f8      	str	r0, [r7, #12]
 8005346:	60b9      	str	r1, [r7, #8]
 8005348:	607a      	str	r2, [r7, #4]
 800534a:	603b      	str	r3, [r7, #0]
  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800534c:	68fb      	ldr	r3, [r7, #12]
 800534e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005350:	68fa      	ldr	r2, [r7, #12]
 8005352:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8005354:	605a      	str	r2, [r3, #4]

  if (hdma->DMAmuxRequestGen != 0U)
 8005356:	68fb      	ldr	r3, [r7, #12]
 8005358:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800535a:	2b00      	cmp	r3, #0
 800535c:	d004      	beq.n	8005368 <DMA_SetConfig+0x2a>
  {
    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800535e:	68fb      	ldr	r3, [r7, #12]
 8005360:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005362:	68fa      	ldr	r2, [r7, #12]
 8005364:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 8005366:	605a      	str	r2, [r3, #4]
  }

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 8005368:	68fb      	ldr	r3, [r7, #12]
 800536a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800536c:	f003 021f 	and.w	r2, r3, #31
 8005370:	68fb      	ldr	r3, [r7, #12]
 8005372:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005374:	2101      	movs	r1, #1
 8005376:	fa01 f202 	lsl.w	r2, r1, r2
 800537a:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 800537c:	68fb      	ldr	r3, [r7, #12]
 800537e:	681b      	ldr	r3, [r3, #0]
 8005380:	683a      	ldr	r2, [r7, #0]
 8005382:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if ((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8005384:	68fb      	ldr	r3, [r7, #12]
 8005386:	689b      	ldr	r3, [r3, #8]
 8005388:	2b10      	cmp	r3, #16
 800538a:	d108      	bne.n	800539e <DMA_SetConfig+0x60>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 800538c:	68fb      	ldr	r3, [r7, #12]
 800538e:	681b      	ldr	r3, [r3, #0]
 8005390:	687a      	ldr	r2, [r7, #4]
 8005392:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8005394:	68fb      	ldr	r3, [r7, #12]
 8005396:	681b      	ldr	r3, [r3, #0]
 8005398:	68ba      	ldr	r2, [r7, #8]
 800539a:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 800539c:	e007      	b.n	80053ae <DMA_SetConfig+0x70>
    hdma->Instance->CPAR = SrcAddress;
 800539e:	68fb      	ldr	r3, [r7, #12]
 80053a0:	681b      	ldr	r3, [r3, #0]
 80053a2:	68ba      	ldr	r2, [r7, #8]
 80053a4:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 80053a6:	68fb      	ldr	r3, [r7, #12]
 80053a8:	681b      	ldr	r3, [r3, #0]
 80053aa:	687a      	ldr	r2, [r7, #4]
 80053ac:	60da      	str	r2, [r3, #12]
}
 80053ae:	bf00      	nop
 80053b0:	3714      	adds	r7, #20
 80053b2:	46bd      	mov	sp, r7
 80053b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053b8:	4770      	bx	lr
	...

080053bc <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma        pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval None
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 80053bc:	b480      	push	{r7}
 80053be:	b087      	sub	sp, #28
 80053c0:	af00      	add	r7, sp, #0
 80053c2:	6078      	str	r0, [r7, #4]
  uint32_t dmamux_base_addr;
  uint32_t channel_number;
  DMAMUX_Channel_TypeDef *DMAMUX1_ChannelBase;

  /* check if instance is not outside the DMA channel range */
  if ((uint32_t)hdma->Instance < (uint32_t)DMA2_Channel1)
 80053c4:	687b      	ldr	r3, [r7, #4]
 80053c6:	681b      	ldr	r3, [r3, #0]
 80053c8:	461a      	mov	r2, r3
 80053ca:	4b16      	ldr	r3, [pc, #88]	; (8005424 <DMA_CalcDMAMUXChannelBaseAndMask+0x68>)
 80053cc:	429a      	cmp	r2, r3
 80053ce:	d802      	bhi.n	80053d6 <DMA_CalcDMAMUXChannelBaseAndMask+0x1a>
  {
    /* DMA1 */
    DMAMUX1_ChannelBase = DMAMUX1_Channel0;
 80053d0:	4b15      	ldr	r3, [pc, #84]	; (8005428 <DMA_CalcDMAMUXChannelBaseAndMask+0x6c>)
 80053d2:	617b      	str	r3, [r7, #20]
 80053d4:	e001      	b.n	80053da <DMA_CalcDMAMUXChannelBaseAndMask+0x1e>
  }
  else
  {
    /* DMA2 */
#if defined (STM32G471xx) || defined (STM32G473xx) || defined (STM32G474xx) || defined (STM32G483xx) || defined (STM32G484xx)
    DMAMUX1_ChannelBase = DMAMUX1_Channel8;
 80053d6:	4b15      	ldr	r3, [pc, #84]	; (800542c <DMA_CalcDMAMUXChannelBaseAndMask+0x70>)
 80053d8:	617b      	str	r3, [r7, #20]
    DMAMUX1_ChannelBase = DMAMUX1_Channel6;
#else
    DMAMUX1_ChannelBase = DMAMUX1_Channel7;
#endif /* STM32G4x1xx) */
  }
  dmamux_base_addr = (uint32_t)DMAMUX1_ChannelBase;
 80053da:	697b      	ldr	r3, [r7, #20]
 80053dc:	613b      	str	r3, [r7, #16]
  channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 80053de:	687b      	ldr	r3, [r7, #4]
 80053e0:	681b      	ldr	r3, [r3, #0]
 80053e2:	b2db      	uxtb	r3, r3
 80053e4:	3b08      	subs	r3, #8
 80053e6:	4a12      	ldr	r2, [pc, #72]	; (8005430 <DMA_CalcDMAMUXChannelBaseAndMask+0x74>)
 80053e8:	fba2 2303 	umull	r2, r3, r2, r3
 80053ec:	091b      	lsrs	r3, r3, #4
 80053ee:	60fb      	str	r3, [r7, #12]
  hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)(uint32_t)(dmamux_base_addr + ((hdma->ChannelIndex >> 2U) * ((uint32_t)DMAMUX1_Channel1 - (uint32_t)DMAMUX1_Channel0)));
 80053f0:	687b      	ldr	r3, [r7, #4]
 80053f2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80053f4:	089b      	lsrs	r3, r3, #2
 80053f6:	009a      	lsls	r2, r3, #2
 80053f8:	693b      	ldr	r3, [r7, #16]
 80053fa:	4413      	add	r3, r2
 80053fc:	461a      	mov	r2, r3
 80053fe:	687b      	ldr	r3, [r7, #4]
 8005400:	649a      	str	r2, [r3, #72]	; 0x48
  hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 8005402:	687b      	ldr	r3, [r7, #4]
 8005404:	4a0b      	ldr	r2, [pc, #44]	; (8005434 <DMA_CalcDMAMUXChannelBaseAndMask+0x78>)
 8005406:	64da      	str	r2, [r3, #76]	; 0x4c
  hdma->DMAmuxChannelStatusMask = 1UL << (channel_number & 0x1FU);
 8005408:	68fb      	ldr	r3, [r7, #12]
 800540a:	f003 031f 	and.w	r3, r3, #31
 800540e:	2201      	movs	r2, #1
 8005410:	409a      	lsls	r2, r3
 8005412:	687b      	ldr	r3, [r7, #4]
 8005414:	651a      	str	r2, [r3, #80]	; 0x50
}
 8005416:	bf00      	nop
 8005418:	371c      	adds	r7, #28
 800541a:	46bd      	mov	sp, r7
 800541c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005420:	4770      	bx	lr
 8005422:	bf00      	nop
 8005424:	40020407 	.word	0x40020407
 8005428:	40020800 	.word	0x40020800
 800542c:	40020820 	.word	0x40020820
 8005430:	cccccccd 	.word	0xcccccccd
 8005434:	40020880 	.word	0x40020880

08005438 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  *                     the configuration information for the specified DMA Channel.
  * @retval None
  */

static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8005438:	b480      	push	{r7}
 800543a:	b085      	sub	sp, #20
 800543c:	af00      	add	r7, sp, #0
 800543e:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 8005440:	687b      	ldr	r3, [r7, #4]
 8005442:	685b      	ldr	r3, [r3, #4]
 8005444:	b2db      	uxtb	r3, r3
 8005446:	60fb      	str	r3, [r7, #12]

  /* DMA Channels are connected to DMAMUX1 request generator blocks*/
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 8005448:	68fa      	ldr	r2, [r7, #12]
 800544a:	4b0b      	ldr	r3, [pc, #44]	; (8005478 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x40>)
 800544c:	4413      	add	r3, r2
 800544e:	009b      	lsls	r3, r3, #2
 8005450:	461a      	mov	r2, r3
 8005452:	687b      	ldr	r3, [r7, #4]
 8005454:	655a      	str	r2, [r3, #84]	; 0x54

  hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 8005456:	687b      	ldr	r3, [r7, #4]
 8005458:	4a08      	ldr	r2, [pc, #32]	; (800547c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x44>)
 800545a:	659a      	str	r2, [r3, #88]	; 0x58

  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x1FU);
 800545c:	68fb      	ldr	r3, [r7, #12]
 800545e:	3b01      	subs	r3, #1
 8005460:	f003 031f 	and.w	r3, r3, #31
 8005464:	2201      	movs	r2, #1
 8005466:	409a      	lsls	r2, r3
 8005468:	687b      	ldr	r3, [r7, #4]
 800546a:	65da      	str	r2, [r3, #92]	; 0x5c
}
 800546c:	bf00      	nop
 800546e:	3714      	adds	r7, #20
 8005470:	46bd      	mov	sp, r7
 8005472:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005476:	4770      	bx	lr
 8005478:	1000823f 	.word	0x1000823f
 800547c:	40020940 	.word	0x40020940

08005480 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8005480:	b480      	push	{r7}
 8005482:	b087      	sub	sp, #28
 8005484:	af00      	add	r7, sp, #0
 8005486:	6078      	str	r0, [r7, #4]
 8005488:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 800548a:	2300      	movs	r3, #0
 800548c:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 800548e:	e15a      	b.n	8005746 <HAL_GPIO_Init+0x2c6>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8005490:	683b      	ldr	r3, [r7, #0]
 8005492:	681a      	ldr	r2, [r3, #0]
 8005494:	2101      	movs	r1, #1
 8005496:	697b      	ldr	r3, [r7, #20]
 8005498:	fa01 f303 	lsl.w	r3, r1, r3
 800549c:	4013      	ands	r3, r2
 800549e:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80054a0:	68fb      	ldr	r3, [r7, #12]
 80054a2:	2b00      	cmp	r3, #0
 80054a4:	f000 814c 	beq.w	8005740 <HAL_GPIO_Init+0x2c0>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80054a8:	683b      	ldr	r3, [r7, #0]
 80054aa:	685b      	ldr	r3, [r3, #4]
 80054ac:	2b01      	cmp	r3, #1
 80054ae:	d00b      	beq.n	80054c8 <HAL_GPIO_Init+0x48>
 80054b0:	683b      	ldr	r3, [r7, #0]
 80054b2:	685b      	ldr	r3, [r3, #4]
 80054b4:	2b02      	cmp	r3, #2
 80054b6:	d007      	beq.n	80054c8 <HAL_GPIO_Init+0x48>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80054b8:	683b      	ldr	r3, [r7, #0]
 80054ba:	685b      	ldr	r3, [r3, #4]
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80054bc:	2b11      	cmp	r3, #17
 80054be:	d003      	beq.n	80054c8 <HAL_GPIO_Init+0x48>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80054c0:	683b      	ldr	r3, [r7, #0]
 80054c2:	685b      	ldr	r3, [r3, #4]
 80054c4:	2b12      	cmp	r3, #18
 80054c6:	d130      	bne.n	800552a <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80054c8:	687b      	ldr	r3, [r7, #4]
 80054ca:	689b      	ldr	r3, [r3, #8]
 80054cc:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 80054ce:	697b      	ldr	r3, [r7, #20]
 80054d0:	005b      	lsls	r3, r3, #1
 80054d2:	2203      	movs	r2, #3
 80054d4:	fa02 f303 	lsl.w	r3, r2, r3
 80054d8:	43db      	mvns	r3, r3
 80054da:	693a      	ldr	r2, [r7, #16]
 80054dc:	4013      	ands	r3, r2
 80054de:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80054e0:	683b      	ldr	r3, [r7, #0]
 80054e2:	68da      	ldr	r2, [r3, #12]
 80054e4:	697b      	ldr	r3, [r7, #20]
 80054e6:	005b      	lsls	r3, r3, #1
 80054e8:	fa02 f303 	lsl.w	r3, r2, r3
 80054ec:	693a      	ldr	r2, [r7, #16]
 80054ee:	4313      	orrs	r3, r2
 80054f0:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80054f2:	687b      	ldr	r3, [r7, #4]
 80054f4:	693a      	ldr	r2, [r7, #16]
 80054f6:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80054f8:	687b      	ldr	r3, [r7, #4]
 80054fa:	685b      	ldr	r3, [r3, #4]
 80054fc:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80054fe:	2201      	movs	r2, #1
 8005500:	697b      	ldr	r3, [r7, #20]
 8005502:	fa02 f303 	lsl.w	r3, r2, r3
 8005506:	43db      	mvns	r3, r3
 8005508:	693a      	ldr	r2, [r7, #16]
 800550a:	4013      	ands	r3, r2
 800550c:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 800550e:	683b      	ldr	r3, [r7, #0]
 8005510:	685b      	ldr	r3, [r3, #4]
 8005512:	091b      	lsrs	r3, r3, #4
 8005514:	f003 0201 	and.w	r2, r3, #1
 8005518:	697b      	ldr	r3, [r7, #20]
 800551a:	fa02 f303 	lsl.w	r3, r2, r3
 800551e:	693a      	ldr	r2, [r7, #16]
 8005520:	4313      	orrs	r3, r2
 8005522:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8005524:	687b      	ldr	r3, [r7, #4]
 8005526:	693a      	ldr	r2, [r7, #16]
 8005528:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 800552a:	687b      	ldr	r3, [r7, #4]
 800552c:	68db      	ldr	r3, [r3, #12]
 800552e:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8005530:	697b      	ldr	r3, [r7, #20]
 8005532:	005b      	lsls	r3, r3, #1
 8005534:	2203      	movs	r2, #3
 8005536:	fa02 f303 	lsl.w	r3, r2, r3
 800553a:	43db      	mvns	r3, r3
 800553c:	693a      	ldr	r2, [r7, #16]
 800553e:	4013      	ands	r3, r2
 8005540:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8005542:	683b      	ldr	r3, [r7, #0]
 8005544:	689a      	ldr	r2, [r3, #8]
 8005546:	697b      	ldr	r3, [r7, #20]
 8005548:	005b      	lsls	r3, r3, #1
 800554a:	fa02 f303 	lsl.w	r3, r2, r3
 800554e:	693a      	ldr	r2, [r7, #16]
 8005550:	4313      	orrs	r3, r2
 8005552:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 8005554:	687b      	ldr	r3, [r7, #4]
 8005556:	693a      	ldr	r2, [r7, #16]
 8005558:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800555a:	683b      	ldr	r3, [r7, #0]
 800555c:	685b      	ldr	r3, [r3, #4]
 800555e:	2b02      	cmp	r3, #2
 8005560:	d003      	beq.n	800556a <HAL_GPIO_Init+0xea>
 8005562:	683b      	ldr	r3, [r7, #0]
 8005564:	685b      	ldr	r3, [r3, #4]
 8005566:	2b12      	cmp	r3, #18
 8005568:	d123      	bne.n	80055b2 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800556a:	697b      	ldr	r3, [r7, #20]
 800556c:	08da      	lsrs	r2, r3, #3
 800556e:	687b      	ldr	r3, [r7, #4]
 8005570:	3208      	adds	r2, #8
 8005572:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005576:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8005578:	697b      	ldr	r3, [r7, #20]
 800557a:	f003 0307 	and.w	r3, r3, #7
 800557e:	009b      	lsls	r3, r3, #2
 8005580:	220f      	movs	r2, #15
 8005582:	fa02 f303 	lsl.w	r3, r2, r3
 8005586:	43db      	mvns	r3, r3
 8005588:	693a      	ldr	r2, [r7, #16]
 800558a:	4013      	ands	r3, r2
 800558c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 800558e:	683b      	ldr	r3, [r7, #0]
 8005590:	691a      	ldr	r2, [r3, #16]
 8005592:	697b      	ldr	r3, [r7, #20]
 8005594:	f003 0307 	and.w	r3, r3, #7
 8005598:	009b      	lsls	r3, r3, #2
 800559a:	fa02 f303 	lsl.w	r3, r2, r3
 800559e:	693a      	ldr	r2, [r7, #16]
 80055a0:	4313      	orrs	r3, r2
 80055a2:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 80055a4:	697b      	ldr	r3, [r7, #20]
 80055a6:	08da      	lsrs	r2, r3, #3
 80055a8:	687b      	ldr	r3, [r7, #4]
 80055aa:	3208      	adds	r2, #8
 80055ac:	6939      	ldr	r1, [r7, #16]
 80055ae:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80055b2:	687b      	ldr	r3, [r7, #4]
 80055b4:	681b      	ldr	r3, [r3, #0]
 80055b6:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 80055b8:	697b      	ldr	r3, [r7, #20]
 80055ba:	005b      	lsls	r3, r3, #1
 80055bc:	2203      	movs	r2, #3
 80055be:	fa02 f303 	lsl.w	r3, r2, r3
 80055c2:	43db      	mvns	r3, r3
 80055c4:	693a      	ldr	r2, [r7, #16]
 80055c6:	4013      	ands	r3, r2
 80055c8:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80055ca:	683b      	ldr	r3, [r7, #0]
 80055cc:	685b      	ldr	r3, [r3, #4]
 80055ce:	f003 0203 	and.w	r2, r3, #3
 80055d2:	697b      	ldr	r3, [r7, #20]
 80055d4:	005b      	lsls	r3, r3, #1
 80055d6:	fa02 f303 	lsl.w	r3, r2, r3
 80055da:	693a      	ldr	r2, [r7, #16]
 80055dc:	4313      	orrs	r3, r2
 80055de:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80055e0:	687b      	ldr	r3, [r7, #4]
 80055e2:	693a      	ldr	r2, [r7, #16]
 80055e4:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80055e6:	683b      	ldr	r3, [r7, #0]
 80055e8:	685b      	ldr	r3, [r3, #4]
 80055ea:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80055ee:	2b00      	cmp	r3, #0
 80055f0:	f000 80a6 	beq.w	8005740 <HAL_GPIO_Init+0x2c0>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80055f4:	4b5b      	ldr	r3, [pc, #364]	; (8005764 <HAL_GPIO_Init+0x2e4>)
 80055f6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80055f8:	4a5a      	ldr	r2, [pc, #360]	; (8005764 <HAL_GPIO_Init+0x2e4>)
 80055fa:	f043 0301 	orr.w	r3, r3, #1
 80055fe:	6613      	str	r3, [r2, #96]	; 0x60
 8005600:	4b58      	ldr	r3, [pc, #352]	; (8005764 <HAL_GPIO_Init+0x2e4>)
 8005602:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005604:	f003 0301 	and.w	r3, r3, #1
 8005608:	60bb      	str	r3, [r7, #8]
 800560a:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2U];
 800560c:	4a56      	ldr	r2, [pc, #344]	; (8005768 <HAL_GPIO_Init+0x2e8>)
 800560e:	697b      	ldr	r3, [r7, #20]
 8005610:	089b      	lsrs	r3, r3, #2
 8005612:	3302      	adds	r3, #2
 8005614:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005618:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 800561a:	697b      	ldr	r3, [r7, #20]
 800561c:	f003 0303 	and.w	r3, r3, #3
 8005620:	009b      	lsls	r3, r3, #2
 8005622:	220f      	movs	r2, #15
 8005624:	fa02 f303 	lsl.w	r3, r2, r3
 8005628:	43db      	mvns	r3, r3
 800562a:	693a      	ldr	r2, [r7, #16]
 800562c:	4013      	ands	r3, r2
 800562e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8005630:	687b      	ldr	r3, [r7, #4]
 8005632:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8005636:	d01f      	beq.n	8005678 <HAL_GPIO_Init+0x1f8>
 8005638:	687b      	ldr	r3, [r7, #4]
 800563a:	4a4c      	ldr	r2, [pc, #304]	; (800576c <HAL_GPIO_Init+0x2ec>)
 800563c:	4293      	cmp	r3, r2
 800563e:	d019      	beq.n	8005674 <HAL_GPIO_Init+0x1f4>
 8005640:	687b      	ldr	r3, [r7, #4]
 8005642:	4a4b      	ldr	r2, [pc, #300]	; (8005770 <HAL_GPIO_Init+0x2f0>)
 8005644:	4293      	cmp	r3, r2
 8005646:	d013      	beq.n	8005670 <HAL_GPIO_Init+0x1f0>
 8005648:	687b      	ldr	r3, [r7, #4]
 800564a:	4a4a      	ldr	r2, [pc, #296]	; (8005774 <HAL_GPIO_Init+0x2f4>)
 800564c:	4293      	cmp	r3, r2
 800564e:	d00d      	beq.n	800566c <HAL_GPIO_Init+0x1ec>
 8005650:	687b      	ldr	r3, [r7, #4]
 8005652:	4a49      	ldr	r2, [pc, #292]	; (8005778 <HAL_GPIO_Init+0x2f8>)
 8005654:	4293      	cmp	r3, r2
 8005656:	d007      	beq.n	8005668 <HAL_GPIO_Init+0x1e8>
 8005658:	687b      	ldr	r3, [r7, #4]
 800565a:	4a48      	ldr	r2, [pc, #288]	; (800577c <HAL_GPIO_Init+0x2fc>)
 800565c:	4293      	cmp	r3, r2
 800565e:	d101      	bne.n	8005664 <HAL_GPIO_Init+0x1e4>
 8005660:	2305      	movs	r3, #5
 8005662:	e00a      	b.n	800567a <HAL_GPIO_Init+0x1fa>
 8005664:	2306      	movs	r3, #6
 8005666:	e008      	b.n	800567a <HAL_GPIO_Init+0x1fa>
 8005668:	2304      	movs	r3, #4
 800566a:	e006      	b.n	800567a <HAL_GPIO_Init+0x1fa>
 800566c:	2303      	movs	r3, #3
 800566e:	e004      	b.n	800567a <HAL_GPIO_Init+0x1fa>
 8005670:	2302      	movs	r3, #2
 8005672:	e002      	b.n	800567a <HAL_GPIO_Init+0x1fa>
 8005674:	2301      	movs	r3, #1
 8005676:	e000      	b.n	800567a <HAL_GPIO_Init+0x1fa>
 8005678:	2300      	movs	r3, #0
 800567a:	697a      	ldr	r2, [r7, #20]
 800567c:	f002 0203 	and.w	r2, r2, #3
 8005680:	0092      	lsls	r2, r2, #2
 8005682:	4093      	lsls	r3, r2
 8005684:	693a      	ldr	r2, [r7, #16]
 8005686:	4313      	orrs	r3, r2
 8005688:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800568a:	4937      	ldr	r1, [pc, #220]	; (8005768 <HAL_GPIO_Init+0x2e8>)
 800568c:	697b      	ldr	r3, [r7, #20]
 800568e:	089b      	lsrs	r3, r3, #2
 8005690:	3302      	adds	r3, #2
 8005692:	693a      	ldr	r2, [r7, #16]
 8005694:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8005698:	4b39      	ldr	r3, [pc, #228]	; (8005780 <HAL_GPIO_Init+0x300>)
 800569a:	681b      	ldr	r3, [r3, #0]
 800569c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800569e:	68fb      	ldr	r3, [r7, #12]
 80056a0:	43db      	mvns	r3, r3
 80056a2:	693a      	ldr	r2, [r7, #16]
 80056a4:	4013      	ands	r3, r2
 80056a6:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80056a8:	683b      	ldr	r3, [r7, #0]
 80056aa:	685b      	ldr	r3, [r3, #4]
 80056ac:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80056b0:	2b00      	cmp	r3, #0
 80056b2:	d003      	beq.n	80056bc <HAL_GPIO_Init+0x23c>
        {
          temp |= iocurrent;
 80056b4:	693a      	ldr	r2, [r7, #16]
 80056b6:	68fb      	ldr	r3, [r7, #12]
 80056b8:	4313      	orrs	r3, r2
 80056ba:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 80056bc:	4a30      	ldr	r2, [pc, #192]	; (8005780 <HAL_GPIO_Init+0x300>)
 80056be:	693b      	ldr	r3, [r7, #16]
 80056c0:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR1;
 80056c2:	4b2f      	ldr	r3, [pc, #188]	; (8005780 <HAL_GPIO_Init+0x300>)
 80056c4:	685b      	ldr	r3, [r3, #4]
 80056c6:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80056c8:	68fb      	ldr	r3, [r7, #12]
 80056ca:	43db      	mvns	r3, r3
 80056cc:	693a      	ldr	r2, [r7, #16]
 80056ce:	4013      	ands	r3, r2
 80056d0:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80056d2:	683b      	ldr	r3, [r7, #0]
 80056d4:	685b      	ldr	r3, [r3, #4]
 80056d6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80056da:	2b00      	cmp	r3, #0
 80056dc:	d003      	beq.n	80056e6 <HAL_GPIO_Init+0x266>
        {
          temp |= iocurrent;
 80056de:	693a      	ldr	r2, [r7, #16]
 80056e0:	68fb      	ldr	r3, [r7, #12]
 80056e2:	4313      	orrs	r3, r2
 80056e4:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 80056e6:	4a26      	ldr	r2, [pc, #152]	; (8005780 <HAL_GPIO_Init+0x300>)
 80056e8:	693b      	ldr	r3, [r7, #16]
 80056ea:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80056ec:	4b24      	ldr	r3, [pc, #144]	; (8005780 <HAL_GPIO_Init+0x300>)
 80056ee:	689b      	ldr	r3, [r3, #8]
 80056f0:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80056f2:	68fb      	ldr	r3, [r7, #12]
 80056f4:	43db      	mvns	r3, r3
 80056f6:	693a      	ldr	r2, [r7, #16]
 80056f8:	4013      	ands	r3, r2
 80056fa:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80056fc:	683b      	ldr	r3, [r7, #0]
 80056fe:	685b      	ldr	r3, [r3, #4]
 8005700:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8005704:	2b00      	cmp	r3, #0
 8005706:	d003      	beq.n	8005710 <HAL_GPIO_Init+0x290>
        {
          temp |= iocurrent;
 8005708:	693a      	ldr	r2, [r7, #16]
 800570a:	68fb      	ldr	r3, [r7, #12]
 800570c:	4313      	orrs	r3, r2
 800570e:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8005710:	4a1b      	ldr	r2, [pc, #108]	; (8005780 <HAL_GPIO_Init+0x300>)
 8005712:	693b      	ldr	r3, [r7, #16]
 8005714:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8005716:	4b1a      	ldr	r3, [pc, #104]	; (8005780 <HAL_GPIO_Init+0x300>)
 8005718:	68db      	ldr	r3, [r3, #12]
 800571a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800571c:	68fb      	ldr	r3, [r7, #12]
 800571e:	43db      	mvns	r3, r3
 8005720:	693a      	ldr	r2, [r7, #16]
 8005722:	4013      	ands	r3, r2
 8005724:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8005726:	683b      	ldr	r3, [r7, #0]
 8005728:	685b      	ldr	r3, [r3, #4]
 800572a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800572e:	2b00      	cmp	r3, #0
 8005730:	d003      	beq.n	800573a <HAL_GPIO_Init+0x2ba>
        {
          temp |= iocurrent;
 8005732:	693a      	ldr	r2, [r7, #16]
 8005734:	68fb      	ldr	r3, [r7, #12]
 8005736:	4313      	orrs	r3, r2
 8005738:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 800573a:	4a11      	ldr	r2, [pc, #68]	; (8005780 <HAL_GPIO_Init+0x300>)
 800573c:	693b      	ldr	r3, [r7, #16]
 800573e:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 8005740:	697b      	ldr	r3, [r7, #20]
 8005742:	3301      	adds	r3, #1
 8005744:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0U)
 8005746:	683b      	ldr	r3, [r7, #0]
 8005748:	681a      	ldr	r2, [r3, #0]
 800574a:	697b      	ldr	r3, [r7, #20]
 800574c:	fa22 f303 	lsr.w	r3, r2, r3
 8005750:	2b00      	cmp	r3, #0
 8005752:	f47f ae9d 	bne.w	8005490 <HAL_GPIO_Init+0x10>
  }
}
 8005756:	bf00      	nop
 8005758:	371c      	adds	r7, #28
 800575a:	46bd      	mov	sp, r7
 800575c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005760:	4770      	bx	lr
 8005762:	bf00      	nop
 8005764:	40021000 	.word	0x40021000
 8005768:	40010000 	.word	0x40010000
 800576c:	48000400 	.word	0x48000400
 8005770:	48000800 	.word	0x48000800
 8005774:	48000c00 	.word	0x48000c00
 8005778:	48001000 	.word	0x48001000
 800577c:	48001400 	.word	0x48001400
 8005780:	40010400 	.word	0x40010400

08005784 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be any combination of GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8005784:	b480      	push	{r7}
 8005786:	b085      	sub	sp, #20
 8005788:	af00      	add	r7, sp, #0
 800578a:	6078      	str	r0, [r7, #4]
 800578c:	460b      	mov	r3, r1
 800578e:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00U)
 8005790:	687b      	ldr	r3, [r7, #4]
 8005792:	691a      	ldr	r2, [r3, #16]
 8005794:	887b      	ldrh	r3, [r7, #2]
 8005796:	4013      	ands	r3, r2
 8005798:	2b00      	cmp	r3, #0
 800579a:	d002      	beq.n	80057a2 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 800579c:	2301      	movs	r3, #1
 800579e:	73fb      	strb	r3, [r7, #15]
 80057a0:	e001      	b.n	80057a6 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80057a2:	2300      	movs	r3, #0
 80057a4:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80057a6:	7bfb      	ldrb	r3, [r7, #15]
}
 80057a8:	4618      	mov	r0, r3
 80057aa:	3714      	adds	r7, #20
 80057ac:	46bd      	mov	sp, r7
 80057ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057b2:	4770      	bx	lr

080057b4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80057b4:	b480      	push	{r7}
 80057b6:	b083      	sub	sp, #12
 80057b8:	af00      	add	r7, sp, #0
 80057ba:	6078      	str	r0, [r7, #4]
 80057bc:	460b      	mov	r3, r1
 80057be:	807b      	strh	r3, [r7, #2]
 80057c0:	4613      	mov	r3, r2
 80057c2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80057c4:	787b      	ldrb	r3, [r7, #1]
 80057c6:	2b00      	cmp	r3, #0
 80057c8:	d003      	beq.n	80057d2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80057ca:	887a      	ldrh	r2, [r7, #2]
 80057cc:	687b      	ldr	r3, [r7, #4]
 80057ce:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80057d0:	e002      	b.n	80057d8 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80057d2:	887a      	ldrh	r2, [r7, #2]
 80057d4:	687b      	ldr	r3, [r7, #4]
 80057d6:	629a      	str	r2, [r3, #40]	; 0x28
}
 80057d8:	bf00      	nop
 80057da:	370c      	adds	r7, #12
 80057dc:	46bd      	mov	sp, r7
 80057de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057e2:	4770      	bx	lr

080057e4 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 80057e4:	b480      	push	{r7}
 80057e6:	b085      	sub	sp, #20
 80057e8:	af00      	add	r7, sp, #0
 80057ea:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 80057ec:	687b      	ldr	r3, [r7, #4]
 80057ee:	2b00      	cmp	r3, #0
 80057f0:	d141      	bne.n	8005876 <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 80057f2:	4b4b      	ldr	r3, [pc, #300]	; (8005920 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80057f4:	681b      	ldr	r3, [r3, #0]
 80057f6:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80057fa:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80057fe:	d131      	bne.n	8005864 <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8005800:	4b47      	ldr	r3, [pc, #284]	; (8005920 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005802:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8005806:	4a46      	ldr	r2, [pc, #280]	; (8005920 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005808:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800580c:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8005810:	4b43      	ldr	r3, [pc, #268]	; (8005920 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005812:	681b      	ldr	r3, [r3, #0]
 8005814:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8005818:	4a41      	ldr	r2, [pc, #260]	; (8005920 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800581a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800581e:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8005820:	4b40      	ldr	r3, [pc, #256]	; (8005924 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8005822:	681b      	ldr	r3, [r3, #0]
 8005824:	2232      	movs	r2, #50	; 0x32
 8005826:	fb02 f303 	mul.w	r3, r2, r3
 800582a:	4a3f      	ldr	r2, [pc, #252]	; (8005928 <HAL_PWREx_ControlVoltageScaling+0x144>)
 800582c:	fba2 2303 	umull	r2, r3, r2, r3
 8005830:	0c9b      	lsrs	r3, r3, #18
 8005832:	3301      	adds	r3, #1
 8005834:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8005836:	e002      	b.n	800583e <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 8005838:	68fb      	ldr	r3, [r7, #12]
 800583a:	3b01      	subs	r3, #1
 800583c:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800583e:	4b38      	ldr	r3, [pc, #224]	; (8005920 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005840:	695b      	ldr	r3, [r3, #20]
 8005842:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005846:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800584a:	d102      	bne.n	8005852 <HAL_PWREx_ControlVoltageScaling+0x6e>
 800584c:	68fb      	ldr	r3, [r7, #12]
 800584e:	2b00      	cmp	r3, #0
 8005850:	d1f2      	bne.n	8005838 <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8005852:	4b33      	ldr	r3, [pc, #204]	; (8005920 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005854:	695b      	ldr	r3, [r3, #20]
 8005856:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800585a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800585e:	d158      	bne.n	8005912 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8005860:	2303      	movs	r3, #3
 8005862:	e057      	b.n	8005914 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8005864:	4b2e      	ldr	r3, [pc, #184]	; (8005920 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005866:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800586a:	4a2d      	ldr	r2, [pc, #180]	; (8005920 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800586c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005870:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 8005874:	e04d      	b.n	8005912 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8005876:	687b      	ldr	r3, [r7, #4]
 8005878:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800587c:	d141      	bne.n	8005902 <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 800587e:	4b28      	ldr	r3, [pc, #160]	; (8005920 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005880:	681b      	ldr	r3, [r3, #0]
 8005882:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8005886:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800588a:	d131      	bne.n	80058f0 <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 800588c:	4b24      	ldr	r3, [pc, #144]	; (8005920 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800588e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8005892:	4a23      	ldr	r2, [pc, #140]	; (8005920 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005894:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005898:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 800589c:	4b20      	ldr	r3, [pc, #128]	; (8005920 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800589e:	681b      	ldr	r3, [r3, #0]
 80058a0:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80058a4:	4a1e      	ldr	r2, [pc, #120]	; (8005920 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80058a6:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80058aa:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 80058ac:	4b1d      	ldr	r3, [pc, #116]	; (8005924 <HAL_PWREx_ControlVoltageScaling+0x140>)
 80058ae:	681b      	ldr	r3, [r3, #0]
 80058b0:	2232      	movs	r2, #50	; 0x32
 80058b2:	fb02 f303 	mul.w	r3, r2, r3
 80058b6:	4a1c      	ldr	r2, [pc, #112]	; (8005928 <HAL_PWREx_ControlVoltageScaling+0x144>)
 80058b8:	fba2 2303 	umull	r2, r3, r2, r3
 80058bc:	0c9b      	lsrs	r3, r3, #18
 80058be:	3301      	adds	r3, #1
 80058c0:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80058c2:	e002      	b.n	80058ca <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 80058c4:	68fb      	ldr	r3, [r7, #12]
 80058c6:	3b01      	subs	r3, #1
 80058c8:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80058ca:	4b15      	ldr	r3, [pc, #84]	; (8005920 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80058cc:	695b      	ldr	r3, [r3, #20]
 80058ce:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80058d2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80058d6:	d102      	bne.n	80058de <HAL_PWREx_ControlVoltageScaling+0xfa>
 80058d8:	68fb      	ldr	r3, [r7, #12]
 80058da:	2b00      	cmp	r3, #0
 80058dc:	d1f2      	bne.n	80058c4 <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80058de:	4b10      	ldr	r3, [pc, #64]	; (8005920 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80058e0:	695b      	ldr	r3, [r3, #20]
 80058e2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80058e6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80058ea:	d112      	bne.n	8005912 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 80058ec:	2303      	movs	r3, #3
 80058ee:	e011      	b.n	8005914 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80058f0:	4b0b      	ldr	r3, [pc, #44]	; (8005920 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80058f2:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80058f6:	4a0a      	ldr	r2, [pc, #40]	; (8005920 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80058f8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80058fc:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 8005900:	e007      	b.n	8005912 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8005902:	4b07      	ldr	r3, [pc, #28]	; (8005920 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005904:	681b      	ldr	r3, [r3, #0]
 8005906:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 800590a:	4a05      	ldr	r2, [pc, #20]	; (8005920 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800590c:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8005910:	6013      	str	r3, [r2, #0]
    /* No need to wait for VOSF to be cleared for this transition */
    /* PWR_CR5_R1MODE bit setting has no effect in Range 2        */
  }

  return HAL_OK;
 8005912:	2300      	movs	r3, #0
}
 8005914:	4618      	mov	r0, r3
 8005916:	3714      	adds	r7, #20
 8005918:	46bd      	mov	sp, r7
 800591a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800591e:	4770      	bx	lr
 8005920:	40007000 	.word	0x40007000
 8005924:	20000010 	.word	0x20000010
 8005928:	431bde83 	.word	0x431bde83

0800592c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800592c:	b580      	push	{r7, lr}
 800592e:	b088      	sub	sp, #32
 8005930:	af00      	add	r7, sp, #0
 8005932:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8005934:	687b      	ldr	r3, [r7, #4]
 8005936:	2b00      	cmp	r3, #0
 8005938:	d101      	bne.n	800593e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800593a:	2301      	movs	r3, #1
 800593c:	e308      	b.n	8005f50 <HAL_RCC_OscConfig+0x624>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800593e:	687b      	ldr	r3, [r7, #4]
 8005940:	681b      	ldr	r3, [r3, #0]
 8005942:	f003 0301 	and.w	r3, r3, #1
 8005946:	2b00      	cmp	r3, #0
 8005948:	d075      	beq.n	8005a36 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800594a:	4ba3      	ldr	r3, [pc, #652]	; (8005bd8 <HAL_RCC_OscConfig+0x2ac>)
 800594c:	689b      	ldr	r3, [r3, #8]
 800594e:	f003 030c 	and.w	r3, r3, #12
 8005952:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8005954:	4ba0      	ldr	r3, [pc, #640]	; (8005bd8 <HAL_RCC_OscConfig+0x2ac>)
 8005956:	68db      	ldr	r3, [r3, #12]
 8005958:	f003 0303 	and.w	r3, r3, #3
 800595c:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 800595e:	69bb      	ldr	r3, [r7, #24]
 8005960:	2b0c      	cmp	r3, #12
 8005962:	d102      	bne.n	800596a <HAL_RCC_OscConfig+0x3e>
 8005964:	697b      	ldr	r3, [r7, #20]
 8005966:	2b03      	cmp	r3, #3
 8005968:	d002      	beq.n	8005970 <HAL_RCC_OscConfig+0x44>
 800596a:	69bb      	ldr	r3, [r7, #24]
 800596c:	2b08      	cmp	r3, #8
 800596e:	d10b      	bne.n	8005988 <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005970:	4b99      	ldr	r3, [pc, #612]	; (8005bd8 <HAL_RCC_OscConfig+0x2ac>)
 8005972:	681b      	ldr	r3, [r3, #0]
 8005974:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005978:	2b00      	cmp	r3, #0
 800597a:	d05b      	beq.n	8005a34 <HAL_RCC_OscConfig+0x108>
 800597c:	687b      	ldr	r3, [r7, #4]
 800597e:	685b      	ldr	r3, [r3, #4]
 8005980:	2b00      	cmp	r3, #0
 8005982:	d157      	bne.n	8005a34 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8005984:	2301      	movs	r3, #1
 8005986:	e2e3      	b.n	8005f50 <HAL_RCC_OscConfig+0x624>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8005988:	687b      	ldr	r3, [r7, #4]
 800598a:	685b      	ldr	r3, [r3, #4]
 800598c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005990:	d106      	bne.n	80059a0 <HAL_RCC_OscConfig+0x74>
 8005992:	4b91      	ldr	r3, [pc, #580]	; (8005bd8 <HAL_RCC_OscConfig+0x2ac>)
 8005994:	681b      	ldr	r3, [r3, #0]
 8005996:	4a90      	ldr	r2, [pc, #576]	; (8005bd8 <HAL_RCC_OscConfig+0x2ac>)
 8005998:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800599c:	6013      	str	r3, [r2, #0]
 800599e:	e01d      	b.n	80059dc <HAL_RCC_OscConfig+0xb0>
 80059a0:	687b      	ldr	r3, [r7, #4]
 80059a2:	685b      	ldr	r3, [r3, #4]
 80059a4:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80059a8:	d10c      	bne.n	80059c4 <HAL_RCC_OscConfig+0x98>
 80059aa:	4b8b      	ldr	r3, [pc, #556]	; (8005bd8 <HAL_RCC_OscConfig+0x2ac>)
 80059ac:	681b      	ldr	r3, [r3, #0]
 80059ae:	4a8a      	ldr	r2, [pc, #552]	; (8005bd8 <HAL_RCC_OscConfig+0x2ac>)
 80059b0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80059b4:	6013      	str	r3, [r2, #0]
 80059b6:	4b88      	ldr	r3, [pc, #544]	; (8005bd8 <HAL_RCC_OscConfig+0x2ac>)
 80059b8:	681b      	ldr	r3, [r3, #0]
 80059ba:	4a87      	ldr	r2, [pc, #540]	; (8005bd8 <HAL_RCC_OscConfig+0x2ac>)
 80059bc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80059c0:	6013      	str	r3, [r2, #0]
 80059c2:	e00b      	b.n	80059dc <HAL_RCC_OscConfig+0xb0>
 80059c4:	4b84      	ldr	r3, [pc, #528]	; (8005bd8 <HAL_RCC_OscConfig+0x2ac>)
 80059c6:	681b      	ldr	r3, [r3, #0]
 80059c8:	4a83      	ldr	r2, [pc, #524]	; (8005bd8 <HAL_RCC_OscConfig+0x2ac>)
 80059ca:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80059ce:	6013      	str	r3, [r2, #0]
 80059d0:	4b81      	ldr	r3, [pc, #516]	; (8005bd8 <HAL_RCC_OscConfig+0x2ac>)
 80059d2:	681b      	ldr	r3, [r3, #0]
 80059d4:	4a80      	ldr	r2, [pc, #512]	; (8005bd8 <HAL_RCC_OscConfig+0x2ac>)
 80059d6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80059da:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80059dc:	687b      	ldr	r3, [r7, #4]
 80059de:	685b      	ldr	r3, [r3, #4]
 80059e0:	2b00      	cmp	r3, #0
 80059e2:	d013      	beq.n	8005a0c <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80059e4:	f7fd f9ee 	bl	8002dc4 <HAL_GetTick>
 80059e8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80059ea:	e008      	b.n	80059fe <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80059ec:	f7fd f9ea 	bl	8002dc4 <HAL_GetTick>
 80059f0:	4602      	mov	r2, r0
 80059f2:	693b      	ldr	r3, [r7, #16]
 80059f4:	1ad3      	subs	r3, r2, r3
 80059f6:	2b64      	cmp	r3, #100	; 0x64
 80059f8:	d901      	bls.n	80059fe <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80059fa:	2303      	movs	r3, #3
 80059fc:	e2a8      	b.n	8005f50 <HAL_RCC_OscConfig+0x624>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80059fe:	4b76      	ldr	r3, [pc, #472]	; (8005bd8 <HAL_RCC_OscConfig+0x2ac>)
 8005a00:	681b      	ldr	r3, [r3, #0]
 8005a02:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005a06:	2b00      	cmp	r3, #0
 8005a08:	d0f0      	beq.n	80059ec <HAL_RCC_OscConfig+0xc0>
 8005a0a:	e014      	b.n	8005a36 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005a0c:	f7fd f9da 	bl	8002dc4 <HAL_GetTick>
 8005a10:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8005a12:	e008      	b.n	8005a26 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8005a14:	f7fd f9d6 	bl	8002dc4 <HAL_GetTick>
 8005a18:	4602      	mov	r2, r0
 8005a1a:	693b      	ldr	r3, [r7, #16]
 8005a1c:	1ad3      	subs	r3, r2, r3
 8005a1e:	2b64      	cmp	r3, #100	; 0x64
 8005a20:	d901      	bls.n	8005a26 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8005a22:	2303      	movs	r3, #3
 8005a24:	e294      	b.n	8005f50 <HAL_RCC_OscConfig+0x624>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8005a26:	4b6c      	ldr	r3, [pc, #432]	; (8005bd8 <HAL_RCC_OscConfig+0x2ac>)
 8005a28:	681b      	ldr	r3, [r3, #0]
 8005a2a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005a2e:	2b00      	cmp	r3, #0
 8005a30:	d1f0      	bne.n	8005a14 <HAL_RCC_OscConfig+0xe8>
 8005a32:	e000      	b.n	8005a36 <HAL_RCC_OscConfig+0x10a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005a34:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8005a36:	687b      	ldr	r3, [r7, #4]
 8005a38:	681b      	ldr	r3, [r3, #0]
 8005a3a:	f003 0302 	and.w	r3, r3, #2
 8005a3e:	2b00      	cmp	r3, #0
 8005a40:	d075      	beq.n	8005b2e <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8005a42:	4b65      	ldr	r3, [pc, #404]	; (8005bd8 <HAL_RCC_OscConfig+0x2ac>)
 8005a44:	689b      	ldr	r3, [r3, #8]
 8005a46:	f003 030c 	and.w	r3, r3, #12
 8005a4a:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8005a4c:	4b62      	ldr	r3, [pc, #392]	; (8005bd8 <HAL_RCC_OscConfig+0x2ac>)
 8005a4e:	68db      	ldr	r3, [r3, #12]
 8005a50:	f003 0303 	and.w	r3, r3, #3
 8005a54:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 8005a56:	69bb      	ldr	r3, [r7, #24]
 8005a58:	2b0c      	cmp	r3, #12
 8005a5a:	d102      	bne.n	8005a62 <HAL_RCC_OscConfig+0x136>
 8005a5c:	697b      	ldr	r3, [r7, #20]
 8005a5e:	2b02      	cmp	r3, #2
 8005a60:	d002      	beq.n	8005a68 <HAL_RCC_OscConfig+0x13c>
 8005a62:	69bb      	ldr	r3, [r7, #24]
 8005a64:	2b04      	cmp	r3, #4
 8005a66:	d11f      	bne.n	8005aa8 <HAL_RCC_OscConfig+0x17c>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8005a68:	4b5b      	ldr	r3, [pc, #364]	; (8005bd8 <HAL_RCC_OscConfig+0x2ac>)
 8005a6a:	681b      	ldr	r3, [r3, #0]
 8005a6c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005a70:	2b00      	cmp	r3, #0
 8005a72:	d005      	beq.n	8005a80 <HAL_RCC_OscConfig+0x154>
 8005a74:	687b      	ldr	r3, [r7, #4]
 8005a76:	68db      	ldr	r3, [r3, #12]
 8005a78:	2b00      	cmp	r3, #0
 8005a7a:	d101      	bne.n	8005a80 <HAL_RCC_OscConfig+0x154>
      {
        return HAL_ERROR;
 8005a7c:	2301      	movs	r3, #1
 8005a7e:	e267      	b.n	8005f50 <HAL_RCC_OscConfig+0x624>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005a80:	4b55      	ldr	r3, [pc, #340]	; (8005bd8 <HAL_RCC_OscConfig+0x2ac>)
 8005a82:	685b      	ldr	r3, [r3, #4]
 8005a84:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8005a88:	687b      	ldr	r3, [r7, #4]
 8005a8a:	691b      	ldr	r3, [r3, #16]
 8005a8c:	061b      	lsls	r3, r3, #24
 8005a8e:	4952      	ldr	r1, [pc, #328]	; (8005bd8 <HAL_RCC_OscConfig+0x2ac>)
 8005a90:	4313      	orrs	r3, r2
 8005a92:	604b      	str	r3, [r1, #4]

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8005a94:	4b51      	ldr	r3, [pc, #324]	; (8005bdc <HAL_RCC_OscConfig+0x2b0>)
 8005a96:	681b      	ldr	r3, [r3, #0]
 8005a98:	4618      	mov	r0, r3
 8005a9a:	f7fd f947 	bl	8002d2c <HAL_InitTick>
 8005a9e:	4603      	mov	r3, r0
 8005aa0:	2b00      	cmp	r3, #0
 8005aa2:	d043      	beq.n	8005b2c <HAL_RCC_OscConfig+0x200>
        {
          return HAL_ERROR;
 8005aa4:	2301      	movs	r3, #1
 8005aa6:	e253      	b.n	8005f50 <HAL_RCC_OscConfig+0x624>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8005aa8:	687b      	ldr	r3, [r7, #4]
 8005aaa:	68db      	ldr	r3, [r3, #12]
 8005aac:	2b00      	cmp	r3, #0
 8005aae:	d023      	beq.n	8005af8 <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8005ab0:	4b49      	ldr	r3, [pc, #292]	; (8005bd8 <HAL_RCC_OscConfig+0x2ac>)
 8005ab2:	681b      	ldr	r3, [r3, #0]
 8005ab4:	4a48      	ldr	r2, [pc, #288]	; (8005bd8 <HAL_RCC_OscConfig+0x2ac>)
 8005ab6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005aba:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005abc:	f7fd f982 	bl	8002dc4 <HAL_GetTick>
 8005ac0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8005ac2:	e008      	b.n	8005ad6 <HAL_RCC_OscConfig+0x1aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8005ac4:	f7fd f97e 	bl	8002dc4 <HAL_GetTick>
 8005ac8:	4602      	mov	r2, r0
 8005aca:	693b      	ldr	r3, [r7, #16]
 8005acc:	1ad3      	subs	r3, r2, r3
 8005ace:	2b02      	cmp	r3, #2
 8005ad0:	d901      	bls.n	8005ad6 <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 8005ad2:	2303      	movs	r3, #3
 8005ad4:	e23c      	b.n	8005f50 <HAL_RCC_OscConfig+0x624>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8005ad6:	4b40      	ldr	r3, [pc, #256]	; (8005bd8 <HAL_RCC_OscConfig+0x2ac>)
 8005ad8:	681b      	ldr	r3, [r3, #0]
 8005ada:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005ade:	2b00      	cmp	r3, #0
 8005ae0:	d0f0      	beq.n	8005ac4 <HAL_RCC_OscConfig+0x198>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005ae2:	4b3d      	ldr	r3, [pc, #244]	; (8005bd8 <HAL_RCC_OscConfig+0x2ac>)
 8005ae4:	685b      	ldr	r3, [r3, #4]
 8005ae6:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8005aea:	687b      	ldr	r3, [r7, #4]
 8005aec:	691b      	ldr	r3, [r3, #16]
 8005aee:	061b      	lsls	r3, r3, #24
 8005af0:	4939      	ldr	r1, [pc, #228]	; (8005bd8 <HAL_RCC_OscConfig+0x2ac>)
 8005af2:	4313      	orrs	r3, r2
 8005af4:	604b      	str	r3, [r1, #4]
 8005af6:	e01a      	b.n	8005b2e <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8005af8:	4b37      	ldr	r3, [pc, #220]	; (8005bd8 <HAL_RCC_OscConfig+0x2ac>)
 8005afa:	681b      	ldr	r3, [r3, #0]
 8005afc:	4a36      	ldr	r2, [pc, #216]	; (8005bd8 <HAL_RCC_OscConfig+0x2ac>)
 8005afe:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005b02:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005b04:	f7fd f95e 	bl	8002dc4 <HAL_GetTick>
 8005b08:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8005b0a:	e008      	b.n	8005b1e <HAL_RCC_OscConfig+0x1f2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8005b0c:	f7fd f95a 	bl	8002dc4 <HAL_GetTick>
 8005b10:	4602      	mov	r2, r0
 8005b12:	693b      	ldr	r3, [r7, #16]
 8005b14:	1ad3      	subs	r3, r2, r3
 8005b16:	2b02      	cmp	r3, #2
 8005b18:	d901      	bls.n	8005b1e <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 8005b1a:	2303      	movs	r3, #3
 8005b1c:	e218      	b.n	8005f50 <HAL_RCC_OscConfig+0x624>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8005b1e:	4b2e      	ldr	r3, [pc, #184]	; (8005bd8 <HAL_RCC_OscConfig+0x2ac>)
 8005b20:	681b      	ldr	r3, [r3, #0]
 8005b22:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005b26:	2b00      	cmp	r3, #0
 8005b28:	d1f0      	bne.n	8005b0c <HAL_RCC_OscConfig+0x1e0>
 8005b2a:	e000      	b.n	8005b2e <HAL_RCC_OscConfig+0x202>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8005b2c:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8005b2e:	687b      	ldr	r3, [r7, #4]
 8005b30:	681b      	ldr	r3, [r3, #0]
 8005b32:	f003 0308 	and.w	r3, r3, #8
 8005b36:	2b00      	cmp	r3, #0
 8005b38:	d03c      	beq.n	8005bb4 <HAL_RCC_OscConfig+0x288>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8005b3a:	687b      	ldr	r3, [r7, #4]
 8005b3c:	695b      	ldr	r3, [r3, #20]
 8005b3e:	2b00      	cmp	r3, #0
 8005b40:	d01c      	beq.n	8005b7c <HAL_RCC_OscConfig+0x250>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8005b42:	4b25      	ldr	r3, [pc, #148]	; (8005bd8 <HAL_RCC_OscConfig+0x2ac>)
 8005b44:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8005b48:	4a23      	ldr	r2, [pc, #140]	; (8005bd8 <HAL_RCC_OscConfig+0x2ac>)
 8005b4a:	f043 0301 	orr.w	r3, r3, #1
 8005b4e:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005b52:	f7fd f937 	bl	8002dc4 <HAL_GetTick>
 8005b56:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8005b58:	e008      	b.n	8005b6c <HAL_RCC_OscConfig+0x240>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8005b5a:	f7fd f933 	bl	8002dc4 <HAL_GetTick>
 8005b5e:	4602      	mov	r2, r0
 8005b60:	693b      	ldr	r3, [r7, #16]
 8005b62:	1ad3      	subs	r3, r2, r3
 8005b64:	2b02      	cmp	r3, #2
 8005b66:	d901      	bls.n	8005b6c <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8005b68:	2303      	movs	r3, #3
 8005b6a:	e1f1      	b.n	8005f50 <HAL_RCC_OscConfig+0x624>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8005b6c:	4b1a      	ldr	r3, [pc, #104]	; (8005bd8 <HAL_RCC_OscConfig+0x2ac>)
 8005b6e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8005b72:	f003 0302 	and.w	r3, r3, #2
 8005b76:	2b00      	cmp	r3, #0
 8005b78:	d0ef      	beq.n	8005b5a <HAL_RCC_OscConfig+0x22e>
 8005b7a:	e01b      	b.n	8005bb4 <HAL_RCC_OscConfig+0x288>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8005b7c:	4b16      	ldr	r3, [pc, #88]	; (8005bd8 <HAL_RCC_OscConfig+0x2ac>)
 8005b7e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8005b82:	4a15      	ldr	r2, [pc, #84]	; (8005bd8 <HAL_RCC_OscConfig+0x2ac>)
 8005b84:	f023 0301 	bic.w	r3, r3, #1
 8005b88:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005b8c:	f7fd f91a 	bl	8002dc4 <HAL_GetTick>
 8005b90:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8005b92:	e008      	b.n	8005ba6 <HAL_RCC_OscConfig+0x27a>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8005b94:	f7fd f916 	bl	8002dc4 <HAL_GetTick>
 8005b98:	4602      	mov	r2, r0
 8005b9a:	693b      	ldr	r3, [r7, #16]
 8005b9c:	1ad3      	subs	r3, r2, r3
 8005b9e:	2b02      	cmp	r3, #2
 8005ba0:	d901      	bls.n	8005ba6 <HAL_RCC_OscConfig+0x27a>
        {
          return HAL_TIMEOUT;
 8005ba2:	2303      	movs	r3, #3
 8005ba4:	e1d4      	b.n	8005f50 <HAL_RCC_OscConfig+0x624>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8005ba6:	4b0c      	ldr	r3, [pc, #48]	; (8005bd8 <HAL_RCC_OscConfig+0x2ac>)
 8005ba8:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8005bac:	f003 0302 	and.w	r3, r3, #2
 8005bb0:	2b00      	cmp	r3, #0
 8005bb2:	d1ef      	bne.n	8005b94 <HAL_RCC_OscConfig+0x268>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8005bb4:	687b      	ldr	r3, [r7, #4]
 8005bb6:	681b      	ldr	r3, [r3, #0]
 8005bb8:	f003 0304 	and.w	r3, r3, #4
 8005bbc:	2b00      	cmp	r3, #0
 8005bbe:	f000 80ab 	beq.w	8005d18 <HAL_RCC_OscConfig+0x3ec>
  {
    FlagStatus       pwrclkchanged = RESET;
 8005bc2:	2300      	movs	r3, #0
 8005bc4:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain if necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8005bc6:	4b04      	ldr	r3, [pc, #16]	; (8005bd8 <HAL_RCC_OscConfig+0x2ac>)
 8005bc8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005bca:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005bce:	2b00      	cmp	r3, #0
 8005bd0:	d106      	bne.n	8005be0 <HAL_RCC_OscConfig+0x2b4>
 8005bd2:	2301      	movs	r3, #1
 8005bd4:	e005      	b.n	8005be2 <HAL_RCC_OscConfig+0x2b6>
 8005bd6:	bf00      	nop
 8005bd8:	40021000 	.word	0x40021000
 8005bdc:	20000014 	.word	0x20000014
 8005be0:	2300      	movs	r3, #0
 8005be2:	2b00      	cmp	r3, #0
 8005be4:	d00d      	beq.n	8005c02 <HAL_RCC_OscConfig+0x2d6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8005be6:	4baf      	ldr	r3, [pc, #700]	; (8005ea4 <HAL_RCC_OscConfig+0x578>)
 8005be8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005bea:	4aae      	ldr	r2, [pc, #696]	; (8005ea4 <HAL_RCC_OscConfig+0x578>)
 8005bec:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005bf0:	6593      	str	r3, [r2, #88]	; 0x58
 8005bf2:	4bac      	ldr	r3, [pc, #688]	; (8005ea4 <HAL_RCC_OscConfig+0x578>)
 8005bf4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005bf6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005bfa:	60fb      	str	r3, [r7, #12]
 8005bfc:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8005bfe:	2301      	movs	r3, #1
 8005c00:	77fb      	strb	r3, [r7, #31]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8005c02:	4ba9      	ldr	r3, [pc, #676]	; (8005ea8 <HAL_RCC_OscConfig+0x57c>)
 8005c04:	681b      	ldr	r3, [r3, #0]
 8005c06:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005c0a:	2b00      	cmp	r3, #0
 8005c0c:	d118      	bne.n	8005c40 <HAL_RCC_OscConfig+0x314>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8005c0e:	4ba6      	ldr	r3, [pc, #664]	; (8005ea8 <HAL_RCC_OscConfig+0x57c>)
 8005c10:	681b      	ldr	r3, [r3, #0]
 8005c12:	4aa5      	ldr	r2, [pc, #660]	; (8005ea8 <HAL_RCC_OscConfig+0x57c>)
 8005c14:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005c18:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8005c1a:	f7fd f8d3 	bl	8002dc4 <HAL_GetTick>
 8005c1e:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8005c20:	e008      	b.n	8005c34 <HAL_RCC_OscConfig+0x308>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005c22:	f7fd f8cf 	bl	8002dc4 <HAL_GetTick>
 8005c26:	4602      	mov	r2, r0
 8005c28:	693b      	ldr	r3, [r7, #16]
 8005c2a:	1ad3      	subs	r3, r2, r3
 8005c2c:	2b02      	cmp	r3, #2
 8005c2e:	d901      	bls.n	8005c34 <HAL_RCC_OscConfig+0x308>
        {
          return HAL_TIMEOUT;
 8005c30:	2303      	movs	r3, #3
 8005c32:	e18d      	b.n	8005f50 <HAL_RCC_OscConfig+0x624>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8005c34:	4b9c      	ldr	r3, [pc, #624]	; (8005ea8 <HAL_RCC_OscConfig+0x57c>)
 8005c36:	681b      	ldr	r3, [r3, #0]
 8005c38:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005c3c:	2b00      	cmp	r3, #0
 8005c3e:	d0f0      	beq.n	8005c22 <HAL_RCC_OscConfig+0x2f6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8005c40:	687b      	ldr	r3, [r7, #4]
 8005c42:	689b      	ldr	r3, [r3, #8]
 8005c44:	2b01      	cmp	r3, #1
 8005c46:	d108      	bne.n	8005c5a <HAL_RCC_OscConfig+0x32e>
 8005c48:	4b96      	ldr	r3, [pc, #600]	; (8005ea4 <HAL_RCC_OscConfig+0x578>)
 8005c4a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005c4e:	4a95      	ldr	r2, [pc, #596]	; (8005ea4 <HAL_RCC_OscConfig+0x578>)
 8005c50:	f043 0301 	orr.w	r3, r3, #1
 8005c54:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8005c58:	e024      	b.n	8005ca4 <HAL_RCC_OscConfig+0x378>
 8005c5a:	687b      	ldr	r3, [r7, #4]
 8005c5c:	689b      	ldr	r3, [r3, #8]
 8005c5e:	2b05      	cmp	r3, #5
 8005c60:	d110      	bne.n	8005c84 <HAL_RCC_OscConfig+0x358>
 8005c62:	4b90      	ldr	r3, [pc, #576]	; (8005ea4 <HAL_RCC_OscConfig+0x578>)
 8005c64:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005c68:	4a8e      	ldr	r2, [pc, #568]	; (8005ea4 <HAL_RCC_OscConfig+0x578>)
 8005c6a:	f043 0304 	orr.w	r3, r3, #4
 8005c6e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8005c72:	4b8c      	ldr	r3, [pc, #560]	; (8005ea4 <HAL_RCC_OscConfig+0x578>)
 8005c74:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005c78:	4a8a      	ldr	r2, [pc, #552]	; (8005ea4 <HAL_RCC_OscConfig+0x578>)
 8005c7a:	f043 0301 	orr.w	r3, r3, #1
 8005c7e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8005c82:	e00f      	b.n	8005ca4 <HAL_RCC_OscConfig+0x378>
 8005c84:	4b87      	ldr	r3, [pc, #540]	; (8005ea4 <HAL_RCC_OscConfig+0x578>)
 8005c86:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005c8a:	4a86      	ldr	r2, [pc, #536]	; (8005ea4 <HAL_RCC_OscConfig+0x578>)
 8005c8c:	f023 0301 	bic.w	r3, r3, #1
 8005c90:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8005c94:	4b83      	ldr	r3, [pc, #524]	; (8005ea4 <HAL_RCC_OscConfig+0x578>)
 8005c96:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005c9a:	4a82      	ldr	r2, [pc, #520]	; (8005ea4 <HAL_RCC_OscConfig+0x578>)
 8005c9c:	f023 0304 	bic.w	r3, r3, #4
 8005ca0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8005ca4:	687b      	ldr	r3, [r7, #4]
 8005ca6:	689b      	ldr	r3, [r3, #8]
 8005ca8:	2b00      	cmp	r3, #0
 8005caa:	d016      	beq.n	8005cda <HAL_RCC_OscConfig+0x3ae>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005cac:	f7fd f88a 	bl	8002dc4 <HAL_GetTick>
 8005cb0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8005cb2:	e00a      	b.n	8005cca <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005cb4:	f7fd f886 	bl	8002dc4 <HAL_GetTick>
 8005cb8:	4602      	mov	r2, r0
 8005cba:	693b      	ldr	r3, [r7, #16]
 8005cbc:	1ad3      	subs	r3, r2, r3
 8005cbe:	f241 3288 	movw	r2, #5000	; 0x1388
 8005cc2:	4293      	cmp	r3, r2
 8005cc4:	d901      	bls.n	8005cca <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 8005cc6:	2303      	movs	r3, #3
 8005cc8:	e142      	b.n	8005f50 <HAL_RCC_OscConfig+0x624>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8005cca:	4b76      	ldr	r3, [pc, #472]	; (8005ea4 <HAL_RCC_OscConfig+0x578>)
 8005ccc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005cd0:	f003 0302 	and.w	r3, r3, #2
 8005cd4:	2b00      	cmp	r3, #0
 8005cd6:	d0ed      	beq.n	8005cb4 <HAL_RCC_OscConfig+0x388>
 8005cd8:	e015      	b.n	8005d06 <HAL_RCC_OscConfig+0x3da>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005cda:	f7fd f873 	bl	8002dc4 <HAL_GetTick>
 8005cde:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8005ce0:	e00a      	b.n	8005cf8 <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005ce2:	f7fd f86f 	bl	8002dc4 <HAL_GetTick>
 8005ce6:	4602      	mov	r2, r0
 8005ce8:	693b      	ldr	r3, [r7, #16]
 8005cea:	1ad3      	subs	r3, r2, r3
 8005cec:	f241 3288 	movw	r2, #5000	; 0x1388
 8005cf0:	4293      	cmp	r3, r2
 8005cf2:	d901      	bls.n	8005cf8 <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 8005cf4:	2303      	movs	r3, #3
 8005cf6:	e12b      	b.n	8005f50 <HAL_RCC_OscConfig+0x624>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8005cf8:	4b6a      	ldr	r3, [pc, #424]	; (8005ea4 <HAL_RCC_OscConfig+0x578>)
 8005cfa:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005cfe:	f003 0302 	and.w	r3, r3, #2
 8005d02:	2b00      	cmp	r3, #0
 8005d04:	d1ed      	bne.n	8005ce2 <HAL_RCC_OscConfig+0x3b6>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8005d06:	7ffb      	ldrb	r3, [r7, #31]
 8005d08:	2b01      	cmp	r3, #1
 8005d0a:	d105      	bne.n	8005d18 <HAL_RCC_OscConfig+0x3ec>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005d0c:	4b65      	ldr	r3, [pc, #404]	; (8005ea4 <HAL_RCC_OscConfig+0x578>)
 8005d0e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005d10:	4a64      	ldr	r2, [pc, #400]	; (8005ea4 <HAL_RCC_OscConfig+0x578>)
 8005d12:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005d16:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8005d18:	687b      	ldr	r3, [r7, #4]
 8005d1a:	681b      	ldr	r3, [r3, #0]
 8005d1c:	f003 0320 	and.w	r3, r3, #32
 8005d20:	2b00      	cmp	r3, #0
 8005d22:	d03c      	beq.n	8005d9e <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8005d24:	687b      	ldr	r3, [r7, #4]
 8005d26:	699b      	ldr	r3, [r3, #24]
 8005d28:	2b00      	cmp	r3, #0
 8005d2a:	d01c      	beq.n	8005d66 <HAL_RCC_OscConfig+0x43a>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8005d2c:	4b5d      	ldr	r3, [pc, #372]	; (8005ea4 <HAL_RCC_OscConfig+0x578>)
 8005d2e:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8005d32:	4a5c      	ldr	r2, [pc, #368]	; (8005ea4 <HAL_RCC_OscConfig+0x578>)
 8005d34:	f043 0301 	orr.w	r3, r3, #1
 8005d38:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005d3c:	f7fd f842 	bl	8002dc4 <HAL_GetTick>
 8005d40:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8005d42:	e008      	b.n	8005d56 <HAL_RCC_OscConfig+0x42a>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8005d44:	f7fd f83e 	bl	8002dc4 <HAL_GetTick>
 8005d48:	4602      	mov	r2, r0
 8005d4a:	693b      	ldr	r3, [r7, #16]
 8005d4c:	1ad3      	subs	r3, r2, r3
 8005d4e:	2b02      	cmp	r3, #2
 8005d50:	d901      	bls.n	8005d56 <HAL_RCC_OscConfig+0x42a>
        {
          return HAL_TIMEOUT;
 8005d52:	2303      	movs	r3, #3
 8005d54:	e0fc      	b.n	8005f50 <HAL_RCC_OscConfig+0x624>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8005d56:	4b53      	ldr	r3, [pc, #332]	; (8005ea4 <HAL_RCC_OscConfig+0x578>)
 8005d58:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8005d5c:	f003 0302 	and.w	r3, r3, #2
 8005d60:	2b00      	cmp	r3, #0
 8005d62:	d0ef      	beq.n	8005d44 <HAL_RCC_OscConfig+0x418>
 8005d64:	e01b      	b.n	8005d9e <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8005d66:	4b4f      	ldr	r3, [pc, #316]	; (8005ea4 <HAL_RCC_OscConfig+0x578>)
 8005d68:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8005d6c:	4a4d      	ldr	r2, [pc, #308]	; (8005ea4 <HAL_RCC_OscConfig+0x578>)
 8005d6e:	f023 0301 	bic.w	r3, r3, #1
 8005d72:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005d76:	f7fd f825 	bl	8002dc4 <HAL_GetTick>
 8005d7a:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8005d7c:	e008      	b.n	8005d90 <HAL_RCC_OscConfig+0x464>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8005d7e:	f7fd f821 	bl	8002dc4 <HAL_GetTick>
 8005d82:	4602      	mov	r2, r0
 8005d84:	693b      	ldr	r3, [r7, #16]
 8005d86:	1ad3      	subs	r3, r2, r3
 8005d88:	2b02      	cmp	r3, #2
 8005d8a:	d901      	bls.n	8005d90 <HAL_RCC_OscConfig+0x464>
        {
          return HAL_TIMEOUT;
 8005d8c:	2303      	movs	r3, #3
 8005d8e:	e0df      	b.n	8005f50 <HAL_RCC_OscConfig+0x624>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8005d90:	4b44      	ldr	r3, [pc, #272]	; (8005ea4 <HAL_RCC_OscConfig+0x578>)
 8005d92:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8005d96:	f003 0302 	and.w	r3, r3, #2
 8005d9a:	2b00      	cmp	r3, #0
 8005d9c:	d1ef      	bne.n	8005d7e <HAL_RCC_OscConfig+0x452>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8005d9e:	687b      	ldr	r3, [r7, #4]
 8005da0:	69db      	ldr	r3, [r3, #28]
 8005da2:	2b00      	cmp	r3, #0
 8005da4:	f000 80d3 	beq.w	8005f4e <HAL_RCC_OscConfig+0x622>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8005da8:	4b3e      	ldr	r3, [pc, #248]	; (8005ea4 <HAL_RCC_OscConfig+0x578>)
 8005daa:	689b      	ldr	r3, [r3, #8]
 8005dac:	f003 030c 	and.w	r3, r3, #12
 8005db0:	2b0c      	cmp	r3, #12
 8005db2:	f000 808d 	beq.w	8005ed0 <HAL_RCC_OscConfig+0x5a4>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8005db6:	687b      	ldr	r3, [r7, #4]
 8005db8:	69db      	ldr	r3, [r3, #28]
 8005dba:	2b02      	cmp	r3, #2
 8005dbc:	d15a      	bne.n	8005e74 <HAL_RCC_OscConfig+0x548>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005dbe:	4b39      	ldr	r3, [pc, #228]	; (8005ea4 <HAL_RCC_OscConfig+0x578>)
 8005dc0:	681b      	ldr	r3, [r3, #0]
 8005dc2:	4a38      	ldr	r2, [pc, #224]	; (8005ea4 <HAL_RCC_OscConfig+0x578>)
 8005dc4:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8005dc8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005dca:	f7fc fffb 	bl	8002dc4 <HAL_GetTick>
 8005dce:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8005dd0:	e008      	b.n	8005de4 <HAL_RCC_OscConfig+0x4b8>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005dd2:	f7fc fff7 	bl	8002dc4 <HAL_GetTick>
 8005dd6:	4602      	mov	r2, r0
 8005dd8:	693b      	ldr	r3, [r7, #16]
 8005dda:	1ad3      	subs	r3, r2, r3
 8005ddc:	2b02      	cmp	r3, #2
 8005dde:	d901      	bls.n	8005de4 <HAL_RCC_OscConfig+0x4b8>
          {
            return HAL_TIMEOUT;
 8005de0:	2303      	movs	r3, #3
 8005de2:	e0b5      	b.n	8005f50 <HAL_RCC_OscConfig+0x624>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8005de4:	4b2f      	ldr	r3, [pc, #188]	; (8005ea4 <HAL_RCC_OscConfig+0x578>)
 8005de6:	681b      	ldr	r3, [r3, #0]
 8005de8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005dec:	2b00      	cmp	r3, #0
 8005dee:	d1f0      	bne.n	8005dd2 <HAL_RCC_OscConfig+0x4a6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8005df0:	4b2c      	ldr	r3, [pc, #176]	; (8005ea4 <HAL_RCC_OscConfig+0x578>)
 8005df2:	68da      	ldr	r2, [r3, #12]
 8005df4:	4b2d      	ldr	r3, [pc, #180]	; (8005eac <HAL_RCC_OscConfig+0x580>)
 8005df6:	4013      	ands	r3, r2
 8005df8:	687a      	ldr	r2, [r7, #4]
 8005dfa:	6a11      	ldr	r1, [r2, #32]
 8005dfc:	687a      	ldr	r2, [r7, #4]
 8005dfe:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8005e00:	3a01      	subs	r2, #1
 8005e02:	0112      	lsls	r2, r2, #4
 8005e04:	4311      	orrs	r1, r2
 8005e06:	687a      	ldr	r2, [r7, #4]
 8005e08:	6a92      	ldr	r2, [r2, #40]	; 0x28
 8005e0a:	0212      	lsls	r2, r2, #8
 8005e0c:	4311      	orrs	r1, r2
 8005e0e:	687a      	ldr	r2, [r7, #4]
 8005e10:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8005e12:	0852      	lsrs	r2, r2, #1
 8005e14:	3a01      	subs	r2, #1
 8005e16:	0552      	lsls	r2, r2, #21
 8005e18:	4311      	orrs	r1, r2
 8005e1a:	687a      	ldr	r2, [r7, #4]
 8005e1c:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8005e1e:	0852      	lsrs	r2, r2, #1
 8005e20:	3a01      	subs	r2, #1
 8005e22:	0652      	lsls	r2, r2, #25
 8005e24:	4311      	orrs	r1, r2
 8005e26:	687a      	ldr	r2, [r7, #4]
 8005e28:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8005e2a:	06d2      	lsls	r2, r2, #27
 8005e2c:	430a      	orrs	r2, r1
 8005e2e:	491d      	ldr	r1, [pc, #116]	; (8005ea4 <HAL_RCC_OscConfig+0x578>)
 8005e30:	4313      	orrs	r3, r2
 8005e32:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8005e34:	4b1b      	ldr	r3, [pc, #108]	; (8005ea4 <HAL_RCC_OscConfig+0x578>)
 8005e36:	681b      	ldr	r3, [r3, #0]
 8005e38:	4a1a      	ldr	r2, [pc, #104]	; (8005ea4 <HAL_RCC_OscConfig+0x578>)
 8005e3a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8005e3e:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8005e40:	4b18      	ldr	r3, [pc, #96]	; (8005ea4 <HAL_RCC_OscConfig+0x578>)
 8005e42:	68db      	ldr	r3, [r3, #12]
 8005e44:	4a17      	ldr	r2, [pc, #92]	; (8005ea4 <HAL_RCC_OscConfig+0x578>)
 8005e46:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8005e4a:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005e4c:	f7fc ffba 	bl	8002dc4 <HAL_GetTick>
 8005e50:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8005e52:	e008      	b.n	8005e66 <HAL_RCC_OscConfig+0x53a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005e54:	f7fc ffb6 	bl	8002dc4 <HAL_GetTick>
 8005e58:	4602      	mov	r2, r0
 8005e5a:	693b      	ldr	r3, [r7, #16]
 8005e5c:	1ad3      	subs	r3, r2, r3
 8005e5e:	2b02      	cmp	r3, #2
 8005e60:	d901      	bls.n	8005e66 <HAL_RCC_OscConfig+0x53a>
          {
            return HAL_TIMEOUT;
 8005e62:	2303      	movs	r3, #3
 8005e64:	e074      	b.n	8005f50 <HAL_RCC_OscConfig+0x624>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8005e66:	4b0f      	ldr	r3, [pc, #60]	; (8005ea4 <HAL_RCC_OscConfig+0x578>)
 8005e68:	681b      	ldr	r3, [r3, #0]
 8005e6a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005e6e:	2b00      	cmp	r3, #0
 8005e70:	d0f0      	beq.n	8005e54 <HAL_RCC_OscConfig+0x528>
 8005e72:	e06c      	b.n	8005f4e <HAL_RCC_OscConfig+0x622>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005e74:	4b0b      	ldr	r3, [pc, #44]	; (8005ea4 <HAL_RCC_OscConfig+0x578>)
 8005e76:	681b      	ldr	r3, [r3, #0]
 8005e78:	4a0a      	ldr	r2, [pc, #40]	; (8005ea4 <HAL_RCC_OscConfig+0x578>)
 8005e7a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8005e7e:	6013      	str	r3, [r2, #0]

        /* Disable all PLL outputs to save power if no PLLs on */
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 8005e80:	4b08      	ldr	r3, [pc, #32]	; (8005ea4 <HAL_RCC_OscConfig+0x578>)
 8005e82:	68db      	ldr	r3, [r3, #12]
 8005e84:	4a07      	ldr	r2, [pc, #28]	; (8005ea4 <HAL_RCC_OscConfig+0x578>)
 8005e86:	f023 0303 	bic.w	r3, r3, #3
 8005e8a:	60d3      	str	r3, [r2, #12]
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_ADCCLK);
 8005e8c:	4b05      	ldr	r3, [pc, #20]	; (8005ea4 <HAL_RCC_OscConfig+0x578>)
 8005e8e:	68db      	ldr	r3, [r3, #12]
 8005e90:	4a04      	ldr	r2, [pc, #16]	; (8005ea4 <HAL_RCC_OscConfig+0x578>)
 8005e92:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 8005e96:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005e9a:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005e9c:	f7fc ff92 	bl	8002dc4 <HAL_GetTick>
 8005ea0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8005ea2:	e00e      	b.n	8005ec2 <HAL_RCC_OscConfig+0x596>
 8005ea4:	40021000 	.word	0x40021000
 8005ea8:	40007000 	.word	0x40007000
 8005eac:	019f800c 	.word	0x019f800c
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005eb0:	f7fc ff88 	bl	8002dc4 <HAL_GetTick>
 8005eb4:	4602      	mov	r2, r0
 8005eb6:	693b      	ldr	r3, [r7, #16]
 8005eb8:	1ad3      	subs	r3, r2, r3
 8005eba:	2b02      	cmp	r3, #2
 8005ebc:	d901      	bls.n	8005ec2 <HAL_RCC_OscConfig+0x596>
          {
            return HAL_TIMEOUT;
 8005ebe:	2303      	movs	r3, #3
 8005ec0:	e046      	b.n	8005f50 <HAL_RCC_OscConfig+0x624>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8005ec2:	4b25      	ldr	r3, [pc, #148]	; (8005f58 <HAL_RCC_OscConfig+0x62c>)
 8005ec4:	681b      	ldr	r3, [r3, #0]
 8005ec6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005eca:	2b00      	cmp	r3, #0
 8005ecc:	d1f0      	bne.n	8005eb0 <HAL_RCC_OscConfig+0x584>
 8005ece:	e03e      	b.n	8005f4e <HAL_RCC_OscConfig+0x622>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8005ed0:	687b      	ldr	r3, [r7, #4]
 8005ed2:	69db      	ldr	r3, [r3, #28]
 8005ed4:	2b01      	cmp	r3, #1
 8005ed6:	d101      	bne.n	8005edc <HAL_RCC_OscConfig+0x5b0>
      {
        return HAL_ERROR;
 8005ed8:	2301      	movs	r3, #1
 8005eda:	e039      	b.n	8005f50 <HAL_RCC_OscConfig+0x624>
      }
      else
      {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp_pllckcfg = RCC->PLLCFGR;
 8005edc:	4b1e      	ldr	r3, [pc, #120]	; (8005f58 <HAL_RCC_OscConfig+0x62c>)
 8005ede:	68db      	ldr	r3, [r3, #12]
 8005ee0:	617b      	str	r3, [r7, #20]
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005ee2:	697b      	ldr	r3, [r7, #20]
 8005ee4:	f003 0203 	and.w	r2, r3, #3
 8005ee8:	687b      	ldr	r3, [r7, #4]
 8005eea:	6a1b      	ldr	r3, [r3, #32]
 8005eec:	429a      	cmp	r2, r3
 8005eee:	d12c      	bne.n	8005f4a <HAL_RCC_OscConfig+0x61e>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8005ef0:	697b      	ldr	r3, [r7, #20]
 8005ef2:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8005ef6:	687b      	ldr	r3, [r7, #4]
 8005ef8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005efa:	3b01      	subs	r3, #1
 8005efc:	011b      	lsls	r3, r3, #4
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005efe:	429a      	cmp	r2, r3
 8005f00:	d123      	bne.n	8005f4a <HAL_RCC_OscConfig+0x61e>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8005f02:	697b      	ldr	r3, [r7, #20]
 8005f04:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8005f08:	687b      	ldr	r3, [r7, #4]
 8005f0a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005f0c:	021b      	lsls	r3, r3, #8
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8005f0e:	429a      	cmp	r2, r3
 8005f10:	d11b      	bne.n	8005f4a <HAL_RCC_OscConfig+0x61e>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8005f12:	697b      	ldr	r3, [r7, #20]
 8005f14:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 8005f18:	687b      	ldr	r3, [r7, #4]
 8005f1a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005f1c:	06db      	lsls	r3, r3, #27
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8005f1e:	429a      	cmp	r2, r3
 8005f20:	d113      	bne.n	8005f4a <HAL_RCC_OscConfig+0x61e>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8005f22:	697b      	ldr	r3, [r7, #20]
 8005f24:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8005f28:	687b      	ldr	r3, [r7, #4]
 8005f2a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005f2c:	085b      	lsrs	r3, r3, #1
 8005f2e:	3b01      	subs	r3, #1
 8005f30:	055b      	lsls	r3, r3, #21
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8005f32:	429a      	cmp	r2, r3
 8005f34:	d109      	bne.n	8005f4a <HAL_RCC_OscConfig+0x61e>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8005f36:	697b      	ldr	r3, [r7, #20]
 8005f38:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8005f3c:	687b      	ldr	r3, [r7, #4]
 8005f3e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005f40:	085b      	lsrs	r3, r3, #1
 8005f42:	3b01      	subs	r3, #1
 8005f44:	065b      	lsls	r3, r3, #25
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8005f46:	429a      	cmp	r2, r3
 8005f48:	d001      	beq.n	8005f4e <HAL_RCC_OscConfig+0x622>
      {
        return HAL_ERROR;
 8005f4a:	2301      	movs	r3, #1
 8005f4c:	e000      	b.n	8005f50 <HAL_RCC_OscConfig+0x624>
      }
    }
  }
  }

  return HAL_OK;
 8005f4e:	2300      	movs	r3, #0
}
 8005f50:	4618      	mov	r0, r3
 8005f52:	3720      	adds	r7, #32
 8005f54:	46bd      	mov	sp, r7
 8005f56:	bd80      	pop	{r7, pc}
 8005f58:	40021000 	.word	0x40021000

08005f5c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8005f5c:	b580      	push	{r7, lr}
 8005f5e:	b086      	sub	sp, #24
 8005f60:	af00      	add	r7, sp, #0
 8005f62:	6078      	str	r0, [r7, #4]
 8005f64:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t pllfreq;
  uint32_t hpre = RCC_SYSCLK_DIV1;
 8005f66:	2300      	movs	r3, #0
 8005f68:	617b      	str	r3, [r7, #20]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8005f6a:	687b      	ldr	r3, [r7, #4]
 8005f6c:	2b00      	cmp	r3, #0
 8005f6e:	d101      	bne.n	8005f74 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8005f70:	2301      	movs	r3, #1
 8005f72:	e11e      	b.n	80061b2 <HAL_RCC_ClockConfig+0x256>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8005f74:	4b91      	ldr	r3, [pc, #580]	; (80061bc <HAL_RCC_ClockConfig+0x260>)
 8005f76:	681b      	ldr	r3, [r3, #0]
 8005f78:	f003 030f 	and.w	r3, r3, #15
 8005f7c:	683a      	ldr	r2, [r7, #0]
 8005f7e:	429a      	cmp	r2, r3
 8005f80:	d910      	bls.n	8005fa4 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005f82:	4b8e      	ldr	r3, [pc, #568]	; (80061bc <HAL_RCC_ClockConfig+0x260>)
 8005f84:	681b      	ldr	r3, [r3, #0]
 8005f86:	f023 020f 	bic.w	r2, r3, #15
 8005f8a:	498c      	ldr	r1, [pc, #560]	; (80061bc <HAL_RCC_ClockConfig+0x260>)
 8005f8c:	683b      	ldr	r3, [r7, #0]
 8005f8e:	4313      	orrs	r3, r2
 8005f90:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8005f92:	4b8a      	ldr	r3, [pc, #552]	; (80061bc <HAL_RCC_ClockConfig+0x260>)
 8005f94:	681b      	ldr	r3, [r3, #0]
 8005f96:	f003 030f 	and.w	r3, r3, #15
 8005f9a:	683a      	ldr	r2, [r7, #0]
 8005f9c:	429a      	cmp	r2, r3
 8005f9e:	d001      	beq.n	8005fa4 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8005fa0:	2301      	movs	r3, #1
 8005fa2:	e106      	b.n	80061b2 <HAL_RCC_ClockConfig+0x256>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8005fa4:	687b      	ldr	r3, [r7, #4]
 8005fa6:	681b      	ldr	r3, [r3, #0]
 8005fa8:	f003 0301 	and.w	r3, r3, #1
 8005fac:	2b00      	cmp	r3, #0
 8005fae:	d073      	beq.n	8006098 <HAL_RCC_ClockConfig+0x13c>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8005fb0:	687b      	ldr	r3, [r7, #4]
 8005fb2:	685b      	ldr	r3, [r3, #4]
 8005fb4:	2b03      	cmp	r3, #3
 8005fb6:	d129      	bne.n	800600c <HAL_RCC_ClockConfig+0xb0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8005fb8:	4b81      	ldr	r3, [pc, #516]	; (80061c0 <HAL_RCC_ClockConfig+0x264>)
 8005fba:	681b      	ldr	r3, [r3, #0]
 8005fbc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005fc0:	2b00      	cmp	r3, #0
 8005fc2:	d101      	bne.n	8005fc8 <HAL_RCC_ClockConfig+0x6c>
      {
        return HAL_ERROR;
 8005fc4:	2301      	movs	r3, #1
 8005fc6:	e0f4      	b.n	80061b2 <HAL_RCC_ClockConfig+0x256>
      }
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      pllfreq = RCC_GetSysClockFreqFromPLLSource();
 8005fc8:	f000 f972 	bl	80062b0 <RCC_GetSysClockFreqFromPLLSource>
 8005fcc:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
      if(pllfreq > 80000000U)
 8005fce:	693b      	ldr	r3, [r7, #16]
 8005fd0:	4a7c      	ldr	r2, [pc, #496]	; (80061c4 <HAL_RCC_ClockConfig+0x268>)
 8005fd2:	4293      	cmp	r3, r2
 8005fd4:	d93f      	bls.n	8006056 <HAL_RCC_ClockConfig+0xfa>
      {
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8005fd6:	4b7a      	ldr	r3, [pc, #488]	; (80061c0 <HAL_RCC_ClockConfig+0x264>)
 8005fd8:	689b      	ldr	r3, [r3, #8]
 8005fda:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8005fde:	2b00      	cmp	r3, #0
 8005fe0:	d009      	beq.n	8005ff6 <HAL_RCC_ClockConfig+0x9a>
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8005fe2:	687b      	ldr	r3, [r7, #4]
 8005fe4:	681b      	ldr	r3, [r3, #0]
 8005fe6:	f003 0302 	and.w	r3, r3, #2
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8005fea:	2b00      	cmp	r3, #0
 8005fec:	d033      	beq.n	8006056 <HAL_RCC_ClockConfig+0xfa>
              (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))))
 8005fee:	687b      	ldr	r3, [r7, #4]
 8005ff0:	689b      	ldr	r3, [r3, #8]
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8005ff2:	2b00      	cmp	r3, #0
 8005ff4:	d12f      	bne.n	8006056 <HAL_RCC_ClockConfig+0xfa>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8005ff6:	4b72      	ldr	r3, [pc, #456]	; (80061c0 <HAL_RCC_ClockConfig+0x264>)
 8005ff8:	689b      	ldr	r3, [r3, #8]
 8005ffa:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8005ffe:	4a70      	ldr	r2, [pc, #448]	; (80061c0 <HAL_RCC_ClockConfig+0x264>)
 8006000:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006004:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 8006006:	2380      	movs	r3, #128	; 0x80
 8006008:	617b      	str	r3, [r7, #20]
 800600a:	e024      	b.n	8006056 <HAL_RCC_ClockConfig+0xfa>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800600c:	687b      	ldr	r3, [r7, #4]
 800600e:	685b      	ldr	r3, [r3, #4]
 8006010:	2b02      	cmp	r3, #2
 8006012:	d107      	bne.n	8006024 <HAL_RCC_ClockConfig+0xc8>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8006014:	4b6a      	ldr	r3, [pc, #424]	; (80061c0 <HAL_RCC_ClockConfig+0x264>)
 8006016:	681b      	ldr	r3, [r3, #0]
 8006018:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800601c:	2b00      	cmp	r3, #0
 800601e:	d109      	bne.n	8006034 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8006020:	2301      	movs	r3, #1
 8006022:	e0c6      	b.n	80061b2 <HAL_RCC_ClockConfig+0x256>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8006024:	4b66      	ldr	r3, [pc, #408]	; (80061c0 <HAL_RCC_ClockConfig+0x264>)
 8006026:	681b      	ldr	r3, [r3, #0]
 8006028:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800602c:	2b00      	cmp	r3, #0
 800602e:	d101      	bne.n	8006034 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8006030:	2301      	movs	r3, #1
 8006032:	e0be      	b.n	80061b2 <HAL_RCC_ClockConfig+0x256>
        }
      }
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      pllfreq = HAL_RCC_GetSysClockFreq();
 8006034:	f000 f8ce 	bl	80061d4 <HAL_RCC_GetSysClockFreq>
 8006038:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
      if(pllfreq > 80000000U)
 800603a:	693b      	ldr	r3, [r7, #16]
 800603c:	4a61      	ldr	r2, [pc, #388]	; (80061c4 <HAL_RCC_ClockConfig+0x268>)
 800603e:	4293      	cmp	r3, r2
 8006040:	d909      	bls.n	8006056 <HAL_RCC_ClockConfig+0xfa>
      {
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8006042:	4b5f      	ldr	r3, [pc, #380]	; (80061c0 <HAL_RCC_ClockConfig+0x264>)
 8006044:	689b      	ldr	r3, [r3, #8]
 8006046:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800604a:	4a5d      	ldr	r2, [pc, #372]	; (80061c0 <HAL_RCC_ClockConfig+0x264>)
 800604c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006050:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 8006052:	2380      	movs	r3, #128	; 0x80
 8006054:	617b      	str	r3, [r7, #20]
      }

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8006056:	4b5a      	ldr	r3, [pc, #360]	; (80061c0 <HAL_RCC_ClockConfig+0x264>)
 8006058:	689b      	ldr	r3, [r3, #8]
 800605a:	f023 0203 	bic.w	r2, r3, #3
 800605e:	687b      	ldr	r3, [r7, #4]
 8006060:	685b      	ldr	r3, [r3, #4]
 8006062:	4957      	ldr	r1, [pc, #348]	; (80061c0 <HAL_RCC_ClockConfig+0x264>)
 8006064:	4313      	orrs	r3, r2
 8006066:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8006068:	f7fc feac 	bl	8002dc4 <HAL_GetTick>
 800606c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800606e:	e00a      	b.n	8006086 <HAL_RCC_ClockConfig+0x12a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8006070:	f7fc fea8 	bl	8002dc4 <HAL_GetTick>
 8006074:	4602      	mov	r2, r0
 8006076:	68fb      	ldr	r3, [r7, #12]
 8006078:	1ad3      	subs	r3, r2, r3
 800607a:	f241 3288 	movw	r2, #5000	; 0x1388
 800607e:	4293      	cmp	r3, r2
 8006080:	d901      	bls.n	8006086 <HAL_RCC_ClockConfig+0x12a>
      {
        return HAL_TIMEOUT;
 8006082:	2303      	movs	r3, #3
 8006084:	e095      	b.n	80061b2 <HAL_RCC_ClockConfig+0x256>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006086:	4b4e      	ldr	r3, [pc, #312]	; (80061c0 <HAL_RCC_ClockConfig+0x264>)
 8006088:	689b      	ldr	r3, [r3, #8]
 800608a:	f003 020c 	and.w	r2, r3, #12
 800608e:	687b      	ldr	r3, [r7, #4]
 8006090:	685b      	ldr	r3, [r3, #4]
 8006092:	009b      	lsls	r3, r3, #2
 8006094:	429a      	cmp	r2, r3
 8006096:	d1eb      	bne.n	8006070 <HAL_RCC_ClockConfig+0x114>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8006098:	687b      	ldr	r3, [r7, #4]
 800609a:	681b      	ldr	r3, [r3, #0]
 800609c:	f003 0302 	and.w	r3, r3, #2
 80060a0:	2b00      	cmp	r3, #0
 80060a2:	d023      	beq.n	80060ec <HAL_RCC_ClockConfig+0x190>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80060a4:	687b      	ldr	r3, [r7, #4]
 80060a6:	681b      	ldr	r3, [r3, #0]
 80060a8:	f003 0304 	and.w	r3, r3, #4
 80060ac:	2b00      	cmp	r3, #0
 80060ae:	d005      	beq.n	80060bc <HAL_RCC_ClockConfig+0x160>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80060b0:	4b43      	ldr	r3, [pc, #268]	; (80061c0 <HAL_RCC_ClockConfig+0x264>)
 80060b2:	689b      	ldr	r3, [r3, #8]
 80060b4:	4a42      	ldr	r2, [pc, #264]	; (80061c0 <HAL_RCC_ClockConfig+0x264>)
 80060b6:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 80060ba:	6093      	str	r3, [r2, #8]
    }
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80060bc:	687b      	ldr	r3, [r7, #4]
 80060be:	681b      	ldr	r3, [r3, #0]
 80060c0:	f003 0308 	and.w	r3, r3, #8
 80060c4:	2b00      	cmp	r3, #0
 80060c6:	d007      	beq.n	80060d8 <HAL_RCC_ClockConfig+0x17c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, RCC_HCLK_DIV16);
 80060c8:	4b3d      	ldr	r3, [pc, #244]	; (80061c0 <HAL_RCC_ClockConfig+0x264>)
 80060ca:	689b      	ldr	r3, [r3, #8]
 80060cc:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 80060d0:	4a3b      	ldr	r2, [pc, #236]	; (80061c0 <HAL_RCC_ClockConfig+0x264>)
 80060d2:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 80060d6:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80060d8:	4b39      	ldr	r3, [pc, #228]	; (80061c0 <HAL_RCC_ClockConfig+0x264>)
 80060da:	689b      	ldr	r3, [r3, #8]
 80060dc:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80060e0:	687b      	ldr	r3, [r7, #4]
 80060e2:	689b      	ldr	r3, [r3, #8]
 80060e4:	4936      	ldr	r1, [pc, #216]	; (80061c0 <HAL_RCC_ClockConfig+0x264>)
 80060e6:	4313      	orrs	r3, r2
 80060e8:	608b      	str	r3, [r1, #8]
 80060ea:	e008      	b.n	80060fe <HAL_RCC_ClockConfig+0x1a2>
  }
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if(hpre == RCC_SYSCLK_DIV2)
 80060ec:	697b      	ldr	r3, [r7, #20]
 80060ee:	2b80      	cmp	r3, #128	; 0x80
 80060f0:	d105      	bne.n	80060fe <HAL_RCC_ClockConfig+0x1a2>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 80060f2:	4b33      	ldr	r3, [pc, #204]	; (80061c0 <HAL_RCC_ClockConfig+0x264>)
 80060f4:	689b      	ldr	r3, [r3, #8]
 80060f6:	4a32      	ldr	r2, [pc, #200]	; (80061c0 <HAL_RCC_ClockConfig+0x264>)
 80060f8:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80060fc:	6093      	str	r3, [r2, #8]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80060fe:	4b2f      	ldr	r3, [pc, #188]	; (80061bc <HAL_RCC_ClockConfig+0x260>)
 8006100:	681b      	ldr	r3, [r3, #0]
 8006102:	f003 030f 	and.w	r3, r3, #15
 8006106:	683a      	ldr	r2, [r7, #0]
 8006108:	429a      	cmp	r2, r3
 800610a:	d21d      	bcs.n	8006148 <HAL_RCC_ClockConfig+0x1ec>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800610c:	4b2b      	ldr	r3, [pc, #172]	; (80061bc <HAL_RCC_ClockConfig+0x260>)
 800610e:	681b      	ldr	r3, [r3, #0]
 8006110:	f023 020f 	bic.w	r2, r3, #15
 8006114:	4929      	ldr	r1, [pc, #164]	; (80061bc <HAL_RCC_ClockConfig+0x260>)
 8006116:	683b      	ldr	r3, [r7, #0]
 8006118:	4313      	orrs	r3, r2
 800611a:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 800611c:	f7fc fe52 	bl	8002dc4 <HAL_GetTick>
 8006120:	60f8      	str	r0, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8006122:	e00a      	b.n	800613a <HAL_RCC_ClockConfig+0x1de>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8006124:	f7fc fe4e 	bl	8002dc4 <HAL_GetTick>
 8006128:	4602      	mov	r2, r0
 800612a:	68fb      	ldr	r3, [r7, #12]
 800612c:	1ad3      	subs	r3, r2, r3
 800612e:	f241 3288 	movw	r2, #5000	; 0x1388
 8006132:	4293      	cmp	r3, r2
 8006134:	d901      	bls.n	800613a <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_TIMEOUT;
 8006136:	2303      	movs	r3, #3
 8006138:	e03b      	b.n	80061b2 <HAL_RCC_ClockConfig+0x256>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 800613a:	4b20      	ldr	r3, [pc, #128]	; (80061bc <HAL_RCC_ClockConfig+0x260>)
 800613c:	681b      	ldr	r3, [r3, #0]
 800613e:	f003 030f 	and.w	r3, r3, #15
 8006142:	683a      	ldr	r2, [r7, #0]
 8006144:	429a      	cmp	r2, r3
 8006146:	d1ed      	bne.n	8006124 <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006148:	687b      	ldr	r3, [r7, #4]
 800614a:	681b      	ldr	r3, [r3, #0]
 800614c:	f003 0304 	and.w	r3, r3, #4
 8006150:	2b00      	cmp	r3, #0
 8006152:	d008      	beq.n	8006166 <HAL_RCC_ClockConfig+0x20a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8006154:	4b1a      	ldr	r3, [pc, #104]	; (80061c0 <HAL_RCC_ClockConfig+0x264>)
 8006156:	689b      	ldr	r3, [r3, #8]
 8006158:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800615c:	687b      	ldr	r3, [r7, #4]
 800615e:	68db      	ldr	r3, [r3, #12]
 8006160:	4917      	ldr	r1, [pc, #92]	; (80061c0 <HAL_RCC_ClockConfig+0x264>)
 8006162:	4313      	orrs	r3, r2
 8006164:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006166:	687b      	ldr	r3, [r7, #4]
 8006168:	681b      	ldr	r3, [r3, #0]
 800616a:	f003 0308 	and.w	r3, r3, #8
 800616e:	2b00      	cmp	r3, #0
 8006170:	d009      	beq.n	8006186 <HAL_RCC_ClockConfig+0x22a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8006172:	4b13      	ldr	r3, [pc, #76]	; (80061c0 <HAL_RCC_ClockConfig+0x264>)
 8006174:	689b      	ldr	r3, [r3, #8]
 8006176:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800617a:	687b      	ldr	r3, [r7, #4]
 800617c:	691b      	ldr	r3, [r3, #16]
 800617e:	00db      	lsls	r3, r3, #3
 8006180:	490f      	ldr	r1, [pc, #60]	; (80061c0 <HAL_RCC_ClockConfig+0x264>)
 8006182:	4313      	orrs	r3, r2
 8006184:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8006186:	f000 f825 	bl	80061d4 <HAL_RCC_GetSysClockFreq>
 800618a:	4601      	mov	r1, r0
 800618c:	4b0c      	ldr	r3, [pc, #48]	; (80061c0 <HAL_RCC_ClockConfig+0x264>)
 800618e:	689b      	ldr	r3, [r3, #8]
 8006190:	091b      	lsrs	r3, r3, #4
 8006192:	f003 030f 	and.w	r3, r3, #15
 8006196:	4a0c      	ldr	r2, [pc, #48]	; (80061c8 <HAL_RCC_ClockConfig+0x26c>)
 8006198:	5cd3      	ldrb	r3, [r2, r3]
 800619a:	f003 031f 	and.w	r3, r3, #31
 800619e:	fa21 f303 	lsr.w	r3, r1, r3
 80061a2:	4a0a      	ldr	r2, [pc, #40]	; (80061cc <HAL_RCC_ClockConfig+0x270>)
 80061a4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 80061a6:	4b0a      	ldr	r3, [pc, #40]	; (80061d0 <HAL_RCC_ClockConfig+0x274>)
 80061a8:	681b      	ldr	r3, [r3, #0]
 80061aa:	4618      	mov	r0, r3
 80061ac:	f7fc fdbe 	bl	8002d2c <HAL_InitTick>
 80061b0:	4603      	mov	r3, r0
}
 80061b2:	4618      	mov	r0, r3
 80061b4:	3718      	adds	r7, #24
 80061b6:	46bd      	mov	sp, r7
 80061b8:	bd80      	pop	{r7, pc}
 80061ba:	bf00      	nop
 80061bc:	40022000 	.word	0x40022000
 80061c0:	40021000 	.word	0x40021000
 80061c4:	04c4b400 	.word	0x04c4b400
 80061c8:	0800a4cc 	.word	0x0800a4cc
 80061cc:	20000010 	.word	0x20000010
 80061d0:	20000014 	.word	0x20000014

080061d4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80061d4:	b480      	push	{r7}
 80061d6:	b087      	sub	sp, #28
 80061d8:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 80061da:	4b2c      	ldr	r3, [pc, #176]	; (800628c <HAL_RCC_GetSysClockFreq+0xb8>)
 80061dc:	689b      	ldr	r3, [r3, #8]
 80061de:	f003 030c 	and.w	r3, r3, #12
 80061e2:	2b04      	cmp	r3, #4
 80061e4:	d102      	bne.n	80061ec <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 80061e6:	4b2a      	ldr	r3, [pc, #168]	; (8006290 <HAL_RCC_GetSysClockFreq+0xbc>)
 80061e8:	613b      	str	r3, [r7, #16]
 80061ea:	e047      	b.n	800627c <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 80061ec:	4b27      	ldr	r3, [pc, #156]	; (800628c <HAL_RCC_GetSysClockFreq+0xb8>)
 80061ee:	689b      	ldr	r3, [r3, #8]
 80061f0:	f003 030c 	and.w	r3, r3, #12
 80061f4:	2b08      	cmp	r3, #8
 80061f6:	d102      	bne.n	80061fe <HAL_RCC_GetSysClockFreq+0x2a>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 80061f8:	4b26      	ldr	r3, [pc, #152]	; (8006294 <HAL_RCC_GetSysClockFreq+0xc0>)
 80061fa:	613b      	str	r3, [r7, #16]
 80061fc:	e03e      	b.n	800627c <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 80061fe:	4b23      	ldr	r3, [pc, #140]	; (800628c <HAL_RCC_GetSysClockFreq+0xb8>)
 8006200:	689b      	ldr	r3, [r3, #8]
 8006202:	f003 030c 	and.w	r3, r3, #12
 8006206:	2b0c      	cmp	r3, #12
 8006208:	d136      	bne.n	8006278 <HAL_RCC_GetSysClockFreq+0xa4>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 800620a:	4b20      	ldr	r3, [pc, #128]	; (800628c <HAL_RCC_GetSysClockFreq+0xb8>)
 800620c:	68db      	ldr	r3, [r3, #12]
 800620e:	f003 0303 	and.w	r3, r3, #3
 8006212:	60fb      	str	r3, [r7, #12]
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8006214:	4b1d      	ldr	r3, [pc, #116]	; (800628c <HAL_RCC_GetSysClockFreq+0xb8>)
 8006216:	68db      	ldr	r3, [r3, #12]
 8006218:	091b      	lsrs	r3, r3, #4
 800621a:	f003 030f 	and.w	r3, r3, #15
 800621e:	3301      	adds	r3, #1
 8006220:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8006222:	68fb      	ldr	r3, [r7, #12]
 8006224:	2b03      	cmp	r3, #3
 8006226:	d10c      	bne.n	8006242 <HAL_RCC_GetSysClockFreq+0x6e>
    {
    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8006228:	4a1a      	ldr	r2, [pc, #104]	; (8006294 <HAL_RCC_GetSysClockFreq+0xc0>)
 800622a:	68bb      	ldr	r3, [r7, #8]
 800622c:	fbb2 f3f3 	udiv	r3, r2, r3
 8006230:	4a16      	ldr	r2, [pc, #88]	; (800628c <HAL_RCC_GetSysClockFreq+0xb8>)
 8006232:	68d2      	ldr	r2, [r2, #12]
 8006234:	0a12      	lsrs	r2, r2, #8
 8006236:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 800623a:	fb02 f303 	mul.w	r3, r2, r3
 800623e:	617b      	str	r3, [r7, #20]
      break;
 8006240:	e00c      	b.n	800625c <HAL_RCC_GetSysClockFreq+0x88>

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    default:
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8006242:	4a13      	ldr	r2, [pc, #76]	; (8006290 <HAL_RCC_GetSysClockFreq+0xbc>)
 8006244:	68bb      	ldr	r3, [r7, #8]
 8006246:	fbb2 f3f3 	udiv	r3, r2, r3
 800624a:	4a10      	ldr	r2, [pc, #64]	; (800628c <HAL_RCC_GetSysClockFreq+0xb8>)
 800624c:	68d2      	ldr	r2, [r2, #12]
 800624e:	0a12      	lsrs	r2, r2, #8
 8006250:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8006254:	fb02 f303 	mul.w	r3, r2, r3
 8006258:	617b      	str	r3, [r7, #20]
      break;
 800625a:	bf00      	nop
    }
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 800625c:	4b0b      	ldr	r3, [pc, #44]	; (800628c <HAL_RCC_GetSysClockFreq+0xb8>)
 800625e:	68db      	ldr	r3, [r3, #12]
 8006260:	0e5b      	lsrs	r3, r3, #25
 8006262:	f003 0303 	and.w	r3, r3, #3
 8006266:	3301      	adds	r3, #1
 8006268:	005b      	lsls	r3, r3, #1
 800626a:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco/pllr;
 800626c:	697a      	ldr	r2, [r7, #20]
 800626e:	687b      	ldr	r3, [r7, #4]
 8006270:	fbb2 f3f3 	udiv	r3, r2, r3
 8006274:	613b      	str	r3, [r7, #16]
 8006276:	e001      	b.n	800627c <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else
  {
    sysclockfreq = 0U;
 8006278:	2300      	movs	r3, #0
 800627a:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 800627c:	693b      	ldr	r3, [r7, #16]
}
 800627e:	4618      	mov	r0, r3
 8006280:	371c      	adds	r7, #28
 8006282:	46bd      	mov	sp, r7
 8006284:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006288:	4770      	bx	lr
 800628a:	bf00      	nop
 800628c:	40021000 	.word	0x40021000
 8006290:	00f42400 	.word	0x00f42400
 8006294:	007a1200 	.word	0x007a1200

08006298 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8006298:	b480      	push	{r7}
 800629a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800629c:	4b03      	ldr	r3, [pc, #12]	; (80062ac <HAL_RCC_GetHCLKFreq+0x14>)
 800629e:	681b      	ldr	r3, [r3, #0]
}
 80062a0:	4618      	mov	r0, r3
 80062a2:	46bd      	mov	sp, r7
 80062a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062a8:	4770      	bx	lr
 80062aa:	bf00      	nop
 80062ac:	20000010 	.word	0x20000010

080062b0 <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 80062b0:	b480      	push	{r7}
 80062b2:	b087      	sub	sp, #28
 80062b4:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 80062b6:	4b1e      	ldr	r3, [pc, #120]	; (8006330 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80062b8:	68db      	ldr	r3, [r3, #12]
 80062ba:	f003 0303 	and.w	r3, r3, #3
 80062be:	613b      	str	r3, [r7, #16]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80062c0:	4b1b      	ldr	r3, [pc, #108]	; (8006330 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80062c2:	68db      	ldr	r3, [r3, #12]
 80062c4:	091b      	lsrs	r3, r3, #4
 80062c6:	f003 030f 	and.w	r3, r3, #15
 80062ca:	3301      	adds	r3, #1
 80062cc:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 80062ce:	693b      	ldr	r3, [r7, #16]
 80062d0:	2b03      	cmp	r3, #3
 80062d2:	d10c      	bne.n	80062ee <RCC_GetSysClockFreqFromPLLSource+0x3e>
  {
  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80062d4:	4a17      	ldr	r2, [pc, #92]	; (8006334 <RCC_GetSysClockFreqFromPLLSource+0x84>)
 80062d6:	68fb      	ldr	r3, [r7, #12]
 80062d8:	fbb2 f3f3 	udiv	r3, r2, r3
 80062dc:	4a14      	ldr	r2, [pc, #80]	; (8006330 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80062de:	68d2      	ldr	r2, [r2, #12]
 80062e0:	0a12      	lsrs	r2, r2, #8
 80062e2:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 80062e6:	fb02 f303 	mul.w	r3, r2, r3
 80062ea:	617b      	str	r3, [r7, #20]
    break;
 80062ec:	e00c      	b.n	8006308 <RCC_GetSysClockFreqFromPLLSource+0x58>

  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
  default:
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80062ee:	4a12      	ldr	r2, [pc, #72]	; (8006338 <RCC_GetSysClockFreqFromPLLSource+0x88>)
 80062f0:	68fb      	ldr	r3, [r7, #12]
 80062f2:	fbb2 f3f3 	udiv	r3, r2, r3
 80062f6:	4a0e      	ldr	r2, [pc, #56]	; (8006330 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80062f8:	68d2      	ldr	r2, [r2, #12]
 80062fa:	0a12      	lsrs	r2, r2, #8
 80062fc:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8006300:	fb02 f303 	mul.w	r3, r2, r3
 8006304:	617b      	str	r3, [r7, #20]
    break;
 8006306:	bf00      	nop
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8006308:	4b09      	ldr	r3, [pc, #36]	; (8006330 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 800630a:	68db      	ldr	r3, [r3, #12]
 800630c:	0e5b      	lsrs	r3, r3, #25
 800630e:	f003 0303 	and.w	r3, r3, #3
 8006312:	3301      	adds	r3, #1
 8006314:	005b      	lsls	r3, r3, #1
 8006316:	60bb      	str	r3, [r7, #8]
  sysclockfreq = pllvco/pllr;
 8006318:	697a      	ldr	r2, [r7, #20]
 800631a:	68bb      	ldr	r3, [r7, #8]
 800631c:	fbb2 f3f3 	udiv	r3, r2, r3
 8006320:	607b      	str	r3, [r7, #4]

  return sysclockfreq;
 8006322:	687b      	ldr	r3, [r7, #4]
}
 8006324:	4618      	mov	r0, r3
 8006326:	371c      	adds	r7, #28
 8006328:	46bd      	mov	sp, r7
 800632a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800632e:	4770      	bx	lr
 8006330:	40021000 	.word	0x40021000
 8006334:	007a1200 	.word	0x007a1200
 8006338:	00f42400 	.word	0x00f42400

0800633c <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800633c:	b580      	push	{r7, lr}
 800633e:	b086      	sub	sp, #24
 8006340:	af00      	add	r7, sp, #0
 8006342:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8006344:	2300      	movs	r3, #0
 8006346:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8006348:	2300      	movs	r3, #0
 800634a:	74bb      	strb	r3, [r7, #18]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 800634c:	687b      	ldr	r3, [r7, #4]
 800634e:	681b      	ldr	r3, [r3, #0]
 8006350:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8006354:	2b00      	cmp	r3, #0
 8006356:	f000 8098 	beq.w	800648a <HAL_RCCEx_PeriphCLKConfig+0x14e>
  {
    FlagStatus       pwrclkchanged = RESET;
 800635a:	2300      	movs	r3, #0
 800635c:	747b      	strb	r3, [r7, #17]
    
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800635e:	4b43      	ldr	r3, [pc, #268]	; (800646c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8006360:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006362:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006366:	2b00      	cmp	r3, #0
 8006368:	d10d      	bne.n	8006386 <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800636a:	4b40      	ldr	r3, [pc, #256]	; (800646c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800636c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800636e:	4a3f      	ldr	r2, [pc, #252]	; (800646c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8006370:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006374:	6593      	str	r3, [r2, #88]	; 0x58
 8006376:	4b3d      	ldr	r3, [pc, #244]	; (800646c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8006378:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800637a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800637e:	60bb      	str	r3, [r7, #8]
 8006380:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8006382:	2301      	movs	r3, #1
 8006384:	747b      	strb	r3, [r7, #17]
    }
      
    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8006386:	4b3a      	ldr	r3, [pc, #232]	; (8006470 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8006388:	681b      	ldr	r3, [r3, #0]
 800638a:	4a39      	ldr	r2, [pc, #228]	; (8006470 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 800638c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006390:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8006392:	f7fc fd17 	bl	8002dc4 <HAL_GetTick>
 8006396:	60f8      	str	r0, [r7, #12]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8006398:	e009      	b.n	80063ae <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800639a:	f7fc fd13 	bl	8002dc4 <HAL_GetTick>
 800639e:	4602      	mov	r2, r0
 80063a0:	68fb      	ldr	r3, [r7, #12]
 80063a2:	1ad3      	subs	r3, r2, r3
 80063a4:	2b02      	cmp	r3, #2
 80063a6:	d902      	bls.n	80063ae <HAL_RCCEx_PeriphCLKConfig+0x72>
      {
        ret = HAL_TIMEOUT;
 80063a8:	2303      	movs	r3, #3
 80063aa:	74fb      	strb	r3, [r7, #19]
        break;
 80063ac:	e005      	b.n	80063ba <HAL_RCCEx_PeriphCLKConfig+0x7e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80063ae:	4b30      	ldr	r3, [pc, #192]	; (8006470 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 80063b0:	681b      	ldr	r3, [r3, #0]
 80063b2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80063b6:	2b00      	cmp	r3, #0
 80063b8:	d0ef      	beq.n	800639a <HAL_RCCEx_PeriphCLKConfig+0x5e>
      }
    }

    if(ret == HAL_OK)
 80063ba:	7cfb      	ldrb	r3, [r7, #19]
 80063bc:	2b00      	cmp	r3, #0
 80063be:	d159      	bne.n	8006474 <HAL_RCCEx_PeriphCLKConfig+0x138>
    { 
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 80063c0:	4b2a      	ldr	r3, [pc, #168]	; (800646c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80063c2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80063c6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80063ca:	617b      	str	r3, [r7, #20]
      
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 80063cc:	697b      	ldr	r3, [r7, #20]
 80063ce:	2b00      	cmp	r3, #0
 80063d0:	d01e      	beq.n	8006410 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 80063d2:	687b      	ldr	r3, [r7, #4]
 80063d4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80063d6:	697a      	ldr	r2, [r7, #20]
 80063d8:	429a      	cmp	r2, r3
 80063da:	d019      	beq.n	8006410 <HAL_RCCEx_PeriphCLKConfig+0xd4>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 80063dc:	4b23      	ldr	r3, [pc, #140]	; (800646c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80063de:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80063e2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80063e6:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 80063e8:	4b20      	ldr	r3, [pc, #128]	; (800646c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80063ea:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80063ee:	4a1f      	ldr	r2, [pc, #124]	; (800646c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80063f0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80063f4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 80063f8:	4b1c      	ldr	r3, [pc, #112]	; (800646c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80063fa:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80063fe:	4a1b      	ldr	r2, [pc, #108]	; (800646c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8006400:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006404:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8006408:	4a18      	ldr	r2, [pc, #96]	; (800646c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800640a:	697b      	ldr	r3, [r7, #20]
 800640c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8006410:	697b      	ldr	r3, [r7, #20]
 8006412:	f003 0301 	and.w	r3, r3, #1
 8006416:	2b00      	cmp	r3, #0
 8006418:	d016      	beq.n	8006448 <HAL_RCCEx_PeriphCLKConfig+0x10c>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800641a:	f7fc fcd3 	bl	8002dc4 <HAL_GetTick>
 800641e:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8006420:	e00b      	b.n	800643a <HAL_RCCEx_PeriphCLKConfig+0xfe>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006422:	f7fc fccf 	bl	8002dc4 <HAL_GetTick>
 8006426:	4602      	mov	r2, r0
 8006428:	68fb      	ldr	r3, [r7, #12]
 800642a:	1ad3      	subs	r3, r2, r3
 800642c:	f241 3288 	movw	r2, #5000	; 0x1388
 8006430:	4293      	cmp	r3, r2
 8006432:	d902      	bls.n	800643a <HAL_RCCEx_PeriphCLKConfig+0xfe>
          {
            ret = HAL_TIMEOUT;
 8006434:	2303      	movs	r3, #3
 8006436:	74fb      	strb	r3, [r7, #19]
            break;
 8006438:	e006      	b.n	8006448 <HAL_RCCEx_PeriphCLKConfig+0x10c>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800643a:	4b0c      	ldr	r3, [pc, #48]	; (800646c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800643c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006440:	f003 0302 	and.w	r3, r3, #2
 8006444:	2b00      	cmp	r3, #0
 8006446:	d0ec      	beq.n	8006422 <HAL_RCCEx_PeriphCLKConfig+0xe6>
          }
        }
      }
      
      if(ret == HAL_OK)
 8006448:	7cfb      	ldrb	r3, [r7, #19]
 800644a:	2b00      	cmp	r3, #0
 800644c:	d10b      	bne.n	8006466 <HAL_RCCEx_PeriphCLKConfig+0x12a>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800644e:	4b07      	ldr	r3, [pc, #28]	; (800646c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8006450:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006454:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8006458:	687b      	ldr	r3, [r7, #4]
 800645a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800645c:	4903      	ldr	r1, [pc, #12]	; (800646c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800645e:	4313      	orrs	r3, r2
 8006460:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8006464:	e008      	b.n	8006478 <HAL_RCCEx_PeriphCLKConfig+0x13c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8006466:	7cfb      	ldrb	r3, [r7, #19]
 8006468:	74bb      	strb	r3, [r7, #18]
 800646a:	e005      	b.n	8006478 <HAL_RCCEx_PeriphCLKConfig+0x13c>
 800646c:	40021000 	.word	0x40021000
 8006470:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006474:	7cfb      	ldrb	r3, [r7, #19]
 8006476:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8006478:	7c7b      	ldrb	r3, [r7, #17]
 800647a:	2b01      	cmp	r3, #1
 800647c:	d105      	bne.n	800648a <HAL_RCCEx_PeriphCLKConfig+0x14e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800647e:	4baf      	ldr	r3, [pc, #700]	; (800673c <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8006480:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006482:	4aae      	ldr	r2, [pc, #696]	; (800673c <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8006484:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8006488:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800648a:	687b      	ldr	r3, [r7, #4]
 800648c:	681b      	ldr	r3, [r3, #0]
 800648e:	f003 0301 	and.w	r3, r3, #1
 8006492:	2b00      	cmp	r3, #0
 8006494:	d00a      	beq.n	80064ac <HAL_RCCEx_PeriphCLKConfig+0x170>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8006496:	4ba9      	ldr	r3, [pc, #676]	; (800673c <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8006498:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800649c:	f023 0203 	bic.w	r2, r3, #3
 80064a0:	687b      	ldr	r3, [r7, #4]
 80064a2:	685b      	ldr	r3, [r3, #4]
 80064a4:	49a5      	ldr	r1, [pc, #660]	; (800673c <HAL_RCCEx_PeriphCLKConfig+0x400>)
 80064a6:	4313      	orrs	r3, r2
 80064a8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80064ac:	687b      	ldr	r3, [r7, #4]
 80064ae:	681b      	ldr	r3, [r3, #0]
 80064b0:	f003 0302 	and.w	r3, r3, #2
 80064b4:	2b00      	cmp	r3, #0
 80064b6:	d00a      	beq.n	80064ce <HAL_RCCEx_PeriphCLKConfig+0x192>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80064b8:	4ba0      	ldr	r3, [pc, #640]	; (800673c <HAL_RCCEx_PeriphCLKConfig+0x400>)
 80064ba:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80064be:	f023 020c 	bic.w	r2, r3, #12
 80064c2:	687b      	ldr	r3, [r7, #4]
 80064c4:	689b      	ldr	r3, [r3, #8]
 80064c6:	499d      	ldr	r1, [pc, #628]	; (800673c <HAL_RCCEx_PeriphCLKConfig+0x400>)
 80064c8:	4313      	orrs	r3, r2
 80064ca:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 80064ce:	687b      	ldr	r3, [r7, #4]
 80064d0:	681b      	ldr	r3, [r3, #0]
 80064d2:	f003 0304 	and.w	r3, r3, #4
 80064d6:	2b00      	cmp	r3, #0
 80064d8:	d00a      	beq.n	80064f0 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 80064da:	4b98      	ldr	r3, [pc, #608]	; (800673c <HAL_RCCEx_PeriphCLKConfig+0x400>)
 80064dc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80064e0:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 80064e4:	687b      	ldr	r3, [r7, #4]
 80064e6:	68db      	ldr	r3, [r3, #12]
 80064e8:	4994      	ldr	r1, [pc, #592]	; (800673c <HAL_RCCEx_PeriphCLKConfig+0x400>)
 80064ea:	4313      	orrs	r3, r2
 80064ec:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(UART4)
  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 80064f0:	687b      	ldr	r3, [r7, #4]
 80064f2:	681b      	ldr	r3, [r3, #0]
 80064f4:	f003 0308 	and.w	r3, r3, #8
 80064f8:	2b00      	cmp	r3, #0
 80064fa:	d00a      	beq.n	8006512 <HAL_RCCEx_PeriphCLKConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 80064fc:	4b8f      	ldr	r3, [pc, #572]	; (800673c <HAL_RCCEx_PeriphCLKConfig+0x400>)
 80064fe:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006502:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8006506:	687b      	ldr	r3, [r7, #4]
 8006508:	691b      	ldr	r3, [r3, #16]
 800650a:	498c      	ldr	r1, [pc, #560]	; (800673c <HAL_RCCEx_PeriphCLKConfig+0x400>)
 800650c:	4313      	orrs	r3, r2
 800650e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8006512:	687b      	ldr	r3, [r7, #4]
 8006514:	681b      	ldr	r3, [r3, #0]
 8006516:	f003 0310 	and.w	r3, r3, #16
 800651a:	2b00      	cmp	r3, #0
 800651c:	d00a      	beq.n	8006534 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 800651e:	4b87      	ldr	r3, [pc, #540]	; (800673c <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8006520:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006524:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8006528:	687b      	ldr	r3, [r7, #4]
 800652a:	695b      	ldr	r3, [r3, #20]
 800652c:	4983      	ldr	r1, [pc, #524]	; (800673c <HAL_RCCEx_PeriphCLKConfig+0x400>)
 800652e:	4313      	orrs	r3, r2
 8006530:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8006534:	687b      	ldr	r3, [r7, #4]
 8006536:	681b      	ldr	r3, [r3, #0]
 8006538:	f003 0320 	and.w	r3, r3, #32
 800653c:	2b00      	cmp	r3, #0
 800653e:	d00a      	beq.n	8006556 <HAL_RCCEx_PeriphCLKConfig+0x21a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8006540:	4b7e      	ldr	r3, [pc, #504]	; (800673c <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8006542:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006546:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 800654a:	687b      	ldr	r3, [r7, #4]
 800654c:	699b      	ldr	r3, [r3, #24]
 800654e:	497b      	ldr	r1, [pc, #492]	; (800673c <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8006550:	4313      	orrs	r3, r2
 8006552:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8006556:	687b      	ldr	r3, [r7, #4]
 8006558:	681b      	ldr	r3, [r3, #0]
 800655a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800655e:	2b00      	cmp	r3, #0
 8006560:	d00a      	beq.n	8006578 <HAL_RCCEx_PeriphCLKConfig+0x23c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8006562:	4b76      	ldr	r3, [pc, #472]	; (800673c <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8006564:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006568:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 800656c:	687b      	ldr	r3, [r7, #4]
 800656e:	69db      	ldr	r3, [r3, #28]
 8006570:	4972      	ldr	r1, [pc, #456]	; (800673c <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8006572:	4313      	orrs	r3, r2
 8006574:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8006578:	687b      	ldr	r3, [r7, #4]
 800657a:	681b      	ldr	r3, [r3, #0]
 800657c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006580:	2b00      	cmp	r3, #0
 8006582:	d00a      	beq.n	800659a <HAL_RCCEx_PeriphCLKConfig+0x25e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8006584:	4b6d      	ldr	r3, [pc, #436]	; (800673c <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8006586:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800658a:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 800658e:	687b      	ldr	r3, [r7, #4]
 8006590:	6a1b      	ldr	r3, [r3, #32]
 8006592:	496a      	ldr	r1, [pc, #424]	; (800673c <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8006594:	4313      	orrs	r3, r2
 8006596:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 800659a:	687b      	ldr	r3, [r7, #4]
 800659c:	681b      	ldr	r3, [r3, #0]
 800659e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80065a2:	2b00      	cmp	r3, #0
 80065a4:	d00a      	beq.n	80065bc <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80065a6:	4b65      	ldr	r3, [pc, #404]	; (800673c <HAL_RCCEx_PeriphCLKConfig+0x400>)
 80065a8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80065ac:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80065b0:	687b      	ldr	r3, [r7, #4]
 80065b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80065b4:	4961      	ldr	r1, [pc, #388]	; (800673c <HAL_RCCEx_PeriphCLKConfig+0x400>)
 80065b6:	4313      	orrs	r3, r2
 80065b8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C4)  

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 80065bc:	687b      	ldr	r3, [r7, #4]
 80065be:	681b      	ldr	r3, [r3, #0]
 80065c0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80065c4:	2b00      	cmp	r3, #0
 80065c6:	d00a      	beq.n	80065de <HAL_RCCEx_PeriphCLKConfig+0x2a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 80065c8:	4b5c      	ldr	r3, [pc, #368]	; (800673c <HAL_RCCEx_PeriphCLKConfig+0x400>)
 80065ca:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80065ce:	f023 0203 	bic.w	r2, r3, #3
 80065d2:	687b      	ldr	r3, [r7, #4]
 80065d4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80065d6:	4959      	ldr	r1, [pc, #356]	; (800673c <HAL_RCCEx_PeriphCLKConfig+0x400>)
 80065d8:	4313      	orrs	r3, r2
 80065da:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
  }

#endif /* I2C4 */

  /*-------------------------- LPTIM1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 80065de:	687b      	ldr	r3, [r7, #4]
 80065e0:	681b      	ldr	r3, [r3, #0]
 80065e2:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80065e6:	2b00      	cmp	r3, #0
 80065e8:	d00a      	beq.n	8006600 <HAL_RCCEx_PeriphCLKConfig+0x2c4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80065ea:	4b54      	ldr	r3, [pc, #336]	; (800673c <HAL_RCCEx_PeriphCLKConfig+0x400>)
 80065ec:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80065f0:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 80065f4:	687b      	ldr	r3, [r7, #4]
 80065f6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80065f8:	4950      	ldr	r1, [pc, #320]	; (800673c <HAL_RCCEx_PeriphCLKConfig+0x400>)
 80065fa:	4313      	orrs	r3, r2
 80065fc:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8006600:	687b      	ldr	r3, [r7, #4]
 8006602:	681b      	ldr	r3, [r3, #0]
 8006604:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006608:	2b00      	cmp	r3, #0
 800660a:	d015      	beq.n	8006638 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure the SAI1 interface clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800660c:	4b4b      	ldr	r3, [pc, #300]	; (800673c <HAL_RCCEx_PeriphCLKConfig+0x400>)
 800660e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006612:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8006616:	687b      	ldr	r3, [r7, #4]
 8006618:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800661a:	4948      	ldr	r1, [pc, #288]	; (800673c <HAL_RCCEx_PeriphCLKConfig+0x400>)
 800661c:	4313      	orrs	r3, r2
 800661e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLL)
 8006622:	687b      	ldr	r3, [r7, #4]
 8006624:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006626:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800662a:	d105      	bne.n	8006638 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800662c:	4b43      	ldr	r3, [pc, #268]	; (800673c <HAL_RCCEx_PeriphCLKConfig+0x400>)
 800662e:	68db      	ldr	r3, [r3, #12]
 8006630:	4a42      	ldr	r2, [pc, #264]	; (800673c <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8006632:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8006636:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- I2S clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 8006638:	687b      	ldr	r3, [r7, #4]
 800663a:	681b      	ldr	r3, [r3, #0]
 800663c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8006640:	2b00      	cmp	r3, #0
 8006642:	d015      	beq.n	8006670 <HAL_RCCEx_PeriphCLKConfig+0x334>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure the I2S interface clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8006644:	4b3d      	ldr	r3, [pc, #244]	; (800673c <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8006646:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800664a:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 800664e:	687b      	ldr	r3, [r7, #4]
 8006650:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006652:	493a      	ldr	r1, [pc, #232]	; (800673c <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8006654:	4313      	orrs	r3, r2
 8006656:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLL)
 800665a:	687b      	ldr	r3, [r7, #4]
 800665c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800665e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8006662:	d105      	bne.n	8006670 <HAL_RCCEx_PeriphCLKConfig+0x334>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8006664:	4b35      	ldr	r3, [pc, #212]	; (800673c <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8006666:	68db      	ldr	r3, [r3, #12]
 8006668:	4a34      	ldr	r2, [pc, #208]	; (800673c <HAL_RCCEx_PeriphCLKConfig+0x400>)
 800666a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800666e:	60d3      	str	r3, [r2, #12]
    }
  }

#if defined(FDCAN1)
  /*-------------------------- FDCAN clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8006670:	687b      	ldr	r3, [r7, #4]
 8006672:	681b      	ldr	r3, [r3, #0]
 8006674:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8006678:	2b00      	cmp	r3, #0
 800667a:	d015      	beq.n	80066a8 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN interface clock source */
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 800667c:	4b2f      	ldr	r3, [pc, #188]	; (800673c <HAL_RCCEx_PeriphCLKConfig+0x400>)
 800667e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006682:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8006686:	687b      	ldr	r3, [r7, #4]
 8006688:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800668a:	492c      	ldr	r1, [pc, #176]	; (800673c <HAL_RCCEx_PeriphCLKConfig+0x400>)
 800668c:	4313      	orrs	r3, r2
 800668e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 8006692:	687b      	ldr	r3, [r7, #4]
 8006694:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006696:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800669a:	d105      	bne.n	80066a8 <HAL_RCCEx_PeriphCLKConfig+0x36c>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800669c:	4b27      	ldr	r3, [pc, #156]	; (800673c <HAL_RCCEx_PeriphCLKConfig+0x400>)
 800669e:	68db      	ldr	r3, [r3, #12]
 80066a0:	4a26      	ldr	r2, [pc, #152]	; (800673c <HAL_RCCEx_PeriphCLKConfig+0x400>)
 80066a2:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80066a6:	60d3      	str	r3, [r2, #12]
#endif /* FDCAN1 */

#if defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 80066a8:	687b      	ldr	r3, [r7, #4]
 80066aa:	681b      	ldr	r3, [r3, #0]
 80066ac:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80066b0:	2b00      	cmp	r3, #0
 80066b2:	d015      	beq.n	80066e0 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80066b4:	4b21      	ldr	r3, [pc, #132]	; (800673c <HAL_RCCEx_PeriphCLKConfig+0x400>)
 80066b6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80066ba:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80066be:	687b      	ldr	r3, [r7, #4]
 80066c0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80066c2:	491e      	ldr	r1, [pc, #120]	; (800673c <HAL_RCCEx_PeriphCLKConfig+0x400>)
 80066c4:	4313      	orrs	r3, r2
 80066c6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 80066ca:	687b      	ldr	r3, [r7, #4]
 80066cc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80066ce:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80066d2:	d105      	bne.n	80066e0 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80066d4:	4b19      	ldr	r3, [pc, #100]	; (800673c <HAL_RCCEx_PeriphCLKConfig+0x400>)
 80066d6:	68db      	ldr	r3, [r3, #12]
 80066d8:	4a18      	ldr	r2, [pc, #96]	; (800673c <HAL_RCCEx_PeriphCLKConfig+0x400>)
 80066da:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80066de:	60d3      	str	r3, [r2, #12]
  }

#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 80066e0:	687b      	ldr	r3, [r7, #4]
 80066e2:	681b      	ldr	r3, [r3, #0]
 80066e4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80066e8:	2b00      	cmp	r3, #0
 80066ea:	d015      	beq.n	8006718 <HAL_RCCEx_PeriphCLKConfig+0x3dc>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 80066ec:	4b13      	ldr	r3, [pc, #76]	; (800673c <HAL_RCCEx_PeriphCLKConfig+0x400>)
 80066ee:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80066f2:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80066f6:	687b      	ldr	r3, [r7, #4]
 80066f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80066fa:	4910      	ldr	r1, [pc, #64]	; (800673c <HAL_RCCEx_PeriphCLKConfig+0x400>)
 80066fc:	4313      	orrs	r3, r2
 80066fe:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8006702:	687b      	ldr	r3, [r7, #4]
 8006704:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006706:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800670a:	d105      	bne.n	8006718 <HAL_RCCEx_PeriphCLKConfig+0x3dc>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800670c:	4b0b      	ldr	r3, [pc, #44]	; (800673c <HAL_RCCEx_PeriphCLKConfig+0x400>)
 800670e:	68db      	ldr	r3, [r3, #12]
 8006710:	4a0a      	ldr	r2, [pc, #40]	; (800673c <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8006712:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8006716:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- ADC12 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 8006718:	687b      	ldr	r3, [r7, #4]
 800671a:	681b      	ldr	r3, [r3, #0]
 800671c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8006720:	2b00      	cmp	r3, #0
 8006722:	d018      	beq.n	8006756 <HAL_RCCEx_PeriphCLKConfig+0x41a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12CLKSOURCE(PeriphClkInit->Adc12ClockSelection));

    /* Configure the ADC12 interface clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 8006724:	4b05      	ldr	r3, [pc, #20]	; (800673c <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8006726:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800672a:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 800672e:	687b      	ldr	r3, [r7, #4]
 8006730:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006732:	4902      	ldr	r1, [pc, #8]	; (800673c <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8006734:	4313      	orrs	r3, r2
 8006736:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 800673a:	e001      	b.n	8006740 <HAL_RCCEx_PeriphCLKConfig+0x404>
 800673c:	40021000 	.word	0x40021000
    
    if(PeriphClkInit->Adc12ClockSelection == RCC_ADC12CLKSOURCE_PLL)
 8006740:	687b      	ldr	r3, [r7, #4]
 8006742:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006744:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8006748:	d105      	bne.n	8006756 <HAL_RCCEx_PeriphCLKConfig+0x41a>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 800674a:	4b21      	ldr	r3, [pc, #132]	; (80067d0 <HAL_RCCEx_PeriphCLKConfig+0x494>)
 800674c:	68db      	ldr	r3, [r3, #12]
 800674e:	4a20      	ldr	r2, [pc, #128]	; (80067d0 <HAL_RCCEx_PeriphCLKConfig+0x494>)
 8006750:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006754:	60d3      	str	r3, [r2, #12]
    }
  }
  
#if defined(ADC345_COMMON)
  /*-------------------------- ADC345 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC345) == RCC_PERIPHCLK_ADC345)
 8006756:	687b      	ldr	r3, [r7, #4]
 8006758:	681b      	ldr	r3, [r3, #0]
 800675a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800675e:	2b00      	cmp	r3, #0
 8006760:	d015      	beq.n	800678e <HAL_RCCEx_PeriphCLKConfig+0x452>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC345CLKSOURCE(PeriphClkInit->Adc345ClockSelection));

    /* Configure the ADC345 interface clock source */
    __HAL_RCC_ADC345_CONFIG(PeriphClkInit->Adc345ClockSelection);
 8006762:	4b1b      	ldr	r3, [pc, #108]	; (80067d0 <HAL_RCCEx_PeriphCLKConfig+0x494>)
 8006764:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006768:	f023 4240 	bic.w	r2, r3, #3221225472	; 0xc0000000
 800676c:	687b      	ldr	r3, [r7, #4]
 800676e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006770:	4917      	ldr	r1, [pc, #92]	; (80067d0 <HAL_RCCEx_PeriphCLKConfig+0x494>)
 8006772:	4313      	orrs	r3, r2
 8006774:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Adc345ClockSelection == RCC_ADC345CLKSOURCE_PLL)
 8006778:	687b      	ldr	r3, [r7, #4]
 800677a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800677c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006780:	d105      	bne.n	800678e <HAL_RCCEx_PeriphCLKConfig+0x452>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8006782:	4b13      	ldr	r3, [pc, #76]	; (80067d0 <HAL_RCCEx_PeriphCLKConfig+0x494>)
 8006784:	68db      	ldr	r3, [r3, #12]
 8006786:	4a12      	ldr	r2, [pc, #72]	; (80067d0 <HAL_RCCEx_PeriphCLKConfig+0x494>)
 8006788:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800678c:	60d3      	str	r3, [r2, #12]
#endif /* ADC345_COMMON */

#if defined(QUADSPI)

  /*-------------------------- QuadSPIx clock source configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 800678e:	687b      	ldr	r3, [r7, #4]
 8006790:	681b      	ldr	r3, [r3, #0]
 8006792:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8006796:	2b00      	cmp	r3, #0
 8006798:	d015      	beq.n	80067c6 <HAL_RCCEx_PeriphCLKConfig+0x48a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_QSPICLKSOURCE(PeriphClkInit->QspiClockSelection));

    /* Configure the QuadSPI clock source */
    __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 800679a:	4b0d      	ldr	r3, [pc, #52]	; (80067d0 <HAL_RCCEx_PeriphCLKConfig+0x494>)
 800679c:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80067a0:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80067a4:	687b      	ldr	r3, [r7, #4]
 80067a6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80067a8:	4909      	ldr	r1, [pc, #36]	; (80067d0 <HAL_RCCEx_PeriphCLKConfig+0x494>)
 80067aa:	4313      	orrs	r3, r2
 80067ac:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c

    if(PeriphClkInit->QspiClockSelection == RCC_QSPICLKSOURCE_PLL)
 80067b0:	687b      	ldr	r3, [r7, #4]
 80067b2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80067b4:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80067b8:	d105      	bne.n	80067c6 <HAL_RCCEx_PeriphCLKConfig+0x48a>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80067ba:	4b05      	ldr	r3, [pc, #20]	; (80067d0 <HAL_RCCEx_PeriphCLKConfig+0x494>)
 80067bc:	68db      	ldr	r3, [r3, #12]
 80067be:	4a04      	ldr	r2, [pc, #16]	; (80067d0 <HAL_RCCEx_PeriphCLKConfig+0x494>)
 80067c0:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80067c4:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* QUADSPI */

  return status;
 80067c6:	7cbb      	ldrb	r3, [r7, #18]
}
 80067c8:	4618      	mov	r0, r3
 80067ca:	3718      	adds	r7, #24
 80067cc:	46bd      	mov	sp, r7
 80067ce:	bd80      	pop	{r7, pc}
 80067d0:	40021000 	.word	0x40021000

080067d4 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80067d4:	b580      	push	{r7, lr}
 80067d6:	b084      	sub	sp, #16
 80067d8:	af00      	add	r7, sp, #0
 80067da:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80067dc:	687b      	ldr	r3, [r7, #4]
 80067de:	2b00      	cmp	r3, #0
 80067e0:	d101      	bne.n	80067e6 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80067e2:	2301      	movs	r3, #1
 80067e4:	e084      	b.n	80068f0 <HAL_SPI_Init+0x11c>
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80067e6:	687b      	ldr	r3, [r7, #4]
 80067e8:	2200      	movs	r2, #0
 80067ea:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80067ec:	687b      	ldr	r3, [r7, #4]
 80067ee:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 80067f2:	b2db      	uxtb	r3, r3
 80067f4:	2b00      	cmp	r3, #0
 80067f6:	d106      	bne.n	8006806 <HAL_SPI_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80067f8:	687b      	ldr	r3, [r7, #4]
 80067fa:	2200      	movs	r2, #0
 80067fc:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8006800:	6878      	ldr	r0, [r7, #4]
 8006802:	f7fb fcc3 	bl	800218c <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8006806:	687b      	ldr	r3, [r7, #4]
 8006808:	2202      	movs	r2, #2
 800680a:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800680e:	687b      	ldr	r3, [r7, #4]
 8006810:	681b      	ldr	r3, [r3, #0]
 8006812:	681a      	ldr	r2, [r3, #0]
 8006814:	687b      	ldr	r3, [r7, #4]
 8006816:	681b      	ldr	r3, [r3, #0]
 8006818:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800681c:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800681e:	687b      	ldr	r3, [r7, #4]
 8006820:	68db      	ldr	r3, [r3, #12]
 8006822:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8006826:	d902      	bls.n	800682e <HAL_SPI_Init+0x5a>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8006828:	2300      	movs	r3, #0
 800682a:	60fb      	str	r3, [r7, #12]
 800682c:	e002      	b.n	8006834 <HAL_SPI_Init+0x60>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 800682e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8006832:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8006834:	687b      	ldr	r3, [r7, #4]
 8006836:	68db      	ldr	r3, [r3, #12]
 8006838:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 800683c:	d007      	beq.n	800684e <HAL_SPI_Init+0x7a>
 800683e:	687b      	ldr	r3, [r7, #4]
 8006840:	68db      	ldr	r3, [r3, #12]
 8006842:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8006846:	d002      	beq.n	800684e <HAL_SPI_Init+0x7a>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8006848:	687b      	ldr	r3, [r7, #4]
 800684a:	2200      	movs	r2, #0
 800684c:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Align the CRC Length on the data size */
  if (hspi->Init.CRCLength == SPI_CRC_LENGTH_DATASIZE)
 800684e:	687b      	ldr	r3, [r7, #4]
 8006850:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006852:	2b00      	cmp	r3, #0
 8006854:	d10b      	bne.n	800686e <HAL_SPI_Init+0x9a>
  {
    /* CRC Length aligned on the data size : value set by default */
    if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8006856:	687b      	ldr	r3, [r7, #4]
 8006858:	68db      	ldr	r3, [r3, #12]
 800685a:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800685e:	d903      	bls.n	8006868 <HAL_SPI_Init+0x94>
    {
      hspi->Init.CRCLength = SPI_CRC_LENGTH_16BIT;
 8006860:	687b      	ldr	r3, [r7, #4]
 8006862:	2202      	movs	r2, #2
 8006864:	631a      	str	r2, [r3, #48]	; 0x30
 8006866:	e002      	b.n	800686e <HAL_SPI_Init+0x9a>
    }
    else
    {
      hspi->Init.CRCLength = SPI_CRC_LENGTH_8BIT;
 8006868:	687b      	ldr	r3, [r7, #4]
 800686a:	2201      	movs	r2, #1
 800686c:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction |
 800686e:	687b      	ldr	r3, [r7, #4]
 8006870:	685a      	ldr	r2, [r3, #4]
 8006872:	687b      	ldr	r3, [r7, #4]
 8006874:	689b      	ldr	r3, [r3, #8]
 8006876:	431a      	orrs	r2, r3
 8006878:	687b      	ldr	r3, [r7, #4]
 800687a:	691b      	ldr	r3, [r3, #16]
 800687c:	431a      	orrs	r2, r3
 800687e:	687b      	ldr	r3, [r7, #4]
 8006880:	695b      	ldr	r3, [r3, #20]
 8006882:	431a      	orrs	r2, r3
 8006884:	687b      	ldr	r3, [r7, #4]
 8006886:	699b      	ldr	r3, [r3, #24]
 8006888:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800688c:	431a      	orrs	r2, r3
 800688e:	687b      	ldr	r3, [r7, #4]
 8006890:	69db      	ldr	r3, [r3, #28]
 8006892:	431a      	orrs	r2, r3
 8006894:	687b      	ldr	r3, [r7, #4]
 8006896:	6a1b      	ldr	r3, [r3, #32]
 8006898:	ea42 0103 	orr.w	r1, r2, r3
 800689c:	687b      	ldr	r3, [r7, #4]
 800689e:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80068a0:	687b      	ldr	r3, [r7, #4]
 80068a2:	681b      	ldr	r3, [r3, #0]
 80068a4:	430a      	orrs	r2, r1
 80068a6:	601a      	str	r2, [r3, #0]
    hspi->Instance->CR1 |= SPI_CR1_CRCL;
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | hspi->Init.TIMode |
 80068a8:	687b      	ldr	r3, [r7, #4]
 80068aa:	699b      	ldr	r3, [r3, #24]
 80068ac:	0c1b      	lsrs	r3, r3, #16
 80068ae:	f003 0204 	and.w	r2, r3, #4
 80068b2:	687b      	ldr	r3, [r7, #4]
 80068b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80068b6:	431a      	orrs	r2, r3
 80068b8:	687b      	ldr	r3, [r7, #4]
 80068ba:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80068bc:	431a      	orrs	r2, r3
 80068be:	687b      	ldr	r3, [r7, #4]
 80068c0:	68db      	ldr	r3, [r3, #12]
 80068c2:	ea42 0103 	orr.w	r1, r2, r3
 80068c6:	687b      	ldr	r3, [r7, #4]
 80068c8:	681b      	ldr	r3, [r3, #0]
 80068ca:	68fa      	ldr	r2, [r7, #12]
 80068cc:	430a      	orrs	r2, r1
 80068ce:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80068d0:	687b      	ldr	r3, [r7, #4]
 80068d2:	681b      	ldr	r3, [r3, #0]
 80068d4:	69da      	ldr	r2, [r3, #28]
 80068d6:	687b      	ldr	r3, [r7, #4]
 80068d8:	681b      	ldr	r3, [r3, #0]
 80068da:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80068de:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80068e0:	687b      	ldr	r3, [r7, #4]
 80068e2:	2200      	movs	r2, #0
 80068e4:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 80068e6:	687b      	ldr	r3, [r7, #4]
 80068e8:	2201      	movs	r2, #1
 80068ea:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 80068ee:	2300      	movs	r3, #0
}
 80068f0:	4618      	mov	r0, r3
 80068f2:	3710      	adds	r7, #16
 80068f4:	46bd      	mov	sp, r7
 80068f6:	bd80      	pop	{r7, pc}

080068f8 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80068f8:	b580      	push	{r7, lr}
 80068fa:	b088      	sub	sp, #32
 80068fc:	af00      	add	r7, sp, #0
 80068fe:	60f8      	str	r0, [r7, #12]
 8006900:	60b9      	str	r1, [r7, #8]
 8006902:	603b      	str	r3, [r7, #0]
 8006904:	4613      	mov	r3, r2
 8006906:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8006908:	2300      	movs	r3, #0
 800690a:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 800690c:	68fb      	ldr	r3, [r7, #12]
 800690e:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8006912:	2b01      	cmp	r3, #1
 8006914:	d101      	bne.n	800691a <HAL_SPI_Transmit+0x22>
 8006916:	2302      	movs	r3, #2
 8006918:	e150      	b.n	8006bbc <HAL_SPI_Transmit+0x2c4>
 800691a:	68fb      	ldr	r3, [r7, #12]
 800691c:	2201      	movs	r2, #1
 800691e:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8006922:	f7fc fa4f 	bl	8002dc4 <HAL_GetTick>
 8006926:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8006928:	88fb      	ldrh	r3, [r7, #6]
 800692a:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 800692c:	68fb      	ldr	r3, [r7, #12]
 800692e:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8006932:	b2db      	uxtb	r3, r3
 8006934:	2b01      	cmp	r3, #1
 8006936:	d002      	beq.n	800693e <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8006938:	2302      	movs	r3, #2
 800693a:	77fb      	strb	r3, [r7, #31]
    goto error;
 800693c:	e135      	b.n	8006baa <HAL_SPI_Transmit+0x2b2>
  }

  if ((pData == NULL) || (Size == 0U))
 800693e:	68bb      	ldr	r3, [r7, #8]
 8006940:	2b00      	cmp	r3, #0
 8006942:	d002      	beq.n	800694a <HAL_SPI_Transmit+0x52>
 8006944:	88fb      	ldrh	r3, [r7, #6]
 8006946:	2b00      	cmp	r3, #0
 8006948:	d102      	bne.n	8006950 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 800694a:	2301      	movs	r3, #1
 800694c:	77fb      	strb	r3, [r7, #31]
    goto error;
 800694e:	e12c      	b.n	8006baa <HAL_SPI_Transmit+0x2b2>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8006950:	68fb      	ldr	r3, [r7, #12]
 8006952:	2203      	movs	r2, #3
 8006954:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8006958:	68fb      	ldr	r3, [r7, #12]
 800695a:	2200      	movs	r2, #0
 800695c:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 800695e:	68fb      	ldr	r3, [r7, #12]
 8006960:	68ba      	ldr	r2, [r7, #8]
 8006962:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = Size;
 8006964:	68fb      	ldr	r3, [r7, #12]
 8006966:	88fa      	ldrh	r2, [r7, #6]
 8006968:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = Size;
 800696a:	68fb      	ldr	r3, [r7, #12]
 800696c:	88fa      	ldrh	r2, [r7, #6]
 800696e:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8006970:	68fb      	ldr	r3, [r7, #12]
 8006972:	2200      	movs	r2, #0
 8006974:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = 0U;
 8006976:	68fb      	ldr	r3, [r7, #12]
 8006978:	2200      	movs	r2, #0
 800697a:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->RxXferCount = 0U;
 800697e:	68fb      	ldr	r3, [r7, #12]
 8006980:	2200      	movs	r2, #0
 8006982:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->TxISR       = NULL;
 8006986:	68fb      	ldr	r3, [r7, #12]
 8006988:	2200      	movs	r2, #0
 800698a:	651a      	str	r2, [r3, #80]	; 0x50
  hspi->RxISR       = NULL;
 800698c:	68fb      	ldr	r3, [r7, #12]
 800698e:	2200      	movs	r2, #0
 8006990:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8006992:	68fb      	ldr	r3, [r7, #12]
 8006994:	689b      	ldr	r3, [r3, #8]
 8006996:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800699a:	d107      	bne.n	80069ac <HAL_SPI_Transmit+0xb4>
  {
    SPI_1LINE_TX(hspi);
 800699c:	68fb      	ldr	r3, [r7, #12]
 800699e:	681b      	ldr	r3, [r3, #0]
 80069a0:	681a      	ldr	r2, [r3, #0]
 80069a2:	68fb      	ldr	r3, [r7, #12]
 80069a4:	681b      	ldr	r3, [r3, #0]
 80069a6:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80069aa:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80069ac:	68fb      	ldr	r3, [r7, #12]
 80069ae:	681b      	ldr	r3, [r3, #0]
 80069b0:	681b      	ldr	r3, [r3, #0]
 80069b2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80069b6:	2b40      	cmp	r3, #64	; 0x40
 80069b8:	d007      	beq.n	80069ca <HAL_SPI_Transmit+0xd2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80069ba:	68fb      	ldr	r3, [r7, #12]
 80069bc:	681b      	ldr	r3, [r3, #0]
 80069be:	681a      	ldr	r2, [r3, #0]
 80069c0:	68fb      	ldr	r3, [r7, #12]
 80069c2:	681b      	ldr	r3, [r3, #0]
 80069c4:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80069c8:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80069ca:	68fb      	ldr	r3, [r7, #12]
 80069cc:	68db      	ldr	r3, [r3, #12]
 80069ce:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 80069d2:	d94b      	bls.n	8006a6c <HAL_SPI_Transmit+0x174>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80069d4:	68fb      	ldr	r3, [r7, #12]
 80069d6:	685b      	ldr	r3, [r3, #4]
 80069d8:	2b00      	cmp	r3, #0
 80069da:	d002      	beq.n	80069e2 <HAL_SPI_Transmit+0xea>
 80069dc:	8afb      	ldrh	r3, [r7, #22]
 80069de:	2b01      	cmp	r3, #1
 80069e0:	d13e      	bne.n	8006a60 <HAL_SPI_Transmit+0x168>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80069e2:	68fb      	ldr	r3, [r7, #12]
 80069e4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80069e6:	881a      	ldrh	r2, [r3, #0]
 80069e8:	68fb      	ldr	r3, [r7, #12]
 80069ea:	681b      	ldr	r3, [r3, #0]
 80069ec:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80069ee:	68fb      	ldr	r3, [r7, #12]
 80069f0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80069f2:	1c9a      	adds	r2, r3, #2
 80069f4:	68fb      	ldr	r3, [r7, #12]
 80069f6:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 80069f8:	68fb      	ldr	r3, [r7, #12]
 80069fa:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80069fc:	b29b      	uxth	r3, r3
 80069fe:	3b01      	subs	r3, #1
 8006a00:	b29a      	uxth	r2, r3
 8006a02:	68fb      	ldr	r3, [r7, #12]
 8006a04:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8006a06:	e02b      	b.n	8006a60 <HAL_SPI_Transmit+0x168>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8006a08:	68fb      	ldr	r3, [r7, #12]
 8006a0a:	681b      	ldr	r3, [r3, #0]
 8006a0c:	689b      	ldr	r3, [r3, #8]
 8006a0e:	f003 0302 	and.w	r3, r3, #2
 8006a12:	2b02      	cmp	r3, #2
 8006a14:	d112      	bne.n	8006a3c <HAL_SPI_Transmit+0x144>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8006a16:	68fb      	ldr	r3, [r7, #12]
 8006a18:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006a1a:	881a      	ldrh	r2, [r3, #0]
 8006a1c:	68fb      	ldr	r3, [r7, #12]
 8006a1e:	681b      	ldr	r3, [r3, #0]
 8006a20:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8006a22:	68fb      	ldr	r3, [r7, #12]
 8006a24:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006a26:	1c9a      	adds	r2, r3, #2
 8006a28:	68fb      	ldr	r3, [r7, #12]
 8006a2a:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8006a2c:	68fb      	ldr	r3, [r7, #12]
 8006a2e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006a30:	b29b      	uxth	r3, r3
 8006a32:	3b01      	subs	r3, #1
 8006a34:	b29a      	uxth	r2, r3
 8006a36:	68fb      	ldr	r3, [r7, #12]
 8006a38:	87da      	strh	r2, [r3, #62]	; 0x3e
 8006a3a:	e011      	b.n	8006a60 <HAL_SPI_Transmit+0x168>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8006a3c:	f7fc f9c2 	bl	8002dc4 <HAL_GetTick>
 8006a40:	4602      	mov	r2, r0
 8006a42:	69bb      	ldr	r3, [r7, #24]
 8006a44:	1ad3      	subs	r3, r2, r3
 8006a46:	683a      	ldr	r2, [r7, #0]
 8006a48:	429a      	cmp	r2, r3
 8006a4a:	d803      	bhi.n	8006a54 <HAL_SPI_Transmit+0x15c>
 8006a4c:	683b      	ldr	r3, [r7, #0]
 8006a4e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8006a52:	d102      	bne.n	8006a5a <HAL_SPI_Transmit+0x162>
 8006a54:	683b      	ldr	r3, [r7, #0]
 8006a56:	2b00      	cmp	r3, #0
 8006a58:	d102      	bne.n	8006a60 <HAL_SPI_Transmit+0x168>
        {
          errorcode = HAL_TIMEOUT;
 8006a5a:	2303      	movs	r3, #3
 8006a5c:	77fb      	strb	r3, [r7, #31]
          goto error;
 8006a5e:	e0a4      	b.n	8006baa <HAL_SPI_Transmit+0x2b2>
    while (hspi->TxXferCount > 0U)
 8006a60:	68fb      	ldr	r3, [r7, #12]
 8006a62:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006a64:	b29b      	uxth	r3, r3
 8006a66:	2b00      	cmp	r3, #0
 8006a68:	d1ce      	bne.n	8006a08 <HAL_SPI_Transmit+0x110>
 8006a6a:	e07c      	b.n	8006b66 <HAL_SPI_Transmit+0x26e>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8006a6c:	68fb      	ldr	r3, [r7, #12]
 8006a6e:	685b      	ldr	r3, [r3, #4]
 8006a70:	2b00      	cmp	r3, #0
 8006a72:	d002      	beq.n	8006a7a <HAL_SPI_Transmit+0x182>
 8006a74:	8afb      	ldrh	r3, [r7, #22]
 8006a76:	2b01      	cmp	r3, #1
 8006a78:	d170      	bne.n	8006b5c <HAL_SPI_Transmit+0x264>
    {
      if (hspi->TxXferCount > 1U)
 8006a7a:	68fb      	ldr	r3, [r7, #12]
 8006a7c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006a7e:	b29b      	uxth	r3, r3
 8006a80:	2b01      	cmp	r3, #1
 8006a82:	d912      	bls.n	8006aaa <HAL_SPI_Transmit+0x1b2>
      {
        /* write on the data register in packing mode */
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8006a84:	68fb      	ldr	r3, [r7, #12]
 8006a86:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006a88:	881a      	ldrh	r2, [r3, #0]
 8006a8a:	68fb      	ldr	r3, [r7, #12]
 8006a8c:	681b      	ldr	r3, [r3, #0]
 8006a8e:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8006a90:	68fb      	ldr	r3, [r7, #12]
 8006a92:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006a94:	1c9a      	adds	r2, r3, #2
 8006a96:	68fb      	ldr	r3, [r7, #12]
 8006a98:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount -= 2U;
 8006a9a:	68fb      	ldr	r3, [r7, #12]
 8006a9c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006a9e:	b29b      	uxth	r3, r3
 8006aa0:	3b02      	subs	r3, #2
 8006aa2:	b29a      	uxth	r2, r3
 8006aa4:	68fb      	ldr	r3, [r7, #12]
 8006aa6:	87da      	strh	r2, [r3, #62]	; 0x3e
 8006aa8:	e058      	b.n	8006b5c <HAL_SPI_Transmit+0x264>
      }
      else
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8006aaa:	68fb      	ldr	r3, [r7, #12]
 8006aac:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006aae:	68fb      	ldr	r3, [r7, #12]
 8006ab0:	681b      	ldr	r3, [r3, #0]
 8006ab2:	330c      	adds	r3, #12
 8006ab4:	7812      	ldrb	r2, [r2, #0]
 8006ab6:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr ++;
 8006ab8:	68fb      	ldr	r3, [r7, #12]
 8006aba:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006abc:	1c5a      	adds	r2, r3, #1
 8006abe:	68fb      	ldr	r3, [r7, #12]
 8006ac0:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8006ac2:	68fb      	ldr	r3, [r7, #12]
 8006ac4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006ac6:	b29b      	uxth	r3, r3
 8006ac8:	3b01      	subs	r3, #1
 8006aca:	b29a      	uxth	r2, r3
 8006acc:	68fb      	ldr	r3, [r7, #12]
 8006ace:	87da      	strh	r2, [r3, #62]	; 0x3e
      }
    }
    while (hspi->TxXferCount > 0U)
 8006ad0:	e044      	b.n	8006b5c <HAL_SPI_Transmit+0x264>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8006ad2:	68fb      	ldr	r3, [r7, #12]
 8006ad4:	681b      	ldr	r3, [r3, #0]
 8006ad6:	689b      	ldr	r3, [r3, #8]
 8006ad8:	f003 0302 	and.w	r3, r3, #2
 8006adc:	2b02      	cmp	r3, #2
 8006ade:	d12b      	bne.n	8006b38 <HAL_SPI_Transmit+0x240>
      {
        if (hspi->TxXferCount > 1U)
 8006ae0:	68fb      	ldr	r3, [r7, #12]
 8006ae2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006ae4:	b29b      	uxth	r3, r3
 8006ae6:	2b01      	cmp	r3, #1
 8006ae8:	d912      	bls.n	8006b10 <HAL_SPI_Transmit+0x218>
        {
          /* write on the data register in packing mode */
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8006aea:	68fb      	ldr	r3, [r7, #12]
 8006aec:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006aee:	881a      	ldrh	r2, [r3, #0]
 8006af0:	68fb      	ldr	r3, [r7, #12]
 8006af2:	681b      	ldr	r3, [r3, #0]
 8006af4:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8006af6:	68fb      	ldr	r3, [r7, #12]
 8006af8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006afa:	1c9a      	adds	r2, r3, #2
 8006afc:	68fb      	ldr	r3, [r7, #12]
 8006afe:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount -= 2U;
 8006b00:	68fb      	ldr	r3, [r7, #12]
 8006b02:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006b04:	b29b      	uxth	r3, r3
 8006b06:	3b02      	subs	r3, #2
 8006b08:	b29a      	uxth	r2, r3
 8006b0a:	68fb      	ldr	r3, [r7, #12]
 8006b0c:	87da      	strh	r2, [r3, #62]	; 0x3e
 8006b0e:	e025      	b.n	8006b5c <HAL_SPI_Transmit+0x264>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8006b10:	68fb      	ldr	r3, [r7, #12]
 8006b12:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006b14:	68fb      	ldr	r3, [r7, #12]
 8006b16:	681b      	ldr	r3, [r3, #0]
 8006b18:	330c      	adds	r3, #12
 8006b1a:	7812      	ldrb	r2, [r2, #0]
 8006b1c:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 8006b1e:	68fb      	ldr	r3, [r7, #12]
 8006b20:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006b22:	1c5a      	adds	r2, r3, #1
 8006b24:	68fb      	ldr	r3, [r7, #12]
 8006b26:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount--;
 8006b28:	68fb      	ldr	r3, [r7, #12]
 8006b2a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006b2c:	b29b      	uxth	r3, r3
 8006b2e:	3b01      	subs	r3, #1
 8006b30:	b29a      	uxth	r2, r3
 8006b32:	68fb      	ldr	r3, [r7, #12]
 8006b34:	87da      	strh	r2, [r3, #62]	; 0x3e
 8006b36:	e011      	b.n	8006b5c <HAL_SPI_Transmit+0x264>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8006b38:	f7fc f944 	bl	8002dc4 <HAL_GetTick>
 8006b3c:	4602      	mov	r2, r0
 8006b3e:	69bb      	ldr	r3, [r7, #24]
 8006b40:	1ad3      	subs	r3, r2, r3
 8006b42:	683a      	ldr	r2, [r7, #0]
 8006b44:	429a      	cmp	r2, r3
 8006b46:	d803      	bhi.n	8006b50 <HAL_SPI_Transmit+0x258>
 8006b48:	683b      	ldr	r3, [r7, #0]
 8006b4a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8006b4e:	d102      	bne.n	8006b56 <HAL_SPI_Transmit+0x25e>
 8006b50:	683b      	ldr	r3, [r7, #0]
 8006b52:	2b00      	cmp	r3, #0
 8006b54:	d102      	bne.n	8006b5c <HAL_SPI_Transmit+0x264>
        {
          errorcode = HAL_TIMEOUT;
 8006b56:	2303      	movs	r3, #3
 8006b58:	77fb      	strb	r3, [r7, #31]
          goto error;
 8006b5a:	e026      	b.n	8006baa <HAL_SPI_Transmit+0x2b2>
    while (hspi->TxXferCount > 0U)
 8006b5c:	68fb      	ldr	r3, [r7, #12]
 8006b5e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006b60:	b29b      	uxth	r3, r3
 8006b62:	2b00      	cmp	r3, #0
 8006b64:	d1b5      	bne.n	8006ad2 <HAL_SPI_Transmit+0x1da>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8006b66:	69ba      	ldr	r2, [r7, #24]
 8006b68:	6839      	ldr	r1, [r7, #0]
 8006b6a:	68f8      	ldr	r0, [r7, #12]
 8006b6c:	f000 f901 	bl	8006d72 <SPI_EndRxTxTransaction>
 8006b70:	4603      	mov	r3, r0
 8006b72:	2b00      	cmp	r3, #0
 8006b74:	d002      	beq.n	8006b7c <HAL_SPI_Transmit+0x284>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8006b76:	68fb      	ldr	r3, [r7, #12]
 8006b78:	2220      	movs	r2, #32
 8006b7a:	661a      	str	r2, [r3, #96]	; 0x60
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8006b7c:	68fb      	ldr	r3, [r7, #12]
 8006b7e:	689b      	ldr	r3, [r3, #8]
 8006b80:	2b00      	cmp	r3, #0
 8006b82:	d10a      	bne.n	8006b9a <HAL_SPI_Transmit+0x2a2>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8006b84:	2300      	movs	r3, #0
 8006b86:	613b      	str	r3, [r7, #16]
 8006b88:	68fb      	ldr	r3, [r7, #12]
 8006b8a:	681b      	ldr	r3, [r3, #0]
 8006b8c:	68db      	ldr	r3, [r3, #12]
 8006b8e:	613b      	str	r3, [r7, #16]
 8006b90:	68fb      	ldr	r3, [r7, #12]
 8006b92:	681b      	ldr	r3, [r3, #0]
 8006b94:	689b      	ldr	r3, [r3, #8]
 8006b96:	613b      	str	r3, [r7, #16]
 8006b98:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8006b9a:	68fb      	ldr	r3, [r7, #12]
 8006b9c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006b9e:	2b00      	cmp	r3, #0
 8006ba0:	d002      	beq.n	8006ba8 <HAL_SPI_Transmit+0x2b0>
  {
    errorcode = HAL_ERROR;
 8006ba2:	2301      	movs	r3, #1
 8006ba4:	77fb      	strb	r3, [r7, #31]
 8006ba6:	e000      	b.n	8006baa <HAL_SPI_Transmit+0x2b2>
  }

error:
 8006ba8:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8006baa:	68fb      	ldr	r3, [r7, #12]
 8006bac:	2201      	movs	r2, #1
 8006bae:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8006bb2:	68fb      	ldr	r3, [r7, #12]
 8006bb4:	2200      	movs	r2, #0
 8006bb6:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 8006bba:	7ffb      	ldrb	r3, [r7, #31]
}
 8006bbc:	4618      	mov	r0, r3
 8006bbe:	3720      	adds	r7, #32
 8006bc0:	46bd      	mov	sp, r7
 8006bc2:	bd80      	pop	{r7, pc}

08006bc4 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8006bc4:	b580      	push	{r7, lr}
 8006bc6:	b084      	sub	sp, #16
 8006bc8:	af00      	add	r7, sp, #0
 8006bca:	60f8      	str	r0, [r7, #12]
 8006bcc:	60b9      	str	r1, [r7, #8]
 8006bce:	603b      	str	r3, [r7, #0]
 8006bd0:	4613      	mov	r3, r2
 8006bd2:	71fb      	strb	r3, [r7, #7]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8006bd4:	e04c      	b.n	8006c70 <SPI_WaitFlagStateUntilTimeout+0xac>
  {
    if (Timeout != HAL_MAX_DELAY)
 8006bd6:	683b      	ldr	r3, [r7, #0]
 8006bd8:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8006bdc:	d048      	beq.n	8006c70 <SPI_WaitFlagStateUntilTimeout+0xac>
    {
      if (((HAL_GetTick() - Tickstart) >= Timeout) || (Timeout == 0U))
 8006bde:	f7fc f8f1 	bl	8002dc4 <HAL_GetTick>
 8006be2:	4602      	mov	r2, r0
 8006be4:	69bb      	ldr	r3, [r7, #24]
 8006be6:	1ad3      	subs	r3, r2, r3
 8006be8:	683a      	ldr	r2, [r7, #0]
 8006bea:	429a      	cmp	r2, r3
 8006bec:	d902      	bls.n	8006bf4 <SPI_WaitFlagStateUntilTimeout+0x30>
 8006bee:	683b      	ldr	r3, [r7, #0]
 8006bf0:	2b00      	cmp	r3, #0
 8006bf2:	d13d      	bne.n	8006c70 <SPI_WaitFlagStateUntilTimeout+0xac>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
        on both master and slave sides in order to resynchronize the master
        and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8006bf4:	68fb      	ldr	r3, [r7, #12]
 8006bf6:	681b      	ldr	r3, [r3, #0]
 8006bf8:	685a      	ldr	r2, [r3, #4]
 8006bfa:	68fb      	ldr	r3, [r7, #12]
 8006bfc:	681b      	ldr	r3, [r3, #0]
 8006bfe:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8006c02:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8006c04:	68fb      	ldr	r3, [r7, #12]
 8006c06:	685b      	ldr	r3, [r3, #4]
 8006c08:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8006c0c:	d111      	bne.n	8006c32 <SPI_WaitFlagStateUntilTimeout+0x6e>
 8006c0e:	68fb      	ldr	r3, [r7, #12]
 8006c10:	689b      	ldr	r3, [r3, #8]
 8006c12:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006c16:	d004      	beq.n	8006c22 <SPI_WaitFlagStateUntilTimeout+0x5e>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8006c18:	68fb      	ldr	r3, [r7, #12]
 8006c1a:	689b      	ldr	r3, [r3, #8]
 8006c1c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006c20:	d107      	bne.n	8006c32 <SPI_WaitFlagStateUntilTimeout+0x6e>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8006c22:	68fb      	ldr	r3, [r7, #12]
 8006c24:	681b      	ldr	r3, [r3, #0]
 8006c26:	681a      	ldr	r2, [r3, #0]
 8006c28:	68fb      	ldr	r3, [r7, #12]
 8006c2a:	681b      	ldr	r3, [r3, #0]
 8006c2c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006c30:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8006c32:	68fb      	ldr	r3, [r7, #12]
 8006c34:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006c36:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006c3a:	d10f      	bne.n	8006c5c <SPI_WaitFlagStateUntilTimeout+0x98>
        {
          SPI_RESET_CRC(hspi);
 8006c3c:	68fb      	ldr	r3, [r7, #12]
 8006c3e:	681b      	ldr	r3, [r3, #0]
 8006c40:	681a      	ldr	r2, [r3, #0]
 8006c42:	68fb      	ldr	r3, [r7, #12]
 8006c44:	681b      	ldr	r3, [r3, #0]
 8006c46:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8006c4a:	601a      	str	r2, [r3, #0]
 8006c4c:	68fb      	ldr	r3, [r7, #12]
 8006c4e:	681b      	ldr	r3, [r3, #0]
 8006c50:	681a      	ldr	r2, [r3, #0]
 8006c52:	68fb      	ldr	r3, [r7, #12]
 8006c54:	681b      	ldr	r3, [r3, #0]
 8006c56:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8006c5a:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8006c5c:	68fb      	ldr	r3, [r7, #12]
 8006c5e:	2201      	movs	r2, #1
 8006c60:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8006c64:	68fb      	ldr	r3, [r7, #12]
 8006c66:	2200      	movs	r2, #0
 8006c68:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 8006c6c:	2303      	movs	r3, #3
 8006c6e:	e00f      	b.n	8006c90 <SPI_WaitFlagStateUntilTimeout+0xcc>
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8006c70:	68fb      	ldr	r3, [r7, #12]
 8006c72:	681b      	ldr	r3, [r3, #0]
 8006c74:	689a      	ldr	r2, [r3, #8]
 8006c76:	68bb      	ldr	r3, [r7, #8]
 8006c78:	4013      	ands	r3, r2
 8006c7a:	68ba      	ldr	r2, [r7, #8]
 8006c7c:	429a      	cmp	r2, r3
 8006c7e:	bf0c      	ite	eq
 8006c80:	2301      	moveq	r3, #1
 8006c82:	2300      	movne	r3, #0
 8006c84:	b2db      	uxtb	r3, r3
 8006c86:	461a      	mov	r2, r3
 8006c88:	79fb      	ldrb	r3, [r7, #7]
 8006c8a:	429a      	cmp	r2, r3
 8006c8c:	d1a3      	bne.n	8006bd6 <SPI_WaitFlagStateUntilTimeout+0x12>
      }
    }
  }

  return HAL_OK;
 8006c8e:	2300      	movs	r3, #0
}
 8006c90:	4618      	mov	r0, r3
 8006c92:	3710      	adds	r7, #16
 8006c94:	46bd      	mov	sp, r7
 8006c96:	bd80      	pop	{r7, pc}

08006c98 <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8006c98:	b580      	push	{r7, lr}
 8006c9a:	b084      	sub	sp, #16
 8006c9c:	af00      	add	r7, sp, #0
 8006c9e:	60f8      	str	r0, [r7, #12]
 8006ca0:	60b9      	str	r1, [r7, #8]
 8006ca2:	607a      	str	r2, [r7, #4]
 8006ca4:	603b      	str	r3, [r7, #0]
  while ((hspi->Instance->SR & Fifo) != State)
 8006ca6:	e057      	b.n	8006d58 <SPI_WaitFifoStateUntilTimeout+0xc0>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 8006ca8:	68bb      	ldr	r3, [r7, #8]
 8006caa:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 8006cae:	d106      	bne.n	8006cbe <SPI_WaitFifoStateUntilTimeout+0x26>
 8006cb0:	687b      	ldr	r3, [r7, #4]
 8006cb2:	2b00      	cmp	r3, #0
 8006cb4:	d103      	bne.n	8006cbe <SPI_WaitFifoStateUntilTimeout+0x26>
    {
      /* Read 8bit CRC to flush Data Register */
      READ_REG(*((__IO uint8_t *)&hspi->Instance->DR));
 8006cb6:	68fb      	ldr	r3, [r7, #12]
 8006cb8:	681b      	ldr	r3, [r3, #0]
 8006cba:	330c      	adds	r3, #12
 8006cbc:	781b      	ldrb	r3, [r3, #0]
    }

    if (Timeout != HAL_MAX_DELAY)
 8006cbe:	683b      	ldr	r3, [r7, #0]
 8006cc0:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8006cc4:	d048      	beq.n	8006d58 <SPI_WaitFifoStateUntilTimeout+0xc0>
    {
      if (((HAL_GetTick() - Tickstart) >= Timeout) || (Timeout == 0U))
 8006cc6:	f7fc f87d 	bl	8002dc4 <HAL_GetTick>
 8006cca:	4602      	mov	r2, r0
 8006ccc:	69bb      	ldr	r3, [r7, #24]
 8006cce:	1ad3      	subs	r3, r2, r3
 8006cd0:	683a      	ldr	r2, [r7, #0]
 8006cd2:	429a      	cmp	r2, r3
 8006cd4:	d902      	bls.n	8006cdc <SPI_WaitFifoStateUntilTimeout+0x44>
 8006cd6:	683b      	ldr	r3, [r7, #0]
 8006cd8:	2b00      	cmp	r3, #0
 8006cda:	d13d      	bne.n	8006d58 <SPI_WaitFifoStateUntilTimeout+0xc0>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8006cdc:	68fb      	ldr	r3, [r7, #12]
 8006cde:	681b      	ldr	r3, [r3, #0]
 8006ce0:	685a      	ldr	r2, [r3, #4]
 8006ce2:	68fb      	ldr	r3, [r7, #12]
 8006ce4:	681b      	ldr	r3, [r3, #0]
 8006ce6:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8006cea:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8006cec:	68fb      	ldr	r3, [r7, #12]
 8006cee:	685b      	ldr	r3, [r3, #4]
 8006cf0:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8006cf4:	d111      	bne.n	8006d1a <SPI_WaitFifoStateUntilTimeout+0x82>
 8006cf6:	68fb      	ldr	r3, [r7, #12]
 8006cf8:	689b      	ldr	r3, [r3, #8]
 8006cfa:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006cfe:	d004      	beq.n	8006d0a <SPI_WaitFifoStateUntilTimeout+0x72>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8006d00:	68fb      	ldr	r3, [r7, #12]
 8006d02:	689b      	ldr	r3, [r3, #8]
 8006d04:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006d08:	d107      	bne.n	8006d1a <SPI_WaitFifoStateUntilTimeout+0x82>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8006d0a:	68fb      	ldr	r3, [r7, #12]
 8006d0c:	681b      	ldr	r3, [r3, #0]
 8006d0e:	681a      	ldr	r2, [r3, #0]
 8006d10:	68fb      	ldr	r3, [r7, #12]
 8006d12:	681b      	ldr	r3, [r3, #0]
 8006d14:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006d18:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8006d1a:	68fb      	ldr	r3, [r7, #12]
 8006d1c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006d1e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006d22:	d10f      	bne.n	8006d44 <SPI_WaitFifoStateUntilTimeout+0xac>
        {
          SPI_RESET_CRC(hspi);
 8006d24:	68fb      	ldr	r3, [r7, #12]
 8006d26:	681b      	ldr	r3, [r3, #0]
 8006d28:	681a      	ldr	r2, [r3, #0]
 8006d2a:	68fb      	ldr	r3, [r7, #12]
 8006d2c:	681b      	ldr	r3, [r3, #0]
 8006d2e:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8006d32:	601a      	str	r2, [r3, #0]
 8006d34:	68fb      	ldr	r3, [r7, #12]
 8006d36:	681b      	ldr	r3, [r3, #0]
 8006d38:	681a      	ldr	r2, [r3, #0]
 8006d3a:	68fb      	ldr	r3, [r7, #12]
 8006d3c:	681b      	ldr	r3, [r3, #0]
 8006d3e:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8006d42:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8006d44:	68fb      	ldr	r3, [r7, #12]
 8006d46:	2201      	movs	r2, #1
 8006d48:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8006d4c:	68fb      	ldr	r3, [r7, #12]
 8006d4e:	2200      	movs	r2, #0
 8006d50:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 8006d54:	2303      	movs	r3, #3
 8006d56:	e008      	b.n	8006d6a <SPI_WaitFifoStateUntilTimeout+0xd2>
  while ((hspi->Instance->SR & Fifo) != State)
 8006d58:	68fb      	ldr	r3, [r7, #12]
 8006d5a:	681b      	ldr	r3, [r3, #0]
 8006d5c:	689a      	ldr	r2, [r3, #8]
 8006d5e:	68bb      	ldr	r3, [r7, #8]
 8006d60:	4013      	ands	r3, r2
 8006d62:	687a      	ldr	r2, [r7, #4]
 8006d64:	429a      	cmp	r2, r3
 8006d66:	d19f      	bne.n	8006ca8 <SPI_WaitFifoStateUntilTimeout+0x10>
      }
    }
  }

  return HAL_OK;
 8006d68:	2300      	movs	r3, #0
}
 8006d6a:	4618      	mov	r0, r3
 8006d6c:	3710      	adds	r7, #16
 8006d6e:	46bd      	mov	sp, r7
 8006d70:	bd80      	pop	{r7, pc}

08006d72 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8006d72:	b580      	push	{r7, lr}
 8006d74:	b086      	sub	sp, #24
 8006d76:	af02      	add	r7, sp, #8
 8006d78:	60f8      	str	r0, [r7, #12]
 8006d7a:	60b9      	str	r1, [r7, #8]
 8006d7c:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8006d7e:	687b      	ldr	r3, [r7, #4]
 8006d80:	9300      	str	r3, [sp, #0]
 8006d82:	68bb      	ldr	r3, [r7, #8]
 8006d84:	2200      	movs	r2, #0
 8006d86:	f44f 51c0 	mov.w	r1, #6144	; 0x1800
 8006d8a:	68f8      	ldr	r0, [r7, #12]
 8006d8c:	f7ff ff84 	bl	8006c98 <SPI_WaitFifoStateUntilTimeout>
 8006d90:	4603      	mov	r3, r0
 8006d92:	2b00      	cmp	r3, #0
 8006d94:	d007      	beq.n	8006da6 <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8006d96:	68fb      	ldr	r3, [r7, #12]
 8006d98:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006d9a:	f043 0220 	orr.w	r2, r3, #32
 8006d9e:	68fb      	ldr	r3, [r7, #12]
 8006da0:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8006da2:	2303      	movs	r3, #3
 8006da4:	e027      	b.n	8006df6 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8006da6:	687b      	ldr	r3, [r7, #4]
 8006da8:	9300      	str	r3, [sp, #0]
 8006daa:	68bb      	ldr	r3, [r7, #8]
 8006dac:	2200      	movs	r2, #0
 8006dae:	2180      	movs	r1, #128	; 0x80
 8006db0:	68f8      	ldr	r0, [r7, #12]
 8006db2:	f7ff ff07 	bl	8006bc4 <SPI_WaitFlagStateUntilTimeout>
 8006db6:	4603      	mov	r3, r0
 8006db8:	2b00      	cmp	r3, #0
 8006dba:	d007      	beq.n	8006dcc <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8006dbc:	68fb      	ldr	r3, [r7, #12]
 8006dbe:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006dc0:	f043 0220 	orr.w	r2, r3, #32
 8006dc4:	68fb      	ldr	r3, [r7, #12]
 8006dc6:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8006dc8:	2303      	movs	r3, #3
 8006dca:	e014      	b.n	8006df6 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8006dcc:	687b      	ldr	r3, [r7, #4]
 8006dce:	9300      	str	r3, [sp, #0]
 8006dd0:	68bb      	ldr	r3, [r7, #8]
 8006dd2:	2200      	movs	r2, #0
 8006dd4:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 8006dd8:	68f8      	ldr	r0, [r7, #12]
 8006dda:	f7ff ff5d 	bl	8006c98 <SPI_WaitFifoStateUntilTimeout>
 8006dde:	4603      	mov	r3, r0
 8006de0:	2b00      	cmp	r3, #0
 8006de2:	d007      	beq.n	8006df4 <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8006de4:	68fb      	ldr	r3, [r7, #12]
 8006de6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006de8:	f043 0220 	orr.w	r2, r3, #32
 8006dec:	68fb      	ldr	r3, [r7, #12]
 8006dee:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8006df0:	2303      	movs	r3, #3
 8006df2:	e000      	b.n	8006df6 <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 8006df4:	2300      	movs	r3, #0
}
 8006df6:	4618      	mov	r0, r3
 8006df8:	3710      	adds	r7, #16
 8006dfa:	46bd      	mov	sp, r7
 8006dfc:	bd80      	pop	{r7, pc}

08006dfe <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8006dfe:	b580      	push	{r7, lr}
 8006e00:	b082      	sub	sp, #8
 8006e02:	af00      	add	r7, sp, #0
 8006e04:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8006e06:	687b      	ldr	r3, [r7, #4]
 8006e08:	2b00      	cmp	r3, #0
 8006e0a:	d101      	bne.n	8006e10 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8006e0c:	2301      	movs	r3, #1
 8006e0e:	e049      	b.n	8006ea4 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8006e10:	687b      	ldr	r3, [r7, #4]
 8006e12:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006e16:	b2db      	uxtb	r3, r3
 8006e18:	2b00      	cmp	r3, #0
 8006e1a:	d106      	bne.n	8006e2a <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8006e1c:	687b      	ldr	r3, [r7, #4]
 8006e1e:	2200      	movs	r2, #0
 8006e20:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8006e24:	6878      	ldr	r0, [r7, #4]
 8006e26:	f7fb fe7b 	bl	8002b20 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006e2a:	687b      	ldr	r3, [r7, #4]
 8006e2c:	2202      	movs	r2, #2
 8006e2e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8006e32:	687b      	ldr	r3, [r7, #4]
 8006e34:	681a      	ldr	r2, [r3, #0]
 8006e36:	687b      	ldr	r3, [r7, #4]
 8006e38:	3304      	adds	r3, #4
 8006e3a:	4619      	mov	r1, r3
 8006e3c:	4610      	mov	r0, r2
 8006e3e:	f000 fc51 	bl	80076e4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8006e42:	687b      	ldr	r3, [r7, #4]
 8006e44:	2201      	movs	r2, #1
 8006e46:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006e4a:	687b      	ldr	r3, [r7, #4]
 8006e4c:	2201      	movs	r2, #1
 8006e4e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8006e52:	687b      	ldr	r3, [r7, #4]
 8006e54:	2201      	movs	r2, #1
 8006e56:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8006e5a:	687b      	ldr	r3, [r7, #4]
 8006e5c:	2201      	movs	r2, #1
 8006e5e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8006e62:	687b      	ldr	r3, [r7, #4]
 8006e64:	2201      	movs	r2, #1
 8006e66:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8006e6a:	687b      	ldr	r3, [r7, #4]
 8006e6c:	2201      	movs	r2, #1
 8006e6e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8006e72:	687b      	ldr	r3, [r7, #4]
 8006e74:	2201      	movs	r2, #1
 8006e76:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006e7a:	687b      	ldr	r3, [r7, #4]
 8006e7c:	2201      	movs	r2, #1
 8006e7e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8006e82:	687b      	ldr	r3, [r7, #4]
 8006e84:	2201      	movs	r2, #1
 8006e86:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8006e8a:	687b      	ldr	r3, [r7, #4]
 8006e8c:	2201      	movs	r2, #1
 8006e8e:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8006e92:	687b      	ldr	r3, [r7, #4]
 8006e94:	2201      	movs	r2, #1
 8006e96:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006e9a:	687b      	ldr	r3, [r7, #4]
 8006e9c:	2201      	movs	r2, #1
 8006e9e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8006ea2:	2300      	movs	r3, #0
}
 8006ea4:	4618      	mov	r0, r3
 8006ea6:	3708      	adds	r7, #8
 8006ea8:	46bd      	mov	sp, r7
 8006eaa:	bd80      	pop	{r7, pc}

08006eac <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8006eac:	b480      	push	{r7}
 8006eae:	b085      	sub	sp, #20
 8006eb0:	af00      	add	r7, sp, #0
 8006eb2:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8006eb4:	687b      	ldr	r3, [r7, #4]
 8006eb6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006eba:	b2db      	uxtb	r3, r3
 8006ebc:	2b01      	cmp	r3, #1
 8006ebe:	d001      	beq.n	8006ec4 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8006ec0:	2301      	movs	r3, #1
 8006ec2:	e019      	b.n	8006ef8 <HAL_TIM_Base_Start+0x4c>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006ec4:	687b      	ldr	r3, [r7, #4]
 8006ec6:	2202      	movs	r2, #2
 8006ec8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8006ecc:	687b      	ldr	r3, [r7, #4]
 8006ece:	681b      	ldr	r3, [r3, #0]
 8006ed0:	689a      	ldr	r2, [r3, #8]
 8006ed2:	4b0c      	ldr	r3, [pc, #48]	; (8006f04 <HAL_TIM_Base_Start+0x58>)
 8006ed4:	4013      	ands	r3, r2
 8006ed6:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006ed8:	68fb      	ldr	r3, [r7, #12]
 8006eda:	2b06      	cmp	r3, #6
 8006edc:	d00b      	beq.n	8006ef6 <HAL_TIM_Base_Start+0x4a>
 8006ede:	68fb      	ldr	r3, [r7, #12]
 8006ee0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006ee4:	d007      	beq.n	8006ef6 <HAL_TIM_Base_Start+0x4a>
  {
    __HAL_TIM_ENABLE(htim);
 8006ee6:	687b      	ldr	r3, [r7, #4]
 8006ee8:	681b      	ldr	r3, [r3, #0]
 8006eea:	681a      	ldr	r2, [r3, #0]
 8006eec:	687b      	ldr	r3, [r7, #4]
 8006eee:	681b      	ldr	r3, [r3, #0]
 8006ef0:	f042 0201 	orr.w	r2, r2, #1
 8006ef4:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8006ef6:	2300      	movs	r3, #0
}
 8006ef8:	4618      	mov	r0, r3
 8006efa:	3714      	adds	r7, #20
 8006efc:	46bd      	mov	sp, r7
 8006efe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f02:	4770      	bx	lr
 8006f04:	00010007 	.word	0x00010007

08006f08 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8006f08:	b480      	push	{r7}
 8006f0a:	b085      	sub	sp, #20
 8006f0c:	af00      	add	r7, sp, #0
 8006f0e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8006f10:	687b      	ldr	r3, [r7, #4]
 8006f12:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006f16:	b2db      	uxtb	r3, r3
 8006f18:	2b01      	cmp	r3, #1
 8006f1a:	d001      	beq.n	8006f20 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8006f1c:	2301      	movs	r3, #1
 8006f1e:	e021      	b.n	8006f64 <HAL_TIM_Base_Start_IT+0x5c>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006f20:	687b      	ldr	r3, [r7, #4]
 8006f22:	2202      	movs	r2, #2
 8006f24:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8006f28:	687b      	ldr	r3, [r7, #4]
 8006f2a:	681b      	ldr	r3, [r3, #0]
 8006f2c:	68da      	ldr	r2, [r3, #12]
 8006f2e:	687b      	ldr	r3, [r7, #4]
 8006f30:	681b      	ldr	r3, [r3, #0]
 8006f32:	f042 0201 	orr.w	r2, r2, #1
 8006f36:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8006f38:	687b      	ldr	r3, [r7, #4]
 8006f3a:	681b      	ldr	r3, [r3, #0]
 8006f3c:	689a      	ldr	r2, [r3, #8]
 8006f3e:	4b0c      	ldr	r3, [pc, #48]	; (8006f70 <HAL_TIM_Base_Start_IT+0x68>)
 8006f40:	4013      	ands	r3, r2
 8006f42:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006f44:	68fb      	ldr	r3, [r7, #12]
 8006f46:	2b06      	cmp	r3, #6
 8006f48:	d00b      	beq.n	8006f62 <HAL_TIM_Base_Start_IT+0x5a>
 8006f4a:	68fb      	ldr	r3, [r7, #12]
 8006f4c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006f50:	d007      	beq.n	8006f62 <HAL_TIM_Base_Start_IT+0x5a>
  {
    __HAL_TIM_ENABLE(htim);
 8006f52:	687b      	ldr	r3, [r7, #4]
 8006f54:	681b      	ldr	r3, [r3, #0]
 8006f56:	681a      	ldr	r2, [r3, #0]
 8006f58:	687b      	ldr	r3, [r7, #4]
 8006f5a:	681b      	ldr	r3, [r3, #0]
 8006f5c:	f042 0201 	orr.w	r2, r2, #1
 8006f60:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8006f62:	2300      	movs	r3, #0
}
 8006f64:	4618      	mov	r0, r3
 8006f66:	3714      	adds	r7, #20
 8006f68:	46bd      	mov	sp, r7
 8006f6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f6e:	4770      	bx	lr
 8006f70:	00010007 	.word	0x00010007

08006f74 <HAL_TIM_Base_Stop_IT>:
  * @brief  Stops the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop_IT(TIM_HandleTypeDef *htim)
{
 8006f74:	b480      	push	{r7}
 8006f76:	b083      	sub	sp, #12
 8006f78:	af00      	add	r7, sp, #0
 8006f7a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  
  /* Disable the TIM Update interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_UPDATE);
 8006f7c:	687b      	ldr	r3, [r7, #4]
 8006f7e:	681b      	ldr	r3, [r3, #0]
 8006f80:	68da      	ldr	r2, [r3, #12]
 8006f82:	687b      	ldr	r3, [r7, #4]
 8006f84:	681b      	ldr	r3, [r3, #0]
 8006f86:	f022 0201 	bic.w	r2, r2, #1
 8006f8a:	60da      	str	r2, [r3, #12]

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8006f8c:	687b      	ldr	r3, [r7, #4]
 8006f8e:	681b      	ldr	r3, [r3, #0]
 8006f90:	6a1a      	ldr	r2, [r3, #32]
 8006f92:	f241 1311 	movw	r3, #4369	; 0x1111
 8006f96:	4013      	ands	r3, r2
 8006f98:	2b00      	cmp	r3, #0
 8006f9a:	d10f      	bne.n	8006fbc <HAL_TIM_Base_Stop_IT+0x48>
 8006f9c:	687b      	ldr	r3, [r7, #4]
 8006f9e:	681b      	ldr	r3, [r3, #0]
 8006fa0:	6a1a      	ldr	r2, [r3, #32]
 8006fa2:	f244 4344 	movw	r3, #17476	; 0x4444
 8006fa6:	4013      	ands	r3, r2
 8006fa8:	2b00      	cmp	r3, #0
 8006faa:	d107      	bne.n	8006fbc <HAL_TIM_Base_Stop_IT+0x48>
 8006fac:	687b      	ldr	r3, [r7, #4]
 8006fae:	681b      	ldr	r3, [r3, #0]
 8006fb0:	681a      	ldr	r2, [r3, #0]
 8006fb2:	687b      	ldr	r3, [r7, #4]
 8006fb4:	681b      	ldr	r3, [r3, #0]
 8006fb6:	f022 0201 	bic.w	r2, r2, #1
 8006fba:	601a      	str	r2, [r3, #0]

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 8006fbc:	687b      	ldr	r3, [r7, #4]
 8006fbe:	2201      	movs	r2, #1
 8006fc0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Return function status */
  return HAL_OK;
 8006fc4:	2300      	movs	r3, #0
}
 8006fc6:	4618      	mov	r0, r3
 8006fc8:	370c      	adds	r7, #12
 8006fca:	46bd      	mov	sp, r7
 8006fcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fd0:	4770      	bx	lr

08006fd2 <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim,  TIM_Encoder_InitTypeDef *sConfig)
{
 8006fd2:	b580      	push	{r7, lr}
 8006fd4:	b086      	sub	sp, #24
 8006fd6:	af00      	add	r7, sp, #0
 8006fd8:	6078      	str	r0, [r7, #4]
 8006fda:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 8006fdc:	687b      	ldr	r3, [r7, #4]
 8006fde:	2b00      	cmp	r3, #0
 8006fe0:	d101      	bne.n	8006fe6 <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 8006fe2:	2301      	movs	r3, #1
 8006fe4:	e097      	b.n	8007116 <HAL_TIM_Encoder_Init+0x144>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC1Prescaler));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));

  if (htim->State == HAL_TIM_STATE_RESET)
 8006fe6:	687b      	ldr	r3, [r7, #4]
 8006fe8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006fec:	b2db      	uxtb	r3, r3
 8006fee:	2b00      	cmp	r3, #0
 8006ff0:	d106      	bne.n	8007000 <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8006ff2:	687b      	ldr	r3, [r7, #4]
 8006ff4:	2200      	movs	r2, #0
 8006ff6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 8006ffa:	6878      	ldr	r0, [r7, #4]
 8006ffc:	f7fb fd34 	bl	8002a68 <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007000:	687b      	ldr	r3, [r7, #4]
 8007002:	2202      	movs	r2, #2
 8007004:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 8007008:	687b      	ldr	r3, [r7, #4]
 800700a:	681b      	ldr	r3, [r3, #0]
 800700c:	689b      	ldr	r3, [r3, #8]
 800700e:	687a      	ldr	r2, [r7, #4]
 8007010:	6812      	ldr	r2, [r2, #0]
 8007012:	f423 33a0 	bic.w	r3, r3, #81920	; 0x14000
 8007016:	f023 0307 	bic.w	r3, r3, #7
 800701a:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800701c:	687b      	ldr	r3, [r7, #4]
 800701e:	681a      	ldr	r2, [r3, #0]
 8007020:	687b      	ldr	r3, [r7, #4]
 8007022:	3304      	adds	r3, #4
 8007024:	4619      	mov	r1, r3
 8007026:	4610      	mov	r0, r2
 8007028:	f000 fb5c 	bl	80076e4 <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800702c:	687b      	ldr	r3, [r7, #4]
 800702e:	681b      	ldr	r3, [r3, #0]
 8007030:	689b      	ldr	r3, [r3, #8]
 8007032:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 8007034:	687b      	ldr	r3, [r7, #4]
 8007036:	681b      	ldr	r3, [r3, #0]
 8007038:	699b      	ldr	r3, [r3, #24]
 800703a:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 800703c:	687b      	ldr	r3, [r7, #4]
 800703e:	681b      	ldr	r3, [r3, #0]
 8007040:	6a1b      	ldr	r3, [r3, #32]
 8007042:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 8007044:	683b      	ldr	r3, [r7, #0]
 8007046:	681b      	ldr	r3, [r3, #0]
 8007048:	697a      	ldr	r2, [r7, #20]
 800704a:	4313      	orrs	r3, r2
 800704c:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 800704e:	693b      	ldr	r3, [r7, #16]
 8007050:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007054:	f023 0303 	bic.w	r3, r3, #3
 8007058:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 800705a:	683b      	ldr	r3, [r7, #0]
 800705c:	689a      	ldr	r2, [r3, #8]
 800705e:	683b      	ldr	r3, [r7, #0]
 8007060:	699b      	ldr	r3, [r3, #24]
 8007062:	021b      	lsls	r3, r3, #8
 8007064:	4313      	orrs	r3, r2
 8007066:	693a      	ldr	r2, [r7, #16]
 8007068:	4313      	orrs	r3, r2
 800706a:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 800706c:	693b      	ldr	r3, [r7, #16]
 800706e:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 8007072:	f023 030c 	bic.w	r3, r3, #12
 8007076:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 8007078:	693b      	ldr	r3, [r7, #16]
 800707a:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800707e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8007082:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 8007084:	683b      	ldr	r3, [r7, #0]
 8007086:	68da      	ldr	r2, [r3, #12]
 8007088:	683b      	ldr	r3, [r7, #0]
 800708a:	69db      	ldr	r3, [r3, #28]
 800708c:	021b      	lsls	r3, r3, #8
 800708e:	4313      	orrs	r3, r2
 8007090:	693a      	ldr	r2, [r7, #16]
 8007092:	4313      	orrs	r3, r2
 8007094:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 8007096:	683b      	ldr	r3, [r7, #0]
 8007098:	691b      	ldr	r3, [r3, #16]
 800709a:	011a      	lsls	r2, r3, #4
 800709c:	683b      	ldr	r3, [r7, #0]
 800709e:	6a1b      	ldr	r3, [r3, #32]
 80070a0:	031b      	lsls	r3, r3, #12
 80070a2:	4313      	orrs	r3, r2
 80070a4:	693a      	ldr	r2, [r7, #16]
 80070a6:	4313      	orrs	r3, r2
 80070a8:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 80070aa:	68fb      	ldr	r3, [r7, #12]
 80070ac:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 80070b0:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 80070b2:	68fb      	ldr	r3, [r7, #12]
 80070b4:	f023 0388 	bic.w	r3, r3, #136	; 0x88
 80070b8:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 80070ba:	683b      	ldr	r3, [r7, #0]
 80070bc:	685a      	ldr	r2, [r3, #4]
 80070be:	683b      	ldr	r3, [r7, #0]
 80070c0:	695b      	ldr	r3, [r3, #20]
 80070c2:	011b      	lsls	r3, r3, #4
 80070c4:	4313      	orrs	r3, r2
 80070c6:	68fa      	ldr	r2, [r7, #12]
 80070c8:	4313      	orrs	r3, r2
 80070ca:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 80070cc:	687b      	ldr	r3, [r7, #4]
 80070ce:	681b      	ldr	r3, [r3, #0]
 80070d0:	697a      	ldr	r2, [r7, #20]
 80070d2:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 80070d4:	687b      	ldr	r3, [r7, #4]
 80070d6:	681b      	ldr	r3, [r3, #0]
 80070d8:	693a      	ldr	r2, [r7, #16]
 80070da:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 80070dc:	687b      	ldr	r3, [r7, #4]
 80070de:	681b      	ldr	r3, [r3, #0]
 80070e0:	68fa      	ldr	r2, [r7, #12]
 80070e2:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80070e4:	687b      	ldr	r3, [r7, #4]
 80070e6:	2201      	movs	r2, #1
 80070e8:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 80070ec:	687b      	ldr	r3, [r7, #4]
 80070ee:	2201      	movs	r2, #1
 80070f0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 80070f4:	687b      	ldr	r3, [r7, #4]
 80070f6:	2201      	movs	r2, #1
 80070f8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 80070fc:	687b      	ldr	r3, [r7, #4]
 80070fe:	2201      	movs	r2, #1
 8007100:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8007104:	687b      	ldr	r3, [r7, #4]
 8007106:	2201      	movs	r2, #1
 8007108:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800710c:	687b      	ldr	r3, [r7, #4]
 800710e:	2201      	movs	r2, #1
 8007110:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8007114:	2300      	movs	r3, #0
}
 8007116:	4618      	mov	r0, r3
 8007118:	3718      	adds	r7, #24
 800711a:	46bd      	mov	sp, r7
 800711c:	bd80      	pop	{r7, pc}

0800711e <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800711e:	b580      	push	{r7, lr}
 8007120:	b082      	sub	sp, #8
 8007122:	af00      	add	r7, sp, #0
 8007124:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8007126:	687b      	ldr	r3, [r7, #4]
 8007128:	681b      	ldr	r3, [r3, #0]
 800712a:	691b      	ldr	r3, [r3, #16]
 800712c:	f003 0302 	and.w	r3, r3, #2
 8007130:	2b02      	cmp	r3, #2
 8007132:	d122      	bne.n	800717a <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8007134:	687b      	ldr	r3, [r7, #4]
 8007136:	681b      	ldr	r3, [r3, #0]
 8007138:	68db      	ldr	r3, [r3, #12]
 800713a:	f003 0302 	and.w	r3, r3, #2
 800713e:	2b02      	cmp	r3, #2
 8007140:	d11b      	bne.n	800717a <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8007142:	687b      	ldr	r3, [r7, #4]
 8007144:	681b      	ldr	r3, [r3, #0]
 8007146:	f06f 0202 	mvn.w	r2, #2
 800714a:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800714c:	687b      	ldr	r3, [r7, #4]
 800714e:	2201      	movs	r2, #1
 8007150:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8007152:	687b      	ldr	r3, [r7, #4]
 8007154:	681b      	ldr	r3, [r3, #0]
 8007156:	699b      	ldr	r3, [r3, #24]
 8007158:	f003 0303 	and.w	r3, r3, #3
 800715c:	2b00      	cmp	r3, #0
 800715e:	d003      	beq.n	8007168 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8007160:	6878      	ldr	r0, [r7, #4]
 8007162:	f000 faa1 	bl	80076a8 <HAL_TIM_IC_CaptureCallback>
 8007166:	e005      	b.n	8007174 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8007168:	6878      	ldr	r0, [r7, #4]
 800716a:	f000 fa93 	bl	8007694 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800716e:	6878      	ldr	r0, [r7, #4]
 8007170:	f000 faa4 	bl	80076bc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007174:	687b      	ldr	r3, [r7, #4]
 8007176:	2200      	movs	r2, #0
 8007178:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800717a:	687b      	ldr	r3, [r7, #4]
 800717c:	681b      	ldr	r3, [r3, #0]
 800717e:	691b      	ldr	r3, [r3, #16]
 8007180:	f003 0304 	and.w	r3, r3, #4
 8007184:	2b04      	cmp	r3, #4
 8007186:	d122      	bne.n	80071ce <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8007188:	687b      	ldr	r3, [r7, #4]
 800718a:	681b      	ldr	r3, [r3, #0]
 800718c:	68db      	ldr	r3, [r3, #12]
 800718e:	f003 0304 	and.w	r3, r3, #4
 8007192:	2b04      	cmp	r3, #4
 8007194:	d11b      	bne.n	80071ce <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8007196:	687b      	ldr	r3, [r7, #4]
 8007198:	681b      	ldr	r3, [r3, #0]
 800719a:	f06f 0204 	mvn.w	r2, #4
 800719e:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80071a0:	687b      	ldr	r3, [r7, #4]
 80071a2:	2202      	movs	r2, #2
 80071a4:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80071a6:	687b      	ldr	r3, [r7, #4]
 80071a8:	681b      	ldr	r3, [r3, #0]
 80071aa:	699b      	ldr	r3, [r3, #24]
 80071ac:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80071b0:	2b00      	cmp	r3, #0
 80071b2:	d003      	beq.n	80071bc <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80071b4:	6878      	ldr	r0, [r7, #4]
 80071b6:	f000 fa77 	bl	80076a8 <HAL_TIM_IC_CaptureCallback>
 80071ba:	e005      	b.n	80071c8 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80071bc:	6878      	ldr	r0, [r7, #4]
 80071be:	f000 fa69 	bl	8007694 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80071c2:	6878      	ldr	r0, [r7, #4]
 80071c4:	f000 fa7a 	bl	80076bc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80071c8:	687b      	ldr	r3, [r7, #4]
 80071ca:	2200      	movs	r2, #0
 80071cc:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80071ce:	687b      	ldr	r3, [r7, #4]
 80071d0:	681b      	ldr	r3, [r3, #0]
 80071d2:	691b      	ldr	r3, [r3, #16]
 80071d4:	f003 0308 	and.w	r3, r3, #8
 80071d8:	2b08      	cmp	r3, #8
 80071da:	d122      	bne.n	8007222 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80071dc:	687b      	ldr	r3, [r7, #4]
 80071de:	681b      	ldr	r3, [r3, #0]
 80071e0:	68db      	ldr	r3, [r3, #12]
 80071e2:	f003 0308 	and.w	r3, r3, #8
 80071e6:	2b08      	cmp	r3, #8
 80071e8:	d11b      	bne.n	8007222 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80071ea:	687b      	ldr	r3, [r7, #4]
 80071ec:	681b      	ldr	r3, [r3, #0]
 80071ee:	f06f 0208 	mvn.w	r2, #8
 80071f2:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80071f4:	687b      	ldr	r3, [r7, #4]
 80071f6:	2204      	movs	r2, #4
 80071f8:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80071fa:	687b      	ldr	r3, [r7, #4]
 80071fc:	681b      	ldr	r3, [r3, #0]
 80071fe:	69db      	ldr	r3, [r3, #28]
 8007200:	f003 0303 	and.w	r3, r3, #3
 8007204:	2b00      	cmp	r3, #0
 8007206:	d003      	beq.n	8007210 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8007208:	6878      	ldr	r0, [r7, #4]
 800720a:	f000 fa4d 	bl	80076a8 <HAL_TIM_IC_CaptureCallback>
 800720e:	e005      	b.n	800721c <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8007210:	6878      	ldr	r0, [r7, #4]
 8007212:	f000 fa3f 	bl	8007694 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007216:	6878      	ldr	r0, [r7, #4]
 8007218:	f000 fa50 	bl	80076bc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800721c:	687b      	ldr	r3, [r7, #4]
 800721e:	2200      	movs	r2, #0
 8007220:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8007222:	687b      	ldr	r3, [r7, #4]
 8007224:	681b      	ldr	r3, [r3, #0]
 8007226:	691b      	ldr	r3, [r3, #16]
 8007228:	f003 0310 	and.w	r3, r3, #16
 800722c:	2b10      	cmp	r3, #16
 800722e:	d122      	bne.n	8007276 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8007230:	687b      	ldr	r3, [r7, #4]
 8007232:	681b      	ldr	r3, [r3, #0]
 8007234:	68db      	ldr	r3, [r3, #12]
 8007236:	f003 0310 	and.w	r3, r3, #16
 800723a:	2b10      	cmp	r3, #16
 800723c:	d11b      	bne.n	8007276 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800723e:	687b      	ldr	r3, [r7, #4]
 8007240:	681b      	ldr	r3, [r3, #0]
 8007242:	f06f 0210 	mvn.w	r2, #16
 8007246:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8007248:	687b      	ldr	r3, [r7, #4]
 800724a:	2208      	movs	r2, #8
 800724c:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800724e:	687b      	ldr	r3, [r7, #4]
 8007250:	681b      	ldr	r3, [r3, #0]
 8007252:	69db      	ldr	r3, [r3, #28]
 8007254:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8007258:	2b00      	cmp	r3, #0
 800725a:	d003      	beq.n	8007264 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800725c:	6878      	ldr	r0, [r7, #4]
 800725e:	f000 fa23 	bl	80076a8 <HAL_TIM_IC_CaptureCallback>
 8007262:	e005      	b.n	8007270 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8007264:	6878      	ldr	r0, [r7, #4]
 8007266:	f000 fa15 	bl	8007694 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800726a:	6878      	ldr	r0, [r7, #4]
 800726c:	f000 fa26 	bl	80076bc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007270:	687b      	ldr	r3, [r7, #4]
 8007272:	2200      	movs	r2, #0
 8007274:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8007276:	687b      	ldr	r3, [r7, #4]
 8007278:	681b      	ldr	r3, [r3, #0]
 800727a:	691b      	ldr	r3, [r3, #16]
 800727c:	f003 0301 	and.w	r3, r3, #1
 8007280:	2b01      	cmp	r3, #1
 8007282:	d10e      	bne.n	80072a2 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8007284:	687b      	ldr	r3, [r7, #4]
 8007286:	681b      	ldr	r3, [r3, #0]
 8007288:	68db      	ldr	r3, [r3, #12]
 800728a:	f003 0301 	and.w	r3, r3, #1
 800728e:	2b01      	cmp	r3, #1
 8007290:	d107      	bne.n	80072a2 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8007292:	687b      	ldr	r3, [r7, #4]
 8007294:	681b      	ldr	r3, [r3, #0]
 8007296:	f06f 0201 	mvn.w	r2, #1
 800729a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800729c:	6878      	ldr	r0, [r7, #4]
 800729e:	f000 f9ef 	bl	8007680 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80072a2:	687b      	ldr	r3, [r7, #4]
 80072a4:	681b      	ldr	r3, [r3, #0]
 80072a6:	691b      	ldr	r3, [r3, #16]
 80072a8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80072ac:	2b80      	cmp	r3, #128	; 0x80
 80072ae:	d10e      	bne.n	80072ce <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80072b0:	687b      	ldr	r3, [r7, #4]
 80072b2:	681b      	ldr	r3, [r3, #0]
 80072b4:	68db      	ldr	r3, [r3, #12]
 80072b6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80072ba:	2b80      	cmp	r3, #128	; 0x80
 80072bc:	d107      	bne.n	80072ce <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80072be:	687b      	ldr	r3, [r7, #4]
 80072c0:	681b      	ldr	r3, [r3, #0]
 80072c2:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80072c6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80072c8:	6878      	ldr	r0, [r7, #4]
 80072ca:	f000 fd5d 	bl	8007d88 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 80072ce:	687b      	ldr	r3, [r7, #4]
 80072d0:	681b      	ldr	r3, [r3, #0]
 80072d2:	691b      	ldr	r3, [r3, #16]
 80072d4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80072d8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80072dc:	d10e      	bne.n	80072fc <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80072de:	687b      	ldr	r3, [r7, #4]
 80072e0:	681b      	ldr	r3, [r3, #0]
 80072e2:	68db      	ldr	r3, [r3, #12]
 80072e4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80072e8:	2b80      	cmp	r3, #128	; 0x80
 80072ea:	d107      	bne.n	80072fc <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 80072ec:	687b      	ldr	r3, [r7, #4]
 80072ee:	681b      	ldr	r3, [r3, #0]
 80072f0:	f46f 7280 	mvn.w	r2, #256	; 0x100
 80072f4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 80072f6:	6878      	ldr	r0, [r7, #4]
 80072f8:	f000 fd50 	bl	8007d9c <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80072fc:	687b      	ldr	r3, [r7, #4]
 80072fe:	681b      	ldr	r3, [r3, #0]
 8007300:	691b      	ldr	r3, [r3, #16]
 8007302:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007306:	2b40      	cmp	r3, #64	; 0x40
 8007308:	d10e      	bne.n	8007328 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800730a:	687b      	ldr	r3, [r7, #4]
 800730c:	681b      	ldr	r3, [r3, #0]
 800730e:	68db      	ldr	r3, [r3, #12]
 8007310:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007314:	2b40      	cmp	r3, #64	; 0x40
 8007316:	d107      	bne.n	8007328 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8007318:	687b      	ldr	r3, [r7, #4]
 800731a:	681b      	ldr	r3, [r3, #0]
 800731c:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8007320:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8007322:	6878      	ldr	r0, [r7, #4]
 8007324:	f000 f9d4 	bl	80076d0 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8007328:	687b      	ldr	r3, [r7, #4]
 800732a:	681b      	ldr	r3, [r3, #0]
 800732c:	691b      	ldr	r3, [r3, #16]
 800732e:	f003 0320 	and.w	r3, r3, #32
 8007332:	2b20      	cmp	r3, #32
 8007334:	d10e      	bne.n	8007354 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8007336:	687b      	ldr	r3, [r7, #4]
 8007338:	681b      	ldr	r3, [r3, #0]
 800733a:	68db      	ldr	r3, [r3, #12]
 800733c:	f003 0320 	and.w	r3, r3, #32
 8007340:	2b20      	cmp	r3, #32
 8007342:	d107      	bne.n	8007354 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8007344:	687b      	ldr	r3, [r7, #4]
 8007346:	681b      	ldr	r3, [r3, #0]
 8007348:	f06f 0220 	mvn.w	r2, #32
 800734c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800734e:	6878      	ldr	r0, [r7, #4]
 8007350:	f000 fd10 	bl	8007d74 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Encoder index event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_IDX) != RESET)
 8007354:	687b      	ldr	r3, [r7, #4]
 8007356:	681b      	ldr	r3, [r3, #0]
 8007358:	691b      	ldr	r3, [r3, #16]
 800735a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800735e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8007362:	d10f      	bne.n	8007384 <HAL_TIM_IRQHandler+0x266>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_IDX) != RESET)
 8007364:	687b      	ldr	r3, [r7, #4]
 8007366:	681b      	ldr	r3, [r3, #0]
 8007368:	68db      	ldr	r3, [r3, #12]
 800736a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800736e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8007372:	d107      	bne.n	8007384 <HAL_TIM_IRQHandler+0x266>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_IDX);
 8007374:	687b      	ldr	r3, [r7, #4]
 8007376:	681b      	ldr	r3, [r3, #0]
 8007378:	f46f 1280 	mvn.w	r2, #1048576	; 0x100000
 800737c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->EncoderIndexCallback(htim);
#else
      HAL_TIMEx_EncoderIndexCallback(htim);
 800737e:	6878      	ldr	r0, [r7, #4]
 8007380:	f000 fd16 	bl	8007db0 <HAL_TIMEx_EncoderIndexCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Direction change event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_DIR) != RESET)
 8007384:	687b      	ldr	r3, [r7, #4]
 8007386:	681b      	ldr	r3, [r3, #0]
 8007388:	691b      	ldr	r3, [r3, #16]
 800738a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800738e:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8007392:	d10f      	bne.n	80073b4 <HAL_TIM_IRQHandler+0x296>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_DIR) != RESET)
 8007394:	687b      	ldr	r3, [r7, #4]
 8007396:	681b      	ldr	r3, [r3, #0]
 8007398:	68db      	ldr	r3, [r3, #12]
 800739a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800739e:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80073a2:	d107      	bne.n	80073b4 <HAL_TIM_IRQHandler+0x296>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_DIR);
 80073a4:	687b      	ldr	r3, [r7, #4]
 80073a6:	681b      	ldr	r3, [r3, #0]
 80073a8:	f46f 1200 	mvn.w	r2, #2097152	; 0x200000
 80073ac:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->DirectionChangeCallback(htim);
#else
      HAL_TIMEx_DirectionChangeCallback(htim);
 80073ae:	6878      	ldr	r0, [r7, #4]
 80073b0:	f000 fd08 	bl	8007dc4 <HAL_TIMEx_DirectionChangeCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Index error event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_IERR) != RESET)
 80073b4:	687b      	ldr	r3, [r7, #4]
 80073b6:	681b      	ldr	r3, [r3, #0]
 80073b8:	691b      	ldr	r3, [r3, #16]
 80073ba:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80073be:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80073c2:	d10f      	bne.n	80073e4 <HAL_TIM_IRQHandler+0x2c6>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_IERR) != RESET)
 80073c4:	687b      	ldr	r3, [r7, #4]
 80073c6:	681b      	ldr	r3, [r3, #0]
 80073c8:	68db      	ldr	r3, [r3, #12]
 80073ca:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80073ce:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80073d2:	d107      	bne.n	80073e4 <HAL_TIM_IRQHandler+0x2c6>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_IERR);
 80073d4:	687b      	ldr	r3, [r7, #4]
 80073d6:	681b      	ldr	r3, [r3, #0]
 80073d8:	f46f 0280 	mvn.w	r2, #4194304	; 0x400000
 80073dc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->IndexErrorCallback(htim);
#else
      HAL_TIMEx_IndexErrorCallback(htim);
 80073de:	6878      	ldr	r0, [r7, #4]
 80073e0:	f000 fcfa 	bl	8007dd8 <HAL_TIMEx_IndexErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Transition error event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TERR) != RESET)
 80073e4:	687b      	ldr	r3, [r7, #4]
 80073e6:	681b      	ldr	r3, [r3, #0]
 80073e8:	691b      	ldr	r3, [r3, #16]
 80073ea:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80073ee:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80073f2:	d10f      	bne.n	8007414 <HAL_TIM_IRQHandler+0x2f6>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TERR) != RESET)
 80073f4:	687b      	ldr	r3, [r7, #4]
 80073f6:	681b      	ldr	r3, [r3, #0]
 80073f8:	68db      	ldr	r3, [r3, #12]
 80073fa:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80073fe:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8007402:	d107      	bne.n	8007414 <HAL_TIM_IRQHandler+0x2f6>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_TERR);
 8007404:	687b      	ldr	r3, [r7, #4]
 8007406:	681b      	ldr	r3, [r3, #0]
 8007408:	f46f 0200 	mvn.w	r2, #8388608	; 0x800000
 800740c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TransitionErrorCallback(htim);
#else
      HAL_TIMEx_TransitionErrorCallback(htim);
 800740e:	6878      	ldr	r0, [r7, #4]
 8007410:	f000 fcec 	bl	8007dec <HAL_TIMEx_TransitionErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8007414:	bf00      	nop
 8007416:	3708      	adds	r7, #8
 8007418:	46bd      	mov	sp, r7
 800741a:	bd80      	pop	{r7, pc}

0800741c <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800741c:	b580      	push	{r7, lr}
 800741e:	b084      	sub	sp, #16
 8007420:	af00      	add	r7, sp, #0
 8007422:	6078      	str	r0, [r7, #4]
 8007424:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8007426:	687b      	ldr	r3, [r7, #4]
 8007428:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800742c:	2b01      	cmp	r3, #1
 800742e:	d101      	bne.n	8007434 <HAL_TIM_ConfigClockSource+0x18>
 8007430:	2302      	movs	r3, #2
 8007432:	e0d2      	b.n	80075da <HAL_TIM_ConfigClockSource+0x1be>
 8007434:	687b      	ldr	r3, [r7, #4]
 8007436:	2201      	movs	r2, #1
 8007438:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800743c:	687b      	ldr	r3, [r7, #4]
 800743e:	2202      	movs	r2, #2
 8007440:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8007444:	687b      	ldr	r3, [r7, #4]
 8007446:	681b      	ldr	r3, [r3, #0]
 8007448:	689b      	ldr	r3, [r3, #8]
 800744a:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800744c:	68fb      	ldr	r3, [r7, #12]
 800744e:	f423 1344 	bic.w	r3, r3, #3211264	; 0x310000
 8007452:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8007456:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8007458:	68fb      	ldr	r3, [r7, #12]
 800745a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800745e:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8007460:	687b      	ldr	r3, [r7, #4]
 8007462:	681b      	ldr	r3, [r3, #0]
 8007464:	68fa      	ldr	r2, [r7, #12]
 8007466:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8007468:	683b      	ldr	r3, [r7, #0]
 800746a:	681b      	ldr	r3, [r3, #0]
 800746c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007470:	f000 80a9 	beq.w	80075c6 <HAL_TIM_ConfigClockSource+0x1aa>
 8007474:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007478:	d81a      	bhi.n	80074b0 <HAL_TIM_ConfigClockSource+0x94>
 800747a:	2b30      	cmp	r3, #48	; 0x30
 800747c:	f000 809a 	beq.w	80075b4 <HAL_TIM_ConfigClockSource+0x198>
 8007480:	2b30      	cmp	r3, #48	; 0x30
 8007482:	d809      	bhi.n	8007498 <HAL_TIM_ConfigClockSource+0x7c>
 8007484:	2b10      	cmp	r3, #16
 8007486:	f000 8095 	beq.w	80075b4 <HAL_TIM_ConfigClockSource+0x198>
 800748a:	2b20      	cmp	r3, #32
 800748c:	f000 8092 	beq.w	80075b4 <HAL_TIM_ConfigClockSource+0x198>
 8007490:	2b00      	cmp	r3, #0
 8007492:	f000 808f 	beq.w	80075b4 <HAL_TIM_ConfigClockSource+0x198>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
      break;
    }

    default:
      break;
 8007496:	e097      	b.n	80075c8 <HAL_TIM_ConfigClockSource+0x1ac>
  switch (sClockSourceConfig->ClockSource)
 8007498:	2b50      	cmp	r3, #80	; 0x50
 800749a:	d05b      	beq.n	8007554 <HAL_TIM_ConfigClockSource+0x138>
 800749c:	2b50      	cmp	r3, #80	; 0x50
 800749e:	d802      	bhi.n	80074a6 <HAL_TIM_ConfigClockSource+0x8a>
 80074a0:	2b40      	cmp	r3, #64	; 0x40
 80074a2:	d077      	beq.n	8007594 <HAL_TIM_ConfigClockSource+0x178>
      break;
 80074a4:	e090      	b.n	80075c8 <HAL_TIM_ConfigClockSource+0x1ac>
  switch (sClockSourceConfig->ClockSource)
 80074a6:	2b60      	cmp	r3, #96	; 0x60
 80074a8:	d064      	beq.n	8007574 <HAL_TIM_ConfigClockSource+0x158>
 80074aa:	2b70      	cmp	r3, #112	; 0x70
 80074ac:	d028      	beq.n	8007500 <HAL_TIM_ConfigClockSource+0xe4>
      break;
 80074ae:	e08b      	b.n	80075c8 <HAL_TIM_ConfigClockSource+0x1ac>
  switch (sClockSourceConfig->ClockSource)
 80074b0:	4a4c      	ldr	r2, [pc, #304]	; (80075e4 <HAL_TIM_ConfigClockSource+0x1c8>)
 80074b2:	4293      	cmp	r3, r2
 80074b4:	d07e      	beq.n	80075b4 <HAL_TIM_ConfigClockSource+0x198>
 80074b6:	4a4b      	ldr	r2, [pc, #300]	; (80075e4 <HAL_TIM_ConfigClockSource+0x1c8>)
 80074b8:	4293      	cmp	r3, r2
 80074ba:	d810      	bhi.n	80074de <HAL_TIM_ConfigClockSource+0xc2>
 80074bc:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80074c0:	d078      	beq.n	80075b4 <HAL_TIM_ConfigClockSource+0x198>
 80074c2:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80074c6:	d803      	bhi.n	80074d0 <HAL_TIM_ConfigClockSource+0xb4>
 80074c8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80074cc:	d02f      	beq.n	800752e <HAL_TIM_ConfigClockSource+0x112>
      break;
 80074ce:	e07b      	b.n	80075c8 <HAL_TIM_ConfigClockSource+0x1ac>
  switch (sClockSourceConfig->ClockSource)
 80074d0:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 80074d4:	d06e      	beq.n	80075b4 <HAL_TIM_ConfigClockSource+0x198>
 80074d6:	4a44      	ldr	r2, [pc, #272]	; (80075e8 <HAL_TIM_ConfigClockSource+0x1cc>)
 80074d8:	4293      	cmp	r3, r2
 80074da:	d06b      	beq.n	80075b4 <HAL_TIM_ConfigClockSource+0x198>
      break;
 80074dc:	e074      	b.n	80075c8 <HAL_TIM_ConfigClockSource+0x1ac>
  switch (sClockSourceConfig->ClockSource)
 80074de:	4a43      	ldr	r2, [pc, #268]	; (80075ec <HAL_TIM_ConfigClockSource+0x1d0>)
 80074e0:	4293      	cmp	r3, r2
 80074e2:	d067      	beq.n	80075b4 <HAL_TIM_ConfigClockSource+0x198>
 80074e4:	4a41      	ldr	r2, [pc, #260]	; (80075ec <HAL_TIM_ConfigClockSource+0x1d0>)
 80074e6:	4293      	cmp	r3, r2
 80074e8:	d803      	bhi.n	80074f2 <HAL_TIM_ConfigClockSource+0xd6>
 80074ea:	4a41      	ldr	r2, [pc, #260]	; (80075f0 <HAL_TIM_ConfigClockSource+0x1d4>)
 80074ec:	4293      	cmp	r3, r2
 80074ee:	d061      	beq.n	80075b4 <HAL_TIM_ConfigClockSource+0x198>
      break;
 80074f0:	e06a      	b.n	80075c8 <HAL_TIM_ConfigClockSource+0x1ac>
  switch (sClockSourceConfig->ClockSource)
 80074f2:	4a40      	ldr	r2, [pc, #256]	; (80075f4 <HAL_TIM_ConfigClockSource+0x1d8>)
 80074f4:	4293      	cmp	r3, r2
 80074f6:	d05d      	beq.n	80075b4 <HAL_TIM_ConfigClockSource+0x198>
 80074f8:	4a3f      	ldr	r2, [pc, #252]	; (80075f8 <HAL_TIM_ConfigClockSource+0x1dc>)
 80074fa:	4293      	cmp	r3, r2
 80074fc:	d05a      	beq.n	80075b4 <HAL_TIM_ConfigClockSource+0x198>
      break;
 80074fe:	e063      	b.n	80075c8 <HAL_TIM_ConfigClockSource+0x1ac>
      TIM_ETR_SetConfig(htim->Instance,
 8007500:	687b      	ldr	r3, [r7, #4]
 8007502:	6818      	ldr	r0, [r3, #0]
 8007504:	683b      	ldr	r3, [r7, #0]
 8007506:	6899      	ldr	r1, [r3, #8]
 8007508:	683b      	ldr	r3, [r7, #0]
 800750a:	685a      	ldr	r2, [r3, #4]
 800750c:	683b      	ldr	r3, [r7, #0]
 800750e:	68db      	ldr	r3, [r3, #12]
 8007510:	f000 fac8 	bl	8007aa4 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8007514:	687b      	ldr	r3, [r7, #4]
 8007516:	681b      	ldr	r3, [r3, #0]
 8007518:	689b      	ldr	r3, [r3, #8]
 800751a:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800751c:	68fb      	ldr	r3, [r7, #12]
 800751e:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8007522:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 8007524:	687b      	ldr	r3, [r7, #4]
 8007526:	681b      	ldr	r3, [r3, #0]
 8007528:	68fa      	ldr	r2, [r7, #12]
 800752a:	609a      	str	r2, [r3, #8]
      break;
 800752c:	e04c      	b.n	80075c8 <HAL_TIM_ConfigClockSource+0x1ac>
      TIM_ETR_SetConfig(htim->Instance,
 800752e:	687b      	ldr	r3, [r7, #4]
 8007530:	6818      	ldr	r0, [r3, #0]
 8007532:	683b      	ldr	r3, [r7, #0]
 8007534:	6899      	ldr	r1, [r3, #8]
 8007536:	683b      	ldr	r3, [r7, #0]
 8007538:	685a      	ldr	r2, [r3, #4]
 800753a:	683b      	ldr	r3, [r7, #0]
 800753c:	68db      	ldr	r3, [r3, #12]
 800753e:	f000 fab1 	bl	8007aa4 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8007542:	687b      	ldr	r3, [r7, #4]
 8007544:	681b      	ldr	r3, [r3, #0]
 8007546:	689a      	ldr	r2, [r3, #8]
 8007548:	687b      	ldr	r3, [r7, #4]
 800754a:	681b      	ldr	r3, [r3, #0]
 800754c:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8007550:	609a      	str	r2, [r3, #8]
      break;
 8007552:	e039      	b.n	80075c8 <HAL_TIM_ConfigClockSource+0x1ac>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8007554:	687b      	ldr	r3, [r7, #4]
 8007556:	6818      	ldr	r0, [r3, #0]
 8007558:	683b      	ldr	r3, [r7, #0]
 800755a:	6859      	ldr	r1, [r3, #4]
 800755c:	683b      	ldr	r3, [r7, #0]
 800755e:	68db      	ldr	r3, [r3, #12]
 8007560:	461a      	mov	r2, r3
 8007562:	f000 fa23 	bl	80079ac <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8007566:	687b      	ldr	r3, [r7, #4]
 8007568:	681b      	ldr	r3, [r3, #0]
 800756a:	2150      	movs	r1, #80	; 0x50
 800756c:	4618      	mov	r0, r3
 800756e:	f000 fa7c 	bl	8007a6a <TIM_ITRx_SetConfig>
      break;
 8007572:	e029      	b.n	80075c8 <HAL_TIM_ConfigClockSource+0x1ac>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8007574:	687b      	ldr	r3, [r7, #4]
 8007576:	6818      	ldr	r0, [r3, #0]
 8007578:	683b      	ldr	r3, [r7, #0]
 800757a:	6859      	ldr	r1, [r3, #4]
 800757c:	683b      	ldr	r3, [r7, #0]
 800757e:	68db      	ldr	r3, [r3, #12]
 8007580:	461a      	mov	r2, r3
 8007582:	f000 fa42 	bl	8007a0a <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8007586:	687b      	ldr	r3, [r7, #4]
 8007588:	681b      	ldr	r3, [r3, #0]
 800758a:	2160      	movs	r1, #96	; 0x60
 800758c:	4618      	mov	r0, r3
 800758e:	f000 fa6c 	bl	8007a6a <TIM_ITRx_SetConfig>
      break;
 8007592:	e019      	b.n	80075c8 <HAL_TIM_ConfigClockSource+0x1ac>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8007594:	687b      	ldr	r3, [r7, #4]
 8007596:	6818      	ldr	r0, [r3, #0]
 8007598:	683b      	ldr	r3, [r7, #0]
 800759a:	6859      	ldr	r1, [r3, #4]
 800759c:	683b      	ldr	r3, [r7, #0]
 800759e:	68db      	ldr	r3, [r3, #12]
 80075a0:	461a      	mov	r2, r3
 80075a2:	f000 fa03 	bl	80079ac <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80075a6:	687b      	ldr	r3, [r7, #4]
 80075a8:	681b      	ldr	r3, [r3, #0]
 80075aa:	2140      	movs	r1, #64	; 0x40
 80075ac:	4618      	mov	r0, r3
 80075ae:	f000 fa5c 	bl	8007a6a <TIM_ITRx_SetConfig>
      break;
 80075b2:	e009      	b.n	80075c8 <HAL_TIM_ConfigClockSource+0x1ac>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80075b4:	687b      	ldr	r3, [r7, #4]
 80075b6:	681a      	ldr	r2, [r3, #0]
 80075b8:	683b      	ldr	r3, [r7, #0]
 80075ba:	681b      	ldr	r3, [r3, #0]
 80075bc:	4619      	mov	r1, r3
 80075be:	4610      	mov	r0, r2
 80075c0:	f000 fa53 	bl	8007a6a <TIM_ITRx_SetConfig>
      break;
 80075c4:	e000      	b.n	80075c8 <HAL_TIM_ConfigClockSource+0x1ac>
      break;
 80075c6:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80075c8:	687b      	ldr	r3, [r7, #4]
 80075ca:	2201      	movs	r2, #1
 80075cc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80075d0:	687b      	ldr	r3, [r7, #4]
 80075d2:	2200      	movs	r2, #0
 80075d4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80075d8:	2300      	movs	r3, #0
}
 80075da:	4618      	mov	r0, r3
 80075dc:	3710      	adds	r7, #16
 80075de:	46bd      	mov	sp, r7
 80075e0:	bd80      	pop	{r7, pc}
 80075e2:	bf00      	nop
 80075e4:	00100030 	.word	0x00100030
 80075e8:	00100020 	.word	0x00100020
 80075ec:	00100050 	.word	0x00100050
 80075f0:	00100040 	.word	0x00100040
 80075f4:	00100060 	.word	0x00100060
 80075f8:	00100070 	.word	0x00100070

080075fc <HAL_TIM_SlaveConfigSynchro>:
  *         timer input or external trigger input) and the Slave mode
  *         (Disable, Reset, Gated, Trigger, External clock mode 1, Reset + Trigger, Gated + Reset).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_SlaveConfigSynchro(TIM_HandleTypeDef *htim, TIM_SlaveConfigTypeDef *sSlaveConfig)
{
 80075fc:	b580      	push	{r7, lr}
 80075fe:	b082      	sub	sp, #8
 8007600:	af00      	add	r7, sp, #0
 8007602:	6078      	str	r0, [r7, #4]
 8007604:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_SLAVE_INSTANCE(htim->Instance));
  assert_param(IS_TIM_SLAVE_MODE(sSlaveConfig->SlaveMode));
  assert_param(IS_TIM_TRIGGER_INSTANCE(htim->Instance, sSlaveConfig->InputTrigger));

  __HAL_LOCK(htim);
 8007606:	687b      	ldr	r3, [r7, #4]
 8007608:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800760c:	2b01      	cmp	r3, #1
 800760e:	d101      	bne.n	8007614 <HAL_TIM_SlaveConfigSynchro+0x18>
 8007610:	2302      	movs	r3, #2
 8007612:	e031      	b.n	8007678 <HAL_TIM_SlaveConfigSynchro+0x7c>
 8007614:	687b      	ldr	r3, [r7, #4]
 8007616:	2201      	movs	r2, #1
 8007618:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800761c:	687b      	ldr	r3, [r7, #4]
 800761e:	2202      	movs	r2, #2
 8007620:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  if (TIM_SlaveTimer_SetConfig(htim, sSlaveConfig) != HAL_OK)
 8007624:	6839      	ldr	r1, [r7, #0]
 8007626:	6878      	ldr	r0, [r7, #4]
 8007628:	f000 f904 	bl	8007834 <TIM_SlaveTimer_SetConfig>
 800762c:	4603      	mov	r3, r0
 800762e:	2b00      	cmp	r3, #0
 8007630:	d009      	beq.n	8007646 <HAL_TIM_SlaveConfigSynchro+0x4a>
  {
    htim->State = HAL_TIM_STATE_READY;
 8007632:	687b      	ldr	r3, [r7, #4]
 8007634:	2201      	movs	r2, #1
 8007636:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    __HAL_UNLOCK(htim);
 800763a:	687b      	ldr	r3, [r7, #4]
 800763c:	2200      	movs	r2, #0
 800763e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    return HAL_ERROR;
 8007642:	2301      	movs	r3, #1
 8007644:	e018      	b.n	8007678 <HAL_TIM_SlaveConfigSynchro+0x7c>
  }

  /* Disable Trigger Interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_TRIGGER);
 8007646:	687b      	ldr	r3, [r7, #4]
 8007648:	681b      	ldr	r3, [r3, #0]
 800764a:	68da      	ldr	r2, [r3, #12]
 800764c:	687b      	ldr	r3, [r7, #4]
 800764e:	681b      	ldr	r3, [r3, #0]
 8007650:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8007654:	60da      	str	r2, [r3, #12]

  /* Disable Trigger DMA request */
  __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_TRIGGER);
 8007656:	687b      	ldr	r3, [r7, #4]
 8007658:	681b      	ldr	r3, [r3, #0]
 800765a:	68da      	ldr	r2, [r3, #12]
 800765c:	687b      	ldr	r3, [r7, #4]
 800765e:	681b      	ldr	r3, [r3, #0]
 8007660:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8007664:	60da      	str	r2, [r3, #12]

  htim->State = HAL_TIM_STATE_READY;
 8007666:	687b      	ldr	r3, [r7, #4]
 8007668:	2201      	movs	r2, #1
 800766a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800766e:	687b      	ldr	r3, [r7, #4]
 8007670:	2200      	movs	r2, #0
 8007672:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8007676:	2300      	movs	r3, #0
}
 8007678:	4618      	mov	r0, r3
 800767a:	3708      	adds	r7, #8
 800767c:	46bd      	mov	sp, r7
 800767e:	bd80      	pop	{r7, pc}

08007680 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8007680:	b480      	push	{r7}
 8007682:	b083      	sub	sp, #12
 8007684:	af00      	add	r7, sp, #0
 8007686:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 8007688:	bf00      	nop
 800768a:	370c      	adds	r7, #12
 800768c:	46bd      	mov	sp, r7
 800768e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007692:	4770      	bx	lr

08007694 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8007694:	b480      	push	{r7}
 8007696:	b083      	sub	sp, #12
 8007698:	af00      	add	r7, sp, #0
 800769a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800769c:	bf00      	nop
 800769e:	370c      	adds	r7, #12
 80076a0:	46bd      	mov	sp, r7
 80076a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076a6:	4770      	bx	lr

080076a8 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80076a8:	b480      	push	{r7}
 80076aa:	b083      	sub	sp, #12
 80076ac:	af00      	add	r7, sp, #0
 80076ae:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80076b0:	bf00      	nop
 80076b2:	370c      	adds	r7, #12
 80076b4:	46bd      	mov	sp, r7
 80076b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076ba:	4770      	bx	lr

080076bc <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80076bc:	b480      	push	{r7}
 80076be:	b083      	sub	sp, #12
 80076c0:	af00      	add	r7, sp, #0
 80076c2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80076c4:	bf00      	nop
 80076c6:	370c      	adds	r7, #12
 80076c8:	46bd      	mov	sp, r7
 80076ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076ce:	4770      	bx	lr

080076d0 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80076d0:	b480      	push	{r7}
 80076d2:	b083      	sub	sp, #12
 80076d4:	af00      	add	r7, sp, #0
 80076d6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80076d8:	bf00      	nop
 80076da:	370c      	adds	r7, #12
 80076dc:	46bd      	mov	sp, r7
 80076de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076e2:	4770      	bx	lr

080076e4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80076e4:	b480      	push	{r7}
 80076e6:	b085      	sub	sp, #20
 80076e8:	af00      	add	r7, sp, #0
 80076ea:	6078      	str	r0, [r7, #4]
 80076ec:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80076ee:	687b      	ldr	r3, [r7, #4]
 80076f0:	681b      	ldr	r3, [r3, #0]
 80076f2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80076f4:	687b      	ldr	r3, [r7, #4]
 80076f6:	4a46      	ldr	r2, [pc, #280]	; (8007810 <TIM_Base_SetConfig+0x12c>)
 80076f8:	4293      	cmp	r3, r2
 80076fa:	d017      	beq.n	800772c <TIM_Base_SetConfig+0x48>
 80076fc:	687b      	ldr	r3, [r7, #4]
 80076fe:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007702:	d013      	beq.n	800772c <TIM_Base_SetConfig+0x48>
 8007704:	687b      	ldr	r3, [r7, #4]
 8007706:	4a43      	ldr	r2, [pc, #268]	; (8007814 <TIM_Base_SetConfig+0x130>)
 8007708:	4293      	cmp	r3, r2
 800770a:	d00f      	beq.n	800772c <TIM_Base_SetConfig+0x48>
 800770c:	687b      	ldr	r3, [r7, #4]
 800770e:	4a42      	ldr	r2, [pc, #264]	; (8007818 <TIM_Base_SetConfig+0x134>)
 8007710:	4293      	cmp	r3, r2
 8007712:	d00b      	beq.n	800772c <TIM_Base_SetConfig+0x48>
 8007714:	687b      	ldr	r3, [r7, #4]
 8007716:	4a41      	ldr	r2, [pc, #260]	; (800781c <TIM_Base_SetConfig+0x138>)
 8007718:	4293      	cmp	r3, r2
 800771a:	d007      	beq.n	800772c <TIM_Base_SetConfig+0x48>
 800771c:	687b      	ldr	r3, [r7, #4]
 800771e:	4a40      	ldr	r2, [pc, #256]	; (8007820 <TIM_Base_SetConfig+0x13c>)
 8007720:	4293      	cmp	r3, r2
 8007722:	d003      	beq.n	800772c <TIM_Base_SetConfig+0x48>
 8007724:	687b      	ldr	r3, [r7, #4]
 8007726:	4a3f      	ldr	r2, [pc, #252]	; (8007824 <TIM_Base_SetConfig+0x140>)
 8007728:	4293      	cmp	r3, r2
 800772a:	d108      	bne.n	800773e <TIM_Base_SetConfig+0x5a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800772c:	68fb      	ldr	r3, [r7, #12]
 800772e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007732:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8007734:	683b      	ldr	r3, [r7, #0]
 8007736:	685b      	ldr	r3, [r3, #4]
 8007738:	68fa      	ldr	r2, [r7, #12]
 800773a:	4313      	orrs	r3, r2
 800773c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800773e:	687b      	ldr	r3, [r7, #4]
 8007740:	4a33      	ldr	r2, [pc, #204]	; (8007810 <TIM_Base_SetConfig+0x12c>)
 8007742:	4293      	cmp	r3, r2
 8007744:	d023      	beq.n	800778e <TIM_Base_SetConfig+0xaa>
 8007746:	687b      	ldr	r3, [r7, #4]
 8007748:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800774c:	d01f      	beq.n	800778e <TIM_Base_SetConfig+0xaa>
 800774e:	687b      	ldr	r3, [r7, #4]
 8007750:	4a30      	ldr	r2, [pc, #192]	; (8007814 <TIM_Base_SetConfig+0x130>)
 8007752:	4293      	cmp	r3, r2
 8007754:	d01b      	beq.n	800778e <TIM_Base_SetConfig+0xaa>
 8007756:	687b      	ldr	r3, [r7, #4]
 8007758:	4a2f      	ldr	r2, [pc, #188]	; (8007818 <TIM_Base_SetConfig+0x134>)
 800775a:	4293      	cmp	r3, r2
 800775c:	d017      	beq.n	800778e <TIM_Base_SetConfig+0xaa>
 800775e:	687b      	ldr	r3, [r7, #4]
 8007760:	4a2e      	ldr	r2, [pc, #184]	; (800781c <TIM_Base_SetConfig+0x138>)
 8007762:	4293      	cmp	r3, r2
 8007764:	d013      	beq.n	800778e <TIM_Base_SetConfig+0xaa>
 8007766:	687b      	ldr	r3, [r7, #4]
 8007768:	4a2d      	ldr	r2, [pc, #180]	; (8007820 <TIM_Base_SetConfig+0x13c>)
 800776a:	4293      	cmp	r3, r2
 800776c:	d00f      	beq.n	800778e <TIM_Base_SetConfig+0xaa>
 800776e:	687b      	ldr	r3, [r7, #4]
 8007770:	4a2d      	ldr	r2, [pc, #180]	; (8007828 <TIM_Base_SetConfig+0x144>)
 8007772:	4293      	cmp	r3, r2
 8007774:	d00b      	beq.n	800778e <TIM_Base_SetConfig+0xaa>
 8007776:	687b      	ldr	r3, [r7, #4]
 8007778:	4a2c      	ldr	r2, [pc, #176]	; (800782c <TIM_Base_SetConfig+0x148>)
 800777a:	4293      	cmp	r3, r2
 800777c:	d007      	beq.n	800778e <TIM_Base_SetConfig+0xaa>
 800777e:	687b      	ldr	r3, [r7, #4]
 8007780:	4a2b      	ldr	r2, [pc, #172]	; (8007830 <TIM_Base_SetConfig+0x14c>)
 8007782:	4293      	cmp	r3, r2
 8007784:	d003      	beq.n	800778e <TIM_Base_SetConfig+0xaa>
 8007786:	687b      	ldr	r3, [r7, #4]
 8007788:	4a26      	ldr	r2, [pc, #152]	; (8007824 <TIM_Base_SetConfig+0x140>)
 800778a:	4293      	cmp	r3, r2
 800778c:	d108      	bne.n	80077a0 <TIM_Base_SetConfig+0xbc>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800778e:	68fb      	ldr	r3, [r7, #12]
 8007790:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007794:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8007796:	683b      	ldr	r3, [r7, #0]
 8007798:	68db      	ldr	r3, [r3, #12]
 800779a:	68fa      	ldr	r2, [r7, #12]
 800779c:	4313      	orrs	r3, r2
 800779e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80077a0:	68fb      	ldr	r3, [r7, #12]
 80077a2:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80077a6:	683b      	ldr	r3, [r7, #0]
 80077a8:	695b      	ldr	r3, [r3, #20]
 80077aa:	4313      	orrs	r3, r2
 80077ac:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80077ae:	687b      	ldr	r3, [r7, #4]
 80077b0:	68fa      	ldr	r2, [r7, #12]
 80077b2:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80077b4:	683b      	ldr	r3, [r7, #0]
 80077b6:	689a      	ldr	r2, [r3, #8]
 80077b8:	687b      	ldr	r3, [r7, #4]
 80077ba:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80077bc:	683b      	ldr	r3, [r7, #0]
 80077be:	681a      	ldr	r2, [r3, #0]
 80077c0:	687b      	ldr	r3, [r7, #4]
 80077c2:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80077c4:	687b      	ldr	r3, [r7, #4]
 80077c6:	4a12      	ldr	r2, [pc, #72]	; (8007810 <TIM_Base_SetConfig+0x12c>)
 80077c8:	4293      	cmp	r3, r2
 80077ca:	d013      	beq.n	80077f4 <TIM_Base_SetConfig+0x110>
 80077cc:	687b      	ldr	r3, [r7, #4]
 80077ce:	4a14      	ldr	r2, [pc, #80]	; (8007820 <TIM_Base_SetConfig+0x13c>)
 80077d0:	4293      	cmp	r3, r2
 80077d2:	d00f      	beq.n	80077f4 <TIM_Base_SetConfig+0x110>
 80077d4:	687b      	ldr	r3, [r7, #4]
 80077d6:	4a14      	ldr	r2, [pc, #80]	; (8007828 <TIM_Base_SetConfig+0x144>)
 80077d8:	4293      	cmp	r3, r2
 80077da:	d00b      	beq.n	80077f4 <TIM_Base_SetConfig+0x110>
 80077dc:	687b      	ldr	r3, [r7, #4]
 80077de:	4a13      	ldr	r2, [pc, #76]	; (800782c <TIM_Base_SetConfig+0x148>)
 80077e0:	4293      	cmp	r3, r2
 80077e2:	d007      	beq.n	80077f4 <TIM_Base_SetConfig+0x110>
 80077e4:	687b      	ldr	r3, [r7, #4]
 80077e6:	4a12      	ldr	r2, [pc, #72]	; (8007830 <TIM_Base_SetConfig+0x14c>)
 80077e8:	4293      	cmp	r3, r2
 80077ea:	d003      	beq.n	80077f4 <TIM_Base_SetConfig+0x110>
 80077ec:	687b      	ldr	r3, [r7, #4]
 80077ee:	4a0d      	ldr	r2, [pc, #52]	; (8007824 <TIM_Base_SetConfig+0x140>)
 80077f0:	4293      	cmp	r3, r2
 80077f2:	d103      	bne.n	80077fc <TIM_Base_SetConfig+0x118>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80077f4:	683b      	ldr	r3, [r7, #0]
 80077f6:	691a      	ldr	r2, [r3, #16]
 80077f8:	687b      	ldr	r3, [r7, #4]
 80077fa:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80077fc:	687b      	ldr	r3, [r7, #4]
 80077fe:	2201      	movs	r2, #1
 8007800:	615a      	str	r2, [r3, #20]
}
 8007802:	bf00      	nop
 8007804:	3714      	adds	r7, #20
 8007806:	46bd      	mov	sp, r7
 8007808:	f85d 7b04 	ldr.w	r7, [sp], #4
 800780c:	4770      	bx	lr
 800780e:	bf00      	nop
 8007810:	40012c00 	.word	0x40012c00
 8007814:	40000400 	.word	0x40000400
 8007818:	40000800 	.word	0x40000800
 800781c:	40000c00 	.word	0x40000c00
 8007820:	40013400 	.word	0x40013400
 8007824:	40015000 	.word	0x40015000
 8007828:	40014000 	.word	0x40014000
 800782c:	40014400 	.word	0x40014400
 8007830:	40014800 	.word	0x40014800

08007834 <TIM_SlaveTimer_SetConfig>:
  * @param  sSlaveConfig Slave timer configuration
  * @retval None
  */
static HAL_StatusTypeDef TIM_SlaveTimer_SetConfig(TIM_HandleTypeDef *htim,
                                                  TIM_SlaveConfigTypeDef *sSlaveConfig)
{
 8007834:	b580      	push	{r7, lr}
 8007836:	b086      	sub	sp, #24
 8007838:	af00      	add	r7, sp, #0
 800783a:	6078      	str	r0, [r7, #4]
 800783c:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800783e:	687b      	ldr	r3, [r7, #4]
 8007840:	681b      	ldr	r3, [r3, #0]
 8007842:	689b      	ldr	r3, [r3, #8]
 8007844:	617b      	str	r3, [r7, #20]

  /* Reset the Trigger Selection Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8007846:	697b      	ldr	r3, [r7, #20]
 8007848:	f423 1340 	bic.w	r3, r3, #3145728	; 0x300000
 800784c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007850:	617b      	str	r3, [r7, #20]
  /* Set the Input Trigger source */
  tmpsmcr |= sSlaveConfig->InputTrigger;
 8007852:	683b      	ldr	r3, [r7, #0]
 8007854:	685b      	ldr	r3, [r3, #4]
 8007856:	697a      	ldr	r2, [r7, #20]
 8007858:	4313      	orrs	r3, r2
 800785a:	617b      	str	r3, [r7, #20]

  /* Reset the slave mode Bits */
  tmpsmcr &= ~TIM_SMCR_SMS;
 800785c:	697b      	ldr	r3, [r7, #20]
 800785e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8007862:	f023 0307 	bic.w	r3, r3, #7
 8007866:	617b      	str	r3, [r7, #20]
  /* Set the slave mode */
  tmpsmcr |= sSlaveConfig->SlaveMode;
 8007868:	683b      	ldr	r3, [r7, #0]
 800786a:	681b      	ldr	r3, [r3, #0]
 800786c:	697a      	ldr	r2, [r7, #20]
 800786e:	4313      	orrs	r3, r2
 8007870:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8007872:	687b      	ldr	r3, [r7, #4]
 8007874:	681b      	ldr	r3, [r3, #0]
 8007876:	697a      	ldr	r2, [r7, #20]
 8007878:	609a      	str	r2, [r3, #8]

  /* Configure the trigger prescaler, filter, and polarity */
  switch (sSlaveConfig->InputTrigger)
 800787a:	683b      	ldr	r3, [r7, #0]
 800787c:	685b      	ldr	r3, [r3, #4]
 800787e:	2b70      	cmp	r3, #112	; 0x70
 8007880:	d034      	beq.n	80078ec <TIM_SlaveTimer_SetConfig+0xb8>
 8007882:	2b70      	cmp	r3, #112	; 0x70
 8007884:	d811      	bhi.n	80078aa <TIM_SlaveTimer_SetConfig+0x76>
 8007886:	2b30      	cmp	r3, #48	; 0x30
 8007888:	d07d      	beq.n	8007986 <TIM_SlaveTimer_SetConfig+0x152>
 800788a:	2b30      	cmp	r3, #48	; 0x30
 800788c:	d806      	bhi.n	800789c <TIM_SlaveTimer_SetConfig+0x68>
 800788e:	2b10      	cmp	r3, #16
 8007890:	d079      	beq.n	8007986 <TIM_SlaveTimer_SetConfig+0x152>
 8007892:	2b20      	cmp	r3, #32
 8007894:	d077      	beq.n	8007986 <TIM_SlaveTimer_SetConfig+0x152>
 8007896:	2b00      	cmp	r3, #0
 8007898:	d075      	beq.n	8007986 <TIM_SlaveTimer_SetConfig+0x152>
      assert_param(IS_TIM_INTERNAL_TRIGGEREVENT_INSTANCE((htim->Instance), sSlaveConfig->InputTrigger));
      break;
    }

    default:
      break;
 800789a:	e075      	b.n	8007988 <TIM_SlaveTimer_SetConfig+0x154>
  switch (sSlaveConfig->InputTrigger)
 800789c:	2b50      	cmp	r3, #80	; 0x50
 800789e:	d05e      	beq.n	800795e <TIM_SlaveTimer_SetConfig+0x12a>
 80078a0:	2b60      	cmp	r3, #96	; 0x60
 80078a2:	d066      	beq.n	8007972 <TIM_SlaveTimer_SetConfig+0x13e>
 80078a4:	2b40      	cmp	r3, #64	; 0x40
 80078a6:	d02c      	beq.n	8007902 <TIM_SlaveTimer_SetConfig+0xce>
      break;
 80078a8:	e06e      	b.n	8007988 <TIM_SlaveTimer_SetConfig+0x154>
  switch (sSlaveConfig->InputTrigger)
 80078aa:	4a3a      	ldr	r2, [pc, #232]	; (8007994 <TIM_SlaveTimer_SetConfig+0x160>)
 80078ac:	4293      	cmp	r3, r2
 80078ae:	d06a      	beq.n	8007986 <TIM_SlaveTimer_SetConfig+0x152>
 80078b0:	4a38      	ldr	r2, [pc, #224]	; (8007994 <TIM_SlaveTimer_SetConfig+0x160>)
 80078b2:	4293      	cmp	r3, r2
 80078b4:	d809      	bhi.n	80078ca <TIM_SlaveTimer_SetConfig+0x96>
 80078b6:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 80078ba:	d064      	beq.n	8007986 <TIM_SlaveTimer_SetConfig+0x152>
 80078bc:	4a36      	ldr	r2, [pc, #216]	; (8007998 <TIM_SlaveTimer_SetConfig+0x164>)
 80078be:	4293      	cmp	r3, r2
 80078c0:	d061      	beq.n	8007986 <TIM_SlaveTimer_SetConfig+0x152>
 80078c2:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80078c6:	d05e      	beq.n	8007986 <TIM_SlaveTimer_SetConfig+0x152>
      break;
 80078c8:	e05e      	b.n	8007988 <TIM_SlaveTimer_SetConfig+0x154>
  switch (sSlaveConfig->InputTrigger)
 80078ca:	4a34      	ldr	r2, [pc, #208]	; (800799c <TIM_SlaveTimer_SetConfig+0x168>)
 80078cc:	4293      	cmp	r3, r2
 80078ce:	d05a      	beq.n	8007986 <TIM_SlaveTimer_SetConfig+0x152>
 80078d0:	4a32      	ldr	r2, [pc, #200]	; (800799c <TIM_SlaveTimer_SetConfig+0x168>)
 80078d2:	4293      	cmp	r3, r2
 80078d4:	d803      	bhi.n	80078de <TIM_SlaveTimer_SetConfig+0xaa>
 80078d6:	4a32      	ldr	r2, [pc, #200]	; (80079a0 <TIM_SlaveTimer_SetConfig+0x16c>)
 80078d8:	4293      	cmp	r3, r2
 80078da:	d054      	beq.n	8007986 <TIM_SlaveTimer_SetConfig+0x152>
      break;
 80078dc:	e054      	b.n	8007988 <TIM_SlaveTimer_SetConfig+0x154>
  switch (sSlaveConfig->InputTrigger)
 80078de:	4a31      	ldr	r2, [pc, #196]	; (80079a4 <TIM_SlaveTimer_SetConfig+0x170>)
 80078e0:	4293      	cmp	r3, r2
 80078e2:	d050      	beq.n	8007986 <TIM_SlaveTimer_SetConfig+0x152>
 80078e4:	4a30      	ldr	r2, [pc, #192]	; (80079a8 <TIM_SlaveTimer_SetConfig+0x174>)
 80078e6:	4293      	cmp	r3, r2
 80078e8:	d04d      	beq.n	8007986 <TIM_SlaveTimer_SetConfig+0x152>
      break;
 80078ea:	e04d      	b.n	8007988 <TIM_SlaveTimer_SetConfig+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 80078ec:	687b      	ldr	r3, [r7, #4]
 80078ee:	6818      	ldr	r0, [r3, #0]
 80078f0:	683b      	ldr	r3, [r7, #0]
 80078f2:	68d9      	ldr	r1, [r3, #12]
 80078f4:	683b      	ldr	r3, [r7, #0]
 80078f6:	689a      	ldr	r2, [r3, #8]
 80078f8:	683b      	ldr	r3, [r7, #0]
 80078fa:	691b      	ldr	r3, [r3, #16]
 80078fc:	f000 f8d2 	bl	8007aa4 <TIM_ETR_SetConfig>
      break;
 8007900:	e042      	b.n	8007988 <TIM_SlaveTimer_SetConfig+0x154>
      if ((sSlaveConfig->SlaveMode == TIM_SLAVEMODE_GATED) || (sSlaveConfig->SlaveMode == TIM_SLAVEMODE_COMBINED_GATEDRESET))
 8007902:	683b      	ldr	r3, [r7, #0]
 8007904:	681b      	ldr	r3, [r3, #0]
 8007906:	2b05      	cmp	r3, #5
 8007908:	d004      	beq.n	8007914 <TIM_SlaveTimer_SetConfig+0xe0>
 800790a:	683b      	ldr	r3, [r7, #0]
 800790c:	681b      	ldr	r3, [r3, #0]
 800790e:	f1b3 1f01 	cmp.w	r3, #65537	; 0x10001
 8007912:	d101      	bne.n	8007918 <TIM_SlaveTimer_SetConfig+0xe4>
        return HAL_ERROR;
 8007914:	2301      	movs	r3, #1
 8007916:	e038      	b.n	800798a <TIM_SlaveTimer_SetConfig+0x156>
      tmpccer = htim->Instance->CCER;
 8007918:	687b      	ldr	r3, [r7, #4]
 800791a:	681b      	ldr	r3, [r3, #0]
 800791c:	6a1b      	ldr	r3, [r3, #32]
 800791e:	613b      	str	r3, [r7, #16]
      htim->Instance->CCER &= ~TIM_CCER_CC1E;
 8007920:	687b      	ldr	r3, [r7, #4]
 8007922:	681b      	ldr	r3, [r3, #0]
 8007924:	6a1a      	ldr	r2, [r3, #32]
 8007926:	687b      	ldr	r3, [r7, #4]
 8007928:	681b      	ldr	r3, [r3, #0]
 800792a:	f022 0201 	bic.w	r2, r2, #1
 800792e:	621a      	str	r2, [r3, #32]
      tmpccmr1 = htim->Instance->CCMR1;
 8007930:	687b      	ldr	r3, [r7, #4]
 8007932:	681b      	ldr	r3, [r3, #0]
 8007934:	699b      	ldr	r3, [r3, #24]
 8007936:	60fb      	str	r3, [r7, #12]
      tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8007938:	68fb      	ldr	r3, [r7, #12]
 800793a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800793e:	60fb      	str	r3, [r7, #12]
      tmpccmr1 |= ((sSlaveConfig->TriggerFilter) << 4U);
 8007940:	683b      	ldr	r3, [r7, #0]
 8007942:	691b      	ldr	r3, [r3, #16]
 8007944:	011b      	lsls	r3, r3, #4
 8007946:	68fa      	ldr	r2, [r7, #12]
 8007948:	4313      	orrs	r3, r2
 800794a:	60fb      	str	r3, [r7, #12]
      htim->Instance->CCMR1 = tmpccmr1;
 800794c:	687b      	ldr	r3, [r7, #4]
 800794e:	681b      	ldr	r3, [r3, #0]
 8007950:	68fa      	ldr	r2, [r7, #12]
 8007952:	619a      	str	r2, [r3, #24]
      htim->Instance->CCER = tmpccer;
 8007954:	687b      	ldr	r3, [r7, #4]
 8007956:	681b      	ldr	r3, [r3, #0]
 8007958:	693a      	ldr	r2, [r7, #16]
 800795a:	621a      	str	r2, [r3, #32]
      break;
 800795c:	e014      	b.n	8007988 <TIM_SlaveTimer_SetConfig+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 800795e:	687b      	ldr	r3, [r7, #4]
 8007960:	6818      	ldr	r0, [r3, #0]
 8007962:	683b      	ldr	r3, [r7, #0]
 8007964:	6899      	ldr	r1, [r3, #8]
 8007966:	683b      	ldr	r3, [r7, #0]
 8007968:	691b      	ldr	r3, [r3, #16]
 800796a:	461a      	mov	r2, r3
 800796c:	f000 f81e 	bl	80079ac <TIM_TI1_ConfigInputStage>
      break;
 8007970:	e00a      	b.n	8007988 <TIM_SlaveTimer_SetConfig+0x154>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8007972:	687b      	ldr	r3, [r7, #4]
 8007974:	6818      	ldr	r0, [r3, #0]
 8007976:	683b      	ldr	r3, [r7, #0]
 8007978:	6899      	ldr	r1, [r3, #8]
 800797a:	683b      	ldr	r3, [r7, #0]
 800797c:	691b      	ldr	r3, [r3, #16]
 800797e:	461a      	mov	r2, r3
 8007980:	f000 f843 	bl	8007a0a <TIM_TI2_ConfigInputStage>
      break;
 8007984:	e000      	b.n	8007988 <TIM_SlaveTimer_SetConfig+0x154>
      break;
 8007986:	bf00      	nop
  }
  return HAL_OK;
 8007988:	2300      	movs	r3, #0
}
 800798a:	4618      	mov	r0, r3
 800798c:	3718      	adds	r7, #24
 800798e:	46bd      	mov	sp, r7
 8007990:	bd80      	pop	{r7, pc}
 8007992:	bf00      	nop
 8007994:	00100030 	.word	0x00100030
 8007998:	00100020 	.word	0x00100020
 800799c:	00100050 	.word	0x00100050
 80079a0:	00100040 	.word	0x00100040
 80079a4:	00100060 	.word	0x00100060
 80079a8:	00100070 	.word	0x00100070

080079ac <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80079ac:	b480      	push	{r7}
 80079ae:	b087      	sub	sp, #28
 80079b0:	af00      	add	r7, sp, #0
 80079b2:	60f8      	str	r0, [r7, #12]
 80079b4:	60b9      	str	r1, [r7, #8]
 80079b6:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80079b8:	68fb      	ldr	r3, [r7, #12]
 80079ba:	6a1b      	ldr	r3, [r3, #32]
 80079bc:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80079be:	68fb      	ldr	r3, [r7, #12]
 80079c0:	6a1b      	ldr	r3, [r3, #32]
 80079c2:	f023 0201 	bic.w	r2, r3, #1
 80079c6:	68fb      	ldr	r3, [r7, #12]
 80079c8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80079ca:	68fb      	ldr	r3, [r7, #12]
 80079cc:	699b      	ldr	r3, [r3, #24]
 80079ce:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80079d0:	693b      	ldr	r3, [r7, #16]
 80079d2:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80079d6:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80079d8:	687b      	ldr	r3, [r7, #4]
 80079da:	011b      	lsls	r3, r3, #4
 80079dc:	693a      	ldr	r2, [r7, #16]
 80079de:	4313      	orrs	r3, r2
 80079e0:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80079e2:	697b      	ldr	r3, [r7, #20]
 80079e4:	f023 030a 	bic.w	r3, r3, #10
 80079e8:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80079ea:	697a      	ldr	r2, [r7, #20]
 80079ec:	68bb      	ldr	r3, [r7, #8]
 80079ee:	4313      	orrs	r3, r2
 80079f0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80079f2:	68fb      	ldr	r3, [r7, #12]
 80079f4:	693a      	ldr	r2, [r7, #16]
 80079f6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80079f8:	68fb      	ldr	r3, [r7, #12]
 80079fa:	697a      	ldr	r2, [r7, #20]
 80079fc:	621a      	str	r2, [r3, #32]
}
 80079fe:	bf00      	nop
 8007a00:	371c      	adds	r7, #28
 8007a02:	46bd      	mov	sp, r7
 8007a04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a08:	4770      	bx	lr

08007a0a <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8007a0a:	b480      	push	{r7}
 8007a0c:	b087      	sub	sp, #28
 8007a0e:	af00      	add	r7, sp, #0
 8007a10:	60f8      	str	r0, [r7, #12]
 8007a12:	60b9      	str	r1, [r7, #8]
 8007a14:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8007a16:	68fb      	ldr	r3, [r7, #12]
 8007a18:	6a1b      	ldr	r3, [r3, #32]
 8007a1a:	f023 0210 	bic.w	r2, r3, #16
 8007a1e:	68fb      	ldr	r3, [r7, #12]
 8007a20:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8007a22:	68fb      	ldr	r3, [r7, #12]
 8007a24:	699b      	ldr	r3, [r3, #24]
 8007a26:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8007a28:	68fb      	ldr	r3, [r7, #12]
 8007a2a:	6a1b      	ldr	r3, [r3, #32]
 8007a2c:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8007a2e:	697b      	ldr	r3, [r7, #20]
 8007a30:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8007a34:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8007a36:	687b      	ldr	r3, [r7, #4]
 8007a38:	031b      	lsls	r3, r3, #12
 8007a3a:	697a      	ldr	r2, [r7, #20]
 8007a3c:	4313      	orrs	r3, r2
 8007a3e:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8007a40:	693b      	ldr	r3, [r7, #16]
 8007a42:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8007a46:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8007a48:	68bb      	ldr	r3, [r7, #8]
 8007a4a:	011b      	lsls	r3, r3, #4
 8007a4c:	693a      	ldr	r2, [r7, #16]
 8007a4e:	4313      	orrs	r3, r2
 8007a50:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8007a52:	68fb      	ldr	r3, [r7, #12]
 8007a54:	697a      	ldr	r2, [r7, #20]
 8007a56:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8007a58:	68fb      	ldr	r3, [r7, #12]
 8007a5a:	693a      	ldr	r2, [r7, #16]
 8007a5c:	621a      	str	r2, [r3, #32]
}
 8007a5e:	bf00      	nop
 8007a60:	371c      	adds	r7, #28
 8007a62:	46bd      	mov	sp, r7
 8007a64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a68:	4770      	bx	lr

08007a6a <TIM_ITRx_SetConfig>:
  *       (*)  Value not defined in all devices.
  *
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8007a6a:	b480      	push	{r7}
 8007a6c:	b085      	sub	sp, #20
 8007a6e:	af00      	add	r7, sp, #0
 8007a70:	6078      	str	r0, [r7, #4]
 8007a72:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8007a74:	687b      	ldr	r3, [r7, #4]
 8007a76:	689b      	ldr	r3, [r3, #8]
 8007a78:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8007a7a:	68fb      	ldr	r3, [r7, #12]
 8007a7c:	f423 1340 	bic.w	r3, r3, #3145728	; 0x300000
 8007a80:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007a84:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8007a86:	683a      	ldr	r2, [r7, #0]
 8007a88:	68fb      	ldr	r3, [r7, #12]
 8007a8a:	4313      	orrs	r3, r2
 8007a8c:	f043 0307 	orr.w	r3, r3, #7
 8007a90:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8007a92:	687b      	ldr	r3, [r7, #4]
 8007a94:	68fa      	ldr	r2, [r7, #12]
 8007a96:	609a      	str	r2, [r3, #8]
}
 8007a98:	bf00      	nop
 8007a9a:	3714      	adds	r7, #20
 8007a9c:	46bd      	mov	sp, r7
 8007a9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007aa2:	4770      	bx	lr

08007aa4 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8007aa4:	b480      	push	{r7}
 8007aa6:	b087      	sub	sp, #28
 8007aa8:	af00      	add	r7, sp, #0
 8007aaa:	60f8      	str	r0, [r7, #12]
 8007aac:	60b9      	str	r1, [r7, #8]
 8007aae:	607a      	str	r2, [r7, #4]
 8007ab0:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8007ab2:	68fb      	ldr	r3, [r7, #12]
 8007ab4:	689b      	ldr	r3, [r3, #8]
 8007ab6:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8007ab8:	697b      	ldr	r3, [r7, #20]
 8007aba:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8007abe:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8007ac0:	683b      	ldr	r3, [r7, #0]
 8007ac2:	021a      	lsls	r2, r3, #8
 8007ac4:	687b      	ldr	r3, [r7, #4]
 8007ac6:	431a      	orrs	r2, r3
 8007ac8:	68bb      	ldr	r3, [r7, #8]
 8007aca:	4313      	orrs	r3, r2
 8007acc:	697a      	ldr	r2, [r7, #20]
 8007ace:	4313      	orrs	r3, r2
 8007ad0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8007ad2:	68fb      	ldr	r3, [r7, #12]
 8007ad4:	697a      	ldr	r2, [r7, #20]
 8007ad6:	609a      	str	r2, [r3, #8]
}
 8007ad8:	bf00      	nop
 8007ada:	371c      	adds	r7, #28
 8007adc:	46bd      	mov	sp, r7
 8007ade:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ae2:	4770      	bx	lr

08007ae4 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8007ae4:	b480      	push	{r7}
 8007ae6:	b085      	sub	sp, #20
 8007ae8:	af00      	add	r7, sp, #0
 8007aea:	6078      	str	r0, [r7, #4]
 8007aec:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8007aee:	687b      	ldr	r3, [r7, #4]
 8007af0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007af4:	2b01      	cmp	r3, #1
 8007af6:	d101      	bne.n	8007afc <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8007af8:	2302      	movs	r3, #2
 8007afa:	e074      	b.n	8007be6 <HAL_TIMEx_MasterConfigSynchronization+0x102>
 8007afc:	687b      	ldr	r3, [r7, #4]
 8007afe:	2201      	movs	r2, #1
 8007b00:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007b04:	687b      	ldr	r3, [r7, #4]
 8007b06:	2202      	movs	r2, #2
 8007b08:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8007b0c:	687b      	ldr	r3, [r7, #4]
 8007b0e:	681b      	ldr	r3, [r3, #0]
 8007b10:	685b      	ldr	r3, [r3, #4]
 8007b12:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8007b14:	687b      	ldr	r3, [r7, #4]
 8007b16:	681b      	ldr	r3, [r3, #0]
 8007b18:	689b      	ldr	r3, [r3, #8]
 8007b1a:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8007b1c:	687b      	ldr	r3, [r7, #4]
 8007b1e:	681b      	ldr	r3, [r3, #0]
 8007b20:	4a34      	ldr	r2, [pc, #208]	; (8007bf4 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 8007b22:	4293      	cmp	r3, r2
 8007b24:	d009      	beq.n	8007b3a <HAL_TIMEx_MasterConfigSynchronization+0x56>
 8007b26:	687b      	ldr	r3, [r7, #4]
 8007b28:	681b      	ldr	r3, [r3, #0]
 8007b2a:	4a33      	ldr	r2, [pc, #204]	; (8007bf8 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 8007b2c:	4293      	cmp	r3, r2
 8007b2e:	d004      	beq.n	8007b3a <HAL_TIMEx_MasterConfigSynchronization+0x56>
 8007b30:	687b      	ldr	r3, [r7, #4]
 8007b32:	681b      	ldr	r3, [r3, #0]
 8007b34:	4a31      	ldr	r2, [pc, #196]	; (8007bfc <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 8007b36:	4293      	cmp	r3, r2
 8007b38:	d108      	bne.n	8007b4c <HAL_TIMEx_MasterConfigSynchronization+0x68>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8007b3a:	68fb      	ldr	r3, [r7, #12]
 8007b3c:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8007b40:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8007b42:	683b      	ldr	r3, [r7, #0]
 8007b44:	685b      	ldr	r3, [r3, #4]
 8007b46:	68fa      	ldr	r2, [r7, #12]
 8007b48:	4313      	orrs	r3, r2
 8007b4a:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8007b4c:	68fb      	ldr	r3, [r7, #12]
 8007b4e:	f023 7300 	bic.w	r3, r3, #33554432	; 0x2000000
 8007b52:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007b56:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8007b58:	683b      	ldr	r3, [r7, #0]
 8007b5a:	681b      	ldr	r3, [r3, #0]
 8007b5c:	68fa      	ldr	r2, [r7, #12]
 8007b5e:	4313      	orrs	r3, r2
 8007b60:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8007b62:	687b      	ldr	r3, [r7, #4]
 8007b64:	681b      	ldr	r3, [r3, #0]
 8007b66:	68fa      	ldr	r2, [r7, #12]
 8007b68:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007b6a:	687b      	ldr	r3, [r7, #4]
 8007b6c:	681b      	ldr	r3, [r3, #0]
 8007b6e:	4a21      	ldr	r2, [pc, #132]	; (8007bf4 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 8007b70:	4293      	cmp	r3, r2
 8007b72:	d022      	beq.n	8007bba <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8007b74:	687b      	ldr	r3, [r7, #4]
 8007b76:	681b      	ldr	r3, [r3, #0]
 8007b78:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007b7c:	d01d      	beq.n	8007bba <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8007b7e:	687b      	ldr	r3, [r7, #4]
 8007b80:	681b      	ldr	r3, [r3, #0]
 8007b82:	4a1f      	ldr	r2, [pc, #124]	; (8007c00 <HAL_TIMEx_MasterConfigSynchronization+0x11c>)
 8007b84:	4293      	cmp	r3, r2
 8007b86:	d018      	beq.n	8007bba <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8007b88:	687b      	ldr	r3, [r7, #4]
 8007b8a:	681b      	ldr	r3, [r3, #0]
 8007b8c:	4a1d      	ldr	r2, [pc, #116]	; (8007c04 <HAL_TIMEx_MasterConfigSynchronization+0x120>)
 8007b8e:	4293      	cmp	r3, r2
 8007b90:	d013      	beq.n	8007bba <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8007b92:	687b      	ldr	r3, [r7, #4]
 8007b94:	681b      	ldr	r3, [r3, #0]
 8007b96:	4a1c      	ldr	r2, [pc, #112]	; (8007c08 <HAL_TIMEx_MasterConfigSynchronization+0x124>)
 8007b98:	4293      	cmp	r3, r2
 8007b9a:	d00e      	beq.n	8007bba <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8007b9c:	687b      	ldr	r3, [r7, #4]
 8007b9e:	681b      	ldr	r3, [r3, #0]
 8007ba0:	4a15      	ldr	r2, [pc, #84]	; (8007bf8 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 8007ba2:	4293      	cmp	r3, r2
 8007ba4:	d009      	beq.n	8007bba <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8007ba6:	687b      	ldr	r3, [r7, #4]
 8007ba8:	681b      	ldr	r3, [r3, #0]
 8007baa:	4a18      	ldr	r2, [pc, #96]	; (8007c0c <HAL_TIMEx_MasterConfigSynchronization+0x128>)
 8007bac:	4293      	cmp	r3, r2
 8007bae:	d004      	beq.n	8007bba <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8007bb0:	687b      	ldr	r3, [r7, #4]
 8007bb2:	681b      	ldr	r3, [r3, #0]
 8007bb4:	4a11      	ldr	r2, [pc, #68]	; (8007bfc <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 8007bb6:	4293      	cmp	r3, r2
 8007bb8:	d10c      	bne.n	8007bd4 <HAL_TIMEx_MasterConfigSynchronization+0xf0>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8007bba:	68bb      	ldr	r3, [r7, #8]
 8007bbc:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8007bc0:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8007bc2:	683b      	ldr	r3, [r7, #0]
 8007bc4:	689b      	ldr	r3, [r3, #8]
 8007bc6:	68ba      	ldr	r2, [r7, #8]
 8007bc8:	4313      	orrs	r3, r2
 8007bca:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8007bcc:	687b      	ldr	r3, [r7, #4]
 8007bce:	681b      	ldr	r3, [r3, #0]
 8007bd0:	68ba      	ldr	r2, [r7, #8]
 8007bd2:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8007bd4:	687b      	ldr	r3, [r7, #4]
 8007bd6:	2201      	movs	r2, #1
 8007bd8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8007bdc:	687b      	ldr	r3, [r7, #4]
 8007bde:	2200      	movs	r2, #0
 8007be0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8007be4:	2300      	movs	r3, #0
}
 8007be6:	4618      	mov	r0, r3
 8007be8:	3714      	adds	r7, #20
 8007bea:	46bd      	mov	sp, r7
 8007bec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007bf0:	4770      	bx	lr
 8007bf2:	bf00      	nop
 8007bf4:	40012c00 	.word	0x40012c00
 8007bf8:	40013400 	.word	0x40013400
 8007bfc:	40015000 	.word	0x40015000
 8007c00:	40000400 	.word	0x40000400
 8007c04:	40000800 	.word	0x40000800
 8007c08:	40000c00 	.word	0x40000c00
 8007c0c:	40014000 	.word	0x40014000

08007c10 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8007c10:	b480      	push	{r7}
 8007c12:	b085      	sub	sp, #20
 8007c14:	af00      	add	r7, sp, #0
 8007c16:	6078      	str	r0, [r7, #4]
 8007c18:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8007c1a:	2300      	movs	r3, #0
 8007c1c:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8007c1e:	687b      	ldr	r3, [r7, #4]
 8007c20:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007c24:	2b01      	cmp	r3, #1
 8007c26:	d101      	bne.n	8007c2c <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8007c28:	2302      	movs	r3, #2
 8007c2a:	e096      	b.n	8007d5a <HAL_TIMEx_ConfigBreakDeadTime+0x14a>
 8007c2c:	687b      	ldr	r3, [r7, #4]
 8007c2e:	2201      	movs	r2, #1
 8007c30:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8007c34:	68fb      	ldr	r3, [r7, #12]
 8007c36:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8007c3a:	683b      	ldr	r3, [r7, #0]
 8007c3c:	68db      	ldr	r3, [r3, #12]
 8007c3e:	4313      	orrs	r3, r2
 8007c40:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8007c42:	68fb      	ldr	r3, [r7, #12]
 8007c44:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8007c48:	683b      	ldr	r3, [r7, #0]
 8007c4a:	689b      	ldr	r3, [r3, #8]
 8007c4c:	4313      	orrs	r3, r2
 8007c4e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8007c50:	68fb      	ldr	r3, [r7, #12]
 8007c52:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8007c56:	683b      	ldr	r3, [r7, #0]
 8007c58:	685b      	ldr	r3, [r3, #4]
 8007c5a:	4313      	orrs	r3, r2
 8007c5c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8007c5e:	68fb      	ldr	r3, [r7, #12]
 8007c60:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8007c64:	683b      	ldr	r3, [r7, #0]
 8007c66:	681b      	ldr	r3, [r3, #0]
 8007c68:	4313      	orrs	r3, r2
 8007c6a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8007c6c:	68fb      	ldr	r3, [r7, #12]
 8007c6e:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8007c72:	683b      	ldr	r3, [r7, #0]
 8007c74:	691b      	ldr	r3, [r3, #16]
 8007c76:	4313      	orrs	r3, r2
 8007c78:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8007c7a:	68fb      	ldr	r3, [r7, #12]
 8007c7c:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8007c80:	683b      	ldr	r3, [r7, #0]
 8007c82:	695b      	ldr	r3, [r3, #20]
 8007c84:	4313      	orrs	r3, r2
 8007c86:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8007c88:	68fb      	ldr	r3, [r7, #12]
 8007c8a:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8007c8e:	683b      	ldr	r3, [r7, #0]
 8007c90:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007c92:	4313      	orrs	r3, r2
 8007c94:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 8007c96:	68fb      	ldr	r3, [r7, #12]
 8007c98:	f423 2270 	bic.w	r2, r3, #983040	; 0xf0000
 8007c9c:	683b      	ldr	r3, [r7, #0]
 8007c9e:	699b      	ldr	r3, [r3, #24]
 8007ca0:	041b      	lsls	r3, r3, #16
 8007ca2:	4313      	orrs	r3, r2
 8007ca4:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_ADVANCED_INSTANCE(htim->Instance))
 8007ca6:	687b      	ldr	r3, [r7, #4]
 8007ca8:	681b      	ldr	r3, [r3, #0]
 8007caa:	4a2f      	ldr	r2, [pc, #188]	; (8007d68 <HAL_TIMEx_ConfigBreakDeadTime+0x158>)
 8007cac:	4293      	cmp	r3, r2
 8007cae:	d009      	beq.n	8007cc4 <HAL_TIMEx_ConfigBreakDeadTime+0xb4>
 8007cb0:	687b      	ldr	r3, [r7, #4]
 8007cb2:	681b      	ldr	r3, [r3, #0]
 8007cb4:	4a2d      	ldr	r2, [pc, #180]	; (8007d6c <HAL_TIMEx_ConfigBreakDeadTime+0x15c>)
 8007cb6:	4293      	cmp	r3, r2
 8007cb8:	d004      	beq.n	8007cc4 <HAL_TIMEx_ConfigBreakDeadTime+0xb4>
 8007cba:	687b      	ldr	r3, [r7, #4]
 8007cbc:	681b      	ldr	r3, [r3, #0]
 8007cbe:	4a2c      	ldr	r2, [pc, #176]	; (8007d70 <HAL_TIMEx_ConfigBreakDeadTime+0x160>)
 8007cc0:	4293      	cmp	r3, r2
 8007cc2:	d106      	bne.n	8007cd2 <HAL_TIMEx_ConfigBreakDeadTime+0xc2>
  {
    /* Check the parameters */
    assert_param(IS_TIM_BREAK_AFMODE(sBreakDeadTimeConfig->BreakAFMode));

    /* Set BREAK AF mode */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BKBID, sBreakDeadTimeConfig->BreakAFMode);
 8007cc4:	68fb      	ldr	r3, [r7, #12]
 8007cc6:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 8007cca:	683b      	ldr	r3, [r7, #0]
 8007ccc:	69db      	ldr	r3, [r3, #28]
 8007cce:	4313      	orrs	r3, r2
 8007cd0:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 8007cd2:	687b      	ldr	r3, [r7, #4]
 8007cd4:	681b      	ldr	r3, [r3, #0]
 8007cd6:	4a24      	ldr	r2, [pc, #144]	; (8007d68 <HAL_TIMEx_ConfigBreakDeadTime+0x158>)
 8007cd8:	4293      	cmp	r3, r2
 8007cda:	d009      	beq.n	8007cf0 <HAL_TIMEx_ConfigBreakDeadTime+0xe0>
 8007cdc:	687b      	ldr	r3, [r7, #4]
 8007cde:	681b      	ldr	r3, [r3, #0]
 8007ce0:	4a22      	ldr	r2, [pc, #136]	; (8007d6c <HAL_TIMEx_ConfigBreakDeadTime+0x15c>)
 8007ce2:	4293      	cmp	r3, r2
 8007ce4:	d004      	beq.n	8007cf0 <HAL_TIMEx_ConfigBreakDeadTime+0xe0>
 8007ce6:	687b      	ldr	r3, [r7, #4]
 8007ce8:	681b      	ldr	r3, [r3, #0]
 8007cea:	4a21      	ldr	r2, [pc, #132]	; (8007d70 <HAL_TIMEx_ConfigBreakDeadTime+0x160>)
 8007cec:	4293      	cmp	r3, r2
 8007cee:	d12b      	bne.n	8007d48 <HAL_TIMEx_ConfigBreakDeadTime+0x138>
    assert_param(IS_TIM_BREAK2_STATE(sBreakDeadTimeConfig->Break2State));
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 8007cf0:	68fb      	ldr	r3, [r7, #12]
 8007cf2:	f423 0270 	bic.w	r2, r3, #15728640	; 0xf00000
 8007cf6:	683b      	ldr	r3, [r7, #0]
 8007cf8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007cfa:	051b      	lsls	r3, r3, #20
 8007cfc:	4313      	orrs	r3, r2
 8007cfe:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 8007d00:	68fb      	ldr	r3, [r7, #12]
 8007d02:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 8007d06:	683b      	ldr	r3, [r7, #0]
 8007d08:	6a1b      	ldr	r3, [r3, #32]
 8007d0a:	4313      	orrs	r3, r2
 8007d0c:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 8007d0e:	68fb      	ldr	r3, [r7, #12]
 8007d10:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 8007d14:	683b      	ldr	r3, [r7, #0]
 8007d16:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007d18:	4313      	orrs	r3, r2
 8007d1a:	60fb      	str	r3, [r7, #12]

    if (IS_TIM_ADVANCED_INSTANCE(htim->Instance))
 8007d1c:	687b      	ldr	r3, [r7, #4]
 8007d1e:	681b      	ldr	r3, [r3, #0]
 8007d20:	4a11      	ldr	r2, [pc, #68]	; (8007d68 <HAL_TIMEx_ConfigBreakDeadTime+0x158>)
 8007d22:	4293      	cmp	r3, r2
 8007d24:	d009      	beq.n	8007d3a <HAL_TIMEx_ConfigBreakDeadTime+0x12a>
 8007d26:	687b      	ldr	r3, [r7, #4]
 8007d28:	681b      	ldr	r3, [r3, #0]
 8007d2a:	4a10      	ldr	r2, [pc, #64]	; (8007d6c <HAL_TIMEx_ConfigBreakDeadTime+0x15c>)
 8007d2c:	4293      	cmp	r3, r2
 8007d2e:	d004      	beq.n	8007d3a <HAL_TIMEx_ConfigBreakDeadTime+0x12a>
 8007d30:	687b      	ldr	r3, [r7, #4]
 8007d32:	681b      	ldr	r3, [r3, #0]
 8007d34:	4a0e      	ldr	r2, [pc, #56]	; (8007d70 <HAL_TIMEx_ConfigBreakDeadTime+0x160>)
 8007d36:	4293      	cmp	r3, r2
 8007d38:	d106      	bne.n	8007d48 <HAL_TIMEx_ConfigBreakDeadTime+0x138>
    {
      /* Check the parameters */
      assert_param(IS_TIM_BREAK2_AFMODE(sBreakDeadTimeConfig->Break2AFMode));

      /* Set BREAK2 AF mode */
      MODIFY_REG(tmpbdtr, TIM_BDTR_BK2BID, sBreakDeadTimeConfig->Break2AFMode);
 8007d3a:	68fb      	ldr	r3, [r7, #12]
 8007d3c:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
 8007d40:	683b      	ldr	r3, [r7, #0]
 8007d42:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007d44:	4313      	orrs	r3, r2
 8007d46:	60fb      	str	r3, [r7, #12]
    }
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8007d48:	687b      	ldr	r3, [r7, #4]
 8007d4a:	681b      	ldr	r3, [r3, #0]
 8007d4c:	68fa      	ldr	r2, [r7, #12]
 8007d4e:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 8007d50:	687b      	ldr	r3, [r7, #4]
 8007d52:	2200      	movs	r2, #0
 8007d54:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8007d58:	2300      	movs	r3, #0
}
 8007d5a:	4618      	mov	r0, r3
 8007d5c:	3714      	adds	r7, #20
 8007d5e:	46bd      	mov	sp, r7
 8007d60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d64:	4770      	bx	lr
 8007d66:	bf00      	nop
 8007d68:	40012c00 	.word	0x40012c00
 8007d6c:	40013400 	.word	0x40013400
 8007d70:	40015000 	.word	0x40015000

08007d74 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8007d74:	b480      	push	{r7}
 8007d76:	b083      	sub	sp, #12
 8007d78:	af00      	add	r7, sp, #0
 8007d7a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8007d7c:	bf00      	nop
 8007d7e:	370c      	adds	r7, #12
 8007d80:	46bd      	mov	sp, r7
 8007d82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d86:	4770      	bx	lr

08007d88 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8007d88:	b480      	push	{r7}
 8007d8a:	b083      	sub	sp, #12
 8007d8c:	af00      	add	r7, sp, #0
 8007d8e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8007d90:	bf00      	nop
 8007d92:	370c      	adds	r7, #12
 8007d94:	46bd      	mov	sp, r7
 8007d96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d9a:	4770      	bx	lr

08007d9c <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8007d9c:	b480      	push	{r7}
 8007d9e:	b083      	sub	sp, #12
 8007da0:	af00      	add	r7, sp, #0
 8007da2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8007da4:	bf00      	nop
 8007da6:	370c      	adds	r7, #12
 8007da8:	46bd      	mov	sp, r7
 8007daa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007dae:	4770      	bx	lr

08007db0 <HAL_TIMEx_EncoderIndexCallback>:
  * @brief  Encoder index callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_EncoderIndexCallback(TIM_HandleTypeDef *htim)
{
 8007db0:	b480      	push	{r7}
 8007db2:	b083      	sub	sp, #12
 8007db4:	af00      	add	r7, sp, #0
 8007db6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_EncoderIndexCallback could be implemented in the user file
   */
}
 8007db8:	bf00      	nop
 8007dba:	370c      	adds	r7, #12
 8007dbc:	46bd      	mov	sp, r7
 8007dbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007dc2:	4770      	bx	lr

08007dc4 <HAL_TIMEx_DirectionChangeCallback>:
  * @brief  Direction change callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_DirectionChangeCallback(TIM_HandleTypeDef *htim)
{
 8007dc4:	b480      	push	{r7}
 8007dc6:	b083      	sub	sp, #12
 8007dc8:	af00      	add	r7, sp, #0
 8007dca:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_DirectionChangeCallback could be implemented in the user file
   */
}
 8007dcc:	bf00      	nop
 8007dce:	370c      	adds	r7, #12
 8007dd0:	46bd      	mov	sp, r7
 8007dd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007dd6:	4770      	bx	lr

08007dd8 <HAL_TIMEx_IndexErrorCallback>:
  * @brief  Index error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_IndexErrorCallback(TIM_HandleTypeDef *htim)
{
 8007dd8:	b480      	push	{r7}
 8007dda:	b083      	sub	sp, #12
 8007ddc:	af00      	add	r7, sp, #0
 8007dde:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_IndexErrorCallback could be implemented in the user file
   */
}
 8007de0:	bf00      	nop
 8007de2:	370c      	adds	r7, #12
 8007de4:	46bd      	mov	sp, r7
 8007de6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007dea:	4770      	bx	lr

08007dec <HAL_TIMEx_TransitionErrorCallback>:
  * @brief  Transition error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_TransitionErrorCallback(TIM_HandleTypeDef *htim)
{
 8007dec:	b480      	push	{r7}
 8007dee:	b083      	sub	sp, #12
 8007df0:	af00      	add	r7, sp, #0
 8007df2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_TransitionErrorCallback could be implemented in the user file
   */
}
 8007df4:	bf00      	nop
 8007df6:	370c      	adds	r7, #12
 8007df8:	46bd      	mov	sp, r7
 8007dfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007dfe:	4770      	bx	lr

08007e00 <LL_EXTI_EnableIT_0_31>:
{
 8007e00:	b480      	push	{r7}
 8007e02:	b083      	sub	sp, #12
 8007e04:	af00      	add	r7, sp, #0
 8007e06:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->IMR1, ExtiLine);
 8007e08:	4b05      	ldr	r3, [pc, #20]	; (8007e20 <LL_EXTI_EnableIT_0_31+0x20>)
 8007e0a:	681a      	ldr	r2, [r3, #0]
 8007e0c:	4904      	ldr	r1, [pc, #16]	; (8007e20 <LL_EXTI_EnableIT_0_31+0x20>)
 8007e0e:	687b      	ldr	r3, [r7, #4]
 8007e10:	4313      	orrs	r3, r2
 8007e12:	600b      	str	r3, [r1, #0]
}
 8007e14:	bf00      	nop
 8007e16:	370c      	adds	r7, #12
 8007e18:	46bd      	mov	sp, r7
 8007e1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e1e:	4770      	bx	lr
 8007e20:	40010400 	.word	0x40010400

08007e24 <LL_EXTI_EnableIT_32_63>:
{
 8007e24:	b480      	push	{r7}
 8007e26:	b083      	sub	sp, #12
 8007e28:	af00      	add	r7, sp, #0
 8007e2a:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->IMR2, ExtiLine);
 8007e2c:	4b05      	ldr	r3, [pc, #20]	; (8007e44 <LL_EXTI_EnableIT_32_63+0x20>)
 8007e2e:	6a1a      	ldr	r2, [r3, #32]
 8007e30:	4904      	ldr	r1, [pc, #16]	; (8007e44 <LL_EXTI_EnableIT_32_63+0x20>)
 8007e32:	687b      	ldr	r3, [r7, #4]
 8007e34:	4313      	orrs	r3, r2
 8007e36:	620b      	str	r3, [r1, #32]
}
 8007e38:	bf00      	nop
 8007e3a:	370c      	adds	r7, #12
 8007e3c:	46bd      	mov	sp, r7
 8007e3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e42:	4770      	bx	lr
 8007e44:	40010400 	.word	0x40010400

08007e48 <LL_EXTI_DisableIT_0_31>:
{
 8007e48:	b480      	push	{r7}
 8007e4a:	b083      	sub	sp, #12
 8007e4c:	af00      	add	r7, sp, #0
 8007e4e:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->IMR1, ExtiLine);
 8007e50:	4b06      	ldr	r3, [pc, #24]	; (8007e6c <LL_EXTI_DisableIT_0_31+0x24>)
 8007e52:	681a      	ldr	r2, [r3, #0]
 8007e54:	687b      	ldr	r3, [r7, #4]
 8007e56:	43db      	mvns	r3, r3
 8007e58:	4904      	ldr	r1, [pc, #16]	; (8007e6c <LL_EXTI_DisableIT_0_31+0x24>)
 8007e5a:	4013      	ands	r3, r2
 8007e5c:	600b      	str	r3, [r1, #0]
}
 8007e5e:	bf00      	nop
 8007e60:	370c      	adds	r7, #12
 8007e62:	46bd      	mov	sp, r7
 8007e64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e68:	4770      	bx	lr
 8007e6a:	bf00      	nop
 8007e6c:	40010400 	.word	0x40010400

08007e70 <LL_EXTI_DisableIT_32_63>:
{
 8007e70:	b480      	push	{r7}
 8007e72:	b083      	sub	sp, #12
 8007e74:	af00      	add	r7, sp, #0
 8007e76:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->IMR2, ExtiLine);
 8007e78:	4b06      	ldr	r3, [pc, #24]	; (8007e94 <LL_EXTI_DisableIT_32_63+0x24>)
 8007e7a:	6a1a      	ldr	r2, [r3, #32]
 8007e7c:	687b      	ldr	r3, [r7, #4]
 8007e7e:	43db      	mvns	r3, r3
 8007e80:	4904      	ldr	r1, [pc, #16]	; (8007e94 <LL_EXTI_DisableIT_32_63+0x24>)
 8007e82:	4013      	ands	r3, r2
 8007e84:	620b      	str	r3, [r1, #32]
}
 8007e86:	bf00      	nop
 8007e88:	370c      	adds	r7, #12
 8007e8a:	46bd      	mov	sp, r7
 8007e8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e90:	4770      	bx	lr
 8007e92:	bf00      	nop
 8007e94:	40010400 	.word	0x40010400

08007e98 <LL_EXTI_EnableEvent_0_31>:
{
 8007e98:	b480      	push	{r7}
 8007e9a:	b083      	sub	sp, #12
 8007e9c:	af00      	add	r7, sp, #0
 8007e9e:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->EMR1, ExtiLine);
 8007ea0:	4b05      	ldr	r3, [pc, #20]	; (8007eb8 <LL_EXTI_EnableEvent_0_31+0x20>)
 8007ea2:	685a      	ldr	r2, [r3, #4]
 8007ea4:	4904      	ldr	r1, [pc, #16]	; (8007eb8 <LL_EXTI_EnableEvent_0_31+0x20>)
 8007ea6:	687b      	ldr	r3, [r7, #4]
 8007ea8:	4313      	orrs	r3, r2
 8007eaa:	604b      	str	r3, [r1, #4]
}
 8007eac:	bf00      	nop
 8007eae:	370c      	adds	r7, #12
 8007eb0:	46bd      	mov	sp, r7
 8007eb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007eb6:	4770      	bx	lr
 8007eb8:	40010400 	.word	0x40010400

08007ebc <LL_EXTI_EnableEvent_32_63>:
{
 8007ebc:	b480      	push	{r7}
 8007ebe:	b083      	sub	sp, #12
 8007ec0:	af00      	add	r7, sp, #0
 8007ec2:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->EMR2, ExtiLine);
 8007ec4:	4b05      	ldr	r3, [pc, #20]	; (8007edc <LL_EXTI_EnableEvent_32_63+0x20>)
 8007ec6:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8007ec8:	4904      	ldr	r1, [pc, #16]	; (8007edc <LL_EXTI_EnableEvent_32_63+0x20>)
 8007eca:	687b      	ldr	r3, [r7, #4]
 8007ecc:	4313      	orrs	r3, r2
 8007ece:	624b      	str	r3, [r1, #36]	; 0x24
}
 8007ed0:	bf00      	nop
 8007ed2:	370c      	adds	r7, #12
 8007ed4:	46bd      	mov	sp, r7
 8007ed6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007eda:	4770      	bx	lr
 8007edc:	40010400 	.word	0x40010400

08007ee0 <LL_EXTI_DisableEvent_0_31>:
{
 8007ee0:	b480      	push	{r7}
 8007ee2:	b083      	sub	sp, #12
 8007ee4:	af00      	add	r7, sp, #0
 8007ee6:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->EMR1, ExtiLine);
 8007ee8:	4b06      	ldr	r3, [pc, #24]	; (8007f04 <LL_EXTI_DisableEvent_0_31+0x24>)
 8007eea:	685a      	ldr	r2, [r3, #4]
 8007eec:	687b      	ldr	r3, [r7, #4]
 8007eee:	43db      	mvns	r3, r3
 8007ef0:	4904      	ldr	r1, [pc, #16]	; (8007f04 <LL_EXTI_DisableEvent_0_31+0x24>)
 8007ef2:	4013      	ands	r3, r2
 8007ef4:	604b      	str	r3, [r1, #4]
}
 8007ef6:	bf00      	nop
 8007ef8:	370c      	adds	r7, #12
 8007efa:	46bd      	mov	sp, r7
 8007efc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f00:	4770      	bx	lr
 8007f02:	bf00      	nop
 8007f04:	40010400 	.word	0x40010400

08007f08 <LL_EXTI_DisableEvent_32_63>:
{
 8007f08:	b480      	push	{r7}
 8007f0a:	b083      	sub	sp, #12
 8007f0c:	af00      	add	r7, sp, #0
 8007f0e:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->EMR2, ExtiLine);
 8007f10:	4b06      	ldr	r3, [pc, #24]	; (8007f2c <LL_EXTI_DisableEvent_32_63+0x24>)
 8007f12:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8007f14:	687b      	ldr	r3, [r7, #4]
 8007f16:	43db      	mvns	r3, r3
 8007f18:	4904      	ldr	r1, [pc, #16]	; (8007f2c <LL_EXTI_DisableEvent_32_63+0x24>)
 8007f1a:	4013      	ands	r3, r2
 8007f1c:	624b      	str	r3, [r1, #36]	; 0x24
}
 8007f1e:	bf00      	nop
 8007f20:	370c      	adds	r7, #12
 8007f22:	46bd      	mov	sp, r7
 8007f24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f28:	4770      	bx	lr
 8007f2a:	bf00      	nop
 8007f2c:	40010400 	.word	0x40010400

08007f30 <LL_EXTI_EnableRisingTrig_0_31>:
{
 8007f30:	b480      	push	{r7}
 8007f32:	b083      	sub	sp, #12
 8007f34:	af00      	add	r7, sp, #0
 8007f36:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->RTSR1, ExtiLine);
 8007f38:	4b05      	ldr	r3, [pc, #20]	; (8007f50 <LL_EXTI_EnableRisingTrig_0_31+0x20>)
 8007f3a:	689a      	ldr	r2, [r3, #8]
 8007f3c:	4904      	ldr	r1, [pc, #16]	; (8007f50 <LL_EXTI_EnableRisingTrig_0_31+0x20>)
 8007f3e:	687b      	ldr	r3, [r7, #4]
 8007f40:	4313      	orrs	r3, r2
 8007f42:	608b      	str	r3, [r1, #8]
}
 8007f44:	bf00      	nop
 8007f46:	370c      	adds	r7, #12
 8007f48:	46bd      	mov	sp, r7
 8007f4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f4e:	4770      	bx	lr
 8007f50:	40010400 	.word	0x40010400

08007f54 <LL_EXTI_EnableRisingTrig_32_63>:
{
 8007f54:	b480      	push	{r7}
 8007f56:	b083      	sub	sp, #12
 8007f58:	af00      	add	r7, sp, #0
 8007f5a:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->RTSR2, ExtiLine);
 8007f5c:	4b05      	ldr	r3, [pc, #20]	; (8007f74 <LL_EXTI_EnableRisingTrig_32_63+0x20>)
 8007f5e:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8007f60:	4904      	ldr	r1, [pc, #16]	; (8007f74 <LL_EXTI_EnableRisingTrig_32_63+0x20>)
 8007f62:	687b      	ldr	r3, [r7, #4]
 8007f64:	4313      	orrs	r3, r2
 8007f66:	628b      	str	r3, [r1, #40]	; 0x28
}
 8007f68:	bf00      	nop
 8007f6a:	370c      	adds	r7, #12
 8007f6c:	46bd      	mov	sp, r7
 8007f6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f72:	4770      	bx	lr
 8007f74:	40010400 	.word	0x40010400

08007f78 <LL_EXTI_DisableRisingTrig_0_31>:
{
 8007f78:	b480      	push	{r7}
 8007f7a:	b083      	sub	sp, #12
 8007f7c:	af00      	add	r7, sp, #0
 8007f7e:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->RTSR1, ExtiLine);
 8007f80:	4b06      	ldr	r3, [pc, #24]	; (8007f9c <LL_EXTI_DisableRisingTrig_0_31+0x24>)
 8007f82:	689a      	ldr	r2, [r3, #8]
 8007f84:	687b      	ldr	r3, [r7, #4]
 8007f86:	43db      	mvns	r3, r3
 8007f88:	4904      	ldr	r1, [pc, #16]	; (8007f9c <LL_EXTI_DisableRisingTrig_0_31+0x24>)
 8007f8a:	4013      	ands	r3, r2
 8007f8c:	608b      	str	r3, [r1, #8]
}
 8007f8e:	bf00      	nop
 8007f90:	370c      	adds	r7, #12
 8007f92:	46bd      	mov	sp, r7
 8007f94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f98:	4770      	bx	lr
 8007f9a:	bf00      	nop
 8007f9c:	40010400 	.word	0x40010400

08007fa0 <LL_EXTI_DisableRisingTrig_32_63>:
{
 8007fa0:	b480      	push	{r7}
 8007fa2:	b083      	sub	sp, #12
 8007fa4:	af00      	add	r7, sp, #0
 8007fa6:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->RTSR2, ExtiLine);
 8007fa8:	4b06      	ldr	r3, [pc, #24]	; (8007fc4 <LL_EXTI_DisableRisingTrig_32_63+0x24>)
 8007faa:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8007fac:	687b      	ldr	r3, [r7, #4]
 8007fae:	43db      	mvns	r3, r3
 8007fb0:	4904      	ldr	r1, [pc, #16]	; (8007fc4 <LL_EXTI_DisableRisingTrig_32_63+0x24>)
 8007fb2:	4013      	ands	r3, r2
 8007fb4:	628b      	str	r3, [r1, #40]	; 0x28
}
 8007fb6:	bf00      	nop
 8007fb8:	370c      	adds	r7, #12
 8007fba:	46bd      	mov	sp, r7
 8007fbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007fc0:	4770      	bx	lr
 8007fc2:	bf00      	nop
 8007fc4:	40010400 	.word	0x40010400

08007fc8 <LL_EXTI_EnableFallingTrig_0_31>:
{
 8007fc8:	b480      	push	{r7}
 8007fca:	b083      	sub	sp, #12
 8007fcc:	af00      	add	r7, sp, #0
 8007fce:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->FTSR1, ExtiLine);
 8007fd0:	4b05      	ldr	r3, [pc, #20]	; (8007fe8 <LL_EXTI_EnableFallingTrig_0_31+0x20>)
 8007fd2:	68da      	ldr	r2, [r3, #12]
 8007fd4:	4904      	ldr	r1, [pc, #16]	; (8007fe8 <LL_EXTI_EnableFallingTrig_0_31+0x20>)
 8007fd6:	687b      	ldr	r3, [r7, #4]
 8007fd8:	4313      	orrs	r3, r2
 8007fda:	60cb      	str	r3, [r1, #12]
}
 8007fdc:	bf00      	nop
 8007fde:	370c      	adds	r7, #12
 8007fe0:	46bd      	mov	sp, r7
 8007fe2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007fe6:	4770      	bx	lr
 8007fe8:	40010400 	.word	0x40010400

08007fec <LL_EXTI_EnableFallingTrig_32_63>:
{
 8007fec:	b480      	push	{r7}
 8007fee:	b083      	sub	sp, #12
 8007ff0:	af00      	add	r7, sp, #0
 8007ff2:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->FTSR2, ExtiLine);
 8007ff4:	4b05      	ldr	r3, [pc, #20]	; (800800c <LL_EXTI_EnableFallingTrig_32_63+0x20>)
 8007ff6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007ff8:	4904      	ldr	r1, [pc, #16]	; (800800c <LL_EXTI_EnableFallingTrig_32_63+0x20>)
 8007ffa:	687b      	ldr	r3, [r7, #4]
 8007ffc:	4313      	orrs	r3, r2
 8007ffe:	62cb      	str	r3, [r1, #44]	; 0x2c
}
 8008000:	bf00      	nop
 8008002:	370c      	adds	r7, #12
 8008004:	46bd      	mov	sp, r7
 8008006:	f85d 7b04 	ldr.w	r7, [sp], #4
 800800a:	4770      	bx	lr
 800800c:	40010400 	.word	0x40010400

08008010 <LL_EXTI_DisableFallingTrig_0_31>:
{
 8008010:	b480      	push	{r7}
 8008012:	b083      	sub	sp, #12
 8008014:	af00      	add	r7, sp, #0
 8008016:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->FTSR1, ExtiLine);
 8008018:	4b06      	ldr	r3, [pc, #24]	; (8008034 <LL_EXTI_DisableFallingTrig_0_31+0x24>)
 800801a:	68da      	ldr	r2, [r3, #12]
 800801c:	687b      	ldr	r3, [r7, #4]
 800801e:	43db      	mvns	r3, r3
 8008020:	4904      	ldr	r1, [pc, #16]	; (8008034 <LL_EXTI_DisableFallingTrig_0_31+0x24>)
 8008022:	4013      	ands	r3, r2
 8008024:	60cb      	str	r3, [r1, #12]
}
 8008026:	bf00      	nop
 8008028:	370c      	adds	r7, #12
 800802a:	46bd      	mov	sp, r7
 800802c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008030:	4770      	bx	lr
 8008032:	bf00      	nop
 8008034:	40010400 	.word	0x40010400

08008038 <LL_EXTI_DisableFallingTrig_32_63>:
{
 8008038:	b480      	push	{r7}
 800803a:	b083      	sub	sp, #12
 800803c:	af00      	add	r7, sp, #0
 800803e:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->FTSR2, ExtiLine);
 8008040:	4b06      	ldr	r3, [pc, #24]	; (800805c <LL_EXTI_DisableFallingTrig_32_63+0x24>)
 8008042:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008044:	687b      	ldr	r3, [r7, #4]
 8008046:	43db      	mvns	r3, r3
 8008048:	4904      	ldr	r1, [pc, #16]	; (800805c <LL_EXTI_DisableFallingTrig_32_63+0x24>)
 800804a:	4013      	ands	r3, r2
 800804c:	62cb      	str	r3, [r1, #44]	; 0x2c
}
 800804e:	bf00      	nop
 8008050:	370c      	adds	r7, #12
 8008052:	46bd      	mov	sp, r7
 8008054:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008058:	4770      	bx	lr
 800805a:	bf00      	nop
 800805c:	40010400 	.word	0x40010400

08008060 <LL_EXTI_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - 0x00: EXTI registers are initialized
  *          - any other calue : wrong configuration
  */
uint32_t LL_EXTI_Init(LL_EXTI_InitTypeDef *EXTI_InitStruct)
{
 8008060:	b580      	push	{r7, lr}
 8008062:	b084      	sub	sp, #16
 8008064:	af00      	add	r7, sp, #0
 8008066:	6078      	str	r0, [r7, #4]
  uint32_t status = 0x00u;
 8008068:	2300      	movs	r3, #0
 800806a:	60fb      	str	r3, [r7, #12]
  assert_param(IS_LL_EXTI_LINE_32_63(EXTI_InitStruct->Line_32_63));
  assert_param(IS_FUNCTIONAL_STATE(EXTI_InitStruct->LineCommand));
  assert_param(IS_LL_EXTI_MODE(EXTI_InitStruct->Mode));

  /* ENABLE LineCommand */
  if (EXTI_InitStruct->LineCommand != DISABLE)
 800806c:	687b      	ldr	r3, [r7, #4]
 800806e:	7a1b      	ldrb	r3, [r3, #8]
 8008070:	2b00      	cmp	r3, #0
 8008072:	f000 80c8 	beq.w	8008206 <LL_EXTI_Init+0x1a6>
  {
    assert_param(IS_LL_EXTI_TRIGGER(EXTI_InitStruct->Trigger));

    /* Configure EXTI Lines in range from 0 to 31 */
    if (EXTI_InitStruct->Line_0_31 != LL_EXTI_LINE_NONE)
 8008076:	687b      	ldr	r3, [r7, #4]
 8008078:	681b      	ldr	r3, [r3, #0]
 800807a:	2b00      	cmp	r3, #0
 800807c:	d05d      	beq.n	800813a <LL_EXTI_Init+0xda>
    {
      switch (EXTI_InitStruct->Mode)
 800807e:	687b      	ldr	r3, [r7, #4]
 8008080:	7a5b      	ldrb	r3, [r3, #9]
 8008082:	2b01      	cmp	r3, #1
 8008084:	d00e      	beq.n	80080a4 <LL_EXTI_Init+0x44>
 8008086:	2b02      	cmp	r3, #2
 8008088:	d017      	beq.n	80080ba <LL_EXTI_Init+0x5a>
 800808a:	2b00      	cmp	r3, #0
 800808c:	d120      	bne.n	80080d0 <LL_EXTI_Init+0x70>
      {
        case LL_EXTI_MODE_IT:
          /* First Disable Event on provided Lines */
          LL_EXTI_DisableEvent_0_31(EXTI_InitStruct->Line_0_31);
 800808e:	687b      	ldr	r3, [r7, #4]
 8008090:	681b      	ldr	r3, [r3, #0]
 8008092:	4618      	mov	r0, r3
 8008094:	f7ff ff24 	bl	8007ee0 <LL_EXTI_DisableEvent_0_31>
          /* Then Enable IT on provided Lines */
          LL_EXTI_EnableIT_0_31(EXTI_InitStruct->Line_0_31);
 8008098:	687b      	ldr	r3, [r7, #4]
 800809a:	681b      	ldr	r3, [r3, #0]
 800809c:	4618      	mov	r0, r3
 800809e:	f7ff feaf 	bl	8007e00 <LL_EXTI_EnableIT_0_31>
          break;
 80080a2:	e018      	b.n	80080d6 <LL_EXTI_Init+0x76>
        case LL_EXTI_MODE_EVENT:
          /* First Disable IT on provided Lines */
          LL_EXTI_DisableIT_0_31(EXTI_InitStruct->Line_0_31);
 80080a4:	687b      	ldr	r3, [r7, #4]
 80080a6:	681b      	ldr	r3, [r3, #0]
 80080a8:	4618      	mov	r0, r3
 80080aa:	f7ff fecd 	bl	8007e48 <LL_EXTI_DisableIT_0_31>
          /* Then Enable Event on provided Lines */
          LL_EXTI_EnableEvent_0_31(EXTI_InitStruct->Line_0_31);
 80080ae:	687b      	ldr	r3, [r7, #4]
 80080b0:	681b      	ldr	r3, [r3, #0]
 80080b2:	4618      	mov	r0, r3
 80080b4:	f7ff fef0 	bl	8007e98 <LL_EXTI_EnableEvent_0_31>
          break;
 80080b8:	e00d      	b.n	80080d6 <LL_EXTI_Init+0x76>
        case LL_EXTI_MODE_IT_EVENT:
          /* Directly Enable IT on provided Lines */
          LL_EXTI_EnableIT_0_31(EXTI_InitStruct->Line_0_31);
 80080ba:	687b      	ldr	r3, [r7, #4]
 80080bc:	681b      	ldr	r3, [r3, #0]
 80080be:	4618      	mov	r0, r3
 80080c0:	f7ff fe9e 	bl	8007e00 <LL_EXTI_EnableIT_0_31>
          /* Directly Enable Event on provided Lines */
          LL_EXTI_EnableEvent_0_31(EXTI_InitStruct->Line_0_31);
 80080c4:	687b      	ldr	r3, [r7, #4]
 80080c6:	681b      	ldr	r3, [r3, #0]
 80080c8:	4618      	mov	r0, r3
 80080ca:	f7ff fee5 	bl	8007e98 <LL_EXTI_EnableEvent_0_31>
          break;
 80080ce:	e002      	b.n	80080d6 <LL_EXTI_Init+0x76>
        default:
          status = 0x01u;
 80080d0:	2301      	movs	r3, #1
 80080d2:	60fb      	str	r3, [r7, #12]
          break;
 80080d4:	bf00      	nop
      }
      if (EXTI_InitStruct->Trigger != LL_EXTI_TRIGGER_NONE)
 80080d6:	687b      	ldr	r3, [r7, #4]
 80080d8:	7a9b      	ldrb	r3, [r3, #10]
 80080da:	2b00      	cmp	r3, #0
 80080dc:	d02d      	beq.n	800813a <LL_EXTI_Init+0xda>
      {
        switch (EXTI_InitStruct->Trigger)
 80080de:	687b      	ldr	r3, [r7, #4]
 80080e0:	7a9b      	ldrb	r3, [r3, #10]
 80080e2:	2b02      	cmp	r3, #2
 80080e4:	d00e      	beq.n	8008104 <LL_EXTI_Init+0xa4>
 80080e6:	2b03      	cmp	r3, #3
 80080e8:	d017      	beq.n	800811a <LL_EXTI_Init+0xba>
 80080ea:	2b01      	cmp	r3, #1
 80080ec:	d120      	bne.n	8008130 <LL_EXTI_Init+0xd0>
        {
          case LL_EXTI_TRIGGER_RISING:
            /* First Disable Falling Trigger on provided Lines */
            LL_EXTI_DisableFallingTrig_0_31(EXTI_InitStruct->Line_0_31);
 80080ee:	687b      	ldr	r3, [r7, #4]
 80080f0:	681b      	ldr	r3, [r3, #0]
 80080f2:	4618      	mov	r0, r3
 80080f4:	f7ff ff8c 	bl	8008010 <LL_EXTI_DisableFallingTrig_0_31>
            /* Then Enable Rising Trigger on provided Lines */
            LL_EXTI_EnableRisingTrig_0_31(EXTI_InitStruct->Line_0_31);
 80080f8:	687b      	ldr	r3, [r7, #4]
 80080fa:	681b      	ldr	r3, [r3, #0]
 80080fc:	4618      	mov	r0, r3
 80080fe:	f7ff ff17 	bl	8007f30 <LL_EXTI_EnableRisingTrig_0_31>
            break;
 8008102:	e01b      	b.n	800813c <LL_EXTI_Init+0xdc>
          case LL_EXTI_TRIGGER_FALLING:
            /* First Disable Rising Trigger on provided Lines */
            LL_EXTI_DisableRisingTrig_0_31(EXTI_InitStruct->Line_0_31);
 8008104:	687b      	ldr	r3, [r7, #4]
 8008106:	681b      	ldr	r3, [r3, #0]
 8008108:	4618      	mov	r0, r3
 800810a:	f7ff ff35 	bl	8007f78 <LL_EXTI_DisableRisingTrig_0_31>
            /* Then Enable Falling Trigger on provided Lines */
            LL_EXTI_EnableFallingTrig_0_31(EXTI_InitStruct->Line_0_31);
 800810e:	687b      	ldr	r3, [r7, #4]
 8008110:	681b      	ldr	r3, [r3, #0]
 8008112:	4618      	mov	r0, r3
 8008114:	f7ff ff58 	bl	8007fc8 <LL_EXTI_EnableFallingTrig_0_31>
            break;
 8008118:	e010      	b.n	800813c <LL_EXTI_Init+0xdc>
          case LL_EXTI_TRIGGER_RISING_FALLING:
            /* Enable Rising Trigger on provided Lines */
            LL_EXTI_EnableRisingTrig_0_31(EXTI_InitStruct->Line_0_31);
 800811a:	687b      	ldr	r3, [r7, #4]
 800811c:	681b      	ldr	r3, [r3, #0]
 800811e:	4618      	mov	r0, r3
 8008120:	f7ff ff06 	bl	8007f30 <LL_EXTI_EnableRisingTrig_0_31>
            /* Enable Falling Trigger on provided Lines */
            LL_EXTI_EnableFallingTrig_0_31(EXTI_InitStruct->Line_0_31);
 8008124:	687b      	ldr	r3, [r7, #4]
 8008126:	681b      	ldr	r3, [r3, #0]
 8008128:	4618      	mov	r0, r3
 800812a:	f7ff ff4d 	bl	8007fc8 <LL_EXTI_EnableFallingTrig_0_31>
            break;
 800812e:	e005      	b.n	800813c <LL_EXTI_Init+0xdc>
          default:
            status |= 0x02u;
 8008130:	68fb      	ldr	r3, [r7, #12]
 8008132:	f043 0302 	orr.w	r3, r3, #2
 8008136:	60fb      	str	r3, [r7, #12]
            break;
 8008138:	e000      	b.n	800813c <LL_EXTI_Init+0xdc>
        }
      }
 800813a:	bf00      	nop
    }
    /* Configure EXTI Lines in range from 32 to 63 */
    if (EXTI_InitStruct->Line_32_63 != LL_EXTI_LINE_NONE)
 800813c:	687b      	ldr	r3, [r7, #4]
 800813e:	685b      	ldr	r3, [r3, #4]
 8008140:	2b00      	cmp	r3, #0
 8008142:	d075      	beq.n	8008230 <LL_EXTI_Init+0x1d0>
    {
      switch (EXTI_InitStruct->Mode)
 8008144:	687b      	ldr	r3, [r7, #4]
 8008146:	7a5b      	ldrb	r3, [r3, #9]
 8008148:	2b01      	cmp	r3, #1
 800814a:	d00e      	beq.n	800816a <LL_EXTI_Init+0x10a>
 800814c:	2b02      	cmp	r3, #2
 800814e:	d017      	beq.n	8008180 <LL_EXTI_Init+0x120>
 8008150:	2b00      	cmp	r3, #0
 8008152:	d120      	bne.n	8008196 <LL_EXTI_Init+0x136>
      {
        case LL_EXTI_MODE_IT:
          /* First Disable Event on provided Lines */
          LL_EXTI_DisableEvent_32_63(EXTI_InitStruct->Line_32_63);
 8008154:	687b      	ldr	r3, [r7, #4]
 8008156:	685b      	ldr	r3, [r3, #4]
 8008158:	4618      	mov	r0, r3
 800815a:	f7ff fed5 	bl	8007f08 <LL_EXTI_DisableEvent_32_63>
          /* Then Enable IT on provided Lines */
          LL_EXTI_EnableIT_32_63(EXTI_InitStruct->Line_32_63);
 800815e:	687b      	ldr	r3, [r7, #4]
 8008160:	685b      	ldr	r3, [r3, #4]
 8008162:	4618      	mov	r0, r3
 8008164:	f7ff fe5e 	bl	8007e24 <LL_EXTI_EnableIT_32_63>
          break;
 8008168:	e01a      	b.n	80081a0 <LL_EXTI_Init+0x140>
        case LL_EXTI_MODE_EVENT:
          /* First Disable IT on provided Lines */
          LL_EXTI_DisableIT_32_63(EXTI_InitStruct->Line_32_63);
 800816a:	687b      	ldr	r3, [r7, #4]
 800816c:	685b      	ldr	r3, [r3, #4]
 800816e:	4618      	mov	r0, r3
 8008170:	f7ff fe7e 	bl	8007e70 <LL_EXTI_DisableIT_32_63>
          /* Then Enable Event on provided Lines */
          LL_EXTI_EnableEvent_32_63(EXTI_InitStruct->Line_32_63);
 8008174:	687b      	ldr	r3, [r7, #4]
 8008176:	685b      	ldr	r3, [r3, #4]
 8008178:	4618      	mov	r0, r3
 800817a:	f7ff fe9f 	bl	8007ebc <LL_EXTI_EnableEvent_32_63>
          break;
 800817e:	e00f      	b.n	80081a0 <LL_EXTI_Init+0x140>
        case LL_EXTI_MODE_IT_EVENT:
          /* Directly Enable IT on provided Lines */
          LL_EXTI_EnableIT_32_63(EXTI_InitStruct->Line_32_63);
 8008180:	687b      	ldr	r3, [r7, #4]
 8008182:	685b      	ldr	r3, [r3, #4]
 8008184:	4618      	mov	r0, r3
 8008186:	f7ff fe4d 	bl	8007e24 <LL_EXTI_EnableIT_32_63>
          /* Directly Enable IT on provided Lines */
          LL_EXTI_EnableEvent_32_63(EXTI_InitStruct->Line_32_63);
 800818a:	687b      	ldr	r3, [r7, #4]
 800818c:	685b      	ldr	r3, [r3, #4]
 800818e:	4618      	mov	r0, r3
 8008190:	f7ff fe94 	bl	8007ebc <LL_EXTI_EnableEvent_32_63>
          break;
 8008194:	e004      	b.n	80081a0 <LL_EXTI_Init+0x140>
        default:
          status |= 0x04u;
 8008196:	68fb      	ldr	r3, [r7, #12]
 8008198:	f043 0304 	orr.w	r3, r3, #4
 800819c:	60fb      	str	r3, [r7, #12]
          break;
 800819e:	bf00      	nop
      }
      if (EXTI_InitStruct->Trigger != LL_EXTI_TRIGGER_NONE)
 80081a0:	687b      	ldr	r3, [r7, #4]
 80081a2:	7a9b      	ldrb	r3, [r3, #10]
 80081a4:	2b00      	cmp	r3, #0
 80081a6:	d043      	beq.n	8008230 <LL_EXTI_Init+0x1d0>
      {
        switch (EXTI_InitStruct->Trigger)
 80081a8:	687b      	ldr	r3, [r7, #4]
 80081aa:	7a9b      	ldrb	r3, [r3, #10]
 80081ac:	2b02      	cmp	r3, #2
 80081ae:	d00e      	beq.n	80081ce <LL_EXTI_Init+0x16e>
 80081b0:	2b03      	cmp	r3, #3
 80081b2:	d017      	beq.n	80081e4 <LL_EXTI_Init+0x184>
 80081b4:	2b01      	cmp	r3, #1
 80081b6:	d120      	bne.n	80081fa <LL_EXTI_Init+0x19a>
        {
          case LL_EXTI_TRIGGER_RISING:
            /* First Disable Falling Trigger on provided Lines */
            LL_EXTI_DisableFallingTrig_32_63(EXTI_InitStruct->Line_32_63);
 80081b8:	687b      	ldr	r3, [r7, #4]
 80081ba:	685b      	ldr	r3, [r3, #4]
 80081bc:	4618      	mov	r0, r3
 80081be:	f7ff ff3b 	bl	8008038 <LL_EXTI_DisableFallingTrig_32_63>
            /* Then Enable IT on provided Lines */
            LL_EXTI_EnableRisingTrig_32_63(EXTI_InitStruct->Line_32_63);
 80081c2:	687b      	ldr	r3, [r7, #4]
 80081c4:	685b      	ldr	r3, [r3, #4]
 80081c6:	4618      	mov	r0, r3
 80081c8:	f7ff fec4 	bl	8007f54 <LL_EXTI_EnableRisingTrig_32_63>
            break;
 80081cc:	e031      	b.n	8008232 <LL_EXTI_Init+0x1d2>
          case LL_EXTI_TRIGGER_FALLING:
            /* First Disable Rising Trigger on provided Lines */
            LL_EXTI_DisableRisingTrig_32_63(EXTI_InitStruct->Line_32_63);
 80081ce:	687b      	ldr	r3, [r7, #4]
 80081d0:	685b      	ldr	r3, [r3, #4]
 80081d2:	4618      	mov	r0, r3
 80081d4:	f7ff fee4 	bl	8007fa0 <LL_EXTI_DisableRisingTrig_32_63>
            /* Then Enable Falling Trigger on provided Lines */
            LL_EXTI_EnableFallingTrig_32_63(EXTI_InitStruct->Line_32_63);
 80081d8:	687b      	ldr	r3, [r7, #4]
 80081da:	685b      	ldr	r3, [r3, #4]
 80081dc:	4618      	mov	r0, r3
 80081de:	f7ff ff05 	bl	8007fec <LL_EXTI_EnableFallingTrig_32_63>
            break;
 80081e2:	e026      	b.n	8008232 <LL_EXTI_Init+0x1d2>
          case LL_EXTI_TRIGGER_RISING_FALLING:
            /* Enable Rising Trigger on provided Lines */
            LL_EXTI_EnableRisingTrig_32_63(EXTI_InitStruct->Line_32_63);
 80081e4:	687b      	ldr	r3, [r7, #4]
 80081e6:	685b      	ldr	r3, [r3, #4]
 80081e8:	4618      	mov	r0, r3
 80081ea:	f7ff feb3 	bl	8007f54 <LL_EXTI_EnableRisingTrig_32_63>
            /* Enable Falling Trigger on provided Lines */
            LL_EXTI_EnableFallingTrig_32_63(EXTI_InitStruct->Line_32_63);
 80081ee:	687b      	ldr	r3, [r7, #4]
 80081f0:	685b      	ldr	r3, [r3, #4]
 80081f2:	4618      	mov	r0, r3
 80081f4:	f7ff fefa 	bl	8007fec <LL_EXTI_EnableFallingTrig_32_63>
            break;
 80081f8:	e01b      	b.n	8008232 <LL_EXTI_Init+0x1d2>
          default:
            status |= 0x05u;
 80081fa:	68fb      	ldr	r3, [r7, #12]
 80081fc:	f043 0305 	orr.w	r3, r3, #5
 8008200:	60fb      	str	r3, [r7, #12]
            break;
 8008202:	bf00      	nop
 8008204:	e015      	b.n	8008232 <LL_EXTI_Init+0x1d2>
  }
  /* DISABLE LineCommand */
  else
  {
    /* De-configure IT EXTI Lines in range from 0 to 31 */
    LL_EXTI_DisableIT_0_31(EXTI_InitStruct->Line_0_31);
 8008206:	687b      	ldr	r3, [r7, #4]
 8008208:	681b      	ldr	r3, [r3, #0]
 800820a:	4618      	mov	r0, r3
 800820c:	f7ff fe1c 	bl	8007e48 <LL_EXTI_DisableIT_0_31>
    /* De-configure Event EXTI Lines in range from 0 to 31 */
    LL_EXTI_DisableEvent_0_31(EXTI_InitStruct->Line_0_31);
 8008210:	687b      	ldr	r3, [r7, #4]
 8008212:	681b      	ldr	r3, [r3, #0]
 8008214:	4618      	mov	r0, r3
 8008216:	f7ff fe63 	bl	8007ee0 <LL_EXTI_DisableEvent_0_31>
    /* De-configure IT EXTI Lines in range from 32 to 63 */
    LL_EXTI_DisableIT_32_63(EXTI_InitStruct->Line_32_63);
 800821a:	687b      	ldr	r3, [r7, #4]
 800821c:	685b      	ldr	r3, [r3, #4]
 800821e:	4618      	mov	r0, r3
 8008220:	f7ff fe26 	bl	8007e70 <LL_EXTI_DisableIT_32_63>
    /* De-configure Event EXTI Lines in range from 32 to 63 */
    LL_EXTI_DisableEvent_32_63(EXTI_InitStruct->Line_32_63);
 8008224:	687b      	ldr	r3, [r7, #4]
 8008226:	685b      	ldr	r3, [r3, #4]
 8008228:	4618      	mov	r0, r3
 800822a:	f7ff fe6d 	bl	8007f08 <LL_EXTI_DisableEvent_32_63>
 800822e:	e000      	b.n	8008232 <LL_EXTI_Init+0x1d2>
      }
 8008230:	bf00      	nop
  }

  return status;
 8008232:	68fb      	ldr	r3, [r7, #12]
}
 8008234:	4618      	mov	r0, r3
 8008236:	3710      	adds	r7, #16
 8008238:	46bd      	mov	sp, r7
 800823a:	bd80      	pop	{r7, pc}

0800823c <LL_GPIO_SetPinMode>:
{
 800823c:	b480      	push	{r7}
 800823e:	b089      	sub	sp, #36	; 0x24
 8008240:	af00      	add	r7, sp, #0
 8008242:	60f8      	str	r0, [r7, #12]
 8008244:	60b9      	str	r1, [r7, #8]
 8008246:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->MODER, (GPIO_MODER_MODE0 << (POSITION_VAL(Pin) * 2U)), (Mode << (POSITION_VAL(Pin) * 2U)));
 8008248:	68fb      	ldr	r3, [r7, #12]
 800824a:	681a      	ldr	r2, [r3, #0]
 800824c:	68bb      	ldr	r3, [r7, #8]
 800824e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8008250:	697b      	ldr	r3, [r7, #20]
 8008252:	fa93 f3a3 	rbit	r3, r3
 8008256:	613b      	str	r3, [r7, #16]
  return result;
 8008258:	693b      	ldr	r3, [r7, #16]
 800825a:	fab3 f383 	clz	r3, r3
 800825e:	b2db      	uxtb	r3, r3
 8008260:	005b      	lsls	r3, r3, #1
 8008262:	2103      	movs	r1, #3
 8008264:	fa01 f303 	lsl.w	r3, r1, r3
 8008268:	43db      	mvns	r3, r3
 800826a:	401a      	ands	r2, r3
 800826c:	68bb      	ldr	r3, [r7, #8]
 800826e:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8008270:	69fb      	ldr	r3, [r7, #28]
 8008272:	fa93 f3a3 	rbit	r3, r3
 8008276:	61bb      	str	r3, [r7, #24]
  return result;
 8008278:	69bb      	ldr	r3, [r7, #24]
 800827a:	fab3 f383 	clz	r3, r3
 800827e:	b2db      	uxtb	r3, r3
 8008280:	005b      	lsls	r3, r3, #1
 8008282:	6879      	ldr	r1, [r7, #4]
 8008284:	fa01 f303 	lsl.w	r3, r1, r3
 8008288:	431a      	orrs	r2, r3
 800828a:	68fb      	ldr	r3, [r7, #12]
 800828c:	601a      	str	r2, [r3, #0]
}
 800828e:	bf00      	nop
 8008290:	3724      	adds	r7, #36	; 0x24
 8008292:	46bd      	mov	sp, r7
 8008294:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008298:	4770      	bx	lr

0800829a <LL_GPIO_SetPinOutputType>:
{
 800829a:	b480      	push	{r7}
 800829c:	b085      	sub	sp, #20
 800829e:	af00      	add	r7, sp, #0
 80082a0:	60f8      	str	r0, [r7, #12]
 80082a2:	60b9      	str	r1, [r7, #8]
 80082a4:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->OTYPER, PinMask, (PinMask * OutputType));
 80082a6:	68fb      	ldr	r3, [r7, #12]
 80082a8:	685a      	ldr	r2, [r3, #4]
 80082aa:	68bb      	ldr	r3, [r7, #8]
 80082ac:	43db      	mvns	r3, r3
 80082ae:	401a      	ands	r2, r3
 80082b0:	68bb      	ldr	r3, [r7, #8]
 80082b2:	6879      	ldr	r1, [r7, #4]
 80082b4:	fb01 f303 	mul.w	r3, r1, r3
 80082b8:	431a      	orrs	r2, r3
 80082ba:	68fb      	ldr	r3, [r7, #12]
 80082bc:	605a      	str	r2, [r3, #4]
}
 80082be:	bf00      	nop
 80082c0:	3714      	adds	r7, #20
 80082c2:	46bd      	mov	sp, r7
 80082c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80082c8:	4770      	bx	lr

080082ca <LL_GPIO_SetPinSpeed>:
{
 80082ca:	b480      	push	{r7}
 80082cc:	b089      	sub	sp, #36	; 0x24
 80082ce:	af00      	add	r7, sp, #0
 80082d0:	60f8      	str	r0, [r7, #12]
 80082d2:	60b9      	str	r1, [r7, #8]
 80082d4:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->OSPEEDR, (GPIO_OSPEEDR_OSPEED0 << (POSITION_VAL(Pin) * 2U)),
 80082d6:	68fb      	ldr	r3, [r7, #12]
 80082d8:	689a      	ldr	r2, [r3, #8]
 80082da:	68bb      	ldr	r3, [r7, #8]
 80082dc:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80082de:	697b      	ldr	r3, [r7, #20]
 80082e0:	fa93 f3a3 	rbit	r3, r3
 80082e4:	613b      	str	r3, [r7, #16]
  return result;
 80082e6:	693b      	ldr	r3, [r7, #16]
 80082e8:	fab3 f383 	clz	r3, r3
 80082ec:	b2db      	uxtb	r3, r3
 80082ee:	005b      	lsls	r3, r3, #1
 80082f0:	2103      	movs	r1, #3
 80082f2:	fa01 f303 	lsl.w	r3, r1, r3
 80082f6:	43db      	mvns	r3, r3
 80082f8:	401a      	ands	r2, r3
 80082fa:	68bb      	ldr	r3, [r7, #8]
 80082fc:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80082fe:	69fb      	ldr	r3, [r7, #28]
 8008300:	fa93 f3a3 	rbit	r3, r3
 8008304:	61bb      	str	r3, [r7, #24]
  return result;
 8008306:	69bb      	ldr	r3, [r7, #24]
 8008308:	fab3 f383 	clz	r3, r3
 800830c:	b2db      	uxtb	r3, r3
 800830e:	005b      	lsls	r3, r3, #1
 8008310:	6879      	ldr	r1, [r7, #4]
 8008312:	fa01 f303 	lsl.w	r3, r1, r3
 8008316:	431a      	orrs	r2, r3
 8008318:	68fb      	ldr	r3, [r7, #12]
 800831a:	609a      	str	r2, [r3, #8]
}
 800831c:	bf00      	nop
 800831e:	3724      	adds	r7, #36	; 0x24
 8008320:	46bd      	mov	sp, r7
 8008322:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008326:	4770      	bx	lr

08008328 <LL_GPIO_SetPinPull>:
{
 8008328:	b480      	push	{r7}
 800832a:	b089      	sub	sp, #36	; 0x24
 800832c:	af00      	add	r7, sp, #0
 800832e:	60f8      	str	r0, [r7, #12]
 8008330:	60b9      	str	r1, [r7, #8]
 8008332:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->PUPDR, (GPIO_PUPDR_PUPD0 << (POSITION_VAL(Pin) * 2U)), (Pull << (POSITION_VAL(Pin) * 2U)));
 8008334:	68fb      	ldr	r3, [r7, #12]
 8008336:	68da      	ldr	r2, [r3, #12]
 8008338:	68bb      	ldr	r3, [r7, #8]
 800833a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800833c:	697b      	ldr	r3, [r7, #20]
 800833e:	fa93 f3a3 	rbit	r3, r3
 8008342:	613b      	str	r3, [r7, #16]
  return result;
 8008344:	693b      	ldr	r3, [r7, #16]
 8008346:	fab3 f383 	clz	r3, r3
 800834a:	b2db      	uxtb	r3, r3
 800834c:	005b      	lsls	r3, r3, #1
 800834e:	2103      	movs	r1, #3
 8008350:	fa01 f303 	lsl.w	r3, r1, r3
 8008354:	43db      	mvns	r3, r3
 8008356:	401a      	ands	r2, r3
 8008358:	68bb      	ldr	r3, [r7, #8]
 800835a:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800835c:	69fb      	ldr	r3, [r7, #28]
 800835e:	fa93 f3a3 	rbit	r3, r3
 8008362:	61bb      	str	r3, [r7, #24]
  return result;
 8008364:	69bb      	ldr	r3, [r7, #24]
 8008366:	fab3 f383 	clz	r3, r3
 800836a:	b2db      	uxtb	r3, r3
 800836c:	005b      	lsls	r3, r3, #1
 800836e:	6879      	ldr	r1, [r7, #4]
 8008370:	fa01 f303 	lsl.w	r3, r1, r3
 8008374:	431a      	orrs	r2, r3
 8008376:	68fb      	ldr	r3, [r7, #12]
 8008378:	60da      	str	r2, [r3, #12]
}
 800837a:	bf00      	nop
 800837c:	3724      	adds	r7, #36	; 0x24
 800837e:	46bd      	mov	sp, r7
 8008380:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008384:	4770      	bx	lr

08008386 <LL_GPIO_SetAFPin_0_7>:
{
 8008386:	b480      	push	{r7}
 8008388:	b089      	sub	sp, #36	; 0x24
 800838a:	af00      	add	r7, sp, #0
 800838c:	60f8      	str	r0, [r7, #12]
 800838e:	60b9      	str	r1, [r7, #8]
 8008390:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->AFR[0], (GPIO_AFRL_AFSEL0 << (POSITION_VAL(Pin) * 4U)),
 8008392:	68fb      	ldr	r3, [r7, #12]
 8008394:	6a1a      	ldr	r2, [r3, #32]
 8008396:	68bb      	ldr	r3, [r7, #8]
 8008398:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800839a:	697b      	ldr	r3, [r7, #20]
 800839c:	fa93 f3a3 	rbit	r3, r3
 80083a0:	613b      	str	r3, [r7, #16]
  return result;
 80083a2:	693b      	ldr	r3, [r7, #16]
 80083a4:	fab3 f383 	clz	r3, r3
 80083a8:	b2db      	uxtb	r3, r3
 80083aa:	009b      	lsls	r3, r3, #2
 80083ac:	210f      	movs	r1, #15
 80083ae:	fa01 f303 	lsl.w	r3, r1, r3
 80083b2:	43db      	mvns	r3, r3
 80083b4:	401a      	ands	r2, r3
 80083b6:	68bb      	ldr	r3, [r7, #8]
 80083b8:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80083ba:	69fb      	ldr	r3, [r7, #28]
 80083bc:	fa93 f3a3 	rbit	r3, r3
 80083c0:	61bb      	str	r3, [r7, #24]
  return result;
 80083c2:	69bb      	ldr	r3, [r7, #24]
 80083c4:	fab3 f383 	clz	r3, r3
 80083c8:	b2db      	uxtb	r3, r3
 80083ca:	009b      	lsls	r3, r3, #2
 80083cc:	6879      	ldr	r1, [r7, #4]
 80083ce:	fa01 f303 	lsl.w	r3, r1, r3
 80083d2:	431a      	orrs	r2, r3
 80083d4:	68fb      	ldr	r3, [r7, #12]
 80083d6:	621a      	str	r2, [r3, #32]
}
 80083d8:	bf00      	nop
 80083da:	3724      	adds	r7, #36	; 0x24
 80083dc:	46bd      	mov	sp, r7
 80083de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083e2:	4770      	bx	lr

080083e4 <LL_GPIO_SetAFPin_8_15>:
{
 80083e4:	b480      	push	{r7}
 80083e6:	b089      	sub	sp, #36	; 0x24
 80083e8:	af00      	add	r7, sp, #0
 80083ea:	60f8      	str	r0, [r7, #12]
 80083ec:	60b9      	str	r1, [r7, #8]
 80083ee:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->AFR[1], (GPIO_AFRH_AFSEL8 << (POSITION_VAL(Pin >> 8U) * 4U)),
 80083f0:	68fb      	ldr	r3, [r7, #12]
 80083f2:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80083f4:	68bb      	ldr	r3, [r7, #8]
 80083f6:	0a1b      	lsrs	r3, r3, #8
 80083f8:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80083fa:	697b      	ldr	r3, [r7, #20]
 80083fc:	fa93 f3a3 	rbit	r3, r3
 8008400:	613b      	str	r3, [r7, #16]
  return result;
 8008402:	693b      	ldr	r3, [r7, #16]
 8008404:	fab3 f383 	clz	r3, r3
 8008408:	b2db      	uxtb	r3, r3
 800840a:	009b      	lsls	r3, r3, #2
 800840c:	210f      	movs	r1, #15
 800840e:	fa01 f303 	lsl.w	r3, r1, r3
 8008412:	43db      	mvns	r3, r3
 8008414:	401a      	ands	r2, r3
 8008416:	68bb      	ldr	r3, [r7, #8]
 8008418:	0a1b      	lsrs	r3, r3, #8
 800841a:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800841c:	69fb      	ldr	r3, [r7, #28]
 800841e:	fa93 f3a3 	rbit	r3, r3
 8008422:	61bb      	str	r3, [r7, #24]
  return result;
 8008424:	69bb      	ldr	r3, [r7, #24]
 8008426:	fab3 f383 	clz	r3, r3
 800842a:	b2db      	uxtb	r3, r3
 800842c:	009b      	lsls	r3, r3, #2
 800842e:	6879      	ldr	r1, [r7, #4]
 8008430:	fa01 f303 	lsl.w	r3, r1, r3
 8008434:	431a      	orrs	r2, r3
 8008436:	68fb      	ldr	r3, [r7, #12]
 8008438:	625a      	str	r2, [r3, #36]	; 0x24
}
 800843a:	bf00      	nop
 800843c:	3724      	adds	r7, #36	; 0x24
 800843e:	46bd      	mov	sp, r7
 8008440:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008444:	4770      	bx	lr

08008446 <LL_GPIO_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: GPIO registers are initialized according to GPIO_InitStruct content
  *          - ERROR:   Not applicable
  */
ErrorStatus LL_GPIO_Init(GPIO_TypeDef *GPIOx, LL_GPIO_InitTypeDef *GPIO_InitStruct)
{
 8008446:	b580      	push	{r7, lr}
 8008448:	b086      	sub	sp, #24
 800844a:	af00      	add	r7, sp, #0
 800844c:	6078      	str	r0, [r7, #4]
 800844e:	6039      	str	r1, [r7, #0]
  assert_param(IS_LL_GPIO_MODE(GPIO_InitStruct->Mode));
  assert_param(IS_LL_GPIO_PULL(GPIO_InitStruct->Pull));

  /* ------------------------- Configure the port pins ---------------- */
  /* Initialize  pinpos on first pin set */
  pinpos = POSITION_VAL(GPIO_InitStruct->Pin);
 8008450:	683b      	ldr	r3, [r7, #0]
 8008452:	681b      	ldr	r3, [r3, #0]
 8008454:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8008456:	68fb      	ldr	r3, [r7, #12]
 8008458:	fa93 f3a3 	rbit	r3, r3
 800845c:	60bb      	str	r3, [r7, #8]
  return result;
 800845e:	68bb      	ldr	r3, [r7, #8]
 8008460:	fab3 f383 	clz	r3, r3
 8008464:	b2db      	uxtb	r3, r3
 8008466:	617b      	str	r3, [r7, #20]

  /* Configure the port pins */
  while (((GPIO_InitStruct->Pin) >> pinpos) != 0x00000000U)
 8008468:	e040      	b.n	80084ec <LL_GPIO_Init+0xa6>
  {
    /* Get current io position */
    currentpin = (GPIO_InitStruct->Pin) & (0x00000001UL << pinpos);
 800846a:	683b      	ldr	r3, [r7, #0]
 800846c:	681a      	ldr	r2, [r3, #0]
 800846e:	2101      	movs	r1, #1
 8008470:	697b      	ldr	r3, [r7, #20]
 8008472:	fa01 f303 	lsl.w	r3, r1, r3
 8008476:	4013      	ands	r3, r2
 8008478:	613b      	str	r3, [r7, #16]

    if (currentpin != 0x00u)
 800847a:	693b      	ldr	r3, [r7, #16]
 800847c:	2b00      	cmp	r3, #0
 800847e:	d032      	beq.n	80084e6 <LL_GPIO_Init+0xa0>
    {
      /* Pin Mode configuration */
      LL_GPIO_SetPinMode(GPIOx, currentpin, GPIO_InitStruct->Mode);
 8008480:	683b      	ldr	r3, [r7, #0]
 8008482:	685b      	ldr	r3, [r3, #4]
 8008484:	461a      	mov	r2, r3
 8008486:	6939      	ldr	r1, [r7, #16]
 8008488:	6878      	ldr	r0, [r7, #4]
 800848a:	f7ff fed7 	bl	800823c <LL_GPIO_SetPinMode>

      if ((GPIO_InitStruct->Mode == LL_GPIO_MODE_OUTPUT) || (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE))
 800848e:	683b      	ldr	r3, [r7, #0]
 8008490:	685b      	ldr	r3, [r3, #4]
 8008492:	2b01      	cmp	r3, #1
 8008494:	d003      	beq.n	800849e <LL_GPIO_Init+0x58>
 8008496:	683b      	ldr	r3, [r7, #0]
 8008498:	685b      	ldr	r3, [r3, #4]
 800849a:	2b02      	cmp	r3, #2
 800849c:	d106      	bne.n	80084ac <LL_GPIO_Init+0x66>
      {
        /* Check Speed mode parameters */
        assert_param(IS_LL_GPIO_SPEED(GPIO_InitStruct->Speed));

        /* Speed mode configuration */
        LL_GPIO_SetPinSpeed(GPIOx, currentpin, GPIO_InitStruct->Speed);
 800849e:	683b      	ldr	r3, [r7, #0]
 80084a0:	689b      	ldr	r3, [r3, #8]
 80084a2:	461a      	mov	r2, r3
 80084a4:	6939      	ldr	r1, [r7, #16]
 80084a6:	6878      	ldr	r0, [r7, #4]
 80084a8:	f7ff ff0f 	bl	80082ca <LL_GPIO_SetPinSpeed>
      }

      /* Pull-up Pull down resistor configuration*/
      LL_GPIO_SetPinPull(GPIOx, currentpin, GPIO_InitStruct->Pull);
 80084ac:	683b      	ldr	r3, [r7, #0]
 80084ae:	691b      	ldr	r3, [r3, #16]
 80084b0:	461a      	mov	r2, r3
 80084b2:	6939      	ldr	r1, [r7, #16]
 80084b4:	6878      	ldr	r0, [r7, #4]
 80084b6:	f7ff ff37 	bl	8008328 <LL_GPIO_SetPinPull>

      if (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE)
 80084ba:	683b      	ldr	r3, [r7, #0]
 80084bc:	685b      	ldr	r3, [r3, #4]
 80084be:	2b02      	cmp	r3, #2
 80084c0:	d111      	bne.n	80084e6 <LL_GPIO_Init+0xa0>
      {
        /* Check Alternate parameter */
        assert_param(IS_LL_GPIO_ALTERNATE(GPIO_InitStruct->Alternate));

        /* Speed mode configuration */
        if (currentpin < LL_GPIO_PIN_8)
 80084c2:	693b      	ldr	r3, [r7, #16]
 80084c4:	2bff      	cmp	r3, #255	; 0xff
 80084c6:	d807      	bhi.n	80084d8 <LL_GPIO_Init+0x92>
        {
          LL_GPIO_SetAFPin_0_7(GPIOx, currentpin, GPIO_InitStruct->Alternate);
 80084c8:	683b      	ldr	r3, [r7, #0]
 80084ca:	695b      	ldr	r3, [r3, #20]
 80084cc:	461a      	mov	r2, r3
 80084ce:	6939      	ldr	r1, [r7, #16]
 80084d0:	6878      	ldr	r0, [r7, #4]
 80084d2:	f7ff ff58 	bl	8008386 <LL_GPIO_SetAFPin_0_7>
 80084d6:	e006      	b.n	80084e6 <LL_GPIO_Init+0xa0>
        }
        else
        {
          LL_GPIO_SetAFPin_8_15(GPIOx, currentpin, GPIO_InitStruct->Alternate);
 80084d8:	683b      	ldr	r3, [r7, #0]
 80084da:	695b      	ldr	r3, [r3, #20]
 80084dc:	461a      	mov	r2, r3
 80084de:	6939      	ldr	r1, [r7, #16]
 80084e0:	6878      	ldr	r0, [r7, #4]
 80084e2:	f7ff ff7f 	bl	80083e4 <LL_GPIO_SetAFPin_8_15>
        }
      }
    }
    pinpos++;
 80084e6:	697b      	ldr	r3, [r7, #20]
 80084e8:	3301      	adds	r3, #1
 80084ea:	617b      	str	r3, [r7, #20]
  while (((GPIO_InitStruct->Pin) >> pinpos) != 0x00000000U)
 80084ec:	683b      	ldr	r3, [r7, #0]
 80084ee:	681a      	ldr	r2, [r3, #0]
 80084f0:	697b      	ldr	r3, [r7, #20]
 80084f2:	fa22 f303 	lsr.w	r3, r2, r3
 80084f6:	2b00      	cmp	r3, #0
 80084f8:	d1b7      	bne.n	800846a <LL_GPIO_Init+0x24>
  }

  if ((GPIO_InitStruct->Mode == LL_GPIO_MODE_OUTPUT) || (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE))
 80084fa:	683b      	ldr	r3, [r7, #0]
 80084fc:	685b      	ldr	r3, [r3, #4]
 80084fe:	2b01      	cmp	r3, #1
 8008500:	d003      	beq.n	800850a <LL_GPIO_Init+0xc4>
 8008502:	683b      	ldr	r3, [r7, #0]
 8008504:	685b      	ldr	r3, [r3, #4]
 8008506:	2b02      	cmp	r3, #2
 8008508:	d107      	bne.n	800851a <LL_GPIO_Init+0xd4>
  {
    /* Check Output mode parameters */
    assert_param(IS_LL_GPIO_OUTPUT_TYPE(GPIO_InitStruct->OutputType));

    /* Output mode configuration*/
    LL_GPIO_SetPinOutputType(GPIOx, GPIO_InitStruct->Pin, GPIO_InitStruct->OutputType);
 800850a:	683b      	ldr	r3, [r7, #0]
 800850c:	6819      	ldr	r1, [r3, #0]
 800850e:	683b      	ldr	r3, [r7, #0]
 8008510:	68db      	ldr	r3, [r3, #12]
 8008512:	461a      	mov	r2, r3
 8008514:	6878      	ldr	r0, [r7, #4]
 8008516:	f7ff fec0 	bl	800829a <LL_GPIO_SetPinOutputType>

  }
  return (SUCCESS);
 800851a:	2300      	movs	r3, #0
}
 800851c:	4618      	mov	r0, r3
 800851e:	3718      	adds	r7, #24
 8008520:	46bd      	mov	sp, r7
 8008522:	bd80      	pop	{r7, pc}

08008524 <ILI9341_Draw_Bordered_Filled_Rectangle_Coord>:
 *
 *
 */

void ILI9341_Draw_Bordered_Filled_Rectangle_Coord(uint16_t x, uint16_t y, uint16_t w, uint16_t h, uint16_t inner_colour, uint8_t border_weight, uint8_t border_colour)
{
 8008524:	b590      	push	{r4, r7, lr}
 8008526:	b087      	sub	sp, #28
 8008528:	af02      	add	r7, sp, #8
 800852a:	4604      	mov	r4, r0
 800852c:	4608      	mov	r0, r1
 800852e:	4611      	mov	r1, r2
 8008530:	461a      	mov	r2, r3
 8008532:	4623      	mov	r3, r4
 8008534:	80fb      	strh	r3, [r7, #6]
 8008536:	4603      	mov	r3, r0
 8008538:	80bb      	strh	r3, [r7, #4]
 800853a:	460b      	mov	r3, r1
 800853c:	807b      	strh	r3, [r7, #2]
 800853e:	4613      	mov	r3, r2
 8008540:	803b      	strh	r3, [r7, #0]

	// Draw inwards (and shorter) for each level of border weight
	for(uint8_t b = 0; ; b++)
 8008542:	2300      	movs	r3, #0
 8008544:	73fb      	strb	r3, [r7, #15]
	{


		if(b > border_weight)
 8008546:	7bfa      	ldrb	r2, [r7, #15]
 8008548:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 800854c:	429a      	cmp	r2, r3
 800854e:	d93a      	bls.n	80085c6 <ILI9341_Draw_Bordered_Filled_Rectangle_Coord+0xa2>
		{

			// stop before the inner space reaches zero! (hard fault)
			if( ((y + b) == ((y + h) - b)) || ((x + b) == ((x + w) - b)) )
 8008550:	88ba      	ldrh	r2, [r7, #4]
 8008552:	7bfb      	ldrb	r3, [r7, #15]
 8008554:	441a      	add	r2, r3
 8008556:	88b9      	ldrh	r1, [r7, #4]
 8008558:	883b      	ldrh	r3, [r7, #0]
 800855a:	4419      	add	r1, r3
 800855c:	7bfb      	ldrb	r3, [r7, #15]
 800855e:	1acb      	subs	r3, r1, r3
 8008560:	429a      	cmp	r2, r3
 8008562:	f000 8090 	beq.w	8008686 <ILI9341_Draw_Bordered_Filled_Rectangle_Coord+0x162>
 8008566:	88fa      	ldrh	r2, [r7, #6]
 8008568:	7bfb      	ldrb	r3, [r7, #15]
 800856a:	441a      	add	r2, r3
 800856c:	88f9      	ldrh	r1, [r7, #6]
 800856e:	887b      	ldrh	r3, [r7, #2]
 8008570:	4419      	add	r1, r3
 8008572:	7bfb      	ldrb	r3, [r7, #15]
 8008574:	1acb      	subs	r3, r1, r3
 8008576:	429a      	cmp	r2, r3
 8008578:	f000 8085 	beq.w	8008686 <ILI9341_Draw_Bordered_Filled_Rectangle_Coord+0x162>
				// add final line?
				goto finish;
			}
			else
			{
				ILI9341_Draw_Rectangle(x + b, y + b, (w - (2*b)) + 1, (h - (2*b)) + 1, inner_colour, AREA_CHUNK);
 800857c:	7bfb      	ldrb	r3, [r7, #15]
 800857e:	b29a      	uxth	r2, r3
 8008580:	88fb      	ldrh	r3, [r7, #6]
 8008582:	4413      	add	r3, r2
 8008584:	b298      	uxth	r0, r3
 8008586:	7bfb      	ldrb	r3, [r7, #15]
 8008588:	b29a      	uxth	r2, r3
 800858a:	88bb      	ldrh	r3, [r7, #4]
 800858c:	4413      	add	r3, r2
 800858e:	b299      	uxth	r1, r3
 8008590:	7bfb      	ldrb	r3, [r7, #15]
 8008592:	b29b      	uxth	r3, r3
 8008594:	005b      	lsls	r3, r3, #1
 8008596:	b29b      	uxth	r3, r3
 8008598:	887a      	ldrh	r2, [r7, #2]
 800859a:	1ad3      	subs	r3, r2, r3
 800859c:	b29b      	uxth	r3, r3
 800859e:	3301      	adds	r3, #1
 80085a0:	b29c      	uxth	r4, r3
 80085a2:	7bfb      	ldrb	r3, [r7, #15]
 80085a4:	b29b      	uxth	r3, r3
 80085a6:	005b      	lsls	r3, r3, #1
 80085a8:	b29b      	uxth	r3, r3
 80085aa:	883a      	ldrh	r2, [r7, #0]
 80085ac:	1ad3      	subs	r3, r2, r3
 80085ae:	b29b      	uxth	r3, r3
 80085b0:	3301      	adds	r3, #1
 80085b2:	b29a      	uxth	r2, r3
 80085b4:	2304      	movs	r3, #4
 80085b6:	9301      	str	r3, [sp, #4]
 80085b8:	8c3b      	ldrh	r3, [r7, #32]
 80085ba:	9300      	str	r3, [sp, #0]
 80085bc:	4613      	mov	r3, r2
 80085be:	4622      	mov	r2, r4
 80085c0:	f000 fd32 	bl	8009028 <ILI9341_Draw_Rectangle>
				goto finish;
 80085c4:	e060      	b.n	8008688 <ILI9341_Draw_Bordered_Filled_Rectangle_Coord+0x164>
			}
		}

		// Horizontal lines
		ILI9341_Draw_Horizontal_Line(	x + b,
 80085c6:	7bfb      	ldrb	r3, [r7, #15]
 80085c8:	b29a      	uxth	r2, r3
 80085ca:	88fb      	ldrh	r3, [r7, #6]
 80085cc:	4413      	add	r3, r2
 80085ce:	b298      	uxth	r0, r3
 80085d0:	7bfb      	ldrb	r3, [r7, #15]
 80085d2:	b29a      	uxth	r2, r3
 80085d4:	88bb      	ldrh	r3, [r7, #4]
 80085d6:	4413      	add	r3, r2
 80085d8:	b299      	uxth	r1, r3
 80085da:	7bfb      	ldrb	r3, [r7, #15]
 80085dc:	b29b      	uxth	r3, r3
 80085de:	005b      	lsls	r3, r3, #1
 80085e0:	b29b      	uxth	r3, r3
 80085e2:	887a      	ldrh	r2, [r7, #2]
 80085e4:	1ad3      	subs	r3, r2, r3
 80085e6:	b29a      	uxth	r2, r3
 80085e8:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 80085ec:	b29b      	uxth	r3, r3
 80085ee:	f000 fda1 	bl	8009134 <ILI9341_Draw_Horizontal_Line>
										y + b,
										w - (2*b),
										border_colour);

		ILI9341_Draw_Horizontal_Line(	x + b,
 80085f2:	7bfb      	ldrb	r3, [r7, #15]
 80085f4:	b29a      	uxth	r2, r3
 80085f6:	88fb      	ldrh	r3, [r7, #6]
 80085f8:	4413      	add	r3, r2
 80085fa:	b298      	uxth	r0, r3
										(y + h) - b,
 80085fc:	88ba      	ldrh	r2, [r7, #4]
 80085fe:	883b      	ldrh	r3, [r7, #0]
 8008600:	4413      	add	r3, r2
 8008602:	b29a      	uxth	r2, r3
		ILI9341_Draw_Horizontal_Line(	x + b,
 8008604:	7bfb      	ldrb	r3, [r7, #15]
 8008606:	b29b      	uxth	r3, r3
 8008608:	1ad3      	subs	r3, r2, r3
 800860a:	b299      	uxth	r1, r3
 800860c:	7bfb      	ldrb	r3, [r7, #15]
 800860e:	b29b      	uxth	r3, r3
 8008610:	887a      	ldrh	r2, [r7, #2]
 8008612:	1ad3      	subs	r3, r2, r3
 8008614:	b29a      	uxth	r2, r3
 8008616:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800861a:	b29b      	uxth	r3, r3
 800861c:	f000 fd8a 	bl	8009134 <ILI9341_Draw_Horizontal_Line>
										w - (b),
										border_colour);


		// Vertical lines
		ILI9341_Draw_Vertical_Line(		x + b,
 8008620:	7bfb      	ldrb	r3, [r7, #15]
 8008622:	b29a      	uxth	r2, r3
 8008624:	88fb      	ldrh	r3, [r7, #6]
 8008626:	4413      	add	r3, r2
 8008628:	b298      	uxth	r0, r3
 800862a:	7bfb      	ldrb	r3, [r7, #15]
 800862c:	b29a      	uxth	r2, r3
 800862e:	88bb      	ldrh	r3, [r7, #4]
 8008630:	4413      	add	r3, r2
 8008632:	b299      	uxth	r1, r3
 8008634:	7bfb      	ldrb	r3, [r7, #15]
 8008636:	b29b      	uxth	r3, r3
 8008638:	005b      	lsls	r3, r3, #1
 800863a:	b29b      	uxth	r3, r3
 800863c:	883a      	ldrh	r2, [r7, #0]
 800863e:	1ad3      	subs	r3, r2, r3
 8008640:	b29a      	uxth	r2, r3
 8008642:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8008646:	b29b      	uxth	r3, r3
 8008648:	f000 fdbc 	bl	80091c4 <ILI9341_Draw_Vertical_Line>
										y + b,
										h - (2*b),
										border_colour);

		ILI9341_Draw_Vertical_Line(		(x + w) - b,
 800864c:	88fa      	ldrh	r2, [r7, #6]
 800864e:	887b      	ldrh	r3, [r7, #2]
 8008650:	4413      	add	r3, r2
 8008652:	b29a      	uxth	r2, r3
 8008654:	7bfb      	ldrb	r3, [r7, #15]
 8008656:	b29b      	uxth	r3, r3
 8008658:	1ad3      	subs	r3, r2, r3
 800865a:	b298      	uxth	r0, r3
 800865c:	7bfb      	ldrb	r3, [r7, #15]
 800865e:	b29a      	uxth	r2, r3
 8008660:	88bb      	ldrh	r3, [r7, #4]
 8008662:	4413      	add	r3, r2
 8008664:	b299      	uxth	r1, r3
 8008666:	7bfb      	ldrb	r3, [r7, #15]
 8008668:	b29b      	uxth	r3, r3
 800866a:	005b      	lsls	r3, r3, #1
 800866c:	b29b      	uxth	r3, r3
 800866e:	883a      	ldrh	r2, [r7, #0]
 8008670:	1ad3      	subs	r3, r2, r3
 8008672:	b29a      	uxth	r2, r3
 8008674:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8008678:	b29b      	uxth	r3, r3
 800867a:	f000 fda3 	bl	80091c4 <ILI9341_Draw_Vertical_Line>
	for(uint8_t b = 0; ; b++)
 800867e:	7bfb      	ldrb	r3, [r7, #15]
 8008680:	3301      	adds	r3, #1
 8008682:	73fb      	strb	r3, [r7, #15]
		if(b > border_weight)
 8008684:	e75f      	b.n	8008546 <ILI9341_Draw_Bordered_Filled_Rectangle_Coord+0x22>
										h - (2*b),
										border_colour);

	}

	finish:
 8008686:	bf00      	nop
	// done
	return;
 8008688:	bf00      	nop
}
 800868a:	3714      	adds	r7, #20
 800868c:	46bd      	mov	sp, r7
 800868e:	bd90      	pop	{r4, r7, pc}

08008690 <ILI9341_Draw_Char>:
}

/*Draws a character (fonts imported from fonts.h) at x,Y location with specified font colour, size and Background colour*/
/*See fonts.h implementation of font on what is required for changing to a different font when switching fonts libraries*/
void ILI9341_Draw_Char(char character, uint16_t x, uint16_t y, uint16_t colour, uint16_t size, uint16_t bgcolour)
{
 8008690:	b590      	push	{r4, r7, lr}
 8008692:	b089      	sub	sp, #36	; 0x24
 8008694:	af02      	add	r7, sp, #8
 8008696:	4604      	mov	r4, r0
 8008698:	4608      	mov	r0, r1
 800869a:	4611      	mov	r1, r2
 800869c:	461a      	mov	r2, r3
 800869e:	4623      	mov	r3, r4
 80086a0:	71fb      	strb	r3, [r7, #7]
 80086a2:	4603      	mov	r3, r0
 80086a4:	80bb      	strh	r3, [r7, #4]
 80086a6:	460b      	mov	r3, r1
 80086a8:	807b      	strh	r3, [r7, #2]
 80086aa:	4613      	mov	r3, r2
 80086ac:	803b      	strh	r3, [r7, #0]
    uint8_t 	i,j;
		



	function_char = character;
 80086ae:	79fb      	ldrb	r3, [r7, #7]
 80086b0:	75fb      	strb	r3, [r7, #23]
		
    if (function_char < ' ')
 80086b2:	7dfb      	ldrb	r3, [r7, #23]
 80086b4:	2b1f      	cmp	r3, #31
 80086b6:	d802      	bhi.n	80086be <ILI9341_Draw_Char+0x2e>
    {
        character = 0;
 80086b8:	2300      	movs	r3, #0
 80086ba:	71fb      	strb	r3, [r7, #7]
 80086bc:	e002      	b.n	80086c4 <ILI9341_Draw_Char+0x34>
    }
    else
    {
    	function_char -= 32;
 80086be:	7dfb      	ldrb	r3, [r7, #23]
 80086c0:	3b20      	subs	r3, #32
 80086c2:	75fb      	strb	r3, [r7, #23]
	}
   	
	char temp[CHAR_WIDTH];

	for(uint8_t k = 0; k<CHAR_WIDTH; k++)
 80086c4:	2300      	movs	r3, #0
 80086c6:	753b      	strb	r3, [r7, #20]
 80086c8:	e012      	b.n	80086f0 <ILI9341_Draw_Char+0x60>
	{
		temp[k] = font[function_char][k];
 80086ca:	7dfa      	ldrb	r2, [r7, #23]
 80086cc:	7d38      	ldrb	r0, [r7, #20]
 80086ce:	7d39      	ldrb	r1, [r7, #20]
 80086d0:	4c48      	ldr	r4, [pc, #288]	; (80087f4 <ILI9341_Draw_Char+0x164>)
 80086d2:	4613      	mov	r3, r2
 80086d4:	005b      	lsls	r3, r3, #1
 80086d6:	4413      	add	r3, r2
 80086d8:	005b      	lsls	r3, r3, #1
 80086da:	4423      	add	r3, r4
 80086dc:	4403      	add	r3, r0
 80086de:	781a      	ldrb	r2, [r3, #0]
 80086e0:	f107 0318 	add.w	r3, r7, #24
 80086e4:	440b      	add	r3, r1
 80086e6:	f803 2c0c 	strb.w	r2, [r3, #-12]
	for(uint8_t k = 0; k<CHAR_WIDTH; k++)
 80086ea:	7d3b      	ldrb	r3, [r7, #20]
 80086ec:	3301      	adds	r3, #1
 80086ee:	753b      	strb	r3, [r7, #20]
 80086f0:	7d3b      	ldrb	r3, [r7, #20]
 80086f2:	2b05      	cmp	r3, #5
 80086f4:	d9e9      	bls.n	80086ca <ILI9341_Draw_Char+0x3a>
	}
		
    // Draw pixels
	//ILI9341_Draw_Rectangle(x, Y, CHAR_WIDTH*size, CHAR_HEIGHT*size, bgcolour);
    for (j=0; j<CHAR_WIDTH; j++)
 80086f6:	2300      	movs	r3, #0
 80086f8:	757b      	strb	r3, [r7, #21]
 80086fa:	e074      	b.n	80087e6 <ILI9341_Draw_Char+0x156>
    {
        for (i=0; i<CHAR_HEIGHT; i++)
 80086fc:	2300      	movs	r3, #0
 80086fe:	75bb      	strb	r3, [r7, #22]
 8008700:	e06b      	b.n	80087da <ILI9341_Draw_Char+0x14a>
        {
            if (temp[j] & (1<<i))
 8008702:	7d7b      	ldrb	r3, [r7, #21]
 8008704:	f107 0218 	add.w	r2, r7, #24
 8008708:	4413      	add	r3, r2
 800870a:	f813 3c0c 	ldrb.w	r3, [r3, #-12]
 800870e:	461a      	mov	r2, r3
 8008710:	7dbb      	ldrb	r3, [r7, #22]
 8008712:	fa42 f303 	asr.w	r3, r2, r3
 8008716:	f003 0301 	and.w	r3, r3, #1
 800871a:	2b00      	cmp	r3, #0
 800871c:	d02d      	beq.n	800877a <ILI9341_Draw_Char+0xea>
            {
            	if(size == 1)
 800871e:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8008720:	2b01      	cmp	r3, #1
 8008722:	d10e      	bne.n	8008742 <ILI9341_Draw_Char+0xb2>
				{
            		ILI9341_Draw_Pixel(x+j, y+i, colour);
 8008724:	7d7b      	ldrb	r3, [r7, #21]
 8008726:	b29a      	uxth	r2, r3
 8008728:	88bb      	ldrh	r3, [r7, #4]
 800872a:	4413      	add	r3, r2
 800872c:	b298      	uxth	r0, r3
 800872e:	7dbb      	ldrb	r3, [r7, #22]
 8008730:	b29a      	uxth	r2, r3
 8008732:	887b      	ldrh	r3, [r7, #2]
 8008734:	4413      	add	r3, r2
 8008736:	b29b      	uxth	r3, r3
 8008738:	883a      	ldrh	r2, [r7, #0]
 800873a:	4619      	mov	r1, r3
 800873c:	f000 fb9a 	bl	8008e74 <ILI9341_Draw_Pixel>
 8008740:	e048      	b.n	80087d4 <ILI9341_Draw_Char+0x144>
				}
				else
				{
					ILI9341_Draw_Rectangle(x+(j*size), y+(i*size), size, size, colour, TEXT_CHUNK);
 8008742:	7d7b      	ldrb	r3, [r7, #21]
 8008744:	b29b      	uxth	r3, r3
 8008746:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 8008748:	fb12 f303 	smulbb	r3, r2, r3
 800874c:	b29a      	uxth	r2, r3
 800874e:	88bb      	ldrh	r3, [r7, #4]
 8008750:	4413      	add	r3, r2
 8008752:	b298      	uxth	r0, r3
 8008754:	7dbb      	ldrb	r3, [r7, #22]
 8008756:	b29b      	uxth	r3, r3
 8008758:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 800875a:	fb12 f303 	smulbb	r3, r2, r3
 800875e:	b29a      	uxth	r2, r3
 8008760:	887b      	ldrh	r3, [r7, #2]
 8008762:	4413      	add	r3, r2
 8008764:	b299      	uxth	r1, r3
 8008766:	8d3c      	ldrh	r4, [r7, #40]	; 0x28
 8008768:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 800876a:	2301      	movs	r3, #1
 800876c:	9301      	str	r3, [sp, #4]
 800876e:	883b      	ldrh	r3, [r7, #0]
 8008770:	9300      	str	r3, [sp, #0]
 8008772:	4623      	mov	r3, r4
 8008774:	f000 fc58 	bl	8009028 <ILI9341_Draw_Rectangle>
 8008778:	e02c      	b.n	80087d4 <ILI9341_Draw_Char+0x144>
				}
            }
            else
            {
               	if(size == 1)
 800877a:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 800877c:	2b01      	cmp	r3, #1
 800877e:	d10e      	bne.n	800879e <ILI9341_Draw_Char+0x10e>
				{
					ILI9341_Draw_Pixel(x+j, y+i, bgcolour);
 8008780:	7d7b      	ldrb	r3, [r7, #21]
 8008782:	b29a      	uxth	r2, r3
 8008784:	88bb      	ldrh	r3, [r7, #4]
 8008786:	4413      	add	r3, r2
 8008788:	b298      	uxth	r0, r3
 800878a:	7dbb      	ldrb	r3, [r7, #22]
 800878c:	b29a      	uxth	r2, r3
 800878e:	887b      	ldrh	r3, [r7, #2]
 8008790:	4413      	add	r3, r2
 8008792:	b29b      	uxth	r3, r3
 8008794:	8dba      	ldrh	r2, [r7, #44]	; 0x2c
 8008796:	4619      	mov	r1, r3
 8008798:	f000 fb6c 	bl	8008e74 <ILI9341_Draw_Pixel>
 800879c:	e01a      	b.n	80087d4 <ILI9341_Draw_Char+0x144>
				}
				else
				{
					ILI9341_Draw_Rectangle(x+(j*size), y+(i*size), size, size, bgcolour, TEXT_CHUNK);
 800879e:	7d7b      	ldrb	r3, [r7, #21]
 80087a0:	b29b      	uxth	r3, r3
 80087a2:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 80087a4:	fb12 f303 	smulbb	r3, r2, r3
 80087a8:	b29a      	uxth	r2, r3
 80087aa:	88bb      	ldrh	r3, [r7, #4]
 80087ac:	4413      	add	r3, r2
 80087ae:	b298      	uxth	r0, r3
 80087b0:	7dbb      	ldrb	r3, [r7, #22]
 80087b2:	b29b      	uxth	r3, r3
 80087b4:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 80087b6:	fb12 f303 	smulbb	r3, r2, r3
 80087ba:	b29a      	uxth	r2, r3
 80087bc:	887b      	ldrh	r3, [r7, #2]
 80087be:	4413      	add	r3, r2
 80087c0:	b299      	uxth	r1, r3
 80087c2:	8d3c      	ldrh	r4, [r7, #40]	; 0x28
 80087c4:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 80087c6:	2301      	movs	r3, #1
 80087c8:	9301      	str	r3, [sp, #4]
 80087ca:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 80087cc:	9300      	str	r3, [sp, #0]
 80087ce:	4623      	mov	r3, r4
 80087d0:	f000 fc2a 	bl	8009028 <ILI9341_Draw_Rectangle>
        for (i=0; i<CHAR_HEIGHT; i++)
 80087d4:	7dbb      	ldrb	r3, [r7, #22]
 80087d6:	3301      	adds	r3, #1
 80087d8:	75bb      	strb	r3, [r7, #22]
 80087da:	7dbb      	ldrb	r3, [r7, #22]
 80087dc:	2b07      	cmp	r3, #7
 80087de:	d990      	bls.n	8008702 <ILI9341_Draw_Char+0x72>
    for (j=0; j<CHAR_WIDTH; j++)
 80087e0:	7d7b      	ldrb	r3, [r7, #21]
 80087e2:	3301      	adds	r3, #1
 80087e4:	757b      	strb	r3, [r7, #21]
 80087e6:	7d7b      	ldrb	r3, [r7, #21]
 80087e8:	2b05      	cmp	r3, #5
 80087ea:	d987      	bls.n	80086fc <ILI9341_Draw_Char+0x6c>
				}
            }
        }
    }
}
 80087ec:	bf00      	nop
 80087ee:	371c      	adds	r7, #28
 80087f0:	46bd      	mov	sp, r7
 80087f2:	bd90      	pop	{r4, r7, pc}
 80087f4:	0800a4dc 	.word	0x0800a4dc

080087f8 <ILI9341_Draw_Text>:

/*Draws an array of characters (fonts imported from fonts.h) at x,Y location with specified font colour, size and Background colour*/
/*See fonts.h implementation of font on what is required for changing to a different font when switching fonts libraries*/
void ILI9341_Draw_Text(const char* Text, uint16_t x, uint16_t y, uint16_t colour, uint16_t size, uint16_t bgcolour)
{
 80087f8:	b590      	push	{r4, r7, lr}
 80087fa:	b087      	sub	sp, #28
 80087fc:	af02      	add	r7, sp, #8
 80087fe:	60f8      	str	r0, [r7, #12]
 8008800:	4608      	mov	r0, r1
 8008802:	4611      	mov	r1, r2
 8008804:	461a      	mov	r2, r3
 8008806:	4603      	mov	r3, r0
 8008808:	817b      	strh	r3, [r7, #10]
 800880a:	460b      	mov	r3, r1
 800880c:	813b      	strh	r3, [r7, #8]
 800880e:	4613      	mov	r3, r2
 8008810:	80fb      	strh	r3, [r7, #6]
    /*if(size & 1)
    {
    	size = ((size >> 1) * 2);
    }*/

    while (*Text) {
 8008812:	e016      	b.n	8008842 <ILI9341_Draw_Text+0x4a>
        ILI9341_Draw_Char(*Text++, x, y, colour, size, bgcolour);
 8008814:	68fb      	ldr	r3, [r7, #12]
 8008816:	1c5a      	adds	r2, r3, #1
 8008818:	60fa      	str	r2, [r7, #12]
 800881a:	7818      	ldrb	r0, [r3, #0]
 800881c:	88fc      	ldrh	r4, [r7, #6]
 800881e:	893a      	ldrh	r2, [r7, #8]
 8008820:	8979      	ldrh	r1, [r7, #10]
 8008822:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8008824:	9301      	str	r3, [sp, #4]
 8008826:	8c3b      	ldrh	r3, [r7, #32]
 8008828:	9300      	str	r3, [sp, #0]
 800882a:	4623      	mov	r3, r4
 800882c:	f7ff ff30 	bl	8008690 <ILI9341_Draw_Char>
        x += CHAR_WIDTH*size;
 8008830:	8c3b      	ldrh	r3, [r7, #32]
 8008832:	461a      	mov	r2, r3
 8008834:	0052      	lsls	r2, r2, #1
 8008836:	4413      	add	r3, r2
 8008838:	005b      	lsls	r3, r3, #1
 800883a:	b29a      	uxth	r2, r3
 800883c:	897b      	ldrh	r3, [r7, #10]
 800883e:	4413      	add	r3, r2
 8008840:	817b      	strh	r3, [r7, #10]
    while (*Text) {
 8008842:	68fb      	ldr	r3, [r7, #12]
 8008844:	781b      	ldrb	r3, [r3, #0]
 8008846:	2b00      	cmp	r3, #0
 8008848:	d1e4      	bne.n	8008814 <ILI9341_Draw_Text+0x1c>
    }


}
 800884a:	bf00      	nop
 800884c:	3714      	adds	r7, #20
 800884e:	46bd      	mov	sp, r7
 8008850:	bd90      	pop	{r4, r7, pc}
	...

08008854 <ILI9341_SPI_Init>:



/* Initialize SPI */
void ILI9341_SPI_Init(void)
{
 8008854:	b480      	push	{r7}
 8008856:	af00      	add	r7, sp, #0

	//GPIO INIT
	LCD_CS_PORT->ODR &= ~(LCD_CS_PIN);
 8008858:	4b05      	ldr	r3, [pc, #20]	; (8008870 <ILI9341_SPI_Init+0x1c>)
 800885a:	695b      	ldr	r3, [r3, #20]
 800885c:	4a04      	ldr	r2, [pc, #16]	; (8008870 <ILI9341_SPI_Init+0x1c>)
 800885e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8008862:	6153      	str	r3, [r2, #20]
}
 8008864:	bf00      	nop
 8008866:	46bd      	mov	sp, r7
 8008868:	f85d 7b04 	ldr.w	r7, [sp], #4
 800886c:	4770      	bx	lr
 800886e:	bf00      	nop
 8008870:	48000400 	.word	0x48000400

08008874 <ILI9341_SPI_Send>:

/*Send data (char) to LCD*/
void ILI9341_SPI_Send(unsigned char SPI_Data)
{
 8008874:	b580      	push	{r7, lr}
 8008876:	b084      	sub	sp, #16
 8008878:	af00      	add	r7, sp, #0
 800887a:	4603      	mov	r3, r0
 800887c:	71fb      	strb	r3, [r7, #7]
	HAL_StatusTypeDef res;

		if( ((res = HAL_SPI_Transmit(HSPI_INSTANCE, &SPI_Data, 1, 1)) != HAL_OK) )
 800887e:	1df9      	adds	r1, r7, #7
 8008880:	2301      	movs	r3, #1
 8008882:	2201      	movs	r2, #1
 8008884:	4804      	ldr	r0, [pc, #16]	; (8008898 <ILI9341_SPI_Send+0x24>)
 8008886:	f7fe f837 	bl	80068f8 <HAL_SPI_Transmit>
 800888a:	4603      	mov	r3, r0
 800888c:	73fb      	strb	r3, [r7, #15]
		{
			//printf("HAL_SPI_Transmit Error #%u, ", res);
		}


}
 800888e:	bf00      	nop
 8008890:	3710      	adds	r7, #16
 8008892:	46bd      	mov	sp, r7
 8008894:	bd80      	pop	{r7, pc}
 8008896:	bf00      	nop
 8008898:	20000dec 	.word	0x20000dec

0800889c <ILI9341_Write_Command>:

/* Send command (char) to LCD */
void ILI9341_Write_Command(uint8_t Command)
{
 800889c:	b580      	push	{r7, lr}
 800889e:	b082      	sub	sp, #8
 80088a0:	af00      	add	r7, sp, #0
 80088a2:	4603      	mov	r3, r0
 80088a4:	71fb      	strb	r3, [r7, #7]
	LCD_CS_PORT->ODR &= ~(LCD_CS_PIN);
 80088a6:	4b0d      	ldr	r3, [pc, #52]	; (80088dc <ILI9341_Write_Command+0x40>)
 80088a8:	695b      	ldr	r3, [r3, #20]
 80088aa:	4a0c      	ldr	r2, [pc, #48]	; (80088dc <ILI9341_Write_Command+0x40>)
 80088ac:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80088b0:	6153      	str	r3, [r2, #20]
	LCD_DC_PORT->ODR &= ~(LCD_DC_PIN);
 80088b2:	4b0a      	ldr	r3, [pc, #40]	; (80088dc <ILI9341_Write_Command+0x40>)
 80088b4:	695b      	ldr	r3, [r3, #20]
 80088b6:	4a09      	ldr	r2, [pc, #36]	; (80088dc <ILI9341_Write_Command+0x40>)
 80088b8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80088bc:	6153      	str	r3, [r2, #20]
	ILI9341_SPI_Send(Command);
 80088be:	79fb      	ldrb	r3, [r7, #7]
 80088c0:	4618      	mov	r0, r3
 80088c2:	f7ff ffd7 	bl	8008874 <ILI9341_SPI_Send>
	LCD_CS_PORT->ODR |= LCD_CS_PIN;
 80088c6:	4b05      	ldr	r3, [pc, #20]	; (80088dc <ILI9341_Write_Command+0x40>)
 80088c8:	695b      	ldr	r3, [r3, #20]
 80088ca:	4a04      	ldr	r2, [pc, #16]	; (80088dc <ILI9341_Write_Command+0x40>)
 80088cc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80088d0:	6153      	str	r3, [r2, #20]
}
 80088d2:	bf00      	nop
 80088d4:	3708      	adds	r7, #8
 80088d6:	46bd      	mov	sp, r7
 80088d8:	bd80      	pop	{r7, pc}
 80088da:	bf00      	nop
 80088dc:	48000400 	.word	0x48000400

080088e0 <ILI9341_Write_Data>:

/* Send Data (char) to LCD */
void ILI9341_Write_Data(uint8_t Data)
{
 80088e0:	b580      	push	{r7, lr}
 80088e2:	b082      	sub	sp, #8
 80088e4:	af00      	add	r7, sp, #0
 80088e6:	4603      	mov	r3, r0
 80088e8:	71fb      	strb	r3, [r7, #7]
	LCD_DC_PORT->ODR |= LCD_DC_PIN;
 80088ea:	4b0d      	ldr	r3, [pc, #52]	; (8008920 <ILI9341_Write_Data+0x40>)
 80088ec:	695b      	ldr	r3, [r3, #20]
 80088ee:	4a0c      	ldr	r2, [pc, #48]	; (8008920 <ILI9341_Write_Data+0x40>)
 80088f0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80088f4:	6153      	str	r3, [r2, #20]
	LCD_CS_PORT->ODR &= ~(LCD_CS_PIN);
 80088f6:	4b0a      	ldr	r3, [pc, #40]	; (8008920 <ILI9341_Write_Data+0x40>)
 80088f8:	695b      	ldr	r3, [r3, #20]
 80088fa:	4a09      	ldr	r2, [pc, #36]	; (8008920 <ILI9341_Write_Data+0x40>)
 80088fc:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8008900:	6153      	str	r3, [r2, #20]
	ILI9341_SPI_Send(Data);
 8008902:	79fb      	ldrb	r3, [r7, #7]
 8008904:	4618      	mov	r0, r3
 8008906:	f7ff ffb5 	bl	8008874 <ILI9341_SPI_Send>
	LCD_CS_PORT->ODR &= ~(LCD_CS_PIN);
 800890a:	4b05      	ldr	r3, [pc, #20]	; (8008920 <ILI9341_Write_Data+0x40>)
 800890c:	695b      	ldr	r3, [r3, #20]
 800890e:	4a04      	ldr	r2, [pc, #16]	; (8008920 <ILI9341_Write_Data+0x40>)
 8008910:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8008914:	6153      	str	r3, [r2, #20]
}
 8008916:	bf00      	nop
 8008918:	3708      	adds	r7, #8
 800891a:	46bd      	mov	sp, r7
 800891c:	bd80      	pop	{r7, pc}
 800891e:	bf00      	nop
 8008920:	48000400 	.word	0x48000400

08008924 <ILI9341_Set_Address>:

/* Set Address - Location block - to draw into */
void ILI9341_Set_Address(uint16_t X1, uint16_t Y1, uint16_t X2, uint16_t Y2)
{
 8008924:	b590      	push	{r4, r7, lr}
 8008926:	b083      	sub	sp, #12
 8008928:	af00      	add	r7, sp, #0
 800892a:	4604      	mov	r4, r0
 800892c:	4608      	mov	r0, r1
 800892e:	4611      	mov	r1, r2
 8008930:	461a      	mov	r2, r3
 8008932:	4623      	mov	r3, r4
 8008934:	80fb      	strh	r3, [r7, #6]
 8008936:	4603      	mov	r3, r0
 8008938:	80bb      	strh	r3, [r7, #4]
 800893a:	460b      	mov	r3, r1
 800893c:	807b      	strh	r3, [r7, #2]
 800893e:	4613      	mov	r3, r2
 8008940:	803b      	strh	r3, [r7, #0]
	ILI9341_Write_Command(0x2A);
 8008942:	202a      	movs	r0, #42	; 0x2a
 8008944:	f7ff ffaa 	bl	800889c <ILI9341_Write_Command>
	ILI9341_Write_Data(X1>>8);
 8008948:	88fb      	ldrh	r3, [r7, #6]
 800894a:	0a1b      	lsrs	r3, r3, #8
 800894c:	b29b      	uxth	r3, r3
 800894e:	b2db      	uxtb	r3, r3
 8008950:	4618      	mov	r0, r3
 8008952:	f7ff ffc5 	bl	80088e0 <ILI9341_Write_Data>
	ILI9341_Write_Data(X1);
 8008956:	88fb      	ldrh	r3, [r7, #6]
 8008958:	b2db      	uxtb	r3, r3
 800895a:	4618      	mov	r0, r3
 800895c:	f7ff ffc0 	bl	80088e0 <ILI9341_Write_Data>
	ILI9341_Write_Data(X2>>8);
 8008960:	887b      	ldrh	r3, [r7, #2]
 8008962:	0a1b      	lsrs	r3, r3, #8
 8008964:	b29b      	uxth	r3, r3
 8008966:	b2db      	uxtb	r3, r3
 8008968:	4618      	mov	r0, r3
 800896a:	f7ff ffb9 	bl	80088e0 <ILI9341_Write_Data>
	ILI9341_Write_Data(X2);
 800896e:	887b      	ldrh	r3, [r7, #2]
 8008970:	b2db      	uxtb	r3, r3
 8008972:	4618      	mov	r0, r3
 8008974:	f7ff ffb4 	bl	80088e0 <ILI9341_Write_Data>

	ILI9341_Write_Command(0x2B);
 8008978:	202b      	movs	r0, #43	; 0x2b
 800897a:	f7ff ff8f 	bl	800889c <ILI9341_Write_Command>
	ILI9341_Write_Data(Y1>>8);
 800897e:	88bb      	ldrh	r3, [r7, #4]
 8008980:	0a1b      	lsrs	r3, r3, #8
 8008982:	b29b      	uxth	r3, r3
 8008984:	b2db      	uxtb	r3, r3
 8008986:	4618      	mov	r0, r3
 8008988:	f7ff ffaa 	bl	80088e0 <ILI9341_Write_Data>
	ILI9341_Write_Data(Y1);
 800898c:	88bb      	ldrh	r3, [r7, #4]
 800898e:	b2db      	uxtb	r3, r3
 8008990:	4618      	mov	r0, r3
 8008992:	f7ff ffa5 	bl	80088e0 <ILI9341_Write_Data>
	ILI9341_Write_Data(Y2>>8);
 8008996:	883b      	ldrh	r3, [r7, #0]
 8008998:	0a1b      	lsrs	r3, r3, #8
 800899a:	b29b      	uxth	r3, r3
 800899c:	b2db      	uxtb	r3, r3
 800899e:	4618      	mov	r0, r3
 80089a0:	f7ff ff9e 	bl	80088e0 <ILI9341_Write_Data>
	ILI9341_Write_Data(Y2);
 80089a4:	883b      	ldrh	r3, [r7, #0]
 80089a6:	b2db      	uxtb	r3, r3
 80089a8:	4618      	mov	r0, r3
 80089aa:	f7ff ff99 	bl	80088e0 <ILI9341_Write_Data>

	ILI9341_Write_Command(0x2C);
 80089ae:	202c      	movs	r0, #44	; 0x2c
 80089b0:	f7ff ff74 	bl	800889c <ILI9341_Write_Command>
}
 80089b4:	bf00      	nop
 80089b6:	370c      	adds	r7, #12
 80089b8:	46bd      	mov	sp, r7
 80089ba:	bd90      	pop	{r4, r7, pc}

080089bc <ILI9341_Reset>:

/*HARDWARE RESET*/
void ILI9341_Reset(void)
{
 80089bc:	b580      	push	{r7, lr}
 80089be:	af00      	add	r7, sp, #0
	LCD_RST_PORT->ODR &= ~(LCD_RST_PIN);
 80089c0:	4b0c      	ldr	r3, [pc, #48]	; (80089f4 <ILI9341_Reset+0x38>)
 80089c2:	695b      	ldr	r3, [r3, #20]
 80089c4:	4a0b      	ldr	r2, [pc, #44]	; (80089f4 <ILI9341_Reset+0x38>)
 80089c6:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80089ca:	6153      	str	r3, [r2, #20]
	HAL_Delay(200);
 80089cc:	20c8      	movs	r0, #200	; 0xc8
 80089ce:	f7fa fa05 	bl	8002ddc <HAL_Delay>
	LCD_CS_PORT->ODR &= ~(LCD_CS_PIN);
 80089d2:	4b08      	ldr	r3, [pc, #32]	; (80089f4 <ILI9341_Reset+0x38>)
 80089d4:	695b      	ldr	r3, [r3, #20]
 80089d6:	4a07      	ldr	r2, [pc, #28]	; (80089f4 <ILI9341_Reset+0x38>)
 80089d8:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80089dc:	6153      	str	r3, [r2, #20]
	HAL_Delay(200);
 80089de:	20c8      	movs	r0, #200	; 0xc8
 80089e0:	f7fa f9fc 	bl	8002ddc <HAL_Delay>
	LCD_RST_PORT->ODR |= LCD_RST_PIN;
 80089e4:	4b03      	ldr	r3, [pc, #12]	; (80089f4 <ILI9341_Reset+0x38>)
 80089e6:	695b      	ldr	r3, [r3, #20]
 80089e8:	4a02      	ldr	r2, [pc, #8]	; (80089f4 <ILI9341_Reset+0x38>)
 80089ea:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80089ee:	6153      	str	r3, [r2, #20]
}
 80089f0:	bf00      	nop
 80089f2:	bd80      	pop	{r7, pc}
 80089f4:	48000400 	.word	0x48000400

080089f8 <ILI9341_Set_Rotation>:

/*Ser rotation of the screen - changes x0 and y0*/
void ILI9341_Set_Rotation(uint8_t Rotation) 
{
 80089f8:	b580      	push	{r7, lr}
 80089fa:	b084      	sub	sp, #16
 80089fc:	af00      	add	r7, sp, #0
 80089fe:	4603      	mov	r3, r0
 8008a00:	71fb      	strb	r3, [r7, #7]
	
	uint8_t screen_rotation = Rotation;
 8008a02:	79fb      	ldrb	r3, [r7, #7]
 8008a04:	73fb      	strb	r3, [r7, #15]
	
	ILI9341_Write_Command(0x36);
 8008a06:	2036      	movs	r0, #54	; 0x36
 8008a08:	f7ff ff48 	bl	800889c <ILI9341_Write_Command>
	//HAL_Delay(1);

	switch(screen_rotation)
 8008a0c:	7bfb      	ldrb	r3, [r7, #15]
 8008a0e:	2b03      	cmp	r3, #3
 8008a10:	d836      	bhi.n	8008a80 <ILI9341_Set_Rotation+0x88>
 8008a12:	a201      	add	r2, pc, #4	; (adr r2, 8008a18 <ILI9341_Set_Rotation+0x20>)
 8008a14:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008a18:	08008a29 	.word	0x08008a29
 8008a1c:	08008a3f 	.word	0x08008a3f
 8008a20:	08008a55 	.word	0x08008a55
 8008a24:	08008a6b 	.word	0x08008a6b
	{
		case SCREEN_VERTICAL_1:
			ILI9341_Write_Data(0x40|0x08);
 8008a28:	2048      	movs	r0, #72	; 0x48
 8008a2a:	f7ff ff59 	bl	80088e0 <ILI9341_Write_Data>
			LCD_WIDTH = 240;
 8008a2e:	4b17      	ldr	r3, [pc, #92]	; (8008a8c <ILI9341_Set_Rotation+0x94>)
 8008a30:	22f0      	movs	r2, #240	; 0xf0
 8008a32:	801a      	strh	r2, [r3, #0]
			LCD_HEIGHT = 320;
 8008a34:	4b16      	ldr	r3, [pc, #88]	; (8008a90 <ILI9341_Set_Rotation+0x98>)
 8008a36:	f44f 72a0 	mov.w	r2, #320	; 0x140
 8008a3a:	801a      	strh	r2, [r3, #0]
			break;
 8008a3c:	e021      	b.n	8008a82 <ILI9341_Set_Rotation+0x8a>
		case SCREEN_HORIZONTAL_1:
			ILI9341_Write_Data(0x20|0x08);
 8008a3e:	2028      	movs	r0, #40	; 0x28
 8008a40:	f7ff ff4e 	bl	80088e0 <ILI9341_Write_Data>
			LCD_WIDTH  = 320;
 8008a44:	4b11      	ldr	r3, [pc, #68]	; (8008a8c <ILI9341_Set_Rotation+0x94>)
 8008a46:	f44f 72a0 	mov.w	r2, #320	; 0x140
 8008a4a:	801a      	strh	r2, [r3, #0]
			LCD_HEIGHT = 240;
 8008a4c:	4b10      	ldr	r3, [pc, #64]	; (8008a90 <ILI9341_Set_Rotation+0x98>)
 8008a4e:	22f0      	movs	r2, #240	; 0xf0
 8008a50:	801a      	strh	r2, [r3, #0]
			break;
 8008a52:	e016      	b.n	8008a82 <ILI9341_Set_Rotation+0x8a>
		case SCREEN_VERTICAL_2:
			ILI9341_Write_Data(0x80|0x08);
 8008a54:	2088      	movs	r0, #136	; 0x88
 8008a56:	f7ff ff43 	bl	80088e0 <ILI9341_Write_Data>
			LCD_WIDTH  = 240;
 8008a5a:	4b0c      	ldr	r3, [pc, #48]	; (8008a8c <ILI9341_Set_Rotation+0x94>)
 8008a5c:	22f0      	movs	r2, #240	; 0xf0
 8008a5e:	801a      	strh	r2, [r3, #0]
			LCD_HEIGHT = 320;
 8008a60:	4b0b      	ldr	r3, [pc, #44]	; (8008a90 <ILI9341_Set_Rotation+0x98>)
 8008a62:	f44f 72a0 	mov.w	r2, #320	; 0x140
 8008a66:	801a      	strh	r2, [r3, #0]
			break;
 8008a68:	e00b      	b.n	8008a82 <ILI9341_Set_Rotation+0x8a>
		case SCREEN_HORIZONTAL_2:
			ILI9341_Write_Data(0x40|0x80|0x20|0x08);
 8008a6a:	20e8      	movs	r0, #232	; 0xe8
 8008a6c:	f7ff ff38 	bl	80088e0 <ILI9341_Write_Data>
			LCD_WIDTH  = 320;
 8008a70:	4b06      	ldr	r3, [pc, #24]	; (8008a8c <ILI9341_Set_Rotation+0x94>)
 8008a72:	f44f 72a0 	mov.w	r2, #320	; 0x140
 8008a76:	801a      	strh	r2, [r3, #0]
			LCD_HEIGHT = 240;
 8008a78:	4b05      	ldr	r3, [pc, #20]	; (8008a90 <ILI9341_Set_Rotation+0x98>)
 8008a7a:	22f0      	movs	r2, #240	; 0xf0
 8008a7c:	801a      	strh	r2, [r3, #0]
			break;
 8008a7e:	e000      	b.n	8008a82 <ILI9341_Set_Rotation+0x8a>
		default:
			//EXIT IF SCREEN ROTATION NOT VALID!
			break;
 8008a80:	bf00      	nop
	}
}
 8008a82:	bf00      	nop
 8008a84:	3710      	adds	r7, #16
 8008a86:	46bd      	mov	sp, r7
 8008a88:	bd80      	pop	{r7, pc}
 8008a8a:	bf00      	nop
 8008a8c:	2000001e 	.word	0x2000001e
 8008a90:	2000001c 	.word	0x2000001c

08008a94 <ILI9341_Enable>:

/*Enable LCD display*/
void ILI9341_Enable(void)
{
 8008a94:	b480      	push	{r7}
 8008a96:	af00      	add	r7, sp, #0
	LCD_RST_PORT->ODR |= LCD_RST_PIN;
 8008a98:	4b05      	ldr	r3, [pc, #20]	; (8008ab0 <ILI9341_Enable+0x1c>)
 8008a9a:	695b      	ldr	r3, [r3, #20]
 8008a9c:	4a04      	ldr	r2, [pc, #16]	; (8008ab0 <ILI9341_Enable+0x1c>)
 8008a9e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8008aa2:	6153      	str	r3, [r2, #20]
}
 8008aa4:	bf00      	nop
 8008aa6:	46bd      	mov	sp, r7
 8008aa8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008aac:	4770      	bx	lr
 8008aae:	bf00      	nop
 8008ab0:	48000400 	.word	0x48000400

08008ab4 <ILI9341_Init>:

/*Initialize LCD display*/
void ILI9341_Init(void)
{
 8008ab4:	b580      	push	{r7, lr}
 8008ab6:	af00      	add	r7, sp, #0

	ILI9341_Enable();
 8008ab8:	f7ff ffec 	bl	8008a94 <ILI9341_Enable>
	ILI9341_SPI_Init();
 8008abc:	f7ff feca 	bl	8008854 <ILI9341_SPI_Init>
	ILI9341_Reset();
 8008ac0:	f7ff ff7c 	bl	80089bc <ILI9341_Reset>

	//SOFTWARE RESET
	ILI9341_Write_Command(0x01);
 8008ac4:	2001      	movs	r0, #1
 8008ac6:	f7ff fee9 	bl	800889c <ILI9341_Write_Command>
	HAL_Delay(2000);
 8008aca:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8008ace:	f7fa f985 	bl	8002ddc <HAL_Delay>

	//POWER CONTROL A
	ILI9341_Write_Command(0xCB);
 8008ad2:	20cb      	movs	r0, #203	; 0xcb
 8008ad4:	f7ff fee2 	bl	800889c <ILI9341_Write_Command>
	ILI9341_Write_Data(0x39);
 8008ad8:	2039      	movs	r0, #57	; 0x39
 8008ada:	f7ff ff01 	bl	80088e0 <ILI9341_Write_Data>
	ILI9341_Write_Data(0x2C);
 8008ade:	202c      	movs	r0, #44	; 0x2c
 8008ae0:	f7ff fefe 	bl	80088e0 <ILI9341_Write_Data>
	ILI9341_Write_Data(0x00);
 8008ae4:	2000      	movs	r0, #0
 8008ae6:	f7ff fefb 	bl	80088e0 <ILI9341_Write_Data>
	ILI9341_Write_Data(0x34);
 8008aea:	2034      	movs	r0, #52	; 0x34
 8008aec:	f7ff fef8 	bl	80088e0 <ILI9341_Write_Data>
	ILI9341_Write_Data(0x02);
 8008af0:	2002      	movs	r0, #2
 8008af2:	f7ff fef5 	bl	80088e0 <ILI9341_Write_Data>

	//POWER CONTROL B
	ILI9341_Write_Command(0xCF);
 8008af6:	20cf      	movs	r0, #207	; 0xcf
 8008af8:	f7ff fed0 	bl	800889c <ILI9341_Write_Command>
	ILI9341_Write_Data(0x00);
 8008afc:	2000      	movs	r0, #0
 8008afe:	f7ff feef 	bl	80088e0 <ILI9341_Write_Data>
	ILI9341_Write_Data(0xC1);
 8008b02:	20c1      	movs	r0, #193	; 0xc1
 8008b04:	f7ff feec 	bl	80088e0 <ILI9341_Write_Data>
	ILI9341_Write_Data(0x30);
 8008b08:	2030      	movs	r0, #48	; 0x30
 8008b0a:	f7ff fee9 	bl	80088e0 <ILI9341_Write_Data>

	//DRIVER TIMING CONTROL A
	ILI9341_Write_Command(0xE8);
 8008b0e:	20e8      	movs	r0, #232	; 0xe8
 8008b10:	f7ff fec4 	bl	800889c <ILI9341_Write_Command>
	ILI9341_Write_Data(0x85);
 8008b14:	2085      	movs	r0, #133	; 0x85
 8008b16:	f7ff fee3 	bl	80088e0 <ILI9341_Write_Data>
	ILI9341_Write_Data(0x00);
 8008b1a:	2000      	movs	r0, #0
 8008b1c:	f7ff fee0 	bl	80088e0 <ILI9341_Write_Data>
	ILI9341_Write_Data(0x78);
 8008b20:	2078      	movs	r0, #120	; 0x78
 8008b22:	f7ff fedd 	bl	80088e0 <ILI9341_Write_Data>

	//DRIVER TIMING CONTROL B
	ILI9341_Write_Command(0xEA);
 8008b26:	20ea      	movs	r0, #234	; 0xea
 8008b28:	f7ff feb8 	bl	800889c <ILI9341_Write_Command>
	ILI9341_Write_Data(0x00);
 8008b2c:	2000      	movs	r0, #0
 8008b2e:	f7ff fed7 	bl	80088e0 <ILI9341_Write_Data>
	ILI9341_Write_Data(0x00);
 8008b32:	2000      	movs	r0, #0
 8008b34:	f7ff fed4 	bl	80088e0 <ILI9341_Write_Data>

	//POWER ON SEQUENCE CONTROL
	ILI9341_Write_Command(0xED);
 8008b38:	20ed      	movs	r0, #237	; 0xed
 8008b3a:	f7ff feaf 	bl	800889c <ILI9341_Write_Command>
	ILI9341_Write_Data(0x64);
 8008b3e:	2064      	movs	r0, #100	; 0x64
 8008b40:	f7ff fece 	bl	80088e0 <ILI9341_Write_Data>
	ILI9341_Write_Data(0x03);
 8008b44:	2003      	movs	r0, #3
 8008b46:	f7ff fecb 	bl	80088e0 <ILI9341_Write_Data>
	ILI9341_Write_Data(0x12);
 8008b4a:	2012      	movs	r0, #18
 8008b4c:	f7ff fec8 	bl	80088e0 <ILI9341_Write_Data>
	ILI9341_Write_Data(0x81);
 8008b50:	2081      	movs	r0, #129	; 0x81
 8008b52:	f7ff fec5 	bl	80088e0 <ILI9341_Write_Data>

	//PUMP RATIO CONTROL
	ILI9341_Write_Command(0xF7);
 8008b56:	20f7      	movs	r0, #247	; 0xf7
 8008b58:	f7ff fea0 	bl	800889c <ILI9341_Write_Command>
	ILI9341_Write_Data(0x20);
 8008b5c:	2020      	movs	r0, #32
 8008b5e:	f7ff febf 	bl	80088e0 <ILI9341_Write_Data>

	//POWER CONTROL,VRH[5:0]
	ILI9341_Write_Command(0xC0);
 8008b62:	20c0      	movs	r0, #192	; 0xc0
 8008b64:	f7ff fe9a 	bl	800889c <ILI9341_Write_Command>
	ILI9341_Write_Data(0x23);
 8008b68:	2023      	movs	r0, #35	; 0x23
 8008b6a:	f7ff feb9 	bl	80088e0 <ILI9341_Write_Data>

	//POWER CONTROL,SAP[2:0];BT[3:0]
	ILI9341_Write_Command(0xC1);
 8008b6e:	20c1      	movs	r0, #193	; 0xc1
 8008b70:	f7ff fe94 	bl	800889c <ILI9341_Write_Command>
	ILI9341_Write_Data(0x10);
 8008b74:	2010      	movs	r0, #16
 8008b76:	f7ff feb3 	bl	80088e0 <ILI9341_Write_Data>

	//VCM CONTROL
	ILI9341_Write_Command(0xC5);
 8008b7a:	20c5      	movs	r0, #197	; 0xc5
 8008b7c:	f7ff fe8e 	bl	800889c <ILI9341_Write_Command>
	ILI9341_Write_Data(0x3E);
 8008b80:	203e      	movs	r0, #62	; 0x3e
 8008b82:	f7ff fead 	bl	80088e0 <ILI9341_Write_Data>
	ILI9341_Write_Data(0x28);
 8008b86:	2028      	movs	r0, #40	; 0x28
 8008b88:	f7ff feaa 	bl	80088e0 <ILI9341_Write_Data>

	//VCM CONTROL 2
	ILI9341_Write_Command(0xC7);
 8008b8c:	20c7      	movs	r0, #199	; 0xc7
 8008b8e:	f7ff fe85 	bl	800889c <ILI9341_Write_Command>
	ILI9341_Write_Data(0x86);
 8008b92:	2086      	movs	r0, #134	; 0x86
 8008b94:	f7ff fea4 	bl	80088e0 <ILI9341_Write_Data>

	//MEMORY ACCESS CONTROL
	ILI9341_Write_Command(0x36);
 8008b98:	2036      	movs	r0, #54	; 0x36
 8008b9a:	f7ff fe7f 	bl	800889c <ILI9341_Write_Command>
	ILI9341_Write_Data(0x48);
 8008b9e:	2048      	movs	r0, #72	; 0x48
 8008ba0:	f7ff fe9e 	bl	80088e0 <ILI9341_Write_Data>


	//PIXEL FORMAT
	ILI9341_Write_Command(0x3A);
 8008ba4:	203a      	movs	r0, #58	; 0x3a
 8008ba6:	f7ff fe79 	bl	800889c <ILI9341_Write_Command>
	ILI9341_Write_Data(0x55);
 8008baa:	2055      	movs	r0, #85	; 0x55
 8008bac:	f7ff fe98 	bl	80088e0 <ILI9341_Write_Data>

	//FRAME RATIO CONTROL, STANDARD RGB COLOR
	ILI9341_Write_Command(0xB1);
 8008bb0:	20b1      	movs	r0, #177	; 0xb1
 8008bb2:	f7ff fe73 	bl	800889c <ILI9341_Write_Command>
	ILI9341_Write_Data(0x00);
 8008bb6:	2000      	movs	r0, #0
 8008bb8:	f7ff fe92 	bl	80088e0 <ILI9341_Write_Data>
	ILI9341_Write_Data(0x18);
 8008bbc:	2018      	movs	r0, #24
 8008bbe:	f7ff fe8f 	bl	80088e0 <ILI9341_Write_Data>

	//DISPLAY FUNCTION CONTROL
	ILI9341_Write_Command(0xB6);
 8008bc2:	20b6      	movs	r0, #182	; 0xb6
 8008bc4:	f7ff fe6a 	bl	800889c <ILI9341_Write_Command>
	ILI9341_Write_Data(0x08);
 8008bc8:	2008      	movs	r0, #8
 8008bca:	f7ff fe89 	bl	80088e0 <ILI9341_Write_Data>
	ILI9341_Write_Data(0x82);
 8008bce:	2082      	movs	r0, #130	; 0x82
 8008bd0:	f7ff fe86 	bl	80088e0 <ILI9341_Write_Data>
	ILI9341_Write_Data(0x27);
 8008bd4:	2027      	movs	r0, #39	; 0x27
 8008bd6:	f7ff fe83 	bl	80088e0 <ILI9341_Write_Data>


	//3GAMMA FUNCTION DISABLE
	ILI9341_Write_Command(0xF2);
 8008bda:	20f2      	movs	r0, #242	; 0xf2
 8008bdc:	f7ff fe5e 	bl	800889c <ILI9341_Write_Command>
	ILI9341_Write_Data(0x00);
 8008be0:	2000      	movs	r0, #0
 8008be2:	f7ff fe7d 	bl	80088e0 <ILI9341_Write_Data>

	//GAMMA CURVE SELECTED
	ILI9341_Write_Command(0x26);
 8008be6:	2026      	movs	r0, #38	; 0x26
 8008be8:	f7ff fe58 	bl	800889c <ILI9341_Write_Command>
	ILI9341_Write_Data(0x01);
 8008bec:	2001      	movs	r0, #1
 8008bee:	f7ff fe77 	bl	80088e0 <ILI9341_Write_Data>

	//POSITIVE GAMMA CORRECTION
	ILI9341_Write_Command(0xE0);
 8008bf2:	20e0      	movs	r0, #224	; 0xe0
 8008bf4:	f7ff fe52 	bl	800889c <ILI9341_Write_Command>
	ILI9341_Write_Data(0x0F);
 8008bf8:	200f      	movs	r0, #15
 8008bfa:	f7ff fe71 	bl	80088e0 <ILI9341_Write_Data>
	ILI9341_Write_Data(0x31);
 8008bfe:	2031      	movs	r0, #49	; 0x31
 8008c00:	f7ff fe6e 	bl	80088e0 <ILI9341_Write_Data>
	ILI9341_Write_Data(0x2B);
 8008c04:	202b      	movs	r0, #43	; 0x2b
 8008c06:	f7ff fe6b 	bl	80088e0 <ILI9341_Write_Data>
	ILI9341_Write_Data(0x0C);
 8008c0a:	200c      	movs	r0, #12
 8008c0c:	f7ff fe68 	bl	80088e0 <ILI9341_Write_Data>
	ILI9341_Write_Data(0x0E);
 8008c10:	200e      	movs	r0, #14
 8008c12:	f7ff fe65 	bl	80088e0 <ILI9341_Write_Data>
	ILI9341_Write_Data(0x08);
 8008c16:	2008      	movs	r0, #8
 8008c18:	f7ff fe62 	bl	80088e0 <ILI9341_Write_Data>
	ILI9341_Write_Data(0x4E);
 8008c1c:	204e      	movs	r0, #78	; 0x4e
 8008c1e:	f7ff fe5f 	bl	80088e0 <ILI9341_Write_Data>
	ILI9341_Write_Data(0xF1);
 8008c22:	20f1      	movs	r0, #241	; 0xf1
 8008c24:	f7ff fe5c 	bl	80088e0 <ILI9341_Write_Data>
	ILI9341_Write_Data(0x37);
 8008c28:	2037      	movs	r0, #55	; 0x37
 8008c2a:	f7ff fe59 	bl	80088e0 <ILI9341_Write_Data>
	ILI9341_Write_Data(0x07);
 8008c2e:	2007      	movs	r0, #7
 8008c30:	f7ff fe56 	bl	80088e0 <ILI9341_Write_Data>
	ILI9341_Write_Data(0x10);
 8008c34:	2010      	movs	r0, #16
 8008c36:	f7ff fe53 	bl	80088e0 <ILI9341_Write_Data>
	ILI9341_Write_Data(0x03);
 8008c3a:	2003      	movs	r0, #3
 8008c3c:	f7ff fe50 	bl	80088e0 <ILI9341_Write_Data>
	ILI9341_Write_Data(0x0E);
 8008c40:	200e      	movs	r0, #14
 8008c42:	f7ff fe4d 	bl	80088e0 <ILI9341_Write_Data>
	ILI9341_Write_Data(0x09);
 8008c46:	2009      	movs	r0, #9
 8008c48:	f7ff fe4a 	bl	80088e0 <ILI9341_Write_Data>
	ILI9341_Write_Data(0x00);
 8008c4c:	2000      	movs	r0, #0
 8008c4e:	f7ff fe47 	bl	80088e0 <ILI9341_Write_Data>

	//NEGATIVE GAMMA CORRECTION
	ILI9341_Write_Command(0xE1);
 8008c52:	20e1      	movs	r0, #225	; 0xe1
 8008c54:	f7ff fe22 	bl	800889c <ILI9341_Write_Command>
	ILI9341_Write_Data(0x00);
 8008c58:	2000      	movs	r0, #0
 8008c5a:	f7ff fe41 	bl	80088e0 <ILI9341_Write_Data>
	ILI9341_Write_Data(0x0E);
 8008c5e:	200e      	movs	r0, #14
 8008c60:	f7ff fe3e 	bl	80088e0 <ILI9341_Write_Data>
	ILI9341_Write_Data(0x14);
 8008c64:	2014      	movs	r0, #20
 8008c66:	f7ff fe3b 	bl	80088e0 <ILI9341_Write_Data>
	ILI9341_Write_Data(0x03);
 8008c6a:	2003      	movs	r0, #3
 8008c6c:	f7ff fe38 	bl	80088e0 <ILI9341_Write_Data>
	ILI9341_Write_Data(0x11);
 8008c70:	2011      	movs	r0, #17
 8008c72:	f7ff fe35 	bl	80088e0 <ILI9341_Write_Data>
	ILI9341_Write_Data(0x07);
 8008c76:	2007      	movs	r0, #7
 8008c78:	f7ff fe32 	bl	80088e0 <ILI9341_Write_Data>
	ILI9341_Write_Data(0x31);
 8008c7c:	2031      	movs	r0, #49	; 0x31
 8008c7e:	f7ff fe2f 	bl	80088e0 <ILI9341_Write_Data>
	ILI9341_Write_Data(0xC1);
 8008c82:	20c1      	movs	r0, #193	; 0xc1
 8008c84:	f7ff fe2c 	bl	80088e0 <ILI9341_Write_Data>
	ILI9341_Write_Data(0x48);
 8008c88:	2048      	movs	r0, #72	; 0x48
 8008c8a:	f7ff fe29 	bl	80088e0 <ILI9341_Write_Data>
	ILI9341_Write_Data(0x08);
 8008c8e:	2008      	movs	r0, #8
 8008c90:	f7ff fe26 	bl	80088e0 <ILI9341_Write_Data>
	ILI9341_Write_Data(0x0F);
 8008c94:	200f      	movs	r0, #15
 8008c96:	f7ff fe23 	bl	80088e0 <ILI9341_Write_Data>
	ILI9341_Write_Data(0x0C);
 8008c9a:	200c      	movs	r0, #12
 8008c9c:	f7ff fe20 	bl	80088e0 <ILI9341_Write_Data>
	ILI9341_Write_Data(0x31);
 8008ca0:	2031      	movs	r0, #49	; 0x31
 8008ca2:	f7ff fe1d 	bl	80088e0 <ILI9341_Write_Data>
	ILI9341_Write_Data(0x36);
 8008ca6:	2036      	movs	r0, #54	; 0x36
 8008ca8:	f7ff fe1a 	bl	80088e0 <ILI9341_Write_Data>
	ILI9341_Write_Data(0x0F);
 8008cac:	200f      	movs	r0, #15
 8008cae:	f7ff fe17 	bl	80088e0 <ILI9341_Write_Data>

	//EXIT SLEEP
	ILI9341_Write_Command(0x11);
 8008cb2:	2011      	movs	r0, #17
 8008cb4:	f7ff fdf2 	bl	800889c <ILI9341_Write_Command>
	HAL_Delay(240);
 8008cb8:	20f0      	movs	r0, #240	; 0xf0
 8008cba:	f7fa f88f 	bl	8002ddc <HAL_Delay>

	//TURN ON DISPLAY
	ILI9341_Write_Command(0x29);
 8008cbe:	2029      	movs	r0, #41	; 0x29
 8008cc0:	f7ff fdec 	bl	800889c <ILI9341_Write_Command>
	
	//STARTING ROTATION
	ILI9341_Set_Rotation(SCREEN_VERTICAL_1);
 8008cc4:	2000      	movs	r0, #0
 8008cc6:	f7ff fe97 	bl	80089f8 <ILI9341_Set_Rotation>
}
 8008cca:	bf00      	nop
 8008ccc:	bd80      	pop	{r7, pc}
	...

08008cd0 <ILI9341_Draw_colour_Burst>:
}

//INTERNAL FUNCTION OF LIBRARY
/*Sends block colour information to LCD*/
void ILI9341_Draw_colour_Burst(uint16_t chunk_xpos, uint16_t chunk_ypos, uint16_t colour, uint32_t chunk_size, CHUNK_Type chunk_type)
{
 8008cd0:	b5b0      	push	{r4, r5, r7, lr}
 8008cd2:	b08e      	sub	sp, #56	; 0x38
 8008cd4:	af00      	add	r7, sp, #0
 8008cd6:	607b      	str	r3, [r7, #4]
 8008cd8:	4603      	mov	r3, r0
 8008cda:	81fb      	strh	r3, [r7, #14]
 8008cdc:	460b      	mov	r3, r1
 8008cde:	81bb      	strh	r3, [r7, #12]
 8008ce0:	4613      	mov	r3, r2
 8008ce2:	817b      	strh	r3, [r7, #10]
 8008ce4:	466b      	mov	r3, sp
 8008ce6:	461d      	mov	r5, r3

	// 	entire data sent to this function is a CHUNK < BURST_MAX_SIZE
	// 	each CHUNK is broken down into smaller BLOCKS


	uint32_t buffer_size = 0;
 8008ce8:	2300      	movs	r3, #0
 8008cea:	62fb      	str	r3, [r7, #44]	; 0x2c
	if((chunk_size*2) < BURST_MAX_SIZE)
 8008cec:	687b      	ldr	r3, [r7, #4]
 8008cee:	005b      	lsls	r3, r3, #1
 8008cf0:	4a48      	ldr	r2, [pc, #288]	; (8008e14 <ILI9341_Draw_colour_Burst+0x144>)
 8008cf2:	8812      	ldrh	r2, [r2, #0]
 8008cf4:	4293      	cmp	r3, r2
 8008cf6:	d202      	bcs.n	8008cfe <ILI9341_Draw_colour_Burst+0x2e>
	{
		buffer_size = chunk_size;
 8008cf8:	687b      	ldr	r3, [r7, #4]
 8008cfa:	62fb      	str	r3, [r7, #44]	; 0x2c
 8008cfc:	e002      	b.n	8008d04 <ILI9341_Draw_colour_Burst+0x34>
	}
	else
	{
		buffer_size = BURST_MAX_SIZE;
 8008cfe:	4b45      	ldr	r3, [pc, #276]	; (8008e14 <ILI9341_Draw_colour_Burst+0x144>)
 8008d00:	881b      	ldrh	r3, [r3, #0]
 8008d02:	62fb      	str	r3, [r7, #44]	; 0x2c
	}




	unsigned char chifted = 	colour>>8;;
 8008d04:	897b      	ldrh	r3, [r7, #10]
 8008d06:	0a1b      	lsrs	r3, r3, #8
 8008d08:	b29b      	uxth	r3, r3
 8008d0a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
	unsigned char burst_buffer[buffer_size];
 8008d0e:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8008d10:	4603      	mov	r3, r0
 8008d12:	3b01      	subs	r3, #1
 8008d14:	61fb      	str	r3, [r7, #28]
 8008d16:	4601      	mov	r1, r0
 8008d18:	f04f 0200 	mov.w	r2, #0
 8008d1c:	f04f 0300 	mov.w	r3, #0
 8008d20:	f04f 0400 	mov.w	r4, #0
 8008d24:	00d4      	lsls	r4, r2, #3
 8008d26:	ea44 7451 	orr.w	r4, r4, r1, lsr #29
 8008d2a:	00cb      	lsls	r3, r1, #3
 8008d2c:	4601      	mov	r1, r0
 8008d2e:	f04f 0200 	mov.w	r2, #0
 8008d32:	f04f 0300 	mov.w	r3, #0
 8008d36:	f04f 0400 	mov.w	r4, #0
 8008d3a:	00d4      	lsls	r4, r2, #3
 8008d3c:	ea44 7451 	orr.w	r4, r4, r1, lsr #29
 8008d40:	00cb      	lsls	r3, r1, #3
 8008d42:	1dc3      	adds	r3, r0, #7
 8008d44:	08db      	lsrs	r3, r3, #3
 8008d46:	00db      	lsls	r3, r3, #3
 8008d48:	ebad 0d03 	sub.w	sp, sp, r3
 8008d4c:	466b      	mov	r3, sp
 8008d4e:	3300      	adds	r3, #0
 8008d50:	61bb      	str	r3, [r7, #24]
	for(uint32_t j = 0; j < buffer_size; j+=2)
 8008d52:	2300      	movs	r3, #0
 8008d54:	633b      	str	r3, [r7, #48]	; 0x30
 8008d56:	e00e      	b.n	8008d76 <ILI9341_Draw_colour_Burst+0xa6>
	{

			burst_buffer[j] = 	chifted;
 8008d58:	69ba      	ldr	r2, [r7, #24]
 8008d5a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008d5c:	4413      	add	r3, r2
 8008d5e:	f897 2023 	ldrb.w	r2, [r7, #35]	; 0x23
 8008d62:	701a      	strb	r2, [r3, #0]

			burst_buffer[j+1] = colour;
 8008d64:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008d66:	3301      	adds	r3, #1
 8008d68:	897a      	ldrh	r2, [r7, #10]
 8008d6a:	b2d1      	uxtb	r1, r2
 8008d6c:	69ba      	ldr	r2, [r7, #24]
 8008d6e:	54d1      	strb	r1, [r2, r3]
	for(uint32_t j = 0; j < buffer_size; j+=2)
 8008d70:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008d72:	3302      	adds	r3, #2
 8008d74:	633b      	str	r3, [r7, #48]	; 0x30
 8008d76:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8008d78:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008d7a:	429a      	cmp	r2, r3
 8008d7c:	d3ec      	bcc.n	8008d58 <ILI9341_Draw_colour_Burst+0x88>


	}
	
	uint32_t Sending_size = chunk_size*2;
 8008d7e:	687b      	ldr	r3, [r7, #4]
 8008d80:	005b      	lsls	r3, r3, #1
 8008d82:	617b      	str	r3, [r7, #20]

	// make sure we don't divide by size=0
	uint32_t Sending_in_Block = 1;
 8008d84:	2301      	movs	r3, #1
 8008d86:	637b      	str	r3, [r7, #52]	; 0x34
	uint32_t Remainder_from_block = 0;
 8008d88:	2300      	movs	r3, #0
 8008d8a:	62bb      	str	r3, [r7, #40]	; 0x28
	if(chunk_size > 0)
 8008d8c:	687b      	ldr	r3, [r7, #4]
 8008d8e:	2b00      	cmp	r3, #0
 8008d90:	d00d      	beq.n	8008dae <ILI9341_Draw_colour_Burst+0xde>
	{
			Sending_in_Block 		= Sending_size/buffer_size;
 8008d92:	697a      	ldr	r2, [r7, #20]
 8008d94:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008d96:	fbb2 f3f3 	udiv	r3, r2, r3
 8008d9a:	637b      	str	r3, [r7, #52]	; 0x34
			Remainder_from_block 	= Sending_size%buffer_size;
 8008d9c:	697b      	ldr	r3, [r7, #20]
 8008d9e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8008da0:	fbb3 f2f2 	udiv	r2, r3, r2
 8008da4:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8008da6:	fb01 f202 	mul.w	r2, r1, r2
 8008daa:	1a9b      	subs	r3, r3, r2
 8008dac:	62bb      	str	r3, [r7, #40]	; 0x28
	}

	// send blocks
	LCD_DC_PORT->ODR |= LCD_DC_PIN;
 8008dae:	4b1a      	ldr	r3, [pc, #104]	; (8008e18 <ILI9341_Draw_colour_Burst+0x148>)
 8008db0:	695b      	ldr	r3, [r3, #20]
 8008db2:	4a19      	ldr	r2, [pc, #100]	; (8008e18 <ILI9341_Draw_colour_Burst+0x148>)
 8008db4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008db8:	6153      	str	r3, [r2, #20]
	LCD_CS_PORT->ODR &= ~(LCD_CS_PIN);
 8008dba:	4b17      	ldr	r3, [pc, #92]	; (8008e18 <ILI9341_Draw_colour_Burst+0x148>)
 8008dbc:	695b      	ldr	r3, [r3, #20]
 8008dbe:	4a16      	ldr	r2, [pc, #88]	; (8008e18 <ILI9341_Draw_colour_Burst+0x148>)
 8008dc0:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8008dc4:	6153      	str	r3, [r2, #20]

	if(Sending_in_Block != 0)
 8008dc6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008dc8:	2b00      	cmp	r3, #0
 8008dca:	d010      	beq.n	8008dee <ILI9341_Draw_colour_Burst+0x11e>
	{
		for(uint32_t j = 0; j < (Sending_in_Block); j++)
 8008dcc:	2300      	movs	r3, #0
 8008dce:	627b      	str	r3, [r7, #36]	; 0x24
 8008dd0:	e009      	b.n	8008de6 <ILI9341_Draw_colour_Burst+0x116>
		{

			HAL_SPI_Transmit(HSPI_INSTANCE, (unsigned char *)burst_buffer, buffer_size, 2);
 8008dd2:	69b9      	ldr	r1, [r7, #24]
 8008dd4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008dd6:	b29a      	uxth	r2, r3
 8008dd8:	2302      	movs	r3, #2
 8008dda:	4810      	ldr	r0, [pc, #64]	; (8008e1c <ILI9341_Draw_colour_Burst+0x14c>)
 8008ddc:	f7fd fd8c 	bl	80068f8 <HAL_SPI_Transmit>
		for(uint32_t j = 0; j < (Sending_in_Block); j++)
 8008de0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008de2:	3301      	adds	r3, #1
 8008de4:	627b      	str	r3, [r7, #36]	; 0x24
 8008de6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008de8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008dea:	429a      	cmp	r2, r3
 8008dec:	d3f1      	bcc.n	8008dd2 <ILI9341_Draw_colour_Burst+0x102>
		}
	}

	//REMAINDER!
	HAL_SPI_Transmit(HSPI_INSTANCE, (unsigned char *)burst_buffer, Remainder_from_block, 2);
 8008dee:	69b9      	ldr	r1, [r7, #24]
 8008df0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008df2:	b29a      	uxth	r2, r3
 8008df4:	2302      	movs	r3, #2
 8008df6:	4809      	ldr	r0, [pc, #36]	; (8008e1c <ILI9341_Draw_colour_Burst+0x14c>)
 8008df8:	f7fd fd7e 	bl	80068f8 <HAL_SPI_Transmit>

	LCD_CS_PORT->ODR |= LCD_CS_PIN;
 8008dfc:	4b06      	ldr	r3, [pc, #24]	; (8008e18 <ILI9341_Draw_colour_Burst+0x148>)
 8008dfe:	695b      	ldr	r3, [r3, #20]
 8008e00:	4a05      	ldr	r2, [pc, #20]	; (8008e18 <ILI9341_Draw_colour_Burst+0x148>)
 8008e02:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008e06:	6153      	str	r3, [r2, #20]
 8008e08:	46ad      	mov	sp, r5


}
 8008e0a:	bf00      	nop
 8008e0c:	3738      	adds	r7, #56	; 0x38
 8008e0e:	46bd      	mov	sp, r7
 8008e10:	bdb0      	pop	{r4, r5, r7, pc}
 8008e12:	bf00      	nop
 8008e14:	20000020 	.word	0x20000020
 8008e18:	48000400 	.word	0x48000400
 8008e1c:	20000dec 	.word	0x20000dec

08008e20 <ILI9341_Fill_Screen>:

//FILL THE ENTIRE SCREEN WITH SELECTED COLOUR (either #define-d ones or custom 16bit)
/*Sets address (entire screen) and Sends height*width ammount of colour information to LCD*/
void ILI9341_Fill_Screen(uint16_t colour)
{
 8008e20:	b580      	push	{r7, lr}
 8008e22:	b084      	sub	sp, #16
 8008e24:	af02      	add	r7, sp, #8
 8008e26:	4603      	mov	r3, r0
 8008e28:	80fb      	strh	r3, [r7, #6]
	ILI9341_Set_Address(0,0,LCD_WIDTH,LCD_HEIGHT);
 8008e2a:	4b10      	ldr	r3, [pc, #64]	; (8008e6c <ILI9341_Fill_Screen+0x4c>)
 8008e2c:	881b      	ldrh	r3, [r3, #0]
 8008e2e:	b29a      	uxth	r2, r3
 8008e30:	4b0f      	ldr	r3, [pc, #60]	; (8008e70 <ILI9341_Fill_Screen+0x50>)
 8008e32:	881b      	ldrh	r3, [r3, #0]
 8008e34:	b29b      	uxth	r3, r3
 8008e36:	2100      	movs	r1, #0
 8008e38:	2000      	movs	r0, #0
 8008e3a:	f7ff fd73 	bl	8008924 <ILI9341_Set_Address>
	ILI9341_Draw_colour_Burst(0, 0, colour, LCD_WIDTH*LCD_HEIGHT, AREA_CHUNK);
 8008e3e:	4b0b      	ldr	r3, [pc, #44]	; (8008e6c <ILI9341_Fill_Screen+0x4c>)
 8008e40:	881b      	ldrh	r3, [r3, #0]
 8008e42:	b29b      	uxth	r3, r3
 8008e44:	461a      	mov	r2, r3
 8008e46:	4b0a      	ldr	r3, [pc, #40]	; (8008e70 <ILI9341_Fill_Screen+0x50>)
 8008e48:	881b      	ldrh	r3, [r3, #0]
 8008e4a:	b29b      	uxth	r3, r3
 8008e4c:	fb03 f302 	mul.w	r3, r3, r2
 8008e50:	4619      	mov	r1, r3
 8008e52:	88fa      	ldrh	r2, [r7, #6]
 8008e54:	2304      	movs	r3, #4
 8008e56:	9300      	str	r3, [sp, #0]
 8008e58:	460b      	mov	r3, r1
 8008e5a:	2100      	movs	r1, #0
 8008e5c:	2000      	movs	r0, #0
 8008e5e:	f7ff ff37 	bl	8008cd0 <ILI9341_Draw_colour_Burst>
}
 8008e62:	bf00      	nop
 8008e64:	3708      	adds	r7, #8
 8008e66:	46bd      	mov	sp, r7
 8008e68:	bd80      	pop	{r7, pc}
 8008e6a:	bf00      	nop
 8008e6c:	2000001e 	.word	0x2000001e
 8008e70:	2000001c 	.word	0x2000001c

08008e74 <ILI9341_Draw_Pixel>:
//Location is dependant on screen orientation. x0 and y0 locations change with orientations.
//Using pixels to draw big simple structures is not recommended as it is really slow
//Try using either rectangles or lines if possible
//
void ILI9341_Draw_Pixel(uint16_t X,uint16_t Y,uint16_t colour)
{
 8008e74:	b580      	push	{r7, lr}
 8008e76:	b086      	sub	sp, #24
 8008e78:	af00      	add	r7, sp, #0
 8008e7a:	4603      	mov	r3, r0
 8008e7c:	80fb      	strh	r3, [r7, #6]
 8008e7e:	460b      	mov	r3, r1
 8008e80:	80bb      	strh	r3, [r7, #4]
 8008e82:	4613      	mov	r3, r2
 8008e84:	807b      	strh	r3, [r7, #2]
	if((X >=LCD_WIDTH) || (Y >=LCD_HEIGHT)) return;	//OUT OF BOUNDS!
 8008e86:	4b64      	ldr	r3, [pc, #400]	; (8009018 <ILI9341_Draw_Pixel+0x1a4>)
 8008e88:	881b      	ldrh	r3, [r3, #0]
 8008e8a:	b29b      	uxth	r3, r3
 8008e8c:	88fa      	ldrh	r2, [r7, #6]
 8008e8e:	429a      	cmp	r2, r3
 8008e90:	f080 80be 	bcs.w	8009010 <ILI9341_Draw_Pixel+0x19c>
 8008e94:	4b61      	ldr	r3, [pc, #388]	; (800901c <ILI9341_Draw_Pixel+0x1a8>)
 8008e96:	881b      	ldrh	r3, [r3, #0]
 8008e98:	b29b      	uxth	r3, r3
 8008e9a:	88ba      	ldrh	r2, [r7, #4]
 8008e9c:	429a      	cmp	r2, r3
 8008e9e:	f080 80b7 	bcs.w	8009010 <ILI9341_Draw_Pixel+0x19c>

	//ADDRESS
	LCD_DC_PORT->ODR &= ~(LCD_DC_PIN);
 8008ea2:	4b5f      	ldr	r3, [pc, #380]	; (8009020 <ILI9341_Draw_Pixel+0x1ac>)
 8008ea4:	695b      	ldr	r3, [r3, #20]
 8008ea6:	4a5e      	ldr	r2, [pc, #376]	; (8009020 <ILI9341_Draw_Pixel+0x1ac>)
 8008ea8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8008eac:	6153      	str	r3, [r2, #20]
	LCD_CS_PORT->ODR &= ~(LCD_CS_PIN);
 8008eae:	4b5c      	ldr	r3, [pc, #368]	; (8009020 <ILI9341_Draw_Pixel+0x1ac>)
 8008eb0:	695b      	ldr	r3, [r3, #20]
 8008eb2:	4a5b      	ldr	r2, [pc, #364]	; (8009020 <ILI9341_Draw_Pixel+0x1ac>)
 8008eb4:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8008eb8:	6153      	str	r3, [r2, #20]
	ILI9341_SPI_Send(0x2A);
 8008eba:	202a      	movs	r0, #42	; 0x2a
 8008ebc:	f7ff fcda 	bl	8008874 <ILI9341_SPI_Send>

	LCD_DC_PORT->ODR |= LCD_DC_PIN;
 8008ec0:	4b57      	ldr	r3, [pc, #348]	; (8009020 <ILI9341_Draw_Pixel+0x1ac>)
 8008ec2:	695b      	ldr	r3, [r3, #20]
 8008ec4:	4a56      	ldr	r2, [pc, #344]	; (8009020 <ILI9341_Draw_Pixel+0x1ac>)
 8008ec6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008eca:	6153      	str	r3, [r2, #20]
	LCD_CS_PORT->ODR |= LCD_CS_PIN;
 8008ecc:	4b54      	ldr	r3, [pc, #336]	; (8009020 <ILI9341_Draw_Pixel+0x1ac>)
 8008ece:	695b      	ldr	r3, [r3, #20]
 8008ed0:	4a53      	ldr	r2, [pc, #332]	; (8009020 <ILI9341_Draw_Pixel+0x1ac>)
 8008ed2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008ed6:	6153      	str	r3, [r2, #20]

	//XDATA
	LCD_CS_PORT->ODR &= ~(LCD_CS_PIN);
 8008ed8:	4b51      	ldr	r3, [pc, #324]	; (8009020 <ILI9341_Draw_Pixel+0x1ac>)
 8008eda:	695b      	ldr	r3, [r3, #20]
 8008edc:	4a50      	ldr	r2, [pc, #320]	; (8009020 <ILI9341_Draw_Pixel+0x1ac>)
 8008ede:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8008ee2:	6153      	str	r3, [r2, #20]
	unsigned char Temp_Buffer[4] = {X>>8,X, (X+1)>>8, (X+1)};
 8008ee4:	88fb      	ldrh	r3, [r7, #6]
 8008ee6:	0a1b      	lsrs	r3, r3, #8
 8008ee8:	b29b      	uxth	r3, r3
 8008eea:	b2db      	uxtb	r3, r3
 8008eec:	753b      	strb	r3, [r7, #20]
 8008eee:	88fb      	ldrh	r3, [r7, #6]
 8008ef0:	b2db      	uxtb	r3, r3
 8008ef2:	757b      	strb	r3, [r7, #21]
 8008ef4:	88fb      	ldrh	r3, [r7, #6]
 8008ef6:	3301      	adds	r3, #1
 8008ef8:	121b      	asrs	r3, r3, #8
 8008efa:	b2db      	uxtb	r3, r3
 8008efc:	75bb      	strb	r3, [r7, #22]
 8008efe:	88fb      	ldrh	r3, [r7, #6]
 8008f00:	b2db      	uxtb	r3, r3
 8008f02:	3301      	adds	r3, #1
 8008f04:	b2db      	uxtb	r3, r3
 8008f06:	75fb      	strb	r3, [r7, #23]
	HAL_SPI_Transmit(HSPI_INSTANCE, Temp_Buffer, 4, 1);
 8008f08:	f107 0114 	add.w	r1, r7, #20
 8008f0c:	2301      	movs	r3, #1
 8008f0e:	2204      	movs	r2, #4
 8008f10:	4844      	ldr	r0, [pc, #272]	; (8009024 <ILI9341_Draw_Pixel+0x1b0>)
 8008f12:	f7fd fcf1 	bl	80068f8 <HAL_SPI_Transmit>
	LCD_CS_PORT->ODR |= LCD_CS_PIN;
 8008f16:	4b42      	ldr	r3, [pc, #264]	; (8009020 <ILI9341_Draw_Pixel+0x1ac>)
 8008f18:	695b      	ldr	r3, [r3, #20]
 8008f1a:	4a41      	ldr	r2, [pc, #260]	; (8009020 <ILI9341_Draw_Pixel+0x1ac>)
 8008f1c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008f20:	6153      	str	r3, [r2, #20]

	//ADDRESS
	LCD_DC_PORT->ODR &= ~(LCD_DC_PIN);
 8008f22:	4b3f      	ldr	r3, [pc, #252]	; (8009020 <ILI9341_Draw_Pixel+0x1ac>)
 8008f24:	695b      	ldr	r3, [r3, #20]
 8008f26:	4a3e      	ldr	r2, [pc, #248]	; (8009020 <ILI9341_Draw_Pixel+0x1ac>)
 8008f28:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8008f2c:	6153      	str	r3, [r2, #20]
	LCD_CS_PORT->ODR &= ~(LCD_CS_PIN);
 8008f2e:	4b3c      	ldr	r3, [pc, #240]	; (8009020 <ILI9341_Draw_Pixel+0x1ac>)
 8008f30:	695b      	ldr	r3, [r3, #20]
 8008f32:	4a3b      	ldr	r2, [pc, #236]	; (8009020 <ILI9341_Draw_Pixel+0x1ac>)
 8008f34:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8008f38:	6153      	str	r3, [r2, #20]

	ILI9341_SPI_Send(0x2B);
 8008f3a:	202b      	movs	r0, #43	; 0x2b
 8008f3c:	f7ff fc9a 	bl	8008874 <ILI9341_SPI_Send>
	LCD_DC_PORT->ODR |= LCD_DC_PIN;
 8008f40:	4b37      	ldr	r3, [pc, #220]	; (8009020 <ILI9341_Draw_Pixel+0x1ac>)
 8008f42:	695b      	ldr	r3, [r3, #20]
 8008f44:	4a36      	ldr	r2, [pc, #216]	; (8009020 <ILI9341_Draw_Pixel+0x1ac>)
 8008f46:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008f4a:	6153      	str	r3, [r2, #20]
	LCD_CS_PORT->ODR |= LCD_CS_PIN;
 8008f4c:	4b34      	ldr	r3, [pc, #208]	; (8009020 <ILI9341_Draw_Pixel+0x1ac>)
 8008f4e:	695b      	ldr	r3, [r3, #20]
 8008f50:	4a33      	ldr	r2, [pc, #204]	; (8009020 <ILI9341_Draw_Pixel+0x1ac>)
 8008f52:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008f56:	6153      	str	r3, [r2, #20]

	//YDATA
	LCD_CS_PORT->ODR &= ~(LCD_CS_PIN);
 8008f58:	4b31      	ldr	r3, [pc, #196]	; (8009020 <ILI9341_Draw_Pixel+0x1ac>)
 8008f5a:	695b      	ldr	r3, [r3, #20]
 8008f5c:	4a30      	ldr	r2, [pc, #192]	; (8009020 <ILI9341_Draw_Pixel+0x1ac>)
 8008f5e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8008f62:	6153      	str	r3, [r2, #20]
	unsigned char Temp_Buffer1[4] = {Y>>8,Y, (Y+1)>>8, (Y+1)};
 8008f64:	88bb      	ldrh	r3, [r7, #4]
 8008f66:	0a1b      	lsrs	r3, r3, #8
 8008f68:	b29b      	uxth	r3, r3
 8008f6a:	b2db      	uxtb	r3, r3
 8008f6c:	743b      	strb	r3, [r7, #16]
 8008f6e:	88bb      	ldrh	r3, [r7, #4]
 8008f70:	b2db      	uxtb	r3, r3
 8008f72:	747b      	strb	r3, [r7, #17]
 8008f74:	88bb      	ldrh	r3, [r7, #4]
 8008f76:	3301      	adds	r3, #1
 8008f78:	121b      	asrs	r3, r3, #8
 8008f7a:	b2db      	uxtb	r3, r3
 8008f7c:	74bb      	strb	r3, [r7, #18]
 8008f7e:	88bb      	ldrh	r3, [r7, #4]
 8008f80:	b2db      	uxtb	r3, r3
 8008f82:	3301      	adds	r3, #1
 8008f84:	b2db      	uxtb	r3, r3
 8008f86:	74fb      	strb	r3, [r7, #19]
	HAL_SPI_Transmit(HSPI_INSTANCE, Temp_Buffer1, 4, 1);
 8008f88:	f107 0110 	add.w	r1, r7, #16
 8008f8c:	2301      	movs	r3, #1
 8008f8e:	2204      	movs	r2, #4
 8008f90:	4824      	ldr	r0, [pc, #144]	; (8009024 <ILI9341_Draw_Pixel+0x1b0>)
 8008f92:	f7fd fcb1 	bl	80068f8 <HAL_SPI_Transmit>
	LCD_CS_PORT->ODR |= LCD_CS_PIN;
 8008f96:	4b22      	ldr	r3, [pc, #136]	; (8009020 <ILI9341_Draw_Pixel+0x1ac>)
 8008f98:	695b      	ldr	r3, [r3, #20]
 8008f9a:	4a21      	ldr	r2, [pc, #132]	; (8009020 <ILI9341_Draw_Pixel+0x1ac>)
 8008f9c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008fa0:	6153      	str	r3, [r2, #20]

	//ADDRESS
	LCD_DC_PORT->ODR &= ~(LCD_DC_PIN);
 8008fa2:	4b1f      	ldr	r3, [pc, #124]	; (8009020 <ILI9341_Draw_Pixel+0x1ac>)
 8008fa4:	695b      	ldr	r3, [r3, #20]
 8008fa6:	4a1e      	ldr	r2, [pc, #120]	; (8009020 <ILI9341_Draw_Pixel+0x1ac>)
 8008fa8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8008fac:	6153      	str	r3, [r2, #20]
	LCD_CS_PORT->ODR &= ~(LCD_CS_PIN);
 8008fae:	4b1c      	ldr	r3, [pc, #112]	; (8009020 <ILI9341_Draw_Pixel+0x1ac>)
 8008fb0:	695b      	ldr	r3, [r3, #20]
 8008fb2:	4a1b      	ldr	r2, [pc, #108]	; (8009020 <ILI9341_Draw_Pixel+0x1ac>)
 8008fb4:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8008fb8:	6153      	str	r3, [r2, #20]
	ILI9341_SPI_Send(0x2C);
 8008fba:	202c      	movs	r0, #44	; 0x2c
 8008fbc:	f7ff fc5a 	bl	8008874 <ILI9341_SPI_Send>
	LCD_DC_PORT->ODR |= LCD_DC_PIN;
 8008fc0:	4b17      	ldr	r3, [pc, #92]	; (8009020 <ILI9341_Draw_Pixel+0x1ac>)
 8008fc2:	695b      	ldr	r3, [r3, #20]
 8008fc4:	4a16      	ldr	r2, [pc, #88]	; (8009020 <ILI9341_Draw_Pixel+0x1ac>)
 8008fc6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008fca:	6153      	str	r3, [r2, #20]
	LCD_CS_PORT->ODR |= LCD_CS_PIN;
 8008fcc:	4b14      	ldr	r3, [pc, #80]	; (8009020 <ILI9341_Draw_Pixel+0x1ac>)
 8008fce:	695b      	ldr	r3, [r3, #20]
 8008fd0:	4a13      	ldr	r2, [pc, #76]	; (8009020 <ILI9341_Draw_Pixel+0x1ac>)
 8008fd2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008fd6:	6153      	str	r3, [r2, #20]
	
	//COLOUR
	LCD_CS_PORT->ODR &= ~(LCD_CS_PIN);
 8008fd8:	4b11      	ldr	r3, [pc, #68]	; (8009020 <ILI9341_Draw_Pixel+0x1ac>)
 8008fda:	695b      	ldr	r3, [r3, #20]
 8008fdc:	4a10      	ldr	r2, [pc, #64]	; (8009020 <ILI9341_Draw_Pixel+0x1ac>)
 8008fde:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8008fe2:	6153      	str	r3, [r2, #20]
	unsigned char Temp_Buffer2[2] = {colour>>8, colour};
 8008fe4:	887b      	ldrh	r3, [r7, #2]
 8008fe6:	0a1b      	lsrs	r3, r3, #8
 8008fe8:	b29b      	uxth	r3, r3
 8008fea:	b2db      	uxtb	r3, r3
 8008fec:	733b      	strb	r3, [r7, #12]
 8008fee:	887b      	ldrh	r3, [r7, #2]
 8008ff0:	b2db      	uxtb	r3, r3
 8008ff2:	737b      	strb	r3, [r7, #13]
	HAL_SPI_Transmit(HSPI_INSTANCE, Temp_Buffer2, 2, 1);
 8008ff4:	f107 010c 	add.w	r1, r7, #12
 8008ff8:	2301      	movs	r3, #1
 8008ffa:	2202      	movs	r2, #2
 8008ffc:	4809      	ldr	r0, [pc, #36]	; (8009024 <ILI9341_Draw_Pixel+0x1b0>)
 8008ffe:	f7fd fc7b 	bl	80068f8 <HAL_SPI_Transmit>
	LCD_CS_PORT->ODR |= LCD_CS_PIN;
 8009002:	4b07      	ldr	r3, [pc, #28]	; (8009020 <ILI9341_Draw_Pixel+0x1ac>)
 8009004:	695b      	ldr	r3, [r3, #20]
 8009006:	4a06      	ldr	r2, [pc, #24]	; (8009020 <ILI9341_Draw_Pixel+0x1ac>)
 8009008:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800900c:	6153      	str	r3, [r2, #20]
 800900e:	e000      	b.n	8009012 <ILI9341_Draw_Pixel+0x19e>
	if((X >=LCD_WIDTH) || (Y >=LCD_HEIGHT)) return;	//OUT OF BOUNDS!
 8009010:	bf00      	nop

	
}
 8009012:	3718      	adds	r7, #24
 8009014:	46bd      	mov	sp, r7
 8009016:	bd80      	pop	{r7, pc}
 8009018:	2000001e 	.word	0x2000001e
 800901c:	2000001c 	.word	0x2000001c
 8009020:	48000400 	.word	0x48000400
 8009024:	20000dec 	.word	0x20000dec

08009028 <ILI9341_Draw_Rectangle>:
 *
 *
 */

void ILI9341_Draw_Rectangle(uint16_t xpos, uint16_t ypos, uint16_t width, uint16_t height, uint16_t colour, CHUNK_Type chunk_type)
{
 8009028:	b590      	push	{r4, r7, lr}
 800902a:	b087      	sub	sp, #28
 800902c:	af02      	add	r7, sp, #8
 800902e:	4604      	mov	r4, r0
 8009030:	4608      	mov	r0, r1
 8009032:	4611      	mov	r1, r2
 8009034:	461a      	mov	r2, r3
 8009036:	4623      	mov	r3, r4
 8009038:	80fb      	strh	r3, [r7, #6]
 800903a:	4603      	mov	r3, r0
 800903c:	80bb      	strh	r3, [r7, #4]
 800903e:	460b      	mov	r3, r1
 8009040:	807b      	strh	r3, [r7, #2]
 8009042:	4613      	mov	r3, r2
 8009044:	803b      	strh	r3, [r7, #0]
	if((xpos >=LCD_WIDTH) || (ypos >=LCD_HEIGHT)) return;
 8009046:	4b39      	ldr	r3, [pc, #228]	; (800912c <ILI9341_Draw_Rectangle+0x104>)
 8009048:	881b      	ldrh	r3, [r3, #0]
 800904a:	b29b      	uxth	r3, r3
 800904c:	88fa      	ldrh	r2, [r7, #6]
 800904e:	429a      	cmp	r2, r3
 8009050:	d268      	bcs.n	8009124 <ILI9341_Draw_Rectangle+0xfc>
 8009052:	4b37      	ldr	r3, [pc, #220]	; (8009130 <ILI9341_Draw_Rectangle+0x108>)
 8009054:	881b      	ldrh	r3, [r3, #0]
 8009056:	b29b      	uxth	r3, r3
 8009058:	88ba      	ldrh	r2, [r7, #4]
 800905a:	429a      	cmp	r2, r3
 800905c:	d262      	bcs.n	8009124 <ILI9341_Draw_Rectangle+0xfc>
	if((xpos+width-1)>=LCD_WIDTH)
 800905e:	88fa      	ldrh	r2, [r7, #6]
 8009060:	887b      	ldrh	r3, [r7, #2]
 8009062:	4413      	add	r3, r2
 8009064:	3b01      	subs	r3, #1
 8009066:	4a31      	ldr	r2, [pc, #196]	; (800912c <ILI9341_Draw_Rectangle+0x104>)
 8009068:	8812      	ldrh	r2, [r2, #0]
 800906a:	b292      	uxth	r2, r2
 800906c:	4293      	cmp	r3, r2
 800906e:	db05      	blt.n	800907c <ILI9341_Draw_Rectangle+0x54>
		{
			width=LCD_WIDTH-xpos;
 8009070:	4b2e      	ldr	r3, [pc, #184]	; (800912c <ILI9341_Draw_Rectangle+0x104>)
 8009072:	881b      	ldrh	r3, [r3, #0]
 8009074:	b29a      	uxth	r2, r3
 8009076:	88fb      	ldrh	r3, [r7, #6]
 8009078:	1ad3      	subs	r3, r2, r3
 800907a:	807b      	strh	r3, [r7, #2]
		}
	if((ypos+height-1)>=LCD_HEIGHT)
 800907c:	88ba      	ldrh	r2, [r7, #4]
 800907e:	883b      	ldrh	r3, [r7, #0]
 8009080:	4413      	add	r3, r2
 8009082:	3b01      	subs	r3, #1
 8009084:	4a2a      	ldr	r2, [pc, #168]	; (8009130 <ILI9341_Draw_Rectangle+0x108>)
 8009086:	8812      	ldrh	r2, [r2, #0]
 8009088:	b292      	uxth	r2, r2
 800908a:	4293      	cmp	r3, r2
 800908c:	db05      	blt.n	800909a <ILI9341_Draw_Rectangle+0x72>
		{
			height=LCD_HEIGHT-ypos;
 800908e:	4b28      	ldr	r3, [pc, #160]	; (8009130 <ILI9341_Draw_Rectangle+0x108>)
 8009090:	881b      	ldrh	r3, [r3, #0]
 8009092:	b29a      	uxth	r2, r3
 8009094:	88bb      	ldrh	r3, [r7, #4]
 8009096:	1ad3      	subs	r3, r2, r3
 8009098:	803b      	strh	r3, [r7, #0]
		}
	ILI9341_Set_Address(xpos,
						ypos,
						(xpos + width) - 1,
 800909a:	88fa      	ldrh	r2, [r7, #6]
 800909c:	887b      	ldrh	r3, [r7, #2]
 800909e:	4413      	add	r3, r2
 80090a0:	b29b      	uxth	r3, r3
	ILI9341_Set_Address(xpos,
 80090a2:	3b01      	subs	r3, #1
 80090a4:	b29c      	uxth	r4, r3
						(ypos + height) - 1);
 80090a6:	88ba      	ldrh	r2, [r7, #4]
 80090a8:	883b      	ldrh	r3, [r7, #0]
 80090aa:	4413      	add	r3, r2
 80090ac:	b29b      	uxth	r3, r3
	ILI9341_Set_Address(xpos,
 80090ae:	3b01      	subs	r3, #1
 80090b0:	b29b      	uxth	r3, r3
 80090b2:	88b9      	ldrh	r1, [r7, #4]
 80090b4:	88f8      	ldrh	r0, [r7, #6]
 80090b6:	4622      	mov	r2, r4
 80090b8:	f7ff fc34 	bl	8008924 <ILI9341_Set_Address>
	// if odd numbered rect area is requested, we round down to nearest even number
	// to keep ILI9341_Draw_colour_Burst() happy.

	// Note, truncated pixel will be needed at function end.

	uint16_t size = height*width;
 80090bc:	883a      	ldrh	r2, [r7, #0]
 80090be:	887b      	ldrh	r3, [r7, #2]
 80090c0:	fb12 f303 	smulbb	r3, r2, r3
 80090c4:	81fb      	strh	r3, [r7, #14]
	uint8_t truncated = 0;
 80090c6:	2300      	movs	r3, #0
 80090c8:	737b      	strb	r3, [r7, #13]

	if((size & 1) && (size > 1))		// don't round down to zero!
 80090ca:	89fb      	ldrh	r3, [r7, #14]
 80090cc:	f003 0301 	and.w	r3, r3, #1
 80090d0:	2b00      	cmp	r3, #0
 80090d2:	d009      	beq.n	80090e8 <ILI9341_Draw_Rectangle+0xc0>
 80090d4:	89fb      	ldrh	r3, [r7, #14]
 80090d6:	2b01      	cmp	r3, #1
 80090d8:	d906      	bls.n	80090e8 <ILI9341_Draw_Rectangle+0xc0>
	{
		truncated = 1;
 80090da:	2301      	movs	r3, #1
 80090dc:	737b      	strb	r3, [r7, #13]
	 	size = ((size >> 1) * 2);
 80090de:	89fb      	ldrh	r3, [r7, #14]
 80090e0:	085b      	lsrs	r3, r3, #1
 80090e2:	b29b      	uxth	r3, r3
 80090e4:	005b      	lsls	r3, r3, #1
 80090e6:	81fb      	strh	r3, [r7, #14]
	}

	ILI9341_Draw_colour_Burst(	xpos,
 80090e8:	89fc      	ldrh	r4, [r7, #14]
 80090ea:	8c3a      	ldrh	r2, [r7, #32]
 80090ec:	88b9      	ldrh	r1, [r7, #4]
 80090ee:	88f8      	ldrh	r0, [r7, #6]
 80090f0:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 80090f4:	9300      	str	r3, [sp, #0]
 80090f6:	4623      	mov	r3, r4
 80090f8:	f7ff fdea 	bl	8008cd0 <ILI9341_Draw_colour_Burst>
								colour,
								size,
								chunk_type);

	// add the truncated pixel now
	if(truncated)
 80090fc:	7b7b      	ldrb	r3, [r7, #13]
 80090fe:	2b00      	cmp	r3, #0
 8009100:	d011      	beq.n	8009126 <ILI9341_Draw_Rectangle+0xfe>
	{
		ILI9341_Draw_Pixel(	(xpos + width) - 1,
 8009102:	88fa      	ldrh	r2, [r7, #6]
 8009104:	887b      	ldrh	r3, [r7, #2]
 8009106:	4413      	add	r3, r2
 8009108:	b29b      	uxth	r3, r3
 800910a:	3b01      	subs	r3, #1
 800910c:	b298      	uxth	r0, r3
							(ypos + height) - 1,
 800910e:	88ba      	ldrh	r2, [r7, #4]
 8009110:	883b      	ldrh	r3, [r7, #0]
 8009112:	4413      	add	r3, r2
 8009114:	b29b      	uxth	r3, r3
		ILI9341_Draw_Pixel(	(xpos + width) - 1,
 8009116:	3b01      	subs	r3, #1
 8009118:	b29b      	uxth	r3, r3
 800911a:	8c3a      	ldrh	r2, [r7, #32]
 800911c:	4619      	mov	r1, r3
 800911e:	f7ff fea9 	bl	8008e74 <ILI9341_Draw_Pixel>
 8009122:	e000      	b.n	8009126 <ILI9341_Draw_Rectangle+0xfe>
	if((xpos >=LCD_WIDTH) || (ypos >=LCD_HEIGHT)) return;
 8009124:	bf00      	nop
							colour);
	}
}
 8009126:	3714      	adds	r7, #20
 8009128:	46bd      	mov	sp, r7
 800912a:	bd90      	pop	{r4, r7, pc}
 800912c:	2000001e 	.word	0x2000001e
 8009130:	2000001c 	.word	0x2000001c

08009134 <ILI9341_Draw_Horizontal_Line>:
 *
 *
 */

void ILI9341_Draw_Horizontal_Line(uint16_t xpos, uint16_t ypos, uint16_t width, uint16_t colour)
{
 8009134:	b590      	push	{r4, r7, lr}
 8009136:	b085      	sub	sp, #20
 8009138:	af02      	add	r7, sp, #8
 800913a:	4604      	mov	r4, r0
 800913c:	4608      	mov	r0, r1
 800913e:	4611      	mov	r1, r2
 8009140:	461a      	mov	r2, r3
 8009142:	4623      	mov	r3, r4
 8009144:	80fb      	strh	r3, [r7, #6]
 8009146:	4603      	mov	r3, r0
 8009148:	80bb      	strh	r3, [r7, #4]
 800914a:	460b      	mov	r3, r1
 800914c:	807b      	strh	r3, [r7, #2]
 800914e:	4613      	mov	r3, r2
 8009150:	803b      	strh	r3, [r7, #0]
	if((xpos >=LCD_WIDTH) || (ypos >=LCD_HEIGHT)) return;
 8009152:	4b1a      	ldr	r3, [pc, #104]	; (80091bc <ILI9341_Draw_Horizontal_Line+0x88>)
 8009154:	881b      	ldrh	r3, [r3, #0]
 8009156:	b29b      	uxth	r3, r3
 8009158:	88fa      	ldrh	r2, [r7, #6]
 800915a:	429a      	cmp	r2, r3
 800915c:	d229      	bcs.n	80091b2 <ILI9341_Draw_Horizontal_Line+0x7e>
 800915e:	4b18      	ldr	r3, [pc, #96]	; (80091c0 <ILI9341_Draw_Horizontal_Line+0x8c>)
 8009160:	881b      	ldrh	r3, [r3, #0]
 8009162:	b29b      	uxth	r3, r3
 8009164:	88ba      	ldrh	r2, [r7, #4]
 8009166:	429a      	cmp	r2, r3
 8009168:	d223      	bcs.n	80091b2 <ILI9341_Draw_Horizontal_Line+0x7e>
	if(((xpos + width) - 1 ) >= LCD_WIDTH)
 800916a:	88fa      	ldrh	r2, [r7, #6]
 800916c:	887b      	ldrh	r3, [r7, #2]
 800916e:	4413      	add	r3, r2
 8009170:	3b01      	subs	r3, #1
 8009172:	4a12      	ldr	r2, [pc, #72]	; (80091bc <ILI9341_Draw_Horizontal_Line+0x88>)
 8009174:	8812      	ldrh	r2, [r2, #0]
 8009176:	b292      	uxth	r2, r2
 8009178:	4293      	cmp	r3, r2
 800917a:	db05      	blt.n	8009188 <ILI9341_Draw_Horizontal_Line+0x54>
		{
			width= LCD_WIDTH - xpos;
 800917c:	4b0f      	ldr	r3, [pc, #60]	; (80091bc <ILI9341_Draw_Horizontal_Line+0x88>)
 800917e:	881b      	ldrh	r3, [r3, #0]
 8009180:	b29a      	uxth	r2, r3
 8009182:	88fb      	ldrh	r3, [r7, #6]
 8009184:	1ad3      	subs	r3, r2, r3
 8009186:	807b      	strh	r3, [r7, #2]
		}
	ILI9341_Set_Address(	xpos,
							ypos,
							(xpos + width) - 1,
 8009188:	88fa      	ldrh	r2, [r7, #6]
 800918a:	887b      	ldrh	r3, [r7, #2]
 800918c:	4413      	add	r3, r2
 800918e:	b29b      	uxth	r3, r3
	ILI9341_Set_Address(	xpos,
 8009190:	3b01      	subs	r3, #1
 8009192:	b29a      	uxth	r2, r3
 8009194:	88bb      	ldrh	r3, [r7, #4]
 8009196:	88b9      	ldrh	r1, [r7, #4]
 8009198:	88f8      	ldrh	r0, [r7, #6]
 800919a:	f7ff fbc3 	bl	8008924 <ILI9341_Set_Address>
							ypos);

	ILI9341_Draw_colour_Burst(xpos, ypos, colour, width, LINE_CHUNK);
 800919e:	887c      	ldrh	r4, [r7, #2]
 80091a0:	883a      	ldrh	r2, [r7, #0]
 80091a2:	88b9      	ldrh	r1, [r7, #4]
 80091a4:	88f8      	ldrh	r0, [r7, #6]
 80091a6:	2303      	movs	r3, #3
 80091a8:	9300      	str	r3, [sp, #0]
 80091aa:	4623      	mov	r3, r4
 80091ac:	f7ff fd90 	bl	8008cd0 <ILI9341_Draw_colour_Burst>
 80091b0:	e000      	b.n	80091b4 <ILI9341_Draw_Horizontal_Line+0x80>
	if((xpos >=LCD_WIDTH) || (ypos >=LCD_HEIGHT)) return;
 80091b2:	bf00      	nop
}
 80091b4:	370c      	adds	r7, #12
 80091b6:	46bd      	mov	sp, r7
 80091b8:	bd90      	pop	{r4, r7, pc}
 80091ba:	bf00      	nop
 80091bc:	2000001e 	.word	0x2000001e
 80091c0:	2000001c 	.word	0x2000001c

080091c4 <ILI9341_Draw_Vertical_Line>:

//DRAW LINE FROM X,Y LOCATION to X,Y+height LOCATION
void ILI9341_Draw_Vertical_Line(uint16_t xpos, uint16_t ypos, uint16_t height, uint16_t colour)
{
 80091c4:	b590      	push	{r4, r7, lr}
 80091c6:	b085      	sub	sp, #20
 80091c8:	af02      	add	r7, sp, #8
 80091ca:	4604      	mov	r4, r0
 80091cc:	4608      	mov	r0, r1
 80091ce:	4611      	mov	r1, r2
 80091d0:	461a      	mov	r2, r3
 80091d2:	4623      	mov	r3, r4
 80091d4:	80fb      	strh	r3, [r7, #6]
 80091d6:	4603      	mov	r3, r0
 80091d8:	80bb      	strh	r3, [r7, #4]
 80091da:	460b      	mov	r3, r1
 80091dc:	807b      	strh	r3, [r7, #2]
 80091de:	4613      	mov	r3, r2
 80091e0:	803b      	strh	r3, [r7, #0]
	if((xpos >= LCD_WIDTH) || (ypos >= LCD_HEIGHT)) return;
 80091e2:	4b1a      	ldr	r3, [pc, #104]	; (800924c <ILI9341_Draw_Vertical_Line+0x88>)
 80091e4:	881b      	ldrh	r3, [r3, #0]
 80091e6:	b29b      	uxth	r3, r3
 80091e8:	88fa      	ldrh	r2, [r7, #6]
 80091ea:	429a      	cmp	r2, r3
 80091ec:	d229      	bcs.n	8009242 <ILI9341_Draw_Vertical_Line+0x7e>
 80091ee:	4b18      	ldr	r3, [pc, #96]	; (8009250 <ILI9341_Draw_Vertical_Line+0x8c>)
 80091f0:	881b      	ldrh	r3, [r3, #0]
 80091f2:	b29b      	uxth	r3, r3
 80091f4:	88ba      	ldrh	r2, [r7, #4]
 80091f6:	429a      	cmp	r2, r3
 80091f8:	d223      	bcs.n	8009242 <ILI9341_Draw_Vertical_Line+0x7e>
	if(((ypos + height) - 1) >= LCD_HEIGHT)
 80091fa:	88ba      	ldrh	r2, [r7, #4]
 80091fc:	887b      	ldrh	r3, [r7, #2]
 80091fe:	4413      	add	r3, r2
 8009200:	3b01      	subs	r3, #1
 8009202:	4a13      	ldr	r2, [pc, #76]	; (8009250 <ILI9341_Draw_Vertical_Line+0x8c>)
 8009204:	8812      	ldrh	r2, [r2, #0]
 8009206:	b292      	uxth	r2, r2
 8009208:	4293      	cmp	r3, r2
 800920a:	db05      	blt.n	8009218 <ILI9341_Draw_Vertical_Line+0x54>
		{
			height= LCD_HEIGHT - ypos;
 800920c:	4b10      	ldr	r3, [pc, #64]	; (8009250 <ILI9341_Draw_Vertical_Line+0x8c>)
 800920e:	881b      	ldrh	r3, [r3, #0]
 8009210:	b29a      	uxth	r2, r3
 8009212:	88bb      	ldrh	r3, [r7, #4]
 8009214:	1ad3      	subs	r3, r2, r3
 8009216:	807b      	strh	r3, [r7, #2]
		}
	ILI9341_Set_Address(xpos, ypos, xpos, (ypos + height) - 1);
 8009218:	88ba      	ldrh	r2, [r7, #4]
 800921a:	887b      	ldrh	r3, [r7, #2]
 800921c:	4413      	add	r3, r2
 800921e:	b29b      	uxth	r3, r3
 8009220:	3b01      	subs	r3, #1
 8009222:	b29b      	uxth	r3, r3
 8009224:	88fa      	ldrh	r2, [r7, #6]
 8009226:	88b9      	ldrh	r1, [r7, #4]
 8009228:	88f8      	ldrh	r0, [r7, #6]
 800922a:	f7ff fb7b 	bl	8008924 <ILI9341_Set_Address>
	ILI9341_Draw_colour_Burst(xpos, ypos, colour, height, LINE_CHUNK);
 800922e:	887c      	ldrh	r4, [r7, #2]
 8009230:	883a      	ldrh	r2, [r7, #0]
 8009232:	88b9      	ldrh	r1, [r7, #4]
 8009234:	88f8      	ldrh	r0, [r7, #6]
 8009236:	2303      	movs	r3, #3
 8009238:	9300      	str	r3, [sp, #0]
 800923a:	4623      	mov	r3, r4
 800923c:	f7ff fd48 	bl	8008cd0 <ILI9341_Draw_colour_Burst>
 8009240:	e000      	b.n	8009244 <ILI9341_Draw_Vertical_Line+0x80>
	if((xpos >= LCD_WIDTH) || (ypos >= LCD_HEIGHT)) return;
 8009242:	bf00      	nop
}
 8009244:	370c      	adds	r7, #12
 8009246:	46bd      	mov	sp, r7
 8009248:	bd90      	pop	{r4, r7, pc}
 800924a:	bf00      	nop
 800924c:	2000001e 	.word	0x2000001e
 8009250:	2000001c 	.word	0x2000001c

08009254 <__errno>:
 8009254:	4b01      	ldr	r3, [pc, #4]	; (800925c <__errno+0x8>)
 8009256:	6818      	ldr	r0, [r3, #0]
 8009258:	4770      	bx	lr
 800925a:	bf00      	nop
 800925c:	20000b64 	.word	0x20000b64

08009260 <__libc_init_array>:
 8009260:	b570      	push	{r4, r5, r6, lr}
 8009262:	4e0d      	ldr	r6, [pc, #52]	; (8009298 <__libc_init_array+0x38>)
 8009264:	4c0d      	ldr	r4, [pc, #52]	; (800929c <__libc_init_array+0x3c>)
 8009266:	1ba4      	subs	r4, r4, r6
 8009268:	10a4      	asrs	r4, r4, #2
 800926a:	2500      	movs	r5, #0
 800926c:	42a5      	cmp	r5, r4
 800926e:	d109      	bne.n	8009284 <__libc_init_array+0x24>
 8009270:	4e0b      	ldr	r6, [pc, #44]	; (80092a0 <__libc_init_array+0x40>)
 8009272:	4c0c      	ldr	r4, [pc, #48]	; (80092a4 <__libc_init_array+0x44>)
 8009274:	f000 ffe8 	bl	800a248 <_init>
 8009278:	1ba4      	subs	r4, r4, r6
 800927a:	10a4      	asrs	r4, r4, #2
 800927c:	2500      	movs	r5, #0
 800927e:	42a5      	cmp	r5, r4
 8009280:	d105      	bne.n	800928e <__libc_init_array+0x2e>
 8009282:	bd70      	pop	{r4, r5, r6, pc}
 8009284:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8009288:	4798      	blx	r3
 800928a:	3501      	adds	r5, #1
 800928c:	e7ee      	b.n	800926c <__libc_init_array+0xc>
 800928e:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8009292:	4798      	blx	r3
 8009294:	3501      	adds	r5, #1
 8009296:	e7f2      	b.n	800927e <__libc_init_array+0x1e>
 8009298:	0800a7b4 	.word	0x0800a7b4
 800929c:	0800a7b4 	.word	0x0800a7b4
 80092a0:	0800a7b4 	.word	0x0800a7b4
 80092a4:	0800a7b8 	.word	0x0800a7b8

080092a8 <memset>:
 80092a8:	4402      	add	r2, r0
 80092aa:	4603      	mov	r3, r0
 80092ac:	4293      	cmp	r3, r2
 80092ae:	d100      	bne.n	80092b2 <memset+0xa>
 80092b0:	4770      	bx	lr
 80092b2:	f803 1b01 	strb.w	r1, [r3], #1
 80092b6:	e7f9      	b.n	80092ac <memset+0x4>

080092b8 <_puts_r>:
 80092b8:	b570      	push	{r4, r5, r6, lr}
 80092ba:	460e      	mov	r6, r1
 80092bc:	4605      	mov	r5, r0
 80092be:	b118      	cbz	r0, 80092c8 <_puts_r+0x10>
 80092c0:	6983      	ldr	r3, [r0, #24]
 80092c2:	b90b      	cbnz	r3, 80092c8 <_puts_r+0x10>
 80092c4:	f000 fa40 	bl	8009748 <__sinit>
 80092c8:	69ab      	ldr	r3, [r5, #24]
 80092ca:	68ac      	ldr	r4, [r5, #8]
 80092cc:	b913      	cbnz	r3, 80092d4 <_puts_r+0x1c>
 80092ce:	4628      	mov	r0, r5
 80092d0:	f000 fa3a 	bl	8009748 <__sinit>
 80092d4:	4b23      	ldr	r3, [pc, #140]	; (8009364 <_puts_r+0xac>)
 80092d6:	429c      	cmp	r4, r3
 80092d8:	d117      	bne.n	800930a <_puts_r+0x52>
 80092da:	686c      	ldr	r4, [r5, #4]
 80092dc:	89a3      	ldrh	r3, [r4, #12]
 80092de:	071b      	lsls	r3, r3, #28
 80092e0:	d51d      	bpl.n	800931e <_puts_r+0x66>
 80092e2:	6923      	ldr	r3, [r4, #16]
 80092e4:	b1db      	cbz	r3, 800931e <_puts_r+0x66>
 80092e6:	3e01      	subs	r6, #1
 80092e8:	68a3      	ldr	r3, [r4, #8]
 80092ea:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 80092ee:	3b01      	subs	r3, #1
 80092f0:	60a3      	str	r3, [r4, #8]
 80092f2:	b9e9      	cbnz	r1, 8009330 <_puts_r+0x78>
 80092f4:	2b00      	cmp	r3, #0
 80092f6:	da2e      	bge.n	8009356 <_puts_r+0x9e>
 80092f8:	4622      	mov	r2, r4
 80092fa:	210a      	movs	r1, #10
 80092fc:	4628      	mov	r0, r5
 80092fe:	f000 f873 	bl	80093e8 <__swbuf_r>
 8009302:	3001      	adds	r0, #1
 8009304:	d011      	beq.n	800932a <_puts_r+0x72>
 8009306:	200a      	movs	r0, #10
 8009308:	e011      	b.n	800932e <_puts_r+0x76>
 800930a:	4b17      	ldr	r3, [pc, #92]	; (8009368 <_puts_r+0xb0>)
 800930c:	429c      	cmp	r4, r3
 800930e:	d101      	bne.n	8009314 <_puts_r+0x5c>
 8009310:	68ac      	ldr	r4, [r5, #8]
 8009312:	e7e3      	b.n	80092dc <_puts_r+0x24>
 8009314:	4b15      	ldr	r3, [pc, #84]	; (800936c <_puts_r+0xb4>)
 8009316:	429c      	cmp	r4, r3
 8009318:	bf08      	it	eq
 800931a:	68ec      	ldreq	r4, [r5, #12]
 800931c:	e7de      	b.n	80092dc <_puts_r+0x24>
 800931e:	4621      	mov	r1, r4
 8009320:	4628      	mov	r0, r5
 8009322:	f000 f8b3 	bl	800948c <__swsetup_r>
 8009326:	2800      	cmp	r0, #0
 8009328:	d0dd      	beq.n	80092e6 <_puts_r+0x2e>
 800932a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800932e:	bd70      	pop	{r4, r5, r6, pc}
 8009330:	2b00      	cmp	r3, #0
 8009332:	da04      	bge.n	800933e <_puts_r+0x86>
 8009334:	69a2      	ldr	r2, [r4, #24]
 8009336:	429a      	cmp	r2, r3
 8009338:	dc06      	bgt.n	8009348 <_puts_r+0x90>
 800933a:	290a      	cmp	r1, #10
 800933c:	d004      	beq.n	8009348 <_puts_r+0x90>
 800933e:	6823      	ldr	r3, [r4, #0]
 8009340:	1c5a      	adds	r2, r3, #1
 8009342:	6022      	str	r2, [r4, #0]
 8009344:	7019      	strb	r1, [r3, #0]
 8009346:	e7cf      	b.n	80092e8 <_puts_r+0x30>
 8009348:	4622      	mov	r2, r4
 800934a:	4628      	mov	r0, r5
 800934c:	f000 f84c 	bl	80093e8 <__swbuf_r>
 8009350:	3001      	adds	r0, #1
 8009352:	d1c9      	bne.n	80092e8 <_puts_r+0x30>
 8009354:	e7e9      	b.n	800932a <_puts_r+0x72>
 8009356:	6823      	ldr	r3, [r4, #0]
 8009358:	200a      	movs	r0, #10
 800935a:	1c5a      	adds	r2, r3, #1
 800935c:	6022      	str	r2, [r4, #0]
 800935e:	7018      	strb	r0, [r3, #0]
 8009360:	e7e5      	b.n	800932e <_puts_r+0x76>
 8009362:	bf00      	nop
 8009364:	0800a740 	.word	0x0800a740
 8009368:	0800a760 	.word	0x0800a760
 800936c:	0800a720 	.word	0x0800a720

08009370 <puts>:
 8009370:	4b02      	ldr	r3, [pc, #8]	; (800937c <puts+0xc>)
 8009372:	4601      	mov	r1, r0
 8009374:	6818      	ldr	r0, [r3, #0]
 8009376:	f7ff bf9f 	b.w	80092b8 <_puts_r>
 800937a:	bf00      	nop
 800937c:	20000b64 	.word	0x20000b64

08009380 <sniprintf>:
 8009380:	b40c      	push	{r2, r3}
 8009382:	b530      	push	{r4, r5, lr}
 8009384:	4b17      	ldr	r3, [pc, #92]	; (80093e4 <sniprintf+0x64>)
 8009386:	1e0c      	subs	r4, r1, #0
 8009388:	b09d      	sub	sp, #116	; 0x74
 800938a:	681d      	ldr	r5, [r3, #0]
 800938c:	da08      	bge.n	80093a0 <sniprintf+0x20>
 800938e:	238b      	movs	r3, #139	; 0x8b
 8009390:	602b      	str	r3, [r5, #0]
 8009392:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8009396:	b01d      	add	sp, #116	; 0x74
 8009398:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800939c:	b002      	add	sp, #8
 800939e:	4770      	bx	lr
 80093a0:	f44f 7302 	mov.w	r3, #520	; 0x208
 80093a4:	f8ad 3014 	strh.w	r3, [sp, #20]
 80093a8:	bf14      	ite	ne
 80093aa:	f104 33ff 	addne.w	r3, r4, #4294967295	; 0xffffffff
 80093ae:	4623      	moveq	r3, r4
 80093b0:	9304      	str	r3, [sp, #16]
 80093b2:	9307      	str	r3, [sp, #28]
 80093b4:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80093b8:	9002      	str	r0, [sp, #8]
 80093ba:	9006      	str	r0, [sp, #24]
 80093bc:	f8ad 3016 	strh.w	r3, [sp, #22]
 80093c0:	9a20      	ldr	r2, [sp, #128]	; 0x80
 80093c2:	ab21      	add	r3, sp, #132	; 0x84
 80093c4:	a902      	add	r1, sp, #8
 80093c6:	4628      	mov	r0, r5
 80093c8:	9301      	str	r3, [sp, #4]
 80093ca:	f000 fbad 	bl	8009b28 <_svfiprintf_r>
 80093ce:	1c43      	adds	r3, r0, #1
 80093d0:	bfbc      	itt	lt
 80093d2:	238b      	movlt	r3, #139	; 0x8b
 80093d4:	602b      	strlt	r3, [r5, #0]
 80093d6:	2c00      	cmp	r4, #0
 80093d8:	d0dd      	beq.n	8009396 <sniprintf+0x16>
 80093da:	9b02      	ldr	r3, [sp, #8]
 80093dc:	2200      	movs	r2, #0
 80093de:	701a      	strb	r2, [r3, #0]
 80093e0:	e7d9      	b.n	8009396 <sniprintf+0x16>
 80093e2:	bf00      	nop
 80093e4:	20000b64 	.word	0x20000b64

080093e8 <__swbuf_r>:
 80093e8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80093ea:	460e      	mov	r6, r1
 80093ec:	4614      	mov	r4, r2
 80093ee:	4605      	mov	r5, r0
 80093f0:	b118      	cbz	r0, 80093fa <__swbuf_r+0x12>
 80093f2:	6983      	ldr	r3, [r0, #24]
 80093f4:	b90b      	cbnz	r3, 80093fa <__swbuf_r+0x12>
 80093f6:	f000 f9a7 	bl	8009748 <__sinit>
 80093fa:	4b21      	ldr	r3, [pc, #132]	; (8009480 <__swbuf_r+0x98>)
 80093fc:	429c      	cmp	r4, r3
 80093fe:	d12a      	bne.n	8009456 <__swbuf_r+0x6e>
 8009400:	686c      	ldr	r4, [r5, #4]
 8009402:	69a3      	ldr	r3, [r4, #24]
 8009404:	60a3      	str	r3, [r4, #8]
 8009406:	89a3      	ldrh	r3, [r4, #12]
 8009408:	071a      	lsls	r2, r3, #28
 800940a:	d52e      	bpl.n	800946a <__swbuf_r+0x82>
 800940c:	6923      	ldr	r3, [r4, #16]
 800940e:	b363      	cbz	r3, 800946a <__swbuf_r+0x82>
 8009410:	6923      	ldr	r3, [r4, #16]
 8009412:	6820      	ldr	r0, [r4, #0]
 8009414:	1ac0      	subs	r0, r0, r3
 8009416:	6963      	ldr	r3, [r4, #20]
 8009418:	b2f6      	uxtb	r6, r6
 800941a:	4283      	cmp	r3, r0
 800941c:	4637      	mov	r7, r6
 800941e:	dc04      	bgt.n	800942a <__swbuf_r+0x42>
 8009420:	4621      	mov	r1, r4
 8009422:	4628      	mov	r0, r5
 8009424:	f000 f926 	bl	8009674 <_fflush_r>
 8009428:	bb28      	cbnz	r0, 8009476 <__swbuf_r+0x8e>
 800942a:	68a3      	ldr	r3, [r4, #8]
 800942c:	3b01      	subs	r3, #1
 800942e:	60a3      	str	r3, [r4, #8]
 8009430:	6823      	ldr	r3, [r4, #0]
 8009432:	1c5a      	adds	r2, r3, #1
 8009434:	6022      	str	r2, [r4, #0]
 8009436:	701e      	strb	r6, [r3, #0]
 8009438:	6963      	ldr	r3, [r4, #20]
 800943a:	3001      	adds	r0, #1
 800943c:	4283      	cmp	r3, r0
 800943e:	d004      	beq.n	800944a <__swbuf_r+0x62>
 8009440:	89a3      	ldrh	r3, [r4, #12]
 8009442:	07db      	lsls	r3, r3, #31
 8009444:	d519      	bpl.n	800947a <__swbuf_r+0x92>
 8009446:	2e0a      	cmp	r6, #10
 8009448:	d117      	bne.n	800947a <__swbuf_r+0x92>
 800944a:	4621      	mov	r1, r4
 800944c:	4628      	mov	r0, r5
 800944e:	f000 f911 	bl	8009674 <_fflush_r>
 8009452:	b190      	cbz	r0, 800947a <__swbuf_r+0x92>
 8009454:	e00f      	b.n	8009476 <__swbuf_r+0x8e>
 8009456:	4b0b      	ldr	r3, [pc, #44]	; (8009484 <__swbuf_r+0x9c>)
 8009458:	429c      	cmp	r4, r3
 800945a:	d101      	bne.n	8009460 <__swbuf_r+0x78>
 800945c:	68ac      	ldr	r4, [r5, #8]
 800945e:	e7d0      	b.n	8009402 <__swbuf_r+0x1a>
 8009460:	4b09      	ldr	r3, [pc, #36]	; (8009488 <__swbuf_r+0xa0>)
 8009462:	429c      	cmp	r4, r3
 8009464:	bf08      	it	eq
 8009466:	68ec      	ldreq	r4, [r5, #12]
 8009468:	e7cb      	b.n	8009402 <__swbuf_r+0x1a>
 800946a:	4621      	mov	r1, r4
 800946c:	4628      	mov	r0, r5
 800946e:	f000 f80d 	bl	800948c <__swsetup_r>
 8009472:	2800      	cmp	r0, #0
 8009474:	d0cc      	beq.n	8009410 <__swbuf_r+0x28>
 8009476:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 800947a:	4638      	mov	r0, r7
 800947c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800947e:	bf00      	nop
 8009480:	0800a740 	.word	0x0800a740
 8009484:	0800a760 	.word	0x0800a760
 8009488:	0800a720 	.word	0x0800a720

0800948c <__swsetup_r>:
 800948c:	4b32      	ldr	r3, [pc, #200]	; (8009558 <__swsetup_r+0xcc>)
 800948e:	b570      	push	{r4, r5, r6, lr}
 8009490:	681d      	ldr	r5, [r3, #0]
 8009492:	4606      	mov	r6, r0
 8009494:	460c      	mov	r4, r1
 8009496:	b125      	cbz	r5, 80094a2 <__swsetup_r+0x16>
 8009498:	69ab      	ldr	r3, [r5, #24]
 800949a:	b913      	cbnz	r3, 80094a2 <__swsetup_r+0x16>
 800949c:	4628      	mov	r0, r5
 800949e:	f000 f953 	bl	8009748 <__sinit>
 80094a2:	4b2e      	ldr	r3, [pc, #184]	; (800955c <__swsetup_r+0xd0>)
 80094a4:	429c      	cmp	r4, r3
 80094a6:	d10f      	bne.n	80094c8 <__swsetup_r+0x3c>
 80094a8:	686c      	ldr	r4, [r5, #4]
 80094aa:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80094ae:	b29a      	uxth	r2, r3
 80094b0:	0715      	lsls	r5, r2, #28
 80094b2:	d42c      	bmi.n	800950e <__swsetup_r+0x82>
 80094b4:	06d0      	lsls	r0, r2, #27
 80094b6:	d411      	bmi.n	80094dc <__swsetup_r+0x50>
 80094b8:	2209      	movs	r2, #9
 80094ba:	6032      	str	r2, [r6, #0]
 80094bc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80094c0:	81a3      	strh	r3, [r4, #12]
 80094c2:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80094c6:	e03e      	b.n	8009546 <__swsetup_r+0xba>
 80094c8:	4b25      	ldr	r3, [pc, #148]	; (8009560 <__swsetup_r+0xd4>)
 80094ca:	429c      	cmp	r4, r3
 80094cc:	d101      	bne.n	80094d2 <__swsetup_r+0x46>
 80094ce:	68ac      	ldr	r4, [r5, #8]
 80094d0:	e7eb      	b.n	80094aa <__swsetup_r+0x1e>
 80094d2:	4b24      	ldr	r3, [pc, #144]	; (8009564 <__swsetup_r+0xd8>)
 80094d4:	429c      	cmp	r4, r3
 80094d6:	bf08      	it	eq
 80094d8:	68ec      	ldreq	r4, [r5, #12]
 80094da:	e7e6      	b.n	80094aa <__swsetup_r+0x1e>
 80094dc:	0751      	lsls	r1, r2, #29
 80094de:	d512      	bpl.n	8009506 <__swsetup_r+0x7a>
 80094e0:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80094e2:	b141      	cbz	r1, 80094f6 <__swsetup_r+0x6a>
 80094e4:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80094e8:	4299      	cmp	r1, r3
 80094ea:	d002      	beq.n	80094f2 <__swsetup_r+0x66>
 80094ec:	4630      	mov	r0, r6
 80094ee:	f000 fa19 	bl	8009924 <_free_r>
 80094f2:	2300      	movs	r3, #0
 80094f4:	6363      	str	r3, [r4, #52]	; 0x34
 80094f6:	89a3      	ldrh	r3, [r4, #12]
 80094f8:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 80094fc:	81a3      	strh	r3, [r4, #12]
 80094fe:	2300      	movs	r3, #0
 8009500:	6063      	str	r3, [r4, #4]
 8009502:	6923      	ldr	r3, [r4, #16]
 8009504:	6023      	str	r3, [r4, #0]
 8009506:	89a3      	ldrh	r3, [r4, #12]
 8009508:	f043 0308 	orr.w	r3, r3, #8
 800950c:	81a3      	strh	r3, [r4, #12]
 800950e:	6923      	ldr	r3, [r4, #16]
 8009510:	b94b      	cbnz	r3, 8009526 <__swsetup_r+0x9a>
 8009512:	89a3      	ldrh	r3, [r4, #12]
 8009514:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8009518:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800951c:	d003      	beq.n	8009526 <__swsetup_r+0x9a>
 800951e:	4621      	mov	r1, r4
 8009520:	4630      	mov	r0, r6
 8009522:	f000 f9bf 	bl	80098a4 <__smakebuf_r>
 8009526:	89a2      	ldrh	r2, [r4, #12]
 8009528:	f012 0301 	ands.w	r3, r2, #1
 800952c:	d00c      	beq.n	8009548 <__swsetup_r+0xbc>
 800952e:	2300      	movs	r3, #0
 8009530:	60a3      	str	r3, [r4, #8]
 8009532:	6963      	ldr	r3, [r4, #20]
 8009534:	425b      	negs	r3, r3
 8009536:	61a3      	str	r3, [r4, #24]
 8009538:	6923      	ldr	r3, [r4, #16]
 800953a:	b953      	cbnz	r3, 8009552 <__swsetup_r+0xc6>
 800953c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009540:	f013 0080 	ands.w	r0, r3, #128	; 0x80
 8009544:	d1ba      	bne.n	80094bc <__swsetup_r+0x30>
 8009546:	bd70      	pop	{r4, r5, r6, pc}
 8009548:	0792      	lsls	r2, r2, #30
 800954a:	bf58      	it	pl
 800954c:	6963      	ldrpl	r3, [r4, #20]
 800954e:	60a3      	str	r3, [r4, #8]
 8009550:	e7f2      	b.n	8009538 <__swsetup_r+0xac>
 8009552:	2000      	movs	r0, #0
 8009554:	e7f7      	b.n	8009546 <__swsetup_r+0xba>
 8009556:	bf00      	nop
 8009558:	20000b64 	.word	0x20000b64
 800955c:	0800a740 	.word	0x0800a740
 8009560:	0800a760 	.word	0x0800a760
 8009564:	0800a720 	.word	0x0800a720

08009568 <__sflush_r>:
 8009568:	898a      	ldrh	r2, [r1, #12]
 800956a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800956e:	4605      	mov	r5, r0
 8009570:	0710      	lsls	r0, r2, #28
 8009572:	460c      	mov	r4, r1
 8009574:	d458      	bmi.n	8009628 <__sflush_r+0xc0>
 8009576:	684b      	ldr	r3, [r1, #4]
 8009578:	2b00      	cmp	r3, #0
 800957a:	dc05      	bgt.n	8009588 <__sflush_r+0x20>
 800957c:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800957e:	2b00      	cmp	r3, #0
 8009580:	dc02      	bgt.n	8009588 <__sflush_r+0x20>
 8009582:	2000      	movs	r0, #0
 8009584:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009588:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800958a:	2e00      	cmp	r6, #0
 800958c:	d0f9      	beq.n	8009582 <__sflush_r+0x1a>
 800958e:	2300      	movs	r3, #0
 8009590:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8009594:	682f      	ldr	r7, [r5, #0]
 8009596:	6a21      	ldr	r1, [r4, #32]
 8009598:	602b      	str	r3, [r5, #0]
 800959a:	d032      	beq.n	8009602 <__sflush_r+0x9a>
 800959c:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800959e:	89a3      	ldrh	r3, [r4, #12]
 80095a0:	075a      	lsls	r2, r3, #29
 80095a2:	d505      	bpl.n	80095b0 <__sflush_r+0x48>
 80095a4:	6863      	ldr	r3, [r4, #4]
 80095a6:	1ac0      	subs	r0, r0, r3
 80095a8:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80095aa:	b10b      	cbz	r3, 80095b0 <__sflush_r+0x48>
 80095ac:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80095ae:	1ac0      	subs	r0, r0, r3
 80095b0:	2300      	movs	r3, #0
 80095b2:	4602      	mov	r2, r0
 80095b4:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80095b6:	6a21      	ldr	r1, [r4, #32]
 80095b8:	4628      	mov	r0, r5
 80095ba:	47b0      	blx	r6
 80095bc:	1c43      	adds	r3, r0, #1
 80095be:	89a3      	ldrh	r3, [r4, #12]
 80095c0:	d106      	bne.n	80095d0 <__sflush_r+0x68>
 80095c2:	6829      	ldr	r1, [r5, #0]
 80095c4:	291d      	cmp	r1, #29
 80095c6:	d848      	bhi.n	800965a <__sflush_r+0xf2>
 80095c8:	4a29      	ldr	r2, [pc, #164]	; (8009670 <__sflush_r+0x108>)
 80095ca:	40ca      	lsrs	r2, r1
 80095cc:	07d6      	lsls	r6, r2, #31
 80095ce:	d544      	bpl.n	800965a <__sflush_r+0xf2>
 80095d0:	2200      	movs	r2, #0
 80095d2:	6062      	str	r2, [r4, #4]
 80095d4:	04d9      	lsls	r1, r3, #19
 80095d6:	6922      	ldr	r2, [r4, #16]
 80095d8:	6022      	str	r2, [r4, #0]
 80095da:	d504      	bpl.n	80095e6 <__sflush_r+0x7e>
 80095dc:	1c42      	adds	r2, r0, #1
 80095de:	d101      	bne.n	80095e4 <__sflush_r+0x7c>
 80095e0:	682b      	ldr	r3, [r5, #0]
 80095e2:	b903      	cbnz	r3, 80095e6 <__sflush_r+0x7e>
 80095e4:	6560      	str	r0, [r4, #84]	; 0x54
 80095e6:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80095e8:	602f      	str	r7, [r5, #0]
 80095ea:	2900      	cmp	r1, #0
 80095ec:	d0c9      	beq.n	8009582 <__sflush_r+0x1a>
 80095ee:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80095f2:	4299      	cmp	r1, r3
 80095f4:	d002      	beq.n	80095fc <__sflush_r+0x94>
 80095f6:	4628      	mov	r0, r5
 80095f8:	f000 f994 	bl	8009924 <_free_r>
 80095fc:	2000      	movs	r0, #0
 80095fe:	6360      	str	r0, [r4, #52]	; 0x34
 8009600:	e7c0      	b.n	8009584 <__sflush_r+0x1c>
 8009602:	2301      	movs	r3, #1
 8009604:	4628      	mov	r0, r5
 8009606:	47b0      	blx	r6
 8009608:	1c41      	adds	r1, r0, #1
 800960a:	d1c8      	bne.n	800959e <__sflush_r+0x36>
 800960c:	682b      	ldr	r3, [r5, #0]
 800960e:	2b00      	cmp	r3, #0
 8009610:	d0c5      	beq.n	800959e <__sflush_r+0x36>
 8009612:	2b1d      	cmp	r3, #29
 8009614:	d001      	beq.n	800961a <__sflush_r+0xb2>
 8009616:	2b16      	cmp	r3, #22
 8009618:	d101      	bne.n	800961e <__sflush_r+0xb6>
 800961a:	602f      	str	r7, [r5, #0]
 800961c:	e7b1      	b.n	8009582 <__sflush_r+0x1a>
 800961e:	89a3      	ldrh	r3, [r4, #12]
 8009620:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8009624:	81a3      	strh	r3, [r4, #12]
 8009626:	e7ad      	b.n	8009584 <__sflush_r+0x1c>
 8009628:	690f      	ldr	r7, [r1, #16]
 800962a:	2f00      	cmp	r7, #0
 800962c:	d0a9      	beq.n	8009582 <__sflush_r+0x1a>
 800962e:	0793      	lsls	r3, r2, #30
 8009630:	680e      	ldr	r6, [r1, #0]
 8009632:	bf08      	it	eq
 8009634:	694b      	ldreq	r3, [r1, #20]
 8009636:	600f      	str	r7, [r1, #0]
 8009638:	bf18      	it	ne
 800963a:	2300      	movne	r3, #0
 800963c:	eba6 0807 	sub.w	r8, r6, r7
 8009640:	608b      	str	r3, [r1, #8]
 8009642:	f1b8 0f00 	cmp.w	r8, #0
 8009646:	dd9c      	ble.n	8009582 <__sflush_r+0x1a>
 8009648:	4643      	mov	r3, r8
 800964a:	463a      	mov	r2, r7
 800964c:	6a21      	ldr	r1, [r4, #32]
 800964e:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8009650:	4628      	mov	r0, r5
 8009652:	47b0      	blx	r6
 8009654:	2800      	cmp	r0, #0
 8009656:	dc06      	bgt.n	8009666 <__sflush_r+0xfe>
 8009658:	89a3      	ldrh	r3, [r4, #12]
 800965a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800965e:	81a3      	strh	r3, [r4, #12]
 8009660:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8009664:	e78e      	b.n	8009584 <__sflush_r+0x1c>
 8009666:	4407      	add	r7, r0
 8009668:	eba8 0800 	sub.w	r8, r8, r0
 800966c:	e7e9      	b.n	8009642 <__sflush_r+0xda>
 800966e:	bf00      	nop
 8009670:	20400001 	.word	0x20400001

08009674 <_fflush_r>:
 8009674:	b538      	push	{r3, r4, r5, lr}
 8009676:	690b      	ldr	r3, [r1, #16]
 8009678:	4605      	mov	r5, r0
 800967a:	460c      	mov	r4, r1
 800967c:	b1db      	cbz	r3, 80096b6 <_fflush_r+0x42>
 800967e:	b118      	cbz	r0, 8009688 <_fflush_r+0x14>
 8009680:	6983      	ldr	r3, [r0, #24]
 8009682:	b90b      	cbnz	r3, 8009688 <_fflush_r+0x14>
 8009684:	f000 f860 	bl	8009748 <__sinit>
 8009688:	4b0c      	ldr	r3, [pc, #48]	; (80096bc <_fflush_r+0x48>)
 800968a:	429c      	cmp	r4, r3
 800968c:	d109      	bne.n	80096a2 <_fflush_r+0x2e>
 800968e:	686c      	ldr	r4, [r5, #4]
 8009690:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009694:	b17b      	cbz	r3, 80096b6 <_fflush_r+0x42>
 8009696:	4621      	mov	r1, r4
 8009698:	4628      	mov	r0, r5
 800969a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800969e:	f7ff bf63 	b.w	8009568 <__sflush_r>
 80096a2:	4b07      	ldr	r3, [pc, #28]	; (80096c0 <_fflush_r+0x4c>)
 80096a4:	429c      	cmp	r4, r3
 80096a6:	d101      	bne.n	80096ac <_fflush_r+0x38>
 80096a8:	68ac      	ldr	r4, [r5, #8]
 80096aa:	e7f1      	b.n	8009690 <_fflush_r+0x1c>
 80096ac:	4b05      	ldr	r3, [pc, #20]	; (80096c4 <_fflush_r+0x50>)
 80096ae:	429c      	cmp	r4, r3
 80096b0:	bf08      	it	eq
 80096b2:	68ec      	ldreq	r4, [r5, #12]
 80096b4:	e7ec      	b.n	8009690 <_fflush_r+0x1c>
 80096b6:	2000      	movs	r0, #0
 80096b8:	bd38      	pop	{r3, r4, r5, pc}
 80096ba:	bf00      	nop
 80096bc:	0800a740 	.word	0x0800a740
 80096c0:	0800a760 	.word	0x0800a760
 80096c4:	0800a720 	.word	0x0800a720

080096c8 <std>:
 80096c8:	2300      	movs	r3, #0
 80096ca:	b510      	push	{r4, lr}
 80096cc:	4604      	mov	r4, r0
 80096ce:	e9c0 3300 	strd	r3, r3, [r0]
 80096d2:	6083      	str	r3, [r0, #8]
 80096d4:	8181      	strh	r1, [r0, #12]
 80096d6:	6643      	str	r3, [r0, #100]	; 0x64
 80096d8:	81c2      	strh	r2, [r0, #14]
 80096da:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80096de:	6183      	str	r3, [r0, #24]
 80096e0:	4619      	mov	r1, r3
 80096e2:	2208      	movs	r2, #8
 80096e4:	305c      	adds	r0, #92	; 0x5c
 80096e6:	f7ff fddf 	bl	80092a8 <memset>
 80096ea:	4b05      	ldr	r3, [pc, #20]	; (8009700 <std+0x38>)
 80096ec:	6263      	str	r3, [r4, #36]	; 0x24
 80096ee:	4b05      	ldr	r3, [pc, #20]	; (8009704 <std+0x3c>)
 80096f0:	62a3      	str	r3, [r4, #40]	; 0x28
 80096f2:	4b05      	ldr	r3, [pc, #20]	; (8009708 <std+0x40>)
 80096f4:	62e3      	str	r3, [r4, #44]	; 0x2c
 80096f6:	4b05      	ldr	r3, [pc, #20]	; (800970c <std+0x44>)
 80096f8:	6224      	str	r4, [r4, #32]
 80096fa:	6323      	str	r3, [r4, #48]	; 0x30
 80096fc:	bd10      	pop	{r4, pc}
 80096fe:	bf00      	nop
 8009700:	0800a049 	.word	0x0800a049
 8009704:	0800a06b 	.word	0x0800a06b
 8009708:	0800a0a3 	.word	0x0800a0a3
 800970c:	0800a0c7 	.word	0x0800a0c7

08009710 <_cleanup_r>:
 8009710:	4901      	ldr	r1, [pc, #4]	; (8009718 <_cleanup_r+0x8>)
 8009712:	f000 b885 	b.w	8009820 <_fwalk_reent>
 8009716:	bf00      	nop
 8009718:	08009675 	.word	0x08009675

0800971c <__sfmoreglue>:
 800971c:	b570      	push	{r4, r5, r6, lr}
 800971e:	1e4a      	subs	r2, r1, #1
 8009720:	2568      	movs	r5, #104	; 0x68
 8009722:	4355      	muls	r5, r2
 8009724:	460e      	mov	r6, r1
 8009726:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800972a:	f000 f949 	bl	80099c0 <_malloc_r>
 800972e:	4604      	mov	r4, r0
 8009730:	b140      	cbz	r0, 8009744 <__sfmoreglue+0x28>
 8009732:	2100      	movs	r1, #0
 8009734:	e9c0 1600 	strd	r1, r6, [r0]
 8009738:	300c      	adds	r0, #12
 800973a:	60a0      	str	r0, [r4, #8]
 800973c:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8009740:	f7ff fdb2 	bl	80092a8 <memset>
 8009744:	4620      	mov	r0, r4
 8009746:	bd70      	pop	{r4, r5, r6, pc}

08009748 <__sinit>:
 8009748:	6983      	ldr	r3, [r0, #24]
 800974a:	b510      	push	{r4, lr}
 800974c:	4604      	mov	r4, r0
 800974e:	bb33      	cbnz	r3, 800979e <__sinit+0x56>
 8009750:	e9c0 3312 	strd	r3, r3, [r0, #72]	; 0x48
 8009754:	6503      	str	r3, [r0, #80]	; 0x50
 8009756:	4b12      	ldr	r3, [pc, #72]	; (80097a0 <__sinit+0x58>)
 8009758:	4a12      	ldr	r2, [pc, #72]	; (80097a4 <__sinit+0x5c>)
 800975a:	681b      	ldr	r3, [r3, #0]
 800975c:	6282      	str	r2, [r0, #40]	; 0x28
 800975e:	4298      	cmp	r0, r3
 8009760:	bf04      	itt	eq
 8009762:	2301      	moveq	r3, #1
 8009764:	6183      	streq	r3, [r0, #24]
 8009766:	f000 f81f 	bl	80097a8 <__sfp>
 800976a:	6060      	str	r0, [r4, #4]
 800976c:	4620      	mov	r0, r4
 800976e:	f000 f81b 	bl	80097a8 <__sfp>
 8009772:	60a0      	str	r0, [r4, #8]
 8009774:	4620      	mov	r0, r4
 8009776:	f000 f817 	bl	80097a8 <__sfp>
 800977a:	2200      	movs	r2, #0
 800977c:	60e0      	str	r0, [r4, #12]
 800977e:	2104      	movs	r1, #4
 8009780:	6860      	ldr	r0, [r4, #4]
 8009782:	f7ff ffa1 	bl	80096c8 <std>
 8009786:	2201      	movs	r2, #1
 8009788:	2109      	movs	r1, #9
 800978a:	68a0      	ldr	r0, [r4, #8]
 800978c:	f7ff ff9c 	bl	80096c8 <std>
 8009790:	2202      	movs	r2, #2
 8009792:	2112      	movs	r1, #18
 8009794:	68e0      	ldr	r0, [r4, #12]
 8009796:	f7ff ff97 	bl	80096c8 <std>
 800979a:	2301      	movs	r3, #1
 800979c:	61a3      	str	r3, [r4, #24]
 800979e:	bd10      	pop	{r4, pc}
 80097a0:	0800a71c 	.word	0x0800a71c
 80097a4:	08009711 	.word	0x08009711

080097a8 <__sfp>:
 80097a8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80097aa:	4b1b      	ldr	r3, [pc, #108]	; (8009818 <__sfp+0x70>)
 80097ac:	681e      	ldr	r6, [r3, #0]
 80097ae:	69b3      	ldr	r3, [r6, #24]
 80097b0:	4607      	mov	r7, r0
 80097b2:	b913      	cbnz	r3, 80097ba <__sfp+0x12>
 80097b4:	4630      	mov	r0, r6
 80097b6:	f7ff ffc7 	bl	8009748 <__sinit>
 80097ba:	3648      	adds	r6, #72	; 0x48
 80097bc:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 80097c0:	3b01      	subs	r3, #1
 80097c2:	d503      	bpl.n	80097cc <__sfp+0x24>
 80097c4:	6833      	ldr	r3, [r6, #0]
 80097c6:	b133      	cbz	r3, 80097d6 <__sfp+0x2e>
 80097c8:	6836      	ldr	r6, [r6, #0]
 80097ca:	e7f7      	b.n	80097bc <__sfp+0x14>
 80097cc:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 80097d0:	b16d      	cbz	r5, 80097ee <__sfp+0x46>
 80097d2:	3468      	adds	r4, #104	; 0x68
 80097d4:	e7f4      	b.n	80097c0 <__sfp+0x18>
 80097d6:	2104      	movs	r1, #4
 80097d8:	4638      	mov	r0, r7
 80097da:	f7ff ff9f 	bl	800971c <__sfmoreglue>
 80097de:	6030      	str	r0, [r6, #0]
 80097e0:	2800      	cmp	r0, #0
 80097e2:	d1f1      	bne.n	80097c8 <__sfp+0x20>
 80097e4:	230c      	movs	r3, #12
 80097e6:	603b      	str	r3, [r7, #0]
 80097e8:	4604      	mov	r4, r0
 80097ea:	4620      	mov	r0, r4
 80097ec:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80097ee:	4b0b      	ldr	r3, [pc, #44]	; (800981c <__sfp+0x74>)
 80097f0:	6665      	str	r5, [r4, #100]	; 0x64
 80097f2:	e9c4 5500 	strd	r5, r5, [r4]
 80097f6:	60a5      	str	r5, [r4, #8]
 80097f8:	e9c4 3503 	strd	r3, r5, [r4, #12]
 80097fc:	e9c4 5505 	strd	r5, r5, [r4, #20]
 8009800:	2208      	movs	r2, #8
 8009802:	4629      	mov	r1, r5
 8009804:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8009808:	f7ff fd4e 	bl	80092a8 <memset>
 800980c:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8009810:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8009814:	e7e9      	b.n	80097ea <__sfp+0x42>
 8009816:	bf00      	nop
 8009818:	0800a71c 	.word	0x0800a71c
 800981c:	ffff0001 	.word	0xffff0001

08009820 <_fwalk_reent>:
 8009820:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8009824:	4680      	mov	r8, r0
 8009826:	4689      	mov	r9, r1
 8009828:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800982c:	2600      	movs	r6, #0
 800982e:	b914      	cbnz	r4, 8009836 <_fwalk_reent+0x16>
 8009830:	4630      	mov	r0, r6
 8009832:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8009836:	e9d4 7501 	ldrd	r7, r5, [r4, #4]
 800983a:	3f01      	subs	r7, #1
 800983c:	d501      	bpl.n	8009842 <_fwalk_reent+0x22>
 800983e:	6824      	ldr	r4, [r4, #0]
 8009840:	e7f5      	b.n	800982e <_fwalk_reent+0xe>
 8009842:	89ab      	ldrh	r3, [r5, #12]
 8009844:	2b01      	cmp	r3, #1
 8009846:	d907      	bls.n	8009858 <_fwalk_reent+0x38>
 8009848:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800984c:	3301      	adds	r3, #1
 800984e:	d003      	beq.n	8009858 <_fwalk_reent+0x38>
 8009850:	4629      	mov	r1, r5
 8009852:	4640      	mov	r0, r8
 8009854:	47c8      	blx	r9
 8009856:	4306      	orrs	r6, r0
 8009858:	3568      	adds	r5, #104	; 0x68
 800985a:	e7ee      	b.n	800983a <_fwalk_reent+0x1a>

0800985c <__swhatbuf_r>:
 800985c:	b570      	push	{r4, r5, r6, lr}
 800985e:	460e      	mov	r6, r1
 8009860:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009864:	2900      	cmp	r1, #0
 8009866:	b096      	sub	sp, #88	; 0x58
 8009868:	4614      	mov	r4, r2
 800986a:	461d      	mov	r5, r3
 800986c:	da07      	bge.n	800987e <__swhatbuf_r+0x22>
 800986e:	2300      	movs	r3, #0
 8009870:	602b      	str	r3, [r5, #0]
 8009872:	89b3      	ldrh	r3, [r6, #12]
 8009874:	061a      	lsls	r2, r3, #24
 8009876:	d410      	bmi.n	800989a <__swhatbuf_r+0x3e>
 8009878:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800987c:	e00e      	b.n	800989c <__swhatbuf_r+0x40>
 800987e:	466a      	mov	r2, sp
 8009880:	f000 fc48 	bl	800a114 <_fstat_r>
 8009884:	2800      	cmp	r0, #0
 8009886:	dbf2      	blt.n	800986e <__swhatbuf_r+0x12>
 8009888:	9a01      	ldr	r2, [sp, #4]
 800988a:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800988e:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8009892:	425a      	negs	r2, r3
 8009894:	415a      	adcs	r2, r3
 8009896:	602a      	str	r2, [r5, #0]
 8009898:	e7ee      	b.n	8009878 <__swhatbuf_r+0x1c>
 800989a:	2340      	movs	r3, #64	; 0x40
 800989c:	2000      	movs	r0, #0
 800989e:	6023      	str	r3, [r4, #0]
 80098a0:	b016      	add	sp, #88	; 0x58
 80098a2:	bd70      	pop	{r4, r5, r6, pc}

080098a4 <__smakebuf_r>:
 80098a4:	898b      	ldrh	r3, [r1, #12]
 80098a6:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80098a8:	079d      	lsls	r5, r3, #30
 80098aa:	4606      	mov	r6, r0
 80098ac:	460c      	mov	r4, r1
 80098ae:	d507      	bpl.n	80098c0 <__smakebuf_r+0x1c>
 80098b0:	f104 0347 	add.w	r3, r4, #71	; 0x47
 80098b4:	6023      	str	r3, [r4, #0]
 80098b6:	6123      	str	r3, [r4, #16]
 80098b8:	2301      	movs	r3, #1
 80098ba:	6163      	str	r3, [r4, #20]
 80098bc:	b002      	add	sp, #8
 80098be:	bd70      	pop	{r4, r5, r6, pc}
 80098c0:	ab01      	add	r3, sp, #4
 80098c2:	466a      	mov	r2, sp
 80098c4:	f7ff ffca 	bl	800985c <__swhatbuf_r>
 80098c8:	9900      	ldr	r1, [sp, #0]
 80098ca:	4605      	mov	r5, r0
 80098cc:	4630      	mov	r0, r6
 80098ce:	f000 f877 	bl	80099c0 <_malloc_r>
 80098d2:	b948      	cbnz	r0, 80098e8 <__smakebuf_r+0x44>
 80098d4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80098d8:	059a      	lsls	r2, r3, #22
 80098da:	d4ef      	bmi.n	80098bc <__smakebuf_r+0x18>
 80098dc:	f023 0303 	bic.w	r3, r3, #3
 80098e0:	f043 0302 	orr.w	r3, r3, #2
 80098e4:	81a3      	strh	r3, [r4, #12]
 80098e6:	e7e3      	b.n	80098b0 <__smakebuf_r+0xc>
 80098e8:	4b0d      	ldr	r3, [pc, #52]	; (8009920 <__smakebuf_r+0x7c>)
 80098ea:	62b3      	str	r3, [r6, #40]	; 0x28
 80098ec:	89a3      	ldrh	r3, [r4, #12]
 80098ee:	6020      	str	r0, [r4, #0]
 80098f0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80098f4:	81a3      	strh	r3, [r4, #12]
 80098f6:	9b00      	ldr	r3, [sp, #0]
 80098f8:	6163      	str	r3, [r4, #20]
 80098fa:	9b01      	ldr	r3, [sp, #4]
 80098fc:	6120      	str	r0, [r4, #16]
 80098fe:	b15b      	cbz	r3, 8009918 <__smakebuf_r+0x74>
 8009900:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8009904:	4630      	mov	r0, r6
 8009906:	f000 fc17 	bl	800a138 <_isatty_r>
 800990a:	b128      	cbz	r0, 8009918 <__smakebuf_r+0x74>
 800990c:	89a3      	ldrh	r3, [r4, #12]
 800990e:	f023 0303 	bic.w	r3, r3, #3
 8009912:	f043 0301 	orr.w	r3, r3, #1
 8009916:	81a3      	strh	r3, [r4, #12]
 8009918:	89a3      	ldrh	r3, [r4, #12]
 800991a:	431d      	orrs	r5, r3
 800991c:	81a5      	strh	r5, [r4, #12]
 800991e:	e7cd      	b.n	80098bc <__smakebuf_r+0x18>
 8009920:	08009711 	.word	0x08009711

08009924 <_free_r>:
 8009924:	b538      	push	{r3, r4, r5, lr}
 8009926:	4605      	mov	r5, r0
 8009928:	2900      	cmp	r1, #0
 800992a:	d045      	beq.n	80099b8 <_free_r+0x94>
 800992c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8009930:	1f0c      	subs	r4, r1, #4
 8009932:	2b00      	cmp	r3, #0
 8009934:	bfb8      	it	lt
 8009936:	18e4      	addlt	r4, r4, r3
 8009938:	f000 fc44 	bl	800a1c4 <__malloc_lock>
 800993c:	4a1f      	ldr	r2, [pc, #124]	; (80099bc <_free_r+0x98>)
 800993e:	6813      	ldr	r3, [r2, #0]
 8009940:	4610      	mov	r0, r2
 8009942:	b933      	cbnz	r3, 8009952 <_free_r+0x2e>
 8009944:	6063      	str	r3, [r4, #4]
 8009946:	6014      	str	r4, [r2, #0]
 8009948:	4628      	mov	r0, r5
 800994a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800994e:	f000 bc3a 	b.w	800a1c6 <__malloc_unlock>
 8009952:	42a3      	cmp	r3, r4
 8009954:	d90c      	bls.n	8009970 <_free_r+0x4c>
 8009956:	6821      	ldr	r1, [r4, #0]
 8009958:	1862      	adds	r2, r4, r1
 800995a:	4293      	cmp	r3, r2
 800995c:	bf04      	itt	eq
 800995e:	681a      	ldreq	r2, [r3, #0]
 8009960:	685b      	ldreq	r3, [r3, #4]
 8009962:	6063      	str	r3, [r4, #4]
 8009964:	bf04      	itt	eq
 8009966:	1852      	addeq	r2, r2, r1
 8009968:	6022      	streq	r2, [r4, #0]
 800996a:	6004      	str	r4, [r0, #0]
 800996c:	e7ec      	b.n	8009948 <_free_r+0x24>
 800996e:	4613      	mov	r3, r2
 8009970:	685a      	ldr	r2, [r3, #4]
 8009972:	b10a      	cbz	r2, 8009978 <_free_r+0x54>
 8009974:	42a2      	cmp	r2, r4
 8009976:	d9fa      	bls.n	800996e <_free_r+0x4a>
 8009978:	6819      	ldr	r1, [r3, #0]
 800997a:	1858      	adds	r0, r3, r1
 800997c:	42a0      	cmp	r0, r4
 800997e:	d10b      	bne.n	8009998 <_free_r+0x74>
 8009980:	6820      	ldr	r0, [r4, #0]
 8009982:	4401      	add	r1, r0
 8009984:	1858      	adds	r0, r3, r1
 8009986:	4282      	cmp	r2, r0
 8009988:	6019      	str	r1, [r3, #0]
 800998a:	d1dd      	bne.n	8009948 <_free_r+0x24>
 800998c:	6810      	ldr	r0, [r2, #0]
 800998e:	6852      	ldr	r2, [r2, #4]
 8009990:	605a      	str	r2, [r3, #4]
 8009992:	4401      	add	r1, r0
 8009994:	6019      	str	r1, [r3, #0]
 8009996:	e7d7      	b.n	8009948 <_free_r+0x24>
 8009998:	d902      	bls.n	80099a0 <_free_r+0x7c>
 800999a:	230c      	movs	r3, #12
 800999c:	602b      	str	r3, [r5, #0]
 800999e:	e7d3      	b.n	8009948 <_free_r+0x24>
 80099a0:	6820      	ldr	r0, [r4, #0]
 80099a2:	1821      	adds	r1, r4, r0
 80099a4:	428a      	cmp	r2, r1
 80099a6:	bf04      	itt	eq
 80099a8:	6811      	ldreq	r1, [r2, #0]
 80099aa:	6852      	ldreq	r2, [r2, #4]
 80099ac:	6062      	str	r2, [r4, #4]
 80099ae:	bf04      	itt	eq
 80099b0:	1809      	addeq	r1, r1, r0
 80099b2:	6021      	streq	r1, [r4, #0]
 80099b4:	605c      	str	r4, [r3, #4]
 80099b6:	e7c7      	b.n	8009948 <_free_r+0x24>
 80099b8:	bd38      	pop	{r3, r4, r5, pc}
 80099ba:	bf00      	nop
 80099bc:	20000c00 	.word	0x20000c00

080099c0 <_malloc_r>:
 80099c0:	b570      	push	{r4, r5, r6, lr}
 80099c2:	1ccd      	adds	r5, r1, #3
 80099c4:	f025 0503 	bic.w	r5, r5, #3
 80099c8:	3508      	adds	r5, #8
 80099ca:	2d0c      	cmp	r5, #12
 80099cc:	bf38      	it	cc
 80099ce:	250c      	movcc	r5, #12
 80099d0:	2d00      	cmp	r5, #0
 80099d2:	4606      	mov	r6, r0
 80099d4:	db01      	blt.n	80099da <_malloc_r+0x1a>
 80099d6:	42a9      	cmp	r1, r5
 80099d8:	d903      	bls.n	80099e2 <_malloc_r+0x22>
 80099da:	230c      	movs	r3, #12
 80099dc:	6033      	str	r3, [r6, #0]
 80099de:	2000      	movs	r0, #0
 80099e0:	bd70      	pop	{r4, r5, r6, pc}
 80099e2:	f000 fbef 	bl	800a1c4 <__malloc_lock>
 80099e6:	4a21      	ldr	r2, [pc, #132]	; (8009a6c <_malloc_r+0xac>)
 80099e8:	6814      	ldr	r4, [r2, #0]
 80099ea:	4621      	mov	r1, r4
 80099ec:	b991      	cbnz	r1, 8009a14 <_malloc_r+0x54>
 80099ee:	4c20      	ldr	r4, [pc, #128]	; (8009a70 <_malloc_r+0xb0>)
 80099f0:	6823      	ldr	r3, [r4, #0]
 80099f2:	b91b      	cbnz	r3, 80099fc <_malloc_r+0x3c>
 80099f4:	4630      	mov	r0, r6
 80099f6:	f000 fb17 	bl	800a028 <_sbrk_r>
 80099fa:	6020      	str	r0, [r4, #0]
 80099fc:	4629      	mov	r1, r5
 80099fe:	4630      	mov	r0, r6
 8009a00:	f000 fb12 	bl	800a028 <_sbrk_r>
 8009a04:	1c43      	adds	r3, r0, #1
 8009a06:	d124      	bne.n	8009a52 <_malloc_r+0x92>
 8009a08:	230c      	movs	r3, #12
 8009a0a:	6033      	str	r3, [r6, #0]
 8009a0c:	4630      	mov	r0, r6
 8009a0e:	f000 fbda 	bl	800a1c6 <__malloc_unlock>
 8009a12:	e7e4      	b.n	80099de <_malloc_r+0x1e>
 8009a14:	680b      	ldr	r3, [r1, #0]
 8009a16:	1b5b      	subs	r3, r3, r5
 8009a18:	d418      	bmi.n	8009a4c <_malloc_r+0x8c>
 8009a1a:	2b0b      	cmp	r3, #11
 8009a1c:	d90f      	bls.n	8009a3e <_malloc_r+0x7e>
 8009a1e:	600b      	str	r3, [r1, #0]
 8009a20:	50cd      	str	r5, [r1, r3]
 8009a22:	18cc      	adds	r4, r1, r3
 8009a24:	4630      	mov	r0, r6
 8009a26:	f000 fbce 	bl	800a1c6 <__malloc_unlock>
 8009a2a:	f104 000b 	add.w	r0, r4, #11
 8009a2e:	1d23      	adds	r3, r4, #4
 8009a30:	f020 0007 	bic.w	r0, r0, #7
 8009a34:	1ac3      	subs	r3, r0, r3
 8009a36:	d0d3      	beq.n	80099e0 <_malloc_r+0x20>
 8009a38:	425a      	negs	r2, r3
 8009a3a:	50e2      	str	r2, [r4, r3]
 8009a3c:	e7d0      	b.n	80099e0 <_malloc_r+0x20>
 8009a3e:	428c      	cmp	r4, r1
 8009a40:	684b      	ldr	r3, [r1, #4]
 8009a42:	bf16      	itet	ne
 8009a44:	6063      	strne	r3, [r4, #4]
 8009a46:	6013      	streq	r3, [r2, #0]
 8009a48:	460c      	movne	r4, r1
 8009a4a:	e7eb      	b.n	8009a24 <_malloc_r+0x64>
 8009a4c:	460c      	mov	r4, r1
 8009a4e:	6849      	ldr	r1, [r1, #4]
 8009a50:	e7cc      	b.n	80099ec <_malloc_r+0x2c>
 8009a52:	1cc4      	adds	r4, r0, #3
 8009a54:	f024 0403 	bic.w	r4, r4, #3
 8009a58:	42a0      	cmp	r0, r4
 8009a5a:	d005      	beq.n	8009a68 <_malloc_r+0xa8>
 8009a5c:	1a21      	subs	r1, r4, r0
 8009a5e:	4630      	mov	r0, r6
 8009a60:	f000 fae2 	bl	800a028 <_sbrk_r>
 8009a64:	3001      	adds	r0, #1
 8009a66:	d0cf      	beq.n	8009a08 <_malloc_r+0x48>
 8009a68:	6025      	str	r5, [r4, #0]
 8009a6a:	e7db      	b.n	8009a24 <_malloc_r+0x64>
 8009a6c:	20000c00 	.word	0x20000c00
 8009a70:	20000c04 	.word	0x20000c04

08009a74 <__ssputs_r>:
 8009a74:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009a78:	688e      	ldr	r6, [r1, #8]
 8009a7a:	429e      	cmp	r6, r3
 8009a7c:	4682      	mov	sl, r0
 8009a7e:	460c      	mov	r4, r1
 8009a80:	4690      	mov	r8, r2
 8009a82:	4699      	mov	r9, r3
 8009a84:	d837      	bhi.n	8009af6 <__ssputs_r+0x82>
 8009a86:	898a      	ldrh	r2, [r1, #12]
 8009a88:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8009a8c:	d031      	beq.n	8009af2 <__ssputs_r+0x7e>
 8009a8e:	6825      	ldr	r5, [r4, #0]
 8009a90:	6909      	ldr	r1, [r1, #16]
 8009a92:	1a6f      	subs	r7, r5, r1
 8009a94:	6965      	ldr	r5, [r4, #20]
 8009a96:	2302      	movs	r3, #2
 8009a98:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8009a9c:	fb95 f5f3 	sdiv	r5, r5, r3
 8009aa0:	f109 0301 	add.w	r3, r9, #1
 8009aa4:	443b      	add	r3, r7
 8009aa6:	429d      	cmp	r5, r3
 8009aa8:	bf38      	it	cc
 8009aaa:	461d      	movcc	r5, r3
 8009aac:	0553      	lsls	r3, r2, #21
 8009aae:	d530      	bpl.n	8009b12 <__ssputs_r+0x9e>
 8009ab0:	4629      	mov	r1, r5
 8009ab2:	f7ff ff85 	bl	80099c0 <_malloc_r>
 8009ab6:	4606      	mov	r6, r0
 8009ab8:	b950      	cbnz	r0, 8009ad0 <__ssputs_r+0x5c>
 8009aba:	230c      	movs	r3, #12
 8009abc:	f8ca 3000 	str.w	r3, [sl]
 8009ac0:	89a3      	ldrh	r3, [r4, #12]
 8009ac2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8009ac6:	81a3      	strh	r3, [r4, #12]
 8009ac8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8009acc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009ad0:	463a      	mov	r2, r7
 8009ad2:	6921      	ldr	r1, [r4, #16]
 8009ad4:	f000 fb52 	bl	800a17c <memcpy>
 8009ad8:	89a3      	ldrh	r3, [r4, #12]
 8009ada:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8009ade:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009ae2:	81a3      	strh	r3, [r4, #12]
 8009ae4:	6126      	str	r6, [r4, #16]
 8009ae6:	6165      	str	r5, [r4, #20]
 8009ae8:	443e      	add	r6, r7
 8009aea:	1bed      	subs	r5, r5, r7
 8009aec:	6026      	str	r6, [r4, #0]
 8009aee:	60a5      	str	r5, [r4, #8]
 8009af0:	464e      	mov	r6, r9
 8009af2:	454e      	cmp	r6, r9
 8009af4:	d900      	bls.n	8009af8 <__ssputs_r+0x84>
 8009af6:	464e      	mov	r6, r9
 8009af8:	4632      	mov	r2, r6
 8009afa:	4641      	mov	r1, r8
 8009afc:	6820      	ldr	r0, [r4, #0]
 8009afe:	f000 fb48 	bl	800a192 <memmove>
 8009b02:	68a3      	ldr	r3, [r4, #8]
 8009b04:	1b9b      	subs	r3, r3, r6
 8009b06:	60a3      	str	r3, [r4, #8]
 8009b08:	6823      	ldr	r3, [r4, #0]
 8009b0a:	441e      	add	r6, r3
 8009b0c:	6026      	str	r6, [r4, #0]
 8009b0e:	2000      	movs	r0, #0
 8009b10:	e7dc      	b.n	8009acc <__ssputs_r+0x58>
 8009b12:	462a      	mov	r2, r5
 8009b14:	f000 fb58 	bl	800a1c8 <_realloc_r>
 8009b18:	4606      	mov	r6, r0
 8009b1a:	2800      	cmp	r0, #0
 8009b1c:	d1e2      	bne.n	8009ae4 <__ssputs_r+0x70>
 8009b1e:	6921      	ldr	r1, [r4, #16]
 8009b20:	4650      	mov	r0, sl
 8009b22:	f7ff feff 	bl	8009924 <_free_r>
 8009b26:	e7c8      	b.n	8009aba <__ssputs_r+0x46>

08009b28 <_svfiprintf_r>:
 8009b28:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009b2c:	461d      	mov	r5, r3
 8009b2e:	898b      	ldrh	r3, [r1, #12]
 8009b30:	061f      	lsls	r7, r3, #24
 8009b32:	b09d      	sub	sp, #116	; 0x74
 8009b34:	4680      	mov	r8, r0
 8009b36:	460c      	mov	r4, r1
 8009b38:	4616      	mov	r6, r2
 8009b3a:	d50f      	bpl.n	8009b5c <_svfiprintf_r+0x34>
 8009b3c:	690b      	ldr	r3, [r1, #16]
 8009b3e:	b96b      	cbnz	r3, 8009b5c <_svfiprintf_r+0x34>
 8009b40:	2140      	movs	r1, #64	; 0x40
 8009b42:	f7ff ff3d 	bl	80099c0 <_malloc_r>
 8009b46:	6020      	str	r0, [r4, #0]
 8009b48:	6120      	str	r0, [r4, #16]
 8009b4a:	b928      	cbnz	r0, 8009b58 <_svfiprintf_r+0x30>
 8009b4c:	230c      	movs	r3, #12
 8009b4e:	f8c8 3000 	str.w	r3, [r8]
 8009b52:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8009b56:	e0c8      	b.n	8009cea <_svfiprintf_r+0x1c2>
 8009b58:	2340      	movs	r3, #64	; 0x40
 8009b5a:	6163      	str	r3, [r4, #20]
 8009b5c:	2300      	movs	r3, #0
 8009b5e:	9309      	str	r3, [sp, #36]	; 0x24
 8009b60:	2320      	movs	r3, #32
 8009b62:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8009b66:	2330      	movs	r3, #48	; 0x30
 8009b68:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8009b6c:	9503      	str	r5, [sp, #12]
 8009b6e:	f04f 0b01 	mov.w	fp, #1
 8009b72:	4637      	mov	r7, r6
 8009b74:	463d      	mov	r5, r7
 8009b76:	f815 3b01 	ldrb.w	r3, [r5], #1
 8009b7a:	b10b      	cbz	r3, 8009b80 <_svfiprintf_r+0x58>
 8009b7c:	2b25      	cmp	r3, #37	; 0x25
 8009b7e:	d13e      	bne.n	8009bfe <_svfiprintf_r+0xd6>
 8009b80:	ebb7 0a06 	subs.w	sl, r7, r6
 8009b84:	d00b      	beq.n	8009b9e <_svfiprintf_r+0x76>
 8009b86:	4653      	mov	r3, sl
 8009b88:	4632      	mov	r2, r6
 8009b8a:	4621      	mov	r1, r4
 8009b8c:	4640      	mov	r0, r8
 8009b8e:	f7ff ff71 	bl	8009a74 <__ssputs_r>
 8009b92:	3001      	adds	r0, #1
 8009b94:	f000 80a4 	beq.w	8009ce0 <_svfiprintf_r+0x1b8>
 8009b98:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009b9a:	4453      	add	r3, sl
 8009b9c:	9309      	str	r3, [sp, #36]	; 0x24
 8009b9e:	783b      	ldrb	r3, [r7, #0]
 8009ba0:	2b00      	cmp	r3, #0
 8009ba2:	f000 809d 	beq.w	8009ce0 <_svfiprintf_r+0x1b8>
 8009ba6:	2300      	movs	r3, #0
 8009ba8:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8009bac:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8009bb0:	9304      	str	r3, [sp, #16]
 8009bb2:	9307      	str	r3, [sp, #28]
 8009bb4:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8009bb8:	931a      	str	r3, [sp, #104]	; 0x68
 8009bba:	462f      	mov	r7, r5
 8009bbc:	2205      	movs	r2, #5
 8009bbe:	f817 1b01 	ldrb.w	r1, [r7], #1
 8009bc2:	4850      	ldr	r0, [pc, #320]	; (8009d04 <_svfiprintf_r+0x1dc>)
 8009bc4:	f7f6 fb2c 	bl	8000220 <memchr>
 8009bc8:	9b04      	ldr	r3, [sp, #16]
 8009bca:	b9d0      	cbnz	r0, 8009c02 <_svfiprintf_r+0xda>
 8009bcc:	06d9      	lsls	r1, r3, #27
 8009bce:	bf44      	itt	mi
 8009bd0:	2220      	movmi	r2, #32
 8009bd2:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8009bd6:	071a      	lsls	r2, r3, #28
 8009bd8:	bf44      	itt	mi
 8009bda:	222b      	movmi	r2, #43	; 0x2b
 8009bdc:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8009be0:	782a      	ldrb	r2, [r5, #0]
 8009be2:	2a2a      	cmp	r2, #42	; 0x2a
 8009be4:	d015      	beq.n	8009c12 <_svfiprintf_r+0xea>
 8009be6:	9a07      	ldr	r2, [sp, #28]
 8009be8:	462f      	mov	r7, r5
 8009bea:	2000      	movs	r0, #0
 8009bec:	250a      	movs	r5, #10
 8009bee:	4639      	mov	r1, r7
 8009bf0:	f811 3b01 	ldrb.w	r3, [r1], #1
 8009bf4:	3b30      	subs	r3, #48	; 0x30
 8009bf6:	2b09      	cmp	r3, #9
 8009bf8:	d94d      	bls.n	8009c96 <_svfiprintf_r+0x16e>
 8009bfa:	b1b8      	cbz	r0, 8009c2c <_svfiprintf_r+0x104>
 8009bfc:	e00f      	b.n	8009c1e <_svfiprintf_r+0xf6>
 8009bfe:	462f      	mov	r7, r5
 8009c00:	e7b8      	b.n	8009b74 <_svfiprintf_r+0x4c>
 8009c02:	4a40      	ldr	r2, [pc, #256]	; (8009d04 <_svfiprintf_r+0x1dc>)
 8009c04:	1a80      	subs	r0, r0, r2
 8009c06:	fa0b f000 	lsl.w	r0, fp, r0
 8009c0a:	4318      	orrs	r0, r3
 8009c0c:	9004      	str	r0, [sp, #16]
 8009c0e:	463d      	mov	r5, r7
 8009c10:	e7d3      	b.n	8009bba <_svfiprintf_r+0x92>
 8009c12:	9a03      	ldr	r2, [sp, #12]
 8009c14:	1d11      	adds	r1, r2, #4
 8009c16:	6812      	ldr	r2, [r2, #0]
 8009c18:	9103      	str	r1, [sp, #12]
 8009c1a:	2a00      	cmp	r2, #0
 8009c1c:	db01      	blt.n	8009c22 <_svfiprintf_r+0xfa>
 8009c1e:	9207      	str	r2, [sp, #28]
 8009c20:	e004      	b.n	8009c2c <_svfiprintf_r+0x104>
 8009c22:	4252      	negs	r2, r2
 8009c24:	f043 0302 	orr.w	r3, r3, #2
 8009c28:	9207      	str	r2, [sp, #28]
 8009c2a:	9304      	str	r3, [sp, #16]
 8009c2c:	783b      	ldrb	r3, [r7, #0]
 8009c2e:	2b2e      	cmp	r3, #46	; 0x2e
 8009c30:	d10c      	bne.n	8009c4c <_svfiprintf_r+0x124>
 8009c32:	787b      	ldrb	r3, [r7, #1]
 8009c34:	2b2a      	cmp	r3, #42	; 0x2a
 8009c36:	d133      	bne.n	8009ca0 <_svfiprintf_r+0x178>
 8009c38:	9b03      	ldr	r3, [sp, #12]
 8009c3a:	1d1a      	adds	r2, r3, #4
 8009c3c:	681b      	ldr	r3, [r3, #0]
 8009c3e:	9203      	str	r2, [sp, #12]
 8009c40:	2b00      	cmp	r3, #0
 8009c42:	bfb8      	it	lt
 8009c44:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 8009c48:	3702      	adds	r7, #2
 8009c4a:	9305      	str	r3, [sp, #20]
 8009c4c:	4d2e      	ldr	r5, [pc, #184]	; (8009d08 <_svfiprintf_r+0x1e0>)
 8009c4e:	7839      	ldrb	r1, [r7, #0]
 8009c50:	2203      	movs	r2, #3
 8009c52:	4628      	mov	r0, r5
 8009c54:	f7f6 fae4 	bl	8000220 <memchr>
 8009c58:	b138      	cbz	r0, 8009c6a <_svfiprintf_r+0x142>
 8009c5a:	2340      	movs	r3, #64	; 0x40
 8009c5c:	1b40      	subs	r0, r0, r5
 8009c5e:	fa03 f000 	lsl.w	r0, r3, r0
 8009c62:	9b04      	ldr	r3, [sp, #16]
 8009c64:	4303      	orrs	r3, r0
 8009c66:	3701      	adds	r7, #1
 8009c68:	9304      	str	r3, [sp, #16]
 8009c6a:	7839      	ldrb	r1, [r7, #0]
 8009c6c:	4827      	ldr	r0, [pc, #156]	; (8009d0c <_svfiprintf_r+0x1e4>)
 8009c6e:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8009c72:	2206      	movs	r2, #6
 8009c74:	1c7e      	adds	r6, r7, #1
 8009c76:	f7f6 fad3 	bl	8000220 <memchr>
 8009c7a:	2800      	cmp	r0, #0
 8009c7c:	d038      	beq.n	8009cf0 <_svfiprintf_r+0x1c8>
 8009c7e:	4b24      	ldr	r3, [pc, #144]	; (8009d10 <_svfiprintf_r+0x1e8>)
 8009c80:	bb13      	cbnz	r3, 8009cc8 <_svfiprintf_r+0x1a0>
 8009c82:	9b03      	ldr	r3, [sp, #12]
 8009c84:	3307      	adds	r3, #7
 8009c86:	f023 0307 	bic.w	r3, r3, #7
 8009c8a:	3308      	adds	r3, #8
 8009c8c:	9303      	str	r3, [sp, #12]
 8009c8e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009c90:	444b      	add	r3, r9
 8009c92:	9309      	str	r3, [sp, #36]	; 0x24
 8009c94:	e76d      	b.n	8009b72 <_svfiprintf_r+0x4a>
 8009c96:	fb05 3202 	mla	r2, r5, r2, r3
 8009c9a:	2001      	movs	r0, #1
 8009c9c:	460f      	mov	r7, r1
 8009c9e:	e7a6      	b.n	8009bee <_svfiprintf_r+0xc6>
 8009ca0:	2300      	movs	r3, #0
 8009ca2:	3701      	adds	r7, #1
 8009ca4:	9305      	str	r3, [sp, #20]
 8009ca6:	4619      	mov	r1, r3
 8009ca8:	250a      	movs	r5, #10
 8009caa:	4638      	mov	r0, r7
 8009cac:	f810 2b01 	ldrb.w	r2, [r0], #1
 8009cb0:	3a30      	subs	r2, #48	; 0x30
 8009cb2:	2a09      	cmp	r2, #9
 8009cb4:	d903      	bls.n	8009cbe <_svfiprintf_r+0x196>
 8009cb6:	2b00      	cmp	r3, #0
 8009cb8:	d0c8      	beq.n	8009c4c <_svfiprintf_r+0x124>
 8009cba:	9105      	str	r1, [sp, #20]
 8009cbc:	e7c6      	b.n	8009c4c <_svfiprintf_r+0x124>
 8009cbe:	fb05 2101 	mla	r1, r5, r1, r2
 8009cc2:	2301      	movs	r3, #1
 8009cc4:	4607      	mov	r7, r0
 8009cc6:	e7f0      	b.n	8009caa <_svfiprintf_r+0x182>
 8009cc8:	ab03      	add	r3, sp, #12
 8009cca:	9300      	str	r3, [sp, #0]
 8009ccc:	4622      	mov	r2, r4
 8009cce:	4b11      	ldr	r3, [pc, #68]	; (8009d14 <_svfiprintf_r+0x1ec>)
 8009cd0:	a904      	add	r1, sp, #16
 8009cd2:	4640      	mov	r0, r8
 8009cd4:	f3af 8000 	nop.w
 8009cd8:	f1b0 3fff 	cmp.w	r0, #4294967295	; 0xffffffff
 8009cdc:	4681      	mov	r9, r0
 8009cde:	d1d6      	bne.n	8009c8e <_svfiprintf_r+0x166>
 8009ce0:	89a3      	ldrh	r3, [r4, #12]
 8009ce2:	065b      	lsls	r3, r3, #25
 8009ce4:	f53f af35 	bmi.w	8009b52 <_svfiprintf_r+0x2a>
 8009ce8:	9809      	ldr	r0, [sp, #36]	; 0x24
 8009cea:	b01d      	add	sp, #116	; 0x74
 8009cec:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009cf0:	ab03      	add	r3, sp, #12
 8009cf2:	9300      	str	r3, [sp, #0]
 8009cf4:	4622      	mov	r2, r4
 8009cf6:	4b07      	ldr	r3, [pc, #28]	; (8009d14 <_svfiprintf_r+0x1ec>)
 8009cf8:	a904      	add	r1, sp, #16
 8009cfa:	4640      	mov	r0, r8
 8009cfc:	f000 f882 	bl	8009e04 <_printf_i>
 8009d00:	e7ea      	b.n	8009cd8 <_svfiprintf_r+0x1b0>
 8009d02:	bf00      	nop
 8009d04:	0800a780 	.word	0x0800a780
 8009d08:	0800a786 	.word	0x0800a786
 8009d0c:	0800a78a 	.word	0x0800a78a
 8009d10:	00000000 	.word	0x00000000
 8009d14:	08009a75 	.word	0x08009a75

08009d18 <_printf_common>:
 8009d18:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009d1c:	4691      	mov	r9, r2
 8009d1e:	461f      	mov	r7, r3
 8009d20:	688a      	ldr	r2, [r1, #8]
 8009d22:	690b      	ldr	r3, [r1, #16]
 8009d24:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8009d28:	4293      	cmp	r3, r2
 8009d2a:	bfb8      	it	lt
 8009d2c:	4613      	movlt	r3, r2
 8009d2e:	f8c9 3000 	str.w	r3, [r9]
 8009d32:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8009d36:	4606      	mov	r6, r0
 8009d38:	460c      	mov	r4, r1
 8009d3a:	b112      	cbz	r2, 8009d42 <_printf_common+0x2a>
 8009d3c:	3301      	adds	r3, #1
 8009d3e:	f8c9 3000 	str.w	r3, [r9]
 8009d42:	6823      	ldr	r3, [r4, #0]
 8009d44:	0699      	lsls	r1, r3, #26
 8009d46:	bf42      	ittt	mi
 8009d48:	f8d9 3000 	ldrmi.w	r3, [r9]
 8009d4c:	3302      	addmi	r3, #2
 8009d4e:	f8c9 3000 	strmi.w	r3, [r9]
 8009d52:	6825      	ldr	r5, [r4, #0]
 8009d54:	f015 0506 	ands.w	r5, r5, #6
 8009d58:	d107      	bne.n	8009d6a <_printf_common+0x52>
 8009d5a:	f104 0a19 	add.w	sl, r4, #25
 8009d5e:	68e3      	ldr	r3, [r4, #12]
 8009d60:	f8d9 2000 	ldr.w	r2, [r9]
 8009d64:	1a9b      	subs	r3, r3, r2
 8009d66:	42ab      	cmp	r3, r5
 8009d68:	dc28      	bgt.n	8009dbc <_printf_common+0xa4>
 8009d6a:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 8009d6e:	6822      	ldr	r2, [r4, #0]
 8009d70:	3300      	adds	r3, #0
 8009d72:	bf18      	it	ne
 8009d74:	2301      	movne	r3, #1
 8009d76:	0692      	lsls	r2, r2, #26
 8009d78:	d42d      	bmi.n	8009dd6 <_printf_common+0xbe>
 8009d7a:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8009d7e:	4639      	mov	r1, r7
 8009d80:	4630      	mov	r0, r6
 8009d82:	47c0      	blx	r8
 8009d84:	3001      	adds	r0, #1
 8009d86:	d020      	beq.n	8009dca <_printf_common+0xb2>
 8009d88:	6823      	ldr	r3, [r4, #0]
 8009d8a:	68e5      	ldr	r5, [r4, #12]
 8009d8c:	f8d9 2000 	ldr.w	r2, [r9]
 8009d90:	f003 0306 	and.w	r3, r3, #6
 8009d94:	2b04      	cmp	r3, #4
 8009d96:	bf08      	it	eq
 8009d98:	1aad      	subeq	r5, r5, r2
 8009d9a:	68a3      	ldr	r3, [r4, #8]
 8009d9c:	6922      	ldr	r2, [r4, #16]
 8009d9e:	bf0c      	ite	eq
 8009da0:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8009da4:	2500      	movne	r5, #0
 8009da6:	4293      	cmp	r3, r2
 8009da8:	bfc4      	itt	gt
 8009daa:	1a9b      	subgt	r3, r3, r2
 8009dac:	18ed      	addgt	r5, r5, r3
 8009dae:	f04f 0900 	mov.w	r9, #0
 8009db2:	341a      	adds	r4, #26
 8009db4:	454d      	cmp	r5, r9
 8009db6:	d11a      	bne.n	8009dee <_printf_common+0xd6>
 8009db8:	2000      	movs	r0, #0
 8009dba:	e008      	b.n	8009dce <_printf_common+0xb6>
 8009dbc:	2301      	movs	r3, #1
 8009dbe:	4652      	mov	r2, sl
 8009dc0:	4639      	mov	r1, r7
 8009dc2:	4630      	mov	r0, r6
 8009dc4:	47c0      	blx	r8
 8009dc6:	3001      	adds	r0, #1
 8009dc8:	d103      	bne.n	8009dd2 <_printf_common+0xba>
 8009dca:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8009dce:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009dd2:	3501      	adds	r5, #1
 8009dd4:	e7c3      	b.n	8009d5e <_printf_common+0x46>
 8009dd6:	18e1      	adds	r1, r4, r3
 8009dd8:	1c5a      	adds	r2, r3, #1
 8009dda:	2030      	movs	r0, #48	; 0x30
 8009ddc:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8009de0:	4422      	add	r2, r4
 8009de2:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8009de6:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8009dea:	3302      	adds	r3, #2
 8009dec:	e7c5      	b.n	8009d7a <_printf_common+0x62>
 8009dee:	2301      	movs	r3, #1
 8009df0:	4622      	mov	r2, r4
 8009df2:	4639      	mov	r1, r7
 8009df4:	4630      	mov	r0, r6
 8009df6:	47c0      	blx	r8
 8009df8:	3001      	adds	r0, #1
 8009dfa:	d0e6      	beq.n	8009dca <_printf_common+0xb2>
 8009dfc:	f109 0901 	add.w	r9, r9, #1
 8009e00:	e7d8      	b.n	8009db4 <_printf_common+0x9c>
	...

08009e04 <_printf_i>:
 8009e04:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8009e08:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 8009e0c:	460c      	mov	r4, r1
 8009e0e:	7e09      	ldrb	r1, [r1, #24]
 8009e10:	b085      	sub	sp, #20
 8009e12:	296e      	cmp	r1, #110	; 0x6e
 8009e14:	4617      	mov	r7, r2
 8009e16:	4606      	mov	r6, r0
 8009e18:	4698      	mov	r8, r3
 8009e1a:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8009e1c:	f000 80b3 	beq.w	8009f86 <_printf_i+0x182>
 8009e20:	d822      	bhi.n	8009e68 <_printf_i+0x64>
 8009e22:	2963      	cmp	r1, #99	; 0x63
 8009e24:	d036      	beq.n	8009e94 <_printf_i+0x90>
 8009e26:	d80a      	bhi.n	8009e3e <_printf_i+0x3a>
 8009e28:	2900      	cmp	r1, #0
 8009e2a:	f000 80b9 	beq.w	8009fa0 <_printf_i+0x19c>
 8009e2e:	2958      	cmp	r1, #88	; 0x58
 8009e30:	f000 8083 	beq.w	8009f3a <_printf_i+0x136>
 8009e34:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8009e38:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 8009e3c:	e032      	b.n	8009ea4 <_printf_i+0xa0>
 8009e3e:	2964      	cmp	r1, #100	; 0x64
 8009e40:	d001      	beq.n	8009e46 <_printf_i+0x42>
 8009e42:	2969      	cmp	r1, #105	; 0x69
 8009e44:	d1f6      	bne.n	8009e34 <_printf_i+0x30>
 8009e46:	6820      	ldr	r0, [r4, #0]
 8009e48:	6813      	ldr	r3, [r2, #0]
 8009e4a:	0605      	lsls	r5, r0, #24
 8009e4c:	f103 0104 	add.w	r1, r3, #4
 8009e50:	d52a      	bpl.n	8009ea8 <_printf_i+0xa4>
 8009e52:	681b      	ldr	r3, [r3, #0]
 8009e54:	6011      	str	r1, [r2, #0]
 8009e56:	2b00      	cmp	r3, #0
 8009e58:	da03      	bge.n	8009e62 <_printf_i+0x5e>
 8009e5a:	222d      	movs	r2, #45	; 0x2d
 8009e5c:	425b      	negs	r3, r3
 8009e5e:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 8009e62:	486f      	ldr	r0, [pc, #444]	; (800a020 <_printf_i+0x21c>)
 8009e64:	220a      	movs	r2, #10
 8009e66:	e039      	b.n	8009edc <_printf_i+0xd8>
 8009e68:	2973      	cmp	r1, #115	; 0x73
 8009e6a:	f000 809d 	beq.w	8009fa8 <_printf_i+0x1a4>
 8009e6e:	d808      	bhi.n	8009e82 <_printf_i+0x7e>
 8009e70:	296f      	cmp	r1, #111	; 0x6f
 8009e72:	d020      	beq.n	8009eb6 <_printf_i+0xb2>
 8009e74:	2970      	cmp	r1, #112	; 0x70
 8009e76:	d1dd      	bne.n	8009e34 <_printf_i+0x30>
 8009e78:	6823      	ldr	r3, [r4, #0]
 8009e7a:	f043 0320 	orr.w	r3, r3, #32
 8009e7e:	6023      	str	r3, [r4, #0]
 8009e80:	e003      	b.n	8009e8a <_printf_i+0x86>
 8009e82:	2975      	cmp	r1, #117	; 0x75
 8009e84:	d017      	beq.n	8009eb6 <_printf_i+0xb2>
 8009e86:	2978      	cmp	r1, #120	; 0x78
 8009e88:	d1d4      	bne.n	8009e34 <_printf_i+0x30>
 8009e8a:	2378      	movs	r3, #120	; 0x78
 8009e8c:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8009e90:	4864      	ldr	r0, [pc, #400]	; (800a024 <_printf_i+0x220>)
 8009e92:	e055      	b.n	8009f40 <_printf_i+0x13c>
 8009e94:	6813      	ldr	r3, [r2, #0]
 8009e96:	1d19      	adds	r1, r3, #4
 8009e98:	681b      	ldr	r3, [r3, #0]
 8009e9a:	6011      	str	r1, [r2, #0]
 8009e9c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8009ea0:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8009ea4:	2301      	movs	r3, #1
 8009ea6:	e08c      	b.n	8009fc2 <_printf_i+0x1be>
 8009ea8:	681b      	ldr	r3, [r3, #0]
 8009eaa:	6011      	str	r1, [r2, #0]
 8009eac:	f010 0f40 	tst.w	r0, #64	; 0x40
 8009eb0:	bf18      	it	ne
 8009eb2:	b21b      	sxthne	r3, r3
 8009eb4:	e7cf      	b.n	8009e56 <_printf_i+0x52>
 8009eb6:	6813      	ldr	r3, [r2, #0]
 8009eb8:	6825      	ldr	r5, [r4, #0]
 8009eba:	1d18      	adds	r0, r3, #4
 8009ebc:	6010      	str	r0, [r2, #0]
 8009ebe:	0628      	lsls	r0, r5, #24
 8009ec0:	d501      	bpl.n	8009ec6 <_printf_i+0xc2>
 8009ec2:	681b      	ldr	r3, [r3, #0]
 8009ec4:	e002      	b.n	8009ecc <_printf_i+0xc8>
 8009ec6:	0668      	lsls	r0, r5, #25
 8009ec8:	d5fb      	bpl.n	8009ec2 <_printf_i+0xbe>
 8009eca:	881b      	ldrh	r3, [r3, #0]
 8009ecc:	4854      	ldr	r0, [pc, #336]	; (800a020 <_printf_i+0x21c>)
 8009ece:	296f      	cmp	r1, #111	; 0x6f
 8009ed0:	bf14      	ite	ne
 8009ed2:	220a      	movne	r2, #10
 8009ed4:	2208      	moveq	r2, #8
 8009ed6:	2100      	movs	r1, #0
 8009ed8:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8009edc:	6865      	ldr	r5, [r4, #4]
 8009ede:	60a5      	str	r5, [r4, #8]
 8009ee0:	2d00      	cmp	r5, #0
 8009ee2:	f2c0 8095 	blt.w	800a010 <_printf_i+0x20c>
 8009ee6:	6821      	ldr	r1, [r4, #0]
 8009ee8:	f021 0104 	bic.w	r1, r1, #4
 8009eec:	6021      	str	r1, [r4, #0]
 8009eee:	2b00      	cmp	r3, #0
 8009ef0:	d13d      	bne.n	8009f6e <_printf_i+0x16a>
 8009ef2:	2d00      	cmp	r5, #0
 8009ef4:	f040 808e 	bne.w	800a014 <_printf_i+0x210>
 8009ef8:	4665      	mov	r5, ip
 8009efa:	2a08      	cmp	r2, #8
 8009efc:	d10b      	bne.n	8009f16 <_printf_i+0x112>
 8009efe:	6823      	ldr	r3, [r4, #0]
 8009f00:	07db      	lsls	r3, r3, #31
 8009f02:	d508      	bpl.n	8009f16 <_printf_i+0x112>
 8009f04:	6923      	ldr	r3, [r4, #16]
 8009f06:	6862      	ldr	r2, [r4, #4]
 8009f08:	429a      	cmp	r2, r3
 8009f0a:	bfde      	ittt	le
 8009f0c:	2330      	movle	r3, #48	; 0x30
 8009f0e:	f805 3c01 	strble.w	r3, [r5, #-1]
 8009f12:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 8009f16:	ebac 0305 	sub.w	r3, ip, r5
 8009f1a:	6123      	str	r3, [r4, #16]
 8009f1c:	f8cd 8000 	str.w	r8, [sp]
 8009f20:	463b      	mov	r3, r7
 8009f22:	aa03      	add	r2, sp, #12
 8009f24:	4621      	mov	r1, r4
 8009f26:	4630      	mov	r0, r6
 8009f28:	f7ff fef6 	bl	8009d18 <_printf_common>
 8009f2c:	3001      	adds	r0, #1
 8009f2e:	d14d      	bne.n	8009fcc <_printf_i+0x1c8>
 8009f30:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8009f34:	b005      	add	sp, #20
 8009f36:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8009f3a:	4839      	ldr	r0, [pc, #228]	; (800a020 <_printf_i+0x21c>)
 8009f3c:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 8009f40:	6813      	ldr	r3, [r2, #0]
 8009f42:	6821      	ldr	r1, [r4, #0]
 8009f44:	1d1d      	adds	r5, r3, #4
 8009f46:	681b      	ldr	r3, [r3, #0]
 8009f48:	6015      	str	r5, [r2, #0]
 8009f4a:	060a      	lsls	r2, r1, #24
 8009f4c:	d50b      	bpl.n	8009f66 <_printf_i+0x162>
 8009f4e:	07ca      	lsls	r2, r1, #31
 8009f50:	bf44      	itt	mi
 8009f52:	f041 0120 	orrmi.w	r1, r1, #32
 8009f56:	6021      	strmi	r1, [r4, #0]
 8009f58:	b91b      	cbnz	r3, 8009f62 <_printf_i+0x15e>
 8009f5a:	6822      	ldr	r2, [r4, #0]
 8009f5c:	f022 0220 	bic.w	r2, r2, #32
 8009f60:	6022      	str	r2, [r4, #0]
 8009f62:	2210      	movs	r2, #16
 8009f64:	e7b7      	b.n	8009ed6 <_printf_i+0xd2>
 8009f66:	064d      	lsls	r5, r1, #25
 8009f68:	bf48      	it	mi
 8009f6a:	b29b      	uxthmi	r3, r3
 8009f6c:	e7ef      	b.n	8009f4e <_printf_i+0x14a>
 8009f6e:	4665      	mov	r5, ip
 8009f70:	fbb3 f1f2 	udiv	r1, r3, r2
 8009f74:	fb02 3311 	mls	r3, r2, r1, r3
 8009f78:	5cc3      	ldrb	r3, [r0, r3]
 8009f7a:	f805 3d01 	strb.w	r3, [r5, #-1]!
 8009f7e:	460b      	mov	r3, r1
 8009f80:	2900      	cmp	r1, #0
 8009f82:	d1f5      	bne.n	8009f70 <_printf_i+0x16c>
 8009f84:	e7b9      	b.n	8009efa <_printf_i+0xf6>
 8009f86:	6813      	ldr	r3, [r2, #0]
 8009f88:	6825      	ldr	r5, [r4, #0]
 8009f8a:	6961      	ldr	r1, [r4, #20]
 8009f8c:	1d18      	adds	r0, r3, #4
 8009f8e:	6010      	str	r0, [r2, #0]
 8009f90:	0628      	lsls	r0, r5, #24
 8009f92:	681b      	ldr	r3, [r3, #0]
 8009f94:	d501      	bpl.n	8009f9a <_printf_i+0x196>
 8009f96:	6019      	str	r1, [r3, #0]
 8009f98:	e002      	b.n	8009fa0 <_printf_i+0x19c>
 8009f9a:	066a      	lsls	r2, r5, #25
 8009f9c:	d5fb      	bpl.n	8009f96 <_printf_i+0x192>
 8009f9e:	8019      	strh	r1, [r3, #0]
 8009fa0:	2300      	movs	r3, #0
 8009fa2:	6123      	str	r3, [r4, #16]
 8009fa4:	4665      	mov	r5, ip
 8009fa6:	e7b9      	b.n	8009f1c <_printf_i+0x118>
 8009fa8:	6813      	ldr	r3, [r2, #0]
 8009faa:	1d19      	adds	r1, r3, #4
 8009fac:	6011      	str	r1, [r2, #0]
 8009fae:	681d      	ldr	r5, [r3, #0]
 8009fb0:	6862      	ldr	r2, [r4, #4]
 8009fb2:	2100      	movs	r1, #0
 8009fb4:	4628      	mov	r0, r5
 8009fb6:	f7f6 f933 	bl	8000220 <memchr>
 8009fba:	b108      	cbz	r0, 8009fc0 <_printf_i+0x1bc>
 8009fbc:	1b40      	subs	r0, r0, r5
 8009fbe:	6060      	str	r0, [r4, #4]
 8009fc0:	6863      	ldr	r3, [r4, #4]
 8009fc2:	6123      	str	r3, [r4, #16]
 8009fc4:	2300      	movs	r3, #0
 8009fc6:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8009fca:	e7a7      	b.n	8009f1c <_printf_i+0x118>
 8009fcc:	6923      	ldr	r3, [r4, #16]
 8009fce:	462a      	mov	r2, r5
 8009fd0:	4639      	mov	r1, r7
 8009fd2:	4630      	mov	r0, r6
 8009fd4:	47c0      	blx	r8
 8009fd6:	3001      	adds	r0, #1
 8009fd8:	d0aa      	beq.n	8009f30 <_printf_i+0x12c>
 8009fda:	6823      	ldr	r3, [r4, #0]
 8009fdc:	079b      	lsls	r3, r3, #30
 8009fde:	d413      	bmi.n	800a008 <_printf_i+0x204>
 8009fe0:	68e0      	ldr	r0, [r4, #12]
 8009fe2:	9b03      	ldr	r3, [sp, #12]
 8009fe4:	4298      	cmp	r0, r3
 8009fe6:	bfb8      	it	lt
 8009fe8:	4618      	movlt	r0, r3
 8009fea:	e7a3      	b.n	8009f34 <_printf_i+0x130>
 8009fec:	2301      	movs	r3, #1
 8009fee:	464a      	mov	r2, r9
 8009ff0:	4639      	mov	r1, r7
 8009ff2:	4630      	mov	r0, r6
 8009ff4:	47c0      	blx	r8
 8009ff6:	3001      	adds	r0, #1
 8009ff8:	d09a      	beq.n	8009f30 <_printf_i+0x12c>
 8009ffa:	3501      	adds	r5, #1
 8009ffc:	68e3      	ldr	r3, [r4, #12]
 8009ffe:	9a03      	ldr	r2, [sp, #12]
 800a000:	1a9b      	subs	r3, r3, r2
 800a002:	42ab      	cmp	r3, r5
 800a004:	dcf2      	bgt.n	8009fec <_printf_i+0x1e8>
 800a006:	e7eb      	b.n	8009fe0 <_printf_i+0x1dc>
 800a008:	2500      	movs	r5, #0
 800a00a:	f104 0919 	add.w	r9, r4, #25
 800a00e:	e7f5      	b.n	8009ffc <_printf_i+0x1f8>
 800a010:	2b00      	cmp	r3, #0
 800a012:	d1ac      	bne.n	8009f6e <_printf_i+0x16a>
 800a014:	7803      	ldrb	r3, [r0, #0]
 800a016:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800a01a:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800a01e:	e76c      	b.n	8009efa <_printf_i+0xf6>
 800a020:	0800a791 	.word	0x0800a791
 800a024:	0800a7a2 	.word	0x0800a7a2

0800a028 <_sbrk_r>:
 800a028:	b538      	push	{r3, r4, r5, lr}
 800a02a:	4c06      	ldr	r4, [pc, #24]	; (800a044 <_sbrk_r+0x1c>)
 800a02c:	2300      	movs	r3, #0
 800a02e:	4605      	mov	r5, r0
 800a030:	4608      	mov	r0, r1
 800a032:	6023      	str	r3, [r4, #0]
 800a034:	f7f8 faa6 	bl	8002584 <_sbrk>
 800a038:	1c43      	adds	r3, r0, #1
 800a03a:	d102      	bne.n	800a042 <_sbrk_r+0x1a>
 800a03c:	6823      	ldr	r3, [r4, #0]
 800a03e:	b103      	cbz	r3, 800a042 <_sbrk_r+0x1a>
 800a040:	602b      	str	r3, [r5, #0]
 800a042:	bd38      	pop	{r3, r4, r5, pc}
 800a044:	20001068 	.word	0x20001068

0800a048 <__sread>:
 800a048:	b510      	push	{r4, lr}
 800a04a:	460c      	mov	r4, r1
 800a04c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a050:	f000 f8e0 	bl	800a214 <_read_r>
 800a054:	2800      	cmp	r0, #0
 800a056:	bfab      	itete	ge
 800a058:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800a05a:	89a3      	ldrhlt	r3, [r4, #12]
 800a05c:	181b      	addge	r3, r3, r0
 800a05e:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800a062:	bfac      	ite	ge
 800a064:	6563      	strge	r3, [r4, #84]	; 0x54
 800a066:	81a3      	strhlt	r3, [r4, #12]
 800a068:	bd10      	pop	{r4, pc}

0800a06a <__swrite>:
 800a06a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a06e:	461f      	mov	r7, r3
 800a070:	898b      	ldrh	r3, [r1, #12]
 800a072:	05db      	lsls	r3, r3, #23
 800a074:	4605      	mov	r5, r0
 800a076:	460c      	mov	r4, r1
 800a078:	4616      	mov	r6, r2
 800a07a:	d505      	bpl.n	800a088 <__swrite+0x1e>
 800a07c:	2302      	movs	r3, #2
 800a07e:	2200      	movs	r2, #0
 800a080:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a084:	f000 f868 	bl	800a158 <_lseek_r>
 800a088:	89a3      	ldrh	r3, [r4, #12]
 800a08a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800a08e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800a092:	81a3      	strh	r3, [r4, #12]
 800a094:	4632      	mov	r2, r6
 800a096:	463b      	mov	r3, r7
 800a098:	4628      	mov	r0, r5
 800a09a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800a09e:	f000 b817 	b.w	800a0d0 <_write_r>

0800a0a2 <__sseek>:
 800a0a2:	b510      	push	{r4, lr}
 800a0a4:	460c      	mov	r4, r1
 800a0a6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a0aa:	f000 f855 	bl	800a158 <_lseek_r>
 800a0ae:	1c43      	adds	r3, r0, #1
 800a0b0:	89a3      	ldrh	r3, [r4, #12]
 800a0b2:	bf15      	itete	ne
 800a0b4:	6560      	strne	r0, [r4, #84]	; 0x54
 800a0b6:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800a0ba:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800a0be:	81a3      	strheq	r3, [r4, #12]
 800a0c0:	bf18      	it	ne
 800a0c2:	81a3      	strhne	r3, [r4, #12]
 800a0c4:	bd10      	pop	{r4, pc}

0800a0c6 <__sclose>:
 800a0c6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a0ca:	f000 b813 	b.w	800a0f4 <_close_r>
	...

0800a0d0 <_write_r>:
 800a0d0:	b538      	push	{r3, r4, r5, lr}
 800a0d2:	4c07      	ldr	r4, [pc, #28]	; (800a0f0 <_write_r+0x20>)
 800a0d4:	4605      	mov	r5, r0
 800a0d6:	4608      	mov	r0, r1
 800a0d8:	4611      	mov	r1, r2
 800a0da:	2200      	movs	r2, #0
 800a0dc:	6022      	str	r2, [r4, #0]
 800a0de:	461a      	mov	r2, r3
 800a0e0:	f7f7 fe9b 	bl	8001e1a <_write>
 800a0e4:	1c43      	adds	r3, r0, #1
 800a0e6:	d102      	bne.n	800a0ee <_write_r+0x1e>
 800a0e8:	6823      	ldr	r3, [r4, #0]
 800a0ea:	b103      	cbz	r3, 800a0ee <_write_r+0x1e>
 800a0ec:	602b      	str	r3, [r5, #0]
 800a0ee:	bd38      	pop	{r3, r4, r5, pc}
 800a0f0:	20001068 	.word	0x20001068

0800a0f4 <_close_r>:
 800a0f4:	b538      	push	{r3, r4, r5, lr}
 800a0f6:	4c06      	ldr	r4, [pc, #24]	; (800a110 <_close_r+0x1c>)
 800a0f8:	2300      	movs	r3, #0
 800a0fa:	4605      	mov	r5, r0
 800a0fc:	4608      	mov	r0, r1
 800a0fe:	6023      	str	r3, [r4, #0]
 800a100:	f7f8 fa0b 	bl	800251a <_close>
 800a104:	1c43      	adds	r3, r0, #1
 800a106:	d102      	bne.n	800a10e <_close_r+0x1a>
 800a108:	6823      	ldr	r3, [r4, #0]
 800a10a:	b103      	cbz	r3, 800a10e <_close_r+0x1a>
 800a10c:	602b      	str	r3, [r5, #0]
 800a10e:	bd38      	pop	{r3, r4, r5, pc}
 800a110:	20001068 	.word	0x20001068

0800a114 <_fstat_r>:
 800a114:	b538      	push	{r3, r4, r5, lr}
 800a116:	4c07      	ldr	r4, [pc, #28]	; (800a134 <_fstat_r+0x20>)
 800a118:	2300      	movs	r3, #0
 800a11a:	4605      	mov	r5, r0
 800a11c:	4608      	mov	r0, r1
 800a11e:	4611      	mov	r1, r2
 800a120:	6023      	str	r3, [r4, #0]
 800a122:	f7f8 fa06 	bl	8002532 <_fstat>
 800a126:	1c43      	adds	r3, r0, #1
 800a128:	d102      	bne.n	800a130 <_fstat_r+0x1c>
 800a12a:	6823      	ldr	r3, [r4, #0]
 800a12c:	b103      	cbz	r3, 800a130 <_fstat_r+0x1c>
 800a12e:	602b      	str	r3, [r5, #0]
 800a130:	bd38      	pop	{r3, r4, r5, pc}
 800a132:	bf00      	nop
 800a134:	20001068 	.word	0x20001068

0800a138 <_isatty_r>:
 800a138:	b538      	push	{r3, r4, r5, lr}
 800a13a:	4c06      	ldr	r4, [pc, #24]	; (800a154 <_isatty_r+0x1c>)
 800a13c:	2300      	movs	r3, #0
 800a13e:	4605      	mov	r5, r0
 800a140:	4608      	mov	r0, r1
 800a142:	6023      	str	r3, [r4, #0]
 800a144:	f7f8 fa05 	bl	8002552 <_isatty>
 800a148:	1c43      	adds	r3, r0, #1
 800a14a:	d102      	bne.n	800a152 <_isatty_r+0x1a>
 800a14c:	6823      	ldr	r3, [r4, #0]
 800a14e:	b103      	cbz	r3, 800a152 <_isatty_r+0x1a>
 800a150:	602b      	str	r3, [r5, #0]
 800a152:	bd38      	pop	{r3, r4, r5, pc}
 800a154:	20001068 	.word	0x20001068

0800a158 <_lseek_r>:
 800a158:	b538      	push	{r3, r4, r5, lr}
 800a15a:	4c07      	ldr	r4, [pc, #28]	; (800a178 <_lseek_r+0x20>)
 800a15c:	4605      	mov	r5, r0
 800a15e:	4608      	mov	r0, r1
 800a160:	4611      	mov	r1, r2
 800a162:	2200      	movs	r2, #0
 800a164:	6022      	str	r2, [r4, #0]
 800a166:	461a      	mov	r2, r3
 800a168:	f7f8 f9fe 	bl	8002568 <_lseek>
 800a16c:	1c43      	adds	r3, r0, #1
 800a16e:	d102      	bne.n	800a176 <_lseek_r+0x1e>
 800a170:	6823      	ldr	r3, [r4, #0]
 800a172:	b103      	cbz	r3, 800a176 <_lseek_r+0x1e>
 800a174:	602b      	str	r3, [r5, #0]
 800a176:	bd38      	pop	{r3, r4, r5, pc}
 800a178:	20001068 	.word	0x20001068

0800a17c <memcpy>:
 800a17c:	b510      	push	{r4, lr}
 800a17e:	1e43      	subs	r3, r0, #1
 800a180:	440a      	add	r2, r1
 800a182:	4291      	cmp	r1, r2
 800a184:	d100      	bne.n	800a188 <memcpy+0xc>
 800a186:	bd10      	pop	{r4, pc}
 800a188:	f811 4b01 	ldrb.w	r4, [r1], #1
 800a18c:	f803 4f01 	strb.w	r4, [r3, #1]!
 800a190:	e7f7      	b.n	800a182 <memcpy+0x6>

0800a192 <memmove>:
 800a192:	4288      	cmp	r0, r1
 800a194:	b510      	push	{r4, lr}
 800a196:	eb01 0302 	add.w	r3, r1, r2
 800a19a:	d807      	bhi.n	800a1ac <memmove+0x1a>
 800a19c:	1e42      	subs	r2, r0, #1
 800a19e:	4299      	cmp	r1, r3
 800a1a0:	d00a      	beq.n	800a1b8 <memmove+0x26>
 800a1a2:	f811 4b01 	ldrb.w	r4, [r1], #1
 800a1a6:	f802 4f01 	strb.w	r4, [r2, #1]!
 800a1aa:	e7f8      	b.n	800a19e <memmove+0xc>
 800a1ac:	4283      	cmp	r3, r0
 800a1ae:	d9f5      	bls.n	800a19c <memmove+0xa>
 800a1b0:	1881      	adds	r1, r0, r2
 800a1b2:	1ad2      	subs	r2, r2, r3
 800a1b4:	42d3      	cmn	r3, r2
 800a1b6:	d100      	bne.n	800a1ba <memmove+0x28>
 800a1b8:	bd10      	pop	{r4, pc}
 800a1ba:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800a1be:	f801 4d01 	strb.w	r4, [r1, #-1]!
 800a1c2:	e7f7      	b.n	800a1b4 <memmove+0x22>

0800a1c4 <__malloc_lock>:
 800a1c4:	4770      	bx	lr

0800a1c6 <__malloc_unlock>:
 800a1c6:	4770      	bx	lr

0800a1c8 <_realloc_r>:
 800a1c8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a1ca:	4607      	mov	r7, r0
 800a1cc:	4614      	mov	r4, r2
 800a1ce:	460e      	mov	r6, r1
 800a1d0:	b921      	cbnz	r1, 800a1dc <_realloc_r+0x14>
 800a1d2:	4611      	mov	r1, r2
 800a1d4:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 800a1d8:	f7ff bbf2 	b.w	80099c0 <_malloc_r>
 800a1dc:	b922      	cbnz	r2, 800a1e8 <_realloc_r+0x20>
 800a1de:	f7ff fba1 	bl	8009924 <_free_r>
 800a1e2:	4625      	mov	r5, r4
 800a1e4:	4628      	mov	r0, r5
 800a1e6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800a1e8:	f000 f826 	bl	800a238 <_malloc_usable_size_r>
 800a1ec:	42a0      	cmp	r0, r4
 800a1ee:	d20f      	bcs.n	800a210 <_realloc_r+0x48>
 800a1f0:	4621      	mov	r1, r4
 800a1f2:	4638      	mov	r0, r7
 800a1f4:	f7ff fbe4 	bl	80099c0 <_malloc_r>
 800a1f8:	4605      	mov	r5, r0
 800a1fa:	2800      	cmp	r0, #0
 800a1fc:	d0f2      	beq.n	800a1e4 <_realloc_r+0x1c>
 800a1fe:	4631      	mov	r1, r6
 800a200:	4622      	mov	r2, r4
 800a202:	f7ff ffbb 	bl	800a17c <memcpy>
 800a206:	4631      	mov	r1, r6
 800a208:	4638      	mov	r0, r7
 800a20a:	f7ff fb8b 	bl	8009924 <_free_r>
 800a20e:	e7e9      	b.n	800a1e4 <_realloc_r+0x1c>
 800a210:	4635      	mov	r5, r6
 800a212:	e7e7      	b.n	800a1e4 <_realloc_r+0x1c>

0800a214 <_read_r>:
 800a214:	b538      	push	{r3, r4, r5, lr}
 800a216:	4c07      	ldr	r4, [pc, #28]	; (800a234 <_read_r+0x20>)
 800a218:	4605      	mov	r5, r0
 800a21a:	4608      	mov	r0, r1
 800a21c:	4611      	mov	r1, r2
 800a21e:	2200      	movs	r2, #0
 800a220:	6022      	str	r2, [r4, #0]
 800a222:	461a      	mov	r2, r3
 800a224:	f7f8 f95c 	bl	80024e0 <_read>
 800a228:	1c43      	adds	r3, r0, #1
 800a22a:	d102      	bne.n	800a232 <_read_r+0x1e>
 800a22c:	6823      	ldr	r3, [r4, #0]
 800a22e:	b103      	cbz	r3, 800a232 <_read_r+0x1e>
 800a230:	602b      	str	r3, [r5, #0]
 800a232:	bd38      	pop	{r3, r4, r5, pc}
 800a234:	20001068 	.word	0x20001068

0800a238 <_malloc_usable_size_r>:
 800a238:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800a23c:	1f18      	subs	r0, r3, #4
 800a23e:	2b00      	cmp	r3, #0
 800a240:	bfbc      	itt	lt
 800a242:	580b      	ldrlt	r3, [r1, r0]
 800a244:	18c0      	addlt	r0, r0, r3
 800a246:	4770      	bx	lr

0800a248 <_init>:
 800a248:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a24a:	bf00      	nop
 800a24c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a24e:	bc08      	pop	{r3}
 800a250:	469e      	mov	lr, r3
 800a252:	4770      	bx	lr

0800a254 <_fini>:
 800a254:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a256:	bf00      	nop
 800a258:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a25a:	bc08      	pop	{r3}
 800a25c:	469e      	mov	lr, r3
 800a25e:	4770      	bx	lr
