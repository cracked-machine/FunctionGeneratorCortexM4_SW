
FunctionGeneratorCortexM4_SW_V1.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000e4f8  080001e0  080001e0  000101e0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000a18  0800e6d8  0800e6d8  0001e6d8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800f0f0  0800f0f0  000213f8  2**0
                  CONTENTS
  4 .ARM          00000000  0800f0f0  0800f0f0  000213f8  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800f0f0  0800f0f0  000213f8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800f0f0  0800f0f0  0001f0f0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800f0f4  0800f0f4  0001f0f4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000013f8  20000000  0800f0f8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000049c  200013f8  080104f0  000213f8  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20001894  080104f0  00021894  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000213f8  2**0
                  CONTENTS, READONLY
 12 .debug_info   0002c2bc  00000000  00000000  00021428  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00005b72  00000000  00000000  0004d6e4  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00001e90  00000000  00000000  00053258  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00001b30  00000000  00000000  000550e8  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  000307b6  00000000  00000000  00056c18  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   000219b4  00000000  00000000  000873ce  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    00124be8  00000000  00000000  000a8d82  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  001cd96a  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000088d0  00000000  00000000  001cd9e8  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001e0 <__do_global_dtors_aux>:
 80001e0:	b510      	push	{r4, lr}
 80001e2:	4c05      	ldr	r4, [pc, #20]	; (80001f8 <__do_global_dtors_aux+0x18>)
 80001e4:	7823      	ldrb	r3, [r4, #0]
 80001e6:	b933      	cbnz	r3, 80001f6 <__do_global_dtors_aux+0x16>
 80001e8:	4b04      	ldr	r3, [pc, #16]	; (80001fc <__do_global_dtors_aux+0x1c>)
 80001ea:	b113      	cbz	r3, 80001f2 <__do_global_dtors_aux+0x12>
 80001ec:	4804      	ldr	r0, [pc, #16]	; (8000200 <__do_global_dtors_aux+0x20>)
 80001ee:	f3af 8000 	nop.w
 80001f2:	2301      	movs	r3, #1
 80001f4:	7023      	strb	r3, [r4, #0]
 80001f6:	bd10      	pop	{r4, pc}
 80001f8:	200013f8 	.word	0x200013f8
 80001fc:	00000000 	.word	0x00000000
 8000200:	0800e6c0 	.word	0x0800e6c0

08000204 <frame_dummy>:
 8000204:	b508      	push	{r3, lr}
 8000206:	4b03      	ldr	r3, [pc, #12]	; (8000214 <frame_dummy+0x10>)
 8000208:	b11b      	cbz	r3, 8000212 <frame_dummy+0xe>
 800020a:	4903      	ldr	r1, [pc, #12]	; (8000218 <frame_dummy+0x14>)
 800020c:	4803      	ldr	r0, [pc, #12]	; (800021c <frame_dummy+0x18>)
 800020e:	f3af 8000 	nop.w
 8000212:	bd08      	pop	{r3, pc}
 8000214:	00000000 	.word	0x00000000
 8000218:	200013fc 	.word	0x200013fc
 800021c:	0800e6c0 	.word	0x0800e6c0

08000220 <strlen>:
 8000220:	4603      	mov	r3, r0
 8000222:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000226:	2a00      	cmp	r2, #0
 8000228:	d1fb      	bne.n	8000222 <strlen+0x2>
 800022a:	1a18      	subs	r0, r3, r0
 800022c:	3801      	subs	r0, #1
 800022e:	4770      	bx	lr

08000230 <memchr>:
 8000230:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000234:	2a10      	cmp	r2, #16
 8000236:	db2b      	blt.n	8000290 <memchr+0x60>
 8000238:	f010 0f07 	tst.w	r0, #7
 800023c:	d008      	beq.n	8000250 <memchr+0x20>
 800023e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000242:	3a01      	subs	r2, #1
 8000244:	428b      	cmp	r3, r1
 8000246:	d02d      	beq.n	80002a4 <memchr+0x74>
 8000248:	f010 0f07 	tst.w	r0, #7
 800024c:	b342      	cbz	r2, 80002a0 <memchr+0x70>
 800024e:	d1f6      	bne.n	800023e <memchr+0xe>
 8000250:	b4f0      	push	{r4, r5, r6, r7}
 8000252:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000256:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800025a:	f022 0407 	bic.w	r4, r2, #7
 800025e:	f07f 0700 	mvns.w	r7, #0
 8000262:	2300      	movs	r3, #0
 8000264:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000268:	3c08      	subs	r4, #8
 800026a:	ea85 0501 	eor.w	r5, r5, r1
 800026e:	ea86 0601 	eor.w	r6, r6, r1
 8000272:	fa85 f547 	uadd8	r5, r5, r7
 8000276:	faa3 f587 	sel	r5, r3, r7
 800027a:	fa86 f647 	uadd8	r6, r6, r7
 800027e:	faa5 f687 	sel	r6, r5, r7
 8000282:	b98e      	cbnz	r6, 80002a8 <memchr+0x78>
 8000284:	d1ee      	bne.n	8000264 <memchr+0x34>
 8000286:	bcf0      	pop	{r4, r5, r6, r7}
 8000288:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800028c:	f002 0207 	and.w	r2, r2, #7
 8000290:	b132      	cbz	r2, 80002a0 <memchr+0x70>
 8000292:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000296:	3a01      	subs	r2, #1
 8000298:	ea83 0301 	eor.w	r3, r3, r1
 800029c:	b113      	cbz	r3, 80002a4 <memchr+0x74>
 800029e:	d1f8      	bne.n	8000292 <memchr+0x62>
 80002a0:	2000      	movs	r0, #0
 80002a2:	4770      	bx	lr
 80002a4:	3801      	subs	r0, #1
 80002a6:	4770      	bx	lr
 80002a8:	2d00      	cmp	r5, #0
 80002aa:	bf06      	itte	eq
 80002ac:	4635      	moveq	r5, r6
 80002ae:	3803      	subeq	r0, #3
 80002b0:	3807      	subne	r0, #7
 80002b2:	f015 0f01 	tst.w	r5, #1
 80002b6:	d107      	bne.n	80002c8 <memchr+0x98>
 80002b8:	3001      	adds	r0, #1
 80002ba:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002be:	bf02      	ittt	eq
 80002c0:	3001      	addeq	r0, #1
 80002c2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002c6:	3001      	addeq	r0, #1
 80002c8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ca:	3801      	subs	r0, #1
 80002cc:	4770      	bx	lr
 80002ce:	bf00      	nop

080002d0 <__aeabi_drsub>:
 80002d0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002d4:	e002      	b.n	80002dc <__adddf3>
 80002d6:	bf00      	nop

080002d8 <__aeabi_dsub>:
 80002d8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002dc <__adddf3>:
 80002dc:	b530      	push	{r4, r5, lr}
 80002de:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002e2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002e6:	ea94 0f05 	teq	r4, r5
 80002ea:	bf08      	it	eq
 80002ec:	ea90 0f02 	teqeq	r0, r2
 80002f0:	bf1f      	itttt	ne
 80002f2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002f6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002fa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002fe:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000302:	f000 80e2 	beq.w	80004ca <__adddf3+0x1ee>
 8000306:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800030a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800030e:	bfb8      	it	lt
 8000310:	426d      	neglt	r5, r5
 8000312:	dd0c      	ble.n	800032e <__adddf3+0x52>
 8000314:	442c      	add	r4, r5
 8000316:	ea80 0202 	eor.w	r2, r0, r2
 800031a:	ea81 0303 	eor.w	r3, r1, r3
 800031e:	ea82 0000 	eor.w	r0, r2, r0
 8000322:	ea83 0101 	eor.w	r1, r3, r1
 8000326:	ea80 0202 	eor.w	r2, r0, r2
 800032a:	ea81 0303 	eor.w	r3, r1, r3
 800032e:	2d36      	cmp	r5, #54	; 0x36
 8000330:	bf88      	it	hi
 8000332:	bd30      	pophi	{r4, r5, pc}
 8000334:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000338:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800033c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000340:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000344:	d002      	beq.n	800034c <__adddf3+0x70>
 8000346:	4240      	negs	r0, r0
 8000348:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800034c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000350:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000354:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000358:	d002      	beq.n	8000360 <__adddf3+0x84>
 800035a:	4252      	negs	r2, r2
 800035c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000360:	ea94 0f05 	teq	r4, r5
 8000364:	f000 80a7 	beq.w	80004b6 <__adddf3+0x1da>
 8000368:	f1a4 0401 	sub.w	r4, r4, #1
 800036c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000370:	db0d      	blt.n	800038e <__adddf3+0xb2>
 8000372:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000376:	fa22 f205 	lsr.w	r2, r2, r5
 800037a:	1880      	adds	r0, r0, r2
 800037c:	f141 0100 	adc.w	r1, r1, #0
 8000380:	fa03 f20e 	lsl.w	r2, r3, lr
 8000384:	1880      	adds	r0, r0, r2
 8000386:	fa43 f305 	asr.w	r3, r3, r5
 800038a:	4159      	adcs	r1, r3
 800038c:	e00e      	b.n	80003ac <__adddf3+0xd0>
 800038e:	f1a5 0520 	sub.w	r5, r5, #32
 8000392:	f10e 0e20 	add.w	lr, lr, #32
 8000396:	2a01      	cmp	r2, #1
 8000398:	fa03 fc0e 	lsl.w	ip, r3, lr
 800039c:	bf28      	it	cs
 800039e:	f04c 0c02 	orrcs.w	ip, ip, #2
 80003a2:	fa43 f305 	asr.w	r3, r3, r5
 80003a6:	18c0      	adds	r0, r0, r3
 80003a8:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80003ac:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003b0:	d507      	bpl.n	80003c2 <__adddf3+0xe6>
 80003b2:	f04f 0e00 	mov.w	lr, #0
 80003b6:	f1dc 0c00 	rsbs	ip, ip, #0
 80003ba:	eb7e 0000 	sbcs.w	r0, lr, r0
 80003be:	eb6e 0101 	sbc.w	r1, lr, r1
 80003c2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80003c6:	d31b      	bcc.n	8000400 <__adddf3+0x124>
 80003c8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80003cc:	d30c      	bcc.n	80003e8 <__adddf3+0x10c>
 80003ce:	0849      	lsrs	r1, r1, #1
 80003d0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003d4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003d8:	f104 0401 	add.w	r4, r4, #1
 80003dc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003e0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003e4:	f080 809a 	bcs.w	800051c <__adddf3+0x240>
 80003e8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003ec:	bf08      	it	eq
 80003ee:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003f2:	f150 0000 	adcs.w	r0, r0, #0
 80003f6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003fa:	ea41 0105 	orr.w	r1, r1, r5
 80003fe:	bd30      	pop	{r4, r5, pc}
 8000400:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000404:	4140      	adcs	r0, r0
 8000406:	eb41 0101 	adc.w	r1, r1, r1
 800040a:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 800040e:	f1a4 0401 	sub.w	r4, r4, #1
 8000412:	d1e9      	bne.n	80003e8 <__adddf3+0x10c>
 8000414:	f091 0f00 	teq	r1, #0
 8000418:	bf04      	itt	eq
 800041a:	4601      	moveq	r1, r0
 800041c:	2000      	moveq	r0, #0
 800041e:	fab1 f381 	clz	r3, r1
 8000422:	bf08      	it	eq
 8000424:	3320      	addeq	r3, #32
 8000426:	f1a3 030b 	sub.w	r3, r3, #11
 800042a:	f1b3 0220 	subs.w	r2, r3, #32
 800042e:	da0c      	bge.n	800044a <__adddf3+0x16e>
 8000430:	320c      	adds	r2, #12
 8000432:	dd08      	ble.n	8000446 <__adddf3+0x16a>
 8000434:	f102 0c14 	add.w	ip, r2, #20
 8000438:	f1c2 020c 	rsb	r2, r2, #12
 800043c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000440:	fa21 f102 	lsr.w	r1, r1, r2
 8000444:	e00c      	b.n	8000460 <__adddf3+0x184>
 8000446:	f102 0214 	add.w	r2, r2, #20
 800044a:	bfd8      	it	le
 800044c:	f1c2 0c20 	rsble	ip, r2, #32
 8000450:	fa01 f102 	lsl.w	r1, r1, r2
 8000454:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000458:	bfdc      	itt	le
 800045a:	ea41 010c 	orrle.w	r1, r1, ip
 800045e:	4090      	lslle	r0, r2
 8000460:	1ae4      	subs	r4, r4, r3
 8000462:	bfa2      	ittt	ge
 8000464:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000468:	4329      	orrge	r1, r5
 800046a:	bd30      	popge	{r4, r5, pc}
 800046c:	ea6f 0404 	mvn.w	r4, r4
 8000470:	3c1f      	subs	r4, #31
 8000472:	da1c      	bge.n	80004ae <__adddf3+0x1d2>
 8000474:	340c      	adds	r4, #12
 8000476:	dc0e      	bgt.n	8000496 <__adddf3+0x1ba>
 8000478:	f104 0414 	add.w	r4, r4, #20
 800047c:	f1c4 0220 	rsb	r2, r4, #32
 8000480:	fa20 f004 	lsr.w	r0, r0, r4
 8000484:	fa01 f302 	lsl.w	r3, r1, r2
 8000488:	ea40 0003 	orr.w	r0, r0, r3
 800048c:	fa21 f304 	lsr.w	r3, r1, r4
 8000490:	ea45 0103 	orr.w	r1, r5, r3
 8000494:	bd30      	pop	{r4, r5, pc}
 8000496:	f1c4 040c 	rsb	r4, r4, #12
 800049a:	f1c4 0220 	rsb	r2, r4, #32
 800049e:	fa20 f002 	lsr.w	r0, r0, r2
 80004a2:	fa01 f304 	lsl.w	r3, r1, r4
 80004a6:	ea40 0003 	orr.w	r0, r0, r3
 80004aa:	4629      	mov	r1, r5
 80004ac:	bd30      	pop	{r4, r5, pc}
 80004ae:	fa21 f004 	lsr.w	r0, r1, r4
 80004b2:	4629      	mov	r1, r5
 80004b4:	bd30      	pop	{r4, r5, pc}
 80004b6:	f094 0f00 	teq	r4, #0
 80004ba:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80004be:	bf06      	itte	eq
 80004c0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80004c4:	3401      	addeq	r4, #1
 80004c6:	3d01      	subne	r5, #1
 80004c8:	e74e      	b.n	8000368 <__adddf3+0x8c>
 80004ca:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ce:	bf18      	it	ne
 80004d0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004d4:	d029      	beq.n	800052a <__adddf3+0x24e>
 80004d6:	ea94 0f05 	teq	r4, r5
 80004da:	bf08      	it	eq
 80004dc:	ea90 0f02 	teqeq	r0, r2
 80004e0:	d005      	beq.n	80004ee <__adddf3+0x212>
 80004e2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004e6:	bf04      	itt	eq
 80004e8:	4619      	moveq	r1, r3
 80004ea:	4610      	moveq	r0, r2
 80004ec:	bd30      	pop	{r4, r5, pc}
 80004ee:	ea91 0f03 	teq	r1, r3
 80004f2:	bf1e      	ittt	ne
 80004f4:	2100      	movne	r1, #0
 80004f6:	2000      	movne	r0, #0
 80004f8:	bd30      	popne	{r4, r5, pc}
 80004fa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004fe:	d105      	bne.n	800050c <__adddf3+0x230>
 8000500:	0040      	lsls	r0, r0, #1
 8000502:	4149      	adcs	r1, r1
 8000504:	bf28      	it	cs
 8000506:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800050a:	bd30      	pop	{r4, r5, pc}
 800050c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000510:	bf3c      	itt	cc
 8000512:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000516:	bd30      	popcc	{r4, r5, pc}
 8000518:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800051c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000520:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000524:	f04f 0000 	mov.w	r0, #0
 8000528:	bd30      	pop	{r4, r5, pc}
 800052a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800052e:	bf1a      	itte	ne
 8000530:	4619      	movne	r1, r3
 8000532:	4610      	movne	r0, r2
 8000534:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000538:	bf1c      	itt	ne
 800053a:	460b      	movne	r3, r1
 800053c:	4602      	movne	r2, r0
 800053e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000542:	bf06      	itte	eq
 8000544:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000548:	ea91 0f03 	teqeq	r1, r3
 800054c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000550:	bd30      	pop	{r4, r5, pc}
 8000552:	bf00      	nop

08000554 <__aeabi_ui2d>:
 8000554:	f090 0f00 	teq	r0, #0
 8000558:	bf04      	itt	eq
 800055a:	2100      	moveq	r1, #0
 800055c:	4770      	bxeq	lr
 800055e:	b530      	push	{r4, r5, lr}
 8000560:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000564:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000568:	f04f 0500 	mov.w	r5, #0
 800056c:	f04f 0100 	mov.w	r1, #0
 8000570:	e750      	b.n	8000414 <__adddf3+0x138>
 8000572:	bf00      	nop

08000574 <__aeabi_i2d>:
 8000574:	f090 0f00 	teq	r0, #0
 8000578:	bf04      	itt	eq
 800057a:	2100      	moveq	r1, #0
 800057c:	4770      	bxeq	lr
 800057e:	b530      	push	{r4, r5, lr}
 8000580:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000584:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000588:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800058c:	bf48      	it	mi
 800058e:	4240      	negmi	r0, r0
 8000590:	f04f 0100 	mov.w	r1, #0
 8000594:	e73e      	b.n	8000414 <__adddf3+0x138>
 8000596:	bf00      	nop

08000598 <__aeabi_f2d>:
 8000598:	0042      	lsls	r2, r0, #1
 800059a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800059e:	ea4f 0131 	mov.w	r1, r1, rrx
 80005a2:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80005a6:	bf1f      	itttt	ne
 80005a8:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80005ac:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80005b0:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80005b4:	4770      	bxne	lr
 80005b6:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80005ba:	bf08      	it	eq
 80005bc:	4770      	bxeq	lr
 80005be:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80005c2:	bf04      	itt	eq
 80005c4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80005c8:	4770      	bxeq	lr
 80005ca:	b530      	push	{r4, r5, lr}
 80005cc:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005d0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005d4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005d8:	e71c      	b.n	8000414 <__adddf3+0x138>
 80005da:	bf00      	nop

080005dc <__aeabi_ul2d>:
 80005dc:	ea50 0201 	orrs.w	r2, r0, r1
 80005e0:	bf08      	it	eq
 80005e2:	4770      	bxeq	lr
 80005e4:	b530      	push	{r4, r5, lr}
 80005e6:	f04f 0500 	mov.w	r5, #0
 80005ea:	e00a      	b.n	8000602 <__aeabi_l2d+0x16>

080005ec <__aeabi_l2d>:
 80005ec:	ea50 0201 	orrs.w	r2, r0, r1
 80005f0:	bf08      	it	eq
 80005f2:	4770      	bxeq	lr
 80005f4:	b530      	push	{r4, r5, lr}
 80005f6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005fa:	d502      	bpl.n	8000602 <__aeabi_l2d+0x16>
 80005fc:	4240      	negs	r0, r0
 80005fe:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000602:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000606:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800060a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800060e:	f43f aed8 	beq.w	80003c2 <__adddf3+0xe6>
 8000612:	f04f 0203 	mov.w	r2, #3
 8000616:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800061a:	bf18      	it	ne
 800061c:	3203      	addne	r2, #3
 800061e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000622:	bf18      	it	ne
 8000624:	3203      	addne	r2, #3
 8000626:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800062a:	f1c2 0320 	rsb	r3, r2, #32
 800062e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000632:	fa20 f002 	lsr.w	r0, r0, r2
 8000636:	fa01 fe03 	lsl.w	lr, r1, r3
 800063a:	ea40 000e 	orr.w	r0, r0, lr
 800063e:	fa21 f102 	lsr.w	r1, r1, r2
 8000642:	4414      	add	r4, r2
 8000644:	e6bd      	b.n	80003c2 <__adddf3+0xe6>
 8000646:	bf00      	nop

08000648 <__aeabi_dmul>:
 8000648:	b570      	push	{r4, r5, r6, lr}
 800064a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800064e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000652:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000656:	bf1d      	ittte	ne
 8000658:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800065c:	ea94 0f0c 	teqne	r4, ip
 8000660:	ea95 0f0c 	teqne	r5, ip
 8000664:	f000 f8de 	bleq	8000824 <__aeabi_dmul+0x1dc>
 8000668:	442c      	add	r4, r5
 800066a:	ea81 0603 	eor.w	r6, r1, r3
 800066e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000672:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000676:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800067a:	bf18      	it	ne
 800067c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000680:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000684:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000688:	d038      	beq.n	80006fc <__aeabi_dmul+0xb4>
 800068a:	fba0 ce02 	umull	ip, lr, r0, r2
 800068e:	f04f 0500 	mov.w	r5, #0
 8000692:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000696:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800069a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800069e:	f04f 0600 	mov.w	r6, #0
 80006a2:	fbe1 5603 	umlal	r5, r6, r1, r3
 80006a6:	f09c 0f00 	teq	ip, #0
 80006aa:	bf18      	it	ne
 80006ac:	f04e 0e01 	orrne.w	lr, lr, #1
 80006b0:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80006b4:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80006b8:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80006bc:	d204      	bcs.n	80006c8 <__aeabi_dmul+0x80>
 80006be:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006c2:	416d      	adcs	r5, r5
 80006c4:	eb46 0606 	adc.w	r6, r6, r6
 80006c8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006cc:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006d0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006d4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006d8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006dc:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006e0:	bf88      	it	hi
 80006e2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006e6:	d81e      	bhi.n	8000726 <__aeabi_dmul+0xde>
 80006e8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006ec:	bf08      	it	eq
 80006ee:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006f2:	f150 0000 	adcs.w	r0, r0, #0
 80006f6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006fa:	bd70      	pop	{r4, r5, r6, pc}
 80006fc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000700:	ea46 0101 	orr.w	r1, r6, r1
 8000704:	ea40 0002 	orr.w	r0, r0, r2
 8000708:	ea81 0103 	eor.w	r1, r1, r3
 800070c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000710:	bfc2      	ittt	gt
 8000712:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000716:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800071a:	bd70      	popgt	{r4, r5, r6, pc}
 800071c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000720:	f04f 0e00 	mov.w	lr, #0
 8000724:	3c01      	subs	r4, #1
 8000726:	f300 80ab 	bgt.w	8000880 <__aeabi_dmul+0x238>
 800072a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800072e:	bfde      	ittt	le
 8000730:	2000      	movle	r0, #0
 8000732:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000736:	bd70      	pople	{r4, r5, r6, pc}
 8000738:	f1c4 0400 	rsb	r4, r4, #0
 800073c:	3c20      	subs	r4, #32
 800073e:	da35      	bge.n	80007ac <__aeabi_dmul+0x164>
 8000740:	340c      	adds	r4, #12
 8000742:	dc1b      	bgt.n	800077c <__aeabi_dmul+0x134>
 8000744:	f104 0414 	add.w	r4, r4, #20
 8000748:	f1c4 0520 	rsb	r5, r4, #32
 800074c:	fa00 f305 	lsl.w	r3, r0, r5
 8000750:	fa20 f004 	lsr.w	r0, r0, r4
 8000754:	fa01 f205 	lsl.w	r2, r1, r5
 8000758:	ea40 0002 	orr.w	r0, r0, r2
 800075c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000760:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000764:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000768:	fa21 f604 	lsr.w	r6, r1, r4
 800076c:	eb42 0106 	adc.w	r1, r2, r6
 8000770:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000774:	bf08      	it	eq
 8000776:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800077a:	bd70      	pop	{r4, r5, r6, pc}
 800077c:	f1c4 040c 	rsb	r4, r4, #12
 8000780:	f1c4 0520 	rsb	r5, r4, #32
 8000784:	fa00 f304 	lsl.w	r3, r0, r4
 8000788:	fa20 f005 	lsr.w	r0, r0, r5
 800078c:	fa01 f204 	lsl.w	r2, r1, r4
 8000790:	ea40 0002 	orr.w	r0, r0, r2
 8000794:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000798:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800079c:	f141 0100 	adc.w	r1, r1, #0
 80007a0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007a4:	bf08      	it	eq
 80007a6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007aa:	bd70      	pop	{r4, r5, r6, pc}
 80007ac:	f1c4 0520 	rsb	r5, r4, #32
 80007b0:	fa00 f205 	lsl.w	r2, r0, r5
 80007b4:	ea4e 0e02 	orr.w	lr, lr, r2
 80007b8:	fa20 f304 	lsr.w	r3, r0, r4
 80007bc:	fa01 f205 	lsl.w	r2, r1, r5
 80007c0:	ea43 0302 	orr.w	r3, r3, r2
 80007c4:	fa21 f004 	lsr.w	r0, r1, r4
 80007c8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007cc:	fa21 f204 	lsr.w	r2, r1, r4
 80007d0:	ea20 0002 	bic.w	r0, r0, r2
 80007d4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007d8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007dc:	bf08      	it	eq
 80007de:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007e2:	bd70      	pop	{r4, r5, r6, pc}
 80007e4:	f094 0f00 	teq	r4, #0
 80007e8:	d10f      	bne.n	800080a <__aeabi_dmul+0x1c2>
 80007ea:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007ee:	0040      	lsls	r0, r0, #1
 80007f0:	eb41 0101 	adc.w	r1, r1, r1
 80007f4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007f8:	bf08      	it	eq
 80007fa:	3c01      	subeq	r4, #1
 80007fc:	d0f7      	beq.n	80007ee <__aeabi_dmul+0x1a6>
 80007fe:	ea41 0106 	orr.w	r1, r1, r6
 8000802:	f095 0f00 	teq	r5, #0
 8000806:	bf18      	it	ne
 8000808:	4770      	bxne	lr
 800080a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800080e:	0052      	lsls	r2, r2, #1
 8000810:	eb43 0303 	adc.w	r3, r3, r3
 8000814:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000818:	bf08      	it	eq
 800081a:	3d01      	subeq	r5, #1
 800081c:	d0f7      	beq.n	800080e <__aeabi_dmul+0x1c6>
 800081e:	ea43 0306 	orr.w	r3, r3, r6
 8000822:	4770      	bx	lr
 8000824:	ea94 0f0c 	teq	r4, ip
 8000828:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800082c:	bf18      	it	ne
 800082e:	ea95 0f0c 	teqne	r5, ip
 8000832:	d00c      	beq.n	800084e <__aeabi_dmul+0x206>
 8000834:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000838:	bf18      	it	ne
 800083a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800083e:	d1d1      	bne.n	80007e4 <__aeabi_dmul+0x19c>
 8000840:	ea81 0103 	eor.w	r1, r1, r3
 8000844:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000848:	f04f 0000 	mov.w	r0, #0
 800084c:	bd70      	pop	{r4, r5, r6, pc}
 800084e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000852:	bf06      	itte	eq
 8000854:	4610      	moveq	r0, r2
 8000856:	4619      	moveq	r1, r3
 8000858:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800085c:	d019      	beq.n	8000892 <__aeabi_dmul+0x24a>
 800085e:	ea94 0f0c 	teq	r4, ip
 8000862:	d102      	bne.n	800086a <__aeabi_dmul+0x222>
 8000864:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000868:	d113      	bne.n	8000892 <__aeabi_dmul+0x24a>
 800086a:	ea95 0f0c 	teq	r5, ip
 800086e:	d105      	bne.n	800087c <__aeabi_dmul+0x234>
 8000870:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000874:	bf1c      	itt	ne
 8000876:	4610      	movne	r0, r2
 8000878:	4619      	movne	r1, r3
 800087a:	d10a      	bne.n	8000892 <__aeabi_dmul+0x24a>
 800087c:	ea81 0103 	eor.w	r1, r1, r3
 8000880:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000884:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000888:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800088c:	f04f 0000 	mov.w	r0, #0
 8000890:	bd70      	pop	{r4, r5, r6, pc}
 8000892:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000896:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800089a:	bd70      	pop	{r4, r5, r6, pc}

0800089c <__aeabi_ddiv>:
 800089c:	b570      	push	{r4, r5, r6, lr}
 800089e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80008a2:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80008a6:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80008aa:	bf1d      	ittte	ne
 80008ac:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80008b0:	ea94 0f0c 	teqne	r4, ip
 80008b4:	ea95 0f0c 	teqne	r5, ip
 80008b8:	f000 f8a7 	bleq	8000a0a <__aeabi_ddiv+0x16e>
 80008bc:	eba4 0405 	sub.w	r4, r4, r5
 80008c0:	ea81 0e03 	eor.w	lr, r1, r3
 80008c4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008c8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008cc:	f000 8088 	beq.w	80009e0 <__aeabi_ddiv+0x144>
 80008d0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008d4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80008d8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008dc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008e0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008e4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008e8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008ec:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008f0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008f4:	429d      	cmp	r5, r3
 80008f6:	bf08      	it	eq
 80008f8:	4296      	cmpeq	r6, r2
 80008fa:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008fe:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000902:	d202      	bcs.n	800090a <__aeabi_ddiv+0x6e>
 8000904:	085b      	lsrs	r3, r3, #1
 8000906:	ea4f 0232 	mov.w	r2, r2, rrx
 800090a:	1ab6      	subs	r6, r6, r2
 800090c:	eb65 0503 	sbc.w	r5, r5, r3
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800091a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800091e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000922:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000926:	bf22      	ittt	cs
 8000928:	1ab6      	subcs	r6, r6, r2
 800092a:	4675      	movcs	r5, lr
 800092c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000930:	085b      	lsrs	r3, r3, #1
 8000932:	ea4f 0232 	mov.w	r2, r2, rrx
 8000936:	ebb6 0e02 	subs.w	lr, r6, r2
 800093a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800093e:	bf22      	ittt	cs
 8000940:	1ab6      	subcs	r6, r6, r2
 8000942:	4675      	movcs	r5, lr
 8000944:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000948:	085b      	lsrs	r3, r3, #1
 800094a:	ea4f 0232 	mov.w	r2, r2, rrx
 800094e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000952:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000956:	bf22      	ittt	cs
 8000958:	1ab6      	subcs	r6, r6, r2
 800095a:	4675      	movcs	r5, lr
 800095c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000960:	085b      	lsrs	r3, r3, #1
 8000962:	ea4f 0232 	mov.w	r2, r2, rrx
 8000966:	ebb6 0e02 	subs.w	lr, r6, r2
 800096a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800096e:	bf22      	ittt	cs
 8000970:	1ab6      	subcs	r6, r6, r2
 8000972:	4675      	movcs	r5, lr
 8000974:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000978:	ea55 0e06 	orrs.w	lr, r5, r6
 800097c:	d018      	beq.n	80009b0 <__aeabi_ddiv+0x114>
 800097e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000982:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000986:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800098a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800098e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000992:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000996:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800099a:	d1c0      	bne.n	800091e <__aeabi_ddiv+0x82>
 800099c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80009a0:	d10b      	bne.n	80009ba <__aeabi_ddiv+0x11e>
 80009a2:	ea41 0100 	orr.w	r1, r1, r0
 80009a6:	f04f 0000 	mov.w	r0, #0
 80009aa:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80009ae:	e7b6      	b.n	800091e <__aeabi_ddiv+0x82>
 80009b0:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80009b4:	bf04      	itt	eq
 80009b6:	4301      	orreq	r1, r0
 80009b8:	2000      	moveq	r0, #0
 80009ba:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80009be:	bf88      	it	hi
 80009c0:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80009c4:	f63f aeaf 	bhi.w	8000726 <__aeabi_dmul+0xde>
 80009c8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009cc:	bf04      	itt	eq
 80009ce:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009d2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009d6:	f150 0000 	adcs.w	r0, r0, #0
 80009da:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009de:	bd70      	pop	{r4, r5, r6, pc}
 80009e0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009e4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009e8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009ec:	bfc2      	ittt	gt
 80009ee:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009f2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009f6:	bd70      	popgt	{r4, r5, r6, pc}
 80009f8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009fc:	f04f 0e00 	mov.w	lr, #0
 8000a00:	3c01      	subs	r4, #1
 8000a02:	e690      	b.n	8000726 <__aeabi_dmul+0xde>
 8000a04:	ea45 0e06 	orr.w	lr, r5, r6
 8000a08:	e68d      	b.n	8000726 <__aeabi_dmul+0xde>
 8000a0a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000a0e:	ea94 0f0c 	teq	r4, ip
 8000a12:	bf08      	it	eq
 8000a14:	ea95 0f0c 	teqeq	r5, ip
 8000a18:	f43f af3b 	beq.w	8000892 <__aeabi_dmul+0x24a>
 8000a1c:	ea94 0f0c 	teq	r4, ip
 8000a20:	d10a      	bne.n	8000a38 <__aeabi_ddiv+0x19c>
 8000a22:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a26:	f47f af34 	bne.w	8000892 <__aeabi_dmul+0x24a>
 8000a2a:	ea95 0f0c 	teq	r5, ip
 8000a2e:	f47f af25 	bne.w	800087c <__aeabi_dmul+0x234>
 8000a32:	4610      	mov	r0, r2
 8000a34:	4619      	mov	r1, r3
 8000a36:	e72c      	b.n	8000892 <__aeabi_dmul+0x24a>
 8000a38:	ea95 0f0c 	teq	r5, ip
 8000a3c:	d106      	bne.n	8000a4c <__aeabi_ddiv+0x1b0>
 8000a3e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a42:	f43f aefd 	beq.w	8000840 <__aeabi_dmul+0x1f8>
 8000a46:	4610      	mov	r0, r2
 8000a48:	4619      	mov	r1, r3
 8000a4a:	e722      	b.n	8000892 <__aeabi_dmul+0x24a>
 8000a4c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a50:	bf18      	it	ne
 8000a52:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a56:	f47f aec5 	bne.w	80007e4 <__aeabi_dmul+0x19c>
 8000a5a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a5e:	f47f af0d 	bne.w	800087c <__aeabi_dmul+0x234>
 8000a62:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a66:	f47f aeeb 	bne.w	8000840 <__aeabi_dmul+0x1f8>
 8000a6a:	e712      	b.n	8000892 <__aeabi_dmul+0x24a>

08000a6c <__gedf2>:
 8000a6c:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
 8000a70:	e006      	b.n	8000a80 <__cmpdf2+0x4>
 8000a72:	bf00      	nop

08000a74 <__ledf2>:
 8000a74:	f04f 0c01 	mov.w	ip, #1
 8000a78:	e002      	b.n	8000a80 <__cmpdf2+0x4>
 8000a7a:	bf00      	nop

08000a7c <__cmpdf2>:
 8000a7c:	f04f 0c01 	mov.w	ip, #1
 8000a80:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a84:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a88:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a8c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a90:	bf18      	it	ne
 8000a92:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a96:	d01b      	beq.n	8000ad0 <__cmpdf2+0x54>
 8000a98:	b001      	add	sp, #4
 8000a9a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a9e:	bf0c      	ite	eq
 8000aa0:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000aa4:	ea91 0f03 	teqne	r1, r3
 8000aa8:	bf02      	ittt	eq
 8000aaa:	ea90 0f02 	teqeq	r0, r2
 8000aae:	2000      	moveq	r0, #0
 8000ab0:	4770      	bxeq	lr
 8000ab2:	f110 0f00 	cmn.w	r0, #0
 8000ab6:	ea91 0f03 	teq	r1, r3
 8000aba:	bf58      	it	pl
 8000abc:	4299      	cmppl	r1, r3
 8000abe:	bf08      	it	eq
 8000ac0:	4290      	cmpeq	r0, r2
 8000ac2:	bf2c      	ite	cs
 8000ac4:	17d8      	asrcs	r0, r3, #31
 8000ac6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000aca:	f040 0001 	orr.w	r0, r0, #1
 8000ace:	4770      	bx	lr
 8000ad0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ad4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ad8:	d102      	bne.n	8000ae0 <__cmpdf2+0x64>
 8000ada:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000ade:	d107      	bne.n	8000af0 <__cmpdf2+0x74>
 8000ae0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ae4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ae8:	d1d6      	bne.n	8000a98 <__cmpdf2+0x1c>
 8000aea:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000aee:	d0d3      	beq.n	8000a98 <__cmpdf2+0x1c>
 8000af0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000af4:	4770      	bx	lr
 8000af6:	bf00      	nop

08000af8 <__aeabi_cdrcmple>:
 8000af8:	4684      	mov	ip, r0
 8000afa:	4610      	mov	r0, r2
 8000afc:	4662      	mov	r2, ip
 8000afe:	468c      	mov	ip, r1
 8000b00:	4619      	mov	r1, r3
 8000b02:	4663      	mov	r3, ip
 8000b04:	e000      	b.n	8000b08 <__aeabi_cdcmpeq>
 8000b06:	bf00      	nop

08000b08 <__aeabi_cdcmpeq>:
 8000b08:	b501      	push	{r0, lr}
 8000b0a:	f7ff ffb7 	bl	8000a7c <__cmpdf2>
 8000b0e:	2800      	cmp	r0, #0
 8000b10:	bf48      	it	mi
 8000b12:	f110 0f00 	cmnmi.w	r0, #0
 8000b16:	bd01      	pop	{r0, pc}

08000b18 <__aeabi_dcmpeq>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff fff4 	bl	8000b08 <__aeabi_cdcmpeq>
 8000b20:	bf0c      	ite	eq
 8000b22:	2001      	moveq	r0, #1
 8000b24:	2000      	movne	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmplt>:
 8000b2c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b30:	f7ff ffea 	bl	8000b08 <__aeabi_cdcmpeq>
 8000b34:	bf34      	ite	cc
 8000b36:	2001      	movcc	r0, #1
 8000b38:	2000      	movcs	r0, #0
 8000b3a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b3e:	bf00      	nop

08000b40 <__aeabi_dcmple>:
 8000b40:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b44:	f7ff ffe0 	bl	8000b08 <__aeabi_cdcmpeq>
 8000b48:	bf94      	ite	ls
 8000b4a:	2001      	movls	r0, #1
 8000b4c:	2000      	movhi	r0, #0
 8000b4e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b52:	bf00      	nop

08000b54 <__aeabi_dcmpge>:
 8000b54:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b58:	f7ff ffce 	bl	8000af8 <__aeabi_cdrcmple>
 8000b5c:	bf94      	ite	ls
 8000b5e:	2001      	movls	r0, #1
 8000b60:	2000      	movhi	r0, #0
 8000b62:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b66:	bf00      	nop

08000b68 <__aeabi_dcmpgt>:
 8000b68:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b6c:	f7ff ffc4 	bl	8000af8 <__aeabi_cdrcmple>
 8000b70:	bf34      	ite	cc
 8000b72:	2001      	movcc	r0, #1
 8000b74:	2000      	movcs	r0, #0
 8000b76:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b7a:	bf00      	nop

08000b7c <__aeabi_dcmpun>:
 8000b7c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b80:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b84:	d102      	bne.n	8000b8c <__aeabi_dcmpun+0x10>
 8000b86:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b8a:	d10a      	bne.n	8000ba2 <__aeabi_dcmpun+0x26>
 8000b8c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b90:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b94:	d102      	bne.n	8000b9c <__aeabi_dcmpun+0x20>
 8000b96:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b9a:	d102      	bne.n	8000ba2 <__aeabi_dcmpun+0x26>
 8000b9c:	f04f 0000 	mov.w	r0, #0
 8000ba0:	4770      	bx	lr
 8000ba2:	f04f 0001 	mov.w	r0, #1
 8000ba6:	4770      	bx	lr

08000ba8 <__aeabi_d2iz>:
 8000ba8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bac:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000bb0:	d215      	bcs.n	8000bde <__aeabi_d2iz+0x36>
 8000bb2:	d511      	bpl.n	8000bd8 <__aeabi_d2iz+0x30>
 8000bb4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000bb8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bbc:	d912      	bls.n	8000be4 <__aeabi_d2iz+0x3c>
 8000bbe:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bc2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bc6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bca:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000bce:	fa23 f002 	lsr.w	r0, r3, r2
 8000bd2:	bf18      	it	ne
 8000bd4:	4240      	negne	r0, r0
 8000bd6:	4770      	bx	lr
 8000bd8:	f04f 0000 	mov.w	r0, #0
 8000bdc:	4770      	bx	lr
 8000bde:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000be2:	d105      	bne.n	8000bf0 <__aeabi_d2iz+0x48>
 8000be4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000be8:	bf08      	it	eq
 8000bea:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bee:	4770      	bx	lr
 8000bf0:	f04f 0000 	mov.w	r0, #0
 8000bf4:	4770      	bx	lr
 8000bf6:	bf00      	nop

08000bf8 <DM_Init>:
 *	@param None
 *	@retval None
 *
 */
void DM_Init()
{
 8000bf8:	b580      	push	{r7, lr}
 8000bfa:	af00      	add	r7, sp, #0
	  ILI9341_Init();
 8000bfc:	f00a fb6e 	bl	800b2dc <ILI9341_Init>
	  ILI9341_Set_Rotation(SCREEN_HORIZONTAL_2);
 8000c00:	2003      	movs	r0, #3
 8000c02:	f00a ff5b 	bl	800babc <ILI9341_Set_Rotation>
	  ILI9341_Fill_Screen(WHITE);
 8000c06:	f64f 70ff 	movw	r0, #65535	; 0xffff
 8000c0a:	f00a fd6f 	bl	800b6ec <ILI9341_Fill_Screen>

}
 8000c0e:	bf00      	nop
 8000c10:	bd80      	pop	{r7, pc}
	...

08000c14 <DM_PostInit>:
 *	@param None
 *	@retval None
 *
 */
void DM_PostInit()
{
 8000c14:	b580      	push	{r7, lr}
 8000c16:	b082      	sub	sp, #8
 8000c18:	af02      	add	r7, sp, #8

	  ILI9341_Draw_Text("Initialising", 10, 10, BLACK, 1, WHITE);
 8000c1a:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000c1e:	9301      	str	r3, [sp, #4]
 8000c20:	2301      	movs	r3, #1
 8000c22:	9300      	str	r3, [sp, #0]
 8000c24:	2300      	movs	r3, #0
 8000c26:	220a      	movs	r2, #10
 8000c28:	210a      	movs	r1, #10
 8000c2a:	4807      	ldr	r0, [pc, #28]	; (8000c48 <DM_PostInit+0x34>)
 8000c2c:	f00a fb04 	bl	800b238 <ILI9341_Draw_Text>
	  HAL_Delay(500);
 8000c30:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000c34:	f004 fe0a 	bl	800584c <HAL_Delay>

	  DM_RefreshBackgroundLayout();
 8000c38:	f000 fc1e 	bl	8001478 <DM_RefreshBackgroundLayout>
	  printf("Init Completed\n");
 8000c3c:	4803      	ldr	r0, [pc, #12]	; (8000c4c <DM_PostInit+0x38>)
 8000c3e:	f00b fde5 	bl	800c80c <puts>
}
 8000c42:	bf00      	nop
 8000c44:	46bd      	mov	sp, r7
 8000c46:	bd80      	pop	{r7, pc}
 8000c48:	0800e6d8 	.word	0x0800e6d8
 8000c4c:	0800e6e8 	.word	0x0800e6e8

08000c50 <DM_DisplayFormattedOutput>:
 *	@param None
 *	@retval None
 *
 */
void DM_DisplayFormattedOutput()
{
 8000c50:	b590      	push	{r4, r7, lr}
 8000c52:	b093      	sub	sp, #76	; 0x4c
 8000c54:	af02      	add	r7, sp, #8
	char out_hertz[13] = "";
 8000c56:	2300      	movs	r3, #0
 8000c58:	61fb      	str	r3, [r7, #28]
 8000c5a:	f107 0320 	add.w	r3, r7, #32
 8000c5e:	2200      	movs	r2, #0
 8000c60:	601a      	str	r2, [r3, #0]
 8000c62:	605a      	str	r2, [r3, #4]
 8000c64:	721a      	strb	r2, [r3, #8]
	uint8_t out_hertz_x = 70;
 8000c66:	2346      	movs	r3, #70	; 0x46
 8000c68:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
	uint8_t out_hertz_y = 50;
 8000c6c:	2332      	movs	r3, #50	; 0x32
 8000c6e:	f887 303a 	strb.w	r3, [r7, #58]	; 0x3a

	char out_decibels[8] = "";
 8000c72:	2300      	movs	r3, #0
 8000c74:	617b      	str	r3, [r7, #20]
 8000c76:	2300      	movs	r3, #0
 8000c78:	61bb      	str	r3, [r7, #24]
	uint8_t out_decibels_x = 70;
 8000c7a:	2346      	movs	r3, #70	; 0x46
 8000c7c:	f887 3039 	strb.w	r3, [r7, #57]	; 0x39
	uint8_t out_decibels_y = 80;
 8000c80:	2350      	movs	r3, #80	; 0x50
 8000c82:	f887 3038 	strb.w	r3, [r7, #56]	; 0x38

	float volts_per_thou = 0.00075;
 8000c86:	4b65      	ldr	r3, [pc, #404]	; (8000e1c <DM_DisplayFormattedOutput+0x1cc>)
 8000c88:	637b      	str	r3, [r7, #52]	; 0x34
	char out_dcvolts[10] = "";
 8000c8a:	2300      	movs	r3, #0
 8000c8c:	60bb      	str	r3, [r7, #8]
 8000c8e:	f107 030c 	add.w	r3, r7, #12
 8000c92:	2200      	movs	r2, #0
 8000c94:	601a      	str	r2, [r3, #0]
 8000c96:	809a      	strh	r2, [r3, #4]
	uint8_t out_dcvolts_x = 70;
 8000c98:	2346      	movs	r3, #70	; 0x46
 8000c9a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
	uint8_t out_dcvolts_y = 110;
 8000c9e:	236e      	movs	r3, #110	; 0x6e
 8000ca0:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32

	// display output in hertz
	snprintf(out_hertz, sizeof(out_hertz), "%4.2f Hz", SM_GetOutputInHertz());
 8000ca4:	f002 ff50 	bl	8003b48 <SM_GetOutputInHertz>
 8000ca8:	ee10 3a10 	vmov	r3, s0
 8000cac:	4618      	mov	r0, r3
 8000cae:	f7ff fc73 	bl	8000598 <__aeabi_f2d>
 8000cb2:	4603      	mov	r3, r0
 8000cb4:	460c      	mov	r4, r1
 8000cb6:	f107 001c 	add.w	r0, r7, #28
 8000cba:	e9cd 3400 	strd	r3, r4, [sp]
 8000cbe:	4a58      	ldr	r2, [pc, #352]	; (8000e20 <DM_DisplayFormattedOutput+0x1d0>)
 8000cc0:	210d      	movs	r1, #13
 8000cc2:	f00b fdab 	bl	800c81c <sniprintf>
	ILI9341_Draw_Text(out_hertz, out_hertz_x, out_hertz_y, BLACK, 3, WHITE);
 8000cc6:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 8000cca:	b299      	uxth	r1, r3
 8000ccc:	f897 303a 	ldrb.w	r3, [r7, #58]	; 0x3a
 8000cd0:	b29a      	uxth	r2, r3
 8000cd2:	f107 001c 	add.w	r0, r7, #28
 8000cd6:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000cda:	9301      	str	r3, [sp, #4]
 8000cdc:	2303      	movs	r3, #3
 8000cde:	9300      	str	r3, [sp, #0]
 8000ce0:	2300      	movs	r3, #0
 8000ce2:	f00a faa9 	bl	800b238 <ILI9341_Draw_Text>

	// display output in decibels
	Gain_Preset_Encoder_Pos_t *pGainPresetTmp =  GO_GetGPresetObject();
 8000ce6:	f002 fefb 	bl	8003ae0 <GO_GetGPresetObject>
 8000cea:	62f8      	str	r0, [r7, #44]	; 0x2c
	if(pGainPresetTmp)
 8000cec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000cee:	2b00      	cmp	r3, #0
 8000cf0:	d027      	beq.n	8000d42 <DM_DisplayFormattedOutput+0xf2>
	{
		if(pGainPresetTmp->decibels < 0)
 8000cf2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000cf4:	f993 3001 	ldrsb.w	r3, [r3, #1]
 8000cf8:	2b00      	cmp	r3, #0
 8000cfa:	da06      	bge.n	8000d0a <DM_DisplayFormattedOutput+0xba>
			snprintf(out_decibels, sizeof(out_decibels), "AMP OFF");
 8000cfc:	4a49      	ldr	r2, [pc, #292]	; (8000e24 <DM_DisplayFormattedOutput+0x1d4>)
 8000cfe:	f107 0314 	add.w	r3, r7, #20
 8000d02:	e892 0003 	ldmia.w	r2, {r0, r1}
 8000d06:	e883 0003 	stmia.w	r3, {r0, r1}
		if(pGainPresetTmp->decibels == 0)
 8000d0a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000d0c:	f993 3001 	ldrsb.w	r3, [r3, #1]
 8000d10:	2b00      	cmp	r3, #0
 8000d12:	d108      	bne.n	8000d26 <DM_DisplayFormattedOutput+0xd6>
			snprintf(out_decibels, sizeof(out_decibels), "  %2d dB", pGainPresetTmp->decibels);
 8000d14:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000d16:	f993 3001 	ldrsb.w	r3, [r3, #1]
 8000d1a:	f107 0014 	add.w	r0, r7, #20
 8000d1e:	4a42      	ldr	r2, [pc, #264]	; (8000e28 <DM_DisplayFormattedOutput+0x1d8>)
 8000d20:	2108      	movs	r1, #8
 8000d22:	f00b fd7b 	bl	800c81c <sniprintf>
		if(pGainPresetTmp->decibels > 0)
 8000d26:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000d28:	f993 3001 	ldrsb.w	r3, [r3, #1]
 8000d2c:	2b00      	cmp	r3, #0
 8000d2e:	dd08      	ble.n	8000d42 <DM_DisplayFormattedOutput+0xf2>
			snprintf(out_decibels, sizeof(out_decibels), " +%2d dB", pGainPresetTmp->decibels);
 8000d30:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000d32:	f993 3001 	ldrsb.w	r3, [r3, #1]
 8000d36:	f107 0014 	add.w	r0, r7, #20
 8000d3a:	4a3c      	ldr	r2, [pc, #240]	; (8000e2c <DM_DisplayFormattedOutput+0x1dc>)
 8000d3c:	2108      	movs	r1, #8
 8000d3e:	f00b fd6d 	bl	800c81c <sniprintf>

	}

	ILI9341_Draw_Text(out_decibels, out_decibels_x, out_decibels_y, BLACK, 3, WHITE);
 8000d42:	f897 3039 	ldrb.w	r3, [r7, #57]	; 0x39
 8000d46:	b299      	uxth	r1, r3
 8000d48:	f897 3038 	ldrb.w	r3, [r7, #56]	; 0x38
 8000d4c:	b29a      	uxth	r2, r3
 8000d4e:	f107 0014 	add.w	r0, r7, #20
 8000d52:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000d56:	9301      	str	r3, [sp, #4]
 8000d58:	2303      	movs	r3, #3
 8000d5a:	9300      	str	r3, [sp, #0]
 8000d5c:	2300      	movs	r3, #0
 8000d5e:	f00a fa6b 	bl	800b238 <ILI9341_Draw_Text>

	// display output bias in +/- Volts
	float dc_volts;
	(BO_GetOutputBias() == 0) ? (dc_volts = 0) : (dc_volts = volts_per_thou * (float)BO_GetOutputBias());
 8000d62:	f002 fa83 	bl	800326c <BO_GetOutputBias>
 8000d66:	4603      	mov	r3, r0
 8000d68:	2b00      	cmp	r3, #0
 8000d6a:	d103      	bne.n	8000d74 <DM_DisplayFormattedOutput+0x124>
 8000d6c:	f04f 0300 	mov.w	r3, #0
 8000d70:	63fb      	str	r3, [r7, #60]	; 0x3c
 8000d72:	e00b      	b.n	8000d8c <DM_DisplayFormattedOutput+0x13c>
 8000d74:	f002 fa7a 	bl	800326c <BO_GetOutputBias>
 8000d78:	ee07 0a90 	vmov	s15, r0
 8000d7c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8000d80:	ed97 7a0d 	vldr	s14, [r7, #52]	; 0x34
 8000d84:	ee67 7a27 	vmul.f32	s15, s14, s15
 8000d88:	edc7 7a0f 	vstr	s15, [r7, #60]	; 0x3c

	snprintf(out_dcvolts, sizeof(out_dcvolts), "%1.4f v", dc_volts);
 8000d8c:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8000d8e:	f7ff fc03 	bl	8000598 <__aeabi_f2d>
 8000d92:	4603      	mov	r3, r0
 8000d94:	460c      	mov	r4, r1
 8000d96:	f107 0008 	add.w	r0, r7, #8
 8000d9a:	e9cd 3400 	strd	r3, r4, [sp]
 8000d9e:	4a24      	ldr	r2, [pc, #144]	; (8000e30 <DM_DisplayFormattedOutput+0x1e0>)
 8000da0:	210a      	movs	r1, #10
 8000da2:	f00b fd3b 	bl	800c81c <sniprintf>
	//if(DM_AddDigitPadding(dc_volts, out_dcvolts, sizeof(out_dcvolts)) == 0)
	//{
		if(BO_GetBiasPolarity())
 8000da6:	f002 fa0f 	bl	80031c8 <BO_GetBiasPolarity>
 8000daa:	4603      	mov	r3, r0
 8000dac:	2b00      	cmp	r3, #0
 8000dae:	d018      	beq.n	8000de2 <DM_DisplayFormattedOutput+0x192>
		{
			char symbol[2] = "+\0";
 8000db0:	4b20      	ldr	r3, [pc, #128]	; (8000e34 <DM_DisplayFormattedOutput+0x1e4>)
 8000db2:	881b      	ldrh	r3, [r3, #0]
 8000db4:	80bb      	strh	r3, [r7, #4]
			ILI9341_Draw_Text(strcat(symbol, out_dcvolts), out_dcvolts_x, out_dcvolts_y, BLACK, 3, WHITE);
 8000db6:	f107 0208 	add.w	r2, r7, #8
 8000dba:	1d3b      	adds	r3, r7, #4
 8000dbc:	4611      	mov	r1, r2
 8000dbe:	4618      	mov	r0, r3
 8000dc0:	f00b fd60 	bl	800c884 <strcat>
 8000dc4:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8000dc8:	b299      	uxth	r1, r3
 8000dca:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 8000dce:	b29a      	uxth	r2, r3
 8000dd0:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000dd4:	9301      	str	r3, [sp, #4]
 8000dd6:	2303      	movs	r3, #3
 8000dd8:	9300      	str	r3, [sp, #0]
 8000dda:	2300      	movs	r3, #0
 8000ddc:	f00a fa2c 	bl	800b238 <ILI9341_Draw_Text>
		{
			char symbol[2] = "-\0";
			ILI9341_Draw_Text(strcat(symbol, out_dcvolts), out_dcvolts_x, out_dcvolts_y, BLACK, 3, WHITE);
		}
	//}
}
 8000de0:	e017      	b.n	8000e12 <DM_DisplayFormattedOutput+0x1c2>
			char symbol[2] = "-\0";
 8000de2:	4b15      	ldr	r3, [pc, #84]	; (8000e38 <DM_DisplayFormattedOutput+0x1e8>)
 8000de4:	881b      	ldrh	r3, [r3, #0]
 8000de6:	803b      	strh	r3, [r7, #0]
			ILI9341_Draw_Text(strcat(symbol, out_dcvolts), out_dcvolts_x, out_dcvolts_y, BLACK, 3, WHITE);
 8000de8:	f107 0208 	add.w	r2, r7, #8
 8000dec:	463b      	mov	r3, r7
 8000dee:	4611      	mov	r1, r2
 8000df0:	4618      	mov	r0, r3
 8000df2:	f00b fd47 	bl	800c884 <strcat>
 8000df6:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8000dfa:	b299      	uxth	r1, r3
 8000dfc:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 8000e00:	b29a      	uxth	r2, r3
 8000e02:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000e06:	9301      	str	r3, [sp, #4]
 8000e08:	2303      	movs	r3, #3
 8000e0a:	9300      	str	r3, [sp, #0]
 8000e0c:	2300      	movs	r3, #0
 8000e0e:	f00a fa13 	bl	800b238 <ILI9341_Draw_Text>
}
 8000e12:	bf00      	nop
 8000e14:	3744      	adds	r7, #68	; 0x44
 8000e16:	46bd      	mov	sp, r7
 8000e18:	bd90      	pop	{r4, r7, pc}
 8000e1a:	bf00      	nop
 8000e1c:	3a449ba6 	.word	0x3a449ba6
 8000e20:	0800e6f8 	.word	0x0800e6f8
 8000e24:	0800e704 	.word	0x0800e704
 8000e28:	0800e70c 	.word	0x0800e70c
 8000e2c:	0800e718 	.word	0x0800e718
 8000e30:	0800e724 	.word	0x0800e724
 8000e34:	0800e72c 	.word	0x0800e72c
 8000e38:	0800e730 	.word	0x0800e730

08000e3c <DM_UpdateDisplay>:
 *	@param None
 *	@retval None
 *
 */
void DM_UpdateDisplay()
{
 8000e3c:	b580      	push	{r7, lr}
 8000e3e:	b084      	sub	sp, #16
 8000e40:	af02      	add	r7, sp, #8


	if(eNextFuncMenuStatus)		//  == ENABLE_FUNCMENU
 8000e42:	4b4c      	ldr	r3, [pc, #304]	; (8000f74 <DM_UpdateDisplay+0x138>)
 8000e44:	781b      	ldrb	r3, [r3, #0]
 8000e46:	2b00      	cmp	r3, #0
 8000e48:	d002      	beq.n	8000e50 <DM_UpdateDisplay+0x14>
 		ILI9341_Draw_Text("    ", 10, 210, BLACK, 2, DARKCYAN);
		ILI9341_Draw_Text("    ", 100, 210, BLACK, 2, DARKGREEN);
		ILI9341_Draw_Text("    ", 175, 210, BLACK, 2, YELLOW);
		ILI9341_Draw_Text("    ", 260, 210, BLACK, 2, RED);
*/
		_DrawFuncSelectMenu();
 8000e4a:	f000 f8b7 	bl	8000fbc <_DrawFuncSelectMenu>
 8000e4e:	e071      	b.n	8000f34 <DM_UpdateDisplay+0xf8>
	}
	else if(eNextGainMenuStatus)		//  == ENABLE_GAINMENU
 8000e50:	4b49      	ldr	r3, [pc, #292]	; (8000f78 <DM_UpdateDisplay+0x13c>)
 8000e52:	781b      	ldrb	r3, [r3, #0]
 8000e54:	2b00      	cmp	r3, #0
 8000e56:	d004      	beq.n	8000e62 <DM_UpdateDisplay+0x26>
		ILI9341_Draw_Text("    ", 10, 210, BLACK, 2, DARKCYAN);
		ILI9341_Draw_Text("    ", 100, 210, BLACK, 2, DARKGREEN);
		ILI9341_Draw_Text("    ", 175, 210, BLACK, 2, YELLOW);
		ILI9341_Draw_Text("    ", 260, 210, BLACK, 2, RED);
*/
		DM_DisplayFormattedOutput();
 8000e58:	f7ff fefa 	bl	8000c50 <DM_DisplayFormattedOutput>
		_DrawGainSelectMenu();
 8000e5c:	f000 fa9a 	bl	8001394 <_DrawGainSelectMenu>
 8000e60:	e068      	b.n	8000f34 <DM_UpdateDisplay+0xf8>
	}
	else if(eNextFreqMenuStatus)		//  frequency menu enabled
 8000e62:	4b46      	ldr	r3, [pc, #280]	; (8000f7c <DM_UpdateDisplay+0x140>)
 8000e64:	781b      	ldrb	r3, [r3, #0]
 8000e66:	2b00      	cmp	r3, #0
 8000e68:	d02a      	beq.n	8000ec0 <DM_UpdateDisplay+0x84>
	{

		ILI9341_Draw_Text("FREQUENCY MENU", 	30, 10, WHITE, 3, BLACK);
 8000e6a:	2300      	movs	r3, #0
 8000e6c:	9301      	str	r3, [sp, #4]
 8000e6e:	2303      	movs	r3, #3
 8000e70:	9300      	str	r3, [sp, #0]
 8000e72:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000e76:	220a      	movs	r2, #10
 8000e78:	211e      	movs	r1, #30
 8000e7a:	4841      	ldr	r0, [pc, #260]	; (8000f80 <DM_UpdateDisplay+0x144>)
 8000e7c:	f00a f9dc 	bl	800b238 <ILI9341_Draw_Text>
		ILI9341_Draw_Text("1Hz", 24, 210, BLACK, 2, DARKCYAN);
		ILI9341_Draw_Text("100Hz", 93, 210, BLACK, 2, DARKGREEN);
		ILI9341_Draw_Text("1KHz", 175, 210, BLACK, 2, YELLOW);
		ILI9341_Draw_Text("100KHz", 247, 210, BLACK, 2, RED);
*/
		switch(eNextFreqMenuStatus)
 8000e80:	4b3e      	ldr	r3, [pc, #248]	; (8000f7c <DM_UpdateDisplay+0x140>)
 8000e82:	781b      	ldrb	r3, [r3, #0]
 8000e84:	3b01      	subs	r3, #1
 8000e86:	2b03      	cmp	r3, #3
 8000e88:	d853      	bhi.n	8000f32 <DM_UpdateDisplay+0xf6>
 8000e8a:	a201      	add	r2, pc, #4	; (adr r2, 8000e90 <DM_UpdateDisplay+0x54>)
 8000e8c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000e90:	08000ea1 	.word	0x08000ea1
 8000e94:	08000eab 	.word	0x08000eab
 8000e98:	08000eb1 	.word	0x08000eb1
 8000e9c:	08000ebb 	.word	0x08000ebb
		{
			case ENABLE_FREQ_MAIN_MENU:

				DM_DisplayFormattedOutput();
 8000ea0:	f7ff fed6 	bl	8000c50 <DM_DisplayFormattedOutput>

				FreqMenu_DrawFreqMainMenu();
 8000ea4:	f000 fb94 	bl	80015d0 <FreqMenu_DrawFreqMainMenu>

				break;
 8000ea8:	e044      	b.n	8000f34 <DM_UpdateDisplay+0xf8>

			case ENABLE_FREQ_PRESET_MENU:
				FreqMenu_DrawFreqPresetMenu();
 8000eaa:	f000 fbcb 	bl	8001644 <FreqMenu_DrawFreqPresetMenu>
				break;
 8000eae:	e041      	b.n	8000f34 <DM_UpdateDisplay+0xf8>

			case ENABLE_FREQ_ADJUST_MENU:

				DM_DisplayFormattedOutput();
 8000eb0:	f7ff fece 	bl	8000c50 <DM_DisplayFormattedOutput>

				FreqMenu_DrawFreqAdjustMenu();
 8000eb4:	f001 fe4c 	bl	8002b50 <FreqMenu_DrawFreqAdjustMenu>

				break;
 8000eb8:	e03c      	b.n	8000f34 <DM_UpdateDisplay+0xf8>

			case ENABLE_FREQ_SWEEP_MENU:
				FreqMenu_DrawFreqSweepMenu();
 8000eba:	f001 fe79 	bl	8002bb0 <FreqMenu_DrawFreqSweepMenu>
				break;
 8000ebe:	e039      	b.n	8000f34 <DM_UpdateDisplay+0xf8>
			default:
				break;
		}

	}
	else if(eNextBiasMenuStatus)		//  == ENABLE_BIASMENU
 8000ec0:	4b30      	ldr	r3, [pc, #192]	; (8000f84 <DM_UpdateDisplay+0x148>)
 8000ec2:	781b      	ldrb	r3, [r3, #0]
 8000ec4:	2b00      	cmp	r3, #0
 8000ec6:	d004      	beq.n	8000ed2 <DM_UpdateDisplay+0x96>
		ILI9341_Draw_Text("    ", 10, 210, BLACK, 2, DARKCYAN);
		ILI9341_Draw_Text("    ", 100, 210, BLACK, 2, DARKGREEN);
		ILI9341_Draw_Text("    ", 175, 210, BLACK, 2, YELLOW);
		ILI9341_Draw_Text("    ", 260, 210, BLACK, 2, RED);
*/
		DM_DisplayFormattedOutput();
 8000ec8:	f7ff fec2 	bl	8000c50 <DM_DisplayFormattedOutput>
		_DrawBiasSelectMenu();
 8000ecc:	f000 fa96 	bl	80013fc <_DrawBiasSelectMenu>
 8000ed0:	e030      	b.n	8000f34 <DM_UpdateDisplay+0xf8>
	}
	else
	{
		DM_DisplayFormattedOutput();
 8000ed2:	f7ff febd 	bl	8000c50 <DM_DisplayFormattedOutput>

		ILI9341_Draw_Text("FUNC", 10, 210, BLACK, 2, DARKCYAN);
 8000ed6:	f240 33ef 	movw	r3, #1007	; 0x3ef
 8000eda:	9301      	str	r3, [sp, #4]
 8000edc:	2302      	movs	r3, #2
 8000ede:	9300      	str	r3, [sp, #0]
 8000ee0:	2300      	movs	r3, #0
 8000ee2:	22d2      	movs	r2, #210	; 0xd2
 8000ee4:	210a      	movs	r1, #10
 8000ee6:	4828      	ldr	r0, [pc, #160]	; (8000f88 <DM_UpdateDisplay+0x14c>)
 8000ee8:	f00a f9a6 	bl	800b238 <ILI9341_Draw_Text>
		ILI9341_Draw_Text("FREQ", 100, 210, BLACK, 2, DARKGREEN);
 8000eec:	f44f 7378 	mov.w	r3, #992	; 0x3e0
 8000ef0:	9301      	str	r3, [sp, #4]
 8000ef2:	2302      	movs	r3, #2
 8000ef4:	9300      	str	r3, [sp, #0]
 8000ef6:	2300      	movs	r3, #0
 8000ef8:	22d2      	movs	r2, #210	; 0xd2
 8000efa:	2164      	movs	r1, #100	; 0x64
 8000efc:	4823      	ldr	r0, [pc, #140]	; (8000f8c <DM_UpdateDisplay+0x150>)
 8000efe:	f00a f99b 	bl	800b238 <ILI9341_Draw_Text>
		ILI9341_Draw_Text("GAIN", 175, 210, BLACK, 2, YELLOW);
 8000f02:	f64f 73e0 	movw	r3, #65504	; 0xffe0
 8000f06:	9301      	str	r3, [sp, #4]
 8000f08:	2302      	movs	r3, #2
 8000f0a:	9300      	str	r3, [sp, #0]
 8000f0c:	2300      	movs	r3, #0
 8000f0e:	22d2      	movs	r2, #210	; 0xd2
 8000f10:	21af      	movs	r1, #175	; 0xaf
 8000f12:	481f      	ldr	r0, [pc, #124]	; (8000f90 <DM_UpdateDisplay+0x154>)
 8000f14:	f00a f990 	bl	800b238 <ILI9341_Draw_Text>
		ILI9341_Draw_Text("BIAS", 260, 210, BLACK, 2, RED);
 8000f18:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8000f1c:	9301      	str	r3, [sp, #4]
 8000f1e:	2302      	movs	r3, #2
 8000f20:	9300      	str	r3, [sp, #0]
 8000f22:	2300      	movs	r3, #0
 8000f24:	22d2      	movs	r2, #210	; 0xd2
 8000f26:	f44f 7182 	mov.w	r1, #260	; 0x104
 8000f2a:	481a      	ldr	r0, [pc, #104]	; (8000f94 <DM_UpdateDisplay+0x158>)
 8000f2c:	f00a f984 	bl	800b238 <ILI9341_Draw_Text>
 8000f30:	e000      	b.n	8000f34 <DM_UpdateDisplay+0xf8>
				break;
 8000f32:	bf00      	nop
	}

#ifdef ENCODER_DEBUG
	char tim1tmp[5] = "";
 8000f34:	2300      	movs	r3, #0
 8000f36:	603b      	str	r3, [r7, #0]
 8000f38:	2300      	movs	r3, #0
 8000f3a:	713b      	strb	r3, [r7, #4]
	//snprintf(tim1tmp, sizeof(tim1tmp), "%lu", ENCODER_TIMER->CNT);
	if(DM_AddDigitPadding(ENCODER_TIMER->CNT, tim1tmp, sizeof(tim1tmp)) == 0)
 8000f3c:	4b16      	ldr	r3, [pc, #88]	; (8000f98 <DM_UpdateDisplay+0x15c>)
 8000f3e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000f40:	b29b      	uxth	r3, r3
 8000f42:	4639      	mov	r1, r7
 8000f44:	2205      	movs	r2, #5
 8000f46:	4618      	mov	r0, r3
 8000f48:	f000 fad8 	bl	80014fc <DM_AddDigitPadding>
 8000f4c:	4603      	mov	r3, r0
 8000f4e:	2b00      	cmp	r3, #0
 8000f50:	d10b      	bne.n	8000f6a <DM_UpdateDisplay+0x12e>
		ILI9341_Draw_Text(tim1tmp, 260, 180, BLACK, 2, RED);
 8000f52:	4638      	mov	r0, r7
 8000f54:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8000f58:	9301      	str	r3, [sp, #4]
 8000f5a:	2302      	movs	r3, #2
 8000f5c:	9300      	str	r3, [sp, #0]
 8000f5e:	2300      	movs	r3, #0
 8000f60:	22b4      	movs	r2, #180	; 0xb4
 8000f62:	f44f 7182 	mov.w	r1, #260	; 0x104
 8000f66:	f00a f967 	bl	800b238 <ILI9341_Draw_Text>
/*
	if((TIM1->SR & TIM_SR_IDXF) == TIM_SR_IDXF)
	{
		TIM1->SR &= ~(TIM_SR_IDXF);
	}*/
}
 8000f6a:	bf00      	nop
 8000f6c:	3708      	adds	r7, #8
 8000f6e:	46bd      	mov	sp, r7
 8000f70:	bd80      	pop	{r7, pc}
 8000f72:	bf00      	nop
 8000f74:	20001414 	.word	0x20001414
 8000f78:	20001415 	.word	0x20001415
 8000f7c:	20001416 	.word	0x20001416
 8000f80:	0800e734 	.word	0x0800e734
 8000f84:	20001417 	.word	0x20001417
 8000f88:	0800e744 	.word	0x0800e744
 8000f8c:	0800e74c 	.word	0x0800e74c
 8000f90:	0800e754 	.word	0x0800e754
 8000f94:	0800e75c 	.word	0x0800e75c
 8000f98:	40012c00 	.word	0x40012c00

08000f9c <DM_ShowFuncSelectMenu>:
 *	@param None
 *	@retval None
 *
 */
void DM_ShowFuncSelectMenu(eFuncMenu_Status pValue)
{
 8000f9c:	b480      	push	{r7}
 8000f9e:	b083      	sub	sp, #12
 8000fa0:	af00      	add	r7, sp, #0
 8000fa2:	4603      	mov	r3, r0
 8000fa4:	71fb      	strb	r3, [r7, #7]
	eNextFuncMenuStatus = pValue;
 8000fa6:	4a04      	ldr	r2, [pc, #16]	; (8000fb8 <DM_ShowFuncSelectMenu+0x1c>)
 8000fa8:	79fb      	ldrb	r3, [r7, #7]
 8000faa:	7013      	strb	r3, [r2, #0]
}
 8000fac:	bf00      	nop
 8000fae:	370c      	adds	r7, #12
 8000fb0:	46bd      	mov	sp, r7
 8000fb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fb6:	4770      	bx	lr
 8000fb8:	20001414 	.word	0x20001414

08000fbc <_DrawFuncSelectMenu>:
 *	@param None
 *	@retval None
 *
 */
void _DrawFuncSelectMenu()
{
 8000fbc:	b580      	push	{r7, lr}
 8000fbe:	b084      	sub	sp, #16
 8000fc0:	af02      	add	r7, sp, #8
	ILI9341_Draw_Text("SELECT FUNCTION", 	10, 10, WHITE, 3, BLACK);
 8000fc2:	2300      	movs	r3, #0
 8000fc4:	9301      	str	r3, [sp, #4]
 8000fc6:	2303      	movs	r3, #3
 8000fc8:	9300      	str	r3, [sp, #0]
 8000fca:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000fce:	220a      	movs	r2, #10
 8000fd0:	210a      	movs	r1, #10
 8000fd2:	48b7      	ldr	r0, [pc, #732]	; (80012b0 <_DrawFuncSelectMenu+0x2f4>)
 8000fd4:	f00a f930 	bl	800b238 <ILI9341_Draw_Text>

	Func_Preset_Encoder_Pos_t *pFuncPresetTmp = FuncO_GetFPresetObject();
 8000fd8:	f002 fc2e 	bl	8003838 <FuncO_GetFPresetObject>
 8000fdc:	6078      	str	r0, [r7, #4]
	if(pFuncPresetTmp)
 8000fde:	687b      	ldr	r3, [r7, #4]
 8000fe0:	2b00      	cmp	r3, #0
 8000fe2:	f000 81b6 	beq.w	8001352 <_DrawFuncSelectMenu+0x396>
	{
		switch(pFuncPresetTmp->func)
 8000fe6:	687b      	ldr	r3, [r7, #4]
 8000fe8:	781b      	ldrb	r3, [r3, #0]
 8000fea:	2b05      	cmp	r3, #5
 8000fec:	f200 81b1 	bhi.w	8001352 <_DrawFuncSelectMenu+0x396>
 8000ff0:	a201      	add	r2, pc, #4	; (adr r2, 8000ff8 <_DrawFuncSelectMenu+0x3c>)
 8000ff2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000ff6:	bf00      	nop
 8000ff8:	08001011 	.word	0x08001011
 8000ffc:	08001097 	.word	0x08001097
 8001000:	0800111d 	.word	0x0800111d
 8001004:	080011a3 	.word	0x080011a3
 8001008:	08001229 	.word	0x08001229
 800100c:	080012cd 	.word	0x080012cd
		{
			case SINE_FUNC_MODE:
				ILI9341_Draw_Text("- SINE", 	10, 50, WHITE, 2, BLACK);
 8001010:	2300      	movs	r3, #0
 8001012:	9301      	str	r3, [sp, #4]
 8001014:	2302      	movs	r3, #2
 8001016:	9300      	str	r3, [sp, #0]
 8001018:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800101c:	2232      	movs	r2, #50	; 0x32
 800101e:	210a      	movs	r1, #10
 8001020:	48a4      	ldr	r0, [pc, #656]	; (80012b4 <_DrawFuncSelectMenu+0x2f8>)
 8001022:	f00a f909 	bl	800b238 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- SQUARE", 	10, 70, BLACK, 2, WHITE);
 8001026:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800102a:	9301      	str	r3, [sp, #4]
 800102c:	2302      	movs	r3, #2
 800102e:	9300      	str	r3, [sp, #0]
 8001030:	2300      	movs	r3, #0
 8001032:	2246      	movs	r2, #70	; 0x46
 8001034:	210a      	movs	r1, #10
 8001036:	48a0      	ldr	r0, [pc, #640]	; (80012b8 <_DrawFuncSelectMenu+0x2fc>)
 8001038:	f00a f8fe 	bl	800b238 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- SAW", 		10, 90, BLACK, 2, WHITE);
 800103c:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001040:	9301      	str	r3, [sp, #4]
 8001042:	2302      	movs	r3, #2
 8001044:	9300      	str	r3, [sp, #0]
 8001046:	2300      	movs	r3, #0
 8001048:	225a      	movs	r2, #90	; 0x5a
 800104a:	210a      	movs	r1, #10
 800104c:	489b      	ldr	r0, [pc, #620]	; (80012bc <_DrawFuncSelectMenu+0x300>)
 800104e:	f00a f8f3 	bl	800b238 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- REV SAW", 	10, 110, BLACK, 2, WHITE);
 8001052:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001056:	9301      	str	r3, [sp, #4]
 8001058:	2302      	movs	r3, #2
 800105a:	9300      	str	r3, [sp, #0]
 800105c:	2300      	movs	r3, #0
 800105e:	226e      	movs	r2, #110	; 0x6e
 8001060:	210a      	movs	r1, #10
 8001062:	4897      	ldr	r0, [pc, #604]	; (80012c0 <_DrawFuncSelectMenu+0x304>)
 8001064:	f00a f8e8 	bl	800b238 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- TRIANGLE",	10, 130, BLACK, 2, WHITE);
 8001068:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800106c:	9301      	str	r3, [sp, #4]
 800106e:	2302      	movs	r3, #2
 8001070:	9300      	str	r3, [sp, #0]
 8001072:	2300      	movs	r3, #0
 8001074:	2282      	movs	r2, #130	; 0x82
 8001076:	210a      	movs	r1, #10
 8001078:	4892      	ldr	r0, [pc, #584]	; (80012c4 <_DrawFuncSelectMenu+0x308>)
 800107a:	f00a f8dd 	bl	800b238 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- UNIT", 	10, 150, BLACK, 2, WHITE);
 800107e:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001082:	9301      	str	r3, [sp, #4]
 8001084:	2302      	movs	r3, #2
 8001086:	9300      	str	r3, [sp, #0]
 8001088:	2300      	movs	r3, #0
 800108a:	2296      	movs	r2, #150	; 0x96
 800108c:	210a      	movs	r1, #10
 800108e:	488e      	ldr	r0, [pc, #568]	; (80012c8 <_DrawFuncSelectMenu+0x30c>)
 8001090:	f00a f8d2 	bl	800b238 <ILI9341_Draw_Text>
				break;
 8001094:	e15d      	b.n	8001352 <_DrawFuncSelectMenu+0x396>
			case SQUARE_FUNC_MODE:
				ILI9341_Draw_Text("- SINE", 	10, 50, BLACK, 2, WHITE);
 8001096:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800109a:	9301      	str	r3, [sp, #4]
 800109c:	2302      	movs	r3, #2
 800109e:	9300      	str	r3, [sp, #0]
 80010a0:	2300      	movs	r3, #0
 80010a2:	2232      	movs	r2, #50	; 0x32
 80010a4:	210a      	movs	r1, #10
 80010a6:	4883      	ldr	r0, [pc, #524]	; (80012b4 <_DrawFuncSelectMenu+0x2f8>)
 80010a8:	f00a f8c6 	bl	800b238 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- SQUARE", 	10, 70, WHITE, 2, BLACK);
 80010ac:	2300      	movs	r3, #0
 80010ae:	9301      	str	r3, [sp, #4]
 80010b0:	2302      	movs	r3, #2
 80010b2:	9300      	str	r3, [sp, #0]
 80010b4:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80010b8:	2246      	movs	r2, #70	; 0x46
 80010ba:	210a      	movs	r1, #10
 80010bc:	487e      	ldr	r0, [pc, #504]	; (80012b8 <_DrawFuncSelectMenu+0x2fc>)
 80010be:	f00a f8bb 	bl	800b238 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- SAW", 		10, 90, BLACK, 2, WHITE);
 80010c2:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80010c6:	9301      	str	r3, [sp, #4]
 80010c8:	2302      	movs	r3, #2
 80010ca:	9300      	str	r3, [sp, #0]
 80010cc:	2300      	movs	r3, #0
 80010ce:	225a      	movs	r2, #90	; 0x5a
 80010d0:	210a      	movs	r1, #10
 80010d2:	487a      	ldr	r0, [pc, #488]	; (80012bc <_DrawFuncSelectMenu+0x300>)
 80010d4:	f00a f8b0 	bl	800b238 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- REV SAW", 	10, 110, BLACK, 2, WHITE);
 80010d8:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80010dc:	9301      	str	r3, [sp, #4]
 80010de:	2302      	movs	r3, #2
 80010e0:	9300      	str	r3, [sp, #0]
 80010e2:	2300      	movs	r3, #0
 80010e4:	226e      	movs	r2, #110	; 0x6e
 80010e6:	210a      	movs	r1, #10
 80010e8:	4875      	ldr	r0, [pc, #468]	; (80012c0 <_DrawFuncSelectMenu+0x304>)
 80010ea:	f00a f8a5 	bl	800b238 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- TRIANGLE",	10, 130, BLACK, 2, WHITE);
 80010ee:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80010f2:	9301      	str	r3, [sp, #4]
 80010f4:	2302      	movs	r3, #2
 80010f6:	9300      	str	r3, [sp, #0]
 80010f8:	2300      	movs	r3, #0
 80010fa:	2282      	movs	r2, #130	; 0x82
 80010fc:	210a      	movs	r1, #10
 80010fe:	4871      	ldr	r0, [pc, #452]	; (80012c4 <_DrawFuncSelectMenu+0x308>)
 8001100:	f00a f89a 	bl	800b238 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- UNIT", 	10, 150, BLACK, 2, WHITE);
 8001104:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001108:	9301      	str	r3, [sp, #4]
 800110a:	2302      	movs	r3, #2
 800110c:	9300      	str	r3, [sp, #0]
 800110e:	2300      	movs	r3, #0
 8001110:	2296      	movs	r2, #150	; 0x96
 8001112:	210a      	movs	r1, #10
 8001114:	486c      	ldr	r0, [pc, #432]	; (80012c8 <_DrawFuncSelectMenu+0x30c>)
 8001116:	f00a f88f 	bl	800b238 <ILI9341_Draw_Text>
				break;
 800111a:	e11a      	b.n	8001352 <_DrawFuncSelectMenu+0x396>
			case SAW_FUNC_MODE:
				ILI9341_Draw_Text("- SINE", 	10, 50, BLACK, 2, WHITE);
 800111c:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001120:	9301      	str	r3, [sp, #4]
 8001122:	2302      	movs	r3, #2
 8001124:	9300      	str	r3, [sp, #0]
 8001126:	2300      	movs	r3, #0
 8001128:	2232      	movs	r2, #50	; 0x32
 800112a:	210a      	movs	r1, #10
 800112c:	4861      	ldr	r0, [pc, #388]	; (80012b4 <_DrawFuncSelectMenu+0x2f8>)
 800112e:	f00a f883 	bl	800b238 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- SQUARE", 	10, 70, BLACK, 2, WHITE);
 8001132:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001136:	9301      	str	r3, [sp, #4]
 8001138:	2302      	movs	r3, #2
 800113a:	9300      	str	r3, [sp, #0]
 800113c:	2300      	movs	r3, #0
 800113e:	2246      	movs	r2, #70	; 0x46
 8001140:	210a      	movs	r1, #10
 8001142:	485d      	ldr	r0, [pc, #372]	; (80012b8 <_DrawFuncSelectMenu+0x2fc>)
 8001144:	f00a f878 	bl	800b238 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- SAW", 		10, 90, WHITE, 2, BLACK);
 8001148:	2300      	movs	r3, #0
 800114a:	9301      	str	r3, [sp, #4]
 800114c:	2302      	movs	r3, #2
 800114e:	9300      	str	r3, [sp, #0]
 8001150:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001154:	225a      	movs	r2, #90	; 0x5a
 8001156:	210a      	movs	r1, #10
 8001158:	4858      	ldr	r0, [pc, #352]	; (80012bc <_DrawFuncSelectMenu+0x300>)
 800115a:	f00a f86d 	bl	800b238 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- REV SAW", 	10, 110, BLACK, 2, WHITE);
 800115e:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001162:	9301      	str	r3, [sp, #4]
 8001164:	2302      	movs	r3, #2
 8001166:	9300      	str	r3, [sp, #0]
 8001168:	2300      	movs	r3, #0
 800116a:	226e      	movs	r2, #110	; 0x6e
 800116c:	210a      	movs	r1, #10
 800116e:	4854      	ldr	r0, [pc, #336]	; (80012c0 <_DrawFuncSelectMenu+0x304>)
 8001170:	f00a f862 	bl	800b238 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- TRIANGLE",	10, 130, BLACK, 2, WHITE);
 8001174:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001178:	9301      	str	r3, [sp, #4]
 800117a:	2302      	movs	r3, #2
 800117c:	9300      	str	r3, [sp, #0]
 800117e:	2300      	movs	r3, #0
 8001180:	2282      	movs	r2, #130	; 0x82
 8001182:	210a      	movs	r1, #10
 8001184:	484f      	ldr	r0, [pc, #316]	; (80012c4 <_DrawFuncSelectMenu+0x308>)
 8001186:	f00a f857 	bl	800b238 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- UNIT", 	10, 150, BLACK, 2, WHITE);
 800118a:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800118e:	9301      	str	r3, [sp, #4]
 8001190:	2302      	movs	r3, #2
 8001192:	9300      	str	r3, [sp, #0]
 8001194:	2300      	movs	r3, #0
 8001196:	2296      	movs	r2, #150	; 0x96
 8001198:	210a      	movs	r1, #10
 800119a:	484b      	ldr	r0, [pc, #300]	; (80012c8 <_DrawFuncSelectMenu+0x30c>)
 800119c:	f00a f84c 	bl	800b238 <ILI9341_Draw_Text>
				break;
 80011a0:	e0d7      	b.n	8001352 <_DrawFuncSelectMenu+0x396>
			case REV_SAW_FUNC_MODE:
				ILI9341_Draw_Text("- SINE", 	10, 50, BLACK, 2, WHITE);
 80011a2:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80011a6:	9301      	str	r3, [sp, #4]
 80011a8:	2302      	movs	r3, #2
 80011aa:	9300      	str	r3, [sp, #0]
 80011ac:	2300      	movs	r3, #0
 80011ae:	2232      	movs	r2, #50	; 0x32
 80011b0:	210a      	movs	r1, #10
 80011b2:	4840      	ldr	r0, [pc, #256]	; (80012b4 <_DrawFuncSelectMenu+0x2f8>)
 80011b4:	f00a f840 	bl	800b238 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- SQUARE", 	10, 70, BLACK, 2, WHITE);
 80011b8:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80011bc:	9301      	str	r3, [sp, #4]
 80011be:	2302      	movs	r3, #2
 80011c0:	9300      	str	r3, [sp, #0]
 80011c2:	2300      	movs	r3, #0
 80011c4:	2246      	movs	r2, #70	; 0x46
 80011c6:	210a      	movs	r1, #10
 80011c8:	483b      	ldr	r0, [pc, #236]	; (80012b8 <_DrawFuncSelectMenu+0x2fc>)
 80011ca:	f00a f835 	bl	800b238 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- SAW", 		10, 90, BLACK, 2, WHITE);
 80011ce:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80011d2:	9301      	str	r3, [sp, #4]
 80011d4:	2302      	movs	r3, #2
 80011d6:	9300      	str	r3, [sp, #0]
 80011d8:	2300      	movs	r3, #0
 80011da:	225a      	movs	r2, #90	; 0x5a
 80011dc:	210a      	movs	r1, #10
 80011de:	4837      	ldr	r0, [pc, #220]	; (80012bc <_DrawFuncSelectMenu+0x300>)
 80011e0:	f00a f82a 	bl	800b238 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- REV SAW", 	10, 110, WHITE, 2, BLACK);
 80011e4:	2300      	movs	r3, #0
 80011e6:	9301      	str	r3, [sp, #4]
 80011e8:	2302      	movs	r3, #2
 80011ea:	9300      	str	r3, [sp, #0]
 80011ec:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80011f0:	226e      	movs	r2, #110	; 0x6e
 80011f2:	210a      	movs	r1, #10
 80011f4:	4832      	ldr	r0, [pc, #200]	; (80012c0 <_DrawFuncSelectMenu+0x304>)
 80011f6:	f00a f81f 	bl	800b238 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- TRIANGLE",	10, 130, BLACK, 2, WHITE);
 80011fa:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80011fe:	9301      	str	r3, [sp, #4]
 8001200:	2302      	movs	r3, #2
 8001202:	9300      	str	r3, [sp, #0]
 8001204:	2300      	movs	r3, #0
 8001206:	2282      	movs	r2, #130	; 0x82
 8001208:	210a      	movs	r1, #10
 800120a:	482e      	ldr	r0, [pc, #184]	; (80012c4 <_DrawFuncSelectMenu+0x308>)
 800120c:	f00a f814 	bl	800b238 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- UNIT", 	10, 150, BLACK, 2, WHITE);
 8001210:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001214:	9301      	str	r3, [sp, #4]
 8001216:	2302      	movs	r3, #2
 8001218:	9300      	str	r3, [sp, #0]
 800121a:	2300      	movs	r3, #0
 800121c:	2296      	movs	r2, #150	; 0x96
 800121e:	210a      	movs	r1, #10
 8001220:	4829      	ldr	r0, [pc, #164]	; (80012c8 <_DrawFuncSelectMenu+0x30c>)
 8001222:	f00a f809 	bl	800b238 <ILI9341_Draw_Text>
				break;
 8001226:	e094      	b.n	8001352 <_DrawFuncSelectMenu+0x396>
			case TRIANGLE_FUNC_MODE:
				ILI9341_Draw_Text("- SINE", 	10, 50, BLACK, 2, WHITE);
 8001228:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800122c:	9301      	str	r3, [sp, #4]
 800122e:	2302      	movs	r3, #2
 8001230:	9300      	str	r3, [sp, #0]
 8001232:	2300      	movs	r3, #0
 8001234:	2232      	movs	r2, #50	; 0x32
 8001236:	210a      	movs	r1, #10
 8001238:	481e      	ldr	r0, [pc, #120]	; (80012b4 <_DrawFuncSelectMenu+0x2f8>)
 800123a:	f009 fffd 	bl	800b238 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- SQUARE", 	10, 70, BLACK, 2, WHITE);
 800123e:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001242:	9301      	str	r3, [sp, #4]
 8001244:	2302      	movs	r3, #2
 8001246:	9300      	str	r3, [sp, #0]
 8001248:	2300      	movs	r3, #0
 800124a:	2246      	movs	r2, #70	; 0x46
 800124c:	210a      	movs	r1, #10
 800124e:	481a      	ldr	r0, [pc, #104]	; (80012b8 <_DrawFuncSelectMenu+0x2fc>)
 8001250:	f009 fff2 	bl	800b238 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- SAW", 		10, 90, BLACK, 2, WHITE);
 8001254:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001258:	9301      	str	r3, [sp, #4]
 800125a:	2302      	movs	r3, #2
 800125c:	9300      	str	r3, [sp, #0]
 800125e:	2300      	movs	r3, #0
 8001260:	225a      	movs	r2, #90	; 0x5a
 8001262:	210a      	movs	r1, #10
 8001264:	4815      	ldr	r0, [pc, #84]	; (80012bc <_DrawFuncSelectMenu+0x300>)
 8001266:	f009 ffe7 	bl	800b238 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- REV SAW", 	10, 110, BLACK, 2, WHITE);
 800126a:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800126e:	9301      	str	r3, [sp, #4]
 8001270:	2302      	movs	r3, #2
 8001272:	9300      	str	r3, [sp, #0]
 8001274:	2300      	movs	r3, #0
 8001276:	226e      	movs	r2, #110	; 0x6e
 8001278:	210a      	movs	r1, #10
 800127a:	4811      	ldr	r0, [pc, #68]	; (80012c0 <_DrawFuncSelectMenu+0x304>)
 800127c:	f009 ffdc 	bl	800b238 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- TRIANGLE",	10, 130, WHITE, 2, BLACK);
 8001280:	2300      	movs	r3, #0
 8001282:	9301      	str	r3, [sp, #4]
 8001284:	2302      	movs	r3, #2
 8001286:	9300      	str	r3, [sp, #0]
 8001288:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800128c:	2282      	movs	r2, #130	; 0x82
 800128e:	210a      	movs	r1, #10
 8001290:	480c      	ldr	r0, [pc, #48]	; (80012c4 <_DrawFuncSelectMenu+0x308>)
 8001292:	f009 ffd1 	bl	800b238 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- UNIT", 	10, 150, BLACK, 2, WHITE);
 8001296:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800129a:	9301      	str	r3, [sp, #4]
 800129c:	2302      	movs	r3, #2
 800129e:	9300      	str	r3, [sp, #0]
 80012a0:	2300      	movs	r3, #0
 80012a2:	2296      	movs	r2, #150	; 0x96
 80012a4:	210a      	movs	r1, #10
 80012a6:	4808      	ldr	r0, [pc, #32]	; (80012c8 <_DrawFuncSelectMenu+0x30c>)
 80012a8:	f009 ffc6 	bl	800b238 <ILI9341_Draw_Text>
				break;
 80012ac:	e051      	b.n	8001352 <_DrawFuncSelectMenu+0x396>
 80012ae:	bf00      	nop
 80012b0:	0800e764 	.word	0x0800e764
 80012b4:	0800e774 	.word	0x0800e774
 80012b8:	0800e77c 	.word	0x0800e77c
 80012bc:	0800e788 	.word	0x0800e788
 80012c0:	0800e790 	.word	0x0800e790
 80012c4:	0800e79c 	.word	0x0800e79c
 80012c8:	0800e7a8 	.word	0x0800e7a8
			case IMPULSE_FUNC_MODE:
				ILI9341_Draw_Text("- SINE", 	10, 50, BLACK, 2, WHITE);
 80012cc:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80012d0:	9301      	str	r3, [sp, #4]
 80012d2:	2302      	movs	r3, #2
 80012d4:	9300      	str	r3, [sp, #0]
 80012d6:	2300      	movs	r3, #0
 80012d8:	2232      	movs	r2, #50	; 0x32
 80012da:	210a      	movs	r1, #10
 80012dc:	481f      	ldr	r0, [pc, #124]	; (800135c <_DrawFuncSelectMenu+0x3a0>)
 80012de:	f009 ffab 	bl	800b238 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- SQUARE", 	10, 70, BLACK, 2, WHITE);
 80012e2:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80012e6:	9301      	str	r3, [sp, #4]
 80012e8:	2302      	movs	r3, #2
 80012ea:	9300      	str	r3, [sp, #0]
 80012ec:	2300      	movs	r3, #0
 80012ee:	2246      	movs	r2, #70	; 0x46
 80012f0:	210a      	movs	r1, #10
 80012f2:	481b      	ldr	r0, [pc, #108]	; (8001360 <_DrawFuncSelectMenu+0x3a4>)
 80012f4:	f009 ffa0 	bl	800b238 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- SAW", 		10, 90, BLACK, 2, WHITE);
 80012f8:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80012fc:	9301      	str	r3, [sp, #4]
 80012fe:	2302      	movs	r3, #2
 8001300:	9300      	str	r3, [sp, #0]
 8001302:	2300      	movs	r3, #0
 8001304:	225a      	movs	r2, #90	; 0x5a
 8001306:	210a      	movs	r1, #10
 8001308:	4816      	ldr	r0, [pc, #88]	; (8001364 <_DrawFuncSelectMenu+0x3a8>)
 800130a:	f009 ff95 	bl	800b238 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- REV SAW", 	10, 110, BLACK, 2, WHITE);
 800130e:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001312:	9301      	str	r3, [sp, #4]
 8001314:	2302      	movs	r3, #2
 8001316:	9300      	str	r3, [sp, #0]
 8001318:	2300      	movs	r3, #0
 800131a:	226e      	movs	r2, #110	; 0x6e
 800131c:	210a      	movs	r1, #10
 800131e:	4812      	ldr	r0, [pc, #72]	; (8001368 <_DrawFuncSelectMenu+0x3ac>)
 8001320:	f009 ff8a 	bl	800b238 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- TRIANGLE",	10, 130, BLACK, 2, WHITE);
 8001324:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001328:	9301      	str	r3, [sp, #4]
 800132a:	2302      	movs	r3, #2
 800132c:	9300      	str	r3, [sp, #0]
 800132e:	2300      	movs	r3, #0
 8001330:	2282      	movs	r2, #130	; 0x82
 8001332:	210a      	movs	r1, #10
 8001334:	480d      	ldr	r0, [pc, #52]	; (800136c <_DrawFuncSelectMenu+0x3b0>)
 8001336:	f009 ff7f 	bl	800b238 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- UNIT", 	10, 150, WHITE, 2, BLACK);
 800133a:	2300      	movs	r3, #0
 800133c:	9301      	str	r3, [sp, #4]
 800133e:	2302      	movs	r3, #2
 8001340:	9300      	str	r3, [sp, #0]
 8001342:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001346:	2296      	movs	r2, #150	; 0x96
 8001348:	210a      	movs	r1, #10
 800134a:	4809      	ldr	r0, [pc, #36]	; (8001370 <_DrawFuncSelectMenu+0x3b4>)
 800134c:	f009 ff74 	bl	800b238 <ILI9341_Draw_Text>
				break;
 8001350:	bf00      	nop

		}
	}


}
 8001352:	bf00      	nop
 8001354:	3708      	adds	r7, #8
 8001356:	46bd      	mov	sp, r7
 8001358:	bd80      	pop	{r7, pc}
 800135a:	bf00      	nop
 800135c:	0800e774 	.word	0x0800e774
 8001360:	0800e77c 	.word	0x0800e77c
 8001364:	0800e788 	.word	0x0800e788
 8001368:	0800e790 	.word	0x0800e790
 800136c:	0800e79c 	.word	0x0800e79c
 8001370:	0800e7a8 	.word	0x0800e7a8

08001374 <DM_ShowGainSelectMenu>:
 *	@param None
 *	@retval None
 *
 */
void DM_ShowGainSelectMenu(eGainMenu_Status pValue)
{
 8001374:	b480      	push	{r7}
 8001376:	b083      	sub	sp, #12
 8001378:	af00      	add	r7, sp, #0
 800137a:	4603      	mov	r3, r0
 800137c:	71fb      	strb	r3, [r7, #7]
	eNextGainMenuStatus = pValue;
 800137e:	4a04      	ldr	r2, [pc, #16]	; (8001390 <DM_ShowGainSelectMenu+0x1c>)
 8001380:	79fb      	ldrb	r3, [r7, #7]
 8001382:	7013      	strb	r3, [r2, #0]
}
 8001384:	bf00      	nop
 8001386:	370c      	adds	r7, #12
 8001388:	46bd      	mov	sp, r7
 800138a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800138e:	4770      	bx	lr
 8001390:	20001415 	.word	0x20001415

08001394 <_DrawGainSelectMenu>:
 *	@param None
 *	@retval None
 *
 */
void _DrawGainSelectMenu()
{
 8001394:	b580      	push	{r7, lr}
 8001396:	b082      	sub	sp, #8
 8001398:	af02      	add	r7, sp, #8

	ILI9341_Draw_Text("ADJUST GAIN", 	40, 10, WHITE, 3, BLACK);
 800139a:	2300      	movs	r3, #0
 800139c:	9301      	str	r3, [sp, #4]
 800139e:	2303      	movs	r3, #3
 80013a0:	9300      	str	r3, [sp, #0]
 80013a2:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80013a6:	220a      	movs	r2, #10
 80013a8:	2128      	movs	r1, #40	; 0x28
 80013aa:	4803      	ldr	r0, [pc, #12]	; (80013b8 <_DrawGainSelectMenu+0x24>)
 80013ac:	f009 ff44 	bl	800b238 <ILI9341_Draw_Text>
	char gain[4] = "";
	//snprintf(gain, sizeof(gain), "%u", GO_GetOutputGain());
	if(DM_AddDigitPadding((uint16_t)GO_GetOutputGain(), gain, sizeof(gain)) == 0)
		ILI9341_Draw_Text(gain, 250, 150, WHITE, 1, BLACK);
*/
}
 80013b0:	bf00      	nop
 80013b2:	46bd      	mov	sp, r7
 80013b4:	bd80      	pop	{r7, pc}
 80013b6:	bf00      	nop
 80013b8:	0800e7b0 	.word	0x0800e7b0

080013bc <DM_ShowFreqMenu>:
 *	@param None
 *	@retval None
 *
 */
void DM_ShowFreqMenu(eFreqMenu_Status pValue)
{
 80013bc:	b480      	push	{r7}
 80013be:	b083      	sub	sp, #12
 80013c0:	af00      	add	r7, sp, #0
 80013c2:	4603      	mov	r3, r0
 80013c4:	71fb      	strb	r3, [r7, #7]
	eNextFreqMenuStatus = pValue;
 80013c6:	4a04      	ldr	r2, [pc, #16]	; (80013d8 <DM_ShowFreqMenu+0x1c>)
 80013c8:	79fb      	ldrb	r3, [r7, #7]
 80013ca:	7013      	strb	r3, [r2, #0]
}
 80013cc:	bf00      	nop
 80013ce:	370c      	adds	r7, #12
 80013d0:	46bd      	mov	sp, r7
 80013d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013d6:	4770      	bx	lr
 80013d8:	20001416 	.word	0x20001416

080013dc <DM_ShowBiasSelectMenu>:
 *	@param None
 *	@retval None
 *
 */
void DM_ShowBiasSelectMenu(eBiasMenu_Status pValue)
{
 80013dc:	b480      	push	{r7}
 80013de:	b083      	sub	sp, #12
 80013e0:	af00      	add	r7, sp, #0
 80013e2:	4603      	mov	r3, r0
 80013e4:	71fb      	strb	r3, [r7, #7]
	eNextBiasMenuStatus = pValue;
 80013e6:	4a04      	ldr	r2, [pc, #16]	; (80013f8 <DM_ShowBiasSelectMenu+0x1c>)
 80013e8:	79fb      	ldrb	r3, [r7, #7]
 80013ea:	7013      	strb	r3, [r2, #0]
}
 80013ec:	bf00      	nop
 80013ee:	370c      	adds	r7, #12
 80013f0:	46bd      	mov	sp, r7
 80013f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013f6:	4770      	bx	lr
 80013f8:	20001417 	.word	0x20001417

080013fc <_DrawBiasSelectMenu>:
 *	@param None
 *	@retval None
 *
 */
void _DrawBiasSelectMenu()
{
 80013fc:	b580      	push	{r7, lr}
 80013fe:	b082      	sub	sp, #8
 8001400:	af02      	add	r7, sp, #8
	ILI9341_Draw_Text("ADJUST DC BIAS", 	30, 10, WHITE, 3, BLACK);
 8001402:	2300      	movs	r3, #0
 8001404:	9301      	str	r3, [sp, #4]
 8001406:	2303      	movs	r3, #3
 8001408:	9300      	str	r3, [sp, #0]
 800140a:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800140e:	220a      	movs	r2, #10
 8001410:	211e      	movs	r1, #30
 8001412:	4803      	ldr	r0, [pc, #12]	; (8001420 <_DrawBiasSelectMenu+0x24>)
 8001414:	f009 ff10 	bl	800b238 <ILI9341_Draw_Text>
			char symbol[2] = "-\0";
			ILI9341_Draw_Text(strcat(symbol, bias), 250, 150, WHITE, 1, BLACK);
		}
	}
*/
}
 8001418:	bf00      	nop
 800141a:	46bd      	mov	sp, r7
 800141c:	bd80      	pop	{r7, pc}
 800141e:	bf00      	nop
 8001420:	0800e7bc 	.word	0x0800e7bc

08001424 <DM_DigitCount>:
 *	@param None
 *	@retval None
 *
 */
int DM_DigitCount(int num)
{
 8001424:	b480      	push	{r7}
 8001426:	b083      	sub	sp, #12
 8001428:	af00      	add	r7, sp, #0
 800142a:	6078      	str	r0, [r7, #4]
	if(num < 10)
 800142c:	687b      	ldr	r3, [r7, #4]
 800142e:	2b09      	cmp	r3, #9
 8001430:	dc01      	bgt.n	8001436 <DM_DigitCount+0x12>
		return 1;
 8001432:	2301      	movs	r3, #1
 8001434:	e018      	b.n	8001468 <DM_DigitCount+0x44>
	if(num < 100)
 8001436:	687b      	ldr	r3, [r7, #4]
 8001438:	2b63      	cmp	r3, #99	; 0x63
 800143a:	dc01      	bgt.n	8001440 <DM_DigitCount+0x1c>
		return 2;
 800143c:	2302      	movs	r3, #2
 800143e:	e013      	b.n	8001468 <DM_DigitCount+0x44>
	if(num < 1000)
 8001440:	687b      	ldr	r3, [r7, #4]
 8001442:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8001446:	da01      	bge.n	800144c <DM_DigitCount+0x28>
		return 3;
 8001448:	2303      	movs	r3, #3
 800144a:	e00d      	b.n	8001468 <DM_DigitCount+0x44>
	if(num < 10000)
 800144c:	687b      	ldr	r3, [r7, #4]
 800144e:	f242 720f 	movw	r2, #9999	; 0x270f
 8001452:	4293      	cmp	r3, r2
 8001454:	dc01      	bgt.n	800145a <DM_DigitCount+0x36>
		return 4;
 8001456:	2304      	movs	r3, #4
 8001458:	e006      	b.n	8001468 <DM_DigitCount+0x44>
	if(num < 100000)
 800145a:	687b      	ldr	r3, [r7, #4]
 800145c:	4a05      	ldr	r2, [pc, #20]	; (8001474 <DM_DigitCount+0x50>)
 800145e:	4293      	cmp	r3, r2
 8001460:	dc01      	bgt.n	8001466 <DM_DigitCount+0x42>
		return 5;
 8001462:	2305      	movs	r3, #5
 8001464:	e000      	b.n	8001468 <DM_DigitCount+0x44>
	else
		return 0;
 8001466:	2300      	movs	r3, #0
}
 8001468:	4618      	mov	r0, r3
 800146a:	370c      	adds	r7, #12
 800146c:	46bd      	mov	sp, r7
 800146e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001472:	4770      	bx	lr
 8001474:	0001869f 	.word	0x0001869f

08001478 <DM_RefreshBackgroundLayout>:
 *	@param None
 *	@retval None
 *
 */
void DM_RefreshBackgroundLayout()
{
 8001478:	b580      	push	{r7, lr}
 800147a:	b084      	sub	sp, #16
 800147c:	af04      	add	r7, sp, #16


	//ILI9341_Fill_Screen(WHITE);
	ILI9341_FillScreenGradient();
 800147e:	f009 ff09 	bl	800b294 <ILI9341_FillScreenGradient>

	ILI9341_Draw_Bordered_Filled_Rectangle_Coord(	btn_x_pos[0],
 8001482:	4b1d      	ldr	r3, [pc, #116]	; (80014f8 <DM_RefreshBackgroundLayout+0x80>)
 8001484:	8818      	ldrh	r0, [r3, #0]
 8001486:	2300      	movs	r3, #0
 8001488:	9302      	str	r3, [sp, #8]
 800148a:	2302      	movs	r3, #2
 800148c:	9301      	str	r3, [sp, #4]
 800148e:	f240 33ef 	movw	r3, #1007	; 0x3ef
 8001492:	9300      	str	r3, [sp, #0]
 8001494:	2332      	movs	r3, #50	; 0x32
 8001496:	2250      	movs	r2, #80	; 0x50
 8001498:	21c8      	movs	r1, #200	; 0xc8
 800149a:	f009 fd63 	bl	800af64 <ILI9341_Draw_Bordered_Filled_Rectangle_Coord>
													BTN_HEIGHT,
													DARKCYAN,
													BORDER_SIZE,
													BLACK);

	ILI9341_Draw_Bordered_Filled_Rectangle_Coord(	btn_x_pos[1],
 800149e:	4b16      	ldr	r3, [pc, #88]	; (80014f8 <DM_RefreshBackgroundLayout+0x80>)
 80014a0:	8858      	ldrh	r0, [r3, #2]
 80014a2:	2300      	movs	r3, #0
 80014a4:	9302      	str	r3, [sp, #8]
 80014a6:	2302      	movs	r3, #2
 80014a8:	9301      	str	r3, [sp, #4]
 80014aa:	f44f 7378 	mov.w	r3, #992	; 0x3e0
 80014ae:	9300      	str	r3, [sp, #0]
 80014b0:	2332      	movs	r3, #50	; 0x32
 80014b2:	2250      	movs	r2, #80	; 0x50
 80014b4:	21c8      	movs	r1, #200	; 0xc8
 80014b6:	f009 fd55 	bl	800af64 <ILI9341_Draw_Bordered_Filled_Rectangle_Coord>
													BTN_HEIGHT,
													DARKGREEN,
													BORDER_SIZE,
													BLACK);

	ILI9341_Draw_Bordered_Filled_Rectangle_Coord(	btn_x_pos[2],
 80014ba:	4b0f      	ldr	r3, [pc, #60]	; (80014f8 <DM_RefreshBackgroundLayout+0x80>)
 80014bc:	8898      	ldrh	r0, [r3, #4]
 80014be:	2300      	movs	r3, #0
 80014c0:	9302      	str	r3, [sp, #8]
 80014c2:	2302      	movs	r3, #2
 80014c4:	9301      	str	r3, [sp, #4]
 80014c6:	f64f 73e0 	movw	r3, #65504	; 0xffe0
 80014ca:	9300      	str	r3, [sp, #0]
 80014cc:	2332      	movs	r3, #50	; 0x32
 80014ce:	2250      	movs	r2, #80	; 0x50
 80014d0:	21c8      	movs	r1, #200	; 0xc8
 80014d2:	f009 fd47 	bl	800af64 <ILI9341_Draw_Bordered_Filled_Rectangle_Coord>
													BTN_HEIGHT,
													YELLOW,
													BORDER_SIZE,
													BLACK);

	ILI9341_Draw_Bordered_Filled_Rectangle_Coord(	btn_x_pos[3],
 80014d6:	4b08      	ldr	r3, [pc, #32]	; (80014f8 <DM_RefreshBackgroundLayout+0x80>)
 80014d8:	88d8      	ldrh	r0, [r3, #6]
 80014da:	2300      	movs	r3, #0
 80014dc:	9302      	str	r3, [sp, #8]
 80014de:	2302      	movs	r3, #2
 80014e0:	9301      	str	r3, [sp, #4]
 80014e2:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 80014e6:	9300      	str	r3, [sp, #0]
 80014e8:	2332      	movs	r3, #50	; 0x32
 80014ea:	2250      	movs	r2, #80	; 0x50
 80014ec:	21c8      	movs	r1, #200	; 0xc8
 80014ee:	f009 fd39 	bl	800af64 <ILI9341_Draw_Bordered_Filled_Rectangle_Coord>
													BTN_WIDTH,
													BTN_HEIGHT,
													RED,
													BORDER_SIZE,
													BLACK);
}
 80014f2:	bf00      	nop
 80014f4:	46bd      	mov	sp, r7
 80014f6:	bd80      	pop	{r7, pc}
 80014f8:	20000000 	.word	0x20000000

080014fc <DM_AddDigitPadding>:
 *			1 if buflen is invalid size
 *			2 unknown error
 *
 */
int DM_AddDigitPadding(uint16_t num, char *buffer, uint16_t buflen)
{
 80014fc:	b580      	push	{r7, lr}
 80014fe:	b084      	sub	sp, #16
 8001500:	af00      	add	r7, sp, #0
 8001502:	4603      	mov	r3, r0
 8001504:	6039      	str	r1, [r7, #0]
 8001506:	80fb      	strh	r3, [r7, #6]
 8001508:	4613      	mov	r3, r2
 800150a:	80bb      	strh	r3, [r7, #4]
	if((buflen < 1) || (buflen > 6))
 800150c:	88bb      	ldrh	r3, [r7, #4]
 800150e:	2b00      	cmp	r3, #0
 8001510:	d002      	beq.n	8001518 <DM_AddDigitPadding+0x1c>
 8001512:	88bb      	ldrh	r3, [r7, #4]
 8001514:	2b06      	cmp	r3, #6
 8001516:	d901      	bls.n	800151c <DM_AddDigitPadding+0x20>
		return 1;
 8001518:	2301      	movs	r3, #1
 800151a:	e048      	b.n	80015ae <DM_AddDigitPadding+0xb2>

	//char* tmpbuf = malloc(sizeof(buffer) * buflen);

	uint16_t tmpcnt = num;
 800151c:	88fb      	ldrh	r3, [r7, #6]
 800151e:	81fb      	strh	r3, [r7, #14]
	switch(DM_DigitCount(tmpcnt))
 8001520:	89fb      	ldrh	r3, [r7, #14]
 8001522:	4618      	mov	r0, r3
 8001524:	f7ff ff7e 	bl	8001424 <DM_DigitCount>
 8001528:	4603      	mov	r3, r0
 800152a:	2b05      	cmp	r3, #5
 800152c:	d83e      	bhi.n	80015ac <DM_AddDigitPadding+0xb0>
 800152e:	a201      	add	r2, pc, #4	; (adr r2, 8001534 <DM_AddDigitPadding+0x38>)
 8001530:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001534:	0800154d 	.word	0x0800154d
 8001538:	0800155d 	.word	0x0800155d
 800153c:	0800156d 	.word	0x0800156d
 8001540:	0800157d 	.word	0x0800157d
 8001544:	0800158d 	.word	0x0800158d
 8001548:	0800159d 	.word	0x0800159d
	{

		case 0:
			snprintf(buffer,buflen, "     ");
 800154c:	88bb      	ldrh	r3, [r7, #4]
 800154e:	4a1a      	ldr	r2, [pc, #104]	; (80015b8 <DM_AddDigitPadding+0xbc>)
 8001550:	4619      	mov	r1, r3
 8001552:	6838      	ldr	r0, [r7, #0]
 8001554:	f00b f962 	bl	800c81c <sniprintf>
			return 0;
 8001558:	2300      	movs	r3, #0
 800155a:	e028      	b.n	80015ae <DM_AddDigitPadding+0xb2>
		case 1:
			snprintf(buffer, buflen, "%u    ", tmpcnt);
 800155c:	88b9      	ldrh	r1, [r7, #4]
 800155e:	89fb      	ldrh	r3, [r7, #14]
 8001560:	4a16      	ldr	r2, [pc, #88]	; (80015bc <DM_AddDigitPadding+0xc0>)
 8001562:	6838      	ldr	r0, [r7, #0]
 8001564:	f00b f95a 	bl	800c81c <sniprintf>
			return 0;
 8001568:	2300      	movs	r3, #0
 800156a:	e020      	b.n	80015ae <DM_AddDigitPadding+0xb2>
		case 2:
			snprintf(buffer, buflen, "%u   ", tmpcnt);
 800156c:	88b9      	ldrh	r1, [r7, #4]
 800156e:	89fb      	ldrh	r3, [r7, #14]
 8001570:	4a13      	ldr	r2, [pc, #76]	; (80015c0 <DM_AddDigitPadding+0xc4>)
 8001572:	6838      	ldr	r0, [r7, #0]
 8001574:	f00b f952 	bl	800c81c <sniprintf>
			return 0;
 8001578:	2300      	movs	r3, #0
 800157a:	e018      	b.n	80015ae <DM_AddDigitPadding+0xb2>
		case 3:
			snprintf(buffer, buflen, "%u  ", tmpcnt);
 800157c:	88b9      	ldrh	r1, [r7, #4]
 800157e:	89fb      	ldrh	r3, [r7, #14]
 8001580:	4a10      	ldr	r2, [pc, #64]	; (80015c4 <DM_AddDigitPadding+0xc8>)
 8001582:	6838      	ldr	r0, [r7, #0]
 8001584:	f00b f94a 	bl	800c81c <sniprintf>
			return 0;
 8001588:	2300      	movs	r3, #0
 800158a:	e010      	b.n	80015ae <DM_AddDigitPadding+0xb2>
		case 4:
			snprintf(buffer, buflen, "%u ", tmpcnt);
 800158c:	88b9      	ldrh	r1, [r7, #4]
 800158e:	89fb      	ldrh	r3, [r7, #14]
 8001590:	4a0d      	ldr	r2, [pc, #52]	; (80015c8 <DM_AddDigitPadding+0xcc>)
 8001592:	6838      	ldr	r0, [r7, #0]
 8001594:	f00b f942 	bl	800c81c <sniprintf>
			return 0;
 8001598:	2300      	movs	r3, #0
 800159a:	e008      	b.n	80015ae <DM_AddDigitPadding+0xb2>
		case 5:
			snprintf(buffer, buflen, "%u", tmpcnt);
 800159c:	88b9      	ldrh	r1, [r7, #4]
 800159e:	89fb      	ldrh	r3, [r7, #14]
 80015a0:	4a0a      	ldr	r2, [pc, #40]	; (80015cc <DM_AddDigitPadding+0xd0>)
 80015a2:	6838      	ldr	r0, [r7, #0]
 80015a4:	f00b f93a 	bl	800c81c <sniprintf>
			return 0;
 80015a8:	2300      	movs	r3, #0
 80015aa:	e000      	b.n	80015ae <DM_AddDigitPadding+0xb2>

	}

	return 2;
 80015ac:	2302      	movs	r3, #2


}
 80015ae:	4618      	mov	r0, r3
 80015b0:	3710      	adds	r7, #16
 80015b2:	46bd      	mov	sp, r7
 80015b4:	bd80      	pop	{r7, pc}
 80015b6:	bf00      	nop
 80015b8:	0800e804 	.word	0x0800e804
 80015bc:	0800e80c 	.word	0x0800e80c
 80015c0:	0800e814 	.word	0x0800e814
 80015c4:	0800e81c 	.word	0x0800e81c
 80015c8:	0800e824 	.word	0x0800e824
 80015cc:	0800e828 	.word	0x0800e828

080015d0 <FreqMenu_DrawFreqMainMenu>:
 *	@param None
 *	@retval None
 *
 */
void FreqMenu_DrawFreqMainMenu()
{
 80015d0:	b580      	push	{r7, lr}
 80015d2:	b082      	sub	sp, #8
 80015d4:	af02      	add	r7, sp, #8
	// main
	ILI9341_Draw_Text("Select an option below", 	30, 150, BLACK, 2, WHITE);
 80015d6:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80015da:	9301      	str	r3, [sp, #4]
 80015dc:	2302      	movs	r3, #2
 80015de:	9300      	str	r3, [sp, #0]
 80015e0:	2300      	movs	r3, #0
 80015e2:	2296      	movs	r2, #150	; 0x96
 80015e4:	211e      	movs	r1, #30
 80015e6:	4813      	ldr	r0, [pc, #76]	; (8001634 <FreqMenu_DrawFreqMainMenu+0x64>)
 80015e8:	f009 fe26 	bl	800b238 <ILI9341_Draw_Text>

	// buttons
	ILI9341_Draw_Text("PRESET", 5, 210, BLACK, 2, DARKCYAN);
 80015ec:	f240 33ef 	movw	r3, #1007	; 0x3ef
 80015f0:	9301      	str	r3, [sp, #4]
 80015f2:	2302      	movs	r3, #2
 80015f4:	9300      	str	r3, [sp, #0]
 80015f6:	2300      	movs	r3, #0
 80015f8:	22d2      	movs	r2, #210	; 0xd2
 80015fa:	2105      	movs	r1, #5
 80015fc:	480e      	ldr	r0, [pc, #56]	; (8001638 <FreqMenu_DrawFreqMainMenu+0x68>)
 80015fe:	f009 fe1b 	bl	800b238 <ILI9341_Draw_Text>
	ILI9341_Draw_Text("ADJUST", 87, 210, BLACK, 2, DARKGREEN);
 8001602:	f44f 7378 	mov.w	r3, #992	; 0x3e0
 8001606:	9301      	str	r3, [sp, #4]
 8001608:	2302      	movs	r3, #2
 800160a:	9300      	str	r3, [sp, #0]
 800160c:	2300      	movs	r3, #0
 800160e:	22d2      	movs	r2, #210	; 0xd2
 8001610:	2157      	movs	r1, #87	; 0x57
 8001612:	480a      	ldr	r0, [pc, #40]	; (800163c <FreqMenu_DrawFreqMainMenu+0x6c>)
 8001614:	f009 fe10 	bl	800b238 <ILI9341_Draw_Text>
	ILI9341_Draw_Text("SWEEP", 174, 210, BLACK, 2, YELLOW);
 8001618:	f64f 73e0 	movw	r3, #65504	; 0xffe0
 800161c:	9301      	str	r3, [sp, #4]
 800161e:	2302      	movs	r3, #2
 8001620:	9300      	str	r3, [sp, #0]
 8001622:	2300      	movs	r3, #0
 8001624:	22d2      	movs	r2, #210	; 0xd2
 8001626:	21ae      	movs	r1, #174	; 0xae
 8001628:	4805      	ldr	r0, [pc, #20]	; (8001640 <FreqMenu_DrawFreqMainMenu+0x70>)
 800162a:	f009 fe05 	bl	800b238 <ILI9341_Draw_Text>
	//ILI9341_Draw_Text("    ", 260, 210, BLACK, 2, RED);
}
 800162e:	bf00      	nop
 8001630:	46bd      	mov	sp, r7
 8001632:	bd80      	pop	{r7, pc}
 8001634:	0800e82c 	.word	0x0800e82c
 8001638:	0800e844 	.word	0x0800e844
 800163c:	0800e84c 	.word	0x0800e84c
 8001640:	0800e854 	.word	0x0800e854

08001644 <FreqMenu_DrawFreqPresetMenu>:
 *	@param None
 *	@retval None
 *
 */
void FreqMenu_DrawFreqPresetMenu()
{
 8001644:	b580      	push	{r7, lr}
 8001646:	b086      	sub	sp, #24
 8001648:	af02      	add	r7, sp, #8

	uint8_t menu_pos_y1 = 50;
 800164a:	2332      	movs	r3, #50	; 0x32
 800164c:	73fb      	strb	r3, [r7, #15]
	uint8_t menu_pos_y2 = 70;
 800164e:	2346      	movs	r3, #70	; 0x46
 8001650:	73bb      	strb	r3, [r7, #14]
	uint8_t menu_pos_y3 = 90;
 8001652:	235a      	movs	r3, #90	; 0x5a
 8001654:	737b      	strb	r3, [r7, #13]
	uint8_t menu_pos_y4 = 110;
 8001656:	236e      	movs	r3, #110	; 0x6e
 8001658:	733b      	strb	r3, [r7, #12]
	uint8_t menu_pos_y5 = 130;
 800165a:	2382      	movs	r3, #130	; 0x82
 800165c:	72fb      	strb	r3, [r7, #11]
	uint8_t menu_pos_y6 = 150;
 800165e:	2396      	movs	r3, #150	; 0x96
 8001660:	72bb      	strb	r3, [r7, #10]
	uint8_t menu_pos_y7 = 170;
 8001662:	23aa      	movs	r3, #170	; 0xaa
 8001664:	727b      	strb	r3, [r7, #9]
	Freq_Preset_Encoder_Pos_t *pFreqPresetTmp =  FreqO_GetFPresetObject();
 8001666:	f001 ffb1 	bl	80035cc <FreqO_GetFPresetObject>
 800166a:	6078      	str	r0, [r7, #4]
	if(pFreqPresetTmp)
 800166c:	687b      	ldr	r3, [r7, #4]
 800166e:	2b00      	cmp	r3, #0
 8001670:	f001 823f 	beq.w	8002af2 <FreqMenu_DrawFreqPresetMenu+0x14ae>
	{
		switch(pFreqPresetTmp->hertz)
 8001674:	687b      	ldr	r3, [r7, #4]
 8001676:	681b      	ldr	r3, [r3, #0]
 8001678:	f240 22ee 	movw	r2, #750	; 0x2ee
 800167c:	4293      	cmp	r3, r2
 800167e:	f000 8499 	beq.w	8001fb4 <FreqMenu_DrawFreqPresetMenu+0x970>
 8001682:	f240 22ee 	movw	r2, #750	; 0x2ee
 8001686:	4293      	cmp	r3, r2
 8001688:	d817      	bhi.n	80016ba <FreqMenu_DrawFreqPresetMenu+0x76>
 800168a:	2b32      	cmp	r3, #50	; 0x32
 800168c:	f000 81b2 	beq.w	80019f4 <FreqMenu_DrawFreqPresetMenu+0x3b0>
 8001690:	2b32      	cmp	r3, #50	; 0x32
 8001692:	d806      	bhi.n	80016a2 <FreqMenu_DrawFreqPresetMenu+0x5e>
 8001694:	2b01      	cmp	r3, #1
 8001696:	d038      	beq.n	800170a <FreqMenu_DrawFreqPresetMenu+0xc6>
 8001698:	2b0a      	cmp	r3, #10
 800169a:	f000 80e0 	beq.w	800185e <FreqMenu_DrawFreqPresetMenu+0x21a>
	else
	{
		ILI9341_Draw_Text("FreqMenus::FreqMenu_DrawFreqPresetMenu() Error", 		10, 180, RED, 1, BLACK);
	}

}
 800169e:	f001 ba34 	b.w	8002b0a <FreqMenu_DrawFreqPresetMenu+0x14c6>
		switch(pFreqPresetTmp->hertz)
 80016a2:	2bfa      	cmp	r3, #250	; 0xfa
 80016a4:	f000 8316 	beq.w	8001cd4 <FreqMenu_DrawFreqPresetMenu+0x690>
 80016a8:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 80016ac:	f000 83bc 	beq.w	8001e28 <FreqMenu_DrawFreqPresetMenu+0x7e4>
 80016b0:	2b64      	cmp	r3, #100	; 0x64
 80016b2:	f000 8249 	beq.w	8001b48 <FreqMenu_DrawFreqPresetMenu+0x504>
}
 80016b6:	f001 ba28 	b.w	8002b0a <FreqMenu_DrawFreqPresetMenu+0x14c6>
		switch(pFreqPresetTmp->hertz)
 80016ba:	f246 12a8 	movw	r2, #25000	; 0x61a8
 80016be:	4293      	cmp	r3, r2
 80016c0:	f000 8756 	beq.w	8002570 <FreqMenu_DrawFreqPresetMenu+0xf2c>
 80016c4:	f246 12a8 	movw	r2, #25000	; 0x61a8
 80016c8:	4293      	cmp	r3, r2
 80016ca:	d80f      	bhi.n	80016ec <FreqMenu_DrawFreqPresetMenu+0xa8>
 80016cc:	f241 3288 	movw	r2, #5000	; 0x1388
 80016d0:	4293      	cmp	r3, r2
 80016d2:	f000 85df 	beq.w	8002294 <FreqMenu_DrawFreqPresetMenu+0xc50>
 80016d6:	f242 7210 	movw	r2, #10000	; 0x2710
 80016da:	4293      	cmp	r3, r2
 80016dc:	f000 8683 	beq.w	80023e6 <FreqMenu_DrawFreqPresetMenu+0xda2>
 80016e0:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80016e4:	f000 8510 	beq.w	8002108 <FreqMenu_DrawFreqPresetMenu+0xac4>
}
 80016e8:	f001 ba0f 	b.w	8002b0a <FreqMenu_DrawFreqPresetMenu+0x14c6>
		switch(pFreqPresetTmp->hertz)
 80016ec:	4ab1      	ldr	r2, [pc, #708]	; (80019b4 <FreqMenu_DrawFreqPresetMenu+0x370>)
 80016ee:	4293      	cmp	r3, r2
 80016f0:	f001 80ac 	beq.w	800284c <FreqMenu_DrawFreqPresetMenu+0x1208>
 80016f4:	4ab0      	ldr	r2, [pc, #704]	; (80019b8 <FreqMenu_DrawFreqPresetMenu+0x374>)
 80016f6:	4293      	cmp	r3, r2
 80016f8:	f001 8151 	beq.w	800299e <FreqMenu_DrawFreqPresetMenu+0x135a>
 80016fc:	f24c 3250 	movw	r2, #50000	; 0xc350
 8001700:	4293      	cmp	r3, r2
 8001702:	f000 87de 	beq.w	80026c2 <FreqMenu_DrawFreqPresetMenu+0x107e>
}
 8001706:	f001 ba00 	b.w	8002b0a <FreqMenu_DrawFreqPresetMenu+0x14c6>
				ILI9341_Draw_Text("- 1Hz", 		10, menu_pos_y1, WHITE, 2, BLACK);
 800170a:	7bfb      	ldrb	r3, [r7, #15]
 800170c:	b29a      	uxth	r2, r3
 800170e:	2300      	movs	r3, #0
 8001710:	9301      	str	r3, [sp, #4]
 8001712:	2302      	movs	r3, #2
 8001714:	9300      	str	r3, [sp, #0]
 8001716:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800171a:	210a      	movs	r1, #10
 800171c:	48a7      	ldr	r0, [pc, #668]	; (80019bc <FreqMenu_DrawFreqPresetMenu+0x378>)
 800171e:	f009 fd8b 	bl	800b238 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 10Hz", 	10, menu_pos_y2, BLACK, 2, WHITE);
 8001722:	7bbb      	ldrb	r3, [r7, #14]
 8001724:	b29a      	uxth	r2, r3
 8001726:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800172a:	9301      	str	r3, [sp, #4]
 800172c:	2302      	movs	r3, #2
 800172e:	9300      	str	r3, [sp, #0]
 8001730:	2300      	movs	r3, #0
 8001732:	210a      	movs	r1, #10
 8001734:	48a2      	ldr	r0, [pc, #648]	; (80019c0 <FreqMenu_DrawFreqPresetMenu+0x37c>)
 8001736:	f009 fd7f 	bl	800b238 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 50Hz", 	10, menu_pos_y3, BLACK, 2, WHITE);
 800173a:	7b7b      	ldrb	r3, [r7, #13]
 800173c:	b29a      	uxth	r2, r3
 800173e:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001742:	9301      	str	r3, [sp, #4]
 8001744:	2302      	movs	r3, #2
 8001746:	9300      	str	r3, [sp, #0]
 8001748:	2300      	movs	r3, #0
 800174a:	210a      	movs	r1, #10
 800174c:	489d      	ldr	r0, [pc, #628]	; (80019c4 <FreqMenu_DrawFreqPresetMenu+0x380>)
 800174e:	f009 fd73 	bl	800b238 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 100Hz", 	10, menu_pos_y4, BLACK, 2, WHITE);
 8001752:	7b3b      	ldrb	r3, [r7, #12]
 8001754:	b29a      	uxth	r2, r3
 8001756:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800175a:	9301      	str	r3, [sp, #4]
 800175c:	2302      	movs	r3, #2
 800175e:	9300      	str	r3, [sp, #0]
 8001760:	2300      	movs	r3, #0
 8001762:	210a      	movs	r1, #10
 8001764:	4898      	ldr	r0, [pc, #608]	; (80019c8 <FreqMenu_DrawFreqPresetMenu+0x384>)
 8001766:	f009 fd67 	bl	800b238 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 250Hz", 	10, menu_pos_y5, BLACK, 2, WHITE);
 800176a:	7afb      	ldrb	r3, [r7, #11]
 800176c:	b29a      	uxth	r2, r3
 800176e:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001772:	9301      	str	r3, [sp, #4]
 8001774:	2302      	movs	r3, #2
 8001776:	9300      	str	r3, [sp, #0]
 8001778:	2300      	movs	r3, #0
 800177a:	210a      	movs	r1, #10
 800177c:	4893      	ldr	r0, [pc, #588]	; (80019cc <FreqMenu_DrawFreqPresetMenu+0x388>)
 800177e:	f009 fd5b 	bl	800b238 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 500Hz",	10, menu_pos_y6, BLACK, 2, WHITE);
 8001782:	7abb      	ldrb	r3, [r7, #10]
 8001784:	b29a      	uxth	r2, r3
 8001786:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800178a:	9301      	str	r3, [sp, #4]
 800178c:	2302      	movs	r3, #2
 800178e:	9300      	str	r3, [sp, #0]
 8001790:	2300      	movs	r3, #0
 8001792:	210a      	movs	r1, #10
 8001794:	488e      	ldr	r0, [pc, #568]	; (80019d0 <FreqMenu_DrawFreqPresetMenu+0x38c>)
 8001796:	f009 fd4f 	bl	800b238 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 750Hz", 	10, menu_pos_y7, BLACK, 2, WHITE);
 800179a:	7a7b      	ldrb	r3, [r7, #9]
 800179c:	b29a      	uxth	r2, r3
 800179e:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80017a2:	9301      	str	r3, [sp, #4]
 80017a4:	2302      	movs	r3, #2
 80017a6:	9300      	str	r3, [sp, #0]
 80017a8:	2300      	movs	r3, #0
 80017aa:	210a      	movs	r1, #10
 80017ac:	4889      	ldr	r0, [pc, #548]	; (80019d4 <FreqMenu_DrawFreqPresetMenu+0x390>)
 80017ae:	f009 fd43 	bl	800b238 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 1KHz", 	120, menu_pos_y1, BLACK, 2, WHITE);
 80017b2:	7bfb      	ldrb	r3, [r7, #15]
 80017b4:	b29a      	uxth	r2, r3
 80017b6:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80017ba:	9301      	str	r3, [sp, #4]
 80017bc:	2302      	movs	r3, #2
 80017be:	9300      	str	r3, [sp, #0]
 80017c0:	2300      	movs	r3, #0
 80017c2:	2178      	movs	r1, #120	; 0x78
 80017c4:	4884      	ldr	r0, [pc, #528]	; (80019d8 <FreqMenu_DrawFreqPresetMenu+0x394>)
 80017c6:	f009 fd37 	bl	800b238 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 5KHz", 	120, menu_pos_y2, BLACK, 2, WHITE);
 80017ca:	7bbb      	ldrb	r3, [r7, #14]
 80017cc:	b29a      	uxth	r2, r3
 80017ce:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80017d2:	9301      	str	r3, [sp, #4]
 80017d4:	2302      	movs	r3, #2
 80017d6:	9300      	str	r3, [sp, #0]
 80017d8:	2300      	movs	r3, #0
 80017da:	2178      	movs	r1, #120	; 0x78
 80017dc:	487f      	ldr	r0, [pc, #508]	; (80019dc <FreqMenu_DrawFreqPresetMenu+0x398>)
 80017de:	f009 fd2b 	bl	800b238 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 10KHz", 	120, menu_pos_y3, BLACK, 2, WHITE);
 80017e2:	7b7b      	ldrb	r3, [r7, #13]
 80017e4:	b29a      	uxth	r2, r3
 80017e6:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80017ea:	9301      	str	r3, [sp, #4]
 80017ec:	2302      	movs	r3, #2
 80017ee:	9300      	str	r3, [sp, #0]
 80017f0:	2300      	movs	r3, #0
 80017f2:	2178      	movs	r1, #120	; 0x78
 80017f4:	487a      	ldr	r0, [pc, #488]	; (80019e0 <FreqMenu_DrawFreqPresetMenu+0x39c>)
 80017f6:	f009 fd1f 	bl	800b238 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 25KHz", 	120, menu_pos_y4, BLACK, 2, WHITE);
 80017fa:	7b3b      	ldrb	r3, [r7, #12]
 80017fc:	b29a      	uxth	r2, r3
 80017fe:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001802:	9301      	str	r3, [sp, #4]
 8001804:	2302      	movs	r3, #2
 8001806:	9300      	str	r3, [sp, #0]
 8001808:	2300      	movs	r3, #0
 800180a:	2178      	movs	r1, #120	; 0x78
 800180c:	4875      	ldr	r0, [pc, #468]	; (80019e4 <FreqMenu_DrawFreqPresetMenu+0x3a0>)
 800180e:	f009 fd13 	bl	800b238 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 50KHz", 	120, menu_pos_y5, BLACK, 2, WHITE);
 8001812:	7afb      	ldrb	r3, [r7, #11]
 8001814:	b29a      	uxth	r2, r3
 8001816:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800181a:	9301      	str	r3, [sp, #4]
 800181c:	2302      	movs	r3, #2
 800181e:	9300      	str	r3, [sp, #0]
 8001820:	2300      	movs	r3, #0
 8001822:	2178      	movs	r1, #120	; 0x78
 8001824:	4870      	ldr	r0, [pc, #448]	; (80019e8 <FreqMenu_DrawFreqPresetMenu+0x3a4>)
 8001826:	f009 fd07 	bl	800b238 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 75KHz",	120, menu_pos_y6, BLACK, 2, WHITE);
 800182a:	7abb      	ldrb	r3, [r7, #10]
 800182c:	b29a      	uxth	r2, r3
 800182e:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001832:	9301      	str	r3, [sp, #4]
 8001834:	2302      	movs	r3, #2
 8001836:	9300      	str	r3, [sp, #0]
 8001838:	2300      	movs	r3, #0
 800183a:	2178      	movs	r1, #120	; 0x78
 800183c:	486b      	ldr	r0, [pc, #428]	; (80019ec <FreqMenu_DrawFreqPresetMenu+0x3a8>)
 800183e:	f009 fcfb 	bl	800b238 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 100KHz", 	120, menu_pos_y7, BLACK, 2, WHITE);
 8001842:	7a7b      	ldrb	r3, [r7, #9]
 8001844:	b29a      	uxth	r2, r3
 8001846:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800184a:	9301      	str	r3, [sp, #4]
 800184c:	2302      	movs	r3, #2
 800184e:	9300      	str	r3, [sp, #0]
 8001850:	2300      	movs	r3, #0
 8001852:	2178      	movs	r1, #120	; 0x78
 8001854:	4866      	ldr	r0, [pc, #408]	; (80019f0 <FreqMenu_DrawFreqPresetMenu+0x3ac>)
 8001856:	f009 fcef 	bl	800b238 <ILI9341_Draw_Text>
				break;
 800185a:	f001 b956 	b.w	8002b0a <FreqMenu_DrawFreqPresetMenu+0x14c6>
				ILI9341_Draw_Text("- 1Hz", 		10, menu_pos_y1, BLACK, 2, WHITE);
 800185e:	7bfb      	ldrb	r3, [r7, #15]
 8001860:	b29a      	uxth	r2, r3
 8001862:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001866:	9301      	str	r3, [sp, #4]
 8001868:	2302      	movs	r3, #2
 800186a:	9300      	str	r3, [sp, #0]
 800186c:	2300      	movs	r3, #0
 800186e:	210a      	movs	r1, #10
 8001870:	4852      	ldr	r0, [pc, #328]	; (80019bc <FreqMenu_DrawFreqPresetMenu+0x378>)
 8001872:	f009 fce1 	bl	800b238 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 10Hz", 	10, menu_pos_y2, WHITE, 2, BLACK);
 8001876:	7bbb      	ldrb	r3, [r7, #14]
 8001878:	b29a      	uxth	r2, r3
 800187a:	2300      	movs	r3, #0
 800187c:	9301      	str	r3, [sp, #4]
 800187e:	2302      	movs	r3, #2
 8001880:	9300      	str	r3, [sp, #0]
 8001882:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001886:	210a      	movs	r1, #10
 8001888:	484d      	ldr	r0, [pc, #308]	; (80019c0 <FreqMenu_DrawFreqPresetMenu+0x37c>)
 800188a:	f009 fcd5 	bl	800b238 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 50Hz", 	10, menu_pos_y3, BLACK, 2, WHITE);
 800188e:	7b7b      	ldrb	r3, [r7, #13]
 8001890:	b29a      	uxth	r2, r3
 8001892:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001896:	9301      	str	r3, [sp, #4]
 8001898:	2302      	movs	r3, #2
 800189a:	9300      	str	r3, [sp, #0]
 800189c:	2300      	movs	r3, #0
 800189e:	210a      	movs	r1, #10
 80018a0:	4848      	ldr	r0, [pc, #288]	; (80019c4 <FreqMenu_DrawFreqPresetMenu+0x380>)
 80018a2:	f009 fcc9 	bl	800b238 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 100Hz", 	10, menu_pos_y4, BLACK, 2, WHITE);
 80018a6:	7b3b      	ldrb	r3, [r7, #12]
 80018a8:	b29a      	uxth	r2, r3
 80018aa:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80018ae:	9301      	str	r3, [sp, #4]
 80018b0:	2302      	movs	r3, #2
 80018b2:	9300      	str	r3, [sp, #0]
 80018b4:	2300      	movs	r3, #0
 80018b6:	210a      	movs	r1, #10
 80018b8:	4843      	ldr	r0, [pc, #268]	; (80019c8 <FreqMenu_DrawFreqPresetMenu+0x384>)
 80018ba:	f009 fcbd 	bl	800b238 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 250Hz", 	10, menu_pos_y5, BLACK, 2, WHITE);
 80018be:	7afb      	ldrb	r3, [r7, #11]
 80018c0:	b29a      	uxth	r2, r3
 80018c2:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80018c6:	9301      	str	r3, [sp, #4]
 80018c8:	2302      	movs	r3, #2
 80018ca:	9300      	str	r3, [sp, #0]
 80018cc:	2300      	movs	r3, #0
 80018ce:	210a      	movs	r1, #10
 80018d0:	483e      	ldr	r0, [pc, #248]	; (80019cc <FreqMenu_DrawFreqPresetMenu+0x388>)
 80018d2:	f009 fcb1 	bl	800b238 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 500Hz",	10, menu_pos_y6, BLACK, 2, WHITE);
 80018d6:	7abb      	ldrb	r3, [r7, #10]
 80018d8:	b29a      	uxth	r2, r3
 80018da:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80018de:	9301      	str	r3, [sp, #4]
 80018e0:	2302      	movs	r3, #2
 80018e2:	9300      	str	r3, [sp, #0]
 80018e4:	2300      	movs	r3, #0
 80018e6:	210a      	movs	r1, #10
 80018e8:	4839      	ldr	r0, [pc, #228]	; (80019d0 <FreqMenu_DrawFreqPresetMenu+0x38c>)
 80018ea:	f009 fca5 	bl	800b238 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 750Hz", 	10, menu_pos_y7, BLACK, 2, WHITE);
 80018ee:	7a7b      	ldrb	r3, [r7, #9]
 80018f0:	b29a      	uxth	r2, r3
 80018f2:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80018f6:	9301      	str	r3, [sp, #4]
 80018f8:	2302      	movs	r3, #2
 80018fa:	9300      	str	r3, [sp, #0]
 80018fc:	2300      	movs	r3, #0
 80018fe:	210a      	movs	r1, #10
 8001900:	4834      	ldr	r0, [pc, #208]	; (80019d4 <FreqMenu_DrawFreqPresetMenu+0x390>)
 8001902:	f009 fc99 	bl	800b238 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 1KHz", 	120, menu_pos_y1, BLACK, 2, WHITE);
 8001906:	7bfb      	ldrb	r3, [r7, #15]
 8001908:	b29a      	uxth	r2, r3
 800190a:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800190e:	9301      	str	r3, [sp, #4]
 8001910:	2302      	movs	r3, #2
 8001912:	9300      	str	r3, [sp, #0]
 8001914:	2300      	movs	r3, #0
 8001916:	2178      	movs	r1, #120	; 0x78
 8001918:	482f      	ldr	r0, [pc, #188]	; (80019d8 <FreqMenu_DrawFreqPresetMenu+0x394>)
 800191a:	f009 fc8d 	bl	800b238 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 5KHz", 	120, menu_pos_y2, BLACK, 2, WHITE);
 800191e:	7bbb      	ldrb	r3, [r7, #14]
 8001920:	b29a      	uxth	r2, r3
 8001922:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001926:	9301      	str	r3, [sp, #4]
 8001928:	2302      	movs	r3, #2
 800192a:	9300      	str	r3, [sp, #0]
 800192c:	2300      	movs	r3, #0
 800192e:	2178      	movs	r1, #120	; 0x78
 8001930:	482a      	ldr	r0, [pc, #168]	; (80019dc <FreqMenu_DrawFreqPresetMenu+0x398>)
 8001932:	f009 fc81 	bl	800b238 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 10KHz", 	120, menu_pos_y3, BLACK, 2, WHITE);
 8001936:	7b7b      	ldrb	r3, [r7, #13]
 8001938:	b29a      	uxth	r2, r3
 800193a:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800193e:	9301      	str	r3, [sp, #4]
 8001940:	2302      	movs	r3, #2
 8001942:	9300      	str	r3, [sp, #0]
 8001944:	2300      	movs	r3, #0
 8001946:	2178      	movs	r1, #120	; 0x78
 8001948:	4825      	ldr	r0, [pc, #148]	; (80019e0 <FreqMenu_DrawFreqPresetMenu+0x39c>)
 800194a:	f009 fc75 	bl	800b238 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 25KHz", 	120, menu_pos_y4, BLACK, 2, WHITE);
 800194e:	7b3b      	ldrb	r3, [r7, #12]
 8001950:	b29a      	uxth	r2, r3
 8001952:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001956:	9301      	str	r3, [sp, #4]
 8001958:	2302      	movs	r3, #2
 800195a:	9300      	str	r3, [sp, #0]
 800195c:	2300      	movs	r3, #0
 800195e:	2178      	movs	r1, #120	; 0x78
 8001960:	4820      	ldr	r0, [pc, #128]	; (80019e4 <FreqMenu_DrawFreqPresetMenu+0x3a0>)
 8001962:	f009 fc69 	bl	800b238 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 50KHz", 	120, menu_pos_y5, BLACK, 2, WHITE);
 8001966:	7afb      	ldrb	r3, [r7, #11]
 8001968:	b29a      	uxth	r2, r3
 800196a:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800196e:	9301      	str	r3, [sp, #4]
 8001970:	2302      	movs	r3, #2
 8001972:	9300      	str	r3, [sp, #0]
 8001974:	2300      	movs	r3, #0
 8001976:	2178      	movs	r1, #120	; 0x78
 8001978:	481b      	ldr	r0, [pc, #108]	; (80019e8 <FreqMenu_DrawFreqPresetMenu+0x3a4>)
 800197a:	f009 fc5d 	bl	800b238 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 75KHz",	120, menu_pos_y6, BLACK, 2, WHITE);
 800197e:	7abb      	ldrb	r3, [r7, #10]
 8001980:	b29a      	uxth	r2, r3
 8001982:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001986:	9301      	str	r3, [sp, #4]
 8001988:	2302      	movs	r3, #2
 800198a:	9300      	str	r3, [sp, #0]
 800198c:	2300      	movs	r3, #0
 800198e:	2178      	movs	r1, #120	; 0x78
 8001990:	4816      	ldr	r0, [pc, #88]	; (80019ec <FreqMenu_DrawFreqPresetMenu+0x3a8>)
 8001992:	f009 fc51 	bl	800b238 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 100KHz", 	120, menu_pos_y7, BLACK, 2, WHITE);
 8001996:	7a7b      	ldrb	r3, [r7, #9]
 8001998:	b29a      	uxth	r2, r3
 800199a:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800199e:	9301      	str	r3, [sp, #4]
 80019a0:	2302      	movs	r3, #2
 80019a2:	9300      	str	r3, [sp, #0]
 80019a4:	2300      	movs	r3, #0
 80019a6:	2178      	movs	r1, #120	; 0x78
 80019a8:	4811      	ldr	r0, [pc, #68]	; (80019f0 <FreqMenu_DrawFreqPresetMenu+0x3ac>)
 80019aa:	f009 fc45 	bl	800b238 <ILI9341_Draw_Text>
				break;
 80019ae:	f001 b8ac 	b.w	8002b0a <FreqMenu_DrawFreqPresetMenu+0x14c6>
 80019b2:	bf00      	nop
 80019b4:	000124f8 	.word	0x000124f8
 80019b8:	000186a0 	.word	0x000186a0
 80019bc:	0800e85c 	.word	0x0800e85c
 80019c0:	0800e864 	.word	0x0800e864
 80019c4:	0800e86c 	.word	0x0800e86c
 80019c8:	0800e874 	.word	0x0800e874
 80019cc:	0800e87c 	.word	0x0800e87c
 80019d0:	0800e884 	.word	0x0800e884
 80019d4:	0800e88c 	.word	0x0800e88c
 80019d8:	0800e894 	.word	0x0800e894
 80019dc:	0800e89c 	.word	0x0800e89c
 80019e0:	0800e8a4 	.word	0x0800e8a4
 80019e4:	0800e8ac 	.word	0x0800e8ac
 80019e8:	0800e8b4 	.word	0x0800e8b4
 80019ec:	0800e8bc 	.word	0x0800e8bc
 80019f0:	0800e8c4 	.word	0x0800e8c4
				ILI9341_Draw_Text("- 1Hz", 		10, menu_pos_y1, BLACK, 2, WHITE);
 80019f4:	7bfb      	ldrb	r3, [r7, #15]
 80019f6:	b29a      	uxth	r2, r3
 80019f8:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80019fc:	9301      	str	r3, [sp, #4]
 80019fe:	2302      	movs	r3, #2
 8001a00:	9300      	str	r3, [sp, #0]
 8001a02:	2300      	movs	r3, #0
 8001a04:	210a      	movs	r1, #10
 8001a06:	48a5      	ldr	r0, [pc, #660]	; (8001c9c <FreqMenu_DrawFreqPresetMenu+0x658>)
 8001a08:	f009 fc16 	bl	800b238 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 10Hz", 	10, menu_pos_y2, BLACK, 2, WHITE);
 8001a0c:	7bbb      	ldrb	r3, [r7, #14]
 8001a0e:	b29a      	uxth	r2, r3
 8001a10:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001a14:	9301      	str	r3, [sp, #4]
 8001a16:	2302      	movs	r3, #2
 8001a18:	9300      	str	r3, [sp, #0]
 8001a1a:	2300      	movs	r3, #0
 8001a1c:	210a      	movs	r1, #10
 8001a1e:	48a0      	ldr	r0, [pc, #640]	; (8001ca0 <FreqMenu_DrawFreqPresetMenu+0x65c>)
 8001a20:	f009 fc0a 	bl	800b238 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 50Hz", 	10, menu_pos_y3, WHITE, 2, BLACK);
 8001a24:	7b7b      	ldrb	r3, [r7, #13]
 8001a26:	b29a      	uxth	r2, r3
 8001a28:	2300      	movs	r3, #0
 8001a2a:	9301      	str	r3, [sp, #4]
 8001a2c:	2302      	movs	r3, #2
 8001a2e:	9300      	str	r3, [sp, #0]
 8001a30:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001a34:	210a      	movs	r1, #10
 8001a36:	489b      	ldr	r0, [pc, #620]	; (8001ca4 <FreqMenu_DrawFreqPresetMenu+0x660>)
 8001a38:	f009 fbfe 	bl	800b238 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 100Hz", 	10, menu_pos_y4, BLACK, 2, WHITE);
 8001a3c:	7b3b      	ldrb	r3, [r7, #12]
 8001a3e:	b29a      	uxth	r2, r3
 8001a40:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001a44:	9301      	str	r3, [sp, #4]
 8001a46:	2302      	movs	r3, #2
 8001a48:	9300      	str	r3, [sp, #0]
 8001a4a:	2300      	movs	r3, #0
 8001a4c:	210a      	movs	r1, #10
 8001a4e:	4896      	ldr	r0, [pc, #600]	; (8001ca8 <FreqMenu_DrawFreqPresetMenu+0x664>)
 8001a50:	f009 fbf2 	bl	800b238 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 250Hz", 	10, menu_pos_y5, BLACK, 2, WHITE);
 8001a54:	7afb      	ldrb	r3, [r7, #11]
 8001a56:	b29a      	uxth	r2, r3
 8001a58:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001a5c:	9301      	str	r3, [sp, #4]
 8001a5e:	2302      	movs	r3, #2
 8001a60:	9300      	str	r3, [sp, #0]
 8001a62:	2300      	movs	r3, #0
 8001a64:	210a      	movs	r1, #10
 8001a66:	4891      	ldr	r0, [pc, #580]	; (8001cac <FreqMenu_DrawFreqPresetMenu+0x668>)
 8001a68:	f009 fbe6 	bl	800b238 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 500Hz",	10, menu_pos_y6, BLACK, 2, WHITE);
 8001a6c:	7abb      	ldrb	r3, [r7, #10]
 8001a6e:	b29a      	uxth	r2, r3
 8001a70:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001a74:	9301      	str	r3, [sp, #4]
 8001a76:	2302      	movs	r3, #2
 8001a78:	9300      	str	r3, [sp, #0]
 8001a7a:	2300      	movs	r3, #0
 8001a7c:	210a      	movs	r1, #10
 8001a7e:	488c      	ldr	r0, [pc, #560]	; (8001cb0 <FreqMenu_DrawFreqPresetMenu+0x66c>)
 8001a80:	f009 fbda 	bl	800b238 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 750Hz", 	10, menu_pos_y7, BLACK, 2, WHITE);
 8001a84:	7a7b      	ldrb	r3, [r7, #9]
 8001a86:	b29a      	uxth	r2, r3
 8001a88:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001a8c:	9301      	str	r3, [sp, #4]
 8001a8e:	2302      	movs	r3, #2
 8001a90:	9300      	str	r3, [sp, #0]
 8001a92:	2300      	movs	r3, #0
 8001a94:	210a      	movs	r1, #10
 8001a96:	4887      	ldr	r0, [pc, #540]	; (8001cb4 <FreqMenu_DrawFreqPresetMenu+0x670>)
 8001a98:	f009 fbce 	bl	800b238 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 1KHz", 	120, menu_pos_y1, BLACK, 2, WHITE);
 8001a9c:	7bfb      	ldrb	r3, [r7, #15]
 8001a9e:	b29a      	uxth	r2, r3
 8001aa0:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001aa4:	9301      	str	r3, [sp, #4]
 8001aa6:	2302      	movs	r3, #2
 8001aa8:	9300      	str	r3, [sp, #0]
 8001aaa:	2300      	movs	r3, #0
 8001aac:	2178      	movs	r1, #120	; 0x78
 8001aae:	4882      	ldr	r0, [pc, #520]	; (8001cb8 <FreqMenu_DrawFreqPresetMenu+0x674>)
 8001ab0:	f009 fbc2 	bl	800b238 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 5KHz", 	120, menu_pos_y2, BLACK, 2, WHITE);
 8001ab4:	7bbb      	ldrb	r3, [r7, #14]
 8001ab6:	b29a      	uxth	r2, r3
 8001ab8:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001abc:	9301      	str	r3, [sp, #4]
 8001abe:	2302      	movs	r3, #2
 8001ac0:	9300      	str	r3, [sp, #0]
 8001ac2:	2300      	movs	r3, #0
 8001ac4:	2178      	movs	r1, #120	; 0x78
 8001ac6:	487d      	ldr	r0, [pc, #500]	; (8001cbc <FreqMenu_DrawFreqPresetMenu+0x678>)
 8001ac8:	f009 fbb6 	bl	800b238 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 10KHz", 	120, menu_pos_y3, BLACK, 2, WHITE);
 8001acc:	7b7b      	ldrb	r3, [r7, #13]
 8001ace:	b29a      	uxth	r2, r3
 8001ad0:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001ad4:	9301      	str	r3, [sp, #4]
 8001ad6:	2302      	movs	r3, #2
 8001ad8:	9300      	str	r3, [sp, #0]
 8001ada:	2300      	movs	r3, #0
 8001adc:	2178      	movs	r1, #120	; 0x78
 8001ade:	4878      	ldr	r0, [pc, #480]	; (8001cc0 <FreqMenu_DrawFreqPresetMenu+0x67c>)
 8001ae0:	f009 fbaa 	bl	800b238 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 25KHz", 	120, menu_pos_y4, BLACK, 2, WHITE);
 8001ae4:	7b3b      	ldrb	r3, [r7, #12]
 8001ae6:	b29a      	uxth	r2, r3
 8001ae8:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001aec:	9301      	str	r3, [sp, #4]
 8001aee:	2302      	movs	r3, #2
 8001af0:	9300      	str	r3, [sp, #0]
 8001af2:	2300      	movs	r3, #0
 8001af4:	2178      	movs	r1, #120	; 0x78
 8001af6:	4873      	ldr	r0, [pc, #460]	; (8001cc4 <FreqMenu_DrawFreqPresetMenu+0x680>)
 8001af8:	f009 fb9e 	bl	800b238 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 50KHz", 	120, menu_pos_y5, BLACK, 2, WHITE);
 8001afc:	7afb      	ldrb	r3, [r7, #11]
 8001afe:	b29a      	uxth	r2, r3
 8001b00:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001b04:	9301      	str	r3, [sp, #4]
 8001b06:	2302      	movs	r3, #2
 8001b08:	9300      	str	r3, [sp, #0]
 8001b0a:	2300      	movs	r3, #0
 8001b0c:	2178      	movs	r1, #120	; 0x78
 8001b0e:	486e      	ldr	r0, [pc, #440]	; (8001cc8 <FreqMenu_DrawFreqPresetMenu+0x684>)
 8001b10:	f009 fb92 	bl	800b238 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 75KHz",	120, menu_pos_y6, BLACK, 2, WHITE);
 8001b14:	7abb      	ldrb	r3, [r7, #10]
 8001b16:	b29a      	uxth	r2, r3
 8001b18:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001b1c:	9301      	str	r3, [sp, #4]
 8001b1e:	2302      	movs	r3, #2
 8001b20:	9300      	str	r3, [sp, #0]
 8001b22:	2300      	movs	r3, #0
 8001b24:	2178      	movs	r1, #120	; 0x78
 8001b26:	4869      	ldr	r0, [pc, #420]	; (8001ccc <FreqMenu_DrawFreqPresetMenu+0x688>)
 8001b28:	f009 fb86 	bl	800b238 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 100KHz", 	120, menu_pos_y7, BLACK, 2, WHITE);
 8001b2c:	7a7b      	ldrb	r3, [r7, #9]
 8001b2e:	b29a      	uxth	r2, r3
 8001b30:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001b34:	9301      	str	r3, [sp, #4]
 8001b36:	2302      	movs	r3, #2
 8001b38:	9300      	str	r3, [sp, #0]
 8001b3a:	2300      	movs	r3, #0
 8001b3c:	2178      	movs	r1, #120	; 0x78
 8001b3e:	4864      	ldr	r0, [pc, #400]	; (8001cd0 <FreqMenu_DrawFreqPresetMenu+0x68c>)
 8001b40:	f009 fb7a 	bl	800b238 <ILI9341_Draw_Text>
				break;
 8001b44:	f000 bfe1 	b.w	8002b0a <FreqMenu_DrawFreqPresetMenu+0x14c6>
				ILI9341_Draw_Text("- 1Hz", 		10, menu_pos_y1, BLACK, 2, WHITE);
 8001b48:	7bfb      	ldrb	r3, [r7, #15]
 8001b4a:	b29a      	uxth	r2, r3
 8001b4c:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001b50:	9301      	str	r3, [sp, #4]
 8001b52:	2302      	movs	r3, #2
 8001b54:	9300      	str	r3, [sp, #0]
 8001b56:	2300      	movs	r3, #0
 8001b58:	210a      	movs	r1, #10
 8001b5a:	4850      	ldr	r0, [pc, #320]	; (8001c9c <FreqMenu_DrawFreqPresetMenu+0x658>)
 8001b5c:	f009 fb6c 	bl	800b238 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 10Hz", 	10, menu_pos_y2, BLACK, 2, WHITE);
 8001b60:	7bbb      	ldrb	r3, [r7, #14]
 8001b62:	b29a      	uxth	r2, r3
 8001b64:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001b68:	9301      	str	r3, [sp, #4]
 8001b6a:	2302      	movs	r3, #2
 8001b6c:	9300      	str	r3, [sp, #0]
 8001b6e:	2300      	movs	r3, #0
 8001b70:	210a      	movs	r1, #10
 8001b72:	484b      	ldr	r0, [pc, #300]	; (8001ca0 <FreqMenu_DrawFreqPresetMenu+0x65c>)
 8001b74:	f009 fb60 	bl	800b238 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 50Hz", 	10, menu_pos_y3, BLACK, 2, WHITE);
 8001b78:	7b7b      	ldrb	r3, [r7, #13]
 8001b7a:	b29a      	uxth	r2, r3
 8001b7c:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001b80:	9301      	str	r3, [sp, #4]
 8001b82:	2302      	movs	r3, #2
 8001b84:	9300      	str	r3, [sp, #0]
 8001b86:	2300      	movs	r3, #0
 8001b88:	210a      	movs	r1, #10
 8001b8a:	4846      	ldr	r0, [pc, #280]	; (8001ca4 <FreqMenu_DrawFreqPresetMenu+0x660>)
 8001b8c:	f009 fb54 	bl	800b238 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 100Hz", 	10, menu_pos_y4, WHITE, 2, BLACK);
 8001b90:	7b3b      	ldrb	r3, [r7, #12]
 8001b92:	b29a      	uxth	r2, r3
 8001b94:	2300      	movs	r3, #0
 8001b96:	9301      	str	r3, [sp, #4]
 8001b98:	2302      	movs	r3, #2
 8001b9a:	9300      	str	r3, [sp, #0]
 8001b9c:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001ba0:	210a      	movs	r1, #10
 8001ba2:	4841      	ldr	r0, [pc, #260]	; (8001ca8 <FreqMenu_DrawFreqPresetMenu+0x664>)
 8001ba4:	f009 fb48 	bl	800b238 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 250Hz", 	10, menu_pos_y5, BLACK, 2, WHITE);
 8001ba8:	7afb      	ldrb	r3, [r7, #11]
 8001baa:	b29a      	uxth	r2, r3
 8001bac:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001bb0:	9301      	str	r3, [sp, #4]
 8001bb2:	2302      	movs	r3, #2
 8001bb4:	9300      	str	r3, [sp, #0]
 8001bb6:	2300      	movs	r3, #0
 8001bb8:	210a      	movs	r1, #10
 8001bba:	483c      	ldr	r0, [pc, #240]	; (8001cac <FreqMenu_DrawFreqPresetMenu+0x668>)
 8001bbc:	f009 fb3c 	bl	800b238 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 500Hz",	10, menu_pos_y6, BLACK, 2, WHITE);
 8001bc0:	7abb      	ldrb	r3, [r7, #10]
 8001bc2:	b29a      	uxth	r2, r3
 8001bc4:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001bc8:	9301      	str	r3, [sp, #4]
 8001bca:	2302      	movs	r3, #2
 8001bcc:	9300      	str	r3, [sp, #0]
 8001bce:	2300      	movs	r3, #0
 8001bd0:	210a      	movs	r1, #10
 8001bd2:	4837      	ldr	r0, [pc, #220]	; (8001cb0 <FreqMenu_DrawFreqPresetMenu+0x66c>)
 8001bd4:	f009 fb30 	bl	800b238 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 750Hz", 	10, menu_pos_y7, BLACK, 2, WHITE);
 8001bd8:	7a7b      	ldrb	r3, [r7, #9]
 8001bda:	b29a      	uxth	r2, r3
 8001bdc:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001be0:	9301      	str	r3, [sp, #4]
 8001be2:	2302      	movs	r3, #2
 8001be4:	9300      	str	r3, [sp, #0]
 8001be6:	2300      	movs	r3, #0
 8001be8:	210a      	movs	r1, #10
 8001bea:	4832      	ldr	r0, [pc, #200]	; (8001cb4 <FreqMenu_DrawFreqPresetMenu+0x670>)
 8001bec:	f009 fb24 	bl	800b238 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 1KHz", 	120, menu_pos_y1, BLACK, 2, WHITE);
 8001bf0:	7bfb      	ldrb	r3, [r7, #15]
 8001bf2:	b29a      	uxth	r2, r3
 8001bf4:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001bf8:	9301      	str	r3, [sp, #4]
 8001bfa:	2302      	movs	r3, #2
 8001bfc:	9300      	str	r3, [sp, #0]
 8001bfe:	2300      	movs	r3, #0
 8001c00:	2178      	movs	r1, #120	; 0x78
 8001c02:	482d      	ldr	r0, [pc, #180]	; (8001cb8 <FreqMenu_DrawFreqPresetMenu+0x674>)
 8001c04:	f009 fb18 	bl	800b238 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 5KHz", 	120, menu_pos_y2, BLACK, 2, WHITE);
 8001c08:	7bbb      	ldrb	r3, [r7, #14]
 8001c0a:	b29a      	uxth	r2, r3
 8001c0c:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001c10:	9301      	str	r3, [sp, #4]
 8001c12:	2302      	movs	r3, #2
 8001c14:	9300      	str	r3, [sp, #0]
 8001c16:	2300      	movs	r3, #0
 8001c18:	2178      	movs	r1, #120	; 0x78
 8001c1a:	4828      	ldr	r0, [pc, #160]	; (8001cbc <FreqMenu_DrawFreqPresetMenu+0x678>)
 8001c1c:	f009 fb0c 	bl	800b238 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 10KHz", 	120, menu_pos_y3, BLACK, 2, WHITE);
 8001c20:	7b7b      	ldrb	r3, [r7, #13]
 8001c22:	b29a      	uxth	r2, r3
 8001c24:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001c28:	9301      	str	r3, [sp, #4]
 8001c2a:	2302      	movs	r3, #2
 8001c2c:	9300      	str	r3, [sp, #0]
 8001c2e:	2300      	movs	r3, #0
 8001c30:	2178      	movs	r1, #120	; 0x78
 8001c32:	4823      	ldr	r0, [pc, #140]	; (8001cc0 <FreqMenu_DrawFreqPresetMenu+0x67c>)
 8001c34:	f009 fb00 	bl	800b238 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 25KHz", 	120, menu_pos_y4, BLACK, 2, WHITE);
 8001c38:	7b3b      	ldrb	r3, [r7, #12]
 8001c3a:	b29a      	uxth	r2, r3
 8001c3c:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001c40:	9301      	str	r3, [sp, #4]
 8001c42:	2302      	movs	r3, #2
 8001c44:	9300      	str	r3, [sp, #0]
 8001c46:	2300      	movs	r3, #0
 8001c48:	2178      	movs	r1, #120	; 0x78
 8001c4a:	481e      	ldr	r0, [pc, #120]	; (8001cc4 <FreqMenu_DrawFreqPresetMenu+0x680>)
 8001c4c:	f009 faf4 	bl	800b238 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 50KHz", 	120, menu_pos_y5, BLACK, 2, WHITE);
 8001c50:	7afb      	ldrb	r3, [r7, #11]
 8001c52:	b29a      	uxth	r2, r3
 8001c54:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001c58:	9301      	str	r3, [sp, #4]
 8001c5a:	2302      	movs	r3, #2
 8001c5c:	9300      	str	r3, [sp, #0]
 8001c5e:	2300      	movs	r3, #0
 8001c60:	2178      	movs	r1, #120	; 0x78
 8001c62:	4819      	ldr	r0, [pc, #100]	; (8001cc8 <FreqMenu_DrawFreqPresetMenu+0x684>)
 8001c64:	f009 fae8 	bl	800b238 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 75KHz",	120, menu_pos_y6, BLACK, 2, WHITE);
 8001c68:	7abb      	ldrb	r3, [r7, #10]
 8001c6a:	b29a      	uxth	r2, r3
 8001c6c:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001c70:	9301      	str	r3, [sp, #4]
 8001c72:	2302      	movs	r3, #2
 8001c74:	9300      	str	r3, [sp, #0]
 8001c76:	2300      	movs	r3, #0
 8001c78:	2178      	movs	r1, #120	; 0x78
 8001c7a:	4814      	ldr	r0, [pc, #80]	; (8001ccc <FreqMenu_DrawFreqPresetMenu+0x688>)
 8001c7c:	f009 fadc 	bl	800b238 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 100KHz", 	120, menu_pos_y7, BLACK, 2, WHITE);
 8001c80:	7a7b      	ldrb	r3, [r7, #9]
 8001c82:	b29a      	uxth	r2, r3
 8001c84:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001c88:	9301      	str	r3, [sp, #4]
 8001c8a:	2302      	movs	r3, #2
 8001c8c:	9300      	str	r3, [sp, #0]
 8001c8e:	2300      	movs	r3, #0
 8001c90:	2178      	movs	r1, #120	; 0x78
 8001c92:	480f      	ldr	r0, [pc, #60]	; (8001cd0 <FreqMenu_DrawFreqPresetMenu+0x68c>)
 8001c94:	f009 fad0 	bl	800b238 <ILI9341_Draw_Text>
				break;
 8001c98:	f000 bf37 	b.w	8002b0a <FreqMenu_DrawFreqPresetMenu+0x14c6>
 8001c9c:	0800e85c 	.word	0x0800e85c
 8001ca0:	0800e864 	.word	0x0800e864
 8001ca4:	0800e86c 	.word	0x0800e86c
 8001ca8:	0800e874 	.word	0x0800e874
 8001cac:	0800e87c 	.word	0x0800e87c
 8001cb0:	0800e884 	.word	0x0800e884
 8001cb4:	0800e88c 	.word	0x0800e88c
 8001cb8:	0800e894 	.word	0x0800e894
 8001cbc:	0800e89c 	.word	0x0800e89c
 8001cc0:	0800e8a4 	.word	0x0800e8a4
 8001cc4:	0800e8ac 	.word	0x0800e8ac
 8001cc8:	0800e8b4 	.word	0x0800e8b4
 8001ccc:	0800e8bc 	.word	0x0800e8bc
 8001cd0:	0800e8c4 	.word	0x0800e8c4
				ILI9341_Draw_Text("- 1Hz", 		10, menu_pos_y1, BLACK, 2, WHITE);
 8001cd4:	7bfb      	ldrb	r3, [r7, #15]
 8001cd6:	b29a      	uxth	r2, r3
 8001cd8:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001cdc:	9301      	str	r3, [sp, #4]
 8001cde:	2302      	movs	r3, #2
 8001ce0:	9300      	str	r3, [sp, #0]
 8001ce2:	2300      	movs	r3, #0
 8001ce4:	210a      	movs	r1, #10
 8001ce6:	48a5      	ldr	r0, [pc, #660]	; (8001f7c <FreqMenu_DrawFreqPresetMenu+0x938>)
 8001ce8:	f009 faa6 	bl	800b238 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 10Hz", 	10, menu_pos_y2, BLACK, 2, WHITE);
 8001cec:	7bbb      	ldrb	r3, [r7, #14]
 8001cee:	b29a      	uxth	r2, r3
 8001cf0:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001cf4:	9301      	str	r3, [sp, #4]
 8001cf6:	2302      	movs	r3, #2
 8001cf8:	9300      	str	r3, [sp, #0]
 8001cfa:	2300      	movs	r3, #0
 8001cfc:	210a      	movs	r1, #10
 8001cfe:	48a0      	ldr	r0, [pc, #640]	; (8001f80 <FreqMenu_DrawFreqPresetMenu+0x93c>)
 8001d00:	f009 fa9a 	bl	800b238 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 50Hz", 	10, menu_pos_y3, BLACK, 2, WHITE);
 8001d04:	7b7b      	ldrb	r3, [r7, #13]
 8001d06:	b29a      	uxth	r2, r3
 8001d08:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001d0c:	9301      	str	r3, [sp, #4]
 8001d0e:	2302      	movs	r3, #2
 8001d10:	9300      	str	r3, [sp, #0]
 8001d12:	2300      	movs	r3, #0
 8001d14:	210a      	movs	r1, #10
 8001d16:	489b      	ldr	r0, [pc, #620]	; (8001f84 <FreqMenu_DrawFreqPresetMenu+0x940>)
 8001d18:	f009 fa8e 	bl	800b238 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 100Hz", 	10, menu_pos_y4, BLACK, 2, WHITE);
 8001d1c:	7b3b      	ldrb	r3, [r7, #12]
 8001d1e:	b29a      	uxth	r2, r3
 8001d20:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001d24:	9301      	str	r3, [sp, #4]
 8001d26:	2302      	movs	r3, #2
 8001d28:	9300      	str	r3, [sp, #0]
 8001d2a:	2300      	movs	r3, #0
 8001d2c:	210a      	movs	r1, #10
 8001d2e:	4896      	ldr	r0, [pc, #600]	; (8001f88 <FreqMenu_DrawFreqPresetMenu+0x944>)
 8001d30:	f009 fa82 	bl	800b238 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 250Hz", 	10, menu_pos_y5, WHITE, 2, BLACK);
 8001d34:	7afb      	ldrb	r3, [r7, #11]
 8001d36:	b29a      	uxth	r2, r3
 8001d38:	2300      	movs	r3, #0
 8001d3a:	9301      	str	r3, [sp, #4]
 8001d3c:	2302      	movs	r3, #2
 8001d3e:	9300      	str	r3, [sp, #0]
 8001d40:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001d44:	210a      	movs	r1, #10
 8001d46:	4891      	ldr	r0, [pc, #580]	; (8001f8c <FreqMenu_DrawFreqPresetMenu+0x948>)
 8001d48:	f009 fa76 	bl	800b238 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 500Hz",	10, menu_pos_y6, BLACK, 2, WHITE);
 8001d4c:	7abb      	ldrb	r3, [r7, #10]
 8001d4e:	b29a      	uxth	r2, r3
 8001d50:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001d54:	9301      	str	r3, [sp, #4]
 8001d56:	2302      	movs	r3, #2
 8001d58:	9300      	str	r3, [sp, #0]
 8001d5a:	2300      	movs	r3, #0
 8001d5c:	210a      	movs	r1, #10
 8001d5e:	488c      	ldr	r0, [pc, #560]	; (8001f90 <FreqMenu_DrawFreqPresetMenu+0x94c>)
 8001d60:	f009 fa6a 	bl	800b238 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 750Hz", 	10, menu_pos_y7, BLACK, 2, WHITE);
 8001d64:	7a7b      	ldrb	r3, [r7, #9]
 8001d66:	b29a      	uxth	r2, r3
 8001d68:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001d6c:	9301      	str	r3, [sp, #4]
 8001d6e:	2302      	movs	r3, #2
 8001d70:	9300      	str	r3, [sp, #0]
 8001d72:	2300      	movs	r3, #0
 8001d74:	210a      	movs	r1, #10
 8001d76:	4887      	ldr	r0, [pc, #540]	; (8001f94 <FreqMenu_DrawFreqPresetMenu+0x950>)
 8001d78:	f009 fa5e 	bl	800b238 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 1KHz", 	120, menu_pos_y1, BLACK, 2, WHITE);
 8001d7c:	7bfb      	ldrb	r3, [r7, #15]
 8001d7e:	b29a      	uxth	r2, r3
 8001d80:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001d84:	9301      	str	r3, [sp, #4]
 8001d86:	2302      	movs	r3, #2
 8001d88:	9300      	str	r3, [sp, #0]
 8001d8a:	2300      	movs	r3, #0
 8001d8c:	2178      	movs	r1, #120	; 0x78
 8001d8e:	4882      	ldr	r0, [pc, #520]	; (8001f98 <FreqMenu_DrawFreqPresetMenu+0x954>)
 8001d90:	f009 fa52 	bl	800b238 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 5KHz", 	120, menu_pos_y2, BLACK, 2, WHITE);
 8001d94:	7bbb      	ldrb	r3, [r7, #14]
 8001d96:	b29a      	uxth	r2, r3
 8001d98:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001d9c:	9301      	str	r3, [sp, #4]
 8001d9e:	2302      	movs	r3, #2
 8001da0:	9300      	str	r3, [sp, #0]
 8001da2:	2300      	movs	r3, #0
 8001da4:	2178      	movs	r1, #120	; 0x78
 8001da6:	487d      	ldr	r0, [pc, #500]	; (8001f9c <FreqMenu_DrawFreqPresetMenu+0x958>)
 8001da8:	f009 fa46 	bl	800b238 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 10KHz", 	120, menu_pos_y3, BLACK, 2, WHITE);
 8001dac:	7b7b      	ldrb	r3, [r7, #13]
 8001dae:	b29a      	uxth	r2, r3
 8001db0:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001db4:	9301      	str	r3, [sp, #4]
 8001db6:	2302      	movs	r3, #2
 8001db8:	9300      	str	r3, [sp, #0]
 8001dba:	2300      	movs	r3, #0
 8001dbc:	2178      	movs	r1, #120	; 0x78
 8001dbe:	4878      	ldr	r0, [pc, #480]	; (8001fa0 <FreqMenu_DrawFreqPresetMenu+0x95c>)
 8001dc0:	f009 fa3a 	bl	800b238 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 25KHz", 	120, menu_pos_y4, BLACK, 2, WHITE);
 8001dc4:	7b3b      	ldrb	r3, [r7, #12]
 8001dc6:	b29a      	uxth	r2, r3
 8001dc8:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001dcc:	9301      	str	r3, [sp, #4]
 8001dce:	2302      	movs	r3, #2
 8001dd0:	9300      	str	r3, [sp, #0]
 8001dd2:	2300      	movs	r3, #0
 8001dd4:	2178      	movs	r1, #120	; 0x78
 8001dd6:	4873      	ldr	r0, [pc, #460]	; (8001fa4 <FreqMenu_DrawFreqPresetMenu+0x960>)
 8001dd8:	f009 fa2e 	bl	800b238 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 50KHz", 	120, menu_pos_y5, BLACK, 2, WHITE);
 8001ddc:	7afb      	ldrb	r3, [r7, #11]
 8001dde:	b29a      	uxth	r2, r3
 8001de0:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001de4:	9301      	str	r3, [sp, #4]
 8001de6:	2302      	movs	r3, #2
 8001de8:	9300      	str	r3, [sp, #0]
 8001dea:	2300      	movs	r3, #0
 8001dec:	2178      	movs	r1, #120	; 0x78
 8001dee:	486e      	ldr	r0, [pc, #440]	; (8001fa8 <FreqMenu_DrawFreqPresetMenu+0x964>)
 8001df0:	f009 fa22 	bl	800b238 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 75KHz",	120, menu_pos_y6, BLACK, 2, WHITE);
 8001df4:	7abb      	ldrb	r3, [r7, #10]
 8001df6:	b29a      	uxth	r2, r3
 8001df8:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001dfc:	9301      	str	r3, [sp, #4]
 8001dfe:	2302      	movs	r3, #2
 8001e00:	9300      	str	r3, [sp, #0]
 8001e02:	2300      	movs	r3, #0
 8001e04:	2178      	movs	r1, #120	; 0x78
 8001e06:	4869      	ldr	r0, [pc, #420]	; (8001fac <FreqMenu_DrawFreqPresetMenu+0x968>)
 8001e08:	f009 fa16 	bl	800b238 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 100KHz", 	120, menu_pos_y7, BLACK, 2, WHITE);
 8001e0c:	7a7b      	ldrb	r3, [r7, #9]
 8001e0e:	b29a      	uxth	r2, r3
 8001e10:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001e14:	9301      	str	r3, [sp, #4]
 8001e16:	2302      	movs	r3, #2
 8001e18:	9300      	str	r3, [sp, #0]
 8001e1a:	2300      	movs	r3, #0
 8001e1c:	2178      	movs	r1, #120	; 0x78
 8001e1e:	4864      	ldr	r0, [pc, #400]	; (8001fb0 <FreqMenu_DrawFreqPresetMenu+0x96c>)
 8001e20:	f009 fa0a 	bl	800b238 <ILI9341_Draw_Text>
				break;
 8001e24:	f000 be71 	b.w	8002b0a <FreqMenu_DrawFreqPresetMenu+0x14c6>
				ILI9341_Draw_Text("- 1Hz", 		10, menu_pos_y1, BLACK, 2, WHITE);
 8001e28:	7bfb      	ldrb	r3, [r7, #15]
 8001e2a:	b29a      	uxth	r2, r3
 8001e2c:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001e30:	9301      	str	r3, [sp, #4]
 8001e32:	2302      	movs	r3, #2
 8001e34:	9300      	str	r3, [sp, #0]
 8001e36:	2300      	movs	r3, #0
 8001e38:	210a      	movs	r1, #10
 8001e3a:	4850      	ldr	r0, [pc, #320]	; (8001f7c <FreqMenu_DrawFreqPresetMenu+0x938>)
 8001e3c:	f009 f9fc 	bl	800b238 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 10Hz", 	10, menu_pos_y2, BLACK, 2, WHITE);
 8001e40:	7bbb      	ldrb	r3, [r7, #14]
 8001e42:	b29a      	uxth	r2, r3
 8001e44:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001e48:	9301      	str	r3, [sp, #4]
 8001e4a:	2302      	movs	r3, #2
 8001e4c:	9300      	str	r3, [sp, #0]
 8001e4e:	2300      	movs	r3, #0
 8001e50:	210a      	movs	r1, #10
 8001e52:	484b      	ldr	r0, [pc, #300]	; (8001f80 <FreqMenu_DrawFreqPresetMenu+0x93c>)
 8001e54:	f009 f9f0 	bl	800b238 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 50Hz", 	10, menu_pos_y3, BLACK, 2, WHITE);
 8001e58:	7b7b      	ldrb	r3, [r7, #13]
 8001e5a:	b29a      	uxth	r2, r3
 8001e5c:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001e60:	9301      	str	r3, [sp, #4]
 8001e62:	2302      	movs	r3, #2
 8001e64:	9300      	str	r3, [sp, #0]
 8001e66:	2300      	movs	r3, #0
 8001e68:	210a      	movs	r1, #10
 8001e6a:	4846      	ldr	r0, [pc, #280]	; (8001f84 <FreqMenu_DrawFreqPresetMenu+0x940>)
 8001e6c:	f009 f9e4 	bl	800b238 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 100Hz", 	10, menu_pos_y4, BLACK, 2, WHITE);
 8001e70:	7b3b      	ldrb	r3, [r7, #12]
 8001e72:	b29a      	uxth	r2, r3
 8001e74:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001e78:	9301      	str	r3, [sp, #4]
 8001e7a:	2302      	movs	r3, #2
 8001e7c:	9300      	str	r3, [sp, #0]
 8001e7e:	2300      	movs	r3, #0
 8001e80:	210a      	movs	r1, #10
 8001e82:	4841      	ldr	r0, [pc, #260]	; (8001f88 <FreqMenu_DrawFreqPresetMenu+0x944>)
 8001e84:	f009 f9d8 	bl	800b238 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 250Hz", 	10, menu_pos_y5, BLACK, 2, WHITE);
 8001e88:	7afb      	ldrb	r3, [r7, #11]
 8001e8a:	b29a      	uxth	r2, r3
 8001e8c:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001e90:	9301      	str	r3, [sp, #4]
 8001e92:	2302      	movs	r3, #2
 8001e94:	9300      	str	r3, [sp, #0]
 8001e96:	2300      	movs	r3, #0
 8001e98:	210a      	movs	r1, #10
 8001e9a:	483c      	ldr	r0, [pc, #240]	; (8001f8c <FreqMenu_DrawFreqPresetMenu+0x948>)
 8001e9c:	f009 f9cc 	bl	800b238 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 500Hz",	10, menu_pos_y6, WHITE, 2, BLACK);
 8001ea0:	7abb      	ldrb	r3, [r7, #10]
 8001ea2:	b29a      	uxth	r2, r3
 8001ea4:	2300      	movs	r3, #0
 8001ea6:	9301      	str	r3, [sp, #4]
 8001ea8:	2302      	movs	r3, #2
 8001eaa:	9300      	str	r3, [sp, #0]
 8001eac:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001eb0:	210a      	movs	r1, #10
 8001eb2:	4837      	ldr	r0, [pc, #220]	; (8001f90 <FreqMenu_DrawFreqPresetMenu+0x94c>)
 8001eb4:	f009 f9c0 	bl	800b238 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 750Hz", 	10, menu_pos_y7, BLACK, 2, WHITE);
 8001eb8:	7a7b      	ldrb	r3, [r7, #9]
 8001eba:	b29a      	uxth	r2, r3
 8001ebc:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001ec0:	9301      	str	r3, [sp, #4]
 8001ec2:	2302      	movs	r3, #2
 8001ec4:	9300      	str	r3, [sp, #0]
 8001ec6:	2300      	movs	r3, #0
 8001ec8:	210a      	movs	r1, #10
 8001eca:	4832      	ldr	r0, [pc, #200]	; (8001f94 <FreqMenu_DrawFreqPresetMenu+0x950>)
 8001ecc:	f009 f9b4 	bl	800b238 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 1KHz", 	120, menu_pos_y1, BLACK, 2, WHITE);
 8001ed0:	7bfb      	ldrb	r3, [r7, #15]
 8001ed2:	b29a      	uxth	r2, r3
 8001ed4:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001ed8:	9301      	str	r3, [sp, #4]
 8001eda:	2302      	movs	r3, #2
 8001edc:	9300      	str	r3, [sp, #0]
 8001ede:	2300      	movs	r3, #0
 8001ee0:	2178      	movs	r1, #120	; 0x78
 8001ee2:	482d      	ldr	r0, [pc, #180]	; (8001f98 <FreqMenu_DrawFreqPresetMenu+0x954>)
 8001ee4:	f009 f9a8 	bl	800b238 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 5KHz", 	120, menu_pos_y2, BLACK, 2, WHITE);
 8001ee8:	7bbb      	ldrb	r3, [r7, #14]
 8001eea:	b29a      	uxth	r2, r3
 8001eec:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001ef0:	9301      	str	r3, [sp, #4]
 8001ef2:	2302      	movs	r3, #2
 8001ef4:	9300      	str	r3, [sp, #0]
 8001ef6:	2300      	movs	r3, #0
 8001ef8:	2178      	movs	r1, #120	; 0x78
 8001efa:	4828      	ldr	r0, [pc, #160]	; (8001f9c <FreqMenu_DrawFreqPresetMenu+0x958>)
 8001efc:	f009 f99c 	bl	800b238 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 10KHz", 	120, menu_pos_y3, BLACK, 2, WHITE);
 8001f00:	7b7b      	ldrb	r3, [r7, #13]
 8001f02:	b29a      	uxth	r2, r3
 8001f04:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001f08:	9301      	str	r3, [sp, #4]
 8001f0a:	2302      	movs	r3, #2
 8001f0c:	9300      	str	r3, [sp, #0]
 8001f0e:	2300      	movs	r3, #0
 8001f10:	2178      	movs	r1, #120	; 0x78
 8001f12:	4823      	ldr	r0, [pc, #140]	; (8001fa0 <FreqMenu_DrawFreqPresetMenu+0x95c>)
 8001f14:	f009 f990 	bl	800b238 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 25KHz", 	120, menu_pos_y4, BLACK, 2, WHITE);
 8001f18:	7b3b      	ldrb	r3, [r7, #12]
 8001f1a:	b29a      	uxth	r2, r3
 8001f1c:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001f20:	9301      	str	r3, [sp, #4]
 8001f22:	2302      	movs	r3, #2
 8001f24:	9300      	str	r3, [sp, #0]
 8001f26:	2300      	movs	r3, #0
 8001f28:	2178      	movs	r1, #120	; 0x78
 8001f2a:	481e      	ldr	r0, [pc, #120]	; (8001fa4 <FreqMenu_DrawFreqPresetMenu+0x960>)
 8001f2c:	f009 f984 	bl	800b238 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 50KHz", 	120, menu_pos_y5, BLACK, 2, WHITE);
 8001f30:	7afb      	ldrb	r3, [r7, #11]
 8001f32:	b29a      	uxth	r2, r3
 8001f34:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001f38:	9301      	str	r3, [sp, #4]
 8001f3a:	2302      	movs	r3, #2
 8001f3c:	9300      	str	r3, [sp, #0]
 8001f3e:	2300      	movs	r3, #0
 8001f40:	2178      	movs	r1, #120	; 0x78
 8001f42:	4819      	ldr	r0, [pc, #100]	; (8001fa8 <FreqMenu_DrawFreqPresetMenu+0x964>)
 8001f44:	f009 f978 	bl	800b238 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 75KHz",	120, menu_pos_y6, BLACK, 2, WHITE);
 8001f48:	7abb      	ldrb	r3, [r7, #10]
 8001f4a:	b29a      	uxth	r2, r3
 8001f4c:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001f50:	9301      	str	r3, [sp, #4]
 8001f52:	2302      	movs	r3, #2
 8001f54:	9300      	str	r3, [sp, #0]
 8001f56:	2300      	movs	r3, #0
 8001f58:	2178      	movs	r1, #120	; 0x78
 8001f5a:	4814      	ldr	r0, [pc, #80]	; (8001fac <FreqMenu_DrawFreqPresetMenu+0x968>)
 8001f5c:	f009 f96c 	bl	800b238 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 100KHz", 	120, menu_pos_y7, BLACK, 2, WHITE);
 8001f60:	7a7b      	ldrb	r3, [r7, #9]
 8001f62:	b29a      	uxth	r2, r3
 8001f64:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001f68:	9301      	str	r3, [sp, #4]
 8001f6a:	2302      	movs	r3, #2
 8001f6c:	9300      	str	r3, [sp, #0]
 8001f6e:	2300      	movs	r3, #0
 8001f70:	2178      	movs	r1, #120	; 0x78
 8001f72:	480f      	ldr	r0, [pc, #60]	; (8001fb0 <FreqMenu_DrawFreqPresetMenu+0x96c>)
 8001f74:	f009 f960 	bl	800b238 <ILI9341_Draw_Text>
				break;
 8001f78:	f000 bdc7 	b.w	8002b0a <FreqMenu_DrawFreqPresetMenu+0x14c6>
 8001f7c:	0800e85c 	.word	0x0800e85c
 8001f80:	0800e864 	.word	0x0800e864
 8001f84:	0800e86c 	.word	0x0800e86c
 8001f88:	0800e874 	.word	0x0800e874
 8001f8c:	0800e87c 	.word	0x0800e87c
 8001f90:	0800e884 	.word	0x0800e884
 8001f94:	0800e88c 	.word	0x0800e88c
 8001f98:	0800e894 	.word	0x0800e894
 8001f9c:	0800e89c 	.word	0x0800e89c
 8001fa0:	0800e8a4 	.word	0x0800e8a4
 8001fa4:	0800e8ac 	.word	0x0800e8ac
 8001fa8:	0800e8b4 	.word	0x0800e8b4
 8001fac:	0800e8bc 	.word	0x0800e8bc
 8001fb0:	0800e8c4 	.word	0x0800e8c4
				ILI9341_Draw_Text("- 1Hz", 		10, menu_pos_y1, BLACK, 2, WHITE);
 8001fb4:	7bfb      	ldrb	r3, [r7, #15]
 8001fb6:	b29a      	uxth	r2, r3
 8001fb8:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001fbc:	9301      	str	r3, [sp, #4]
 8001fbe:	2302      	movs	r3, #2
 8001fc0:	9300      	str	r3, [sp, #0]
 8001fc2:	2300      	movs	r3, #0
 8001fc4:	210a      	movs	r1, #10
 8001fc6:	48a5      	ldr	r0, [pc, #660]	; (800225c <FreqMenu_DrawFreqPresetMenu+0xc18>)
 8001fc8:	f009 f936 	bl	800b238 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 10Hz", 	10, menu_pos_y2, BLACK, 2, WHITE);
 8001fcc:	7bbb      	ldrb	r3, [r7, #14]
 8001fce:	b29a      	uxth	r2, r3
 8001fd0:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001fd4:	9301      	str	r3, [sp, #4]
 8001fd6:	2302      	movs	r3, #2
 8001fd8:	9300      	str	r3, [sp, #0]
 8001fda:	2300      	movs	r3, #0
 8001fdc:	210a      	movs	r1, #10
 8001fde:	48a0      	ldr	r0, [pc, #640]	; (8002260 <FreqMenu_DrawFreqPresetMenu+0xc1c>)
 8001fe0:	f009 f92a 	bl	800b238 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 50Hz", 	10, menu_pos_y3, BLACK, 2, WHITE);
 8001fe4:	7b7b      	ldrb	r3, [r7, #13]
 8001fe6:	b29a      	uxth	r2, r3
 8001fe8:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001fec:	9301      	str	r3, [sp, #4]
 8001fee:	2302      	movs	r3, #2
 8001ff0:	9300      	str	r3, [sp, #0]
 8001ff2:	2300      	movs	r3, #0
 8001ff4:	210a      	movs	r1, #10
 8001ff6:	489b      	ldr	r0, [pc, #620]	; (8002264 <FreqMenu_DrawFreqPresetMenu+0xc20>)
 8001ff8:	f009 f91e 	bl	800b238 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 100Hz", 	10, menu_pos_y4, BLACK, 2, WHITE);
 8001ffc:	7b3b      	ldrb	r3, [r7, #12]
 8001ffe:	b29a      	uxth	r2, r3
 8002000:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8002004:	9301      	str	r3, [sp, #4]
 8002006:	2302      	movs	r3, #2
 8002008:	9300      	str	r3, [sp, #0]
 800200a:	2300      	movs	r3, #0
 800200c:	210a      	movs	r1, #10
 800200e:	4896      	ldr	r0, [pc, #600]	; (8002268 <FreqMenu_DrawFreqPresetMenu+0xc24>)
 8002010:	f009 f912 	bl	800b238 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 250Hz", 	10, menu_pos_y5, BLACK, 2, WHITE);
 8002014:	7afb      	ldrb	r3, [r7, #11]
 8002016:	b29a      	uxth	r2, r3
 8002018:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800201c:	9301      	str	r3, [sp, #4]
 800201e:	2302      	movs	r3, #2
 8002020:	9300      	str	r3, [sp, #0]
 8002022:	2300      	movs	r3, #0
 8002024:	210a      	movs	r1, #10
 8002026:	4891      	ldr	r0, [pc, #580]	; (800226c <FreqMenu_DrawFreqPresetMenu+0xc28>)
 8002028:	f009 f906 	bl	800b238 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 500Hz",	10, menu_pos_y6, BLACK, 2, WHITE);
 800202c:	7abb      	ldrb	r3, [r7, #10]
 800202e:	b29a      	uxth	r2, r3
 8002030:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8002034:	9301      	str	r3, [sp, #4]
 8002036:	2302      	movs	r3, #2
 8002038:	9300      	str	r3, [sp, #0]
 800203a:	2300      	movs	r3, #0
 800203c:	210a      	movs	r1, #10
 800203e:	488c      	ldr	r0, [pc, #560]	; (8002270 <FreqMenu_DrawFreqPresetMenu+0xc2c>)
 8002040:	f009 f8fa 	bl	800b238 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 750Hz", 	10, menu_pos_y7, WHITE, 2, BLACK);
 8002044:	7a7b      	ldrb	r3, [r7, #9]
 8002046:	b29a      	uxth	r2, r3
 8002048:	2300      	movs	r3, #0
 800204a:	9301      	str	r3, [sp, #4]
 800204c:	2302      	movs	r3, #2
 800204e:	9300      	str	r3, [sp, #0]
 8002050:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8002054:	210a      	movs	r1, #10
 8002056:	4887      	ldr	r0, [pc, #540]	; (8002274 <FreqMenu_DrawFreqPresetMenu+0xc30>)
 8002058:	f009 f8ee 	bl	800b238 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 1KHz", 	120, menu_pos_y1, BLACK, 2, WHITE);
 800205c:	7bfb      	ldrb	r3, [r7, #15]
 800205e:	b29a      	uxth	r2, r3
 8002060:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8002064:	9301      	str	r3, [sp, #4]
 8002066:	2302      	movs	r3, #2
 8002068:	9300      	str	r3, [sp, #0]
 800206a:	2300      	movs	r3, #0
 800206c:	2178      	movs	r1, #120	; 0x78
 800206e:	4882      	ldr	r0, [pc, #520]	; (8002278 <FreqMenu_DrawFreqPresetMenu+0xc34>)
 8002070:	f009 f8e2 	bl	800b238 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 5KHz", 	120, menu_pos_y2, BLACK, 2, WHITE);
 8002074:	7bbb      	ldrb	r3, [r7, #14]
 8002076:	b29a      	uxth	r2, r3
 8002078:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800207c:	9301      	str	r3, [sp, #4]
 800207e:	2302      	movs	r3, #2
 8002080:	9300      	str	r3, [sp, #0]
 8002082:	2300      	movs	r3, #0
 8002084:	2178      	movs	r1, #120	; 0x78
 8002086:	487d      	ldr	r0, [pc, #500]	; (800227c <FreqMenu_DrawFreqPresetMenu+0xc38>)
 8002088:	f009 f8d6 	bl	800b238 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 10KHz", 	120, menu_pos_y3, BLACK, 2, WHITE);
 800208c:	7b7b      	ldrb	r3, [r7, #13]
 800208e:	b29a      	uxth	r2, r3
 8002090:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8002094:	9301      	str	r3, [sp, #4]
 8002096:	2302      	movs	r3, #2
 8002098:	9300      	str	r3, [sp, #0]
 800209a:	2300      	movs	r3, #0
 800209c:	2178      	movs	r1, #120	; 0x78
 800209e:	4878      	ldr	r0, [pc, #480]	; (8002280 <FreqMenu_DrawFreqPresetMenu+0xc3c>)
 80020a0:	f009 f8ca 	bl	800b238 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 25KHz", 	120, menu_pos_y4, BLACK, 2, WHITE);
 80020a4:	7b3b      	ldrb	r3, [r7, #12]
 80020a6:	b29a      	uxth	r2, r3
 80020a8:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80020ac:	9301      	str	r3, [sp, #4]
 80020ae:	2302      	movs	r3, #2
 80020b0:	9300      	str	r3, [sp, #0]
 80020b2:	2300      	movs	r3, #0
 80020b4:	2178      	movs	r1, #120	; 0x78
 80020b6:	4873      	ldr	r0, [pc, #460]	; (8002284 <FreqMenu_DrawFreqPresetMenu+0xc40>)
 80020b8:	f009 f8be 	bl	800b238 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 50KHz", 	120, menu_pos_y5, BLACK, 2, WHITE);
 80020bc:	7afb      	ldrb	r3, [r7, #11]
 80020be:	b29a      	uxth	r2, r3
 80020c0:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80020c4:	9301      	str	r3, [sp, #4]
 80020c6:	2302      	movs	r3, #2
 80020c8:	9300      	str	r3, [sp, #0]
 80020ca:	2300      	movs	r3, #0
 80020cc:	2178      	movs	r1, #120	; 0x78
 80020ce:	486e      	ldr	r0, [pc, #440]	; (8002288 <FreqMenu_DrawFreqPresetMenu+0xc44>)
 80020d0:	f009 f8b2 	bl	800b238 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 75KHz",	120, menu_pos_y6, BLACK, 2, WHITE);
 80020d4:	7abb      	ldrb	r3, [r7, #10]
 80020d6:	b29a      	uxth	r2, r3
 80020d8:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80020dc:	9301      	str	r3, [sp, #4]
 80020de:	2302      	movs	r3, #2
 80020e0:	9300      	str	r3, [sp, #0]
 80020e2:	2300      	movs	r3, #0
 80020e4:	2178      	movs	r1, #120	; 0x78
 80020e6:	4869      	ldr	r0, [pc, #420]	; (800228c <FreqMenu_DrawFreqPresetMenu+0xc48>)
 80020e8:	f009 f8a6 	bl	800b238 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 100KHz", 	120, menu_pos_y7, BLACK, 2, WHITE);
 80020ec:	7a7b      	ldrb	r3, [r7, #9]
 80020ee:	b29a      	uxth	r2, r3
 80020f0:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80020f4:	9301      	str	r3, [sp, #4]
 80020f6:	2302      	movs	r3, #2
 80020f8:	9300      	str	r3, [sp, #0]
 80020fa:	2300      	movs	r3, #0
 80020fc:	2178      	movs	r1, #120	; 0x78
 80020fe:	4864      	ldr	r0, [pc, #400]	; (8002290 <FreqMenu_DrawFreqPresetMenu+0xc4c>)
 8002100:	f009 f89a 	bl	800b238 <ILI9341_Draw_Text>
				break;
 8002104:	f000 bd01 	b.w	8002b0a <FreqMenu_DrawFreqPresetMenu+0x14c6>
				ILI9341_Draw_Text("- 1Hz", 		10, menu_pos_y1, BLACK, 2, WHITE);
 8002108:	7bfb      	ldrb	r3, [r7, #15]
 800210a:	b29a      	uxth	r2, r3
 800210c:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8002110:	9301      	str	r3, [sp, #4]
 8002112:	2302      	movs	r3, #2
 8002114:	9300      	str	r3, [sp, #0]
 8002116:	2300      	movs	r3, #0
 8002118:	210a      	movs	r1, #10
 800211a:	4850      	ldr	r0, [pc, #320]	; (800225c <FreqMenu_DrawFreqPresetMenu+0xc18>)
 800211c:	f009 f88c 	bl	800b238 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 10Hz", 	10, menu_pos_y2, BLACK, 2, WHITE);
 8002120:	7bbb      	ldrb	r3, [r7, #14]
 8002122:	b29a      	uxth	r2, r3
 8002124:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8002128:	9301      	str	r3, [sp, #4]
 800212a:	2302      	movs	r3, #2
 800212c:	9300      	str	r3, [sp, #0]
 800212e:	2300      	movs	r3, #0
 8002130:	210a      	movs	r1, #10
 8002132:	484b      	ldr	r0, [pc, #300]	; (8002260 <FreqMenu_DrawFreqPresetMenu+0xc1c>)
 8002134:	f009 f880 	bl	800b238 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 50Hz", 	10, menu_pos_y3, BLACK, 2, WHITE);
 8002138:	7b7b      	ldrb	r3, [r7, #13]
 800213a:	b29a      	uxth	r2, r3
 800213c:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8002140:	9301      	str	r3, [sp, #4]
 8002142:	2302      	movs	r3, #2
 8002144:	9300      	str	r3, [sp, #0]
 8002146:	2300      	movs	r3, #0
 8002148:	210a      	movs	r1, #10
 800214a:	4846      	ldr	r0, [pc, #280]	; (8002264 <FreqMenu_DrawFreqPresetMenu+0xc20>)
 800214c:	f009 f874 	bl	800b238 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 100Hz", 	10, menu_pos_y4, BLACK, 2, WHITE);
 8002150:	7b3b      	ldrb	r3, [r7, #12]
 8002152:	b29a      	uxth	r2, r3
 8002154:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8002158:	9301      	str	r3, [sp, #4]
 800215a:	2302      	movs	r3, #2
 800215c:	9300      	str	r3, [sp, #0]
 800215e:	2300      	movs	r3, #0
 8002160:	210a      	movs	r1, #10
 8002162:	4841      	ldr	r0, [pc, #260]	; (8002268 <FreqMenu_DrawFreqPresetMenu+0xc24>)
 8002164:	f009 f868 	bl	800b238 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 250Hz", 	10, menu_pos_y5, BLACK, 2, WHITE);
 8002168:	7afb      	ldrb	r3, [r7, #11]
 800216a:	b29a      	uxth	r2, r3
 800216c:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8002170:	9301      	str	r3, [sp, #4]
 8002172:	2302      	movs	r3, #2
 8002174:	9300      	str	r3, [sp, #0]
 8002176:	2300      	movs	r3, #0
 8002178:	210a      	movs	r1, #10
 800217a:	483c      	ldr	r0, [pc, #240]	; (800226c <FreqMenu_DrawFreqPresetMenu+0xc28>)
 800217c:	f009 f85c 	bl	800b238 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 500Hz",	10, menu_pos_y6, BLACK, 2, WHITE);
 8002180:	7abb      	ldrb	r3, [r7, #10]
 8002182:	b29a      	uxth	r2, r3
 8002184:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8002188:	9301      	str	r3, [sp, #4]
 800218a:	2302      	movs	r3, #2
 800218c:	9300      	str	r3, [sp, #0]
 800218e:	2300      	movs	r3, #0
 8002190:	210a      	movs	r1, #10
 8002192:	4837      	ldr	r0, [pc, #220]	; (8002270 <FreqMenu_DrawFreqPresetMenu+0xc2c>)
 8002194:	f009 f850 	bl	800b238 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 750Hz", 	10, menu_pos_y7, BLACK, 2, WHITE);
 8002198:	7a7b      	ldrb	r3, [r7, #9]
 800219a:	b29a      	uxth	r2, r3
 800219c:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80021a0:	9301      	str	r3, [sp, #4]
 80021a2:	2302      	movs	r3, #2
 80021a4:	9300      	str	r3, [sp, #0]
 80021a6:	2300      	movs	r3, #0
 80021a8:	210a      	movs	r1, #10
 80021aa:	4832      	ldr	r0, [pc, #200]	; (8002274 <FreqMenu_DrawFreqPresetMenu+0xc30>)
 80021ac:	f009 f844 	bl	800b238 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 1KHz", 	120, menu_pos_y1, WHITE, 2, BLACK);
 80021b0:	7bfb      	ldrb	r3, [r7, #15]
 80021b2:	b29a      	uxth	r2, r3
 80021b4:	2300      	movs	r3, #0
 80021b6:	9301      	str	r3, [sp, #4]
 80021b8:	2302      	movs	r3, #2
 80021ba:	9300      	str	r3, [sp, #0]
 80021bc:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80021c0:	2178      	movs	r1, #120	; 0x78
 80021c2:	482d      	ldr	r0, [pc, #180]	; (8002278 <FreqMenu_DrawFreqPresetMenu+0xc34>)
 80021c4:	f009 f838 	bl	800b238 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 5KHz", 	120, menu_pos_y2, BLACK, 2, WHITE);
 80021c8:	7bbb      	ldrb	r3, [r7, #14]
 80021ca:	b29a      	uxth	r2, r3
 80021cc:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80021d0:	9301      	str	r3, [sp, #4]
 80021d2:	2302      	movs	r3, #2
 80021d4:	9300      	str	r3, [sp, #0]
 80021d6:	2300      	movs	r3, #0
 80021d8:	2178      	movs	r1, #120	; 0x78
 80021da:	4828      	ldr	r0, [pc, #160]	; (800227c <FreqMenu_DrawFreqPresetMenu+0xc38>)
 80021dc:	f009 f82c 	bl	800b238 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 10KHz", 	120, menu_pos_y3, BLACK, 2, WHITE);
 80021e0:	7b7b      	ldrb	r3, [r7, #13]
 80021e2:	b29a      	uxth	r2, r3
 80021e4:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80021e8:	9301      	str	r3, [sp, #4]
 80021ea:	2302      	movs	r3, #2
 80021ec:	9300      	str	r3, [sp, #0]
 80021ee:	2300      	movs	r3, #0
 80021f0:	2178      	movs	r1, #120	; 0x78
 80021f2:	4823      	ldr	r0, [pc, #140]	; (8002280 <FreqMenu_DrawFreqPresetMenu+0xc3c>)
 80021f4:	f009 f820 	bl	800b238 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 25KHz", 	120, menu_pos_y4, BLACK, 2, WHITE);
 80021f8:	7b3b      	ldrb	r3, [r7, #12]
 80021fa:	b29a      	uxth	r2, r3
 80021fc:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8002200:	9301      	str	r3, [sp, #4]
 8002202:	2302      	movs	r3, #2
 8002204:	9300      	str	r3, [sp, #0]
 8002206:	2300      	movs	r3, #0
 8002208:	2178      	movs	r1, #120	; 0x78
 800220a:	481e      	ldr	r0, [pc, #120]	; (8002284 <FreqMenu_DrawFreqPresetMenu+0xc40>)
 800220c:	f009 f814 	bl	800b238 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 50KHz", 	120, menu_pos_y5, BLACK, 2, WHITE);
 8002210:	7afb      	ldrb	r3, [r7, #11]
 8002212:	b29a      	uxth	r2, r3
 8002214:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8002218:	9301      	str	r3, [sp, #4]
 800221a:	2302      	movs	r3, #2
 800221c:	9300      	str	r3, [sp, #0]
 800221e:	2300      	movs	r3, #0
 8002220:	2178      	movs	r1, #120	; 0x78
 8002222:	4819      	ldr	r0, [pc, #100]	; (8002288 <FreqMenu_DrawFreqPresetMenu+0xc44>)
 8002224:	f009 f808 	bl	800b238 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 75KHz",	120, menu_pos_y6, BLACK, 2, WHITE);
 8002228:	7abb      	ldrb	r3, [r7, #10]
 800222a:	b29a      	uxth	r2, r3
 800222c:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8002230:	9301      	str	r3, [sp, #4]
 8002232:	2302      	movs	r3, #2
 8002234:	9300      	str	r3, [sp, #0]
 8002236:	2300      	movs	r3, #0
 8002238:	2178      	movs	r1, #120	; 0x78
 800223a:	4814      	ldr	r0, [pc, #80]	; (800228c <FreqMenu_DrawFreqPresetMenu+0xc48>)
 800223c:	f008 fffc 	bl	800b238 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 100KHz", 	120, menu_pos_y7, BLACK, 2, WHITE);
 8002240:	7a7b      	ldrb	r3, [r7, #9]
 8002242:	b29a      	uxth	r2, r3
 8002244:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8002248:	9301      	str	r3, [sp, #4]
 800224a:	2302      	movs	r3, #2
 800224c:	9300      	str	r3, [sp, #0]
 800224e:	2300      	movs	r3, #0
 8002250:	2178      	movs	r1, #120	; 0x78
 8002252:	480f      	ldr	r0, [pc, #60]	; (8002290 <FreqMenu_DrawFreqPresetMenu+0xc4c>)
 8002254:	f008 fff0 	bl	800b238 <ILI9341_Draw_Text>
				break;
 8002258:	f000 bc57 	b.w	8002b0a <FreqMenu_DrawFreqPresetMenu+0x14c6>
 800225c:	0800e85c 	.word	0x0800e85c
 8002260:	0800e864 	.word	0x0800e864
 8002264:	0800e86c 	.word	0x0800e86c
 8002268:	0800e874 	.word	0x0800e874
 800226c:	0800e87c 	.word	0x0800e87c
 8002270:	0800e884 	.word	0x0800e884
 8002274:	0800e88c 	.word	0x0800e88c
 8002278:	0800e894 	.word	0x0800e894
 800227c:	0800e89c 	.word	0x0800e89c
 8002280:	0800e8a4 	.word	0x0800e8a4
 8002284:	0800e8ac 	.word	0x0800e8ac
 8002288:	0800e8b4 	.word	0x0800e8b4
 800228c:	0800e8bc 	.word	0x0800e8bc
 8002290:	0800e8c4 	.word	0x0800e8c4
				ILI9341_Draw_Text("- 1Hz", 		10, menu_pos_y1, BLACK, 2, WHITE);
 8002294:	7bfb      	ldrb	r3, [r7, #15]
 8002296:	b29a      	uxth	r2, r3
 8002298:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800229c:	9301      	str	r3, [sp, #4]
 800229e:	2302      	movs	r3, #2
 80022a0:	9300      	str	r3, [sp, #0]
 80022a2:	2300      	movs	r3, #0
 80022a4:	210a      	movs	r1, #10
 80022a6:	48a4      	ldr	r0, [pc, #656]	; (8002538 <FreqMenu_DrawFreqPresetMenu+0xef4>)
 80022a8:	f008 ffc6 	bl	800b238 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 10Hz", 	10, menu_pos_y2, BLACK, 2, WHITE);
 80022ac:	7bbb      	ldrb	r3, [r7, #14]
 80022ae:	b29a      	uxth	r2, r3
 80022b0:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80022b4:	9301      	str	r3, [sp, #4]
 80022b6:	2302      	movs	r3, #2
 80022b8:	9300      	str	r3, [sp, #0]
 80022ba:	2300      	movs	r3, #0
 80022bc:	210a      	movs	r1, #10
 80022be:	489f      	ldr	r0, [pc, #636]	; (800253c <FreqMenu_DrawFreqPresetMenu+0xef8>)
 80022c0:	f008 ffba 	bl	800b238 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 50Hz", 	10, menu_pos_y3, BLACK, 2, WHITE);
 80022c4:	7b7b      	ldrb	r3, [r7, #13]
 80022c6:	b29a      	uxth	r2, r3
 80022c8:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80022cc:	9301      	str	r3, [sp, #4]
 80022ce:	2302      	movs	r3, #2
 80022d0:	9300      	str	r3, [sp, #0]
 80022d2:	2300      	movs	r3, #0
 80022d4:	210a      	movs	r1, #10
 80022d6:	489a      	ldr	r0, [pc, #616]	; (8002540 <FreqMenu_DrawFreqPresetMenu+0xefc>)
 80022d8:	f008 ffae 	bl	800b238 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 100Hz", 	10, menu_pos_y4, BLACK, 2, WHITE);
 80022dc:	7b3b      	ldrb	r3, [r7, #12]
 80022de:	b29a      	uxth	r2, r3
 80022e0:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80022e4:	9301      	str	r3, [sp, #4]
 80022e6:	2302      	movs	r3, #2
 80022e8:	9300      	str	r3, [sp, #0]
 80022ea:	2300      	movs	r3, #0
 80022ec:	210a      	movs	r1, #10
 80022ee:	4895      	ldr	r0, [pc, #596]	; (8002544 <FreqMenu_DrawFreqPresetMenu+0xf00>)
 80022f0:	f008 ffa2 	bl	800b238 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 250Hz", 	10, menu_pos_y5, BLACK, 2, WHITE);
 80022f4:	7afb      	ldrb	r3, [r7, #11]
 80022f6:	b29a      	uxth	r2, r3
 80022f8:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80022fc:	9301      	str	r3, [sp, #4]
 80022fe:	2302      	movs	r3, #2
 8002300:	9300      	str	r3, [sp, #0]
 8002302:	2300      	movs	r3, #0
 8002304:	210a      	movs	r1, #10
 8002306:	4890      	ldr	r0, [pc, #576]	; (8002548 <FreqMenu_DrawFreqPresetMenu+0xf04>)
 8002308:	f008 ff96 	bl	800b238 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 500Hz",	10, menu_pos_y6, BLACK, 2, WHITE);
 800230c:	7abb      	ldrb	r3, [r7, #10]
 800230e:	b29a      	uxth	r2, r3
 8002310:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8002314:	9301      	str	r3, [sp, #4]
 8002316:	2302      	movs	r3, #2
 8002318:	9300      	str	r3, [sp, #0]
 800231a:	2300      	movs	r3, #0
 800231c:	210a      	movs	r1, #10
 800231e:	488b      	ldr	r0, [pc, #556]	; (800254c <FreqMenu_DrawFreqPresetMenu+0xf08>)
 8002320:	f008 ff8a 	bl	800b238 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 750Hz", 	10, menu_pos_y7, BLACK, 2, WHITE);
 8002324:	7a7b      	ldrb	r3, [r7, #9]
 8002326:	b29a      	uxth	r2, r3
 8002328:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800232c:	9301      	str	r3, [sp, #4]
 800232e:	2302      	movs	r3, #2
 8002330:	9300      	str	r3, [sp, #0]
 8002332:	2300      	movs	r3, #0
 8002334:	210a      	movs	r1, #10
 8002336:	4886      	ldr	r0, [pc, #536]	; (8002550 <FreqMenu_DrawFreqPresetMenu+0xf0c>)
 8002338:	f008 ff7e 	bl	800b238 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 1KHz", 	120, menu_pos_y1, BLACK, 2, WHITE);
 800233c:	7bfb      	ldrb	r3, [r7, #15]
 800233e:	b29a      	uxth	r2, r3
 8002340:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8002344:	9301      	str	r3, [sp, #4]
 8002346:	2302      	movs	r3, #2
 8002348:	9300      	str	r3, [sp, #0]
 800234a:	2300      	movs	r3, #0
 800234c:	2178      	movs	r1, #120	; 0x78
 800234e:	4881      	ldr	r0, [pc, #516]	; (8002554 <FreqMenu_DrawFreqPresetMenu+0xf10>)
 8002350:	f008 ff72 	bl	800b238 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 5KHz", 	120, menu_pos_y2, WHITE, 2, BLACK);
 8002354:	7bbb      	ldrb	r3, [r7, #14]
 8002356:	b29a      	uxth	r2, r3
 8002358:	2300      	movs	r3, #0
 800235a:	9301      	str	r3, [sp, #4]
 800235c:	2302      	movs	r3, #2
 800235e:	9300      	str	r3, [sp, #0]
 8002360:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8002364:	2178      	movs	r1, #120	; 0x78
 8002366:	487c      	ldr	r0, [pc, #496]	; (8002558 <FreqMenu_DrawFreqPresetMenu+0xf14>)
 8002368:	f008 ff66 	bl	800b238 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 10KHz", 	120, menu_pos_y3, BLACK, 2, WHITE);
 800236c:	7b7b      	ldrb	r3, [r7, #13]
 800236e:	b29a      	uxth	r2, r3
 8002370:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8002374:	9301      	str	r3, [sp, #4]
 8002376:	2302      	movs	r3, #2
 8002378:	9300      	str	r3, [sp, #0]
 800237a:	2300      	movs	r3, #0
 800237c:	2178      	movs	r1, #120	; 0x78
 800237e:	4877      	ldr	r0, [pc, #476]	; (800255c <FreqMenu_DrawFreqPresetMenu+0xf18>)
 8002380:	f008 ff5a 	bl	800b238 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 25KHz", 	120, menu_pos_y4, BLACK, 2, WHITE);
 8002384:	7b3b      	ldrb	r3, [r7, #12]
 8002386:	b29a      	uxth	r2, r3
 8002388:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800238c:	9301      	str	r3, [sp, #4]
 800238e:	2302      	movs	r3, #2
 8002390:	9300      	str	r3, [sp, #0]
 8002392:	2300      	movs	r3, #0
 8002394:	2178      	movs	r1, #120	; 0x78
 8002396:	4872      	ldr	r0, [pc, #456]	; (8002560 <FreqMenu_DrawFreqPresetMenu+0xf1c>)
 8002398:	f008 ff4e 	bl	800b238 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 50KHz", 	120, menu_pos_y5, BLACK, 2, WHITE);
 800239c:	7afb      	ldrb	r3, [r7, #11]
 800239e:	b29a      	uxth	r2, r3
 80023a0:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80023a4:	9301      	str	r3, [sp, #4]
 80023a6:	2302      	movs	r3, #2
 80023a8:	9300      	str	r3, [sp, #0]
 80023aa:	2300      	movs	r3, #0
 80023ac:	2178      	movs	r1, #120	; 0x78
 80023ae:	486d      	ldr	r0, [pc, #436]	; (8002564 <FreqMenu_DrawFreqPresetMenu+0xf20>)
 80023b0:	f008 ff42 	bl	800b238 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 75KHz",	120, menu_pos_y6, BLACK, 2, WHITE);
 80023b4:	7abb      	ldrb	r3, [r7, #10]
 80023b6:	b29a      	uxth	r2, r3
 80023b8:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80023bc:	9301      	str	r3, [sp, #4]
 80023be:	2302      	movs	r3, #2
 80023c0:	9300      	str	r3, [sp, #0]
 80023c2:	2300      	movs	r3, #0
 80023c4:	2178      	movs	r1, #120	; 0x78
 80023c6:	4868      	ldr	r0, [pc, #416]	; (8002568 <FreqMenu_DrawFreqPresetMenu+0xf24>)
 80023c8:	f008 ff36 	bl	800b238 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 100KHz", 	120, menu_pos_y7, BLACK, 2, WHITE);
 80023cc:	7a7b      	ldrb	r3, [r7, #9]
 80023ce:	b29a      	uxth	r2, r3
 80023d0:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80023d4:	9301      	str	r3, [sp, #4]
 80023d6:	2302      	movs	r3, #2
 80023d8:	9300      	str	r3, [sp, #0]
 80023da:	2300      	movs	r3, #0
 80023dc:	2178      	movs	r1, #120	; 0x78
 80023de:	4863      	ldr	r0, [pc, #396]	; (800256c <FreqMenu_DrawFreqPresetMenu+0xf28>)
 80023e0:	f008 ff2a 	bl	800b238 <ILI9341_Draw_Text>
				break;
 80023e4:	e391      	b.n	8002b0a <FreqMenu_DrawFreqPresetMenu+0x14c6>
				ILI9341_Draw_Text("- 1Hz", 		10, menu_pos_y1, BLACK, 2, WHITE);
 80023e6:	7bfb      	ldrb	r3, [r7, #15]
 80023e8:	b29a      	uxth	r2, r3
 80023ea:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80023ee:	9301      	str	r3, [sp, #4]
 80023f0:	2302      	movs	r3, #2
 80023f2:	9300      	str	r3, [sp, #0]
 80023f4:	2300      	movs	r3, #0
 80023f6:	210a      	movs	r1, #10
 80023f8:	484f      	ldr	r0, [pc, #316]	; (8002538 <FreqMenu_DrawFreqPresetMenu+0xef4>)
 80023fa:	f008 ff1d 	bl	800b238 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 10Hz", 	10, menu_pos_y2, BLACK, 2, WHITE);
 80023fe:	7bbb      	ldrb	r3, [r7, #14]
 8002400:	b29a      	uxth	r2, r3
 8002402:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8002406:	9301      	str	r3, [sp, #4]
 8002408:	2302      	movs	r3, #2
 800240a:	9300      	str	r3, [sp, #0]
 800240c:	2300      	movs	r3, #0
 800240e:	210a      	movs	r1, #10
 8002410:	484a      	ldr	r0, [pc, #296]	; (800253c <FreqMenu_DrawFreqPresetMenu+0xef8>)
 8002412:	f008 ff11 	bl	800b238 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 50Hz", 	10, menu_pos_y3, BLACK, 2, WHITE);
 8002416:	7b7b      	ldrb	r3, [r7, #13]
 8002418:	b29a      	uxth	r2, r3
 800241a:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800241e:	9301      	str	r3, [sp, #4]
 8002420:	2302      	movs	r3, #2
 8002422:	9300      	str	r3, [sp, #0]
 8002424:	2300      	movs	r3, #0
 8002426:	210a      	movs	r1, #10
 8002428:	4845      	ldr	r0, [pc, #276]	; (8002540 <FreqMenu_DrawFreqPresetMenu+0xefc>)
 800242a:	f008 ff05 	bl	800b238 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 100Hz", 	10, menu_pos_y4, BLACK, 2, WHITE);
 800242e:	7b3b      	ldrb	r3, [r7, #12]
 8002430:	b29a      	uxth	r2, r3
 8002432:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8002436:	9301      	str	r3, [sp, #4]
 8002438:	2302      	movs	r3, #2
 800243a:	9300      	str	r3, [sp, #0]
 800243c:	2300      	movs	r3, #0
 800243e:	210a      	movs	r1, #10
 8002440:	4840      	ldr	r0, [pc, #256]	; (8002544 <FreqMenu_DrawFreqPresetMenu+0xf00>)
 8002442:	f008 fef9 	bl	800b238 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 250Hz", 	10, menu_pos_y5, BLACK, 2, WHITE);
 8002446:	7afb      	ldrb	r3, [r7, #11]
 8002448:	b29a      	uxth	r2, r3
 800244a:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800244e:	9301      	str	r3, [sp, #4]
 8002450:	2302      	movs	r3, #2
 8002452:	9300      	str	r3, [sp, #0]
 8002454:	2300      	movs	r3, #0
 8002456:	210a      	movs	r1, #10
 8002458:	483b      	ldr	r0, [pc, #236]	; (8002548 <FreqMenu_DrawFreqPresetMenu+0xf04>)
 800245a:	f008 feed 	bl	800b238 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 500Hz",	10, menu_pos_y6, BLACK, 2, WHITE);
 800245e:	7abb      	ldrb	r3, [r7, #10]
 8002460:	b29a      	uxth	r2, r3
 8002462:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8002466:	9301      	str	r3, [sp, #4]
 8002468:	2302      	movs	r3, #2
 800246a:	9300      	str	r3, [sp, #0]
 800246c:	2300      	movs	r3, #0
 800246e:	210a      	movs	r1, #10
 8002470:	4836      	ldr	r0, [pc, #216]	; (800254c <FreqMenu_DrawFreqPresetMenu+0xf08>)
 8002472:	f008 fee1 	bl	800b238 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 750Hz", 	10, menu_pos_y7, BLACK, 2, WHITE);
 8002476:	7a7b      	ldrb	r3, [r7, #9]
 8002478:	b29a      	uxth	r2, r3
 800247a:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800247e:	9301      	str	r3, [sp, #4]
 8002480:	2302      	movs	r3, #2
 8002482:	9300      	str	r3, [sp, #0]
 8002484:	2300      	movs	r3, #0
 8002486:	210a      	movs	r1, #10
 8002488:	4831      	ldr	r0, [pc, #196]	; (8002550 <FreqMenu_DrawFreqPresetMenu+0xf0c>)
 800248a:	f008 fed5 	bl	800b238 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 1KHz", 	120, menu_pos_y1, BLACK, 2, WHITE);
 800248e:	7bfb      	ldrb	r3, [r7, #15]
 8002490:	b29a      	uxth	r2, r3
 8002492:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8002496:	9301      	str	r3, [sp, #4]
 8002498:	2302      	movs	r3, #2
 800249a:	9300      	str	r3, [sp, #0]
 800249c:	2300      	movs	r3, #0
 800249e:	2178      	movs	r1, #120	; 0x78
 80024a0:	482c      	ldr	r0, [pc, #176]	; (8002554 <FreqMenu_DrawFreqPresetMenu+0xf10>)
 80024a2:	f008 fec9 	bl	800b238 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 5KHz", 	120, menu_pos_y2, BLACK, 2, WHITE);
 80024a6:	7bbb      	ldrb	r3, [r7, #14]
 80024a8:	b29a      	uxth	r2, r3
 80024aa:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80024ae:	9301      	str	r3, [sp, #4]
 80024b0:	2302      	movs	r3, #2
 80024b2:	9300      	str	r3, [sp, #0]
 80024b4:	2300      	movs	r3, #0
 80024b6:	2178      	movs	r1, #120	; 0x78
 80024b8:	4827      	ldr	r0, [pc, #156]	; (8002558 <FreqMenu_DrawFreqPresetMenu+0xf14>)
 80024ba:	f008 febd 	bl	800b238 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 10KHz", 	120, menu_pos_y3, WHITE, 2, BLACK);
 80024be:	7b7b      	ldrb	r3, [r7, #13]
 80024c0:	b29a      	uxth	r2, r3
 80024c2:	2300      	movs	r3, #0
 80024c4:	9301      	str	r3, [sp, #4]
 80024c6:	2302      	movs	r3, #2
 80024c8:	9300      	str	r3, [sp, #0]
 80024ca:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80024ce:	2178      	movs	r1, #120	; 0x78
 80024d0:	4822      	ldr	r0, [pc, #136]	; (800255c <FreqMenu_DrawFreqPresetMenu+0xf18>)
 80024d2:	f008 feb1 	bl	800b238 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 25KHz", 	120, menu_pos_y4, BLACK, 2, WHITE);
 80024d6:	7b3b      	ldrb	r3, [r7, #12]
 80024d8:	b29a      	uxth	r2, r3
 80024da:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80024de:	9301      	str	r3, [sp, #4]
 80024e0:	2302      	movs	r3, #2
 80024e2:	9300      	str	r3, [sp, #0]
 80024e4:	2300      	movs	r3, #0
 80024e6:	2178      	movs	r1, #120	; 0x78
 80024e8:	481d      	ldr	r0, [pc, #116]	; (8002560 <FreqMenu_DrawFreqPresetMenu+0xf1c>)
 80024ea:	f008 fea5 	bl	800b238 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 50KHz", 	120, menu_pos_y5, BLACK, 2, WHITE);
 80024ee:	7afb      	ldrb	r3, [r7, #11]
 80024f0:	b29a      	uxth	r2, r3
 80024f2:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80024f6:	9301      	str	r3, [sp, #4]
 80024f8:	2302      	movs	r3, #2
 80024fa:	9300      	str	r3, [sp, #0]
 80024fc:	2300      	movs	r3, #0
 80024fe:	2178      	movs	r1, #120	; 0x78
 8002500:	4818      	ldr	r0, [pc, #96]	; (8002564 <FreqMenu_DrawFreqPresetMenu+0xf20>)
 8002502:	f008 fe99 	bl	800b238 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 75KHz",	120, menu_pos_y6, BLACK, 2, WHITE);
 8002506:	7abb      	ldrb	r3, [r7, #10]
 8002508:	b29a      	uxth	r2, r3
 800250a:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800250e:	9301      	str	r3, [sp, #4]
 8002510:	2302      	movs	r3, #2
 8002512:	9300      	str	r3, [sp, #0]
 8002514:	2300      	movs	r3, #0
 8002516:	2178      	movs	r1, #120	; 0x78
 8002518:	4813      	ldr	r0, [pc, #76]	; (8002568 <FreqMenu_DrawFreqPresetMenu+0xf24>)
 800251a:	f008 fe8d 	bl	800b238 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 100KHz", 	120, menu_pos_y7, BLACK, 2, WHITE);
 800251e:	7a7b      	ldrb	r3, [r7, #9]
 8002520:	b29a      	uxth	r2, r3
 8002522:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8002526:	9301      	str	r3, [sp, #4]
 8002528:	2302      	movs	r3, #2
 800252a:	9300      	str	r3, [sp, #0]
 800252c:	2300      	movs	r3, #0
 800252e:	2178      	movs	r1, #120	; 0x78
 8002530:	480e      	ldr	r0, [pc, #56]	; (800256c <FreqMenu_DrawFreqPresetMenu+0xf28>)
 8002532:	f008 fe81 	bl	800b238 <ILI9341_Draw_Text>
				break;
 8002536:	e2e8      	b.n	8002b0a <FreqMenu_DrawFreqPresetMenu+0x14c6>
 8002538:	0800e85c 	.word	0x0800e85c
 800253c:	0800e864 	.word	0x0800e864
 8002540:	0800e86c 	.word	0x0800e86c
 8002544:	0800e874 	.word	0x0800e874
 8002548:	0800e87c 	.word	0x0800e87c
 800254c:	0800e884 	.word	0x0800e884
 8002550:	0800e88c 	.word	0x0800e88c
 8002554:	0800e894 	.word	0x0800e894
 8002558:	0800e89c 	.word	0x0800e89c
 800255c:	0800e8a4 	.word	0x0800e8a4
 8002560:	0800e8ac 	.word	0x0800e8ac
 8002564:	0800e8b4 	.word	0x0800e8b4
 8002568:	0800e8bc 	.word	0x0800e8bc
 800256c:	0800e8c4 	.word	0x0800e8c4
				ILI9341_Draw_Text("- 1Hz", 		10, menu_pos_y1, BLACK, 2, WHITE);
 8002570:	7bfb      	ldrb	r3, [r7, #15]
 8002572:	b29a      	uxth	r2, r3
 8002574:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8002578:	9301      	str	r3, [sp, #4]
 800257a:	2302      	movs	r3, #2
 800257c:	9300      	str	r3, [sp, #0]
 800257e:	2300      	movs	r3, #0
 8002580:	210a      	movs	r1, #10
 8002582:	48a4      	ldr	r0, [pc, #656]	; (8002814 <FreqMenu_DrawFreqPresetMenu+0x11d0>)
 8002584:	f008 fe58 	bl	800b238 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 10Hz", 	10, menu_pos_y2, BLACK, 2, WHITE);
 8002588:	7bbb      	ldrb	r3, [r7, #14]
 800258a:	b29a      	uxth	r2, r3
 800258c:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8002590:	9301      	str	r3, [sp, #4]
 8002592:	2302      	movs	r3, #2
 8002594:	9300      	str	r3, [sp, #0]
 8002596:	2300      	movs	r3, #0
 8002598:	210a      	movs	r1, #10
 800259a:	489f      	ldr	r0, [pc, #636]	; (8002818 <FreqMenu_DrawFreqPresetMenu+0x11d4>)
 800259c:	f008 fe4c 	bl	800b238 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 50Hz", 	10, menu_pos_y3, BLACK, 2, WHITE);
 80025a0:	7b7b      	ldrb	r3, [r7, #13]
 80025a2:	b29a      	uxth	r2, r3
 80025a4:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80025a8:	9301      	str	r3, [sp, #4]
 80025aa:	2302      	movs	r3, #2
 80025ac:	9300      	str	r3, [sp, #0]
 80025ae:	2300      	movs	r3, #0
 80025b0:	210a      	movs	r1, #10
 80025b2:	489a      	ldr	r0, [pc, #616]	; (800281c <FreqMenu_DrawFreqPresetMenu+0x11d8>)
 80025b4:	f008 fe40 	bl	800b238 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 100Hz", 	10, menu_pos_y4, BLACK, 2, WHITE);
 80025b8:	7b3b      	ldrb	r3, [r7, #12]
 80025ba:	b29a      	uxth	r2, r3
 80025bc:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80025c0:	9301      	str	r3, [sp, #4]
 80025c2:	2302      	movs	r3, #2
 80025c4:	9300      	str	r3, [sp, #0]
 80025c6:	2300      	movs	r3, #0
 80025c8:	210a      	movs	r1, #10
 80025ca:	4895      	ldr	r0, [pc, #596]	; (8002820 <FreqMenu_DrawFreqPresetMenu+0x11dc>)
 80025cc:	f008 fe34 	bl	800b238 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 250Hz", 	10, menu_pos_y5, BLACK, 2, WHITE);
 80025d0:	7afb      	ldrb	r3, [r7, #11]
 80025d2:	b29a      	uxth	r2, r3
 80025d4:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80025d8:	9301      	str	r3, [sp, #4]
 80025da:	2302      	movs	r3, #2
 80025dc:	9300      	str	r3, [sp, #0]
 80025de:	2300      	movs	r3, #0
 80025e0:	210a      	movs	r1, #10
 80025e2:	4890      	ldr	r0, [pc, #576]	; (8002824 <FreqMenu_DrawFreqPresetMenu+0x11e0>)
 80025e4:	f008 fe28 	bl	800b238 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 500Hz",	10, menu_pos_y6, BLACK, 2, WHITE);
 80025e8:	7abb      	ldrb	r3, [r7, #10]
 80025ea:	b29a      	uxth	r2, r3
 80025ec:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80025f0:	9301      	str	r3, [sp, #4]
 80025f2:	2302      	movs	r3, #2
 80025f4:	9300      	str	r3, [sp, #0]
 80025f6:	2300      	movs	r3, #0
 80025f8:	210a      	movs	r1, #10
 80025fa:	488b      	ldr	r0, [pc, #556]	; (8002828 <FreqMenu_DrawFreqPresetMenu+0x11e4>)
 80025fc:	f008 fe1c 	bl	800b238 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 750Hz", 	10, menu_pos_y7, BLACK, 2, WHITE);
 8002600:	7a7b      	ldrb	r3, [r7, #9]
 8002602:	b29a      	uxth	r2, r3
 8002604:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8002608:	9301      	str	r3, [sp, #4]
 800260a:	2302      	movs	r3, #2
 800260c:	9300      	str	r3, [sp, #0]
 800260e:	2300      	movs	r3, #0
 8002610:	210a      	movs	r1, #10
 8002612:	4886      	ldr	r0, [pc, #536]	; (800282c <FreqMenu_DrawFreqPresetMenu+0x11e8>)
 8002614:	f008 fe10 	bl	800b238 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 1KHz", 	120, menu_pos_y1, BLACK, 2, WHITE);
 8002618:	7bfb      	ldrb	r3, [r7, #15]
 800261a:	b29a      	uxth	r2, r3
 800261c:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8002620:	9301      	str	r3, [sp, #4]
 8002622:	2302      	movs	r3, #2
 8002624:	9300      	str	r3, [sp, #0]
 8002626:	2300      	movs	r3, #0
 8002628:	2178      	movs	r1, #120	; 0x78
 800262a:	4881      	ldr	r0, [pc, #516]	; (8002830 <FreqMenu_DrawFreqPresetMenu+0x11ec>)
 800262c:	f008 fe04 	bl	800b238 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 5KHz", 	120, menu_pos_y2, BLACK, 2, WHITE);
 8002630:	7bbb      	ldrb	r3, [r7, #14]
 8002632:	b29a      	uxth	r2, r3
 8002634:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8002638:	9301      	str	r3, [sp, #4]
 800263a:	2302      	movs	r3, #2
 800263c:	9300      	str	r3, [sp, #0]
 800263e:	2300      	movs	r3, #0
 8002640:	2178      	movs	r1, #120	; 0x78
 8002642:	487c      	ldr	r0, [pc, #496]	; (8002834 <FreqMenu_DrawFreqPresetMenu+0x11f0>)
 8002644:	f008 fdf8 	bl	800b238 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 10KHz", 	120, menu_pos_y3, BLACK, 2, WHITE);
 8002648:	7b7b      	ldrb	r3, [r7, #13]
 800264a:	b29a      	uxth	r2, r3
 800264c:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8002650:	9301      	str	r3, [sp, #4]
 8002652:	2302      	movs	r3, #2
 8002654:	9300      	str	r3, [sp, #0]
 8002656:	2300      	movs	r3, #0
 8002658:	2178      	movs	r1, #120	; 0x78
 800265a:	4877      	ldr	r0, [pc, #476]	; (8002838 <FreqMenu_DrawFreqPresetMenu+0x11f4>)
 800265c:	f008 fdec 	bl	800b238 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 25KHz", 	120, menu_pos_y4, WHITE, 2, BLACK);
 8002660:	7b3b      	ldrb	r3, [r7, #12]
 8002662:	b29a      	uxth	r2, r3
 8002664:	2300      	movs	r3, #0
 8002666:	9301      	str	r3, [sp, #4]
 8002668:	2302      	movs	r3, #2
 800266a:	9300      	str	r3, [sp, #0]
 800266c:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8002670:	2178      	movs	r1, #120	; 0x78
 8002672:	4872      	ldr	r0, [pc, #456]	; (800283c <FreqMenu_DrawFreqPresetMenu+0x11f8>)
 8002674:	f008 fde0 	bl	800b238 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 50KHz", 	120, menu_pos_y5, BLACK, 2, WHITE);
 8002678:	7afb      	ldrb	r3, [r7, #11]
 800267a:	b29a      	uxth	r2, r3
 800267c:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8002680:	9301      	str	r3, [sp, #4]
 8002682:	2302      	movs	r3, #2
 8002684:	9300      	str	r3, [sp, #0]
 8002686:	2300      	movs	r3, #0
 8002688:	2178      	movs	r1, #120	; 0x78
 800268a:	486d      	ldr	r0, [pc, #436]	; (8002840 <FreqMenu_DrawFreqPresetMenu+0x11fc>)
 800268c:	f008 fdd4 	bl	800b238 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 75KHz",	120, menu_pos_y6, BLACK, 2, WHITE);
 8002690:	7abb      	ldrb	r3, [r7, #10]
 8002692:	b29a      	uxth	r2, r3
 8002694:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8002698:	9301      	str	r3, [sp, #4]
 800269a:	2302      	movs	r3, #2
 800269c:	9300      	str	r3, [sp, #0]
 800269e:	2300      	movs	r3, #0
 80026a0:	2178      	movs	r1, #120	; 0x78
 80026a2:	4868      	ldr	r0, [pc, #416]	; (8002844 <FreqMenu_DrawFreqPresetMenu+0x1200>)
 80026a4:	f008 fdc8 	bl	800b238 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 100KHz", 	120, menu_pos_y7, BLACK, 2, WHITE);
 80026a8:	7a7b      	ldrb	r3, [r7, #9]
 80026aa:	b29a      	uxth	r2, r3
 80026ac:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80026b0:	9301      	str	r3, [sp, #4]
 80026b2:	2302      	movs	r3, #2
 80026b4:	9300      	str	r3, [sp, #0]
 80026b6:	2300      	movs	r3, #0
 80026b8:	2178      	movs	r1, #120	; 0x78
 80026ba:	4863      	ldr	r0, [pc, #396]	; (8002848 <FreqMenu_DrawFreqPresetMenu+0x1204>)
 80026bc:	f008 fdbc 	bl	800b238 <ILI9341_Draw_Text>
				break;
 80026c0:	e223      	b.n	8002b0a <FreqMenu_DrawFreqPresetMenu+0x14c6>
				ILI9341_Draw_Text("- 1Hz", 		10, menu_pos_y1, BLACK, 2, WHITE);
 80026c2:	7bfb      	ldrb	r3, [r7, #15]
 80026c4:	b29a      	uxth	r2, r3
 80026c6:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80026ca:	9301      	str	r3, [sp, #4]
 80026cc:	2302      	movs	r3, #2
 80026ce:	9300      	str	r3, [sp, #0]
 80026d0:	2300      	movs	r3, #0
 80026d2:	210a      	movs	r1, #10
 80026d4:	484f      	ldr	r0, [pc, #316]	; (8002814 <FreqMenu_DrawFreqPresetMenu+0x11d0>)
 80026d6:	f008 fdaf 	bl	800b238 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 10Hz", 	10, menu_pos_y2, BLACK, 2, WHITE);
 80026da:	7bbb      	ldrb	r3, [r7, #14]
 80026dc:	b29a      	uxth	r2, r3
 80026de:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80026e2:	9301      	str	r3, [sp, #4]
 80026e4:	2302      	movs	r3, #2
 80026e6:	9300      	str	r3, [sp, #0]
 80026e8:	2300      	movs	r3, #0
 80026ea:	210a      	movs	r1, #10
 80026ec:	484a      	ldr	r0, [pc, #296]	; (8002818 <FreqMenu_DrawFreqPresetMenu+0x11d4>)
 80026ee:	f008 fda3 	bl	800b238 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 50Hz", 	10, menu_pos_y3, BLACK, 2, WHITE);
 80026f2:	7b7b      	ldrb	r3, [r7, #13]
 80026f4:	b29a      	uxth	r2, r3
 80026f6:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80026fa:	9301      	str	r3, [sp, #4]
 80026fc:	2302      	movs	r3, #2
 80026fe:	9300      	str	r3, [sp, #0]
 8002700:	2300      	movs	r3, #0
 8002702:	210a      	movs	r1, #10
 8002704:	4845      	ldr	r0, [pc, #276]	; (800281c <FreqMenu_DrawFreqPresetMenu+0x11d8>)
 8002706:	f008 fd97 	bl	800b238 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 100Hz", 	10, menu_pos_y4, BLACK, 2, WHITE);
 800270a:	7b3b      	ldrb	r3, [r7, #12]
 800270c:	b29a      	uxth	r2, r3
 800270e:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8002712:	9301      	str	r3, [sp, #4]
 8002714:	2302      	movs	r3, #2
 8002716:	9300      	str	r3, [sp, #0]
 8002718:	2300      	movs	r3, #0
 800271a:	210a      	movs	r1, #10
 800271c:	4840      	ldr	r0, [pc, #256]	; (8002820 <FreqMenu_DrawFreqPresetMenu+0x11dc>)
 800271e:	f008 fd8b 	bl	800b238 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 250Hz", 	10, menu_pos_y5, BLACK, 2, WHITE);
 8002722:	7afb      	ldrb	r3, [r7, #11]
 8002724:	b29a      	uxth	r2, r3
 8002726:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800272a:	9301      	str	r3, [sp, #4]
 800272c:	2302      	movs	r3, #2
 800272e:	9300      	str	r3, [sp, #0]
 8002730:	2300      	movs	r3, #0
 8002732:	210a      	movs	r1, #10
 8002734:	483b      	ldr	r0, [pc, #236]	; (8002824 <FreqMenu_DrawFreqPresetMenu+0x11e0>)
 8002736:	f008 fd7f 	bl	800b238 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 500Hz",	10, menu_pos_y6, BLACK, 2, WHITE);
 800273a:	7abb      	ldrb	r3, [r7, #10]
 800273c:	b29a      	uxth	r2, r3
 800273e:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8002742:	9301      	str	r3, [sp, #4]
 8002744:	2302      	movs	r3, #2
 8002746:	9300      	str	r3, [sp, #0]
 8002748:	2300      	movs	r3, #0
 800274a:	210a      	movs	r1, #10
 800274c:	4836      	ldr	r0, [pc, #216]	; (8002828 <FreqMenu_DrawFreqPresetMenu+0x11e4>)
 800274e:	f008 fd73 	bl	800b238 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 750Hz", 	10, menu_pos_y7, BLACK, 2, WHITE);
 8002752:	7a7b      	ldrb	r3, [r7, #9]
 8002754:	b29a      	uxth	r2, r3
 8002756:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800275a:	9301      	str	r3, [sp, #4]
 800275c:	2302      	movs	r3, #2
 800275e:	9300      	str	r3, [sp, #0]
 8002760:	2300      	movs	r3, #0
 8002762:	210a      	movs	r1, #10
 8002764:	4831      	ldr	r0, [pc, #196]	; (800282c <FreqMenu_DrawFreqPresetMenu+0x11e8>)
 8002766:	f008 fd67 	bl	800b238 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 1KHz", 	120, menu_pos_y1, BLACK, 2, WHITE);
 800276a:	7bfb      	ldrb	r3, [r7, #15]
 800276c:	b29a      	uxth	r2, r3
 800276e:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8002772:	9301      	str	r3, [sp, #4]
 8002774:	2302      	movs	r3, #2
 8002776:	9300      	str	r3, [sp, #0]
 8002778:	2300      	movs	r3, #0
 800277a:	2178      	movs	r1, #120	; 0x78
 800277c:	482c      	ldr	r0, [pc, #176]	; (8002830 <FreqMenu_DrawFreqPresetMenu+0x11ec>)
 800277e:	f008 fd5b 	bl	800b238 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 5KHz", 	120, menu_pos_y2, BLACK, 2, WHITE);
 8002782:	7bbb      	ldrb	r3, [r7, #14]
 8002784:	b29a      	uxth	r2, r3
 8002786:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800278a:	9301      	str	r3, [sp, #4]
 800278c:	2302      	movs	r3, #2
 800278e:	9300      	str	r3, [sp, #0]
 8002790:	2300      	movs	r3, #0
 8002792:	2178      	movs	r1, #120	; 0x78
 8002794:	4827      	ldr	r0, [pc, #156]	; (8002834 <FreqMenu_DrawFreqPresetMenu+0x11f0>)
 8002796:	f008 fd4f 	bl	800b238 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 10KHz", 	120, menu_pos_y3, BLACK, 2, WHITE);
 800279a:	7b7b      	ldrb	r3, [r7, #13]
 800279c:	b29a      	uxth	r2, r3
 800279e:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80027a2:	9301      	str	r3, [sp, #4]
 80027a4:	2302      	movs	r3, #2
 80027a6:	9300      	str	r3, [sp, #0]
 80027a8:	2300      	movs	r3, #0
 80027aa:	2178      	movs	r1, #120	; 0x78
 80027ac:	4822      	ldr	r0, [pc, #136]	; (8002838 <FreqMenu_DrawFreqPresetMenu+0x11f4>)
 80027ae:	f008 fd43 	bl	800b238 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 25KHz", 	120, menu_pos_y4, BLACK, 2, WHITE);
 80027b2:	7b3b      	ldrb	r3, [r7, #12]
 80027b4:	b29a      	uxth	r2, r3
 80027b6:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80027ba:	9301      	str	r3, [sp, #4]
 80027bc:	2302      	movs	r3, #2
 80027be:	9300      	str	r3, [sp, #0]
 80027c0:	2300      	movs	r3, #0
 80027c2:	2178      	movs	r1, #120	; 0x78
 80027c4:	481d      	ldr	r0, [pc, #116]	; (800283c <FreqMenu_DrawFreqPresetMenu+0x11f8>)
 80027c6:	f008 fd37 	bl	800b238 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 50KHz", 	120, menu_pos_y5, WHITE, 2, BLACK);
 80027ca:	7afb      	ldrb	r3, [r7, #11]
 80027cc:	b29a      	uxth	r2, r3
 80027ce:	2300      	movs	r3, #0
 80027d0:	9301      	str	r3, [sp, #4]
 80027d2:	2302      	movs	r3, #2
 80027d4:	9300      	str	r3, [sp, #0]
 80027d6:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80027da:	2178      	movs	r1, #120	; 0x78
 80027dc:	4818      	ldr	r0, [pc, #96]	; (8002840 <FreqMenu_DrawFreqPresetMenu+0x11fc>)
 80027de:	f008 fd2b 	bl	800b238 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 75KHz",	120, menu_pos_y6, BLACK, 2, WHITE);
 80027e2:	7abb      	ldrb	r3, [r7, #10]
 80027e4:	b29a      	uxth	r2, r3
 80027e6:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80027ea:	9301      	str	r3, [sp, #4]
 80027ec:	2302      	movs	r3, #2
 80027ee:	9300      	str	r3, [sp, #0]
 80027f0:	2300      	movs	r3, #0
 80027f2:	2178      	movs	r1, #120	; 0x78
 80027f4:	4813      	ldr	r0, [pc, #76]	; (8002844 <FreqMenu_DrawFreqPresetMenu+0x1200>)
 80027f6:	f008 fd1f 	bl	800b238 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 100KHz", 	120, menu_pos_y7, BLACK, 2, WHITE);
 80027fa:	7a7b      	ldrb	r3, [r7, #9]
 80027fc:	b29a      	uxth	r2, r3
 80027fe:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8002802:	9301      	str	r3, [sp, #4]
 8002804:	2302      	movs	r3, #2
 8002806:	9300      	str	r3, [sp, #0]
 8002808:	2300      	movs	r3, #0
 800280a:	2178      	movs	r1, #120	; 0x78
 800280c:	480e      	ldr	r0, [pc, #56]	; (8002848 <FreqMenu_DrawFreqPresetMenu+0x1204>)
 800280e:	f008 fd13 	bl	800b238 <ILI9341_Draw_Text>
			break;
 8002812:	e17a      	b.n	8002b0a <FreqMenu_DrawFreqPresetMenu+0x14c6>
 8002814:	0800e85c 	.word	0x0800e85c
 8002818:	0800e864 	.word	0x0800e864
 800281c:	0800e86c 	.word	0x0800e86c
 8002820:	0800e874 	.word	0x0800e874
 8002824:	0800e87c 	.word	0x0800e87c
 8002828:	0800e884 	.word	0x0800e884
 800282c:	0800e88c 	.word	0x0800e88c
 8002830:	0800e894 	.word	0x0800e894
 8002834:	0800e89c 	.word	0x0800e89c
 8002838:	0800e8a4 	.word	0x0800e8a4
 800283c:	0800e8ac 	.word	0x0800e8ac
 8002840:	0800e8b4 	.word	0x0800e8b4
 8002844:	0800e8bc 	.word	0x0800e8bc
 8002848:	0800e8c4 	.word	0x0800e8c4
				ILI9341_Draw_Text("- 1Hz", 		10, menu_pos_y1, BLACK, 2, WHITE);
 800284c:	7bfb      	ldrb	r3, [r7, #15]
 800284e:	b29a      	uxth	r2, r3
 8002850:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8002854:	9301      	str	r3, [sp, #4]
 8002856:	2302      	movs	r3, #2
 8002858:	9300      	str	r3, [sp, #0]
 800285a:	2300      	movs	r3, #0
 800285c:	210a      	movs	r1, #10
 800285e:	48ad      	ldr	r0, [pc, #692]	; (8002b14 <FreqMenu_DrawFreqPresetMenu+0x14d0>)
 8002860:	f008 fcea 	bl	800b238 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 10Hz", 	10, menu_pos_y2, BLACK, 2, WHITE);
 8002864:	7bbb      	ldrb	r3, [r7, #14]
 8002866:	b29a      	uxth	r2, r3
 8002868:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800286c:	9301      	str	r3, [sp, #4]
 800286e:	2302      	movs	r3, #2
 8002870:	9300      	str	r3, [sp, #0]
 8002872:	2300      	movs	r3, #0
 8002874:	210a      	movs	r1, #10
 8002876:	48a8      	ldr	r0, [pc, #672]	; (8002b18 <FreqMenu_DrawFreqPresetMenu+0x14d4>)
 8002878:	f008 fcde 	bl	800b238 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 50Hz", 	10, menu_pos_y3, BLACK, 2, WHITE);
 800287c:	7b7b      	ldrb	r3, [r7, #13]
 800287e:	b29a      	uxth	r2, r3
 8002880:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8002884:	9301      	str	r3, [sp, #4]
 8002886:	2302      	movs	r3, #2
 8002888:	9300      	str	r3, [sp, #0]
 800288a:	2300      	movs	r3, #0
 800288c:	210a      	movs	r1, #10
 800288e:	48a3      	ldr	r0, [pc, #652]	; (8002b1c <FreqMenu_DrawFreqPresetMenu+0x14d8>)
 8002890:	f008 fcd2 	bl	800b238 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 100Hz", 	10, menu_pos_y4, BLACK, 2, WHITE);
 8002894:	7b3b      	ldrb	r3, [r7, #12]
 8002896:	b29a      	uxth	r2, r3
 8002898:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800289c:	9301      	str	r3, [sp, #4]
 800289e:	2302      	movs	r3, #2
 80028a0:	9300      	str	r3, [sp, #0]
 80028a2:	2300      	movs	r3, #0
 80028a4:	210a      	movs	r1, #10
 80028a6:	489e      	ldr	r0, [pc, #632]	; (8002b20 <FreqMenu_DrawFreqPresetMenu+0x14dc>)
 80028a8:	f008 fcc6 	bl	800b238 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 250Hz", 	10, menu_pos_y5, BLACK, 2, WHITE);
 80028ac:	7afb      	ldrb	r3, [r7, #11]
 80028ae:	b29a      	uxth	r2, r3
 80028b0:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80028b4:	9301      	str	r3, [sp, #4]
 80028b6:	2302      	movs	r3, #2
 80028b8:	9300      	str	r3, [sp, #0]
 80028ba:	2300      	movs	r3, #0
 80028bc:	210a      	movs	r1, #10
 80028be:	4899      	ldr	r0, [pc, #612]	; (8002b24 <FreqMenu_DrawFreqPresetMenu+0x14e0>)
 80028c0:	f008 fcba 	bl	800b238 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 500Hz",	10, menu_pos_y6, BLACK, 2, WHITE);
 80028c4:	7abb      	ldrb	r3, [r7, #10]
 80028c6:	b29a      	uxth	r2, r3
 80028c8:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80028cc:	9301      	str	r3, [sp, #4]
 80028ce:	2302      	movs	r3, #2
 80028d0:	9300      	str	r3, [sp, #0]
 80028d2:	2300      	movs	r3, #0
 80028d4:	210a      	movs	r1, #10
 80028d6:	4894      	ldr	r0, [pc, #592]	; (8002b28 <FreqMenu_DrawFreqPresetMenu+0x14e4>)
 80028d8:	f008 fcae 	bl	800b238 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 750Hz", 	10, menu_pos_y7, BLACK, 2, WHITE);
 80028dc:	7a7b      	ldrb	r3, [r7, #9]
 80028de:	b29a      	uxth	r2, r3
 80028e0:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80028e4:	9301      	str	r3, [sp, #4]
 80028e6:	2302      	movs	r3, #2
 80028e8:	9300      	str	r3, [sp, #0]
 80028ea:	2300      	movs	r3, #0
 80028ec:	210a      	movs	r1, #10
 80028ee:	488f      	ldr	r0, [pc, #572]	; (8002b2c <FreqMenu_DrawFreqPresetMenu+0x14e8>)
 80028f0:	f008 fca2 	bl	800b238 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 1KHz", 	120, menu_pos_y1, BLACK, 2, WHITE);
 80028f4:	7bfb      	ldrb	r3, [r7, #15]
 80028f6:	b29a      	uxth	r2, r3
 80028f8:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80028fc:	9301      	str	r3, [sp, #4]
 80028fe:	2302      	movs	r3, #2
 8002900:	9300      	str	r3, [sp, #0]
 8002902:	2300      	movs	r3, #0
 8002904:	2178      	movs	r1, #120	; 0x78
 8002906:	488a      	ldr	r0, [pc, #552]	; (8002b30 <FreqMenu_DrawFreqPresetMenu+0x14ec>)
 8002908:	f008 fc96 	bl	800b238 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 5KHz", 	120, menu_pos_y2, BLACK, 2, WHITE);
 800290c:	7bbb      	ldrb	r3, [r7, #14]
 800290e:	b29a      	uxth	r2, r3
 8002910:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8002914:	9301      	str	r3, [sp, #4]
 8002916:	2302      	movs	r3, #2
 8002918:	9300      	str	r3, [sp, #0]
 800291a:	2300      	movs	r3, #0
 800291c:	2178      	movs	r1, #120	; 0x78
 800291e:	4885      	ldr	r0, [pc, #532]	; (8002b34 <FreqMenu_DrawFreqPresetMenu+0x14f0>)
 8002920:	f008 fc8a 	bl	800b238 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 10KHz", 	120, menu_pos_y3, BLACK, 2, WHITE);
 8002924:	7b7b      	ldrb	r3, [r7, #13]
 8002926:	b29a      	uxth	r2, r3
 8002928:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800292c:	9301      	str	r3, [sp, #4]
 800292e:	2302      	movs	r3, #2
 8002930:	9300      	str	r3, [sp, #0]
 8002932:	2300      	movs	r3, #0
 8002934:	2178      	movs	r1, #120	; 0x78
 8002936:	4880      	ldr	r0, [pc, #512]	; (8002b38 <FreqMenu_DrawFreqPresetMenu+0x14f4>)
 8002938:	f008 fc7e 	bl	800b238 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 25KHz", 	120, menu_pos_y4, BLACK, 2, WHITE);
 800293c:	7b3b      	ldrb	r3, [r7, #12]
 800293e:	b29a      	uxth	r2, r3
 8002940:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8002944:	9301      	str	r3, [sp, #4]
 8002946:	2302      	movs	r3, #2
 8002948:	9300      	str	r3, [sp, #0]
 800294a:	2300      	movs	r3, #0
 800294c:	2178      	movs	r1, #120	; 0x78
 800294e:	487b      	ldr	r0, [pc, #492]	; (8002b3c <FreqMenu_DrawFreqPresetMenu+0x14f8>)
 8002950:	f008 fc72 	bl	800b238 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 50KHz", 	120, menu_pos_y5, BLACK, 2, WHITE);
 8002954:	7afb      	ldrb	r3, [r7, #11]
 8002956:	b29a      	uxth	r2, r3
 8002958:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800295c:	9301      	str	r3, [sp, #4]
 800295e:	2302      	movs	r3, #2
 8002960:	9300      	str	r3, [sp, #0]
 8002962:	2300      	movs	r3, #0
 8002964:	2178      	movs	r1, #120	; 0x78
 8002966:	4876      	ldr	r0, [pc, #472]	; (8002b40 <FreqMenu_DrawFreqPresetMenu+0x14fc>)
 8002968:	f008 fc66 	bl	800b238 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 75KHz",	120, menu_pos_y6, WHITE, 2, BLACK);
 800296c:	7abb      	ldrb	r3, [r7, #10]
 800296e:	b29a      	uxth	r2, r3
 8002970:	2300      	movs	r3, #0
 8002972:	9301      	str	r3, [sp, #4]
 8002974:	2302      	movs	r3, #2
 8002976:	9300      	str	r3, [sp, #0]
 8002978:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800297c:	2178      	movs	r1, #120	; 0x78
 800297e:	4871      	ldr	r0, [pc, #452]	; (8002b44 <FreqMenu_DrawFreqPresetMenu+0x1500>)
 8002980:	f008 fc5a 	bl	800b238 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 100KHz", 	120, menu_pos_y7, BLACK, 2, WHITE);
 8002984:	7a7b      	ldrb	r3, [r7, #9]
 8002986:	b29a      	uxth	r2, r3
 8002988:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800298c:	9301      	str	r3, [sp, #4]
 800298e:	2302      	movs	r3, #2
 8002990:	9300      	str	r3, [sp, #0]
 8002992:	2300      	movs	r3, #0
 8002994:	2178      	movs	r1, #120	; 0x78
 8002996:	486c      	ldr	r0, [pc, #432]	; (8002b48 <FreqMenu_DrawFreqPresetMenu+0x1504>)
 8002998:	f008 fc4e 	bl	800b238 <ILI9341_Draw_Text>
			break;
 800299c:	e0b5      	b.n	8002b0a <FreqMenu_DrawFreqPresetMenu+0x14c6>
				ILI9341_Draw_Text("- 1Hz", 		10, menu_pos_y1, BLACK, 2, WHITE);
 800299e:	7bfb      	ldrb	r3, [r7, #15]
 80029a0:	b29a      	uxth	r2, r3
 80029a2:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80029a6:	9301      	str	r3, [sp, #4]
 80029a8:	2302      	movs	r3, #2
 80029aa:	9300      	str	r3, [sp, #0]
 80029ac:	2300      	movs	r3, #0
 80029ae:	210a      	movs	r1, #10
 80029b0:	4858      	ldr	r0, [pc, #352]	; (8002b14 <FreqMenu_DrawFreqPresetMenu+0x14d0>)
 80029b2:	f008 fc41 	bl	800b238 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 10Hz", 	10, menu_pos_y2, BLACK, 2, WHITE);
 80029b6:	7bbb      	ldrb	r3, [r7, #14]
 80029b8:	b29a      	uxth	r2, r3
 80029ba:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80029be:	9301      	str	r3, [sp, #4]
 80029c0:	2302      	movs	r3, #2
 80029c2:	9300      	str	r3, [sp, #0]
 80029c4:	2300      	movs	r3, #0
 80029c6:	210a      	movs	r1, #10
 80029c8:	4853      	ldr	r0, [pc, #332]	; (8002b18 <FreqMenu_DrawFreqPresetMenu+0x14d4>)
 80029ca:	f008 fc35 	bl	800b238 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 50Hz", 	10, menu_pos_y3, BLACK, 2, WHITE);
 80029ce:	7b7b      	ldrb	r3, [r7, #13]
 80029d0:	b29a      	uxth	r2, r3
 80029d2:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80029d6:	9301      	str	r3, [sp, #4]
 80029d8:	2302      	movs	r3, #2
 80029da:	9300      	str	r3, [sp, #0]
 80029dc:	2300      	movs	r3, #0
 80029de:	210a      	movs	r1, #10
 80029e0:	484e      	ldr	r0, [pc, #312]	; (8002b1c <FreqMenu_DrawFreqPresetMenu+0x14d8>)
 80029e2:	f008 fc29 	bl	800b238 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 100Hz", 	10, menu_pos_y4, BLACK, 2, WHITE);
 80029e6:	7b3b      	ldrb	r3, [r7, #12]
 80029e8:	b29a      	uxth	r2, r3
 80029ea:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80029ee:	9301      	str	r3, [sp, #4]
 80029f0:	2302      	movs	r3, #2
 80029f2:	9300      	str	r3, [sp, #0]
 80029f4:	2300      	movs	r3, #0
 80029f6:	210a      	movs	r1, #10
 80029f8:	4849      	ldr	r0, [pc, #292]	; (8002b20 <FreqMenu_DrawFreqPresetMenu+0x14dc>)
 80029fa:	f008 fc1d 	bl	800b238 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 250Hz", 	10, menu_pos_y5, BLACK, 2, WHITE);
 80029fe:	7afb      	ldrb	r3, [r7, #11]
 8002a00:	b29a      	uxth	r2, r3
 8002a02:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8002a06:	9301      	str	r3, [sp, #4]
 8002a08:	2302      	movs	r3, #2
 8002a0a:	9300      	str	r3, [sp, #0]
 8002a0c:	2300      	movs	r3, #0
 8002a0e:	210a      	movs	r1, #10
 8002a10:	4844      	ldr	r0, [pc, #272]	; (8002b24 <FreqMenu_DrawFreqPresetMenu+0x14e0>)
 8002a12:	f008 fc11 	bl	800b238 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 500Hz",	10, menu_pos_y6, BLACK, 2, WHITE);
 8002a16:	7abb      	ldrb	r3, [r7, #10]
 8002a18:	b29a      	uxth	r2, r3
 8002a1a:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8002a1e:	9301      	str	r3, [sp, #4]
 8002a20:	2302      	movs	r3, #2
 8002a22:	9300      	str	r3, [sp, #0]
 8002a24:	2300      	movs	r3, #0
 8002a26:	210a      	movs	r1, #10
 8002a28:	483f      	ldr	r0, [pc, #252]	; (8002b28 <FreqMenu_DrawFreqPresetMenu+0x14e4>)
 8002a2a:	f008 fc05 	bl	800b238 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 750Hz", 	10, menu_pos_y7, BLACK, 2, WHITE);
 8002a2e:	7a7b      	ldrb	r3, [r7, #9]
 8002a30:	b29a      	uxth	r2, r3
 8002a32:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8002a36:	9301      	str	r3, [sp, #4]
 8002a38:	2302      	movs	r3, #2
 8002a3a:	9300      	str	r3, [sp, #0]
 8002a3c:	2300      	movs	r3, #0
 8002a3e:	210a      	movs	r1, #10
 8002a40:	483a      	ldr	r0, [pc, #232]	; (8002b2c <FreqMenu_DrawFreqPresetMenu+0x14e8>)
 8002a42:	f008 fbf9 	bl	800b238 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 1KHz", 	120, menu_pos_y1, BLACK, 2, WHITE);
 8002a46:	7bfb      	ldrb	r3, [r7, #15]
 8002a48:	b29a      	uxth	r2, r3
 8002a4a:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8002a4e:	9301      	str	r3, [sp, #4]
 8002a50:	2302      	movs	r3, #2
 8002a52:	9300      	str	r3, [sp, #0]
 8002a54:	2300      	movs	r3, #0
 8002a56:	2178      	movs	r1, #120	; 0x78
 8002a58:	4835      	ldr	r0, [pc, #212]	; (8002b30 <FreqMenu_DrawFreqPresetMenu+0x14ec>)
 8002a5a:	f008 fbed 	bl	800b238 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 5KHz", 	120, menu_pos_y2, BLACK, 2, WHITE);
 8002a5e:	7bbb      	ldrb	r3, [r7, #14]
 8002a60:	b29a      	uxth	r2, r3
 8002a62:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8002a66:	9301      	str	r3, [sp, #4]
 8002a68:	2302      	movs	r3, #2
 8002a6a:	9300      	str	r3, [sp, #0]
 8002a6c:	2300      	movs	r3, #0
 8002a6e:	2178      	movs	r1, #120	; 0x78
 8002a70:	4830      	ldr	r0, [pc, #192]	; (8002b34 <FreqMenu_DrawFreqPresetMenu+0x14f0>)
 8002a72:	f008 fbe1 	bl	800b238 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 10KHz", 	120, menu_pos_y3, BLACK, 2, WHITE);
 8002a76:	7b7b      	ldrb	r3, [r7, #13]
 8002a78:	b29a      	uxth	r2, r3
 8002a7a:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8002a7e:	9301      	str	r3, [sp, #4]
 8002a80:	2302      	movs	r3, #2
 8002a82:	9300      	str	r3, [sp, #0]
 8002a84:	2300      	movs	r3, #0
 8002a86:	2178      	movs	r1, #120	; 0x78
 8002a88:	482b      	ldr	r0, [pc, #172]	; (8002b38 <FreqMenu_DrawFreqPresetMenu+0x14f4>)
 8002a8a:	f008 fbd5 	bl	800b238 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 25KHz", 	120, menu_pos_y4, BLACK, 2, WHITE);
 8002a8e:	7b3b      	ldrb	r3, [r7, #12]
 8002a90:	b29a      	uxth	r2, r3
 8002a92:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8002a96:	9301      	str	r3, [sp, #4]
 8002a98:	2302      	movs	r3, #2
 8002a9a:	9300      	str	r3, [sp, #0]
 8002a9c:	2300      	movs	r3, #0
 8002a9e:	2178      	movs	r1, #120	; 0x78
 8002aa0:	4826      	ldr	r0, [pc, #152]	; (8002b3c <FreqMenu_DrawFreqPresetMenu+0x14f8>)
 8002aa2:	f008 fbc9 	bl	800b238 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 50KHz", 	120, menu_pos_y5, BLACK, 2, WHITE);
 8002aa6:	7afb      	ldrb	r3, [r7, #11]
 8002aa8:	b29a      	uxth	r2, r3
 8002aaa:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8002aae:	9301      	str	r3, [sp, #4]
 8002ab0:	2302      	movs	r3, #2
 8002ab2:	9300      	str	r3, [sp, #0]
 8002ab4:	2300      	movs	r3, #0
 8002ab6:	2178      	movs	r1, #120	; 0x78
 8002ab8:	4821      	ldr	r0, [pc, #132]	; (8002b40 <FreqMenu_DrawFreqPresetMenu+0x14fc>)
 8002aba:	f008 fbbd 	bl	800b238 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 75KHz",	120, menu_pos_y6, BLACK, 2, WHITE);
 8002abe:	7abb      	ldrb	r3, [r7, #10]
 8002ac0:	b29a      	uxth	r2, r3
 8002ac2:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8002ac6:	9301      	str	r3, [sp, #4]
 8002ac8:	2302      	movs	r3, #2
 8002aca:	9300      	str	r3, [sp, #0]
 8002acc:	2300      	movs	r3, #0
 8002ace:	2178      	movs	r1, #120	; 0x78
 8002ad0:	481c      	ldr	r0, [pc, #112]	; (8002b44 <FreqMenu_DrawFreqPresetMenu+0x1500>)
 8002ad2:	f008 fbb1 	bl	800b238 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 100KHz", 	120, menu_pos_y7, WHITE, 2, BLACK);
 8002ad6:	7a7b      	ldrb	r3, [r7, #9]
 8002ad8:	b29a      	uxth	r2, r3
 8002ada:	2300      	movs	r3, #0
 8002adc:	9301      	str	r3, [sp, #4]
 8002ade:	2302      	movs	r3, #2
 8002ae0:	9300      	str	r3, [sp, #0]
 8002ae2:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8002ae6:	2178      	movs	r1, #120	; 0x78
 8002ae8:	4817      	ldr	r0, [pc, #92]	; (8002b48 <FreqMenu_DrawFreqPresetMenu+0x1504>)
 8002aea:	f008 fba5 	bl	800b238 <ILI9341_Draw_Text>
			break;
 8002aee:	bf00      	nop
 8002af0:	e00b      	b.n	8002b0a <FreqMenu_DrawFreqPresetMenu+0x14c6>
		ILI9341_Draw_Text("FreqMenus::FreqMenu_DrawFreqPresetMenu() Error", 		10, 180, RED, 1, BLACK);
 8002af2:	2300      	movs	r3, #0
 8002af4:	9301      	str	r3, [sp, #4]
 8002af6:	2301      	movs	r3, #1
 8002af8:	9300      	str	r3, [sp, #0]
 8002afa:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8002afe:	22b4      	movs	r2, #180	; 0xb4
 8002b00:	210a      	movs	r1, #10
 8002b02:	4812      	ldr	r0, [pc, #72]	; (8002b4c <FreqMenu_DrawFreqPresetMenu+0x1508>)
 8002b04:	f008 fb98 	bl	800b238 <ILI9341_Draw_Text>
}
 8002b08:	e7ff      	b.n	8002b0a <FreqMenu_DrawFreqPresetMenu+0x14c6>
 8002b0a:	bf00      	nop
 8002b0c:	3710      	adds	r7, #16
 8002b0e:	46bd      	mov	sp, r7
 8002b10:	bd80      	pop	{r7, pc}
 8002b12:	bf00      	nop
 8002b14:	0800e85c 	.word	0x0800e85c
 8002b18:	0800e864 	.word	0x0800e864
 8002b1c:	0800e86c 	.word	0x0800e86c
 8002b20:	0800e874 	.word	0x0800e874
 8002b24:	0800e87c 	.word	0x0800e87c
 8002b28:	0800e884 	.word	0x0800e884
 8002b2c:	0800e88c 	.word	0x0800e88c
 8002b30:	0800e894 	.word	0x0800e894
 8002b34:	0800e89c 	.word	0x0800e89c
 8002b38:	0800e8a4 	.word	0x0800e8a4
 8002b3c:	0800e8ac 	.word	0x0800e8ac
 8002b40:	0800e8b4 	.word	0x0800e8b4
 8002b44:	0800e8bc 	.word	0x0800e8bc
 8002b48:	0800e8c4 	.word	0x0800e8c4
 8002b4c:	0800e8d0 	.word	0x0800e8d0

08002b50 <FreqMenu_DrawFreqAdjustMenu>:
 *	@param None
 *	@retval None
 *
 */
void FreqMenu_DrawFreqAdjustMenu()
{
 8002b50:	b580      	push	{r7, lr}
 8002b52:	b084      	sub	sp, #16
 8002b54:	af02      	add	r7, sp, #8

	ILI9341_Draw_Text("Output Signal Freq: ", 	10, 150, BLACK, 1, WHITE);
 8002b56:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8002b5a:	9301      	str	r3, [sp, #4]
 8002b5c:	2301      	movs	r3, #1
 8002b5e:	9300      	str	r3, [sp, #0]
 8002b60:	2300      	movs	r3, #0
 8002b62:	2296      	movs	r2, #150	; 0x96
 8002b64:	210a      	movs	r1, #10
 8002b66:	4811      	ldr	r0, [pc, #68]	; (8002bac <FreqMenu_DrawFreqAdjustMenu+0x5c>)
 8002b68:	f008 fb66 	bl	800b238 <ILI9341_Draw_Text>

	char freq[6] = "";
 8002b6c:	2300      	movs	r3, #0
 8002b6e:	603b      	str	r3, [r7, #0]
 8002b70:	2300      	movs	r3, #0
 8002b72:	80bb      	strh	r3, [r7, #4]
	//snprintf(freq, sizeof(freq), "%u", (uint8_t)FreqO_GetOutputFreq());
	if(DM_AddDigitPadding((uint16_t)FreqO_GetOutputFreq(), freq, sizeof(freq)) == 0)
 8002b74:	f000 fd64 	bl	8003640 <FreqO_GetOutputFreq>
 8002b78:	4603      	mov	r3, r0
 8002b7a:	b29b      	uxth	r3, r3
 8002b7c:	4639      	mov	r1, r7
 8002b7e:	2206      	movs	r2, #6
 8002b80:	4618      	mov	r0, r3
 8002b82:	f7fe fcbb 	bl	80014fc <DM_AddDigitPadding>
 8002b86:	4603      	mov	r3, r0
 8002b88:	2b00      	cmp	r3, #0
 8002b8a:	d10a      	bne.n	8002ba2 <FreqMenu_DrawFreqAdjustMenu+0x52>
		ILI9341_Draw_Text(freq, 250, 150, WHITE, 1, BLACK);
 8002b8c:	4638      	mov	r0, r7
 8002b8e:	2300      	movs	r3, #0
 8002b90:	9301      	str	r3, [sp, #4]
 8002b92:	2301      	movs	r3, #1
 8002b94:	9300      	str	r3, [sp, #0]
 8002b96:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8002b9a:	2296      	movs	r2, #150	; 0x96
 8002b9c:	21fa      	movs	r1, #250	; 0xfa
 8002b9e:	f008 fb4b 	bl	800b238 <ILI9341_Draw_Text>


}
 8002ba2:	bf00      	nop
 8002ba4:	3708      	adds	r7, #8
 8002ba6:	46bd      	mov	sp, r7
 8002ba8:	bd80      	pop	{r7, pc}
 8002baa:	bf00      	nop
 8002bac:	0800e900 	.word	0x0800e900

08002bb0 <FreqMenu_DrawFreqSweepMenu>:
 *	@param None
 *	@retval None
 *
 */
void FreqMenu_DrawFreqSweepMenu()
{
 8002bb0:	b580      	push	{r7, lr}
 8002bb2:	b082      	sub	sp, #8
 8002bb4:	af02      	add	r7, sp, #8

	ILI9341_Draw_Text("TODO: Freq Sweep Menu", 	10, 120, BLACK, 2, WHITE);
 8002bb6:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8002bba:	9301      	str	r3, [sp, #4]
 8002bbc:	2302      	movs	r3, #2
 8002bbe:	9300      	str	r3, [sp, #0]
 8002bc0:	2300      	movs	r3, #0
 8002bc2:	2278      	movs	r2, #120	; 0x78
 8002bc4:	210a      	movs	r1, #10
 8002bc6:	4803      	ldr	r0, [pc, #12]	; (8002bd4 <FreqMenu_DrawFreqSweepMenu+0x24>)
 8002bc8:	f008 fb36 	bl	800b238 <ILI9341_Draw_Text>




}
 8002bcc:	bf00      	nop
 8002bce:	46bd      	mov	sp, r7
 8002bd0:	bd80      	pop	{r7, pc}
 8002bd2:	bf00      	nop
 8002bd4:	0800e918 	.word	0x0800e918

08002bd8 <EM_ProcessEvent>:
 *	@param None
 *	@retval None
 *
 */
void EM_ProcessEvent()
{
 8002bd8:	b580      	push	{r7, lr}
 8002bda:	af00      	add	r7, sp, #0

	switch(eNextState)
 8002bdc:	4b79      	ldr	r3, [pc, #484]	; (8002dc4 <EM_ProcessEvent+0x1ec>)
 8002bde:	781b      	ldrb	r3, [r3, #0]
 8002be0:	2b07      	cmp	r3, #7
 8002be2:	f200 80db 	bhi.w	8002d9c <EM_ProcessEvent+0x1c4>
 8002be6:	a201      	add	r2, pc, #4	; (adr r2, 8002bec <EM_ProcessEvent+0x14>)
 8002be8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002bec:	08002c0d 	.word	0x08002c0d
 8002bf0:	08002c61 	.word	0x08002c61
 8002bf4:	08002c8d 	.word	0x08002c8d
 8002bf8:	08002cb7 	.word	0x08002cb7
 8002bfc:	08002d09 	.word	0x08002d09
 8002c00:	08002d33 	.word	0x08002d33
 8002c04:	08002d5d 	.word	0x08002d5d
 8002c08:	08002d73 	.word	0x08002d73
	{
		case Idle_State:

			if(eNewEvent == evBlueBtn)
 8002c0c:	4b6e      	ldr	r3, [pc, #440]	; (8002dc8 <EM_ProcessEvent+0x1f0>)
 8002c0e:	781b      	ldrb	r3, [r3, #0]
 8002c10:	2b01      	cmp	r3, #1
 8002c12:	d105      	bne.n	8002c20 <EM_ProcessEvent+0x48>
			{
				eNextState = _FuncMenuEntryHandler();
 8002c14:	f000 f8da 	bl	8002dcc <_FuncMenuEntryHandler>
 8002c18:	4603      	mov	r3, r0
 8002c1a:	461a      	mov	r2, r3
 8002c1c:	4b69      	ldr	r3, [pc, #420]	; (8002dc4 <EM_ProcessEvent+0x1ec>)
 8002c1e:	701a      	strb	r2, [r3, #0]
			}
			if(eNewEvent == evGreenBtn)
 8002c20:	4b69      	ldr	r3, [pc, #420]	; (8002dc8 <EM_ProcessEvent+0x1f0>)
 8002c22:	781b      	ldrb	r3, [r3, #0]
 8002c24:	2b02      	cmp	r3, #2
 8002c26:	d105      	bne.n	8002c34 <EM_ProcessEvent+0x5c>
			{
				eNextState = _FreqMainMenuEntryHandler();
 8002c28:	f000 f9b8 	bl	8002f9c <_FreqMainMenuEntryHandler>
 8002c2c:	4603      	mov	r3, r0
 8002c2e:	461a      	mov	r2, r3
 8002c30:	4b64      	ldr	r3, [pc, #400]	; (8002dc4 <EM_ProcessEvent+0x1ec>)
 8002c32:	701a      	strb	r2, [r3, #0]
			}
			if(eNewEvent == evYellowBtn)
 8002c34:	4b64      	ldr	r3, [pc, #400]	; (8002dc8 <EM_ProcessEvent+0x1f0>)
 8002c36:	781b      	ldrb	r3, [r3, #0]
 8002c38:	2b03      	cmp	r3, #3
 8002c3a:	d105      	bne.n	8002c48 <EM_ProcessEvent+0x70>
			{
				eNextState = _GainMenuEntryHandler();
 8002c3c:	f000 f91a 	bl	8002e74 <_GainMenuEntryHandler>
 8002c40:	4603      	mov	r3, r0
 8002c42:	461a      	mov	r2, r3
 8002c44:	4b5f      	ldr	r3, [pc, #380]	; (8002dc4 <EM_ProcessEvent+0x1ec>)
 8002c46:	701a      	strb	r2, [r3, #0]
			}
			if(eNewEvent == evRedBtn)
 8002c48:	4b5f      	ldr	r3, [pc, #380]	; (8002dc8 <EM_ProcessEvent+0x1f0>)
 8002c4a:	781b      	ldrb	r3, [r3, #0]
 8002c4c:	2b04      	cmp	r3, #4
 8002c4e:	f040 80a7 	bne.w	8002da0 <EM_ProcessEvent+0x1c8>
			{
				eNextState = _BiasMenuEntryHandler();
 8002c52:	f000 f95d 	bl	8002f10 <_BiasMenuEntryHandler>
 8002c56:	4603      	mov	r3, r0
 8002c58:	461a      	mov	r2, r3
 8002c5a:	4b5a      	ldr	r3, [pc, #360]	; (8002dc4 <EM_ProcessEvent+0x1ec>)
 8002c5c:	701a      	strb	r2, [r3, #0]
			}

			break;
 8002c5e:	e09f      	b.n	8002da0 <EM_ProcessEvent+0x1c8>

		case Func_Menu_State:

			if(eNewEvent == evEncoderSet)
 8002c60:	4b59      	ldr	r3, [pc, #356]	; (8002dc8 <EM_ProcessEvent+0x1f0>)
 8002c62:	781b      	ldrb	r3, [r3, #0]
 8002c64:	2b05      	cmp	r3, #5
 8002c66:	d105      	bne.n	8002c74 <EM_ProcessEvent+0x9c>
			{
				eNextState = _FuncMenuInputHandler();
 8002c68:	f000 f8d4 	bl	8002e14 <_FuncMenuInputHandler>
 8002c6c:	4603      	mov	r3, r0
 8002c6e:	461a      	mov	r2, r3
 8002c70:	4b54      	ldr	r3, [pc, #336]	; (8002dc4 <EM_ProcessEvent+0x1ec>)
 8002c72:	701a      	strb	r2, [r3, #0]
			}
			if(eNewEvent == evEncoderPush)
 8002c74:	4b54      	ldr	r3, [pc, #336]	; (8002dc8 <EM_ProcessEvent+0x1f0>)
 8002c76:	781b      	ldrb	r3, [r3, #0]
 8002c78:	2b06      	cmp	r3, #6
 8002c7a:	f040 8093 	bne.w	8002da4 <EM_ProcessEvent+0x1cc>
			{
				eNextState = _FuncMenuExitHandler();
 8002c7e:	f000 f8df 	bl	8002e40 <_FuncMenuExitHandler>
 8002c82:	4603      	mov	r3, r0
 8002c84:	461a      	mov	r2, r3
 8002c86:	4b4f      	ldr	r3, [pc, #316]	; (8002dc4 <EM_ProcessEvent+0x1ec>)
 8002c88:	701a      	strb	r2, [r3, #0]
			}
			break;
 8002c8a:	e08b      	b.n	8002da4 <EM_ProcessEvent+0x1cc>

		case Gain_Menu_State:

			if(eNewEvent == evEncoderSet)
 8002c8c:	4b4e      	ldr	r3, [pc, #312]	; (8002dc8 <EM_ProcessEvent+0x1f0>)
 8002c8e:	781b      	ldrb	r3, [r3, #0]
 8002c90:	2b05      	cmp	r3, #5
 8002c92:	d105      	bne.n	8002ca0 <EM_ProcessEvent+0xc8>
			{
				eNextState = _GainMenuInputHandler();
 8002c94:	f000 f912 	bl	8002ebc <_GainMenuInputHandler>
 8002c98:	4603      	mov	r3, r0
 8002c9a:	461a      	mov	r2, r3
 8002c9c:	4b49      	ldr	r3, [pc, #292]	; (8002dc4 <EM_ProcessEvent+0x1ec>)
 8002c9e:	701a      	strb	r2, [r3, #0]
			}
			if(eNewEvent == evEncoderPush)
 8002ca0:	4b49      	ldr	r3, [pc, #292]	; (8002dc8 <EM_ProcessEvent+0x1f0>)
 8002ca2:	781b      	ldrb	r3, [r3, #0]
 8002ca4:	2b06      	cmp	r3, #6
 8002ca6:	d17f      	bne.n	8002da8 <EM_ProcessEvent+0x1d0>
			{
				eNextState = _GainMenuExitHandler();
 8002ca8:	f000 f91e 	bl	8002ee8 <_GainMenuExitHandler>
 8002cac:	4603      	mov	r3, r0
 8002cae:	461a      	mov	r2, r3
 8002cb0:	4b44      	ldr	r3, [pc, #272]	; (8002dc4 <EM_ProcessEvent+0x1ec>)
 8002cb2:	701a      	strb	r2, [r3, #0]
			}
			break;
 8002cb4:	e078      	b.n	8002da8 <EM_ProcessEvent+0x1d0>

			if(eNewEvent == evEncoderSet)
			{
//				eNextState = _FreqMainMenuSetHandler();
			}
			if(eNewEvent == evEncoderPush)
 8002cb6:	4b44      	ldr	r3, [pc, #272]	; (8002dc8 <EM_ProcessEvent+0x1f0>)
 8002cb8:	781b      	ldrb	r3, [r3, #0]
 8002cba:	2b06      	cmp	r3, #6
 8002cbc:	d105      	bne.n	8002cca <EM_ProcessEvent+0xf2>
			{
				eNextState = _FreqMainMenuExitHandler();
 8002cbe:	f000 f981 	bl	8002fc4 <_FreqMainMenuExitHandler>
 8002cc2:	4603      	mov	r3, r0
 8002cc4:	461a      	mov	r2, r3
 8002cc6:	4b3f      	ldr	r3, [pc, #252]	; (8002dc4 <EM_ProcessEvent+0x1ec>)
 8002cc8:	701a      	strb	r2, [r3, #0]
			}
			if(eNewEvent == evBlueBtn)
 8002cca:	4b3f      	ldr	r3, [pc, #252]	; (8002dc8 <EM_ProcessEvent+0x1f0>)
 8002ccc:	781b      	ldrb	r3, [r3, #0]
 8002cce:	2b01      	cmp	r3, #1
 8002cd0:	d105      	bne.n	8002cde <EM_ProcessEvent+0x106>
			{
//				FreqO_ApplyPreset(FPRESET_1HZ);
				eNextState = _FreqPresetMenuEntryHandler();
 8002cd2:	f000 f991 	bl	8002ff8 <_FreqPresetMenuEntryHandler>
 8002cd6:	4603      	mov	r3, r0
 8002cd8:	461a      	mov	r2, r3
 8002cda:	4b3a      	ldr	r3, [pc, #232]	; (8002dc4 <EM_ProcessEvent+0x1ec>)
 8002cdc:	701a      	strb	r2, [r3, #0]
			}
			if(eNewEvent == evGreenBtn)
 8002cde:	4b3a      	ldr	r3, [pc, #232]	; (8002dc8 <EM_ProcessEvent+0x1f0>)
 8002ce0:	781b      	ldrb	r3, [r3, #0]
 8002ce2:	2b02      	cmp	r3, #2
 8002ce4:	d105      	bne.n	8002cf2 <EM_ProcessEvent+0x11a>
			{
//				FreqO_ApplyPreset(FPRESET_100HZ);
				eNextState = _FreqAdjustMenuEntryHandler();
 8002ce6:	f000 f9d9 	bl	800309c <_FreqAdjustMenuEntryHandler>
 8002cea:	4603      	mov	r3, r0
 8002cec:	461a      	mov	r2, r3
 8002cee:	4b35      	ldr	r3, [pc, #212]	; (8002dc4 <EM_ProcessEvent+0x1ec>)
 8002cf0:	701a      	strb	r2, [r3, #0]
			}
			if(eNewEvent == evYellowBtn)
 8002cf2:	4b35      	ldr	r3, [pc, #212]	; (8002dc8 <EM_ProcessEvent+0x1f0>)
 8002cf4:	781b      	ldrb	r3, [r3, #0]
 8002cf6:	2b03      	cmp	r3, #3
 8002cf8:	d158      	bne.n	8002dac <EM_ProcessEvent+0x1d4>
			{
//				FreqO_ApplyPreset(FPRESET_1KHZ);
				eNextState = _FreqSweepMenuEntryHandler();
 8002cfa:	f000 fa13 	bl	8003124 <_FreqSweepMenuEntryHandler>
 8002cfe:	4603      	mov	r3, r0
 8002d00:	461a      	mov	r2, r3
 8002d02:	4b30      	ldr	r3, [pc, #192]	; (8002dc4 <EM_ProcessEvent+0x1ec>)
 8002d04:	701a      	strb	r2, [r3, #0]
			}
			if(eNewEvent == evRedBtn)
			{
				// No menu action
			}
			break;
 8002d06:	e051      	b.n	8002dac <EM_ProcessEvent+0x1d4>

		case Freq_Preset_Menu_State:
			if(eNewEvent == evEncoderSet)
 8002d08:	4b2f      	ldr	r3, [pc, #188]	; (8002dc8 <EM_ProcessEvent+0x1f0>)
 8002d0a:	781b      	ldrb	r3, [r3, #0]
 8002d0c:	2b05      	cmp	r3, #5
 8002d0e:	d105      	bne.n	8002d1c <EM_ProcessEvent+0x144>
			{
				eNextState = _FreqPresetMenuInputHandler();
 8002d10:	f000 f99c 	bl	800304c <_FreqPresetMenuInputHandler>
 8002d14:	4603      	mov	r3, r0
 8002d16:	461a      	mov	r2, r3
 8002d18:	4b2a      	ldr	r3, [pc, #168]	; (8002dc4 <EM_ProcessEvent+0x1ec>)
 8002d1a:	701a      	strb	r2, [r3, #0]
			}
			if(eNewEvent == evEncoderPush)
 8002d1c:	4b2a      	ldr	r3, [pc, #168]	; (8002dc8 <EM_ProcessEvent+0x1f0>)
 8002d1e:	781b      	ldrb	r3, [r3, #0]
 8002d20:	2b06      	cmp	r3, #6
 8002d22:	d145      	bne.n	8002db0 <EM_ProcessEvent+0x1d8>
			{
				eNextState = _FreqPresetMenuExitHandler();
 8002d24:	f000 f9a8 	bl	8003078 <_FreqPresetMenuExitHandler>
 8002d28:	4603      	mov	r3, r0
 8002d2a:	461a      	mov	r2, r3
 8002d2c:	4b25      	ldr	r3, [pc, #148]	; (8002dc4 <EM_ProcessEvent+0x1ec>)
 8002d2e:	701a      	strb	r2, [r3, #0]
			}
			break;
 8002d30:	e03e      	b.n	8002db0 <EM_ProcessEvent+0x1d8>

		case Freq_Adjust_Menu_State:
			if(eNewEvent == evEncoderSet)
 8002d32:	4b25      	ldr	r3, [pc, #148]	; (8002dc8 <EM_ProcessEvent+0x1f0>)
 8002d34:	781b      	ldrb	r3, [r3, #0]
 8002d36:	2b05      	cmp	r3, #5
 8002d38:	d105      	bne.n	8002d46 <EM_ProcessEvent+0x16e>
			{
				eNextState = _FreqAdjustMenuInputHandler();
 8002d3a:	f000 f9cf 	bl	80030dc <_FreqAdjustMenuInputHandler>
 8002d3e:	4603      	mov	r3, r0
 8002d40:	461a      	mov	r2, r3
 8002d42:	4b20      	ldr	r3, [pc, #128]	; (8002dc4 <EM_ProcessEvent+0x1ec>)
 8002d44:	701a      	strb	r2, [r3, #0]
			}
			if(eNewEvent == evEncoderPush)
 8002d46:	4b20      	ldr	r3, [pc, #128]	; (8002dc8 <EM_ProcessEvent+0x1f0>)
 8002d48:	781b      	ldrb	r3, [r3, #0]
 8002d4a:	2b06      	cmp	r3, #6
 8002d4c:	d132      	bne.n	8002db4 <EM_ProcessEvent+0x1dc>
			{
				eNextState = _FreqAdjustMenuExitHandler();
 8002d4e:	f000 f9d7 	bl	8003100 <_FreqAdjustMenuExitHandler>
 8002d52:	4603      	mov	r3, r0
 8002d54:	461a      	mov	r2, r3
 8002d56:	4b1b      	ldr	r3, [pc, #108]	; (8002dc4 <EM_ProcessEvent+0x1ec>)
 8002d58:	701a      	strb	r2, [r3, #0]
			}
			break;
 8002d5a:	e02b      	b.n	8002db4 <EM_ProcessEvent+0x1dc>
		case Freq_Sweep_Menu_State:
			if(eNewEvent == evEncoderSet)
			{
//				eNextState = _FreqMainMenuSetHandler();
			}
			if(eNewEvent == evEncoderPush)
 8002d5c:	4b1a      	ldr	r3, [pc, #104]	; (8002dc8 <EM_ProcessEvent+0x1f0>)
 8002d5e:	781b      	ldrb	r3, [r3, #0]
 8002d60:	2b06      	cmp	r3, #6
 8002d62:	d129      	bne.n	8002db8 <EM_ProcessEvent+0x1e0>
			{
				eNextState = _FreqSweepMenuExitHandler();
 8002d64:	f000 f9fa 	bl	800315c <_FreqSweepMenuExitHandler>
 8002d68:	4603      	mov	r3, r0
 8002d6a:	461a      	mov	r2, r3
 8002d6c:	4b15      	ldr	r3, [pc, #84]	; (8002dc4 <EM_ProcessEvent+0x1ec>)
 8002d6e:	701a      	strb	r2, [r3, #0]
			}
			break;
 8002d70:	e022      	b.n	8002db8 <EM_ProcessEvent+0x1e0>

		case Bias_Menu_State:
			if(eNewEvent == evEncoderSet)
 8002d72:	4b15      	ldr	r3, [pc, #84]	; (8002dc8 <EM_ProcessEvent+0x1f0>)
 8002d74:	781b      	ldrb	r3, [r3, #0]
 8002d76:	2b05      	cmp	r3, #5
 8002d78:	d105      	bne.n	8002d86 <EM_ProcessEvent+0x1ae>
			{
				eNextState = _BiasMenuInputHandler();
 8002d7a:	f000 f8e3 	bl	8002f44 <_BiasMenuInputHandler>
 8002d7e:	4603      	mov	r3, r0
 8002d80:	461a      	mov	r2, r3
 8002d82:	4b10      	ldr	r3, [pc, #64]	; (8002dc4 <EM_ProcessEvent+0x1ec>)
 8002d84:	701a      	strb	r2, [r3, #0]
			}
			if(eNewEvent == evEncoderPush)
 8002d86:	4b10      	ldr	r3, [pc, #64]	; (8002dc8 <EM_ProcessEvent+0x1f0>)
 8002d88:	781b      	ldrb	r3, [r3, #0]
 8002d8a:	2b06      	cmp	r3, #6
 8002d8c:	d116      	bne.n	8002dbc <EM_ProcessEvent+0x1e4>
			{
				eNextState = _BiasMenuExitHandler();
 8002d8e:	f000 f8eb 	bl	8002f68 <_BiasMenuExitHandler>
 8002d92:	4603      	mov	r3, r0
 8002d94:	461a      	mov	r2, r3
 8002d96:	4b0b      	ldr	r3, [pc, #44]	; (8002dc4 <EM_ProcessEvent+0x1ec>)
 8002d98:	701a      	strb	r2, [r3, #0]
			}

			break;
 8002d9a:	e00f      	b.n	8002dbc <EM_ProcessEvent+0x1e4>

		default:
			break;
 8002d9c:	bf00      	nop
 8002d9e:	e00e      	b.n	8002dbe <EM_ProcessEvent+0x1e6>
			break;
 8002da0:	bf00      	nop
 8002da2:	e00c      	b.n	8002dbe <EM_ProcessEvent+0x1e6>
			break;
 8002da4:	bf00      	nop
 8002da6:	e00a      	b.n	8002dbe <EM_ProcessEvent+0x1e6>
			break;
 8002da8:	bf00      	nop
 8002daa:	e008      	b.n	8002dbe <EM_ProcessEvent+0x1e6>
			break;
 8002dac:	bf00      	nop
 8002dae:	e006      	b.n	8002dbe <EM_ProcessEvent+0x1e6>
			break;
 8002db0:	bf00      	nop
 8002db2:	e004      	b.n	8002dbe <EM_ProcessEvent+0x1e6>
			break;
 8002db4:	bf00      	nop
 8002db6:	e002      	b.n	8002dbe <EM_ProcessEvent+0x1e6>
			break;
 8002db8:	bf00      	nop
 8002dba:	e000      	b.n	8002dbe <EM_ProcessEvent+0x1e6>
			break;
 8002dbc:	bf00      	nop
	}

}
 8002dbe:	bf00      	nop
 8002dc0:	bd80      	pop	{r7, pc}
 8002dc2:	bf00      	nop
 8002dc4:	20001418 	.word	0x20001418
 8002dc8:	20001419 	.word	0x20001419

08002dcc <_FuncMenuEntryHandler>:
 *	@param None
 *	@retval None
 *
 */
eSystemState _FuncMenuEntryHandler(void)
{
 8002dcc:	b580      	push	{r7, lr}
 8002dce:	b082      	sub	sp, #8
 8002dd0:	af00      	add	r7, sp, #0
#ifdef EM_SWV_DEBUG
	printf("FunctionMenu Event captured\n");
 8002dd2:	480e      	ldr	r0, [pc, #56]	; (8002e0c <_FuncMenuEntryHandler+0x40>)
 8002dd4:	f009 fd1a 	bl	800c80c <puts>
#endif

	_RefreshDisplay();
 8002dd8:	f000 f9e8 	bl	80031ac <_RefreshDisplay>

	DM_ShowFuncSelectMenu(ENABLE_FUNCMENU);
 8002ddc:	2001      	movs	r0, #1
 8002dde:	f7fe f8dd 	bl	8000f9c <DM_ShowFuncSelectMenu>

	Func_Preset_Encoder_Pos_t *pFuncPresetTmp =  FuncO_GetFPresetObject();
 8002de2:	f000 fd29 	bl	8003838 <FuncO_GetFPresetObject>
 8002de6:	6078      	str	r0, [r7, #4]
	if(pFuncPresetTmp)
 8002de8:	687b      	ldr	r3, [r7, #4]
 8002dea:	2b00      	cmp	r3, #0
 8002dec:	d009      	beq.n	8002e02 <_FuncMenuEntryHandler+0x36>
	{
		ENCODER_TIMER->CNT = pFuncPresetTmp->epos;
 8002dee:	687b      	ldr	r3, [r7, #4]
 8002df0:	785a      	ldrb	r2, [r3, #1]
 8002df2:	4b07      	ldr	r3, [pc, #28]	; (8002e10 <_FuncMenuEntryHandler+0x44>)
 8002df4:	625a      	str	r2, [r3, #36]	; 0x24
		ENCODER_TIMER->ARR = FuncO_GetFuncPresetEncoderRange();
 8002df6:	f000 fd2b 	bl	8003850 <FuncO_GetFuncPresetEncoderRange>
 8002dfa:	4603      	mov	r3, r0
 8002dfc:	461a      	mov	r2, r3
 8002dfe:	4b04      	ldr	r3, [pc, #16]	; (8002e10 <_FuncMenuEntryHandler+0x44>)
 8002e00:	62da      	str	r2, [r3, #44]	; 0x2c
	}


	return Func_Menu_State;
 8002e02:	2301      	movs	r3, #1
}
 8002e04:	4618      	mov	r0, r3
 8002e06:	3708      	adds	r7, #8
 8002e08:	46bd      	mov	sp, r7
 8002e0a:	bd80      	pop	{r7, pc}
 8002e0c:	0800e930 	.word	0x0800e930
 8002e10:	40012c00 	.word	0x40012c00

08002e14 <_FuncMenuInputHandler>:
 *	@param None
 *	@retval None
 *
 */
eSystemState _FuncMenuInputHandler(void)
{
 8002e14:	b580      	push	{r7, lr}
 8002e16:	af00      	add	r7, sp, #0
#ifdef EM_SWV_DEBUG
	printf("FunctionAdjust Event captured\n");
 8002e18:	4807      	ldr	r0, [pc, #28]	; (8002e38 <_FuncMenuInputHandler+0x24>)
 8002e1a:	f009 fcf7 	bl	800c80c <puts>
#endif


	FuncO_ModifyOutput(SM_GetEncoderValue(ENCODER_REVERSE));
 8002e1e:	2001      	movs	r0, #1
 8002e20:	f000 fe76 	bl	8003b10 <SM_GetEncoderValue>
 8002e24:	4603      	mov	r3, r0
 8002e26:	4618      	mov	r0, r3
 8002e28:	f000 fc16 	bl	8003658 <FuncO_ModifyOutput>
	eNewEvent = evBlueBtn;
 8002e2c:	4b03      	ldr	r3, [pc, #12]	; (8002e3c <_FuncMenuInputHandler+0x28>)
 8002e2e:	2201      	movs	r2, #1
 8002e30:	701a      	strb	r2, [r3, #0]
	return Func_Menu_State;
 8002e32:	2301      	movs	r3, #1
}
 8002e34:	4618      	mov	r0, r3
 8002e36:	bd80      	pop	{r7, pc}
 8002e38:	0800e94c 	.word	0x0800e94c
 8002e3c:	20001419 	.word	0x20001419

08002e40 <_FuncMenuExitHandler>:
 *	@param None
 *	@retval None
 *
 */
eSystemState _FuncMenuExitHandler()
{
 8002e40:	b580      	push	{r7, lr}
 8002e42:	af00      	add	r7, sp, #0
#ifdef EM_SWV_DEBUG
	printf("ExitFuncMenu Event captured\n");
 8002e44:	4808      	ldr	r0, [pc, #32]	; (8002e68 <_FuncMenuExitHandler+0x28>)
 8002e46:	f009 fce1 	bl	800c80c <puts>
#endif

	// disable the menu

	DM_ShowFuncSelectMenu(DISABLE_FUNCMENU);
 8002e4a:	2000      	movs	r0, #0
 8002e4c:	f7fe f8a6 	bl	8000f9c <DM_ShowFuncSelectMenu>

	// reset the encoder range

	ENCODER_TIMER->ARR = 1024;
 8002e50:	4b06      	ldr	r3, [pc, #24]	; (8002e6c <_FuncMenuExitHandler+0x2c>)
 8002e52:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002e56:	62da      	str	r2, [r3, #44]	; 0x2c

	_RefreshDisplay();
 8002e58:	f000 f9a8 	bl	80031ac <_RefreshDisplay>

	eNewEvent = evIdle;
 8002e5c:	4b04      	ldr	r3, [pc, #16]	; (8002e70 <_FuncMenuExitHandler+0x30>)
 8002e5e:	2200      	movs	r2, #0
 8002e60:	701a      	strb	r2, [r3, #0]
	return Idle_State;
 8002e62:	2300      	movs	r3, #0
}
 8002e64:	4618      	mov	r0, r3
 8002e66:	bd80      	pop	{r7, pc}
 8002e68:	0800e96c 	.word	0x0800e96c
 8002e6c:	40012c00 	.word	0x40012c00
 8002e70:	20001419 	.word	0x20001419

08002e74 <_GainMenuEntryHandler>:
 *	@param None
 *	@retval None
 *
 */
eSystemState _GainMenuEntryHandler()
{
 8002e74:	b580      	push	{r7, lr}
 8002e76:	b082      	sub	sp, #8
 8002e78:	af00      	add	r7, sp, #0
#ifdef EM_SWV_DEBUG
	printf("GainMenu Event captured\n");
 8002e7a:	480e      	ldr	r0, [pc, #56]	; (8002eb4 <_GainMenuEntryHandler+0x40>)
 8002e7c:	f009 fcc6 	bl	800c80c <puts>
#endif

	_RefreshDisplay();
 8002e80:	f000 f994 	bl	80031ac <_RefreshDisplay>

	DM_ShowGainSelectMenu(ENABLE_GAINMENU);
 8002e84:	2001      	movs	r0, #1
 8002e86:	f7fe fa75 	bl	8001374 <DM_ShowGainSelectMenu>

	Gain_Preset_Encoder_Pos_t *pGainPresetTmp =  GO_GetGPresetObject();
 8002e8a:	f000 fe29 	bl	8003ae0 <GO_GetGPresetObject>
 8002e8e:	6078      	str	r0, [r7, #4]
	if(pGainPresetTmp)
 8002e90:	687b      	ldr	r3, [r7, #4]
 8002e92:	2b00      	cmp	r3, #0
 8002e94:	d009      	beq.n	8002eaa <_GainMenuEntryHandler+0x36>
	{
		ENCODER_TIMER->CNT = pGainPresetTmp->epos;
 8002e96:	687b      	ldr	r3, [r7, #4]
 8002e98:	789a      	ldrb	r2, [r3, #2]
 8002e9a:	4b07      	ldr	r3, [pc, #28]	; (8002eb8 <_GainMenuEntryHandler+0x44>)
 8002e9c:	625a      	str	r2, [r3, #36]	; 0x24
		ENCODER_TIMER->ARR = GO_GetGainPresetEncoderRange();
 8002e9e:	f000 fe2b 	bl	8003af8 <GO_GetGainPresetEncoderRange>
 8002ea2:	4603      	mov	r3, r0
 8002ea4:	461a      	mov	r2, r3
 8002ea6:	4b04      	ldr	r3, [pc, #16]	; (8002eb8 <_GainMenuEntryHandler+0x44>)
 8002ea8:	62da      	str	r2, [r3, #44]	; 0x2c
	}


	return Gain_Menu_State;
 8002eaa:	2302      	movs	r3, #2
}
 8002eac:	4618      	mov	r0, r3
 8002eae:	3708      	adds	r7, #8
 8002eb0:	46bd      	mov	sp, r7
 8002eb2:	bd80      	pop	{r7, pc}
 8002eb4:	0800e988 	.word	0x0800e988
 8002eb8:	40012c00 	.word	0x40012c00

08002ebc <_GainMenuInputHandler>:
 *	@param None
 *	@retval None
 *
 */
eSystemState _GainMenuInputHandler()
{
 8002ebc:	b580      	push	{r7, lr}
 8002ebe:	af00      	add	r7, sp, #0
#ifdef EM_SWV_DEBUG
	printf("GainSet Event captured\n");
 8002ec0:	4807      	ldr	r0, [pc, #28]	; (8002ee0 <_GainMenuInputHandler+0x24>)
 8002ec2:	f009 fca3 	bl	800c80c <puts>
#endif

	GO_ModifyOutput(SM_GetEncoderValue(ENCODER_REVERSE));
 8002ec6:	2001      	movs	r0, #1
 8002ec8:	f000 fe22 	bl	8003b10 <SM_GetEncoderValue>
 8002ecc:	4603      	mov	r3, r0
 8002ece:	4618      	mov	r0, r3
 8002ed0:	f000 fcca 	bl	8003868 <GO_ModifyOutput>

	eNewEvent = evYellowBtn;
 8002ed4:	4b03      	ldr	r3, [pc, #12]	; (8002ee4 <_GainMenuInputHandler+0x28>)
 8002ed6:	2203      	movs	r2, #3
 8002ed8:	701a      	strb	r2, [r3, #0]
	return Gain_Menu_State;
 8002eda:	2302      	movs	r3, #2
}
 8002edc:	4618      	mov	r0, r3
 8002ede:	bd80      	pop	{r7, pc}
 8002ee0:	0800e9a0 	.word	0x0800e9a0
 8002ee4:	20001419 	.word	0x20001419

08002ee8 <_GainMenuExitHandler>:
 *	@param None
 *	@retval None
 *
 */
eSystemState _GainMenuExitHandler()
{
 8002ee8:	b580      	push	{r7, lr}
 8002eea:	af00      	add	r7, sp, #0
#ifdef EM_SWV_DEBUG
	printf("ExitGainMenu Event captured\n");
 8002eec:	4806      	ldr	r0, [pc, #24]	; (8002f08 <_GainMenuExitHandler+0x20>)
 8002eee:	f009 fc8d 	bl	800c80c <puts>
#endif


	// disable the menu
	DM_ShowGainSelectMenu(DISABLE_GAINMENU);
 8002ef2:	2000      	movs	r0, #0
 8002ef4:	f7fe fa3e 	bl	8001374 <DM_ShowGainSelectMenu>

	// reset the encoder range

	//ENCODER_TIMER->ARR = 1024;

	_RefreshDisplay();
 8002ef8:	f000 f958 	bl	80031ac <_RefreshDisplay>

	eNewEvent = evIdle;
 8002efc:	4b03      	ldr	r3, [pc, #12]	; (8002f0c <_GainMenuExitHandler+0x24>)
 8002efe:	2200      	movs	r2, #0
 8002f00:	701a      	strb	r2, [r3, #0]
	return Idle_State;
 8002f02:	2300      	movs	r3, #0
}
 8002f04:	4618      	mov	r0, r3
 8002f06:	bd80      	pop	{r7, pc}
 8002f08:	0800e9b8 	.word	0x0800e9b8
 8002f0c:	20001419 	.word	0x20001419

08002f10 <_BiasMenuEntryHandler>:
 *	@param None
 *	@retval None
 *
 */
eSystemState _BiasMenuEntryHandler()
{
 8002f10:	b580      	push	{r7, lr}
 8002f12:	af00      	add	r7, sp, #0
#ifdef EM_SWV_DEBUG
	printf("BiasMenu Event captured\n");
 8002f14:	4809      	ldr	r0, [pc, #36]	; (8002f3c <_BiasMenuEntryHandler+0x2c>)
 8002f16:	f009 fc79 	bl	800c80c <puts>
#endif

	_RefreshDisplay();
 8002f1a:	f000 f947 	bl	80031ac <_RefreshDisplay>

	DM_ShowBiasSelectMenu(ENABLE_BIASMENU);
 8002f1e:	2001      	movs	r0, #1
 8002f20:	f7fe fa5c 	bl	80013dc <DM_ShowBiasSelectMenu>

	// set the rotary encoder limits to 0-20 for this menu


	ENCODER_TIMER->ARR = BIAS_MAX;
 8002f24:	4b06      	ldr	r3, [pc, #24]	; (8002f40 <_BiasMenuEntryHandler+0x30>)
 8002f26:	f44f 7248 	mov.w	r2, #800	; 0x320
 8002f2a:	62da      	str	r2, [r3, #44]	; 0x2c
	ENCODER_TIMER->CNT = BIAS_CENTER;
 8002f2c:	4b04      	ldr	r3, [pc, #16]	; (8002f40 <_BiasMenuEntryHandler+0x30>)
 8002f2e:	f44f 72c8 	mov.w	r2, #400	; 0x190
 8002f32:	625a      	str	r2, [r3, #36]	; 0x24

	return Bias_Menu_State;
 8002f34:	2307      	movs	r3, #7
}
 8002f36:	4618      	mov	r0, r3
 8002f38:	bd80      	pop	{r7, pc}
 8002f3a:	bf00      	nop
 8002f3c:	0800e9d4 	.word	0x0800e9d4
 8002f40:	40012c00 	.word	0x40012c00

08002f44 <_BiasMenuInputHandler>:
 *	@param None
 *	@retval None
 *
 */
eSystemState _BiasMenuInputHandler()
{
 8002f44:	b580      	push	{r7, lr}
 8002f46:	af00      	add	r7, sp, #0
#ifdef EM_SWV_DEBUG
	printf("BiasSet Event captured\n");
 8002f48:	4805      	ldr	r0, [pc, #20]	; (8002f60 <_BiasMenuInputHandler+0x1c>)
 8002f4a:	f009 fc5f 	bl	800c80c <puts>
#endif

	BO_ModifyOutput();
 8002f4e:	f000 f947 	bl	80031e0 <BO_ModifyOutput>

	eNewEvent = evRedBtn;
 8002f52:	4b04      	ldr	r3, [pc, #16]	; (8002f64 <_BiasMenuInputHandler+0x20>)
 8002f54:	2204      	movs	r2, #4
 8002f56:	701a      	strb	r2, [r3, #0]
	return Bias_Menu_State;
 8002f58:	2307      	movs	r3, #7
}
 8002f5a:	4618      	mov	r0, r3
 8002f5c:	bd80      	pop	{r7, pc}
 8002f5e:	bf00      	nop
 8002f60:	0800e9ec 	.word	0x0800e9ec
 8002f64:	20001419 	.word	0x20001419

08002f68 <_BiasMenuExitHandler>:
 *	@param None
 *	@retval None
 *
 */
eSystemState _BiasMenuExitHandler()
{
 8002f68:	b580      	push	{r7, lr}
 8002f6a:	af00      	add	r7, sp, #0
#ifdef EM_SWV_DEBUG
	printf("ExitBiasMenu Event captured\n");
 8002f6c:	4808      	ldr	r0, [pc, #32]	; (8002f90 <_BiasMenuExitHandler+0x28>)
 8002f6e:	f009 fc4d 	bl	800c80c <puts>
#endif


	// disable the menu
	DM_ShowBiasSelectMenu(DISABLE_BIASMENU);
 8002f72:	2000      	movs	r0, #0
 8002f74:	f7fe fa32 	bl	80013dc <DM_ShowBiasSelectMenu>

	// reset the encoder range

	ENCODER_TIMER->ARR = 1024;
 8002f78:	4b06      	ldr	r3, [pc, #24]	; (8002f94 <_BiasMenuExitHandler+0x2c>)
 8002f7a:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002f7e:	62da      	str	r2, [r3, #44]	; 0x2c

	_RefreshDisplay();
 8002f80:	f000 f914 	bl	80031ac <_RefreshDisplay>

	eNewEvent = evIdle;
 8002f84:	4b04      	ldr	r3, [pc, #16]	; (8002f98 <_BiasMenuExitHandler+0x30>)
 8002f86:	2200      	movs	r2, #0
 8002f88:	701a      	strb	r2, [r3, #0]
	return Idle_State;
 8002f8a:	2300      	movs	r3, #0
}
 8002f8c:	4618      	mov	r0, r3
 8002f8e:	bd80      	pop	{r7, pc}
 8002f90:	0800ea04 	.word	0x0800ea04
 8002f94:	40012c00 	.word	0x40012c00
 8002f98:	20001419 	.word	0x20001419

08002f9c <_FreqMainMenuEntryHandler>:
 *	@param None
 *	@retval None
 *
 */
eSystemState _FreqMainMenuEntryHandler()
{
 8002f9c:	b580      	push	{r7, lr}
 8002f9e:	af00      	add	r7, sp, #0
#ifdef EM_SWV_DEBUG
	printf("FreqMenu Event captured\n");
 8002fa0:	4806      	ldr	r0, [pc, #24]	; (8002fbc <_FreqMainMenuEntryHandler+0x20>)
 8002fa2:	f009 fc33 	bl	800c80c <puts>
#endif

	_RefreshDisplay();
 8002fa6:	f000 f901 	bl	80031ac <_RefreshDisplay>

	DM_ShowFreqMenu(ENABLE_FREQ_MAIN_MENU);
 8002faa:	2001      	movs	r0, #1
 8002fac:	f7fe fa06 	bl	80013bc <DM_ShowFreqMenu>
	// set the rotary encoder limits to 0-? for this menu
//	ENCODER_TIMER->CNT = 0;
//	ENCODER_TIMER->ARR = 56;

	// stay in this state
	eNewEvent = evIdle;
 8002fb0:	4b03      	ldr	r3, [pc, #12]	; (8002fc0 <_FreqMainMenuEntryHandler+0x24>)
 8002fb2:	2200      	movs	r2, #0
 8002fb4:	701a      	strb	r2, [r3, #0]
	return Freq_Main_Menu_State;
 8002fb6:	2303      	movs	r3, #3
}
 8002fb8:	4618      	mov	r0, r3
 8002fba:	bd80      	pop	{r7, pc}
 8002fbc:	0800ea20 	.word	0x0800ea20
 8002fc0:	20001419 	.word	0x20001419

08002fc4 <_FreqMainMenuExitHandler>:
 *	@param None
 *	@retval None
 *
 */
eSystemState _FreqMainMenuExitHandler()
{
 8002fc4:	b580      	push	{r7, lr}
 8002fc6:	af00      	add	r7, sp, #0
#ifdef EM_SWV_DEBUG
	printf("Exit Freq Main Menu Event captured\n");
 8002fc8:	4808      	ldr	r0, [pc, #32]	; (8002fec <_FreqMainMenuExitHandler+0x28>)
 8002fca:	f009 fc1f 	bl	800c80c <puts>
#endif


	// disable the menu
	DM_ShowFreqMenu(DISABLE_FREQ_MENU);
 8002fce:	2000      	movs	r0, #0
 8002fd0:	f7fe f9f4 	bl	80013bc <DM_ShowFreqMenu>

	// reset the encoder range

	ENCODER_TIMER->ARR = 1024;
 8002fd4:	4b06      	ldr	r3, [pc, #24]	; (8002ff0 <_FreqMainMenuExitHandler+0x2c>)
 8002fd6:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002fda:	62da      	str	r2, [r3, #44]	; 0x2c

	_RefreshDisplay();
 8002fdc:	f000 f8e6 	bl	80031ac <_RefreshDisplay>

	eNewEvent = evIdle;
 8002fe0:	4b04      	ldr	r3, [pc, #16]	; (8002ff4 <_FreqMainMenuExitHandler+0x30>)
 8002fe2:	2200      	movs	r2, #0
 8002fe4:	701a      	strb	r2, [r3, #0]
	return Idle_State;
 8002fe6:	2300      	movs	r3, #0
}
 8002fe8:	4618      	mov	r0, r3
 8002fea:	bd80      	pop	{r7, pc}
 8002fec:	0800ea50 	.word	0x0800ea50
 8002ff0:	40012c00 	.word	0x40012c00
 8002ff4:	20001419 	.word	0x20001419

08002ff8 <_FreqPresetMenuEntryHandler>:
 *	@param None
 *	@retval None
 *
 */
eSystemState _FreqPresetMenuEntryHandler()
{
 8002ff8:	b580      	push	{r7, lr}
 8002ffa:	b082      	sub	sp, #8
 8002ffc:	af00      	add	r7, sp, #0
#ifdef EM_SWV_DEBUG
	printf("Freq Preset Menu Entry Event captured\n");
 8002ffe:	4810      	ldr	r0, [pc, #64]	; (8003040 <_FreqPresetMenuEntryHandler+0x48>)
 8003000:	f009 fc04 	bl	800c80c <puts>
#endif

	_RefreshDisplay();
 8003004:	f000 f8d2 	bl	80031ac <_RefreshDisplay>

	DM_ShowFreqMenu(ENABLE_FREQ_PRESET_MENU);
 8003008:	2002      	movs	r0, #2
 800300a:	f7fe f9d7 	bl	80013bc <DM_ShowFreqMenu>

	Freq_Preset_Encoder_Pos_t *pFreqPresetTmp =  FreqO_GetFPresetObject();
 800300e:	f000 fadd 	bl	80035cc <FreqO_GetFPresetObject>
 8003012:	6078      	str	r0, [r7, #4]
	if(pFreqPresetTmp)
 8003014:	687b      	ldr	r3, [r7, #4]
 8003016:	2b00      	cmp	r3, #0
 8003018:	d009      	beq.n	800302e <_FreqPresetMenuEntryHandler+0x36>
	{
		ENCODER_TIMER->CNT = pFreqPresetTmp->epos;
 800301a:	687b      	ldr	r3, [r7, #4]
 800301c:	791a      	ldrb	r2, [r3, #4]
 800301e:	4b09      	ldr	r3, [pc, #36]	; (8003044 <_FreqPresetMenuEntryHandler+0x4c>)
 8003020:	625a      	str	r2, [r3, #36]	; 0x24
		ENCODER_TIMER->ARR = FreqO_GetFreqPresetEncoderRange();
 8003022:	f000 fb01 	bl	8003628 <FreqO_GetFreqPresetEncoderRange>
 8003026:	4603      	mov	r3, r0
 8003028:	461a      	mov	r2, r3
 800302a:	4b06      	ldr	r3, [pc, #24]	; (8003044 <_FreqPresetMenuEntryHandler+0x4c>)
 800302c:	62da      	str	r2, [r3, #44]	; 0x2c
	}


	// stay in this state
	eNewEvent = evIdle;
 800302e:	4b06      	ldr	r3, [pc, #24]	; (8003048 <_FreqPresetMenuEntryHandler+0x50>)
 8003030:	2200      	movs	r2, #0
 8003032:	701a      	strb	r2, [r3, #0]
	return Freq_Preset_Menu_State;
 8003034:	2304      	movs	r3, #4
}
 8003036:	4618      	mov	r0, r3
 8003038:	3708      	adds	r7, #8
 800303a:	46bd      	mov	sp, r7
 800303c:	bd80      	pop	{r7, pc}
 800303e:	bf00      	nop
 8003040:	0800ea74 	.word	0x0800ea74
 8003044:	40012c00 	.word	0x40012c00
 8003048:	20001419 	.word	0x20001419

0800304c <_FreqPresetMenuInputHandler>:
 *	@param None
 *	@retval None
 *
 */
eSystemState _FreqPresetMenuInputHandler()
{
 800304c:	b580      	push	{r7, lr}
 800304e:	af00      	add	r7, sp, #0
#ifdef EM_SWV_DEBUG
	printf("FreqSet Event captured\n");
 8003050:	4807      	ldr	r0, [pc, #28]	; (8003070 <_FreqPresetMenuInputHandler+0x24>)
 8003052:	f009 fbdb 	bl	800c80c <puts>
#endif

	FreqO_ModifyOutput(SM_GetEncoderValue(ENCODER_REVERSE));
 8003056:	2001      	movs	r0, #1
 8003058:	f000 fd5a 	bl	8003b10 <SM_GetEncoderValue>
 800305c:	4603      	mov	r3, r0
 800305e:	4618      	mov	r0, r3
 8003060:	f000 f9c8 	bl	80033f4 <FreqO_ModifyOutput>

	// stay in this state
	eNewEvent = evIdle;
 8003064:	4b03      	ldr	r3, [pc, #12]	; (8003074 <_FreqPresetMenuInputHandler+0x28>)
 8003066:	2200      	movs	r2, #0
 8003068:	701a      	strb	r2, [r3, #0]
	return Freq_Preset_Menu_State;
 800306a:	2304      	movs	r3, #4
}
 800306c:	4618      	mov	r0, r3
 800306e:	bd80      	pop	{r7, pc}
 8003070:	0800ea38 	.word	0x0800ea38
 8003074:	20001419 	.word	0x20001419

08003078 <_FreqPresetMenuExitHandler>:
 *	@param None
 *	@retval None
 *
 */
eSystemState _FreqPresetMenuExitHandler()
{
 8003078:	b580      	push	{r7, lr}
 800307a:	af00      	add	r7, sp, #0
#ifdef EM_SWV_DEBUG
	printf("Exit Freq Menu Event captured\n");
 800307c:	4805      	ldr	r0, [pc, #20]	; (8003094 <_FreqPresetMenuExitHandler+0x1c>)
 800307e:	f009 fbc5 	bl	800c80c <puts>
#endif


	// disable the menu
	DM_ShowFreqMenu(DISABLE_FREQ_MENU);
 8003082:	2000      	movs	r0, #0
 8003084:	f7fe f99a 	bl	80013bc <DM_ShowFreqMenu>
	// reset the encoder range

	//ENCODER_TIMER->ARR = 1024;

	// back to main freq menu
	eNewEvent = evGreenBtn;
 8003088:	4b03      	ldr	r3, [pc, #12]	; (8003098 <_FreqPresetMenuExitHandler+0x20>)
 800308a:	2202      	movs	r2, #2
 800308c:	701a      	strb	r2, [r3, #0]
	return Idle_State;
 800308e:	2300      	movs	r3, #0
}
 8003090:	4618      	mov	r0, r3
 8003092:	bd80      	pop	{r7, pc}
 8003094:	0800ea9c 	.word	0x0800ea9c
 8003098:	20001419 	.word	0x20001419

0800309c <_FreqAdjustMenuEntryHandler>:
 *	@param None
 *	@retval None
 *
 */
eSystemState _FreqAdjustMenuEntryHandler()
{
 800309c:	b580      	push	{r7, lr}
 800309e:	af00      	add	r7, sp, #0
#ifdef EM_SWV_DEBUG
	printf("Freq Adjust Menu Event captured\n");
 80030a0:	480a      	ldr	r0, [pc, #40]	; (80030cc <_FreqAdjustMenuEntryHandler+0x30>)
 80030a2:	f009 fbb3 	bl	800c80c <puts>
#endif

	_RefreshDisplay();
 80030a6:	f000 f881 	bl	80031ac <_RefreshDisplay>

	DM_ShowFreqMenu(ENABLE_FREQ_ADJUST_MENU);
 80030aa:	2003      	movs	r0, #3
 80030ac:	f7fe f986 	bl	80013bc <DM_ShowFreqMenu>

	// set the rotary encoder limits to 0-? for this menu
	ENCODER_TIMER->CNT = TIM8->ARR;
 80030b0:	4b07      	ldr	r3, [pc, #28]	; (80030d0 <_FreqAdjustMenuEntryHandler+0x34>)
 80030b2:	4a08      	ldr	r2, [pc, #32]	; (80030d4 <_FreqAdjustMenuEntryHandler+0x38>)
 80030b4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80030b6:	6253      	str	r3, [r2, #36]	; 0x24
	ENCODER_TIMER->ARR = 65535;
 80030b8:	4b06      	ldr	r3, [pc, #24]	; (80030d4 <_FreqAdjustMenuEntryHandler+0x38>)
 80030ba:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80030be:	62da      	str	r2, [r3, #44]	; 0x2c

	// stay in this state
	eNewEvent = evIdle;
 80030c0:	4b05      	ldr	r3, [pc, #20]	; (80030d8 <_FreqAdjustMenuEntryHandler+0x3c>)
 80030c2:	2200      	movs	r2, #0
 80030c4:	701a      	strb	r2, [r3, #0]
	return Freq_Adjust_Menu_State;
 80030c6:	2305      	movs	r3, #5
}
 80030c8:	4618      	mov	r0, r3
 80030ca:	bd80      	pop	{r7, pc}
 80030cc:	0800eabc 	.word	0x0800eabc
 80030d0:	40013400 	.word	0x40013400
 80030d4:	40012c00 	.word	0x40012c00
 80030d8:	20001419 	.word	0x20001419

080030dc <_FreqAdjustMenuInputHandler>:
 *	@param None
 *	@retval None
 *
 */
eSystemState _FreqAdjustMenuInputHandler()
{
 80030dc:	b580      	push	{r7, lr}
 80030de:	af00      	add	r7, sp, #0
#ifdef EM_SWV_DEBUG
	printf("FreqSet Event captured\n");
 80030e0:	4805      	ldr	r0, [pc, #20]	; (80030f8 <_FreqAdjustMenuInputHandler+0x1c>)
 80030e2:	f009 fb93 	bl	800c80c <puts>
#endif

	FreqO_AdjustFreq();
 80030e6:	f000 f977 	bl	80033d8 <FreqO_AdjustFreq>

	// stay in this state
	eNewEvent = evIdle;
 80030ea:	4b04      	ldr	r3, [pc, #16]	; (80030fc <_FreqAdjustMenuInputHandler+0x20>)
 80030ec:	2200      	movs	r2, #0
 80030ee:	701a      	strb	r2, [r3, #0]
	return Freq_Adjust_Menu_State;
 80030f0:	2305      	movs	r3, #5
}
 80030f2:	4618      	mov	r0, r3
 80030f4:	bd80      	pop	{r7, pc}
 80030f6:	bf00      	nop
 80030f8:	0800ea38 	.word	0x0800ea38
 80030fc:	20001419 	.word	0x20001419

08003100 <_FreqAdjustMenuExitHandler>:
 *	@param None
 *	@retval None
 *
 */
eSystemState _FreqAdjustMenuExitHandler()
{
 8003100:	b580      	push	{r7, lr}
 8003102:	af00      	add	r7, sp, #0
#ifdef EM_SWV_DEBUG
	printf("Exit Freq Adjust Menu Exit Event captured\n");
 8003104:	4805      	ldr	r0, [pc, #20]	; (800311c <_FreqAdjustMenuExitHandler+0x1c>)
 8003106:	f009 fb81 	bl	800c80c <puts>
#endif


	// disable the menu
	DM_ShowFreqMenu(DISABLE_FREQ_MENU);
 800310a:	2000      	movs	r0, #0
 800310c:	f7fe f956 	bl	80013bc <DM_ShowFreqMenu>
	// reset the encoder range

	//ENCODER_TIMER->ARR = 1024;

	// back to main freq menu
	eNewEvent = evGreenBtn;
 8003110:	4b03      	ldr	r3, [pc, #12]	; (8003120 <_FreqAdjustMenuExitHandler+0x20>)
 8003112:	2202      	movs	r2, #2
 8003114:	701a      	strb	r2, [r3, #0]
	return Idle_State;
 8003116:	2300      	movs	r3, #0
}
 8003118:	4618      	mov	r0, r3
 800311a:	bd80      	pop	{r7, pc}
 800311c:	0800eadc 	.word	0x0800eadc
 8003120:	20001419 	.word	0x20001419

08003124 <_FreqSweepMenuEntryHandler>:
 *	@param None
 *	@retval None
 *
 */
eSystemState _FreqSweepMenuEntryHandler()
{
 8003124:	b580      	push	{r7, lr}
 8003126:	af00      	add	r7, sp, #0
#ifdef EM_SWV_DEBUG
	printf("Freq Sweep Menu Event captured\n");
 8003128:	4809      	ldr	r0, [pc, #36]	; (8003150 <_FreqSweepMenuEntryHandler+0x2c>)
 800312a:	f009 fb6f 	bl	800c80c <puts>
#endif

	_RefreshDisplay();
 800312e:	f000 f83d 	bl	80031ac <_RefreshDisplay>

	DM_ShowFreqMenu(ENABLE_FREQ_SWEEP_MENU);
 8003132:	2004      	movs	r0, #4
 8003134:	f7fe f942 	bl	80013bc <DM_ShowFreqMenu>

	// set the rotary encoder limits to 0-? for this menu
	ENCODER_TIMER->CNT = 0;
 8003138:	4b06      	ldr	r3, [pc, #24]	; (8003154 <_FreqSweepMenuEntryHandler+0x30>)
 800313a:	2200      	movs	r2, #0
 800313c:	625a      	str	r2, [r3, #36]	; 0x24
	ENCODER_TIMER->ARR = 56;
 800313e:	4b05      	ldr	r3, [pc, #20]	; (8003154 <_FreqSweepMenuEntryHandler+0x30>)
 8003140:	2238      	movs	r2, #56	; 0x38
 8003142:	62da      	str	r2, [r3, #44]	; 0x2c

	// stay in this state
	eNewEvent = evIdle;
 8003144:	4b04      	ldr	r3, [pc, #16]	; (8003158 <_FreqSweepMenuEntryHandler+0x34>)
 8003146:	2200      	movs	r2, #0
 8003148:	701a      	strb	r2, [r3, #0]
	return Freq_Sweep_Menu_State;
 800314a:	2306      	movs	r3, #6
}
 800314c:	4618      	mov	r0, r3
 800314e:	bd80      	pop	{r7, pc}
 8003150:	0800eb08 	.word	0x0800eb08
 8003154:	40012c00 	.word	0x40012c00
 8003158:	20001419 	.word	0x20001419

0800315c <_FreqSweepMenuExitHandler>:
 *	@param None
 *	@retval None
 *
 */
eSystemState _FreqSweepMenuExitHandler()
{
 800315c:	b580      	push	{r7, lr}
 800315e:	af00      	add	r7, sp, #0
#ifdef EM_SWV_DEBUG
	printf("Exit Freq Sweep Menu Exit Event captured\n");
 8003160:	4807      	ldr	r0, [pc, #28]	; (8003180 <_FreqSweepMenuExitHandler+0x24>)
 8003162:	f009 fb53 	bl	800c80c <puts>
#endif


	// disable the menu
	DM_ShowFreqMenu(DISABLE_FREQ_MENU);
 8003166:	2000      	movs	r0, #0
 8003168:	f7fe f928 	bl	80013bc <DM_ShowFreqMenu>

	// reset the encoder range

	ENCODER_TIMER->ARR = 1024;
 800316c:	4b05      	ldr	r3, [pc, #20]	; (8003184 <_FreqSweepMenuExitHandler+0x28>)
 800316e:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8003172:	62da      	str	r2, [r3, #44]	; 0x2c

	// back to main freq menu
	eNewEvent = evGreenBtn;
 8003174:	4b04      	ldr	r3, [pc, #16]	; (8003188 <_FreqSweepMenuExitHandler+0x2c>)
 8003176:	2202      	movs	r2, #2
 8003178:	701a      	strb	r2, [r3, #0]
	return Idle_State;
 800317a:	2300      	movs	r3, #0
}
 800317c:	4618      	mov	r0, r3
 800317e:	bd80      	pop	{r7, pc}
 8003180:	0800eb28 	.word	0x0800eb28
 8003184:	40012c00 	.word	0x40012c00
 8003188:	20001419 	.word	0x20001419

0800318c <EM_SetNewEvent>:
 *	@param None
 *	@retval None
 *
 */
void EM_SetNewEvent(eSystemEvent pEvent)
{
 800318c:	b480      	push	{r7}
 800318e:	b083      	sub	sp, #12
 8003190:	af00      	add	r7, sp, #0
 8003192:	4603      	mov	r3, r0
 8003194:	71fb      	strb	r3, [r7, #7]
	eNewEvent = pEvent;
 8003196:	4a04      	ldr	r2, [pc, #16]	; (80031a8 <EM_SetNewEvent+0x1c>)
 8003198:	79fb      	ldrb	r3, [r7, #7]
 800319a:	7013      	strb	r3, [r2, #0]
}
 800319c:	bf00      	nop
 800319e:	370c      	adds	r7, #12
 80031a0:	46bd      	mov	sp, r7
 80031a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031a6:	4770      	bx	lr
 80031a8:	20001419 	.word	0x20001419

080031ac <_RefreshDisplay>:
 *	@param None
 *	@retval None
 *
 */
void _RefreshDisplay()
{
 80031ac:	b580      	push	{r7, lr}
 80031ae:	af00      	add	r7, sp, #0
	// don't let the DisplayManager interrupt the LCD refresh
	HAL_TIM_Base_Stop_IT(&htim15);
 80031b0:	4804      	ldr	r0, [pc, #16]	; (80031c4 <_RefreshDisplay+0x18>)
 80031b2:	f006 fbff 	bl	80099b4 <HAL_TIM_Base_Stop_IT>
	{
		DM_RefreshBackgroundLayout();
 80031b6:	f7fe f95f 	bl	8001478 <DM_RefreshBackgroundLayout>
	}
	HAL_TIM_Base_Start_IT(&htim15);
 80031ba:	4802      	ldr	r0, [pc, #8]	; (80031c4 <_RefreshDisplay+0x18>)
 80031bc:	f006 fbc4 	bl	8009948 <HAL_TIM_Base_Start_IT>
}
 80031c0:	bf00      	nop
 80031c2:	bd80      	pop	{r7, pc}
 80031c4:	200016c4 	.word	0x200016c4

080031c8 <BO_GetBiasPolarity>:
 *	@param None
 *	@retval None
 *
 */
eBias_Polarity BO_GetBiasPolarity()
{
 80031c8:	b480      	push	{r7}
 80031ca:	af00      	add	r7, sp, #0
	return eBiasPolarity;
 80031cc:	4b03      	ldr	r3, [pc, #12]	; (80031dc <BO_GetBiasPolarity+0x14>)
 80031ce:	781b      	ldrb	r3, [r3, #0]
}
 80031d0:	4618      	mov	r0, r3
 80031d2:	46bd      	mov	sp, r7
 80031d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031d8:	4770      	bx	lr
 80031da:	bf00      	nop
 80031dc:	20000008 	.word	0x20000008

080031e0 <BO_ModifyOutput>:
 *	@param None
 *	@retval None
 *
 */
void BO_ModifyOutput()
{
 80031e0:	b580      	push	{r7, lr}
 80031e2:	af00      	add	r7, sp, #0
	// apply negative dc bias
	if(SM_GetEncoderValue(ENCODER_REVERSE) < BIAS_CENTER) {
 80031e4:	2001      	movs	r0, #1
 80031e6:	f000 fc93 	bl	8003b10 <SM_GetEncoderValue>
 80031ea:	4603      	mov	r3, r0
 80031ec:	f5b3 7fc8 	cmp.w	r3, #400	; 0x190
 80031f0:	d217      	bcs.n	8003222 <BO_ModifyOutput+0x42>

		eBiasPolarity = INVERSEBIAS;
 80031f2:	4b1c      	ldr	r3, [pc, #112]	; (8003264 <BO_ModifyOutput+0x84>)
 80031f4:	2200      	movs	r2, #0
 80031f6:	701a      	strb	r2, [r3, #0]

		HAL_DAC_SetValue(	&hdac1,
							DAC1_CHANNEL_2,
							DAC_ALIGN_12B_R,
							(BIAS_CENTER - SM_GetEncoderValue(ENCODER_REVERSE)) * BIAS_MAG);
 80031f8:	2001      	movs	r0, #1
 80031fa:	f000 fc89 	bl	8003b10 <SM_GetEncoderValue>
 80031fe:	4603      	mov	r3, r0
 8003200:	f5c3 72c8 	rsb	r2, r3, #400	; 0x190
 8003204:	4613      	mov	r3, r2
 8003206:	009b      	lsls	r3, r3, #2
 8003208:	4413      	add	r3, r2
 800320a:	005b      	lsls	r3, r3, #1
		HAL_DAC_SetValue(	&hdac1,
 800320c:	2200      	movs	r2, #0
 800320e:	2110      	movs	r1, #16
 8003210:	4815      	ldr	r0, [pc, #84]	; (8003268 <BO_ModifyOutput+0x88>)
 8003212:	f004 f919 	bl	8007448 <HAL_DAC_SetValue>

		HAL_GPIO_WritePin(	DCBIAS_INVERT_GPIO_Port,
 8003216:	2201      	movs	r2, #1
 8003218:	2108      	movs	r1, #8
 800321a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800321e:	f004 ffe9 	bl	80081f4 <HAL_GPIO_WritePin>
							DCBIAS_INVERT_Pin,
							GPIO_PIN_SET);
	}
	// apply positive dc bias
	if(SM_GetEncoderValue(ENCODER_REVERSE) >= BIAS_CENTER) {
 8003222:	2001      	movs	r0, #1
 8003224:	f000 fc74 	bl	8003b10 <SM_GetEncoderValue>
 8003228:	4603      	mov	r3, r0
 800322a:	f5b3 7fc8 	cmp.w	r3, #400	; 0x190
 800322e:	d317      	bcc.n	8003260 <BO_ModifyOutput+0x80>

		eBiasPolarity = NORMALBIAS;
 8003230:	4b0c      	ldr	r3, [pc, #48]	; (8003264 <BO_ModifyOutput+0x84>)
 8003232:	2201      	movs	r2, #1
 8003234:	701a      	strb	r2, [r3, #0]

		HAL_DAC_SetValue(	&hdac1,
							DAC1_CHANNEL_2,
							DAC_ALIGN_12B_R,
							(SM_GetEncoderValue(ENCODER_REVERSE) - BIAS_CENTER) * BIAS_MAG);
 8003236:	2001      	movs	r0, #1
 8003238:	f000 fc6a 	bl	8003b10 <SM_GetEncoderValue>
 800323c:	4603      	mov	r3, r0
 800323e:	f5a3 72c8 	sub.w	r2, r3, #400	; 0x190
 8003242:	4613      	mov	r3, r2
 8003244:	009b      	lsls	r3, r3, #2
 8003246:	4413      	add	r3, r2
 8003248:	005b      	lsls	r3, r3, #1
		HAL_DAC_SetValue(	&hdac1,
 800324a:	2200      	movs	r2, #0
 800324c:	2110      	movs	r1, #16
 800324e:	4806      	ldr	r0, [pc, #24]	; (8003268 <BO_ModifyOutput+0x88>)
 8003250:	f004 f8fa 	bl	8007448 <HAL_DAC_SetValue>

		HAL_GPIO_WritePin(	DCBIAS_INVERT_GPIO_Port,
 8003254:	2200      	movs	r2, #0
 8003256:	2108      	movs	r1, #8
 8003258:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800325c:	f004 ffca 	bl	80081f4 <HAL_GPIO_WritePin>
							DCBIAS_INVERT_Pin,
							GPIO_PIN_RESET);
	}
}
 8003260:	bf00      	nop
 8003262:	bd80      	pop	{r7, pc}
 8003264:	20000008 	.word	0x20000008
 8003268:	20001540 	.word	0x20001540

0800326c <BO_GetOutputBias>:
 *	@param None
 *	@retval None
 *
 */
uint32_t BO_GetOutputBias()
{
 800326c:	b580      	push	{r7, lr}
 800326e:	af00      	add	r7, sp, #0
	return HAL_DAC_GetValue(&hdac1, DAC1_CHANNEL_2);
 8003270:	2110      	movs	r1, #16
 8003272:	4803      	ldr	r0, [pc, #12]	; (8003280 <BO_GetOutputBias+0x14>)
 8003274:	f004 f924 	bl	80074c0 <HAL_DAC_GetValue>
 8003278:	4603      	mov	r3, r0
}
 800327a:	4618      	mov	r0, r3
 800327c:	bd80      	pop	{r7, pc}
 800327e:	bf00      	nop
 8003280:	20001540 	.word	0x20001540

08003284 <DT_InitRegister>:
 *	@param None
 *	@retval None
 *
 */
void DT_InitRegister()
{
 8003284:	b480      	push	{r7}
 8003286:	b083      	sub	sp, #12
 8003288:	af00      	add	r7, sp, #0
	for(int i = 0; i < MAX_DAC_TIMER_SETTINGS; i++)
 800328a:	2300      	movs	r3, #0
 800328c:	607b      	str	r3, [r7, #4]
 800328e:	e06b      	b.n	8003368 <DT_InitRegister+0xe4>
	{
		// prevent divide by zero (prescaler)
		if(DacTimerReg[i].psc == 0)
 8003290:	493a      	ldr	r1, [pc, #232]	; (800337c <DT_InitRegister+0xf8>)
 8003292:	687a      	ldr	r2, [r7, #4]
 8003294:	4613      	mov	r3, r2
 8003296:	009b      	lsls	r3, r3, #2
 8003298:	4413      	add	r3, r2
 800329a:	009b      	lsls	r3, r3, #2
 800329c:	440b      	add	r3, r1
 800329e:	3308      	adds	r3, #8
 80032a0:	681b      	ldr	r3, [r3, #0]
 80032a2:	2b00      	cmp	r3, #0
 80032a4:	d129      	bne.n	80032fa <DT_InitRegister+0x76>
			DacTimerReg[i].arr = ((SM_MCLK / DacTimerReg[i].hertz) / SM_FSAMP) * DacTimerReg[i].error;
 80032a6:	4935      	ldr	r1, [pc, #212]	; (800337c <DT_InitRegister+0xf8>)
 80032a8:	687a      	ldr	r2, [r7, #4]
 80032aa:	4613      	mov	r3, r2
 80032ac:	009b      	lsls	r3, r3, #2
 80032ae:	4413      	add	r3, r2
 80032b0:	009b      	lsls	r3, r3, #2
 80032b2:	440b      	add	r3, r1
 80032b4:	3304      	adds	r3, #4
 80032b6:	681b      	ldr	r3, [r3, #0]
 80032b8:	4a31      	ldr	r2, [pc, #196]	; (8003380 <DT_InitRegister+0xfc>)
 80032ba:	fbb2 f3f3 	udiv	r3, r2, r3
 80032be:	ee07 3a90 	vmov	s15, r3
 80032c2:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80032c6:	492d      	ldr	r1, [pc, #180]	; (800337c <DT_InitRegister+0xf8>)
 80032c8:	687a      	ldr	r2, [r7, #4]
 80032ca:	4613      	mov	r3, r2
 80032cc:	009b      	lsls	r3, r3, #2
 80032ce:	4413      	add	r3, r2
 80032d0:	009b      	lsls	r3, r3, #2
 80032d2:	440b      	add	r3, r1
 80032d4:	3310      	adds	r3, #16
 80032d6:	edd3 7a00 	vldr	s15, [r3]
 80032da:	ee67 7a27 	vmul.f32	s15, s14, s15
 80032de:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80032e2:	ee17 0a90 	vmov	r0, s15
 80032e6:	4925      	ldr	r1, [pc, #148]	; (800337c <DT_InitRegister+0xf8>)
 80032e8:	687a      	ldr	r2, [r7, #4]
 80032ea:	4613      	mov	r3, r2
 80032ec:	009b      	lsls	r3, r3, #2
 80032ee:	4413      	add	r3, r2
 80032f0:	009b      	lsls	r3, r3, #2
 80032f2:	440b      	add	r3, r1
 80032f4:	330c      	adds	r3, #12
 80032f6:	6018      	str	r0, [r3, #0]
 80032f8:	e033      	b.n	8003362 <DT_InitRegister+0xde>
		else
			DacTimerReg[i].arr = (((SM_MCLK / DacTimerReg[i].hertz) / DacTimerReg[i].psc) / SM_FSAMP) * DacTimerReg[i].error;
 80032fa:	4920      	ldr	r1, [pc, #128]	; (800337c <DT_InitRegister+0xf8>)
 80032fc:	687a      	ldr	r2, [r7, #4]
 80032fe:	4613      	mov	r3, r2
 8003300:	009b      	lsls	r3, r3, #2
 8003302:	4413      	add	r3, r2
 8003304:	009b      	lsls	r3, r3, #2
 8003306:	440b      	add	r3, r1
 8003308:	3304      	adds	r3, #4
 800330a:	681b      	ldr	r3, [r3, #0]
 800330c:	4a1c      	ldr	r2, [pc, #112]	; (8003380 <DT_InitRegister+0xfc>)
 800330e:	fbb2 f1f3 	udiv	r1, r2, r3
 8003312:	481a      	ldr	r0, [pc, #104]	; (800337c <DT_InitRegister+0xf8>)
 8003314:	687a      	ldr	r2, [r7, #4]
 8003316:	4613      	mov	r3, r2
 8003318:	009b      	lsls	r3, r3, #2
 800331a:	4413      	add	r3, r2
 800331c:	009b      	lsls	r3, r3, #2
 800331e:	4403      	add	r3, r0
 8003320:	3308      	adds	r3, #8
 8003322:	681b      	ldr	r3, [r3, #0]
 8003324:	fbb1 f3f3 	udiv	r3, r1, r3
 8003328:	ee07 3a90 	vmov	s15, r3
 800332c:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8003330:	4912      	ldr	r1, [pc, #72]	; (800337c <DT_InitRegister+0xf8>)
 8003332:	687a      	ldr	r2, [r7, #4]
 8003334:	4613      	mov	r3, r2
 8003336:	009b      	lsls	r3, r3, #2
 8003338:	4413      	add	r3, r2
 800333a:	009b      	lsls	r3, r3, #2
 800333c:	440b      	add	r3, r1
 800333e:	3310      	adds	r3, #16
 8003340:	edd3 7a00 	vldr	s15, [r3]
 8003344:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003348:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800334c:	ee17 0a90 	vmov	r0, s15
 8003350:	490a      	ldr	r1, [pc, #40]	; (800337c <DT_InitRegister+0xf8>)
 8003352:	687a      	ldr	r2, [r7, #4]
 8003354:	4613      	mov	r3, r2
 8003356:	009b      	lsls	r3, r3, #2
 8003358:	4413      	add	r3, r2
 800335a:	009b      	lsls	r3, r3, #2
 800335c:	440b      	add	r3, r1
 800335e:	330c      	adds	r3, #12
 8003360:	6018      	str	r0, [r3, #0]
	for(int i = 0; i < MAX_DAC_TIMER_SETTINGS; i++)
 8003362:	687b      	ldr	r3, [r7, #4]
 8003364:	3301      	adds	r3, #1
 8003366:	607b      	str	r3, [r7, #4]
 8003368:	687b      	ldr	r3, [r7, #4]
 800336a:	2b0d      	cmp	r3, #13
 800336c:	dd90      	ble.n	8003290 <DT_InitRegister+0xc>
	}
}
 800336e:	bf00      	nop
 8003370:	370c      	adds	r7, #12
 8003372:	46bd      	mov	sp, r7
 8003374:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003378:	4770      	bx	lr
 800337a:	bf00      	nop
 800337c:	2000000c 	.word	0x2000000c
 8003380:	00155cc0 	.word	0x00155cc0

08003384 <DT_GetRegisterByEnum>:
 *	@param pEnum Enummeration (eFreq_Preset) search criteria. Not an index
 *	@retval Pointer to the found DacTimeReg_t struct. Null if no result!
 *
 */
DacTimeReg_t* DT_GetRegisterByEnum(eFreq_Preset pEnum)
{
 8003384:	b480      	push	{r7}
 8003386:	b085      	sub	sp, #20
 8003388:	af00      	add	r7, sp, #0
 800338a:	6078      	str	r0, [r7, #4]
	for(int i = 0; i < MAX_DAC_TIMER_SETTINGS; i++)
 800338c:	2300      	movs	r3, #0
 800338e:	60fb      	str	r3, [r7, #12]
 8003390:	e016      	b.n	80033c0 <DT_GetRegisterByEnum+0x3c>
		if(DacTimerReg[i].hertz == pEnum)
 8003392:	4910      	ldr	r1, [pc, #64]	; (80033d4 <DT_GetRegisterByEnum+0x50>)
 8003394:	68fa      	ldr	r2, [r7, #12]
 8003396:	4613      	mov	r3, r2
 8003398:	009b      	lsls	r3, r3, #2
 800339a:	4413      	add	r3, r2
 800339c:	009b      	lsls	r3, r3, #2
 800339e:	440b      	add	r3, r1
 80033a0:	3304      	adds	r3, #4
 80033a2:	681b      	ldr	r3, [r3, #0]
 80033a4:	687a      	ldr	r2, [r7, #4]
 80033a6:	429a      	cmp	r2, r3
 80033a8:	d107      	bne.n	80033ba <DT_GetRegisterByEnum+0x36>
			return &DacTimerReg[i];
 80033aa:	68fa      	ldr	r2, [r7, #12]
 80033ac:	4613      	mov	r3, r2
 80033ae:	009b      	lsls	r3, r3, #2
 80033b0:	4413      	add	r3, r2
 80033b2:	009b      	lsls	r3, r3, #2
 80033b4:	4a07      	ldr	r2, [pc, #28]	; (80033d4 <DT_GetRegisterByEnum+0x50>)
 80033b6:	4413      	add	r3, r2
 80033b8:	e006      	b.n	80033c8 <DT_GetRegisterByEnum+0x44>
	for(int i = 0; i < MAX_DAC_TIMER_SETTINGS; i++)
 80033ba:	68fb      	ldr	r3, [r7, #12]
 80033bc:	3301      	adds	r3, #1
 80033be:	60fb      	str	r3, [r7, #12]
 80033c0:	68fb      	ldr	r3, [r7, #12]
 80033c2:	2b0d      	cmp	r3, #13
 80033c4:	dde5      	ble.n	8003392 <DT_GetRegisterByEnum+0xe>

	return 0;
 80033c6:	2300      	movs	r3, #0
}
 80033c8:	4618      	mov	r0, r3
 80033ca:	3714      	adds	r7, #20
 80033cc:	46bd      	mov	sp, r7
 80033ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033d2:	4770      	bx	lr
 80033d4:	2000000c 	.word	0x2000000c

080033d8 <FreqO_AdjustFreq>:
 *	@param None
 *	@retval None
 *
 */
void FreqO_AdjustFreq()
{
 80033d8:	b580      	push	{r7, lr}
 80033da:	af00      	add	r7, sp, #0
		//TIM8->ARR = SM_GetEncoderValue(ENCODER_FORWARD) * FREQ_ENCODER_HIFREQ_MAG;
		TIM8->ARR = SM_GetEncoderValue(ENCODER_FORWARD); //* FREQ_ENCODER_MIDFREQ_MAG;
 80033dc:	2000      	movs	r0, #0
 80033de:	f000 fb97 	bl	8003b10 <SM_GetEncoderValue>
 80033e2:	4603      	mov	r3, r0
 80033e4:	461a      	mov	r2, r3
 80033e6:	4b02      	ldr	r3, [pc, #8]	; (80033f0 <FreqO_AdjustFreq+0x18>)
 80033e8:	62da      	str	r2, [r3, #44]	; 0x2c
		//TIM8->ARR = SM_GetEncoderValue(ENCODER_FORWARD) * FREQ_ENCODER_LOFREQ_MAG;
}
 80033ea:	bf00      	nop
 80033ec:	bd80      	pop	{r7, pc}
 80033ee:	bf00      	nop
 80033f0:	40013400 	.word	0x40013400

080033f4 <FreqO_ModifyOutput>:
 *	@param None
 *	@retval None
 *
 */
void FreqO_ModifyOutput(uint16_t pEncValue)
{
 80033f4:	b580      	push	{r7, lr}
 80033f6:	b082      	sub	sp, #8
 80033f8:	af00      	add	r7, sp, #0
 80033fa:	4603      	mov	r3, r0
 80033fc:	80fb      	strh	r3, [r7, #6]

	switch(pEncValue)
 80033fe:	88fb      	ldrh	r3, [r7, #6]
 8003400:	2b38      	cmp	r3, #56	; 0x38
 8003402:	f200 80b4 	bhi.w	800356e <FreqO_ModifyOutput+0x17a>
 8003406:	a201      	add	r2, pc, #4	; (adr r2, 800340c <FreqO_ModifyOutput+0x18>)
 8003408:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800340c:	080034f1 	.word	0x080034f1
 8003410:	080034f1 	.word	0x080034f1
 8003414:	080034f1 	.word	0x080034f1
 8003418:	080034f1 	.word	0x080034f1
 800341c:	080034f9 	.word	0x080034f9
 8003420:	080034f9 	.word	0x080034f9
 8003424:	080034f9 	.word	0x080034f9
 8003428:	080034f9 	.word	0x080034f9
 800342c:	08003501 	.word	0x08003501
 8003430:	08003501 	.word	0x08003501
 8003434:	08003501 	.word	0x08003501
 8003438:	08003501 	.word	0x08003501
 800343c:	08003509 	.word	0x08003509
 8003440:	08003509 	.word	0x08003509
 8003444:	08003509 	.word	0x08003509
 8003448:	08003509 	.word	0x08003509
 800344c:	08003511 	.word	0x08003511
 8003450:	08003511 	.word	0x08003511
 8003454:	08003511 	.word	0x08003511
 8003458:	08003511 	.word	0x08003511
 800345c:	08003519 	.word	0x08003519
 8003460:	08003519 	.word	0x08003519
 8003464:	08003519 	.word	0x08003519
 8003468:	08003519 	.word	0x08003519
 800346c:	08003523 	.word	0x08003523
 8003470:	08003523 	.word	0x08003523
 8003474:	08003523 	.word	0x08003523
 8003478:	08003523 	.word	0x08003523
 800347c:	0800352d 	.word	0x0800352d
 8003480:	0800352d 	.word	0x0800352d
 8003484:	0800352d 	.word	0x0800352d
 8003488:	0800356f 	.word	0x0800356f
 800348c:	0800352d 	.word	0x0800352d
 8003490:	08003537 	.word	0x08003537
 8003494:	08003537 	.word	0x08003537
 8003498:	08003537 	.word	0x08003537
 800349c:	08003537 	.word	0x08003537
 80034a0:	08003541 	.word	0x08003541
 80034a4:	08003541 	.word	0x08003541
 80034a8:	08003541 	.word	0x08003541
 80034ac:	08003541 	.word	0x08003541
 80034b0:	0800354b 	.word	0x0800354b
 80034b4:	0800354b 	.word	0x0800354b
 80034b8:	0800354b 	.word	0x0800354b
 80034bc:	0800354b 	.word	0x0800354b
 80034c0:	08003555 	.word	0x08003555
 80034c4:	08003555 	.word	0x08003555
 80034c8:	08003555 	.word	0x08003555
 80034cc:	08003555 	.word	0x08003555
 80034d0:	0800355f 	.word	0x0800355f
 80034d4:	0800355f 	.word	0x0800355f
 80034d8:	0800355f 	.word	0x0800355f
 80034dc:	0800355f 	.word	0x0800355f
 80034e0:	08003567 	.word	0x08003567
 80034e4:	08003567 	.word	0x08003567
 80034e8:	08003567 	.word	0x08003567
 80034ec:	08003567 	.word	0x08003567
	{
		case 0:
		case 1:
		case 2:
		case 3:
			FreqO_ApplyPreset(FPRESET_1HZ);
 80034f0:	2001      	movs	r0, #1
 80034f2:	f000 f845 	bl	8003580 <FreqO_ApplyPreset>
			break;
 80034f6:	e03a      	b.n	800356e <FreqO_ModifyOutput+0x17a>
		case 4:
		case 5:
		case 6:
		case 7:
			FreqO_ApplyPreset(FPRESET_10HZ);
 80034f8:	200a      	movs	r0, #10
 80034fa:	f000 f841 	bl	8003580 <FreqO_ApplyPreset>
			break;
 80034fe:	e036      	b.n	800356e <FreqO_ModifyOutput+0x17a>
		case 8:
		case 9:
		case 10:
		case 11:
			FreqO_ApplyPreset(FPRESET_50HZ);
 8003500:	2032      	movs	r0, #50	; 0x32
 8003502:	f000 f83d 	bl	8003580 <FreqO_ApplyPreset>
			break;
 8003506:	e032      	b.n	800356e <FreqO_ModifyOutput+0x17a>
		case 12:
		case 13:
		case 14:
		case 15:
			FreqO_ApplyPreset(FPRESET_100HZ);
 8003508:	2064      	movs	r0, #100	; 0x64
 800350a:	f000 f839 	bl	8003580 <FreqO_ApplyPreset>
			break;
 800350e:	e02e      	b.n	800356e <FreqO_ModifyOutput+0x17a>
		case 16:
		case 17:
		case 18:
		case 19:
			FreqO_ApplyPreset(FPRESET_250HZ);
 8003510:	20fa      	movs	r0, #250	; 0xfa
 8003512:	f000 f835 	bl	8003580 <FreqO_ApplyPreset>
			break;
 8003516:	e02a      	b.n	800356e <FreqO_ModifyOutput+0x17a>
		case 20:
		case 21:
		case 22:
		case 23:
			FreqO_ApplyPreset(FPRESET_500HZ);
 8003518:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800351c:	f000 f830 	bl	8003580 <FreqO_ApplyPreset>
			break;
 8003520:	e025      	b.n	800356e <FreqO_ModifyOutput+0x17a>
		case 24:
		case 25:
		case 26:
		case 27:
			FreqO_ApplyPreset(FPRESET_750HZ);
 8003522:	f240 20ee 	movw	r0, #750	; 0x2ee
 8003526:	f000 f82b 	bl	8003580 <FreqO_ApplyPreset>
			break;
 800352a:	e020      	b.n	800356e <FreqO_ModifyOutput+0x17a>
		case 28:
		case 29:
		case 30:
		case 32:
			FreqO_ApplyPreset(FPRESET_1KHZ);
 800352c:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8003530:	f000 f826 	bl	8003580 <FreqO_ApplyPreset>
			break;
 8003534:	e01b      	b.n	800356e <FreqO_ModifyOutput+0x17a>
		case 33:
		case 34:
		case 35:
		case 36:
			FreqO_ApplyPreset(FPRESET_5KHZ);
 8003536:	f241 3088 	movw	r0, #5000	; 0x1388
 800353a:	f000 f821 	bl	8003580 <FreqO_ApplyPreset>
			break;
 800353e:	e016      	b.n	800356e <FreqO_ModifyOutput+0x17a>
		case 37:
		case 38:
		case 39:
		case 40:
			FreqO_ApplyPreset(FPRESET_10KHZ);
 8003540:	f242 7010 	movw	r0, #10000	; 0x2710
 8003544:	f000 f81c 	bl	8003580 <FreqO_ApplyPreset>
			break;
 8003548:	e011      	b.n	800356e <FreqO_ModifyOutput+0x17a>
		case 41:
		case 42:
		case 43:
		case 44:
			FreqO_ApplyPreset(FPRESET_25KHZ);
 800354a:	f246 10a8 	movw	r0, #25000	; 0x61a8
 800354e:	f000 f817 	bl	8003580 <FreqO_ApplyPreset>
			break;
 8003552:	e00c      	b.n	800356e <FreqO_ModifyOutput+0x17a>
		case 45:
		case 46:
		case 47:
		case 48:
			FreqO_ApplyPreset(FPRESET_50KHZ);
 8003554:	f24c 3050 	movw	r0, #50000	; 0xc350
 8003558:	f000 f812 	bl	8003580 <FreqO_ApplyPreset>
			break;
 800355c:	e007      	b.n	800356e <FreqO_ModifyOutput+0x17a>
		case 49:
		case 50:
		case 51:
		case 52:
			FreqO_ApplyPreset(FPRESET_75KHZ);
 800355e:	4806      	ldr	r0, [pc, #24]	; (8003578 <FreqO_ModifyOutput+0x184>)
 8003560:	f000 f80e 	bl	8003580 <FreqO_ApplyPreset>
			break;
 8003564:	e003      	b.n	800356e <FreqO_ModifyOutput+0x17a>
		case 53:
		case 54:
		case 55:
		case 56:
			FreqO_ApplyPreset(FPRESET_100KHZ);
 8003566:	4805      	ldr	r0, [pc, #20]	; (800357c <FreqO_ModifyOutput+0x188>)
 8003568:	f000 f80a 	bl	8003580 <FreqO_ApplyPreset>
			break;
 800356c:	bf00      	nop
	}

}
 800356e:	bf00      	nop
 8003570:	3708      	adds	r7, #8
 8003572:	46bd      	mov	sp, r7
 8003574:	bd80      	pop	{r7, pc}
 8003576:	bf00      	nop
 8003578:	000124f8 	.word	0x000124f8
 800357c:	000186a0 	.word	0x000186a0

08003580 <FreqO_ApplyPreset>:

 *	@retval None
 *
 */
void FreqO_ApplyPreset(eFreq_Preset pPresetEnum)
{
 8003580:	b580      	push	{r7, lr}
 8003582:	b084      	sub	sp, #16
 8003584:	af00      	add	r7, sp, #0
 8003586:	6078      	str	r0, [r7, #4]
	DacTimeReg_t* tmp = DT_GetRegisterByEnum(pPresetEnum);
 8003588:	6878      	ldr	r0, [r7, #4]
 800358a:	f7ff fefb 	bl	8003384 <DT_GetRegisterByEnum>
 800358e:	60f8      	str	r0, [r7, #12]
	if(tmp)
 8003590:	68fb      	ldr	r3, [r7, #12]
 8003592:	2b00      	cmp	r3, #0
 8003594:	d011      	beq.n	80035ba <FreqO_ApplyPreset+0x3a>
	{
		TIM8->PSC = tmp->psc;
 8003596:	4a0b      	ldr	r2, [pc, #44]	; (80035c4 <FreqO_ApplyPreset+0x44>)
 8003598:	68fb      	ldr	r3, [r7, #12]
 800359a:	689b      	ldr	r3, [r3, #8]
 800359c:	6293      	str	r3, [r2, #40]	; 0x28
		TIM8->ARR = tmp->arr;
 800359e:	4a09      	ldr	r2, [pc, #36]	; (80035c4 <FreqO_ApplyPreset+0x44>)
 80035a0:	68fb      	ldr	r3, [r7, #12]
 80035a2:	68db      	ldr	r3, [r3, #12]
 80035a4:	62d3      	str	r3, [r2, #44]	; 0x2c
		//eNewFreqPreset = pPresetEnum;
		Freq_Preset_Encoder_Pos_t * tmp = FreqO_FindFPresetObject(pPresetEnum);
 80035a6:	6878      	ldr	r0, [r7, #4]
 80035a8:	f000 f81c 	bl	80035e4 <FreqO_FindFPresetObject>
 80035ac:	60b8      	str	r0, [r7, #8]
		if(tmp)
 80035ae:	68bb      	ldr	r3, [r7, #8]
 80035b0:	2b00      	cmp	r3, #0
 80035b2:	d002      	beq.n	80035ba <FreqO_ApplyPreset+0x3a>
		{
			pNewFreqPresetEncoderPos = tmp;
 80035b4:	4a04      	ldr	r2, [pc, #16]	; (80035c8 <FreqO_ApplyPreset+0x48>)
 80035b6:	68bb      	ldr	r3, [r7, #8]
 80035b8:	6013      	str	r3, [r2, #0]
		}

	}
}
 80035ba:	bf00      	nop
 80035bc:	3710      	adds	r7, #16
 80035be:	46bd      	mov	sp, r7
 80035c0:	bd80      	pop	{r7, pc}
 80035c2:	bf00      	nop
 80035c4:	40013400 	.word	0x40013400
 80035c8:	20000198 	.word	0x20000198

080035cc <FreqO_GetFPresetObject>:
 *	@param None
 *	@retval pointer to Freq_Preset_Encoder_Pos_t struct
 *
 */
Freq_Preset_Encoder_Pos_t * FreqO_GetFPresetObject()
{
 80035cc:	b480      	push	{r7}
 80035ce:	af00      	add	r7, sp, #0
	return pNewFreqPresetEncoderPos;
 80035d0:	4b03      	ldr	r3, [pc, #12]	; (80035e0 <FreqO_GetFPresetObject+0x14>)
 80035d2:	681b      	ldr	r3, [r3, #0]
}
 80035d4:	4618      	mov	r0, r3
 80035d6:	46bd      	mov	sp, r7
 80035d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035dc:	4770      	bx	lr
 80035de:	bf00      	nop
 80035e0:	20000198 	.word	0x20000198

080035e4 <FreqO_FindFPresetObject>:

 *	@retval pointer to Freq_Preset_Encoder_Pos_t struct
 *
 */
Freq_Preset_Encoder_Pos_t * FreqO_FindFPresetObject(eFreq_Preset pEnum)
{
 80035e4:	b480      	push	{r7}
 80035e6:	b085      	sub	sp, #20
 80035e8:	af00      	add	r7, sp, #0
 80035ea:	6078      	str	r0, [r7, #4]
	for(int i = 0; i < MAX_NUM_FREQ_PRESETS; i++ )
 80035ec:	2300      	movs	r3, #0
 80035ee:	60fb      	str	r3, [r7, #12]
 80035f0:	e00e      	b.n	8003610 <FreqO_FindFPresetObject+0x2c>
	{
		if(aFreqPresetEncoderPos[i].hertz == pEnum)
 80035f2:	4a0c      	ldr	r2, [pc, #48]	; (8003624 <FreqO_FindFPresetObject+0x40>)
 80035f4:	68fb      	ldr	r3, [r7, #12]
 80035f6:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 80035fa:	687a      	ldr	r2, [r7, #4]
 80035fc:	429a      	cmp	r2, r3
 80035fe:	d104      	bne.n	800360a <FreqO_FindFPresetObject+0x26>
		{
			return &aFreqPresetEncoderPos[i];
 8003600:	68fb      	ldr	r3, [r7, #12]
 8003602:	00db      	lsls	r3, r3, #3
 8003604:	4a07      	ldr	r2, [pc, #28]	; (8003624 <FreqO_FindFPresetObject+0x40>)
 8003606:	4413      	add	r3, r2
 8003608:	e006      	b.n	8003618 <FreqO_FindFPresetObject+0x34>
	for(int i = 0; i < MAX_NUM_FREQ_PRESETS; i++ )
 800360a:	68fb      	ldr	r3, [r7, #12]
 800360c:	3301      	adds	r3, #1
 800360e:	60fb      	str	r3, [r7, #12]
 8003610:	68fb      	ldr	r3, [r7, #12]
 8003612:	2b0d      	cmp	r3, #13
 8003614:	dded      	ble.n	80035f2 <FreqO_FindFPresetObject+0xe>
		}
	}
	// error!
	return 0;
 8003616:	2300      	movs	r3, #0
}
 8003618:	4618      	mov	r0, r3
 800361a:	3714      	adds	r7, #20
 800361c:	46bd      	mov	sp, r7
 800361e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003622:	4770      	bx	lr
 8003624:	20000128 	.word	0x20000128

08003628 <FreqO_GetFreqPresetEncoderRange>:
 *	@param None
 *	@retval uint8_t
 *
 */
uint8_t FreqO_GetFreqPresetEncoderRange()
{
 8003628:	b480      	push	{r7}
 800362a:	af00      	add	r7, sp, #0
	return FreqPresetEncoderRange;
 800362c:	4b03      	ldr	r3, [pc, #12]	; (800363c <FreqO_GetFreqPresetEncoderRange+0x14>)
 800362e:	781b      	ldrb	r3, [r3, #0]
}
 8003630:	4618      	mov	r0, r3
 8003632:	46bd      	mov	sp, r7
 8003634:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003638:	4770      	bx	lr
 800363a:	bf00      	nop
 800363c:	20000124 	.word	0x20000124

08003640 <FreqO_GetOutputFreq>:
 *	@param None
 *	@retval uint32_t
 *
 */
uint32_t FreqO_GetOutputFreq()
{
 8003640:	b480      	push	{r7}
 8003642:	af00      	add	r7, sp, #0
	return TIM8->ARR;
 8003644:	4b03      	ldr	r3, [pc, #12]	; (8003654 <FreqO_GetOutputFreq+0x14>)
 8003646:	6adb      	ldr	r3, [r3, #44]	; 0x2c
}
 8003648:	4618      	mov	r0, r3
 800364a:	46bd      	mov	sp, r7
 800364c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003650:	4770      	bx	lr
 8003652:	bf00      	nop
 8003654:	40013400 	.word	0x40013400

08003658 <FuncO_ModifyOutput>:
 *	@param None
 *	@retval None
 *
 */
void FuncO_ModifyOutput(uint16_t pEncoderValue)
{
 8003658:	b580      	push	{r7, lr}
 800365a:	b082      	sub	sp, #8
 800365c:	af00      	add	r7, sp, #0
 800365e:	4603      	mov	r3, r0
 8003660:	80fb      	strh	r3, [r7, #6]


	switch(pEncoderValue)
 8003662:	88fb      	ldrh	r3, [r7, #6]
 8003664:	2b17      	cmp	r3, #23
 8003666:	d84b      	bhi.n	8003700 <FuncO_ModifyOutput+0xa8>
 8003668:	a201      	add	r2, pc, #4	; (adr r2, 8003670 <FuncO_ModifyOutput+0x18>)
 800366a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800366e:	bf00      	nop
 8003670:	080036d1 	.word	0x080036d1
 8003674:	080036d1 	.word	0x080036d1
 8003678:	080036d1 	.word	0x080036d1
 800367c:	080036d9 	.word	0x080036d9
 8003680:	080036d9 	.word	0x080036d9
 8003684:	080036d9 	.word	0x080036d9
 8003688:	080036d9 	.word	0x080036d9
 800368c:	080036e1 	.word	0x080036e1
 8003690:	080036e1 	.word	0x080036e1
 8003694:	080036e1 	.word	0x080036e1
 8003698:	080036e1 	.word	0x080036e1
 800369c:	080036e9 	.word	0x080036e9
 80036a0:	080036e9 	.word	0x080036e9
 80036a4:	080036e9 	.word	0x080036e9
 80036a8:	080036e9 	.word	0x080036e9
 80036ac:	080036f1 	.word	0x080036f1
 80036b0:	080036f1 	.word	0x080036f1
 80036b4:	080036f1 	.word	0x080036f1
 80036b8:	080036f1 	.word	0x080036f1
 80036bc:	080036f9 	.word	0x080036f9
 80036c0:	080036f9 	.word	0x080036f9
 80036c4:	080036f9 	.word	0x080036f9
 80036c8:	080036f9 	.word	0x080036f9
 80036cc:	080036f9 	.word	0x080036f9
	{
		case 0:
		case 1:
		case 2:

			FuncO_ApplyPreset_Fast(SINE_FUNC_MODE);
 80036d0:	2000      	movs	r0, #0
 80036d2:	f000 f819 	bl	8003708 <FuncO_ApplyPreset_Fast>
			break;
 80036d6:	e013      	b.n	8003700 <FuncO_ModifyOutput+0xa8>
		case 3:
		case 4:
		case 5:
		case 6:

			FuncO_ApplyPreset_Fast(SQUARE_FUNC_MODE);
 80036d8:	2001      	movs	r0, #1
 80036da:	f000 f815 	bl	8003708 <FuncO_ApplyPreset_Fast>

			break;
 80036de:	e00f      	b.n	8003700 <FuncO_ModifyOutput+0xa8>
		case 7:
		case 8:
		case 9:
		case 10:

			FuncO_ApplyPreset_Fast(SAW_FUNC_MODE);
 80036e0:	2002      	movs	r0, #2
 80036e2:	f000 f811 	bl	8003708 <FuncO_ApplyPreset_Fast>
			break;
 80036e6:	e00b      	b.n	8003700 <FuncO_ModifyOutput+0xa8>
		case 11:
		case 12:
		case 13:
		case 14:

			FuncO_ApplyPreset_Fast(REV_SAW_FUNC_MODE);
 80036e8:	2003      	movs	r0, #3
 80036ea:	f000 f80d 	bl	8003708 <FuncO_ApplyPreset_Fast>
			break;
 80036ee:	e007      	b.n	8003700 <FuncO_ModifyOutput+0xa8>
		case 15:
		case 16:
		case 17:
		case 18:

			FuncO_ApplyPreset_Fast(TRIANGLE_FUNC_MODE);
 80036f0:	2004      	movs	r0, #4
 80036f2:	f000 f809 	bl	8003708 <FuncO_ApplyPreset_Fast>
			break;
 80036f6:	e003      	b.n	8003700 <FuncO_ModifyOutput+0xa8>
		case 20:
		case 21:
		case 22:
		case 23:

			FuncO_ApplyPreset_Fast(IMPULSE_FUNC_MODE);
 80036f8:	2005      	movs	r0, #5
 80036fa:	f000 f805 	bl	8003708 <FuncO_ApplyPreset_Fast>
			break;
 80036fe:	bf00      	nop
	}
}
 8003700:	bf00      	nop
 8003702:	3708      	adds	r7, #8
 8003704:	46bd      	mov	sp, r7
 8003706:	bd80      	pop	{r7, pc}

08003708 <FuncO_ApplyPreset_Fast>:

 *	@retval None
 *
 */
void FuncO_ApplyPreset_Fast(eOutput_mode pPresetEnum)
{
 8003708:	b580      	push	{r7, lr}
 800370a:	b084      	sub	sp, #16
 800370c:	af02      	add	r7, sp, #8
 800370e:	4603      	mov	r3, r0
 8003710:	71fb      	strb	r3, [r7, #7]

	switch(pPresetEnum)
 8003712:	79fb      	ldrb	r3, [r7, #7]
 8003714:	2b05      	cmp	r3, #5
 8003716:	d86f      	bhi.n	80037f8 <FuncO_ApplyPreset_Fast+0xf0>
 8003718:	a201      	add	r2, pc, #4	; (adr r2, 8003720 <FuncO_ApplyPreset_Fast+0x18>)
 800371a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800371e:	bf00      	nop
 8003720:	08003739 	.word	0x08003739
 8003724:	08003759 	.word	0x08003759
 8003728:	08003779 	.word	0x08003779
 800372c:	08003799 	.word	0x08003799
 8003730:	080037b9 	.word	0x080037b9
 8003734:	080037d9 	.word	0x080037d9
	{
		case SINE_FUNC_MODE:
			pNewFuncPresetEncoderPos = &aFuncPresetEncoderPos[0];
 8003738:	4b31      	ldr	r3, [pc, #196]	; (8003800 <FuncO_ApplyPreset_Fast+0xf8>)
 800373a:	4a32      	ldr	r2, [pc, #200]	; (8003804 <FuncO_ApplyPreset_Fast+0xfc>)
 800373c:	601a      	str	r2, [r3, #0]
			HAL_DAC_Stop_DMA(&hdac1, DAC1_CHANNEL_1);
 800373e:	2100      	movs	r1, #0
 8003740:	4831      	ldr	r0, [pc, #196]	; (8003808 <FuncO_ApplyPreset_Fast+0x100>)
 8003742:	f003 fe2b 	bl	800739c <HAL_DAC_Stop_DMA>
			HAL_DAC_Start_DMA(&hdac1, DAC1_CHANNEL_1, sine_data_table, SINE_DATA_SIZE, DAC_ALIGN_12B_R);
 8003746:	2300      	movs	r3, #0
 8003748:	9300      	str	r3, [sp, #0]
 800374a:	2378      	movs	r3, #120	; 0x78
 800374c:	4a2f      	ldr	r2, [pc, #188]	; (800380c <FuncO_ApplyPreset_Fast+0x104>)
 800374e:	2100      	movs	r1, #0
 8003750:	482d      	ldr	r0, [pc, #180]	; (8003808 <FuncO_ApplyPreset_Fast+0x100>)
 8003752:	f003 fd61 	bl	8007218 <HAL_DAC_Start_DMA>
			break;
 8003756:	e04f      	b.n	80037f8 <FuncO_ApplyPreset_Fast+0xf0>

		case SQUARE_FUNC_MODE:
			pNewFuncPresetEncoderPos = &aFuncPresetEncoderPos[1];
 8003758:	4b29      	ldr	r3, [pc, #164]	; (8003800 <FuncO_ApplyPreset_Fast+0xf8>)
 800375a:	4a2d      	ldr	r2, [pc, #180]	; (8003810 <FuncO_ApplyPreset_Fast+0x108>)
 800375c:	601a      	str	r2, [r3, #0]
			HAL_DAC_Stop_DMA(&hdac1, DAC1_CHANNEL_1);
 800375e:	2100      	movs	r1, #0
 8003760:	4829      	ldr	r0, [pc, #164]	; (8003808 <FuncO_ApplyPreset_Fast+0x100>)
 8003762:	f003 fe1b 	bl	800739c <HAL_DAC_Stop_DMA>
			HAL_DAC_Start_DMA(&hdac1, DAC1_CHANNEL_1, square_data_table, SQUARE_DATA_SIZE, DAC_ALIGN_12B_R);
 8003766:	2300      	movs	r3, #0
 8003768:	9300      	str	r3, [sp, #0]
 800376a:	2378      	movs	r3, #120	; 0x78
 800376c:	4a29      	ldr	r2, [pc, #164]	; (8003814 <FuncO_ApplyPreset_Fast+0x10c>)
 800376e:	2100      	movs	r1, #0
 8003770:	4825      	ldr	r0, [pc, #148]	; (8003808 <FuncO_ApplyPreset_Fast+0x100>)
 8003772:	f003 fd51 	bl	8007218 <HAL_DAC_Start_DMA>
			break;
 8003776:	e03f      	b.n	80037f8 <FuncO_ApplyPreset_Fast+0xf0>

		case SAW_FUNC_MODE:
			pNewFuncPresetEncoderPos = &aFuncPresetEncoderPos[2];
 8003778:	4b21      	ldr	r3, [pc, #132]	; (8003800 <FuncO_ApplyPreset_Fast+0xf8>)
 800377a:	4a27      	ldr	r2, [pc, #156]	; (8003818 <FuncO_ApplyPreset_Fast+0x110>)
 800377c:	601a      	str	r2, [r3, #0]
			HAL_DAC_Stop_DMA(&hdac1, DAC1_CHANNEL_1);
 800377e:	2100      	movs	r1, #0
 8003780:	4821      	ldr	r0, [pc, #132]	; (8003808 <FuncO_ApplyPreset_Fast+0x100>)
 8003782:	f003 fe0b 	bl	800739c <HAL_DAC_Stop_DMA>
			HAL_DAC_Start_DMA(&hdac1, DAC1_CHANNEL_1, saw_data_table, SAW_DATA_SIZE, DAC_ALIGN_12B_R);
 8003786:	2300      	movs	r3, #0
 8003788:	9300      	str	r3, [sp, #0]
 800378a:	2378      	movs	r3, #120	; 0x78
 800378c:	4a23      	ldr	r2, [pc, #140]	; (800381c <FuncO_ApplyPreset_Fast+0x114>)
 800378e:	2100      	movs	r1, #0
 8003790:	481d      	ldr	r0, [pc, #116]	; (8003808 <FuncO_ApplyPreset_Fast+0x100>)
 8003792:	f003 fd41 	bl	8007218 <HAL_DAC_Start_DMA>
			break;
 8003796:	e02f      	b.n	80037f8 <FuncO_ApplyPreset_Fast+0xf0>

		case REV_SAW_FUNC_MODE:
			pNewFuncPresetEncoderPos = &aFuncPresetEncoderPos[3];
 8003798:	4b19      	ldr	r3, [pc, #100]	; (8003800 <FuncO_ApplyPreset_Fast+0xf8>)
 800379a:	4a21      	ldr	r2, [pc, #132]	; (8003820 <FuncO_ApplyPreset_Fast+0x118>)
 800379c:	601a      	str	r2, [r3, #0]
			HAL_DAC_Stop_DMA(&hdac1, DAC1_CHANNEL_1);
 800379e:	2100      	movs	r1, #0
 80037a0:	4819      	ldr	r0, [pc, #100]	; (8003808 <FuncO_ApplyPreset_Fast+0x100>)
 80037a2:	f003 fdfb 	bl	800739c <HAL_DAC_Stop_DMA>
			HAL_DAC_Start_DMA(&hdac1, DAC1_CHANNEL_1, saw_rev_data_table, SAW_REV_DATA_SIZE, DAC_ALIGN_12B_R);
 80037a6:	2300      	movs	r3, #0
 80037a8:	9300      	str	r3, [sp, #0]
 80037aa:	2378      	movs	r3, #120	; 0x78
 80037ac:	4a1d      	ldr	r2, [pc, #116]	; (8003824 <FuncO_ApplyPreset_Fast+0x11c>)
 80037ae:	2100      	movs	r1, #0
 80037b0:	4815      	ldr	r0, [pc, #84]	; (8003808 <FuncO_ApplyPreset_Fast+0x100>)
 80037b2:	f003 fd31 	bl	8007218 <HAL_DAC_Start_DMA>
			break;
 80037b6:	e01f      	b.n	80037f8 <FuncO_ApplyPreset_Fast+0xf0>

		case TRIANGLE_FUNC_MODE:
			pNewFuncPresetEncoderPos = &aFuncPresetEncoderPos[4];
 80037b8:	4b11      	ldr	r3, [pc, #68]	; (8003800 <FuncO_ApplyPreset_Fast+0xf8>)
 80037ba:	4a1b      	ldr	r2, [pc, #108]	; (8003828 <FuncO_ApplyPreset_Fast+0x120>)
 80037bc:	601a      	str	r2, [r3, #0]
			HAL_DAC_Stop_DMA(&hdac1, DAC1_CHANNEL_1);
 80037be:	2100      	movs	r1, #0
 80037c0:	4811      	ldr	r0, [pc, #68]	; (8003808 <FuncO_ApplyPreset_Fast+0x100>)
 80037c2:	f003 fdeb 	bl	800739c <HAL_DAC_Stop_DMA>
			HAL_DAC_Start_DMA(&hdac1, DAC1_CHANNEL_1, triangle_data_table, TRIANGLE_DATA_SIZE, DAC_ALIGN_12B_R);
 80037c6:	2300      	movs	r3, #0
 80037c8:	9300      	str	r3, [sp, #0]
 80037ca:	2378      	movs	r3, #120	; 0x78
 80037cc:	4a17      	ldr	r2, [pc, #92]	; (800382c <FuncO_ApplyPreset_Fast+0x124>)
 80037ce:	2100      	movs	r1, #0
 80037d0:	480d      	ldr	r0, [pc, #52]	; (8003808 <FuncO_ApplyPreset_Fast+0x100>)
 80037d2:	f003 fd21 	bl	8007218 <HAL_DAC_Start_DMA>
			break;
 80037d6:	e00f      	b.n	80037f8 <FuncO_ApplyPreset_Fast+0xf0>

		case IMPULSE_FUNC_MODE:
			pNewFuncPresetEncoderPos = &aFuncPresetEncoderPos[5];
 80037d8:	4b09      	ldr	r3, [pc, #36]	; (8003800 <FuncO_ApplyPreset_Fast+0xf8>)
 80037da:	4a15      	ldr	r2, [pc, #84]	; (8003830 <FuncO_ApplyPreset_Fast+0x128>)
 80037dc:	601a      	str	r2, [r3, #0]
			HAL_DAC_Stop_DMA(&hdac1, DAC1_CHANNEL_1);
 80037de:	2100      	movs	r1, #0
 80037e0:	4809      	ldr	r0, [pc, #36]	; (8003808 <FuncO_ApplyPreset_Fast+0x100>)
 80037e2:	f003 fddb 	bl	800739c <HAL_DAC_Stop_DMA>
			HAL_DAC_Start_DMA(&hdac1, DAC1_CHANNEL_1, unitimpulse_data_table, UNITIMPULSE_DATA_SIZE,  DAC_ALIGN_12B_R);
 80037e6:	2300      	movs	r3, #0
 80037e8:	9300      	str	r3, [sp, #0]
 80037ea:	2378      	movs	r3, #120	; 0x78
 80037ec:	4a11      	ldr	r2, [pc, #68]	; (8003834 <FuncO_ApplyPreset_Fast+0x12c>)
 80037ee:	2100      	movs	r1, #0
 80037f0:	4805      	ldr	r0, [pc, #20]	; (8003808 <FuncO_ApplyPreset_Fast+0x100>)
 80037f2:	f003 fd11 	bl	8007218 <HAL_DAC_Start_DMA>
			break;
 80037f6:	bf00      	nop

	//
	}

}
 80037f8:	bf00      	nop
 80037fa:	3708      	adds	r7, #8
 80037fc:	46bd      	mov	sp, r7
 80037fe:	bd80      	pop	{r7, pc}
 8003800:	200001ac 	.word	0x200001ac
 8003804:	200001a0 	.word	0x200001a0
 8003808:	20001540 	.word	0x20001540
 800380c:	20000aa8 	.word	0x20000aa8
 8003810:	200001a2 	.word	0x200001a2
 8003814:	20000c88 	.word	0x20000c88
 8003818:	200001a4 	.word	0x200001a4
 800381c:	200006e8 	.word	0x200006e8
 8003820:	200001a6 	.word	0x200001a6
 8003824:	200008c8 	.word	0x200008c8
 8003828:	200001a8 	.word	0x200001a8
 800382c:	20000e68 	.word	0x20000e68
 8003830:	200001aa 	.word	0x200001aa
 8003834:	20001048 	.word	0x20001048

08003838 <FuncO_GetFPresetObject>:
 *	@param None
 *	@retval pointer to Func_Preset_Encoder_Pos_t struct
 *
 */
Func_Preset_Encoder_Pos_t * FuncO_GetFPresetObject()
{
 8003838:	b480      	push	{r7}
 800383a:	af00      	add	r7, sp, #0
	return pNewFuncPresetEncoderPos;
 800383c:	4b03      	ldr	r3, [pc, #12]	; (800384c <FuncO_GetFPresetObject+0x14>)
 800383e:	681b      	ldr	r3, [r3, #0]
}
 8003840:	4618      	mov	r0, r3
 8003842:	46bd      	mov	sp, r7
 8003844:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003848:	4770      	bx	lr
 800384a:	bf00      	nop
 800384c:	200001ac 	.word	0x200001ac

08003850 <FuncO_GetFuncPresetEncoderRange>:
 *	@param None
 *	@retval uint8_t
 *
 */
uint8_t FuncO_GetFuncPresetEncoderRange()
{
 8003850:	b480      	push	{r7}
 8003852:	af00      	add	r7, sp, #0
	return FuncPresetEncoderRange;
 8003854:	4b03      	ldr	r3, [pc, #12]	; (8003864 <FuncO_GetFuncPresetEncoderRange+0x14>)
 8003856:	781b      	ldrb	r3, [r3, #0]
}
 8003858:	4618      	mov	r0, r3
 800385a:	46bd      	mov	sp, r7
 800385c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003860:	4770      	bx	lr
 8003862:	bf00      	nop
 8003864:	2000019c 	.word	0x2000019c

08003868 <GO_ModifyOutput>:
// signal output gain
eOutput_gain eNewOutGain = ONE_GAIN;


void GO_ModifyOutput(uint16_t pEncoderValue)
{
 8003868:	b580      	push	{r7, lr}
 800386a:	b082      	sub	sp, #8
 800386c:	af00      	add	r7, sp, #0
 800386e:	4603      	mov	r3, r0
 8003870:	80fb      	strh	r3, [r7, #6]


	switch(pEncoderValue)
 8003872:	88fb      	ldrh	r3, [r7, #6]
 8003874:	2b1e      	cmp	r3, #30
 8003876:	d861      	bhi.n	800393c <GO_ModifyOutput+0xd4>
 8003878:	a201      	add	r2, pc, #4	; (adr r2, 8003880 <GO_ModifyOutput+0x18>)
 800387a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800387e:	bf00      	nop
 8003880:	080038fd 	.word	0x080038fd
 8003884:	080038fd 	.word	0x080038fd
 8003888:	080038fd 	.word	0x080038fd
 800388c:	08003905 	.word	0x08003905
 8003890:	08003905 	.word	0x08003905
 8003894:	08003905 	.word	0x08003905
 8003898:	08003905 	.word	0x08003905
 800389c:	0800390d 	.word	0x0800390d
 80038a0:	0800390d 	.word	0x0800390d
 80038a4:	0800390d 	.word	0x0800390d
 80038a8:	0800390d 	.word	0x0800390d
 80038ac:	08003915 	.word	0x08003915
 80038b0:	08003915 	.word	0x08003915
 80038b4:	08003915 	.word	0x08003915
 80038b8:	08003915 	.word	0x08003915
 80038bc:	0800391d 	.word	0x0800391d
 80038c0:	0800391d 	.word	0x0800391d
 80038c4:	0800391d 	.word	0x0800391d
 80038c8:	0800391d 	.word	0x0800391d
 80038cc:	08003925 	.word	0x08003925
 80038d0:	08003925 	.word	0x08003925
 80038d4:	08003925 	.word	0x08003925
 80038d8:	08003925 	.word	0x08003925
 80038dc:	0800392d 	.word	0x0800392d
 80038e0:	0800392d 	.word	0x0800392d
 80038e4:	0800392d 	.word	0x0800392d
 80038e8:	0800392d 	.word	0x0800392d
 80038ec:	08003935 	.word	0x08003935
 80038f0:	08003935 	.word	0x08003935
 80038f4:	08003935 	.word	0x08003935
 80038f8:	08003935 	.word	0x08003935
	{
		case 0:
		case 1:
		case 2:
			GO_ApplyPreset_Fast(ZERO_GAIN);
 80038fc:	2000      	movs	r0, #0
 80038fe:	f000 f821 	bl	8003944 <GO_ApplyPreset_Fast>
			break;
 8003902:	e01b      	b.n	800393c <GO_ModifyOutput+0xd4>
		case 3:
		case 4:
		case 5:
		case 6:
			GO_ApplyPreset_Fast(ONE_GAIN);
 8003904:	2001      	movs	r0, #1
 8003906:	f000 f81d 	bl	8003944 <GO_ApplyPreset_Fast>
			break;
 800390a:	e017      	b.n	800393c <GO_ModifyOutput+0xd4>
		case 7:
		case 8:
		case 9:
		case 10:
			GO_ApplyPreset_Fast(TWO_GAIN);
 800390c:	2002      	movs	r0, #2
 800390e:	f000 f819 	bl	8003944 <GO_ApplyPreset_Fast>
			break;
 8003912:	e013      	b.n	800393c <GO_ModifyOutput+0xd4>
		case 11:
		case 12:
		case 13:
		case 14:
			GO_ApplyPreset_Fast(THREE_GAIN);
 8003914:	2003      	movs	r0, #3
 8003916:	f000 f815 	bl	8003944 <GO_ApplyPreset_Fast>
			break;
 800391a:	e00f      	b.n	800393c <GO_ModifyOutput+0xd4>
		case 15:
		case 16:
		case 17:
		case 18:
			GO_ApplyPreset_Fast(FOUR_GAIN);
 800391c:	2004      	movs	r0, #4
 800391e:	f000 f811 	bl	8003944 <GO_ApplyPreset_Fast>
			break;
 8003922:	e00b      	b.n	800393c <GO_ModifyOutput+0xd4>
		case 19:
		case 20:
		case 21:
		case 22:
			GO_ApplyPreset_Fast(FIVE_GAIN);
 8003924:	2005      	movs	r0, #5
 8003926:	f000 f80d 	bl	8003944 <GO_ApplyPreset_Fast>
			break;
 800392a:	e007      	b.n	800393c <GO_ModifyOutput+0xd4>
		case 23:
		case 24:
		case 25:
		case 26:
			GO_ApplyPreset_Fast(SIX_GAIN);
 800392c:	2006      	movs	r0, #6
 800392e:	f000 f809 	bl	8003944 <GO_ApplyPreset_Fast>
			break;
 8003932:	e003      	b.n	800393c <GO_ModifyOutput+0xd4>
		case 27:
		case 28:
		case 29:
		case 30:
			GO_ApplyPreset_Fast(SEVEN_GAIN);
 8003934:	2007      	movs	r0, #7
 8003936:	f000 f805 	bl	8003944 <GO_ApplyPreset_Fast>
			break;
 800393a:	bf00      	nop


	}
}
 800393c:	bf00      	nop
 800393e:	3708      	adds	r7, #8
 8003940:	46bd      	mov	sp, r7
 8003942:	bd80      	pop	{r7, pc}

08003944 <GO_ApplyPreset_Fast>:
 *	@param None
 *	@retval None
 *
 */
void GO_ApplyPreset_Fast(eOutput_gain pPresetEnum)
{
 8003944:	b580      	push	{r7, lr}
 8003946:	b082      	sub	sp, #8
 8003948:	af00      	add	r7, sp, #0
 800394a:	4603      	mov	r3, r0
 800394c:	71fb      	strb	r3, [r7, #7]
	switch(pPresetEnum)
 800394e:	79fb      	ldrb	r3, [r7, #7]
 8003950:	2b07      	cmp	r3, #7
 8003952:	f200 80ab 	bhi.w	8003aac <GO_ApplyPreset_Fast+0x168>
 8003956:	a201      	add	r2, pc, #4	; (adr r2, 800395c <GO_ApplyPreset_Fast+0x18>)
 8003958:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800395c:	0800397d 	.word	0x0800397d
 8003960:	080039a3 	.word	0x080039a3
 8003964:	080039c9 	.word	0x080039c9
 8003968:	080039ef 	.word	0x080039ef
 800396c:	08003a15 	.word	0x08003a15
 8003970:	08003a3b 	.word	0x08003a3b
 8003974:	08003a61 	.word	0x08003a61
 8003978:	08003a87 	.word	0x08003a87
	{
		case ZERO_GAIN:
			pNewGainPresetEncoderPos = &aGainPresetEncoderPos[0];
 800397c:	4b4d      	ldr	r3, [pc, #308]	; (8003ab4 <GO_ApplyPreset_Fast+0x170>)
 800397e:	4a4e      	ldr	r2, [pc, #312]	; (8003ab8 <GO_ApplyPreset_Fast+0x174>)
 8003980:	601a      	str	r2, [r3, #0]
			HAL_GPIO_WritePin(SG0_GPIO_Port, SG0_Pin, GPIO_PIN_RESET);
 8003982:	2200      	movs	r2, #0
 8003984:	2101      	movs	r1, #1
 8003986:	484d      	ldr	r0, [pc, #308]	; (8003abc <GO_ApplyPreset_Fast+0x178>)
 8003988:	f004 fc34 	bl	80081f4 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(SG1_GPIO_Port, SG1_Pin, GPIO_PIN_RESET);
 800398c:	2200      	movs	r2, #0
 800398e:	2120      	movs	r1, #32
 8003990:	484b      	ldr	r0, [pc, #300]	; (8003ac0 <GO_ApplyPreset_Fast+0x17c>)
 8003992:	f004 fc2f 	bl	80081f4 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(SG2_GPIO_Port, SG2_Pin, GPIO_PIN_RESET);
 8003996:	2200      	movs	r2, #0
 8003998:	2110      	movs	r1, #16
 800399a:	4849      	ldr	r0, [pc, #292]	; (8003ac0 <GO_ApplyPreset_Fast+0x17c>)
 800399c:	f004 fc2a 	bl	80081f4 <HAL_GPIO_WritePin>
			break;
 80039a0:	e084      	b.n	8003aac <GO_ApplyPreset_Fast+0x168>

		case ONE_GAIN:
			pNewGainPresetEncoderPos = &aGainPresetEncoderPos[1];
 80039a2:	4b44      	ldr	r3, [pc, #272]	; (8003ab4 <GO_ApplyPreset_Fast+0x170>)
 80039a4:	4a47      	ldr	r2, [pc, #284]	; (8003ac4 <GO_ApplyPreset_Fast+0x180>)
 80039a6:	601a      	str	r2, [r3, #0]
			HAL_GPIO_WritePin(SG0_GPIO_Port, SG0_Pin, GPIO_PIN_SET);
 80039a8:	2201      	movs	r2, #1
 80039aa:	2101      	movs	r1, #1
 80039ac:	4843      	ldr	r0, [pc, #268]	; (8003abc <GO_ApplyPreset_Fast+0x178>)
 80039ae:	f004 fc21 	bl	80081f4 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(SG1_GPIO_Port, SG1_Pin, GPIO_PIN_RESET);
 80039b2:	2200      	movs	r2, #0
 80039b4:	2120      	movs	r1, #32
 80039b6:	4842      	ldr	r0, [pc, #264]	; (8003ac0 <GO_ApplyPreset_Fast+0x17c>)
 80039b8:	f004 fc1c 	bl	80081f4 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(SG2_GPIO_Port, SG2_Pin, GPIO_PIN_RESET);
 80039bc:	2200      	movs	r2, #0
 80039be:	2110      	movs	r1, #16
 80039c0:	483f      	ldr	r0, [pc, #252]	; (8003ac0 <GO_ApplyPreset_Fast+0x17c>)
 80039c2:	f004 fc17 	bl	80081f4 <HAL_GPIO_WritePin>
			break;
 80039c6:	e071      	b.n	8003aac <GO_ApplyPreset_Fast+0x168>

		case TWO_GAIN:
			pNewGainPresetEncoderPos = &aGainPresetEncoderPos[2];
 80039c8:	4b3a      	ldr	r3, [pc, #232]	; (8003ab4 <GO_ApplyPreset_Fast+0x170>)
 80039ca:	4a3f      	ldr	r2, [pc, #252]	; (8003ac8 <GO_ApplyPreset_Fast+0x184>)
 80039cc:	601a      	str	r2, [r3, #0]
			HAL_GPIO_WritePin(SG0_GPIO_Port, SG0_Pin, GPIO_PIN_RESET);
 80039ce:	2200      	movs	r2, #0
 80039d0:	2101      	movs	r1, #1
 80039d2:	483a      	ldr	r0, [pc, #232]	; (8003abc <GO_ApplyPreset_Fast+0x178>)
 80039d4:	f004 fc0e 	bl	80081f4 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(SG1_GPIO_Port, SG1_Pin, GPIO_PIN_SET);
 80039d8:	2201      	movs	r2, #1
 80039da:	2120      	movs	r1, #32
 80039dc:	4838      	ldr	r0, [pc, #224]	; (8003ac0 <GO_ApplyPreset_Fast+0x17c>)
 80039de:	f004 fc09 	bl	80081f4 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(SG2_GPIO_Port, SG2_Pin, GPIO_PIN_RESET);
 80039e2:	2200      	movs	r2, #0
 80039e4:	2110      	movs	r1, #16
 80039e6:	4836      	ldr	r0, [pc, #216]	; (8003ac0 <GO_ApplyPreset_Fast+0x17c>)
 80039e8:	f004 fc04 	bl	80081f4 <HAL_GPIO_WritePin>
			break;
 80039ec:	e05e      	b.n	8003aac <GO_ApplyPreset_Fast+0x168>

		case THREE_GAIN:
			pNewGainPresetEncoderPos = &aGainPresetEncoderPos[3];
 80039ee:	4b31      	ldr	r3, [pc, #196]	; (8003ab4 <GO_ApplyPreset_Fast+0x170>)
 80039f0:	4a36      	ldr	r2, [pc, #216]	; (8003acc <GO_ApplyPreset_Fast+0x188>)
 80039f2:	601a      	str	r2, [r3, #0]
			HAL_GPIO_WritePin(SG0_GPIO_Port, SG0_Pin, GPIO_PIN_SET);
 80039f4:	2201      	movs	r2, #1
 80039f6:	2101      	movs	r1, #1
 80039f8:	4830      	ldr	r0, [pc, #192]	; (8003abc <GO_ApplyPreset_Fast+0x178>)
 80039fa:	f004 fbfb 	bl	80081f4 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(SG1_GPIO_Port, SG1_Pin, GPIO_PIN_SET);
 80039fe:	2201      	movs	r2, #1
 8003a00:	2120      	movs	r1, #32
 8003a02:	482f      	ldr	r0, [pc, #188]	; (8003ac0 <GO_ApplyPreset_Fast+0x17c>)
 8003a04:	f004 fbf6 	bl	80081f4 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(SG2_GPIO_Port, SG2_Pin, GPIO_PIN_RESET);
 8003a08:	2200      	movs	r2, #0
 8003a0a:	2110      	movs	r1, #16
 8003a0c:	482c      	ldr	r0, [pc, #176]	; (8003ac0 <GO_ApplyPreset_Fast+0x17c>)
 8003a0e:	f004 fbf1 	bl	80081f4 <HAL_GPIO_WritePin>
			break;
 8003a12:	e04b      	b.n	8003aac <GO_ApplyPreset_Fast+0x168>

		case FOUR_GAIN:
			pNewGainPresetEncoderPos = &aGainPresetEncoderPos[4];
 8003a14:	4b27      	ldr	r3, [pc, #156]	; (8003ab4 <GO_ApplyPreset_Fast+0x170>)
 8003a16:	4a2e      	ldr	r2, [pc, #184]	; (8003ad0 <GO_ApplyPreset_Fast+0x18c>)
 8003a18:	601a      	str	r2, [r3, #0]
			HAL_GPIO_WritePin(SG0_GPIO_Port, SG0_Pin, GPIO_PIN_RESET);
 8003a1a:	2200      	movs	r2, #0
 8003a1c:	2101      	movs	r1, #1
 8003a1e:	4827      	ldr	r0, [pc, #156]	; (8003abc <GO_ApplyPreset_Fast+0x178>)
 8003a20:	f004 fbe8 	bl	80081f4 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(SG1_GPIO_Port, SG1_Pin, GPIO_PIN_RESET);
 8003a24:	2200      	movs	r2, #0
 8003a26:	2120      	movs	r1, #32
 8003a28:	4825      	ldr	r0, [pc, #148]	; (8003ac0 <GO_ApplyPreset_Fast+0x17c>)
 8003a2a:	f004 fbe3 	bl	80081f4 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(SG2_GPIO_Port, SG2_Pin, GPIO_PIN_SET);
 8003a2e:	2201      	movs	r2, #1
 8003a30:	2110      	movs	r1, #16
 8003a32:	4823      	ldr	r0, [pc, #140]	; (8003ac0 <GO_ApplyPreset_Fast+0x17c>)
 8003a34:	f004 fbde 	bl	80081f4 <HAL_GPIO_WritePin>
			break;
 8003a38:	e038      	b.n	8003aac <GO_ApplyPreset_Fast+0x168>

		case FIVE_GAIN:
			pNewGainPresetEncoderPos = &aGainPresetEncoderPos[5];
 8003a3a:	4b1e      	ldr	r3, [pc, #120]	; (8003ab4 <GO_ApplyPreset_Fast+0x170>)
 8003a3c:	4a25      	ldr	r2, [pc, #148]	; (8003ad4 <GO_ApplyPreset_Fast+0x190>)
 8003a3e:	601a      	str	r2, [r3, #0]
			HAL_GPIO_WritePin(SG0_GPIO_Port, SG0_Pin, GPIO_PIN_SET);
 8003a40:	2201      	movs	r2, #1
 8003a42:	2101      	movs	r1, #1
 8003a44:	481d      	ldr	r0, [pc, #116]	; (8003abc <GO_ApplyPreset_Fast+0x178>)
 8003a46:	f004 fbd5 	bl	80081f4 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(SG1_GPIO_Port, SG1_Pin, GPIO_PIN_RESET);
 8003a4a:	2200      	movs	r2, #0
 8003a4c:	2120      	movs	r1, #32
 8003a4e:	481c      	ldr	r0, [pc, #112]	; (8003ac0 <GO_ApplyPreset_Fast+0x17c>)
 8003a50:	f004 fbd0 	bl	80081f4 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(SG2_GPIO_Port, SG2_Pin, GPIO_PIN_SET);
 8003a54:	2201      	movs	r2, #1
 8003a56:	2110      	movs	r1, #16
 8003a58:	4819      	ldr	r0, [pc, #100]	; (8003ac0 <GO_ApplyPreset_Fast+0x17c>)
 8003a5a:	f004 fbcb 	bl	80081f4 <HAL_GPIO_WritePin>
			break;
 8003a5e:	e025      	b.n	8003aac <GO_ApplyPreset_Fast+0x168>

		case SIX_GAIN:
			pNewGainPresetEncoderPos = &aGainPresetEncoderPos[6];
 8003a60:	4b14      	ldr	r3, [pc, #80]	; (8003ab4 <GO_ApplyPreset_Fast+0x170>)
 8003a62:	4a1d      	ldr	r2, [pc, #116]	; (8003ad8 <GO_ApplyPreset_Fast+0x194>)
 8003a64:	601a      	str	r2, [r3, #0]
			HAL_GPIO_WritePin(SG0_GPIO_Port, SG0_Pin, GPIO_PIN_RESET);
 8003a66:	2200      	movs	r2, #0
 8003a68:	2101      	movs	r1, #1
 8003a6a:	4814      	ldr	r0, [pc, #80]	; (8003abc <GO_ApplyPreset_Fast+0x178>)
 8003a6c:	f004 fbc2 	bl	80081f4 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(SG1_GPIO_Port, SG1_Pin, GPIO_PIN_SET);
 8003a70:	2201      	movs	r2, #1
 8003a72:	2120      	movs	r1, #32
 8003a74:	4812      	ldr	r0, [pc, #72]	; (8003ac0 <GO_ApplyPreset_Fast+0x17c>)
 8003a76:	f004 fbbd 	bl	80081f4 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(SG2_GPIO_Port, SG2_Pin, GPIO_PIN_SET);
 8003a7a:	2201      	movs	r2, #1
 8003a7c:	2110      	movs	r1, #16
 8003a7e:	4810      	ldr	r0, [pc, #64]	; (8003ac0 <GO_ApplyPreset_Fast+0x17c>)
 8003a80:	f004 fbb8 	bl	80081f4 <HAL_GPIO_WritePin>
			break;
 8003a84:	e012      	b.n	8003aac <GO_ApplyPreset_Fast+0x168>

		case SEVEN_GAIN:
			pNewGainPresetEncoderPos = &aGainPresetEncoderPos[7];
 8003a86:	4b0b      	ldr	r3, [pc, #44]	; (8003ab4 <GO_ApplyPreset_Fast+0x170>)
 8003a88:	4a14      	ldr	r2, [pc, #80]	; (8003adc <GO_ApplyPreset_Fast+0x198>)
 8003a8a:	601a      	str	r2, [r3, #0]
			HAL_GPIO_WritePin(SG0_GPIO_Port, SG0_Pin, GPIO_PIN_SET);
 8003a8c:	2201      	movs	r2, #1
 8003a8e:	2101      	movs	r1, #1
 8003a90:	480a      	ldr	r0, [pc, #40]	; (8003abc <GO_ApplyPreset_Fast+0x178>)
 8003a92:	f004 fbaf 	bl	80081f4 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(SG1_GPIO_Port, SG1_Pin, GPIO_PIN_SET);
 8003a96:	2201      	movs	r2, #1
 8003a98:	2120      	movs	r1, #32
 8003a9a:	4809      	ldr	r0, [pc, #36]	; (8003ac0 <GO_ApplyPreset_Fast+0x17c>)
 8003a9c:	f004 fbaa 	bl	80081f4 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(SG2_GPIO_Port, SG2_Pin, GPIO_PIN_SET);
 8003aa0:	2201      	movs	r2, #1
 8003aa2:	2110      	movs	r1, #16
 8003aa4:	4806      	ldr	r0, [pc, #24]	; (8003ac0 <GO_ApplyPreset_Fast+0x17c>)
 8003aa6:	f004 fba5 	bl	80081f4 <HAL_GPIO_WritePin>
			break;
 8003aaa:	bf00      	nop
	}
}
 8003aac:	bf00      	nop
 8003aae:	3708      	adds	r7, #8
 8003ab0:	46bd      	mov	sp, r7
 8003ab2:	bd80      	pop	{r7, pc}
 8003ab4:	200001c8 	.word	0x200001c8
 8003ab8:	200001b0 	.word	0x200001b0
 8003abc:	48000400 	.word	0x48000400
 8003ac0:	48000800 	.word	0x48000800
 8003ac4:	200001b3 	.word	0x200001b3
 8003ac8:	200001b6 	.word	0x200001b6
 8003acc:	200001b9 	.word	0x200001b9
 8003ad0:	200001bc 	.word	0x200001bc
 8003ad4:	200001bf 	.word	0x200001bf
 8003ad8:	200001c2 	.word	0x200001c2
 8003adc:	200001c5 	.word	0x200001c5

08003ae0 <GO_GetGPresetObject>:
 *	@param None
 *	@retval None
 *
 */
Gain_Preset_Encoder_Pos_t * GO_GetGPresetObject()
{
 8003ae0:	b480      	push	{r7}
 8003ae2:	af00      	add	r7, sp, #0
	return pNewGainPresetEncoderPos;
 8003ae4:	4b03      	ldr	r3, [pc, #12]	; (8003af4 <GO_GetGPresetObject+0x14>)
 8003ae6:	681b      	ldr	r3, [r3, #0]
}
 8003ae8:	4618      	mov	r0, r3
 8003aea:	46bd      	mov	sp, r7
 8003aec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003af0:	4770      	bx	lr
 8003af2:	bf00      	nop
 8003af4:	200001c8 	.word	0x200001c8

08003af8 <GO_GetGainPresetEncoderRange>:
 *	@param None
 *	@retval None
 *
 */
uint8_t GO_GetGainPresetEncoderRange()
{
 8003af8:	b480      	push	{r7}
 8003afa:	af00      	add	r7, sp, #0
	return GainPresetEncoderRange;
 8003afc:	4b03      	ldr	r3, [pc, #12]	; (8003b0c <GO_GetGainPresetEncoderRange+0x14>)
 8003afe:	781b      	ldrb	r3, [r3, #0]
}
 8003b00:	4618      	mov	r0, r3
 8003b02:	46bd      	mov	sp, r7
 8003b04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b08:	4770      	bx	lr
 8003b0a:	bf00      	nop
 8003b0c:	200001cc 	.word	0x200001cc

08003b10 <SM_GetEncoderValue>:
 *	@param None
 *	@retval None
 *
 */
uint16_t SM_GetEncoderValue(eEncoder_Direction direction)
{
 8003b10:	b480      	push	{r7}
 8003b12:	b083      	sub	sp, #12
 8003b14:	af00      	add	r7, sp, #0
 8003b16:	4603      	mov	r3, r0
 8003b18:	71fb      	strb	r3, [r7, #7]
	if(direction)
 8003b1a:	79fb      	ldrb	r3, [r7, #7]
 8003b1c:	2b00      	cmp	r3, #0
 8003b1e:	d008      	beq.n	8003b32 <SM_GetEncoderValue+0x22>
	{
		return ENCODER_TIMER->ARR - ENCODER_TIMER->CNT;
 8003b20:	4b08      	ldr	r3, [pc, #32]	; (8003b44 <SM_GetEncoderValue+0x34>)
 8003b22:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003b24:	b29a      	uxth	r2, r3
 8003b26:	4b07      	ldr	r3, [pc, #28]	; (8003b44 <SM_GetEncoderValue+0x34>)
 8003b28:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b2a:	b29b      	uxth	r3, r3
 8003b2c:	1ad3      	subs	r3, r2, r3
 8003b2e:	b29b      	uxth	r3, r3
 8003b30:	e002      	b.n	8003b38 <SM_GetEncoderValue+0x28>
	}
	else
	{
		return ENCODER_TIMER->CNT;
 8003b32:	4b04      	ldr	r3, [pc, #16]	; (8003b44 <SM_GetEncoderValue+0x34>)
 8003b34:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b36:	b29b      	uxth	r3, r3
	}
}
 8003b38:	4618      	mov	r0, r3
 8003b3a:	370c      	adds	r7, #12
 8003b3c:	46bd      	mov	sp, r7
 8003b3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b42:	4770      	bx	lr
 8003b44:	40012c00 	.word	0x40012c00

08003b48 <SM_GetOutputInHertz>:
 *	@param None
 *	@retval None
 *
 */
float SM_GetOutputInHertz()
{
 8003b48:	b480      	push	{r7}
 8003b4a:	b085      	sub	sp, #20
 8003b4c:	af00      	add	r7, sp, #0
	volatile float tim8_psc;
	volatile float tim8_arr;

	// safe-guard against divide by zero
	(TIM8->PSC == 0) ? (tim8_psc = 1) : (tim8_psc = TIM8->PSC);
 8003b4e:	4b1d      	ldr	r3, [pc, #116]	; (8003bc4 <SM_GetOutputInHertz+0x7c>)
 8003b50:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003b52:	2b00      	cmp	r3, #0
 8003b54:	d103      	bne.n	8003b5e <SM_GetOutputInHertz+0x16>
 8003b56:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 8003b5a:	60bb      	str	r3, [r7, #8]
 8003b5c:	e007      	b.n	8003b6e <SM_GetOutputInHertz+0x26>
 8003b5e:	4b19      	ldr	r3, [pc, #100]	; (8003bc4 <SM_GetOutputInHertz+0x7c>)
 8003b60:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003b62:	ee07 3a90 	vmov	s15, r3
 8003b66:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003b6a:	edc7 7a02 	vstr	s15, [r7, #8]
	(TIM8->ARR == 0) ? (tim8_arr = 1) : (tim8_arr = TIM8->ARR);
 8003b6e:	4b15      	ldr	r3, [pc, #84]	; (8003bc4 <SM_GetOutputInHertz+0x7c>)
 8003b70:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003b72:	2b00      	cmp	r3, #0
 8003b74:	d103      	bne.n	8003b7e <SM_GetOutputInHertz+0x36>
 8003b76:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 8003b7a:	607b      	str	r3, [r7, #4]
 8003b7c:	e007      	b.n	8003b8e <SM_GetOutputInHertz+0x46>
 8003b7e:	4b11      	ldr	r3, [pc, #68]	; (8003bc4 <SM_GetOutputInHertz+0x7c>)
 8003b80:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003b82:	ee07 3a90 	vmov	s15, r3
 8003b86:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003b8a:	edc7 7a01 	vstr	s15, [r7, #4]

	float tim8_freq = SM_MCLK / (tim8_psc * tim8_arr);
 8003b8e:	ed97 7a02 	vldr	s14, [r7, #8]
 8003b92:	edd7 7a01 	vldr	s15, [r7, #4]
 8003b96:	ee27 7a27 	vmul.f32	s14, s14, s15
 8003b9a:	eddf 6a0b 	vldr	s13, [pc, #44]	; 8003bc8 <SM_GetOutputInHertz+0x80>
 8003b9e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8003ba2:	edc7 7a03 	vstr	s15, [r7, #12]


	return tim8_freq / SM_FSAMP;
 8003ba6:	edd7 7a03 	vldr	s15, [r7, #12]
 8003baa:	ed9f 7a08 	vldr	s14, [pc, #32]	; 8003bcc <SM_GetOutputInHertz+0x84>
 8003bae:	eec7 6a87 	vdiv.f32	s13, s15, s14
 8003bb2:	eef0 7a66 	vmov.f32	s15, s13
}
 8003bb6:	eeb0 0a67 	vmov.f32	s0, s15
 8003bba:	3714      	adds	r7, #20
 8003bbc:	46bd      	mov	sp, r7
 8003bbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bc2:	4770      	bx	lr
 8003bc4:	40013400 	.word	0x40013400
 8003bc8:	4d2037a0 	.word	0x4d2037a0
 8003bcc:	42f00000 	.word	0x42f00000

08003bd0 <MX_ADC1_Init>:
ADC_HandleTypeDef hadc1;
DMA_HandleTypeDef hdma_adc1;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 8003bd0:	b580      	push	{r7, lr}
 8003bd2:	b08c      	sub	sp, #48	; 0x30
 8003bd4:	af00      	add	r7, sp, #0
  ADC_MultiModeTypeDef multimode = {0};
 8003bd6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003bda:	2200      	movs	r2, #0
 8003bdc:	601a      	str	r2, [r3, #0]
 8003bde:	605a      	str	r2, [r3, #4]
 8003be0:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 8003be2:	1d3b      	adds	r3, r7, #4
 8003be4:	2220      	movs	r2, #32
 8003be6:	2100      	movs	r1, #0
 8003be8:	4618      	mov	r0, r3
 8003bea:	f008 f94f 	bl	800be8c <memset>

  /** Common config 
  */
  hadc1.Instance = ADC1;
 8003bee:	4b32      	ldr	r3, [pc, #200]	; (8003cb8 <MX_ADC1_Init+0xe8>)
 8003bf0:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8003bf4:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 8003bf6:	4b30      	ldr	r3, [pc, #192]	; (8003cb8 <MX_ADC1_Init+0xe8>)
 8003bf8:	2200      	movs	r2, #0
 8003bfa:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8003bfc:	4b2e      	ldr	r3, [pc, #184]	; (8003cb8 <MX_ADC1_Init+0xe8>)
 8003bfe:	2200      	movs	r2, #0
 8003c00:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8003c02:	4b2d      	ldr	r3, [pc, #180]	; (8003cb8 <MX_ADC1_Init+0xe8>)
 8003c04:	2200      	movs	r2, #0
 8003c06:	60da      	str	r2, [r3, #12]
  hadc1.Init.GainCompensation = 0;
 8003c08:	4b2b      	ldr	r3, [pc, #172]	; (8003cb8 <MX_ADC1_Init+0xe8>)
 8003c0a:	2200      	movs	r2, #0
 8003c0c:	611a      	str	r2, [r3, #16]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8003c0e:	4b2a      	ldr	r3, [pc, #168]	; (8003cb8 <MX_ADC1_Init+0xe8>)
 8003c10:	2200      	movs	r2, #0
 8003c12:	615a      	str	r2, [r3, #20]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8003c14:	4b28      	ldr	r3, [pc, #160]	; (8003cb8 <MX_ADC1_Init+0xe8>)
 8003c16:	2204      	movs	r2, #4
 8003c18:	619a      	str	r2, [r3, #24]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8003c1a:	4b27      	ldr	r3, [pc, #156]	; (8003cb8 <MX_ADC1_Init+0xe8>)
 8003c1c:	2200      	movs	r2, #0
 8003c1e:	771a      	strb	r2, [r3, #28]
  hadc1.Init.ContinuousConvMode = ENABLE;
 8003c20:	4b25      	ldr	r3, [pc, #148]	; (8003cb8 <MX_ADC1_Init+0xe8>)
 8003c22:	2201      	movs	r2, #1
 8003c24:	775a      	strb	r2, [r3, #29]
  hadc1.Init.NbrOfConversion = 1;
 8003c26:	4b24      	ldr	r3, [pc, #144]	; (8003cb8 <MX_ADC1_Init+0xe8>)
 8003c28:	2201      	movs	r2, #1
 8003c2a:	621a      	str	r2, [r3, #32]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8003c2c:	4b22      	ldr	r3, [pc, #136]	; (8003cb8 <MX_ADC1_Init+0xe8>)
 8003c2e:	2200      	movs	r2, #0
 8003c30:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8003c34:	4b20      	ldr	r3, [pc, #128]	; (8003cb8 <MX_ADC1_Init+0xe8>)
 8003c36:	2200      	movs	r2, #0
 8003c38:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8003c3a:	4b1f      	ldr	r3, [pc, #124]	; (8003cb8 <MX_ADC1_Init+0xe8>)
 8003c3c:	2200      	movs	r2, #0
 8003c3e:	631a      	str	r2, [r3, #48]	; 0x30
  hadc1.Init.DMAContinuousRequests = ENABLE;
 8003c40:	4b1d      	ldr	r3, [pc, #116]	; (8003cb8 <MX_ADC1_Init+0xe8>)
 8003c42:	2201      	movs	r2, #1
 8003c44:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hadc1.Init.Overrun = ADC_OVR_DATA_OVERWRITTEN;
 8003c48:	4b1b      	ldr	r3, [pc, #108]	; (8003cb8 <MX_ADC1_Init+0xe8>)
 8003c4a:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8003c4e:	63da      	str	r2, [r3, #60]	; 0x3c
  hadc1.Init.OversamplingMode = DISABLE;
 8003c50:	4b19      	ldr	r3, [pc, #100]	; (8003cb8 <MX_ADC1_Init+0xe8>)
 8003c52:	2200      	movs	r2, #0
 8003c54:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8003c58:	4817      	ldr	r0, [pc, #92]	; (8003cb8 <MX_ADC1_Init+0xe8>)
 8003c5a:	f001 ffdb 	bl	8005c14 <HAL_ADC_Init>
 8003c5e:	4603      	mov	r3, r0
 8003c60:	2b00      	cmp	r3, #0
 8003c62:	d001      	beq.n	8003c68 <MX_ADC1_Init+0x98>
  {
    Error_Handler();
 8003c64:	f000 ff2a 	bl	8004abc <Error_Handler>
  }
  /** Configure the ADC multi-mode 
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 8003c68:	2300      	movs	r3, #0
 8003c6a:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 8003c6c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003c70:	4619      	mov	r1, r3
 8003c72:	4811      	ldr	r0, [pc, #68]	; (8003cb8 <MX_ADC1_Init+0xe8>)
 8003c74:	f002 fd64 	bl	8006740 <HAL_ADCEx_MultiModeConfigChannel>
 8003c78:	4603      	mov	r3, r0
 8003c7a:	2b00      	cmp	r3, #0
 8003c7c:	d001      	beq.n	8003c82 <MX_ADC1_Init+0xb2>
  {
    Error_Handler();
 8003c7e:	f000 ff1d 	bl	8004abc <Error_Handler>
  }
  /** Configure Regular Channel 
  */
  sConfig.Channel = ADC_CHANNEL_3;
 8003c82:	4b0e      	ldr	r3, [pc, #56]	; (8003cbc <MX_ADC1_Init+0xec>)
 8003c84:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8003c86:	2306      	movs	r3, #6
 8003c88:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 8003c8a:	2300      	movs	r3, #0
 8003c8c:	60fb      	str	r3, [r7, #12]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8003c8e:	237f      	movs	r3, #127	; 0x7f
 8003c90:	613b      	str	r3, [r7, #16]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8003c92:	2304      	movs	r3, #4
 8003c94:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 8003c96:	2300      	movs	r3, #0
 8003c98:	61bb      	str	r3, [r7, #24]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8003c9a:	1d3b      	adds	r3, r7, #4
 8003c9c:	4619      	mov	r1, r3
 8003c9e:	4806      	ldr	r0, [pc, #24]	; (8003cb8 <MX_ADC1_Init+0xe8>)
 8003ca0:	f002 f978 	bl	8005f94 <HAL_ADC_ConfigChannel>
 8003ca4:	4603      	mov	r3, r0
 8003ca6:	2b00      	cmp	r3, #0
 8003ca8:	d001      	beq.n	8003cae <MX_ADC1_Init+0xde>
  {
    Error_Handler();
 8003caa:	f000 ff07 	bl	8004abc <Error_Handler>
  }

}
 8003cae:	bf00      	nop
 8003cb0:	3730      	adds	r7, #48	; 0x30
 8003cb2:	46bd      	mov	sp, r7
 8003cb4:	bd80      	pop	{r7, pc}
 8003cb6:	bf00      	nop
 8003cb8:	2000143c 	.word	0x2000143c
 8003cbc:	0c900008 	.word	0x0c900008

08003cc0 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 8003cc0:	b580      	push	{r7, lr}
 8003cc2:	b08a      	sub	sp, #40	; 0x28
 8003cc4:	af00      	add	r7, sp, #0
 8003cc6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003cc8:	f107 0314 	add.w	r3, r7, #20
 8003ccc:	2200      	movs	r2, #0
 8003cce:	601a      	str	r2, [r3, #0]
 8003cd0:	605a      	str	r2, [r3, #4]
 8003cd2:	609a      	str	r2, [r3, #8]
 8003cd4:	60da      	str	r2, [r3, #12]
 8003cd6:	611a      	str	r2, [r3, #16]
  if(adcHandle->Instance==ADC1)
 8003cd8:	687b      	ldr	r3, [r7, #4]
 8003cda:	681b      	ldr	r3, [r3, #0]
 8003cdc:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8003ce0:	d14f      	bne.n	8003d82 <HAL_ADC_MspInit+0xc2>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* ADC1 clock enable */
    __HAL_RCC_ADC12_CLK_ENABLE();
 8003ce2:	4b2a      	ldr	r3, [pc, #168]	; (8003d8c <HAL_ADC_MspInit+0xcc>)
 8003ce4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003ce6:	4a29      	ldr	r2, [pc, #164]	; (8003d8c <HAL_ADC_MspInit+0xcc>)
 8003ce8:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8003cec:	64d3      	str	r3, [r2, #76]	; 0x4c
 8003cee:	4b27      	ldr	r3, [pc, #156]	; (8003d8c <HAL_ADC_MspInit+0xcc>)
 8003cf0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003cf2:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003cf6:	613b      	str	r3, [r7, #16]
 8003cf8:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003cfa:	4b24      	ldr	r3, [pc, #144]	; (8003d8c <HAL_ADC_MspInit+0xcc>)
 8003cfc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003cfe:	4a23      	ldr	r2, [pc, #140]	; (8003d8c <HAL_ADC_MspInit+0xcc>)
 8003d00:	f043 0301 	orr.w	r3, r3, #1
 8003d04:	64d3      	str	r3, [r2, #76]	; 0x4c
 8003d06:	4b21      	ldr	r3, [pc, #132]	; (8003d8c <HAL_ADC_MspInit+0xcc>)
 8003d08:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003d0a:	f003 0301 	and.w	r3, r3, #1
 8003d0e:	60fb      	str	r3, [r7, #12]
 8003d10:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration    
    PA2     ------> ADC1_IN3 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8003d12:	2304      	movs	r3, #4
 8003d14:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8003d16:	2303      	movs	r3, #3
 8003d18:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003d1a:	2300      	movs	r3, #0
 8003d1c:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003d1e:	f107 0314 	add.w	r3, r7, #20
 8003d22:	4619      	mov	r1, r3
 8003d24:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8003d28:	f004 f8e2 	bl	8007ef0 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Channel1;
 8003d2c:	4b18      	ldr	r3, [pc, #96]	; (8003d90 <HAL_ADC_MspInit+0xd0>)
 8003d2e:	4a19      	ldr	r2, [pc, #100]	; (8003d94 <HAL_ADC_MspInit+0xd4>)
 8003d30:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Request = DMA_REQUEST_ADC1;
 8003d32:	4b17      	ldr	r3, [pc, #92]	; (8003d90 <HAL_ADC_MspInit+0xd0>)
 8003d34:	2205      	movs	r2, #5
 8003d36:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8003d38:	4b15      	ldr	r3, [pc, #84]	; (8003d90 <HAL_ADC_MspInit+0xd0>)
 8003d3a:	2200      	movs	r2, #0
 8003d3c:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8003d3e:	4b14      	ldr	r3, [pc, #80]	; (8003d90 <HAL_ADC_MspInit+0xd0>)
 8003d40:	2200      	movs	r2, #0
 8003d42:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8003d44:	4b12      	ldr	r3, [pc, #72]	; (8003d90 <HAL_ADC_MspInit+0xd0>)
 8003d46:	2280      	movs	r2, #128	; 0x80
 8003d48:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8003d4a:	4b11      	ldr	r3, [pc, #68]	; (8003d90 <HAL_ADC_MspInit+0xd0>)
 8003d4c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003d50:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8003d52:	4b0f      	ldr	r3, [pc, #60]	; (8003d90 <HAL_ADC_MspInit+0xd0>)
 8003d54:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8003d58:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 8003d5a:	4b0d      	ldr	r3, [pc, #52]	; (8003d90 <HAL_ADC_MspInit+0xd0>)
 8003d5c:	2220      	movs	r2, #32
 8003d5e:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 8003d60:	4b0b      	ldr	r3, [pc, #44]	; (8003d90 <HAL_ADC_MspInit+0xd0>)
 8003d62:	2200      	movs	r2, #0
 8003d64:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8003d66:	480a      	ldr	r0, [pc, #40]	; (8003d90 <HAL_ADC_MspInit+0xd0>)
 8003d68:	f003 fdf6 	bl	8007958 <HAL_DMA_Init>
 8003d6c:	4603      	mov	r3, r0
 8003d6e:	2b00      	cmp	r3, #0
 8003d70:	d001      	beq.n	8003d76 <HAL_ADC_MspInit+0xb6>
    {
      Error_Handler();
 8003d72:	f000 fea3 	bl	8004abc <Error_Handler>
    }

    __HAL_LINKDMA(adcHandle,DMA_Handle,hdma_adc1);
 8003d76:	687b      	ldr	r3, [r7, #4]
 8003d78:	4a05      	ldr	r2, [pc, #20]	; (8003d90 <HAL_ADC_MspInit+0xd0>)
 8003d7a:	655a      	str	r2, [r3, #84]	; 0x54
 8003d7c:	4a04      	ldr	r2, [pc, #16]	; (8003d90 <HAL_ADC_MspInit+0xd0>)
 8003d7e:	687b      	ldr	r3, [r7, #4]
 8003d80:	6293      	str	r3, [r2, #40]	; 0x28

  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 8003d82:	bf00      	nop
 8003d84:	3728      	adds	r7, #40	; 0x28
 8003d86:	46bd      	mov	sp, r7
 8003d88:	bd80      	pop	{r7, pc}
 8003d8a:	bf00      	nop
 8003d8c:	40021000 	.word	0x40021000
 8003d90:	200014a8 	.word	0x200014a8
 8003d94:	40020008 	.word	0x40020008

08003d98 <MX_COMP1_Init>:

COMP_HandleTypeDef hcomp1;

/* COMP1 init function */
void MX_COMP1_Init(void)
{
 8003d98:	b580      	push	{r7, lr}
 8003d9a:	af00      	add	r7, sp, #0

  hcomp1.Instance = COMP1;
 8003d9c:	4b0f      	ldr	r3, [pc, #60]	; (8003ddc <MX_COMP1_Init+0x44>)
 8003d9e:	4a10      	ldr	r2, [pc, #64]	; (8003de0 <MX_COMP1_Init+0x48>)
 8003da0:	601a      	str	r2, [r3, #0]
  hcomp1.Init.InputPlus = COMP_INPUT_PLUS_IO1;
 8003da2:	4b0e      	ldr	r3, [pc, #56]	; (8003ddc <MX_COMP1_Init+0x44>)
 8003da4:	2200      	movs	r2, #0
 8003da6:	605a      	str	r2, [r3, #4]
  hcomp1.Init.InputMinus = COMP_INPUT_MINUS_VREFINT;
 8003da8:	4b0c      	ldr	r3, [pc, #48]	; (8003ddc <MX_COMP1_Init+0x44>)
 8003daa:	4a0e      	ldr	r2, [pc, #56]	; (8003de4 <MX_COMP1_Init+0x4c>)
 8003dac:	609a      	str	r2, [r3, #8]
  hcomp1.Init.OutputPol = COMP_OUTPUTPOL_NONINVERTED;
 8003dae:	4b0b      	ldr	r3, [pc, #44]	; (8003ddc <MX_COMP1_Init+0x44>)
 8003db0:	2200      	movs	r2, #0
 8003db2:	611a      	str	r2, [r3, #16]
  hcomp1.Init.Hysteresis = COMP_HYSTERESIS_NONE;
 8003db4:	4b09      	ldr	r3, [pc, #36]	; (8003ddc <MX_COMP1_Init+0x44>)
 8003db6:	2200      	movs	r2, #0
 8003db8:	60da      	str	r2, [r3, #12]
  hcomp1.Init.BlankingSrce = COMP_BLANKINGSRC_NONE;
 8003dba:	4b08      	ldr	r3, [pc, #32]	; (8003ddc <MX_COMP1_Init+0x44>)
 8003dbc:	2200      	movs	r2, #0
 8003dbe:	615a      	str	r2, [r3, #20]
  hcomp1.Init.TriggerMode = COMP_TRIGGERMODE_NONE;
 8003dc0:	4b06      	ldr	r3, [pc, #24]	; (8003ddc <MX_COMP1_Init+0x44>)
 8003dc2:	2200      	movs	r2, #0
 8003dc4:	619a      	str	r2, [r3, #24]
  if (HAL_COMP_Init(&hcomp1) != HAL_OK)
 8003dc6:	4805      	ldr	r0, [pc, #20]	; (8003ddc <MX_COMP1_Init+0x44>)
 8003dc8:	f002 ff0e 	bl	8006be8 <HAL_COMP_Init>
 8003dcc:	4603      	mov	r3, r0
 8003dce:	2b00      	cmp	r3, #0
 8003dd0:	d001      	beq.n	8003dd6 <MX_COMP1_Init+0x3e>
  {
    Error_Handler();
 8003dd2:	f000 fe73 	bl	8004abc <Error_Handler>
  }

}
 8003dd6:	bf00      	nop
 8003dd8:	bd80      	pop	{r7, pc}
 8003dda:	bf00      	nop
 8003ddc:	20001508 	.word	0x20001508
 8003de0:	40010200 	.word	0x40010200
 8003de4:	00800030 	.word	0x00800030

08003de8 <HAL_COMP_MspInit>:

void HAL_COMP_MspInit(COMP_HandleTypeDef* compHandle)
{
 8003de8:	b580      	push	{r7, lr}
 8003dea:	b088      	sub	sp, #32
 8003dec:	af00      	add	r7, sp, #0
 8003dee:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003df0:	f107 030c 	add.w	r3, r7, #12
 8003df4:	2200      	movs	r2, #0
 8003df6:	601a      	str	r2, [r3, #0]
 8003df8:	605a      	str	r2, [r3, #4]
 8003dfa:	609a      	str	r2, [r3, #8]
 8003dfc:	60da      	str	r2, [r3, #12]
 8003dfe:	611a      	str	r2, [r3, #16]
  if(compHandle->Instance==COMP1)
 8003e00:	687b      	ldr	r3, [r7, #4]
 8003e02:	681b      	ldr	r3, [r3, #0]
 8003e04:	4a0f      	ldr	r2, [pc, #60]	; (8003e44 <HAL_COMP_MspInit+0x5c>)
 8003e06:	4293      	cmp	r3, r2
 8003e08:	d118      	bne.n	8003e3c <HAL_COMP_MspInit+0x54>
  {
  /* USER CODE BEGIN COMP1_MspInit 0 */

  /* USER CODE END COMP1_MspInit 0 */
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003e0a:	4b0f      	ldr	r3, [pc, #60]	; (8003e48 <HAL_COMP_MspInit+0x60>)
 8003e0c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003e0e:	4a0e      	ldr	r2, [pc, #56]	; (8003e48 <HAL_COMP_MspInit+0x60>)
 8003e10:	f043 0301 	orr.w	r3, r3, #1
 8003e14:	64d3      	str	r3, [r2, #76]	; 0x4c
 8003e16:	4b0c      	ldr	r3, [pc, #48]	; (8003e48 <HAL_COMP_MspInit+0x60>)
 8003e18:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003e1a:	f003 0301 	and.w	r3, r3, #1
 8003e1e:	60bb      	str	r3, [r7, #8]
 8003e20:	68bb      	ldr	r3, [r7, #8]
    /**COMP1 GPIO Configuration    
    PA1     ------> COMP1_INP 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 8003e22:	2302      	movs	r3, #2
 8003e24:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8003e26:	2303      	movs	r3, #3
 8003e28:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003e2a:	2300      	movs	r3, #0
 8003e2c:	617b      	str	r3, [r7, #20]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003e2e:	f107 030c 	add.w	r3, r7, #12
 8003e32:	4619      	mov	r1, r3
 8003e34:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8003e38:	f004 f85a 	bl	8007ef0 <HAL_GPIO_Init>

  /* USER CODE BEGIN COMP1_MspInit 1 */

  /* USER CODE END COMP1_MspInit 1 */
  }
}
 8003e3c:	bf00      	nop
 8003e3e:	3720      	adds	r7, #32
 8003e40:	46bd      	mov	sp, r7
 8003e42:	bd80      	pop	{r7, pc}
 8003e44:	40010200 	.word	0x40010200
 8003e48:	40021000 	.word	0x40021000

08003e4c <MX_DAC1_Init>:
DMA_HandleTypeDef hdma_dac1_ch1;
DMA_HandleTypeDef hdma_dac2_ch1;

/* DAC1 init function */
void MX_DAC1_Init(void)
{
 8003e4c:	b580      	push	{r7, lr}
 8003e4e:	b08c      	sub	sp, #48	; 0x30
 8003e50:	af00      	add	r7, sp, #0
  DAC_ChannelConfTypeDef sConfig = {0};
 8003e52:	463b      	mov	r3, r7
 8003e54:	2230      	movs	r2, #48	; 0x30
 8003e56:	2100      	movs	r1, #0
 8003e58:	4618      	mov	r0, r3
 8003e5a:	f008 f817 	bl	800be8c <memset>

  /** DAC Initialization 
  */
  hdac1.Instance = DAC1;
 8003e5e:	4b1e      	ldr	r3, [pc, #120]	; (8003ed8 <MX_DAC1_Init+0x8c>)
 8003e60:	4a1e      	ldr	r2, [pc, #120]	; (8003edc <MX_DAC1_Init+0x90>)
 8003e62:	601a      	str	r2, [r3, #0]
  if (HAL_DAC_Init(&hdac1) != HAL_OK)
 8003e64:	481c      	ldr	r0, [pc, #112]	; (8003ed8 <MX_DAC1_Init+0x8c>)
 8003e66:	f003 f962 	bl	800712e <HAL_DAC_Init>
 8003e6a:	4603      	mov	r3, r0
 8003e6c:	2b00      	cmp	r3, #0
 8003e6e:	d001      	beq.n	8003e74 <MX_DAC1_Init+0x28>
  {
    Error_Handler();
 8003e70:	f000 fe24 	bl	8004abc <Error_Handler>
  }
  /** DAC channel OUT1 config 
  */
  sConfig.DAC_HighFrequency = DAC_HIGH_FREQUENCY_INTERFACE_MODE_ABOVE_80MHZ;
 8003e74:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8003e78:	603b      	str	r3, [r7, #0]
  sConfig.DAC_DMADoubleDataMode = DISABLE;
 8003e7a:	2300      	movs	r3, #0
 8003e7c:	713b      	strb	r3, [r7, #4]
  sConfig.DAC_SignedFormat = DISABLE;
 8003e7e:	2300      	movs	r3, #0
 8003e80:	717b      	strb	r3, [r7, #5]
  sConfig.DAC_SampleAndHold = DAC_SAMPLEANDHOLD_DISABLE;
 8003e82:	2300      	movs	r3, #0
 8003e84:	60bb      	str	r3, [r7, #8]
  sConfig.DAC_Trigger = DAC_TRIGGER_T8_TRGO;
 8003e86:	2306      	movs	r3, #6
 8003e88:	60fb      	str	r3, [r7, #12]
  sConfig.DAC_Trigger2 = DAC_TRIGGER_NONE;
 8003e8a:	2300      	movs	r3, #0
 8003e8c:	613b      	str	r3, [r7, #16]
  sConfig.DAC_OutputBuffer = DAC_OUTPUTBUFFER_ENABLE;
 8003e8e:	2300      	movs	r3, #0
 8003e90:	617b      	str	r3, [r7, #20]
  sConfig.DAC_ConnectOnChipPeripheral = DAC_CHIPCONNECT_DISABLE;
 8003e92:	2301      	movs	r3, #1
 8003e94:	61bb      	str	r3, [r7, #24]
  sConfig.DAC_UserTrimming = DAC_TRIMMING_FACTORY;
 8003e96:	2300      	movs	r3, #0
 8003e98:	61fb      	str	r3, [r7, #28]
  if (HAL_DAC_ConfigChannel(&hdac1, &sConfig, DAC_CHANNEL_1) != HAL_OK)
 8003e9a:	463b      	mov	r3, r7
 8003e9c:	2200      	movs	r2, #0
 8003e9e:	4619      	mov	r1, r3
 8003ea0:	480d      	ldr	r0, [pc, #52]	; (8003ed8 <MX_DAC1_Init+0x8c>)
 8003ea2:	f003 fb23 	bl	80074ec <HAL_DAC_ConfigChannel>
 8003ea6:	4603      	mov	r3, r0
 8003ea8:	2b00      	cmp	r3, #0
 8003eaa:	d001      	beq.n	8003eb0 <MX_DAC1_Init+0x64>
  {
    Error_Handler();
 8003eac:	f000 fe06 	bl	8004abc <Error_Handler>
  }
  /** DAC channel OUT2 config 
  */
  sConfig.DAC_Trigger = DAC_TRIGGER_NONE;
 8003eb0:	2300      	movs	r3, #0
 8003eb2:	60fb      	str	r3, [r7, #12]
  sConfig.DAC_ConnectOnChipPeripheral = DAC_CHIPCONNECT_DISABLE;
 8003eb4:	2301      	movs	r3, #1
 8003eb6:	61bb      	str	r3, [r7, #24]
  if (HAL_DAC_ConfigChannel(&hdac1, &sConfig, DAC_CHANNEL_2) != HAL_OK)
 8003eb8:	463b      	mov	r3, r7
 8003eba:	2210      	movs	r2, #16
 8003ebc:	4619      	mov	r1, r3
 8003ebe:	4806      	ldr	r0, [pc, #24]	; (8003ed8 <MX_DAC1_Init+0x8c>)
 8003ec0:	f003 fb14 	bl	80074ec <HAL_DAC_ConfigChannel>
 8003ec4:	4603      	mov	r3, r0
 8003ec6:	2b00      	cmp	r3, #0
 8003ec8:	d001      	beq.n	8003ece <MX_DAC1_Init+0x82>
  {
    Error_Handler();
 8003eca:	f000 fdf7 	bl	8004abc <Error_Handler>
  }

}
 8003ece:	bf00      	nop
 8003ed0:	3730      	adds	r7, #48	; 0x30
 8003ed2:	46bd      	mov	sp, r7
 8003ed4:	bd80      	pop	{r7, pc}
 8003ed6:	bf00      	nop
 8003ed8:	20001540 	.word	0x20001540
 8003edc:	50000800 	.word	0x50000800

08003ee0 <MX_DAC2_Init>:
/* DAC2 init function */
void MX_DAC2_Init(void)
{
 8003ee0:	b580      	push	{r7, lr}
 8003ee2:	b08c      	sub	sp, #48	; 0x30
 8003ee4:	af00      	add	r7, sp, #0
  DAC_ChannelConfTypeDef sConfig = {0};
 8003ee6:	463b      	mov	r3, r7
 8003ee8:	2230      	movs	r2, #48	; 0x30
 8003eea:	2100      	movs	r1, #0
 8003eec:	4618      	mov	r0, r3
 8003eee:	f007 ffcd 	bl	800be8c <memset>

  /** DAC Initialization 
  */
  hdac2.Instance = DAC2;
 8003ef2:	4b16      	ldr	r3, [pc, #88]	; (8003f4c <MX_DAC2_Init+0x6c>)
 8003ef4:	4a16      	ldr	r2, [pc, #88]	; (8003f50 <MX_DAC2_Init+0x70>)
 8003ef6:	601a      	str	r2, [r3, #0]
  if (HAL_DAC_Init(&hdac2) != HAL_OK)
 8003ef8:	4814      	ldr	r0, [pc, #80]	; (8003f4c <MX_DAC2_Init+0x6c>)
 8003efa:	f003 f918 	bl	800712e <HAL_DAC_Init>
 8003efe:	4603      	mov	r3, r0
 8003f00:	2b00      	cmp	r3, #0
 8003f02:	d001      	beq.n	8003f08 <MX_DAC2_Init+0x28>
  {
    Error_Handler();
 8003f04:	f000 fdda 	bl	8004abc <Error_Handler>
  }
  /** DAC channel OUT1 config 
  */
  sConfig.DAC_HighFrequency = DAC_HIGH_FREQUENCY_INTERFACE_MODE_ABOVE_80MHZ;
 8003f08:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8003f0c:	603b      	str	r3, [r7, #0]
  sConfig.DAC_DMADoubleDataMode = DISABLE;
 8003f0e:	2300      	movs	r3, #0
 8003f10:	713b      	strb	r3, [r7, #4]
  sConfig.DAC_SignedFormat = DISABLE;
 8003f12:	2300      	movs	r3, #0
 8003f14:	717b      	strb	r3, [r7, #5]
  sConfig.DAC_SampleAndHold = DAC_SAMPLEANDHOLD_DISABLE;
 8003f16:	2300      	movs	r3, #0
 8003f18:	60bb      	str	r3, [r7, #8]
  sConfig.DAC_Trigger = DAC_TRIGGER_T8_TRGO;
 8003f1a:	2306      	movs	r3, #6
 8003f1c:	60fb      	str	r3, [r7, #12]
  sConfig.DAC_Trigger2 = DAC_TRIGGER_NONE;
 8003f1e:	2300      	movs	r3, #0
 8003f20:	613b      	str	r3, [r7, #16]
  sConfig.DAC_OutputBuffer = DAC_OUTPUTBUFFER_ENABLE;
 8003f22:	2300      	movs	r3, #0
 8003f24:	617b      	str	r3, [r7, #20]
  sConfig.DAC_ConnectOnChipPeripheral = DAC_CHIPCONNECT_DISABLE;
 8003f26:	2301      	movs	r3, #1
 8003f28:	61bb      	str	r3, [r7, #24]
  sConfig.DAC_UserTrimming = DAC_TRIMMING_FACTORY;
 8003f2a:	2300      	movs	r3, #0
 8003f2c:	61fb      	str	r3, [r7, #28]
  if (HAL_DAC_ConfigChannel(&hdac2, &sConfig, DAC_CHANNEL_1) != HAL_OK)
 8003f2e:	463b      	mov	r3, r7
 8003f30:	2200      	movs	r2, #0
 8003f32:	4619      	mov	r1, r3
 8003f34:	4805      	ldr	r0, [pc, #20]	; (8003f4c <MX_DAC2_Init+0x6c>)
 8003f36:	f003 fad9 	bl	80074ec <HAL_DAC_ConfigChannel>
 8003f3a:	4603      	mov	r3, r0
 8003f3c:	2b00      	cmp	r3, #0
 8003f3e:	d001      	beq.n	8003f44 <MX_DAC2_Init+0x64>
  {
    Error_Handler();
 8003f40:	f000 fdbc 	bl	8004abc <Error_Handler>
  }

}
 8003f44:	bf00      	nop
 8003f46:	3730      	adds	r7, #48	; 0x30
 8003f48:	46bd      	mov	sp, r7
 8003f4a:	bd80      	pop	{r7, pc}
 8003f4c:	2000152c 	.word	0x2000152c
 8003f50:	50000c00 	.word	0x50000c00

08003f54 <HAL_DAC_MspInit>:

void HAL_DAC_MspInit(DAC_HandleTypeDef* dacHandle)
{
 8003f54:	b580      	push	{r7, lr}
 8003f56:	b08c      	sub	sp, #48	; 0x30
 8003f58:	af00      	add	r7, sp, #0
 8003f5a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003f5c:	f107 031c 	add.w	r3, r7, #28
 8003f60:	2200      	movs	r2, #0
 8003f62:	601a      	str	r2, [r3, #0]
 8003f64:	605a      	str	r2, [r3, #4]
 8003f66:	609a      	str	r2, [r3, #8]
 8003f68:	60da      	str	r2, [r3, #12]
 8003f6a:	611a      	str	r2, [r3, #16]
  if(dacHandle->Instance==DAC1)
 8003f6c:	687b      	ldr	r3, [r7, #4]
 8003f6e:	681b      	ldr	r3, [r3, #0]
 8003f70:	4a56      	ldr	r2, [pc, #344]	; (80040cc <HAL_DAC_MspInit+0x178>)
 8003f72:	4293      	cmp	r3, r2
 8003f74:	d150      	bne.n	8004018 <HAL_DAC_MspInit+0xc4>
  {
  /* USER CODE BEGIN DAC1_MspInit 0 */

  /* USER CODE END DAC1_MspInit 0 */
    /* DAC1 clock enable */
    __HAL_RCC_DAC1_CLK_ENABLE();
 8003f76:	4b56      	ldr	r3, [pc, #344]	; (80040d0 <HAL_DAC_MspInit+0x17c>)
 8003f78:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003f7a:	4a55      	ldr	r2, [pc, #340]	; (80040d0 <HAL_DAC_MspInit+0x17c>)
 8003f7c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003f80:	64d3      	str	r3, [r2, #76]	; 0x4c
 8003f82:	4b53      	ldr	r3, [pc, #332]	; (80040d0 <HAL_DAC_MspInit+0x17c>)
 8003f84:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003f86:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003f8a:	61bb      	str	r3, [r7, #24]
 8003f8c:	69bb      	ldr	r3, [r7, #24]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003f8e:	4b50      	ldr	r3, [pc, #320]	; (80040d0 <HAL_DAC_MspInit+0x17c>)
 8003f90:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003f92:	4a4f      	ldr	r2, [pc, #316]	; (80040d0 <HAL_DAC_MspInit+0x17c>)
 8003f94:	f043 0301 	orr.w	r3, r3, #1
 8003f98:	64d3      	str	r3, [r2, #76]	; 0x4c
 8003f9a:	4b4d      	ldr	r3, [pc, #308]	; (80040d0 <HAL_DAC_MspInit+0x17c>)
 8003f9c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003f9e:	f003 0301 	and.w	r3, r3, #1
 8003fa2:	617b      	str	r3, [r7, #20]
 8003fa4:	697b      	ldr	r3, [r7, #20]
    /**DAC1 GPIO Configuration    
    PA4     ------> DAC1_OUT1
    PA5     ------> DAC1_OUT2 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 8003fa6:	2330      	movs	r3, #48	; 0x30
 8003fa8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8003faa:	2303      	movs	r3, #3
 8003fac:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003fae:	2300      	movs	r3, #0
 8003fb0:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003fb2:	f107 031c 	add.w	r3, r7, #28
 8003fb6:	4619      	mov	r1, r3
 8003fb8:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8003fbc:	f003 ff98 	bl	8007ef0 <HAL_GPIO_Init>

    /* DAC1 DMA Init */
    /* DAC1_CH1 Init */
    hdma_dac1_ch1.Instance = DMA1_Channel2;
 8003fc0:	4b44      	ldr	r3, [pc, #272]	; (80040d4 <HAL_DAC_MspInit+0x180>)
 8003fc2:	4a45      	ldr	r2, [pc, #276]	; (80040d8 <HAL_DAC_MspInit+0x184>)
 8003fc4:	601a      	str	r2, [r3, #0]
    hdma_dac1_ch1.Init.Request = DMA_REQUEST_DAC1_CHANNEL1;
 8003fc6:	4b43      	ldr	r3, [pc, #268]	; (80040d4 <HAL_DAC_MspInit+0x180>)
 8003fc8:	2206      	movs	r2, #6
 8003fca:	605a      	str	r2, [r3, #4]
    hdma_dac1_ch1.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8003fcc:	4b41      	ldr	r3, [pc, #260]	; (80040d4 <HAL_DAC_MspInit+0x180>)
 8003fce:	2210      	movs	r2, #16
 8003fd0:	609a      	str	r2, [r3, #8]
    hdma_dac1_ch1.Init.PeriphInc = DMA_PINC_DISABLE;
 8003fd2:	4b40      	ldr	r3, [pc, #256]	; (80040d4 <HAL_DAC_MspInit+0x180>)
 8003fd4:	2200      	movs	r2, #0
 8003fd6:	60da      	str	r2, [r3, #12]
    hdma_dac1_ch1.Init.MemInc = DMA_MINC_ENABLE;
 8003fd8:	4b3e      	ldr	r3, [pc, #248]	; (80040d4 <HAL_DAC_MspInit+0x180>)
 8003fda:	2280      	movs	r2, #128	; 0x80
 8003fdc:	611a      	str	r2, [r3, #16]
    hdma_dac1_ch1.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8003fde:	4b3d      	ldr	r3, [pc, #244]	; (80040d4 <HAL_DAC_MspInit+0x180>)
 8003fe0:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003fe4:	615a      	str	r2, [r3, #20]
    hdma_dac1_ch1.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8003fe6:	4b3b      	ldr	r3, [pc, #236]	; (80040d4 <HAL_DAC_MspInit+0x180>)
 8003fe8:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8003fec:	619a      	str	r2, [r3, #24]
    hdma_dac1_ch1.Init.Mode = DMA_CIRCULAR;
 8003fee:	4b39      	ldr	r3, [pc, #228]	; (80040d4 <HAL_DAC_MspInit+0x180>)
 8003ff0:	2220      	movs	r2, #32
 8003ff2:	61da      	str	r2, [r3, #28]
    hdma_dac1_ch1.Init.Priority = DMA_PRIORITY_LOW;
 8003ff4:	4b37      	ldr	r3, [pc, #220]	; (80040d4 <HAL_DAC_MspInit+0x180>)
 8003ff6:	2200      	movs	r2, #0
 8003ff8:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_dac1_ch1) != HAL_OK)
 8003ffa:	4836      	ldr	r0, [pc, #216]	; (80040d4 <HAL_DAC_MspInit+0x180>)
 8003ffc:	f003 fcac 	bl	8007958 <HAL_DMA_Init>
 8004000:	4603      	mov	r3, r0
 8004002:	2b00      	cmp	r3, #0
 8004004:	d001      	beq.n	800400a <HAL_DAC_MspInit+0xb6>
    {
      Error_Handler();
 8004006:	f000 fd59 	bl	8004abc <Error_Handler>
    }

    __HAL_LINKDMA(dacHandle,DMA_Handle1,hdma_dac1_ch1);
 800400a:	687b      	ldr	r3, [r7, #4]
 800400c:	4a31      	ldr	r2, [pc, #196]	; (80040d4 <HAL_DAC_MspInit+0x180>)
 800400e:	609a      	str	r2, [r3, #8]
 8004010:	4a30      	ldr	r2, [pc, #192]	; (80040d4 <HAL_DAC_MspInit+0x180>)
 8004012:	687b      	ldr	r3, [r7, #4]
 8004014:	6293      	str	r3, [r2, #40]	; 0x28

  /* USER CODE BEGIN DAC2_MspInit 1 */

  /* USER CODE END DAC2_MspInit 1 */
  }
}
 8004016:	e054      	b.n	80040c2 <HAL_DAC_MspInit+0x16e>
  else if(dacHandle->Instance==DAC2)
 8004018:	687b      	ldr	r3, [r7, #4]
 800401a:	681b      	ldr	r3, [r3, #0]
 800401c:	4a2f      	ldr	r2, [pc, #188]	; (80040dc <HAL_DAC_MspInit+0x188>)
 800401e:	4293      	cmp	r3, r2
 8004020:	d14f      	bne.n	80040c2 <HAL_DAC_MspInit+0x16e>
    __HAL_RCC_DAC2_CLK_ENABLE();
 8004022:	4b2b      	ldr	r3, [pc, #172]	; (80040d0 <HAL_DAC_MspInit+0x17c>)
 8004024:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004026:	4a2a      	ldr	r2, [pc, #168]	; (80040d0 <HAL_DAC_MspInit+0x17c>)
 8004028:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800402c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800402e:	4b28      	ldr	r3, [pc, #160]	; (80040d0 <HAL_DAC_MspInit+0x17c>)
 8004030:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004032:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004036:	613b      	str	r3, [r7, #16]
 8004038:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800403a:	4b25      	ldr	r3, [pc, #148]	; (80040d0 <HAL_DAC_MspInit+0x17c>)
 800403c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800403e:	4a24      	ldr	r2, [pc, #144]	; (80040d0 <HAL_DAC_MspInit+0x17c>)
 8004040:	f043 0301 	orr.w	r3, r3, #1
 8004044:	64d3      	str	r3, [r2, #76]	; 0x4c
 8004046:	4b22      	ldr	r3, [pc, #136]	; (80040d0 <HAL_DAC_MspInit+0x17c>)
 8004048:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800404a:	f003 0301 	and.w	r3, r3, #1
 800404e:	60fb      	str	r3, [r7, #12]
 8004050:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8004052:	2340      	movs	r3, #64	; 0x40
 8004054:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8004056:	2303      	movs	r3, #3
 8004058:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800405a:	2300      	movs	r3, #0
 800405c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800405e:	f107 031c 	add.w	r3, r7, #28
 8004062:	4619      	mov	r1, r3
 8004064:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8004068:	f003 ff42 	bl	8007ef0 <HAL_GPIO_Init>
    hdma_dac2_ch1.Instance = DMA1_Channel3;
 800406c:	4b1c      	ldr	r3, [pc, #112]	; (80040e0 <HAL_DAC_MspInit+0x18c>)
 800406e:	4a1d      	ldr	r2, [pc, #116]	; (80040e4 <HAL_DAC_MspInit+0x190>)
 8004070:	601a      	str	r2, [r3, #0]
    hdma_dac2_ch1.Init.Request = DMA_REQUEST_DAC2_CHANNEL1;
 8004072:	4b1b      	ldr	r3, [pc, #108]	; (80040e0 <HAL_DAC_MspInit+0x18c>)
 8004074:	2229      	movs	r2, #41	; 0x29
 8004076:	605a      	str	r2, [r3, #4]
    hdma_dac2_ch1.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8004078:	4b19      	ldr	r3, [pc, #100]	; (80040e0 <HAL_DAC_MspInit+0x18c>)
 800407a:	2210      	movs	r2, #16
 800407c:	609a      	str	r2, [r3, #8]
    hdma_dac2_ch1.Init.PeriphInc = DMA_PINC_DISABLE;
 800407e:	4b18      	ldr	r3, [pc, #96]	; (80040e0 <HAL_DAC_MspInit+0x18c>)
 8004080:	2200      	movs	r2, #0
 8004082:	60da      	str	r2, [r3, #12]
    hdma_dac2_ch1.Init.MemInc = DMA_MINC_ENABLE;
 8004084:	4b16      	ldr	r3, [pc, #88]	; (80040e0 <HAL_DAC_MspInit+0x18c>)
 8004086:	2280      	movs	r2, #128	; 0x80
 8004088:	611a      	str	r2, [r3, #16]
    hdma_dac2_ch1.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 800408a:	4b15      	ldr	r3, [pc, #84]	; (80040e0 <HAL_DAC_MspInit+0x18c>)
 800408c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8004090:	615a      	str	r2, [r3, #20]
    hdma_dac2_ch1.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8004092:	4b13      	ldr	r3, [pc, #76]	; (80040e0 <HAL_DAC_MspInit+0x18c>)
 8004094:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8004098:	619a      	str	r2, [r3, #24]
    hdma_dac2_ch1.Init.Mode = DMA_CIRCULAR;
 800409a:	4b11      	ldr	r3, [pc, #68]	; (80040e0 <HAL_DAC_MspInit+0x18c>)
 800409c:	2220      	movs	r2, #32
 800409e:	61da      	str	r2, [r3, #28]
    hdma_dac2_ch1.Init.Priority = DMA_PRIORITY_LOW;
 80040a0:	4b0f      	ldr	r3, [pc, #60]	; (80040e0 <HAL_DAC_MspInit+0x18c>)
 80040a2:	2200      	movs	r2, #0
 80040a4:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_dac2_ch1) != HAL_OK)
 80040a6:	480e      	ldr	r0, [pc, #56]	; (80040e0 <HAL_DAC_MspInit+0x18c>)
 80040a8:	f003 fc56 	bl	8007958 <HAL_DMA_Init>
 80040ac:	4603      	mov	r3, r0
 80040ae:	2b00      	cmp	r3, #0
 80040b0:	d001      	beq.n	80040b6 <HAL_DAC_MspInit+0x162>
      Error_Handler();
 80040b2:	f000 fd03 	bl	8004abc <Error_Handler>
    __HAL_LINKDMA(dacHandle,DMA_Handle1,hdma_dac2_ch1);
 80040b6:	687b      	ldr	r3, [r7, #4]
 80040b8:	4a09      	ldr	r2, [pc, #36]	; (80040e0 <HAL_DAC_MspInit+0x18c>)
 80040ba:	609a      	str	r2, [r3, #8]
 80040bc:	4a08      	ldr	r2, [pc, #32]	; (80040e0 <HAL_DAC_MspInit+0x18c>)
 80040be:	687b      	ldr	r3, [r7, #4]
 80040c0:	6293      	str	r3, [r2, #40]	; 0x28
}
 80040c2:	bf00      	nop
 80040c4:	3730      	adds	r7, #48	; 0x30
 80040c6:	46bd      	mov	sp, r7
 80040c8:	bd80      	pop	{r7, pc}
 80040ca:	bf00      	nop
 80040cc:	50000800 	.word	0x50000800
 80040d0:	40021000 	.word	0x40021000
 80040d4:	20001554 	.word	0x20001554
 80040d8:	4002001c 	.word	0x4002001c
 80040dc:	50000c00 	.word	0x50000c00
 80040e0:	200015b4 	.word	0x200015b4
 80040e4:	40020030 	.word	0x40020030

080040e8 <MX_DMA_Init>:

/** 
  * Enable DMA controller clock
  */
void MX_DMA_Init(void) 
{
 80040e8:	b580      	push	{r7, lr}
 80040ea:	b082      	sub	sp, #8
 80040ec:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMAMUX1_CLK_ENABLE();
 80040ee:	4b1a      	ldr	r3, [pc, #104]	; (8004158 <MX_DMA_Init+0x70>)
 80040f0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80040f2:	4a19      	ldr	r2, [pc, #100]	; (8004158 <MX_DMA_Init+0x70>)
 80040f4:	f043 0304 	orr.w	r3, r3, #4
 80040f8:	6493      	str	r3, [r2, #72]	; 0x48
 80040fa:	4b17      	ldr	r3, [pc, #92]	; (8004158 <MX_DMA_Init+0x70>)
 80040fc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80040fe:	f003 0304 	and.w	r3, r3, #4
 8004102:	607b      	str	r3, [r7, #4]
 8004104:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA1_CLK_ENABLE();
 8004106:	4b14      	ldr	r3, [pc, #80]	; (8004158 <MX_DMA_Init+0x70>)
 8004108:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800410a:	4a13      	ldr	r2, [pc, #76]	; (8004158 <MX_DMA_Init+0x70>)
 800410c:	f043 0301 	orr.w	r3, r3, #1
 8004110:	6493      	str	r3, [r2, #72]	; 0x48
 8004112:	4b11      	ldr	r3, [pc, #68]	; (8004158 <MX_DMA_Init+0x70>)
 8004114:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004116:	f003 0301 	and.w	r3, r3, #1
 800411a:	603b      	str	r3, [r7, #0]
 800411c:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 1, 0);
 800411e:	2200      	movs	r2, #0
 8004120:	2101      	movs	r1, #1
 8004122:	200b      	movs	r0, #11
 8004124:	f002 ffcf 	bl	80070c6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 8004128:	200b      	movs	r0, #11
 800412a:	f002 ffe6 	bl	80070fa <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel2_IRQn, 0, 0);
 800412e:	2200      	movs	r2, #0
 8004130:	2100      	movs	r1, #0
 8004132:	200c      	movs	r0, #12
 8004134:	f002 ffc7 	bl	80070c6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel2_IRQn);
 8004138:	200c      	movs	r0, #12
 800413a:	f002 ffde 	bl	80070fa <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel3_IRQn, 0, 0);
 800413e:	2200      	movs	r2, #0
 8004140:	2100      	movs	r1, #0
 8004142:	200d      	movs	r0, #13
 8004144:	f002 ffbf 	bl	80070c6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel3_IRQn);
 8004148:	200d      	movs	r0, #13
 800414a:	f002 ffd6 	bl	80070fa <HAL_NVIC_EnableIRQ>

}
 800414e:	bf00      	nop
 8004150:	3708      	adds	r7, #8
 8004152:	46bd      	mov	sp, r7
 8004154:	bd80      	pop	{r7, pc}
 8004156:	bf00      	nop
 8004158:	40021000 	.word	0x40021000

0800415c <update_dc_bias_sweep>:
uint16_t dcbias = 0;
int dcbias_dir = 1;
int dcinverted = 0;

void update_dc_bias_sweep()
{
 800415c:	b580      	push	{r7, lr}
 800415e:	af00      	add	r7, sp, #0
	  // up=1, down=0
	  (dcbias_dir) ? (dcbias++) : (dcbias--);
 8004160:	4b20      	ldr	r3, [pc, #128]	; (80041e4 <update_dc_bias_sweep+0x88>)
 8004162:	681b      	ldr	r3, [r3, #0]
 8004164:	2b00      	cmp	r3, #0
 8004166:	d006      	beq.n	8004176 <update_dc_bias_sweep+0x1a>
 8004168:	4b1f      	ldr	r3, [pc, #124]	; (80041e8 <update_dc_bias_sweep+0x8c>)
 800416a:	881b      	ldrh	r3, [r3, #0]
 800416c:	3301      	adds	r3, #1
 800416e:	b29a      	uxth	r2, r3
 8004170:	4b1d      	ldr	r3, [pc, #116]	; (80041e8 <update_dc_bias_sweep+0x8c>)
 8004172:	801a      	strh	r2, [r3, #0]
 8004174:	e005      	b.n	8004182 <update_dc_bias_sweep+0x26>
 8004176:	4b1c      	ldr	r3, [pc, #112]	; (80041e8 <update_dc_bias_sweep+0x8c>)
 8004178:	881b      	ldrh	r3, [r3, #0]
 800417a:	3b01      	subs	r3, #1
 800417c:	b29a      	uxth	r2, r3
 800417e:	4b1a      	ldr	r3, [pc, #104]	; (80041e8 <update_dc_bias_sweep+0x8c>)
 8004180:	801a      	strh	r2, [r3, #0]

	  // invert the bias signal at zero crossing
	  if(dcbias < 1) {
 8004182:	4b19      	ldr	r3, [pc, #100]	; (80041e8 <update_dc_bias_sweep+0x8c>)
 8004184:	881b      	ldrh	r3, [r3, #0]
 8004186:	2b00      	cmp	r3, #0
 8004188:	d10a      	bne.n	80041a0 <update_dc_bias_sweep+0x44>
		(dcinverted) ? (dcinverted=0) : (dcinverted=1);
 800418a:	4b18      	ldr	r3, [pc, #96]	; (80041ec <update_dc_bias_sweep+0x90>)
 800418c:	681b      	ldr	r3, [r3, #0]
 800418e:	2b00      	cmp	r3, #0
 8004190:	d003      	beq.n	800419a <update_dc_bias_sweep+0x3e>
 8004192:	4b16      	ldr	r3, [pc, #88]	; (80041ec <update_dc_bias_sweep+0x90>)
 8004194:	2200      	movs	r2, #0
 8004196:	601a      	str	r2, [r3, #0]
 8004198:	e002      	b.n	80041a0 <update_dc_bias_sweep+0x44>
 800419a:	4b14      	ldr	r3, [pc, #80]	; (80041ec <update_dc_bias_sweep+0x90>)
 800419c:	2201      	movs	r2, #1
 800419e:	601a      	str	r2, [r3, #0]
	  }

	  // change direction if dac limits are reached
	  if(dcbias < 1) 	{ dcbias_dir = 1; }
 80041a0:	4b11      	ldr	r3, [pc, #68]	; (80041e8 <update_dc_bias_sweep+0x8c>)
 80041a2:	881b      	ldrh	r3, [r3, #0]
 80041a4:	2b00      	cmp	r3, #0
 80041a6:	d102      	bne.n	80041ae <update_dc_bias_sweep+0x52>
 80041a8:	4b0e      	ldr	r3, [pc, #56]	; (80041e4 <update_dc_bias_sweep+0x88>)
 80041aa:	2201      	movs	r2, #1
 80041ac:	601a      	str	r2, [r3, #0]
	  if(dcbias > 4095) { dcbias_dir = 0; }
 80041ae:	4b0e      	ldr	r3, [pc, #56]	; (80041e8 <update_dc_bias_sweep+0x8c>)
 80041b0:	881b      	ldrh	r3, [r3, #0]
 80041b2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80041b6:	d302      	bcc.n	80041be <update_dc_bias_sweep+0x62>
 80041b8:	4b0a      	ldr	r3, [pc, #40]	; (80041e4 <update_dc_bias_sweep+0x88>)
 80041ba:	2200      	movs	r2, #0
 80041bc:	601a      	str	r2, [r3, #0]


	  HAL_GPIO_WritePin(DCBIAS_INVERT_GPIO_Port, DCBIAS_INVERT_Pin, dcinverted);
 80041be:	4b0b      	ldr	r3, [pc, #44]	; (80041ec <update_dc_bias_sweep+0x90>)
 80041c0:	681b      	ldr	r3, [r3, #0]
 80041c2:	b2db      	uxtb	r3, r3
 80041c4:	461a      	mov	r2, r3
 80041c6:	2108      	movs	r1, #8
 80041c8:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80041cc:	f004 f812 	bl	80081f4 <HAL_GPIO_WritePin>
	  HAL_DAC_SetValue(&hdac1, DAC1_CHANNEL_2, DAC_ALIGN_12B_R, dcbias);
 80041d0:	4b05      	ldr	r3, [pc, #20]	; (80041e8 <update_dc_bias_sweep+0x8c>)
 80041d2:	881b      	ldrh	r3, [r3, #0]
 80041d4:	2200      	movs	r2, #0
 80041d6:	2110      	movs	r1, #16
 80041d8:	4805      	ldr	r0, [pc, #20]	; (80041f0 <update_dc_bias_sweep+0x94>)
 80041da:	f003 f935 	bl	8007448 <HAL_DAC_SetValue>
}
 80041de:	bf00      	nop
 80041e0:	bd80      	pop	{r7, pc}
 80041e2:	bf00      	nop
 80041e4:	200001d0 	.word	0x200001d0
 80041e8:	2000141a 	.word	0x2000141a
 80041ec:	2000141c 	.word	0x2000141c
 80041f0:	20001540 	.word	0x20001540

080041f4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80041f4:	b480      	push	{r7}
 80041f6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80041f8:	4b04      	ldr	r3, [pc, #16]	; (800420c <__NVIC_GetPriorityGrouping+0x18>)
 80041fa:	68db      	ldr	r3, [r3, #12]
 80041fc:	0a1b      	lsrs	r3, r3, #8
 80041fe:	f003 0307 	and.w	r3, r3, #7
}
 8004202:	4618      	mov	r0, r3
 8004204:	46bd      	mov	sp, r7
 8004206:	f85d 7b04 	ldr.w	r7, [sp], #4
 800420a:	4770      	bx	lr
 800420c:	e000ed00 	.word	0xe000ed00

08004210 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004210:	b480      	push	{r7}
 8004212:	b083      	sub	sp, #12
 8004214:	af00      	add	r7, sp, #0
 8004216:	4603      	mov	r3, r0
 8004218:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800421a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800421e:	2b00      	cmp	r3, #0
 8004220:	db0b      	blt.n	800423a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8004222:	79fb      	ldrb	r3, [r7, #7]
 8004224:	f003 021f 	and.w	r2, r3, #31
 8004228:	4907      	ldr	r1, [pc, #28]	; (8004248 <__NVIC_EnableIRQ+0x38>)
 800422a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800422e:	095b      	lsrs	r3, r3, #5
 8004230:	2001      	movs	r0, #1
 8004232:	fa00 f202 	lsl.w	r2, r0, r2
 8004236:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800423a:	bf00      	nop
 800423c:	370c      	adds	r7, #12
 800423e:	46bd      	mov	sp, r7
 8004240:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004244:	4770      	bx	lr
 8004246:	bf00      	nop
 8004248:	e000e100 	.word	0xe000e100

0800424c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800424c:	b480      	push	{r7}
 800424e:	b083      	sub	sp, #12
 8004250:	af00      	add	r7, sp, #0
 8004252:	4603      	mov	r3, r0
 8004254:	6039      	str	r1, [r7, #0]
 8004256:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004258:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800425c:	2b00      	cmp	r3, #0
 800425e:	db0a      	blt.n	8004276 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004260:	683b      	ldr	r3, [r7, #0]
 8004262:	b2da      	uxtb	r2, r3
 8004264:	490c      	ldr	r1, [pc, #48]	; (8004298 <__NVIC_SetPriority+0x4c>)
 8004266:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800426a:	0112      	lsls	r2, r2, #4
 800426c:	b2d2      	uxtb	r2, r2
 800426e:	440b      	add	r3, r1
 8004270:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8004274:	e00a      	b.n	800428c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004276:	683b      	ldr	r3, [r7, #0]
 8004278:	b2da      	uxtb	r2, r3
 800427a:	4908      	ldr	r1, [pc, #32]	; (800429c <__NVIC_SetPriority+0x50>)
 800427c:	79fb      	ldrb	r3, [r7, #7]
 800427e:	f003 030f 	and.w	r3, r3, #15
 8004282:	3b04      	subs	r3, #4
 8004284:	0112      	lsls	r2, r2, #4
 8004286:	b2d2      	uxtb	r2, r2
 8004288:	440b      	add	r3, r1
 800428a:	761a      	strb	r2, [r3, #24]
}
 800428c:	bf00      	nop
 800428e:	370c      	adds	r7, #12
 8004290:	46bd      	mov	sp, r7
 8004292:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004296:	4770      	bx	lr
 8004298:	e000e100 	.word	0xe000e100
 800429c:	e000ed00 	.word	0xe000ed00

080042a0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80042a0:	b480      	push	{r7}
 80042a2:	b089      	sub	sp, #36	; 0x24
 80042a4:	af00      	add	r7, sp, #0
 80042a6:	60f8      	str	r0, [r7, #12]
 80042a8:	60b9      	str	r1, [r7, #8]
 80042aa:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80042ac:	68fb      	ldr	r3, [r7, #12]
 80042ae:	f003 0307 	and.w	r3, r3, #7
 80042b2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80042b4:	69fb      	ldr	r3, [r7, #28]
 80042b6:	f1c3 0307 	rsb	r3, r3, #7
 80042ba:	2b04      	cmp	r3, #4
 80042bc:	bf28      	it	cs
 80042be:	2304      	movcs	r3, #4
 80042c0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80042c2:	69fb      	ldr	r3, [r7, #28]
 80042c4:	3304      	adds	r3, #4
 80042c6:	2b06      	cmp	r3, #6
 80042c8:	d902      	bls.n	80042d0 <NVIC_EncodePriority+0x30>
 80042ca:	69fb      	ldr	r3, [r7, #28]
 80042cc:	3b03      	subs	r3, #3
 80042ce:	e000      	b.n	80042d2 <NVIC_EncodePriority+0x32>
 80042d0:	2300      	movs	r3, #0
 80042d2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80042d4:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80042d8:	69bb      	ldr	r3, [r7, #24]
 80042da:	fa02 f303 	lsl.w	r3, r2, r3
 80042de:	43da      	mvns	r2, r3
 80042e0:	68bb      	ldr	r3, [r7, #8]
 80042e2:	401a      	ands	r2, r3
 80042e4:	697b      	ldr	r3, [r7, #20]
 80042e6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80042e8:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 80042ec:	697b      	ldr	r3, [r7, #20]
 80042ee:	fa01 f303 	lsl.w	r3, r1, r3
 80042f2:	43d9      	mvns	r1, r3
 80042f4:	687b      	ldr	r3, [r7, #4]
 80042f6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80042f8:	4313      	orrs	r3, r2
         );
}
 80042fa:	4618      	mov	r0, r3
 80042fc:	3724      	adds	r7, #36	; 0x24
 80042fe:	46bd      	mov	sp, r7
 8004300:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004304:	4770      	bx	lr
	...

08004308 <LL_SYSCFG_SetEXTISource>:
  *         @arg @ref LL_SYSCFG_EXTI_LINE14
  *         @arg @ref LL_SYSCFG_EXTI_LINE15
  * @retval None
  */
__STATIC_INLINE void LL_SYSCFG_SetEXTISource(uint32_t Port, uint32_t Line)
{
 8004308:	b480      	push	{r7}
 800430a:	b085      	sub	sp, #20
 800430c:	af00      	add	r7, sp, #0
 800430e:	6078      	str	r0, [r7, #4]
 8004310:	6039      	str	r1, [r7, #0]
  MODIFY_REG(SYSCFG->EXTICR[Line & 0x3U], (Line >> 16U), Port << (POSITION_VAL((Line >> 16U)) & 0x1FU) );
 8004312:	4a14      	ldr	r2, [pc, #80]	; (8004364 <LL_SYSCFG_SetEXTISource+0x5c>)
 8004314:	683b      	ldr	r3, [r7, #0]
 8004316:	f003 0303 	and.w	r3, r3, #3
 800431a:	3302      	adds	r3, #2
 800431c:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8004320:	683b      	ldr	r3, [r7, #0]
 8004322:	0c1b      	lsrs	r3, r3, #16
 8004324:	43db      	mvns	r3, r3
 8004326:	ea02 0103 	and.w	r1, r2, r3
 800432a:	683b      	ldr	r3, [r7, #0]
 800432c:	0c1b      	lsrs	r3, r3, #16
 800432e:	60fb      	str	r3, [r7, #12]
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004330:	68fb      	ldr	r3, [r7, #12]
 8004332:	fa93 f3a3 	rbit	r3, r3
 8004336:	60bb      	str	r3, [r7, #8]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8004338:	68bb      	ldr	r3, [r7, #8]
 800433a:	fab3 f383 	clz	r3, r3
 800433e:	b2db      	uxtb	r3, r3
 8004340:	f003 031f 	and.w	r3, r3, #31
 8004344:	687a      	ldr	r2, [r7, #4]
 8004346:	409a      	lsls	r2, r3
 8004348:	4806      	ldr	r0, [pc, #24]	; (8004364 <LL_SYSCFG_SetEXTISource+0x5c>)
 800434a:	683b      	ldr	r3, [r7, #0]
 800434c:	f003 0303 	and.w	r3, r3, #3
 8004350:	430a      	orrs	r2, r1
 8004352:	3302      	adds	r3, #2
 8004354:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
}
 8004358:	bf00      	nop
 800435a:	3714      	adds	r7, #20
 800435c:	46bd      	mov	sp, r7
 800435e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004362:	4770      	bx	lr
 8004364:	40010000 	.word	0x40010000

08004368 <LL_GPIO_SetPinMode>:
  *         @arg @ref LL_GPIO_MODE_ALTERNATE
  *         @arg @ref LL_GPIO_MODE_ANALOG
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetPinMode(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t Mode)
{
 8004368:	b480      	push	{r7}
 800436a:	b089      	sub	sp, #36	; 0x24
 800436c:	af00      	add	r7, sp, #0
 800436e:	60f8      	str	r0, [r7, #12]
 8004370:	60b9      	str	r1, [r7, #8]
 8004372:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->MODER, (GPIO_MODER_MODE0 << (POSITION_VAL(Pin) * 2U)), (Mode << (POSITION_VAL(Pin) * 2U)));
 8004374:	68fb      	ldr	r3, [r7, #12]
 8004376:	681a      	ldr	r2, [r3, #0]
 8004378:	68bb      	ldr	r3, [r7, #8]
 800437a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800437c:	697b      	ldr	r3, [r7, #20]
 800437e:	fa93 f3a3 	rbit	r3, r3
 8004382:	613b      	str	r3, [r7, #16]
  return result;
 8004384:	693b      	ldr	r3, [r7, #16]
 8004386:	fab3 f383 	clz	r3, r3
 800438a:	b2db      	uxtb	r3, r3
 800438c:	005b      	lsls	r3, r3, #1
 800438e:	2103      	movs	r1, #3
 8004390:	fa01 f303 	lsl.w	r3, r1, r3
 8004394:	43db      	mvns	r3, r3
 8004396:	401a      	ands	r2, r3
 8004398:	68bb      	ldr	r3, [r7, #8]
 800439a:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800439c:	69fb      	ldr	r3, [r7, #28]
 800439e:	fa93 f3a3 	rbit	r3, r3
 80043a2:	61bb      	str	r3, [r7, #24]
  return result;
 80043a4:	69bb      	ldr	r3, [r7, #24]
 80043a6:	fab3 f383 	clz	r3, r3
 80043aa:	b2db      	uxtb	r3, r3
 80043ac:	005b      	lsls	r3, r3, #1
 80043ae:	6879      	ldr	r1, [r7, #4]
 80043b0:	fa01 f303 	lsl.w	r3, r1, r3
 80043b4:	431a      	orrs	r2, r3
 80043b6:	68fb      	ldr	r3, [r7, #12]
 80043b8:	601a      	str	r2, [r3, #0]
}
 80043ba:	bf00      	nop
 80043bc:	3724      	adds	r7, #36	; 0x24
 80043be:	46bd      	mov	sp, r7
 80043c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043c4:	4770      	bx	lr

080043c6 <LL_GPIO_SetPinPull>:
  *         @arg @ref LL_GPIO_PULL_UP
  *         @arg @ref LL_GPIO_PULL_DOWN
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetPinPull(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t Pull)
{
 80043c6:	b480      	push	{r7}
 80043c8:	b089      	sub	sp, #36	; 0x24
 80043ca:	af00      	add	r7, sp, #0
 80043cc:	60f8      	str	r0, [r7, #12]
 80043ce:	60b9      	str	r1, [r7, #8]
 80043d0:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->PUPDR, (GPIO_PUPDR_PUPD0 << (POSITION_VAL(Pin) * 2U)), (Pull << (POSITION_VAL(Pin) * 2U)));
 80043d2:	68fb      	ldr	r3, [r7, #12]
 80043d4:	68da      	ldr	r2, [r3, #12]
 80043d6:	68bb      	ldr	r3, [r7, #8]
 80043d8:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80043da:	697b      	ldr	r3, [r7, #20]
 80043dc:	fa93 f3a3 	rbit	r3, r3
 80043e0:	613b      	str	r3, [r7, #16]
  return result;
 80043e2:	693b      	ldr	r3, [r7, #16]
 80043e4:	fab3 f383 	clz	r3, r3
 80043e8:	b2db      	uxtb	r3, r3
 80043ea:	005b      	lsls	r3, r3, #1
 80043ec:	2103      	movs	r1, #3
 80043ee:	fa01 f303 	lsl.w	r3, r1, r3
 80043f2:	43db      	mvns	r3, r3
 80043f4:	401a      	ands	r2, r3
 80043f6:	68bb      	ldr	r3, [r7, #8]
 80043f8:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80043fa:	69fb      	ldr	r3, [r7, #28]
 80043fc:	fa93 f3a3 	rbit	r3, r3
 8004400:	61bb      	str	r3, [r7, #24]
  return result;
 8004402:	69bb      	ldr	r3, [r7, #24]
 8004404:	fab3 f383 	clz	r3, r3
 8004408:	b2db      	uxtb	r3, r3
 800440a:	005b      	lsls	r3, r3, #1
 800440c:	6879      	ldr	r1, [r7, #4]
 800440e:	fa01 f303 	lsl.w	r3, r1, r3
 8004412:	431a      	orrs	r2, r3
 8004414:	68fb      	ldr	r3, [r7, #12]
 8004416:	60da      	str	r2, [r3, #12]
}
 8004418:	bf00      	nop
 800441a:	3724      	adds	r7, #36	; 0x24
 800441c:	46bd      	mov	sp, r7
 800441e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004422:	4770      	bx	lr

08004424 <LL_GPIO_ResetOutputPin>:
  *         @arg @ref LL_GPIO_PIN_15
  *         @arg @ref LL_GPIO_PIN_ALL
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_ResetOutputPin(GPIO_TypeDef *GPIOx, uint32_t PinMask)
{
 8004424:	b480      	push	{r7}
 8004426:	b083      	sub	sp, #12
 8004428:	af00      	add	r7, sp, #0
 800442a:	6078      	str	r0, [r7, #4]
 800442c:	6039      	str	r1, [r7, #0]
  WRITE_REG(GPIOx->BRR, PinMask);
 800442e:	687b      	ldr	r3, [r7, #4]
 8004430:	683a      	ldr	r2, [r7, #0]
 8004432:	629a      	str	r2, [r3, #40]	; 0x28
}
 8004434:	bf00      	nop
 8004436:	370c      	adds	r7, #12
 8004438:	46bd      	mov	sp, r7
 800443a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800443e:	4770      	bx	lr

08004440 <LL_AHB2_GRP1_EnableClock>:
  *
  *         (*) value not defined in all devices.
  * @retval None
  */
__STATIC_INLINE void LL_AHB2_GRP1_EnableClock(uint32_t Periphs)
{
 8004440:	b480      	push	{r7}
 8004442:	b085      	sub	sp, #20
 8004444:	af00      	add	r7, sp, #0
 8004446:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->AHB2ENR, Periphs);
 8004448:	4b08      	ldr	r3, [pc, #32]	; (800446c <LL_AHB2_GRP1_EnableClock+0x2c>)
 800444a:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800444c:	4907      	ldr	r1, [pc, #28]	; (800446c <LL_AHB2_GRP1_EnableClock+0x2c>)
 800444e:	687b      	ldr	r3, [r7, #4]
 8004450:	4313      	orrs	r3, r2
 8004452:	64cb      	str	r3, [r1, #76]	; 0x4c
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 8004454:	4b05      	ldr	r3, [pc, #20]	; (800446c <LL_AHB2_GRP1_EnableClock+0x2c>)
 8004456:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8004458:	687b      	ldr	r3, [r7, #4]
 800445a:	4013      	ands	r3, r2
 800445c:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 800445e:	68fb      	ldr	r3, [r7, #12]
}
 8004460:	bf00      	nop
 8004462:	3714      	adds	r7, #20
 8004464:	46bd      	mov	sp, r7
 8004466:	f85d 7b04 	ldr.w	r7, [sp], #4
 800446a:	4770      	bx	lr
 800446c:	40021000 	.word	0x40021000

08004470 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8004470:	b580      	push	{r7, lr}
 8004472:	b08a      	sub	sp, #40	; 0x28
 8004474:	af00      	add	r7, sp, #0

  LL_EXTI_InitTypeDef EXTI_InitStruct = {0};
 8004476:	f107 031c 	add.w	r3, r7, #28
 800447a:	2200      	movs	r2, #0
 800447c:	601a      	str	r2, [r3, #0]
 800447e:	605a      	str	r2, [r3, #4]
 8004480:	609a      	str	r2, [r3, #8]
  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004482:	1d3b      	adds	r3, r7, #4
 8004484:	2200      	movs	r2, #0
 8004486:	601a      	str	r2, [r3, #0]
 8004488:	605a      	str	r2, [r3, #4]
 800448a:	609a      	str	r2, [r3, #8]
 800448c:	60da      	str	r2, [r3, #12]
 800448e:	611a      	str	r2, [r3, #16]
 8004490:	615a      	str	r2, [r3, #20]

  /* GPIO Ports Clock Enable */
  LL_AHB2_GRP1_EnableClock(LL_AHB2_GRP1_PERIPH_GPIOC);
 8004492:	2004      	movs	r0, #4
 8004494:	f7ff ffd4 	bl	8004440 <LL_AHB2_GRP1_EnableClock>
  LL_AHB2_GRP1_EnableClock(LL_AHB2_GRP1_PERIPH_GPIOF);
 8004498:	2020      	movs	r0, #32
 800449a:	f7ff ffd1 	bl	8004440 <LL_AHB2_GRP1_EnableClock>
  LL_AHB2_GRP1_EnableClock(LL_AHB2_GRP1_PERIPH_GPIOA);
 800449e:	2001      	movs	r0, #1
 80044a0:	f7ff ffce 	bl	8004440 <LL_AHB2_GRP1_EnableClock>
  LL_AHB2_GRP1_EnableClock(LL_AHB2_GRP1_PERIPH_GPIOB);
 80044a4:	2002      	movs	r0, #2
 80044a6:	f7ff ffcb 	bl	8004440 <LL_AHB2_GRP1_EnableClock>

  /**/
  LL_GPIO_ResetOutputPin(TRIGMODE_GPIO_Port, TRIGMODE_Pin);
 80044aa:	2108      	movs	r1, #8
 80044ac:	48d3      	ldr	r0, [pc, #844]	; (80047fc <MX_GPIO_Init+0x38c>)
 80044ae:	f7ff ffb9 	bl	8004424 <LL_GPIO_ResetOutputPin>

  /**/
  LL_GPIO_ResetOutputPin(DCBIAS_INVERT_GPIO_Port, DCBIAS_INVERT_Pin);
 80044b2:	2108      	movs	r1, #8
 80044b4:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80044b8:	f7ff ffb4 	bl	8004424 <LL_GPIO_ResetOutputPin>

  /**/
  LL_GPIO_ResetOutputPin(SG2_GPIO_Port, SG2_Pin);
 80044bc:	2110      	movs	r1, #16
 80044be:	48cf      	ldr	r0, [pc, #828]	; (80047fc <MX_GPIO_Init+0x38c>)
 80044c0:	f7ff ffb0 	bl	8004424 <LL_GPIO_ResetOutputPin>

  /**/
  LL_GPIO_ResetOutputPin(SG1_GPIO_Port, SG1_Pin);
 80044c4:	2120      	movs	r1, #32
 80044c6:	48cd      	ldr	r0, [pc, #820]	; (80047fc <MX_GPIO_Init+0x38c>)
 80044c8:	f7ff ffac 	bl	8004424 <LL_GPIO_ResetOutputPin>

  /**/
  LL_GPIO_ResetOutputPin(SG0_GPIO_Port, SG0_Pin);
 80044cc:	2101      	movs	r1, #1
 80044ce:	48cc      	ldr	r0, [pc, #816]	; (8004800 <MX_GPIO_Init+0x390>)
 80044d0:	f7ff ffa8 	bl	8004424 <LL_GPIO_ResetOutputPin>

  /**/
  LL_GPIO_ResetOutputPin(TRIGMUX1_GPIO_Port, TRIGMUX1_Pin);
 80044d4:	f44f 7180 	mov.w	r1, #256	; 0x100
 80044d8:	48c8      	ldr	r0, [pc, #800]	; (80047fc <MX_GPIO_Init+0x38c>)
 80044da:	f7ff ffa3 	bl	8004424 <LL_GPIO_ResetOutputPin>

  /**/
  LL_GPIO_ResetOutputPin(TRIGMUX2_GPIO_Port, TRIGMUX2_Pin);
 80044de:	f44f 7100 	mov.w	r1, #512	; 0x200
 80044e2:	48c6      	ldr	r0, [pc, #792]	; (80047fc <MX_GPIO_Init+0x38c>)
 80044e4:	f7ff ff9e 	bl	8004424 <LL_GPIO_ResetOutputPin>

  /**/
  LL_GPIO_ResetOutputPin(DC_GPIO_Port, DC_Pin);
 80044e8:	2140      	movs	r1, #64	; 0x40
 80044ea:	48c5      	ldr	r0, [pc, #788]	; (8004800 <MX_GPIO_Init+0x390>)
 80044ec:	f7ff ff9a 	bl	8004424 <LL_GPIO_ResetOutputPin>

  /**/
  LL_GPIO_ResetOutputPin(CS_GPIO_Port, CS_Pin);
 80044f0:	2180      	movs	r1, #128	; 0x80
 80044f2:	48c3      	ldr	r0, [pc, #780]	; (8004800 <MX_GPIO_Init+0x390>)
 80044f4:	f7ff ff96 	bl	8004424 <LL_GPIO_ResetOutputPin>

  /**/
  LL_GPIO_ResetOutputPin(RST_GPIO_Port, RST_Pin);
 80044f8:	f44f 7100 	mov.w	r1, #512	; 0x200
 80044fc:	48c0      	ldr	r0, [pc, #768]	; (8004800 <MX_GPIO_Init+0x390>)
 80044fe:	f7ff ff91 	bl	8004424 <LL_GPIO_ResetOutputPin>

  /**/
  LL_SYSCFG_SetEXTISource(LL_SYSCFG_EXTI_PORTC, LL_SYSCFG_EXTI_LINE14);
 8004502:	49c0      	ldr	r1, [pc, #768]	; (8004804 <MX_GPIO_Init+0x394>)
 8004504:	2002      	movs	r0, #2
 8004506:	f7ff feff 	bl	8004308 <LL_SYSCFG_SetEXTISource>

  /**/
  LL_SYSCFG_SetEXTISource(LL_SYSCFG_EXTI_PORTC, LL_SYSCFG_EXTI_LINE15);
 800450a:	49bf      	ldr	r1, [pc, #764]	; (8004808 <MX_GPIO_Init+0x398>)
 800450c:	2002      	movs	r0, #2
 800450e:	f7ff fefb 	bl	8004308 <LL_SYSCFG_SetEXTISource>

  /**/
  LL_SYSCFG_SetEXTISource(LL_SYSCFG_EXTI_PORTF, LL_SYSCFG_EXTI_LINE0);
 8004512:	f44f 2170 	mov.w	r1, #983040	; 0xf0000
 8004516:	2005      	movs	r0, #5
 8004518:	f7ff fef6 	bl	8004308 <LL_SYSCFG_SetEXTISource>

  /**/
  LL_SYSCFG_SetEXTISource(LL_SYSCFG_EXTI_PORTF, LL_SYSCFG_EXTI_LINE1);
 800451c:	f44f 0170 	mov.w	r1, #15728640	; 0xf00000
 8004520:	2005      	movs	r0, #5
 8004522:	f7ff fef1 	bl	8004308 <LL_SYSCFG_SetEXTISource>

  /**/
  LL_SYSCFG_SetEXTISource(LL_SYSCFG_EXTI_PORTC, LL_SYSCFG_EXTI_LINE2);
 8004526:	f04f 6170 	mov.w	r1, #251658240	; 0xf000000
 800452a:	2002      	movs	r0, #2
 800452c:	f7ff feec 	bl	8004308 <LL_SYSCFG_SetEXTISource>

  /**/
  EXTI_InitStruct.Line_0_31 = LL_EXTI_LINE_14;
 8004530:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8004534:	61fb      	str	r3, [r7, #28]
  EXTI_InitStruct.LineCommand = ENABLE;
 8004536:	2301      	movs	r3, #1
 8004538:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
  EXTI_InitStruct.Mode = LL_EXTI_MODE_IT;
 800453c:	2300      	movs	r3, #0
 800453e:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
  EXTI_InitStruct.Trigger = LL_EXTI_TRIGGER_FALLING;
 8004542:	2302      	movs	r3, #2
 8004544:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
  LL_EXTI_Init(&EXTI_InitStruct);
 8004548:	f107 031c 	add.w	r3, r7, #28
 800454c:	4618      	mov	r0, r3
 800454e:	f006 faa7 	bl	800aaa0 <LL_EXTI_Init>

  /**/
  EXTI_InitStruct.Line_0_31 = LL_EXTI_LINE_15;
 8004552:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004556:	61fb      	str	r3, [r7, #28]
  EXTI_InitStruct.LineCommand = ENABLE;
 8004558:	2301      	movs	r3, #1
 800455a:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
  EXTI_InitStruct.Mode = LL_EXTI_MODE_IT;
 800455e:	2300      	movs	r3, #0
 8004560:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
  EXTI_InitStruct.Trigger = LL_EXTI_TRIGGER_FALLING;
 8004564:	2302      	movs	r3, #2
 8004566:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
  LL_EXTI_Init(&EXTI_InitStruct);
 800456a:	f107 031c 	add.w	r3, r7, #28
 800456e:	4618      	mov	r0, r3
 8004570:	f006 fa96 	bl	800aaa0 <LL_EXTI_Init>

  /**/
  EXTI_InitStruct.Line_0_31 = LL_EXTI_LINE_0;
 8004574:	2301      	movs	r3, #1
 8004576:	61fb      	str	r3, [r7, #28]
  EXTI_InitStruct.LineCommand = ENABLE;
 8004578:	2301      	movs	r3, #1
 800457a:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
  EXTI_InitStruct.Mode = LL_EXTI_MODE_IT;
 800457e:	2300      	movs	r3, #0
 8004580:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
  EXTI_InitStruct.Trigger = LL_EXTI_TRIGGER_FALLING;
 8004584:	2302      	movs	r3, #2
 8004586:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
  LL_EXTI_Init(&EXTI_InitStruct);
 800458a:	f107 031c 	add.w	r3, r7, #28
 800458e:	4618      	mov	r0, r3
 8004590:	f006 fa86 	bl	800aaa0 <LL_EXTI_Init>

  /**/
  EXTI_InitStruct.Line_0_31 = LL_EXTI_LINE_1;
 8004594:	2302      	movs	r3, #2
 8004596:	61fb      	str	r3, [r7, #28]
  EXTI_InitStruct.LineCommand = ENABLE;
 8004598:	2301      	movs	r3, #1
 800459a:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
  EXTI_InitStruct.Mode = LL_EXTI_MODE_IT;
 800459e:	2300      	movs	r3, #0
 80045a0:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
  EXTI_InitStruct.Trigger = LL_EXTI_TRIGGER_FALLING;
 80045a4:	2302      	movs	r3, #2
 80045a6:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
  LL_EXTI_Init(&EXTI_InitStruct);
 80045aa:	f107 031c 	add.w	r3, r7, #28
 80045ae:	4618      	mov	r0, r3
 80045b0:	f006 fa76 	bl	800aaa0 <LL_EXTI_Init>

  /**/
  EXTI_InitStruct.Line_0_31 = LL_EXTI_LINE_2;
 80045b4:	2304      	movs	r3, #4
 80045b6:	61fb      	str	r3, [r7, #28]
  EXTI_InitStruct.LineCommand = ENABLE;
 80045b8:	2301      	movs	r3, #1
 80045ba:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
  EXTI_InitStruct.Mode = LL_EXTI_MODE_IT;
 80045be:	2300      	movs	r3, #0
 80045c0:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
  EXTI_InitStruct.Trigger = LL_EXTI_TRIGGER_FALLING;
 80045c4:	2302      	movs	r3, #2
 80045c6:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
  LL_EXTI_Init(&EXTI_InitStruct);
 80045ca:	f107 031c 	add.w	r3, r7, #28
 80045ce:	4618      	mov	r0, r3
 80045d0:	f006 fa66 	bl	800aaa0 <LL_EXTI_Init>

  /**/
  LL_GPIO_SetPinPull(BTN1_EXTI14_GPIO_Port, BTN1_EXTI14_Pin, LL_GPIO_PULL_UP);
 80045d4:	2201      	movs	r2, #1
 80045d6:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80045da:	4888      	ldr	r0, [pc, #544]	; (80047fc <MX_GPIO_Init+0x38c>)
 80045dc:	f7ff fef3 	bl	80043c6 <LL_GPIO_SetPinPull>

  /**/
  LL_GPIO_SetPinPull(BTN2_EXTI15_GPIO_Port, BTN2_EXTI15_Pin, LL_GPIO_PULL_UP);
 80045e0:	2201      	movs	r2, #1
 80045e2:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80045e6:	4885      	ldr	r0, [pc, #532]	; (80047fc <MX_GPIO_Init+0x38c>)
 80045e8:	f7ff feed 	bl	80043c6 <LL_GPIO_SetPinPull>

  /**/
  LL_GPIO_SetPinPull(BTN3_EXTI0_GPIO_Port, BTN3_EXTI0_Pin, LL_GPIO_PULL_UP);
 80045ec:	2201      	movs	r2, #1
 80045ee:	2101      	movs	r1, #1
 80045f0:	4886      	ldr	r0, [pc, #536]	; (800480c <MX_GPIO_Init+0x39c>)
 80045f2:	f7ff fee8 	bl	80043c6 <LL_GPIO_SetPinPull>

  /**/
  LL_GPIO_SetPinPull(BTN4_EXTI1_GPIO_Port, BTN4_EXTI1_Pin, LL_GPIO_PULL_UP);
 80045f6:	2201      	movs	r2, #1
 80045f8:	2102      	movs	r1, #2
 80045fa:	4884      	ldr	r0, [pc, #528]	; (800480c <MX_GPIO_Init+0x39c>)
 80045fc:	f7ff fee3 	bl	80043c6 <LL_GPIO_SetPinPull>

  /**/
  LL_GPIO_SetPinPull(ENC_EXTI2_GPIO_Port, ENC_EXTI2_Pin, LL_GPIO_PULL_UP);
 8004600:	2201      	movs	r2, #1
 8004602:	2104      	movs	r1, #4
 8004604:	487d      	ldr	r0, [pc, #500]	; (80047fc <MX_GPIO_Init+0x38c>)
 8004606:	f7ff fede 	bl	80043c6 <LL_GPIO_SetPinPull>

  /**/
  LL_GPIO_SetPinMode(BTN1_EXTI14_GPIO_Port, BTN1_EXTI14_Pin, LL_GPIO_MODE_INPUT);
 800460a:	2200      	movs	r2, #0
 800460c:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8004610:	487a      	ldr	r0, [pc, #488]	; (80047fc <MX_GPIO_Init+0x38c>)
 8004612:	f7ff fea9 	bl	8004368 <LL_GPIO_SetPinMode>

  /**/
  LL_GPIO_SetPinMode(BTN2_EXTI15_GPIO_Port, BTN2_EXTI15_Pin, LL_GPIO_MODE_INPUT);
 8004616:	2200      	movs	r2, #0
 8004618:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800461c:	4877      	ldr	r0, [pc, #476]	; (80047fc <MX_GPIO_Init+0x38c>)
 800461e:	f7ff fea3 	bl	8004368 <LL_GPIO_SetPinMode>

  /**/
  LL_GPIO_SetPinMode(BTN3_EXTI0_GPIO_Port, BTN3_EXTI0_Pin, LL_GPIO_MODE_INPUT);
 8004622:	2200      	movs	r2, #0
 8004624:	2101      	movs	r1, #1
 8004626:	4879      	ldr	r0, [pc, #484]	; (800480c <MX_GPIO_Init+0x39c>)
 8004628:	f7ff fe9e 	bl	8004368 <LL_GPIO_SetPinMode>

  /**/
  LL_GPIO_SetPinMode(BTN4_EXTI1_GPIO_Port, BTN4_EXTI1_Pin, LL_GPIO_MODE_INPUT);
 800462c:	2200      	movs	r2, #0
 800462e:	2102      	movs	r1, #2
 8004630:	4876      	ldr	r0, [pc, #472]	; (800480c <MX_GPIO_Init+0x39c>)
 8004632:	f7ff fe99 	bl	8004368 <LL_GPIO_SetPinMode>

  /**/
  LL_GPIO_SetPinMode(ENC_EXTI2_GPIO_Port, ENC_EXTI2_Pin, LL_GPIO_MODE_INPUT);
 8004636:	2200      	movs	r2, #0
 8004638:	2104      	movs	r1, #4
 800463a:	4870      	ldr	r0, [pc, #448]	; (80047fc <MX_GPIO_Init+0x38c>)
 800463c:	f7ff fe94 	bl	8004368 <LL_GPIO_SetPinMode>

  /**/
  GPIO_InitStruct.Pin = TRIGMODE_Pin;
 8004640:	2308      	movs	r3, #8
 8004642:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 8004644:	2301      	movs	r3, #1
 8004646:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 8004648:	2300      	movs	r3, #0
 800464a:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 800464c:	2300      	movs	r3, #0
 800464e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_DOWN;
 8004650:	2302      	movs	r3, #2
 8004652:	617b      	str	r3, [r7, #20]
  LL_GPIO_Init(TRIGMODE_GPIO_Port, &GPIO_InitStruct);
 8004654:	1d3b      	adds	r3, r7, #4
 8004656:	4619      	mov	r1, r3
 8004658:	4868      	ldr	r0, [pc, #416]	; (80047fc <MX_GPIO_Init+0x38c>)
 800465a:	f006 fc14 	bl	800ae86 <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = DCBIAS_INVERT_Pin;
 800465e:	2308      	movs	r3, #8
 8004660:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 8004662:	2301      	movs	r3, #1
 8004664:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 8004666:	2300      	movs	r3, #0
 8004668:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 800466a:	2300      	movs	r3, #0
 800466c:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 800466e:	2300      	movs	r3, #0
 8004670:	617b      	str	r3, [r7, #20]
  LL_GPIO_Init(DCBIAS_INVERT_GPIO_Port, &GPIO_InitStruct);
 8004672:	1d3b      	adds	r3, r7, #4
 8004674:	4619      	mov	r1, r3
 8004676:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800467a:	f006 fc04 	bl	800ae86 <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = SG2_Pin;
 800467e:	2310      	movs	r3, #16
 8004680:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 8004682:	2301      	movs	r3, #1
 8004684:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 8004686:	2300      	movs	r3, #0
 8004688:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 800468a:	2300      	movs	r3, #0
 800468c:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 800468e:	2300      	movs	r3, #0
 8004690:	617b      	str	r3, [r7, #20]
  LL_GPIO_Init(SG2_GPIO_Port, &GPIO_InitStruct);
 8004692:	1d3b      	adds	r3, r7, #4
 8004694:	4619      	mov	r1, r3
 8004696:	4859      	ldr	r0, [pc, #356]	; (80047fc <MX_GPIO_Init+0x38c>)
 8004698:	f006 fbf5 	bl	800ae86 <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = SG1_Pin;
 800469c:	2320      	movs	r3, #32
 800469e:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 80046a0:	2301      	movs	r3, #1
 80046a2:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 80046a4:	2300      	movs	r3, #0
 80046a6:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 80046a8:	2300      	movs	r3, #0
 80046aa:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 80046ac:	2300      	movs	r3, #0
 80046ae:	617b      	str	r3, [r7, #20]
  LL_GPIO_Init(SG1_GPIO_Port, &GPIO_InitStruct);
 80046b0:	1d3b      	adds	r3, r7, #4
 80046b2:	4619      	mov	r1, r3
 80046b4:	4851      	ldr	r0, [pc, #324]	; (80047fc <MX_GPIO_Init+0x38c>)
 80046b6:	f006 fbe6 	bl	800ae86 <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = SG0_Pin;
 80046ba:	2301      	movs	r3, #1
 80046bc:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 80046be:	2301      	movs	r3, #1
 80046c0:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 80046c2:	2300      	movs	r3, #0
 80046c4:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 80046c6:	2300      	movs	r3, #0
 80046c8:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 80046ca:	2300      	movs	r3, #0
 80046cc:	617b      	str	r3, [r7, #20]
  LL_GPIO_Init(SG0_GPIO_Port, &GPIO_InitStruct);
 80046ce:	1d3b      	adds	r3, r7, #4
 80046d0:	4619      	mov	r1, r3
 80046d2:	484b      	ldr	r0, [pc, #300]	; (8004800 <MX_GPIO_Init+0x390>)
 80046d4:	f006 fbd7 	bl	800ae86 <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = TRIGMUX1_Pin;
 80046d8:	f44f 7380 	mov.w	r3, #256	; 0x100
 80046dc:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 80046de:	2301      	movs	r3, #1
 80046e0:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 80046e2:	2300      	movs	r3, #0
 80046e4:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 80046e6:	2300      	movs	r3, #0
 80046e8:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 80046ea:	2300      	movs	r3, #0
 80046ec:	617b      	str	r3, [r7, #20]
  LL_GPIO_Init(TRIGMUX1_GPIO_Port, &GPIO_InitStruct);
 80046ee:	1d3b      	adds	r3, r7, #4
 80046f0:	4619      	mov	r1, r3
 80046f2:	4842      	ldr	r0, [pc, #264]	; (80047fc <MX_GPIO_Init+0x38c>)
 80046f4:	f006 fbc7 	bl	800ae86 <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = TRIGMUX2_Pin;
 80046f8:	f44f 7300 	mov.w	r3, #512	; 0x200
 80046fc:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 80046fe:	2301      	movs	r3, #1
 8004700:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 8004702:	2300      	movs	r3, #0
 8004704:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8004706:	2300      	movs	r3, #0
 8004708:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 800470a:	2300      	movs	r3, #0
 800470c:	617b      	str	r3, [r7, #20]
  LL_GPIO_Init(TRIGMUX2_GPIO_Port, &GPIO_InitStruct);
 800470e:	1d3b      	adds	r3, r7, #4
 8004710:	4619      	mov	r1, r3
 8004712:	483a      	ldr	r0, [pc, #232]	; (80047fc <MX_GPIO_Init+0x38c>)
 8004714:	f006 fbb7 	bl	800ae86 <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = DC_Pin;
 8004718:	2340      	movs	r3, #64	; 0x40
 800471a:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 800471c:	2301      	movs	r3, #1
 800471e:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_VERY_HIGH;
 8004720:	2303      	movs	r3, #3
 8004722:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8004724:	2300      	movs	r3, #0
 8004726:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8004728:	2300      	movs	r3, #0
 800472a:	617b      	str	r3, [r7, #20]
  LL_GPIO_Init(DC_GPIO_Port, &GPIO_InitStruct);
 800472c:	1d3b      	adds	r3, r7, #4
 800472e:	4619      	mov	r1, r3
 8004730:	4833      	ldr	r0, [pc, #204]	; (8004800 <MX_GPIO_Init+0x390>)
 8004732:	f006 fba8 	bl	800ae86 <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = CS_Pin;
 8004736:	2380      	movs	r3, #128	; 0x80
 8004738:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 800473a:	2301      	movs	r3, #1
 800473c:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_VERY_HIGH;
 800473e:	2303      	movs	r3, #3
 8004740:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8004742:	2300      	movs	r3, #0
 8004744:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8004746:	2300      	movs	r3, #0
 8004748:	617b      	str	r3, [r7, #20]
  LL_GPIO_Init(CS_GPIO_Port, &GPIO_InitStruct);
 800474a:	1d3b      	adds	r3, r7, #4
 800474c:	4619      	mov	r1, r3
 800474e:	482c      	ldr	r0, [pc, #176]	; (8004800 <MX_GPIO_Init+0x390>)
 8004750:	f006 fb99 	bl	800ae86 <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = RST_Pin;
 8004754:	f44f 7300 	mov.w	r3, #512	; 0x200
 8004758:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 800475a:	2301      	movs	r3, #1
 800475c:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_VERY_HIGH;
 800475e:	2303      	movs	r3, #3
 8004760:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8004762:	2300      	movs	r3, #0
 8004764:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8004766:	2300      	movs	r3, #0
 8004768:	617b      	str	r3, [r7, #20]
  LL_GPIO_Init(RST_GPIO_Port, &GPIO_InitStruct);
 800476a:	1d3b      	adds	r3, r7, #4
 800476c:	4619      	mov	r1, r3
 800476e:	4824      	ldr	r0, [pc, #144]	; (8004800 <MX_GPIO_Init+0x390>)
 8004770:	f006 fb89 	bl	800ae86 <LL_GPIO_Init>

  /* EXTI interrupt init*/
  NVIC_SetPriority(EXTI0_IRQn, NVIC_EncodePriority(NVIC_GetPriorityGrouping(),0, 0));
 8004774:	f7ff fd3e 	bl	80041f4 <__NVIC_GetPriorityGrouping>
 8004778:	4603      	mov	r3, r0
 800477a:	2200      	movs	r2, #0
 800477c:	2100      	movs	r1, #0
 800477e:	4618      	mov	r0, r3
 8004780:	f7ff fd8e 	bl	80042a0 <NVIC_EncodePriority>
 8004784:	4603      	mov	r3, r0
 8004786:	4619      	mov	r1, r3
 8004788:	2006      	movs	r0, #6
 800478a:	f7ff fd5f 	bl	800424c <__NVIC_SetPriority>
  NVIC_EnableIRQ(EXTI0_IRQn);
 800478e:	2006      	movs	r0, #6
 8004790:	f7ff fd3e 	bl	8004210 <__NVIC_EnableIRQ>
  NVIC_SetPriority(EXTI1_IRQn, NVIC_EncodePriority(NVIC_GetPriorityGrouping(),0, 0));
 8004794:	f7ff fd2e 	bl	80041f4 <__NVIC_GetPriorityGrouping>
 8004798:	4603      	mov	r3, r0
 800479a:	2200      	movs	r2, #0
 800479c:	2100      	movs	r1, #0
 800479e:	4618      	mov	r0, r3
 80047a0:	f7ff fd7e 	bl	80042a0 <NVIC_EncodePriority>
 80047a4:	4603      	mov	r3, r0
 80047a6:	4619      	mov	r1, r3
 80047a8:	2007      	movs	r0, #7
 80047aa:	f7ff fd4f 	bl	800424c <__NVIC_SetPriority>
  NVIC_EnableIRQ(EXTI1_IRQn);
 80047ae:	2007      	movs	r0, #7
 80047b0:	f7ff fd2e 	bl	8004210 <__NVIC_EnableIRQ>
  NVIC_SetPriority(EXTI2_IRQn, NVIC_EncodePriority(NVIC_GetPriorityGrouping(),0, 0));
 80047b4:	f7ff fd1e 	bl	80041f4 <__NVIC_GetPriorityGrouping>
 80047b8:	4603      	mov	r3, r0
 80047ba:	2200      	movs	r2, #0
 80047bc:	2100      	movs	r1, #0
 80047be:	4618      	mov	r0, r3
 80047c0:	f7ff fd6e 	bl	80042a0 <NVIC_EncodePriority>
 80047c4:	4603      	mov	r3, r0
 80047c6:	4619      	mov	r1, r3
 80047c8:	2008      	movs	r0, #8
 80047ca:	f7ff fd3f 	bl	800424c <__NVIC_SetPriority>
  NVIC_EnableIRQ(EXTI2_IRQn);
 80047ce:	2008      	movs	r0, #8
 80047d0:	f7ff fd1e 	bl	8004210 <__NVIC_EnableIRQ>
  NVIC_SetPriority(EXTI15_10_IRQn, NVIC_EncodePriority(NVIC_GetPriorityGrouping(),0, 0));
 80047d4:	f7ff fd0e 	bl	80041f4 <__NVIC_GetPriorityGrouping>
 80047d8:	4603      	mov	r3, r0
 80047da:	2200      	movs	r2, #0
 80047dc:	2100      	movs	r1, #0
 80047de:	4618      	mov	r0, r3
 80047e0:	f7ff fd5e 	bl	80042a0 <NVIC_EncodePriority>
 80047e4:	4603      	mov	r3, r0
 80047e6:	4619      	mov	r1, r3
 80047e8:	2028      	movs	r0, #40	; 0x28
 80047ea:	f7ff fd2f 	bl	800424c <__NVIC_SetPriority>
  NVIC_EnableIRQ(EXTI15_10_IRQn);
 80047ee:	2028      	movs	r0, #40	; 0x28
 80047f0:	f7ff fd0e 	bl	8004210 <__NVIC_EnableIRQ>

}
 80047f4:	bf00      	nop
 80047f6:	3728      	adds	r7, #40	; 0x28
 80047f8:	46bd      	mov	sp, r7
 80047fa:	e009      	b.n	8004810 <MX_GPIO_Init+0x3a0>
 80047fc:	48000800 	.word	0x48000800
 8004800:	48000400 	.word	0x48000400
 8004804:	0f000003 	.word	0x0f000003
 8004808:	f0000003 	.word	0xf0000003
 800480c:	48001400 	.word	0x48001400
 8004810:	bd80      	pop	{r7, pc}
 8004812:	bf00      	nop

08004814 <ITM_SendChar>:
           \li Is blocking when a debugger is connected, but the previous character sent has not been transmitted.
  \param [in]     ch  Character to transmit.
  \returns            Character to transmit.
 */
__STATIC_INLINE uint32_t ITM_SendChar (uint32_t ch)
{
 8004814:	b480      	push	{r7}
 8004816:	b083      	sub	sp, #12
 8004818:	af00      	add	r7, sp, #0
 800481a:	6078      	str	r0, [r7, #4]
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 800481c:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8004820:	f8d3 3e80 	ldr.w	r3, [r3, #3712]	; 0xe80
 8004824:	f003 0301 	and.w	r3, r3, #1
 8004828:	2b00      	cmp	r3, #0
 800482a:	d013      	beq.n	8004854 <ITM_SendChar+0x40>
      ((ITM->TER & 1UL               ) != 0UL)   )     /* ITM Port #0 enabled */
 800482c:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8004830:	f8d3 3e00 	ldr.w	r3, [r3, #3584]	; 0xe00
 8004834:	f003 0301 	and.w	r3, r3, #1
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 8004838:	2b00      	cmp	r3, #0
 800483a:	d00b      	beq.n	8004854 <ITM_SendChar+0x40>
  {
    while (ITM->PORT[0U].u32 == 0UL)
 800483c:	e000      	b.n	8004840 <ITM_SendChar+0x2c>
    {
      __NOP();
 800483e:	bf00      	nop
    while (ITM->PORT[0U].u32 == 0UL)
 8004840:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8004844:	681b      	ldr	r3, [r3, #0]
 8004846:	2b00      	cmp	r3, #0
 8004848:	d0f9      	beq.n	800483e <ITM_SendChar+0x2a>
    }
    ITM->PORT[0U].u8 = (uint8_t)ch;
 800484a:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 800484e:	687a      	ldr	r2, [r7, #4]
 8004850:	b2d2      	uxtb	r2, r2
 8004852:	701a      	strb	r2, [r3, #0]
  }
  return (ch);
 8004854:	687b      	ldr	r3, [r7, #4]
}
 8004856:	4618      	mov	r0, r3
 8004858:	370c      	adds	r7, #12
 800485a:	46bd      	mov	sp, r7
 800485c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004860:	4770      	bx	lr

08004862 <_write>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
int _write(int file, char *ptr, int len)
{
 8004862:	b580      	push	{r7, lr}
 8004864:	b086      	sub	sp, #24
 8004866:	af00      	add	r7, sp, #0
 8004868:	60f8      	str	r0, [r7, #12]
 800486a:	60b9      	str	r1, [r7, #8]
 800486c:	607a      	str	r2, [r7, #4]
  /* Implement your write code here, this is used by puts and printf for example */
  int i=0;
 800486e:	2300      	movs	r3, #0
 8004870:	617b      	str	r3, [r7, #20]
  for(i=0 ; i<len ; i++)
 8004872:	2300      	movs	r3, #0
 8004874:	617b      	str	r3, [r7, #20]
 8004876:	e009      	b.n	800488c <_write+0x2a>
    ITM_SendChar((*ptr++));
 8004878:	68bb      	ldr	r3, [r7, #8]
 800487a:	1c5a      	adds	r2, r3, #1
 800487c:	60ba      	str	r2, [r7, #8]
 800487e:	781b      	ldrb	r3, [r3, #0]
 8004880:	4618      	mov	r0, r3
 8004882:	f7ff ffc7 	bl	8004814 <ITM_SendChar>
  for(i=0 ; i<len ; i++)
 8004886:	697b      	ldr	r3, [r7, #20]
 8004888:	3301      	adds	r3, #1
 800488a:	617b      	str	r3, [r7, #20]
 800488c:	697a      	ldr	r2, [r7, #20]
 800488e:	687b      	ldr	r3, [r7, #4]
 8004890:	429a      	cmp	r2, r3
 8004892:	dbf1      	blt.n	8004878 <_write+0x16>
  return len;
 8004894:	687b      	ldr	r3, [r7, #4]
}
 8004896:	4618      	mov	r0, r3
 8004898:	3718      	adds	r7, #24
 800489a:	46bd      	mov	sp, r7
 800489c:	bd80      	pop	{r7, pc}

0800489e <HAL_DAC_ErrorCallbackCh1>:

void HAL_DAC_ErrorCallbackCh1(DAC_HandleTypeDef *hdac)
{
 800489e:	b480      	push	{r7}
 80048a0:	b083      	sub	sp, #12
 80048a2:	af00      	add	r7, sp, #0
 80048a4:	6078      	str	r0, [r7, #4]
	// do something
}
 80048a6:	bf00      	nop
 80048a8:	370c      	adds	r7, #12
 80048aa:	46bd      	mov	sp, r7
 80048ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048b0:	4770      	bx	lr
	...

080048b4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80048b4:	b580      	push	{r7, lr}
 80048b6:	b082      	sub	sp, #8
 80048b8:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 80048ba:	f000 ff56 	bl	800576a <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80048be:	f000 f88f 	bl	80049e0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80048c2:	f7ff fdd5 	bl	8004470 <MX_GPIO_Init>
  MX_DMA_Init();
 80048c6:	f7ff fc0f 	bl	80040e8 <MX_DMA_Init>
  MX_DAC1_Init();
 80048ca:	f7ff fabf 	bl	8003e4c <MX_DAC1_Init>
  MX_DAC2_Init();
 80048ce:	f7ff fb07 	bl	8003ee0 <MX_DAC2_Init>
  MX_ADC1_Init();
 80048d2:	f7ff f97d 	bl	8003bd0 <MX_ADC1_Init>
  MX_COMP1_Init();
 80048d6:	f7ff fa5f 	bl	8003d98 <MX_COMP1_Init>
  MX_TIM2_Init();
 80048da:	f000 fc3d 	bl	8005158 <MX_TIM2_Init>
  MX_TIM17_Init();
 80048de:	f000 fdd5 	bl	800548c <MX_TIM17_Init>
  MX_SPI3_Init();
 80048e2:	f000 f929 	bl	8004b38 <MX_SPI3_Init>
  MX_RNG_Init();
 80048e6:	f000 f919 	bl	8004b1c <MX_RNG_Init>
  MX_TIM1_Init();
 80048ea:	f000 fbc5 	bl	8005078 <MX_TIM1_Init>
  MX_TIM8_Init();
 80048ee:	f000 fced 	bl	80052cc <MX_TIM8_Init>
  MX_TIM16_Init();
 80048f2:	f000 fda5 	bl	8005440 <MX_TIM16_Init>
  MX_TIM15_Init();
 80048f6:	f000 fd51 	bl	800539c <MX_TIM15_Init>
  MX_TIM5_Init();
 80048fa:	f000 fc97 	bl	800522c <MX_TIM5_Init>
  /* USER CODE BEGIN 2 */

  DT_InitRegister();
 80048fe:	f7fe fcc1 	bl	8003284 <DT_InitRegister>

  // main signal function output (external)
  FuncO_ApplyPreset_Fast(eDefaultFuncPreset);
 8004902:	2000      	movs	r0, #0
 8004904:	f7fe ff00 	bl	8003708 <FuncO_ApplyPreset_Fast>
  //HAL_DAC_Start_DMA(&hdac1, DAC1_CHANNEL_1, sine_data_table, SINE_DATA_SIZE, DAC_ALIGN_12B_R);
  //TIM8->ARR = sin1_max_arr;

  // DC bias output (internal)
  HAL_DAC_Start(&hdac1, DAC1_CHANNEL_2);
 8004908:	2110      	movs	r1, #16
 800490a:	482b      	ldr	r0, [pc, #172]	; (80049b8 <main+0x104>)
 800490c:	f002 fc31 	bl	8007172 <HAL_DAC_Start>
  //HAL_DAC_Start_DMA(&hdac2, DAC2_CHANNEL_1, sine_data_table, SINE_DATA_SIZE, DAC_ALIGN_12B_R);
  //HAL_DAC_Start_DMA(&hdac2, DAC2_CHANNEL_1, square_data_table, SQUARE_DATA_SIZE, DAC_ALIGN_12B_R);
  //HAL_DAC_Start_DMA(&hdac2, DAC2_CHANNEL_1, unitimpulse_data_table, UNITIMPULSE_DATA_SIZE, DAC_ALIGN_12B_R);
  //HAL_DAC_Start_DMA(&hdac2, DAC2_CHANNEL_1, saw_data_table, SAW_DATA_SIZE, DAC_ALIGN_12B_R);
  //HAL_DAC_Start_DMA(&hdac2, DAC2_CHANNEL_1, saw_rev_data_table, SAW_REV_DATA_SIZE, DAC_ALIGN_12B_R);
  HAL_DAC_Start_DMA(&hdac2, DAC2_CHANNEL_1, triangle_data_table, TRIANGLE_DATA_SIZE, DAC_ALIGN_12B_R);
 8004910:	2300      	movs	r3, #0
 8004912:	9300      	str	r3, [sp, #0]
 8004914:	2378      	movs	r3, #120	; 0x78
 8004916:	4a29      	ldr	r2, [pc, #164]	; (80049bc <main+0x108>)
 8004918:	2100      	movs	r1, #0
 800491a:	4829      	ldr	r0, [pc, #164]	; (80049c0 <main+0x10c>)
 800491c:	f002 fc7c 	bl	8007218 <HAL_DAC_Start_DMA>
  //HAL_DAC_Start_DMA(&hdac2, DAC2_CHANNEL_1, trigger_input, TRIGGER_DATA_SIZE, DAC_ALIGN_12B_R);

#ifndef DISABLE_ALL_TIMERS

  // single clock to run all DAC channels. TODO add independent clocks
  HAL_TIM_Base_Start(&htim8);
 8004920:	4828      	ldr	r0, [pc, #160]	; (80049c4 <main+0x110>)
 8004922:	f004 ffe3 	bl	80098ec <HAL_TIM_Base_Start>
  FreqO_ApplyPreset(eDefaultFreqPreset);
 8004926:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800492a:	f7fe fe29 	bl	8003580 <FreqO_ApplyPreset>

#endif //DISABLE_ALL_TIMERS

  // DC bias inversion
  HAL_GPIO_WritePin(DCBIAS_INVERT_GPIO_Port, DCBIAS_INVERT_Pin, GPIO_PIN_SET);
 800492e:	2201      	movs	r2, #1
 8004930:	2108      	movs	r1, #8
 8004932:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8004936:	f003 fc5d 	bl	80081f4 <HAL_GPIO_WritePin>

  // PGA gain
  GO_ApplyPreset_Fast(eDefaultGainPreset);
 800493a:	2003      	movs	r0, #3
 800493c:	f7ff f802 	bl	8003944 <GO_ApplyPreset_Fast>
  //HAL_TIM_Base_Start_IT(&htim17);
#endif	//DISABLE_ALL_TIMERS


// http://www.ti.com/lit/ds/symlink/ts5a3357.pdf
  HAL_GPIO_WritePin(TRIGMUX1_GPIO_Port, TRIGMUX1_Pin, GPIO_PIN_RESET);	// TS5A3357 Pin6
 8004940:	2200      	movs	r2, #0
 8004942:	f44f 7180 	mov.w	r1, #256	; 0x100
 8004946:	4820      	ldr	r0, [pc, #128]	; (80049c8 <main+0x114>)
 8004948:	f003 fc54 	bl	80081f4 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(TRIGMUX2_GPIO_Port, TRIGMUX2_Pin, GPIO_PIN_RESET);	// TS5A3357 Pin5
 800494c:	2200      	movs	r2, #0
 800494e:	f44f 7100 	mov.w	r1, #512	; 0x200
 8004952:	481d      	ldr	r0, [pc, #116]	; (80049c8 <main+0x114>)
 8004954:	f003 fc4e 	bl	80081f4 <HAL_GPIO_WritePin>

#ifdef TIM_TRIGGER_MODE
  // input capture on in TIM2 slave-mode TF1FP1

  // set HW switch to direct ext. trigger input to TIM pin
  HAL_GPIO_WritePin(TRIGMODE_GPIO_Port, TRIGMODE_Pin, GPIO_PIN_SET);
 8004958:	2201      	movs	r2, #1
 800495a:	2108      	movs	r1, #8
 800495c:	481a      	ldr	r0, [pc, #104]	; (80049c8 <main+0x114>)
 800495e:	f003 fc49 	bl	80081f4 <HAL_GPIO_WritePin>
  //HAL_GPIO_WritePin(TRIGMUX1_GPIO_Port, TRIGMUX1_Pin, GPIO_PIN_SET);	// TS5A3357 Pin6
  //HAL_GPIO_WritePin(TRIGMUX2_GPIO_Port, TRIGMUX2_Pin, GPIO_PIN_RESET); // TS5A3357 Pin5

  // clear slave mode select reg
  TIM2->SMCR &= ~(TIM_SMCR_SMS_0 | TIM_SMCR_SMS_1 | TIM_SMCR_SMS_2);
 8004962:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8004966:	689b      	ldr	r3, [r3, #8]
 8004968:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800496c:	f023 0307 	bic.w	r3, r3, #7
 8004970:	6093      	str	r3, [r2, #8]

  // slave mode
  //TIM2->SMCR |= TIM_SMCR_SMS_2;						// SLAVE MODE: RESET
  TIM2->SMCR |= TIM_SMCR_SMS_0 | TIM_SMCR_SMS_2;	// SLAVE MODE: GATED
 8004972:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8004976:	689b      	ldr	r3, [r3, #8]
 8004978:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800497c:	f043 0305 	orr.w	r3, r3, #5
 8004980:	6093      	str	r3, [r2, #8]
  //TIM2->SMCR |= TIM_SMCR_SMS_1 | TIM_SMCR_SMS_2;	// SLAVE MODE: TRIGGER

#ifndef DISABLE_ALL_TIMERS
  HAL_TIM_Base_Start_IT(&htim2);
 8004982:	4812      	ldr	r0, [pc, #72]	; (80049cc <main+0x118>)
 8004984:	f004 ffe0 	bl	8009948 <HAL_TIM_Base_Start_IT>



#ifndef DISABLE_ALL_TIMERS
  // encoder input
  HAL_TIM_Base_Start(&htim1);		// enable encoder timer
 8004988:	4811      	ldr	r0, [pc, #68]	; (80049d0 <main+0x11c>)
 800498a:	f004 ffaf 	bl	80098ec <HAL_TIM_Base_Start>
  //TIM1->DIER |= TIM_DIER_IDXIE;		// enable index interrupts

#endif	//DISABLE_ALL_TIMERS

  TIM6->PSC = 65535;
 800498e:	4b11      	ldr	r3, [pc, #68]	; (80049d4 <main+0x120>)
 8004990:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8004994:	629a      	str	r2, [r3, #40]	; 0x28
  TIM6->ARR = 65535;
 8004996:	4b0f      	ldr	r3, [pc, #60]	; (80049d4 <main+0x120>)
 8004998:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800499c:	62da      	str	r2, [r3, #44]	; 0x2c



  // TFT lib enable
  DM_Init();
 800499e:	f7fc f92b 	bl	8000bf8 <DM_Init>
  DM_PostInit();
 80049a2:	f7fc f937 	bl	8000c14 <DM_PostInit>


  HAL_TIM_Base_Start_IT(&htim15);
 80049a6:	480c      	ldr	r0, [pc, #48]	; (80049d8 <main+0x124>)
 80049a8:	f004 ffce 	bl	8009948 <HAL_TIM_Base_Start_IT>

  // debounce timer
  HAL_TIM_Base_Start(&htim5);
 80049ac:	480b      	ldr	r0, [pc, #44]	; (80049dc <main+0x128>)
 80049ae:	f004 ff9d 	bl	80098ec <HAL_TIM_Base_Start>
  /* USER CODE BEGIN WHILE */
  while (1)
  {


	EM_ProcessEvent();
 80049b2:	f7fe f911 	bl	8002bd8 <EM_ProcessEvent>
 80049b6:	e7fc      	b.n	80049b2 <main+0xfe>
 80049b8:	20001540 	.word	0x20001540
 80049bc:	20000e68 	.word	0x20000e68
 80049c0:	2000152c 	.word	0x2000152c
 80049c4:	20001678 	.word	0x20001678
 80049c8:	48000800 	.word	0x48000800
 80049cc:	200017f4 	.word	0x200017f4
 80049d0:	200017a8 	.word	0x200017a8
 80049d4:	40001000 	.word	0x40001000
 80049d8:	200016c4 	.word	0x200016c4
 80049dc:	2000175c 	.word	0x2000175c

080049e0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80049e0:	b580      	push	{r7, lr}
 80049e2:	b0a8      	sub	sp, #160	; 0xa0
 80049e4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80049e6:	f107 0368 	add.w	r3, r7, #104	; 0x68
 80049ea:	2238      	movs	r2, #56	; 0x38
 80049ec:	2100      	movs	r1, #0
 80049ee:	4618      	mov	r0, r3
 80049f0:	f007 fa4c 	bl	800be8c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80049f4:	f107 0354 	add.w	r3, r7, #84	; 0x54
 80049f8:	2200      	movs	r2, #0
 80049fa:	601a      	str	r2, [r3, #0]
 80049fc:	605a      	str	r2, [r3, #4]
 80049fe:	609a      	str	r2, [r3, #8]
 8004a00:	60da      	str	r2, [r3, #12]
 8004a02:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8004a04:	463b      	mov	r3, r7
 8004a06:	2254      	movs	r2, #84	; 0x54
 8004a08:	2100      	movs	r1, #0
 8004a0a:	4618      	mov	r0, r3
 8004a0c:	f007 fa3e 	bl	800be8c <memset>

  /** Configure the main internal regulator output voltage 
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1_BOOST);
 8004a10:	2000      	movs	r0, #0
 8004a12:	f003 fc07 	bl	8008224 <HAL_PWREx_ControlVoltageScaling>
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_HSI48;
 8004a16:	2322      	movs	r3, #34	; 0x22
 8004a18:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8004a1a:	f44f 7380 	mov.w	r3, #256	; 0x100
 8004a1e:	677b      	str	r3, [r7, #116]	; 0x74
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8004a20:	2340      	movs	r3, #64	; 0x40
 8004a22:	67bb      	str	r3, [r7, #120]	; 0x78
  RCC_OscInitStruct.HSI48State = RCC_HSI48_ON;
 8004a24:	2301      	movs	r3, #1
 8004a26:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8004a2a:	2302      	movs	r3, #2
 8004a2c:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8004a30:	2302      	movs	r3, #2
 8004a32:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV2;
 8004a36:	2302      	movs	r3, #2
 8004a38:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  RCC_OscInitStruct.PLL.PLLN = 42;
 8004a3c:	232a      	movs	r3, #42	; 0x2a
 8004a3e:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8004a42:	2302      	movs	r3, #2
 8004a44:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV4;
 8004a48:	2304      	movs	r3, #4
 8004a4a:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8004a4e:	2302      	movs	r3, #2
 8004a50:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8004a54:	f107 0368 	add.w	r3, r7, #104	; 0x68
 8004a58:	4618      	mov	r0, r3
 8004a5a:	f003 fc87 	bl	800836c <HAL_RCC_OscConfig>
 8004a5e:	4603      	mov	r3, r0
 8004a60:	2b00      	cmp	r3, #0
 8004a62:	d001      	beq.n	8004a68 <SystemClock_Config+0x88>
  {
    Error_Handler();
 8004a64:	f000 f82a 	bl	8004abc <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8004a68:	230f      	movs	r3, #15
 8004a6a:	657b      	str	r3, [r7, #84]	; 0x54
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8004a6c:	2303      	movs	r3, #3
 8004a6e:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8004a70:	2300      	movs	r3, #0
 8004a72:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8004a74:	2300      	movs	r3, #0
 8004a76:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8004a78:	2300      	movs	r3, #0
 8004a7a:	667b      	str	r3, [r7, #100]	; 0x64

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_8) != HAL_OK)
 8004a7c:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8004a80:	2108      	movs	r1, #8
 8004a82:	4618      	mov	r0, r3
 8004a84:	f003 ff8a 	bl	800899c <HAL_RCC_ClockConfig>
 8004a88:	4603      	mov	r3, r0
 8004a8a:	2b00      	cmp	r3, #0
 8004a8c:	d001      	beq.n	8004a92 <SystemClock_Config+0xb2>
  {
    Error_Handler();
 8004a8e:	f000 f815 	bl	8004abc <Error_Handler>
  }
  /** Initializes the peripherals clocks 
  */
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_RNG|RCC_PERIPHCLK_ADC12;
 8004a92:	f44f 4340 	mov.w	r3, #49152	; 0xc000
 8004a96:	603b      	str	r3, [r7, #0]
  PeriphClkInit.RngClockSelection = RCC_RNGCLKSOURCE_HSI48;
 8004a98:	2300      	movs	r3, #0
 8004a9a:	643b      	str	r3, [r7, #64]	; 0x40
  PeriphClkInit.Adc12ClockSelection = RCC_ADC12CLKSOURCE_SYSCLK;
 8004a9c:	f04f 5300 	mov.w	r3, #536870912	; 0x20000000
 8004aa0:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8004aa2:	463b      	mov	r3, r7
 8004aa4:	4618      	mov	r0, r3
 8004aa6:	f004 f969 	bl	8008d7c <HAL_RCCEx_PeriphCLKConfig>
 8004aaa:	4603      	mov	r3, r0
 8004aac:	2b00      	cmp	r3, #0
 8004aae:	d001      	beq.n	8004ab4 <SystemClock_Config+0xd4>
  {
    Error_Handler();
 8004ab0:	f000 f804 	bl	8004abc <Error_Handler>
  }
}
 8004ab4:	bf00      	nop
 8004ab6:	37a0      	adds	r7, #160	; 0xa0
 8004ab8:	46bd      	mov	sp, r7
 8004aba:	bd80      	pop	{r7, pc}

08004abc <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8004abc:	b480      	push	{r7}
 8004abe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8004ac0:	bf00      	nop
 8004ac2:	46bd      	mov	sp, r7
 8004ac4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ac8:	4770      	bx	lr

08004aca <LL_RNG_Enable>:
  * @rmtoll CR           RNGEN         LL_RNG_Enable
  * @param  RNGx RNG Instance
  * @retval None
  */
__STATIC_INLINE void LL_RNG_Enable(RNG_TypeDef *RNGx)
{
 8004aca:	b480      	push	{r7}
 8004acc:	b083      	sub	sp, #12
 8004ace:	af00      	add	r7, sp, #0
 8004ad0:	6078      	str	r0, [r7, #4]
  SET_BIT(RNGx->CR, RNG_CR_RNGEN);
 8004ad2:	687b      	ldr	r3, [r7, #4]
 8004ad4:	681b      	ldr	r3, [r3, #0]
 8004ad6:	f043 0204 	orr.w	r2, r3, #4
 8004ada:	687b      	ldr	r3, [r7, #4]
 8004adc:	601a      	str	r2, [r3, #0]
}
 8004ade:	bf00      	nop
 8004ae0:	370c      	adds	r7, #12
 8004ae2:	46bd      	mov	sp, r7
 8004ae4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ae8:	4770      	bx	lr
	...

08004aec <LL_AHB2_GRP1_EnableClock>:
{
 8004aec:	b480      	push	{r7}
 8004aee:	b085      	sub	sp, #20
 8004af0:	af00      	add	r7, sp, #0
 8004af2:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB2ENR, Periphs);
 8004af4:	4b08      	ldr	r3, [pc, #32]	; (8004b18 <LL_AHB2_GRP1_EnableClock+0x2c>)
 8004af6:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8004af8:	4907      	ldr	r1, [pc, #28]	; (8004b18 <LL_AHB2_GRP1_EnableClock+0x2c>)
 8004afa:	687b      	ldr	r3, [r7, #4]
 8004afc:	4313      	orrs	r3, r2
 8004afe:	64cb      	str	r3, [r1, #76]	; 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 8004b00:	4b05      	ldr	r3, [pc, #20]	; (8004b18 <LL_AHB2_GRP1_EnableClock+0x2c>)
 8004b02:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8004b04:	687b      	ldr	r3, [r7, #4]
 8004b06:	4013      	ands	r3, r2
 8004b08:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8004b0a:	68fb      	ldr	r3, [r7, #12]
}
 8004b0c:	bf00      	nop
 8004b0e:	3714      	adds	r7, #20
 8004b10:	46bd      	mov	sp, r7
 8004b12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b16:	4770      	bx	lr
 8004b18:	40021000 	.word	0x40021000

08004b1c <MX_RNG_Init>:

/* USER CODE END 0 */

/* RNG init function */
void MX_RNG_Init(void)
{
 8004b1c:	b580      	push	{r7, lr}
 8004b1e:	af00      	add	r7, sp, #0

  /* Peripheral clock enable */
  LL_AHB2_GRP1_EnableClock(LL_AHB2_GRP1_PERIPH_RNG);
 8004b20:	f04f 6080 	mov.w	r0, #67108864	; 0x4000000
 8004b24:	f7ff ffe2 	bl	8004aec <LL_AHB2_GRP1_EnableClock>

  LL_RNG_Enable(RNG);
 8004b28:	4802      	ldr	r0, [pc, #8]	; (8004b34 <MX_RNG_Init+0x18>)
 8004b2a:	f7ff ffce 	bl	8004aca <LL_RNG_Enable>

}
 8004b2e:	bf00      	nop
 8004b30:	bd80      	pop	{r7, pc}
 8004b32:	bf00      	nop
 8004b34:	50060800 	.word	0x50060800

08004b38 <MX_SPI3_Init>:

SPI_HandleTypeDef hspi3;

/* SPI3 init function */
void MX_SPI3_Init(void)
{
 8004b38:	b580      	push	{r7, lr}
 8004b3a:	af00      	add	r7, sp, #0

  hspi3.Instance = SPI3;
 8004b3c:	4b1b      	ldr	r3, [pc, #108]	; (8004bac <MX_SPI3_Init+0x74>)
 8004b3e:	4a1c      	ldr	r2, [pc, #112]	; (8004bb0 <MX_SPI3_Init+0x78>)
 8004b40:	601a      	str	r2, [r3, #0]
  hspi3.Init.Mode = SPI_MODE_MASTER;
 8004b42:	4b1a      	ldr	r3, [pc, #104]	; (8004bac <MX_SPI3_Init+0x74>)
 8004b44:	f44f 7282 	mov.w	r2, #260	; 0x104
 8004b48:	605a      	str	r2, [r3, #4]
  hspi3.Init.Direction = SPI_DIRECTION_2LINES;
 8004b4a:	4b18      	ldr	r3, [pc, #96]	; (8004bac <MX_SPI3_Init+0x74>)
 8004b4c:	2200      	movs	r2, #0
 8004b4e:	609a      	str	r2, [r3, #8]
  hspi3.Init.DataSize = SPI_DATASIZE_8BIT;
 8004b50:	4b16      	ldr	r3, [pc, #88]	; (8004bac <MX_SPI3_Init+0x74>)
 8004b52:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 8004b56:	60da      	str	r2, [r3, #12]
  hspi3.Init.CLKPolarity = SPI_POLARITY_LOW;
 8004b58:	4b14      	ldr	r3, [pc, #80]	; (8004bac <MX_SPI3_Init+0x74>)
 8004b5a:	2200      	movs	r2, #0
 8004b5c:	611a      	str	r2, [r3, #16]
  hspi3.Init.CLKPhase = SPI_PHASE_1EDGE;
 8004b5e:	4b13      	ldr	r3, [pc, #76]	; (8004bac <MX_SPI3_Init+0x74>)
 8004b60:	2200      	movs	r2, #0
 8004b62:	615a      	str	r2, [r3, #20]
  hspi3.Init.NSS = SPI_NSS_SOFT;
 8004b64:	4b11      	ldr	r3, [pc, #68]	; (8004bac <MX_SPI3_Init+0x74>)
 8004b66:	f44f 7200 	mov.w	r2, #512	; 0x200
 8004b6a:	619a      	str	r2, [r3, #24]
  hspi3.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_8;
 8004b6c:	4b0f      	ldr	r3, [pc, #60]	; (8004bac <MX_SPI3_Init+0x74>)
 8004b6e:	2210      	movs	r2, #16
 8004b70:	61da      	str	r2, [r3, #28]
  hspi3.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8004b72:	4b0e      	ldr	r3, [pc, #56]	; (8004bac <MX_SPI3_Init+0x74>)
 8004b74:	2200      	movs	r2, #0
 8004b76:	621a      	str	r2, [r3, #32]
  hspi3.Init.TIMode = SPI_TIMODE_DISABLE;
 8004b78:	4b0c      	ldr	r3, [pc, #48]	; (8004bac <MX_SPI3_Init+0x74>)
 8004b7a:	2200      	movs	r2, #0
 8004b7c:	625a      	str	r2, [r3, #36]	; 0x24
  hspi3.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8004b7e:	4b0b      	ldr	r3, [pc, #44]	; (8004bac <MX_SPI3_Init+0x74>)
 8004b80:	2200      	movs	r2, #0
 8004b82:	629a      	str	r2, [r3, #40]	; 0x28
  hspi3.Init.CRCPolynomial = 7;
 8004b84:	4b09      	ldr	r3, [pc, #36]	; (8004bac <MX_SPI3_Init+0x74>)
 8004b86:	2207      	movs	r2, #7
 8004b88:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi3.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8004b8a:	4b08      	ldr	r3, [pc, #32]	; (8004bac <MX_SPI3_Init+0x74>)
 8004b8c:	2200      	movs	r2, #0
 8004b8e:	631a      	str	r2, [r3, #48]	; 0x30
  hspi3.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8004b90:	4b06      	ldr	r3, [pc, #24]	; (8004bac <MX_SPI3_Init+0x74>)
 8004b92:	2208      	movs	r2, #8
 8004b94:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi3) != HAL_OK)
 8004b96:	4805      	ldr	r0, [pc, #20]	; (8004bac <MX_SPI3_Init+0x74>)
 8004b98:	f004 fb3c 	bl	8009214 <HAL_SPI_Init>
 8004b9c:	4603      	mov	r3, r0
 8004b9e:	2b00      	cmp	r3, #0
 8004ba0:	d001      	beq.n	8004ba6 <MX_SPI3_Init+0x6e>
  {
    Error_Handler();
 8004ba2:	f7ff ff8b 	bl	8004abc <Error_Handler>
  }

}
 8004ba6:	bf00      	nop
 8004ba8:	bd80      	pop	{r7, pc}
 8004baa:	bf00      	nop
 8004bac:	20001614 	.word	0x20001614
 8004bb0:	40003c00 	.word	0x40003c00

08004bb4 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8004bb4:	b580      	push	{r7, lr}
 8004bb6:	b08a      	sub	sp, #40	; 0x28
 8004bb8:	af00      	add	r7, sp, #0
 8004bba:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004bbc:	f107 0314 	add.w	r3, r7, #20
 8004bc0:	2200      	movs	r2, #0
 8004bc2:	601a      	str	r2, [r3, #0]
 8004bc4:	605a      	str	r2, [r3, #4]
 8004bc6:	609a      	str	r2, [r3, #8]
 8004bc8:	60da      	str	r2, [r3, #12]
 8004bca:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI3)
 8004bcc:	687b      	ldr	r3, [r7, #4]
 8004bce:	681b      	ldr	r3, [r3, #0]
 8004bd0:	4a17      	ldr	r2, [pc, #92]	; (8004c30 <HAL_SPI_MspInit+0x7c>)
 8004bd2:	4293      	cmp	r3, r2
 8004bd4:	d128      	bne.n	8004c28 <HAL_SPI_MspInit+0x74>
  {
  /* USER CODE BEGIN SPI3_MspInit 0 */

  /* USER CODE END SPI3_MspInit 0 */
    /* SPI3 clock enable */
    __HAL_RCC_SPI3_CLK_ENABLE();
 8004bd6:	4b17      	ldr	r3, [pc, #92]	; (8004c34 <HAL_SPI_MspInit+0x80>)
 8004bd8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004bda:	4a16      	ldr	r2, [pc, #88]	; (8004c34 <HAL_SPI_MspInit+0x80>)
 8004bdc:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004be0:	6593      	str	r3, [r2, #88]	; 0x58
 8004be2:	4b14      	ldr	r3, [pc, #80]	; (8004c34 <HAL_SPI_MspInit+0x80>)
 8004be4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004be6:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8004bea:	613b      	str	r3, [r7, #16]
 8004bec:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8004bee:	4b11      	ldr	r3, [pc, #68]	; (8004c34 <HAL_SPI_MspInit+0x80>)
 8004bf0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004bf2:	4a10      	ldr	r2, [pc, #64]	; (8004c34 <HAL_SPI_MspInit+0x80>)
 8004bf4:	f043 0304 	orr.w	r3, r3, #4
 8004bf8:	64d3      	str	r3, [r2, #76]	; 0x4c
 8004bfa:	4b0e      	ldr	r3, [pc, #56]	; (8004c34 <HAL_SPI_MspInit+0x80>)
 8004bfc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004bfe:	f003 0304 	and.w	r3, r3, #4
 8004c02:	60fb      	str	r3, [r7, #12]
 8004c04:	68fb      	ldr	r3, [r7, #12]
    /**SPI3 GPIO Configuration    
    PC10     ------> SPI3_SCK
    PC11     ------> SPI3_MISO
    PC12     ------> SPI3_MOSI 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12;
 8004c06:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 8004c0a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004c0c:	2302      	movs	r3, #2
 8004c0e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004c10:	2300      	movs	r3, #0
 8004c12:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004c14:	2300      	movs	r3, #0
 8004c16:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8004c18:	2306      	movs	r3, #6
 8004c1a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8004c1c:	f107 0314 	add.w	r3, r7, #20
 8004c20:	4619      	mov	r1, r3
 8004c22:	4805      	ldr	r0, [pc, #20]	; (8004c38 <HAL_SPI_MspInit+0x84>)
 8004c24:	f003 f964 	bl	8007ef0 <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }
}
 8004c28:	bf00      	nop
 8004c2a:	3728      	adds	r7, #40	; 0x28
 8004c2c:	46bd      	mov	sp, r7
 8004c2e:	bd80      	pop	{r7, pc}
 8004c30:	40003c00 	.word	0x40003c00
 8004c34:	40021000 	.word	0x40021000
 8004c38:	48000800 	.word	0x48000800

08004c3c <LL_PWR_DisableUCPDDeadBattery>:
  *         control to the UCPD (which should therefore be initialized before doing the disable).
  * @rmtoll CR3          UCPD_DBDIS           LL_PWR_DisableUCPDDeadBattery
  * @retval None
  */
__STATIC_INLINE void LL_PWR_DisableUCPDDeadBattery(void)
{
 8004c3c:	b480      	push	{r7}
 8004c3e:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR3, PWR_CR3_UCPD_DBDIS);
 8004c40:	4b05      	ldr	r3, [pc, #20]	; (8004c58 <LL_PWR_DisableUCPDDeadBattery+0x1c>)
 8004c42:	689b      	ldr	r3, [r3, #8]
 8004c44:	4a04      	ldr	r2, [pc, #16]	; (8004c58 <LL_PWR_DisableUCPDDeadBattery+0x1c>)
 8004c46:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8004c4a:	6093      	str	r3, [r2, #8]
}
 8004c4c:	bf00      	nop
 8004c4e:	46bd      	mov	sp, r7
 8004c50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c54:	4770      	bx	lr
 8004c56:	bf00      	nop
 8004c58:	40007000 	.word	0x40007000

08004c5c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8004c5c:	b580      	push	{r7, lr}
 8004c5e:	b082      	sub	sp, #8
 8004c60:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004c62:	4b0f      	ldr	r3, [pc, #60]	; (8004ca0 <HAL_MspInit+0x44>)
 8004c64:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004c66:	4a0e      	ldr	r2, [pc, #56]	; (8004ca0 <HAL_MspInit+0x44>)
 8004c68:	f043 0301 	orr.w	r3, r3, #1
 8004c6c:	6613      	str	r3, [r2, #96]	; 0x60
 8004c6e:	4b0c      	ldr	r3, [pc, #48]	; (8004ca0 <HAL_MspInit+0x44>)
 8004c70:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004c72:	f003 0301 	and.w	r3, r3, #1
 8004c76:	607b      	str	r3, [r7, #4]
 8004c78:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8004c7a:	4b09      	ldr	r3, [pc, #36]	; (8004ca0 <HAL_MspInit+0x44>)
 8004c7c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004c7e:	4a08      	ldr	r2, [pc, #32]	; (8004ca0 <HAL_MspInit+0x44>)
 8004c80:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004c84:	6593      	str	r3, [r2, #88]	; 0x58
 8004c86:	4b06      	ldr	r3, [pc, #24]	; (8004ca0 <HAL_MspInit+0x44>)
 8004c88:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004c8a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004c8e:	603b      	str	r3, [r7, #0]
 8004c90:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral 
  */
  LL_PWR_DisableDeadBatteryPD();
 8004c92:	f7ff ffd3 	bl	8004c3c <LL_PWR_DisableUCPDDeadBattery>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8004c96:	bf00      	nop
 8004c98:	3708      	adds	r7, #8
 8004c9a:	46bd      	mov	sp, r7
 8004c9c:	bd80      	pop	{r7, pc}
 8004c9e:	bf00      	nop
 8004ca0:	40021000 	.word	0x40021000

08004ca4 <LL_EXTI_IsActiveFlag_0_31>:
  * @note   (*): Available in some devices
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_EXTI_IsActiveFlag_0_31(uint32_t ExtiLine)
{
 8004ca4:	b480      	push	{r7}
 8004ca6:	b083      	sub	sp, #12
 8004ca8:	af00      	add	r7, sp, #0
 8004caa:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(EXTI->PR1, ExtiLine) == (ExtiLine)) ? 1UL : 0UL);
 8004cac:	4b07      	ldr	r3, [pc, #28]	; (8004ccc <LL_EXTI_IsActiveFlag_0_31+0x28>)
 8004cae:	695a      	ldr	r2, [r3, #20]
 8004cb0:	687b      	ldr	r3, [r7, #4]
 8004cb2:	4013      	ands	r3, r2
 8004cb4:	687a      	ldr	r2, [r7, #4]
 8004cb6:	429a      	cmp	r2, r3
 8004cb8:	d101      	bne.n	8004cbe <LL_EXTI_IsActiveFlag_0_31+0x1a>
 8004cba:	2301      	movs	r3, #1
 8004cbc:	e000      	b.n	8004cc0 <LL_EXTI_IsActiveFlag_0_31+0x1c>
 8004cbe:	2300      	movs	r3, #0
}
 8004cc0:	4618      	mov	r0, r3
 8004cc2:	370c      	adds	r7, #12
 8004cc4:	46bd      	mov	sp, r7
 8004cc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cca:	4770      	bx	lr
 8004ccc:	40010400 	.word	0x40010400

08004cd0 <LL_EXTI_ClearFlag_0_31>:
  * @note   (*): Available in some devices
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_ClearFlag_0_31(uint32_t ExtiLine)
{
 8004cd0:	b480      	push	{r7}
 8004cd2:	b083      	sub	sp, #12
 8004cd4:	af00      	add	r7, sp, #0
 8004cd6:	6078      	str	r0, [r7, #4]
  WRITE_REG(EXTI->PR1, ExtiLine);
 8004cd8:	4a04      	ldr	r2, [pc, #16]	; (8004cec <LL_EXTI_ClearFlag_0_31+0x1c>)
 8004cda:	687b      	ldr	r3, [r7, #4]
 8004cdc:	6153      	str	r3, [r2, #20]
}
 8004cde:	bf00      	nop
 8004ce0:	370c      	adds	r7, #12
 8004ce2:	46bd      	mov	sp, r7
 8004ce4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ce8:	4770      	bx	lr
 8004cea:	bf00      	nop
 8004cec:	40010400 	.word	0x40010400

08004cf0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8004cf0:	b480      	push	{r7}
 8004cf2:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8004cf4:	bf00      	nop
 8004cf6:	46bd      	mov	sp, r7
 8004cf8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cfc:	4770      	bx	lr

08004cfe <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8004cfe:	b480      	push	{r7}
 8004d00:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8004d02:	e7fe      	b.n	8004d02 <HardFault_Handler+0x4>

08004d04 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8004d04:	b480      	push	{r7}
 8004d06:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8004d08:	e7fe      	b.n	8004d08 <MemManage_Handler+0x4>

08004d0a <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8004d0a:	b480      	push	{r7}
 8004d0c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8004d0e:	e7fe      	b.n	8004d0e <BusFault_Handler+0x4>

08004d10 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8004d10:	b480      	push	{r7}
 8004d12:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8004d14:	e7fe      	b.n	8004d14 <UsageFault_Handler+0x4>

08004d16 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8004d16:	b480      	push	{r7}
 8004d18:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8004d1a:	bf00      	nop
 8004d1c:	46bd      	mov	sp, r7
 8004d1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d22:	4770      	bx	lr

08004d24 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8004d24:	b480      	push	{r7}
 8004d26:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8004d28:	bf00      	nop
 8004d2a:	46bd      	mov	sp, r7
 8004d2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d30:	4770      	bx	lr

08004d32 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8004d32:	b480      	push	{r7}
 8004d34:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8004d36:	bf00      	nop
 8004d38:	46bd      	mov	sp, r7
 8004d3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d3e:	4770      	bx	lr

08004d40 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8004d40:	b580      	push	{r7, lr}
 8004d42:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8004d44:	f000 fd64 	bl	8005810 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8004d48:	bf00      	nop
 8004d4a:	bd80      	pop	{r7, pc}

08004d4c <EXTI0_IRQHandler>:

/**
  * @brief This function handles EXTI line0 interrupt.
  */
void EXTI0_IRQHandler(void)
{
 8004d4c:	b580      	push	{r7, lr}
 8004d4e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI0_IRQn 0 */
	if (LL_EXTI_IsActiveFlag_0_31(LL_EXTI_LINE_0))
 8004d50:	2001      	movs	r0, #1
 8004d52:	f7ff ffa7 	bl	8004ca4 <LL_EXTI_IsActiveFlag_0_31>
 8004d56:	4603      	mov	r3, r0
 8004d58:	2b00      	cmp	r3, #0
 8004d5a:	d005      	beq.n	8004d68 <EXTI0_IRQHandler+0x1c>
	{
		EM_SetNewEvent(evRedBtn);
 8004d5c:	2004      	movs	r0, #4
 8004d5e:	f7fe fa15 	bl	800318c <EM_SetNewEvent>
		printf("'Red' BTN3_EXTI0_Pin\n");
 8004d62:	4807      	ldr	r0, [pc, #28]	; (8004d80 <EXTI0_IRQHandler+0x34>)
 8004d64:	f007 fd52 	bl	800c80c <puts>
	}

  /* USER CODE END EXTI0_IRQn 0 */
  if (LL_EXTI_IsActiveFlag_0_31(LL_EXTI_LINE_0) != RESET)
 8004d68:	2001      	movs	r0, #1
 8004d6a:	f7ff ff9b 	bl	8004ca4 <LL_EXTI_IsActiveFlag_0_31>
 8004d6e:	4603      	mov	r3, r0
 8004d70:	2b00      	cmp	r3, #0
 8004d72:	d002      	beq.n	8004d7a <EXTI0_IRQHandler+0x2e>
  {
    LL_EXTI_ClearFlag_0_31(LL_EXTI_LINE_0);
 8004d74:	2001      	movs	r0, #1
 8004d76:	f7ff ffab 	bl	8004cd0 <LL_EXTI_ClearFlag_0_31>
    /* USER CODE END LL_EXTI_LINE_0 */
  }
  /* USER CODE BEGIN EXTI0_IRQn 1 */

  /* USER CODE END EXTI0_IRQn 1 */
}
 8004d7a:	bf00      	nop
 8004d7c:	bd80      	pop	{r7, pc}
 8004d7e:	bf00      	nop
 8004d80:	0800eb58 	.word	0x0800eb58

08004d84 <EXTI1_IRQHandler>:

/**
  * @brief This function handles EXTI line1 interrupt.
  */
void EXTI1_IRQHandler(void)
{
 8004d84:	b580      	push	{r7, lr}
 8004d86:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI1_IRQn 0 */

	if (LL_EXTI_IsActiveFlag_0_31(LL_EXTI_LINE_1))
 8004d88:	2002      	movs	r0, #2
 8004d8a:	f7ff ff8b 	bl	8004ca4 <LL_EXTI_IsActiveFlag_0_31>
 8004d8e:	4603      	mov	r3, r0
 8004d90:	2b00      	cmp	r3, #0
 8004d92:	d005      	beq.n	8004da0 <EXTI1_IRQHandler+0x1c>
	{
		EM_SetNewEvent(evGreenBtn);
 8004d94:	2002      	movs	r0, #2
 8004d96:	f7fe f9f9 	bl	800318c <EM_SetNewEvent>
		printf("'Green' BTN4_EXTI1_Pin\n");
 8004d9a:	4807      	ldr	r0, [pc, #28]	; (8004db8 <EXTI1_IRQHandler+0x34>)
 8004d9c:	f007 fd36 	bl	800c80c <puts>
	}


  /* USER CODE END EXTI1_IRQn 0 */
  if (LL_EXTI_IsActiveFlag_0_31(LL_EXTI_LINE_1) != RESET)
 8004da0:	2002      	movs	r0, #2
 8004da2:	f7ff ff7f 	bl	8004ca4 <LL_EXTI_IsActiveFlag_0_31>
 8004da6:	4603      	mov	r3, r0
 8004da8:	2b00      	cmp	r3, #0
 8004daa:	d002      	beq.n	8004db2 <EXTI1_IRQHandler+0x2e>
  {
    LL_EXTI_ClearFlag_0_31(LL_EXTI_LINE_1);
 8004dac:	2002      	movs	r0, #2
 8004dae:	f7ff ff8f 	bl	8004cd0 <LL_EXTI_ClearFlag_0_31>
    /* USER CODE END LL_EXTI_LINE_1 */
  }
  /* USER CODE BEGIN EXTI1_IRQn 1 */

  /* USER CODE END EXTI1_IRQn 1 */
}
 8004db2:	bf00      	nop
 8004db4:	bd80      	pop	{r7, pc}
 8004db6:	bf00      	nop
 8004db8:	0800eb70 	.word	0x0800eb70

08004dbc <EXTI2_IRQHandler>:

/**
  * @brief This function handles EXTI line2 interrupt.
  */
void EXTI2_IRQHandler(void)
{
 8004dbc:	b580      	push	{r7, lr}
 8004dbe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI2_IRQn 0 */

	if (LL_EXTI_IsActiveFlag_0_31(LL_EXTI_LINE_2))
 8004dc0:	2004      	movs	r0, #4
 8004dc2:	f7ff ff6f 	bl	8004ca4 <LL_EXTI_IsActiveFlag_0_31>
 8004dc6:	4603      	mov	r3, r0
 8004dc8:	2b00      	cmp	r3, #0
 8004dca:	d005      	beq.n	8004dd8 <EXTI2_IRQHandler+0x1c>
	{
		EM_SetNewEvent(evEncoderPush);
 8004dcc:	2006      	movs	r0, #6
 8004dce:	f7fe f9dd 	bl	800318c <EM_SetNewEvent>
		printf("'EncoderPush' ENC_EXTI2_Pin\n");
 8004dd2:	4807      	ldr	r0, [pc, #28]	; (8004df0 <EXTI2_IRQHandler+0x34>)
 8004dd4:	f007 fd1a 	bl	800c80c <puts>
	}


  /* USER CODE END EXTI2_IRQn 0 */
  if (LL_EXTI_IsActiveFlag_0_31(LL_EXTI_LINE_2) != RESET)
 8004dd8:	2004      	movs	r0, #4
 8004dda:	f7ff ff63 	bl	8004ca4 <LL_EXTI_IsActiveFlag_0_31>
 8004dde:	4603      	mov	r3, r0
 8004de0:	2b00      	cmp	r3, #0
 8004de2:	d002      	beq.n	8004dea <EXTI2_IRQHandler+0x2e>
  {
    LL_EXTI_ClearFlag_0_31(LL_EXTI_LINE_2);
 8004de4:	2004      	movs	r0, #4
 8004de6:	f7ff ff73 	bl	8004cd0 <LL_EXTI_ClearFlag_0_31>
    /* USER CODE END LL_EXTI_LINE_2 */
  }
  /* USER CODE BEGIN EXTI2_IRQn 1 */

  /* USER CODE END EXTI2_IRQn 1 */
}
 8004dea:	bf00      	nop
 8004dec:	bd80      	pop	{r7, pc}
 8004dee:	bf00      	nop
 8004df0:	0800eb88 	.word	0x0800eb88

08004df4 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 8004df4:	b580      	push	{r7, lr}
 8004df6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */
	//printf("Test\n");
	//printf("%lu\n", trigger_input[0]);
  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8004df8:	4802      	ldr	r0, [pc, #8]	; (8004e04 <DMA1_Channel1_IRQHandler+0x10>)
 8004dfa:	f002 ff29 	bl	8007c50 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 8004dfe:	bf00      	nop
 8004e00:	bd80      	pop	{r7, pc}
 8004e02:	bf00      	nop
 8004e04:	200014a8 	.word	0x200014a8

08004e08 <DMA1_Channel2_IRQHandler>:

/**
  * @brief This function handles DMA1 channel2 global interrupt.
  */
void DMA1_Channel2_IRQHandler(void)
{
 8004e08:	b580      	push	{r7, lr}
 8004e0a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel2_IRQn 0 */

  /* USER CODE END DMA1_Channel2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_dac1_ch1);
 8004e0c:	4802      	ldr	r0, [pc, #8]	; (8004e18 <DMA1_Channel2_IRQHandler+0x10>)
 8004e0e:	f002 ff1f 	bl	8007c50 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel2_IRQn 1 */

  /* USER CODE END DMA1_Channel2_IRQn 1 */
}
 8004e12:	bf00      	nop
 8004e14:	bd80      	pop	{r7, pc}
 8004e16:	bf00      	nop
 8004e18:	20001554 	.word	0x20001554

08004e1c <DMA1_Channel3_IRQHandler>:

/**
  * @brief This function handles DMA1 channel3 global interrupt.
  */
void DMA1_Channel3_IRQHandler(void)
{
 8004e1c:	b580      	push	{r7, lr}
 8004e1e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel3_IRQn 0 */

  /* USER CODE END DMA1_Channel3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_dac2_ch1);
 8004e20:	4802      	ldr	r0, [pc, #8]	; (8004e2c <DMA1_Channel3_IRQHandler+0x10>)
 8004e22:	f002 ff15 	bl	8007c50 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel3_IRQn 1 */

  /* USER CODE END DMA1_Channel3_IRQn 1 */
}
 8004e26:	bf00      	nop
 8004e28:	bd80      	pop	{r7, pc}
 8004e2a:	bf00      	nop
 8004e2c:	200015b4 	.word	0x200015b4

08004e30 <TIM1_BRK_TIM15_IRQHandler>:

/**
  * @brief This function handles TIM1 break interrupt and TIM15 global interrupt.
  */
void TIM1_BRK_TIM15_IRQHandler(void)
{
 8004e30:	b580      	push	{r7, lr}
 8004e32:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_BRK_TIM15_IRQn 0 */
	DM_UpdateDisplay();
 8004e34:	f7fc f802 	bl	8000e3c <DM_UpdateDisplay>
	//DM_TestScreen();

	if((TIM1->CNT < last_enc_value) || (TIM1->CNT > last_enc_value))
 8004e38:	4b0d      	ldr	r3, [pc, #52]	; (8004e70 <TIM1_BRK_TIM15_IRQHandler+0x40>)
 8004e3a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004e3c:	4a0d      	ldr	r2, [pc, #52]	; (8004e74 <TIM1_BRK_TIM15_IRQHandler+0x44>)
 8004e3e:	8812      	ldrh	r2, [r2, #0]
 8004e40:	4293      	cmp	r3, r2
 8004e42:	d305      	bcc.n	8004e50 <TIM1_BRK_TIM15_IRQHandler+0x20>
 8004e44:	4b0a      	ldr	r3, [pc, #40]	; (8004e70 <TIM1_BRK_TIM15_IRQHandler+0x40>)
 8004e46:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004e48:	4a0a      	ldr	r2, [pc, #40]	; (8004e74 <TIM1_BRK_TIM15_IRQHandler+0x44>)
 8004e4a:	8812      	ldrh	r2, [r2, #0]
 8004e4c:	4293      	cmp	r3, r2
 8004e4e:	d902      	bls.n	8004e56 <TIM1_BRK_TIM15_IRQHandler+0x26>
	{

		EM_SetNewEvent(evEncoderSet);
 8004e50:	2005      	movs	r0, #5
 8004e52:	f7fe f99b 	bl	800318c <EM_SetNewEvent>

	}
	last_enc_value = TIM1->CNT;
 8004e56:	4b06      	ldr	r3, [pc, #24]	; (8004e70 <TIM1_BRK_TIM15_IRQHandler+0x40>)
 8004e58:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004e5a:	b29a      	uxth	r2, r3
 8004e5c:	4b05      	ldr	r3, [pc, #20]	; (8004e74 <TIM1_BRK_TIM15_IRQHandler+0x44>)
 8004e5e:	801a      	strh	r2, [r3, #0]

  /* USER CODE END TIM1_BRK_TIM15_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8004e60:	4805      	ldr	r0, [pc, #20]	; (8004e78 <TIM1_BRK_TIM15_IRQHandler+0x48>)
 8004e62:	f004 fe7c 	bl	8009b5e <HAL_TIM_IRQHandler>
  HAL_TIM_IRQHandler(&htim15);
 8004e66:	4805      	ldr	r0, [pc, #20]	; (8004e7c <TIM1_BRK_TIM15_IRQHandler+0x4c>)
 8004e68:	f004 fe79 	bl	8009b5e <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_BRK_TIM15_IRQn 1 */

  /* USER CODE END TIM1_BRK_TIM15_IRQn 1 */
}
 8004e6c:	bf00      	nop
 8004e6e:	bd80      	pop	{r7, pc}
 8004e70:	40012c00 	.word	0x40012c00
 8004e74:	20001420 	.word	0x20001420
 8004e78:	200017a8 	.word	0x200017a8
 8004e7c:	200016c4 	.word	0x200016c4

08004e80 <TIM1_UP_TIM16_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM16 global interrupt.
  */
void TIM1_UP_TIM16_IRQHandler(void)
{
 8004e80:	b580      	push	{r7, lr}
 8004e82:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 0 */
	snprintf(control_pressed, sizeof(control_pressed), " ");
 8004e84:	4a05      	ldr	r2, [pc, #20]	; (8004e9c <TIM1_UP_TIM16_IRQHandler+0x1c>)
 8004e86:	4b06      	ldr	r3, [pc, #24]	; (8004ea0 <TIM1_UP_TIM16_IRQHandler+0x20>)
 8004e88:	881b      	ldrh	r3, [r3, #0]
 8004e8a:	8013      	strh	r3, [r2, #0]
  /* USER CODE END TIM1_UP_TIM16_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8004e8c:	4805      	ldr	r0, [pc, #20]	; (8004ea4 <TIM1_UP_TIM16_IRQHandler+0x24>)
 8004e8e:	f004 fe66 	bl	8009b5e <HAL_TIM_IRQHandler>
  HAL_TIM_IRQHandler(&htim16);
 8004e92:	4805      	ldr	r0, [pc, #20]	; (8004ea8 <TIM1_UP_TIM16_IRQHandler+0x28>)
 8004e94:	f004 fe63 	bl	8009b5e <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 1 */
}
 8004e98:	bf00      	nop
 8004e9a:	bd80      	pop	{r7, pc}
 8004e9c:	20001430 	.word	0x20001430
 8004ea0:	0800eba4 	.word	0x0800eba4
 8004ea4:	200017a8 	.word	0x200017a8
 8004ea8:	20001840 	.word	0x20001840

08004eac <TIM1_TRG_COM_TIM17_IRQHandler>:

/**
  * @brief This function handles TIM1 trigger and commutation interrupts and TIM17 global interrupt.
  */
void TIM1_TRG_COM_TIM17_IRQHandler(void)
{
 8004eac:	b580      	push	{r7, lr}
 8004eae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_TRG_COM_TIM17_IRQn 0 */
	update_dc_bias_sweep();
 8004eb0:	f7ff f954 	bl	800415c <update_dc_bias_sweep>




  /* USER CODE END TIM1_TRG_COM_TIM17_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8004eb4:	4803      	ldr	r0, [pc, #12]	; (8004ec4 <TIM1_TRG_COM_TIM17_IRQHandler+0x18>)
 8004eb6:	f004 fe52 	bl	8009b5e <HAL_TIM_IRQHandler>
  HAL_TIM_IRQHandler(&htim17);
 8004eba:	4803      	ldr	r0, [pc, #12]	; (8004ec8 <TIM1_TRG_COM_TIM17_IRQHandler+0x1c>)
 8004ebc:	f004 fe4f 	bl	8009b5e <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_TRG_COM_TIM17_IRQn 1 */

  /* USER CODE END TIM1_TRG_COM_TIM17_IRQn 1 */
}
 8004ec0:	bf00      	nop
 8004ec2:	bd80      	pop	{r7, pc}
 8004ec4:	200017a8 	.word	0x200017a8
 8004ec8:	20001710 	.word	0x20001710

08004ecc <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8004ecc:	b580      	push	{r7, lr}
 8004ece:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8004ed0:	4802      	ldr	r0, [pc, #8]	; (8004edc <TIM2_IRQHandler+0x10>)
 8004ed2:	f004 fe44 	bl	8009b5e <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8004ed6:	bf00      	nop
 8004ed8:	bd80      	pop	{r7, pc}
 8004eda:	bf00      	nop
 8004edc:	200017f4 	.word	0x200017f4

08004ee0 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8004ee0:	b580      	push	{r7, lr}
 8004ee2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */


	if (LL_EXTI_IsActiveFlag_0_31(LL_EXTI_LINE_14))
 8004ee4:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 8004ee8:	f7ff fedc 	bl	8004ca4 <LL_EXTI_IsActiveFlag_0_31>
 8004eec:	4603      	mov	r3, r0
 8004eee:	2b00      	cmp	r3, #0
 8004ef0:	d005      	beq.n	8004efe <EXTI15_10_IRQHandler+0x1e>
	{

		EM_SetNewEvent(evBlueBtn);
 8004ef2:	2001      	movs	r0, #1
 8004ef4:	f7fe f94a 	bl	800318c <EM_SetNewEvent>
		printf("'Blue' BTN1_EXTI14_Pin\n");
 8004ef8:	4813      	ldr	r0, [pc, #76]	; (8004f48 <EXTI15_10_IRQHandler+0x68>)
 8004efa:	f007 fc87 	bl	800c80c <puts>
	}
	if (LL_EXTI_IsActiveFlag_0_31(LL_EXTI_LINE_15))
 8004efe:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 8004f02:	f7ff fecf 	bl	8004ca4 <LL_EXTI_IsActiveFlag_0_31>
 8004f06:	4603      	mov	r3, r0
 8004f08:	2b00      	cmp	r3, #0
 8004f0a:	d005      	beq.n	8004f18 <EXTI15_10_IRQHandler+0x38>
	{
		EM_SetNewEvent(evYellowBtn);
 8004f0c:	2003      	movs	r0, #3
 8004f0e:	f7fe f93d 	bl	800318c <EM_SetNewEvent>
		printf("'Yellow' BTN2_EXTI15_Pin\n");
 8004f12:	480e      	ldr	r0, [pc, #56]	; (8004f4c <EXTI15_10_IRQHandler+0x6c>)
 8004f14:	f007 fc7a 	bl	800c80c <puts>
	}

  /* USER CODE END EXTI15_10_IRQn 0 */
  if (LL_EXTI_IsActiveFlag_0_31(LL_EXTI_LINE_14) != RESET)
 8004f18:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 8004f1c:	f7ff fec2 	bl	8004ca4 <LL_EXTI_IsActiveFlag_0_31>
 8004f20:	4603      	mov	r3, r0
 8004f22:	2b00      	cmp	r3, #0
 8004f24:	d003      	beq.n	8004f2e <EXTI15_10_IRQHandler+0x4e>
  {
    LL_EXTI_ClearFlag_0_31(LL_EXTI_LINE_14);
 8004f26:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 8004f2a:	f7ff fed1 	bl	8004cd0 <LL_EXTI_ClearFlag_0_31>
    /* USER CODE BEGIN LL_EXTI_LINE_14 */
    
    /* USER CODE END LL_EXTI_LINE_14 */
  }
  if (LL_EXTI_IsActiveFlag_0_31(LL_EXTI_LINE_15) != RESET)
 8004f2e:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 8004f32:	f7ff feb7 	bl	8004ca4 <LL_EXTI_IsActiveFlag_0_31>
 8004f36:	4603      	mov	r3, r0
 8004f38:	2b00      	cmp	r3, #0
 8004f3a:	d003      	beq.n	8004f44 <EXTI15_10_IRQHandler+0x64>
  {
    LL_EXTI_ClearFlag_0_31(LL_EXTI_LINE_15);
 8004f3c:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 8004f40:	f7ff fec6 	bl	8004cd0 <LL_EXTI_ClearFlag_0_31>
    /* USER CODE END LL_EXTI_LINE_15 */
  }
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8004f44:	bf00      	nop
 8004f46:	bd80      	pop	{r7, pc}
 8004f48:	0800eba8 	.word	0x0800eba8
 8004f4c:	0800ebc0 	.word	0x0800ebc0

08004f50 <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8004f50:	b580      	push	{r7, lr}
 8004f52:	b086      	sub	sp, #24
 8004f54:	af00      	add	r7, sp, #0
 8004f56:	60f8      	str	r0, [r7, #12]
 8004f58:	60b9      	str	r1, [r7, #8]
 8004f5a:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8004f5c:	2300      	movs	r3, #0
 8004f5e:	617b      	str	r3, [r7, #20]
 8004f60:	e00a      	b.n	8004f78 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8004f62:	f3af 8000 	nop.w
 8004f66:	4601      	mov	r1, r0
 8004f68:	68bb      	ldr	r3, [r7, #8]
 8004f6a:	1c5a      	adds	r2, r3, #1
 8004f6c:	60ba      	str	r2, [r7, #8]
 8004f6e:	b2ca      	uxtb	r2, r1
 8004f70:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8004f72:	697b      	ldr	r3, [r7, #20]
 8004f74:	3301      	adds	r3, #1
 8004f76:	617b      	str	r3, [r7, #20]
 8004f78:	697a      	ldr	r2, [r7, #20]
 8004f7a:	687b      	ldr	r3, [r7, #4]
 8004f7c:	429a      	cmp	r2, r3
 8004f7e:	dbf0      	blt.n	8004f62 <_read+0x12>
	}

return len;
 8004f80:	687b      	ldr	r3, [r7, #4]
}
 8004f82:	4618      	mov	r0, r3
 8004f84:	3718      	adds	r7, #24
 8004f86:	46bd      	mov	sp, r7
 8004f88:	bd80      	pop	{r7, pc}

08004f8a <_close>:
	}
	return len;
}

int _close(int file)
{
 8004f8a:	b480      	push	{r7}
 8004f8c:	b083      	sub	sp, #12
 8004f8e:	af00      	add	r7, sp, #0
 8004f90:	6078      	str	r0, [r7, #4]
	return -1;
 8004f92:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8004f96:	4618      	mov	r0, r3
 8004f98:	370c      	adds	r7, #12
 8004f9a:	46bd      	mov	sp, r7
 8004f9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fa0:	4770      	bx	lr

08004fa2 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8004fa2:	b480      	push	{r7}
 8004fa4:	b083      	sub	sp, #12
 8004fa6:	af00      	add	r7, sp, #0
 8004fa8:	6078      	str	r0, [r7, #4]
 8004faa:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8004fac:	683b      	ldr	r3, [r7, #0]
 8004fae:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8004fb2:	605a      	str	r2, [r3, #4]
	return 0;
 8004fb4:	2300      	movs	r3, #0
}
 8004fb6:	4618      	mov	r0, r3
 8004fb8:	370c      	adds	r7, #12
 8004fba:	46bd      	mov	sp, r7
 8004fbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fc0:	4770      	bx	lr

08004fc2 <_isatty>:

int _isatty(int file)
{
 8004fc2:	b480      	push	{r7}
 8004fc4:	b083      	sub	sp, #12
 8004fc6:	af00      	add	r7, sp, #0
 8004fc8:	6078      	str	r0, [r7, #4]
	return 1;
 8004fca:	2301      	movs	r3, #1
}
 8004fcc:	4618      	mov	r0, r3
 8004fce:	370c      	adds	r7, #12
 8004fd0:	46bd      	mov	sp, r7
 8004fd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fd6:	4770      	bx	lr

08004fd8 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8004fd8:	b480      	push	{r7}
 8004fda:	b085      	sub	sp, #20
 8004fdc:	af00      	add	r7, sp, #0
 8004fde:	60f8      	str	r0, [r7, #12]
 8004fe0:	60b9      	str	r1, [r7, #8]
 8004fe2:	607a      	str	r2, [r7, #4]
	return 0;
 8004fe4:	2300      	movs	r3, #0
}
 8004fe6:	4618      	mov	r0, r3
 8004fe8:	3714      	adds	r7, #20
 8004fea:	46bd      	mov	sp, r7
 8004fec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ff0:	4770      	bx	lr
	...

08004ff4 <_sbrk>:
/**
 _sbrk
 Increase program data space. Malloc and related functions depend on this
**/
caddr_t _sbrk(int incr)
{
 8004ff4:	b580      	push	{r7, lr}
 8004ff6:	b084      	sub	sp, #16
 8004ff8:	af00      	add	r7, sp, #0
 8004ffa:	6078      	str	r0, [r7, #4]
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 8004ffc:	4b11      	ldr	r3, [pc, #68]	; (8005044 <_sbrk+0x50>)
 8004ffe:	681b      	ldr	r3, [r3, #0]
 8005000:	2b00      	cmp	r3, #0
 8005002:	d102      	bne.n	800500a <_sbrk+0x16>
		heap_end = &end;
 8005004:	4b0f      	ldr	r3, [pc, #60]	; (8005044 <_sbrk+0x50>)
 8005006:	4a10      	ldr	r2, [pc, #64]	; (8005048 <_sbrk+0x54>)
 8005008:	601a      	str	r2, [r3, #0]

	prev_heap_end = heap_end;
 800500a:	4b0e      	ldr	r3, [pc, #56]	; (8005044 <_sbrk+0x50>)
 800500c:	681b      	ldr	r3, [r3, #0]
 800500e:	60fb      	str	r3, [r7, #12]
	if (heap_end + incr > stack_ptr)
 8005010:	4b0c      	ldr	r3, [pc, #48]	; (8005044 <_sbrk+0x50>)
 8005012:	681a      	ldr	r2, [r3, #0]
 8005014:	687b      	ldr	r3, [r7, #4]
 8005016:	4413      	add	r3, r2
 8005018:	466a      	mov	r2, sp
 800501a:	4293      	cmp	r3, r2
 800501c:	d907      	bls.n	800502e <_sbrk+0x3a>
	{
		errno = ENOMEM;
 800501e:	f006 ff0b 	bl	800be38 <__errno>
 8005022:	4602      	mov	r2, r0
 8005024:	230c      	movs	r3, #12
 8005026:	6013      	str	r3, [r2, #0]
		return (caddr_t) -1;
 8005028:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800502c:	e006      	b.n	800503c <_sbrk+0x48>
	}

	heap_end += incr;
 800502e:	4b05      	ldr	r3, [pc, #20]	; (8005044 <_sbrk+0x50>)
 8005030:	681a      	ldr	r2, [r3, #0]
 8005032:	687b      	ldr	r3, [r7, #4]
 8005034:	4413      	add	r3, r2
 8005036:	4a03      	ldr	r2, [pc, #12]	; (8005044 <_sbrk+0x50>)
 8005038:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap_end;
 800503a:	68fb      	ldr	r3, [r7, #12]
}
 800503c:	4618      	mov	r0, r3
 800503e:	3710      	adds	r7, #16
 8005040:	46bd      	mov	sp, r7
 8005042:	bd80      	pop	{r7, pc}
 8005044:	20001424 	.word	0x20001424
 8005048:	20001898 	.word	0x20001898

0800504c <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 800504c:	b480      	push	{r7}
 800504e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8005050:	4b08      	ldr	r3, [pc, #32]	; (8005074 <SystemInit+0x28>)
 8005052:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005056:	4a07      	ldr	r2, [pc, #28]	; (8005074 <SystemInit+0x28>)
 8005058:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800505c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8005060:	4b04      	ldr	r3, [pc, #16]	; (8005074 <SystemInit+0x28>)
 8005062:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8005066:	609a      	str	r2, [r3, #8]
#endif
}
 8005068:	bf00      	nop
 800506a:	46bd      	mov	sp, r7
 800506c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005070:	4770      	bx	lr
 8005072:	bf00      	nop
 8005074:	e000ed00 	.word	0xe000ed00

08005078 <MX_TIM1_Init>:
TIM_HandleTypeDef htim16;
TIM_HandleTypeDef htim17;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 8005078:	b580      	push	{r7, lr}
 800507a:	b09a      	sub	sp, #104	; 0x68
 800507c:	af00      	add	r7, sp, #0
  TIM_Encoder_InitTypeDef sConfig = {0};
 800507e:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8005082:	2224      	movs	r2, #36	; 0x24
 8005084:	2100      	movs	r1, #0
 8005086:	4618      	mov	r0, r3
 8005088:	f006 ff00 	bl	800be8c <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800508c:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8005090:	2200      	movs	r2, #0
 8005092:	601a      	str	r2, [r3, #0]
 8005094:	605a      	str	r2, [r3, #4]
 8005096:	609a      	str	r2, [r3, #8]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8005098:	1d3b      	adds	r3, r7, #4
 800509a:	2234      	movs	r2, #52	; 0x34
 800509c:	2100      	movs	r1, #0
 800509e:	4618      	mov	r0, r3
 80050a0:	f006 fef4 	bl	800be8c <memset>

  htim1.Instance = TIM1;
 80050a4:	4b2a      	ldr	r3, [pc, #168]	; (8005150 <MX_TIM1_Init+0xd8>)
 80050a6:	4a2b      	ldr	r2, [pc, #172]	; (8005154 <MX_TIM1_Init+0xdc>)
 80050a8:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 80050aa:	4b29      	ldr	r3, [pc, #164]	; (8005150 <MX_TIM1_Init+0xd8>)
 80050ac:	2200      	movs	r2, #0
 80050ae:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_CENTERALIGNED2;
 80050b0:	4b27      	ldr	r3, [pc, #156]	; (8005150 <MX_TIM1_Init+0xd8>)
 80050b2:	2240      	movs	r2, #64	; 0x40
 80050b4:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 1024;
 80050b6:	4b26      	ldr	r3, [pc, #152]	; (8005150 <MX_TIM1_Init+0xd8>)
 80050b8:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80050bc:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80050be:	4b24      	ldr	r3, [pc, #144]	; (8005150 <MX_TIM1_Init+0xd8>)
 80050c0:	2200      	movs	r2, #0
 80050c2:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 80050c4:	4b22      	ldr	r3, [pc, #136]	; (8005150 <MX_TIM1_Init+0xd8>)
 80050c6:	2200      	movs	r2, #0
 80050c8:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80050ca:	4b21      	ldr	r3, [pc, #132]	; (8005150 <MX_TIM1_Init+0xd8>)
 80050cc:	2200      	movs	r2, #0
 80050ce:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 80050d0:	2303      	movs	r3, #3
 80050d2:	647b      	str	r3, [r7, #68]	; 0x44
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 80050d4:	2300      	movs	r3, #0
 80050d6:	64bb      	str	r3, [r7, #72]	; 0x48
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 80050d8:	2301      	movs	r3, #1
 80050da:	64fb      	str	r3, [r7, #76]	; 0x4c
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 80050dc:	2300      	movs	r3, #0
 80050de:	653b      	str	r3, [r7, #80]	; 0x50
  sConfig.IC1Filter = 0;
 80050e0:	2300      	movs	r3, #0
 80050e2:	657b      	str	r3, [r7, #84]	; 0x54
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 80050e4:	2300      	movs	r3, #0
 80050e6:	65bb      	str	r3, [r7, #88]	; 0x58
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 80050e8:	2301      	movs	r3, #1
 80050ea:	65fb      	str	r3, [r7, #92]	; 0x5c
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 80050ec:	2300      	movs	r3, #0
 80050ee:	663b      	str	r3, [r7, #96]	; 0x60
  sConfig.IC2Filter = 0;
 80050f0:	2300      	movs	r3, #0
 80050f2:	667b      	str	r3, [r7, #100]	; 0x64
  if (HAL_TIM_Encoder_Init(&htim1, &sConfig) != HAL_OK)
 80050f4:	f107 0344 	add.w	r3, r7, #68	; 0x44
 80050f8:	4619      	mov	r1, r3
 80050fa:	4815      	ldr	r0, [pc, #84]	; (8005150 <MX_TIM1_Init+0xd8>)
 80050fc:	f004 fc89 	bl	8009a12 <HAL_TIM_Encoder_Init>
 8005100:	4603      	mov	r3, r0
 8005102:	2b00      	cmp	r3, #0
 8005104:	d001      	beq.n	800510a <MX_TIM1_Init+0x92>
  {
    Error_Handler();
 8005106:	f7ff fcd9 	bl	8004abc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800510a:	2300      	movs	r3, #0
 800510c:	63bb      	str	r3, [r7, #56]	; 0x38
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 800510e:	2300      	movs	r3, #0
 8005110:	63fb      	str	r3, [r7, #60]	; 0x3c
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8005112:	2300      	movs	r3, #0
 8005114:	643b      	str	r3, [r7, #64]	; 0x40
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8005116:	f107 0338 	add.w	r3, r7, #56	; 0x38
 800511a:	4619      	mov	r1, r3
 800511c:	480c      	ldr	r0, [pc, #48]	; (8005150 <MX_TIM1_Init+0xd8>)
 800511e:	f005 fa01 	bl	800a524 <HAL_TIMEx_MasterConfigSynchronization>
 8005122:	4603      	mov	r3, r0
 8005124:	2b00      	cmp	r3, #0
 8005126:	d001      	beq.n	800512c <MX_TIM1_Init+0xb4>
  {
    Error_Handler();
 8005128:	f7ff fcc8 	bl	8004abc <Error_Handler>
  }
  sBreakDeadTimeConfig.BreakAFMode = TIM_BREAK_AFMODE_INPUT;
 800512c:	2300      	movs	r3, #0
 800512e:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2AFMode = TIM_BREAK_AFMODE_INPUT;
 8005130:	2300      	movs	r3, #0
 8005132:	633b      	str	r3, [r7, #48]	; 0x30
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8005134:	1d3b      	adds	r3, r7, #4
 8005136:	4619      	mov	r1, r3
 8005138:	4805      	ldr	r0, [pc, #20]	; (8005150 <MX_TIM1_Init+0xd8>)
 800513a:	f005 fa89 	bl	800a650 <HAL_TIMEx_ConfigBreakDeadTime>
 800513e:	4603      	mov	r3, r0
 8005140:	2b00      	cmp	r3, #0
 8005142:	d001      	beq.n	8005148 <MX_TIM1_Init+0xd0>
  {
    Error_Handler();
 8005144:	f7ff fcba 	bl	8004abc <Error_Handler>
  }

}
 8005148:	bf00      	nop
 800514a:	3768      	adds	r7, #104	; 0x68
 800514c:	46bd      	mov	sp, r7
 800514e:	bd80      	pop	{r7, pc}
 8005150:	200017a8 	.word	0x200017a8
 8005154:	40012c00 	.word	0x40012c00

08005158 <MX_TIM2_Init>:
/* TIM2 init function */
void MX_TIM2_Init(void)
{
 8005158:	b580      	push	{r7, lr}
 800515a:	b08c      	sub	sp, #48	; 0x30
 800515c:	af00      	add	r7, sp, #0
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800515e:	f107 0320 	add.w	r3, r7, #32
 8005162:	2200      	movs	r2, #0
 8005164:	601a      	str	r2, [r3, #0]
 8005166:	605a      	str	r2, [r3, #4]
 8005168:	609a      	str	r2, [r3, #8]
 800516a:	60da      	str	r2, [r3, #12]
  TIM_SlaveConfigTypeDef sSlaveConfig = {0};
 800516c:	f107 030c 	add.w	r3, r7, #12
 8005170:	2200      	movs	r2, #0
 8005172:	601a      	str	r2, [r3, #0]
 8005174:	605a      	str	r2, [r3, #4]
 8005176:	609a      	str	r2, [r3, #8]
 8005178:	60da      	str	r2, [r3, #12]
 800517a:	611a      	str	r2, [r3, #16]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800517c:	463b      	mov	r3, r7
 800517e:	2200      	movs	r2, #0
 8005180:	601a      	str	r2, [r3, #0]
 8005182:	605a      	str	r2, [r3, #4]
 8005184:	609a      	str	r2, [r3, #8]

  htim2.Instance = TIM2;
 8005186:	4b28      	ldr	r3, [pc, #160]	; (8005228 <MX_TIM2_Init+0xd0>)
 8005188:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800518c:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 2047;
 800518e:	4b26      	ldr	r3, [pc, #152]	; (8005228 <MX_TIM2_Init+0xd0>)
 8005190:	f240 72ff 	movw	r2, #2047	; 0x7ff
 8005194:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8005196:	4b24      	ldr	r3, [pc, #144]	; (8005228 <MX_TIM2_Init+0xd0>)
 8005198:	2200      	movs	r2, #0
 800519a:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 1024;
 800519c:	4b22      	ldr	r3, [pc, #136]	; (8005228 <MX_TIM2_Init+0xd0>)
 800519e:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80051a2:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80051a4:	4b20      	ldr	r3, [pc, #128]	; (8005228 <MX_TIM2_Init+0xd0>)
 80051a6:	2200      	movs	r2, #0
 80051a8:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80051aa:	4b1f      	ldr	r3, [pc, #124]	; (8005228 <MX_TIM2_Init+0xd0>)
 80051ac:	2200      	movs	r2, #0
 80051ae:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 80051b0:	481d      	ldr	r0, [pc, #116]	; (8005228 <MX_TIM2_Init+0xd0>)
 80051b2:	f004 fb44 	bl	800983e <HAL_TIM_Base_Init>
 80051b6:	4603      	mov	r3, r0
 80051b8:	2b00      	cmp	r3, #0
 80051ba:	d001      	beq.n	80051c0 <MX_TIM2_Init+0x68>
  {
    Error_Handler();
 80051bc:	f7ff fc7e 	bl	8004abc <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80051c0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80051c4:	623b      	str	r3, [r7, #32]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 80051c6:	f107 0320 	add.w	r3, r7, #32
 80051ca:	4619      	mov	r1, r3
 80051cc:	4816      	ldr	r0, [pc, #88]	; (8005228 <MX_TIM2_Init+0xd0>)
 80051ce:	f004 fe45 	bl	8009e5c <HAL_TIM_ConfigClockSource>
 80051d2:	4603      	mov	r3, r0
 80051d4:	2b00      	cmp	r3, #0
 80051d6:	d001      	beq.n	80051dc <MX_TIM2_Init+0x84>
  {
    Error_Handler();
 80051d8:	f7ff fc70 	bl	8004abc <Error_Handler>
  }
  sSlaveConfig.SlaveMode = TIM_SLAVEMODE_GATED;
 80051dc:	2305      	movs	r3, #5
 80051de:	60fb      	str	r3, [r7, #12]
  sSlaveConfig.InputTrigger = TIM_TS_TI1FP1;
 80051e0:	2350      	movs	r3, #80	; 0x50
 80051e2:	613b      	str	r3, [r7, #16]
  sSlaveConfig.TriggerPolarity = TIM_TRIGGERPOLARITY_RISING;
 80051e4:	2300      	movs	r3, #0
 80051e6:	617b      	str	r3, [r7, #20]
  sSlaveConfig.TriggerFilter = 0;
 80051e8:	2300      	movs	r3, #0
 80051ea:	61fb      	str	r3, [r7, #28]
  if (HAL_TIM_SlaveConfigSynchro(&htim2, &sSlaveConfig) != HAL_OK)
 80051ec:	f107 030c 	add.w	r3, r7, #12
 80051f0:	4619      	mov	r1, r3
 80051f2:	480d      	ldr	r0, [pc, #52]	; (8005228 <MX_TIM2_Init+0xd0>)
 80051f4:	f004 ff22 	bl	800a03c <HAL_TIM_SlaveConfigSynchro>
 80051f8:	4603      	mov	r3, r0
 80051fa:	2b00      	cmp	r3, #0
 80051fc:	d001      	beq.n	8005202 <MX_TIM2_Init+0xaa>
  {
    Error_Handler();
 80051fe:	f7ff fc5d 	bl	8004abc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8005202:	2300      	movs	r3, #0
 8005204:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8005206:	2300      	movs	r3, #0
 8005208:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 800520a:	463b      	mov	r3, r7
 800520c:	4619      	mov	r1, r3
 800520e:	4806      	ldr	r0, [pc, #24]	; (8005228 <MX_TIM2_Init+0xd0>)
 8005210:	f005 f988 	bl	800a524 <HAL_TIMEx_MasterConfigSynchronization>
 8005214:	4603      	mov	r3, r0
 8005216:	2b00      	cmp	r3, #0
 8005218:	d001      	beq.n	800521e <MX_TIM2_Init+0xc6>
  {
    Error_Handler();
 800521a:	f7ff fc4f 	bl	8004abc <Error_Handler>
  }

}
 800521e:	bf00      	nop
 8005220:	3730      	adds	r7, #48	; 0x30
 8005222:	46bd      	mov	sp, r7
 8005224:	bd80      	pop	{r7, pc}
 8005226:	bf00      	nop
 8005228:	200017f4 	.word	0x200017f4

0800522c <MX_TIM5_Init>:
/* TIM5 init function */
void MX_TIM5_Init(void)
{
 800522c:	b580      	push	{r7, lr}
 800522e:	b088      	sub	sp, #32
 8005230:	af00      	add	r7, sp, #0
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8005232:	f107 0310 	add.w	r3, r7, #16
 8005236:	2200      	movs	r2, #0
 8005238:	601a      	str	r2, [r3, #0]
 800523a:	605a      	str	r2, [r3, #4]
 800523c:	609a      	str	r2, [r3, #8]
 800523e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8005240:	1d3b      	adds	r3, r7, #4
 8005242:	2200      	movs	r2, #0
 8005244:	601a      	str	r2, [r3, #0]
 8005246:	605a      	str	r2, [r3, #4]
 8005248:	609a      	str	r2, [r3, #8]

  htim5.Instance = TIM5;
 800524a:	4b1e      	ldr	r3, [pc, #120]	; (80052c4 <MX_TIM5_Init+0x98>)
 800524c:	4a1e      	ldr	r2, [pc, #120]	; (80052c8 <MX_TIM5_Init+0x9c>)
 800524e:	601a      	str	r2, [r3, #0]
  htim5.Init.Prescaler = 65535;
 8005250:	4b1c      	ldr	r3, [pc, #112]	; (80052c4 <MX_TIM5_Init+0x98>)
 8005252:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8005256:	605a      	str	r2, [r3, #4]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 8005258:	4b1a      	ldr	r3, [pc, #104]	; (80052c4 <MX_TIM5_Init+0x98>)
 800525a:	2200      	movs	r2, #0
 800525c:	609a      	str	r2, [r3, #8]
  htim5.Init.Period = 65535;
 800525e:	4b19      	ldr	r3, [pc, #100]	; (80052c4 <MX_TIM5_Init+0x98>)
 8005260:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8005264:	60da      	str	r2, [r3, #12]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV4;
 8005266:	4b17      	ldr	r3, [pc, #92]	; (80052c4 <MX_TIM5_Init+0x98>)
 8005268:	f44f 7200 	mov.w	r2, #512	; 0x200
 800526c:	611a      	str	r2, [r3, #16]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800526e:	4b15      	ldr	r3, [pc, #84]	; (80052c4 <MX_TIM5_Init+0x98>)
 8005270:	2200      	movs	r2, #0
 8005272:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim5) != HAL_OK)
 8005274:	4813      	ldr	r0, [pc, #76]	; (80052c4 <MX_TIM5_Init+0x98>)
 8005276:	f004 fae2 	bl	800983e <HAL_TIM_Base_Init>
 800527a:	4603      	mov	r3, r0
 800527c:	2b00      	cmp	r3, #0
 800527e:	d001      	beq.n	8005284 <MX_TIM5_Init+0x58>
  {
    Error_Handler();
 8005280:	f7ff fc1c 	bl	8004abc <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8005284:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8005288:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim5, &sClockSourceConfig) != HAL_OK)
 800528a:	f107 0310 	add.w	r3, r7, #16
 800528e:	4619      	mov	r1, r3
 8005290:	480c      	ldr	r0, [pc, #48]	; (80052c4 <MX_TIM5_Init+0x98>)
 8005292:	f004 fde3 	bl	8009e5c <HAL_TIM_ConfigClockSource>
 8005296:	4603      	mov	r3, r0
 8005298:	2b00      	cmp	r3, #0
 800529a:	d001      	beq.n	80052a0 <MX_TIM5_Init+0x74>
  {
    Error_Handler();
 800529c:	f7ff fc0e 	bl	8004abc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80052a0:	2300      	movs	r3, #0
 80052a2:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80052a4:	2300      	movs	r3, #0
 80052a6:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 80052a8:	1d3b      	adds	r3, r7, #4
 80052aa:	4619      	mov	r1, r3
 80052ac:	4805      	ldr	r0, [pc, #20]	; (80052c4 <MX_TIM5_Init+0x98>)
 80052ae:	f005 f939 	bl	800a524 <HAL_TIMEx_MasterConfigSynchronization>
 80052b2:	4603      	mov	r3, r0
 80052b4:	2b00      	cmp	r3, #0
 80052b6:	d001      	beq.n	80052bc <MX_TIM5_Init+0x90>
  {
    Error_Handler();
 80052b8:	f7ff fc00 	bl	8004abc <Error_Handler>
  }

}
 80052bc:	bf00      	nop
 80052be:	3720      	adds	r7, #32
 80052c0:	46bd      	mov	sp, r7
 80052c2:	bd80      	pop	{r7, pc}
 80052c4:	2000175c 	.word	0x2000175c
 80052c8:	40000c00 	.word	0x40000c00

080052cc <MX_TIM8_Init>:
/* TIM8 init function */
void MX_TIM8_Init(void)
{
 80052cc:	b580      	push	{r7, lr}
 80052ce:	b094      	sub	sp, #80	; 0x50
 80052d0:	af00      	add	r7, sp, #0
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80052d2:	f107 0340 	add.w	r3, r7, #64	; 0x40
 80052d6:	2200      	movs	r2, #0
 80052d8:	601a      	str	r2, [r3, #0]
 80052da:	605a      	str	r2, [r3, #4]
 80052dc:	609a      	str	r2, [r3, #8]
 80052de:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80052e0:	f107 0334 	add.w	r3, r7, #52	; 0x34
 80052e4:	2200      	movs	r2, #0
 80052e6:	601a      	str	r2, [r3, #0]
 80052e8:	605a      	str	r2, [r3, #4]
 80052ea:	609a      	str	r2, [r3, #8]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 80052ec:	463b      	mov	r3, r7
 80052ee:	2234      	movs	r2, #52	; 0x34
 80052f0:	2100      	movs	r1, #0
 80052f2:	4618      	mov	r0, r3
 80052f4:	f006 fdca 	bl	800be8c <memset>

  htim8.Instance = TIM8;
 80052f8:	4b26      	ldr	r3, [pc, #152]	; (8005394 <MX_TIM8_Init+0xc8>)
 80052fa:	4a27      	ldr	r2, [pc, #156]	; (8005398 <MX_TIM8_Init+0xcc>)
 80052fc:	601a      	str	r2, [r3, #0]
  htim8.Init.Prescaler = 0;
 80052fe:	4b25      	ldr	r3, [pc, #148]	; (8005394 <MX_TIM8_Init+0xc8>)
 8005300:	2200      	movs	r2, #0
 8005302:	605a      	str	r2, [r3, #4]
  htim8.Init.CounterMode = TIM_COUNTERMODE_UP;
 8005304:	4b23      	ldr	r3, [pc, #140]	; (8005394 <MX_TIM8_Init+0xc8>)
 8005306:	2200      	movs	r2, #0
 8005308:	609a      	str	r2, [r3, #8]
  htim8.Init.Period = 1;
 800530a:	4b22      	ldr	r3, [pc, #136]	; (8005394 <MX_TIM8_Init+0xc8>)
 800530c:	2201      	movs	r2, #1
 800530e:	60da      	str	r2, [r3, #12]
  htim8.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8005310:	4b20      	ldr	r3, [pc, #128]	; (8005394 <MX_TIM8_Init+0xc8>)
 8005312:	2200      	movs	r2, #0
 8005314:	611a      	str	r2, [r3, #16]
  htim8.Init.RepetitionCounter = 0;
 8005316:	4b1f      	ldr	r3, [pc, #124]	; (8005394 <MX_TIM8_Init+0xc8>)
 8005318:	2200      	movs	r2, #0
 800531a:	615a      	str	r2, [r3, #20]
  htim8.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800531c:	4b1d      	ldr	r3, [pc, #116]	; (8005394 <MX_TIM8_Init+0xc8>)
 800531e:	2200      	movs	r2, #0
 8005320:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim8) != HAL_OK)
 8005322:	481c      	ldr	r0, [pc, #112]	; (8005394 <MX_TIM8_Init+0xc8>)
 8005324:	f004 fa8b 	bl	800983e <HAL_TIM_Base_Init>
 8005328:	4603      	mov	r3, r0
 800532a:	2b00      	cmp	r3, #0
 800532c:	d001      	beq.n	8005332 <MX_TIM8_Init+0x66>
  {
    Error_Handler();
 800532e:	f7ff fbc5 	bl	8004abc <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8005332:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8005336:	643b      	str	r3, [r7, #64]	; 0x40
  if (HAL_TIM_ConfigClockSource(&htim8, &sClockSourceConfig) != HAL_OK)
 8005338:	f107 0340 	add.w	r3, r7, #64	; 0x40
 800533c:	4619      	mov	r1, r3
 800533e:	4815      	ldr	r0, [pc, #84]	; (8005394 <MX_TIM8_Init+0xc8>)
 8005340:	f004 fd8c 	bl	8009e5c <HAL_TIM_ConfigClockSource>
 8005344:	4603      	mov	r3, r0
 8005346:	2b00      	cmp	r3, #0
 8005348:	d001      	beq.n	800534e <MX_TIM8_Init+0x82>
  {
    Error_Handler();
 800534a:	f7ff fbb7 	bl	8004abc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 800534e:	2320      	movs	r3, #32
 8005350:	637b      	str	r3, [r7, #52]	; 0x34
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8005352:	2300      	movs	r3, #0
 8005354:	63bb      	str	r3, [r7, #56]	; 0x38
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8005356:	2300      	movs	r3, #0
 8005358:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_TIMEx_MasterConfigSynchronization(&htim8, &sMasterConfig) != HAL_OK)
 800535a:	f107 0334 	add.w	r3, r7, #52	; 0x34
 800535e:	4619      	mov	r1, r3
 8005360:	480c      	ldr	r0, [pc, #48]	; (8005394 <MX_TIM8_Init+0xc8>)
 8005362:	f005 f8df 	bl	800a524 <HAL_TIMEx_MasterConfigSynchronization>
 8005366:	4603      	mov	r3, r0
 8005368:	2b00      	cmp	r3, #0
 800536a:	d001      	beq.n	8005370 <MX_TIM8_Init+0xa4>
  {
    Error_Handler();
 800536c:	f7ff fba6 	bl	8004abc <Error_Handler>
  }
  sBreakDeadTimeConfig.BreakAFMode = TIM_BREAK_AFMODE_INPUT;
 8005370:	2300      	movs	r3, #0
 8005372:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.Break2AFMode = TIM_BREAK_AFMODE_INPUT;
 8005374:	2300      	movs	r3, #0
 8005376:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim8, &sBreakDeadTimeConfig) != HAL_OK)
 8005378:	463b      	mov	r3, r7
 800537a:	4619      	mov	r1, r3
 800537c:	4805      	ldr	r0, [pc, #20]	; (8005394 <MX_TIM8_Init+0xc8>)
 800537e:	f005 f967 	bl	800a650 <HAL_TIMEx_ConfigBreakDeadTime>
 8005382:	4603      	mov	r3, r0
 8005384:	2b00      	cmp	r3, #0
 8005386:	d001      	beq.n	800538c <MX_TIM8_Init+0xc0>
  {
    Error_Handler();
 8005388:	f7ff fb98 	bl	8004abc <Error_Handler>
  }

}
 800538c:	bf00      	nop
 800538e:	3750      	adds	r7, #80	; 0x50
 8005390:	46bd      	mov	sp, r7
 8005392:	bd80      	pop	{r7, pc}
 8005394:	20001678 	.word	0x20001678
 8005398:	40013400 	.word	0x40013400

0800539c <MX_TIM15_Init>:
/* TIM15 init function */
void MX_TIM15_Init(void)
{
 800539c:	b580      	push	{r7, lr}
 800539e:	b088      	sub	sp, #32
 80053a0:	af00      	add	r7, sp, #0
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80053a2:	f107 0310 	add.w	r3, r7, #16
 80053a6:	2200      	movs	r2, #0
 80053a8:	601a      	str	r2, [r3, #0]
 80053aa:	605a      	str	r2, [r3, #4]
 80053ac:	609a      	str	r2, [r3, #8]
 80053ae:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80053b0:	1d3b      	adds	r3, r7, #4
 80053b2:	2200      	movs	r2, #0
 80053b4:	601a      	str	r2, [r3, #0]
 80053b6:	605a      	str	r2, [r3, #4]
 80053b8:	609a      	str	r2, [r3, #8]

  htim15.Instance = TIM15;
 80053ba:	4b1f      	ldr	r3, [pc, #124]	; (8005438 <MX_TIM15_Init+0x9c>)
 80053bc:	4a1f      	ldr	r2, [pc, #124]	; (800543c <MX_TIM15_Init+0xa0>)
 80053be:	601a      	str	r2, [r3, #0]
  htim15.Init.Prescaler = 1024;
 80053c0:	4b1d      	ldr	r3, [pc, #116]	; (8005438 <MX_TIM15_Init+0x9c>)
 80053c2:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80053c6:	605a      	str	r2, [r3, #4]
  htim15.Init.CounterMode = TIM_COUNTERMODE_UP;
 80053c8:	4b1b      	ldr	r3, [pc, #108]	; (8005438 <MX_TIM15_Init+0x9c>)
 80053ca:	2200      	movs	r2, #0
 80053cc:	609a      	str	r2, [r3, #8]
  htim15.Init.Period = 1024;
 80053ce:	4b1a      	ldr	r3, [pc, #104]	; (8005438 <MX_TIM15_Init+0x9c>)
 80053d0:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80053d4:	60da      	str	r2, [r3, #12]
  htim15.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80053d6:	4b18      	ldr	r3, [pc, #96]	; (8005438 <MX_TIM15_Init+0x9c>)
 80053d8:	2200      	movs	r2, #0
 80053da:	611a      	str	r2, [r3, #16]
  htim15.Init.RepetitionCounter = 0;
 80053dc:	4b16      	ldr	r3, [pc, #88]	; (8005438 <MX_TIM15_Init+0x9c>)
 80053de:	2200      	movs	r2, #0
 80053e0:	615a      	str	r2, [r3, #20]
  htim15.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80053e2:	4b15      	ldr	r3, [pc, #84]	; (8005438 <MX_TIM15_Init+0x9c>)
 80053e4:	2200      	movs	r2, #0
 80053e6:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim15) != HAL_OK)
 80053e8:	4813      	ldr	r0, [pc, #76]	; (8005438 <MX_TIM15_Init+0x9c>)
 80053ea:	f004 fa28 	bl	800983e <HAL_TIM_Base_Init>
 80053ee:	4603      	mov	r3, r0
 80053f0:	2b00      	cmp	r3, #0
 80053f2:	d001      	beq.n	80053f8 <MX_TIM15_Init+0x5c>
  {
    Error_Handler();
 80053f4:	f7ff fb62 	bl	8004abc <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80053f8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80053fc:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim15, &sClockSourceConfig) != HAL_OK)
 80053fe:	f107 0310 	add.w	r3, r7, #16
 8005402:	4619      	mov	r1, r3
 8005404:	480c      	ldr	r0, [pc, #48]	; (8005438 <MX_TIM15_Init+0x9c>)
 8005406:	f004 fd29 	bl	8009e5c <HAL_TIM_ConfigClockSource>
 800540a:	4603      	mov	r3, r0
 800540c:	2b00      	cmp	r3, #0
 800540e:	d001      	beq.n	8005414 <MX_TIM15_Init+0x78>
  {
    Error_Handler();
 8005410:	f7ff fb54 	bl	8004abc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8005414:	2300      	movs	r3, #0
 8005416:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8005418:	2300      	movs	r3, #0
 800541a:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim15, &sMasterConfig) != HAL_OK)
 800541c:	1d3b      	adds	r3, r7, #4
 800541e:	4619      	mov	r1, r3
 8005420:	4805      	ldr	r0, [pc, #20]	; (8005438 <MX_TIM15_Init+0x9c>)
 8005422:	f005 f87f 	bl	800a524 <HAL_TIMEx_MasterConfigSynchronization>
 8005426:	4603      	mov	r3, r0
 8005428:	2b00      	cmp	r3, #0
 800542a:	d001      	beq.n	8005430 <MX_TIM15_Init+0x94>
  {
    Error_Handler();
 800542c:	f7ff fb46 	bl	8004abc <Error_Handler>
  }

}
 8005430:	bf00      	nop
 8005432:	3720      	adds	r7, #32
 8005434:	46bd      	mov	sp, r7
 8005436:	bd80      	pop	{r7, pc}
 8005438:	200016c4 	.word	0x200016c4
 800543c:	40014000 	.word	0x40014000

08005440 <MX_TIM16_Init>:
/* TIM16 init function */
void MX_TIM16_Init(void)
{
 8005440:	b580      	push	{r7, lr}
 8005442:	af00      	add	r7, sp, #0

  htim16.Instance = TIM16;
 8005444:	4b0f      	ldr	r3, [pc, #60]	; (8005484 <MX_TIM16_Init+0x44>)
 8005446:	4a10      	ldr	r2, [pc, #64]	; (8005488 <MX_TIM16_Init+0x48>)
 8005448:	601a      	str	r2, [r3, #0]
  htim16.Init.Prescaler = 0;
 800544a:	4b0e      	ldr	r3, [pc, #56]	; (8005484 <MX_TIM16_Init+0x44>)
 800544c:	2200      	movs	r2, #0
 800544e:	605a      	str	r2, [r3, #4]
  htim16.Init.CounterMode = TIM_COUNTERMODE_UP;
 8005450:	4b0c      	ldr	r3, [pc, #48]	; (8005484 <MX_TIM16_Init+0x44>)
 8005452:	2200      	movs	r2, #0
 8005454:	609a      	str	r2, [r3, #8]
  htim16.Init.Period = 8191;
 8005456:	4b0b      	ldr	r3, [pc, #44]	; (8005484 <MX_TIM16_Init+0x44>)
 8005458:	f641 72ff 	movw	r2, #8191	; 0x1fff
 800545c:	60da      	str	r2, [r3, #12]
  htim16.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800545e:	4b09      	ldr	r3, [pc, #36]	; (8005484 <MX_TIM16_Init+0x44>)
 8005460:	2200      	movs	r2, #0
 8005462:	611a      	str	r2, [r3, #16]
  htim16.Init.RepetitionCounter = 0;
 8005464:	4b07      	ldr	r3, [pc, #28]	; (8005484 <MX_TIM16_Init+0x44>)
 8005466:	2200      	movs	r2, #0
 8005468:	615a      	str	r2, [r3, #20]
  htim16.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800546a:	4b06      	ldr	r3, [pc, #24]	; (8005484 <MX_TIM16_Init+0x44>)
 800546c:	2200      	movs	r2, #0
 800546e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim16) != HAL_OK)
 8005470:	4804      	ldr	r0, [pc, #16]	; (8005484 <MX_TIM16_Init+0x44>)
 8005472:	f004 f9e4 	bl	800983e <HAL_TIM_Base_Init>
 8005476:	4603      	mov	r3, r0
 8005478:	2b00      	cmp	r3, #0
 800547a:	d001      	beq.n	8005480 <MX_TIM16_Init+0x40>
  {
    Error_Handler();
 800547c:	f7ff fb1e 	bl	8004abc <Error_Handler>
  }

}
 8005480:	bf00      	nop
 8005482:	bd80      	pop	{r7, pc}
 8005484:	20001840 	.word	0x20001840
 8005488:	40014400 	.word	0x40014400

0800548c <MX_TIM17_Init>:
/* TIM17 init function */
void MX_TIM17_Init(void)
{
 800548c:	b580      	push	{r7, lr}
 800548e:	af00      	add	r7, sp, #0

  htim17.Instance = TIM17;
 8005490:	4b0f      	ldr	r3, [pc, #60]	; (80054d0 <MX_TIM17_Init+0x44>)
 8005492:	4a10      	ldr	r2, [pc, #64]	; (80054d4 <MX_TIM17_Init+0x48>)
 8005494:	601a      	str	r2, [r3, #0]
  htim17.Init.Prescaler = 1023;
 8005496:	4b0e      	ldr	r3, [pc, #56]	; (80054d0 <MX_TIM17_Init+0x44>)
 8005498:	f240 32ff 	movw	r2, #1023	; 0x3ff
 800549c:	605a      	str	r2, [r3, #4]
  htim17.Init.CounterMode = TIM_COUNTERMODE_UP;
 800549e:	4b0c      	ldr	r3, [pc, #48]	; (80054d0 <MX_TIM17_Init+0x44>)
 80054a0:	2200      	movs	r2, #0
 80054a2:	609a      	str	r2, [r3, #8]
  htim17.Init.Period = 64;
 80054a4:	4b0a      	ldr	r3, [pc, #40]	; (80054d0 <MX_TIM17_Init+0x44>)
 80054a6:	2240      	movs	r2, #64	; 0x40
 80054a8:	60da      	str	r2, [r3, #12]
  htim17.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80054aa:	4b09      	ldr	r3, [pc, #36]	; (80054d0 <MX_TIM17_Init+0x44>)
 80054ac:	2200      	movs	r2, #0
 80054ae:	611a      	str	r2, [r3, #16]
  htim17.Init.RepetitionCounter = 0;
 80054b0:	4b07      	ldr	r3, [pc, #28]	; (80054d0 <MX_TIM17_Init+0x44>)
 80054b2:	2200      	movs	r2, #0
 80054b4:	615a      	str	r2, [r3, #20]
  htim17.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80054b6:	4b06      	ldr	r3, [pc, #24]	; (80054d0 <MX_TIM17_Init+0x44>)
 80054b8:	2200      	movs	r2, #0
 80054ba:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim17) != HAL_OK)
 80054bc:	4804      	ldr	r0, [pc, #16]	; (80054d0 <MX_TIM17_Init+0x44>)
 80054be:	f004 f9be 	bl	800983e <HAL_TIM_Base_Init>
 80054c2:	4603      	mov	r3, r0
 80054c4:	2b00      	cmp	r3, #0
 80054c6:	d001      	beq.n	80054cc <MX_TIM17_Init+0x40>
  {
    Error_Handler();
 80054c8:	f7ff faf8 	bl	8004abc <Error_Handler>
  }

}
 80054cc:	bf00      	nop
 80054ce:	bd80      	pop	{r7, pc}
 80054d0:	20001710 	.word	0x20001710
 80054d4:	40014800 	.word	0x40014800

080054d8 <HAL_TIM_Encoder_MspInit>:

void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* tim_encoderHandle)
{
 80054d8:	b580      	push	{r7, lr}
 80054da:	b08a      	sub	sp, #40	; 0x28
 80054dc:	af00      	add	r7, sp, #0
 80054de:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80054e0:	f107 0314 	add.w	r3, r7, #20
 80054e4:	2200      	movs	r2, #0
 80054e6:	601a      	str	r2, [r3, #0]
 80054e8:	605a      	str	r2, [r3, #4]
 80054ea:	609a      	str	r2, [r3, #8]
 80054ec:	60da      	str	r2, [r3, #12]
 80054ee:	611a      	str	r2, [r3, #16]
  if(tim_encoderHandle->Instance==TIM1)
 80054f0:	687b      	ldr	r3, [r7, #4]
 80054f2:	681b      	ldr	r3, [r3, #0]
 80054f4:	4a23      	ldr	r2, [pc, #140]	; (8005584 <HAL_TIM_Encoder_MspInit+0xac>)
 80054f6:	4293      	cmp	r3, r2
 80054f8:	d13f      	bne.n	800557a <HAL_TIM_Encoder_MspInit+0xa2>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 80054fa:	4b23      	ldr	r3, [pc, #140]	; (8005588 <HAL_TIM_Encoder_MspInit+0xb0>)
 80054fc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80054fe:	4a22      	ldr	r2, [pc, #136]	; (8005588 <HAL_TIM_Encoder_MspInit+0xb0>)
 8005500:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8005504:	6613      	str	r3, [r2, #96]	; 0x60
 8005506:	4b20      	ldr	r3, [pc, #128]	; (8005588 <HAL_TIM_Encoder_MspInit+0xb0>)
 8005508:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800550a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800550e:	613b      	str	r3, [r7, #16]
 8005510:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8005512:	4b1d      	ldr	r3, [pc, #116]	; (8005588 <HAL_TIM_Encoder_MspInit+0xb0>)
 8005514:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005516:	4a1c      	ldr	r2, [pc, #112]	; (8005588 <HAL_TIM_Encoder_MspInit+0xb0>)
 8005518:	f043 0304 	orr.w	r3, r3, #4
 800551c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800551e:	4b1a      	ldr	r3, [pc, #104]	; (8005588 <HAL_TIM_Encoder_MspInit+0xb0>)
 8005520:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005522:	f003 0304 	and.w	r3, r3, #4
 8005526:	60fb      	str	r3, [r7, #12]
 8005528:	68fb      	ldr	r3, [r7, #12]
    /**TIM1 GPIO Configuration    
    PC0     ------> TIM1_CH1
    PC1     ------> TIM1_CH2 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 800552a:	2303      	movs	r3, #3
 800552c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800552e:	2302      	movs	r3, #2
 8005530:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005532:	2300      	movs	r3, #0
 8005534:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8005536:	2300      	movs	r3, #0
 8005538:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM1;
 800553a:	2302      	movs	r3, #2
 800553c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800553e:	f107 0314 	add.w	r3, r7, #20
 8005542:	4619      	mov	r1, r3
 8005544:	4811      	ldr	r0, [pc, #68]	; (800558c <HAL_TIM_Encoder_MspInit+0xb4>)
 8005546:	f002 fcd3 	bl	8007ef0 <HAL_GPIO_Init>

    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_BRK_TIM15_IRQn, 0, 0);
 800554a:	2200      	movs	r2, #0
 800554c:	2100      	movs	r1, #0
 800554e:	2018      	movs	r0, #24
 8005550:	f001 fdb9 	bl	80070c6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_BRK_TIM15_IRQn);
 8005554:	2018      	movs	r0, #24
 8005556:	f001 fdd0 	bl	80070fa <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM1_UP_TIM16_IRQn, 1, 0);
 800555a:	2200      	movs	r2, #0
 800555c:	2101      	movs	r1, #1
 800555e:	2019      	movs	r0, #25
 8005560:	f001 fdb1 	bl	80070c6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM16_IRQn);
 8005564:	2019      	movs	r0, #25
 8005566:	f001 fdc8 	bl	80070fa <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM1_TRG_COM_TIM17_IRQn, 1, 0);
 800556a:	2200      	movs	r2, #0
 800556c:	2101      	movs	r1, #1
 800556e:	201a      	movs	r0, #26
 8005570:	f001 fda9 	bl	80070c6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_TRG_COM_TIM17_IRQn);
 8005574:	201a      	movs	r0, #26
 8005576:	f001 fdc0 	bl	80070fa <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }
}
 800557a:	bf00      	nop
 800557c:	3728      	adds	r7, #40	; 0x28
 800557e:	46bd      	mov	sp, r7
 8005580:	bd80      	pop	{r7, pc}
 8005582:	bf00      	nop
 8005584:	40012c00 	.word	0x40012c00
 8005588:	40021000 	.word	0x40021000
 800558c:	48000800 	.word	0x48000800

08005590 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8005590:	b580      	push	{r7, lr}
 8005592:	b08e      	sub	sp, #56	; 0x38
 8005594:	af00      	add	r7, sp, #0
 8005596:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8005598:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800559c:	2200      	movs	r2, #0
 800559e:	601a      	str	r2, [r3, #0]
 80055a0:	605a      	str	r2, [r3, #4]
 80055a2:	609a      	str	r2, [r3, #8]
 80055a4:	60da      	str	r2, [r3, #12]
 80055a6:	611a      	str	r2, [r3, #16]
  if(tim_baseHandle->Instance==TIM2)
 80055a8:	687b      	ldr	r3, [r7, #4]
 80055aa:	681b      	ldr	r3, [r3, #0]
 80055ac:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80055b0:	d131      	bne.n	8005616 <HAL_TIM_Base_MspInit+0x86>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 80055b2:	4b53      	ldr	r3, [pc, #332]	; (8005700 <HAL_TIM_Base_MspInit+0x170>)
 80055b4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80055b6:	4a52      	ldr	r2, [pc, #328]	; (8005700 <HAL_TIM_Base_MspInit+0x170>)
 80055b8:	f043 0301 	orr.w	r3, r3, #1
 80055bc:	6593      	str	r3, [r2, #88]	; 0x58
 80055be:	4b50      	ldr	r3, [pc, #320]	; (8005700 <HAL_TIM_Base_MspInit+0x170>)
 80055c0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80055c2:	f003 0301 	and.w	r3, r3, #1
 80055c6:	623b      	str	r3, [r7, #32]
 80055c8:	6a3b      	ldr	r3, [r7, #32]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80055ca:	4b4d      	ldr	r3, [pc, #308]	; (8005700 <HAL_TIM_Base_MspInit+0x170>)
 80055cc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80055ce:	4a4c      	ldr	r2, [pc, #304]	; (8005700 <HAL_TIM_Base_MspInit+0x170>)
 80055d0:	f043 0301 	orr.w	r3, r3, #1
 80055d4:	64d3      	str	r3, [r2, #76]	; 0x4c
 80055d6:	4b4a      	ldr	r3, [pc, #296]	; (8005700 <HAL_TIM_Base_MspInit+0x170>)
 80055d8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80055da:	f003 0301 	and.w	r3, r3, #1
 80055de:	61fb      	str	r3, [r7, #28]
 80055e0:	69fb      	ldr	r3, [r7, #28]
    /**TIM2 GPIO Configuration    
    PA0     ------> TIM2_CH1 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 80055e2:	2301      	movs	r3, #1
 80055e4:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80055e6:	2302      	movs	r3, #2
 80055e8:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80055ea:	2300      	movs	r3, #0
 80055ec:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80055ee:	2300      	movs	r3, #0
 80055f0:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 80055f2:	2301      	movs	r3, #1
 80055f4:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80055f6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80055fa:	4619      	mov	r1, r3
 80055fc:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8005600:	f002 fc76 	bl	8007ef0 <HAL_GPIO_Init>

    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 1, 0);
 8005604:	2200      	movs	r2, #0
 8005606:	2101      	movs	r1, #1
 8005608:	201c      	movs	r0, #28
 800560a:	f001 fd5c 	bl	80070c6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 800560e:	201c      	movs	r0, #28
 8005610:	f001 fd73 	bl	80070fa <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(TIM1_TRG_COM_TIM17_IRQn);
  /* USER CODE BEGIN TIM17_MspInit 1 */

  /* USER CODE END TIM17_MspInit 1 */
  }
}
 8005614:	e070      	b.n	80056f8 <HAL_TIM_Base_MspInit+0x168>
  else if(tim_baseHandle->Instance==TIM5)
 8005616:	687b      	ldr	r3, [r7, #4]
 8005618:	681b      	ldr	r3, [r3, #0]
 800561a:	4a3a      	ldr	r2, [pc, #232]	; (8005704 <HAL_TIM_Base_MspInit+0x174>)
 800561c:	4293      	cmp	r3, r2
 800561e:	d10c      	bne.n	800563a <HAL_TIM_Base_MspInit+0xaa>
    __HAL_RCC_TIM5_CLK_ENABLE();
 8005620:	4b37      	ldr	r3, [pc, #220]	; (8005700 <HAL_TIM_Base_MspInit+0x170>)
 8005622:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005624:	4a36      	ldr	r2, [pc, #216]	; (8005700 <HAL_TIM_Base_MspInit+0x170>)
 8005626:	f043 0308 	orr.w	r3, r3, #8
 800562a:	6593      	str	r3, [r2, #88]	; 0x58
 800562c:	4b34      	ldr	r3, [pc, #208]	; (8005700 <HAL_TIM_Base_MspInit+0x170>)
 800562e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005630:	f003 0308 	and.w	r3, r3, #8
 8005634:	61bb      	str	r3, [r7, #24]
 8005636:	69bb      	ldr	r3, [r7, #24]
}
 8005638:	e05e      	b.n	80056f8 <HAL_TIM_Base_MspInit+0x168>
  else if(tim_baseHandle->Instance==TIM8)
 800563a:	687b      	ldr	r3, [r7, #4]
 800563c:	681b      	ldr	r3, [r3, #0]
 800563e:	4a32      	ldr	r2, [pc, #200]	; (8005708 <HAL_TIM_Base_MspInit+0x178>)
 8005640:	4293      	cmp	r3, r2
 8005642:	d10c      	bne.n	800565e <HAL_TIM_Base_MspInit+0xce>
    __HAL_RCC_TIM8_CLK_ENABLE();
 8005644:	4b2e      	ldr	r3, [pc, #184]	; (8005700 <HAL_TIM_Base_MspInit+0x170>)
 8005646:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005648:	4a2d      	ldr	r2, [pc, #180]	; (8005700 <HAL_TIM_Base_MspInit+0x170>)
 800564a:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 800564e:	6613      	str	r3, [r2, #96]	; 0x60
 8005650:	4b2b      	ldr	r3, [pc, #172]	; (8005700 <HAL_TIM_Base_MspInit+0x170>)
 8005652:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005654:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8005658:	617b      	str	r3, [r7, #20]
 800565a:	697b      	ldr	r3, [r7, #20]
}
 800565c:	e04c      	b.n	80056f8 <HAL_TIM_Base_MspInit+0x168>
  else if(tim_baseHandle->Instance==TIM15)
 800565e:	687b      	ldr	r3, [r7, #4]
 8005660:	681b      	ldr	r3, [r3, #0]
 8005662:	4a2a      	ldr	r2, [pc, #168]	; (800570c <HAL_TIM_Base_MspInit+0x17c>)
 8005664:	4293      	cmp	r3, r2
 8005666:	d114      	bne.n	8005692 <HAL_TIM_Base_MspInit+0x102>
    __HAL_RCC_TIM15_CLK_ENABLE();
 8005668:	4b25      	ldr	r3, [pc, #148]	; (8005700 <HAL_TIM_Base_MspInit+0x170>)
 800566a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800566c:	4a24      	ldr	r2, [pc, #144]	; (8005700 <HAL_TIM_Base_MspInit+0x170>)
 800566e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005672:	6613      	str	r3, [r2, #96]	; 0x60
 8005674:	4b22      	ldr	r3, [pc, #136]	; (8005700 <HAL_TIM_Base_MspInit+0x170>)
 8005676:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005678:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800567c:	613b      	str	r3, [r7, #16]
 800567e:	693b      	ldr	r3, [r7, #16]
    HAL_NVIC_SetPriority(TIM1_BRK_TIM15_IRQn, 0, 0);
 8005680:	2200      	movs	r2, #0
 8005682:	2100      	movs	r1, #0
 8005684:	2018      	movs	r0, #24
 8005686:	f001 fd1e 	bl	80070c6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_BRK_TIM15_IRQn);
 800568a:	2018      	movs	r0, #24
 800568c:	f001 fd35 	bl	80070fa <HAL_NVIC_EnableIRQ>
}
 8005690:	e032      	b.n	80056f8 <HAL_TIM_Base_MspInit+0x168>
  else if(tim_baseHandle->Instance==TIM16)
 8005692:	687b      	ldr	r3, [r7, #4]
 8005694:	681b      	ldr	r3, [r3, #0]
 8005696:	4a1e      	ldr	r2, [pc, #120]	; (8005710 <HAL_TIM_Base_MspInit+0x180>)
 8005698:	4293      	cmp	r3, r2
 800569a:	d114      	bne.n	80056c6 <HAL_TIM_Base_MspInit+0x136>
    __HAL_RCC_TIM16_CLK_ENABLE();
 800569c:	4b18      	ldr	r3, [pc, #96]	; (8005700 <HAL_TIM_Base_MspInit+0x170>)
 800569e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80056a0:	4a17      	ldr	r2, [pc, #92]	; (8005700 <HAL_TIM_Base_MspInit+0x170>)
 80056a2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80056a6:	6613      	str	r3, [r2, #96]	; 0x60
 80056a8:	4b15      	ldr	r3, [pc, #84]	; (8005700 <HAL_TIM_Base_MspInit+0x170>)
 80056aa:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80056ac:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80056b0:	60fb      	str	r3, [r7, #12]
 80056b2:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_SetPriority(TIM1_UP_TIM16_IRQn, 1, 0);
 80056b4:	2200      	movs	r2, #0
 80056b6:	2101      	movs	r1, #1
 80056b8:	2019      	movs	r0, #25
 80056ba:	f001 fd04 	bl	80070c6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM16_IRQn);
 80056be:	2019      	movs	r0, #25
 80056c0:	f001 fd1b 	bl	80070fa <HAL_NVIC_EnableIRQ>
}
 80056c4:	e018      	b.n	80056f8 <HAL_TIM_Base_MspInit+0x168>
  else if(tim_baseHandle->Instance==TIM17)
 80056c6:	687b      	ldr	r3, [r7, #4]
 80056c8:	681b      	ldr	r3, [r3, #0]
 80056ca:	4a12      	ldr	r2, [pc, #72]	; (8005714 <HAL_TIM_Base_MspInit+0x184>)
 80056cc:	4293      	cmp	r3, r2
 80056ce:	d113      	bne.n	80056f8 <HAL_TIM_Base_MspInit+0x168>
    __HAL_RCC_TIM17_CLK_ENABLE();
 80056d0:	4b0b      	ldr	r3, [pc, #44]	; (8005700 <HAL_TIM_Base_MspInit+0x170>)
 80056d2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80056d4:	4a0a      	ldr	r2, [pc, #40]	; (8005700 <HAL_TIM_Base_MspInit+0x170>)
 80056d6:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80056da:	6613      	str	r3, [r2, #96]	; 0x60
 80056dc:	4b08      	ldr	r3, [pc, #32]	; (8005700 <HAL_TIM_Base_MspInit+0x170>)
 80056de:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80056e0:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80056e4:	60bb      	str	r3, [r7, #8]
 80056e6:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM1_TRG_COM_TIM17_IRQn, 1, 0);
 80056e8:	2200      	movs	r2, #0
 80056ea:	2101      	movs	r1, #1
 80056ec:	201a      	movs	r0, #26
 80056ee:	f001 fcea 	bl	80070c6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_TRG_COM_TIM17_IRQn);
 80056f2:	201a      	movs	r0, #26
 80056f4:	f001 fd01 	bl	80070fa <HAL_NVIC_EnableIRQ>
}
 80056f8:	bf00      	nop
 80056fa:	3738      	adds	r7, #56	; 0x38
 80056fc:	46bd      	mov	sp, r7
 80056fe:	bd80      	pop	{r7, pc}
 8005700:	40021000 	.word	0x40021000
 8005704:	40000c00 	.word	0x40000c00
 8005708:	40013400 	.word	0x40013400
 800570c:	40014000 	.word	0x40014000
 8005710:	40014400 	.word	0x40014400
 8005714:	40014800 	.word	0x40014800

08005718 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8005718:	480d      	ldr	r0, [pc, #52]	; (8005750 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 800571a:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800571c:	480d      	ldr	r0, [pc, #52]	; (8005754 <LoopForever+0x6>)
  ldr r1, =_edata
 800571e:	490e      	ldr	r1, [pc, #56]	; (8005758 <LoopForever+0xa>)
  ldr r2, =_sidata
 8005720:	4a0e      	ldr	r2, [pc, #56]	; (800575c <LoopForever+0xe>)
  movs r3, #0
 8005722:	2300      	movs	r3, #0
  b	LoopCopyDataInit
 8005724:	e002      	b.n	800572c <LoopCopyDataInit>

08005726 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8005726:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8005728:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800572a:	3304      	adds	r3, #4

0800572c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800572c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800572e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8005730:	d3f9      	bcc.n	8005726 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8005732:	4a0b      	ldr	r2, [pc, #44]	; (8005760 <LoopForever+0x12>)
  ldr r4, =_ebss
 8005734:	4c0b      	ldr	r4, [pc, #44]	; (8005764 <LoopForever+0x16>)
  movs r3, #0
 8005736:	2300      	movs	r3, #0
  b LoopFillZerobss
 8005738:	e001      	b.n	800573e <LoopFillZerobss>

0800573a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800573a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800573c:	3204      	adds	r2, #4

0800573e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800573e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8005740:	d3fb      	bcc.n	800573a <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8005742:	f7ff fc83 	bl	800504c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8005746:	f006 fb7d 	bl	800be44 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 800574a:	f7ff f8b3 	bl	80048b4 <main>

0800574e <LoopForever>:

LoopForever:
    b LoopForever
 800574e:	e7fe      	b.n	800574e <LoopForever>
  ldr   r0, =_estack
 8005750:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8005754:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8005758:	200013f8 	.word	0x200013f8
  ldr r2, =_sidata
 800575c:	0800f0f8 	.word	0x0800f0f8
  ldr r2, =_sbss
 8005760:	200013f8 	.word	0x200013f8
  ldr r4, =_ebss
 8005764:	20001894 	.word	0x20001894

08005768 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8005768:	e7fe      	b.n	8005768 <ADC1_2_IRQHandler>

0800576a <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800576a:	b580      	push	{r7, lr}
 800576c:	b082      	sub	sp, #8
 800576e:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8005770:	2300      	movs	r3, #0
 8005772:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8005774:	2003      	movs	r0, #3
 8005776:	f001 fc9b 	bl	80070b0 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800577a:	2000      	movs	r0, #0
 800577c:	f000 f80e 	bl	800579c <HAL_InitTick>
 8005780:	4603      	mov	r3, r0
 8005782:	2b00      	cmp	r3, #0
 8005784:	d002      	beq.n	800578c <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8005786:	2301      	movs	r3, #1
 8005788:	71fb      	strb	r3, [r7, #7]
 800578a:	e001      	b.n	8005790 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 800578c:	f7ff fa66 	bl	8004c5c <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8005790:	79fb      	ldrb	r3, [r7, #7]

}
 8005792:	4618      	mov	r0, r3
 8005794:	3708      	adds	r7, #8
 8005796:	46bd      	mov	sp, r7
 8005798:	bd80      	pop	{r7, pc}
	...

0800579c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800579c:	b580      	push	{r7, lr}
 800579e:	b084      	sub	sp, #16
 80057a0:	af00      	add	r7, sp, #0
 80057a2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 80057a4:	2300      	movs	r3, #0
 80057a6:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 80057a8:	4b16      	ldr	r3, [pc, #88]	; (8005804 <HAL_InitTick+0x68>)
 80057aa:	681b      	ldr	r3, [r3, #0]
 80057ac:	2b00      	cmp	r3, #0
 80057ae:	d022      	beq.n	80057f6 <HAL_InitTick+0x5a>
  {
    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 80057b0:	4b15      	ldr	r3, [pc, #84]	; (8005808 <HAL_InitTick+0x6c>)
 80057b2:	681a      	ldr	r2, [r3, #0]
 80057b4:	4b13      	ldr	r3, [pc, #76]	; (8005804 <HAL_InitTick+0x68>)
 80057b6:	681b      	ldr	r3, [r3, #0]
 80057b8:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 80057bc:	fbb1 f3f3 	udiv	r3, r1, r3
 80057c0:	fbb2 f3f3 	udiv	r3, r2, r3
 80057c4:	4618      	mov	r0, r3
 80057c6:	f001 fca6 	bl	8007116 <HAL_SYSTICK_Config>
 80057ca:	4603      	mov	r3, r0
 80057cc:	2b00      	cmp	r3, #0
 80057ce:	d10f      	bne.n	80057f0 <HAL_InitTick+0x54>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80057d0:	687b      	ldr	r3, [r7, #4]
 80057d2:	2b0f      	cmp	r3, #15
 80057d4:	d809      	bhi.n	80057ea <HAL_InitTick+0x4e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80057d6:	2200      	movs	r2, #0
 80057d8:	6879      	ldr	r1, [r7, #4]
 80057da:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80057de:	f001 fc72 	bl	80070c6 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80057e2:	4a0a      	ldr	r2, [pc, #40]	; (800580c <HAL_InitTick+0x70>)
 80057e4:	687b      	ldr	r3, [r7, #4]
 80057e6:	6013      	str	r3, [r2, #0]
 80057e8:	e007      	b.n	80057fa <HAL_InitTick+0x5e>
      }
      else
      {
        status = HAL_ERROR;
 80057ea:	2301      	movs	r3, #1
 80057ec:	73fb      	strb	r3, [r7, #15]
 80057ee:	e004      	b.n	80057fa <HAL_InitTick+0x5e>
      }
    }
    else
    {
      status = HAL_ERROR;
 80057f0:	2301      	movs	r3, #1
 80057f2:	73fb      	strb	r3, [r7, #15]
 80057f4:	e001      	b.n	80057fa <HAL_InitTick+0x5e>
    }
  }
  else
  {
    status = HAL_ERROR;
 80057f6:	2301      	movs	r3, #1
 80057f8:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 80057fa:	7bfb      	ldrb	r3, [r7, #15]
}
 80057fc:	4618      	mov	r0, r3
 80057fe:	3710      	adds	r7, #16
 8005800:	46bd      	mov	sp, r7
 8005802:	bd80      	pop	{r7, pc}
 8005804:	200001dc 	.word	0x200001dc
 8005808:	200001d4 	.word	0x200001d4
 800580c:	200001d8 	.word	0x200001d8

08005810 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8005810:	b480      	push	{r7}
 8005812:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8005814:	4b05      	ldr	r3, [pc, #20]	; (800582c <HAL_IncTick+0x1c>)
 8005816:	681a      	ldr	r2, [r3, #0]
 8005818:	4b05      	ldr	r3, [pc, #20]	; (8005830 <HAL_IncTick+0x20>)
 800581a:	681b      	ldr	r3, [r3, #0]
 800581c:	4413      	add	r3, r2
 800581e:	4a03      	ldr	r2, [pc, #12]	; (800582c <HAL_IncTick+0x1c>)
 8005820:	6013      	str	r3, [r2, #0]
}
 8005822:	bf00      	nop
 8005824:	46bd      	mov	sp, r7
 8005826:	f85d 7b04 	ldr.w	r7, [sp], #4
 800582a:	4770      	bx	lr
 800582c:	2000188c 	.word	0x2000188c
 8005830:	200001dc 	.word	0x200001dc

08005834 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8005834:	b480      	push	{r7}
 8005836:	af00      	add	r7, sp, #0
  return uwTick;
 8005838:	4b03      	ldr	r3, [pc, #12]	; (8005848 <HAL_GetTick+0x14>)
 800583a:	681b      	ldr	r3, [r3, #0]
}
 800583c:	4618      	mov	r0, r3
 800583e:	46bd      	mov	sp, r7
 8005840:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005844:	4770      	bx	lr
 8005846:	bf00      	nop
 8005848:	2000188c 	.word	0x2000188c

0800584c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800584c:	b580      	push	{r7, lr}
 800584e:	b084      	sub	sp, #16
 8005850:	af00      	add	r7, sp, #0
 8005852:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8005854:	f7ff ffee 	bl	8005834 <HAL_GetTick>
 8005858:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800585a:	687b      	ldr	r3, [r7, #4]
 800585c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800585e:	68fb      	ldr	r3, [r7, #12]
 8005860:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8005864:	d004      	beq.n	8005870 <HAL_Delay+0x24>
  {
    wait += (uint32_t)(uwTickFreq);
 8005866:	4b09      	ldr	r3, [pc, #36]	; (800588c <HAL_Delay+0x40>)
 8005868:	681b      	ldr	r3, [r3, #0]
 800586a:	68fa      	ldr	r2, [r7, #12]
 800586c:	4413      	add	r3, r2
 800586e:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8005870:	bf00      	nop
 8005872:	f7ff ffdf 	bl	8005834 <HAL_GetTick>
 8005876:	4602      	mov	r2, r0
 8005878:	68bb      	ldr	r3, [r7, #8]
 800587a:	1ad3      	subs	r3, r2, r3
 800587c:	68fa      	ldr	r2, [r7, #12]
 800587e:	429a      	cmp	r2, r3
 8005880:	d8f7      	bhi.n	8005872 <HAL_Delay+0x26>
  {
  }
}
 8005882:	bf00      	nop
 8005884:	3710      	adds	r7, #16
 8005886:	46bd      	mov	sp, r7
 8005888:	bd80      	pop	{r7, pc}
 800588a:	bf00      	nop
 800588c:	200001dc 	.word	0x200001dc

08005890 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 8005890:	b480      	push	{r7}
 8005892:	b083      	sub	sp, #12
 8005894:	af00      	add	r7, sp, #0
 8005896:	6078      	str	r0, [r7, #4]
 8005898:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 800589a:	687b      	ldr	r3, [r7, #4]
 800589c:	689b      	ldr	r3, [r3, #8]
 800589e:	f423 127c 	bic.w	r2, r3, #4128768	; 0x3f0000
 80058a2:	683b      	ldr	r3, [r7, #0]
 80058a4:	431a      	orrs	r2, r3
 80058a6:	687b      	ldr	r3, [r7, #4]
 80058a8:	609a      	str	r2, [r3, #8]
}
 80058aa:	bf00      	nop
 80058ac:	370c      	adds	r7, #12
 80058ae:	46bd      	mov	sp, r7
 80058b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058b4:	4770      	bx	lr

080058b6 <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 80058b6:	b480      	push	{r7}
 80058b8:	b083      	sub	sp, #12
 80058ba:	af00      	add	r7, sp, #0
 80058bc:	6078      	str	r0, [r7, #4]
 80058be:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL, PathInternal);
 80058c0:	687b      	ldr	r3, [r7, #4]
 80058c2:	689b      	ldr	r3, [r3, #8]
 80058c4:	f023 72e0 	bic.w	r2, r3, #29360128	; 0x1c00000
 80058c8:	683b      	ldr	r3, [r7, #0]
 80058ca:	431a      	orrs	r2, r3
 80058cc:	687b      	ldr	r3, [r7, #4]
 80058ce:	609a      	str	r2, [r3, #8]
}
 80058d0:	bf00      	nop
 80058d2:	370c      	adds	r7, #12
 80058d4:	46bd      	mov	sp, r7
 80058d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058da:	4770      	bx	lr

080058dc <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON)
{
 80058dc:	b480      	push	{r7}
 80058de:	b083      	sub	sp, #12
 80058e0:	af00      	add	r7, sp, #0
 80058e2:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL));
 80058e4:	687b      	ldr	r3, [r7, #4]
 80058e6:	689b      	ldr	r3, [r3, #8]
 80058e8:	f003 73e0 	and.w	r3, r3, #29360128	; 0x1c00000
}
 80058ec:	4618      	mov	r0, r3
 80058ee:	370c      	adds	r7, #12
 80058f0:	46bd      	mov	sp, r7
 80058f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058f6:	4770      	bx	lr

080058f8 <LL_ADC_SetOffset>:
  *             Other channels are slow channels  allows: 6.5 (sampling) + 12.5 (conversion) = 19 ADC clock cycles (fADC) to convert in 12-bit resolution.\n
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 80058f8:	b490      	push	{r4, r7}
 80058fa:	b084      	sub	sp, #16
 80058fc:	af00      	add	r7, sp, #0
 80058fe:	60f8      	str	r0, [r7, #12]
 8005900:	60b9      	str	r1, [r7, #8]
 8005902:	607a      	str	r2, [r7, #4]
 8005904:	603b      	str	r3, [r7, #0]
  register __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8005906:	68fb      	ldr	r3, [r7, #12]
 8005908:	3360      	adds	r3, #96	; 0x60
 800590a:	461a      	mov	r2, r3
 800590c:	68bb      	ldr	r3, [r7, #8]
 800590e:	009b      	lsls	r3, r3, #2
 8005910:	4413      	add	r3, r2
 8005912:	461c      	mov	r4, r3

  MODIFY_REG(*preg,
 8005914:	6822      	ldr	r2, [r4, #0]
 8005916:	4b08      	ldr	r3, [pc, #32]	; (8005938 <LL_ADC_SetOffset+0x40>)
 8005918:	4013      	ands	r3, r2
 800591a:	687a      	ldr	r2, [r7, #4]
 800591c:	f002 41f8 	and.w	r1, r2, #2080374784	; 0x7c000000
 8005920:	683a      	ldr	r2, [r7, #0]
 8005922:	430a      	orrs	r2, r1
 8005924:	4313      	orrs	r3, r2
 8005926:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800592a:	6023      	str	r3, [r4, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 800592c:	bf00      	nop
 800592e:	3710      	adds	r7, #16
 8005930:	46bd      	mov	sp, r7
 8005932:	bc90      	pop	{r4, r7}
 8005934:	4770      	bx	lr
 8005936:	bf00      	nop
 8005938:	03fff000 	.word	0x03fff000

0800593c <LL_ADC_GetOffsetChannel>:
  *         (1, 2, 3, 4, 5, 7) For ADC channel read back from ADC register,
  *                      comparison with internal channel parameter to be done
  *                      using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(ADC_TypeDef *ADCx, uint32_t Offsety)
{
 800593c:	b490      	push	{r4, r7}
 800593e:	b082      	sub	sp, #8
 8005940:	af00      	add	r7, sp, #0
 8005942:	6078      	str	r0, [r7, #4]
 8005944:	6039      	str	r1, [r7, #0]
  register const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8005946:	687b      	ldr	r3, [r7, #4]
 8005948:	3360      	adds	r3, #96	; 0x60
 800594a:	461a      	mov	r2, r3
 800594c:	683b      	ldr	r3, [r7, #0]
 800594e:	009b      	lsls	r3, r3, #2
 8005950:	4413      	add	r3, r2
 8005952:	461c      	mov	r4, r3

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8005954:	6823      	ldr	r3, [r4, #0]
 8005956:	f003 43f8 	and.w	r3, r3, #2080374784	; 0x7c000000
}
 800595a:	4618      	mov	r0, r3
 800595c:	3708      	adds	r7, #8
 800595e:	46bd      	mov	sp, r7
 8005960:	bc90      	pop	{r4, r7}
 8005962:	4770      	bx	lr

08005964 <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 8005964:	b490      	push	{r4, r7}
 8005966:	b084      	sub	sp, #16
 8005968:	af00      	add	r7, sp, #0
 800596a:	60f8      	str	r0, [r7, #12]
 800596c:	60b9      	str	r1, [r7, #8]
 800596e:	607a      	str	r2, [r7, #4]
  register __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8005970:	68fb      	ldr	r3, [r7, #12]
 8005972:	3360      	adds	r3, #96	; 0x60
 8005974:	461a      	mov	r2, r3
 8005976:	68bb      	ldr	r3, [r7, #8]
 8005978:	009b      	lsls	r3, r3, #2
 800597a:	4413      	add	r3, r2
 800597c:	461c      	mov	r4, r3

  MODIFY_REG(*preg,
 800597e:	6823      	ldr	r3, [r4, #0]
 8005980:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8005984:	687b      	ldr	r3, [r7, #4]
 8005986:	4313      	orrs	r3, r2
 8005988:	6023      	str	r3, [r4, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 800598a:	bf00      	nop
 800598c:	3710      	adds	r7, #16
 800598e:	46bd      	mov	sp, r7
 8005990:	bc90      	pop	{r4, r7}
 8005992:	4770      	bx	lr

08005994 <LL_ADC_SetOffsetSign>:
  *         @arg @ref LL_ADC_OFFSET_SIGN_NEGATIVE
  *         @arg @ref LL_ADC_OFFSET_SIGN_POSITIVE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSign(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSign)
{
 8005994:	b490      	push	{r4, r7}
 8005996:	b084      	sub	sp, #16
 8005998:	af00      	add	r7, sp, #0
 800599a:	60f8      	str	r0, [r7, #12]
 800599c:	60b9      	str	r1, [r7, #8]
 800599e:	607a      	str	r2, [r7, #4]
  register __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80059a0:	68fb      	ldr	r3, [r7, #12]
 80059a2:	3360      	adds	r3, #96	; 0x60
 80059a4:	461a      	mov	r2, r3
 80059a6:	68bb      	ldr	r3, [r7, #8]
 80059a8:	009b      	lsls	r3, r3, #2
 80059aa:	4413      	add	r3, r2
 80059ac:	461c      	mov	r4, r3

  MODIFY_REG(*preg,
 80059ae:	6823      	ldr	r3, [r4, #0]
 80059b0:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 80059b4:	687b      	ldr	r3, [r7, #4]
 80059b6:	4313      	orrs	r3, r2
 80059b8:	6023      	str	r3, [r4, #0]
             ADC_OFR1_OFFSETPOS,
             OffsetSign);
}
 80059ba:	bf00      	nop
 80059bc:	3710      	adds	r7, #16
 80059be:	46bd      	mov	sp, r7
 80059c0:	bc90      	pop	{r4, r7}
 80059c2:	4770      	bx	lr

080059c4 <LL_ADC_SetOffsetSaturation>:
  *         @arg @ref LL_ADC_OFFSET_SATURATION_ENABLE
  *         @arg @ref LL_ADC_OFFSET_SATURATION_DISABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSaturation(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSaturation)
{
 80059c4:	b490      	push	{r4, r7}
 80059c6:	b084      	sub	sp, #16
 80059c8:	af00      	add	r7, sp, #0
 80059ca:	60f8      	str	r0, [r7, #12]
 80059cc:	60b9      	str	r1, [r7, #8]
 80059ce:	607a      	str	r2, [r7, #4]
  register __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80059d0:	68fb      	ldr	r3, [r7, #12]
 80059d2:	3360      	adds	r3, #96	; 0x60
 80059d4:	461a      	mov	r2, r3
 80059d6:	68bb      	ldr	r3, [r7, #8]
 80059d8:	009b      	lsls	r3, r3, #2
 80059da:	4413      	add	r3, r2
 80059dc:	461c      	mov	r4, r3

  MODIFY_REG(*preg,
 80059de:	6823      	ldr	r3, [r4, #0]
 80059e0:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 80059e4:	687b      	ldr	r3, [r7, #4]
 80059e6:	4313      	orrs	r3, r2
 80059e8:	6023      	str	r3, [r4, #0]
             ADC_OFR1_SATEN,
             OffsetSaturation);
}
 80059ea:	bf00      	nop
 80059ec:	3710      	adds	r7, #16
 80059ee:	46bd      	mov	sp, r7
 80059f0:	bc90      	pop	{r4, r7}
 80059f2:	4770      	bx	lr

080059f4 <LL_ADC_SetSamplingTimeCommonConfig>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_DEFAULT
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetSamplingTimeCommonConfig(ADC_TypeDef *ADCx, uint32_t SamplingTimeCommonConfig)
{
 80059f4:	b480      	push	{r7}
 80059f6:	b083      	sub	sp, #12
 80059f8:	af00      	add	r7, sp, #0
 80059fa:	6078      	str	r0, [r7, #4]
 80059fc:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->SMPR1, ADC_SMPR1_SMPPLUS, SamplingTimeCommonConfig);
 80059fe:	687b      	ldr	r3, [r7, #4]
 8005a00:	695b      	ldr	r3, [r3, #20]
 8005a02:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8005a06:	683b      	ldr	r3, [r7, #0]
 8005a08:	431a      	orrs	r2, r3
 8005a0a:	687b      	ldr	r3, [r7, #4]
 8005a0c:	615a      	str	r2, [r3, #20]
}
 8005a0e:	bf00      	nop
 8005a10:	370c      	adds	r7, #12
 8005a12:	46bd      	mov	sp, r7
 8005a14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a18:	4770      	bx	lr

08005a1a <LL_ADC_REG_SetSequencerRanks>:
  *         (8) On STM32G4, fast channel allows: 2.5 (sampling) + 12.5 (conversion) = 15 ADC clock cycles (fADC) to convert in 12-bit resolution.
  *             Other channels are slow channels  allows: 6.5 (sampling) + 12.5 (conversion) = 19 ADC clock cycles (fADC) to convert in 12-bit resolution.\n
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8005a1a:	b490      	push	{r4, r7}
 8005a1c:	b084      	sub	sp, #16
 8005a1e:	af00      	add	r7, sp, #0
 8005a20:	60f8      	str	r0, [r7, #12]
 8005a22:	60b9      	str	r1, [r7, #8]
 8005a24:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  register __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 8005a26:	68fb      	ldr	r3, [r7, #12]
 8005a28:	3330      	adds	r3, #48	; 0x30
 8005a2a:	461a      	mov	r2, r3
 8005a2c:	68bb      	ldr	r3, [r7, #8]
 8005a2e:	0a1b      	lsrs	r3, r3, #8
 8005a30:	009b      	lsls	r3, r3, #2
 8005a32:	f003 030c 	and.w	r3, r3, #12
 8005a36:	4413      	add	r3, r2
 8005a38:	461c      	mov	r4, r3

  MODIFY_REG(*preg,
 8005a3a:	6822      	ldr	r2, [r4, #0]
 8005a3c:	68bb      	ldr	r3, [r7, #8]
 8005a3e:	f003 031f 	and.w	r3, r3, #31
 8005a42:	211f      	movs	r1, #31
 8005a44:	fa01 f303 	lsl.w	r3, r1, r3
 8005a48:	43db      	mvns	r3, r3
 8005a4a:	401a      	ands	r2, r3
 8005a4c:	687b      	ldr	r3, [r7, #4]
 8005a4e:	0e9b      	lsrs	r3, r3, #26
 8005a50:	f003 011f 	and.w	r1, r3, #31
 8005a54:	68bb      	ldr	r3, [r7, #8]
 8005a56:	f003 031f 	and.w	r3, r3, #31
 8005a5a:	fa01 f303 	lsl.w	r3, r1, r3
 8005a5e:	4313      	orrs	r3, r2
 8005a60:	6023      	str	r3, [r4, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS) << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 8005a62:	bf00      	nop
 8005a64:	3710      	adds	r7, #16
 8005a66:	46bd      	mov	sp, r7
 8005a68:	bc90      	pop	{r4, r7}
 8005a6a:	4770      	bx	lr

08005a6c <LL_ADC_SetChannelSamplingTime>:
  *             can be replaced by 3.5 ADC clock cycles.
  *             Refer to function @ref LL_ADC_SetSamplingTimeCommonConfig().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 8005a6c:	b490      	push	{r4, r7}
 8005a6e:	b084      	sub	sp, #16
 8005a70:	af00      	add	r7, sp, #0
 8005a72:	60f8      	str	r0, [r7, #12]
 8005a74:	60b9      	str	r1, [r7, #8]
 8005a76:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  register __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 8005a78:	68fb      	ldr	r3, [r7, #12]
 8005a7a:	3314      	adds	r3, #20
 8005a7c:	461a      	mov	r2, r3
 8005a7e:	68bb      	ldr	r3, [r7, #8]
 8005a80:	0e5b      	lsrs	r3, r3, #25
 8005a82:	009b      	lsls	r3, r3, #2
 8005a84:	f003 0304 	and.w	r3, r3, #4
 8005a88:	4413      	add	r3, r2
 8005a8a:	461c      	mov	r4, r3

  MODIFY_REG(*preg,
 8005a8c:	6822      	ldr	r2, [r4, #0]
 8005a8e:	68bb      	ldr	r3, [r7, #8]
 8005a90:	0d1b      	lsrs	r3, r3, #20
 8005a92:	f003 031f 	and.w	r3, r3, #31
 8005a96:	2107      	movs	r1, #7
 8005a98:	fa01 f303 	lsl.w	r3, r1, r3
 8005a9c:	43db      	mvns	r3, r3
 8005a9e:	401a      	ands	r2, r3
 8005aa0:	68bb      	ldr	r3, [r7, #8]
 8005aa2:	0d1b      	lsrs	r3, r3, #20
 8005aa4:	f003 031f 	and.w	r3, r3, #31
 8005aa8:	6879      	ldr	r1, [r7, #4]
 8005aaa:	fa01 f303 	lsl.w	r3, r1, r3
 8005aae:	4313      	orrs	r3, r2
 8005ab0:	6023      	str	r3, [r4, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 8005ab2:	bf00      	nop
 8005ab4:	3710      	adds	r7, #16
 8005ab6:	46bd      	mov	sp, r7
 8005ab8:	bc90      	pop	{r4, r7}
 8005aba:	4770      	bx	lr

08005abc <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 8005abc:	b480      	push	{r7}
 8005abe:	b085      	sub	sp, #20
 8005ac0:	af00      	add	r7, sp, #0
 8005ac2:	60f8      	str	r0, [r7, #12]
 8005ac4:	60b9      	str	r1, [r7, #8]
 8005ac6:	607a      	str	r2, [r7, #4]
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 8005ac8:	68fb      	ldr	r3, [r7, #12]
 8005aca:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 8005ace:	68bb      	ldr	r3, [r7, #8]
 8005ad0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005ad4:	43db      	mvns	r3, r3
 8005ad6:	401a      	ands	r2, r3
 8005ad8:	687b      	ldr	r3, [r7, #4]
 8005ada:	f003 0318 	and.w	r3, r3, #24
 8005ade:	4908      	ldr	r1, [pc, #32]	; (8005b00 <LL_ADC_SetChannelSingleDiff+0x44>)
 8005ae0:	40d9      	lsrs	r1, r3
 8005ae2:	68bb      	ldr	r3, [r7, #8]
 8005ae4:	400b      	ands	r3, r1
 8005ae6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005aea:	431a      	orrs	r2, r3
 8005aec:	68fb      	ldr	r3, [r7, #12]
 8005aee:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK) & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
}
 8005af2:	bf00      	nop
 8005af4:	3714      	adds	r7, #20
 8005af6:	46bd      	mov	sp, r7
 8005af8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005afc:	4770      	bx	lr
 8005afe:	bf00      	nop
 8005b00:	0007ffff 	.word	0x0007ffff

08005b04 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 8005b04:	b480      	push	{r7}
 8005b06:	b083      	sub	sp, #12
 8005b08:	af00      	add	r7, sp, #0
 8005b0a:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8005b0c:	687b      	ldr	r3, [r7, #4]
 8005b0e:	689b      	ldr	r3, [r3, #8]
 8005b10:	f023 4320 	bic.w	r3, r3, #2684354560	; 0xa0000000
 8005b14:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8005b18:	687a      	ldr	r2, [r7, #4]
 8005b1a:	6093      	str	r3, [r2, #8]
}
 8005b1c:	bf00      	nop
 8005b1e:	370c      	adds	r7, #12
 8005b20:	46bd      	mov	sp, r7
 8005b22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b26:	4770      	bx	lr

08005b28 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(ADC_TypeDef *ADCx)
{
 8005b28:	b480      	push	{r7}
 8005b2a:	b083      	sub	sp, #12
 8005b2c:	af00      	add	r7, sp, #0
 8005b2e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8005b30:	687b      	ldr	r3, [r7, #4]
 8005b32:	689b      	ldr	r3, [r3, #8]
 8005b34:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8005b38:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8005b3c:	d101      	bne.n	8005b42 <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 8005b3e:	2301      	movs	r3, #1
 8005b40:	e000      	b.n	8005b44 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 8005b42:	2300      	movs	r3, #0
}
 8005b44:	4618      	mov	r0, r3
 8005b46:	370c      	adds	r7, #12
 8005b48:	46bd      	mov	sp, r7
 8005b4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b4e:	4770      	bx	lr

08005b50 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8005b50:	b480      	push	{r7}
 8005b52:	b083      	sub	sp, #12
 8005b54:	af00      	add	r7, sp, #0
 8005b56:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8005b58:	687b      	ldr	r3, [r7, #4]
 8005b5a:	689b      	ldr	r3, [r3, #8]
 8005b5c:	f023 4310 	bic.w	r3, r3, #2415919104	; 0x90000000
 8005b60:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8005b64:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8005b68:	687b      	ldr	r3, [r7, #4]
 8005b6a:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8005b6c:	bf00      	nop
 8005b6e:	370c      	adds	r7, #12
 8005b70:	46bd      	mov	sp, r7
 8005b72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b76:	4770      	bx	lr

08005b78 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
{
 8005b78:	b480      	push	{r7}
 8005b7a:	b083      	sub	sp, #12
 8005b7c:	af00      	add	r7, sp, #0
 8005b7e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8005b80:	687b      	ldr	r3, [r7, #4]
 8005b82:	689b      	ldr	r3, [r3, #8]
 8005b84:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005b88:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8005b8c:	d101      	bne.n	8005b92 <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 8005b8e:	2301      	movs	r3, #1
 8005b90:	e000      	b.n	8005b94 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 8005b92:	2300      	movs	r3, #0
}
 8005b94:	4618      	mov	r0, r3
 8005b96:	370c      	adds	r7, #12
 8005b98:	46bd      	mov	sp, r7
 8005b9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b9e:	4770      	bx	lr

08005ba0 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
 8005ba0:	b480      	push	{r7}
 8005ba2:	b083      	sub	sp, #12
 8005ba4:	af00      	add	r7, sp, #0
 8005ba6:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8005ba8:	687b      	ldr	r3, [r7, #4]
 8005baa:	689b      	ldr	r3, [r3, #8]
 8005bac:	f003 0301 	and.w	r3, r3, #1
 8005bb0:	2b01      	cmp	r3, #1
 8005bb2:	d101      	bne.n	8005bb8 <LL_ADC_IsEnabled+0x18>
 8005bb4:	2301      	movs	r3, #1
 8005bb6:	e000      	b.n	8005bba <LL_ADC_IsEnabled+0x1a>
 8005bb8:	2300      	movs	r3, #0
}
 8005bba:	4618      	mov	r0, r3
 8005bbc:	370c      	adds	r7, #12
 8005bbe:	46bd      	mov	sp, r7
 8005bc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bc4:	4770      	bx	lr

08005bc6 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8005bc6:	b480      	push	{r7}
 8005bc8:	b083      	sub	sp, #12
 8005bca:	af00      	add	r7, sp, #0
 8005bcc:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8005bce:	687b      	ldr	r3, [r7, #4]
 8005bd0:	689b      	ldr	r3, [r3, #8]
 8005bd2:	f003 0304 	and.w	r3, r3, #4
 8005bd6:	2b04      	cmp	r3, #4
 8005bd8:	d101      	bne.n	8005bde <LL_ADC_REG_IsConversionOngoing+0x18>
 8005bda:	2301      	movs	r3, #1
 8005bdc:	e000      	b.n	8005be0 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8005bde:	2300      	movs	r3, #0
}
 8005be0:	4618      	mov	r0, r3
 8005be2:	370c      	adds	r7, #12
 8005be4:	46bd      	mov	sp, r7
 8005be6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bea:	4770      	bx	lr

08005bec <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8005bec:	b480      	push	{r7}
 8005bee:	b083      	sub	sp, #12
 8005bf0:	af00      	add	r7, sp, #0
 8005bf2:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8005bf4:	687b      	ldr	r3, [r7, #4]
 8005bf6:	689b      	ldr	r3, [r3, #8]
 8005bf8:	f003 0308 	and.w	r3, r3, #8
 8005bfc:	2b08      	cmp	r3, #8
 8005bfe:	d101      	bne.n	8005c04 <LL_ADC_INJ_IsConversionOngoing+0x18>
 8005c00:	2301      	movs	r3, #1
 8005c02:	e000      	b.n	8005c06 <LL_ADC_INJ_IsConversionOngoing+0x1a>
 8005c04:	2300      	movs	r3, #0
}
 8005c06:	4618      	mov	r0, r3
 8005c08:	370c      	adds	r7, #12
 8005c0a:	46bd      	mov	sp, r7
 8005c0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c10:	4770      	bx	lr
	...

08005c14 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8005c14:	b590      	push	{r4, r7, lr}
 8005c16:	b089      	sub	sp, #36	; 0x24
 8005c18:	af00      	add	r7, sp, #0
 8005c1a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8005c1c:	2300      	movs	r3, #0
 8005c1e:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpCFGR;
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 8005c20:	2300      	movs	r3, #0
 8005c22:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;

  /* Check ADC handle */
  if (hadc == NULL)
 8005c24:	687b      	ldr	r3, [r7, #4]
 8005c26:	2b00      	cmp	r3, #0
 8005c28:	d101      	bne.n	8005c2e <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 8005c2a:	2301      	movs	r3, #1
 8005c2c:	e1ad      	b.n	8005f8a <HAL_ADC_Init+0x376>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8005c2e:	687b      	ldr	r3, [r7, #4]
 8005c30:	695b      	ldr	r3, [r3, #20]
 8005c32:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8005c34:	687b      	ldr	r3, [r7, #4]
 8005c36:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005c38:	2b00      	cmp	r3, #0
 8005c3a:	d109      	bne.n	8005c50 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8005c3c:	6878      	ldr	r0, [r7, #4]
 8005c3e:	f7fe f83f 	bl	8003cc0 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8005c42:	687b      	ldr	r3, [r7, #4]
 8005c44:	2200      	movs	r2, #0
 8005c46:	661a      	str	r2, [r3, #96]	; 0x60

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8005c48:	687b      	ldr	r3, [r7, #4]
 8005c4a:	2200      	movs	r2, #0
 8005c4c:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8005c50:	687b      	ldr	r3, [r7, #4]
 8005c52:	681b      	ldr	r3, [r3, #0]
 8005c54:	4618      	mov	r0, r3
 8005c56:	f7ff ff67 	bl	8005b28 <LL_ADC_IsDeepPowerDownEnabled>
 8005c5a:	4603      	mov	r3, r0
 8005c5c:	2b00      	cmp	r3, #0
 8005c5e:	d004      	beq.n	8005c6a <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 8005c60:	687b      	ldr	r3, [r7, #4]
 8005c62:	681b      	ldr	r3, [r3, #0]
 8005c64:	4618      	mov	r0, r3
 8005c66:	f7ff ff4d 	bl	8005b04 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8005c6a:	687b      	ldr	r3, [r7, #4]
 8005c6c:	681b      	ldr	r3, [r3, #0]
 8005c6e:	4618      	mov	r0, r3
 8005c70:	f7ff ff82 	bl	8005b78 <LL_ADC_IsInternalRegulatorEnabled>
 8005c74:	4603      	mov	r3, r0
 8005c76:	2b00      	cmp	r3, #0
 8005c78:	d113      	bne.n	8005ca2 <HAL_ADC_Init+0x8e>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 8005c7a:	687b      	ldr	r3, [r7, #4]
 8005c7c:	681b      	ldr	r3, [r3, #0]
 8005c7e:	4618      	mov	r0, r3
 8005c80:	f7ff ff66 	bl	8005b50 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * (SystemCoreClock / (100000UL * 2UL)));
 8005c84:	4b9e      	ldr	r3, [pc, #632]	; (8005f00 <HAL_ADC_Init+0x2ec>)
 8005c86:	681b      	ldr	r3, [r3, #0]
 8005c88:	099b      	lsrs	r3, r3, #6
 8005c8a:	4a9e      	ldr	r2, [pc, #632]	; (8005f04 <HAL_ADC_Init+0x2f0>)
 8005c8c:	fba2 2303 	umull	r2, r3, r2, r3
 8005c90:	099b      	lsrs	r3, r3, #6
 8005c92:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8005c94:	e002      	b.n	8005c9c <HAL_ADC_Init+0x88>
    {
      wait_loop_index--;
 8005c96:	68bb      	ldr	r3, [r7, #8]
 8005c98:	3b01      	subs	r3, #1
 8005c9a:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8005c9c:	68bb      	ldr	r3, [r7, #8]
 8005c9e:	2b00      	cmp	r3, #0
 8005ca0:	d1f9      	bne.n	8005c96 <HAL_ADC_Init+0x82>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8005ca2:	687b      	ldr	r3, [r7, #4]
 8005ca4:	681b      	ldr	r3, [r3, #0]
 8005ca6:	4618      	mov	r0, r3
 8005ca8:	f7ff ff66 	bl	8005b78 <LL_ADC_IsInternalRegulatorEnabled>
 8005cac:	4603      	mov	r3, r0
 8005cae:	2b00      	cmp	r3, #0
 8005cb0:	d10d      	bne.n	8005cce <HAL_ADC_Init+0xba>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8005cb2:	687b      	ldr	r3, [r7, #4]
 8005cb4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005cb6:	f043 0210 	orr.w	r2, r3, #16
 8005cba:	687b      	ldr	r3, [r7, #4]
 8005cbc:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8005cbe:	687b      	ldr	r3, [r7, #4]
 8005cc0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005cc2:	f043 0201 	orr.w	r2, r3, #1
 8005cc6:	687b      	ldr	r3, [r7, #4]
 8005cc8:	661a      	str	r2, [r3, #96]	; 0x60

    tmp_hal_status = HAL_ERROR;
 8005cca:	2301      	movs	r3, #1
 8005ccc:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8005cce:	687b      	ldr	r3, [r7, #4]
 8005cd0:	681b      	ldr	r3, [r3, #0]
 8005cd2:	4618      	mov	r0, r3
 8005cd4:	f7ff ff77 	bl	8005bc6 <LL_ADC_REG_IsConversionOngoing>
 8005cd8:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8005cda:	687b      	ldr	r3, [r7, #4]
 8005cdc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005cde:	f003 0310 	and.w	r3, r3, #16
 8005ce2:	2b00      	cmp	r3, #0
 8005ce4:	f040 8148 	bne.w	8005f78 <HAL_ADC_Init+0x364>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 8005ce8:	697b      	ldr	r3, [r7, #20]
 8005cea:	2b00      	cmp	r3, #0
 8005cec:	f040 8144 	bne.w	8005f78 <HAL_ADC_Init+0x364>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8005cf0:	687b      	ldr	r3, [r7, #4]
 8005cf2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005cf4:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 8005cf8:	f043 0202 	orr.w	r2, r3, #2
 8005cfc:	687b      	ldr	r3, [r7, #4]
 8005cfe:	65da      	str	r2, [r3, #92]	; 0x5c
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8005d00:	687b      	ldr	r3, [r7, #4]
 8005d02:	681b      	ldr	r3, [r3, #0]
 8005d04:	4618      	mov	r0, r3
 8005d06:	f7ff ff4b 	bl	8005ba0 <LL_ADC_IsEnabled>
 8005d0a:	4603      	mov	r3, r0
 8005d0c:	2b00      	cmp	r3, #0
 8005d0e:	d141      	bne.n	8005d94 <HAL_ADC_Init+0x180>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8005d10:	687b      	ldr	r3, [r7, #4]
 8005d12:	681b      	ldr	r3, [r3, #0]
 8005d14:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8005d18:	d004      	beq.n	8005d24 <HAL_ADC_Init+0x110>
 8005d1a:	687b      	ldr	r3, [r7, #4]
 8005d1c:	681b      	ldr	r3, [r3, #0]
 8005d1e:	4a7a      	ldr	r2, [pc, #488]	; (8005f08 <HAL_ADC_Init+0x2f4>)
 8005d20:	4293      	cmp	r3, r2
 8005d22:	d10f      	bne.n	8005d44 <HAL_ADC_Init+0x130>
 8005d24:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
 8005d28:	f7ff ff3a 	bl	8005ba0 <LL_ADC_IsEnabled>
 8005d2c:	4604      	mov	r4, r0
 8005d2e:	4876      	ldr	r0, [pc, #472]	; (8005f08 <HAL_ADC_Init+0x2f4>)
 8005d30:	f7ff ff36 	bl	8005ba0 <LL_ADC_IsEnabled>
 8005d34:	4603      	mov	r3, r0
 8005d36:	4323      	orrs	r3, r4
 8005d38:	2b00      	cmp	r3, #0
 8005d3a:	bf0c      	ite	eq
 8005d3c:	2301      	moveq	r3, #1
 8005d3e:	2300      	movne	r3, #0
 8005d40:	b2db      	uxtb	r3, r3
 8005d42:	e012      	b.n	8005d6a <HAL_ADC_Init+0x156>
 8005d44:	4871      	ldr	r0, [pc, #452]	; (8005f0c <HAL_ADC_Init+0x2f8>)
 8005d46:	f7ff ff2b 	bl	8005ba0 <LL_ADC_IsEnabled>
 8005d4a:	4604      	mov	r4, r0
 8005d4c:	4870      	ldr	r0, [pc, #448]	; (8005f10 <HAL_ADC_Init+0x2fc>)
 8005d4e:	f7ff ff27 	bl	8005ba0 <LL_ADC_IsEnabled>
 8005d52:	4603      	mov	r3, r0
 8005d54:	431c      	orrs	r4, r3
 8005d56:	486f      	ldr	r0, [pc, #444]	; (8005f14 <HAL_ADC_Init+0x300>)
 8005d58:	f7ff ff22 	bl	8005ba0 <LL_ADC_IsEnabled>
 8005d5c:	4603      	mov	r3, r0
 8005d5e:	4323      	orrs	r3, r4
 8005d60:	2b00      	cmp	r3, #0
 8005d62:	bf0c      	ite	eq
 8005d64:	2301      	moveq	r3, #1
 8005d66:	2300      	movne	r3, #0
 8005d68:	b2db      	uxtb	r3, r3
 8005d6a:	2b00      	cmp	r3, #0
 8005d6c:	d012      	beq.n	8005d94 <HAL_ADC_Init+0x180>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 8005d6e:	687b      	ldr	r3, [r7, #4]
 8005d70:	681b      	ldr	r3, [r3, #0]
 8005d72:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8005d76:	d004      	beq.n	8005d82 <HAL_ADC_Init+0x16e>
 8005d78:	687b      	ldr	r3, [r7, #4]
 8005d7a:	681b      	ldr	r3, [r3, #0]
 8005d7c:	4a62      	ldr	r2, [pc, #392]	; (8005f08 <HAL_ADC_Init+0x2f4>)
 8005d7e:	4293      	cmp	r3, r2
 8005d80:	d101      	bne.n	8005d86 <HAL_ADC_Init+0x172>
 8005d82:	4a65      	ldr	r2, [pc, #404]	; (8005f18 <HAL_ADC_Init+0x304>)
 8005d84:	e000      	b.n	8005d88 <HAL_ADC_Init+0x174>
 8005d86:	4a65      	ldr	r2, [pc, #404]	; (8005f1c <HAL_ADC_Init+0x308>)
 8005d88:	687b      	ldr	r3, [r7, #4]
 8005d8a:	685b      	ldr	r3, [r3, #4]
 8005d8c:	4619      	mov	r1, r3
 8005d8e:	4610      	mov	r0, r2
 8005d90:	f7ff fd7e 	bl	8005890 <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8005d94:	687b      	ldr	r3, [r7, #4]
 8005d96:	7f5b      	ldrb	r3, [r3, #29]
 8005d98:	035a      	lsls	r2, r3, #13
                hadc->Init.Overrun                                                     |
 8005d9a:	687b      	ldr	r3, [r7, #4]
 8005d9c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8005d9e:	431a      	orrs	r2, r3
                hadc->Init.DataAlign                                                   |
 8005da0:	687b      	ldr	r3, [r7, #4]
 8005da2:	68db      	ldr	r3, [r3, #12]
                hadc->Init.Overrun                                                     |
 8005da4:	431a      	orrs	r2, r3
                hadc->Init.Resolution                                                  |
 8005da6:	687b      	ldr	r3, [r7, #4]
 8005da8:	689b      	ldr	r3, [r3, #8]
                hadc->Init.DataAlign                                                   |
 8005daa:	431a      	orrs	r2, r3
                ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8005dac:	687b      	ldr	r3, [r7, #4]
 8005dae:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8005db2:	041b      	lsls	r3, r3, #16
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8005db4:	4313      	orrs	r3, r2
 8005db6:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8005db8:	687b      	ldr	r3, [r7, #4]
 8005dba:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8005dbe:	2b01      	cmp	r3, #1
 8005dc0:	d106      	bne.n	8005dd0 <HAL_ADC_Init+0x1bc>
    {
      tmpCFGR |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 8005dc2:	687b      	ldr	r3, [r7, #4]
 8005dc4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005dc6:	3b01      	subs	r3, #1
 8005dc8:	045b      	lsls	r3, r3, #17
 8005dca:	69ba      	ldr	r2, [r7, #24]
 8005dcc:	4313      	orrs	r3, r2
 8005dce:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8005dd0:	687b      	ldr	r3, [r7, #4]
 8005dd2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005dd4:	2b00      	cmp	r3, #0
 8005dd6:	d009      	beq.n	8005dec <HAL_ADC_Init+0x1d8>
    {
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8005dd8:	687b      	ldr	r3, [r7, #4]
 8005dda:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005ddc:	f403 7278 	and.w	r2, r3, #992	; 0x3e0
                  | hadc->Init.ExternalTrigConvEdge
 8005de0:	687b      	ldr	r3, [r7, #4]
 8005de2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005de4:	4313      	orrs	r3, r2
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8005de6:	69ba      	ldr	r2, [r7, #24]
 8005de8:	4313      	orrs	r3, r2
 8005dea:	61bb      	str	r3, [r7, #24]
                 );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
 8005dec:	687b      	ldr	r3, [r7, #4]
 8005dee:	681b      	ldr	r3, [r3, #0]
 8005df0:	68da      	ldr	r2, [r3, #12]
 8005df2:	4b4b      	ldr	r3, [pc, #300]	; (8005f20 <HAL_ADC_Init+0x30c>)
 8005df4:	4013      	ands	r3, r2
 8005df6:	687a      	ldr	r2, [r7, #4]
 8005df8:	6812      	ldr	r2, [r2, #0]
 8005dfa:	69b9      	ldr	r1, [r7, #24]
 8005dfc:	430b      	orrs	r3, r1
 8005dfe:	60d3      	str	r3, [r2, #12]

    /* Configuration of sampling mode */
    MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_BULB | ADC_CFGR2_SMPTRIG, hadc->Init.SamplingMode);
 8005e00:	687b      	ldr	r3, [r7, #4]
 8005e02:	681b      	ldr	r3, [r3, #0]
 8005e04:	691b      	ldr	r3, [r3, #16]
 8005e06:	f023 6140 	bic.w	r1, r3, #201326592	; 0xc000000
 8005e0a:	687b      	ldr	r3, [r7, #4]
 8005e0c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005e0e:	687b      	ldr	r3, [r7, #4]
 8005e10:	681b      	ldr	r3, [r3, #0]
 8005e12:	430a      	orrs	r2, r1
 8005e14:	611a      	str	r2, [r3, #16]
    /* conversion on going on regular and injected groups:                    */
    /*  - Gain Compensation               Init.GainCompensation               */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8005e16:	687b      	ldr	r3, [r7, #4]
 8005e18:	681b      	ldr	r3, [r3, #0]
 8005e1a:	4618      	mov	r0, r3
 8005e1c:	f7ff fed3 	bl	8005bc6 <LL_ADC_REG_IsConversionOngoing>
 8005e20:	6138      	str	r0, [r7, #16]
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8005e22:	687b      	ldr	r3, [r7, #4]
 8005e24:	681b      	ldr	r3, [r3, #0]
 8005e26:	4618      	mov	r0, r3
 8005e28:	f7ff fee0 	bl	8005bec <LL_ADC_INJ_IsConversionOngoing>
 8005e2c:	60f8      	str	r0, [r7, #12]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8005e2e:	693b      	ldr	r3, [r7, #16]
 8005e30:	2b00      	cmp	r3, #0
 8005e32:	d17f      	bne.n	8005f34 <HAL_ADC_Init+0x320>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8005e34:	68fb      	ldr	r3, [r7, #12]
 8005e36:	2b00      	cmp	r3, #0
 8005e38:	d17c      	bne.n	8005f34 <HAL_ADC_Init+0x320>
       )
    {
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
                 ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8005e3a:	687b      	ldr	r3, [r7, #4]
 8005e3c:	7f1b      	ldrb	r3, [r3, #28]
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 8005e3e:	039a      	lsls	r2, r3, #14
                 ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 8005e40:	687b      	ldr	r3, [r7, #4]
 8005e42:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8005e46:	005b      	lsls	r3, r3, #1
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 8005e48:	4313      	orrs	r3, r2
 8005e4a:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 8005e4c:	687b      	ldr	r3, [r7, #4]
 8005e4e:	681b      	ldr	r3, [r3, #0]
 8005e50:	68db      	ldr	r3, [r3, #12]
 8005e52:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8005e56:	f023 0302 	bic.w	r3, r3, #2
 8005e5a:	687a      	ldr	r2, [r7, #4]
 8005e5c:	6812      	ldr	r2, [r2, #0]
 8005e5e:	69b9      	ldr	r1, [r7, #24]
 8005e60:	430b      	orrs	r3, r1
 8005e62:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.GainCompensation != 0UL)
 8005e64:	687b      	ldr	r3, [r7, #4]
 8005e66:	691b      	ldr	r3, [r3, #16]
 8005e68:	2b00      	cmp	r3, #0
 8005e6a:	d017      	beq.n	8005e9c <HAL_ADC_Init+0x288>
      {
        SET_BIT(hadc->Instance->CFGR2, ADC_CFGR2_GCOMP);
 8005e6c:	687b      	ldr	r3, [r7, #4]
 8005e6e:	681b      	ldr	r3, [r3, #0]
 8005e70:	691a      	ldr	r2, [r3, #16]
 8005e72:	687b      	ldr	r3, [r7, #4]
 8005e74:	681b      	ldr	r3, [r3, #0]
 8005e76:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 8005e7a:	611a      	str	r2, [r3, #16]
        MODIFY_REG(hadc->Instance->GCOMP, ADC_GCOMP_GCOMPCOEFF, hadc->Init.GainCompensation);
 8005e7c:	687b      	ldr	r3, [r7, #4]
 8005e7e:	681b      	ldr	r3, [r3, #0]
 8005e80:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 8005e84:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 8005e88:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8005e8c:	687a      	ldr	r2, [r7, #4]
 8005e8e:	6911      	ldr	r1, [r2, #16]
 8005e90:	687a      	ldr	r2, [r7, #4]
 8005e92:	6812      	ldr	r2, [r2, #0]
 8005e94:	430b      	orrs	r3, r1
 8005e96:	f8c2 30c0 	str.w	r3, [r2, #192]	; 0xc0
 8005e9a:	e013      	b.n	8005ec4 <HAL_ADC_Init+0x2b0>
      }
      else
      {
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_GCOMP);
 8005e9c:	687b      	ldr	r3, [r7, #4]
 8005e9e:	681b      	ldr	r3, [r3, #0]
 8005ea0:	691a      	ldr	r2, [r3, #16]
 8005ea2:	687b      	ldr	r3, [r7, #4]
 8005ea4:	681b      	ldr	r3, [r3, #0]
 8005ea6:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8005eaa:	611a      	str	r2, [r3, #16]
        MODIFY_REG(hadc->Instance->GCOMP, ADC_GCOMP_GCOMPCOEFF, 0UL);
 8005eac:	687b      	ldr	r3, [r7, #4]
 8005eae:	681b      	ldr	r3, [r3, #0]
 8005eb0:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 8005eb4:	687a      	ldr	r2, [r7, #4]
 8005eb6:	6812      	ldr	r2, [r2, #0]
 8005eb8:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 8005ebc:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8005ec0:	f8c2 30c0 	str.w	r3, [r2, #192]	; 0xc0
      }

      if (hadc->Init.OversamplingMode == ENABLE)
 8005ec4:	687b      	ldr	r3, [r7, #4]
 8005ec6:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8005eca:	2b01      	cmp	r3, #1
 8005ecc:	d12a      	bne.n	8005f24 <HAL_ADC_Init+0x310>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 8005ece:	687b      	ldr	r3, [r7, #4]
 8005ed0:	681b      	ldr	r3, [r3, #0]
 8005ed2:	691b      	ldr	r3, [r3, #16]
 8005ed4:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 8005ed8:	f023 0304 	bic.w	r3, r3, #4
 8005edc:	687a      	ldr	r2, [r7, #4]
 8005ede:	6c51      	ldr	r1, [r2, #68]	; 0x44
 8005ee0:	687a      	ldr	r2, [r7, #4]
 8005ee2:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8005ee4:	4311      	orrs	r1, r2
 8005ee6:	687a      	ldr	r2, [r7, #4]
 8005ee8:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 8005eea:	4311      	orrs	r1, r2
 8005eec:	687a      	ldr	r2, [r7, #4]
 8005eee:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8005ef0:	430a      	orrs	r2, r1
 8005ef2:	431a      	orrs	r2, r3
 8005ef4:	687b      	ldr	r3, [r7, #4]
 8005ef6:	681b      	ldr	r3, [r3, #0]
 8005ef8:	f042 0201 	orr.w	r2, r2, #1
 8005efc:	611a      	str	r2, [r3, #16]
 8005efe:	e019      	b.n	8005f34 <HAL_ADC_Init+0x320>
 8005f00:	200001d4 	.word	0x200001d4
 8005f04:	053e2d63 	.word	0x053e2d63
 8005f08:	50000100 	.word	0x50000100
 8005f0c:	50000400 	.word	0x50000400
 8005f10:	50000500 	.word	0x50000500
 8005f14:	50000600 	.word	0x50000600
 8005f18:	50000300 	.word	0x50000300
 8005f1c:	50000700 	.word	0x50000700
 8005f20:	fff04007 	.word	0xfff04007
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 8005f24:	687b      	ldr	r3, [r7, #4]
 8005f26:	681b      	ldr	r3, [r3, #0]
 8005f28:	691a      	ldr	r2, [r3, #16]
 8005f2a:	687b      	ldr	r3, [r7, #4]
 8005f2c:	681b      	ldr	r3, [r3, #0]
 8005f2e:	f022 0201 	bic.w	r2, r2, #1
 8005f32:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8005f34:	687b      	ldr	r3, [r7, #4]
 8005f36:	695b      	ldr	r3, [r3, #20]
 8005f38:	2b01      	cmp	r3, #1
 8005f3a:	d10c      	bne.n	8005f56 <HAL_ADC_Init+0x342>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 8005f3c:	687b      	ldr	r3, [r7, #4]
 8005f3e:	681b      	ldr	r3, [r3, #0]
 8005f40:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005f42:	f023 010f 	bic.w	r1, r3, #15
 8005f46:	687b      	ldr	r3, [r7, #4]
 8005f48:	6a1b      	ldr	r3, [r3, #32]
 8005f4a:	1e5a      	subs	r2, r3, #1
 8005f4c:	687b      	ldr	r3, [r7, #4]
 8005f4e:	681b      	ldr	r3, [r3, #0]
 8005f50:	430a      	orrs	r2, r1
 8005f52:	631a      	str	r2, [r3, #48]	; 0x30
 8005f54:	e007      	b.n	8005f66 <HAL_ADC_Init+0x352>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8005f56:	687b      	ldr	r3, [r7, #4]
 8005f58:	681b      	ldr	r3, [r3, #0]
 8005f5a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005f5c:	687b      	ldr	r3, [r7, #4]
 8005f5e:	681b      	ldr	r3, [r3, #0]
 8005f60:	f022 020f 	bic.w	r2, r2, #15
 8005f64:	631a      	str	r2, [r3, #48]	; 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 8005f66:	687b      	ldr	r3, [r7, #4]
 8005f68:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005f6a:	f023 0303 	bic.w	r3, r3, #3
 8005f6e:	f043 0201 	orr.w	r2, r3, #1
 8005f72:	687b      	ldr	r3, [r7, #4]
 8005f74:	65da      	str	r2, [r3, #92]	; 0x5c
 8005f76:	e007      	b.n	8005f88 <HAL_ADC_Init+0x374>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8005f78:	687b      	ldr	r3, [r7, #4]
 8005f7a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005f7c:	f043 0210 	orr.w	r2, r3, #16
 8005f80:	687b      	ldr	r3, [r7, #4]
 8005f82:	65da      	str	r2, [r3, #92]	; 0x5c

    tmp_hal_status = HAL_ERROR;
 8005f84:	2301      	movs	r3, #1
 8005f86:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 8005f88:	7ffb      	ldrb	r3, [r7, #31]
}
 8005f8a:	4618      	mov	r0, r3
 8005f8c:	3724      	adds	r7, #36	; 0x24
 8005f8e:	46bd      	mov	sp, r7
 8005f90:	bd90      	pop	{r4, r7, pc}
 8005f92:	bf00      	nop

08005f94 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 8005f94:	b580      	push	{r7, lr}
 8005f96:	b0a6      	sub	sp, #152	; 0x98
 8005f98:	af00      	add	r7, sp, #0
 8005f9a:	6078      	str	r0, [r7, #4]
 8005f9c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8005f9e:	2300      	movs	r3, #0
 8005fa0:	f887 3097 	strb.w	r3, [r7, #151]	; 0x97
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0;
 8005fa4:	2300      	movs	r3, #0
 8005fa6:	60bb      	str	r3, [r7, #8]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, sConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8005fa8:	687b      	ldr	r3, [r7, #4]
 8005faa:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 8005fae:	2b01      	cmp	r3, #1
 8005fb0:	d101      	bne.n	8005fb6 <HAL_ADC_ConfigChannel+0x22>
 8005fb2:	2302      	movs	r3, #2
 8005fb4:	e38e      	b.n	80066d4 <HAL_ADC_ConfigChannel+0x740>
 8005fb6:	687b      	ldr	r3, [r7, #4]
 8005fb8:	2201      	movs	r2, #1
 8005fba:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8005fbe:	687b      	ldr	r3, [r7, #4]
 8005fc0:	681b      	ldr	r3, [r3, #0]
 8005fc2:	4618      	mov	r0, r3
 8005fc4:	f7ff fdff 	bl	8005bc6 <LL_ADC_REG_IsConversionOngoing>
 8005fc8:	4603      	mov	r3, r0
 8005fca:	2b00      	cmp	r3, #0
 8005fcc:	f040 836f 	bne.w	80066ae <HAL_ADC_ConfigChannel+0x71a>
  {
    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, sConfig->Rank, sConfig->Channel);
 8005fd0:	687b      	ldr	r3, [r7, #4]
 8005fd2:	6818      	ldr	r0, [r3, #0]
 8005fd4:	683b      	ldr	r3, [r7, #0]
 8005fd6:	6859      	ldr	r1, [r3, #4]
 8005fd8:	683b      	ldr	r3, [r7, #0]
 8005fda:	681b      	ldr	r3, [r3, #0]
 8005fdc:	461a      	mov	r2, r3
 8005fde:	f7ff fd1c 	bl	8005a1a <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8005fe2:	687b      	ldr	r3, [r7, #4]
 8005fe4:	681b      	ldr	r3, [r3, #0]
 8005fe6:	4618      	mov	r0, r3
 8005fe8:	f7ff fded 	bl	8005bc6 <LL_ADC_REG_IsConversionOngoing>
 8005fec:	f8c7 0090 	str.w	r0, [r7, #144]	; 0x90
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8005ff0:	687b      	ldr	r3, [r7, #4]
 8005ff2:	681b      	ldr	r3, [r3, #0]
 8005ff4:	4618      	mov	r0, r3
 8005ff6:	f7ff fdf9 	bl	8005bec <LL_ADC_INJ_IsConversionOngoing>
 8005ffa:	f8c7 008c 	str.w	r0, [r7, #140]	; 0x8c
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8005ffe:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8006002:	2b00      	cmp	r3, #0
 8006004:	f040 817b 	bne.w	80062fe <HAL_ADC_ConfigChannel+0x36a>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8006008:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800600c:	2b00      	cmp	r3, #0
 800600e:	f040 8176 	bne.w	80062fe <HAL_ADC_ConfigChannel+0x36a>
       )
    {
      /* Manage specific case of sampling time 3.5 cycles replacing 2.5 cyles */
      if (sConfig->SamplingTime == ADC_SAMPLETIME_3CYCLES_5)
 8006012:	683b      	ldr	r3, [r7, #0]
 8006014:	689b      	ldr	r3, [r3, #8]
 8006016:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800601a:	d10f      	bne.n	800603c <HAL_ADC_ConfigChannel+0xa8>
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, LL_ADC_SAMPLINGTIME_2CYCLES_5);
 800601c:	687b      	ldr	r3, [r7, #4]
 800601e:	6818      	ldr	r0, [r3, #0]
 8006020:	683b      	ldr	r3, [r7, #0]
 8006022:	681b      	ldr	r3, [r3, #0]
 8006024:	2200      	movs	r2, #0
 8006026:	4619      	mov	r1, r3
 8006028:	f7ff fd20 	bl	8005a6c <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5);
 800602c:	687b      	ldr	r3, [r7, #4]
 800602e:	681b      	ldr	r3, [r3, #0]
 8006030:	f04f 4100 	mov.w	r1, #2147483648	; 0x80000000
 8006034:	4618      	mov	r0, r3
 8006036:	f7ff fcdd 	bl	80059f4 <LL_ADC_SetSamplingTimeCommonConfig>
 800603a:	e00e      	b.n	800605a <HAL_ADC_ConfigChannel+0xc6>
      }
      else
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, sConfig->SamplingTime);
 800603c:	687b      	ldr	r3, [r7, #4]
 800603e:	6818      	ldr	r0, [r3, #0]
 8006040:	683b      	ldr	r3, [r7, #0]
 8006042:	6819      	ldr	r1, [r3, #0]
 8006044:	683b      	ldr	r3, [r7, #0]
 8006046:	689b      	ldr	r3, [r3, #8]
 8006048:	461a      	mov	r2, r3
 800604a:	f7ff fd0f 	bl	8005a6c <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
 800604e:	687b      	ldr	r3, [r7, #4]
 8006050:	681b      	ldr	r3, [r3, #0]
 8006052:	2100      	movs	r1, #0
 8006054:	4618      	mov	r0, r3
 8006056:	f7ff fccd 	bl	80059f4 <LL_ADC_SetSamplingTimeCommonConfig>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 800605a:	683b      	ldr	r3, [r7, #0]
 800605c:	695a      	ldr	r2, [r3, #20]
 800605e:	687b      	ldr	r3, [r7, #4]
 8006060:	681b      	ldr	r3, [r3, #0]
 8006062:	68db      	ldr	r3, [r3, #12]
 8006064:	08db      	lsrs	r3, r3, #3
 8006066:	f003 0303 	and.w	r3, r3, #3
 800606a:	005b      	lsls	r3, r3, #1
 800606c:	fa02 f303 	lsl.w	r3, r2, r3
 8006070:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88

      if (sConfig->OffsetNumber != ADC_OFFSET_NONE)
 8006074:	683b      	ldr	r3, [r7, #0]
 8006076:	691b      	ldr	r3, [r3, #16]
 8006078:	2b04      	cmp	r3, #4
 800607a:	d022      	beq.n	80060c2 <HAL_ADC_ConfigChannel+0x12e>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, sConfig->OffsetNumber, sConfig->Channel, tmpOffsetShifted);
 800607c:	687b      	ldr	r3, [r7, #4]
 800607e:	6818      	ldr	r0, [r3, #0]
 8006080:	683b      	ldr	r3, [r7, #0]
 8006082:	6919      	ldr	r1, [r3, #16]
 8006084:	683b      	ldr	r3, [r7, #0]
 8006086:	681a      	ldr	r2, [r3, #0]
 8006088:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800608c:	f7ff fc34 	bl	80058f8 <LL_ADC_SetOffset>

        assert_param(IS_ADC_OFFSET_SIGN(sConfig->OffsetSign));
        assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetSaturation));
        /* Set ADC selected offset sign & saturation */
        LL_ADC_SetOffsetSign(hadc->Instance, sConfig->OffsetNumber, sConfig->OffsetSign);
 8006090:	687b      	ldr	r3, [r7, #4]
 8006092:	6818      	ldr	r0, [r3, #0]
 8006094:	683b      	ldr	r3, [r7, #0]
 8006096:	6919      	ldr	r1, [r3, #16]
 8006098:	683b      	ldr	r3, [r7, #0]
 800609a:	699b      	ldr	r3, [r3, #24]
 800609c:	461a      	mov	r2, r3
 800609e:	f7ff fc79 	bl	8005994 <LL_ADC_SetOffsetSign>
        LL_ADC_SetOffsetSaturation(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetSaturation == ENABLE) ? LL_ADC_OFFSET_SATURATION_ENABLE : LL_ADC_OFFSET_SATURATION_DISABLE);
 80060a2:	687b      	ldr	r3, [r7, #4]
 80060a4:	6818      	ldr	r0, [r3, #0]
 80060a6:	683b      	ldr	r3, [r7, #0]
 80060a8:	6919      	ldr	r1, [r3, #16]
 80060aa:	683b      	ldr	r3, [r7, #0]
 80060ac:	7f1b      	ldrb	r3, [r3, #28]
 80060ae:	2b01      	cmp	r3, #1
 80060b0:	d102      	bne.n	80060b8 <HAL_ADC_ConfigChannel+0x124>
 80060b2:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80060b6:	e000      	b.n	80060ba <HAL_ADC_ConfigChannel+0x126>
 80060b8:	2300      	movs	r3, #0
 80060ba:	461a      	mov	r2, r3
 80060bc:	f7ff fc82 	bl	80059c4 <LL_ADC_SetOffsetSaturation>
 80060c0:	e11d      	b.n	80062fe <HAL_ADC_ConfigChannel+0x36a>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if(__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 80060c2:	687b      	ldr	r3, [r7, #4]
 80060c4:	681b      	ldr	r3, [r3, #0]
 80060c6:	2100      	movs	r1, #0
 80060c8:	4618      	mov	r0, r3
 80060ca:	f7ff fc37 	bl	800593c <LL_ADC_GetOffsetChannel>
 80060ce:	4603      	mov	r3, r0
 80060d0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80060d4:	2b00      	cmp	r3, #0
 80060d6:	d10a      	bne.n	80060ee <HAL_ADC_ConfigChannel+0x15a>
 80060d8:	687b      	ldr	r3, [r7, #4]
 80060da:	681b      	ldr	r3, [r3, #0]
 80060dc:	2100      	movs	r1, #0
 80060de:	4618      	mov	r0, r3
 80060e0:	f7ff fc2c 	bl	800593c <LL_ADC_GetOffsetChannel>
 80060e4:	4603      	mov	r3, r0
 80060e6:	0e9b      	lsrs	r3, r3, #26
 80060e8:	f003 021f 	and.w	r2, r3, #31
 80060ec:	e012      	b.n	8006114 <HAL_ADC_ConfigChannel+0x180>
 80060ee:	687b      	ldr	r3, [r7, #4]
 80060f0:	681b      	ldr	r3, [r3, #0]
 80060f2:	2100      	movs	r1, #0
 80060f4:	4618      	mov	r0, r3
 80060f6:	f7ff fc21 	bl	800593c <LL_ADC_GetOffsetChannel>
 80060fa:	4603      	mov	r3, r0
 80060fc:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006100:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8006104:	fa93 f3a3 	rbit	r3, r3
 8006108:	67fb      	str	r3, [r7, #124]	; 0x7c
  return result;
 800610a:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800610c:	fab3 f383 	clz	r3, r3
 8006110:	b2db      	uxtb	r3, r3
 8006112:	461a      	mov	r2, r3
 8006114:	683b      	ldr	r3, [r7, #0]
 8006116:	681b      	ldr	r3, [r3, #0]
 8006118:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800611c:	2b00      	cmp	r3, #0
 800611e:	d105      	bne.n	800612c <HAL_ADC_ConfigChannel+0x198>
 8006120:	683b      	ldr	r3, [r7, #0]
 8006122:	681b      	ldr	r3, [r3, #0]
 8006124:	0e9b      	lsrs	r3, r3, #26
 8006126:	f003 031f 	and.w	r3, r3, #31
 800612a:	e00a      	b.n	8006142 <HAL_ADC_ConfigChannel+0x1ae>
 800612c:	683b      	ldr	r3, [r7, #0]
 800612e:	681b      	ldr	r3, [r3, #0]
 8006130:	67bb      	str	r3, [r7, #120]	; 0x78
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006132:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8006134:	fa93 f3a3 	rbit	r3, r3
 8006138:	677b      	str	r3, [r7, #116]	; 0x74
  return result;
 800613a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800613c:	fab3 f383 	clz	r3, r3
 8006140:	b2db      	uxtb	r3, r3
 8006142:	429a      	cmp	r2, r3
 8006144:	d106      	bne.n	8006154 <HAL_ADC_ConfigChannel+0x1c0>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 8006146:	687b      	ldr	r3, [r7, #4]
 8006148:	681b      	ldr	r3, [r3, #0]
 800614a:	2200      	movs	r2, #0
 800614c:	2100      	movs	r1, #0
 800614e:	4618      	mov	r0, r3
 8006150:	f7ff fc08 	bl	8005964 <LL_ADC_SetOffsetState>
        }
        if(__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8006154:	687b      	ldr	r3, [r7, #4]
 8006156:	681b      	ldr	r3, [r3, #0]
 8006158:	2101      	movs	r1, #1
 800615a:	4618      	mov	r0, r3
 800615c:	f7ff fbee 	bl	800593c <LL_ADC_GetOffsetChannel>
 8006160:	4603      	mov	r3, r0
 8006162:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8006166:	2b00      	cmp	r3, #0
 8006168:	d10a      	bne.n	8006180 <HAL_ADC_ConfigChannel+0x1ec>
 800616a:	687b      	ldr	r3, [r7, #4]
 800616c:	681b      	ldr	r3, [r3, #0]
 800616e:	2101      	movs	r1, #1
 8006170:	4618      	mov	r0, r3
 8006172:	f7ff fbe3 	bl	800593c <LL_ADC_GetOffsetChannel>
 8006176:	4603      	mov	r3, r0
 8006178:	0e9b      	lsrs	r3, r3, #26
 800617a:	f003 021f 	and.w	r2, r3, #31
 800617e:	e010      	b.n	80061a2 <HAL_ADC_ConfigChannel+0x20e>
 8006180:	687b      	ldr	r3, [r7, #4]
 8006182:	681b      	ldr	r3, [r3, #0]
 8006184:	2101      	movs	r1, #1
 8006186:	4618      	mov	r0, r3
 8006188:	f7ff fbd8 	bl	800593c <LL_ADC_GetOffsetChannel>
 800618c:	4603      	mov	r3, r0
 800618e:	673b      	str	r3, [r7, #112]	; 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006190:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8006192:	fa93 f3a3 	rbit	r3, r3
 8006196:	66fb      	str	r3, [r7, #108]	; 0x6c
  return result;
 8006198:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800619a:	fab3 f383 	clz	r3, r3
 800619e:	b2db      	uxtb	r3, r3
 80061a0:	461a      	mov	r2, r3
 80061a2:	683b      	ldr	r3, [r7, #0]
 80061a4:	681b      	ldr	r3, [r3, #0]
 80061a6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80061aa:	2b00      	cmp	r3, #0
 80061ac:	d105      	bne.n	80061ba <HAL_ADC_ConfigChannel+0x226>
 80061ae:	683b      	ldr	r3, [r7, #0]
 80061b0:	681b      	ldr	r3, [r3, #0]
 80061b2:	0e9b      	lsrs	r3, r3, #26
 80061b4:	f003 031f 	and.w	r3, r3, #31
 80061b8:	e00a      	b.n	80061d0 <HAL_ADC_ConfigChannel+0x23c>
 80061ba:	683b      	ldr	r3, [r7, #0]
 80061bc:	681b      	ldr	r3, [r3, #0]
 80061be:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80061c0:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80061c2:	fa93 f3a3 	rbit	r3, r3
 80061c6:	667b      	str	r3, [r7, #100]	; 0x64
  return result;
 80061c8:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80061ca:	fab3 f383 	clz	r3, r3
 80061ce:	b2db      	uxtb	r3, r3
 80061d0:	429a      	cmp	r2, r3
 80061d2:	d106      	bne.n	80061e2 <HAL_ADC_ConfigChannel+0x24e>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 80061d4:	687b      	ldr	r3, [r7, #4]
 80061d6:	681b      	ldr	r3, [r3, #0]
 80061d8:	2200      	movs	r2, #0
 80061da:	2101      	movs	r1, #1
 80061dc:	4618      	mov	r0, r3
 80061de:	f7ff fbc1 	bl	8005964 <LL_ADC_SetOffsetState>
        }
        if(__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 80061e2:	687b      	ldr	r3, [r7, #4]
 80061e4:	681b      	ldr	r3, [r3, #0]
 80061e6:	2102      	movs	r1, #2
 80061e8:	4618      	mov	r0, r3
 80061ea:	f7ff fba7 	bl	800593c <LL_ADC_GetOffsetChannel>
 80061ee:	4603      	mov	r3, r0
 80061f0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80061f4:	2b00      	cmp	r3, #0
 80061f6:	d10a      	bne.n	800620e <HAL_ADC_ConfigChannel+0x27a>
 80061f8:	687b      	ldr	r3, [r7, #4]
 80061fa:	681b      	ldr	r3, [r3, #0]
 80061fc:	2102      	movs	r1, #2
 80061fe:	4618      	mov	r0, r3
 8006200:	f7ff fb9c 	bl	800593c <LL_ADC_GetOffsetChannel>
 8006204:	4603      	mov	r3, r0
 8006206:	0e9b      	lsrs	r3, r3, #26
 8006208:	f003 021f 	and.w	r2, r3, #31
 800620c:	e010      	b.n	8006230 <HAL_ADC_ConfigChannel+0x29c>
 800620e:	687b      	ldr	r3, [r7, #4]
 8006210:	681b      	ldr	r3, [r3, #0]
 8006212:	2102      	movs	r1, #2
 8006214:	4618      	mov	r0, r3
 8006216:	f7ff fb91 	bl	800593c <LL_ADC_GetOffsetChannel>
 800621a:	4603      	mov	r3, r0
 800621c:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800621e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8006220:	fa93 f3a3 	rbit	r3, r3
 8006224:	65fb      	str	r3, [r7, #92]	; 0x5c
  return result;
 8006226:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8006228:	fab3 f383 	clz	r3, r3
 800622c:	b2db      	uxtb	r3, r3
 800622e:	461a      	mov	r2, r3
 8006230:	683b      	ldr	r3, [r7, #0]
 8006232:	681b      	ldr	r3, [r3, #0]
 8006234:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8006238:	2b00      	cmp	r3, #0
 800623a:	d105      	bne.n	8006248 <HAL_ADC_ConfigChannel+0x2b4>
 800623c:	683b      	ldr	r3, [r7, #0]
 800623e:	681b      	ldr	r3, [r3, #0]
 8006240:	0e9b      	lsrs	r3, r3, #26
 8006242:	f003 031f 	and.w	r3, r3, #31
 8006246:	e00a      	b.n	800625e <HAL_ADC_ConfigChannel+0x2ca>
 8006248:	683b      	ldr	r3, [r7, #0]
 800624a:	681b      	ldr	r3, [r3, #0]
 800624c:	65bb      	str	r3, [r7, #88]	; 0x58
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800624e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8006250:	fa93 f3a3 	rbit	r3, r3
 8006254:	657b      	str	r3, [r7, #84]	; 0x54
  return result;
 8006256:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8006258:	fab3 f383 	clz	r3, r3
 800625c:	b2db      	uxtb	r3, r3
 800625e:	429a      	cmp	r2, r3
 8006260:	d106      	bne.n	8006270 <HAL_ADC_ConfigChannel+0x2dc>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 8006262:	687b      	ldr	r3, [r7, #4]
 8006264:	681b      	ldr	r3, [r3, #0]
 8006266:	2200      	movs	r2, #0
 8006268:	2102      	movs	r1, #2
 800626a:	4618      	mov	r0, r3
 800626c:	f7ff fb7a 	bl	8005964 <LL_ADC_SetOffsetState>
        }
        if(__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8006270:	687b      	ldr	r3, [r7, #4]
 8006272:	681b      	ldr	r3, [r3, #0]
 8006274:	2103      	movs	r1, #3
 8006276:	4618      	mov	r0, r3
 8006278:	f7ff fb60 	bl	800593c <LL_ADC_GetOffsetChannel>
 800627c:	4603      	mov	r3, r0
 800627e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8006282:	2b00      	cmp	r3, #0
 8006284:	d10a      	bne.n	800629c <HAL_ADC_ConfigChannel+0x308>
 8006286:	687b      	ldr	r3, [r7, #4]
 8006288:	681b      	ldr	r3, [r3, #0]
 800628a:	2103      	movs	r1, #3
 800628c:	4618      	mov	r0, r3
 800628e:	f7ff fb55 	bl	800593c <LL_ADC_GetOffsetChannel>
 8006292:	4603      	mov	r3, r0
 8006294:	0e9b      	lsrs	r3, r3, #26
 8006296:	f003 021f 	and.w	r2, r3, #31
 800629a:	e010      	b.n	80062be <HAL_ADC_ConfigChannel+0x32a>
 800629c:	687b      	ldr	r3, [r7, #4]
 800629e:	681b      	ldr	r3, [r3, #0]
 80062a0:	2103      	movs	r1, #3
 80062a2:	4618      	mov	r0, r3
 80062a4:	f7ff fb4a 	bl	800593c <LL_ADC_GetOffsetChannel>
 80062a8:	4603      	mov	r3, r0
 80062aa:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80062ac:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80062ae:	fa93 f3a3 	rbit	r3, r3
 80062b2:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 80062b4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80062b6:	fab3 f383 	clz	r3, r3
 80062ba:	b2db      	uxtb	r3, r3
 80062bc:	461a      	mov	r2, r3
 80062be:	683b      	ldr	r3, [r7, #0]
 80062c0:	681b      	ldr	r3, [r3, #0]
 80062c2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80062c6:	2b00      	cmp	r3, #0
 80062c8:	d105      	bne.n	80062d6 <HAL_ADC_ConfigChannel+0x342>
 80062ca:	683b      	ldr	r3, [r7, #0]
 80062cc:	681b      	ldr	r3, [r3, #0]
 80062ce:	0e9b      	lsrs	r3, r3, #26
 80062d0:	f003 031f 	and.w	r3, r3, #31
 80062d4:	e00a      	b.n	80062ec <HAL_ADC_ConfigChannel+0x358>
 80062d6:	683b      	ldr	r3, [r7, #0]
 80062d8:	681b      	ldr	r3, [r3, #0]
 80062da:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80062dc:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80062de:	fa93 f3a3 	rbit	r3, r3
 80062e2:	647b      	str	r3, [r7, #68]	; 0x44
  return result;
 80062e4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80062e6:	fab3 f383 	clz	r3, r3
 80062ea:	b2db      	uxtb	r3, r3
 80062ec:	429a      	cmp	r2, r3
 80062ee:	d106      	bne.n	80062fe <HAL_ADC_ConfigChannel+0x36a>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 80062f0:	687b      	ldr	r3, [r7, #4]
 80062f2:	681b      	ldr	r3, [r3, #0]
 80062f4:	2200      	movs	r2, #0
 80062f6:	2103      	movs	r1, #3
 80062f8:	4618      	mov	r0, r3
 80062fa:	f7ff fb33 	bl	8005964 <LL_ADC_SetOffsetState>
    }

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80062fe:	687b      	ldr	r3, [r7, #4]
 8006300:	681b      	ldr	r3, [r3, #0]
 8006302:	4618      	mov	r0, r3
 8006304:	f7ff fc4c 	bl	8005ba0 <LL_ADC_IsEnabled>
 8006308:	4603      	mov	r3, r0
 800630a:	2b00      	cmp	r3, #0
 800630c:	f040 810c 	bne.w	8006528 <HAL_ADC_ConfigChannel+0x594>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfig->Channel, sConfig->SingleDiff);
 8006310:	687b      	ldr	r3, [r7, #4]
 8006312:	6818      	ldr	r0, [r3, #0]
 8006314:	683b      	ldr	r3, [r7, #0]
 8006316:	6819      	ldr	r1, [r3, #0]
 8006318:	683b      	ldr	r3, [r7, #0]
 800631a:	68db      	ldr	r3, [r3, #12]
 800631c:	461a      	mov	r2, r3
 800631e:	f7ff fbcd 	bl	8005abc <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (sConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 8006322:	683b      	ldr	r3, [r7, #0]
 8006324:	68db      	ldr	r3, [r3, #12]
 8006326:	4aaf      	ldr	r2, [pc, #700]	; (80065e4 <HAL_ADC_ConfigChannel+0x650>)
 8006328:	4293      	cmp	r3, r2
 800632a:	f040 80fd 	bne.w	8006528 <HAL_ADC_ConfigChannel+0x594>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 800632e:	687b      	ldr	r3, [r7, #4]
 8006330:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8006332:	683b      	ldr	r3, [r7, #0]
 8006334:	681b      	ldr	r3, [r3, #0]
 8006336:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800633a:	2b00      	cmp	r3, #0
 800633c:	d10b      	bne.n	8006356 <HAL_ADC_ConfigChannel+0x3c2>
 800633e:	683b      	ldr	r3, [r7, #0]
 8006340:	681b      	ldr	r3, [r3, #0]
 8006342:	0e9b      	lsrs	r3, r3, #26
 8006344:	3301      	adds	r3, #1
 8006346:	f003 031f 	and.w	r3, r3, #31
 800634a:	2b09      	cmp	r3, #9
 800634c:	bf94      	ite	ls
 800634e:	2301      	movls	r3, #1
 8006350:	2300      	movhi	r3, #0
 8006352:	b2db      	uxtb	r3, r3
 8006354:	e012      	b.n	800637c <HAL_ADC_ConfigChannel+0x3e8>
 8006356:	683b      	ldr	r3, [r7, #0]
 8006358:	681b      	ldr	r3, [r3, #0]
 800635a:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800635c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800635e:	fa93 f3a3 	rbit	r3, r3
 8006362:	63fb      	str	r3, [r7, #60]	; 0x3c
  return result;
 8006364:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006366:	fab3 f383 	clz	r3, r3
 800636a:	b2db      	uxtb	r3, r3
 800636c:	3301      	adds	r3, #1
 800636e:	f003 031f 	and.w	r3, r3, #31
 8006372:	2b09      	cmp	r3, #9
 8006374:	bf94      	ite	ls
 8006376:	2301      	movls	r3, #1
 8006378:	2300      	movhi	r3, #0
 800637a:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 800637c:	2b00      	cmp	r3, #0
 800637e:	d064      	beq.n	800644a <HAL_ADC_ConfigChannel+0x4b6>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8006380:	683b      	ldr	r3, [r7, #0]
 8006382:	681b      	ldr	r3, [r3, #0]
 8006384:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8006388:	2b00      	cmp	r3, #0
 800638a:	d107      	bne.n	800639c <HAL_ADC_ConfigChannel+0x408>
 800638c:	683b      	ldr	r3, [r7, #0]
 800638e:	681b      	ldr	r3, [r3, #0]
 8006390:	0e9b      	lsrs	r3, r3, #26
 8006392:	3301      	adds	r3, #1
 8006394:	069b      	lsls	r3, r3, #26
 8006396:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 800639a:	e00e      	b.n	80063ba <HAL_ADC_ConfigChannel+0x426>
 800639c:	683b      	ldr	r3, [r7, #0]
 800639e:	681b      	ldr	r3, [r3, #0]
 80063a0:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80063a2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80063a4:	fa93 f3a3 	rbit	r3, r3
 80063a8:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 80063aa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80063ac:	fab3 f383 	clz	r3, r3
 80063b0:	b2db      	uxtb	r3, r3
 80063b2:	3301      	adds	r3, #1
 80063b4:	069b      	lsls	r3, r3, #26
 80063b6:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80063ba:	683b      	ldr	r3, [r7, #0]
 80063bc:	681b      	ldr	r3, [r3, #0]
 80063be:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80063c2:	2b00      	cmp	r3, #0
 80063c4:	d109      	bne.n	80063da <HAL_ADC_ConfigChannel+0x446>
 80063c6:	683b      	ldr	r3, [r7, #0]
 80063c8:	681b      	ldr	r3, [r3, #0]
 80063ca:	0e9b      	lsrs	r3, r3, #26
 80063cc:	3301      	adds	r3, #1
 80063ce:	f003 031f 	and.w	r3, r3, #31
 80063d2:	2101      	movs	r1, #1
 80063d4:	fa01 f303 	lsl.w	r3, r1, r3
 80063d8:	e010      	b.n	80063fc <HAL_ADC_ConfigChannel+0x468>
 80063da:	683b      	ldr	r3, [r7, #0]
 80063dc:	681b      	ldr	r3, [r3, #0]
 80063de:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80063e0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80063e2:	fa93 f3a3 	rbit	r3, r3
 80063e6:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 80063e8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80063ea:	fab3 f383 	clz	r3, r3
 80063ee:	b2db      	uxtb	r3, r3
 80063f0:	3301      	adds	r3, #1
 80063f2:	f003 031f 	and.w	r3, r3, #31
 80063f6:	2101      	movs	r1, #1
 80063f8:	fa01 f303 	lsl.w	r3, r1, r3
 80063fc:	ea42 0103 	orr.w	r1, r2, r3
 8006400:	683b      	ldr	r3, [r7, #0]
 8006402:	681b      	ldr	r3, [r3, #0]
 8006404:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8006408:	2b00      	cmp	r3, #0
 800640a:	d10a      	bne.n	8006422 <HAL_ADC_ConfigChannel+0x48e>
 800640c:	683b      	ldr	r3, [r7, #0]
 800640e:	681b      	ldr	r3, [r3, #0]
 8006410:	0e9b      	lsrs	r3, r3, #26
 8006412:	3301      	adds	r3, #1
 8006414:	f003 021f 	and.w	r2, r3, #31
 8006418:	4613      	mov	r3, r2
 800641a:	005b      	lsls	r3, r3, #1
 800641c:	4413      	add	r3, r2
 800641e:	051b      	lsls	r3, r3, #20
 8006420:	e011      	b.n	8006446 <HAL_ADC_ConfigChannel+0x4b2>
 8006422:	683b      	ldr	r3, [r7, #0]
 8006424:	681b      	ldr	r3, [r3, #0]
 8006426:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006428:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800642a:	fa93 f3a3 	rbit	r3, r3
 800642e:	627b      	str	r3, [r7, #36]	; 0x24
  return result;
 8006430:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006432:	fab3 f383 	clz	r3, r3
 8006436:	b2db      	uxtb	r3, r3
 8006438:	3301      	adds	r3, #1
 800643a:	f003 021f 	and.w	r2, r3, #31
 800643e:	4613      	mov	r3, r2
 8006440:	005b      	lsls	r3, r3, #1
 8006442:	4413      	add	r3, r2
 8006444:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8006446:	430b      	orrs	r3, r1
 8006448:	e069      	b.n	800651e <HAL_ADC_ConfigChannel+0x58a>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 800644a:	683b      	ldr	r3, [r7, #0]
 800644c:	681b      	ldr	r3, [r3, #0]
 800644e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8006452:	2b00      	cmp	r3, #0
 8006454:	d107      	bne.n	8006466 <HAL_ADC_ConfigChannel+0x4d2>
 8006456:	683b      	ldr	r3, [r7, #0]
 8006458:	681b      	ldr	r3, [r3, #0]
 800645a:	0e9b      	lsrs	r3, r3, #26
 800645c:	3301      	adds	r3, #1
 800645e:	069b      	lsls	r3, r3, #26
 8006460:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8006464:	e00e      	b.n	8006484 <HAL_ADC_ConfigChannel+0x4f0>
 8006466:	683b      	ldr	r3, [r7, #0]
 8006468:	681b      	ldr	r3, [r3, #0]
 800646a:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800646c:	6a3b      	ldr	r3, [r7, #32]
 800646e:	fa93 f3a3 	rbit	r3, r3
 8006472:	61fb      	str	r3, [r7, #28]
  return result;
 8006474:	69fb      	ldr	r3, [r7, #28]
 8006476:	fab3 f383 	clz	r3, r3
 800647a:	b2db      	uxtb	r3, r3
 800647c:	3301      	adds	r3, #1
 800647e:	069b      	lsls	r3, r3, #26
 8006480:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8006484:	683b      	ldr	r3, [r7, #0]
 8006486:	681b      	ldr	r3, [r3, #0]
 8006488:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800648c:	2b00      	cmp	r3, #0
 800648e:	d109      	bne.n	80064a4 <HAL_ADC_ConfigChannel+0x510>
 8006490:	683b      	ldr	r3, [r7, #0]
 8006492:	681b      	ldr	r3, [r3, #0]
 8006494:	0e9b      	lsrs	r3, r3, #26
 8006496:	3301      	adds	r3, #1
 8006498:	f003 031f 	and.w	r3, r3, #31
 800649c:	2101      	movs	r1, #1
 800649e:	fa01 f303 	lsl.w	r3, r1, r3
 80064a2:	e010      	b.n	80064c6 <HAL_ADC_ConfigChannel+0x532>
 80064a4:	683b      	ldr	r3, [r7, #0]
 80064a6:	681b      	ldr	r3, [r3, #0]
 80064a8:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80064aa:	69bb      	ldr	r3, [r7, #24]
 80064ac:	fa93 f3a3 	rbit	r3, r3
 80064b0:	617b      	str	r3, [r7, #20]
  return result;
 80064b2:	697b      	ldr	r3, [r7, #20]
 80064b4:	fab3 f383 	clz	r3, r3
 80064b8:	b2db      	uxtb	r3, r3
 80064ba:	3301      	adds	r3, #1
 80064bc:	f003 031f 	and.w	r3, r3, #31
 80064c0:	2101      	movs	r1, #1
 80064c2:	fa01 f303 	lsl.w	r3, r1, r3
 80064c6:	ea42 0103 	orr.w	r1, r2, r3
 80064ca:	683b      	ldr	r3, [r7, #0]
 80064cc:	681b      	ldr	r3, [r3, #0]
 80064ce:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80064d2:	2b00      	cmp	r3, #0
 80064d4:	d10d      	bne.n	80064f2 <HAL_ADC_ConfigChannel+0x55e>
 80064d6:	683b      	ldr	r3, [r7, #0]
 80064d8:	681b      	ldr	r3, [r3, #0]
 80064da:	0e9b      	lsrs	r3, r3, #26
 80064dc:	3301      	adds	r3, #1
 80064de:	f003 021f 	and.w	r2, r3, #31
 80064e2:	4613      	mov	r3, r2
 80064e4:	005b      	lsls	r3, r3, #1
 80064e6:	4413      	add	r3, r2
 80064e8:	3b1e      	subs	r3, #30
 80064ea:	051b      	lsls	r3, r3, #20
 80064ec:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80064f0:	e014      	b.n	800651c <HAL_ADC_ConfigChannel+0x588>
 80064f2:	683b      	ldr	r3, [r7, #0]
 80064f4:	681b      	ldr	r3, [r3, #0]
 80064f6:	613b      	str	r3, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80064f8:	693b      	ldr	r3, [r7, #16]
 80064fa:	fa93 f3a3 	rbit	r3, r3
 80064fe:	60fb      	str	r3, [r7, #12]
  return result;
 8006500:	68fb      	ldr	r3, [r7, #12]
 8006502:	fab3 f383 	clz	r3, r3
 8006506:	b2db      	uxtb	r3, r3
 8006508:	3301      	adds	r3, #1
 800650a:	f003 021f 	and.w	r2, r3, #31
 800650e:	4613      	mov	r3, r2
 8006510:	005b      	lsls	r3, r3, #1
 8006512:	4413      	add	r3, r2
 8006514:	3b1e      	subs	r3, #30
 8006516:	051b      	lsls	r3, r3, #20
 8006518:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 800651c:	430b      	orrs	r3, r1
 800651e:	683a      	ldr	r2, [r7, #0]
 8006520:	6892      	ldr	r2, [r2, #8]
 8006522:	4619      	mov	r1, r3
 8006524:	f7ff faa2 	bl	8005a6c <LL_ADC_SetChannelSamplingTime>
    /* If internal channel selected, enable dedicated internal buffers and    */
    /* paths.                                                                 */
    /* Note: these internal measurement paths can be disabled using           */
    /* HAL_ADC_DeInit().                                                      */

    if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 8006528:	683b      	ldr	r3, [r7, #0]
 800652a:	681a      	ldr	r2, [r3, #0]
 800652c:	4b2e      	ldr	r3, [pc, #184]	; (80065e8 <HAL_ADC_ConfigChannel+0x654>)
 800652e:	4013      	ands	r3, r2
 8006530:	2b00      	cmp	r3, #0
 8006532:	f000 80c9 	beq.w	80066c8 <HAL_ADC_ConfigChannel+0x734>
    {
      tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8006536:	687b      	ldr	r3, [r7, #4]
 8006538:	681b      	ldr	r3, [r3, #0]
 800653a:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800653e:	d004      	beq.n	800654a <HAL_ADC_ConfigChannel+0x5b6>
 8006540:	687b      	ldr	r3, [r7, #4]
 8006542:	681b      	ldr	r3, [r3, #0]
 8006544:	4a29      	ldr	r2, [pc, #164]	; (80065ec <HAL_ADC_ConfigChannel+0x658>)
 8006546:	4293      	cmp	r3, r2
 8006548:	d101      	bne.n	800654e <HAL_ADC_ConfigChannel+0x5ba>
 800654a:	4b29      	ldr	r3, [pc, #164]	; (80065f0 <HAL_ADC_ConfigChannel+0x65c>)
 800654c:	e000      	b.n	8006550 <HAL_ADC_ConfigChannel+0x5bc>
 800654e:	4b29      	ldr	r3, [pc, #164]	; (80065f4 <HAL_ADC_ConfigChannel+0x660>)
 8006550:	4618      	mov	r0, r3
 8006552:	f7ff f9c3 	bl	80058dc <LL_ADC_GetCommonPathInternalCh>
 8006556:	f8c7 0084 	str.w	r0, [r7, #132]	; 0x84

      /* If the requested internal measurement path has already been enabled, */
      /* bypass the configuration processing.                                 */
      if (((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR_ADC1) || (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR_ADC5))
 800655a:	683b      	ldr	r3, [r7, #0]
 800655c:	681b      	ldr	r3, [r3, #0]
 800655e:	4a26      	ldr	r2, [pc, #152]	; (80065f8 <HAL_ADC_ConfigChannel+0x664>)
 8006560:	4293      	cmp	r3, r2
 8006562:	d004      	beq.n	800656e <HAL_ADC_ConfigChannel+0x5da>
 8006564:	683b      	ldr	r3, [r7, #0]
 8006566:	681b      	ldr	r3, [r3, #0]
 8006568:	4a24      	ldr	r2, [pc, #144]	; (80065fc <HAL_ADC_ConfigChannel+0x668>)
 800656a:	4293      	cmp	r3, r2
 800656c:	d14e      	bne.n	800660c <HAL_ADC_ConfigChannel+0x678>
          && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 800656e:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8006572:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8006576:	2b00      	cmp	r3, #0
 8006578:	d148      	bne.n	800660c <HAL_ADC_ConfigChannel+0x678>
      {
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 800657a:	687b      	ldr	r3, [r7, #4]
 800657c:	681b      	ldr	r3, [r3, #0]
 800657e:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8006582:	d005      	beq.n	8006590 <HAL_ADC_ConfigChannel+0x5fc>
 8006584:	687b      	ldr	r3, [r7, #4]
 8006586:	681b      	ldr	r3, [r3, #0]
 8006588:	4a1d      	ldr	r2, [pc, #116]	; (8006600 <HAL_ADC_ConfigChannel+0x66c>)
 800658a:	4293      	cmp	r3, r2
 800658c:	f040 8099 	bne.w	80066c2 <HAL_ADC_ConfigChannel+0x72e>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8006590:	687b      	ldr	r3, [r7, #4]
 8006592:	681b      	ldr	r3, [r3, #0]
 8006594:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8006598:	d004      	beq.n	80065a4 <HAL_ADC_ConfigChannel+0x610>
 800659a:	687b      	ldr	r3, [r7, #4]
 800659c:	681b      	ldr	r3, [r3, #0]
 800659e:	4a13      	ldr	r2, [pc, #76]	; (80065ec <HAL_ADC_ConfigChannel+0x658>)
 80065a0:	4293      	cmp	r3, r2
 80065a2:	d101      	bne.n	80065a8 <HAL_ADC_ConfigChannel+0x614>
 80065a4:	4a12      	ldr	r2, [pc, #72]	; (80065f0 <HAL_ADC_ConfigChannel+0x65c>)
 80065a6:	e000      	b.n	80065aa <HAL_ADC_ConfigChannel+0x616>
 80065a8:	4a12      	ldr	r2, [pc, #72]	; (80065f4 <HAL_ADC_ConfigChannel+0x660>)
 80065aa:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80065ae:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 80065b2:	4619      	mov	r1, r3
 80065b4:	4610      	mov	r0, r2
 80065b6:	f7ff f97e 	bl	80058b6 <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * (SystemCoreClock / (100000UL * 2UL)));
 80065ba:	4b12      	ldr	r3, [pc, #72]	; (8006604 <HAL_ADC_ConfigChannel+0x670>)
 80065bc:	681b      	ldr	r3, [r3, #0]
 80065be:	099b      	lsrs	r3, r3, #6
 80065c0:	4a11      	ldr	r2, [pc, #68]	; (8006608 <HAL_ADC_ConfigChannel+0x674>)
 80065c2:	fba2 2303 	umull	r2, r3, r2, r3
 80065c6:	099a      	lsrs	r2, r3, #6
 80065c8:	4613      	mov	r3, r2
 80065ca:	005b      	lsls	r3, r3, #1
 80065cc:	4413      	add	r3, r2
 80065ce:	009b      	lsls	r3, r3, #2
 80065d0:	60bb      	str	r3, [r7, #8]
          while (wait_loop_index != 0UL)
 80065d2:	e002      	b.n	80065da <HAL_ADC_ConfigChannel+0x646>
          {
            wait_loop_index--;
 80065d4:	68bb      	ldr	r3, [r7, #8]
 80065d6:	3b01      	subs	r3, #1
 80065d8:	60bb      	str	r3, [r7, #8]
          while (wait_loop_index != 0UL)
 80065da:	68bb      	ldr	r3, [r7, #8]
 80065dc:	2b00      	cmp	r3, #0
 80065de:	d1f9      	bne.n	80065d4 <HAL_ADC_ConfigChannel+0x640>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 80065e0:	e06f      	b.n	80066c2 <HAL_ADC_ConfigChannel+0x72e>
 80065e2:	bf00      	nop
 80065e4:	407f0000 	.word	0x407f0000
 80065e8:	80080000 	.word	0x80080000
 80065ec:	50000100 	.word	0x50000100
 80065f0:	50000300 	.word	0x50000300
 80065f4:	50000700 	.word	0x50000700
 80065f8:	c3210000 	.word	0xc3210000
 80065fc:	90c00010 	.word	0x90c00010
 8006600:	50000600 	.word	0x50000600
 8006604:	200001d4 	.word	0x200001d4
 8006608:	053e2d63 	.word	0x053e2d63
          }
        }
      }
      else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 800660c:	683b      	ldr	r3, [r7, #0]
 800660e:	681b      	ldr	r3, [r3, #0]
 8006610:	4a32      	ldr	r2, [pc, #200]	; (80066dc <HAL_ADC_ConfigChannel+0x748>)
 8006612:	4293      	cmp	r3, r2
 8006614:	d125      	bne.n	8006662 <HAL_ADC_ConfigChannel+0x6ce>
 8006616:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800661a:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800661e:	2b00      	cmp	r3, #0
 8006620:	d11f      	bne.n	8006662 <HAL_ADC_ConfigChannel+0x6ce>
      {
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8006622:	687b      	ldr	r3, [r7, #4]
 8006624:	681b      	ldr	r3, [r3, #0]
 8006626:	4a2e      	ldr	r2, [pc, #184]	; (80066e0 <HAL_ADC_ConfigChannel+0x74c>)
 8006628:	4293      	cmp	r3, r2
 800662a:	d104      	bne.n	8006636 <HAL_ADC_ConfigChannel+0x6a2>
 800662c:	687b      	ldr	r3, [r7, #4]
 800662e:	681b      	ldr	r3, [r3, #0]
 8006630:	4a2c      	ldr	r2, [pc, #176]	; (80066e4 <HAL_ADC_ConfigChannel+0x750>)
 8006632:	4293      	cmp	r3, r2
 8006634:	d047      	beq.n	80066c6 <HAL_ADC_ConfigChannel+0x732>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8006636:	687b      	ldr	r3, [r7, #4]
 8006638:	681b      	ldr	r3, [r3, #0]
 800663a:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800663e:	d004      	beq.n	800664a <HAL_ADC_ConfigChannel+0x6b6>
 8006640:	687b      	ldr	r3, [r7, #4]
 8006642:	681b      	ldr	r3, [r3, #0]
 8006644:	4a26      	ldr	r2, [pc, #152]	; (80066e0 <HAL_ADC_ConfigChannel+0x74c>)
 8006646:	4293      	cmp	r3, r2
 8006648:	d101      	bne.n	800664e <HAL_ADC_ConfigChannel+0x6ba>
 800664a:	4a27      	ldr	r2, [pc, #156]	; (80066e8 <HAL_ADC_ConfigChannel+0x754>)
 800664c:	e000      	b.n	8006650 <HAL_ADC_ConfigChannel+0x6bc>
 800664e:	4a27      	ldr	r2, [pc, #156]	; (80066ec <HAL_ADC_ConfigChannel+0x758>)
 8006650:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8006654:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8006658:	4619      	mov	r1, r3
 800665a:	4610      	mov	r0, r2
 800665c:	f7ff f92b 	bl	80058b6 <LL_ADC_SetCommonPathInternalCh>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8006660:	e031      	b.n	80066c6 <HAL_ADC_ConfigChannel+0x732>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
      }
      else if ((sConfig->Channel == ADC_CHANNEL_VREFINT)
 8006662:	683b      	ldr	r3, [r7, #0]
 8006664:	681b      	ldr	r3, [r3, #0]
 8006666:	4a22      	ldr	r2, [pc, #136]	; (80066f0 <HAL_ADC_ConfigChannel+0x75c>)
 8006668:	4293      	cmp	r3, r2
 800666a:	d12d      	bne.n	80066c8 <HAL_ADC_ConfigChannel+0x734>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 800666c:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8006670:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8006674:	2b00      	cmp	r3, #0
 8006676:	d127      	bne.n	80066c8 <HAL_ADC_ConfigChannel+0x734>
      {
        if (ADC_VREFINT_INSTANCE(hadc))
 8006678:	687b      	ldr	r3, [r7, #4]
 800667a:	681b      	ldr	r3, [r3, #0]
 800667c:	4a18      	ldr	r2, [pc, #96]	; (80066e0 <HAL_ADC_ConfigChannel+0x74c>)
 800667e:	4293      	cmp	r3, r2
 8006680:	d022      	beq.n	80066c8 <HAL_ADC_ConfigChannel+0x734>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8006682:	687b      	ldr	r3, [r7, #4]
 8006684:	681b      	ldr	r3, [r3, #0]
 8006686:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800668a:	d004      	beq.n	8006696 <HAL_ADC_ConfigChannel+0x702>
 800668c:	687b      	ldr	r3, [r7, #4]
 800668e:	681b      	ldr	r3, [r3, #0]
 8006690:	4a13      	ldr	r2, [pc, #76]	; (80066e0 <HAL_ADC_ConfigChannel+0x74c>)
 8006692:	4293      	cmp	r3, r2
 8006694:	d101      	bne.n	800669a <HAL_ADC_ConfigChannel+0x706>
 8006696:	4a14      	ldr	r2, [pc, #80]	; (80066e8 <HAL_ADC_ConfigChannel+0x754>)
 8006698:	e000      	b.n	800669c <HAL_ADC_ConfigChannel+0x708>
 800669a:	4a14      	ldr	r2, [pc, #80]	; (80066ec <HAL_ADC_ConfigChannel+0x758>)
 800669c:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80066a0:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80066a4:	4619      	mov	r1, r3
 80066a6:	4610      	mov	r0, r2
 80066a8:	f7ff f905 	bl	80058b6 <LL_ADC_SetCommonPathInternalCh>
 80066ac:	e00c      	b.n	80066c8 <HAL_ADC_ConfigChannel+0x734>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80066ae:	687b      	ldr	r3, [r7, #4]
 80066b0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80066b2:	f043 0220 	orr.w	r2, r3, #32
 80066b6:	687b      	ldr	r3, [r7, #4]
 80066b8:	65da      	str	r2, [r3, #92]	; 0x5c

    tmp_hal_status = HAL_ERROR;
 80066ba:	2301      	movs	r3, #1
 80066bc:	f887 3097 	strb.w	r3, [r7, #151]	; 0x97
 80066c0:	e002      	b.n	80066c8 <HAL_ADC_ConfigChannel+0x734>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 80066c2:	bf00      	nop
 80066c4:	e000      	b.n	80066c8 <HAL_ADC_ConfigChannel+0x734>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 80066c6:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80066c8:	687b      	ldr	r3, [r7, #4]
 80066ca:	2200      	movs	r2, #0
 80066cc:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

  /* Return function status */
  return tmp_hal_status;
 80066d0:	f897 3097 	ldrb.w	r3, [r7, #151]	; 0x97
}
 80066d4:	4618      	mov	r0, r3
 80066d6:	3798      	adds	r7, #152	; 0x98
 80066d8:	46bd      	mov	sp, r7
 80066da:	bd80      	pop	{r7, pc}
 80066dc:	c7520000 	.word	0xc7520000
 80066e0:	50000100 	.word	0x50000100
 80066e4:	50000500 	.word	0x50000500
 80066e8:	50000300 	.word	0x50000300
 80066ec:	50000700 	.word	0x50000700
 80066f0:	cb840000 	.word	0xcb840000

080066f4 <LL_ADC_IsEnabled>:
{
 80066f4:	b480      	push	{r7}
 80066f6:	b083      	sub	sp, #12
 80066f8:	af00      	add	r7, sp, #0
 80066fa:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 80066fc:	687b      	ldr	r3, [r7, #4]
 80066fe:	689b      	ldr	r3, [r3, #8]
 8006700:	f003 0301 	and.w	r3, r3, #1
 8006704:	2b01      	cmp	r3, #1
 8006706:	d101      	bne.n	800670c <LL_ADC_IsEnabled+0x18>
 8006708:	2301      	movs	r3, #1
 800670a:	e000      	b.n	800670e <LL_ADC_IsEnabled+0x1a>
 800670c:	2300      	movs	r3, #0
}
 800670e:	4618      	mov	r0, r3
 8006710:	370c      	adds	r7, #12
 8006712:	46bd      	mov	sp, r7
 8006714:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006718:	4770      	bx	lr

0800671a <LL_ADC_REG_IsConversionOngoing>:
{
 800671a:	b480      	push	{r7}
 800671c:	b083      	sub	sp, #12
 800671e:	af00      	add	r7, sp, #0
 8006720:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8006722:	687b      	ldr	r3, [r7, #4]
 8006724:	689b      	ldr	r3, [r3, #8]
 8006726:	f003 0304 	and.w	r3, r3, #4
 800672a:	2b04      	cmp	r3, #4
 800672c:	d101      	bne.n	8006732 <LL_ADC_REG_IsConversionOngoing+0x18>
 800672e:	2301      	movs	r3, #1
 8006730:	e000      	b.n	8006734 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8006732:	2300      	movs	r3, #0
}
 8006734:	4618      	mov	r0, r3
 8006736:	370c      	adds	r7, #12
 8006738:	46bd      	mov	sp, r7
 800673a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800673e:	4770      	bx	lr

08006740 <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param multimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, ADC_MultiModeTypeDef *multimode)
{
 8006740:	b590      	push	{r4, r7, lr}
 8006742:	b0a1      	sub	sp, #132	; 0x84
 8006744:	af00      	add	r7, sp, #0
 8006746:	6078      	str	r0, [r7, #4]
 8006748:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800674a:	2300      	movs	r3, #0
 800674c:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
    assert_param(IS_ADC_DMA_ACCESS_MULTIMODE(multimode->DMAAccessMode));
    assert_param(IS_ADC_SAMPLING_DELAY(multimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8006750:	687b      	ldr	r3, [r7, #4]
 8006752:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 8006756:	2b01      	cmp	r3, #1
 8006758:	d101      	bne.n	800675e <HAL_ADCEx_MultiModeConfigChannel+0x1e>
 800675a:	2302      	movs	r3, #2
 800675c:	e0e3      	b.n	8006926 <HAL_ADCEx_MultiModeConfigChannel+0x1e6>
 800675e:	687b      	ldr	r3, [r7, #4]
 8006760:	2201      	movs	r2, #1
 8006762:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

  ADC_MULTI_SLAVE(hadc, &tmphadcSlave);
 8006766:	687b      	ldr	r3, [r7, #4]
 8006768:	681b      	ldr	r3, [r3, #0]
 800676a:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800676e:	d102      	bne.n	8006776 <HAL_ADCEx_MultiModeConfigChannel+0x36>
 8006770:	4b6f      	ldr	r3, [pc, #444]	; (8006930 <HAL_ADCEx_MultiModeConfigChannel+0x1f0>)
 8006772:	60bb      	str	r3, [r7, #8]
 8006774:	e009      	b.n	800678a <HAL_ADCEx_MultiModeConfigChannel+0x4a>
 8006776:	687b      	ldr	r3, [r7, #4]
 8006778:	681b      	ldr	r3, [r3, #0]
 800677a:	4a6e      	ldr	r2, [pc, #440]	; (8006934 <HAL_ADCEx_MultiModeConfigChannel+0x1f4>)
 800677c:	4293      	cmp	r3, r2
 800677e:	d102      	bne.n	8006786 <HAL_ADCEx_MultiModeConfigChannel+0x46>
 8006780:	4b6d      	ldr	r3, [pc, #436]	; (8006938 <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 8006782:	60bb      	str	r3, [r7, #8]
 8006784:	e001      	b.n	800678a <HAL_ADCEx_MultiModeConfigChannel+0x4a>
 8006786:	2300      	movs	r3, #0
 8006788:	60bb      	str	r3, [r7, #8]

  if (tmphadcSlave.Instance == NULL)
 800678a:	68bb      	ldr	r3, [r7, #8]
 800678c:	2b00      	cmp	r3, #0
 800678e:	d10b      	bne.n	80067a8 <HAL_ADCEx_MultiModeConfigChannel+0x68>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8006790:	687b      	ldr	r3, [r7, #4]
 8006792:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006794:	f043 0220 	orr.w	r2, r3, #32
 8006798:	687b      	ldr	r3, [r7, #4]
 800679a:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 800679c:	687b      	ldr	r3, [r7, #4]
 800679e:	2200      	movs	r2, #0
 80067a0:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

    return HAL_ERROR;
 80067a4:	2301      	movs	r3, #1
 80067a6:	e0be      	b.n	8006926 <HAL_ADCEx_MultiModeConfigChannel+0x1e6>
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DMA configuration                                           */
  /*  - Multimode DMA mode                                                    */
  tmphadcSlave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmphadcSlave)->Instance);
 80067a8:	68bb      	ldr	r3, [r7, #8]
 80067aa:	4618      	mov	r0, r3
 80067ac:	f7ff ffb5 	bl	800671a <LL_ADC_REG_IsConversionOngoing>
 80067b0:	67b8      	str	r0, [r7, #120]	; 0x78
  if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80067b2:	687b      	ldr	r3, [r7, #4]
 80067b4:	681b      	ldr	r3, [r3, #0]
 80067b6:	4618      	mov	r0, r3
 80067b8:	f7ff ffaf 	bl	800671a <LL_ADC_REG_IsConversionOngoing>
 80067bc:	4603      	mov	r3, r0
 80067be:	2b00      	cmp	r3, #0
 80067c0:	f040 80a0 	bne.w	8006904 <HAL_ADCEx_MultiModeConfigChannel+0x1c4>
      && (tmphadcSlave_conversion_on_going == 0UL))
 80067c4:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80067c6:	2b00      	cmp	r3, #0
 80067c8:	f040 809c 	bne.w	8006904 <HAL_ADCEx_MultiModeConfigChannel+0x1c4>
  {
    /* Pointer to the common control register */
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 80067cc:	687b      	ldr	r3, [r7, #4]
 80067ce:	681b      	ldr	r3, [r3, #0]
 80067d0:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80067d4:	d004      	beq.n	80067e0 <HAL_ADCEx_MultiModeConfigChannel+0xa0>
 80067d6:	687b      	ldr	r3, [r7, #4]
 80067d8:	681b      	ldr	r3, [r3, #0]
 80067da:	4a55      	ldr	r2, [pc, #340]	; (8006930 <HAL_ADCEx_MultiModeConfigChannel+0x1f0>)
 80067dc:	4293      	cmp	r3, r2
 80067de:	d101      	bne.n	80067e4 <HAL_ADCEx_MultiModeConfigChannel+0xa4>
 80067e0:	4b56      	ldr	r3, [pc, #344]	; (800693c <HAL_ADCEx_MultiModeConfigChannel+0x1fc>)
 80067e2:	e000      	b.n	80067e6 <HAL_ADCEx_MultiModeConfigChannel+0xa6>
 80067e4:	4b56      	ldr	r3, [pc, #344]	; (8006940 <HAL_ADCEx_MultiModeConfigChannel+0x200>)
 80067e6:	677b      	str	r3, [r7, #116]	; 0x74

    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 80067e8:	683b      	ldr	r3, [r7, #0]
 80067ea:	681b      	ldr	r3, [r3, #0]
 80067ec:	2b00      	cmp	r3, #0
 80067ee:	d04b      	beq.n	8006888 <HAL_ADCEx_MultiModeConfigChannel+0x148>
    {
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG,
 80067f0:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80067f2:	689b      	ldr	r3, [r3, #8]
 80067f4:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80067f8:	683b      	ldr	r3, [r7, #0]
 80067fa:	6859      	ldr	r1, [r3, #4]
 80067fc:	687b      	ldr	r3, [r7, #4]
 80067fe:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8006802:	035b      	lsls	r3, r3, #13
 8006804:	430b      	orrs	r3, r1
 8006806:	431a      	orrs	r2, r3
 8006808:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800680a:	609a      	str	r2, [r3, #8]
      /*      from 1 to 10 clock cycles for 10 bits,                              */
      /*      from 1 to 8 clock cycles for 8 bits                                 */
      /*      from 1 to 6 clock cycles for 6 bits                                 */
      /*    If a higher delay is selected, it will be clipped to maximum delay    */
      /*    range                                                                 */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 800680c:	687b      	ldr	r3, [r7, #4]
 800680e:	681b      	ldr	r3, [r3, #0]
 8006810:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8006814:	d004      	beq.n	8006820 <HAL_ADCEx_MultiModeConfigChannel+0xe0>
 8006816:	687b      	ldr	r3, [r7, #4]
 8006818:	681b      	ldr	r3, [r3, #0]
 800681a:	4a45      	ldr	r2, [pc, #276]	; (8006930 <HAL_ADCEx_MultiModeConfigChannel+0x1f0>)
 800681c:	4293      	cmp	r3, r2
 800681e:	d10f      	bne.n	8006840 <HAL_ADCEx_MultiModeConfigChannel+0x100>
 8006820:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
 8006824:	f7ff ff66 	bl	80066f4 <LL_ADC_IsEnabled>
 8006828:	4604      	mov	r4, r0
 800682a:	4841      	ldr	r0, [pc, #260]	; (8006930 <HAL_ADCEx_MultiModeConfigChannel+0x1f0>)
 800682c:	f7ff ff62 	bl	80066f4 <LL_ADC_IsEnabled>
 8006830:	4603      	mov	r3, r0
 8006832:	4323      	orrs	r3, r4
 8006834:	2b00      	cmp	r3, #0
 8006836:	bf0c      	ite	eq
 8006838:	2301      	moveq	r3, #1
 800683a:	2300      	movne	r3, #0
 800683c:	b2db      	uxtb	r3, r3
 800683e:	e012      	b.n	8006866 <HAL_ADCEx_MultiModeConfigChannel+0x126>
 8006840:	483c      	ldr	r0, [pc, #240]	; (8006934 <HAL_ADCEx_MultiModeConfigChannel+0x1f4>)
 8006842:	f7ff ff57 	bl	80066f4 <LL_ADC_IsEnabled>
 8006846:	4604      	mov	r4, r0
 8006848:	483b      	ldr	r0, [pc, #236]	; (8006938 <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 800684a:	f7ff ff53 	bl	80066f4 <LL_ADC_IsEnabled>
 800684e:	4603      	mov	r3, r0
 8006850:	431c      	orrs	r4, r3
 8006852:	483c      	ldr	r0, [pc, #240]	; (8006944 <HAL_ADCEx_MultiModeConfigChannel+0x204>)
 8006854:	f7ff ff4e 	bl	80066f4 <LL_ADC_IsEnabled>
 8006858:	4603      	mov	r3, r0
 800685a:	4323      	orrs	r3, r4
 800685c:	2b00      	cmp	r3, #0
 800685e:	bf0c      	ite	eq
 8006860:	2301      	moveq	r3, #1
 8006862:	2300      	movne	r3, #0
 8006864:	b2db      	uxtb	r3, r3
 8006866:	2b00      	cmp	r3, #0
 8006868:	d056      	beq.n	8006918 <HAL_ADCEx_MultiModeConfigChannel+0x1d8>
      {
        MODIFY_REG(tmpADC_Common->CCR,
 800686a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800686c:	689b      	ldr	r3, [r3, #8]
 800686e:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 8006872:	f023 030f 	bic.w	r3, r3, #15
 8006876:	683a      	ldr	r2, [r7, #0]
 8006878:	6811      	ldr	r1, [r2, #0]
 800687a:	683a      	ldr	r2, [r7, #0]
 800687c:	6892      	ldr	r2, [r2, #8]
 800687e:	430a      	orrs	r2, r1
 8006880:	431a      	orrs	r2, r3
 8006882:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8006884:	609a      	str	r2, [r3, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8006886:	e047      	b.n	8006918 <HAL_ADCEx_MultiModeConfigChannel+0x1d8>
                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG);
 8006888:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800688a:	689b      	ldr	r3, [r3, #8]
 800688c:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8006890:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8006892:	609a      	str	r2, [r3, #8]

      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8006894:	687b      	ldr	r3, [r7, #4]
 8006896:	681b      	ldr	r3, [r3, #0]
 8006898:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800689c:	d004      	beq.n	80068a8 <HAL_ADCEx_MultiModeConfigChannel+0x168>
 800689e:	687b      	ldr	r3, [r7, #4]
 80068a0:	681b      	ldr	r3, [r3, #0]
 80068a2:	4a23      	ldr	r2, [pc, #140]	; (8006930 <HAL_ADCEx_MultiModeConfigChannel+0x1f0>)
 80068a4:	4293      	cmp	r3, r2
 80068a6:	d10f      	bne.n	80068c8 <HAL_ADCEx_MultiModeConfigChannel+0x188>
 80068a8:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
 80068ac:	f7ff ff22 	bl	80066f4 <LL_ADC_IsEnabled>
 80068b0:	4604      	mov	r4, r0
 80068b2:	481f      	ldr	r0, [pc, #124]	; (8006930 <HAL_ADCEx_MultiModeConfigChannel+0x1f0>)
 80068b4:	f7ff ff1e 	bl	80066f4 <LL_ADC_IsEnabled>
 80068b8:	4603      	mov	r3, r0
 80068ba:	4323      	orrs	r3, r4
 80068bc:	2b00      	cmp	r3, #0
 80068be:	bf0c      	ite	eq
 80068c0:	2301      	moveq	r3, #1
 80068c2:	2300      	movne	r3, #0
 80068c4:	b2db      	uxtb	r3, r3
 80068c6:	e012      	b.n	80068ee <HAL_ADCEx_MultiModeConfigChannel+0x1ae>
 80068c8:	481a      	ldr	r0, [pc, #104]	; (8006934 <HAL_ADCEx_MultiModeConfigChannel+0x1f4>)
 80068ca:	f7ff ff13 	bl	80066f4 <LL_ADC_IsEnabled>
 80068ce:	4604      	mov	r4, r0
 80068d0:	4819      	ldr	r0, [pc, #100]	; (8006938 <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 80068d2:	f7ff ff0f 	bl	80066f4 <LL_ADC_IsEnabled>
 80068d6:	4603      	mov	r3, r0
 80068d8:	431c      	orrs	r4, r3
 80068da:	481a      	ldr	r0, [pc, #104]	; (8006944 <HAL_ADCEx_MultiModeConfigChannel+0x204>)
 80068dc:	f7ff ff0a 	bl	80066f4 <LL_ADC_IsEnabled>
 80068e0:	4603      	mov	r3, r0
 80068e2:	4323      	orrs	r3, r4
 80068e4:	2b00      	cmp	r3, #0
 80068e6:	bf0c      	ite	eq
 80068e8:	2301      	moveq	r3, #1
 80068ea:	2300      	movne	r3, #0
 80068ec:	b2db      	uxtb	r3, r3
 80068ee:	2b00      	cmp	r3, #0
 80068f0:	d012      	beq.n	8006918 <HAL_ADCEx_MultiModeConfigChannel+0x1d8>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 80068f2:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80068f4:	689b      	ldr	r3, [r3, #8]
 80068f6:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 80068fa:	f023 030f 	bic.w	r3, r3, #15
 80068fe:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 8006900:	6093      	str	r3, [r2, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8006902:	e009      	b.n	8006918 <HAL_ADCEx_MultiModeConfigChannel+0x1d8>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8006904:	687b      	ldr	r3, [r7, #4]
 8006906:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006908:	f043 0220 	orr.w	r2, r3, #32
 800690c:	687b      	ldr	r3, [r7, #4]
 800690e:	65da      	str	r2, [r3, #92]	; 0x5c

    tmp_hal_status = HAL_ERROR;
 8006910:	2301      	movs	r3, #1
 8006912:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
 8006916:	e000      	b.n	800691a <HAL_ADCEx_MultiModeConfigChannel+0x1da>
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8006918:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800691a:	687b      	ldr	r3, [r7, #4]
 800691c:	2200      	movs	r2, #0
 800691e:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

  /* Return function status */
  return tmp_hal_status;
 8006922:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
}
 8006926:	4618      	mov	r0, r3
 8006928:	3784      	adds	r7, #132	; 0x84
 800692a:	46bd      	mov	sp, r7
 800692c:	bd90      	pop	{r4, r7, pc}
 800692e:	bf00      	nop
 8006930:	50000100 	.word	0x50000100
 8006934:	50000400 	.word	0x50000400
 8006938:	50000500 	.word	0x50000500
 800693c:	50000300 	.word	0x50000300
 8006940:	50000700 	.word	0x50000700
 8006944:	50000600 	.word	0x50000600

08006948 <LL_EXTI_EnableIT_0_31>:
{
 8006948:	b480      	push	{r7}
 800694a:	b083      	sub	sp, #12
 800694c:	af00      	add	r7, sp, #0
 800694e:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->IMR1, ExtiLine);
 8006950:	4b05      	ldr	r3, [pc, #20]	; (8006968 <LL_EXTI_EnableIT_0_31+0x20>)
 8006952:	681a      	ldr	r2, [r3, #0]
 8006954:	4904      	ldr	r1, [pc, #16]	; (8006968 <LL_EXTI_EnableIT_0_31+0x20>)
 8006956:	687b      	ldr	r3, [r7, #4]
 8006958:	4313      	orrs	r3, r2
 800695a:	600b      	str	r3, [r1, #0]
}
 800695c:	bf00      	nop
 800695e:	370c      	adds	r7, #12
 8006960:	46bd      	mov	sp, r7
 8006962:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006966:	4770      	bx	lr
 8006968:	40010400 	.word	0x40010400

0800696c <LL_EXTI_EnableIT_32_63>:
{
 800696c:	b480      	push	{r7}
 800696e:	b083      	sub	sp, #12
 8006970:	af00      	add	r7, sp, #0
 8006972:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->IMR2, ExtiLine);
 8006974:	4b05      	ldr	r3, [pc, #20]	; (800698c <LL_EXTI_EnableIT_32_63+0x20>)
 8006976:	6a1a      	ldr	r2, [r3, #32]
 8006978:	4904      	ldr	r1, [pc, #16]	; (800698c <LL_EXTI_EnableIT_32_63+0x20>)
 800697a:	687b      	ldr	r3, [r7, #4]
 800697c:	4313      	orrs	r3, r2
 800697e:	620b      	str	r3, [r1, #32]
}
 8006980:	bf00      	nop
 8006982:	370c      	adds	r7, #12
 8006984:	46bd      	mov	sp, r7
 8006986:	f85d 7b04 	ldr.w	r7, [sp], #4
 800698a:	4770      	bx	lr
 800698c:	40010400 	.word	0x40010400

08006990 <LL_EXTI_DisableIT_0_31>:
{
 8006990:	b480      	push	{r7}
 8006992:	b083      	sub	sp, #12
 8006994:	af00      	add	r7, sp, #0
 8006996:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->IMR1, ExtiLine);
 8006998:	4b06      	ldr	r3, [pc, #24]	; (80069b4 <LL_EXTI_DisableIT_0_31+0x24>)
 800699a:	681a      	ldr	r2, [r3, #0]
 800699c:	687b      	ldr	r3, [r7, #4]
 800699e:	43db      	mvns	r3, r3
 80069a0:	4904      	ldr	r1, [pc, #16]	; (80069b4 <LL_EXTI_DisableIT_0_31+0x24>)
 80069a2:	4013      	ands	r3, r2
 80069a4:	600b      	str	r3, [r1, #0]
}
 80069a6:	bf00      	nop
 80069a8:	370c      	adds	r7, #12
 80069aa:	46bd      	mov	sp, r7
 80069ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069b0:	4770      	bx	lr
 80069b2:	bf00      	nop
 80069b4:	40010400 	.word	0x40010400

080069b8 <LL_EXTI_DisableIT_32_63>:
{
 80069b8:	b480      	push	{r7}
 80069ba:	b083      	sub	sp, #12
 80069bc:	af00      	add	r7, sp, #0
 80069be:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->IMR2, ExtiLine);
 80069c0:	4b06      	ldr	r3, [pc, #24]	; (80069dc <LL_EXTI_DisableIT_32_63+0x24>)
 80069c2:	6a1a      	ldr	r2, [r3, #32]
 80069c4:	687b      	ldr	r3, [r7, #4]
 80069c6:	43db      	mvns	r3, r3
 80069c8:	4904      	ldr	r1, [pc, #16]	; (80069dc <LL_EXTI_DisableIT_32_63+0x24>)
 80069ca:	4013      	ands	r3, r2
 80069cc:	620b      	str	r3, [r1, #32]
}
 80069ce:	bf00      	nop
 80069d0:	370c      	adds	r7, #12
 80069d2:	46bd      	mov	sp, r7
 80069d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069d8:	4770      	bx	lr
 80069da:	bf00      	nop
 80069dc:	40010400 	.word	0x40010400

080069e0 <LL_EXTI_EnableEvent_0_31>:
{
 80069e0:	b480      	push	{r7}
 80069e2:	b083      	sub	sp, #12
 80069e4:	af00      	add	r7, sp, #0
 80069e6:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->EMR1, ExtiLine);
 80069e8:	4b05      	ldr	r3, [pc, #20]	; (8006a00 <LL_EXTI_EnableEvent_0_31+0x20>)
 80069ea:	685a      	ldr	r2, [r3, #4]
 80069ec:	4904      	ldr	r1, [pc, #16]	; (8006a00 <LL_EXTI_EnableEvent_0_31+0x20>)
 80069ee:	687b      	ldr	r3, [r7, #4]
 80069f0:	4313      	orrs	r3, r2
 80069f2:	604b      	str	r3, [r1, #4]
}
 80069f4:	bf00      	nop
 80069f6:	370c      	adds	r7, #12
 80069f8:	46bd      	mov	sp, r7
 80069fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069fe:	4770      	bx	lr
 8006a00:	40010400 	.word	0x40010400

08006a04 <LL_EXTI_EnableEvent_32_63>:
{
 8006a04:	b480      	push	{r7}
 8006a06:	b083      	sub	sp, #12
 8006a08:	af00      	add	r7, sp, #0
 8006a0a:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->EMR2, ExtiLine);
 8006a0c:	4b05      	ldr	r3, [pc, #20]	; (8006a24 <LL_EXTI_EnableEvent_32_63+0x20>)
 8006a0e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8006a10:	4904      	ldr	r1, [pc, #16]	; (8006a24 <LL_EXTI_EnableEvent_32_63+0x20>)
 8006a12:	687b      	ldr	r3, [r7, #4]
 8006a14:	4313      	orrs	r3, r2
 8006a16:	624b      	str	r3, [r1, #36]	; 0x24
}
 8006a18:	bf00      	nop
 8006a1a:	370c      	adds	r7, #12
 8006a1c:	46bd      	mov	sp, r7
 8006a1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a22:	4770      	bx	lr
 8006a24:	40010400 	.word	0x40010400

08006a28 <LL_EXTI_DisableEvent_0_31>:
{
 8006a28:	b480      	push	{r7}
 8006a2a:	b083      	sub	sp, #12
 8006a2c:	af00      	add	r7, sp, #0
 8006a2e:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->EMR1, ExtiLine);
 8006a30:	4b06      	ldr	r3, [pc, #24]	; (8006a4c <LL_EXTI_DisableEvent_0_31+0x24>)
 8006a32:	685a      	ldr	r2, [r3, #4]
 8006a34:	687b      	ldr	r3, [r7, #4]
 8006a36:	43db      	mvns	r3, r3
 8006a38:	4904      	ldr	r1, [pc, #16]	; (8006a4c <LL_EXTI_DisableEvent_0_31+0x24>)
 8006a3a:	4013      	ands	r3, r2
 8006a3c:	604b      	str	r3, [r1, #4]
}
 8006a3e:	bf00      	nop
 8006a40:	370c      	adds	r7, #12
 8006a42:	46bd      	mov	sp, r7
 8006a44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a48:	4770      	bx	lr
 8006a4a:	bf00      	nop
 8006a4c:	40010400 	.word	0x40010400

08006a50 <LL_EXTI_DisableEvent_32_63>:
{
 8006a50:	b480      	push	{r7}
 8006a52:	b083      	sub	sp, #12
 8006a54:	af00      	add	r7, sp, #0
 8006a56:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->EMR2, ExtiLine);
 8006a58:	4b06      	ldr	r3, [pc, #24]	; (8006a74 <LL_EXTI_DisableEvent_32_63+0x24>)
 8006a5a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8006a5c:	687b      	ldr	r3, [r7, #4]
 8006a5e:	43db      	mvns	r3, r3
 8006a60:	4904      	ldr	r1, [pc, #16]	; (8006a74 <LL_EXTI_DisableEvent_32_63+0x24>)
 8006a62:	4013      	ands	r3, r2
 8006a64:	624b      	str	r3, [r1, #36]	; 0x24
}
 8006a66:	bf00      	nop
 8006a68:	370c      	adds	r7, #12
 8006a6a:	46bd      	mov	sp, r7
 8006a6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a70:	4770      	bx	lr
 8006a72:	bf00      	nop
 8006a74:	40010400 	.word	0x40010400

08006a78 <LL_EXTI_EnableRisingTrig_0_31>:
{
 8006a78:	b480      	push	{r7}
 8006a7a:	b083      	sub	sp, #12
 8006a7c:	af00      	add	r7, sp, #0
 8006a7e:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->RTSR1, ExtiLine);
 8006a80:	4b05      	ldr	r3, [pc, #20]	; (8006a98 <LL_EXTI_EnableRisingTrig_0_31+0x20>)
 8006a82:	689a      	ldr	r2, [r3, #8]
 8006a84:	4904      	ldr	r1, [pc, #16]	; (8006a98 <LL_EXTI_EnableRisingTrig_0_31+0x20>)
 8006a86:	687b      	ldr	r3, [r7, #4]
 8006a88:	4313      	orrs	r3, r2
 8006a8a:	608b      	str	r3, [r1, #8]
}
 8006a8c:	bf00      	nop
 8006a8e:	370c      	adds	r7, #12
 8006a90:	46bd      	mov	sp, r7
 8006a92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a96:	4770      	bx	lr
 8006a98:	40010400 	.word	0x40010400

08006a9c <LL_EXTI_EnableRisingTrig_32_63>:
{
 8006a9c:	b480      	push	{r7}
 8006a9e:	b083      	sub	sp, #12
 8006aa0:	af00      	add	r7, sp, #0
 8006aa2:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->RTSR2, ExtiLine);
 8006aa4:	4b05      	ldr	r3, [pc, #20]	; (8006abc <LL_EXTI_EnableRisingTrig_32_63+0x20>)
 8006aa6:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8006aa8:	4904      	ldr	r1, [pc, #16]	; (8006abc <LL_EXTI_EnableRisingTrig_32_63+0x20>)
 8006aaa:	687b      	ldr	r3, [r7, #4]
 8006aac:	4313      	orrs	r3, r2
 8006aae:	628b      	str	r3, [r1, #40]	; 0x28
}
 8006ab0:	bf00      	nop
 8006ab2:	370c      	adds	r7, #12
 8006ab4:	46bd      	mov	sp, r7
 8006ab6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006aba:	4770      	bx	lr
 8006abc:	40010400 	.word	0x40010400

08006ac0 <LL_EXTI_DisableRisingTrig_0_31>:
{
 8006ac0:	b480      	push	{r7}
 8006ac2:	b083      	sub	sp, #12
 8006ac4:	af00      	add	r7, sp, #0
 8006ac6:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->RTSR1, ExtiLine);
 8006ac8:	4b06      	ldr	r3, [pc, #24]	; (8006ae4 <LL_EXTI_DisableRisingTrig_0_31+0x24>)
 8006aca:	689a      	ldr	r2, [r3, #8]
 8006acc:	687b      	ldr	r3, [r7, #4]
 8006ace:	43db      	mvns	r3, r3
 8006ad0:	4904      	ldr	r1, [pc, #16]	; (8006ae4 <LL_EXTI_DisableRisingTrig_0_31+0x24>)
 8006ad2:	4013      	ands	r3, r2
 8006ad4:	608b      	str	r3, [r1, #8]
}
 8006ad6:	bf00      	nop
 8006ad8:	370c      	adds	r7, #12
 8006ada:	46bd      	mov	sp, r7
 8006adc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ae0:	4770      	bx	lr
 8006ae2:	bf00      	nop
 8006ae4:	40010400 	.word	0x40010400

08006ae8 <LL_EXTI_DisableRisingTrig_32_63>:
{
 8006ae8:	b480      	push	{r7}
 8006aea:	b083      	sub	sp, #12
 8006aec:	af00      	add	r7, sp, #0
 8006aee:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->RTSR2, ExtiLine);
 8006af0:	4b06      	ldr	r3, [pc, #24]	; (8006b0c <LL_EXTI_DisableRisingTrig_32_63+0x24>)
 8006af2:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8006af4:	687b      	ldr	r3, [r7, #4]
 8006af6:	43db      	mvns	r3, r3
 8006af8:	4904      	ldr	r1, [pc, #16]	; (8006b0c <LL_EXTI_DisableRisingTrig_32_63+0x24>)
 8006afa:	4013      	ands	r3, r2
 8006afc:	628b      	str	r3, [r1, #40]	; 0x28
}
 8006afe:	bf00      	nop
 8006b00:	370c      	adds	r7, #12
 8006b02:	46bd      	mov	sp, r7
 8006b04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b08:	4770      	bx	lr
 8006b0a:	bf00      	nop
 8006b0c:	40010400 	.word	0x40010400

08006b10 <LL_EXTI_EnableFallingTrig_0_31>:
{
 8006b10:	b480      	push	{r7}
 8006b12:	b083      	sub	sp, #12
 8006b14:	af00      	add	r7, sp, #0
 8006b16:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->FTSR1, ExtiLine);
 8006b18:	4b05      	ldr	r3, [pc, #20]	; (8006b30 <LL_EXTI_EnableFallingTrig_0_31+0x20>)
 8006b1a:	68da      	ldr	r2, [r3, #12]
 8006b1c:	4904      	ldr	r1, [pc, #16]	; (8006b30 <LL_EXTI_EnableFallingTrig_0_31+0x20>)
 8006b1e:	687b      	ldr	r3, [r7, #4]
 8006b20:	4313      	orrs	r3, r2
 8006b22:	60cb      	str	r3, [r1, #12]
}
 8006b24:	bf00      	nop
 8006b26:	370c      	adds	r7, #12
 8006b28:	46bd      	mov	sp, r7
 8006b2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b2e:	4770      	bx	lr
 8006b30:	40010400 	.word	0x40010400

08006b34 <LL_EXTI_EnableFallingTrig_32_63>:
{
 8006b34:	b480      	push	{r7}
 8006b36:	b083      	sub	sp, #12
 8006b38:	af00      	add	r7, sp, #0
 8006b3a:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->FTSR2, ExtiLine);
 8006b3c:	4b05      	ldr	r3, [pc, #20]	; (8006b54 <LL_EXTI_EnableFallingTrig_32_63+0x20>)
 8006b3e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006b40:	4904      	ldr	r1, [pc, #16]	; (8006b54 <LL_EXTI_EnableFallingTrig_32_63+0x20>)
 8006b42:	687b      	ldr	r3, [r7, #4]
 8006b44:	4313      	orrs	r3, r2
 8006b46:	62cb      	str	r3, [r1, #44]	; 0x2c
}
 8006b48:	bf00      	nop
 8006b4a:	370c      	adds	r7, #12
 8006b4c:	46bd      	mov	sp, r7
 8006b4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b52:	4770      	bx	lr
 8006b54:	40010400 	.word	0x40010400

08006b58 <LL_EXTI_DisableFallingTrig_0_31>:
{
 8006b58:	b480      	push	{r7}
 8006b5a:	b083      	sub	sp, #12
 8006b5c:	af00      	add	r7, sp, #0
 8006b5e:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->FTSR1, ExtiLine);
 8006b60:	4b06      	ldr	r3, [pc, #24]	; (8006b7c <LL_EXTI_DisableFallingTrig_0_31+0x24>)
 8006b62:	68da      	ldr	r2, [r3, #12]
 8006b64:	687b      	ldr	r3, [r7, #4]
 8006b66:	43db      	mvns	r3, r3
 8006b68:	4904      	ldr	r1, [pc, #16]	; (8006b7c <LL_EXTI_DisableFallingTrig_0_31+0x24>)
 8006b6a:	4013      	ands	r3, r2
 8006b6c:	60cb      	str	r3, [r1, #12]
}
 8006b6e:	bf00      	nop
 8006b70:	370c      	adds	r7, #12
 8006b72:	46bd      	mov	sp, r7
 8006b74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b78:	4770      	bx	lr
 8006b7a:	bf00      	nop
 8006b7c:	40010400 	.word	0x40010400

08006b80 <LL_EXTI_DisableFallingTrig_32_63>:
{
 8006b80:	b480      	push	{r7}
 8006b82:	b083      	sub	sp, #12
 8006b84:	af00      	add	r7, sp, #0
 8006b86:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->FTSR2, ExtiLine);
 8006b88:	4b06      	ldr	r3, [pc, #24]	; (8006ba4 <LL_EXTI_DisableFallingTrig_32_63+0x24>)
 8006b8a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006b8c:	687b      	ldr	r3, [r7, #4]
 8006b8e:	43db      	mvns	r3, r3
 8006b90:	4904      	ldr	r1, [pc, #16]	; (8006ba4 <LL_EXTI_DisableFallingTrig_32_63+0x24>)
 8006b92:	4013      	ands	r3, r2
 8006b94:	62cb      	str	r3, [r1, #44]	; 0x2c
}
 8006b96:	bf00      	nop
 8006b98:	370c      	adds	r7, #12
 8006b9a:	46bd      	mov	sp, r7
 8006b9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ba0:	4770      	bx	lr
 8006ba2:	bf00      	nop
 8006ba4:	40010400 	.word	0x40010400

08006ba8 <LL_EXTI_ClearFlag_0_31>:
{
 8006ba8:	b480      	push	{r7}
 8006baa:	b083      	sub	sp, #12
 8006bac:	af00      	add	r7, sp, #0
 8006bae:	6078      	str	r0, [r7, #4]
  WRITE_REG(EXTI->PR1, ExtiLine);
 8006bb0:	4a04      	ldr	r2, [pc, #16]	; (8006bc4 <LL_EXTI_ClearFlag_0_31+0x1c>)
 8006bb2:	687b      	ldr	r3, [r7, #4]
 8006bb4:	6153      	str	r3, [r2, #20]
}
 8006bb6:	bf00      	nop
 8006bb8:	370c      	adds	r7, #12
 8006bba:	46bd      	mov	sp, r7
 8006bbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006bc0:	4770      	bx	lr
 8006bc2:	bf00      	nop
 8006bc4:	40010400 	.word	0x40010400

08006bc8 <LL_EXTI_ClearFlag_32_63>:
  *         @arg @ref LL_EXTI_LINE_41
  * @note   (*): Available in some devices
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_ClearFlag_32_63(uint32_t ExtiLine)
{
 8006bc8:	b480      	push	{r7}
 8006bca:	b083      	sub	sp, #12
 8006bcc:	af00      	add	r7, sp, #0
 8006bce:	6078      	str	r0, [r7, #4]
  WRITE_REG(EXTI->PR2, ExtiLine);
 8006bd0:	4a04      	ldr	r2, [pc, #16]	; (8006be4 <LL_EXTI_ClearFlag_32_63+0x1c>)
 8006bd2:	687b      	ldr	r3, [r7, #4]
 8006bd4:	6353      	str	r3, [r2, #52]	; 0x34
}
 8006bd6:	bf00      	nop
 8006bd8:	370c      	adds	r7, #12
 8006bda:	46bd      	mov	sp, r7
 8006bdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006be0:	4770      	bx	lr
 8006be2:	bf00      	nop
 8006be4:	40010400 	.word	0x40010400

08006be8 <HAL_COMP_Init>:
  *         To unlock the configuration, perform a system reset.
  * @param  hcomp  COMP handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_COMP_Init(COMP_HandleTypeDef *hcomp)
{
 8006be8:	b580      	push	{r7, lr}
 8006bea:	b088      	sub	sp, #32
 8006bec:	af00      	add	r7, sp, #0
 8006bee:	6078      	str	r0, [r7, #4]
  uint32_t tmp_csr;
  uint32_t exti_line;
  uint32_t comp_voltage_scaler_initialized; /* Value "0" if comparator voltage scaler is not initialized */
  __IO uint32_t wait_loop_index = 0UL;
 8006bf0:	2300      	movs	r3, #0
 8006bf2:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef status = HAL_OK;
 8006bf4:	2300      	movs	r3, #0
 8006bf6:	77fb      	strb	r3, [r7, #31]

  /* Check the COMP handle allocation and lock status */
  if(hcomp == NULL)
 8006bf8:	687b      	ldr	r3, [r7, #4]
 8006bfa:	2b00      	cmp	r3, #0
 8006bfc:	d102      	bne.n	8006c04 <HAL_COMP_Init+0x1c>
  {
    status = HAL_ERROR;
 8006bfe:	2301      	movs	r3, #1
 8006c00:	77fb      	strb	r3, [r7, #31]
 8006c02:	e180      	b.n	8006f06 <HAL_COMP_Init+0x31e>
  }
  else if(__HAL_COMP_IS_LOCKED(hcomp))
 8006c04:	687b      	ldr	r3, [r7, #4]
 8006c06:	681b      	ldr	r3, [r3, #0]
 8006c08:	681b      	ldr	r3, [r3, #0]
 8006c0a:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8006c0e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8006c12:	d102      	bne.n	8006c1a <HAL_COMP_Init+0x32>
  {
    status = HAL_ERROR;
 8006c14:	2301      	movs	r3, #1
 8006c16:	77fb      	strb	r3, [r7, #31]
 8006c18:	e175      	b.n	8006f06 <HAL_COMP_Init+0x31e>
    assert_param(IS_COMP_OUTPUTPOL(hcomp->Init.OutputPol));
    assert_param(IS_COMP_HYSTERESIS(hcomp->Init.Hysteresis));
    assert_param(IS_COMP_BLANKINGSRC_INSTANCE(hcomp->Instance, hcomp->Init.BlankingSrce));
    assert_param(IS_COMP_TRIGGERMODE(hcomp->Init.TriggerMode));

    if(hcomp->State == HAL_COMP_STATE_RESET)
 8006c1a:	687b      	ldr	r3, [r7, #4]
 8006c1c:	7f5b      	ldrb	r3, [r3, #29]
 8006c1e:	b2db      	uxtb	r3, r3
 8006c20:	2b00      	cmp	r3, #0
 8006c22:	d108      	bne.n	8006c36 <HAL_COMP_Init+0x4e>
    {
      /* Allocate lock resource and initialize it */
      hcomp->Lock = HAL_UNLOCKED;
 8006c24:	687b      	ldr	r3, [r7, #4]
 8006c26:	2200      	movs	r2, #0
 8006c28:	771a      	strb	r2, [r3, #28]

      /* Set COMP error code to none */
      COMP_CLEAR_ERRORCODE(hcomp);
 8006c2a:	687b      	ldr	r3, [r7, #4]
 8006c2c:	2200      	movs	r2, #0
 8006c2e:	621a      	str	r2, [r3, #32]
#else
      /* Init the low level hardware */
      /* Note: Internal control clock of the comparators must                 */
      /*       be enabled in "HAL_COMP_MspInit()"                             */
      /*       using "__HAL_RCC_SYSCFG_CLK_ENABLE()".                         */
      HAL_COMP_MspInit(hcomp);
 8006c30:	6878      	ldr	r0, [r7, #4]
 8006c32:	f7fd f8d9 	bl	8003de8 <HAL_COMP_MspInit>
#endif /* USE_HAL_COMP_REGISTER_CALLBACKS */
    }

    /* Memorize voltage scaler state before initialization */
    comp_voltage_scaler_initialized = READ_BIT(hcomp->Instance->CSR, COMP_CSR_SCALEN);
 8006c36:	687b      	ldr	r3, [r7, #4]
 8006c38:	681b      	ldr	r3, [r3, #0]
 8006c3a:	681b      	ldr	r3, [r3, #0]
 8006c3c:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8006c40:	61bb      	str	r3, [r7, #24]

    /* Set COMP parameters */
    tmp_csr = (  hcomp->Init.InputMinus
 8006c42:	687b      	ldr	r3, [r7, #4]
 8006c44:	689a      	ldr	r2, [r3, #8]
               | hcomp->Init.InputPlus
 8006c46:	687b      	ldr	r3, [r7, #4]
 8006c48:	685b      	ldr	r3, [r3, #4]
 8006c4a:	431a      	orrs	r2, r3
               | hcomp->Init.BlankingSrce
 8006c4c:	687b      	ldr	r3, [r7, #4]
 8006c4e:	695b      	ldr	r3, [r3, #20]
 8006c50:	431a      	orrs	r2, r3
               | hcomp->Init.Hysteresis
 8006c52:	687b      	ldr	r3, [r7, #4]
 8006c54:	68db      	ldr	r3, [r3, #12]
 8006c56:	431a      	orrs	r2, r3
               | hcomp->Init.OutputPol
 8006c58:	687b      	ldr	r3, [r7, #4]
 8006c5a:	691b      	ldr	r3, [r3, #16]
    tmp_csr = (  hcomp->Init.InputMinus
 8006c5c:	4313      	orrs	r3, r2
 8006c5e:	617b      	str	r3, [r7, #20]
              );

    /* Set parameters in COMP register */
    /* Note: Update all bits except read-only, lock and enable bits */
    MODIFY_REG(hcomp->Instance->CSR,
 8006c60:	687b      	ldr	r3, [r7, #4]
 8006c62:	681b      	ldr	r3, [r3, #0]
 8006c64:	681a      	ldr	r2, [r3, #0]
 8006c66:	4b98      	ldr	r3, [pc, #608]	; (8006ec8 <HAL_COMP_Init+0x2e0>)
 8006c68:	4013      	ands	r3, r2
 8006c6a:	687a      	ldr	r2, [r7, #4]
 8006c6c:	6812      	ldr	r2, [r2, #0]
 8006c6e:	6979      	ldr	r1, [r7, #20]
 8006c70:	430b      	orrs	r3, r1
 8006c72:	6013      	str	r3, [r2, #0]
               tmp_csr
              );

    /* Delay for COMP scaler bridge voltage stabilization */
    /* Apply the delay if voltage scaler bridge is required and not already enabled */
    if ((READ_BIT(hcomp->Instance->CSR, COMP_CSR_SCALEN) != 0UL) &&
 8006c74:	687b      	ldr	r3, [r7, #4]
 8006c76:	681b      	ldr	r3, [r3, #0]
 8006c78:	681b      	ldr	r3, [r3, #0]
 8006c7a:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8006c7e:	2b00      	cmp	r3, #0
 8006c80:	d015      	beq.n	8006cae <HAL_COMP_Init+0xc6>
 8006c82:	69bb      	ldr	r3, [r7, #24]
 8006c84:	2b00      	cmp	r3, #0
 8006c86:	d112      	bne.n	8006cae <HAL_COMP_Init+0xc6>
    {
      /* Wait loop initialization and execution */
      /* Note: Variable divided by 2 to compensate partially              */
      /*       CPU processing cycles, scaling in us split to not          */
      /*       exceed 32 bits register capacity and handle low frequency. */
      wait_loop_index = ((COMP_DELAY_VOLTAGE_SCALER_STAB_US / 10UL) * (SystemCoreClock / (100000UL * 2UL)));
 8006c88:	4b90      	ldr	r3, [pc, #576]	; (8006ecc <HAL_COMP_Init+0x2e4>)
 8006c8a:	681b      	ldr	r3, [r3, #0]
 8006c8c:	099b      	lsrs	r3, r3, #6
 8006c8e:	4a90      	ldr	r2, [pc, #576]	; (8006ed0 <HAL_COMP_Init+0x2e8>)
 8006c90:	fba2 2303 	umull	r2, r3, r2, r3
 8006c94:	099a      	lsrs	r2, r3, #6
 8006c96:	4613      	mov	r3, r2
 8006c98:	009b      	lsls	r3, r3, #2
 8006c9a:	4413      	add	r3, r2
 8006c9c:	009b      	lsls	r3, r3, #2
 8006c9e:	60fb      	str	r3, [r7, #12]
      while(wait_loop_index != 0UL)
 8006ca0:	e002      	b.n	8006ca8 <HAL_COMP_Init+0xc0>
      {
        wait_loop_index--;
 8006ca2:	68fb      	ldr	r3, [r7, #12]
 8006ca4:	3b01      	subs	r3, #1
 8006ca6:	60fb      	str	r3, [r7, #12]
      while(wait_loop_index != 0UL)
 8006ca8:	68fb      	ldr	r3, [r7, #12]
 8006caa:	2b00      	cmp	r3, #0
 8006cac:	d1f9      	bne.n	8006ca2 <HAL_COMP_Init+0xba>
      }
    }

    /* Get the EXTI line corresponding to the selected COMP instance */
    exti_line = COMP_GET_EXTI_LINE(hcomp->Instance);
 8006cae:	687b      	ldr	r3, [r7, #4]
 8006cb0:	681b      	ldr	r3, [r3, #0]
 8006cb2:	4a88      	ldr	r2, [pc, #544]	; (8006ed4 <HAL_COMP_Init+0x2ec>)
 8006cb4:	4293      	cmp	r3, r2
 8006cb6:	d028      	beq.n	8006d0a <HAL_COMP_Init+0x122>
 8006cb8:	687b      	ldr	r3, [r7, #4]
 8006cba:	681b      	ldr	r3, [r3, #0]
 8006cbc:	4a86      	ldr	r2, [pc, #536]	; (8006ed8 <HAL_COMP_Init+0x2f0>)
 8006cbe:	4293      	cmp	r3, r2
 8006cc0:	d020      	beq.n	8006d04 <HAL_COMP_Init+0x11c>
 8006cc2:	687b      	ldr	r3, [r7, #4]
 8006cc4:	681b      	ldr	r3, [r3, #0]
 8006cc6:	4a85      	ldr	r2, [pc, #532]	; (8006edc <HAL_COMP_Init+0x2f4>)
 8006cc8:	4293      	cmp	r3, r2
 8006cca:	d018      	beq.n	8006cfe <HAL_COMP_Init+0x116>
 8006ccc:	687b      	ldr	r3, [r7, #4]
 8006cce:	681b      	ldr	r3, [r3, #0]
 8006cd0:	4a83      	ldr	r2, [pc, #524]	; (8006ee0 <HAL_COMP_Init+0x2f8>)
 8006cd2:	4293      	cmp	r3, r2
 8006cd4:	d010      	beq.n	8006cf8 <HAL_COMP_Init+0x110>
 8006cd6:	687b      	ldr	r3, [r7, #4]
 8006cd8:	681b      	ldr	r3, [r3, #0]
 8006cda:	4a82      	ldr	r2, [pc, #520]	; (8006ee4 <HAL_COMP_Init+0x2fc>)
 8006cdc:	4293      	cmp	r3, r2
 8006cde:	d008      	beq.n	8006cf2 <HAL_COMP_Init+0x10a>
 8006ce0:	687b      	ldr	r3, [r7, #4]
 8006ce2:	681b      	ldr	r3, [r3, #0]
 8006ce4:	4a80      	ldr	r2, [pc, #512]	; (8006ee8 <HAL_COMP_Init+0x300>)
 8006ce6:	4293      	cmp	r3, r2
 8006ce8:	d101      	bne.n	8006cee <HAL_COMP_Init+0x106>
 8006cea:	2301      	movs	r3, #1
 8006cec:	e00f      	b.n	8006d0e <HAL_COMP_Init+0x126>
 8006cee:	2302      	movs	r3, #2
 8006cf0:	e00d      	b.n	8006d0e <HAL_COMP_Init+0x126>
 8006cf2:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8006cf6:	e00a      	b.n	8006d0e <HAL_COMP_Init+0x126>
 8006cf8:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8006cfc:	e007      	b.n	8006d0e <HAL_COMP_Init+0x126>
 8006cfe:	f04f 5300 	mov.w	r3, #536870912	; 0x20000000
 8006d02:	e004      	b.n	8006d0e <HAL_COMP_Init+0x126>
 8006d04:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8006d08:	e001      	b.n	8006d0e <HAL_COMP_Init+0x126>
 8006d0a:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8006d0e:	613b      	str	r3, [r7, #16]

    /* Manage EXTI settings */
    if((hcomp->Init.TriggerMode & (COMP_EXTI_IT | COMP_EXTI_EVENT)) != 0UL)
 8006d10:	687b      	ldr	r3, [r7, #4]
 8006d12:	699b      	ldr	r3, [r3, #24]
 8006d14:	f003 0303 	and.w	r3, r3, #3
 8006d18:	2b00      	cmp	r3, #0
 8006d1a:	f000 80b6 	beq.w	8006e8a <HAL_COMP_Init+0x2a2>
    {
      /* Configure EXTI rising edge */
      if((hcomp->Init.TriggerMode & COMP_EXTI_RISING) != 0UL)
 8006d1e:	687b      	ldr	r3, [r7, #4]
 8006d20:	699b      	ldr	r3, [r3, #24]
 8006d22:	f003 0310 	and.w	r3, r3, #16
 8006d26:	2b00      	cmp	r3, #0
 8006d28:	d011      	beq.n	8006d4e <HAL_COMP_Init+0x166>
      {
#if defined(STM32G474xx) || defined(STM32G484xx) || defined(STM32G473xx) || defined(STM32G483xx)
        if((hcomp->Instance == COMP6) || (hcomp->Instance == COMP7))
 8006d2a:	687b      	ldr	r3, [r7, #4]
 8006d2c:	681b      	ldr	r3, [r3, #0]
 8006d2e:	4a6e      	ldr	r2, [pc, #440]	; (8006ee8 <HAL_COMP_Init+0x300>)
 8006d30:	4293      	cmp	r3, r2
 8006d32:	d004      	beq.n	8006d3e <HAL_COMP_Init+0x156>
 8006d34:	687b      	ldr	r3, [r7, #4]
 8006d36:	681b      	ldr	r3, [r3, #0]
 8006d38:	4a6c      	ldr	r2, [pc, #432]	; (8006eec <HAL_COMP_Init+0x304>)
 8006d3a:	4293      	cmp	r3, r2
 8006d3c:	d103      	bne.n	8006d46 <HAL_COMP_Init+0x15e>
        {
          LL_EXTI_EnableRisingTrig_32_63(exti_line);
 8006d3e:	6938      	ldr	r0, [r7, #16]
 8006d40:	f7ff feac 	bl	8006a9c <LL_EXTI_EnableRisingTrig_32_63>
 8006d44:	e014      	b.n	8006d70 <HAL_COMP_Init+0x188>
        }
        else
        {
          LL_EXTI_EnableRisingTrig_0_31(exti_line);
 8006d46:	6938      	ldr	r0, [r7, #16]
 8006d48:	f7ff fe96 	bl	8006a78 <LL_EXTI_EnableRisingTrig_0_31>
 8006d4c:	e010      	b.n	8006d70 <HAL_COMP_Init+0x188>
#endif
      }
      else
      {
#if defined(STM32G474xx) || defined(STM32G484xx) || defined(STM32G473xx) || defined(STM32G483xx)
        if((hcomp->Instance == COMP6) || (hcomp->Instance == COMP7))
 8006d4e:	687b      	ldr	r3, [r7, #4]
 8006d50:	681b      	ldr	r3, [r3, #0]
 8006d52:	4a65      	ldr	r2, [pc, #404]	; (8006ee8 <HAL_COMP_Init+0x300>)
 8006d54:	4293      	cmp	r3, r2
 8006d56:	d004      	beq.n	8006d62 <HAL_COMP_Init+0x17a>
 8006d58:	687b      	ldr	r3, [r7, #4]
 8006d5a:	681b      	ldr	r3, [r3, #0]
 8006d5c:	4a63      	ldr	r2, [pc, #396]	; (8006eec <HAL_COMP_Init+0x304>)
 8006d5e:	4293      	cmp	r3, r2
 8006d60:	d103      	bne.n	8006d6a <HAL_COMP_Init+0x182>
        {
          LL_EXTI_DisableRisingTrig_32_63(exti_line);
 8006d62:	6938      	ldr	r0, [r7, #16]
 8006d64:	f7ff fec0 	bl	8006ae8 <LL_EXTI_DisableRisingTrig_32_63>
 8006d68:	e002      	b.n	8006d70 <HAL_COMP_Init+0x188>
        }
        else
        {
          LL_EXTI_DisableRisingTrig_0_31(exti_line);
 8006d6a:	6938      	ldr	r0, [r7, #16]
 8006d6c:	f7ff fea8 	bl	8006ac0 <LL_EXTI_DisableRisingTrig_0_31>
        LL_EXTI_DisableRisingTrig_0_31(exti_line);
#endif
      }

      /* Configure EXTI falling edge */
      if((hcomp->Init.TriggerMode & COMP_EXTI_FALLING) != 0UL)
 8006d70:	687b      	ldr	r3, [r7, #4]
 8006d72:	699b      	ldr	r3, [r3, #24]
 8006d74:	f003 0320 	and.w	r3, r3, #32
 8006d78:	2b00      	cmp	r3, #0
 8006d7a:	d011      	beq.n	8006da0 <HAL_COMP_Init+0x1b8>
      {
#if defined(STM32G474xx) || defined(STM32G484xx) || defined(STM32G473xx) || defined(STM32G483xx)
        if((hcomp->Instance == COMP6) || (hcomp->Instance == COMP7))
 8006d7c:	687b      	ldr	r3, [r7, #4]
 8006d7e:	681b      	ldr	r3, [r3, #0]
 8006d80:	4a59      	ldr	r2, [pc, #356]	; (8006ee8 <HAL_COMP_Init+0x300>)
 8006d82:	4293      	cmp	r3, r2
 8006d84:	d004      	beq.n	8006d90 <HAL_COMP_Init+0x1a8>
 8006d86:	687b      	ldr	r3, [r7, #4]
 8006d88:	681b      	ldr	r3, [r3, #0]
 8006d8a:	4a58      	ldr	r2, [pc, #352]	; (8006eec <HAL_COMP_Init+0x304>)
 8006d8c:	4293      	cmp	r3, r2
 8006d8e:	d103      	bne.n	8006d98 <HAL_COMP_Init+0x1b0>
        {
          LL_EXTI_EnableFallingTrig_32_63(exti_line);
 8006d90:	6938      	ldr	r0, [r7, #16]
 8006d92:	f7ff fecf 	bl	8006b34 <LL_EXTI_EnableFallingTrig_32_63>
 8006d96:	e014      	b.n	8006dc2 <HAL_COMP_Init+0x1da>
        }
        else
        {
          LL_EXTI_EnableFallingTrig_0_31(exti_line);
 8006d98:	6938      	ldr	r0, [r7, #16]
 8006d9a:	f7ff feb9 	bl	8006b10 <LL_EXTI_EnableFallingTrig_0_31>
 8006d9e:	e010      	b.n	8006dc2 <HAL_COMP_Init+0x1da>
#endif
      }
      else
      {
#if defined(STM32G474xx) || defined(STM32G484xx) || defined(STM32G473xx) || defined(STM32G483xx)
        if((hcomp->Instance == COMP6) || (hcomp->Instance == COMP7))
 8006da0:	687b      	ldr	r3, [r7, #4]
 8006da2:	681b      	ldr	r3, [r3, #0]
 8006da4:	4a50      	ldr	r2, [pc, #320]	; (8006ee8 <HAL_COMP_Init+0x300>)
 8006da6:	4293      	cmp	r3, r2
 8006da8:	d004      	beq.n	8006db4 <HAL_COMP_Init+0x1cc>
 8006daa:	687b      	ldr	r3, [r7, #4]
 8006dac:	681b      	ldr	r3, [r3, #0]
 8006dae:	4a4f      	ldr	r2, [pc, #316]	; (8006eec <HAL_COMP_Init+0x304>)
 8006db0:	4293      	cmp	r3, r2
 8006db2:	d103      	bne.n	8006dbc <HAL_COMP_Init+0x1d4>
        {
          LL_EXTI_DisableFallingTrig_32_63(exti_line);
 8006db4:	6938      	ldr	r0, [r7, #16]
 8006db6:	f7ff fee3 	bl	8006b80 <LL_EXTI_DisableFallingTrig_32_63>
 8006dba:	e002      	b.n	8006dc2 <HAL_COMP_Init+0x1da>
        }
        else
        {
          LL_EXTI_DisableFallingTrig_0_31(exti_line);
 8006dbc:	6938      	ldr	r0, [r7, #16]
 8006dbe:	f7ff fecb 	bl	8006b58 <LL_EXTI_DisableFallingTrig_0_31>
#endif
      }

      /* Clear COMP EXTI pending bit (if any) */
#if defined(STM32G474xx) || defined(STM32G484xx) || defined(STM32G473xx) || defined(STM32G483xx)
      if((hcomp->Instance == COMP6) || (hcomp->Instance == COMP7))
 8006dc2:	687b      	ldr	r3, [r7, #4]
 8006dc4:	681b      	ldr	r3, [r3, #0]
 8006dc6:	4a48      	ldr	r2, [pc, #288]	; (8006ee8 <HAL_COMP_Init+0x300>)
 8006dc8:	4293      	cmp	r3, r2
 8006dca:	d004      	beq.n	8006dd6 <HAL_COMP_Init+0x1ee>
 8006dcc:	687b      	ldr	r3, [r7, #4]
 8006dce:	681b      	ldr	r3, [r3, #0]
 8006dd0:	4a46      	ldr	r2, [pc, #280]	; (8006eec <HAL_COMP_Init+0x304>)
 8006dd2:	4293      	cmp	r3, r2
 8006dd4:	d103      	bne.n	8006dde <HAL_COMP_Init+0x1f6>
      {
        LL_EXTI_ClearFlag_32_63(exti_line);
 8006dd6:	6938      	ldr	r0, [r7, #16]
 8006dd8:	f7ff fef6 	bl	8006bc8 <LL_EXTI_ClearFlag_32_63>
 8006ddc:	e002      	b.n	8006de4 <HAL_COMP_Init+0x1fc>
      }
      else
      {
        LL_EXTI_ClearFlag_0_31(exti_line);
 8006dde:	6938      	ldr	r0, [r7, #16]
 8006de0:	f7ff fee2 	bl	8006ba8 <LL_EXTI_ClearFlag_0_31>
#else
      LL_EXTI_ClearFlag_0_31(exti_line);
#endif

      /* Configure EXTI event mode */
      if((hcomp->Init.TriggerMode & COMP_EXTI_EVENT) != 0UL)
 8006de4:	687b      	ldr	r3, [r7, #4]
 8006de6:	699b      	ldr	r3, [r3, #24]
 8006de8:	f003 0302 	and.w	r3, r3, #2
 8006dec:	2b00      	cmp	r3, #0
 8006dee:	d011      	beq.n	8006e14 <HAL_COMP_Init+0x22c>
      {
#if defined(STM32G474xx) || defined(STM32G484xx) || defined(STM32G473xx) || defined(STM32G483xx)
        if((hcomp->Instance == COMP6) || (hcomp->Instance == COMP7))
 8006df0:	687b      	ldr	r3, [r7, #4]
 8006df2:	681b      	ldr	r3, [r3, #0]
 8006df4:	4a3c      	ldr	r2, [pc, #240]	; (8006ee8 <HAL_COMP_Init+0x300>)
 8006df6:	4293      	cmp	r3, r2
 8006df8:	d004      	beq.n	8006e04 <HAL_COMP_Init+0x21c>
 8006dfa:	687b      	ldr	r3, [r7, #4]
 8006dfc:	681b      	ldr	r3, [r3, #0]
 8006dfe:	4a3b      	ldr	r2, [pc, #236]	; (8006eec <HAL_COMP_Init+0x304>)
 8006e00:	4293      	cmp	r3, r2
 8006e02:	d103      	bne.n	8006e0c <HAL_COMP_Init+0x224>
        {
          LL_EXTI_EnableEvent_32_63(exti_line);
 8006e04:	6938      	ldr	r0, [r7, #16]
 8006e06:	f7ff fdfd 	bl	8006a04 <LL_EXTI_EnableEvent_32_63>
 8006e0a:	e014      	b.n	8006e36 <HAL_COMP_Init+0x24e>
        }
        else
        {
          LL_EXTI_EnableEvent_0_31(exti_line);
 8006e0c:	6938      	ldr	r0, [r7, #16]
 8006e0e:	f7ff fde7 	bl	80069e0 <LL_EXTI_EnableEvent_0_31>
 8006e12:	e010      	b.n	8006e36 <HAL_COMP_Init+0x24e>
#endif
      }
      else
      {
#if defined(STM32G474xx) || defined(STM32G484xx) || defined(STM32G473xx) || defined(STM32G483xx)
        if((hcomp->Instance == COMP6) || (hcomp->Instance == COMP7))
 8006e14:	687b      	ldr	r3, [r7, #4]
 8006e16:	681b      	ldr	r3, [r3, #0]
 8006e18:	4a33      	ldr	r2, [pc, #204]	; (8006ee8 <HAL_COMP_Init+0x300>)
 8006e1a:	4293      	cmp	r3, r2
 8006e1c:	d004      	beq.n	8006e28 <HAL_COMP_Init+0x240>
 8006e1e:	687b      	ldr	r3, [r7, #4]
 8006e20:	681b      	ldr	r3, [r3, #0]
 8006e22:	4a32      	ldr	r2, [pc, #200]	; (8006eec <HAL_COMP_Init+0x304>)
 8006e24:	4293      	cmp	r3, r2
 8006e26:	d103      	bne.n	8006e30 <HAL_COMP_Init+0x248>
        {
          LL_EXTI_DisableEvent_32_63(exti_line);
 8006e28:	6938      	ldr	r0, [r7, #16]
 8006e2a:	f7ff fe11 	bl	8006a50 <LL_EXTI_DisableEvent_32_63>
 8006e2e:	e002      	b.n	8006e36 <HAL_COMP_Init+0x24e>
        }
        else
        {
          LL_EXTI_DisableEvent_0_31(exti_line);
 8006e30:	6938      	ldr	r0, [r7, #16]
 8006e32:	f7ff fdf9 	bl	8006a28 <LL_EXTI_DisableEvent_0_31>
        LL_EXTI_DisableEvent_0_31(exti_line);
#endif
      }

      /* Configure EXTI interrupt mode */
      if((hcomp->Init.TriggerMode & COMP_EXTI_IT) != 0UL)
 8006e36:	687b      	ldr	r3, [r7, #4]
 8006e38:	699b      	ldr	r3, [r3, #24]
 8006e3a:	f003 0301 	and.w	r3, r3, #1
 8006e3e:	2b00      	cmp	r3, #0
 8006e40:	d011      	beq.n	8006e66 <HAL_COMP_Init+0x27e>
      {
#if defined(STM32G474xx) || defined(STM32G484xx) || defined(STM32G473xx) || defined(STM32G483xx)
        if((hcomp->Instance == COMP6) || (hcomp->Instance == COMP7))
 8006e42:	687b      	ldr	r3, [r7, #4]
 8006e44:	681b      	ldr	r3, [r3, #0]
 8006e46:	4a28      	ldr	r2, [pc, #160]	; (8006ee8 <HAL_COMP_Init+0x300>)
 8006e48:	4293      	cmp	r3, r2
 8006e4a:	d004      	beq.n	8006e56 <HAL_COMP_Init+0x26e>
 8006e4c:	687b      	ldr	r3, [r7, #4]
 8006e4e:	681b      	ldr	r3, [r3, #0]
 8006e50:	4a26      	ldr	r2, [pc, #152]	; (8006eec <HAL_COMP_Init+0x304>)
 8006e52:	4293      	cmp	r3, r2
 8006e54:	d103      	bne.n	8006e5e <HAL_COMP_Init+0x276>
        {
          LL_EXTI_EnableIT_32_63(exti_line);
 8006e56:	6938      	ldr	r0, [r7, #16]
 8006e58:	f7ff fd88 	bl	800696c <LL_EXTI_EnableIT_32_63>
 8006e5c:	e04b      	b.n	8006ef6 <HAL_COMP_Init+0x30e>
        }
        else
        {
          LL_EXTI_EnableIT_0_31(exti_line);
 8006e5e:	6938      	ldr	r0, [r7, #16]
 8006e60:	f7ff fd72 	bl	8006948 <LL_EXTI_EnableIT_0_31>
 8006e64:	e047      	b.n	8006ef6 <HAL_COMP_Init+0x30e>
#endif
      }
      else
      {
#if defined(STM32G474xx) || defined(STM32G484xx) || defined(STM32G473xx) || defined(STM32G483xx)
        if((hcomp->Instance == COMP6) || (hcomp->Instance == COMP7))
 8006e66:	687b      	ldr	r3, [r7, #4]
 8006e68:	681b      	ldr	r3, [r3, #0]
 8006e6a:	4a1f      	ldr	r2, [pc, #124]	; (8006ee8 <HAL_COMP_Init+0x300>)
 8006e6c:	4293      	cmp	r3, r2
 8006e6e:	d004      	beq.n	8006e7a <HAL_COMP_Init+0x292>
 8006e70:	687b      	ldr	r3, [r7, #4]
 8006e72:	681b      	ldr	r3, [r3, #0]
 8006e74:	4a1d      	ldr	r2, [pc, #116]	; (8006eec <HAL_COMP_Init+0x304>)
 8006e76:	4293      	cmp	r3, r2
 8006e78:	d103      	bne.n	8006e82 <HAL_COMP_Init+0x29a>
        {
          LL_EXTI_DisableIT_32_63(exti_line);
 8006e7a:	6938      	ldr	r0, [r7, #16]
 8006e7c:	f7ff fd9c 	bl	80069b8 <LL_EXTI_DisableIT_32_63>
 8006e80:	e039      	b.n	8006ef6 <HAL_COMP_Init+0x30e>
        }
        else
        {
          LL_EXTI_DisableIT_0_31(exti_line);
 8006e82:	6938      	ldr	r0, [r7, #16]
 8006e84:	f7ff fd84 	bl	8006990 <LL_EXTI_DisableIT_0_31>
 8006e88:	e035      	b.n	8006ef6 <HAL_COMP_Init+0x30e>
    }
    else
    {
      /* Disable EXTI event mode */
#if defined(STM32G474xx) || defined(STM32G484xx) || defined(STM32G473xx) || defined(STM32G483xx)
      if((hcomp->Instance == COMP6) || (hcomp->Instance == COMP7))
 8006e8a:	687b      	ldr	r3, [r7, #4]
 8006e8c:	681b      	ldr	r3, [r3, #0]
 8006e8e:	4a16      	ldr	r2, [pc, #88]	; (8006ee8 <HAL_COMP_Init+0x300>)
 8006e90:	4293      	cmp	r3, r2
 8006e92:	d004      	beq.n	8006e9e <HAL_COMP_Init+0x2b6>
 8006e94:	687b      	ldr	r3, [r7, #4]
 8006e96:	681b      	ldr	r3, [r3, #0]
 8006e98:	4a14      	ldr	r2, [pc, #80]	; (8006eec <HAL_COMP_Init+0x304>)
 8006e9a:	4293      	cmp	r3, r2
 8006e9c:	d103      	bne.n	8006ea6 <HAL_COMP_Init+0x2be>
      {
        LL_EXTI_DisableEvent_32_63(exti_line);
 8006e9e:	6938      	ldr	r0, [r7, #16]
 8006ea0:	f7ff fdd6 	bl	8006a50 <LL_EXTI_DisableEvent_32_63>
 8006ea4:	e002      	b.n	8006eac <HAL_COMP_Init+0x2c4>
      }
      else
      {
        LL_EXTI_DisableEvent_0_31(exti_line);
 8006ea6:	6938      	ldr	r0, [r7, #16]
 8006ea8:	f7ff fdbe 	bl	8006a28 <LL_EXTI_DisableEvent_0_31>
      LL_EXTI_DisableEvent_0_31(exti_line);
#endif

      /* Disable EXTI interrupt mode */
#if defined(STM32G474xx) || defined(STM32G484xx) || defined(STM32G473xx) || defined(STM32G483xx)
      if((hcomp->Instance == COMP6) || (hcomp->Instance == COMP7))
 8006eac:	687b      	ldr	r3, [r7, #4]
 8006eae:	681b      	ldr	r3, [r3, #0]
 8006eb0:	4a0d      	ldr	r2, [pc, #52]	; (8006ee8 <HAL_COMP_Init+0x300>)
 8006eb2:	4293      	cmp	r3, r2
 8006eb4:	d004      	beq.n	8006ec0 <HAL_COMP_Init+0x2d8>
 8006eb6:	687b      	ldr	r3, [r7, #4]
 8006eb8:	681b      	ldr	r3, [r3, #0]
 8006eba:	4a0c      	ldr	r2, [pc, #48]	; (8006eec <HAL_COMP_Init+0x304>)
 8006ebc:	4293      	cmp	r3, r2
 8006ebe:	d117      	bne.n	8006ef0 <HAL_COMP_Init+0x308>
      {
        LL_EXTI_DisableIT_32_63(exti_line);
 8006ec0:	6938      	ldr	r0, [r7, #16]
 8006ec2:	f7ff fd79 	bl	80069b8 <LL_EXTI_DisableIT_32_63>
 8006ec6:	e016      	b.n	8006ef6 <HAL_COMP_Init+0x30e>
 8006ec8:	ff007e0f 	.word	0xff007e0f
 8006ecc:	200001d4 	.word	0x200001d4
 8006ed0:	053e2d63 	.word	0x053e2d63
 8006ed4:	40010200 	.word	0x40010200
 8006ed8:	40010204 	.word	0x40010204
 8006edc:	40010208 	.word	0x40010208
 8006ee0:	4001020c 	.word	0x4001020c
 8006ee4:	40010210 	.word	0x40010210
 8006ee8:	40010214 	.word	0x40010214
 8006eec:	40010218 	.word	0x40010218
      }
      else
      {
        LL_EXTI_DisableIT_0_31(exti_line);
 8006ef0:	6938      	ldr	r0, [r7, #16]
 8006ef2:	f7ff fd4d 	bl	8006990 <LL_EXTI_DisableIT_0_31>
    }

    /* Set HAL COMP handle state */
    /* Note: Transition from state reset to state ready,                      */
    /*       otherwise (coming from state ready or busy) no state update.     */
    if (hcomp->State == HAL_COMP_STATE_RESET)
 8006ef6:	687b      	ldr	r3, [r7, #4]
 8006ef8:	7f5b      	ldrb	r3, [r3, #29]
 8006efa:	b2db      	uxtb	r3, r3
 8006efc:	2b00      	cmp	r3, #0
 8006efe:	d102      	bne.n	8006f06 <HAL_COMP_Init+0x31e>
    {
      hcomp->State = HAL_COMP_STATE_READY;
 8006f00:	687b      	ldr	r3, [r7, #4]
 8006f02:	2201      	movs	r2, #1
 8006f04:	775a      	strb	r2, [r3, #29]
    }
  }

  return status;
 8006f06:	7ffb      	ldrb	r3, [r7, #31]
}
 8006f08:	4618      	mov	r0, r3
 8006f0a:	3720      	adds	r7, #32
 8006f0c:	46bd      	mov	sp, r7
 8006f0e:	bd80      	pop	{r7, pc}

08006f10 <__NVIC_SetPriorityGrouping>:
{
 8006f10:	b480      	push	{r7}
 8006f12:	b085      	sub	sp, #20
 8006f14:	af00      	add	r7, sp, #0
 8006f16:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8006f18:	687b      	ldr	r3, [r7, #4]
 8006f1a:	f003 0307 	and.w	r3, r3, #7
 8006f1e:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8006f20:	4b0c      	ldr	r3, [pc, #48]	; (8006f54 <__NVIC_SetPriorityGrouping+0x44>)
 8006f22:	68db      	ldr	r3, [r3, #12]
 8006f24:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8006f26:	68ba      	ldr	r2, [r7, #8]
 8006f28:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8006f2c:	4013      	ands	r3, r2
 8006f2e:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8006f30:	68fb      	ldr	r3, [r7, #12]
 8006f32:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8006f34:	68bb      	ldr	r3, [r7, #8]
 8006f36:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8006f38:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8006f3c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8006f40:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8006f42:	4a04      	ldr	r2, [pc, #16]	; (8006f54 <__NVIC_SetPriorityGrouping+0x44>)
 8006f44:	68bb      	ldr	r3, [r7, #8]
 8006f46:	60d3      	str	r3, [r2, #12]
}
 8006f48:	bf00      	nop
 8006f4a:	3714      	adds	r7, #20
 8006f4c:	46bd      	mov	sp, r7
 8006f4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f52:	4770      	bx	lr
 8006f54:	e000ed00 	.word	0xe000ed00

08006f58 <__NVIC_GetPriorityGrouping>:
{
 8006f58:	b480      	push	{r7}
 8006f5a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8006f5c:	4b04      	ldr	r3, [pc, #16]	; (8006f70 <__NVIC_GetPriorityGrouping+0x18>)
 8006f5e:	68db      	ldr	r3, [r3, #12]
 8006f60:	0a1b      	lsrs	r3, r3, #8
 8006f62:	f003 0307 	and.w	r3, r3, #7
}
 8006f66:	4618      	mov	r0, r3
 8006f68:	46bd      	mov	sp, r7
 8006f6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f6e:	4770      	bx	lr
 8006f70:	e000ed00 	.word	0xe000ed00

08006f74 <__NVIC_EnableIRQ>:
{
 8006f74:	b480      	push	{r7}
 8006f76:	b083      	sub	sp, #12
 8006f78:	af00      	add	r7, sp, #0
 8006f7a:	4603      	mov	r3, r0
 8006f7c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8006f7e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006f82:	2b00      	cmp	r3, #0
 8006f84:	db0b      	blt.n	8006f9e <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8006f86:	79fb      	ldrb	r3, [r7, #7]
 8006f88:	f003 021f 	and.w	r2, r3, #31
 8006f8c:	4907      	ldr	r1, [pc, #28]	; (8006fac <__NVIC_EnableIRQ+0x38>)
 8006f8e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006f92:	095b      	lsrs	r3, r3, #5
 8006f94:	2001      	movs	r0, #1
 8006f96:	fa00 f202 	lsl.w	r2, r0, r2
 8006f9a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8006f9e:	bf00      	nop
 8006fa0:	370c      	adds	r7, #12
 8006fa2:	46bd      	mov	sp, r7
 8006fa4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fa8:	4770      	bx	lr
 8006faa:	bf00      	nop
 8006fac:	e000e100 	.word	0xe000e100

08006fb0 <__NVIC_SetPriority>:
{
 8006fb0:	b480      	push	{r7}
 8006fb2:	b083      	sub	sp, #12
 8006fb4:	af00      	add	r7, sp, #0
 8006fb6:	4603      	mov	r3, r0
 8006fb8:	6039      	str	r1, [r7, #0]
 8006fba:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8006fbc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006fc0:	2b00      	cmp	r3, #0
 8006fc2:	db0a      	blt.n	8006fda <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8006fc4:	683b      	ldr	r3, [r7, #0]
 8006fc6:	b2da      	uxtb	r2, r3
 8006fc8:	490c      	ldr	r1, [pc, #48]	; (8006ffc <__NVIC_SetPriority+0x4c>)
 8006fca:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006fce:	0112      	lsls	r2, r2, #4
 8006fd0:	b2d2      	uxtb	r2, r2
 8006fd2:	440b      	add	r3, r1
 8006fd4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8006fd8:	e00a      	b.n	8006ff0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8006fda:	683b      	ldr	r3, [r7, #0]
 8006fdc:	b2da      	uxtb	r2, r3
 8006fde:	4908      	ldr	r1, [pc, #32]	; (8007000 <__NVIC_SetPriority+0x50>)
 8006fe0:	79fb      	ldrb	r3, [r7, #7]
 8006fe2:	f003 030f 	and.w	r3, r3, #15
 8006fe6:	3b04      	subs	r3, #4
 8006fe8:	0112      	lsls	r2, r2, #4
 8006fea:	b2d2      	uxtb	r2, r2
 8006fec:	440b      	add	r3, r1
 8006fee:	761a      	strb	r2, [r3, #24]
}
 8006ff0:	bf00      	nop
 8006ff2:	370c      	adds	r7, #12
 8006ff4:	46bd      	mov	sp, r7
 8006ff6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ffa:	4770      	bx	lr
 8006ffc:	e000e100 	.word	0xe000e100
 8007000:	e000ed00 	.word	0xe000ed00

08007004 <NVIC_EncodePriority>:
{
 8007004:	b480      	push	{r7}
 8007006:	b089      	sub	sp, #36	; 0x24
 8007008:	af00      	add	r7, sp, #0
 800700a:	60f8      	str	r0, [r7, #12]
 800700c:	60b9      	str	r1, [r7, #8]
 800700e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8007010:	68fb      	ldr	r3, [r7, #12]
 8007012:	f003 0307 	and.w	r3, r3, #7
 8007016:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8007018:	69fb      	ldr	r3, [r7, #28]
 800701a:	f1c3 0307 	rsb	r3, r3, #7
 800701e:	2b04      	cmp	r3, #4
 8007020:	bf28      	it	cs
 8007022:	2304      	movcs	r3, #4
 8007024:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8007026:	69fb      	ldr	r3, [r7, #28]
 8007028:	3304      	adds	r3, #4
 800702a:	2b06      	cmp	r3, #6
 800702c:	d902      	bls.n	8007034 <NVIC_EncodePriority+0x30>
 800702e:	69fb      	ldr	r3, [r7, #28]
 8007030:	3b03      	subs	r3, #3
 8007032:	e000      	b.n	8007036 <NVIC_EncodePriority+0x32>
 8007034:	2300      	movs	r3, #0
 8007036:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8007038:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800703c:	69bb      	ldr	r3, [r7, #24]
 800703e:	fa02 f303 	lsl.w	r3, r2, r3
 8007042:	43da      	mvns	r2, r3
 8007044:	68bb      	ldr	r3, [r7, #8]
 8007046:	401a      	ands	r2, r3
 8007048:	697b      	ldr	r3, [r7, #20]
 800704a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800704c:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8007050:	697b      	ldr	r3, [r7, #20]
 8007052:	fa01 f303 	lsl.w	r3, r1, r3
 8007056:	43d9      	mvns	r1, r3
 8007058:	687b      	ldr	r3, [r7, #4]
 800705a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800705c:	4313      	orrs	r3, r2
}
 800705e:	4618      	mov	r0, r3
 8007060:	3724      	adds	r7, #36	; 0x24
 8007062:	46bd      	mov	sp, r7
 8007064:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007068:	4770      	bx	lr
	...

0800706c <SysTick_Config>:
{
 800706c:	b580      	push	{r7, lr}
 800706e:	b082      	sub	sp, #8
 8007070:	af00      	add	r7, sp, #0
 8007072:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8007074:	687b      	ldr	r3, [r7, #4]
 8007076:	3b01      	subs	r3, #1
 8007078:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800707c:	d301      	bcc.n	8007082 <SysTick_Config+0x16>
    return (1UL);                                                   /* Reload value impossible */
 800707e:	2301      	movs	r3, #1
 8007080:	e00f      	b.n	80070a2 <SysTick_Config+0x36>
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8007082:	4a0a      	ldr	r2, [pc, #40]	; (80070ac <SysTick_Config+0x40>)
 8007084:	687b      	ldr	r3, [r7, #4]
 8007086:	3b01      	subs	r3, #1
 8007088:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800708a:	210f      	movs	r1, #15
 800708c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8007090:	f7ff ff8e 	bl	8006fb0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8007094:	4b05      	ldr	r3, [pc, #20]	; (80070ac <SysTick_Config+0x40>)
 8007096:	2200      	movs	r2, #0
 8007098:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800709a:	4b04      	ldr	r3, [pc, #16]	; (80070ac <SysTick_Config+0x40>)
 800709c:	2207      	movs	r2, #7
 800709e:	601a      	str	r2, [r3, #0]
  return (0UL);                                                     /* Function successful */
 80070a0:	2300      	movs	r3, #0
}
 80070a2:	4618      	mov	r0, r3
 80070a4:	3708      	adds	r7, #8
 80070a6:	46bd      	mov	sp, r7
 80070a8:	bd80      	pop	{r7, pc}
 80070aa:	bf00      	nop
 80070ac:	e000e010 	.word	0xe000e010

080070b0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80070b0:	b580      	push	{r7, lr}
 80070b2:	b082      	sub	sp, #8
 80070b4:	af00      	add	r7, sp, #0
 80070b6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80070b8:	6878      	ldr	r0, [r7, #4]
 80070ba:	f7ff ff29 	bl	8006f10 <__NVIC_SetPriorityGrouping>
}
 80070be:	bf00      	nop
 80070c0:	3708      	adds	r7, #8
 80070c2:	46bd      	mov	sp, r7
 80070c4:	bd80      	pop	{r7, pc}

080070c6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80070c6:	b580      	push	{r7, lr}
 80070c8:	b086      	sub	sp, #24
 80070ca:	af00      	add	r7, sp, #0
 80070cc:	4603      	mov	r3, r0
 80070ce:	60b9      	str	r1, [r7, #8]
 80070d0:	607a      	str	r2, [r7, #4]
 80070d2:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80070d4:	f7ff ff40 	bl	8006f58 <__NVIC_GetPriorityGrouping>
 80070d8:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80070da:	687a      	ldr	r2, [r7, #4]
 80070dc:	68b9      	ldr	r1, [r7, #8]
 80070de:	6978      	ldr	r0, [r7, #20]
 80070e0:	f7ff ff90 	bl	8007004 <NVIC_EncodePriority>
 80070e4:	4602      	mov	r2, r0
 80070e6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80070ea:	4611      	mov	r1, r2
 80070ec:	4618      	mov	r0, r3
 80070ee:	f7ff ff5f 	bl	8006fb0 <__NVIC_SetPriority>
}
 80070f2:	bf00      	nop
 80070f4:	3718      	adds	r7, #24
 80070f6:	46bd      	mov	sp, r7
 80070f8:	bd80      	pop	{r7, pc}

080070fa <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80070fa:	b580      	push	{r7, lr}
 80070fc:	b082      	sub	sp, #8
 80070fe:	af00      	add	r7, sp, #0
 8007100:	4603      	mov	r3, r0
 8007102:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8007104:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8007108:	4618      	mov	r0, r3
 800710a:	f7ff ff33 	bl	8006f74 <__NVIC_EnableIRQ>
}
 800710e:	bf00      	nop
 8007110:	3708      	adds	r7, #8
 8007112:	46bd      	mov	sp, r7
 8007114:	bd80      	pop	{r7, pc}

08007116 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8007116:	b580      	push	{r7, lr}
 8007118:	b082      	sub	sp, #8
 800711a:	af00      	add	r7, sp, #0
 800711c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800711e:	6878      	ldr	r0, [r7, #4]
 8007120:	f7ff ffa4 	bl	800706c <SysTick_Config>
 8007124:	4603      	mov	r3, r0
}
 8007126:	4618      	mov	r0, r3
 8007128:	3708      	adds	r7, #8
 800712a:	46bd      	mov	sp, r7
 800712c:	bd80      	pop	{r7, pc}

0800712e <HAL_DAC_Init>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Init(DAC_HandleTypeDef *hdac)
{
 800712e:	b580      	push	{r7, lr}
 8007130:	b082      	sub	sp, #8
 8007132:	af00      	add	r7, sp, #0
 8007134:	6078      	str	r0, [r7, #4]
  /* Check DAC handle */
  if (hdac == NULL)
 8007136:	687b      	ldr	r3, [r7, #4]
 8007138:	2b00      	cmp	r3, #0
 800713a:	d101      	bne.n	8007140 <HAL_DAC_Init+0x12>
  {
    return HAL_ERROR;
 800713c:	2301      	movs	r3, #1
 800713e:	e014      	b.n	800716a <HAL_DAC_Init+0x3c>
  }
  /* Check the parameters */
  assert_param(IS_DAC_ALL_INSTANCE(hdac->Instance));

  if (hdac->State == HAL_DAC_STATE_RESET)
 8007140:	687b      	ldr	r3, [r7, #4]
 8007142:	791b      	ldrb	r3, [r3, #4]
 8007144:	b2db      	uxtb	r3, r3
 8007146:	2b00      	cmp	r3, #0
 8007148:	d105      	bne.n	8007156 <HAL_DAC_Init+0x28>
      hdac->MspInitCallback             = HAL_DAC_MspInit;
    }
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

    /* Allocate lock resource and initialize it */
    hdac->Lock = HAL_UNLOCKED;
 800714a:	687b      	ldr	r3, [r7, #4]
 800714c:	2200      	movs	r2, #0
 800714e:	715a      	strb	r2, [r3, #5]
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
    /* Init the low level hardware */
    hdac->MspInitCallback(hdac);
#else
    /* Init the low level hardware */
    HAL_DAC_MspInit(hdac);
 8007150:	6878      	ldr	r0, [r7, #4]
 8007152:	f7fc feff 	bl	8003f54 <HAL_DAC_MspInit>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
  }

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_BUSY;
 8007156:	687b      	ldr	r3, [r7, #4]
 8007158:	2202      	movs	r2, #2
 800715a:	711a      	strb	r2, [r3, #4]

  /* Set DAC error code to none */
  hdac->ErrorCode = HAL_DAC_ERROR_NONE;
 800715c:	687b      	ldr	r3, [r7, #4]
 800715e:	2200      	movs	r2, #0
 8007160:	611a      	str	r2, [r3, #16]

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_READY;
 8007162:	687b      	ldr	r3, [r7, #4]
 8007164:	2201      	movs	r2, #1
 8007166:	711a      	strb	r2, [r3, #4]

  /* Return function status */
  return HAL_OK;
 8007168:	2300      	movs	r3, #0
}
 800716a:	4618      	mov	r0, r3
 800716c:	3708      	adds	r7, #8
 800716e:	46bd      	mov	sp, r7
 8007170:	bd80      	pop	{r7, pc}

08007172 <HAL_DAC_Start>:
  *         (1) On this STM32 serie, parameter not available on all instances.
  *             Refer to device datasheet for channels availability.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Start(DAC_HandleTypeDef *hdac, uint32_t Channel)
{
 8007172:	b580      	push	{r7, lr}
 8007174:	b082      	sub	sp, #8
 8007176:	af00      	add	r7, sp, #0
 8007178:	6078      	str	r0, [r7, #4]
 800717a:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(hdac->Instance, Channel));

  /* Process locked */
  __HAL_LOCK(hdac);
 800717c:	687b      	ldr	r3, [r7, #4]
 800717e:	795b      	ldrb	r3, [r3, #5]
 8007180:	2b01      	cmp	r3, #1
 8007182:	d101      	bne.n	8007188 <HAL_DAC_Start+0x16>
 8007184:	2302      	movs	r3, #2
 8007186:	e043      	b.n	8007210 <HAL_DAC_Start+0x9e>
 8007188:	687b      	ldr	r3, [r7, #4]
 800718a:	2201      	movs	r2, #1
 800718c:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 800718e:	687b      	ldr	r3, [r7, #4]
 8007190:	2202      	movs	r2, #2
 8007192:	711a      	strb	r2, [r3, #4]

  /* Enable the Peripheral */
  __HAL_DAC_ENABLE(hdac, Channel);
 8007194:	687b      	ldr	r3, [r7, #4]
 8007196:	681b      	ldr	r3, [r3, #0]
 8007198:	6819      	ldr	r1, [r3, #0]
 800719a:	683b      	ldr	r3, [r7, #0]
 800719c:	f003 0310 	and.w	r3, r3, #16
 80071a0:	2201      	movs	r2, #1
 80071a2:	409a      	lsls	r2, r3
 80071a4:	687b      	ldr	r3, [r7, #4]
 80071a6:	681b      	ldr	r3, [r3, #0]
 80071a8:	430a      	orrs	r2, r1
 80071aa:	601a      	str	r2, [r3, #0]
  /* Ensure minimum wait before using peripheral after enabling it */
  HAL_Delay(1);
 80071ac:	2001      	movs	r0, #1
 80071ae:	f7fe fb4d 	bl	800584c <HAL_Delay>

  if (Channel == DAC_CHANNEL_1)
 80071b2:	683b      	ldr	r3, [r7, #0]
 80071b4:	2b00      	cmp	r3, #0
 80071b6:	d10f      	bne.n	80071d8 <HAL_DAC_Start+0x66>
  {
    /* Check if software trigger enabled */
    if ((hdac->Instance->CR & (DAC_CR_TEN1 | DAC_CR_TSEL1)) == DAC_TRIGGER_SOFTWARE)
 80071b8:	687b      	ldr	r3, [r7, #4]
 80071ba:	681b      	ldr	r3, [r3, #0]
 80071bc:	681b      	ldr	r3, [r3, #0]
 80071be:	f003 033e 	and.w	r3, r3, #62	; 0x3e
 80071c2:	2b02      	cmp	r3, #2
 80071c4:	d11d      	bne.n	8007202 <HAL_DAC_Start+0x90>
    {
      /* Enable the selected DAC software conversion */
      SET_BIT(hdac->Instance->SWTRIGR, DAC_SWTRIGR_SWTRIG1);
 80071c6:	687b      	ldr	r3, [r7, #4]
 80071c8:	681b      	ldr	r3, [r3, #0]
 80071ca:	685a      	ldr	r2, [r3, #4]
 80071cc:	687b      	ldr	r3, [r7, #4]
 80071ce:	681b      	ldr	r3, [r3, #0]
 80071d0:	f042 0201 	orr.w	r2, r2, #1
 80071d4:	605a      	str	r2, [r3, #4]
 80071d6:	e014      	b.n	8007202 <HAL_DAC_Start+0x90>
    }
  }
  else
  {
    /* Check if software trigger enabled */
    if ((hdac->Instance->CR & (DAC_CR_TEN2 | DAC_CR_TSEL2)) == (DAC_TRIGGER_SOFTWARE << (Channel & 0x10UL)))
 80071d8:	687b      	ldr	r3, [r7, #4]
 80071da:	681b      	ldr	r3, [r3, #0]
 80071dc:	681b      	ldr	r3, [r3, #0]
 80071de:	f403 1278 	and.w	r2, r3, #4063232	; 0x3e0000
 80071e2:	683b      	ldr	r3, [r7, #0]
 80071e4:	f003 0310 	and.w	r3, r3, #16
 80071e8:	2102      	movs	r1, #2
 80071ea:	fa01 f303 	lsl.w	r3, r1, r3
 80071ee:	429a      	cmp	r2, r3
 80071f0:	d107      	bne.n	8007202 <HAL_DAC_Start+0x90>
    {
      /* Enable the selected DAC software conversion*/
      SET_BIT(hdac->Instance->SWTRIGR, DAC_SWTRIGR_SWTRIG2);
 80071f2:	687b      	ldr	r3, [r7, #4]
 80071f4:	681b      	ldr	r3, [r3, #0]
 80071f6:	685a      	ldr	r2, [r3, #4]
 80071f8:	687b      	ldr	r3, [r7, #4]
 80071fa:	681b      	ldr	r3, [r3, #0]
 80071fc:	f042 0202 	orr.w	r2, r2, #2
 8007200:	605a      	str	r2, [r3, #4]
    }
  }

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 8007202:	687b      	ldr	r3, [r7, #4]
 8007204:	2201      	movs	r2, #1
 8007206:	711a      	strb	r2, [r3, #4]

  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 8007208:	687b      	ldr	r3, [r7, #4]
 800720a:	2200      	movs	r2, #0
 800720c:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 800720e:	2300      	movs	r3, #0
}
 8007210:	4618      	mov	r0, r3
 8007212:	3708      	adds	r7, #8
 8007214:	46bd      	mov	sp, r7
 8007216:	bd80      	pop	{r7, pc}

08007218 <HAL_DAC_Start_DMA>:
  *            @arg DAC_ALIGN_12B_R: 12bit right data alignment selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Start_DMA(DAC_HandleTypeDef *hdac, uint32_t Channel, uint32_t *pData, uint32_t Length,
                                    uint32_t Alignment)
{
 8007218:	b580      	push	{r7, lr}
 800721a:	b086      	sub	sp, #24
 800721c:	af00      	add	r7, sp, #0
 800721e:	60f8      	str	r0, [r7, #12]
 8007220:	60b9      	str	r1, [r7, #8]
 8007222:	607a      	str	r2, [r7, #4]
 8007224:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status;
  uint32_t tmpreg = 0U;
 8007226:	2300      	movs	r3, #0
 8007228:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(hdac->Instance, Channel));
  assert_param(IS_DAC_ALIGN(Alignment));

  /* Process locked */
  __HAL_LOCK(hdac);
 800722a:	68fb      	ldr	r3, [r7, #12]
 800722c:	795b      	ldrb	r3, [r3, #5]
 800722e:	2b01      	cmp	r3, #1
 8007230:	d101      	bne.n	8007236 <HAL_DAC_Start_DMA+0x1e>
 8007232:	2302      	movs	r3, #2
 8007234:	e0a1      	b.n	800737a <HAL_DAC_Start_DMA+0x162>
 8007236:	68fb      	ldr	r3, [r7, #12]
 8007238:	2201      	movs	r2, #1
 800723a:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 800723c:	68fb      	ldr	r3, [r7, #12]
 800723e:	2202      	movs	r2, #2
 8007240:	711a      	strb	r2, [r3, #4]

  if (Channel == DAC_CHANNEL_1)
 8007242:	68bb      	ldr	r3, [r7, #8]
 8007244:	2b00      	cmp	r3, #0
 8007246:	d12a      	bne.n	800729e <HAL_DAC_Start_DMA+0x86>
  {
    /* Set the DMA transfer complete callback for channel1 */
    hdac->DMA_Handle1->XferCpltCallback = DAC_DMAConvCpltCh1;
 8007248:	68fb      	ldr	r3, [r7, #12]
 800724a:	689b      	ldr	r3, [r3, #8]
 800724c:	4a4d      	ldr	r2, [pc, #308]	; (8007384 <HAL_DAC_Start_DMA+0x16c>)
 800724e:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Set the DMA half transfer complete callback for channel1 */
    hdac->DMA_Handle1->XferHalfCpltCallback = DAC_DMAHalfConvCpltCh1;
 8007250:	68fb      	ldr	r3, [r7, #12]
 8007252:	689b      	ldr	r3, [r3, #8]
 8007254:	4a4c      	ldr	r2, [pc, #304]	; (8007388 <HAL_DAC_Start_DMA+0x170>)
 8007256:	631a      	str	r2, [r3, #48]	; 0x30

    /* Set the DMA error callback for channel1 */
    hdac->DMA_Handle1->XferErrorCallback = DAC_DMAErrorCh1;
 8007258:	68fb      	ldr	r3, [r7, #12]
 800725a:	689b      	ldr	r3, [r3, #8]
 800725c:	4a4b      	ldr	r2, [pc, #300]	; (800738c <HAL_DAC_Start_DMA+0x174>)
 800725e:	635a      	str	r2, [r3, #52]	; 0x34

    /* Enable the selected DAC channel1 DMA request */
    SET_BIT(hdac->Instance->CR, DAC_CR_DMAEN1);
 8007260:	68fb      	ldr	r3, [r7, #12]
 8007262:	681b      	ldr	r3, [r3, #0]
 8007264:	681a      	ldr	r2, [r3, #0]
 8007266:	68fb      	ldr	r3, [r7, #12]
 8007268:	681b      	ldr	r3, [r3, #0]
 800726a:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 800726e:	601a      	str	r2, [r3, #0]

    /* Case of use of channel 1 */
    switch (Alignment)
 8007270:	6a3b      	ldr	r3, [r7, #32]
 8007272:	2b04      	cmp	r3, #4
 8007274:	d009      	beq.n	800728a <HAL_DAC_Start_DMA+0x72>
 8007276:	2b08      	cmp	r3, #8
 8007278:	d00c      	beq.n	8007294 <HAL_DAC_Start_DMA+0x7c>
 800727a:	2b00      	cmp	r3, #0
 800727c:	d000      	beq.n	8007280 <HAL_DAC_Start_DMA+0x68>
      case DAC_ALIGN_8B_R:
        /* Get DHR8R1 address */
        tmpreg = (uint32_t)&hdac->Instance->DHR8R1;
        break;
      default:
        break;
 800727e:	e039      	b.n	80072f4 <HAL_DAC_Start_DMA+0xdc>
        tmpreg = (uint32_t)&hdac->Instance->DHR12R1;
 8007280:	68fb      	ldr	r3, [r7, #12]
 8007282:	681b      	ldr	r3, [r3, #0]
 8007284:	3308      	adds	r3, #8
 8007286:	613b      	str	r3, [r7, #16]
        break;
 8007288:	e034      	b.n	80072f4 <HAL_DAC_Start_DMA+0xdc>
        tmpreg = (uint32_t)&hdac->Instance->DHR12L1;
 800728a:	68fb      	ldr	r3, [r7, #12]
 800728c:	681b      	ldr	r3, [r3, #0]
 800728e:	330c      	adds	r3, #12
 8007290:	613b      	str	r3, [r7, #16]
        break;
 8007292:	e02f      	b.n	80072f4 <HAL_DAC_Start_DMA+0xdc>
        tmpreg = (uint32_t)&hdac->Instance->DHR8R1;
 8007294:	68fb      	ldr	r3, [r7, #12]
 8007296:	681b      	ldr	r3, [r3, #0]
 8007298:	3310      	adds	r3, #16
 800729a:	613b      	str	r3, [r7, #16]
        break;
 800729c:	e02a      	b.n	80072f4 <HAL_DAC_Start_DMA+0xdc>
    }
  }
  else
  {
    /* Set the DMA transfer complete callback for channel2 */
    hdac->DMA_Handle2->XferCpltCallback = DAC_DMAConvCpltCh2;
 800729e:	68fb      	ldr	r3, [r7, #12]
 80072a0:	68db      	ldr	r3, [r3, #12]
 80072a2:	4a3b      	ldr	r2, [pc, #236]	; (8007390 <HAL_DAC_Start_DMA+0x178>)
 80072a4:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Set the DMA half transfer complete callback for channel2 */
    hdac->DMA_Handle2->XferHalfCpltCallback = DAC_DMAHalfConvCpltCh2;
 80072a6:	68fb      	ldr	r3, [r7, #12]
 80072a8:	68db      	ldr	r3, [r3, #12]
 80072aa:	4a3a      	ldr	r2, [pc, #232]	; (8007394 <HAL_DAC_Start_DMA+0x17c>)
 80072ac:	631a      	str	r2, [r3, #48]	; 0x30

    /* Set the DMA error callback for channel2 */
    hdac->DMA_Handle2->XferErrorCallback = DAC_DMAErrorCh2;
 80072ae:	68fb      	ldr	r3, [r7, #12]
 80072b0:	68db      	ldr	r3, [r3, #12]
 80072b2:	4a39      	ldr	r2, [pc, #228]	; (8007398 <HAL_DAC_Start_DMA+0x180>)
 80072b4:	635a      	str	r2, [r3, #52]	; 0x34

    /* Enable the selected DAC channel2 DMA request */
    SET_BIT(hdac->Instance->CR, DAC_CR_DMAEN2);
 80072b6:	68fb      	ldr	r3, [r7, #12]
 80072b8:	681b      	ldr	r3, [r3, #0]
 80072ba:	681a      	ldr	r2, [r3, #0]
 80072bc:	68fb      	ldr	r3, [r7, #12]
 80072be:	681b      	ldr	r3, [r3, #0]
 80072c0:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 80072c4:	601a      	str	r2, [r3, #0]

    /* Case of use of channel 2 */
    switch (Alignment)
 80072c6:	6a3b      	ldr	r3, [r7, #32]
 80072c8:	2b04      	cmp	r3, #4
 80072ca:	d009      	beq.n	80072e0 <HAL_DAC_Start_DMA+0xc8>
 80072cc:	2b08      	cmp	r3, #8
 80072ce:	d00c      	beq.n	80072ea <HAL_DAC_Start_DMA+0xd2>
 80072d0:	2b00      	cmp	r3, #0
 80072d2:	d000      	beq.n	80072d6 <HAL_DAC_Start_DMA+0xbe>
      case DAC_ALIGN_8B_R:
        /* Get DHR8R2 address */
        tmpreg = (uint32_t)&hdac->Instance->DHR8R2;
        break;
      default:
        break;
 80072d4:	e00e      	b.n	80072f4 <HAL_DAC_Start_DMA+0xdc>
        tmpreg = (uint32_t)&hdac->Instance->DHR12R2;
 80072d6:	68fb      	ldr	r3, [r7, #12]
 80072d8:	681b      	ldr	r3, [r3, #0]
 80072da:	3314      	adds	r3, #20
 80072dc:	613b      	str	r3, [r7, #16]
        break;
 80072de:	e009      	b.n	80072f4 <HAL_DAC_Start_DMA+0xdc>
        tmpreg = (uint32_t)&hdac->Instance->DHR12L2;
 80072e0:	68fb      	ldr	r3, [r7, #12]
 80072e2:	681b      	ldr	r3, [r3, #0]
 80072e4:	3318      	adds	r3, #24
 80072e6:	613b      	str	r3, [r7, #16]
        break;
 80072e8:	e004      	b.n	80072f4 <HAL_DAC_Start_DMA+0xdc>
        tmpreg = (uint32_t)&hdac->Instance->DHR8R2;
 80072ea:	68fb      	ldr	r3, [r7, #12]
 80072ec:	681b      	ldr	r3, [r3, #0]
 80072ee:	331c      	adds	r3, #28
 80072f0:	613b      	str	r3, [r7, #16]
        break;
 80072f2:	bf00      	nop
    }
  }

  /* Enable the DMA channel */
  if (Channel == DAC_CHANNEL_1)
 80072f4:	68bb      	ldr	r3, [r7, #8]
 80072f6:	2b00      	cmp	r3, #0
 80072f8:	d111      	bne.n	800731e <HAL_DAC_Start_DMA+0x106>
  {
    /* Enable the DAC DMA underrun interrupt */
    __HAL_DAC_ENABLE_IT(hdac, DAC_IT_DMAUDR1);
 80072fa:	68fb      	ldr	r3, [r7, #12]
 80072fc:	681b      	ldr	r3, [r3, #0]
 80072fe:	681a      	ldr	r2, [r3, #0]
 8007300:	68fb      	ldr	r3, [r7, #12]
 8007302:	681b      	ldr	r3, [r3, #0]
 8007304:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8007308:	601a      	str	r2, [r3, #0]

    /* Enable the DMA channel */
    status = HAL_DMA_Start_IT(hdac->DMA_Handle1, (uint32_t)pData, tmpreg, Length);
 800730a:	68fb      	ldr	r3, [r7, #12]
 800730c:	6898      	ldr	r0, [r3, #8]
 800730e:	6879      	ldr	r1, [r7, #4]
 8007310:	683b      	ldr	r3, [r7, #0]
 8007312:	693a      	ldr	r2, [r7, #16]
 8007314:	f000 fbc8 	bl	8007aa8 <HAL_DMA_Start_IT>
 8007318:	4603      	mov	r3, r0
 800731a:	75fb      	strb	r3, [r7, #23]
 800731c:	e010      	b.n	8007340 <HAL_DAC_Start_DMA+0x128>
  }
  else
  {
    /* Enable the DAC DMA underrun interrupt */
    __HAL_DAC_ENABLE_IT(hdac, DAC_IT_DMAUDR2);
 800731e:	68fb      	ldr	r3, [r7, #12]
 8007320:	681b      	ldr	r3, [r3, #0]
 8007322:	681a      	ldr	r2, [r3, #0]
 8007324:	68fb      	ldr	r3, [r7, #12]
 8007326:	681b      	ldr	r3, [r3, #0]
 8007328:	f042 5200 	orr.w	r2, r2, #536870912	; 0x20000000
 800732c:	601a      	str	r2, [r3, #0]

    /* Enable the DMA channel */
    status = HAL_DMA_Start_IT(hdac->DMA_Handle2, (uint32_t)pData, tmpreg, Length);
 800732e:	68fb      	ldr	r3, [r7, #12]
 8007330:	68d8      	ldr	r0, [r3, #12]
 8007332:	6879      	ldr	r1, [r7, #4]
 8007334:	683b      	ldr	r3, [r7, #0]
 8007336:	693a      	ldr	r2, [r7, #16]
 8007338:	f000 fbb6 	bl	8007aa8 <HAL_DMA_Start_IT>
 800733c:	4603      	mov	r3, r0
 800733e:	75fb      	strb	r3, [r7, #23]
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hdac);
 8007340:	68fb      	ldr	r3, [r7, #12]
 8007342:	2200      	movs	r2, #0
 8007344:	715a      	strb	r2, [r3, #5]

  if (status == HAL_OK)
 8007346:	7dfb      	ldrb	r3, [r7, #23]
 8007348:	2b00      	cmp	r3, #0
 800734a:	d10f      	bne.n	800736c <HAL_DAC_Start_DMA+0x154>
  {
    /* Enable the Peripheral */
    __HAL_DAC_ENABLE(hdac, Channel);
 800734c:	68fb      	ldr	r3, [r7, #12]
 800734e:	681b      	ldr	r3, [r3, #0]
 8007350:	6819      	ldr	r1, [r3, #0]
 8007352:	68bb      	ldr	r3, [r7, #8]
 8007354:	f003 0310 	and.w	r3, r3, #16
 8007358:	2201      	movs	r2, #1
 800735a:	409a      	lsls	r2, r3
 800735c:	68fb      	ldr	r3, [r7, #12]
 800735e:	681b      	ldr	r3, [r3, #0]
 8007360:	430a      	orrs	r2, r1
 8007362:	601a      	str	r2, [r3, #0]
    /* Ensure minimum wait before using peripheral after enabling it */
    HAL_Delay(1);
 8007364:	2001      	movs	r0, #1
 8007366:	f7fe fa71 	bl	800584c <HAL_Delay>
 800736a:	e005      	b.n	8007378 <HAL_DAC_Start_DMA+0x160>
  }
  else
  {
    hdac->ErrorCode |= HAL_DAC_ERROR_DMA;
 800736c:	68fb      	ldr	r3, [r7, #12]
 800736e:	691b      	ldr	r3, [r3, #16]
 8007370:	f043 0204 	orr.w	r2, r3, #4
 8007374:	68fb      	ldr	r3, [r7, #12]
 8007376:	611a      	str	r2, [r3, #16]
  }

  /* Return function status */
  return status;
 8007378:	7dfb      	ldrb	r3, [r7, #23]
}
 800737a:	4618      	mov	r0, r3
 800737c:	3718      	adds	r7, #24
 800737e:	46bd      	mov	sp, r7
 8007380:	bd80      	pop	{r7, pc}
 8007382:	bf00      	nop
 8007384:	08007845 	.word	0x08007845
 8007388:	08007867 	.word	0x08007867
 800738c:	08007883 	.word	0x08007883
 8007390:	080078ed 	.word	0x080078ed
 8007394:	0800790f 	.word	0x0800790f
 8007398:	0800792b 	.word	0x0800792b

0800739c <HAL_DAC_Stop_DMA>:
  *         (1) On this STM32 serie, parameter not available on all instances.
  *             Refer to device datasheet for channels availability.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Stop_DMA(DAC_HandleTypeDef *hdac, uint32_t Channel)
{
 800739c:	b580      	push	{r7, lr}
 800739e:	b084      	sub	sp, #16
 80073a0:	af00      	add	r7, sp, #0
 80073a2:	6078      	str	r0, [r7, #4]
 80073a4:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(hdac->Instance, Channel));

  /* Disable the selected DAC channel DMA request */
  hdac->Instance->CR &= ~(DAC_CR_DMAEN1 << (Channel & 0x10UL));
 80073a6:	687b      	ldr	r3, [r7, #4]
 80073a8:	681b      	ldr	r3, [r3, #0]
 80073aa:	6819      	ldr	r1, [r3, #0]
 80073ac:	683b      	ldr	r3, [r7, #0]
 80073ae:	f003 0310 	and.w	r3, r3, #16
 80073b2:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80073b6:	fa02 f303 	lsl.w	r3, r2, r3
 80073ba:	43da      	mvns	r2, r3
 80073bc:	687b      	ldr	r3, [r7, #4]
 80073be:	681b      	ldr	r3, [r3, #0]
 80073c0:	400a      	ands	r2, r1
 80073c2:	601a      	str	r2, [r3, #0]

  /* Disable the Peripheral */
  __HAL_DAC_DISABLE(hdac, Channel);
 80073c4:	687b      	ldr	r3, [r7, #4]
 80073c6:	681b      	ldr	r3, [r3, #0]
 80073c8:	6819      	ldr	r1, [r3, #0]
 80073ca:	683b      	ldr	r3, [r7, #0]
 80073cc:	f003 0310 	and.w	r3, r3, #16
 80073d0:	2201      	movs	r2, #1
 80073d2:	fa02 f303 	lsl.w	r3, r2, r3
 80073d6:	43da      	mvns	r2, r3
 80073d8:	687b      	ldr	r3, [r7, #4]
 80073da:	681b      	ldr	r3, [r3, #0]
 80073dc:	400a      	ands	r2, r1
 80073de:	601a      	str	r2, [r3, #0]
  /* Ensure minimum wait before enabling peripheral after disabling it */
  HAL_Delay(1);
 80073e0:	2001      	movs	r0, #1
 80073e2:	f7fe fa33 	bl	800584c <HAL_Delay>

  /* Disable the DMA channel */

  /* Channel1 is used */
  if (Channel == DAC_CHANNEL_1)
 80073e6:	683b      	ldr	r3, [r7, #0]
 80073e8:	2b00      	cmp	r3, #0
 80073ea:	d10f      	bne.n	800740c <HAL_DAC_Stop_DMA+0x70>
  {
    /* Disable the DMA channel */
    status = HAL_DMA_Abort(hdac->DMA_Handle1);
 80073ec:	687b      	ldr	r3, [r7, #4]
 80073ee:	689b      	ldr	r3, [r3, #8]
 80073f0:	4618      	mov	r0, r3
 80073f2:	f000 fbd4 	bl	8007b9e <HAL_DMA_Abort>
 80073f6:	4603      	mov	r3, r0
 80073f8:	73fb      	strb	r3, [r7, #15]

    /* Disable the DAC DMA underrun interrupt */
    __HAL_DAC_DISABLE_IT(hdac, DAC_IT_DMAUDR1);
 80073fa:	687b      	ldr	r3, [r7, #4]
 80073fc:	681b      	ldr	r3, [r3, #0]
 80073fe:	681a      	ldr	r2, [r3, #0]
 8007400:	687b      	ldr	r3, [r7, #4]
 8007402:	681b      	ldr	r3, [r3, #0]
 8007404:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8007408:	601a      	str	r2, [r3, #0]
 800740a:	e00e      	b.n	800742a <HAL_DAC_Stop_DMA+0x8e>
  }
  else /* Channel2 is used for */
  {
    /* Disable the DMA channel */
    status = HAL_DMA_Abort(hdac->DMA_Handle2);
 800740c:	687b      	ldr	r3, [r7, #4]
 800740e:	68db      	ldr	r3, [r3, #12]
 8007410:	4618      	mov	r0, r3
 8007412:	f000 fbc4 	bl	8007b9e <HAL_DMA_Abort>
 8007416:	4603      	mov	r3, r0
 8007418:	73fb      	strb	r3, [r7, #15]

    /* Disable the DAC DMA underrun interrupt */
    __HAL_DAC_DISABLE_IT(hdac, DAC_IT_DMAUDR2);
 800741a:	687b      	ldr	r3, [r7, #4]
 800741c:	681b      	ldr	r3, [r3, #0]
 800741e:	681a      	ldr	r2, [r3, #0]
 8007420:	687b      	ldr	r3, [r7, #4]
 8007422:	681b      	ldr	r3, [r3, #0]
 8007424:	f022 5200 	bic.w	r2, r2, #536870912	; 0x20000000
 8007428:	601a      	str	r2, [r3, #0]
  }

  /* Check if DMA Channel effectively disabled */
  if (status != HAL_OK)
 800742a:	7bfb      	ldrb	r3, [r7, #15]
 800742c:	2b00      	cmp	r3, #0
 800742e:	d003      	beq.n	8007438 <HAL_DAC_Stop_DMA+0x9c>
  {
    /* Update DAC state machine to error */
    hdac->State = HAL_DAC_STATE_ERROR;
 8007430:	687b      	ldr	r3, [r7, #4]
 8007432:	2204      	movs	r2, #4
 8007434:	711a      	strb	r2, [r3, #4]
 8007436:	e002      	b.n	800743e <HAL_DAC_Stop_DMA+0xa2>
  }
  else
  {
    /* Change DAC state */
    hdac->State = HAL_DAC_STATE_READY;
 8007438:	687b      	ldr	r3, [r7, #4]
 800743a:	2201      	movs	r2, #1
 800743c:	711a      	strb	r2, [r3, #4]
  }

  /* Return function status */
  return status;
 800743e:	7bfb      	ldrb	r3, [r7, #15]
}
 8007440:	4618      	mov	r0, r3
 8007442:	3710      	adds	r7, #16
 8007444:	46bd      	mov	sp, r7
 8007446:	bd80      	pop	{r7, pc}

08007448 <HAL_DAC_SetValue>:
  *            @arg DAC_ALIGN_12B_R: 12bit right data alignment selected
  * @param  Data Data to be loaded in the selected data holding register.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_SetValue(DAC_HandleTypeDef *hdac, uint32_t Channel, uint32_t Alignment, uint32_t Data)
{
 8007448:	b480      	push	{r7}
 800744a:	b087      	sub	sp, #28
 800744c:	af00      	add	r7, sp, #0
 800744e:	60f8      	str	r0, [r7, #12]
 8007450:	60b9      	str	r1, [r7, #8]
 8007452:	607a      	str	r2, [r7, #4]
 8007454:	603b      	str	r3, [r7, #0]
  __IO uint32_t tmp = 0;
 8007456:	2300      	movs	r3, #0
 8007458:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(hdac->Instance, Channel));
  assert_param(IS_DAC_ALIGN(Alignment));
  /* In case DMA Double data mode is activated, DATA range is almost full uin32_t one: no check */
  if ((hdac->Instance->MCR & (DAC_MCR_DMADOUBLE1 << (Channel & 0x10UL))) == 0UL)
 800745a:	68fb      	ldr	r3, [r7, #12]
 800745c:	681b      	ldr	r3, [r3, #0]
 800745e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
  {
    assert_param(IS_DAC_DATA(Data));
  }

  tmp = (uint32_t)hdac->Instance;
 8007460:	68fb      	ldr	r3, [r7, #12]
 8007462:	681b      	ldr	r3, [r3, #0]
 8007464:	617b      	str	r3, [r7, #20]
  if (Channel == DAC_CHANNEL_1)
 8007466:	68bb      	ldr	r3, [r7, #8]
 8007468:	2b00      	cmp	r3, #0
 800746a:	d105      	bne.n	8007478 <HAL_DAC_SetValue+0x30>
  {
    tmp += DAC_DHR12R1_ALIGNMENT(Alignment);
 800746c:	697a      	ldr	r2, [r7, #20]
 800746e:	687b      	ldr	r3, [r7, #4]
 8007470:	4413      	add	r3, r2
 8007472:	3308      	adds	r3, #8
 8007474:	617b      	str	r3, [r7, #20]
 8007476:	e004      	b.n	8007482 <HAL_DAC_SetValue+0x3a>
  }
  else
  {
    tmp += DAC_DHR12R2_ALIGNMENT(Alignment);
 8007478:	697a      	ldr	r2, [r7, #20]
 800747a:	687b      	ldr	r3, [r7, #4]
 800747c:	4413      	add	r3, r2
 800747e:	3314      	adds	r3, #20
 8007480:	617b      	str	r3, [r7, #20]
  }

  /* Set the DAC channel selected data holding register */
  *(__IO uint32_t *) tmp = Data;
 8007482:	697b      	ldr	r3, [r7, #20]
 8007484:	461a      	mov	r2, r3
 8007486:	683b      	ldr	r3, [r7, #0]
 8007488:	6013      	str	r3, [r2, #0]

  /* Return function status */
  return HAL_OK;
 800748a:	2300      	movs	r3, #0
}
 800748c:	4618      	mov	r0, r3
 800748e:	371c      	adds	r7, #28
 8007490:	46bd      	mov	sp, r7
 8007492:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007496:	4770      	bx	lr

08007498 <HAL_DAC_ConvCpltCallbackCh1>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DAC_ConvCpltCallbackCh1(DAC_HandleTypeDef *hdac)
{
 8007498:	b480      	push	{r7}
 800749a:	b083      	sub	sp, #12
 800749c:	af00      	add	r7, sp, #0
 800749e:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DAC_ConvCpltCallbackCh1 could be implemented in the user file
   */
}
 80074a0:	bf00      	nop
 80074a2:	370c      	adds	r7, #12
 80074a4:	46bd      	mov	sp, r7
 80074a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074aa:	4770      	bx	lr

080074ac <HAL_DAC_ConvHalfCpltCallbackCh1>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DAC_ConvHalfCpltCallbackCh1(DAC_HandleTypeDef *hdac)
{
 80074ac:	b480      	push	{r7}
 80074ae:	b083      	sub	sp, #12
 80074b0:	af00      	add	r7, sp, #0
 80074b2:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DAC_ConvHalfCpltCallbackCh1 could be implemented in the user file
   */
}
 80074b4:	bf00      	nop
 80074b6:	370c      	adds	r7, #12
 80074b8:	46bd      	mov	sp, r7
 80074ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074be:	4770      	bx	lr

080074c0 <HAL_DAC_GetValue>:
  *         (1) On this STM32 serie, parameter not available on all instances.
  *             Refer to device datasheet for channels availability.
  * @retval The selected DAC channel data output value.
  */
uint32_t HAL_DAC_GetValue(DAC_HandleTypeDef *hdac, uint32_t Channel)
{
 80074c0:	b480      	push	{r7}
 80074c2:	b083      	sub	sp, #12
 80074c4:	af00      	add	r7, sp, #0
 80074c6:	6078      	str	r0, [r7, #4]
 80074c8:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(hdac->Instance, Channel));

  /* Returns the DAC channel data output register value */
  if (Channel == DAC_CHANNEL_1)
 80074ca:	683b      	ldr	r3, [r7, #0]
 80074cc:	2b00      	cmp	r3, #0
 80074ce:	d103      	bne.n	80074d8 <HAL_DAC_GetValue+0x18>
  {
    return hdac->Instance->DOR1;
 80074d0:	687b      	ldr	r3, [r7, #4]
 80074d2:	681b      	ldr	r3, [r3, #0]
 80074d4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80074d6:	e002      	b.n	80074de <HAL_DAC_GetValue+0x1e>
  }
  else
  {
    return hdac->Instance->DOR2;
 80074d8:	687b      	ldr	r3, [r7, #4]
 80074da:	681b      	ldr	r3, [r3, #0]
 80074dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  }
}
 80074de:	4618      	mov	r0, r3
 80074e0:	370c      	adds	r7, #12
 80074e2:	46bd      	mov	sp, r7
 80074e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074e8:	4770      	bx	lr
	...

080074ec <HAL_DAC_ConfigChannel>:
  *         (1) On this STM32 serie, parameter not available on all instances.
  *             Refer to device datasheet for channels availability.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_ConfigChannel(DAC_HandleTypeDef *hdac, DAC_ChannelConfTypeDef *sConfig, uint32_t Channel)
{
 80074ec:	b580      	push	{r7, lr}
 80074ee:	b08a      	sub	sp, #40	; 0x28
 80074f0:	af00      	add	r7, sp, #0
 80074f2:	60f8      	str	r0, [r7, #12]
 80074f4:	60b9      	str	r1, [r7, #8]
 80074f6:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg1;
  uint32_t tmpreg2;
  uint32_t tickstart = 0U;
 80074f8:	2300      	movs	r3, #0
 80074fa:	61fb      	str	r3, [r7, #28]
  assert_param(IS_DAC_CHANNEL(hdac->Instance, Channel));
  assert_param(IS_FUNCTIONAL_STATE(sConfig->DAC_DMADoubleDataMode));
  assert_param(IS_FUNCTIONAL_STATE(sConfig->DAC_SignedFormat));

  /* Process locked */
  __HAL_LOCK(hdac);
 80074fc:	68fb      	ldr	r3, [r7, #12]
 80074fe:	795b      	ldrb	r3, [r3, #5]
 8007500:	2b01      	cmp	r3, #1
 8007502:	d101      	bne.n	8007508 <HAL_DAC_ConfigChannel+0x1c>
 8007504:	2302      	movs	r3, #2
 8007506:	e194      	b.n	8007832 <HAL_DAC_ConfigChannel+0x346>
 8007508:	68fb      	ldr	r3, [r7, #12]
 800750a:	2201      	movs	r2, #1
 800750c:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 800750e:	68fb      	ldr	r3, [r7, #12]
 8007510:	2202      	movs	r2, #2
 8007512:	711a      	strb	r2, [r3, #4]

  if (sConfig->DAC_SampleAndHold == DAC_SAMPLEANDHOLD_ENABLE)
 8007514:	68bb      	ldr	r3, [r7, #8]
 8007516:	689b      	ldr	r3, [r3, #8]
 8007518:	2b04      	cmp	r3, #4
 800751a:	d174      	bne.n	8007606 <HAL_DAC_ConfigChannel+0x11a>
    /* Sample on old configuration */
  {
    /* SampleTime */
    if (Channel == DAC_CHANNEL_1)
 800751c:	687b      	ldr	r3, [r7, #4]
 800751e:	2b00      	cmp	r3, #0
 8007520:	d137      	bne.n	8007592 <HAL_DAC_ConfigChannel+0xa6>
    {
      /* Get timeout */
      tickstart = HAL_GetTick();
 8007522:	f7fe f987 	bl	8005834 <HAL_GetTick>
 8007526:	61f8      	str	r0, [r7, #28]

      /* SHSR1 can be written when BWST1 is cleared */
      while (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 8007528:	e011      	b.n	800754e <HAL_DAC_ConfigChannel+0x62>
      {
        /* Check for the Timeout */
        if ((HAL_GetTick() - tickstart) > TIMEOUT_DAC_CALIBCONFIG)
 800752a:	f7fe f983 	bl	8005834 <HAL_GetTick>
 800752e:	4602      	mov	r2, r0
 8007530:	69fb      	ldr	r3, [r7, #28]
 8007532:	1ad3      	subs	r3, r2, r3
 8007534:	2b01      	cmp	r3, #1
 8007536:	d90a      	bls.n	800754e <HAL_DAC_ConfigChannel+0x62>
        {
          /* Update error code */
          SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_TIMEOUT);
 8007538:	68fb      	ldr	r3, [r7, #12]
 800753a:	691b      	ldr	r3, [r3, #16]
 800753c:	f043 0208 	orr.w	r2, r3, #8
 8007540:	68fb      	ldr	r3, [r7, #12]
 8007542:	611a      	str	r2, [r3, #16]

          /* Change the DMA state */
          hdac->State = HAL_DAC_STATE_TIMEOUT;
 8007544:	68fb      	ldr	r3, [r7, #12]
 8007546:	2203      	movs	r2, #3
 8007548:	711a      	strb	r2, [r3, #4]

          return HAL_TIMEOUT;
 800754a:	2303      	movs	r3, #3
 800754c:	e171      	b.n	8007832 <HAL_DAC_ConfigChannel+0x346>
      while (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 800754e:	68fb      	ldr	r3, [r7, #12]
 8007550:	681b      	ldr	r3, [r3, #0]
 8007552:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007554:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8007558:	2b00      	cmp	r3, #0
 800755a:	d1e6      	bne.n	800752a <HAL_DAC_ConfigChannel+0x3e>
        }
      }
      HAL_Delay(1);
 800755c:	2001      	movs	r0, #1
 800755e:	f7fe f975 	bl	800584c <HAL_Delay>
      hdac->Instance->SHSR1 = sConfig->DAC_SampleAndHoldConfig.DAC_SampleTime;
 8007562:	68fb      	ldr	r3, [r7, #12]
 8007564:	681b      	ldr	r3, [r3, #0]
 8007566:	68ba      	ldr	r2, [r7, #8]
 8007568:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800756a:	641a      	str	r2, [r3, #64]	; 0x40
 800756c:	e01e      	b.n	80075ac <HAL_DAC_ConfigChannel+0xc0>
      /* SHSR2 can be written when BWST2 is cleared */

      while (((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
      {
        /* Check for the Timeout */
        if ((HAL_GetTick() - tickstart) > TIMEOUT_DAC_CALIBCONFIG)
 800756e:	f7fe f961 	bl	8005834 <HAL_GetTick>
 8007572:	4602      	mov	r2, r0
 8007574:	69fb      	ldr	r3, [r7, #28]
 8007576:	1ad3      	subs	r3, r2, r3
 8007578:	2b01      	cmp	r3, #1
 800757a:	d90a      	bls.n	8007592 <HAL_DAC_ConfigChannel+0xa6>
        {
          /* Update error code */
          SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_TIMEOUT);
 800757c:	68fb      	ldr	r3, [r7, #12]
 800757e:	691b      	ldr	r3, [r3, #16]
 8007580:	f043 0208 	orr.w	r2, r3, #8
 8007584:	68fb      	ldr	r3, [r7, #12]
 8007586:	611a      	str	r2, [r3, #16]

          /* Change the DMA state */
          hdac->State = HAL_DAC_STATE_TIMEOUT;
 8007588:	68fb      	ldr	r3, [r7, #12]
 800758a:	2203      	movs	r2, #3
 800758c:	711a      	strb	r2, [r3, #4]

          return HAL_TIMEOUT;
 800758e:	2303      	movs	r3, #3
 8007590:	e14f      	b.n	8007832 <HAL_DAC_ConfigChannel+0x346>
      while (((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
 8007592:	68fb      	ldr	r3, [r7, #12]
 8007594:	681b      	ldr	r3, [r3, #0]
 8007596:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007598:	2b00      	cmp	r3, #0
 800759a:	dbe8      	blt.n	800756e <HAL_DAC_ConfigChannel+0x82>
        }
      }
      HAL_Delay(1U);
 800759c:	2001      	movs	r0, #1
 800759e:	f7fe f955 	bl	800584c <HAL_Delay>
      hdac->Instance->SHSR2 = sConfig->DAC_SampleAndHoldConfig.DAC_SampleTime;
 80075a2:	68fb      	ldr	r3, [r7, #12]
 80075a4:	681b      	ldr	r3, [r3, #0]
 80075a6:	68ba      	ldr	r2, [r7, #8]
 80075a8:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80075aa:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* HoldTime */
    MODIFY_REG(hdac->Instance->SHHR, DAC_SHHR_THOLD1 << (Channel & 0x10UL), (sConfig->DAC_SampleAndHoldConfig.DAC_HoldTime) << (Channel & 0x10UL));
 80075ac:	68fb      	ldr	r3, [r7, #12]
 80075ae:	681b      	ldr	r3, [r3, #0]
 80075b0:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80075b2:	687b      	ldr	r3, [r7, #4]
 80075b4:	f003 0310 	and.w	r3, r3, #16
 80075b8:	f240 31ff 	movw	r1, #1023	; 0x3ff
 80075bc:	fa01 f303 	lsl.w	r3, r1, r3
 80075c0:	43db      	mvns	r3, r3
 80075c2:	ea02 0103 	and.w	r1, r2, r3
 80075c6:	68bb      	ldr	r3, [r7, #8]
 80075c8:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80075ca:	687b      	ldr	r3, [r7, #4]
 80075cc:	f003 0310 	and.w	r3, r3, #16
 80075d0:	409a      	lsls	r2, r3
 80075d2:	68fb      	ldr	r3, [r7, #12]
 80075d4:	681b      	ldr	r3, [r3, #0]
 80075d6:	430a      	orrs	r2, r1
 80075d8:	649a      	str	r2, [r3, #72]	; 0x48
    /* RefreshTime */
    MODIFY_REG(hdac->Instance->SHRR, DAC_SHRR_TREFRESH1 << (Channel & 0x10UL), (sConfig->DAC_SampleAndHoldConfig.DAC_RefreshTime) << (Channel & 0x10UL));
 80075da:	68fb      	ldr	r3, [r7, #12]
 80075dc:	681b      	ldr	r3, [r3, #0]
 80075de:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80075e0:	687b      	ldr	r3, [r7, #4]
 80075e2:	f003 0310 	and.w	r3, r3, #16
 80075e6:	21ff      	movs	r1, #255	; 0xff
 80075e8:	fa01 f303 	lsl.w	r3, r1, r3
 80075ec:	43db      	mvns	r3, r3
 80075ee:	ea02 0103 	and.w	r1, r2, r3
 80075f2:	68bb      	ldr	r3, [r7, #8]
 80075f4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80075f6:	687b      	ldr	r3, [r7, #4]
 80075f8:	f003 0310 	and.w	r3, r3, #16
 80075fc:	409a      	lsls	r2, r3
 80075fe:	68fb      	ldr	r3, [r7, #12]
 8007600:	681b      	ldr	r3, [r3, #0]
 8007602:	430a      	orrs	r2, r1
 8007604:	64da      	str	r2, [r3, #76]	; 0x4c
  }

  if (sConfig->DAC_UserTrimming == DAC_TRIMMING_USER)
 8007606:	68bb      	ldr	r3, [r7, #8]
 8007608:	69db      	ldr	r3, [r3, #28]
 800760a:	2b01      	cmp	r3, #1
 800760c:	d11d      	bne.n	800764a <HAL_DAC_ConfigChannel+0x15e>
    /* USER TRIMMING */
  {
    /* Get the DAC CCR value */
    tmpreg1 = hdac->Instance->CCR;
 800760e:	68fb      	ldr	r3, [r7, #12]
 8007610:	681b      	ldr	r3, [r3, #0]
 8007612:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007614:	627b      	str	r3, [r7, #36]	; 0x24
    /* Clear trimming value */
    tmpreg1 &= ~(((uint32_t)(DAC_CCR_OTRIM1)) << (Channel & 0x10UL));
 8007616:	687b      	ldr	r3, [r7, #4]
 8007618:	f003 0310 	and.w	r3, r3, #16
 800761c:	221f      	movs	r2, #31
 800761e:	fa02 f303 	lsl.w	r3, r2, r3
 8007622:	43db      	mvns	r3, r3
 8007624:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007626:	4013      	ands	r3, r2
 8007628:	627b      	str	r3, [r7, #36]	; 0x24
    /* Configure for the selected trimming offset */
    tmpreg2 = sConfig->DAC_TrimmingValue;
 800762a:	68bb      	ldr	r3, [r7, #8]
 800762c:	6a1b      	ldr	r3, [r3, #32]
 800762e:	61bb      	str	r3, [r7, #24]
    /* Calculate CCR register value depending on DAC_Channel */
    tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 8007630:	687b      	ldr	r3, [r7, #4]
 8007632:	f003 0310 	and.w	r3, r3, #16
 8007636:	69ba      	ldr	r2, [r7, #24]
 8007638:	fa02 f303 	lsl.w	r3, r2, r3
 800763c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800763e:	4313      	orrs	r3, r2
 8007640:	627b      	str	r3, [r7, #36]	; 0x24
    /* Write to DAC CCR */
    hdac->Instance->CCR = tmpreg1;
 8007642:	68fb      	ldr	r3, [r7, #12]
 8007644:	681b      	ldr	r3, [r3, #0]
 8007646:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007648:	639a      	str	r2, [r3, #56]	; 0x38
  }
  /* else factory trimming is used (factory setting are available at reset)*/
  /* SW Nothing has nothing to do */

  /* Get the DAC MCR value */
  tmpreg1 = hdac->Instance->MCR;
 800764a:	68fb      	ldr	r3, [r7, #12]
 800764c:	681b      	ldr	r3, [r3, #0]
 800764e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007650:	627b      	str	r3, [r7, #36]	; 0x24
  /* Clear DAC_MCR_MODEx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_MCR_MODE1)) << (Channel & 0x10UL));
 8007652:	687b      	ldr	r3, [r7, #4]
 8007654:	f003 0310 	and.w	r3, r3, #16
 8007658:	2207      	movs	r2, #7
 800765a:	fa02 f303 	lsl.w	r3, r2, r3
 800765e:	43db      	mvns	r3, r3
 8007660:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007662:	4013      	ands	r3, r2
 8007664:	627b      	str	r3, [r7, #36]	; 0x24
  /* Configure for the selected DAC channel: mode, buffer output & on chip peripheral connect */
  if ((sConfig->DAC_ConnectOnChipPeripheral & DAC_CHIPCONNECT_EXTERNAL) == DAC_CHIPCONNECT_EXTERNAL)
 8007666:	68bb      	ldr	r3, [r7, #8]
 8007668:	699b      	ldr	r3, [r3, #24]
 800766a:	f003 0301 	and.w	r3, r3, #1
 800766e:	2b00      	cmp	r3, #0
 8007670:	d002      	beq.n	8007678 <HAL_DAC_ConfigChannel+0x18c>
  {
    connectOnChip = 0x00000000UL;
 8007672:	2300      	movs	r3, #0
 8007674:	623b      	str	r3, [r7, #32]
 8007676:	e011      	b.n	800769c <HAL_DAC_ConfigChannel+0x1b0>
  }
  else if ((sConfig->DAC_ConnectOnChipPeripheral & DAC_CHIPCONNECT_INTERNAL) == DAC_CHIPCONNECT_INTERNAL)
 8007678:	68bb      	ldr	r3, [r7, #8]
 800767a:	699b      	ldr	r3, [r3, #24]
 800767c:	f003 0302 	and.w	r3, r3, #2
 8007680:	2b00      	cmp	r3, #0
 8007682:	d002      	beq.n	800768a <HAL_DAC_ConfigChannel+0x19e>
  {
    connectOnChip = DAC_MCR_MODE1_0;
 8007684:	2301      	movs	r3, #1
 8007686:	623b      	str	r3, [r7, #32]
 8007688:	e008      	b.n	800769c <HAL_DAC_ConfigChannel+0x1b0>
  }
  else /* (sConfig->DAC_ConnectOnChipPeripheral & DAC_CHIPCONNECT_BOTH) == DAC_CHIPCONNECT_BOTH */
  {
    if (sConfig->DAC_OutputBuffer == DAC_OUTPUTBUFFER_ENABLE)
 800768a:	68bb      	ldr	r3, [r7, #8]
 800768c:	695b      	ldr	r3, [r3, #20]
 800768e:	2b00      	cmp	r3, #0
 8007690:	d102      	bne.n	8007698 <HAL_DAC_ConfigChannel+0x1ac>
    {
      connectOnChip = DAC_MCR_MODE1_0;
 8007692:	2301      	movs	r3, #1
 8007694:	623b      	str	r3, [r7, #32]
 8007696:	e001      	b.n	800769c <HAL_DAC_ConfigChannel+0x1b0>
    }
    else
    {
      connectOnChip = 0x00000000UL;
 8007698:	2300      	movs	r3, #0
 800769a:	623b      	str	r3, [r7, #32]
    }
  }
  tmpreg2 = (sConfig->DAC_SampleAndHold | sConfig->DAC_OutputBuffer | connectOnChip);
 800769c:	68bb      	ldr	r3, [r7, #8]
 800769e:	689a      	ldr	r2, [r3, #8]
 80076a0:	68bb      	ldr	r3, [r7, #8]
 80076a2:	695b      	ldr	r3, [r3, #20]
 80076a4:	4313      	orrs	r3, r2
 80076a6:	6a3a      	ldr	r2, [r7, #32]
 80076a8:	4313      	orrs	r3, r2
 80076aa:	61bb      	str	r3, [r7, #24]
  /* Clear DAC_MCR_DMADOUBLEx */
  tmpreg1 &= ~(((uint32_t)(DAC_MCR_DMADOUBLE1)) << (Channel & 0x10UL));
 80076ac:	687b      	ldr	r3, [r7, #4]
 80076ae:	f003 0310 	and.w	r3, r3, #16
 80076b2:	f44f 7280 	mov.w	r2, #256	; 0x100
 80076b6:	fa02 f303 	lsl.w	r3, r2, r3
 80076ba:	43db      	mvns	r3, r3
 80076bc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80076be:	4013      	ands	r3, r2
 80076c0:	627b      	str	r3, [r7, #36]	; 0x24
  /* Configure for the selected DAC channel: DMA double data mode */
  tmpreg2 |= (sConfig->DAC_DMADoubleDataMode == ENABLE) ? DAC_MCR_DMADOUBLE1 : 0UL;
 80076c2:	68bb      	ldr	r3, [r7, #8]
 80076c4:	791b      	ldrb	r3, [r3, #4]
 80076c6:	2b01      	cmp	r3, #1
 80076c8:	d102      	bne.n	80076d0 <HAL_DAC_ConfigChannel+0x1e4>
 80076ca:	f44f 7380 	mov.w	r3, #256	; 0x100
 80076ce:	e000      	b.n	80076d2 <HAL_DAC_ConfigChannel+0x1e6>
 80076d0:	2300      	movs	r3, #0
 80076d2:	69ba      	ldr	r2, [r7, #24]
 80076d4:	4313      	orrs	r3, r2
 80076d6:	61bb      	str	r3, [r7, #24]
  /* Clear DAC_MCR_SINFORMATx */
  tmpreg1 &= ~(((uint32_t)(DAC_MCR_SINFORMAT1)) << (Channel & 0x10UL));
 80076d8:	687b      	ldr	r3, [r7, #4]
 80076da:	f003 0310 	and.w	r3, r3, #16
 80076de:	f44f 7200 	mov.w	r2, #512	; 0x200
 80076e2:	fa02 f303 	lsl.w	r3, r2, r3
 80076e6:	43db      	mvns	r3, r3
 80076e8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80076ea:	4013      	ands	r3, r2
 80076ec:	627b      	str	r3, [r7, #36]	; 0x24
  /* Configure for the selected DAC channel: Signed format */
  tmpreg2 |= (sConfig->DAC_SignedFormat == ENABLE) ? DAC_MCR_SINFORMAT1 : 0UL;
 80076ee:	68bb      	ldr	r3, [r7, #8]
 80076f0:	795b      	ldrb	r3, [r3, #5]
 80076f2:	2b01      	cmp	r3, #1
 80076f4:	d102      	bne.n	80076fc <HAL_DAC_ConfigChannel+0x210>
 80076f6:	f44f 7300 	mov.w	r3, #512	; 0x200
 80076fa:	e000      	b.n	80076fe <HAL_DAC_ConfigChannel+0x212>
 80076fc:	2300      	movs	r3, #0
 80076fe:	69ba      	ldr	r2, [r7, #24]
 8007700:	4313      	orrs	r3, r2
 8007702:	61bb      	str	r3, [r7, #24]
  /* Clear DAC_MCR_HFSEL bits */
  tmpreg1 &= ~(DAC_MCR_HFSEL);
 8007704:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007706:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 800770a:	627b      	str	r3, [r7, #36]	; 0x24
  /* Configure for both DAC channels: high frequency mode */
  if (DAC_HIGH_FREQUENCY_INTERFACE_MODE_AUTOMATIC == sConfig->DAC_HighFrequency)
 800770c:	68bb      	ldr	r3, [r7, #8]
 800770e:	681b      	ldr	r3, [r3, #0]
 8007710:	2b02      	cmp	r3, #2
 8007712:	d114      	bne.n	800773e <HAL_DAC_ConfigChannel+0x252>
  {
    hclkfreq = HAL_RCC_GetHCLKFreq();
 8007714:	f001 fae0 	bl	8008cd8 <HAL_RCC_GetHCLKFreq>
 8007718:	6178      	str	r0, [r7, #20]
    if (hclkfreq > HFSEL_ENABLE_THRESHOLD_160MHZ)
 800771a:	697b      	ldr	r3, [r7, #20]
 800771c:	4a47      	ldr	r2, [pc, #284]	; (800783c <HAL_DAC_ConfigChannel+0x350>)
 800771e:	4293      	cmp	r3, r2
 8007720:	d904      	bls.n	800772c <HAL_DAC_ConfigChannel+0x240>
    {
      tmpreg1 |= DAC_HIGH_FREQUENCY_INTERFACE_MODE_ABOVE_160MHZ;
 8007722:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007724:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007728:	627b      	str	r3, [r7, #36]	; 0x24
 800772a:	e00d      	b.n	8007748 <HAL_DAC_ConfigChannel+0x25c>
    }
    else if (hclkfreq > HFSEL_ENABLE_THRESHOLD_80MHZ)
 800772c:	697b      	ldr	r3, [r7, #20]
 800772e:	4a44      	ldr	r2, [pc, #272]	; (8007840 <HAL_DAC_ConfigChannel+0x354>)
 8007730:	4293      	cmp	r3, r2
 8007732:	d909      	bls.n	8007748 <HAL_DAC_ConfigChannel+0x25c>
    {
      tmpreg1 |= DAC_HIGH_FREQUENCY_INTERFACE_MODE_ABOVE_80MHZ;
 8007734:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007736:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800773a:	627b      	str	r3, [r7, #36]	; 0x24
 800773c:	e004      	b.n	8007748 <HAL_DAC_ConfigChannel+0x25c>
      tmpreg1 |= DAC_HIGH_FREQUENCY_INTERFACE_MODE_DISABLE;
    }
  }
  else
  {
    tmpreg1 |= sConfig->DAC_HighFrequency;
 800773e:	68bb      	ldr	r3, [r7, #8]
 8007740:	681b      	ldr	r3, [r3, #0]
 8007742:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007744:	4313      	orrs	r3, r2
 8007746:	627b      	str	r3, [r7, #36]	; 0x24
  }
  /* Calculate MCR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 8007748:	687b      	ldr	r3, [r7, #4]
 800774a:	f003 0310 	and.w	r3, r3, #16
 800774e:	69ba      	ldr	r2, [r7, #24]
 8007750:	fa02 f303 	lsl.w	r3, r2, r3
 8007754:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007756:	4313      	orrs	r3, r2
 8007758:	627b      	str	r3, [r7, #36]	; 0x24
  /* Write to DAC MCR */
  hdac->Instance->MCR = tmpreg1;
 800775a:	68fb      	ldr	r3, [r7, #12]
 800775c:	681b      	ldr	r3, [r3, #0]
 800775e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007760:	63da      	str	r2, [r3, #60]	; 0x3c

  /* DAC in normal operating mode hence clear DAC_CR_CENx bit */
  CLEAR_BIT(hdac->Instance->CR, DAC_CR_CEN1 << (Channel & 0x10UL));
 8007762:	68fb      	ldr	r3, [r7, #12]
 8007764:	681b      	ldr	r3, [r3, #0]
 8007766:	6819      	ldr	r1, [r3, #0]
 8007768:	687b      	ldr	r3, [r7, #4]
 800776a:	f003 0310 	and.w	r3, r3, #16
 800776e:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8007772:	fa02 f303 	lsl.w	r3, r2, r3
 8007776:	43da      	mvns	r2, r3
 8007778:	68fb      	ldr	r3, [r7, #12]
 800777a:	681b      	ldr	r3, [r3, #0]
 800777c:	400a      	ands	r2, r1
 800777e:	601a      	str	r2, [r3, #0]

  /* Get the DAC CR value */
  tmpreg1 = hdac->Instance->CR;
 8007780:	68fb      	ldr	r3, [r7, #12]
 8007782:	681b      	ldr	r3, [r3, #0]
 8007784:	681b      	ldr	r3, [r3, #0]
 8007786:	627b      	str	r3, [r7, #36]	; 0x24
  /* Clear TENx, TSELx, WAVEx and MAMPx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1)) << (Channel & 0x10UL));
 8007788:	687b      	ldr	r3, [r7, #4]
 800778a:	f003 0310 	and.w	r3, r3, #16
 800778e:	f640 72fe 	movw	r2, #4094	; 0xffe
 8007792:	fa02 f303 	lsl.w	r3, r2, r3
 8007796:	43db      	mvns	r3, r3
 8007798:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800779a:	4013      	ands	r3, r2
 800779c:	627b      	str	r3, [r7, #36]	; 0x24
  /* Configure for the selected DAC channel: trigger */
  /* Set TSELx and TENx bits according to DAC_Trigger value */
  tmpreg2 = sConfig->DAC_Trigger;
 800779e:	68bb      	ldr	r3, [r7, #8]
 80077a0:	68db      	ldr	r3, [r3, #12]
 80077a2:	61bb      	str	r3, [r7, #24]
  /* Calculate CR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 80077a4:	687b      	ldr	r3, [r7, #4]
 80077a6:	f003 0310 	and.w	r3, r3, #16
 80077aa:	69ba      	ldr	r2, [r7, #24]
 80077ac:	fa02 f303 	lsl.w	r3, r2, r3
 80077b0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80077b2:	4313      	orrs	r3, r2
 80077b4:	627b      	str	r3, [r7, #36]	; 0x24
  /* Write to DAC CR */
  hdac->Instance->CR = tmpreg1;
 80077b6:	68fb      	ldr	r3, [r7, #12]
 80077b8:	681b      	ldr	r3, [r3, #0]
 80077ba:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80077bc:	601a      	str	r2, [r3, #0]
  /* Disable wave generation */
  hdac->Instance->CR &= ~(DAC_CR_WAVE1 << (Channel & 0x10UL));
 80077be:	68fb      	ldr	r3, [r7, #12]
 80077c0:	681b      	ldr	r3, [r3, #0]
 80077c2:	6819      	ldr	r1, [r3, #0]
 80077c4:	687b      	ldr	r3, [r7, #4]
 80077c6:	f003 0310 	and.w	r3, r3, #16
 80077ca:	22c0      	movs	r2, #192	; 0xc0
 80077cc:	fa02 f303 	lsl.w	r3, r2, r3
 80077d0:	43da      	mvns	r2, r3
 80077d2:	68fb      	ldr	r3, [r7, #12]
 80077d4:	681b      	ldr	r3, [r3, #0]
 80077d6:	400a      	ands	r2, r1
 80077d8:	601a      	str	r2, [r3, #0]

  /* Set STRSTTRIGSELx and STINCTRIGSELx bits according to DAC_Trigger & DAC_Trigger2 values */
  tmpreg2 = ((sConfig->DAC_Trigger & DAC_CR_TSEL1) >> DAC_CR_TSEL1_Pos) << DAC_STMODR_STRSTTRIGSEL1_Pos;
 80077da:	68bb      	ldr	r3, [r7, #8]
 80077dc:	68db      	ldr	r3, [r3, #12]
 80077de:	089b      	lsrs	r3, r3, #2
 80077e0:	f003 030f 	and.w	r3, r3, #15
 80077e4:	61bb      	str	r3, [r7, #24]
  tmpreg2 |= ((sConfig->DAC_Trigger2 & DAC_CR_TSEL1) >> DAC_CR_TSEL1_Pos) << DAC_STMODR_STINCTRIGSEL1_Pos;
 80077e6:	68bb      	ldr	r3, [r7, #8]
 80077e8:	691b      	ldr	r3, [r3, #16]
 80077ea:	089b      	lsrs	r3, r3, #2
 80077ec:	021b      	lsls	r3, r3, #8
 80077ee:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 80077f2:	69ba      	ldr	r2, [r7, #24]
 80077f4:	4313      	orrs	r3, r2
 80077f6:	61bb      	str	r3, [r7, #24]
  /* Modify STMODR register value depending on DAC_Channel */
  MODIFY_REG(hdac->Instance->STMODR, (DAC_STMODR_STINCTRIGSEL1 | DAC_STMODR_STRSTTRIGSEL1) << (Channel & 0x10UL), tmpreg2 << (Channel & 0x10UL));
 80077f8:	68fb      	ldr	r3, [r7, #12]
 80077fa:	681b      	ldr	r3, [r3, #0]
 80077fc:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 80077fe:	687b      	ldr	r3, [r7, #4]
 8007800:	f003 0310 	and.w	r3, r3, #16
 8007804:	f640 710f 	movw	r1, #3855	; 0xf0f
 8007808:	fa01 f303 	lsl.w	r3, r1, r3
 800780c:	43db      	mvns	r3, r3
 800780e:	ea02 0103 	and.w	r1, r2, r3
 8007812:	687b      	ldr	r3, [r7, #4]
 8007814:	f003 0310 	and.w	r3, r3, #16
 8007818:	69ba      	ldr	r2, [r7, #24]
 800781a:	409a      	lsls	r2, r3
 800781c:	68fb      	ldr	r3, [r7, #12]
 800781e:	681b      	ldr	r3, [r3, #0]
 8007820:	430a      	orrs	r2, r1
 8007822:	661a      	str	r2, [r3, #96]	; 0x60
  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 8007824:	68fb      	ldr	r3, [r7, #12]
 8007826:	2201      	movs	r2, #1
 8007828:	711a      	strb	r2, [r3, #4]

  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 800782a:	68fb      	ldr	r3, [r7, #12]
 800782c:	2200      	movs	r2, #0
 800782e:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 8007830:	2300      	movs	r3, #0
}
 8007832:	4618      	mov	r0, r3
 8007834:	3728      	adds	r7, #40	; 0x28
 8007836:	46bd      	mov	sp, r7
 8007838:	bd80      	pop	{r7, pc}
 800783a:	bf00      	nop
 800783c:	09896800 	.word	0x09896800
 8007840:	04c4b400 	.word	0x04c4b400

08007844 <DAC_DMAConvCpltCh1>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAConvCpltCh1(DMA_HandleTypeDef *hdma)
{
 8007844:	b580      	push	{r7, lr}
 8007846:	b084      	sub	sp, #16
 8007848:	af00      	add	r7, sp, #0
 800784a:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800784c:	687b      	ldr	r3, [r7, #4]
 800784e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007850:	60fb      	str	r3, [r7, #12]

#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvCpltCallbackCh1(hdac);
#else
  HAL_DAC_ConvCpltCallbackCh1(hdac);
 8007852:	68f8      	ldr	r0, [r7, #12]
 8007854:	f7ff fe20 	bl	8007498 <HAL_DAC_ConvCpltCallbackCh1>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

  hdac->State = HAL_DAC_STATE_READY;
 8007858:	68fb      	ldr	r3, [r7, #12]
 800785a:	2201      	movs	r2, #1
 800785c:	711a      	strb	r2, [r3, #4]
}
 800785e:	bf00      	nop
 8007860:	3710      	adds	r7, #16
 8007862:	46bd      	mov	sp, r7
 8007864:	bd80      	pop	{r7, pc}

08007866 <DAC_DMAHalfConvCpltCh1>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAHalfConvCpltCh1(DMA_HandleTypeDef *hdma)
{
 8007866:	b580      	push	{r7, lr}
 8007868:	b084      	sub	sp, #16
 800786a:	af00      	add	r7, sp, #0
 800786c:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800786e:	687b      	ldr	r3, [r7, #4]
 8007870:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007872:	60fb      	str	r3, [r7, #12]
  /* Conversion complete callback */
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvHalfCpltCallbackCh1(hdac);
#else
  HAL_DAC_ConvHalfCpltCallbackCh1(hdac);
 8007874:	68f8      	ldr	r0, [r7, #12]
 8007876:	f7ff fe19 	bl	80074ac <HAL_DAC_ConvHalfCpltCallbackCh1>
#endif  /* USE_HAL_DAC_REGISTER_CALLBACKS */
}
 800787a:	bf00      	nop
 800787c:	3710      	adds	r7, #16
 800787e:	46bd      	mov	sp, r7
 8007880:	bd80      	pop	{r7, pc}

08007882 <DAC_DMAErrorCh1>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAErrorCh1(DMA_HandleTypeDef *hdma)
{
 8007882:	b580      	push	{r7, lr}
 8007884:	b084      	sub	sp, #16
 8007886:	af00      	add	r7, sp, #0
 8007888:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800788a:	687b      	ldr	r3, [r7, #4]
 800788c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800788e:	60fb      	str	r3, [r7, #12]

  /* Set DAC error code to DMA error */
  hdac->ErrorCode |= HAL_DAC_ERROR_DMA;
 8007890:	68fb      	ldr	r3, [r7, #12]
 8007892:	691b      	ldr	r3, [r3, #16]
 8007894:	f043 0204 	orr.w	r2, r3, #4
 8007898:	68fb      	ldr	r3, [r7, #12]
 800789a:	611a      	str	r2, [r3, #16]

#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ErrorCallbackCh1(hdac);
#else
  HAL_DAC_ErrorCallbackCh1(hdac);
 800789c:	68f8      	ldr	r0, [r7, #12]
 800789e:	f7fc fffe 	bl	800489e <HAL_DAC_ErrorCallbackCh1>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

  hdac->State = HAL_DAC_STATE_READY;
 80078a2:	68fb      	ldr	r3, [r7, #12]
 80078a4:	2201      	movs	r2, #1
 80078a6:	711a      	strb	r2, [r3, #4]
}
 80078a8:	bf00      	nop
 80078aa:	3710      	adds	r7, #16
 80078ac:	46bd      	mov	sp, r7
 80078ae:	bd80      	pop	{r7, pc}

080078b0 <HAL_DACEx_ConvCpltCallbackCh2>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DACEx_ConvCpltCallbackCh2(DAC_HandleTypeDef *hdac)
{
 80078b0:	b480      	push	{r7}
 80078b2:	b083      	sub	sp, #12
 80078b4:	af00      	add	r7, sp, #0
 80078b6:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DACEx_ConvCpltCallbackCh2 could be implemented in the user file
   */
}
 80078b8:	bf00      	nop
 80078ba:	370c      	adds	r7, #12
 80078bc:	46bd      	mov	sp, r7
 80078be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078c2:	4770      	bx	lr

080078c4 <HAL_DACEx_ConvHalfCpltCallbackCh2>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DACEx_ConvHalfCpltCallbackCh2(DAC_HandleTypeDef *hdac)
{
 80078c4:	b480      	push	{r7}
 80078c6:	b083      	sub	sp, #12
 80078c8:	af00      	add	r7, sp, #0
 80078ca:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DACEx_ConvHalfCpltCallbackCh2 could be implemented in the user file
   */
}
 80078cc:	bf00      	nop
 80078ce:	370c      	adds	r7, #12
 80078d0:	46bd      	mov	sp, r7
 80078d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078d6:	4770      	bx	lr

080078d8 <HAL_DACEx_ErrorCallbackCh2>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DACEx_ErrorCallbackCh2(DAC_HandleTypeDef *hdac)
{
 80078d8:	b480      	push	{r7}
 80078da:	b083      	sub	sp, #12
 80078dc:	af00      	add	r7, sp, #0
 80078de:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DACEx_ErrorCallbackCh2 could be implemented in the user file
   */
}
 80078e0:	bf00      	nop
 80078e2:	370c      	adds	r7, #12
 80078e4:	46bd      	mov	sp, r7
 80078e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078ea:	4770      	bx	lr

080078ec <DAC_DMAConvCpltCh2>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAConvCpltCh2(DMA_HandleTypeDef *hdma)
{
 80078ec:	b580      	push	{r7, lr}
 80078ee:	b084      	sub	sp, #16
 80078f0:	af00      	add	r7, sp, #0
 80078f2:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80078f4:	687b      	ldr	r3, [r7, #4]
 80078f6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80078f8:	60fb      	str	r3, [r7, #12]

#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvCpltCallbackCh2(hdac);
#else
  HAL_DACEx_ConvCpltCallbackCh2(hdac);
 80078fa:	68f8      	ldr	r0, [r7, #12]
 80078fc:	f7ff ffd8 	bl	80078b0 <HAL_DACEx_ConvCpltCallbackCh2>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

  hdac->State = HAL_DAC_STATE_READY;
 8007900:	68fb      	ldr	r3, [r7, #12]
 8007902:	2201      	movs	r2, #1
 8007904:	711a      	strb	r2, [r3, #4]
}
 8007906:	bf00      	nop
 8007908:	3710      	adds	r7, #16
 800790a:	46bd      	mov	sp, r7
 800790c:	bd80      	pop	{r7, pc}

0800790e <DAC_DMAHalfConvCpltCh2>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAHalfConvCpltCh2(DMA_HandleTypeDef *hdma)
{
 800790e:	b580      	push	{r7, lr}
 8007910:	b084      	sub	sp, #16
 8007912:	af00      	add	r7, sp, #0
 8007914:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8007916:	687b      	ldr	r3, [r7, #4]
 8007918:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800791a:	60fb      	str	r3, [r7, #12]
  /* Conversion complete callback */
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvHalfCpltCallbackCh2(hdac);
#else
  HAL_DACEx_ConvHalfCpltCallbackCh2(hdac);
 800791c:	68f8      	ldr	r0, [r7, #12]
 800791e:	f7ff ffd1 	bl	80078c4 <HAL_DACEx_ConvHalfCpltCallbackCh2>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
}
 8007922:	bf00      	nop
 8007924:	3710      	adds	r7, #16
 8007926:	46bd      	mov	sp, r7
 8007928:	bd80      	pop	{r7, pc}

0800792a <DAC_DMAErrorCh2>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAErrorCh2(DMA_HandleTypeDef *hdma)
{
 800792a:	b580      	push	{r7, lr}
 800792c:	b084      	sub	sp, #16
 800792e:	af00      	add	r7, sp, #0
 8007930:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8007932:	687b      	ldr	r3, [r7, #4]
 8007934:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007936:	60fb      	str	r3, [r7, #12]

  /* Set DAC error code to DMA error */
  hdac->ErrorCode |= HAL_DAC_ERROR_DMA;
 8007938:	68fb      	ldr	r3, [r7, #12]
 800793a:	691b      	ldr	r3, [r3, #16]
 800793c:	f043 0204 	orr.w	r2, r3, #4
 8007940:	68fb      	ldr	r3, [r7, #12]
 8007942:	611a      	str	r2, [r3, #16]

#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ErrorCallbackCh2(hdac);
#else
  HAL_DACEx_ErrorCallbackCh2(hdac);
 8007944:	68f8      	ldr	r0, [r7, #12]
 8007946:	f7ff ffc7 	bl	80078d8 <HAL_DACEx_ErrorCallbackCh2>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

  hdac->State = HAL_DAC_STATE_READY;
 800794a:	68fb      	ldr	r3, [r7, #12]
 800794c:	2201      	movs	r2, #1
 800794e:	711a      	strb	r2, [r3, #4]
}
 8007950:	bf00      	nop
 8007952:	3710      	adds	r7, #16
 8007954:	46bd      	mov	sp, r7
 8007956:	bd80      	pop	{r7, pc}

08007958 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8007958:	b580      	push	{r7, lr}
 800795a:	b084      	sub	sp, #16
 800795c:	af00      	add	r7, sp, #0
 800795e:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if (hdma == NULL)
 8007960:	687b      	ldr	r3, [r7, #4]
 8007962:	2b00      	cmp	r3, #0
 8007964:	d101      	bne.n	800796a <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 8007966:	2301      	movs	r3, #1
 8007968:	e08d      	b.n	8007a86 <HAL_DMA_Init+0x12e>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 800796a:	687b      	ldr	r3, [r7, #4]
 800796c:	681b      	ldr	r3, [r3, #0]
 800796e:	461a      	mov	r2, r3
 8007970:	4b47      	ldr	r3, [pc, #284]	; (8007a90 <HAL_DMA_Init+0x138>)
 8007972:	429a      	cmp	r2, r3
 8007974:	d80f      	bhi.n	8007996 <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 8007976:	687b      	ldr	r3, [r7, #4]
 8007978:	681b      	ldr	r3, [r3, #0]
 800797a:	461a      	mov	r2, r3
 800797c:	4b45      	ldr	r3, [pc, #276]	; (8007a94 <HAL_DMA_Init+0x13c>)
 800797e:	4413      	add	r3, r2
 8007980:	4a45      	ldr	r2, [pc, #276]	; (8007a98 <HAL_DMA_Init+0x140>)
 8007982:	fba2 2303 	umull	r2, r3, r2, r3
 8007986:	091b      	lsrs	r3, r3, #4
 8007988:	009a      	lsls	r2, r3, #2
 800798a:	687b      	ldr	r3, [r7, #4]
 800798c:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA1;
 800798e:	687b      	ldr	r3, [r7, #4]
 8007990:	4a42      	ldr	r2, [pc, #264]	; (8007a9c <HAL_DMA_Init+0x144>)
 8007992:	641a      	str	r2, [r3, #64]	; 0x40
 8007994:	e00e      	b.n	80079b4 <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
 8007996:	687b      	ldr	r3, [r7, #4]
 8007998:	681b      	ldr	r3, [r3, #0]
 800799a:	461a      	mov	r2, r3
 800799c:	4b40      	ldr	r3, [pc, #256]	; (8007aa0 <HAL_DMA_Init+0x148>)
 800799e:	4413      	add	r3, r2
 80079a0:	4a3d      	ldr	r2, [pc, #244]	; (8007a98 <HAL_DMA_Init+0x140>)
 80079a2:	fba2 2303 	umull	r2, r3, r2, r3
 80079a6:	091b      	lsrs	r3, r3, #4
 80079a8:	009a      	lsls	r2, r3, #2
 80079aa:	687b      	ldr	r3, [r7, #4]
 80079ac:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA2;
 80079ae:	687b      	ldr	r3, [r7, #4]
 80079b0:	4a3c      	ldr	r2, [pc, #240]	; (8007aa4 <HAL_DMA_Init+0x14c>)
 80079b2:	641a      	str	r2, [r3, #64]	; 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80079b4:	687b      	ldr	r3, [r7, #4]
 80079b6:	2202      	movs	r2, #2
 80079b8:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 80079bc:	687b      	ldr	r3, [r7, #4]
 80079be:	681b      	ldr	r3, [r3, #0]
 80079c0:	681b      	ldr	r3, [r3, #0]
 80079c2:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 80079c4:	68fb      	ldr	r3, [r7, #12]
 80079c6:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 80079ca:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80079ce:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 80079d0:	687b      	ldr	r3, [r7, #4]
 80079d2:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80079d4:	687b      	ldr	r3, [r7, #4]
 80079d6:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 80079d8:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80079da:	687b      	ldr	r3, [r7, #4]
 80079dc:	691b      	ldr	r3, [r3, #16]
 80079de:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80079e0:	687b      	ldr	r3, [r7, #4]
 80079e2:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80079e4:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80079e6:	687b      	ldr	r3, [r7, #4]
 80079e8:	699b      	ldr	r3, [r3, #24]
 80079ea:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80079ec:	687b      	ldr	r3, [r7, #4]
 80079ee:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80079f0:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80079f2:	687b      	ldr	r3, [r7, #4]
 80079f4:	6a1b      	ldr	r3, [r3, #32]
 80079f6:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 80079f8:	68fa      	ldr	r2, [r7, #12]
 80079fa:	4313      	orrs	r3, r2
 80079fc:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 80079fe:	687b      	ldr	r3, [r7, #4]
 8007a00:	681b      	ldr	r3, [r3, #0]
 8007a02:	68fa      	ldr	r2, [r7, #12]
 8007a04:	601a      	str	r2, [r3, #0]

  /* Initialize parameters for DMAMUX channel :
     DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
  */
  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 8007a06:	6878      	ldr	r0, [r7, #4]
 8007a08:	f000 fa10 	bl	8007e2c <DMA_CalcDMAMUXChannelBaseAndMask>

  if (hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8007a0c:	687b      	ldr	r3, [r7, #4]
 8007a0e:	689b      	ldr	r3, [r3, #8]
 8007a10:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8007a14:	d102      	bne.n	8007a1c <HAL_DMA_Init+0xc4>
  {
    /* if memory to memory force the request to 0*/
    hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 8007a16:	687b      	ldr	r3, [r7, #4]
 8007a18:	2200      	movs	r2, #0
 8007a1a:	605a      	str	r2, [r3, #4]
  }

  /* Set peripheral request  to DMAMUX channel */
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8007a1c:	687b      	ldr	r3, [r7, #4]
 8007a1e:	685a      	ldr	r2, [r3, #4]
 8007a20:	687b      	ldr	r3, [r7, #4]
 8007a22:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007a24:	b2d2      	uxtb	r2, r2
 8007a26:	601a      	str	r2, [r3, #0]

  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8007a28:	687b      	ldr	r3, [r7, #4]
 8007a2a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007a2c:	687a      	ldr	r2, [r7, #4]
 8007a2e:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8007a30:	605a      	str	r2, [r3, #4]

  if (((hdma->Init.Request >  0U) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 8007a32:	687b      	ldr	r3, [r7, #4]
 8007a34:	685b      	ldr	r3, [r3, #4]
 8007a36:	2b00      	cmp	r3, #0
 8007a38:	d010      	beq.n	8007a5c <HAL_DMA_Init+0x104>
 8007a3a:	687b      	ldr	r3, [r7, #4]
 8007a3c:	685b      	ldr	r3, [r3, #4]
 8007a3e:	2b04      	cmp	r3, #4
 8007a40:	d80c      	bhi.n	8007a5c <HAL_DMA_Init+0x104>
  {
    /* Initialize parameters for DMAMUX request generator :
       DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask
    */
    DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 8007a42:	6878      	ldr	r0, [r7, #4]
 8007a44:	f000 fa30 	bl	8007ea8 <DMA_CalcDMAMUXRequestGenBaseAndMask>

    /* Reset the DMAMUX request generator register*/
    hdma->DMAmuxRequestGen->RGCR = 0U;
 8007a48:	687b      	ldr	r3, [r7, #4]
 8007a4a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007a4c:	2200      	movs	r2, #0
 8007a4e:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8007a50:	687b      	ldr	r3, [r7, #4]
 8007a52:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007a54:	687a      	ldr	r2, [r7, #4]
 8007a56:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 8007a58:	605a      	str	r2, [r3, #4]
 8007a5a:	e008      	b.n	8007a6e <HAL_DMA_Init+0x116>
  }
  else
  {
    hdma->DMAmuxRequestGen = 0U;
 8007a5c:	687b      	ldr	r3, [r7, #4]
 8007a5e:	2200      	movs	r2, #0
 8007a60:	655a      	str	r2, [r3, #84]	; 0x54
    hdma->DMAmuxRequestGenStatus = 0U;
 8007a62:	687b      	ldr	r3, [r7, #4]
 8007a64:	2200      	movs	r2, #0
 8007a66:	659a      	str	r2, [r3, #88]	; 0x58
    hdma->DMAmuxRequestGenStatusMask = 0U;
 8007a68:	687b      	ldr	r3, [r7, #4]
 8007a6a:	2200      	movs	r2, #0
 8007a6c:	65da      	str	r2, [r3, #92]	; 0x5c
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8007a6e:	687b      	ldr	r3, [r7, #4]
 8007a70:	2200      	movs	r2, #0
 8007a72:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA state*/
  hdma->State  = HAL_DMA_STATE_READY;
 8007a74:	687b      	ldr	r3, [r7, #4]
 8007a76:	2201      	movs	r2, #1
 8007a78:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8007a7c:	687b      	ldr	r3, [r7, #4]
 8007a7e:	2200      	movs	r2, #0
 8007a80:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  return HAL_OK;
 8007a84:	2300      	movs	r3, #0
}
 8007a86:	4618      	mov	r0, r3
 8007a88:	3710      	adds	r7, #16
 8007a8a:	46bd      	mov	sp, r7
 8007a8c:	bd80      	pop	{r7, pc}
 8007a8e:	bf00      	nop
 8007a90:	40020407 	.word	0x40020407
 8007a94:	bffdfff8 	.word	0xbffdfff8
 8007a98:	cccccccd 	.word	0xcccccccd
 8007a9c:	40020000 	.word	0x40020000
 8007aa0:	bffdfbf8 	.word	0xbffdfbf8
 8007aa4:	40020400 	.word	0x40020400

08007aa8 <HAL_DMA_Start_IT>:
  * @param  DataLength The length of data to be transferred from source to destination (up to 256Kbytes-1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress,
                                   uint32_t DataLength)
{
 8007aa8:	b580      	push	{r7, lr}
 8007aaa:	b086      	sub	sp, #24
 8007aac:	af00      	add	r7, sp, #0
 8007aae:	60f8      	str	r0, [r7, #12]
 8007ab0:	60b9      	str	r1, [r7, #8]
 8007ab2:	607a      	str	r2, [r7, #4]
 8007ab4:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8007ab6:	2300      	movs	r3, #0
 8007ab8:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8007aba:	68fb      	ldr	r3, [r7, #12]
 8007abc:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8007ac0:	2b01      	cmp	r3, #1
 8007ac2:	d101      	bne.n	8007ac8 <HAL_DMA_Start_IT+0x20>
 8007ac4:	2302      	movs	r3, #2
 8007ac6:	e066      	b.n	8007b96 <HAL_DMA_Start_IT+0xee>
 8007ac8:	68fb      	ldr	r3, [r7, #12]
 8007aca:	2201      	movs	r2, #1
 8007acc:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  if (HAL_DMA_STATE_READY == hdma->State)
 8007ad0:	68fb      	ldr	r3, [r7, #12]
 8007ad2:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8007ad6:	b2db      	uxtb	r3, r3
 8007ad8:	2b01      	cmp	r3, #1
 8007ada:	d155      	bne.n	8007b88 <HAL_DMA_Start_IT+0xe0>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8007adc:	68fb      	ldr	r3, [r7, #12]
 8007ade:	2202      	movs	r2, #2
 8007ae0:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8007ae4:	68fb      	ldr	r3, [r7, #12]
 8007ae6:	2200      	movs	r2, #0
 8007ae8:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8007aea:	68fb      	ldr	r3, [r7, #12]
 8007aec:	681b      	ldr	r3, [r3, #0]
 8007aee:	681a      	ldr	r2, [r3, #0]
 8007af0:	68fb      	ldr	r3, [r7, #12]
 8007af2:	681b      	ldr	r3, [r3, #0]
 8007af4:	f022 0201 	bic.w	r2, r2, #1
 8007af8:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8007afa:	683b      	ldr	r3, [r7, #0]
 8007afc:	687a      	ldr	r2, [r7, #4]
 8007afe:	68b9      	ldr	r1, [r7, #8]
 8007b00:	68f8      	ldr	r0, [r7, #12]
 8007b02:	f000 f954 	bl	8007dae <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if (NULL != hdma->XferHalfCpltCallback)
 8007b06:	68fb      	ldr	r3, [r7, #12]
 8007b08:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007b0a:	2b00      	cmp	r3, #0
 8007b0c:	d008      	beq.n	8007b20 <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8007b0e:	68fb      	ldr	r3, [r7, #12]
 8007b10:	681b      	ldr	r3, [r3, #0]
 8007b12:	681a      	ldr	r2, [r3, #0]
 8007b14:	68fb      	ldr	r3, [r7, #12]
 8007b16:	681b      	ldr	r3, [r3, #0]
 8007b18:	f042 020e 	orr.w	r2, r2, #14
 8007b1c:	601a      	str	r2, [r3, #0]
 8007b1e:	e00f      	b.n	8007b40 <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8007b20:	68fb      	ldr	r3, [r7, #12]
 8007b22:	681b      	ldr	r3, [r3, #0]
 8007b24:	681a      	ldr	r2, [r3, #0]
 8007b26:	68fb      	ldr	r3, [r7, #12]
 8007b28:	681b      	ldr	r3, [r3, #0]
 8007b2a:	f022 0204 	bic.w	r2, r2, #4
 8007b2e:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8007b30:	68fb      	ldr	r3, [r7, #12]
 8007b32:	681b      	ldr	r3, [r3, #0]
 8007b34:	681a      	ldr	r2, [r3, #0]
 8007b36:	68fb      	ldr	r3, [r7, #12]
 8007b38:	681b      	ldr	r3, [r3, #0]
 8007b3a:	f042 020a 	orr.w	r2, r2, #10
 8007b3e:	601a      	str	r2, [r3, #0]
    }

    /* Check if DMAMUX Synchronization is enabled*/
    if ((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 8007b40:	68fb      	ldr	r3, [r7, #12]
 8007b42:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007b44:	681b      	ldr	r3, [r3, #0]
 8007b46:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8007b4a:	2b00      	cmp	r3, #0
 8007b4c:	d007      	beq.n	8007b5e <HAL_DMA_Start_IT+0xb6>
    {
      /* Enable DMAMUX sync overrun IT*/
      hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 8007b4e:	68fb      	ldr	r3, [r7, #12]
 8007b50:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007b52:	681a      	ldr	r2, [r3, #0]
 8007b54:	68fb      	ldr	r3, [r7, #12]
 8007b56:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007b58:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8007b5c:	601a      	str	r2, [r3, #0]
    }

    if (hdma->DMAmuxRequestGen != 0U)
 8007b5e:	68fb      	ldr	r3, [r7, #12]
 8007b60:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007b62:	2b00      	cmp	r3, #0
 8007b64:	d007      	beq.n	8007b76 <HAL_DMA_Start_IT+0xce>
    {
      /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
      /* enable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 8007b66:	68fb      	ldr	r3, [r7, #12]
 8007b68:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007b6a:	681a      	ldr	r2, [r3, #0]
 8007b6c:	68fb      	ldr	r3, [r7, #12]
 8007b6e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007b70:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8007b74:	601a      	str	r2, [r3, #0]
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8007b76:	68fb      	ldr	r3, [r7, #12]
 8007b78:	681b      	ldr	r3, [r3, #0]
 8007b7a:	681a      	ldr	r2, [r3, #0]
 8007b7c:	68fb      	ldr	r3, [r7, #12]
 8007b7e:	681b      	ldr	r3, [r3, #0]
 8007b80:	f042 0201 	orr.w	r2, r2, #1
 8007b84:	601a      	str	r2, [r3, #0]
 8007b86:	e005      	b.n	8007b94 <HAL_DMA_Start_IT+0xec>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8007b88:	68fb      	ldr	r3, [r7, #12]
 8007b8a:	2200      	movs	r2, #0
 8007b8c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Remain BUSY */
    status = HAL_BUSY;
 8007b90:	2302      	movs	r3, #2
 8007b92:	75fb      	strb	r3, [r7, #23]
  }
  return status;
 8007b94:	7dfb      	ldrb	r3, [r7, #23]
}
 8007b96:	4618      	mov	r0, r3
 8007b98:	3718      	adds	r7, #24
 8007b9a:	46bd      	mov	sp, r7
 8007b9c:	bd80      	pop	{r7, pc}

08007b9e <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8007b9e:	b480      	push	{r7}
 8007ba0:	b085      	sub	sp, #20
 8007ba2:	af00      	add	r7, sp, #0
 8007ba4:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8007ba6:	2300      	movs	r3, #0
 8007ba8:	73fb      	strb	r3, [r7, #15]

  if(hdma->State != HAL_DMA_STATE_BUSY)
 8007baa:	687b      	ldr	r3, [r7, #4]
 8007bac:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8007bb0:	b2db      	uxtb	r3, r3
 8007bb2:	2b02      	cmp	r3, #2
 8007bb4:	d005      	beq.n	8007bc2 <HAL_DMA_Abort+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8007bb6:	687b      	ldr	r3, [r7, #4]
 8007bb8:	2204      	movs	r2, #4
 8007bba:	63da      	str	r2, [r3, #60]	; 0x3c

    status = HAL_ERROR;
 8007bbc:	2301      	movs	r3, #1
 8007bbe:	73fb      	strb	r3, [r7, #15]
 8007bc0:	e037      	b.n	8007c32 <HAL_DMA_Abort+0x94>
  }
  else
  {
     /* Disable DMA IT */
     __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8007bc2:	687b      	ldr	r3, [r7, #4]
 8007bc4:	681b      	ldr	r3, [r3, #0]
 8007bc6:	681a      	ldr	r2, [r3, #0]
 8007bc8:	687b      	ldr	r3, [r7, #4]
 8007bca:	681b      	ldr	r3, [r3, #0]
 8007bcc:	f022 020e 	bic.w	r2, r2, #14
 8007bd0:	601a      	str	r2, [r3, #0]
     
     /* disable the DMAMUX sync overrun IT*/
     hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8007bd2:	687b      	ldr	r3, [r7, #4]
 8007bd4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007bd6:	681a      	ldr	r2, [r3, #0]
 8007bd8:	687b      	ldr	r3, [r7, #4]
 8007bda:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007bdc:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8007be0:	601a      	str	r2, [r3, #0]
     
     /* Disable the channel */
     __HAL_DMA_DISABLE(hdma);
 8007be2:	687b      	ldr	r3, [r7, #4]
 8007be4:	681b      	ldr	r3, [r3, #0]
 8007be6:	681a      	ldr	r2, [r3, #0]
 8007be8:	687b      	ldr	r3, [r7, #4]
 8007bea:	681b      	ldr	r3, [r3, #0]
 8007bec:	f022 0201 	bic.w	r2, r2, #1
 8007bf0:	601a      	str	r2, [r3, #0]
     
     /* Clear all flags */
     hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 8007bf2:	687b      	ldr	r3, [r7, #4]
 8007bf4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007bf6:	f003 021f 	and.w	r2, r3, #31
 8007bfa:	687b      	ldr	r3, [r7, #4]
 8007bfc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007bfe:	2101      	movs	r1, #1
 8007c00:	fa01 f202 	lsl.w	r2, r1, r2
 8007c04:	605a      	str	r2, [r3, #4]
     
     /* Clear the DMAMUX synchro overrun flag */
     hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8007c06:	687b      	ldr	r3, [r7, #4]
 8007c08:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007c0a:	687a      	ldr	r2, [r7, #4]
 8007c0c:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8007c0e:	605a      	str	r2, [r3, #4]
     
     if (hdma->DMAmuxRequestGen != 0U)
 8007c10:	687b      	ldr	r3, [r7, #4]
 8007c12:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007c14:	2b00      	cmp	r3, #0
 8007c16:	d00c      	beq.n	8007c32 <HAL_DMA_Abort+0x94>
     {
       /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
       /* disable the request gen overrun IT*/
       hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8007c18:	687b      	ldr	r3, [r7, #4]
 8007c1a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007c1c:	681a      	ldr	r2, [r3, #0]
 8007c1e:	687b      	ldr	r3, [r7, #4]
 8007c20:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007c22:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8007c26:	601a      	str	r2, [r3, #0]
     
       /* Clear the DMAMUX request generator overrun flag */
       hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8007c28:	687b      	ldr	r3, [r7, #4]
 8007c2a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007c2c:	687a      	ldr	r2, [r7, #4]
 8007c2e:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 8007c30:	605a      	str	r2, [r3, #4]
     }
  }  
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8007c32:	687b      	ldr	r3, [r7, #4]
 8007c34:	2201      	movs	r2, #1
 8007c36:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);
 8007c3a:	687b      	ldr	r3, [r7, #4]
 8007c3c:	2200      	movs	r2, #0
 8007c3e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  return status;
 8007c42:	7bfb      	ldrb	r3, [r7, #15]
}
 8007c44:	4618      	mov	r0, r3
 8007c46:	3714      	adds	r7, #20
 8007c48:	46bd      	mov	sp, r7
 8007c4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c4e:	4770      	bx	lr

08007c50 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8007c50:	b580      	push	{r7, lr}
 8007c52:	b084      	sub	sp, #16
 8007c54:	af00      	add	r7, sp, #0
 8007c56:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8007c58:	687b      	ldr	r3, [r7, #4]
 8007c5a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007c5c:	681b      	ldr	r3, [r3, #0]
 8007c5e:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8007c60:	687b      	ldr	r3, [r7, #4]
 8007c62:	681b      	ldr	r3, [r3, #0]
 8007c64:	681b      	ldr	r3, [r3, #0]
 8007c66:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if ((0U != (flag_it & ((uint32_t)DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1FU)))) && (0U != (source_it & DMA_IT_HT)))
 8007c68:	687b      	ldr	r3, [r7, #4]
 8007c6a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007c6c:	f003 031f 	and.w	r3, r3, #31
 8007c70:	2204      	movs	r2, #4
 8007c72:	409a      	lsls	r2, r3
 8007c74:	68fb      	ldr	r3, [r7, #12]
 8007c76:	4013      	ands	r3, r2
 8007c78:	2b00      	cmp	r3, #0
 8007c7a:	d026      	beq.n	8007cca <HAL_DMA_IRQHandler+0x7a>
 8007c7c:	68bb      	ldr	r3, [r7, #8]
 8007c7e:	f003 0304 	and.w	r3, r3, #4
 8007c82:	2b00      	cmp	r3, #0
 8007c84:	d021      	beq.n	8007cca <HAL_DMA_IRQHandler+0x7a>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8007c86:	687b      	ldr	r3, [r7, #4]
 8007c88:	681b      	ldr	r3, [r3, #0]
 8007c8a:	681b      	ldr	r3, [r3, #0]
 8007c8c:	f003 0320 	and.w	r3, r3, #32
 8007c90:	2b00      	cmp	r3, #0
 8007c92:	d107      	bne.n	8007ca4 <HAL_DMA_IRQHandler+0x54>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8007c94:	687b      	ldr	r3, [r7, #4]
 8007c96:	681b      	ldr	r3, [r3, #0]
 8007c98:	681a      	ldr	r2, [r3, #0]
 8007c9a:	687b      	ldr	r3, [r7, #4]
 8007c9c:	681b      	ldr	r3, [r3, #0]
 8007c9e:	f022 0204 	bic.w	r2, r2, #4
 8007ca2:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1FU));
 8007ca4:	687b      	ldr	r3, [r7, #4]
 8007ca6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007ca8:	f003 021f 	and.w	r2, r3, #31
 8007cac:	687b      	ldr	r3, [r7, #4]
 8007cae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007cb0:	2104      	movs	r1, #4
 8007cb2:	fa01 f202 	lsl.w	r2, r1, r2
 8007cb6:	605a      	str	r2, [r3, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if (hdma->XferHalfCpltCallback != NULL)
 8007cb8:	687b      	ldr	r3, [r7, #4]
 8007cba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007cbc:	2b00      	cmp	r3, #0
 8007cbe:	d071      	beq.n	8007da4 <HAL_DMA_IRQHandler+0x154>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 8007cc0:	687b      	ldr	r3, [r7, #4]
 8007cc2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007cc4:	6878      	ldr	r0, [r7, #4]
 8007cc6:	4798      	blx	r3
    if (hdma->XferHalfCpltCallback != NULL)
 8007cc8:	e06c      	b.n	8007da4 <HAL_DMA_IRQHandler+0x154>
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  else if ((0U != (flag_it & ((uint32_t)DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1FU))))
 8007cca:	687b      	ldr	r3, [r7, #4]
 8007ccc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007cce:	f003 031f 	and.w	r3, r3, #31
 8007cd2:	2202      	movs	r2, #2
 8007cd4:	409a      	lsls	r2, r3
 8007cd6:	68fb      	ldr	r3, [r7, #12]
 8007cd8:	4013      	ands	r3, r2
 8007cda:	2b00      	cmp	r3, #0
 8007cdc:	d02e      	beq.n	8007d3c <HAL_DMA_IRQHandler+0xec>
           && (0U != (source_it & DMA_IT_TC)))
 8007cde:	68bb      	ldr	r3, [r7, #8]
 8007ce0:	f003 0302 	and.w	r3, r3, #2
 8007ce4:	2b00      	cmp	r3, #0
 8007ce6:	d029      	beq.n	8007d3c <HAL_DMA_IRQHandler+0xec>
  {
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8007ce8:	687b      	ldr	r3, [r7, #4]
 8007cea:	681b      	ldr	r3, [r3, #0]
 8007cec:	681b      	ldr	r3, [r3, #0]
 8007cee:	f003 0320 	and.w	r3, r3, #32
 8007cf2:	2b00      	cmp	r3, #0
 8007cf4:	d10b      	bne.n	8007d0e <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8007cf6:	687b      	ldr	r3, [r7, #4]
 8007cf8:	681b      	ldr	r3, [r3, #0]
 8007cfa:	681a      	ldr	r2, [r3, #0]
 8007cfc:	687b      	ldr	r3, [r7, #4]
 8007cfe:	681b      	ldr	r3, [r3, #0]
 8007d00:	f022 020a 	bic.w	r2, r2, #10
 8007d04:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8007d06:	687b      	ldr	r3, [r7, #4]
 8007d08:	2201      	movs	r2, #1
 8007d0a:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1FU));
 8007d0e:	687b      	ldr	r3, [r7, #4]
 8007d10:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007d12:	f003 021f 	and.w	r2, r3, #31
 8007d16:	687b      	ldr	r3, [r7, #4]
 8007d18:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007d1a:	2102      	movs	r1, #2
 8007d1c:	fa01 f202 	lsl.w	r2, r1, r2
 8007d20:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8007d22:	687b      	ldr	r3, [r7, #4]
 8007d24:	2200      	movs	r2, #0
 8007d26:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferCpltCallback != NULL)
 8007d2a:	687b      	ldr	r3, [r7, #4]
 8007d2c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007d2e:	2b00      	cmp	r3, #0
 8007d30:	d038      	beq.n	8007da4 <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8007d32:	687b      	ldr	r3, [r7, #4]
 8007d34:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007d36:	6878      	ldr	r0, [r7, #4]
 8007d38:	4798      	blx	r3
    if (hdma->XferCpltCallback != NULL)
 8007d3a:	e033      	b.n	8007da4 <HAL_DMA_IRQHandler+0x154>
    }
  }
  /* Transfer Error Interrupt management **************************************/
  else if ((0U != (flag_it & ((uint32_t)DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1FU))))
 8007d3c:	687b      	ldr	r3, [r7, #4]
 8007d3e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007d40:	f003 031f 	and.w	r3, r3, #31
 8007d44:	2208      	movs	r2, #8
 8007d46:	409a      	lsls	r2, r3
 8007d48:	68fb      	ldr	r3, [r7, #12]
 8007d4a:	4013      	ands	r3, r2
 8007d4c:	2b00      	cmp	r3, #0
 8007d4e:	d02a      	beq.n	8007da6 <HAL_DMA_IRQHandler+0x156>
           && (0U != (source_it & DMA_IT_TE)))
 8007d50:	68bb      	ldr	r3, [r7, #8]
 8007d52:	f003 0308 	and.w	r3, r3, #8
 8007d56:	2b00      	cmp	r3, #0
 8007d58:	d025      	beq.n	8007da6 <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8007d5a:	687b      	ldr	r3, [r7, #4]
 8007d5c:	681b      	ldr	r3, [r3, #0]
 8007d5e:	681a      	ldr	r2, [r3, #0]
 8007d60:	687b      	ldr	r3, [r7, #4]
 8007d62:	681b      	ldr	r3, [r3, #0]
 8007d64:	f022 020e 	bic.w	r2, r2, #14
 8007d68:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 8007d6a:	687b      	ldr	r3, [r7, #4]
 8007d6c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007d6e:	f003 021f 	and.w	r2, r3, #31
 8007d72:	687b      	ldr	r3, [r7, #4]
 8007d74:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007d76:	2101      	movs	r1, #1
 8007d78:	fa01 f202 	lsl.w	r2, r1, r2
 8007d7c:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8007d7e:	687b      	ldr	r3, [r7, #4]
 8007d80:	2201      	movs	r2, #1
 8007d82:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8007d84:	687b      	ldr	r3, [r7, #4]
 8007d86:	2201      	movs	r2, #1
 8007d88:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8007d8c:	687b      	ldr	r3, [r7, #4]
 8007d8e:	2200      	movs	r2, #0
 8007d90:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferErrorCallback != NULL)
 8007d94:	687b      	ldr	r3, [r7, #4]
 8007d96:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007d98:	2b00      	cmp	r3, #0
 8007d9a:	d004      	beq.n	8007da6 <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8007d9c:	687b      	ldr	r3, [r7, #4]
 8007d9e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007da0:	6878      	ldr	r0, [r7, #4]
 8007da2:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 8007da4:	bf00      	nop
 8007da6:	bf00      	nop
}
 8007da8:	3710      	adds	r7, #16
 8007daa:	46bd      	mov	sp, r7
 8007dac:	bd80      	pop	{r7, pc}

08007dae <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8007dae:	b480      	push	{r7}
 8007db0:	b085      	sub	sp, #20
 8007db2:	af00      	add	r7, sp, #0
 8007db4:	60f8      	str	r0, [r7, #12]
 8007db6:	60b9      	str	r1, [r7, #8]
 8007db8:	607a      	str	r2, [r7, #4]
 8007dba:	603b      	str	r3, [r7, #0]
  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8007dbc:	68fb      	ldr	r3, [r7, #12]
 8007dbe:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007dc0:	68fa      	ldr	r2, [r7, #12]
 8007dc2:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8007dc4:	605a      	str	r2, [r3, #4]

  if (hdma->DMAmuxRequestGen != 0U)
 8007dc6:	68fb      	ldr	r3, [r7, #12]
 8007dc8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007dca:	2b00      	cmp	r3, #0
 8007dcc:	d004      	beq.n	8007dd8 <DMA_SetConfig+0x2a>
  {
    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8007dce:	68fb      	ldr	r3, [r7, #12]
 8007dd0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007dd2:	68fa      	ldr	r2, [r7, #12]
 8007dd4:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 8007dd6:	605a      	str	r2, [r3, #4]
  }

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 8007dd8:	68fb      	ldr	r3, [r7, #12]
 8007dda:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007ddc:	f003 021f 	and.w	r2, r3, #31
 8007de0:	68fb      	ldr	r3, [r7, #12]
 8007de2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007de4:	2101      	movs	r1, #1
 8007de6:	fa01 f202 	lsl.w	r2, r1, r2
 8007dea:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8007dec:	68fb      	ldr	r3, [r7, #12]
 8007dee:	681b      	ldr	r3, [r3, #0]
 8007df0:	683a      	ldr	r2, [r7, #0]
 8007df2:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if ((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8007df4:	68fb      	ldr	r3, [r7, #12]
 8007df6:	689b      	ldr	r3, [r3, #8]
 8007df8:	2b10      	cmp	r3, #16
 8007dfa:	d108      	bne.n	8007e0e <DMA_SetConfig+0x60>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8007dfc:	68fb      	ldr	r3, [r7, #12]
 8007dfe:	681b      	ldr	r3, [r3, #0]
 8007e00:	687a      	ldr	r2, [r7, #4]
 8007e02:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8007e04:	68fb      	ldr	r3, [r7, #12]
 8007e06:	681b      	ldr	r3, [r3, #0]
 8007e08:	68ba      	ldr	r2, [r7, #8]
 8007e0a:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8007e0c:	e007      	b.n	8007e1e <DMA_SetConfig+0x70>
    hdma->Instance->CPAR = SrcAddress;
 8007e0e:	68fb      	ldr	r3, [r7, #12]
 8007e10:	681b      	ldr	r3, [r3, #0]
 8007e12:	68ba      	ldr	r2, [r7, #8]
 8007e14:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8007e16:	68fb      	ldr	r3, [r7, #12]
 8007e18:	681b      	ldr	r3, [r3, #0]
 8007e1a:	687a      	ldr	r2, [r7, #4]
 8007e1c:	60da      	str	r2, [r3, #12]
}
 8007e1e:	bf00      	nop
 8007e20:	3714      	adds	r7, #20
 8007e22:	46bd      	mov	sp, r7
 8007e24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e28:	4770      	bx	lr
	...

08007e2c <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma        pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval None
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8007e2c:	b480      	push	{r7}
 8007e2e:	b087      	sub	sp, #28
 8007e30:	af00      	add	r7, sp, #0
 8007e32:	6078      	str	r0, [r7, #4]
  uint32_t dmamux_base_addr;
  uint32_t channel_number;
  DMAMUX_Channel_TypeDef *DMAMUX1_ChannelBase;

  /* check if instance is not outside the DMA channel range */
  if ((uint32_t)hdma->Instance < (uint32_t)DMA2_Channel1)
 8007e34:	687b      	ldr	r3, [r7, #4]
 8007e36:	681b      	ldr	r3, [r3, #0]
 8007e38:	461a      	mov	r2, r3
 8007e3a:	4b16      	ldr	r3, [pc, #88]	; (8007e94 <DMA_CalcDMAMUXChannelBaseAndMask+0x68>)
 8007e3c:	429a      	cmp	r2, r3
 8007e3e:	d802      	bhi.n	8007e46 <DMA_CalcDMAMUXChannelBaseAndMask+0x1a>
  {
    /* DMA1 */
    DMAMUX1_ChannelBase = DMAMUX1_Channel0;
 8007e40:	4b15      	ldr	r3, [pc, #84]	; (8007e98 <DMA_CalcDMAMUXChannelBaseAndMask+0x6c>)
 8007e42:	617b      	str	r3, [r7, #20]
 8007e44:	e001      	b.n	8007e4a <DMA_CalcDMAMUXChannelBaseAndMask+0x1e>
  }
  else
  {
    /* DMA2 */
#if defined (STM32G471xx) || defined (STM32G473xx) || defined (STM32G474xx) || defined (STM32G483xx) || defined (STM32G484xx)
    DMAMUX1_ChannelBase = DMAMUX1_Channel8;
 8007e46:	4b15      	ldr	r3, [pc, #84]	; (8007e9c <DMA_CalcDMAMUXChannelBaseAndMask+0x70>)
 8007e48:	617b      	str	r3, [r7, #20]
    DMAMUX1_ChannelBase = DMAMUX1_Channel6;
#else
    DMAMUX1_ChannelBase = DMAMUX1_Channel7;
#endif /* STM32G4x1xx) */
  }
  dmamux_base_addr = (uint32_t)DMAMUX1_ChannelBase;
 8007e4a:	697b      	ldr	r3, [r7, #20]
 8007e4c:	613b      	str	r3, [r7, #16]
  channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 8007e4e:	687b      	ldr	r3, [r7, #4]
 8007e50:	681b      	ldr	r3, [r3, #0]
 8007e52:	b2db      	uxtb	r3, r3
 8007e54:	3b08      	subs	r3, #8
 8007e56:	4a12      	ldr	r2, [pc, #72]	; (8007ea0 <DMA_CalcDMAMUXChannelBaseAndMask+0x74>)
 8007e58:	fba2 2303 	umull	r2, r3, r2, r3
 8007e5c:	091b      	lsrs	r3, r3, #4
 8007e5e:	60fb      	str	r3, [r7, #12]
  hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)(uint32_t)(dmamux_base_addr + ((hdma->ChannelIndex >> 2U) * ((uint32_t)DMAMUX1_Channel1 - (uint32_t)DMAMUX1_Channel0)));
 8007e60:	687b      	ldr	r3, [r7, #4]
 8007e62:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007e64:	089b      	lsrs	r3, r3, #2
 8007e66:	009a      	lsls	r2, r3, #2
 8007e68:	693b      	ldr	r3, [r7, #16]
 8007e6a:	4413      	add	r3, r2
 8007e6c:	461a      	mov	r2, r3
 8007e6e:	687b      	ldr	r3, [r7, #4]
 8007e70:	649a      	str	r2, [r3, #72]	; 0x48
  hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 8007e72:	687b      	ldr	r3, [r7, #4]
 8007e74:	4a0b      	ldr	r2, [pc, #44]	; (8007ea4 <DMA_CalcDMAMUXChannelBaseAndMask+0x78>)
 8007e76:	64da      	str	r2, [r3, #76]	; 0x4c
  hdma->DMAmuxChannelStatusMask = 1UL << (channel_number & 0x1FU);
 8007e78:	68fb      	ldr	r3, [r7, #12]
 8007e7a:	f003 031f 	and.w	r3, r3, #31
 8007e7e:	2201      	movs	r2, #1
 8007e80:	409a      	lsls	r2, r3
 8007e82:	687b      	ldr	r3, [r7, #4]
 8007e84:	651a      	str	r2, [r3, #80]	; 0x50
}
 8007e86:	bf00      	nop
 8007e88:	371c      	adds	r7, #28
 8007e8a:	46bd      	mov	sp, r7
 8007e8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e90:	4770      	bx	lr
 8007e92:	bf00      	nop
 8007e94:	40020407 	.word	0x40020407
 8007e98:	40020800 	.word	0x40020800
 8007e9c:	40020820 	.word	0x40020820
 8007ea0:	cccccccd 	.word	0xcccccccd
 8007ea4:	40020880 	.word	0x40020880

08007ea8 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  *                     the configuration information for the specified DMA Channel.
  * @retval None
  */

static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8007ea8:	b480      	push	{r7}
 8007eaa:	b085      	sub	sp, #20
 8007eac:	af00      	add	r7, sp, #0
 8007eae:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 8007eb0:	687b      	ldr	r3, [r7, #4]
 8007eb2:	685b      	ldr	r3, [r3, #4]
 8007eb4:	b2db      	uxtb	r3, r3
 8007eb6:	60fb      	str	r3, [r7, #12]

  /* DMA Channels are connected to DMAMUX1 request generator blocks*/
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 8007eb8:	68fa      	ldr	r2, [r7, #12]
 8007eba:	4b0b      	ldr	r3, [pc, #44]	; (8007ee8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x40>)
 8007ebc:	4413      	add	r3, r2
 8007ebe:	009b      	lsls	r3, r3, #2
 8007ec0:	461a      	mov	r2, r3
 8007ec2:	687b      	ldr	r3, [r7, #4]
 8007ec4:	655a      	str	r2, [r3, #84]	; 0x54

  hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 8007ec6:	687b      	ldr	r3, [r7, #4]
 8007ec8:	4a08      	ldr	r2, [pc, #32]	; (8007eec <DMA_CalcDMAMUXRequestGenBaseAndMask+0x44>)
 8007eca:	659a      	str	r2, [r3, #88]	; 0x58

  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x1FU);
 8007ecc:	68fb      	ldr	r3, [r7, #12]
 8007ece:	3b01      	subs	r3, #1
 8007ed0:	f003 031f 	and.w	r3, r3, #31
 8007ed4:	2201      	movs	r2, #1
 8007ed6:	409a      	lsls	r2, r3
 8007ed8:	687b      	ldr	r3, [r7, #4]
 8007eda:	65da      	str	r2, [r3, #92]	; 0x5c
}
 8007edc:	bf00      	nop
 8007ede:	3714      	adds	r7, #20
 8007ee0:	46bd      	mov	sp, r7
 8007ee2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ee6:	4770      	bx	lr
 8007ee8:	1000823f 	.word	0x1000823f
 8007eec:	40020940 	.word	0x40020940

08007ef0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8007ef0:	b480      	push	{r7}
 8007ef2:	b087      	sub	sp, #28
 8007ef4:	af00      	add	r7, sp, #0
 8007ef6:	6078      	str	r0, [r7, #4]
 8007ef8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8007efa:	2300      	movs	r3, #0
 8007efc:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 8007efe:	e15a      	b.n	80081b6 <HAL_GPIO_Init+0x2c6>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8007f00:	683b      	ldr	r3, [r7, #0]
 8007f02:	681a      	ldr	r2, [r3, #0]
 8007f04:	2101      	movs	r1, #1
 8007f06:	697b      	ldr	r3, [r7, #20]
 8007f08:	fa01 f303 	lsl.w	r3, r1, r3
 8007f0c:	4013      	ands	r3, r2
 8007f0e:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8007f10:	68fb      	ldr	r3, [r7, #12]
 8007f12:	2b00      	cmp	r3, #0
 8007f14:	f000 814c 	beq.w	80081b0 <HAL_GPIO_Init+0x2c0>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8007f18:	683b      	ldr	r3, [r7, #0]
 8007f1a:	685b      	ldr	r3, [r3, #4]
 8007f1c:	2b01      	cmp	r3, #1
 8007f1e:	d00b      	beq.n	8007f38 <HAL_GPIO_Init+0x48>
 8007f20:	683b      	ldr	r3, [r7, #0]
 8007f22:	685b      	ldr	r3, [r3, #4]
 8007f24:	2b02      	cmp	r3, #2
 8007f26:	d007      	beq.n	8007f38 <HAL_GPIO_Init+0x48>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8007f28:	683b      	ldr	r3, [r7, #0]
 8007f2a:	685b      	ldr	r3, [r3, #4]
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8007f2c:	2b11      	cmp	r3, #17
 8007f2e:	d003      	beq.n	8007f38 <HAL_GPIO_Init+0x48>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8007f30:	683b      	ldr	r3, [r7, #0]
 8007f32:	685b      	ldr	r3, [r3, #4]
 8007f34:	2b12      	cmp	r3, #18
 8007f36:	d130      	bne.n	8007f9a <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8007f38:	687b      	ldr	r3, [r7, #4]
 8007f3a:	689b      	ldr	r3, [r3, #8]
 8007f3c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8007f3e:	697b      	ldr	r3, [r7, #20]
 8007f40:	005b      	lsls	r3, r3, #1
 8007f42:	2203      	movs	r2, #3
 8007f44:	fa02 f303 	lsl.w	r3, r2, r3
 8007f48:	43db      	mvns	r3, r3
 8007f4a:	693a      	ldr	r2, [r7, #16]
 8007f4c:	4013      	ands	r3, r2
 8007f4e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8007f50:	683b      	ldr	r3, [r7, #0]
 8007f52:	68da      	ldr	r2, [r3, #12]
 8007f54:	697b      	ldr	r3, [r7, #20]
 8007f56:	005b      	lsls	r3, r3, #1
 8007f58:	fa02 f303 	lsl.w	r3, r2, r3
 8007f5c:	693a      	ldr	r2, [r7, #16]
 8007f5e:	4313      	orrs	r3, r2
 8007f60:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8007f62:	687b      	ldr	r3, [r7, #4]
 8007f64:	693a      	ldr	r2, [r7, #16]
 8007f66:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8007f68:	687b      	ldr	r3, [r7, #4]
 8007f6a:	685b      	ldr	r3, [r3, #4]
 8007f6c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8007f6e:	2201      	movs	r2, #1
 8007f70:	697b      	ldr	r3, [r7, #20]
 8007f72:	fa02 f303 	lsl.w	r3, r2, r3
 8007f76:	43db      	mvns	r3, r3
 8007f78:	693a      	ldr	r2, [r7, #16]
 8007f7a:	4013      	ands	r3, r2
 8007f7c:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8007f7e:	683b      	ldr	r3, [r7, #0]
 8007f80:	685b      	ldr	r3, [r3, #4]
 8007f82:	091b      	lsrs	r3, r3, #4
 8007f84:	f003 0201 	and.w	r2, r3, #1
 8007f88:	697b      	ldr	r3, [r7, #20]
 8007f8a:	fa02 f303 	lsl.w	r3, r2, r3
 8007f8e:	693a      	ldr	r2, [r7, #16]
 8007f90:	4313      	orrs	r3, r2
 8007f92:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8007f94:	687b      	ldr	r3, [r7, #4]
 8007f96:	693a      	ldr	r2, [r7, #16]
 8007f98:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8007f9a:	687b      	ldr	r3, [r7, #4]
 8007f9c:	68db      	ldr	r3, [r3, #12]
 8007f9e:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8007fa0:	697b      	ldr	r3, [r7, #20]
 8007fa2:	005b      	lsls	r3, r3, #1
 8007fa4:	2203      	movs	r2, #3
 8007fa6:	fa02 f303 	lsl.w	r3, r2, r3
 8007faa:	43db      	mvns	r3, r3
 8007fac:	693a      	ldr	r2, [r7, #16]
 8007fae:	4013      	ands	r3, r2
 8007fb0:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8007fb2:	683b      	ldr	r3, [r7, #0]
 8007fb4:	689a      	ldr	r2, [r3, #8]
 8007fb6:	697b      	ldr	r3, [r7, #20]
 8007fb8:	005b      	lsls	r3, r3, #1
 8007fba:	fa02 f303 	lsl.w	r3, r2, r3
 8007fbe:	693a      	ldr	r2, [r7, #16]
 8007fc0:	4313      	orrs	r3, r2
 8007fc2:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 8007fc4:	687b      	ldr	r3, [r7, #4]
 8007fc6:	693a      	ldr	r2, [r7, #16]
 8007fc8:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8007fca:	683b      	ldr	r3, [r7, #0]
 8007fcc:	685b      	ldr	r3, [r3, #4]
 8007fce:	2b02      	cmp	r3, #2
 8007fd0:	d003      	beq.n	8007fda <HAL_GPIO_Init+0xea>
 8007fd2:	683b      	ldr	r3, [r7, #0]
 8007fd4:	685b      	ldr	r3, [r3, #4]
 8007fd6:	2b12      	cmp	r3, #18
 8007fd8:	d123      	bne.n	8008022 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8007fda:	697b      	ldr	r3, [r7, #20]
 8007fdc:	08da      	lsrs	r2, r3, #3
 8007fde:	687b      	ldr	r3, [r7, #4]
 8007fe0:	3208      	adds	r2, #8
 8007fe2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007fe6:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8007fe8:	697b      	ldr	r3, [r7, #20]
 8007fea:	f003 0307 	and.w	r3, r3, #7
 8007fee:	009b      	lsls	r3, r3, #2
 8007ff0:	220f      	movs	r2, #15
 8007ff2:	fa02 f303 	lsl.w	r3, r2, r3
 8007ff6:	43db      	mvns	r3, r3
 8007ff8:	693a      	ldr	r2, [r7, #16]
 8007ffa:	4013      	ands	r3, r2
 8007ffc:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8007ffe:	683b      	ldr	r3, [r7, #0]
 8008000:	691a      	ldr	r2, [r3, #16]
 8008002:	697b      	ldr	r3, [r7, #20]
 8008004:	f003 0307 	and.w	r3, r3, #7
 8008008:	009b      	lsls	r3, r3, #2
 800800a:	fa02 f303 	lsl.w	r3, r2, r3
 800800e:	693a      	ldr	r2, [r7, #16]
 8008010:	4313      	orrs	r3, r2
 8008012:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 8008014:	697b      	ldr	r3, [r7, #20]
 8008016:	08da      	lsrs	r2, r3, #3
 8008018:	687b      	ldr	r3, [r7, #4]
 800801a:	3208      	adds	r2, #8
 800801c:	6939      	ldr	r1, [r7, #16]
 800801e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8008022:	687b      	ldr	r3, [r7, #4]
 8008024:	681b      	ldr	r3, [r3, #0]
 8008026:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8008028:	697b      	ldr	r3, [r7, #20]
 800802a:	005b      	lsls	r3, r3, #1
 800802c:	2203      	movs	r2, #3
 800802e:	fa02 f303 	lsl.w	r3, r2, r3
 8008032:	43db      	mvns	r3, r3
 8008034:	693a      	ldr	r2, [r7, #16]
 8008036:	4013      	ands	r3, r2
 8008038:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800803a:	683b      	ldr	r3, [r7, #0]
 800803c:	685b      	ldr	r3, [r3, #4]
 800803e:	f003 0203 	and.w	r2, r3, #3
 8008042:	697b      	ldr	r3, [r7, #20]
 8008044:	005b      	lsls	r3, r3, #1
 8008046:	fa02 f303 	lsl.w	r3, r2, r3
 800804a:	693a      	ldr	r2, [r7, #16]
 800804c:	4313      	orrs	r3, r2
 800804e:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8008050:	687b      	ldr	r3, [r7, #4]
 8008052:	693a      	ldr	r2, [r7, #16]
 8008054:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8008056:	683b      	ldr	r3, [r7, #0]
 8008058:	685b      	ldr	r3, [r3, #4]
 800805a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800805e:	2b00      	cmp	r3, #0
 8008060:	f000 80a6 	beq.w	80081b0 <HAL_GPIO_Init+0x2c0>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8008064:	4b5b      	ldr	r3, [pc, #364]	; (80081d4 <HAL_GPIO_Init+0x2e4>)
 8008066:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8008068:	4a5a      	ldr	r2, [pc, #360]	; (80081d4 <HAL_GPIO_Init+0x2e4>)
 800806a:	f043 0301 	orr.w	r3, r3, #1
 800806e:	6613      	str	r3, [r2, #96]	; 0x60
 8008070:	4b58      	ldr	r3, [pc, #352]	; (80081d4 <HAL_GPIO_Init+0x2e4>)
 8008072:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8008074:	f003 0301 	and.w	r3, r3, #1
 8008078:	60bb      	str	r3, [r7, #8]
 800807a:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2U];
 800807c:	4a56      	ldr	r2, [pc, #344]	; (80081d8 <HAL_GPIO_Init+0x2e8>)
 800807e:	697b      	ldr	r3, [r7, #20]
 8008080:	089b      	lsrs	r3, r3, #2
 8008082:	3302      	adds	r3, #2
 8008084:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8008088:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 800808a:	697b      	ldr	r3, [r7, #20]
 800808c:	f003 0303 	and.w	r3, r3, #3
 8008090:	009b      	lsls	r3, r3, #2
 8008092:	220f      	movs	r2, #15
 8008094:	fa02 f303 	lsl.w	r3, r2, r3
 8008098:	43db      	mvns	r3, r3
 800809a:	693a      	ldr	r2, [r7, #16]
 800809c:	4013      	ands	r3, r2
 800809e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 80080a0:	687b      	ldr	r3, [r7, #4]
 80080a2:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 80080a6:	d01f      	beq.n	80080e8 <HAL_GPIO_Init+0x1f8>
 80080a8:	687b      	ldr	r3, [r7, #4]
 80080aa:	4a4c      	ldr	r2, [pc, #304]	; (80081dc <HAL_GPIO_Init+0x2ec>)
 80080ac:	4293      	cmp	r3, r2
 80080ae:	d019      	beq.n	80080e4 <HAL_GPIO_Init+0x1f4>
 80080b0:	687b      	ldr	r3, [r7, #4]
 80080b2:	4a4b      	ldr	r2, [pc, #300]	; (80081e0 <HAL_GPIO_Init+0x2f0>)
 80080b4:	4293      	cmp	r3, r2
 80080b6:	d013      	beq.n	80080e0 <HAL_GPIO_Init+0x1f0>
 80080b8:	687b      	ldr	r3, [r7, #4]
 80080ba:	4a4a      	ldr	r2, [pc, #296]	; (80081e4 <HAL_GPIO_Init+0x2f4>)
 80080bc:	4293      	cmp	r3, r2
 80080be:	d00d      	beq.n	80080dc <HAL_GPIO_Init+0x1ec>
 80080c0:	687b      	ldr	r3, [r7, #4]
 80080c2:	4a49      	ldr	r2, [pc, #292]	; (80081e8 <HAL_GPIO_Init+0x2f8>)
 80080c4:	4293      	cmp	r3, r2
 80080c6:	d007      	beq.n	80080d8 <HAL_GPIO_Init+0x1e8>
 80080c8:	687b      	ldr	r3, [r7, #4]
 80080ca:	4a48      	ldr	r2, [pc, #288]	; (80081ec <HAL_GPIO_Init+0x2fc>)
 80080cc:	4293      	cmp	r3, r2
 80080ce:	d101      	bne.n	80080d4 <HAL_GPIO_Init+0x1e4>
 80080d0:	2305      	movs	r3, #5
 80080d2:	e00a      	b.n	80080ea <HAL_GPIO_Init+0x1fa>
 80080d4:	2306      	movs	r3, #6
 80080d6:	e008      	b.n	80080ea <HAL_GPIO_Init+0x1fa>
 80080d8:	2304      	movs	r3, #4
 80080da:	e006      	b.n	80080ea <HAL_GPIO_Init+0x1fa>
 80080dc:	2303      	movs	r3, #3
 80080de:	e004      	b.n	80080ea <HAL_GPIO_Init+0x1fa>
 80080e0:	2302      	movs	r3, #2
 80080e2:	e002      	b.n	80080ea <HAL_GPIO_Init+0x1fa>
 80080e4:	2301      	movs	r3, #1
 80080e6:	e000      	b.n	80080ea <HAL_GPIO_Init+0x1fa>
 80080e8:	2300      	movs	r3, #0
 80080ea:	697a      	ldr	r2, [r7, #20]
 80080ec:	f002 0203 	and.w	r2, r2, #3
 80080f0:	0092      	lsls	r2, r2, #2
 80080f2:	4093      	lsls	r3, r2
 80080f4:	693a      	ldr	r2, [r7, #16]
 80080f6:	4313      	orrs	r3, r2
 80080f8:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80080fa:	4937      	ldr	r1, [pc, #220]	; (80081d8 <HAL_GPIO_Init+0x2e8>)
 80080fc:	697b      	ldr	r3, [r7, #20]
 80080fe:	089b      	lsrs	r3, r3, #2
 8008100:	3302      	adds	r3, #2
 8008102:	693a      	ldr	r2, [r7, #16]
 8008104:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8008108:	4b39      	ldr	r3, [pc, #228]	; (80081f0 <HAL_GPIO_Init+0x300>)
 800810a:	681b      	ldr	r3, [r3, #0]
 800810c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800810e:	68fb      	ldr	r3, [r7, #12]
 8008110:	43db      	mvns	r3, r3
 8008112:	693a      	ldr	r2, [r7, #16]
 8008114:	4013      	ands	r3, r2
 8008116:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8008118:	683b      	ldr	r3, [r7, #0]
 800811a:	685b      	ldr	r3, [r3, #4]
 800811c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8008120:	2b00      	cmp	r3, #0
 8008122:	d003      	beq.n	800812c <HAL_GPIO_Init+0x23c>
        {
          temp |= iocurrent;
 8008124:	693a      	ldr	r2, [r7, #16]
 8008126:	68fb      	ldr	r3, [r7, #12]
 8008128:	4313      	orrs	r3, r2
 800812a:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 800812c:	4a30      	ldr	r2, [pc, #192]	; (80081f0 <HAL_GPIO_Init+0x300>)
 800812e:	693b      	ldr	r3, [r7, #16]
 8008130:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR1;
 8008132:	4b2f      	ldr	r3, [pc, #188]	; (80081f0 <HAL_GPIO_Init+0x300>)
 8008134:	685b      	ldr	r3, [r3, #4]
 8008136:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8008138:	68fb      	ldr	r3, [r7, #12]
 800813a:	43db      	mvns	r3, r3
 800813c:	693a      	ldr	r2, [r7, #16]
 800813e:	4013      	ands	r3, r2
 8008140:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8008142:	683b      	ldr	r3, [r7, #0]
 8008144:	685b      	ldr	r3, [r3, #4]
 8008146:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800814a:	2b00      	cmp	r3, #0
 800814c:	d003      	beq.n	8008156 <HAL_GPIO_Init+0x266>
        {
          temp |= iocurrent;
 800814e:	693a      	ldr	r2, [r7, #16]
 8008150:	68fb      	ldr	r3, [r7, #12]
 8008152:	4313      	orrs	r3, r2
 8008154:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8008156:	4a26      	ldr	r2, [pc, #152]	; (80081f0 <HAL_GPIO_Init+0x300>)
 8008158:	693b      	ldr	r3, [r7, #16]
 800815a:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 800815c:	4b24      	ldr	r3, [pc, #144]	; (80081f0 <HAL_GPIO_Init+0x300>)
 800815e:	689b      	ldr	r3, [r3, #8]
 8008160:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8008162:	68fb      	ldr	r3, [r7, #12]
 8008164:	43db      	mvns	r3, r3
 8008166:	693a      	ldr	r2, [r7, #16]
 8008168:	4013      	ands	r3, r2
 800816a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800816c:	683b      	ldr	r3, [r7, #0]
 800816e:	685b      	ldr	r3, [r3, #4]
 8008170:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8008174:	2b00      	cmp	r3, #0
 8008176:	d003      	beq.n	8008180 <HAL_GPIO_Init+0x290>
        {
          temp |= iocurrent;
 8008178:	693a      	ldr	r2, [r7, #16]
 800817a:	68fb      	ldr	r3, [r7, #12]
 800817c:	4313      	orrs	r3, r2
 800817e:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8008180:	4a1b      	ldr	r2, [pc, #108]	; (80081f0 <HAL_GPIO_Init+0x300>)
 8008182:	693b      	ldr	r3, [r7, #16]
 8008184:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8008186:	4b1a      	ldr	r3, [pc, #104]	; (80081f0 <HAL_GPIO_Init+0x300>)
 8008188:	68db      	ldr	r3, [r3, #12]
 800818a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800818c:	68fb      	ldr	r3, [r7, #12]
 800818e:	43db      	mvns	r3, r3
 8008190:	693a      	ldr	r2, [r7, #16]
 8008192:	4013      	ands	r3, r2
 8008194:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8008196:	683b      	ldr	r3, [r7, #0]
 8008198:	685b      	ldr	r3, [r3, #4]
 800819a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800819e:	2b00      	cmp	r3, #0
 80081a0:	d003      	beq.n	80081aa <HAL_GPIO_Init+0x2ba>
        {
          temp |= iocurrent;
 80081a2:	693a      	ldr	r2, [r7, #16]
 80081a4:	68fb      	ldr	r3, [r7, #12]
 80081a6:	4313      	orrs	r3, r2
 80081a8:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 80081aa:	4a11      	ldr	r2, [pc, #68]	; (80081f0 <HAL_GPIO_Init+0x300>)
 80081ac:	693b      	ldr	r3, [r7, #16]
 80081ae:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 80081b0:	697b      	ldr	r3, [r7, #20]
 80081b2:	3301      	adds	r3, #1
 80081b4:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0U)
 80081b6:	683b      	ldr	r3, [r7, #0]
 80081b8:	681a      	ldr	r2, [r3, #0]
 80081ba:	697b      	ldr	r3, [r7, #20]
 80081bc:	fa22 f303 	lsr.w	r3, r2, r3
 80081c0:	2b00      	cmp	r3, #0
 80081c2:	f47f ae9d 	bne.w	8007f00 <HAL_GPIO_Init+0x10>
  }
}
 80081c6:	bf00      	nop
 80081c8:	371c      	adds	r7, #28
 80081ca:	46bd      	mov	sp, r7
 80081cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081d0:	4770      	bx	lr
 80081d2:	bf00      	nop
 80081d4:	40021000 	.word	0x40021000
 80081d8:	40010000 	.word	0x40010000
 80081dc:	48000400 	.word	0x48000400
 80081e0:	48000800 	.word	0x48000800
 80081e4:	48000c00 	.word	0x48000c00
 80081e8:	48001000 	.word	0x48001000
 80081ec:	48001400 	.word	0x48001400
 80081f0:	40010400 	.word	0x40010400

080081f4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80081f4:	b480      	push	{r7}
 80081f6:	b083      	sub	sp, #12
 80081f8:	af00      	add	r7, sp, #0
 80081fa:	6078      	str	r0, [r7, #4]
 80081fc:	460b      	mov	r3, r1
 80081fe:	807b      	strh	r3, [r7, #2]
 8008200:	4613      	mov	r3, r2
 8008202:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8008204:	787b      	ldrb	r3, [r7, #1]
 8008206:	2b00      	cmp	r3, #0
 8008208:	d003      	beq.n	8008212 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800820a:	887a      	ldrh	r2, [r7, #2]
 800820c:	687b      	ldr	r3, [r7, #4]
 800820e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8008210:	e002      	b.n	8008218 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8008212:	887a      	ldrh	r2, [r7, #2]
 8008214:	687b      	ldr	r3, [r7, #4]
 8008216:	629a      	str	r2, [r3, #40]	; 0x28
}
 8008218:	bf00      	nop
 800821a:	370c      	adds	r7, #12
 800821c:	46bd      	mov	sp, r7
 800821e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008222:	4770      	bx	lr

08008224 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8008224:	b480      	push	{r7}
 8008226:	b085      	sub	sp, #20
 8008228:	af00      	add	r7, sp, #0
 800822a:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 800822c:	687b      	ldr	r3, [r7, #4]
 800822e:	2b00      	cmp	r3, #0
 8008230:	d141      	bne.n	80082b6 <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8008232:	4b4b      	ldr	r3, [pc, #300]	; (8008360 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8008234:	681b      	ldr	r3, [r3, #0]
 8008236:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800823a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800823e:	d131      	bne.n	80082a4 <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8008240:	4b47      	ldr	r3, [pc, #284]	; (8008360 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8008242:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8008246:	4a46      	ldr	r2, [pc, #280]	; (8008360 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8008248:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800824c:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8008250:	4b43      	ldr	r3, [pc, #268]	; (8008360 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8008252:	681b      	ldr	r3, [r3, #0]
 8008254:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8008258:	4a41      	ldr	r2, [pc, #260]	; (8008360 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800825a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800825e:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8008260:	4b40      	ldr	r3, [pc, #256]	; (8008364 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8008262:	681b      	ldr	r3, [r3, #0]
 8008264:	2232      	movs	r2, #50	; 0x32
 8008266:	fb02 f303 	mul.w	r3, r2, r3
 800826a:	4a3f      	ldr	r2, [pc, #252]	; (8008368 <HAL_PWREx_ControlVoltageScaling+0x144>)
 800826c:	fba2 2303 	umull	r2, r3, r2, r3
 8008270:	0c9b      	lsrs	r3, r3, #18
 8008272:	3301      	adds	r3, #1
 8008274:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8008276:	e002      	b.n	800827e <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 8008278:	68fb      	ldr	r3, [r7, #12]
 800827a:	3b01      	subs	r3, #1
 800827c:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800827e:	4b38      	ldr	r3, [pc, #224]	; (8008360 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8008280:	695b      	ldr	r3, [r3, #20]
 8008282:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8008286:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800828a:	d102      	bne.n	8008292 <HAL_PWREx_ControlVoltageScaling+0x6e>
 800828c:	68fb      	ldr	r3, [r7, #12]
 800828e:	2b00      	cmp	r3, #0
 8008290:	d1f2      	bne.n	8008278 <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8008292:	4b33      	ldr	r3, [pc, #204]	; (8008360 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8008294:	695b      	ldr	r3, [r3, #20]
 8008296:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800829a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800829e:	d158      	bne.n	8008352 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 80082a0:	2303      	movs	r3, #3
 80082a2:	e057      	b.n	8008354 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80082a4:	4b2e      	ldr	r3, [pc, #184]	; (8008360 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80082a6:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80082aa:	4a2d      	ldr	r2, [pc, #180]	; (8008360 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80082ac:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80082b0:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 80082b4:	e04d      	b.n	8008352 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 80082b6:	687b      	ldr	r3, [r7, #4]
 80082b8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80082bc:	d141      	bne.n	8008342 <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 80082be:	4b28      	ldr	r3, [pc, #160]	; (8008360 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80082c0:	681b      	ldr	r3, [r3, #0]
 80082c2:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80082c6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80082ca:	d131      	bne.n	8008330 <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80082cc:	4b24      	ldr	r3, [pc, #144]	; (8008360 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80082ce:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80082d2:	4a23      	ldr	r2, [pc, #140]	; (8008360 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80082d4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80082d8:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 80082dc:	4b20      	ldr	r3, [pc, #128]	; (8008360 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80082de:	681b      	ldr	r3, [r3, #0]
 80082e0:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80082e4:	4a1e      	ldr	r2, [pc, #120]	; (8008360 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80082e6:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80082ea:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 80082ec:	4b1d      	ldr	r3, [pc, #116]	; (8008364 <HAL_PWREx_ControlVoltageScaling+0x140>)
 80082ee:	681b      	ldr	r3, [r3, #0]
 80082f0:	2232      	movs	r2, #50	; 0x32
 80082f2:	fb02 f303 	mul.w	r3, r2, r3
 80082f6:	4a1c      	ldr	r2, [pc, #112]	; (8008368 <HAL_PWREx_ControlVoltageScaling+0x144>)
 80082f8:	fba2 2303 	umull	r2, r3, r2, r3
 80082fc:	0c9b      	lsrs	r3, r3, #18
 80082fe:	3301      	adds	r3, #1
 8008300:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8008302:	e002      	b.n	800830a <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 8008304:	68fb      	ldr	r3, [r7, #12]
 8008306:	3b01      	subs	r3, #1
 8008308:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800830a:	4b15      	ldr	r3, [pc, #84]	; (8008360 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800830c:	695b      	ldr	r3, [r3, #20]
 800830e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8008312:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8008316:	d102      	bne.n	800831e <HAL_PWREx_ControlVoltageScaling+0xfa>
 8008318:	68fb      	ldr	r3, [r7, #12]
 800831a:	2b00      	cmp	r3, #0
 800831c:	d1f2      	bne.n	8008304 <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 800831e:	4b10      	ldr	r3, [pc, #64]	; (8008360 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8008320:	695b      	ldr	r3, [r3, #20]
 8008322:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8008326:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800832a:	d112      	bne.n	8008352 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 800832c:	2303      	movs	r3, #3
 800832e:	e011      	b.n	8008354 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8008330:	4b0b      	ldr	r3, [pc, #44]	; (8008360 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8008332:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8008336:	4a0a      	ldr	r2, [pc, #40]	; (8008360 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8008338:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800833c:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 8008340:	e007      	b.n	8008352 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8008342:	4b07      	ldr	r3, [pc, #28]	; (8008360 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8008344:	681b      	ldr	r3, [r3, #0]
 8008346:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 800834a:	4a05      	ldr	r2, [pc, #20]	; (8008360 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800834c:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8008350:	6013      	str	r3, [r2, #0]
    /* No need to wait for VOSF to be cleared for this transition */
    /* PWR_CR5_R1MODE bit setting has no effect in Range 2        */
  }

  return HAL_OK;
 8008352:	2300      	movs	r3, #0
}
 8008354:	4618      	mov	r0, r3
 8008356:	3714      	adds	r7, #20
 8008358:	46bd      	mov	sp, r7
 800835a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800835e:	4770      	bx	lr
 8008360:	40007000 	.word	0x40007000
 8008364:	200001d4 	.word	0x200001d4
 8008368:	431bde83 	.word	0x431bde83

0800836c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800836c:	b580      	push	{r7, lr}
 800836e:	b088      	sub	sp, #32
 8008370:	af00      	add	r7, sp, #0
 8008372:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8008374:	687b      	ldr	r3, [r7, #4]
 8008376:	2b00      	cmp	r3, #0
 8008378:	d101      	bne.n	800837e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800837a:	2301      	movs	r3, #1
 800837c:	e308      	b.n	8008990 <HAL_RCC_OscConfig+0x624>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800837e:	687b      	ldr	r3, [r7, #4]
 8008380:	681b      	ldr	r3, [r3, #0]
 8008382:	f003 0301 	and.w	r3, r3, #1
 8008386:	2b00      	cmp	r3, #0
 8008388:	d075      	beq.n	8008476 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800838a:	4ba3      	ldr	r3, [pc, #652]	; (8008618 <HAL_RCC_OscConfig+0x2ac>)
 800838c:	689b      	ldr	r3, [r3, #8]
 800838e:	f003 030c 	and.w	r3, r3, #12
 8008392:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8008394:	4ba0      	ldr	r3, [pc, #640]	; (8008618 <HAL_RCC_OscConfig+0x2ac>)
 8008396:	68db      	ldr	r3, [r3, #12]
 8008398:	f003 0303 	and.w	r3, r3, #3
 800839c:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 800839e:	69bb      	ldr	r3, [r7, #24]
 80083a0:	2b0c      	cmp	r3, #12
 80083a2:	d102      	bne.n	80083aa <HAL_RCC_OscConfig+0x3e>
 80083a4:	697b      	ldr	r3, [r7, #20]
 80083a6:	2b03      	cmp	r3, #3
 80083a8:	d002      	beq.n	80083b0 <HAL_RCC_OscConfig+0x44>
 80083aa:	69bb      	ldr	r3, [r7, #24]
 80083ac:	2b08      	cmp	r3, #8
 80083ae:	d10b      	bne.n	80083c8 <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80083b0:	4b99      	ldr	r3, [pc, #612]	; (8008618 <HAL_RCC_OscConfig+0x2ac>)
 80083b2:	681b      	ldr	r3, [r3, #0]
 80083b4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80083b8:	2b00      	cmp	r3, #0
 80083ba:	d05b      	beq.n	8008474 <HAL_RCC_OscConfig+0x108>
 80083bc:	687b      	ldr	r3, [r7, #4]
 80083be:	685b      	ldr	r3, [r3, #4]
 80083c0:	2b00      	cmp	r3, #0
 80083c2:	d157      	bne.n	8008474 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80083c4:	2301      	movs	r3, #1
 80083c6:	e2e3      	b.n	8008990 <HAL_RCC_OscConfig+0x624>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80083c8:	687b      	ldr	r3, [r7, #4]
 80083ca:	685b      	ldr	r3, [r3, #4]
 80083cc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80083d0:	d106      	bne.n	80083e0 <HAL_RCC_OscConfig+0x74>
 80083d2:	4b91      	ldr	r3, [pc, #580]	; (8008618 <HAL_RCC_OscConfig+0x2ac>)
 80083d4:	681b      	ldr	r3, [r3, #0]
 80083d6:	4a90      	ldr	r2, [pc, #576]	; (8008618 <HAL_RCC_OscConfig+0x2ac>)
 80083d8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80083dc:	6013      	str	r3, [r2, #0]
 80083de:	e01d      	b.n	800841c <HAL_RCC_OscConfig+0xb0>
 80083e0:	687b      	ldr	r3, [r7, #4]
 80083e2:	685b      	ldr	r3, [r3, #4]
 80083e4:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80083e8:	d10c      	bne.n	8008404 <HAL_RCC_OscConfig+0x98>
 80083ea:	4b8b      	ldr	r3, [pc, #556]	; (8008618 <HAL_RCC_OscConfig+0x2ac>)
 80083ec:	681b      	ldr	r3, [r3, #0]
 80083ee:	4a8a      	ldr	r2, [pc, #552]	; (8008618 <HAL_RCC_OscConfig+0x2ac>)
 80083f0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80083f4:	6013      	str	r3, [r2, #0]
 80083f6:	4b88      	ldr	r3, [pc, #544]	; (8008618 <HAL_RCC_OscConfig+0x2ac>)
 80083f8:	681b      	ldr	r3, [r3, #0]
 80083fa:	4a87      	ldr	r2, [pc, #540]	; (8008618 <HAL_RCC_OscConfig+0x2ac>)
 80083fc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8008400:	6013      	str	r3, [r2, #0]
 8008402:	e00b      	b.n	800841c <HAL_RCC_OscConfig+0xb0>
 8008404:	4b84      	ldr	r3, [pc, #528]	; (8008618 <HAL_RCC_OscConfig+0x2ac>)
 8008406:	681b      	ldr	r3, [r3, #0]
 8008408:	4a83      	ldr	r2, [pc, #524]	; (8008618 <HAL_RCC_OscConfig+0x2ac>)
 800840a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800840e:	6013      	str	r3, [r2, #0]
 8008410:	4b81      	ldr	r3, [pc, #516]	; (8008618 <HAL_RCC_OscConfig+0x2ac>)
 8008412:	681b      	ldr	r3, [r3, #0]
 8008414:	4a80      	ldr	r2, [pc, #512]	; (8008618 <HAL_RCC_OscConfig+0x2ac>)
 8008416:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800841a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800841c:	687b      	ldr	r3, [r7, #4]
 800841e:	685b      	ldr	r3, [r3, #4]
 8008420:	2b00      	cmp	r3, #0
 8008422:	d013      	beq.n	800844c <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008424:	f7fd fa06 	bl	8005834 <HAL_GetTick>
 8008428:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800842a:	e008      	b.n	800843e <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800842c:	f7fd fa02 	bl	8005834 <HAL_GetTick>
 8008430:	4602      	mov	r2, r0
 8008432:	693b      	ldr	r3, [r7, #16]
 8008434:	1ad3      	subs	r3, r2, r3
 8008436:	2b64      	cmp	r3, #100	; 0x64
 8008438:	d901      	bls.n	800843e <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800843a:	2303      	movs	r3, #3
 800843c:	e2a8      	b.n	8008990 <HAL_RCC_OscConfig+0x624>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800843e:	4b76      	ldr	r3, [pc, #472]	; (8008618 <HAL_RCC_OscConfig+0x2ac>)
 8008440:	681b      	ldr	r3, [r3, #0]
 8008442:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008446:	2b00      	cmp	r3, #0
 8008448:	d0f0      	beq.n	800842c <HAL_RCC_OscConfig+0xc0>
 800844a:	e014      	b.n	8008476 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800844c:	f7fd f9f2 	bl	8005834 <HAL_GetTick>
 8008450:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8008452:	e008      	b.n	8008466 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8008454:	f7fd f9ee 	bl	8005834 <HAL_GetTick>
 8008458:	4602      	mov	r2, r0
 800845a:	693b      	ldr	r3, [r7, #16]
 800845c:	1ad3      	subs	r3, r2, r3
 800845e:	2b64      	cmp	r3, #100	; 0x64
 8008460:	d901      	bls.n	8008466 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8008462:	2303      	movs	r3, #3
 8008464:	e294      	b.n	8008990 <HAL_RCC_OscConfig+0x624>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8008466:	4b6c      	ldr	r3, [pc, #432]	; (8008618 <HAL_RCC_OscConfig+0x2ac>)
 8008468:	681b      	ldr	r3, [r3, #0]
 800846a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800846e:	2b00      	cmp	r3, #0
 8008470:	d1f0      	bne.n	8008454 <HAL_RCC_OscConfig+0xe8>
 8008472:	e000      	b.n	8008476 <HAL_RCC_OscConfig+0x10a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8008474:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8008476:	687b      	ldr	r3, [r7, #4]
 8008478:	681b      	ldr	r3, [r3, #0]
 800847a:	f003 0302 	and.w	r3, r3, #2
 800847e:	2b00      	cmp	r3, #0
 8008480:	d075      	beq.n	800856e <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8008482:	4b65      	ldr	r3, [pc, #404]	; (8008618 <HAL_RCC_OscConfig+0x2ac>)
 8008484:	689b      	ldr	r3, [r3, #8]
 8008486:	f003 030c 	and.w	r3, r3, #12
 800848a:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 800848c:	4b62      	ldr	r3, [pc, #392]	; (8008618 <HAL_RCC_OscConfig+0x2ac>)
 800848e:	68db      	ldr	r3, [r3, #12]
 8008490:	f003 0303 	and.w	r3, r3, #3
 8008494:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 8008496:	69bb      	ldr	r3, [r7, #24]
 8008498:	2b0c      	cmp	r3, #12
 800849a:	d102      	bne.n	80084a2 <HAL_RCC_OscConfig+0x136>
 800849c:	697b      	ldr	r3, [r7, #20]
 800849e:	2b02      	cmp	r3, #2
 80084a0:	d002      	beq.n	80084a8 <HAL_RCC_OscConfig+0x13c>
 80084a2:	69bb      	ldr	r3, [r7, #24]
 80084a4:	2b04      	cmp	r3, #4
 80084a6:	d11f      	bne.n	80084e8 <HAL_RCC_OscConfig+0x17c>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80084a8:	4b5b      	ldr	r3, [pc, #364]	; (8008618 <HAL_RCC_OscConfig+0x2ac>)
 80084aa:	681b      	ldr	r3, [r3, #0]
 80084ac:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80084b0:	2b00      	cmp	r3, #0
 80084b2:	d005      	beq.n	80084c0 <HAL_RCC_OscConfig+0x154>
 80084b4:	687b      	ldr	r3, [r7, #4]
 80084b6:	68db      	ldr	r3, [r3, #12]
 80084b8:	2b00      	cmp	r3, #0
 80084ba:	d101      	bne.n	80084c0 <HAL_RCC_OscConfig+0x154>
      {
        return HAL_ERROR;
 80084bc:	2301      	movs	r3, #1
 80084be:	e267      	b.n	8008990 <HAL_RCC_OscConfig+0x624>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80084c0:	4b55      	ldr	r3, [pc, #340]	; (8008618 <HAL_RCC_OscConfig+0x2ac>)
 80084c2:	685b      	ldr	r3, [r3, #4]
 80084c4:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 80084c8:	687b      	ldr	r3, [r7, #4]
 80084ca:	691b      	ldr	r3, [r3, #16]
 80084cc:	061b      	lsls	r3, r3, #24
 80084ce:	4952      	ldr	r1, [pc, #328]	; (8008618 <HAL_RCC_OscConfig+0x2ac>)
 80084d0:	4313      	orrs	r3, r2
 80084d2:	604b      	str	r3, [r1, #4]

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 80084d4:	4b51      	ldr	r3, [pc, #324]	; (800861c <HAL_RCC_OscConfig+0x2b0>)
 80084d6:	681b      	ldr	r3, [r3, #0]
 80084d8:	4618      	mov	r0, r3
 80084da:	f7fd f95f 	bl	800579c <HAL_InitTick>
 80084de:	4603      	mov	r3, r0
 80084e0:	2b00      	cmp	r3, #0
 80084e2:	d043      	beq.n	800856c <HAL_RCC_OscConfig+0x200>
        {
          return HAL_ERROR;
 80084e4:	2301      	movs	r3, #1
 80084e6:	e253      	b.n	8008990 <HAL_RCC_OscConfig+0x624>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80084e8:	687b      	ldr	r3, [r7, #4]
 80084ea:	68db      	ldr	r3, [r3, #12]
 80084ec:	2b00      	cmp	r3, #0
 80084ee:	d023      	beq.n	8008538 <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80084f0:	4b49      	ldr	r3, [pc, #292]	; (8008618 <HAL_RCC_OscConfig+0x2ac>)
 80084f2:	681b      	ldr	r3, [r3, #0]
 80084f4:	4a48      	ldr	r2, [pc, #288]	; (8008618 <HAL_RCC_OscConfig+0x2ac>)
 80084f6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80084fa:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80084fc:	f7fd f99a 	bl	8005834 <HAL_GetTick>
 8008500:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8008502:	e008      	b.n	8008516 <HAL_RCC_OscConfig+0x1aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8008504:	f7fd f996 	bl	8005834 <HAL_GetTick>
 8008508:	4602      	mov	r2, r0
 800850a:	693b      	ldr	r3, [r7, #16]
 800850c:	1ad3      	subs	r3, r2, r3
 800850e:	2b02      	cmp	r3, #2
 8008510:	d901      	bls.n	8008516 <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 8008512:	2303      	movs	r3, #3
 8008514:	e23c      	b.n	8008990 <HAL_RCC_OscConfig+0x624>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8008516:	4b40      	ldr	r3, [pc, #256]	; (8008618 <HAL_RCC_OscConfig+0x2ac>)
 8008518:	681b      	ldr	r3, [r3, #0]
 800851a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800851e:	2b00      	cmp	r3, #0
 8008520:	d0f0      	beq.n	8008504 <HAL_RCC_OscConfig+0x198>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8008522:	4b3d      	ldr	r3, [pc, #244]	; (8008618 <HAL_RCC_OscConfig+0x2ac>)
 8008524:	685b      	ldr	r3, [r3, #4]
 8008526:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 800852a:	687b      	ldr	r3, [r7, #4]
 800852c:	691b      	ldr	r3, [r3, #16]
 800852e:	061b      	lsls	r3, r3, #24
 8008530:	4939      	ldr	r1, [pc, #228]	; (8008618 <HAL_RCC_OscConfig+0x2ac>)
 8008532:	4313      	orrs	r3, r2
 8008534:	604b      	str	r3, [r1, #4]
 8008536:	e01a      	b.n	800856e <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8008538:	4b37      	ldr	r3, [pc, #220]	; (8008618 <HAL_RCC_OscConfig+0x2ac>)
 800853a:	681b      	ldr	r3, [r3, #0]
 800853c:	4a36      	ldr	r2, [pc, #216]	; (8008618 <HAL_RCC_OscConfig+0x2ac>)
 800853e:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8008542:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008544:	f7fd f976 	bl	8005834 <HAL_GetTick>
 8008548:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800854a:	e008      	b.n	800855e <HAL_RCC_OscConfig+0x1f2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800854c:	f7fd f972 	bl	8005834 <HAL_GetTick>
 8008550:	4602      	mov	r2, r0
 8008552:	693b      	ldr	r3, [r7, #16]
 8008554:	1ad3      	subs	r3, r2, r3
 8008556:	2b02      	cmp	r3, #2
 8008558:	d901      	bls.n	800855e <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 800855a:	2303      	movs	r3, #3
 800855c:	e218      	b.n	8008990 <HAL_RCC_OscConfig+0x624>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800855e:	4b2e      	ldr	r3, [pc, #184]	; (8008618 <HAL_RCC_OscConfig+0x2ac>)
 8008560:	681b      	ldr	r3, [r3, #0]
 8008562:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8008566:	2b00      	cmp	r3, #0
 8008568:	d1f0      	bne.n	800854c <HAL_RCC_OscConfig+0x1e0>
 800856a:	e000      	b.n	800856e <HAL_RCC_OscConfig+0x202>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800856c:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800856e:	687b      	ldr	r3, [r7, #4]
 8008570:	681b      	ldr	r3, [r3, #0]
 8008572:	f003 0308 	and.w	r3, r3, #8
 8008576:	2b00      	cmp	r3, #0
 8008578:	d03c      	beq.n	80085f4 <HAL_RCC_OscConfig+0x288>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800857a:	687b      	ldr	r3, [r7, #4]
 800857c:	695b      	ldr	r3, [r3, #20]
 800857e:	2b00      	cmp	r3, #0
 8008580:	d01c      	beq.n	80085bc <HAL_RCC_OscConfig+0x250>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8008582:	4b25      	ldr	r3, [pc, #148]	; (8008618 <HAL_RCC_OscConfig+0x2ac>)
 8008584:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8008588:	4a23      	ldr	r2, [pc, #140]	; (8008618 <HAL_RCC_OscConfig+0x2ac>)
 800858a:	f043 0301 	orr.w	r3, r3, #1
 800858e:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8008592:	f7fd f94f 	bl	8005834 <HAL_GetTick>
 8008596:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8008598:	e008      	b.n	80085ac <HAL_RCC_OscConfig+0x240>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800859a:	f7fd f94b 	bl	8005834 <HAL_GetTick>
 800859e:	4602      	mov	r2, r0
 80085a0:	693b      	ldr	r3, [r7, #16]
 80085a2:	1ad3      	subs	r3, r2, r3
 80085a4:	2b02      	cmp	r3, #2
 80085a6:	d901      	bls.n	80085ac <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 80085a8:	2303      	movs	r3, #3
 80085aa:	e1f1      	b.n	8008990 <HAL_RCC_OscConfig+0x624>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80085ac:	4b1a      	ldr	r3, [pc, #104]	; (8008618 <HAL_RCC_OscConfig+0x2ac>)
 80085ae:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80085b2:	f003 0302 	and.w	r3, r3, #2
 80085b6:	2b00      	cmp	r3, #0
 80085b8:	d0ef      	beq.n	800859a <HAL_RCC_OscConfig+0x22e>
 80085ba:	e01b      	b.n	80085f4 <HAL_RCC_OscConfig+0x288>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80085bc:	4b16      	ldr	r3, [pc, #88]	; (8008618 <HAL_RCC_OscConfig+0x2ac>)
 80085be:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80085c2:	4a15      	ldr	r2, [pc, #84]	; (8008618 <HAL_RCC_OscConfig+0x2ac>)
 80085c4:	f023 0301 	bic.w	r3, r3, #1
 80085c8:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80085cc:	f7fd f932 	bl	8005834 <HAL_GetTick>
 80085d0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80085d2:	e008      	b.n	80085e6 <HAL_RCC_OscConfig+0x27a>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80085d4:	f7fd f92e 	bl	8005834 <HAL_GetTick>
 80085d8:	4602      	mov	r2, r0
 80085da:	693b      	ldr	r3, [r7, #16]
 80085dc:	1ad3      	subs	r3, r2, r3
 80085de:	2b02      	cmp	r3, #2
 80085e0:	d901      	bls.n	80085e6 <HAL_RCC_OscConfig+0x27a>
        {
          return HAL_TIMEOUT;
 80085e2:	2303      	movs	r3, #3
 80085e4:	e1d4      	b.n	8008990 <HAL_RCC_OscConfig+0x624>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80085e6:	4b0c      	ldr	r3, [pc, #48]	; (8008618 <HAL_RCC_OscConfig+0x2ac>)
 80085e8:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80085ec:	f003 0302 	and.w	r3, r3, #2
 80085f0:	2b00      	cmp	r3, #0
 80085f2:	d1ef      	bne.n	80085d4 <HAL_RCC_OscConfig+0x268>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80085f4:	687b      	ldr	r3, [r7, #4]
 80085f6:	681b      	ldr	r3, [r3, #0]
 80085f8:	f003 0304 	and.w	r3, r3, #4
 80085fc:	2b00      	cmp	r3, #0
 80085fe:	f000 80ab 	beq.w	8008758 <HAL_RCC_OscConfig+0x3ec>
  {
    FlagStatus       pwrclkchanged = RESET;
 8008602:	2300      	movs	r3, #0
 8008604:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain if necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8008606:	4b04      	ldr	r3, [pc, #16]	; (8008618 <HAL_RCC_OscConfig+0x2ac>)
 8008608:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800860a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800860e:	2b00      	cmp	r3, #0
 8008610:	d106      	bne.n	8008620 <HAL_RCC_OscConfig+0x2b4>
 8008612:	2301      	movs	r3, #1
 8008614:	e005      	b.n	8008622 <HAL_RCC_OscConfig+0x2b6>
 8008616:	bf00      	nop
 8008618:	40021000 	.word	0x40021000
 800861c:	200001d8 	.word	0x200001d8
 8008620:	2300      	movs	r3, #0
 8008622:	2b00      	cmp	r3, #0
 8008624:	d00d      	beq.n	8008642 <HAL_RCC_OscConfig+0x2d6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8008626:	4baf      	ldr	r3, [pc, #700]	; (80088e4 <HAL_RCC_OscConfig+0x578>)
 8008628:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800862a:	4aae      	ldr	r2, [pc, #696]	; (80088e4 <HAL_RCC_OscConfig+0x578>)
 800862c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8008630:	6593      	str	r3, [r2, #88]	; 0x58
 8008632:	4bac      	ldr	r3, [pc, #688]	; (80088e4 <HAL_RCC_OscConfig+0x578>)
 8008634:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008636:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800863a:	60fb      	str	r3, [r7, #12]
 800863c:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 800863e:	2301      	movs	r3, #1
 8008640:	77fb      	strb	r3, [r7, #31]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8008642:	4ba9      	ldr	r3, [pc, #676]	; (80088e8 <HAL_RCC_OscConfig+0x57c>)
 8008644:	681b      	ldr	r3, [r3, #0]
 8008646:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800864a:	2b00      	cmp	r3, #0
 800864c:	d118      	bne.n	8008680 <HAL_RCC_OscConfig+0x314>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800864e:	4ba6      	ldr	r3, [pc, #664]	; (80088e8 <HAL_RCC_OscConfig+0x57c>)
 8008650:	681b      	ldr	r3, [r3, #0]
 8008652:	4aa5      	ldr	r2, [pc, #660]	; (80088e8 <HAL_RCC_OscConfig+0x57c>)
 8008654:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8008658:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800865a:	f7fd f8eb 	bl	8005834 <HAL_GetTick>
 800865e:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8008660:	e008      	b.n	8008674 <HAL_RCC_OscConfig+0x308>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8008662:	f7fd f8e7 	bl	8005834 <HAL_GetTick>
 8008666:	4602      	mov	r2, r0
 8008668:	693b      	ldr	r3, [r7, #16]
 800866a:	1ad3      	subs	r3, r2, r3
 800866c:	2b02      	cmp	r3, #2
 800866e:	d901      	bls.n	8008674 <HAL_RCC_OscConfig+0x308>
        {
          return HAL_TIMEOUT;
 8008670:	2303      	movs	r3, #3
 8008672:	e18d      	b.n	8008990 <HAL_RCC_OscConfig+0x624>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8008674:	4b9c      	ldr	r3, [pc, #624]	; (80088e8 <HAL_RCC_OscConfig+0x57c>)
 8008676:	681b      	ldr	r3, [r3, #0]
 8008678:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800867c:	2b00      	cmp	r3, #0
 800867e:	d0f0      	beq.n	8008662 <HAL_RCC_OscConfig+0x2f6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8008680:	687b      	ldr	r3, [r7, #4]
 8008682:	689b      	ldr	r3, [r3, #8]
 8008684:	2b01      	cmp	r3, #1
 8008686:	d108      	bne.n	800869a <HAL_RCC_OscConfig+0x32e>
 8008688:	4b96      	ldr	r3, [pc, #600]	; (80088e4 <HAL_RCC_OscConfig+0x578>)
 800868a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800868e:	4a95      	ldr	r2, [pc, #596]	; (80088e4 <HAL_RCC_OscConfig+0x578>)
 8008690:	f043 0301 	orr.w	r3, r3, #1
 8008694:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8008698:	e024      	b.n	80086e4 <HAL_RCC_OscConfig+0x378>
 800869a:	687b      	ldr	r3, [r7, #4]
 800869c:	689b      	ldr	r3, [r3, #8]
 800869e:	2b05      	cmp	r3, #5
 80086a0:	d110      	bne.n	80086c4 <HAL_RCC_OscConfig+0x358>
 80086a2:	4b90      	ldr	r3, [pc, #576]	; (80088e4 <HAL_RCC_OscConfig+0x578>)
 80086a4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80086a8:	4a8e      	ldr	r2, [pc, #568]	; (80088e4 <HAL_RCC_OscConfig+0x578>)
 80086aa:	f043 0304 	orr.w	r3, r3, #4
 80086ae:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80086b2:	4b8c      	ldr	r3, [pc, #560]	; (80088e4 <HAL_RCC_OscConfig+0x578>)
 80086b4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80086b8:	4a8a      	ldr	r2, [pc, #552]	; (80088e4 <HAL_RCC_OscConfig+0x578>)
 80086ba:	f043 0301 	orr.w	r3, r3, #1
 80086be:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80086c2:	e00f      	b.n	80086e4 <HAL_RCC_OscConfig+0x378>
 80086c4:	4b87      	ldr	r3, [pc, #540]	; (80088e4 <HAL_RCC_OscConfig+0x578>)
 80086c6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80086ca:	4a86      	ldr	r2, [pc, #536]	; (80088e4 <HAL_RCC_OscConfig+0x578>)
 80086cc:	f023 0301 	bic.w	r3, r3, #1
 80086d0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80086d4:	4b83      	ldr	r3, [pc, #524]	; (80088e4 <HAL_RCC_OscConfig+0x578>)
 80086d6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80086da:	4a82      	ldr	r2, [pc, #520]	; (80088e4 <HAL_RCC_OscConfig+0x578>)
 80086dc:	f023 0304 	bic.w	r3, r3, #4
 80086e0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80086e4:	687b      	ldr	r3, [r7, #4]
 80086e6:	689b      	ldr	r3, [r3, #8]
 80086e8:	2b00      	cmp	r3, #0
 80086ea:	d016      	beq.n	800871a <HAL_RCC_OscConfig+0x3ae>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80086ec:	f7fd f8a2 	bl	8005834 <HAL_GetTick>
 80086f0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80086f2:	e00a      	b.n	800870a <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80086f4:	f7fd f89e 	bl	8005834 <HAL_GetTick>
 80086f8:	4602      	mov	r2, r0
 80086fa:	693b      	ldr	r3, [r7, #16]
 80086fc:	1ad3      	subs	r3, r2, r3
 80086fe:	f241 3288 	movw	r2, #5000	; 0x1388
 8008702:	4293      	cmp	r3, r2
 8008704:	d901      	bls.n	800870a <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 8008706:	2303      	movs	r3, #3
 8008708:	e142      	b.n	8008990 <HAL_RCC_OscConfig+0x624>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800870a:	4b76      	ldr	r3, [pc, #472]	; (80088e4 <HAL_RCC_OscConfig+0x578>)
 800870c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008710:	f003 0302 	and.w	r3, r3, #2
 8008714:	2b00      	cmp	r3, #0
 8008716:	d0ed      	beq.n	80086f4 <HAL_RCC_OscConfig+0x388>
 8008718:	e015      	b.n	8008746 <HAL_RCC_OscConfig+0x3da>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800871a:	f7fd f88b 	bl	8005834 <HAL_GetTick>
 800871e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8008720:	e00a      	b.n	8008738 <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8008722:	f7fd f887 	bl	8005834 <HAL_GetTick>
 8008726:	4602      	mov	r2, r0
 8008728:	693b      	ldr	r3, [r7, #16]
 800872a:	1ad3      	subs	r3, r2, r3
 800872c:	f241 3288 	movw	r2, #5000	; 0x1388
 8008730:	4293      	cmp	r3, r2
 8008732:	d901      	bls.n	8008738 <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 8008734:	2303      	movs	r3, #3
 8008736:	e12b      	b.n	8008990 <HAL_RCC_OscConfig+0x624>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8008738:	4b6a      	ldr	r3, [pc, #424]	; (80088e4 <HAL_RCC_OscConfig+0x578>)
 800873a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800873e:	f003 0302 	and.w	r3, r3, #2
 8008742:	2b00      	cmp	r3, #0
 8008744:	d1ed      	bne.n	8008722 <HAL_RCC_OscConfig+0x3b6>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8008746:	7ffb      	ldrb	r3, [r7, #31]
 8008748:	2b01      	cmp	r3, #1
 800874a:	d105      	bne.n	8008758 <HAL_RCC_OscConfig+0x3ec>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800874c:	4b65      	ldr	r3, [pc, #404]	; (80088e4 <HAL_RCC_OscConfig+0x578>)
 800874e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008750:	4a64      	ldr	r2, [pc, #400]	; (80088e4 <HAL_RCC_OscConfig+0x578>)
 8008752:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8008756:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8008758:	687b      	ldr	r3, [r7, #4]
 800875a:	681b      	ldr	r3, [r3, #0]
 800875c:	f003 0320 	and.w	r3, r3, #32
 8008760:	2b00      	cmp	r3, #0
 8008762:	d03c      	beq.n	80087de <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8008764:	687b      	ldr	r3, [r7, #4]
 8008766:	699b      	ldr	r3, [r3, #24]
 8008768:	2b00      	cmp	r3, #0
 800876a:	d01c      	beq.n	80087a6 <HAL_RCC_OscConfig+0x43a>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 800876c:	4b5d      	ldr	r3, [pc, #372]	; (80088e4 <HAL_RCC_OscConfig+0x578>)
 800876e:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8008772:	4a5c      	ldr	r2, [pc, #368]	; (80088e4 <HAL_RCC_OscConfig+0x578>)
 8008774:	f043 0301 	orr.w	r3, r3, #1
 8008778:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800877c:	f7fd f85a 	bl	8005834 <HAL_GetTick>
 8008780:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8008782:	e008      	b.n	8008796 <HAL_RCC_OscConfig+0x42a>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8008784:	f7fd f856 	bl	8005834 <HAL_GetTick>
 8008788:	4602      	mov	r2, r0
 800878a:	693b      	ldr	r3, [r7, #16]
 800878c:	1ad3      	subs	r3, r2, r3
 800878e:	2b02      	cmp	r3, #2
 8008790:	d901      	bls.n	8008796 <HAL_RCC_OscConfig+0x42a>
        {
          return HAL_TIMEOUT;
 8008792:	2303      	movs	r3, #3
 8008794:	e0fc      	b.n	8008990 <HAL_RCC_OscConfig+0x624>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8008796:	4b53      	ldr	r3, [pc, #332]	; (80088e4 <HAL_RCC_OscConfig+0x578>)
 8008798:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800879c:	f003 0302 	and.w	r3, r3, #2
 80087a0:	2b00      	cmp	r3, #0
 80087a2:	d0ef      	beq.n	8008784 <HAL_RCC_OscConfig+0x418>
 80087a4:	e01b      	b.n	80087de <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 80087a6:	4b4f      	ldr	r3, [pc, #316]	; (80088e4 <HAL_RCC_OscConfig+0x578>)
 80087a8:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80087ac:	4a4d      	ldr	r2, [pc, #308]	; (80088e4 <HAL_RCC_OscConfig+0x578>)
 80087ae:	f023 0301 	bic.w	r3, r3, #1
 80087b2:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80087b6:	f7fd f83d 	bl	8005834 <HAL_GetTick>
 80087ba:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 80087bc:	e008      	b.n	80087d0 <HAL_RCC_OscConfig+0x464>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80087be:	f7fd f839 	bl	8005834 <HAL_GetTick>
 80087c2:	4602      	mov	r2, r0
 80087c4:	693b      	ldr	r3, [r7, #16]
 80087c6:	1ad3      	subs	r3, r2, r3
 80087c8:	2b02      	cmp	r3, #2
 80087ca:	d901      	bls.n	80087d0 <HAL_RCC_OscConfig+0x464>
        {
          return HAL_TIMEOUT;
 80087cc:	2303      	movs	r3, #3
 80087ce:	e0df      	b.n	8008990 <HAL_RCC_OscConfig+0x624>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 80087d0:	4b44      	ldr	r3, [pc, #272]	; (80088e4 <HAL_RCC_OscConfig+0x578>)
 80087d2:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80087d6:	f003 0302 	and.w	r3, r3, #2
 80087da:	2b00      	cmp	r3, #0
 80087dc:	d1ef      	bne.n	80087be <HAL_RCC_OscConfig+0x452>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 80087de:	687b      	ldr	r3, [r7, #4]
 80087e0:	69db      	ldr	r3, [r3, #28]
 80087e2:	2b00      	cmp	r3, #0
 80087e4:	f000 80d3 	beq.w	800898e <HAL_RCC_OscConfig+0x622>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80087e8:	4b3e      	ldr	r3, [pc, #248]	; (80088e4 <HAL_RCC_OscConfig+0x578>)
 80087ea:	689b      	ldr	r3, [r3, #8]
 80087ec:	f003 030c 	and.w	r3, r3, #12
 80087f0:	2b0c      	cmp	r3, #12
 80087f2:	f000 808d 	beq.w	8008910 <HAL_RCC_OscConfig+0x5a4>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 80087f6:	687b      	ldr	r3, [r7, #4]
 80087f8:	69db      	ldr	r3, [r3, #28]
 80087fa:	2b02      	cmp	r3, #2
 80087fc:	d15a      	bne.n	80088b4 <HAL_RCC_OscConfig+0x548>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80087fe:	4b39      	ldr	r3, [pc, #228]	; (80088e4 <HAL_RCC_OscConfig+0x578>)
 8008800:	681b      	ldr	r3, [r3, #0]
 8008802:	4a38      	ldr	r2, [pc, #224]	; (80088e4 <HAL_RCC_OscConfig+0x578>)
 8008804:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8008808:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800880a:	f7fd f813 	bl	8005834 <HAL_GetTick>
 800880e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8008810:	e008      	b.n	8008824 <HAL_RCC_OscConfig+0x4b8>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8008812:	f7fd f80f 	bl	8005834 <HAL_GetTick>
 8008816:	4602      	mov	r2, r0
 8008818:	693b      	ldr	r3, [r7, #16]
 800881a:	1ad3      	subs	r3, r2, r3
 800881c:	2b02      	cmp	r3, #2
 800881e:	d901      	bls.n	8008824 <HAL_RCC_OscConfig+0x4b8>
          {
            return HAL_TIMEOUT;
 8008820:	2303      	movs	r3, #3
 8008822:	e0b5      	b.n	8008990 <HAL_RCC_OscConfig+0x624>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8008824:	4b2f      	ldr	r3, [pc, #188]	; (80088e4 <HAL_RCC_OscConfig+0x578>)
 8008826:	681b      	ldr	r3, [r3, #0]
 8008828:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800882c:	2b00      	cmp	r3, #0
 800882e:	d1f0      	bne.n	8008812 <HAL_RCC_OscConfig+0x4a6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8008830:	4b2c      	ldr	r3, [pc, #176]	; (80088e4 <HAL_RCC_OscConfig+0x578>)
 8008832:	68da      	ldr	r2, [r3, #12]
 8008834:	4b2d      	ldr	r3, [pc, #180]	; (80088ec <HAL_RCC_OscConfig+0x580>)
 8008836:	4013      	ands	r3, r2
 8008838:	687a      	ldr	r2, [r7, #4]
 800883a:	6a11      	ldr	r1, [r2, #32]
 800883c:	687a      	ldr	r2, [r7, #4]
 800883e:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8008840:	3a01      	subs	r2, #1
 8008842:	0112      	lsls	r2, r2, #4
 8008844:	4311      	orrs	r1, r2
 8008846:	687a      	ldr	r2, [r7, #4]
 8008848:	6a92      	ldr	r2, [r2, #40]	; 0x28
 800884a:	0212      	lsls	r2, r2, #8
 800884c:	4311      	orrs	r1, r2
 800884e:	687a      	ldr	r2, [r7, #4]
 8008850:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8008852:	0852      	lsrs	r2, r2, #1
 8008854:	3a01      	subs	r2, #1
 8008856:	0552      	lsls	r2, r2, #21
 8008858:	4311      	orrs	r1, r2
 800885a:	687a      	ldr	r2, [r7, #4]
 800885c:	6b52      	ldr	r2, [r2, #52]	; 0x34
 800885e:	0852      	lsrs	r2, r2, #1
 8008860:	3a01      	subs	r2, #1
 8008862:	0652      	lsls	r2, r2, #25
 8008864:	4311      	orrs	r1, r2
 8008866:	687a      	ldr	r2, [r7, #4]
 8008868:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 800886a:	06d2      	lsls	r2, r2, #27
 800886c:	430a      	orrs	r2, r1
 800886e:	491d      	ldr	r1, [pc, #116]	; (80088e4 <HAL_RCC_OscConfig+0x578>)
 8008870:	4313      	orrs	r3, r2
 8008872:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8008874:	4b1b      	ldr	r3, [pc, #108]	; (80088e4 <HAL_RCC_OscConfig+0x578>)
 8008876:	681b      	ldr	r3, [r3, #0]
 8008878:	4a1a      	ldr	r2, [pc, #104]	; (80088e4 <HAL_RCC_OscConfig+0x578>)
 800887a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800887e:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8008880:	4b18      	ldr	r3, [pc, #96]	; (80088e4 <HAL_RCC_OscConfig+0x578>)
 8008882:	68db      	ldr	r3, [r3, #12]
 8008884:	4a17      	ldr	r2, [pc, #92]	; (80088e4 <HAL_RCC_OscConfig+0x578>)
 8008886:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800888a:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800888c:	f7fc ffd2 	bl	8005834 <HAL_GetTick>
 8008890:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8008892:	e008      	b.n	80088a6 <HAL_RCC_OscConfig+0x53a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8008894:	f7fc ffce 	bl	8005834 <HAL_GetTick>
 8008898:	4602      	mov	r2, r0
 800889a:	693b      	ldr	r3, [r7, #16]
 800889c:	1ad3      	subs	r3, r2, r3
 800889e:	2b02      	cmp	r3, #2
 80088a0:	d901      	bls.n	80088a6 <HAL_RCC_OscConfig+0x53a>
          {
            return HAL_TIMEOUT;
 80088a2:	2303      	movs	r3, #3
 80088a4:	e074      	b.n	8008990 <HAL_RCC_OscConfig+0x624>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80088a6:	4b0f      	ldr	r3, [pc, #60]	; (80088e4 <HAL_RCC_OscConfig+0x578>)
 80088a8:	681b      	ldr	r3, [r3, #0]
 80088aa:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80088ae:	2b00      	cmp	r3, #0
 80088b0:	d0f0      	beq.n	8008894 <HAL_RCC_OscConfig+0x528>
 80088b2:	e06c      	b.n	800898e <HAL_RCC_OscConfig+0x622>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80088b4:	4b0b      	ldr	r3, [pc, #44]	; (80088e4 <HAL_RCC_OscConfig+0x578>)
 80088b6:	681b      	ldr	r3, [r3, #0]
 80088b8:	4a0a      	ldr	r2, [pc, #40]	; (80088e4 <HAL_RCC_OscConfig+0x578>)
 80088ba:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80088be:	6013      	str	r3, [r2, #0]

        /* Disable all PLL outputs to save power if no PLLs on */
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 80088c0:	4b08      	ldr	r3, [pc, #32]	; (80088e4 <HAL_RCC_OscConfig+0x578>)
 80088c2:	68db      	ldr	r3, [r3, #12]
 80088c4:	4a07      	ldr	r2, [pc, #28]	; (80088e4 <HAL_RCC_OscConfig+0x578>)
 80088c6:	f023 0303 	bic.w	r3, r3, #3
 80088ca:	60d3      	str	r3, [r2, #12]
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_ADCCLK);
 80088cc:	4b05      	ldr	r3, [pc, #20]	; (80088e4 <HAL_RCC_OscConfig+0x578>)
 80088ce:	68db      	ldr	r3, [r3, #12]
 80088d0:	4a04      	ldr	r2, [pc, #16]	; (80088e4 <HAL_RCC_OscConfig+0x578>)
 80088d2:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 80088d6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80088da:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80088dc:	f7fc ffaa 	bl	8005834 <HAL_GetTick>
 80088e0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80088e2:	e00e      	b.n	8008902 <HAL_RCC_OscConfig+0x596>
 80088e4:	40021000 	.word	0x40021000
 80088e8:	40007000 	.word	0x40007000
 80088ec:	019f800c 	.word	0x019f800c
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80088f0:	f7fc ffa0 	bl	8005834 <HAL_GetTick>
 80088f4:	4602      	mov	r2, r0
 80088f6:	693b      	ldr	r3, [r7, #16]
 80088f8:	1ad3      	subs	r3, r2, r3
 80088fa:	2b02      	cmp	r3, #2
 80088fc:	d901      	bls.n	8008902 <HAL_RCC_OscConfig+0x596>
          {
            return HAL_TIMEOUT;
 80088fe:	2303      	movs	r3, #3
 8008900:	e046      	b.n	8008990 <HAL_RCC_OscConfig+0x624>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8008902:	4b25      	ldr	r3, [pc, #148]	; (8008998 <HAL_RCC_OscConfig+0x62c>)
 8008904:	681b      	ldr	r3, [r3, #0]
 8008906:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800890a:	2b00      	cmp	r3, #0
 800890c:	d1f0      	bne.n	80088f0 <HAL_RCC_OscConfig+0x584>
 800890e:	e03e      	b.n	800898e <HAL_RCC_OscConfig+0x622>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8008910:	687b      	ldr	r3, [r7, #4]
 8008912:	69db      	ldr	r3, [r3, #28]
 8008914:	2b01      	cmp	r3, #1
 8008916:	d101      	bne.n	800891c <HAL_RCC_OscConfig+0x5b0>
      {
        return HAL_ERROR;
 8008918:	2301      	movs	r3, #1
 800891a:	e039      	b.n	8008990 <HAL_RCC_OscConfig+0x624>
      }
      else
      {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp_pllckcfg = RCC->PLLCFGR;
 800891c:	4b1e      	ldr	r3, [pc, #120]	; (8008998 <HAL_RCC_OscConfig+0x62c>)
 800891e:	68db      	ldr	r3, [r3, #12]
 8008920:	617b      	str	r3, [r7, #20]
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8008922:	697b      	ldr	r3, [r7, #20]
 8008924:	f003 0203 	and.w	r2, r3, #3
 8008928:	687b      	ldr	r3, [r7, #4]
 800892a:	6a1b      	ldr	r3, [r3, #32]
 800892c:	429a      	cmp	r2, r3
 800892e:	d12c      	bne.n	800898a <HAL_RCC_OscConfig+0x61e>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8008930:	697b      	ldr	r3, [r7, #20]
 8008932:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8008936:	687b      	ldr	r3, [r7, #4]
 8008938:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800893a:	3b01      	subs	r3, #1
 800893c:	011b      	lsls	r3, r3, #4
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800893e:	429a      	cmp	r2, r3
 8008940:	d123      	bne.n	800898a <HAL_RCC_OscConfig+0x61e>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8008942:	697b      	ldr	r3, [r7, #20]
 8008944:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8008948:	687b      	ldr	r3, [r7, #4]
 800894a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800894c:	021b      	lsls	r3, r3, #8
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800894e:	429a      	cmp	r2, r3
 8008950:	d11b      	bne.n	800898a <HAL_RCC_OscConfig+0x61e>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8008952:	697b      	ldr	r3, [r7, #20]
 8008954:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 8008958:	687b      	ldr	r3, [r7, #4]
 800895a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800895c:	06db      	lsls	r3, r3, #27
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 800895e:	429a      	cmp	r2, r3
 8008960:	d113      	bne.n	800898a <HAL_RCC_OscConfig+0x61e>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8008962:	697b      	ldr	r3, [r7, #20]
 8008964:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8008968:	687b      	ldr	r3, [r7, #4]
 800896a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800896c:	085b      	lsrs	r3, r3, #1
 800896e:	3b01      	subs	r3, #1
 8008970:	055b      	lsls	r3, r3, #21
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8008972:	429a      	cmp	r2, r3
 8008974:	d109      	bne.n	800898a <HAL_RCC_OscConfig+0x61e>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8008976:	697b      	ldr	r3, [r7, #20]
 8008978:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 800897c:	687b      	ldr	r3, [r7, #4]
 800897e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008980:	085b      	lsrs	r3, r3, #1
 8008982:	3b01      	subs	r3, #1
 8008984:	065b      	lsls	r3, r3, #25
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8008986:	429a      	cmp	r2, r3
 8008988:	d001      	beq.n	800898e <HAL_RCC_OscConfig+0x622>
      {
        return HAL_ERROR;
 800898a:	2301      	movs	r3, #1
 800898c:	e000      	b.n	8008990 <HAL_RCC_OscConfig+0x624>
      }
    }
  }
  }

  return HAL_OK;
 800898e:	2300      	movs	r3, #0
}
 8008990:	4618      	mov	r0, r3
 8008992:	3720      	adds	r7, #32
 8008994:	46bd      	mov	sp, r7
 8008996:	bd80      	pop	{r7, pc}
 8008998:	40021000 	.word	0x40021000

0800899c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800899c:	b580      	push	{r7, lr}
 800899e:	b086      	sub	sp, #24
 80089a0:	af00      	add	r7, sp, #0
 80089a2:	6078      	str	r0, [r7, #4]
 80089a4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t pllfreq;
  uint32_t hpre = RCC_SYSCLK_DIV1;
 80089a6:	2300      	movs	r3, #0
 80089a8:	617b      	str	r3, [r7, #20]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80089aa:	687b      	ldr	r3, [r7, #4]
 80089ac:	2b00      	cmp	r3, #0
 80089ae:	d101      	bne.n	80089b4 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 80089b0:	2301      	movs	r3, #1
 80089b2:	e11e      	b.n	8008bf2 <HAL_RCC_ClockConfig+0x256>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80089b4:	4b91      	ldr	r3, [pc, #580]	; (8008bfc <HAL_RCC_ClockConfig+0x260>)
 80089b6:	681b      	ldr	r3, [r3, #0]
 80089b8:	f003 030f 	and.w	r3, r3, #15
 80089bc:	683a      	ldr	r2, [r7, #0]
 80089be:	429a      	cmp	r2, r3
 80089c0:	d910      	bls.n	80089e4 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80089c2:	4b8e      	ldr	r3, [pc, #568]	; (8008bfc <HAL_RCC_ClockConfig+0x260>)
 80089c4:	681b      	ldr	r3, [r3, #0]
 80089c6:	f023 020f 	bic.w	r2, r3, #15
 80089ca:	498c      	ldr	r1, [pc, #560]	; (8008bfc <HAL_RCC_ClockConfig+0x260>)
 80089cc:	683b      	ldr	r3, [r7, #0]
 80089ce:	4313      	orrs	r3, r2
 80089d0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80089d2:	4b8a      	ldr	r3, [pc, #552]	; (8008bfc <HAL_RCC_ClockConfig+0x260>)
 80089d4:	681b      	ldr	r3, [r3, #0]
 80089d6:	f003 030f 	and.w	r3, r3, #15
 80089da:	683a      	ldr	r2, [r7, #0]
 80089dc:	429a      	cmp	r2, r3
 80089de:	d001      	beq.n	80089e4 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 80089e0:	2301      	movs	r3, #1
 80089e2:	e106      	b.n	8008bf2 <HAL_RCC_ClockConfig+0x256>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80089e4:	687b      	ldr	r3, [r7, #4]
 80089e6:	681b      	ldr	r3, [r3, #0]
 80089e8:	f003 0301 	and.w	r3, r3, #1
 80089ec:	2b00      	cmp	r3, #0
 80089ee:	d073      	beq.n	8008ad8 <HAL_RCC_ClockConfig+0x13c>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80089f0:	687b      	ldr	r3, [r7, #4]
 80089f2:	685b      	ldr	r3, [r3, #4]
 80089f4:	2b03      	cmp	r3, #3
 80089f6:	d129      	bne.n	8008a4c <HAL_RCC_ClockConfig+0xb0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80089f8:	4b81      	ldr	r3, [pc, #516]	; (8008c00 <HAL_RCC_ClockConfig+0x264>)
 80089fa:	681b      	ldr	r3, [r3, #0]
 80089fc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8008a00:	2b00      	cmp	r3, #0
 8008a02:	d101      	bne.n	8008a08 <HAL_RCC_ClockConfig+0x6c>
      {
        return HAL_ERROR;
 8008a04:	2301      	movs	r3, #1
 8008a06:	e0f4      	b.n	8008bf2 <HAL_RCC_ClockConfig+0x256>
      }
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      pllfreq = RCC_GetSysClockFreqFromPLLSource();
 8008a08:	f000 f972 	bl	8008cf0 <RCC_GetSysClockFreqFromPLLSource>
 8008a0c:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
      if(pllfreq > 80000000U)
 8008a0e:	693b      	ldr	r3, [r7, #16]
 8008a10:	4a7c      	ldr	r2, [pc, #496]	; (8008c04 <HAL_RCC_ClockConfig+0x268>)
 8008a12:	4293      	cmp	r3, r2
 8008a14:	d93f      	bls.n	8008a96 <HAL_RCC_ClockConfig+0xfa>
      {
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8008a16:	4b7a      	ldr	r3, [pc, #488]	; (8008c00 <HAL_RCC_ClockConfig+0x264>)
 8008a18:	689b      	ldr	r3, [r3, #8]
 8008a1a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8008a1e:	2b00      	cmp	r3, #0
 8008a20:	d009      	beq.n	8008a36 <HAL_RCC_ClockConfig+0x9a>
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8008a22:	687b      	ldr	r3, [r7, #4]
 8008a24:	681b      	ldr	r3, [r3, #0]
 8008a26:	f003 0302 	and.w	r3, r3, #2
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8008a2a:	2b00      	cmp	r3, #0
 8008a2c:	d033      	beq.n	8008a96 <HAL_RCC_ClockConfig+0xfa>
              (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))))
 8008a2e:	687b      	ldr	r3, [r7, #4]
 8008a30:	689b      	ldr	r3, [r3, #8]
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8008a32:	2b00      	cmp	r3, #0
 8008a34:	d12f      	bne.n	8008a96 <HAL_RCC_ClockConfig+0xfa>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8008a36:	4b72      	ldr	r3, [pc, #456]	; (8008c00 <HAL_RCC_ClockConfig+0x264>)
 8008a38:	689b      	ldr	r3, [r3, #8]
 8008a3a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8008a3e:	4a70      	ldr	r2, [pc, #448]	; (8008c00 <HAL_RCC_ClockConfig+0x264>)
 8008a40:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008a44:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 8008a46:	2380      	movs	r3, #128	; 0x80
 8008a48:	617b      	str	r3, [r7, #20]
 8008a4a:	e024      	b.n	8008a96 <HAL_RCC_ClockConfig+0xfa>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8008a4c:	687b      	ldr	r3, [r7, #4]
 8008a4e:	685b      	ldr	r3, [r3, #4]
 8008a50:	2b02      	cmp	r3, #2
 8008a52:	d107      	bne.n	8008a64 <HAL_RCC_ClockConfig+0xc8>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8008a54:	4b6a      	ldr	r3, [pc, #424]	; (8008c00 <HAL_RCC_ClockConfig+0x264>)
 8008a56:	681b      	ldr	r3, [r3, #0]
 8008a58:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008a5c:	2b00      	cmp	r3, #0
 8008a5e:	d109      	bne.n	8008a74 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8008a60:	2301      	movs	r3, #1
 8008a62:	e0c6      	b.n	8008bf2 <HAL_RCC_ClockConfig+0x256>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8008a64:	4b66      	ldr	r3, [pc, #408]	; (8008c00 <HAL_RCC_ClockConfig+0x264>)
 8008a66:	681b      	ldr	r3, [r3, #0]
 8008a68:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8008a6c:	2b00      	cmp	r3, #0
 8008a6e:	d101      	bne.n	8008a74 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8008a70:	2301      	movs	r3, #1
 8008a72:	e0be      	b.n	8008bf2 <HAL_RCC_ClockConfig+0x256>
        }
      }
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      pllfreq = HAL_RCC_GetSysClockFreq();
 8008a74:	f000 f8ce 	bl	8008c14 <HAL_RCC_GetSysClockFreq>
 8008a78:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
      if(pllfreq > 80000000U)
 8008a7a:	693b      	ldr	r3, [r7, #16]
 8008a7c:	4a61      	ldr	r2, [pc, #388]	; (8008c04 <HAL_RCC_ClockConfig+0x268>)
 8008a7e:	4293      	cmp	r3, r2
 8008a80:	d909      	bls.n	8008a96 <HAL_RCC_ClockConfig+0xfa>
      {
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8008a82:	4b5f      	ldr	r3, [pc, #380]	; (8008c00 <HAL_RCC_ClockConfig+0x264>)
 8008a84:	689b      	ldr	r3, [r3, #8]
 8008a86:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8008a8a:	4a5d      	ldr	r2, [pc, #372]	; (8008c00 <HAL_RCC_ClockConfig+0x264>)
 8008a8c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008a90:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 8008a92:	2380      	movs	r3, #128	; 0x80
 8008a94:	617b      	str	r3, [r7, #20]
      }

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8008a96:	4b5a      	ldr	r3, [pc, #360]	; (8008c00 <HAL_RCC_ClockConfig+0x264>)
 8008a98:	689b      	ldr	r3, [r3, #8]
 8008a9a:	f023 0203 	bic.w	r2, r3, #3
 8008a9e:	687b      	ldr	r3, [r7, #4]
 8008aa0:	685b      	ldr	r3, [r3, #4]
 8008aa2:	4957      	ldr	r1, [pc, #348]	; (8008c00 <HAL_RCC_ClockConfig+0x264>)
 8008aa4:	4313      	orrs	r3, r2
 8008aa6:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8008aa8:	f7fc fec4 	bl	8005834 <HAL_GetTick>
 8008aac:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8008aae:	e00a      	b.n	8008ac6 <HAL_RCC_ClockConfig+0x12a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8008ab0:	f7fc fec0 	bl	8005834 <HAL_GetTick>
 8008ab4:	4602      	mov	r2, r0
 8008ab6:	68fb      	ldr	r3, [r7, #12]
 8008ab8:	1ad3      	subs	r3, r2, r3
 8008aba:	f241 3288 	movw	r2, #5000	; 0x1388
 8008abe:	4293      	cmp	r3, r2
 8008ac0:	d901      	bls.n	8008ac6 <HAL_RCC_ClockConfig+0x12a>
      {
        return HAL_TIMEOUT;
 8008ac2:	2303      	movs	r3, #3
 8008ac4:	e095      	b.n	8008bf2 <HAL_RCC_ClockConfig+0x256>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8008ac6:	4b4e      	ldr	r3, [pc, #312]	; (8008c00 <HAL_RCC_ClockConfig+0x264>)
 8008ac8:	689b      	ldr	r3, [r3, #8]
 8008aca:	f003 020c 	and.w	r2, r3, #12
 8008ace:	687b      	ldr	r3, [r7, #4]
 8008ad0:	685b      	ldr	r3, [r3, #4]
 8008ad2:	009b      	lsls	r3, r3, #2
 8008ad4:	429a      	cmp	r2, r3
 8008ad6:	d1eb      	bne.n	8008ab0 <HAL_RCC_ClockConfig+0x114>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8008ad8:	687b      	ldr	r3, [r7, #4]
 8008ada:	681b      	ldr	r3, [r3, #0]
 8008adc:	f003 0302 	and.w	r3, r3, #2
 8008ae0:	2b00      	cmp	r3, #0
 8008ae2:	d023      	beq.n	8008b2c <HAL_RCC_ClockConfig+0x190>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8008ae4:	687b      	ldr	r3, [r7, #4]
 8008ae6:	681b      	ldr	r3, [r3, #0]
 8008ae8:	f003 0304 	and.w	r3, r3, #4
 8008aec:	2b00      	cmp	r3, #0
 8008aee:	d005      	beq.n	8008afc <HAL_RCC_ClockConfig+0x160>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8008af0:	4b43      	ldr	r3, [pc, #268]	; (8008c00 <HAL_RCC_ClockConfig+0x264>)
 8008af2:	689b      	ldr	r3, [r3, #8]
 8008af4:	4a42      	ldr	r2, [pc, #264]	; (8008c00 <HAL_RCC_ClockConfig+0x264>)
 8008af6:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8008afa:	6093      	str	r3, [r2, #8]
    }
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8008afc:	687b      	ldr	r3, [r7, #4]
 8008afe:	681b      	ldr	r3, [r3, #0]
 8008b00:	f003 0308 	and.w	r3, r3, #8
 8008b04:	2b00      	cmp	r3, #0
 8008b06:	d007      	beq.n	8008b18 <HAL_RCC_ClockConfig+0x17c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, RCC_HCLK_DIV16);
 8008b08:	4b3d      	ldr	r3, [pc, #244]	; (8008c00 <HAL_RCC_ClockConfig+0x264>)
 8008b0a:	689b      	ldr	r3, [r3, #8]
 8008b0c:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8008b10:	4a3b      	ldr	r2, [pc, #236]	; (8008c00 <HAL_RCC_ClockConfig+0x264>)
 8008b12:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8008b16:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8008b18:	4b39      	ldr	r3, [pc, #228]	; (8008c00 <HAL_RCC_ClockConfig+0x264>)
 8008b1a:	689b      	ldr	r3, [r3, #8]
 8008b1c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8008b20:	687b      	ldr	r3, [r7, #4]
 8008b22:	689b      	ldr	r3, [r3, #8]
 8008b24:	4936      	ldr	r1, [pc, #216]	; (8008c00 <HAL_RCC_ClockConfig+0x264>)
 8008b26:	4313      	orrs	r3, r2
 8008b28:	608b      	str	r3, [r1, #8]
 8008b2a:	e008      	b.n	8008b3e <HAL_RCC_ClockConfig+0x1a2>
  }
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if(hpre == RCC_SYSCLK_DIV2)
 8008b2c:	697b      	ldr	r3, [r7, #20]
 8008b2e:	2b80      	cmp	r3, #128	; 0x80
 8008b30:	d105      	bne.n	8008b3e <HAL_RCC_ClockConfig+0x1a2>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 8008b32:	4b33      	ldr	r3, [pc, #204]	; (8008c00 <HAL_RCC_ClockConfig+0x264>)
 8008b34:	689b      	ldr	r3, [r3, #8]
 8008b36:	4a32      	ldr	r2, [pc, #200]	; (8008c00 <HAL_RCC_ClockConfig+0x264>)
 8008b38:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8008b3c:	6093      	str	r3, [r2, #8]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8008b3e:	4b2f      	ldr	r3, [pc, #188]	; (8008bfc <HAL_RCC_ClockConfig+0x260>)
 8008b40:	681b      	ldr	r3, [r3, #0]
 8008b42:	f003 030f 	and.w	r3, r3, #15
 8008b46:	683a      	ldr	r2, [r7, #0]
 8008b48:	429a      	cmp	r2, r3
 8008b4a:	d21d      	bcs.n	8008b88 <HAL_RCC_ClockConfig+0x1ec>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8008b4c:	4b2b      	ldr	r3, [pc, #172]	; (8008bfc <HAL_RCC_ClockConfig+0x260>)
 8008b4e:	681b      	ldr	r3, [r3, #0]
 8008b50:	f023 020f 	bic.w	r2, r3, #15
 8008b54:	4929      	ldr	r1, [pc, #164]	; (8008bfc <HAL_RCC_ClockConfig+0x260>)
 8008b56:	683b      	ldr	r3, [r7, #0]
 8008b58:	4313      	orrs	r3, r2
 8008b5a:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8008b5c:	f7fc fe6a 	bl	8005834 <HAL_GetTick>
 8008b60:	60f8      	str	r0, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8008b62:	e00a      	b.n	8008b7a <HAL_RCC_ClockConfig+0x1de>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8008b64:	f7fc fe66 	bl	8005834 <HAL_GetTick>
 8008b68:	4602      	mov	r2, r0
 8008b6a:	68fb      	ldr	r3, [r7, #12]
 8008b6c:	1ad3      	subs	r3, r2, r3
 8008b6e:	f241 3288 	movw	r2, #5000	; 0x1388
 8008b72:	4293      	cmp	r3, r2
 8008b74:	d901      	bls.n	8008b7a <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_TIMEOUT;
 8008b76:	2303      	movs	r3, #3
 8008b78:	e03b      	b.n	8008bf2 <HAL_RCC_ClockConfig+0x256>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8008b7a:	4b20      	ldr	r3, [pc, #128]	; (8008bfc <HAL_RCC_ClockConfig+0x260>)
 8008b7c:	681b      	ldr	r3, [r3, #0]
 8008b7e:	f003 030f 	and.w	r3, r3, #15
 8008b82:	683a      	ldr	r2, [r7, #0]
 8008b84:	429a      	cmp	r2, r3
 8008b86:	d1ed      	bne.n	8008b64 <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8008b88:	687b      	ldr	r3, [r7, #4]
 8008b8a:	681b      	ldr	r3, [r3, #0]
 8008b8c:	f003 0304 	and.w	r3, r3, #4
 8008b90:	2b00      	cmp	r3, #0
 8008b92:	d008      	beq.n	8008ba6 <HAL_RCC_ClockConfig+0x20a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8008b94:	4b1a      	ldr	r3, [pc, #104]	; (8008c00 <HAL_RCC_ClockConfig+0x264>)
 8008b96:	689b      	ldr	r3, [r3, #8]
 8008b98:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8008b9c:	687b      	ldr	r3, [r7, #4]
 8008b9e:	68db      	ldr	r3, [r3, #12]
 8008ba0:	4917      	ldr	r1, [pc, #92]	; (8008c00 <HAL_RCC_ClockConfig+0x264>)
 8008ba2:	4313      	orrs	r3, r2
 8008ba4:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8008ba6:	687b      	ldr	r3, [r7, #4]
 8008ba8:	681b      	ldr	r3, [r3, #0]
 8008baa:	f003 0308 	and.w	r3, r3, #8
 8008bae:	2b00      	cmp	r3, #0
 8008bb0:	d009      	beq.n	8008bc6 <HAL_RCC_ClockConfig+0x22a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8008bb2:	4b13      	ldr	r3, [pc, #76]	; (8008c00 <HAL_RCC_ClockConfig+0x264>)
 8008bb4:	689b      	ldr	r3, [r3, #8]
 8008bb6:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8008bba:	687b      	ldr	r3, [r7, #4]
 8008bbc:	691b      	ldr	r3, [r3, #16]
 8008bbe:	00db      	lsls	r3, r3, #3
 8008bc0:	490f      	ldr	r1, [pc, #60]	; (8008c00 <HAL_RCC_ClockConfig+0x264>)
 8008bc2:	4313      	orrs	r3, r2
 8008bc4:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8008bc6:	f000 f825 	bl	8008c14 <HAL_RCC_GetSysClockFreq>
 8008bca:	4601      	mov	r1, r0
 8008bcc:	4b0c      	ldr	r3, [pc, #48]	; (8008c00 <HAL_RCC_ClockConfig+0x264>)
 8008bce:	689b      	ldr	r3, [r3, #8]
 8008bd0:	091b      	lsrs	r3, r3, #4
 8008bd2:	f003 030f 	and.w	r3, r3, #15
 8008bd6:	4a0c      	ldr	r2, [pc, #48]	; (8008c08 <HAL_RCC_ClockConfig+0x26c>)
 8008bd8:	5cd3      	ldrb	r3, [r2, r3]
 8008bda:	f003 031f 	and.w	r3, r3, #31
 8008bde:	fa21 f303 	lsr.w	r3, r1, r3
 8008be2:	4a0a      	ldr	r2, [pc, #40]	; (8008c0c <HAL_RCC_ClockConfig+0x270>)
 8008be4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 8008be6:	4b0a      	ldr	r3, [pc, #40]	; (8008c10 <HAL_RCC_ClockConfig+0x274>)
 8008be8:	681b      	ldr	r3, [r3, #0]
 8008bea:	4618      	mov	r0, r3
 8008bec:	f7fc fdd6 	bl	800579c <HAL_InitTick>
 8008bf0:	4603      	mov	r3, r0
}
 8008bf2:	4618      	mov	r0, r3
 8008bf4:	3718      	adds	r7, #24
 8008bf6:	46bd      	mov	sp, r7
 8008bf8:	bd80      	pop	{r7, pc}
 8008bfa:	bf00      	nop
 8008bfc:	40022000 	.word	0x40022000
 8008c00:	40021000 	.word	0x40021000
 8008c04:	04c4b400 	.word	0x04c4b400
 8008c08:	0800ebdc 	.word	0x0800ebdc
 8008c0c:	200001d4 	.word	0x200001d4
 8008c10:	200001d8 	.word	0x200001d8

08008c14 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8008c14:	b480      	push	{r7}
 8008c16:	b087      	sub	sp, #28
 8008c18:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 8008c1a:	4b2c      	ldr	r3, [pc, #176]	; (8008ccc <HAL_RCC_GetSysClockFreq+0xb8>)
 8008c1c:	689b      	ldr	r3, [r3, #8]
 8008c1e:	f003 030c 	and.w	r3, r3, #12
 8008c22:	2b04      	cmp	r3, #4
 8008c24:	d102      	bne.n	8008c2c <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8008c26:	4b2a      	ldr	r3, [pc, #168]	; (8008cd0 <HAL_RCC_GetSysClockFreq+0xbc>)
 8008c28:	613b      	str	r3, [r7, #16]
 8008c2a:	e047      	b.n	8008cbc <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 8008c2c:	4b27      	ldr	r3, [pc, #156]	; (8008ccc <HAL_RCC_GetSysClockFreq+0xb8>)
 8008c2e:	689b      	ldr	r3, [r3, #8]
 8008c30:	f003 030c 	and.w	r3, r3, #12
 8008c34:	2b08      	cmp	r3, #8
 8008c36:	d102      	bne.n	8008c3e <HAL_RCC_GetSysClockFreq+0x2a>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8008c38:	4b26      	ldr	r3, [pc, #152]	; (8008cd4 <HAL_RCC_GetSysClockFreq+0xc0>)
 8008c3a:	613b      	str	r3, [r7, #16]
 8008c3c:	e03e      	b.n	8008cbc <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 8008c3e:	4b23      	ldr	r3, [pc, #140]	; (8008ccc <HAL_RCC_GetSysClockFreq+0xb8>)
 8008c40:	689b      	ldr	r3, [r3, #8]
 8008c42:	f003 030c 	and.w	r3, r3, #12
 8008c46:	2b0c      	cmp	r3, #12
 8008c48:	d136      	bne.n	8008cb8 <HAL_RCC_GetSysClockFreq+0xa4>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8008c4a:	4b20      	ldr	r3, [pc, #128]	; (8008ccc <HAL_RCC_GetSysClockFreq+0xb8>)
 8008c4c:	68db      	ldr	r3, [r3, #12]
 8008c4e:	f003 0303 	and.w	r3, r3, #3
 8008c52:	60fb      	str	r3, [r7, #12]
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8008c54:	4b1d      	ldr	r3, [pc, #116]	; (8008ccc <HAL_RCC_GetSysClockFreq+0xb8>)
 8008c56:	68db      	ldr	r3, [r3, #12]
 8008c58:	091b      	lsrs	r3, r3, #4
 8008c5a:	f003 030f 	and.w	r3, r3, #15
 8008c5e:	3301      	adds	r3, #1
 8008c60:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8008c62:	68fb      	ldr	r3, [r7, #12]
 8008c64:	2b03      	cmp	r3, #3
 8008c66:	d10c      	bne.n	8008c82 <HAL_RCC_GetSysClockFreq+0x6e>
    {
    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8008c68:	4a1a      	ldr	r2, [pc, #104]	; (8008cd4 <HAL_RCC_GetSysClockFreq+0xc0>)
 8008c6a:	68bb      	ldr	r3, [r7, #8]
 8008c6c:	fbb2 f3f3 	udiv	r3, r2, r3
 8008c70:	4a16      	ldr	r2, [pc, #88]	; (8008ccc <HAL_RCC_GetSysClockFreq+0xb8>)
 8008c72:	68d2      	ldr	r2, [r2, #12]
 8008c74:	0a12      	lsrs	r2, r2, #8
 8008c76:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8008c7a:	fb02 f303 	mul.w	r3, r2, r3
 8008c7e:	617b      	str	r3, [r7, #20]
      break;
 8008c80:	e00c      	b.n	8008c9c <HAL_RCC_GetSysClockFreq+0x88>

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    default:
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8008c82:	4a13      	ldr	r2, [pc, #76]	; (8008cd0 <HAL_RCC_GetSysClockFreq+0xbc>)
 8008c84:	68bb      	ldr	r3, [r7, #8]
 8008c86:	fbb2 f3f3 	udiv	r3, r2, r3
 8008c8a:	4a10      	ldr	r2, [pc, #64]	; (8008ccc <HAL_RCC_GetSysClockFreq+0xb8>)
 8008c8c:	68d2      	ldr	r2, [r2, #12]
 8008c8e:	0a12      	lsrs	r2, r2, #8
 8008c90:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8008c94:	fb02 f303 	mul.w	r3, r2, r3
 8008c98:	617b      	str	r3, [r7, #20]
      break;
 8008c9a:	bf00      	nop
    }
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8008c9c:	4b0b      	ldr	r3, [pc, #44]	; (8008ccc <HAL_RCC_GetSysClockFreq+0xb8>)
 8008c9e:	68db      	ldr	r3, [r3, #12]
 8008ca0:	0e5b      	lsrs	r3, r3, #25
 8008ca2:	f003 0303 	and.w	r3, r3, #3
 8008ca6:	3301      	adds	r3, #1
 8008ca8:	005b      	lsls	r3, r3, #1
 8008caa:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco/pllr;
 8008cac:	697a      	ldr	r2, [r7, #20]
 8008cae:	687b      	ldr	r3, [r7, #4]
 8008cb0:	fbb2 f3f3 	udiv	r3, r2, r3
 8008cb4:	613b      	str	r3, [r7, #16]
 8008cb6:	e001      	b.n	8008cbc <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else
  {
    sysclockfreq = 0U;
 8008cb8:	2300      	movs	r3, #0
 8008cba:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 8008cbc:	693b      	ldr	r3, [r7, #16]
}
 8008cbe:	4618      	mov	r0, r3
 8008cc0:	371c      	adds	r7, #28
 8008cc2:	46bd      	mov	sp, r7
 8008cc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008cc8:	4770      	bx	lr
 8008cca:	bf00      	nop
 8008ccc:	40021000 	.word	0x40021000
 8008cd0:	00f42400 	.word	0x00f42400
 8008cd4:	007a1200 	.word	0x007a1200

08008cd8 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8008cd8:	b480      	push	{r7}
 8008cda:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8008cdc:	4b03      	ldr	r3, [pc, #12]	; (8008cec <HAL_RCC_GetHCLKFreq+0x14>)
 8008cde:	681b      	ldr	r3, [r3, #0]
}
 8008ce0:	4618      	mov	r0, r3
 8008ce2:	46bd      	mov	sp, r7
 8008ce4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ce8:	4770      	bx	lr
 8008cea:	bf00      	nop
 8008cec:	200001d4 	.word	0x200001d4

08008cf0 <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 8008cf0:	b480      	push	{r7}
 8008cf2:	b087      	sub	sp, #28
 8008cf4:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8008cf6:	4b1e      	ldr	r3, [pc, #120]	; (8008d70 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8008cf8:	68db      	ldr	r3, [r3, #12]
 8008cfa:	f003 0303 	and.w	r3, r3, #3
 8008cfe:	613b      	str	r3, [r7, #16]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8008d00:	4b1b      	ldr	r3, [pc, #108]	; (8008d70 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8008d02:	68db      	ldr	r3, [r3, #12]
 8008d04:	091b      	lsrs	r3, r3, #4
 8008d06:	f003 030f 	and.w	r3, r3, #15
 8008d0a:	3301      	adds	r3, #1
 8008d0c:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 8008d0e:	693b      	ldr	r3, [r7, #16]
 8008d10:	2b03      	cmp	r3, #3
 8008d12:	d10c      	bne.n	8008d2e <RCC_GetSysClockFreqFromPLLSource+0x3e>
  {
  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8008d14:	4a17      	ldr	r2, [pc, #92]	; (8008d74 <RCC_GetSysClockFreqFromPLLSource+0x84>)
 8008d16:	68fb      	ldr	r3, [r7, #12]
 8008d18:	fbb2 f3f3 	udiv	r3, r2, r3
 8008d1c:	4a14      	ldr	r2, [pc, #80]	; (8008d70 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8008d1e:	68d2      	ldr	r2, [r2, #12]
 8008d20:	0a12      	lsrs	r2, r2, #8
 8008d22:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8008d26:	fb02 f303 	mul.w	r3, r2, r3
 8008d2a:	617b      	str	r3, [r7, #20]
    break;
 8008d2c:	e00c      	b.n	8008d48 <RCC_GetSysClockFreqFromPLLSource+0x58>

  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
  default:
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8008d2e:	4a12      	ldr	r2, [pc, #72]	; (8008d78 <RCC_GetSysClockFreqFromPLLSource+0x88>)
 8008d30:	68fb      	ldr	r3, [r7, #12]
 8008d32:	fbb2 f3f3 	udiv	r3, r2, r3
 8008d36:	4a0e      	ldr	r2, [pc, #56]	; (8008d70 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8008d38:	68d2      	ldr	r2, [r2, #12]
 8008d3a:	0a12      	lsrs	r2, r2, #8
 8008d3c:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8008d40:	fb02 f303 	mul.w	r3, r2, r3
 8008d44:	617b      	str	r3, [r7, #20]
    break;
 8008d46:	bf00      	nop
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8008d48:	4b09      	ldr	r3, [pc, #36]	; (8008d70 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8008d4a:	68db      	ldr	r3, [r3, #12]
 8008d4c:	0e5b      	lsrs	r3, r3, #25
 8008d4e:	f003 0303 	and.w	r3, r3, #3
 8008d52:	3301      	adds	r3, #1
 8008d54:	005b      	lsls	r3, r3, #1
 8008d56:	60bb      	str	r3, [r7, #8]
  sysclockfreq = pllvco/pllr;
 8008d58:	697a      	ldr	r2, [r7, #20]
 8008d5a:	68bb      	ldr	r3, [r7, #8]
 8008d5c:	fbb2 f3f3 	udiv	r3, r2, r3
 8008d60:	607b      	str	r3, [r7, #4]

  return sysclockfreq;
 8008d62:	687b      	ldr	r3, [r7, #4]
}
 8008d64:	4618      	mov	r0, r3
 8008d66:	371c      	adds	r7, #28
 8008d68:	46bd      	mov	sp, r7
 8008d6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d6e:	4770      	bx	lr
 8008d70:	40021000 	.word	0x40021000
 8008d74:	007a1200 	.word	0x007a1200
 8008d78:	00f42400 	.word	0x00f42400

08008d7c <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8008d7c:	b580      	push	{r7, lr}
 8008d7e:	b086      	sub	sp, #24
 8008d80:	af00      	add	r7, sp, #0
 8008d82:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8008d84:	2300      	movs	r3, #0
 8008d86:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8008d88:	2300      	movs	r3, #0
 8008d8a:	74bb      	strb	r3, [r7, #18]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8008d8c:	687b      	ldr	r3, [r7, #4]
 8008d8e:	681b      	ldr	r3, [r3, #0]
 8008d90:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8008d94:	2b00      	cmp	r3, #0
 8008d96:	f000 8098 	beq.w	8008eca <HAL_RCCEx_PeriphCLKConfig+0x14e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8008d9a:	2300      	movs	r3, #0
 8008d9c:	747b      	strb	r3, [r7, #17]
    
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8008d9e:	4b43      	ldr	r3, [pc, #268]	; (8008eac <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8008da0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008da2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8008da6:	2b00      	cmp	r3, #0
 8008da8:	d10d      	bne.n	8008dc6 <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8008daa:	4b40      	ldr	r3, [pc, #256]	; (8008eac <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8008dac:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008dae:	4a3f      	ldr	r2, [pc, #252]	; (8008eac <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8008db0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8008db4:	6593      	str	r3, [r2, #88]	; 0x58
 8008db6:	4b3d      	ldr	r3, [pc, #244]	; (8008eac <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8008db8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008dba:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8008dbe:	60bb      	str	r3, [r7, #8]
 8008dc0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8008dc2:	2301      	movs	r3, #1
 8008dc4:	747b      	strb	r3, [r7, #17]
    }
      
    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8008dc6:	4b3a      	ldr	r3, [pc, #232]	; (8008eb0 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8008dc8:	681b      	ldr	r3, [r3, #0]
 8008dca:	4a39      	ldr	r2, [pc, #228]	; (8008eb0 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8008dcc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8008dd0:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8008dd2:	f7fc fd2f 	bl	8005834 <HAL_GetTick>
 8008dd6:	60f8      	str	r0, [r7, #12]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8008dd8:	e009      	b.n	8008dee <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8008dda:	f7fc fd2b 	bl	8005834 <HAL_GetTick>
 8008dde:	4602      	mov	r2, r0
 8008de0:	68fb      	ldr	r3, [r7, #12]
 8008de2:	1ad3      	subs	r3, r2, r3
 8008de4:	2b02      	cmp	r3, #2
 8008de6:	d902      	bls.n	8008dee <HAL_RCCEx_PeriphCLKConfig+0x72>
      {
        ret = HAL_TIMEOUT;
 8008de8:	2303      	movs	r3, #3
 8008dea:	74fb      	strb	r3, [r7, #19]
        break;
 8008dec:	e005      	b.n	8008dfa <HAL_RCCEx_PeriphCLKConfig+0x7e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8008dee:	4b30      	ldr	r3, [pc, #192]	; (8008eb0 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8008df0:	681b      	ldr	r3, [r3, #0]
 8008df2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008df6:	2b00      	cmp	r3, #0
 8008df8:	d0ef      	beq.n	8008dda <HAL_RCCEx_PeriphCLKConfig+0x5e>
      }
    }

    if(ret == HAL_OK)
 8008dfa:	7cfb      	ldrb	r3, [r7, #19]
 8008dfc:	2b00      	cmp	r3, #0
 8008dfe:	d159      	bne.n	8008eb4 <HAL_RCCEx_PeriphCLKConfig+0x138>
    { 
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8008e00:	4b2a      	ldr	r3, [pc, #168]	; (8008eac <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8008e02:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008e06:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8008e0a:	617b      	str	r3, [r7, #20]
      
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8008e0c:	697b      	ldr	r3, [r7, #20]
 8008e0e:	2b00      	cmp	r3, #0
 8008e10:	d01e      	beq.n	8008e50 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 8008e12:	687b      	ldr	r3, [r7, #4]
 8008e14:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008e16:	697a      	ldr	r2, [r7, #20]
 8008e18:	429a      	cmp	r2, r3
 8008e1a:	d019      	beq.n	8008e50 <HAL_RCCEx_PeriphCLKConfig+0xd4>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8008e1c:	4b23      	ldr	r3, [pc, #140]	; (8008eac <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8008e1e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008e22:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8008e26:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8008e28:	4b20      	ldr	r3, [pc, #128]	; (8008eac <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8008e2a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008e2e:	4a1f      	ldr	r2, [pc, #124]	; (8008eac <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8008e30:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8008e34:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8008e38:	4b1c      	ldr	r3, [pc, #112]	; (8008eac <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8008e3a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008e3e:	4a1b      	ldr	r2, [pc, #108]	; (8008eac <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8008e40:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8008e44:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8008e48:	4a18      	ldr	r2, [pc, #96]	; (8008eac <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8008e4a:	697b      	ldr	r3, [r7, #20]
 8008e4c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8008e50:	697b      	ldr	r3, [r7, #20]
 8008e52:	f003 0301 	and.w	r3, r3, #1
 8008e56:	2b00      	cmp	r3, #0
 8008e58:	d016      	beq.n	8008e88 <HAL_RCCEx_PeriphCLKConfig+0x10c>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008e5a:	f7fc fceb 	bl	8005834 <HAL_GetTick>
 8008e5e:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8008e60:	e00b      	b.n	8008e7a <HAL_RCCEx_PeriphCLKConfig+0xfe>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8008e62:	f7fc fce7 	bl	8005834 <HAL_GetTick>
 8008e66:	4602      	mov	r2, r0
 8008e68:	68fb      	ldr	r3, [r7, #12]
 8008e6a:	1ad3      	subs	r3, r2, r3
 8008e6c:	f241 3288 	movw	r2, #5000	; 0x1388
 8008e70:	4293      	cmp	r3, r2
 8008e72:	d902      	bls.n	8008e7a <HAL_RCCEx_PeriphCLKConfig+0xfe>
          {
            ret = HAL_TIMEOUT;
 8008e74:	2303      	movs	r3, #3
 8008e76:	74fb      	strb	r3, [r7, #19]
            break;
 8008e78:	e006      	b.n	8008e88 <HAL_RCCEx_PeriphCLKConfig+0x10c>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8008e7a:	4b0c      	ldr	r3, [pc, #48]	; (8008eac <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8008e7c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008e80:	f003 0302 	and.w	r3, r3, #2
 8008e84:	2b00      	cmp	r3, #0
 8008e86:	d0ec      	beq.n	8008e62 <HAL_RCCEx_PeriphCLKConfig+0xe6>
          }
        }
      }
      
      if(ret == HAL_OK)
 8008e88:	7cfb      	ldrb	r3, [r7, #19]
 8008e8a:	2b00      	cmp	r3, #0
 8008e8c:	d10b      	bne.n	8008ea6 <HAL_RCCEx_PeriphCLKConfig+0x12a>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8008e8e:	4b07      	ldr	r3, [pc, #28]	; (8008eac <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8008e90:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008e94:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8008e98:	687b      	ldr	r3, [r7, #4]
 8008e9a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008e9c:	4903      	ldr	r1, [pc, #12]	; (8008eac <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8008e9e:	4313      	orrs	r3, r2
 8008ea0:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8008ea4:	e008      	b.n	8008eb8 <HAL_RCCEx_PeriphCLKConfig+0x13c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8008ea6:	7cfb      	ldrb	r3, [r7, #19]
 8008ea8:	74bb      	strb	r3, [r7, #18]
 8008eaa:	e005      	b.n	8008eb8 <HAL_RCCEx_PeriphCLKConfig+0x13c>
 8008eac:	40021000 	.word	0x40021000
 8008eb0:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008eb4:	7cfb      	ldrb	r3, [r7, #19]
 8008eb6:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8008eb8:	7c7b      	ldrb	r3, [r7, #17]
 8008eba:	2b01      	cmp	r3, #1
 8008ebc:	d105      	bne.n	8008eca <HAL_RCCEx_PeriphCLKConfig+0x14e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8008ebe:	4baf      	ldr	r3, [pc, #700]	; (800917c <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8008ec0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008ec2:	4aae      	ldr	r2, [pc, #696]	; (800917c <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8008ec4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8008ec8:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8008eca:	687b      	ldr	r3, [r7, #4]
 8008ecc:	681b      	ldr	r3, [r3, #0]
 8008ece:	f003 0301 	and.w	r3, r3, #1
 8008ed2:	2b00      	cmp	r3, #0
 8008ed4:	d00a      	beq.n	8008eec <HAL_RCCEx_PeriphCLKConfig+0x170>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8008ed6:	4ba9      	ldr	r3, [pc, #676]	; (800917c <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8008ed8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008edc:	f023 0203 	bic.w	r2, r3, #3
 8008ee0:	687b      	ldr	r3, [r7, #4]
 8008ee2:	685b      	ldr	r3, [r3, #4]
 8008ee4:	49a5      	ldr	r1, [pc, #660]	; (800917c <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8008ee6:	4313      	orrs	r3, r2
 8008ee8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8008eec:	687b      	ldr	r3, [r7, #4]
 8008eee:	681b      	ldr	r3, [r3, #0]
 8008ef0:	f003 0302 	and.w	r3, r3, #2
 8008ef4:	2b00      	cmp	r3, #0
 8008ef6:	d00a      	beq.n	8008f0e <HAL_RCCEx_PeriphCLKConfig+0x192>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8008ef8:	4ba0      	ldr	r3, [pc, #640]	; (800917c <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8008efa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008efe:	f023 020c 	bic.w	r2, r3, #12
 8008f02:	687b      	ldr	r3, [r7, #4]
 8008f04:	689b      	ldr	r3, [r3, #8]
 8008f06:	499d      	ldr	r1, [pc, #628]	; (800917c <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8008f08:	4313      	orrs	r3, r2
 8008f0a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8008f0e:	687b      	ldr	r3, [r7, #4]
 8008f10:	681b      	ldr	r3, [r3, #0]
 8008f12:	f003 0304 	and.w	r3, r3, #4
 8008f16:	2b00      	cmp	r3, #0
 8008f18:	d00a      	beq.n	8008f30 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8008f1a:	4b98      	ldr	r3, [pc, #608]	; (800917c <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8008f1c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008f20:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8008f24:	687b      	ldr	r3, [r7, #4]
 8008f26:	68db      	ldr	r3, [r3, #12]
 8008f28:	4994      	ldr	r1, [pc, #592]	; (800917c <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8008f2a:	4313      	orrs	r3, r2
 8008f2c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(UART4)
  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8008f30:	687b      	ldr	r3, [r7, #4]
 8008f32:	681b      	ldr	r3, [r3, #0]
 8008f34:	f003 0308 	and.w	r3, r3, #8
 8008f38:	2b00      	cmp	r3, #0
 8008f3a:	d00a      	beq.n	8008f52 <HAL_RCCEx_PeriphCLKConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8008f3c:	4b8f      	ldr	r3, [pc, #572]	; (800917c <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8008f3e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008f42:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8008f46:	687b      	ldr	r3, [r7, #4]
 8008f48:	691b      	ldr	r3, [r3, #16]
 8008f4a:	498c      	ldr	r1, [pc, #560]	; (800917c <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8008f4c:	4313      	orrs	r3, r2
 8008f4e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8008f52:	687b      	ldr	r3, [r7, #4]
 8008f54:	681b      	ldr	r3, [r3, #0]
 8008f56:	f003 0310 	and.w	r3, r3, #16
 8008f5a:	2b00      	cmp	r3, #0
 8008f5c:	d00a      	beq.n	8008f74 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8008f5e:	4b87      	ldr	r3, [pc, #540]	; (800917c <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8008f60:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008f64:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8008f68:	687b      	ldr	r3, [r7, #4]
 8008f6a:	695b      	ldr	r3, [r3, #20]
 8008f6c:	4983      	ldr	r1, [pc, #524]	; (800917c <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8008f6e:	4313      	orrs	r3, r2
 8008f70:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8008f74:	687b      	ldr	r3, [r7, #4]
 8008f76:	681b      	ldr	r3, [r3, #0]
 8008f78:	f003 0320 	and.w	r3, r3, #32
 8008f7c:	2b00      	cmp	r3, #0
 8008f7e:	d00a      	beq.n	8008f96 <HAL_RCCEx_PeriphCLKConfig+0x21a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8008f80:	4b7e      	ldr	r3, [pc, #504]	; (800917c <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8008f82:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008f86:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8008f8a:	687b      	ldr	r3, [r7, #4]
 8008f8c:	699b      	ldr	r3, [r3, #24]
 8008f8e:	497b      	ldr	r1, [pc, #492]	; (800917c <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8008f90:	4313      	orrs	r3, r2
 8008f92:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8008f96:	687b      	ldr	r3, [r7, #4]
 8008f98:	681b      	ldr	r3, [r3, #0]
 8008f9a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008f9e:	2b00      	cmp	r3, #0
 8008fa0:	d00a      	beq.n	8008fb8 <HAL_RCCEx_PeriphCLKConfig+0x23c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8008fa2:	4b76      	ldr	r3, [pc, #472]	; (800917c <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8008fa4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008fa8:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8008fac:	687b      	ldr	r3, [r7, #4]
 8008fae:	69db      	ldr	r3, [r3, #28]
 8008fb0:	4972      	ldr	r1, [pc, #456]	; (800917c <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8008fb2:	4313      	orrs	r3, r2
 8008fb4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8008fb8:	687b      	ldr	r3, [r7, #4]
 8008fba:	681b      	ldr	r3, [r3, #0]
 8008fbc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008fc0:	2b00      	cmp	r3, #0
 8008fc2:	d00a      	beq.n	8008fda <HAL_RCCEx_PeriphCLKConfig+0x25e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8008fc4:	4b6d      	ldr	r3, [pc, #436]	; (800917c <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8008fc6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008fca:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8008fce:	687b      	ldr	r3, [r7, #4]
 8008fd0:	6a1b      	ldr	r3, [r3, #32]
 8008fd2:	496a      	ldr	r1, [pc, #424]	; (800917c <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8008fd4:	4313      	orrs	r3, r2
 8008fd6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8008fda:	687b      	ldr	r3, [r7, #4]
 8008fdc:	681b      	ldr	r3, [r3, #0]
 8008fde:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008fe2:	2b00      	cmp	r3, #0
 8008fe4:	d00a      	beq.n	8008ffc <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8008fe6:	4b65      	ldr	r3, [pc, #404]	; (800917c <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8008fe8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008fec:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8008ff0:	687b      	ldr	r3, [r7, #4]
 8008ff2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008ff4:	4961      	ldr	r1, [pc, #388]	; (800917c <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8008ff6:	4313      	orrs	r3, r2
 8008ff8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C4)  

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8008ffc:	687b      	ldr	r3, [r7, #4]
 8008ffe:	681b      	ldr	r3, [r3, #0]
 8009000:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8009004:	2b00      	cmp	r3, #0
 8009006:	d00a      	beq.n	800901e <HAL_RCCEx_PeriphCLKConfig+0x2a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8009008:	4b5c      	ldr	r3, [pc, #368]	; (800917c <HAL_RCCEx_PeriphCLKConfig+0x400>)
 800900a:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800900e:	f023 0203 	bic.w	r2, r3, #3
 8009012:	687b      	ldr	r3, [r7, #4]
 8009014:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009016:	4959      	ldr	r1, [pc, #356]	; (800917c <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8009018:	4313      	orrs	r3, r2
 800901a:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
  }

#endif /* I2C4 */

  /*-------------------------- LPTIM1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 800901e:	687b      	ldr	r3, [r7, #4]
 8009020:	681b      	ldr	r3, [r3, #0]
 8009022:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8009026:	2b00      	cmp	r3, #0
 8009028:	d00a      	beq.n	8009040 <HAL_RCCEx_PeriphCLKConfig+0x2c4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800902a:	4b54      	ldr	r3, [pc, #336]	; (800917c <HAL_RCCEx_PeriphCLKConfig+0x400>)
 800902c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009030:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8009034:	687b      	ldr	r3, [r7, #4]
 8009036:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009038:	4950      	ldr	r1, [pc, #320]	; (800917c <HAL_RCCEx_PeriphCLKConfig+0x400>)
 800903a:	4313      	orrs	r3, r2
 800903c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8009040:	687b      	ldr	r3, [r7, #4]
 8009042:	681b      	ldr	r3, [r3, #0]
 8009044:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8009048:	2b00      	cmp	r3, #0
 800904a:	d015      	beq.n	8009078 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure the SAI1 interface clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800904c:	4b4b      	ldr	r3, [pc, #300]	; (800917c <HAL_RCCEx_PeriphCLKConfig+0x400>)
 800904e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009052:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8009056:	687b      	ldr	r3, [r7, #4]
 8009058:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800905a:	4948      	ldr	r1, [pc, #288]	; (800917c <HAL_RCCEx_PeriphCLKConfig+0x400>)
 800905c:	4313      	orrs	r3, r2
 800905e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLL)
 8009062:	687b      	ldr	r3, [r7, #4]
 8009064:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009066:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800906a:	d105      	bne.n	8009078 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800906c:	4b43      	ldr	r3, [pc, #268]	; (800917c <HAL_RCCEx_PeriphCLKConfig+0x400>)
 800906e:	68db      	ldr	r3, [r3, #12]
 8009070:	4a42      	ldr	r2, [pc, #264]	; (800917c <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8009072:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8009076:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- I2S clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 8009078:	687b      	ldr	r3, [r7, #4]
 800907a:	681b      	ldr	r3, [r3, #0]
 800907c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8009080:	2b00      	cmp	r3, #0
 8009082:	d015      	beq.n	80090b0 <HAL_RCCEx_PeriphCLKConfig+0x334>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure the I2S interface clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8009084:	4b3d      	ldr	r3, [pc, #244]	; (800917c <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8009086:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800908a:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 800908e:	687b      	ldr	r3, [r7, #4]
 8009090:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009092:	493a      	ldr	r1, [pc, #232]	; (800917c <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8009094:	4313      	orrs	r3, r2
 8009096:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLL)
 800909a:	687b      	ldr	r3, [r7, #4]
 800909c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800909e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80090a2:	d105      	bne.n	80090b0 <HAL_RCCEx_PeriphCLKConfig+0x334>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80090a4:	4b35      	ldr	r3, [pc, #212]	; (800917c <HAL_RCCEx_PeriphCLKConfig+0x400>)
 80090a6:	68db      	ldr	r3, [r3, #12]
 80090a8:	4a34      	ldr	r2, [pc, #208]	; (800917c <HAL_RCCEx_PeriphCLKConfig+0x400>)
 80090aa:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80090ae:	60d3      	str	r3, [r2, #12]
    }
  }

#if defined(FDCAN1)
  /*-------------------------- FDCAN clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 80090b0:	687b      	ldr	r3, [r7, #4]
 80090b2:	681b      	ldr	r3, [r3, #0]
 80090b4:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80090b8:	2b00      	cmp	r3, #0
 80090ba:	d015      	beq.n	80090e8 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN interface clock source */
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 80090bc:	4b2f      	ldr	r3, [pc, #188]	; (800917c <HAL_RCCEx_PeriphCLKConfig+0x400>)
 80090be:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80090c2:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 80090c6:	687b      	ldr	r3, [r7, #4]
 80090c8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80090ca:	492c      	ldr	r1, [pc, #176]	; (800917c <HAL_RCCEx_PeriphCLKConfig+0x400>)
 80090cc:	4313      	orrs	r3, r2
 80090ce:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 80090d2:	687b      	ldr	r3, [r7, #4]
 80090d4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80090d6:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80090da:	d105      	bne.n	80090e8 <HAL_RCCEx_PeriphCLKConfig+0x36c>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80090dc:	4b27      	ldr	r3, [pc, #156]	; (800917c <HAL_RCCEx_PeriphCLKConfig+0x400>)
 80090de:	68db      	ldr	r3, [r3, #12]
 80090e0:	4a26      	ldr	r2, [pc, #152]	; (800917c <HAL_RCCEx_PeriphCLKConfig+0x400>)
 80090e2:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80090e6:	60d3      	str	r3, [r2, #12]
#endif /* FDCAN1 */

#if defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 80090e8:	687b      	ldr	r3, [r7, #4]
 80090ea:	681b      	ldr	r3, [r3, #0]
 80090ec:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80090f0:	2b00      	cmp	r3, #0
 80090f2:	d015      	beq.n	8009120 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80090f4:	4b21      	ldr	r3, [pc, #132]	; (800917c <HAL_RCCEx_PeriphCLKConfig+0x400>)
 80090f6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80090fa:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80090fe:	687b      	ldr	r3, [r7, #4]
 8009100:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009102:	491e      	ldr	r1, [pc, #120]	; (800917c <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8009104:	4313      	orrs	r3, r2
 8009106:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 800910a:	687b      	ldr	r3, [r7, #4]
 800910c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800910e:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8009112:	d105      	bne.n	8009120 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8009114:	4b19      	ldr	r3, [pc, #100]	; (800917c <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8009116:	68db      	ldr	r3, [r3, #12]
 8009118:	4a18      	ldr	r2, [pc, #96]	; (800917c <HAL_RCCEx_PeriphCLKConfig+0x400>)
 800911a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800911e:	60d3      	str	r3, [r2, #12]
  }

#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8009120:	687b      	ldr	r3, [r7, #4]
 8009122:	681b      	ldr	r3, [r3, #0]
 8009124:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8009128:	2b00      	cmp	r3, #0
 800912a:	d015      	beq.n	8009158 <HAL_RCCEx_PeriphCLKConfig+0x3dc>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 800912c:	4b13      	ldr	r3, [pc, #76]	; (800917c <HAL_RCCEx_PeriphCLKConfig+0x400>)
 800912e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009132:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8009136:	687b      	ldr	r3, [r7, #4]
 8009138:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800913a:	4910      	ldr	r1, [pc, #64]	; (800917c <HAL_RCCEx_PeriphCLKConfig+0x400>)
 800913c:	4313      	orrs	r3, r2
 800913e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8009142:	687b      	ldr	r3, [r7, #4]
 8009144:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009146:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800914a:	d105      	bne.n	8009158 <HAL_RCCEx_PeriphCLKConfig+0x3dc>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800914c:	4b0b      	ldr	r3, [pc, #44]	; (800917c <HAL_RCCEx_PeriphCLKConfig+0x400>)
 800914e:	68db      	ldr	r3, [r3, #12]
 8009150:	4a0a      	ldr	r2, [pc, #40]	; (800917c <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8009152:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8009156:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- ADC12 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 8009158:	687b      	ldr	r3, [r7, #4]
 800915a:	681b      	ldr	r3, [r3, #0]
 800915c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8009160:	2b00      	cmp	r3, #0
 8009162:	d018      	beq.n	8009196 <HAL_RCCEx_PeriphCLKConfig+0x41a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12CLKSOURCE(PeriphClkInit->Adc12ClockSelection));

    /* Configure the ADC12 interface clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 8009164:	4b05      	ldr	r3, [pc, #20]	; (800917c <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8009166:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800916a:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 800916e:	687b      	ldr	r3, [r7, #4]
 8009170:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009172:	4902      	ldr	r1, [pc, #8]	; (800917c <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8009174:	4313      	orrs	r3, r2
 8009176:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 800917a:	e001      	b.n	8009180 <HAL_RCCEx_PeriphCLKConfig+0x404>
 800917c:	40021000 	.word	0x40021000
    
    if(PeriphClkInit->Adc12ClockSelection == RCC_ADC12CLKSOURCE_PLL)
 8009180:	687b      	ldr	r3, [r7, #4]
 8009182:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009184:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8009188:	d105      	bne.n	8009196 <HAL_RCCEx_PeriphCLKConfig+0x41a>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 800918a:	4b21      	ldr	r3, [pc, #132]	; (8009210 <HAL_RCCEx_PeriphCLKConfig+0x494>)
 800918c:	68db      	ldr	r3, [r3, #12]
 800918e:	4a20      	ldr	r2, [pc, #128]	; (8009210 <HAL_RCCEx_PeriphCLKConfig+0x494>)
 8009190:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8009194:	60d3      	str	r3, [r2, #12]
    }
  }
  
#if defined(ADC345_COMMON)
  /*-------------------------- ADC345 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC345) == RCC_PERIPHCLK_ADC345)
 8009196:	687b      	ldr	r3, [r7, #4]
 8009198:	681b      	ldr	r3, [r3, #0]
 800919a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800919e:	2b00      	cmp	r3, #0
 80091a0:	d015      	beq.n	80091ce <HAL_RCCEx_PeriphCLKConfig+0x452>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC345CLKSOURCE(PeriphClkInit->Adc345ClockSelection));

    /* Configure the ADC345 interface clock source */
    __HAL_RCC_ADC345_CONFIG(PeriphClkInit->Adc345ClockSelection);
 80091a2:	4b1b      	ldr	r3, [pc, #108]	; (8009210 <HAL_RCCEx_PeriphCLKConfig+0x494>)
 80091a4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80091a8:	f023 4240 	bic.w	r2, r3, #3221225472	; 0xc0000000
 80091ac:	687b      	ldr	r3, [r7, #4]
 80091ae:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80091b0:	4917      	ldr	r1, [pc, #92]	; (8009210 <HAL_RCCEx_PeriphCLKConfig+0x494>)
 80091b2:	4313      	orrs	r3, r2
 80091b4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Adc345ClockSelection == RCC_ADC345CLKSOURCE_PLL)
 80091b8:	687b      	ldr	r3, [r7, #4]
 80091ba:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80091bc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80091c0:	d105      	bne.n	80091ce <HAL_RCCEx_PeriphCLKConfig+0x452>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 80091c2:	4b13      	ldr	r3, [pc, #76]	; (8009210 <HAL_RCCEx_PeriphCLKConfig+0x494>)
 80091c4:	68db      	ldr	r3, [r3, #12]
 80091c6:	4a12      	ldr	r2, [pc, #72]	; (8009210 <HAL_RCCEx_PeriphCLKConfig+0x494>)
 80091c8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80091cc:	60d3      	str	r3, [r2, #12]
#endif /* ADC345_COMMON */

#if defined(QUADSPI)

  /*-------------------------- QuadSPIx clock source configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 80091ce:	687b      	ldr	r3, [r7, #4]
 80091d0:	681b      	ldr	r3, [r3, #0]
 80091d2:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80091d6:	2b00      	cmp	r3, #0
 80091d8:	d015      	beq.n	8009206 <HAL_RCCEx_PeriphCLKConfig+0x48a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_QSPICLKSOURCE(PeriphClkInit->QspiClockSelection));

    /* Configure the QuadSPI clock source */
    __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 80091da:	4b0d      	ldr	r3, [pc, #52]	; (8009210 <HAL_RCCEx_PeriphCLKConfig+0x494>)
 80091dc:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80091e0:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80091e4:	687b      	ldr	r3, [r7, #4]
 80091e6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80091e8:	4909      	ldr	r1, [pc, #36]	; (8009210 <HAL_RCCEx_PeriphCLKConfig+0x494>)
 80091ea:	4313      	orrs	r3, r2
 80091ec:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c

    if(PeriphClkInit->QspiClockSelection == RCC_QSPICLKSOURCE_PLL)
 80091f0:	687b      	ldr	r3, [r7, #4]
 80091f2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80091f4:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80091f8:	d105      	bne.n	8009206 <HAL_RCCEx_PeriphCLKConfig+0x48a>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80091fa:	4b05      	ldr	r3, [pc, #20]	; (8009210 <HAL_RCCEx_PeriphCLKConfig+0x494>)
 80091fc:	68db      	ldr	r3, [r3, #12]
 80091fe:	4a04      	ldr	r2, [pc, #16]	; (8009210 <HAL_RCCEx_PeriphCLKConfig+0x494>)
 8009200:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8009204:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* QUADSPI */

  return status;
 8009206:	7cbb      	ldrb	r3, [r7, #18]
}
 8009208:	4618      	mov	r0, r3
 800920a:	3718      	adds	r7, #24
 800920c:	46bd      	mov	sp, r7
 800920e:	bd80      	pop	{r7, pc}
 8009210:	40021000 	.word	0x40021000

08009214 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8009214:	b580      	push	{r7, lr}
 8009216:	b084      	sub	sp, #16
 8009218:	af00      	add	r7, sp, #0
 800921a:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800921c:	687b      	ldr	r3, [r7, #4]
 800921e:	2b00      	cmp	r3, #0
 8009220:	d101      	bne.n	8009226 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8009222:	2301      	movs	r3, #1
 8009224:	e084      	b.n	8009330 <HAL_SPI_Init+0x11c>
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8009226:	687b      	ldr	r3, [r7, #4]
 8009228:	2200      	movs	r2, #0
 800922a:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800922c:	687b      	ldr	r3, [r7, #4]
 800922e:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8009232:	b2db      	uxtb	r3, r3
 8009234:	2b00      	cmp	r3, #0
 8009236:	d106      	bne.n	8009246 <HAL_SPI_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8009238:	687b      	ldr	r3, [r7, #4]
 800923a:	2200      	movs	r2, #0
 800923c:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8009240:	6878      	ldr	r0, [r7, #4]
 8009242:	f7fb fcb7 	bl	8004bb4 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8009246:	687b      	ldr	r3, [r7, #4]
 8009248:	2202      	movs	r2, #2
 800924a:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800924e:	687b      	ldr	r3, [r7, #4]
 8009250:	681b      	ldr	r3, [r3, #0]
 8009252:	681a      	ldr	r2, [r3, #0]
 8009254:	687b      	ldr	r3, [r7, #4]
 8009256:	681b      	ldr	r3, [r3, #0]
 8009258:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800925c:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800925e:	687b      	ldr	r3, [r7, #4]
 8009260:	68db      	ldr	r3, [r3, #12]
 8009262:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8009266:	d902      	bls.n	800926e <HAL_SPI_Init+0x5a>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8009268:	2300      	movs	r3, #0
 800926a:	60fb      	str	r3, [r7, #12]
 800926c:	e002      	b.n	8009274 <HAL_SPI_Init+0x60>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 800926e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8009272:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8009274:	687b      	ldr	r3, [r7, #4]
 8009276:	68db      	ldr	r3, [r3, #12]
 8009278:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 800927c:	d007      	beq.n	800928e <HAL_SPI_Init+0x7a>
 800927e:	687b      	ldr	r3, [r7, #4]
 8009280:	68db      	ldr	r3, [r3, #12]
 8009282:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8009286:	d002      	beq.n	800928e <HAL_SPI_Init+0x7a>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8009288:	687b      	ldr	r3, [r7, #4]
 800928a:	2200      	movs	r2, #0
 800928c:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Align the CRC Length on the data size */
  if (hspi->Init.CRCLength == SPI_CRC_LENGTH_DATASIZE)
 800928e:	687b      	ldr	r3, [r7, #4]
 8009290:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009292:	2b00      	cmp	r3, #0
 8009294:	d10b      	bne.n	80092ae <HAL_SPI_Init+0x9a>
  {
    /* CRC Length aligned on the data size : value set by default */
    if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8009296:	687b      	ldr	r3, [r7, #4]
 8009298:	68db      	ldr	r3, [r3, #12]
 800929a:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800929e:	d903      	bls.n	80092a8 <HAL_SPI_Init+0x94>
    {
      hspi->Init.CRCLength = SPI_CRC_LENGTH_16BIT;
 80092a0:	687b      	ldr	r3, [r7, #4]
 80092a2:	2202      	movs	r2, #2
 80092a4:	631a      	str	r2, [r3, #48]	; 0x30
 80092a6:	e002      	b.n	80092ae <HAL_SPI_Init+0x9a>
    }
    else
    {
      hspi->Init.CRCLength = SPI_CRC_LENGTH_8BIT;
 80092a8:	687b      	ldr	r3, [r7, #4]
 80092aa:	2201      	movs	r2, #1
 80092ac:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction |
 80092ae:	687b      	ldr	r3, [r7, #4]
 80092b0:	685a      	ldr	r2, [r3, #4]
 80092b2:	687b      	ldr	r3, [r7, #4]
 80092b4:	689b      	ldr	r3, [r3, #8]
 80092b6:	431a      	orrs	r2, r3
 80092b8:	687b      	ldr	r3, [r7, #4]
 80092ba:	691b      	ldr	r3, [r3, #16]
 80092bc:	431a      	orrs	r2, r3
 80092be:	687b      	ldr	r3, [r7, #4]
 80092c0:	695b      	ldr	r3, [r3, #20]
 80092c2:	431a      	orrs	r2, r3
 80092c4:	687b      	ldr	r3, [r7, #4]
 80092c6:	699b      	ldr	r3, [r3, #24]
 80092c8:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80092cc:	431a      	orrs	r2, r3
 80092ce:	687b      	ldr	r3, [r7, #4]
 80092d0:	69db      	ldr	r3, [r3, #28]
 80092d2:	431a      	orrs	r2, r3
 80092d4:	687b      	ldr	r3, [r7, #4]
 80092d6:	6a1b      	ldr	r3, [r3, #32]
 80092d8:	ea42 0103 	orr.w	r1, r2, r3
 80092dc:	687b      	ldr	r3, [r7, #4]
 80092de:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80092e0:	687b      	ldr	r3, [r7, #4]
 80092e2:	681b      	ldr	r3, [r3, #0]
 80092e4:	430a      	orrs	r2, r1
 80092e6:	601a      	str	r2, [r3, #0]
    hspi->Instance->CR1 |= SPI_CR1_CRCL;
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | hspi->Init.TIMode |
 80092e8:	687b      	ldr	r3, [r7, #4]
 80092ea:	699b      	ldr	r3, [r3, #24]
 80092ec:	0c1b      	lsrs	r3, r3, #16
 80092ee:	f003 0204 	and.w	r2, r3, #4
 80092f2:	687b      	ldr	r3, [r7, #4]
 80092f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80092f6:	431a      	orrs	r2, r3
 80092f8:	687b      	ldr	r3, [r7, #4]
 80092fa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80092fc:	431a      	orrs	r2, r3
 80092fe:	687b      	ldr	r3, [r7, #4]
 8009300:	68db      	ldr	r3, [r3, #12]
 8009302:	ea42 0103 	orr.w	r1, r2, r3
 8009306:	687b      	ldr	r3, [r7, #4]
 8009308:	681b      	ldr	r3, [r3, #0]
 800930a:	68fa      	ldr	r2, [r7, #12]
 800930c:	430a      	orrs	r2, r1
 800930e:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8009310:	687b      	ldr	r3, [r7, #4]
 8009312:	681b      	ldr	r3, [r3, #0]
 8009314:	69da      	ldr	r2, [r3, #28]
 8009316:	687b      	ldr	r3, [r7, #4]
 8009318:	681b      	ldr	r3, [r3, #0]
 800931a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800931e:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8009320:	687b      	ldr	r3, [r7, #4]
 8009322:	2200      	movs	r2, #0
 8009324:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8009326:	687b      	ldr	r3, [r7, #4]
 8009328:	2201      	movs	r2, #1
 800932a:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 800932e:	2300      	movs	r3, #0
}
 8009330:	4618      	mov	r0, r3
 8009332:	3710      	adds	r7, #16
 8009334:	46bd      	mov	sp, r7
 8009336:	bd80      	pop	{r7, pc}

08009338 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8009338:	b580      	push	{r7, lr}
 800933a:	b088      	sub	sp, #32
 800933c:	af00      	add	r7, sp, #0
 800933e:	60f8      	str	r0, [r7, #12]
 8009340:	60b9      	str	r1, [r7, #8]
 8009342:	603b      	str	r3, [r7, #0]
 8009344:	4613      	mov	r3, r2
 8009346:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8009348:	2300      	movs	r3, #0
 800934a:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 800934c:	68fb      	ldr	r3, [r7, #12]
 800934e:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8009352:	2b01      	cmp	r3, #1
 8009354:	d101      	bne.n	800935a <HAL_SPI_Transmit+0x22>
 8009356:	2302      	movs	r3, #2
 8009358:	e150      	b.n	80095fc <HAL_SPI_Transmit+0x2c4>
 800935a:	68fb      	ldr	r3, [r7, #12]
 800935c:	2201      	movs	r2, #1
 800935e:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8009362:	f7fc fa67 	bl	8005834 <HAL_GetTick>
 8009366:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8009368:	88fb      	ldrh	r3, [r7, #6]
 800936a:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 800936c:	68fb      	ldr	r3, [r7, #12]
 800936e:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8009372:	b2db      	uxtb	r3, r3
 8009374:	2b01      	cmp	r3, #1
 8009376:	d002      	beq.n	800937e <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8009378:	2302      	movs	r3, #2
 800937a:	77fb      	strb	r3, [r7, #31]
    goto error;
 800937c:	e135      	b.n	80095ea <HAL_SPI_Transmit+0x2b2>
  }

  if ((pData == NULL) || (Size == 0U))
 800937e:	68bb      	ldr	r3, [r7, #8]
 8009380:	2b00      	cmp	r3, #0
 8009382:	d002      	beq.n	800938a <HAL_SPI_Transmit+0x52>
 8009384:	88fb      	ldrh	r3, [r7, #6]
 8009386:	2b00      	cmp	r3, #0
 8009388:	d102      	bne.n	8009390 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 800938a:	2301      	movs	r3, #1
 800938c:	77fb      	strb	r3, [r7, #31]
    goto error;
 800938e:	e12c      	b.n	80095ea <HAL_SPI_Transmit+0x2b2>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8009390:	68fb      	ldr	r3, [r7, #12]
 8009392:	2203      	movs	r2, #3
 8009394:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8009398:	68fb      	ldr	r3, [r7, #12]
 800939a:	2200      	movs	r2, #0
 800939c:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 800939e:	68fb      	ldr	r3, [r7, #12]
 80093a0:	68ba      	ldr	r2, [r7, #8]
 80093a2:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = Size;
 80093a4:	68fb      	ldr	r3, [r7, #12]
 80093a6:	88fa      	ldrh	r2, [r7, #6]
 80093a8:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = Size;
 80093aa:	68fb      	ldr	r3, [r7, #12]
 80093ac:	88fa      	ldrh	r2, [r7, #6]
 80093ae:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 80093b0:	68fb      	ldr	r3, [r7, #12]
 80093b2:	2200      	movs	r2, #0
 80093b4:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = 0U;
 80093b6:	68fb      	ldr	r3, [r7, #12]
 80093b8:	2200      	movs	r2, #0
 80093ba:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->RxXferCount = 0U;
 80093be:	68fb      	ldr	r3, [r7, #12]
 80093c0:	2200      	movs	r2, #0
 80093c2:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->TxISR       = NULL;
 80093c6:	68fb      	ldr	r3, [r7, #12]
 80093c8:	2200      	movs	r2, #0
 80093ca:	651a      	str	r2, [r3, #80]	; 0x50
  hspi->RxISR       = NULL;
 80093cc:	68fb      	ldr	r3, [r7, #12]
 80093ce:	2200      	movs	r2, #0
 80093d0:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80093d2:	68fb      	ldr	r3, [r7, #12]
 80093d4:	689b      	ldr	r3, [r3, #8]
 80093d6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80093da:	d107      	bne.n	80093ec <HAL_SPI_Transmit+0xb4>
  {
    SPI_1LINE_TX(hspi);
 80093dc:	68fb      	ldr	r3, [r7, #12]
 80093de:	681b      	ldr	r3, [r3, #0]
 80093e0:	681a      	ldr	r2, [r3, #0]
 80093e2:	68fb      	ldr	r3, [r7, #12]
 80093e4:	681b      	ldr	r3, [r3, #0]
 80093e6:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80093ea:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80093ec:	68fb      	ldr	r3, [r7, #12]
 80093ee:	681b      	ldr	r3, [r3, #0]
 80093f0:	681b      	ldr	r3, [r3, #0]
 80093f2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80093f6:	2b40      	cmp	r3, #64	; 0x40
 80093f8:	d007      	beq.n	800940a <HAL_SPI_Transmit+0xd2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80093fa:	68fb      	ldr	r3, [r7, #12]
 80093fc:	681b      	ldr	r3, [r3, #0]
 80093fe:	681a      	ldr	r2, [r3, #0]
 8009400:	68fb      	ldr	r3, [r7, #12]
 8009402:	681b      	ldr	r3, [r3, #0]
 8009404:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8009408:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800940a:	68fb      	ldr	r3, [r7, #12]
 800940c:	68db      	ldr	r3, [r3, #12]
 800940e:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8009412:	d94b      	bls.n	80094ac <HAL_SPI_Transmit+0x174>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8009414:	68fb      	ldr	r3, [r7, #12]
 8009416:	685b      	ldr	r3, [r3, #4]
 8009418:	2b00      	cmp	r3, #0
 800941a:	d002      	beq.n	8009422 <HAL_SPI_Transmit+0xea>
 800941c:	8afb      	ldrh	r3, [r7, #22]
 800941e:	2b01      	cmp	r3, #1
 8009420:	d13e      	bne.n	80094a0 <HAL_SPI_Transmit+0x168>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8009422:	68fb      	ldr	r3, [r7, #12]
 8009424:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009426:	881a      	ldrh	r2, [r3, #0]
 8009428:	68fb      	ldr	r3, [r7, #12]
 800942a:	681b      	ldr	r3, [r3, #0]
 800942c:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800942e:	68fb      	ldr	r3, [r7, #12]
 8009430:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009432:	1c9a      	adds	r2, r3, #2
 8009434:	68fb      	ldr	r3, [r7, #12]
 8009436:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 8009438:	68fb      	ldr	r3, [r7, #12]
 800943a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800943c:	b29b      	uxth	r3, r3
 800943e:	3b01      	subs	r3, #1
 8009440:	b29a      	uxth	r2, r3
 8009442:	68fb      	ldr	r3, [r7, #12]
 8009444:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8009446:	e02b      	b.n	80094a0 <HAL_SPI_Transmit+0x168>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8009448:	68fb      	ldr	r3, [r7, #12]
 800944a:	681b      	ldr	r3, [r3, #0]
 800944c:	689b      	ldr	r3, [r3, #8]
 800944e:	f003 0302 	and.w	r3, r3, #2
 8009452:	2b02      	cmp	r3, #2
 8009454:	d112      	bne.n	800947c <HAL_SPI_Transmit+0x144>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8009456:	68fb      	ldr	r3, [r7, #12]
 8009458:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800945a:	881a      	ldrh	r2, [r3, #0]
 800945c:	68fb      	ldr	r3, [r7, #12]
 800945e:	681b      	ldr	r3, [r3, #0]
 8009460:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8009462:	68fb      	ldr	r3, [r7, #12]
 8009464:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009466:	1c9a      	adds	r2, r3, #2
 8009468:	68fb      	ldr	r3, [r7, #12]
 800946a:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 800946c:	68fb      	ldr	r3, [r7, #12]
 800946e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8009470:	b29b      	uxth	r3, r3
 8009472:	3b01      	subs	r3, #1
 8009474:	b29a      	uxth	r2, r3
 8009476:	68fb      	ldr	r3, [r7, #12]
 8009478:	87da      	strh	r2, [r3, #62]	; 0x3e
 800947a:	e011      	b.n	80094a0 <HAL_SPI_Transmit+0x168>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800947c:	f7fc f9da 	bl	8005834 <HAL_GetTick>
 8009480:	4602      	mov	r2, r0
 8009482:	69bb      	ldr	r3, [r7, #24]
 8009484:	1ad3      	subs	r3, r2, r3
 8009486:	683a      	ldr	r2, [r7, #0]
 8009488:	429a      	cmp	r2, r3
 800948a:	d803      	bhi.n	8009494 <HAL_SPI_Transmit+0x15c>
 800948c:	683b      	ldr	r3, [r7, #0]
 800948e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8009492:	d102      	bne.n	800949a <HAL_SPI_Transmit+0x162>
 8009494:	683b      	ldr	r3, [r7, #0]
 8009496:	2b00      	cmp	r3, #0
 8009498:	d102      	bne.n	80094a0 <HAL_SPI_Transmit+0x168>
        {
          errorcode = HAL_TIMEOUT;
 800949a:	2303      	movs	r3, #3
 800949c:	77fb      	strb	r3, [r7, #31]
          goto error;
 800949e:	e0a4      	b.n	80095ea <HAL_SPI_Transmit+0x2b2>
    while (hspi->TxXferCount > 0U)
 80094a0:	68fb      	ldr	r3, [r7, #12]
 80094a2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80094a4:	b29b      	uxth	r3, r3
 80094a6:	2b00      	cmp	r3, #0
 80094a8:	d1ce      	bne.n	8009448 <HAL_SPI_Transmit+0x110>
 80094aa:	e07c      	b.n	80095a6 <HAL_SPI_Transmit+0x26e>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80094ac:	68fb      	ldr	r3, [r7, #12]
 80094ae:	685b      	ldr	r3, [r3, #4]
 80094b0:	2b00      	cmp	r3, #0
 80094b2:	d002      	beq.n	80094ba <HAL_SPI_Transmit+0x182>
 80094b4:	8afb      	ldrh	r3, [r7, #22]
 80094b6:	2b01      	cmp	r3, #1
 80094b8:	d170      	bne.n	800959c <HAL_SPI_Transmit+0x264>
    {
      if (hspi->TxXferCount > 1U)
 80094ba:	68fb      	ldr	r3, [r7, #12]
 80094bc:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80094be:	b29b      	uxth	r3, r3
 80094c0:	2b01      	cmp	r3, #1
 80094c2:	d912      	bls.n	80094ea <HAL_SPI_Transmit+0x1b2>
      {
        /* write on the data register in packing mode */
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80094c4:	68fb      	ldr	r3, [r7, #12]
 80094c6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80094c8:	881a      	ldrh	r2, [r3, #0]
 80094ca:	68fb      	ldr	r3, [r7, #12]
 80094cc:	681b      	ldr	r3, [r3, #0]
 80094ce:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80094d0:	68fb      	ldr	r3, [r7, #12]
 80094d2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80094d4:	1c9a      	adds	r2, r3, #2
 80094d6:	68fb      	ldr	r3, [r7, #12]
 80094d8:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount -= 2U;
 80094da:	68fb      	ldr	r3, [r7, #12]
 80094dc:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80094de:	b29b      	uxth	r3, r3
 80094e0:	3b02      	subs	r3, #2
 80094e2:	b29a      	uxth	r2, r3
 80094e4:	68fb      	ldr	r3, [r7, #12]
 80094e6:	87da      	strh	r2, [r3, #62]	; 0x3e
 80094e8:	e058      	b.n	800959c <HAL_SPI_Transmit+0x264>
      }
      else
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80094ea:	68fb      	ldr	r3, [r7, #12]
 80094ec:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80094ee:	68fb      	ldr	r3, [r7, #12]
 80094f0:	681b      	ldr	r3, [r3, #0]
 80094f2:	330c      	adds	r3, #12
 80094f4:	7812      	ldrb	r2, [r2, #0]
 80094f6:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr ++;
 80094f8:	68fb      	ldr	r3, [r7, #12]
 80094fa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80094fc:	1c5a      	adds	r2, r3, #1
 80094fe:	68fb      	ldr	r3, [r7, #12]
 8009500:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8009502:	68fb      	ldr	r3, [r7, #12]
 8009504:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8009506:	b29b      	uxth	r3, r3
 8009508:	3b01      	subs	r3, #1
 800950a:	b29a      	uxth	r2, r3
 800950c:	68fb      	ldr	r3, [r7, #12]
 800950e:	87da      	strh	r2, [r3, #62]	; 0x3e
      }
    }
    while (hspi->TxXferCount > 0U)
 8009510:	e044      	b.n	800959c <HAL_SPI_Transmit+0x264>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8009512:	68fb      	ldr	r3, [r7, #12]
 8009514:	681b      	ldr	r3, [r3, #0]
 8009516:	689b      	ldr	r3, [r3, #8]
 8009518:	f003 0302 	and.w	r3, r3, #2
 800951c:	2b02      	cmp	r3, #2
 800951e:	d12b      	bne.n	8009578 <HAL_SPI_Transmit+0x240>
      {
        if (hspi->TxXferCount > 1U)
 8009520:	68fb      	ldr	r3, [r7, #12]
 8009522:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8009524:	b29b      	uxth	r3, r3
 8009526:	2b01      	cmp	r3, #1
 8009528:	d912      	bls.n	8009550 <HAL_SPI_Transmit+0x218>
        {
          /* write on the data register in packing mode */
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800952a:	68fb      	ldr	r3, [r7, #12]
 800952c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800952e:	881a      	ldrh	r2, [r3, #0]
 8009530:	68fb      	ldr	r3, [r7, #12]
 8009532:	681b      	ldr	r3, [r3, #0]
 8009534:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8009536:	68fb      	ldr	r3, [r7, #12]
 8009538:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800953a:	1c9a      	adds	r2, r3, #2
 800953c:	68fb      	ldr	r3, [r7, #12]
 800953e:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount -= 2U;
 8009540:	68fb      	ldr	r3, [r7, #12]
 8009542:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8009544:	b29b      	uxth	r3, r3
 8009546:	3b02      	subs	r3, #2
 8009548:	b29a      	uxth	r2, r3
 800954a:	68fb      	ldr	r3, [r7, #12]
 800954c:	87da      	strh	r2, [r3, #62]	; 0x3e
 800954e:	e025      	b.n	800959c <HAL_SPI_Transmit+0x264>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8009550:	68fb      	ldr	r3, [r7, #12]
 8009552:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8009554:	68fb      	ldr	r3, [r7, #12]
 8009556:	681b      	ldr	r3, [r3, #0]
 8009558:	330c      	adds	r3, #12
 800955a:	7812      	ldrb	r2, [r2, #0]
 800955c:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 800955e:	68fb      	ldr	r3, [r7, #12]
 8009560:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009562:	1c5a      	adds	r2, r3, #1
 8009564:	68fb      	ldr	r3, [r7, #12]
 8009566:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount--;
 8009568:	68fb      	ldr	r3, [r7, #12]
 800956a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800956c:	b29b      	uxth	r3, r3
 800956e:	3b01      	subs	r3, #1
 8009570:	b29a      	uxth	r2, r3
 8009572:	68fb      	ldr	r3, [r7, #12]
 8009574:	87da      	strh	r2, [r3, #62]	; 0x3e
 8009576:	e011      	b.n	800959c <HAL_SPI_Transmit+0x264>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8009578:	f7fc f95c 	bl	8005834 <HAL_GetTick>
 800957c:	4602      	mov	r2, r0
 800957e:	69bb      	ldr	r3, [r7, #24]
 8009580:	1ad3      	subs	r3, r2, r3
 8009582:	683a      	ldr	r2, [r7, #0]
 8009584:	429a      	cmp	r2, r3
 8009586:	d803      	bhi.n	8009590 <HAL_SPI_Transmit+0x258>
 8009588:	683b      	ldr	r3, [r7, #0]
 800958a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800958e:	d102      	bne.n	8009596 <HAL_SPI_Transmit+0x25e>
 8009590:	683b      	ldr	r3, [r7, #0]
 8009592:	2b00      	cmp	r3, #0
 8009594:	d102      	bne.n	800959c <HAL_SPI_Transmit+0x264>
        {
          errorcode = HAL_TIMEOUT;
 8009596:	2303      	movs	r3, #3
 8009598:	77fb      	strb	r3, [r7, #31]
          goto error;
 800959a:	e026      	b.n	80095ea <HAL_SPI_Transmit+0x2b2>
    while (hspi->TxXferCount > 0U)
 800959c:	68fb      	ldr	r3, [r7, #12]
 800959e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80095a0:	b29b      	uxth	r3, r3
 80095a2:	2b00      	cmp	r3, #0
 80095a4:	d1b5      	bne.n	8009512 <HAL_SPI_Transmit+0x1da>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80095a6:	69ba      	ldr	r2, [r7, #24]
 80095a8:	6839      	ldr	r1, [r7, #0]
 80095aa:	68f8      	ldr	r0, [r7, #12]
 80095ac:	f000 f901 	bl	80097b2 <SPI_EndRxTxTransaction>
 80095b0:	4603      	mov	r3, r0
 80095b2:	2b00      	cmp	r3, #0
 80095b4:	d002      	beq.n	80095bc <HAL_SPI_Transmit+0x284>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80095b6:	68fb      	ldr	r3, [r7, #12]
 80095b8:	2220      	movs	r2, #32
 80095ba:	661a      	str	r2, [r3, #96]	; 0x60
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80095bc:	68fb      	ldr	r3, [r7, #12]
 80095be:	689b      	ldr	r3, [r3, #8]
 80095c0:	2b00      	cmp	r3, #0
 80095c2:	d10a      	bne.n	80095da <HAL_SPI_Transmit+0x2a2>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80095c4:	2300      	movs	r3, #0
 80095c6:	613b      	str	r3, [r7, #16]
 80095c8:	68fb      	ldr	r3, [r7, #12]
 80095ca:	681b      	ldr	r3, [r3, #0]
 80095cc:	68db      	ldr	r3, [r3, #12]
 80095ce:	613b      	str	r3, [r7, #16]
 80095d0:	68fb      	ldr	r3, [r7, #12]
 80095d2:	681b      	ldr	r3, [r3, #0]
 80095d4:	689b      	ldr	r3, [r3, #8]
 80095d6:	613b      	str	r3, [r7, #16]
 80095d8:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80095da:	68fb      	ldr	r3, [r7, #12]
 80095dc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80095de:	2b00      	cmp	r3, #0
 80095e0:	d002      	beq.n	80095e8 <HAL_SPI_Transmit+0x2b0>
  {
    errorcode = HAL_ERROR;
 80095e2:	2301      	movs	r3, #1
 80095e4:	77fb      	strb	r3, [r7, #31]
 80095e6:	e000      	b.n	80095ea <HAL_SPI_Transmit+0x2b2>
  }

error:
 80095e8:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 80095ea:	68fb      	ldr	r3, [r7, #12]
 80095ec:	2201      	movs	r2, #1
 80095ee:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 80095f2:	68fb      	ldr	r3, [r7, #12]
 80095f4:	2200      	movs	r2, #0
 80095f6:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 80095fa:	7ffb      	ldrb	r3, [r7, #31]
}
 80095fc:	4618      	mov	r0, r3
 80095fe:	3720      	adds	r7, #32
 8009600:	46bd      	mov	sp, r7
 8009602:	bd80      	pop	{r7, pc}

08009604 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8009604:	b580      	push	{r7, lr}
 8009606:	b084      	sub	sp, #16
 8009608:	af00      	add	r7, sp, #0
 800960a:	60f8      	str	r0, [r7, #12]
 800960c:	60b9      	str	r1, [r7, #8]
 800960e:	603b      	str	r3, [r7, #0]
 8009610:	4613      	mov	r3, r2
 8009612:	71fb      	strb	r3, [r7, #7]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8009614:	e04c      	b.n	80096b0 <SPI_WaitFlagStateUntilTimeout+0xac>
  {
    if (Timeout != HAL_MAX_DELAY)
 8009616:	683b      	ldr	r3, [r7, #0]
 8009618:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800961c:	d048      	beq.n	80096b0 <SPI_WaitFlagStateUntilTimeout+0xac>
    {
      if (((HAL_GetTick() - Tickstart) >= Timeout) || (Timeout == 0U))
 800961e:	f7fc f909 	bl	8005834 <HAL_GetTick>
 8009622:	4602      	mov	r2, r0
 8009624:	69bb      	ldr	r3, [r7, #24]
 8009626:	1ad3      	subs	r3, r2, r3
 8009628:	683a      	ldr	r2, [r7, #0]
 800962a:	429a      	cmp	r2, r3
 800962c:	d902      	bls.n	8009634 <SPI_WaitFlagStateUntilTimeout+0x30>
 800962e:	683b      	ldr	r3, [r7, #0]
 8009630:	2b00      	cmp	r3, #0
 8009632:	d13d      	bne.n	80096b0 <SPI_WaitFlagStateUntilTimeout+0xac>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
        on both master and slave sides in order to resynchronize the master
        and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8009634:	68fb      	ldr	r3, [r7, #12]
 8009636:	681b      	ldr	r3, [r3, #0]
 8009638:	685a      	ldr	r2, [r3, #4]
 800963a:	68fb      	ldr	r3, [r7, #12]
 800963c:	681b      	ldr	r3, [r3, #0]
 800963e:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8009642:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8009644:	68fb      	ldr	r3, [r7, #12]
 8009646:	685b      	ldr	r3, [r3, #4]
 8009648:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800964c:	d111      	bne.n	8009672 <SPI_WaitFlagStateUntilTimeout+0x6e>
 800964e:	68fb      	ldr	r3, [r7, #12]
 8009650:	689b      	ldr	r3, [r3, #8]
 8009652:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8009656:	d004      	beq.n	8009662 <SPI_WaitFlagStateUntilTimeout+0x5e>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8009658:	68fb      	ldr	r3, [r7, #12]
 800965a:	689b      	ldr	r3, [r3, #8]
 800965c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8009660:	d107      	bne.n	8009672 <SPI_WaitFlagStateUntilTimeout+0x6e>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8009662:	68fb      	ldr	r3, [r7, #12]
 8009664:	681b      	ldr	r3, [r3, #0]
 8009666:	681a      	ldr	r2, [r3, #0]
 8009668:	68fb      	ldr	r3, [r7, #12]
 800966a:	681b      	ldr	r3, [r3, #0]
 800966c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8009670:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8009672:	68fb      	ldr	r3, [r7, #12]
 8009674:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009676:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800967a:	d10f      	bne.n	800969c <SPI_WaitFlagStateUntilTimeout+0x98>
        {
          SPI_RESET_CRC(hspi);
 800967c:	68fb      	ldr	r3, [r7, #12]
 800967e:	681b      	ldr	r3, [r3, #0]
 8009680:	681a      	ldr	r2, [r3, #0]
 8009682:	68fb      	ldr	r3, [r7, #12]
 8009684:	681b      	ldr	r3, [r3, #0]
 8009686:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800968a:	601a      	str	r2, [r3, #0]
 800968c:	68fb      	ldr	r3, [r7, #12]
 800968e:	681b      	ldr	r3, [r3, #0]
 8009690:	681a      	ldr	r2, [r3, #0]
 8009692:	68fb      	ldr	r3, [r7, #12]
 8009694:	681b      	ldr	r3, [r3, #0]
 8009696:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800969a:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800969c:	68fb      	ldr	r3, [r7, #12]
 800969e:	2201      	movs	r2, #1
 80096a0:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80096a4:	68fb      	ldr	r3, [r7, #12]
 80096a6:	2200      	movs	r2, #0
 80096a8:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 80096ac:	2303      	movs	r3, #3
 80096ae:	e00f      	b.n	80096d0 <SPI_WaitFlagStateUntilTimeout+0xcc>
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80096b0:	68fb      	ldr	r3, [r7, #12]
 80096b2:	681b      	ldr	r3, [r3, #0]
 80096b4:	689a      	ldr	r2, [r3, #8]
 80096b6:	68bb      	ldr	r3, [r7, #8]
 80096b8:	4013      	ands	r3, r2
 80096ba:	68ba      	ldr	r2, [r7, #8]
 80096bc:	429a      	cmp	r2, r3
 80096be:	bf0c      	ite	eq
 80096c0:	2301      	moveq	r3, #1
 80096c2:	2300      	movne	r3, #0
 80096c4:	b2db      	uxtb	r3, r3
 80096c6:	461a      	mov	r2, r3
 80096c8:	79fb      	ldrb	r3, [r7, #7]
 80096ca:	429a      	cmp	r2, r3
 80096cc:	d1a3      	bne.n	8009616 <SPI_WaitFlagStateUntilTimeout+0x12>
      }
    }
  }

  return HAL_OK;
 80096ce:	2300      	movs	r3, #0
}
 80096d0:	4618      	mov	r0, r3
 80096d2:	3710      	adds	r7, #16
 80096d4:	46bd      	mov	sp, r7
 80096d6:	bd80      	pop	{r7, pc}

080096d8 <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 80096d8:	b580      	push	{r7, lr}
 80096da:	b084      	sub	sp, #16
 80096dc:	af00      	add	r7, sp, #0
 80096de:	60f8      	str	r0, [r7, #12]
 80096e0:	60b9      	str	r1, [r7, #8]
 80096e2:	607a      	str	r2, [r7, #4]
 80096e4:	603b      	str	r3, [r7, #0]
  while ((hspi->Instance->SR & Fifo) != State)
 80096e6:	e057      	b.n	8009798 <SPI_WaitFifoStateUntilTimeout+0xc0>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 80096e8:	68bb      	ldr	r3, [r7, #8]
 80096ea:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 80096ee:	d106      	bne.n	80096fe <SPI_WaitFifoStateUntilTimeout+0x26>
 80096f0:	687b      	ldr	r3, [r7, #4]
 80096f2:	2b00      	cmp	r3, #0
 80096f4:	d103      	bne.n	80096fe <SPI_WaitFifoStateUntilTimeout+0x26>
    {
      /* Read 8bit CRC to flush Data Register */
      READ_REG(*((__IO uint8_t *)&hspi->Instance->DR));
 80096f6:	68fb      	ldr	r3, [r7, #12]
 80096f8:	681b      	ldr	r3, [r3, #0]
 80096fa:	330c      	adds	r3, #12
 80096fc:	781b      	ldrb	r3, [r3, #0]
    }

    if (Timeout != HAL_MAX_DELAY)
 80096fe:	683b      	ldr	r3, [r7, #0]
 8009700:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8009704:	d048      	beq.n	8009798 <SPI_WaitFifoStateUntilTimeout+0xc0>
    {
      if (((HAL_GetTick() - Tickstart) >= Timeout) || (Timeout == 0U))
 8009706:	f7fc f895 	bl	8005834 <HAL_GetTick>
 800970a:	4602      	mov	r2, r0
 800970c:	69bb      	ldr	r3, [r7, #24]
 800970e:	1ad3      	subs	r3, r2, r3
 8009710:	683a      	ldr	r2, [r7, #0]
 8009712:	429a      	cmp	r2, r3
 8009714:	d902      	bls.n	800971c <SPI_WaitFifoStateUntilTimeout+0x44>
 8009716:	683b      	ldr	r3, [r7, #0]
 8009718:	2b00      	cmp	r3, #0
 800971a:	d13d      	bne.n	8009798 <SPI_WaitFifoStateUntilTimeout+0xc0>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800971c:	68fb      	ldr	r3, [r7, #12]
 800971e:	681b      	ldr	r3, [r3, #0]
 8009720:	685a      	ldr	r2, [r3, #4]
 8009722:	68fb      	ldr	r3, [r7, #12]
 8009724:	681b      	ldr	r3, [r3, #0]
 8009726:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 800972a:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800972c:	68fb      	ldr	r3, [r7, #12]
 800972e:	685b      	ldr	r3, [r3, #4]
 8009730:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8009734:	d111      	bne.n	800975a <SPI_WaitFifoStateUntilTimeout+0x82>
 8009736:	68fb      	ldr	r3, [r7, #12]
 8009738:	689b      	ldr	r3, [r3, #8]
 800973a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800973e:	d004      	beq.n	800974a <SPI_WaitFifoStateUntilTimeout+0x72>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8009740:	68fb      	ldr	r3, [r7, #12]
 8009742:	689b      	ldr	r3, [r3, #8]
 8009744:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8009748:	d107      	bne.n	800975a <SPI_WaitFifoStateUntilTimeout+0x82>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 800974a:	68fb      	ldr	r3, [r7, #12]
 800974c:	681b      	ldr	r3, [r3, #0]
 800974e:	681a      	ldr	r2, [r3, #0]
 8009750:	68fb      	ldr	r3, [r7, #12]
 8009752:	681b      	ldr	r3, [r3, #0]
 8009754:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8009758:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800975a:	68fb      	ldr	r3, [r7, #12]
 800975c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800975e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8009762:	d10f      	bne.n	8009784 <SPI_WaitFifoStateUntilTimeout+0xac>
        {
          SPI_RESET_CRC(hspi);
 8009764:	68fb      	ldr	r3, [r7, #12]
 8009766:	681b      	ldr	r3, [r3, #0]
 8009768:	681a      	ldr	r2, [r3, #0]
 800976a:	68fb      	ldr	r3, [r7, #12]
 800976c:	681b      	ldr	r3, [r3, #0]
 800976e:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8009772:	601a      	str	r2, [r3, #0]
 8009774:	68fb      	ldr	r3, [r7, #12]
 8009776:	681b      	ldr	r3, [r3, #0]
 8009778:	681a      	ldr	r2, [r3, #0]
 800977a:	68fb      	ldr	r3, [r7, #12]
 800977c:	681b      	ldr	r3, [r3, #0]
 800977e:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8009782:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8009784:	68fb      	ldr	r3, [r7, #12]
 8009786:	2201      	movs	r2, #1
 8009788:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800978c:	68fb      	ldr	r3, [r7, #12]
 800978e:	2200      	movs	r2, #0
 8009790:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 8009794:	2303      	movs	r3, #3
 8009796:	e008      	b.n	80097aa <SPI_WaitFifoStateUntilTimeout+0xd2>
  while ((hspi->Instance->SR & Fifo) != State)
 8009798:	68fb      	ldr	r3, [r7, #12]
 800979a:	681b      	ldr	r3, [r3, #0]
 800979c:	689a      	ldr	r2, [r3, #8]
 800979e:	68bb      	ldr	r3, [r7, #8]
 80097a0:	4013      	ands	r3, r2
 80097a2:	687a      	ldr	r2, [r7, #4]
 80097a4:	429a      	cmp	r2, r3
 80097a6:	d19f      	bne.n	80096e8 <SPI_WaitFifoStateUntilTimeout+0x10>
      }
    }
  }

  return HAL_OK;
 80097a8:	2300      	movs	r3, #0
}
 80097aa:	4618      	mov	r0, r3
 80097ac:	3710      	adds	r7, #16
 80097ae:	46bd      	mov	sp, r7
 80097b0:	bd80      	pop	{r7, pc}

080097b2 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 80097b2:	b580      	push	{r7, lr}
 80097b4:	b086      	sub	sp, #24
 80097b6:	af02      	add	r7, sp, #8
 80097b8:	60f8      	str	r0, [r7, #12]
 80097ba:	60b9      	str	r1, [r7, #8]
 80097bc:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 80097be:	687b      	ldr	r3, [r7, #4]
 80097c0:	9300      	str	r3, [sp, #0]
 80097c2:	68bb      	ldr	r3, [r7, #8]
 80097c4:	2200      	movs	r2, #0
 80097c6:	f44f 51c0 	mov.w	r1, #6144	; 0x1800
 80097ca:	68f8      	ldr	r0, [r7, #12]
 80097cc:	f7ff ff84 	bl	80096d8 <SPI_WaitFifoStateUntilTimeout>
 80097d0:	4603      	mov	r3, r0
 80097d2:	2b00      	cmp	r3, #0
 80097d4:	d007      	beq.n	80097e6 <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80097d6:	68fb      	ldr	r3, [r7, #12]
 80097d8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80097da:	f043 0220 	orr.w	r2, r3, #32
 80097de:	68fb      	ldr	r3, [r7, #12]
 80097e0:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 80097e2:	2303      	movs	r3, #3
 80097e4:	e027      	b.n	8009836 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80097e6:	687b      	ldr	r3, [r7, #4]
 80097e8:	9300      	str	r3, [sp, #0]
 80097ea:	68bb      	ldr	r3, [r7, #8]
 80097ec:	2200      	movs	r2, #0
 80097ee:	2180      	movs	r1, #128	; 0x80
 80097f0:	68f8      	ldr	r0, [r7, #12]
 80097f2:	f7ff ff07 	bl	8009604 <SPI_WaitFlagStateUntilTimeout>
 80097f6:	4603      	mov	r3, r0
 80097f8:	2b00      	cmp	r3, #0
 80097fa:	d007      	beq.n	800980c <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80097fc:	68fb      	ldr	r3, [r7, #12]
 80097fe:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8009800:	f043 0220 	orr.w	r2, r3, #32
 8009804:	68fb      	ldr	r3, [r7, #12]
 8009806:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8009808:	2303      	movs	r3, #3
 800980a:	e014      	b.n	8009836 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 800980c:	687b      	ldr	r3, [r7, #4]
 800980e:	9300      	str	r3, [sp, #0]
 8009810:	68bb      	ldr	r3, [r7, #8]
 8009812:	2200      	movs	r2, #0
 8009814:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 8009818:	68f8      	ldr	r0, [r7, #12]
 800981a:	f7ff ff5d 	bl	80096d8 <SPI_WaitFifoStateUntilTimeout>
 800981e:	4603      	mov	r3, r0
 8009820:	2b00      	cmp	r3, #0
 8009822:	d007      	beq.n	8009834 <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8009824:	68fb      	ldr	r3, [r7, #12]
 8009826:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8009828:	f043 0220 	orr.w	r2, r3, #32
 800982c:	68fb      	ldr	r3, [r7, #12]
 800982e:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8009830:	2303      	movs	r3, #3
 8009832:	e000      	b.n	8009836 <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 8009834:	2300      	movs	r3, #0
}
 8009836:	4618      	mov	r0, r3
 8009838:	3710      	adds	r7, #16
 800983a:	46bd      	mov	sp, r7
 800983c:	bd80      	pop	{r7, pc}

0800983e <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800983e:	b580      	push	{r7, lr}
 8009840:	b082      	sub	sp, #8
 8009842:	af00      	add	r7, sp, #0
 8009844:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8009846:	687b      	ldr	r3, [r7, #4]
 8009848:	2b00      	cmp	r3, #0
 800984a:	d101      	bne.n	8009850 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800984c:	2301      	movs	r3, #1
 800984e:	e049      	b.n	80098e4 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8009850:	687b      	ldr	r3, [r7, #4]
 8009852:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8009856:	b2db      	uxtb	r3, r3
 8009858:	2b00      	cmp	r3, #0
 800985a:	d106      	bne.n	800986a <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800985c:	687b      	ldr	r3, [r7, #4]
 800985e:	2200      	movs	r2, #0
 8009860:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8009864:	6878      	ldr	r0, [r7, #4]
 8009866:	f7fb fe93 	bl	8005590 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800986a:	687b      	ldr	r3, [r7, #4]
 800986c:	2202      	movs	r2, #2
 800986e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8009872:	687b      	ldr	r3, [r7, #4]
 8009874:	681a      	ldr	r2, [r3, #0]
 8009876:	687b      	ldr	r3, [r7, #4]
 8009878:	3304      	adds	r3, #4
 800987a:	4619      	mov	r1, r3
 800987c:	4610      	mov	r0, r2
 800987e:	f000 fc51 	bl	800a124 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8009882:	687b      	ldr	r3, [r7, #4]
 8009884:	2201      	movs	r2, #1
 8009886:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800988a:	687b      	ldr	r3, [r7, #4]
 800988c:	2201      	movs	r2, #1
 800988e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8009892:	687b      	ldr	r3, [r7, #4]
 8009894:	2201      	movs	r2, #1
 8009896:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800989a:	687b      	ldr	r3, [r7, #4]
 800989c:	2201      	movs	r2, #1
 800989e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80098a2:	687b      	ldr	r3, [r7, #4]
 80098a4:	2201      	movs	r2, #1
 80098a6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80098aa:	687b      	ldr	r3, [r7, #4]
 80098ac:	2201      	movs	r2, #1
 80098ae:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80098b2:	687b      	ldr	r3, [r7, #4]
 80098b4:	2201      	movs	r2, #1
 80098b6:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80098ba:	687b      	ldr	r3, [r7, #4]
 80098bc:	2201      	movs	r2, #1
 80098be:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80098c2:	687b      	ldr	r3, [r7, #4]
 80098c4:	2201      	movs	r2, #1
 80098c6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80098ca:	687b      	ldr	r3, [r7, #4]
 80098cc:	2201      	movs	r2, #1
 80098ce:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 80098d2:	687b      	ldr	r3, [r7, #4]
 80098d4:	2201      	movs	r2, #1
 80098d6:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80098da:	687b      	ldr	r3, [r7, #4]
 80098dc:	2201      	movs	r2, #1
 80098de:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80098e2:	2300      	movs	r3, #0
}
 80098e4:	4618      	mov	r0, r3
 80098e6:	3708      	adds	r7, #8
 80098e8:	46bd      	mov	sp, r7
 80098ea:	bd80      	pop	{r7, pc}

080098ec <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 80098ec:	b480      	push	{r7}
 80098ee:	b085      	sub	sp, #20
 80098f0:	af00      	add	r7, sp, #0
 80098f2:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80098f4:	687b      	ldr	r3, [r7, #4]
 80098f6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80098fa:	b2db      	uxtb	r3, r3
 80098fc:	2b01      	cmp	r3, #1
 80098fe:	d001      	beq.n	8009904 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8009900:	2301      	movs	r3, #1
 8009902:	e019      	b.n	8009938 <HAL_TIM_Base_Start+0x4c>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8009904:	687b      	ldr	r3, [r7, #4]
 8009906:	2202      	movs	r2, #2
 8009908:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800990c:	687b      	ldr	r3, [r7, #4]
 800990e:	681b      	ldr	r3, [r3, #0]
 8009910:	689a      	ldr	r2, [r3, #8]
 8009912:	4b0c      	ldr	r3, [pc, #48]	; (8009944 <HAL_TIM_Base_Start+0x58>)
 8009914:	4013      	ands	r3, r2
 8009916:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8009918:	68fb      	ldr	r3, [r7, #12]
 800991a:	2b06      	cmp	r3, #6
 800991c:	d00b      	beq.n	8009936 <HAL_TIM_Base_Start+0x4a>
 800991e:	68fb      	ldr	r3, [r7, #12]
 8009920:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8009924:	d007      	beq.n	8009936 <HAL_TIM_Base_Start+0x4a>
  {
    __HAL_TIM_ENABLE(htim);
 8009926:	687b      	ldr	r3, [r7, #4]
 8009928:	681b      	ldr	r3, [r3, #0]
 800992a:	681a      	ldr	r2, [r3, #0]
 800992c:	687b      	ldr	r3, [r7, #4]
 800992e:	681b      	ldr	r3, [r3, #0]
 8009930:	f042 0201 	orr.w	r2, r2, #1
 8009934:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8009936:	2300      	movs	r3, #0
}
 8009938:	4618      	mov	r0, r3
 800993a:	3714      	adds	r7, #20
 800993c:	46bd      	mov	sp, r7
 800993e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009942:	4770      	bx	lr
 8009944:	00010007 	.word	0x00010007

08009948 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8009948:	b480      	push	{r7}
 800994a:	b085      	sub	sp, #20
 800994c:	af00      	add	r7, sp, #0
 800994e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8009950:	687b      	ldr	r3, [r7, #4]
 8009952:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8009956:	b2db      	uxtb	r3, r3
 8009958:	2b01      	cmp	r3, #1
 800995a:	d001      	beq.n	8009960 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800995c:	2301      	movs	r3, #1
 800995e:	e021      	b.n	80099a4 <HAL_TIM_Base_Start_IT+0x5c>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8009960:	687b      	ldr	r3, [r7, #4]
 8009962:	2202      	movs	r2, #2
 8009964:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8009968:	687b      	ldr	r3, [r7, #4]
 800996a:	681b      	ldr	r3, [r3, #0]
 800996c:	68da      	ldr	r2, [r3, #12]
 800996e:	687b      	ldr	r3, [r7, #4]
 8009970:	681b      	ldr	r3, [r3, #0]
 8009972:	f042 0201 	orr.w	r2, r2, #1
 8009976:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8009978:	687b      	ldr	r3, [r7, #4]
 800997a:	681b      	ldr	r3, [r3, #0]
 800997c:	689a      	ldr	r2, [r3, #8]
 800997e:	4b0c      	ldr	r3, [pc, #48]	; (80099b0 <HAL_TIM_Base_Start_IT+0x68>)
 8009980:	4013      	ands	r3, r2
 8009982:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8009984:	68fb      	ldr	r3, [r7, #12]
 8009986:	2b06      	cmp	r3, #6
 8009988:	d00b      	beq.n	80099a2 <HAL_TIM_Base_Start_IT+0x5a>
 800998a:	68fb      	ldr	r3, [r7, #12]
 800998c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8009990:	d007      	beq.n	80099a2 <HAL_TIM_Base_Start_IT+0x5a>
  {
    __HAL_TIM_ENABLE(htim);
 8009992:	687b      	ldr	r3, [r7, #4]
 8009994:	681b      	ldr	r3, [r3, #0]
 8009996:	681a      	ldr	r2, [r3, #0]
 8009998:	687b      	ldr	r3, [r7, #4]
 800999a:	681b      	ldr	r3, [r3, #0]
 800999c:	f042 0201 	orr.w	r2, r2, #1
 80099a0:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80099a2:	2300      	movs	r3, #0
}
 80099a4:	4618      	mov	r0, r3
 80099a6:	3714      	adds	r7, #20
 80099a8:	46bd      	mov	sp, r7
 80099aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80099ae:	4770      	bx	lr
 80099b0:	00010007 	.word	0x00010007

080099b4 <HAL_TIM_Base_Stop_IT>:
  * @brief  Stops the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop_IT(TIM_HandleTypeDef *htim)
{
 80099b4:	b480      	push	{r7}
 80099b6:	b083      	sub	sp, #12
 80099b8:	af00      	add	r7, sp, #0
 80099ba:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  
  /* Disable the TIM Update interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_UPDATE);
 80099bc:	687b      	ldr	r3, [r7, #4]
 80099be:	681b      	ldr	r3, [r3, #0]
 80099c0:	68da      	ldr	r2, [r3, #12]
 80099c2:	687b      	ldr	r3, [r7, #4]
 80099c4:	681b      	ldr	r3, [r3, #0]
 80099c6:	f022 0201 	bic.w	r2, r2, #1
 80099ca:	60da      	str	r2, [r3, #12]

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 80099cc:	687b      	ldr	r3, [r7, #4]
 80099ce:	681b      	ldr	r3, [r3, #0]
 80099d0:	6a1a      	ldr	r2, [r3, #32]
 80099d2:	f241 1311 	movw	r3, #4369	; 0x1111
 80099d6:	4013      	ands	r3, r2
 80099d8:	2b00      	cmp	r3, #0
 80099da:	d10f      	bne.n	80099fc <HAL_TIM_Base_Stop_IT+0x48>
 80099dc:	687b      	ldr	r3, [r7, #4]
 80099de:	681b      	ldr	r3, [r3, #0]
 80099e0:	6a1a      	ldr	r2, [r3, #32]
 80099e2:	f244 4344 	movw	r3, #17476	; 0x4444
 80099e6:	4013      	ands	r3, r2
 80099e8:	2b00      	cmp	r3, #0
 80099ea:	d107      	bne.n	80099fc <HAL_TIM_Base_Stop_IT+0x48>
 80099ec:	687b      	ldr	r3, [r7, #4]
 80099ee:	681b      	ldr	r3, [r3, #0]
 80099f0:	681a      	ldr	r2, [r3, #0]
 80099f2:	687b      	ldr	r3, [r7, #4]
 80099f4:	681b      	ldr	r3, [r3, #0]
 80099f6:	f022 0201 	bic.w	r2, r2, #1
 80099fa:	601a      	str	r2, [r3, #0]

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 80099fc:	687b      	ldr	r3, [r7, #4]
 80099fe:	2201      	movs	r2, #1
 8009a00:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Return function status */
  return HAL_OK;
 8009a04:	2300      	movs	r3, #0
}
 8009a06:	4618      	mov	r0, r3
 8009a08:	370c      	adds	r7, #12
 8009a0a:	46bd      	mov	sp, r7
 8009a0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a10:	4770      	bx	lr

08009a12 <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim,  TIM_Encoder_InitTypeDef *sConfig)
{
 8009a12:	b580      	push	{r7, lr}
 8009a14:	b086      	sub	sp, #24
 8009a16:	af00      	add	r7, sp, #0
 8009a18:	6078      	str	r0, [r7, #4]
 8009a1a:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 8009a1c:	687b      	ldr	r3, [r7, #4]
 8009a1e:	2b00      	cmp	r3, #0
 8009a20:	d101      	bne.n	8009a26 <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 8009a22:	2301      	movs	r3, #1
 8009a24:	e097      	b.n	8009b56 <HAL_TIM_Encoder_Init+0x144>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC1Prescaler));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));

  if (htim->State == HAL_TIM_STATE_RESET)
 8009a26:	687b      	ldr	r3, [r7, #4]
 8009a28:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8009a2c:	b2db      	uxtb	r3, r3
 8009a2e:	2b00      	cmp	r3, #0
 8009a30:	d106      	bne.n	8009a40 <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8009a32:	687b      	ldr	r3, [r7, #4]
 8009a34:	2200      	movs	r2, #0
 8009a36:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 8009a3a:	6878      	ldr	r0, [r7, #4]
 8009a3c:	f7fb fd4c 	bl	80054d8 <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8009a40:	687b      	ldr	r3, [r7, #4]
 8009a42:	2202      	movs	r2, #2
 8009a44:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 8009a48:	687b      	ldr	r3, [r7, #4]
 8009a4a:	681b      	ldr	r3, [r3, #0]
 8009a4c:	689b      	ldr	r3, [r3, #8]
 8009a4e:	687a      	ldr	r2, [r7, #4]
 8009a50:	6812      	ldr	r2, [r2, #0]
 8009a52:	f423 33a0 	bic.w	r3, r3, #81920	; 0x14000
 8009a56:	f023 0307 	bic.w	r3, r3, #7
 8009a5a:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8009a5c:	687b      	ldr	r3, [r7, #4]
 8009a5e:	681a      	ldr	r2, [r3, #0]
 8009a60:	687b      	ldr	r3, [r7, #4]
 8009a62:	3304      	adds	r3, #4
 8009a64:	4619      	mov	r1, r3
 8009a66:	4610      	mov	r0, r2
 8009a68:	f000 fb5c 	bl	800a124 <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8009a6c:	687b      	ldr	r3, [r7, #4]
 8009a6e:	681b      	ldr	r3, [r3, #0]
 8009a70:	689b      	ldr	r3, [r3, #8]
 8009a72:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 8009a74:	687b      	ldr	r3, [r7, #4]
 8009a76:	681b      	ldr	r3, [r3, #0]
 8009a78:	699b      	ldr	r3, [r3, #24]
 8009a7a:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 8009a7c:	687b      	ldr	r3, [r7, #4]
 8009a7e:	681b      	ldr	r3, [r3, #0]
 8009a80:	6a1b      	ldr	r3, [r3, #32]
 8009a82:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 8009a84:	683b      	ldr	r3, [r7, #0]
 8009a86:	681b      	ldr	r3, [r3, #0]
 8009a88:	697a      	ldr	r2, [r7, #20]
 8009a8a:	4313      	orrs	r3, r2
 8009a8c:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 8009a8e:	693b      	ldr	r3, [r7, #16]
 8009a90:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8009a94:	f023 0303 	bic.w	r3, r3, #3
 8009a98:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 8009a9a:	683b      	ldr	r3, [r7, #0]
 8009a9c:	689a      	ldr	r2, [r3, #8]
 8009a9e:	683b      	ldr	r3, [r7, #0]
 8009aa0:	699b      	ldr	r3, [r3, #24]
 8009aa2:	021b      	lsls	r3, r3, #8
 8009aa4:	4313      	orrs	r3, r2
 8009aa6:	693a      	ldr	r2, [r7, #16]
 8009aa8:	4313      	orrs	r3, r2
 8009aaa:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 8009aac:	693b      	ldr	r3, [r7, #16]
 8009aae:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 8009ab2:	f023 030c 	bic.w	r3, r3, #12
 8009ab6:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 8009ab8:	693b      	ldr	r3, [r7, #16]
 8009aba:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8009abe:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8009ac2:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 8009ac4:	683b      	ldr	r3, [r7, #0]
 8009ac6:	68da      	ldr	r2, [r3, #12]
 8009ac8:	683b      	ldr	r3, [r7, #0]
 8009aca:	69db      	ldr	r3, [r3, #28]
 8009acc:	021b      	lsls	r3, r3, #8
 8009ace:	4313      	orrs	r3, r2
 8009ad0:	693a      	ldr	r2, [r7, #16]
 8009ad2:	4313      	orrs	r3, r2
 8009ad4:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 8009ad6:	683b      	ldr	r3, [r7, #0]
 8009ad8:	691b      	ldr	r3, [r3, #16]
 8009ada:	011a      	lsls	r2, r3, #4
 8009adc:	683b      	ldr	r3, [r7, #0]
 8009ade:	6a1b      	ldr	r3, [r3, #32]
 8009ae0:	031b      	lsls	r3, r3, #12
 8009ae2:	4313      	orrs	r3, r2
 8009ae4:	693a      	ldr	r2, [r7, #16]
 8009ae6:	4313      	orrs	r3, r2
 8009ae8:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 8009aea:	68fb      	ldr	r3, [r7, #12]
 8009aec:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 8009af0:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 8009af2:	68fb      	ldr	r3, [r7, #12]
 8009af4:	f023 0388 	bic.w	r3, r3, #136	; 0x88
 8009af8:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 8009afa:	683b      	ldr	r3, [r7, #0]
 8009afc:	685a      	ldr	r2, [r3, #4]
 8009afe:	683b      	ldr	r3, [r7, #0]
 8009b00:	695b      	ldr	r3, [r3, #20]
 8009b02:	011b      	lsls	r3, r3, #4
 8009b04:	4313      	orrs	r3, r2
 8009b06:	68fa      	ldr	r2, [r7, #12]
 8009b08:	4313      	orrs	r3, r2
 8009b0a:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8009b0c:	687b      	ldr	r3, [r7, #4]
 8009b0e:	681b      	ldr	r3, [r3, #0]
 8009b10:	697a      	ldr	r2, [r7, #20]
 8009b12:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 8009b14:	687b      	ldr	r3, [r7, #4]
 8009b16:	681b      	ldr	r3, [r3, #0]
 8009b18:	693a      	ldr	r2, [r7, #16]
 8009b1a:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 8009b1c:	687b      	ldr	r3, [r7, #4]
 8009b1e:	681b      	ldr	r3, [r3, #0]
 8009b20:	68fa      	ldr	r2, [r7, #12]
 8009b22:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8009b24:	687b      	ldr	r3, [r7, #4]
 8009b26:	2201      	movs	r2, #1
 8009b28:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8009b2c:	687b      	ldr	r3, [r7, #4]
 8009b2e:	2201      	movs	r2, #1
 8009b30:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8009b34:	687b      	ldr	r3, [r7, #4]
 8009b36:	2201      	movs	r2, #1
 8009b38:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8009b3c:	687b      	ldr	r3, [r7, #4]
 8009b3e:	2201      	movs	r2, #1
 8009b40:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8009b44:	687b      	ldr	r3, [r7, #4]
 8009b46:	2201      	movs	r2, #1
 8009b48:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8009b4c:	687b      	ldr	r3, [r7, #4]
 8009b4e:	2201      	movs	r2, #1
 8009b50:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8009b54:	2300      	movs	r3, #0
}
 8009b56:	4618      	mov	r0, r3
 8009b58:	3718      	adds	r7, #24
 8009b5a:	46bd      	mov	sp, r7
 8009b5c:	bd80      	pop	{r7, pc}

08009b5e <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8009b5e:	b580      	push	{r7, lr}
 8009b60:	b082      	sub	sp, #8
 8009b62:	af00      	add	r7, sp, #0
 8009b64:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8009b66:	687b      	ldr	r3, [r7, #4]
 8009b68:	681b      	ldr	r3, [r3, #0]
 8009b6a:	691b      	ldr	r3, [r3, #16]
 8009b6c:	f003 0302 	and.w	r3, r3, #2
 8009b70:	2b02      	cmp	r3, #2
 8009b72:	d122      	bne.n	8009bba <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8009b74:	687b      	ldr	r3, [r7, #4]
 8009b76:	681b      	ldr	r3, [r3, #0]
 8009b78:	68db      	ldr	r3, [r3, #12]
 8009b7a:	f003 0302 	and.w	r3, r3, #2
 8009b7e:	2b02      	cmp	r3, #2
 8009b80:	d11b      	bne.n	8009bba <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8009b82:	687b      	ldr	r3, [r7, #4]
 8009b84:	681b      	ldr	r3, [r3, #0]
 8009b86:	f06f 0202 	mvn.w	r2, #2
 8009b8a:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8009b8c:	687b      	ldr	r3, [r7, #4]
 8009b8e:	2201      	movs	r2, #1
 8009b90:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8009b92:	687b      	ldr	r3, [r7, #4]
 8009b94:	681b      	ldr	r3, [r3, #0]
 8009b96:	699b      	ldr	r3, [r3, #24]
 8009b98:	f003 0303 	and.w	r3, r3, #3
 8009b9c:	2b00      	cmp	r3, #0
 8009b9e:	d003      	beq.n	8009ba8 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8009ba0:	6878      	ldr	r0, [r7, #4]
 8009ba2:	f000 faa1 	bl	800a0e8 <HAL_TIM_IC_CaptureCallback>
 8009ba6:	e005      	b.n	8009bb4 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8009ba8:	6878      	ldr	r0, [r7, #4]
 8009baa:	f000 fa93 	bl	800a0d4 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8009bae:	6878      	ldr	r0, [r7, #4]
 8009bb0:	f000 faa4 	bl	800a0fc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8009bb4:	687b      	ldr	r3, [r7, #4]
 8009bb6:	2200      	movs	r2, #0
 8009bb8:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8009bba:	687b      	ldr	r3, [r7, #4]
 8009bbc:	681b      	ldr	r3, [r3, #0]
 8009bbe:	691b      	ldr	r3, [r3, #16]
 8009bc0:	f003 0304 	and.w	r3, r3, #4
 8009bc4:	2b04      	cmp	r3, #4
 8009bc6:	d122      	bne.n	8009c0e <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8009bc8:	687b      	ldr	r3, [r7, #4]
 8009bca:	681b      	ldr	r3, [r3, #0]
 8009bcc:	68db      	ldr	r3, [r3, #12]
 8009bce:	f003 0304 	and.w	r3, r3, #4
 8009bd2:	2b04      	cmp	r3, #4
 8009bd4:	d11b      	bne.n	8009c0e <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8009bd6:	687b      	ldr	r3, [r7, #4]
 8009bd8:	681b      	ldr	r3, [r3, #0]
 8009bda:	f06f 0204 	mvn.w	r2, #4
 8009bde:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8009be0:	687b      	ldr	r3, [r7, #4]
 8009be2:	2202      	movs	r2, #2
 8009be4:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8009be6:	687b      	ldr	r3, [r7, #4]
 8009be8:	681b      	ldr	r3, [r3, #0]
 8009bea:	699b      	ldr	r3, [r3, #24]
 8009bec:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8009bf0:	2b00      	cmp	r3, #0
 8009bf2:	d003      	beq.n	8009bfc <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8009bf4:	6878      	ldr	r0, [r7, #4]
 8009bf6:	f000 fa77 	bl	800a0e8 <HAL_TIM_IC_CaptureCallback>
 8009bfa:	e005      	b.n	8009c08 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8009bfc:	6878      	ldr	r0, [r7, #4]
 8009bfe:	f000 fa69 	bl	800a0d4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8009c02:	6878      	ldr	r0, [r7, #4]
 8009c04:	f000 fa7a 	bl	800a0fc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8009c08:	687b      	ldr	r3, [r7, #4]
 8009c0a:	2200      	movs	r2, #0
 8009c0c:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8009c0e:	687b      	ldr	r3, [r7, #4]
 8009c10:	681b      	ldr	r3, [r3, #0]
 8009c12:	691b      	ldr	r3, [r3, #16]
 8009c14:	f003 0308 	and.w	r3, r3, #8
 8009c18:	2b08      	cmp	r3, #8
 8009c1a:	d122      	bne.n	8009c62 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8009c1c:	687b      	ldr	r3, [r7, #4]
 8009c1e:	681b      	ldr	r3, [r3, #0]
 8009c20:	68db      	ldr	r3, [r3, #12]
 8009c22:	f003 0308 	and.w	r3, r3, #8
 8009c26:	2b08      	cmp	r3, #8
 8009c28:	d11b      	bne.n	8009c62 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8009c2a:	687b      	ldr	r3, [r7, #4]
 8009c2c:	681b      	ldr	r3, [r3, #0]
 8009c2e:	f06f 0208 	mvn.w	r2, #8
 8009c32:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8009c34:	687b      	ldr	r3, [r7, #4]
 8009c36:	2204      	movs	r2, #4
 8009c38:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8009c3a:	687b      	ldr	r3, [r7, #4]
 8009c3c:	681b      	ldr	r3, [r3, #0]
 8009c3e:	69db      	ldr	r3, [r3, #28]
 8009c40:	f003 0303 	and.w	r3, r3, #3
 8009c44:	2b00      	cmp	r3, #0
 8009c46:	d003      	beq.n	8009c50 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8009c48:	6878      	ldr	r0, [r7, #4]
 8009c4a:	f000 fa4d 	bl	800a0e8 <HAL_TIM_IC_CaptureCallback>
 8009c4e:	e005      	b.n	8009c5c <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8009c50:	6878      	ldr	r0, [r7, #4]
 8009c52:	f000 fa3f 	bl	800a0d4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8009c56:	6878      	ldr	r0, [r7, #4]
 8009c58:	f000 fa50 	bl	800a0fc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8009c5c:	687b      	ldr	r3, [r7, #4]
 8009c5e:	2200      	movs	r2, #0
 8009c60:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8009c62:	687b      	ldr	r3, [r7, #4]
 8009c64:	681b      	ldr	r3, [r3, #0]
 8009c66:	691b      	ldr	r3, [r3, #16]
 8009c68:	f003 0310 	and.w	r3, r3, #16
 8009c6c:	2b10      	cmp	r3, #16
 8009c6e:	d122      	bne.n	8009cb6 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8009c70:	687b      	ldr	r3, [r7, #4]
 8009c72:	681b      	ldr	r3, [r3, #0]
 8009c74:	68db      	ldr	r3, [r3, #12]
 8009c76:	f003 0310 	and.w	r3, r3, #16
 8009c7a:	2b10      	cmp	r3, #16
 8009c7c:	d11b      	bne.n	8009cb6 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8009c7e:	687b      	ldr	r3, [r7, #4]
 8009c80:	681b      	ldr	r3, [r3, #0]
 8009c82:	f06f 0210 	mvn.w	r2, #16
 8009c86:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8009c88:	687b      	ldr	r3, [r7, #4]
 8009c8a:	2208      	movs	r2, #8
 8009c8c:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8009c8e:	687b      	ldr	r3, [r7, #4]
 8009c90:	681b      	ldr	r3, [r3, #0]
 8009c92:	69db      	ldr	r3, [r3, #28]
 8009c94:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8009c98:	2b00      	cmp	r3, #0
 8009c9a:	d003      	beq.n	8009ca4 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8009c9c:	6878      	ldr	r0, [r7, #4]
 8009c9e:	f000 fa23 	bl	800a0e8 <HAL_TIM_IC_CaptureCallback>
 8009ca2:	e005      	b.n	8009cb0 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8009ca4:	6878      	ldr	r0, [r7, #4]
 8009ca6:	f000 fa15 	bl	800a0d4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8009caa:	6878      	ldr	r0, [r7, #4]
 8009cac:	f000 fa26 	bl	800a0fc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8009cb0:	687b      	ldr	r3, [r7, #4]
 8009cb2:	2200      	movs	r2, #0
 8009cb4:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8009cb6:	687b      	ldr	r3, [r7, #4]
 8009cb8:	681b      	ldr	r3, [r3, #0]
 8009cba:	691b      	ldr	r3, [r3, #16]
 8009cbc:	f003 0301 	and.w	r3, r3, #1
 8009cc0:	2b01      	cmp	r3, #1
 8009cc2:	d10e      	bne.n	8009ce2 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8009cc4:	687b      	ldr	r3, [r7, #4]
 8009cc6:	681b      	ldr	r3, [r3, #0]
 8009cc8:	68db      	ldr	r3, [r3, #12]
 8009cca:	f003 0301 	and.w	r3, r3, #1
 8009cce:	2b01      	cmp	r3, #1
 8009cd0:	d107      	bne.n	8009ce2 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8009cd2:	687b      	ldr	r3, [r7, #4]
 8009cd4:	681b      	ldr	r3, [r3, #0]
 8009cd6:	f06f 0201 	mvn.w	r2, #1
 8009cda:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8009cdc:	6878      	ldr	r0, [r7, #4]
 8009cde:	f000 f9ef 	bl	800a0c0 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8009ce2:	687b      	ldr	r3, [r7, #4]
 8009ce4:	681b      	ldr	r3, [r3, #0]
 8009ce6:	691b      	ldr	r3, [r3, #16]
 8009ce8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009cec:	2b80      	cmp	r3, #128	; 0x80
 8009cee:	d10e      	bne.n	8009d0e <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8009cf0:	687b      	ldr	r3, [r7, #4]
 8009cf2:	681b      	ldr	r3, [r3, #0]
 8009cf4:	68db      	ldr	r3, [r3, #12]
 8009cf6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009cfa:	2b80      	cmp	r3, #128	; 0x80
 8009cfc:	d107      	bne.n	8009d0e <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8009cfe:	687b      	ldr	r3, [r7, #4]
 8009d00:	681b      	ldr	r3, [r3, #0]
 8009d02:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8009d06:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8009d08:	6878      	ldr	r0, [r7, #4]
 8009d0a:	f000 fd5d 	bl	800a7c8 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8009d0e:	687b      	ldr	r3, [r7, #4]
 8009d10:	681b      	ldr	r3, [r3, #0]
 8009d12:	691b      	ldr	r3, [r3, #16]
 8009d14:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009d18:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8009d1c:	d10e      	bne.n	8009d3c <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8009d1e:	687b      	ldr	r3, [r7, #4]
 8009d20:	681b      	ldr	r3, [r3, #0]
 8009d22:	68db      	ldr	r3, [r3, #12]
 8009d24:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009d28:	2b80      	cmp	r3, #128	; 0x80
 8009d2a:	d107      	bne.n	8009d3c <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8009d2c:	687b      	ldr	r3, [r7, #4]
 8009d2e:	681b      	ldr	r3, [r3, #0]
 8009d30:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8009d34:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8009d36:	6878      	ldr	r0, [r7, #4]
 8009d38:	f000 fd50 	bl	800a7dc <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8009d3c:	687b      	ldr	r3, [r7, #4]
 8009d3e:	681b      	ldr	r3, [r3, #0]
 8009d40:	691b      	ldr	r3, [r3, #16]
 8009d42:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009d46:	2b40      	cmp	r3, #64	; 0x40
 8009d48:	d10e      	bne.n	8009d68 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8009d4a:	687b      	ldr	r3, [r7, #4]
 8009d4c:	681b      	ldr	r3, [r3, #0]
 8009d4e:	68db      	ldr	r3, [r3, #12]
 8009d50:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009d54:	2b40      	cmp	r3, #64	; 0x40
 8009d56:	d107      	bne.n	8009d68 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8009d58:	687b      	ldr	r3, [r7, #4]
 8009d5a:	681b      	ldr	r3, [r3, #0]
 8009d5c:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8009d60:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8009d62:	6878      	ldr	r0, [r7, #4]
 8009d64:	f000 f9d4 	bl	800a110 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8009d68:	687b      	ldr	r3, [r7, #4]
 8009d6a:	681b      	ldr	r3, [r3, #0]
 8009d6c:	691b      	ldr	r3, [r3, #16]
 8009d6e:	f003 0320 	and.w	r3, r3, #32
 8009d72:	2b20      	cmp	r3, #32
 8009d74:	d10e      	bne.n	8009d94 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8009d76:	687b      	ldr	r3, [r7, #4]
 8009d78:	681b      	ldr	r3, [r3, #0]
 8009d7a:	68db      	ldr	r3, [r3, #12]
 8009d7c:	f003 0320 	and.w	r3, r3, #32
 8009d80:	2b20      	cmp	r3, #32
 8009d82:	d107      	bne.n	8009d94 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8009d84:	687b      	ldr	r3, [r7, #4]
 8009d86:	681b      	ldr	r3, [r3, #0]
 8009d88:	f06f 0220 	mvn.w	r2, #32
 8009d8c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8009d8e:	6878      	ldr	r0, [r7, #4]
 8009d90:	f000 fd10 	bl	800a7b4 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Encoder index event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_IDX) != RESET)
 8009d94:	687b      	ldr	r3, [r7, #4]
 8009d96:	681b      	ldr	r3, [r3, #0]
 8009d98:	691b      	ldr	r3, [r3, #16]
 8009d9a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8009d9e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8009da2:	d10f      	bne.n	8009dc4 <HAL_TIM_IRQHandler+0x266>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_IDX) != RESET)
 8009da4:	687b      	ldr	r3, [r7, #4]
 8009da6:	681b      	ldr	r3, [r3, #0]
 8009da8:	68db      	ldr	r3, [r3, #12]
 8009daa:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8009dae:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8009db2:	d107      	bne.n	8009dc4 <HAL_TIM_IRQHandler+0x266>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_IDX);
 8009db4:	687b      	ldr	r3, [r7, #4]
 8009db6:	681b      	ldr	r3, [r3, #0]
 8009db8:	f46f 1280 	mvn.w	r2, #1048576	; 0x100000
 8009dbc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->EncoderIndexCallback(htim);
#else
      HAL_TIMEx_EncoderIndexCallback(htim);
 8009dbe:	6878      	ldr	r0, [r7, #4]
 8009dc0:	f000 fd16 	bl	800a7f0 <HAL_TIMEx_EncoderIndexCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Direction change event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_DIR) != RESET)
 8009dc4:	687b      	ldr	r3, [r7, #4]
 8009dc6:	681b      	ldr	r3, [r3, #0]
 8009dc8:	691b      	ldr	r3, [r3, #16]
 8009dca:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8009dce:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8009dd2:	d10f      	bne.n	8009df4 <HAL_TIM_IRQHandler+0x296>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_DIR) != RESET)
 8009dd4:	687b      	ldr	r3, [r7, #4]
 8009dd6:	681b      	ldr	r3, [r3, #0]
 8009dd8:	68db      	ldr	r3, [r3, #12]
 8009dda:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8009dde:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8009de2:	d107      	bne.n	8009df4 <HAL_TIM_IRQHandler+0x296>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_DIR);
 8009de4:	687b      	ldr	r3, [r7, #4]
 8009de6:	681b      	ldr	r3, [r3, #0]
 8009de8:	f46f 1200 	mvn.w	r2, #2097152	; 0x200000
 8009dec:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->DirectionChangeCallback(htim);
#else
      HAL_TIMEx_DirectionChangeCallback(htim);
 8009dee:	6878      	ldr	r0, [r7, #4]
 8009df0:	f000 fd08 	bl	800a804 <HAL_TIMEx_DirectionChangeCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Index error event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_IERR) != RESET)
 8009df4:	687b      	ldr	r3, [r7, #4]
 8009df6:	681b      	ldr	r3, [r3, #0]
 8009df8:	691b      	ldr	r3, [r3, #16]
 8009dfa:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8009dfe:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8009e02:	d10f      	bne.n	8009e24 <HAL_TIM_IRQHandler+0x2c6>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_IERR) != RESET)
 8009e04:	687b      	ldr	r3, [r7, #4]
 8009e06:	681b      	ldr	r3, [r3, #0]
 8009e08:	68db      	ldr	r3, [r3, #12]
 8009e0a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8009e0e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8009e12:	d107      	bne.n	8009e24 <HAL_TIM_IRQHandler+0x2c6>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_IERR);
 8009e14:	687b      	ldr	r3, [r7, #4]
 8009e16:	681b      	ldr	r3, [r3, #0]
 8009e18:	f46f 0280 	mvn.w	r2, #4194304	; 0x400000
 8009e1c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->IndexErrorCallback(htim);
#else
      HAL_TIMEx_IndexErrorCallback(htim);
 8009e1e:	6878      	ldr	r0, [r7, #4]
 8009e20:	f000 fcfa 	bl	800a818 <HAL_TIMEx_IndexErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Transition error event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TERR) != RESET)
 8009e24:	687b      	ldr	r3, [r7, #4]
 8009e26:	681b      	ldr	r3, [r3, #0]
 8009e28:	691b      	ldr	r3, [r3, #16]
 8009e2a:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8009e2e:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8009e32:	d10f      	bne.n	8009e54 <HAL_TIM_IRQHandler+0x2f6>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TERR) != RESET)
 8009e34:	687b      	ldr	r3, [r7, #4]
 8009e36:	681b      	ldr	r3, [r3, #0]
 8009e38:	68db      	ldr	r3, [r3, #12]
 8009e3a:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8009e3e:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8009e42:	d107      	bne.n	8009e54 <HAL_TIM_IRQHandler+0x2f6>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_TERR);
 8009e44:	687b      	ldr	r3, [r7, #4]
 8009e46:	681b      	ldr	r3, [r3, #0]
 8009e48:	f46f 0200 	mvn.w	r2, #8388608	; 0x800000
 8009e4c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TransitionErrorCallback(htim);
#else
      HAL_TIMEx_TransitionErrorCallback(htim);
 8009e4e:	6878      	ldr	r0, [r7, #4]
 8009e50:	f000 fcec 	bl	800a82c <HAL_TIMEx_TransitionErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8009e54:	bf00      	nop
 8009e56:	3708      	adds	r7, #8
 8009e58:	46bd      	mov	sp, r7
 8009e5a:	bd80      	pop	{r7, pc}

08009e5c <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8009e5c:	b580      	push	{r7, lr}
 8009e5e:	b084      	sub	sp, #16
 8009e60:	af00      	add	r7, sp, #0
 8009e62:	6078      	str	r0, [r7, #4]
 8009e64:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8009e66:	687b      	ldr	r3, [r7, #4]
 8009e68:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8009e6c:	2b01      	cmp	r3, #1
 8009e6e:	d101      	bne.n	8009e74 <HAL_TIM_ConfigClockSource+0x18>
 8009e70:	2302      	movs	r3, #2
 8009e72:	e0d2      	b.n	800a01a <HAL_TIM_ConfigClockSource+0x1be>
 8009e74:	687b      	ldr	r3, [r7, #4]
 8009e76:	2201      	movs	r2, #1
 8009e78:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8009e7c:	687b      	ldr	r3, [r7, #4]
 8009e7e:	2202      	movs	r2, #2
 8009e80:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8009e84:	687b      	ldr	r3, [r7, #4]
 8009e86:	681b      	ldr	r3, [r3, #0]
 8009e88:	689b      	ldr	r3, [r3, #8]
 8009e8a:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8009e8c:	68fb      	ldr	r3, [r7, #12]
 8009e8e:	f423 1344 	bic.w	r3, r3, #3211264	; 0x310000
 8009e92:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8009e96:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8009e98:	68fb      	ldr	r3, [r7, #12]
 8009e9a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8009e9e:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8009ea0:	687b      	ldr	r3, [r7, #4]
 8009ea2:	681b      	ldr	r3, [r3, #0]
 8009ea4:	68fa      	ldr	r2, [r7, #12]
 8009ea6:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8009ea8:	683b      	ldr	r3, [r7, #0]
 8009eaa:	681b      	ldr	r3, [r3, #0]
 8009eac:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8009eb0:	f000 80a9 	beq.w	800a006 <HAL_TIM_ConfigClockSource+0x1aa>
 8009eb4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8009eb8:	d81a      	bhi.n	8009ef0 <HAL_TIM_ConfigClockSource+0x94>
 8009eba:	2b30      	cmp	r3, #48	; 0x30
 8009ebc:	f000 809a 	beq.w	8009ff4 <HAL_TIM_ConfigClockSource+0x198>
 8009ec0:	2b30      	cmp	r3, #48	; 0x30
 8009ec2:	d809      	bhi.n	8009ed8 <HAL_TIM_ConfigClockSource+0x7c>
 8009ec4:	2b10      	cmp	r3, #16
 8009ec6:	f000 8095 	beq.w	8009ff4 <HAL_TIM_ConfigClockSource+0x198>
 8009eca:	2b20      	cmp	r3, #32
 8009ecc:	f000 8092 	beq.w	8009ff4 <HAL_TIM_ConfigClockSource+0x198>
 8009ed0:	2b00      	cmp	r3, #0
 8009ed2:	f000 808f 	beq.w	8009ff4 <HAL_TIM_ConfigClockSource+0x198>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
      break;
    }

    default:
      break;
 8009ed6:	e097      	b.n	800a008 <HAL_TIM_ConfigClockSource+0x1ac>
  switch (sClockSourceConfig->ClockSource)
 8009ed8:	2b50      	cmp	r3, #80	; 0x50
 8009eda:	d05b      	beq.n	8009f94 <HAL_TIM_ConfigClockSource+0x138>
 8009edc:	2b50      	cmp	r3, #80	; 0x50
 8009ede:	d802      	bhi.n	8009ee6 <HAL_TIM_ConfigClockSource+0x8a>
 8009ee0:	2b40      	cmp	r3, #64	; 0x40
 8009ee2:	d077      	beq.n	8009fd4 <HAL_TIM_ConfigClockSource+0x178>
      break;
 8009ee4:	e090      	b.n	800a008 <HAL_TIM_ConfigClockSource+0x1ac>
  switch (sClockSourceConfig->ClockSource)
 8009ee6:	2b60      	cmp	r3, #96	; 0x60
 8009ee8:	d064      	beq.n	8009fb4 <HAL_TIM_ConfigClockSource+0x158>
 8009eea:	2b70      	cmp	r3, #112	; 0x70
 8009eec:	d028      	beq.n	8009f40 <HAL_TIM_ConfigClockSource+0xe4>
      break;
 8009eee:	e08b      	b.n	800a008 <HAL_TIM_ConfigClockSource+0x1ac>
  switch (sClockSourceConfig->ClockSource)
 8009ef0:	4a4c      	ldr	r2, [pc, #304]	; (800a024 <HAL_TIM_ConfigClockSource+0x1c8>)
 8009ef2:	4293      	cmp	r3, r2
 8009ef4:	d07e      	beq.n	8009ff4 <HAL_TIM_ConfigClockSource+0x198>
 8009ef6:	4a4b      	ldr	r2, [pc, #300]	; (800a024 <HAL_TIM_ConfigClockSource+0x1c8>)
 8009ef8:	4293      	cmp	r3, r2
 8009efa:	d810      	bhi.n	8009f1e <HAL_TIM_ConfigClockSource+0xc2>
 8009efc:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8009f00:	d078      	beq.n	8009ff4 <HAL_TIM_ConfigClockSource+0x198>
 8009f02:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8009f06:	d803      	bhi.n	8009f10 <HAL_TIM_ConfigClockSource+0xb4>
 8009f08:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8009f0c:	d02f      	beq.n	8009f6e <HAL_TIM_ConfigClockSource+0x112>
      break;
 8009f0e:	e07b      	b.n	800a008 <HAL_TIM_ConfigClockSource+0x1ac>
  switch (sClockSourceConfig->ClockSource)
 8009f10:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 8009f14:	d06e      	beq.n	8009ff4 <HAL_TIM_ConfigClockSource+0x198>
 8009f16:	4a44      	ldr	r2, [pc, #272]	; (800a028 <HAL_TIM_ConfigClockSource+0x1cc>)
 8009f18:	4293      	cmp	r3, r2
 8009f1a:	d06b      	beq.n	8009ff4 <HAL_TIM_ConfigClockSource+0x198>
      break;
 8009f1c:	e074      	b.n	800a008 <HAL_TIM_ConfigClockSource+0x1ac>
  switch (sClockSourceConfig->ClockSource)
 8009f1e:	4a43      	ldr	r2, [pc, #268]	; (800a02c <HAL_TIM_ConfigClockSource+0x1d0>)
 8009f20:	4293      	cmp	r3, r2
 8009f22:	d067      	beq.n	8009ff4 <HAL_TIM_ConfigClockSource+0x198>
 8009f24:	4a41      	ldr	r2, [pc, #260]	; (800a02c <HAL_TIM_ConfigClockSource+0x1d0>)
 8009f26:	4293      	cmp	r3, r2
 8009f28:	d803      	bhi.n	8009f32 <HAL_TIM_ConfigClockSource+0xd6>
 8009f2a:	4a41      	ldr	r2, [pc, #260]	; (800a030 <HAL_TIM_ConfigClockSource+0x1d4>)
 8009f2c:	4293      	cmp	r3, r2
 8009f2e:	d061      	beq.n	8009ff4 <HAL_TIM_ConfigClockSource+0x198>
      break;
 8009f30:	e06a      	b.n	800a008 <HAL_TIM_ConfigClockSource+0x1ac>
  switch (sClockSourceConfig->ClockSource)
 8009f32:	4a40      	ldr	r2, [pc, #256]	; (800a034 <HAL_TIM_ConfigClockSource+0x1d8>)
 8009f34:	4293      	cmp	r3, r2
 8009f36:	d05d      	beq.n	8009ff4 <HAL_TIM_ConfigClockSource+0x198>
 8009f38:	4a3f      	ldr	r2, [pc, #252]	; (800a038 <HAL_TIM_ConfigClockSource+0x1dc>)
 8009f3a:	4293      	cmp	r3, r2
 8009f3c:	d05a      	beq.n	8009ff4 <HAL_TIM_ConfigClockSource+0x198>
      break;
 8009f3e:	e063      	b.n	800a008 <HAL_TIM_ConfigClockSource+0x1ac>
      TIM_ETR_SetConfig(htim->Instance,
 8009f40:	687b      	ldr	r3, [r7, #4]
 8009f42:	6818      	ldr	r0, [r3, #0]
 8009f44:	683b      	ldr	r3, [r7, #0]
 8009f46:	6899      	ldr	r1, [r3, #8]
 8009f48:	683b      	ldr	r3, [r7, #0]
 8009f4a:	685a      	ldr	r2, [r3, #4]
 8009f4c:	683b      	ldr	r3, [r7, #0]
 8009f4e:	68db      	ldr	r3, [r3, #12]
 8009f50:	f000 fac8 	bl	800a4e4 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8009f54:	687b      	ldr	r3, [r7, #4]
 8009f56:	681b      	ldr	r3, [r3, #0]
 8009f58:	689b      	ldr	r3, [r3, #8]
 8009f5a:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8009f5c:	68fb      	ldr	r3, [r7, #12]
 8009f5e:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8009f62:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 8009f64:	687b      	ldr	r3, [r7, #4]
 8009f66:	681b      	ldr	r3, [r3, #0]
 8009f68:	68fa      	ldr	r2, [r7, #12]
 8009f6a:	609a      	str	r2, [r3, #8]
      break;
 8009f6c:	e04c      	b.n	800a008 <HAL_TIM_ConfigClockSource+0x1ac>
      TIM_ETR_SetConfig(htim->Instance,
 8009f6e:	687b      	ldr	r3, [r7, #4]
 8009f70:	6818      	ldr	r0, [r3, #0]
 8009f72:	683b      	ldr	r3, [r7, #0]
 8009f74:	6899      	ldr	r1, [r3, #8]
 8009f76:	683b      	ldr	r3, [r7, #0]
 8009f78:	685a      	ldr	r2, [r3, #4]
 8009f7a:	683b      	ldr	r3, [r7, #0]
 8009f7c:	68db      	ldr	r3, [r3, #12]
 8009f7e:	f000 fab1 	bl	800a4e4 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8009f82:	687b      	ldr	r3, [r7, #4]
 8009f84:	681b      	ldr	r3, [r3, #0]
 8009f86:	689a      	ldr	r2, [r3, #8]
 8009f88:	687b      	ldr	r3, [r7, #4]
 8009f8a:	681b      	ldr	r3, [r3, #0]
 8009f8c:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8009f90:	609a      	str	r2, [r3, #8]
      break;
 8009f92:	e039      	b.n	800a008 <HAL_TIM_ConfigClockSource+0x1ac>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8009f94:	687b      	ldr	r3, [r7, #4]
 8009f96:	6818      	ldr	r0, [r3, #0]
 8009f98:	683b      	ldr	r3, [r7, #0]
 8009f9a:	6859      	ldr	r1, [r3, #4]
 8009f9c:	683b      	ldr	r3, [r7, #0]
 8009f9e:	68db      	ldr	r3, [r3, #12]
 8009fa0:	461a      	mov	r2, r3
 8009fa2:	f000 fa23 	bl	800a3ec <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8009fa6:	687b      	ldr	r3, [r7, #4]
 8009fa8:	681b      	ldr	r3, [r3, #0]
 8009faa:	2150      	movs	r1, #80	; 0x50
 8009fac:	4618      	mov	r0, r3
 8009fae:	f000 fa7c 	bl	800a4aa <TIM_ITRx_SetConfig>
      break;
 8009fb2:	e029      	b.n	800a008 <HAL_TIM_ConfigClockSource+0x1ac>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8009fb4:	687b      	ldr	r3, [r7, #4]
 8009fb6:	6818      	ldr	r0, [r3, #0]
 8009fb8:	683b      	ldr	r3, [r7, #0]
 8009fba:	6859      	ldr	r1, [r3, #4]
 8009fbc:	683b      	ldr	r3, [r7, #0]
 8009fbe:	68db      	ldr	r3, [r3, #12]
 8009fc0:	461a      	mov	r2, r3
 8009fc2:	f000 fa42 	bl	800a44a <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8009fc6:	687b      	ldr	r3, [r7, #4]
 8009fc8:	681b      	ldr	r3, [r3, #0]
 8009fca:	2160      	movs	r1, #96	; 0x60
 8009fcc:	4618      	mov	r0, r3
 8009fce:	f000 fa6c 	bl	800a4aa <TIM_ITRx_SetConfig>
      break;
 8009fd2:	e019      	b.n	800a008 <HAL_TIM_ConfigClockSource+0x1ac>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8009fd4:	687b      	ldr	r3, [r7, #4]
 8009fd6:	6818      	ldr	r0, [r3, #0]
 8009fd8:	683b      	ldr	r3, [r7, #0]
 8009fda:	6859      	ldr	r1, [r3, #4]
 8009fdc:	683b      	ldr	r3, [r7, #0]
 8009fde:	68db      	ldr	r3, [r3, #12]
 8009fe0:	461a      	mov	r2, r3
 8009fe2:	f000 fa03 	bl	800a3ec <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8009fe6:	687b      	ldr	r3, [r7, #4]
 8009fe8:	681b      	ldr	r3, [r3, #0]
 8009fea:	2140      	movs	r1, #64	; 0x40
 8009fec:	4618      	mov	r0, r3
 8009fee:	f000 fa5c 	bl	800a4aa <TIM_ITRx_SetConfig>
      break;
 8009ff2:	e009      	b.n	800a008 <HAL_TIM_ConfigClockSource+0x1ac>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8009ff4:	687b      	ldr	r3, [r7, #4]
 8009ff6:	681a      	ldr	r2, [r3, #0]
 8009ff8:	683b      	ldr	r3, [r7, #0]
 8009ffa:	681b      	ldr	r3, [r3, #0]
 8009ffc:	4619      	mov	r1, r3
 8009ffe:	4610      	mov	r0, r2
 800a000:	f000 fa53 	bl	800a4aa <TIM_ITRx_SetConfig>
      break;
 800a004:	e000      	b.n	800a008 <HAL_TIM_ConfigClockSource+0x1ac>
      break;
 800a006:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800a008:	687b      	ldr	r3, [r7, #4]
 800a00a:	2201      	movs	r2, #1
 800a00c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800a010:	687b      	ldr	r3, [r7, #4]
 800a012:	2200      	movs	r2, #0
 800a014:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800a018:	2300      	movs	r3, #0
}
 800a01a:	4618      	mov	r0, r3
 800a01c:	3710      	adds	r7, #16
 800a01e:	46bd      	mov	sp, r7
 800a020:	bd80      	pop	{r7, pc}
 800a022:	bf00      	nop
 800a024:	00100030 	.word	0x00100030
 800a028:	00100020 	.word	0x00100020
 800a02c:	00100050 	.word	0x00100050
 800a030:	00100040 	.word	0x00100040
 800a034:	00100060 	.word	0x00100060
 800a038:	00100070 	.word	0x00100070

0800a03c <HAL_TIM_SlaveConfigSynchro>:
  *         timer input or external trigger input) and the Slave mode
  *         (Disable, Reset, Gated, Trigger, External clock mode 1, Reset + Trigger, Gated + Reset).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_SlaveConfigSynchro(TIM_HandleTypeDef *htim, TIM_SlaveConfigTypeDef *sSlaveConfig)
{
 800a03c:	b580      	push	{r7, lr}
 800a03e:	b082      	sub	sp, #8
 800a040:	af00      	add	r7, sp, #0
 800a042:	6078      	str	r0, [r7, #4]
 800a044:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_SLAVE_INSTANCE(htim->Instance));
  assert_param(IS_TIM_SLAVE_MODE(sSlaveConfig->SlaveMode));
  assert_param(IS_TIM_TRIGGER_INSTANCE(htim->Instance, sSlaveConfig->InputTrigger));

  __HAL_LOCK(htim);
 800a046:	687b      	ldr	r3, [r7, #4]
 800a048:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800a04c:	2b01      	cmp	r3, #1
 800a04e:	d101      	bne.n	800a054 <HAL_TIM_SlaveConfigSynchro+0x18>
 800a050:	2302      	movs	r3, #2
 800a052:	e031      	b.n	800a0b8 <HAL_TIM_SlaveConfigSynchro+0x7c>
 800a054:	687b      	ldr	r3, [r7, #4]
 800a056:	2201      	movs	r2, #1
 800a058:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800a05c:	687b      	ldr	r3, [r7, #4]
 800a05e:	2202      	movs	r2, #2
 800a060:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  if (TIM_SlaveTimer_SetConfig(htim, sSlaveConfig) != HAL_OK)
 800a064:	6839      	ldr	r1, [r7, #0]
 800a066:	6878      	ldr	r0, [r7, #4]
 800a068:	f000 f904 	bl	800a274 <TIM_SlaveTimer_SetConfig>
 800a06c:	4603      	mov	r3, r0
 800a06e:	2b00      	cmp	r3, #0
 800a070:	d009      	beq.n	800a086 <HAL_TIM_SlaveConfigSynchro+0x4a>
  {
    htim->State = HAL_TIM_STATE_READY;
 800a072:	687b      	ldr	r3, [r7, #4]
 800a074:	2201      	movs	r2, #1
 800a076:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    __HAL_UNLOCK(htim);
 800a07a:	687b      	ldr	r3, [r7, #4]
 800a07c:	2200      	movs	r2, #0
 800a07e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    return HAL_ERROR;
 800a082:	2301      	movs	r3, #1
 800a084:	e018      	b.n	800a0b8 <HAL_TIM_SlaveConfigSynchro+0x7c>
  }

  /* Disable Trigger Interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_TRIGGER);
 800a086:	687b      	ldr	r3, [r7, #4]
 800a088:	681b      	ldr	r3, [r3, #0]
 800a08a:	68da      	ldr	r2, [r3, #12]
 800a08c:	687b      	ldr	r3, [r7, #4]
 800a08e:	681b      	ldr	r3, [r3, #0]
 800a090:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800a094:	60da      	str	r2, [r3, #12]

  /* Disable Trigger DMA request */
  __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_TRIGGER);
 800a096:	687b      	ldr	r3, [r7, #4]
 800a098:	681b      	ldr	r3, [r3, #0]
 800a09a:	68da      	ldr	r2, [r3, #12]
 800a09c:	687b      	ldr	r3, [r7, #4]
 800a09e:	681b      	ldr	r3, [r3, #0]
 800a0a0:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 800a0a4:	60da      	str	r2, [r3, #12]

  htim->State = HAL_TIM_STATE_READY;
 800a0a6:	687b      	ldr	r3, [r7, #4]
 800a0a8:	2201      	movs	r2, #1
 800a0aa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800a0ae:	687b      	ldr	r3, [r7, #4]
 800a0b0:	2200      	movs	r2, #0
 800a0b2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800a0b6:	2300      	movs	r3, #0
}
 800a0b8:	4618      	mov	r0, r3
 800a0ba:	3708      	adds	r7, #8
 800a0bc:	46bd      	mov	sp, r7
 800a0be:	bd80      	pop	{r7, pc}

0800a0c0 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 800a0c0:	b480      	push	{r7}
 800a0c2:	b083      	sub	sp, #12
 800a0c4:	af00      	add	r7, sp, #0
 800a0c6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 800a0c8:	bf00      	nop
 800a0ca:	370c      	adds	r7, #12
 800a0cc:	46bd      	mov	sp, r7
 800a0ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a0d2:	4770      	bx	lr

0800a0d4 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800a0d4:	b480      	push	{r7}
 800a0d6:	b083      	sub	sp, #12
 800a0d8:	af00      	add	r7, sp, #0
 800a0da:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800a0dc:	bf00      	nop
 800a0de:	370c      	adds	r7, #12
 800a0e0:	46bd      	mov	sp, r7
 800a0e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a0e6:	4770      	bx	lr

0800a0e8 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800a0e8:	b480      	push	{r7}
 800a0ea:	b083      	sub	sp, #12
 800a0ec:	af00      	add	r7, sp, #0
 800a0ee:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800a0f0:	bf00      	nop
 800a0f2:	370c      	adds	r7, #12
 800a0f4:	46bd      	mov	sp, r7
 800a0f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a0fa:	4770      	bx	lr

0800a0fc <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800a0fc:	b480      	push	{r7}
 800a0fe:	b083      	sub	sp, #12
 800a100:	af00      	add	r7, sp, #0
 800a102:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800a104:	bf00      	nop
 800a106:	370c      	adds	r7, #12
 800a108:	46bd      	mov	sp, r7
 800a10a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a10e:	4770      	bx	lr

0800a110 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800a110:	b480      	push	{r7}
 800a112:	b083      	sub	sp, #12
 800a114:	af00      	add	r7, sp, #0
 800a116:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800a118:	bf00      	nop
 800a11a:	370c      	adds	r7, #12
 800a11c:	46bd      	mov	sp, r7
 800a11e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a122:	4770      	bx	lr

0800a124 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 800a124:	b480      	push	{r7}
 800a126:	b085      	sub	sp, #20
 800a128:	af00      	add	r7, sp, #0
 800a12a:	6078      	str	r0, [r7, #4]
 800a12c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800a12e:	687b      	ldr	r3, [r7, #4]
 800a130:	681b      	ldr	r3, [r3, #0]
 800a132:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800a134:	687b      	ldr	r3, [r7, #4]
 800a136:	4a46      	ldr	r2, [pc, #280]	; (800a250 <TIM_Base_SetConfig+0x12c>)
 800a138:	4293      	cmp	r3, r2
 800a13a:	d017      	beq.n	800a16c <TIM_Base_SetConfig+0x48>
 800a13c:	687b      	ldr	r3, [r7, #4]
 800a13e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800a142:	d013      	beq.n	800a16c <TIM_Base_SetConfig+0x48>
 800a144:	687b      	ldr	r3, [r7, #4]
 800a146:	4a43      	ldr	r2, [pc, #268]	; (800a254 <TIM_Base_SetConfig+0x130>)
 800a148:	4293      	cmp	r3, r2
 800a14a:	d00f      	beq.n	800a16c <TIM_Base_SetConfig+0x48>
 800a14c:	687b      	ldr	r3, [r7, #4]
 800a14e:	4a42      	ldr	r2, [pc, #264]	; (800a258 <TIM_Base_SetConfig+0x134>)
 800a150:	4293      	cmp	r3, r2
 800a152:	d00b      	beq.n	800a16c <TIM_Base_SetConfig+0x48>
 800a154:	687b      	ldr	r3, [r7, #4]
 800a156:	4a41      	ldr	r2, [pc, #260]	; (800a25c <TIM_Base_SetConfig+0x138>)
 800a158:	4293      	cmp	r3, r2
 800a15a:	d007      	beq.n	800a16c <TIM_Base_SetConfig+0x48>
 800a15c:	687b      	ldr	r3, [r7, #4]
 800a15e:	4a40      	ldr	r2, [pc, #256]	; (800a260 <TIM_Base_SetConfig+0x13c>)
 800a160:	4293      	cmp	r3, r2
 800a162:	d003      	beq.n	800a16c <TIM_Base_SetConfig+0x48>
 800a164:	687b      	ldr	r3, [r7, #4]
 800a166:	4a3f      	ldr	r2, [pc, #252]	; (800a264 <TIM_Base_SetConfig+0x140>)
 800a168:	4293      	cmp	r3, r2
 800a16a:	d108      	bne.n	800a17e <TIM_Base_SetConfig+0x5a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800a16c:	68fb      	ldr	r3, [r7, #12]
 800a16e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800a172:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800a174:	683b      	ldr	r3, [r7, #0]
 800a176:	685b      	ldr	r3, [r3, #4]
 800a178:	68fa      	ldr	r2, [r7, #12]
 800a17a:	4313      	orrs	r3, r2
 800a17c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800a17e:	687b      	ldr	r3, [r7, #4]
 800a180:	4a33      	ldr	r2, [pc, #204]	; (800a250 <TIM_Base_SetConfig+0x12c>)
 800a182:	4293      	cmp	r3, r2
 800a184:	d023      	beq.n	800a1ce <TIM_Base_SetConfig+0xaa>
 800a186:	687b      	ldr	r3, [r7, #4]
 800a188:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800a18c:	d01f      	beq.n	800a1ce <TIM_Base_SetConfig+0xaa>
 800a18e:	687b      	ldr	r3, [r7, #4]
 800a190:	4a30      	ldr	r2, [pc, #192]	; (800a254 <TIM_Base_SetConfig+0x130>)
 800a192:	4293      	cmp	r3, r2
 800a194:	d01b      	beq.n	800a1ce <TIM_Base_SetConfig+0xaa>
 800a196:	687b      	ldr	r3, [r7, #4]
 800a198:	4a2f      	ldr	r2, [pc, #188]	; (800a258 <TIM_Base_SetConfig+0x134>)
 800a19a:	4293      	cmp	r3, r2
 800a19c:	d017      	beq.n	800a1ce <TIM_Base_SetConfig+0xaa>
 800a19e:	687b      	ldr	r3, [r7, #4]
 800a1a0:	4a2e      	ldr	r2, [pc, #184]	; (800a25c <TIM_Base_SetConfig+0x138>)
 800a1a2:	4293      	cmp	r3, r2
 800a1a4:	d013      	beq.n	800a1ce <TIM_Base_SetConfig+0xaa>
 800a1a6:	687b      	ldr	r3, [r7, #4]
 800a1a8:	4a2d      	ldr	r2, [pc, #180]	; (800a260 <TIM_Base_SetConfig+0x13c>)
 800a1aa:	4293      	cmp	r3, r2
 800a1ac:	d00f      	beq.n	800a1ce <TIM_Base_SetConfig+0xaa>
 800a1ae:	687b      	ldr	r3, [r7, #4]
 800a1b0:	4a2d      	ldr	r2, [pc, #180]	; (800a268 <TIM_Base_SetConfig+0x144>)
 800a1b2:	4293      	cmp	r3, r2
 800a1b4:	d00b      	beq.n	800a1ce <TIM_Base_SetConfig+0xaa>
 800a1b6:	687b      	ldr	r3, [r7, #4]
 800a1b8:	4a2c      	ldr	r2, [pc, #176]	; (800a26c <TIM_Base_SetConfig+0x148>)
 800a1ba:	4293      	cmp	r3, r2
 800a1bc:	d007      	beq.n	800a1ce <TIM_Base_SetConfig+0xaa>
 800a1be:	687b      	ldr	r3, [r7, #4]
 800a1c0:	4a2b      	ldr	r2, [pc, #172]	; (800a270 <TIM_Base_SetConfig+0x14c>)
 800a1c2:	4293      	cmp	r3, r2
 800a1c4:	d003      	beq.n	800a1ce <TIM_Base_SetConfig+0xaa>
 800a1c6:	687b      	ldr	r3, [r7, #4]
 800a1c8:	4a26      	ldr	r2, [pc, #152]	; (800a264 <TIM_Base_SetConfig+0x140>)
 800a1ca:	4293      	cmp	r3, r2
 800a1cc:	d108      	bne.n	800a1e0 <TIM_Base_SetConfig+0xbc>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800a1ce:	68fb      	ldr	r3, [r7, #12]
 800a1d0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800a1d4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800a1d6:	683b      	ldr	r3, [r7, #0]
 800a1d8:	68db      	ldr	r3, [r3, #12]
 800a1da:	68fa      	ldr	r2, [r7, #12]
 800a1dc:	4313      	orrs	r3, r2
 800a1de:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800a1e0:	68fb      	ldr	r3, [r7, #12]
 800a1e2:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800a1e6:	683b      	ldr	r3, [r7, #0]
 800a1e8:	695b      	ldr	r3, [r3, #20]
 800a1ea:	4313      	orrs	r3, r2
 800a1ec:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800a1ee:	687b      	ldr	r3, [r7, #4]
 800a1f0:	68fa      	ldr	r2, [r7, #12]
 800a1f2:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800a1f4:	683b      	ldr	r3, [r7, #0]
 800a1f6:	689a      	ldr	r2, [r3, #8]
 800a1f8:	687b      	ldr	r3, [r7, #4]
 800a1fa:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800a1fc:	683b      	ldr	r3, [r7, #0]
 800a1fe:	681a      	ldr	r2, [r3, #0]
 800a200:	687b      	ldr	r3, [r7, #4]
 800a202:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800a204:	687b      	ldr	r3, [r7, #4]
 800a206:	4a12      	ldr	r2, [pc, #72]	; (800a250 <TIM_Base_SetConfig+0x12c>)
 800a208:	4293      	cmp	r3, r2
 800a20a:	d013      	beq.n	800a234 <TIM_Base_SetConfig+0x110>
 800a20c:	687b      	ldr	r3, [r7, #4]
 800a20e:	4a14      	ldr	r2, [pc, #80]	; (800a260 <TIM_Base_SetConfig+0x13c>)
 800a210:	4293      	cmp	r3, r2
 800a212:	d00f      	beq.n	800a234 <TIM_Base_SetConfig+0x110>
 800a214:	687b      	ldr	r3, [r7, #4]
 800a216:	4a14      	ldr	r2, [pc, #80]	; (800a268 <TIM_Base_SetConfig+0x144>)
 800a218:	4293      	cmp	r3, r2
 800a21a:	d00b      	beq.n	800a234 <TIM_Base_SetConfig+0x110>
 800a21c:	687b      	ldr	r3, [r7, #4]
 800a21e:	4a13      	ldr	r2, [pc, #76]	; (800a26c <TIM_Base_SetConfig+0x148>)
 800a220:	4293      	cmp	r3, r2
 800a222:	d007      	beq.n	800a234 <TIM_Base_SetConfig+0x110>
 800a224:	687b      	ldr	r3, [r7, #4]
 800a226:	4a12      	ldr	r2, [pc, #72]	; (800a270 <TIM_Base_SetConfig+0x14c>)
 800a228:	4293      	cmp	r3, r2
 800a22a:	d003      	beq.n	800a234 <TIM_Base_SetConfig+0x110>
 800a22c:	687b      	ldr	r3, [r7, #4]
 800a22e:	4a0d      	ldr	r2, [pc, #52]	; (800a264 <TIM_Base_SetConfig+0x140>)
 800a230:	4293      	cmp	r3, r2
 800a232:	d103      	bne.n	800a23c <TIM_Base_SetConfig+0x118>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800a234:	683b      	ldr	r3, [r7, #0]
 800a236:	691a      	ldr	r2, [r3, #16]
 800a238:	687b      	ldr	r3, [r7, #4]
 800a23a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800a23c:	687b      	ldr	r3, [r7, #4]
 800a23e:	2201      	movs	r2, #1
 800a240:	615a      	str	r2, [r3, #20]
}
 800a242:	bf00      	nop
 800a244:	3714      	adds	r7, #20
 800a246:	46bd      	mov	sp, r7
 800a248:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a24c:	4770      	bx	lr
 800a24e:	bf00      	nop
 800a250:	40012c00 	.word	0x40012c00
 800a254:	40000400 	.word	0x40000400
 800a258:	40000800 	.word	0x40000800
 800a25c:	40000c00 	.word	0x40000c00
 800a260:	40013400 	.word	0x40013400
 800a264:	40015000 	.word	0x40015000
 800a268:	40014000 	.word	0x40014000
 800a26c:	40014400 	.word	0x40014400
 800a270:	40014800 	.word	0x40014800

0800a274 <TIM_SlaveTimer_SetConfig>:
  * @param  sSlaveConfig Slave timer configuration
  * @retval None
  */
static HAL_StatusTypeDef TIM_SlaveTimer_SetConfig(TIM_HandleTypeDef *htim,
                                                  TIM_SlaveConfigTypeDef *sSlaveConfig)
{
 800a274:	b580      	push	{r7, lr}
 800a276:	b086      	sub	sp, #24
 800a278:	af00      	add	r7, sp, #0
 800a27a:	6078      	str	r0, [r7, #4]
 800a27c:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800a27e:	687b      	ldr	r3, [r7, #4]
 800a280:	681b      	ldr	r3, [r3, #0]
 800a282:	689b      	ldr	r3, [r3, #8]
 800a284:	617b      	str	r3, [r7, #20]

  /* Reset the Trigger Selection Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800a286:	697b      	ldr	r3, [r7, #20]
 800a288:	f423 1340 	bic.w	r3, r3, #3145728	; 0x300000
 800a28c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800a290:	617b      	str	r3, [r7, #20]
  /* Set the Input Trigger source */
  tmpsmcr |= sSlaveConfig->InputTrigger;
 800a292:	683b      	ldr	r3, [r7, #0]
 800a294:	685b      	ldr	r3, [r3, #4]
 800a296:	697a      	ldr	r2, [r7, #20]
 800a298:	4313      	orrs	r3, r2
 800a29a:	617b      	str	r3, [r7, #20]

  /* Reset the slave mode Bits */
  tmpsmcr &= ~TIM_SMCR_SMS;
 800a29c:	697b      	ldr	r3, [r7, #20]
 800a29e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800a2a2:	f023 0307 	bic.w	r3, r3, #7
 800a2a6:	617b      	str	r3, [r7, #20]
  /* Set the slave mode */
  tmpsmcr |= sSlaveConfig->SlaveMode;
 800a2a8:	683b      	ldr	r3, [r7, #0]
 800a2aa:	681b      	ldr	r3, [r3, #0]
 800a2ac:	697a      	ldr	r2, [r7, #20]
 800a2ae:	4313      	orrs	r3, r2
 800a2b0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 800a2b2:	687b      	ldr	r3, [r7, #4]
 800a2b4:	681b      	ldr	r3, [r3, #0]
 800a2b6:	697a      	ldr	r2, [r7, #20]
 800a2b8:	609a      	str	r2, [r3, #8]

  /* Configure the trigger prescaler, filter, and polarity */
  switch (sSlaveConfig->InputTrigger)
 800a2ba:	683b      	ldr	r3, [r7, #0]
 800a2bc:	685b      	ldr	r3, [r3, #4]
 800a2be:	2b70      	cmp	r3, #112	; 0x70
 800a2c0:	d034      	beq.n	800a32c <TIM_SlaveTimer_SetConfig+0xb8>
 800a2c2:	2b70      	cmp	r3, #112	; 0x70
 800a2c4:	d811      	bhi.n	800a2ea <TIM_SlaveTimer_SetConfig+0x76>
 800a2c6:	2b30      	cmp	r3, #48	; 0x30
 800a2c8:	d07d      	beq.n	800a3c6 <TIM_SlaveTimer_SetConfig+0x152>
 800a2ca:	2b30      	cmp	r3, #48	; 0x30
 800a2cc:	d806      	bhi.n	800a2dc <TIM_SlaveTimer_SetConfig+0x68>
 800a2ce:	2b10      	cmp	r3, #16
 800a2d0:	d079      	beq.n	800a3c6 <TIM_SlaveTimer_SetConfig+0x152>
 800a2d2:	2b20      	cmp	r3, #32
 800a2d4:	d077      	beq.n	800a3c6 <TIM_SlaveTimer_SetConfig+0x152>
 800a2d6:	2b00      	cmp	r3, #0
 800a2d8:	d075      	beq.n	800a3c6 <TIM_SlaveTimer_SetConfig+0x152>
      assert_param(IS_TIM_INTERNAL_TRIGGEREVENT_INSTANCE((htim->Instance), sSlaveConfig->InputTrigger));
      break;
    }

    default:
      break;
 800a2da:	e075      	b.n	800a3c8 <TIM_SlaveTimer_SetConfig+0x154>
  switch (sSlaveConfig->InputTrigger)
 800a2dc:	2b50      	cmp	r3, #80	; 0x50
 800a2de:	d05e      	beq.n	800a39e <TIM_SlaveTimer_SetConfig+0x12a>
 800a2e0:	2b60      	cmp	r3, #96	; 0x60
 800a2e2:	d066      	beq.n	800a3b2 <TIM_SlaveTimer_SetConfig+0x13e>
 800a2e4:	2b40      	cmp	r3, #64	; 0x40
 800a2e6:	d02c      	beq.n	800a342 <TIM_SlaveTimer_SetConfig+0xce>
      break;
 800a2e8:	e06e      	b.n	800a3c8 <TIM_SlaveTimer_SetConfig+0x154>
  switch (sSlaveConfig->InputTrigger)
 800a2ea:	4a3a      	ldr	r2, [pc, #232]	; (800a3d4 <TIM_SlaveTimer_SetConfig+0x160>)
 800a2ec:	4293      	cmp	r3, r2
 800a2ee:	d06a      	beq.n	800a3c6 <TIM_SlaveTimer_SetConfig+0x152>
 800a2f0:	4a38      	ldr	r2, [pc, #224]	; (800a3d4 <TIM_SlaveTimer_SetConfig+0x160>)
 800a2f2:	4293      	cmp	r3, r2
 800a2f4:	d809      	bhi.n	800a30a <TIM_SlaveTimer_SetConfig+0x96>
 800a2f6:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 800a2fa:	d064      	beq.n	800a3c6 <TIM_SlaveTimer_SetConfig+0x152>
 800a2fc:	4a36      	ldr	r2, [pc, #216]	; (800a3d8 <TIM_SlaveTimer_SetConfig+0x164>)
 800a2fe:	4293      	cmp	r3, r2
 800a300:	d061      	beq.n	800a3c6 <TIM_SlaveTimer_SetConfig+0x152>
 800a302:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800a306:	d05e      	beq.n	800a3c6 <TIM_SlaveTimer_SetConfig+0x152>
      break;
 800a308:	e05e      	b.n	800a3c8 <TIM_SlaveTimer_SetConfig+0x154>
  switch (sSlaveConfig->InputTrigger)
 800a30a:	4a34      	ldr	r2, [pc, #208]	; (800a3dc <TIM_SlaveTimer_SetConfig+0x168>)
 800a30c:	4293      	cmp	r3, r2
 800a30e:	d05a      	beq.n	800a3c6 <TIM_SlaveTimer_SetConfig+0x152>
 800a310:	4a32      	ldr	r2, [pc, #200]	; (800a3dc <TIM_SlaveTimer_SetConfig+0x168>)
 800a312:	4293      	cmp	r3, r2
 800a314:	d803      	bhi.n	800a31e <TIM_SlaveTimer_SetConfig+0xaa>
 800a316:	4a32      	ldr	r2, [pc, #200]	; (800a3e0 <TIM_SlaveTimer_SetConfig+0x16c>)
 800a318:	4293      	cmp	r3, r2
 800a31a:	d054      	beq.n	800a3c6 <TIM_SlaveTimer_SetConfig+0x152>
      break;
 800a31c:	e054      	b.n	800a3c8 <TIM_SlaveTimer_SetConfig+0x154>
  switch (sSlaveConfig->InputTrigger)
 800a31e:	4a31      	ldr	r2, [pc, #196]	; (800a3e4 <TIM_SlaveTimer_SetConfig+0x170>)
 800a320:	4293      	cmp	r3, r2
 800a322:	d050      	beq.n	800a3c6 <TIM_SlaveTimer_SetConfig+0x152>
 800a324:	4a30      	ldr	r2, [pc, #192]	; (800a3e8 <TIM_SlaveTimer_SetConfig+0x174>)
 800a326:	4293      	cmp	r3, r2
 800a328:	d04d      	beq.n	800a3c6 <TIM_SlaveTimer_SetConfig+0x152>
      break;
 800a32a:	e04d      	b.n	800a3c8 <TIM_SlaveTimer_SetConfig+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 800a32c:	687b      	ldr	r3, [r7, #4]
 800a32e:	6818      	ldr	r0, [r3, #0]
 800a330:	683b      	ldr	r3, [r7, #0]
 800a332:	68d9      	ldr	r1, [r3, #12]
 800a334:	683b      	ldr	r3, [r7, #0]
 800a336:	689a      	ldr	r2, [r3, #8]
 800a338:	683b      	ldr	r3, [r7, #0]
 800a33a:	691b      	ldr	r3, [r3, #16]
 800a33c:	f000 f8d2 	bl	800a4e4 <TIM_ETR_SetConfig>
      break;
 800a340:	e042      	b.n	800a3c8 <TIM_SlaveTimer_SetConfig+0x154>
      if ((sSlaveConfig->SlaveMode == TIM_SLAVEMODE_GATED) || (sSlaveConfig->SlaveMode == TIM_SLAVEMODE_COMBINED_GATEDRESET))
 800a342:	683b      	ldr	r3, [r7, #0]
 800a344:	681b      	ldr	r3, [r3, #0]
 800a346:	2b05      	cmp	r3, #5
 800a348:	d004      	beq.n	800a354 <TIM_SlaveTimer_SetConfig+0xe0>
 800a34a:	683b      	ldr	r3, [r7, #0]
 800a34c:	681b      	ldr	r3, [r3, #0]
 800a34e:	f1b3 1f01 	cmp.w	r3, #65537	; 0x10001
 800a352:	d101      	bne.n	800a358 <TIM_SlaveTimer_SetConfig+0xe4>
        return HAL_ERROR;
 800a354:	2301      	movs	r3, #1
 800a356:	e038      	b.n	800a3ca <TIM_SlaveTimer_SetConfig+0x156>
      tmpccer = htim->Instance->CCER;
 800a358:	687b      	ldr	r3, [r7, #4]
 800a35a:	681b      	ldr	r3, [r3, #0]
 800a35c:	6a1b      	ldr	r3, [r3, #32]
 800a35e:	613b      	str	r3, [r7, #16]
      htim->Instance->CCER &= ~TIM_CCER_CC1E;
 800a360:	687b      	ldr	r3, [r7, #4]
 800a362:	681b      	ldr	r3, [r3, #0]
 800a364:	6a1a      	ldr	r2, [r3, #32]
 800a366:	687b      	ldr	r3, [r7, #4]
 800a368:	681b      	ldr	r3, [r3, #0]
 800a36a:	f022 0201 	bic.w	r2, r2, #1
 800a36e:	621a      	str	r2, [r3, #32]
      tmpccmr1 = htim->Instance->CCMR1;
 800a370:	687b      	ldr	r3, [r7, #4]
 800a372:	681b      	ldr	r3, [r3, #0]
 800a374:	699b      	ldr	r3, [r3, #24]
 800a376:	60fb      	str	r3, [r7, #12]
      tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800a378:	68fb      	ldr	r3, [r7, #12]
 800a37a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800a37e:	60fb      	str	r3, [r7, #12]
      tmpccmr1 |= ((sSlaveConfig->TriggerFilter) << 4U);
 800a380:	683b      	ldr	r3, [r7, #0]
 800a382:	691b      	ldr	r3, [r3, #16]
 800a384:	011b      	lsls	r3, r3, #4
 800a386:	68fa      	ldr	r2, [r7, #12]
 800a388:	4313      	orrs	r3, r2
 800a38a:	60fb      	str	r3, [r7, #12]
      htim->Instance->CCMR1 = tmpccmr1;
 800a38c:	687b      	ldr	r3, [r7, #4]
 800a38e:	681b      	ldr	r3, [r3, #0]
 800a390:	68fa      	ldr	r2, [r7, #12]
 800a392:	619a      	str	r2, [r3, #24]
      htim->Instance->CCER = tmpccer;
 800a394:	687b      	ldr	r3, [r7, #4]
 800a396:	681b      	ldr	r3, [r3, #0]
 800a398:	693a      	ldr	r2, [r7, #16]
 800a39a:	621a      	str	r2, [r3, #32]
      break;
 800a39c:	e014      	b.n	800a3c8 <TIM_SlaveTimer_SetConfig+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 800a39e:	687b      	ldr	r3, [r7, #4]
 800a3a0:	6818      	ldr	r0, [r3, #0]
 800a3a2:	683b      	ldr	r3, [r7, #0]
 800a3a4:	6899      	ldr	r1, [r3, #8]
 800a3a6:	683b      	ldr	r3, [r7, #0]
 800a3a8:	691b      	ldr	r3, [r3, #16]
 800a3aa:	461a      	mov	r2, r3
 800a3ac:	f000 f81e 	bl	800a3ec <TIM_TI1_ConfigInputStage>
      break;
 800a3b0:	e00a      	b.n	800a3c8 <TIM_SlaveTimer_SetConfig+0x154>
      TIM_TI2_ConfigInputStage(htim->Instance,
 800a3b2:	687b      	ldr	r3, [r7, #4]
 800a3b4:	6818      	ldr	r0, [r3, #0]
 800a3b6:	683b      	ldr	r3, [r7, #0]
 800a3b8:	6899      	ldr	r1, [r3, #8]
 800a3ba:	683b      	ldr	r3, [r7, #0]
 800a3bc:	691b      	ldr	r3, [r3, #16]
 800a3be:	461a      	mov	r2, r3
 800a3c0:	f000 f843 	bl	800a44a <TIM_TI2_ConfigInputStage>
      break;
 800a3c4:	e000      	b.n	800a3c8 <TIM_SlaveTimer_SetConfig+0x154>
      break;
 800a3c6:	bf00      	nop
  }
  return HAL_OK;
 800a3c8:	2300      	movs	r3, #0
}
 800a3ca:	4618      	mov	r0, r3
 800a3cc:	3718      	adds	r7, #24
 800a3ce:	46bd      	mov	sp, r7
 800a3d0:	bd80      	pop	{r7, pc}
 800a3d2:	bf00      	nop
 800a3d4:	00100030 	.word	0x00100030
 800a3d8:	00100020 	.word	0x00100020
 800a3dc:	00100050 	.word	0x00100050
 800a3e0:	00100040 	.word	0x00100040
 800a3e4:	00100060 	.word	0x00100060
 800a3e8:	00100070 	.word	0x00100070

0800a3ec <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800a3ec:	b480      	push	{r7}
 800a3ee:	b087      	sub	sp, #28
 800a3f0:	af00      	add	r7, sp, #0
 800a3f2:	60f8      	str	r0, [r7, #12]
 800a3f4:	60b9      	str	r1, [r7, #8]
 800a3f6:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800a3f8:	68fb      	ldr	r3, [r7, #12]
 800a3fa:	6a1b      	ldr	r3, [r3, #32]
 800a3fc:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800a3fe:	68fb      	ldr	r3, [r7, #12]
 800a400:	6a1b      	ldr	r3, [r3, #32]
 800a402:	f023 0201 	bic.w	r2, r3, #1
 800a406:	68fb      	ldr	r3, [r7, #12]
 800a408:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800a40a:	68fb      	ldr	r3, [r7, #12]
 800a40c:	699b      	ldr	r3, [r3, #24]
 800a40e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800a410:	693b      	ldr	r3, [r7, #16]
 800a412:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800a416:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800a418:	687b      	ldr	r3, [r7, #4]
 800a41a:	011b      	lsls	r3, r3, #4
 800a41c:	693a      	ldr	r2, [r7, #16]
 800a41e:	4313      	orrs	r3, r2
 800a420:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800a422:	697b      	ldr	r3, [r7, #20]
 800a424:	f023 030a 	bic.w	r3, r3, #10
 800a428:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800a42a:	697a      	ldr	r2, [r7, #20]
 800a42c:	68bb      	ldr	r3, [r7, #8]
 800a42e:	4313      	orrs	r3, r2
 800a430:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800a432:	68fb      	ldr	r3, [r7, #12]
 800a434:	693a      	ldr	r2, [r7, #16]
 800a436:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800a438:	68fb      	ldr	r3, [r7, #12]
 800a43a:	697a      	ldr	r2, [r7, #20]
 800a43c:	621a      	str	r2, [r3, #32]
}
 800a43e:	bf00      	nop
 800a440:	371c      	adds	r7, #28
 800a442:	46bd      	mov	sp, r7
 800a444:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a448:	4770      	bx	lr

0800a44a <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800a44a:	b480      	push	{r7}
 800a44c:	b087      	sub	sp, #28
 800a44e:	af00      	add	r7, sp, #0
 800a450:	60f8      	str	r0, [r7, #12]
 800a452:	60b9      	str	r1, [r7, #8]
 800a454:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800a456:	68fb      	ldr	r3, [r7, #12]
 800a458:	6a1b      	ldr	r3, [r3, #32]
 800a45a:	f023 0210 	bic.w	r2, r3, #16
 800a45e:	68fb      	ldr	r3, [r7, #12]
 800a460:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800a462:	68fb      	ldr	r3, [r7, #12]
 800a464:	699b      	ldr	r3, [r3, #24]
 800a466:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800a468:	68fb      	ldr	r3, [r7, #12]
 800a46a:	6a1b      	ldr	r3, [r3, #32]
 800a46c:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800a46e:	697b      	ldr	r3, [r7, #20]
 800a470:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800a474:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800a476:	687b      	ldr	r3, [r7, #4]
 800a478:	031b      	lsls	r3, r3, #12
 800a47a:	697a      	ldr	r2, [r7, #20]
 800a47c:	4313      	orrs	r3, r2
 800a47e:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800a480:	693b      	ldr	r3, [r7, #16]
 800a482:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800a486:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 800a488:	68bb      	ldr	r3, [r7, #8]
 800a48a:	011b      	lsls	r3, r3, #4
 800a48c:	693a      	ldr	r2, [r7, #16]
 800a48e:	4313      	orrs	r3, r2
 800a490:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800a492:	68fb      	ldr	r3, [r7, #12]
 800a494:	697a      	ldr	r2, [r7, #20]
 800a496:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800a498:	68fb      	ldr	r3, [r7, #12]
 800a49a:	693a      	ldr	r2, [r7, #16]
 800a49c:	621a      	str	r2, [r3, #32]
}
 800a49e:	bf00      	nop
 800a4a0:	371c      	adds	r7, #28
 800a4a2:	46bd      	mov	sp, r7
 800a4a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a4a8:	4770      	bx	lr

0800a4aa <TIM_ITRx_SetConfig>:
  *       (*)  Value not defined in all devices.
  *
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800a4aa:	b480      	push	{r7}
 800a4ac:	b085      	sub	sp, #20
 800a4ae:	af00      	add	r7, sp, #0
 800a4b0:	6078      	str	r0, [r7, #4]
 800a4b2:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800a4b4:	687b      	ldr	r3, [r7, #4]
 800a4b6:	689b      	ldr	r3, [r3, #8]
 800a4b8:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800a4ba:	68fb      	ldr	r3, [r7, #12]
 800a4bc:	f423 1340 	bic.w	r3, r3, #3145728	; 0x300000
 800a4c0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800a4c4:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800a4c6:	683a      	ldr	r2, [r7, #0]
 800a4c8:	68fb      	ldr	r3, [r7, #12]
 800a4ca:	4313      	orrs	r3, r2
 800a4cc:	f043 0307 	orr.w	r3, r3, #7
 800a4d0:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800a4d2:	687b      	ldr	r3, [r7, #4]
 800a4d4:	68fa      	ldr	r2, [r7, #12]
 800a4d6:	609a      	str	r2, [r3, #8]
}
 800a4d8:	bf00      	nop
 800a4da:	3714      	adds	r7, #20
 800a4dc:	46bd      	mov	sp, r7
 800a4de:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a4e2:	4770      	bx	lr

0800a4e4 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800a4e4:	b480      	push	{r7}
 800a4e6:	b087      	sub	sp, #28
 800a4e8:	af00      	add	r7, sp, #0
 800a4ea:	60f8      	str	r0, [r7, #12]
 800a4ec:	60b9      	str	r1, [r7, #8]
 800a4ee:	607a      	str	r2, [r7, #4]
 800a4f0:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800a4f2:	68fb      	ldr	r3, [r7, #12]
 800a4f4:	689b      	ldr	r3, [r3, #8]
 800a4f6:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800a4f8:	697b      	ldr	r3, [r7, #20]
 800a4fa:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800a4fe:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800a500:	683b      	ldr	r3, [r7, #0]
 800a502:	021a      	lsls	r2, r3, #8
 800a504:	687b      	ldr	r3, [r7, #4]
 800a506:	431a      	orrs	r2, r3
 800a508:	68bb      	ldr	r3, [r7, #8]
 800a50a:	4313      	orrs	r3, r2
 800a50c:	697a      	ldr	r2, [r7, #20]
 800a50e:	4313      	orrs	r3, r2
 800a510:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800a512:	68fb      	ldr	r3, [r7, #12]
 800a514:	697a      	ldr	r2, [r7, #20]
 800a516:	609a      	str	r2, [r3, #8]
}
 800a518:	bf00      	nop
 800a51a:	371c      	adds	r7, #28
 800a51c:	46bd      	mov	sp, r7
 800a51e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a522:	4770      	bx	lr

0800a524 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 800a524:	b480      	push	{r7}
 800a526:	b085      	sub	sp, #20
 800a528:	af00      	add	r7, sp, #0
 800a52a:	6078      	str	r0, [r7, #4]
 800a52c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800a52e:	687b      	ldr	r3, [r7, #4]
 800a530:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800a534:	2b01      	cmp	r3, #1
 800a536:	d101      	bne.n	800a53c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800a538:	2302      	movs	r3, #2
 800a53a:	e074      	b.n	800a626 <HAL_TIMEx_MasterConfigSynchronization+0x102>
 800a53c:	687b      	ldr	r3, [r7, #4]
 800a53e:	2201      	movs	r2, #1
 800a540:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800a544:	687b      	ldr	r3, [r7, #4]
 800a546:	2202      	movs	r2, #2
 800a548:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800a54c:	687b      	ldr	r3, [r7, #4]
 800a54e:	681b      	ldr	r3, [r3, #0]
 800a550:	685b      	ldr	r3, [r3, #4]
 800a552:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800a554:	687b      	ldr	r3, [r7, #4]
 800a556:	681b      	ldr	r3, [r3, #0]
 800a558:	689b      	ldr	r3, [r3, #8]
 800a55a:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 800a55c:	687b      	ldr	r3, [r7, #4]
 800a55e:	681b      	ldr	r3, [r3, #0]
 800a560:	4a34      	ldr	r2, [pc, #208]	; (800a634 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 800a562:	4293      	cmp	r3, r2
 800a564:	d009      	beq.n	800a57a <HAL_TIMEx_MasterConfigSynchronization+0x56>
 800a566:	687b      	ldr	r3, [r7, #4]
 800a568:	681b      	ldr	r3, [r3, #0]
 800a56a:	4a33      	ldr	r2, [pc, #204]	; (800a638 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 800a56c:	4293      	cmp	r3, r2
 800a56e:	d004      	beq.n	800a57a <HAL_TIMEx_MasterConfigSynchronization+0x56>
 800a570:	687b      	ldr	r3, [r7, #4]
 800a572:	681b      	ldr	r3, [r3, #0]
 800a574:	4a31      	ldr	r2, [pc, #196]	; (800a63c <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 800a576:	4293      	cmp	r3, r2
 800a578:	d108      	bne.n	800a58c <HAL_TIMEx_MasterConfigSynchronization+0x68>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 800a57a:	68fb      	ldr	r3, [r7, #12]
 800a57c:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 800a580:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800a582:	683b      	ldr	r3, [r7, #0]
 800a584:	685b      	ldr	r3, [r3, #4]
 800a586:	68fa      	ldr	r2, [r7, #12]
 800a588:	4313      	orrs	r3, r2
 800a58a:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800a58c:	68fb      	ldr	r3, [r7, #12]
 800a58e:	f023 7300 	bic.w	r3, r3, #33554432	; 0x2000000
 800a592:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800a596:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800a598:	683b      	ldr	r3, [r7, #0]
 800a59a:	681b      	ldr	r3, [r3, #0]
 800a59c:	68fa      	ldr	r2, [r7, #12]
 800a59e:	4313      	orrs	r3, r2
 800a5a0:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800a5a2:	687b      	ldr	r3, [r7, #4]
 800a5a4:	681b      	ldr	r3, [r3, #0]
 800a5a6:	68fa      	ldr	r2, [r7, #12]
 800a5a8:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800a5aa:	687b      	ldr	r3, [r7, #4]
 800a5ac:	681b      	ldr	r3, [r3, #0]
 800a5ae:	4a21      	ldr	r2, [pc, #132]	; (800a634 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 800a5b0:	4293      	cmp	r3, r2
 800a5b2:	d022      	beq.n	800a5fa <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 800a5b4:	687b      	ldr	r3, [r7, #4]
 800a5b6:	681b      	ldr	r3, [r3, #0]
 800a5b8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800a5bc:	d01d      	beq.n	800a5fa <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 800a5be:	687b      	ldr	r3, [r7, #4]
 800a5c0:	681b      	ldr	r3, [r3, #0]
 800a5c2:	4a1f      	ldr	r2, [pc, #124]	; (800a640 <HAL_TIMEx_MasterConfigSynchronization+0x11c>)
 800a5c4:	4293      	cmp	r3, r2
 800a5c6:	d018      	beq.n	800a5fa <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 800a5c8:	687b      	ldr	r3, [r7, #4]
 800a5ca:	681b      	ldr	r3, [r3, #0]
 800a5cc:	4a1d      	ldr	r2, [pc, #116]	; (800a644 <HAL_TIMEx_MasterConfigSynchronization+0x120>)
 800a5ce:	4293      	cmp	r3, r2
 800a5d0:	d013      	beq.n	800a5fa <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 800a5d2:	687b      	ldr	r3, [r7, #4]
 800a5d4:	681b      	ldr	r3, [r3, #0]
 800a5d6:	4a1c      	ldr	r2, [pc, #112]	; (800a648 <HAL_TIMEx_MasterConfigSynchronization+0x124>)
 800a5d8:	4293      	cmp	r3, r2
 800a5da:	d00e      	beq.n	800a5fa <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 800a5dc:	687b      	ldr	r3, [r7, #4]
 800a5de:	681b      	ldr	r3, [r3, #0]
 800a5e0:	4a15      	ldr	r2, [pc, #84]	; (800a638 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 800a5e2:	4293      	cmp	r3, r2
 800a5e4:	d009      	beq.n	800a5fa <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 800a5e6:	687b      	ldr	r3, [r7, #4]
 800a5e8:	681b      	ldr	r3, [r3, #0]
 800a5ea:	4a18      	ldr	r2, [pc, #96]	; (800a64c <HAL_TIMEx_MasterConfigSynchronization+0x128>)
 800a5ec:	4293      	cmp	r3, r2
 800a5ee:	d004      	beq.n	800a5fa <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 800a5f0:	687b      	ldr	r3, [r7, #4]
 800a5f2:	681b      	ldr	r3, [r3, #0]
 800a5f4:	4a11      	ldr	r2, [pc, #68]	; (800a63c <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 800a5f6:	4293      	cmp	r3, r2
 800a5f8:	d10c      	bne.n	800a614 <HAL_TIMEx_MasterConfigSynchronization+0xf0>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800a5fa:	68bb      	ldr	r3, [r7, #8]
 800a5fc:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800a600:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800a602:	683b      	ldr	r3, [r7, #0]
 800a604:	689b      	ldr	r3, [r3, #8]
 800a606:	68ba      	ldr	r2, [r7, #8]
 800a608:	4313      	orrs	r3, r2
 800a60a:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800a60c:	687b      	ldr	r3, [r7, #4]
 800a60e:	681b      	ldr	r3, [r3, #0]
 800a610:	68ba      	ldr	r2, [r7, #8]
 800a612:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800a614:	687b      	ldr	r3, [r7, #4]
 800a616:	2201      	movs	r2, #1
 800a618:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800a61c:	687b      	ldr	r3, [r7, #4]
 800a61e:	2200      	movs	r2, #0
 800a620:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800a624:	2300      	movs	r3, #0
}
 800a626:	4618      	mov	r0, r3
 800a628:	3714      	adds	r7, #20
 800a62a:	46bd      	mov	sp, r7
 800a62c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a630:	4770      	bx	lr
 800a632:	bf00      	nop
 800a634:	40012c00 	.word	0x40012c00
 800a638:	40013400 	.word	0x40013400
 800a63c:	40015000 	.word	0x40015000
 800a640:	40000400 	.word	0x40000400
 800a644:	40000800 	.word	0x40000800
 800a648:	40000c00 	.word	0x40000c00
 800a64c:	40014000 	.word	0x40014000

0800a650 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 800a650:	b480      	push	{r7}
 800a652:	b085      	sub	sp, #20
 800a654:	af00      	add	r7, sp, #0
 800a656:	6078      	str	r0, [r7, #4]
 800a658:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 800a65a:	2300      	movs	r3, #0
 800a65c:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 800a65e:	687b      	ldr	r3, [r7, #4]
 800a660:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800a664:	2b01      	cmp	r3, #1
 800a666:	d101      	bne.n	800a66c <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 800a668:	2302      	movs	r3, #2
 800a66a:	e096      	b.n	800a79a <HAL_TIMEx_ConfigBreakDeadTime+0x14a>
 800a66c:	687b      	ldr	r3, [r7, #4]
 800a66e:	2201      	movs	r2, #1
 800a670:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 800a674:	68fb      	ldr	r3, [r7, #12]
 800a676:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 800a67a:	683b      	ldr	r3, [r7, #0]
 800a67c:	68db      	ldr	r3, [r3, #12]
 800a67e:	4313      	orrs	r3, r2
 800a680:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 800a682:	68fb      	ldr	r3, [r7, #12]
 800a684:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800a688:	683b      	ldr	r3, [r7, #0]
 800a68a:	689b      	ldr	r3, [r3, #8]
 800a68c:	4313      	orrs	r3, r2
 800a68e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 800a690:	68fb      	ldr	r3, [r7, #12]
 800a692:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 800a696:	683b      	ldr	r3, [r7, #0]
 800a698:	685b      	ldr	r3, [r3, #4]
 800a69a:	4313      	orrs	r3, r2
 800a69c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 800a69e:	68fb      	ldr	r3, [r7, #12]
 800a6a0:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 800a6a4:	683b      	ldr	r3, [r7, #0]
 800a6a6:	681b      	ldr	r3, [r3, #0]
 800a6a8:	4313      	orrs	r3, r2
 800a6aa:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 800a6ac:	68fb      	ldr	r3, [r7, #12]
 800a6ae:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800a6b2:	683b      	ldr	r3, [r7, #0]
 800a6b4:	691b      	ldr	r3, [r3, #16]
 800a6b6:	4313      	orrs	r3, r2
 800a6b8:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 800a6ba:	68fb      	ldr	r3, [r7, #12]
 800a6bc:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 800a6c0:	683b      	ldr	r3, [r7, #0]
 800a6c2:	695b      	ldr	r3, [r3, #20]
 800a6c4:	4313      	orrs	r3, r2
 800a6c6:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 800a6c8:	68fb      	ldr	r3, [r7, #12]
 800a6ca:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 800a6ce:	683b      	ldr	r3, [r7, #0]
 800a6d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a6d2:	4313      	orrs	r3, r2
 800a6d4:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 800a6d6:	68fb      	ldr	r3, [r7, #12]
 800a6d8:	f423 2270 	bic.w	r2, r3, #983040	; 0xf0000
 800a6dc:	683b      	ldr	r3, [r7, #0]
 800a6de:	699b      	ldr	r3, [r3, #24]
 800a6e0:	041b      	lsls	r3, r3, #16
 800a6e2:	4313      	orrs	r3, r2
 800a6e4:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_ADVANCED_INSTANCE(htim->Instance))
 800a6e6:	687b      	ldr	r3, [r7, #4]
 800a6e8:	681b      	ldr	r3, [r3, #0]
 800a6ea:	4a2f      	ldr	r2, [pc, #188]	; (800a7a8 <HAL_TIMEx_ConfigBreakDeadTime+0x158>)
 800a6ec:	4293      	cmp	r3, r2
 800a6ee:	d009      	beq.n	800a704 <HAL_TIMEx_ConfigBreakDeadTime+0xb4>
 800a6f0:	687b      	ldr	r3, [r7, #4]
 800a6f2:	681b      	ldr	r3, [r3, #0]
 800a6f4:	4a2d      	ldr	r2, [pc, #180]	; (800a7ac <HAL_TIMEx_ConfigBreakDeadTime+0x15c>)
 800a6f6:	4293      	cmp	r3, r2
 800a6f8:	d004      	beq.n	800a704 <HAL_TIMEx_ConfigBreakDeadTime+0xb4>
 800a6fa:	687b      	ldr	r3, [r7, #4]
 800a6fc:	681b      	ldr	r3, [r3, #0]
 800a6fe:	4a2c      	ldr	r2, [pc, #176]	; (800a7b0 <HAL_TIMEx_ConfigBreakDeadTime+0x160>)
 800a700:	4293      	cmp	r3, r2
 800a702:	d106      	bne.n	800a712 <HAL_TIMEx_ConfigBreakDeadTime+0xc2>
  {
    /* Check the parameters */
    assert_param(IS_TIM_BREAK_AFMODE(sBreakDeadTimeConfig->BreakAFMode));

    /* Set BREAK AF mode */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BKBID, sBreakDeadTimeConfig->BreakAFMode);
 800a704:	68fb      	ldr	r3, [r7, #12]
 800a706:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 800a70a:	683b      	ldr	r3, [r7, #0]
 800a70c:	69db      	ldr	r3, [r3, #28]
 800a70e:	4313      	orrs	r3, r2
 800a710:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 800a712:	687b      	ldr	r3, [r7, #4]
 800a714:	681b      	ldr	r3, [r3, #0]
 800a716:	4a24      	ldr	r2, [pc, #144]	; (800a7a8 <HAL_TIMEx_ConfigBreakDeadTime+0x158>)
 800a718:	4293      	cmp	r3, r2
 800a71a:	d009      	beq.n	800a730 <HAL_TIMEx_ConfigBreakDeadTime+0xe0>
 800a71c:	687b      	ldr	r3, [r7, #4]
 800a71e:	681b      	ldr	r3, [r3, #0]
 800a720:	4a22      	ldr	r2, [pc, #136]	; (800a7ac <HAL_TIMEx_ConfigBreakDeadTime+0x15c>)
 800a722:	4293      	cmp	r3, r2
 800a724:	d004      	beq.n	800a730 <HAL_TIMEx_ConfigBreakDeadTime+0xe0>
 800a726:	687b      	ldr	r3, [r7, #4]
 800a728:	681b      	ldr	r3, [r3, #0]
 800a72a:	4a21      	ldr	r2, [pc, #132]	; (800a7b0 <HAL_TIMEx_ConfigBreakDeadTime+0x160>)
 800a72c:	4293      	cmp	r3, r2
 800a72e:	d12b      	bne.n	800a788 <HAL_TIMEx_ConfigBreakDeadTime+0x138>
    assert_param(IS_TIM_BREAK2_STATE(sBreakDeadTimeConfig->Break2State));
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 800a730:	68fb      	ldr	r3, [r7, #12]
 800a732:	f423 0270 	bic.w	r2, r3, #15728640	; 0xf00000
 800a736:	683b      	ldr	r3, [r7, #0]
 800a738:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a73a:	051b      	lsls	r3, r3, #20
 800a73c:	4313      	orrs	r3, r2
 800a73e:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 800a740:	68fb      	ldr	r3, [r7, #12]
 800a742:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 800a746:	683b      	ldr	r3, [r7, #0]
 800a748:	6a1b      	ldr	r3, [r3, #32]
 800a74a:	4313      	orrs	r3, r2
 800a74c:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 800a74e:	68fb      	ldr	r3, [r7, #12]
 800a750:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 800a754:	683b      	ldr	r3, [r7, #0]
 800a756:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a758:	4313      	orrs	r3, r2
 800a75a:	60fb      	str	r3, [r7, #12]

    if (IS_TIM_ADVANCED_INSTANCE(htim->Instance))
 800a75c:	687b      	ldr	r3, [r7, #4]
 800a75e:	681b      	ldr	r3, [r3, #0]
 800a760:	4a11      	ldr	r2, [pc, #68]	; (800a7a8 <HAL_TIMEx_ConfigBreakDeadTime+0x158>)
 800a762:	4293      	cmp	r3, r2
 800a764:	d009      	beq.n	800a77a <HAL_TIMEx_ConfigBreakDeadTime+0x12a>
 800a766:	687b      	ldr	r3, [r7, #4]
 800a768:	681b      	ldr	r3, [r3, #0]
 800a76a:	4a10      	ldr	r2, [pc, #64]	; (800a7ac <HAL_TIMEx_ConfigBreakDeadTime+0x15c>)
 800a76c:	4293      	cmp	r3, r2
 800a76e:	d004      	beq.n	800a77a <HAL_TIMEx_ConfigBreakDeadTime+0x12a>
 800a770:	687b      	ldr	r3, [r7, #4]
 800a772:	681b      	ldr	r3, [r3, #0]
 800a774:	4a0e      	ldr	r2, [pc, #56]	; (800a7b0 <HAL_TIMEx_ConfigBreakDeadTime+0x160>)
 800a776:	4293      	cmp	r3, r2
 800a778:	d106      	bne.n	800a788 <HAL_TIMEx_ConfigBreakDeadTime+0x138>
    {
      /* Check the parameters */
      assert_param(IS_TIM_BREAK2_AFMODE(sBreakDeadTimeConfig->Break2AFMode));

      /* Set BREAK2 AF mode */
      MODIFY_REG(tmpbdtr, TIM_BDTR_BK2BID, sBreakDeadTimeConfig->Break2AFMode);
 800a77a:	68fb      	ldr	r3, [r7, #12]
 800a77c:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
 800a780:	683b      	ldr	r3, [r7, #0]
 800a782:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a784:	4313      	orrs	r3, r2
 800a786:	60fb      	str	r3, [r7, #12]
    }
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 800a788:	687b      	ldr	r3, [r7, #4]
 800a78a:	681b      	ldr	r3, [r3, #0]
 800a78c:	68fa      	ldr	r2, [r7, #12]
 800a78e:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 800a790:	687b      	ldr	r3, [r7, #4]
 800a792:	2200      	movs	r2, #0
 800a794:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800a798:	2300      	movs	r3, #0
}
 800a79a:	4618      	mov	r0, r3
 800a79c:	3714      	adds	r7, #20
 800a79e:	46bd      	mov	sp, r7
 800a7a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a7a4:	4770      	bx	lr
 800a7a6:	bf00      	nop
 800a7a8:	40012c00 	.word	0x40012c00
 800a7ac:	40013400 	.word	0x40013400
 800a7b0:	40015000 	.word	0x40015000

0800a7b4 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800a7b4:	b480      	push	{r7}
 800a7b6:	b083      	sub	sp, #12
 800a7b8:	af00      	add	r7, sp, #0
 800a7ba:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800a7bc:	bf00      	nop
 800a7be:	370c      	adds	r7, #12
 800a7c0:	46bd      	mov	sp, r7
 800a7c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a7c6:	4770      	bx	lr

0800a7c8 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800a7c8:	b480      	push	{r7}
 800a7ca:	b083      	sub	sp, #12
 800a7cc:	af00      	add	r7, sp, #0
 800a7ce:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800a7d0:	bf00      	nop
 800a7d2:	370c      	adds	r7, #12
 800a7d4:	46bd      	mov	sp, r7
 800a7d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a7da:	4770      	bx	lr

0800a7dc <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 800a7dc:	b480      	push	{r7}
 800a7de:	b083      	sub	sp, #12
 800a7e0:	af00      	add	r7, sp, #0
 800a7e2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 800a7e4:	bf00      	nop
 800a7e6:	370c      	adds	r7, #12
 800a7e8:	46bd      	mov	sp, r7
 800a7ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a7ee:	4770      	bx	lr

0800a7f0 <HAL_TIMEx_EncoderIndexCallback>:
  * @brief  Encoder index callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_EncoderIndexCallback(TIM_HandleTypeDef *htim)
{
 800a7f0:	b480      	push	{r7}
 800a7f2:	b083      	sub	sp, #12
 800a7f4:	af00      	add	r7, sp, #0
 800a7f6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_EncoderIndexCallback could be implemented in the user file
   */
}
 800a7f8:	bf00      	nop
 800a7fa:	370c      	adds	r7, #12
 800a7fc:	46bd      	mov	sp, r7
 800a7fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a802:	4770      	bx	lr

0800a804 <HAL_TIMEx_DirectionChangeCallback>:
  * @brief  Direction change callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_DirectionChangeCallback(TIM_HandleTypeDef *htim)
{
 800a804:	b480      	push	{r7}
 800a806:	b083      	sub	sp, #12
 800a808:	af00      	add	r7, sp, #0
 800a80a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_DirectionChangeCallback could be implemented in the user file
   */
}
 800a80c:	bf00      	nop
 800a80e:	370c      	adds	r7, #12
 800a810:	46bd      	mov	sp, r7
 800a812:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a816:	4770      	bx	lr

0800a818 <HAL_TIMEx_IndexErrorCallback>:
  * @brief  Index error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_IndexErrorCallback(TIM_HandleTypeDef *htim)
{
 800a818:	b480      	push	{r7}
 800a81a:	b083      	sub	sp, #12
 800a81c:	af00      	add	r7, sp, #0
 800a81e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_IndexErrorCallback could be implemented in the user file
   */
}
 800a820:	bf00      	nop
 800a822:	370c      	adds	r7, #12
 800a824:	46bd      	mov	sp, r7
 800a826:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a82a:	4770      	bx	lr

0800a82c <HAL_TIMEx_TransitionErrorCallback>:
  * @brief  Transition error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_TransitionErrorCallback(TIM_HandleTypeDef *htim)
{
 800a82c:	b480      	push	{r7}
 800a82e:	b083      	sub	sp, #12
 800a830:	af00      	add	r7, sp, #0
 800a832:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_TransitionErrorCallback could be implemented in the user file
   */
}
 800a834:	bf00      	nop
 800a836:	370c      	adds	r7, #12
 800a838:	46bd      	mov	sp, r7
 800a83a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a83e:	4770      	bx	lr

0800a840 <LL_EXTI_EnableIT_0_31>:
{
 800a840:	b480      	push	{r7}
 800a842:	b083      	sub	sp, #12
 800a844:	af00      	add	r7, sp, #0
 800a846:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->IMR1, ExtiLine);
 800a848:	4b05      	ldr	r3, [pc, #20]	; (800a860 <LL_EXTI_EnableIT_0_31+0x20>)
 800a84a:	681a      	ldr	r2, [r3, #0]
 800a84c:	4904      	ldr	r1, [pc, #16]	; (800a860 <LL_EXTI_EnableIT_0_31+0x20>)
 800a84e:	687b      	ldr	r3, [r7, #4]
 800a850:	4313      	orrs	r3, r2
 800a852:	600b      	str	r3, [r1, #0]
}
 800a854:	bf00      	nop
 800a856:	370c      	adds	r7, #12
 800a858:	46bd      	mov	sp, r7
 800a85a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a85e:	4770      	bx	lr
 800a860:	40010400 	.word	0x40010400

0800a864 <LL_EXTI_EnableIT_32_63>:
{
 800a864:	b480      	push	{r7}
 800a866:	b083      	sub	sp, #12
 800a868:	af00      	add	r7, sp, #0
 800a86a:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->IMR2, ExtiLine);
 800a86c:	4b05      	ldr	r3, [pc, #20]	; (800a884 <LL_EXTI_EnableIT_32_63+0x20>)
 800a86e:	6a1a      	ldr	r2, [r3, #32]
 800a870:	4904      	ldr	r1, [pc, #16]	; (800a884 <LL_EXTI_EnableIT_32_63+0x20>)
 800a872:	687b      	ldr	r3, [r7, #4]
 800a874:	4313      	orrs	r3, r2
 800a876:	620b      	str	r3, [r1, #32]
}
 800a878:	bf00      	nop
 800a87a:	370c      	adds	r7, #12
 800a87c:	46bd      	mov	sp, r7
 800a87e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a882:	4770      	bx	lr
 800a884:	40010400 	.word	0x40010400

0800a888 <LL_EXTI_DisableIT_0_31>:
{
 800a888:	b480      	push	{r7}
 800a88a:	b083      	sub	sp, #12
 800a88c:	af00      	add	r7, sp, #0
 800a88e:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->IMR1, ExtiLine);
 800a890:	4b06      	ldr	r3, [pc, #24]	; (800a8ac <LL_EXTI_DisableIT_0_31+0x24>)
 800a892:	681a      	ldr	r2, [r3, #0]
 800a894:	687b      	ldr	r3, [r7, #4]
 800a896:	43db      	mvns	r3, r3
 800a898:	4904      	ldr	r1, [pc, #16]	; (800a8ac <LL_EXTI_DisableIT_0_31+0x24>)
 800a89a:	4013      	ands	r3, r2
 800a89c:	600b      	str	r3, [r1, #0]
}
 800a89e:	bf00      	nop
 800a8a0:	370c      	adds	r7, #12
 800a8a2:	46bd      	mov	sp, r7
 800a8a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a8a8:	4770      	bx	lr
 800a8aa:	bf00      	nop
 800a8ac:	40010400 	.word	0x40010400

0800a8b0 <LL_EXTI_DisableIT_32_63>:
{
 800a8b0:	b480      	push	{r7}
 800a8b2:	b083      	sub	sp, #12
 800a8b4:	af00      	add	r7, sp, #0
 800a8b6:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->IMR2, ExtiLine);
 800a8b8:	4b06      	ldr	r3, [pc, #24]	; (800a8d4 <LL_EXTI_DisableIT_32_63+0x24>)
 800a8ba:	6a1a      	ldr	r2, [r3, #32]
 800a8bc:	687b      	ldr	r3, [r7, #4]
 800a8be:	43db      	mvns	r3, r3
 800a8c0:	4904      	ldr	r1, [pc, #16]	; (800a8d4 <LL_EXTI_DisableIT_32_63+0x24>)
 800a8c2:	4013      	ands	r3, r2
 800a8c4:	620b      	str	r3, [r1, #32]
}
 800a8c6:	bf00      	nop
 800a8c8:	370c      	adds	r7, #12
 800a8ca:	46bd      	mov	sp, r7
 800a8cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a8d0:	4770      	bx	lr
 800a8d2:	bf00      	nop
 800a8d4:	40010400 	.word	0x40010400

0800a8d8 <LL_EXTI_EnableEvent_0_31>:
{
 800a8d8:	b480      	push	{r7}
 800a8da:	b083      	sub	sp, #12
 800a8dc:	af00      	add	r7, sp, #0
 800a8de:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->EMR1, ExtiLine);
 800a8e0:	4b05      	ldr	r3, [pc, #20]	; (800a8f8 <LL_EXTI_EnableEvent_0_31+0x20>)
 800a8e2:	685a      	ldr	r2, [r3, #4]
 800a8e4:	4904      	ldr	r1, [pc, #16]	; (800a8f8 <LL_EXTI_EnableEvent_0_31+0x20>)
 800a8e6:	687b      	ldr	r3, [r7, #4]
 800a8e8:	4313      	orrs	r3, r2
 800a8ea:	604b      	str	r3, [r1, #4]
}
 800a8ec:	bf00      	nop
 800a8ee:	370c      	adds	r7, #12
 800a8f0:	46bd      	mov	sp, r7
 800a8f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a8f6:	4770      	bx	lr
 800a8f8:	40010400 	.word	0x40010400

0800a8fc <LL_EXTI_EnableEvent_32_63>:
{
 800a8fc:	b480      	push	{r7}
 800a8fe:	b083      	sub	sp, #12
 800a900:	af00      	add	r7, sp, #0
 800a902:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->EMR2, ExtiLine);
 800a904:	4b05      	ldr	r3, [pc, #20]	; (800a91c <LL_EXTI_EnableEvent_32_63+0x20>)
 800a906:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800a908:	4904      	ldr	r1, [pc, #16]	; (800a91c <LL_EXTI_EnableEvent_32_63+0x20>)
 800a90a:	687b      	ldr	r3, [r7, #4]
 800a90c:	4313      	orrs	r3, r2
 800a90e:	624b      	str	r3, [r1, #36]	; 0x24
}
 800a910:	bf00      	nop
 800a912:	370c      	adds	r7, #12
 800a914:	46bd      	mov	sp, r7
 800a916:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a91a:	4770      	bx	lr
 800a91c:	40010400 	.word	0x40010400

0800a920 <LL_EXTI_DisableEvent_0_31>:
{
 800a920:	b480      	push	{r7}
 800a922:	b083      	sub	sp, #12
 800a924:	af00      	add	r7, sp, #0
 800a926:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->EMR1, ExtiLine);
 800a928:	4b06      	ldr	r3, [pc, #24]	; (800a944 <LL_EXTI_DisableEvent_0_31+0x24>)
 800a92a:	685a      	ldr	r2, [r3, #4]
 800a92c:	687b      	ldr	r3, [r7, #4]
 800a92e:	43db      	mvns	r3, r3
 800a930:	4904      	ldr	r1, [pc, #16]	; (800a944 <LL_EXTI_DisableEvent_0_31+0x24>)
 800a932:	4013      	ands	r3, r2
 800a934:	604b      	str	r3, [r1, #4]
}
 800a936:	bf00      	nop
 800a938:	370c      	adds	r7, #12
 800a93a:	46bd      	mov	sp, r7
 800a93c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a940:	4770      	bx	lr
 800a942:	bf00      	nop
 800a944:	40010400 	.word	0x40010400

0800a948 <LL_EXTI_DisableEvent_32_63>:
{
 800a948:	b480      	push	{r7}
 800a94a:	b083      	sub	sp, #12
 800a94c:	af00      	add	r7, sp, #0
 800a94e:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->EMR2, ExtiLine);
 800a950:	4b06      	ldr	r3, [pc, #24]	; (800a96c <LL_EXTI_DisableEvent_32_63+0x24>)
 800a952:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800a954:	687b      	ldr	r3, [r7, #4]
 800a956:	43db      	mvns	r3, r3
 800a958:	4904      	ldr	r1, [pc, #16]	; (800a96c <LL_EXTI_DisableEvent_32_63+0x24>)
 800a95a:	4013      	ands	r3, r2
 800a95c:	624b      	str	r3, [r1, #36]	; 0x24
}
 800a95e:	bf00      	nop
 800a960:	370c      	adds	r7, #12
 800a962:	46bd      	mov	sp, r7
 800a964:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a968:	4770      	bx	lr
 800a96a:	bf00      	nop
 800a96c:	40010400 	.word	0x40010400

0800a970 <LL_EXTI_EnableRisingTrig_0_31>:
{
 800a970:	b480      	push	{r7}
 800a972:	b083      	sub	sp, #12
 800a974:	af00      	add	r7, sp, #0
 800a976:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->RTSR1, ExtiLine);
 800a978:	4b05      	ldr	r3, [pc, #20]	; (800a990 <LL_EXTI_EnableRisingTrig_0_31+0x20>)
 800a97a:	689a      	ldr	r2, [r3, #8]
 800a97c:	4904      	ldr	r1, [pc, #16]	; (800a990 <LL_EXTI_EnableRisingTrig_0_31+0x20>)
 800a97e:	687b      	ldr	r3, [r7, #4]
 800a980:	4313      	orrs	r3, r2
 800a982:	608b      	str	r3, [r1, #8]
}
 800a984:	bf00      	nop
 800a986:	370c      	adds	r7, #12
 800a988:	46bd      	mov	sp, r7
 800a98a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a98e:	4770      	bx	lr
 800a990:	40010400 	.word	0x40010400

0800a994 <LL_EXTI_EnableRisingTrig_32_63>:
{
 800a994:	b480      	push	{r7}
 800a996:	b083      	sub	sp, #12
 800a998:	af00      	add	r7, sp, #0
 800a99a:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->RTSR2, ExtiLine);
 800a99c:	4b05      	ldr	r3, [pc, #20]	; (800a9b4 <LL_EXTI_EnableRisingTrig_32_63+0x20>)
 800a99e:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800a9a0:	4904      	ldr	r1, [pc, #16]	; (800a9b4 <LL_EXTI_EnableRisingTrig_32_63+0x20>)
 800a9a2:	687b      	ldr	r3, [r7, #4]
 800a9a4:	4313      	orrs	r3, r2
 800a9a6:	628b      	str	r3, [r1, #40]	; 0x28
}
 800a9a8:	bf00      	nop
 800a9aa:	370c      	adds	r7, #12
 800a9ac:	46bd      	mov	sp, r7
 800a9ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a9b2:	4770      	bx	lr
 800a9b4:	40010400 	.word	0x40010400

0800a9b8 <LL_EXTI_DisableRisingTrig_0_31>:
{
 800a9b8:	b480      	push	{r7}
 800a9ba:	b083      	sub	sp, #12
 800a9bc:	af00      	add	r7, sp, #0
 800a9be:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->RTSR1, ExtiLine);
 800a9c0:	4b06      	ldr	r3, [pc, #24]	; (800a9dc <LL_EXTI_DisableRisingTrig_0_31+0x24>)
 800a9c2:	689a      	ldr	r2, [r3, #8]
 800a9c4:	687b      	ldr	r3, [r7, #4]
 800a9c6:	43db      	mvns	r3, r3
 800a9c8:	4904      	ldr	r1, [pc, #16]	; (800a9dc <LL_EXTI_DisableRisingTrig_0_31+0x24>)
 800a9ca:	4013      	ands	r3, r2
 800a9cc:	608b      	str	r3, [r1, #8]
}
 800a9ce:	bf00      	nop
 800a9d0:	370c      	adds	r7, #12
 800a9d2:	46bd      	mov	sp, r7
 800a9d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a9d8:	4770      	bx	lr
 800a9da:	bf00      	nop
 800a9dc:	40010400 	.word	0x40010400

0800a9e0 <LL_EXTI_DisableRisingTrig_32_63>:
{
 800a9e0:	b480      	push	{r7}
 800a9e2:	b083      	sub	sp, #12
 800a9e4:	af00      	add	r7, sp, #0
 800a9e6:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->RTSR2, ExtiLine);
 800a9e8:	4b06      	ldr	r3, [pc, #24]	; (800aa04 <LL_EXTI_DisableRisingTrig_32_63+0x24>)
 800a9ea:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800a9ec:	687b      	ldr	r3, [r7, #4]
 800a9ee:	43db      	mvns	r3, r3
 800a9f0:	4904      	ldr	r1, [pc, #16]	; (800aa04 <LL_EXTI_DisableRisingTrig_32_63+0x24>)
 800a9f2:	4013      	ands	r3, r2
 800a9f4:	628b      	str	r3, [r1, #40]	; 0x28
}
 800a9f6:	bf00      	nop
 800a9f8:	370c      	adds	r7, #12
 800a9fa:	46bd      	mov	sp, r7
 800a9fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa00:	4770      	bx	lr
 800aa02:	bf00      	nop
 800aa04:	40010400 	.word	0x40010400

0800aa08 <LL_EXTI_EnableFallingTrig_0_31>:
{
 800aa08:	b480      	push	{r7}
 800aa0a:	b083      	sub	sp, #12
 800aa0c:	af00      	add	r7, sp, #0
 800aa0e:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->FTSR1, ExtiLine);
 800aa10:	4b05      	ldr	r3, [pc, #20]	; (800aa28 <LL_EXTI_EnableFallingTrig_0_31+0x20>)
 800aa12:	68da      	ldr	r2, [r3, #12]
 800aa14:	4904      	ldr	r1, [pc, #16]	; (800aa28 <LL_EXTI_EnableFallingTrig_0_31+0x20>)
 800aa16:	687b      	ldr	r3, [r7, #4]
 800aa18:	4313      	orrs	r3, r2
 800aa1a:	60cb      	str	r3, [r1, #12]
}
 800aa1c:	bf00      	nop
 800aa1e:	370c      	adds	r7, #12
 800aa20:	46bd      	mov	sp, r7
 800aa22:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa26:	4770      	bx	lr
 800aa28:	40010400 	.word	0x40010400

0800aa2c <LL_EXTI_EnableFallingTrig_32_63>:
{
 800aa2c:	b480      	push	{r7}
 800aa2e:	b083      	sub	sp, #12
 800aa30:	af00      	add	r7, sp, #0
 800aa32:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->FTSR2, ExtiLine);
 800aa34:	4b05      	ldr	r3, [pc, #20]	; (800aa4c <LL_EXTI_EnableFallingTrig_32_63+0x20>)
 800aa36:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800aa38:	4904      	ldr	r1, [pc, #16]	; (800aa4c <LL_EXTI_EnableFallingTrig_32_63+0x20>)
 800aa3a:	687b      	ldr	r3, [r7, #4]
 800aa3c:	4313      	orrs	r3, r2
 800aa3e:	62cb      	str	r3, [r1, #44]	; 0x2c
}
 800aa40:	bf00      	nop
 800aa42:	370c      	adds	r7, #12
 800aa44:	46bd      	mov	sp, r7
 800aa46:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa4a:	4770      	bx	lr
 800aa4c:	40010400 	.word	0x40010400

0800aa50 <LL_EXTI_DisableFallingTrig_0_31>:
{
 800aa50:	b480      	push	{r7}
 800aa52:	b083      	sub	sp, #12
 800aa54:	af00      	add	r7, sp, #0
 800aa56:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->FTSR1, ExtiLine);
 800aa58:	4b06      	ldr	r3, [pc, #24]	; (800aa74 <LL_EXTI_DisableFallingTrig_0_31+0x24>)
 800aa5a:	68da      	ldr	r2, [r3, #12]
 800aa5c:	687b      	ldr	r3, [r7, #4]
 800aa5e:	43db      	mvns	r3, r3
 800aa60:	4904      	ldr	r1, [pc, #16]	; (800aa74 <LL_EXTI_DisableFallingTrig_0_31+0x24>)
 800aa62:	4013      	ands	r3, r2
 800aa64:	60cb      	str	r3, [r1, #12]
}
 800aa66:	bf00      	nop
 800aa68:	370c      	adds	r7, #12
 800aa6a:	46bd      	mov	sp, r7
 800aa6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa70:	4770      	bx	lr
 800aa72:	bf00      	nop
 800aa74:	40010400 	.word	0x40010400

0800aa78 <LL_EXTI_DisableFallingTrig_32_63>:
{
 800aa78:	b480      	push	{r7}
 800aa7a:	b083      	sub	sp, #12
 800aa7c:	af00      	add	r7, sp, #0
 800aa7e:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->FTSR2, ExtiLine);
 800aa80:	4b06      	ldr	r3, [pc, #24]	; (800aa9c <LL_EXTI_DisableFallingTrig_32_63+0x24>)
 800aa82:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800aa84:	687b      	ldr	r3, [r7, #4]
 800aa86:	43db      	mvns	r3, r3
 800aa88:	4904      	ldr	r1, [pc, #16]	; (800aa9c <LL_EXTI_DisableFallingTrig_32_63+0x24>)
 800aa8a:	4013      	ands	r3, r2
 800aa8c:	62cb      	str	r3, [r1, #44]	; 0x2c
}
 800aa8e:	bf00      	nop
 800aa90:	370c      	adds	r7, #12
 800aa92:	46bd      	mov	sp, r7
 800aa94:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa98:	4770      	bx	lr
 800aa9a:	bf00      	nop
 800aa9c:	40010400 	.word	0x40010400

0800aaa0 <LL_EXTI_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - 0x00: EXTI registers are initialized
  *          - any other calue : wrong configuration
  */
uint32_t LL_EXTI_Init(LL_EXTI_InitTypeDef *EXTI_InitStruct)
{
 800aaa0:	b580      	push	{r7, lr}
 800aaa2:	b084      	sub	sp, #16
 800aaa4:	af00      	add	r7, sp, #0
 800aaa6:	6078      	str	r0, [r7, #4]
  uint32_t status = 0x00u;
 800aaa8:	2300      	movs	r3, #0
 800aaaa:	60fb      	str	r3, [r7, #12]
  assert_param(IS_LL_EXTI_LINE_32_63(EXTI_InitStruct->Line_32_63));
  assert_param(IS_FUNCTIONAL_STATE(EXTI_InitStruct->LineCommand));
  assert_param(IS_LL_EXTI_MODE(EXTI_InitStruct->Mode));

  /* ENABLE LineCommand */
  if (EXTI_InitStruct->LineCommand != DISABLE)
 800aaac:	687b      	ldr	r3, [r7, #4]
 800aaae:	7a1b      	ldrb	r3, [r3, #8]
 800aab0:	2b00      	cmp	r3, #0
 800aab2:	f000 80c8 	beq.w	800ac46 <LL_EXTI_Init+0x1a6>
  {
    assert_param(IS_LL_EXTI_TRIGGER(EXTI_InitStruct->Trigger));

    /* Configure EXTI Lines in range from 0 to 31 */
    if (EXTI_InitStruct->Line_0_31 != LL_EXTI_LINE_NONE)
 800aab6:	687b      	ldr	r3, [r7, #4]
 800aab8:	681b      	ldr	r3, [r3, #0]
 800aaba:	2b00      	cmp	r3, #0
 800aabc:	d05d      	beq.n	800ab7a <LL_EXTI_Init+0xda>
    {
      switch (EXTI_InitStruct->Mode)
 800aabe:	687b      	ldr	r3, [r7, #4]
 800aac0:	7a5b      	ldrb	r3, [r3, #9]
 800aac2:	2b01      	cmp	r3, #1
 800aac4:	d00e      	beq.n	800aae4 <LL_EXTI_Init+0x44>
 800aac6:	2b02      	cmp	r3, #2
 800aac8:	d017      	beq.n	800aafa <LL_EXTI_Init+0x5a>
 800aaca:	2b00      	cmp	r3, #0
 800aacc:	d120      	bne.n	800ab10 <LL_EXTI_Init+0x70>
      {
        case LL_EXTI_MODE_IT:
          /* First Disable Event on provided Lines */
          LL_EXTI_DisableEvent_0_31(EXTI_InitStruct->Line_0_31);
 800aace:	687b      	ldr	r3, [r7, #4]
 800aad0:	681b      	ldr	r3, [r3, #0]
 800aad2:	4618      	mov	r0, r3
 800aad4:	f7ff ff24 	bl	800a920 <LL_EXTI_DisableEvent_0_31>
          /* Then Enable IT on provided Lines */
          LL_EXTI_EnableIT_0_31(EXTI_InitStruct->Line_0_31);
 800aad8:	687b      	ldr	r3, [r7, #4]
 800aada:	681b      	ldr	r3, [r3, #0]
 800aadc:	4618      	mov	r0, r3
 800aade:	f7ff feaf 	bl	800a840 <LL_EXTI_EnableIT_0_31>
          break;
 800aae2:	e018      	b.n	800ab16 <LL_EXTI_Init+0x76>
        case LL_EXTI_MODE_EVENT:
          /* First Disable IT on provided Lines */
          LL_EXTI_DisableIT_0_31(EXTI_InitStruct->Line_0_31);
 800aae4:	687b      	ldr	r3, [r7, #4]
 800aae6:	681b      	ldr	r3, [r3, #0]
 800aae8:	4618      	mov	r0, r3
 800aaea:	f7ff fecd 	bl	800a888 <LL_EXTI_DisableIT_0_31>
          /* Then Enable Event on provided Lines */
          LL_EXTI_EnableEvent_0_31(EXTI_InitStruct->Line_0_31);
 800aaee:	687b      	ldr	r3, [r7, #4]
 800aaf0:	681b      	ldr	r3, [r3, #0]
 800aaf2:	4618      	mov	r0, r3
 800aaf4:	f7ff fef0 	bl	800a8d8 <LL_EXTI_EnableEvent_0_31>
          break;
 800aaf8:	e00d      	b.n	800ab16 <LL_EXTI_Init+0x76>
        case LL_EXTI_MODE_IT_EVENT:
          /* Directly Enable IT on provided Lines */
          LL_EXTI_EnableIT_0_31(EXTI_InitStruct->Line_0_31);
 800aafa:	687b      	ldr	r3, [r7, #4]
 800aafc:	681b      	ldr	r3, [r3, #0]
 800aafe:	4618      	mov	r0, r3
 800ab00:	f7ff fe9e 	bl	800a840 <LL_EXTI_EnableIT_0_31>
          /* Directly Enable Event on provided Lines */
          LL_EXTI_EnableEvent_0_31(EXTI_InitStruct->Line_0_31);
 800ab04:	687b      	ldr	r3, [r7, #4]
 800ab06:	681b      	ldr	r3, [r3, #0]
 800ab08:	4618      	mov	r0, r3
 800ab0a:	f7ff fee5 	bl	800a8d8 <LL_EXTI_EnableEvent_0_31>
          break;
 800ab0e:	e002      	b.n	800ab16 <LL_EXTI_Init+0x76>
        default:
          status = 0x01u;
 800ab10:	2301      	movs	r3, #1
 800ab12:	60fb      	str	r3, [r7, #12]
          break;
 800ab14:	bf00      	nop
      }
      if (EXTI_InitStruct->Trigger != LL_EXTI_TRIGGER_NONE)
 800ab16:	687b      	ldr	r3, [r7, #4]
 800ab18:	7a9b      	ldrb	r3, [r3, #10]
 800ab1a:	2b00      	cmp	r3, #0
 800ab1c:	d02d      	beq.n	800ab7a <LL_EXTI_Init+0xda>
      {
        switch (EXTI_InitStruct->Trigger)
 800ab1e:	687b      	ldr	r3, [r7, #4]
 800ab20:	7a9b      	ldrb	r3, [r3, #10]
 800ab22:	2b02      	cmp	r3, #2
 800ab24:	d00e      	beq.n	800ab44 <LL_EXTI_Init+0xa4>
 800ab26:	2b03      	cmp	r3, #3
 800ab28:	d017      	beq.n	800ab5a <LL_EXTI_Init+0xba>
 800ab2a:	2b01      	cmp	r3, #1
 800ab2c:	d120      	bne.n	800ab70 <LL_EXTI_Init+0xd0>
        {
          case LL_EXTI_TRIGGER_RISING:
            /* First Disable Falling Trigger on provided Lines */
            LL_EXTI_DisableFallingTrig_0_31(EXTI_InitStruct->Line_0_31);
 800ab2e:	687b      	ldr	r3, [r7, #4]
 800ab30:	681b      	ldr	r3, [r3, #0]
 800ab32:	4618      	mov	r0, r3
 800ab34:	f7ff ff8c 	bl	800aa50 <LL_EXTI_DisableFallingTrig_0_31>
            /* Then Enable Rising Trigger on provided Lines */
            LL_EXTI_EnableRisingTrig_0_31(EXTI_InitStruct->Line_0_31);
 800ab38:	687b      	ldr	r3, [r7, #4]
 800ab3a:	681b      	ldr	r3, [r3, #0]
 800ab3c:	4618      	mov	r0, r3
 800ab3e:	f7ff ff17 	bl	800a970 <LL_EXTI_EnableRisingTrig_0_31>
            break;
 800ab42:	e01b      	b.n	800ab7c <LL_EXTI_Init+0xdc>
          case LL_EXTI_TRIGGER_FALLING:
            /* First Disable Rising Trigger on provided Lines */
            LL_EXTI_DisableRisingTrig_0_31(EXTI_InitStruct->Line_0_31);
 800ab44:	687b      	ldr	r3, [r7, #4]
 800ab46:	681b      	ldr	r3, [r3, #0]
 800ab48:	4618      	mov	r0, r3
 800ab4a:	f7ff ff35 	bl	800a9b8 <LL_EXTI_DisableRisingTrig_0_31>
            /* Then Enable Falling Trigger on provided Lines */
            LL_EXTI_EnableFallingTrig_0_31(EXTI_InitStruct->Line_0_31);
 800ab4e:	687b      	ldr	r3, [r7, #4]
 800ab50:	681b      	ldr	r3, [r3, #0]
 800ab52:	4618      	mov	r0, r3
 800ab54:	f7ff ff58 	bl	800aa08 <LL_EXTI_EnableFallingTrig_0_31>
            break;
 800ab58:	e010      	b.n	800ab7c <LL_EXTI_Init+0xdc>
          case LL_EXTI_TRIGGER_RISING_FALLING:
            /* Enable Rising Trigger on provided Lines */
            LL_EXTI_EnableRisingTrig_0_31(EXTI_InitStruct->Line_0_31);
 800ab5a:	687b      	ldr	r3, [r7, #4]
 800ab5c:	681b      	ldr	r3, [r3, #0]
 800ab5e:	4618      	mov	r0, r3
 800ab60:	f7ff ff06 	bl	800a970 <LL_EXTI_EnableRisingTrig_0_31>
            /* Enable Falling Trigger on provided Lines */
            LL_EXTI_EnableFallingTrig_0_31(EXTI_InitStruct->Line_0_31);
 800ab64:	687b      	ldr	r3, [r7, #4]
 800ab66:	681b      	ldr	r3, [r3, #0]
 800ab68:	4618      	mov	r0, r3
 800ab6a:	f7ff ff4d 	bl	800aa08 <LL_EXTI_EnableFallingTrig_0_31>
            break;
 800ab6e:	e005      	b.n	800ab7c <LL_EXTI_Init+0xdc>
          default:
            status |= 0x02u;
 800ab70:	68fb      	ldr	r3, [r7, #12]
 800ab72:	f043 0302 	orr.w	r3, r3, #2
 800ab76:	60fb      	str	r3, [r7, #12]
            break;
 800ab78:	e000      	b.n	800ab7c <LL_EXTI_Init+0xdc>
        }
      }
 800ab7a:	bf00      	nop
    }
    /* Configure EXTI Lines in range from 32 to 63 */
    if (EXTI_InitStruct->Line_32_63 != LL_EXTI_LINE_NONE)
 800ab7c:	687b      	ldr	r3, [r7, #4]
 800ab7e:	685b      	ldr	r3, [r3, #4]
 800ab80:	2b00      	cmp	r3, #0
 800ab82:	d075      	beq.n	800ac70 <LL_EXTI_Init+0x1d0>
    {
      switch (EXTI_InitStruct->Mode)
 800ab84:	687b      	ldr	r3, [r7, #4]
 800ab86:	7a5b      	ldrb	r3, [r3, #9]
 800ab88:	2b01      	cmp	r3, #1
 800ab8a:	d00e      	beq.n	800abaa <LL_EXTI_Init+0x10a>
 800ab8c:	2b02      	cmp	r3, #2
 800ab8e:	d017      	beq.n	800abc0 <LL_EXTI_Init+0x120>
 800ab90:	2b00      	cmp	r3, #0
 800ab92:	d120      	bne.n	800abd6 <LL_EXTI_Init+0x136>
      {
        case LL_EXTI_MODE_IT:
          /* First Disable Event on provided Lines */
          LL_EXTI_DisableEvent_32_63(EXTI_InitStruct->Line_32_63);
 800ab94:	687b      	ldr	r3, [r7, #4]
 800ab96:	685b      	ldr	r3, [r3, #4]
 800ab98:	4618      	mov	r0, r3
 800ab9a:	f7ff fed5 	bl	800a948 <LL_EXTI_DisableEvent_32_63>
          /* Then Enable IT on provided Lines */
          LL_EXTI_EnableIT_32_63(EXTI_InitStruct->Line_32_63);
 800ab9e:	687b      	ldr	r3, [r7, #4]
 800aba0:	685b      	ldr	r3, [r3, #4]
 800aba2:	4618      	mov	r0, r3
 800aba4:	f7ff fe5e 	bl	800a864 <LL_EXTI_EnableIT_32_63>
          break;
 800aba8:	e01a      	b.n	800abe0 <LL_EXTI_Init+0x140>
        case LL_EXTI_MODE_EVENT:
          /* First Disable IT on provided Lines */
          LL_EXTI_DisableIT_32_63(EXTI_InitStruct->Line_32_63);
 800abaa:	687b      	ldr	r3, [r7, #4]
 800abac:	685b      	ldr	r3, [r3, #4]
 800abae:	4618      	mov	r0, r3
 800abb0:	f7ff fe7e 	bl	800a8b0 <LL_EXTI_DisableIT_32_63>
          /* Then Enable Event on provided Lines */
          LL_EXTI_EnableEvent_32_63(EXTI_InitStruct->Line_32_63);
 800abb4:	687b      	ldr	r3, [r7, #4]
 800abb6:	685b      	ldr	r3, [r3, #4]
 800abb8:	4618      	mov	r0, r3
 800abba:	f7ff fe9f 	bl	800a8fc <LL_EXTI_EnableEvent_32_63>
          break;
 800abbe:	e00f      	b.n	800abe0 <LL_EXTI_Init+0x140>
        case LL_EXTI_MODE_IT_EVENT:
          /* Directly Enable IT on provided Lines */
          LL_EXTI_EnableIT_32_63(EXTI_InitStruct->Line_32_63);
 800abc0:	687b      	ldr	r3, [r7, #4]
 800abc2:	685b      	ldr	r3, [r3, #4]
 800abc4:	4618      	mov	r0, r3
 800abc6:	f7ff fe4d 	bl	800a864 <LL_EXTI_EnableIT_32_63>
          /* Directly Enable IT on provided Lines */
          LL_EXTI_EnableEvent_32_63(EXTI_InitStruct->Line_32_63);
 800abca:	687b      	ldr	r3, [r7, #4]
 800abcc:	685b      	ldr	r3, [r3, #4]
 800abce:	4618      	mov	r0, r3
 800abd0:	f7ff fe94 	bl	800a8fc <LL_EXTI_EnableEvent_32_63>
          break;
 800abd4:	e004      	b.n	800abe0 <LL_EXTI_Init+0x140>
        default:
          status |= 0x04u;
 800abd6:	68fb      	ldr	r3, [r7, #12]
 800abd8:	f043 0304 	orr.w	r3, r3, #4
 800abdc:	60fb      	str	r3, [r7, #12]
          break;
 800abde:	bf00      	nop
      }
      if (EXTI_InitStruct->Trigger != LL_EXTI_TRIGGER_NONE)
 800abe0:	687b      	ldr	r3, [r7, #4]
 800abe2:	7a9b      	ldrb	r3, [r3, #10]
 800abe4:	2b00      	cmp	r3, #0
 800abe6:	d043      	beq.n	800ac70 <LL_EXTI_Init+0x1d0>
      {
        switch (EXTI_InitStruct->Trigger)
 800abe8:	687b      	ldr	r3, [r7, #4]
 800abea:	7a9b      	ldrb	r3, [r3, #10]
 800abec:	2b02      	cmp	r3, #2
 800abee:	d00e      	beq.n	800ac0e <LL_EXTI_Init+0x16e>
 800abf0:	2b03      	cmp	r3, #3
 800abf2:	d017      	beq.n	800ac24 <LL_EXTI_Init+0x184>
 800abf4:	2b01      	cmp	r3, #1
 800abf6:	d120      	bne.n	800ac3a <LL_EXTI_Init+0x19a>
        {
          case LL_EXTI_TRIGGER_RISING:
            /* First Disable Falling Trigger on provided Lines */
            LL_EXTI_DisableFallingTrig_32_63(EXTI_InitStruct->Line_32_63);
 800abf8:	687b      	ldr	r3, [r7, #4]
 800abfa:	685b      	ldr	r3, [r3, #4]
 800abfc:	4618      	mov	r0, r3
 800abfe:	f7ff ff3b 	bl	800aa78 <LL_EXTI_DisableFallingTrig_32_63>
            /* Then Enable IT on provided Lines */
            LL_EXTI_EnableRisingTrig_32_63(EXTI_InitStruct->Line_32_63);
 800ac02:	687b      	ldr	r3, [r7, #4]
 800ac04:	685b      	ldr	r3, [r3, #4]
 800ac06:	4618      	mov	r0, r3
 800ac08:	f7ff fec4 	bl	800a994 <LL_EXTI_EnableRisingTrig_32_63>
            break;
 800ac0c:	e031      	b.n	800ac72 <LL_EXTI_Init+0x1d2>
          case LL_EXTI_TRIGGER_FALLING:
            /* First Disable Rising Trigger on provided Lines */
            LL_EXTI_DisableRisingTrig_32_63(EXTI_InitStruct->Line_32_63);
 800ac0e:	687b      	ldr	r3, [r7, #4]
 800ac10:	685b      	ldr	r3, [r3, #4]
 800ac12:	4618      	mov	r0, r3
 800ac14:	f7ff fee4 	bl	800a9e0 <LL_EXTI_DisableRisingTrig_32_63>
            /* Then Enable Falling Trigger on provided Lines */
            LL_EXTI_EnableFallingTrig_32_63(EXTI_InitStruct->Line_32_63);
 800ac18:	687b      	ldr	r3, [r7, #4]
 800ac1a:	685b      	ldr	r3, [r3, #4]
 800ac1c:	4618      	mov	r0, r3
 800ac1e:	f7ff ff05 	bl	800aa2c <LL_EXTI_EnableFallingTrig_32_63>
            break;
 800ac22:	e026      	b.n	800ac72 <LL_EXTI_Init+0x1d2>
          case LL_EXTI_TRIGGER_RISING_FALLING:
            /* Enable Rising Trigger on provided Lines */
            LL_EXTI_EnableRisingTrig_32_63(EXTI_InitStruct->Line_32_63);
 800ac24:	687b      	ldr	r3, [r7, #4]
 800ac26:	685b      	ldr	r3, [r3, #4]
 800ac28:	4618      	mov	r0, r3
 800ac2a:	f7ff feb3 	bl	800a994 <LL_EXTI_EnableRisingTrig_32_63>
            /* Enable Falling Trigger on provided Lines */
            LL_EXTI_EnableFallingTrig_32_63(EXTI_InitStruct->Line_32_63);
 800ac2e:	687b      	ldr	r3, [r7, #4]
 800ac30:	685b      	ldr	r3, [r3, #4]
 800ac32:	4618      	mov	r0, r3
 800ac34:	f7ff fefa 	bl	800aa2c <LL_EXTI_EnableFallingTrig_32_63>
            break;
 800ac38:	e01b      	b.n	800ac72 <LL_EXTI_Init+0x1d2>
          default:
            status |= 0x05u;
 800ac3a:	68fb      	ldr	r3, [r7, #12]
 800ac3c:	f043 0305 	orr.w	r3, r3, #5
 800ac40:	60fb      	str	r3, [r7, #12]
            break;
 800ac42:	bf00      	nop
 800ac44:	e015      	b.n	800ac72 <LL_EXTI_Init+0x1d2>
  }
  /* DISABLE LineCommand */
  else
  {
    /* De-configure IT EXTI Lines in range from 0 to 31 */
    LL_EXTI_DisableIT_0_31(EXTI_InitStruct->Line_0_31);
 800ac46:	687b      	ldr	r3, [r7, #4]
 800ac48:	681b      	ldr	r3, [r3, #0]
 800ac4a:	4618      	mov	r0, r3
 800ac4c:	f7ff fe1c 	bl	800a888 <LL_EXTI_DisableIT_0_31>
    /* De-configure Event EXTI Lines in range from 0 to 31 */
    LL_EXTI_DisableEvent_0_31(EXTI_InitStruct->Line_0_31);
 800ac50:	687b      	ldr	r3, [r7, #4]
 800ac52:	681b      	ldr	r3, [r3, #0]
 800ac54:	4618      	mov	r0, r3
 800ac56:	f7ff fe63 	bl	800a920 <LL_EXTI_DisableEvent_0_31>
    /* De-configure IT EXTI Lines in range from 32 to 63 */
    LL_EXTI_DisableIT_32_63(EXTI_InitStruct->Line_32_63);
 800ac5a:	687b      	ldr	r3, [r7, #4]
 800ac5c:	685b      	ldr	r3, [r3, #4]
 800ac5e:	4618      	mov	r0, r3
 800ac60:	f7ff fe26 	bl	800a8b0 <LL_EXTI_DisableIT_32_63>
    /* De-configure Event EXTI Lines in range from 32 to 63 */
    LL_EXTI_DisableEvent_32_63(EXTI_InitStruct->Line_32_63);
 800ac64:	687b      	ldr	r3, [r7, #4]
 800ac66:	685b      	ldr	r3, [r3, #4]
 800ac68:	4618      	mov	r0, r3
 800ac6a:	f7ff fe6d 	bl	800a948 <LL_EXTI_DisableEvent_32_63>
 800ac6e:	e000      	b.n	800ac72 <LL_EXTI_Init+0x1d2>
      }
 800ac70:	bf00      	nop
  }

  return status;
 800ac72:	68fb      	ldr	r3, [r7, #12]
}
 800ac74:	4618      	mov	r0, r3
 800ac76:	3710      	adds	r7, #16
 800ac78:	46bd      	mov	sp, r7
 800ac7a:	bd80      	pop	{r7, pc}

0800ac7c <LL_GPIO_SetPinMode>:
{
 800ac7c:	b480      	push	{r7}
 800ac7e:	b089      	sub	sp, #36	; 0x24
 800ac80:	af00      	add	r7, sp, #0
 800ac82:	60f8      	str	r0, [r7, #12]
 800ac84:	60b9      	str	r1, [r7, #8]
 800ac86:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->MODER, (GPIO_MODER_MODE0 << (POSITION_VAL(Pin) * 2U)), (Mode << (POSITION_VAL(Pin) * 2U)));
 800ac88:	68fb      	ldr	r3, [r7, #12]
 800ac8a:	681a      	ldr	r2, [r3, #0]
 800ac8c:	68bb      	ldr	r3, [r7, #8]
 800ac8e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800ac90:	697b      	ldr	r3, [r7, #20]
 800ac92:	fa93 f3a3 	rbit	r3, r3
 800ac96:	613b      	str	r3, [r7, #16]
  return result;
 800ac98:	693b      	ldr	r3, [r7, #16]
 800ac9a:	fab3 f383 	clz	r3, r3
 800ac9e:	b2db      	uxtb	r3, r3
 800aca0:	005b      	lsls	r3, r3, #1
 800aca2:	2103      	movs	r1, #3
 800aca4:	fa01 f303 	lsl.w	r3, r1, r3
 800aca8:	43db      	mvns	r3, r3
 800acaa:	401a      	ands	r2, r3
 800acac:	68bb      	ldr	r3, [r7, #8]
 800acae:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800acb0:	69fb      	ldr	r3, [r7, #28]
 800acb2:	fa93 f3a3 	rbit	r3, r3
 800acb6:	61bb      	str	r3, [r7, #24]
  return result;
 800acb8:	69bb      	ldr	r3, [r7, #24]
 800acba:	fab3 f383 	clz	r3, r3
 800acbe:	b2db      	uxtb	r3, r3
 800acc0:	005b      	lsls	r3, r3, #1
 800acc2:	6879      	ldr	r1, [r7, #4]
 800acc4:	fa01 f303 	lsl.w	r3, r1, r3
 800acc8:	431a      	orrs	r2, r3
 800acca:	68fb      	ldr	r3, [r7, #12]
 800accc:	601a      	str	r2, [r3, #0]
}
 800acce:	bf00      	nop
 800acd0:	3724      	adds	r7, #36	; 0x24
 800acd2:	46bd      	mov	sp, r7
 800acd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800acd8:	4770      	bx	lr

0800acda <LL_GPIO_SetPinOutputType>:
{
 800acda:	b480      	push	{r7}
 800acdc:	b085      	sub	sp, #20
 800acde:	af00      	add	r7, sp, #0
 800ace0:	60f8      	str	r0, [r7, #12]
 800ace2:	60b9      	str	r1, [r7, #8]
 800ace4:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->OTYPER, PinMask, (PinMask * OutputType));
 800ace6:	68fb      	ldr	r3, [r7, #12]
 800ace8:	685a      	ldr	r2, [r3, #4]
 800acea:	68bb      	ldr	r3, [r7, #8]
 800acec:	43db      	mvns	r3, r3
 800acee:	401a      	ands	r2, r3
 800acf0:	68bb      	ldr	r3, [r7, #8]
 800acf2:	6879      	ldr	r1, [r7, #4]
 800acf4:	fb01 f303 	mul.w	r3, r1, r3
 800acf8:	431a      	orrs	r2, r3
 800acfa:	68fb      	ldr	r3, [r7, #12]
 800acfc:	605a      	str	r2, [r3, #4]
}
 800acfe:	bf00      	nop
 800ad00:	3714      	adds	r7, #20
 800ad02:	46bd      	mov	sp, r7
 800ad04:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ad08:	4770      	bx	lr

0800ad0a <LL_GPIO_SetPinSpeed>:
{
 800ad0a:	b480      	push	{r7}
 800ad0c:	b089      	sub	sp, #36	; 0x24
 800ad0e:	af00      	add	r7, sp, #0
 800ad10:	60f8      	str	r0, [r7, #12]
 800ad12:	60b9      	str	r1, [r7, #8]
 800ad14:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->OSPEEDR, (GPIO_OSPEEDR_OSPEED0 << (POSITION_VAL(Pin) * 2U)),
 800ad16:	68fb      	ldr	r3, [r7, #12]
 800ad18:	689a      	ldr	r2, [r3, #8]
 800ad1a:	68bb      	ldr	r3, [r7, #8]
 800ad1c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800ad1e:	697b      	ldr	r3, [r7, #20]
 800ad20:	fa93 f3a3 	rbit	r3, r3
 800ad24:	613b      	str	r3, [r7, #16]
  return result;
 800ad26:	693b      	ldr	r3, [r7, #16]
 800ad28:	fab3 f383 	clz	r3, r3
 800ad2c:	b2db      	uxtb	r3, r3
 800ad2e:	005b      	lsls	r3, r3, #1
 800ad30:	2103      	movs	r1, #3
 800ad32:	fa01 f303 	lsl.w	r3, r1, r3
 800ad36:	43db      	mvns	r3, r3
 800ad38:	401a      	ands	r2, r3
 800ad3a:	68bb      	ldr	r3, [r7, #8]
 800ad3c:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800ad3e:	69fb      	ldr	r3, [r7, #28]
 800ad40:	fa93 f3a3 	rbit	r3, r3
 800ad44:	61bb      	str	r3, [r7, #24]
  return result;
 800ad46:	69bb      	ldr	r3, [r7, #24]
 800ad48:	fab3 f383 	clz	r3, r3
 800ad4c:	b2db      	uxtb	r3, r3
 800ad4e:	005b      	lsls	r3, r3, #1
 800ad50:	6879      	ldr	r1, [r7, #4]
 800ad52:	fa01 f303 	lsl.w	r3, r1, r3
 800ad56:	431a      	orrs	r2, r3
 800ad58:	68fb      	ldr	r3, [r7, #12]
 800ad5a:	609a      	str	r2, [r3, #8]
}
 800ad5c:	bf00      	nop
 800ad5e:	3724      	adds	r7, #36	; 0x24
 800ad60:	46bd      	mov	sp, r7
 800ad62:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ad66:	4770      	bx	lr

0800ad68 <LL_GPIO_SetPinPull>:
{
 800ad68:	b480      	push	{r7}
 800ad6a:	b089      	sub	sp, #36	; 0x24
 800ad6c:	af00      	add	r7, sp, #0
 800ad6e:	60f8      	str	r0, [r7, #12]
 800ad70:	60b9      	str	r1, [r7, #8]
 800ad72:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->PUPDR, (GPIO_PUPDR_PUPD0 << (POSITION_VAL(Pin) * 2U)), (Pull << (POSITION_VAL(Pin) * 2U)));
 800ad74:	68fb      	ldr	r3, [r7, #12]
 800ad76:	68da      	ldr	r2, [r3, #12]
 800ad78:	68bb      	ldr	r3, [r7, #8]
 800ad7a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800ad7c:	697b      	ldr	r3, [r7, #20]
 800ad7e:	fa93 f3a3 	rbit	r3, r3
 800ad82:	613b      	str	r3, [r7, #16]
  return result;
 800ad84:	693b      	ldr	r3, [r7, #16]
 800ad86:	fab3 f383 	clz	r3, r3
 800ad8a:	b2db      	uxtb	r3, r3
 800ad8c:	005b      	lsls	r3, r3, #1
 800ad8e:	2103      	movs	r1, #3
 800ad90:	fa01 f303 	lsl.w	r3, r1, r3
 800ad94:	43db      	mvns	r3, r3
 800ad96:	401a      	ands	r2, r3
 800ad98:	68bb      	ldr	r3, [r7, #8]
 800ad9a:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800ad9c:	69fb      	ldr	r3, [r7, #28]
 800ad9e:	fa93 f3a3 	rbit	r3, r3
 800ada2:	61bb      	str	r3, [r7, #24]
  return result;
 800ada4:	69bb      	ldr	r3, [r7, #24]
 800ada6:	fab3 f383 	clz	r3, r3
 800adaa:	b2db      	uxtb	r3, r3
 800adac:	005b      	lsls	r3, r3, #1
 800adae:	6879      	ldr	r1, [r7, #4]
 800adb0:	fa01 f303 	lsl.w	r3, r1, r3
 800adb4:	431a      	orrs	r2, r3
 800adb6:	68fb      	ldr	r3, [r7, #12]
 800adb8:	60da      	str	r2, [r3, #12]
}
 800adba:	bf00      	nop
 800adbc:	3724      	adds	r7, #36	; 0x24
 800adbe:	46bd      	mov	sp, r7
 800adc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800adc4:	4770      	bx	lr

0800adc6 <LL_GPIO_SetAFPin_0_7>:
{
 800adc6:	b480      	push	{r7}
 800adc8:	b089      	sub	sp, #36	; 0x24
 800adca:	af00      	add	r7, sp, #0
 800adcc:	60f8      	str	r0, [r7, #12]
 800adce:	60b9      	str	r1, [r7, #8]
 800add0:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->AFR[0], (GPIO_AFRL_AFSEL0 << (POSITION_VAL(Pin) * 4U)),
 800add2:	68fb      	ldr	r3, [r7, #12]
 800add4:	6a1a      	ldr	r2, [r3, #32]
 800add6:	68bb      	ldr	r3, [r7, #8]
 800add8:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800adda:	697b      	ldr	r3, [r7, #20]
 800addc:	fa93 f3a3 	rbit	r3, r3
 800ade0:	613b      	str	r3, [r7, #16]
  return result;
 800ade2:	693b      	ldr	r3, [r7, #16]
 800ade4:	fab3 f383 	clz	r3, r3
 800ade8:	b2db      	uxtb	r3, r3
 800adea:	009b      	lsls	r3, r3, #2
 800adec:	210f      	movs	r1, #15
 800adee:	fa01 f303 	lsl.w	r3, r1, r3
 800adf2:	43db      	mvns	r3, r3
 800adf4:	401a      	ands	r2, r3
 800adf6:	68bb      	ldr	r3, [r7, #8]
 800adf8:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800adfa:	69fb      	ldr	r3, [r7, #28]
 800adfc:	fa93 f3a3 	rbit	r3, r3
 800ae00:	61bb      	str	r3, [r7, #24]
  return result;
 800ae02:	69bb      	ldr	r3, [r7, #24]
 800ae04:	fab3 f383 	clz	r3, r3
 800ae08:	b2db      	uxtb	r3, r3
 800ae0a:	009b      	lsls	r3, r3, #2
 800ae0c:	6879      	ldr	r1, [r7, #4]
 800ae0e:	fa01 f303 	lsl.w	r3, r1, r3
 800ae12:	431a      	orrs	r2, r3
 800ae14:	68fb      	ldr	r3, [r7, #12]
 800ae16:	621a      	str	r2, [r3, #32]
}
 800ae18:	bf00      	nop
 800ae1a:	3724      	adds	r7, #36	; 0x24
 800ae1c:	46bd      	mov	sp, r7
 800ae1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ae22:	4770      	bx	lr

0800ae24 <LL_GPIO_SetAFPin_8_15>:
{
 800ae24:	b480      	push	{r7}
 800ae26:	b089      	sub	sp, #36	; 0x24
 800ae28:	af00      	add	r7, sp, #0
 800ae2a:	60f8      	str	r0, [r7, #12]
 800ae2c:	60b9      	str	r1, [r7, #8]
 800ae2e:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->AFR[1], (GPIO_AFRH_AFSEL8 << (POSITION_VAL(Pin >> 8U) * 4U)),
 800ae30:	68fb      	ldr	r3, [r7, #12]
 800ae32:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800ae34:	68bb      	ldr	r3, [r7, #8]
 800ae36:	0a1b      	lsrs	r3, r3, #8
 800ae38:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800ae3a:	697b      	ldr	r3, [r7, #20]
 800ae3c:	fa93 f3a3 	rbit	r3, r3
 800ae40:	613b      	str	r3, [r7, #16]
  return result;
 800ae42:	693b      	ldr	r3, [r7, #16]
 800ae44:	fab3 f383 	clz	r3, r3
 800ae48:	b2db      	uxtb	r3, r3
 800ae4a:	009b      	lsls	r3, r3, #2
 800ae4c:	210f      	movs	r1, #15
 800ae4e:	fa01 f303 	lsl.w	r3, r1, r3
 800ae52:	43db      	mvns	r3, r3
 800ae54:	401a      	ands	r2, r3
 800ae56:	68bb      	ldr	r3, [r7, #8]
 800ae58:	0a1b      	lsrs	r3, r3, #8
 800ae5a:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800ae5c:	69fb      	ldr	r3, [r7, #28]
 800ae5e:	fa93 f3a3 	rbit	r3, r3
 800ae62:	61bb      	str	r3, [r7, #24]
  return result;
 800ae64:	69bb      	ldr	r3, [r7, #24]
 800ae66:	fab3 f383 	clz	r3, r3
 800ae6a:	b2db      	uxtb	r3, r3
 800ae6c:	009b      	lsls	r3, r3, #2
 800ae6e:	6879      	ldr	r1, [r7, #4]
 800ae70:	fa01 f303 	lsl.w	r3, r1, r3
 800ae74:	431a      	orrs	r2, r3
 800ae76:	68fb      	ldr	r3, [r7, #12]
 800ae78:	625a      	str	r2, [r3, #36]	; 0x24
}
 800ae7a:	bf00      	nop
 800ae7c:	3724      	adds	r7, #36	; 0x24
 800ae7e:	46bd      	mov	sp, r7
 800ae80:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ae84:	4770      	bx	lr

0800ae86 <LL_GPIO_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: GPIO registers are initialized according to GPIO_InitStruct content
  *          - ERROR:   Not applicable
  */
ErrorStatus LL_GPIO_Init(GPIO_TypeDef *GPIOx, LL_GPIO_InitTypeDef *GPIO_InitStruct)
{
 800ae86:	b580      	push	{r7, lr}
 800ae88:	b086      	sub	sp, #24
 800ae8a:	af00      	add	r7, sp, #0
 800ae8c:	6078      	str	r0, [r7, #4]
 800ae8e:	6039      	str	r1, [r7, #0]
  assert_param(IS_LL_GPIO_MODE(GPIO_InitStruct->Mode));
  assert_param(IS_LL_GPIO_PULL(GPIO_InitStruct->Pull));

  /* ------------------------- Configure the port pins ---------------- */
  /* Initialize  pinpos on first pin set */
  pinpos = POSITION_VAL(GPIO_InitStruct->Pin);
 800ae90:	683b      	ldr	r3, [r7, #0]
 800ae92:	681b      	ldr	r3, [r3, #0]
 800ae94:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800ae96:	68fb      	ldr	r3, [r7, #12]
 800ae98:	fa93 f3a3 	rbit	r3, r3
 800ae9c:	60bb      	str	r3, [r7, #8]
  return result;
 800ae9e:	68bb      	ldr	r3, [r7, #8]
 800aea0:	fab3 f383 	clz	r3, r3
 800aea4:	b2db      	uxtb	r3, r3
 800aea6:	617b      	str	r3, [r7, #20]

  /* Configure the port pins */
  while (((GPIO_InitStruct->Pin) >> pinpos) != 0x00000000U)
 800aea8:	e040      	b.n	800af2c <LL_GPIO_Init+0xa6>
  {
    /* Get current io position */
    currentpin = (GPIO_InitStruct->Pin) & (0x00000001UL << pinpos);
 800aeaa:	683b      	ldr	r3, [r7, #0]
 800aeac:	681a      	ldr	r2, [r3, #0]
 800aeae:	2101      	movs	r1, #1
 800aeb0:	697b      	ldr	r3, [r7, #20]
 800aeb2:	fa01 f303 	lsl.w	r3, r1, r3
 800aeb6:	4013      	ands	r3, r2
 800aeb8:	613b      	str	r3, [r7, #16]

    if (currentpin != 0x00u)
 800aeba:	693b      	ldr	r3, [r7, #16]
 800aebc:	2b00      	cmp	r3, #0
 800aebe:	d032      	beq.n	800af26 <LL_GPIO_Init+0xa0>
    {
      /* Pin Mode configuration */
      LL_GPIO_SetPinMode(GPIOx, currentpin, GPIO_InitStruct->Mode);
 800aec0:	683b      	ldr	r3, [r7, #0]
 800aec2:	685b      	ldr	r3, [r3, #4]
 800aec4:	461a      	mov	r2, r3
 800aec6:	6939      	ldr	r1, [r7, #16]
 800aec8:	6878      	ldr	r0, [r7, #4]
 800aeca:	f7ff fed7 	bl	800ac7c <LL_GPIO_SetPinMode>

      if ((GPIO_InitStruct->Mode == LL_GPIO_MODE_OUTPUT) || (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE))
 800aece:	683b      	ldr	r3, [r7, #0]
 800aed0:	685b      	ldr	r3, [r3, #4]
 800aed2:	2b01      	cmp	r3, #1
 800aed4:	d003      	beq.n	800aede <LL_GPIO_Init+0x58>
 800aed6:	683b      	ldr	r3, [r7, #0]
 800aed8:	685b      	ldr	r3, [r3, #4]
 800aeda:	2b02      	cmp	r3, #2
 800aedc:	d106      	bne.n	800aeec <LL_GPIO_Init+0x66>
      {
        /* Check Speed mode parameters */
        assert_param(IS_LL_GPIO_SPEED(GPIO_InitStruct->Speed));

        /* Speed mode configuration */
        LL_GPIO_SetPinSpeed(GPIOx, currentpin, GPIO_InitStruct->Speed);
 800aede:	683b      	ldr	r3, [r7, #0]
 800aee0:	689b      	ldr	r3, [r3, #8]
 800aee2:	461a      	mov	r2, r3
 800aee4:	6939      	ldr	r1, [r7, #16]
 800aee6:	6878      	ldr	r0, [r7, #4]
 800aee8:	f7ff ff0f 	bl	800ad0a <LL_GPIO_SetPinSpeed>
      }

      /* Pull-up Pull down resistor configuration*/
      LL_GPIO_SetPinPull(GPIOx, currentpin, GPIO_InitStruct->Pull);
 800aeec:	683b      	ldr	r3, [r7, #0]
 800aeee:	691b      	ldr	r3, [r3, #16]
 800aef0:	461a      	mov	r2, r3
 800aef2:	6939      	ldr	r1, [r7, #16]
 800aef4:	6878      	ldr	r0, [r7, #4]
 800aef6:	f7ff ff37 	bl	800ad68 <LL_GPIO_SetPinPull>

      if (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE)
 800aefa:	683b      	ldr	r3, [r7, #0]
 800aefc:	685b      	ldr	r3, [r3, #4]
 800aefe:	2b02      	cmp	r3, #2
 800af00:	d111      	bne.n	800af26 <LL_GPIO_Init+0xa0>
      {
        /* Check Alternate parameter */
        assert_param(IS_LL_GPIO_ALTERNATE(GPIO_InitStruct->Alternate));

        /* Speed mode configuration */
        if (currentpin < LL_GPIO_PIN_8)
 800af02:	693b      	ldr	r3, [r7, #16]
 800af04:	2bff      	cmp	r3, #255	; 0xff
 800af06:	d807      	bhi.n	800af18 <LL_GPIO_Init+0x92>
        {
          LL_GPIO_SetAFPin_0_7(GPIOx, currentpin, GPIO_InitStruct->Alternate);
 800af08:	683b      	ldr	r3, [r7, #0]
 800af0a:	695b      	ldr	r3, [r3, #20]
 800af0c:	461a      	mov	r2, r3
 800af0e:	6939      	ldr	r1, [r7, #16]
 800af10:	6878      	ldr	r0, [r7, #4]
 800af12:	f7ff ff58 	bl	800adc6 <LL_GPIO_SetAFPin_0_7>
 800af16:	e006      	b.n	800af26 <LL_GPIO_Init+0xa0>
        }
        else
        {
          LL_GPIO_SetAFPin_8_15(GPIOx, currentpin, GPIO_InitStruct->Alternate);
 800af18:	683b      	ldr	r3, [r7, #0]
 800af1a:	695b      	ldr	r3, [r3, #20]
 800af1c:	461a      	mov	r2, r3
 800af1e:	6939      	ldr	r1, [r7, #16]
 800af20:	6878      	ldr	r0, [r7, #4]
 800af22:	f7ff ff7f 	bl	800ae24 <LL_GPIO_SetAFPin_8_15>
        }
      }
    }
    pinpos++;
 800af26:	697b      	ldr	r3, [r7, #20]
 800af28:	3301      	adds	r3, #1
 800af2a:	617b      	str	r3, [r7, #20]
  while (((GPIO_InitStruct->Pin) >> pinpos) != 0x00000000U)
 800af2c:	683b      	ldr	r3, [r7, #0]
 800af2e:	681a      	ldr	r2, [r3, #0]
 800af30:	697b      	ldr	r3, [r7, #20]
 800af32:	fa22 f303 	lsr.w	r3, r2, r3
 800af36:	2b00      	cmp	r3, #0
 800af38:	d1b7      	bne.n	800aeaa <LL_GPIO_Init+0x24>
  }

  if ((GPIO_InitStruct->Mode == LL_GPIO_MODE_OUTPUT) || (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE))
 800af3a:	683b      	ldr	r3, [r7, #0]
 800af3c:	685b      	ldr	r3, [r3, #4]
 800af3e:	2b01      	cmp	r3, #1
 800af40:	d003      	beq.n	800af4a <LL_GPIO_Init+0xc4>
 800af42:	683b      	ldr	r3, [r7, #0]
 800af44:	685b      	ldr	r3, [r3, #4]
 800af46:	2b02      	cmp	r3, #2
 800af48:	d107      	bne.n	800af5a <LL_GPIO_Init+0xd4>
  {
    /* Check Output mode parameters */
    assert_param(IS_LL_GPIO_OUTPUT_TYPE(GPIO_InitStruct->OutputType));

    /* Output mode configuration*/
    LL_GPIO_SetPinOutputType(GPIOx, GPIO_InitStruct->Pin, GPIO_InitStruct->OutputType);
 800af4a:	683b      	ldr	r3, [r7, #0]
 800af4c:	6819      	ldr	r1, [r3, #0]
 800af4e:	683b      	ldr	r3, [r7, #0]
 800af50:	68db      	ldr	r3, [r3, #12]
 800af52:	461a      	mov	r2, r3
 800af54:	6878      	ldr	r0, [r7, #4]
 800af56:	f7ff fec0 	bl	800acda <LL_GPIO_SetPinOutputType>

  }
  return (SUCCESS);
 800af5a:	2300      	movs	r3, #0
}
 800af5c:	4618      	mov	r0, r3
 800af5e:	3718      	adds	r7, #24
 800af60:	46bd      	mov	sp, r7
 800af62:	bd80      	pop	{r7, pc}

0800af64 <ILI9341_Draw_Bordered_Filled_Rectangle_Coord>:
 *
 *
 */

void ILI9341_Draw_Bordered_Filled_Rectangle_Coord(uint16_t x, uint16_t y, uint16_t w, uint16_t h, uint16_t inner_colour, uint8_t border_weight, uint8_t border_colour)
{
 800af64:	b590      	push	{r4, r7, lr}
 800af66:	b087      	sub	sp, #28
 800af68:	af02      	add	r7, sp, #8
 800af6a:	4604      	mov	r4, r0
 800af6c:	4608      	mov	r0, r1
 800af6e:	4611      	mov	r1, r2
 800af70:	461a      	mov	r2, r3
 800af72:	4623      	mov	r3, r4
 800af74:	80fb      	strh	r3, [r7, #6]
 800af76:	4603      	mov	r3, r0
 800af78:	80bb      	strh	r3, [r7, #4]
 800af7a:	460b      	mov	r3, r1
 800af7c:	807b      	strh	r3, [r7, #2]
 800af7e:	4613      	mov	r3, r2
 800af80:	803b      	strh	r3, [r7, #0]

	// Draw inwards (and shorter) for each level of border weight
	for(uint8_t b = 0; ; b++)
 800af82:	2300      	movs	r3, #0
 800af84:	73fb      	strb	r3, [r7, #15]
	{


		if(b > border_weight)
 800af86:	7bfa      	ldrb	r2, [r7, #15]
 800af88:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 800af8c:	429a      	cmp	r2, r3
 800af8e:	d93a      	bls.n	800b006 <ILI9341_Draw_Bordered_Filled_Rectangle_Coord+0xa2>
		{

			// stop before the inner space reaches zero! (hard fault)
			if( ((y + b) == ((y + h) - b)) || ((x + b) == ((x + w) - b)) )
 800af90:	88ba      	ldrh	r2, [r7, #4]
 800af92:	7bfb      	ldrb	r3, [r7, #15]
 800af94:	441a      	add	r2, r3
 800af96:	88b9      	ldrh	r1, [r7, #4]
 800af98:	883b      	ldrh	r3, [r7, #0]
 800af9a:	4419      	add	r1, r3
 800af9c:	7bfb      	ldrb	r3, [r7, #15]
 800af9e:	1acb      	subs	r3, r1, r3
 800afa0:	429a      	cmp	r2, r3
 800afa2:	f000 8090 	beq.w	800b0c6 <ILI9341_Draw_Bordered_Filled_Rectangle_Coord+0x162>
 800afa6:	88fa      	ldrh	r2, [r7, #6]
 800afa8:	7bfb      	ldrb	r3, [r7, #15]
 800afaa:	441a      	add	r2, r3
 800afac:	88f9      	ldrh	r1, [r7, #6]
 800afae:	887b      	ldrh	r3, [r7, #2]
 800afb0:	4419      	add	r1, r3
 800afb2:	7bfb      	ldrb	r3, [r7, #15]
 800afb4:	1acb      	subs	r3, r1, r3
 800afb6:	429a      	cmp	r2, r3
 800afb8:	f000 8085 	beq.w	800b0c6 <ILI9341_Draw_Bordered_Filled_Rectangle_Coord+0x162>
				// add final line?
				goto finish;
			}
			else
			{
				ILI9341_Draw_Rectangle(x + b, y + b, (w - (2*b)) + 1, (h - (2*b)) + 1, inner_colour, AREA_CHUNK);
 800afbc:	7bfb      	ldrb	r3, [r7, #15]
 800afbe:	b29a      	uxth	r2, r3
 800afc0:	88fb      	ldrh	r3, [r7, #6]
 800afc2:	4413      	add	r3, r2
 800afc4:	b298      	uxth	r0, r3
 800afc6:	7bfb      	ldrb	r3, [r7, #15]
 800afc8:	b29a      	uxth	r2, r3
 800afca:	88bb      	ldrh	r3, [r7, #4]
 800afcc:	4413      	add	r3, r2
 800afce:	b299      	uxth	r1, r3
 800afd0:	7bfb      	ldrb	r3, [r7, #15]
 800afd2:	b29b      	uxth	r3, r3
 800afd4:	005b      	lsls	r3, r3, #1
 800afd6:	b29b      	uxth	r3, r3
 800afd8:	887a      	ldrh	r2, [r7, #2]
 800afda:	1ad3      	subs	r3, r2, r3
 800afdc:	b29b      	uxth	r3, r3
 800afde:	3301      	adds	r3, #1
 800afe0:	b29c      	uxth	r4, r3
 800afe2:	7bfb      	ldrb	r3, [r7, #15]
 800afe4:	b29b      	uxth	r3, r3
 800afe6:	005b      	lsls	r3, r3, #1
 800afe8:	b29b      	uxth	r3, r3
 800afea:	883a      	ldrh	r2, [r7, #0]
 800afec:	1ad3      	subs	r3, r2, r3
 800afee:	b29b      	uxth	r3, r3
 800aff0:	3301      	adds	r3, #1
 800aff2:	b29a      	uxth	r2, r3
 800aff4:	2304      	movs	r3, #4
 800aff6:	9301      	str	r3, [sp, #4]
 800aff8:	8c3b      	ldrh	r3, [r7, #32]
 800affa:	9300      	str	r3, [sp, #0]
 800affc:	4613      	mov	r3, r2
 800affe:	4622      	mov	r2, r4
 800b000:	f000 fcd6 	bl	800b9b0 <ILI9341_Draw_Rectangle>
				goto finish;
 800b004:	e060      	b.n	800b0c8 <ILI9341_Draw_Bordered_Filled_Rectangle_Coord+0x164>
			}
		}

		// Horizontal lines
		ILI9341_Draw_Horizontal_Line(	x + b,
 800b006:	7bfb      	ldrb	r3, [r7, #15]
 800b008:	b29a      	uxth	r2, r3
 800b00a:	88fb      	ldrh	r3, [r7, #6]
 800b00c:	4413      	add	r3, r2
 800b00e:	b298      	uxth	r0, r3
 800b010:	7bfb      	ldrb	r3, [r7, #15]
 800b012:	b29a      	uxth	r2, r3
 800b014:	88bb      	ldrh	r3, [r7, #4]
 800b016:	4413      	add	r3, r2
 800b018:	b299      	uxth	r1, r3
 800b01a:	7bfb      	ldrb	r3, [r7, #15]
 800b01c:	b29b      	uxth	r3, r3
 800b01e:	005b      	lsls	r3, r3, #1
 800b020:	b29b      	uxth	r3, r3
 800b022:	887a      	ldrh	r2, [r7, #2]
 800b024:	1ad3      	subs	r3, r2, r3
 800b026:	b29a      	uxth	r2, r3
 800b028:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800b02c:	b29b      	uxth	r3, r3
 800b02e:	f000 fa81 	bl	800b534 <ILI9341_Draw_Horizontal_Line>
										y + b,
										w - (2*b),
										border_colour);

		ILI9341_Draw_Horizontal_Line(	x + b,
 800b032:	7bfb      	ldrb	r3, [r7, #15]
 800b034:	b29a      	uxth	r2, r3
 800b036:	88fb      	ldrh	r3, [r7, #6]
 800b038:	4413      	add	r3, r2
 800b03a:	b298      	uxth	r0, r3
										(y + h) - b,
 800b03c:	88ba      	ldrh	r2, [r7, #4]
 800b03e:	883b      	ldrh	r3, [r7, #0]
 800b040:	4413      	add	r3, r2
 800b042:	b29a      	uxth	r2, r3
		ILI9341_Draw_Horizontal_Line(	x + b,
 800b044:	7bfb      	ldrb	r3, [r7, #15]
 800b046:	b29b      	uxth	r3, r3
 800b048:	1ad3      	subs	r3, r2, r3
 800b04a:	b299      	uxth	r1, r3
 800b04c:	7bfb      	ldrb	r3, [r7, #15]
 800b04e:	b29b      	uxth	r3, r3
 800b050:	887a      	ldrh	r2, [r7, #2]
 800b052:	1ad3      	subs	r3, r2, r3
 800b054:	b29a      	uxth	r2, r3
 800b056:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800b05a:	b29b      	uxth	r3, r3
 800b05c:	f000 fa6a 	bl	800b534 <ILI9341_Draw_Horizontal_Line>
										w - (b),
										border_colour);


		// Vertical lines
		ILI9341_Draw_Vertical_Line(		x + b,
 800b060:	7bfb      	ldrb	r3, [r7, #15]
 800b062:	b29a      	uxth	r2, r3
 800b064:	88fb      	ldrh	r3, [r7, #6]
 800b066:	4413      	add	r3, r2
 800b068:	b298      	uxth	r0, r3
 800b06a:	7bfb      	ldrb	r3, [r7, #15]
 800b06c:	b29a      	uxth	r2, r3
 800b06e:	88bb      	ldrh	r3, [r7, #4]
 800b070:	4413      	add	r3, r2
 800b072:	b299      	uxth	r1, r3
 800b074:	7bfb      	ldrb	r3, [r7, #15]
 800b076:	b29b      	uxth	r3, r3
 800b078:	005b      	lsls	r3, r3, #1
 800b07a:	b29b      	uxth	r3, r3
 800b07c:	883a      	ldrh	r2, [r7, #0]
 800b07e:	1ad3      	subs	r3, r2, r3
 800b080:	b29a      	uxth	r2, r3
 800b082:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800b086:	b29b      	uxth	r3, r3
 800b088:	f000 fa9c 	bl	800b5c4 <ILI9341_Draw_Vertical_Line>
										y + b,
										h - (2*b),
										border_colour);

		ILI9341_Draw_Vertical_Line(		(x + w) - b,
 800b08c:	88fa      	ldrh	r2, [r7, #6]
 800b08e:	887b      	ldrh	r3, [r7, #2]
 800b090:	4413      	add	r3, r2
 800b092:	b29a      	uxth	r2, r3
 800b094:	7bfb      	ldrb	r3, [r7, #15]
 800b096:	b29b      	uxth	r3, r3
 800b098:	1ad3      	subs	r3, r2, r3
 800b09a:	b298      	uxth	r0, r3
 800b09c:	7bfb      	ldrb	r3, [r7, #15]
 800b09e:	b29a      	uxth	r2, r3
 800b0a0:	88bb      	ldrh	r3, [r7, #4]
 800b0a2:	4413      	add	r3, r2
 800b0a4:	b299      	uxth	r1, r3
 800b0a6:	7bfb      	ldrb	r3, [r7, #15]
 800b0a8:	b29b      	uxth	r3, r3
 800b0aa:	005b      	lsls	r3, r3, #1
 800b0ac:	b29b      	uxth	r3, r3
 800b0ae:	883a      	ldrh	r2, [r7, #0]
 800b0b0:	1ad3      	subs	r3, r2, r3
 800b0b2:	b29a      	uxth	r2, r3
 800b0b4:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800b0b8:	b29b      	uxth	r3, r3
 800b0ba:	f000 fa83 	bl	800b5c4 <ILI9341_Draw_Vertical_Line>
	for(uint8_t b = 0; ; b++)
 800b0be:	7bfb      	ldrb	r3, [r7, #15]
 800b0c0:	3301      	adds	r3, #1
 800b0c2:	73fb      	strb	r3, [r7, #15]
		if(b > border_weight)
 800b0c4:	e75f      	b.n	800af86 <ILI9341_Draw_Bordered_Filled_Rectangle_Coord+0x22>
										h - (2*b),
										border_colour);

	}

	finish:
 800b0c6:	bf00      	nop
	// done
	return;
 800b0c8:	bf00      	nop
}
 800b0ca:	3714      	adds	r7, #20
 800b0cc:	46bd      	mov	sp, r7
 800b0ce:	bd90      	pop	{r4, r7, pc}

0800b0d0 <ILI9341_Draw_Char>:
}

/*Draws a character (fonts imported from fonts.h) at x,Y location with specified font colour, size and Background colour*/
/*See fonts.h implementation of font on what is required for changing to a different font when switching fonts libraries*/
void ILI9341_Draw_Char(char character, uint16_t x, uint16_t y, uint16_t colour, uint16_t size, uint16_t bgcolour)
{
 800b0d0:	b590      	push	{r4, r7, lr}
 800b0d2:	b089      	sub	sp, #36	; 0x24
 800b0d4:	af02      	add	r7, sp, #8
 800b0d6:	4604      	mov	r4, r0
 800b0d8:	4608      	mov	r0, r1
 800b0da:	4611      	mov	r1, r2
 800b0dc:	461a      	mov	r2, r3
 800b0de:	4623      	mov	r3, r4
 800b0e0:	71fb      	strb	r3, [r7, #7]
 800b0e2:	4603      	mov	r3, r0
 800b0e4:	80bb      	strh	r3, [r7, #4]
 800b0e6:	460b      	mov	r3, r1
 800b0e8:	807b      	strh	r3, [r7, #2]
 800b0ea:	4613      	mov	r3, r2
 800b0ec:	803b      	strh	r3, [r7, #0]
    uint8_t 	i,j;
		



	function_char = character;
 800b0ee:	79fb      	ldrb	r3, [r7, #7]
 800b0f0:	75fb      	strb	r3, [r7, #23]
		
    if (function_char < ' ')
 800b0f2:	7dfb      	ldrb	r3, [r7, #23]
 800b0f4:	2b1f      	cmp	r3, #31
 800b0f6:	d802      	bhi.n	800b0fe <ILI9341_Draw_Char+0x2e>
    {
        character = 0;
 800b0f8:	2300      	movs	r3, #0
 800b0fa:	71fb      	strb	r3, [r7, #7]
 800b0fc:	e002      	b.n	800b104 <ILI9341_Draw_Char+0x34>
    }
    else
    {
    	function_char -= 32;
 800b0fe:	7dfb      	ldrb	r3, [r7, #23]
 800b100:	3b20      	subs	r3, #32
 800b102:	75fb      	strb	r3, [r7, #23]
	}
   	
	char temp[CHAR_WIDTH];

	for(uint8_t k = 0; k<CHAR_WIDTH; k++)
 800b104:	2300      	movs	r3, #0
 800b106:	753b      	strb	r3, [r7, #20]
 800b108:	e012      	b.n	800b130 <ILI9341_Draw_Char+0x60>
	{
		temp[k] = font[function_char][k];
 800b10a:	7dfa      	ldrb	r2, [r7, #23]
 800b10c:	7d38      	ldrb	r0, [r7, #20]
 800b10e:	7d39      	ldrb	r1, [r7, #20]
 800b110:	4c48      	ldr	r4, [pc, #288]	; (800b234 <ILI9341_Draw_Char+0x164>)
 800b112:	4613      	mov	r3, r2
 800b114:	005b      	lsls	r3, r3, #1
 800b116:	4413      	add	r3, r2
 800b118:	005b      	lsls	r3, r3, #1
 800b11a:	4423      	add	r3, r4
 800b11c:	4403      	add	r3, r0
 800b11e:	781a      	ldrb	r2, [r3, #0]
 800b120:	f107 0318 	add.w	r3, r7, #24
 800b124:	440b      	add	r3, r1
 800b126:	f803 2c0c 	strb.w	r2, [r3, #-12]
	for(uint8_t k = 0; k<CHAR_WIDTH; k++)
 800b12a:	7d3b      	ldrb	r3, [r7, #20]
 800b12c:	3301      	adds	r3, #1
 800b12e:	753b      	strb	r3, [r7, #20]
 800b130:	7d3b      	ldrb	r3, [r7, #20]
 800b132:	2b05      	cmp	r3, #5
 800b134:	d9e9      	bls.n	800b10a <ILI9341_Draw_Char+0x3a>
	}
		
    // Draw pixels
	//ILI9341_Draw_Rectangle(x, Y, CHAR_WIDTH*size, CHAR_HEIGHT*size, bgcolour);
    for (j=0; j<CHAR_WIDTH; j++)
 800b136:	2300      	movs	r3, #0
 800b138:	757b      	strb	r3, [r7, #21]
 800b13a:	e074      	b.n	800b226 <ILI9341_Draw_Char+0x156>
    {
        for (i=0; i<CHAR_HEIGHT; i++)
 800b13c:	2300      	movs	r3, #0
 800b13e:	75bb      	strb	r3, [r7, #22]
 800b140:	e06b      	b.n	800b21a <ILI9341_Draw_Char+0x14a>
        {
            if (temp[j] & (1<<i))
 800b142:	7d7b      	ldrb	r3, [r7, #21]
 800b144:	f107 0218 	add.w	r2, r7, #24
 800b148:	4413      	add	r3, r2
 800b14a:	f813 3c0c 	ldrb.w	r3, [r3, #-12]
 800b14e:	461a      	mov	r2, r3
 800b150:	7dbb      	ldrb	r3, [r7, #22]
 800b152:	fa42 f303 	asr.w	r3, r2, r3
 800b156:	f003 0301 	and.w	r3, r3, #1
 800b15a:	2b00      	cmp	r3, #0
 800b15c:	d02d      	beq.n	800b1ba <ILI9341_Draw_Char+0xea>
            {
            	if(size == 1)
 800b15e:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 800b160:	2b01      	cmp	r3, #1
 800b162:	d10e      	bne.n	800b182 <ILI9341_Draw_Char+0xb2>
				{
            		ILI9341_Draw_Pixel(x+j, y+i, colour);
 800b164:	7d7b      	ldrb	r3, [r7, #21]
 800b166:	b29a      	uxth	r2, r3
 800b168:	88bb      	ldrh	r3, [r7, #4]
 800b16a:	4413      	add	r3, r2
 800b16c:	b298      	uxth	r0, r3
 800b16e:	7dbb      	ldrb	r3, [r7, #22]
 800b170:	b29a      	uxth	r2, r3
 800b172:	887b      	ldrh	r3, [r7, #2]
 800b174:	4413      	add	r3, r2
 800b176:	b29b      	uxth	r3, r3
 800b178:	883a      	ldrh	r2, [r7, #0]
 800b17a:	4619      	mov	r1, r3
 800b17c:	f000 fae0 	bl	800b740 <ILI9341_Draw_Pixel>
 800b180:	e048      	b.n	800b214 <ILI9341_Draw_Char+0x144>
				}
				else
				{
					ILI9341_Draw_Rectangle(x+(j*size), y+(i*size), size, size, colour, TEXT_CHUNK);
 800b182:	7d7b      	ldrb	r3, [r7, #21]
 800b184:	b29b      	uxth	r3, r3
 800b186:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 800b188:	fb12 f303 	smulbb	r3, r2, r3
 800b18c:	b29a      	uxth	r2, r3
 800b18e:	88bb      	ldrh	r3, [r7, #4]
 800b190:	4413      	add	r3, r2
 800b192:	b298      	uxth	r0, r3
 800b194:	7dbb      	ldrb	r3, [r7, #22]
 800b196:	b29b      	uxth	r3, r3
 800b198:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 800b19a:	fb12 f303 	smulbb	r3, r2, r3
 800b19e:	b29a      	uxth	r2, r3
 800b1a0:	887b      	ldrh	r3, [r7, #2]
 800b1a2:	4413      	add	r3, r2
 800b1a4:	b299      	uxth	r1, r3
 800b1a6:	8d3c      	ldrh	r4, [r7, #40]	; 0x28
 800b1a8:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 800b1aa:	2301      	movs	r3, #1
 800b1ac:	9301      	str	r3, [sp, #4]
 800b1ae:	883b      	ldrh	r3, [r7, #0]
 800b1b0:	9300      	str	r3, [sp, #0]
 800b1b2:	4623      	mov	r3, r4
 800b1b4:	f000 fbfc 	bl	800b9b0 <ILI9341_Draw_Rectangle>
 800b1b8:	e02c      	b.n	800b214 <ILI9341_Draw_Char+0x144>
				}
            }
            else
            {
               	if(size == 1)
 800b1ba:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 800b1bc:	2b01      	cmp	r3, #1
 800b1be:	d10e      	bne.n	800b1de <ILI9341_Draw_Char+0x10e>
				{
					ILI9341_Draw_Pixel(x+j, y+i, bgcolour);
 800b1c0:	7d7b      	ldrb	r3, [r7, #21]
 800b1c2:	b29a      	uxth	r2, r3
 800b1c4:	88bb      	ldrh	r3, [r7, #4]
 800b1c6:	4413      	add	r3, r2
 800b1c8:	b298      	uxth	r0, r3
 800b1ca:	7dbb      	ldrb	r3, [r7, #22]
 800b1cc:	b29a      	uxth	r2, r3
 800b1ce:	887b      	ldrh	r3, [r7, #2]
 800b1d0:	4413      	add	r3, r2
 800b1d2:	b29b      	uxth	r3, r3
 800b1d4:	8dba      	ldrh	r2, [r7, #44]	; 0x2c
 800b1d6:	4619      	mov	r1, r3
 800b1d8:	f000 fab2 	bl	800b740 <ILI9341_Draw_Pixel>
 800b1dc:	e01a      	b.n	800b214 <ILI9341_Draw_Char+0x144>
				}
				else
				{
					ILI9341_Draw_Rectangle(x+(j*size), y+(i*size), size, size, bgcolour, TEXT_CHUNK);
 800b1de:	7d7b      	ldrb	r3, [r7, #21]
 800b1e0:	b29b      	uxth	r3, r3
 800b1e2:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 800b1e4:	fb12 f303 	smulbb	r3, r2, r3
 800b1e8:	b29a      	uxth	r2, r3
 800b1ea:	88bb      	ldrh	r3, [r7, #4]
 800b1ec:	4413      	add	r3, r2
 800b1ee:	b298      	uxth	r0, r3
 800b1f0:	7dbb      	ldrb	r3, [r7, #22]
 800b1f2:	b29b      	uxth	r3, r3
 800b1f4:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 800b1f6:	fb12 f303 	smulbb	r3, r2, r3
 800b1fa:	b29a      	uxth	r2, r3
 800b1fc:	887b      	ldrh	r3, [r7, #2]
 800b1fe:	4413      	add	r3, r2
 800b200:	b299      	uxth	r1, r3
 800b202:	8d3c      	ldrh	r4, [r7, #40]	; 0x28
 800b204:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 800b206:	2301      	movs	r3, #1
 800b208:	9301      	str	r3, [sp, #4]
 800b20a:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 800b20c:	9300      	str	r3, [sp, #0]
 800b20e:	4623      	mov	r3, r4
 800b210:	f000 fbce 	bl	800b9b0 <ILI9341_Draw_Rectangle>
        for (i=0; i<CHAR_HEIGHT; i++)
 800b214:	7dbb      	ldrb	r3, [r7, #22]
 800b216:	3301      	adds	r3, #1
 800b218:	75bb      	strb	r3, [r7, #22]
 800b21a:	7dbb      	ldrb	r3, [r7, #22]
 800b21c:	2b07      	cmp	r3, #7
 800b21e:	d990      	bls.n	800b142 <ILI9341_Draw_Char+0x72>
    for (j=0; j<CHAR_WIDTH; j++)
 800b220:	7d7b      	ldrb	r3, [r7, #21]
 800b222:	3301      	adds	r3, #1
 800b224:	757b      	strb	r3, [r7, #21]
 800b226:	7d7b      	ldrb	r3, [r7, #21]
 800b228:	2b05      	cmp	r3, #5
 800b22a:	d987      	bls.n	800b13c <ILI9341_Draw_Char+0x6c>
				}
            }
        }
    }
}
 800b22c:	bf00      	nop
 800b22e:	371c      	adds	r7, #28
 800b230:	46bd      	mov	sp, r7
 800b232:	bd90      	pop	{r4, r7, pc}
 800b234:	0800ebec 	.word	0x0800ebec

0800b238 <ILI9341_Draw_Text>:

/*Draws an array of characters (fonts imported from fonts.h) at x,Y location with specified font colour, size and Background colour*/
/*See fonts.h implementation of font on what is required for changing to a different font when switching fonts libraries*/
void ILI9341_Draw_Text(const char* Text, uint16_t x, uint16_t y, uint16_t colour, uint16_t size, uint16_t bgcolour)
{
 800b238:	b590      	push	{r4, r7, lr}
 800b23a:	b087      	sub	sp, #28
 800b23c:	af02      	add	r7, sp, #8
 800b23e:	60f8      	str	r0, [r7, #12]
 800b240:	4608      	mov	r0, r1
 800b242:	4611      	mov	r1, r2
 800b244:	461a      	mov	r2, r3
 800b246:	4603      	mov	r3, r0
 800b248:	817b      	strh	r3, [r7, #10]
 800b24a:	460b      	mov	r3, r1
 800b24c:	813b      	strh	r3, [r7, #8]
 800b24e:	4613      	mov	r3, r2
 800b250:	80fb      	strh	r3, [r7, #6]
    /*if(size & 1)
    {
    	size = ((size >> 1) * 2);
    }*/

    while (*Text) {
 800b252:	e016      	b.n	800b282 <ILI9341_Draw_Text+0x4a>
        ILI9341_Draw_Char(*Text++, x, y, colour, size, bgcolour);
 800b254:	68fb      	ldr	r3, [r7, #12]
 800b256:	1c5a      	adds	r2, r3, #1
 800b258:	60fa      	str	r2, [r7, #12]
 800b25a:	7818      	ldrb	r0, [r3, #0]
 800b25c:	88fc      	ldrh	r4, [r7, #6]
 800b25e:	893a      	ldrh	r2, [r7, #8]
 800b260:	8979      	ldrh	r1, [r7, #10]
 800b262:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800b264:	9301      	str	r3, [sp, #4]
 800b266:	8c3b      	ldrh	r3, [r7, #32]
 800b268:	9300      	str	r3, [sp, #0]
 800b26a:	4623      	mov	r3, r4
 800b26c:	f7ff ff30 	bl	800b0d0 <ILI9341_Draw_Char>
        x += CHAR_WIDTH*size;
 800b270:	8c3b      	ldrh	r3, [r7, #32]
 800b272:	461a      	mov	r2, r3
 800b274:	0052      	lsls	r2, r2, #1
 800b276:	4413      	add	r3, r2
 800b278:	005b      	lsls	r3, r3, #1
 800b27a:	b29a      	uxth	r2, r3
 800b27c:	897b      	ldrh	r3, [r7, #10]
 800b27e:	4413      	add	r3, r2
 800b280:	817b      	strh	r3, [r7, #10]
    while (*Text) {
 800b282:	68fb      	ldr	r3, [r7, #12]
 800b284:	781b      	ldrb	r3, [r3, #0]
 800b286:	2b00      	cmp	r3, #0
 800b288:	d1e4      	bne.n	800b254 <ILI9341_Draw_Text+0x1c>
    }


}
 800b28a:	bf00      	nop
 800b28c:	3714      	adds	r7, #20
 800b28e:	46bd      	mov	sp, r7
 800b290:	bd90      	pop	{r4, r7, pc}
	...

0800b294 <ILI9341_FillScreenGradient>:
		GPIOC->ODR |= CS_Pin;
	}
}

void ILI9341_FillScreenGradient()
{
 800b294:	b580      	push	{r7, lr}
 800b296:	b084      	sub	sp, #16
 800b298:	af02      	add	r7, sp, #8
	uint16_t x = 0;
 800b29a:	2300      	movs	r3, #0
 800b29c:	80bb      	strh	r3, [r7, #4]
	//ILI9341_Draw_Text("Colour gradient", 10, 10, BLACK, 1, WHITE);
	//ILI9341_Draw_Text("Grayscale", 10, 20, BLACK, 1, WHITE);



	for(uint16_t i = 0; i <= (320); i++)
 800b29e:	2300      	movs	r3, #0
 800b2a0:	80fb      	strh	r3, [r7, #6]
 800b2a2:	e010      	b.n	800b2c6 <ILI9341_FillScreenGradient+0x32>

		uint16_t RGB_color = Red + Green + Blue;
		ILI9341_Draw_Rectangle(i, x, 1, 240, RGB_color, AREA_CHUNK);
*/

	ILI9341_Draw_Rectangle(i, x, 1, 240, (uint16_t)fade_log_seq_data_table[i], AREA_CHUNK);
 800b2a4:	88fb      	ldrh	r3, [r7, #6]
 800b2a6:	4a0c      	ldr	r2, [pc, #48]	; (800b2d8 <ILI9341_FillScreenGradient+0x44>)
 800b2a8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800b2ac:	b29b      	uxth	r3, r3
 800b2ae:	88b9      	ldrh	r1, [r7, #4]
 800b2b0:	88f8      	ldrh	r0, [r7, #6]
 800b2b2:	2204      	movs	r2, #4
 800b2b4:	9201      	str	r2, [sp, #4]
 800b2b6:	9300      	str	r3, [sp, #0]
 800b2b8:	23f0      	movs	r3, #240	; 0xf0
 800b2ba:	2201      	movs	r2, #1
 800b2bc:	f000 fb78 	bl	800b9b0 <ILI9341_Draw_Rectangle>
	for(uint16_t i = 0; i <= (320); i++)
 800b2c0:	88fb      	ldrh	r3, [r7, #6]
 800b2c2:	3301      	adds	r3, #1
 800b2c4:	80fb      	strh	r3, [r7, #6]
 800b2c6:	88fb      	ldrh	r3, [r7, #6]
 800b2c8:	f5b3 7fa0 	cmp.w	r3, #320	; 0x140
 800b2cc:	d9ea      	bls.n	800b2a4 <ILI9341_FillScreenGradient+0x10>

	}
}
 800b2ce:	bf00      	nop
 800b2d0:	3708      	adds	r7, #8
 800b2d2:	46bd      	mov	sp, r7
 800b2d4:	bd80      	pop	{r7, pc}
 800b2d6:	bf00      	nop
 800b2d8:	200001e8 	.word	0x200001e8

0800b2dc <ILI9341_Init>:
 *
 * Initialize LCD display
 *
 */
void ILI9341_Init(void)
{
 800b2dc:	b580      	push	{r7, lr}
 800b2de:	af00      	add	r7, sp, #0

	_LCD_Enable();
 800b2e0:	f000 fc3a 	bl	800bb58 <_LCD_Enable>
	ILI9341_SPI_Init();
 800b2e4:	f000 f908 	bl	800b4f8 <ILI9341_SPI_Init>
	_LCD_Reset();
 800b2e8:	f000 fc46 	bl	800bb78 <_LCD_Reset>

	//SOFTWARE RESET
	_LCD_SendCommand(0x01);
 800b2ec:	2001      	movs	r0, #1
 800b2ee:	f000 fd11 	bl	800bd14 <_LCD_SendCommand>
	HAL_Delay(2000);
 800b2f2:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 800b2f6:	f7fa faa9 	bl	800584c <HAL_Delay>

	//POWER CONTROL A
	_LCD_SendCommand(0xCB);
 800b2fa:	20cb      	movs	r0, #203	; 0xcb
 800b2fc:	f000 fd0a 	bl	800bd14 <_LCD_SendCommand>
	_LCD_SendData(0x39);
 800b300:	2039      	movs	r0, #57	; 0x39
 800b302:	f000 fd39 	bl	800bd78 <_LCD_SendData>
	_LCD_SendData(0x2C);
 800b306:	202c      	movs	r0, #44	; 0x2c
 800b308:	f000 fd36 	bl	800bd78 <_LCD_SendData>
	_LCD_SendData(0x00);
 800b30c:	2000      	movs	r0, #0
 800b30e:	f000 fd33 	bl	800bd78 <_LCD_SendData>
	_LCD_SendData(0x34);
 800b312:	2034      	movs	r0, #52	; 0x34
 800b314:	f000 fd30 	bl	800bd78 <_LCD_SendData>
	_LCD_SendData(0x02);
 800b318:	2002      	movs	r0, #2
 800b31a:	f000 fd2d 	bl	800bd78 <_LCD_SendData>

	//POWER CONTROL B
	_LCD_SendCommand(0xCF);
 800b31e:	20cf      	movs	r0, #207	; 0xcf
 800b320:	f000 fcf8 	bl	800bd14 <_LCD_SendCommand>
	_LCD_SendData(0x00);
 800b324:	2000      	movs	r0, #0
 800b326:	f000 fd27 	bl	800bd78 <_LCD_SendData>
	_LCD_SendData(0xC1);
 800b32a:	20c1      	movs	r0, #193	; 0xc1
 800b32c:	f000 fd24 	bl	800bd78 <_LCD_SendData>
	_LCD_SendData(0x30);
 800b330:	2030      	movs	r0, #48	; 0x30
 800b332:	f000 fd21 	bl	800bd78 <_LCD_SendData>

	//DRIVER TIMING CONTROL A
	_LCD_SendCommand(0xE8);
 800b336:	20e8      	movs	r0, #232	; 0xe8
 800b338:	f000 fcec 	bl	800bd14 <_LCD_SendCommand>
	_LCD_SendData(0x85);
 800b33c:	2085      	movs	r0, #133	; 0x85
 800b33e:	f000 fd1b 	bl	800bd78 <_LCD_SendData>
	_LCD_SendData(0x00);
 800b342:	2000      	movs	r0, #0
 800b344:	f000 fd18 	bl	800bd78 <_LCD_SendData>
	_LCD_SendData(0x78);
 800b348:	2078      	movs	r0, #120	; 0x78
 800b34a:	f000 fd15 	bl	800bd78 <_LCD_SendData>

	//DRIVER TIMING CONTROL B
	_LCD_SendCommand(0xEA);
 800b34e:	20ea      	movs	r0, #234	; 0xea
 800b350:	f000 fce0 	bl	800bd14 <_LCD_SendCommand>
	_LCD_SendData(0x00);
 800b354:	2000      	movs	r0, #0
 800b356:	f000 fd0f 	bl	800bd78 <_LCD_SendData>
	_LCD_SendData(0x00);
 800b35a:	2000      	movs	r0, #0
 800b35c:	f000 fd0c 	bl	800bd78 <_LCD_SendData>

	//POWER ON SEQUENCE CONTROL
	_LCD_SendCommand(0xED);
 800b360:	20ed      	movs	r0, #237	; 0xed
 800b362:	f000 fcd7 	bl	800bd14 <_LCD_SendCommand>
	_LCD_SendData(0x64);
 800b366:	2064      	movs	r0, #100	; 0x64
 800b368:	f000 fd06 	bl	800bd78 <_LCD_SendData>
	_LCD_SendData(0x03);
 800b36c:	2003      	movs	r0, #3
 800b36e:	f000 fd03 	bl	800bd78 <_LCD_SendData>
	_LCD_SendData(0x12);
 800b372:	2012      	movs	r0, #18
 800b374:	f000 fd00 	bl	800bd78 <_LCD_SendData>
	_LCD_SendData(0x81);
 800b378:	2081      	movs	r0, #129	; 0x81
 800b37a:	f000 fcfd 	bl	800bd78 <_LCD_SendData>

	//PUMP RATIO CONTROL
	_LCD_SendCommand(0xF7);
 800b37e:	20f7      	movs	r0, #247	; 0xf7
 800b380:	f000 fcc8 	bl	800bd14 <_LCD_SendCommand>
	_LCD_SendData(0x20);
 800b384:	2020      	movs	r0, #32
 800b386:	f000 fcf7 	bl	800bd78 <_LCD_SendData>

	//POWER CONTROL,VRH[5:0]
	_LCD_SendCommand(0xC0);
 800b38a:	20c0      	movs	r0, #192	; 0xc0
 800b38c:	f000 fcc2 	bl	800bd14 <_LCD_SendCommand>
	_LCD_SendData(0x23);
 800b390:	2023      	movs	r0, #35	; 0x23
 800b392:	f000 fcf1 	bl	800bd78 <_LCD_SendData>

	//POWER CONTROL,SAP[2:0];BT[3:0]
	_LCD_SendCommand(0xC1);
 800b396:	20c1      	movs	r0, #193	; 0xc1
 800b398:	f000 fcbc 	bl	800bd14 <_LCD_SendCommand>
	_LCD_SendData(0x10);
 800b39c:	2010      	movs	r0, #16
 800b39e:	f000 fceb 	bl	800bd78 <_LCD_SendData>

	//VCM CONTROL
	_LCD_SendCommand(0xC5);
 800b3a2:	20c5      	movs	r0, #197	; 0xc5
 800b3a4:	f000 fcb6 	bl	800bd14 <_LCD_SendCommand>
	_LCD_SendData(0x3E);
 800b3a8:	203e      	movs	r0, #62	; 0x3e
 800b3aa:	f000 fce5 	bl	800bd78 <_LCD_SendData>
	_LCD_SendData(0x28);
 800b3ae:	2028      	movs	r0, #40	; 0x28
 800b3b0:	f000 fce2 	bl	800bd78 <_LCD_SendData>

	//VCM CONTROL 2
	_LCD_SendCommand(0xC7);
 800b3b4:	20c7      	movs	r0, #199	; 0xc7
 800b3b6:	f000 fcad 	bl	800bd14 <_LCD_SendCommand>
	_LCD_SendData(0x86);
 800b3ba:	2086      	movs	r0, #134	; 0x86
 800b3bc:	f000 fcdc 	bl	800bd78 <_LCD_SendData>

	//MEMORY ACCESS CONTROL
	_LCD_SendCommand(0x36);
 800b3c0:	2036      	movs	r0, #54	; 0x36
 800b3c2:	f000 fca7 	bl	800bd14 <_LCD_SendCommand>
	_LCD_SendData(0x48);
 800b3c6:	2048      	movs	r0, #72	; 0x48
 800b3c8:	f000 fcd6 	bl	800bd78 <_LCD_SendData>


	//PIXEL FORMAT
	_LCD_SendCommand(0x3A);
 800b3cc:	203a      	movs	r0, #58	; 0x3a
 800b3ce:	f000 fca1 	bl	800bd14 <_LCD_SendCommand>
	_LCD_SendData(0x55);
 800b3d2:	2055      	movs	r0, #85	; 0x55
 800b3d4:	f000 fcd0 	bl	800bd78 <_LCD_SendData>

	//FRAME RATIO CONTROL, STANDARD RGB COLOR
	_LCD_SendCommand(0xB1);
 800b3d8:	20b1      	movs	r0, #177	; 0xb1
 800b3da:	f000 fc9b 	bl	800bd14 <_LCD_SendCommand>
	_LCD_SendData(0x00);
 800b3de:	2000      	movs	r0, #0
 800b3e0:	f000 fcca 	bl	800bd78 <_LCD_SendData>
	_LCD_SendData(0x18);
 800b3e4:	2018      	movs	r0, #24
 800b3e6:	f000 fcc7 	bl	800bd78 <_LCD_SendData>

	//DISPLAY FUNCTION CONTROL
	_LCD_SendCommand(0xB6);
 800b3ea:	20b6      	movs	r0, #182	; 0xb6
 800b3ec:	f000 fc92 	bl	800bd14 <_LCD_SendCommand>
	_LCD_SendData(0x08);
 800b3f0:	2008      	movs	r0, #8
 800b3f2:	f000 fcc1 	bl	800bd78 <_LCD_SendData>
	_LCD_SendData(0x82);
 800b3f6:	2082      	movs	r0, #130	; 0x82
 800b3f8:	f000 fcbe 	bl	800bd78 <_LCD_SendData>
	_LCD_SendData(0x27);
 800b3fc:	2027      	movs	r0, #39	; 0x27
 800b3fe:	f000 fcbb 	bl	800bd78 <_LCD_SendData>


	//3GAMMA FUNCTION DISABLE
	_LCD_SendCommand(0xF2);
 800b402:	20f2      	movs	r0, #242	; 0xf2
 800b404:	f000 fc86 	bl	800bd14 <_LCD_SendCommand>
	_LCD_SendData(0x00);
 800b408:	2000      	movs	r0, #0
 800b40a:	f000 fcb5 	bl	800bd78 <_LCD_SendData>

	//GAMMA CURVE SELECTED
	_LCD_SendCommand(0x26);
 800b40e:	2026      	movs	r0, #38	; 0x26
 800b410:	f000 fc80 	bl	800bd14 <_LCD_SendCommand>
	_LCD_SendData(0x01);
 800b414:	2001      	movs	r0, #1
 800b416:	f000 fcaf 	bl	800bd78 <_LCD_SendData>

	//POSITIVE GAMMA CORRECTION
	_LCD_SendCommand(0xE0);
 800b41a:	20e0      	movs	r0, #224	; 0xe0
 800b41c:	f000 fc7a 	bl	800bd14 <_LCD_SendCommand>
	_LCD_SendData(0x0F);
 800b420:	200f      	movs	r0, #15
 800b422:	f000 fca9 	bl	800bd78 <_LCD_SendData>
	_LCD_SendData(0x31);
 800b426:	2031      	movs	r0, #49	; 0x31
 800b428:	f000 fca6 	bl	800bd78 <_LCD_SendData>
	_LCD_SendData(0x2B);
 800b42c:	202b      	movs	r0, #43	; 0x2b
 800b42e:	f000 fca3 	bl	800bd78 <_LCD_SendData>
	_LCD_SendData(0x0C);
 800b432:	200c      	movs	r0, #12
 800b434:	f000 fca0 	bl	800bd78 <_LCD_SendData>
	_LCD_SendData(0x0E);
 800b438:	200e      	movs	r0, #14
 800b43a:	f000 fc9d 	bl	800bd78 <_LCD_SendData>
	_LCD_SendData(0x08);
 800b43e:	2008      	movs	r0, #8
 800b440:	f000 fc9a 	bl	800bd78 <_LCD_SendData>
	_LCD_SendData(0x4E);
 800b444:	204e      	movs	r0, #78	; 0x4e
 800b446:	f000 fc97 	bl	800bd78 <_LCD_SendData>
	_LCD_SendData(0xF1);
 800b44a:	20f1      	movs	r0, #241	; 0xf1
 800b44c:	f000 fc94 	bl	800bd78 <_LCD_SendData>
	_LCD_SendData(0x37);
 800b450:	2037      	movs	r0, #55	; 0x37
 800b452:	f000 fc91 	bl	800bd78 <_LCD_SendData>
	_LCD_SendData(0x07);
 800b456:	2007      	movs	r0, #7
 800b458:	f000 fc8e 	bl	800bd78 <_LCD_SendData>
	_LCD_SendData(0x10);
 800b45c:	2010      	movs	r0, #16
 800b45e:	f000 fc8b 	bl	800bd78 <_LCD_SendData>
	_LCD_SendData(0x03);
 800b462:	2003      	movs	r0, #3
 800b464:	f000 fc88 	bl	800bd78 <_LCD_SendData>
	_LCD_SendData(0x0E);
 800b468:	200e      	movs	r0, #14
 800b46a:	f000 fc85 	bl	800bd78 <_LCD_SendData>
	_LCD_SendData(0x09);
 800b46e:	2009      	movs	r0, #9
 800b470:	f000 fc82 	bl	800bd78 <_LCD_SendData>
	_LCD_SendData(0x00);
 800b474:	2000      	movs	r0, #0
 800b476:	f000 fc7f 	bl	800bd78 <_LCD_SendData>

	//NEGATIVE GAMMA CORRECTION
	_LCD_SendCommand(0xE1);
 800b47a:	20e1      	movs	r0, #225	; 0xe1
 800b47c:	f000 fc4a 	bl	800bd14 <_LCD_SendCommand>
	_LCD_SendData(0x00);
 800b480:	2000      	movs	r0, #0
 800b482:	f000 fc79 	bl	800bd78 <_LCD_SendData>
	_LCD_SendData(0x0E);
 800b486:	200e      	movs	r0, #14
 800b488:	f000 fc76 	bl	800bd78 <_LCD_SendData>
	_LCD_SendData(0x14);
 800b48c:	2014      	movs	r0, #20
 800b48e:	f000 fc73 	bl	800bd78 <_LCD_SendData>
	_LCD_SendData(0x03);
 800b492:	2003      	movs	r0, #3
 800b494:	f000 fc70 	bl	800bd78 <_LCD_SendData>
	_LCD_SendData(0x11);
 800b498:	2011      	movs	r0, #17
 800b49a:	f000 fc6d 	bl	800bd78 <_LCD_SendData>
	_LCD_SendData(0x07);
 800b49e:	2007      	movs	r0, #7
 800b4a0:	f000 fc6a 	bl	800bd78 <_LCD_SendData>
	_LCD_SendData(0x31);
 800b4a4:	2031      	movs	r0, #49	; 0x31
 800b4a6:	f000 fc67 	bl	800bd78 <_LCD_SendData>
	_LCD_SendData(0xC1);
 800b4aa:	20c1      	movs	r0, #193	; 0xc1
 800b4ac:	f000 fc64 	bl	800bd78 <_LCD_SendData>
	_LCD_SendData(0x48);
 800b4b0:	2048      	movs	r0, #72	; 0x48
 800b4b2:	f000 fc61 	bl	800bd78 <_LCD_SendData>
	_LCD_SendData(0x08);
 800b4b6:	2008      	movs	r0, #8
 800b4b8:	f000 fc5e 	bl	800bd78 <_LCD_SendData>
	_LCD_SendData(0x0F);
 800b4bc:	200f      	movs	r0, #15
 800b4be:	f000 fc5b 	bl	800bd78 <_LCD_SendData>
	_LCD_SendData(0x0C);
 800b4c2:	200c      	movs	r0, #12
 800b4c4:	f000 fc58 	bl	800bd78 <_LCD_SendData>
	_LCD_SendData(0x31);
 800b4c8:	2031      	movs	r0, #49	; 0x31
 800b4ca:	f000 fc55 	bl	800bd78 <_LCD_SendData>
	_LCD_SendData(0x36);
 800b4ce:	2036      	movs	r0, #54	; 0x36
 800b4d0:	f000 fc52 	bl	800bd78 <_LCD_SendData>
	_LCD_SendData(0x0F);
 800b4d4:	200f      	movs	r0, #15
 800b4d6:	f000 fc4f 	bl	800bd78 <_LCD_SendData>

	//EXIT SLEEP
	_LCD_SendCommand(0x11);
 800b4da:	2011      	movs	r0, #17
 800b4dc:	f000 fc1a 	bl	800bd14 <_LCD_SendCommand>
	HAL_Delay(240);
 800b4e0:	20f0      	movs	r0, #240	; 0xf0
 800b4e2:	f7fa f9b3 	bl	800584c <HAL_Delay>

	//TURN ON DISPLAY
	_LCD_SendCommand(0x29);
 800b4e6:	2029      	movs	r0, #41	; 0x29
 800b4e8:	f000 fc14 	bl	800bd14 <_LCD_SendCommand>

	//STARTING ROTATION
	ILI9341_Set_Rotation(SCREEN_VERTICAL_1);
 800b4ec:	2000      	movs	r0, #0
 800b4ee:	f000 fae5 	bl	800babc <ILI9341_Set_Rotation>
}
 800b4f2:	bf00      	nop
 800b4f4:	bd80      	pop	{r7, pc}
	...

0800b4f8 <ILI9341_SPI_Init>:
 *
 * 	Initialise SPI peripheral
 *
 */
void ILI9341_SPI_Init(void)
{
 800b4f8:	b480      	push	{r7}
 800b4fa:	af00      	add	r7, sp, #0

   	// check SPI enabled
	if ((SPI_PERIPH->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800b4fc:	4b0b      	ldr	r3, [pc, #44]	; (800b52c <ILI9341_SPI_Init+0x34>)
 800b4fe:	681b      	ldr	r3, [r3, #0]
 800b500:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b504:	2b40      	cmp	r3, #64	; 0x40
 800b506:	d005      	beq.n	800b514 <ILI9341_SPI_Init+0x1c>
	{
		SPI_PERIPH->CR1 |= SPI_CR1_SPE;
 800b508:	4b08      	ldr	r3, [pc, #32]	; (800b52c <ILI9341_SPI_Init+0x34>)
 800b50a:	681b      	ldr	r3, [r3, #0]
 800b50c:	4a07      	ldr	r2, [pc, #28]	; (800b52c <ILI9341_SPI_Init+0x34>)
 800b50e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800b512:	6013      	str	r3, [r2, #0]
	}

	LCD_CS_PORT->ODR &= ~(LCD_CS_PIN);
 800b514:	4b06      	ldr	r3, [pc, #24]	; (800b530 <ILI9341_SPI_Init+0x38>)
 800b516:	695b      	ldr	r3, [r3, #20]
 800b518:	4a05      	ldr	r2, [pc, #20]	; (800b530 <ILI9341_SPI_Init+0x38>)
 800b51a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800b51e:	6153      	str	r3, [r2, #20]
}
 800b520:	bf00      	nop
 800b522:	46bd      	mov	sp, r7
 800b524:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b528:	4770      	bx	lr
 800b52a:	bf00      	nop
 800b52c:	40003c00 	.word	0x40003c00
 800b530:	48000400 	.word	0x48000400

0800b534 <ILI9341_Draw_Horizontal_Line>:
 *	Draw horizontal line
 *
 */

void ILI9341_Draw_Horizontal_Line(uint16_t xpos, uint16_t ypos, uint16_t width, uint16_t colour)
{
 800b534:	b590      	push	{r4, r7, lr}
 800b536:	b085      	sub	sp, #20
 800b538:	af02      	add	r7, sp, #8
 800b53a:	4604      	mov	r4, r0
 800b53c:	4608      	mov	r0, r1
 800b53e:	4611      	mov	r1, r2
 800b540:	461a      	mov	r2, r3
 800b542:	4623      	mov	r3, r4
 800b544:	80fb      	strh	r3, [r7, #6]
 800b546:	4603      	mov	r3, r0
 800b548:	80bb      	strh	r3, [r7, #4]
 800b54a:	460b      	mov	r3, r1
 800b54c:	807b      	strh	r3, [r7, #2]
 800b54e:	4613      	mov	r3, r2
 800b550:	803b      	strh	r3, [r7, #0]
	if((xpos >=LCD_WIDTH) || (ypos >=LCD_HEIGHT)) return;
 800b552:	4b1a      	ldr	r3, [pc, #104]	; (800b5bc <ILI9341_Draw_Horizontal_Line+0x88>)
 800b554:	881b      	ldrh	r3, [r3, #0]
 800b556:	b29b      	uxth	r3, r3
 800b558:	88fa      	ldrh	r2, [r7, #6]
 800b55a:	429a      	cmp	r2, r3
 800b55c:	d229      	bcs.n	800b5b2 <ILI9341_Draw_Horizontal_Line+0x7e>
 800b55e:	4b18      	ldr	r3, [pc, #96]	; (800b5c0 <ILI9341_Draw_Horizontal_Line+0x8c>)
 800b560:	881b      	ldrh	r3, [r3, #0]
 800b562:	b29b      	uxth	r3, r3
 800b564:	88ba      	ldrh	r2, [r7, #4]
 800b566:	429a      	cmp	r2, r3
 800b568:	d223      	bcs.n	800b5b2 <ILI9341_Draw_Horizontal_Line+0x7e>
	if(((xpos + width) - 1 ) >= LCD_WIDTH)
 800b56a:	88fa      	ldrh	r2, [r7, #6]
 800b56c:	887b      	ldrh	r3, [r7, #2]
 800b56e:	4413      	add	r3, r2
 800b570:	3b01      	subs	r3, #1
 800b572:	4a12      	ldr	r2, [pc, #72]	; (800b5bc <ILI9341_Draw_Horizontal_Line+0x88>)
 800b574:	8812      	ldrh	r2, [r2, #0]
 800b576:	b292      	uxth	r2, r2
 800b578:	4293      	cmp	r3, r2
 800b57a:	db05      	blt.n	800b588 <ILI9341_Draw_Horizontal_Line+0x54>
		{
			width= LCD_WIDTH - xpos;
 800b57c:	4b0f      	ldr	r3, [pc, #60]	; (800b5bc <ILI9341_Draw_Horizontal_Line+0x88>)
 800b57e:	881b      	ldrh	r3, [r3, #0]
 800b580:	b29a      	uxth	r2, r3
 800b582:	88fb      	ldrh	r3, [r7, #6]
 800b584:	1ad3      	subs	r3, r2, r3
 800b586:	807b      	strh	r3, [r7, #2]
		}
	ILI9341_Set_Frame(	xpos,
							ypos,
							(xpos + width) - 1,
 800b588:	88fa      	ldrh	r2, [r7, #6]
 800b58a:	887b      	ldrh	r3, [r7, #2]
 800b58c:	4413      	add	r3, r2
 800b58e:	b29b      	uxth	r3, r3
	ILI9341_Set_Frame(	xpos,
 800b590:	3b01      	subs	r3, #1
 800b592:	b29a      	uxth	r2, r3
 800b594:	88bb      	ldrh	r3, [r7, #4]
 800b596:	88b9      	ldrh	r1, [r7, #4]
 800b598:	88f8      	ldrh	r0, [r7, #6]
 800b59a:	f000 f85b 	bl	800b654 <ILI9341_Set_Frame>
							ypos);

	_LCD_Write_Frame(xpos, ypos, colour, width, LINE_CHUNK);
 800b59e:	887c      	ldrh	r4, [r7, #2]
 800b5a0:	883a      	ldrh	r2, [r7, #0]
 800b5a2:	88b9      	ldrh	r1, [r7, #4]
 800b5a4:	88f8      	ldrh	r0, [r7, #6]
 800b5a6:	2303      	movs	r3, #3
 800b5a8:	9300      	str	r3, [sp, #0]
 800b5aa:	4623      	mov	r3, r4
 800b5ac:	f000 fb02 	bl	800bbb4 <_LCD_Write_Frame>
 800b5b0:	e000      	b.n	800b5b4 <ILI9341_Draw_Horizontal_Line+0x80>
	if((xpos >=LCD_WIDTH) || (ypos >=LCD_HEIGHT)) return;
 800b5b2:	bf00      	nop
}
 800b5b4:	370c      	adds	r7, #12
 800b5b6:	46bd      	mov	sp, r7
 800b5b8:	bd90      	pop	{r4, r7, pc}
 800b5ba:	bf00      	nop
 800b5bc:	200001e2 	.word	0x200001e2
 800b5c0:	200001e0 	.word	0x200001e0

0800b5c4 <ILI9341_Draw_Vertical_Line>:
 *
 *  Draw vertical line
 *
 */
void ILI9341_Draw_Vertical_Line(uint16_t xpos, uint16_t ypos, uint16_t height, uint16_t colour)
{
 800b5c4:	b590      	push	{r4, r7, lr}
 800b5c6:	b085      	sub	sp, #20
 800b5c8:	af02      	add	r7, sp, #8
 800b5ca:	4604      	mov	r4, r0
 800b5cc:	4608      	mov	r0, r1
 800b5ce:	4611      	mov	r1, r2
 800b5d0:	461a      	mov	r2, r3
 800b5d2:	4623      	mov	r3, r4
 800b5d4:	80fb      	strh	r3, [r7, #6]
 800b5d6:	4603      	mov	r3, r0
 800b5d8:	80bb      	strh	r3, [r7, #4]
 800b5da:	460b      	mov	r3, r1
 800b5dc:	807b      	strh	r3, [r7, #2]
 800b5de:	4613      	mov	r3, r2
 800b5e0:	803b      	strh	r3, [r7, #0]
	if((xpos >= LCD_WIDTH) || (ypos >= LCD_HEIGHT)) return;
 800b5e2:	4b1a      	ldr	r3, [pc, #104]	; (800b64c <ILI9341_Draw_Vertical_Line+0x88>)
 800b5e4:	881b      	ldrh	r3, [r3, #0]
 800b5e6:	b29b      	uxth	r3, r3
 800b5e8:	88fa      	ldrh	r2, [r7, #6]
 800b5ea:	429a      	cmp	r2, r3
 800b5ec:	d229      	bcs.n	800b642 <ILI9341_Draw_Vertical_Line+0x7e>
 800b5ee:	4b18      	ldr	r3, [pc, #96]	; (800b650 <ILI9341_Draw_Vertical_Line+0x8c>)
 800b5f0:	881b      	ldrh	r3, [r3, #0]
 800b5f2:	b29b      	uxth	r3, r3
 800b5f4:	88ba      	ldrh	r2, [r7, #4]
 800b5f6:	429a      	cmp	r2, r3
 800b5f8:	d223      	bcs.n	800b642 <ILI9341_Draw_Vertical_Line+0x7e>
	if(((ypos + height) - 1) >= LCD_HEIGHT)
 800b5fa:	88ba      	ldrh	r2, [r7, #4]
 800b5fc:	887b      	ldrh	r3, [r7, #2]
 800b5fe:	4413      	add	r3, r2
 800b600:	3b01      	subs	r3, #1
 800b602:	4a13      	ldr	r2, [pc, #76]	; (800b650 <ILI9341_Draw_Vertical_Line+0x8c>)
 800b604:	8812      	ldrh	r2, [r2, #0]
 800b606:	b292      	uxth	r2, r2
 800b608:	4293      	cmp	r3, r2
 800b60a:	db05      	blt.n	800b618 <ILI9341_Draw_Vertical_Line+0x54>
		{
			height= LCD_HEIGHT - ypos;
 800b60c:	4b10      	ldr	r3, [pc, #64]	; (800b650 <ILI9341_Draw_Vertical_Line+0x8c>)
 800b60e:	881b      	ldrh	r3, [r3, #0]
 800b610:	b29a      	uxth	r2, r3
 800b612:	88bb      	ldrh	r3, [r7, #4]
 800b614:	1ad3      	subs	r3, r2, r3
 800b616:	807b      	strh	r3, [r7, #2]
		}
	ILI9341_Set_Frame(xpos, ypos, xpos, (ypos + height) - 1);
 800b618:	88ba      	ldrh	r2, [r7, #4]
 800b61a:	887b      	ldrh	r3, [r7, #2]
 800b61c:	4413      	add	r3, r2
 800b61e:	b29b      	uxth	r3, r3
 800b620:	3b01      	subs	r3, #1
 800b622:	b29b      	uxth	r3, r3
 800b624:	88fa      	ldrh	r2, [r7, #6]
 800b626:	88b9      	ldrh	r1, [r7, #4]
 800b628:	88f8      	ldrh	r0, [r7, #6]
 800b62a:	f000 f813 	bl	800b654 <ILI9341_Set_Frame>
	_LCD_Write_Frame(xpos, ypos, colour, height, LINE_CHUNK);
 800b62e:	887c      	ldrh	r4, [r7, #2]
 800b630:	883a      	ldrh	r2, [r7, #0]
 800b632:	88b9      	ldrh	r1, [r7, #4]
 800b634:	88f8      	ldrh	r0, [r7, #6]
 800b636:	2303      	movs	r3, #3
 800b638:	9300      	str	r3, [sp, #0]
 800b63a:	4623      	mov	r3, r4
 800b63c:	f000 faba 	bl	800bbb4 <_LCD_Write_Frame>
 800b640:	e000      	b.n	800b644 <ILI9341_Draw_Vertical_Line+0x80>
	if((xpos >= LCD_WIDTH) || (ypos >= LCD_HEIGHT)) return;
 800b642:	bf00      	nop
}
 800b644:	370c      	adds	r7, #12
 800b646:	46bd      	mov	sp, r7
 800b648:	bd90      	pop	{r4, r7, pc}
 800b64a:	bf00      	nop
 800b64c:	200001e2 	.word	0x200001e2
 800b650:	200001e0 	.word	0x200001e0

0800b654 <ILI9341_Set_Frame>:
 *	bottom right of area (ec, ep):
 *	ec 	- 	"end column"
 *	ep	- 	"end page"
 */
void ILI9341_Set_Frame(uint16_t sc, uint16_t sp, uint16_t ec, uint16_t ep)
{
 800b654:	b590      	push	{r4, r7, lr}
 800b656:	b083      	sub	sp, #12
 800b658:	af00      	add	r7, sp, #0
 800b65a:	4604      	mov	r4, r0
 800b65c:	4608      	mov	r0, r1
 800b65e:	4611      	mov	r1, r2
 800b660:	461a      	mov	r2, r3
 800b662:	4623      	mov	r3, r4
 800b664:	80fb      	strh	r3, [r7, #6]
 800b666:	4603      	mov	r3, r0
 800b668:	80bb      	strh	r3, [r7, #4]
 800b66a:	460b      	mov	r3, r1
 800b66c:	807b      	strh	r3, [r7, #2]
 800b66e:	4613      	mov	r3, r2
 800b670:	803b      	strh	r3, [r7, #0]
	// send "Column Address Set" command
	_LCD_SendCommand(0x2A);
 800b672:	202a      	movs	r0, #42	; 0x2a
 800b674:	f000 fb4e 	bl	800bd14 <_LCD_SendCommand>
	_LCD_SendData(sc >> 8);
 800b678:	88fb      	ldrh	r3, [r7, #6]
 800b67a:	0a1b      	lsrs	r3, r3, #8
 800b67c:	b29b      	uxth	r3, r3
 800b67e:	b2db      	uxtb	r3, r3
 800b680:	4618      	mov	r0, r3
 800b682:	f000 fb79 	bl	800bd78 <_LCD_SendData>
	_LCD_SendData(sc);
 800b686:	88fb      	ldrh	r3, [r7, #6]
 800b688:	b2db      	uxtb	r3, r3
 800b68a:	4618      	mov	r0, r3
 800b68c:	f000 fb74 	bl	800bd78 <_LCD_SendData>
	_LCD_SendData(ec >> 8);
 800b690:	887b      	ldrh	r3, [r7, #2]
 800b692:	0a1b      	lsrs	r3, r3, #8
 800b694:	b29b      	uxth	r3, r3
 800b696:	b2db      	uxtb	r3, r3
 800b698:	4618      	mov	r0, r3
 800b69a:	f000 fb6d 	bl	800bd78 <_LCD_SendData>
	_LCD_SendData(ec);
 800b69e:	887b      	ldrh	r3, [r7, #2]
 800b6a0:	b2db      	uxtb	r3, r3
 800b6a2:	4618      	mov	r0, r3
 800b6a4:	f000 fb68 	bl	800bd78 <_LCD_SendData>

	// send "Page Address Set" command
	_LCD_SendCommand(0x2B);
 800b6a8:	202b      	movs	r0, #43	; 0x2b
 800b6aa:	f000 fb33 	bl	800bd14 <_LCD_SendCommand>
	_LCD_SendData(sp >> 8);
 800b6ae:	88bb      	ldrh	r3, [r7, #4]
 800b6b0:	0a1b      	lsrs	r3, r3, #8
 800b6b2:	b29b      	uxth	r3, r3
 800b6b4:	b2db      	uxtb	r3, r3
 800b6b6:	4618      	mov	r0, r3
 800b6b8:	f000 fb5e 	bl	800bd78 <_LCD_SendData>
	_LCD_SendData(sp);
 800b6bc:	88bb      	ldrh	r3, [r7, #4]
 800b6be:	b2db      	uxtb	r3, r3
 800b6c0:	4618      	mov	r0, r3
 800b6c2:	f000 fb59 	bl	800bd78 <_LCD_SendData>
	_LCD_SendData(ep >> 8);
 800b6c6:	883b      	ldrh	r3, [r7, #0]
 800b6c8:	0a1b      	lsrs	r3, r3, #8
 800b6ca:	b29b      	uxth	r3, r3
 800b6cc:	b2db      	uxtb	r3, r3
 800b6ce:	4618      	mov	r0, r3
 800b6d0:	f000 fb52 	bl	800bd78 <_LCD_SendData>
	_LCD_SendData(ep);
 800b6d4:	883b      	ldrh	r3, [r7, #0]
 800b6d6:	b2db      	uxtb	r3, r3
 800b6d8:	4618      	mov	r0, r3
 800b6da:	f000 fb4d 	bl	800bd78 <_LCD_SendData>

	_LCD_SendCommand(0x2C);
 800b6de:	202c      	movs	r0, #44	; 0x2c
 800b6e0:	f000 fb18 	bl	800bd14 <_LCD_SendCommand>
}
 800b6e4:	bf00      	nop
 800b6e6:	370c      	adds	r7, #12
 800b6e8:	46bd      	mov	sp, r7
 800b6ea:	bd90      	pop	{r4, r7, pc}

0800b6ec <ILI9341_Fill_Screen>:
 *
 * 	Sets address (entire screen) and Sends height*width ammount of colour information to LCD
 *
 */
void ILI9341_Fill_Screen(uint16_t colour)
{
 800b6ec:	b580      	push	{r7, lr}
 800b6ee:	b084      	sub	sp, #16
 800b6f0:	af02      	add	r7, sp, #8
 800b6f2:	4603      	mov	r3, r0
 800b6f4:	80fb      	strh	r3, [r7, #6]
	ILI9341_Set_Frame(0,0,LCD_WIDTH,LCD_HEIGHT);
 800b6f6:	4b10      	ldr	r3, [pc, #64]	; (800b738 <ILI9341_Fill_Screen+0x4c>)
 800b6f8:	881b      	ldrh	r3, [r3, #0]
 800b6fa:	b29a      	uxth	r2, r3
 800b6fc:	4b0f      	ldr	r3, [pc, #60]	; (800b73c <ILI9341_Fill_Screen+0x50>)
 800b6fe:	881b      	ldrh	r3, [r3, #0]
 800b700:	b29b      	uxth	r3, r3
 800b702:	2100      	movs	r1, #0
 800b704:	2000      	movs	r0, #0
 800b706:	f7ff ffa5 	bl	800b654 <ILI9341_Set_Frame>
	_LCD_Write_Frame(0, 0, colour, LCD_WIDTH*LCD_HEIGHT, AREA_CHUNK);
 800b70a:	4b0b      	ldr	r3, [pc, #44]	; (800b738 <ILI9341_Fill_Screen+0x4c>)
 800b70c:	881b      	ldrh	r3, [r3, #0]
 800b70e:	b29b      	uxth	r3, r3
 800b710:	461a      	mov	r2, r3
 800b712:	4b0a      	ldr	r3, [pc, #40]	; (800b73c <ILI9341_Fill_Screen+0x50>)
 800b714:	881b      	ldrh	r3, [r3, #0]
 800b716:	b29b      	uxth	r3, r3
 800b718:	fb03 f302 	mul.w	r3, r3, r2
 800b71c:	4619      	mov	r1, r3
 800b71e:	88fa      	ldrh	r2, [r7, #6]
 800b720:	2304      	movs	r3, #4
 800b722:	9300      	str	r3, [sp, #0]
 800b724:	460b      	mov	r3, r1
 800b726:	2100      	movs	r1, #0
 800b728:	2000      	movs	r0, #0
 800b72a:	f000 fa43 	bl	800bbb4 <_LCD_Write_Frame>
}
 800b72e:	bf00      	nop
 800b730:	3708      	adds	r7, #8
 800b732:	46bd      	mov	sp, r7
 800b734:	bd80      	pop	{r7, pc}
 800b736:	bf00      	nop
 800b738:	200001e2 	.word	0x200001e2
 800b73c:	200001e0 	.word	0x200001e0

0800b740 <ILI9341_Draw_Pixel>:
 * 	Using pixels to draw big simple structures is not recommended as it is really slow
 * 	Try using either rectangles or lines if possible
 *
 */
void ILI9341_Draw_Pixel(uint16_t x,uint16_t y,uint16_t colour)
{
 800b740:	b580      	push	{r7, lr}
 800b742:	b08c      	sub	sp, #48	; 0x30
 800b744:	af00      	add	r7, sp, #0
 800b746:	4603      	mov	r3, r0
 800b748:	80fb      	strh	r3, [r7, #6]
 800b74a:	460b      	mov	r3, r1
 800b74c:	80bb      	strh	r3, [r7, #4]
 800b74e:	4613      	mov	r3, r2
 800b750:	807b      	strh	r3, [r7, #2]
	if((x >= LCD_WIDTH) || (y >= LCD_HEIGHT)) return;	//OUT OF BOUNDS!
 800b752:	4b94      	ldr	r3, [pc, #592]	; (800b9a4 <ILI9341_Draw_Pixel+0x264>)
 800b754:	881b      	ldrh	r3, [r3, #0]
 800b756:	b29b      	uxth	r3, r3
 800b758:	88fa      	ldrh	r2, [r7, #6]
 800b75a:	429a      	cmp	r2, r3
 800b75c:	f080 811e 	bcs.w	800b99c <ILI9341_Draw_Pixel+0x25c>
 800b760:	4b91      	ldr	r3, [pc, #580]	; (800b9a8 <ILI9341_Draw_Pixel+0x268>)
 800b762:	881b      	ldrh	r3, [r3, #0]
 800b764:	b29b      	uxth	r3, r3
 800b766:	88ba      	ldrh	r2, [r7, #4]
 800b768:	429a      	cmp	r2, r3
 800b76a:	f080 8117 	bcs.w	800b99c <ILI9341_Draw_Pixel+0x25c>

	//ADDRESS
	LCD_DC_PORT->ODR &= ~(LCD_DC_PIN);
 800b76e:	4b8f      	ldr	r3, [pc, #572]	; (800b9ac <ILI9341_Draw_Pixel+0x26c>)
 800b770:	695b      	ldr	r3, [r3, #20]
 800b772:	4a8e      	ldr	r2, [pc, #568]	; (800b9ac <ILI9341_Draw_Pixel+0x26c>)
 800b774:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800b778:	6153      	str	r3, [r2, #20]
	LCD_CS_PORT->ODR &= ~(LCD_CS_PIN);
 800b77a:	4b8c      	ldr	r3, [pc, #560]	; (800b9ac <ILI9341_Draw_Pixel+0x26c>)
 800b77c:	695b      	ldr	r3, [r3, #20]
 800b77e:	4a8b      	ldr	r2, [pc, #556]	; (800b9ac <ILI9341_Draw_Pixel+0x26c>)
 800b780:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800b784:	6153      	str	r3, [r2, #20]

	_SPI_SendByte(0x2A, 0, 0);
 800b786:	2200      	movs	r2, #0
 800b788:	2100      	movs	r1, #0
 800b78a:	202a      	movs	r0, #42	; 0x2a
 800b78c:	f000 fb26 	bl	800bddc <_SPI_SendByte>

	// Additional SPI CS "low" hold
	for(int s=0; s < SPI_DELAY_HOLD; s++)
 800b790:	2300      	movs	r3, #0
 800b792:	62fb      	str	r3, [r7, #44]	; 0x2c
 800b794:	e008      	b.n	800b7a8 <ILI9341_Draw_Pixel+0x68>
		LCD_CS_PORT->ODR &= ~(LCD_CS_PIN);
 800b796:	4b85      	ldr	r3, [pc, #532]	; (800b9ac <ILI9341_Draw_Pixel+0x26c>)
 800b798:	695b      	ldr	r3, [r3, #20]
 800b79a:	4a84      	ldr	r2, [pc, #528]	; (800b9ac <ILI9341_Draw_Pixel+0x26c>)
 800b79c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800b7a0:	6153      	str	r3, [r2, #20]
	for(int s=0; s < SPI_DELAY_HOLD; s++)
 800b7a2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b7a4:	3301      	adds	r3, #1
 800b7a6:	62fb      	str	r3, [r7, #44]	; 0x2c
 800b7a8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b7aa:	2b02      	cmp	r3, #2
 800b7ac:	ddf3      	ble.n	800b796 <ILI9341_Draw_Pixel+0x56>

	LCD_DC_PORT->ODR |= LCD_DC_PIN;
 800b7ae:	4b7f      	ldr	r3, [pc, #508]	; (800b9ac <ILI9341_Draw_Pixel+0x26c>)
 800b7b0:	695b      	ldr	r3, [r3, #20]
 800b7b2:	4a7e      	ldr	r2, [pc, #504]	; (800b9ac <ILI9341_Draw_Pixel+0x26c>)
 800b7b4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800b7b8:	6153      	str	r3, [r2, #20]
	LCD_CS_PORT->ODR |= LCD_CS_PIN;
 800b7ba:	4b7c      	ldr	r3, [pc, #496]	; (800b9ac <ILI9341_Draw_Pixel+0x26c>)
 800b7bc:	695b      	ldr	r3, [r3, #20]
 800b7be:	4a7b      	ldr	r2, [pc, #492]	; (800b9ac <ILI9341_Draw_Pixel+0x26c>)
 800b7c0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800b7c4:	6153      	str	r3, [r2, #20]

	//XDATA
	LCD_CS_PORT->ODR &= ~(LCD_CS_PIN);
 800b7c6:	4b79      	ldr	r3, [pc, #484]	; (800b9ac <ILI9341_Draw_Pixel+0x26c>)
 800b7c8:	695b      	ldr	r3, [r3, #20]
 800b7ca:	4a78      	ldr	r2, [pc, #480]	; (800b9ac <ILI9341_Draw_Pixel+0x26c>)
 800b7cc:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800b7d0:	6153      	str	r3, [r2, #20]
	unsigned char Temp_Buffer[4] =
 800b7d2:	88fb      	ldrh	r3, [r7, #6]
 800b7d4:	0a1b      	lsrs	r3, r3, #8
 800b7d6:	b29b      	uxth	r3, r3
 800b7d8:	b2db      	uxtb	r3, r3
 800b7da:	753b      	strb	r3, [r7, #20]
 800b7dc:	88fb      	ldrh	r3, [r7, #6]
 800b7de:	b2db      	uxtb	r3, r3
 800b7e0:	757b      	strb	r3, [r7, #21]
	{
			x >> 8,
			x,
			(x + 1) >> 8,
 800b7e2:	88fb      	ldrh	r3, [r7, #6]
 800b7e4:	3301      	adds	r3, #1
 800b7e6:	121b      	asrs	r3, r3, #8
	unsigned char Temp_Buffer[4] =
 800b7e8:	b2db      	uxtb	r3, r3
 800b7ea:	75bb      	strb	r3, [r7, #22]
			(x + 1)
 800b7ec:	88fb      	ldrh	r3, [r7, #6]
 800b7ee:	b2db      	uxtb	r3, r3
 800b7f0:	3301      	adds	r3, #1
 800b7f2:	b2db      	uxtb	r3, r3
	unsigned char Temp_Buffer[4] =
 800b7f4:	75fb      	strb	r3, [r7, #23]
	};

	_SPI_SendByteMultiByte(Temp_Buffer, 4, 0, 9);
 800b7f6:	f107 0014 	add.w	r0, r7, #20
 800b7fa:	2309      	movs	r3, #9
 800b7fc:	2200      	movs	r2, #0
 800b7fe:	2104      	movs	r1, #4
 800b800:	f000 fb02 	bl	800be08 <_SPI_SendByteMultiByte>
	//HAL_SPI_Transmit(HSPI_INSTANCE, Temp_Buffer, 4, 1 );

	// Additional SPI CS "low" hold
	for(int s=0; s < SPI_DELAY_HOLD; s++)
 800b804:	2300      	movs	r3, #0
 800b806:	62bb      	str	r3, [r7, #40]	; 0x28
 800b808:	e008      	b.n	800b81c <ILI9341_Draw_Pixel+0xdc>
		LCD_CS_PORT->ODR &= ~(LCD_CS_PIN);
 800b80a:	4b68      	ldr	r3, [pc, #416]	; (800b9ac <ILI9341_Draw_Pixel+0x26c>)
 800b80c:	695b      	ldr	r3, [r3, #20]
 800b80e:	4a67      	ldr	r2, [pc, #412]	; (800b9ac <ILI9341_Draw_Pixel+0x26c>)
 800b810:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800b814:	6153      	str	r3, [r2, #20]
	for(int s=0; s < SPI_DELAY_HOLD; s++)
 800b816:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b818:	3301      	adds	r3, #1
 800b81a:	62bb      	str	r3, [r7, #40]	; 0x28
 800b81c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b81e:	2b02      	cmp	r3, #2
 800b820:	ddf3      	ble.n	800b80a <ILI9341_Draw_Pixel+0xca>

	LCD_CS_PORT->ODR |= LCD_CS_PIN;
 800b822:	4b62      	ldr	r3, [pc, #392]	; (800b9ac <ILI9341_Draw_Pixel+0x26c>)
 800b824:	695b      	ldr	r3, [r3, #20]
 800b826:	4a61      	ldr	r2, [pc, #388]	; (800b9ac <ILI9341_Draw_Pixel+0x26c>)
 800b828:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800b82c:	6153      	str	r3, [r2, #20]

	//ADDRESS
	LCD_DC_PORT->ODR &= ~(LCD_DC_PIN);
 800b82e:	4b5f      	ldr	r3, [pc, #380]	; (800b9ac <ILI9341_Draw_Pixel+0x26c>)
 800b830:	695b      	ldr	r3, [r3, #20]
 800b832:	4a5e      	ldr	r2, [pc, #376]	; (800b9ac <ILI9341_Draw_Pixel+0x26c>)
 800b834:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800b838:	6153      	str	r3, [r2, #20]
	LCD_CS_PORT->ODR &= ~(LCD_CS_PIN);
 800b83a:	4b5c      	ldr	r3, [pc, #368]	; (800b9ac <ILI9341_Draw_Pixel+0x26c>)
 800b83c:	695b      	ldr	r3, [r3, #20]
 800b83e:	4a5b      	ldr	r2, [pc, #364]	; (800b9ac <ILI9341_Draw_Pixel+0x26c>)
 800b840:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800b844:	6153      	str	r3, [r2, #20]

	_SPI_SendByte(0x2B, 0, 0);
 800b846:	2200      	movs	r2, #0
 800b848:	2100      	movs	r1, #0
 800b84a:	202b      	movs	r0, #43	; 0x2b
 800b84c:	f000 fac6 	bl	800bddc <_SPI_SendByte>

	// Additional SPI CS "low" hold
	for(int s=0; s < SPI_DELAY_HOLD; s++)
 800b850:	2300      	movs	r3, #0
 800b852:	627b      	str	r3, [r7, #36]	; 0x24
 800b854:	e008      	b.n	800b868 <ILI9341_Draw_Pixel+0x128>
		LCD_CS_PORT->ODR &= ~(LCD_CS_PIN);
 800b856:	4b55      	ldr	r3, [pc, #340]	; (800b9ac <ILI9341_Draw_Pixel+0x26c>)
 800b858:	695b      	ldr	r3, [r3, #20]
 800b85a:	4a54      	ldr	r2, [pc, #336]	; (800b9ac <ILI9341_Draw_Pixel+0x26c>)
 800b85c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800b860:	6153      	str	r3, [r2, #20]
	for(int s=0; s < SPI_DELAY_HOLD; s++)
 800b862:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b864:	3301      	adds	r3, #1
 800b866:	627b      	str	r3, [r7, #36]	; 0x24
 800b868:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b86a:	2b02      	cmp	r3, #2
 800b86c:	ddf3      	ble.n	800b856 <ILI9341_Draw_Pixel+0x116>

	LCD_DC_PORT->ODR |= LCD_DC_PIN;
 800b86e:	4b4f      	ldr	r3, [pc, #316]	; (800b9ac <ILI9341_Draw_Pixel+0x26c>)
 800b870:	695b      	ldr	r3, [r3, #20]
 800b872:	4a4e      	ldr	r2, [pc, #312]	; (800b9ac <ILI9341_Draw_Pixel+0x26c>)
 800b874:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800b878:	6153      	str	r3, [r2, #20]
	LCD_CS_PORT->ODR |= LCD_CS_PIN;
 800b87a:	4b4c      	ldr	r3, [pc, #304]	; (800b9ac <ILI9341_Draw_Pixel+0x26c>)
 800b87c:	695b      	ldr	r3, [r3, #20]
 800b87e:	4a4b      	ldr	r2, [pc, #300]	; (800b9ac <ILI9341_Draw_Pixel+0x26c>)
 800b880:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800b884:	6153      	str	r3, [r2, #20]

	//YDATA
	LCD_CS_PORT->ODR &= ~(LCD_CS_PIN);
 800b886:	4b49      	ldr	r3, [pc, #292]	; (800b9ac <ILI9341_Draw_Pixel+0x26c>)
 800b888:	695b      	ldr	r3, [r3, #20]
 800b88a:	4a48      	ldr	r2, [pc, #288]	; (800b9ac <ILI9341_Draw_Pixel+0x26c>)
 800b88c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800b890:	6153      	str	r3, [r2, #20]
	unsigned char Temp_Buffer1[4] =
 800b892:	88bb      	ldrh	r3, [r7, #4]
 800b894:	0a1b      	lsrs	r3, r3, #8
 800b896:	b29b      	uxth	r3, r3
 800b898:	b2db      	uxtb	r3, r3
 800b89a:	743b      	strb	r3, [r7, #16]
 800b89c:	88bb      	ldrh	r3, [r7, #4]
 800b89e:	b2db      	uxtb	r3, r3
 800b8a0:	747b      	strb	r3, [r7, #17]
	{
			y >> 8,
			y,
			(y + 1) >> 8,
 800b8a2:	88bb      	ldrh	r3, [r7, #4]
 800b8a4:	3301      	adds	r3, #1
 800b8a6:	121b      	asrs	r3, r3, #8
	unsigned char Temp_Buffer1[4] =
 800b8a8:	b2db      	uxtb	r3, r3
 800b8aa:	74bb      	strb	r3, [r7, #18]
			(y + 1)
 800b8ac:	88bb      	ldrh	r3, [r7, #4]
 800b8ae:	b2db      	uxtb	r3, r3
 800b8b0:	3301      	adds	r3, #1
 800b8b2:	b2db      	uxtb	r3, r3
	unsigned char Temp_Buffer1[4] =
 800b8b4:	74fb      	strb	r3, [r7, #19]
	};

	//HAL_SPI_Transmit(HSPI_INSTANCE, Temp_Buffer1, 4, 1 );
	_SPI_SendByteMultiByte(Temp_Buffer1, 4, 0, 9);
 800b8b6:	f107 0010 	add.w	r0, r7, #16
 800b8ba:	2309      	movs	r3, #9
 800b8bc:	2200      	movs	r2, #0
 800b8be:	2104      	movs	r1, #4
 800b8c0:	f000 faa2 	bl	800be08 <_SPI_SendByteMultiByte>

	// Additional SPI CS "low" hold
	for(int s=0; s < SPI_DELAY_HOLD; s++)
 800b8c4:	2300      	movs	r3, #0
 800b8c6:	623b      	str	r3, [r7, #32]
 800b8c8:	e008      	b.n	800b8dc <ILI9341_Draw_Pixel+0x19c>
		LCD_CS_PORT->ODR &= ~(LCD_CS_PIN);
 800b8ca:	4b38      	ldr	r3, [pc, #224]	; (800b9ac <ILI9341_Draw_Pixel+0x26c>)
 800b8cc:	695b      	ldr	r3, [r3, #20]
 800b8ce:	4a37      	ldr	r2, [pc, #220]	; (800b9ac <ILI9341_Draw_Pixel+0x26c>)
 800b8d0:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800b8d4:	6153      	str	r3, [r2, #20]
	for(int s=0; s < SPI_DELAY_HOLD; s++)
 800b8d6:	6a3b      	ldr	r3, [r7, #32]
 800b8d8:	3301      	adds	r3, #1
 800b8da:	623b      	str	r3, [r7, #32]
 800b8dc:	6a3b      	ldr	r3, [r7, #32]
 800b8de:	2b02      	cmp	r3, #2
 800b8e0:	ddf3      	ble.n	800b8ca <ILI9341_Draw_Pixel+0x18a>

	LCD_CS_PORT->ODR |= LCD_CS_PIN;
 800b8e2:	4b32      	ldr	r3, [pc, #200]	; (800b9ac <ILI9341_Draw_Pixel+0x26c>)
 800b8e4:	695b      	ldr	r3, [r3, #20]
 800b8e6:	4a31      	ldr	r2, [pc, #196]	; (800b9ac <ILI9341_Draw_Pixel+0x26c>)
 800b8e8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800b8ec:	6153      	str	r3, [r2, #20]

	//ADDRESS
	LCD_DC_PORT->ODR &= ~(LCD_DC_PIN);
 800b8ee:	4b2f      	ldr	r3, [pc, #188]	; (800b9ac <ILI9341_Draw_Pixel+0x26c>)
 800b8f0:	695b      	ldr	r3, [r3, #20]
 800b8f2:	4a2e      	ldr	r2, [pc, #184]	; (800b9ac <ILI9341_Draw_Pixel+0x26c>)
 800b8f4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800b8f8:	6153      	str	r3, [r2, #20]
	LCD_CS_PORT->ODR &= ~(LCD_CS_PIN);
 800b8fa:	4b2c      	ldr	r3, [pc, #176]	; (800b9ac <ILI9341_Draw_Pixel+0x26c>)
 800b8fc:	695b      	ldr	r3, [r3, #20]
 800b8fe:	4a2b      	ldr	r2, [pc, #172]	; (800b9ac <ILI9341_Draw_Pixel+0x26c>)
 800b900:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800b904:	6153      	str	r3, [r2, #20]

	_SPI_SendByte(0x2C, 0, 0);
 800b906:	2200      	movs	r2, #0
 800b908:	2100      	movs	r1, #0
 800b90a:	202c      	movs	r0, #44	; 0x2c
 800b90c:	f000 fa66 	bl	800bddc <_SPI_SendByte>

	// Additional SPI CS "low" hold
	for(int s=0; s < SPI_DELAY_HOLD; s++)
 800b910:	2300      	movs	r3, #0
 800b912:	61fb      	str	r3, [r7, #28]
 800b914:	e008      	b.n	800b928 <ILI9341_Draw_Pixel+0x1e8>
		LCD_CS_PORT->ODR &= ~(LCD_CS_PIN);
 800b916:	4b25      	ldr	r3, [pc, #148]	; (800b9ac <ILI9341_Draw_Pixel+0x26c>)
 800b918:	695b      	ldr	r3, [r3, #20]
 800b91a:	4a24      	ldr	r2, [pc, #144]	; (800b9ac <ILI9341_Draw_Pixel+0x26c>)
 800b91c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800b920:	6153      	str	r3, [r2, #20]
	for(int s=0; s < SPI_DELAY_HOLD; s++)
 800b922:	69fb      	ldr	r3, [r7, #28]
 800b924:	3301      	adds	r3, #1
 800b926:	61fb      	str	r3, [r7, #28]
 800b928:	69fb      	ldr	r3, [r7, #28]
 800b92a:	2b02      	cmp	r3, #2
 800b92c:	ddf3      	ble.n	800b916 <ILI9341_Draw_Pixel+0x1d6>

	LCD_DC_PORT->ODR |= LCD_DC_PIN;
 800b92e:	4b1f      	ldr	r3, [pc, #124]	; (800b9ac <ILI9341_Draw_Pixel+0x26c>)
 800b930:	695b      	ldr	r3, [r3, #20]
 800b932:	4a1e      	ldr	r2, [pc, #120]	; (800b9ac <ILI9341_Draw_Pixel+0x26c>)
 800b934:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800b938:	6153      	str	r3, [r2, #20]
	LCD_CS_PORT->ODR |= LCD_CS_PIN;
 800b93a:	4b1c      	ldr	r3, [pc, #112]	; (800b9ac <ILI9341_Draw_Pixel+0x26c>)
 800b93c:	695b      	ldr	r3, [r3, #20]
 800b93e:	4a1b      	ldr	r2, [pc, #108]	; (800b9ac <ILI9341_Draw_Pixel+0x26c>)
 800b940:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800b944:	6153      	str	r3, [r2, #20]

	//COLOUR
	LCD_CS_PORT->ODR &= ~(LCD_CS_PIN);
 800b946:	4b19      	ldr	r3, [pc, #100]	; (800b9ac <ILI9341_Draw_Pixel+0x26c>)
 800b948:	695b      	ldr	r3, [r3, #20]
 800b94a:	4a18      	ldr	r2, [pc, #96]	; (800b9ac <ILI9341_Draw_Pixel+0x26c>)
 800b94c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800b950:	6153      	str	r3, [r2, #20]
	unsigned char Temp_Buffer2[2] = {colour>>8, colour};
 800b952:	887b      	ldrh	r3, [r7, #2]
 800b954:	0a1b      	lsrs	r3, r3, #8
 800b956:	b29b      	uxth	r3, r3
 800b958:	b2db      	uxtb	r3, r3
 800b95a:	733b      	strb	r3, [r7, #12]
 800b95c:	887b      	ldrh	r3, [r7, #2]
 800b95e:	b2db      	uxtb	r3, r3
 800b960:	737b      	strb	r3, [r7, #13]

	//HAL_SPI_Transmit(HSPI_INSTANCE, Temp_Buffer2, 2, 1 );
	_SPI_SendByteMultiByte(Temp_Buffer2, 4, 0, 9);
 800b962:	f107 000c 	add.w	r0, r7, #12
 800b966:	2309      	movs	r3, #9
 800b968:	2200      	movs	r2, #0
 800b96a:	2104      	movs	r1, #4
 800b96c:	f000 fa4c 	bl	800be08 <_SPI_SendByteMultiByte>

	// Additional SPI CS "low" hold
	for(int s=0; s < SPI_DELAY_HOLD; s++)
 800b970:	2300      	movs	r3, #0
 800b972:	61bb      	str	r3, [r7, #24]
 800b974:	e008      	b.n	800b988 <ILI9341_Draw_Pixel+0x248>
		LCD_CS_PORT->ODR &= ~(LCD_CS_PIN);
 800b976:	4b0d      	ldr	r3, [pc, #52]	; (800b9ac <ILI9341_Draw_Pixel+0x26c>)
 800b978:	695b      	ldr	r3, [r3, #20]
 800b97a:	4a0c      	ldr	r2, [pc, #48]	; (800b9ac <ILI9341_Draw_Pixel+0x26c>)
 800b97c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800b980:	6153      	str	r3, [r2, #20]
	for(int s=0; s < SPI_DELAY_HOLD; s++)
 800b982:	69bb      	ldr	r3, [r7, #24]
 800b984:	3301      	adds	r3, #1
 800b986:	61bb      	str	r3, [r7, #24]
 800b988:	69bb      	ldr	r3, [r7, #24]
 800b98a:	2b02      	cmp	r3, #2
 800b98c:	ddf3      	ble.n	800b976 <ILI9341_Draw_Pixel+0x236>

	LCD_CS_PORT->ODR |= LCD_CS_PIN;
 800b98e:	4b07      	ldr	r3, [pc, #28]	; (800b9ac <ILI9341_Draw_Pixel+0x26c>)
 800b990:	695b      	ldr	r3, [r3, #20]
 800b992:	4a06      	ldr	r2, [pc, #24]	; (800b9ac <ILI9341_Draw_Pixel+0x26c>)
 800b994:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800b998:	6153      	str	r3, [r2, #20]
 800b99a:	e000      	b.n	800b99e <ILI9341_Draw_Pixel+0x25e>
	if((x >= LCD_WIDTH) || (y >= LCD_HEIGHT)) return;	//OUT OF BOUNDS!
 800b99c:	bf00      	nop


}
 800b99e:	3730      	adds	r7, #48	; 0x30
 800b9a0:	46bd      	mov	sp, r7
 800b9a2:	bd80      	pop	{r7, pc}
 800b9a4:	200001e2 	.word	0x200001e2
 800b9a8:	200001e0 	.word	0x200001e0
 800b9ac:	48000400 	.word	0x48000400

0800b9b0 <ILI9341_Draw_Rectangle>:
 *
 *
 */

void ILI9341_Draw_Rectangle(uint16_t xpos, uint16_t ypos, uint16_t width, uint16_t height, uint16_t colour, CHUNK_Type chunk_type)
{
 800b9b0:	b590      	push	{r4, r7, lr}
 800b9b2:	b087      	sub	sp, #28
 800b9b4:	af02      	add	r7, sp, #8
 800b9b6:	4604      	mov	r4, r0
 800b9b8:	4608      	mov	r0, r1
 800b9ba:	4611      	mov	r1, r2
 800b9bc:	461a      	mov	r2, r3
 800b9be:	4623      	mov	r3, r4
 800b9c0:	80fb      	strh	r3, [r7, #6]
 800b9c2:	4603      	mov	r3, r0
 800b9c4:	80bb      	strh	r3, [r7, #4]
 800b9c6:	460b      	mov	r3, r1
 800b9c8:	807b      	strh	r3, [r7, #2]
 800b9ca:	4613      	mov	r3, r2
 800b9cc:	803b      	strh	r3, [r7, #0]
	if((xpos >=LCD_WIDTH) || (ypos >=LCD_HEIGHT)) return;
 800b9ce:	4b39      	ldr	r3, [pc, #228]	; (800bab4 <ILI9341_Draw_Rectangle+0x104>)
 800b9d0:	881b      	ldrh	r3, [r3, #0]
 800b9d2:	b29b      	uxth	r3, r3
 800b9d4:	88fa      	ldrh	r2, [r7, #6]
 800b9d6:	429a      	cmp	r2, r3
 800b9d8:	d268      	bcs.n	800baac <ILI9341_Draw_Rectangle+0xfc>
 800b9da:	4b37      	ldr	r3, [pc, #220]	; (800bab8 <ILI9341_Draw_Rectangle+0x108>)
 800b9dc:	881b      	ldrh	r3, [r3, #0]
 800b9de:	b29b      	uxth	r3, r3
 800b9e0:	88ba      	ldrh	r2, [r7, #4]
 800b9e2:	429a      	cmp	r2, r3
 800b9e4:	d262      	bcs.n	800baac <ILI9341_Draw_Rectangle+0xfc>
	if((xpos+width-1)>=LCD_WIDTH)
 800b9e6:	88fa      	ldrh	r2, [r7, #6]
 800b9e8:	887b      	ldrh	r3, [r7, #2]
 800b9ea:	4413      	add	r3, r2
 800b9ec:	3b01      	subs	r3, #1
 800b9ee:	4a31      	ldr	r2, [pc, #196]	; (800bab4 <ILI9341_Draw_Rectangle+0x104>)
 800b9f0:	8812      	ldrh	r2, [r2, #0]
 800b9f2:	b292      	uxth	r2, r2
 800b9f4:	4293      	cmp	r3, r2
 800b9f6:	db05      	blt.n	800ba04 <ILI9341_Draw_Rectangle+0x54>
		{
			width=LCD_WIDTH-xpos;
 800b9f8:	4b2e      	ldr	r3, [pc, #184]	; (800bab4 <ILI9341_Draw_Rectangle+0x104>)
 800b9fa:	881b      	ldrh	r3, [r3, #0]
 800b9fc:	b29a      	uxth	r2, r3
 800b9fe:	88fb      	ldrh	r3, [r7, #6]
 800ba00:	1ad3      	subs	r3, r2, r3
 800ba02:	807b      	strh	r3, [r7, #2]
		}
	if((ypos+height-1)>=LCD_HEIGHT)
 800ba04:	88ba      	ldrh	r2, [r7, #4]
 800ba06:	883b      	ldrh	r3, [r7, #0]
 800ba08:	4413      	add	r3, r2
 800ba0a:	3b01      	subs	r3, #1
 800ba0c:	4a2a      	ldr	r2, [pc, #168]	; (800bab8 <ILI9341_Draw_Rectangle+0x108>)
 800ba0e:	8812      	ldrh	r2, [r2, #0]
 800ba10:	b292      	uxth	r2, r2
 800ba12:	4293      	cmp	r3, r2
 800ba14:	db05      	blt.n	800ba22 <ILI9341_Draw_Rectangle+0x72>
		{
			height=LCD_HEIGHT-ypos;
 800ba16:	4b28      	ldr	r3, [pc, #160]	; (800bab8 <ILI9341_Draw_Rectangle+0x108>)
 800ba18:	881b      	ldrh	r3, [r3, #0]
 800ba1a:	b29a      	uxth	r2, r3
 800ba1c:	88bb      	ldrh	r3, [r7, #4]
 800ba1e:	1ad3      	subs	r3, r2, r3
 800ba20:	803b      	strh	r3, [r7, #0]
		}
	ILI9341_Set_Frame(	xpos,
						ypos,
						(xpos + width) - 1,
 800ba22:	88fa      	ldrh	r2, [r7, #6]
 800ba24:	887b      	ldrh	r3, [r7, #2]
 800ba26:	4413      	add	r3, r2
 800ba28:	b29b      	uxth	r3, r3
	ILI9341_Set_Frame(	xpos,
 800ba2a:	3b01      	subs	r3, #1
 800ba2c:	b29c      	uxth	r4, r3
						(ypos + height) - 1);
 800ba2e:	88ba      	ldrh	r2, [r7, #4]
 800ba30:	883b      	ldrh	r3, [r7, #0]
 800ba32:	4413      	add	r3, r2
 800ba34:	b29b      	uxth	r3, r3
	ILI9341_Set_Frame(	xpos,
 800ba36:	3b01      	subs	r3, #1
 800ba38:	b29b      	uxth	r3, r3
 800ba3a:	88b9      	ldrh	r1, [r7, #4]
 800ba3c:	88f8      	ldrh	r0, [r7, #6]
 800ba3e:	4622      	mov	r2, r4
 800ba40:	f7ff fe08 	bl	800b654 <ILI9341_Set_Frame>
	// if odd numbered rect area is requested, we round down to nearest even number
	// to keep _LCD_Write_Frame() happy.

	// Note, truncated pixel will be needed at function end.

	uint16_t size = height*width;
 800ba44:	883a      	ldrh	r2, [r7, #0]
 800ba46:	887b      	ldrh	r3, [r7, #2]
 800ba48:	fb12 f303 	smulbb	r3, r2, r3
 800ba4c:	81fb      	strh	r3, [r7, #14]
	uint8_t truncated = 0;
 800ba4e:	2300      	movs	r3, #0
 800ba50:	737b      	strb	r3, [r7, #13]

	if((size & 1) && (size > 1))		// don't round down to zero!
 800ba52:	89fb      	ldrh	r3, [r7, #14]
 800ba54:	f003 0301 	and.w	r3, r3, #1
 800ba58:	2b00      	cmp	r3, #0
 800ba5a:	d009      	beq.n	800ba70 <ILI9341_Draw_Rectangle+0xc0>
 800ba5c:	89fb      	ldrh	r3, [r7, #14]
 800ba5e:	2b01      	cmp	r3, #1
 800ba60:	d906      	bls.n	800ba70 <ILI9341_Draw_Rectangle+0xc0>
	{
		truncated = 1;
 800ba62:	2301      	movs	r3, #1
 800ba64:	737b      	strb	r3, [r7, #13]
	 	size = ((size >> 1) * 2);
 800ba66:	89fb      	ldrh	r3, [r7, #14]
 800ba68:	085b      	lsrs	r3, r3, #1
 800ba6a:	b29b      	uxth	r3, r3
 800ba6c:	005b      	lsls	r3, r3, #1
 800ba6e:	81fb      	strh	r3, [r7, #14]
	}

	_LCD_Write_Frame(	xpos,
 800ba70:	89fc      	ldrh	r4, [r7, #14]
 800ba72:	8c3a      	ldrh	r2, [r7, #32]
 800ba74:	88b9      	ldrh	r1, [r7, #4]
 800ba76:	88f8      	ldrh	r0, [r7, #6]
 800ba78:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 800ba7c:	9300      	str	r3, [sp, #0]
 800ba7e:	4623      	mov	r3, r4
 800ba80:	f000 f898 	bl	800bbb4 <_LCD_Write_Frame>
						colour,
						size,
						chunk_type);

	// add the truncated pixel now
	if(truncated)
 800ba84:	7b7b      	ldrb	r3, [r7, #13]
 800ba86:	2b00      	cmp	r3, #0
 800ba88:	d011      	beq.n	800baae <ILI9341_Draw_Rectangle+0xfe>
	{
		ILI9341_Draw_Pixel(	(xpos + width) - 1,
 800ba8a:	88fa      	ldrh	r2, [r7, #6]
 800ba8c:	887b      	ldrh	r3, [r7, #2]
 800ba8e:	4413      	add	r3, r2
 800ba90:	b29b      	uxth	r3, r3
 800ba92:	3b01      	subs	r3, #1
 800ba94:	b298      	uxth	r0, r3
							(ypos + height) - 1,
 800ba96:	88ba      	ldrh	r2, [r7, #4]
 800ba98:	883b      	ldrh	r3, [r7, #0]
 800ba9a:	4413      	add	r3, r2
 800ba9c:	b29b      	uxth	r3, r3
		ILI9341_Draw_Pixel(	(xpos + width) - 1,
 800ba9e:	3b01      	subs	r3, #1
 800baa0:	b29b      	uxth	r3, r3
 800baa2:	8c3a      	ldrh	r2, [r7, #32]
 800baa4:	4619      	mov	r1, r3
 800baa6:	f7ff fe4b 	bl	800b740 <ILI9341_Draw_Pixel>
 800baaa:	e000      	b.n	800baae <ILI9341_Draw_Rectangle+0xfe>
	if((xpos >=LCD_WIDTH) || (ypos >=LCD_HEIGHT)) return;
 800baac:	bf00      	nop
							colour);
	}
}
 800baae:	3714      	adds	r7, #20
 800bab0:	46bd      	mov	sp, r7
 800bab2:	bd90      	pop	{r4, r7, pc}
 800bab4:	200001e2 	.word	0x200001e2
 800bab8:	200001e0 	.word	0x200001e0

0800babc <ILI9341_Set_Rotation>:
 *
 * 	Set LCD orientation
 *
 */
void ILI9341_Set_Rotation(uint8_t rotation)
{
 800babc:	b580      	push	{r7, lr}
 800babe:	b084      	sub	sp, #16
 800bac0:	af00      	add	r7, sp, #0
 800bac2:	4603      	mov	r3, r0
 800bac4:	71fb      	strb	r3, [r7, #7]

	uint8_t screen_rotation = rotation;
 800bac6:	79fb      	ldrb	r3, [r7, #7]
 800bac8:	73fb      	strb	r3, [r7, #15]

	_LCD_SendCommand(0x36);
 800baca:	2036      	movs	r0, #54	; 0x36
 800bacc:	f000 f922 	bl	800bd14 <_LCD_SendCommand>
	//HAL_Delay(1);

	switch(screen_rotation)
 800bad0:	7bfb      	ldrb	r3, [r7, #15]
 800bad2:	2b03      	cmp	r3, #3
 800bad4:	d836      	bhi.n	800bb44 <ILI9341_Set_Rotation+0x88>
 800bad6:	a201      	add	r2, pc, #4	; (adr r2, 800badc <ILI9341_Set_Rotation+0x20>)
 800bad8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800badc:	0800baed 	.word	0x0800baed
 800bae0:	0800bb03 	.word	0x0800bb03
 800bae4:	0800bb19 	.word	0x0800bb19
 800bae8:	0800bb2f 	.word	0x0800bb2f
	{
		case SCREEN_VERTICAL_1:
			_LCD_SendData(0x40|0x08);
 800baec:	2048      	movs	r0, #72	; 0x48
 800baee:	f000 f943 	bl	800bd78 <_LCD_SendData>
			LCD_WIDTH = 240;
 800baf2:	4b17      	ldr	r3, [pc, #92]	; (800bb50 <ILI9341_Set_Rotation+0x94>)
 800baf4:	22f0      	movs	r2, #240	; 0xf0
 800baf6:	801a      	strh	r2, [r3, #0]
			LCD_HEIGHT = 320;
 800baf8:	4b16      	ldr	r3, [pc, #88]	; (800bb54 <ILI9341_Set_Rotation+0x98>)
 800bafa:	f44f 72a0 	mov.w	r2, #320	; 0x140
 800bafe:	801a      	strh	r2, [r3, #0]
			break;
 800bb00:	e021      	b.n	800bb46 <ILI9341_Set_Rotation+0x8a>
		case SCREEN_HORIZONTAL_1:
			_LCD_SendData(0x20|0x08);
 800bb02:	2028      	movs	r0, #40	; 0x28
 800bb04:	f000 f938 	bl	800bd78 <_LCD_SendData>
			LCD_WIDTH  = 320;
 800bb08:	4b11      	ldr	r3, [pc, #68]	; (800bb50 <ILI9341_Set_Rotation+0x94>)
 800bb0a:	f44f 72a0 	mov.w	r2, #320	; 0x140
 800bb0e:	801a      	strh	r2, [r3, #0]
			LCD_HEIGHT = 240;
 800bb10:	4b10      	ldr	r3, [pc, #64]	; (800bb54 <ILI9341_Set_Rotation+0x98>)
 800bb12:	22f0      	movs	r2, #240	; 0xf0
 800bb14:	801a      	strh	r2, [r3, #0]
			break;
 800bb16:	e016      	b.n	800bb46 <ILI9341_Set_Rotation+0x8a>
		case SCREEN_VERTICAL_2:
			_LCD_SendData(0x80|0x08);
 800bb18:	2088      	movs	r0, #136	; 0x88
 800bb1a:	f000 f92d 	bl	800bd78 <_LCD_SendData>
			LCD_WIDTH  = 240;
 800bb1e:	4b0c      	ldr	r3, [pc, #48]	; (800bb50 <ILI9341_Set_Rotation+0x94>)
 800bb20:	22f0      	movs	r2, #240	; 0xf0
 800bb22:	801a      	strh	r2, [r3, #0]
			LCD_HEIGHT = 320;
 800bb24:	4b0b      	ldr	r3, [pc, #44]	; (800bb54 <ILI9341_Set_Rotation+0x98>)
 800bb26:	f44f 72a0 	mov.w	r2, #320	; 0x140
 800bb2a:	801a      	strh	r2, [r3, #0]
			break;
 800bb2c:	e00b      	b.n	800bb46 <ILI9341_Set_Rotation+0x8a>
		case SCREEN_HORIZONTAL_2:
			_LCD_SendData(0x40|0x80|0x20|0x08);
 800bb2e:	20e8      	movs	r0, #232	; 0xe8
 800bb30:	f000 f922 	bl	800bd78 <_LCD_SendData>
			LCD_WIDTH  = 320;
 800bb34:	4b06      	ldr	r3, [pc, #24]	; (800bb50 <ILI9341_Set_Rotation+0x94>)
 800bb36:	f44f 72a0 	mov.w	r2, #320	; 0x140
 800bb3a:	801a      	strh	r2, [r3, #0]
			LCD_HEIGHT = 240;
 800bb3c:	4b05      	ldr	r3, [pc, #20]	; (800bb54 <ILI9341_Set_Rotation+0x98>)
 800bb3e:	22f0      	movs	r2, #240	; 0xf0
 800bb40:	801a      	strh	r2, [r3, #0]
			break;
 800bb42:	e000      	b.n	800bb46 <ILI9341_Set_Rotation+0x8a>
		default:
			//EXIT IF SCREEN ROTATION NOT VALID!
			break;
 800bb44:	bf00      	nop
	}
}
 800bb46:	bf00      	nop
 800bb48:	3710      	adds	r7, #16
 800bb4a:	46bd      	mov	sp, r7
 800bb4c:	bd80      	pop	{r7, pc}
 800bb4e:	bf00      	nop
 800bb50:	200001e2 	.word	0x200001e2
 800bb54:	200001e0 	.word	0x200001e0

0800bb58 <_LCD_Enable>:
 *
 * Enable LCD display
 *
 */
void _LCD_Enable()
{
 800bb58:	b480      	push	{r7}
 800bb5a:	af00      	add	r7, sp, #0
	LCD_RST_PORT->ODR |= LCD_RST_PIN;
 800bb5c:	4b05      	ldr	r3, [pc, #20]	; (800bb74 <_LCD_Enable+0x1c>)
 800bb5e:	695b      	ldr	r3, [r3, #20]
 800bb60:	4a04      	ldr	r2, [pc, #16]	; (800bb74 <_LCD_Enable+0x1c>)
 800bb62:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800bb66:	6153      	str	r3, [r2, #20]
}
 800bb68:	bf00      	nop
 800bb6a:	46bd      	mov	sp, r7
 800bb6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bb70:	4770      	bx	lr
 800bb72:	bf00      	nop
 800bb74:	48000400 	.word	0x48000400

0800bb78 <_LCD_Reset>:
 *
 * 	Reset LCD
 *
 */
void _LCD_Reset()
{
 800bb78:	b580      	push	{r7, lr}
 800bb7a:	af00      	add	r7, sp, #0
	LCD_RST_PORT->ODR &= ~(LCD_RST_PIN);
 800bb7c:	4b0c      	ldr	r3, [pc, #48]	; (800bbb0 <_LCD_Reset+0x38>)
 800bb7e:	695b      	ldr	r3, [r3, #20]
 800bb80:	4a0b      	ldr	r2, [pc, #44]	; (800bbb0 <_LCD_Reset+0x38>)
 800bb82:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800bb86:	6153      	str	r3, [r2, #20]
	HAL_Delay(200);
 800bb88:	20c8      	movs	r0, #200	; 0xc8
 800bb8a:	f7f9 fe5f 	bl	800584c <HAL_Delay>
	LCD_CS_PORT->ODR &= ~(LCD_CS_PIN);
 800bb8e:	4b08      	ldr	r3, [pc, #32]	; (800bbb0 <_LCD_Reset+0x38>)
 800bb90:	695b      	ldr	r3, [r3, #20]
 800bb92:	4a07      	ldr	r2, [pc, #28]	; (800bbb0 <_LCD_Reset+0x38>)
 800bb94:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800bb98:	6153      	str	r3, [r2, #20]
	HAL_Delay(200);
 800bb9a:	20c8      	movs	r0, #200	; 0xc8
 800bb9c:	f7f9 fe56 	bl	800584c <HAL_Delay>
	LCD_RST_PORT->ODR |= LCD_RST_PIN;
 800bba0:	4b03      	ldr	r3, [pc, #12]	; (800bbb0 <_LCD_Reset+0x38>)
 800bba2:	695b      	ldr	r3, [r3, #20]
 800bba4:	4a02      	ldr	r2, [pc, #8]	; (800bbb0 <_LCD_Reset+0x38>)
 800bba6:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800bbaa:	6153      	str	r3, [r2, #20]
}
 800bbac:	bf00      	nop
 800bbae:	bd80      	pop	{r7, pc}
 800bbb0:	48000400 	.word	0x48000400

0800bbb4 <_LCD_Write_Frame>:
 *
 *	entire data sent to this function is a CHUNK < BURST_MAX_SIZE
 *	each CHUNK is broken down into smaller BLOCKS
 */
void _LCD_Write_Frame(uint16_t chunk_xpos, uint16_t chunk_ypos, uint16_t colour, uint32_t chunk_size, CHUNK_Type chunk_type)
{
 800bbb4:	b5b0      	push	{r4, r5, r7, lr}
 800bbb6:	b08e      	sub	sp, #56	; 0x38
 800bbb8:	af00      	add	r7, sp, #0
 800bbba:	607b      	str	r3, [r7, #4]
 800bbbc:	4603      	mov	r3, r0
 800bbbe:	81fb      	strh	r3, [r7, #14]
 800bbc0:	460b      	mov	r3, r1
 800bbc2:	81bb      	strh	r3, [r7, #12]
 800bbc4:	4613      	mov	r3, r2
 800bbc6:	817b      	strh	r3, [r7, #10]
 800bbc8:	466b      	mov	r3, sp
 800bbca:	461d      	mov	r5, r3

	uint32_t buffer_size = 0;
 800bbcc:	2300      	movs	r3, #0
 800bbce:	62fb      	str	r3, [r7, #44]	; 0x2c
	if((chunk_size*2) < BURST_MAX_SIZE)
 800bbd0:	687b      	ldr	r3, [r7, #4]
 800bbd2:	005b      	lsls	r3, r3, #1
 800bbd4:	4a4d      	ldr	r2, [pc, #308]	; (800bd0c <_LCD_Write_Frame+0x158>)
 800bbd6:	8812      	ldrh	r2, [r2, #0]
 800bbd8:	4293      	cmp	r3, r2
 800bbda:	d202      	bcs.n	800bbe2 <_LCD_Write_Frame+0x2e>
	{
		buffer_size = chunk_size;
 800bbdc:	687b      	ldr	r3, [r7, #4]
 800bbde:	62fb      	str	r3, [r7, #44]	; 0x2c
 800bbe0:	e002      	b.n	800bbe8 <_LCD_Write_Frame+0x34>
	}
	else
	{
		buffer_size = BURST_MAX_SIZE;
 800bbe2:	4b4a      	ldr	r3, [pc, #296]	; (800bd0c <_LCD_Write_Frame+0x158>)
 800bbe4:	881b      	ldrh	r3, [r3, #0]
 800bbe6:	62fb      	str	r3, [r7, #44]	; 0x2c
	}

	unsigned char chifted = 	colour>>8;;
 800bbe8:	897b      	ldrh	r3, [r7, #10]
 800bbea:	0a1b      	lsrs	r3, r3, #8
 800bbec:	b29b      	uxth	r3, r3
 800bbee:	77fb      	strb	r3, [r7, #31]
	unsigned char burst_buffer[buffer_size];
 800bbf0:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800bbf2:	4603      	mov	r3, r0
 800bbf4:	3b01      	subs	r3, #1
 800bbf6:	61bb      	str	r3, [r7, #24]
 800bbf8:	4601      	mov	r1, r0
 800bbfa:	f04f 0200 	mov.w	r2, #0
 800bbfe:	f04f 0300 	mov.w	r3, #0
 800bc02:	f04f 0400 	mov.w	r4, #0
 800bc06:	00d4      	lsls	r4, r2, #3
 800bc08:	ea44 7451 	orr.w	r4, r4, r1, lsr #29
 800bc0c:	00cb      	lsls	r3, r1, #3
 800bc0e:	4601      	mov	r1, r0
 800bc10:	f04f 0200 	mov.w	r2, #0
 800bc14:	f04f 0300 	mov.w	r3, #0
 800bc18:	f04f 0400 	mov.w	r4, #0
 800bc1c:	00d4      	lsls	r4, r2, #3
 800bc1e:	ea44 7451 	orr.w	r4, r4, r1, lsr #29
 800bc22:	00cb      	lsls	r3, r1, #3
 800bc24:	1dc3      	adds	r3, r0, #7
 800bc26:	08db      	lsrs	r3, r3, #3
 800bc28:	00db      	lsls	r3, r3, #3
 800bc2a:	ebad 0d03 	sub.w	sp, sp, r3
 800bc2e:	466b      	mov	r3, sp
 800bc30:	3300      	adds	r3, #0
 800bc32:	617b      	str	r3, [r7, #20]
	for(uint32_t j = 0; j < buffer_size; j+=2)
 800bc34:	2300      	movs	r3, #0
 800bc36:	633b      	str	r3, [r7, #48]	; 0x30
 800bc38:	e00d      	b.n	800bc56 <_LCD_Write_Frame+0xa2>
	{
			burst_buffer[j] = 	chifted;
 800bc3a:	697a      	ldr	r2, [r7, #20]
 800bc3c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bc3e:	4413      	add	r3, r2
 800bc40:	7ffa      	ldrb	r2, [r7, #31]
 800bc42:	701a      	strb	r2, [r3, #0]
			burst_buffer[j+1] = colour;
 800bc44:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bc46:	3301      	adds	r3, #1
 800bc48:	897a      	ldrh	r2, [r7, #10]
 800bc4a:	b2d1      	uxtb	r1, r2
 800bc4c:	697a      	ldr	r2, [r7, #20]
 800bc4e:	54d1      	strb	r1, [r2, r3]
	for(uint32_t j = 0; j < buffer_size; j+=2)
 800bc50:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bc52:	3302      	adds	r3, #2
 800bc54:	633b      	str	r3, [r7, #48]	; 0x30
 800bc56:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800bc58:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bc5a:	429a      	cmp	r2, r3
 800bc5c:	d3ed      	bcc.n	800bc3a <_LCD_Write_Frame+0x86>
	}
	
	uint32_t Sending_size = chunk_size*2;
 800bc5e:	687b      	ldr	r3, [r7, #4]
 800bc60:	005b      	lsls	r3, r3, #1
 800bc62:	613b      	str	r3, [r7, #16]

	// make sure we don't divide by size=0
	uint32_t Sending_in_Block = 1;
 800bc64:	2301      	movs	r3, #1
 800bc66:	637b      	str	r3, [r7, #52]	; 0x34
	uint32_t Remainder_from_block = 0;
 800bc68:	2300      	movs	r3, #0
 800bc6a:	62bb      	str	r3, [r7, #40]	; 0x28
	if(chunk_size > 0)
 800bc6c:	687b      	ldr	r3, [r7, #4]
 800bc6e:	2b00      	cmp	r3, #0
 800bc70:	d00d      	beq.n	800bc8e <_LCD_Write_Frame+0xda>
	{
			Sending_in_Block 		= Sending_size/buffer_size;
 800bc72:	693a      	ldr	r2, [r7, #16]
 800bc74:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bc76:	fbb2 f3f3 	udiv	r3, r2, r3
 800bc7a:	637b      	str	r3, [r7, #52]	; 0x34
			Remainder_from_block 	= Sending_size%buffer_size;
 800bc7c:	693b      	ldr	r3, [r7, #16]
 800bc7e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800bc80:	fbb3 f2f2 	udiv	r2, r3, r2
 800bc84:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800bc86:	fb01 f202 	mul.w	r2, r1, r2
 800bc8a:	1a9b      	subs	r3, r3, r2
 800bc8c:	62bb      	str	r3, [r7, #40]	; 0x28
	}

	// send blocks
	LCD_DC_PORT->ODR |= LCD_DC_PIN;
 800bc8e:	4b20      	ldr	r3, [pc, #128]	; (800bd10 <_LCD_Write_Frame+0x15c>)
 800bc90:	695b      	ldr	r3, [r3, #20]
 800bc92:	4a1f      	ldr	r2, [pc, #124]	; (800bd10 <_LCD_Write_Frame+0x15c>)
 800bc94:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800bc98:	6153      	str	r3, [r2, #20]
	LCD_CS_PORT->ODR &= ~(LCD_CS_PIN);
 800bc9a:	4b1d      	ldr	r3, [pc, #116]	; (800bd10 <_LCD_Write_Frame+0x15c>)
 800bc9c:	695b      	ldr	r3, [r3, #20]
 800bc9e:	4a1c      	ldr	r2, [pc, #112]	; (800bd10 <_LCD_Write_Frame+0x15c>)
 800bca0:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800bca4:	6153      	str	r3, [r2, #20]

	if(Sending_in_Block != 0)
 800bca6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800bca8:	2b00      	cmp	r3, #0
 800bcaa:	d00f      	beq.n	800bccc <_LCD_Write_Frame+0x118>
	{
		for(uint32_t j = 0; j < (Sending_in_Block); j++)
 800bcac:	2300      	movs	r3, #0
 800bcae:	627b      	str	r3, [r7, #36]	; 0x24
 800bcb0:	e008      	b.n	800bcc4 <_LCD_Write_Frame+0x110>
		{
			_SPI_SendByteMultiByte(burst_buffer, buffer_size, 0, 9);
 800bcb2:	6978      	ldr	r0, [r7, #20]
 800bcb4:	2309      	movs	r3, #9
 800bcb6:	2200      	movs	r2, #0
 800bcb8:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800bcba:	f000 f8a5 	bl	800be08 <_SPI_SendByteMultiByte>
		for(uint32_t j = 0; j < (Sending_in_Block); j++)
 800bcbe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bcc0:	3301      	adds	r3, #1
 800bcc2:	627b      	str	r3, [r7, #36]	; 0x24
 800bcc4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800bcc6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800bcc8:	429a      	cmp	r2, r3
 800bcca:	d3f2      	bcc.n	800bcb2 <_LCD_Write_Frame+0xfe>
		}
	}

	_SPI_SendByteMultiByte(burst_buffer, Remainder_from_block, 0, 9);
 800bccc:	6978      	ldr	r0, [r7, #20]
 800bcce:	2309      	movs	r3, #9
 800bcd0:	2200      	movs	r2, #0
 800bcd2:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800bcd4:	f000 f898 	bl	800be08 <_SPI_SendByteMultiByte>


	// Additional SPI CS "low" hold
	for(int x=0; x < SPI_DELAY_HOLD; x++)
 800bcd8:	2300      	movs	r3, #0
 800bcda:	623b      	str	r3, [r7, #32]
 800bcdc:	e008      	b.n	800bcf0 <_LCD_Write_Frame+0x13c>
		LCD_CS_PORT->ODR &= ~(LCD_CS_PIN);
 800bcde:	4b0c      	ldr	r3, [pc, #48]	; (800bd10 <_LCD_Write_Frame+0x15c>)
 800bce0:	695b      	ldr	r3, [r3, #20]
 800bce2:	4a0b      	ldr	r2, [pc, #44]	; (800bd10 <_LCD_Write_Frame+0x15c>)
 800bce4:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800bce8:	6153      	str	r3, [r2, #20]
	for(int x=0; x < SPI_DELAY_HOLD; x++)
 800bcea:	6a3b      	ldr	r3, [r7, #32]
 800bcec:	3301      	adds	r3, #1
 800bcee:	623b      	str	r3, [r7, #32]
 800bcf0:	6a3b      	ldr	r3, [r7, #32]
 800bcf2:	2b02      	cmp	r3, #2
 800bcf4:	ddf3      	ble.n	800bcde <_LCD_Write_Frame+0x12a>

	LCD_CS_PORT->ODR |= LCD_CS_PIN;
 800bcf6:	4b06      	ldr	r3, [pc, #24]	; (800bd10 <_LCD_Write_Frame+0x15c>)
 800bcf8:	695b      	ldr	r3, [r3, #20]
 800bcfa:	4a05      	ldr	r2, [pc, #20]	; (800bd10 <_LCD_Write_Frame+0x15c>)
 800bcfc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800bd00:	6153      	str	r3, [r2, #20]
 800bd02:	46ad      	mov	sp, r5

}
 800bd04:	bf00      	nop
 800bd06:	3738      	adds	r7, #56	; 0x38
 800bd08:	46bd      	mov	sp, r7
 800bd0a:	bdb0      	pop	{r4, r5, r7, pc}
 800bd0c:	200001e4 	.word	0x200001e4
 800bd10:	48000400 	.word	0x48000400

0800bd14 <_LCD_SendCommand>:
 *
 * 	Send command to LCD
 *
 */
void _LCD_SendCommand(uint8_t command)
{
 800bd14:	b580      	push	{r7, lr}
 800bd16:	b084      	sub	sp, #16
 800bd18:	af00      	add	r7, sp, #0
 800bd1a:	4603      	mov	r3, r0
 800bd1c:	71fb      	strb	r3, [r7, #7]
	LCD_CS_PORT->ODR &= ~(LCD_CS_PIN);
 800bd1e:	4b15      	ldr	r3, [pc, #84]	; (800bd74 <_LCD_SendCommand+0x60>)
 800bd20:	695b      	ldr	r3, [r3, #20]
 800bd22:	4a14      	ldr	r2, [pc, #80]	; (800bd74 <_LCD_SendCommand+0x60>)
 800bd24:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800bd28:	6153      	str	r3, [r2, #20]
	LCD_DC_PORT->ODR &= ~(LCD_DC_PIN);
 800bd2a:	4b12      	ldr	r3, [pc, #72]	; (800bd74 <_LCD_SendCommand+0x60>)
 800bd2c:	695b      	ldr	r3, [r3, #20]
 800bd2e:	4a11      	ldr	r2, [pc, #68]	; (800bd74 <_LCD_SendCommand+0x60>)
 800bd30:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800bd34:	6153      	str	r3, [r2, #20]

	_SPI_SendByte(command, 0 , 0);
 800bd36:	79fb      	ldrb	r3, [r7, #7]
 800bd38:	2200      	movs	r2, #0
 800bd3a:	2100      	movs	r1, #0
 800bd3c:	4618      	mov	r0, r3
 800bd3e:	f000 f84d 	bl	800bddc <_SPI_SendByte>

	// Additional SPI CS "low" hold
	for(int x=0; x < SPI_DELAY_HOLD; x++)
 800bd42:	2300      	movs	r3, #0
 800bd44:	60fb      	str	r3, [r7, #12]
 800bd46:	e008      	b.n	800bd5a <_LCD_SendCommand+0x46>
		LCD_CS_PORT->ODR &= ~(LCD_CS_PIN);
 800bd48:	4b0a      	ldr	r3, [pc, #40]	; (800bd74 <_LCD_SendCommand+0x60>)
 800bd4a:	695b      	ldr	r3, [r3, #20]
 800bd4c:	4a09      	ldr	r2, [pc, #36]	; (800bd74 <_LCD_SendCommand+0x60>)
 800bd4e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800bd52:	6153      	str	r3, [r2, #20]
	for(int x=0; x < SPI_DELAY_HOLD; x++)
 800bd54:	68fb      	ldr	r3, [r7, #12]
 800bd56:	3301      	adds	r3, #1
 800bd58:	60fb      	str	r3, [r7, #12]
 800bd5a:	68fb      	ldr	r3, [r7, #12]
 800bd5c:	2b02      	cmp	r3, #2
 800bd5e:	ddf3      	ble.n	800bd48 <_LCD_SendCommand+0x34>

	LCD_CS_PORT->ODR |= LCD_CS_PIN;
 800bd60:	4b04      	ldr	r3, [pc, #16]	; (800bd74 <_LCD_SendCommand+0x60>)
 800bd62:	695b      	ldr	r3, [r3, #20]
 800bd64:	4a03      	ldr	r2, [pc, #12]	; (800bd74 <_LCD_SendCommand+0x60>)
 800bd66:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800bd6a:	6153      	str	r3, [r2, #20]
}
 800bd6c:	bf00      	nop
 800bd6e:	3710      	adds	r7, #16
 800bd70:	46bd      	mov	sp, r7
 800bd72:	bd80      	pop	{r7, pc}
 800bd74:	48000400 	.word	0x48000400

0800bd78 <_LCD_SendData>:
 *
 * 	Send Data to LCD
 *
 */
void _LCD_SendData(uint8_t data)
{
 800bd78:	b580      	push	{r7, lr}
 800bd7a:	b084      	sub	sp, #16
 800bd7c:	af00      	add	r7, sp, #0
 800bd7e:	4603      	mov	r3, r0
 800bd80:	71fb      	strb	r3, [r7, #7]
	LCD_DC_PORT->ODR |= LCD_DC_PIN;
 800bd82:	4b15      	ldr	r3, [pc, #84]	; (800bdd8 <_LCD_SendData+0x60>)
 800bd84:	695b      	ldr	r3, [r3, #20]
 800bd86:	4a14      	ldr	r2, [pc, #80]	; (800bdd8 <_LCD_SendData+0x60>)
 800bd88:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800bd8c:	6153      	str	r3, [r2, #20]
	LCD_CS_PORT->ODR &= ~(LCD_CS_PIN);
 800bd8e:	4b12      	ldr	r3, [pc, #72]	; (800bdd8 <_LCD_SendData+0x60>)
 800bd90:	695b      	ldr	r3, [r3, #20]
 800bd92:	4a11      	ldr	r2, [pc, #68]	; (800bdd8 <_LCD_SendData+0x60>)
 800bd94:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800bd98:	6153      	str	r3, [r2, #20]

	_SPI_SendByte(data, 0 , 0);
 800bd9a:	79fb      	ldrb	r3, [r7, #7]
 800bd9c:	2200      	movs	r2, #0
 800bd9e:	2100      	movs	r1, #0
 800bda0:	4618      	mov	r0, r3
 800bda2:	f000 f81b 	bl	800bddc <_SPI_SendByte>

	// Additional SPI CS "low" hold
	for(int x=0; x < SPI_DELAY_HOLD; x++)
 800bda6:	2300      	movs	r3, #0
 800bda8:	60fb      	str	r3, [r7, #12]
 800bdaa:	e008      	b.n	800bdbe <_LCD_SendData+0x46>
		LCD_CS_PORT->ODR &= ~(LCD_CS_PIN);
 800bdac:	4b0a      	ldr	r3, [pc, #40]	; (800bdd8 <_LCD_SendData+0x60>)
 800bdae:	695b      	ldr	r3, [r3, #20]
 800bdb0:	4a09      	ldr	r2, [pc, #36]	; (800bdd8 <_LCD_SendData+0x60>)
 800bdb2:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800bdb6:	6153      	str	r3, [r2, #20]
	for(int x=0; x < SPI_DELAY_HOLD; x++)
 800bdb8:	68fb      	ldr	r3, [r7, #12]
 800bdba:	3301      	adds	r3, #1
 800bdbc:	60fb      	str	r3, [r7, #12]
 800bdbe:	68fb      	ldr	r3, [r7, #12]
 800bdc0:	2b02      	cmp	r3, #2
 800bdc2:	ddf3      	ble.n	800bdac <_LCD_SendData+0x34>

	LCD_CS_PORT->ODR &= ~(LCD_CS_PIN);
 800bdc4:	4b04      	ldr	r3, [pc, #16]	; (800bdd8 <_LCD_SendData+0x60>)
 800bdc6:	695b      	ldr	r3, [r3, #20]
 800bdc8:	4a03      	ldr	r2, [pc, #12]	; (800bdd8 <_LCD_SendData+0x60>)
 800bdca:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800bdce:	6153      	str	r3, [r2, #20]
}
 800bdd0:	bf00      	nop
 800bdd2:	3710      	adds	r7, #16
 800bdd4:	46bd      	mov	sp, r7
 800bdd6:	bd80      	pop	{r7, pc}
 800bdd8:	48000400 	.word	0x48000400

0800bddc <_SPI_SendByte>:
 *
 * 	Send single byte over SPI using HAL or (optimised) direct-to-register
 *
 */
void _SPI_SendByte(unsigned char data_buffer, uint8_t pre_frame_delay, uint8_t post_frame_delay)
{
 800bddc:	b580      	push	{r7, lr}
 800bdde:	b082      	sub	sp, #8
 800bde0:	af00      	add	r7, sp, #0
 800bde2:	4603      	mov	r3, r0
 800bde4:	71fb      	strb	r3, [r7, #7]
 800bde6:	460b      	mov	r3, r1
 800bde8:	71bb      	strb	r3, [r7, #6]
 800bdea:	4613      	mov	r3, r2
 800bdec:	717b      	strb	r3, [r7, #5]

#ifdef USE_HAL_SPI
	HAL_SPI_Transmit(HSPI_INSTANCE, &data_buffer, 1, 1);
 800bdee:	1df9      	adds	r1, r7, #7
 800bdf0:	2301      	movs	r3, #1
 800bdf2:	2201      	movs	r2, #1
 800bdf4:	4803      	ldr	r0, [pc, #12]	; (800be04 <_SPI_SendByte+0x28>)
 800bdf6:	f7fd fa9f 	bl	8009338 <HAL_SPI_Transmit>
   	for(int d = 0; d < post_frame_delay ; d++)
   		asm("nop");

#endif

}
 800bdfa:	bf00      	nop
 800bdfc:	3708      	adds	r7, #8
 800bdfe:	46bd      	mov	sp, r7
 800be00:	bd80      	pop	{r7, pc}
 800be02:	bf00      	nop
 800be04:	20001614 	.word	0x20001614

0800be08 <_SPI_SendByteMultiByte>:
 *
 * 	Send multiple bytes over SPI using HAL or (optimised) direct-to-register
 *
 */
void _SPI_SendByteMultiByte(unsigned char *data_buffer, uint32_t buffer_size, uint8_t pre_frame_delay, uint8_t post_frame_delay)
{
 800be08:	b580      	push	{r7, lr}
 800be0a:	b084      	sub	sp, #16
 800be0c:	af00      	add	r7, sp, #0
 800be0e:	60f8      	str	r0, [r7, #12]
 800be10:	60b9      	str	r1, [r7, #8]
 800be12:	4611      	mov	r1, r2
 800be14:	461a      	mov	r2, r3
 800be16:	460b      	mov	r3, r1
 800be18:	71fb      	strb	r3, [r7, #7]
 800be1a:	4613      	mov	r3, r2
 800be1c:	71bb      	strb	r3, [r7, #6]

#ifdef USE_HAL_SPI
	HAL_SPI_Transmit(HSPI_INSTANCE, (unsigned char *)data_buffer, buffer_size, 2 );
 800be1e:	68bb      	ldr	r3, [r7, #8]
 800be20:	b29a      	uxth	r2, r3
 800be22:	2302      	movs	r3, #2
 800be24:	68f9      	ldr	r1, [r7, #12]
 800be26:	4803      	ldr	r0, [pc, #12]	; (800be34 <_SPI_SendByteMultiByte+0x2c>)
 800be28:	f7fd fa86 	bl	8009338 <HAL_SPI_Transmit>
   	for(int d = 0; d < post_frame_delay ; d++)
   		asm("nop");

#endif

}
 800be2c:	bf00      	nop
 800be2e:	3710      	adds	r7, #16
 800be30:	46bd      	mov	sp, r7
 800be32:	bd80      	pop	{r7, pc}
 800be34:	20001614 	.word	0x20001614

0800be38 <__errno>:
 800be38:	4b01      	ldr	r3, [pc, #4]	; (800be40 <__errno+0x8>)
 800be3a:	6818      	ldr	r0, [r3, #0]
 800be3c:	4770      	bx	lr
 800be3e:	bf00      	nop
 800be40:	20001228 	.word	0x20001228

0800be44 <__libc_init_array>:
 800be44:	b570      	push	{r4, r5, r6, lr}
 800be46:	4e0d      	ldr	r6, [pc, #52]	; (800be7c <__libc_init_array+0x38>)
 800be48:	4c0d      	ldr	r4, [pc, #52]	; (800be80 <__libc_init_array+0x3c>)
 800be4a:	1ba4      	subs	r4, r4, r6
 800be4c:	10a4      	asrs	r4, r4, #2
 800be4e:	2500      	movs	r5, #0
 800be50:	42a5      	cmp	r5, r4
 800be52:	d109      	bne.n	800be68 <__libc_init_array+0x24>
 800be54:	4e0b      	ldr	r6, [pc, #44]	; (800be84 <__libc_init_array+0x40>)
 800be56:	4c0c      	ldr	r4, [pc, #48]	; (800be88 <__libc_init_array+0x44>)
 800be58:	f002 fc32 	bl	800e6c0 <_init>
 800be5c:	1ba4      	subs	r4, r4, r6
 800be5e:	10a4      	asrs	r4, r4, #2
 800be60:	2500      	movs	r5, #0
 800be62:	42a5      	cmp	r5, r4
 800be64:	d105      	bne.n	800be72 <__libc_init_array+0x2e>
 800be66:	bd70      	pop	{r4, r5, r6, pc}
 800be68:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800be6c:	4798      	blx	r3
 800be6e:	3501      	adds	r5, #1
 800be70:	e7ee      	b.n	800be50 <__libc_init_array+0xc>
 800be72:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800be76:	4798      	blx	r3
 800be78:	3501      	adds	r5, #1
 800be7a:	e7f2      	b.n	800be62 <__libc_init_array+0x1e>
 800be7c:	0800f0f0 	.word	0x0800f0f0
 800be80:	0800f0f0 	.word	0x0800f0f0
 800be84:	0800f0f0 	.word	0x0800f0f0
 800be88:	0800f0f4 	.word	0x0800f0f4

0800be8c <memset>:
 800be8c:	4402      	add	r2, r0
 800be8e:	4603      	mov	r3, r0
 800be90:	4293      	cmp	r3, r2
 800be92:	d100      	bne.n	800be96 <memset+0xa>
 800be94:	4770      	bx	lr
 800be96:	f803 1b01 	strb.w	r1, [r3], #1
 800be9a:	e7f9      	b.n	800be90 <memset+0x4>

0800be9c <__cvt>:
 800be9c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800bea0:	ec55 4b10 	vmov	r4, r5, d0
 800bea4:	9f0d      	ldr	r7, [sp, #52]	; 0x34
 800bea6:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 800beaa:	2d00      	cmp	r5, #0
 800beac:	460e      	mov	r6, r1
 800beae:	4691      	mov	r9, r2
 800beb0:	4619      	mov	r1, r3
 800beb2:	bfb8      	it	lt
 800beb4:	4622      	movlt	r2, r4
 800beb6:	462b      	mov	r3, r5
 800beb8:	f027 0720 	bic.w	r7, r7, #32
 800bebc:	bfbb      	ittet	lt
 800bebe:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 800bec2:	461d      	movlt	r5, r3
 800bec4:	2300      	movge	r3, #0
 800bec6:	232d      	movlt	r3, #45	; 0x2d
 800bec8:	bfb8      	it	lt
 800beca:	4614      	movlt	r4, r2
 800becc:	2f46      	cmp	r7, #70	; 0x46
 800bece:	700b      	strb	r3, [r1, #0]
 800bed0:	d004      	beq.n	800bedc <__cvt+0x40>
 800bed2:	2f45      	cmp	r7, #69	; 0x45
 800bed4:	d100      	bne.n	800bed8 <__cvt+0x3c>
 800bed6:	3601      	adds	r6, #1
 800bed8:	2102      	movs	r1, #2
 800beda:	e000      	b.n	800bede <__cvt+0x42>
 800bedc:	2103      	movs	r1, #3
 800bede:	ab03      	add	r3, sp, #12
 800bee0:	9301      	str	r3, [sp, #4]
 800bee2:	ab02      	add	r3, sp, #8
 800bee4:	9300      	str	r3, [sp, #0]
 800bee6:	4632      	mov	r2, r6
 800bee8:	4653      	mov	r3, sl
 800beea:	ec45 4b10 	vmov	d0, r4, r5
 800beee:	f000 fe27 	bl	800cb40 <_dtoa_r>
 800bef2:	2f47      	cmp	r7, #71	; 0x47
 800bef4:	4680      	mov	r8, r0
 800bef6:	d102      	bne.n	800befe <__cvt+0x62>
 800bef8:	f019 0f01 	tst.w	r9, #1
 800befc:	d026      	beq.n	800bf4c <__cvt+0xb0>
 800befe:	2f46      	cmp	r7, #70	; 0x46
 800bf00:	eb08 0906 	add.w	r9, r8, r6
 800bf04:	d111      	bne.n	800bf2a <__cvt+0x8e>
 800bf06:	f898 3000 	ldrb.w	r3, [r8]
 800bf0a:	2b30      	cmp	r3, #48	; 0x30
 800bf0c:	d10a      	bne.n	800bf24 <__cvt+0x88>
 800bf0e:	2200      	movs	r2, #0
 800bf10:	2300      	movs	r3, #0
 800bf12:	4620      	mov	r0, r4
 800bf14:	4629      	mov	r1, r5
 800bf16:	f7f4 fdff 	bl	8000b18 <__aeabi_dcmpeq>
 800bf1a:	b918      	cbnz	r0, 800bf24 <__cvt+0x88>
 800bf1c:	f1c6 0601 	rsb	r6, r6, #1
 800bf20:	f8ca 6000 	str.w	r6, [sl]
 800bf24:	f8da 3000 	ldr.w	r3, [sl]
 800bf28:	4499      	add	r9, r3
 800bf2a:	2200      	movs	r2, #0
 800bf2c:	2300      	movs	r3, #0
 800bf2e:	4620      	mov	r0, r4
 800bf30:	4629      	mov	r1, r5
 800bf32:	f7f4 fdf1 	bl	8000b18 <__aeabi_dcmpeq>
 800bf36:	b938      	cbnz	r0, 800bf48 <__cvt+0xac>
 800bf38:	2230      	movs	r2, #48	; 0x30
 800bf3a:	9b03      	ldr	r3, [sp, #12]
 800bf3c:	454b      	cmp	r3, r9
 800bf3e:	d205      	bcs.n	800bf4c <__cvt+0xb0>
 800bf40:	1c59      	adds	r1, r3, #1
 800bf42:	9103      	str	r1, [sp, #12]
 800bf44:	701a      	strb	r2, [r3, #0]
 800bf46:	e7f8      	b.n	800bf3a <__cvt+0x9e>
 800bf48:	f8cd 900c 	str.w	r9, [sp, #12]
 800bf4c:	9b03      	ldr	r3, [sp, #12]
 800bf4e:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800bf50:	eba3 0308 	sub.w	r3, r3, r8
 800bf54:	4640      	mov	r0, r8
 800bf56:	6013      	str	r3, [r2, #0]
 800bf58:	b004      	add	sp, #16
 800bf5a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

0800bf5e <__exponent>:
 800bf5e:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800bf60:	2900      	cmp	r1, #0
 800bf62:	4604      	mov	r4, r0
 800bf64:	bfba      	itte	lt
 800bf66:	4249      	neglt	r1, r1
 800bf68:	232d      	movlt	r3, #45	; 0x2d
 800bf6a:	232b      	movge	r3, #43	; 0x2b
 800bf6c:	2909      	cmp	r1, #9
 800bf6e:	f804 2b02 	strb.w	r2, [r4], #2
 800bf72:	7043      	strb	r3, [r0, #1]
 800bf74:	dd20      	ble.n	800bfb8 <__exponent+0x5a>
 800bf76:	f10d 0307 	add.w	r3, sp, #7
 800bf7a:	461f      	mov	r7, r3
 800bf7c:	260a      	movs	r6, #10
 800bf7e:	fb91 f5f6 	sdiv	r5, r1, r6
 800bf82:	fb06 1115 	mls	r1, r6, r5, r1
 800bf86:	3130      	adds	r1, #48	; 0x30
 800bf88:	2d09      	cmp	r5, #9
 800bf8a:	f803 1c01 	strb.w	r1, [r3, #-1]
 800bf8e:	f103 32ff 	add.w	r2, r3, #4294967295	; 0xffffffff
 800bf92:	4629      	mov	r1, r5
 800bf94:	dc09      	bgt.n	800bfaa <__exponent+0x4c>
 800bf96:	3130      	adds	r1, #48	; 0x30
 800bf98:	3b02      	subs	r3, #2
 800bf9a:	f802 1c01 	strb.w	r1, [r2, #-1]
 800bf9e:	42bb      	cmp	r3, r7
 800bfa0:	4622      	mov	r2, r4
 800bfa2:	d304      	bcc.n	800bfae <__exponent+0x50>
 800bfa4:	1a10      	subs	r0, r2, r0
 800bfa6:	b003      	add	sp, #12
 800bfa8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800bfaa:	4613      	mov	r3, r2
 800bfac:	e7e7      	b.n	800bf7e <__exponent+0x20>
 800bfae:	f813 2b01 	ldrb.w	r2, [r3], #1
 800bfb2:	f804 2b01 	strb.w	r2, [r4], #1
 800bfb6:	e7f2      	b.n	800bf9e <__exponent+0x40>
 800bfb8:	2330      	movs	r3, #48	; 0x30
 800bfba:	4419      	add	r1, r3
 800bfbc:	7083      	strb	r3, [r0, #2]
 800bfbe:	1d02      	adds	r2, r0, #4
 800bfc0:	70c1      	strb	r1, [r0, #3]
 800bfc2:	e7ef      	b.n	800bfa4 <__exponent+0x46>

0800bfc4 <_printf_float>:
 800bfc4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bfc8:	b08d      	sub	sp, #52	; 0x34
 800bfca:	460c      	mov	r4, r1
 800bfcc:	f8dd 8058 	ldr.w	r8, [sp, #88]	; 0x58
 800bfd0:	4616      	mov	r6, r2
 800bfd2:	461f      	mov	r7, r3
 800bfd4:	4605      	mov	r5, r0
 800bfd6:	f001 fce5 	bl	800d9a4 <_localeconv_r>
 800bfda:	6803      	ldr	r3, [r0, #0]
 800bfdc:	9304      	str	r3, [sp, #16]
 800bfde:	4618      	mov	r0, r3
 800bfe0:	f7f4 f91e 	bl	8000220 <strlen>
 800bfe4:	2300      	movs	r3, #0
 800bfe6:	930a      	str	r3, [sp, #40]	; 0x28
 800bfe8:	f8d8 3000 	ldr.w	r3, [r8]
 800bfec:	9005      	str	r0, [sp, #20]
 800bfee:	3307      	adds	r3, #7
 800bff0:	f023 0307 	bic.w	r3, r3, #7
 800bff4:	f103 0208 	add.w	r2, r3, #8
 800bff8:	f894 a018 	ldrb.w	sl, [r4, #24]
 800bffc:	f8d4 b000 	ldr.w	fp, [r4]
 800c000:	f8c8 2000 	str.w	r2, [r8]
 800c004:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c008:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 800c00c:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 800c010:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 800c014:	9307      	str	r3, [sp, #28]
 800c016:	f8cd 8018 	str.w	r8, [sp, #24]
 800c01a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800c01e:	4ba7      	ldr	r3, [pc, #668]	; (800c2bc <_printf_float+0x2f8>)
 800c020:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800c024:	f7f4 fdaa 	bl	8000b7c <__aeabi_dcmpun>
 800c028:	bb70      	cbnz	r0, 800c088 <_printf_float+0xc4>
 800c02a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800c02e:	4ba3      	ldr	r3, [pc, #652]	; (800c2bc <_printf_float+0x2f8>)
 800c030:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800c034:	f7f4 fd84 	bl	8000b40 <__aeabi_dcmple>
 800c038:	bb30      	cbnz	r0, 800c088 <_printf_float+0xc4>
 800c03a:	2200      	movs	r2, #0
 800c03c:	2300      	movs	r3, #0
 800c03e:	4640      	mov	r0, r8
 800c040:	4649      	mov	r1, r9
 800c042:	f7f4 fd73 	bl	8000b2c <__aeabi_dcmplt>
 800c046:	b110      	cbz	r0, 800c04e <_printf_float+0x8a>
 800c048:	232d      	movs	r3, #45	; 0x2d
 800c04a:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800c04e:	4a9c      	ldr	r2, [pc, #624]	; (800c2c0 <_printf_float+0x2fc>)
 800c050:	4b9c      	ldr	r3, [pc, #624]	; (800c2c4 <_printf_float+0x300>)
 800c052:	f1ba 0f47 	cmp.w	sl, #71	; 0x47
 800c056:	bf8c      	ite	hi
 800c058:	4690      	movhi	r8, r2
 800c05a:	4698      	movls	r8, r3
 800c05c:	2303      	movs	r3, #3
 800c05e:	f02b 0204 	bic.w	r2, fp, #4
 800c062:	6123      	str	r3, [r4, #16]
 800c064:	6022      	str	r2, [r4, #0]
 800c066:	f04f 0900 	mov.w	r9, #0
 800c06a:	9700      	str	r7, [sp, #0]
 800c06c:	4633      	mov	r3, r6
 800c06e:	aa0b      	add	r2, sp, #44	; 0x2c
 800c070:	4621      	mov	r1, r4
 800c072:	4628      	mov	r0, r5
 800c074:	f000 f9e6 	bl	800c444 <_printf_common>
 800c078:	3001      	adds	r0, #1
 800c07a:	f040 808d 	bne.w	800c198 <_printf_float+0x1d4>
 800c07e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800c082:	b00d      	add	sp, #52	; 0x34
 800c084:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c088:	4642      	mov	r2, r8
 800c08a:	464b      	mov	r3, r9
 800c08c:	4640      	mov	r0, r8
 800c08e:	4649      	mov	r1, r9
 800c090:	f7f4 fd74 	bl	8000b7c <__aeabi_dcmpun>
 800c094:	b110      	cbz	r0, 800c09c <_printf_float+0xd8>
 800c096:	4a8c      	ldr	r2, [pc, #560]	; (800c2c8 <_printf_float+0x304>)
 800c098:	4b8c      	ldr	r3, [pc, #560]	; (800c2cc <_printf_float+0x308>)
 800c09a:	e7da      	b.n	800c052 <_printf_float+0x8e>
 800c09c:	6861      	ldr	r1, [r4, #4]
 800c09e:	1c4b      	adds	r3, r1, #1
 800c0a0:	f44b 6280 	orr.w	r2, fp, #1024	; 0x400
 800c0a4:	a80a      	add	r0, sp, #40	; 0x28
 800c0a6:	d13e      	bne.n	800c126 <_printf_float+0x162>
 800c0a8:	2306      	movs	r3, #6
 800c0aa:	6063      	str	r3, [r4, #4]
 800c0ac:	2300      	movs	r3, #0
 800c0ae:	e9cd 0302 	strd	r0, r3, [sp, #8]
 800c0b2:	ab09      	add	r3, sp, #36	; 0x24
 800c0b4:	9300      	str	r3, [sp, #0]
 800c0b6:	ec49 8b10 	vmov	d0, r8, r9
 800c0ba:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 800c0be:	6022      	str	r2, [r4, #0]
 800c0c0:	f8cd a004 	str.w	sl, [sp, #4]
 800c0c4:	6861      	ldr	r1, [r4, #4]
 800c0c6:	4628      	mov	r0, r5
 800c0c8:	f7ff fee8 	bl	800be9c <__cvt>
 800c0cc:	f00a 03df 	and.w	r3, sl, #223	; 0xdf
 800c0d0:	2b47      	cmp	r3, #71	; 0x47
 800c0d2:	4680      	mov	r8, r0
 800c0d4:	d109      	bne.n	800c0ea <_printf_float+0x126>
 800c0d6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c0d8:	1cd8      	adds	r0, r3, #3
 800c0da:	db02      	blt.n	800c0e2 <_printf_float+0x11e>
 800c0dc:	6862      	ldr	r2, [r4, #4]
 800c0de:	4293      	cmp	r3, r2
 800c0e0:	dd47      	ble.n	800c172 <_printf_float+0x1ae>
 800c0e2:	f1aa 0a02 	sub.w	sl, sl, #2
 800c0e6:	fa5f fa8a 	uxtb.w	sl, sl
 800c0ea:	f1ba 0f65 	cmp.w	sl, #101	; 0x65
 800c0ee:	9909      	ldr	r1, [sp, #36]	; 0x24
 800c0f0:	d824      	bhi.n	800c13c <_printf_float+0x178>
 800c0f2:	3901      	subs	r1, #1
 800c0f4:	4652      	mov	r2, sl
 800c0f6:	f104 0050 	add.w	r0, r4, #80	; 0x50
 800c0fa:	9109      	str	r1, [sp, #36]	; 0x24
 800c0fc:	f7ff ff2f 	bl	800bf5e <__exponent>
 800c100:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800c102:	1813      	adds	r3, r2, r0
 800c104:	2a01      	cmp	r2, #1
 800c106:	4681      	mov	r9, r0
 800c108:	6123      	str	r3, [r4, #16]
 800c10a:	dc02      	bgt.n	800c112 <_printf_float+0x14e>
 800c10c:	6822      	ldr	r2, [r4, #0]
 800c10e:	07d1      	lsls	r1, r2, #31
 800c110:	d501      	bpl.n	800c116 <_printf_float+0x152>
 800c112:	3301      	adds	r3, #1
 800c114:	6123      	str	r3, [r4, #16]
 800c116:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 800c11a:	2b00      	cmp	r3, #0
 800c11c:	d0a5      	beq.n	800c06a <_printf_float+0xa6>
 800c11e:	232d      	movs	r3, #45	; 0x2d
 800c120:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800c124:	e7a1      	b.n	800c06a <_printf_float+0xa6>
 800c126:	f1ba 0f67 	cmp.w	sl, #103	; 0x67
 800c12a:	f000 8177 	beq.w	800c41c <_printf_float+0x458>
 800c12e:	f1ba 0f47 	cmp.w	sl, #71	; 0x47
 800c132:	d1bb      	bne.n	800c0ac <_printf_float+0xe8>
 800c134:	2900      	cmp	r1, #0
 800c136:	d1b9      	bne.n	800c0ac <_printf_float+0xe8>
 800c138:	2301      	movs	r3, #1
 800c13a:	e7b6      	b.n	800c0aa <_printf_float+0xe6>
 800c13c:	f1ba 0f66 	cmp.w	sl, #102	; 0x66
 800c140:	d119      	bne.n	800c176 <_printf_float+0x1b2>
 800c142:	2900      	cmp	r1, #0
 800c144:	6863      	ldr	r3, [r4, #4]
 800c146:	dd0c      	ble.n	800c162 <_printf_float+0x19e>
 800c148:	6121      	str	r1, [r4, #16]
 800c14a:	b913      	cbnz	r3, 800c152 <_printf_float+0x18e>
 800c14c:	6822      	ldr	r2, [r4, #0]
 800c14e:	07d2      	lsls	r2, r2, #31
 800c150:	d502      	bpl.n	800c158 <_printf_float+0x194>
 800c152:	3301      	adds	r3, #1
 800c154:	440b      	add	r3, r1
 800c156:	6123      	str	r3, [r4, #16]
 800c158:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c15a:	65a3      	str	r3, [r4, #88]	; 0x58
 800c15c:	f04f 0900 	mov.w	r9, #0
 800c160:	e7d9      	b.n	800c116 <_printf_float+0x152>
 800c162:	b913      	cbnz	r3, 800c16a <_printf_float+0x1a6>
 800c164:	6822      	ldr	r2, [r4, #0]
 800c166:	07d0      	lsls	r0, r2, #31
 800c168:	d501      	bpl.n	800c16e <_printf_float+0x1aa>
 800c16a:	3302      	adds	r3, #2
 800c16c:	e7f3      	b.n	800c156 <_printf_float+0x192>
 800c16e:	2301      	movs	r3, #1
 800c170:	e7f1      	b.n	800c156 <_printf_float+0x192>
 800c172:	f04f 0a67 	mov.w	sl, #103	; 0x67
 800c176:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 800c17a:	4293      	cmp	r3, r2
 800c17c:	db05      	blt.n	800c18a <_printf_float+0x1c6>
 800c17e:	6822      	ldr	r2, [r4, #0]
 800c180:	6123      	str	r3, [r4, #16]
 800c182:	07d1      	lsls	r1, r2, #31
 800c184:	d5e8      	bpl.n	800c158 <_printf_float+0x194>
 800c186:	3301      	adds	r3, #1
 800c188:	e7e5      	b.n	800c156 <_printf_float+0x192>
 800c18a:	2b00      	cmp	r3, #0
 800c18c:	bfd4      	ite	le
 800c18e:	f1c3 0302 	rsble	r3, r3, #2
 800c192:	2301      	movgt	r3, #1
 800c194:	4413      	add	r3, r2
 800c196:	e7de      	b.n	800c156 <_printf_float+0x192>
 800c198:	6823      	ldr	r3, [r4, #0]
 800c19a:	055a      	lsls	r2, r3, #21
 800c19c:	d407      	bmi.n	800c1ae <_printf_float+0x1ea>
 800c19e:	6923      	ldr	r3, [r4, #16]
 800c1a0:	4642      	mov	r2, r8
 800c1a2:	4631      	mov	r1, r6
 800c1a4:	4628      	mov	r0, r5
 800c1a6:	47b8      	blx	r7
 800c1a8:	3001      	adds	r0, #1
 800c1aa:	d12b      	bne.n	800c204 <_printf_float+0x240>
 800c1ac:	e767      	b.n	800c07e <_printf_float+0xba>
 800c1ae:	f1ba 0f65 	cmp.w	sl, #101	; 0x65
 800c1b2:	f240 80dc 	bls.w	800c36e <_printf_float+0x3aa>
 800c1b6:	2200      	movs	r2, #0
 800c1b8:	2300      	movs	r3, #0
 800c1ba:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800c1be:	f7f4 fcab 	bl	8000b18 <__aeabi_dcmpeq>
 800c1c2:	2800      	cmp	r0, #0
 800c1c4:	d033      	beq.n	800c22e <_printf_float+0x26a>
 800c1c6:	2301      	movs	r3, #1
 800c1c8:	4a41      	ldr	r2, [pc, #260]	; (800c2d0 <_printf_float+0x30c>)
 800c1ca:	4631      	mov	r1, r6
 800c1cc:	4628      	mov	r0, r5
 800c1ce:	47b8      	blx	r7
 800c1d0:	3001      	adds	r0, #1
 800c1d2:	f43f af54 	beq.w	800c07e <_printf_float+0xba>
 800c1d6:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800c1da:	429a      	cmp	r2, r3
 800c1dc:	db02      	blt.n	800c1e4 <_printf_float+0x220>
 800c1de:	6823      	ldr	r3, [r4, #0]
 800c1e0:	07d8      	lsls	r0, r3, #31
 800c1e2:	d50f      	bpl.n	800c204 <_printf_float+0x240>
 800c1e4:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800c1e8:	4631      	mov	r1, r6
 800c1ea:	4628      	mov	r0, r5
 800c1ec:	47b8      	blx	r7
 800c1ee:	3001      	adds	r0, #1
 800c1f0:	f43f af45 	beq.w	800c07e <_printf_float+0xba>
 800c1f4:	f04f 0800 	mov.w	r8, #0
 800c1f8:	f104 091a 	add.w	r9, r4, #26
 800c1fc:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800c1fe:	3b01      	subs	r3, #1
 800c200:	4543      	cmp	r3, r8
 800c202:	dc09      	bgt.n	800c218 <_printf_float+0x254>
 800c204:	6823      	ldr	r3, [r4, #0]
 800c206:	079b      	lsls	r3, r3, #30
 800c208:	f100 8103 	bmi.w	800c412 <_printf_float+0x44e>
 800c20c:	68e0      	ldr	r0, [r4, #12]
 800c20e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800c210:	4298      	cmp	r0, r3
 800c212:	bfb8      	it	lt
 800c214:	4618      	movlt	r0, r3
 800c216:	e734      	b.n	800c082 <_printf_float+0xbe>
 800c218:	2301      	movs	r3, #1
 800c21a:	464a      	mov	r2, r9
 800c21c:	4631      	mov	r1, r6
 800c21e:	4628      	mov	r0, r5
 800c220:	47b8      	blx	r7
 800c222:	3001      	adds	r0, #1
 800c224:	f43f af2b 	beq.w	800c07e <_printf_float+0xba>
 800c228:	f108 0801 	add.w	r8, r8, #1
 800c22c:	e7e6      	b.n	800c1fc <_printf_float+0x238>
 800c22e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c230:	2b00      	cmp	r3, #0
 800c232:	dc2b      	bgt.n	800c28c <_printf_float+0x2c8>
 800c234:	2301      	movs	r3, #1
 800c236:	4a26      	ldr	r2, [pc, #152]	; (800c2d0 <_printf_float+0x30c>)
 800c238:	4631      	mov	r1, r6
 800c23a:	4628      	mov	r0, r5
 800c23c:	47b8      	blx	r7
 800c23e:	3001      	adds	r0, #1
 800c240:	f43f af1d 	beq.w	800c07e <_printf_float+0xba>
 800c244:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c246:	b923      	cbnz	r3, 800c252 <_printf_float+0x28e>
 800c248:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800c24a:	b913      	cbnz	r3, 800c252 <_printf_float+0x28e>
 800c24c:	6823      	ldr	r3, [r4, #0]
 800c24e:	07d9      	lsls	r1, r3, #31
 800c250:	d5d8      	bpl.n	800c204 <_printf_float+0x240>
 800c252:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800c256:	4631      	mov	r1, r6
 800c258:	4628      	mov	r0, r5
 800c25a:	47b8      	blx	r7
 800c25c:	3001      	adds	r0, #1
 800c25e:	f43f af0e 	beq.w	800c07e <_printf_float+0xba>
 800c262:	f04f 0900 	mov.w	r9, #0
 800c266:	f104 0a1a 	add.w	sl, r4, #26
 800c26a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c26c:	425b      	negs	r3, r3
 800c26e:	454b      	cmp	r3, r9
 800c270:	dc01      	bgt.n	800c276 <_printf_float+0x2b2>
 800c272:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800c274:	e794      	b.n	800c1a0 <_printf_float+0x1dc>
 800c276:	2301      	movs	r3, #1
 800c278:	4652      	mov	r2, sl
 800c27a:	4631      	mov	r1, r6
 800c27c:	4628      	mov	r0, r5
 800c27e:	47b8      	blx	r7
 800c280:	3001      	adds	r0, #1
 800c282:	f43f aefc 	beq.w	800c07e <_printf_float+0xba>
 800c286:	f109 0901 	add.w	r9, r9, #1
 800c28a:	e7ee      	b.n	800c26a <_printf_float+0x2a6>
 800c28c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800c28e:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800c290:	429a      	cmp	r2, r3
 800c292:	bfa8      	it	ge
 800c294:	461a      	movge	r2, r3
 800c296:	2a00      	cmp	r2, #0
 800c298:	4691      	mov	r9, r2
 800c29a:	dd07      	ble.n	800c2ac <_printf_float+0x2e8>
 800c29c:	4613      	mov	r3, r2
 800c29e:	4631      	mov	r1, r6
 800c2a0:	4642      	mov	r2, r8
 800c2a2:	4628      	mov	r0, r5
 800c2a4:	47b8      	blx	r7
 800c2a6:	3001      	adds	r0, #1
 800c2a8:	f43f aee9 	beq.w	800c07e <_printf_float+0xba>
 800c2ac:	f104 031a 	add.w	r3, r4, #26
 800c2b0:	f04f 0b00 	mov.w	fp, #0
 800c2b4:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800c2b8:	9306      	str	r3, [sp, #24]
 800c2ba:	e015      	b.n	800c2e8 <_printf_float+0x324>
 800c2bc:	7fefffff 	.word	0x7fefffff
 800c2c0:	0800ee34 	.word	0x0800ee34
 800c2c4:	0800ee30 	.word	0x0800ee30
 800c2c8:	0800ee3c 	.word	0x0800ee3c
 800c2cc:	0800ee38 	.word	0x0800ee38
 800c2d0:	0800ee40 	.word	0x0800ee40
 800c2d4:	2301      	movs	r3, #1
 800c2d6:	9a06      	ldr	r2, [sp, #24]
 800c2d8:	4631      	mov	r1, r6
 800c2da:	4628      	mov	r0, r5
 800c2dc:	47b8      	blx	r7
 800c2de:	3001      	adds	r0, #1
 800c2e0:	f43f aecd 	beq.w	800c07e <_printf_float+0xba>
 800c2e4:	f10b 0b01 	add.w	fp, fp, #1
 800c2e8:	f8d4 a058 	ldr.w	sl, [r4, #88]	; 0x58
 800c2ec:	ebaa 0309 	sub.w	r3, sl, r9
 800c2f0:	455b      	cmp	r3, fp
 800c2f2:	dcef      	bgt.n	800c2d4 <_printf_float+0x310>
 800c2f4:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800c2f8:	429a      	cmp	r2, r3
 800c2fa:	44d0      	add	r8, sl
 800c2fc:	db15      	blt.n	800c32a <_printf_float+0x366>
 800c2fe:	6823      	ldr	r3, [r4, #0]
 800c300:	07da      	lsls	r2, r3, #31
 800c302:	d412      	bmi.n	800c32a <_printf_float+0x366>
 800c304:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800c306:	9909      	ldr	r1, [sp, #36]	; 0x24
 800c308:	eba3 020a 	sub.w	r2, r3, sl
 800c30c:	eba3 0a01 	sub.w	sl, r3, r1
 800c310:	4592      	cmp	sl, r2
 800c312:	bfa8      	it	ge
 800c314:	4692      	movge	sl, r2
 800c316:	f1ba 0f00 	cmp.w	sl, #0
 800c31a:	dc0e      	bgt.n	800c33a <_printf_float+0x376>
 800c31c:	f04f 0800 	mov.w	r8, #0
 800c320:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800c324:	f104 091a 	add.w	r9, r4, #26
 800c328:	e019      	b.n	800c35e <_printf_float+0x39a>
 800c32a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800c32e:	4631      	mov	r1, r6
 800c330:	4628      	mov	r0, r5
 800c332:	47b8      	blx	r7
 800c334:	3001      	adds	r0, #1
 800c336:	d1e5      	bne.n	800c304 <_printf_float+0x340>
 800c338:	e6a1      	b.n	800c07e <_printf_float+0xba>
 800c33a:	4653      	mov	r3, sl
 800c33c:	4642      	mov	r2, r8
 800c33e:	4631      	mov	r1, r6
 800c340:	4628      	mov	r0, r5
 800c342:	47b8      	blx	r7
 800c344:	3001      	adds	r0, #1
 800c346:	d1e9      	bne.n	800c31c <_printf_float+0x358>
 800c348:	e699      	b.n	800c07e <_printf_float+0xba>
 800c34a:	2301      	movs	r3, #1
 800c34c:	464a      	mov	r2, r9
 800c34e:	4631      	mov	r1, r6
 800c350:	4628      	mov	r0, r5
 800c352:	47b8      	blx	r7
 800c354:	3001      	adds	r0, #1
 800c356:	f43f ae92 	beq.w	800c07e <_printf_float+0xba>
 800c35a:	f108 0801 	add.w	r8, r8, #1
 800c35e:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800c362:	1a9b      	subs	r3, r3, r2
 800c364:	eba3 030a 	sub.w	r3, r3, sl
 800c368:	4543      	cmp	r3, r8
 800c36a:	dcee      	bgt.n	800c34a <_printf_float+0x386>
 800c36c:	e74a      	b.n	800c204 <_printf_float+0x240>
 800c36e:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800c370:	2a01      	cmp	r2, #1
 800c372:	dc01      	bgt.n	800c378 <_printf_float+0x3b4>
 800c374:	07db      	lsls	r3, r3, #31
 800c376:	d53a      	bpl.n	800c3ee <_printf_float+0x42a>
 800c378:	2301      	movs	r3, #1
 800c37a:	4642      	mov	r2, r8
 800c37c:	4631      	mov	r1, r6
 800c37e:	4628      	mov	r0, r5
 800c380:	47b8      	blx	r7
 800c382:	3001      	adds	r0, #1
 800c384:	f43f ae7b 	beq.w	800c07e <_printf_float+0xba>
 800c388:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800c38c:	4631      	mov	r1, r6
 800c38e:	4628      	mov	r0, r5
 800c390:	47b8      	blx	r7
 800c392:	3001      	adds	r0, #1
 800c394:	f108 0801 	add.w	r8, r8, #1
 800c398:	f43f ae71 	beq.w	800c07e <_printf_float+0xba>
 800c39c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800c39e:	2200      	movs	r2, #0
 800c3a0:	f103 3aff 	add.w	sl, r3, #4294967295	; 0xffffffff
 800c3a4:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800c3a8:	2300      	movs	r3, #0
 800c3aa:	f7f4 fbb5 	bl	8000b18 <__aeabi_dcmpeq>
 800c3ae:	b9c8      	cbnz	r0, 800c3e4 <_printf_float+0x420>
 800c3b0:	4653      	mov	r3, sl
 800c3b2:	4642      	mov	r2, r8
 800c3b4:	4631      	mov	r1, r6
 800c3b6:	4628      	mov	r0, r5
 800c3b8:	47b8      	blx	r7
 800c3ba:	3001      	adds	r0, #1
 800c3bc:	d10e      	bne.n	800c3dc <_printf_float+0x418>
 800c3be:	e65e      	b.n	800c07e <_printf_float+0xba>
 800c3c0:	2301      	movs	r3, #1
 800c3c2:	4652      	mov	r2, sl
 800c3c4:	4631      	mov	r1, r6
 800c3c6:	4628      	mov	r0, r5
 800c3c8:	47b8      	blx	r7
 800c3ca:	3001      	adds	r0, #1
 800c3cc:	f43f ae57 	beq.w	800c07e <_printf_float+0xba>
 800c3d0:	f108 0801 	add.w	r8, r8, #1
 800c3d4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800c3d6:	3b01      	subs	r3, #1
 800c3d8:	4543      	cmp	r3, r8
 800c3da:	dcf1      	bgt.n	800c3c0 <_printf_float+0x3fc>
 800c3dc:	464b      	mov	r3, r9
 800c3de:	f104 0250 	add.w	r2, r4, #80	; 0x50
 800c3e2:	e6de      	b.n	800c1a2 <_printf_float+0x1de>
 800c3e4:	f04f 0800 	mov.w	r8, #0
 800c3e8:	f104 0a1a 	add.w	sl, r4, #26
 800c3ec:	e7f2      	b.n	800c3d4 <_printf_float+0x410>
 800c3ee:	2301      	movs	r3, #1
 800c3f0:	e7df      	b.n	800c3b2 <_printf_float+0x3ee>
 800c3f2:	2301      	movs	r3, #1
 800c3f4:	464a      	mov	r2, r9
 800c3f6:	4631      	mov	r1, r6
 800c3f8:	4628      	mov	r0, r5
 800c3fa:	47b8      	blx	r7
 800c3fc:	3001      	adds	r0, #1
 800c3fe:	f43f ae3e 	beq.w	800c07e <_printf_float+0xba>
 800c402:	f108 0801 	add.w	r8, r8, #1
 800c406:	68e3      	ldr	r3, [r4, #12]
 800c408:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800c40a:	1a9b      	subs	r3, r3, r2
 800c40c:	4543      	cmp	r3, r8
 800c40e:	dcf0      	bgt.n	800c3f2 <_printf_float+0x42e>
 800c410:	e6fc      	b.n	800c20c <_printf_float+0x248>
 800c412:	f04f 0800 	mov.w	r8, #0
 800c416:	f104 0919 	add.w	r9, r4, #25
 800c41a:	e7f4      	b.n	800c406 <_printf_float+0x442>
 800c41c:	2900      	cmp	r1, #0
 800c41e:	f43f ae8b 	beq.w	800c138 <_printf_float+0x174>
 800c422:	2300      	movs	r3, #0
 800c424:	e9cd 0302 	strd	r0, r3, [sp, #8]
 800c428:	ab09      	add	r3, sp, #36	; 0x24
 800c42a:	9300      	str	r3, [sp, #0]
 800c42c:	ec49 8b10 	vmov	d0, r8, r9
 800c430:	6022      	str	r2, [r4, #0]
 800c432:	f8cd a004 	str.w	sl, [sp, #4]
 800c436:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 800c43a:	4628      	mov	r0, r5
 800c43c:	f7ff fd2e 	bl	800be9c <__cvt>
 800c440:	4680      	mov	r8, r0
 800c442:	e648      	b.n	800c0d6 <_printf_float+0x112>

0800c444 <_printf_common>:
 800c444:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800c448:	4691      	mov	r9, r2
 800c44a:	461f      	mov	r7, r3
 800c44c:	688a      	ldr	r2, [r1, #8]
 800c44e:	690b      	ldr	r3, [r1, #16]
 800c450:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800c454:	4293      	cmp	r3, r2
 800c456:	bfb8      	it	lt
 800c458:	4613      	movlt	r3, r2
 800c45a:	f8c9 3000 	str.w	r3, [r9]
 800c45e:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800c462:	4606      	mov	r6, r0
 800c464:	460c      	mov	r4, r1
 800c466:	b112      	cbz	r2, 800c46e <_printf_common+0x2a>
 800c468:	3301      	adds	r3, #1
 800c46a:	f8c9 3000 	str.w	r3, [r9]
 800c46e:	6823      	ldr	r3, [r4, #0]
 800c470:	0699      	lsls	r1, r3, #26
 800c472:	bf42      	ittt	mi
 800c474:	f8d9 3000 	ldrmi.w	r3, [r9]
 800c478:	3302      	addmi	r3, #2
 800c47a:	f8c9 3000 	strmi.w	r3, [r9]
 800c47e:	6825      	ldr	r5, [r4, #0]
 800c480:	f015 0506 	ands.w	r5, r5, #6
 800c484:	d107      	bne.n	800c496 <_printf_common+0x52>
 800c486:	f104 0a19 	add.w	sl, r4, #25
 800c48a:	68e3      	ldr	r3, [r4, #12]
 800c48c:	f8d9 2000 	ldr.w	r2, [r9]
 800c490:	1a9b      	subs	r3, r3, r2
 800c492:	42ab      	cmp	r3, r5
 800c494:	dc28      	bgt.n	800c4e8 <_printf_common+0xa4>
 800c496:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 800c49a:	6822      	ldr	r2, [r4, #0]
 800c49c:	3300      	adds	r3, #0
 800c49e:	bf18      	it	ne
 800c4a0:	2301      	movne	r3, #1
 800c4a2:	0692      	lsls	r2, r2, #26
 800c4a4:	d42d      	bmi.n	800c502 <_printf_common+0xbe>
 800c4a6:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800c4aa:	4639      	mov	r1, r7
 800c4ac:	4630      	mov	r0, r6
 800c4ae:	47c0      	blx	r8
 800c4b0:	3001      	adds	r0, #1
 800c4b2:	d020      	beq.n	800c4f6 <_printf_common+0xb2>
 800c4b4:	6823      	ldr	r3, [r4, #0]
 800c4b6:	68e5      	ldr	r5, [r4, #12]
 800c4b8:	f8d9 2000 	ldr.w	r2, [r9]
 800c4bc:	f003 0306 	and.w	r3, r3, #6
 800c4c0:	2b04      	cmp	r3, #4
 800c4c2:	bf08      	it	eq
 800c4c4:	1aad      	subeq	r5, r5, r2
 800c4c6:	68a3      	ldr	r3, [r4, #8]
 800c4c8:	6922      	ldr	r2, [r4, #16]
 800c4ca:	bf0c      	ite	eq
 800c4cc:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800c4d0:	2500      	movne	r5, #0
 800c4d2:	4293      	cmp	r3, r2
 800c4d4:	bfc4      	itt	gt
 800c4d6:	1a9b      	subgt	r3, r3, r2
 800c4d8:	18ed      	addgt	r5, r5, r3
 800c4da:	f04f 0900 	mov.w	r9, #0
 800c4de:	341a      	adds	r4, #26
 800c4e0:	454d      	cmp	r5, r9
 800c4e2:	d11a      	bne.n	800c51a <_printf_common+0xd6>
 800c4e4:	2000      	movs	r0, #0
 800c4e6:	e008      	b.n	800c4fa <_printf_common+0xb6>
 800c4e8:	2301      	movs	r3, #1
 800c4ea:	4652      	mov	r2, sl
 800c4ec:	4639      	mov	r1, r7
 800c4ee:	4630      	mov	r0, r6
 800c4f0:	47c0      	blx	r8
 800c4f2:	3001      	adds	r0, #1
 800c4f4:	d103      	bne.n	800c4fe <_printf_common+0xba>
 800c4f6:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800c4fa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c4fe:	3501      	adds	r5, #1
 800c500:	e7c3      	b.n	800c48a <_printf_common+0x46>
 800c502:	18e1      	adds	r1, r4, r3
 800c504:	1c5a      	adds	r2, r3, #1
 800c506:	2030      	movs	r0, #48	; 0x30
 800c508:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800c50c:	4422      	add	r2, r4
 800c50e:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800c512:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800c516:	3302      	adds	r3, #2
 800c518:	e7c5      	b.n	800c4a6 <_printf_common+0x62>
 800c51a:	2301      	movs	r3, #1
 800c51c:	4622      	mov	r2, r4
 800c51e:	4639      	mov	r1, r7
 800c520:	4630      	mov	r0, r6
 800c522:	47c0      	blx	r8
 800c524:	3001      	adds	r0, #1
 800c526:	d0e6      	beq.n	800c4f6 <_printf_common+0xb2>
 800c528:	f109 0901 	add.w	r9, r9, #1
 800c52c:	e7d8      	b.n	800c4e0 <_printf_common+0x9c>
	...

0800c530 <_printf_i>:
 800c530:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800c534:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 800c538:	460c      	mov	r4, r1
 800c53a:	7e09      	ldrb	r1, [r1, #24]
 800c53c:	b085      	sub	sp, #20
 800c53e:	296e      	cmp	r1, #110	; 0x6e
 800c540:	4617      	mov	r7, r2
 800c542:	4606      	mov	r6, r0
 800c544:	4698      	mov	r8, r3
 800c546:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800c548:	f000 80b3 	beq.w	800c6b2 <_printf_i+0x182>
 800c54c:	d822      	bhi.n	800c594 <_printf_i+0x64>
 800c54e:	2963      	cmp	r1, #99	; 0x63
 800c550:	d036      	beq.n	800c5c0 <_printf_i+0x90>
 800c552:	d80a      	bhi.n	800c56a <_printf_i+0x3a>
 800c554:	2900      	cmp	r1, #0
 800c556:	f000 80b9 	beq.w	800c6cc <_printf_i+0x19c>
 800c55a:	2958      	cmp	r1, #88	; 0x58
 800c55c:	f000 8083 	beq.w	800c666 <_printf_i+0x136>
 800c560:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800c564:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 800c568:	e032      	b.n	800c5d0 <_printf_i+0xa0>
 800c56a:	2964      	cmp	r1, #100	; 0x64
 800c56c:	d001      	beq.n	800c572 <_printf_i+0x42>
 800c56e:	2969      	cmp	r1, #105	; 0x69
 800c570:	d1f6      	bne.n	800c560 <_printf_i+0x30>
 800c572:	6820      	ldr	r0, [r4, #0]
 800c574:	6813      	ldr	r3, [r2, #0]
 800c576:	0605      	lsls	r5, r0, #24
 800c578:	f103 0104 	add.w	r1, r3, #4
 800c57c:	d52a      	bpl.n	800c5d4 <_printf_i+0xa4>
 800c57e:	681b      	ldr	r3, [r3, #0]
 800c580:	6011      	str	r1, [r2, #0]
 800c582:	2b00      	cmp	r3, #0
 800c584:	da03      	bge.n	800c58e <_printf_i+0x5e>
 800c586:	222d      	movs	r2, #45	; 0x2d
 800c588:	425b      	negs	r3, r3
 800c58a:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 800c58e:	486f      	ldr	r0, [pc, #444]	; (800c74c <_printf_i+0x21c>)
 800c590:	220a      	movs	r2, #10
 800c592:	e039      	b.n	800c608 <_printf_i+0xd8>
 800c594:	2973      	cmp	r1, #115	; 0x73
 800c596:	f000 809d 	beq.w	800c6d4 <_printf_i+0x1a4>
 800c59a:	d808      	bhi.n	800c5ae <_printf_i+0x7e>
 800c59c:	296f      	cmp	r1, #111	; 0x6f
 800c59e:	d020      	beq.n	800c5e2 <_printf_i+0xb2>
 800c5a0:	2970      	cmp	r1, #112	; 0x70
 800c5a2:	d1dd      	bne.n	800c560 <_printf_i+0x30>
 800c5a4:	6823      	ldr	r3, [r4, #0]
 800c5a6:	f043 0320 	orr.w	r3, r3, #32
 800c5aa:	6023      	str	r3, [r4, #0]
 800c5ac:	e003      	b.n	800c5b6 <_printf_i+0x86>
 800c5ae:	2975      	cmp	r1, #117	; 0x75
 800c5b0:	d017      	beq.n	800c5e2 <_printf_i+0xb2>
 800c5b2:	2978      	cmp	r1, #120	; 0x78
 800c5b4:	d1d4      	bne.n	800c560 <_printf_i+0x30>
 800c5b6:	2378      	movs	r3, #120	; 0x78
 800c5b8:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800c5bc:	4864      	ldr	r0, [pc, #400]	; (800c750 <_printf_i+0x220>)
 800c5be:	e055      	b.n	800c66c <_printf_i+0x13c>
 800c5c0:	6813      	ldr	r3, [r2, #0]
 800c5c2:	1d19      	adds	r1, r3, #4
 800c5c4:	681b      	ldr	r3, [r3, #0]
 800c5c6:	6011      	str	r1, [r2, #0]
 800c5c8:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800c5cc:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800c5d0:	2301      	movs	r3, #1
 800c5d2:	e08c      	b.n	800c6ee <_printf_i+0x1be>
 800c5d4:	681b      	ldr	r3, [r3, #0]
 800c5d6:	6011      	str	r1, [r2, #0]
 800c5d8:	f010 0f40 	tst.w	r0, #64	; 0x40
 800c5dc:	bf18      	it	ne
 800c5de:	b21b      	sxthne	r3, r3
 800c5e0:	e7cf      	b.n	800c582 <_printf_i+0x52>
 800c5e2:	6813      	ldr	r3, [r2, #0]
 800c5e4:	6825      	ldr	r5, [r4, #0]
 800c5e6:	1d18      	adds	r0, r3, #4
 800c5e8:	6010      	str	r0, [r2, #0]
 800c5ea:	0628      	lsls	r0, r5, #24
 800c5ec:	d501      	bpl.n	800c5f2 <_printf_i+0xc2>
 800c5ee:	681b      	ldr	r3, [r3, #0]
 800c5f0:	e002      	b.n	800c5f8 <_printf_i+0xc8>
 800c5f2:	0668      	lsls	r0, r5, #25
 800c5f4:	d5fb      	bpl.n	800c5ee <_printf_i+0xbe>
 800c5f6:	881b      	ldrh	r3, [r3, #0]
 800c5f8:	4854      	ldr	r0, [pc, #336]	; (800c74c <_printf_i+0x21c>)
 800c5fa:	296f      	cmp	r1, #111	; 0x6f
 800c5fc:	bf14      	ite	ne
 800c5fe:	220a      	movne	r2, #10
 800c600:	2208      	moveq	r2, #8
 800c602:	2100      	movs	r1, #0
 800c604:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800c608:	6865      	ldr	r5, [r4, #4]
 800c60a:	60a5      	str	r5, [r4, #8]
 800c60c:	2d00      	cmp	r5, #0
 800c60e:	f2c0 8095 	blt.w	800c73c <_printf_i+0x20c>
 800c612:	6821      	ldr	r1, [r4, #0]
 800c614:	f021 0104 	bic.w	r1, r1, #4
 800c618:	6021      	str	r1, [r4, #0]
 800c61a:	2b00      	cmp	r3, #0
 800c61c:	d13d      	bne.n	800c69a <_printf_i+0x16a>
 800c61e:	2d00      	cmp	r5, #0
 800c620:	f040 808e 	bne.w	800c740 <_printf_i+0x210>
 800c624:	4665      	mov	r5, ip
 800c626:	2a08      	cmp	r2, #8
 800c628:	d10b      	bne.n	800c642 <_printf_i+0x112>
 800c62a:	6823      	ldr	r3, [r4, #0]
 800c62c:	07db      	lsls	r3, r3, #31
 800c62e:	d508      	bpl.n	800c642 <_printf_i+0x112>
 800c630:	6923      	ldr	r3, [r4, #16]
 800c632:	6862      	ldr	r2, [r4, #4]
 800c634:	429a      	cmp	r2, r3
 800c636:	bfde      	ittt	le
 800c638:	2330      	movle	r3, #48	; 0x30
 800c63a:	f805 3c01 	strble.w	r3, [r5, #-1]
 800c63e:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 800c642:	ebac 0305 	sub.w	r3, ip, r5
 800c646:	6123      	str	r3, [r4, #16]
 800c648:	f8cd 8000 	str.w	r8, [sp]
 800c64c:	463b      	mov	r3, r7
 800c64e:	aa03      	add	r2, sp, #12
 800c650:	4621      	mov	r1, r4
 800c652:	4630      	mov	r0, r6
 800c654:	f7ff fef6 	bl	800c444 <_printf_common>
 800c658:	3001      	adds	r0, #1
 800c65a:	d14d      	bne.n	800c6f8 <_printf_i+0x1c8>
 800c65c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800c660:	b005      	add	sp, #20
 800c662:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800c666:	4839      	ldr	r0, [pc, #228]	; (800c74c <_printf_i+0x21c>)
 800c668:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 800c66c:	6813      	ldr	r3, [r2, #0]
 800c66e:	6821      	ldr	r1, [r4, #0]
 800c670:	1d1d      	adds	r5, r3, #4
 800c672:	681b      	ldr	r3, [r3, #0]
 800c674:	6015      	str	r5, [r2, #0]
 800c676:	060a      	lsls	r2, r1, #24
 800c678:	d50b      	bpl.n	800c692 <_printf_i+0x162>
 800c67a:	07ca      	lsls	r2, r1, #31
 800c67c:	bf44      	itt	mi
 800c67e:	f041 0120 	orrmi.w	r1, r1, #32
 800c682:	6021      	strmi	r1, [r4, #0]
 800c684:	b91b      	cbnz	r3, 800c68e <_printf_i+0x15e>
 800c686:	6822      	ldr	r2, [r4, #0]
 800c688:	f022 0220 	bic.w	r2, r2, #32
 800c68c:	6022      	str	r2, [r4, #0]
 800c68e:	2210      	movs	r2, #16
 800c690:	e7b7      	b.n	800c602 <_printf_i+0xd2>
 800c692:	064d      	lsls	r5, r1, #25
 800c694:	bf48      	it	mi
 800c696:	b29b      	uxthmi	r3, r3
 800c698:	e7ef      	b.n	800c67a <_printf_i+0x14a>
 800c69a:	4665      	mov	r5, ip
 800c69c:	fbb3 f1f2 	udiv	r1, r3, r2
 800c6a0:	fb02 3311 	mls	r3, r2, r1, r3
 800c6a4:	5cc3      	ldrb	r3, [r0, r3]
 800c6a6:	f805 3d01 	strb.w	r3, [r5, #-1]!
 800c6aa:	460b      	mov	r3, r1
 800c6ac:	2900      	cmp	r1, #0
 800c6ae:	d1f5      	bne.n	800c69c <_printf_i+0x16c>
 800c6b0:	e7b9      	b.n	800c626 <_printf_i+0xf6>
 800c6b2:	6813      	ldr	r3, [r2, #0]
 800c6b4:	6825      	ldr	r5, [r4, #0]
 800c6b6:	6961      	ldr	r1, [r4, #20]
 800c6b8:	1d18      	adds	r0, r3, #4
 800c6ba:	6010      	str	r0, [r2, #0]
 800c6bc:	0628      	lsls	r0, r5, #24
 800c6be:	681b      	ldr	r3, [r3, #0]
 800c6c0:	d501      	bpl.n	800c6c6 <_printf_i+0x196>
 800c6c2:	6019      	str	r1, [r3, #0]
 800c6c4:	e002      	b.n	800c6cc <_printf_i+0x19c>
 800c6c6:	066a      	lsls	r2, r5, #25
 800c6c8:	d5fb      	bpl.n	800c6c2 <_printf_i+0x192>
 800c6ca:	8019      	strh	r1, [r3, #0]
 800c6cc:	2300      	movs	r3, #0
 800c6ce:	6123      	str	r3, [r4, #16]
 800c6d0:	4665      	mov	r5, ip
 800c6d2:	e7b9      	b.n	800c648 <_printf_i+0x118>
 800c6d4:	6813      	ldr	r3, [r2, #0]
 800c6d6:	1d19      	adds	r1, r3, #4
 800c6d8:	6011      	str	r1, [r2, #0]
 800c6da:	681d      	ldr	r5, [r3, #0]
 800c6dc:	6862      	ldr	r2, [r4, #4]
 800c6de:	2100      	movs	r1, #0
 800c6e0:	4628      	mov	r0, r5
 800c6e2:	f7f3 fda5 	bl	8000230 <memchr>
 800c6e6:	b108      	cbz	r0, 800c6ec <_printf_i+0x1bc>
 800c6e8:	1b40      	subs	r0, r0, r5
 800c6ea:	6060      	str	r0, [r4, #4]
 800c6ec:	6863      	ldr	r3, [r4, #4]
 800c6ee:	6123      	str	r3, [r4, #16]
 800c6f0:	2300      	movs	r3, #0
 800c6f2:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800c6f6:	e7a7      	b.n	800c648 <_printf_i+0x118>
 800c6f8:	6923      	ldr	r3, [r4, #16]
 800c6fa:	462a      	mov	r2, r5
 800c6fc:	4639      	mov	r1, r7
 800c6fe:	4630      	mov	r0, r6
 800c700:	47c0      	blx	r8
 800c702:	3001      	adds	r0, #1
 800c704:	d0aa      	beq.n	800c65c <_printf_i+0x12c>
 800c706:	6823      	ldr	r3, [r4, #0]
 800c708:	079b      	lsls	r3, r3, #30
 800c70a:	d413      	bmi.n	800c734 <_printf_i+0x204>
 800c70c:	68e0      	ldr	r0, [r4, #12]
 800c70e:	9b03      	ldr	r3, [sp, #12]
 800c710:	4298      	cmp	r0, r3
 800c712:	bfb8      	it	lt
 800c714:	4618      	movlt	r0, r3
 800c716:	e7a3      	b.n	800c660 <_printf_i+0x130>
 800c718:	2301      	movs	r3, #1
 800c71a:	464a      	mov	r2, r9
 800c71c:	4639      	mov	r1, r7
 800c71e:	4630      	mov	r0, r6
 800c720:	47c0      	blx	r8
 800c722:	3001      	adds	r0, #1
 800c724:	d09a      	beq.n	800c65c <_printf_i+0x12c>
 800c726:	3501      	adds	r5, #1
 800c728:	68e3      	ldr	r3, [r4, #12]
 800c72a:	9a03      	ldr	r2, [sp, #12]
 800c72c:	1a9b      	subs	r3, r3, r2
 800c72e:	42ab      	cmp	r3, r5
 800c730:	dcf2      	bgt.n	800c718 <_printf_i+0x1e8>
 800c732:	e7eb      	b.n	800c70c <_printf_i+0x1dc>
 800c734:	2500      	movs	r5, #0
 800c736:	f104 0919 	add.w	r9, r4, #25
 800c73a:	e7f5      	b.n	800c728 <_printf_i+0x1f8>
 800c73c:	2b00      	cmp	r3, #0
 800c73e:	d1ac      	bne.n	800c69a <_printf_i+0x16a>
 800c740:	7803      	ldrb	r3, [r0, #0]
 800c742:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800c746:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800c74a:	e76c      	b.n	800c626 <_printf_i+0xf6>
 800c74c:	0800ee42 	.word	0x0800ee42
 800c750:	0800ee53 	.word	0x0800ee53

0800c754 <_puts_r>:
 800c754:	b570      	push	{r4, r5, r6, lr}
 800c756:	460e      	mov	r6, r1
 800c758:	4605      	mov	r5, r0
 800c75a:	b118      	cbz	r0, 800c764 <_puts_r+0x10>
 800c75c:	6983      	ldr	r3, [r0, #24]
 800c75e:	b90b      	cbnz	r3, 800c764 <_puts_r+0x10>
 800c760:	f001 f896 	bl	800d890 <__sinit>
 800c764:	69ab      	ldr	r3, [r5, #24]
 800c766:	68ac      	ldr	r4, [r5, #8]
 800c768:	b913      	cbnz	r3, 800c770 <_puts_r+0x1c>
 800c76a:	4628      	mov	r0, r5
 800c76c:	f001 f890 	bl	800d890 <__sinit>
 800c770:	4b23      	ldr	r3, [pc, #140]	; (800c800 <_puts_r+0xac>)
 800c772:	429c      	cmp	r4, r3
 800c774:	d117      	bne.n	800c7a6 <_puts_r+0x52>
 800c776:	686c      	ldr	r4, [r5, #4]
 800c778:	89a3      	ldrh	r3, [r4, #12]
 800c77a:	071b      	lsls	r3, r3, #28
 800c77c:	d51d      	bpl.n	800c7ba <_puts_r+0x66>
 800c77e:	6923      	ldr	r3, [r4, #16]
 800c780:	b1db      	cbz	r3, 800c7ba <_puts_r+0x66>
 800c782:	3e01      	subs	r6, #1
 800c784:	68a3      	ldr	r3, [r4, #8]
 800c786:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 800c78a:	3b01      	subs	r3, #1
 800c78c:	60a3      	str	r3, [r4, #8]
 800c78e:	b9e9      	cbnz	r1, 800c7cc <_puts_r+0x78>
 800c790:	2b00      	cmp	r3, #0
 800c792:	da2e      	bge.n	800c7f2 <_puts_r+0x9e>
 800c794:	4622      	mov	r2, r4
 800c796:	210a      	movs	r1, #10
 800c798:	4628      	mov	r0, r5
 800c79a:	f000 f883 	bl	800c8a4 <__swbuf_r>
 800c79e:	3001      	adds	r0, #1
 800c7a0:	d011      	beq.n	800c7c6 <_puts_r+0x72>
 800c7a2:	200a      	movs	r0, #10
 800c7a4:	e011      	b.n	800c7ca <_puts_r+0x76>
 800c7a6:	4b17      	ldr	r3, [pc, #92]	; (800c804 <_puts_r+0xb0>)
 800c7a8:	429c      	cmp	r4, r3
 800c7aa:	d101      	bne.n	800c7b0 <_puts_r+0x5c>
 800c7ac:	68ac      	ldr	r4, [r5, #8]
 800c7ae:	e7e3      	b.n	800c778 <_puts_r+0x24>
 800c7b0:	4b15      	ldr	r3, [pc, #84]	; (800c808 <_puts_r+0xb4>)
 800c7b2:	429c      	cmp	r4, r3
 800c7b4:	bf08      	it	eq
 800c7b6:	68ec      	ldreq	r4, [r5, #12]
 800c7b8:	e7de      	b.n	800c778 <_puts_r+0x24>
 800c7ba:	4621      	mov	r1, r4
 800c7bc:	4628      	mov	r0, r5
 800c7be:	f000 f8c3 	bl	800c948 <__swsetup_r>
 800c7c2:	2800      	cmp	r0, #0
 800c7c4:	d0dd      	beq.n	800c782 <_puts_r+0x2e>
 800c7c6:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800c7ca:	bd70      	pop	{r4, r5, r6, pc}
 800c7cc:	2b00      	cmp	r3, #0
 800c7ce:	da04      	bge.n	800c7da <_puts_r+0x86>
 800c7d0:	69a2      	ldr	r2, [r4, #24]
 800c7d2:	429a      	cmp	r2, r3
 800c7d4:	dc06      	bgt.n	800c7e4 <_puts_r+0x90>
 800c7d6:	290a      	cmp	r1, #10
 800c7d8:	d004      	beq.n	800c7e4 <_puts_r+0x90>
 800c7da:	6823      	ldr	r3, [r4, #0]
 800c7dc:	1c5a      	adds	r2, r3, #1
 800c7de:	6022      	str	r2, [r4, #0]
 800c7e0:	7019      	strb	r1, [r3, #0]
 800c7e2:	e7cf      	b.n	800c784 <_puts_r+0x30>
 800c7e4:	4622      	mov	r2, r4
 800c7e6:	4628      	mov	r0, r5
 800c7e8:	f000 f85c 	bl	800c8a4 <__swbuf_r>
 800c7ec:	3001      	adds	r0, #1
 800c7ee:	d1c9      	bne.n	800c784 <_puts_r+0x30>
 800c7f0:	e7e9      	b.n	800c7c6 <_puts_r+0x72>
 800c7f2:	6823      	ldr	r3, [r4, #0]
 800c7f4:	200a      	movs	r0, #10
 800c7f6:	1c5a      	adds	r2, r3, #1
 800c7f8:	6022      	str	r2, [r4, #0]
 800c7fa:	7018      	strb	r0, [r3, #0]
 800c7fc:	e7e5      	b.n	800c7ca <_puts_r+0x76>
 800c7fe:	bf00      	nop
 800c800:	0800ee94 	.word	0x0800ee94
 800c804:	0800eeb4 	.word	0x0800eeb4
 800c808:	0800ee74 	.word	0x0800ee74

0800c80c <puts>:
 800c80c:	4b02      	ldr	r3, [pc, #8]	; (800c818 <puts+0xc>)
 800c80e:	4601      	mov	r1, r0
 800c810:	6818      	ldr	r0, [r3, #0]
 800c812:	f7ff bf9f 	b.w	800c754 <_puts_r>
 800c816:	bf00      	nop
 800c818:	20001228 	.word	0x20001228

0800c81c <sniprintf>:
 800c81c:	b40c      	push	{r2, r3}
 800c81e:	b530      	push	{r4, r5, lr}
 800c820:	4b17      	ldr	r3, [pc, #92]	; (800c880 <sniprintf+0x64>)
 800c822:	1e0c      	subs	r4, r1, #0
 800c824:	b09d      	sub	sp, #116	; 0x74
 800c826:	681d      	ldr	r5, [r3, #0]
 800c828:	da08      	bge.n	800c83c <sniprintf+0x20>
 800c82a:	238b      	movs	r3, #139	; 0x8b
 800c82c:	602b      	str	r3, [r5, #0]
 800c82e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800c832:	b01d      	add	sp, #116	; 0x74
 800c834:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800c838:	b002      	add	sp, #8
 800c83a:	4770      	bx	lr
 800c83c:	f44f 7302 	mov.w	r3, #520	; 0x208
 800c840:	f8ad 3014 	strh.w	r3, [sp, #20]
 800c844:	bf14      	ite	ne
 800c846:	f104 33ff 	addne.w	r3, r4, #4294967295	; 0xffffffff
 800c84a:	4623      	moveq	r3, r4
 800c84c:	9304      	str	r3, [sp, #16]
 800c84e:	9307      	str	r3, [sp, #28]
 800c850:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800c854:	9002      	str	r0, [sp, #8]
 800c856:	9006      	str	r0, [sp, #24]
 800c858:	f8ad 3016 	strh.w	r3, [sp, #22]
 800c85c:	9a20      	ldr	r2, [sp, #128]	; 0x80
 800c85e:	ab21      	add	r3, sp, #132	; 0x84
 800c860:	a902      	add	r1, sp, #8
 800c862:	4628      	mov	r0, r5
 800c864:	9301      	str	r3, [sp, #4]
 800c866:	f001 fd0d 	bl	800e284 <_svfiprintf_r>
 800c86a:	1c43      	adds	r3, r0, #1
 800c86c:	bfbc      	itt	lt
 800c86e:	238b      	movlt	r3, #139	; 0x8b
 800c870:	602b      	strlt	r3, [r5, #0]
 800c872:	2c00      	cmp	r4, #0
 800c874:	d0dd      	beq.n	800c832 <sniprintf+0x16>
 800c876:	9b02      	ldr	r3, [sp, #8]
 800c878:	2200      	movs	r2, #0
 800c87a:	701a      	strb	r2, [r3, #0]
 800c87c:	e7d9      	b.n	800c832 <sniprintf+0x16>
 800c87e:	bf00      	nop
 800c880:	20001228 	.word	0x20001228

0800c884 <strcat>:
 800c884:	b510      	push	{r4, lr}
 800c886:	4603      	mov	r3, r0
 800c888:	781a      	ldrb	r2, [r3, #0]
 800c88a:	1c5c      	adds	r4, r3, #1
 800c88c:	b93a      	cbnz	r2, 800c89e <strcat+0x1a>
 800c88e:	3b01      	subs	r3, #1
 800c890:	f811 2b01 	ldrb.w	r2, [r1], #1
 800c894:	f803 2f01 	strb.w	r2, [r3, #1]!
 800c898:	2a00      	cmp	r2, #0
 800c89a:	d1f9      	bne.n	800c890 <strcat+0xc>
 800c89c:	bd10      	pop	{r4, pc}
 800c89e:	4623      	mov	r3, r4
 800c8a0:	e7f2      	b.n	800c888 <strcat+0x4>
	...

0800c8a4 <__swbuf_r>:
 800c8a4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c8a6:	460e      	mov	r6, r1
 800c8a8:	4614      	mov	r4, r2
 800c8aa:	4605      	mov	r5, r0
 800c8ac:	b118      	cbz	r0, 800c8b6 <__swbuf_r+0x12>
 800c8ae:	6983      	ldr	r3, [r0, #24]
 800c8b0:	b90b      	cbnz	r3, 800c8b6 <__swbuf_r+0x12>
 800c8b2:	f000 ffed 	bl	800d890 <__sinit>
 800c8b6:	4b21      	ldr	r3, [pc, #132]	; (800c93c <__swbuf_r+0x98>)
 800c8b8:	429c      	cmp	r4, r3
 800c8ba:	d12a      	bne.n	800c912 <__swbuf_r+0x6e>
 800c8bc:	686c      	ldr	r4, [r5, #4]
 800c8be:	69a3      	ldr	r3, [r4, #24]
 800c8c0:	60a3      	str	r3, [r4, #8]
 800c8c2:	89a3      	ldrh	r3, [r4, #12]
 800c8c4:	071a      	lsls	r2, r3, #28
 800c8c6:	d52e      	bpl.n	800c926 <__swbuf_r+0x82>
 800c8c8:	6923      	ldr	r3, [r4, #16]
 800c8ca:	b363      	cbz	r3, 800c926 <__swbuf_r+0x82>
 800c8cc:	6923      	ldr	r3, [r4, #16]
 800c8ce:	6820      	ldr	r0, [r4, #0]
 800c8d0:	1ac0      	subs	r0, r0, r3
 800c8d2:	6963      	ldr	r3, [r4, #20]
 800c8d4:	b2f6      	uxtb	r6, r6
 800c8d6:	4283      	cmp	r3, r0
 800c8d8:	4637      	mov	r7, r6
 800c8da:	dc04      	bgt.n	800c8e6 <__swbuf_r+0x42>
 800c8dc:	4621      	mov	r1, r4
 800c8de:	4628      	mov	r0, r5
 800c8e0:	f000 ff6c 	bl	800d7bc <_fflush_r>
 800c8e4:	bb28      	cbnz	r0, 800c932 <__swbuf_r+0x8e>
 800c8e6:	68a3      	ldr	r3, [r4, #8]
 800c8e8:	3b01      	subs	r3, #1
 800c8ea:	60a3      	str	r3, [r4, #8]
 800c8ec:	6823      	ldr	r3, [r4, #0]
 800c8ee:	1c5a      	adds	r2, r3, #1
 800c8f0:	6022      	str	r2, [r4, #0]
 800c8f2:	701e      	strb	r6, [r3, #0]
 800c8f4:	6963      	ldr	r3, [r4, #20]
 800c8f6:	3001      	adds	r0, #1
 800c8f8:	4283      	cmp	r3, r0
 800c8fa:	d004      	beq.n	800c906 <__swbuf_r+0x62>
 800c8fc:	89a3      	ldrh	r3, [r4, #12]
 800c8fe:	07db      	lsls	r3, r3, #31
 800c900:	d519      	bpl.n	800c936 <__swbuf_r+0x92>
 800c902:	2e0a      	cmp	r6, #10
 800c904:	d117      	bne.n	800c936 <__swbuf_r+0x92>
 800c906:	4621      	mov	r1, r4
 800c908:	4628      	mov	r0, r5
 800c90a:	f000 ff57 	bl	800d7bc <_fflush_r>
 800c90e:	b190      	cbz	r0, 800c936 <__swbuf_r+0x92>
 800c910:	e00f      	b.n	800c932 <__swbuf_r+0x8e>
 800c912:	4b0b      	ldr	r3, [pc, #44]	; (800c940 <__swbuf_r+0x9c>)
 800c914:	429c      	cmp	r4, r3
 800c916:	d101      	bne.n	800c91c <__swbuf_r+0x78>
 800c918:	68ac      	ldr	r4, [r5, #8]
 800c91a:	e7d0      	b.n	800c8be <__swbuf_r+0x1a>
 800c91c:	4b09      	ldr	r3, [pc, #36]	; (800c944 <__swbuf_r+0xa0>)
 800c91e:	429c      	cmp	r4, r3
 800c920:	bf08      	it	eq
 800c922:	68ec      	ldreq	r4, [r5, #12]
 800c924:	e7cb      	b.n	800c8be <__swbuf_r+0x1a>
 800c926:	4621      	mov	r1, r4
 800c928:	4628      	mov	r0, r5
 800c92a:	f000 f80d 	bl	800c948 <__swsetup_r>
 800c92e:	2800      	cmp	r0, #0
 800c930:	d0cc      	beq.n	800c8cc <__swbuf_r+0x28>
 800c932:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 800c936:	4638      	mov	r0, r7
 800c938:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800c93a:	bf00      	nop
 800c93c:	0800ee94 	.word	0x0800ee94
 800c940:	0800eeb4 	.word	0x0800eeb4
 800c944:	0800ee74 	.word	0x0800ee74

0800c948 <__swsetup_r>:
 800c948:	4b32      	ldr	r3, [pc, #200]	; (800ca14 <__swsetup_r+0xcc>)
 800c94a:	b570      	push	{r4, r5, r6, lr}
 800c94c:	681d      	ldr	r5, [r3, #0]
 800c94e:	4606      	mov	r6, r0
 800c950:	460c      	mov	r4, r1
 800c952:	b125      	cbz	r5, 800c95e <__swsetup_r+0x16>
 800c954:	69ab      	ldr	r3, [r5, #24]
 800c956:	b913      	cbnz	r3, 800c95e <__swsetup_r+0x16>
 800c958:	4628      	mov	r0, r5
 800c95a:	f000 ff99 	bl	800d890 <__sinit>
 800c95e:	4b2e      	ldr	r3, [pc, #184]	; (800ca18 <__swsetup_r+0xd0>)
 800c960:	429c      	cmp	r4, r3
 800c962:	d10f      	bne.n	800c984 <__swsetup_r+0x3c>
 800c964:	686c      	ldr	r4, [r5, #4]
 800c966:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800c96a:	b29a      	uxth	r2, r3
 800c96c:	0715      	lsls	r5, r2, #28
 800c96e:	d42c      	bmi.n	800c9ca <__swsetup_r+0x82>
 800c970:	06d0      	lsls	r0, r2, #27
 800c972:	d411      	bmi.n	800c998 <__swsetup_r+0x50>
 800c974:	2209      	movs	r2, #9
 800c976:	6032      	str	r2, [r6, #0]
 800c978:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800c97c:	81a3      	strh	r3, [r4, #12]
 800c97e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800c982:	e03e      	b.n	800ca02 <__swsetup_r+0xba>
 800c984:	4b25      	ldr	r3, [pc, #148]	; (800ca1c <__swsetup_r+0xd4>)
 800c986:	429c      	cmp	r4, r3
 800c988:	d101      	bne.n	800c98e <__swsetup_r+0x46>
 800c98a:	68ac      	ldr	r4, [r5, #8]
 800c98c:	e7eb      	b.n	800c966 <__swsetup_r+0x1e>
 800c98e:	4b24      	ldr	r3, [pc, #144]	; (800ca20 <__swsetup_r+0xd8>)
 800c990:	429c      	cmp	r4, r3
 800c992:	bf08      	it	eq
 800c994:	68ec      	ldreq	r4, [r5, #12]
 800c996:	e7e6      	b.n	800c966 <__swsetup_r+0x1e>
 800c998:	0751      	lsls	r1, r2, #29
 800c99a:	d512      	bpl.n	800c9c2 <__swsetup_r+0x7a>
 800c99c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800c99e:	b141      	cbz	r1, 800c9b2 <__swsetup_r+0x6a>
 800c9a0:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800c9a4:	4299      	cmp	r1, r3
 800c9a6:	d002      	beq.n	800c9ae <__swsetup_r+0x66>
 800c9a8:	4630      	mov	r0, r6
 800c9aa:	f001 fb69 	bl	800e080 <_free_r>
 800c9ae:	2300      	movs	r3, #0
 800c9b0:	6363      	str	r3, [r4, #52]	; 0x34
 800c9b2:	89a3      	ldrh	r3, [r4, #12]
 800c9b4:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800c9b8:	81a3      	strh	r3, [r4, #12]
 800c9ba:	2300      	movs	r3, #0
 800c9bc:	6063      	str	r3, [r4, #4]
 800c9be:	6923      	ldr	r3, [r4, #16]
 800c9c0:	6023      	str	r3, [r4, #0]
 800c9c2:	89a3      	ldrh	r3, [r4, #12]
 800c9c4:	f043 0308 	orr.w	r3, r3, #8
 800c9c8:	81a3      	strh	r3, [r4, #12]
 800c9ca:	6923      	ldr	r3, [r4, #16]
 800c9cc:	b94b      	cbnz	r3, 800c9e2 <__swsetup_r+0x9a>
 800c9ce:	89a3      	ldrh	r3, [r4, #12]
 800c9d0:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800c9d4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800c9d8:	d003      	beq.n	800c9e2 <__swsetup_r+0x9a>
 800c9da:	4621      	mov	r1, r4
 800c9dc:	4630      	mov	r0, r6
 800c9de:	f001 f813 	bl	800da08 <__smakebuf_r>
 800c9e2:	89a2      	ldrh	r2, [r4, #12]
 800c9e4:	f012 0301 	ands.w	r3, r2, #1
 800c9e8:	d00c      	beq.n	800ca04 <__swsetup_r+0xbc>
 800c9ea:	2300      	movs	r3, #0
 800c9ec:	60a3      	str	r3, [r4, #8]
 800c9ee:	6963      	ldr	r3, [r4, #20]
 800c9f0:	425b      	negs	r3, r3
 800c9f2:	61a3      	str	r3, [r4, #24]
 800c9f4:	6923      	ldr	r3, [r4, #16]
 800c9f6:	b953      	cbnz	r3, 800ca0e <__swsetup_r+0xc6>
 800c9f8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800c9fc:	f013 0080 	ands.w	r0, r3, #128	; 0x80
 800ca00:	d1ba      	bne.n	800c978 <__swsetup_r+0x30>
 800ca02:	bd70      	pop	{r4, r5, r6, pc}
 800ca04:	0792      	lsls	r2, r2, #30
 800ca06:	bf58      	it	pl
 800ca08:	6963      	ldrpl	r3, [r4, #20]
 800ca0a:	60a3      	str	r3, [r4, #8]
 800ca0c:	e7f2      	b.n	800c9f4 <__swsetup_r+0xac>
 800ca0e:	2000      	movs	r0, #0
 800ca10:	e7f7      	b.n	800ca02 <__swsetup_r+0xba>
 800ca12:	bf00      	nop
 800ca14:	20001228 	.word	0x20001228
 800ca18:	0800ee94 	.word	0x0800ee94
 800ca1c:	0800eeb4 	.word	0x0800eeb4
 800ca20:	0800ee74 	.word	0x0800ee74

0800ca24 <quorem>:
 800ca24:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ca28:	6903      	ldr	r3, [r0, #16]
 800ca2a:	690c      	ldr	r4, [r1, #16]
 800ca2c:	42a3      	cmp	r3, r4
 800ca2e:	4680      	mov	r8, r0
 800ca30:	f2c0 8082 	blt.w	800cb38 <quorem+0x114>
 800ca34:	3c01      	subs	r4, #1
 800ca36:	f101 0714 	add.w	r7, r1, #20
 800ca3a:	ea4f 0c84 	mov.w	ip, r4, lsl #2
 800ca3e:	f100 0614 	add.w	r6, r0, #20
 800ca42:	f857 5024 	ldr.w	r5, [r7, r4, lsl #2]
 800ca46:	f856 0024 	ldr.w	r0, [r6, r4, lsl #2]
 800ca4a:	eb06 030c 	add.w	r3, r6, ip
 800ca4e:	3501      	adds	r5, #1
 800ca50:	eb07 090c 	add.w	r9, r7, ip
 800ca54:	9301      	str	r3, [sp, #4]
 800ca56:	fbb0 f5f5 	udiv	r5, r0, r5
 800ca5a:	b395      	cbz	r5, 800cac2 <quorem+0x9e>
 800ca5c:	f04f 0a00 	mov.w	sl, #0
 800ca60:	4638      	mov	r0, r7
 800ca62:	46b6      	mov	lr, r6
 800ca64:	46d3      	mov	fp, sl
 800ca66:	f850 2b04 	ldr.w	r2, [r0], #4
 800ca6a:	b293      	uxth	r3, r2
 800ca6c:	fb05 a303 	mla	r3, r5, r3, sl
 800ca70:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800ca74:	b29b      	uxth	r3, r3
 800ca76:	ebab 0303 	sub.w	r3, fp, r3
 800ca7a:	0c12      	lsrs	r2, r2, #16
 800ca7c:	f8de b000 	ldr.w	fp, [lr]
 800ca80:	fb05 a202 	mla	r2, r5, r2, sl
 800ca84:	fa13 f38b 	uxtah	r3, r3, fp
 800ca88:	ea4f 4a12 	mov.w	sl, r2, lsr #16
 800ca8c:	fa1f fb82 	uxth.w	fp, r2
 800ca90:	f8de 2000 	ldr.w	r2, [lr]
 800ca94:	ebcb 4212 	rsb	r2, fp, r2, lsr #16
 800ca98:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800ca9c:	b29b      	uxth	r3, r3
 800ca9e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800caa2:	4581      	cmp	r9, r0
 800caa4:	ea4f 4b22 	mov.w	fp, r2, asr #16
 800caa8:	f84e 3b04 	str.w	r3, [lr], #4
 800caac:	d2db      	bcs.n	800ca66 <quorem+0x42>
 800caae:	f856 300c 	ldr.w	r3, [r6, ip]
 800cab2:	b933      	cbnz	r3, 800cac2 <quorem+0x9e>
 800cab4:	9b01      	ldr	r3, [sp, #4]
 800cab6:	3b04      	subs	r3, #4
 800cab8:	429e      	cmp	r6, r3
 800caba:	461a      	mov	r2, r3
 800cabc:	d330      	bcc.n	800cb20 <quorem+0xfc>
 800cabe:	f8c8 4010 	str.w	r4, [r8, #16]
 800cac2:	4640      	mov	r0, r8
 800cac4:	f001 fa08 	bl	800ded8 <__mcmp>
 800cac8:	2800      	cmp	r0, #0
 800caca:	db25      	blt.n	800cb18 <quorem+0xf4>
 800cacc:	3501      	adds	r5, #1
 800cace:	4630      	mov	r0, r6
 800cad0:	f04f 0c00 	mov.w	ip, #0
 800cad4:	f857 2b04 	ldr.w	r2, [r7], #4
 800cad8:	f8d0 e000 	ldr.w	lr, [r0]
 800cadc:	b293      	uxth	r3, r2
 800cade:	ebac 0303 	sub.w	r3, ip, r3
 800cae2:	0c12      	lsrs	r2, r2, #16
 800cae4:	fa13 f38e 	uxtah	r3, r3, lr
 800cae8:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 800caec:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800caf0:	b29b      	uxth	r3, r3
 800caf2:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800caf6:	45b9      	cmp	r9, r7
 800caf8:	ea4f 4c22 	mov.w	ip, r2, asr #16
 800cafc:	f840 3b04 	str.w	r3, [r0], #4
 800cb00:	d2e8      	bcs.n	800cad4 <quorem+0xb0>
 800cb02:	f856 2024 	ldr.w	r2, [r6, r4, lsl #2]
 800cb06:	eb06 0384 	add.w	r3, r6, r4, lsl #2
 800cb0a:	b92a      	cbnz	r2, 800cb18 <quorem+0xf4>
 800cb0c:	3b04      	subs	r3, #4
 800cb0e:	429e      	cmp	r6, r3
 800cb10:	461a      	mov	r2, r3
 800cb12:	d30b      	bcc.n	800cb2c <quorem+0x108>
 800cb14:	f8c8 4010 	str.w	r4, [r8, #16]
 800cb18:	4628      	mov	r0, r5
 800cb1a:	b003      	add	sp, #12
 800cb1c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800cb20:	6812      	ldr	r2, [r2, #0]
 800cb22:	3b04      	subs	r3, #4
 800cb24:	2a00      	cmp	r2, #0
 800cb26:	d1ca      	bne.n	800cabe <quorem+0x9a>
 800cb28:	3c01      	subs	r4, #1
 800cb2a:	e7c5      	b.n	800cab8 <quorem+0x94>
 800cb2c:	6812      	ldr	r2, [r2, #0]
 800cb2e:	3b04      	subs	r3, #4
 800cb30:	2a00      	cmp	r2, #0
 800cb32:	d1ef      	bne.n	800cb14 <quorem+0xf0>
 800cb34:	3c01      	subs	r4, #1
 800cb36:	e7ea      	b.n	800cb0e <quorem+0xea>
 800cb38:	2000      	movs	r0, #0
 800cb3a:	e7ee      	b.n	800cb1a <quorem+0xf6>
 800cb3c:	0000      	movs	r0, r0
	...

0800cb40 <_dtoa_r>:
 800cb40:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800cb44:	ec57 6b10 	vmov	r6, r7, d0
 800cb48:	b097      	sub	sp, #92	; 0x5c
 800cb4a:	6a45      	ldr	r5, [r0, #36]	; 0x24
 800cb4c:	9106      	str	r1, [sp, #24]
 800cb4e:	4604      	mov	r4, r0
 800cb50:	920b      	str	r2, [sp, #44]	; 0x2c
 800cb52:	9312      	str	r3, [sp, #72]	; 0x48
 800cb54:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 800cb58:	e9cd 6700 	strd	r6, r7, [sp]
 800cb5c:	b93d      	cbnz	r5, 800cb6e <_dtoa_r+0x2e>
 800cb5e:	2010      	movs	r0, #16
 800cb60:	f000 ff92 	bl	800da88 <malloc>
 800cb64:	6260      	str	r0, [r4, #36]	; 0x24
 800cb66:	e9c0 5501 	strd	r5, r5, [r0, #4]
 800cb6a:	6005      	str	r5, [r0, #0]
 800cb6c:	60c5      	str	r5, [r0, #12]
 800cb6e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800cb70:	6819      	ldr	r1, [r3, #0]
 800cb72:	b151      	cbz	r1, 800cb8a <_dtoa_r+0x4a>
 800cb74:	685a      	ldr	r2, [r3, #4]
 800cb76:	604a      	str	r2, [r1, #4]
 800cb78:	2301      	movs	r3, #1
 800cb7a:	4093      	lsls	r3, r2
 800cb7c:	608b      	str	r3, [r1, #8]
 800cb7e:	4620      	mov	r0, r4
 800cb80:	f000 ffc9 	bl	800db16 <_Bfree>
 800cb84:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800cb86:	2200      	movs	r2, #0
 800cb88:	601a      	str	r2, [r3, #0]
 800cb8a:	1e3b      	subs	r3, r7, #0
 800cb8c:	bfbb      	ittet	lt
 800cb8e:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 800cb92:	9301      	strlt	r3, [sp, #4]
 800cb94:	2300      	movge	r3, #0
 800cb96:	2201      	movlt	r2, #1
 800cb98:	bfac      	ite	ge
 800cb9a:	f8c8 3000 	strge.w	r3, [r8]
 800cb9e:	f8c8 2000 	strlt.w	r2, [r8]
 800cba2:	4baf      	ldr	r3, [pc, #700]	; (800ce60 <_dtoa_r+0x320>)
 800cba4:	f8dd 8004 	ldr.w	r8, [sp, #4]
 800cba8:	ea33 0308 	bics.w	r3, r3, r8
 800cbac:	d114      	bne.n	800cbd8 <_dtoa_r+0x98>
 800cbae:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800cbb0:	f242 730f 	movw	r3, #9999	; 0x270f
 800cbb4:	6013      	str	r3, [r2, #0]
 800cbb6:	9b00      	ldr	r3, [sp, #0]
 800cbb8:	b923      	cbnz	r3, 800cbc4 <_dtoa_r+0x84>
 800cbba:	f3c8 0013 	ubfx	r0, r8, #0, #20
 800cbbe:	2800      	cmp	r0, #0
 800cbc0:	f000 8542 	beq.w	800d648 <_dtoa_r+0xb08>
 800cbc4:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800cbc6:	f8df b2ac 	ldr.w	fp, [pc, #684]	; 800ce74 <_dtoa_r+0x334>
 800cbca:	2b00      	cmp	r3, #0
 800cbcc:	f000 8544 	beq.w	800d658 <_dtoa_r+0xb18>
 800cbd0:	f10b 0303 	add.w	r3, fp, #3
 800cbd4:	f000 bd3e 	b.w	800d654 <_dtoa_r+0xb14>
 800cbd8:	e9dd 6700 	ldrd	r6, r7, [sp]
 800cbdc:	2200      	movs	r2, #0
 800cbde:	2300      	movs	r3, #0
 800cbe0:	4630      	mov	r0, r6
 800cbe2:	4639      	mov	r1, r7
 800cbe4:	f7f3 ff98 	bl	8000b18 <__aeabi_dcmpeq>
 800cbe8:	4681      	mov	r9, r0
 800cbea:	b168      	cbz	r0, 800cc08 <_dtoa_r+0xc8>
 800cbec:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800cbee:	2301      	movs	r3, #1
 800cbf0:	6013      	str	r3, [r2, #0]
 800cbf2:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800cbf4:	2b00      	cmp	r3, #0
 800cbf6:	f000 8524 	beq.w	800d642 <_dtoa_r+0xb02>
 800cbfa:	4b9a      	ldr	r3, [pc, #616]	; (800ce64 <_dtoa_r+0x324>)
 800cbfc:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800cbfe:	f103 3bff 	add.w	fp, r3, #4294967295	; 0xffffffff
 800cc02:	6013      	str	r3, [r2, #0]
 800cc04:	f000 bd28 	b.w	800d658 <_dtoa_r+0xb18>
 800cc08:	aa14      	add	r2, sp, #80	; 0x50
 800cc0a:	a915      	add	r1, sp, #84	; 0x54
 800cc0c:	ec47 6b10 	vmov	d0, r6, r7
 800cc10:	4620      	mov	r0, r4
 800cc12:	f001 f9d8 	bl	800dfc6 <__d2b>
 800cc16:	f3c8 550a 	ubfx	r5, r8, #20, #11
 800cc1a:	9004      	str	r0, [sp, #16]
 800cc1c:	2d00      	cmp	r5, #0
 800cc1e:	d07c      	beq.n	800cd1a <_dtoa_r+0x1da>
 800cc20:	f3c7 0313 	ubfx	r3, r7, #0, #20
 800cc24:	f043 5b7f 	orr.w	fp, r3, #1069547520	; 0x3fc00000
 800cc28:	46b2      	mov	sl, r6
 800cc2a:	f44b 1b40 	orr.w	fp, fp, #3145728	; 0x300000
 800cc2e:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 800cc32:	f8cd 904c 	str.w	r9, [sp, #76]	; 0x4c
 800cc36:	2200      	movs	r2, #0
 800cc38:	4b8b      	ldr	r3, [pc, #556]	; (800ce68 <_dtoa_r+0x328>)
 800cc3a:	4650      	mov	r0, sl
 800cc3c:	4659      	mov	r1, fp
 800cc3e:	f7f3 fb4b 	bl	80002d8 <__aeabi_dsub>
 800cc42:	a381      	add	r3, pc, #516	; (adr r3, 800ce48 <_dtoa_r+0x308>)
 800cc44:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cc48:	f7f3 fcfe 	bl	8000648 <__aeabi_dmul>
 800cc4c:	a380      	add	r3, pc, #512	; (adr r3, 800ce50 <_dtoa_r+0x310>)
 800cc4e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cc52:	f7f3 fb43 	bl	80002dc <__adddf3>
 800cc56:	4606      	mov	r6, r0
 800cc58:	4628      	mov	r0, r5
 800cc5a:	460f      	mov	r7, r1
 800cc5c:	f7f3 fc8a 	bl	8000574 <__aeabi_i2d>
 800cc60:	a37d      	add	r3, pc, #500	; (adr r3, 800ce58 <_dtoa_r+0x318>)
 800cc62:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cc66:	f7f3 fcef 	bl	8000648 <__aeabi_dmul>
 800cc6a:	4602      	mov	r2, r0
 800cc6c:	460b      	mov	r3, r1
 800cc6e:	4630      	mov	r0, r6
 800cc70:	4639      	mov	r1, r7
 800cc72:	f7f3 fb33 	bl	80002dc <__adddf3>
 800cc76:	4606      	mov	r6, r0
 800cc78:	460f      	mov	r7, r1
 800cc7a:	f7f3 ff95 	bl	8000ba8 <__aeabi_d2iz>
 800cc7e:	2200      	movs	r2, #0
 800cc80:	4682      	mov	sl, r0
 800cc82:	2300      	movs	r3, #0
 800cc84:	4630      	mov	r0, r6
 800cc86:	4639      	mov	r1, r7
 800cc88:	f7f3 ff50 	bl	8000b2c <__aeabi_dcmplt>
 800cc8c:	b148      	cbz	r0, 800cca2 <_dtoa_r+0x162>
 800cc8e:	4650      	mov	r0, sl
 800cc90:	f7f3 fc70 	bl	8000574 <__aeabi_i2d>
 800cc94:	4632      	mov	r2, r6
 800cc96:	463b      	mov	r3, r7
 800cc98:	f7f3 ff3e 	bl	8000b18 <__aeabi_dcmpeq>
 800cc9c:	b908      	cbnz	r0, 800cca2 <_dtoa_r+0x162>
 800cc9e:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
 800cca2:	f1ba 0f16 	cmp.w	sl, #22
 800cca6:	d859      	bhi.n	800cd5c <_dtoa_r+0x21c>
 800cca8:	4970      	ldr	r1, [pc, #448]	; (800ce6c <_dtoa_r+0x32c>)
 800ccaa:	eb01 01ca 	add.w	r1, r1, sl, lsl #3
 800ccae:	e9dd 2300 	ldrd	r2, r3, [sp]
 800ccb2:	e9d1 0100 	ldrd	r0, r1, [r1]
 800ccb6:	f7f3 ff57 	bl	8000b68 <__aeabi_dcmpgt>
 800ccba:	2800      	cmp	r0, #0
 800ccbc:	d050      	beq.n	800cd60 <_dtoa_r+0x220>
 800ccbe:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
 800ccc2:	2300      	movs	r3, #0
 800ccc4:	930f      	str	r3, [sp, #60]	; 0x3c
 800ccc6:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800ccc8:	1b5d      	subs	r5, r3, r5
 800ccca:	f1b5 0801 	subs.w	r8, r5, #1
 800ccce:	bf49      	itett	mi
 800ccd0:	f1c5 0301 	rsbmi	r3, r5, #1
 800ccd4:	2300      	movpl	r3, #0
 800ccd6:	9305      	strmi	r3, [sp, #20]
 800ccd8:	f04f 0800 	movmi.w	r8, #0
 800ccdc:	bf58      	it	pl
 800ccde:	9305      	strpl	r3, [sp, #20]
 800cce0:	f1ba 0f00 	cmp.w	sl, #0
 800cce4:	db3e      	blt.n	800cd64 <_dtoa_r+0x224>
 800cce6:	2300      	movs	r3, #0
 800cce8:	44d0      	add	r8, sl
 800ccea:	f8cd a038 	str.w	sl, [sp, #56]	; 0x38
 800ccee:	9307      	str	r3, [sp, #28]
 800ccf0:	9b06      	ldr	r3, [sp, #24]
 800ccf2:	2b09      	cmp	r3, #9
 800ccf4:	f200 8090 	bhi.w	800ce18 <_dtoa_r+0x2d8>
 800ccf8:	2b05      	cmp	r3, #5
 800ccfa:	bfc4      	itt	gt
 800ccfc:	3b04      	subgt	r3, #4
 800ccfe:	9306      	strgt	r3, [sp, #24]
 800cd00:	9b06      	ldr	r3, [sp, #24]
 800cd02:	f1a3 0302 	sub.w	r3, r3, #2
 800cd06:	bfcc      	ite	gt
 800cd08:	2500      	movgt	r5, #0
 800cd0a:	2501      	movle	r5, #1
 800cd0c:	2b03      	cmp	r3, #3
 800cd0e:	f200 808f 	bhi.w	800ce30 <_dtoa_r+0x2f0>
 800cd12:	e8df f003 	tbb	[pc, r3]
 800cd16:	7f7d      	.short	0x7f7d
 800cd18:	7131      	.short	0x7131
 800cd1a:	e9dd 5314 	ldrd	r5, r3, [sp, #80]	; 0x50
 800cd1e:	441d      	add	r5, r3
 800cd20:	f205 4032 	addw	r0, r5, #1074	; 0x432
 800cd24:	2820      	cmp	r0, #32
 800cd26:	dd13      	ble.n	800cd50 <_dtoa_r+0x210>
 800cd28:	f1c0 0040 	rsb	r0, r0, #64	; 0x40
 800cd2c:	9b00      	ldr	r3, [sp, #0]
 800cd2e:	fa08 f800 	lsl.w	r8, r8, r0
 800cd32:	f205 4012 	addw	r0, r5, #1042	; 0x412
 800cd36:	fa23 f000 	lsr.w	r0, r3, r0
 800cd3a:	ea48 0000 	orr.w	r0, r8, r0
 800cd3e:	f7f3 fc09 	bl	8000554 <__aeabi_ui2d>
 800cd42:	2301      	movs	r3, #1
 800cd44:	4682      	mov	sl, r0
 800cd46:	f1a1 7bf8 	sub.w	fp, r1, #32505856	; 0x1f00000
 800cd4a:	3d01      	subs	r5, #1
 800cd4c:	9313      	str	r3, [sp, #76]	; 0x4c
 800cd4e:	e772      	b.n	800cc36 <_dtoa_r+0xf6>
 800cd50:	9b00      	ldr	r3, [sp, #0]
 800cd52:	f1c0 0020 	rsb	r0, r0, #32
 800cd56:	fa03 f000 	lsl.w	r0, r3, r0
 800cd5a:	e7f0      	b.n	800cd3e <_dtoa_r+0x1fe>
 800cd5c:	2301      	movs	r3, #1
 800cd5e:	e7b1      	b.n	800ccc4 <_dtoa_r+0x184>
 800cd60:	900f      	str	r0, [sp, #60]	; 0x3c
 800cd62:	e7b0      	b.n	800ccc6 <_dtoa_r+0x186>
 800cd64:	9b05      	ldr	r3, [sp, #20]
 800cd66:	eba3 030a 	sub.w	r3, r3, sl
 800cd6a:	9305      	str	r3, [sp, #20]
 800cd6c:	f1ca 0300 	rsb	r3, sl, #0
 800cd70:	9307      	str	r3, [sp, #28]
 800cd72:	2300      	movs	r3, #0
 800cd74:	930e      	str	r3, [sp, #56]	; 0x38
 800cd76:	e7bb      	b.n	800ccf0 <_dtoa_r+0x1b0>
 800cd78:	2301      	movs	r3, #1
 800cd7a:	930a      	str	r3, [sp, #40]	; 0x28
 800cd7c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800cd7e:	2b00      	cmp	r3, #0
 800cd80:	dd59      	ble.n	800ce36 <_dtoa_r+0x2f6>
 800cd82:	9302      	str	r3, [sp, #8]
 800cd84:	4699      	mov	r9, r3
 800cd86:	6a66      	ldr	r6, [r4, #36]	; 0x24
 800cd88:	2200      	movs	r2, #0
 800cd8a:	6072      	str	r2, [r6, #4]
 800cd8c:	2204      	movs	r2, #4
 800cd8e:	f102 0014 	add.w	r0, r2, #20
 800cd92:	4298      	cmp	r0, r3
 800cd94:	6871      	ldr	r1, [r6, #4]
 800cd96:	d953      	bls.n	800ce40 <_dtoa_r+0x300>
 800cd98:	4620      	mov	r0, r4
 800cd9a:	f000 fe88 	bl	800daae <_Balloc>
 800cd9e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800cda0:	6030      	str	r0, [r6, #0]
 800cda2:	f1b9 0f0e 	cmp.w	r9, #14
 800cda6:	f8d3 b000 	ldr.w	fp, [r3]
 800cdaa:	f200 80e6 	bhi.w	800cf7a <_dtoa_r+0x43a>
 800cdae:	2d00      	cmp	r5, #0
 800cdb0:	f000 80e3 	beq.w	800cf7a <_dtoa_r+0x43a>
 800cdb4:	ed9d 7b00 	vldr	d7, [sp]
 800cdb8:	f1ba 0f00 	cmp.w	sl, #0
 800cdbc:	ed8d 7b10 	vstr	d7, [sp, #64]	; 0x40
 800cdc0:	dd74      	ble.n	800ceac <_dtoa_r+0x36c>
 800cdc2:	4a2a      	ldr	r2, [pc, #168]	; (800ce6c <_dtoa_r+0x32c>)
 800cdc4:	f00a 030f 	and.w	r3, sl, #15
 800cdc8:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 800cdcc:	ed93 7b00 	vldr	d7, [r3]
 800cdd0:	ea4f 162a 	mov.w	r6, sl, asr #4
 800cdd4:	06f0      	lsls	r0, r6, #27
 800cdd6:	ed8d 7b08 	vstr	d7, [sp, #32]
 800cdda:	d565      	bpl.n	800cea8 <_dtoa_r+0x368>
 800cddc:	4b24      	ldr	r3, [pc, #144]	; (800ce70 <_dtoa_r+0x330>)
 800cdde:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 800cde2:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800cde6:	f7f3 fd59 	bl	800089c <__aeabi_ddiv>
 800cdea:	e9cd 0100 	strd	r0, r1, [sp]
 800cdee:	f006 060f 	and.w	r6, r6, #15
 800cdf2:	2503      	movs	r5, #3
 800cdf4:	4f1e      	ldr	r7, [pc, #120]	; (800ce70 <_dtoa_r+0x330>)
 800cdf6:	e04c      	b.n	800ce92 <_dtoa_r+0x352>
 800cdf8:	2301      	movs	r3, #1
 800cdfa:	930a      	str	r3, [sp, #40]	; 0x28
 800cdfc:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800cdfe:	4453      	add	r3, sl
 800ce00:	f103 0901 	add.w	r9, r3, #1
 800ce04:	9302      	str	r3, [sp, #8]
 800ce06:	464b      	mov	r3, r9
 800ce08:	2b01      	cmp	r3, #1
 800ce0a:	bfb8      	it	lt
 800ce0c:	2301      	movlt	r3, #1
 800ce0e:	e7ba      	b.n	800cd86 <_dtoa_r+0x246>
 800ce10:	2300      	movs	r3, #0
 800ce12:	e7b2      	b.n	800cd7a <_dtoa_r+0x23a>
 800ce14:	2300      	movs	r3, #0
 800ce16:	e7f0      	b.n	800cdfa <_dtoa_r+0x2ba>
 800ce18:	2501      	movs	r5, #1
 800ce1a:	2300      	movs	r3, #0
 800ce1c:	9306      	str	r3, [sp, #24]
 800ce1e:	950a      	str	r5, [sp, #40]	; 0x28
 800ce20:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800ce24:	9302      	str	r3, [sp, #8]
 800ce26:	4699      	mov	r9, r3
 800ce28:	2200      	movs	r2, #0
 800ce2a:	2312      	movs	r3, #18
 800ce2c:	920b      	str	r2, [sp, #44]	; 0x2c
 800ce2e:	e7aa      	b.n	800cd86 <_dtoa_r+0x246>
 800ce30:	2301      	movs	r3, #1
 800ce32:	930a      	str	r3, [sp, #40]	; 0x28
 800ce34:	e7f4      	b.n	800ce20 <_dtoa_r+0x2e0>
 800ce36:	2301      	movs	r3, #1
 800ce38:	9302      	str	r3, [sp, #8]
 800ce3a:	4699      	mov	r9, r3
 800ce3c:	461a      	mov	r2, r3
 800ce3e:	e7f5      	b.n	800ce2c <_dtoa_r+0x2ec>
 800ce40:	3101      	adds	r1, #1
 800ce42:	6071      	str	r1, [r6, #4]
 800ce44:	0052      	lsls	r2, r2, #1
 800ce46:	e7a2      	b.n	800cd8e <_dtoa_r+0x24e>
 800ce48:	636f4361 	.word	0x636f4361
 800ce4c:	3fd287a7 	.word	0x3fd287a7
 800ce50:	8b60c8b3 	.word	0x8b60c8b3
 800ce54:	3fc68a28 	.word	0x3fc68a28
 800ce58:	509f79fb 	.word	0x509f79fb
 800ce5c:	3fd34413 	.word	0x3fd34413
 800ce60:	7ff00000 	.word	0x7ff00000
 800ce64:	0800ee41 	.word	0x0800ee41
 800ce68:	3ff80000 	.word	0x3ff80000
 800ce6c:	0800ef00 	.word	0x0800ef00
 800ce70:	0800eed8 	.word	0x0800eed8
 800ce74:	0800ee6d 	.word	0x0800ee6d
 800ce78:	07f1      	lsls	r1, r6, #31
 800ce7a:	d508      	bpl.n	800ce8e <_dtoa_r+0x34e>
 800ce7c:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 800ce80:	e9d7 2300 	ldrd	r2, r3, [r7]
 800ce84:	f7f3 fbe0 	bl	8000648 <__aeabi_dmul>
 800ce88:	e9cd 0108 	strd	r0, r1, [sp, #32]
 800ce8c:	3501      	adds	r5, #1
 800ce8e:	1076      	asrs	r6, r6, #1
 800ce90:	3708      	adds	r7, #8
 800ce92:	2e00      	cmp	r6, #0
 800ce94:	d1f0      	bne.n	800ce78 <_dtoa_r+0x338>
 800ce96:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 800ce9a:	e9dd 0100 	ldrd	r0, r1, [sp]
 800ce9e:	f7f3 fcfd 	bl	800089c <__aeabi_ddiv>
 800cea2:	e9cd 0100 	strd	r0, r1, [sp]
 800cea6:	e01a      	b.n	800cede <_dtoa_r+0x39e>
 800cea8:	2502      	movs	r5, #2
 800ceaa:	e7a3      	b.n	800cdf4 <_dtoa_r+0x2b4>
 800ceac:	f000 80a0 	beq.w	800cff0 <_dtoa_r+0x4b0>
 800ceb0:	f1ca 0600 	rsb	r6, sl, #0
 800ceb4:	4b9f      	ldr	r3, [pc, #636]	; (800d134 <_dtoa_r+0x5f4>)
 800ceb6:	4fa0      	ldr	r7, [pc, #640]	; (800d138 <_dtoa_r+0x5f8>)
 800ceb8:	f006 020f 	and.w	r2, r6, #15
 800cebc:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800cec0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cec4:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 800cec8:	f7f3 fbbe 	bl	8000648 <__aeabi_dmul>
 800cecc:	e9cd 0100 	strd	r0, r1, [sp]
 800ced0:	1136      	asrs	r6, r6, #4
 800ced2:	2300      	movs	r3, #0
 800ced4:	2502      	movs	r5, #2
 800ced6:	2e00      	cmp	r6, #0
 800ced8:	d17f      	bne.n	800cfda <_dtoa_r+0x49a>
 800ceda:	2b00      	cmp	r3, #0
 800cedc:	d1e1      	bne.n	800cea2 <_dtoa_r+0x362>
 800cede:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800cee0:	2b00      	cmp	r3, #0
 800cee2:	f000 8087 	beq.w	800cff4 <_dtoa_r+0x4b4>
 800cee6:	e9dd 6700 	ldrd	r6, r7, [sp]
 800ceea:	2200      	movs	r2, #0
 800ceec:	4b93      	ldr	r3, [pc, #588]	; (800d13c <_dtoa_r+0x5fc>)
 800ceee:	4630      	mov	r0, r6
 800cef0:	4639      	mov	r1, r7
 800cef2:	f7f3 fe1b 	bl	8000b2c <__aeabi_dcmplt>
 800cef6:	2800      	cmp	r0, #0
 800cef8:	d07c      	beq.n	800cff4 <_dtoa_r+0x4b4>
 800cefa:	f1b9 0f00 	cmp.w	r9, #0
 800cefe:	d079      	beq.n	800cff4 <_dtoa_r+0x4b4>
 800cf00:	9b02      	ldr	r3, [sp, #8]
 800cf02:	2b00      	cmp	r3, #0
 800cf04:	dd35      	ble.n	800cf72 <_dtoa_r+0x432>
 800cf06:	f10a 33ff 	add.w	r3, sl, #4294967295	; 0xffffffff
 800cf0a:	9308      	str	r3, [sp, #32]
 800cf0c:	4639      	mov	r1, r7
 800cf0e:	2200      	movs	r2, #0
 800cf10:	4b8b      	ldr	r3, [pc, #556]	; (800d140 <_dtoa_r+0x600>)
 800cf12:	4630      	mov	r0, r6
 800cf14:	f7f3 fb98 	bl	8000648 <__aeabi_dmul>
 800cf18:	e9cd 0100 	strd	r0, r1, [sp]
 800cf1c:	9f02      	ldr	r7, [sp, #8]
 800cf1e:	3501      	adds	r5, #1
 800cf20:	4628      	mov	r0, r5
 800cf22:	f7f3 fb27 	bl	8000574 <__aeabi_i2d>
 800cf26:	e9dd 2300 	ldrd	r2, r3, [sp]
 800cf2a:	f7f3 fb8d 	bl	8000648 <__aeabi_dmul>
 800cf2e:	2200      	movs	r2, #0
 800cf30:	4b84      	ldr	r3, [pc, #528]	; (800d144 <_dtoa_r+0x604>)
 800cf32:	f7f3 f9d3 	bl	80002dc <__adddf3>
 800cf36:	4605      	mov	r5, r0
 800cf38:	f1a1 7650 	sub.w	r6, r1, #54525952	; 0x3400000
 800cf3c:	2f00      	cmp	r7, #0
 800cf3e:	d15d      	bne.n	800cffc <_dtoa_r+0x4bc>
 800cf40:	2200      	movs	r2, #0
 800cf42:	4b81      	ldr	r3, [pc, #516]	; (800d148 <_dtoa_r+0x608>)
 800cf44:	e9dd 0100 	ldrd	r0, r1, [sp]
 800cf48:	f7f3 f9c6 	bl	80002d8 <__aeabi_dsub>
 800cf4c:	462a      	mov	r2, r5
 800cf4e:	4633      	mov	r3, r6
 800cf50:	e9cd 0100 	strd	r0, r1, [sp]
 800cf54:	f7f3 fe08 	bl	8000b68 <__aeabi_dcmpgt>
 800cf58:	2800      	cmp	r0, #0
 800cf5a:	f040 8288 	bne.w	800d46e <_dtoa_r+0x92e>
 800cf5e:	462a      	mov	r2, r5
 800cf60:	f106 4300 	add.w	r3, r6, #2147483648	; 0x80000000
 800cf64:	e9dd 0100 	ldrd	r0, r1, [sp]
 800cf68:	f7f3 fde0 	bl	8000b2c <__aeabi_dcmplt>
 800cf6c:	2800      	cmp	r0, #0
 800cf6e:	f040 827c 	bne.w	800d46a <_dtoa_r+0x92a>
 800cf72:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 800cf76:	e9cd 2300 	strd	r2, r3, [sp]
 800cf7a:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800cf7c:	2b00      	cmp	r3, #0
 800cf7e:	f2c0 8150 	blt.w	800d222 <_dtoa_r+0x6e2>
 800cf82:	f1ba 0f0e 	cmp.w	sl, #14
 800cf86:	f300 814c 	bgt.w	800d222 <_dtoa_r+0x6e2>
 800cf8a:	4b6a      	ldr	r3, [pc, #424]	; (800d134 <_dtoa_r+0x5f4>)
 800cf8c:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 800cf90:	ed93 7b00 	vldr	d7, [r3]
 800cf94:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800cf96:	2b00      	cmp	r3, #0
 800cf98:	ed8d 7b02 	vstr	d7, [sp, #8]
 800cf9c:	f280 80d8 	bge.w	800d150 <_dtoa_r+0x610>
 800cfa0:	f1b9 0f00 	cmp.w	r9, #0
 800cfa4:	f300 80d4 	bgt.w	800d150 <_dtoa_r+0x610>
 800cfa8:	f040 825e 	bne.w	800d468 <_dtoa_r+0x928>
 800cfac:	2200      	movs	r2, #0
 800cfae:	4b66      	ldr	r3, [pc, #408]	; (800d148 <_dtoa_r+0x608>)
 800cfb0:	ec51 0b17 	vmov	r0, r1, d7
 800cfb4:	f7f3 fb48 	bl	8000648 <__aeabi_dmul>
 800cfb8:	e9dd 2300 	ldrd	r2, r3, [sp]
 800cfbc:	f7f3 fdca 	bl	8000b54 <__aeabi_dcmpge>
 800cfc0:	464f      	mov	r7, r9
 800cfc2:	464e      	mov	r6, r9
 800cfc4:	2800      	cmp	r0, #0
 800cfc6:	f040 8234 	bne.w	800d432 <_dtoa_r+0x8f2>
 800cfca:	2331      	movs	r3, #49	; 0x31
 800cfcc:	f10b 0501 	add.w	r5, fp, #1
 800cfd0:	f88b 3000 	strb.w	r3, [fp]
 800cfd4:	f10a 0a01 	add.w	sl, sl, #1
 800cfd8:	e22f      	b.n	800d43a <_dtoa_r+0x8fa>
 800cfda:	07f2      	lsls	r2, r6, #31
 800cfdc:	d505      	bpl.n	800cfea <_dtoa_r+0x4aa>
 800cfde:	e9d7 2300 	ldrd	r2, r3, [r7]
 800cfe2:	f7f3 fb31 	bl	8000648 <__aeabi_dmul>
 800cfe6:	3501      	adds	r5, #1
 800cfe8:	2301      	movs	r3, #1
 800cfea:	1076      	asrs	r6, r6, #1
 800cfec:	3708      	adds	r7, #8
 800cfee:	e772      	b.n	800ced6 <_dtoa_r+0x396>
 800cff0:	2502      	movs	r5, #2
 800cff2:	e774      	b.n	800cede <_dtoa_r+0x39e>
 800cff4:	f8cd a020 	str.w	sl, [sp, #32]
 800cff8:	464f      	mov	r7, r9
 800cffa:	e791      	b.n	800cf20 <_dtoa_r+0x3e0>
 800cffc:	4b4d      	ldr	r3, [pc, #308]	; (800d134 <_dtoa_r+0x5f4>)
 800cffe:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 800d002:	e953 0102 	ldrd	r0, r1, [r3, #-8]
 800d006:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800d008:	2b00      	cmp	r3, #0
 800d00a:	d047      	beq.n	800d09c <_dtoa_r+0x55c>
 800d00c:	4602      	mov	r2, r0
 800d00e:	460b      	mov	r3, r1
 800d010:	2000      	movs	r0, #0
 800d012:	494e      	ldr	r1, [pc, #312]	; (800d14c <_dtoa_r+0x60c>)
 800d014:	f7f3 fc42 	bl	800089c <__aeabi_ddiv>
 800d018:	462a      	mov	r2, r5
 800d01a:	4633      	mov	r3, r6
 800d01c:	f7f3 f95c 	bl	80002d8 <__aeabi_dsub>
 800d020:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 800d024:	465d      	mov	r5, fp
 800d026:	e9dd 0100 	ldrd	r0, r1, [sp]
 800d02a:	f7f3 fdbd 	bl	8000ba8 <__aeabi_d2iz>
 800d02e:	4606      	mov	r6, r0
 800d030:	f7f3 faa0 	bl	8000574 <__aeabi_i2d>
 800d034:	4602      	mov	r2, r0
 800d036:	460b      	mov	r3, r1
 800d038:	e9dd 0100 	ldrd	r0, r1, [sp]
 800d03c:	f7f3 f94c 	bl	80002d8 <__aeabi_dsub>
 800d040:	3630      	adds	r6, #48	; 0x30
 800d042:	f805 6b01 	strb.w	r6, [r5], #1
 800d046:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 800d04a:	e9cd 0100 	strd	r0, r1, [sp]
 800d04e:	f7f3 fd6d 	bl	8000b2c <__aeabi_dcmplt>
 800d052:	2800      	cmp	r0, #0
 800d054:	d163      	bne.n	800d11e <_dtoa_r+0x5de>
 800d056:	e9dd 2300 	ldrd	r2, r3, [sp]
 800d05a:	2000      	movs	r0, #0
 800d05c:	4937      	ldr	r1, [pc, #220]	; (800d13c <_dtoa_r+0x5fc>)
 800d05e:	f7f3 f93b 	bl	80002d8 <__aeabi_dsub>
 800d062:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 800d066:	f7f3 fd61 	bl	8000b2c <__aeabi_dcmplt>
 800d06a:	2800      	cmp	r0, #0
 800d06c:	f040 80b7 	bne.w	800d1de <_dtoa_r+0x69e>
 800d070:	eba5 030b 	sub.w	r3, r5, fp
 800d074:	429f      	cmp	r7, r3
 800d076:	f77f af7c 	ble.w	800cf72 <_dtoa_r+0x432>
 800d07a:	2200      	movs	r2, #0
 800d07c:	4b30      	ldr	r3, [pc, #192]	; (800d140 <_dtoa_r+0x600>)
 800d07e:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800d082:	f7f3 fae1 	bl	8000648 <__aeabi_dmul>
 800d086:	2200      	movs	r2, #0
 800d088:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 800d08c:	4b2c      	ldr	r3, [pc, #176]	; (800d140 <_dtoa_r+0x600>)
 800d08e:	e9dd 0100 	ldrd	r0, r1, [sp]
 800d092:	f7f3 fad9 	bl	8000648 <__aeabi_dmul>
 800d096:	e9cd 0100 	strd	r0, r1, [sp]
 800d09a:	e7c4      	b.n	800d026 <_dtoa_r+0x4e6>
 800d09c:	462a      	mov	r2, r5
 800d09e:	4633      	mov	r3, r6
 800d0a0:	f7f3 fad2 	bl	8000648 <__aeabi_dmul>
 800d0a4:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 800d0a8:	eb0b 0507 	add.w	r5, fp, r7
 800d0ac:	465e      	mov	r6, fp
 800d0ae:	e9dd 0100 	ldrd	r0, r1, [sp]
 800d0b2:	f7f3 fd79 	bl	8000ba8 <__aeabi_d2iz>
 800d0b6:	4607      	mov	r7, r0
 800d0b8:	f7f3 fa5c 	bl	8000574 <__aeabi_i2d>
 800d0bc:	3730      	adds	r7, #48	; 0x30
 800d0be:	4602      	mov	r2, r0
 800d0c0:	460b      	mov	r3, r1
 800d0c2:	e9dd 0100 	ldrd	r0, r1, [sp]
 800d0c6:	f7f3 f907 	bl	80002d8 <__aeabi_dsub>
 800d0ca:	f806 7b01 	strb.w	r7, [r6], #1
 800d0ce:	42ae      	cmp	r6, r5
 800d0d0:	e9cd 0100 	strd	r0, r1, [sp]
 800d0d4:	f04f 0200 	mov.w	r2, #0
 800d0d8:	d126      	bne.n	800d128 <_dtoa_r+0x5e8>
 800d0da:	4b1c      	ldr	r3, [pc, #112]	; (800d14c <_dtoa_r+0x60c>)
 800d0dc:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800d0e0:	f7f3 f8fc 	bl	80002dc <__adddf3>
 800d0e4:	4602      	mov	r2, r0
 800d0e6:	460b      	mov	r3, r1
 800d0e8:	e9dd 0100 	ldrd	r0, r1, [sp]
 800d0ec:	f7f3 fd3c 	bl	8000b68 <__aeabi_dcmpgt>
 800d0f0:	2800      	cmp	r0, #0
 800d0f2:	d174      	bne.n	800d1de <_dtoa_r+0x69e>
 800d0f4:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 800d0f8:	2000      	movs	r0, #0
 800d0fa:	4914      	ldr	r1, [pc, #80]	; (800d14c <_dtoa_r+0x60c>)
 800d0fc:	f7f3 f8ec 	bl	80002d8 <__aeabi_dsub>
 800d100:	4602      	mov	r2, r0
 800d102:	460b      	mov	r3, r1
 800d104:	e9dd 0100 	ldrd	r0, r1, [sp]
 800d108:	f7f3 fd10 	bl	8000b2c <__aeabi_dcmplt>
 800d10c:	2800      	cmp	r0, #0
 800d10e:	f43f af30 	beq.w	800cf72 <_dtoa_r+0x432>
 800d112:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 800d116:	2b30      	cmp	r3, #48	; 0x30
 800d118:	f105 32ff 	add.w	r2, r5, #4294967295	; 0xffffffff
 800d11c:	d002      	beq.n	800d124 <_dtoa_r+0x5e4>
 800d11e:	f8dd a020 	ldr.w	sl, [sp, #32]
 800d122:	e04a      	b.n	800d1ba <_dtoa_r+0x67a>
 800d124:	4615      	mov	r5, r2
 800d126:	e7f4      	b.n	800d112 <_dtoa_r+0x5d2>
 800d128:	4b05      	ldr	r3, [pc, #20]	; (800d140 <_dtoa_r+0x600>)
 800d12a:	f7f3 fa8d 	bl	8000648 <__aeabi_dmul>
 800d12e:	e9cd 0100 	strd	r0, r1, [sp]
 800d132:	e7bc      	b.n	800d0ae <_dtoa_r+0x56e>
 800d134:	0800ef00 	.word	0x0800ef00
 800d138:	0800eed8 	.word	0x0800eed8
 800d13c:	3ff00000 	.word	0x3ff00000
 800d140:	40240000 	.word	0x40240000
 800d144:	401c0000 	.word	0x401c0000
 800d148:	40140000 	.word	0x40140000
 800d14c:	3fe00000 	.word	0x3fe00000
 800d150:	e9dd 6700 	ldrd	r6, r7, [sp]
 800d154:	465d      	mov	r5, fp
 800d156:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800d15a:	4630      	mov	r0, r6
 800d15c:	4639      	mov	r1, r7
 800d15e:	f7f3 fb9d 	bl	800089c <__aeabi_ddiv>
 800d162:	f7f3 fd21 	bl	8000ba8 <__aeabi_d2iz>
 800d166:	4680      	mov	r8, r0
 800d168:	f7f3 fa04 	bl	8000574 <__aeabi_i2d>
 800d16c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800d170:	f7f3 fa6a 	bl	8000648 <__aeabi_dmul>
 800d174:	4602      	mov	r2, r0
 800d176:	460b      	mov	r3, r1
 800d178:	4630      	mov	r0, r6
 800d17a:	4639      	mov	r1, r7
 800d17c:	f108 0630 	add.w	r6, r8, #48	; 0x30
 800d180:	f7f3 f8aa 	bl	80002d8 <__aeabi_dsub>
 800d184:	f805 6b01 	strb.w	r6, [r5], #1
 800d188:	eba5 060b 	sub.w	r6, r5, fp
 800d18c:	45b1      	cmp	r9, r6
 800d18e:	4602      	mov	r2, r0
 800d190:	460b      	mov	r3, r1
 800d192:	d139      	bne.n	800d208 <_dtoa_r+0x6c8>
 800d194:	f7f3 f8a2 	bl	80002dc <__adddf3>
 800d198:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800d19c:	4606      	mov	r6, r0
 800d19e:	460f      	mov	r7, r1
 800d1a0:	f7f3 fce2 	bl	8000b68 <__aeabi_dcmpgt>
 800d1a4:	b9c8      	cbnz	r0, 800d1da <_dtoa_r+0x69a>
 800d1a6:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800d1aa:	4630      	mov	r0, r6
 800d1ac:	4639      	mov	r1, r7
 800d1ae:	f7f3 fcb3 	bl	8000b18 <__aeabi_dcmpeq>
 800d1b2:	b110      	cbz	r0, 800d1ba <_dtoa_r+0x67a>
 800d1b4:	f018 0f01 	tst.w	r8, #1
 800d1b8:	d10f      	bne.n	800d1da <_dtoa_r+0x69a>
 800d1ba:	9904      	ldr	r1, [sp, #16]
 800d1bc:	4620      	mov	r0, r4
 800d1be:	f000 fcaa 	bl	800db16 <_Bfree>
 800d1c2:	2300      	movs	r3, #0
 800d1c4:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800d1c6:	702b      	strb	r3, [r5, #0]
 800d1c8:	f10a 0301 	add.w	r3, sl, #1
 800d1cc:	6013      	str	r3, [r2, #0]
 800d1ce:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800d1d0:	2b00      	cmp	r3, #0
 800d1d2:	f000 8241 	beq.w	800d658 <_dtoa_r+0xb18>
 800d1d6:	601d      	str	r5, [r3, #0]
 800d1d8:	e23e      	b.n	800d658 <_dtoa_r+0xb18>
 800d1da:	f8cd a020 	str.w	sl, [sp, #32]
 800d1de:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 800d1e2:	2a39      	cmp	r2, #57	; 0x39
 800d1e4:	f105 33ff 	add.w	r3, r5, #4294967295	; 0xffffffff
 800d1e8:	d108      	bne.n	800d1fc <_dtoa_r+0x6bc>
 800d1ea:	459b      	cmp	fp, r3
 800d1ec:	d10a      	bne.n	800d204 <_dtoa_r+0x6c4>
 800d1ee:	9b08      	ldr	r3, [sp, #32]
 800d1f0:	3301      	adds	r3, #1
 800d1f2:	9308      	str	r3, [sp, #32]
 800d1f4:	2330      	movs	r3, #48	; 0x30
 800d1f6:	f88b 3000 	strb.w	r3, [fp]
 800d1fa:	465b      	mov	r3, fp
 800d1fc:	781a      	ldrb	r2, [r3, #0]
 800d1fe:	3201      	adds	r2, #1
 800d200:	701a      	strb	r2, [r3, #0]
 800d202:	e78c      	b.n	800d11e <_dtoa_r+0x5de>
 800d204:	461d      	mov	r5, r3
 800d206:	e7ea      	b.n	800d1de <_dtoa_r+0x69e>
 800d208:	2200      	movs	r2, #0
 800d20a:	4b9b      	ldr	r3, [pc, #620]	; (800d478 <_dtoa_r+0x938>)
 800d20c:	f7f3 fa1c 	bl	8000648 <__aeabi_dmul>
 800d210:	2200      	movs	r2, #0
 800d212:	2300      	movs	r3, #0
 800d214:	4606      	mov	r6, r0
 800d216:	460f      	mov	r7, r1
 800d218:	f7f3 fc7e 	bl	8000b18 <__aeabi_dcmpeq>
 800d21c:	2800      	cmp	r0, #0
 800d21e:	d09a      	beq.n	800d156 <_dtoa_r+0x616>
 800d220:	e7cb      	b.n	800d1ba <_dtoa_r+0x67a>
 800d222:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800d224:	2a00      	cmp	r2, #0
 800d226:	f000 808b 	beq.w	800d340 <_dtoa_r+0x800>
 800d22a:	9a06      	ldr	r2, [sp, #24]
 800d22c:	2a01      	cmp	r2, #1
 800d22e:	dc6e      	bgt.n	800d30e <_dtoa_r+0x7ce>
 800d230:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 800d232:	2a00      	cmp	r2, #0
 800d234:	d067      	beq.n	800d306 <_dtoa_r+0x7c6>
 800d236:	f203 4333 	addw	r3, r3, #1075	; 0x433
 800d23a:	9f07      	ldr	r7, [sp, #28]
 800d23c:	9d05      	ldr	r5, [sp, #20]
 800d23e:	9a05      	ldr	r2, [sp, #20]
 800d240:	2101      	movs	r1, #1
 800d242:	441a      	add	r2, r3
 800d244:	4620      	mov	r0, r4
 800d246:	9205      	str	r2, [sp, #20]
 800d248:	4498      	add	r8, r3
 800d24a:	f000 fd04 	bl	800dc56 <__i2b>
 800d24e:	4606      	mov	r6, r0
 800d250:	2d00      	cmp	r5, #0
 800d252:	dd0c      	ble.n	800d26e <_dtoa_r+0x72e>
 800d254:	f1b8 0f00 	cmp.w	r8, #0
 800d258:	dd09      	ble.n	800d26e <_dtoa_r+0x72e>
 800d25a:	4545      	cmp	r5, r8
 800d25c:	9a05      	ldr	r2, [sp, #20]
 800d25e:	462b      	mov	r3, r5
 800d260:	bfa8      	it	ge
 800d262:	4643      	movge	r3, r8
 800d264:	1ad2      	subs	r2, r2, r3
 800d266:	9205      	str	r2, [sp, #20]
 800d268:	1aed      	subs	r5, r5, r3
 800d26a:	eba8 0803 	sub.w	r8, r8, r3
 800d26e:	9b07      	ldr	r3, [sp, #28]
 800d270:	b1eb      	cbz	r3, 800d2ae <_dtoa_r+0x76e>
 800d272:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800d274:	2b00      	cmp	r3, #0
 800d276:	d067      	beq.n	800d348 <_dtoa_r+0x808>
 800d278:	b18f      	cbz	r7, 800d29e <_dtoa_r+0x75e>
 800d27a:	4631      	mov	r1, r6
 800d27c:	463a      	mov	r2, r7
 800d27e:	4620      	mov	r0, r4
 800d280:	f000 fd88 	bl	800dd94 <__pow5mult>
 800d284:	9a04      	ldr	r2, [sp, #16]
 800d286:	4601      	mov	r1, r0
 800d288:	4606      	mov	r6, r0
 800d28a:	4620      	mov	r0, r4
 800d28c:	f000 fcec 	bl	800dc68 <__multiply>
 800d290:	9904      	ldr	r1, [sp, #16]
 800d292:	9008      	str	r0, [sp, #32]
 800d294:	4620      	mov	r0, r4
 800d296:	f000 fc3e 	bl	800db16 <_Bfree>
 800d29a:	9b08      	ldr	r3, [sp, #32]
 800d29c:	9304      	str	r3, [sp, #16]
 800d29e:	9b07      	ldr	r3, [sp, #28]
 800d2a0:	1bda      	subs	r2, r3, r7
 800d2a2:	d004      	beq.n	800d2ae <_dtoa_r+0x76e>
 800d2a4:	9904      	ldr	r1, [sp, #16]
 800d2a6:	4620      	mov	r0, r4
 800d2a8:	f000 fd74 	bl	800dd94 <__pow5mult>
 800d2ac:	9004      	str	r0, [sp, #16]
 800d2ae:	2101      	movs	r1, #1
 800d2b0:	4620      	mov	r0, r4
 800d2b2:	f000 fcd0 	bl	800dc56 <__i2b>
 800d2b6:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800d2b8:	4607      	mov	r7, r0
 800d2ba:	2b00      	cmp	r3, #0
 800d2bc:	f000 81d0 	beq.w	800d660 <_dtoa_r+0xb20>
 800d2c0:	461a      	mov	r2, r3
 800d2c2:	4601      	mov	r1, r0
 800d2c4:	4620      	mov	r0, r4
 800d2c6:	f000 fd65 	bl	800dd94 <__pow5mult>
 800d2ca:	9b06      	ldr	r3, [sp, #24]
 800d2cc:	2b01      	cmp	r3, #1
 800d2ce:	4607      	mov	r7, r0
 800d2d0:	dc40      	bgt.n	800d354 <_dtoa_r+0x814>
 800d2d2:	9b00      	ldr	r3, [sp, #0]
 800d2d4:	2b00      	cmp	r3, #0
 800d2d6:	d139      	bne.n	800d34c <_dtoa_r+0x80c>
 800d2d8:	9b01      	ldr	r3, [sp, #4]
 800d2da:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800d2de:	2b00      	cmp	r3, #0
 800d2e0:	d136      	bne.n	800d350 <_dtoa_r+0x810>
 800d2e2:	9b01      	ldr	r3, [sp, #4]
 800d2e4:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800d2e8:	0d1b      	lsrs	r3, r3, #20
 800d2ea:	051b      	lsls	r3, r3, #20
 800d2ec:	b12b      	cbz	r3, 800d2fa <_dtoa_r+0x7ba>
 800d2ee:	9b05      	ldr	r3, [sp, #20]
 800d2f0:	3301      	adds	r3, #1
 800d2f2:	9305      	str	r3, [sp, #20]
 800d2f4:	f108 0801 	add.w	r8, r8, #1
 800d2f8:	2301      	movs	r3, #1
 800d2fa:	9307      	str	r3, [sp, #28]
 800d2fc:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800d2fe:	2b00      	cmp	r3, #0
 800d300:	d12a      	bne.n	800d358 <_dtoa_r+0x818>
 800d302:	2001      	movs	r0, #1
 800d304:	e030      	b.n	800d368 <_dtoa_r+0x828>
 800d306:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800d308:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 800d30c:	e795      	b.n	800d23a <_dtoa_r+0x6fa>
 800d30e:	9b07      	ldr	r3, [sp, #28]
 800d310:	f109 37ff 	add.w	r7, r9, #4294967295	; 0xffffffff
 800d314:	42bb      	cmp	r3, r7
 800d316:	bfbf      	itttt	lt
 800d318:	9b07      	ldrlt	r3, [sp, #28]
 800d31a:	9707      	strlt	r7, [sp, #28]
 800d31c:	1afa      	sublt	r2, r7, r3
 800d31e:	9b0e      	ldrlt	r3, [sp, #56]	; 0x38
 800d320:	bfbb      	ittet	lt
 800d322:	189b      	addlt	r3, r3, r2
 800d324:	930e      	strlt	r3, [sp, #56]	; 0x38
 800d326:	1bdf      	subge	r7, r3, r7
 800d328:	2700      	movlt	r7, #0
 800d32a:	f1b9 0f00 	cmp.w	r9, #0
 800d32e:	bfb5      	itete	lt
 800d330:	9b05      	ldrlt	r3, [sp, #20]
 800d332:	9d05      	ldrge	r5, [sp, #20]
 800d334:	eba3 0509 	sublt.w	r5, r3, r9
 800d338:	464b      	movge	r3, r9
 800d33a:	bfb8      	it	lt
 800d33c:	2300      	movlt	r3, #0
 800d33e:	e77e      	b.n	800d23e <_dtoa_r+0x6fe>
 800d340:	9f07      	ldr	r7, [sp, #28]
 800d342:	9d05      	ldr	r5, [sp, #20]
 800d344:	9e0a      	ldr	r6, [sp, #40]	; 0x28
 800d346:	e783      	b.n	800d250 <_dtoa_r+0x710>
 800d348:	9a07      	ldr	r2, [sp, #28]
 800d34a:	e7ab      	b.n	800d2a4 <_dtoa_r+0x764>
 800d34c:	2300      	movs	r3, #0
 800d34e:	e7d4      	b.n	800d2fa <_dtoa_r+0x7ba>
 800d350:	9b00      	ldr	r3, [sp, #0]
 800d352:	e7d2      	b.n	800d2fa <_dtoa_r+0x7ba>
 800d354:	2300      	movs	r3, #0
 800d356:	9307      	str	r3, [sp, #28]
 800d358:	693b      	ldr	r3, [r7, #16]
 800d35a:	eb07 0383 	add.w	r3, r7, r3, lsl #2
 800d35e:	6918      	ldr	r0, [r3, #16]
 800d360:	f000 fc2b 	bl	800dbba <__hi0bits>
 800d364:	f1c0 0020 	rsb	r0, r0, #32
 800d368:	4440      	add	r0, r8
 800d36a:	f010 001f 	ands.w	r0, r0, #31
 800d36e:	d047      	beq.n	800d400 <_dtoa_r+0x8c0>
 800d370:	f1c0 0320 	rsb	r3, r0, #32
 800d374:	2b04      	cmp	r3, #4
 800d376:	dd3b      	ble.n	800d3f0 <_dtoa_r+0x8b0>
 800d378:	9b05      	ldr	r3, [sp, #20]
 800d37a:	f1c0 001c 	rsb	r0, r0, #28
 800d37e:	4403      	add	r3, r0
 800d380:	9305      	str	r3, [sp, #20]
 800d382:	4405      	add	r5, r0
 800d384:	4480      	add	r8, r0
 800d386:	9b05      	ldr	r3, [sp, #20]
 800d388:	2b00      	cmp	r3, #0
 800d38a:	dd05      	ble.n	800d398 <_dtoa_r+0x858>
 800d38c:	461a      	mov	r2, r3
 800d38e:	9904      	ldr	r1, [sp, #16]
 800d390:	4620      	mov	r0, r4
 800d392:	f000 fd4d 	bl	800de30 <__lshift>
 800d396:	9004      	str	r0, [sp, #16]
 800d398:	f1b8 0f00 	cmp.w	r8, #0
 800d39c:	dd05      	ble.n	800d3aa <_dtoa_r+0x86a>
 800d39e:	4639      	mov	r1, r7
 800d3a0:	4642      	mov	r2, r8
 800d3a2:	4620      	mov	r0, r4
 800d3a4:	f000 fd44 	bl	800de30 <__lshift>
 800d3a8:	4607      	mov	r7, r0
 800d3aa:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800d3ac:	b353      	cbz	r3, 800d404 <_dtoa_r+0x8c4>
 800d3ae:	4639      	mov	r1, r7
 800d3b0:	9804      	ldr	r0, [sp, #16]
 800d3b2:	f000 fd91 	bl	800ded8 <__mcmp>
 800d3b6:	2800      	cmp	r0, #0
 800d3b8:	da24      	bge.n	800d404 <_dtoa_r+0x8c4>
 800d3ba:	2300      	movs	r3, #0
 800d3bc:	220a      	movs	r2, #10
 800d3be:	9904      	ldr	r1, [sp, #16]
 800d3c0:	4620      	mov	r0, r4
 800d3c2:	f000 fbbf 	bl	800db44 <__multadd>
 800d3c6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800d3c8:	9004      	str	r0, [sp, #16]
 800d3ca:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
 800d3ce:	2b00      	cmp	r3, #0
 800d3d0:	f000 814d 	beq.w	800d66e <_dtoa_r+0xb2e>
 800d3d4:	2300      	movs	r3, #0
 800d3d6:	4631      	mov	r1, r6
 800d3d8:	220a      	movs	r2, #10
 800d3da:	4620      	mov	r0, r4
 800d3dc:	f000 fbb2 	bl	800db44 <__multadd>
 800d3e0:	9b02      	ldr	r3, [sp, #8]
 800d3e2:	2b00      	cmp	r3, #0
 800d3e4:	4606      	mov	r6, r0
 800d3e6:	dc4f      	bgt.n	800d488 <_dtoa_r+0x948>
 800d3e8:	9b06      	ldr	r3, [sp, #24]
 800d3ea:	2b02      	cmp	r3, #2
 800d3ec:	dd4c      	ble.n	800d488 <_dtoa_r+0x948>
 800d3ee:	e011      	b.n	800d414 <_dtoa_r+0x8d4>
 800d3f0:	d0c9      	beq.n	800d386 <_dtoa_r+0x846>
 800d3f2:	9a05      	ldr	r2, [sp, #20]
 800d3f4:	331c      	adds	r3, #28
 800d3f6:	441a      	add	r2, r3
 800d3f8:	9205      	str	r2, [sp, #20]
 800d3fa:	441d      	add	r5, r3
 800d3fc:	4498      	add	r8, r3
 800d3fe:	e7c2      	b.n	800d386 <_dtoa_r+0x846>
 800d400:	4603      	mov	r3, r0
 800d402:	e7f6      	b.n	800d3f2 <_dtoa_r+0x8b2>
 800d404:	f1b9 0f00 	cmp.w	r9, #0
 800d408:	dc38      	bgt.n	800d47c <_dtoa_r+0x93c>
 800d40a:	9b06      	ldr	r3, [sp, #24]
 800d40c:	2b02      	cmp	r3, #2
 800d40e:	dd35      	ble.n	800d47c <_dtoa_r+0x93c>
 800d410:	f8cd 9008 	str.w	r9, [sp, #8]
 800d414:	9b02      	ldr	r3, [sp, #8]
 800d416:	b963      	cbnz	r3, 800d432 <_dtoa_r+0x8f2>
 800d418:	4639      	mov	r1, r7
 800d41a:	2205      	movs	r2, #5
 800d41c:	4620      	mov	r0, r4
 800d41e:	f000 fb91 	bl	800db44 <__multadd>
 800d422:	4601      	mov	r1, r0
 800d424:	4607      	mov	r7, r0
 800d426:	9804      	ldr	r0, [sp, #16]
 800d428:	f000 fd56 	bl	800ded8 <__mcmp>
 800d42c:	2800      	cmp	r0, #0
 800d42e:	f73f adcc 	bgt.w	800cfca <_dtoa_r+0x48a>
 800d432:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800d434:	465d      	mov	r5, fp
 800d436:	ea6f 0a03 	mvn.w	sl, r3
 800d43a:	f04f 0900 	mov.w	r9, #0
 800d43e:	4639      	mov	r1, r7
 800d440:	4620      	mov	r0, r4
 800d442:	f000 fb68 	bl	800db16 <_Bfree>
 800d446:	2e00      	cmp	r6, #0
 800d448:	f43f aeb7 	beq.w	800d1ba <_dtoa_r+0x67a>
 800d44c:	f1b9 0f00 	cmp.w	r9, #0
 800d450:	d005      	beq.n	800d45e <_dtoa_r+0x91e>
 800d452:	45b1      	cmp	r9, r6
 800d454:	d003      	beq.n	800d45e <_dtoa_r+0x91e>
 800d456:	4649      	mov	r1, r9
 800d458:	4620      	mov	r0, r4
 800d45a:	f000 fb5c 	bl	800db16 <_Bfree>
 800d45e:	4631      	mov	r1, r6
 800d460:	4620      	mov	r0, r4
 800d462:	f000 fb58 	bl	800db16 <_Bfree>
 800d466:	e6a8      	b.n	800d1ba <_dtoa_r+0x67a>
 800d468:	2700      	movs	r7, #0
 800d46a:	463e      	mov	r6, r7
 800d46c:	e7e1      	b.n	800d432 <_dtoa_r+0x8f2>
 800d46e:	f8dd a020 	ldr.w	sl, [sp, #32]
 800d472:	463e      	mov	r6, r7
 800d474:	e5a9      	b.n	800cfca <_dtoa_r+0x48a>
 800d476:	bf00      	nop
 800d478:	40240000 	.word	0x40240000
 800d47c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800d47e:	f8cd 9008 	str.w	r9, [sp, #8]
 800d482:	2b00      	cmp	r3, #0
 800d484:	f000 80fa 	beq.w	800d67c <_dtoa_r+0xb3c>
 800d488:	2d00      	cmp	r5, #0
 800d48a:	dd05      	ble.n	800d498 <_dtoa_r+0x958>
 800d48c:	4631      	mov	r1, r6
 800d48e:	462a      	mov	r2, r5
 800d490:	4620      	mov	r0, r4
 800d492:	f000 fccd 	bl	800de30 <__lshift>
 800d496:	4606      	mov	r6, r0
 800d498:	9b07      	ldr	r3, [sp, #28]
 800d49a:	2b00      	cmp	r3, #0
 800d49c:	d04c      	beq.n	800d538 <_dtoa_r+0x9f8>
 800d49e:	6871      	ldr	r1, [r6, #4]
 800d4a0:	4620      	mov	r0, r4
 800d4a2:	f000 fb04 	bl	800daae <_Balloc>
 800d4a6:	6932      	ldr	r2, [r6, #16]
 800d4a8:	3202      	adds	r2, #2
 800d4aa:	4605      	mov	r5, r0
 800d4ac:	0092      	lsls	r2, r2, #2
 800d4ae:	f106 010c 	add.w	r1, r6, #12
 800d4b2:	300c      	adds	r0, #12
 800d4b4:	f000 faf0 	bl	800da98 <memcpy>
 800d4b8:	2201      	movs	r2, #1
 800d4ba:	4629      	mov	r1, r5
 800d4bc:	4620      	mov	r0, r4
 800d4be:	f000 fcb7 	bl	800de30 <__lshift>
 800d4c2:	9b00      	ldr	r3, [sp, #0]
 800d4c4:	f8cd b014 	str.w	fp, [sp, #20]
 800d4c8:	f003 0301 	and.w	r3, r3, #1
 800d4cc:	46b1      	mov	r9, r6
 800d4ce:	9307      	str	r3, [sp, #28]
 800d4d0:	4606      	mov	r6, r0
 800d4d2:	4639      	mov	r1, r7
 800d4d4:	9804      	ldr	r0, [sp, #16]
 800d4d6:	f7ff faa5 	bl	800ca24 <quorem>
 800d4da:	4649      	mov	r1, r9
 800d4dc:	4605      	mov	r5, r0
 800d4de:	f100 0830 	add.w	r8, r0, #48	; 0x30
 800d4e2:	9804      	ldr	r0, [sp, #16]
 800d4e4:	f000 fcf8 	bl	800ded8 <__mcmp>
 800d4e8:	4632      	mov	r2, r6
 800d4ea:	9000      	str	r0, [sp, #0]
 800d4ec:	4639      	mov	r1, r7
 800d4ee:	4620      	mov	r0, r4
 800d4f0:	f000 fd0c 	bl	800df0c <__mdiff>
 800d4f4:	68c3      	ldr	r3, [r0, #12]
 800d4f6:	4602      	mov	r2, r0
 800d4f8:	bb03      	cbnz	r3, 800d53c <_dtoa_r+0x9fc>
 800d4fa:	4601      	mov	r1, r0
 800d4fc:	9008      	str	r0, [sp, #32]
 800d4fe:	9804      	ldr	r0, [sp, #16]
 800d500:	f000 fcea 	bl	800ded8 <__mcmp>
 800d504:	9a08      	ldr	r2, [sp, #32]
 800d506:	4603      	mov	r3, r0
 800d508:	4611      	mov	r1, r2
 800d50a:	4620      	mov	r0, r4
 800d50c:	9308      	str	r3, [sp, #32]
 800d50e:	f000 fb02 	bl	800db16 <_Bfree>
 800d512:	9b08      	ldr	r3, [sp, #32]
 800d514:	b9a3      	cbnz	r3, 800d540 <_dtoa_r+0xa00>
 800d516:	9a06      	ldr	r2, [sp, #24]
 800d518:	b992      	cbnz	r2, 800d540 <_dtoa_r+0xa00>
 800d51a:	9a07      	ldr	r2, [sp, #28]
 800d51c:	b982      	cbnz	r2, 800d540 <_dtoa_r+0xa00>
 800d51e:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 800d522:	d029      	beq.n	800d578 <_dtoa_r+0xa38>
 800d524:	9b00      	ldr	r3, [sp, #0]
 800d526:	2b00      	cmp	r3, #0
 800d528:	dd01      	ble.n	800d52e <_dtoa_r+0x9ee>
 800d52a:	f105 0831 	add.w	r8, r5, #49	; 0x31
 800d52e:	9b05      	ldr	r3, [sp, #20]
 800d530:	1c5d      	adds	r5, r3, #1
 800d532:	f883 8000 	strb.w	r8, [r3]
 800d536:	e782      	b.n	800d43e <_dtoa_r+0x8fe>
 800d538:	4630      	mov	r0, r6
 800d53a:	e7c2      	b.n	800d4c2 <_dtoa_r+0x982>
 800d53c:	2301      	movs	r3, #1
 800d53e:	e7e3      	b.n	800d508 <_dtoa_r+0x9c8>
 800d540:	9a00      	ldr	r2, [sp, #0]
 800d542:	2a00      	cmp	r2, #0
 800d544:	db04      	blt.n	800d550 <_dtoa_r+0xa10>
 800d546:	d125      	bne.n	800d594 <_dtoa_r+0xa54>
 800d548:	9a06      	ldr	r2, [sp, #24]
 800d54a:	bb1a      	cbnz	r2, 800d594 <_dtoa_r+0xa54>
 800d54c:	9a07      	ldr	r2, [sp, #28]
 800d54e:	bb0a      	cbnz	r2, 800d594 <_dtoa_r+0xa54>
 800d550:	2b00      	cmp	r3, #0
 800d552:	ddec      	ble.n	800d52e <_dtoa_r+0x9ee>
 800d554:	2201      	movs	r2, #1
 800d556:	9904      	ldr	r1, [sp, #16]
 800d558:	4620      	mov	r0, r4
 800d55a:	f000 fc69 	bl	800de30 <__lshift>
 800d55e:	4639      	mov	r1, r7
 800d560:	9004      	str	r0, [sp, #16]
 800d562:	f000 fcb9 	bl	800ded8 <__mcmp>
 800d566:	2800      	cmp	r0, #0
 800d568:	dc03      	bgt.n	800d572 <_dtoa_r+0xa32>
 800d56a:	d1e0      	bne.n	800d52e <_dtoa_r+0x9ee>
 800d56c:	f018 0f01 	tst.w	r8, #1
 800d570:	d0dd      	beq.n	800d52e <_dtoa_r+0x9ee>
 800d572:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 800d576:	d1d8      	bne.n	800d52a <_dtoa_r+0x9ea>
 800d578:	9b05      	ldr	r3, [sp, #20]
 800d57a:	9a05      	ldr	r2, [sp, #20]
 800d57c:	1c5d      	adds	r5, r3, #1
 800d57e:	2339      	movs	r3, #57	; 0x39
 800d580:	7013      	strb	r3, [r2, #0]
 800d582:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 800d586:	2b39      	cmp	r3, #57	; 0x39
 800d588:	f105 32ff 	add.w	r2, r5, #4294967295	; 0xffffffff
 800d58c:	d04f      	beq.n	800d62e <_dtoa_r+0xaee>
 800d58e:	3301      	adds	r3, #1
 800d590:	7013      	strb	r3, [r2, #0]
 800d592:	e754      	b.n	800d43e <_dtoa_r+0x8fe>
 800d594:	9a05      	ldr	r2, [sp, #20]
 800d596:	2b00      	cmp	r3, #0
 800d598:	f102 0501 	add.w	r5, r2, #1
 800d59c:	dd06      	ble.n	800d5ac <_dtoa_r+0xa6c>
 800d59e:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 800d5a2:	d0e9      	beq.n	800d578 <_dtoa_r+0xa38>
 800d5a4:	f108 0801 	add.w	r8, r8, #1
 800d5a8:	9b05      	ldr	r3, [sp, #20]
 800d5aa:	e7c2      	b.n	800d532 <_dtoa_r+0x9f2>
 800d5ac:	9a02      	ldr	r2, [sp, #8]
 800d5ae:	f805 8c01 	strb.w	r8, [r5, #-1]
 800d5b2:	eba5 030b 	sub.w	r3, r5, fp
 800d5b6:	4293      	cmp	r3, r2
 800d5b8:	d021      	beq.n	800d5fe <_dtoa_r+0xabe>
 800d5ba:	2300      	movs	r3, #0
 800d5bc:	220a      	movs	r2, #10
 800d5be:	9904      	ldr	r1, [sp, #16]
 800d5c0:	4620      	mov	r0, r4
 800d5c2:	f000 fabf 	bl	800db44 <__multadd>
 800d5c6:	45b1      	cmp	r9, r6
 800d5c8:	9004      	str	r0, [sp, #16]
 800d5ca:	f04f 0300 	mov.w	r3, #0
 800d5ce:	f04f 020a 	mov.w	r2, #10
 800d5d2:	4649      	mov	r1, r9
 800d5d4:	4620      	mov	r0, r4
 800d5d6:	d105      	bne.n	800d5e4 <_dtoa_r+0xaa4>
 800d5d8:	f000 fab4 	bl	800db44 <__multadd>
 800d5dc:	4681      	mov	r9, r0
 800d5de:	4606      	mov	r6, r0
 800d5e0:	9505      	str	r5, [sp, #20]
 800d5e2:	e776      	b.n	800d4d2 <_dtoa_r+0x992>
 800d5e4:	f000 faae 	bl	800db44 <__multadd>
 800d5e8:	4631      	mov	r1, r6
 800d5ea:	4681      	mov	r9, r0
 800d5ec:	2300      	movs	r3, #0
 800d5ee:	220a      	movs	r2, #10
 800d5f0:	4620      	mov	r0, r4
 800d5f2:	f000 faa7 	bl	800db44 <__multadd>
 800d5f6:	4606      	mov	r6, r0
 800d5f8:	e7f2      	b.n	800d5e0 <_dtoa_r+0xaa0>
 800d5fa:	f04f 0900 	mov.w	r9, #0
 800d5fe:	2201      	movs	r2, #1
 800d600:	9904      	ldr	r1, [sp, #16]
 800d602:	4620      	mov	r0, r4
 800d604:	f000 fc14 	bl	800de30 <__lshift>
 800d608:	4639      	mov	r1, r7
 800d60a:	9004      	str	r0, [sp, #16]
 800d60c:	f000 fc64 	bl	800ded8 <__mcmp>
 800d610:	2800      	cmp	r0, #0
 800d612:	dcb6      	bgt.n	800d582 <_dtoa_r+0xa42>
 800d614:	d102      	bne.n	800d61c <_dtoa_r+0xadc>
 800d616:	f018 0f01 	tst.w	r8, #1
 800d61a:	d1b2      	bne.n	800d582 <_dtoa_r+0xa42>
 800d61c:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 800d620:	2b30      	cmp	r3, #48	; 0x30
 800d622:	f105 32ff 	add.w	r2, r5, #4294967295	; 0xffffffff
 800d626:	f47f af0a 	bne.w	800d43e <_dtoa_r+0x8fe>
 800d62a:	4615      	mov	r5, r2
 800d62c:	e7f6      	b.n	800d61c <_dtoa_r+0xadc>
 800d62e:	4593      	cmp	fp, r2
 800d630:	d105      	bne.n	800d63e <_dtoa_r+0xafe>
 800d632:	2331      	movs	r3, #49	; 0x31
 800d634:	f10a 0a01 	add.w	sl, sl, #1
 800d638:	f88b 3000 	strb.w	r3, [fp]
 800d63c:	e6ff      	b.n	800d43e <_dtoa_r+0x8fe>
 800d63e:	4615      	mov	r5, r2
 800d640:	e79f      	b.n	800d582 <_dtoa_r+0xa42>
 800d642:	f8df b064 	ldr.w	fp, [pc, #100]	; 800d6a8 <_dtoa_r+0xb68>
 800d646:	e007      	b.n	800d658 <_dtoa_r+0xb18>
 800d648:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800d64a:	f8df b060 	ldr.w	fp, [pc, #96]	; 800d6ac <_dtoa_r+0xb6c>
 800d64e:	b11b      	cbz	r3, 800d658 <_dtoa_r+0xb18>
 800d650:	f10b 0308 	add.w	r3, fp, #8
 800d654:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800d656:	6013      	str	r3, [r2, #0]
 800d658:	4658      	mov	r0, fp
 800d65a:	b017      	add	sp, #92	; 0x5c
 800d65c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d660:	9b06      	ldr	r3, [sp, #24]
 800d662:	2b01      	cmp	r3, #1
 800d664:	f77f ae35 	ble.w	800d2d2 <_dtoa_r+0x792>
 800d668:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800d66a:	9307      	str	r3, [sp, #28]
 800d66c:	e649      	b.n	800d302 <_dtoa_r+0x7c2>
 800d66e:	9b02      	ldr	r3, [sp, #8]
 800d670:	2b00      	cmp	r3, #0
 800d672:	dc03      	bgt.n	800d67c <_dtoa_r+0xb3c>
 800d674:	9b06      	ldr	r3, [sp, #24]
 800d676:	2b02      	cmp	r3, #2
 800d678:	f73f aecc 	bgt.w	800d414 <_dtoa_r+0x8d4>
 800d67c:	465d      	mov	r5, fp
 800d67e:	4639      	mov	r1, r7
 800d680:	9804      	ldr	r0, [sp, #16]
 800d682:	f7ff f9cf 	bl	800ca24 <quorem>
 800d686:	f100 0830 	add.w	r8, r0, #48	; 0x30
 800d68a:	f805 8b01 	strb.w	r8, [r5], #1
 800d68e:	9a02      	ldr	r2, [sp, #8]
 800d690:	eba5 030b 	sub.w	r3, r5, fp
 800d694:	429a      	cmp	r2, r3
 800d696:	ddb0      	ble.n	800d5fa <_dtoa_r+0xaba>
 800d698:	2300      	movs	r3, #0
 800d69a:	220a      	movs	r2, #10
 800d69c:	9904      	ldr	r1, [sp, #16]
 800d69e:	4620      	mov	r0, r4
 800d6a0:	f000 fa50 	bl	800db44 <__multadd>
 800d6a4:	9004      	str	r0, [sp, #16]
 800d6a6:	e7ea      	b.n	800d67e <_dtoa_r+0xb3e>
 800d6a8:	0800ee40 	.word	0x0800ee40
 800d6ac:	0800ee64 	.word	0x0800ee64

0800d6b0 <__sflush_r>:
 800d6b0:	898a      	ldrh	r2, [r1, #12]
 800d6b2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d6b6:	4605      	mov	r5, r0
 800d6b8:	0710      	lsls	r0, r2, #28
 800d6ba:	460c      	mov	r4, r1
 800d6bc:	d458      	bmi.n	800d770 <__sflush_r+0xc0>
 800d6be:	684b      	ldr	r3, [r1, #4]
 800d6c0:	2b00      	cmp	r3, #0
 800d6c2:	dc05      	bgt.n	800d6d0 <__sflush_r+0x20>
 800d6c4:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800d6c6:	2b00      	cmp	r3, #0
 800d6c8:	dc02      	bgt.n	800d6d0 <__sflush_r+0x20>
 800d6ca:	2000      	movs	r0, #0
 800d6cc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d6d0:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800d6d2:	2e00      	cmp	r6, #0
 800d6d4:	d0f9      	beq.n	800d6ca <__sflush_r+0x1a>
 800d6d6:	2300      	movs	r3, #0
 800d6d8:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800d6dc:	682f      	ldr	r7, [r5, #0]
 800d6de:	6a21      	ldr	r1, [r4, #32]
 800d6e0:	602b      	str	r3, [r5, #0]
 800d6e2:	d032      	beq.n	800d74a <__sflush_r+0x9a>
 800d6e4:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800d6e6:	89a3      	ldrh	r3, [r4, #12]
 800d6e8:	075a      	lsls	r2, r3, #29
 800d6ea:	d505      	bpl.n	800d6f8 <__sflush_r+0x48>
 800d6ec:	6863      	ldr	r3, [r4, #4]
 800d6ee:	1ac0      	subs	r0, r0, r3
 800d6f0:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800d6f2:	b10b      	cbz	r3, 800d6f8 <__sflush_r+0x48>
 800d6f4:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800d6f6:	1ac0      	subs	r0, r0, r3
 800d6f8:	2300      	movs	r3, #0
 800d6fa:	4602      	mov	r2, r0
 800d6fc:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800d6fe:	6a21      	ldr	r1, [r4, #32]
 800d700:	4628      	mov	r0, r5
 800d702:	47b0      	blx	r6
 800d704:	1c43      	adds	r3, r0, #1
 800d706:	89a3      	ldrh	r3, [r4, #12]
 800d708:	d106      	bne.n	800d718 <__sflush_r+0x68>
 800d70a:	6829      	ldr	r1, [r5, #0]
 800d70c:	291d      	cmp	r1, #29
 800d70e:	d848      	bhi.n	800d7a2 <__sflush_r+0xf2>
 800d710:	4a29      	ldr	r2, [pc, #164]	; (800d7b8 <__sflush_r+0x108>)
 800d712:	40ca      	lsrs	r2, r1
 800d714:	07d6      	lsls	r6, r2, #31
 800d716:	d544      	bpl.n	800d7a2 <__sflush_r+0xf2>
 800d718:	2200      	movs	r2, #0
 800d71a:	6062      	str	r2, [r4, #4]
 800d71c:	04d9      	lsls	r1, r3, #19
 800d71e:	6922      	ldr	r2, [r4, #16]
 800d720:	6022      	str	r2, [r4, #0]
 800d722:	d504      	bpl.n	800d72e <__sflush_r+0x7e>
 800d724:	1c42      	adds	r2, r0, #1
 800d726:	d101      	bne.n	800d72c <__sflush_r+0x7c>
 800d728:	682b      	ldr	r3, [r5, #0]
 800d72a:	b903      	cbnz	r3, 800d72e <__sflush_r+0x7e>
 800d72c:	6560      	str	r0, [r4, #84]	; 0x54
 800d72e:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800d730:	602f      	str	r7, [r5, #0]
 800d732:	2900      	cmp	r1, #0
 800d734:	d0c9      	beq.n	800d6ca <__sflush_r+0x1a>
 800d736:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800d73a:	4299      	cmp	r1, r3
 800d73c:	d002      	beq.n	800d744 <__sflush_r+0x94>
 800d73e:	4628      	mov	r0, r5
 800d740:	f000 fc9e 	bl	800e080 <_free_r>
 800d744:	2000      	movs	r0, #0
 800d746:	6360      	str	r0, [r4, #52]	; 0x34
 800d748:	e7c0      	b.n	800d6cc <__sflush_r+0x1c>
 800d74a:	2301      	movs	r3, #1
 800d74c:	4628      	mov	r0, r5
 800d74e:	47b0      	blx	r6
 800d750:	1c41      	adds	r1, r0, #1
 800d752:	d1c8      	bne.n	800d6e6 <__sflush_r+0x36>
 800d754:	682b      	ldr	r3, [r5, #0]
 800d756:	2b00      	cmp	r3, #0
 800d758:	d0c5      	beq.n	800d6e6 <__sflush_r+0x36>
 800d75a:	2b1d      	cmp	r3, #29
 800d75c:	d001      	beq.n	800d762 <__sflush_r+0xb2>
 800d75e:	2b16      	cmp	r3, #22
 800d760:	d101      	bne.n	800d766 <__sflush_r+0xb6>
 800d762:	602f      	str	r7, [r5, #0]
 800d764:	e7b1      	b.n	800d6ca <__sflush_r+0x1a>
 800d766:	89a3      	ldrh	r3, [r4, #12]
 800d768:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800d76c:	81a3      	strh	r3, [r4, #12]
 800d76e:	e7ad      	b.n	800d6cc <__sflush_r+0x1c>
 800d770:	690f      	ldr	r7, [r1, #16]
 800d772:	2f00      	cmp	r7, #0
 800d774:	d0a9      	beq.n	800d6ca <__sflush_r+0x1a>
 800d776:	0793      	lsls	r3, r2, #30
 800d778:	680e      	ldr	r6, [r1, #0]
 800d77a:	bf08      	it	eq
 800d77c:	694b      	ldreq	r3, [r1, #20]
 800d77e:	600f      	str	r7, [r1, #0]
 800d780:	bf18      	it	ne
 800d782:	2300      	movne	r3, #0
 800d784:	eba6 0807 	sub.w	r8, r6, r7
 800d788:	608b      	str	r3, [r1, #8]
 800d78a:	f1b8 0f00 	cmp.w	r8, #0
 800d78e:	dd9c      	ble.n	800d6ca <__sflush_r+0x1a>
 800d790:	4643      	mov	r3, r8
 800d792:	463a      	mov	r2, r7
 800d794:	6a21      	ldr	r1, [r4, #32]
 800d796:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800d798:	4628      	mov	r0, r5
 800d79a:	47b0      	blx	r6
 800d79c:	2800      	cmp	r0, #0
 800d79e:	dc06      	bgt.n	800d7ae <__sflush_r+0xfe>
 800d7a0:	89a3      	ldrh	r3, [r4, #12]
 800d7a2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800d7a6:	81a3      	strh	r3, [r4, #12]
 800d7a8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800d7ac:	e78e      	b.n	800d6cc <__sflush_r+0x1c>
 800d7ae:	4407      	add	r7, r0
 800d7b0:	eba8 0800 	sub.w	r8, r8, r0
 800d7b4:	e7e9      	b.n	800d78a <__sflush_r+0xda>
 800d7b6:	bf00      	nop
 800d7b8:	20400001 	.word	0x20400001

0800d7bc <_fflush_r>:
 800d7bc:	b538      	push	{r3, r4, r5, lr}
 800d7be:	690b      	ldr	r3, [r1, #16]
 800d7c0:	4605      	mov	r5, r0
 800d7c2:	460c      	mov	r4, r1
 800d7c4:	b1db      	cbz	r3, 800d7fe <_fflush_r+0x42>
 800d7c6:	b118      	cbz	r0, 800d7d0 <_fflush_r+0x14>
 800d7c8:	6983      	ldr	r3, [r0, #24]
 800d7ca:	b90b      	cbnz	r3, 800d7d0 <_fflush_r+0x14>
 800d7cc:	f000 f860 	bl	800d890 <__sinit>
 800d7d0:	4b0c      	ldr	r3, [pc, #48]	; (800d804 <_fflush_r+0x48>)
 800d7d2:	429c      	cmp	r4, r3
 800d7d4:	d109      	bne.n	800d7ea <_fflush_r+0x2e>
 800d7d6:	686c      	ldr	r4, [r5, #4]
 800d7d8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800d7dc:	b17b      	cbz	r3, 800d7fe <_fflush_r+0x42>
 800d7de:	4621      	mov	r1, r4
 800d7e0:	4628      	mov	r0, r5
 800d7e2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800d7e6:	f7ff bf63 	b.w	800d6b0 <__sflush_r>
 800d7ea:	4b07      	ldr	r3, [pc, #28]	; (800d808 <_fflush_r+0x4c>)
 800d7ec:	429c      	cmp	r4, r3
 800d7ee:	d101      	bne.n	800d7f4 <_fflush_r+0x38>
 800d7f0:	68ac      	ldr	r4, [r5, #8]
 800d7f2:	e7f1      	b.n	800d7d8 <_fflush_r+0x1c>
 800d7f4:	4b05      	ldr	r3, [pc, #20]	; (800d80c <_fflush_r+0x50>)
 800d7f6:	429c      	cmp	r4, r3
 800d7f8:	bf08      	it	eq
 800d7fa:	68ec      	ldreq	r4, [r5, #12]
 800d7fc:	e7ec      	b.n	800d7d8 <_fflush_r+0x1c>
 800d7fe:	2000      	movs	r0, #0
 800d800:	bd38      	pop	{r3, r4, r5, pc}
 800d802:	bf00      	nop
 800d804:	0800ee94 	.word	0x0800ee94
 800d808:	0800eeb4 	.word	0x0800eeb4
 800d80c:	0800ee74 	.word	0x0800ee74

0800d810 <std>:
 800d810:	2300      	movs	r3, #0
 800d812:	b510      	push	{r4, lr}
 800d814:	4604      	mov	r4, r0
 800d816:	e9c0 3300 	strd	r3, r3, [r0]
 800d81a:	6083      	str	r3, [r0, #8]
 800d81c:	8181      	strh	r1, [r0, #12]
 800d81e:	6643      	str	r3, [r0, #100]	; 0x64
 800d820:	81c2      	strh	r2, [r0, #14]
 800d822:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800d826:	6183      	str	r3, [r0, #24]
 800d828:	4619      	mov	r1, r3
 800d82a:	2208      	movs	r2, #8
 800d82c:	305c      	adds	r0, #92	; 0x5c
 800d82e:	f7fe fb2d 	bl	800be8c <memset>
 800d832:	4b05      	ldr	r3, [pc, #20]	; (800d848 <std+0x38>)
 800d834:	6263      	str	r3, [r4, #36]	; 0x24
 800d836:	4b05      	ldr	r3, [pc, #20]	; (800d84c <std+0x3c>)
 800d838:	62a3      	str	r3, [r4, #40]	; 0x28
 800d83a:	4b05      	ldr	r3, [pc, #20]	; (800d850 <std+0x40>)
 800d83c:	62e3      	str	r3, [r4, #44]	; 0x2c
 800d83e:	4b05      	ldr	r3, [pc, #20]	; (800d854 <std+0x44>)
 800d840:	6224      	str	r4, [r4, #32]
 800d842:	6323      	str	r3, [r4, #48]	; 0x30
 800d844:	bd10      	pop	{r4, pc}
 800d846:	bf00      	nop
 800d848:	0800e495 	.word	0x0800e495
 800d84c:	0800e4b7 	.word	0x0800e4b7
 800d850:	0800e4ef 	.word	0x0800e4ef
 800d854:	0800e513 	.word	0x0800e513

0800d858 <_cleanup_r>:
 800d858:	4901      	ldr	r1, [pc, #4]	; (800d860 <_cleanup_r+0x8>)
 800d85a:	f000 b885 	b.w	800d968 <_fwalk_reent>
 800d85e:	bf00      	nop
 800d860:	0800d7bd 	.word	0x0800d7bd

0800d864 <__sfmoreglue>:
 800d864:	b570      	push	{r4, r5, r6, lr}
 800d866:	1e4a      	subs	r2, r1, #1
 800d868:	2568      	movs	r5, #104	; 0x68
 800d86a:	4355      	muls	r5, r2
 800d86c:	460e      	mov	r6, r1
 800d86e:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800d872:	f000 fc53 	bl	800e11c <_malloc_r>
 800d876:	4604      	mov	r4, r0
 800d878:	b140      	cbz	r0, 800d88c <__sfmoreglue+0x28>
 800d87a:	2100      	movs	r1, #0
 800d87c:	e9c0 1600 	strd	r1, r6, [r0]
 800d880:	300c      	adds	r0, #12
 800d882:	60a0      	str	r0, [r4, #8]
 800d884:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800d888:	f7fe fb00 	bl	800be8c <memset>
 800d88c:	4620      	mov	r0, r4
 800d88e:	bd70      	pop	{r4, r5, r6, pc}

0800d890 <__sinit>:
 800d890:	6983      	ldr	r3, [r0, #24]
 800d892:	b510      	push	{r4, lr}
 800d894:	4604      	mov	r4, r0
 800d896:	bb33      	cbnz	r3, 800d8e6 <__sinit+0x56>
 800d898:	e9c0 3312 	strd	r3, r3, [r0, #72]	; 0x48
 800d89c:	6503      	str	r3, [r0, #80]	; 0x50
 800d89e:	4b12      	ldr	r3, [pc, #72]	; (800d8e8 <__sinit+0x58>)
 800d8a0:	4a12      	ldr	r2, [pc, #72]	; (800d8ec <__sinit+0x5c>)
 800d8a2:	681b      	ldr	r3, [r3, #0]
 800d8a4:	6282      	str	r2, [r0, #40]	; 0x28
 800d8a6:	4298      	cmp	r0, r3
 800d8a8:	bf04      	itt	eq
 800d8aa:	2301      	moveq	r3, #1
 800d8ac:	6183      	streq	r3, [r0, #24]
 800d8ae:	f000 f81f 	bl	800d8f0 <__sfp>
 800d8b2:	6060      	str	r0, [r4, #4]
 800d8b4:	4620      	mov	r0, r4
 800d8b6:	f000 f81b 	bl	800d8f0 <__sfp>
 800d8ba:	60a0      	str	r0, [r4, #8]
 800d8bc:	4620      	mov	r0, r4
 800d8be:	f000 f817 	bl	800d8f0 <__sfp>
 800d8c2:	2200      	movs	r2, #0
 800d8c4:	60e0      	str	r0, [r4, #12]
 800d8c6:	2104      	movs	r1, #4
 800d8c8:	6860      	ldr	r0, [r4, #4]
 800d8ca:	f7ff ffa1 	bl	800d810 <std>
 800d8ce:	2201      	movs	r2, #1
 800d8d0:	2109      	movs	r1, #9
 800d8d2:	68a0      	ldr	r0, [r4, #8]
 800d8d4:	f7ff ff9c 	bl	800d810 <std>
 800d8d8:	2202      	movs	r2, #2
 800d8da:	2112      	movs	r1, #18
 800d8dc:	68e0      	ldr	r0, [r4, #12]
 800d8de:	f7ff ff97 	bl	800d810 <std>
 800d8e2:	2301      	movs	r3, #1
 800d8e4:	61a3      	str	r3, [r4, #24]
 800d8e6:	bd10      	pop	{r4, pc}
 800d8e8:	0800ee2c 	.word	0x0800ee2c
 800d8ec:	0800d859 	.word	0x0800d859

0800d8f0 <__sfp>:
 800d8f0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d8f2:	4b1b      	ldr	r3, [pc, #108]	; (800d960 <__sfp+0x70>)
 800d8f4:	681e      	ldr	r6, [r3, #0]
 800d8f6:	69b3      	ldr	r3, [r6, #24]
 800d8f8:	4607      	mov	r7, r0
 800d8fa:	b913      	cbnz	r3, 800d902 <__sfp+0x12>
 800d8fc:	4630      	mov	r0, r6
 800d8fe:	f7ff ffc7 	bl	800d890 <__sinit>
 800d902:	3648      	adds	r6, #72	; 0x48
 800d904:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800d908:	3b01      	subs	r3, #1
 800d90a:	d503      	bpl.n	800d914 <__sfp+0x24>
 800d90c:	6833      	ldr	r3, [r6, #0]
 800d90e:	b133      	cbz	r3, 800d91e <__sfp+0x2e>
 800d910:	6836      	ldr	r6, [r6, #0]
 800d912:	e7f7      	b.n	800d904 <__sfp+0x14>
 800d914:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800d918:	b16d      	cbz	r5, 800d936 <__sfp+0x46>
 800d91a:	3468      	adds	r4, #104	; 0x68
 800d91c:	e7f4      	b.n	800d908 <__sfp+0x18>
 800d91e:	2104      	movs	r1, #4
 800d920:	4638      	mov	r0, r7
 800d922:	f7ff ff9f 	bl	800d864 <__sfmoreglue>
 800d926:	6030      	str	r0, [r6, #0]
 800d928:	2800      	cmp	r0, #0
 800d92a:	d1f1      	bne.n	800d910 <__sfp+0x20>
 800d92c:	230c      	movs	r3, #12
 800d92e:	603b      	str	r3, [r7, #0]
 800d930:	4604      	mov	r4, r0
 800d932:	4620      	mov	r0, r4
 800d934:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800d936:	4b0b      	ldr	r3, [pc, #44]	; (800d964 <__sfp+0x74>)
 800d938:	6665      	str	r5, [r4, #100]	; 0x64
 800d93a:	e9c4 5500 	strd	r5, r5, [r4]
 800d93e:	60a5      	str	r5, [r4, #8]
 800d940:	e9c4 3503 	strd	r3, r5, [r4, #12]
 800d944:	e9c4 5505 	strd	r5, r5, [r4, #20]
 800d948:	2208      	movs	r2, #8
 800d94a:	4629      	mov	r1, r5
 800d94c:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800d950:	f7fe fa9c 	bl	800be8c <memset>
 800d954:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800d958:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800d95c:	e7e9      	b.n	800d932 <__sfp+0x42>
 800d95e:	bf00      	nop
 800d960:	0800ee2c 	.word	0x0800ee2c
 800d964:	ffff0001 	.word	0xffff0001

0800d968 <_fwalk_reent>:
 800d968:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800d96c:	4680      	mov	r8, r0
 800d96e:	4689      	mov	r9, r1
 800d970:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800d974:	2600      	movs	r6, #0
 800d976:	b914      	cbnz	r4, 800d97e <_fwalk_reent+0x16>
 800d978:	4630      	mov	r0, r6
 800d97a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800d97e:	e9d4 7501 	ldrd	r7, r5, [r4, #4]
 800d982:	3f01      	subs	r7, #1
 800d984:	d501      	bpl.n	800d98a <_fwalk_reent+0x22>
 800d986:	6824      	ldr	r4, [r4, #0]
 800d988:	e7f5      	b.n	800d976 <_fwalk_reent+0xe>
 800d98a:	89ab      	ldrh	r3, [r5, #12]
 800d98c:	2b01      	cmp	r3, #1
 800d98e:	d907      	bls.n	800d9a0 <_fwalk_reent+0x38>
 800d990:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800d994:	3301      	adds	r3, #1
 800d996:	d003      	beq.n	800d9a0 <_fwalk_reent+0x38>
 800d998:	4629      	mov	r1, r5
 800d99a:	4640      	mov	r0, r8
 800d99c:	47c8      	blx	r9
 800d99e:	4306      	orrs	r6, r0
 800d9a0:	3568      	adds	r5, #104	; 0x68
 800d9a2:	e7ee      	b.n	800d982 <_fwalk_reent+0x1a>

0800d9a4 <_localeconv_r>:
 800d9a4:	4b04      	ldr	r3, [pc, #16]	; (800d9b8 <_localeconv_r+0x14>)
 800d9a6:	681b      	ldr	r3, [r3, #0]
 800d9a8:	6a18      	ldr	r0, [r3, #32]
 800d9aa:	4b04      	ldr	r3, [pc, #16]	; (800d9bc <_localeconv_r+0x18>)
 800d9ac:	2800      	cmp	r0, #0
 800d9ae:	bf08      	it	eq
 800d9b0:	4618      	moveq	r0, r3
 800d9b2:	30f0      	adds	r0, #240	; 0xf0
 800d9b4:	4770      	bx	lr
 800d9b6:	bf00      	nop
 800d9b8:	20001228 	.word	0x20001228
 800d9bc:	2000128c 	.word	0x2000128c

0800d9c0 <__swhatbuf_r>:
 800d9c0:	b570      	push	{r4, r5, r6, lr}
 800d9c2:	460e      	mov	r6, r1
 800d9c4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800d9c8:	2900      	cmp	r1, #0
 800d9ca:	b096      	sub	sp, #88	; 0x58
 800d9cc:	4614      	mov	r4, r2
 800d9ce:	461d      	mov	r5, r3
 800d9d0:	da07      	bge.n	800d9e2 <__swhatbuf_r+0x22>
 800d9d2:	2300      	movs	r3, #0
 800d9d4:	602b      	str	r3, [r5, #0]
 800d9d6:	89b3      	ldrh	r3, [r6, #12]
 800d9d8:	061a      	lsls	r2, r3, #24
 800d9da:	d410      	bmi.n	800d9fe <__swhatbuf_r+0x3e>
 800d9dc:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800d9e0:	e00e      	b.n	800da00 <__swhatbuf_r+0x40>
 800d9e2:	466a      	mov	r2, sp
 800d9e4:	f000 fdbc 	bl	800e560 <_fstat_r>
 800d9e8:	2800      	cmp	r0, #0
 800d9ea:	dbf2      	blt.n	800d9d2 <__swhatbuf_r+0x12>
 800d9ec:	9a01      	ldr	r2, [sp, #4]
 800d9ee:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800d9f2:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800d9f6:	425a      	negs	r2, r3
 800d9f8:	415a      	adcs	r2, r3
 800d9fa:	602a      	str	r2, [r5, #0]
 800d9fc:	e7ee      	b.n	800d9dc <__swhatbuf_r+0x1c>
 800d9fe:	2340      	movs	r3, #64	; 0x40
 800da00:	2000      	movs	r0, #0
 800da02:	6023      	str	r3, [r4, #0]
 800da04:	b016      	add	sp, #88	; 0x58
 800da06:	bd70      	pop	{r4, r5, r6, pc}

0800da08 <__smakebuf_r>:
 800da08:	898b      	ldrh	r3, [r1, #12]
 800da0a:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800da0c:	079d      	lsls	r5, r3, #30
 800da0e:	4606      	mov	r6, r0
 800da10:	460c      	mov	r4, r1
 800da12:	d507      	bpl.n	800da24 <__smakebuf_r+0x1c>
 800da14:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800da18:	6023      	str	r3, [r4, #0]
 800da1a:	6123      	str	r3, [r4, #16]
 800da1c:	2301      	movs	r3, #1
 800da1e:	6163      	str	r3, [r4, #20]
 800da20:	b002      	add	sp, #8
 800da22:	bd70      	pop	{r4, r5, r6, pc}
 800da24:	ab01      	add	r3, sp, #4
 800da26:	466a      	mov	r2, sp
 800da28:	f7ff ffca 	bl	800d9c0 <__swhatbuf_r>
 800da2c:	9900      	ldr	r1, [sp, #0]
 800da2e:	4605      	mov	r5, r0
 800da30:	4630      	mov	r0, r6
 800da32:	f000 fb73 	bl	800e11c <_malloc_r>
 800da36:	b948      	cbnz	r0, 800da4c <__smakebuf_r+0x44>
 800da38:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800da3c:	059a      	lsls	r2, r3, #22
 800da3e:	d4ef      	bmi.n	800da20 <__smakebuf_r+0x18>
 800da40:	f023 0303 	bic.w	r3, r3, #3
 800da44:	f043 0302 	orr.w	r3, r3, #2
 800da48:	81a3      	strh	r3, [r4, #12]
 800da4a:	e7e3      	b.n	800da14 <__smakebuf_r+0xc>
 800da4c:	4b0d      	ldr	r3, [pc, #52]	; (800da84 <__smakebuf_r+0x7c>)
 800da4e:	62b3      	str	r3, [r6, #40]	; 0x28
 800da50:	89a3      	ldrh	r3, [r4, #12]
 800da52:	6020      	str	r0, [r4, #0]
 800da54:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800da58:	81a3      	strh	r3, [r4, #12]
 800da5a:	9b00      	ldr	r3, [sp, #0]
 800da5c:	6163      	str	r3, [r4, #20]
 800da5e:	9b01      	ldr	r3, [sp, #4]
 800da60:	6120      	str	r0, [r4, #16]
 800da62:	b15b      	cbz	r3, 800da7c <__smakebuf_r+0x74>
 800da64:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800da68:	4630      	mov	r0, r6
 800da6a:	f000 fd8b 	bl	800e584 <_isatty_r>
 800da6e:	b128      	cbz	r0, 800da7c <__smakebuf_r+0x74>
 800da70:	89a3      	ldrh	r3, [r4, #12]
 800da72:	f023 0303 	bic.w	r3, r3, #3
 800da76:	f043 0301 	orr.w	r3, r3, #1
 800da7a:	81a3      	strh	r3, [r4, #12]
 800da7c:	89a3      	ldrh	r3, [r4, #12]
 800da7e:	431d      	orrs	r5, r3
 800da80:	81a5      	strh	r5, [r4, #12]
 800da82:	e7cd      	b.n	800da20 <__smakebuf_r+0x18>
 800da84:	0800d859 	.word	0x0800d859

0800da88 <malloc>:
 800da88:	4b02      	ldr	r3, [pc, #8]	; (800da94 <malloc+0xc>)
 800da8a:	4601      	mov	r1, r0
 800da8c:	6818      	ldr	r0, [r3, #0]
 800da8e:	f000 bb45 	b.w	800e11c <_malloc_r>
 800da92:	bf00      	nop
 800da94:	20001228 	.word	0x20001228

0800da98 <memcpy>:
 800da98:	b510      	push	{r4, lr}
 800da9a:	1e43      	subs	r3, r0, #1
 800da9c:	440a      	add	r2, r1
 800da9e:	4291      	cmp	r1, r2
 800daa0:	d100      	bne.n	800daa4 <memcpy+0xc>
 800daa2:	bd10      	pop	{r4, pc}
 800daa4:	f811 4b01 	ldrb.w	r4, [r1], #1
 800daa8:	f803 4f01 	strb.w	r4, [r3, #1]!
 800daac:	e7f7      	b.n	800da9e <memcpy+0x6>

0800daae <_Balloc>:
 800daae:	b570      	push	{r4, r5, r6, lr}
 800dab0:	6a45      	ldr	r5, [r0, #36]	; 0x24
 800dab2:	4604      	mov	r4, r0
 800dab4:	460e      	mov	r6, r1
 800dab6:	b93d      	cbnz	r5, 800dac8 <_Balloc+0x1a>
 800dab8:	2010      	movs	r0, #16
 800daba:	f7ff ffe5 	bl	800da88 <malloc>
 800dabe:	6260      	str	r0, [r4, #36]	; 0x24
 800dac0:	e9c0 5501 	strd	r5, r5, [r0, #4]
 800dac4:	6005      	str	r5, [r0, #0]
 800dac6:	60c5      	str	r5, [r0, #12]
 800dac8:	6a65      	ldr	r5, [r4, #36]	; 0x24
 800daca:	68eb      	ldr	r3, [r5, #12]
 800dacc:	b183      	cbz	r3, 800daf0 <_Balloc+0x42>
 800dace:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800dad0:	68db      	ldr	r3, [r3, #12]
 800dad2:	f853 0026 	ldr.w	r0, [r3, r6, lsl #2]
 800dad6:	b9b8      	cbnz	r0, 800db08 <_Balloc+0x5a>
 800dad8:	2101      	movs	r1, #1
 800dada:	fa01 f506 	lsl.w	r5, r1, r6
 800dade:	1d6a      	adds	r2, r5, #5
 800dae0:	0092      	lsls	r2, r2, #2
 800dae2:	4620      	mov	r0, r4
 800dae4:	f000 fabe 	bl	800e064 <_calloc_r>
 800dae8:	b160      	cbz	r0, 800db04 <_Balloc+0x56>
 800daea:	e9c0 6501 	strd	r6, r5, [r0, #4]
 800daee:	e00e      	b.n	800db0e <_Balloc+0x60>
 800daf0:	2221      	movs	r2, #33	; 0x21
 800daf2:	2104      	movs	r1, #4
 800daf4:	4620      	mov	r0, r4
 800daf6:	f000 fab5 	bl	800e064 <_calloc_r>
 800dafa:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800dafc:	60e8      	str	r0, [r5, #12]
 800dafe:	68db      	ldr	r3, [r3, #12]
 800db00:	2b00      	cmp	r3, #0
 800db02:	d1e4      	bne.n	800dace <_Balloc+0x20>
 800db04:	2000      	movs	r0, #0
 800db06:	bd70      	pop	{r4, r5, r6, pc}
 800db08:	6802      	ldr	r2, [r0, #0]
 800db0a:	f843 2026 	str.w	r2, [r3, r6, lsl #2]
 800db0e:	2300      	movs	r3, #0
 800db10:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800db14:	e7f7      	b.n	800db06 <_Balloc+0x58>

0800db16 <_Bfree>:
 800db16:	b570      	push	{r4, r5, r6, lr}
 800db18:	6a44      	ldr	r4, [r0, #36]	; 0x24
 800db1a:	4606      	mov	r6, r0
 800db1c:	460d      	mov	r5, r1
 800db1e:	b93c      	cbnz	r4, 800db30 <_Bfree+0x1a>
 800db20:	2010      	movs	r0, #16
 800db22:	f7ff ffb1 	bl	800da88 <malloc>
 800db26:	6270      	str	r0, [r6, #36]	; 0x24
 800db28:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800db2c:	6004      	str	r4, [r0, #0]
 800db2e:	60c4      	str	r4, [r0, #12]
 800db30:	b13d      	cbz	r5, 800db42 <_Bfree+0x2c>
 800db32:	6a73      	ldr	r3, [r6, #36]	; 0x24
 800db34:	686a      	ldr	r2, [r5, #4]
 800db36:	68db      	ldr	r3, [r3, #12]
 800db38:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800db3c:	6029      	str	r1, [r5, #0]
 800db3e:	f843 5022 	str.w	r5, [r3, r2, lsl #2]
 800db42:	bd70      	pop	{r4, r5, r6, pc}

0800db44 <__multadd>:
 800db44:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800db48:	690d      	ldr	r5, [r1, #16]
 800db4a:	461f      	mov	r7, r3
 800db4c:	4606      	mov	r6, r0
 800db4e:	460c      	mov	r4, r1
 800db50:	f101 0c14 	add.w	ip, r1, #20
 800db54:	2300      	movs	r3, #0
 800db56:	f8dc 0000 	ldr.w	r0, [ip]
 800db5a:	b281      	uxth	r1, r0
 800db5c:	fb02 7101 	mla	r1, r2, r1, r7
 800db60:	0c0f      	lsrs	r7, r1, #16
 800db62:	0c00      	lsrs	r0, r0, #16
 800db64:	fb02 7000 	mla	r0, r2, r0, r7
 800db68:	b289      	uxth	r1, r1
 800db6a:	3301      	adds	r3, #1
 800db6c:	eb01 4100 	add.w	r1, r1, r0, lsl #16
 800db70:	429d      	cmp	r5, r3
 800db72:	ea4f 4710 	mov.w	r7, r0, lsr #16
 800db76:	f84c 1b04 	str.w	r1, [ip], #4
 800db7a:	dcec      	bgt.n	800db56 <__multadd+0x12>
 800db7c:	b1d7      	cbz	r7, 800dbb4 <__multadd+0x70>
 800db7e:	68a3      	ldr	r3, [r4, #8]
 800db80:	42ab      	cmp	r3, r5
 800db82:	dc12      	bgt.n	800dbaa <__multadd+0x66>
 800db84:	6861      	ldr	r1, [r4, #4]
 800db86:	4630      	mov	r0, r6
 800db88:	3101      	adds	r1, #1
 800db8a:	f7ff ff90 	bl	800daae <_Balloc>
 800db8e:	6922      	ldr	r2, [r4, #16]
 800db90:	3202      	adds	r2, #2
 800db92:	f104 010c 	add.w	r1, r4, #12
 800db96:	4680      	mov	r8, r0
 800db98:	0092      	lsls	r2, r2, #2
 800db9a:	300c      	adds	r0, #12
 800db9c:	f7ff ff7c 	bl	800da98 <memcpy>
 800dba0:	4621      	mov	r1, r4
 800dba2:	4630      	mov	r0, r6
 800dba4:	f7ff ffb7 	bl	800db16 <_Bfree>
 800dba8:	4644      	mov	r4, r8
 800dbaa:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800dbae:	3501      	adds	r5, #1
 800dbb0:	615f      	str	r7, [r3, #20]
 800dbb2:	6125      	str	r5, [r4, #16]
 800dbb4:	4620      	mov	r0, r4
 800dbb6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0800dbba <__hi0bits>:
 800dbba:	0c02      	lsrs	r2, r0, #16
 800dbbc:	0412      	lsls	r2, r2, #16
 800dbbe:	4603      	mov	r3, r0
 800dbc0:	b9b2      	cbnz	r2, 800dbf0 <__hi0bits+0x36>
 800dbc2:	0403      	lsls	r3, r0, #16
 800dbc4:	2010      	movs	r0, #16
 800dbc6:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
 800dbca:	bf04      	itt	eq
 800dbcc:	021b      	lsleq	r3, r3, #8
 800dbce:	3008      	addeq	r0, #8
 800dbd0:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
 800dbd4:	bf04      	itt	eq
 800dbd6:	011b      	lsleq	r3, r3, #4
 800dbd8:	3004      	addeq	r0, #4
 800dbda:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
 800dbde:	bf04      	itt	eq
 800dbe0:	009b      	lsleq	r3, r3, #2
 800dbe2:	3002      	addeq	r0, #2
 800dbe4:	2b00      	cmp	r3, #0
 800dbe6:	db06      	blt.n	800dbf6 <__hi0bits+0x3c>
 800dbe8:	005b      	lsls	r3, r3, #1
 800dbea:	d503      	bpl.n	800dbf4 <__hi0bits+0x3a>
 800dbec:	3001      	adds	r0, #1
 800dbee:	4770      	bx	lr
 800dbf0:	2000      	movs	r0, #0
 800dbf2:	e7e8      	b.n	800dbc6 <__hi0bits+0xc>
 800dbf4:	2020      	movs	r0, #32
 800dbf6:	4770      	bx	lr

0800dbf8 <__lo0bits>:
 800dbf8:	6803      	ldr	r3, [r0, #0]
 800dbfa:	f013 0207 	ands.w	r2, r3, #7
 800dbfe:	4601      	mov	r1, r0
 800dc00:	d00b      	beq.n	800dc1a <__lo0bits+0x22>
 800dc02:	07da      	lsls	r2, r3, #31
 800dc04:	d423      	bmi.n	800dc4e <__lo0bits+0x56>
 800dc06:	0798      	lsls	r0, r3, #30
 800dc08:	bf49      	itett	mi
 800dc0a:	085b      	lsrmi	r3, r3, #1
 800dc0c:	089b      	lsrpl	r3, r3, #2
 800dc0e:	2001      	movmi	r0, #1
 800dc10:	600b      	strmi	r3, [r1, #0]
 800dc12:	bf5c      	itt	pl
 800dc14:	600b      	strpl	r3, [r1, #0]
 800dc16:	2002      	movpl	r0, #2
 800dc18:	4770      	bx	lr
 800dc1a:	b298      	uxth	r0, r3
 800dc1c:	b9a8      	cbnz	r0, 800dc4a <__lo0bits+0x52>
 800dc1e:	0c1b      	lsrs	r3, r3, #16
 800dc20:	2010      	movs	r0, #16
 800dc22:	f013 0fff 	tst.w	r3, #255	; 0xff
 800dc26:	bf04      	itt	eq
 800dc28:	0a1b      	lsreq	r3, r3, #8
 800dc2a:	3008      	addeq	r0, #8
 800dc2c:	071a      	lsls	r2, r3, #28
 800dc2e:	bf04      	itt	eq
 800dc30:	091b      	lsreq	r3, r3, #4
 800dc32:	3004      	addeq	r0, #4
 800dc34:	079a      	lsls	r2, r3, #30
 800dc36:	bf04      	itt	eq
 800dc38:	089b      	lsreq	r3, r3, #2
 800dc3a:	3002      	addeq	r0, #2
 800dc3c:	07da      	lsls	r2, r3, #31
 800dc3e:	d402      	bmi.n	800dc46 <__lo0bits+0x4e>
 800dc40:	085b      	lsrs	r3, r3, #1
 800dc42:	d006      	beq.n	800dc52 <__lo0bits+0x5a>
 800dc44:	3001      	adds	r0, #1
 800dc46:	600b      	str	r3, [r1, #0]
 800dc48:	4770      	bx	lr
 800dc4a:	4610      	mov	r0, r2
 800dc4c:	e7e9      	b.n	800dc22 <__lo0bits+0x2a>
 800dc4e:	2000      	movs	r0, #0
 800dc50:	4770      	bx	lr
 800dc52:	2020      	movs	r0, #32
 800dc54:	4770      	bx	lr

0800dc56 <__i2b>:
 800dc56:	b510      	push	{r4, lr}
 800dc58:	460c      	mov	r4, r1
 800dc5a:	2101      	movs	r1, #1
 800dc5c:	f7ff ff27 	bl	800daae <_Balloc>
 800dc60:	2201      	movs	r2, #1
 800dc62:	6144      	str	r4, [r0, #20]
 800dc64:	6102      	str	r2, [r0, #16]
 800dc66:	bd10      	pop	{r4, pc}

0800dc68 <__multiply>:
 800dc68:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800dc6c:	4614      	mov	r4, r2
 800dc6e:	690a      	ldr	r2, [r1, #16]
 800dc70:	6923      	ldr	r3, [r4, #16]
 800dc72:	429a      	cmp	r2, r3
 800dc74:	bfb8      	it	lt
 800dc76:	460b      	movlt	r3, r1
 800dc78:	4688      	mov	r8, r1
 800dc7a:	bfbc      	itt	lt
 800dc7c:	46a0      	movlt	r8, r4
 800dc7e:	461c      	movlt	r4, r3
 800dc80:	f8d8 7010 	ldr.w	r7, [r8, #16]
 800dc84:	f8d4 9010 	ldr.w	r9, [r4, #16]
 800dc88:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800dc8c:	f8d8 1004 	ldr.w	r1, [r8, #4]
 800dc90:	eb07 0609 	add.w	r6, r7, r9
 800dc94:	42b3      	cmp	r3, r6
 800dc96:	bfb8      	it	lt
 800dc98:	3101      	addlt	r1, #1
 800dc9a:	f7ff ff08 	bl	800daae <_Balloc>
 800dc9e:	f100 0514 	add.w	r5, r0, #20
 800dca2:	eb05 0e86 	add.w	lr, r5, r6, lsl #2
 800dca6:	462b      	mov	r3, r5
 800dca8:	2200      	movs	r2, #0
 800dcaa:	4573      	cmp	r3, lr
 800dcac:	d316      	bcc.n	800dcdc <__multiply+0x74>
 800dcae:	f104 0214 	add.w	r2, r4, #20
 800dcb2:	f108 0114 	add.w	r1, r8, #20
 800dcb6:	eb02 0389 	add.w	r3, r2, r9, lsl #2
 800dcba:	eb01 0787 	add.w	r7, r1, r7, lsl #2
 800dcbe:	9300      	str	r3, [sp, #0]
 800dcc0:	9b00      	ldr	r3, [sp, #0]
 800dcc2:	9201      	str	r2, [sp, #4]
 800dcc4:	4293      	cmp	r3, r2
 800dcc6:	d80c      	bhi.n	800dce2 <__multiply+0x7a>
 800dcc8:	2e00      	cmp	r6, #0
 800dcca:	dd03      	ble.n	800dcd4 <__multiply+0x6c>
 800dccc:	f85e 3d04 	ldr.w	r3, [lr, #-4]!
 800dcd0:	2b00      	cmp	r3, #0
 800dcd2:	d05d      	beq.n	800dd90 <__multiply+0x128>
 800dcd4:	6106      	str	r6, [r0, #16]
 800dcd6:	b003      	add	sp, #12
 800dcd8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800dcdc:	f843 2b04 	str.w	r2, [r3], #4
 800dce0:	e7e3      	b.n	800dcaa <__multiply+0x42>
 800dce2:	f8b2 b000 	ldrh.w	fp, [r2]
 800dce6:	f1bb 0f00 	cmp.w	fp, #0
 800dcea:	d023      	beq.n	800dd34 <__multiply+0xcc>
 800dcec:	4689      	mov	r9, r1
 800dcee:	46ac      	mov	ip, r5
 800dcf0:	f04f 0800 	mov.w	r8, #0
 800dcf4:	f859 4b04 	ldr.w	r4, [r9], #4
 800dcf8:	f8dc a000 	ldr.w	sl, [ip]
 800dcfc:	b2a3      	uxth	r3, r4
 800dcfe:	fa1f fa8a 	uxth.w	sl, sl
 800dd02:	fb0b a303 	mla	r3, fp, r3, sl
 800dd06:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 800dd0a:	f8dc 4000 	ldr.w	r4, [ip]
 800dd0e:	4443      	add	r3, r8
 800dd10:	ea4f 4814 	mov.w	r8, r4, lsr #16
 800dd14:	fb0b 840a 	mla	r4, fp, sl, r8
 800dd18:	eb04 4413 	add.w	r4, r4, r3, lsr #16
 800dd1c:	46e2      	mov	sl, ip
 800dd1e:	b29b      	uxth	r3, r3
 800dd20:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800dd24:	454f      	cmp	r7, r9
 800dd26:	ea4f 4814 	mov.w	r8, r4, lsr #16
 800dd2a:	f84a 3b04 	str.w	r3, [sl], #4
 800dd2e:	d82b      	bhi.n	800dd88 <__multiply+0x120>
 800dd30:	f8cc 8004 	str.w	r8, [ip, #4]
 800dd34:	9b01      	ldr	r3, [sp, #4]
 800dd36:	f8b3 a002 	ldrh.w	sl, [r3, #2]
 800dd3a:	3204      	adds	r2, #4
 800dd3c:	f1ba 0f00 	cmp.w	sl, #0
 800dd40:	d020      	beq.n	800dd84 <__multiply+0x11c>
 800dd42:	682b      	ldr	r3, [r5, #0]
 800dd44:	4689      	mov	r9, r1
 800dd46:	46a8      	mov	r8, r5
 800dd48:	f04f 0b00 	mov.w	fp, #0
 800dd4c:	f8b9 c000 	ldrh.w	ip, [r9]
 800dd50:	f8b8 4002 	ldrh.w	r4, [r8, #2]
 800dd54:	fb0a 440c 	mla	r4, sl, ip, r4
 800dd58:	445c      	add	r4, fp
 800dd5a:	46c4      	mov	ip, r8
 800dd5c:	b29b      	uxth	r3, r3
 800dd5e:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800dd62:	f84c 3b04 	str.w	r3, [ip], #4
 800dd66:	f859 3b04 	ldr.w	r3, [r9], #4
 800dd6a:	f8b8 b004 	ldrh.w	fp, [r8, #4]
 800dd6e:	0c1b      	lsrs	r3, r3, #16
 800dd70:	fb0a b303 	mla	r3, sl, r3, fp
 800dd74:	eb03 4314 	add.w	r3, r3, r4, lsr #16
 800dd78:	454f      	cmp	r7, r9
 800dd7a:	ea4f 4b13 	mov.w	fp, r3, lsr #16
 800dd7e:	d805      	bhi.n	800dd8c <__multiply+0x124>
 800dd80:	f8c8 3004 	str.w	r3, [r8, #4]
 800dd84:	3504      	adds	r5, #4
 800dd86:	e79b      	b.n	800dcc0 <__multiply+0x58>
 800dd88:	46d4      	mov	ip, sl
 800dd8a:	e7b3      	b.n	800dcf4 <__multiply+0x8c>
 800dd8c:	46e0      	mov	r8, ip
 800dd8e:	e7dd      	b.n	800dd4c <__multiply+0xe4>
 800dd90:	3e01      	subs	r6, #1
 800dd92:	e799      	b.n	800dcc8 <__multiply+0x60>

0800dd94 <__pow5mult>:
 800dd94:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800dd98:	4615      	mov	r5, r2
 800dd9a:	f012 0203 	ands.w	r2, r2, #3
 800dd9e:	4606      	mov	r6, r0
 800dda0:	460f      	mov	r7, r1
 800dda2:	d007      	beq.n	800ddb4 <__pow5mult+0x20>
 800dda4:	3a01      	subs	r2, #1
 800dda6:	4c21      	ldr	r4, [pc, #132]	; (800de2c <__pow5mult+0x98>)
 800dda8:	2300      	movs	r3, #0
 800ddaa:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800ddae:	f7ff fec9 	bl	800db44 <__multadd>
 800ddb2:	4607      	mov	r7, r0
 800ddb4:	10ad      	asrs	r5, r5, #2
 800ddb6:	d035      	beq.n	800de24 <__pow5mult+0x90>
 800ddb8:	6a74      	ldr	r4, [r6, #36]	; 0x24
 800ddba:	b93c      	cbnz	r4, 800ddcc <__pow5mult+0x38>
 800ddbc:	2010      	movs	r0, #16
 800ddbe:	f7ff fe63 	bl	800da88 <malloc>
 800ddc2:	6270      	str	r0, [r6, #36]	; 0x24
 800ddc4:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800ddc8:	6004      	str	r4, [r0, #0]
 800ddca:	60c4      	str	r4, [r0, #12]
 800ddcc:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 800ddd0:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800ddd4:	b94c      	cbnz	r4, 800ddea <__pow5mult+0x56>
 800ddd6:	f240 2171 	movw	r1, #625	; 0x271
 800ddda:	4630      	mov	r0, r6
 800dddc:	f7ff ff3b 	bl	800dc56 <__i2b>
 800dde0:	2300      	movs	r3, #0
 800dde2:	f8c8 0008 	str.w	r0, [r8, #8]
 800dde6:	4604      	mov	r4, r0
 800dde8:	6003      	str	r3, [r0, #0]
 800ddea:	f04f 0800 	mov.w	r8, #0
 800ddee:	07eb      	lsls	r3, r5, #31
 800ddf0:	d50a      	bpl.n	800de08 <__pow5mult+0x74>
 800ddf2:	4639      	mov	r1, r7
 800ddf4:	4622      	mov	r2, r4
 800ddf6:	4630      	mov	r0, r6
 800ddf8:	f7ff ff36 	bl	800dc68 <__multiply>
 800ddfc:	4639      	mov	r1, r7
 800ddfe:	4681      	mov	r9, r0
 800de00:	4630      	mov	r0, r6
 800de02:	f7ff fe88 	bl	800db16 <_Bfree>
 800de06:	464f      	mov	r7, r9
 800de08:	106d      	asrs	r5, r5, #1
 800de0a:	d00b      	beq.n	800de24 <__pow5mult+0x90>
 800de0c:	6820      	ldr	r0, [r4, #0]
 800de0e:	b938      	cbnz	r0, 800de20 <__pow5mult+0x8c>
 800de10:	4622      	mov	r2, r4
 800de12:	4621      	mov	r1, r4
 800de14:	4630      	mov	r0, r6
 800de16:	f7ff ff27 	bl	800dc68 <__multiply>
 800de1a:	6020      	str	r0, [r4, #0]
 800de1c:	f8c0 8000 	str.w	r8, [r0]
 800de20:	4604      	mov	r4, r0
 800de22:	e7e4      	b.n	800ddee <__pow5mult+0x5a>
 800de24:	4638      	mov	r0, r7
 800de26:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800de2a:	bf00      	nop
 800de2c:	0800efc8 	.word	0x0800efc8

0800de30 <__lshift>:
 800de30:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800de34:	460c      	mov	r4, r1
 800de36:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800de3a:	6923      	ldr	r3, [r4, #16]
 800de3c:	6849      	ldr	r1, [r1, #4]
 800de3e:	eb0a 0903 	add.w	r9, sl, r3
 800de42:	68a3      	ldr	r3, [r4, #8]
 800de44:	4607      	mov	r7, r0
 800de46:	4616      	mov	r6, r2
 800de48:	f109 0501 	add.w	r5, r9, #1
 800de4c:	42ab      	cmp	r3, r5
 800de4e:	db32      	blt.n	800deb6 <__lshift+0x86>
 800de50:	4638      	mov	r0, r7
 800de52:	f7ff fe2c 	bl	800daae <_Balloc>
 800de56:	2300      	movs	r3, #0
 800de58:	4680      	mov	r8, r0
 800de5a:	f100 0114 	add.w	r1, r0, #20
 800de5e:	461a      	mov	r2, r3
 800de60:	4553      	cmp	r3, sl
 800de62:	db2b      	blt.n	800debc <__lshift+0x8c>
 800de64:	6920      	ldr	r0, [r4, #16]
 800de66:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800de6a:	f104 0314 	add.w	r3, r4, #20
 800de6e:	f016 021f 	ands.w	r2, r6, #31
 800de72:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800de76:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800de7a:	d025      	beq.n	800dec8 <__lshift+0x98>
 800de7c:	f1c2 0e20 	rsb	lr, r2, #32
 800de80:	2000      	movs	r0, #0
 800de82:	681e      	ldr	r6, [r3, #0]
 800de84:	468a      	mov	sl, r1
 800de86:	4096      	lsls	r6, r2
 800de88:	4330      	orrs	r0, r6
 800de8a:	f84a 0b04 	str.w	r0, [sl], #4
 800de8e:	f853 0b04 	ldr.w	r0, [r3], #4
 800de92:	459c      	cmp	ip, r3
 800de94:	fa20 f00e 	lsr.w	r0, r0, lr
 800de98:	d814      	bhi.n	800dec4 <__lshift+0x94>
 800de9a:	6048      	str	r0, [r1, #4]
 800de9c:	b108      	cbz	r0, 800dea2 <__lshift+0x72>
 800de9e:	f109 0502 	add.w	r5, r9, #2
 800dea2:	3d01      	subs	r5, #1
 800dea4:	4638      	mov	r0, r7
 800dea6:	f8c8 5010 	str.w	r5, [r8, #16]
 800deaa:	4621      	mov	r1, r4
 800deac:	f7ff fe33 	bl	800db16 <_Bfree>
 800deb0:	4640      	mov	r0, r8
 800deb2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800deb6:	3101      	adds	r1, #1
 800deb8:	005b      	lsls	r3, r3, #1
 800deba:	e7c7      	b.n	800de4c <__lshift+0x1c>
 800debc:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 800dec0:	3301      	adds	r3, #1
 800dec2:	e7cd      	b.n	800de60 <__lshift+0x30>
 800dec4:	4651      	mov	r1, sl
 800dec6:	e7dc      	b.n	800de82 <__lshift+0x52>
 800dec8:	3904      	subs	r1, #4
 800deca:	f853 2b04 	ldr.w	r2, [r3], #4
 800dece:	f841 2f04 	str.w	r2, [r1, #4]!
 800ded2:	459c      	cmp	ip, r3
 800ded4:	d8f9      	bhi.n	800deca <__lshift+0x9a>
 800ded6:	e7e4      	b.n	800dea2 <__lshift+0x72>

0800ded8 <__mcmp>:
 800ded8:	6903      	ldr	r3, [r0, #16]
 800deda:	690a      	ldr	r2, [r1, #16]
 800dedc:	1a9b      	subs	r3, r3, r2
 800dede:	b530      	push	{r4, r5, lr}
 800dee0:	d10c      	bne.n	800defc <__mcmp+0x24>
 800dee2:	0092      	lsls	r2, r2, #2
 800dee4:	3014      	adds	r0, #20
 800dee6:	3114      	adds	r1, #20
 800dee8:	1884      	adds	r4, r0, r2
 800deea:	4411      	add	r1, r2
 800deec:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 800def0:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 800def4:	4295      	cmp	r5, r2
 800def6:	d003      	beq.n	800df00 <__mcmp+0x28>
 800def8:	d305      	bcc.n	800df06 <__mcmp+0x2e>
 800defa:	2301      	movs	r3, #1
 800defc:	4618      	mov	r0, r3
 800defe:	bd30      	pop	{r4, r5, pc}
 800df00:	42a0      	cmp	r0, r4
 800df02:	d3f3      	bcc.n	800deec <__mcmp+0x14>
 800df04:	e7fa      	b.n	800defc <__mcmp+0x24>
 800df06:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800df0a:	e7f7      	b.n	800defc <__mcmp+0x24>

0800df0c <__mdiff>:
 800df0c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800df10:	460d      	mov	r5, r1
 800df12:	4607      	mov	r7, r0
 800df14:	4611      	mov	r1, r2
 800df16:	4628      	mov	r0, r5
 800df18:	4614      	mov	r4, r2
 800df1a:	f7ff ffdd 	bl	800ded8 <__mcmp>
 800df1e:	1e06      	subs	r6, r0, #0
 800df20:	d108      	bne.n	800df34 <__mdiff+0x28>
 800df22:	4631      	mov	r1, r6
 800df24:	4638      	mov	r0, r7
 800df26:	f7ff fdc2 	bl	800daae <_Balloc>
 800df2a:	2301      	movs	r3, #1
 800df2c:	e9c0 3604 	strd	r3, r6, [r0, #16]
 800df30:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800df34:	bfa4      	itt	ge
 800df36:	4623      	movge	r3, r4
 800df38:	462c      	movge	r4, r5
 800df3a:	4638      	mov	r0, r7
 800df3c:	6861      	ldr	r1, [r4, #4]
 800df3e:	bfa6      	itte	ge
 800df40:	461d      	movge	r5, r3
 800df42:	2600      	movge	r6, #0
 800df44:	2601      	movlt	r6, #1
 800df46:	f7ff fdb2 	bl	800daae <_Balloc>
 800df4a:	692b      	ldr	r3, [r5, #16]
 800df4c:	60c6      	str	r6, [r0, #12]
 800df4e:	6926      	ldr	r6, [r4, #16]
 800df50:	f105 0914 	add.w	r9, r5, #20
 800df54:	f104 0214 	add.w	r2, r4, #20
 800df58:	eb02 0786 	add.w	r7, r2, r6, lsl #2
 800df5c:	eb09 0883 	add.w	r8, r9, r3, lsl #2
 800df60:	f100 0514 	add.w	r5, r0, #20
 800df64:	f04f 0e00 	mov.w	lr, #0
 800df68:	f852 ab04 	ldr.w	sl, [r2], #4
 800df6c:	f859 4b04 	ldr.w	r4, [r9], #4
 800df70:	fa1e f18a 	uxtah	r1, lr, sl
 800df74:	b2a3      	uxth	r3, r4
 800df76:	1ac9      	subs	r1, r1, r3
 800df78:	0c23      	lsrs	r3, r4, #16
 800df7a:	ebc3 431a 	rsb	r3, r3, sl, lsr #16
 800df7e:	eb03 4321 	add.w	r3, r3, r1, asr #16
 800df82:	b289      	uxth	r1, r1
 800df84:	ea4f 4e23 	mov.w	lr, r3, asr #16
 800df88:	45c8      	cmp	r8, r9
 800df8a:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 800df8e:	4694      	mov	ip, r2
 800df90:	f845 3b04 	str.w	r3, [r5], #4
 800df94:	d8e8      	bhi.n	800df68 <__mdiff+0x5c>
 800df96:	45bc      	cmp	ip, r7
 800df98:	d304      	bcc.n	800dfa4 <__mdiff+0x98>
 800df9a:	f855 3d04 	ldr.w	r3, [r5, #-4]!
 800df9e:	b183      	cbz	r3, 800dfc2 <__mdiff+0xb6>
 800dfa0:	6106      	str	r6, [r0, #16]
 800dfa2:	e7c5      	b.n	800df30 <__mdiff+0x24>
 800dfa4:	f85c 1b04 	ldr.w	r1, [ip], #4
 800dfa8:	fa1e f381 	uxtah	r3, lr, r1
 800dfac:	141a      	asrs	r2, r3, #16
 800dfae:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 800dfb2:	b29b      	uxth	r3, r3
 800dfb4:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800dfb8:	ea4f 4e22 	mov.w	lr, r2, asr #16
 800dfbc:	f845 3b04 	str.w	r3, [r5], #4
 800dfc0:	e7e9      	b.n	800df96 <__mdiff+0x8a>
 800dfc2:	3e01      	subs	r6, #1
 800dfc4:	e7e9      	b.n	800df9a <__mdiff+0x8e>

0800dfc6 <__d2b>:
 800dfc6:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800dfca:	460e      	mov	r6, r1
 800dfcc:	2101      	movs	r1, #1
 800dfce:	ec59 8b10 	vmov	r8, r9, d0
 800dfd2:	4615      	mov	r5, r2
 800dfd4:	f7ff fd6b 	bl	800daae <_Balloc>
 800dfd8:	f3c9 540a 	ubfx	r4, r9, #20, #11
 800dfdc:	4607      	mov	r7, r0
 800dfde:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800dfe2:	bb34      	cbnz	r4, 800e032 <__d2b+0x6c>
 800dfe4:	9301      	str	r3, [sp, #4]
 800dfe6:	f1b8 0300 	subs.w	r3, r8, #0
 800dfea:	d027      	beq.n	800e03c <__d2b+0x76>
 800dfec:	a802      	add	r0, sp, #8
 800dfee:	f840 3d08 	str.w	r3, [r0, #-8]!
 800dff2:	f7ff fe01 	bl	800dbf8 <__lo0bits>
 800dff6:	9900      	ldr	r1, [sp, #0]
 800dff8:	b1f0      	cbz	r0, 800e038 <__d2b+0x72>
 800dffa:	9a01      	ldr	r2, [sp, #4]
 800dffc:	f1c0 0320 	rsb	r3, r0, #32
 800e000:	fa02 f303 	lsl.w	r3, r2, r3
 800e004:	430b      	orrs	r3, r1
 800e006:	40c2      	lsrs	r2, r0
 800e008:	617b      	str	r3, [r7, #20]
 800e00a:	9201      	str	r2, [sp, #4]
 800e00c:	9b01      	ldr	r3, [sp, #4]
 800e00e:	61bb      	str	r3, [r7, #24]
 800e010:	2b00      	cmp	r3, #0
 800e012:	bf14      	ite	ne
 800e014:	2102      	movne	r1, #2
 800e016:	2101      	moveq	r1, #1
 800e018:	6139      	str	r1, [r7, #16]
 800e01a:	b1c4      	cbz	r4, 800e04e <__d2b+0x88>
 800e01c:	f2a4 4433 	subw	r4, r4, #1075	; 0x433
 800e020:	4404      	add	r4, r0
 800e022:	6034      	str	r4, [r6, #0]
 800e024:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800e028:	6028      	str	r0, [r5, #0]
 800e02a:	4638      	mov	r0, r7
 800e02c:	b003      	add	sp, #12
 800e02e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800e032:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800e036:	e7d5      	b.n	800dfe4 <__d2b+0x1e>
 800e038:	6179      	str	r1, [r7, #20]
 800e03a:	e7e7      	b.n	800e00c <__d2b+0x46>
 800e03c:	a801      	add	r0, sp, #4
 800e03e:	f7ff fddb 	bl	800dbf8 <__lo0bits>
 800e042:	9b01      	ldr	r3, [sp, #4]
 800e044:	617b      	str	r3, [r7, #20]
 800e046:	2101      	movs	r1, #1
 800e048:	6139      	str	r1, [r7, #16]
 800e04a:	3020      	adds	r0, #32
 800e04c:	e7e5      	b.n	800e01a <__d2b+0x54>
 800e04e:	eb07 0381 	add.w	r3, r7, r1, lsl #2
 800e052:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800e056:	6030      	str	r0, [r6, #0]
 800e058:	6918      	ldr	r0, [r3, #16]
 800e05a:	f7ff fdae 	bl	800dbba <__hi0bits>
 800e05e:	ebc0 1041 	rsb	r0, r0, r1, lsl #5
 800e062:	e7e1      	b.n	800e028 <__d2b+0x62>

0800e064 <_calloc_r>:
 800e064:	b538      	push	{r3, r4, r5, lr}
 800e066:	fb02 f401 	mul.w	r4, r2, r1
 800e06a:	4621      	mov	r1, r4
 800e06c:	f000 f856 	bl	800e11c <_malloc_r>
 800e070:	4605      	mov	r5, r0
 800e072:	b118      	cbz	r0, 800e07c <_calloc_r+0x18>
 800e074:	4622      	mov	r2, r4
 800e076:	2100      	movs	r1, #0
 800e078:	f7fd ff08 	bl	800be8c <memset>
 800e07c:	4628      	mov	r0, r5
 800e07e:	bd38      	pop	{r3, r4, r5, pc}

0800e080 <_free_r>:
 800e080:	b538      	push	{r3, r4, r5, lr}
 800e082:	4605      	mov	r5, r0
 800e084:	2900      	cmp	r1, #0
 800e086:	d045      	beq.n	800e114 <_free_r+0x94>
 800e088:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800e08c:	1f0c      	subs	r4, r1, #4
 800e08e:	2b00      	cmp	r3, #0
 800e090:	bfb8      	it	lt
 800e092:	18e4      	addlt	r4, r4, r3
 800e094:	f000 fac3 	bl	800e61e <__malloc_lock>
 800e098:	4a1f      	ldr	r2, [pc, #124]	; (800e118 <_free_r+0x98>)
 800e09a:	6813      	ldr	r3, [r2, #0]
 800e09c:	4610      	mov	r0, r2
 800e09e:	b933      	cbnz	r3, 800e0ae <_free_r+0x2e>
 800e0a0:	6063      	str	r3, [r4, #4]
 800e0a2:	6014      	str	r4, [r2, #0]
 800e0a4:	4628      	mov	r0, r5
 800e0a6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800e0aa:	f000 bab9 	b.w	800e620 <__malloc_unlock>
 800e0ae:	42a3      	cmp	r3, r4
 800e0b0:	d90c      	bls.n	800e0cc <_free_r+0x4c>
 800e0b2:	6821      	ldr	r1, [r4, #0]
 800e0b4:	1862      	adds	r2, r4, r1
 800e0b6:	4293      	cmp	r3, r2
 800e0b8:	bf04      	itt	eq
 800e0ba:	681a      	ldreq	r2, [r3, #0]
 800e0bc:	685b      	ldreq	r3, [r3, #4]
 800e0be:	6063      	str	r3, [r4, #4]
 800e0c0:	bf04      	itt	eq
 800e0c2:	1852      	addeq	r2, r2, r1
 800e0c4:	6022      	streq	r2, [r4, #0]
 800e0c6:	6004      	str	r4, [r0, #0]
 800e0c8:	e7ec      	b.n	800e0a4 <_free_r+0x24>
 800e0ca:	4613      	mov	r3, r2
 800e0cc:	685a      	ldr	r2, [r3, #4]
 800e0ce:	b10a      	cbz	r2, 800e0d4 <_free_r+0x54>
 800e0d0:	42a2      	cmp	r2, r4
 800e0d2:	d9fa      	bls.n	800e0ca <_free_r+0x4a>
 800e0d4:	6819      	ldr	r1, [r3, #0]
 800e0d6:	1858      	adds	r0, r3, r1
 800e0d8:	42a0      	cmp	r0, r4
 800e0da:	d10b      	bne.n	800e0f4 <_free_r+0x74>
 800e0dc:	6820      	ldr	r0, [r4, #0]
 800e0de:	4401      	add	r1, r0
 800e0e0:	1858      	adds	r0, r3, r1
 800e0e2:	4282      	cmp	r2, r0
 800e0e4:	6019      	str	r1, [r3, #0]
 800e0e6:	d1dd      	bne.n	800e0a4 <_free_r+0x24>
 800e0e8:	6810      	ldr	r0, [r2, #0]
 800e0ea:	6852      	ldr	r2, [r2, #4]
 800e0ec:	605a      	str	r2, [r3, #4]
 800e0ee:	4401      	add	r1, r0
 800e0f0:	6019      	str	r1, [r3, #0]
 800e0f2:	e7d7      	b.n	800e0a4 <_free_r+0x24>
 800e0f4:	d902      	bls.n	800e0fc <_free_r+0x7c>
 800e0f6:	230c      	movs	r3, #12
 800e0f8:	602b      	str	r3, [r5, #0]
 800e0fa:	e7d3      	b.n	800e0a4 <_free_r+0x24>
 800e0fc:	6820      	ldr	r0, [r4, #0]
 800e0fe:	1821      	adds	r1, r4, r0
 800e100:	428a      	cmp	r2, r1
 800e102:	bf04      	itt	eq
 800e104:	6811      	ldreq	r1, [r2, #0]
 800e106:	6852      	ldreq	r2, [r2, #4]
 800e108:	6062      	str	r2, [r4, #4]
 800e10a:	bf04      	itt	eq
 800e10c:	1809      	addeq	r1, r1, r0
 800e10e:	6021      	streq	r1, [r4, #0]
 800e110:	605c      	str	r4, [r3, #4]
 800e112:	e7c7      	b.n	800e0a4 <_free_r+0x24>
 800e114:	bd38      	pop	{r3, r4, r5, pc}
 800e116:	bf00      	nop
 800e118:	20001428 	.word	0x20001428

0800e11c <_malloc_r>:
 800e11c:	b570      	push	{r4, r5, r6, lr}
 800e11e:	1ccd      	adds	r5, r1, #3
 800e120:	f025 0503 	bic.w	r5, r5, #3
 800e124:	3508      	adds	r5, #8
 800e126:	2d0c      	cmp	r5, #12
 800e128:	bf38      	it	cc
 800e12a:	250c      	movcc	r5, #12
 800e12c:	2d00      	cmp	r5, #0
 800e12e:	4606      	mov	r6, r0
 800e130:	db01      	blt.n	800e136 <_malloc_r+0x1a>
 800e132:	42a9      	cmp	r1, r5
 800e134:	d903      	bls.n	800e13e <_malloc_r+0x22>
 800e136:	230c      	movs	r3, #12
 800e138:	6033      	str	r3, [r6, #0]
 800e13a:	2000      	movs	r0, #0
 800e13c:	bd70      	pop	{r4, r5, r6, pc}
 800e13e:	f000 fa6e 	bl	800e61e <__malloc_lock>
 800e142:	4a21      	ldr	r2, [pc, #132]	; (800e1c8 <_malloc_r+0xac>)
 800e144:	6814      	ldr	r4, [r2, #0]
 800e146:	4621      	mov	r1, r4
 800e148:	b991      	cbnz	r1, 800e170 <_malloc_r+0x54>
 800e14a:	4c20      	ldr	r4, [pc, #128]	; (800e1cc <_malloc_r+0xb0>)
 800e14c:	6823      	ldr	r3, [r4, #0]
 800e14e:	b91b      	cbnz	r3, 800e158 <_malloc_r+0x3c>
 800e150:	4630      	mov	r0, r6
 800e152:	f000 f98f 	bl	800e474 <_sbrk_r>
 800e156:	6020      	str	r0, [r4, #0]
 800e158:	4629      	mov	r1, r5
 800e15a:	4630      	mov	r0, r6
 800e15c:	f000 f98a 	bl	800e474 <_sbrk_r>
 800e160:	1c43      	adds	r3, r0, #1
 800e162:	d124      	bne.n	800e1ae <_malloc_r+0x92>
 800e164:	230c      	movs	r3, #12
 800e166:	6033      	str	r3, [r6, #0]
 800e168:	4630      	mov	r0, r6
 800e16a:	f000 fa59 	bl	800e620 <__malloc_unlock>
 800e16e:	e7e4      	b.n	800e13a <_malloc_r+0x1e>
 800e170:	680b      	ldr	r3, [r1, #0]
 800e172:	1b5b      	subs	r3, r3, r5
 800e174:	d418      	bmi.n	800e1a8 <_malloc_r+0x8c>
 800e176:	2b0b      	cmp	r3, #11
 800e178:	d90f      	bls.n	800e19a <_malloc_r+0x7e>
 800e17a:	600b      	str	r3, [r1, #0]
 800e17c:	50cd      	str	r5, [r1, r3]
 800e17e:	18cc      	adds	r4, r1, r3
 800e180:	4630      	mov	r0, r6
 800e182:	f000 fa4d 	bl	800e620 <__malloc_unlock>
 800e186:	f104 000b 	add.w	r0, r4, #11
 800e18a:	1d23      	adds	r3, r4, #4
 800e18c:	f020 0007 	bic.w	r0, r0, #7
 800e190:	1ac3      	subs	r3, r0, r3
 800e192:	d0d3      	beq.n	800e13c <_malloc_r+0x20>
 800e194:	425a      	negs	r2, r3
 800e196:	50e2      	str	r2, [r4, r3]
 800e198:	e7d0      	b.n	800e13c <_malloc_r+0x20>
 800e19a:	428c      	cmp	r4, r1
 800e19c:	684b      	ldr	r3, [r1, #4]
 800e19e:	bf16      	itet	ne
 800e1a0:	6063      	strne	r3, [r4, #4]
 800e1a2:	6013      	streq	r3, [r2, #0]
 800e1a4:	460c      	movne	r4, r1
 800e1a6:	e7eb      	b.n	800e180 <_malloc_r+0x64>
 800e1a8:	460c      	mov	r4, r1
 800e1aa:	6849      	ldr	r1, [r1, #4]
 800e1ac:	e7cc      	b.n	800e148 <_malloc_r+0x2c>
 800e1ae:	1cc4      	adds	r4, r0, #3
 800e1b0:	f024 0403 	bic.w	r4, r4, #3
 800e1b4:	42a0      	cmp	r0, r4
 800e1b6:	d005      	beq.n	800e1c4 <_malloc_r+0xa8>
 800e1b8:	1a21      	subs	r1, r4, r0
 800e1ba:	4630      	mov	r0, r6
 800e1bc:	f000 f95a 	bl	800e474 <_sbrk_r>
 800e1c0:	3001      	adds	r0, #1
 800e1c2:	d0cf      	beq.n	800e164 <_malloc_r+0x48>
 800e1c4:	6025      	str	r5, [r4, #0]
 800e1c6:	e7db      	b.n	800e180 <_malloc_r+0x64>
 800e1c8:	20001428 	.word	0x20001428
 800e1cc:	2000142c 	.word	0x2000142c

0800e1d0 <__ssputs_r>:
 800e1d0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800e1d4:	688e      	ldr	r6, [r1, #8]
 800e1d6:	429e      	cmp	r6, r3
 800e1d8:	4682      	mov	sl, r0
 800e1da:	460c      	mov	r4, r1
 800e1dc:	4690      	mov	r8, r2
 800e1de:	4699      	mov	r9, r3
 800e1e0:	d837      	bhi.n	800e252 <__ssputs_r+0x82>
 800e1e2:	898a      	ldrh	r2, [r1, #12]
 800e1e4:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800e1e8:	d031      	beq.n	800e24e <__ssputs_r+0x7e>
 800e1ea:	6825      	ldr	r5, [r4, #0]
 800e1ec:	6909      	ldr	r1, [r1, #16]
 800e1ee:	1a6f      	subs	r7, r5, r1
 800e1f0:	6965      	ldr	r5, [r4, #20]
 800e1f2:	2302      	movs	r3, #2
 800e1f4:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800e1f8:	fb95 f5f3 	sdiv	r5, r5, r3
 800e1fc:	f109 0301 	add.w	r3, r9, #1
 800e200:	443b      	add	r3, r7
 800e202:	429d      	cmp	r5, r3
 800e204:	bf38      	it	cc
 800e206:	461d      	movcc	r5, r3
 800e208:	0553      	lsls	r3, r2, #21
 800e20a:	d530      	bpl.n	800e26e <__ssputs_r+0x9e>
 800e20c:	4629      	mov	r1, r5
 800e20e:	f7ff ff85 	bl	800e11c <_malloc_r>
 800e212:	4606      	mov	r6, r0
 800e214:	b950      	cbnz	r0, 800e22c <__ssputs_r+0x5c>
 800e216:	230c      	movs	r3, #12
 800e218:	f8ca 3000 	str.w	r3, [sl]
 800e21c:	89a3      	ldrh	r3, [r4, #12]
 800e21e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800e222:	81a3      	strh	r3, [r4, #12]
 800e224:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800e228:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800e22c:	463a      	mov	r2, r7
 800e22e:	6921      	ldr	r1, [r4, #16]
 800e230:	f7ff fc32 	bl	800da98 <memcpy>
 800e234:	89a3      	ldrh	r3, [r4, #12]
 800e236:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800e23a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800e23e:	81a3      	strh	r3, [r4, #12]
 800e240:	6126      	str	r6, [r4, #16]
 800e242:	6165      	str	r5, [r4, #20]
 800e244:	443e      	add	r6, r7
 800e246:	1bed      	subs	r5, r5, r7
 800e248:	6026      	str	r6, [r4, #0]
 800e24a:	60a5      	str	r5, [r4, #8]
 800e24c:	464e      	mov	r6, r9
 800e24e:	454e      	cmp	r6, r9
 800e250:	d900      	bls.n	800e254 <__ssputs_r+0x84>
 800e252:	464e      	mov	r6, r9
 800e254:	4632      	mov	r2, r6
 800e256:	4641      	mov	r1, r8
 800e258:	6820      	ldr	r0, [r4, #0]
 800e25a:	f000 f9c7 	bl	800e5ec <memmove>
 800e25e:	68a3      	ldr	r3, [r4, #8]
 800e260:	1b9b      	subs	r3, r3, r6
 800e262:	60a3      	str	r3, [r4, #8]
 800e264:	6823      	ldr	r3, [r4, #0]
 800e266:	441e      	add	r6, r3
 800e268:	6026      	str	r6, [r4, #0]
 800e26a:	2000      	movs	r0, #0
 800e26c:	e7dc      	b.n	800e228 <__ssputs_r+0x58>
 800e26e:	462a      	mov	r2, r5
 800e270:	f000 f9d7 	bl	800e622 <_realloc_r>
 800e274:	4606      	mov	r6, r0
 800e276:	2800      	cmp	r0, #0
 800e278:	d1e2      	bne.n	800e240 <__ssputs_r+0x70>
 800e27a:	6921      	ldr	r1, [r4, #16]
 800e27c:	4650      	mov	r0, sl
 800e27e:	f7ff feff 	bl	800e080 <_free_r>
 800e282:	e7c8      	b.n	800e216 <__ssputs_r+0x46>

0800e284 <_svfiprintf_r>:
 800e284:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e288:	461d      	mov	r5, r3
 800e28a:	898b      	ldrh	r3, [r1, #12]
 800e28c:	061f      	lsls	r7, r3, #24
 800e28e:	b09d      	sub	sp, #116	; 0x74
 800e290:	4680      	mov	r8, r0
 800e292:	460c      	mov	r4, r1
 800e294:	4616      	mov	r6, r2
 800e296:	d50f      	bpl.n	800e2b8 <_svfiprintf_r+0x34>
 800e298:	690b      	ldr	r3, [r1, #16]
 800e29a:	b96b      	cbnz	r3, 800e2b8 <_svfiprintf_r+0x34>
 800e29c:	2140      	movs	r1, #64	; 0x40
 800e29e:	f7ff ff3d 	bl	800e11c <_malloc_r>
 800e2a2:	6020      	str	r0, [r4, #0]
 800e2a4:	6120      	str	r0, [r4, #16]
 800e2a6:	b928      	cbnz	r0, 800e2b4 <_svfiprintf_r+0x30>
 800e2a8:	230c      	movs	r3, #12
 800e2aa:	f8c8 3000 	str.w	r3, [r8]
 800e2ae:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800e2b2:	e0c8      	b.n	800e446 <_svfiprintf_r+0x1c2>
 800e2b4:	2340      	movs	r3, #64	; 0x40
 800e2b6:	6163      	str	r3, [r4, #20]
 800e2b8:	2300      	movs	r3, #0
 800e2ba:	9309      	str	r3, [sp, #36]	; 0x24
 800e2bc:	2320      	movs	r3, #32
 800e2be:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800e2c2:	2330      	movs	r3, #48	; 0x30
 800e2c4:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800e2c8:	9503      	str	r5, [sp, #12]
 800e2ca:	f04f 0b01 	mov.w	fp, #1
 800e2ce:	4637      	mov	r7, r6
 800e2d0:	463d      	mov	r5, r7
 800e2d2:	f815 3b01 	ldrb.w	r3, [r5], #1
 800e2d6:	b10b      	cbz	r3, 800e2dc <_svfiprintf_r+0x58>
 800e2d8:	2b25      	cmp	r3, #37	; 0x25
 800e2da:	d13e      	bne.n	800e35a <_svfiprintf_r+0xd6>
 800e2dc:	ebb7 0a06 	subs.w	sl, r7, r6
 800e2e0:	d00b      	beq.n	800e2fa <_svfiprintf_r+0x76>
 800e2e2:	4653      	mov	r3, sl
 800e2e4:	4632      	mov	r2, r6
 800e2e6:	4621      	mov	r1, r4
 800e2e8:	4640      	mov	r0, r8
 800e2ea:	f7ff ff71 	bl	800e1d0 <__ssputs_r>
 800e2ee:	3001      	adds	r0, #1
 800e2f0:	f000 80a4 	beq.w	800e43c <_svfiprintf_r+0x1b8>
 800e2f4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800e2f6:	4453      	add	r3, sl
 800e2f8:	9309      	str	r3, [sp, #36]	; 0x24
 800e2fa:	783b      	ldrb	r3, [r7, #0]
 800e2fc:	2b00      	cmp	r3, #0
 800e2fe:	f000 809d 	beq.w	800e43c <_svfiprintf_r+0x1b8>
 800e302:	2300      	movs	r3, #0
 800e304:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800e308:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800e30c:	9304      	str	r3, [sp, #16]
 800e30e:	9307      	str	r3, [sp, #28]
 800e310:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800e314:	931a      	str	r3, [sp, #104]	; 0x68
 800e316:	462f      	mov	r7, r5
 800e318:	2205      	movs	r2, #5
 800e31a:	f817 1b01 	ldrb.w	r1, [r7], #1
 800e31e:	4850      	ldr	r0, [pc, #320]	; (800e460 <_svfiprintf_r+0x1dc>)
 800e320:	f7f1 ff86 	bl	8000230 <memchr>
 800e324:	9b04      	ldr	r3, [sp, #16]
 800e326:	b9d0      	cbnz	r0, 800e35e <_svfiprintf_r+0xda>
 800e328:	06d9      	lsls	r1, r3, #27
 800e32a:	bf44      	itt	mi
 800e32c:	2220      	movmi	r2, #32
 800e32e:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 800e332:	071a      	lsls	r2, r3, #28
 800e334:	bf44      	itt	mi
 800e336:	222b      	movmi	r2, #43	; 0x2b
 800e338:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 800e33c:	782a      	ldrb	r2, [r5, #0]
 800e33e:	2a2a      	cmp	r2, #42	; 0x2a
 800e340:	d015      	beq.n	800e36e <_svfiprintf_r+0xea>
 800e342:	9a07      	ldr	r2, [sp, #28]
 800e344:	462f      	mov	r7, r5
 800e346:	2000      	movs	r0, #0
 800e348:	250a      	movs	r5, #10
 800e34a:	4639      	mov	r1, r7
 800e34c:	f811 3b01 	ldrb.w	r3, [r1], #1
 800e350:	3b30      	subs	r3, #48	; 0x30
 800e352:	2b09      	cmp	r3, #9
 800e354:	d94d      	bls.n	800e3f2 <_svfiprintf_r+0x16e>
 800e356:	b1b8      	cbz	r0, 800e388 <_svfiprintf_r+0x104>
 800e358:	e00f      	b.n	800e37a <_svfiprintf_r+0xf6>
 800e35a:	462f      	mov	r7, r5
 800e35c:	e7b8      	b.n	800e2d0 <_svfiprintf_r+0x4c>
 800e35e:	4a40      	ldr	r2, [pc, #256]	; (800e460 <_svfiprintf_r+0x1dc>)
 800e360:	1a80      	subs	r0, r0, r2
 800e362:	fa0b f000 	lsl.w	r0, fp, r0
 800e366:	4318      	orrs	r0, r3
 800e368:	9004      	str	r0, [sp, #16]
 800e36a:	463d      	mov	r5, r7
 800e36c:	e7d3      	b.n	800e316 <_svfiprintf_r+0x92>
 800e36e:	9a03      	ldr	r2, [sp, #12]
 800e370:	1d11      	adds	r1, r2, #4
 800e372:	6812      	ldr	r2, [r2, #0]
 800e374:	9103      	str	r1, [sp, #12]
 800e376:	2a00      	cmp	r2, #0
 800e378:	db01      	blt.n	800e37e <_svfiprintf_r+0xfa>
 800e37a:	9207      	str	r2, [sp, #28]
 800e37c:	e004      	b.n	800e388 <_svfiprintf_r+0x104>
 800e37e:	4252      	negs	r2, r2
 800e380:	f043 0302 	orr.w	r3, r3, #2
 800e384:	9207      	str	r2, [sp, #28]
 800e386:	9304      	str	r3, [sp, #16]
 800e388:	783b      	ldrb	r3, [r7, #0]
 800e38a:	2b2e      	cmp	r3, #46	; 0x2e
 800e38c:	d10c      	bne.n	800e3a8 <_svfiprintf_r+0x124>
 800e38e:	787b      	ldrb	r3, [r7, #1]
 800e390:	2b2a      	cmp	r3, #42	; 0x2a
 800e392:	d133      	bne.n	800e3fc <_svfiprintf_r+0x178>
 800e394:	9b03      	ldr	r3, [sp, #12]
 800e396:	1d1a      	adds	r2, r3, #4
 800e398:	681b      	ldr	r3, [r3, #0]
 800e39a:	9203      	str	r2, [sp, #12]
 800e39c:	2b00      	cmp	r3, #0
 800e39e:	bfb8      	it	lt
 800e3a0:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 800e3a4:	3702      	adds	r7, #2
 800e3a6:	9305      	str	r3, [sp, #20]
 800e3a8:	4d2e      	ldr	r5, [pc, #184]	; (800e464 <_svfiprintf_r+0x1e0>)
 800e3aa:	7839      	ldrb	r1, [r7, #0]
 800e3ac:	2203      	movs	r2, #3
 800e3ae:	4628      	mov	r0, r5
 800e3b0:	f7f1 ff3e 	bl	8000230 <memchr>
 800e3b4:	b138      	cbz	r0, 800e3c6 <_svfiprintf_r+0x142>
 800e3b6:	2340      	movs	r3, #64	; 0x40
 800e3b8:	1b40      	subs	r0, r0, r5
 800e3ba:	fa03 f000 	lsl.w	r0, r3, r0
 800e3be:	9b04      	ldr	r3, [sp, #16]
 800e3c0:	4303      	orrs	r3, r0
 800e3c2:	3701      	adds	r7, #1
 800e3c4:	9304      	str	r3, [sp, #16]
 800e3c6:	7839      	ldrb	r1, [r7, #0]
 800e3c8:	4827      	ldr	r0, [pc, #156]	; (800e468 <_svfiprintf_r+0x1e4>)
 800e3ca:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800e3ce:	2206      	movs	r2, #6
 800e3d0:	1c7e      	adds	r6, r7, #1
 800e3d2:	f7f1 ff2d 	bl	8000230 <memchr>
 800e3d6:	2800      	cmp	r0, #0
 800e3d8:	d038      	beq.n	800e44c <_svfiprintf_r+0x1c8>
 800e3da:	4b24      	ldr	r3, [pc, #144]	; (800e46c <_svfiprintf_r+0x1e8>)
 800e3dc:	bb13      	cbnz	r3, 800e424 <_svfiprintf_r+0x1a0>
 800e3de:	9b03      	ldr	r3, [sp, #12]
 800e3e0:	3307      	adds	r3, #7
 800e3e2:	f023 0307 	bic.w	r3, r3, #7
 800e3e6:	3308      	adds	r3, #8
 800e3e8:	9303      	str	r3, [sp, #12]
 800e3ea:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800e3ec:	444b      	add	r3, r9
 800e3ee:	9309      	str	r3, [sp, #36]	; 0x24
 800e3f0:	e76d      	b.n	800e2ce <_svfiprintf_r+0x4a>
 800e3f2:	fb05 3202 	mla	r2, r5, r2, r3
 800e3f6:	2001      	movs	r0, #1
 800e3f8:	460f      	mov	r7, r1
 800e3fa:	e7a6      	b.n	800e34a <_svfiprintf_r+0xc6>
 800e3fc:	2300      	movs	r3, #0
 800e3fe:	3701      	adds	r7, #1
 800e400:	9305      	str	r3, [sp, #20]
 800e402:	4619      	mov	r1, r3
 800e404:	250a      	movs	r5, #10
 800e406:	4638      	mov	r0, r7
 800e408:	f810 2b01 	ldrb.w	r2, [r0], #1
 800e40c:	3a30      	subs	r2, #48	; 0x30
 800e40e:	2a09      	cmp	r2, #9
 800e410:	d903      	bls.n	800e41a <_svfiprintf_r+0x196>
 800e412:	2b00      	cmp	r3, #0
 800e414:	d0c8      	beq.n	800e3a8 <_svfiprintf_r+0x124>
 800e416:	9105      	str	r1, [sp, #20]
 800e418:	e7c6      	b.n	800e3a8 <_svfiprintf_r+0x124>
 800e41a:	fb05 2101 	mla	r1, r5, r1, r2
 800e41e:	2301      	movs	r3, #1
 800e420:	4607      	mov	r7, r0
 800e422:	e7f0      	b.n	800e406 <_svfiprintf_r+0x182>
 800e424:	ab03      	add	r3, sp, #12
 800e426:	9300      	str	r3, [sp, #0]
 800e428:	4622      	mov	r2, r4
 800e42a:	4b11      	ldr	r3, [pc, #68]	; (800e470 <_svfiprintf_r+0x1ec>)
 800e42c:	a904      	add	r1, sp, #16
 800e42e:	4640      	mov	r0, r8
 800e430:	f7fd fdc8 	bl	800bfc4 <_printf_float>
 800e434:	f1b0 3fff 	cmp.w	r0, #4294967295	; 0xffffffff
 800e438:	4681      	mov	r9, r0
 800e43a:	d1d6      	bne.n	800e3ea <_svfiprintf_r+0x166>
 800e43c:	89a3      	ldrh	r3, [r4, #12]
 800e43e:	065b      	lsls	r3, r3, #25
 800e440:	f53f af35 	bmi.w	800e2ae <_svfiprintf_r+0x2a>
 800e444:	9809      	ldr	r0, [sp, #36]	; 0x24
 800e446:	b01d      	add	sp, #116	; 0x74
 800e448:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e44c:	ab03      	add	r3, sp, #12
 800e44e:	9300      	str	r3, [sp, #0]
 800e450:	4622      	mov	r2, r4
 800e452:	4b07      	ldr	r3, [pc, #28]	; (800e470 <_svfiprintf_r+0x1ec>)
 800e454:	a904      	add	r1, sp, #16
 800e456:	4640      	mov	r0, r8
 800e458:	f7fe f86a 	bl	800c530 <_printf_i>
 800e45c:	e7ea      	b.n	800e434 <_svfiprintf_r+0x1b0>
 800e45e:	bf00      	nop
 800e460:	0800efd4 	.word	0x0800efd4
 800e464:	0800efda 	.word	0x0800efda
 800e468:	0800efde 	.word	0x0800efde
 800e46c:	0800bfc5 	.word	0x0800bfc5
 800e470:	0800e1d1 	.word	0x0800e1d1

0800e474 <_sbrk_r>:
 800e474:	b538      	push	{r3, r4, r5, lr}
 800e476:	4c06      	ldr	r4, [pc, #24]	; (800e490 <_sbrk_r+0x1c>)
 800e478:	2300      	movs	r3, #0
 800e47a:	4605      	mov	r5, r0
 800e47c:	4608      	mov	r0, r1
 800e47e:	6023      	str	r3, [r4, #0]
 800e480:	f7f6 fdb8 	bl	8004ff4 <_sbrk>
 800e484:	1c43      	adds	r3, r0, #1
 800e486:	d102      	bne.n	800e48e <_sbrk_r+0x1a>
 800e488:	6823      	ldr	r3, [r4, #0]
 800e48a:	b103      	cbz	r3, 800e48e <_sbrk_r+0x1a>
 800e48c:	602b      	str	r3, [r5, #0]
 800e48e:	bd38      	pop	{r3, r4, r5, pc}
 800e490:	20001890 	.word	0x20001890

0800e494 <__sread>:
 800e494:	b510      	push	{r4, lr}
 800e496:	460c      	mov	r4, r1
 800e498:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800e49c:	f000 f8e8 	bl	800e670 <_read_r>
 800e4a0:	2800      	cmp	r0, #0
 800e4a2:	bfab      	itete	ge
 800e4a4:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800e4a6:	89a3      	ldrhlt	r3, [r4, #12]
 800e4a8:	181b      	addge	r3, r3, r0
 800e4aa:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800e4ae:	bfac      	ite	ge
 800e4b0:	6563      	strge	r3, [r4, #84]	; 0x54
 800e4b2:	81a3      	strhlt	r3, [r4, #12]
 800e4b4:	bd10      	pop	{r4, pc}

0800e4b6 <__swrite>:
 800e4b6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800e4ba:	461f      	mov	r7, r3
 800e4bc:	898b      	ldrh	r3, [r1, #12]
 800e4be:	05db      	lsls	r3, r3, #23
 800e4c0:	4605      	mov	r5, r0
 800e4c2:	460c      	mov	r4, r1
 800e4c4:	4616      	mov	r6, r2
 800e4c6:	d505      	bpl.n	800e4d4 <__swrite+0x1e>
 800e4c8:	2302      	movs	r3, #2
 800e4ca:	2200      	movs	r2, #0
 800e4cc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800e4d0:	f000 f868 	bl	800e5a4 <_lseek_r>
 800e4d4:	89a3      	ldrh	r3, [r4, #12]
 800e4d6:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800e4da:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800e4de:	81a3      	strh	r3, [r4, #12]
 800e4e0:	4632      	mov	r2, r6
 800e4e2:	463b      	mov	r3, r7
 800e4e4:	4628      	mov	r0, r5
 800e4e6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800e4ea:	f000 b817 	b.w	800e51c <_write_r>

0800e4ee <__sseek>:
 800e4ee:	b510      	push	{r4, lr}
 800e4f0:	460c      	mov	r4, r1
 800e4f2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800e4f6:	f000 f855 	bl	800e5a4 <_lseek_r>
 800e4fa:	1c43      	adds	r3, r0, #1
 800e4fc:	89a3      	ldrh	r3, [r4, #12]
 800e4fe:	bf15      	itete	ne
 800e500:	6560      	strne	r0, [r4, #84]	; 0x54
 800e502:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800e506:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800e50a:	81a3      	strheq	r3, [r4, #12]
 800e50c:	bf18      	it	ne
 800e50e:	81a3      	strhne	r3, [r4, #12]
 800e510:	bd10      	pop	{r4, pc}

0800e512 <__sclose>:
 800e512:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800e516:	f000 b813 	b.w	800e540 <_close_r>
	...

0800e51c <_write_r>:
 800e51c:	b538      	push	{r3, r4, r5, lr}
 800e51e:	4c07      	ldr	r4, [pc, #28]	; (800e53c <_write_r+0x20>)
 800e520:	4605      	mov	r5, r0
 800e522:	4608      	mov	r0, r1
 800e524:	4611      	mov	r1, r2
 800e526:	2200      	movs	r2, #0
 800e528:	6022      	str	r2, [r4, #0]
 800e52a:	461a      	mov	r2, r3
 800e52c:	f7f6 f999 	bl	8004862 <_write>
 800e530:	1c43      	adds	r3, r0, #1
 800e532:	d102      	bne.n	800e53a <_write_r+0x1e>
 800e534:	6823      	ldr	r3, [r4, #0]
 800e536:	b103      	cbz	r3, 800e53a <_write_r+0x1e>
 800e538:	602b      	str	r3, [r5, #0]
 800e53a:	bd38      	pop	{r3, r4, r5, pc}
 800e53c:	20001890 	.word	0x20001890

0800e540 <_close_r>:
 800e540:	b538      	push	{r3, r4, r5, lr}
 800e542:	4c06      	ldr	r4, [pc, #24]	; (800e55c <_close_r+0x1c>)
 800e544:	2300      	movs	r3, #0
 800e546:	4605      	mov	r5, r0
 800e548:	4608      	mov	r0, r1
 800e54a:	6023      	str	r3, [r4, #0]
 800e54c:	f7f6 fd1d 	bl	8004f8a <_close>
 800e550:	1c43      	adds	r3, r0, #1
 800e552:	d102      	bne.n	800e55a <_close_r+0x1a>
 800e554:	6823      	ldr	r3, [r4, #0]
 800e556:	b103      	cbz	r3, 800e55a <_close_r+0x1a>
 800e558:	602b      	str	r3, [r5, #0]
 800e55a:	bd38      	pop	{r3, r4, r5, pc}
 800e55c:	20001890 	.word	0x20001890

0800e560 <_fstat_r>:
 800e560:	b538      	push	{r3, r4, r5, lr}
 800e562:	4c07      	ldr	r4, [pc, #28]	; (800e580 <_fstat_r+0x20>)
 800e564:	2300      	movs	r3, #0
 800e566:	4605      	mov	r5, r0
 800e568:	4608      	mov	r0, r1
 800e56a:	4611      	mov	r1, r2
 800e56c:	6023      	str	r3, [r4, #0]
 800e56e:	f7f6 fd18 	bl	8004fa2 <_fstat>
 800e572:	1c43      	adds	r3, r0, #1
 800e574:	d102      	bne.n	800e57c <_fstat_r+0x1c>
 800e576:	6823      	ldr	r3, [r4, #0]
 800e578:	b103      	cbz	r3, 800e57c <_fstat_r+0x1c>
 800e57a:	602b      	str	r3, [r5, #0]
 800e57c:	bd38      	pop	{r3, r4, r5, pc}
 800e57e:	bf00      	nop
 800e580:	20001890 	.word	0x20001890

0800e584 <_isatty_r>:
 800e584:	b538      	push	{r3, r4, r5, lr}
 800e586:	4c06      	ldr	r4, [pc, #24]	; (800e5a0 <_isatty_r+0x1c>)
 800e588:	2300      	movs	r3, #0
 800e58a:	4605      	mov	r5, r0
 800e58c:	4608      	mov	r0, r1
 800e58e:	6023      	str	r3, [r4, #0]
 800e590:	f7f6 fd17 	bl	8004fc2 <_isatty>
 800e594:	1c43      	adds	r3, r0, #1
 800e596:	d102      	bne.n	800e59e <_isatty_r+0x1a>
 800e598:	6823      	ldr	r3, [r4, #0]
 800e59a:	b103      	cbz	r3, 800e59e <_isatty_r+0x1a>
 800e59c:	602b      	str	r3, [r5, #0]
 800e59e:	bd38      	pop	{r3, r4, r5, pc}
 800e5a0:	20001890 	.word	0x20001890

0800e5a4 <_lseek_r>:
 800e5a4:	b538      	push	{r3, r4, r5, lr}
 800e5a6:	4c07      	ldr	r4, [pc, #28]	; (800e5c4 <_lseek_r+0x20>)
 800e5a8:	4605      	mov	r5, r0
 800e5aa:	4608      	mov	r0, r1
 800e5ac:	4611      	mov	r1, r2
 800e5ae:	2200      	movs	r2, #0
 800e5b0:	6022      	str	r2, [r4, #0]
 800e5b2:	461a      	mov	r2, r3
 800e5b4:	f7f6 fd10 	bl	8004fd8 <_lseek>
 800e5b8:	1c43      	adds	r3, r0, #1
 800e5ba:	d102      	bne.n	800e5c2 <_lseek_r+0x1e>
 800e5bc:	6823      	ldr	r3, [r4, #0]
 800e5be:	b103      	cbz	r3, 800e5c2 <_lseek_r+0x1e>
 800e5c0:	602b      	str	r3, [r5, #0]
 800e5c2:	bd38      	pop	{r3, r4, r5, pc}
 800e5c4:	20001890 	.word	0x20001890

0800e5c8 <__ascii_mbtowc>:
 800e5c8:	b082      	sub	sp, #8
 800e5ca:	b901      	cbnz	r1, 800e5ce <__ascii_mbtowc+0x6>
 800e5cc:	a901      	add	r1, sp, #4
 800e5ce:	b142      	cbz	r2, 800e5e2 <__ascii_mbtowc+0x1a>
 800e5d0:	b14b      	cbz	r3, 800e5e6 <__ascii_mbtowc+0x1e>
 800e5d2:	7813      	ldrb	r3, [r2, #0]
 800e5d4:	600b      	str	r3, [r1, #0]
 800e5d6:	7812      	ldrb	r2, [r2, #0]
 800e5d8:	1c10      	adds	r0, r2, #0
 800e5da:	bf18      	it	ne
 800e5dc:	2001      	movne	r0, #1
 800e5de:	b002      	add	sp, #8
 800e5e0:	4770      	bx	lr
 800e5e2:	4610      	mov	r0, r2
 800e5e4:	e7fb      	b.n	800e5de <__ascii_mbtowc+0x16>
 800e5e6:	f06f 0001 	mvn.w	r0, #1
 800e5ea:	e7f8      	b.n	800e5de <__ascii_mbtowc+0x16>

0800e5ec <memmove>:
 800e5ec:	4288      	cmp	r0, r1
 800e5ee:	b510      	push	{r4, lr}
 800e5f0:	eb01 0302 	add.w	r3, r1, r2
 800e5f4:	d807      	bhi.n	800e606 <memmove+0x1a>
 800e5f6:	1e42      	subs	r2, r0, #1
 800e5f8:	4299      	cmp	r1, r3
 800e5fa:	d00a      	beq.n	800e612 <memmove+0x26>
 800e5fc:	f811 4b01 	ldrb.w	r4, [r1], #1
 800e600:	f802 4f01 	strb.w	r4, [r2, #1]!
 800e604:	e7f8      	b.n	800e5f8 <memmove+0xc>
 800e606:	4283      	cmp	r3, r0
 800e608:	d9f5      	bls.n	800e5f6 <memmove+0xa>
 800e60a:	1881      	adds	r1, r0, r2
 800e60c:	1ad2      	subs	r2, r2, r3
 800e60e:	42d3      	cmn	r3, r2
 800e610:	d100      	bne.n	800e614 <memmove+0x28>
 800e612:	bd10      	pop	{r4, pc}
 800e614:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800e618:	f801 4d01 	strb.w	r4, [r1, #-1]!
 800e61c:	e7f7      	b.n	800e60e <memmove+0x22>

0800e61e <__malloc_lock>:
 800e61e:	4770      	bx	lr

0800e620 <__malloc_unlock>:
 800e620:	4770      	bx	lr

0800e622 <_realloc_r>:
 800e622:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e624:	4607      	mov	r7, r0
 800e626:	4614      	mov	r4, r2
 800e628:	460e      	mov	r6, r1
 800e62a:	b921      	cbnz	r1, 800e636 <_realloc_r+0x14>
 800e62c:	4611      	mov	r1, r2
 800e62e:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 800e632:	f7ff bd73 	b.w	800e11c <_malloc_r>
 800e636:	b922      	cbnz	r2, 800e642 <_realloc_r+0x20>
 800e638:	f7ff fd22 	bl	800e080 <_free_r>
 800e63c:	4625      	mov	r5, r4
 800e63e:	4628      	mov	r0, r5
 800e640:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800e642:	f000 f834 	bl	800e6ae <_malloc_usable_size_r>
 800e646:	42a0      	cmp	r0, r4
 800e648:	d20f      	bcs.n	800e66a <_realloc_r+0x48>
 800e64a:	4621      	mov	r1, r4
 800e64c:	4638      	mov	r0, r7
 800e64e:	f7ff fd65 	bl	800e11c <_malloc_r>
 800e652:	4605      	mov	r5, r0
 800e654:	2800      	cmp	r0, #0
 800e656:	d0f2      	beq.n	800e63e <_realloc_r+0x1c>
 800e658:	4631      	mov	r1, r6
 800e65a:	4622      	mov	r2, r4
 800e65c:	f7ff fa1c 	bl	800da98 <memcpy>
 800e660:	4631      	mov	r1, r6
 800e662:	4638      	mov	r0, r7
 800e664:	f7ff fd0c 	bl	800e080 <_free_r>
 800e668:	e7e9      	b.n	800e63e <_realloc_r+0x1c>
 800e66a:	4635      	mov	r5, r6
 800e66c:	e7e7      	b.n	800e63e <_realloc_r+0x1c>
	...

0800e670 <_read_r>:
 800e670:	b538      	push	{r3, r4, r5, lr}
 800e672:	4c07      	ldr	r4, [pc, #28]	; (800e690 <_read_r+0x20>)
 800e674:	4605      	mov	r5, r0
 800e676:	4608      	mov	r0, r1
 800e678:	4611      	mov	r1, r2
 800e67a:	2200      	movs	r2, #0
 800e67c:	6022      	str	r2, [r4, #0]
 800e67e:	461a      	mov	r2, r3
 800e680:	f7f6 fc66 	bl	8004f50 <_read>
 800e684:	1c43      	adds	r3, r0, #1
 800e686:	d102      	bne.n	800e68e <_read_r+0x1e>
 800e688:	6823      	ldr	r3, [r4, #0]
 800e68a:	b103      	cbz	r3, 800e68e <_read_r+0x1e>
 800e68c:	602b      	str	r3, [r5, #0]
 800e68e:	bd38      	pop	{r3, r4, r5, pc}
 800e690:	20001890 	.word	0x20001890

0800e694 <__ascii_wctomb>:
 800e694:	b149      	cbz	r1, 800e6aa <__ascii_wctomb+0x16>
 800e696:	2aff      	cmp	r2, #255	; 0xff
 800e698:	bf85      	ittet	hi
 800e69a:	238a      	movhi	r3, #138	; 0x8a
 800e69c:	6003      	strhi	r3, [r0, #0]
 800e69e:	700a      	strbls	r2, [r1, #0]
 800e6a0:	f04f 30ff 	movhi.w	r0, #4294967295	; 0xffffffff
 800e6a4:	bf98      	it	ls
 800e6a6:	2001      	movls	r0, #1
 800e6a8:	4770      	bx	lr
 800e6aa:	4608      	mov	r0, r1
 800e6ac:	4770      	bx	lr

0800e6ae <_malloc_usable_size_r>:
 800e6ae:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800e6b2:	1f18      	subs	r0, r3, #4
 800e6b4:	2b00      	cmp	r3, #0
 800e6b6:	bfbc      	itt	lt
 800e6b8:	580b      	ldrlt	r3, [r1, r0]
 800e6ba:	18c0      	addlt	r0, r0, r3
 800e6bc:	4770      	bx	lr
	...

0800e6c0 <_init>:
 800e6c0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e6c2:	bf00      	nop
 800e6c4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800e6c6:	bc08      	pop	{r3}
 800e6c8:	469e      	mov	lr, r3
 800e6ca:	4770      	bx	lr

0800e6cc <_fini>:
 800e6cc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e6ce:	bf00      	nop
 800e6d0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800e6d2:	bc08      	pop	{r3}
 800e6d4:	469e      	mov	lr, r3
 800e6d6:	4770      	bx	lr
