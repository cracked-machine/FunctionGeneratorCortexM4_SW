
FunctionGeneratorCortexM4_SW_V1.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00009568  080001e0  080001e0  000101e0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000003bc  08009748  08009748  00019748  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08009b04  08009b04  000204d4  2**0
                  CONTENTS
  4 .ARM          00000000  08009b04  08009b04  000204d4  2**0
                  CONTENTS
  5 .preinit_array 00000000  08009b04  08009b04  000204d4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08009b04  08009b04  00019b04  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08009b08  08009b08  00019b08  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000004d4  20000000  08009b0c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000004ac  200004d4  08009fe0  000204d4  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000980  08009fe0  00020980  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000204d4  2**0
                  CONTENTS, READONLY
 12 .debug_info   00022ed9  00000000  00000000  00020504  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 000047e3  00000000  00000000  000433dd  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00001b38  00000000  00000000  00047bc0  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 000018f0  00000000  00000000  000496f8  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  0002ed14  00000000  00000000  0004afe8  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0001ab57  00000000  00000000  00079cfc  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    00123856  00000000  00000000  00094853  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  001b80a9  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00007a1c  00000000  00000000  001b8124  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001e0 <__do_global_dtors_aux>:
 80001e0:	b510      	push	{r4, lr}
 80001e2:	4c05      	ldr	r4, [pc, #20]	; (80001f8 <__do_global_dtors_aux+0x18>)
 80001e4:	7823      	ldrb	r3, [r4, #0]
 80001e6:	b933      	cbnz	r3, 80001f6 <__do_global_dtors_aux+0x16>
 80001e8:	4b04      	ldr	r3, [pc, #16]	; (80001fc <__do_global_dtors_aux+0x1c>)
 80001ea:	b113      	cbz	r3, 80001f2 <__do_global_dtors_aux+0x12>
 80001ec:	4804      	ldr	r0, [pc, #16]	; (8000200 <__do_global_dtors_aux+0x20>)
 80001ee:	f3af 8000 	nop.w
 80001f2:	2301      	movs	r3, #1
 80001f4:	7023      	strb	r3, [r4, #0]
 80001f6:	bd10      	pop	{r4, pc}
 80001f8:	200004d4 	.word	0x200004d4
 80001fc:	00000000 	.word	0x00000000
 8000200:	08009730 	.word	0x08009730

08000204 <frame_dummy>:
 8000204:	b508      	push	{r3, lr}
 8000206:	4b03      	ldr	r3, [pc, #12]	; (8000214 <frame_dummy+0x10>)
 8000208:	b11b      	cbz	r3, 8000212 <frame_dummy+0xe>
 800020a:	4903      	ldr	r1, [pc, #12]	; (8000218 <frame_dummy+0x14>)
 800020c:	4803      	ldr	r0, [pc, #12]	; (800021c <frame_dummy+0x18>)
 800020e:	f3af 8000 	nop.w
 8000212:	bd08      	pop	{r3, pc}
 8000214:	00000000 	.word	0x00000000
 8000218:	200004d8 	.word	0x200004d8
 800021c:	08009730 	.word	0x08009730

08000220 <strcmp>:
 8000220:	f810 2b01 	ldrb.w	r2, [r0], #1
 8000224:	f811 3b01 	ldrb.w	r3, [r1], #1
 8000228:	2a01      	cmp	r2, #1
 800022a:	bf28      	it	cs
 800022c:	429a      	cmpcs	r2, r3
 800022e:	d0f7      	beq.n	8000220 <strcmp>
 8000230:	1ad0      	subs	r0, r2, r3
 8000232:	4770      	bx	lr
	...

08000240 <memchr>:
 8000240:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000244:	2a10      	cmp	r2, #16
 8000246:	db2b      	blt.n	80002a0 <memchr+0x60>
 8000248:	f010 0f07 	tst.w	r0, #7
 800024c:	d008      	beq.n	8000260 <memchr+0x20>
 800024e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000252:	3a01      	subs	r2, #1
 8000254:	428b      	cmp	r3, r1
 8000256:	d02d      	beq.n	80002b4 <memchr+0x74>
 8000258:	f010 0f07 	tst.w	r0, #7
 800025c:	b342      	cbz	r2, 80002b0 <memchr+0x70>
 800025e:	d1f6      	bne.n	800024e <memchr+0xe>
 8000260:	b4f0      	push	{r4, r5, r6, r7}
 8000262:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000266:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800026a:	f022 0407 	bic.w	r4, r2, #7
 800026e:	f07f 0700 	mvns.w	r7, #0
 8000272:	2300      	movs	r3, #0
 8000274:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000278:	3c08      	subs	r4, #8
 800027a:	ea85 0501 	eor.w	r5, r5, r1
 800027e:	ea86 0601 	eor.w	r6, r6, r1
 8000282:	fa85 f547 	uadd8	r5, r5, r7
 8000286:	faa3 f587 	sel	r5, r3, r7
 800028a:	fa86 f647 	uadd8	r6, r6, r7
 800028e:	faa5 f687 	sel	r6, r5, r7
 8000292:	b98e      	cbnz	r6, 80002b8 <memchr+0x78>
 8000294:	d1ee      	bne.n	8000274 <memchr+0x34>
 8000296:	bcf0      	pop	{r4, r5, r6, r7}
 8000298:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800029c:	f002 0207 	and.w	r2, r2, #7
 80002a0:	b132      	cbz	r2, 80002b0 <memchr+0x70>
 80002a2:	f810 3b01 	ldrb.w	r3, [r0], #1
 80002a6:	3a01      	subs	r2, #1
 80002a8:	ea83 0301 	eor.w	r3, r3, r1
 80002ac:	b113      	cbz	r3, 80002b4 <memchr+0x74>
 80002ae:	d1f8      	bne.n	80002a2 <memchr+0x62>
 80002b0:	2000      	movs	r0, #0
 80002b2:	4770      	bx	lr
 80002b4:	3801      	subs	r0, #1
 80002b6:	4770      	bx	lr
 80002b8:	2d00      	cmp	r5, #0
 80002ba:	bf06      	itte	eq
 80002bc:	4635      	moveq	r5, r6
 80002be:	3803      	subeq	r0, #3
 80002c0:	3807      	subne	r0, #7
 80002c2:	f015 0f01 	tst.w	r5, #1
 80002c6:	d107      	bne.n	80002d8 <memchr+0x98>
 80002c8:	3001      	adds	r0, #1
 80002ca:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002ce:	bf02      	ittt	eq
 80002d0:	3001      	addeq	r0, #1
 80002d2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002d6:	3001      	addeq	r0, #1
 80002d8:	bcf0      	pop	{r4, r5, r6, r7}
 80002da:	3801      	subs	r0, #1
 80002dc:	4770      	bx	lr
 80002de:	bf00      	nop

080002e0 <DM_Init>:
 *
 *
 *
 */
void DM_Init()
{
 80002e0:	b580      	push	{r7, lr}
 80002e2:	b082      	sub	sp, #8
 80002e4:	af02      	add	r7, sp, #8
	  ILI9341_Init();
 80002e6:	f007 fc4f 	bl	8007b88 <ILI9341_Init>
	  ILI9341_Set_Rotation(SCREEN_HORIZONTAL_2);
 80002ea:	2003      	movs	r0, #3
 80002ec:	f007 fbee 	bl	8007acc <ILI9341_Set_Rotation>
	  ILI9341_Fill_Screen(WHITE);
 80002f0:	f64f 70ff 	movw	r0, #65535	; 0xffff
 80002f4:	f007 fdfe 	bl	8007ef4 <ILI9341_Fill_Screen>
	  ILI9341_Draw_Text("Initialising", 10, 10, BLACK, 1, WHITE);
 80002f8:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80002fc:	9301      	str	r3, [sp, #4]
 80002fe:	2301      	movs	r3, #1
 8000300:	9300      	str	r3, [sp, #0]
 8000302:	2300      	movs	r3, #0
 8000304:	220a      	movs	r2, #10
 8000306:	210a      	movs	r1, #10
 8000308:	4802      	ldr	r0, [pc, #8]	; (8000314 <DM_Init+0x34>)
 800030a:	f007 fadf 	bl	80078cc <ILI9341_Draw_Text>
}
 800030e:	bf00      	nop
 8000310:	46bd      	mov	sp, r7
 8000312:	bd80      	pop	{r7, pc}
 8000314:	08009748 	.word	0x08009748

08000318 <DM_RegisterStrings>:
 *
 *
 *
 */
void DM_RegisterStrings()
{
 8000318:	b580      	push	{r7, lr}
 800031a:	b084      	sub	sp, #16
 800031c:	af02      	add	r7, sp, #8
	int res = 0;
 800031e:	2300      	movs	r3, #0
 8000320:	607b      	str	r3, [r7, #4]
	res = TM_RegisterString("ONE", 100, 200, 2);
 8000322:	2302      	movs	r3, #2
 8000324:	22c8      	movs	r2, #200	; 0xc8
 8000326:	2164      	movs	r1, #100	; 0x64
 8000328:	4815      	ldr	r0, [pc, #84]	; (8000380 <DM_RegisterStrings+0x68>)
 800032a:	f008 f867 	bl	80083fc <TM_RegisterString>
 800032e:	6078      	str	r0, [r7, #4]
	res = TM_RegisterString("TWO", 110, 210, 3);
 8000330:	2303      	movs	r3, #3
 8000332:	22d2      	movs	r2, #210	; 0xd2
 8000334:	216e      	movs	r1, #110	; 0x6e
 8000336:	4813      	ldr	r0, [pc, #76]	; (8000384 <DM_RegisterStrings+0x6c>)
 8000338:	f008 f860 	bl	80083fc <TM_RegisterString>
 800033c:	6078      	str	r0, [r7, #4]
	res = TM_RegisterString("THREE", 170, 210, 3);
 800033e:	2303      	movs	r3, #3
 8000340:	22d2      	movs	r2, #210	; 0xd2
 8000342:	21aa      	movs	r1, #170	; 0xaa
 8000344:	4810      	ldr	r0, [pc, #64]	; (8000388 <DM_RegisterStrings+0x70>)
 8000346:	f008 f859 	bl	80083fc <TM_RegisterString>
 800034a:	6078      	str	r0, [r7, #4]
	res = TM_RegisterString("FOUR", 250, 210, 3);
 800034c:	2303      	movs	r3, #3
 800034e:	22d2      	movs	r2, #210	; 0xd2
 8000350:	21fa      	movs	r1, #250	; 0xfa
 8000352:	480e      	ldr	r0, [pc, #56]	; (800038c <DM_RegisterStrings+0x74>)
 8000354:	f008 f852 	bl	80083fc <TM_RegisterString>
 8000358:	6078      	str	r0, [r7, #4]
	if(res < 0)
 800035a:	687b      	ldr	r3, [r7, #4]
 800035c:	2b00      	cmp	r3, #0
 800035e:	da0a      	bge.n	8000376 <DM_RegisterStrings+0x5e>
	{
		ILI9341_Draw_Text("Exceeded String Buffer Bounds!", 10, 20, BLACK, 1, WHITE);
 8000360:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000364:	9301      	str	r3, [sp, #4]
 8000366:	2301      	movs	r3, #1
 8000368:	9300      	str	r3, [sp, #0]
 800036a:	2300      	movs	r3, #0
 800036c:	2214      	movs	r2, #20
 800036e:	210a      	movs	r1, #10
 8000370:	4807      	ldr	r0, [pc, #28]	; (8000390 <DM_RegisterStrings+0x78>)
 8000372:	f007 faab 	bl	80078cc <ILI9341_Draw_Text>
	}
}
 8000376:	bf00      	nop
 8000378:	3708      	adds	r7, #8
 800037a:	46bd      	mov	sp, r7
 800037c:	bd80      	pop	{r7, pc}
 800037e:	bf00      	nop
 8000380:	08009758 	.word	0x08009758
 8000384:	0800975c 	.word	0x0800975c
 8000388:	08009760 	.word	0x08009760
 800038c:	08009768 	.word	0x08009768
 8000390:	08009770 	.word	0x08009770

08000394 <DM_UpdateDisplay>:
 *
 *
 *
 */
void DM_UpdateDisplay()
{
 8000394:	b5b0      	push	{r4, r5, r7, lr}
 8000396:	b086      	sub	sp, #24
 8000398:	af04      	add	r7, sp, #16
	int res;
	if( (res = TM_FindStringRegister("ONE")) >= 0 )
 800039a:	4822      	ldr	r0, [pc, #136]	; (8000424 <DM_UpdateDisplay+0x90>)
 800039c:	f008 f80a 	bl	80083b4 <TM_FindStringRegister>
 80003a0:	6078      	str	r0, [r7, #4]
 80003a2:	687b      	ldr	r3, [r7, #4]
 80003a4:	2b00      	cmp	r3, #0
 80003a6:	db2c      	blt.n	8000402 <DM_UpdateDisplay+0x6e>
	{
		ILI9341_Draw_Text(STRINGREG[res].text, STRINGREG[res].x, STRINGREG[res].y, BLACK, STRINGREG[res].size, RED);
 80003a8:	687b      	ldr	r3, [r7, #4]
 80003aa:	2226      	movs	r2, #38	; 0x26
 80003ac:	fb02 f303 	mul.w	r3, r2, r3
 80003b0:	4a1d      	ldr	r2, [pc, #116]	; (8000428 <DM_UpdateDisplay+0x94>)
 80003b2:	1898      	adds	r0, r3, r2
 80003b4:	4a1c      	ldr	r2, [pc, #112]	; (8000428 <DM_UpdateDisplay+0x94>)
 80003b6:	687b      	ldr	r3, [r7, #4]
 80003b8:	2126      	movs	r1, #38	; 0x26
 80003ba:	fb01 f303 	mul.w	r3, r1, r3
 80003be:	4413      	add	r3, r2
 80003c0:	3320      	adds	r3, #32
 80003c2:	f9b3 3000 	ldrsh.w	r3, [r3]
 80003c6:	b29c      	uxth	r4, r3
 80003c8:	4a17      	ldr	r2, [pc, #92]	; (8000428 <DM_UpdateDisplay+0x94>)
 80003ca:	687b      	ldr	r3, [r7, #4]
 80003cc:	2126      	movs	r1, #38	; 0x26
 80003ce:	fb01 f303 	mul.w	r3, r1, r3
 80003d2:	4413      	add	r3, r2
 80003d4:	3322      	adds	r3, #34	; 0x22
 80003d6:	f9b3 3000 	ldrsh.w	r3, [r3]
 80003da:	b29d      	uxth	r5, r3
 80003dc:	4a12      	ldr	r2, [pc, #72]	; (8000428 <DM_UpdateDisplay+0x94>)
 80003de:	687b      	ldr	r3, [r7, #4]
 80003e0:	2126      	movs	r1, #38	; 0x26
 80003e2:	fb01 f303 	mul.w	r3, r1, r3
 80003e6:	4413      	add	r3, r2
 80003e8:	3324      	adds	r3, #36	; 0x24
 80003ea:	f993 3000 	ldrsb.w	r3, [r3]
 80003ee:	b29b      	uxth	r3, r3
 80003f0:	f44f 4278 	mov.w	r2, #63488	; 0xf800
 80003f4:	9201      	str	r2, [sp, #4]
 80003f6:	9300      	str	r3, [sp, #0]
 80003f8:	2300      	movs	r3, #0
 80003fa:	462a      	mov	r2, r5
 80003fc:	4621      	mov	r1, r4
 80003fe:	f007 fa65 	bl	80078cc <ILI9341_Draw_Text>
	}

	ILI9341_Draw_Bordered_Filled_Rectangle_Coord(	50,
 8000402:	2300      	movs	r3, #0
 8000404:	9302      	str	r3, [sp, #8]
 8000406:	230a      	movs	r3, #10
 8000408:	9301      	str	r3, [sp, #4]
 800040a:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 800040e:	9300      	str	r3, [sp, #0]
 8000410:	2364      	movs	r3, #100	; 0x64
 8000412:	2264      	movs	r2, #100	; 0x64
 8000414:	2132      	movs	r1, #50	; 0x32
 8000416:	2032      	movs	r0, #50	; 0x32
 8000418:	f007 f8f4 	bl	8007604 <ILI9341_Draw_Bordered_Filled_Rectangle_Coord>
													BTN_HEIGHT,
													RED,
													BORDER_SIZE,
													BLACK);
*/
}
 800041c:	bf00      	nop
 800041e:	3708      	adds	r7, #8
 8000420:	46bd      	mov	sp, r7
 8000422:	bdb0      	pop	{r4, r5, r7, pc}
 8000424:	08009758 	.word	0x08009758
 8000428:	200003d8 	.word	0x200003d8

0800042c <MX_ADC1_Init>:
ADC_HandleTypeDef hadc1;
DMA_HandleTypeDef hdma_adc1;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 800042c:	b580      	push	{r7, lr}
 800042e:	b08c      	sub	sp, #48	; 0x30
 8000430:	af00      	add	r7, sp, #0
  ADC_MultiModeTypeDef multimode = {0};
 8000432:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000436:	2200      	movs	r2, #0
 8000438:	601a      	str	r2, [r3, #0]
 800043a:	605a      	str	r2, [r3, #4]
 800043c:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 800043e:	1d3b      	adds	r3, r7, #4
 8000440:	2220      	movs	r2, #32
 8000442:	2100      	movs	r1, #0
 8000444:	4618      	mov	r0, r3
 8000446:	f008 f84b 	bl	80084e0 <memset>

  /** Common config 
  */
  hadc1.Instance = ADC1;
 800044a:	4b32      	ldr	r3, [pc, #200]	; (8000514 <MX_ADC1_Init+0xe8>)
 800044c:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8000450:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 8000452:	4b30      	ldr	r3, [pc, #192]	; (8000514 <MX_ADC1_Init+0xe8>)
 8000454:	2200      	movs	r2, #0
 8000456:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8000458:	4b2e      	ldr	r3, [pc, #184]	; (8000514 <MX_ADC1_Init+0xe8>)
 800045a:	2200      	movs	r2, #0
 800045c:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800045e:	4b2d      	ldr	r3, [pc, #180]	; (8000514 <MX_ADC1_Init+0xe8>)
 8000460:	2200      	movs	r2, #0
 8000462:	60da      	str	r2, [r3, #12]
  hadc1.Init.GainCompensation = 0;
 8000464:	4b2b      	ldr	r3, [pc, #172]	; (8000514 <MX_ADC1_Init+0xe8>)
 8000466:	2200      	movs	r2, #0
 8000468:	611a      	str	r2, [r3, #16]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 800046a:	4b2a      	ldr	r3, [pc, #168]	; (8000514 <MX_ADC1_Init+0xe8>)
 800046c:	2200      	movs	r2, #0
 800046e:	615a      	str	r2, [r3, #20]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000470:	4b28      	ldr	r3, [pc, #160]	; (8000514 <MX_ADC1_Init+0xe8>)
 8000472:	2204      	movs	r2, #4
 8000474:	619a      	str	r2, [r3, #24]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8000476:	4b27      	ldr	r3, [pc, #156]	; (8000514 <MX_ADC1_Init+0xe8>)
 8000478:	2200      	movs	r2, #0
 800047a:	771a      	strb	r2, [r3, #28]
  hadc1.Init.ContinuousConvMode = ENABLE;
 800047c:	4b25      	ldr	r3, [pc, #148]	; (8000514 <MX_ADC1_Init+0xe8>)
 800047e:	2201      	movs	r2, #1
 8000480:	775a      	strb	r2, [r3, #29]
  hadc1.Init.NbrOfConversion = 1;
 8000482:	4b24      	ldr	r3, [pc, #144]	; (8000514 <MX_ADC1_Init+0xe8>)
 8000484:	2201      	movs	r2, #1
 8000486:	621a      	str	r2, [r3, #32]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000488:	4b22      	ldr	r3, [pc, #136]	; (8000514 <MX_ADC1_Init+0xe8>)
 800048a:	2200      	movs	r2, #0
 800048c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000490:	4b20      	ldr	r3, [pc, #128]	; (8000514 <MX_ADC1_Init+0xe8>)
 8000492:	2200      	movs	r2, #0
 8000494:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000496:	4b1f      	ldr	r3, [pc, #124]	; (8000514 <MX_ADC1_Init+0xe8>)
 8000498:	2200      	movs	r2, #0
 800049a:	631a      	str	r2, [r3, #48]	; 0x30
  hadc1.Init.DMAContinuousRequests = ENABLE;
 800049c:	4b1d      	ldr	r3, [pc, #116]	; (8000514 <MX_ADC1_Init+0xe8>)
 800049e:	2201      	movs	r2, #1
 80004a0:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hadc1.Init.Overrun = ADC_OVR_DATA_OVERWRITTEN;
 80004a4:	4b1b      	ldr	r3, [pc, #108]	; (8000514 <MX_ADC1_Init+0xe8>)
 80004a6:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80004aa:	63da      	str	r2, [r3, #60]	; 0x3c
  hadc1.Init.OversamplingMode = DISABLE;
 80004ac:	4b19      	ldr	r3, [pc, #100]	; (8000514 <MX_ADC1_Init+0xe8>)
 80004ae:	2200      	movs	r2, #0
 80004b0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80004b4:	4817      	ldr	r0, [pc, #92]	; (8000514 <MX_ADC1_Init+0xe8>)
 80004b6:	f001 ffcf 	bl	8002458 <HAL_ADC_Init>
 80004ba:	4603      	mov	r3, r0
 80004bc:	2b00      	cmp	r3, #0
 80004be:	d001      	beq.n	80004c4 <MX_ADC1_Init+0x98>
  {
    Error_Handler();
 80004c0:	f000 ff2e 	bl	8001320 <Error_Handler>
  }
  /** Configure the ADC multi-mode 
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 80004c4:	2300      	movs	r3, #0
 80004c6:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 80004c8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80004cc:	4619      	mov	r1, r3
 80004ce:	4811      	ldr	r0, [pc, #68]	; (8000514 <MX_ADC1_Init+0xe8>)
 80004d0:	f002 fd58 	bl	8002f84 <HAL_ADCEx_MultiModeConfigChannel>
 80004d4:	4603      	mov	r3, r0
 80004d6:	2b00      	cmp	r3, #0
 80004d8:	d001      	beq.n	80004de <MX_ADC1_Init+0xb2>
  {
    Error_Handler();
 80004da:	f000 ff21 	bl	8001320 <Error_Handler>
  }
  /** Configure Regular Channel 
  */
  sConfig.Channel = ADC_CHANNEL_3;
 80004de:	4b0e      	ldr	r3, [pc, #56]	; (8000518 <MX_ADC1_Init+0xec>)
 80004e0:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 80004e2:	2306      	movs	r3, #6
 80004e4:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 80004e6:	2300      	movs	r3, #0
 80004e8:	60fb      	str	r3, [r7, #12]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 80004ea:	237f      	movs	r3, #127	; 0x7f
 80004ec:	613b      	str	r3, [r7, #16]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 80004ee:	2304      	movs	r3, #4
 80004f0:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 80004f2:	2300      	movs	r3, #0
 80004f4:	61bb      	str	r3, [r7, #24]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80004f6:	1d3b      	adds	r3, r7, #4
 80004f8:	4619      	mov	r1, r3
 80004fa:	4806      	ldr	r0, [pc, #24]	; (8000514 <MX_ADC1_Init+0xe8>)
 80004fc:	f002 f96c 	bl	80027d8 <HAL_ADC_ConfigChannel>
 8000500:	4603      	mov	r3, r0
 8000502:	2b00      	cmp	r3, #0
 8000504:	d001      	beq.n	800050a <MX_ADC1_Init+0xde>
  {
    Error_Handler();
 8000506:	f000 ff0b 	bl	8001320 <Error_Handler>
  }

}
 800050a:	bf00      	nop
 800050c:	3730      	adds	r7, #48	; 0x30
 800050e:	46bd      	mov	sp, r7
 8000510:	bd80      	pop	{r7, pc}
 8000512:	bf00      	nop
 8000514:	20000514 	.word	0x20000514
 8000518:	0c900008 	.word	0x0c900008

0800051c <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 800051c:	b580      	push	{r7, lr}
 800051e:	b08a      	sub	sp, #40	; 0x28
 8000520:	af00      	add	r7, sp, #0
 8000522:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000524:	f107 0314 	add.w	r3, r7, #20
 8000528:	2200      	movs	r2, #0
 800052a:	601a      	str	r2, [r3, #0]
 800052c:	605a      	str	r2, [r3, #4]
 800052e:	609a      	str	r2, [r3, #8]
 8000530:	60da      	str	r2, [r3, #12]
 8000532:	611a      	str	r2, [r3, #16]
  if(adcHandle->Instance==ADC1)
 8000534:	687b      	ldr	r3, [r7, #4]
 8000536:	681b      	ldr	r3, [r3, #0]
 8000538:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800053c:	d14f      	bne.n	80005de <HAL_ADC_MspInit+0xc2>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* ADC1 clock enable */
    __HAL_RCC_ADC12_CLK_ENABLE();
 800053e:	4b2a      	ldr	r3, [pc, #168]	; (80005e8 <HAL_ADC_MspInit+0xcc>)
 8000540:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000542:	4a29      	ldr	r2, [pc, #164]	; (80005e8 <HAL_ADC_MspInit+0xcc>)
 8000544:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8000548:	64d3      	str	r3, [r2, #76]	; 0x4c
 800054a:	4b27      	ldr	r3, [pc, #156]	; (80005e8 <HAL_ADC_MspInit+0xcc>)
 800054c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800054e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8000552:	613b      	str	r3, [r7, #16]
 8000554:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000556:	4b24      	ldr	r3, [pc, #144]	; (80005e8 <HAL_ADC_MspInit+0xcc>)
 8000558:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800055a:	4a23      	ldr	r2, [pc, #140]	; (80005e8 <HAL_ADC_MspInit+0xcc>)
 800055c:	f043 0301 	orr.w	r3, r3, #1
 8000560:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000562:	4b21      	ldr	r3, [pc, #132]	; (80005e8 <HAL_ADC_MspInit+0xcc>)
 8000564:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000566:	f003 0301 	and.w	r3, r3, #1
 800056a:	60fb      	str	r3, [r7, #12]
 800056c:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration    
    PA2     ------> ADC1_IN3 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 800056e:	2304      	movs	r3, #4
 8000570:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000572:	2303      	movs	r3, #3
 8000574:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000576:	2300      	movs	r3, #0
 8000578:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800057a:	f107 0314 	add.w	r3, r7, #20
 800057e:	4619      	mov	r1, r3
 8000580:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000584:	f004 f81a 	bl	80045bc <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Channel1;
 8000588:	4b18      	ldr	r3, [pc, #96]	; (80005ec <HAL_ADC_MspInit+0xd0>)
 800058a:	4a19      	ldr	r2, [pc, #100]	; (80005f0 <HAL_ADC_MspInit+0xd4>)
 800058c:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Request = DMA_REQUEST_ADC1;
 800058e:	4b17      	ldr	r3, [pc, #92]	; (80005ec <HAL_ADC_MspInit+0xd0>)
 8000590:	2205      	movs	r2, #5
 8000592:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000594:	4b15      	ldr	r3, [pc, #84]	; (80005ec <HAL_ADC_MspInit+0xd0>)
 8000596:	2200      	movs	r2, #0
 8000598:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 800059a:	4b14      	ldr	r3, [pc, #80]	; (80005ec <HAL_ADC_MspInit+0xd0>)
 800059c:	2200      	movs	r2, #0
 800059e:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 80005a0:	4b12      	ldr	r3, [pc, #72]	; (80005ec <HAL_ADC_MspInit+0xd0>)
 80005a2:	2280      	movs	r2, #128	; 0x80
 80005a4:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 80005a6:	4b11      	ldr	r3, [pc, #68]	; (80005ec <HAL_ADC_MspInit+0xd0>)
 80005a8:	f44f 7200 	mov.w	r2, #512	; 0x200
 80005ac:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 80005ae:	4b0f      	ldr	r3, [pc, #60]	; (80005ec <HAL_ADC_MspInit+0xd0>)
 80005b0:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80005b4:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 80005b6:	4b0d      	ldr	r3, [pc, #52]	; (80005ec <HAL_ADC_MspInit+0xd0>)
 80005b8:	2220      	movs	r2, #32
 80005ba:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 80005bc:	4b0b      	ldr	r3, [pc, #44]	; (80005ec <HAL_ADC_MspInit+0xd0>)
 80005be:	2200      	movs	r2, #0
 80005c0:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 80005c2:	480a      	ldr	r0, [pc, #40]	; (80005ec <HAL_ADC_MspInit+0xd0>)
 80005c4:	f003 fd88 	bl	80040d8 <HAL_DMA_Init>
 80005c8:	4603      	mov	r3, r0
 80005ca:	2b00      	cmp	r3, #0
 80005cc:	d001      	beq.n	80005d2 <HAL_ADC_MspInit+0xb6>
    {
      Error_Handler();
 80005ce:	f000 fea7 	bl	8001320 <Error_Handler>
    }

    __HAL_LINKDMA(adcHandle,DMA_Handle,hdma_adc1);
 80005d2:	687b      	ldr	r3, [r7, #4]
 80005d4:	4a05      	ldr	r2, [pc, #20]	; (80005ec <HAL_ADC_MspInit+0xd0>)
 80005d6:	655a      	str	r2, [r3, #84]	; 0x54
 80005d8:	4a04      	ldr	r2, [pc, #16]	; (80005ec <HAL_ADC_MspInit+0xd0>)
 80005da:	687b      	ldr	r3, [r7, #4]
 80005dc:	6293      	str	r3, [r2, #40]	; 0x28

  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 80005de:	bf00      	nop
 80005e0:	3728      	adds	r7, #40	; 0x28
 80005e2:	46bd      	mov	sp, r7
 80005e4:	bd80      	pop	{r7, pc}
 80005e6:	bf00      	nop
 80005e8:	40021000 	.word	0x40021000
 80005ec:	20000580 	.word	0x20000580
 80005f0:	40020008 	.word	0x40020008

080005f4 <MX_COMP1_Init>:

COMP_HandleTypeDef hcomp1;

/* COMP1 init function */
void MX_COMP1_Init(void)
{
 80005f4:	b580      	push	{r7, lr}
 80005f6:	af00      	add	r7, sp, #0

  hcomp1.Instance = COMP1;
 80005f8:	4b0f      	ldr	r3, [pc, #60]	; (8000638 <MX_COMP1_Init+0x44>)
 80005fa:	4a10      	ldr	r2, [pc, #64]	; (800063c <MX_COMP1_Init+0x48>)
 80005fc:	601a      	str	r2, [r3, #0]
  hcomp1.Init.InputPlus = COMP_INPUT_PLUS_IO1;
 80005fe:	4b0e      	ldr	r3, [pc, #56]	; (8000638 <MX_COMP1_Init+0x44>)
 8000600:	2200      	movs	r2, #0
 8000602:	605a      	str	r2, [r3, #4]
  hcomp1.Init.InputMinus = COMP_INPUT_MINUS_VREFINT;
 8000604:	4b0c      	ldr	r3, [pc, #48]	; (8000638 <MX_COMP1_Init+0x44>)
 8000606:	4a0e      	ldr	r2, [pc, #56]	; (8000640 <MX_COMP1_Init+0x4c>)
 8000608:	609a      	str	r2, [r3, #8]
  hcomp1.Init.OutputPol = COMP_OUTPUTPOL_NONINVERTED;
 800060a:	4b0b      	ldr	r3, [pc, #44]	; (8000638 <MX_COMP1_Init+0x44>)
 800060c:	2200      	movs	r2, #0
 800060e:	611a      	str	r2, [r3, #16]
  hcomp1.Init.Hysteresis = COMP_HYSTERESIS_NONE;
 8000610:	4b09      	ldr	r3, [pc, #36]	; (8000638 <MX_COMP1_Init+0x44>)
 8000612:	2200      	movs	r2, #0
 8000614:	60da      	str	r2, [r3, #12]
  hcomp1.Init.BlankingSrce = COMP_BLANKINGSRC_NONE;
 8000616:	4b08      	ldr	r3, [pc, #32]	; (8000638 <MX_COMP1_Init+0x44>)
 8000618:	2200      	movs	r2, #0
 800061a:	615a      	str	r2, [r3, #20]
  hcomp1.Init.TriggerMode = COMP_TRIGGERMODE_NONE;
 800061c:	4b06      	ldr	r3, [pc, #24]	; (8000638 <MX_COMP1_Init+0x44>)
 800061e:	2200      	movs	r2, #0
 8000620:	619a      	str	r2, [r3, #24]
  if (HAL_COMP_Init(&hcomp1) != HAL_OK)
 8000622:	4805      	ldr	r0, [pc, #20]	; (8000638 <MX_COMP1_Init+0x44>)
 8000624:	f002 ff02 	bl	800342c <HAL_COMP_Init>
 8000628:	4603      	mov	r3, r0
 800062a:	2b00      	cmp	r3, #0
 800062c:	d001      	beq.n	8000632 <MX_COMP1_Init+0x3e>
  {
    Error_Handler();
 800062e:	f000 fe77 	bl	8001320 <Error_Handler>
  }

}
 8000632:	bf00      	nop
 8000634:	bd80      	pop	{r7, pc}
 8000636:	bf00      	nop
 8000638:	200005e0 	.word	0x200005e0
 800063c:	40010200 	.word	0x40010200
 8000640:	00800030 	.word	0x00800030

08000644 <HAL_COMP_MspInit>:

void HAL_COMP_MspInit(COMP_HandleTypeDef* compHandle)
{
 8000644:	b580      	push	{r7, lr}
 8000646:	b088      	sub	sp, #32
 8000648:	af00      	add	r7, sp, #0
 800064a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800064c:	f107 030c 	add.w	r3, r7, #12
 8000650:	2200      	movs	r2, #0
 8000652:	601a      	str	r2, [r3, #0]
 8000654:	605a      	str	r2, [r3, #4]
 8000656:	609a      	str	r2, [r3, #8]
 8000658:	60da      	str	r2, [r3, #12]
 800065a:	611a      	str	r2, [r3, #16]
  if(compHandle->Instance==COMP1)
 800065c:	687b      	ldr	r3, [r7, #4]
 800065e:	681b      	ldr	r3, [r3, #0]
 8000660:	4a0f      	ldr	r2, [pc, #60]	; (80006a0 <HAL_COMP_MspInit+0x5c>)
 8000662:	4293      	cmp	r3, r2
 8000664:	d118      	bne.n	8000698 <HAL_COMP_MspInit+0x54>
  {
  /* USER CODE BEGIN COMP1_MspInit 0 */

  /* USER CODE END COMP1_MspInit 0 */
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000666:	4b0f      	ldr	r3, [pc, #60]	; (80006a4 <HAL_COMP_MspInit+0x60>)
 8000668:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800066a:	4a0e      	ldr	r2, [pc, #56]	; (80006a4 <HAL_COMP_MspInit+0x60>)
 800066c:	f043 0301 	orr.w	r3, r3, #1
 8000670:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000672:	4b0c      	ldr	r3, [pc, #48]	; (80006a4 <HAL_COMP_MspInit+0x60>)
 8000674:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000676:	f003 0301 	and.w	r3, r3, #1
 800067a:	60bb      	str	r3, [r7, #8]
 800067c:	68bb      	ldr	r3, [r7, #8]
    /**COMP1 GPIO Configuration    
    PA1     ------> COMP1_INP 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 800067e:	2302      	movs	r3, #2
 8000680:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000682:	2303      	movs	r3, #3
 8000684:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000686:	2300      	movs	r3, #0
 8000688:	617b      	str	r3, [r7, #20]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800068a:	f107 030c 	add.w	r3, r7, #12
 800068e:	4619      	mov	r1, r3
 8000690:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000694:	f003 ff92 	bl	80045bc <HAL_GPIO_Init>

  /* USER CODE BEGIN COMP1_MspInit 1 */

  /* USER CODE END COMP1_MspInit 1 */
  }
}
 8000698:	bf00      	nop
 800069a:	3720      	adds	r7, #32
 800069c:	46bd      	mov	sp, r7
 800069e:	bd80      	pop	{r7, pc}
 80006a0:	40010200 	.word	0x40010200
 80006a4:	40021000 	.word	0x40021000

080006a8 <MX_DAC1_Init>:
DMA_HandleTypeDef hdma_dac1_ch1;
DMA_HandleTypeDef hdma_dac2_ch1;

/* DAC1 init function */
void MX_DAC1_Init(void)
{
 80006a8:	b580      	push	{r7, lr}
 80006aa:	b08c      	sub	sp, #48	; 0x30
 80006ac:	af00      	add	r7, sp, #0
  DAC_ChannelConfTypeDef sConfig = {0};
 80006ae:	463b      	mov	r3, r7
 80006b0:	2230      	movs	r2, #48	; 0x30
 80006b2:	2100      	movs	r1, #0
 80006b4:	4618      	mov	r0, r3
 80006b6:	f007 ff13 	bl	80084e0 <memset>

  /** DAC Initialization 
  */
  hdac1.Instance = DAC1;
 80006ba:	4b1e      	ldr	r3, [pc, #120]	; (8000734 <MX_DAC1_Init+0x8c>)
 80006bc:	4a1e      	ldr	r2, [pc, #120]	; (8000738 <MX_DAC1_Init+0x90>)
 80006be:	601a      	str	r2, [r3, #0]
  if (HAL_DAC_Init(&hdac1) != HAL_OK)
 80006c0:	481c      	ldr	r0, [pc, #112]	; (8000734 <MX_DAC1_Init+0x8c>)
 80006c2:	f003 f956 	bl	8003972 <HAL_DAC_Init>
 80006c6:	4603      	mov	r3, r0
 80006c8:	2b00      	cmp	r3, #0
 80006ca:	d001      	beq.n	80006d0 <MX_DAC1_Init+0x28>
  {
    Error_Handler();
 80006cc:	f000 fe28 	bl	8001320 <Error_Handler>
  }
  /** DAC channel OUT1 config 
  */
  sConfig.DAC_HighFrequency = DAC_HIGH_FREQUENCY_INTERFACE_MODE_ABOVE_80MHZ;
 80006d0:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80006d4:	603b      	str	r3, [r7, #0]
  sConfig.DAC_DMADoubleDataMode = DISABLE;
 80006d6:	2300      	movs	r3, #0
 80006d8:	713b      	strb	r3, [r7, #4]
  sConfig.DAC_SignedFormat = DISABLE;
 80006da:	2300      	movs	r3, #0
 80006dc:	717b      	strb	r3, [r7, #5]
  sConfig.DAC_SampleAndHold = DAC_SAMPLEANDHOLD_DISABLE;
 80006de:	2300      	movs	r3, #0
 80006e0:	60bb      	str	r3, [r7, #8]
  sConfig.DAC_Trigger = DAC_TRIGGER_T8_TRGO;
 80006e2:	2306      	movs	r3, #6
 80006e4:	60fb      	str	r3, [r7, #12]
  sConfig.DAC_Trigger2 = DAC_TRIGGER_NONE;
 80006e6:	2300      	movs	r3, #0
 80006e8:	613b      	str	r3, [r7, #16]
  sConfig.DAC_OutputBuffer = DAC_OUTPUTBUFFER_ENABLE;
 80006ea:	2300      	movs	r3, #0
 80006ec:	617b      	str	r3, [r7, #20]
  sConfig.DAC_ConnectOnChipPeripheral = DAC_CHIPCONNECT_DISABLE;
 80006ee:	2301      	movs	r3, #1
 80006f0:	61bb      	str	r3, [r7, #24]
  sConfig.DAC_UserTrimming = DAC_TRIMMING_FACTORY;
 80006f2:	2300      	movs	r3, #0
 80006f4:	61fb      	str	r3, [r7, #28]
  if (HAL_DAC_ConfigChannel(&hdac1, &sConfig, DAC_CHANNEL_1) != HAL_OK)
 80006f6:	463b      	mov	r3, r7
 80006f8:	2200      	movs	r2, #0
 80006fa:	4619      	mov	r1, r3
 80006fc:	480d      	ldr	r0, [pc, #52]	; (8000734 <MX_DAC1_Init+0x8c>)
 80006fe:	f003 fab5 	bl	8003c6c <HAL_DAC_ConfigChannel>
 8000702:	4603      	mov	r3, r0
 8000704:	2b00      	cmp	r3, #0
 8000706:	d001      	beq.n	800070c <MX_DAC1_Init+0x64>
  {
    Error_Handler();
 8000708:	f000 fe0a 	bl	8001320 <Error_Handler>
  }
  /** DAC channel OUT2 config 
  */
  sConfig.DAC_Trigger = DAC_TRIGGER_NONE;
 800070c:	2300      	movs	r3, #0
 800070e:	60fb      	str	r3, [r7, #12]
  sConfig.DAC_ConnectOnChipPeripheral = DAC_CHIPCONNECT_DISABLE;
 8000710:	2301      	movs	r3, #1
 8000712:	61bb      	str	r3, [r7, #24]
  if (HAL_DAC_ConfigChannel(&hdac1, &sConfig, DAC_CHANNEL_2) != HAL_OK)
 8000714:	463b      	mov	r3, r7
 8000716:	2210      	movs	r2, #16
 8000718:	4619      	mov	r1, r3
 800071a:	4806      	ldr	r0, [pc, #24]	; (8000734 <MX_DAC1_Init+0x8c>)
 800071c:	f003 faa6 	bl	8003c6c <HAL_DAC_ConfigChannel>
 8000720:	4603      	mov	r3, r0
 8000722:	2b00      	cmp	r3, #0
 8000724:	d001      	beq.n	800072a <MX_DAC1_Init+0x82>
  {
    Error_Handler();
 8000726:	f000 fdfb 	bl	8001320 <Error_Handler>
  }

}
 800072a:	bf00      	nop
 800072c:	3730      	adds	r7, #48	; 0x30
 800072e:	46bd      	mov	sp, r7
 8000730:	bd80      	pop	{r7, pc}
 8000732:	bf00      	nop
 8000734:	20000618 	.word	0x20000618
 8000738:	50000800 	.word	0x50000800

0800073c <MX_DAC2_Init>:
/* DAC2 init function */
void MX_DAC2_Init(void)
{
 800073c:	b580      	push	{r7, lr}
 800073e:	b08c      	sub	sp, #48	; 0x30
 8000740:	af00      	add	r7, sp, #0
  DAC_ChannelConfTypeDef sConfig = {0};
 8000742:	463b      	mov	r3, r7
 8000744:	2230      	movs	r2, #48	; 0x30
 8000746:	2100      	movs	r1, #0
 8000748:	4618      	mov	r0, r3
 800074a:	f007 fec9 	bl	80084e0 <memset>

  /** DAC Initialization 
  */
  hdac2.Instance = DAC2;
 800074e:	4b16      	ldr	r3, [pc, #88]	; (80007a8 <MX_DAC2_Init+0x6c>)
 8000750:	4a16      	ldr	r2, [pc, #88]	; (80007ac <MX_DAC2_Init+0x70>)
 8000752:	601a      	str	r2, [r3, #0]
  if (HAL_DAC_Init(&hdac2) != HAL_OK)
 8000754:	4814      	ldr	r0, [pc, #80]	; (80007a8 <MX_DAC2_Init+0x6c>)
 8000756:	f003 f90c 	bl	8003972 <HAL_DAC_Init>
 800075a:	4603      	mov	r3, r0
 800075c:	2b00      	cmp	r3, #0
 800075e:	d001      	beq.n	8000764 <MX_DAC2_Init+0x28>
  {
    Error_Handler();
 8000760:	f000 fdde 	bl	8001320 <Error_Handler>
  }
  /** DAC channel OUT1 config 
  */
  sConfig.DAC_HighFrequency = DAC_HIGH_FREQUENCY_INTERFACE_MODE_ABOVE_80MHZ;
 8000764:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8000768:	603b      	str	r3, [r7, #0]
  sConfig.DAC_DMADoubleDataMode = DISABLE;
 800076a:	2300      	movs	r3, #0
 800076c:	713b      	strb	r3, [r7, #4]
  sConfig.DAC_SignedFormat = DISABLE;
 800076e:	2300      	movs	r3, #0
 8000770:	717b      	strb	r3, [r7, #5]
  sConfig.DAC_SampleAndHold = DAC_SAMPLEANDHOLD_DISABLE;
 8000772:	2300      	movs	r3, #0
 8000774:	60bb      	str	r3, [r7, #8]
  sConfig.DAC_Trigger = DAC_TRIGGER_T8_TRGO;
 8000776:	2306      	movs	r3, #6
 8000778:	60fb      	str	r3, [r7, #12]
  sConfig.DAC_Trigger2 = DAC_TRIGGER_NONE;
 800077a:	2300      	movs	r3, #0
 800077c:	613b      	str	r3, [r7, #16]
  sConfig.DAC_OutputBuffer = DAC_OUTPUTBUFFER_ENABLE;
 800077e:	2300      	movs	r3, #0
 8000780:	617b      	str	r3, [r7, #20]
  sConfig.DAC_ConnectOnChipPeripheral = DAC_CHIPCONNECT_DISABLE;
 8000782:	2301      	movs	r3, #1
 8000784:	61bb      	str	r3, [r7, #24]
  sConfig.DAC_UserTrimming = DAC_TRIMMING_FACTORY;
 8000786:	2300      	movs	r3, #0
 8000788:	61fb      	str	r3, [r7, #28]
  if (HAL_DAC_ConfigChannel(&hdac2, &sConfig, DAC_CHANNEL_1) != HAL_OK)
 800078a:	463b      	mov	r3, r7
 800078c:	2200      	movs	r2, #0
 800078e:	4619      	mov	r1, r3
 8000790:	4805      	ldr	r0, [pc, #20]	; (80007a8 <MX_DAC2_Init+0x6c>)
 8000792:	f003 fa6b 	bl	8003c6c <HAL_DAC_ConfigChannel>
 8000796:	4603      	mov	r3, r0
 8000798:	2b00      	cmp	r3, #0
 800079a:	d001      	beq.n	80007a0 <MX_DAC2_Init+0x64>
  {
    Error_Handler();
 800079c:	f000 fdc0 	bl	8001320 <Error_Handler>
  }

}
 80007a0:	bf00      	nop
 80007a2:	3730      	adds	r7, #48	; 0x30
 80007a4:	46bd      	mov	sp, r7
 80007a6:	bd80      	pop	{r7, pc}
 80007a8:	20000604 	.word	0x20000604
 80007ac:	50000c00 	.word	0x50000c00

080007b0 <HAL_DAC_MspInit>:

void HAL_DAC_MspInit(DAC_HandleTypeDef* dacHandle)
{
 80007b0:	b580      	push	{r7, lr}
 80007b2:	b08c      	sub	sp, #48	; 0x30
 80007b4:	af00      	add	r7, sp, #0
 80007b6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80007b8:	f107 031c 	add.w	r3, r7, #28
 80007bc:	2200      	movs	r2, #0
 80007be:	601a      	str	r2, [r3, #0]
 80007c0:	605a      	str	r2, [r3, #4]
 80007c2:	609a      	str	r2, [r3, #8]
 80007c4:	60da      	str	r2, [r3, #12]
 80007c6:	611a      	str	r2, [r3, #16]
  if(dacHandle->Instance==DAC1)
 80007c8:	687b      	ldr	r3, [r7, #4]
 80007ca:	681b      	ldr	r3, [r3, #0]
 80007cc:	4a56      	ldr	r2, [pc, #344]	; (8000928 <HAL_DAC_MspInit+0x178>)
 80007ce:	4293      	cmp	r3, r2
 80007d0:	d150      	bne.n	8000874 <HAL_DAC_MspInit+0xc4>
  {
  /* USER CODE BEGIN DAC1_MspInit 0 */

  /* USER CODE END DAC1_MspInit 0 */
    /* DAC1 clock enable */
    __HAL_RCC_DAC1_CLK_ENABLE();
 80007d2:	4b56      	ldr	r3, [pc, #344]	; (800092c <HAL_DAC_MspInit+0x17c>)
 80007d4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80007d6:	4a55      	ldr	r2, [pc, #340]	; (800092c <HAL_DAC_MspInit+0x17c>)
 80007d8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80007dc:	64d3      	str	r3, [r2, #76]	; 0x4c
 80007de:	4b53      	ldr	r3, [pc, #332]	; (800092c <HAL_DAC_MspInit+0x17c>)
 80007e0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80007e2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80007e6:	61bb      	str	r3, [r7, #24]
 80007e8:	69bb      	ldr	r3, [r7, #24]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80007ea:	4b50      	ldr	r3, [pc, #320]	; (800092c <HAL_DAC_MspInit+0x17c>)
 80007ec:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80007ee:	4a4f      	ldr	r2, [pc, #316]	; (800092c <HAL_DAC_MspInit+0x17c>)
 80007f0:	f043 0301 	orr.w	r3, r3, #1
 80007f4:	64d3      	str	r3, [r2, #76]	; 0x4c
 80007f6:	4b4d      	ldr	r3, [pc, #308]	; (800092c <HAL_DAC_MspInit+0x17c>)
 80007f8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80007fa:	f003 0301 	and.w	r3, r3, #1
 80007fe:	617b      	str	r3, [r7, #20]
 8000800:	697b      	ldr	r3, [r7, #20]
    /**DAC1 GPIO Configuration    
    PA4     ------> DAC1_OUT1
    PA5     ------> DAC1_OUT2 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 8000802:	2330      	movs	r3, #48	; 0x30
 8000804:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000806:	2303      	movs	r3, #3
 8000808:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800080a:	2300      	movs	r3, #0
 800080c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800080e:	f107 031c 	add.w	r3, r7, #28
 8000812:	4619      	mov	r1, r3
 8000814:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000818:	f003 fed0 	bl	80045bc <HAL_GPIO_Init>

    /* DAC1 DMA Init */
    /* DAC1_CH1 Init */
    hdma_dac1_ch1.Instance = DMA1_Channel2;
 800081c:	4b44      	ldr	r3, [pc, #272]	; (8000930 <HAL_DAC_MspInit+0x180>)
 800081e:	4a45      	ldr	r2, [pc, #276]	; (8000934 <HAL_DAC_MspInit+0x184>)
 8000820:	601a      	str	r2, [r3, #0]
    hdma_dac1_ch1.Init.Request = DMA_REQUEST_DAC1_CHANNEL1;
 8000822:	4b43      	ldr	r3, [pc, #268]	; (8000930 <HAL_DAC_MspInit+0x180>)
 8000824:	2206      	movs	r2, #6
 8000826:	605a      	str	r2, [r3, #4]
    hdma_dac1_ch1.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8000828:	4b41      	ldr	r3, [pc, #260]	; (8000930 <HAL_DAC_MspInit+0x180>)
 800082a:	2210      	movs	r2, #16
 800082c:	609a      	str	r2, [r3, #8]
    hdma_dac1_ch1.Init.PeriphInc = DMA_PINC_DISABLE;
 800082e:	4b40      	ldr	r3, [pc, #256]	; (8000930 <HAL_DAC_MspInit+0x180>)
 8000830:	2200      	movs	r2, #0
 8000832:	60da      	str	r2, [r3, #12]
    hdma_dac1_ch1.Init.MemInc = DMA_MINC_ENABLE;
 8000834:	4b3e      	ldr	r3, [pc, #248]	; (8000930 <HAL_DAC_MspInit+0x180>)
 8000836:	2280      	movs	r2, #128	; 0x80
 8000838:	611a      	str	r2, [r3, #16]
    hdma_dac1_ch1.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 800083a:	4b3d      	ldr	r3, [pc, #244]	; (8000930 <HAL_DAC_MspInit+0x180>)
 800083c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000840:	615a      	str	r2, [r3, #20]
    hdma_dac1_ch1.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8000842:	4b3b      	ldr	r3, [pc, #236]	; (8000930 <HAL_DAC_MspInit+0x180>)
 8000844:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8000848:	619a      	str	r2, [r3, #24]
    hdma_dac1_ch1.Init.Mode = DMA_CIRCULAR;
 800084a:	4b39      	ldr	r3, [pc, #228]	; (8000930 <HAL_DAC_MspInit+0x180>)
 800084c:	2220      	movs	r2, #32
 800084e:	61da      	str	r2, [r3, #28]
    hdma_dac1_ch1.Init.Priority = DMA_PRIORITY_LOW;
 8000850:	4b37      	ldr	r3, [pc, #220]	; (8000930 <HAL_DAC_MspInit+0x180>)
 8000852:	2200      	movs	r2, #0
 8000854:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_dac1_ch1) != HAL_OK)
 8000856:	4836      	ldr	r0, [pc, #216]	; (8000930 <HAL_DAC_MspInit+0x180>)
 8000858:	f003 fc3e 	bl	80040d8 <HAL_DMA_Init>
 800085c:	4603      	mov	r3, r0
 800085e:	2b00      	cmp	r3, #0
 8000860:	d001      	beq.n	8000866 <HAL_DAC_MspInit+0xb6>
    {
      Error_Handler();
 8000862:	f000 fd5d 	bl	8001320 <Error_Handler>
    }

    __HAL_LINKDMA(dacHandle,DMA_Handle1,hdma_dac1_ch1);
 8000866:	687b      	ldr	r3, [r7, #4]
 8000868:	4a31      	ldr	r2, [pc, #196]	; (8000930 <HAL_DAC_MspInit+0x180>)
 800086a:	609a      	str	r2, [r3, #8]
 800086c:	4a30      	ldr	r2, [pc, #192]	; (8000930 <HAL_DAC_MspInit+0x180>)
 800086e:	687b      	ldr	r3, [r7, #4]
 8000870:	6293      	str	r3, [r2, #40]	; 0x28

  /* USER CODE BEGIN DAC2_MspInit 1 */

  /* USER CODE END DAC2_MspInit 1 */
  }
}
 8000872:	e054      	b.n	800091e <HAL_DAC_MspInit+0x16e>
  else if(dacHandle->Instance==DAC2)
 8000874:	687b      	ldr	r3, [r7, #4]
 8000876:	681b      	ldr	r3, [r3, #0]
 8000878:	4a2f      	ldr	r2, [pc, #188]	; (8000938 <HAL_DAC_MspInit+0x188>)
 800087a:	4293      	cmp	r3, r2
 800087c:	d14f      	bne.n	800091e <HAL_DAC_MspInit+0x16e>
    __HAL_RCC_DAC2_CLK_ENABLE();
 800087e:	4b2b      	ldr	r3, [pc, #172]	; (800092c <HAL_DAC_MspInit+0x17c>)
 8000880:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000882:	4a2a      	ldr	r2, [pc, #168]	; (800092c <HAL_DAC_MspInit+0x17c>)
 8000884:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000888:	64d3      	str	r3, [r2, #76]	; 0x4c
 800088a:	4b28      	ldr	r3, [pc, #160]	; (800092c <HAL_DAC_MspInit+0x17c>)
 800088c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800088e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000892:	613b      	str	r3, [r7, #16]
 8000894:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000896:	4b25      	ldr	r3, [pc, #148]	; (800092c <HAL_DAC_MspInit+0x17c>)
 8000898:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800089a:	4a24      	ldr	r2, [pc, #144]	; (800092c <HAL_DAC_MspInit+0x17c>)
 800089c:	f043 0301 	orr.w	r3, r3, #1
 80008a0:	64d3      	str	r3, [r2, #76]	; 0x4c
 80008a2:	4b22      	ldr	r3, [pc, #136]	; (800092c <HAL_DAC_MspInit+0x17c>)
 80008a4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80008a6:	f003 0301 	and.w	r3, r3, #1
 80008aa:	60fb      	str	r3, [r7, #12]
 80008ac:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 80008ae:	2340      	movs	r3, #64	; 0x40
 80008b0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80008b2:	2303      	movs	r3, #3
 80008b4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008b6:	2300      	movs	r3, #0
 80008b8:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80008ba:	f107 031c 	add.w	r3, r7, #28
 80008be:	4619      	mov	r1, r3
 80008c0:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80008c4:	f003 fe7a 	bl	80045bc <HAL_GPIO_Init>
    hdma_dac2_ch1.Instance = DMA1_Channel3;
 80008c8:	4b1c      	ldr	r3, [pc, #112]	; (800093c <HAL_DAC_MspInit+0x18c>)
 80008ca:	4a1d      	ldr	r2, [pc, #116]	; (8000940 <HAL_DAC_MspInit+0x190>)
 80008cc:	601a      	str	r2, [r3, #0]
    hdma_dac2_ch1.Init.Request = DMA_REQUEST_DAC2_CHANNEL1;
 80008ce:	4b1b      	ldr	r3, [pc, #108]	; (800093c <HAL_DAC_MspInit+0x18c>)
 80008d0:	2229      	movs	r2, #41	; 0x29
 80008d2:	605a      	str	r2, [r3, #4]
    hdma_dac2_ch1.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80008d4:	4b19      	ldr	r3, [pc, #100]	; (800093c <HAL_DAC_MspInit+0x18c>)
 80008d6:	2210      	movs	r2, #16
 80008d8:	609a      	str	r2, [r3, #8]
    hdma_dac2_ch1.Init.PeriphInc = DMA_PINC_DISABLE;
 80008da:	4b18      	ldr	r3, [pc, #96]	; (800093c <HAL_DAC_MspInit+0x18c>)
 80008dc:	2200      	movs	r2, #0
 80008de:	60da      	str	r2, [r3, #12]
    hdma_dac2_ch1.Init.MemInc = DMA_MINC_ENABLE;
 80008e0:	4b16      	ldr	r3, [pc, #88]	; (800093c <HAL_DAC_MspInit+0x18c>)
 80008e2:	2280      	movs	r2, #128	; 0x80
 80008e4:	611a      	str	r2, [r3, #16]
    hdma_dac2_ch1.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 80008e6:	4b15      	ldr	r3, [pc, #84]	; (800093c <HAL_DAC_MspInit+0x18c>)
 80008e8:	f44f 7200 	mov.w	r2, #512	; 0x200
 80008ec:	615a      	str	r2, [r3, #20]
    hdma_dac2_ch1.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 80008ee:	4b13      	ldr	r3, [pc, #76]	; (800093c <HAL_DAC_MspInit+0x18c>)
 80008f0:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80008f4:	619a      	str	r2, [r3, #24]
    hdma_dac2_ch1.Init.Mode = DMA_CIRCULAR;
 80008f6:	4b11      	ldr	r3, [pc, #68]	; (800093c <HAL_DAC_MspInit+0x18c>)
 80008f8:	2220      	movs	r2, #32
 80008fa:	61da      	str	r2, [r3, #28]
    hdma_dac2_ch1.Init.Priority = DMA_PRIORITY_LOW;
 80008fc:	4b0f      	ldr	r3, [pc, #60]	; (800093c <HAL_DAC_MspInit+0x18c>)
 80008fe:	2200      	movs	r2, #0
 8000900:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_dac2_ch1) != HAL_OK)
 8000902:	480e      	ldr	r0, [pc, #56]	; (800093c <HAL_DAC_MspInit+0x18c>)
 8000904:	f003 fbe8 	bl	80040d8 <HAL_DMA_Init>
 8000908:	4603      	mov	r3, r0
 800090a:	2b00      	cmp	r3, #0
 800090c:	d001      	beq.n	8000912 <HAL_DAC_MspInit+0x162>
      Error_Handler();
 800090e:	f000 fd07 	bl	8001320 <Error_Handler>
    __HAL_LINKDMA(dacHandle,DMA_Handle1,hdma_dac2_ch1);
 8000912:	687b      	ldr	r3, [r7, #4]
 8000914:	4a09      	ldr	r2, [pc, #36]	; (800093c <HAL_DAC_MspInit+0x18c>)
 8000916:	609a      	str	r2, [r3, #8]
 8000918:	4a08      	ldr	r2, [pc, #32]	; (800093c <HAL_DAC_MspInit+0x18c>)
 800091a:	687b      	ldr	r3, [r7, #4]
 800091c:	6293      	str	r3, [r2, #40]	; 0x28
}
 800091e:	bf00      	nop
 8000920:	3730      	adds	r7, #48	; 0x30
 8000922:	46bd      	mov	sp, r7
 8000924:	bd80      	pop	{r7, pc}
 8000926:	bf00      	nop
 8000928:	50000800 	.word	0x50000800
 800092c:	40021000 	.word	0x40021000
 8000930:	2000062c 	.word	0x2000062c
 8000934:	4002001c 	.word	0x4002001c
 8000938:	50000c00 	.word	0x50000c00
 800093c:	2000068c 	.word	0x2000068c
 8000940:	40020030 	.word	0x40020030

08000944 <MX_DMA_Init>:

/** 
  * Enable DMA controller clock
  */
void MX_DMA_Init(void) 
{
 8000944:	b580      	push	{r7, lr}
 8000946:	b082      	sub	sp, #8
 8000948:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMAMUX1_CLK_ENABLE();
 800094a:	4b1e      	ldr	r3, [pc, #120]	; (80009c4 <MX_DMA_Init+0x80>)
 800094c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800094e:	4a1d      	ldr	r2, [pc, #116]	; (80009c4 <MX_DMA_Init+0x80>)
 8000950:	f043 0304 	orr.w	r3, r3, #4
 8000954:	6493      	str	r3, [r2, #72]	; 0x48
 8000956:	4b1b      	ldr	r3, [pc, #108]	; (80009c4 <MX_DMA_Init+0x80>)
 8000958:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800095a:	f003 0304 	and.w	r3, r3, #4
 800095e:	607b      	str	r3, [r7, #4]
 8000960:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000962:	4b18      	ldr	r3, [pc, #96]	; (80009c4 <MX_DMA_Init+0x80>)
 8000964:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8000966:	4a17      	ldr	r2, [pc, #92]	; (80009c4 <MX_DMA_Init+0x80>)
 8000968:	f043 0301 	orr.w	r3, r3, #1
 800096c:	6493      	str	r3, [r2, #72]	; 0x48
 800096e:	4b15      	ldr	r3, [pc, #84]	; (80009c4 <MX_DMA_Init+0x80>)
 8000970:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8000972:	f003 0301 	and.w	r3, r3, #1
 8000976:	603b      	str	r3, [r7, #0]
 8000978:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 1, 0);
 800097a:	2200      	movs	r2, #0
 800097c:	2101      	movs	r1, #1
 800097e:	200b      	movs	r0, #11
 8000980:	f002 ffc3 	bl	800390a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 8000984:	200b      	movs	r0, #11
 8000986:	f002 ffda 	bl	800393e <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel2_IRQn, 0, 0);
 800098a:	2200      	movs	r2, #0
 800098c:	2100      	movs	r1, #0
 800098e:	200c      	movs	r0, #12
 8000990:	f002 ffbb 	bl	800390a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel2_IRQn);
 8000994:	200c      	movs	r0, #12
 8000996:	f002 ffd2 	bl	800393e <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel3_IRQn, 0, 0);
 800099a:	2200      	movs	r2, #0
 800099c:	2100      	movs	r1, #0
 800099e:	200d      	movs	r0, #13
 80009a0:	f002 ffb3 	bl	800390a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel3_IRQn);
 80009a4:	200d      	movs	r0, #13
 80009a6:	f002 ffca 	bl	800393e <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel4_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel4_IRQn, 0, 0);
 80009aa:	2200      	movs	r2, #0
 80009ac:	2100      	movs	r1, #0
 80009ae:	200e      	movs	r0, #14
 80009b0:	f002 ffab 	bl	800390a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel4_IRQn);
 80009b4:	200e      	movs	r0, #14
 80009b6:	f002 ffc2 	bl	800393e <HAL_NVIC_EnableIRQ>

}
 80009ba:	bf00      	nop
 80009bc:	3708      	adds	r7, #8
 80009be:	46bd      	mov	sp, r7
 80009c0:	bd80      	pop	{r7, pc}
 80009c2:	bf00      	nop
 80009c4:	40021000 	.word	0x40021000

080009c8 <update_dc_bias_sweep>:
uint16_t dcbias = 0;
int dcbias_dir = 1;
int dcinverted = 0;

void update_dc_bias_sweep()
{
 80009c8:	b580      	push	{r7, lr}
 80009ca:	af00      	add	r7, sp, #0
	  // up=1, down=0
	  (dcbias_dir) ? (dcbias++) : (dcbias--);
 80009cc:	4b20      	ldr	r3, [pc, #128]	; (8000a50 <update_dc_bias_sweep+0x88>)
 80009ce:	681b      	ldr	r3, [r3, #0]
 80009d0:	2b00      	cmp	r3, #0
 80009d2:	d006      	beq.n	80009e2 <update_dc_bias_sweep+0x1a>
 80009d4:	4b1f      	ldr	r3, [pc, #124]	; (8000a54 <update_dc_bias_sweep+0x8c>)
 80009d6:	881b      	ldrh	r3, [r3, #0]
 80009d8:	3301      	adds	r3, #1
 80009da:	b29a      	uxth	r2, r3
 80009dc:	4b1d      	ldr	r3, [pc, #116]	; (8000a54 <update_dc_bias_sweep+0x8c>)
 80009de:	801a      	strh	r2, [r3, #0]
 80009e0:	e005      	b.n	80009ee <update_dc_bias_sweep+0x26>
 80009e2:	4b1c      	ldr	r3, [pc, #112]	; (8000a54 <update_dc_bias_sweep+0x8c>)
 80009e4:	881b      	ldrh	r3, [r3, #0]
 80009e6:	3b01      	subs	r3, #1
 80009e8:	b29a      	uxth	r2, r3
 80009ea:	4b1a      	ldr	r3, [pc, #104]	; (8000a54 <update_dc_bias_sweep+0x8c>)
 80009ec:	801a      	strh	r2, [r3, #0]

	  // invert the bias signal at zero crossing
	  if(dcbias < 1) {
 80009ee:	4b19      	ldr	r3, [pc, #100]	; (8000a54 <update_dc_bias_sweep+0x8c>)
 80009f0:	881b      	ldrh	r3, [r3, #0]
 80009f2:	2b00      	cmp	r3, #0
 80009f4:	d10a      	bne.n	8000a0c <update_dc_bias_sweep+0x44>
		(dcinverted) ? (dcinverted=0) : (dcinverted=1);
 80009f6:	4b18      	ldr	r3, [pc, #96]	; (8000a58 <update_dc_bias_sweep+0x90>)
 80009f8:	681b      	ldr	r3, [r3, #0]
 80009fa:	2b00      	cmp	r3, #0
 80009fc:	d003      	beq.n	8000a06 <update_dc_bias_sweep+0x3e>
 80009fe:	4b16      	ldr	r3, [pc, #88]	; (8000a58 <update_dc_bias_sweep+0x90>)
 8000a00:	2200      	movs	r2, #0
 8000a02:	601a      	str	r2, [r3, #0]
 8000a04:	e002      	b.n	8000a0c <update_dc_bias_sweep+0x44>
 8000a06:	4b14      	ldr	r3, [pc, #80]	; (8000a58 <update_dc_bias_sweep+0x90>)
 8000a08:	2201      	movs	r2, #1
 8000a0a:	601a      	str	r2, [r3, #0]
	  }

	  // change direction if dac limits are reached
	  if(dcbias < 1) 	{ dcbias_dir = 1; }
 8000a0c:	4b11      	ldr	r3, [pc, #68]	; (8000a54 <update_dc_bias_sweep+0x8c>)
 8000a0e:	881b      	ldrh	r3, [r3, #0]
 8000a10:	2b00      	cmp	r3, #0
 8000a12:	d102      	bne.n	8000a1a <update_dc_bias_sweep+0x52>
 8000a14:	4b0e      	ldr	r3, [pc, #56]	; (8000a50 <update_dc_bias_sweep+0x88>)
 8000a16:	2201      	movs	r2, #1
 8000a18:	601a      	str	r2, [r3, #0]
	  if(dcbias > 4095) { dcbias_dir = 0; }
 8000a1a:	4b0e      	ldr	r3, [pc, #56]	; (8000a54 <update_dc_bias_sweep+0x8c>)
 8000a1c:	881b      	ldrh	r3, [r3, #0]
 8000a1e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8000a22:	d302      	bcc.n	8000a2a <update_dc_bias_sweep+0x62>
 8000a24:	4b0a      	ldr	r3, [pc, #40]	; (8000a50 <update_dc_bias_sweep+0x88>)
 8000a26:	2200      	movs	r2, #0
 8000a28:	601a      	str	r2, [r3, #0]


	  HAL_GPIO_WritePin(DCBIAS_INVERT_GPIO_Port, DCBIAS_INVERT_Pin, dcinverted);
 8000a2a:	4b0b      	ldr	r3, [pc, #44]	; (8000a58 <update_dc_bias_sweep+0x90>)
 8000a2c:	681b      	ldr	r3, [r3, #0]
 8000a2e:	b2db      	uxtb	r3, r3
 8000a30:	461a      	mov	r2, r3
 8000a32:	2108      	movs	r1, #8
 8000a34:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000a38:	f003 ff5a 	bl	80048f0 <HAL_GPIO_WritePin>
	  HAL_DAC_SetValue(&hdac1, DAC1_CHANNEL_2, DAC_ALIGN_12B_R, dcbias);
 8000a3c:	4b05      	ldr	r3, [pc, #20]	; (8000a54 <update_dc_bias_sweep+0x8c>)
 8000a3e:	881b      	ldrh	r3, [r3, #0]
 8000a40:	2200      	movs	r2, #0
 8000a42:	2110      	movs	r1, #16
 8000a44:	4805      	ldr	r0, [pc, #20]	; (8000a5c <update_dc_bias_sweep+0x94>)
 8000a46:	f003 f8cb 	bl	8003be0 <HAL_DAC_SetValue>
}
 8000a4a:	bf00      	nop
 8000a4c:	bd80      	pop	{r7, pc}
 8000a4e:	bf00      	nop
 8000a50:	20000000 	.word	0x20000000
 8000a54:	200004f0 	.word	0x200004f0
 8000a58:	200004f4 	.word	0x200004f4
 8000a5c:	20000618 	.word	0x20000618

08000a60 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000a60:	b480      	push	{r7}
 8000a62:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000a64:	4b04      	ldr	r3, [pc, #16]	; (8000a78 <__NVIC_GetPriorityGrouping+0x18>)
 8000a66:	68db      	ldr	r3, [r3, #12]
 8000a68:	0a1b      	lsrs	r3, r3, #8
 8000a6a:	f003 0307 	and.w	r3, r3, #7
}
 8000a6e:	4618      	mov	r0, r3
 8000a70:	46bd      	mov	sp, r7
 8000a72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a76:	4770      	bx	lr
 8000a78:	e000ed00 	.word	0xe000ed00

08000a7c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000a7c:	b480      	push	{r7}
 8000a7e:	b083      	sub	sp, #12
 8000a80:	af00      	add	r7, sp, #0
 8000a82:	4603      	mov	r3, r0
 8000a84:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000a86:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000a8a:	2b00      	cmp	r3, #0
 8000a8c:	db0b      	blt.n	8000aa6 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000a8e:	79fb      	ldrb	r3, [r7, #7]
 8000a90:	f003 021f 	and.w	r2, r3, #31
 8000a94:	4907      	ldr	r1, [pc, #28]	; (8000ab4 <__NVIC_EnableIRQ+0x38>)
 8000a96:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000a9a:	095b      	lsrs	r3, r3, #5
 8000a9c:	2001      	movs	r0, #1
 8000a9e:	fa00 f202 	lsl.w	r2, r0, r2
 8000aa2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000aa6:	bf00      	nop
 8000aa8:	370c      	adds	r7, #12
 8000aaa:	46bd      	mov	sp, r7
 8000aac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ab0:	4770      	bx	lr
 8000ab2:	bf00      	nop
 8000ab4:	e000e100 	.word	0xe000e100

08000ab8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000ab8:	b480      	push	{r7}
 8000aba:	b083      	sub	sp, #12
 8000abc:	af00      	add	r7, sp, #0
 8000abe:	4603      	mov	r3, r0
 8000ac0:	6039      	str	r1, [r7, #0]
 8000ac2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000ac4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000ac8:	2b00      	cmp	r3, #0
 8000aca:	db0a      	blt.n	8000ae2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000acc:	683b      	ldr	r3, [r7, #0]
 8000ace:	b2da      	uxtb	r2, r3
 8000ad0:	490c      	ldr	r1, [pc, #48]	; (8000b04 <__NVIC_SetPriority+0x4c>)
 8000ad2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000ad6:	0112      	lsls	r2, r2, #4
 8000ad8:	b2d2      	uxtb	r2, r2
 8000ada:	440b      	add	r3, r1
 8000adc:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000ae0:	e00a      	b.n	8000af8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000ae2:	683b      	ldr	r3, [r7, #0]
 8000ae4:	b2da      	uxtb	r2, r3
 8000ae6:	4908      	ldr	r1, [pc, #32]	; (8000b08 <__NVIC_SetPriority+0x50>)
 8000ae8:	79fb      	ldrb	r3, [r7, #7]
 8000aea:	f003 030f 	and.w	r3, r3, #15
 8000aee:	3b04      	subs	r3, #4
 8000af0:	0112      	lsls	r2, r2, #4
 8000af2:	b2d2      	uxtb	r2, r2
 8000af4:	440b      	add	r3, r1
 8000af6:	761a      	strb	r2, [r3, #24]
}
 8000af8:	bf00      	nop
 8000afa:	370c      	adds	r7, #12
 8000afc:	46bd      	mov	sp, r7
 8000afe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b02:	4770      	bx	lr
 8000b04:	e000e100 	.word	0xe000e100
 8000b08:	e000ed00 	.word	0xe000ed00

08000b0c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000b0c:	b480      	push	{r7}
 8000b0e:	b089      	sub	sp, #36	; 0x24
 8000b10:	af00      	add	r7, sp, #0
 8000b12:	60f8      	str	r0, [r7, #12]
 8000b14:	60b9      	str	r1, [r7, #8]
 8000b16:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000b18:	68fb      	ldr	r3, [r7, #12]
 8000b1a:	f003 0307 	and.w	r3, r3, #7
 8000b1e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000b20:	69fb      	ldr	r3, [r7, #28]
 8000b22:	f1c3 0307 	rsb	r3, r3, #7
 8000b26:	2b04      	cmp	r3, #4
 8000b28:	bf28      	it	cs
 8000b2a:	2304      	movcs	r3, #4
 8000b2c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000b2e:	69fb      	ldr	r3, [r7, #28]
 8000b30:	3304      	adds	r3, #4
 8000b32:	2b06      	cmp	r3, #6
 8000b34:	d902      	bls.n	8000b3c <NVIC_EncodePriority+0x30>
 8000b36:	69fb      	ldr	r3, [r7, #28]
 8000b38:	3b03      	subs	r3, #3
 8000b3a:	e000      	b.n	8000b3e <NVIC_EncodePriority+0x32>
 8000b3c:	2300      	movs	r3, #0
 8000b3e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000b40:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8000b44:	69bb      	ldr	r3, [r7, #24]
 8000b46:	fa02 f303 	lsl.w	r3, r2, r3
 8000b4a:	43da      	mvns	r2, r3
 8000b4c:	68bb      	ldr	r3, [r7, #8]
 8000b4e:	401a      	ands	r2, r3
 8000b50:	697b      	ldr	r3, [r7, #20]
 8000b52:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000b54:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8000b58:	697b      	ldr	r3, [r7, #20]
 8000b5a:	fa01 f303 	lsl.w	r3, r1, r3
 8000b5e:	43d9      	mvns	r1, r3
 8000b60:	687b      	ldr	r3, [r7, #4]
 8000b62:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000b64:	4313      	orrs	r3, r2
         );
}
 8000b66:	4618      	mov	r0, r3
 8000b68:	3724      	adds	r7, #36	; 0x24
 8000b6a:	46bd      	mov	sp, r7
 8000b6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b70:	4770      	bx	lr
	...

08000b74 <LL_SYSCFG_SetEXTISource>:
  *         @arg @ref LL_SYSCFG_EXTI_LINE14
  *         @arg @ref LL_SYSCFG_EXTI_LINE15
  * @retval None
  */
__STATIC_INLINE void LL_SYSCFG_SetEXTISource(uint32_t Port, uint32_t Line)
{
 8000b74:	b480      	push	{r7}
 8000b76:	b085      	sub	sp, #20
 8000b78:	af00      	add	r7, sp, #0
 8000b7a:	6078      	str	r0, [r7, #4]
 8000b7c:	6039      	str	r1, [r7, #0]
  MODIFY_REG(SYSCFG->EXTICR[Line & 0x3U], (Line >> 16U), Port << (POSITION_VAL((Line >> 16U)) & 0x1FU) );
 8000b7e:	4a14      	ldr	r2, [pc, #80]	; (8000bd0 <LL_SYSCFG_SetEXTISource+0x5c>)
 8000b80:	683b      	ldr	r3, [r7, #0]
 8000b82:	f003 0303 	and.w	r3, r3, #3
 8000b86:	3302      	adds	r3, #2
 8000b88:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8000b8c:	683b      	ldr	r3, [r7, #0]
 8000b8e:	0c1b      	lsrs	r3, r3, #16
 8000b90:	43db      	mvns	r3, r3
 8000b92:	ea02 0103 	and.w	r1, r2, r3
 8000b96:	683b      	ldr	r3, [r7, #0]
 8000b98:	0c1b      	lsrs	r3, r3, #16
 8000b9a:	60fb      	str	r3, [r7, #12]
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000b9c:	68fb      	ldr	r3, [r7, #12]
 8000b9e:	fa93 f3a3 	rbit	r3, r3
 8000ba2:	60bb      	str	r3, [r7, #8]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8000ba4:	68bb      	ldr	r3, [r7, #8]
 8000ba6:	fab3 f383 	clz	r3, r3
 8000baa:	b2db      	uxtb	r3, r3
 8000bac:	f003 031f 	and.w	r3, r3, #31
 8000bb0:	687a      	ldr	r2, [r7, #4]
 8000bb2:	409a      	lsls	r2, r3
 8000bb4:	4806      	ldr	r0, [pc, #24]	; (8000bd0 <LL_SYSCFG_SetEXTISource+0x5c>)
 8000bb6:	683b      	ldr	r3, [r7, #0]
 8000bb8:	f003 0303 	and.w	r3, r3, #3
 8000bbc:	430a      	orrs	r2, r1
 8000bbe:	3302      	adds	r3, #2
 8000bc0:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
}
 8000bc4:	bf00      	nop
 8000bc6:	3714      	adds	r7, #20
 8000bc8:	46bd      	mov	sp, r7
 8000bca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bce:	4770      	bx	lr
 8000bd0:	40010000 	.word	0x40010000

08000bd4 <LL_GPIO_SetPinMode>:
  *         @arg @ref LL_GPIO_MODE_ALTERNATE
  *         @arg @ref LL_GPIO_MODE_ANALOG
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetPinMode(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t Mode)
{
 8000bd4:	b480      	push	{r7}
 8000bd6:	b089      	sub	sp, #36	; 0x24
 8000bd8:	af00      	add	r7, sp, #0
 8000bda:	60f8      	str	r0, [r7, #12]
 8000bdc:	60b9      	str	r1, [r7, #8]
 8000bde:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->MODER, (GPIO_MODER_MODE0 << (POSITION_VAL(Pin) * 2U)), (Mode << (POSITION_VAL(Pin) * 2U)));
 8000be0:	68fb      	ldr	r3, [r7, #12]
 8000be2:	681a      	ldr	r2, [r3, #0]
 8000be4:	68bb      	ldr	r3, [r7, #8]
 8000be6:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000be8:	697b      	ldr	r3, [r7, #20]
 8000bea:	fa93 f3a3 	rbit	r3, r3
 8000bee:	613b      	str	r3, [r7, #16]
  return result;
 8000bf0:	693b      	ldr	r3, [r7, #16]
 8000bf2:	fab3 f383 	clz	r3, r3
 8000bf6:	b2db      	uxtb	r3, r3
 8000bf8:	005b      	lsls	r3, r3, #1
 8000bfa:	2103      	movs	r1, #3
 8000bfc:	fa01 f303 	lsl.w	r3, r1, r3
 8000c00:	43db      	mvns	r3, r3
 8000c02:	401a      	ands	r2, r3
 8000c04:	68bb      	ldr	r3, [r7, #8]
 8000c06:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000c08:	69fb      	ldr	r3, [r7, #28]
 8000c0a:	fa93 f3a3 	rbit	r3, r3
 8000c0e:	61bb      	str	r3, [r7, #24]
  return result;
 8000c10:	69bb      	ldr	r3, [r7, #24]
 8000c12:	fab3 f383 	clz	r3, r3
 8000c16:	b2db      	uxtb	r3, r3
 8000c18:	005b      	lsls	r3, r3, #1
 8000c1a:	6879      	ldr	r1, [r7, #4]
 8000c1c:	fa01 f303 	lsl.w	r3, r1, r3
 8000c20:	431a      	orrs	r2, r3
 8000c22:	68fb      	ldr	r3, [r7, #12]
 8000c24:	601a      	str	r2, [r3, #0]
}
 8000c26:	bf00      	nop
 8000c28:	3724      	adds	r7, #36	; 0x24
 8000c2a:	46bd      	mov	sp, r7
 8000c2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c30:	4770      	bx	lr

08000c32 <LL_GPIO_SetPinPull>:
  *         @arg @ref LL_GPIO_PULL_UP
  *         @arg @ref LL_GPIO_PULL_DOWN
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetPinPull(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t Pull)
{
 8000c32:	b480      	push	{r7}
 8000c34:	b089      	sub	sp, #36	; 0x24
 8000c36:	af00      	add	r7, sp, #0
 8000c38:	60f8      	str	r0, [r7, #12]
 8000c3a:	60b9      	str	r1, [r7, #8]
 8000c3c:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->PUPDR, (GPIO_PUPDR_PUPD0 << (POSITION_VAL(Pin) * 2U)), (Pull << (POSITION_VAL(Pin) * 2U)));
 8000c3e:	68fb      	ldr	r3, [r7, #12]
 8000c40:	68da      	ldr	r2, [r3, #12]
 8000c42:	68bb      	ldr	r3, [r7, #8]
 8000c44:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000c46:	697b      	ldr	r3, [r7, #20]
 8000c48:	fa93 f3a3 	rbit	r3, r3
 8000c4c:	613b      	str	r3, [r7, #16]
  return result;
 8000c4e:	693b      	ldr	r3, [r7, #16]
 8000c50:	fab3 f383 	clz	r3, r3
 8000c54:	b2db      	uxtb	r3, r3
 8000c56:	005b      	lsls	r3, r3, #1
 8000c58:	2103      	movs	r1, #3
 8000c5a:	fa01 f303 	lsl.w	r3, r1, r3
 8000c5e:	43db      	mvns	r3, r3
 8000c60:	401a      	ands	r2, r3
 8000c62:	68bb      	ldr	r3, [r7, #8]
 8000c64:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000c66:	69fb      	ldr	r3, [r7, #28]
 8000c68:	fa93 f3a3 	rbit	r3, r3
 8000c6c:	61bb      	str	r3, [r7, #24]
  return result;
 8000c6e:	69bb      	ldr	r3, [r7, #24]
 8000c70:	fab3 f383 	clz	r3, r3
 8000c74:	b2db      	uxtb	r3, r3
 8000c76:	005b      	lsls	r3, r3, #1
 8000c78:	6879      	ldr	r1, [r7, #4]
 8000c7a:	fa01 f303 	lsl.w	r3, r1, r3
 8000c7e:	431a      	orrs	r2, r3
 8000c80:	68fb      	ldr	r3, [r7, #12]
 8000c82:	60da      	str	r2, [r3, #12]
}
 8000c84:	bf00      	nop
 8000c86:	3724      	adds	r7, #36	; 0x24
 8000c88:	46bd      	mov	sp, r7
 8000c8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c8e:	4770      	bx	lr

08000c90 <LL_GPIO_ResetOutputPin>:
  *         @arg @ref LL_GPIO_PIN_15
  *         @arg @ref LL_GPIO_PIN_ALL
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_ResetOutputPin(GPIO_TypeDef *GPIOx, uint32_t PinMask)
{
 8000c90:	b480      	push	{r7}
 8000c92:	b083      	sub	sp, #12
 8000c94:	af00      	add	r7, sp, #0
 8000c96:	6078      	str	r0, [r7, #4]
 8000c98:	6039      	str	r1, [r7, #0]
  WRITE_REG(GPIOx->BRR, PinMask);
 8000c9a:	687b      	ldr	r3, [r7, #4]
 8000c9c:	683a      	ldr	r2, [r7, #0]
 8000c9e:	629a      	str	r2, [r3, #40]	; 0x28
}
 8000ca0:	bf00      	nop
 8000ca2:	370c      	adds	r7, #12
 8000ca4:	46bd      	mov	sp, r7
 8000ca6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000caa:	4770      	bx	lr

08000cac <LL_AHB2_GRP1_EnableClock>:
  *
  *         (*) value not defined in all devices.
  * @retval None
  */
__STATIC_INLINE void LL_AHB2_GRP1_EnableClock(uint32_t Periphs)
{
 8000cac:	b480      	push	{r7}
 8000cae:	b085      	sub	sp, #20
 8000cb0:	af00      	add	r7, sp, #0
 8000cb2:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->AHB2ENR, Periphs);
 8000cb4:	4b08      	ldr	r3, [pc, #32]	; (8000cd8 <LL_AHB2_GRP1_EnableClock+0x2c>)
 8000cb6:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8000cb8:	4907      	ldr	r1, [pc, #28]	; (8000cd8 <LL_AHB2_GRP1_EnableClock+0x2c>)
 8000cba:	687b      	ldr	r3, [r7, #4]
 8000cbc:	4313      	orrs	r3, r2
 8000cbe:	64cb      	str	r3, [r1, #76]	; 0x4c
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 8000cc0:	4b05      	ldr	r3, [pc, #20]	; (8000cd8 <LL_AHB2_GRP1_EnableClock+0x2c>)
 8000cc2:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8000cc4:	687b      	ldr	r3, [r7, #4]
 8000cc6:	4013      	ands	r3, r2
 8000cc8:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8000cca:	68fb      	ldr	r3, [r7, #12]
}
 8000ccc:	bf00      	nop
 8000cce:	3714      	adds	r7, #20
 8000cd0:	46bd      	mov	sp, r7
 8000cd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cd6:	4770      	bx	lr
 8000cd8:	40021000 	.word	0x40021000

08000cdc <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8000cdc:	b580      	push	{r7, lr}
 8000cde:	b08a      	sub	sp, #40	; 0x28
 8000ce0:	af00      	add	r7, sp, #0

  LL_EXTI_InitTypeDef EXTI_InitStruct = {0};
 8000ce2:	f107 031c 	add.w	r3, r7, #28
 8000ce6:	2200      	movs	r2, #0
 8000ce8:	601a      	str	r2, [r3, #0]
 8000cea:	605a      	str	r2, [r3, #4]
 8000cec:	609a      	str	r2, [r3, #8]
  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000cee:	1d3b      	adds	r3, r7, #4
 8000cf0:	2200      	movs	r2, #0
 8000cf2:	601a      	str	r2, [r3, #0]
 8000cf4:	605a      	str	r2, [r3, #4]
 8000cf6:	609a      	str	r2, [r3, #8]
 8000cf8:	60da      	str	r2, [r3, #12]
 8000cfa:	611a      	str	r2, [r3, #16]
 8000cfc:	615a      	str	r2, [r3, #20]

  /* GPIO Ports Clock Enable */
  LL_AHB2_GRP1_EnableClock(LL_AHB2_GRP1_PERIPH_GPIOC);
 8000cfe:	2004      	movs	r0, #4
 8000d00:	f7ff ffd4 	bl	8000cac <LL_AHB2_GRP1_EnableClock>
  LL_AHB2_GRP1_EnableClock(LL_AHB2_GRP1_PERIPH_GPIOF);
 8000d04:	2020      	movs	r0, #32
 8000d06:	f7ff ffd1 	bl	8000cac <LL_AHB2_GRP1_EnableClock>
  LL_AHB2_GRP1_EnableClock(LL_AHB2_GRP1_PERIPH_GPIOA);
 8000d0a:	2001      	movs	r0, #1
 8000d0c:	f7ff ffce 	bl	8000cac <LL_AHB2_GRP1_EnableClock>
  LL_AHB2_GRP1_EnableClock(LL_AHB2_GRP1_PERIPH_GPIOB);
 8000d10:	2002      	movs	r0, #2
 8000d12:	f7ff ffcb 	bl	8000cac <LL_AHB2_GRP1_EnableClock>

  /**/
  LL_GPIO_ResetOutputPin(TRIGMODE_GPIO_Port, TRIGMODE_Pin);
 8000d16:	2108      	movs	r1, #8
 8000d18:	48d3      	ldr	r0, [pc, #844]	; (8001068 <MX_GPIO_Init+0x38c>)
 8000d1a:	f7ff ffb9 	bl	8000c90 <LL_GPIO_ResetOutputPin>

  /**/
  LL_GPIO_ResetOutputPin(DCBIAS_INVERT_GPIO_Port, DCBIAS_INVERT_Pin);
 8000d1e:	2108      	movs	r1, #8
 8000d20:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000d24:	f7ff ffb4 	bl	8000c90 <LL_GPIO_ResetOutputPin>

  /**/
  LL_GPIO_ResetOutputPin(SG2_GPIO_Port, SG2_Pin);
 8000d28:	2110      	movs	r1, #16
 8000d2a:	48cf      	ldr	r0, [pc, #828]	; (8001068 <MX_GPIO_Init+0x38c>)
 8000d2c:	f7ff ffb0 	bl	8000c90 <LL_GPIO_ResetOutputPin>

  /**/
  LL_GPIO_ResetOutputPin(SG1_GPIO_Port, SG1_Pin);
 8000d30:	2120      	movs	r1, #32
 8000d32:	48cd      	ldr	r0, [pc, #820]	; (8001068 <MX_GPIO_Init+0x38c>)
 8000d34:	f7ff ffac 	bl	8000c90 <LL_GPIO_ResetOutputPin>

  /**/
  LL_GPIO_ResetOutputPin(SG0_GPIO_Port, SG0_Pin);
 8000d38:	2101      	movs	r1, #1
 8000d3a:	48cc      	ldr	r0, [pc, #816]	; (800106c <MX_GPIO_Init+0x390>)
 8000d3c:	f7ff ffa8 	bl	8000c90 <LL_GPIO_ResetOutputPin>

  /**/
  LL_GPIO_ResetOutputPin(TRIGMUX1_GPIO_Port, TRIGMUX1_Pin);
 8000d40:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000d44:	48c8      	ldr	r0, [pc, #800]	; (8001068 <MX_GPIO_Init+0x38c>)
 8000d46:	f7ff ffa3 	bl	8000c90 <LL_GPIO_ResetOutputPin>

  /**/
  LL_GPIO_ResetOutputPin(TRIGMUX2_GPIO_Port, TRIGMUX2_Pin);
 8000d4a:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000d4e:	48c6      	ldr	r0, [pc, #792]	; (8001068 <MX_GPIO_Init+0x38c>)
 8000d50:	f7ff ff9e 	bl	8000c90 <LL_GPIO_ResetOutputPin>

  /**/
  LL_GPIO_ResetOutputPin(DC_GPIO_Port, DC_Pin);
 8000d54:	2140      	movs	r1, #64	; 0x40
 8000d56:	48c5      	ldr	r0, [pc, #788]	; (800106c <MX_GPIO_Init+0x390>)
 8000d58:	f7ff ff9a 	bl	8000c90 <LL_GPIO_ResetOutputPin>

  /**/
  LL_GPIO_ResetOutputPin(CS_GPIO_Port, CS_Pin);
 8000d5c:	2180      	movs	r1, #128	; 0x80
 8000d5e:	48c3      	ldr	r0, [pc, #780]	; (800106c <MX_GPIO_Init+0x390>)
 8000d60:	f7ff ff96 	bl	8000c90 <LL_GPIO_ResetOutputPin>

  /**/
  LL_GPIO_ResetOutputPin(RST_GPIO_Port, RST_Pin);
 8000d64:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000d68:	48c0      	ldr	r0, [pc, #768]	; (800106c <MX_GPIO_Init+0x390>)
 8000d6a:	f7ff ff91 	bl	8000c90 <LL_GPIO_ResetOutputPin>

  /**/
  LL_SYSCFG_SetEXTISource(LL_SYSCFG_EXTI_PORTC, LL_SYSCFG_EXTI_LINE14);
 8000d6e:	49c0      	ldr	r1, [pc, #768]	; (8001070 <MX_GPIO_Init+0x394>)
 8000d70:	2002      	movs	r0, #2
 8000d72:	f7ff feff 	bl	8000b74 <LL_SYSCFG_SetEXTISource>

  /**/
  LL_SYSCFG_SetEXTISource(LL_SYSCFG_EXTI_PORTC, LL_SYSCFG_EXTI_LINE15);
 8000d76:	49bf      	ldr	r1, [pc, #764]	; (8001074 <MX_GPIO_Init+0x398>)
 8000d78:	2002      	movs	r0, #2
 8000d7a:	f7ff fefb 	bl	8000b74 <LL_SYSCFG_SetEXTISource>

  /**/
  LL_SYSCFG_SetEXTISource(LL_SYSCFG_EXTI_PORTF, LL_SYSCFG_EXTI_LINE0);
 8000d7e:	f44f 2170 	mov.w	r1, #983040	; 0xf0000
 8000d82:	2005      	movs	r0, #5
 8000d84:	f7ff fef6 	bl	8000b74 <LL_SYSCFG_SetEXTISource>

  /**/
  LL_SYSCFG_SetEXTISource(LL_SYSCFG_EXTI_PORTF, LL_SYSCFG_EXTI_LINE1);
 8000d88:	f44f 0170 	mov.w	r1, #15728640	; 0xf00000
 8000d8c:	2005      	movs	r0, #5
 8000d8e:	f7ff fef1 	bl	8000b74 <LL_SYSCFG_SetEXTISource>

  /**/
  LL_SYSCFG_SetEXTISource(LL_SYSCFG_EXTI_PORTC, LL_SYSCFG_EXTI_LINE2);
 8000d92:	f04f 6170 	mov.w	r1, #251658240	; 0xf000000
 8000d96:	2002      	movs	r0, #2
 8000d98:	f7ff feec 	bl	8000b74 <LL_SYSCFG_SetEXTISource>

  /**/
  EXTI_InitStruct.Line_0_31 = LL_EXTI_LINE_14;
 8000d9c:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8000da0:	61fb      	str	r3, [r7, #28]
  EXTI_InitStruct.LineCommand = ENABLE;
 8000da2:	2301      	movs	r3, #1
 8000da4:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
  EXTI_InitStruct.Mode = LL_EXTI_MODE_IT;
 8000da8:	2300      	movs	r3, #0
 8000daa:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
  EXTI_InitStruct.Trigger = LL_EXTI_TRIGGER_FALLING;
 8000dae:	2302      	movs	r3, #2
 8000db0:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
  LL_EXTI_Init(&EXTI_InitStruct);
 8000db4:	f107 031c 	add.w	r3, r7, #28
 8000db8:	4618      	mov	r0, r3
 8000dba:	f006 f9c1 	bl	8007140 <LL_EXTI_Init>

  /**/
  EXTI_InitStruct.Line_0_31 = LL_EXTI_LINE_15;
 8000dbe:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8000dc2:	61fb      	str	r3, [r7, #28]
  EXTI_InitStruct.LineCommand = ENABLE;
 8000dc4:	2301      	movs	r3, #1
 8000dc6:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
  EXTI_InitStruct.Mode = LL_EXTI_MODE_IT;
 8000dca:	2300      	movs	r3, #0
 8000dcc:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
  EXTI_InitStruct.Trigger = LL_EXTI_TRIGGER_FALLING;
 8000dd0:	2302      	movs	r3, #2
 8000dd2:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
  LL_EXTI_Init(&EXTI_InitStruct);
 8000dd6:	f107 031c 	add.w	r3, r7, #28
 8000dda:	4618      	mov	r0, r3
 8000ddc:	f006 f9b0 	bl	8007140 <LL_EXTI_Init>

  /**/
  EXTI_InitStruct.Line_0_31 = LL_EXTI_LINE_0;
 8000de0:	2301      	movs	r3, #1
 8000de2:	61fb      	str	r3, [r7, #28]
  EXTI_InitStruct.LineCommand = ENABLE;
 8000de4:	2301      	movs	r3, #1
 8000de6:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
  EXTI_InitStruct.Mode = LL_EXTI_MODE_IT;
 8000dea:	2300      	movs	r3, #0
 8000dec:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
  EXTI_InitStruct.Trigger = LL_EXTI_TRIGGER_FALLING;
 8000df0:	2302      	movs	r3, #2
 8000df2:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
  LL_EXTI_Init(&EXTI_InitStruct);
 8000df6:	f107 031c 	add.w	r3, r7, #28
 8000dfa:	4618      	mov	r0, r3
 8000dfc:	f006 f9a0 	bl	8007140 <LL_EXTI_Init>

  /**/
  EXTI_InitStruct.Line_0_31 = LL_EXTI_LINE_1;
 8000e00:	2302      	movs	r3, #2
 8000e02:	61fb      	str	r3, [r7, #28]
  EXTI_InitStruct.LineCommand = ENABLE;
 8000e04:	2301      	movs	r3, #1
 8000e06:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
  EXTI_InitStruct.Mode = LL_EXTI_MODE_IT;
 8000e0a:	2300      	movs	r3, #0
 8000e0c:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
  EXTI_InitStruct.Trigger = LL_EXTI_TRIGGER_FALLING;
 8000e10:	2302      	movs	r3, #2
 8000e12:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
  LL_EXTI_Init(&EXTI_InitStruct);
 8000e16:	f107 031c 	add.w	r3, r7, #28
 8000e1a:	4618      	mov	r0, r3
 8000e1c:	f006 f990 	bl	8007140 <LL_EXTI_Init>

  /**/
  EXTI_InitStruct.Line_0_31 = LL_EXTI_LINE_2;
 8000e20:	2304      	movs	r3, #4
 8000e22:	61fb      	str	r3, [r7, #28]
  EXTI_InitStruct.LineCommand = ENABLE;
 8000e24:	2301      	movs	r3, #1
 8000e26:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
  EXTI_InitStruct.Mode = LL_EXTI_MODE_IT;
 8000e2a:	2300      	movs	r3, #0
 8000e2c:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
  EXTI_InitStruct.Trigger = LL_EXTI_TRIGGER_FALLING;
 8000e30:	2302      	movs	r3, #2
 8000e32:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
  LL_EXTI_Init(&EXTI_InitStruct);
 8000e36:	f107 031c 	add.w	r3, r7, #28
 8000e3a:	4618      	mov	r0, r3
 8000e3c:	f006 f980 	bl	8007140 <LL_EXTI_Init>

  /**/
  LL_GPIO_SetPinPull(BTN1_EXTI14_GPIO_Port, BTN1_EXTI14_Pin, LL_GPIO_PULL_UP);
 8000e40:	2201      	movs	r2, #1
 8000e42:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000e46:	4888      	ldr	r0, [pc, #544]	; (8001068 <MX_GPIO_Init+0x38c>)
 8000e48:	f7ff fef3 	bl	8000c32 <LL_GPIO_SetPinPull>

  /**/
  LL_GPIO_SetPinPull(BTN2_EXTI15_GPIO_Port, BTN2_EXTI15_Pin, LL_GPIO_PULL_UP);
 8000e4c:	2201      	movs	r2, #1
 8000e4e:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000e52:	4885      	ldr	r0, [pc, #532]	; (8001068 <MX_GPIO_Init+0x38c>)
 8000e54:	f7ff feed 	bl	8000c32 <LL_GPIO_SetPinPull>

  /**/
  LL_GPIO_SetPinPull(BTN3_EXTI0_GPIO_Port, BTN3_EXTI0_Pin, LL_GPIO_PULL_UP);
 8000e58:	2201      	movs	r2, #1
 8000e5a:	2101      	movs	r1, #1
 8000e5c:	4886      	ldr	r0, [pc, #536]	; (8001078 <MX_GPIO_Init+0x39c>)
 8000e5e:	f7ff fee8 	bl	8000c32 <LL_GPIO_SetPinPull>

  /**/
  LL_GPIO_SetPinPull(BTN4_EXTI1_GPIO_Port, BTN4_EXTI1_Pin, LL_GPIO_PULL_UP);
 8000e62:	2201      	movs	r2, #1
 8000e64:	2102      	movs	r1, #2
 8000e66:	4884      	ldr	r0, [pc, #528]	; (8001078 <MX_GPIO_Init+0x39c>)
 8000e68:	f7ff fee3 	bl	8000c32 <LL_GPIO_SetPinPull>

  /**/
  LL_GPIO_SetPinPull(ENC_EXTI2_GPIO_Port, ENC_EXTI2_Pin, LL_GPIO_PULL_UP);
 8000e6c:	2201      	movs	r2, #1
 8000e6e:	2104      	movs	r1, #4
 8000e70:	487d      	ldr	r0, [pc, #500]	; (8001068 <MX_GPIO_Init+0x38c>)
 8000e72:	f7ff fede 	bl	8000c32 <LL_GPIO_SetPinPull>

  /**/
  LL_GPIO_SetPinMode(BTN1_EXTI14_GPIO_Port, BTN1_EXTI14_Pin, LL_GPIO_MODE_INPUT);
 8000e76:	2200      	movs	r2, #0
 8000e78:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000e7c:	487a      	ldr	r0, [pc, #488]	; (8001068 <MX_GPIO_Init+0x38c>)
 8000e7e:	f7ff fea9 	bl	8000bd4 <LL_GPIO_SetPinMode>

  /**/
  LL_GPIO_SetPinMode(BTN2_EXTI15_GPIO_Port, BTN2_EXTI15_Pin, LL_GPIO_MODE_INPUT);
 8000e82:	2200      	movs	r2, #0
 8000e84:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000e88:	4877      	ldr	r0, [pc, #476]	; (8001068 <MX_GPIO_Init+0x38c>)
 8000e8a:	f7ff fea3 	bl	8000bd4 <LL_GPIO_SetPinMode>

  /**/
  LL_GPIO_SetPinMode(BTN3_EXTI0_GPIO_Port, BTN3_EXTI0_Pin, LL_GPIO_MODE_INPUT);
 8000e8e:	2200      	movs	r2, #0
 8000e90:	2101      	movs	r1, #1
 8000e92:	4879      	ldr	r0, [pc, #484]	; (8001078 <MX_GPIO_Init+0x39c>)
 8000e94:	f7ff fe9e 	bl	8000bd4 <LL_GPIO_SetPinMode>

  /**/
  LL_GPIO_SetPinMode(BTN4_EXTI1_GPIO_Port, BTN4_EXTI1_Pin, LL_GPIO_MODE_INPUT);
 8000e98:	2200      	movs	r2, #0
 8000e9a:	2102      	movs	r1, #2
 8000e9c:	4876      	ldr	r0, [pc, #472]	; (8001078 <MX_GPIO_Init+0x39c>)
 8000e9e:	f7ff fe99 	bl	8000bd4 <LL_GPIO_SetPinMode>

  /**/
  LL_GPIO_SetPinMode(ENC_EXTI2_GPIO_Port, ENC_EXTI2_Pin, LL_GPIO_MODE_INPUT);
 8000ea2:	2200      	movs	r2, #0
 8000ea4:	2104      	movs	r1, #4
 8000ea6:	4870      	ldr	r0, [pc, #448]	; (8001068 <MX_GPIO_Init+0x38c>)
 8000ea8:	f7ff fe94 	bl	8000bd4 <LL_GPIO_SetPinMode>

  /**/
  GPIO_InitStruct.Pin = TRIGMODE_Pin;
 8000eac:	2308      	movs	r3, #8
 8000eae:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 8000eb0:	2301      	movs	r3, #1
 8000eb2:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 8000eb4:	2300      	movs	r3, #0
 8000eb6:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8000eb8:	2300      	movs	r3, #0
 8000eba:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_DOWN;
 8000ebc:	2302      	movs	r3, #2
 8000ebe:	617b      	str	r3, [r7, #20]
  LL_GPIO_Init(TRIGMODE_GPIO_Port, &GPIO_InitStruct);
 8000ec0:	1d3b      	adds	r3, r7, #4
 8000ec2:	4619      	mov	r1, r3
 8000ec4:	4868      	ldr	r0, [pc, #416]	; (8001068 <MX_GPIO_Init+0x38c>)
 8000ec6:	f006 fb2e 	bl	8007526 <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = DCBIAS_INVERT_Pin;
 8000eca:	2308      	movs	r3, #8
 8000ecc:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 8000ece:	2301      	movs	r3, #1
 8000ed0:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 8000ed2:	2300      	movs	r3, #0
 8000ed4:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8000ed6:	2300      	movs	r3, #0
 8000ed8:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8000eda:	2300      	movs	r3, #0
 8000edc:	617b      	str	r3, [r7, #20]
  LL_GPIO_Init(DCBIAS_INVERT_GPIO_Port, &GPIO_InitStruct);
 8000ede:	1d3b      	adds	r3, r7, #4
 8000ee0:	4619      	mov	r1, r3
 8000ee2:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000ee6:	f006 fb1e 	bl	8007526 <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = SG2_Pin;
 8000eea:	2310      	movs	r3, #16
 8000eec:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 8000eee:	2301      	movs	r3, #1
 8000ef0:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 8000ef2:	2300      	movs	r3, #0
 8000ef4:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8000ef6:	2300      	movs	r3, #0
 8000ef8:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8000efa:	2300      	movs	r3, #0
 8000efc:	617b      	str	r3, [r7, #20]
  LL_GPIO_Init(SG2_GPIO_Port, &GPIO_InitStruct);
 8000efe:	1d3b      	adds	r3, r7, #4
 8000f00:	4619      	mov	r1, r3
 8000f02:	4859      	ldr	r0, [pc, #356]	; (8001068 <MX_GPIO_Init+0x38c>)
 8000f04:	f006 fb0f 	bl	8007526 <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = SG1_Pin;
 8000f08:	2320      	movs	r3, #32
 8000f0a:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 8000f0c:	2301      	movs	r3, #1
 8000f0e:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 8000f10:	2300      	movs	r3, #0
 8000f12:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8000f14:	2300      	movs	r3, #0
 8000f16:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8000f18:	2300      	movs	r3, #0
 8000f1a:	617b      	str	r3, [r7, #20]
  LL_GPIO_Init(SG1_GPIO_Port, &GPIO_InitStruct);
 8000f1c:	1d3b      	adds	r3, r7, #4
 8000f1e:	4619      	mov	r1, r3
 8000f20:	4851      	ldr	r0, [pc, #324]	; (8001068 <MX_GPIO_Init+0x38c>)
 8000f22:	f006 fb00 	bl	8007526 <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = SG0_Pin;
 8000f26:	2301      	movs	r3, #1
 8000f28:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 8000f2a:	2301      	movs	r3, #1
 8000f2c:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 8000f2e:	2300      	movs	r3, #0
 8000f30:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8000f32:	2300      	movs	r3, #0
 8000f34:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8000f36:	2300      	movs	r3, #0
 8000f38:	617b      	str	r3, [r7, #20]
  LL_GPIO_Init(SG0_GPIO_Port, &GPIO_InitStruct);
 8000f3a:	1d3b      	adds	r3, r7, #4
 8000f3c:	4619      	mov	r1, r3
 8000f3e:	484b      	ldr	r0, [pc, #300]	; (800106c <MX_GPIO_Init+0x390>)
 8000f40:	f006 faf1 	bl	8007526 <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = TRIGMUX1_Pin;
 8000f44:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000f48:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 8000f4a:	2301      	movs	r3, #1
 8000f4c:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 8000f4e:	2300      	movs	r3, #0
 8000f50:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8000f52:	2300      	movs	r3, #0
 8000f54:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8000f56:	2300      	movs	r3, #0
 8000f58:	617b      	str	r3, [r7, #20]
  LL_GPIO_Init(TRIGMUX1_GPIO_Port, &GPIO_InitStruct);
 8000f5a:	1d3b      	adds	r3, r7, #4
 8000f5c:	4619      	mov	r1, r3
 8000f5e:	4842      	ldr	r0, [pc, #264]	; (8001068 <MX_GPIO_Init+0x38c>)
 8000f60:	f006 fae1 	bl	8007526 <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = TRIGMUX2_Pin;
 8000f64:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000f68:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 8000f6a:	2301      	movs	r3, #1
 8000f6c:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 8000f6e:	2300      	movs	r3, #0
 8000f70:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8000f72:	2300      	movs	r3, #0
 8000f74:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8000f76:	2300      	movs	r3, #0
 8000f78:	617b      	str	r3, [r7, #20]
  LL_GPIO_Init(TRIGMUX2_GPIO_Port, &GPIO_InitStruct);
 8000f7a:	1d3b      	adds	r3, r7, #4
 8000f7c:	4619      	mov	r1, r3
 8000f7e:	483a      	ldr	r0, [pc, #232]	; (8001068 <MX_GPIO_Init+0x38c>)
 8000f80:	f006 fad1 	bl	8007526 <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = DC_Pin;
 8000f84:	2340      	movs	r3, #64	; 0x40
 8000f86:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 8000f88:	2301      	movs	r3, #1
 8000f8a:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_VERY_HIGH;
 8000f8c:	2303      	movs	r3, #3
 8000f8e:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8000f90:	2300      	movs	r3, #0
 8000f92:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8000f94:	2300      	movs	r3, #0
 8000f96:	617b      	str	r3, [r7, #20]
  LL_GPIO_Init(DC_GPIO_Port, &GPIO_InitStruct);
 8000f98:	1d3b      	adds	r3, r7, #4
 8000f9a:	4619      	mov	r1, r3
 8000f9c:	4833      	ldr	r0, [pc, #204]	; (800106c <MX_GPIO_Init+0x390>)
 8000f9e:	f006 fac2 	bl	8007526 <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = CS_Pin;
 8000fa2:	2380      	movs	r3, #128	; 0x80
 8000fa4:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 8000fa6:	2301      	movs	r3, #1
 8000fa8:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_VERY_HIGH;
 8000faa:	2303      	movs	r3, #3
 8000fac:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8000fae:	2300      	movs	r3, #0
 8000fb0:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8000fb2:	2300      	movs	r3, #0
 8000fb4:	617b      	str	r3, [r7, #20]
  LL_GPIO_Init(CS_GPIO_Port, &GPIO_InitStruct);
 8000fb6:	1d3b      	adds	r3, r7, #4
 8000fb8:	4619      	mov	r1, r3
 8000fba:	482c      	ldr	r0, [pc, #176]	; (800106c <MX_GPIO_Init+0x390>)
 8000fbc:	f006 fab3 	bl	8007526 <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = RST_Pin;
 8000fc0:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000fc4:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 8000fc6:	2301      	movs	r3, #1
 8000fc8:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_VERY_HIGH;
 8000fca:	2303      	movs	r3, #3
 8000fcc:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8000fce:	2300      	movs	r3, #0
 8000fd0:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8000fd2:	2300      	movs	r3, #0
 8000fd4:	617b      	str	r3, [r7, #20]
  LL_GPIO_Init(RST_GPIO_Port, &GPIO_InitStruct);
 8000fd6:	1d3b      	adds	r3, r7, #4
 8000fd8:	4619      	mov	r1, r3
 8000fda:	4824      	ldr	r0, [pc, #144]	; (800106c <MX_GPIO_Init+0x390>)
 8000fdc:	f006 faa3 	bl	8007526 <LL_GPIO_Init>

  /* EXTI interrupt init*/
  NVIC_SetPriority(EXTI0_IRQn, NVIC_EncodePriority(NVIC_GetPriorityGrouping(),0, 0));
 8000fe0:	f7ff fd3e 	bl	8000a60 <__NVIC_GetPriorityGrouping>
 8000fe4:	4603      	mov	r3, r0
 8000fe6:	2200      	movs	r2, #0
 8000fe8:	2100      	movs	r1, #0
 8000fea:	4618      	mov	r0, r3
 8000fec:	f7ff fd8e 	bl	8000b0c <NVIC_EncodePriority>
 8000ff0:	4603      	mov	r3, r0
 8000ff2:	4619      	mov	r1, r3
 8000ff4:	2006      	movs	r0, #6
 8000ff6:	f7ff fd5f 	bl	8000ab8 <__NVIC_SetPriority>
  NVIC_EnableIRQ(EXTI0_IRQn);
 8000ffa:	2006      	movs	r0, #6
 8000ffc:	f7ff fd3e 	bl	8000a7c <__NVIC_EnableIRQ>
  NVIC_SetPriority(EXTI1_IRQn, NVIC_EncodePriority(NVIC_GetPriorityGrouping(),0, 0));
 8001000:	f7ff fd2e 	bl	8000a60 <__NVIC_GetPriorityGrouping>
 8001004:	4603      	mov	r3, r0
 8001006:	2200      	movs	r2, #0
 8001008:	2100      	movs	r1, #0
 800100a:	4618      	mov	r0, r3
 800100c:	f7ff fd7e 	bl	8000b0c <NVIC_EncodePriority>
 8001010:	4603      	mov	r3, r0
 8001012:	4619      	mov	r1, r3
 8001014:	2007      	movs	r0, #7
 8001016:	f7ff fd4f 	bl	8000ab8 <__NVIC_SetPriority>
  NVIC_EnableIRQ(EXTI1_IRQn);
 800101a:	2007      	movs	r0, #7
 800101c:	f7ff fd2e 	bl	8000a7c <__NVIC_EnableIRQ>
  NVIC_SetPriority(EXTI2_IRQn, NVIC_EncodePriority(NVIC_GetPriorityGrouping(),0, 0));
 8001020:	f7ff fd1e 	bl	8000a60 <__NVIC_GetPriorityGrouping>
 8001024:	4603      	mov	r3, r0
 8001026:	2200      	movs	r2, #0
 8001028:	2100      	movs	r1, #0
 800102a:	4618      	mov	r0, r3
 800102c:	f7ff fd6e 	bl	8000b0c <NVIC_EncodePriority>
 8001030:	4603      	mov	r3, r0
 8001032:	4619      	mov	r1, r3
 8001034:	2008      	movs	r0, #8
 8001036:	f7ff fd3f 	bl	8000ab8 <__NVIC_SetPriority>
  NVIC_EnableIRQ(EXTI2_IRQn);
 800103a:	2008      	movs	r0, #8
 800103c:	f7ff fd1e 	bl	8000a7c <__NVIC_EnableIRQ>
  NVIC_SetPriority(EXTI15_10_IRQn, NVIC_EncodePriority(NVIC_GetPriorityGrouping(),0, 0));
 8001040:	f7ff fd0e 	bl	8000a60 <__NVIC_GetPriorityGrouping>
 8001044:	4603      	mov	r3, r0
 8001046:	2200      	movs	r2, #0
 8001048:	2100      	movs	r1, #0
 800104a:	4618      	mov	r0, r3
 800104c:	f7ff fd5e 	bl	8000b0c <NVIC_EncodePriority>
 8001050:	4603      	mov	r3, r0
 8001052:	4619      	mov	r1, r3
 8001054:	2028      	movs	r0, #40	; 0x28
 8001056:	f7ff fd2f 	bl	8000ab8 <__NVIC_SetPriority>
  NVIC_EnableIRQ(EXTI15_10_IRQn);
 800105a:	2028      	movs	r0, #40	; 0x28
 800105c:	f7ff fd0e 	bl	8000a7c <__NVIC_EnableIRQ>

}
 8001060:	bf00      	nop
 8001062:	3728      	adds	r7, #40	; 0x28
 8001064:	46bd      	mov	sp, r7
 8001066:	e009      	b.n	800107c <MX_GPIO_Init+0x3a0>
 8001068:	48000800 	.word	0x48000800
 800106c:	48000400 	.word	0x48000400
 8001070:	0f000003 	.word	0x0f000003
 8001074:	f0000003 	.word	0xf0000003
 8001078:	48001400 	.word	0x48001400
 800107c:	bd80      	pop	{r7, pc}
 800107e:	bf00      	nop

08001080 <ITM_SendChar>:
           \li Is blocking when a debugger is connected, but the previous character sent has not been transmitted.
  \param [in]     ch  Character to transmit.
  \returns            Character to transmit.
 */
__STATIC_INLINE uint32_t ITM_SendChar (uint32_t ch)
{
 8001080:	b480      	push	{r7}
 8001082:	b083      	sub	sp, #12
 8001084:	af00      	add	r7, sp, #0
 8001086:	6078      	str	r0, [r7, #4]
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 8001088:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 800108c:	f8d3 3e80 	ldr.w	r3, [r3, #3712]	; 0xe80
 8001090:	f003 0301 	and.w	r3, r3, #1
 8001094:	2b00      	cmp	r3, #0
 8001096:	d013      	beq.n	80010c0 <ITM_SendChar+0x40>
      ((ITM->TER & 1UL               ) != 0UL)   )     /* ITM Port #0 enabled */
 8001098:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 800109c:	f8d3 3e00 	ldr.w	r3, [r3, #3584]	; 0xe00
 80010a0:	f003 0301 	and.w	r3, r3, #1
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 80010a4:	2b00      	cmp	r3, #0
 80010a6:	d00b      	beq.n	80010c0 <ITM_SendChar+0x40>
  {
    while (ITM->PORT[0U].u32 == 0UL)
 80010a8:	e000      	b.n	80010ac <ITM_SendChar+0x2c>
    {
      __NOP();
 80010aa:	bf00      	nop
    while (ITM->PORT[0U].u32 == 0UL)
 80010ac:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 80010b0:	681b      	ldr	r3, [r3, #0]
 80010b2:	2b00      	cmp	r3, #0
 80010b4:	d0f9      	beq.n	80010aa <ITM_SendChar+0x2a>
    }
    ITM->PORT[0U].u8 = (uint8_t)ch;
 80010b6:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 80010ba:	687a      	ldr	r2, [r7, #4]
 80010bc:	b2d2      	uxtb	r2, r2
 80010be:	701a      	strb	r2, [r3, #0]
  }
  return (ch);
 80010c0:	687b      	ldr	r3, [r7, #4]
}
 80010c2:	4618      	mov	r0, r3
 80010c4:	370c      	adds	r7, #12
 80010c6:	46bd      	mov	sp, r7
 80010c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010cc:	4770      	bx	lr

080010ce <_write>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
int _write(int file, char *ptr, int len)
{
 80010ce:	b580      	push	{r7, lr}
 80010d0:	b086      	sub	sp, #24
 80010d2:	af00      	add	r7, sp, #0
 80010d4:	60f8      	str	r0, [r7, #12]
 80010d6:	60b9      	str	r1, [r7, #8]
 80010d8:	607a      	str	r2, [r7, #4]
  /* Implement your write code here, this is used by puts and printf for example */
  int i=0;
 80010da:	2300      	movs	r3, #0
 80010dc:	617b      	str	r3, [r7, #20]
  for(i=0 ; i<len ; i++)
 80010de:	2300      	movs	r3, #0
 80010e0:	617b      	str	r3, [r7, #20]
 80010e2:	e009      	b.n	80010f8 <_write+0x2a>
    ITM_SendChar((*ptr++));
 80010e4:	68bb      	ldr	r3, [r7, #8]
 80010e6:	1c5a      	adds	r2, r3, #1
 80010e8:	60ba      	str	r2, [r7, #8]
 80010ea:	781b      	ldrb	r3, [r3, #0]
 80010ec:	4618      	mov	r0, r3
 80010ee:	f7ff ffc7 	bl	8001080 <ITM_SendChar>
  for(i=0 ; i<len ; i++)
 80010f2:	697b      	ldr	r3, [r7, #20]
 80010f4:	3301      	adds	r3, #1
 80010f6:	617b      	str	r3, [r7, #20]
 80010f8:	697a      	ldr	r2, [r7, #20]
 80010fa:	687b      	ldr	r3, [r7, #4]
 80010fc:	429a      	cmp	r2, r3
 80010fe:	dbf1      	blt.n	80010e4 <_write+0x16>
  return len;
 8001100:	687b      	ldr	r3, [r7, #4]
}
 8001102:	4618      	mov	r0, r3
 8001104:	3718      	adds	r7, #24
 8001106:	46bd      	mov	sp, r7
 8001108:	bd80      	pop	{r7, pc}
	...

0800110c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800110c:	b580      	push	{r7, lr}
 800110e:	b082      	sub	sp, #8
 8001110:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001112:	f000 ff4c 	bl	8001fae <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001116:	f000 f895 	bl	8001244 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800111a:	f7ff fddf 	bl	8000cdc <MX_GPIO_Init>
  MX_DMA_Init();
 800111e:	f7ff fc11 	bl	8000944 <MX_DMA_Init>
  MX_DAC1_Init();
 8001122:	f7ff fac1 	bl	80006a8 <MX_DAC1_Init>
  MX_DAC2_Init();
 8001126:	f7ff fb09 	bl	800073c <MX_DAC2_Init>
  MX_ADC1_Init();
 800112a:	f7ff f97f 	bl	800042c <MX_ADC1_Init>
  MX_COMP1_Init();
 800112e:	f7ff fa61 	bl	80005f4 <MX_COMP1_Init>
  MX_TIM2_Init();
 8001132:	f000 fc97 	bl	8001a64 <MX_TIM2_Init>
  MX_TIM17_Init();
 8001136:	f000 fddf 	bl	8001cf8 <MX_TIM17_Init>
  MX_SPI3_Init();
 800113a:	f000 f92f 	bl	800139c <MX_SPI3_Init>
  MX_RNG_Init();
 800113e:	f000 f91f 	bl	8001380 <MX_RNG_Init>
  MX_TIM1_Init();
 8001142:	f000 fc1f 	bl	8001984 <MX_TIM1_Init>
  MX_TIM8_Init();
 8001146:	f000 fcf7 	bl	8001b38 <MX_TIM8_Init>
  MX_TIM16_Init();
 800114a:	f000 fdaf 	bl	8001cac <MX_TIM16_Init>
  MX_TIM15_Init();
 800114e:	f000 fd5b 	bl	8001c08 <MX_TIM15_Init>
  /* USER CODE BEGIN 2 */

  // main signal function output (external)
  HAL_DAC_Start_DMA(&hdac1, DAC1_CHANNEL_1, sine_data_table, SINE_DATA_SIZE, DAC_ALIGN_12B_R);
 8001152:	2300      	movs	r3, #0
 8001154:	9300      	str	r3, [sp, #0]
 8001156:	2378      	movs	r3, #120	; 0x78
 8001158:	4a2f      	ldr	r2, [pc, #188]	; (8001218 <main+0x10c>)
 800115a:	2100      	movs	r1, #0
 800115c:	482f      	ldr	r0, [pc, #188]	; (800121c <main+0x110>)
 800115e:	f002 fc7d 	bl	8003a5c <HAL_DAC_Start_DMA>
  //TIM8->ARR = sin1_max_arr;

  // DC bias output (internal)
  HAL_DAC_Start(&hdac1, DAC1_CHANNEL_2);
 8001162:	2110      	movs	r1, #16
 8001164:	482d      	ldr	r0, [pc, #180]	; (800121c <main+0x110>)
 8001166:	f002 fc26 	bl	80039b6 <HAL_DAC_Start>
  //HAL_DAC_Start_DMA(&hdac2, DAC2_CHANNEL_1, sine_data_table, SINE_DATA_SIZE, DAC_ALIGN_12B_R);
  //HAL_DAC_Start_DMA(&hdac2, DAC2_CHANNEL_1, square_data_table, SQUARE_DATA_SIZE, DAC_ALIGN_12B_R);
  //HAL_DAC_Start_DMA(&hdac2, DAC2_CHANNEL_1, unitimpulse_data_table, UNITIMPULSE_DATA_SIZE, DAC_ALIGN_12B_R);
  //HAL_DAC_Start_DMA(&hdac2, DAC2_CHANNEL_1, saw_data_table, SAW_DATA_SIZE, DAC_ALIGN_12B_R);
  //HAL_DAC_Start_DMA(&hdac2, DAC2_CHANNEL_1, saw_rev_data_table, SAW_REV_DATA_SIZE, DAC_ALIGN_12B_R);
  HAL_DAC_Start_DMA(&hdac2, DAC2_CHANNEL_1, triangle_data_table, TRIANGLE_DATA_SIZE, DAC_ALIGN_12B_R);
 800116a:	2300      	movs	r3, #0
 800116c:	9300      	str	r3, [sp, #0]
 800116e:	2378      	movs	r3, #120	; 0x78
 8001170:	4a2b      	ldr	r2, [pc, #172]	; (8001220 <main+0x114>)
 8001172:	2100      	movs	r1, #0
 8001174:	482b      	ldr	r0, [pc, #172]	; (8001224 <main+0x118>)
 8001176:	f002 fc71 	bl	8003a5c <HAL_DAC_Start_DMA>

  //HAL_DAC_Start_DMA(&hdac2, DAC2_CHANNEL_1, trigger_input, TRIGGER_DATA_SIZE, DAC_ALIGN_12B_R);
#ifndef DISABLE_ALL_TIMERS
  // single clock to run all DAC channels. TODO add independent clocks
  HAL_TIM_Base_Start(&htim8);
 800117a:	482b      	ldr	r0, [pc, #172]	; (8001228 <main+0x11c>)
 800117c:	f004 ff34 	bl	8005fe8 <HAL_TIM_Base_Start>
#endif //DISABLE_ALL_TIMERS

  // DC bias inversion
  HAL_GPIO_WritePin(DCBIAS_INVERT_GPIO_Port, DCBIAS_INVERT_Pin, GPIO_PIN_SET);
 8001180:	2201      	movs	r2, #1
 8001182:	2108      	movs	r1, #8
 8001184:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001188:	f003 fbb2 	bl	80048f0 <HAL_GPIO_WritePin>

  // PGA gain
  HAL_GPIO_WritePin(SG0_GPIO_Port, SG0_Pin, GPIO_PIN_SET);
 800118c:	2201      	movs	r2, #1
 800118e:	2101      	movs	r1, #1
 8001190:	4826      	ldr	r0, [pc, #152]	; (800122c <main+0x120>)
 8001192:	f003 fbad 	bl	80048f0 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(SG1_GPIO_Port, SG1_Pin, GPIO_PIN_SET);
 8001196:	2201      	movs	r2, #1
 8001198:	2120      	movs	r1, #32
 800119a:	4825      	ldr	r0, [pc, #148]	; (8001230 <main+0x124>)
 800119c:	f003 fba8 	bl	80048f0 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(SG2_GPIO_Port, SG2_Pin, GPIO_PIN_SET);
 80011a0:	2201      	movs	r2, #1
 80011a2:	2110      	movs	r1, #16
 80011a4:	4822      	ldr	r0, [pc, #136]	; (8001230 <main+0x124>)
 80011a6:	f003 fba3 	bl	80048f0 <HAL_GPIO_WritePin>

#ifndef DISABLE_ALL_TIMERS
  // start test routine (update_dc_bias_sweep())
  HAL_TIM_Base_Start_IT(&htim17);
 80011aa:	4822      	ldr	r0, [pc, #136]	; (8001234 <main+0x128>)
 80011ac:	f004 ff4a 	bl	8006044 <HAL_TIM_Base_Start_IT>
#endif	//DISABLE_ALL_TIMERS


// http://www.ti.com/lit/ds/symlink/ts5a3357.pdf
  HAL_GPIO_WritePin(TRIGMUX1_GPIO_Port, TRIGMUX1_Pin, GPIO_PIN_RESET);	// TS5A3357 Pin6
 80011b0:	2200      	movs	r2, #0
 80011b2:	f44f 7180 	mov.w	r1, #256	; 0x100
 80011b6:	481e      	ldr	r0, [pc, #120]	; (8001230 <main+0x124>)
 80011b8:	f003 fb9a 	bl	80048f0 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(TRIGMUX2_GPIO_Port, TRIGMUX2_Pin, GPIO_PIN_RESET);	// TS5A3357 Pin5
 80011bc:	2200      	movs	r2, #0
 80011be:	f44f 7100 	mov.w	r1, #512	; 0x200
 80011c2:	481b      	ldr	r0, [pc, #108]	; (8001230 <main+0x124>)
 80011c4:	f003 fb94 	bl	80048f0 <HAL_GPIO_WritePin>

#ifdef TIM_TRIGGER_MODE
  // input capture on in TIM2 slave-mode TF1FP1

  // set HW switch to direct ext. trigger input to TIM pin
  HAL_GPIO_WritePin(TRIGMODE_GPIO_Port, TRIGMODE_Pin, GPIO_PIN_SET);
 80011c8:	2201      	movs	r2, #1
 80011ca:	2108      	movs	r1, #8
 80011cc:	4818      	ldr	r0, [pc, #96]	; (8001230 <main+0x124>)
 80011ce:	f003 fb8f 	bl	80048f0 <HAL_GPIO_WritePin>
  //HAL_GPIO_WritePin(TRIGMUX1_GPIO_Port, TRIGMUX1_Pin, GPIO_PIN_SET);	// TS5A3357 Pin6
  //HAL_GPIO_WritePin(TRIGMUX2_GPIO_Port, TRIGMUX2_Pin, GPIO_PIN_RESET); // TS5A3357 Pin5

  // clear slave mode select reg
  TIM2->SMCR &= ~(TIM_SMCR_SMS_0 | TIM_SMCR_SMS_1 | TIM_SMCR_SMS_2);
 80011d2:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80011d6:	689b      	ldr	r3, [r3, #8]
 80011d8:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80011dc:	f023 0307 	bic.w	r3, r3, #7
 80011e0:	6093      	str	r3, [r2, #8]

  // slave mode
  //TIM2->SMCR |= TIM_SMCR_SMS_2;						// SLAVE MODE: RESET
  TIM2->SMCR |= TIM_SMCR_SMS_0 | TIM_SMCR_SMS_2;	// SLAVE MODE: GATED
 80011e2:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80011e6:	689b      	ldr	r3, [r3, #8]
 80011e8:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80011ec:	f043 0305 	orr.w	r3, r3, #5
 80011f0:	6093      	str	r3, [r2, #8]
  //TIM2->SMCR |= TIM_SMCR_SMS_1 | TIM_SMCR_SMS_2;	// SLAVE MODE: TRIGGER

#ifndef DISABLE_ALL_TIMERS
  HAL_TIM_Base_Start_IT(&htim2);
 80011f2:	4811      	ldr	r0, [pc, #68]	; (8001238 <main+0x12c>)
 80011f4:	f004 ff26 	bl	8006044 <HAL_TIM_Base_Start_IT>



#ifndef DISABLE_ALL_TIMERS
  // encoder input
  HAL_TIM_Base_Start(&htim1);
 80011f8:	4810      	ldr	r0, [pc, #64]	; (800123c <main+0x130>)
 80011fa:	f004 fef5 	bl	8005fe8 <HAL_TIM_Base_Start>

  //ILI9341_2_Init();
  //ILI9341_FillScreen(WHITE);
  //ILI9341_WriteString(50, 50, "Test", Font_11x18, BLACK, RED);

  DM_Init();
 80011fe:	f7ff f86f 	bl	80002e0 <DM_Init>
  DM_RegisterStrings();
 8001202:	f7ff f889 	bl	8000318 <DM_RegisterStrings>
  HAL_Delay(2000);
 8001206:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 800120a:	f000 ff41 	bl	8002090 <HAL_Delay>
  HAL_TIM_Base_Start_IT(&htim15);
 800120e:	480c      	ldr	r0, [pc, #48]	; (8001240 <main+0x134>)
 8001210:	f004 ff18 	bl	8006044 <HAL_TIM_Base_Start_IT>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8001214:	e7fe      	b.n	8001214 <main+0x108>
 8001216:	bf00      	nop
 8001218:	20000004 	.word	0x20000004
 800121c:	20000618 	.word	0x20000618
 8001220:	200001e4 	.word	0x200001e4
 8001224:	20000604 	.word	0x20000604
 8001228:	200007b0 	.word	0x200007b0
 800122c:	48000400 	.word	0x48000400
 8001230:	48000800 	.word	0x48000800
 8001234:	20000848 	.word	0x20000848
 8001238:	200008e0 	.word	0x200008e0
 800123c:	20000894 	.word	0x20000894
 8001240:	200007fc 	.word	0x200007fc

08001244 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001244:	b580      	push	{r7, lr}
 8001246:	b0a8      	sub	sp, #160	; 0xa0
 8001248:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800124a:	f107 0368 	add.w	r3, r7, #104	; 0x68
 800124e:	2238      	movs	r2, #56	; 0x38
 8001250:	2100      	movs	r1, #0
 8001252:	4618      	mov	r0, r3
 8001254:	f007 f944 	bl	80084e0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001258:	f107 0354 	add.w	r3, r7, #84	; 0x54
 800125c:	2200      	movs	r2, #0
 800125e:	601a      	str	r2, [r3, #0]
 8001260:	605a      	str	r2, [r3, #4]
 8001262:	609a      	str	r2, [r3, #8]
 8001264:	60da      	str	r2, [r3, #12]
 8001266:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001268:	463b      	mov	r3, r7
 800126a:	2254      	movs	r2, #84	; 0x54
 800126c:	2100      	movs	r1, #0
 800126e:	4618      	mov	r0, r3
 8001270:	f007 f936 	bl	80084e0 <memset>

  /** Configure the main internal regulator output voltage 
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1_BOOST);
 8001274:	2000      	movs	r0, #0
 8001276:	f003 fb53 	bl	8004920 <HAL_PWREx_ControlVoltageScaling>
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_HSI48;
 800127a:	2322      	movs	r3, #34	; 0x22
 800127c:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800127e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001282:	677b      	str	r3, [r7, #116]	; 0x74
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001284:	2340      	movs	r3, #64	; 0x40
 8001286:	67bb      	str	r3, [r7, #120]	; 0x78
  RCC_OscInitStruct.HSI48State = RCC_HSI48_ON;
 8001288:	2301      	movs	r3, #1
 800128a:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800128e:	2302      	movs	r3, #2
 8001290:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8001294:	2302      	movs	r3, #2
 8001296:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV2;
 800129a:	2302      	movs	r3, #2
 800129c:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  RCC_OscInitStruct.PLL.PLLN = 42;
 80012a0:	232a      	movs	r3, #42	; 0x2a
 80012a2:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80012a6:	2302      	movs	r3, #2
 80012a8:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV4;
 80012ac:	2304      	movs	r3, #4
 80012ae:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 80012b2:	2302      	movs	r3, #2
 80012b4:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80012b8:	f107 0368 	add.w	r3, r7, #104	; 0x68
 80012bc:	4618      	mov	r0, r3
 80012be:	f003 fbd3 	bl	8004a68 <HAL_RCC_OscConfig>
 80012c2:	4603      	mov	r3, r0
 80012c4:	2b00      	cmp	r3, #0
 80012c6:	d001      	beq.n	80012cc <SystemClock_Config+0x88>
  {
    Error_Handler();
 80012c8:	f000 f82a 	bl	8001320 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80012cc:	230f      	movs	r3, #15
 80012ce:	657b      	str	r3, [r7, #84]	; 0x54
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80012d0:	2303      	movs	r3, #3
 80012d2:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80012d4:	2300      	movs	r3, #0
 80012d6:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80012d8:	2300      	movs	r3, #0
 80012da:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80012dc:	2300      	movs	r3, #0
 80012de:	667b      	str	r3, [r7, #100]	; 0x64

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_8) != HAL_OK)
 80012e0:	f107 0354 	add.w	r3, r7, #84	; 0x54
 80012e4:	2108      	movs	r1, #8
 80012e6:	4618      	mov	r0, r3
 80012e8:	f003 fed6 	bl	8005098 <HAL_RCC_ClockConfig>
 80012ec:	4603      	mov	r3, r0
 80012ee:	2b00      	cmp	r3, #0
 80012f0:	d001      	beq.n	80012f6 <SystemClock_Config+0xb2>
  {
    Error_Handler();
 80012f2:	f000 f815 	bl	8001320 <Error_Handler>
  }
  /** Initializes the peripherals clocks 
  */
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_RNG|RCC_PERIPHCLK_ADC12;
 80012f6:	f44f 4340 	mov.w	r3, #49152	; 0xc000
 80012fa:	603b      	str	r3, [r7, #0]
  PeriphClkInit.RngClockSelection = RCC_RNGCLKSOURCE_HSI48;
 80012fc:	2300      	movs	r3, #0
 80012fe:	643b      	str	r3, [r7, #64]	; 0x40
  PeriphClkInit.Adc12ClockSelection = RCC_ADC12CLKSOURCE_SYSCLK;
 8001300:	f04f 5300 	mov.w	r3, #536870912	; 0x20000000
 8001304:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001306:	463b      	mov	r3, r7
 8001308:	4618      	mov	r0, r3
 800130a:	f004 f8b5 	bl	8005478 <HAL_RCCEx_PeriphCLKConfig>
 800130e:	4603      	mov	r3, r0
 8001310:	2b00      	cmp	r3, #0
 8001312:	d001      	beq.n	8001318 <SystemClock_Config+0xd4>
  {
    Error_Handler();
 8001314:	f000 f804 	bl	8001320 <Error_Handler>
  }
}
 8001318:	bf00      	nop
 800131a:	37a0      	adds	r7, #160	; 0xa0
 800131c:	46bd      	mov	sp, r7
 800131e:	bd80      	pop	{r7, pc}

08001320 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001320:	b480      	push	{r7}
 8001322:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8001324:	bf00      	nop
 8001326:	46bd      	mov	sp, r7
 8001328:	f85d 7b04 	ldr.w	r7, [sp], #4
 800132c:	4770      	bx	lr

0800132e <LL_RNG_Enable>:
  * @rmtoll CR           RNGEN         LL_RNG_Enable
  * @param  RNGx RNG Instance
  * @retval None
  */
__STATIC_INLINE void LL_RNG_Enable(RNG_TypeDef *RNGx)
{
 800132e:	b480      	push	{r7}
 8001330:	b083      	sub	sp, #12
 8001332:	af00      	add	r7, sp, #0
 8001334:	6078      	str	r0, [r7, #4]
  SET_BIT(RNGx->CR, RNG_CR_RNGEN);
 8001336:	687b      	ldr	r3, [r7, #4]
 8001338:	681b      	ldr	r3, [r3, #0]
 800133a:	f043 0204 	orr.w	r2, r3, #4
 800133e:	687b      	ldr	r3, [r7, #4]
 8001340:	601a      	str	r2, [r3, #0]
}
 8001342:	bf00      	nop
 8001344:	370c      	adds	r7, #12
 8001346:	46bd      	mov	sp, r7
 8001348:	f85d 7b04 	ldr.w	r7, [sp], #4
 800134c:	4770      	bx	lr
	...

08001350 <LL_AHB2_GRP1_EnableClock>:
{
 8001350:	b480      	push	{r7}
 8001352:	b085      	sub	sp, #20
 8001354:	af00      	add	r7, sp, #0
 8001356:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB2ENR, Periphs);
 8001358:	4b08      	ldr	r3, [pc, #32]	; (800137c <LL_AHB2_GRP1_EnableClock+0x2c>)
 800135a:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800135c:	4907      	ldr	r1, [pc, #28]	; (800137c <LL_AHB2_GRP1_EnableClock+0x2c>)
 800135e:	687b      	ldr	r3, [r7, #4]
 8001360:	4313      	orrs	r3, r2
 8001362:	64cb      	str	r3, [r1, #76]	; 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 8001364:	4b05      	ldr	r3, [pc, #20]	; (800137c <LL_AHB2_GRP1_EnableClock+0x2c>)
 8001366:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8001368:	687b      	ldr	r3, [r7, #4]
 800136a:	4013      	ands	r3, r2
 800136c:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 800136e:	68fb      	ldr	r3, [r7, #12]
}
 8001370:	bf00      	nop
 8001372:	3714      	adds	r7, #20
 8001374:	46bd      	mov	sp, r7
 8001376:	f85d 7b04 	ldr.w	r7, [sp], #4
 800137a:	4770      	bx	lr
 800137c:	40021000 	.word	0x40021000

08001380 <MX_RNG_Init>:

/* USER CODE END 0 */

/* RNG init function */
void MX_RNG_Init(void)
{
 8001380:	b580      	push	{r7, lr}
 8001382:	af00      	add	r7, sp, #0

  /* Peripheral clock enable */
  LL_AHB2_GRP1_EnableClock(LL_AHB2_GRP1_PERIPH_RNG);
 8001384:	f04f 6080 	mov.w	r0, #67108864	; 0x4000000
 8001388:	f7ff ffe2 	bl	8001350 <LL_AHB2_GRP1_EnableClock>

  LL_RNG_Enable(RNG);
 800138c:	4802      	ldr	r0, [pc, #8]	; (8001398 <MX_RNG_Init+0x18>)
 800138e:	f7ff ffce 	bl	800132e <LL_RNG_Enable>

}
 8001392:	bf00      	nop
 8001394:	bd80      	pop	{r7, pc}
 8001396:	bf00      	nop
 8001398:	50060800 	.word	0x50060800

0800139c <MX_SPI3_Init>:
SPI_HandleTypeDef hspi3;
DMA_HandleTypeDef hdma_spi3_tx;

/* SPI3 init function */
void MX_SPI3_Init(void)
{
 800139c:	b580      	push	{r7, lr}
 800139e:	af00      	add	r7, sp, #0

  hspi3.Instance = SPI3;
 80013a0:	4b1b      	ldr	r3, [pc, #108]	; (8001410 <MX_SPI3_Init+0x74>)
 80013a2:	4a1c      	ldr	r2, [pc, #112]	; (8001414 <MX_SPI3_Init+0x78>)
 80013a4:	601a      	str	r2, [r3, #0]
  hspi3.Init.Mode = SPI_MODE_MASTER;
 80013a6:	4b1a      	ldr	r3, [pc, #104]	; (8001410 <MX_SPI3_Init+0x74>)
 80013a8:	f44f 7282 	mov.w	r2, #260	; 0x104
 80013ac:	605a      	str	r2, [r3, #4]
  hspi3.Init.Direction = SPI_DIRECTION_2LINES;
 80013ae:	4b18      	ldr	r3, [pc, #96]	; (8001410 <MX_SPI3_Init+0x74>)
 80013b0:	2200      	movs	r2, #0
 80013b2:	609a      	str	r2, [r3, #8]
  hspi3.Init.DataSize = SPI_DATASIZE_8BIT;
 80013b4:	4b16      	ldr	r3, [pc, #88]	; (8001410 <MX_SPI3_Init+0x74>)
 80013b6:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 80013ba:	60da      	str	r2, [r3, #12]
  hspi3.Init.CLKPolarity = SPI_POLARITY_LOW;
 80013bc:	4b14      	ldr	r3, [pc, #80]	; (8001410 <MX_SPI3_Init+0x74>)
 80013be:	2200      	movs	r2, #0
 80013c0:	611a      	str	r2, [r3, #16]
  hspi3.Init.CLKPhase = SPI_PHASE_1EDGE;
 80013c2:	4b13      	ldr	r3, [pc, #76]	; (8001410 <MX_SPI3_Init+0x74>)
 80013c4:	2200      	movs	r2, #0
 80013c6:	615a      	str	r2, [r3, #20]
  hspi3.Init.NSS = SPI_NSS_SOFT;
 80013c8:	4b11      	ldr	r3, [pc, #68]	; (8001410 <MX_SPI3_Init+0x74>)
 80013ca:	f44f 7200 	mov.w	r2, #512	; 0x200
 80013ce:	619a      	str	r2, [r3, #24]
  hspi3.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_8;
 80013d0:	4b0f      	ldr	r3, [pc, #60]	; (8001410 <MX_SPI3_Init+0x74>)
 80013d2:	2210      	movs	r2, #16
 80013d4:	61da      	str	r2, [r3, #28]
  hspi3.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80013d6:	4b0e      	ldr	r3, [pc, #56]	; (8001410 <MX_SPI3_Init+0x74>)
 80013d8:	2200      	movs	r2, #0
 80013da:	621a      	str	r2, [r3, #32]
  hspi3.Init.TIMode = SPI_TIMODE_DISABLE;
 80013dc:	4b0c      	ldr	r3, [pc, #48]	; (8001410 <MX_SPI3_Init+0x74>)
 80013de:	2200      	movs	r2, #0
 80013e0:	625a      	str	r2, [r3, #36]	; 0x24
  hspi3.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80013e2:	4b0b      	ldr	r3, [pc, #44]	; (8001410 <MX_SPI3_Init+0x74>)
 80013e4:	2200      	movs	r2, #0
 80013e6:	629a      	str	r2, [r3, #40]	; 0x28
  hspi3.Init.CRCPolynomial = 7;
 80013e8:	4b09      	ldr	r3, [pc, #36]	; (8001410 <MX_SPI3_Init+0x74>)
 80013ea:	2207      	movs	r2, #7
 80013ec:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi3.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 80013ee:	4b08      	ldr	r3, [pc, #32]	; (8001410 <MX_SPI3_Init+0x74>)
 80013f0:	2200      	movs	r2, #0
 80013f2:	631a      	str	r2, [r3, #48]	; 0x30
  hspi3.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 80013f4:	4b06      	ldr	r3, [pc, #24]	; (8001410 <MX_SPI3_Init+0x74>)
 80013f6:	2208      	movs	r2, #8
 80013f8:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi3) != HAL_OK)
 80013fa:	4805      	ldr	r0, [pc, #20]	; (8001410 <MX_SPI3_Init+0x74>)
 80013fc:	f004 fa88 	bl	8005910 <HAL_SPI_Init>
 8001400:	4603      	mov	r3, r0
 8001402:	2b00      	cmp	r3, #0
 8001404:	d001      	beq.n	800140a <MX_SPI3_Init+0x6e>
  {
    Error_Handler();
 8001406:	f7ff ff8b 	bl	8001320 <Error_Handler>
  }

}
 800140a:	bf00      	nop
 800140c:	bd80      	pop	{r7, pc}
 800140e:	bf00      	nop
 8001410:	200006ec 	.word	0x200006ec
 8001414:	40003c00 	.word	0x40003c00

08001418 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8001418:	b580      	push	{r7, lr}
 800141a:	b08a      	sub	sp, #40	; 0x28
 800141c:	af00      	add	r7, sp, #0
 800141e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001420:	f107 0314 	add.w	r3, r7, #20
 8001424:	2200      	movs	r2, #0
 8001426:	601a      	str	r2, [r3, #0]
 8001428:	605a      	str	r2, [r3, #4]
 800142a:	609a      	str	r2, [r3, #8]
 800142c:	60da      	str	r2, [r3, #12]
 800142e:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI3)
 8001430:	687b      	ldr	r3, [r7, #4]
 8001432:	681b      	ldr	r3, [r3, #0]
 8001434:	4a2c      	ldr	r2, [pc, #176]	; (80014e8 <HAL_SPI_MspInit+0xd0>)
 8001436:	4293      	cmp	r3, r2
 8001438:	d151      	bne.n	80014de <HAL_SPI_MspInit+0xc6>
  {
  /* USER CODE BEGIN SPI3_MspInit 0 */

  /* USER CODE END SPI3_MspInit 0 */
    /* SPI3 clock enable */
    __HAL_RCC_SPI3_CLK_ENABLE();
 800143a:	4b2c      	ldr	r3, [pc, #176]	; (80014ec <HAL_SPI_MspInit+0xd4>)
 800143c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800143e:	4a2b      	ldr	r2, [pc, #172]	; (80014ec <HAL_SPI_MspInit+0xd4>)
 8001440:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001444:	6593      	str	r3, [r2, #88]	; 0x58
 8001446:	4b29      	ldr	r3, [pc, #164]	; (80014ec <HAL_SPI_MspInit+0xd4>)
 8001448:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800144a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800144e:	613b      	str	r3, [r7, #16]
 8001450:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001452:	4b26      	ldr	r3, [pc, #152]	; (80014ec <HAL_SPI_MspInit+0xd4>)
 8001454:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001456:	4a25      	ldr	r2, [pc, #148]	; (80014ec <HAL_SPI_MspInit+0xd4>)
 8001458:	f043 0304 	orr.w	r3, r3, #4
 800145c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800145e:	4b23      	ldr	r3, [pc, #140]	; (80014ec <HAL_SPI_MspInit+0xd4>)
 8001460:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001462:	f003 0304 	and.w	r3, r3, #4
 8001466:	60fb      	str	r3, [r7, #12]
 8001468:	68fb      	ldr	r3, [r7, #12]
    /**SPI3 GPIO Configuration    
    PC10     ------> SPI3_SCK
    PC11     ------> SPI3_MISO
    PC12     ------> SPI3_MOSI 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12;
 800146a:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 800146e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001470:	2302      	movs	r3, #2
 8001472:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001474:	2300      	movs	r3, #0
 8001476:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001478:	2300      	movs	r3, #0
 800147a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 800147c:	2306      	movs	r3, #6
 800147e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001480:	f107 0314 	add.w	r3, r7, #20
 8001484:	4619      	mov	r1, r3
 8001486:	481a      	ldr	r0, [pc, #104]	; (80014f0 <HAL_SPI_MspInit+0xd8>)
 8001488:	f003 f898 	bl	80045bc <HAL_GPIO_Init>

    /* SPI3 DMA Init */
    /* SPI3_TX Init */
    hdma_spi3_tx.Instance = DMA1_Channel4;
 800148c:	4b19      	ldr	r3, [pc, #100]	; (80014f4 <HAL_SPI_MspInit+0xdc>)
 800148e:	4a1a      	ldr	r2, [pc, #104]	; (80014f8 <HAL_SPI_MspInit+0xe0>)
 8001490:	601a      	str	r2, [r3, #0]
    hdma_spi3_tx.Init.Request = DMA_REQUEST_SPI3_TX;
 8001492:	4b18      	ldr	r3, [pc, #96]	; (80014f4 <HAL_SPI_MspInit+0xdc>)
 8001494:	220f      	movs	r2, #15
 8001496:	605a      	str	r2, [r3, #4]
    hdma_spi3_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8001498:	4b16      	ldr	r3, [pc, #88]	; (80014f4 <HAL_SPI_MspInit+0xdc>)
 800149a:	2210      	movs	r2, #16
 800149c:	609a      	str	r2, [r3, #8]
    hdma_spi3_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 800149e:	4b15      	ldr	r3, [pc, #84]	; (80014f4 <HAL_SPI_MspInit+0xdc>)
 80014a0:	2200      	movs	r2, #0
 80014a2:	60da      	str	r2, [r3, #12]
    hdma_spi3_tx.Init.MemInc = DMA_MINC_ENABLE;
 80014a4:	4b13      	ldr	r3, [pc, #76]	; (80014f4 <HAL_SPI_MspInit+0xdc>)
 80014a6:	2280      	movs	r2, #128	; 0x80
 80014a8:	611a      	str	r2, [r3, #16]
    hdma_spi3_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80014aa:	4b12      	ldr	r3, [pc, #72]	; (80014f4 <HAL_SPI_MspInit+0xdc>)
 80014ac:	2200      	movs	r2, #0
 80014ae:	615a      	str	r2, [r3, #20]
    hdma_spi3_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80014b0:	4b10      	ldr	r3, [pc, #64]	; (80014f4 <HAL_SPI_MspInit+0xdc>)
 80014b2:	2200      	movs	r2, #0
 80014b4:	619a      	str	r2, [r3, #24]
    hdma_spi3_tx.Init.Mode = DMA_NORMAL;
 80014b6:	4b0f      	ldr	r3, [pc, #60]	; (80014f4 <HAL_SPI_MspInit+0xdc>)
 80014b8:	2200      	movs	r2, #0
 80014ba:	61da      	str	r2, [r3, #28]
    hdma_spi3_tx.Init.Priority = DMA_PRIORITY_LOW;
 80014bc:	4b0d      	ldr	r3, [pc, #52]	; (80014f4 <HAL_SPI_MspInit+0xdc>)
 80014be:	2200      	movs	r2, #0
 80014c0:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_spi3_tx) != HAL_OK)
 80014c2:	480c      	ldr	r0, [pc, #48]	; (80014f4 <HAL_SPI_MspInit+0xdc>)
 80014c4:	f002 fe08 	bl	80040d8 <HAL_DMA_Init>
 80014c8:	4603      	mov	r3, r0
 80014ca:	2b00      	cmp	r3, #0
 80014cc:	d001      	beq.n	80014d2 <HAL_SPI_MspInit+0xba>
    {
      Error_Handler();
 80014ce:	f7ff ff27 	bl	8001320 <Error_Handler>
    }

    __HAL_LINKDMA(spiHandle,hdmatx,hdma_spi3_tx);
 80014d2:	687b      	ldr	r3, [r7, #4]
 80014d4:	4a07      	ldr	r2, [pc, #28]	; (80014f4 <HAL_SPI_MspInit+0xdc>)
 80014d6:	655a      	str	r2, [r3, #84]	; 0x54
 80014d8:	4a06      	ldr	r2, [pc, #24]	; (80014f4 <HAL_SPI_MspInit+0xdc>)
 80014da:	687b      	ldr	r3, [r7, #4]
 80014dc:	6293      	str	r3, [r2, #40]	; 0x28

  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }
}
 80014de:	bf00      	nop
 80014e0:	3728      	adds	r7, #40	; 0x28
 80014e2:	46bd      	mov	sp, r7
 80014e4:	bd80      	pop	{r7, pc}
 80014e6:	bf00      	nop
 80014e8:	40003c00 	.word	0x40003c00
 80014ec:	40021000 	.word	0x40021000
 80014f0:	48000800 	.word	0x48000800
 80014f4:	20000750 	.word	0x20000750
 80014f8:	40020044 	.word	0x40020044

080014fc <LL_PWR_DisableUCPDDeadBattery>:
  *         control to the UCPD (which should therefore be initialized before doing the disable).
  * @rmtoll CR3          UCPD_DBDIS           LL_PWR_DisableUCPDDeadBattery
  * @retval None
  */
__STATIC_INLINE void LL_PWR_DisableUCPDDeadBattery(void)
{
 80014fc:	b480      	push	{r7}
 80014fe:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR3, PWR_CR3_UCPD_DBDIS);
 8001500:	4b05      	ldr	r3, [pc, #20]	; (8001518 <LL_PWR_DisableUCPDDeadBattery+0x1c>)
 8001502:	689b      	ldr	r3, [r3, #8]
 8001504:	4a04      	ldr	r2, [pc, #16]	; (8001518 <LL_PWR_DisableUCPDDeadBattery+0x1c>)
 8001506:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800150a:	6093      	str	r3, [r2, #8]
}
 800150c:	bf00      	nop
 800150e:	46bd      	mov	sp, r7
 8001510:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001514:	4770      	bx	lr
 8001516:	bf00      	nop
 8001518:	40007000 	.word	0x40007000

0800151c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800151c:	b580      	push	{r7, lr}
 800151e:	b082      	sub	sp, #8
 8001520:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001522:	4b0f      	ldr	r3, [pc, #60]	; (8001560 <HAL_MspInit+0x44>)
 8001524:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001526:	4a0e      	ldr	r2, [pc, #56]	; (8001560 <HAL_MspInit+0x44>)
 8001528:	f043 0301 	orr.w	r3, r3, #1
 800152c:	6613      	str	r3, [r2, #96]	; 0x60
 800152e:	4b0c      	ldr	r3, [pc, #48]	; (8001560 <HAL_MspInit+0x44>)
 8001530:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001532:	f003 0301 	and.w	r3, r3, #1
 8001536:	607b      	str	r3, [r7, #4]
 8001538:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800153a:	4b09      	ldr	r3, [pc, #36]	; (8001560 <HAL_MspInit+0x44>)
 800153c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800153e:	4a08      	ldr	r2, [pc, #32]	; (8001560 <HAL_MspInit+0x44>)
 8001540:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001544:	6593      	str	r3, [r2, #88]	; 0x58
 8001546:	4b06      	ldr	r3, [pc, #24]	; (8001560 <HAL_MspInit+0x44>)
 8001548:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800154a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800154e:	603b      	str	r3, [r7, #0]
 8001550:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral 
  */
  LL_PWR_DisableDeadBatteryPD();
 8001552:	f7ff ffd3 	bl	80014fc <LL_PWR_DisableUCPDDeadBattery>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001556:	bf00      	nop
 8001558:	3708      	adds	r7, #8
 800155a:	46bd      	mov	sp, r7
 800155c:	bd80      	pop	{r7, pc}
 800155e:	bf00      	nop
 8001560:	40021000 	.word	0x40021000

08001564 <LL_EXTI_IsActiveFlag_0_31>:
  * @note   (*): Available in some devices
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_EXTI_IsActiveFlag_0_31(uint32_t ExtiLine)
{
 8001564:	b480      	push	{r7}
 8001566:	b083      	sub	sp, #12
 8001568:	af00      	add	r7, sp, #0
 800156a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(EXTI->PR1, ExtiLine) == (ExtiLine)) ? 1UL : 0UL);
 800156c:	4b07      	ldr	r3, [pc, #28]	; (800158c <LL_EXTI_IsActiveFlag_0_31+0x28>)
 800156e:	695a      	ldr	r2, [r3, #20]
 8001570:	687b      	ldr	r3, [r7, #4]
 8001572:	4013      	ands	r3, r2
 8001574:	687a      	ldr	r2, [r7, #4]
 8001576:	429a      	cmp	r2, r3
 8001578:	d101      	bne.n	800157e <LL_EXTI_IsActiveFlag_0_31+0x1a>
 800157a:	2301      	movs	r3, #1
 800157c:	e000      	b.n	8001580 <LL_EXTI_IsActiveFlag_0_31+0x1c>
 800157e:	2300      	movs	r3, #0
}
 8001580:	4618      	mov	r0, r3
 8001582:	370c      	adds	r7, #12
 8001584:	46bd      	mov	sp, r7
 8001586:	f85d 7b04 	ldr.w	r7, [sp], #4
 800158a:	4770      	bx	lr
 800158c:	40010400 	.word	0x40010400

08001590 <LL_EXTI_ClearFlag_0_31>:
  * @note   (*): Available in some devices
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_ClearFlag_0_31(uint32_t ExtiLine)
{
 8001590:	b480      	push	{r7}
 8001592:	b083      	sub	sp, #12
 8001594:	af00      	add	r7, sp, #0
 8001596:	6078      	str	r0, [r7, #4]
  WRITE_REG(EXTI->PR1, ExtiLine);
 8001598:	4a04      	ldr	r2, [pc, #16]	; (80015ac <LL_EXTI_ClearFlag_0_31+0x1c>)
 800159a:	687b      	ldr	r3, [r7, #4]
 800159c:	6153      	str	r3, [r2, #20]
}
 800159e:	bf00      	nop
 80015a0:	370c      	adds	r7, #12
 80015a2:	46bd      	mov	sp, r7
 80015a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015a8:	4770      	bx	lr
 80015aa:	bf00      	nop
 80015ac:	40010400 	.word	0x40010400

080015b0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80015b0:	b480      	push	{r7}
 80015b2:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 80015b4:	bf00      	nop
 80015b6:	46bd      	mov	sp, r7
 80015b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015bc:	4770      	bx	lr

080015be <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80015be:	b480      	push	{r7}
 80015c0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80015c2:	e7fe      	b.n	80015c2 <HardFault_Handler+0x4>

080015c4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80015c4:	b480      	push	{r7}
 80015c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80015c8:	e7fe      	b.n	80015c8 <MemManage_Handler+0x4>

080015ca <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80015ca:	b480      	push	{r7}
 80015cc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80015ce:	e7fe      	b.n	80015ce <BusFault_Handler+0x4>

080015d0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80015d0:	b480      	push	{r7}
 80015d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80015d4:	e7fe      	b.n	80015d4 <UsageFault_Handler+0x4>

080015d6 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80015d6:	b480      	push	{r7}
 80015d8:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80015da:	bf00      	nop
 80015dc:	46bd      	mov	sp, r7
 80015de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015e2:	4770      	bx	lr

080015e4 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80015e4:	b480      	push	{r7}
 80015e6:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80015e8:	bf00      	nop
 80015ea:	46bd      	mov	sp, r7
 80015ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015f0:	4770      	bx	lr

080015f2 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80015f2:	b480      	push	{r7}
 80015f4:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80015f6:	bf00      	nop
 80015f8:	46bd      	mov	sp, r7
 80015fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015fe:	4770      	bx	lr

08001600 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001600:	b580      	push	{r7, lr}
 8001602:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001604:	f000 fd26 	bl	8002054 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001608:	bf00      	nop
 800160a:	bd80      	pop	{r7, pc}

0800160c <EXTI0_IRQHandler>:

/**
  * @brief This function handles EXTI line0 interrupt.
  */
void EXTI0_IRQHandler(void)
{
 800160c:	b580      	push	{r7, lr}
 800160e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI0_IRQn 0 */

//	if(HAL_GPIO_ReadPin(BTN3_EXTI0_GPIO_Port, BTN3_EXTI0_Pin))
//	{
		snprintf(control_pressed, sizeof(control_pressed), "BTN3");
 8001610:	4b09      	ldr	r3, [pc, #36]	; (8001638 <EXTI0_IRQHandler+0x2c>)
 8001612:	4a0a      	ldr	r2, [pc, #40]	; (800163c <EXTI0_IRQHandler+0x30>)
 8001614:	6810      	ldr	r0, [r2, #0]
 8001616:	6018      	str	r0, [r3, #0]
 8001618:	7912      	ldrb	r2, [r2, #4]
 800161a:	711a      	strb	r2, [r3, #4]
 		printf("BTN3_EXTI0_Pin\n");
 800161c:	4808      	ldr	r0, [pc, #32]	; (8001640 <EXTI0_IRQHandler+0x34>)
 800161e:	f006 ffdb 	bl	80085d8 <puts>
//	}

  /* USER CODE END EXTI0_IRQn 0 */
  if (LL_EXTI_IsActiveFlag_0_31(LL_EXTI_LINE_0) != RESET)
 8001622:	2001      	movs	r0, #1
 8001624:	f7ff ff9e 	bl	8001564 <LL_EXTI_IsActiveFlag_0_31>
 8001628:	4603      	mov	r3, r0
 800162a:	2b00      	cmp	r3, #0
 800162c:	d002      	beq.n	8001634 <EXTI0_IRQHandler+0x28>
  {
    LL_EXTI_ClearFlag_0_31(LL_EXTI_LINE_0);
 800162e:	2001      	movs	r0, #1
 8001630:	f7ff ffae 	bl	8001590 <LL_EXTI_ClearFlag_0_31>
    /* USER CODE END LL_EXTI_LINE_0 */
  }
  /* USER CODE BEGIN EXTI0_IRQn 1 */

  /* USER CODE END EXTI0_IRQn 1 */
}
 8001634:	bf00      	nop
 8001636:	bd80      	pop	{r7, pc}
 8001638:	20000508 	.word	0x20000508
 800163c:	08009794 	.word	0x08009794
 8001640:	0800979c 	.word	0x0800979c

08001644 <EXTI1_IRQHandler>:

/**
  * @brief This function handles EXTI line1 interrupt.
  */
void EXTI1_IRQHandler(void)
{
 8001644:	b580      	push	{r7, lr}
 8001646:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI1_IRQn 0 */

//	if(HAL_GPIO_ReadPin(BTN4_EXTI1_GPIO_Port, BTN4_EXTI1_Pin))
//	{
		snprintf(control_pressed, sizeof(control_pressed), "BTN4");
 8001648:	4b09      	ldr	r3, [pc, #36]	; (8001670 <EXTI1_IRQHandler+0x2c>)
 800164a:	4a0a      	ldr	r2, [pc, #40]	; (8001674 <EXTI1_IRQHandler+0x30>)
 800164c:	6810      	ldr	r0, [r2, #0]
 800164e:	6018      	str	r0, [r3, #0]
 8001650:	7912      	ldrb	r2, [r2, #4]
 8001652:	711a      	strb	r2, [r3, #4]
		printf("BTN4_EXTI1_Pin\n");
 8001654:	4808      	ldr	r0, [pc, #32]	; (8001678 <EXTI1_IRQHandler+0x34>)
 8001656:	f006 ffbf 	bl	80085d8 <puts>
//	}

  /* USER CODE END EXTI1_IRQn 0 */
  if (LL_EXTI_IsActiveFlag_0_31(LL_EXTI_LINE_1) != RESET)
 800165a:	2002      	movs	r0, #2
 800165c:	f7ff ff82 	bl	8001564 <LL_EXTI_IsActiveFlag_0_31>
 8001660:	4603      	mov	r3, r0
 8001662:	2b00      	cmp	r3, #0
 8001664:	d002      	beq.n	800166c <EXTI1_IRQHandler+0x28>
  {
    LL_EXTI_ClearFlag_0_31(LL_EXTI_LINE_1);
 8001666:	2002      	movs	r0, #2
 8001668:	f7ff ff92 	bl	8001590 <LL_EXTI_ClearFlag_0_31>
    /* USER CODE END LL_EXTI_LINE_1 */
  }
  /* USER CODE BEGIN EXTI1_IRQn 1 */

  /* USER CODE END EXTI1_IRQn 1 */
}
 800166c:	bf00      	nop
 800166e:	bd80      	pop	{r7, pc}
 8001670:	20000508 	.word	0x20000508
 8001674:	080097ac 	.word	0x080097ac
 8001678:	080097b4 	.word	0x080097b4

0800167c <EXTI2_IRQHandler>:

/**
  * @brief This function handles EXTI line2 interrupt.
  */
void EXTI2_IRQHandler(void)
{
 800167c:	b580      	push	{r7, lr}
 800167e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI2_IRQn 0 */


		snprintf(control_pressed, sizeof(control_pressed), "ENC_BTN");
 8001680:	4a09      	ldr	r2, [pc, #36]	; (80016a8 <EXTI2_IRQHandler+0x2c>)
 8001682:	4b0a      	ldr	r3, [pc, #40]	; (80016ac <EXTI2_IRQHandler+0x30>)
 8001684:	cb03      	ldmia	r3!, {r0, r1}
 8001686:	6010      	str	r0, [r2, #0]
 8001688:	6051      	str	r1, [r2, #4]
		printf("ENC_EXTI2_Pin\n");
 800168a:	4809      	ldr	r0, [pc, #36]	; (80016b0 <EXTI2_IRQHandler+0x34>)
 800168c:	f006 ffa4 	bl	80085d8 <puts>


  /* USER CODE END EXTI2_IRQn 0 */
  if (LL_EXTI_IsActiveFlag_0_31(LL_EXTI_LINE_2) != RESET)
 8001690:	2004      	movs	r0, #4
 8001692:	f7ff ff67 	bl	8001564 <LL_EXTI_IsActiveFlag_0_31>
 8001696:	4603      	mov	r3, r0
 8001698:	2b00      	cmp	r3, #0
 800169a:	d002      	beq.n	80016a2 <EXTI2_IRQHandler+0x26>
  {
    LL_EXTI_ClearFlag_0_31(LL_EXTI_LINE_2);
 800169c:	2004      	movs	r0, #4
 800169e:	f7ff ff77 	bl	8001590 <LL_EXTI_ClearFlag_0_31>
    /* USER CODE END LL_EXTI_LINE_2 */
  }
  /* USER CODE BEGIN EXTI2_IRQn 1 */

  /* USER CODE END EXTI2_IRQn 1 */
}
 80016a2:	bf00      	nop
 80016a4:	bd80      	pop	{r7, pc}
 80016a6:	bf00      	nop
 80016a8:	20000508 	.word	0x20000508
 80016ac:	080097c4 	.word	0x080097c4
 80016b0:	080097cc 	.word	0x080097cc

080016b4 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 80016b4:	b580      	push	{r7, lr}
 80016b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */
	//printf("Test\n");
	//printf("%lu\n", trigger_input[0]);
  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 80016b8:	4802      	ldr	r0, [pc, #8]	; (80016c4 <DMA1_Channel1_IRQHandler+0x10>)
 80016ba:	f002 fe30 	bl	800431e <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 80016be:	bf00      	nop
 80016c0:	bd80      	pop	{r7, pc}
 80016c2:	bf00      	nop
 80016c4:	20000580 	.word	0x20000580

080016c8 <DMA1_Channel2_IRQHandler>:

/**
  * @brief This function handles DMA1 channel2 global interrupt.
  */
void DMA1_Channel2_IRQHandler(void)
{
 80016c8:	b580      	push	{r7, lr}
 80016ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel2_IRQn 0 */

  /* USER CODE END DMA1_Channel2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_dac1_ch1);
 80016cc:	4802      	ldr	r0, [pc, #8]	; (80016d8 <DMA1_Channel2_IRQHandler+0x10>)
 80016ce:	f002 fe26 	bl	800431e <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel2_IRQn 1 */

  /* USER CODE END DMA1_Channel2_IRQn 1 */
}
 80016d2:	bf00      	nop
 80016d4:	bd80      	pop	{r7, pc}
 80016d6:	bf00      	nop
 80016d8:	2000062c 	.word	0x2000062c

080016dc <DMA1_Channel3_IRQHandler>:

/**
  * @brief This function handles DMA1 channel3 global interrupt.
  */
void DMA1_Channel3_IRQHandler(void)
{
 80016dc:	b580      	push	{r7, lr}
 80016de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel3_IRQn 0 */

  /* USER CODE END DMA1_Channel3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_dac2_ch1);
 80016e0:	4802      	ldr	r0, [pc, #8]	; (80016ec <DMA1_Channel3_IRQHandler+0x10>)
 80016e2:	f002 fe1c 	bl	800431e <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel3_IRQn 1 */

  /* USER CODE END DMA1_Channel3_IRQn 1 */
}
 80016e6:	bf00      	nop
 80016e8:	bd80      	pop	{r7, pc}
 80016ea:	bf00      	nop
 80016ec:	2000068c 	.word	0x2000068c

080016f0 <DMA1_Channel4_IRQHandler>:

/**
  * @brief This function handles DMA1 channel4 global interrupt.
  */
void DMA1_Channel4_IRQHandler(void)
{
 80016f0:	b580      	push	{r7, lr}
 80016f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel4_IRQn 0 */

  /* USER CODE END DMA1_Channel4_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi3_tx);
 80016f4:	4802      	ldr	r0, [pc, #8]	; (8001700 <DMA1_Channel4_IRQHandler+0x10>)
 80016f6:	f002 fe12 	bl	800431e <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel4_IRQn 1 */

  /* USER CODE END DMA1_Channel4_IRQn 1 */
}
 80016fa:	bf00      	nop
 80016fc:	bd80      	pop	{r7, pc}
 80016fe:	bf00      	nop
 8001700:	20000750 	.word	0x20000750

08001704 <TIM1_BRK_TIM15_IRQHandler>:

/**
  * @brief This function handles TIM1 break interrupt and TIM15 global interrupt.
  */
void TIM1_BRK_TIM15_IRQHandler(void)
{
 8001704:	b580      	push	{r7, lr}
 8001706:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_BRK_TIM15_IRQn 0 */
	DM_UpdateDisplay();
 8001708:	f7fe fe44 	bl	8000394 <DM_UpdateDisplay>
  /* USER CODE END TIM1_BRK_TIM15_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 800170c:	4803      	ldr	r0, [pc, #12]	; (800171c <TIM1_BRK_TIM15_IRQHandler+0x18>)
 800170e:	f004 fd75 	bl	80061fc <HAL_TIM_IRQHandler>
  HAL_TIM_IRQHandler(&htim15);
 8001712:	4803      	ldr	r0, [pc, #12]	; (8001720 <TIM1_BRK_TIM15_IRQHandler+0x1c>)
 8001714:	f004 fd72 	bl	80061fc <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_BRK_TIM15_IRQn 1 */

  /* USER CODE END TIM1_BRK_TIM15_IRQn 1 */
}
 8001718:	bf00      	nop
 800171a:	bd80      	pop	{r7, pc}
 800171c:	20000894 	.word	0x20000894
 8001720:	200007fc 	.word	0x200007fc

08001724 <TIM1_UP_TIM16_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM16 global interrupt.
  */
void TIM1_UP_TIM16_IRQHandler(void)
{
 8001724:	b580      	push	{r7, lr}
 8001726:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 0 */
	snprintf(control_pressed, sizeof(control_pressed), " ");
 8001728:	4a05      	ldr	r2, [pc, #20]	; (8001740 <TIM1_UP_TIM16_IRQHandler+0x1c>)
 800172a:	4b06      	ldr	r3, [pc, #24]	; (8001744 <TIM1_UP_TIM16_IRQHandler+0x20>)
 800172c:	881b      	ldrh	r3, [r3, #0]
 800172e:	8013      	strh	r3, [r2, #0]
  /* USER CODE END TIM1_UP_TIM16_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8001730:	4805      	ldr	r0, [pc, #20]	; (8001748 <TIM1_UP_TIM16_IRQHandler+0x24>)
 8001732:	f004 fd63 	bl	80061fc <HAL_TIM_IRQHandler>
  HAL_TIM_IRQHandler(&htim16);
 8001736:	4805      	ldr	r0, [pc, #20]	; (800174c <TIM1_UP_TIM16_IRQHandler+0x28>)
 8001738:	f004 fd60 	bl	80061fc <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 1 */
}
 800173c:	bf00      	nop
 800173e:	bd80      	pop	{r7, pc}
 8001740:	20000508 	.word	0x20000508
 8001744:	080097dc 	.word	0x080097dc
 8001748:	20000894 	.word	0x20000894
 800174c:	2000092c 	.word	0x2000092c

08001750 <TIM1_TRG_COM_TIM17_IRQHandler>:

/**
  * @brief This function handles TIM1 trigger and commutation interrupts and TIM17 global interrupt.
  */
void TIM1_TRG_COM_TIM17_IRQHandler(void)
{
 8001750:	b580      	push	{r7, lr}
 8001752:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_TRG_COM_TIM17_IRQn 0 */
	update_dc_bias_sweep();
 8001754:	f7ff f938 	bl	80009c8 <update_dc_bias_sweep>
	if((TIM1->CNT < last_enc_value) || (TIM1->CNT > last_enc_value))
 8001758:	4b11      	ldr	r3, [pc, #68]	; (80017a0 <TIM1_TRG_COM_TIM17_IRQHandler+0x50>)
 800175a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800175c:	4a11      	ldr	r2, [pc, #68]	; (80017a4 <TIM1_TRG_COM_TIM17_IRQHandler+0x54>)
 800175e:	8812      	ldrh	r2, [r2, #0]
 8001760:	4293      	cmp	r3, r2
 8001762:	d305      	bcc.n	8001770 <TIM1_TRG_COM_TIM17_IRQHandler+0x20>
 8001764:	4b0e      	ldr	r3, [pc, #56]	; (80017a0 <TIM1_TRG_COM_TIM17_IRQHandler+0x50>)
 8001766:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001768:	4a0e      	ldr	r2, [pc, #56]	; (80017a4 <TIM1_TRG_COM_TIM17_IRQHandler+0x54>)
 800176a:	8812      	ldrh	r2, [r2, #0]
 800176c:	4293      	cmp	r3, r2
 800176e:	d90a      	bls.n	8001786 <TIM1_TRG_COM_TIM17_IRQHandler+0x36>
	{
		printf("%lu\n",TIM1->CNT);
 8001770:	4b0b      	ldr	r3, [pc, #44]	; (80017a0 <TIM1_TRG_COM_TIM17_IRQHandler+0x50>)
 8001772:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001774:	4619      	mov	r1, r3
 8001776:	480c      	ldr	r0, [pc, #48]	; (80017a8 <TIM1_TRG_COM_TIM17_IRQHandler+0x58>)
 8001778:	f006 feba 	bl	80084f0 <iprintf>
		new_enc_value = TIM1->CNT;
 800177c:	4b08      	ldr	r3, [pc, #32]	; (80017a0 <TIM1_TRG_COM_TIM17_IRQHandler+0x50>)
 800177e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001780:	b29a      	uxth	r2, r3
 8001782:	4b0a      	ldr	r3, [pc, #40]	; (80017ac <TIM1_TRG_COM_TIM17_IRQHandler+0x5c>)
 8001784:	801a      	strh	r2, [r3, #0]
	}


	last_enc_value = TIM1->CNT;
 8001786:	4b06      	ldr	r3, [pc, #24]	; (80017a0 <TIM1_TRG_COM_TIM17_IRQHandler+0x50>)
 8001788:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800178a:	b29a      	uxth	r2, r3
 800178c:	4b05      	ldr	r3, [pc, #20]	; (80017a4 <TIM1_TRG_COM_TIM17_IRQHandler+0x54>)
 800178e:	801a      	strh	r2, [r3, #0]


  /* USER CODE END TIM1_TRG_COM_TIM17_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8001790:	4807      	ldr	r0, [pc, #28]	; (80017b0 <TIM1_TRG_COM_TIM17_IRQHandler+0x60>)
 8001792:	f004 fd33 	bl	80061fc <HAL_TIM_IRQHandler>
  HAL_TIM_IRQHandler(&htim17);
 8001796:	4807      	ldr	r0, [pc, #28]	; (80017b4 <TIM1_TRG_COM_TIM17_IRQHandler+0x64>)
 8001798:	f004 fd30 	bl	80061fc <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_TRG_COM_TIM17_IRQn 1 */

  /* USER CODE END TIM1_TRG_COM_TIM17_IRQn 1 */
}
 800179c:	bf00      	nop
 800179e:	bd80      	pop	{r7, pc}
 80017a0:	40012c00 	.word	0x40012c00
 80017a4:	200004f8 	.word	0x200004f8
 80017a8:	080097e0 	.word	0x080097e0
 80017ac:	200004fa 	.word	0x200004fa
 80017b0:	20000894 	.word	0x20000894
 80017b4:	20000848 	.word	0x20000848

080017b8 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 80017b8:	b580      	push	{r7, lr}
 80017ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 80017bc:	4802      	ldr	r0, [pc, #8]	; (80017c8 <TIM2_IRQHandler+0x10>)
 80017be:	f004 fd1d 	bl	80061fc <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 80017c2:	bf00      	nop
 80017c4:	bd80      	pop	{r7, pc}
 80017c6:	bf00      	nop
 80017c8:	200008e0 	.word	0x200008e0

080017cc <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 80017cc:	b580      	push	{r7, lr}
 80017ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

	if(HAL_GPIO_ReadPin(BTN1_EXTI14_GPIO_Port, BTN1_EXTI14_Pin))
 80017d0:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80017d4:	481b      	ldr	r0, [pc, #108]	; (8001844 <EXTI15_10_IRQHandler+0x78>)
 80017d6:	f003 f873 	bl	80048c0 <HAL_GPIO_ReadPin>
 80017da:	4603      	mov	r3, r0
 80017dc:	2b00      	cmp	r3, #0
 80017de:	d008      	beq.n	80017f2 <EXTI15_10_IRQHandler+0x26>
	{
		snprintf(control_pressed, sizeof(control_pressed), "BTN1");
 80017e0:	4b19      	ldr	r3, [pc, #100]	; (8001848 <EXTI15_10_IRQHandler+0x7c>)
 80017e2:	4a1a      	ldr	r2, [pc, #104]	; (800184c <EXTI15_10_IRQHandler+0x80>)
 80017e4:	6810      	ldr	r0, [r2, #0]
 80017e6:	6018      	str	r0, [r3, #0]
 80017e8:	7912      	ldrb	r2, [r2, #4]
 80017ea:	711a      	strb	r2, [r3, #4]
		printf("BTN1_EXTI14_Pin\n");
 80017ec:	4818      	ldr	r0, [pc, #96]	; (8001850 <EXTI15_10_IRQHandler+0x84>)
 80017ee:	f006 fef3 	bl	80085d8 <puts>
	}
	if(HAL_GPIO_ReadPin(BTN2_EXTI15_GPIO_Port, BTN2_EXTI15_Pin))
 80017f2:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80017f6:	4813      	ldr	r0, [pc, #76]	; (8001844 <EXTI15_10_IRQHandler+0x78>)
 80017f8:	f003 f862 	bl	80048c0 <HAL_GPIO_ReadPin>
 80017fc:	4603      	mov	r3, r0
 80017fe:	2b00      	cmp	r3, #0
 8001800:	d008      	beq.n	8001814 <EXTI15_10_IRQHandler+0x48>
	{
		snprintf(control_pressed, sizeof(control_pressed), "BTN2");
 8001802:	4b11      	ldr	r3, [pc, #68]	; (8001848 <EXTI15_10_IRQHandler+0x7c>)
 8001804:	4a13      	ldr	r2, [pc, #76]	; (8001854 <EXTI15_10_IRQHandler+0x88>)
 8001806:	6810      	ldr	r0, [r2, #0]
 8001808:	6018      	str	r0, [r3, #0]
 800180a:	7912      	ldrb	r2, [r2, #4]
 800180c:	711a      	strb	r2, [r3, #4]
		printf("BTN2_EXTI15_Pin\n");
 800180e:	4812      	ldr	r0, [pc, #72]	; (8001858 <EXTI15_10_IRQHandler+0x8c>)
 8001810:	f006 fee2 	bl	80085d8 <puts>
	}

  /* USER CODE END EXTI15_10_IRQn 0 */
  if (LL_EXTI_IsActiveFlag_0_31(LL_EXTI_LINE_14) != RESET)
 8001814:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 8001818:	f7ff fea4 	bl	8001564 <LL_EXTI_IsActiveFlag_0_31>
 800181c:	4603      	mov	r3, r0
 800181e:	2b00      	cmp	r3, #0
 8001820:	d003      	beq.n	800182a <EXTI15_10_IRQHandler+0x5e>
  {
    LL_EXTI_ClearFlag_0_31(LL_EXTI_LINE_14);
 8001822:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 8001826:	f7ff feb3 	bl	8001590 <LL_EXTI_ClearFlag_0_31>
    /* USER CODE BEGIN LL_EXTI_LINE_14 */
    
    /* USER CODE END LL_EXTI_LINE_14 */
  }
  if (LL_EXTI_IsActiveFlag_0_31(LL_EXTI_LINE_15) != RESET)
 800182a:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 800182e:	f7ff fe99 	bl	8001564 <LL_EXTI_IsActiveFlag_0_31>
 8001832:	4603      	mov	r3, r0
 8001834:	2b00      	cmp	r3, #0
 8001836:	d003      	beq.n	8001840 <EXTI15_10_IRQHandler+0x74>
  {
    LL_EXTI_ClearFlag_0_31(LL_EXTI_LINE_15);
 8001838:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 800183c:	f7ff fea8 	bl	8001590 <LL_EXTI_ClearFlag_0_31>
    /* USER CODE END LL_EXTI_LINE_15 */
  }
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8001840:	bf00      	nop
 8001842:	bd80      	pop	{r7, pc}
 8001844:	48000800 	.word	0x48000800
 8001848:	20000508 	.word	0x20000508
 800184c:	080097e8 	.word	0x080097e8
 8001850:	080097f0 	.word	0x080097f0
 8001854:	08009800 	.word	0x08009800
 8001858:	08009808 	.word	0x08009808

0800185c <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 800185c:	b580      	push	{r7, lr}
 800185e:	b086      	sub	sp, #24
 8001860:	af00      	add	r7, sp, #0
 8001862:	60f8      	str	r0, [r7, #12]
 8001864:	60b9      	str	r1, [r7, #8]
 8001866:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001868:	2300      	movs	r3, #0
 800186a:	617b      	str	r3, [r7, #20]
 800186c:	e00a      	b.n	8001884 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 800186e:	f3af 8000 	nop.w
 8001872:	4601      	mov	r1, r0
 8001874:	68bb      	ldr	r3, [r7, #8]
 8001876:	1c5a      	adds	r2, r3, #1
 8001878:	60ba      	str	r2, [r7, #8]
 800187a:	b2ca      	uxtb	r2, r1
 800187c:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800187e:	697b      	ldr	r3, [r7, #20]
 8001880:	3301      	adds	r3, #1
 8001882:	617b      	str	r3, [r7, #20]
 8001884:	697a      	ldr	r2, [r7, #20]
 8001886:	687b      	ldr	r3, [r7, #4]
 8001888:	429a      	cmp	r2, r3
 800188a:	dbf0      	blt.n	800186e <_read+0x12>
	}

return len;
 800188c:	687b      	ldr	r3, [r7, #4]
}
 800188e:	4618      	mov	r0, r3
 8001890:	3718      	adds	r7, #24
 8001892:	46bd      	mov	sp, r7
 8001894:	bd80      	pop	{r7, pc}

08001896 <_close>:
	}
	return len;
}

int _close(int file)
{
 8001896:	b480      	push	{r7}
 8001898:	b083      	sub	sp, #12
 800189a:	af00      	add	r7, sp, #0
 800189c:	6078      	str	r0, [r7, #4]
	return -1;
 800189e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 80018a2:	4618      	mov	r0, r3
 80018a4:	370c      	adds	r7, #12
 80018a6:	46bd      	mov	sp, r7
 80018a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018ac:	4770      	bx	lr

080018ae <_fstat>:


int _fstat(int file, struct stat *st)
{
 80018ae:	b480      	push	{r7}
 80018b0:	b083      	sub	sp, #12
 80018b2:	af00      	add	r7, sp, #0
 80018b4:	6078      	str	r0, [r7, #4]
 80018b6:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 80018b8:	683b      	ldr	r3, [r7, #0]
 80018ba:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80018be:	605a      	str	r2, [r3, #4]
	return 0;
 80018c0:	2300      	movs	r3, #0
}
 80018c2:	4618      	mov	r0, r3
 80018c4:	370c      	adds	r7, #12
 80018c6:	46bd      	mov	sp, r7
 80018c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018cc:	4770      	bx	lr

080018ce <_isatty>:

int _isatty(int file)
{
 80018ce:	b480      	push	{r7}
 80018d0:	b083      	sub	sp, #12
 80018d2:	af00      	add	r7, sp, #0
 80018d4:	6078      	str	r0, [r7, #4]
	return 1;
 80018d6:	2301      	movs	r3, #1
}
 80018d8:	4618      	mov	r0, r3
 80018da:	370c      	adds	r7, #12
 80018dc:	46bd      	mov	sp, r7
 80018de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018e2:	4770      	bx	lr

080018e4 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80018e4:	b480      	push	{r7}
 80018e6:	b085      	sub	sp, #20
 80018e8:	af00      	add	r7, sp, #0
 80018ea:	60f8      	str	r0, [r7, #12]
 80018ec:	60b9      	str	r1, [r7, #8]
 80018ee:	607a      	str	r2, [r7, #4]
	return 0;
 80018f0:	2300      	movs	r3, #0
}
 80018f2:	4618      	mov	r0, r3
 80018f4:	3714      	adds	r7, #20
 80018f6:	46bd      	mov	sp, r7
 80018f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018fc:	4770      	bx	lr
	...

08001900 <_sbrk>:
/**
 _sbrk
 Increase program data space. Malloc and related functions depend on this
**/
caddr_t _sbrk(int incr)
{
 8001900:	b580      	push	{r7, lr}
 8001902:	b084      	sub	sp, #16
 8001904:	af00      	add	r7, sp, #0
 8001906:	6078      	str	r0, [r7, #4]
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 8001908:	4b11      	ldr	r3, [pc, #68]	; (8001950 <_sbrk+0x50>)
 800190a:	681b      	ldr	r3, [r3, #0]
 800190c:	2b00      	cmp	r3, #0
 800190e:	d102      	bne.n	8001916 <_sbrk+0x16>
		heap_end = &end;
 8001910:	4b0f      	ldr	r3, [pc, #60]	; (8001950 <_sbrk+0x50>)
 8001912:	4a10      	ldr	r2, [pc, #64]	; (8001954 <_sbrk+0x54>)
 8001914:	601a      	str	r2, [r3, #0]

	prev_heap_end = heap_end;
 8001916:	4b0e      	ldr	r3, [pc, #56]	; (8001950 <_sbrk+0x50>)
 8001918:	681b      	ldr	r3, [r3, #0]
 800191a:	60fb      	str	r3, [r7, #12]
	if (heap_end + incr > stack_ptr)
 800191c:	4b0c      	ldr	r3, [pc, #48]	; (8001950 <_sbrk+0x50>)
 800191e:	681a      	ldr	r2, [r3, #0]
 8001920:	687b      	ldr	r3, [r7, #4]
 8001922:	4413      	add	r3, r2
 8001924:	466a      	mov	r2, sp
 8001926:	4293      	cmp	r3, r2
 8001928:	d907      	bls.n	800193a <_sbrk+0x3a>
	{
		errno = ENOMEM;
 800192a:	f006 fdaf 	bl	800848c <__errno>
 800192e:	4602      	mov	r2, r0
 8001930:	230c      	movs	r3, #12
 8001932:	6013      	str	r3, [r2, #0]
		return (caddr_t) -1;
 8001934:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001938:	e006      	b.n	8001948 <_sbrk+0x48>
	}

	heap_end += incr;
 800193a:	4b05      	ldr	r3, [pc, #20]	; (8001950 <_sbrk+0x50>)
 800193c:	681a      	ldr	r2, [r3, #0]
 800193e:	687b      	ldr	r3, [r7, #4]
 8001940:	4413      	add	r3, r2
 8001942:	4a03      	ldr	r2, [pc, #12]	; (8001950 <_sbrk+0x50>)
 8001944:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap_end;
 8001946:	68fb      	ldr	r3, [r7, #12]
}
 8001948:	4618      	mov	r0, r3
 800194a:	3710      	adds	r7, #16
 800194c:	46bd      	mov	sp, r7
 800194e:	bd80      	pop	{r7, pc}
 8001950:	200004fc 	.word	0x200004fc
 8001954:	20000980 	.word	0x20000980

08001958 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 8001958:	b480      	push	{r7}
 800195a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 800195c:	4b08      	ldr	r3, [pc, #32]	; (8001980 <SystemInit+0x28>)
 800195e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001962:	4a07      	ldr	r2, [pc, #28]	; (8001980 <SystemInit+0x28>)
 8001964:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001968:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 800196c:	4b04      	ldr	r3, [pc, #16]	; (8001980 <SystemInit+0x28>)
 800196e:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8001972:	609a      	str	r2, [r3, #8]
#endif
}
 8001974:	bf00      	nop
 8001976:	46bd      	mov	sp, r7
 8001978:	f85d 7b04 	ldr.w	r7, [sp], #4
 800197c:	4770      	bx	lr
 800197e:	bf00      	nop
 8001980:	e000ed00 	.word	0xe000ed00

08001984 <MX_TIM1_Init>:
TIM_HandleTypeDef htim16;
TIM_HandleTypeDef htim17;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 8001984:	b580      	push	{r7, lr}
 8001986:	b09a      	sub	sp, #104	; 0x68
 8001988:	af00      	add	r7, sp, #0
  TIM_Encoder_InitTypeDef sConfig = {0};
 800198a:	f107 0344 	add.w	r3, r7, #68	; 0x44
 800198e:	2224      	movs	r2, #36	; 0x24
 8001990:	2100      	movs	r1, #0
 8001992:	4618      	mov	r0, r3
 8001994:	f006 fda4 	bl	80084e0 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001998:	f107 0338 	add.w	r3, r7, #56	; 0x38
 800199c:	2200      	movs	r2, #0
 800199e:	601a      	str	r2, [r3, #0]
 80019a0:	605a      	str	r2, [r3, #4]
 80019a2:	609a      	str	r2, [r3, #8]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 80019a4:	1d3b      	adds	r3, r7, #4
 80019a6:	2234      	movs	r2, #52	; 0x34
 80019a8:	2100      	movs	r1, #0
 80019aa:	4618      	mov	r0, r3
 80019ac:	f006 fd98 	bl	80084e0 <memset>

  htim1.Instance = TIM1;
 80019b0:	4b2a      	ldr	r3, [pc, #168]	; (8001a5c <MX_TIM1_Init+0xd8>)
 80019b2:	4a2b      	ldr	r2, [pc, #172]	; (8001a60 <MX_TIM1_Init+0xdc>)
 80019b4:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 80019b6:	4b29      	ldr	r3, [pc, #164]	; (8001a5c <MX_TIM1_Init+0xd8>)
 80019b8:	2200      	movs	r2, #0
 80019ba:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_CENTERALIGNED2;
 80019bc:	4b27      	ldr	r3, [pc, #156]	; (8001a5c <MX_TIM1_Init+0xd8>)
 80019be:	2240      	movs	r2, #64	; 0x40
 80019c0:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 1024;
 80019c2:	4b26      	ldr	r3, [pc, #152]	; (8001a5c <MX_TIM1_Init+0xd8>)
 80019c4:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80019c8:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80019ca:	4b24      	ldr	r3, [pc, #144]	; (8001a5c <MX_TIM1_Init+0xd8>)
 80019cc:	2200      	movs	r2, #0
 80019ce:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 80019d0:	4b22      	ldr	r3, [pc, #136]	; (8001a5c <MX_TIM1_Init+0xd8>)
 80019d2:	2200      	movs	r2, #0
 80019d4:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80019d6:	4b21      	ldr	r3, [pc, #132]	; (8001a5c <MX_TIM1_Init+0xd8>)
 80019d8:	2200      	movs	r2, #0
 80019da:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 80019dc:	2303      	movs	r3, #3
 80019de:	647b      	str	r3, [r7, #68]	; 0x44
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 80019e0:	2300      	movs	r3, #0
 80019e2:	64bb      	str	r3, [r7, #72]	; 0x48
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 80019e4:	2301      	movs	r3, #1
 80019e6:	64fb      	str	r3, [r7, #76]	; 0x4c
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 80019e8:	2300      	movs	r3, #0
 80019ea:	653b      	str	r3, [r7, #80]	; 0x50
  sConfig.IC1Filter = 0;
 80019ec:	2300      	movs	r3, #0
 80019ee:	657b      	str	r3, [r7, #84]	; 0x54
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 80019f0:	2300      	movs	r3, #0
 80019f2:	65bb      	str	r3, [r7, #88]	; 0x58
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 80019f4:	2301      	movs	r3, #1
 80019f6:	65fb      	str	r3, [r7, #92]	; 0x5c
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 80019f8:	2300      	movs	r3, #0
 80019fa:	663b      	str	r3, [r7, #96]	; 0x60
  sConfig.IC2Filter = 0;
 80019fc:	2300      	movs	r3, #0
 80019fe:	667b      	str	r3, [r7, #100]	; 0x64
  if (HAL_TIM_Encoder_Init(&htim1, &sConfig) != HAL_OK)
 8001a00:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8001a04:	4619      	mov	r1, r3
 8001a06:	4815      	ldr	r0, [pc, #84]	; (8001a5c <MX_TIM1_Init+0xd8>)
 8001a08:	f004 fb52 	bl	80060b0 <HAL_TIM_Encoder_Init>
 8001a0c:	4603      	mov	r3, r0
 8001a0e:	2b00      	cmp	r3, #0
 8001a10:	d001      	beq.n	8001a16 <MX_TIM1_Init+0x92>
  {
    Error_Handler();
 8001a12:	f7ff fc85 	bl	8001320 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001a16:	2300      	movs	r3, #0
 8001a18:	63bb      	str	r3, [r7, #56]	; 0x38
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8001a1a:	2300      	movs	r3, #0
 8001a1c:	63fb      	str	r3, [r7, #60]	; 0x3c
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001a1e:	2300      	movs	r3, #0
 8001a20:	643b      	str	r3, [r7, #64]	; 0x40
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8001a22:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8001a26:	4619      	mov	r1, r3
 8001a28:	480c      	ldr	r0, [pc, #48]	; (8001a5c <MX_TIM1_Init+0xd8>)
 8001a2a:	f005 f8cb 	bl	8006bc4 <HAL_TIMEx_MasterConfigSynchronization>
 8001a2e:	4603      	mov	r3, r0
 8001a30:	2b00      	cmp	r3, #0
 8001a32:	d001      	beq.n	8001a38 <MX_TIM1_Init+0xb4>
  {
    Error_Handler();
 8001a34:	f7ff fc74 	bl	8001320 <Error_Handler>
  }
  sBreakDeadTimeConfig.BreakAFMode = TIM_BREAK_AFMODE_INPUT;
 8001a38:	2300      	movs	r3, #0
 8001a3a:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2AFMode = TIM_BREAK_AFMODE_INPUT;
 8001a3c:	2300      	movs	r3, #0
 8001a3e:	633b      	str	r3, [r7, #48]	; 0x30
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8001a40:	1d3b      	adds	r3, r7, #4
 8001a42:	4619      	mov	r1, r3
 8001a44:	4805      	ldr	r0, [pc, #20]	; (8001a5c <MX_TIM1_Init+0xd8>)
 8001a46:	f005 f953 	bl	8006cf0 <HAL_TIMEx_ConfigBreakDeadTime>
 8001a4a:	4603      	mov	r3, r0
 8001a4c:	2b00      	cmp	r3, #0
 8001a4e:	d001      	beq.n	8001a54 <MX_TIM1_Init+0xd0>
  {
    Error_Handler();
 8001a50:	f7ff fc66 	bl	8001320 <Error_Handler>
  }

}
 8001a54:	bf00      	nop
 8001a56:	3768      	adds	r7, #104	; 0x68
 8001a58:	46bd      	mov	sp, r7
 8001a5a:	bd80      	pop	{r7, pc}
 8001a5c:	20000894 	.word	0x20000894
 8001a60:	40012c00 	.word	0x40012c00

08001a64 <MX_TIM2_Init>:
/* TIM2 init function */
void MX_TIM2_Init(void)
{
 8001a64:	b580      	push	{r7, lr}
 8001a66:	b08c      	sub	sp, #48	; 0x30
 8001a68:	af00      	add	r7, sp, #0
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001a6a:	f107 0320 	add.w	r3, r7, #32
 8001a6e:	2200      	movs	r2, #0
 8001a70:	601a      	str	r2, [r3, #0]
 8001a72:	605a      	str	r2, [r3, #4]
 8001a74:	609a      	str	r2, [r3, #8]
 8001a76:	60da      	str	r2, [r3, #12]
  TIM_SlaveConfigTypeDef sSlaveConfig = {0};
 8001a78:	f107 030c 	add.w	r3, r7, #12
 8001a7c:	2200      	movs	r2, #0
 8001a7e:	601a      	str	r2, [r3, #0]
 8001a80:	605a      	str	r2, [r3, #4]
 8001a82:	609a      	str	r2, [r3, #8]
 8001a84:	60da      	str	r2, [r3, #12]
 8001a86:	611a      	str	r2, [r3, #16]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001a88:	463b      	mov	r3, r7
 8001a8a:	2200      	movs	r2, #0
 8001a8c:	601a      	str	r2, [r3, #0]
 8001a8e:	605a      	str	r2, [r3, #4]
 8001a90:	609a      	str	r2, [r3, #8]

  htim2.Instance = TIM2;
 8001a92:	4b28      	ldr	r3, [pc, #160]	; (8001b34 <MX_TIM2_Init+0xd0>)
 8001a94:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001a98:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 2047;
 8001a9a:	4b26      	ldr	r3, [pc, #152]	; (8001b34 <MX_TIM2_Init+0xd0>)
 8001a9c:	f240 72ff 	movw	r2, #2047	; 0x7ff
 8001aa0:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001aa2:	4b24      	ldr	r3, [pc, #144]	; (8001b34 <MX_TIM2_Init+0xd0>)
 8001aa4:	2200      	movs	r2, #0
 8001aa6:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 1024;
 8001aa8:	4b22      	ldr	r3, [pc, #136]	; (8001b34 <MX_TIM2_Init+0xd0>)
 8001aaa:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001aae:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001ab0:	4b20      	ldr	r3, [pc, #128]	; (8001b34 <MX_TIM2_Init+0xd0>)
 8001ab2:	2200      	movs	r2, #0
 8001ab4:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001ab6:	4b1f      	ldr	r3, [pc, #124]	; (8001b34 <MX_TIM2_Init+0xd0>)
 8001ab8:	2200      	movs	r2, #0
 8001aba:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8001abc:	481d      	ldr	r0, [pc, #116]	; (8001b34 <MX_TIM2_Init+0xd0>)
 8001abe:	f004 fa3c 	bl	8005f3a <HAL_TIM_Base_Init>
 8001ac2:	4603      	mov	r3, r0
 8001ac4:	2b00      	cmp	r3, #0
 8001ac6:	d001      	beq.n	8001acc <MX_TIM2_Init+0x68>
  {
    Error_Handler();
 8001ac8:	f7ff fc2a 	bl	8001320 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001acc:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001ad0:	623b      	str	r3, [r7, #32]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8001ad2:	f107 0320 	add.w	r3, r7, #32
 8001ad6:	4619      	mov	r1, r3
 8001ad8:	4816      	ldr	r0, [pc, #88]	; (8001b34 <MX_TIM2_Init+0xd0>)
 8001ada:	f004 fd0f 	bl	80064fc <HAL_TIM_ConfigClockSource>
 8001ade:	4603      	mov	r3, r0
 8001ae0:	2b00      	cmp	r3, #0
 8001ae2:	d001      	beq.n	8001ae8 <MX_TIM2_Init+0x84>
  {
    Error_Handler();
 8001ae4:	f7ff fc1c 	bl	8001320 <Error_Handler>
  }
  sSlaveConfig.SlaveMode = TIM_SLAVEMODE_GATED;
 8001ae8:	2305      	movs	r3, #5
 8001aea:	60fb      	str	r3, [r7, #12]
  sSlaveConfig.InputTrigger = TIM_TS_TI1FP1;
 8001aec:	2350      	movs	r3, #80	; 0x50
 8001aee:	613b      	str	r3, [r7, #16]
  sSlaveConfig.TriggerPolarity = TIM_TRIGGERPOLARITY_RISING;
 8001af0:	2300      	movs	r3, #0
 8001af2:	617b      	str	r3, [r7, #20]
  sSlaveConfig.TriggerFilter = 0;
 8001af4:	2300      	movs	r3, #0
 8001af6:	61fb      	str	r3, [r7, #28]
  if (HAL_TIM_SlaveConfigSynchro(&htim2, &sSlaveConfig) != HAL_OK)
 8001af8:	f107 030c 	add.w	r3, r7, #12
 8001afc:	4619      	mov	r1, r3
 8001afe:	480d      	ldr	r0, [pc, #52]	; (8001b34 <MX_TIM2_Init+0xd0>)
 8001b00:	f004 fdec 	bl	80066dc <HAL_TIM_SlaveConfigSynchro>
 8001b04:	4603      	mov	r3, r0
 8001b06:	2b00      	cmp	r3, #0
 8001b08:	d001      	beq.n	8001b0e <MX_TIM2_Init+0xaa>
  {
    Error_Handler();
 8001b0a:	f7ff fc09 	bl	8001320 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001b0e:	2300      	movs	r3, #0
 8001b10:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001b12:	2300      	movs	r3, #0
 8001b14:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001b16:	463b      	mov	r3, r7
 8001b18:	4619      	mov	r1, r3
 8001b1a:	4806      	ldr	r0, [pc, #24]	; (8001b34 <MX_TIM2_Init+0xd0>)
 8001b1c:	f005 f852 	bl	8006bc4 <HAL_TIMEx_MasterConfigSynchronization>
 8001b20:	4603      	mov	r3, r0
 8001b22:	2b00      	cmp	r3, #0
 8001b24:	d001      	beq.n	8001b2a <MX_TIM2_Init+0xc6>
  {
    Error_Handler();
 8001b26:	f7ff fbfb 	bl	8001320 <Error_Handler>
  }

}
 8001b2a:	bf00      	nop
 8001b2c:	3730      	adds	r7, #48	; 0x30
 8001b2e:	46bd      	mov	sp, r7
 8001b30:	bd80      	pop	{r7, pc}
 8001b32:	bf00      	nop
 8001b34:	200008e0 	.word	0x200008e0

08001b38 <MX_TIM8_Init>:
/* TIM8 init function */
void MX_TIM8_Init(void)
{
 8001b38:	b580      	push	{r7, lr}
 8001b3a:	b094      	sub	sp, #80	; 0x50
 8001b3c:	af00      	add	r7, sp, #0
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001b3e:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8001b42:	2200      	movs	r2, #0
 8001b44:	601a      	str	r2, [r3, #0]
 8001b46:	605a      	str	r2, [r3, #4]
 8001b48:	609a      	str	r2, [r3, #8]
 8001b4a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001b4c:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8001b50:	2200      	movs	r2, #0
 8001b52:	601a      	str	r2, [r3, #0]
 8001b54:	605a      	str	r2, [r3, #4]
 8001b56:	609a      	str	r2, [r3, #8]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8001b58:	463b      	mov	r3, r7
 8001b5a:	2234      	movs	r2, #52	; 0x34
 8001b5c:	2100      	movs	r1, #0
 8001b5e:	4618      	mov	r0, r3
 8001b60:	f006 fcbe 	bl	80084e0 <memset>

  htim8.Instance = TIM8;
 8001b64:	4b26      	ldr	r3, [pc, #152]	; (8001c00 <MX_TIM8_Init+0xc8>)
 8001b66:	4a27      	ldr	r2, [pc, #156]	; (8001c04 <MX_TIM8_Init+0xcc>)
 8001b68:	601a      	str	r2, [r3, #0]
  htim8.Init.Prescaler = 0;
 8001b6a:	4b25      	ldr	r3, [pc, #148]	; (8001c00 <MX_TIM8_Init+0xc8>)
 8001b6c:	2200      	movs	r2, #0
 8001b6e:	605a      	str	r2, [r3, #4]
  htim8.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001b70:	4b23      	ldr	r3, [pc, #140]	; (8001c00 <MX_TIM8_Init+0xc8>)
 8001b72:	2200      	movs	r2, #0
 8001b74:	609a      	str	r2, [r3, #8]
  htim8.Init.Period = 1;
 8001b76:	4b22      	ldr	r3, [pc, #136]	; (8001c00 <MX_TIM8_Init+0xc8>)
 8001b78:	2201      	movs	r2, #1
 8001b7a:	60da      	str	r2, [r3, #12]
  htim8.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001b7c:	4b20      	ldr	r3, [pc, #128]	; (8001c00 <MX_TIM8_Init+0xc8>)
 8001b7e:	2200      	movs	r2, #0
 8001b80:	611a      	str	r2, [r3, #16]
  htim8.Init.RepetitionCounter = 0;
 8001b82:	4b1f      	ldr	r3, [pc, #124]	; (8001c00 <MX_TIM8_Init+0xc8>)
 8001b84:	2200      	movs	r2, #0
 8001b86:	615a      	str	r2, [r3, #20]
  htim8.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001b88:	4b1d      	ldr	r3, [pc, #116]	; (8001c00 <MX_TIM8_Init+0xc8>)
 8001b8a:	2200      	movs	r2, #0
 8001b8c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim8) != HAL_OK)
 8001b8e:	481c      	ldr	r0, [pc, #112]	; (8001c00 <MX_TIM8_Init+0xc8>)
 8001b90:	f004 f9d3 	bl	8005f3a <HAL_TIM_Base_Init>
 8001b94:	4603      	mov	r3, r0
 8001b96:	2b00      	cmp	r3, #0
 8001b98:	d001      	beq.n	8001b9e <MX_TIM8_Init+0x66>
  {
    Error_Handler();
 8001b9a:	f7ff fbc1 	bl	8001320 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001b9e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001ba2:	643b      	str	r3, [r7, #64]	; 0x40
  if (HAL_TIM_ConfigClockSource(&htim8, &sClockSourceConfig) != HAL_OK)
 8001ba4:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8001ba8:	4619      	mov	r1, r3
 8001baa:	4815      	ldr	r0, [pc, #84]	; (8001c00 <MX_TIM8_Init+0xc8>)
 8001bac:	f004 fca6 	bl	80064fc <HAL_TIM_ConfigClockSource>
 8001bb0:	4603      	mov	r3, r0
 8001bb2:	2b00      	cmp	r3, #0
 8001bb4:	d001      	beq.n	8001bba <MX_TIM8_Init+0x82>
  {
    Error_Handler();
 8001bb6:	f7ff fbb3 	bl	8001320 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 8001bba:	2320      	movs	r3, #32
 8001bbc:	637b      	str	r3, [r7, #52]	; 0x34
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8001bbe:	2300      	movs	r3, #0
 8001bc0:	63bb      	str	r3, [r7, #56]	; 0x38
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001bc2:	2300      	movs	r3, #0
 8001bc4:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_TIMEx_MasterConfigSynchronization(&htim8, &sMasterConfig) != HAL_OK)
 8001bc6:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8001bca:	4619      	mov	r1, r3
 8001bcc:	480c      	ldr	r0, [pc, #48]	; (8001c00 <MX_TIM8_Init+0xc8>)
 8001bce:	f004 fff9 	bl	8006bc4 <HAL_TIMEx_MasterConfigSynchronization>
 8001bd2:	4603      	mov	r3, r0
 8001bd4:	2b00      	cmp	r3, #0
 8001bd6:	d001      	beq.n	8001bdc <MX_TIM8_Init+0xa4>
  {
    Error_Handler();
 8001bd8:	f7ff fba2 	bl	8001320 <Error_Handler>
  }
  sBreakDeadTimeConfig.BreakAFMode = TIM_BREAK_AFMODE_INPUT;
 8001bdc:	2300      	movs	r3, #0
 8001bde:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.Break2AFMode = TIM_BREAK_AFMODE_INPUT;
 8001be0:	2300      	movs	r3, #0
 8001be2:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim8, &sBreakDeadTimeConfig) != HAL_OK)
 8001be4:	463b      	mov	r3, r7
 8001be6:	4619      	mov	r1, r3
 8001be8:	4805      	ldr	r0, [pc, #20]	; (8001c00 <MX_TIM8_Init+0xc8>)
 8001bea:	f005 f881 	bl	8006cf0 <HAL_TIMEx_ConfigBreakDeadTime>
 8001bee:	4603      	mov	r3, r0
 8001bf0:	2b00      	cmp	r3, #0
 8001bf2:	d001      	beq.n	8001bf8 <MX_TIM8_Init+0xc0>
  {
    Error_Handler();
 8001bf4:	f7ff fb94 	bl	8001320 <Error_Handler>
  }

}
 8001bf8:	bf00      	nop
 8001bfa:	3750      	adds	r7, #80	; 0x50
 8001bfc:	46bd      	mov	sp, r7
 8001bfe:	bd80      	pop	{r7, pc}
 8001c00:	200007b0 	.word	0x200007b0
 8001c04:	40013400 	.word	0x40013400

08001c08 <MX_TIM15_Init>:
/* TIM15 init function */
void MX_TIM15_Init(void)
{
 8001c08:	b580      	push	{r7, lr}
 8001c0a:	b088      	sub	sp, #32
 8001c0c:	af00      	add	r7, sp, #0
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001c0e:	f107 0310 	add.w	r3, r7, #16
 8001c12:	2200      	movs	r2, #0
 8001c14:	601a      	str	r2, [r3, #0]
 8001c16:	605a      	str	r2, [r3, #4]
 8001c18:	609a      	str	r2, [r3, #8]
 8001c1a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001c1c:	1d3b      	adds	r3, r7, #4
 8001c1e:	2200      	movs	r2, #0
 8001c20:	601a      	str	r2, [r3, #0]
 8001c22:	605a      	str	r2, [r3, #4]
 8001c24:	609a      	str	r2, [r3, #8]

  htim15.Instance = TIM15;
 8001c26:	4b1f      	ldr	r3, [pc, #124]	; (8001ca4 <MX_TIM15_Init+0x9c>)
 8001c28:	4a1f      	ldr	r2, [pc, #124]	; (8001ca8 <MX_TIM15_Init+0xa0>)
 8001c2a:	601a      	str	r2, [r3, #0]
  htim15.Init.Prescaler = 1024;
 8001c2c:	4b1d      	ldr	r3, [pc, #116]	; (8001ca4 <MX_TIM15_Init+0x9c>)
 8001c2e:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001c32:	605a      	str	r2, [r3, #4]
  htim15.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001c34:	4b1b      	ldr	r3, [pc, #108]	; (8001ca4 <MX_TIM15_Init+0x9c>)
 8001c36:	2200      	movs	r2, #0
 8001c38:	609a      	str	r2, [r3, #8]
  htim15.Init.Period = 1024;
 8001c3a:	4b1a      	ldr	r3, [pc, #104]	; (8001ca4 <MX_TIM15_Init+0x9c>)
 8001c3c:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001c40:	60da      	str	r2, [r3, #12]
  htim15.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001c42:	4b18      	ldr	r3, [pc, #96]	; (8001ca4 <MX_TIM15_Init+0x9c>)
 8001c44:	2200      	movs	r2, #0
 8001c46:	611a      	str	r2, [r3, #16]
  htim15.Init.RepetitionCounter = 0;
 8001c48:	4b16      	ldr	r3, [pc, #88]	; (8001ca4 <MX_TIM15_Init+0x9c>)
 8001c4a:	2200      	movs	r2, #0
 8001c4c:	615a      	str	r2, [r3, #20]
  htim15.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001c4e:	4b15      	ldr	r3, [pc, #84]	; (8001ca4 <MX_TIM15_Init+0x9c>)
 8001c50:	2200      	movs	r2, #0
 8001c52:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim15) != HAL_OK)
 8001c54:	4813      	ldr	r0, [pc, #76]	; (8001ca4 <MX_TIM15_Init+0x9c>)
 8001c56:	f004 f970 	bl	8005f3a <HAL_TIM_Base_Init>
 8001c5a:	4603      	mov	r3, r0
 8001c5c:	2b00      	cmp	r3, #0
 8001c5e:	d001      	beq.n	8001c64 <MX_TIM15_Init+0x5c>
  {
    Error_Handler();
 8001c60:	f7ff fb5e 	bl	8001320 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001c64:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001c68:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim15, &sClockSourceConfig) != HAL_OK)
 8001c6a:	f107 0310 	add.w	r3, r7, #16
 8001c6e:	4619      	mov	r1, r3
 8001c70:	480c      	ldr	r0, [pc, #48]	; (8001ca4 <MX_TIM15_Init+0x9c>)
 8001c72:	f004 fc43 	bl	80064fc <HAL_TIM_ConfigClockSource>
 8001c76:	4603      	mov	r3, r0
 8001c78:	2b00      	cmp	r3, #0
 8001c7a:	d001      	beq.n	8001c80 <MX_TIM15_Init+0x78>
  {
    Error_Handler();
 8001c7c:	f7ff fb50 	bl	8001320 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001c80:	2300      	movs	r3, #0
 8001c82:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001c84:	2300      	movs	r3, #0
 8001c86:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim15, &sMasterConfig) != HAL_OK)
 8001c88:	1d3b      	adds	r3, r7, #4
 8001c8a:	4619      	mov	r1, r3
 8001c8c:	4805      	ldr	r0, [pc, #20]	; (8001ca4 <MX_TIM15_Init+0x9c>)
 8001c8e:	f004 ff99 	bl	8006bc4 <HAL_TIMEx_MasterConfigSynchronization>
 8001c92:	4603      	mov	r3, r0
 8001c94:	2b00      	cmp	r3, #0
 8001c96:	d001      	beq.n	8001c9c <MX_TIM15_Init+0x94>
  {
    Error_Handler();
 8001c98:	f7ff fb42 	bl	8001320 <Error_Handler>
  }

}
 8001c9c:	bf00      	nop
 8001c9e:	3720      	adds	r7, #32
 8001ca0:	46bd      	mov	sp, r7
 8001ca2:	bd80      	pop	{r7, pc}
 8001ca4:	200007fc 	.word	0x200007fc
 8001ca8:	40014000 	.word	0x40014000

08001cac <MX_TIM16_Init>:
/* TIM16 init function */
void MX_TIM16_Init(void)
{
 8001cac:	b580      	push	{r7, lr}
 8001cae:	af00      	add	r7, sp, #0

  htim16.Instance = TIM16;
 8001cb0:	4b0f      	ldr	r3, [pc, #60]	; (8001cf0 <MX_TIM16_Init+0x44>)
 8001cb2:	4a10      	ldr	r2, [pc, #64]	; (8001cf4 <MX_TIM16_Init+0x48>)
 8001cb4:	601a      	str	r2, [r3, #0]
  htim16.Init.Prescaler = 0;
 8001cb6:	4b0e      	ldr	r3, [pc, #56]	; (8001cf0 <MX_TIM16_Init+0x44>)
 8001cb8:	2200      	movs	r2, #0
 8001cba:	605a      	str	r2, [r3, #4]
  htim16.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001cbc:	4b0c      	ldr	r3, [pc, #48]	; (8001cf0 <MX_TIM16_Init+0x44>)
 8001cbe:	2200      	movs	r2, #0
 8001cc0:	609a      	str	r2, [r3, #8]
  htim16.Init.Period = 8191;
 8001cc2:	4b0b      	ldr	r3, [pc, #44]	; (8001cf0 <MX_TIM16_Init+0x44>)
 8001cc4:	f641 72ff 	movw	r2, #8191	; 0x1fff
 8001cc8:	60da      	str	r2, [r3, #12]
  htim16.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001cca:	4b09      	ldr	r3, [pc, #36]	; (8001cf0 <MX_TIM16_Init+0x44>)
 8001ccc:	2200      	movs	r2, #0
 8001cce:	611a      	str	r2, [r3, #16]
  htim16.Init.RepetitionCounter = 0;
 8001cd0:	4b07      	ldr	r3, [pc, #28]	; (8001cf0 <MX_TIM16_Init+0x44>)
 8001cd2:	2200      	movs	r2, #0
 8001cd4:	615a      	str	r2, [r3, #20]
  htim16.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001cd6:	4b06      	ldr	r3, [pc, #24]	; (8001cf0 <MX_TIM16_Init+0x44>)
 8001cd8:	2200      	movs	r2, #0
 8001cda:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim16) != HAL_OK)
 8001cdc:	4804      	ldr	r0, [pc, #16]	; (8001cf0 <MX_TIM16_Init+0x44>)
 8001cde:	f004 f92c 	bl	8005f3a <HAL_TIM_Base_Init>
 8001ce2:	4603      	mov	r3, r0
 8001ce4:	2b00      	cmp	r3, #0
 8001ce6:	d001      	beq.n	8001cec <MX_TIM16_Init+0x40>
  {
    Error_Handler();
 8001ce8:	f7ff fb1a 	bl	8001320 <Error_Handler>
  }

}
 8001cec:	bf00      	nop
 8001cee:	bd80      	pop	{r7, pc}
 8001cf0:	2000092c 	.word	0x2000092c
 8001cf4:	40014400 	.word	0x40014400

08001cf8 <MX_TIM17_Init>:
/* TIM17 init function */
void MX_TIM17_Init(void)
{
 8001cf8:	b580      	push	{r7, lr}
 8001cfa:	af00      	add	r7, sp, #0

  htim17.Instance = TIM17;
 8001cfc:	4b0f      	ldr	r3, [pc, #60]	; (8001d3c <MX_TIM17_Init+0x44>)
 8001cfe:	4a10      	ldr	r2, [pc, #64]	; (8001d40 <MX_TIM17_Init+0x48>)
 8001d00:	601a      	str	r2, [r3, #0]
  htim17.Init.Prescaler = 1023;
 8001d02:	4b0e      	ldr	r3, [pc, #56]	; (8001d3c <MX_TIM17_Init+0x44>)
 8001d04:	f240 32ff 	movw	r2, #1023	; 0x3ff
 8001d08:	605a      	str	r2, [r3, #4]
  htim17.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001d0a:	4b0c      	ldr	r3, [pc, #48]	; (8001d3c <MX_TIM17_Init+0x44>)
 8001d0c:	2200      	movs	r2, #0
 8001d0e:	609a      	str	r2, [r3, #8]
  htim17.Init.Period = 64;
 8001d10:	4b0a      	ldr	r3, [pc, #40]	; (8001d3c <MX_TIM17_Init+0x44>)
 8001d12:	2240      	movs	r2, #64	; 0x40
 8001d14:	60da      	str	r2, [r3, #12]
  htim17.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001d16:	4b09      	ldr	r3, [pc, #36]	; (8001d3c <MX_TIM17_Init+0x44>)
 8001d18:	2200      	movs	r2, #0
 8001d1a:	611a      	str	r2, [r3, #16]
  htim17.Init.RepetitionCounter = 0;
 8001d1c:	4b07      	ldr	r3, [pc, #28]	; (8001d3c <MX_TIM17_Init+0x44>)
 8001d1e:	2200      	movs	r2, #0
 8001d20:	615a      	str	r2, [r3, #20]
  htim17.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001d22:	4b06      	ldr	r3, [pc, #24]	; (8001d3c <MX_TIM17_Init+0x44>)
 8001d24:	2200      	movs	r2, #0
 8001d26:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim17) != HAL_OK)
 8001d28:	4804      	ldr	r0, [pc, #16]	; (8001d3c <MX_TIM17_Init+0x44>)
 8001d2a:	f004 f906 	bl	8005f3a <HAL_TIM_Base_Init>
 8001d2e:	4603      	mov	r3, r0
 8001d30:	2b00      	cmp	r3, #0
 8001d32:	d001      	beq.n	8001d38 <MX_TIM17_Init+0x40>
  {
    Error_Handler();
 8001d34:	f7ff faf4 	bl	8001320 <Error_Handler>
  }

}
 8001d38:	bf00      	nop
 8001d3a:	bd80      	pop	{r7, pc}
 8001d3c:	20000848 	.word	0x20000848
 8001d40:	40014800 	.word	0x40014800

08001d44 <HAL_TIM_Encoder_MspInit>:

void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* tim_encoderHandle)
{
 8001d44:	b580      	push	{r7, lr}
 8001d46:	b08a      	sub	sp, #40	; 0x28
 8001d48:	af00      	add	r7, sp, #0
 8001d4a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001d4c:	f107 0314 	add.w	r3, r7, #20
 8001d50:	2200      	movs	r2, #0
 8001d52:	601a      	str	r2, [r3, #0]
 8001d54:	605a      	str	r2, [r3, #4]
 8001d56:	609a      	str	r2, [r3, #8]
 8001d58:	60da      	str	r2, [r3, #12]
 8001d5a:	611a      	str	r2, [r3, #16]
  if(tim_encoderHandle->Instance==TIM1)
 8001d5c:	687b      	ldr	r3, [r7, #4]
 8001d5e:	681b      	ldr	r3, [r3, #0]
 8001d60:	4a23      	ldr	r2, [pc, #140]	; (8001df0 <HAL_TIM_Encoder_MspInit+0xac>)
 8001d62:	4293      	cmp	r3, r2
 8001d64:	d13f      	bne.n	8001de6 <HAL_TIM_Encoder_MspInit+0xa2>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8001d66:	4b23      	ldr	r3, [pc, #140]	; (8001df4 <HAL_TIM_Encoder_MspInit+0xb0>)
 8001d68:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001d6a:	4a22      	ldr	r2, [pc, #136]	; (8001df4 <HAL_TIM_Encoder_MspInit+0xb0>)
 8001d6c:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8001d70:	6613      	str	r3, [r2, #96]	; 0x60
 8001d72:	4b20      	ldr	r3, [pc, #128]	; (8001df4 <HAL_TIM_Encoder_MspInit+0xb0>)
 8001d74:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001d76:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001d7a:	613b      	str	r3, [r7, #16]
 8001d7c:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001d7e:	4b1d      	ldr	r3, [pc, #116]	; (8001df4 <HAL_TIM_Encoder_MspInit+0xb0>)
 8001d80:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001d82:	4a1c      	ldr	r2, [pc, #112]	; (8001df4 <HAL_TIM_Encoder_MspInit+0xb0>)
 8001d84:	f043 0304 	orr.w	r3, r3, #4
 8001d88:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001d8a:	4b1a      	ldr	r3, [pc, #104]	; (8001df4 <HAL_TIM_Encoder_MspInit+0xb0>)
 8001d8c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001d8e:	f003 0304 	and.w	r3, r3, #4
 8001d92:	60fb      	str	r3, [r7, #12]
 8001d94:	68fb      	ldr	r3, [r7, #12]
    /**TIM1 GPIO Configuration    
    PC0     ------> TIM1_CH1
    PC1     ------> TIM1_CH2 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8001d96:	2303      	movs	r3, #3
 8001d98:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001d9a:	2302      	movs	r3, #2
 8001d9c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d9e:	2300      	movs	r3, #0
 8001da0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001da2:	2300      	movs	r3, #0
 8001da4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM1;
 8001da6:	2302      	movs	r3, #2
 8001da8:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001daa:	f107 0314 	add.w	r3, r7, #20
 8001dae:	4619      	mov	r1, r3
 8001db0:	4811      	ldr	r0, [pc, #68]	; (8001df8 <HAL_TIM_Encoder_MspInit+0xb4>)
 8001db2:	f002 fc03 	bl	80045bc <HAL_GPIO_Init>

    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_BRK_TIM15_IRQn, 1, 0);
 8001db6:	2200      	movs	r2, #0
 8001db8:	2101      	movs	r1, #1
 8001dba:	2018      	movs	r0, #24
 8001dbc:	f001 fda5 	bl	800390a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_BRK_TIM15_IRQn);
 8001dc0:	2018      	movs	r0, #24
 8001dc2:	f001 fdbc 	bl	800393e <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM1_UP_TIM16_IRQn, 1, 0);
 8001dc6:	2200      	movs	r2, #0
 8001dc8:	2101      	movs	r1, #1
 8001dca:	2019      	movs	r0, #25
 8001dcc:	f001 fd9d 	bl	800390a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM16_IRQn);
 8001dd0:	2019      	movs	r0, #25
 8001dd2:	f001 fdb4 	bl	800393e <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM1_TRG_COM_TIM17_IRQn, 0, 0);
 8001dd6:	2200      	movs	r2, #0
 8001dd8:	2100      	movs	r1, #0
 8001dda:	201a      	movs	r0, #26
 8001ddc:	f001 fd95 	bl	800390a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_TRG_COM_TIM17_IRQn);
 8001de0:	201a      	movs	r0, #26
 8001de2:	f001 fdac 	bl	800393e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }
}
 8001de6:	bf00      	nop
 8001de8:	3728      	adds	r7, #40	; 0x28
 8001dea:	46bd      	mov	sp, r7
 8001dec:	bd80      	pop	{r7, pc}
 8001dee:	bf00      	nop
 8001df0:	40012c00 	.word	0x40012c00
 8001df4:	40021000 	.word	0x40021000
 8001df8:	48000800 	.word	0x48000800

08001dfc <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8001dfc:	b580      	push	{r7, lr}
 8001dfe:	b08e      	sub	sp, #56	; 0x38
 8001e00:	af00      	add	r7, sp, #0
 8001e02:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001e04:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001e08:	2200      	movs	r2, #0
 8001e0a:	601a      	str	r2, [r3, #0]
 8001e0c:	605a      	str	r2, [r3, #4]
 8001e0e:	609a      	str	r2, [r3, #8]
 8001e10:	60da      	str	r2, [r3, #12]
 8001e12:	611a      	str	r2, [r3, #16]
  if(tim_baseHandle->Instance==TIM2)
 8001e14:	687b      	ldr	r3, [r7, #4]
 8001e16:	681b      	ldr	r3, [r3, #0]
 8001e18:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001e1c:	d131      	bne.n	8001e82 <HAL_TIM_Base_MspInit+0x86>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001e1e:	4b4a      	ldr	r3, [pc, #296]	; (8001f48 <HAL_TIM_Base_MspInit+0x14c>)
 8001e20:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001e22:	4a49      	ldr	r2, [pc, #292]	; (8001f48 <HAL_TIM_Base_MspInit+0x14c>)
 8001e24:	f043 0301 	orr.w	r3, r3, #1
 8001e28:	6593      	str	r3, [r2, #88]	; 0x58
 8001e2a:	4b47      	ldr	r3, [pc, #284]	; (8001f48 <HAL_TIM_Base_MspInit+0x14c>)
 8001e2c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001e2e:	f003 0301 	and.w	r3, r3, #1
 8001e32:	623b      	str	r3, [r7, #32]
 8001e34:	6a3b      	ldr	r3, [r7, #32]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001e36:	4b44      	ldr	r3, [pc, #272]	; (8001f48 <HAL_TIM_Base_MspInit+0x14c>)
 8001e38:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001e3a:	4a43      	ldr	r2, [pc, #268]	; (8001f48 <HAL_TIM_Base_MspInit+0x14c>)
 8001e3c:	f043 0301 	orr.w	r3, r3, #1
 8001e40:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001e42:	4b41      	ldr	r3, [pc, #260]	; (8001f48 <HAL_TIM_Base_MspInit+0x14c>)
 8001e44:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001e46:	f003 0301 	and.w	r3, r3, #1
 8001e4a:	61fb      	str	r3, [r7, #28]
 8001e4c:	69fb      	ldr	r3, [r7, #28]
    /**TIM2 GPIO Configuration    
    PA0     ------> TIM2_CH1 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8001e4e:	2301      	movs	r3, #1
 8001e50:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001e52:	2302      	movs	r3, #2
 8001e54:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e56:	2300      	movs	r3, #0
 8001e58:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001e5a:	2300      	movs	r3, #0
 8001e5c:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8001e5e:	2301      	movs	r3, #1
 8001e60:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001e62:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001e66:	4619      	mov	r1, r3
 8001e68:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001e6c:	f002 fba6 	bl	80045bc <HAL_GPIO_Init>

    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 1, 0);
 8001e70:	2200      	movs	r2, #0
 8001e72:	2101      	movs	r1, #1
 8001e74:	201c      	movs	r0, #28
 8001e76:	f001 fd48 	bl	800390a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8001e7a:	201c      	movs	r0, #28
 8001e7c:	f001 fd5f 	bl	800393e <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(TIM1_TRG_COM_TIM17_IRQn);
  /* USER CODE BEGIN TIM17_MspInit 1 */

  /* USER CODE END TIM17_MspInit 1 */
  }
}
 8001e80:	e05e      	b.n	8001f40 <HAL_TIM_Base_MspInit+0x144>
  else if(tim_baseHandle->Instance==TIM8)
 8001e82:	687b      	ldr	r3, [r7, #4]
 8001e84:	681b      	ldr	r3, [r3, #0]
 8001e86:	4a31      	ldr	r2, [pc, #196]	; (8001f4c <HAL_TIM_Base_MspInit+0x150>)
 8001e88:	4293      	cmp	r3, r2
 8001e8a:	d10c      	bne.n	8001ea6 <HAL_TIM_Base_MspInit+0xaa>
    __HAL_RCC_TIM8_CLK_ENABLE();
 8001e8c:	4b2e      	ldr	r3, [pc, #184]	; (8001f48 <HAL_TIM_Base_MspInit+0x14c>)
 8001e8e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001e90:	4a2d      	ldr	r2, [pc, #180]	; (8001f48 <HAL_TIM_Base_MspInit+0x14c>)
 8001e92:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8001e96:	6613      	str	r3, [r2, #96]	; 0x60
 8001e98:	4b2b      	ldr	r3, [pc, #172]	; (8001f48 <HAL_TIM_Base_MspInit+0x14c>)
 8001e9a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001e9c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001ea0:	61bb      	str	r3, [r7, #24]
 8001ea2:	69bb      	ldr	r3, [r7, #24]
}
 8001ea4:	e04c      	b.n	8001f40 <HAL_TIM_Base_MspInit+0x144>
  else if(tim_baseHandle->Instance==TIM15)
 8001ea6:	687b      	ldr	r3, [r7, #4]
 8001ea8:	681b      	ldr	r3, [r3, #0]
 8001eaa:	4a29      	ldr	r2, [pc, #164]	; (8001f50 <HAL_TIM_Base_MspInit+0x154>)
 8001eac:	4293      	cmp	r3, r2
 8001eae:	d114      	bne.n	8001eda <HAL_TIM_Base_MspInit+0xde>
    __HAL_RCC_TIM15_CLK_ENABLE();
 8001eb0:	4b25      	ldr	r3, [pc, #148]	; (8001f48 <HAL_TIM_Base_MspInit+0x14c>)
 8001eb2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001eb4:	4a24      	ldr	r2, [pc, #144]	; (8001f48 <HAL_TIM_Base_MspInit+0x14c>)
 8001eb6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001eba:	6613      	str	r3, [r2, #96]	; 0x60
 8001ebc:	4b22      	ldr	r3, [pc, #136]	; (8001f48 <HAL_TIM_Base_MspInit+0x14c>)
 8001ebe:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001ec0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001ec4:	617b      	str	r3, [r7, #20]
 8001ec6:	697b      	ldr	r3, [r7, #20]
    HAL_NVIC_SetPriority(TIM1_BRK_TIM15_IRQn, 1, 0);
 8001ec8:	2200      	movs	r2, #0
 8001eca:	2101      	movs	r1, #1
 8001ecc:	2018      	movs	r0, #24
 8001ece:	f001 fd1c 	bl	800390a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_BRK_TIM15_IRQn);
 8001ed2:	2018      	movs	r0, #24
 8001ed4:	f001 fd33 	bl	800393e <HAL_NVIC_EnableIRQ>
}
 8001ed8:	e032      	b.n	8001f40 <HAL_TIM_Base_MspInit+0x144>
  else if(tim_baseHandle->Instance==TIM16)
 8001eda:	687b      	ldr	r3, [r7, #4]
 8001edc:	681b      	ldr	r3, [r3, #0]
 8001ede:	4a1d      	ldr	r2, [pc, #116]	; (8001f54 <HAL_TIM_Base_MspInit+0x158>)
 8001ee0:	4293      	cmp	r3, r2
 8001ee2:	d114      	bne.n	8001f0e <HAL_TIM_Base_MspInit+0x112>
    __HAL_RCC_TIM16_CLK_ENABLE();
 8001ee4:	4b18      	ldr	r3, [pc, #96]	; (8001f48 <HAL_TIM_Base_MspInit+0x14c>)
 8001ee6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001ee8:	4a17      	ldr	r2, [pc, #92]	; (8001f48 <HAL_TIM_Base_MspInit+0x14c>)
 8001eea:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001eee:	6613      	str	r3, [r2, #96]	; 0x60
 8001ef0:	4b15      	ldr	r3, [pc, #84]	; (8001f48 <HAL_TIM_Base_MspInit+0x14c>)
 8001ef2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001ef4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001ef8:	613b      	str	r3, [r7, #16]
 8001efa:	693b      	ldr	r3, [r7, #16]
    HAL_NVIC_SetPriority(TIM1_UP_TIM16_IRQn, 1, 0);
 8001efc:	2200      	movs	r2, #0
 8001efe:	2101      	movs	r1, #1
 8001f00:	2019      	movs	r0, #25
 8001f02:	f001 fd02 	bl	800390a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM16_IRQn);
 8001f06:	2019      	movs	r0, #25
 8001f08:	f001 fd19 	bl	800393e <HAL_NVIC_EnableIRQ>
}
 8001f0c:	e018      	b.n	8001f40 <HAL_TIM_Base_MspInit+0x144>
  else if(tim_baseHandle->Instance==TIM17)
 8001f0e:	687b      	ldr	r3, [r7, #4]
 8001f10:	681b      	ldr	r3, [r3, #0]
 8001f12:	4a11      	ldr	r2, [pc, #68]	; (8001f58 <HAL_TIM_Base_MspInit+0x15c>)
 8001f14:	4293      	cmp	r3, r2
 8001f16:	d113      	bne.n	8001f40 <HAL_TIM_Base_MspInit+0x144>
    __HAL_RCC_TIM17_CLK_ENABLE();
 8001f18:	4b0b      	ldr	r3, [pc, #44]	; (8001f48 <HAL_TIM_Base_MspInit+0x14c>)
 8001f1a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001f1c:	4a0a      	ldr	r2, [pc, #40]	; (8001f48 <HAL_TIM_Base_MspInit+0x14c>)
 8001f1e:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001f22:	6613      	str	r3, [r2, #96]	; 0x60
 8001f24:	4b08      	ldr	r3, [pc, #32]	; (8001f48 <HAL_TIM_Base_MspInit+0x14c>)
 8001f26:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001f28:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001f2c:	60fb      	str	r3, [r7, #12]
 8001f2e:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_SetPriority(TIM1_TRG_COM_TIM17_IRQn, 0, 0);
 8001f30:	2200      	movs	r2, #0
 8001f32:	2100      	movs	r1, #0
 8001f34:	201a      	movs	r0, #26
 8001f36:	f001 fce8 	bl	800390a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_TRG_COM_TIM17_IRQn);
 8001f3a:	201a      	movs	r0, #26
 8001f3c:	f001 fcff 	bl	800393e <HAL_NVIC_EnableIRQ>
}
 8001f40:	bf00      	nop
 8001f42:	3738      	adds	r7, #56	; 0x38
 8001f44:	46bd      	mov	sp, r7
 8001f46:	bd80      	pop	{r7, pc}
 8001f48:	40021000 	.word	0x40021000
 8001f4c:	40013400 	.word	0x40013400
 8001f50:	40014000 	.word	0x40014000
 8001f54:	40014400 	.word	0x40014400
 8001f58:	40014800 	.word	0x40014800

08001f5c <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8001f5c:	480d      	ldr	r0, [pc, #52]	; (8001f94 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8001f5e:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001f60:	480d      	ldr	r0, [pc, #52]	; (8001f98 <LoopForever+0x6>)
  ldr r1, =_edata
 8001f62:	490e      	ldr	r1, [pc, #56]	; (8001f9c <LoopForever+0xa>)
  ldr r2, =_sidata
 8001f64:	4a0e      	ldr	r2, [pc, #56]	; (8001fa0 <LoopForever+0xe>)
  movs r3, #0
 8001f66:	2300      	movs	r3, #0
  b	LoopCopyDataInit
 8001f68:	e002      	b.n	8001f70 <LoopCopyDataInit>

08001f6a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001f6a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001f6c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001f6e:	3304      	adds	r3, #4

08001f70 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001f70:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001f72:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001f74:	d3f9      	bcc.n	8001f6a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001f76:	4a0b      	ldr	r2, [pc, #44]	; (8001fa4 <LoopForever+0x12>)
  ldr r4, =_ebss
 8001f78:	4c0b      	ldr	r4, [pc, #44]	; (8001fa8 <LoopForever+0x16>)
  movs r3, #0
 8001f7a:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001f7c:	e001      	b.n	8001f82 <LoopFillZerobss>

08001f7e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001f7e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001f80:	3204      	adds	r2, #4

08001f82 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001f82:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001f84:	d3fb      	bcc.n	8001f7e <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8001f86:	f7ff fce7 	bl	8001958 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001f8a:	f006 fa85 	bl	8008498 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8001f8e:	f7ff f8bd 	bl	800110c <main>

08001f92 <LoopForever>:

LoopForever:
    b LoopForever
 8001f92:	e7fe      	b.n	8001f92 <LoopForever>
  ldr   r0, =_estack
 8001f94:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8001f98:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001f9c:	200004d4 	.word	0x200004d4
  ldr r2, =_sidata
 8001fa0:	08009b0c 	.word	0x08009b0c
  ldr r2, =_sbss
 8001fa4:	200004d4 	.word	0x200004d4
  ldr r4, =_ebss
 8001fa8:	20000980 	.word	0x20000980

08001fac <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8001fac:	e7fe      	b.n	8001fac <ADC1_2_IRQHandler>

08001fae <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001fae:	b580      	push	{r7, lr}
 8001fb0:	b082      	sub	sp, #8
 8001fb2:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8001fb4:	2300      	movs	r3, #0
 8001fb6:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001fb8:	2003      	movs	r0, #3
 8001fba:	f001 fc9b 	bl	80038f4 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001fbe:	2000      	movs	r0, #0
 8001fc0:	f000 f80e 	bl	8001fe0 <HAL_InitTick>
 8001fc4:	4603      	mov	r3, r0
 8001fc6:	2b00      	cmp	r3, #0
 8001fc8:	d002      	beq.n	8001fd0 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8001fca:	2301      	movs	r3, #1
 8001fcc:	71fb      	strb	r3, [r7, #7]
 8001fce:	e001      	b.n	8001fd4 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8001fd0:	f7ff faa4 	bl	800151c <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8001fd4:	79fb      	ldrb	r3, [r7, #7]

}
 8001fd6:	4618      	mov	r0, r3
 8001fd8:	3708      	adds	r7, #8
 8001fda:	46bd      	mov	sp, r7
 8001fdc:	bd80      	pop	{r7, pc}
	...

08001fe0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001fe0:	b580      	push	{r7, lr}
 8001fe2:	b084      	sub	sp, #16
 8001fe4:	af00      	add	r7, sp, #0
 8001fe6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8001fe8:	2300      	movs	r3, #0
 8001fea:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 8001fec:	4b16      	ldr	r3, [pc, #88]	; (8002048 <HAL_InitTick+0x68>)
 8001fee:	681b      	ldr	r3, [r3, #0]
 8001ff0:	2b00      	cmp	r3, #0
 8001ff2:	d022      	beq.n	800203a <HAL_InitTick+0x5a>
  {
    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 8001ff4:	4b15      	ldr	r3, [pc, #84]	; (800204c <HAL_InitTick+0x6c>)
 8001ff6:	681a      	ldr	r2, [r3, #0]
 8001ff8:	4b13      	ldr	r3, [pc, #76]	; (8002048 <HAL_InitTick+0x68>)
 8001ffa:	681b      	ldr	r3, [r3, #0]
 8001ffc:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8002000:	fbb1 f3f3 	udiv	r3, r1, r3
 8002004:	fbb2 f3f3 	udiv	r3, r2, r3
 8002008:	4618      	mov	r0, r3
 800200a:	f001 fca6 	bl	800395a <HAL_SYSTICK_Config>
 800200e:	4603      	mov	r3, r0
 8002010:	2b00      	cmp	r3, #0
 8002012:	d10f      	bne.n	8002034 <HAL_InitTick+0x54>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002014:	687b      	ldr	r3, [r7, #4]
 8002016:	2b0f      	cmp	r3, #15
 8002018:	d809      	bhi.n	800202e <HAL_InitTick+0x4e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800201a:	2200      	movs	r2, #0
 800201c:	6879      	ldr	r1, [r7, #4]
 800201e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8002022:	f001 fc72 	bl	800390a <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8002026:	4a0a      	ldr	r2, [pc, #40]	; (8002050 <HAL_InitTick+0x70>)
 8002028:	687b      	ldr	r3, [r7, #4]
 800202a:	6013      	str	r3, [r2, #0]
 800202c:	e007      	b.n	800203e <HAL_InitTick+0x5e>
      }
      else
      {
        status = HAL_ERROR;
 800202e:	2301      	movs	r3, #1
 8002030:	73fb      	strb	r3, [r7, #15]
 8002032:	e004      	b.n	800203e <HAL_InitTick+0x5e>
      }
    }
    else
    {
      status = HAL_ERROR;
 8002034:	2301      	movs	r3, #1
 8002036:	73fb      	strb	r3, [r7, #15]
 8002038:	e001      	b.n	800203e <HAL_InitTick+0x5e>
    }
  }
  else
  {
    status = HAL_ERROR;
 800203a:	2301      	movs	r3, #1
 800203c:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 800203e:	7bfb      	ldrb	r3, [r7, #15]
}
 8002040:	4618      	mov	r0, r3
 8002042:	3710      	adds	r7, #16
 8002044:	46bd      	mov	sp, r7
 8002046:	bd80      	pop	{r7, pc}
 8002048:	200003cc 	.word	0x200003cc
 800204c:	200003c4 	.word	0x200003c4
 8002050:	200003c8 	.word	0x200003c8

08002054 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002054:	b480      	push	{r7}
 8002056:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002058:	4b05      	ldr	r3, [pc, #20]	; (8002070 <HAL_IncTick+0x1c>)
 800205a:	681a      	ldr	r2, [r3, #0]
 800205c:	4b05      	ldr	r3, [pc, #20]	; (8002074 <HAL_IncTick+0x20>)
 800205e:	681b      	ldr	r3, [r3, #0]
 8002060:	4413      	add	r3, r2
 8002062:	4a03      	ldr	r2, [pc, #12]	; (8002070 <HAL_IncTick+0x1c>)
 8002064:	6013      	str	r3, [r2, #0]
}
 8002066:	bf00      	nop
 8002068:	46bd      	mov	sp, r7
 800206a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800206e:	4770      	bx	lr
 8002070:	20000978 	.word	0x20000978
 8002074:	200003cc 	.word	0x200003cc

08002078 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002078:	b480      	push	{r7}
 800207a:	af00      	add	r7, sp, #0
  return uwTick;
 800207c:	4b03      	ldr	r3, [pc, #12]	; (800208c <HAL_GetTick+0x14>)
 800207e:	681b      	ldr	r3, [r3, #0]
}
 8002080:	4618      	mov	r0, r3
 8002082:	46bd      	mov	sp, r7
 8002084:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002088:	4770      	bx	lr
 800208a:	bf00      	nop
 800208c:	20000978 	.word	0x20000978

08002090 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002090:	b580      	push	{r7, lr}
 8002092:	b084      	sub	sp, #16
 8002094:	af00      	add	r7, sp, #0
 8002096:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002098:	f7ff ffee 	bl	8002078 <HAL_GetTick>
 800209c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800209e:	687b      	ldr	r3, [r7, #4]
 80020a0:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80020a2:	68fb      	ldr	r3, [r7, #12]
 80020a4:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80020a8:	d004      	beq.n	80020b4 <HAL_Delay+0x24>
  {
    wait += (uint32_t)(uwTickFreq);
 80020aa:	4b09      	ldr	r3, [pc, #36]	; (80020d0 <HAL_Delay+0x40>)
 80020ac:	681b      	ldr	r3, [r3, #0]
 80020ae:	68fa      	ldr	r2, [r7, #12]
 80020b0:	4413      	add	r3, r2
 80020b2:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80020b4:	bf00      	nop
 80020b6:	f7ff ffdf 	bl	8002078 <HAL_GetTick>
 80020ba:	4602      	mov	r2, r0
 80020bc:	68bb      	ldr	r3, [r7, #8]
 80020be:	1ad3      	subs	r3, r2, r3
 80020c0:	68fa      	ldr	r2, [r7, #12]
 80020c2:	429a      	cmp	r2, r3
 80020c4:	d8f7      	bhi.n	80020b6 <HAL_Delay+0x26>
  {
  }
}
 80020c6:	bf00      	nop
 80020c8:	3710      	adds	r7, #16
 80020ca:	46bd      	mov	sp, r7
 80020cc:	bd80      	pop	{r7, pc}
 80020ce:	bf00      	nop
 80020d0:	200003cc 	.word	0x200003cc

080020d4 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 80020d4:	b480      	push	{r7}
 80020d6:	b083      	sub	sp, #12
 80020d8:	af00      	add	r7, sp, #0
 80020da:	6078      	str	r0, [r7, #4]
 80020dc:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 80020de:	687b      	ldr	r3, [r7, #4]
 80020e0:	689b      	ldr	r3, [r3, #8]
 80020e2:	f423 127c 	bic.w	r2, r3, #4128768	; 0x3f0000
 80020e6:	683b      	ldr	r3, [r7, #0]
 80020e8:	431a      	orrs	r2, r3
 80020ea:	687b      	ldr	r3, [r7, #4]
 80020ec:	609a      	str	r2, [r3, #8]
}
 80020ee:	bf00      	nop
 80020f0:	370c      	adds	r7, #12
 80020f2:	46bd      	mov	sp, r7
 80020f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020f8:	4770      	bx	lr

080020fa <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 80020fa:	b480      	push	{r7}
 80020fc:	b083      	sub	sp, #12
 80020fe:	af00      	add	r7, sp, #0
 8002100:	6078      	str	r0, [r7, #4]
 8002102:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL, PathInternal);
 8002104:	687b      	ldr	r3, [r7, #4]
 8002106:	689b      	ldr	r3, [r3, #8]
 8002108:	f023 72e0 	bic.w	r2, r3, #29360128	; 0x1c00000
 800210c:	683b      	ldr	r3, [r7, #0]
 800210e:	431a      	orrs	r2, r3
 8002110:	687b      	ldr	r3, [r7, #4]
 8002112:	609a      	str	r2, [r3, #8]
}
 8002114:	bf00      	nop
 8002116:	370c      	adds	r7, #12
 8002118:	46bd      	mov	sp, r7
 800211a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800211e:	4770      	bx	lr

08002120 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8002120:	b480      	push	{r7}
 8002122:	b083      	sub	sp, #12
 8002124:	af00      	add	r7, sp, #0
 8002126:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL));
 8002128:	687b      	ldr	r3, [r7, #4]
 800212a:	689b      	ldr	r3, [r3, #8]
 800212c:	f003 73e0 	and.w	r3, r3, #29360128	; 0x1c00000
}
 8002130:	4618      	mov	r0, r3
 8002132:	370c      	adds	r7, #12
 8002134:	46bd      	mov	sp, r7
 8002136:	f85d 7b04 	ldr.w	r7, [sp], #4
 800213a:	4770      	bx	lr

0800213c <LL_ADC_SetOffset>:
  *             Other channels are slow channels  allows: 6.5 (sampling) + 12.5 (conversion) = 19 ADC clock cycles (fADC) to convert in 12-bit resolution.\n
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 800213c:	b490      	push	{r4, r7}
 800213e:	b084      	sub	sp, #16
 8002140:	af00      	add	r7, sp, #0
 8002142:	60f8      	str	r0, [r7, #12]
 8002144:	60b9      	str	r1, [r7, #8]
 8002146:	607a      	str	r2, [r7, #4]
 8002148:	603b      	str	r3, [r7, #0]
  register __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 800214a:	68fb      	ldr	r3, [r7, #12]
 800214c:	3360      	adds	r3, #96	; 0x60
 800214e:	461a      	mov	r2, r3
 8002150:	68bb      	ldr	r3, [r7, #8]
 8002152:	009b      	lsls	r3, r3, #2
 8002154:	4413      	add	r3, r2
 8002156:	461c      	mov	r4, r3

  MODIFY_REG(*preg,
 8002158:	6822      	ldr	r2, [r4, #0]
 800215a:	4b08      	ldr	r3, [pc, #32]	; (800217c <LL_ADC_SetOffset+0x40>)
 800215c:	4013      	ands	r3, r2
 800215e:	687a      	ldr	r2, [r7, #4]
 8002160:	f002 41f8 	and.w	r1, r2, #2080374784	; 0x7c000000
 8002164:	683a      	ldr	r2, [r7, #0]
 8002166:	430a      	orrs	r2, r1
 8002168:	4313      	orrs	r3, r2
 800216a:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800216e:	6023      	str	r3, [r4, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 8002170:	bf00      	nop
 8002172:	3710      	adds	r7, #16
 8002174:	46bd      	mov	sp, r7
 8002176:	bc90      	pop	{r4, r7}
 8002178:	4770      	bx	lr
 800217a:	bf00      	nop
 800217c:	03fff000 	.word	0x03fff000

08002180 <LL_ADC_GetOffsetChannel>:
  *         (1, 2, 3, 4, 5, 7) For ADC channel read back from ADC register,
  *                      comparison with internal channel parameter to be done
  *                      using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(ADC_TypeDef *ADCx, uint32_t Offsety)
{
 8002180:	b490      	push	{r4, r7}
 8002182:	b082      	sub	sp, #8
 8002184:	af00      	add	r7, sp, #0
 8002186:	6078      	str	r0, [r7, #4]
 8002188:	6039      	str	r1, [r7, #0]
  register const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 800218a:	687b      	ldr	r3, [r7, #4]
 800218c:	3360      	adds	r3, #96	; 0x60
 800218e:	461a      	mov	r2, r3
 8002190:	683b      	ldr	r3, [r7, #0]
 8002192:	009b      	lsls	r3, r3, #2
 8002194:	4413      	add	r3, r2
 8002196:	461c      	mov	r4, r3

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8002198:	6823      	ldr	r3, [r4, #0]
 800219a:	f003 43f8 	and.w	r3, r3, #2080374784	; 0x7c000000
}
 800219e:	4618      	mov	r0, r3
 80021a0:	3708      	adds	r7, #8
 80021a2:	46bd      	mov	sp, r7
 80021a4:	bc90      	pop	{r4, r7}
 80021a6:	4770      	bx	lr

080021a8 <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 80021a8:	b490      	push	{r4, r7}
 80021aa:	b084      	sub	sp, #16
 80021ac:	af00      	add	r7, sp, #0
 80021ae:	60f8      	str	r0, [r7, #12]
 80021b0:	60b9      	str	r1, [r7, #8]
 80021b2:	607a      	str	r2, [r7, #4]
  register __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80021b4:	68fb      	ldr	r3, [r7, #12]
 80021b6:	3360      	adds	r3, #96	; 0x60
 80021b8:	461a      	mov	r2, r3
 80021ba:	68bb      	ldr	r3, [r7, #8]
 80021bc:	009b      	lsls	r3, r3, #2
 80021be:	4413      	add	r3, r2
 80021c0:	461c      	mov	r4, r3

  MODIFY_REG(*preg,
 80021c2:	6823      	ldr	r3, [r4, #0]
 80021c4:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 80021c8:	687b      	ldr	r3, [r7, #4]
 80021ca:	4313      	orrs	r3, r2
 80021cc:	6023      	str	r3, [r4, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 80021ce:	bf00      	nop
 80021d0:	3710      	adds	r7, #16
 80021d2:	46bd      	mov	sp, r7
 80021d4:	bc90      	pop	{r4, r7}
 80021d6:	4770      	bx	lr

080021d8 <LL_ADC_SetOffsetSign>:
  *         @arg @ref LL_ADC_OFFSET_SIGN_NEGATIVE
  *         @arg @ref LL_ADC_OFFSET_SIGN_POSITIVE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSign(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSign)
{
 80021d8:	b490      	push	{r4, r7}
 80021da:	b084      	sub	sp, #16
 80021dc:	af00      	add	r7, sp, #0
 80021de:	60f8      	str	r0, [r7, #12]
 80021e0:	60b9      	str	r1, [r7, #8]
 80021e2:	607a      	str	r2, [r7, #4]
  register __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80021e4:	68fb      	ldr	r3, [r7, #12]
 80021e6:	3360      	adds	r3, #96	; 0x60
 80021e8:	461a      	mov	r2, r3
 80021ea:	68bb      	ldr	r3, [r7, #8]
 80021ec:	009b      	lsls	r3, r3, #2
 80021ee:	4413      	add	r3, r2
 80021f0:	461c      	mov	r4, r3

  MODIFY_REG(*preg,
 80021f2:	6823      	ldr	r3, [r4, #0]
 80021f4:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 80021f8:	687b      	ldr	r3, [r7, #4]
 80021fa:	4313      	orrs	r3, r2
 80021fc:	6023      	str	r3, [r4, #0]
             ADC_OFR1_OFFSETPOS,
             OffsetSign);
}
 80021fe:	bf00      	nop
 8002200:	3710      	adds	r7, #16
 8002202:	46bd      	mov	sp, r7
 8002204:	bc90      	pop	{r4, r7}
 8002206:	4770      	bx	lr

08002208 <LL_ADC_SetOffsetSaturation>:
  *         @arg @ref LL_ADC_OFFSET_SATURATION_ENABLE
  *         @arg @ref LL_ADC_OFFSET_SATURATION_DISABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSaturation(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSaturation)
{
 8002208:	b490      	push	{r4, r7}
 800220a:	b084      	sub	sp, #16
 800220c:	af00      	add	r7, sp, #0
 800220e:	60f8      	str	r0, [r7, #12]
 8002210:	60b9      	str	r1, [r7, #8]
 8002212:	607a      	str	r2, [r7, #4]
  register __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8002214:	68fb      	ldr	r3, [r7, #12]
 8002216:	3360      	adds	r3, #96	; 0x60
 8002218:	461a      	mov	r2, r3
 800221a:	68bb      	ldr	r3, [r7, #8]
 800221c:	009b      	lsls	r3, r3, #2
 800221e:	4413      	add	r3, r2
 8002220:	461c      	mov	r4, r3

  MODIFY_REG(*preg,
 8002222:	6823      	ldr	r3, [r4, #0]
 8002224:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 8002228:	687b      	ldr	r3, [r7, #4]
 800222a:	4313      	orrs	r3, r2
 800222c:	6023      	str	r3, [r4, #0]
             ADC_OFR1_SATEN,
             OffsetSaturation);
}
 800222e:	bf00      	nop
 8002230:	3710      	adds	r7, #16
 8002232:	46bd      	mov	sp, r7
 8002234:	bc90      	pop	{r4, r7}
 8002236:	4770      	bx	lr

08002238 <LL_ADC_SetSamplingTimeCommonConfig>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_DEFAULT
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetSamplingTimeCommonConfig(ADC_TypeDef *ADCx, uint32_t SamplingTimeCommonConfig)
{
 8002238:	b480      	push	{r7}
 800223a:	b083      	sub	sp, #12
 800223c:	af00      	add	r7, sp, #0
 800223e:	6078      	str	r0, [r7, #4]
 8002240:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->SMPR1, ADC_SMPR1_SMPPLUS, SamplingTimeCommonConfig);
 8002242:	687b      	ldr	r3, [r7, #4]
 8002244:	695b      	ldr	r3, [r3, #20]
 8002246:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 800224a:	683b      	ldr	r3, [r7, #0]
 800224c:	431a      	orrs	r2, r3
 800224e:	687b      	ldr	r3, [r7, #4]
 8002250:	615a      	str	r2, [r3, #20]
}
 8002252:	bf00      	nop
 8002254:	370c      	adds	r7, #12
 8002256:	46bd      	mov	sp, r7
 8002258:	f85d 7b04 	ldr.w	r7, [sp], #4
 800225c:	4770      	bx	lr

0800225e <LL_ADC_REG_SetSequencerRanks>:
  *         (8) On STM32G4, fast channel allows: 2.5 (sampling) + 12.5 (conversion) = 15 ADC clock cycles (fADC) to convert in 12-bit resolution.
  *             Other channels are slow channels  allows: 6.5 (sampling) + 12.5 (conversion) = 19 ADC clock cycles (fADC) to convert in 12-bit resolution.\n
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 800225e:	b490      	push	{r4, r7}
 8002260:	b084      	sub	sp, #16
 8002262:	af00      	add	r7, sp, #0
 8002264:	60f8      	str	r0, [r7, #12]
 8002266:	60b9      	str	r1, [r7, #8]
 8002268:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  register __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 800226a:	68fb      	ldr	r3, [r7, #12]
 800226c:	3330      	adds	r3, #48	; 0x30
 800226e:	461a      	mov	r2, r3
 8002270:	68bb      	ldr	r3, [r7, #8]
 8002272:	0a1b      	lsrs	r3, r3, #8
 8002274:	009b      	lsls	r3, r3, #2
 8002276:	f003 030c 	and.w	r3, r3, #12
 800227a:	4413      	add	r3, r2
 800227c:	461c      	mov	r4, r3

  MODIFY_REG(*preg,
 800227e:	6822      	ldr	r2, [r4, #0]
 8002280:	68bb      	ldr	r3, [r7, #8]
 8002282:	f003 031f 	and.w	r3, r3, #31
 8002286:	211f      	movs	r1, #31
 8002288:	fa01 f303 	lsl.w	r3, r1, r3
 800228c:	43db      	mvns	r3, r3
 800228e:	401a      	ands	r2, r3
 8002290:	687b      	ldr	r3, [r7, #4]
 8002292:	0e9b      	lsrs	r3, r3, #26
 8002294:	f003 011f 	and.w	r1, r3, #31
 8002298:	68bb      	ldr	r3, [r7, #8]
 800229a:	f003 031f 	and.w	r3, r3, #31
 800229e:	fa01 f303 	lsl.w	r3, r1, r3
 80022a2:	4313      	orrs	r3, r2
 80022a4:	6023      	str	r3, [r4, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS) << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 80022a6:	bf00      	nop
 80022a8:	3710      	adds	r7, #16
 80022aa:	46bd      	mov	sp, r7
 80022ac:	bc90      	pop	{r4, r7}
 80022ae:	4770      	bx	lr

080022b0 <LL_ADC_SetChannelSamplingTime>:
  *             can be replaced by 3.5 ADC clock cycles.
  *             Refer to function @ref LL_ADC_SetSamplingTimeCommonConfig().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 80022b0:	b490      	push	{r4, r7}
 80022b2:	b084      	sub	sp, #16
 80022b4:	af00      	add	r7, sp, #0
 80022b6:	60f8      	str	r0, [r7, #12]
 80022b8:	60b9      	str	r1, [r7, #8]
 80022ba:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  register __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 80022bc:	68fb      	ldr	r3, [r7, #12]
 80022be:	3314      	adds	r3, #20
 80022c0:	461a      	mov	r2, r3
 80022c2:	68bb      	ldr	r3, [r7, #8]
 80022c4:	0e5b      	lsrs	r3, r3, #25
 80022c6:	009b      	lsls	r3, r3, #2
 80022c8:	f003 0304 	and.w	r3, r3, #4
 80022cc:	4413      	add	r3, r2
 80022ce:	461c      	mov	r4, r3

  MODIFY_REG(*preg,
 80022d0:	6822      	ldr	r2, [r4, #0]
 80022d2:	68bb      	ldr	r3, [r7, #8]
 80022d4:	0d1b      	lsrs	r3, r3, #20
 80022d6:	f003 031f 	and.w	r3, r3, #31
 80022da:	2107      	movs	r1, #7
 80022dc:	fa01 f303 	lsl.w	r3, r1, r3
 80022e0:	43db      	mvns	r3, r3
 80022e2:	401a      	ands	r2, r3
 80022e4:	68bb      	ldr	r3, [r7, #8]
 80022e6:	0d1b      	lsrs	r3, r3, #20
 80022e8:	f003 031f 	and.w	r3, r3, #31
 80022ec:	6879      	ldr	r1, [r7, #4]
 80022ee:	fa01 f303 	lsl.w	r3, r1, r3
 80022f2:	4313      	orrs	r3, r2
 80022f4:	6023      	str	r3, [r4, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 80022f6:	bf00      	nop
 80022f8:	3710      	adds	r7, #16
 80022fa:	46bd      	mov	sp, r7
 80022fc:	bc90      	pop	{r4, r7}
 80022fe:	4770      	bx	lr

08002300 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 8002300:	b480      	push	{r7}
 8002302:	b085      	sub	sp, #20
 8002304:	af00      	add	r7, sp, #0
 8002306:	60f8      	str	r0, [r7, #12]
 8002308:	60b9      	str	r1, [r7, #8]
 800230a:	607a      	str	r2, [r7, #4]
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 800230c:	68fb      	ldr	r3, [r7, #12]
 800230e:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 8002312:	68bb      	ldr	r3, [r7, #8]
 8002314:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002318:	43db      	mvns	r3, r3
 800231a:	401a      	ands	r2, r3
 800231c:	687b      	ldr	r3, [r7, #4]
 800231e:	f003 0318 	and.w	r3, r3, #24
 8002322:	4908      	ldr	r1, [pc, #32]	; (8002344 <LL_ADC_SetChannelSingleDiff+0x44>)
 8002324:	40d9      	lsrs	r1, r3
 8002326:	68bb      	ldr	r3, [r7, #8]
 8002328:	400b      	ands	r3, r1
 800232a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800232e:	431a      	orrs	r2, r3
 8002330:	68fb      	ldr	r3, [r7, #12]
 8002332:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK) & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
}
 8002336:	bf00      	nop
 8002338:	3714      	adds	r7, #20
 800233a:	46bd      	mov	sp, r7
 800233c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002340:	4770      	bx	lr
 8002342:	bf00      	nop
 8002344:	0007ffff 	.word	0x0007ffff

08002348 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 8002348:	b480      	push	{r7}
 800234a:	b083      	sub	sp, #12
 800234c:	af00      	add	r7, sp, #0
 800234e:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8002350:	687b      	ldr	r3, [r7, #4]
 8002352:	689b      	ldr	r3, [r3, #8]
 8002354:	f023 4320 	bic.w	r3, r3, #2684354560	; 0xa0000000
 8002358:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 800235c:	687a      	ldr	r2, [r7, #4]
 800235e:	6093      	str	r3, [r2, #8]
}
 8002360:	bf00      	nop
 8002362:	370c      	adds	r7, #12
 8002364:	46bd      	mov	sp, r7
 8002366:	f85d 7b04 	ldr.w	r7, [sp], #4
 800236a:	4770      	bx	lr

0800236c <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(ADC_TypeDef *ADCx)
{
 800236c:	b480      	push	{r7}
 800236e:	b083      	sub	sp, #12
 8002370:	af00      	add	r7, sp, #0
 8002372:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8002374:	687b      	ldr	r3, [r7, #4]
 8002376:	689b      	ldr	r3, [r3, #8]
 8002378:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800237c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002380:	d101      	bne.n	8002386 <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 8002382:	2301      	movs	r3, #1
 8002384:	e000      	b.n	8002388 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 8002386:	2300      	movs	r3, #0
}
 8002388:	4618      	mov	r0, r3
 800238a:	370c      	adds	r7, #12
 800238c:	46bd      	mov	sp, r7
 800238e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002392:	4770      	bx	lr

08002394 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8002394:	b480      	push	{r7}
 8002396:	b083      	sub	sp, #12
 8002398:	af00      	add	r7, sp, #0
 800239a:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 800239c:	687b      	ldr	r3, [r7, #4]
 800239e:	689b      	ldr	r3, [r3, #8]
 80023a0:	f023 4310 	bic.w	r3, r3, #2415919104	; 0x90000000
 80023a4:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 80023a8:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 80023ac:	687b      	ldr	r3, [r7, #4]
 80023ae:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 80023b0:	bf00      	nop
 80023b2:	370c      	adds	r7, #12
 80023b4:	46bd      	mov	sp, r7
 80023b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023ba:	4770      	bx	lr

080023bc <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
{
 80023bc:	b480      	push	{r7}
 80023be:	b083      	sub	sp, #12
 80023c0:	af00      	add	r7, sp, #0
 80023c2:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 80023c4:	687b      	ldr	r3, [r7, #4]
 80023c6:	689b      	ldr	r3, [r3, #8]
 80023c8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80023cc:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80023d0:	d101      	bne.n	80023d6 <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 80023d2:	2301      	movs	r3, #1
 80023d4:	e000      	b.n	80023d8 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 80023d6:	2300      	movs	r3, #0
}
 80023d8:	4618      	mov	r0, r3
 80023da:	370c      	adds	r7, #12
 80023dc:	46bd      	mov	sp, r7
 80023de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023e2:	4770      	bx	lr

080023e4 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
 80023e4:	b480      	push	{r7}
 80023e6:	b083      	sub	sp, #12
 80023e8:	af00      	add	r7, sp, #0
 80023ea:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 80023ec:	687b      	ldr	r3, [r7, #4]
 80023ee:	689b      	ldr	r3, [r3, #8]
 80023f0:	f003 0301 	and.w	r3, r3, #1
 80023f4:	2b01      	cmp	r3, #1
 80023f6:	d101      	bne.n	80023fc <LL_ADC_IsEnabled+0x18>
 80023f8:	2301      	movs	r3, #1
 80023fa:	e000      	b.n	80023fe <LL_ADC_IsEnabled+0x1a>
 80023fc:	2300      	movs	r3, #0
}
 80023fe:	4618      	mov	r0, r3
 8002400:	370c      	adds	r7, #12
 8002402:	46bd      	mov	sp, r7
 8002404:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002408:	4770      	bx	lr

0800240a <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 800240a:	b480      	push	{r7}
 800240c:	b083      	sub	sp, #12
 800240e:	af00      	add	r7, sp, #0
 8002410:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8002412:	687b      	ldr	r3, [r7, #4]
 8002414:	689b      	ldr	r3, [r3, #8]
 8002416:	f003 0304 	and.w	r3, r3, #4
 800241a:	2b04      	cmp	r3, #4
 800241c:	d101      	bne.n	8002422 <LL_ADC_REG_IsConversionOngoing+0x18>
 800241e:	2301      	movs	r3, #1
 8002420:	e000      	b.n	8002424 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8002422:	2300      	movs	r3, #0
}
 8002424:	4618      	mov	r0, r3
 8002426:	370c      	adds	r7, #12
 8002428:	46bd      	mov	sp, r7
 800242a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800242e:	4770      	bx	lr

08002430 <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8002430:	b480      	push	{r7}
 8002432:	b083      	sub	sp, #12
 8002434:	af00      	add	r7, sp, #0
 8002436:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8002438:	687b      	ldr	r3, [r7, #4]
 800243a:	689b      	ldr	r3, [r3, #8]
 800243c:	f003 0308 	and.w	r3, r3, #8
 8002440:	2b08      	cmp	r3, #8
 8002442:	d101      	bne.n	8002448 <LL_ADC_INJ_IsConversionOngoing+0x18>
 8002444:	2301      	movs	r3, #1
 8002446:	e000      	b.n	800244a <LL_ADC_INJ_IsConversionOngoing+0x1a>
 8002448:	2300      	movs	r3, #0
}
 800244a:	4618      	mov	r0, r3
 800244c:	370c      	adds	r7, #12
 800244e:	46bd      	mov	sp, r7
 8002450:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002454:	4770      	bx	lr
	...

08002458 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8002458:	b590      	push	{r4, r7, lr}
 800245a:	b089      	sub	sp, #36	; 0x24
 800245c:	af00      	add	r7, sp, #0
 800245e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002460:	2300      	movs	r3, #0
 8002462:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpCFGR;
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 8002464:	2300      	movs	r3, #0
 8002466:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;

  /* Check ADC handle */
  if (hadc == NULL)
 8002468:	687b      	ldr	r3, [r7, #4]
 800246a:	2b00      	cmp	r3, #0
 800246c:	d101      	bne.n	8002472 <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 800246e:	2301      	movs	r3, #1
 8002470:	e1ad      	b.n	80027ce <HAL_ADC_Init+0x376>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8002472:	687b      	ldr	r3, [r7, #4]
 8002474:	695b      	ldr	r3, [r3, #20]
 8002476:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8002478:	687b      	ldr	r3, [r7, #4]
 800247a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800247c:	2b00      	cmp	r3, #0
 800247e:	d109      	bne.n	8002494 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8002480:	6878      	ldr	r0, [r7, #4]
 8002482:	f7fe f84b 	bl	800051c <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8002486:	687b      	ldr	r3, [r7, #4]
 8002488:	2200      	movs	r2, #0
 800248a:	661a      	str	r2, [r3, #96]	; 0x60

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 800248c:	687b      	ldr	r3, [r7, #4]
 800248e:	2200      	movs	r2, #0
 8002490:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8002494:	687b      	ldr	r3, [r7, #4]
 8002496:	681b      	ldr	r3, [r3, #0]
 8002498:	4618      	mov	r0, r3
 800249a:	f7ff ff67 	bl	800236c <LL_ADC_IsDeepPowerDownEnabled>
 800249e:	4603      	mov	r3, r0
 80024a0:	2b00      	cmp	r3, #0
 80024a2:	d004      	beq.n	80024ae <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 80024a4:	687b      	ldr	r3, [r7, #4]
 80024a6:	681b      	ldr	r3, [r3, #0]
 80024a8:	4618      	mov	r0, r3
 80024aa:	f7ff ff4d 	bl	8002348 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 80024ae:	687b      	ldr	r3, [r7, #4]
 80024b0:	681b      	ldr	r3, [r3, #0]
 80024b2:	4618      	mov	r0, r3
 80024b4:	f7ff ff82 	bl	80023bc <LL_ADC_IsInternalRegulatorEnabled>
 80024b8:	4603      	mov	r3, r0
 80024ba:	2b00      	cmp	r3, #0
 80024bc:	d113      	bne.n	80024e6 <HAL_ADC_Init+0x8e>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 80024be:	687b      	ldr	r3, [r7, #4]
 80024c0:	681b      	ldr	r3, [r3, #0]
 80024c2:	4618      	mov	r0, r3
 80024c4:	f7ff ff66 	bl	8002394 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * (SystemCoreClock / (100000UL * 2UL)));
 80024c8:	4b9e      	ldr	r3, [pc, #632]	; (8002744 <HAL_ADC_Init+0x2ec>)
 80024ca:	681b      	ldr	r3, [r3, #0]
 80024cc:	099b      	lsrs	r3, r3, #6
 80024ce:	4a9e      	ldr	r2, [pc, #632]	; (8002748 <HAL_ADC_Init+0x2f0>)
 80024d0:	fba2 2303 	umull	r2, r3, r2, r3
 80024d4:	099b      	lsrs	r3, r3, #6
 80024d6:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 80024d8:	e002      	b.n	80024e0 <HAL_ADC_Init+0x88>
    {
      wait_loop_index--;
 80024da:	68bb      	ldr	r3, [r7, #8]
 80024dc:	3b01      	subs	r3, #1
 80024de:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 80024e0:	68bb      	ldr	r3, [r7, #8]
 80024e2:	2b00      	cmp	r3, #0
 80024e4:	d1f9      	bne.n	80024da <HAL_ADC_Init+0x82>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 80024e6:	687b      	ldr	r3, [r7, #4]
 80024e8:	681b      	ldr	r3, [r3, #0]
 80024ea:	4618      	mov	r0, r3
 80024ec:	f7ff ff66 	bl	80023bc <LL_ADC_IsInternalRegulatorEnabled>
 80024f0:	4603      	mov	r3, r0
 80024f2:	2b00      	cmp	r3, #0
 80024f4:	d10d      	bne.n	8002512 <HAL_ADC_Init+0xba>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80024f6:	687b      	ldr	r3, [r7, #4]
 80024f8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80024fa:	f043 0210 	orr.w	r2, r3, #16
 80024fe:	687b      	ldr	r3, [r7, #4]
 8002500:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002502:	687b      	ldr	r3, [r7, #4]
 8002504:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002506:	f043 0201 	orr.w	r2, r3, #1
 800250a:	687b      	ldr	r3, [r7, #4]
 800250c:	661a      	str	r2, [r3, #96]	; 0x60

    tmp_hal_status = HAL_ERROR;
 800250e:	2301      	movs	r3, #1
 8002510:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8002512:	687b      	ldr	r3, [r7, #4]
 8002514:	681b      	ldr	r3, [r3, #0]
 8002516:	4618      	mov	r0, r3
 8002518:	f7ff ff77 	bl	800240a <LL_ADC_REG_IsConversionOngoing>
 800251c:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 800251e:	687b      	ldr	r3, [r7, #4]
 8002520:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002522:	f003 0310 	and.w	r3, r3, #16
 8002526:	2b00      	cmp	r3, #0
 8002528:	f040 8148 	bne.w	80027bc <HAL_ADC_Init+0x364>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 800252c:	697b      	ldr	r3, [r7, #20]
 800252e:	2b00      	cmp	r3, #0
 8002530:	f040 8144 	bne.w	80027bc <HAL_ADC_Init+0x364>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002534:	687b      	ldr	r3, [r7, #4]
 8002536:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002538:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 800253c:	f043 0202 	orr.w	r2, r3, #2
 8002540:	687b      	ldr	r3, [r7, #4]
 8002542:	65da      	str	r2, [r3, #92]	; 0x5c
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002544:	687b      	ldr	r3, [r7, #4]
 8002546:	681b      	ldr	r3, [r3, #0]
 8002548:	4618      	mov	r0, r3
 800254a:	f7ff ff4b 	bl	80023e4 <LL_ADC_IsEnabled>
 800254e:	4603      	mov	r3, r0
 8002550:	2b00      	cmp	r3, #0
 8002552:	d141      	bne.n	80025d8 <HAL_ADC_Init+0x180>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8002554:	687b      	ldr	r3, [r7, #4]
 8002556:	681b      	ldr	r3, [r3, #0]
 8002558:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800255c:	d004      	beq.n	8002568 <HAL_ADC_Init+0x110>
 800255e:	687b      	ldr	r3, [r7, #4]
 8002560:	681b      	ldr	r3, [r3, #0]
 8002562:	4a7a      	ldr	r2, [pc, #488]	; (800274c <HAL_ADC_Init+0x2f4>)
 8002564:	4293      	cmp	r3, r2
 8002566:	d10f      	bne.n	8002588 <HAL_ADC_Init+0x130>
 8002568:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
 800256c:	f7ff ff3a 	bl	80023e4 <LL_ADC_IsEnabled>
 8002570:	4604      	mov	r4, r0
 8002572:	4876      	ldr	r0, [pc, #472]	; (800274c <HAL_ADC_Init+0x2f4>)
 8002574:	f7ff ff36 	bl	80023e4 <LL_ADC_IsEnabled>
 8002578:	4603      	mov	r3, r0
 800257a:	4323      	orrs	r3, r4
 800257c:	2b00      	cmp	r3, #0
 800257e:	bf0c      	ite	eq
 8002580:	2301      	moveq	r3, #1
 8002582:	2300      	movne	r3, #0
 8002584:	b2db      	uxtb	r3, r3
 8002586:	e012      	b.n	80025ae <HAL_ADC_Init+0x156>
 8002588:	4871      	ldr	r0, [pc, #452]	; (8002750 <HAL_ADC_Init+0x2f8>)
 800258a:	f7ff ff2b 	bl	80023e4 <LL_ADC_IsEnabled>
 800258e:	4604      	mov	r4, r0
 8002590:	4870      	ldr	r0, [pc, #448]	; (8002754 <HAL_ADC_Init+0x2fc>)
 8002592:	f7ff ff27 	bl	80023e4 <LL_ADC_IsEnabled>
 8002596:	4603      	mov	r3, r0
 8002598:	431c      	orrs	r4, r3
 800259a:	486f      	ldr	r0, [pc, #444]	; (8002758 <HAL_ADC_Init+0x300>)
 800259c:	f7ff ff22 	bl	80023e4 <LL_ADC_IsEnabled>
 80025a0:	4603      	mov	r3, r0
 80025a2:	4323      	orrs	r3, r4
 80025a4:	2b00      	cmp	r3, #0
 80025a6:	bf0c      	ite	eq
 80025a8:	2301      	moveq	r3, #1
 80025aa:	2300      	movne	r3, #0
 80025ac:	b2db      	uxtb	r3, r3
 80025ae:	2b00      	cmp	r3, #0
 80025b0:	d012      	beq.n	80025d8 <HAL_ADC_Init+0x180>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 80025b2:	687b      	ldr	r3, [r7, #4]
 80025b4:	681b      	ldr	r3, [r3, #0]
 80025b6:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80025ba:	d004      	beq.n	80025c6 <HAL_ADC_Init+0x16e>
 80025bc:	687b      	ldr	r3, [r7, #4]
 80025be:	681b      	ldr	r3, [r3, #0]
 80025c0:	4a62      	ldr	r2, [pc, #392]	; (800274c <HAL_ADC_Init+0x2f4>)
 80025c2:	4293      	cmp	r3, r2
 80025c4:	d101      	bne.n	80025ca <HAL_ADC_Init+0x172>
 80025c6:	4a65      	ldr	r2, [pc, #404]	; (800275c <HAL_ADC_Init+0x304>)
 80025c8:	e000      	b.n	80025cc <HAL_ADC_Init+0x174>
 80025ca:	4a65      	ldr	r2, [pc, #404]	; (8002760 <HAL_ADC_Init+0x308>)
 80025cc:	687b      	ldr	r3, [r7, #4]
 80025ce:	685b      	ldr	r3, [r3, #4]
 80025d0:	4619      	mov	r1, r3
 80025d2:	4610      	mov	r0, r2
 80025d4:	f7ff fd7e 	bl	80020d4 <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 80025d8:	687b      	ldr	r3, [r7, #4]
 80025da:	7f5b      	ldrb	r3, [r3, #29]
 80025dc:	035a      	lsls	r2, r3, #13
                hadc->Init.Overrun                                                     |
 80025de:	687b      	ldr	r3, [r7, #4]
 80025e0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 80025e2:	431a      	orrs	r2, r3
                hadc->Init.DataAlign                                                   |
 80025e4:	687b      	ldr	r3, [r7, #4]
 80025e6:	68db      	ldr	r3, [r3, #12]
                hadc->Init.Overrun                                                     |
 80025e8:	431a      	orrs	r2, r3
                hadc->Init.Resolution                                                  |
 80025ea:	687b      	ldr	r3, [r7, #4]
 80025ec:	689b      	ldr	r3, [r3, #8]
                hadc->Init.DataAlign                                                   |
 80025ee:	431a      	orrs	r2, r3
                ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 80025f0:	687b      	ldr	r3, [r7, #4]
 80025f2:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80025f6:	041b      	lsls	r3, r3, #16
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 80025f8:	4313      	orrs	r3, r2
 80025fa:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 80025fc:	687b      	ldr	r3, [r7, #4]
 80025fe:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8002602:	2b01      	cmp	r3, #1
 8002604:	d106      	bne.n	8002614 <HAL_ADC_Init+0x1bc>
    {
      tmpCFGR |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 8002606:	687b      	ldr	r3, [r7, #4]
 8002608:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800260a:	3b01      	subs	r3, #1
 800260c:	045b      	lsls	r3, r3, #17
 800260e:	69ba      	ldr	r2, [r7, #24]
 8002610:	4313      	orrs	r3, r2
 8002612:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8002614:	687b      	ldr	r3, [r7, #4]
 8002616:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002618:	2b00      	cmp	r3, #0
 800261a:	d009      	beq.n	8002630 <HAL_ADC_Init+0x1d8>
    {
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 800261c:	687b      	ldr	r3, [r7, #4]
 800261e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002620:	f403 7278 	and.w	r2, r3, #992	; 0x3e0
                  | hadc->Init.ExternalTrigConvEdge
 8002624:	687b      	ldr	r3, [r7, #4]
 8002626:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002628:	4313      	orrs	r3, r2
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 800262a:	69ba      	ldr	r2, [r7, #24]
 800262c:	4313      	orrs	r3, r2
 800262e:	61bb      	str	r3, [r7, #24]
                 );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
 8002630:	687b      	ldr	r3, [r7, #4]
 8002632:	681b      	ldr	r3, [r3, #0]
 8002634:	68da      	ldr	r2, [r3, #12]
 8002636:	4b4b      	ldr	r3, [pc, #300]	; (8002764 <HAL_ADC_Init+0x30c>)
 8002638:	4013      	ands	r3, r2
 800263a:	687a      	ldr	r2, [r7, #4]
 800263c:	6812      	ldr	r2, [r2, #0]
 800263e:	69b9      	ldr	r1, [r7, #24]
 8002640:	430b      	orrs	r3, r1
 8002642:	60d3      	str	r3, [r2, #12]

    /* Configuration of sampling mode */
    MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_BULB | ADC_CFGR2_SMPTRIG, hadc->Init.SamplingMode);
 8002644:	687b      	ldr	r3, [r7, #4]
 8002646:	681b      	ldr	r3, [r3, #0]
 8002648:	691b      	ldr	r3, [r3, #16]
 800264a:	f023 6140 	bic.w	r1, r3, #201326592	; 0xc000000
 800264e:	687b      	ldr	r3, [r7, #4]
 8002650:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002652:	687b      	ldr	r3, [r7, #4]
 8002654:	681b      	ldr	r3, [r3, #0]
 8002656:	430a      	orrs	r2, r1
 8002658:	611a      	str	r2, [r3, #16]
    /* conversion on going on regular and injected groups:                    */
    /*  - Gain Compensation               Init.GainCompensation               */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 800265a:	687b      	ldr	r3, [r7, #4]
 800265c:	681b      	ldr	r3, [r3, #0]
 800265e:	4618      	mov	r0, r3
 8002660:	f7ff fed3 	bl	800240a <LL_ADC_REG_IsConversionOngoing>
 8002664:	6138      	str	r0, [r7, #16]
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8002666:	687b      	ldr	r3, [r7, #4]
 8002668:	681b      	ldr	r3, [r3, #0]
 800266a:	4618      	mov	r0, r3
 800266c:	f7ff fee0 	bl	8002430 <LL_ADC_INJ_IsConversionOngoing>
 8002670:	60f8      	str	r0, [r7, #12]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8002672:	693b      	ldr	r3, [r7, #16]
 8002674:	2b00      	cmp	r3, #0
 8002676:	d17f      	bne.n	8002778 <HAL_ADC_Init+0x320>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8002678:	68fb      	ldr	r3, [r7, #12]
 800267a:	2b00      	cmp	r3, #0
 800267c:	d17c      	bne.n	8002778 <HAL_ADC_Init+0x320>
       )
    {
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
                 ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 800267e:	687b      	ldr	r3, [r7, #4]
 8002680:	7f1b      	ldrb	r3, [r3, #28]
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 8002682:	039a      	lsls	r2, r3, #14
                 ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 8002684:	687b      	ldr	r3, [r7, #4]
 8002686:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 800268a:	005b      	lsls	r3, r3, #1
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 800268c:	4313      	orrs	r3, r2
 800268e:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 8002690:	687b      	ldr	r3, [r7, #4]
 8002692:	681b      	ldr	r3, [r3, #0]
 8002694:	68db      	ldr	r3, [r3, #12]
 8002696:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800269a:	f023 0302 	bic.w	r3, r3, #2
 800269e:	687a      	ldr	r2, [r7, #4]
 80026a0:	6812      	ldr	r2, [r2, #0]
 80026a2:	69b9      	ldr	r1, [r7, #24]
 80026a4:	430b      	orrs	r3, r1
 80026a6:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.GainCompensation != 0UL)
 80026a8:	687b      	ldr	r3, [r7, #4]
 80026aa:	691b      	ldr	r3, [r3, #16]
 80026ac:	2b00      	cmp	r3, #0
 80026ae:	d017      	beq.n	80026e0 <HAL_ADC_Init+0x288>
      {
        SET_BIT(hadc->Instance->CFGR2, ADC_CFGR2_GCOMP);
 80026b0:	687b      	ldr	r3, [r7, #4]
 80026b2:	681b      	ldr	r3, [r3, #0]
 80026b4:	691a      	ldr	r2, [r3, #16]
 80026b6:	687b      	ldr	r3, [r7, #4]
 80026b8:	681b      	ldr	r3, [r3, #0]
 80026ba:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 80026be:	611a      	str	r2, [r3, #16]
        MODIFY_REG(hadc->Instance->GCOMP, ADC_GCOMP_GCOMPCOEFF, hadc->Init.GainCompensation);
 80026c0:	687b      	ldr	r3, [r7, #4]
 80026c2:	681b      	ldr	r3, [r3, #0]
 80026c4:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 80026c8:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 80026cc:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 80026d0:	687a      	ldr	r2, [r7, #4]
 80026d2:	6911      	ldr	r1, [r2, #16]
 80026d4:	687a      	ldr	r2, [r7, #4]
 80026d6:	6812      	ldr	r2, [r2, #0]
 80026d8:	430b      	orrs	r3, r1
 80026da:	f8c2 30c0 	str.w	r3, [r2, #192]	; 0xc0
 80026de:	e013      	b.n	8002708 <HAL_ADC_Init+0x2b0>
      }
      else
      {
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_GCOMP);
 80026e0:	687b      	ldr	r3, [r7, #4]
 80026e2:	681b      	ldr	r3, [r3, #0]
 80026e4:	691a      	ldr	r2, [r3, #16]
 80026e6:	687b      	ldr	r3, [r7, #4]
 80026e8:	681b      	ldr	r3, [r3, #0]
 80026ea:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 80026ee:	611a      	str	r2, [r3, #16]
        MODIFY_REG(hadc->Instance->GCOMP, ADC_GCOMP_GCOMPCOEFF, 0UL);
 80026f0:	687b      	ldr	r3, [r7, #4]
 80026f2:	681b      	ldr	r3, [r3, #0]
 80026f4:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 80026f8:	687a      	ldr	r2, [r7, #4]
 80026fa:	6812      	ldr	r2, [r2, #0]
 80026fc:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 8002700:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8002704:	f8c2 30c0 	str.w	r3, [r2, #192]	; 0xc0
      }

      if (hadc->Init.OversamplingMode == ENABLE)
 8002708:	687b      	ldr	r3, [r7, #4]
 800270a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800270e:	2b01      	cmp	r3, #1
 8002710:	d12a      	bne.n	8002768 <HAL_ADC_Init+0x310>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 8002712:	687b      	ldr	r3, [r7, #4]
 8002714:	681b      	ldr	r3, [r3, #0]
 8002716:	691b      	ldr	r3, [r3, #16]
 8002718:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 800271c:	f023 0304 	bic.w	r3, r3, #4
 8002720:	687a      	ldr	r2, [r7, #4]
 8002722:	6c51      	ldr	r1, [r2, #68]	; 0x44
 8002724:	687a      	ldr	r2, [r7, #4]
 8002726:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8002728:	4311      	orrs	r1, r2
 800272a:	687a      	ldr	r2, [r7, #4]
 800272c:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 800272e:	4311      	orrs	r1, r2
 8002730:	687a      	ldr	r2, [r7, #4]
 8002732:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8002734:	430a      	orrs	r2, r1
 8002736:	431a      	orrs	r2, r3
 8002738:	687b      	ldr	r3, [r7, #4]
 800273a:	681b      	ldr	r3, [r3, #0]
 800273c:	f042 0201 	orr.w	r2, r2, #1
 8002740:	611a      	str	r2, [r3, #16]
 8002742:	e019      	b.n	8002778 <HAL_ADC_Init+0x320>
 8002744:	200003c4 	.word	0x200003c4
 8002748:	053e2d63 	.word	0x053e2d63
 800274c:	50000100 	.word	0x50000100
 8002750:	50000400 	.word	0x50000400
 8002754:	50000500 	.word	0x50000500
 8002758:	50000600 	.word	0x50000600
 800275c:	50000300 	.word	0x50000300
 8002760:	50000700 	.word	0x50000700
 8002764:	fff04007 	.word	0xfff04007
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 8002768:	687b      	ldr	r3, [r7, #4]
 800276a:	681b      	ldr	r3, [r3, #0]
 800276c:	691a      	ldr	r2, [r3, #16]
 800276e:	687b      	ldr	r3, [r7, #4]
 8002770:	681b      	ldr	r3, [r3, #0]
 8002772:	f022 0201 	bic.w	r2, r2, #1
 8002776:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8002778:	687b      	ldr	r3, [r7, #4]
 800277a:	695b      	ldr	r3, [r3, #20]
 800277c:	2b01      	cmp	r3, #1
 800277e:	d10c      	bne.n	800279a <HAL_ADC_Init+0x342>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 8002780:	687b      	ldr	r3, [r7, #4]
 8002782:	681b      	ldr	r3, [r3, #0]
 8002784:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002786:	f023 010f 	bic.w	r1, r3, #15
 800278a:	687b      	ldr	r3, [r7, #4]
 800278c:	6a1b      	ldr	r3, [r3, #32]
 800278e:	1e5a      	subs	r2, r3, #1
 8002790:	687b      	ldr	r3, [r7, #4]
 8002792:	681b      	ldr	r3, [r3, #0]
 8002794:	430a      	orrs	r2, r1
 8002796:	631a      	str	r2, [r3, #48]	; 0x30
 8002798:	e007      	b.n	80027aa <HAL_ADC_Init+0x352>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 800279a:	687b      	ldr	r3, [r7, #4]
 800279c:	681b      	ldr	r3, [r3, #0]
 800279e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80027a0:	687b      	ldr	r3, [r7, #4]
 80027a2:	681b      	ldr	r3, [r3, #0]
 80027a4:	f022 020f 	bic.w	r2, r2, #15
 80027a8:	631a      	str	r2, [r3, #48]	; 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 80027aa:	687b      	ldr	r3, [r7, #4]
 80027ac:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80027ae:	f023 0303 	bic.w	r3, r3, #3
 80027b2:	f043 0201 	orr.w	r2, r3, #1
 80027b6:	687b      	ldr	r3, [r7, #4]
 80027b8:	65da      	str	r2, [r3, #92]	; 0x5c
 80027ba:	e007      	b.n	80027cc <HAL_ADC_Init+0x374>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80027bc:	687b      	ldr	r3, [r7, #4]
 80027be:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80027c0:	f043 0210 	orr.w	r2, r3, #16
 80027c4:	687b      	ldr	r3, [r7, #4]
 80027c6:	65da      	str	r2, [r3, #92]	; 0x5c

    tmp_hal_status = HAL_ERROR;
 80027c8:	2301      	movs	r3, #1
 80027ca:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 80027cc:	7ffb      	ldrb	r3, [r7, #31]
}
 80027ce:	4618      	mov	r0, r3
 80027d0:	3724      	adds	r7, #36	; 0x24
 80027d2:	46bd      	mov	sp, r7
 80027d4:	bd90      	pop	{r4, r7, pc}
 80027d6:	bf00      	nop

080027d8 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 80027d8:	b580      	push	{r7, lr}
 80027da:	b0a6      	sub	sp, #152	; 0x98
 80027dc:	af00      	add	r7, sp, #0
 80027de:	6078      	str	r0, [r7, #4]
 80027e0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80027e2:	2300      	movs	r3, #0
 80027e4:	f887 3097 	strb.w	r3, [r7, #151]	; 0x97
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0;
 80027e8:	2300      	movs	r3, #0
 80027ea:	60bb      	str	r3, [r7, #8]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, sConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 80027ec:	687b      	ldr	r3, [r7, #4]
 80027ee:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 80027f2:	2b01      	cmp	r3, #1
 80027f4:	d101      	bne.n	80027fa <HAL_ADC_ConfigChannel+0x22>
 80027f6:	2302      	movs	r3, #2
 80027f8:	e38e      	b.n	8002f18 <HAL_ADC_ConfigChannel+0x740>
 80027fa:	687b      	ldr	r3, [r7, #4]
 80027fc:	2201      	movs	r2, #1
 80027fe:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8002802:	687b      	ldr	r3, [r7, #4]
 8002804:	681b      	ldr	r3, [r3, #0]
 8002806:	4618      	mov	r0, r3
 8002808:	f7ff fdff 	bl	800240a <LL_ADC_REG_IsConversionOngoing>
 800280c:	4603      	mov	r3, r0
 800280e:	2b00      	cmp	r3, #0
 8002810:	f040 836f 	bne.w	8002ef2 <HAL_ADC_ConfigChannel+0x71a>
  {
    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, sConfig->Rank, sConfig->Channel);
 8002814:	687b      	ldr	r3, [r7, #4]
 8002816:	6818      	ldr	r0, [r3, #0]
 8002818:	683b      	ldr	r3, [r7, #0]
 800281a:	6859      	ldr	r1, [r3, #4]
 800281c:	683b      	ldr	r3, [r7, #0]
 800281e:	681b      	ldr	r3, [r3, #0]
 8002820:	461a      	mov	r2, r3
 8002822:	f7ff fd1c 	bl	800225e <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8002826:	687b      	ldr	r3, [r7, #4]
 8002828:	681b      	ldr	r3, [r3, #0]
 800282a:	4618      	mov	r0, r3
 800282c:	f7ff fded 	bl	800240a <LL_ADC_REG_IsConversionOngoing>
 8002830:	f8c7 0090 	str.w	r0, [r7, #144]	; 0x90
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8002834:	687b      	ldr	r3, [r7, #4]
 8002836:	681b      	ldr	r3, [r3, #0]
 8002838:	4618      	mov	r0, r3
 800283a:	f7ff fdf9 	bl	8002430 <LL_ADC_INJ_IsConversionOngoing>
 800283e:	f8c7 008c 	str.w	r0, [r7, #140]	; 0x8c
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8002842:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8002846:	2b00      	cmp	r3, #0
 8002848:	f040 817b 	bne.w	8002b42 <HAL_ADC_ConfigChannel+0x36a>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 800284c:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8002850:	2b00      	cmp	r3, #0
 8002852:	f040 8176 	bne.w	8002b42 <HAL_ADC_ConfigChannel+0x36a>
       )
    {
      /* Manage specific case of sampling time 3.5 cycles replacing 2.5 cyles */
      if (sConfig->SamplingTime == ADC_SAMPLETIME_3CYCLES_5)
 8002856:	683b      	ldr	r3, [r7, #0]
 8002858:	689b      	ldr	r3, [r3, #8]
 800285a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800285e:	d10f      	bne.n	8002880 <HAL_ADC_ConfigChannel+0xa8>
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, LL_ADC_SAMPLINGTIME_2CYCLES_5);
 8002860:	687b      	ldr	r3, [r7, #4]
 8002862:	6818      	ldr	r0, [r3, #0]
 8002864:	683b      	ldr	r3, [r7, #0]
 8002866:	681b      	ldr	r3, [r3, #0]
 8002868:	2200      	movs	r2, #0
 800286a:	4619      	mov	r1, r3
 800286c:	f7ff fd20 	bl	80022b0 <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5);
 8002870:	687b      	ldr	r3, [r7, #4]
 8002872:	681b      	ldr	r3, [r3, #0]
 8002874:	f04f 4100 	mov.w	r1, #2147483648	; 0x80000000
 8002878:	4618      	mov	r0, r3
 800287a:	f7ff fcdd 	bl	8002238 <LL_ADC_SetSamplingTimeCommonConfig>
 800287e:	e00e      	b.n	800289e <HAL_ADC_ConfigChannel+0xc6>
      }
      else
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, sConfig->SamplingTime);
 8002880:	687b      	ldr	r3, [r7, #4]
 8002882:	6818      	ldr	r0, [r3, #0]
 8002884:	683b      	ldr	r3, [r7, #0]
 8002886:	6819      	ldr	r1, [r3, #0]
 8002888:	683b      	ldr	r3, [r7, #0]
 800288a:	689b      	ldr	r3, [r3, #8]
 800288c:	461a      	mov	r2, r3
 800288e:	f7ff fd0f 	bl	80022b0 <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
 8002892:	687b      	ldr	r3, [r7, #4]
 8002894:	681b      	ldr	r3, [r3, #0]
 8002896:	2100      	movs	r1, #0
 8002898:	4618      	mov	r0, r3
 800289a:	f7ff fccd 	bl	8002238 <LL_ADC_SetSamplingTimeCommonConfig>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 800289e:	683b      	ldr	r3, [r7, #0]
 80028a0:	695a      	ldr	r2, [r3, #20]
 80028a2:	687b      	ldr	r3, [r7, #4]
 80028a4:	681b      	ldr	r3, [r3, #0]
 80028a6:	68db      	ldr	r3, [r3, #12]
 80028a8:	08db      	lsrs	r3, r3, #3
 80028aa:	f003 0303 	and.w	r3, r3, #3
 80028ae:	005b      	lsls	r3, r3, #1
 80028b0:	fa02 f303 	lsl.w	r3, r2, r3
 80028b4:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88

      if (sConfig->OffsetNumber != ADC_OFFSET_NONE)
 80028b8:	683b      	ldr	r3, [r7, #0]
 80028ba:	691b      	ldr	r3, [r3, #16]
 80028bc:	2b04      	cmp	r3, #4
 80028be:	d022      	beq.n	8002906 <HAL_ADC_ConfigChannel+0x12e>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, sConfig->OffsetNumber, sConfig->Channel, tmpOffsetShifted);
 80028c0:	687b      	ldr	r3, [r7, #4]
 80028c2:	6818      	ldr	r0, [r3, #0]
 80028c4:	683b      	ldr	r3, [r7, #0]
 80028c6:	6919      	ldr	r1, [r3, #16]
 80028c8:	683b      	ldr	r3, [r7, #0]
 80028ca:	681a      	ldr	r2, [r3, #0]
 80028cc:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80028d0:	f7ff fc34 	bl	800213c <LL_ADC_SetOffset>

        assert_param(IS_ADC_OFFSET_SIGN(sConfig->OffsetSign));
        assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetSaturation));
        /* Set ADC selected offset sign & saturation */
        LL_ADC_SetOffsetSign(hadc->Instance, sConfig->OffsetNumber, sConfig->OffsetSign);
 80028d4:	687b      	ldr	r3, [r7, #4]
 80028d6:	6818      	ldr	r0, [r3, #0]
 80028d8:	683b      	ldr	r3, [r7, #0]
 80028da:	6919      	ldr	r1, [r3, #16]
 80028dc:	683b      	ldr	r3, [r7, #0]
 80028de:	699b      	ldr	r3, [r3, #24]
 80028e0:	461a      	mov	r2, r3
 80028e2:	f7ff fc79 	bl	80021d8 <LL_ADC_SetOffsetSign>
        LL_ADC_SetOffsetSaturation(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetSaturation == ENABLE) ? LL_ADC_OFFSET_SATURATION_ENABLE : LL_ADC_OFFSET_SATURATION_DISABLE);
 80028e6:	687b      	ldr	r3, [r7, #4]
 80028e8:	6818      	ldr	r0, [r3, #0]
 80028ea:	683b      	ldr	r3, [r7, #0]
 80028ec:	6919      	ldr	r1, [r3, #16]
 80028ee:	683b      	ldr	r3, [r7, #0]
 80028f0:	7f1b      	ldrb	r3, [r3, #28]
 80028f2:	2b01      	cmp	r3, #1
 80028f4:	d102      	bne.n	80028fc <HAL_ADC_ConfigChannel+0x124>
 80028f6:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80028fa:	e000      	b.n	80028fe <HAL_ADC_ConfigChannel+0x126>
 80028fc:	2300      	movs	r3, #0
 80028fe:	461a      	mov	r2, r3
 8002900:	f7ff fc82 	bl	8002208 <LL_ADC_SetOffsetSaturation>
 8002904:	e11d      	b.n	8002b42 <HAL_ADC_ConfigChannel+0x36a>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if(__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8002906:	687b      	ldr	r3, [r7, #4]
 8002908:	681b      	ldr	r3, [r3, #0]
 800290a:	2100      	movs	r1, #0
 800290c:	4618      	mov	r0, r3
 800290e:	f7ff fc37 	bl	8002180 <LL_ADC_GetOffsetChannel>
 8002912:	4603      	mov	r3, r0
 8002914:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002918:	2b00      	cmp	r3, #0
 800291a:	d10a      	bne.n	8002932 <HAL_ADC_ConfigChannel+0x15a>
 800291c:	687b      	ldr	r3, [r7, #4]
 800291e:	681b      	ldr	r3, [r3, #0]
 8002920:	2100      	movs	r1, #0
 8002922:	4618      	mov	r0, r3
 8002924:	f7ff fc2c 	bl	8002180 <LL_ADC_GetOffsetChannel>
 8002928:	4603      	mov	r3, r0
 800292a:	0e9b      	lsrs	r3, r3, #26
 800292c:	f003 021f 	and.w	r2, r3, #31
 8002930:	e012      	b.n	8002958 <HAL_ADC_ConfigChannel+0x180>
 8002932:	687b      	ldr	r3, [r7, #4]
 8002934:	681b      	ldr	r3, [r3, #0]
 8002936:	2100      	movs	r1, #0
 8002938:	4618      	mov	r0, r3
 800293a:	f7ff fc21 	bl	8002180 <LL_ADC_GetOffsetChannel>
 800293e:	4603      	mov	r3, r0
 8002940:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002944:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8002948:	fa93 f3a3 	rbit	r3, r3
 800294c:	67fb      	str	r3, [r7, #124]	; 0x7c
  return result;
 800294e:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8002950:	fab3 f383 	clz	r3, r3
 8002954:	b2db      	uxtb	r3, r3
 8002956:	461a      	mov	r2, r3
 8002958:	683b      	ldr	r3, [r7, #0]
 800295a:	681b      	ldr	r3, [r3, #0]
 800295c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002960:	2b00      	cmp	r3, #0
 8002962:	d105      	bne.n	8002970 <HAL_ADC_ConfigChannel+0x198>
 8002964:	683b      	ldr	r3, [r7, #0]
 8002966:	681b      	ldr	r3, [r3, #0]
 8002968:	0e9b      	lsrs	r3, r3, #26
 800296a:	f003 031f 	and.w	r3, r3, #31
 800296e:	e00a      	b.n	8002986 <HAL_ADC_ConfigChannel+0x1ae>
 8002970:	683b      	ldr	r3, [r7, #0]
 8002972:	681b      	ldr	r3, [r3, #0]
 8002974:	67bb      	str	r3, [r7, #120]	; 0x78
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002976:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8002978:	fa93 f3a3 	rbit	r3, r3
 800297c:	677b      	str	r3, [r7, #116]	; 0x74
  return result;
 800297e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002980:	fab3 f383 	clz	r3, r3
 8002984:	b2db      	uxtb	r3, r3
 8002986:	429a      	cmp	r2, r3
 8002988:	d106      	bne.n	8002998 <HAL_ADC_ConfigChannel+0x1c0>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 800298a:	687b      	ldr	r3, [r7, #4]
 800298c:	681b      	ldr	r3, [r3, #0]
 800298e:	2200      	movs	r2, #0
 8002990:	2100      	movs	r1, #0
 8002992:	4618      	mov	r0, r3
 8002994:	f7ff fc08 	bl	80021a8 <LL_ADC_SetOffsetState>
        }
        if(__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8002998:	687b      	ldr	r3, [r7, #4]
 800299a:	681b      	ldr	r3, [r3, #0]
 800299c:	2101      	movs	r1, #1
 800299e:	4618      	mov	r0, r3
 80029a0:	f7ff fbee 	bl	8002180 <LL_ADC_GetOffsetChannel>
 80029a4:	4603      	mov	r3, r0
 80029a6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80029aa:	2b00      	cmp	r3, #0
 80029ac:	d10a      	bne.n	80029c4 <HAL_ADC_ConfigChannel+0x1ec>
 80029ae:	687b      	ldr	r3, [r7, #4]
 80029b0:	681b      	ldr	r3, [r3, #0]
 80029b2:	2101      	movs	r1, #1
 80029b4:	4618      	mov	r0, r3
 80029b6:	f7ff fbe3 	bl	8002180 <LL_ADC_GetOffsetChannel>
 80029ba:	4603      	mov	r3, r0
 80029bc:	0e9b      	lsrs	r3, r3, #26
 80029be:	f003 021f 	and.w	r2, r3, #31
 80029c2:	e010      	b.n	80029e6 <HAL_ADC_ConfigChannel+0x20e>
 80029c4:	687b      	ldr	r3, [r7, #4]
 80029c6:	681b      	ldr	r3, [r3, #0]
 80029c8:	2101      	movs	r1, #1
 80029ca:	4618      	mov	r0, r3
 80029cc:	f7ff fbd8 	bl	8002180 <LL_ADC_GetOffsetChannel>
 80029d0:	4603      	mov	r3, r0
 80029d2:	673b      	str	r3, [r7, #112]	; 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80029d4:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80029d6:	fa93 f3a3 	rbit	r3, r3
 80029da:	66fb      	str	r3, [r7, #108]	; 0x6c
  return result;
 80029dc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80029de:	fab3 f383 	clz	r3, r3
 80029e2:	b2db      	uxtb	r3, r3
 80029e4:	461a      	mov	r2, r3
 80029e6:	683b      	ldr	r3, [r7, #0]
 80029e8:	681b      	ldr	r3, [r3, #0]
 80029ea:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80029ee:	2b00      	cmp	r3, #0
 80029f0:	d105      	bne.n	80029fe <HAL_ADC_ConfigChannel+0x226>
 80029f2:	683b      	ldr	r3, [r7, #0]
 80029f4:	681b      	ldr	r3, [r3, #0]
 80029f6:	0e9b      	lsrs	r3, r3, #26
 80029f8:	f003 031f 	and.w	r3, r3, #31
 80029fc:	e00a      	b.n	8002a14 <HAL_ADC_ConfigChannel+0x23c>
 80029fe:	683b      	ldr	r3, [r7, #0]
 8002a00:	681b      	ldr	r3, [r3, #0]
 8002a02:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002a04:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8002a06:	fa93 f3a3 	rbit	r3, r3
 8002a0a:	667b      	str	r3, [r7, #100]	; 0x64
  return result;
 8002a0c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8002a0e:	fab3 f383 	clz	r3, r3
 8002a12:	b2db      	uxtb	r3, r3
 8002a14:	429a      	cmp	r2, r3
 8002a16:	d106      	bne.n	8002a26 <HAL_ADC_ConfigChannel+0x24e>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 8002a18:	687b      	ldr	r3, [r7, #4]
 8002a1a:	681b      	ldr	r3, [r3, #0]
 8002a1c:	2200      	movs	r2, #0
 8002a1e:	2101      	movs	r1, #1
 8002a20:	4618      	mov	r0, r3
 8002a22:	f7ff fbc1 	bl	80021a8 <LL_ADC_SetOffsetState>
        }
        if(__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8002a26:	687b      	ldr	r3, [r7, #4]
 8002a28:	681b      	ldr	r3, [r3, #0]
 8002a2a:	2102      	movs	r1, #2
 8002a2c:	4618      	mov	r0, r3
 8002a2e:	f7ff fba7 	bl	8002180 <LL_ADC_GetOffsetChannel>
 8002a32:	4603      	mov	r3, r0
 8002a34:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002a38:	2b00      	cmp	r3, #0
 8002a3a:	d10a      	bne.n	8002a52 <HAL_ADC_ConfigChannel+0x27a>
 8002a3c:	687b      	ldr	r3, [r7, #4]
 8002a3e:	681b      	ldr	r3, [r3, #0]
 8002a40:	2102      	movs	r1, #2
 8002a42:	4618      	mov	r0, r3
 8002a44:	f7ff fb9c 	bl	8002180 <LL_ADC_GetOffsetChannel>
 8002a48:	4603      	mov	r3, r0
 8002a4a:	0e9b      	lsrs	r3, r3, #26
 8002a4c:	f003 021f 	and.w	r2, r3, #31
 8002a50:	e010      	b.n	8002a74 <HAL_ADC_ConfigChannel+0x29c>
 8002a52:	687b      	ldr	r3, [r7, #4]
 8002a54:	681b      	ldr	r3, [r3, #0]
 8002a56:	2102      	movs	r1, #2
 8002a58:	4618      	mov	r0, r3
 8002a5a:	f7ff fb91 	bl	8002180 <LL_ADC_GetOffsetChannel>
 8002a5e:	4603      	mov	r3, r0
 8002a60:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002a62:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8002a64:	fa93 f3a3 	rbit	r3, r3
 8002a68:	65fb      	str	r3, [r7, #92]	; 0x5c
  return result;
 8002a6a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002a6c:	fab3 f383 	clz	r3, r3
 8002a70:	b2db      	uxtb	r3, r3
 8002a72:	461a      	mov	r2, r3
 8002a74:	683b      	ldr	r3, [r7, #0]
 8002a76:	681b      	ldr	r3, [r3, #0]
 8002a78:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002a7c:	2b00      	cmp	r3, #0
 8002a7e:	d105      	bne.n	8002a8c <HAL_ADC_ConfigChannel+0x2b4>
 8002a80:	683b      	ldr	r3, [r7, #0]
 8002a82:	681b      	ldr	r3, [r3, #0]
 8002a84:	0e9b      	lsrs	r3, r3, #26
 8002a86:	f003 031f 	and.w	r3, r3, #31
 8002a8a:	e00a      	b.n	8002aa2 <HAL_ADC_ConfigChannel+0x2ca>
 8002a8c:	683b      	ldr	r3, [r7, #0]
 8002a8e:	681b      	ldr	r3, [r3, #0]
 8002a90:	65bb      	str	r3, [r7, #88]	; 0x58
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002a92:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002a94:	fa93 f3a3 	rbit	r3, r3
 8002a98:	657b      	str	r3, [r7, #84]	; 0x54
  return result;
 8002a9a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002a9c:	fab3 f383 	clz	r3, r3
 8002aa0:	b2db      	uxtb	r3, r3
 8002aa2:	429a      	cmp	r2, r3
 8002aa4:	d106      	bne.n	8002ab4 <HAL_ADC_ConfigChannel+0x2dc>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 8002aa6:	687b      	ldr	r3, [r7, #4]
 8002aa8:	681b      	ldr	r3, [r3, #0]
 8002aaa:	2200      	movs	r2, #0
 8002aac:	2102      	movs	r1, #2
 8002aae:	4618      	mov	r0, r3
 8002ab0:	f7ff fb7a 	bl	80021a8 <LL_ADC_SetOffsetState>
        }
        if(__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8002ab4:	687b      	ldr	r3, [r7, #4]
 8002ab6:	681b      	ldr	r3, [r3, #0]
 8002ab8:	2103      	movs	r1, #3
 8002aba:	4618      	mov	r0, r3
 8002abc:	f7ff fb60 	bl	8002180 <LL_ADC_GetOffsetChannel>
 8002ac0:	4603      	mov	r3, r0
 8002ac2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002ac6:	2b00      	cmp	r3, #0
 8002ac8:	d10a      	bne.n	8002ae0 <HAL_ADC_ConfigChannel+0x308>
 8002aca:	687b      	ldr	r3, [r7, #4]
 8002acc:	681b      	ldr	r3, [r3, #0]
 8002ace:	2103      	movs	r1, #3
 8002ad0:	4618      	mov	r0, r3
 8002ad2:	f7ff fb55 	bl	8002180 <LL_ADC_GetOffsetChannel>
 8002ad6:	4603      	mov	r3, r0
 8002ad8:	0e9b      	lsrs	r3, r3, #26
 8002ada:	f003 021f 	and.w	r2, r3, #31
 8002ade:	e010      	b.n	8002b02 <HAL_ADC_ConfigChannel+0x32a>
 8002ae0:	687b      	ldr	r3, [r7, #4]
 8002ae2:	681b      	ldr	r3, [r3, #0]
 8002ae4:	2103      	movs	r1, #3
 8002ae6:	4618      	mov	r0, r3
 8002ae8:	f7ff fb4a 	bl	8002180 <LL_ADC_GetOffsetChannel>
 8002aec:	4603      	mov	r3, r0
 8002aee:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002af0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002af2:	fa93 f3a3 	rbit	r3, r3
 8002af6:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 8002af8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002afa:	fab3 f383 	clz	r3, r3
 8002afe:	b2db      	uxtb	r3, r3
 8002b00:	461a      	mov	r2, r3
 8002b02:	683b      	ldr	r3, [r7, #0]
 8002b04:	681b      	ldr	r3, [r3, #0]
 8002b06:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002b0a:	2b00      	cmp	r3, #0
 8002b0c:	d105      	bne.n	8002b1a <HAL_ADC_ConfigChannel+0x342>
 8002b0e:	683b      	ldr	r3, [r7, #0]
 8002b10:	681b      	ldr	r3, [r3, #0]
 8002b12:	0e9b      	lsrs	r3, r3, #26
 8002b14:	f003 031f 	and.w	r3, r3, #31
 8002b18:	e00a      	b.n	8002b30 <HAL_ADC_ConfigChannel+0x358>
 8002b1a:	683b      	ldr	r3, [r7, #0]
 8002b1c:	681b      	ldr	r3, [r3, #0]
 8002b1e:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002b20:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002b22:	fa93 f3a3 	rbit	r3, r3
 8002b26:	647b      	str	r3, [r7, #68]	; 0x44
  return result;
 8002b28:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002b2a:	fab3 f383 	clz	r3, r3
 8002b2e:	b2db      	uxtb	r3, r3
 8002b30:	429a      	cmp	r2, r3
 8002b32:	d106      	bne.n	8002b42 <HAL_ADC_ConfigChannel+0x36a>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 8002b34:	687b      	ldr	r3, [r7, #4]
 8002b36:	681b      	ldr	r3, [r3, #0]
 8002b38:	2200      	movs	r2, #0
 8002b3a:	2103      	movs	r1, #3
 8002b3c:	4618      	mov	r0, r3
 8002b3e:	f7ff fb33 	bl	80021a8 <LL_ADC_SetOffsetState>
    }

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002b42:	687b      	ldr	r3, [r7, #4]
 8002b44:	681b      	ldr	r3, [r3, #0]
 8002b46:	4618      	mov	r0, r3
 8002b48:	f7ff fc4c 	bl	80023e4 <LL_ADC_IsEnabled>
 8002b4c:	4603      	mov	r3, r0
 8002b4e:	2b00      	cmp	r3, #0
 8002b50:	f040 810c 	bne.w	8002d6c <HAL_ADC_ConfigChannel+0x594>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfig->Channel, sConfig->SingleDiff);
 8002b54:	687b      	ldr	r3, [r7, #4]
 8002b56:	6818      	ldr	r0, [r3, #0]
 8002b58:	683b      	ldr	r3, [r7, #0]
 8002b5a:	6819      	ldr	r1, [r3, #0]
 8002b5c:	683b      	ldr	r3, [r7, #0]
 8002b5e:	68db      	ldr	r3, [r3, #12]
 8002b60:	461a      	mov	r2, r3
 8002b62:	f7ff fbcd 	bl	8002300 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (sConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 8002b66:	683b      	ldr	r3, [r7, #0]
 8002b68:	68db      	ldr	r3, [r3, #12]
 8002b6a:	4aaf      	ldr	r2, [pc, #700]	; (8002e28 <HAL_ADC_ConfigChannel+0x650>)
 8002b6c:	4293      	cmp	r3, r2
 8002b6e:	f040 80fd 	bne.w	8002d6c <HAL_ADC_ConfigChannel+0x594>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002b72:	687b      	ldr	r3, [r7, #4]
 8002b74:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8002b76:	683b      	ldr	r3, [r7, #0]
 8002b78:	681b      	ldr	r3, [r3, #0]
 8002b7a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002b7e:	2b00      	cmp	r3, #0
 8002b80:	d10b      	bne.n	8002b9a <HAL_ADC_ConfigChannel+0x3c2>
 8002b82:	683b      	ldr	r3, [r7, #0]
 8002b84:	681b      	ldr	r3, [r3, #0]
 8002b86:	0e9b      	lsrs	r3, r3, #26
 8002b88:	3301      	adds	r3, #1
 8002b8a:	f003 031f 	and.w	r3, r3, #31
 8002b8e:	2b09      	cmp	r3, #9
 8002b90:	bf94      	ite	ls
 8002b92:	2301      	movls	r3, #1
 8002b94:	2300      	movhi	r3, #0
 8002b96:	b2db      	uxtb	r3, r3
 8002b98:	e012      	b.n	8002bc0 <HAL_ADC_ConfigChannel+0x3e8>
 8002b9a:	683b      	ldr	r3, [r7, #0]
 8002b9c:	681b      	ldr	r3, [r3, #0]
 8002b9e:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002ba0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002ba2:	fa93 f3a3 	rbit	r3, r3
 8002ba6:	63fb      	str	r3, [r7, #60]	; 0x3c
  return result;
 8002ba8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002baa:	fab3 f383 	clz	r3, r3
 8002bae:	b2db      	uxtb	r3, r3
 8002bb0:	3301      	adds	r3, #1
 8002bb2:	f003 031f 	and.w	r3, r3, #31
 8002bb6:	2b09      	cmp	r3, #9
 8002bb8:	bf94      	ite	ls
 8002bba:	2301      	movls	r3, #1
 8002bbc:	2300      	movhi	r3, #0
 8002bbe:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002bc0:	2b00      	cmp	r3, #0
 8002bc2:	d064      	beq.n	8002c8e <HAL_ADC_ConfigChannel+0x4b6>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8002bc4:	683b      	ldr	r3, [r7, #0]
 8002bc6:	681b      	ldr	r3, [r3, #0]
 8002bc8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002bcc:	2b00      	cmp	r3, #0
 8002bce:	d107      	bne.n	8002be0 <HAL_ADC_ConfigChannel+0x408>
 8002bd0:	683b      	ldr	r3, [r7, #0]
 8002bd2:	681b      	ldr	r3, [r3, #0]
 8002bd4:	0e9b      	lsrs	r3, r3, #26
 8002bd6:	3301      	adds	r3, #1
 8002bd8:	069b      	lsls	r3, r3, #26
 8002bda:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002bde:	e00e      	b.n	8002bfe <HAL_ADC_ConfigChannel+0x426>
 8002be0:	683b      	ldr	r3, [r7, #0]
 8002be2:	681b      	ldr	r3, [r3, #0]
 8002be4:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002be6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002be8:	fa93 f3a3 	rbit	r3, r3
 8002bec:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 8002bee:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002bf0:	fab3 f383 	clz	r3, r3
 8002bf4:	b2db      	uxtb	r3, r3
 8002bf6:	3301      	adds	r3, #1
 8002bf8:	069b      	lsls	r3, r3, #26
 8002bfa:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002bfe:	683b      	ldr	r3, [r7, #0]
 8002c00:	681b      	ldr	r3, [r3, #0]
 8002c02:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002c06:	2b00      	cmp	r3, #0
 8002c08:	d109      	bne.n	8002c1e <HAL_ADC_ConfigChannel+0x446>
 8002c0a:	683b      	ldr	r3, [r7, #0]
 8002c0c:	681b      	ldr	r3, [r3, #0]
 8002c0e:	0e9b      	lsrs	r3, r3, #26
 8002c10:	3301      	adds	r3, #1
 8002c12:	f003 031f 	and.w	r3, r3, #31
 8002c16:	2101      	movs	r1, #1
 8002c18:	fa01 f303 	lsl.w	r3, r1, r3
 8002c1c:	e010      	b.n	8002c40 <HAL_ADC_ConfigChannel+0x468>
 8002c1e:	683b      	ldr	r3, [r7, #0]
 8002c20:	681b      	ldr	r3, [r3, #0]
 8002c22:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002c24:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002c26:	fa93 f3a3 	rbit	r3, r3
 8002c2a:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 8002c2c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002c2e:	fab3 f383 	clz	r3, r3
 8002c32:	b2db      	uxtb	r3, r3
 8002c34:	3301      	adds	r3, #1
 8002c36:	f003 031f 	and.w	r3, r3, #31
 8002c3a:	2101      	movs	r1, #1
 8002c3c:	fa01 f303 	lsl.w	r3, r1, r3
 8002c40:	ea42 0103 	orr.w	r1, r2, r3
 8002c44:	683b      	ldr	r3, [r7, #0]
 8002c46:	681b      	ldr	r3, [r3, #0]
 8002c48:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002c4c:	2b00      	cmp	r3, #0
 8002c4e:	d10a      	bne.n	8002c66 <HAL_ADC_ConfigChannel+0x48e>
 8002c50:	683b      	ldr	r3, [r7, #0]
 8002c52:	681b      	ldr	r3, [r3, #0]
 8002c54:	0e9b      	lsrs	r3, r3, #26
 8002c56:	3301      	adds	r3, #1
 8002c58:	f003 021f 	and.w	r2, r3, #31
 8002c5c:	4613      	mov	r3, r2
 8002c5e:	005b      	lsls	r3, r3, #1
 8002c60:	4413      	add	r3, r2
 8002c62:	051b      	lsls	r3, r3, #20
 8002c64:	e011      	b.n	8002c8a <HAL_ADC_ConfigChannel+0x4b2>
 8002c66:	683b      	ldr	r3, [r7, #0]
 8002c68:	681b      	ldr	r3, [r3, #0]
 8002c6a:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002c6c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002c6e:	fa93 f3a3 	rbit	r3, r3
 8002c72:	627b      	str	r3, [r7, #36]	; 0x24
  return result;
 8002c74:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c76:	fab3 f383 	clz	r3, r3
 8002c7a:	b2db      	uxtb	r3, r3
 8002c7c:	3301      	adds	r3, #1
 8002c7e:	f003 021f 	and.w	r2, r3, #31
 8002c82:	4613      	mov	r3, r2
 8002c84:	005b      	lsls	r3, r3, #1
 8002c86:	4413      	add	r3, r2
 8002c88:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002c8a:	430b      	orrs	r3, r1
 8002c8c:	e069      	b.n	8002d62 <HAL_ADC_ConfigChannel+0x58a>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8002c8e:	683b      	ldr	r3, [r7, #0]
 8002c90:	681b      	ldr	r3, [r3, #0]
 8002c92:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002c96:	2b00      	cmp	r3, #0
 8002c98:	d107      	bne.n	8002caa <HAL_ADC_ConfigChannel+0x4d2>
 8002c9a:	683b      	ldr	r3, [r7, #0]
 8002c9c:	681b      	ldr	r3, [r3, #0]
 8002c9e:	0e9b      	lsrs	r3, r3, #26
 8002ca0:	3301      	adds	r3, #1
 8002ca2:	069b      	lsls	r3, r3, #26
 8002ca4:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002ca8:	e00e      	b.n	8002cc8 <HAL_ADC_ConfigChannel+0x4f0>
 8002caa:	683b      	ldr	r3, [r7, #0]
 8002cac:	681b      	ldr	r3, [r3, #0]
 8002cae:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002cb0:	6a3b      	ldr	r3, [r7, #32]
 8002cb2:	fa93 f3a3 	rbit	r3, r3
 8002cb6:	61fb      	str	r3, [r7, #28]
  return result;
 8002cb8:	69fb      	ldr	r3, [r7, #28]
 8002cba:	fab3 f383 	clz	r3, r3
 8002cbe:	b2db      	uxtb	r3, r3
 8002cc0:	3301      	adds	r3, #1
 8002cc2:	069b      	lsls	r3, r3, #26
 8002cc4:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002cc8:	683b      	ldr	r3, [r7, #0]
 8002cca:	681b      	ldr	r3, [r3, #0]
 8002ccc:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002cd0:	2b00      	cmp	r3, #0
 8002cd2:	d109      	bne.n	8002ce8 <HAL_ADC_ConfigChannel+0x510>
 8002cd4:	683b      	ldr	r3, [r7, #0]
 8002cd6:	681b      	ldr	r3, [r3, #0]
 8002cd8:	0e9b      	lsrs	r3, r3, #26
 8002cda:	3301      	adds	r3, #1
 8002cdc:	f003 031f 	and.w	r3, r3, #31
 8002ce0:	2101      	movs	r1, #1
 8002ce2:	fa01 f303 	lsl.w	r3, r1, r3
 8002ce6:	e010      	b.n	8002d0a <HAL_ADC_ConfigChannel+0x532>
 8002ce8:	683b      	ldr	r3, [r7, #0]
 8002cea:	681b      	ldr	r3, [r3, #0]
 8002cec:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002cee:	69bb      	ldr	r3, [r7, #24]
 8002cf0:	fa93 f3a3 	rbit	r3, r3
 8002cf4:	617b      	str	r3, [r7, #20]
  return result;
 8002cf6:	697b      	ldr	r3, [r7, #20]
 8002cf8:	fab3 f383 	clz	r3, r3
 8002cfc:	b2db      	uxtb	r3, r3
 8002cfe:	3301      	adds	r3, #1
 8002d00:	f003 031f 	and.w	r3, r3, #31
 8002d04:	2101      	movs	r1, #1
 8002d06:	fa01 f303 	lsl.w	r3, r1, r3
 8002d0a:	ea42 0103 	orr.w	r1, r2, r3
 8002d0e:	683b      	ldr	r3, [r7, #0]
 8002d10:	681b      	ldr	r3, [r3, #0]
 8002d12:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002d16:	2b00      	cmp	r3, #0
 8002d18:	d10d      	bne.n	8002d36 <HAL_ADC_ConfigChannel+0x55e>
 8002d1a:	683b      	ldr	r3, [r7, #0]
 8002d1c:	681b      	ldr	r3, [r3, #0]
 8002d1e:	0e9b      	lsrs	r3, r3, #26
 8002d20:	3301      	adds	r3, #1
 8002d22:	f003 021f 	and.w	r2, r3, #31
 8002d26:	4613      	mov	r3, r2
 8002d28:	005b      	lsls	r3, r3, #1
 8002d2a:	4413      	add	r3, r2
 8002d2c:	3b1e      	subs	r3, #30
 8002d2e:	051b      	lsls	r3, r3, #20
 8002d30:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8002d34:	e014      	b.n	8002d60 <HAL_ADC_ConfigChannel+0x588>
 8002d36:	683b      	ldr	r3, [r7, #0]
 8002d38:	681b      	ldr	r3, [r3, #0]
 8002d3a:	613b      	str	r3, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002d3c:	693b      	ldr	r3, [r7, #16]
 8002d3e:	fa93 f3a3 	rbit	r3, r3
 8002d42:	60fb      	str	r3, [r7, #12]
  return result;
 8002d44:	68fb      	ldr	r3, [r7, #12]
 8002d46:	fab3 f383 	clz	r3, r3
 8002d4a:	b2db      	uxtb	r3, r3
 8002d4c:	3301      	adds	r3, #1
 8002d4e:	f003 021f 	and.w	r2, r3, #31
 8002d52:	4613      	mov	r3, r2
 8002d54:	005b      	lsls	r3, r3, #1
 8002d56:	4413      	add	r3, r2
 8002d58:	3b1e      	subs	r3, #30
 8002d5a:	051b      	lsls	r3, r3, #20
 8002d5c:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002d60:	430b      	orrs	r3, r1
 8002d62:	683a      	ldr	r2, [r7, #0]
 8002d64:	6892      	ldr	r2, [r2, #8]
 8002d66:	4619      	mov	r1, r3
 8002d68:	f7ff faa2 	bl	80022b0 <LL_ADC_SetChannelSamplingTime>
    /* If internal channel selected, enable dedicated internal buffers and    */
    /* paths.                                                                 */
    /* Note: these internal measurement paths can be disabled using           */
    /* HAL_ADC_DeInit().                                                      */

    if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 8002d6c:	683b      	ldr	r3, [r7, #0]
 8002d6e:	681a      	ldr	r2, [r3, #0]
 8002d70:	4b2e      	ldr	r3, [pc, #184]	; (8002e2c <HAL_ADC_ConfigChannel+0x654>)
 8002d72:	4013      	ands	r3, r2
 8002d74:	2b00      	cmp	r3, #0
 8002d76:	f000 80c9 	beq.w	8002f0c <HAL_ADC_ConfigChannel+0x734>
    {
      tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8002d7a:	687b      	ldr	r3, [r7, #4]
 8002d7c:	681b      	ldr	r3, [r3, #0]
 8002d7e:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002d82:	d004      	beq.n	8002d8e <HAL_ADC_ConfigChannel+0x5b6>
 8002d84:	687b      	ldr	r3, [r7, #4]
 8002d86:	681b      	ldr	r3, [r3, #0]
 8002d88:	4a29      	ldr	r2, [pc, #164]	; (8002e30 <HAL_ADC_ConfigChannel+0x658>)
 8002d8a:	4293      	cmp	r3, r2
 8002d8c:	d101      	bne.n	8002d92 <HAL_ADC_ConfigChannel+0x5ba>
 8002d8e:	4b29      	ldr	r3, [pc, #164]	; (8002e34 <HAL_ADC_ConfigChannel+0x65c>)
 8002d90:	e000      	b.n	8002d94 <HAL_ADC_ConfigChannel+0x5bc>
 8002d92:	4b29      	ldr	r3, [pc, #164]	; (8002e38 <HAL_ADC_ConfigChannel+0x660>)
 8002d94:	4618      	mov	r0, r3
 8002d96:	f7ff f9c3 	bl	8002120 <LL_ADC_GetCommonPathInternalCh>
 8002d9a:	f8c7 0084 	str.w	r0, [r7, #132]	; 0x84

      /* If the requested internal measurement path has already been enabled, */
      /* bypass the configuration processing.                                 */
      if (((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR_ADC1) || (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR_ADC5))
 8002d9e:	683b      	ldr	r3, [r7, #0]
 8002da0:	681b      	ldr	r3, [r3, #0]
 8002da2:	4a26      	ldr	r2, [pc, #152]	; (8002e3c <HAL_ADC_ConfigChannel+0x664>)
 8002da4:	4293      	cmp	r3, r2
 8002da6:	d004      	beq.n	8002db2 <HAL_ADC_ConfigChannel+0x5da>
 8002da8:	683b      	ldr	r3, [r7, #0]
 8002daa:	681b      	ldr	r3, [r3, #0]
 8002dac:	4a24      	ldr	r2, [pc, #144]	; (8002e40 <HAL_ADC_ConfigChannel+0x668>)
 8002dae:	4293      	cmp	r3, r2
 8002db0:	d14e      	bne.n	8002e50 <HAL_ADC_ConfigChannel+0x678>
          && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8002db2:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8002db6:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8002dba:	2b00      	cmp	r3, #0
 8002dbc:	d148      	bne.n	8002e50 <HAL_ADC_ConfigChannel+0x678>
      {
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8002dbe:	687b      	ldr	r3, [r7, #4]
 8002dc0:	681b      	ldr	r3, [r3, #0]
 8002dc2:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002dc6:	d005      	beq.n	8002dd4 <HAL_ADC_ConfigChannel+0x5fc>
 8002dc8:	687b      	ldr	r3, [r7, #4]
 8002dca:	681b      	ldr	r3, [r3, #0]
 8002dcc:	4a1d      	ldr	r2, [pc, #116]	; (8002e44 <HAL_ADC_ConfigChannel+0x66c>)
 8002dce:	4293      	cmp	r3, r2
 8002dd0:	f040 8099 	bne.w	8002f06 <HAL_ADC_ConfigChannel+0x72e>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8002dd4:	687b      	ldr	r3, [r7, #4]
 8002dd6:	681b      	ldr	r3, [r3, #0]
 8002dd8:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002ddc:	d004      	beq.n	8002de8 <HAL_ADC_ConfigChannel+0x610>
 8002dde:	687b      	ldr	r3, [r7, #4]
 8002de0:	681b      	ldr	r3, [r3, #0]
 8002de2:	4a13      	ldr	r2, [pc, #76]	; (8002e30 <HAL_ADC_ConfigChannel+0x658>)
 8002de4:	4293      	cmp	r3, r2
 8002de6:	d101      	bne.n	8002dec <HAL_ADC_ConfigChannel+0x614>
 8002de8:	4a12      	ldr	r2, [pc, #72]	; (8002e34 <HAL_ADC_ConfigChannel+0x65c>)
 8002dea:	e000      	b.n	8002dee <HAL_ADC_ConfigChannel+0x616>
 8002dec:	4a12      	ldr	r2, [pc, #72]	; (8002e38 <HAL_ADC_ConfigChannel+0x660>)
 8002dee:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8002df2:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8002df6:	4619      	mov	r1, r3
 8002df8:	4610      	mov	r0, r2
 8002dfa:	f7ff f97e 	bl	80020fa <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * (SystemCoreClock / (100000UL * 2UL)));
 8002dfe:	4b12      	ldr	r3, [pc, #72]	; (8002e48 <HAL_ADC_ConfigChannel+0x670>)
 8002e00:	681b      	ldr	r3, [r3, #0]
 8002e02:	099b      	lsrs	r3, r3, #6
 8002e04:	4a11      	ldr	r2, [pc, #68]	; (8002e4c <HAL_ADC_ConfigChannel+0x674>)
 8002e06:	fba2 2303 	umull	r2, r3, r2, r3
 8002e0a:	099a      	lsrs	r2, r3, #6
 8002e0c:	4613      	mov	r3, r2
 8002e0e:	005b      	lsls	r3, r3, #1
 8002e10:	4413      	add	r3, r2
 8002e12:	009b      	lsls	r3, r3, #2
 8002e14:	60bb      	str	r3, [r7, #8]
          while (wait_loop_index != 0UL)
 8002e16:	e002      	b.n	8002e1e <HAL_ADC_ConfigChannel+0x646>
          {
            wait_loop_index--;
 8002e18:	68bb      	ldr	r3, [r7, #8]
 8002e1a:	3b01      	subs	r3, #1
 8002e1c:	60bb      	str	r3, [r7, #8]
          while (wait_loop_index != 0UL)
 8002e1e:	68bb      	ldr	r3, [r7, #8]
 8002e20:	2b00      	cmp	r3, #0
 8002e22:	d1f9      	bne.n	8002e18 <HAL_ADC_ConfigChannel+0x640>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8002e24:	e06f      	b.n	8002f06 <HAL_ADC_ConfigChannel+0x72e>
 8002e26:	bf00      	nop
 8002e28:	407f0000 	.word	0x407f0000
 8002e2c:	80080000 	.word	0x80080000
 8002e30:	50000100 	.word	0x50000100
 8002e34:	50000300 	.word	0x50000300
 8002e38:	50000700 	.word	0x50000700
 8002e3c:	c3210000 	.word	0xc3210000
 8002e40:	90c00010 	.word	0x90c00010
 8002e44:	50000600 	.word	0x50000600
 8002e48:	200003c4 	.word	0x200003c4
 8002e4c:	053e2d63 	.word	0x053e2d63
          }
        }
      }
      else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8002e50:	683b      	ldr	r3, [r7, #0]
 8002e52:	681b      	ldr	r3, [r3, #0]
 8002e54:	4a32      	ldr	r2, [pc, #200]	; (8002f20 <HAL_ADC_ConfigChannel+0x748>)
 8002e56:	4293      	cmp	r3, r2
 8002e58:	d125      	bne.n	8002ea6 <HAL_ADC_ConfigChannel+0x6ce>
 8002e5a:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8002e5e:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002e62:	2b00      	cmp	r3, #0
 8002e64:	d11f      	bne.n	8002ea6 <HAL_ADC_ConfigChannel+0x6ce>
      {
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8002e66:	687b      	ldr	r3, [r7, #4]
 8002e68:	681b      	ldr	r3, [r3, #0]
 8002e6a:	4a2e      	ldr	r2, [pc, #184]	; (8002f24 <HAL_ADC_ConfigChannel+0x74c>)
 8002e6c:	4293      	cmp	r3, r2
 8002e6e:	d104      	bne.n	8002e7a <HAL_ADC_ConfigChannel+0x6a2>
 8002e70:	687b      	ldr	r3, [r7, #4]
 8002e72:	681b      	ldr	r3, [r3, #0]
 8002e74:	4a2c      	ldr	r2, [pc, #176]	; (8002f28 <HAL_ADC_ConfigChannel+0x750>)
 8002e76:	4293      	cmp	r3, r2
 8002e78:	d047      	beq.n	8002f0a <HAL_ADC_ConfigChannel+0x732>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8002e7a:	687b      	ldr	r3, [r7, #4]
 8002e7c:	681b      	ldr	r3, [r3, #0]
 8002e7e:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002e82:	d004      	beq.n	8002e8e <HAL_ADC_ConfigChannel+0x6b6>
 8002e84:	687b      	ldr	r3, [r7, #4]
 8002e86:	681b      	ldr	r3, [r3, #0]
 8002e88:	4a26      	ldr	r2, [pc, #152]	; (8002f24 <HAL_ADC_ConfigChannel+0x74c>)
 8002e8a:	4293      	cmp	r3, r2
 8002e8c:	d101      	bne.n	8002e92 <HAL_ADC_ConfigChannel+0x6ba>
 8002e8e:	4a27      	ldr	r2, [pc, #156]	; (8002f2c <HAL_ADC_ConfigChannel+0x754>)
 8002e90:	e000      	b.n	8002e94 <HAL_ADC_ConfigChannel+0x6bc>
 8002e92:	4a27      	ldr	r2, [pc, #156]	; (8002f30 <HAL_ADC_ConfigChannel+0x758>)
 8002e94:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8002e98:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002e9c:	4619      	mov	r1, r3
 8002e9e:	4610      	mov	r0, r2
 8002ea0:	f7ff f92b 	bl	80020fa <LL_ADC_SetCommonPathInternalCh>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8002ea4:	e031      	b.n	8002f0a <HAL_ADC_ConfigChannel+0x732>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
      }
      else if ((sConfig->Channel == ADC_CHANNEL_VREFINT)
 8002ea6:	683b      	ldr	r3, [r7, #0]
 8002ea8:	681b      	ldr	r3, [r3, #0]
 8002eaa:	4a22      	ldr	r2, [pc, #136]	; (8002f34 <HAL_ADC_ConfigChannel+0x75c>)
 8002eac:	4293      	cmp	r3, r2
 8002eae:	d12d      	bne.n	8002f0c <HAL_ADC_ConfigChannel+0x734>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8002eb0:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8002eb4:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002eb8:	2b00      	cmp	r3, #0
 8002eba:	d127      	bne.n	8002f0c <HAL_ADC_ConfigChannel+0x734>
      {
        if (ADC_VREFINT_INSTANCE(hadc))
 8002ebc:	687b      	ldr	r3, [r7, #4]
 8002ebe:	681b      	ldr	r3, [r3, #0]
 8002ec0:	4a18      	ldr	r2, [pc, #96]	; (8002f24 <HAL_ADC_ConfigChannel+0x74c>)
 8002ec2:	4293      	cmp	r3, r2
 8002ec4:	d022      	beq.n	8002f0c <HAL_ADC_ConfigChannel+0x734>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8002ec6:	687b      	ldr	r3, [r7, #4]
 8002ec8:	681b      	ldr	r3, [r3, #0]
 8002eca:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002ece:	d004      	beq.n	8002eda <HAL_ADC_ConfigChannel+0x702>
 8002ed0:	687b      	ldr	r3, [r7, #4]
 8002ed2:	681b      	ldr	r3, [r3, #0]
 8002ed4:	4a13      	ldr	r2, [pc, #76]	; (8002f24 <HAL_ADC_ConfigChannel+0x74c>)
 8002ed6:	4293      	cmp	r3, r2
 8002ed8:	d101      	bne.n	8002ede <HAL_ADC_ConfigChannel+0x706>
 8002eda:	4a14      	ldr	r2, [pc, #80]	; (8002f2c <HAL_ADC_ConfigChannel+0x754>)
 8002edc:	e000      	b.n	8002ee0 <HAL_ADC_ConfigChannel+0x708>
 8002ede:	4a14      	ldr	r2, [pc, #80]	; (8002f30 <HAL_ADC_ConfigChannel+0x758>)
 8002ee0:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8002ee4:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8002ee8:	4619      	mov	r1, r3
 8002eea:	4610      	mov	r0, r2
 8002eec:	f7ff f905 	bl	80020fa <LL_ADC_SetCommonPathInternalCh>
 8002ef0:	e00c      	b.n	8002f0c <HAL_ADC_ConfigChannel+0x734>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002ef2:	687b      	ldr	r3, [r7, #4]
 8002ef4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002ef6:	f043 0220 	orr.w	r2, r3, #32
 8002efa:	687b      	ldr	r3, [r7, #4]
 8002efc:	65da      	str	r2, [r3, #92]	; 0x5c

    tmp_hal_status = HAL_ERROR;
 8002efe:	2301      	movs	r3, #1
 8002f00:	f887 3097 	strb.w	r3, [r7, #151]	; 0x97
 8002f04:	e002      	b.n	8002f0c <HAL_ADC_ConfigChannel+0x734>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8002f06:	bf00      	nop
 8002f08:	e000      	b.n	8002f0c <HAL_ADC_ConfigChannel+0x734>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8002f0a:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002f0c:	687b      	ldr	r3, [r7, #4]
 8002f0e:	2200      	movs	r2, #0
 8002f10:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

  /* Return function status */
  return tmp_hal_status;
 8002f14:	f897 3097 	ldrb.w	r3, [r7, #151]	; 0x97
}
 8002f18:	4618      	mov	r0, r3
 8002f1a:	3798      	adds	r7, #152	; 0x98
 8002f1c:	46bd      	mov	sp, r7
 8002f1e:	bd80      	pop	{r7, pc}
 8002f20:	c7520000 	.word	0xc7520000
 8002f24:	50000100 	.word	0x50000100
 8002f28:	50000500 	.word	0x50000500
 8002f2c:	50000300 	.word	0x50000300
 8002f30:	50000700 	.word	0x50000700
 8002f34:	cb840000 	.word	0xcb840000

08002f38 <LL_ADC_IsEnabled>:
{
 8002f38:	b480      	push	{r7}
 8002f3a:	b083      	sub	sp, #12
 8002f3c:	af00      	add	r7, sp, #0
 8002f3e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8002f40:	687b      	ldr	r3, [r7, #4]
 8002f42:	689b      	ldr	r3, [r3, #8]
 8002f44:	f003 0301 	and.w	r3, r3, #1
 8002f48:	2b01      	cmp	r3, #1
 8002f4a:	d101      	bne.n	8002f50 <LL_ADC_IsEnabled+0x18>
 8002f4c:	2301      	movs	r3, #1
 8002f4e:	e000      	b.n	8002f52 <LL_ADC_IsEnabled+0x1a>
 8002f50:	2300      	movs	r3, #0
}
 8002f52:	4618      	mov	r0, r3
 8002f54:	370c      	adds	r7, #12
 8002f56:	46bd      	mov	sp, r7
 8002f58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f5c:	4770      	bx	lr

08002f5e <LL_ADC_REG_IsConversionOngoing>:
{
 8002f5e:	b480      	push	{r7}
 8002f60:	b083      	sub	sp, #12
 8002f62:	af00      	add	r7, sp, #0
 8002f64:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8002f66:	687b      	ldr	r3, [r7, #4]
 8002f68:	689b      	ldr	r3, [r3, #8]
 8002f6a:	f003 0304 	and.w	r3, r3, #4
 8002f6e:	2b04      	cmp	r3, #4
 8002f70:	d101      	bne.n	8002f76 <LL_ADC_REG_IsConversionOngoing+0x18>
 8002f72:	2301      	movs	r3, #1
 8002f74:	e000      	b.n	8002f78 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8002f76:	2300      	movs	r3, #0
}
 8002f78:	4618      	mov	r0, r3
 8002f7a:	370c      	adds	r7, #12
 8002f7c:	46bd      	mov	sp, r7
 8002f7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f82:	4770      	bx	lr

08002f84 <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param multimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, ADC_MultiModeTypeDef *multimode)
{
 8002f84:	b590      	push	{r4, r7, lr}
 8002f86:	b0a1      	sub	sp, #132	; 0x84
 8002f88:	af00      	add	r7, sp, #0
 8002f8a:	6078      	str	r0, [r7, #4]
 8002f8c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002f8e:	2300      	movs	r3, #0
 8002f90:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
    assert_param(IS_ADC_DMA_ACCESS_MULTIMODE(multimode->DMAAccessMode));
    assert_param(IS_ADC_SAMPLING_DELAY(multimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8002f94:	687b      	ldr	r3, [r7, #4]
 8002f96:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 8002f9a:	2b01      	cmp	r3, #1
 8002f9c:	d101      	bne.n	8002fa2 <HAL_ADCEx_MultiModeConfigChannel+0x1e>
 8002f9e:	2302      	movs	r3, #2
 8002fa0:	e0e3      	b.n	800316a <HAL_ADCEx_MultiModeConfigChannel+0x1e6>
 8002fa2:	687b      	ldr	r3, [r7, #4]
 8002fa4:	2201      	movs	r2, #1
 8002fa6:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

  ADC_MULTI_SLAVE(hadc, &tmphadcSlave);
 8002faa:	687b      	ldr	r3, [r7, #4]
 8002fac:	681b      	ldr	r3, [r3, #0]
 8002fae:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002fb2:	d102      	bne.n	8002fba <HAL_ADCEx_MultiModeConfigChannel+0x36>
 8002fb4:	4b6f      	ldr	r3, [pc, #444]	; (8003174 <HAL_ADCEx_MultiModeConfigChannel+0x1f0>)
 8002fb6:	60bb      	str	r3, [r7, #8]
 8002fb8:	e009      	b.n	8002fce <HAL_ADCEx_MultiModeConfigChannel+0x4a>
 8002fba:	687b      	ldr	r3, [r7, #4]
 8002fbc:	681b      	ldr	r3, [r3, #0]
 8002fbe:	4a6e      	ldr	r2, [pc, #440]	; (8003178 <HAL_ADCEx_MultiModeConfigChannel+0x1f4>)
 8002fc0:	4293      	cmp	r3, r2
 8002fc2:	d102      	bne.n	8002fca <HAL_ADCEx_MultiModeConfigChannel+0x46>
 8002fc4:	4b6d      	ldr	r3, [pc, #436]	; (800317c <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 8002fc6:	60bb      	str	r3, [r7, #8]
 8002fc8:	e001      	b.n	8002fce <HAL_ADCEx_MultiModeConfigChannel+0x4a>
 8002fca:	2300      	movs	r3, #0
 8002fcc:	60bb      	str	r3, [r7, #8]

  if (tmphadcSlave.Instance == NULL)
 8002fce:	68bb      	ldr	r3, [r7, #8]
 8002fd0:	2b00      	cmp	r3, #0
 8002fd2:	d10b      	bne.n	8002fec <HAL_ADCEx_MultiModeConfigChannel+0x68>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002fd4:	687b      	ldr	r3, [r7, #4]
 8002fd6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002fd8:	f043 0220 	orr.w	r2, r3, #32
 8002fdc:	687b      	ldr	r3, [r7, #4]
 8002fde:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8002fe0:	687b      	ldr	r3, [r7, #4]
 8002fe2:	2200      	movs	r2, #0
 8002fe4:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

    return HAL_ERROR;
 8002fe8:	2301      	movs	r3, #1
 8002fea:	e0be      	b.n	800316a <HAL_ADCEx_MultiModeConfigChannel+0x1e6>
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DMA configuration                                           */
  /*  - Multimode DMA mode                                                    */
  tmphadcSlave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmphadcSlave)->Instance);
 8002fec:	68bb      	ldr	r3, [r7, #8]
 8002fee:	4618      	mov	r0, r3
 8002ff0:	f7ff ffb5 	bl	8002f5e <LL_ADC_REG_IsConversionOngoing>
 8002ff4:	67b8      	str	r0, [r7, #120]	; 0x78
  if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8002ff6:	687b      	ldr	r3, [r7, #4]
 8002ff8:	681b      	ldr	r3, [r3, #0]
 8002ffa:	4618      	mov	r0, r3
 8002ffc:	f7ff ffaf 	bl	8002f5e <LL_ADC_REG_IsConversionOngoing>
 8003000:	4603      	mov	r3, r0
 8003002:	2b00      	cmp	r3, #0
 8003004:	f040 80a0 	bne.w	8003148 <HAL_ADCEx_MultiModeConfigChannel+0x1c4>
      && (tmphadcSlave_conversion_on_going == 0UL))
 8003008:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800300a:	2b00      	cmp	r3, #0
 800300c:	f040 809c 	bne.w	8003148 <HAL_ADCEx_MultiModeConfigChannel+0x1c4>
  {
    /* Pointer to the common control register */
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 8003010:	687b      	ldr	r3, [r7, #4]
 8003012:	681b      	ldr	r3, [r3, #0]
 8003014:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8003018:	d004      	beq.n	8003024 <HAL_ADCEx_MultiModeConfigChannel+0xa0>
 800301a:	687b      	ldr	r3, [r7, #4]
 800301c:	681b      	ldr	r3, [r3, #0]
 800301e:	4a55      	ldr	r2, [pc, #340]	; (8003174 <HAL_ADCEx_MultiModeConfigChannel+0x1f0>)
 8003020:	4293      	cmp	r3, r2
 8003022:	d101      	bne.n	8003028 <HAL_ADCEx_MultiModeConfigChannel+0xa4>
 8003024:	4b56      	ldr	r3, [pc, #344]	; (8003180 <HAL_ADCEx_MultiModeConfigChannel+0x1fc>)
 8003026:	e000      	b.n	800302a <HAL_ADCEx_MultiModeConfigChannel+0xa6>
 8003028:	4b56      	ldr	r3, [pc, #344]	; (8003184 <HAL_ADCEx_MultiModeConfigChannel+0x200>)
 800302a:	677b      	str	r3, [r7, #116]	; 0x74

    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 800302c:	683b      	ldr	r3, [r7, #0]
 800302e:	681b      	ldr	r3, [r3, #0]
 8003030:	2b00      	cmp	r3, #0
 8003032:	d04b      	beq.n	80030cc <HAL_ADCEx_MultiModeConfigChannel+0x148>
    {
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG,
 8003034:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003036:	689b      	ldr	r3, [r3, #8]
 8003038:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800303c:	683b      	ldr	r3, [r7, #0]
 800303e:	6859      	ldr	r1, [r3, #4]
 8003040:	687b      	ldr	r3, [r7, #4]
 8003042:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8003046:	035b      	lsls	r3, r3, #13
 8003048:	430b      	orrs	r3, r1
 800304a:	431a      	orrs	r2, r3
 800304c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800304e:	609a      	str	r2, [r3, #8]
      /*      from 1 to 10 clock cycles for 10 bits,                              */
      /*      from 1 to 8 clock cycles for 8 bits                                 */
      /*      from 1 to 6 clock cycles for 6 bits                                 */
      /*    If a higher delay is selected, it will be clipped to maximum delay    */
      /*    range                                                                 */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8003050:	687b      	ldr	r3, [r7, #4]
 8003052:	681b      	ldr	r3, [r3, #0]
 8003054:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8003058:	d004      	beq.n	8003064 <HAL_ADCEx_MultiModeConfigChannel+0xe0>
 800305a:	687b      	ldr	r3, [r7, #4]
 800305c:	681b      	ldr	r3, [r3, #0]
 800305e:	4a45      	ldr	r2, [pc, #276]	; (8003174 <HAL_ADCEx_MultiModeConfigChannel+0x1f0>)
 8003060:	4293      	cmp	r3, r2
 8003062:	d10f      	bne.n	8003084 <HAL_ADCEx_MultiModeConfigChannel+0x100>
 8003064:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
 8003068:	f7ff ff66 	bl	8002f38 <LL_ADC_IsEnabled>
 800306c:	4604      	mov	r4, r0
 800306e:	4841      	ldr	r0, [pc, #260]	; (8003174 <HAL_ADCEx_MultiModeConfigChannel+0x1f0>)
 8003070:	f7ff ff62 	bl	8002f38 <LL_ADC_IsEnabled>
 8003074:	4603      	mov	r3, r0
 8003076:	4323      	orrs	r3, r4
 8003078:	2b00      	cmp	r3, #0
 800307a:	bf0c      	ite	eq
 800307c:	2301      	moveq	r3, #1
 800307e:	2300      	movne	r3, #0
 8003080:	b2db      	uxtb	r3, r3
 8003082:	e012      	b.n	80030aa <HAL_ADCEx_MultiModeConfigChannel+0x126>
 8003084:	483c      	ldr	r0, [pc, #240]	; (8003178 <HAL_ADCEx_MultiModeConfigChannel+0x1f4>)
 8003086:	f7ff ff57 	bl	8002f38 <LL_ADC_IsEnabled>
 800308a:	4604      	mov	r4, r0
 800308c:	483b      	ldr	r0, [pc, #236]	; (800317c <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 800308e:	f7ff ff53 	bl	8002f38 <LL_ADC_IsEnabled>
 8003092:	4603      	mov	r3, r0
 8003094:	431c      	orrs	r4, r3
 8003096:	483c      	ldr	r0, [pc, #240]	; (8003188 <HAL_ADCEx_MultiModeConfigChannel+0x204>)
 8003098:	f7ff ff4e 	bl	8002f38 <LL_ADC_IsEnabled>
 800309c:	4603      	mov	r3, r0
 800309e:	4323      	orrs	r3, r4
 80030a0:	2b00      	cmp	r3, #0
 80030a2:	bf0c      	ite	eq
 80030a4:	2301      	moveq	r3, #1
 80030a6:	2300      	movne	r3, #0
 80030a8:	b2db      	uxtb	r3, r3
 80030aa:	2b00      	cmp	r3, #0
 80030ac:	d056      	beq.n	800315c <HAL_ADCEx_MultiModeConfigChannel+0x1d8>
      {
        MODIFY_REG(tmpADC_Common->CCR,
 80030ae:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80030b0:	689b      	ldr	r3, [r3, #8]
 80030b2:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 80030b6:	f023 030f 	bic.w	r3, r3, #15
 80030ba:	683a      	ldr	r2, [r7, #0]
 80030bc:	6811      	ldr	r1, [r2, #0]
 80030be:	683a      	ldr	r2, [r7, #0]
 80030c0:	6892      	ldr	r2, [r2, #8]
 80030c2:	430a      	orrs	r2, r1
 80030c4:	431a      	orrs	r2, r3
 80030c6:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80030c8:	609a      	str	r2, [r3, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 80030ca:	e047      	b.n	800315c <HAL_ADCEx_MultiModeConfigChannel+0x1d8>
                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG);
 80030cc:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80030ce:	689b      	ldr	r3, [r3, #8]
 80030d0:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80030d4:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80030d6:	609a      	str	r2, [r3, #8]

      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 80030d8:	687b      	ldr	r3, [r7, #4]
 80030da:	681b      	ldr	r3, [r3, #0]
 80030dc:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80030e0:	d004      	beq.n	80030ec <HAL_ADCEx_MultiModeConfigChannel+0x168>
 80030e2:	687b      	ldr	r3, [r7, #4]
 80030e4:	681b      	ldr	r3, [r3, #0]
 80030e6:	4a23      	ldr	r2, [pc, #140]	; (8003174 <HAL_ADCEx_MultiModeConfigChannel+0x1f0>)
 80030e8:	4293      	cmp	r3, r2
 80030ea:	d10f      	bne.n	800310c <HAL_ADCEx_MultiModeConfigChannel+0x188>
 80030ec:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
 80030f0:	f7ff ff22 	bl	8002f38 <LL_ADC_IsEnabled>
 80030f4:	4604      	mov	r4, r0
 80030f6:	481f      	ldr	r0, [pc, #124]	; (8003174 <HAL_ADCEx_MultiModeConfigChannel+0x1f0>)
 80030f8:	f7ff ff1e 	bl	8002f38 <LL_ADC_IsEnabled>
 80030fc:	4603      	mov	r3, r0
 80030fe:	4323      	orrs	r3, r4
 8003100:	2b00      	cmp	r3, #0
 8003102:	bf0c      	ite	eq
 8003104:	2301      	moveq	r3, #1
 8003106:	2300      	movne	r3, #0
 8003108:	b2db      	uxtb	r3, r3
 800310a:	e012      	b.n	8003132 <HAL_ADCEx_MultiModeConfigChannel+0x1ae>
 800310c:	481a      	ldr	r0, [pc, #104]	; (8003178 <HAL_ADCEx_MultiModeConfigChannel+0x1f4>)
 800310e:	f7ff ff13 	bl	8002f38 <LL_ADC_IsEnabled>
 8003112:	4604      	mov	r4, r0
 8003114:	4819      	ldr	r0, [pc, #100]	; (800317c <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 8003116:	f7ff ff0f 	bl	8002f38 <LL_ADC_IsEnabled>
 800311a:	4603      	mov	r3, r0
 800311c:	431c      	orrs	r4, r3
 800311e:	481a      	ldr	r0, [pc, #104]	; (8003188 <HAL_ADCEx_MultiModeConfigChannel+0x204>)
 8003120:	f7ff ff0a 	bl	8002f38 <LL_ADC_IsEnabled>
 8003124:	4603      	mov	r3, r0
 8003126:	4323      	orrs	r3, r4
 8003128:	2b00      	cmp	r3, #0
 800312a:	bf0c      	ite	eq
 800312c:	2301      	moveq	r3, #1
 800312e:	2300      	movne	r3, #0
 8003130:	b2db      	uxtb	r3, r3
 8003132:	2b00      	cmp	r3, #0
 8003134:	d012      	beq.n	800315c <HAL_ADCEx_MultiModeConfigChannel+0x1d8>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 8003136:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003138:	689b      	ldr	r3, [r3, #8]
 800313a:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 800313e:	f023 030f 	bic.w	r3, r3, #15
 8003142:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 8003144:	6093      	str	r3, [r2, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8003146:	e009      	b.n	800315c <HAL_ADCEx_MultiModeConfigChannel+0x1d8>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003148:	687b      	ldr	r3, [r7, #4]
 800314a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800314c:	f043 0220 	orr.w	r2, r3, #32
 8003150:	687b      	ldr	r3, [r7, #4]
 8003152:	65da      	str	r2, [r3, #92]	; 0x5c

    tmp_hal_status = HAL_ERROR;
 8003154:	2301      	movs	r3, #1
 8003156:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
 800315a:	e000      	b.n	800315e <HAL_ADCEx_MultiModeConfigChannel+0x1da>
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 800315c:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800315e:	687b      	ldr	r3, [r7, #4]
 8003160:	2200      	movs	r2, #0
 8003162:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

  /* Return function status */
  return tmp_hal_status;
 8003166:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
}
 800316a:	4618      	mov	r0, r3
 800316c:	3784      	adds	r7, #132	; 0x84
 800316e:	46bd      	mov	sp, r7
 8003170:	bd90      	pop	{r4, r7, pc}
 8003172:	bf00      	nop
 8003174:	50000100 	.word	0x50000100
 8003178:	50000400 	.word	0x50000400
 800317c:	50000500 	.word	0x50000500
 8003180:	50000300 	.word	0x50000300
 8003184:	50000700 	.word	0x50000700
 8003188:	50000600 	.word	0x50000600

0800318c <LL_EXTI_EnableIT_0_31>:
{
 800318c:	b480      	push	{r7}
 800318e:	b083      	sub	sp, #12
 8003190:	af00      	add	r7, sp, #0
 8003192:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->IMR1, ExtiLine);
 8003194:	4b05      	ldr	r3, [pc, #20]	; (80031ac <LL_EXTI_EnableIT_0_31+0x20>)
 8003196:	681a      	ldr	r2, [r3, #0]
 8003198:	4904      	ldr	r1, [pc, #16]	; (80031ac <LL_EXTI_EnableIT_0_31+0x20>)
 800319a:	687b      	ldr	r3, [r7, #4]
 800319c:	4313      	orrs	r3, r2
 800319e:	600b      	str	r3, [r1, #0]
}
 80031a0:	bf00      	nop
 80031a2:	370c      	adds	r7, #12
 80031a4:	46bd      	mov	sp, r7
 80031a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031aa:	4770      	bx	lr
 80031ac:	40010400 	.word	0x40010400

080031b0 <LL_EXTI_EnableIT_32_63>:
{
 80031b0:	b480      	push	{r7}
 80031b2:	b083      	sub	sp, #12
 80031b4:	af00      	add	r7, sp, #0
 80031b6:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->IMR2, ExtiLine);
 80031b8:	4b05      	ldr	r3, [pc, #20]	; (80031d0 <LL_EXTI_EnableIT_32_63+0x20>)
 80031ba:	6a1a      	ldr	r2, [r3, #32]
 80031bc:	4904      	ldr	r1, [pc, #16]	; (80031d0 <LL_EXTI_EnableIT_32_63+0x20>)
 80031be:	687b      	ldr	r3, [r7, #4]
 80031c0:	4313      	orrs	r3, r2
 80031c2:	620b      	str	r3, [r1, #32]
}
 80031c4:	bf00      	nop
 80031c6:	370c      	adds	r7, #12
 80031c8:	46bd      	mov	sp, r7
 80031ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031ce:	4770      	bx	lr
 80031d0:	40010400 	.word	0x40010400

080031d4 <LL_EXTI_DisableIT_0_31>:
{
 80031d4:	b480      	push	{r7}
 80031d6:	b083      	sub	sp, #12
 80031d8:	af00      	add	r7, sp, #0
 80031da:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->IMR1, ExtiLine);
 80031dc:	4b06      	ldr	r3, [pc, #24]	; (80031f8 <LL_EXTI_DisableIT_0_31+0x24>)
 80031de:	681a      	ldr	r2, [r3, #0]
 80031e0:	687b      	ldr	r3, [r7, #4]
 80031e2:	43db      	mvns	r3, r3
 80031e4:	4904      	ldr	r1, [pc, #16]	; (80031f8 <LL_EXTI_DisableIT_0_31+0x24>)
 80031e6:	4013      	ands	r3, r2
 80031e8:	600b      	str	r3, [r1, #0]
}
 80031ea:	bf00      	nop
 80031ec:	370c      	adds	r7, #12
 80031ee:	46bd      	mov	sp, r7
 80031f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031f4:	4770      	bx	lr
 80031f6:	bf00      	nop
 80031f8:	40010400 	.word	0x40010400

080031fc <LL_EXTI_DisableIT_32_63>:
{
 80031fc:	b480      	push	{r7}
 80031fe:	b083      	sub	sp, #12
 8003200:	af00      	add	r7, sp, #0
 8003202:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->IMR2, ExtiLine);
 8003204:	4b06      	ldr	r3, [pc, #24]	; (8003220 <LL_EXTI_DisableIT_32_63+0x24>)
 8003206:	6a1a      	ldr	r2, [r3, #32]
 8003208:	687b      	ldr	r3, [r7, #4]
 800320a:	43db      	mvns	r3, r3
 800320c:	4904      	ldr	r1, [pc, #16]	; (8003220 <LL_EXTI_DisableIT_32_63+0x24>)
 800320e:	4013      	ands	r3, r2
 8003210:	620b      	str	r3, [r1, #32]
}
 8003212:	bf00      	nop
 8003214:	370c      	adds	r7, #12
 8003216:	46bd      	mov	sp, r7
 8003218:	f85d 7b04 	ldr.w	r7, [sp], #4
 800321c:	4770      	bx	lr
 800321e:	bf00      	nop
 8003220:	40010400 	.word	0x40010400

08003224 <LL_EXTI_EnableEvent_0_31>:
{
 8003224:	b480      	push	{r7}
 8003226:	b083      	sub	sp, #12
 8003228:	af00      	add	r7, sp, #0
 800322a:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->EMR1, ExtiLine);
 800322c:	4b05      	ldr	r3, [pc, #20]	; (8003244 <LL_EXTI_EnableEvent_0_31+0x20>)
 800322e:	685a      	ldr	r2, [r3, #4]
 8003230:	4904      	ldr	r1, [pc, #16]	; (8003244 <LL_EXTI_EnableEvent_0_31+0x20>)
 8003232:	687b      	ldr	r3, [r7, #4]
 8003234:	4313      	orrs	r3, r2
 8003236:	604b      	str	r3, [r1, #4]
}
 8003238:	bf00      	nop
 800323a:	370c      	adds	r7, #12
 800323c:	46bd      	mov	sp, r7
 800323e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003242:	4770      	bx	lr
 8003244:	40010400 	.word	0x40010400

08003248 <LL_EXTI_EnableEvent_32_63>:
{
 8003248:	b480      	push	{r7}
 800324a:	b083      	sub	sp, #12
 800324c:	af00      	add	r7, sp, #0
 800324e:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->EMR2, ExtiLine);
 8003250:	4b05      	ldr	r3, [pc, #20]	; (8003268 <LL_EXTI_EnableEvent_32_63+0x20>)
 8003252:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003254:	4904      	ldr	r1, [pc, #16]	; (8003268 <LL_EXTI_EnableEvent_32_63+0x20>)
 8003256:	687b      	ldr	r3, [r7, #4]
 8003258:	4313      	orrs	r3, r2
 800325a:	624b      	str	r3, [r1, #36]	; 0x24
}
 800325c:	bf00      	nop
 800325e:	370c      	adds	r7, #12
 8003260:	46bd      	mov	sp, r7
 8003262:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003266:	4770      	bx	lr
 8003268:	40010400 	.word	0x40010400

0800326c <LL_EXTI_DisableEvent_0_31>:
{
 800326c:	b480      	push	{r7}
 800326e:	b083      	sub	sp, #12
 8003270:	af00      	add	r7, sp, #0
 8003272:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->EMR1, ExtiLine);
 8003274:	4b06      	ldr	r3, [pc, #24]	; (8003290 <LL_EXTI_DisableEvent_0_31+0x24>)
 8003276:	685a      	ldr	r2, [r3, #4]
 8003278:	687b      	ldr	r3, [r7, #4]
 800327a:	43db      	mvns	r3, r3
 800327c:	4904      	ldr	r1, [pc, #16]	; (8003290 <LL_EXTI_DisableEvent_0_31+0x24>)
 800327e:	4013      	ands	r3, r2
 8003280:	604b      	str	r3, [r1, #4]
}
 8003282:	bf00      	nop
 8003284:	370c      	adds	r7, #12
 8003286:	46bd      	mov	sp, r7
 8003288:	f85d 7b04 	ldr.w	r7, [sp], #4
 800328c:	4770      	bx	lr
 800328e:	bf00      	nop
 8003290:	40010400 	.word	0x40010400

08003294 <LL_EXTI_DisableEvent_32_63>:
{
 8003294:	b480      	push	{r7}
 8003296:	b083      	sub	sp, #12
 8003298:	af00      	add	r7, sp, #0
 800329a:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->EMR2, ExtiLine);
 800329c:	4b06      	ldr	r3, [pc, #24]	; (80032b8 <LL_EXTI_DisableEvent_32_63+0x24>)
 800329e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80032a0:	687b      	ldr	r3, [r7, #4]
 80032a2:	43db      	mvns	r3, r3
 80032a4:	4904      	ldr	r1, [pc, #16]	; (80032b8 <LL_EXTI_DisableEvent_32_63+0x24>)
 80032a6:	4013      	ands	r3, r2
 80032a8:	624b      	str	r3, [r1, #36]	; 0x24
}
 80032aa:	bf00      	nop
 80032ac:	370c      	adds	r7, #12
 80032ae:	46bd      	mov	sp, r7
 80032b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032b4:	4770      	bx	lr
 80032b6:	bf00      	nop
 80032b8:	40010400 	.word	0x40010400

080032bc <LL_EXTI_EnableRisingTrig_0_31>:
{
 80032bc:	b480      	push	{r7}
 80032be:	b083      	sub	sp, #12
 80032c0:	af00      	add	r7, sp, #0
 80032c2:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->RTSR1, ExtiLine);
 80032c4:	4b05      	ldr	r3, [pc, #20]	; (80032dc <LL_EXTI_EnableRisingTrig_0_31+0x20>)
 80032c6:	689a      	ldr	r2, [r3, #8]
 80032c8:	4904      	ldr	r1, [pc, #16]	; (80032dc <LL_EXTI_EnableRisingTrig_0_31+0x20>)
 80032ca:	687b      	ldr	r3, [r7, #4]
 80032cc:	4313      	orrs	r3, r2
 80032ce:	608b      	str	r3, [r1, #8]
}
 80032d0:	bf00      	nop
 80032d2:	370c      	adds	r7, #12
 80032d4:	46bd      	mov	sp, r7
 80032d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032da:	4770      	bx	lr
 80032dc:	40010400 	.word	0x40010400

080032e0 <LL_EXTI_EnableRisingTrig_32_63>:
{
 80032e0:	b480      	push	{r7}
 80032e2:	b083      	sub	sp, #12
 80032e4:	af00      	add	r7, sp, #0
 80032e6:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->RTSR2, ExtiLine);
 80032e8:	4b05      	ldr	r3, [pc, #20]	; (8003300 <LL_EXTI_EnableRisingTrig_32_63+0x20>)
 80032ea:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80032ec:	4904      	ldr	r1, [pc, #16]	; (8003300 <LL_EXTI_EnableRisingTrig_32_63+0x20>)
 80032ee:	687b      	ldr	r3, [r7, #4]
 80032f0:	4313      	orrs	r3, r2
 80032f2:	628b      	str	r3, [r1, #40]	; 0x28
}
 80032f4:	bf00      	nop
 80032f6:	370c      	adds	r7, #12
 80032f8:	46bd      	mov	sp, r7
 80032fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032fe:	4770      	bx	lr
 8003300:	40010400 	.word	0x40010400

08003304 <LL_EXTI_DisableRisingTrig_0_31>:
{
 8003304:	b480      	push	{r7}
 8003306:	b083      	sub	sp, #12
 8003308:	af00      	add	r7, sp, #0
 800330a:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->RTSR1, ExtiLine);
 800330c:	4b06      	ldr	r3, [pc, #24]	; (8003328 <LL_EXTI_DisableRisingTrig_0_31+0x24>)
 800330e:	689a      	ldr	r2, [r3, #8]
 8003310:	687b      	ldr	r3, [r7, #4]
 8003312:	43db      	mvns	r3, r3
 8003314:	4904      	ldr	r1, [pc, #16]	; (8003328 <LL_EXTI_DisableRisingTrig_0_31+0x24>)
 8003316:	4013      	ands	r3, r2
 8003318:	608b      	str	r3, [r1, #8]
}
 800331a:	bf00      	nop
 800331c:	370c      	adds	r7, #12
 800331e:	46bd      	mov	sp, r7
 8003320:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003324:	4770      	bx	lr
 8003326:	bf00      	nop
 8003328:	40010400 	.word	0x40010400

0800332c <LL_EXTI_DisableRisingTrig_32_63>:
{
 800332c:	b480      	push	{r7}
 800332e:	b083      	sub	sp, #12
 8003330:	af00      	add	r7, sp, #0
 8003332:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->RTSR2, ExtiLine);
 8003334:	4b06      	ldr	r3, [pc, #24]	; (8003350 <LL_EXTI_DisableRisingTrig_32_63+0x24>)
 8003336:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8003338:	687b      	ldr	r3, [r7, #4]
 800333a:	43db      	mvns	r3, r3
 800333c:	4904      	ldr	r1, [pc, #16]	; (8003350 <LL_EXTI_DisableRisingTrig_32_63+0x24>)
 800333e:	4013      	ands	r3, r2
 8003340:	628b      	str	r3, [r1, #40]	; 0x28
}
 8003342:	bf00      	nop
 8003344:	370c      	adds	r7, #12
 8003346:	46bd      	mov	sp, r7
 8003348:	f85d 7b04 	ldr.w	r7, [sp], #4
 800334c:	4770      	bx	lr
 800334e:	bf00      	nop
 8003350:	40010400 	.word	0x40010400

08003354 <LL_EXTI_EnableFallingTrig_0_31>:
{
 8003354:	b480      	push	{r7}
 8003356:	b083      	sub	sp, #12
 8003358:	af00      	add	r7, sp, #0
 800335a:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->FTSR1, ExtiLine);
 800335c:	4b05      	ldr	r3, [pc, #20]	; (8003374 <LL_EXTI_EnableFallingTrig_0_31+0x20>)
 800335e:	68da      	ldr	r2, [r3, #12]
 8003360:	4904      	ldr	r1, [pc, #16]	; (8003374 <LL_EXTI_EnableFallingTrig_0_31+0x20>)
 8003362:	687b      	ldr	r3, [r7, #4]
 8003364:	4313      	orrs	r3, r2
 8003366:	60cb      	str	r3, [r1, #12]
}
 8003368:	bf00      	nop
 800336a:	370c      	adds	r7, #12
 800336c:	46bd      	mov	sp, r7
 800336e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003372:	4770      	bx	lr
 8003374:	40010400 	.word	0x40010400

08003378 <LL_EXTI_EnableFallingTrig_32_63>:
{
 8003378:	b480      	push	{r7}
 800337a:	b083      	sub	sp, #12
 800337c:	af00      	add	r7, sp, #0
 800337e:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->FTSR2, ExtiLine);
 8003380:	4b05      	ldr	r3, [pc, #20]	; (8003398 <LL_EXTI_EnableFallingTrig_32_63+0x20>)
 8003382:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003384:	4904      	ldr	r1, [pc, #16]	; (8003398 <LL_EXTI_EnableFallingTrig_32_63+0x20>)
 8003386:	687b      	ldr	r3, [r7, #4]
 8003388:	4313      	orrs	r3, r2
 800338a:	62cb      	str	r3, [r1, #44]	; 0x2c
}
 800338c:	bf00      	nop
 800338e:	370c      	adds	r7, #12
 8003390:	46bd      	mov	sp, r7
 8003392:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003396:	4770      	bx	lr
 8003398:	40010400 	.word	0x40010400

0800339c <LL_EXTI_DisableFallingTrig_0_31>:
{
 800339c:	b480      	push	{r7}
 800339e:	b083      	sub	sp, #12
 80033a0:	af00      	add	r7, sp, #0
 80033a2:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->FTSR1, ExtiLine);
 80033a4:	4b06      	ldr	r3, [pc, #24]	; (80033c0 <LL_EXTI_DisableFallingTrig_0_31+0x24>)
 80033a6:	68da      	ldr	r2, [r3, #12]
 80033a8:	687b      	ldr	r3, [r7, #4]
 80033aa:	43db      	mvns	r3, r3
 80033ac:	4904      	ldr	r1, [pc, #16]	; (80033c0 <LL_EXTI_DisableFallingTrig_0_31+0x24>)
 80033ae:	4013      	ands	r3, r2
 80033b0:	60cb      	str	r3, [r1, #12]
}
 80033b2:	bf00      	nop
 80033b4:	370c      	adds	r7, #12
 80033b6:	46bd      	mov	sp, r7
 80033b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033bc:	4770      	bx	lr
 80033be:	bf00      	nop
 80033c0:	40010400 	.word	0x40010400

080033c4 <LL_EXTI_DisableFallingTrig_32_63>:
{
 80033c4:	b480      	push	{r7}
 80033c6:	b083      	sub	sp, #12
 80033c8:	af00      	add	r7, sp, #0
 80033ca:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->FTSR2, ExtiLine);
 80033cc:	4b06      	ldr	r3, [pc, #24]	; (80033e8 <LL_EXTI_DisableFallingTrig_32_63+0x24>)
 80033ce:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80033d0:	687b      	ldr	r3, [r7, #4]
 80033d2:	43db      	mvns	r3, r3
 80033d4:	4904      	ldr	r1, [pc, #16]	; (80033e8 <LL_EXTI_DisableFallingTrig_32_63+0x24>)
 80033d6:	4013      	ands	r3, r2
 80033d8:	62cb      	str	r3, [r1, #44]	; 0x2c
}
 80033da:	bf00      	nop
 80033dc:	370c      	adds	r7, #12
 80033de:	46bd      	mov	sp, r7
 80033e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033e4:	4770      	bx	lr
 80033e6:	bf00      	nop
 80033e8:	40010400 	.word	0x40010400

080033ec <LL_EXTI_ClearFlag_0_31>:
{
 80033ec:	b480      	push	{r7}
 80033ee:	b083      	sub	sp, #12
 80033f0:	af00      	add	r7, sp, #0
 80033f2:	6078      	str	r0, [r7, #4]
  WRITE_REG(EXTI->PR1, ExtiLine);
 80033f4:	4a04      	ldr	r2, [pc, #16]	; (8003408 <LL_EXTI_ClearFlag_0_31+0x1c>)
 80033f6:	687b      	ldr	r3, [r7, #4]
 80033f8:	6153      	str	r3, [r2, #20]
}
 80033fa:	bf00      	nop
 80033fc:	370c      	adds	r7, #12
 80033fe:	46bd      	mov	sp, r7
 8003400:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003404:	4770      	bx	lr
 8003406:	bf00      	nop
 8003408:	40010400 	.word	0x40010400

0800340c <LL_EXTI_ClearFlag_32_63>:
  *         @arg @ref LL_EXTI_LINE_41
  * @note   (*): Available in some devices
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_ClearFlag_32_63(uint32_t ExtiLine)
{
 800340c:	b480      	push	{r7}
 800340e:	b083      	sub	sp, #12
 8003410:	af00      	add	r7, sp, #0
 8003412:	6078      	str	r0, [r7, #4]
  WRITE_REG(EXTI->PR2, ExtiLine);
 8003414:	4a04      	ldr	r2, [pc, #16]	; (8003428 <LL_EXTI_ClearFlag_32_63+0x1c>)
 8003416:	687b      	ldr	r3, [r7, #4]
 8003418:	6353      	str	r3, [r2, #52]	; 0x34
}
 800341a:	bf00      	nop
 800341c:	370c      	adds	r7, #12
 800341e:	46bd      	mov	sp, r7
 8003420:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003424:	4770      	bx	lr
 8003426:	bf00      	nop
 8003428:	40010400 	.word	0x40010400

0800342c <HAL_COMP_Init>:
  *         To unlock the configuration, perform a system reset.
  * @param  hcomp  COMP handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_COMP_Init(COMP_HandleTypeDef *hcomp)
{
 800342c:	b580      	push	{r7, lr}
 800342e:	b088      	sub	sp, #32
 8003430:	af00      	add	r7, sp, #0
 8003432:	6078      	str	r0, [r7, #4]
  uint32_t tmp_csr;
  uint32_t exti_line;
  uint32_t comp_voltage_scaler_initialized; /* Value "0" if comparator voltage scaler is not initialized */
  __IO uint32_t wait_loop_index = 0UL;
 8003434:	2300      	movs	r3, #0
 8003436:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef status = HAL_OK;
 8003438:	2300      	movs	r3, #0
 800343a:	77fb      	strb	r3, [r7, #31]

  /* Check the COMP handle allocation and lock status */
  if(hcomp == NULL)
 800343c:	687b      	ldr	r3, [r7, #4]
 800343e:	2b00      	cmp	r3, #0
 8003440:	d102      	bne.n	8003448 <HAL_COMP_Init+0x1c>
  {
    status = HAL_ERROR;
 8003442:	2301      	movs	r3, #1
 8003444:	77fb      	strb	r3, [r7, #31]
 8003446:	e180      	b.n	800374a <HAL_COMP_Init+0x31e>
  }
  else if(__HAL_COMP_IS_LOCKED(hcomp))
 8003448:	687b      	ldr	r3, [r7, #4]
 800344a:	681b      	ldr	r3, [r3, #0]
 800344c:	681b      	ldr	r3, [r3, #0]
 800344e:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8003452:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8003456:	d102      	bne.n	800345e <HAL_COMP_Init+0x32>
  {
    status = HAL_ERROR;
 8003458:	2301      	movs	r3, #1
 800345a:	77fb      	strb	r3, [r7, #31]
 800345c:	e175      	b.n	800374a <HAL_COMP_Init+0x31e>
    assert_param(IS_COMP_OUTPUTPOL(hcomp->Init.OutputPol));
    assert_param(IS_COMP_HYSTERESIS(hcomp->Init.Hysteresis));
    assert_param(IS_COMP_BLANKINGSRC_INSTANCE(hcomp->Instance, hcomp->Init.BlankingSrce));
    assert_param(IS_COMP_TRIGGERMODE(hcomp->Init.TriggerMode));

    if(hcomp->State == HAL_COMP_STATE_RESET)
 800345e:	687b      	ldr	r3, [r7, #4]
 8003460:	7f5b      	ldrb	r3, [r3, #29]
 8003462:	b2db      	uxtb	r3, r3
 8003464:	2b00      	cmp	r3, #0
 8003466:	d108      	bne.n	800347a <HAL_COMP_Init+0x4e>
    {
      /* Allocate lock resource and initialize it */
      hcomp->Lock = HAL_UNLOCKED;
 8003468:	687b      	ldr	r3, [r7, #4]
 800346a:	2200      	movs	r2, #0
 800346c:	771a      	strb	r2, [r3, #28]

      /* Set COMP error code to none */
      COMP_CLEAR_ERRORCODE(hcomp);
 800346e:	687b      	ldr	r3, [r7, #4]
 8003470:	2200      	movs	r2, #0
 8003472:	621a      	str	r2, [r3, #32]
#else
      /* Init the low level hardware */
      /* Note: Internal control clock of the comparators must                 */
      /*       be enabled in "HAL_COMP_MspInit()"                             */
      /*       using "__HAL_RCC_SYSCFG_CLK_ENABLE()".                         */
      HAL_COMP_MspInit(hcomp);
 8003474:	6878      	ldr	r0, [r7, #4]
 8003476:	f7fd f8e5 	bl	8000644 <HAL_COMP_MspInit>
#endif /* USE_HAL_COMP_REGISTER_CALLBACKS */
    }

    /* Memorize voltage scaler state before initialization */
    comp_voltage_scaler_initialized = READ_BIT(hcomp->Instance->CSR, COMP_CSR_SCALEN);
 800347a:	687b      	ldr	r3, [r7, #4]
 800347c:	681b      	ldr	r3, [r3, #0]
 800347e:	681b      	ldr	r3, [r3, #0]
 8003480:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8003484:	61bb      	str	r3, [r7, #24]

    /* Set COMP parameters */
    tmp_csr = (  hcomp->Init.InputMinus
 8003486:	687b      	ldr	r3, [r7, #4]
 8003488:	689a      	ldr	r2, [r3, #8]
               | hcomp->Init.InputPlus
 800348a:	687b      	ldr	r3, [r7, #4]
 800348c:	685b      	ldr	r3, [r3, #4]
 800348e:	431a      	orrs	r2, r3
               | hcomp->Init.BlankingSrce
 8003490:	687b      	ldr	r3, [r7, #4]
 8003492:	695b      	ldr	r3, [r3, #20]
 8003494:	431a      	orrs	r2, r3
               | hcomp->Init.Hysteresis
 8003496:	687b      	ldr	r3, [r7, #4]
 8003498:	68db      	ldr	r3, [r3, #12]
 800349a:	431a      	orrs	r2, r3
               | hcomp->Init.OutputPol
 800349c:	687b      	ldr	r3, [r7, #4]
 800349e:	691b      	ldr	r3, [r3, #16]
    tmp_csr = (  hcomp->Init.InputMinus
 80034a0:	4313      	orrs	r3, r2
 80034a2:	617b      	str	r3, [r7, #20]
              );

    /* Set parameters in COMP register */
    /* Note: Update all bits except read-only, lock and enable bits */
    MODIFY_REG(hcomp->Instance->CSR,
 80034a4:	687b      	ldr	r3, [r7, #4]
 80034a6:	681b      	ldr	r3, [r3, #0]
 80034a8:	681a      	ldr	r2, [r3, #0]
 80034aa:	4b98      	ldr	r3, [pc, #608]	; (800370c <HAL_COMP_Init+0x2e0>)
 80034ac:	4013      	ands	r3, r2
 80034ae:	687a      	ldr	r2, [r7, #4]
 80034b0:	6812      	ldr	r2, [r2, #0]
 80034b2:	6979      	ldr	r1, [r7, #20]
 80034b4:	430b      	orrs	r3, r1
 80034b6:	6013      	str	r3, [r2, #0]
               tmp_csr
              );

    /* Delay for COMP scaler bridge voltage stabilization */
    /* Apply the delay if voltage scaler bridge is required and not already enabled */
    if ((READ_BIT(hcomp->Instance->CSR, COMP_CSR_SCALEN) != 0UL) &&
 80034b8:	687b      	ldr	r3, [r7, #4]
 80034ba:	681b      	ldr	r3, [r3, #0]
 80034bc:	681b      	ldr	r3, [r3, #0]
 80034be:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80034c2:	2b00      	cmp	r3, #0
 80034c4:	d015      	beq.n	80034f2 <HAL_COMP_Init+0xc6>
 80034c6:	69bb      	ldr	r3, [r7, #24]
 80034c8:	2b00      	cmp	r3, #0
 80034ca:	d112      	bne.n	80034f2 <HAL_COMP_Init+0xc6>
    {
      /* Wait loop initialization and execution */
      /* Note: Variable divided by 2 to compensate partially              */
      /*       CPU processing cycles, scaling in us split to not          */
      /*       exceed 32 bits register capacity and handle low frequency. */
      wait_loop_index = ((COMP_DELAY_VOLTAGE_SCALER_STAB_US / 10UL) * (SystemCoreClock / (100000UL * 2UL)));
 80034cc:	4b90      	ldr	r3, [pc, #576]	; (8003710 <HAL_COMP_Init+0x2e4>)
 80034ce:	681b      	ldr	r3, [r3, #0]
 80034d0:	099b      	lsrs	r3, r3, #6
 80034d2:	4a90      	ldr	r2, [pc, #576]	; (8003714 <HAL_COMP_Init+0x2e8>)
 80034d4:	fba2 2303 	umull	r2, r3, r2, r3
 80034d8:	099a      	lsrs	r2, r3, #6
 80034da:	4613      	mov	r3, r2
 80034dc:	009b      	lsls	r3, r3, #2
 80034de:	4413      	add	r3, r2
 80034e0:	009b      	lsls	r3, r3, #2
 80034e2:	60fb      	str	r3, [r7, #12]
      while(wait_loop_index != 0UL)
 80034e4:	e002      	b.n	80034ec <HAL_COMP_Init+0xc0>
      {
        wait_loop_index--;
 80034e6:	68fb      	ldr	r3, [r7, #12]
 80034e8:	3b01      	subs	r3, #1
 80034ea:	60fb      	str	r3, [r7, #12]
      while(wait_loop_index != 0UL)
 80034ec:	68fb      	ldr	r3, [r7, #12]
 80034ee:	2b00      	cmp	r3, #0
 80034f0:	d1f9      	bne.n	80034e6 <HAL_COMP_Init+0xba>
      }
    }

    /* Get the EXTI line corresponding to the selected COMP instance */
    exti_line = COMP_GET_EXTI_LINE(hcomp->Instance);
 80034f2:	687b      	ldr	r3, [r7, #4]
 80034f4:	681b      	ldr	r3, [r3, #0]
 80034f6:	4a88      	ldr	r2, [pc, #544]	; (8003718 <HAL_COMP_Init+0x2ec>)
 80034f8:	4293      	cmp	r3, r2
 80034fa:	d028      	beq.n	800354e <HAL_COMP_Init+0x122>
 80034fc:	687b      	ldr	r3, [r7, #4]
 80034fe:	681b      	ldr	r3, [r3, #0]
 8003500:	4a86      	ldr	r2, [pc, #536]	; (800371c <HAL_COMP_Init+0x2f0>)
 8003502:	4293      	cmp	r3, r2
 8003504:	d020      	beq.n	8003548 <HAL_COMP_Init+0x11c>
 8003506:	687b      	ldr	r3, [r7, #4]
 8003508:	681b      	ldr	r3, [r3, #0]
 800350a:	4a85      	ldr	r2, [pc, #532]	; (8003720 <HAL_COMP_Init+0x2f4>)
 800350c:	4293      	cmp	r3, r2
 800350e:	d018      	beq.n	8003542 <HAL_COMP_Init+0x116>
 8003510:	687b      	ldr	r3, [r7, #4]
 8003512:	681b      	ldr	r3, [r3, #0]
 8003514:	4a83      	ldr	r2, [pc, #524]	; (8003724 <HAL_COMP_Init+0x2f8>)
 8003516:	4293      	cmp	r3, r2
 8003518:	d010      	beq.n	800353c <HAL_COMP_Init+0x110>
 800351a:	687b      	ldr	r3, [r7, #4]
 800351c:	681b      	ldr	r3, [r3, #0]
 800351e:	4a82      	ldr	r2, [pc, #520]	; (8003728 <HAL_COMP_Init+0x2fc>)
 8003520:	4293      	cmp	r3, r2
 8003522:	d008      	beq.n	8003536 <HAL_COMP_Init+0x10a>
 8003524:	687b      	ldr	r3, [r7, #4]
 8003526:	681b      	ldr	r3, [r3, #0]
 8003528:	4a80      	ldr	r2, [pc, #512]	; (800372c <HAL_COMP_Init+0x300>)
 800352a:	4293      	cmp	r3, r2
 800352c:	d101      	bne.n	8003532 <HAL_COMP_Init+0x106>
 800352e:	2301      	movs	r3, #1
 8003530:	e00f      	b.n	8003552 <HAL_COMP_Init+0x126>
 8003532:	2302      	movs	r3, #2
 8003534:	e00d      	b.n	8003552 <HAL_COMP_Init+0x126>
 8003536:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800353a:	e00a      	b.n	8003552 <HAL_COMP_Init+0x126>
 800353c:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8003540:	e007      	b.n	8003552 <HAL_COMP_Init+0x126>
 8003542:	f04f 5300 	mov.w	r3, #536870912	; 0x20000000
 8003546:	e004      	b.n	8003552 <HAL_COMP_Init+0x126>
 8003548:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800354c:	e001      	b.n	8003552 <HAL_COMP_Init+0x126>
 800354e:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8003552:	613b      	str	r3, [r7, #16]

    /* Manage EXTI settings */
    if((hcomp->Init.TriggerMode & (COMP_EXTI_IT | COMP_EXTI_EVENT)) != 0UL)
 8003554:	687b      	ldr	r3, [r7, #4]
 8003556:	699b      	ldr	r3, [r3, #24]
 8003558:	f003 0303 	and.w	r3, r3, #3
 800355c:	2b00      	cmp	r3, #0
 800355e:	f000 80b6 	beq.w	80036ce <HAL_COMP_Init+0x2a2>
    {
      /* Configure EXTI rising edge */
      if((hcomp->Init.TriggerMode & COMP_EXTI_RISING) != 0UL)
 8003562:	687b      	ldr	r3, [r7, #4]
 8003564:	699b      	ldr	r3, [r3, #24]
 8003566:	f003 0310 	and.w	r3, r3, #16
 800356a:	2b00      	cmp	r3, #0
 800356c:	d011      	beq.n	8003592 <HAL_COMP_Init+0x166>
      {
#if defined(STM32G474xx) || defined(STM32G484xx) || defined(STM32G473xx) || defined(STM32G483xx)
        if((hcomp->Instance == COMP6) || (hcomp->Instance == COMP7))
 800356e:	687b      	ldr	r3, [r7, #4]
 8003570:	681b      	ldr	r3, [r3, #0]
 8003572:	4a6e      	ldr	r2, [pc, #440]	; (800372c <HAL_COMP_Init+0x300>)
 8003574:	4293      	cmp	r3, r2
 8003576:	d004      	beq.n	8003582 <HAL_COMP_Init+0x156>
 8003578:	687b      	ldr	r3, [r7, #4]
 800357a:	681b      	ldr	r3, [r3, #0]
 800357c:	4a6c      	ldr	r2, [pc, #432]	; (8003730 <HAL_COMP_Init+0x304>)
 800357e:	4293      	cmp	r3, r2
 8003580:	d103      	bne.n	800358a <HAL_COMP_Init+0x15e>
        {
          LL_EXTI_EnableRisingTrig_32_63(exti_line);
 8003582:	6938      	ldr	r0, [r7, #16]
 8003584:	f7ff feac 	bl	80032e0 <LL_EXTI_EnableRisingTrig_32_63>
 8003588:	e014      	b.n	80035b4 <HAL_COMP_Init+0x188>
        }
        else
        {
          LL_EXTI_EnableRisingTrig_0_31(exti_line);
 800358a:	6938      	ldr	r0, [r7, #16]
 800358c:	f7ff fe96 	bl	80032bc <LL_EXTI_EnableRisingTrig_0_31>
 8003590:	e010      	b.n	80035b4 <HAL_COMP_Init+0x188>
#endif
      }
      else
      {
#if defined(STM32G474xx) || defined(STM32G484xx) || defined(STM32G473xx) || defined(STM32G483xx)
        if((hcomp->Instance == COMP6) || (hcomp->Instance == COMP7))
 8003592:	687b      	ldr	r3, [r7, #4]
 8003594:	681b      	ldr	r3, [r3, #0]
 8003596:	4a65      	ldr	r2, [pc, #404]	; (800372c <HAL_COMP_Init+0x300>)
 8003598:	4293      	cmp	r3, r2
 800359a:	d004      	beq.n	80035a6 <HAL_COMP_Init+0x17a>
 800359c:	687b      	ldr	r3, [r7, #4]
 800359e:	681b      	ldr	r3, [r3, #0]
 80035a0:	4a63      	ldr	r2, [pc, #396]	; (8003730 <HAL_COMP_Init+0x304>)
 80035a2:	4293      	cmp	r3, r2
 80035a4:	d103      	bne.n	80035ae <HAL_COMP_Init+0x182>
        {
          LL_EXTI_DisableRisingTrig_32_63(exti_line);
 80035a6:	6938      	ldr	r0, [r7, #16]
 80035a8:	f7ff fec0 	bl	800332c <LL_EXTI_DisableRisingTrig_32_63>
 80035ac:	e002      	b.n	80035b4 <HAL_COMP_Init+0x188>
        }
        else
        {
          LL_EXTI_DisableRisingTrig_0_31(exti_line);
 80035ae:	6938      	ldr	r0, [r7, #16]
 80035b0:	f7ff fea8 	bl	8003304 <LL_EXTI_DisableRisingTrig_0_31>
        LL_EXTI_DisableRisingTrig_0_31(exti_line);
#endif
      }

      /* Configure EXTI falling edge */
      if((hcomp->Init.TriggerMode & COMP_EXTI_FALLING) != 0UL)
 80035b4:	687b      	ldr	r3, [r7, #4]
 80035b6:	699b      	ldr	r3, [r3, #24]
 80035b8:	f003 0320 	and.w	r3, r3, #32
 80035bc:	2b00      	cmp	r3, #0
 80035be:	d011      	beq.n	80035e4 <HAL_COMP_Init+0x1b8>
      {
#if defined(STM32G474xx) || defined(STM32G484xx) || defined(STM32G473xx) || defined(STM32G483xx)
        if((hcomp->Instance == COMP6) || (hcomp->Instance == COMP7))
 80035c0:	687b      	ldr	r3, [r7, #4]
 80035c2:	681b      	ldr	r3, [r3, #0]
 80035c4:	4a59      	ldr	r2, [pc, #356]	; (800372c <HAL_COMP_Init+0x300>)
 80035c6:	4293      	cmp	r3, r2
 80035c8:	d004      	beq.n	80035d4 <HAL_COMP_Init+0x1a8>
 80035ca:	687b      	ldr	r3, [r7, #4]
 80035cc:	681b      	ldr	r3, [r3, #0]
 80035ce:	4a58      	ldr	r2, [pc, #352]	; (8003730 <HAL_COMP_Init+0x304>)
 80035d0:	4293      	cmp	r3, r2
 80035d2:	d103      	bne.n	80035dc <HAL_COMP_Init+0x1b0>
        {
          LL_EXTI_EnableFallingTrig_32_63(exti_line);
 80035d4:	6938      	ldr	r0, [r7, #16]
 80035d6:	f7ff fecf 	bl	8003378 <LL_EXTI_EnableFallingTrig_32_63>
 80035da:	e014      	b.n	8003606 <HAL_COMP_Init+0x1da>
        }
        else
        {
          LL_EXTI_EnableFallingTrig_0_31(exti_line);
 80035dc:	6938      	ldr	r0, [r7, #16]
 80035de:	f7ff feb9 	bl	8003354 <LL_EXTI_EnableFallingTrig_0_31>
 80035e2:	e010      	b.n	8003606 <HAL_COMP_Init+0x1da>
#endif
      }
      else
      {
#if defined(STM32G474xx) || defined(STM32G484xx) || defined(STM32G473xx) || defined(STM32G483xx)
        if((hcomp->Instance == COMP6) || (hcomp->Instance == COMP7))
 80035e4:	687b      	ldr	r3, [r7, #4]
 80035e6:	681b      	ldr	r3, [r3, #0]
 80035e8:	4a50      	ldr	r2, [pc, #320]	; (800372c <HAL_COMP_Init+0x300>)
 80035ea:	4293      	cmp	r3, r2
 80035ec:	d004      	beq.n	80035f8 <HAL_COMP_Init+0x1cc>
 80035ee:	687b      	ldr	r3, [r7, #4]
 80035f0:	681b      	ldr	r3, [r3, #0]
 80035f2:	4a4f      	ldr	r2, [pc, #316]	; (8003730 <HAL_COMP_Init+0x304>)
 80035f4:	4293      	cmp	r3, r2
 80035f6:	d103      	bne.n	8003600 <HAL_COMP_Init+0x1d4>
        {
          LL_EXTI_DisableFallingTrig_32_63(exti_line);
 80035f8:	6938      	ldr	r0, [r7, #16]
 80035fa:	f7ff fee3 	bl	80033c4 <LL_EXTI_DisableFallingTrig_32_63>
 80035fe:	e002      	b.n	8003606 <HAL_COMP_Init+0x1da>
        }
        else
        {
          LL_EXTI_DisableFallingTrig_0_31(exti_line);
 8003600:	6938      	ldr	r0, [r7, #16]
 8003602:	f7ff fecb 	bl	800339c <LL_EXTI_DisableFallingTrig_0_31>
#endif
      }

      /* Clear COMP EXTI pending bit (if any) */
#if defined(STM32G474xx) || defined(STM32G484xx) || defined(STM32G473xx) || defined(STM32G483xx)
      if((hcomp->Instance == COMP6) || (hcomp->Instance == COMP7))
 8003606:	687b      	ldr	r3, [r7, #4]
 8003608:	681b      	ldr	r3, [r3, #0]
 800360a:	4a48      	ldr	r2, [pc, #288]	; (800372c <HAL_COMP_Init+0x300>)
 800360c:	4293      	cmp	r3, r2
 800360e:	d004      	beq.n	800361a <HAL_COMP_Init+0x1ee>
 8003610:	687b      	ldr	r3, [r7, #4]
 8003612:	681b      	ldr	r3, [r3, #0]
 8003614:	4a46      	ldr	r2, [pc, #280]	; (8003730 <HAL_COMP_Init+0x304>)
 8003616:	4293      	cmp	r3, r2
 8003618:	d103      	bne.n	8003622 <HAL_COMP_Init+0x1f6>
      {
        LL_EXTI_ClearFlag_32_63(exti_line);
 800361a:	6938      	ldr	r0, [r7, #16]
 800361c:	f7ff fef6 	bl	800340c <LL_EXTI_ClearFlag_32_63>
 8003620:	e002      	b.n	8003628 <HAL_COMP_Init+0x1fc>
      }
      else
      {
        LL_EXTI_ClearFlag_0_31(exti_line);
 8003622:	6938      	ldr	r0, [r7, #16]
 8003624:	f7ff fee2 	bl	80033ec <LL_EXTI_ClearFlag_0_31>
#else
      LL_EXTI_ClearFlag_0_31(exti_line);
#endif

      /* Configure EXTI event mode */
      if((hcomp->Init.TriggerMode & COMP_EXTI_EVENT) != 0UL)
 8003628:	687b      	ldr	r3, [r7, #4]
 800362a:	699b      	ldr	r3, [r3, #24]
 800362c:	f003 0302 	and.w	r3, r3, #2
 8003630:	2b00      	cmp	r3, #0
 8003632:	d011      	beq.n	8003658 <HAL_COMP_Init+0x22c>
      {
#if defined(STM32G474xx) || defined(STM32G484xx) || defined(STM32G473xx) || defined(STM32G483xx)
        if((hcomp->Instance == COMP6) || (hcomp->Instance == COMP7))
 8003634:	687b      	ldr	r3, [r7, #4]
 8003636:	681b      	ldr	r3, [r3, #0]
 8003638:	4a3c      	ldr	r2, [pc, #240]	; (800372c <HAL_COMP_Init+0x300>)
 800363a:	4293      	cmp	r3, r2
 800363c:	d004      	beq.n	8003648 <HAL_COMP_Init+0x21c>
 800363e:	687b      	ldr	r3, [r7, #4]
 8003640:	681b      	ldr	r3, [r3, #0]
 8003642:	4a3b      	ldr	r2, [pc, #236]	; (8003730 <HAL_COMP_Init+0x304>)
 8003644:	4293      	cmp	r3, r2
 8003646:	d103      	bne.n	8003650 <HAL_COMP_Init+0x224>
        {
          LL_EXTI_EnableEvent_32_63(exti_line);
 8003648:	6938      	ldr	r0, [r7, #16]
 800364a:	f7ff fdfd 	bl	8003248 <LL_EXTI_EnableEvent_32_63>
 800364e:	e014      	b.n	800367a <HAL_COMP_Init+0x24e>
        }
        else
        {
          LL_EXTI_EnableEvent_0_31(exti_line);
 8003650:	6938      	ldr	r0, [r7, #16]
 8003652:	f7ff fde7 	bl	8003224 <LL_EXTI_EnableEvent_0_31>
 8003656:	e010      	b.n	800367a <HAL_COMP_Init+0x24e>
#endif
      }
      else
      {
#if defined(STM32G474xx) || defined(STM32G484xx) || defined(STM32G473xx) || defined(STM32G483xx)
        if((hcomp->Instance == COMP6) || (hcomp->Instance == COMP7))
 8003658:	687b      	ldr	r3, [r7, #4]
 800365a:	681b      	ldr	r3, [r3, #0]
 800365c:	4a33      	ldr	r2, [pc, #204]	; (800372c <HAL_COMP_Init+0x300>)
 800365e:	4293      	cmp	r3, r2
 8003660:	d004      	beq.n	800366c <HAL_COMP_Init+0x240>
 8003662:	687b      	ldr	r3, [r7, #4]
 8003664:	681b      	ldr	r3, [r3, #0]
 8003666:	4a32      	ldr	r2, [pc, #200]	; (8003730 <HAL_COMP_Init+0x304>)
 8003668:	4293      	cmp	r3, r2
 800366a:	d103      	bne.n	8003674 <HAL_COMP_Init+0x248>
        {
          LL_EXTI_DisableEvent_32_63(exti_line);
 800366c:	6938      	ldr	r0, [r7, #16]
 800366e:	f7ff fe11 	bl	8003294 <LL_EXTI_DisableEvent_32_63>
 8003672:	e002      	b.n	800367a <HAL_COMP_Init+0x24e>
        }
        else
        {
          LL_EXTI_DisableEvent_0_31(exti_line);
 8003674:	6938      	ldr	r0, [r7, #16]
 8003676:	f7ff fdf9 	bl	800326c <LL_EXTI_DisableEvent_0_31>
        LL_EXTI_DisableEvent_0_31(exti_line);
#endif
      }

      /* Configure EXTI interrupt mode */
      if((hcomp->Init.TriggerMode & COMP_EXTI_IT) != 0UL)
 800367a:	687b      	ldr	r3, [r7, #4]
 800367c:	699b      	ldr	r3, [r3, #24]
 800367e:	f003 0301 	and.w	r3, r3, #1
 8003682:	2b00      	cmp	r3, #0
 8003684:	d011      	beq.n	80036aa <HAL_COMP_Init+0x27e>
      {
#if defined(STM32G474xx) || defined(STM32G484xx) || defined(STM32G473xx) || defined(STM32G483xx)
        if((hcomp->Instance == COMP6) || (hcomp->Instance == COMP7))
 8003686:	687b      	ldr	r3, [r7, #4]
 8003688:	681b      	ldr	r3, [r3, #0]
 800368a:	4a28      	ldr	r2, [pc, #160]	; (800372c <HAL_COMP_Init+0x300>)
 800368c:	4293      	cmp	r3, r2
 800368e:	d004      	beq.n	800369a <HAL_COMP_Init+0x26e>
 8003690:	687b      	ldr	r3, [r7, #4]
 8003692:	681b      	ldr	r3, [r3, #0]
 8003694:	4a26      	ldr	r2, [pc, #152]	; (8003730 <HAL_COMP_Init+0x304>)
 8003696:	4293      	cmp	r3, r2
 8003698:	d103      	bne.n	80036a2 <HAL_COMP_Init+0x276>
        {
          LL_EXTI_EnableIT_32_63(exti_line);
 800369a:	6938      	ldr	r0, [r7, #16]
 800369c:	f7ff fd88 	bl	80031b0 <LL_EXTI_EnableIT_32_63>
 80036a0:	e04b      	b.n	800373a <HAL_COMP_Init+0x30e>
        }
        else
        {
          LL_EXTI_EnableIT_0_31(exti_line);
 80036a2:	6938      	ldr	r0, [r7, #16]
 80036a4:	f7ff fd72 	bl	800318c <LL_EXTI_EnableIT_0_31>
 80036a8:	e047      	b.n	800373a <HAL_COMP_Init+0x30e>
#endif
      }
      else
      {
#if defined(STM32G474xx) || defined(STM32G484xx) || defined(STM32G473xx) || defined(STM32G483xx)
        if((hcomp->Instance == COMP6) || (hcomp->Instance == COMP7))
 80036aa:	687b      	ldr	r3, [r7, #4]
 80036ac:	681b      	ldr	r3, [r3, #0]
 80036ae:	4a1f      	ldr	r2, [pc, #124]	; (800372c <HAL_COMP_Init+0x300>)
 80036b0:	4293      	cmp	r3, r2
 80036b2:	d004      	beq.n	80036be <HAL_COMP_Init+0x292>
 80036b4:	687b      	ldr	r3, [r7, #4]
 80036b6:	681b      	ldr	r3, [r3, #0]
 80036b8:	4a1d      	ldr	r2, [pc, #116]	; (8003730 <HAL_COMP_Init+0x304>)
 80036ba:	4293      	cmp	r3, r2
 80036bc:	d103      	bne.n	80036c6 <HAL_COMP_Init+0x29a>
        {
          LL_EXTI_DisableIT_32_63(exti_line);
 80036be:	6938      	ldr	r0, [r7, #16]
 80036c0:	f7ff fd9c 	bl	80031fc <LL_EXTI_DisableIT_32_63>
 80036c4:	e039      	b.n	800373a <HAL_COMP_Init+0x30e>
        }
        else
        {
          LL_EXTI_DisableIT_0_31(exti_line);
 80036c6:	6938      	ldr	r0, [r7, #16]
 80036c8:	f7ff fd84 	bl	80031d4 <LL_EXTI_DisableIT_0_31>
 80036cc:	e035      	b.n	800373a <HAL_COMP_Init+0x30e>
    }
    else
    {
      /* Disable EXTI event mode */
#if defined(STM32G474xx) || defined(STM32G484xx) || defined(STM32G473xx) || defined(STM32G483xx)
      if((hcomp->Instance == COMP6) || (hcomp->Instance == COMP7))
 80036ce:	687b      	ldr	r3, [r7, #4]
 80036d0:	681b      	ldr	r3, [r3, #0]
 80036d2:	4a16      	ldr	r2, [pc, #88]	; (800372c <HAL_COMP_Init+0x300>)
 80036d4:	4293      	cmp	r3, r2
 80036d6:	d004      	beq.n	80036e2 <HAL_COMP_Init+0x2b6>
 80036d8:	687b      	ldr	r3, [r7, #4]
 80036da:	681b      	ldr	r3, [r3, #0]
 80036dc:	4a14      	ldr	r2, [pc, #80]	; (8003730 <HAL_COMP_Init+0x304>)
 80036de:	4293      	cmp	r3, r2
 80036e0:	d103      	bne.n	80036ea <HAL_COMP_Init+0x2be>
      {
        LL_EXTI_DisableEvent_32_63(exti_line);
 80036e2:	6938      	ldr	r0, [r7, #16]
 80036e4:	f7ff fdd6 	bl	8003294 <LL_EXTI_DisableEvent_32_63>
 80036e8:	e002      	b.n	80036f0 <HAL_COMP_Init+0x2c4>
      }
      else
      {
        LL_EXTI_DisableEvent_0_31(exti_line);
 80036ea:	6938      	ldr	r0, [r7, #16]
 80036ec:	f7ff fdbe 	bl	800326c <LL_EXTI_DisableEvent_0_31>
      LL_EXTI_DisableEvent_0_31(exti_line);
#endif

      /* Disable EXTI interrupt mode */
#if defined(STM32G474xx) || defined(STM32G484xx) || defined(STM32G473xx) || defined(STM32G483xx)
      if((hcomp->Instance == COMP6) || (hcomp->Instance == COMP7))
 80036f0:	687b      	ldr	r3, [r7, #4]
 80036f2:	681b      	ldr	r3, [r3, #0]
 80036f4:	4a0d      	ldr	r2, [pc, #52]	; (800372c <HAL_COMP_Init+0x300>)
 80036f6:	4293      	cmp	r3, r2
 80036f8:	d004      	beq.n	8003704 <HAL_COMP_Init+0x2d8>
 80036fa:	687b      	ldr	r3, [r7, #4]
 80036fc:	681b      	ldr	r3, [r3, #0]
 80036fe:	4a0c      	ldr	r2, [pc, #48]	; (8003730 <HAL_COMP_Init+0x304>)
 8003700:	4293      	cmp	r3, r2
 8003702:	d117      	bne.n	8003734 <HAL_COMP_Init+0x308>
      {
        LL_EXTI_DisableIT_32_63(exti_line);
 8003704:	6938      	ldr	r0, [r7, #16]
 8003706:	f7ff fd79 	bl	80031fc <LL_EXTI_DisableIT_32_63>
 800370a:	e016      	b.n	800373a <HAL_COMP_Init+0x30e>
 800370c:	ff007e0f 	.word	0xff007e0f
 8003710:	200003c4 	.word	0x200003c4
 8003714:	053e2d63 	.word	0x053e2d63
 8003718:	40010200 	.word	0x40010200
 800371c:	40010204 	.word	0x40010204
 8003720:	40010208 	.word	0x40010208
 8003724:	4001020c 	.word	0x4001020c
 8003728:	40010210 	.word	0x40010210
 800372c:	40010214 	.word	0x40010214
 8003730:	40010218 	.word	0x40010218
      }
      else
      {
        LL_EXTI_DisableIT_0_31(exti_line);
 8003734:	6938      	ldr	r0, [r7, #16]
 8003736:	f7ff fd4d 	bl	80031d4 <LL_EXTI_DisableIT_0_31>
    }

    /* Set HAL COMP handle state */
    /* Note: Transition from state reset to state ready,                      */
    /*       otherwise (coming from state ready or busy) no state update.     */
    if (hcomp->State == HAL_COMP_STATE_RESET)
 800373a:	687b      	ldr	r3, [r7, #4]
 800373c:	7f5b      	ldrb	r3, [r3, #29]
 800373e:	b2db      	uxtb	r3, r3
 8003740:	2b00      	cmp	r3, #0
 8003742:	d102      	bne.n	800374a <HAL_COMP_Init+0x31e>
    {
      hcomp->State = HAL_COMP_STATE_READY;
 8003744:	687b      	ldr	r3, [r7, #4]
 8003746:	2201      	movs	r2, #1
 8003748:	775a      	strb	r2, [r3, #29]
    }
  }

  return status;
 800374a:	7ffb      	ldrb	r3, [r7, #31]
}
 800374c:	4618      	mov	r0, r3
 800374e:	3720      	adds	r7, #32
 8003750:	46bd      	mov	sp, r7
 8003752:	bd80      	pop	{r7, pc}

08003754 <__NVIC_SetPriorityGrouping>:
{
 8003754:	b480      	push	{r7}
 8003756:	b085      	sub	sp, #20
 8003758:	af00      	add	r7, sp, #0
 800375a:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800375c:	687b      	ldr	r3, [r7, #4]
 800375e:	f003 0307 	and.w	r3, r3, #7
 8003762:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003764:	4b0c      	ldr	r3, [pc, #48]	; (8003798 <__NVIC_SetPriorityGrouping+0x44>)
 8003766:	68db      	ldr	r3, [r3, #12]
 8003768:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800376a:	68ba      	ldr	r2, [r7, #8]
 800376c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8003770:	4013      	ands	r3, r2
 8003772:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8003774:	68fb      	ldr	r3, [r7, #12]
 8003776:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003778:	68bb      	ldr	r3, [r7, #8]
 800377a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800377c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8003780:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003784:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8003786:	4a04      	ldr	r2, [pc, #16]	; (8003798 <__NVIC_SetPriorityGrouping+0x44>)
 8003788:	68bb      	ldr	r3, [r7, #8]
 800378a:	60d3      	str	r3, [r2, #12]
}
 800378c:	bf00      	nop
 800378e:	3714      	adds	r7, #20
 8003790:	46bd      	mov	sp, r7
 8003792:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003796:	4770      	bx	lr
 8003798:	e000ed00 	.word	0xe000ed00

0800379c <__NVIC_GetPriorityGrouping>:
{
 800379c:	b480      	push	{r7}
 800379e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80037a0:	4b04      	ldr	r3, [pc, #16]	; (80037b4 <__NVIC_GetPriorityGrouping+0x18>)
 80037a2:	68db      	ldr	r3, [r3, #12]
 80037a4:	0a1b      	lsrs	r3, r3, #8
 80037a6:	f003 0307 	and.w	r3, r3, #7
}
 80037aa:	4618      	mov	r0, r3
 80037ac:	46bd      	mov	sp, r7
 80037ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037b2:	4770      	bx	lr
 80037b4:	e000ed00 	.word	0xe000ed00

080037b8 <__NVIC_EnableIRQ>:
{
 80037b8:	b480      	push	{r7}
 80037ba:	b083      	sub	sp, #12
 80037bc:	af00      	add	r7, sp, #0
 80037be:	4603      	mov	r3, r0
 80037c0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80037c2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80037c6:	2b00      	cmp	r3, #0
 80037c8:	db0b      	blt.n	80037e2 <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80037ca:	79fb      	ldrb	r3, [r7, #7]
 80037cc:	f003 021f 	and.w	r2, r3, #31
 80037d0:	4907      	ldr	r1, [pc, #28]	; (80037f0 <__NVIC_EnableIRQ+0x38>)
 80037d2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80037d6:	095b      	lsrs	r3, r3, #5
 80037d8:	2001      	movs	r0, #1
 80037da:	fa00 f202 	lsl.w	r2, r0, r2
 80037de:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 80037e2:	bf00      	nop
 80037e4:	370c      	adds	r7, #12
 80037e6:	46bd      	mov	sp, r7
 80037e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037ec:	4770      	bx	lr
 80037ee:	bf00      	nop
 80037f0:	e000e100 	.word	0xe000e100

080037f4 <__NVIC_SetPriority>:
{
 80037f4:	b480      	push	{r7}
 80037f6:	b083      	sub	sp, #12
 80037f8:	af00      	add	r7, sp, #0
 80037fa:	4603      	mov	r3, r0
 80037fc:	6039      	str	r1, [r7, #0]
 80037fe:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003800:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003804:	2b00      	cmp	r3, #0
 8003806:	db0a      	blt.n	800381e <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003808:	683b      	ldr	r3, [r7, #0]
 800380a:	b2da      	uxtb	r2, r3
 800380c:	490c      	ldr	r1, [pc, #48]	; (8003840 <__NVIC_SetPriority+0x4c>)
 800380e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003812:	0112      	lsls	r2, r2, #4
 8003814:	b2d2      	uxtb	r2, r2
 8003816:	440b      	add	r3, r1
 8003818:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 800381c:	e00a      	b.n	8003834 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800381e:	683b      	ldr	r3, [r7, #0]
 8003820:	b2da      	uxtb	r2, r3
 8003822:	4908      	ldr	r1, [pc, #32]	; (8003844 <__NVIC_SetPriority+0x50>)
 8003824:	79fb      	ldrb	r3, [r7, #7]
 8003826:	f003 030f 	and.w	r3, r3, #15
 800382a:	3b04      	subs	r3, #4
 800382c:	0112      	lsls	r2, r2, #4
 800382e:	b2d2      	uxtb	r2, r2
 8003830:	440b      	add	r3, r1
 8003832:	761a      	strb	r2, [r3, #24]
}
 8003834:	bf00      	nop
 8003836:	370c      	adds	r7, #12
 8003838:	46bd      	mov	sp, r7
 800383a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800383e:	4770      	bx	lr
 8003840:	e000e100 	.word	0xe000e100
 8003844:	e000ed00 	.word	0xe000ed00

08003848 <NVIC_EncodePriority>:
{
 8003848:	b480      	push	{r7}
 800384a:	b089      	sub	sp, #36	; 0x24
 800384c:	af00      	add	r7, sp, #0
 800384e:	60f8      	str	r0, [r7, #12]
 8003850:	60b9      	str	r1, [r7, #8]
 8003852:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003854:	68fb      	ldr	r3, [r7, #12]
 8003856:	f003 0307 	and.w	r3, r3, #7
 800385a:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800385c:	69fb      	ldr	r3, [r7, #28]
 800385e:	f1c3 0307 	rsb	r3, r3, #7
 8003862:	2b04      	cmp	r3, #4
 8003864:	bf28      	it	cs
 8003866:	2304      	movcs	r3, #4
 8003868:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800386a:	69fb      	ldr	r3, [r7, #28]
 800386c:	3304      	adds	r3, #4
 800386e:	2b06      	cmp	r3, #6
 8003870:	d902      	bls.n	8003878 <NVIC_EncodePriority+0x30>
 8003872:	69fb      	ldr	r3, [r7, #28]
 8003874:	3b03      	subs	r3, #3
 8003876:	e000      	b.n	800387a <NVIC_EncodePriority+0x32>
 8003878:	2300      	movs	r3, #0
 800387a:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800387c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8003880:	69bb      	ldr	r3, [r7, #24]
 8003882:	fa02 f303 	lsl.w	r3, r2, r3
 8003886:	43da      	mvns	r2, r3
 8003888:	68bb      	ldr	r3, [r7, #8]
 800388a:	401a      	ands	r2, r3
 800388c:	697b      	ldr	r3, [r7, #20]
 800388e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003890:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8003894:	697b      	ldr	r3, [r7, #20]
 8003896:	fa01 f303 	lsl.w	r3, r1, r3
 800389a:	43d9      	mvns	r1, r3
 800389c:	687b      	ldr	r3, [r7, #4]
 800389e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80038a0:	4313      	orrs	r3, r2
}
 80038a2:	4618      	mov	r0, r3
 80038a4:	3724      	adds	r7, #36	; 0x24
 80038a6:	46bd      	mov	sp, r7
 80038a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038ac:	4770      	bx	lr
	...

080038b0 <SysTick_Config>:
{
 80038b0:	b580      	push	{r7, lr}
 80038b2:	b082      	sub	sp, #8
 80038b4:	af00      	add	r7, sp, #0
 80038b6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80038b8:	687b      	ldr	r3, [r7, #4]
 80038ba:	3b01      	subs	r3, #1
 80038bc:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80038c0:	d301      	bcc.n	80038c6 <SysTick_Config+0x16>
    return (1UL);                                                   /* Reload value impossible */
 80038c2:	2301      	movs	r3, #1
 80038c4:	e00f      	b.n	80038e6 <SysTick_Config+0x36>
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80038c6:	4a0a      	ldr	r2, [pc, #40]	; (80038f0 <SysTick_Config+0x40>)
 80038c8:	687b      	ldr	r3, [r7, #4]
 80038ca:	3b01      	subs	r3, #1
 80038cc:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80038ce:	210f      	movs	r1, #15
 80038d0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80038d4:	f7ff ff8e 	bl	80037f4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80038d8:	4b05      	ldr	r3, [pc, #20]	; (80038f0 <SysTick_Config+0x40>)
 80038da:	2200      	movs	r2, #0
 80038dc:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80038de:	4b04      	ldr	r3, [pc, #16]	; (80038f0 <SysTick_Config+0x40>)
 80038e0:	2207      	movs	r2, #7
 80038e2:	601a      	str	r2, [r3, #0]
  return (0UL);                                                     /* Function successful */
 80038e4:	2300      	movs	r3, #0
}
 80038e6:	4618      	mov	r0, r3
 80038e8:	3708      	adds	r7, #8
 80038ea:	46bd      	mov	sp, r7
 80038ec:	bd80      	pop	{r7, pc}
 80038ee:	bf00      	nop
 80038f0:	e000e010 	.word	0xe000e010

080038f4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80038f4:	b580      	push	{r7, lr}
 80038f6:	b082      	sub	sp, #8
 80038f8:	af00      	add	r7, sp, #0
 80038fa:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80038fc:	6878      	ldr	r0, [r7, #4]
 80038fe:	f7ff ff29 	bl	8003754 <__NVIC_SetPriorityGrouping>
}
 8003902:	bf00      	nop
 8003904:	3708      	adds	r7, #8
 8003906:	46bd      	mov	sp, r7
 8003908:	bd80      	pop	{r7, pc}

0800390a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800390a:	b580      	push	{r7, lr}
 800390c:	b086      	sub	sp, #24
 800390e:	af00      	add	r7, sp, #0
 8003910:	4603      	mov	r3, r0
 8003912:	60b9      	str	r1, [r7, #8]
 8003914:	607a      	str	r2, [r7, #4]
 8003916:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8003918:	f7ff ff40 	bl	800379c <__NVIC_GetPriorityGrouping>
 800391c:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800391e:	687a      	ldr	r2, [r7, #4]
 8003920:	68b9      	ldr	r1, [r7, #8]
 8003922:	6978      	ldr	r0, [r7, #20]
 8003924:	f7ff ff90 	bl	8003848 <NVIC_EncodePriority>
 8003928:	4602      	mov	r2, r0
 800392a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800392e:	4611      	mov	r1, r2
 8003930:	4618      	mov	r0, r3
 8003932:	f7ff ff5f 	bl	80037f4 <__NVIC_SetPriority>
}
 8003936:	bf00      	nop
 8003938:	3718      	adds	r7, #24
 800393a:	46bd      	mov	sp, r7
 800393c:	bd80      	pop	{r7, pc}

0800393e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800393e:	b580      	push	{r7, lr}
 8003940:	b082      	sub	sp, #8
 8003942:	af00      	add	r7, sp, #0
 8003944:	4603      	mov	r3, r0
 8003946:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003948:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800394c:	4618      	mov	r0, r3
 800394e:	f7ff ff33 	bl	80037b8 <__NVIC_EnableIRQ>
}
 8003952:	bf00      	nop
 8003954:	3708      	adds	r7, #8
 8003956:	46bd      	mov	sp, r7
 8003958:	bd80      	pop	{r7, pc}

0800395a <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800395a:	b580      	push	{r7, lr}
 800395c:	b082      	sub	sp, #8
 800395e:	af00      	add	r7, sp, #0
 8003960:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8003962:	6878      	ldr	r0, [r7, #4]
 8003964:	f7ff ffa4 	bl	80038b0 <SysTick_Config>
 8003968:	4603      	mov	r3, r0
}
 800396a:	4618      	mov	r0, r3
 800396c:	3708      	adds	r7, #8
 800396e:	46bd      	mov	sp, r7
 8003970:	bd80      	pop	{r7, pc}

08003972 <HAL_DAC_Init>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Init(DAC_HandleTypeDef *hdac)
{
 8003972:	b580      	push	{r7, lr}
 8003974:	b082      	sub	sp, #8
 8003976:	af00      	add	r7, sp, #0
 8003978:	6078      	str	r0, [r7, #4]
  /* Check DAC handle */
  if (hdac == NULL)
 800397a:	687b      	ldr	r3, [r7, #4]
 800397c:	2b00      	cmp	r3, #0
 800397e:	d101      	bne.n	8003984 <HAL_DAC_Init+0x12>
  {
    return HAL_ERROR;
 8003980:	2301      	movs	r3, #1
 8003982:	e014      	b.n	80039ae <HAL_DAC_Init+0x3c>
  }
  /* Check the parameters */
  assert_param(IS_DAC_ALL_INSTANCE(hdac->Instance));

  if (hdac->State == HAL_DAC_STATE_RESET)
 8003984:	687b      	ldr	r3, [r7, #4]
 8003986:	791b      	ldrb	r3, [r3, #4]
 8003988:	b2db      	uxtb	r3, r3
 800398a:	2b00      	cmp	r3, #0
 800398c:	d105      	bne.n	800399a <HAL_DAC_Init+0x28>
      hdac->MspInitCallback             = HAL_DAC_MspInit;
    }
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

    /* Allocate lock resource and initialize it */
    hdac->Lock = HAL_UNLOCKED;
 800398e:	687b      	ldr	r3, [r7, #4]
 8003990:	2200      	movs	r2, #0
 8003992:	715a      	strb	r2, [r3, #5]
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
    /* Init the low level hardware */
    hdac->MspInitCallback(hdac);
#else
    /* Init the low level hardware */
    HAL_DAC_MspInit(hdac);
 8003994:	6878      	ldr	r0, [r7, #4]
 8003996:	f7fc ff0b 	bl	80007b0 <HAL_DAC_MspInit>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
  }

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_BUSY;
 800399a:	687b      	ldr	r3, [r7, #4]
 800399c:	2202      	movs	r2, #2
 800399e:	711a      	strb	r2, [r3, #4]

  /* Set DAC error code to none */
  hdac->ErrorCode = HAL_DAC_ERROR_NONE;
 80039a0:	687b      	ldr	r3, [r7, #4]
 80039a2:	2200      	movs	r2, #0
 80039a4:	611a      	str	r2, [r3, #16]

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_READY;
 80039a6:	687b      	ldr	r3, [r7, #4]
 80039a8:	2201      	movs	r2, #1
 80039aa:	711a      	strb	r2, [r3, #4]

  /* Return function status */
  return HAL_OK;
 80039ac:	2300      	movs	r3, #0
}
 80039ae:	4618      	mov	r0, r3
 80039b0:	3708      	adds	r7, #8
 80039b2:	46bd      	mov	sp, r7
 80039b4:	bd80      	pop	{r7, pc}

080039b6 <HAL_DAC_Start>:
  *         (1) On this STM32 serie, parameter not available on all instances.
  *             Refer to device datasheet for channels availability.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Start(DAC_HandleTypeDef *hdac, uint32_t Channel)
{
 80039b6:	b580      	push	{r7, lr}
 80039b8:	b082      	sub	sp, #8
 80039ba:	af00      	add	r7, sp, #0
 80039bc:	6078      	str	r0, [r7, #4]
 80039be:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(hdac->Instance, Channel));

  /* Process locked */
  __HAL_LOCK(hdac);
 80039c0:	687b      	ldr	r3, [r7, #4]
 80039c2:	795b      	ldrb	r3, [r3, #5]
 80039c4:	2b01      	cmp	r3, #1
 80039c6:	d101      	bne.n	80039cc <HAL_DAC_Start+0x16>
 80039c8:	2302      	movs	r3, #2
 80039ca:	e043      	b.n	8003a54 <HAL_DAC_Start+0x9e>
 80039cc:	687b      	ldr	r3, [r7, #4]
 80039ce:	2201      	movs	r2, #1
 80039d0:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 80039d2:	687b      	ldr	r3, [r7, #4]
 80039d4:	2202      	movs	r2, #2
 80039d6:	711a      	strb	r2, [r3, #4]

  /* Enable the Peripheral */
  __HAL_DAC_ENABLE(hdac, Channel);
 80039d8:	687b      	ldr	r3, [r7, #4]
 80039da:	681b      	ldr	r3, [r3, #0]
 80039dc:	6819      	ldr	r1, [r3, #0]
 80039de:	683b      	ldr	r3, [r7, #0]
 80039e0:	f003 0310 	and.w	r3, r3, #16
 80039e4:	2201      	movs	r2, #1
 80039e6:	409a      	lsls	r2, r3
 80039e8:	687b      	ldr	r3, [r7, #4]
 80039ea:	681b      	ldr	r3, [r3, #0]
 80039ec:	430a      	orrs	r2, r1
 80039ee:	601a      	str	r2, [r3, #0]
  /* Ensure minimum wait before using peripheral after enabling it */
  HAL_Delay(1);
 80039f0:	2001      	movs	r0, #1
 80039f2:	f7fe fb4d 	bl	8002090 <HAL_Delay>

  if (Channel == DAC_CHANNEL_1)
 80039f6:	683b      	ldr	r3, [r7, #0]
 80039f8:	2b00      	cmp	r3, #0
 80039fa:	d10f      	bne.n	8003a1c <HAL_DAC_Start+0x66>
  {
    /* Check if software trigger enabled */
    if ((hdac->Instance->CR & (DAC_CR_TEN1 | DAC_CR_TSEL1)) == DAC_TRIGGER_SOFTWARE)
 80039fc:	687b      	ldr	r3, [r7, #4]
 80039fe:	681b      	ldr	r3, [r3, #0]
 8003a00:	681b      	ldr	r3, [r3, #0]
 8003a02:	f003 033e 	and.w	r3, r3, #62	; 0x3e
 8003a06:	2b02      	cmp	r3, #2
 8003a08:	d11d      	bne.n	8003a46 <HAL_DAC_Start+0x90>
    {
      /* Enable the selected DAC software conversion */
      SET_BIT(hdac->Instance->SWTRIGR, DAC_SWTRIGR_SWTRIG1);
 8003a0a:	687b      	ldr	r3, [r7, #4]
 8003a0c:	681b      	ldr	r3, [r3, #0]
 8003a0e:	685a      	ldr	r2, [r3, #4]
 8003a10:	687b      	ldr	r3, [r7, #4]
 8003a12:	681b      	ldr	r3, [r3, #0]
 8003a14:	f042 0201 	orr.w	r2, r2, #1
 8003a18:	605a      	str	r2, [r3, #4]
 8003a1a:	e014      	b.n	8003a46 <HAL_DAC_Start+0x90>
    }
  }
  else
  {
    /* Check if software trigger enabled */
    if ((hdac->Instance->CR & (DAC_CR_TEN2 | DAC_CR_TSEL2)) == (DAC_TRIGGER_SOFTWARE << (Channel & 0x10UL)))
 8003a1c:	687b      	ldr	r3, [r7, #4]
 8003a1e:	681b      	ldr	r3, [r3, #0]
 8003a20:	681b      	ldr	r3, [r3, #0]
 8003a22:	f403 1278 	and.w	r2, r3, #4063232	; 0x3e0000
 8003a26:	683b      	ldr	r3, [r7, #0]
 8003a28:	f003 0310 	and.w	r3, r3, #16
 8003a2c:	2102      	movs	r1, #2
 8003a2e:	fa01 f303 	lsl.w	r3, r1, r3
 8003a32:	429a      	cmp	r2, r3
 8003a34:	d107      	bne.n	8003a46 <HAL_DAC_Start+0x90>
    {
      /* Enable the selected DAC software conversion*/
      SET_BIT(hdac->Instance->SWTRIGR, DAC_SWTRIGR_SWTRIG2);
 8003a36:	687b      	ldr	r3, [r7, #4]
 8003a38:	681b      	ldr	r3, [r3, #0]
 8003a3a:	685a      	ldr	r2, [r3, #4]
 8003a3c:	687b      	ldr	r3, [r7, #4]
 8003a3e:	681b      	ldr	r3, [r3, #0]
 8003a40:	f042 0202 	orr.w	r2, r2, #2
 8003a44:	605a      	str	r2, [r3, #4]
    }
  }

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 8003a46:	687b      	ldr	r3, [r7, #4]
 8003a48:	2201      	movs	r2, #1
 8003a4a:	711a      	strb	r2, [r3, #4]

  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 8003a4c:	687b      	ldr	r3, [r7, #4]
 8003a4e:	2200      	movs	r2, #0
 8003a50:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 8003a52:	2300      	movs	r3, #0
}
 8003a54:	4618      	mov	r0, r3
 8003a56:	3708      	adds	r7, #8
 8003a58:	46bd      	mov	sp, r7
 8003a5a:	bd80      	pop	{r7, pc}

08003a5c <HAL_DAC_Start_DMA>:
  *            @arg DAC_ALIGN_12B_R: 12bit right data alignment selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Start_DMA(DAC_HandleTypeDef *hdac, uint32_t Channel, uint32_t *pData, uint32_t Length,
                                    uint32_t Alignment)
{
 8003a5c:	b580      	push	{r7, lr}
 8003a5e:	b086      	sub	sp, #24
 8003a60:	af00      	add	r7, sp, #0
 8003a62:	60f8      	str	r0, [r7, #12]
 8003a64:	60b9      	str	r1, [r7, #8]
 8003a66:	607a      	str	r2, [r7, #4]
 8003a68:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status;
  uint32_t tmpreg = 0U;
 8003a6a:	2300      	movs	r3, #0
 8003a6c:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(hdac->Instance, Channel));
  assert_param(IS_DAC_ALIGN(Alignment));

  /* Process locked */
  __HAL_LOCK(hdac);
 8003a6e:	68fb      	ldr	r3, [r7, #12]
 8003a70:	795b      	ldrb	r3, [r3, #5]
 8003a72:	2b01      	cmp	r3, #1
 8003a74:	d101      	bne.n	8003a7a <HAL_DAC_Start_DMA+0x1e>
 8003a76:	2302      	movs	r3, #2
 8003a78:	e0a1      	b.n	8003bbe <HAL_DAC_Start_DMA+0x162>
 8003a7a:	68fb      	ldr	r3, [r7, #12]
 8003a7c:	2201      	movs	r2, #1
 8003a7e:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 8003a80:	68fb      	ldr	r3, [r7, #12]
 8003a82:	2202      	movs	r2, #2
 8003a84:	711a      	strb	r2, [r3, #4]

  if (Channel == DAC_CHANNEL_1)
 8003a86:	68bb      	ldr	r3, [r7, #8]
 8003a88:	2b00      	cmp	r3, #0
 8003a8a:	d12a      	bne.n	8003ae2 <HAL_DAC_Start_DMA+0x86>
  {
    /* Set the DMA transfer complete callback for channel1 */
    hdac->DMA_Handle1->XferCpltCallback = DAC_DMAConvCpltCh1;
 8003a8c:	68fb      	ldr	r3, [r7, #12]
 8003a8e:	689b      	ldr	r3, [r3, #8]
 8003a90:	4a4d      	ldr	r2, [pc, #308]	; (8003bc8 <HAL_DAC_Start_DMA+0x16c>)
 8003a92:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Set the DMA half transfer complete callback for channel1 */
    hdac->DMA_Handle1->XferHalfCpltCallback = DAC_DMAHalfConvCpltCh1;
 8003a94:	68fb      	ldr	r3, [r7, #12]
 8003a96:	689b      	ldr	r3, [r3, #8]
 8003a98:	4a4c      	ldr	r2, [pc, #304]	; (8003bcc <HAL_DAC_Start_DMA+0x170>)
 8003a9a:	631a      	str	r2, [r3, #48]	; 0x30

    /* Set the DMA error callback for channel1 */
    hdac->DMA_Handle1->XferErrorCallback = DAC_DMAErrorCh1;
 8003a9c:	68fb      	ldr	r3, [r7, #12]
 8003a9e:	689b      	ldr	r3, [r3, #8]
 8003aa0:	4a4b      	ldr	r2, [pc, #300]	; (8003bd0 <HAL_DAC_Start_DMA+0x174>)
 8003aa2:	635a      	str	r2, [r3, #52]	; 0x34

    /* Enable the selected DAC channel1 DMA request */
    SET_BIT(hdac->Instance->CR, DAC_CR_DMAEN1);
 8003aa4:	68fb      	ldr	r3, [r7, #12]
 8003aa6:	681b      	ldr	r3, [r3, #0]
 8003aa8:	681a      	ldr	r2, [r3, #0]
 8003aaa:	68fb      	ldr	r3, [r7, #12]
 8003aac:	681b      	ldr	r3, [r3, #0]
 8003aae:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8003ab2:	601a      	str	r2, [r3, #0]

    /* Case of use of channel 1 */
    switch (Alignment)
 8003ab4:	6a3b      	ldr	r3, [r7, #32]
 8003ab6:	2b04      	cmp	r3, #4
 8003ab8:	d009      	beq.n	8003ace <HAL_DAC_Start_DMA+0x72>
 8003aba:	2b08      	cmp	r3, #8
 8003abc:	d00c      	beq.n	8003ad8 <HAL_DAC_Start_DMA+0x7c>
 8003abe:	2b00      	cmp	r3, #0
 8003ac0:	d000      	beq.n	8003ac4 <HAL_DAC_Start_DMA+0x68>
      case DAC_ALIGN_8B_R:
        /* Get DHR8R1 address */
        tmpreg = (uint32_t)&hdac->Instance->DHR8R1;
        break;
      default:
        break;
 8003ac2:	e039      	b.n	8003b38 <HAL_DAC_Start_DMA+0xdc>
        tmpreg = (uint32_t)&hdac->Instance->DHR12R1;
 8003ac4:	68fb      	ldr	r3, [r7, #12]
 8003ac6:	681b      	ldr	r3, [r3, #0]
 8003ac8:	3308      	adds	r3, #8
 8003aca:	613b      	str	r3, [r7, #16]
        break;
 8003acc:	e034      	b.n	8003b38 <HAL_DAC_Start_DMA+0xdc>
        tmpreg = (uint32_t)&hdac->Instance->DHR12L1;
 8003ace:	68fb      	ldr	r3, [r7, #12]
 8003ad0:	681b      	ldr	r3, [r3, #0]
 8003ad2:	330c      	adds	r3, #12
 8003ad4:	613b      	str	r3, [r7, #16]
        break;
 8003ad6:	e02f      	b.n	8003b38 <HAL_DAC_Start_DMA+0xdc>
        tmpreg = (uint32_t)&hdac->Instance->DHR8R1;
 8003ad8:	68fb      	ldr	r3, [r7, #12]
 8003ada:	681b      	ldr	r3, [r3, #0]
 8003adc:	3310      	adds	r3, #16
 8003ade:	613b      	str	r3, [r7, #16]
        break;
 8003ae0:	e02a      	b.n	8003b38 <HAL_DAC_Start_DMA+0xdc>
    }
  }
  else
  {
    /* Set the DMA transfer complete callback for channel2 */
    hdac->DMA_Handle2->XferCpltCallback = DAC_DMAConvCpltCh2;
 8003ae2:	68fb      	ldr	r3, [r7, #12]
 8003ae4:	68db      	ldr	r3, [r3, #12]
 8003ae6:	4a3b      	ldr	r2, [pc, #236]	; (8003bd4 <HAL_DAC_Start_DMA+0x178>)
 8003ae8:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Set the DMA half transfer complete callback for channel2 */
    hdac->DMA_Handle2->XferHalfCpltCallback = DAC_DMAHalfConvCpltCh2;
 8003aea:	68fb      	ldr	r3, [r7, #12]
 8003aec:	68db      	ldr	r3, [r3, #12]
 8003aee:	4a3a      	ldr	r2, [pc, #232]	; (8003bd8 <HAL_DAC_Start_DMA+0x17c>)
 8003af0:	631a      	str	r2, [r3, #48]	; 0x30

    /* Set the DMA error callback for channel2 */
    hdac->DMA_Handle2->XferErrorCallback = DAC_DMAErrorCh2;
 8003af2:	68fb      	ldr	r3, [r7, #12]
 8003af4:	68db      	ldr	r3, [r3, #12]
 8003af6:	4a39      	ldr	r2, [pc, #228]	; (8003bdc <HAL_DAC_Start_DMA+0x180>)
 8003af8:	635a      	str	r2, [r3, #52]	; 0x34

    /* Enable the selected DAC channel2 DMA request */
    SET_BIT(hdac->Instance->CR, DAC_CR_DMAEN2);
 8003afa:	68fb      	ldr	r3, [r7, #12]
 8003afc:	681b      	ldr	r3, [r3, #0]
 8003afe:	681a      	ldr	r2, [r3, #0]
 8003b00:	68fb      	ldr	r3, [r7, #12]
 8003b02:	681b      	ldr	r3, [r3, #0]
 8003b04:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8003b08:	601a      	str	r2, [r3, #0]

    /* Case of use of channel 2 */
    switch (Alignment)
 8003b0a:	6a3b      	ldr	r3, [r7, #32]
 8003b0c:	2b04      	cmp	r3, #4
 8003b0e:	d009      	beq.n	8003b24 <HAL_DAC_Start_DMA+0xc8>
 8003b10:	2b08      	cmp	r3, #8
 8003b12:	d00c      	beq.n	8003b2e <HAL_DAC_Start_DMA+0xd2>
 8003b14:	2b00      	cmp	r3, #0
 8003b16:	d000      	beq.n	8003b1a <HAL_DAC_Start_DMA+0xbe>
      case DAC_ALIGN_8B_R:
        /* Get DHR8R2 address */
        tmpreg = (uint32_t)&hdac->Instance->DHR8R2;
        break;
      default:
        break;
 8003b18:	e00e      	b.n	8003b38 <HAL_DAC_Start_DMA+0xdc>
        tmpreg = (uint32_t)&hdac->Instance->DHR12R2;
 8003b1a:	68fb      	ldr	r3, [r7, #12]
 8003b1c:	681b      	ldr	r3, [r3, #0]
 8003b1e:	3314      	adds	r3, #20
 8003b20:	613b      	str	r3, [r7, #16]
        break;
 8003b22:	e009      	b.n	8003b38 <HAL_DAC_Start_DMA+0xdc>
        tmpreg = (uint32_t)&hdac->Instance->DHR12L2;
 8003b24:	68fb      	ldr	r3, [r7, #12]
 8003b26:	681b      	ldr	r3, [r3, #0]
 8003b28:	3318      	adds	r3, #24
 8003b2a:	613b      	str	r3, [r7, #16]
        break;
 8003b2c:	e004      	b.n	8003b38 <HAL_DAC_Start_DMA+0xdc>
        tmpreg = (uint32_t)&hdac->Instance->DHR8R2;
 8003b2e:	68fb      	ldr	r3, [r7, #12]
 8003b30:	681b      	ldr	r3, [r3, #0]
 8003b32:	331c      	adds	r3, #28
 8003b34:	613b      	str	r3, [r7, #16]
        break;
 8003b36:	bf00      	nop
    }
  }

  /* Enable the DMA channel */
  if (Channel == DAC_CHANNEL_1)
 8003b38:	68bb      	ldr	r3, [r7, #8]
 8003b3a:	2b00      	cmp	r3, #0
 8003b3c:	d111      	bne.n	8003b62 <HAL_DAC_Start_DMA+0x106>
  {
    /* Enable the DAC DMA underrun interrupt */
    __HAL_DAC_ENABLE_IT(hdac, DAC_IT_DMAUDR1);
 8003b3e:	68fb      	ldr	r3, [r7, #12]
 8003b40:	681b      	ldr	r3, [r3, #0]
 8003b42:	681a      	ldr	r2, [r3, #0]
 8003b44:	68fb      	ldr	r3, [r7, #12]
 8003b46:	681b      	ldr	r3, [r3, #0]
 8003b48:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8003b4c:	601a      	str	r2, [r3, #0]

    /* Enable the DMA channel */
    status = HAL_DMA_Start_IT(hdac->DMA_Handle1, (uint32_t)pData, tmpreg, Length);
 8003b4e:	68fb      	ldr	r3, [r7, #12]
 8003b50:	6898      	ldr	r0, [r3, #8]
 8003b52:	6879      	ldr	r1, [r7, #4]
 8003b54:	683b      	ldr	r3, [r7, #0]
 8003b56:	693a      	ldr	r2, [r7, #16]
 8003b58:	f000 fb66 	bl	8004228 <HAL_DMA_Start_IT>
 8003b5c:	4603      	mov	r3, r0
 8003b5e:	75fb      	strb	r3, [r7, #23]
 8003b60:	e010      	b.n	8003b84 <HAL_DAC_Start_DMA+0x128>
  }
  else
  {
    /* Enable the DAC DMA underrun interrupt */
    __HAL_DAC_ENABLE_IT(hdac, DAC_IT_DMAUDR2);
 8003b62:	68fb      	ldr	r3, [r7, #12]
 8003b64:	681b      	ldr	r3, [r3, #0]
 8003b66:	681a      	ldr	r2, [r3, #0]
 8003b68:	68fb      	ldr	r3, [r7, #12]
 8003b6a:	681b      	ldr	r3, [r3, #0]
 8003b6c:	f042 5200 	orr.w	r2, r2, #536870912	; 0x20000000
 8003b70:	601a      	str	r2, [r3, #0]

    /* Enable the DMA channel */
    status = HAL_DMA_Start_IT(hdac->DMA_Handle2, (uint32_t)pData, tmpreg, Length);
 8003b72:	68fb      	ldr	r3, [r7, #12]
 8003b74:	68d8      	ldr	r0, [r3, #12]
 8003b76:	6879      	ldr	r1, [r7, #4]
 8003b78:	683b      	ldr	r3, [r7, #0]
 8003b7a:	693a      	ldr	r2, [r7, #16]
 8003b7c:	f000 fb54 	bl	8004228 <HAL_DMA_Start_IT>
 8003b80:	4603      	mov	r3, r0
 8003b82:	75fb      	strb	r3, [r7, #23]
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hdac);
 8003b84:	68fb      	ldr	r3, [r7, #12]
 8003b86:	2200      	movs	r2, #0
 8003b88:	715a      	strb	r2, [r3, #5]

  if (status == HAL_OK)
 8003b8a:	7dfb      	ldrb	r3, [r7, #23]
 8003b8c:	2b00      	cmp	r3, #0
 8003b8e:	d10f      	bne.n	8003bb0 <HAL_DAC_Start_DMA+0x154>
  {
    /* Enable the Peripheral */
    __HAL_DAC_ENABLE(hdac, Channel);
 8003b90:	68fb      	ldr	r3, [r7, #12]
 8003b92:	681b      	ldr	r3, [r3, #0]
 8003b94:	6819      	ldr	r1, [r3, #0]
 8003b96:	68bb      	ldr	r3, [r7, #8]
 8003b98:	f003 0310 	and.w	r3, r3, #16
 8003b9c:	2201      	movs	r2, #1
 8003b9e:	409a      	lsls	r2, r3
 8003ba0:	68fb      	ldr	r3, [r7, #12]
 8003ba2:	681b      	ldr	r3, [r3, #0]
 8003ba4:	430a      	orrs	r2, r1
 8003ba6:	601a      	str	r2, [r3, #0]
    /* Ensure minimum wait before using peripheral after enabling it */
    HAL_Delay(1);
 8003ba8:	2001      	movs	r0, #1
 8003baa:	f7fe fa71 	bl	8002090 <HAL_Delay>
 8003bae:	e005      	b.n	8003bbc <HAL_DAC_Start_DMA+0x160>
  }
  else
  {
    hdac->ErrorCode |= HAL_DAC_ERROR_DMA;
 8003bb0:	68fb      	ldr	r3, [r7, #12]
 8003bb2:	691b      	ldr	r3, [r3, #16]
 8003bb4:	f043 0204 	orr.w	r2, r3, #4
 8003bb8:	68fb      	ldr	r3, [r7, #12]
 8003bba:	611a      	str	r2, [r3, #16]
  }

  /* Return function status */
  return status;
 8003bbc:	7dfb      	ldrb	r3, [r7, #23]
}
 8003bbe:	4618      	mov	r0, r3
 8003bc0:	3718      	adds	r7, #24
 8003bc2:	46bd      	mov	sp, r7
 8003bc4:	bd80      	pop	{r7, pc}
 8003bc6:	bf00      	nop
 8003bc8:	08003fc5 	.word	0x08003fc5
 8003bcc:	08003fe7 	.word	0x08003fe7
 8003bd0:	08004003 	.word	0x08004003
 8003bd4:	0800406d 	.word	0x0800406d
 8003bd8:	0800408f 	.word	0x0800408f
 8003bdc:	080040ab 	.word	0x080040ab

08003be0 <HAL_DAC_SetValue>:
  *            @arg DAC_ALIGN_12B_R: 12bit right data alignment selected
  * @param  Data Data to be loaded in the selected data holding register.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_SetValue(DAC_HandleTypeDef *hdac, uint32_t Channel, uint32_t Alignment, uint32_t Data)
{
 8003be0:	b480      	push	{r7}
 8003be2:	b087      	sub	sp, #28
 8003be4:	af00      	add	r7, sp, #0
 8003be6:	60f8      	str	r0, [r7, #12]
 8003be8:	60b9      	str	r1, [r7, #8]
 8003bea:	607a      	str	r2, [r7, #4]
 8003bec:	603b      	str	r3, [r7, #0]
  __IO uint32_t tmp = 0;
 8003bee:	2300      	movs	r3, #0
 8003bf0:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(hdac->Instance, Channel));
  assert_param(IS_DAC_ALIGN(Alignment));
  /* In case DMA Double data mode is activated, DATA range is almost full uin32_t one: no check */
  if ((hdac->Instance->MCR & (DAC_MCR_DMADOUBLE1 << (Channel & 0x10UL))) == 0UL)
 8003bf2:	68fb      	ldr	r3, [r7, #12]
 8003bf4:	681b      	ldr	r3, [r3, #0]
 8003bf6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
  {
    assert_param(IS_DAC_DATA(Data));
  }

  tmp = (uint32_t)hdac->Instance;
 8003bf8:	68fb      	ldr	r3, [r7, #12]
 8003bfa:	681b      	ldr	r3, [r3, #0]
 8003bfc:	617b      	str	r3, [r7, #20]
  if (Channel == DAC_CHANNEL_1)
 8003bfe:	68bb      	ldr	r3, [r7, #8]
 8003c00:	2b00      	cmp	r3, #0
 8003c02:	d105      	bne.n	8003c10 <HAL_DAC_SetValue+0x30>
  {
    tmp += DAC_DHR12R1_ALIGNMENT(Alignment);
 8003c04:	697a      	ldr	r2, [r7, #20]
 8003c06:	687b      	ldr	r3, [r7, #4]
 8003c08:	4413      	add	r3, r2
 8003c0a:	3308      	adds	r3, #8
 8003c0c:	617b      	str	r3, [r7, #20]
 8003c0e:	e004      	b.n	8003c1a <HAL_DAC_SetValue+0x3a>
  }
  else
  {
    tmp += DAC_DHR12R2_ALIGNMENT(Alignment);
 8003c10:	697a      	ldr	r2, [r7, #20]
 8003c12:	687b      	ldr	r3, [r7, #4]
 8003c14:	4413      	add	r3, r2
 8003c16:	3314      	adds	r3, #20
 8003c18:	617b      	str	r3, [r7, #20]
  }

  /* Set the DAC channel selected data holding register */
  *(__IO uint32_t *) tmp = Data;
 8003c1a:	697b      	ldr	r3, [r7, #20]
 8003c1c:	461a      	mov	r2, r3
 8003c1e:	683b      	ldr	r3, [r7, #0]
 8003c20:	6013      	str	r3, [r2, #0]

  /* Return function status */
  return HAL_OK;
 8003c22:	2300      	movs	r3, #0
}
 8003c24:	4618      	mov	r0, r3
 8003c26:	371c      	adds	r7, #28
 8003c28:	46bd      	mov	sp, r7
 8003c2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c2e:	4770      	bx	lr

08003c30 <HAL_DAC_ConvCpltCallbackCh1>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DAC_ConvCpltCallbackCh1(DAC_HandleTypeDef *hdac)
{
 8003c30:	b480      	push	{r7}
 8003c32:	b083      	sub	sp, #12
 8003c34:	af00      	add	r7, sp, #0
 8003c36:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DAC_ConvCpltCallbackCh1 could be implemented in the user file
   */
}
 8003c38:	bf00      	nop
 8003c3a:	370c      	adds	r7, #12
 8003c3c:	46bd      	mov	sp, r7
 8003c3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c42:	4770      	bx	lr

08003c44 <HAL_DAC_ConvHalfCpltCallbackCh1>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DAC_ConvHalfCpltCallbackCh1(DAC_HandleTypeDef *hdac)
{
 8003c44:	b480      	push	{r7}
 8003c46:	b083      	sub	sp, #12
 8003c48:	af00      	add	r7, sp, #0
 8003c4a:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DAC_ConvHalfCpltCallbackCh1 could be implemented in the user file
   */
}
 8003c4c:	bf00      	nop
 8003c4e:	370c      	adds	r7, #12
 8003c50:	46bd      	mov	sp, r7
 8003c52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c56:	4770      	bx	lr

08003c58 <HAL_DAC_ErrorCallbackCh1>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DAC_ErrorCallbackCh1(DAC_HandleTypeDef *hdac)
{
 8003c58:	b480      	push	{r7}
 8003c5a:	b083      	sub	sp, #12
 8003c5c:	af00      	add	r7, sp, #0
 8003c5e:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DAC_ErrorCallbackCh1 could be implemented in the user file
   */
}
 8003c60:	bf00      	nop
 8003c62:	370c      	adds	r7, #12
 8003c64:	46bd      	mov	sp, r7
 8003c66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c6a:	4770      	bx	lr

08003c6c <HAL_DAC_ConfigChannel>:
  *         (1) On this STM32 serie, parameter not available on all instances.
  *             Refer to device datasheet for channels availability.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_ConfigChannel(DAC_HandleTypeDef *hdac, DAC_ChannelConfTypeDef *sConfig, uint32_t Channel)
{
 8003c6c:	b580      	push	{r7, lr}
 8003c6e:	b08a      	sub	sp, #40	; 0x28
 8003c70:	af00      	add	r7, sp, #0
 8003c72:	60f8      	str	r0, [r7, #12]
 8003c74:	60b9      	str	r1, [r7, #8]
 8003c76:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg1;
  uint32_t tmpreg2;
  uint32_t tickstart = 0U;
 8003c78:	2300      	movs	r3, #0
 8003c7a:	61fb      	str	r3, [r7, #28]
  assert_param(IS_DAC_CHANNEL(hdac->Instance, Channel));
  assert_param(IS_FUNCTIONAL_STATE(sConfig->DAC_DMADoubleDataMode));
  assert_param(IS_FUNCTIONAL_STATE(sConfig->DAC_SignedFormat));

  /* Process locked */
  __HAL_LOCK(hdac);
 8003c7c:	68fb      	ldr	r3, [r7, #12]
 8003c7e:	795b      	ldrb	r3, [r3, #5]
 8003c80:	2b01      	cmp	r3, #1
 8003c82:	d101      	bne.n	8003c88 <HAL_DAC_ConfigChannel+0x1c>
 8003c84:	2302      	movs	r3, #2
 8003c86:	e194      	b.n	8003fb2 <HAL_DAC_ConfigChannel+0x346>
 8003c88:	68fb      	ldr	r3, [r7, #12]
 8003c8a:	2201      	movs	r2, #1
 8003c8c:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 8003c8e:	68fb      	ldr	r3, [r7, #12]
 8003c90:	2202      	movs	r2, #2
 8003c92:	711a      	strb	r2, [r3, #4]

  if (sConfig->DAC_SampleAndHold == DAC_SAMPLEANDHOLD_ENABLE)
 8003c94:	68bb      	ldr	r3, [r7, #8]
 8003c96:	689b      	ldr	r3, [r3, #8]
 8003c98:	2b04      	cmp	r3, #4
 8003c9a:	d174      	bne.n	8003d86 <HAL_DAC_ConfigChannel+0x11a>
    /* Sample on old configuration */
  {
    /* SampleTime */
    if (Channel == DAC_CHANNEL_1)
 8003c9c:	687b      	ldr	r3, [r7, #4]
 8003c9e:	2b00      	cmp	r3, #0
 8003ca0:	d137      	bne.n	8003d12 <HAL_DAC_ConfigChannel+0xa6>
    {
      /* Get timeout */
      tickstart = HAL_GetTick();
 8003ca2:	f7fe f9e9 	bl	8002078 <HAL_GetTick>
 8003ca6:	61f8      	str	r0, [r7, #28]

      /* SHSR1 can be written when BWST1 is cleared */
      while (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 8003ca8:	e011      	b.n	8003cce <HAL_DAC_ConfigChannel+0x62>
      {
        /* Check for the Timeout */
        if ((HAL_GetTick() - tickstart) > TIMEOUT_DAC_CALIBCONFIG)
 8003caa:	f7fe f9e5 	bl	8002078 <HAL_GetTick>
 8003cae:	4602      	mov	r2, r0
 8003cb0:	69fb      	ldr	r3, [r7, #28]
 8003cb2:	1ad3      	subs	r3, r2, r3
 8003cb4:	2b01      	cmp	r3, #1
 8003cb6:	d90a      	bls.n	8003cce <HAL_DAC_ConfigChannel+0x62>
        {
          /* Update error code */
          SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_TIMEOUT);
 8003cb8:	68fb      	ldr	r3, [r7, #12]
 8003cba:	691b      	ldr	r3, [r3, #16]
 8003cbc:	f043 0208 	orr.w	r2, r3, #8
 8003cc0:	68fb      	ldr	r3, [r7, #12]
 8003cc2:	611a      	str	r2, [r3, #16]

          /* Change the DMA state */
          hdac->State = HAL_DAC_STATE_TIMEOUT;
 8003cc4:	68fb      	ldr	r3, [r7, #12]
 8003cc6:	2203      	movs	r2, #3
 8003cc8:	711a      	strb	r2, [r3, #4]

          return HAL_TIMEOUT;
 8003cca:	2303      	movs	r3, #3
 8003ccc:	e171      	b.n	8003fb2 <HAL_DAC_ConfigChannel+0x346>
      while (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 8003cce:	68fb      	ldr	r3, [r7, #12]
 8003cd0:	681b      	ldr	r3, [r3, #0]
 8003cd2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003cd4:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003cd8:	2b00      	cmp	r3, #0
 8003cda:	d1e6      	bne.n	8003caa <HAL_DAC_ConfigChannel+0x3e>
        }
      }
      HAL_Delay(1);
 8003cdc:	2001      	movs	r0, #1
 8003cde:	f7fe f9d7 	bl	8002090 <HAL_Delay>
      hdac->Instance->SHSR1 = sConfig->DAC_SampleAndHoldConfig.DAC_SampleTime;
 8003ce2:	68fb      	ldr	r3, [r7, #12]
 8003ce4:	681b      	ldr	r3, [r3, #0]
 8003ce6:	68ba      	ldr	r2, [r7, #8]
 8003ce8:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8003cea:	641a      	str	r2, [r3, #64]	; 0x40
 8003cec:	e01e      	b.n	8003d2c <HAL_DAC_ConfigChannel+0xc0>
      /* SHSR2 can be written when BWST2 is cleared */

      while (((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
      {
        /* Check for the Timeout */
        if ((HAL_GetTick() - tickstart) > TIMEOUT_DAC_CALIBCONFIG)
 8003cee:	f7fe f9c3 	bl	8002078 <HAL_GetTick>
 8003cf2:	4602      	mov	r2, r0
 8003cf4:	69fb      	ldr	r3, [r7, #28]
 8003cf6:	1ad3      	subs	r3, r2, r3
 8003cf8:	2b01      	cmp	r3, #1
 8003cfa:	d90a      	bls.n	8003d12 <HAL_DAC_ConfigChannel+0xa6>
        {
          /* Update error code */
          SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_TIMEOUT);
 8003cfc:	68fb      	ldr	r3, [r7, #12]
 8003cfe:	691b      	ldr	r3, [r3, #16]
 8003d00:	f043 0208 	orr.w	r2, r3, #8
 8003d04:	68fb      	ldr	r3, [r7, #12]
 8003d06:	611a      	str	r2, [r3, #16]

          /* Change the DMA state */
          hdac->State = HAL_DAC_STATE_TIMEOUT;
 8003d08:	68fb      	ldr	r3, [r7, #12]
 8003d0a:	2203      	movs	r2, #3
 8003d0c:	711a      	strb	r2, [r3, #4]

          return HAL_TIMEOUT;
 8003d0e:	2303      	movs	r3, #3
 8003d10:	e14f      	b.n	8003fb2 <HAL_DAC_ConfigChannel+0x346>
      while (((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
 8003d12:	68fb      	ldr	r3, [r7, #12]
 8003d14:	681b      	ldr	r3, [r3, #0]
 8003d16:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003d18:	2b00      	cmp	r3, #0
 8003d1a:	dbe8      	blt.n	8003cee <HAL_DAC_ConfigChannel+0x82>
        }
      }
      HAL_Delay(1U);
 8003d1c:	2001      	movs	r0, #1
 8003d1e:	f7fe f9b7 	bl	8002090 <HAL_Delay>
      hdac->Instance->SHSR2 = sConfig->DAC_SampleAndHoldConfig.DAC_SampleTime;
 8003d22:	68fb      	ldr	r3, [r7, #12]
 8003d24:	681b      	ldr	r3, [r3, #0]
 8003d26:	68ba      	ldr	r2, [r7, #8]
 8003d28:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8003d2a:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* HoldTime */
    MODIFY_REG(hdac->Instance->SHHR, DAC_SHHR_THOLD1 << (Channel & 0x10UL), (sConfig->DAC_SampleAndHoldConfig.DAC_HoldTime) << (Channel & 0x10UL));
 8003d2c:	68fb      	ldr	r3, [r7, #12]
 8003d2e:	681b      	ldr	r3, [r3, #0]
 8003d30:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8003d32:	687b      	ldr	r3, [r7, #4]
 8003d34:	f003 0310 	and.w	r3, r3, #16
 8003d38:	f240 31ff 	movw	r1, #1023	; 0x3ff
 8003d3c:	fa01 f303 	lsl.w	r3, r1, r3
 8003d40:	43db      	mvns	r3, r3
 8003d42:	ea02 0103 	and.w	r1, r2, r3
 8003d46:	68bb      	ldr	r3, [r7, #8]
 8003d48:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8003d4a:	687b      	ldr	r3, [r7, #4]
 8003d4c:	f003 0310 	and.w	r3, r3, #16
 8003d50:	409a      	lsls	r2, r3
 8003d52:	68fb      	ldr	r3, [r7, #12]
 8003d54:	681b      	ldr	r3, [r3, #0]
 8003d56:	430a      	orrs	r2, r1
 8003d58:	649a      	str	r2, [r3, #72]	; 0x48
    /* RefreshTime */
    MODIFY_REG(hdac->Instance->SHRR, DAC_SHRR_TREFRESH1 << (Channel & 0x10UL), (sConfig->DAC_SampleAndHoldConfig.DAC_RefreshTime) << (Channel & 0x10UL));
 8003d5a:	68fb      	ldr	r3, [r7, #12]
 8003d5c:	681b      	ldr	r3, [r3, #0]
 8003d5e:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8003d60:	687b      	ldr	r3, [r7, #4]
 8003d62:	f003 0310 	and.w	r3, r3, #16
 8003d66:	21ff      	movs	r1, #255	; 0xff
 8003d68:	fa01 f303 	lsl.w	r3, r1, r3
 8003d6c:	43db      	mvns	r3, r3
 8003d6e:	ea02 0103 	and.w	r1, r2, r3
 8003d72:	68bb      	ldr	r3, [r7, #8]
 8003d74:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003d76:	687b      	ldr	r3, [r7, #4]
 8003d78:	f003 0310 	and.w	r3, r3, #16
 8003d7c:	409a      	lsls	r2, r3
 8003d7e:	68fb      	ldr	r3, [r7, #12]
 8003d80:	681b      	ldr	r3, [r3, #0]
 8003d82:	430a      	orrs	r2, r1
 8003d84:	64da      	str	r2, [r3, #76]	; 0x4c
  }

  if (sConfig->DAC_UserTrimming == DAC_TRIMMING_USER)
 8003d86:	68bb      	ldr	r3, [r7, #8]
 8003d88:	69db      	ldr	r3, [r3, #28]
 8003d8a:	2b01      	cmp	r3, #1
 8003d8c:	d11d      	bne.n	8003dca <HAL_DAC_ConfigChannel+0x15e>
    /* USER TRIMMING */
  {
    /* Get the DAC CCR value */
    tmpreg1 = hdac->Instance->CCR;
 8003d8e:	68fb      	ldr	r3, [r7, #12]
 8003d90:	681b      	ldr	r3, [r3, #0]
 8003d92:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003d94:	627b      	str	r3, [r7, #36]	; 0x24
    /* Clear trimming value */
    tmpreg1 &= ~(((uint32_t)(DAC_CCR_OTRIM1)) << (Channel & 0x10UL));
 8003d96:	687b      	ldr	r3, [r7, #4]
 8003d98:	f003 0310 	and.w	r3, r3, #16
 8003d9c:	221f      	movs	r2, #31
 8003d9e:	fa02 f303 	lsl.w	r3, r2, r3
 8003da2:	43db      	mvns	r3, r3
 8003da4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003da6:	4013      	ands	r3, r2
 8003da8:	627b      	str	r3, [r7, #36]	; 0x24
    /* Configure for the selected trimming offset */
    tmpreg2 = sConfig->DAC_TrimmingValue;
 8003daa:	68bb      	ldr	r3, [r7, #8]
 8003dac:	6a1b      	ldr	r3, [r3, #32]
 8003dae:	61bb      	str	r3, [r7, #24]
    /* Calculate CCR register value depending on DAC_Channel */
    tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 8003db0:	687b      	ldr	r3, [r7, #4]
 8003db2:	f003 0310 	and.w	r3, r3, #16
 8003db6:	69ba      	ldr	r2, [r7, #24]
 8003db8:	fa02 f303 	lsl.w	r3, r2, r3
 8003dbc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003dbe:	4313      	orrs	r3, r2
 8003dc0:	627b      	str	r3, [r7, #36]	; 0x24
    /* Write to DAC CCR */
    hdac->Instance->CCR = tmpreg1;
 8003dc2:	68fb      	ldr	r3, [r7, #12]
 8003dc4:	681b      	ldr	r3, [r3, #0]
 8003dc6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003dc8:	639a      	str	r2, [r3, #56]	; 0x38
  }
  /* else factory trimming is used (factory setting are available at reset)*/
  /* SW Nothing has nothing to do */

  /* Get the DAC MCR value */
  tmpreg1 = hdac->Instance->MCR;
 8003dca:	68fb      	ldr	r3, [r7, #12]
 8003dcc:	681b      	ldr	r3, [r3, #0]
 8003dce:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003dd0:	627b      	str	r3, [r7, #36]	; 0x24
  /* Clear DAC_MCR_MODEx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_MCR_MODE1)) << (Channel & 0x10UL));
 8003dd2:	687b      	ldr	r3, [r7, #4]
 8003dd4:	f003 0310 	and.w	r3, r3, #16
 8003dd8:	2207      	movs	r2, #7
 8003dda:	fa02 f303 	lsl.w	r3, r2, r3
 8003dde:	43db      	mvns	r3, r3
 8003de0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003de2:	4013      	ands	r3, r2
 8003de4:	627b      	str	r3, [r7, #36]	; 0x24
  /* Configure for the selected DAC channel: mode, buffer output & on chip peripheral connect */
  if ((sConfig->DAC_ConnectOnChipPeripheral & DAC_CHIPCONNECT_EXTERNAL) == DAC_CHIPCONNECT_EXTERNAL)
 8003de6:	68bb      	ldr	r3, [r7, #8]
 8003de8:	699b      	ldr	r3, [r3, #24]
 8003dea:	f003 0301 	and.w	r3, r3, #1
 8003dee:	2b00      	cmp	r3, #0
 8003df0:	d002      	beq.n	8003df8 <HAL_DAC_ConfigChannel+0x18c>
  {
    connectOnChip = 0x00000000UL;
 8003df2:	2300      	movs	r3, #0
 8003df4:	623b      	str	r3, [r7, #32]
 8003df6:	e011      	b.n	8003e1c <HAL_DAC_ConfigChannel+0x1b0>
  }
  else if ((sConfig->DAC_ConnectOnChipPeripheral & DAC_CHIPCONNECT_INTERNAL) == DAC_CHIPCONNECT_INTERNAL)
 8003df8:	68bb      	ldr	r3, [r7, #8]
 8003dfa:	699b      	ldr	r3, [r3, #24]
 8003dfc:	f003 0302 	and.w	r3, r3, #2
 8003e00:	2b00      	cmp	r3, #0
 8003e02:	d002      	beq.n	8003e0a <HAL_DAC_ConfigChannel+0x19e>
  {
    connectOnChip = DAC_MCR_MODE1_0;
 8003e04:	2301      	movs	r3, #1
 8003e06:	623b      	str	r3, [r7, #32]
 8003e08:	e008      	b.n	8003e1c <HAL_DAC_ConfigChannel+0x1b0>
  }
  else /* (sConfig->DAC_ConnectOnChipPeripheral & DAC_CHIPCONNECT_BOTH) == DAC_CHIPCONNECT_BOTH */
  {
    if (sConfig->DAC_OutputBuffer == DAC_OUTPUTBUFFER_ENABLE)
 8003e0a:	68bb      	ldr	r3, [r7, #8]
 8003e0c:	695b      	ldr	r3, [r3, #20]
 8003e0e:	2b00      	cmp	r3, #0
 8003e10:	d102      	bne.n	8003e18 <HAL_DAC_ConfigChannel+0x1ac>
    {
      connectOnChip = DAC_MCR_MODE1_0;
 8003e12:	2301      	movs	r3, #1
 8003e14:	623b      	str	r3, [r7, #32]
 8003e16:	e001      	b.n	8003e1c <HAL_DAC_ConfigChannel+0x1b0>
    }
    else
    {
      connectOnChip = 0x00000000UL;
 8003e18:	2300      	movs	r3, #0
 8003e1a:	623b      	str	r3, [r7, #32]
    }
  }
  tmpreg2 = (sConfig->DAC_SampleAndHold | sConfig->DAC_OutputBuffer | connectOnChip);
 8003e1c:	68bb      	ldr	r3, [r7, #8]
 8003e1e:	689a      	ldr	r2, [r3, #8]
 8003e20:	68bb      	ldr	r3, [r7, #8]
 8003e22:	695b      	ldr	r3, [r3, #20]
 8003e24:	4313      	orrs	r3, r2
 8003e26:	6a3a      	ldr	r2, [r7, #32]
 8003e28:	4313      	orrs	r3, r2
 8003e2a:	61bb      	str	r3, [r7, #24]
  /* Clear DAC_MCR_DMADOUBLEx */
  tmpreg1 &= ~(((uint32_t)(DAC_MCR_DMADOUBLE1)) << (Channel & 0x10UL));
 8003e2c:	687b      	ldr	r3, [r7, #4]
 8003e2e:	f003 0310 	and.w	r3, r3, #16
 8003e32:	f44f 7280 	mov.w	r2, #256	; 0x100
 8003e36:	fa02 f303 	lsl.w	r3, r2, r3
 8003e3a:	43db      	mvns	r3, r3
 8003e3c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003e3e:	4013      	ands	r3, r2
 8003e40:	627b      	str	r3, [r7, #36]	; 0x24
  /* Configure for the selected DAC channel: DMA double data mode */
  tmpreg2 |= (sConfig->DAC_DMADoubleDataMode == ENABLE) ? DAC_MCR_DMADOUBLE1 : 0UL;
 8003e42:	68bb      	ldr	r3, [r7, #8]
 8003e44:	791b      	ldrb	r3, [r3, #4]
 8003e46:	2b01      	cmp	r3, #1
 8003e48:	d102      	bne.n	8003e50 <HAL_DAC_ConfigChannel+0x1e4>
 8003e4a:	f44f 7380 	mov.w	r3, #256	; 0x100
 8003e4e:	e000      	b.n	8003e52 <HAL_DAC_ConfigChannel+0x1e6>
 8003e50:	2300      	movs	r3, #0
 8003e52:	69ba      	ldr	r2, [r7, #24]
 8003e54:	4313      	orrs	r3, r2
 8003e56:	61bb      	str	r3, [r7, #24]
  /* Clear DAC_MCR_SINFORMATx */
  tmpreg1 &= ~(((uint32_t)(DAC_MCR_SINFORMAT1)) << (Channel & 0x10UL));
 8003e58:	687b      	ldr	r3, [r7, #4]
 8003e5a:	f003 0310 	and.w	r3, r3, #16
 8003e5e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003e62:	fa02 f303 	lsl.w	r3, r2, r3
 8003e66:	43db      	mvns	r3, r3
 8003e68:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003e6a:	4013      	ands	r3, r2
 8003e6c:	627b      	str	r3, [r7, #36]	; 0x24
  /* Configure for the selected DAC channel: Signed format */
  tmpreg2 |= (sConfig->DAC_SignedFormat == ENABLE) ? DAC_MCR_SINFORMAT1 : 0UL;
 8003e6e:	68bb      	ldr	r3, [r7, #8]
 8003e70:	795b      	ldrb	r3, [r3, #5]
 8003e72:	2b01      	cmp	r3, #1
 8003e74:	d102      	bne.n	8003e7c <HAL_DAC_ConfigChannel+0x210>
 8003e76:	f44f 7300 	mov.w	r3, #512	; 0x200
 8003e7a:	e000      	b.n	8003e7e <HAL_DAC_ConfigChannel+0x212>
 8003e7c:	2300      	movs	r3, #0
 8003e7e:	69ba      	ldr	r2, [r7, #24]
 8003e80:	4313      	orrs	r3, r2
 8003e82:	61bb      	str	r3, [r7, #24]
  /* Clear DAC_MCR_HFSEL bits */
  tmpreg1 &= ~(DAC_MCR_HFSEL);
 8003e84:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e86:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8003e8a:	627b      	str	r3, [r7, #36]	; 0x24
  /* Configure for both DAC channels: high frequency mode */
  if (DAC_HIGH_FREQUENCY_INTERFACE_MODE_AUTOMATIC == sConfig->DAC_HighFrequency)
 8003e8c:	68bb      	ldr	r3, [r7, #8]
 8003e8e:	681b      	ldr	r3, [r3, #0]
 8003e90:	2b02      	cmp	r3, #2
 8003e92:	d114      	bne.n	8003ebe <HAL_DAC_ConfigChannel+0x252>
  {
    hclkfreq = HAL_RCC_GetHCLKFreq();
 8003e94:	f001 fa9e 	bl	80053d4 <HAL_RCC_GetHCLKFreq>
 8003e98:	6178      	str	r0, [r7, #20]
    if (hclkfreq > HFSEL_ENABLE_THRESHOLD_160MHZ)
 8003e9a:	697b      	ldr	r3, [r7, #20]
 8003e9c:	4a47      	ldr	r2, [pc, #284]	; (8003fbc <HAL_DAC_ConfigChannel+0x350>)
 8003e9e:	4293      	cmp	r3, r2
 8003ea0:	d904      	bls.n	8003eac <HAL_DAC_ConfigChannel+0x240>
    {
      tmpreg1 |= DAC_HIGH_FREQUENCY_INTERFACE_MODE_ABOVE_160MHZ;
 8003ea2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ea4:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003ea8:	627b      	str	r3, [r7, #36]	; 0x24
 8003eaa:	e00d      	b.n	8003ec8 <HAL_DAC_ConfigChannel+0x25c>
    }
    else if (hclkfreq > HFSEL_ENABLE_THRESHOLD_80MHZ)
 8003eac:	697b      	ldr	r3, [r7, #20]
 8003eae:	4a44      	ldr	r2, [pc, #272]	; (8003fc0 <HAL_DAC_ConfigChannel+0x354>)
 8003eb0:	4293      	cmp	r3, r2
 8003eb2:	d909      	bls.n	8003ec8 <HAL_DAC_ConfigChannel+0x25c>
    {
      tmpreg1 |= DAC_HIGH_FREQUENCY_INTERFACE_MODE_ABOVE_80MHZ;
 8003eb4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003eb6:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003eba:	627b      	str	r3, [r7, #36]	; 0x24
 8003ebc:	e004      	b.n	8003ec8 <HAL_DAC_ConfigChannel+0x25c>
      tmpreg1 |= DAC_HIGH_FREQUENCY_INTERFACE_MODE_DISABLE;
    }
  }
  else
  {
    tmpreg1 |= sConfig->DAC_HighFrequency;
 8003ebe:	68bb      	ldr	r3, [r7, #8]
 8003ec0:	681b      	ldr	r3, [r3, #0]
 8003ec2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003ec4:	4313      	orrs	r3, r2
 8003ec6:	627b      	str	r3, [r7, #36]	; 0x24
  }
  /* Calculate MCR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 8003ec8:	687b      	ldr	r3, [r7, #4]
 8003eca:	f003 0310 	and.w	r3, r3, #16
 8003ece:	69ba      	ldr	r2, [r7, #24]
 8003ed0:	fa02 f303 	lsl.w	r3, r2, r3
 8003ed4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003ed6:	4313      	orrs	r3, r2
 8003ed8:	627b      	str	r3, [r7, #36]	; 0x24
  /* Write to DAC MCR */
  hdac->Instance->MCR = tmpreg1;
 8003eda:	68fb      	ldr	r3, [r7, #12]
 8003edc:	681b      	ldr	r3, [r3, #0]
 8003ede:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003ee0:	63da      	str	r2, [r3, #60]	; 0x3c

  /* DAC in normal operating mode hence clear DAC_CR_CENx bit */
  CLEAR_BIT(hdac->Instance->CR, DAC_CR_CEN1 << (Channel & 0x10UL));
 8003ee2:	68fb      	ldr	r3, [r7, #12]
 8003ee4:	681b      	ldr	r3, [r3, #0]
 8003ee6:	6819      	ldr	r1, [r3, #0]
 8003ee8:	687b      	ldr	r3, [r7, #4]
 8003eea:	f003 0310 	and.w	r3, r3, #16
 8003eee:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8003ef2:	fa02 f303 	lsl.w	r3, r2, r3
 8003ef6:	43da      	mvns	r2, r3
 8003ef8:	68fb      	ldr	r3, [r7, #12]
 8003efa:	681b      	ldr	r3, [r3, #0]
 8003efc:	400a      	ands	r2, r1
 8003efe:	601a      	str	r2, [r3, #0]

  /* Get the DAC CR value */
  tmpreg1 = hdac->Instance->CR;
 8003f00:	68fb      	ldr	r3, [r7, #12]
 8003f02:	681b      	ldr	r3, [r3, #0]
 8003f04:	681b      	ldr	r3, [r3, #0]
 8003f06:	627b      	str	r3, [r7, #36]	; 0x24
  /* Clear TENx, TSELx, WAVEx and MAMPx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1)) << (Channel & 0x10UL));
 8003f08:	687b      	ldr	r3, [r7, #4]
 8003f0a:	f003 0310 	and.w	r3, r3, #16
 8003f0e:	f640 72fe 	movw	r2, #4094	; 0xffe
 8003f12:	fa02 f303 	lsl.w	r3, r2, r3
 8003f16:	43db      	mvns	r3, r3
 8003f18:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003f1a:	4013      	ands	r3, r2
 8003f1c:	627b      	str	r3, [r7, #36]	; 0x24
  /* Configure for the selected DAC channel: trigger */
  /* Set TSELx and TENx bits according to DAC_Trigger value */
  tmpreg2 = sConfig->DAC_Trigger;
 8003f1e:	68bb      	ldr	r3, [r7, #8]
 8003f20:	68db      	ldr	r3, [r3, #12]
 8003f22:	61bb      	str	r3, [r7, #24]
  /* Calculate CR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 8003f24:	687b      	ldr	r3, [r7, #4]
 8003f26:	f003 0310 	and.w	r3, r3, #16
 8003f2a:	69ba      	ldr	r2, [r7, #24]
 8003f2c:	fa02 f303 	lsl.w	r3, r2, r3
 8003f30:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003f32:	4313      	orrs	r3, r2
 8003f34:	627b      	str	r3, [r7, #36]	; 0x24
  /* Write to DAC CR */
  hdac->Instance->CR = tmpreg1;
 8003f36:	68fb      	ldr	r3, [r7, #12]
 8003f38:	681b      	ldr	r3, [r3, #0]
 8003f3a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003f3c:	601a      	str	r2, [r3, #0]
  /* Disable wave generation */
  hdac->Instance->CR &= ~(DAC_CR_WAVE1 << (Channel & 0x10UL));
 8003f3e:	68fb      	ldr	r3, [r7, #12]
 8003f40:	681b      	ldr	r3, [r3, #0]
 8003f42:	6819      	ldr	r1, [r3, #0]
 8003f44:	687b      	ldr	r3, [r7, #4]
 8003f46:	f003 0310 	and.w	r3, r3, #16
 8003f4a:	22c0      	movs	r2, #192	; 0xc0
 8003f4c:	fa02 f303 	lsl.w	r3, r2, r3
 8003f50:	43da      	mvns	r2, r3
 8003f52:	68fb      	ldr	r3, [r7, #12]
 8003f54:	681b      	ldr	r3, [r3, #0]
 8003f56:	400a      	ands	r2, r1
 8003f58:	601a      	str	r2, [r3, #0]

  /* Set STRSTTRIGSELx and STINCTRIGSELx bits according to DAC_Trigger & DAC_Trigger2 values */
  tmpreg2 = ((sConfig->DAC_Trigger & DAC_CR_TSEL1) >> DAC_CR_TSEL1_Pos) << DAC_STMODR_STRSTTRIGSEL1_Pos;
 8003f5a:	68bb      	ldr	r3, [r7, #8]
 8003f5c:	68db      	ldr	r3, [r3, #12]
 8003f5e:	089b      	lsrs	r3, r3, #2
 8003f60:	f003 030f 	and.w	r3, r3, #15
 8003f64:	61bb      	str	r3, [r7, #24]
  tmpreg2 |= ((sConfig->DAC_Trigger2 & DAC_CR_TSEL1) >> DAC_CR_TSEL1_Pos) << DAC_STMODR_STINCTRIGSEL1_Pos;
 8003f66:	68bb      	ldr	r3, [r7, #8]
 8003f68:	691b      	ldr	r3, [r3, #16]
 8003f6a:	089b      	lsrs	r3, r3, #2
 8003f6c:	021b      	lsls	r3, r3, #8
 8003f6e:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 8003f72:	69ba      	ldr	r2, [r7, #24]
 8003f74:	4313      	orrs	r3, r2
 8003f76:	61bb      	str	r3, [r7, #24]
  /* Modify STMODR register value depending on DAC_Channel */
  MODIFY_REG(hdac->Instance->STMODR, (DAC_STMODR_STINCTRIGSEL1 | DAC_STMODR_STRSTTRIGSEL1) << (Channel & 0x10UL), tmpreg2 << (Channel & 0x10UL));
 8003f78:	68fb      	ldr	r3, [r7, #12]
 8003f7a:	681b      	ldr	r3, [r3, #0]
 8003f7c:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8003f7e:	687b      	ldr	r3, [r7, #4]
 8003f80:	f003 0310 	and.w	r3, r3, #16
 8003f84:	f640 710f 	movw	r1, #3855	; 0xf0f
 8003f88:	fa01 f303 	lsl.w	r3, r1, r3
 8003f8c:	43db      	mvns	r3, r3
 8003f8e:	ea02 0103 	and.w	r1, r2, r3
 8003f92:	687b      	ldr	r3, [r7, #4]
 8003f94:	f003 0310 	and.w	r3, r3, #16
 8003f98:	69ba      	ldr	r2, [r7, #24]
 8003f9a:	409a      	lsls	r2, r3
 8003f9c:	68fb      	ldr	r3, [r7, #12]
 8003f9e:	681b      	ldr	r3, [r3, #0]
 8003fa0:	430a      	orrs	r2, r1
 8003fa2:	661a      	str	r2, [r3, #96]	; 0x60
  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 8003fa4:	68fb      	ldr	r3, [r7, #12]
 8003fa6:	2201      	movs	r2, #1
 8003fa8:	711a      	strb	r2, [r3, #4]

  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 8003faa:	68fb      	ldr	r3, [r7, #12]
 8003fac:	2200      	movs	r2, #0
 8003fae:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 8003fb0:	2300      	movs	r3, #0
}
 8003fb2:	4618      	mov	r0, r3
 8003fb4:	3728      	adds	r7, #40	; 0x28
 8003fb6:	46bd      	mov	sp, r7
 8003fb8:	bd80      	pop	{r7, pc}
 8003fba:	bf00      	nop
 8003fbc:	09896800 	.word	0x09896800
 8003fc0:	04c4b400 	.word	0x04c4b400

08003fc4 <DAC_DMAConvCpltCh1>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAConvCpltCh1(DMA_HandleTypeDef *hdma)
{
 8003fc4:	b580      	push	{r7, lr}
 8003fc6:	b084      	sub	sp, #16
 8003fc8:	af00      	add	r7, sp, #0
 8003fca:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003fcc:	687b      	ldr	r3, [r7, #4]
 8003fce:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003fd0:	60fb      	str	r3, [r7, #12]

#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvCpltCallbackCh1(hdac);
#else
  HAL_DAC_ConvCpltCallbackCh1(hdac);
 8003fd2:	68f8      	ldr	r0, [r7, #12]
 8003fd4:	f7ff fe2c 	bl	8003c30 <HAL_DAC_ConvCpltCallbackCh1>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

  hdac->State = HAL_DAC_STATE_READY;
 8003fd8:	68fb      	ldr	r3, [r7, #12]
 8003fda:	2201      	movs	r2, #1
 8003fdc:	711a      	strb	r2, [r3, #4]
}
 8003fde:	bf00      	nop
 8003fe0:	3710      	adds	r7, #16
 8003fe2:	46bd      	mov	sp, r7
 8003fe4:	bd80      	pop	{r7, pc}

08003fe6 <DAC_DMAHalfConvCpltCh1>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAHalfConvCpltCh1(DMA_HandleTypeDef *hdma)
{
 8003fe6:	b580      	push	{r7, lr}
 8003fe8:	b084      	sub	sp, #16
 8003fea:	af00      	add	r7, sp, #0
 8003fec:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003fee:	687b      	ldr	r3, [r7, #4]
 8003ff0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003ff2:	60fb      	str	r3, [r7, #12]
  /* Conversion complete callback */
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvHalfCpltCallbackCh1(hdac);
#else
  HAL_DAC_ConvHalfCpltCallbackCh1(hdac);
 8003ff4:	68f8      	ldr	r0, [r7, #12]
 8003ff6:	f7ff fe25 	bl	8003c44 <HAL_DAC_ConvHalfCpltCallbackCh1>
#endif  /* USE_HAL_DAC_REGISTER_CALLBACKS */
}
 8003ffa:	bf00      	nop
 8003ffc:	3710      	adds	r7, #16
 8003ffe:	46bd      	mov	sp, r7
 8004000:	bd80      	pop	{r7, pc}

08004002 <DAC_DMAErrorCh1>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAErrorCh1(DMA_HandleTypeDef *hdma)
{
 8004002:	b580      	push	{r7, lr}
 8004004:	b084      	sub	sp, #16
 8004006:	af00      	add	r7, sp, #0
 8004008:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800400a:	687b      	ldr	r3, [r7, #4]
 800400c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800400e:	60fb      	str	r3, [r7, #12]

  /* Set DAC error code to DMA error */
  hdac->ErrorCode |= HAL_DAC_ERROR_DMA;
 8004010:	68fb      	ldr	r3, [r7, #12]
 8004012:	691b      	ldr	r3, [r3, #16]
 8004014:	f043 0204 	orr.w	r2, r3, #4
 8004018:	68fb      	ldr	r3, [r7, #12]
 800401a:	611a      	str	r2, [r3, #16]

#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ErrorCallbackCh1(hdac);
#else
  HAL_DAC_ErrorCallbackCh1(hdac);
 800401c:	68f8      	ldr	r0, [r7, #12]
 800401e:	f7ff fe1b 	bl	8003c58 <HAL_DAC_ErrorCallbackCh1>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

  hdac->State = HAL_DAC_STATE_READY;
 8004022:	68fb      	ldr	r3, [r7, #12]
 8004024:	2201      	movs	r2, #1
 8004026:	711a      	strb	r2, [r3, #4]
}
 8004028:	bf00      	nop
 800402a:	3710      	adds	r7, #16
 800402c:	46bd      	mov	sp, r7
 800402e:	bd80      	pop	{r7, pc}

08004030 <HAL_DACEx_ConvCpltCallbackCh2>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DACEx_ConvCpltCallbackCh2(DAC_HandleTypeDef *hdac)
{
 8004030:	b480      	push	{r7}
 8004032:	b083      	sub	sp, #12
 8004034:	af00      	add	r7, sp, #0
 8004036:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DACEx_ConvCpltCallbackCh2 could be implemented in the user file
   */
}
 8004038:	bf00      	nop
 800403a:	370c      	adds	r7, #12
 800403c:	46bd      	mov	sp, r7
 800403e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004042:	4770      	bx	lr

08004044 <HAL_DACEx_ConvHalfCpltCallbackCh2>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DACEx_ConvHalfCpltCallbackCh2(DAC_HandleTypeDef *hdac)
{
 8004044:	b480      	push	{r7}
 8004046:	b083      	sub	sp, #12
 8004048:	af00      	add	r7, sp, #0
 800404a:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DACEx_ConvHalfCpltCallbackCh2 could be implemented in the user file
   */
}
 800404c:	bf00      	nop
 800404e:	370c      	adds	r7, #12
 8004050:	46bd      	mov	sp, r7
 8004052:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004056:	4770      	bx	lr

08004058 <HAL_DACEx_ErrorCallbackCh2>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DACEx_ErrorCallbackCh2(DAC_HandleTypeDef *hdac)
{
 8004058:	b480      	push	{r7}
 800405a:	b083      	sub	sp, #12
 800405c:	af00      	add	r7, sp, #0
 800405e:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DACEx_ErrorCallbackCh2 could be implemented in the user file
   */
}
 8004060:	bf00      	nop
 8004062:	370c      	adds	r7, #12
 8004064:	46bd      	mov	sp, r7
 8004066:	f85d 7b04 	ldr.w	r7, [sp], #4
 800406a:	4770      	bx	lr

0800406c <DAC_DMAConvCpltCh2>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAConvCpltCh2(DMA_HandleTypeDef *hdma)
{
 800406c:	b580      	push	{r7, lr}
 800406e:	b084      	sub	sp, #16
 8004070:	af00      	add	r7, sp, #0
 8004072:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004074:	687b      	ldr	r3, [r7, #4]
 8004076:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004078:	60fb      	str	r3, [r7, #12]

#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvCpltCallbackCh2(hdac);
#else
  HAL_DACEx_ConvCpltCallbackCh2(hdac);
 800407a:	68f8      	ldr	r0, [r7, #12]
 800407c:	f7ff ffd8 	bl	8004030 <HAL_DACEx_ConvCpltCallbackCh2>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

  hdac->State = HAL_DAC_STATE_READY;
 8004080:	68fb      	ldr	r3, [r7, #12]
 8004082:	2201      	movs	r2, #1
 8004084:	711a      	strb	r2, [r3, #4]
}
 8004086:	bf00      	nop
 8004088:	3710      	adds	r7, #16
 800408a:	46bd      	mov	sp, r7
 800408c:	bd80      	pop	{r7, pc}

0800408e <DAC_DMAHalfConvCpltCh2>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAHalfConvCpltCh2(DMA_HandleTypeDef *hdma)
{
 800408e:	b580      	push	{r7, lr}
 8004090:	b084      	sub	sp, #16
 8004092:	af00      	add	r7, sp, #0
 8004094:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004096:	687b      	ldr	r3, [r7, #4]
 8004098:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800409a:	60fb      	str	r3, [r7, #12]
  /* Conversion complete callback */
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvHalfCpltCallbackCh2(hdac);
#else
  HAL_DACEx_ConvHalfCpltCallbackCh2(hdac);
 800409c:	68f8      	ldr	r0, [r7, #12]
 800409e:	f7ff ffd1 	bl	8004044 <HAL_DACEx_ConvHalfCpltCallbackCh2>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
}
 80040a2:	bf00      	nop
 80040a4:	3710      	adds	r7, #16
 80040a6:	46bd      	mov	sp, r7
 80040a8:	bd80      	pop	{r7, pc}

080040aa <DAC_DMAErrorCh2>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAErrorCh2(DMA_HandleTypeDef *hdma)
{
 80040aa:	b580      	push	{r7, lr}
 80040ac:	b084      	sub	sp, #16
 80040ae:	af00      	add	r7, sp, #0
 80040b0:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80040b2:	687b      	ldr	r3, [r7, #4]
 80040b4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80040b6:	60fb      	str	r3, [r7, #12]

  /* Set DAC error code to DMA error */
  hdac->ErrorCode |= HAL_DAC_ERROR_DMA;
 80040b8:	68fb      	ldr	r3, [r7, #12]
 80040ba:	691b      	ldr	r3, [r3, #16]
 80040bc:	f043 0204 	orr.w	r2, r3, #4
 80040c0:	68fb      	ldr	r3, [r7, #12]
 80040c2:	611a      	str	r2, [r3, #16]

#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ErrorCallbackCh2(hdac);
#else
  HAL_DACEx_ErrorCallbackCh2(hdac);
 80040c4:	68f8      	ldr	r0, [r7, #12]
 80040c6:	f7ff ffc7 	bl	8004058 <HAL_DACEx_ErrorCallbackCh2>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

  hdac->State = HAL_DAC_STATE_READY;
 80040ca:	68fb      	ldr	r3, [r7, #12]
 80040cc:	2201      	movs	r2, #1
 80040ce:	711a      	strb	r2, [r3, #4]
}
 80040d0:	bf00      	nop
 80040d2:	3710      	adds	r7, #16
 80040d4:	46bd      	mov	sp, r7
 80040d6:	bd80      	pop	{r7, pc}

080040d8 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80040d8:	b580      	push	{r7, lr}
 80040da:	b084      	sub	sp, #16
 80040dc:	af00      	add	r7, sp, #0
 80040de:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if (hdma == NULL)
 80040e0:	687b      	ldr	r3, [r7, #4]
 80040e2:	2b00      	cmp	r3, #0
 80040e4:	d101      	bne.n	80040ea <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 80040e6:	2301      	movs	r3, #1
 80040e8:	e08d      	b.n	8004206 <HAL_DMA_Init+0x12e>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 80040ea:	687b      	ldr	r3, [r7, #4]
 80040ec:	681b      	ldr	r3, [r3, #0]
 80040ee:	461a      	mov	r2, r3
 80040f0:	4b47      	ldr	r3, [pc, #284]	; (8004210 <HAL_DMA_Init+0x138>)
 80040f2:	429a      	cmp	r2, r3
 80040f4:	d80f      	bhi.n	8004116 <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 80040f6:	687b      	ldr	r3, [r7, #4]
 80040f8:	681b      	ldr	r3, [r3, #0]
 80040fa:	461a      	mov	r2, r3
 80040fc:	4b45      	ldr	r3, [pc, #276]	; (8004214 <HAL_DMA_Init+0x13c>)
 80040fe:	4413      	add	r3, r2
 8004100:	4a45      	ldr	r2, [pc, #276]	; (8004218 <HAL_DMA_Init+0x140>)
 8004102:	fba2 2303 	umull	r2, r3, r2, r3
 8004106:	091b      	lsrs	r3, r3, #4
 8004108:	009a      	lsls	r2, r3, #2
 800410a:	687b      	ldr	r3, [r7, #4]
 800410c:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA1;
 800410e:	687b      	ldr	r3, [r7, #4]
 8004110:	4a42      	ldr	r2, [pc, #264]	; (800421c <HAL_DMA_Init+0x144>)
 8004112:	641a      	str	r2, [r3, #64]	; 0x40
 8004114:	e00e      	b.n	8004134 <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
 8004116:	687b      	ldr	r3, [r7, #4]
 8004118:	681b      	ldr	r3, [r3, #0]
 800411a:	461a      	mov	r2, r3
 800411c:	4b40      	ldr	r3, [pc, #256]	; (8004220 <HAL_DMA_Init+0x148>)
 800411e:	4413      	add	r3, r2
 8004120:	4a3d      	ldr	r2, [pc, #244]	; (8004218 <HAL_DMA_Init+0x140>)
 8004122:	fba2 2303 	umull	r2, r3, r2, r3
 8004126:	091b      	lsrs	r3, r3, #4
 8004128:	009a      	lsls	r2, r3, #2
 800412a:	687b      	ldr	r3, [r7, #4]
 800412c:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA2;
 800412e:	687b      	ldr	r3, [r7, #4]
 8004130:	4a3c      	ldr	r2, [pc, #240]	; (8004224 <HAL_DMA_Init+0x14c>)
 8004132:	641a      	str	r2, [r3, #64]	; 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8004134:	687b      	ldr	r3, [r7, #4]
 8004136:	2202      	movs	r2, #2
 8004138:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 800413c:	687b      	ldr	r3, [r7, #4]
 800413e:	681b      	ldr	r3, [r3, #0]
 8004140:	681b      	ldr	r3, [r3, #0]
 8004142:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 8004144:	68fb      	ldr	r3, [r7, #12]
 8004146:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 800414a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800414e:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8004150:	687b      	ldr	r3, [r7, #4]
 8004152:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004154:	687b      	ldr	r3, [r7, #4]
 8004156:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 8004158:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800415a:	687b      	ldr	r3, [r7, #4]
 800415c:	691b      	ldr	r3, [r3, #16]
 800415e:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004160:	687b      	ldr	r3, [r7, #4]
 8004162:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004164:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004166:	687b      	ldr	r3, [r7, #4]
 8004168:	699b      	ldr	r3, [r3, #24]
 800416a:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800416c:	687b      	ldr	r3, [r7, #4]
 800416e:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004170:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8004172:	687b      	ldr	r3, [r7, #4]
 8004174:	6a1b      	ldr	r3, [r3, #32]
 8004176:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8004178:	68fa      	ldr	r2, [r7, #12]
 800417a:	4313      	orrs	r3, r2
 800417c:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 800417e:	687b      	ldr	r3, [r7, #4]
 8004180:	681b      	ldr	r3, [r3, #0]
 8004182:	68fa      	ldr	r2, [r7, #12]
 8004184:	601a      	str	r2, [r3, #0]

  /* Initialize parameters for DMAMUX channel :
     DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
  */
  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 8004186:	6878      	ldr	r0, [r7, #4]
 8004188:	f000 f9b6 	bl	80044f8 <DMA_CalcDMAMUXChannelBaseAndMask>

  if (hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 800418c:	687b      	ldr	r3, [r7, #4]
 800418e:	689b      	ldr	r3, [r3, #8]
 8004190:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8004194:	d102      	bne.n	800419c <HAL_DMA_Init+0xc4>
  {
    /* if memory to memory force the request to 0*/
    hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 8004196:	687b      	ldr	r3, [r7, #4]
 8004198:	2200      	movs	r2, #0
 800419a:	605a      	str	r2, [r3, #4]
  }

  /* Set peripheral request  to DMAMUX channel */
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 800419c:	687b      	ldr	r3, [r7, #4]
 800419e:	685a      	ldr	r2, [r3, #4]
 80041a0:	687b      	ldr	r3, [r7, #4]
 80041a2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80041a4:	b2d2      	uxtb	r2, r2
 80041a6:	601a      	str	r2, [r3, #0]

  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80041a8:	687b      	ldr	r3, [r7, #4]
 80041aa:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80041ac:	687a      	ldr	r2, [r7, #4]
 80041ae:	6d12      	ldr	r2, [r2, #80]	; 0x50
 80041b0:	605a      	str	r2, [r3, #4]

  if (((hdma->Init.Request >  0U) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 80041b2:	687b      	ldr	r3, [r7, #4]
 80041b4:	685b      	ldr	r3, [r3, #4]
 80041b6:	2b00      	cmp	r3, #0
 80041b8:	d010      	beq.n	80041dc <HAL_DMA_Init+0x104>
 80041ba:	687b      	ldr	r3, [r7, #4]
 80041bc:	685b      	ldr	r3, [r3, #4]
 80041be:	2b04      	cmp	r3, #4
 80041c0:	d80c      	bhi.n	80041dc <HAL_DMA_Init+0x104>
  {
    /* Initialize parameters for DMAMUX request generator :
       DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask
    */
    DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 80041c2:	6878      	ldr	r0, [r7, #4]
 80041c4:	f000 f9d6 	bl	8004574 <DMA_CalcDMAMUXRequestGenBaseAndMask>

    /* Reset the DMAMUX request generator register*/
    hdma->DMAmuxRequestGen->RGCR = 0U;
 80041c8:	687b      	ldr	r3, [r7, #4]
 80041ca:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80041cc:	2200      	movs	r2, #0
 80041ce:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80041d0:	687b      	ldr	r3, [r7, #4]
 80041d2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80041d4:	687a      	ldr	r2, [r7, #4]
 80041d6:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 80041d8:	605a      	str	r2, [r3, #4]
 80041da:	e008      	b.n	80041ee <HAL_DMA_Init+0x116>
  }
  else
  {
    hdma->DMAmuxRequestGen = 0U;
 80041dc:	687b      	ldr	r3, [r7, #4]
 80041de:	2200      	movs	r2, #0
 80041e0:	655a      	str	r2, [r3, #84]	; 0x54
    hdma->DMAmuxRequestGenStatus = 0U;
 80041e2:	687b      	ldr	r3, [r7, #4]
 80041e4:	2200      	movs	r2, #0
 80041e6:	659a      	str	r2, [r3, #88]	; 0x58
    hdma->DMAmuxRequestGenStatusMask = 0U;
 80041e8:	687b      	ldr	r3, [r7, #4]
 80041ea:	2200      	movs	r2, #0
 80041ec:	65da      	str	r2, [r3, #92]	; 0x5c
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80041ee:	687b      	ldr	r3, [r7, #4]
 80041f0:	2200      	movs	r2, #0
 80041f2:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA state*/
  hdma->State  = HAL_DMA_STATE_READY;
 80041f4:	687b      	ldr	r3, [r7, #4]
 80041f6:	2201      	movs	r2, #1
 80041f8:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 80041fc:	687b      	ldr	r3, [r7, #4]
 80041fe:	2200      	movs	r2, #0
 8004200:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  return HAL_OK;
 8004204:	2300      	movs	r3, #0
}
 8004206:	4618      	mov	r0, r3
 8004208:	3710      	adds	r7, #16
 800420a:	46bd      	mov	sp, r7
 800420c:	bd80      	pop	{r7, pc}
 800420e:	bf00      	nop
 8004210:	40020407 	.word	0x40020407
 8004214:	bffdfff8 	.word	0xbffdfff8
 8004218:	cccccccd 	.word	0xcccccccd
 800421c:	40020000 	.word	0x40020000
 8004220:	bffdfbf8 	.word	0xbffdfbf8
 8004224:	40020400 	.word	0x40020400

08004228 <HAL_DMA_Start_IT>:
  * @param  DataLength The length of data to be transferred from source to destination (up to 256Kbytes-1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress,
                                   uint32_t DataLength)
{
 8004228:	b580      	push	{r7, lr}
 800422a:	b086      	sub	sp, #24
 800422c:	af00      	add	r7, sp, #0
 800422e:	60f8      	str	r0, [r7, #12]
 8004230:	60b9      	str	r1, [r7, #8]
 8004232:	607a      	str	r2, [r7, #4]
 8004234:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8004236:	2300      	movs	r3, #0
 8004238:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 800423a:	68fb      	ldr	r3, [r7, #12]
 800423c:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8004240:	2b01      	cmp	r3, #1
 8004242:	d101      	bne.n	8004248 <HAL_DMA_Start_IT+0x20>
 8004244:	2302      	movs	r3, #2
 8004246:	e066      	b.n	8004316 <HAL_DMA_Start_IT+0xee>
 8004248:	68fb      	ldr	r3, [r7, #12]
 800424a:	2201      	movs	r2, #1
 800424c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  if (HAL_DMA_STATE_READY == hdma->State)
 8004250:	68fb      	ldr	r3, [r7, #12]
 8004252:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8004256:	b2db      	uxtb	r3, r3
 8004258:	2b01      	cmp	r3, #1
 800425a:	d155      	bne.n	8004308 <HAL_DMA_Start_IT+0xe0>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 800425c:	68fb      	ldr	r3, [r7, #12]
 800425e:	2202      	movs	r2, #2
 8004260:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8004264:	68fb      	ldr	r3, [r7, #12]
 8004266:	2200      	movs	r2, #0
 8004268:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 800426a:	68fb      	ldr	r3, [r7, #12]
 800426c:	681b      	ldr	r3, [r3, #0]
 800426e:	681a      	ldr	r2, [r3, #0]
 8004270:	68fb      	ldr	r3, [r7, #12]
 8004272:	681b      	ldr	r3, [r3, #0]
 8004274:	f022 0201 	bic.w	r2, r2, #1
 8004278:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 800427a:	683b      	ldr	r3, [r7, #0]
 800427c:	687a      	ldr	r2, [r7, #4]
 800427e:	68b9      	ldr	r1, [r7, #8]
 8004280:	68f8      	ldr	r0, [r7, #12]
 8004282:	f000 f8fb 	bl	800447c <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if (NULL != hdma->XferHalfCpltCallback)
 8004286:	68fb      	ldr	r3, [r7, #12]
 8004288:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800428a:	2b00      	cmp	r3, #0
 800428c:	d008      	beq.n	80042a0 <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800428e:	68fb      	ldr	r3, [r7, #12]
 8004290:	681b      	ldr	r3, [r3, #0]
 8004292:	681a      	ldr	r2, [r3, #0]
 8004294:	68fb      	ldr	r3, [r7, #12]
 8004296:	681b      	ldr	r3, [r3, #0]
 8004298:	f042 020e 	orr.w	r2, r2, #14
 800429c:	601a      	str	r2, [r3, #0]
 800429e:	e00f      	b.n	80042c0 <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80042a0:	68fb      	ldr	r3, [r7, #12]
 80042a2:	681b      	ldr	r3, [r3, #0]
 80042a4:	681a      	ldr	r2, [r3, #0]
 80042a6:	68fb      	ldr	r3, [r7, #12]
 80042a8:	681b      	ldr	r3, [r3, #0]
 80042aa:	f022 0204 	bic.w	r2, r2, #4
 80042ae:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 80042b0:	68fb      	ldr	r3, [r7, #12]
 80042b2:	681b      	ldr	r3, [r3, #0]
 80042b4:	681a      	ldr	r2, [r3, #0]
 80042b6:	68fb      	ldr	r3, [r7, #12]
 80042b8:	681b      	ldr	r3, [r3, #0]
 80042ba:	f042 020a 	orr.w	r2, r2, #10
 80042be:	601a      	str	r2, [r3, #0]
    }

    /* Check if DMAMUX Synchronization is enabled*/
    if ((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 80042c0:	68fb      	ldr	r3, [r7, #12]
 80042c2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80042c4:	681b      	ldr	r3, [r3, #0]
 80042c6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80042ca:	2b00      	cmp	r3, #0
 80042cc:	d007      	beq.n	80042de <HAL_DMA_Start_IT+0xb6>
    {
      /* Enable DMAMUX sync overrun IT*/
      hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 80042ce:	68fb      	ldr	r3, [r7, #12]
 80042d0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80042d2:	681a      	ldr	r2, [r3, #0]
 80042d4:	68fb      	ldr	r3, [r7, #12]
 80042d6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80042d8:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80042dc:	601a      	str	r2, [r3, #0]
    }

    if (hdma->DMAmuxRequestGen != 0U)
 80042de:	68fb      	ldr	r3, [r7, #12]
 80042e0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80042e2:	2b00      	cmp	r3, #0
 80042e4:	d007      	beq.n	80042f6 <HAL_DMA_Start_IT+0xce>
    {
      /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
      /* enable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 80042e6:	68fb      	ldr	r3, [r7, #12]
 80042e8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80042ea:	681a      	ldr	r2, [r3, #0]
 80042ec:	68fb      	ldr	r3, [r7, #12]
 80042ee:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80042f0:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80042f4:	601a      	str	r2, [r3, #0]
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 80042f6:	68fb      	ldr	r3, [r7, #12]
 80042f8:	681b      	ldr	r3, [r3, #0]
 80042fa:	681a      	ldr	r2, [r3, #0]
 80042fc:	68fb      	ldr	r3, [r7, #12]
 80042fe:	681b      	ldr	r3, [r3, #0]
 8004300:	f042 0201 	orr.w	r2, r2, #1
 8004304:	601a      	str	r2, [r3, #0]
 8004306:	e005      	b.n	8004314 <HAL_DMA_Start_IT+0xec>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004308:	68fb      	ldr	r3, [r7, #12]
 800430a:	2200      	movs	r2, #0
 800430c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Remain BUSY */
    status = HAL_BUSY;
 8004310:	2302      	movs	r3, #2
 8004312:	75fb      	strb	r3, [r7, #23]
  }
  return status;
 8004314:	7dfb      	ldrb	r3, [r7, #23]
}
 8004316:	4618      	mov	r0, r3
 8004318:	3718      	adds	r7, #24
 800431a:	46bd      	mov	sp, r7
 800431c:	bd80      	pop	{r7, pc}

0800431e <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 800431e:	b580      	push	{r7, lr}
 8004320:	b084      	sub	sp, #16
 8004322:	af00      	add	r7, sp, #0
 8004324:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8004326:	687b      	ldr	r3, [r7, #4]
 8004328:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800432a:	681b      	ldr	r3, [r3, #0]
 800432c:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 800432e:	687b      	ldr	r3, [r7, #4]
 8004330:	681b      	ldr	r3, [r3, #0]
 8004332:	681b      	ldr	r3, [r3, #0]
 8004334:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if ((0U != (flag_it & ((uint32_t)DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1FU)))) && (0U != (source_it & DMA_IT_HT)))
 8004336:	687b      	ldr	r3, [r7, #4]
 8004338:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800433a:	f003 031f 	and.w	r3, r3, #31
 800433e:	2204      	movs	r2, #4
 8004340:	409a      	lsls	r2, r3
 8004342:	68fb      	ldr	r3, [r7, #12]
 8004344:	4013      	ands	r3, r2
 8004346:	2b00      	cmp	r3, #0
 8004348:	d026      	beq.n	8004398 <HAL_DMA_IRQHandler+0x7a>
 800434a:	68bb      	ldr	r3, [r7, #8]
 800434c:	f003 0304 	and.w	r3, r3, #4
 8004350:	2b00      	cmp	r3, #0
 8004352:	d021      	beq.n	8004398 <HAL_DMA_IRQHandler+0x7a>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8004354:	687b      	ldr	r3, [r7, #4]
 8004356:	681b      	ldr	r3, [r3, #0]
 8004358:	681b      	ldr	r3, [r3, #0]
 800435a:	f003 0320 	and.w	r3, r3, #32
 800435e:	2b00      	cmp	r3, #0
 8004360:	d107      	bne.n	8004372 <HAL_DMA_IRQHandler+0x54>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8004362:	687b      	ldr	r3, [r7, #4]
 8004364:	681b      	ldr	r3, [r3, #0]
 8004366:	681a      	ldr	r2, [r3, #0]
 8004368:	687b      	ldr	r3, [r7, #4]
 800436a:	681b      	ldr	r3, [r3, #0]
 800436c:	f022 0204 	bic.w	r2, r2, #4
 8004370:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1FU));
 8004372:	687b      	ldr	r3, [r7, #4]
 8004374:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004376:	f003 021f 	and.w	r2, r3, #31
 800437a:	687b      	ldr	r3, [r7, #4]
 800437c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800437e:	2104      	movs	r1, #4
 8004380:	fa01 f202 	lsl.w	r2, r1, r2
 8004384:	605a      	str	r2, [r3, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if (hdma->XferHalfCpltCallback != NULL)
 8004386:	687b      	ldr	r3, [r7, #4]
 8004388:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800438a:	2b00      	cmp	r3, #0
 800438c:	d071      	beq.n	8004472 <HAL_DMA_IRQHandler+0x154>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 800438e:	687b      	ldr	r3, [r7, #4]
 8004390:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004392:	6878      	ldr	r0, [r7, #4]
 8004394:	4798      	blx	r3
    if (hdma->XferHalfCpltCallback != NULL)
 8004396:	e06c      	b.n	8004472 <HAL_DMA_IRQHandler+0x154>
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  else if ((0U != (flag_it & ((uint32_t)DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1FU))))
 8004398:	687b      	ldr	r3, [r7, #4]
 800439a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800439c:	f003 031f 	and.w	r3, r3, #31
 80043a0:	2202      	movs	r2, #2
 80043a2:	409a      	lsls	r2, r3
 80043a4:	68fb      	ldr	r3, [r7, #12]
 80043a6:	4013      	ands	r3, r2
 80043a8:	2b00      	cmp	r3, #0
 80043aa:	d02e      	beq.n	800440a <HAL_DMA_IRQHandler+0xec>
           && (0U != (source_it & DMA_IT_TC)))
 80043ac:	68bb      	ldr	r3, [r7, #8]
 80043ae:	f003 0302 	and.w	r3, r3, #2
 80043b2:	2b00      	cmp	r3, #0
 80043b4:	d029      	beq.n	800440a <HAL_DMA_IRQHandler+0xec>
  {
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80043b6:	687b      	ldr	r3, [r7, #4]
 80043b8:	681b      	ldr	r3, [r3, #0]
 80043ba:	681b      	ldr	r3, [r3, #0]
 80043bc:	f003 0320 	and.w	r3, r3, #32
 80043c0:	2b00      	cmp	r3, #0
 80043c2:	d10b      	bne.n	80043dc <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 80043c4:	687b      	ldr	r3, [r7, #4]
 80043c6:	681b      	ldr	r3, [r3, #0]
 80043c8:	681a      	ldr	r2, [r3, #0]
 80043ca:	687b      	ldr	r3, [r7, #4]
 80043cc:	681b      	ldr	r3, [r3, #0]
 80043ce:	f022 020a 	bic.w	r2, r2, #10
 80043d2:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80043d4:	687b      	ldr	r3, [r7, #4]
 80043d6:	2201      	movs	r2, #1
 80043d8:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1FU));
 80043dc:	687b      	ldr	r3, [r7, #4]
 80043de:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80043e0:	f003 021f 	and.w	r2, r3, #31
 80043e4:	687b      	ldr	r3, [r7, #4]
 80043e6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80043e8:	2102      	movs	r1, #2
 80043ea:	fa01 f202 	lsl.w	r2, r1, r2
 80043ee:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80043f0:	687b      	ldr	r3, [r7, #4]
 80043f2:	2200      	movs	r2, #0
 80043f4:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferCpltCallback != NULL)
 80043f8:	687b      	ldr	r3, [r7, #4]
 80043fa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80043fc:	2b00      	cmp	r3, #0
 80043fe:	d038      	beq.n	8004472 <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8004400:	687b      	ldr	r3, [r7, #4]
 8004402:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004404:	6878      	ldr	r0, [r7, #4]
 8004406:	4798      	blx	r3
    if (hdma->XferCpltCallback != NULL)
 8004408:	e033      	b.n	8004472 <HAL_DMA_IRQHandler+0x154>
    }
  }
  /* Transfer Error Interrupt management **************************************/
  else if ((0U != (flag_it & ((uint32_t)DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1FU))))
 800440a:	687b      	ldr	r3, [r7, #4]
 800440c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800440e:	f003 031f 	and.w	r3, r3, #31
 8004412:	2208      	movs	r2, #8
 8004414:	409a      	lsls	r2, r3
 8004416:	68fb      	ldr	r3, [r7, #12]
 8004418:	4013      	ands	r3, r2
 800441a:	2b00      	cmp	r3, #0
 800441c:	d02a      	beq.n	8004474 <HAL_DMA_IRQHandler+0x156>
           && (0U != (source_it & DMA_IT_TE)))
 800441e:	68bb      	ldr	r3, [r7, #8]
 8004420:	f003 0308 	and.w	r3, r3, #8
 8004424:	2b00      	cmp	r3, #0
 8004426:	d025      	beq.n	8004474 <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8004428:	687b      	ldr	r3, [r7, #4]
 800442a:	681b      	ldr	r3, [r3, #0]
 800442c:	681a      	ldr	r2, [r3, #0]
 800442e:	687b      	ldr	r3, [r7, #4]
 8004430:	681b      	ldr	r3, [r3, #0]
 8004432:	f022 020e 	bic.w	r2, r2, #14
 8004436:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 8004438:	687b      	ldr	r3, [r7, #4]
 800443a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800443c:	f003 021f 	and.w	r2, r3, #31
 8004440:	687b      	ldr	r3, [r7, #4]
 8004442:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004444:	2101      	movs	r1, #1
 8004446:	fa01 f202 	lsl.w	r2, r1, r2
 800444a:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 800444c:	687b      	ldr	r3, [r7, #4]
 800444e:	2201      	movs	r2, #1
 8004450:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8004452:	687b      	ldr	r3, [r7, #4]
 8004454:	2201      	movs	r2, #1
 8004456:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800445a:	687b      	ldr	r3, [r7, #4]
 800445c:	2200      	movs	r2, #0
 800445e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferErrorCallback != NULL)
 8004462:	687b      	ldr	r3, [r7, #4]
 8004464:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004466:	2b00      	cmp	r3, #0
 8004468:	d004      	beq.n	8004474 <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 800446a:	687b      	ldr	r3, [r7, #4]
 800446c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800446e:	6878      	ldr	r0, [r7, #4]
 8004470:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 8004472:	bf00      	nop
 8004474:	bf00      	nop
}
 8004476:	3710      	adds	r7, #16
 8004478:	46bd      	mov	sp, r7
 800447a:	bd80      	pop	{r7, pc}

0800447c <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800447c:	b480      	push	{r7}
 800447e:	b085      	sub	sp, #20
 8004480:	af00      	add	r7, sp, #0
 8004482:	60f8      	str	r0, [r7, #12]
 8004484:	60b9      	str	r1, [r7, #8]
 8004486:	607a      	str	r2, [r7, #4]
 8004488:	603b      	str	r3, [r7, #0]
  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800448a:	68fb      	ldr	r3, [r7, #12]
 800448c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800448e:	68fa      	ldr	r2, [r7, #12]
 8004490:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8004492:	605a      	str	r2, [r3, #4]

  if (hdma->DMAmuxRequestGen != 0U)
 8004494:	68fb      	ldr	r3, [r7, #12]
 8004496:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004498:	2b00      	cmp	r3, #0
 800449a:	d004      	beq.n	80044a6 <DMA_SetConfig+0x2a>
  {
    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800449c:	68fb      	ldr	r3, [r7, #12]
 800449e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80044a0:	68fa      	ldr	r2, [r7, #12]
 80044a2:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 80044a4:	605a      	str	r2, [r3, #4]
  }

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 80044a6:	68fb      	ldr	r3, [r7, #12]
 80044a8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80044aa:	f003 021f 	and.w	r2, r3, #31
 80044ae:	68fb      	ldr	r3, [r7, #12]
 80044b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80044b2:	2101      	movs	r1, #1
 80044b4:	fa01 f202 	lsl.w	r2, r1, r2
 80044b8:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 80044ba:	68fb      	ldr	r3, [r7, #12]
 80044bc:	681b      	ldr	r3, [r3, #0]
 80044be:	683a      	ldr	r2, [r7, #0]
 80044c0:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if ((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80044c2:	68fb      	ldr	r3, [r7, #12]
 80044c4:	689b      	ldr	r3, [r3, #8]
 80044c6:	2b10      	cmp	r3, #16
 80044c8:	d108      	bne.n	80044dc <DMA_SetConfig+0x60>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 80044ca:	68fb      	ldr	r3, [r7, #12]
 80044cc:	681b      	ldr	r3, [r3, #0]
 80044ce:	687a      	ldr	r2, [r7, #4]
 80044d0:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 80044d2:	68fb      	ldr	r3, [r7, #12]
 80044d4:	681b      	ldr	r3, [r3, #0]
 80044d6:	68ba      	ldr	r2, [r7, #8]
 80044d8:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 80044da:	e007      	b.n	80044ec <DMA_SetConfig+0x70>
    hdma->Instance->CPAR = SrcAddress;
 80044dc:	68fb      	ldr	r3, [r7, #12]
 80044de:	681b      	ldr	r3, [r3, #0]
 80044e0:	68ba      	ldr	r2, [r7, #8]
 80044e2:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 80044e4:	68fb      	ldr	r3, [r7, #12]
 80044e6:	681b      	ldr	r3, [r3, #0]
 80044e8:	687a      	ldr	r2, [r7, #4]
 80044ea:	60da      	str	r2, [r3, #12]
}
 80044ec:	bf00      	nop
 80044ee:	3714      	adds	r7, #20
 80044f0:	46bd      	mov	sp, r7
 80044f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044f6:	4770      	bx	lr

080044f8 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma        pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval None
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 80044f8:	b480      	push	{r7}
 80044fa:	b087      	sub	sp, #28
 80044fc:	af00      	add	r7, sp, #0
 80044fe:	6078      	str	r0, [r7, #4]
  uint32_t dmamux_base_addr;
  uint32_t channel_number;
  DMAMUX_Channel_TypeDef *DMAMUX1_ChannelBase;

  /* check if instance is not outside the DMA channel range */
  if ((uint32_t)hdma->Instance < (uint32_t)DMA2_Channel1)
 8004500:	687b      	ldr	r3, [r7, #4]
 8004502:	681b      	ldr	r3, [r3, #0]
 8004504:	461a      	mov	r2, r3
 8004506:	4b16      	ldr	r3, [pc, #88]	; (8004560 <DMA_CalcDMAMUXChannelBaseAndMask+0x68>)
 8004508:	429a      	cmp	r2, r3
 800450a:	d802      	bhi.n	8004512 <DMA_CalcDMAMUXChannelBaseAndMask+0x1a>
  {
    /* DMA1 */
    DMAMUX1_ChannelBase = DMAMUX1_Channel0;
 800450c:	4b15      	ldr	r3, [pc, #84]	; (8004564 <DMA_CalcDMAMUXChannelBaseAndMask+0x6c>)
 800450e:	617b      	str	r3, [r7, #20]
 8004510:	e001      	b.n	8004516 <DMA_CalcDMAMUXChannelBaseAndMask+0x1e>
  }
  else
  {
    /* DMA2 */
#if defined (STM32G471xx) || defined (STM32G473xx) || defined (STM32G474xx) || defined (STM32G483xx) || defined (STM32G484xx)
    DMAMUX1_ChannelBase = DMAMUX1_Channel8;
 8004512:	4b15      	ldr	r3, [pc, #84]	; (8004568 <DMA_CalcDMAMUXChannelBaseAndMask+0x70>)
 8004514:	617b      	str	r3, [r7, #20]
    DMAMUX1_ChannelBase = DMAMUX1_Channel6;
#else
    DMAMUX1_ChannelBase = DMAMUX1_Channel7;
#endif /* STM32G4x1xx) */
  }
  dmamux_base_addr = (uint32_t)DMAMUX1_ChannelBase;
 8004516:	697b      	ldr	r3, [r7, #20]
 8004518:	613b      	str	r3, [r7, #16]
  channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 800451a:	687b      	ldr	r3, [r7, #4]
 800451c:	681b      	ldr	r3, [r3, #0]
 800451e:	b2db      	uxtb	r3, r3
 8004520:	3b08      	subs	r3, #8
 8004522:	4a12      	ldr	r2, [pc, #72]	; (800456c <DMA_CalcDMAMUXChannelBaseAndMask+0x74>)
 8004524:	fba2 2303 	umull	r2, r3, r2, r3
 8004528:	091b      	lsrs	r3, r3, #4
 800452a:	60fb      	str	r3, [r7, #12]
  hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)(uint32_t)(dmamux_base_addr + ((hdma->ChannelIndex >> 2U) * ((uint32_t)DMAMUX1_Channel1 - (uint32_t)DMAMUX1_Channel0)));
 800452c:	687b      	ldr	r3, [r7, #4]
 800452e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004530:	089b      	lsrs	r3, r3, #2
 8004532:	009a      	lsls	r2, r3, #2
 8004534:	693b      	ldr	r3, [r7, #16]
 8004536:	4413      	add	r3, r2
 8004538:	461a      	mov	r2, r3
 800453a:	687b      	ldr	r3, [r7, #4]
 800453c:	649a      	str	r2, [r3, #72]	; 0x48
  hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 800453e:	687b      	ldr	r3, [r7, #4]
 8004540:	4a0b      	ldr	r2, [pc, #44]	; (8004570 <DMA_CalcDMAMUXChannelBaseAndMask+0x78>)
 8004542:	64da      	str	r2, [r3, #76]	; 0x4c
  hdma->DMAmuxChannelStatusMask = 1UL << (channel_number & 0x1FU);
 8004544:	68fb      	ldr	r3, [r7, #12]
 8004546:	f003 031f 	and.w	r3, r3, #31
 800454a:	2201      	movs	r2, #1
 800454c:	409a      	lsls	r2, r3
 800454e:	687b      	ldr	r3, [r7, #4]
 8004550:	651a      	str	r2, [r3, #80]	; 0x50
}
 8004552:	bf00      	nop
 8004554:	371c      	adds	r7, #28
 8004556:	46bd      	mov	sp, r7
 8004558:	f85d 7b04 	ldr.w	r7, [sp], #4
 800455c:	4770      	bx	lr
 800455e:	bf00      	nop
 8004560:	40020407 	.word	0x40020407
 8004564:	40020800 	.word	0x40020800
 8004568:	40020820 	.word	0x40020820
 800456c:	cccccccd 	.word	0xcccccccd
 8004570:	40020880 	.word	0x40020880

08004574 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  *                     the configuration information for the specified DMA Channel.
  * @retval None
  */

static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8004574:	b480      	push	{r7}
 8004576:	b085      	sub	sp, #20
 8004578:	af00      	add	r7, sp, #0
 800457a:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 800457c:	687b      	ldr	r3, [r7, #4]
 800457e:	685b      	ldr	r3, [r3, #4]
 8004580:	b2db      	uxtb	r3, r3
 8004582:	60fb      	str	r3, [r7, #12]

  /* DMA Channels are connected to DMAMUX1 request generator blocks*/
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 8004584:	68fa      	ldr	r2, [r7, #12]
 8004586:	4b0b      	ldr	r3, [pc, #44]	; (80045b4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x40>)
 8004588:	4413      	add	r3, r2
 800458a:	009b      	lsls	r3, r3, #2
 800458c:	461a      	mov	r2, r3
 800458e:	687b      	ldr	r3, [r7, #4]
 8004590:	655a      	str	r2, [r3, #84]	; 0x54

  hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 8004592:	687b      	ldr	r3, [r7, #4]
 8004594:	4a08      	ldr	r2, [pc, #32]	; (80045b8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x44>)
 8004596:	659a      	str	r2, [r3, #88]	; 0x58

  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x1FU);
 8004598:	68fb      	ldr	r3, [r7, #12]
 800459a:	3b01      	subs	r3, #1
 800459c:	f003 031f 	and.w	r3, r3, #31
 80045a0:	2201      	movs	r2, #1
 80045a2:	409a      	lsls	r2, r3
 80045a4:	687b      	ldr	r3, [r7, #4]
 80045a6:	65da      	str	r2, [r3, #92]	; 0x5c
}
 80045a8:	bf00      	nop
 80045aa:	3714      	adds	r7, #20
 80045ac:	46bd      	mov	sp, r7
 80045ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045b2:	4770      	bx	lr
 80045b4:	1000823f 	.word	0x1000823f
 80045b8:	40020940 	.word	0x40020940

080045bc <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80045bc:	b480      	push	{r7}
 80045be:	b087      	sub	sp, #28
 80045c0:	af00      	add	r7, sp, #0
 80045c2:	6078      	str	r0, [r7, #4]
 80045c4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 80045c6:	2300      	movs	r3, #0
 80045c8:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 80045ca:	e15a      	b.n	8004882 <HAL_GPIO_Init+0x2c6>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 80045cc:	683b      	ldr	r3, [r7, #0]
 80045ce:	681a      	ldr	r2, [r3, #0]
 80045d0:	2101      	movs	r1, #1
 80045d2:	697b      	ldr	r3, [r7, #20]
 80045d4:	fa01 f303 	lsl.w	r3, r1, r3
 80045d8:	4013      	ands	r3, r2
 80045da:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80045dc:	68fb      	ldr	r3, [r7, #12]
 80045de:	2b00      	cmp	r3, #0
 80045e0:	f000 814c 	beq.w	800487c <HAL_GPIO_Init+0x2c0>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80045e4:	683b      	ldr	r3, [r7, #0]
 80045e6:	685b      	ldr	r3, [r3, #4]
 80045e8:	2b01      	cmp	r3, #1
 80045ea:	d00b      	beq.n	8004604 <HAL_GPIO_Init+0x48>
 80045ec:	683b      	ldr	r3, [r7, #0]
 80045ee:	685b      	ldr	r3, [r3, #4]
 80045f0:	2b02      	cmp	r3, #2
 80045f2:	d007      	beq.n	8004604 <HAL_GPIO_Init+0x48>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80045f4:	683b      	ldr	r3, [r7, #0]
 80045f6:	685b      	ldr	r3, [r3, #4]
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80045f8:	2b11      	cmp	r3, #17
 80045fa:	d003      	beq.n	8004604 <HAL_GPIO_Init+0x48>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80045fc:	683b      	ldr	r3, [r7, #0]
 80045fe:	685b      	ldr	r3, [r3, #4]
 8004600:	2b12      	cmp	r3, #18
 8004602:	d130      	bne.n	8004666 <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8004604:	687b      	ldr	r3, [r7, #4]
 8004606:	689b      	ldr	r3, [r3, #8]
 8004608:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 800460a:	697b      	ldr	r3, [r7, #20]
 800460c:	005b      	lsls	r3, r3, #1
 800460e:	2203      	movs	r2, #3
 8004610:	fa02 f303 	lsl.w	r3, r2, r3
 8004614:	43db      	mvns	r3, r3
 8004616:	693a      	ldr	r2, [r7, #16]
 8004618:	4013      	ands	r3, r2
 800461a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800461c:	683b      	ldr	r3, [r7, #0]
 800461e:	68da      	ldr	r2, [r3, #12]
 8004620:	697b      	ldr	r3, [r7, #20]
 8004622:	005b      	lsls	r3, r3, #1
 8004624:	fa02 f303 	lsl.w	r3, r2, r3
 8004628:	693a      	ldr	r2, [r7, #16]
 800462a:	4313      	orrs	r3, r2
 800462c:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800462e:	687b      	ldr	r3, [r7, #4]
 8004630:	693a      	ldr	r2, [r7, #16]
 8004632:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8004634:	687b      	ldr	r3, [r7, #4]
 8004636:	685b      	ldr	r3, [r3, #4]
 8004638:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800463a:	2201      	movs	r2, #1
 800463c:	697b      	ldr	r3, [r7, #20]
 800463e:	fa02 f303 	lsl.w	r3, r2, r3
 8004642:	43db      	mvns	r3, r3
 8004644:	693a      	ldr	r2, [r7, #16]
 8004646:	4013      	ands	r3, r2
 8004648:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 800464a:	683b      	ldr	r3, [r7, #0]
 800464c:	685b      	ldr	r3, [r3, #4]
 800464e:	091b      	lsrs	r3, r3, #4
 8004650:	f003 0201 	and.w	r2, r3, #1
 8004654:	697b      	ldr	r3, [r7, #20]
 8004656:	fa02 f303 	lsl.w	r3, r2, r3
 800465a:	693a      	ldr	r2, [r7, #16]
 800465c:	4313      	orrs	r3, r2
 800465e:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8004660:	687b      	ldr	r3, [r7, #4]
 8004662:	693a      	ldr	r2, [r7, #16]
 8004664:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8004666:	687b      	ldr	r3, [r7, #4]
 8004668:	68db      	ldr	r3, [r3, #12]
 800466a:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 800466c:	697b      	ldr	r3, [r7, #20]
 800466e:	005b      	lsls	r3, r3, #1
 8004670:	2203      	movs	r2, #3
 8004672:	fa02 f303 	lsl.w	r3, r2, r3
 8004676:	43db      	mvns	r3, r3
 8004678:	693a      	ldr	r2, [r7, #16]
 800467a:	4013      	ands	r3, r2
 800467c:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 800467e:	683b      	ldr	r3, [r7, #0]
 8004680:	689a      	ldr	r2, [r3, #8]
 8004682:	697b      	ldr	r3, [r7, #20]
 8004684:	005b      	lsls	r3, r3, #1
 8004686:	fa02 f303 	lsl.w	r3, r2, r3
 800468a:	693a      	ldr	r2, [r7, #16]
 800468c:	4313      	orrs	r3, r2
 800468e:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 8004690:	687b      	ldr	r3, [r7, #4]
 8004692:	693a      	ldr	r2, [r7, #16]
 8004694:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8004696:	683b      	ldr	r3, [r7, #0]
 8004698:	685b      	ldr	r3, [r3, #4]
 800469a:	2b02      	cmp	r3, #2
 800469c:	d003      	beq.n	80046a6 <HAL_GPIO_Init+0xea>
 800469e:	683b      	ldr	r3, [r7, #0]
 80046a0:	685b      	ldr	r3, [r3, #4]
 80046a2:	2b12      	cmp	r3, #18
 80046a4:	d123      	bne.n	80046ee <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80046a6:	697b      	ldr	r3, [r7, #20]
 80046a8:	08da      	lsrs	r2, r3, #3
 80046aa:	687b      	ldr	r3, [r7, #4]
 80046ac:	3208      	adds	r2, #8
 80046ae:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80046b2:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 80046b4:	697b      	ldr	r3, [r7, #20]
 80046b6:	f003 0307 	and.w	r3, r3, #7
 80046ba:	009b      	lsls	r3, r3, #2
 80046bc:	220f      	movs	r2, #15
 80046be:	fa02 f303 	lsl.w	r3, r2, r3
 80046c2:	43db      	mvns	r3, r3
 80046c4:	693a      	ldr	r2, [r7, #16]
 80046c6:	4013      	ands	r3, r2
 80046c8:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 80046ca:	683b      	ldr	r3, [r7, #0]
 80046cc:	691a      	ldr	r2, [r3, #16]
 80046ce:	697b      	ldr	r3, [r7, #20]
 80046d0:	f003 0307 	and.w	r3, r3, #7
 80046d4:	009b      	lsls	r3, r3, #2
 80046d6:	fa02 f303 	lsl.w	r3, r2, r3
 80046da:	693a      	ldr	r2, [r7, #16]
 80046dc:	4313      	orrs	r3, r2
 80046de:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 80046e0:	697b      	ldr	r3, [r7, #20]
 80046e2:	08da      	lsrs	r2, r3, #3
 80046e4:	687b      	ldr	r3, [r7, #4]
 80046e6:	3208      	adds	r2, #8
 80046e8:	6939      	ldr	r1, [r7, #16]
 80046ea:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80046ee:	687b      	ldr	r3, [r7, #4]
 80046f0:	681b      	ldr	r3, [r3, #0]
 80046f2:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 80046f4:	697b      	ldr	r3, [r7, #20]
 80046f6:	005b      	lsls	r3, r3, #1
 80046f8:	2203      	movs	r2, #3
 80046fa:	fa02 f303 	lsl.w	r3, r2, r3
 80046fe:	43db      	mvns	r3, r3
 8004700:	693a      	ldr	r2, [r7, #16]
 8004702:	4013      	ands	r3, r2
 8004704:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8004706:	683b      	ldr	r3, [r7, #0]
 8004708:	685b      	ldr	r3, [r3, #4]
 800470a:	f003 0203 	and.w	r2, r3, #3
 800470e:	697b      	ldr	r3, [r7, #20]
 8004710:	005b      	lsls	r3, r3, #1
 8004712:	fa02 f303 	lsl.w	r3, r2, r3
 8004716:	693a      	ldr	r2, [r7, #16]
 8004718:	4313      	orrs	r3, r2
 800471a:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 800471c:	687b      	ldr	r3, [r7, #4]
 800471e:	693a      	ldr	r2, [r7, #16]
 8004720:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8004722:	683b      	ldr	r3, [r7, #0]
 8004724:	685b      	ldr	r3, [r3, #4]
 8004726:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800472a:	2b00      	cmp	r3, #0
 800472c:	f000 80a6 	beq.w	800487c <HAL_GPIO_Init+0x2c0>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004730:	4b5b      	ldr	r3, [pc, #364]	; (80048a0 <HAL_GPIO_Init+0x2e4>)
 8004732:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004734:	4a5a      	ldr	r2, [pc, #360]	; (80048a0 <HAL_GPIO_Init+0x2e4>)
 8004736:	f043 0301 	orr.w	r3, r3, #1
 800473a:	6613      	str	r3, [r2, #96]	; 0x60
 800473c:	4b58      	ldr	r3, [pc, #352]	; (80048a0 <HAL_GPIO_Init+0x2e4>)
 800473e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004740:	f003 0301 	and.w	r3, r3, #1
 8004744:	60bb      	str	r3, [r7, #8]
 8004746:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2U];
 8004748:	4a56      	ldr	r2, [pc, #344]	; (80048a4 <HAL_GPIO_Init+0x2e8>)
 800474a:	697b      	ldr	r3, [r7, #20]
 800474c:	089b      	lsrs	r3, r3, #2
 800474e:	3302      	adds	r3, #2
 8004750:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004754:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8004756:	697b      	ldr	r3, [r7, #20]
 8004758:	f003 0303 	and.w	r3, r3, #3
 800475c:	009b      	lsls	r3, r3, #2
 800475e:	220f      	movs	r2, #15
 8004760:	fa02 f303 	lsl.w	r3, r2, r3
 8004764:	43db      	mvns	r3, r3
 8004766:	693a      	ldr	r2, [r7, #16]
 8004768:	4013      	ands	r3, r2
 800476a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 800476c:	687b      	ldr	r3, [r7, #4]
 800476e:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8004772:	d01f      	beq.n	80047b4 <HAL_GPIO_Init+0x1f8>
 8004774:	687b      	ldr	r3, [r7, #4]
 8004776:	4a4c      	ldr	r2, [pc, #304]	; (80048a8 <HAL_GPIO_Init+0x2ec>)
 8004778:	4293      	cmp	r3, r2
 800477a:	d019      	beq.n	80047b0 <HAL_GPIO_Init+0x1f4>
 800477c:	687b      	ldr	r3, [r7, #4]
 800477e:	4a4b      	ldr	r2, [pc, #300]	; (80048ac <HAL_GPIO_Init+0x2f0>)
 8004780:	4293      	cmp	r3, r2
 8004782:	d013      	beq.n	80047ac <HAL_GPIO_Init+0x1f0>
 8004784:	687b      	ldr	r3, [r7, #4]
 8004786:	4a4a      	ldr	r2, [pc, #296]	; (80048b0 <HAL_GPIO_Init+0x2f4>)
 8004788:	4293      	cmp	r3, r2
 800478a:	d00d      	beq.n	80047a8 <HAL_GPIO_Init+0x1ec>
 800478c:	687b      	ldr	r3, [r7, #4]
 800478e:	4a49      	ldr	r2, [pc, #292]	; (80048b4 <HAL_GPIO_Init+0x2f8>)
 8004790:	4293      	cmp	r3, r2
 8004792:	d007      	beq.n	80047a4 <HAL_GPIO_Init+0x1e8>
 8004794:	687b      	ldr	r3, [r7, #4]
 8004796:	4a48      	ldr	r2, [pc, #288]	; (80048b8 <HAL_GPIO_Init+0x2fc>)
 8004798:	4293      	cmp	r3, r2
 800479a:	d101      	bne.n	80047a0 <HAL_GPIO_Init+0x1e4>
 800479c:	2305      	movs	r3, #5
 800479e:	e00a      	b.n	80047b6 <HAL_GPIO_Init+0x1fa>
 80047a0:	2306      	movs	r3, #6
 80047a2:	e008      	b.n	80047b6 <HAL_GPIO_Init+0x1fa>
 80047a4:	2304      	movs	r3, #4
 80047a6:	e006      	b.n	80047b6 <HAL_GPIO_Init+0x1fa>
 80047a8:	2303      	movs	r3, #3
 80047aa:	e004      	b.n	80047b6 <HAL_GPIO_Init+0x1fa>
 80047ac:	2302      	movs	r3, #2
 80047ae:	e002      	b.n	80047b6 <HAL_GPIO_Init+0x1fa>
 80047b0:	2301      	movs	r3, #1
 80047b2:	e000      	b.n	80047b6 <HAL_GPIO_Init+0x1fa>
 80047b4:	2300      	movs	r3, #0
 80047b6:	697a      	ldr	r2, [r7, #20]
 80047b8:	f002 0203 	and.w	r2, r2, #3
 80047bc:	0092      	lsls	r2, r2, #2
 80047be:	4093      	lsls	r3, r2
 80047c0:	693a      	ldr	r2, [r7, #16]
 80047c2:	4313      	orrs	r3, r2
 80047c4:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80047c6:	4937      	ldr	r1, [pc, #220]	; (80048a4 <HAL_GPIO_Init+0x2e8>)
 80047c8:	697b      	ldr	r3, [r7, #20]
 80047ca:	089b      	lsrs	r3, r3, #2
 80047cc:	3302      	adds	r3, #2
 80047ce:	693a      	ldr	r2, [r7, #16]
 80047d0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 80047d4:	4b39      	ldr	r3, [pc, #228]	; (80048bc <HAL_GPIO_Init+0x300>)
 80047d6:	681b      	ldr	r3, [r3, #0]
 80047d8:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80047da:	68fb      	ldr	r3, [r7, #12]
 80047dc:	43db      	mvns	r3, r3
 80047de:	693a      	ldr	r2, [r7, #16]
 80047e0:	4013      	ands	r3, r2
 80047e2:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80047e4:	683b      	ldr	r3, [r7, #0]
 80047e6:	685b      	ldr	r3, [r3, #4]
 80047e8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80047ec:	2b00      	cmp	r3, #0
 80047ee:	d003      	beq.n	80047f8 <HAL_GPIO_Init+0x23c>
        {
          temp |= iocurrent;
 80047f0:	693a      	ldr	r2, [r7, #16]
 80047f2:	68fb      	ldr	r3, [r7, #12]
 80047f4:	4313      	orrs	r3, r2
 80047f6:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 80047f8:	4a30      	ldr	r2, [pc, #192]	; (80048bc <HAL_GPIO_Init+0x300>)
 80047fa:	693b      	ldr	r3, [r7, #16]
 80047fc:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR1;
 80047fe:	4b2f      	ldr	r3, [pc, #188]	; (80048bc <HAL_GPIO_Init+0x300>)
 8004800:	685b      	ldr	r3, [r3, #4]
 8004802:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004804:	68fb      	ldr	r3, [r7, #12]
 8004806:	43db      	mvns	r3, r3
 8004808:	693a      	ldr	r2, [r7, #16]
 800480a:	4013      	ands	r3, r2
 800480c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 800480e:	683b      	ldr	r3, [r7, #0]
 8004810:	685b      	ldr	r3, [r3, #4]
 8004812:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004816:	2b00      	cmp	r3, #0
 8004818:	d003      	beq.n	8004822 <HAL_GPIO_Init+0x266>
        {
          temp |= iocurrent;
 800481a:	693a      	ldr	r2, [r7, #16]
 800481c:	68fb      	ldr	r3, [r7, #12]
 800481e:	4313      	orrs	r3, r2
 8004820:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8004822:	4a26      	ldr	r2, [pc, #152]	; (80048bc <HAL_GPIO_Init+0x300>)
 8004824:	693b      	ldr	r3, [r7, #16]
 8004826:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8004828:	4b24      	ldr	r3, [pc, #144]	; (80048bc <HAL_GPIO_Init+0x300>)
 800482a:	689b      	ldr	r3, [r3, #8]
 800482c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800482e:	68fb      	ldr	r3, [r7, #12]
 8004830:	43db      	mvns	r3, r3
 8004832:	693a      	ldr	r2, [r7, #16]
 8004834:	4013      	ands	r3, r2
 8004836:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8004838:	683b      	ldr	r3, [r7, #0]
 800483a:	685b      	ldr	r3, [r3, #4]
 800483c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004840:	2b00      	cmp	r3, #0
 8004842:	d003      	beq.n	800484c <HAL_GPIO_Init+0x290>
        {
          temp |= iocurrent;
 8004844:	693a      	ldr	r2, [r7, #16]
 8004846:	68fb      	ldr	r3, [r7, #12]
 8004848:	4313      	orrs	r3, r2
 800484a:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 800484c:	4a1b      	ldr	r2, [pc, #108]	; (80048bc <HAL_GPIO_Init+0x300>)
 800484e:	693b      	ldr	r3, [r7, #16]
 8004850:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8004852:	4b1a      	ldr	r3, [pc, #104]	; (80048bc <HAL_GPIO_Init+0x300>)
 8004854:	68db      	ldr	r3, [r3, #12]
 8004856:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004858:	68fb      	ldr	r3, [r7, #12]
 800485a:	43db      	mvns	r3, r3
 800485c:	693a      	ldr	r2, [r7, #16]
 800485e:	4013      	ands	r3, r2
 8004860:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8004862:	683b      	ldr	r3, [r7, #0]
 8004864:	685b      	ldr	r3, [r3, #4]
 8004866:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800486a:	2b00      	cmp	r3, #0
 800486c:	d003      	beq.n	8004876 <HAL_GPIO_Init+0x2ba>
        {
          temp |= iocurrent;
 800486e:	693a      	ldr	r2, [r7, #16]
 8004870:	68fb      	ldr	r3, [r7, #12]
 8004872:	4313      	orrs	r3, r2
 8004874:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8004876:	4a11      	ldr	r2, [pc, #68]	; (80048bc <HAL_GPIO_Init+0x300>)
 8004878:	693b      	ldr	r3, [r7, #16]
 800487a:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 800487c:	697b      	ldr	r3, [r7, #20]
 800487e:	3301      	adds	r3, #1
 8004880:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0U)
 8004882:	683b      	ldr	r3, [r7, #0]
 8004884:	681a      	ldr	r2, [r3, #0]
 8004886:	697b      	ldr	r3, [r7, #20]
 8004888:	fa22 f303 	lsr.w	r3, r2, r3
 800488c:	2b00      	cmp	r3, #0
 800488e:	f47f ae9d 	bne.w	80045cc <HAL_GPIO_Init+0x10>
  }
}
 8004892:	bf00      	nop
 8004894:	371c      	adds	r7, #28
 8004896:	46bd      	mov	sp, r7
 8004898:	f85d 7b04 	ldr.w	r7, [sp], #4
 800489c:	4770      	bx	lr
 800489e:	bf00      	nop
 80048a0:	40021000 	.word	0x40021000
 80048a4:	40010000 	.word	0x40010000
 80048a8:	48000400 	.word	0x48000400
 80048ac:	48000800 	.word	0x48000800
 80048b0:	48000c00 	.word	0x48000c00
 80048b4:	48001000 	.word	0x48001000
 80048b8:	48001400 	.word	0x48001400
 80048bc:	40010400 	.word	0x40010400

080048c0 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be any combination of GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 80048c0:	b480      	push	{r7}
 80048c2:	b085      	sub	sp, #20
 80048c4:	af00      	add	r7, sp, #0
 80048c6:	6078      	str	r0, [r7, #4]
 80048c8:	460b      	mov	r3, r1
 80048ca:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00U)
 80048cc:	687b      	ldr	r3, [r7, #4]
 80048ce:	691a      	ldr	r2, [r3, #16]
 80048d0:	887b      	ldrh	r3, [r7, #2]
 80048d2:	4013      	ands	r3, r2
 80048d4:	2b00      	cmp	r3, #0
 80048d6:	d002      	beq.n	80048de <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80048d8:	2301      	movs	r3, #1
 80048da:	73fb      	strb	r3, [r7, #15]
 80048dc:	e001      	b.n	80048e2 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80048de:	2300      	movs	r3, #0
 80048e0:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80048e2:	7bfb      	ldrb	r3, [r7, #15]
}
 80048e4:	4618      	mov	r0, r3
 80048e6:	3714      	adds	r7, #20
 80048e8:	46bd      	mov	sp, r7
 80048ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048ee:	4770      	bx	lr

080048f0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80048f0:	b480      	push	{r7}
 80048f2:	b083      	sub	sp, #12
 80048f4:	af00      	add	r7, sp, #0
 80048f6:	6078      	str	r0, [r7, #4]
 80048f8:	460b      	mov	r3, r1
 80048fa:	807b      	strh	r3, [r7, #2]
 80048fc:	4613      	mov	r3, r2
 80048fe:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8004900:	787b      	ldrb	r3, [r7, #1]
 8004902:	2b00      	cmp	r3, #0
 8004904:	d003      	beq.n	800490e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8004906:	887a      	ldrh	r2, [r7, #2]
 8004908:	687b      	ldr	r3, [r7, #4]
 800490a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 800490c:	e002      	b.n	8004914 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 800490e:	887a      	ldrh	r2, [r7, #2]
 8004910:	687b      	ldr	r3, [r7, #4]
 8004912:	629a      	str	r2, [r3, #40]	; 0x28
}
 8004914:	bf00      	nop
 8004916:	370c      	adds	r7, #12
 8004918:	46bd      	mov	sp, r7
 800491a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800491e:	4770      	bx	lr

08004920 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8004920:	b480      	push	{r7}
 8004922:	b085      	sub	sp, #20
 8004924:	af00      	add	r7, sp, #0
 8004926:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 8004928:	687b      	ldr	r3, [r7, #4]
 800492a:	2b00      	cmp	r3, #0
 800492c:	d141      	bne.n	80049b2 <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 800492e:	4b4b      	ldr	r3, [pc, #300]	; (8004a5c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004930:	681b      	ldr	r3, [r3, #0]
 8004932:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8004936:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800493a:	d131      	bne.n	80049a0 <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 800493c:	4b47      	ldr	r3, [pc, #284]	; (8004a5c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800493e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004942:	4a46      	ldr	r2, [pc, #280]	; (8004a5c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004944:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004948:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 800494c:	4b43      	ldr	r3, [pc, #268]	; (8004a5c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800494e:	681b      	ldr	r3, [r3, #0]
 8004950:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8004954:	4a41      	ldr	r2, [pc, #260]	; (8004a5c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004956:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800495a:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 800495c:	4b40      	ldr	r3, [pc, #256]	; (8004a60 <HAL_PWREx_ControlVoltageScaling+0x140>)
 800495e:	681b      	ldr	r3, [r3, #0]
 8004960:	2232      	movs	r2, #50	; 0x32
 8004962:	fb02 f303 	mul.w	r3, r2, r3
 8004966:	4a3f      	ldr	r2, [pc, #252]	; (8004a64 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8004968:	fba2 2303 	umull	r2, r3, r2, r3
 800496c:	0c9b      	lsrs	r3, r3, #18
 800496e:	3301      	adds	r3, #1
 8004970:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8004972:	e002      	b.n	800497a <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 8004974:	68fb      	ldr	r3, [r7, #12]
 8004976:	3b01      	subs	r3, #1
 8004978:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800497a:	4b38      	ldr	r3, [pc, #224]	; (8004a5c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800497c:	695b      	ldr	r3, [r3, #20]
 800497e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004982:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004986:	d102      	bne.n	800498e <HAL_PWREx_ControlVoltageScaling+0x6e>
 8004988:	68fb      	ldr	r3, [r7, #12]
 800498a:	2b00      	cmp	r3, #0
 800498c:	d1f2      	bne.n	8004974 <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 800498e:	4b33      	ldr	r3, [pc, #204]	; (8004a5c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004990:	695b      	ldr	r3, [r3, #20]
 8004992:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004996:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800499a:	d158      	bne.n	8004a4e <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 800499c:	2303      	movs	r3, #3
 800499e:	e057      	b.n	8004a50 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80049a0:	4b2e      	ldr	r3, [pc, #184]	; (8004a5c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80049a2:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80049a6:	4a2d      	ldr	r2, [pc, #180]	; (8004a5c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80049a8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80049ac:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 80049b0:	e04d      	b.n	8004a4e <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 80049b2:	687b      	ldr	r3, [r7, #4]
 80049b4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80049b8:	d141      	bne.n	8004a3e <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 80049ba:	4b28      	ldr	r3, [pc, #160]	; (8004a5c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80049bc:	681b      	ldr	r3, [r3, #0]
 80049be:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80049c2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80049c6:	d131      	bne.n	8004a2c <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80049c8:	4b24      	ldr	r3, [pc, #144]	; (8004a5c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80049ca:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80049ce:	4a23      	ldr	r2, [pc, #140]	; (8004a5c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80049d0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80049d4:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 80049d8:	4b20      	ldr	r3, [pc, #128]	; (8004a5c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80049da:	681b      	ldr	r3, [r3, #0]
 80049dc:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80049e0:	4a1e      	ldr	r2, [pc, #120]	; (8004a5c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80049e2:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80049e6:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 80049e8:	4b1d      	ldr	r3, [pc, #116]	; (8004a60 <HAL_PWREx_ControlVoltageScaling+0x140>)
 80049ea:	681b      	ldr	r3, [r3, #0]
 80049ec:	2232      	movs	r2, #50	; 0x32
 80049ee:	fb02 f303 	mul.w	r3, r2, r3
 80049f2:	4a1c      	ldr	r2, [pc, #112]	; (8004a64 <HAL_PWREx_ControlVoltageScaling+0x144>)
 80049f4:	fba2 2303 	umull	r2, r3, r2, r3
 80049f8:	0c9b      	lsrs	r3, r3, #18
 80049fa:	3301      	adds	r3, #1
 80049fc:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80049fe:	e002      	b.n	8004a06 <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 8004a00:	68fb      	ldr	r3, [r7, #12]
 8004a02:	3b01      	subs	r3, #1
 8004a04:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8004a06:	4b15      	ldr	r3, [pc, #84]	; (8004a5c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004a08:	695b      	ldr	r3, [r3, #20]
 8004a0a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004a0e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004a12:	d102      	bne.n	8004a1a <HAL_PWREx_ControlVoltageScaling+0xfa>
 8004a14:	68fb      	ldr	r3, [r7, #12]
 8004a16:	2b00      	cmp	r3, #0
 8004a18:	d1f2      	bne.n	8004a00 <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8004a1a:	4b10      	ldr	r3, [pc, #64]	; (8004a5c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004a1c:	695b      	ldr	r3, [r3, #20]
 8004a1e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004a22:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004a26:	d112      	bne.n	8004a4e <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8004a28:	2303      	movs	r3, #3
 8004a2a:	e011      	b.n	8004a50 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8004a2c:	4b0b      	ldr	r3, [pc, #44]	; (8004a5c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004a2e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004a32:	4a0a      	ldr	r2, [pc, #40]	; (8004a5c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004a34:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004a38:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 8004a3c:	e007      	b.n	8004a4e <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8004a3e:	4b07      	ldr	r3, [pc, #28]	; (8004a5c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004a40:	681b      	ldr	r3, [r3, #0]
 8004a42:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8004a46:	4a05      	ldr	r2, [pc, #20]	; (8004a5c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004a48:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8004a4c:	6013      	str	r3, [r2, #0]
    /* No need to wait for VOSF to be cleared for this transition */
    /* PWR_CR5_R1MODE bit setting has no effect in Range 2        */
  }

  return HAL_OK;
 8004a4e:	2300      	movs	r3, #0
}
 8004a50:	4618      	mov	r0, r3
 8004a52:	3714      	adds	r7, #20
 8004a54:	46bd      	mov	sp, r7
 8004a56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a5a:	4770      	bx	lr
 8004a5c:	40007000 	.word	0x40007000
 8004a60:	200003c4 	.word	0x200003c4
 8004a64:	431bde83 	.word	0x431bde83

08004a68 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004a68:	b580      	push	{r7, lr}
 8004a6a:	b088      	sub	sp, #32
 8004a6c:	af00      	add	r7, sp, #0
 8004a6e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8004a70:	687b      	ldr	r3, [r7, #4]
 8004a72:	2b00      	cmp	r3, #0
 8004a74:	d101      	bne.n	8004a7a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8004a76:	2301      	movs	r3, #1
 8004a78:	e308      	b.n	800508c <HAL_RCC_OscConfig+0x624>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004a7a:	687b      	ldr	r3, [r7, #4]
 8004a7c:	681b      	ldr	r3, [r3, #0]
 8004a7e:	f003 0301 	and.w	r3, r3, #1
 8004a82:	2b00      	cmp	r3, #0
 8004a84:	d075      	beq.n	8004b72 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004a86:	4ba3      	ldr	r3, [pc, #652]	; (8004d14 <HAL_RCC_OscConfig+0x2ac>)
 8004a88:	689b      	ldr	r3, [r3, #8]
 8004a8a:	f003 030c 	and.w	r3, r3, #12
 8004a8e:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8004a90:	4ba0      	ldr	r3, [pc, #640]	; (8004d14 <HAL_RCC_OscConfig+0x2ac>)
 8004a92:	68db      	ldr	r3, [r3, #12]
 8004a94:	f003 0303 	and.w	r3, r3, #3
 8004a98:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 8004a9a:	69bb      	ldr	r3, [r7, #24]
 8004a9c:	2b0c      	cmp	r3, #12
 8004a9e:	d102      	bne.n	8004aa6 <HAL_RCC_OscConfig+0x3e>
 8004aa0:	697b      	ldr	r3, [r7, #20]
 8004aa2:	2b03      	cmp	r3, #3
 8004aa4:	d002      	beq.n	8004aac <HAL_RCC_OscConfig+0x44>
 8004aa6:	69bb      	ldr	r3, [r7, #24]
 8004aa8:	2b08      	cmp	r3, #8
 8004aaa:	d10b      	bne.n	8004ac4 <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004aac:	4b99      	ldr	r3, [pc, #612]	; (8004d14 <HAL_RCC_OscConfig+0x2ac>)
 8004aae:	681b      	ldr	r3, [r3, #0]
 8004ab0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004ab4:	2b00      	cmp	r3, #0
 8004ab6:	d05b      	beq.n	8004b70 <HAL_RCC_OscConfig+0x108>
 8004ab8:	687b      	ldr	r3, [r7, #4]
 8004aba:	685b      	ldr	r3, [r3, #4]
 8004abc:	2b00      	cmp	r3, #0
 8004abe:	d157      	bne.n	8004b70 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8004ac0:	2301      	movs	r3, #1
 8004ac2:	e2e3      	b.n	800508c <HAL_RCC_OscConfig+0x624>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004ac4:	687b      	ldr	r3, [r7, #4]
 8004ac6:	685b      	ldr	r3, [r3, #4]
 8004ac8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004acc:	d106      	bne.n	8004adc <HAL_RCC_OscConfig+0x74>
 8004ace:	4b91      	ldr	r3, [pc, #580]	; (8004d14 <HAL_RCC_OscConfig+0x2ac>)
 8004ad0:	681b      	ldr	r3, [r3, #0]
 8004ad2:	4a90      	ldr	r2, [pc, #576]	; (8004d14 <HAL_RCC_OscConfig+0x2ac>)
 8004ad4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004ad8:	6013      	str	r3, [r2, #0]
 8004ada:	e01d      	b.n	8004b18 <HAL_RCC_OscConfig+0xb0>
 8004adc:	687b      	ldr	r3, [r7, #4]
 8004ade:	685b      	ldr	r3, [r3, #4]
 8004ae0:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8004ae4:	d10c      	bne.n	8004b00 <HAL_RCC_OscConfig+0x98>
 8004ae6:	4b8b      	ldr	r3, [pc, #556]	; (8004d14 <HAL_RCC_OscConfig+0x2ac>)
 8004ae8:	681b      	ldr	r3, [r3, #0]
 8004aea:	4a8a      	ldr	r2, [pc, #552]	; (8004d14 <HAL_RCC_OscConfig+0x2ac>)
 8004aec:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8004af0:	6013      	str	r3, [r2, #0]
 8004af2:	4b88      	ldr	r3, [pc, #544]	; (8004d14 <HAL_RCC_OscConfig+0x2ac>)
 8004af4:	681b      	ldr	r3, [r3, #0]
 8004af6:	4a87      	ldr	r2, [pc, #540]	; (8004d14 <HAL_RCC_OscConfig+0x2ac>)
 8004af8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004afc:	6013      	str	r3, [r2, #0]
 8004afe:	e00b      	b.n	8004b18 <HAL_RCC_OscConfig+0xb0>
 8004b00:	4b84      	ldr	r3, [pc, #528]	; (8004d14 <HAL_RCC_OscConfig+0x2ac>)
 8004b02:	681b      	ldr	r3, [r3, #0]
 8004b04:	4a83      	ldr	r2, [pc, #524]	; (8004d14 <HAL_RCC_OscConfig+0x2ac>)
 8004b06:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004b0a:	6013      	str	r3, [r2, #0]
 8004b0c:	4b81      	ldr	r3, [pc, #516]	; (8004d14 <HAL_RCC_OscConfig+0x2ac>)
 8004b0e:	681b      	ldr	r3, [r3, #0]
 8004b10:	4a80      	ldr	r2, [pc, #512]	; (8004d14 <HAL_RCC_OscConfig+0x2ac>)
 8004b12:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004b16:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8004b18:	687b      	ldr	r3, [r7, #4]
 8004b1a:	685b      	ldr	r3, [r3, #4]
 8004b1c:	2b00      	cmp	r3, #0
 8004b1e:	d013      	beq.n	8004b48 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004b20:	f7fd faaa 	bl	8002078 <HAL_GetTick>
 8004b24:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8004b26:	e008      	b.n	8004b3a <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004b28:	f7fd faa6 	bl	8002078 <HAL_GetTick>
 8004b2c:	4602      	mov	r2, r0
 8004b2e:	693b      	ldr	r3, [r7, #16]
 8004b30:	1ad3      	subs	r3, r2, r3
 8004b32:	2b64      	cmp	r3, #100	; 0x64
 8004b34:	d901      	bls.n	8004b3a <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8004b36:	2303      	movs	r3, #3
 8004b38:	e2a8      	b.n	800508c <HAL_RCC_OscConfig+0x624>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8004b3a:	4b76      	ldr	r3, [pc, #472]	; (8004d14 <HAL_RCC_OscConfig+0x2ac>)
 8004b3c:	681b      	ldr	r3, [r3, #0]
 8004b3e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004b42:	2b00      	cmp	r3, #0
 8004b44:	d0f0      	beq.n	8004b28 <HAL_RCC_OscConfig+0xc0>
 8004b46:	e014      	b.n	8004b72 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004b48:	f7fd fa96 	bl	8002078 <HAL_GetTick>
 8004b4c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8004b4e:	e008      	b.n	8004b62 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004b50:	f7fd fa92 	bl	8002078 <HAL_GetTick>
 8004b54:	4602      	mov	r2, r0
 8004b56:	693b      	ldr	r3, [r7, #16]
 8004b58:	1ad3      	subs	r3, r2, r3
 8004b5a:	2b64      	cmp	r3, #100	; 0x64
 8004b5c:	d901      	bls.n	8004b62 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8004b5e:	2303      	movs	r3, #3
 8004b60:	e294      	b.n	800508c <HAL_RCC_OscConfig+0x624>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8004b62:	4b6c      	ldr	r3, [pc, #432]	; (8004d14 <HAL_RCC_OscConfig+0x2ac>)
 8004b64:	681b      	ldr	r3, [r3, #0]
 8004b66:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004b6a:	2b00      	cmp	r3, #0
 8004b6c:	d1f0      	bne.n	8004b50 <HAL_RCC_OscConfig+0xe8>
 8004b6e:	e000      	b.n	8004b72 <HAL_RCC_OscConfig+0x10a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004b70:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004b72:	687b      	ldr	r3, [r7, #4]
 8004b74:	681b      	ldr	r3, [r3, #0]
 8004b76:	f003 0302 	and.w	r3, r3, #2
 8004b7a:	2b00      	cmp	r3, #0
 8004b7c:	d075      	beq.n	8004c6a <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004b7e:	4b65      	ldr	r3, [pc, #404]	; (8004d14 <HAL_RCC_OscConfig+0x2ac>)
 8004b80:	689b      	ldr	r3, [r3, #8]
 8004b82:	f003 030c 	and.w	r3, r3, #12
 8004b86:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8004b88:	4b62      	ldr	r3, [pc, #392]	; (8004d14 <HAL_RCC_OscConfig+0x2ac>)
 8004b8a:	68db      	ldr	r3, [r3, #12]
 8004b8c:	f003 0303 	and.w	r3, r3, #3
 8004b90:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 8004b92:	69bb      	ldr	r3, [r7, #24]
 8004b94:	2b0c      	cmp	r3, #12
 8004b96:	d102      	bne.n	8004b9e <HAL_RCC_OscConfig+0x136>
 8004b98:	697b      	ldr	r3, [r7, #20]
 8004b9a:	2b02      	cmp	r3, #2
 8004b9c:	d002      	beq.n	8004ba4 <HAL_RCC_OscConfig+0x13c>
 8004b9e:	69bb      	ldr	r3, [r7, #24]
 8004ba0:	2b04      	cmp	r3, #4
 8004ba2:	d11f      	bne.n	8004be4 <HAL_RCC_OscConfig+0x17c>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8004ba4:	4b5b      	ldr	r3, [pc, #364]	; (8004d14 <HAL_RCC_OscConfig+0x2ac>)
 8004ba6:	681b      	ldr	r3, [r3, #0]
 8004ba8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004bac:	2b00      	cmp	r3, #0
 8004bae:	d005      	beq.n	8004bbc <HAL_RCC_OscConfig+0x154>
 8004bb0:	687b      	ldr	r3, [r7, #4]
 8004bb2:	68db      	ldr	r3, [r3, #12]
 8004bb4:	2b00      	cmp	r3, #0
 8004bb6:	d101      	bne.n	8004bbc <HAL_RCC_OscConfig+0x154>
      {
        return HAL_ERROR;
 8004bb8:	2301      	movs	r3, #1
 8004bba:	e267      	b.n	800508c <HAL_RCC_OscConfig+0x624>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004bbc:	4b55      	ldr	r3, [pc, #340]	; (8004d14 <HAL_RCC_OscConfig+0x2ac>)
 8004bbe:	685b      	ldr	r3, [r3, #4]
 8004bc0:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8004bc4:	687b      	ldr	r3, [r7, #4]
 8004bc6:	691b      	ldr	r3, [r3, #16]
 8004bc8:	061b      	lsls	r3, r3, #24
 8004bca:	4952      	ldr	r1, [pc, #328]	; (8004d14 <HAL_RCC_OscConfig+0x2ac>)
 8004bcc:	4313      	orrs	r3, r2
 8004bce:	604b      	str	r3, [r1, #4]

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8004bd0:	4b51      	ldr	r3, [pc, #324]	; (8004d18 <HAL_RCC_OscConfig+0x2b0>)
 8004bd2:	681b      	ldr	r3, [r3, #0]
 8004bd4:	4618      	mov	r0, r3
 8004bd6:	f7fd fa03 	bl	8001fe0 <HAL_InitTick>
 8004bda:	4603      	mov	r3, r0
 8004bdc:	2b00      	cmp	r3, #0
 8004bde:	d043      	beq.n	8004c68 <HAL_RCC_OscConfig+0x200>
        {
          return HAL_ERROR;
 8004be0:	2301      	movs	r3, #1
 8004be2:	e253      	b.n	800508c <HAL_RCC_OscConfig+0x624>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8004be4:	687b      	ldr	r3, [r7, #4]
 8004be6:	68db      	ldr	r3, [r3, #12]
 8004be8:	2b00      	cmp	r3, #0
 8004bea:	d023      	beq.n	8004c34 <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004bec:	4b49      	ldr	r3, [pc, #292]	; (8004d14 <HAL_RCC_OscConfig+0x2ac>)
 8004bee:	681b      	ldr	r3, [r3, #0]
 8004bf0:	4a48      	ldr	r2, [pc, #288]	; (8004d14 <HAL_RCC_OscConfig+0x2ac>)
 8004bf2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004bf6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004bf8:	f7fd fa3e 	bl	8002078 <HAL_GetTick>
 8004bfc:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8004bfe:	e008      	b.n	8004c12 <HAL_RCC_OscConfig+0x1aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004c00:	f7fd fa3a 	bl	8002078 <HAL_GetTick>
 8004c04:	4602      	mov	r2, r0
 8004c06:	693b      	ldr	r3, [r7, #16]
 8004c08:	1ad3      	subs	r3, r2, r3
 8004c0a:	2b02      	cmp	r3, #2
 8004c0c:	d901      	bls.n	8004c12 <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 8004c0e:	2303      	movs	r3, #3
 8004c10:	e23c      	b.n	800508c <HAL_RCC_OscConfig+0x624>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8004c12:	4b40      	ldr	r3, [pc, #256]	; (8004d14 <HAL_RCC_OscConfig+0x2ac>)
 8004c14:	681b      	ldr	r3, [r3, #0]
 8004c16:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004c1a:	2b00      	cmp	r3, #0
 8004c1c:	d0f0      	beq.n	8004c00 <HAL_RCC_OscConfig+0x198>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004c1e:	4b3d      	ldr	r3, [pc, #244]	; (8004d14 <HAL_RCC_OscConfig+0x2ac>)
 8004c20:	685b      	ldr	r3, [r3, #4]
 8004c22:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8004c26:	687b      	ldr	r3, [r7, #4]
 8004c28:	691b      	ldr	r3, [r3, #16]
 8004c2a:	061b      	lsls	r3, r3, #24
 8004c2c:	4939      	ldr	r1, [pc, #228]	; (8004d14 <HAL_RCC_OscConfig+0x2ac>)
 8004c2e:	4313      	orrs	r3, r2
 8004c30:	604b      	str	r3, [r1, #4]
 8004c32:	e01a      	b.n	8004c6a <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004c34:	4b37      	ldr	r3, [pc, #220]	; (8004d14 <HAL_RCC_OscConfig+0x2ac>)
 8004c36:	681b      	ldr	r3, [r3, #0]
 8004c38:	4a36      	ldr	r2, [pc, #216]	; (8004d14 <HAL_RCC_OscConfig+0x2ac>)
 8004c3a:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004c3e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004c40:	f7fd fa1a 	bl	8002078 <HAL_GetTick>
 8004c44:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8004c46:	e008      	b.n	8004c5a <HAL_RCC_OscConfig+0x1f2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004c48:	f7fd fa16 	bl	8002078 <HAL_GetTick>
 8004c4c:	4602      	mov	r2, r0
 8004c4e:	693b      	ldr	r3, [r7, #16]
 8004c50:	1ad3      	subs	r3, r2, r3
 8004c52:	2b02      	cmp	r3, #2
 8004c54:	d901      	bls.n	8004c5a <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 8004c56:	2303      	movs	r3, #3
 8004c58:	e218      	b.n	800508c <HAL_RCC_OscConfig+0x624>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8004c5a:	4b2e      	ldr	r3, [pc, #184]	; (8004d14 <HAL_RCC_OscConfig+0x2ac>)
 8004c5c:	681b      	ldr	r3, [r3, #0]
 8004c5e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004c62:	2b00      	cmp	r3, #0
 8004c64:	d1f0      	bne.n	8004c48 <HAL_RCC_OscConfig+0x1e0>
 8004c66:	e000      	b.n	8004c6a <HAL_RCC_OscConfig+0x202>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8004c68:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004c6a:	687b      	ldr	r3, [r7, #4]
 8004c6c:	681b      	ldr	r3, [r3, #0]
 8004c6e:	f003 0308 	and.w	r3, r3, #8
 8004c72:	2b00      	cmp	r3, #0
 8004c74:	d03c      	beq.n	8004cf0 <HAL_RCC_OscConfig+0x288>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8004c76:	687b      	ldr	r3, [r7, #4]
 8004c78:	695b      	ldr	r3, [r3, #20]
 8004c7a:	2b00      	cmp	r3, #0
 8004c7c:	d01c      	beq.n	8004cb8 <HAL_RCC_OscConfig+0x250>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004c7e:	4b25      	ldr	r3, [pc, #148]	; (8004d14 <HAL_RCC_OscConfig+0x2ac>)
 8004c80:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004c84:	4a23      	ldr	r2, [pc, #140]	; (8004d14 <HAL_RCC_OscConfig+0x2ac>)
 8004c86:	f043 0301 	orr.w	r3, r3, #1
 8004c8a:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004c8e:	f7fd f9f3 	bl	8002078 <HAL_GetTick>
 8004c92:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8004c94:	e008      	b.n	8004ca8 <HAL_RCC_OscConfig+0x240>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004c96:	f7fd f9ef 	bl	8002078 <HAL_GetTick>
 8004c9a:	4602      	mov	r2, r0
 8004c9c:	693b      	ldr	r3, [r7, #16]
 8004c9e:	1ad3      	subs	r3, r2, r3
 8004ca0:	2b02      	cmp	r3, #2
 8004ca2:	d901      	bls.n	8004ca8 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8004ca4:	2303      	movs	r3, #3
 8004ca6:	e1f1      	b.n	800508c <HAL_RCC_OscConfig+0x624>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8004ca8:	4b1a      	ldr	r3, [pc, #104]	; (8004d14 <HAL_RCC_OscConfig+0x2ac>)
 8004caa:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004cae:	f003 0302 	and.w	r3, r3, #2
 8004cb2:	2b00      	cmp	r3, #0
 8004cb4:	d0ef      	beq.n	8004c96 <HAL_RCC_OscConfig+0x22e>
 8004cb6:	e01b      	b.n	8004cf0 <HAL_RCC_OscConfig+0x288>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004cb8:	4b16      	ldr	r3, [pc, #88]	; (8004d14 <HAL_RCC_OscConfig+0x2ac>)
 8004cba:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004cbe:	4a15      	ldr	r2, [pc, #84]	; (8004d14 <HAL_RCC_OscConfig+0x2ac>)
 8004cc0:	f023 0301 	bic.w	r3, r3, #1
 8004cc4:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004cc8:	f7fd f9d6 	bl	8002078 <HAL_GetTick>
 8004ccc:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8004cce:	e008      	b.n	8004ce2 <HAL_RCC_OscConfig+0x27a>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004cd0:	f7fd f9d2 	bl	8002078 <HAL_GetTick>
 8004cd4:	4602      	mov	r2, r0
 8004cd6:	693b      	ldr	r3, [r7, #16]
 8004cd8:	1ad3      	subs	r3, r2, r3
 8004cda:	2b02      	cmp	r3, #2
 8004cdc:	d901      	bls.n	8004ce2 <HAL_RCC_OscConfig+0x27a>
        {
          return HAL_TIMEOUT;
 8004cde:	2303      	movs	r3, #3
 8004ce0:	e1d4      	b.n	800508c <HAL_RCC_OscConfig+0x624>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8004ce2:	4b0c      	ldr	r3, [pc, #48]	; (8004d14 <HAL_RCC_OscConfig+0x2ac>)
 8004ce4:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004ce8:	f003 0302 	and.w	r3, r3, #2
 8004cec:	2b00      	cmp	r3, #0
 8004cee:	d1ef      	bne.n	8004cd0 <HAL_RCC_OscConfig+0x268>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004cf0:	687b      	ldr	r3, [r7, #4]
 8004cf2:	681b      	ldr	r3, [r3, #0]
 8004cf4:	f003 0304 	and.w	r3, r3, #4
 8004cf8:	2b00      	cmp	r3, #0
 8004cfa:	f000 80ab 	beq.w	8004e54 <HAL_RCC_OscConfig+0x3ec>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004cfe:	2300      	movs	r3, #0
 8004d00:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain if necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8004d02:	4b04      	ldr	r3, [pc, #16]	; (8004d14 <HAL_RCC_OscConfig+0x2ac>)
 8004d04:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004d06:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004d0a:	2b00      	cmp	r3, #0
 8004d0c:	d106      	bne.n	8004d1c <HAL_RCC_OscConfig+0x2b4>
 8004d0e:	2301      	movs	r3, #1
 8004d10:	e005      	b.n	8004d1e <HAL_RCC_OscConfig+0x2b6>
 8004d12:	bf00      	nop
 8004d14:	40021000 	.word	0x40021000
 8004d18:	200003c8 	.word	0x200003c8
 8004d1c:	2300      	movs	r3, #0
 8004d1e:	2b00      	cmp	r3, #0
 8004d20:	d00d      	beq.n	8004d3e <HAL_RCC_OscConfig+0x2d6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004d22:	4baf      	ldr	r3, [pc, #700]	; (8004fe0 <HAL_RCC_OscConfig+0x578>)
 8004d24:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004d26:	4aae      	ldr	r2, [pc, #696]	; (8004fe0 <HAL_RCC_OscConfig+0x578>)
 8004d28:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004d2c:	6593      	str	r3, [r2, #88]	; 0x58
 8004d2e:	4bac      	ldr	r3, [pc, #688]	; (8004fe0 <HAL_RCC_OscConfig+0x578>)
 8004d30:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004d32:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004d36:	60fb      	str	r3, [r7, #12]
 8004d38:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8004d3a:	2301      	movs	r3, #1
 8004d3c:	77fb      	strb	r3, [r7, #31]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004d3e:	4ba9      	ldr	r3, [pc, #676]	; (8004fe4 <HAL_RCC_OscConfig+0x57c>)
 8004d40:	681b      	ldr	r3, [r3, #0]
 8004d42:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004d46:	2b00      	cmp	r3, #0
 8004d48:	d118      	bne.n	8004d7c <HAL_RCC_OscConfig+0x314>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8004d4a:	4ba6      	ldr	r3, [pc, #664]	; (8004fe4 <HAL_RCC_OscConfig+0x57c>)
 8004d4c:	681b      	ldr	r3, [r3, #0]
 8004d4e:	4aa5      	ldr	r2, [pc, #660]	; (8004fe4 <HAL_RCC_OscConfig+0x57c>)
 8004d50:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004d54:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004d56:	f7fd f98f 	bl	8002078 <HAL_GetTick>
 8004d5a:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004d5c:	e008      	b.n	8004d70 <HAL_RCC_OscConfig+0x308>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004d5e:	f7fd f98b 	bl	8002078 <HAL_GetTick>
 8004d62:	4602      	mov	r2, r0
 8004d64:	693b      	ldr	r3, [r7, #16]
 8004d66:	1ad3      	subs	r3, r2, r3
 8004d68:	2b02      	cmp	r3, #2
 8004d6a:	d901      	bls.n	8004d70 <HAL_RCC_OscConfig+0x308>
        {
          return HAL_TIMEOUT;
 8004d6c:	2303      	movs	r3, #3
 8004d6e:	e18d      	b.n	800508c <HAL_RCC_OscConfig+0x624>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004d70:	4b9c      	ldr	r3, [pc, #624]	; (8004fe4 <HAL_RCC_OscConfig+0x57c>)
 8004d72:	681b      	ldr	r3, [r3, #0]
 8004d74:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004d78:	2b00      	cmp	r3, #0
 8004d7a:	d0f0      	beq.n	8004d5e <HAL_RCC_OscConfig+0x2f6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004d7c:	687b      	ldr	r3, [r7, #4]
 8004d7e:	689b      	ldr	r3, [r3, #8]
 8004d80:	2b01      	cmp	r3, #1
 8004d82:	d108      	bne.n	8004d96 <HAL_RCC_OscConfig+0x32e>
 8004d84:	4b96      	ldr	r3, [pc, #600]	; (8004fe0 <HAL_RCC_OscConfig+0x578>)
 8004d86:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004d8a:	4a95      	ldr	r2, [pc, #596]	; (8004fe0 <HAL_RCC_OscConfig+0x578>)
 8004d8c:	f043 0301 	orr.w	r3, r3, #1
 8004d90:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8004d94:	e024      	b.n	8004de0 <HAL_RCC_OscConfig+0x378>
 8004d96:	687b      	ldr	r3, [r7, #4]
 8004d98:	689b      	ldr	r3, [r3, #8]
 8004d9a:	2b05      	cmp	r3, #5
 8004d9c:	d110      	bne.n	8004dc0 <HAL_RCC_OscConfig+0x358>
 8004d9e:	4b90      	ldr	r3, [pc, #576]	; (8004fe0 <HAL_RCC_OscConfig+0x578>)
 8004da0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004da4:	4a8e      	ldr	r2, [pc, #568]	; (8004fe0 <HAL_RCC_OscConfig+0x578>)
 8004da6:	f043 0304 	orr.w	r3, r3, #4
 8004daa:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8004dae:	4b8c      	ldr	r3, [pc, #560]	; (8004fe0 <HAL_RCC_OscConfig+0x578>)
 8004db0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004db4:	4a8a      	ldr	r2, [pc, #552]	; (8004fe0 <HAL_RCC_OscConfig+0x578>)
 8004db6:	f043 0301 	orr.w	r3, r3, #1
 8004dba:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8004dbe:	e00f      	b.n	8004de0 <HAL_RCC_OscConfig+0x378>
 8004dc0:	4b87      	ldr	r3, [pc, #540]	; (8004fe0 <HAL_RCC_OscConfig+0x578>)
 8004dc2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004dc6:	4a86      	ldr	r2, [pc, #536]	; (8004fe0 <HAL_RCC_OscConfig+0x578>)
 8004dc8:	f023 0301 	bic.w	r3, r3, #1
 8004dcc:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8004dd0:	4b83      	ldr	r3, [pc, #524]	; (8004fe0 <HAL_RCC_OscConfig+0x578>)
 8004dd2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004dd6:	4a82      	ldr	r2, [pc, #520]	; (8004fe0 <HAL_RCC_OscConfig+0x578>)
 8004dd8:	f023 0304 	bic.w	r3, r3, #4
 8004ddc:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8004de0:	687b      	ldr	r3, [r7, #4]
 8004de2:	689b      	ldr	r3, [r3, #8]
 8004de4:	2b00      	cmp	r3, #0
 8004de6:	d016      	beq.n	8004e16 <HAL_RCC_OscConfig+0x3ae>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004de8:	f7fd f946 	bl	8002078 <HAL_GetTick>
 8004dec:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004dee:	e00a      	b.n	8004e06 <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004df0:	f7fd f942 	bl	8002078 <HAL_GetTick>
 8004df4:	4602      	mov	r2, r0
 8004df6:	693b      	ldr	r3, [r7, #16]
 8004df8:	1ad3      	subs	r3, r2, r3
 8004dfa:	f241 3288 	movw	r2, #5000	; 0x1388
 8004dfe:	4293      	cmp	r3, r2
 8004e00:	d901      	bls.n	8004e06 <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 8004e02:	2303      	movs	r3, #3
 8004e04:	e142      	b.n	800508c <HAL_RCC_OscConfig+0x624>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004e06:	4b76      	ldr	r3, [pc, #472]	; (8004fe0 <HAL_RCC_OscConfig+0x578>)
 8004e08:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004e0c:	f003 0302 	and.w	r3, r3, #2
 8004e10:	2b00      	cmp	r3, #0
 8004e12:	d0ed      	beq.n	8004df0 <HAL_RCC_OscConfig+0x388>
 8004e14:	e015      	b.n	8004e42 <HAL_RCC_OscConfig+0x3da>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004e16:	f7fd f92f 	bl	8002078 <HAL_GetTick>
 8004e1a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8004e1c:	e00a      	b.n	8004e34 <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004e1e:	f7fd f92b 	bl	8002078 <HAL_GetTick>
 8004e22:	4602      	mov	r2, r0
 8004e24:	693b      	ldr	r3, [r7, #16]
 8004e26:	1ad3      	subs	r3, r2, r3
 8004e28:	f241 3288 	movw	r2, #5000	; 0x1388
 8004e2c:	4293      	cmp	r3, r2
 8004e2e:	d901      	bls.n	8004e34 <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 8004e30:	2303      	movs	r3, #3
 8004e32:	e12b      	b.n	800508c <HAL_RCC_OscConfig+0x624>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8004e34:	4b6a      	ldr	r3, [pc, #424]	; (8004fe0 <HAL_RCC_OscConfig+0x578>)
 8004e36:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004e3a:	f003 0302 	and.w	r3, r3, #2
 8004e3e:	2b00      	cmp	r3, #0
 8004e40:	d1ed      	bne.n	8004e1e <HAL_RCC_OscConfig+0x3b6>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8004e42:	7ffb      	ldrb	r3, [r7, #31]
 8004e44:	2b01      	cmp	r3, #1
 8004e46:	d105      	bne.n	8004e54 <HAL_RCC_OscConfig+0x3ec>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004e48:	4b65      	ldr	r3, [pc, #404]	; (8004fe0 <HAL_RCC_OscConfig+0x578>)
 8004e4a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004e4c:	4a64      	ldr	r2, [pc, #400]	; (8004fe0 <HAL_RCC_OscConfig+0x578>)
 8004e4e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004e52:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8004e54:	687b      	ldr	r3, [r7, #4]
 8004e56:	681b      	ldr	r3, [r3, #0]
 8004e58:	f003 0320 	and.w	r3, r3, #32
 8004e5c:	2b00      	cmp	r3, #0
 8004e5e:	d03c      	beq.n	8004eda <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8004e60:	687b      	ldr	r3, [r7, #4]
 8004e62:	699b      	ldr	r3, [r3, #24]
 8004e64:	2b00      	cmp	r3, #0
 8004e66:	d01c      	beq.n	8004ea2 <HAL_RCC_OscConfig+0x43a>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8004e68:	4b5d      	ldr	r3, [pc, #372]	; (8004fe0 <HAL_RCC_OscConfig+0x578>)
 8004e6a:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8004e6e:	4a5c      	ldr	r2, [pc, #368]	; (8004fe0 <HAL_RCC_OscConfig+0x578>)
 8004e70:	f043 0301 	orr.w	r3, r3, #1
 8004e74:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004e78:	f7fd f8fe 	bl	8002078 <HAL_GetTick>
 8004e7c:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8004e7e:	e008      	b.n	8004e92 <HAL_RCC_OscConfig+0x42a>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8004e80:	f7fd f8fa 	bl	8002078 <HAL_GetTick>
 8004e84:	4602      	mov	r2, r0
 8004e86:	693b      	ldr	r3, [r7, #16]
 8004e88:	1ad3      	subs	r3, r2, r3
 8004e8a:	2b02      	cmp	r3, #2
 8004e8c:	d901      	bls.n	8004e92 <HAL_RCC_OscConfig+0x42a>
        {
          return HAL_TIMEOUT;
 8004e8e:	2303      	movs	r3, #3
 8004e90:	e0fc      	b.n	800508c <HAL_RCC_OscConfig+0x624>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8004e92:	4b53      	ldr	r3, [pc, #332]	; (8004fe0 <HAL_RCC_OscConfig+0x578>)
 8004e94:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8004e98:	f003 0302 	and.w	r3, r3, #2
 8004e9c:	2b00      	cmp	r3, #0
 8004e9e:	d0ef      	beq.n	8004e80 <HAL_RCC_OscConfig+0x418>
 8004ea0:	e01b      	b.n	8004eda <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8004ea2:	4b4f      	ldr	r3, [pc, #316]	; (8004fe0 <HAL_RCC_OscConfig+0x578>)
 8004ea4:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8004ea8:	4a4d      	ldr	r2, [pc, #308]	; (8004fe0 <HAL_RCC_OscConfig+0x578>)
 8004eaa:	f023 0301 	bic.w	r3, r3, #1
 8004eae:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004eb2:	f7fd f8e1 	bl	8002078 <HAL_GetTick>
 8004eb6:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8004eb8:	e008      	b.n	8004ecc <HAL_RCC_OscConfig+0x464>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8004eba:	f7fd f8dd 	bl	8002078 <HAL_GetTick>
 8004ebe:	4602      	mov	r2, r0
 8004ec0:	693b      	ldr	r3, [r7, #16]
 8004ec2:	1ad3      	subs	r3, r2, r3
 8004ec4:	2b02      	cmp	r3, #2
 8004ec6:	d901      	bls.n	8004ecc <HAL_RCC_OscConfig+0x464>
        {
          return HAL_TIMEOUT;
 8004ec8:	2303      	movs	r3, #3
 8004eca:	e0df      	b.n	800508c <HAL_RCC_OscConfig+0x624>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8004ecc:	4b44      	ldr	r3, [pc, #272]	; (8004fe0 <HAL_RCC_OscConfig+0x578>)
 8004ece:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8004ed2:	f003 0302 	and.w	r3, r3, #2
 8004ed6:	2b00      	cmp	r3, #0
 8004ed8:	d1ef      	bne.n	8004eba <HAL_RCC_OscConfig+0x452>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8004eda:	687b      	ldr	r3, [r7, #4]
 8004edc:	69db      	ldr	r3, [r3, #28]
 8004ede:	2b00      	cmp	r3, #0
 8004ee0:	f000 80d3 	beq.w	800508a <HAL_RCC_OscConfig+0x622>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8004ee4:	4b3e      	ldr	r3, [pc, #248]	; (8004fe0 <HAL_RCC_OscConfig+0x578>)
 8004ee6:	689b      	ldr	r3, [r3, #8]
 8004ee8:	f003 030c 	and.w	r3, r3, #12
 8004eec:	2b0c      	cmp	r3, #12
 8004eee:	f000 808d 	beq.w	800500c <HAL_RCC_OscConfig+0x5a4>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8004ef2:	687b      	ldr	r3, [r7, #4]
 8004ef4:	69db      	ldr	r3, [r3, #28]
 8004ef6:	2b02      	cmp	r3, #2
 8004ef8:	d15a      	bne.n	8004fb0 <HAL_RCC_OscConfig+0x548>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004efa:	4b39      	ldr	r3, [pc, #228]	; (8004fe0 <HAL_RCC_OscConfig+0x578>)
 8004efc:	681b      	ldr	r3, [r3, #0]
 8004efe:	4a38      	ldr	r2, [pc, #224]	; (8004fe0 <HAL_RCC_OscConfig+0x578>)
 8004f00:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8004f04:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004f06:	f7fd f8b7 	bl	8002078 <HAL_GetTick>
 8004f0a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004f0c:	e008      	b.n	8004f20 <HAL_RCC_OscConfig+0x4b8>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004f0e:	f7fd f8b3 	bl	8002078 <HAL_GetTick>
 8004f12:	4602      	mov	r2, r0
 8004f14:	693b      	ldr	r3, [r7, #16]
 8004f16:	1ad3      	subs	r3, r2, r3
 8004f18:	2b02      	cmp	r3, #2
 8004f1a:	d901      	bls.n	8004f20 <HAL_RCC_OscConfig+0x4b8>
          {
            return HAL_TIMEOUT;
 8004f1c:	2303      	movs	r3, #3
 8004f1e:	e0b5      	b.n	800508c <HAL_RCC_OscConfig+0x624>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004f20:	4b2f      	ldr	r3, [pc, #188]	; (8004fe0 <HAL_RCC_OscConfig+0x578>)
 8004f22:	681b      	ldr	r3, [r3, #0]
 8004f24:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004f28:	2b00      	cmp	r3, #0
 8004f2a:	d1f0      	bne.n	8004f0e <HAL_RCC_OscConfig+0x4a6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8004f2c:	4b2c      	ldr	r3, [pc, #176]	; (8004fe0 <HAL_RCC_OscConfig+0x578>)
 8004f2e:	68da      	ldr	r2, [r3, #12]
 8004f30:	4b2d      	ldr	r3, [pc, #180]	; (8004fe8 <HAL_RCC_OscConfig+0x580>)
 8004f32:	4013      	ands	r3, r2
 8004f34:	687a      	ldr	r2, [r7, #4]
 8004f36:	6a11      	ldr	r1, [r2, #32]
 8004f38:	687a      	ldr	r2, [r7, #4]
 8004f3a:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8004f3c:	3a01      	subs	r2, #1
 8004f3e:	0112      	lsls	r2, r2, #4
 8004f40:	4311      	orrs	r1, r2
 8004f42:	687a      	ldr	r2, [r7, #4]
 8004f44:	6a92      	ldr	r2, [r2, #40]	; 0x28
 8004f46:	0212      	lsls	r2, r2, #8
 8004f48:	4311      	orrs	r1, r2
 8004f4a:	687a      	ldr	r2, [r7, #4]
 8004f4c:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8004f4e:	0852      	lsrs	r2, r2, #1
 8004f50:	3a01      	subs	r2, #1
 8004f52:	0552      	lsls	r2, r2, #21
 8004f54:	4311      	orrs	r1, r2
 8004f56:	687a      	ldr	r2, [r7, #4]
 8004f58:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8004f5a:	0852      	lsrs	r2, r2, #1
 8004f5c:	3a01      	subs	r2, #1
 8004f5e:	0652      	lsls	r2, r2, #25
 8004f60:	4311      	orrs	r1, r2
 8004f62:	687a      	ldr	r2, [r7, #4]
 8004f64:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8004f66:	06d2      	lsls	r2, r2, #27
 8004f68:	430a      	orrs	r2, r1
 8004f6a:	491d      	ldr	r1, [pc, #116]	; (8004fe0 <HAL_RCC_OscConfig+0x578>)
 8004f6c:	4313      	orrs	r3, r2
 8004f6e:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004f70:	4b1b      	ldr	r3, [pc, #108]	; (8004fe0 <HAL_RCC_OscConfig+0x578>)
 8004f72:	681b      	ldr	r3, [r3, #0]
 8004f74:	4a1a      	ldr	r2, [pc, #104]	; (8004fe0 <HAL_RCC_OscConfig+0x578>)
 8004f76:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8004f7a:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8004f7c:	4b18      	ldr	r3, [pc, #96]	; (8004fe0 <HAL_RCC_OscConfig+0x578>)
 8004f7e:	68db      	ldr	r3, [r3, #12]
 8004f80:	4a17      	ldr	r2, [pc, #92]	; (8004fe0 <HAL_RCC_OscConfig+0x578>)
 8004f82:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8004f86:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004f88:	f7fd f876 	bl	8002078 <HAL_GetTick>
 8004f8c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004f8e:	e008      	b.n	8004fa2 <HAL_RCC_OscConfig+0x53a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004f90:	f7fd f872 	bl	8002078 <HAL_GetTick>
 8004f94:	4602      	mov	r2, r0
 8004f96:	693b      	ldr	r3, [r7, #16]
 8004f98:	1ad3      	subs	r3, r2, r3
 8004f9a:	2b02      	cmp	r3, #2
 8004f9c:	d901      	bls.n	8004fa2 <HAL_RCC_OscConfig+0x53a>
          {
            return HAL_TIMEOUT;
 8004f9e:	2303      	movs	r3, #3
 8004fa0:	e074      	b.n	800508c <HAL_RCC_OscConfig+0x624>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004fa2:	4b0f      	ldr	r3, [pc, #60]	; (8004fe0 <HAL_RCC_OscConfig+0x578>)
 8004fa4:	681b      	ldr	r3, [r3, #0]
 8004fa6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004faa:	2b00      	cmp	r3, #0
 8004fac:	d0f0      	beq.n	8004f90 <HAL_RCC_OscConfig+0x528>
 8004fae:	e06c      	b.n	800508a <HAL_RCC_OscConfig+0x622>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004fb0:	4b0b      	ldr	r3, [pc, #44]	; (8004fe0 <HAL_RCC_OscConfig+0x578>)
 8004fb2:	681b      	ldr	r3, [r3, #0]
 8004fb4:	4a0a      	ldr	r2, [pc, #40]	; (8004fe0 <HAL_RCC_OscConfig+0x578>)
 8004fb6:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8004fba:	6013      	str	r3, [r2, #0]

        /* Disable all PLL outputs to save power if no PLLs on */
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 8004fbc:	4b08      	ldr	r3, [pc, #32]	; (8004fe0 <HAL_RCC_OscConfig+0x578>)
 8004fbe:	68db      	ldr	r3, [r3, #12]
 8004fc0:	4a07      	ldr	r2, [pc, #28]	; (8004fe0 <HAL_RCC_OscConfig+0x578>)
 8004fc2:	f023 0303 	bic.w	r3, r3, #3
 8004fc6:	60d3      	str	r3, [r2, #12]
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_ADCCLK);
 8004fc8:	4b05      	ldr	r3, [pc, #20]	; (8004fe0 <HAL_RCC_OscConfig+0x578>)
 8004fca:	68db      	ldr	r3, [r3, #12]
 8004fcc:	4a04      	ldr	r2, [pc, #16]	; (8004fe0 <HAL_RCC_OscConfig+0x578>)
 8004fce:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 8004fd2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004fd6:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004fd8:	f7fd f84e 	bl	8002078 <HAL_GetTick>
 8004fdc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004fde:	e00e      	b.n	8004ffe <HAL_RCC_OscConfig+0x596>
 8004fe0:	40021000 	.word	0x40021000
 8004fe4:	40007000 	.word	0x40007000
 8004fe8:	019f800c 	.word	0x019f800c
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004fec:	f7fd f844 	bl	8002078 <HAL_GetTick>
 8004ff0:	4602      	mov	r2, r0
 8004ff2:	693b      	ldr	r3, [r7, #16]
 8004ff4:	1ad3      	subs	r3, r2, r3
 8004ff6:	2b02      	cmp	r3, #2
 8004ff8:	d901      	bls.n	8004ffe <HAL_RCC_OscConfig+0x596>
          {
            return HAL_TIMEOUT;
 8004ffa:	2303      	movs	r3, #3
 8004ffc:	e046      	b.n	800508c <HAL_RCC_OscConfig+0x624>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004ffe:	4b25      	ldr	r3, [pc, #148]	; (8005094 <HAL_RCC_OscConfig+0x62c>)
 8005000:	681b      	ldr	r3, [r3, #0]
 8005002:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005006:	2b00      	cmp	r3, #0
 8005008:	d1f0      	bne.n	8004fec <HAL_RCC_OscConfig+0x584>
 800500a:	e03e      	b.n	800508a <HAL_RCC_OscConfig+0x622>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800500c:	687b      	ldr	r3, [r7, #4]
 800500e:	69db      	ldr	r3, [r3, #28]
 8005010:	2b01      	cmp	r3, #1
 8005012:	d101      	bne.n	8005018 <HAL_RCC_OscConfig+0x5b0>
      {
        return HAL_ERROR;
 8005014:	2301      	movs	r3, #1
 8005016:	e039      	b.n	800508c <HAL_RCC_OscConfig+0x624>
      }
      else
      {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp_pllckcfg = RCC->PLLCFGR;
 8005018:	4b1e      	ldr	r3, [pc, #120]	; (8005094 <HAL_RCC_OscConfig+0x62c>)
 800501a:	68db      	ldr	r3, [r3, #12]
 800501c:	617b      	str	r3, [r7, #20]
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800501e:	697b      	ldr	r3, [r7, #20]
 8005020:	f003 0203 	and.w	r2, r3, #3
 8005024:	687b      	ldr	r3, [r7, #4]
 8005026:	6a1b      	ldr	r3, [r3, #32]
 8005028:	429a      	cmp	r2, r3
 800502a:	d12c      	bne.n	8005086 <HAL_RCC_OscConfig+0x61e>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800502c:	697b      	ldr	r3, [r7, #20]
 800502e:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8005032:	687b      	ldr	r3, [r7, #4]
 8005034:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005036:	3b01      	subs	r3, #1
 8005038:	011b      	lsls	r3, r3, #4
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800503a:	429a      	cmp	r2, r3
 800503c:	d123      	bne.n	8005086 <HAL_RCC_OscConfig+0x61e>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 800503e:	697b      	ldr	r3, [r7, #20]
 8005040:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8005044:	687b      	ldr	r3, [r7, #4]
 8005046:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005048:	021b      	lsls	r3, r3, #8
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800504a:	429a      	cmp	r2, r3
 800504c:	d11b      	bne.n	8005086 <HAL_RCC_OscConfig+0x61e>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 800504e:	697b      	ldr	r3, [r7, #20]
 8005050:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 8005054:	687b      	ldr	r3, [r7, #4]
 8005056:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005058:	06db      	lsls	r3, r3, #27
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 800505a:	429a      	cmp	r2, r3
 800505c:	d113      	bne.n	8005086 <HAL_RCC_OscConfig+0x61e>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800505e:	697b      	ldr	r3, [r7, #20]
 8005060:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8005064:	687b      	ldr	r3, [r7, #4]
 8005066:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005068:	085b      	lsrs	r3, r3, #1
 800506a:	3b01      	subs	r3, #1
 800506c:	055b      	lsls	r3, r3, #21
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 800506e:	429a      	cmp	r2, r3
 8005070:	d109      	bne.n	8005086 <HAL_RCC_OscConfig+0x61e>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8005072:	697b      	ldr	r3, [r7, #20]
 8005074:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8005078:	687b      	ldr	r3, [r7, #4]
 800507a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800507c:	085b      	lsrs	r3, r3, #1
 800507e:	3b01      	subs	r3, #1
 8005080:	065b      	lsls	r3, r3, #25
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8005082:	429a      	cmp	r2, r3
 8005084:	d001      	beq.n	800508a <HAL_RCC_OscConfig+0x622>
      {
        return HAL_ERROR;
 8005086:	2301      	movs	r3, #1
 8005088:	e000      	b.n	800508c <HAL_RCC_OscConfig+0x624>
      }
    }
  }
  }

  return HAL_OK;
 800508a:	2300      	movs	r3, #0
}
 800508c:	4618      	mov	r0, r3
 800508e:	3720      	adds	r7, #32
 8005090:	46bd      	mov	sp, r7
 8005092:	bd80      	pop	{r7, pc}
 8005094:	40021000 	.word	0x40021000

08005098 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8005098:	b580      	push	{r7, lr}
 800509a:	b086      	sub	sp, #24
 800509c:	af00      	add	r7, sp, #0
 800509e:	6078      	str	r0, [r7, #4]
 80050a0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t pllfreq;
  uint32_t hpre = RCC_SYSCLK_DIV1;
 80050a2:	2300      	movs	r3, #0
 80050a4:	617b      	str	r3, [r7, #20]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80050a6:	687b      	ldr	r3, [r7, #4]
 80050a8:	2b00      	cmp	r3, #0
 80050aa:	d101      	bne.n	80050b0 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 80050ac:	2301      	movs	r3, #1
 80050ae:	e11e      	b.n	80052ee <HAL_RCC_ClockConfig+0x256>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80050b0:	4b91      	ldr	r3, [pc, #580]	; (80052f8 <HAL_RCC_ClockConfig+0x260>)
 80050b2:	681b      	ldr	r3, [r3, #0]
 80050b4:	f003 030f 	and.w	r3, r3, #15
 80050b8:	683a      	ldr	r2, [r7, #0]
 80050ba:	429a      	cmp	r2, r3
 80050bc:	d910      	bls.n	80050e0 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80050be:	4b8e      	ldr	r3, [pc, #568]	; (80052f8 <HAL_RCC_ClockConfig+0x260>)
 80050c0:	681b      	ldr	r3, [r3, #0]
 80050c2:	f023 020f 	bic.w	r2, r3, #15
 80050c6:	498c      	ldr	r1, [pc, #560]	; (80052f8 <HAL_RCC_ClockConfig+0x260>)
 80050c8:	683b      	ldr	r3, [r7, #0]
 80050ca:	4313      	orrs	r3, r2
 80050cc:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80050ce:	4b8a      	ldr	r3, [pc, #552]	; (80052f8 <HAL_RCC_ClockConfig+0x260>)
 80050d0:	681b      	ldr	r3, [r3, #0]
 80050d2:	f003 030f 	and.w	r3, r3, #15
 80050d6:	683a      	ldr	r2, [r7, #0]
 80050d8:	429a      	cmp	r2, r3
 80050da:	d001      	beq.n	80050e0 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 80050dc:	2301      	movs	r3, #1
 80050de:	e106      	b.n	80052ee <HAL_RCC_ClockConfig+0x256>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80050e0:	687b      	ldr	r3, [r7, #4]
 80050e2:	681b      	ldr	r3, [r3, #0]
 80050e4:	f003 0301 	and.w	r3, r3, #1
 80050e8:	2b00      	cmp	r3, #0
 80050ea:	d073      	beq.n	80051d4 <HAL_RCC_ClockConfig+0x13c>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80050ec:	687b      	ldr	r3, [r7, #4]
 80050ee:	685b      	ldr	r3, [r3, #4]
 80050f0:	2b03      	cmp	r3, #3
 80050f2:	d129      	bne.n	8005148 <HAL_RCC_ClockConfig+0xb0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80050f4:	4b81      	ldr	r3, [pc, #516]	; (80052fc <HAL_RCC_ClockConfig+0x264>)
 80050f6:	681b      	ldr	r3, [r3, #0]
 80050f8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80050fc:	2b00      	cmp	r3, #0
 80050fe:	d101      	bne.n	8005104 <HAL_RCC_ClockConfig+0x6c>
      {
        return HAL_ERROR;
 8005100:	2301      	movs	r3, #1
 8005102:	e0f4      	b.n	80052ee <HAL_RCC_ClockConfig+0x256>
      }
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      pllfreq = RCC_GetSysClockFreqFromPLLSource();
 8005104:	f000 f972 	bl	80053ec <RCC_GetSysClockFreqFromPLLSource>
 8005108:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
      if(pllfreq > 80000000U)
 800510a:	693b      	ldr	r3, [r7, #16]
 800510c:	4a7c      	ldr	r2, [pc, #496]	; (8005300 <HAL_RCC_ClockConfig+0x268>)
 800510e:	4293      	cmp	r3, r2
 8005110:	d93f      	bls.n	8005192 <HAL_RCC_ClockConfig+0xfa>
      {
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8005112:	4b7a      	ldr	r3, [pc, #488]	; (80052fc <HAL_RCC_ClockConfig+0x264>)
 8005114:	689b      	ldr	r3, [r3, #8]
 8005116:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800511a:	2b00      	cmp	r3, #0
 800511c:	d009      	beq.n	8005132 <HAL_RCC_ClockConfig+0x9a>
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 800511e:	687b      	ldr	r3, [r7, #4]
 8005120:	681b      	ldr	r3, [r3, #0]
 8005122:	f003 0302 	and.w	r3, r3, #2
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8005126:	2b00      	cmp	r3, #0
 8005128:	d033      	beq.n	8005192 <HAL_RCC_ClockConfig+0xfa>
              (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))))
 800512a:	687b      	ldr	r3, [r7, #4]
 800512c:	689b      	ldr	r3, [r3, #8]
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 800512e:	2b00      	cmp	r3, #0
 8005130:	d12f      	bne.n	8005192 <HAL_RCC_ClockConfig+0xfa>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8005132:	4b72      	ldr	r3, [pc, #456]	; (80052fc <HAL_RCC_ClockConfig+0x264>)
 8005134:	689b      	ldr	r3, [r3, #8]
 8005136:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800513a:	4a70      	ldr	r2, [pc, #448]	; (80052fc <HAL_RCC_ClockConfig+0x264>)
 800513c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005140:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 8005142:	2380      	movs	r3, #128	; 0x80
 8005144:	617b      	str	r3, [r7, #20]
 8005146:	e024      	b.n	8005192 <HAL_RCC_ClockConfig+0xfa>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8005148:	687b      	ldr	r3, [r7, #4]
 800514a:	685b      	ldr	r3, [r3, #4]
 800514c:	2b02      	cmp	r3, #2
 800514e:	d107      	bne.n	8005160 <HAL_RCC_ClockConfig+0xc8>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8005150:	4b6a      	ldr	r3, [pc, #424]	; (80052fc <HAL_RCC_ClockConfig+0x264>)
 8005152:	681b      	ldr	r3, [r3, #0]
 8005154:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005158:	2b00      	cmp	r3, #0
 800515a:	d109      	bne.n	8005170 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 800515c:	2301      	movs	r3, #1
 800515e:	e0c6      	b.n	80052ee <HAL_RCC_ClockConfig+0x256>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8005160:	4b66      	ldr	r3, [pc, #408]	; (80052fc <HAL_RCC_ClockConfig+0x264>)
 8005162:	681b      	ldr	r3, [r3, #0]
 8005164:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005168:	2b00      	cmp	r3, #0
 800516a:	d101      	bne.n	8005170 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 800516c:	2301      	movs	r3, #1
 800516e:	e0be      	b.n	80052ee <HAL_RCC_ClockConfig+0x256>
        }
      }
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      pllfreq = HAL_RCC_GetSysClockFreq();
 8005170:	f000 f8ce 	bl	8005310 <HAL_RCC_GetSysClockFreq>
 8005174:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
      if(pllfreq > 80000000U)
 8005176:	693b      	ldr	r3, [r7, #16]
 8005178:	4a61      	ldr	r2, [pc, #388]	; (8005300 <HAL_RCC_ClockConfig+0x268>)
 800517a:	4293      	cmp	r3, r2
 800517c:	d909      	bls.n	8005192 <HAL_RCC_ClockConfig+0xfa>
      {
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 800517e:	4b5f      	ldr	r3, [pc, #380]	; (80052fc <HAL_RCC_ClockConfig+0x264>)
 8005180:	689b      	ldr	r3, [r3, #8]
 8005182:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8005186:	4a5d      	ldr	r2, [pc, #372]	; (80052fc <HAL_RCC_ClockConfig+0x264>)
 8005188:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800518c:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 800518e:	2380      	movs	r3, #128	; 0x80
 8005190:	617b      	str	r3, [r7, #20]
      }

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8005192:	4b5a      	ldr	r3, [pc, #360]	; (80052fc <HAL_RCC_ClockConfig+0x264>)
 8005194:	689b      	ldr	r3, [r3, #8]
 8005196:	f023 0203 	bic.w	r2, r3, #3
 800519a:	687b      	ldr	r3, [r7, #4]
 800519c:	685b      	ldr	r3, [r3, #4]
 800519e:	4957      	ldr	r1, [pc, #348]	; (80052fc <HAL_RCC_ClockConfig+0x264>)
 80051a0:	4313      	orrs	r3, r2
 80051a2:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80051a4:	f7fc ff68 	bl	8002078 <HAL_GetTick>
 80051a8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80051aa:	e00a      	b.n	80051c2 <HAL_RCC_ClockConfig+0x12a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80051ac:	f7fc ff64 	bl	8002078 <HAL_GetTick>
 80051b0:	4602      	mov	r2, r0
 80051b2:	68fb      	ldr	r3, [r7, #12]
 80051b4:	1ad3      	subs	r3, r2, r3
 80051b6:	f241 3288 	movw	r2, #5000	; 0x1388
 80051ba:	4293      	cmp	r3, r2
 80051bc:	d901      	bls.n	80051c2 <HAL_RCC_ClockConfig+0x12a>
      {
        return HAL_TIMEOUT;
 80051be:	2303      	movs	r3, #3
 80051c0:	e095      	b.n	80052ee <HAL_RCC_ClockConfig+0x256>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80051c2:	4b4e      	ldr	r3, [pc, #312]	; (80052fc <HAL_RCC_ClockConfig+0x264>)
 80051c4:	689b      	ldr	r3, [r3, #8]
 80051c6:	f003 020c 	and.w	r2, r3, #12
 80051ca:	687b      	ldr	r3, [r7, #4]
 80051cc:	685b      	ldr	r3, [r3, #4]
 80051ce:	009b      	lsls	r3, r3, #2
 80051d0:	429a      	cmp	r2, r3
 80051d2:	d1eb      	bne.n	80051ac <HAL_RCC_ClockConfig+0x114>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80051d4:	687b      	ldr	r3, [r7, #4]
 80051d6:	681b      	ldr	r3, [r3, #0]
 80051d8:	f003 0302 	and.w	r3, r3, #2
 80051dc:	2b00      	cmp	r3, #0
 80051de:	d023      	beq.n	8005228 <HAL_RCC_ClockConfig+0x190>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80051e0:	687b      	ldr	r3, [r7, #4]
 80051e2:	681b      	ldr	r3, [r3, #0]
 80051e4:	f003 0304 	and.w	r3, r3, #4
 80051e8:	2b00      	cmp	r3, #0
 80051ea:	d005      	beq.n	80051f8 <HAL_RCC_ClockConfig+0x160>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80051ec:	4b43      	ldr	r3, [pc, #268]	; (80052fc <HAL_RCC_ClockConfig+0x264>)
 80051ee:	689b      	ldr	r3, [r3, #8]
 80051f0:	4a42      	ldr	r2, [pc, #264]	; (80052fc <HAL_RCC_ClockConfig+0x264>)
 80051f2:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 80051f6:	6093      	str	r3, [r2, #8]
    }
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80051f8:	687b      	ldr	r3, [r7, #4]
 80051fa:	681b      	ldr	r3, [r3, #0]
 80051fc:	f003 0308 	and.w	r3, r3, #8
 8005200:	2b00      	cmp	r3, #0
 8005202:	d007      	beq.n	8005214 <HAL_RCC_ClockConfig+0x17c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, RCC_HCLK_DIV16);
 8005204:	4b3d      	ldr	r3, [pc, #244]	; (80052fc <HAL_RCC_ClockConfig+0x264>)
 8005206:	689b      	ldr	r3, [r3, #8]
 8005208:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 800520c:	4a3b      	ldr	r2, [pc, #236]	; (80052fc <HAL_RCC_ClockConfig+0x264>)
 800520e:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8005212:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005214:	4b39      	ldr	r3, [pc, #228]	; (80052fc <HAL_RCC_ClockConfig+0x264>)
 8005216:	689b      	ldr	r3, [r3, #8]
 8005218:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800521c:	687b      	ldr	r3, [r7, #4]
 800521e:	689b      	ldr	r3, [r3, #8]
 8005220:	4936      	ldr	r1, [pc, #216]	; (80052fc <HAL_RCC_ClockConfig+0x264>)
 8005222:	4313      	orrs	r3, r2
 8005224:	608b      	str	r3, [r1, #8]
 8005226:	e008      	b.n	800523a <HAL_RCC_ClockConfig+0x1a2>
  }
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if(hpre == RCC_SYSCLK_DIV2)
 8005228:	697b      	ldr	r3, [r7, #20]
 800522a:	2b80      	cmp	r3, #128	; 0x80
 800522c:	d105      	bne.n	800523a <HAL_RCC_ClockConfig+0x1a2>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 800522e:	4b33      	ldr	r3, [pc, #204]	; (80052fc <HAL_RCC_ClockConfig+0x264>)
 8005230:	689b      	ldr	r3, [r3, #8]
 8005232:	4a32      	ldr	r2, [pc, #200]	; (80052fc <HAL_RCC_ClockConfig+0x264>)
 8005234:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8005238:	6093      	str	r3, [r2, #8]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800523a:	4b2f      	ldr	r3, [pc, #188]	; (80052f8 <HAL_RCC_ClockConfig+0x260>)
 800523c:	681b      	ldr	r3, [r3, #0]
 800523e:	f003 030f 	and.w	r3, r3, #15
 8005242:	683a      	ldr	r2, [r7, #0]
 8005244:	429a      	cmp	r2, r3
 8005246:	d21d      	bcs.n	8005284 <HAL_RCC_ClockConfig+0x1ec>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005248:	4b2b      	ldr	r3, [pc, #172]	; (80052f8 <HAL_RCC_ClockConfig+0x260>)
 800524a:	681b      	ldr	r3, [r3, #0]
 800524c:	f023 020f 	bic.w	r2, r3, #15
 8005250:	4929      	ldr	r1, [pc, #164]	; (80052f8 <HAL_RCC_ClockConfig+0x260>)
 8005252:	683b      	ldr	r3, [r7, #0]
 8005254:	4313      	orrs	r3, r2
 8005256:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8005258:	f7fc ff0e 	bl	8002078 <HAL_GetTick>
 800525c:	60f8      	str	r0, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 800525e:	e00a      	b.n	8005276 <HAL_RCC_ClockConfig+0x1de>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005260:	f7fc ff0a 	bl	8002078 <HAL_GetTick>
 8005264:	4602      	mov	r2, r0
 8005266:	68fb      	ldr	r3, [r7, #12]
 8005268:	1ad3      	subs	r3, r2, r3
 800526a:	f241 3288 	movw	r2, #5000	; 0x1388
 800526e:	4293      	cmp	r3, r2
 8005270:	d901      	bls.n	8005276 <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_TIMEOUT;
 8005272:	2303      	movs	r3, #3
 8005274:	e03b      	b.n	80052ee <HAL_RCC_ClockConfig+0x256>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8005276:	4b20      	ldr	r3, [pc, #128]	; (80052f8 <HAL_RCC_ClockConfig+0x260>)
 8005278:	681b      	ldr	r3, [r3, #0]
 800527a:	f003 030f 	and.w	r3, r3, #15
 800527e:	683a      	ldr	r2, [r7, #0]
 8005280:	429a      	cmp	r2, r3
 8005282:	d1ed      	bne.n	8005260 <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005284:	687b      	ldr	r3, [r7, #4]
 8005286:	681b      	ldr	r3, [r3, #0]
 8005288:	f003 0304 	and.w	r3, r3, #4
 800528c:	2b00      	cmp	r3, #0
 800528e:	d008      	beq.n	80052a2 <HAL_RCC_ClockConfig+0x20a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8005290:	4b1a      	ldr	r3, [pc, #104]	; (80052fc <HAL_RCC_ClockConfig+0x264>)
 8005292:	689b      	ldr	r3, [r3, #8]
 8005294:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8005298:	687b      	ldr	r3, [r7, #4]
 800529a:	68db      	ldr	r3, [r3, #12]
 800529c:	4917      	ldr	r1, [pc, #92]	; (80052fc <HAL_RCC_ClockConfig+0x264>)
 800529e:	4313      	orrs	r3, r2
 80052a0:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80052a2:	687b      	ldr	r3, [r7, #4]
 80052a4:	681b      	ldr	r3, [r3, #0]
 80052a6:	f003 0308 	and.w	r3, r3, #8
 80052aa:	2b00      	cmp	r3, #0
 80052ac:	d009      	beq.n	80052c2 <HAL_RCC_ClockConfig+0x22a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80052ae:	4b13      	ldr	r3, [pc, #76]	; (80052fc <HAL_RCC_ClockConfig+0x264>)
 80052b0:	689b      	ldr	r3, [r3, #8]
 80052b2:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80052b6:	687b      	ldr	r3, [r7, #4]
 80052b8:	691b      	ldr	r3, [r3, #16]
 80052ba:	00db      	lsls	r3, r3, #3
 80052bc:	490f      	ldr	r1, [pc, #60]	; (80052fc <HAL_RCC_ClockConfig+0x264>)
 80052be:	4313      	orrs	r3, r2
 80052c0:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80052c2:	f000 f825 	bl	8005310 <HAL_RCC_GetSysClockFreq>
 80052c6:	4601      	mov	r1, r0
 80052c8:	4b0c      	ldr	r3, [pc, #48]	; (80052fc <HAL_RCC_ClockConfig+0x264>)
 80052ca:	689b      	ldr	r3, [r3, #8]
 80052cc:	091b      	lsrs	r3, r3, #4
 80052ce:	f003 030f 	and.w	r3, r3, #15
 80052d2:	4a0c      	ldr	r2, [pc, #48]	; (8005304 <HAL_RCC_ClockConfig+0x26c>)
 80052d4:	5cd3      	ldrb	r3, [r2, r3]
 80052d6:	f003 031f 	and.w	r3, r3, #31
 80052da:	fa21 f303 	lsr.w	r3, r1, r3
 80052de:	4a0a      	ldr	r2, [pc, #40]	; (8005308 <HAL_RCC_ClockConfig+0x270>)
 80052e0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 80052e2:	4b0a      	ldr	r3, [pc, #40]	; (800530c <HAL_RCC_ClockConfig+0x274>)
 80052e4:	681b      	ldr	r3, [r3, #0]
 80052e6:	4618      	mov	r0, r3
 80052e8:	f7fc fe7a 	bl	8001fe0 <HAL_InitTick>
 80052ec:	4603      	mov	r3, r0
}
 80052ee:	4618      	mov	r0, r3
 80052f0:	3718      	adds	r7, #24
 80052f2:	46bd      	mov	sp, r7
 80052f4:	bd80      	pop	{r7, pc}
 80052f6:	bf00      	nop
 80052f8:	40022000 	.word	0x40022000
 80052fc:	40021000 	.word	0x40021000
 8005300:	04c4b400 	.word	0x04c4b400
 8005304:	0800981c 	.word	0x0800981c
 8005308:	200003c4 	.word	0x200003c4
 800530c:	200003c8 	.word	0x200003c8

08005310 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8005310:	b480      	push	{r7}
 8005312:	b087      	sub	sp, #28
 8005314:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 8005316:	4b2c      	ldr	r3, [pc, #176]	; (80053c8 <HAL_RCC_GetSysClockFreq+0xb8>)
 8005318:	689b      	ldr	r3, [r3, #8]
 800531a:	f003 030c 	and.w	r3, r3, #12
 800531e:	2b04      	cmp	r3, #4
 8005320:	d102      	bne.n	8005328 <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8005322:	4b2a      	ldr	r3, [pc, #168]	; (80053cc <HAL_RCC_GetSysClockFreq+0xbc>)
 8005324:	613b      	str	r3, [r7, #16]
 8005326:	e047      	b.n	80053b8 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 8005328:	4b27      	ldr	r3, [pc, #156]	; (80053c8 <HAL_RCC_GetSysClockFreq+0xb8>)
 800532a:	689b      	ldr	r3, [r3, #8]
 800532c:	f003 030c 	and.w	r3, r3, #12
 8005330:	2b08      	cmp	r3, #8
 8005332:	d102      	bne.n	800533a <HAL_RCC_GetSysClockFreq+0x2a>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8005334:	4b26      	ldr	r3, [pc, #152]	; (80053d0 <HAL_RCC_GetSysClockFreq+0xc0>)
 8005336:	613b      	str	r3, [r7, #16]
 8005338:	e03e      	b.n	80053b8 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 800533a:	4b23      	ldr	r3, [pc, #140]	; (80053c8 <HAL_RCC_GetSysClockFreq+0xb8>)
 800533c:	689b      	ldr	r3, [r3, #8]
 800533e:	f003 030c 	and.w	r3, r3, #12
 8005342:	2b0c      	cmp	r3, #12
 8005344:	d136      	bne.n	80053b4 <HAL_RCC_GetSysClockFreq+0xa4>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8005346:	4b20      	ldr	r3, [pc, #128]	; (80053c8 <HAL_RCC_GetSysClockFreq+0xb8>)
 8005348:	68db      	ldr	r3, [r3, #12]
 800534a:	f003 0303 	and.w	r3, r3, #3
 800534e:	60fb      	str	r3, [r7, #12]
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8005350:	4b1d      	ldr	r3, [pc, #116]	; (80053c8 <HAL_RCC_GetSysClockFreq+0xb8>)
 8005352:	68db      	ldr	r3, [r3, #12]
 8005354:	091b      	lsrs	r3, r3, #4
 8005356:	f003 030f 	and.w	r3, r3, #15
 800535a:	3301      	adds	r3, #1
 800535c:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 800535e:	68fb      	ldr	r3, [r7, #12]
 8005360:	2b03      	cmp	r3, #3
 8005362:	d10c      	bne.n	800537e <HAL_RCC_GetSysClockFreq+0x6e>
    {
    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8005364:	4a1a      	ldr	r2, [pc, #104]	; (80053d0 <HAL_RCC_GetSysClockFreq+0xc0>)
 8005366:	68bb      	ldr	r3, [r7, #8]
 8005368:	fbb2 f3f3 	udiv	r3, r2, r3
 800536c:	4a16      	ldr	r2, [pc, #88]	; (80053c8 <HAL_RCC_GetSysClockFreq+0xb8>)
 800536e:	68d2      	ldr	r2, [r2, #12]
 8005370:	0a12      	lsrs	r2, r2, #8
 8005372:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8005376:	fb02 f303 	mul.w	r3, r2, r3
 800537a:	617b      	str	r3, [r7, #20]
      break;
 800537c:	e00c      	b.n	8005398 <HAL_RCC_GetSysClockFreq+0x88>

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    default:
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 800537e:	4a13      	ldr	r2, [pc, #76]	; (80053cc <HAL_RCC_GetSysClockFreq+0xbc>)
 8005380:	68bb      	ldr	r3, [r7, #8]
 8005382:	fbb2 f3f3 	udiv	r3, r2, r3
 8005386:	4a10      	ldr	r2, [pc, #64]	; (80053c8 <HAL_RCC_GetSysClockFreq+0xb8>)
 8005388:	68d2      	ldr	r2, [r2, #12]
 800538a:	0a12      	lsrs	r2, r2, #8
 800538c:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8005390:	fb02 f303 	mul.w	r3, r2, r3
 8005394:	617b      	str	r3, [r7, #20]
      break;
 8005396:	bf00      	nop
    }
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8005398:	4b0b      	ldr	r3, [pc, #44]	; (80053c8 <HAL_RCC_GetSysClockFreq+0xb8>)
 800539a:	68db      	ldr	r3, [r3, #12]
 800539c:	0e5b      	lsrs	r3, r3, #25
 800539e:	f003 0303 	and.w	r3, r3, #3
 80053a2:	3301      	adds	r3, #1
 80053a4:	005b      	lsls	r3, r3, #1
 80053a6:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco/pllr;
 80053a8:	697a      	ldr	r2, [r7, #20]
 80053aa:	687b      	ldr	r3, [r7, #4]
 80053ac:	fbb2 f3f3 	udiv	r3, r2, r3
 80053b0:	613b      	str	r3, [r7, #16]
 80053b2:	e001      	b.n	80053b8 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else
  {
    sysclockfreq = 0U;
 80053b4:	2300      	movs	r3, #0
 80053b6:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 80053b8:	693b      	ldr	r3, [r7, #16]
}
 80053ba:	4618      	mov	r0, r3
 80053bc:	371c      	adds	r7, #28
 80053be:	46bd      	mov	sp, r7
 80053c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053c4:	4770      	bx	lr
 80053c6:	bf00      	nop
 80053c8:	40021000 	.word	0x40021000
 80053cc:	00f42400 	.word	0x00f42400
 80053d0:	007a1200 	.word	0x007a1200

080053d4 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80053d4:	b480      	push	{r7}
 80053d6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80053d8:	4b03      	ldr	r3, [pc, #12]	; (80053e8 <HAL_RCC_GetHCLKFreq+0x14>)
 80053da:	681b      	ldr	r3, [r3, #0]
}
 80053dc:	4618      	mov	r0, r3
 80053de:	46bd      	mov	sp, r7
 80053e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053e4:	4770      	bx	lr
 80053e6:	bf00      	nop
 80053e8:	200003c4 	.word	0x200003c4

080053ec <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 80053ec:	b480      	push	{r7}
 80053ee:	b087      	sub	sp, #28
 80053f0:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 80053f2:	4b1e      	ldr	r3, [pc, #120]	; (800546c <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80053f4:	68db      	ldr	r3, [r3, #12]
 80053f6:	f003 0303 	and.w	r3, r3, #3
 80053fa:	613b      	str	r3, [r7, #16]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80053fc:	4b1b      	ldr	r3, [pc, #108]	; (800546c <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80053fe:	68db      	ldr	r3, [r3, #12]
 8005400:	091b      	lsrs	r3, r3, #4
 8005402:	f003 030f 	and.w	r3, r3, #15
 8005406:	3301      	adds	r3, #1
 8005408:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 800540a:	693b      	ldr	r3, [r7, #16]
 800540c:	2b03      	cmp	r3, #3
 800540e:	d10c      	bne.n	800542a <RCC_GetSysClockFreqFromPLLSource+0x3e>
  {
  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8005410:	4a17      	ldr	r2, [pc, #92]	; (8005470 <RCC_GetSysClockFreqFromPLLSource+0x84>)
 8005412:	68fb      	ldr	r3, [r7, #12]
 8005414:	fbb2 f3f3 	udiv	r3, r2, r3
 8005418:	4a14      	ldr	r2, [pc, #80]	; (800546c <RCC_GetSysClockFreqFromPLLSource+0x80>)
 800541a:	68d2      	ldr	r2, [r2, #12]
 800541c:	0a12      	lsrs	r2, r2, #8
 800541e:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8005422:	fb02 f303 	mul.w	r3, r2, r3
 8005426:	617b      	str	r3, [r7, #20]
    break;
 8005428:	e00c      	b.n	8005444 <RCC_GetSysClockFreqFromPLLSource+0x58>

  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
  default:
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 800542a:	4a12      	ldr	r2, [pc, #72]	; (8005474 <RCC_GetSysClockFreqFromPLLSource+0x88>)
 800542c:	68fb      	ldr	r3, [r7, #12]
 800542e:	fbb2 f3f3 	udiv	r3, r2, r3
 8005432:	4a0e      	ldr	r2, [pc, #56]	; (800546c <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8005434:	68d2      	ldr	r2, [r2, #12]
 8005436:	0a12      	lsrs	r2, r2, #8
 8005438:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 800543c:	fb02 f303 	mul.w	r3, r2, r3
 8005440:	617b      	str	r3, [r7, #20]
    break;
 8005442:	bf00      	nop
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8005444:	4b09      	ldr	r3, [pc, #36]	; (800546c <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8005446:	68db      	ldr	r3, [r3, #12]
 8005448:	0e5b      	lsrs	r3, r3, #25
 800544a:	f003 0303 	and.w	r3, r3, #3
 800544e:	3301      	adds	r3, #1
 8005450:	005b      	lsls	r3, r3, #1
 8005452:	60bb      	str	r3, [r7, #8]
  sysclockfreq = pllvco/pllr;
 8005454:	697a      	ldr	r2, [r7, #20]
 8005456:	68bb      	ldr	r3, [r7, #8]
 8005458:	fbb2 f3f3 	udiv	r3, r2, r3
 800545c:	607b      	str	r3, [r7, #4]

  return sysclockfreq;
 800545e:	687b      	ldr	r3, [r7, #4]
}
 8005460:	4618      	mov	r0, r3
 8005462:	371c      	adds	r7, #28
 8005464:	46bd      	mov	sp, r7
 8005466:	f85d 7b04 	ldr.w	r7, [sp], #4
 800546a:	4770      	bx	lr
 800546c:	40021000 	.word	0x40021000
 8005470:	007a1200 	.word	0x007a1200
 8005474:	00f42400 	.word	0x00f42400

08005478 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8005478:	b580      	push	{r7, lr}
 800547a:	b086      	sub	sp, #24
 800547c:	af00      	add	r7, sp, #0
 800547e:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8005480:	2300      	movs	r3, #0
 8005482:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8005484:	2300      	movs	r3, #0
 8005486:	74bb      	strb	r3, [r7, #18]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8005488:	687b      	ldr	r3, [r7, #4]
 800548a:	681b      	ldr	r3, [r3, #0]
 800548c:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8005490:	2b00      	cmp	r3, #0
 8005492:	f000 8098 	beq.w	80055c6 <HAL_RCCEx_PeriphCLKConfig+0x14e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8005496:	2300      	movs	r3, #0
 8005498:	747b      	strb	r3, [r7, #17]
    
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800549a:	4b43      	ldr	r3, [pc, #268]	; (80055a8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800549c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800549e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80054a2:	2b00      	cmp	r3, #0
 80054a4:	d10d      	bne.n	80054c2 <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80054a6:	4b40      	ldr	r3, [pc, #256]	; (80055a8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80054a8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80054aa:	4a3f      	ldr	r2, [pc, #252]	; (80055a8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80054ac:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80054b0:	6593      	str	r3, [r2, #88]	; 0x58
 80054b2:	4b3d      	ldr	r3, [pc, #244]	; (80055a8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80054b4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80054b6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80054ba:	60bb      	str	r3, [r7, #8]
 80054bc:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80054be:	2301      	movs	r3, #1
 80054c0:	747b      	strb	r3, [r7, #17]
    }
      
    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80054c2:	4b3a      	ldr	r3, [pc, #232]	; (80055ac <HAL_RCCEx_PeriphCLKConfig+0x134>)
 80054c4:	681b      	ldr	r3, [r3, #0]
 80054c6:	4a39      	ldr	r2, [pc, #228]	; (80055ac <HAL_RCCEx_PeriphCLKConfig+0x134>)
 80054c8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80054cc:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80054ce:	f7fc fdd3 	bl	8002078 <HAL_GetTick>
 80054d2:	60f8      	str	r0, [r7, #12]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80054d4:	e009      	b.n	80054ea <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80054d6:	f7fc fdcf 	bl	8002078 <HAL_GetTick>
 80054da:	4602      	mov	r2, r0
 80054dc:	68fb      	ldr	r3, [r7, #12]
 80054de:	1ad3      	subs	r3, r2, r3
 80054e0:	2b02      	cmp	r3, #2
 80054e2:	d902      	bls.n	80054ea <HAL_RCCEx_PeriphCLKConfig+0x72>
      {
        ret = HAL_TIMEOUT;
 80054e4:	2303      	movs	r3, #3
 80054e6:	74fb      	strb	r3, [r7, #19]
        break;
 80054e8:	e005      	b.n	80054f6 <HAL_RCCEx_PeriphCLKConfig+0x7e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80054ea:	4b30      	ldr	r3, [pc, #192]	; (80055ac <HAL_RCCEx_PeriphCLKConfig+0x134>)
 80054ec:	681b      	ldr	r3, [r3, #0]
 80054ee:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80054f2:	2b00      	cmp	r3, #0
 80054f4:	d0ef      	beq.n	80054d6 <HAL_RCCEx_PeriphCLKConfig+0x5e>
      }
    }

    if(ret == HAL_OK)
 80054f6:	7cfb      	ldrb	r3, [r7, #19]
 80054f8:	2b00      	cmp	r3, #0
 80054fa:	d159      	bne.n	80055b0 <HAL_RCCEx_PeriphCLKConfig+0x138>
    { 
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 80054fc:	4b2a      	ldr	r3, [pc, #168]	; (80055a8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80054fe:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005502:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005506:	617b      	str	r3, [r7, #20]
      
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8005508:	697b      	ldr	r3, [r7, #20]
 800550a:	2b00      	cmp	r3, #0
 800550c:	d01e      	beq.n	800554c <HAL_RCCEx_PeriphCLKConfig+0xd4>
 800550e:	687b      	ldr	r3, [r7, #4]
 8005510:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005512:	697a      	ldr	r2, [r7, #20]
 8005514:	429a      	cmp	r2, r3
 8005516:	d019      	beq.n	800554c <HAL_RCCEx_PeriphCLKConfig+0xd4>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8005518:	4b23      	ldr	r3, [pc, #140]	; (80055a8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800551a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800551e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005522:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8005524:	4b20      	ldr	r3, [pc, #128]	; (80055a8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005526:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800552a:	4a1f      	ldr	r2, [pc, #124]	; (80055a8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800552c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005530:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8005534:	4b1c      	ldr	r3, [pc, #112]	; (80055a8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005536:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800553a:	4a1b      	ldr	r2, [pc, #108]	; (80055a8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800553c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005540:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8005544:	4a18      	ldr	r2, [pc, #96]	; (80055a8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005546:	697b      	ldr	r3, [r7, #20]
 8005548:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 800554c:	697b      	ldr	r3, [r7, #20]
 800554e:	f003 0301 	and.w	r3, r3, #1
 8005552:	2b00      	cmp	r3, #0
 8005554:	d016      	beq.n	8005584 <HAL_RCCEx_PeriphCLKConfig+0x10c>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005556:	f7fc fd8f 	bl	8002078 <HAL_GetTick>
 800555a:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800555c:	e00b      	b.n	8005576 <HAL_RCCEx_PeriphCLKConfig+0xfe>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800555e:	f7fc fd8b 	bl	8002078 <HAL_GetTick>
 8005562:	4602      	mov	r2, r0
 8005564:	68fb      	ldr	r3, [r7, #12]
 8005566:	1ad3      	subs	r3, r2, r3
 8005568:	f241 3288 	movw	r2, #5000	; 0x1388
 800556c:	4293      	cmp	r3, r2
 800556e:	d902      	bls.n	8005576 <HAL_RCCEx_PeriphCLKConfig+0xfe>
          {
            ret = HAL_TIMEOUT;
 8005570:	2303      	movs	r3, #3
 8005572:	74fb      	strb	r3, [r7, #19]
            break;
 8005574:	e006      	b.n	8005584 <HAL_RCCEx_PeriphCLKConfig+0x10c>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8005576:	4b0c      	ldr	r3, [pc, #48]	; (80055a8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005578:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800557c:	f003 0302 	and.w	r3, r3, #2
 8005580:	2b00      	cmp	r3, #0
 8005582:	d0ec      	beq.n	800555e <HAL_RCCEx_PeriphCLKConfig+0xe6>
          }
        }
      }
      
      if(ret == HAL_OK)
 8005584:	7cfb      	ldrb	r3, [r7, #19]
 8005586:	2b00      	cmp	r3, #0
 8005588:	d10b      	bne.n	80055a2 <HAL_RCCEx_PeriphCLKConfig+0x12a>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800558a:	4b07      	ldr	r3, [pc, #28]	; (80055a8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800558c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005590:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8005594:	687b      	ldr	r3, [r7, #4]
 8005596:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005598:	4903      	ldr	r1, [pc, #12]	; (80055a8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800559a:	4313      	orrs	r3, r2
 800559c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 80055a0:	e008      	b.n	80055b4 <HAL_RCCEx_PeriphCLKConfig+0x13c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 80055a2:	7cfb      	ldrb	r3, [r7, #19]
 80055a4:	74bb      	strb	r3, [r7, #18]
 80055a6:	e005      	b.n	80055b4 <HAL_RCCEx_PeriphCLKConfig+0x13c>
 80055a8:	40021000 	.word	0x40021000
 80055ac:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 80055b0:	7cfb      	ldrb	r3, [r7, #19]
 80055b2:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80055b4:	7c7b      	ldrb	r3, [r7, #17]
 80055b6:	2b01      	cmp	r3, #1
 80055b8:	d105      	bne.n	80055c6 <HAL_RCCEx_PeriphCLKConfig+0x14e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80055ba:	4baf      	ldr	r3, [pc, #700]	; (8005878 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 80055bc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80055be:	4aae      	ldr	r2, [pc, #696]	; (8005878 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 80055c0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80055c4:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80055c6:	687b      	ldr	r3, [r7, #4]
 80055c8:	681b      	ldr	r3, [r3, #0]
 80055ca:	f003 0301 	and.w	r3, r3, #1
 80055ce:	2b00      	cmp	r3, #0
 80055d0:	d00a      	beq.n	80055e8 <HAL_RCCEx_PeriphCLKConfig+0x170>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80055d2:	4ba9      	ldr	r3, [pc, #676]	; (8005878 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 80055d4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80055d8:	f023 0203 	bic.w	r2, r3, #3
 80055dc:	687b      	ldr	r3, [r7, #4]
 80055de:	685b      	ldr	r3, [r3, #4]
 80055e0:	49a5      	ldr	r1, [pc, #660]	; (8005878 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 80055e2:	4313      	orrs	r3, r2
 80055e4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80055e8:	687b      	ldr	r3, [r7, #4]
 80055ea:	681b      	ldr	r3, [r3, #0]
 80055ec:	f003 0302 	and.w	r3, r3, #2
 80055f0:	2b00      	cmp	r3, #0
 80055f2:	d00a      	beq.n	800560a <HAL_RCCEx_PeriphCLKConfig+0x192>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80055f4:	4ba0      	ldr	r3, [pc, #640]	; (8005878 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 80055f6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80055fa:	f023 020c 	bic.w	r2, r3, #12
 80055fe:	687b      	ldr	r3, [r7, #4]
 8005600:	689b      	ldr	r3, [r3, #8]
 8005602:	499d      	ldr	r1, [pc, #628]	; (8005878 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8005604:	4313      	orrs	r3, r2
 8005606:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 800560a:	687b      	ldr	r3, [r7, #4]
 800560c:	681b      	ldr	r3, [r3, #0]
 800560e:	f003 0304 	and.w	r3, r3, #4
 8005612:	2b00      	cmp	r3, #0
 8005614:	d00a      	beq.n	800562c <HAL_RCCEx_PeriphCLKConfig+0x1b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8005616:	4b98      	ldr	r3, [pc, #608]	; (8005878 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8005618:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800561c:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8005620:	687b      	ldr	r3, [r7, #4]
 8005622:	68db      	ldr	r3, [r3, #12]
 8005624:	4994      	ldr	r1, [pc, #592]	; (8005878 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8005626:	4313      	orrs	r3, r2
 8005628:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(UART4)
  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 800562c:	687b      	ldr	r3, [r7, #4]
 800562e:	681b      	ldr	r3, [r3, #0]
 8005630:	f003 0308 	and.w	r3, r3, #8
 8005634:	2b00      	cmp	r3, #0
 8005636:	d00a      	beq.n	800564e <HAL_RCCEx_PeriphCLKConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8005638:	4b8f      	ldr	r3, [pc, #572]	; (8005878 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 800563a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800563e:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8005642:	687b      	ldr	r3, [r7, #4]
 8005644:	691b      	ldr	r3, [r3, #16]
 8005646:	498c      	ldr	r1, [pc, #560]	; (8005878 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8005648:	4313      	orrs	r3, r2
 800564a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 800564e:	687b      	ldr	r3, [r7, #4]
 8005650:	681b      	ldr	r3, [r3, #0]
 8005652:	f003 0310 	and.w	r3, r3, #16
 8005656:	2b00      	cmp	r3, #0
 8005658:	d00a      	beq.n	8005670 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 800565a:	4b87      	ldr	r3, [pc, #540]	; (8005878 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 800565c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005660:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8005664:	687b      	ldr	r3, [r7, #4]
 8005666:	695b      	ldr	r3, [r3, #20]
 8005668:	4983      	ldr	r1, [pc, #524]	; (8005878 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 800566a:	4313      	orrs	r3, r2
 800566c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8005670:	687b      	ldr	r3, [r7, #4]
 8005672:	681b      	ldr	r3, [r3, #0]
 8005674:	f003 0320 	and.w	r3, r3, #32
 8005678:	2b00      	cmp	r3, #0
 800567a:	d00a      	beq.n	8005692 <HAL_RCCEx_PeriphCLKConfig+0x21a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800567c:	4b7e      	ldr	r3, [pc, #504]	; (8005878 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 800567e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005682:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8005686:	687b      	ldr	r3, [r7, #4]
 8005688:	699b      	ldr	r3, [r3, #24]
 800568a:	497b      	ldr	r1, [pc, #492]	; (8005878 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 800568c:	4313      	orrs	r3, r2
 800568e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8005692:	687b      	ldr	r3, [r7, #4]
 8005694:	681b      	ldr	r3, [r3, #0]
 8005696:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800569a:	2b00      	cmp	r3, #0
 800569c:	d00a      	beq.n	80056b4 <HAL_RCCEx_PeriphCLKConfig+0x23c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800569e:	4b76      	ldr	r3, [pc, #472]	; (8005878 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 80056a0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80056a4:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 80056a8:	687b      	ldr	r3, [r7, #4]
 80056aa:	69db      	ldr	r3, [r3, #28]
 80056ac:	4972      	ldr	r1, [pc, #456]	; (8005878 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 80056ae:	4313      	orrs	r3, r2
 80056b0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80056b4:	687b      	ldr	r3, [r7, #4]
 80056b6:	681b      	ldr	r3, [r3, #0]
 80056b8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80056bc:	2b00      	cmp	r3, #0
 80056be:	d00a      	beq.n	80056d6 <HAL_RCCEx_PeriphCLKConfig+0x25e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 80056c0:	4b6d      	ldr	r3, [pc, #436]	; (8005878 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 80056c2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80056c6:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 80056ca:	687b      	ldr	r3, [r7, #4]
 80056cc:	6a1b      	ldr	r3, [r3, #32]
 80056ce:	496a      	ldr	r1, [pc, #424]	; (8005878 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 80056d0:	4313      	orrs	r3, r2
 80056d2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80056d6:	687b      	ldr	r3, [r7, #4]
 80056d8:	681b      	ldr	r3, [r3, #0]
 80056da:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80056de:	2b00      	cmp	r3, #0
 80056e0:	d00a      	beq.n	80056f8 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80056e2:	4b65      	ldr	r3, [pc, #404]	; (8005878 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 80056e4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80056e8:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80056ec:	687b      	ldr	r3, [r7, #4]
 80056ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80056f0:	4961      	ldr	r1, [pc, #388]	; (8005878 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 80056f2:	4313      	orrs	r3, r2
 80056f4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C4)  

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 80056f8:	687b      	ldr	r3, [r7, #4]
 80056fa:	681b      	ldr	r3, [r3, #0]
 80056fc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005700:	2b00      	cmp	r3, #0
 8005702:	d00a      	beq.n	800571a <HAL_RCCEx_PeriphCLKConfig+0x2a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8005704:	4b5c      	ldr	r3, [pc, #368]	; (8005878 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8005706:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800570a:	f023 0203 	bic.w	r2, r3, #3
 800570e:	687b      	ldr	r3, [r7, #4]
 8005710:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005712:	4959      	ldr	r1, [pc, #356]	; (8005878 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8005714:	4313      	orrs	r3, r2
 8005716:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
  }

#endif /* I2C4 */

  /*-------------------------- LPTIM1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 800571a:	687b      	ldr	r3, [r7, #4]
 800571c:	681b      	ldr	r3, [r3, #0]
 800571e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8005722:	2b00      	cmp	r3, #0
 8005724:	d00a      	beq.n	800573c <HAL_RCCEx_PeriphCLKConfig+0x2c4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8005726:	4b54      	ldr	r3, [pc, #336]	; (8005878 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8005728:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800572c:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8005730:	687b      	ldr	r3, [r7, #4]
 8005732:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005734:	4950      	ldr	r1, [pc, #320]	; (8005878 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8005736:	4313      	orrs	r3, r2
 8005738:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 800573c:	687b      	ldr	r3, [r7, #4]
 800573e:	681b      	ldr	r3, [r3, #0]
 8005740:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005744:	2b00      	cmp	r3, #0
 8005746:	d015      	beq.n	8005774 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure the SAI1 interface clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8005748:	4b4b      	ldr	r3, [pc, #300]	; (8005878 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 800574a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800574e:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8005752:	687b      	ldr	r3, [r7, #4]
 8005754:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005756:	4948      	ldr	r1, [pc, #288]	; (8005878 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8005758:	4313      	orrs	r3, r2
 800575a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLL)
 800575e:	687b      	ldr	r3, [r7, #4]
 8005760:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005762:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005766:	d105      	bne.n	8005774 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8005768:	4b43      	ldr	r3, [pc, #268]	; (8005878 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 800576a:	68db      	ldr	r3, [r3, #12]
 800576c:	4a42      	ldr	r2, [pc, #264]	; (8005878 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 800576e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8005772:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- I2S clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 8005774:	687b      	ldr	r3, [r7, #4]
 8005776:	681b      	ldr	r3, [r3, #0]
 8005778:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800577c:	2b00      	cmp	r3, #0
 800577e:	d015      	beq.n	80057ac <HAL_RCCEx_PeriphCLKConfig+0x334>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure the I2S interface clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8005780:	4b3d      	ldr	r3, [pc, #244]	; (8005878 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8005782:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005786:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 800578a:	687b      	ldr	r3, [r7, #4]
 800578c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800578e:	493a      	ldr	r1, [pc, #232]	; (8005878 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8005790:	4313      	orrs	r3, r2
 8005792:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLL)
 8005796:	687b      	ldr	r3, [r7, #4]
 8005798:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800579a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800579e:	d105      	bne.n	80057ac <HAL_RCCEx_PeriphCLKConfig+0x334>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80057a0:	4b35      	ldr	r3, [pc, #212]	; (8005878 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 80057a2:	68db      	ldr	r3, [r3, #12]
 80057a4:	4a34      	ldr	r2, [pc, #208]	; (8005878 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 80057a6:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80057aa:	60d3      	str	r3, [r2, #12]
    }
  }

#if defined(FDCAN1)
  /*-------------------------- FDCAN clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 80057ac:	687b      	ldr	r3, [r7, #4]
 80057ae:	681b      	ldr	r3, [r3, #0]
 80057b0:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80057b4:	2b00      	cmp	r3, #0
 80057b6:	d015      	beq.n	80057e4 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN interface clock source */
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 80057b8:	4b2f      	ldr	r3, [pc, #188]	; (8005878 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 80057ba:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80057be:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 80057c2:	687b      	ldr	r3, [r7, #4]
 80057c4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80057c6:	492c      	ldr	r1, [pc, #176]	; (8005878 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 80057c8:	4313      	orrs	r3, r2
 80057ca:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 80057ce:	687b      	ldr	r3, [r7, #4]
 80057d0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80057d2:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80057d6:	d105      	bne.n	80057e4 <HAL_RCCEx_PeriphCLKConfig+0x36c>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80057d8:	4b27      	ldr	r3, [pc, #156]	; (8005878 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 80057da:	68db      	ldr	r3, [r3, #12]
 80057dc:	4a26      	ldr	r2, [pc, #152]	; (8005878 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 80057de:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80057e2:	60d3      	str	r3, [r2, #12]
#endif /* FDCAN1 */

#if defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 80057e4:	687b      	ldr	r3, [r7, #4]
 80057e6:	681b      	ldr	r3, [r3, #0]
 80057e8:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80057ec:	2b00      	cmp	r3, #0
 80057ee:	d015      	beq.n	800581c <HAL_RCCEx_PeriphCLKConfig+0x3a4>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80057f0:	4b21      	ldr	r3, [pc, #132]	; (8005878 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 80057f2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80057f6:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80057fa:	687b      	ldr	r3, [r7, #4]
 80057fc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80057fe:	491e      	ldr	r1, [pc, #120]	; (8005878 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8005800:	4313      	orrs	r3, r2
 8005802:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8005806:	687b      	ldr	r3, [r7, #4]
 8005808:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800580a:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800580e:	d105      	bne.n	800581c <HAL_RCCEx_PeriphCLKConfig+0x3a4>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8005810:	4b19      	ldr	r3, [pc, #100]	; (8005878 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8005812:	68db      	ldr	r3, [r3, #12]
 8005814:	4a18      	ldr	r2, [pc, #96]	; (8005878 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8005816:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800581a:	60d3      	str	r3, [r2, #12]
  }

#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 800581c:	687b      	ldr	r3, [r7, #4]
 800581e:	681b      	ldr	r3, [r3, #0]
 8005820:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005824:	2b00      	cmp	r3, #0
 8005826:	d015      	beq.n	8005854 <HAL_RCCEx_PeriphCLKConfig+0x3dc>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8005828:	4b13      	ldr	r3, [pc, #76]	; (8005878 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 800582a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800582e:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8005832:	687b      	ldr	r3, [r7, #4]
 8005834:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005836:	4910      	ldr	r1, [pc, #64]	; (8005878 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8005838:	4313      	orrs	r3, r2
 800583a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 800583e:	687b      	ldr	r3, [r7, #4]
 8005840:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005842:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8005846:	d105      	bne.n	8005854 <HAL_RCCEx_PeriphCLKConfig+0x3dc>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8005848:	4b0b      	ldr	r3, [pc, #44]	; (8005878 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 800584a:	68db      	ldr	r3, [r3, #12]
 800584c:	4a0a      	ldr	r2, [pc, #40]	; (8005878 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 800584e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8005852:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- ADC12 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 8005854:	687b      	ldr	r3, [r7, #4]
 8005856:	681b      	ldr	r3, [r3, #0]
 8005858:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800585c:	2b00      	cmp	r3, #0
 800585e:	d018      	beq.n	8005892 <HAL_RCCEx_PeriphCLKConfig+0x41a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12CLKSOURCE(PeriphClkInit->Adc12ClockSelection));

    /* Configure the ADC12 interface clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 8005860:	4b05      	ldr	r3, [pc, #20]	; (8005878 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8005862:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005866:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 800586a:	687b      	ldr	r3, [r7, #4]
 800586c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800586e:	4902      	ldr	r1, [pc, #8]	; (8005878 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8005870:	4313      	orrs	r3, r2
 8005872:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 8005876:	e001      	b.n	800587c <HAL_RCCEx_PeriphCLKConfig+0x404>
 8005878:	40021000 	.word	0x40021000
    
    if(PeriphClkInit->Adc12ClockSelection == RCC_ADC12CLKSOURCE_PLL)
 800587c:	687b      	ldr	r3, [r7, #4]
 800587e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005880:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8005884:	d105      	bne.n	8005892 <HAL_RCCEx_PeriphCLKConfig+0x41a>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8005886:	4b21      	ldr	r3, [pc, #132]	; (800590c <HAL_RCCEx_PeriphCLKConfig+0x494>)
 8005888:	68db      	ldr	r3, [r3, #12]
 800588a:	4a20      	ldr	r2, [pc, #128]	; (800590c <HAL_RCCEx_PeriphCLKConfig+0x494>)
 800588c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005890:	60d3      	str	r3, [r2, #12]
    }
  }
  
#if defined(ADC345_COMMON)
  /*-------------------------- ADC345 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC345) == RCC_PERIPHCLK_ADC345)
 8005892:	687b      	ldr	r3, [r7, #4]
 8005894:	681b      	ldr	r3, [r3, #0]
 8005896:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800589a:	2b00      	cmp	r3, #0
 800589c:	d015      	beq.n	80058ca <HAL_RCCEx_PeriphCLKConfig+0x452>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC345CLKSOURCE(PeriphClkInit->Adc345ClockSelection));

    /* Configure the ADC345 interface clock source */
    __HAL_RCC_ADC345_CONFIG(PeriphClkInit->Adc345ClockSelection);
 800589e:	4b1b      	ldr	r3, [pc, #108]	; (800590c <HAL_RCCEx_PeriphCLKConfig+0x494>)
 80058a0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80058a4:	f023 4240 	bic.w	r2, r3, #3221225472	; 0xc0000000
 80058a8:	687b      	ldr	r3, [r7, #4]
 80058aa:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80058ac:	4917      	ldr	r1, [pc, #92]	; (800590c <HAL_RCCEx_PeriphCLKConfig+0x494>)
 80058ae:	4313      	orrs	r3, r2
 80058b0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Adc345ClockSelection == RCC_ADC345CLKSOURCE_PLL)
 80058b4:	687b      	ldr	r3, [r7, #4]
 80058b6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80058b8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80058bc:	d105      	bne.n	80058ca <HAL_RCCEx_PeriphCLKConfig+0x452>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 80058be:	4b13      	ldr	r3, [pc, #76]	; (800590c <HAL_RCCEx_PeriphCLKConfig+0x494>)
 80058c0:	68db      	ldr	r3, [r3, #12]
 80058c2:	4a12      	ldr	r2, [pc, #72]	; (800590c <HAL_RCCEx_PeriphCLKConfig+0x494>)
 80058c4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80058c8:	60d3      	str	r3, [r2, #12]
#endif /* ADC345_COMMON */

#if defined(QUADSPI)

  /*-------------------------- QuadSPIx clock source configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 80058ca:	687b      	ldr	r3, [r7, #4]
 80058cc:	681b      	ldr	r3, [r3, #0]
 80058ce:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80058d2:	2b00      	cmp	r3, #0
 80058d4:	d015      	beq.n	8005902 <HAL_RCCEx_PeriphCLKConfig+0x48a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_QSPICLKSOURCE(PeriphClkInit->QspiClockSelection));

    /* Configure the QuadSPI clock source */
    __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 80058d6:	4b0d      	ldr	r3, [pc, #52]	; (800590c <HAL_RCCEx_PeriphCLKConfig+0x494>)
 80058d8:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80058dc:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80058e0:	687b      	ldr	r3, [r7, #4]
 80058e2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80058e4:	4909      	ldr	r1, [pc, #36]	; (800590c <HAL_RCCEx_PeriphCLKConfig+0x494>)
 80058e6:	4313      	orrs	r3, r2
 80058e8:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c

    if(PeriphClkInit->QspiClockSelection == RCC_QSPICLKSOURCE_PLL)
 80058ec:	687b      	ldr	r3, [r7, #4]
 80058ee:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80058f0:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80058f4:	d105      	bne.n	8005902 <HAL_RCCEx_PeriphCLKConfig+0x48a>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80058f6:	4b05      	ldr	r3, [pc, #20]	; (800590c <HAL_RCCEx_PeriphCLKConfig+0x494>)
 80058f8:	68db      	ldr	r3, [r3, #12]
 80058fa:	4a04      	ldr	r2, [pc, #16]	; (800590c <HAL_RCCEx_PeriphCLKConfig+0x494>)
 80058fc:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8005900:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* QUADSPI */

  return status;
 8005902:	7cbb      	ldrb	r3, [r7, #18]
}
 8005904:	4618      	mov	r0, r3
 8005906:	3718      	adds	r7, #24
 8005908:	46bd      	mov	sp, r7
 800590a:	bd80      	pop	{r7, pc}
 800590c:	40021000 	.word	0x40021000

08005910 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8005910:	b580      	push	{r7, lr}
 8005912:	b084      	sub	sp, #16
 8005914:	af00      	add	r7, sp, #0
 8005916:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8005918:	687b      	ldr	r3, [r7, #4]
 800591a:	2b00      	cmp	r3, #0
 800591c:	d101      	bne.n	8005922 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800591e:	2301      	movs	r3, #1
 8005920:	e084      	b.n	8005a2c <HAL_SPI_Init+0x11c>
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8005922:	687b      	ldr	r3, [r7, #4]
 8005924:	2200      	movs	r2, #0
 8005926:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8005928:	687b      	ldr	r3, [r7, #4]
 800592a:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 800592e:	b2db      	uxtb	r3, r3
 8005930:	2b00      	cmp	r3, #0
 8005932:	d106      	bne.n	8005942 <HAL_SPI_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8005934:	687b      	ldr	r3, [r7, #4]
 8005936:	2200      	movs	r2, #0
 8005938:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800593c:	6878      	ldr	r0, [r7, #4]
 800593e:	f7fb fd6b 	bl	8001418 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8005942:	687b      	ldr	r3, [r7, #4]
 8005944:	2202      	movs	r2, #2
 8005946:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800594a:	687b      	ldr	r3, [r7, #4]
 800594c:	681b      	ldr	r3, [r3, #0]
 800594e:	681a      	ldr	r2, [r3, #0]
 8005950:	687b      	ldr	r3, [r7, #4]
 8005952:	681b      	ldr	r3, [r3, #0]
 8005954:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005958:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800595a:	687b      	ldr	r3, [r7, #4]
 800595c:	68db      	ldr	r3, [r3, #12]
 800595e:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8005962:	d902      	bls.n	800596a <HAL_SPI_Init+0x5a>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8005964:	2300      	movs	r3, #0
 8005966:	60fb      	str	r3, [r7, #12]
 8005968:	e002      	b.n	8005970 <HAL_SPI_Init+0x60>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 800596a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800596e:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8005970:	687b      	ldr	r3, [r7, #4]
 8005972:	68db      	ldr	r3, [r3, #12]
 8005974:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 8005978:	d007      	beq.n	800598a <HAL_SPI_Init+0x7a>
 800597a:	687b      	ldr	r3, [r7, #4]
 800597c:	68db      	ldr	r3, [r3, #12]
 800597e:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8005982:	d002      	beq.n	800598a <HAL_SPI_Init+0x7a>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8005984:	687b      	ldr	r3, [r7, #4]
 8005986:	2200      	movs	r2, #0
 8005988:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Align the CRC Length on the data size */
  if (hspi->Init.CRCLength == SPI_CRC_LENGTH_DATASIZE)
 800598a:	687b      	ldr	r3, [r7, #4]
 800598c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800598e:	2b00      	cmp	r3, #0
 8005990:	d10b      	bne.n	80059aa <HAL_SPI_Init+0x9a>
  {
    /* CRC Length aligned on the data size : value set by default */
    if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8005992:	687b      	ldr	r3, [r7, #4]
 8005994:	68db      	ldr	r3, [r3, #12]
 8005996:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800599a:	d903      	bls.n	80059a4 <HAL_SPI_Init+0x94>
    {
      hspi->Init.CRCLength = SPI_CRC_LENGTH_16BIT;
 800599c:	687b      	ldr	r3, [r7, #4]
 800599e:	2202      	movs	r2, #2
 80059a0:	631a      	str	r2, [r3, #48]	; 0x30
 80059a2:	e002      	b.n	80059aa <HAL_SPI_Init+0x9a>
    }
    else
    {
      hspi->Init.CRCLength = SPI_CRC_LENGTH_8BIT;
 80059a4:	687b      	ldr	r3, [r7, #4]
 80059a6:	2201      	movs	r2, #1
 80059a8:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction |
 80059aa:	687b      	ldr	r3, [r7, #4]
 80059ac:	685a      	ldr	r2, [r3, #4]
 80059ae:	687b      	ldr	r3, [r7, #4]
 80059b0:	689b      	ldr	r3, [r3, #8]
 80059b2:	431a      	orrs	r2, r3
 80059b4:	687b      	ldr	r3, [r7, #4]
 80059b6:	691b      	ldr	r3, [r3, #16]
 80059b8:	431a      	orrs	r2, r3
 80059ba:	687b      	ldr	r3, [r7, #4]
 80059bc:	695b      	ldr	r3, [r3, #20]
 80059be:	431a      	orrs	r2, r3
 80059c0:	687b      	ldr	r3, [r7, #4]
 80059c2:	699b      	ldr	r3, [r3, #24]
 80059c4:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80059c8:	431a      	orrs	r2, r3
 80059ca:	687b      	ldr	r3, [r7, #4]
 80059cc:	69db      	ldr	r3, [r3, #28]
 80059ce:	431a      	orrs	r2, r3
 80059d0:	687b      	ldr	r3, [r7, #4]
 80059d2:	6a1b      	ldr	r3, [r3, #32]
 80059d4:	ea42 0103 	orr.w	r1, r2, r3
 80059d8:	687b      	ldr	r3, [r7, #4]
 80059da:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80059dc:	687b      	ldr	r3, [r7, #4]
 80059de:	681b      	ldr	r3, [r3, #0]
 80059e0:	430a      	orrs	r2, r1
 80059e2:	601a      	str	r2, [r3, #0]
    hspi->Instance->CR1 |= SPI_CR1_CRCL;
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | hspi->Init.TIMode |
 80059e4:	687b      	ldr	r3, [r7, #4]
 80059e6:	699b      	ldr	r3, [r3, #24]
 80059e8:	0c1b      	lsrs	r3, r3, #16
 80059ea:	f003 0204 	and.w	r2, r3, #4
 80059ee:	687b      	ldr	r3, [r7, #4]
 80059f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80059f2:	431a      	orrs	r2, r3
 80059f4:	687b      	ldr	r3, [r7, #4]
 80059f6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80059f8:	431a      	orrs	r2, r3
 80059fa:	687b      	ldr	r3, [r7, #4]
 80059fc:	68db      	ldr	r3, [r3, #12]
 80059fe:	ea42 0103 	orr.w	r1, r2, r3
 8005a02:	687b      	ldr	r3, [r7, #4]
 8005a04:	681b      	ldr	r3, [r3, #0]
 8005a06:	68fa      	ldr	r2, [r7, #12]
 8005a08:	430a      	orrs	r2, r1
 8005a0a:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8005a0c:	687b      	ldr	r3, [r7, #4]
 8005a0e:	681b      	ldr	r3, [r3, #0]
 8005a10:	69da      	ldr	r2, [r3, #28]
 8005a12:	687b      	ldr	r3, [r7, #4]
 8005a14:	681b      	ldr	r3, [r3, #0]
 8005a16:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8005a1a:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8005a1c:	687b      	ldr	r3, [r7, #4]
 8005a1e:	2200      	movs	r2, #0
 8005a20:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8005a22:	687b      	ldr	r3, [r7, #4]
 8005a24:	2201      	movs	r2, #1
 8005a26:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 8005a2a:	2300      	movs	r3, #0
}
 8005a2c:	4618      	mov	r0, r3
 8005a2e:	3710      	adds	r7, #16
 8005a30:	46bd      	mov	sp, r7
 8005a32:	bd80      	pop	{r7, pc}

08005a34 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005a34:	b580      	push	{r7, lr}
 8005a36:	b088      	sub	sp, #32
 8005a38:	af00      	add	r7, sp, #0
 8005a3a:	60f8      	str	r0, [r7, #12]
 8005a3c:	60b9      	str	r1, [r7, #8]
 8005a3e:	603b      	str	r3, [r7, #0]
 8005a40:	4613      	mov	r3, r2
 8005a42:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8005a44:	2300      	movs	r3, #0
 8005a46:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8005a48:	68fb      	ldr	r3, [r7, #12]
 8005a4a:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8005a4e:	2b01      	cmp	r3, #1
 8005a50:	d101      	bne.n	8005a56 <HAL_SPI_Transmit+0x22>
 8005a52:	2302      	movs	r3, #2
 8005a54:	e150      	b.n	8005cf8 <HAL_SPI_Transmit+0x2c4>
 8005a56:	68fb      	ldr	r3, [r7, #12]
 8005a58:	2201      	movs	r2, #1
 8005a5a:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8005a5e:	f7fc fb0b 	bl	8002078 <HAL_GetTick>
 8005a62:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8005a64:	88fb      	ldrh	r3, [r7, #6]
 8005a66:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8005a68:	68fb      	ldr	r3, [r7, #12]
 8005a6a:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8005a6e:	b2db      	uxtb	r3, r3
 8005a70:	2b01      	cmp	r3, #1
 8005a72:	d002      	beq.n	8005a7a <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8005a74:	2302      	movs	r3, #2
 8005a76:	77fb      	strb	r3, [r7, #31]
    goto error;
 8005a78:	e135      	b.n	8005ce6 <HAL_SPI_Transmit+0x2b2>
  }

  if ((pData == NULL) || (Size == 0U))
 8005a7a:	68bb      	ldr	r3, [r7, #8]
 8005a7c:	2b00      	cmp	r3, #0
 8005a7e:	d002      	beq.n	8005a86 <HAL_SPI_Transmit+0x52>
 8005a80:	88fb      	ldrh	r3, [r7, #6]
 8005a82:	2b00      	cmp	r3, #0
 8005a84:	d102      	bne.n	8005a8c <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8005a86:	2301      	movs	r3, #1
 8005a88:	77fb      	strb	r3, [r7, #31]
    goto error;
 8005a8a:	e12c      	b.n	8005ce6 <HAL_SPI_Transmit+0x2b2>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8005a8c:	68fb      	ldr	r3, [r7, #12]
 8005a8e:	2203      	movs	r2, #3
 8005a90:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8005a94:	68fb      	ldr	r3, [r7, #12]
 8005a96:	2200      	movs	r2, #0
 8005a98:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8005a9a:	68fb      	ldr	r3, [r7, #12]
 8005a9c:	68ba      	ldr	r2, [r7, #8]
 8005a9e:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = Size;
 8005aa0:	68fb      	ldr	r3, [r7, #12]
 8005aa2:	88fa      	ldrh	r2, [r7, #6]
 8005aa4:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = Size;
 8005aa6:	68fb      	ldr	r3, [r7, #12]
 8005aa8:	88fa      	ldrh	r2, [r7, #6]
 8005aaa:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8005aac:	68fb      	ldr	r3, [r7, #12]
 8005aae:	2200      	movs	r2, #0
 8005ab0:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = 0U;
 8005ab2:	68fb      	ldr	r3, [r7, #12]
 8005ab4:	2200      	movs	r2, #0
 8005ab6:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->RxXferCount = 0U;
 8005aba:	68fb      	ldr	r3, [r7, #12]
 8005abc:	2200      	movs	r2, #0
 8005abe:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->TxISR       = NULL;
 8005ac2:	68fb      	ldr	r3, [r7, #12]
 8005ac4:	2200      	movs	r2, #0
 8005ac6:	651a      	str	r2, [r3, #80]	; 0x50
  hspi->RxISR       = NULL;
 8005ac8:	68fb      	ldr	r3, [r7, #12]
 8005aca:	2200      	movs	r2, #0
 8005acc:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005ace:	68fb      	ldr	r3, [r7, #12]
 8005ad0:	689b      	ldr	r3, [r3, #8]
 8005ad2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005ad6:	d107      	bne.n	8005ae8 <HAL_SPI_Transmit+0xb4>
  {
    SPI_1LINE_TX(hspi);
 8005ad8:	68fb      	ldr	r3, [r7, #12]
 8005ada:	681b      	ldr	r3, [r3, #0]
 8005adc:	681a      	ldr	r2, [r3, #0]
 8005ade:	68fb      	ldr	r3, [r7, #12]
 8005ae0:	681b      	ldr	r3, [r3, #0]
 8005ae2:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8005ae6:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8005ae8:	68fb      	ldr	r3, [r7, #12]
 8005aea:	681b      	ldr	r3, [r3, #0]
 8005aec:	681b      	ldr	r3, [r3, #0]
 8005aee:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005af2:	2b40      	cmp	r3, #64	; 0x40
 8005af4:	d007      	beq.n	8005b06 <HAL_SPI_Transmit+0xd2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8005af6:	68fb      	ldr	r3, [r7, #12]
 8005af8:	681b      	ldr	r3, [r3, #0]
 8005afa:	681a      	ldr	r2, [r3, #0]
 8005afc:	68fb      	ldr	r3, [r7, #12]
 8005afe:	681b      	ldr	r3, [r3, #0]
 8005b00:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8005b04:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8005b06:	68fb      	ldr	r3, [r7, #12]
 8005b08:	68db      	ldr	r3, [r3, #12]
 8005b0a:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8005b0e:	d94b      	bls.n	8005ba8 <HAL_SPI_Transmit+0x174>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8005b10:	68fb      	ldr	r3, [r7, #12]
 8005b12:	685b      	ldr	r3, [r3, #4]
 8005b14:	2b00      	cmp	r3, #0
 8005b16:	d002      	beq.n	8005b1e <HAL_SPI_Transmit+0xea>
 8005b18:	8afb      	ldrh	r3, [r7, #22]
 8005b1a:	2b01      	cmp	r3, #1
 8005b1c:	d13e      	bne.n	8005b9c <HAL_SPI_Transmit+0x168>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8005b1e:	68fb      	ldr	r3, [r7, #12]
 8005b20:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005b22:	881a      	ldrh	r2, [r3, #0]
 8005b24:	68fb      	ldr	r3, [r7, #12]
 8005b26:	681b      	ldr	r3, [r3, #0]
 8005b28:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8005b2a:	68fb      	ldr	r3, [r7, #12]
 8005b2c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005b2e:	1c9a      	adds	r2, r3, #2
 8005b30:	68fb      	ldr	r3, [r7, #12]
 8005b32:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 8005b34:	68fb      	ldr	r3, [r7, #12]
 8005b36:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005b38:	b29b      	uxth	r3, r3
 8005b3a:	3b01      	subs	r3, #1
 8005b3c:	b29a      	uxth	r2, r3
 8005b3e:	68fb      	ldr	r3, [r7, #12]
 8005b40:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8005b42:	e02b      	b.n	8005b9c <HAL_SPI_Transmit+0x168>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8005b44:	68fb      	ldr	r3, [r7, #12]
 8005b46:	681b      	ldr	r3, [r3, #0]
 8005b48:	689b      	ldr	r3, [r3, #8]
 8005b4a:	f003 0302 	and.w	r3, r3, #2
 8005b4e:	2b02      	cmp	r3, #2
 8005b50:	d112      	bne.n	8005b78 <HAL_SPI_Transmit+0x144>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8005b52:	68fb      	ldr	r3, [r7, #12]
 8005b54:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005b56:	881a      	ldrh	r2, [r3, #0]
 8005b58:	68fb      	ldr	r3, [r7, #12]
 8005b5a:	681b      	ldr	r3, [r3, #0]
 8005b5c:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8005b5e:	68fb      	ldr	r3, [r7, #12]
 8005b60:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005b62:	1c9a      	adds	r2, r3, #2
 8005b64:	68fb      	ldr	r3, [r7, #12]
 8005b66:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8005b68:	68fb      	ldr	r3, [r7, #12]
 8005b6a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005b6c:	b29b      	uxth	r3, r3
 8005b6e:	3b01      	subs	r3, #1
 8005b70:	b29a      	uxth	r2, r3
 8005b72:	68fb      	ldr	r3, [r7, #12]
 8005b74:	87da      	strh	r2, [r3, #62]	; 0x3e
 8005b76:	e011      	b.n	8005b9c <HAL_SPI_Transmit+0x168>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8005b78:	f7fc fa7e 	bl	8002078 <HAL_GetTick>
 8005b7c:	4602      	mov	r2, r0
 8005b7e:	69bb      	ldr	r3, [r7, #24]
 8005b80:	1ad3      	subs	r3, r2, r3
 8005b82:	683a      	ldr	r2, [r7, #0]
 8005b84:	429a      	cmp	r2, r3
 8005b86:	d803      	bhi.n	8005b90 <HAL_SPI_Transmit+0x15c>
 8005b88:	683b      	ldr	r3, [r7, #0]
 8005b8a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8005b8e:	d102      	bne.n	8005b96 <HAL_SPI_Transmit+0x162>
 8005b90:	683b      	ldr	r3, [r7, #0]
 8005b92:	2b00      	cmp	r3, #0
 8005b94:	d102      	bne.n	8005b9c <HAL_SPI_Transmit+0x168>
        {
          errorcode = HAL_TIMEOUT;
 8005b96:	2303      	movs	r3, #3
 8005b98:	77fb      	strb	r3, [r7, #31]
          goto error;
 8005b9a:	e0a4      	b.n	8005ce6 <HAL_SPI_Transmit+0x2b2>
    while (hspi->TxXferCount > 0U)
 8005b9c:	68fb      	ldr	r3, [r7, #12]
 8005b9e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005ba0:	b29b      	uxth	r3, r3
 8005ba2:	2b00      	cmp	r3, #0
 8005ba4:	d1ce      	bne.n	8005b44 <HAL_SPI_Transmit+0x110>
 8005ba6:	e07c      	b.n	8005ca2 <HAL_SPI_Transmit+0x26e>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8005ba8:	68fb      	ldr	r3, [r7, #12]
 8005baa:	685b      	ldr	r3, [r3, #4]
 8005bac:	2b00      	cmp	r3, #0
 8005bae:	d002      	beq.n	8005bb6 <HAL_SPI_Transmit+0x182>
 8005bb0:	8afb      	ldrh	r3, [r7, #22]
 8005bb2:	2b01      	cmp	r3, #1
 8005bb4:	d170      	bne.n	8005c98 <HAL_SPI_Transmit+0x264>
    {
      if (hspi->TxXferCount > 1U)
 8005bb6:	68fb      	ldr	r3, [r7, #12]
 8005bb8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005bba:	b29b      	uxth	r3, r3
 8005bbc:	2b01      	cmp	r3, #1
 8005bbe:	d912      	bls.n	8005be6 <HAL_SPI_Transmit+0x1b2>
      {
        /* write on the data register in packing mode */
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8005bc0:	68fb      	ldr	r3, [r7, #12]
 8005bc2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005bc4:	881a      	ldrh	r2, [r3, #0]
 8005bc6:	68fb      	ldr	r3, [r7, #12]
 8005bc8:	681b      	ldr	r3, [r3, #0]
 8005bca:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8005bcc:	68fb      	ldr	r3, [r7, #12]
 8005bce:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005bd0:	1c9a      	adds	r2, r3, #2
 8005bd2:	68fb      	ldr	r3, [r7, #12]
 8005bd4:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount -= 2U;
 8005bd6:	68fb      	ldr	r3, [r7, #12]
 8005bd8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005bda:	b29b      	uxth	r3, r3
 8005bdc:	3b02      	subs	r3, #2
 8005bde:	b29a      	uxth	r2, r3
 8005be0:	68fb      	ldr	r3, [r7, #12]
 8005be2:	87da      	strh	r2, [r3, #62]	; 0x3e
 8005be4:	e058      	b.n	8005c98 <HAL_SPI_Transmit+0x264>
      }
      else
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8005be6:	68fb      	ldr	r3, [r7, #12]
 8005be8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005bea:	68fb      	ldr	r3, [r7, #12]
 8005bec:	681b      	ldr	r3, [r3, #0]
 8005bee:	330c      	adds	r3, #12
 8005bf0:	7812      	ldrb	r2, [r2, #0]
 8005bf2:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr ++;
 8005bf4:	68fb      	ldr	r3, [r7, #12]
 8005bf6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005bf8:	1c5a      	adds	r2, r3, #1
 8005bfa:	68fb      	ldr	r3, [r7, #12]
 8005bfc:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8005bfe:	68fb      	ldr	r3, [r7, #12]
 8005c00:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005c02:	b29b      	uxth	r3, r3
 8005c04:	3b01      	subs	r3, #1
 8005c06:	b29a      	uxth	r2, r3
 8005c08:	68fb      	ldr	r3, [r7, #12]
 8005c0a:	87da      	strh	r2, [r3, #62]	; 0x3e
      }
    }
    while (hspi->TxXferCount > 0U)
 8005c0c:	e044      	b.n	8005c98 <HAL_SPI_Transmit+0x264>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8005c0e:	68fb      	ldr	r3, [r7, #12]
 8005c10:	681b      	ldr	r3, [r3, #0]
 8005c12:	689b      	ldr	r3, [r3, #8]
 8005c14:	f003 0302 	and.w	r3, r3, #2
 8005c18:	2b02      	cmp	r3, #2
 8005c1a:	d12b      	bne.n	8005c74 <HAL_SPI_Transmit+0x240>
      {
        if (hspi->TxXferCount > 1U)
 8005c1c:	68fb      	ldr	r3, [r7, #12]
 8005c1e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005c20:	b29b      	uxth	r3, r3
 8005c22:	2b01      	cmp	r3, #1
 8005c24:	d912      	bls.n	8005c4c <HAL_SPI_Transmit+0x218>
        {
          /* write on the data register in packing mode */
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8005c26:	68fb      	ldr	r3, [r7, #12]
 8005c28:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005c2a:	881a      	ldrh	r2, [r3, #0]
 8005c2c:	68fb      	ldr	r3, [r7, #12]
 8005c2e:	681b      	ldr	r3, [r3, #0]
 8005c30:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8005c32:	68fb      	ldr	r3, [r7, #12]
 8005c34:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005c36:	1c9a      	adds	r2, r3, #2
 8005c38:	68fb      	ldr	r3, [r7, #12]
 8005c3a:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount -= 2U;
 8005c3c:	68fb      	ldr	r3, [r7, #12]
 8005c3e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005c40:	b29b      	uxth	r3, r3
 8005c42:	3b02      	subs	r3, #2
 8005c44:	b29a      	uxth	r2, r3
 8005c46:	68fb      	ldr	r3, [r7, #12]
 8005c48:	87da      	strh	r2, [r3, #62]	; 0x3e
 8005c4a:	e025      	b.n	8005c98 <HAL_SPI_Transmit+0x264>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8005c4c:	68fb      	ldr	r3, [r7, #12]
 8005c4e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005c50:	68fb      	ldr	r3, [r7, #12]
 8005c52:	681b      	ldr	r3, [r3, #0]
 8005c54:	330c      	adds	r3, #12
 8005c56:	7812      	ldrb	r2, [r2, #0]
 8005c58:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 8005c5a:	68fb      	ldr	r3, [r7, #12]
 8005c5c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005c5e:	1c5a      	adds	r2, r3, #1
 8005c60:	68fb      	ldr	r3, [r7, #12]
 8005c62:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount--;
 8005c64:	68fb      	ldr	r3, [r7, #12]
 8005c66:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005c68:	b29b      	uxth	r3, r3
 8005c6a:	3b01      	subs	r3, #1
 8005c6c:	b29a      	uxth	r2, r3
 8005c6e:	68fb      	ldr	r3, [r7, #12]
 8005c70:	87da      	strh	r2, [r3, #62]	; 0x3e
 8005c72:	e011      	b.n	8005c98 <HAL_SPI_Transmit+0x264>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8005c74:	f7fc fa00 	bl	8002078 <HAL_GetTick>
 8005c78:	4602      	mov	r2, r0
 8005c7a:	69bb      	ldr	r3, [r7, #24]
 8005c7c:	1ad3      	subs	r3, r2, r3
 8005c7e:	683a      	ldr	r2, [r7, #0]
 8005c80:	429a      	cmp	r2, r3
 8005c82:	d803      	bhi.n	8005c8c <HAL_SPI_Transmit+0x258>
 8005c84:	683b      	ldr	r3, [r7, #0]
 8005c86:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8005c8a:	d102      	bne.n	8005c92 <HAL_SPI_Transmit+0x25e>
 8005c8c:	683b      	ldr	r3, [r7, #0]
 8005c8e:	2b00      	cmp	r3, #0
 8005c90:	d102      	bne.n	8005c98 <HAL_SPI_Transmit+0x264>
        {
          errorcode = HAL_TIMEOUT;
 8005c92:	2303      	movs	r3, #3
 8005c94:	77fb      	strb	r3, [r7, #31]
          goto error;
 8005c96:	e026      	b.n	8005ce6 <HAL_SPI_Transmit+0x2b2>
    while (hspi->TxXferCount > 0U)
 8005c98:	68fb      	ldr	r3, [r7, #12]
 8005c9a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005c9c:	b29b      	uxth	r3, r3
 8005c9e:	2b00      	cmp	r3, #0
 8005ca0:	d1b5      	bne.n	8005c0e <HAL_SPI_Transmit+0x1da>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8005ca2:	69ba      	ldr	r2, [r7, #24]
 8005ca4:	6839      	ldr	r1, [r7, #0]
 8005ca6:	68f8      	ldr	r0, [r7, #12]
 8005ca8:	f000 f901 	bl	8005eae <SPI_EndRxTxTransaction>
 8005cac:	4603      	mov	r3, r0
 8005cae:	2b00      	cmp	r3, #0
 8005cb0:	d002      	beq.n	8005cb8 <HAL_SPI_Transmit+0x284>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8005cb2:	68fb      	ldr	r3, [r7, #12]
 8005cb4:	2220      	movs	r2, #32
 8005cb6:	661a      	str	r2, [r3, #96]	; 0x60
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8005cb8:	68fb      	ldr	r3, [r7, #12]
 8005cba:	689b      	ldr	r3, [r3, #8]
 8005cbc:	2b00      	cmp	r3, #0
 8005cbe:	d10a      	bne.n	8005cd6 <HAL_SPI_Transmit+0x2a2>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8005cc0:	2300      	movs	r3, #0
 8005cc2:	613b      	str	r3, [r7, #16]
 8005cc4:	68fb      	ldr	r3, [r7, #12]
 8005cc6:	681b      	ldr	r3, [r3, #0]
 8005cc8:	68db      	ldr	r3, [r3, #12]
 8005cca:	613b      	str	r3, [r7, #16]
 8005ccc:	68fb      	ldr	r3, [r7, #12]
 8005cce:	681b      	ldr	r3, [r3, #0]
 8005cd0:	689b      	ldr	r3, [r3, #8]
 8005cd2:	613b      	str	r3, [r7, #16]
 8005cd4:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8005cd6:	68fb      	ldr	r3, [r7, #12]
 8005cd8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005cda:	2b00      	cmp	r3, #0
 8005cdc:	d002      	beq.n	8005ce4 <HAL_SPI_Transmit+0x2b0>
  {
    errorcode = HAL_ERROR;
 8005cde:	2301      	movs	r3, #1
 8005ce0:	77fb      	strb	r3, [r7, #31]
 8005ce2:	e000      	b.n	8005ce6 <HAL_SPI_Transmit+0x2b2>
  }

error:
 8005ce4:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8005ce6:	68fb      	ldr	r3, [r7, #12]
 8005ce8:	2201      	movs	r2, #1
 8005cea:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8005cee:	68fb      	ldr	r3, [r7, #12]
 8005cf0:	2200      	movs	r2, #0
 8005cf2:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 8005cf6:	7ffb      	ldrb	r3, [r7, #31]
}
 8005cf8:	4618      	mov	r0, r3
 8005cfa:	3720      	adds	r7, #32
 8005cfc:	46bd      	mov	sp, r7
 8005cfe:	bd80      	pop	{r7, pc}

08005d00 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8005d00:	b580      	push	{r7, lr}
 8005d02:	b084      	sub	sp, #16
 8005d04:	af00      	add	r7, sp, #0
 8005d06:	60f8      	str	r0, [r7, #12]
 8005d08:	60b9      	str	r1, [r7, #8]
 8005d0a:	603b      	str	r3, [r7, #0]
 8005d0c:	4613      	mov	r3, r2
 8005d0e:	71fb      	strb	r3, [r7, #7]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8005d10:	e04c      	b.n	8005dac <SPI_WaitFlagStateUntilTimeout+0xac>
  {
    if (Timeout != HAL_MAX_DELAY)
 8005d12:	683b      	ldr	r3, [r7, #0]
 8005d14:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8005d18:	d048      	beq.n	8005dac <SPI_WaitFlagStateUntilTimeout+0xac>
    {
      if (((HAL_GetTick() - Tickstart) >= Timeout) || (Timeout == 0U))
 8005d1a:	f7fc f9ad 	bl	8002078 <HAL_GetTick>
 8005d1e:	4602      	mov	r2, r0
 8005d20:	69bb      	ldr	r3, [r7, #24]
 8005d22:	1ad3      	subs	r3, r2, r3
 8005d24:	683a      	ldr	r2, [r7, #0]
 8005d26:	429a      	cmp	r2, r3
 8005d28:	d902      	bls.n	8005d30 <SPI_WaitFlagStateUntilTimeout+0x30>
 8005d2a:	683b      	ldr	r3, [r7, #0]
 8005d2c:	2b00      	cmp	r3, #0
 8005d2e:	d13d      	bne.n	8005dac <SPI_WaitFlagStateUntilTimeout+0xac>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
        on both master and slave sides in order to resynchronize the master
        and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8005d30:	68fb      	ldr	r3, [r7, #12]
 8005d32:	681b      	ldr	r3, [r3, #0]
 8005d34:	685a      	ldr	r2, [r3, #4]
 8005d36:	68fb      	ldr	r3, [r7, #12]
 8005d38:	681b      	ldr	r3, [r3, #0]
 8005d3a:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8005d3e:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005d40:	68fb      	ldr	r3, [r7, #12]
 8005d42:	685b      	ldr	r3, [r3, #4]
 8005d44:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8005d48:	d111      	bne.n	8005d6e <SPI_WaitFlagStateUntilTimeout+0x6e>
 8005d4a:	68fb      	ldr	r3, [r7, #12]
 8005d4c:	689b      	ldr	r3, [r3, #8]
 8005d4e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005d52:	d004      	beq.n	8005d5e <SPI_WaitFlagStateUntilTimeout+0x5e>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8005d54:	68fb      	ldr	r3, [r7, #12]
 8005d56:	689b      	ldr	r3, [r3, #8]
 8005d58:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005d5c:	d107      	bne.n	8005d6e <SPI_WaitFlagStateUntilTimeout+0x6e>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8005d5e:	68fb      	ldr	r3, [r7, #12]
 8005d60:	681b      	ldr	r3, [r3, #0]
 8005d62:	681a      	ldr	r2, [r3, #0]
 8005d64:	68fb      	ldr	r3, [r7, #12]
 8005d66:	681b      	ldr	r3, [r3, #0]
 8005d68:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005d6c:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8005d6e:	68fb      	ldr	r3, [r7, #12]
 8005d70:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005d72:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005d76:	d10f      	bne.n	8005d98 <SPI_WaitFlagStateUntilTimeout+0x98>
        {
          SPI_RESET_CRC(hspi);
 8005d78:	68fb      	ldr	r3, [r7, #12]
 8005d7a:	681b      	ldr	r3, [r3, #0]
 8005d7c:	681a      	ldr	r2, [r3, #0]
 8005d7e:	68fb      	ldr	r3, [r7, #12]
 8005d80:	681b      	ldr	r3, [r3, #0]
 8005d82:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8005d86:	601a      	str	r2, [r3, #0]
 8005d88:	68fb      	ldr	r3, [r7, #12]
 8005d8a:	681b      	ldr	r3, [r3, #0]
 8005d8c:	681a      	ldr	r2, [r3, #0]
 8005d8e:	68fb      	ldr	r3, [r7, #12]
 8005d90:	681b      	ldr	r3, [r3, #0]
 8005d92:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8005d96:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8005d98:	68fb      	ldr	r3, [r7, #12]
 8005d9a:	2201      	movs	r2, #1
 8005d9c:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8005da0:	68fb      	ldr	r3, [r7, #12]
 8005da2:	2200      	movs	r2, #0
 8005da4:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 8005da8:	2303      	movs	r3, #3
 8005daa:	e00f      	b.n	8005dcc <SPI_WaitFlagStateUntilTimeout+0xcc>
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8005dac:	68fb      	ldr	r3, [r7, #12]
 8005dae:	681b      	ldr	r3, [r3, #0]
 8005db0:	689a      	ldr	r2, [r3, #8]
 8005db2:	68bb      	ldr	r3, [r7, #8]
 8005db4:	4013      	ands	r3, r2
 8005db6:	68ba      	ldr	r2, [r7, #8]
 8005db8:	429a      	cmp	r2, r3
 8005dba:	bf0c      	ite	eq
 8005dbc:	2301      	moveq	r3, #1
 8005dbe:	2300      	movne	r3, #0
 8005dc0:	b2db      	uxtb	r3, r3
 8005dc2:	461a      	mov	r2, r3
 8005dc4:	79fb      	ldrb	r3, [r7, #7]
 8005dc6:	429a      	cmp	r2, r3
 8005dc8:	d1a3      	bne.n	8005d12 <SPI_WaitFlagStateUntilTimeout+0x12>
      }
    }
  }

  return HAL_OK;
 8005dca:	2300      	movs	r3, #0
}
 8005dcc:	4618      	mov	r0, r3
 8005dce:	3710      	adds	r7, #16
 8005dd0:	46bd      	mov	sp, r7
 8005dd2:	bd80      	pop	{r7, pc}

08005dd4 <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8005dd4:	b580      	push	{r7, lr}
 8005dd6:	b084      	sub	sp, #16
 8005dd8:	af00      	add	r7, sp, #0
 8005dda:	60f8      	str	r0, [r7, #12]
 8005ddc:	60b9      	str	r1, [r7, #8]
 8005dde:	607a      	str	r2, [r7, #4]
 8005de0:	603b      	str	r3, [r7, #0]
  while ((hspi->Instance->SR & Fifo) != State)
 8005de2:	e057      	b.n	8005e94 <SPI_WaitFifoStateUntilTimeout+0xc0>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 8005de4:	68bb      	ldr	r3, [r7, #8]
 8005de6:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 8005dea:	d106      	bne.n	8005dfa <SPI_WaitFifoStateUntilTimeout+0x26>
 8005dec:	687b      	ldr	r3, [r7, #4]
 8005dee:	2b00      	cmp	r3, #0
 8005df0:	d103      	bne.n	8005dfa <SPI_WaitFifoStateUntilTimeout+0x26>
    {
      /* Read 8bit CRC to flush Data Register */
      READ_REG(*((__IO uint8_t *)&hspi->Instance->DR));
 8005df2:	68fb      	ldr	r3, [r7, #12]
 8005df4:	681b      	ldr	r3, [r3, #0]
 8005df6:	330c      	adds	r3, #12
 8005df8:	781b      	ldrb	r3, [r3, #0]
    }

    if (Timeout != HAL_MAX_DELAY)
 8005dfa:	683b      	ldr	r3, [r7, #0]
 8005dfc:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8005e00:	d048      	beq.n	8005e94 <SPI_WaitFifoStateUntilTimeout+0xc0>
    {
      if (((HAL_GetTick() - Tickstart) >= Timeout) || (Timeout == 0U))
 8005e02:	f7fc f939 	bl	8002078 <HAL_GetTick>
 8005e06:	4602      	mov	r2, r0
 8005e08:	69bb      	ldr	r3, [r7, #24]
 8005e0a:	1ad3      	subs	r3, r2, r3
 8005e0c:	683a      	ldr	r2, [r7, #0]
 8005e0e:	429a      	cmp	r2, r3
 8005e10:	d902      	bls.n	8005e18 <SPI_WaitFifoStateUntilTimeout+0x44>
 8005e12:	683b      	ldr	r3, [r7, #0]
 8005e14:	2b00      	cmp	r3, #0
 8005e16:	d13d      	bne.n	8005e94 <SPI_WaitFifoStateUntilTimeout+0xc0>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8005e18:	68fb      	ldr	r3, [r7, #12]
 8005e1a:	681b      	ldr	r3, [r3, #0]
 8005e1c:	685a      	ldr	r2, [r3, #4]
 8005e1e:	68fb      	ldr	r3, [r7, #12]
 8005e20:	681b      	ldr	r3, [r3, #0]
 8005e22:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8005e26:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005e28:	68fb      	ldr	r3, [r7, #12]
 8005e2a:	685b      	ldr	r3, [r3, #4]
 8005e2c:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8005e30:	d111      	bne.n	8005e56 <SPI_WaitFifoStateUntilTimeout+0x82>
 8005e32:	68fb      	ldr	r3, [r7, #12]
 8005e34:	689b      	ldr	r3, [r3, #8]
 8005e36:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005e3a:	d004      	beq.n	8005e46 <SPI_WaitFifoStateUntilTimeout+0x72>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8005e3c:	68fb      	ldr	r3, [r7, #12]
 8005e3e:	689b      	ldr	r3, [r3, #8]
 8005e40:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005e44:	d107      	bne.n	8005e56 <SPI_WaitFifoStateUntilTimeout+0x82>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8005e46:	68fb      	ldr	r3, [r7, #12]
 8005e48:	681b      	ldr	r3, [r3, #0]
 8005e4a:	681a      	ldr	r2, [r3, #0]
 8005e4c:	68fb      	ldr	r3, [r7, #12]
 8005e4e:	681b      	ldr	r3, [r3, #0]
 8005e50:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005e54:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8005e56:	68fb      	ldr	r3, [r7, #12]
 8005e58:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005e5a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005e5e:	d10f      	bne.n	8005e80 <SPI_WaitFifoStateUntilTimeout+0xac>
        {
          SPI_RESET_CRC(hspi);
 8005e60:	68fb      	ldr	r3, [r7, #12]
 8005e62:	681b      	ldr	r3, [r3, #0]
 8005e64:	681a      	ldr	r2, [r3, #0]
 8005e66:	68fb      	ldr	r3, [r7, #12]
 8005e68:	681b      	ldr	r3, [r3, #0]
 8005e6a:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8005e6e:	601a      	str	r2, [r3, #0]
 8005e70:	68fb      	ldr	r3, [r7, #12]
 8005e72:	681b      	ldr	r3, [r3, #0]
 8005e74:	681a      	ldr	r2, [r3, #0]
 8005e76:	68fb      	ldr	r3, [r7, #12]
 8005e78:	681b      	ldr	r3, [r3, #0]
 8005e7a:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8005e7e:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8005e80:	68fb      	ldr	r3, [r7, #12]
 8005e82:	2201      	movs	r2, #1
 8005e84:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8005e88:	68fb      	ldr	r3, [r7, #12]
 8005e8a:	2200      	movs	r2, #0
 8005e8c:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 8005e90:	2303      	movs	r3, #3
 8005e92:	e008      	b.n	8005ea6 <SPI_WaitFifoStateUntilTimeout+0xd2>
  while ((hspi->Instance->SR & Fifo) != State)
 8005e94:	68fb      	ldr	r3, [r7, #12]
 8005e96:	681b      	ldr	r3, [r3, #0]
 8005e98:	689a      	ldr	r2, [r3, #8]
 8005e9a:	68bb      	ldr	r3, [r7, #8]
 8005e9c:	4013      	ands	r3, r2
 8005e9e:	687a      	ldr	r2, [r7, #4]
 8005ea0:	429a      	cmp	r2, r3
 8005ea2:	d19f      	bne.n	8005de4 <SPI_WaitFifoStateUntilTimeout+0x10>
      }
    }
  }

  return HAL_OK;
 8005ea4:	2300      	movs	r3, #0
}
 8005ea6:	4618      	mov	r0, r3
 8005ea8:	3710      	adds	r7, #16
 8005eaa:	46bd      	mov	sp, r7
 8005eac:	bd80      	pop	{r7, pc}

08005eae <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8005eae:	b580      	push	{r7, lr}
 8005eb0:	b086      	sub	sp, #24
 8005eb2:	af02      	add	r7, sp, #8
 8005eb4:	60f8      	str	r0, [r7, #12]
 8005eb6:	60b9      	str	r1, [r7, #8]
 8005eb8:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8005eba:	687b      	ldr	r3, [r7, #4]
 8005ebc:	9300      	str	r3, [sp, #0]
 8005ebe:	68bb      	ldr	r3, [r7, #8]
 8005ec0:	2200      	movs	r2, #0
 8005ec2:	f44f 51c0 	mov.w	r1, #6144	; 0x1800
 8005ec6:	68f8      	ldr	r0, [r7, #12]
 8005ec8:	f7ff ff84 	bl	8005dd4 <SPI_WaitFifoStateUntilTimeout>
 8005ecc:	4603      	mov	r3, r0
 8005ece:	2b00      	cmp	r3, #0
 8005ed0:	d007      	beq.n	8005ee2 <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005ed2:	68fb      	ldr	r3, [r7, #12]
 8005ed4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005ed6:	f043 0220 	orr.w	r2, r3, #32
 8005eda:	68fb      	ldr	r3, [r7, #12]
 8005edc:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8005ede:	2303      	movs	r3, #3
 8005ee0:	e027      	b.n	8005f32 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8005ee2:	687b      	ldr	r3, [r7, #4]
 8005ee4:	9300      	str	r3, [sp, #0]
 8005ee6:	68bb      	ldr	r3, [r7, #8]
 8005ee8:	2200      	movs	r2, #0
 8005eea:	2180      	movs	r1, #128	; 0x80
 8005eec:	68f8      	ldr	r0, [r7, #12]
 8005eee:	f7ff ff07 	bl	8005d00 <SPI_WaitFlagStateUntilTimeout>
 8005ef2:	4603      	mov	r3, r0
 8005ef4:	2b00      	cmp	r3, #0
 8005ef6:	d007      	beq.n	8005f08 <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005ef8:	68fb      	ldr	r3, [r7, #12]
 8005efa:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005efc:	f043 0220 	orr.w	r2, r3, #32
 8005f00:	68fb      	ldr	r3, [r7, #12]
 8005f02:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8005f04:	2303      	movs	r3, #3
 8005f06:	e014      	b.n	8005f32 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8005f08:	687b      	ldr	r3, [r7, #4]
 8005f0a:	9300      	str	r3, [sp, #0]
 8005f0c:	68bb      	ldr	r3, [r7, #8]
 8005f0e:	2200      	movs	r2, #0
 8005f10:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 8005f14:	68f8      	ldr	r0, [r7, #12]
 8005f16:	f7ff ff5d 	bl	8005dd4 <SPI_WaitFifoStateUntilTimeout>
 8005f1a:	4603      	mov	r3, r0
 8005f1c:	2b00      	cmp	r3, #0
 8005f1e:	d007      	beq.n	8005f30 <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005f20:	68fb      	ldr	r3, [r7, #12]
 8005f22:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005f24:	f043 0220 	orr.w	r2, r3, #32
 8005f28:	68fb      	ldr	r3, [r7, #12]
 8005f2a:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8005f2c:	2303      	movs	r3, #3
 8005f2e:	e000      	b.n	8005f32 <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 8005f30:	2300      	movs	r3, #0
}
 8005f32:	4618      	mov	r0, r3
 8005f34:	3710      	adds	r7, #16
 8005f36:	46bd      	mov	sp, r7
 8005f38:	bd80      	pop	{r7, pc}

08005f3a <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8005f3a:	b580      	push	{r7, lr}
 8005f3c:	b082      	sub	sp, #8
 8005f3e:	af00      	add	r7, sp, #0
 8005f40:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005f42:	687b      	ldr	r3, [r7, #4]
 8005f44:	2b00      	cmp	r3, #0
 8005f46:	d101      	bne.n	8005f4c <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8005f48:	2301      	movs	r3, #1
 8005f4a:	e049      	b.n	8005fe0 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005f4c:	687b      	ldr	r3, [r7, #4]
 8005f4e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005f52:	b2db      	uxtb	r3, r3
 8005f54:	2b00      	cmp	r3, #0
 8005f56:	d106      	bne.n	8005f66 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005f58:	687b      	ldr	r3, [r7, #4]
 8005f5a:	2200      	movs	r2, #0
 8005f5c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8005f60:	6878      	ldr	r0, [r7, #4]
 8005f62:	f7fb ff4b 	bl	8001dfc <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005f66:	687b      	ldr	r3, [r7, #4]
 8005f68:	2202      	movs	r2, #2
 8005f6a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005f6e:	687b      	ldr	r3, [r7, #4]
 8005f70:	681a      	ldr	r2, [r3, #0]
 8005f72:	687b      	ldr	r3, [r7, #4]
 8005f74:	3304      	adds	r3, #4
 8005f76:	4619      	mov	r1, r3
 8005f78:	4610      	mov	r0, r2
 8005f7a:	f000 fc23 	bl	80067c4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005f7e:	687b      	ldr	r3, [r7, #4]
 8005f80:	2201      	movs	r2, #1
 8005f82:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005f86:	687b      	ldr	r3, [r7, #4]
 8005f88:	2201      	movs	r2, #1
 8005f8a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005f8e:	687b      	ldr	r3, [r7, #4]
 8005f90:	2201      	movs	r2, #1
 8005f92:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005f96:	687b      	ldr	r3, [r7, #4]
 8005f98:	2201      	movs	r2, #1
 8005f9a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005f9e:	687b      	ldr	r3, [r7, #4]
 8005fa0:	2201      	movs	r2, #1
 8005fa2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8005fa6:	687b      	ldr	r3, [r7, #4]
 8005fa8:	2201      	movs	r2, #1
 8005faa:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8005fae:	687b      	ldr	r3, [r7, #4]
 8005fb0:	2201      	movs	r2, #1
 8005fb2:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005fb6:	687b      	ldr	r3, [r7, #4]
 8005fb8:	2201      	movs	r2, #1
 8005fba:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005fbe:	687b      	ldr	r3, [r7, #4]
 8005fc0:	2201      	movs	r2, #1
 8005fc2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8005fc6:	687b      	ldr	r3, [r7, #4]
 8005fc8:	2201      	movs	r2, #1
 8005fca:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8005fce:	687b      	ldr	r3, [r7, #4]
 8005fd0:	2201      	movs	r2, #1
 8005fd2:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005fd6:	687b      	ldr	r3, [r7, #4]
 8005fd8:	2201      	movs	r2, #1
 8005fda:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8005fde:	2300      	movs	r3, #0
}
 8005fe0:	4618      	mov	r0, r3
 8005fe2:	3708      	adds	r7, #8
 8005fe4:	46bd      	mov	sp, r7
 8005fe6:	bd80      	pop	{r7, pc}

08005fe8 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8005fe8:	b480      	push	{r7}
 8005fea:	b085      	sub	sp, #20
 8005fec:	af00      	add	r7, sp, #0
 8005fee:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8005ff0:	687b      	ldr	r3, [r7, #4]
 8005ff2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005ff6:	b2db      	uxtb	r3, r3
 8005ff8:	2b01      	cmp	r3, #1
 8005ffa:	d001      	beq.n	8006000 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8005ffc:	2301      	movs	r3, #1
 8005ffe:	e019      	b.n	8006034 <HAL_TIM_Base_Start+0x4c>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006000:	687b      	ldr	r3, [r7, #4]
 8006002:	2202      	movs	r2, #2
 8006004:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8006008:	687b      	ldr	r3, [r7, #4]
 800600a:	681b      	ldr	r3, [r3, #0]
 800600c:	689a      	ldr	r2, [r3, #8]
 800600e:	4b0c      	ldr	r3, [pc, #48]	; (8006040 <HAL_TIM_Base_Start+0x58>)
 8006010:	4013      	ands	r3, r2
 8006012:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006014:	68fb      	ldr	r3, [r7, #12]
 8006016:	2b06      	cmp	r3, #6
 8006018:	d00b      	beq.n	8006032 <HAL_TIM_Base_Start+0x4a>
 800601a:	68fb      	ldr	r3, [r7, #12]
 800601c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006020:	d007      	beq.n	8006032 <HAL_TIM_Base_Start+0x4a>
  {
    __HAL_TIM_ENABLE(htim);
 8006022:	687b      	ldr	r3, [r7, #4]
 8006024:	681b      	ldr	r3, [r3, #0]
 8006026:	681a      	ldr	r2, [r3, #0]
 8006028:	687b      	ldr	r3, [r7, #4]
 800602a:	681b      	ldr	r3, [r3, #0]
 800602c:	f042 0201 	orr.w	r2, r2, #1
 8006030:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8006032:	2300      	movs	r3, #0
}
 8006034:	4618      	mov	r0, r3
 8006036:	3714      	adds	r7, #20
 8006038:	46bd      	mov	sp, r7
 800603a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800603e:	4770      	bx	lr
 8006040:	00010007 	.word	0x00010007

08006044 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8006044:	b480      	push	{r7}
 8006046:	b085      	sub	sp, #20
 8006048:	af00      	add	r7, sp, #0
 800604a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800604c:	687b      	ldr	r3, [r7, #4]
 800604e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006052:	b2db      	uxtb	r3, r3
 8006054:	2b01      	cmp	r3, #1
 8006056:	d001      	beq.n	800605c <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8006058:	2301      	movs	r3, #1
 800605a:	e021      	b.n	80060a0 <HAL_TIM_Base_Start_IT+0x5c>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800605c:	687b      	ldr	r3, [r7, #4]
 800605e:	2202      	movs	r2, #2
 8006060:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8006064:	687b      	ldr	r3, [r7, #4]
 8006066:	681b      	ldr	r3, [r3, #0]
 8006068:	68da      	ldr	r2, [r3, #12]
 800606a:	687b      	ldr	r3, [r7, #4]
 800606c:	681b      	ldr	r3, [r3, #0]
 800606e:	f042 0201 	orr.w	r2, r2, #1
 8006072:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8006074:	687b      	ldr	r3, [r7, #4]
 8006076:	681b      	ldr	r3, [r3, #0]
 8006078:	689a      	ldr	r2, [r3, #8]
 800607a:	4b0c      	ldr	r3, [pc, #48]	; (80060ac <HAL_TIM_Base_Start_IT+0x68>)
 800607c:	4013      	ands	r3, r2
 800607e:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006080:	68fb      	ldr	r3, [r7, #12]
 8006082:	2b06      	cmp	r3, #6
 8006084:	d00b      	beq.n	800609e <HAL_TIM_Base_Start_IT+0x5a>
 8006086:	68fb      	ldr	r3, [r7, #12]
 8006088:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800608c:	d007      	beq.n	800609e <HAL_TIM_Base_Start_IT+0x5a>
  {
    __HAL_TIM_ENABLE(htim);
 800608e:	687b      	ldr	r3, [r7, #4]
 8006090:	681b      	ldr	r3, [r3, #0]
 8006092:	681a      	ldr	r2, [r3, #0]
 8006094:	687b      	ldr	r3, [r7, #4]
 8006096:	681b      	ldr	r3, [r3, #0]
 8006098:	f042 0201 	orr.w	r2, r2, #1
 800609c:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800609e:	2300      	movs	r3, #0
}
 80060a0:	4618      	mov	r0, r3
 80060a2:	3714      	adds	r7, #20
 80060a4:	46bd      	mov	sp, r7
 80060a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060aa:	4770      	bx	lr
 80060ac:	00010007 	.word	0x00010007

080060b0 <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim,  TIM_Encoder_InitTypeDef *sConfig)
{
 80060b0:	b580      	push	{r7, lr}
 80060b2:	b086      	sub	sp, #24
 80060b4:	af00      	add	r7, sp, #0
 80060b6:	6078      	str	r0, [r7, #4]
 80060b8:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 80060ba:	687b      	ldr	r3, [r7, #4]
 80060bc:	2b00      	cmp	r3, #0
 80060be:	d101      	bne.n	80060c4 <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 80060c0:	2301      	movs	r3, #1
 80060c2:	e097      	b.n	80061f4 <HAL_TIM_Encoder_Init+0x144>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC1Prescaler));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));

  if (htim->State == HAL_TIM_STATE_RESET)
 80060c4:	687b      	ldr	r3, [r7, #4]
 80060c6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80060ca:	b2db      	uxtb	r3, r3
 80060cc:	2b00      	cmp	r3, #0
 80060ce:	d106      	bne.n	80060de <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80060d0:	687b      	ldr	r3, [r7, #4]
 80060d2:	2200      	movs	r2, #0
 80060d4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 80060d8:	6878      	ldr	r0, [r7, #4]
 80060da:	f7fb fe33 	bl	8001d44 <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80060de:	687b      	ldr	r3, [r7, #4]
 80060e0:	2202      	movs	r2, #2
 80060e2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 80060e6:	687b      	ldr	r3, [r7, #4]
 80060e8:	681b      	ldr	r3, [r3, #0]
 80060ea:	689b      	ldr	r3, [r3, #8]
 80060ec:	687a      	ldr	r2, [r7, #4]
 80060ee:	6812      	ldr	r2, [r2, #0]
 80060f0:	f423 33a0 	bic.w	r3, r3, #81920	; 0x14000
 80060f4:	f023 0307 	bic.w	r3, r3, #7
 80060f8:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80060fa:	687b      	ldr	r3, [r7, #4]
 80060fc:	681a      	ldr	r2, [r3, #0]
 80060fe:	687b      	ldr	r3, [r7, #4]
 8006100:	3304      	adds	r3, #4
 8006102:	4619      	mov	r1, r3
 8006104:	4610      	mov	r0, r2
 8006106:	f000 fb5d 	bl	80067c4 <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800610a:	687b      	ldr	r3, [r7, #4]
 800610c:	681b      	ldr	r3, [r3, #0]
 800610e:	689b      	ldr	r3, [r3, #8]
 8006110:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 8006112:	687b      	ldr	r3, [r7, #4]
 8006114:	681b      	ldr	r3, [r3, #0]
 8006116:	699b      	ldr	r3, [r3, #24]
 8006118:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 800611a:	687b      	ldr	r3, [r7, #4]
 800611c:	681b      	ldr	r3, [r3, #0]
 800611e:	6a1b      	ldr	r3, [r3, #32]
 8006120:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 8006122:	683b      	ldr	r3, [r7, #0]
 8006124:	681b      	ldr	r3, [r3, #0]
 8006126:	697a      	ldr	r2, [r7, #20]
 8006128:	4313      	orrs	r3, r2
 800612a:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 800612c:	693b      	ldr	r3, [r7, #16]
 800612e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006132:	f023 0303 	bic.w	r3, r3, #3
 8006136:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 8006138:	683b      	ldr	r3, [r7, #0]
 800613a:	689a      	ldr	r2, [r3, #8]
 800613c:	683b      	ldr	r3, [r7, #0]
 800613e:	699b      	ldr	r3, [r3, #24]
 8006140:	021b      	lsls	r3, r3, #8
 8006142:	4313      	orrs	r3, r2
 8006144:	693a      	ldr	r2, [r7, #16]
 8006146:	4313      	orrs	r3, r2
 8006148:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 800614a:	693b      	ldr	r3, [r7, #16]
 800614c:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 8006150:	f023 030c 	bic.w	r3, r3, #12
 8006154:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 8006156:	693b      	ldr	r3, [r7, #16]
 8006158:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800615c:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8006160:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 8006162:	683b      	ldr	r3, [r7, #0]
 8006164:	68da      	ldr	r2, [r3, #12]
 8006166:	683b      	ldr	r3, [r7, #0]
 8006168:	69db      	ldr	r3, [r3, #28]
 800616a:	021b      	lsls	r3, r3, #8
 800616c:	4313      	orrs	r3, r2
 800616e:	693a      	ldr	r2, [r7, #16]
 8006170:	4313      	orrs	r3, r2
 8006172:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 8006174:	683b      	ldr	r3, [r7, #0]
 8006176:	691b      	ldr	r3, [r3, #16]
 8006178:	011a      	lsls	r2, r3, #4
 800617a:	683b      	ldr	r3, [r7, #0]
 800617c:	6a1b      	ldr	r3, [r3, #32]
 800617e:	031b      	lsls	r3, r3, #12
 8006180:	4313      	orrs	r3, r2
 8006182:	693a      	ldr	r2, [r7, #16]
 8006184:	4313      	orrs	r3, r2
 8006186:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 8006188:	68fb      	ldr	r3, [r7, #12]
 800618a:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 800618e:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 8006190:	68fb      	ldr	r3, [r7, #12]
 8006192:	f023 0388 	bic.w	r3, r3, #136	; 0x88
 8006196:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 8006198:	683b      	ldr	r3, [r7, #0]
 800619a:	685a      	ldr	r2, [r3, #4]
 800619c:	683b      	ldr	r3, [r7, #0]
 800619e:	695b      	ldr	r3, [r3, #20]
 80061a0:	011b      	lsls	r3, r3, #4
 80061a2:	4313      	orrs	r3, r2
 80061a4:	68fa      	ldr	r2, [r7, #12]
 80061a6:	4313      	orrs	r3, r2
 80061a8:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 80061aa:	687b      	ldr	r3, [r7, #4]
 80061ac:	681b      	ldr	r3, [r3, #0]
 80061ae:	697a      	ldr	r2, [r7, #20]
 80061b0:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 80061b2:	687b      	ldr	r3, [r7, #4]
 80061b4:	681b      	ldr	r3, [r3, #0]
 80061b6:	693a      	ldr	r2, [r7, #16]
 80061b8:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 80061ba:	687b      	ldr	r3, [r7, #4]
 80061bc:	681b      	ldr	r3, [r3, #0]
 80061be:	68fa      	ldr	r2, [r7, #12]
 80061c0:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80061c2:	687b      	ldr	r3, [r7, #4]
 80061c4:	2201      	movs	r2, #1
 80061c6:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 80061ca:	687b      	ldr	r3, [r7, #4]
 80061cc:	2201      	movs	r2, #1
 80061ce:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 80061d2:	687b      	ldr	r3, [r7, #4]
 80061d4:	2201      	movs	r2, #1
 80061d6:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 80061da:	687b      	ldr	r3, [r7, #4]
 80061dc:	2201      	movs	r2, #1
 80061de:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 80061e2:	687b      	ldr	r3, [r7, #4]
 80061e4:	2201      	movs	r2, #1
 80061e6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80061ea:	687b      	ldr	r3, [r7, #4]
 80061ec:	2201      	movs	r2, #1
 80061ee:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80061f2:	2300      	movs	r3, #0
}
 80061f4:	4618      	mov	r0, r3
 80061f6:	3718      	adds	r7, #24
 80061f8:	46bd      	mov	sp, r7
 80061fa:	bd80      	pop	{r7, pc}

080061fc <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80061fc:	b580      	push	{r7, lr}
 80061fe:	b082      	sub	sp, #8
 8006200:	af00      	add	r7, sp, #0
 8006202:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8006204:	687b      	ldr	r3, [r7, #4]
 8006206:	681b      	ldr	r3, [r3, #0]
 8006208:	691b      	ldr	r3, [r3, #16]
 800620a:	f003 0302 	and.w	r3, r3, #2
 800620e:	2b02      	cmp	r3, #2
 8006210:	d122      	bne.n	8006258 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8006212:	687b      	ldr	r3, [r7, #4]
 8006214:	681b      	ldr	r3, [r3, #0]
 8006216:	68db      	ldr	r3, [r3, #12]
 8006218:	f003 0302 	and.w	r3, r3, #2
 800621c:	2b02      	cmp	r3, #2
 800621e:	d11b      	bne.n	8006258 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8006220:	687b      	ldr	r3, [r7, #4]
 8006222:	681b      	ldr	r3, [r3, #0]
 8006224:	f06f 0202 	mvn.w	r2, #2
 8006228:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800622a:	687b      	ldr	r3, [r7, #4]
 800622c:	2201      	movs	r2, #1
 800622e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8006230:	687b      	ldr	r3, [r7, #4]
 8006232:	681b      	ldr	r3, [r3, #0]
 8006234:	699b      	ldr	r3, [r3, #24]
 8006236:	f003 0303 	and.w	r3, r3, #3
 800623a:	2b00      	cmp	r3, #0
 800623c:	d003      	beq.n	8006246 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800623e:	6878      	ldr	r0, [r7, #4]
 8006240:	f000 faa2 	bl	8006788 <HAL_TIM_IC_CaptureCallback>
 8006244:	e005      	b.n	8006252 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8006246:	6878      	ldr	r0, [r7, #4]
 8006248:	f000 fa94 	bl	8006774 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800624c:	6878      	ldr	r0, [r7, #4]
 800624e:	f000 faa5 	bl	800679c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006252:	687b      	ldr	r3, [r7, #4]
 8006254:	2200      	movs	r2, #0
 8006256:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8006258:	687b      	ldr	r3, [r7, #4]
 800625a:	681b      	ldr	r3, [r3, #0]
 800625c:	691b      	ldr	r3, [r3, #16]
 800625e:	f003 0304 	and.w	r3, r3, #4
 8006262:	2b04      	cmp	r3, #4
 8006264:	d122      	bne.n	80062ac <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8006266:	687b      	ldr	r3, [r7, #4]
 8006268:	681b      	ldr	r3, [r3, #0]
 800626a:	68db      	ldr	r3, [r3, #12]
 800626c:	f003 0304 	and.w	r3, r3, #4
 8006270:	2b04      	cmp	r3, #4
 8006272:	d11b      	bne.n	80062ac <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8006274:	687b      	ldr	r3, [r7, #4]
 8006276:	681b      	ldr	r3, [r3, #0]
 8006278:	f06f 0204 	mvn.w	r2, #4
 800627c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800627e:	687b      	ldr	r3, [r7, #4]
 8006280:	2202      	movs	r2, #2
 8006282:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8006284:	687b      	ldr	r3, [r7, #4]
 8006286:	681b      	ldr	r3, [r3, #0]
 8006288:	699b      	ldr	r3, [r3, #24]
 800628a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800628e:	2b00      	cmp	r3, #0
 8006290:	d003      	beq.n	800629a <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006292:	6878      	ldr	r0, [r7, #4]
 8006294:	f000 fa78 	bl	8006788 <HAL_TIM_IC_CaptureCallback>
 8006298:	e005      	b.n	80062a6 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800629a:	6878      	ldr	r0, [r7, #4]
 800629c:	f000 fa6a 	bl	8006774 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80062a0:	6878      	ldr	r0, [r7, #4]
 80062a2:	f000 fa7b 	bl	800679c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80062a6:	687b      	ldr	r3, [r7, #4]
 80062a8:	2200      	movs	r2, #0
 80062aa:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80062ac:	687b      	ldr	r3, [r7, #4]
 80062ae:	681b      	ldr	r3, [r3, #0]
 80062b0:	691b      	ldr	r3, [r3, #16]
 80062b2:	f003 0308 	and.w	r3, r3, #8
 80062b6:	2b08      	cmp	r3, #8
 80062b8:	d122      	bne.n	8006300 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80062ba:	687b      	ldr	r3, [r7, #4]
 80062bc:	681b      	ldr	r3, [r3, #0]
 80062be:	68db      	ldr	r3, [r3, #12]
 80062c0:	f003 0308 	and.w	r3, r3, #8
 80062c4:	2b08      	cmp	r3, #8
 80062c6:	d11b      	bne.n	8006300 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80062c8:	687b      	ldr	r3, [r7, #4]
 80062ca:	681b      	ldr	r3, [r3, #0]
 80062cc:	f06f 0208 	mvn.w	r2, #8
 80062d0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80062d2:	687b      	ldr	r3, [r7, #4]
 80062d4:	2204      	movs	r2, #4
 80062d6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80062d8:	687b      	ldr	r3, [r7, #4]
 80062da:	681b      	ldr	r3, [r3, #0]
 80062dc:	69db      	ldr	r3, [r3, #28]
 80062de:	f003 0303 	and.w	r3, r3, #3
 80062e2:	2b00      	cmp	r3, #0
 80062e4:	d003      	beq.n	80062ee <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80062e6:	6878      	ldr	r0, [r7, #4]
 80062e8:	f000 fa4e 	bl	8006788 <HAL_TIM_IC_CaptureCallback>
 80062ec:	e005      	b.n	80062fa <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80062ee:	6878      	ldr	r0, [r7, #4]
 80062f0:	f000 fa40 	bl	8006774 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80062f4:	6878      	ldr	r0, [r7, #4]
 80062f6:	f000 fa51 	bl	800679c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80062fa:	687b      	ldr	r3, [r7, #4]
 80062fc:	2200      	movs	r2, #0
 80062fe:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8006300:	687b      	ldr	r3, [r7, #4]
 8006302:	681b      	ldr	r3, [r3, #0]
 8006304:	691b      	ldr	r3, [r3, #16]
 8006306:	f003 0310 	and.w	r3, r3, #16
 800630a:	2b10      	cmp	r3, #16
 800630c:	d122      	bne.n	8006354 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800630e:	687b      	ldr	r3, [r7, #4]
 8006310:	681b      	ldr	r3, [r3, #0]
 8006312:	68db      	ldr	r3, [r3, #12]
 8006314:	f003 0310 	and.w	r3, r3, #16
 8006318:	2b10      	cmp	r3, #16
 800631a:	d11b      	bne.n	8006354 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800631c:	687b      	ldr	r3, [r7, #4]
 800631e:	681b      	ldr	r3, [r3, #0]
 8006320:	f06f 0210 	mvn.w	r2, #16
 8006324:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8006326:	687b      	ldr	r3, [r7, #4]
 8006328:	2208      	movs	r2, #8
 800632a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800632c:	687b      	ldr	r3, [r7, #4]
 800632e:	681b      	ldr	r3, [r3, #0]
 8006330:	69db      	ldr	r3, [r3, #28]
 8006332:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006336:	2b00      	cmp	r3, #0
 8006338:	d003      	beq.n	8006342 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800633a:	6878      	ldr	r0, [r7, #4]
 800633c:	f000 fa24 	bl	8006788 <HAL_TIM_IC_CaptureCallback>
 8006340:	e005      	b.n	800634e <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006342:	6878      	ldr	r0, [r7, #4]
 8006344:	f000 fa16 	bl	8006774 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006348:	6878      	ldr	r0, [r7, #4]
 800634a:	f000 fa27 	bl	800679c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800634e:	687b      	ldr	r3, [r7, #4]
 8006350:	2200      	movs	r2, #0
 8006352:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8006354:	687b      	ldr	r3, [r7, #4]
 8006356:	681b      	ldr	r3, [r3, #0]
 8006358:	691b      	ldr	r3, [r3, #16]
 800635a:	f003 0301 	and.w	r3, r3, #1
 800635e:	2b01      	cmp	r3, #1
 8006360:	d10e      	bne.n	8006380 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8006362:	687b      	ldr	r3, [r7, #4]
 8006364:	681b      	ldr	r3, [r3, #0]
 8006366:	68db      	ldr	r3, [r3, #12]
 8006368:	f003 0301 	and.w	r3, r3, #1
 800636c:	2b01      	cmp	r3, #1
 800636e:	d107      	bne.n	8006380 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8006370:	687b      	ldr	r3, [r7, #4]
 8006372:	681b      	ldr	r3, [r3, #0]
 8006374:	f06f 0201 	mvn.w	r2, #1
 8006378:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800637a:	6878      	ldr	r0, [r7, #4]
 800637c:	f000 f9f0 	bl	8006760 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8006380:	687b      	ldr	r3, [r7, #4]
 8006382:	681b      	ldr	r3, [r3, #0]
 8006384:	691b      	ldr	r3, [r3, #16]
 8006386:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800638a:	2b80      	cmp	r3, #128	; 0x80
 800638c:	d10e      	bne.n	80063ac <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800638e:	687b      	ldr	r3, [r7, #4]
 8006390:	681b      	ldr	r3, [r3, #0]
 8006392:	68db      	ldr	r3, [r3, #12]
 8006394:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006398:	2b80      	cmp	r3, #128	; 0x80
 800639a:	d107      	bne.n	80063ac <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800639c:	687b      	ldr	r3, [r7, #4]
 800639e:	681b      	ldr	r3, [r3, #0]
 80063a0:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80063a4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80063a6:	6878      	ldr	r0, [r7, #4]
 80063a8:	f000 fd5e 	bl	8006e68 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 80063ac:	687b      	ldr	r3, [r7, #4]
 80063ae:	681b      	ldr	r3, [r3, #0]
 80063b0:	691b      	ldr	r3, [r3, #16]
 80063b2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80063b6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80063ba:	d10e      	bne.n	80063da <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80063bc:	687b      	ldr	r3, [r7, #4]
 80063be:	681b      	ldr	r3, [r3, #0]
 80063c0:	68db      	ldr	r3, [r3, #12]
 80063c2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80063c6:	2b80      	cmp	r3, #128	; 0x80
 80063c8:	d107      	bne.n	80063da <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 80063ca:	687b      	ldr	r3, [r7, #4]
 80063cc:	681b      	ldr	r3, [r3, #0]
 80063ce:	f46f 7280 	mvn.w	r2, #256	; 0x100
 80063d2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 80063d4:	6878      	ldr	r0, [r7, #4]
 80063d6:	f000 fd51 	bl	8006e7c <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80063da:	687b      	ldr	r3, [r7, #4]
 80063dc:	681b      	ldr	r3, [r3, #0]
 80063de:	691b      	ldr	r3, [r3, #16]
 80063e0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80063e4:	2b40      	cmp	r3, #64	; 0x40
 80063e6:	d10e      	bne.n	8006406 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80063e8:	687b      	ldr	r3, [r7, #4]
 80063ea:	681b      	ldr	r3, [r3, #0]
 80063ec:	68db      	ldr	r3, [r3, #12]
 80063ee:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80063f2:	2b40      	cmp	r3, #64	; 0x40
 80063f4:	d107      	bne.n	8006406 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80063f6:	687b      	ldr	r3, [r7, #4]
 80063f8:	681b      	ldr	r3, [r3, #0]
 80063fa:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80063fe:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8006400:	6878      	ldr	r0, [r7, #4]
 8006402:	f000 f9d5 	bl	80067b0 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8006406:	687b      	ldr	r3, [r7, #4]
 8006408:	681b      	ldr	r3, [r3, #0]
 800640a:	691b      	ldr	r3, [r3, #16]
 800640c:	f003 0320 	and.w	r3, r3, #32
 8006410:	2b20      	cmp	r3, #32
 8006412:	d10e      	bne.n	8006432 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8006414:	687b      	ldr	r3, [r7, #4]
 8006416:	681b      	ldr	r3, [r3, #0]
 8006418:	68db      	ldr	r3, [r3, #12]
 800641a:	f003 0320 	and.w	r3, r3, #32
 800641e:	2b20      	cmp	r3, #32
 8006420:	d107      	bne.n	8006432 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8006422:	687b      	ldr	r3, [r7, #4]
 8006424:	681b      	ldr	r3, [r3, #0]
 8006426:	f06f 0220 	mvn.w	r2, #32
 800642a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800642c:	6878      	ldr	r0, [r7, #4]
 800642e:	f000 fd11 	bl	8006e54 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Encoder index event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_IDX) != RESET)
 8006432:	687b      	ldr	r3, [r7, #4]
 8006434:	681b      	ldr	r3, [r3, #0]
 8006436:	691b      	ldr	r3, [r3, #16]
 8006438:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800643c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8006440:	d10f      	bne.n	8006462 <HAL_TIM_IRQHandler+0x266>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_IDX) != RESET)
 8006442:	687b      	ldr	r3, [r7, #4]
 8006444:	681b      	ldr	r3, [r3, #0]
 8006446:	68db      	ldr	r3, [r3, #12]
 8006448:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800644c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8006450:	d107      	bne.n	8006462 <HAL_TIM_IRQHandler+0x266>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_IDX);
 8006452:	687b      	ldr	r3, [r7, #4]
 8006454:	681b      	ldr	r3, [r3, #0]
 8006456:	f46f 1280 	mvn.w	r2, #1048576	; 0x100000
 800645a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->EncoderIndexCallback(htim);
#else
      HAL_TIMEx_EncoderIndexCallback(htim);
 800645c:	6878      	ldr	r0, [r7, #4]
 800645e:	f000 fd17 	bl	8006e90 <HAL_TIMEx_EncoderIndexCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Direction change event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_DIR) != RESET)
 8006462:	687b      	ldr	r3, [r7, #4]
 8006464:	681b      	ldr	r3, [r3, #0]
 8006466:	691b      	ldr	r3, [r3, #16]
 8006468:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800646c:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8006470:	d10f      	bne.n	8006492 <HAL_TIM_IRQHandler+0x296>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_DIR) != RESET)
 8006472:	687b      	ldr	r3, [r7, #4]
 8006474:	681b      	ldr	r3, [r3, #0]
 8006476:	68db      	ldr	r3, [r3, #12]
 8006478:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800647c:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8006480:	d107      	bne.n	8006492 <HAL_TIM_IRQHandler+0x296>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_DIR);
 8006482:	687b      	ldr	r3, [r7, #4]
 8006484:	681b      	ldr	r3, [r3, #0]
 8006486:	f46f 1200 	mvn.w	r2, #2097152	; 0x200000
 800648a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->DirectionChangeCallback(htim);
#else
      HAL_TIMEx_DirectionChangeCallback(htim);
 800648c:	6878      	ldr	r0, [r7, #4]
 800648e:	f000 fd09 	bl	8006ea4 <HAL_TIMEx_DirectionChangeCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Index error event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_IERR) != RESET)
 8006492:	687b      	ldr	r3, [r7, #4]
 8006494:	681b      	ldr	r3, [r3, #0]
 8006496:	691b      	ldr	r3, [r3, #16]
 8006498:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800649c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80064a0:	d10f      	bne.n	80064c2 <HAL_TIM_IRQHandler+0x2c6>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_IERR) != RESET)
 80064a2:	687b      	ldr	r3, [r7, #4]
 80064a4:	681b      	ldr	r3, [r3, #0]
 80064a6:	68db      	ldr	r3, [r3, #12]
 80064a8:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80064ac:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80064b0:	d107      	bne.n	80064c2 <HAL_TIM_IRQHandler+0x2c6>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_IERR);
 80064b2:	687b      	ldr	r3, [r7, #4]
 80064b4:	681b      	ldr	r3, [r3, #0]
 80064b6:	f46f 0280 	mvn.w	r2, #4194304	; 0x400000
 80064ba:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->IndexErrorCallback(htim);
#else
      HAL_TIMEx_IndexErrorCallback(htim);
 80064bc:	6878      	ldr	r0, [r7, #4]
 80064be:	f000 fcfb 	bl	8006eb8 <HAL_TIMEx_IndexErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Transition error event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TERR) != RESET)
 80064c2:	687b      	ldr	r3, [r7, #4]
 80064c4:	681b      	ldr	r3, [r3, #0]
 80064c6:	691b      	ldr	r3, [r3, #16]
 80064c8:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80064cc:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80064d0:	d10f      	bne.n	80064f2 <HAL_TIM_IRQHandler+0x2f6>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TERR) != RESET)
 80064d2:	687b      	ldr	r3, [r7, #4]
 80064d4:	681b      	ldr	r3, [r3, #0]
 80064d6:	68db      	ldr	r3, [r3, #12]
 80064d8:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80064dc:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80064e0:	d107      	bne.n	80064f2 <HAL_TIM_IRQHandler+0x2f6>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_TERR);
 80064e2:	687b      	ldr	r3, [r7, #4]
 80064e4:	681b      	ldr	r3, [r3, #0]
 80064e6:	f46f 0200 	mvn.w	r2, #8388608	; 0x800000
 80064ea:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TransitionErrorCallback(htim);
#else
      HAL_TIMEx_TransitionErrorCallback(htim);
 80064ec:	6878      	ldr	r0, [r7, #4]
 80064ee:	f000 fced 	bl	8006ecc <HAL_TIMEx_TransitionErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80064f2:	bf00      	nop
 80064f4:	3708      	adds	r7, #8
 80064f6:	46bd      	mov	sp, r7
 80064f8:	bd80      	pop	{r7, pc}
	...

080064fc <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80064fc:	b580      	push	{r7, lr}
 80064fe:	b084      	sub	sp, #16
 8006500:	af00      	add	r7, sp, #0
 8006502:	6078      	str	r0, [r7, #4]
 8006504:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8006506:	687b      	ldr	r3, [r7, #4]
 8006508:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800650c:	2b01      	cmp	r3, #1
 800650e:	d101      	bne.n	8006514 <HAL_TIM_ConfigClockSource+0x18>
 8006510:	2302      	movs	r3, #2
 8006512:	e0d2      	b.n	80066ba <HAL_TIM_ConfigClockSource+0x1be>
 8006514:	687b      	ldr	r3, [r7, #4]
 8006516:	2201      	movs	r2, #1
 8006518:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800651c:	687b      	ldr	r3, [r7, #4]
 800651e:	2202      	movs	r2, #2
 8006520:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8006524:	687b      	ldr	r3, [r7, #4]
 8006526:	681b      	ldr	r3, [r3, #0]
 8006528:	689b      	ldr	r3, [r3, #8]
 800652a:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800652c:	68fb      	ldr	r3, [r7, #12]
 800652e:	f423 1344 	bic.w	r3, r3, #3211264	; 0x310000
 8006532:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8006536:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8006538:	68fb      	ldr	r3, [r7, #12]
 800653a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800653e:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8006540:	687b      	ldr	r3, [r7, #4]
 8006542:	681b      	ldr	r3, [r3, #0]
 8006544:	68fa      	ldr	r2, [r7, #12]
 8006546:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8006548:	683b      	ldr	r3, [r7, #0]
 800654a:	681b      	ldr	r3, [r3, #0]
 800654c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006550:	f000 80a9 	beq.w	80066a6 <HAL_TIM_ConfigClockSource+0x1aa>
 8006554:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006558:	d81a      	bhi.n	8006590 <HAL_TIM_ConfigClockSource+0x94>
 800655a:	2b30      	cmp	r3, #48	; 0x30
 800655c:	f000 809a 	beq.w	8006694 <HAL_TIM_ConfigClockSource+0x198>
 8006560:	2b30      	cmp	r3, #48	; 0x30
 8006562:	d809      	bhi.n	8006578 <HAL_TIM_ConfigClockSource+0x7c>
 8006564:	2b10      	cmp	r3, #16
 8006566:	f000 8095 	beq.w	8006694 <HAL_TIM_ConfigClockSource+0x198>
 800656a:	2b20      	cmp	r3, #32
 800656c:	f000 8092 	beq.w	8006694 <HAL_TIM_ConfigClockSource+0x198>
 8006570:	2b00      	cmp	r3, #0
 8006572:	f000 808f 	beq.w	8006694 <HAL_TIM_ConfigClockSource+0x198>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
      break;
    }

    default:
      break;
 8006576:	e097      	b.n	80066a8 <HAL_TIM_ConfigClockSource+0x1ac>
  switch (sClockSourceConfig->ClockSource)
 8006578:	2b50      	cmp	r3, #80	; 0x50
 800657a:	d05b      	beq.n	8006634 <HAL_TIM_ConfigClockSource+0x138>
 800657c:	2b50      	cmp	r3, #80	; 0x50
 800657e:	d802      	bhi.n	8006586 <HAL_TIM_ConfigClockSource+0x8a>
 8006580:	2b40      	cmp	r3, #64	; 0x40
 8006582:	d077      	beq.n	8006674 <HAL_TIM_ConfigClockSource+0x178>
      break;
 8006584:	e090      	b.n	80066a8 <HAL_TIM_ConfigClockSource+0x1ac>
  switch (sClockSourceConfig->ClockSource)
 8006586:	2b60      	cmp	r3, #96	; 0x60
 8006588:	d064      	beq.n	8006654 <HAL_TIM_ConfigClockSource+0x158>
 800658a:	2b70      	cmp	r3, #112	; 0x70
 800658c:	d028      	beq.n	80065e0 <HAL_TIM_ConfigClockSource+0xe4>
      break;
 800658e:	e08b      	b.n	80066a8 <HAL_TIM_ConfigClockSource+0x1ac>
  switch (sClockSourceConfig->ClockSource)
 8006590:	4a4c      	ldr	r2, [pc, #304]	; (80066c4 <HAL_TIM_ConfigClockSource+0x1c8>)
 8006592:	4293      	cmp	r3, r2
 8006594:	d07e      	beq.n	8006694 <HAL_TIM_ConfigClockSource+0x198>
 8006596:	4a4b      	ldr	r2, [pc, #300]	; (80066c4 <HAL_TIM_ConfigClockSource+0x1c8>)
 8006598:	4293      	cmp	r3, r2
 800659a:	d810      	bhi.n	80065be <HAL_TIM_ConfigClockSource+0xc2>
 800659c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80065a0:	d078      	beq.n	8006694 <HAL_TIM_ConfigClockSource+0x198>
 80065a2:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80065a6:	d803      	bhi.n	80065b0 <HAL_TIM_ConfigClockSource+0xb4>
 80065a8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80065ac:	d02f      	beq.n	800660e <HAL_TIM_ConfigClockSource+0x112>
      break;
 80065ae:	e07b      	b.n	80066a8 <HAL_TIM_ConfigClockSource+0x1ac>
  switch (sClockSourceConfig->ClockSource)
 80065b0:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 80065b4:	d06e      	beq.n	8006694 <HAL_TIM_ConfigClockSource+0x198>
 80065b6:	4a44      	ldr	r2, [pc, #272]	; (80066c8 <HAL_TIM_ConfigClockSource+0x1cc>)
 80065b8:	4293      	cmp	r3, r2
 80065ba:	d06b      	beq.n	8006694 <HAL_TIM_ConfigClockSource+0x198>
      break;
 80065bc:	e074      	b.n	80066a8 <HAL_TIM_ConfigClockSource+0x1ac>
  switch (sClockSourceConfig->ClockSource)
 80065be:	4a43      	ldr	r2, [pc, #268]	; (80066cc <HAL_TIM_ConfigClockSource+0x1d0>)
 80065c0:	4293      	cmp	r3, r2
 80065c2:	d067      	beq.n	8006694 <HAL_TIM_ConfigClockSource+0x198>
 80065c4:	4a41      	ldr	r2, [pc, #260]	; (80066cc <HAL_TIM_ConfigClockSource+0x1d0>)
 80065c6:	4293      	cmp	r3, r2
 80065c8:	d803      	bhi.n	80065d2 <HAL_TIM_ConfigClockSource+0xd6>
 80065ca:	4a41      	ldr	r2, [pc, #260]	; (80066d0 <HAL_TIM_ConfigClockSource+0x1d4>)
 80065cc:	4293      	cmp	r3, r2
 80065ce:	d061      	beq.n	8006694 <HAL_TIM_ConfigClockSource+0x198>
      break;
 80065d0:	e06a      	b.n	80066a8 <HAL_TIM_ConfigClockSource+0x1ac>
  switch (sClockSourceConfig->ClockSource)
 80065d2:	4a40      	ldr	r2, [pc, #256]	; (80066d4 <HAL_TIM_ConfigClockSource+0x1d8>)
 80065d4:	4293      	cmp	r3, r2
 80065d6:	d05d      	beq.n	8006694 <HAL_TIM_ConfigClockSource+0x198>
 80065d8:	4a3f      	ldr	r2, [pc, #252]	; (80066d8 <HAL_TIM_ConfigClockSource+0x1dc>)
 80065da:	4293      	cmp	r3, r2
 80065dc:	d05a      	beq.n	8006694 <HAL_TIM_ConfigClockSource+0x198>
      break;
 80065de:	e063      	b.n	80066a8 <HAL_TIM_ConfigClockSource+0x1ac>
      TIM_ETR_SetConfig(htim->Instance,
 80065e0:	687b      	ldr	r3, [r7, #4]
 80065e2:	6818      	ldr	r0, [r3, #0]
 80065e4:	683b      	ldr	r3, [r7, #0]
 80065e6:	6899      	ldr	r1, [r3, #8]
 80065e8:	683b      	ldr	r3, [r7, #0]
 80065ea:	685a      	ldr	r2, [r3, #4]
 80065ec:	683b      	ldr	r3, [r7, #0]
 80065ee:	68db      	ldr	r3, [r3, #12]
 80065f0:	f000 fac8 	bl	8006b84 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 80065f4:	687b      	ldr	r3, [r7, #4]
 80065f6:	681b      	ldr	r3, [r3, #0]
 80065f8:	689b      	ldr	r3, [r3, #8]
 80065fa:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80065fc:	68fb      	ldr	r3, [r7, #12]
 80065fe:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8006602:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 8006604:	687b      	ldr	r3, [r7, #4]
 8006606:	681b      	ldr	r3, [r3, #0]
 8006608:	68fa      	ldr	r2, [r7, #12]
 800660a:	609a      	str	r2, [r3, #8]
      break;
 800660c:	e04c      	b.n	80066a8 <HAL_TIM_ConfigClockSource+0x1ac>
      TIM_ETR_SetConfig(htim->Instance,
 800660e:	687b      	ldr	r3, [r7, #4]
 8006610:	6818      	ldr	r0, [r3, #0]
 8006612:	683b      	ldr	r3, [r7, #0]
 8006614:	6899      	ldr	r1, [r3, #8]
 8006616:	683b      	ldr	r3, [r7, #0]
 8006618:	685a      	ldr	r2, [r3, #4]
 800661a:	683b      	ldr	r3, [r7, #0]
 800661c:	68db      	ldr	r3, [r3, #12]
 800661e:	f000 fab1 	bl	8006b84 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8006622:	687b      	ldr	r3, [r7, #4]
 8006624:	681b      	ldr	r3, [r3, #0]
 8006626:	689a      	ldr	r2, [r3, #8]
 8006628:	687b      	ldr	r3, [r7, #4]
 800662a:	681b      	ldr	r3, [r3, #0]
 800662c:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8006630:	609a      	str	r2, [r3, #8]
      break;
 8006632:	e039      	b.n	80066a8 <HAL_TIM_ConfigClockSource+0x1ac>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8006634:	687b      	ldr	r3, [r7, #4]
 8006636:	6818      	ldr	r0, [r3, #0]
 8006638:	683b      	ldr	r3, [r7, #0]
 800663a:	6859      	ldr	r1, [r3, #4]
 800663c:	683b      	ldr	r3, [r7, #0]
 800663e:	68db      	ldr	r3, [r3, #12]
 8006640:	461a      	mov	r2, r3
 8006642:	f000 fa23 	bl	8006a8c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8006646:	687b      	ldr	r3, [r7, #4]
 8006648:	681b      	ldr	r3, [r3, #0]
 800664a:	2150      	movs	r1, #80	; 0x50
 800664c:	4618      	mov	r0, r3
 800664e:	f000 fa7c 	bl	8006b4a <TIM_ITRx_SetConfig>
      break;
 8006652:	e029      	b.n	80066a8 <HAL_TIM_ConfigClockSource+0x1ac>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8006654:	687b      	ldr	r3, [r7, #4]
 8006656:	6818      	ldr	r0, [r3, #0]
 8006658:	683b      	ldr	r3, [r7, #0]
 800665a:	6859      	ldr	r1, [r3, #4]
 800665c:	683b      	ldr	r3, [r7, #0]
 800665e:	68db      	ldr	r3, [r3, #12]
 8006660:	461a      	mov	r2, r3
 8006662:	f000 fa42 	bl	8006aea <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8006666:	687b      	ldr	r3, [r7, #4]
 8006668:	681b      	ldr	r3, [r3, #0]
 800666a:	2160      	movs	r1, #96	; 0x60
 800666c:	4618      	mov	r0, r3
 800666e:	f000 fa6c 	bl	8006b4a <TIM_ITRx_SetConfig>
      break;
 8006672:	e019      	b.n	80066a8 <HAL_TIM_ConfigClockSource+0x1ac>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8006674:	687b      	ldr	r3, [r7, #4]
 8006676:	6818      	ldr	r0, [r3, #0]
 8006678:	683b      	ldr	r3, [r7, #0]
 800667a:	6859      	ldr	r1, [r3, #4]
 800667c:	683b      	ldr	r3, [r7, #0]
 800667e:	68db      	ldr	r3, [r3, #12]
 8006680:	461a      	mov	r2, r3
 8006682:	f000 fa03 	bl	8006a8c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8006686:	687b      	ldr	r3, [r7, #4]
 8006688:	681b      	ldr	r3, [r3, #0]
 800668a:	2140      	movs	r1, #64	; 0x40
 800668c:	4618      	mov	r0, r3
 800668e:	f000 fa5c 	bl	8006b4a <TIM_ITRx_SetConfig>
      break;
 8006692:	e009      	b.n	80066a8 <HAL_TIM_ConfigClockSource+0x1ac>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8006694:	687b      	ldr	r3, [r7, #4]
 8006696:	681a      	ldr	r2, [r3, #0]
 8006698:	683b      	ldr	r3, [r7, #0]
 800669a:	681b      	ldr	r3, [r3, #0]
 800669c:	4619      	mov	r1, r3
 800669e:	4610      	mov	r0, r2
 80066a0:	f000 fa53 	bl	8006b4a <TIM_ITRx_SetConfig>
      break;
 80066a4:	e000      	b.n	80066a8 <HAL_TIM_ConfigClockSource+0x1ac>
      break;
 80066a6:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80066a8:	687b      	ldr	r3, [r7, #4]
 80066aa:	2201      	movs	r2, #1
 80066ac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80066b0:	687b      	ldr	r3, [r7, #4]
 80066b2:	2200      	movs	r2, #0
 80066b4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80066b8:	2300      	movs	r3, #0
}
 80066ba:	4618      	mov	r0, r3
 80066bc:	3710      	adds	r7, #16
 80066be:	46bd      	mov	sp, r7
 80066c0:	bd80      	pop	{r7, pc}
 80066c2:	bf00      	nop
 80066c4:	00100030 	.word	0x00100030
 80066c8:	00100020 	.word	0x00100020
 80066cc:	00100050 	.word	0x00100050
 80066d0:	00100040 	.word	0x00100040
 80066d4:	00100060 	.word	0x00100060
 80066d8:	00100070 	.word	0x00100070

080066dc <HAL_TIM_SlaveConfigSynchro>:
  *         timer input or external trigger input) and the Slave mode
  *         (Disable, Reset, Gated, Trigger, External clock mode 1, Reset + Trigger, Gated + Reset).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_SlaveConfigSynchro(TIM_HandleTypeDef *htim, TIM_SlaveConfigTypeDef *sSlaveConfig)
{
 80066dc:	b580      	push	{r7, lr}
 80066de:	b082      	sub	sp, #8
 80066e0:	af00      	add	r7, sp, #0
 80066e2:	6078      	str	r0, [r7, #4]
 80066e4:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_SLAVE_INSTANCE(htim->Instance));
  assert_param(IS_TIM_SLAVE_MODE(sSlaveConfig->SlaveMode));
  assert_param(IS_TIM_TRIGGER_INSTANCE(htim->Instance, sSlaveConfig->InputTrigger));

  __HAL_LOCK(htim);
 80066e6:	687b      	ldr	r3, [r7, #4]
 80066e8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80066ec:	2b01      	cmp	r3, #1
 80066ee:	d101      	bne.n	80066f4 <HAL_TIM_SlaveConfigSynchro+0x18>
 80066f0:	2302      	movs	r3, #2
 80066f2:	e031      	b.n	8006758 <HAL_TIM_SlaveConfigSynchro+0x7c>
 80066f4:	687b      	ldr	r3, [r7, #4]
 80066f6:	2201      	movs	r2, #1
 80066f8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80066fc:	687b      	ldr	r3, [r7, #4]
 80066fe:	2202      	movs	r2, #2
 8006700:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  if (TIM_SlaveTimer_SetConfig(htim, sSlaveConfig) != HAL_OK)
 8006704:	6839      	ldr	r1, [r7, #0]
 8006706:	6878      	ldr	r0, [r7, #4]
 8006708:	f000 f904 	bl	8006914 <TIM_SlaveTimer_SetConfig>
 800670c:	4603      	mov	r3, r0
 800670e:	2b00      	cmp	r3, #0
 8006710:	d009      	beq.n	8006726 <HAL_TIM_SlaveConfigSynchro+0x4a>
  {
    htim->State = HAL_TIM_STATE_READY;
 8006712:	687b      	ldr	r3, [r7, #4]
 8006714:	2201      	movs	r2, #1
 8006716:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    __HAL_UNLOCK(htim);
 800671a:	687b      	ldr	r3, [r7, #4]
 800671c:	2200      	movs	r2, #0
 800671e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    return HAL_ERROR;
 8006722:	2301      	movs	r3, #1
 8006724:	e018      	b.n	8006758 <HAL_TIM_SlaveConfigSynchro+0x7c>
  }

  /* Disable Trigger Interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_TRIGGER);
 8006726:	687b      	ldr	r3, [r7, #4]
 8006728:	681b      	ldr	r3, [r3, #0]
 800672a:	68da      	ldr	r2, [r3, #12]
 800672c:	687b      	ldr	r3, [r7, #4]
 800672e:	681b      	ldr	r3, [r3, #0]
 8006730:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006734:	60da      	str	r2, [r3, #12]

  /* Disable Trigger DMA request */
  __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_TRIGGER);
 8006736:	687b      	ldr	r3, [r7, #4]
 8006738:	681b      	ldr	r3, [r3, #0]
 800673a:	68da      	ldr	r2, [r3, #12]
 800673c:	687b      	ldr	r3, [r7, #4]
 800673e:	681b      	ldr	r3, [r3, #0]
 8006740:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8006744:	60da      	str	r2, [r3, #12]

  htim->State = HAL_TIM_STATE_READY;
 8006746:	687b      	ldr	r3, [r7, #4]
 8006748:	2201      	movs	r2, #1
 800674a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800674e:	687b      	ldr	r3, [r7, #4]
 8006750:	2200      	movs	r2, #0
 8006752:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8006756:	2300      	movs	r3, #0
}
 8006758:	4618      	mov	r0, r3
 800675a:	3708      	adds	r7, #8
 800675c:	46bd      	mov	sp, r7
 800675e:	bd80      	pop	{r7, pc}

08006760 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8006760:	b480      	push	{r7}
 8006762:	b083      	sub	sp, #12
 8006764:	af00      	add	r7, sp, #0
 8006766:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 8006768:	bf00      	nop
 800676a:	370c      	adds	r7, #12
 800676c:	46bd      	mov	sp, r7
 800676e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006772:	4770      	bx	lr

08006774 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8006774:	b480      	push	{r7}
 8006776:	b083      	sub	sp, #12
 8006778:	af00      	add	r7, sp, #0
 800677a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800677c:	bf00      	nop
 800677e:	370c      	adds	r7, #12
 8006780:	46bd      	mov	sp, r7
 8006782:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006786:	4770      	bx	lr

08006788 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8006788:	b480      	push	{r7}
 800678a:	b083      	sub	sp, #12
 800678c:	af00      	add	r7, sp, #0
 800678e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8006790:	bf00      	nop
 8006792:	370c      	adds	r7, #12
 8006794:	46bd      	mov	sp, r7
 8006796:	f85d 7b04 	ldr.w	r7, [sp], #4
 800679a:	4770      	bx	lr

0800679c <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800679c:	b480      	push	{r7}
 800679e:	b083      	sub	sp, #12
 80067a0:	af00      	add	r7, sp, #0
 80067a2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80067a4:	bf00      	nop
 80067a6:	370c      	adds	r7, #12
 80067a8:	46bd      	mov	sp, r7
 80067aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067ae:	4770      	bx	lr

080067b0 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80067b0:	b480      	push	{r7}
 80067b2:	b083      	sub	sp, #12
 80067b4:	af00      	add	r7, sp, #0
 80067b6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80067b8:	bf00      	nop
 80067ba:	370c      	adds	r7, #12
 80067bc:	46bd      	mov	sp, r7
 80067be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067c2:	4770      	bx	lr

080067c4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80067c4:	b480      	push	{r7}
 80067c6:	b085      	sub	sp, #20
 80067c8:	af00      	add	r7, sp, #0
 80067ca:	6078      	str	r0, [r7, #4]
 80067cc:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80067ce:	687b      	ldr	r3, [r7, #4]
 80067d0:	681b      	ldr	r3, [r3, #0]
 80067d2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80067d4:	687b      	ldr	r3, [r7, #4]
 80067d6:	4a46      	ldr	r2, [pc, #280]	; (80068f0 <TIM_Base_SetConfig+0x12c>)
 80067d8:	4293      	cmp	r3, r2
 80067da:	d017      	beq.n	800680c <TIM_Base_SetConfig+0x48>
 80067dc:	687b      	ldr	r3, [r7, #4]
 80067de:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80067e2:	d013      	beq.n	800680c <TIM_Base_SetConfig+0x48>
 80067e4:	687b      	ldr	r3, [r7, #4]
 80067e6:	4a43      	ldr	r2, [pc, #268]	; (80068f4 <TIM_Base_SetConfig+0x130>)
 80067e8:	4293      	cmp	r3, r2
 80067ea:	d00f      	beq.n	800680c <TIM_Base_SetConfig+0x48>
 80067ec:	687b      	ldr	r3, [r7, #4]
 80067ee:	4a42      	ldr	r2, [pc, #264]	; (80068f8 <TIM_Base_SetConfig+0x134>)
 80067f0:	4293      	cmp	r3, r2
 80067f2:	d00b      	beq.n	800680c <TIM_Base_SetConfig+0x48>
 80067f4:	687b      	ldr	r3, [r7, #4]
 80067f6:	4a41      	ldr	r2, [pc, #260]	; (80068fc <TIM_Base_SetConfig+0x138>)
 80067f8:	4293      	cmp	r3, r2
 80067fa:	d007      	beq.n	800680c <TIM_Base_SetConfig+0x48>
 80067fc:	687b      	ldr	r3, [r7, #4]
 80067fe:	4a40      	ldr	r2, [pc, #256]	; (8006900 <TIM_Base_SetConfig+0x13c>)
 8006800:	4293      	cmp	r3, r2
 8006802:	d003      	beq.n	800680c <TIM_Base_SetConfig+0x48>
 8006804:	687b      	ldr	r3, [r7, #4]
 8006806:	4a3f      	ldr	r2, [pc, #252]	; (8006904 <TIM_Base_SetConfig+0x140>)
 8006808:	4293      	cmp	r3, r2
 800680a:	d108      	bne.n	800681e <TIM_Base_SetConfig+0x5a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800680c:	68fb      	ldr	r3, [r7, #12]
 800680e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006812:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8006814:	683b      	ldr	r3, [r7, #0]
 8006816:	685b      	ldr	r3, [r3, #4]
 8006818:	68fa      	ldr	r2, [r7, #12]
 800681a:	4313      	orrs	r3, r2
 800681c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800681e:	687b      	ldr	r3, [r7, #4]
 8006820:	4a33      	ldr	r2, [pc, #204]	; (80068f0 <TIM_Base_SetConfig+0x12c>)
 8006822:	4293      	cmp	r3, r2
 8006824:	d023      	beq.n	800686e <TIM_Base_SetConfig+0xaa>
 8006826:	687b      	ldr	r3, [r7, #4]
 8006828:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800682c:	d01f      	beq.n	800686e <TIM_Base_SetConfig+0xaa>
 800682e:	687b      	ldr	r3, [r7, #4]
 8006830:	4a30      	ldr	r2, [pc, #192]	; (80068f4 <TIM_Base_SetConfig+0x130>)
 8006832:	4293      	cmp	r3, r2
 8006834:	d01b      	beq.n	800686e <TIM_Base_SetConfig+0xaa>
 8006836:	687b      	ldr	r3, [r7, #4]
 8006838:	4a2f      	ldr	r2, [pc, #188]	; (80068f8 <TIM_Base_SetConfig+0x134>)
 800683a:	4293      	cmp	r3, r2
 800683c:	d017      	beq.n	800686e <TIM_Base_SetConfig+0xaa>
 800683e:	687b      	ldr	r3, [r7, #4]
 8006840:	4a2e      	ldr	r2, [pc, #184]	; (80068fc <TIM_Base_SetConfig+0x138>)
 8006842:	4293      	cmp	r3, r2
 8006844:	d013      	beq.n	800686e <TIM_Base_SetConfig+0xaa>
 8006846:	687b      	ldr	r3, [r7, #4]
 8006848:	4a2d      	ldr	r2, [pc, #180]	; (8006900 <TIM_Base_SetConfig+0x13c>)
 800684a:	4293      	cmp	r3, r2
 800684c:	d00f      	beq.n	800686e <TIM_Base_SetConfig+0xaa>
 800684e:	687b      	ldr	r3, [r7, #4]
 8006850:	4a2d      	ldr	r2, [pc, #180]	; (8006908 <TIM_Base_SetConfig+0x144>)
 8006852:	4293      	cmp	r3, r2
 8006854:	d00b      	beq.n	800686e <TIM_Base_SetConfig+0xaa>
 8006856:	687b      	ldr	r3, [r7, #4]
 8006858:	4a2c      	ldr	r2, [pc, #176]	; (800690c <TIM_Base_SetConfig+0x148>)
 800685a:	4293      	cmp	r3, r2
 800685c:	d007      	beq.n	800686e <TIM_Base_SetConfig+0xaa>
 800685e:	687b      	ldr	r3, [r7, #4]
 8006860:	4a2b      	ldr	r2, [pc, #172]	; (8006910 <TIM_Base_SetConfig+0x14c>)
 8006862:	4293      	cmp	r3, r2
 8006864:	d003      	beq.n	800686e <TIM_Base_SetConfig+0xaa>
 8006866:	687b      	ldr	r3, [r7, #4]
 8006868:	4a26      	ldr	r2, [pc, #152]	; (8006904 <TIM_Base_SetConfig+0x140>)
 800686a:	4293      	cmp	r3, r2
 800686c:	d108      	bne.n	8006880 <TIM_Base_SetConfig+0xbc>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800686e:	68fb      	ldr	r3, [r7, #12]
 8006870:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006874:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8006876:	683b      	ldr	r3, [r7, #0]
 8006878:	68db      	ldr	r3, [r3, #12]
 800687a:	68fa      	ldr	r2, [r7, #12]
 800687c:	4313      	orrs	r3, r2
 800687e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8006880:	68fb      	ldr	r3, [r7, #12]
 8006882:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8006886:	683b      	ldr	r3, [r7, #0]
 8006888:	695b      	ldr	r3, [r3, #20]
 800688a:	4313      	orrs	r3, r2
 800688c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800688e:	687b      	ldr	r3, [r7, #4]
 8006890:	68fa      	ldr	r2, [r7, #12]
 8006892:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8006894:	683b      	ldr	r3, [r7, #0]
 8006896:	689a      	ldr	r2, [r3, #8]
 8006898:	687b      	ldr	r3, [r7, #4]
 800689a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800689c:	683b      	ldr	r3, [r7, #0]
 800689e:	681a      	ldr	r2, [r3, #0]
 80068a0:	687b      	ldr	r3, [r7, #4]
 80068a2:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80068a4:	687b      	ldr	r3, [r7, #4]
 80068a6:	4a12      	ldr	r2, [pc, #72]	; (80068f0 <TIM_Base_SetConfig+0x12c>)
 80068a8:	4293      	cmp	r3, r2
 80068aa:	d013      	beq.n	80068d4 <TIM_Base_SetConfig+0x110>
 80068ac:	687b      	ldr	r3, [r7, #4]
 80068ae:	4a14      	ldr	r2, [pc, #80]	; (8006900 <TIM_Base_SetConfig+0x13c>)
 80068b0:	4293      	cmp	r3, r2
 80068b2:	d00f      	beq.n	80068d4 <TIM_Base_SetConfig+0x110>
 80068b4:	687b      	ldr	r3, [r7, #4]
 80068b6:	4a14      	ldr	r2, [pc, #80]	; (8006908 <TIM_Base_SetConfig+0x144>)
 80068b8:	4293      	cmp	r3, r2
 80068ba:	d00b      	beq.n	80068d4 <TIM_Base_SetConfig+0x110>
 80068bc:	687b      	ldr	r3, [r7, #4]
 80068be:	4a13      	ldr	r2, [pc, #76]	; (800690c <TIM_Base_SetConfig+0x148>)
 80068c0:	4293      	cmp	r3, r2
 80068c2:	d007      	beq.n	80068d4 <TIM_Base_SetConfig+0x110>
 80068c4:	687b      	ldr	r3, [r7, #4]
 80068c6:	4a12      	ldr	r2, [pc, #72]	; (8006910 <TIM_Base_SetConfig+0x14c>)
 80068c8:	4293      	cmp	r3, r2
 80068ca:	d003      	beq.n	80068d4 <TIM_Base_SetConfig+0x110>
 80068cc:	687b      	ldr	r3, [r7, #4]
 80068ce:	4a0d      	ldr	r2, [pc, #52]	; (8006904 <TIM_Base_SetConfig+0x140>)
 80068d0:	4293      	cmp	r3, r2
 80068d2:	d103      	bne.n	80068dc <TIM_Base_SetConfig+0x118>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80068d4:	683b      	ldr	r3, [r7, #0]
 80068d6:	691a      	ldr	r2, [r3, #16]
 80068d8:	687b      	ldr	r3, [r7, #4]
 80068da:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80068dc:	687b      	ldr	r3, [r7, #4]
 80068de:	2201      	movs	r2, #1
 80068e0:	615a      	str	r2, [r3, #20]
}
 80068e2:	bf00      	nop
 80068e4:	3714      	adds	r7, #20
 80068e6:	46bd      	mov	sp, r7
 80068e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068ec:	4770      	bx	lr
 80068ee:	bf00      	nop
 80068f0:	40012c00 	.word	0x40012c00
 80068f4:	40000400 	.word	0x40000400
 80068f8:	40000800 	.word	0x40000800
 80068fc:	40000c00 	.word	0x40000c00
 8006900:	40013400 	.word	0x40013400
 8006904:	40015000 	.word	0x40015000
 8006908:	40014000 	.word	0x40014000
 800690c:	40014400 	.word	0x40014400
 8006910:	40014800 	.word	0x40014800

08006914 <TIM_SlaveTimer_SetConfig>:
  * @param  sSlaveConfig Slave timer configuration
  * @retval None
  */
static HAL_StatusTypeDef TIM_SlaveTimer_SetConfig(TIM_HandleTypeDef *htim,
                                                  TIM_SlaveConfigTypeDef *sSlaveConfig)
{
 8006914:	b580      	push	{r7, lr}
 8006916:	b086      	sub	sp, #24
 8006918:	af00      	add	r7, sp, #0
 800691a:	6078      	str	r0, [r7, #4]
 800691c:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800691e:	687b      	ldr	r3, [r7, #4]
 8006920:	681b      	ldr	r3, [r3, #0]
 8006922:	689b      	ldr	r3, [r3, #8]
 8006924:	617b      	str	r3, [r7, #20]

  /* Reset the Trigger Selection Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8006926:	697b      	ldr	r3, [r7, #20]
 8006928:	f423 1340 	bic.w	r3, r3, #3145728	; 0x300000
 800692c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006930:	617b      	str	r3, [r7, #20]
  /* Set the Input Trigger source */
  tmpsmcr |= sSlaveConfig->InputTrigger;
 8006932:	683b      	ldr	r3, [r7, #0]
 8006934:	685b      	ldr	r3, [r3, #4]
 8006936:	697a      	ldr	r2, [r7, #20]
 8006938:	4313      	orrs	r3, r2
 800693a:	617b      	str	r3, [r7, #20]

  /* Reset the slave mode Bits */
  tmpsmcr &= ~TIM_SMCR_SMS;
 800693c:	697b      	ldr	r3, [r7, #20]
 800693e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006942:	f023 0307 	bic.w	r3, r3, #7
 8006946:	617b      	str	r3, [r7, #20]
  /* Set the slave mode */
  tmpsmcr |= sSlaveConfig->SlaveMode;
 8006948:	683b      	ldr	r3, [r7, #0]
 800694a:	681b      	ldr	r3, [r3, #0]
 800694c:	697a      	ldr	r2, [r7, #20]
 800694e:	4313      	orrs	r3, r2
 8006950:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8006952:	687b      	ldr	r3, [r7, #4]
 8006954:	681b      	ldr	r3, [r3, #0]
 8006956:	697a      	ldr	r2, [r7, #20]
 8006958:	609a      	str	r2, [r3, #8]

  /* Configure the trigger prescaler, filter, and polarity */
  switch (sSlaveConfig->InputTrigger)
 800695a:	683b      	ldr	r3, [r7, #0]
 800695c:	685b      	ldr	r3, [r3, #4]
 800695e:	2b70      	cmp	r3, #112	; 0x70
 8006960:	d034      	beq.n	80069cc <TIM_SlaveTimer_SetConfig+0xb8>
 8006962:	2b70      	cmp	r3, #112	; 0x70
 8006964:	d811      	bhi.n	800698a <TIM_SlaveTimer_SetConfig+0x76>
 8006966:	2b30      	cmp	r3, #48	; 0x30
 8006968:	d07d      	beq.n	8006a66 <TIM_SlaveTimer_SetConfig+0x152>
 800696a:	2b30      	cmp	r3, #48	; 0x30
 800696c:	d806      	bhi.n	800697c <TIM_SlaveTimer_SetConfig+0x68>
 800696e:	2b10      	cmp	r3, #16
 8006970:	d079      	beq.n	8006a66 <TIM_SlaveTimer_SetConfig+0x152>
 8006972:	2b20      	cmp	r3, #32
 8006974:	d077      	beq.n	8006a66 <TIM_SlaveTimer_SetConfig+0x152>
 8006976:	2b00      	cmp	r3, #0
 8006978:	d075      	beq.n	8006a66 <TIM_SlaveTimer_SetConfig+0x152>
      assert_param(IS_TIM_INTERNAL_TRIGGEREVENT_INSTANCE((htim->Instance), sSlaveConfig->InputTrigger));
      break;
    }

    default:
      break;
 800697a:	e075      	b.n	8006a68 <TIM_SlaveTimer_SetConfig+0x154>
  switch (sSlaveConfig->InputTrigger)
 800697c:	2b50      	cmp	r3, #80	; 0x50
 800697e:	d05e      	beq.n	8006a3e <TIM_SlaveTimer_SetConfig+0x12a>
 8006980:	2b60      	cmp	r3, #96	; 0x60
 8006982:	d066      	beq.n	8006a52 <TIM_SlaveTimer_SetConfig+0x13e>
 8006984:	2b40      	cmp	r3, #64	; 0x40
 8006986:	d02c      	beq.n	80069e2 <TIM_SlaveTimer_SetConfig+0xce>
      break;
 8006988:	e06e      	b.n	8006a68 <TIM_SlaveTimer_SetConfig+0x154>
  switch (sSlaveConfig->InputTrigger)
 800698a:	4a3a      	ldr	r2, [pc, #232]	; (8006a74 <TIM_SlaveTimer_SetConfig+0x160>)
 800698c:	4293      	cmp	r3, r2
 800698e:	d06a      	beq.n	8006a66 <TIM_SlaveTimer_SetConfig+0x152>
 8006990:	4a38      	ldr	r2, [pc, #224]	; (8006a74 <TIM_SlaveTimer_SetConfig+0x160>)
 8006992:	4293      	cmp	r3, r2
 8006994:	d809      	bhi.n	80069aa <TIM_SlaveTimer_SetConfig+0x96>
 8006996:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 800699a:	d064      	beq.n	8006a66 <TIM_SlaveTimer_SetConfig+0x152>
 800699c:	4a36      	ldr	r2, [pc, #216]	; (8006a78 <TIM_SlaveTimer_SetConfig+0x164>)
 800699e:	4293      	cmp	r3, r2
 80069a0:	d061      	beq.n	8006a66 <TIM_SlaveTimer_SetConfig+0x152>
 80069a2:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80069a6:	d05e      	beq.n	8006a66 <TIM_SlaveTimer_SetConfig+0x152>
      break;
 80069a8:	e05e      	b.n	8006a68 <TIM_SlaveTimer_SetConfig+0x154>
  switch (sSlaveConfig->InputTrigger)
 80069aa:	4a34      	ldr	r2, [pc, #208]	; (8006a7c <TIM_SlaveTimer_SetConfig+0x168>)
 80069ac:	4293      	cmp	r3, r2
 80069ae:	d05a      	beq.n	8006a66 <TIM_SlaveTimer_SetConfig+0x152>
 80069b0:	4a32      	ldr	r2, [pc, #200]	; (8006a7c <TIM_SlaveTimer_SetConfig+0x168>)
 80069b2:	4293      	cmp	r3, r2
 80069b4:	d803      	bhi.n	80069be <TIM_SlaveTimer_SetConfig+0xaa>
 80069b6:	4a32      	ldr	r2, [pc, #200]	; (8006a80 <TIM_SlaveTimer_SetConfig+0x16c>)
 80069b8:	4293      	cmp	r3, r2
 80069ba:	d054      	beq.n	8006a66 <TIM_SlaveTimer_SetConfig+0x152>
      break;
 80069bc:	e054      	b.n	8006a68 <TIM_SlaveTimer_SetConfig+0x154>
  switch (sSlaveConfig->InputTrigger)
 80069be:	4a31      	ldr	r2, [pc, #196]	; (8006a84 <TIM_SlaveTimer_SetConfig+0x170>)
 80069c0:	4293      	cmp	r3, r2
 80069c2:	d050      	beq.n	8006a66 <TIM_SlaveTimer_SetConfig+0x152>
 80069c4:	4a30      	ldr	r2, [pc, #192]	; (8006a88 <TIM_SlaveTimer_SetConfig+0x174>)
 80069c6:	4293      	cmp	r3, r2
 80069c8:	d04d      	beq.n	8006a66 <TIM_SlaveTimer_SetConfig+0x152>
      break;
 80069ca:	e04d      	b.n	8006a68 <TIM_SlaveTimer_SetConfig+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 80069cc:	687b      	ldr	r3, [r7, #4]
 80069ce:	6818      	ldr	r0, [r3, #0]
 80069d0:	683b      	ldr	r3, [r7, #0]
 80069d2:	68d9      	ldr	r1, [r3, #12]
 80069d4:	683b      	ldr	r3, [r7, #0]
 80069d6:	689a      	ldr	r2, [r3, #8]
 80069d8:	683b      	ldr	r3, [r7, #0]
 80069da:	691b      	ldr	r3, [r3, #16]
 80069dc:	f000 f8d2 	bl	8006b84 <TIM_ETR_SetConfig>
      break;
 80069e0:	e042      	b.n	8006a68 <TIM_SlaveTimer_SetConfig+0x154>
      if ((sSlaveConfig->SlaveMode == TIM_SLAVEMODE_GATED) || (sSlaveConfig->SlaveMode == TIM_SLAVEMODE_COMBINED_GATEDRESET))
 80069e2:	683b      	ldr	r3, [r7, #0]
 80069e4:	681b      	ldr	r3, [r3, #0]
 80069e6:	2b05      	cmp	r3, #5
 80069e8:	d004      	beq.n	80069f4 <TIM_SlaveTimer_SetConfig+0xe0>
 80069ea:	683b      	ldr	r3, [r7, #0]
 80069ec:	681b      	ldr	r3, [r3, #0]
 80069ee:	f1b3 1f01 	cmp.w	r3, #65537	; 0x10001
 80069f2:	d101      	bne.n	80069f8 <TIM_SlaveTimer_SetConfig+0xe4>
        return HAL_ERROR;
 80069f4:	2301      	movs	r3, #1
 80069f6:	e038      	b.n	8006a6a <TIM_SlaveTimer_SetConfig+0x156>
      tmpccer = htim->Instance->CCER;
 80069f8:	687b      	ldr	r3, [r7, #4]
 80069fa:	681b      	ldr	r3, [r3, #0]
 80069fc:	6a1b      	ldr	r3, [r3, #32]
 80069fe:	613b      	str	r3, [r7, #16]
      htim->Instance->CCER &= ~TIM_CCER_CC1E;
 8006a00:	687b      	ldr	r3, [r7, #4]
 8006a02:	681b      	ldr	r3, [r3, #0]
 8006a04:	6a1a      	ldr	r2, [r3, #32]
 8006a06:	687b      	ldr	r3, [r7, #4]
 8006a08:	681b      	ldr	r3, [r3, #0]
 8006a0a:	f022 0201 	bic.w	r2, r2, #1
 8006a0e:	621a      	str	r2, [r3, #32]
      tmpccmr1 = htim->Instance->CCMR1;
 8006a10:	687b      	ldr	r3, [r7, #4]
 8006a12:	681b      	ldr	r3, [r3, #0]
 8006a14:	699b      	ldr	r3, [r3, #24]
 8006a16:	60fb      	str	r3, [r7, #12]
      tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8006a18:	68fb      	ldr	r3, [r7, #12]
 8006a1a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8006a1e:	60fb      	str	r3, [r7, #12]
      tmpccmr1 |= ((sSlaveConfig->TriggerFilter) << 4U);
 8006a20:	683b      	ldr	r3, [r7, #0]
 8006a22:	691b      	ldr	r3, [r3, #16]
 8006a24:	011b      	lsls	r3, r3, #4
 8006a26:	68fa      	ldr	r2, [r7, #12]
 8006a28:	4313      	orrs	r3, r2
 8006a2a:	60fb      	str	r3, [r7, #12]
      htim->Instance->CCMR1 = tmpccmr1;
 8006a2c:	687b      	ldr	r3, [r7, #4]
 8006a2e:	681b      	ldr	r3, [r3, #0]
 8006a30:	68fa      	ldr	r2, [r7, #12]
 8006a32:	619a      	str	r2, [r3, #24]
      htim->Instance->CCER = tmpccer;
 8006a34:	687b      	ldr	r3, [r7, #4]
 8006a36:	681b      	ldr	r3, [r3, #0]
 8006a38:	693a      	ldr	r2, [r7, #16]
 8006a3a:	621a      	str	r2, [r3, #32]
      break;
 8006a3c:	e014      	b.n	8006a68 <TIM_SlaveTimer_SetConfig+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8006a3e:	687b      	ldr	r3, [r7, #4]
 8006a40:	6818      	ldr	r0, [r3, #0]
 8006a42:	683b      	ldr	r3, [r7, #0]
 8006a44:	6899      	ldr	r1, [r3, #8]
 8006a46:	683b      	ldr	r3, [r7, #0]
 8006a48:	691b      	ldr	r3, [r3, #16]
 8006a4a:	461a      	mov	r2, r3
 8006a4c:	f000 f81e 	bl	8006a8c <TIM_TI1_ConfigInputStage>
      break;
 8006a50:	e00a      	b.n	8006a68 <TIM_SlaveTimer_SetConfig+0x154>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8006a52:	687b      	ldr	r3, [r7, #4]
 8006a54:	6818      	ldr	r0, [r3, #0]
 8006a56:	683b      	ldr	r3, [r7, #0]
 8006a58:	6899      	ldr	r1, [r3, #8]
 8006a5a:	683b      	ldr	r3, [r7, #0]
 8006a5c:	691b      	ldr	r3, [r3, #16]
 8006a5e:	461a      	mov	r2, r3
 8006a60:	f000 f843 	bl	8006aea <TIM_TI2_ConfigInputStage>
      break;
 8006a64:	e000      	b.n	8006a68 <TIM_SlaveTimer_SetConfig+0x154>
      break;
 8006a66:	bf00      	nop
  }
  return HAL_OK;
 8006a68:	2300      	movs	r3, #0
}
 8006a6a:	4618      	mov	r0, r3
 8006a6c:	3718      	adds	r7, #24
 8006a6e:	46bd      	mov	sp, r7
 8006a70:	bd80      	pop	{r7, pc}
 8006a72:	bf00      	nop
 8006a74:	00100030 	.word	0x00100030
 8006a78:	00100020 	.word	0x00100020
 8006a7c:	00100050 	.word	0x00100050
 8006a80:	00100040 	.word	0x00100040
 8006a84:	00100060 	.word	0x00100060
 8006a88:	00100070 	.word	0x00100070

08006a8c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8006a8c:	b480      	push	{r7}
 8006a8e:	b087      	sub	sp, #28
 8006a90:	af00      	add	r7, sp, #0
 8006a92:	60f8      	str	r0, [r7, #12]
 8006a94:	60b9      	str	r1, [r7, #8]
 8006a96:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8006a98:	68fb      	ldr	r3, [r7, #12]
 8006a9a:	6a1b      	ldr	r3, [r3, #32]
 8006a9c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8006a9e:	68fb      	ldr	r3, [r7, #12]
 8006aa0:	6a1b      	ldr	r3, [r3, #32]
 8006aa2:	f023 0201 	bic.w	r2, r3, #1
 8006aa6:	68fb      	ldr	r3, [r7, #12]
 8006aa8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006aaa:	68fb      	ldr	r3, [r7, #12]
 8006aac:	699b      	ldr	r3, [r3, #24]
 8006aae:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8006ab0:	693b      	ldr	r3, [r7, #16]
 8006ab2:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8006ab6:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8006ab8:	687b      	ldr	r3, [r7, #4]
 8006aba:	011b      	lsls	r3, r3, #4
 8006abc:	693a      	ldr	r2, [r7, #16]
 8006abe:	4313      	orrs	r3, r2
 8006ac0:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8006ac2:	697b      	ldr	r3, [r7, #20]
 8006ac4:	f023 030a 	bic.w	r3, r3, #10
 8006ac8:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8006aca:	697a      	ldr	r2, [r7, #20]
 8006acc:	68bb      	ldr	r3, [r7, #8]
 8006ace:	4313      	orrs	r3, r2
 8006ad0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8006ad2:	68fb      	ldr	r3, [r7, #12]
 8006ad4:	693a      	ldr	r2, [r7, #16]
 8006ad6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006ad8:	68fb      	ldr	r3, [r7, #12]
 8006ada:	697a      	ldr	r2, [r7, #20]
 8006adc:	621a      	str	r2, [r3, #32]
}
 8006ade:	bf00      	nop
 8006ae0:	371c      	adds	r7, #28
 8006ae2:	46bd      	mov	sp, r7
 8006ae4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ae8:	4770      	bx	lr

08006aea <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8006aea:	b480      	push	{r7}
 8006aec:	b087      	sub	sp, #28
 8006aee:	af00      	add	r7, sp, #0
 8006af0:	60f8      	str	r0, [r7, #12]
 8006af2:	60b9      	str	r1, [r7, #8]
 8006af4:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8006af6:	68fb      	ldr	r3, [r7, #12]
 8006af8:	6a1b      	ldr	r3, [r3, #32]
 8006afa:	f023 0210 	bic.w	r2, r3, #16
 8006afe:	68fb      	ldr	r3, [r7, #12]
 8006b00:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006b02:	68fb      	ldr	r3, [r7, #12]
 8006b04:	699b      	ldr	r3, [r3, #24]
 8006b06:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8006b08:	68fb      	ldr	r3, [r7, #12]
 8006b0a:	6a1b      	ldr	r3, [r3, #32]
 8006b0c:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8006b0e:	697b      	ldr	r3, [r7, #20]
 8006b10:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8006b14:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8006b16:	687b      	ldr	r3, [r7, #4]
 8006b18:	031b      	lsls	r3, r3, #12
 8006b1a:	697a      	ldr	r2, [r7, #20]
 8006b1c:	4313      	orrs	r3, r2
 8006b1e:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8006b20:	693b      	ldr	r3, [r7, #16]
 8006b22:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8006b26:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8006b28:	68bb      	ldr	r3, [r7, #8]
 8006b2a:	011b      	lsls	r3, r3, #4
 8006b2c:	693a      	ldr	r2, [r7, #16]
 8006b2e:	4313      	orrs	r3, r2
 8006b30:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8006b32:	68fb      	ldr	r3, [r7, #12]
 8006b34:	697a      	ldr	r2, [r7, #20]
 8006b36:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006b38:	68fb      	ldr	r3, [r7, #12]
 8006b3a:	693a      	ldr	r2, [r7, #16]
 8006b3c:	621a      	str	r2, [r3, #32]
}
 8006b3e:	bf00      	nop
 8006b40:	371c      	adds	r7, #28
 8006b42:	46bd      	mov	sp, r7
 8006b44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b48:	4770      	bx	lr

08006b4a <TIM_ITRx_SetConfig>:
  *       (*)  Value not defined in all devices.
  *
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8006b4a:	b480      	push	{r7}
 8006b4c:	b085      	sub	sp, #20
 8006b4e:	af00      	add	r7, sp, #0
 8006b50:	6078      	str	r0, [r7, #4]
 8006b52:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8006b54:	687b      	ldr	r3, [r7, #4]
 8006b56:	689b      	ldr	r3, [r3, #8]
 8006b58:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8006b5a:	68fb      	ldr	r3, [r7, #12]
 8006b5c:	f423 1340 	bic.w	r3, r3, #3145728	; 0x300000
 8006b60:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006b64:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8006b66:	683a      	ldr	r2, [r7, #0]
 8006b68:	68fb      	ldr	r3, [r7, #12]
 8006b6a:	4313      	orrs	r3, r2
 8006b6c:	f043 0307 	orr.w	r3, r3, #7
 8006b70:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8006b72:	687b      	ldr	r3, [r7, #4]
 8006b74:	68fa      	ldr	r2, [r7, #12]
 8006b76:	609a      	str	r2, [r3, #8]
}
 8006b78:	bf00      	nop
 8006b7a:	3714      	adds	r7, #20
 8006b7c:	46bd      	mov	sp, r7
 8006b7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b82:	4770      	bx	lr

08006b84 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8006b84:	b480      	push	{r7}
 8006b86:	b087      	sub	sp, #28
 8006b88:	af00      	add	r7, sp, #0
 8006b8a:	60f8      	str	r0, [r7, #12]
 8006b8c:	60b9      	str	r1, [r7, #8]
 8006b8e:	607a      	str	r2, [r7, #4]
 8006b90:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8006b92:	68fb      	ldr	r3, [r7, #12]
 8006b94:	689b      	ldr	r3, [r3, #8]
 8006b96:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8006b98:	697b      	ldr	r3, [r7, #20]
 8006b9a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8006b9e:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8006ba0:	683b      	ldr	r3, [r7, #0]
 8006ba2:	021a      	lsls	r2, r3, #8
 8006ba4:	687b      	ldr	r3, [r7, #4]
 8006ba6:	431a      	orrs	r2, r3
 8006ba8:	68bb      	ldr	r3, [r7, #8]
 8006baa:	4313      	orrs	r3, r2
 8006bac:	697a      	ldr	r2, [r7, #20]
 8006bae:	4313      	orrs	r3, r2
 8006bb0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8006bb2:	68fb      	ldr	r3, [r7, #12]
 8006bb4:	697a      	ldr	r2, [r7, #20]
 8006bb6:	609a      	str	r2, [r3, #8]
}
 8006bb8:	bf00      	nop
 8006bba:	371c      	adds	r7, #28
 8006bbc:	46bd      	mov	sp, r7
 8006bbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006bc2:	4770      	bx	lr

08006bc4 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8006bc4:	b480      	push	{r7}
 8006bc6:	b085      	sub	sp, #20
 8006bc8:	af00      	add	r7, sp, #0
 8006bca:	6078      	str	r0, [r7, #4]
 8006bcc:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8006bce:	687b      	ldr	r3, [r7, #4]
 8006bd0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006bd4:	2b01      	cmp	r3, #1
 8006bd6:	d101      	bne.n	8006bdc <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8006bd8:	2302      	movs	r3, #2
 8006bda:	e074      	b.n	8006cc6 <HAL_TIMEx_MasterConfigSynchronization+0x102>
 8006bdc:	687b      	ldr	r3, [r7, #4]
 8006bde:	2201      	movs	r2, #1
 8006be0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006be4:	687b      	ldr	r3, [r7, #4]
 8006be6:	2202      	movs	r2, #2
 8006be8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8006bec:	687b      	ldr	r3, [r7, #4]
 8006bee:	681b      	ldr	r3, [r3, #0]
 8006bf0:	685b      	ldr	r3, [r3, #4]
 8006bf2:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8006bf4:	687b      	ldr	r3, [r7, #4]
 8006bf6:	681b      	ldr	r3, [r3, #0]
 8006bf8:	689b      	ldr	r3, [r3, #8]
 8006bfa:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8006bfc:	687b      	ldr	r3, [r7, #4]
 8006bfe:	681b      	ldr	r3, [r3, #0]
 8006c00:	4a34      	ldr	r2, [pc, #208]	; (8006cd4 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 8006c02:	4293      	cmp	r3, r2
 8006c04:	d009      	beq.n	8006c1a <HAL_TIMEx_MasterConfigSynchronization+0x56>
 8006c06:	687b      	ldr	r3, [r7, #4]
 8006c08:	681b      	ldr	r3, [r3, #0]
 8006c0a:	4a33      	ldr	r2, [pc, #204]	; (8006cd8 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 8006c0c:	4293      	cmp	r3, r2
 8006c0e:	d004      	beq.n	8006c1a <HAL_TIMEx_MasterConfigSynchronization+0x56>
 8006c10:	687b      	ldr	r3, [r7, #4]
 8006c12:	681b      	ldr	r3, [r3, #0]
 8006c14:	4a31      	ldr	r2, [pc, #196]	; (8006cdc <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 8006c16:	4293      	cmp	r3, r2
 8006c18:	d108      	bne.n	8006c2c <HAL_TIMEx_MasterConfigSynchronization+0x68>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8006c1a:	68fb      	ldr	r3, [r7, #12]
 8006c1c:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8006c20:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8006c22:	683b      	ldr	r3, [r7, #0]
 8006c24:	685b      	ldr	r3, [r3, #4]
 8006c26:	68fa      	ldr	r2, [r7, #12]
 8006c28:	4313      	orrs	r3, r2
 8006c2a:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8006c2c:	68fb      	ldr	r3, [r7, #12]
 8006c2e:	f023 7300 	bic.w	r3, r3, #33554432	; 0x2000000
 8006c32:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006c36:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8006c38:	683b      	ldr	r3, [r7, #0]
 8006c3a:	681b      	ldr	r3, [r3, #0]
 8006c3c:	68fa      	ldr	r2, [r7, #12]
 8006c3e:	4313      	orrs	r3, r2
 8006c40:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8006c42:	687b      	ldr	r3, [r7, #4]
 8006c44:	681b      	ldr	r3, [r3, #0]
 8006c46:	68fa      	ldr	r2, [r7, #12]
 8006c48:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006c4a:	687b      	ldr	r3, [r7, #4]
 8006c4c:	681b      	ldr	r3, [r3, #0]
 8006c4e:	4a21      	ldr	r2, [pc, #132]	; (8006cd4 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 8006c50:	4293      	cmp	r3, r2
 8006c52:	d022      	beq.n	8006c9a <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8006c54:	687b      	ldr	r3, [r7, #4]
 8006c56:	681b      	ldr	r3, [r3, #0]
 8006c58:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006c5c:	d01d      	beq.n	8006c9a <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8006c5e:	687b      	ldr	r3, [r7, #4]
 8006c60:	681b      	ldr	r3, [r3, #0]
 8006c62:	4a1f      	ldr	r2, [pc, #124]	; (8006ce0 <HAL_TIMEx_MasterConfigSynchronization+0x11c>)
 8006c64:	4293      	cmp	r3, r2
 8006c66:	d018      	beq.n	8006c9a <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8006c68:	687b      	ldr	r3, [r7, #4]
 8006c6a:	681b      	ldr	r3, [r3, #0]
 8006c6c:	4a1d      	ldr	r2, [pc, #116]	; (8006ce4 <HAL_TIMEx_MasterConfigSynchronization+0x120>)
 8006c6e:	4293      	cmp	r3, r2
 8006c70:	d013      	beq.n	8006c9a <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8006c72:	687b      	ldr	r3, [r7, #4]
 8006c74:	681b      	ldr	r3, [r3, #0]
 8006c76:	4a1c      	ldr	r2, [pc, #112]	; (8006ce8 <HAL_TIMEx_MasterConfigSynchronization+0x124>)
 8006c78:	4293      	cmp	r3, r2
 8006c7a:	d00e      	beq.n	8006c9a <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8006c7c:	687b      	ldr	r3, [r7, #4]
 8006c7e:	681b      	ldr	r3, [r3, #0]
 8006c80:	4a15      	ldr	r2, [pc, #84]	; (8006cd8 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 8006c82:	4293      	cmp	r3, r2
 8006c84:	d009      	beq.n	8006c9a <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8006c86:	687b      	ldr	r3, [r7, #4]
 8006c88:	681b      	ldr	r3, [r3, #0]
 8006c8a:	4a18      	ldr	r2, [pc, #96]	; (8006cec <HAL_TIMEx_MasterConfigSynchronization+0x128>)
 8006c8c:	4293      	cmp	r3, r2
 8006c8e:	d004      	beq.n	8006c9a <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8006c90:	687b      	ldr	r3, [r7, #4]
 8006c92:	681b      	ldr	r3, [r3, #0]
 8006c94:	4a11      	ldr	r2, [pc, #68]	; (8006cdc <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 8006c96:	4293      	cmp	r3, r2
 8006c98:	d10c      	bne.n	8006cb4 <HAL_TIMEx_MasterConfigSynchronization+0xf0>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8006c9a:	68bb      	ldr	r3, [r7, #8]
 8006c9c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8006ca0:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8006ca2:	683b      	ldr	r3, [r7, #0]
 8006ca4:	689b      	ldr	r3, [r3, #8]
 8006ca6:	68ba      	ldr	r2, [r7, #8]
 8006ca8:	4313      	orrs	r3, r2
 8006caa:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8006cac:	687b      	ldr	r3, [r7, #4]
 8006cae:	681b      	ldr	r3, [r3, #0]
 8006cb0:	68ba      	ldr	r2, [r7, #8]
 8006cb2:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8006cb4:	687b      	ldr	r3, [r7, #4]
 8006cb6:	2201      	movs	r2, #1
 8006cb8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8006cbc:	687b      	ldr	r3, [r7, #4]
 8006cbe:	2200      	movs	r2, #0
 8006cc0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8006cc4:	2300      	movs	r3, #0
}
 8006cc6:	4618      	mov	r0, r3
 8006cc8:	3714      	adds	r7, #20
 8006cca:	46bd      	mov	sp, r7
 8006ccc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006cd0:	4770      	bx	lr
 8006cd2:	bf00      	nop
 8006cd4:	40012c00 	.word	0x40012c00
 8006cd8:	40013400 	.word	0x40013400
 8006cdc:	40015000 	.word	0x40015000
 8006ce0:	40000400 	.word	0x40000400
 8006ce4:	40000800 	.word	0x40000800
 8006ce8:	40000c00 	.word	0x40000c00
 8006cec:	40014000 	.word	0x40014000

08006cf0 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8006cf0:	b480      	push	{r7}
 8006cf2:	b085      	sub	sp, #20
 8006cf4:	af00      	add	r7, sp, #0
 8006cf6:	6078      	str	r0, [r7, #4]
 8006cf8:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8006cfa:	2300      	movs	r3, #0
 8006cfc:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8006cfe:	687b      	ldr	r3, [r7, #4]
 8006d00:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006d04:	2b01      	cmp	r3, #1
 8006d06:	d101      	bne.n	8006d0c <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8006d08:	2302      	movs	r3, #2
 8006d0a:	e096      	b.n	8006e3a <HAL_TIMEx_ConfigBreakDeadTime+0x14a>
 8006d0c:	687b      	ldr	r3, [r7, #4]
 8006d0e:	2201      	movs	r2, #1
 8006d10:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8006d14:	68fb      	ldr	r3, [r7, #12]
 8006d16:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8006d1a:	683b      	ldr	r3, [r7, #0]
 8006d1c:	68db      	ldr	r3, [r3, #12]
 8006d1e:	4313      	orrs	r3, r2
 8006d20:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8006d22:	68fb      	ldr	r3, [r7, #12]
 8006d24:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8006d28:	683b      	ldr	r3, [r7, #0]
 8006d2a:	689b      	ldr	r3, [r3, #8]
 8006d2c:	4313      	orrs	r3, r2
 8006d2e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8006d30:	68fb      	ldr	r3, [r7, #12]
 8006d32:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8006d36:	683b      	ldr	r3, [r7, #0]
 8006d38:	685b      	ldr	r3, [r3, #4]
 8006d3a:	4313      	orrs	r3, r2
 8006d3c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8006d3e:	68fb      	ldr	r3, [r7, #12]
 8006d40:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8006d44:	683b      	ldr	r3, [r7, #0]
 8006d46:	681b      	ldr	r3, [r3, #0]
 8006d48:	4313      	orrs	r3, r2
 8006d4a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8006d4c:	68fb      	ldr	r3, [r7, #12]
 8006d4e:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8006d52:	683b      	ldr	r3, [r7, #0]
 8006d54:	691b      	ldr	r3, [r3, #16]
 8006d56:	4313      	orrs	r3, r2
 8006d58:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8006d5a:	68fb      	ldr	r3, [r7, #12]
 8006d5c:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8006d60:	683b      	ldr	r3, [r7, #0]
 8006d62:	695b      	ldr	r3, [r3, #20]
 8006d64:	4313      	orrs	r3, r2
 8006d66:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8006d68:	68fb      	ldr	r3, [r7, #12]
 8006d6a:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8006d6e:	683b      	ldr	r3, [r7, #0]
 8006d70:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006d72:	4313      	orrs	r3, r2
 8006d74:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 8006d76:	68fb      	ldr	r3, [r7, #12]
 8006d78:	f423 2270 	bic.w	r2, r3, #983040	; 0xf0000
 8006d7c:	683b      	ldr	r3, [r7, #0]
 8006d7e:	699b      	ldr	r3, [r3, #24]
 8006d80:	041b      	lsls	r3, r3, #16
 8006d82:	4313      	orrs	r3, r2
 8006d84:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_ADVANCED_INSTANCE(htim->Instance))
 8006d86:	687b      	ldr	r3, [r7, #4]
 8006d88:	681b      	ldr	r3, [r3, #0]
 8006d8a:	4a2f      	ldr	r2, [pc, #188]	; (8006e48 <HAL_TIMEx_ConfigBreakDeadTime+0x158>)
 8006d8c:	4293      	cmp	r3, r2
 8006d8e:	d009      	beq.n	8006da4 <HAL_TIMEx_ConfigBreakDeadTime+0xb4>
 8006d90:	687b      	ldr	r3, [r7, #4]
 8006d92:	681b      	ldr	r3, [r3, #0]
 8006d94:	4a2d      	ldr	r2, [pc, #180]	; (8006e4c <HAL_TIMEx_ConfigBreakDeadTime+0x15c>)
 8006d96:	4293      	cmp	r3, r2
 8006d98:	d004      	beq.n	8006da4 <HAL_TIMEx_ConfigBreakDeadTime+0xb4>
 8006d9a:	687b      	ldr	r3, [r7, #4]
 8006d9c:	681b      	ldr	r3, [r3, #0]
 8006d9e:	4a2c      	ldr	r2, [pc, #176]	; (8006e50 <HAL_TIMEx_ConfigBreakDeadTime+0x160>)
 8006da0:	4293      	cmp	r3, r2
 8006da2:	d106      	bne.n	8006db2 <HAL_TIMEx_ConfigBreakDeadTime+0xc2>
  {
    /* Check the parameters */
    assert_param(IS_TIM_BREAK_AFMODE(sBreakDeadTimeConfig->BreakAFMode));

    /* Set BREAK AF mode */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BKBID, sBreakDeadTimeConfig->BreakAFMode);
 8006da4:	68fb      	ldr	r3, [r7, #12]
 8006da6:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 8006daa:	683b      	ldr	r3, [r7, #0]
 8006dac:	69db      	ldr	r3, [r3, #28]
 8006dae:	4313      	orrs	r3, r2
 8006db0:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 8006db2:	687b      	ldr	r3, [r7, #4]
 8006db4:	681b      	ldr	r3, [r3, #0]
 8006db6:	4a24      	ldr	r2, [pc, #144]	; (8006e48 <HAL_TIMEx_ConfigBreakDeadTime+0x158>)
 8006db8:	4293      	cmp	r3, r2
 8006dba:	d009      	beq.n	8006dd0 <HAL_TIMEx_ConfigBreakDeadTime+0xe0>
 8006dbc:	687b      	ldr	r3, [r7, #4]
 8006dbe:	681b      	ldr	r3, [r3, #0]
 8006dc0:	4a22      	ldr	r2, [pc, #136]	; (8006e4c <HAL_TIMEx_ConfigBreakDeadTime+0x15c>)
 8006dc2:	4293      	cmp	r3, r2
 8006dc4:	d004      	beq.n	8006dd0 <HAL_TIMEx_ConfigBreakDeadTime+0xe0>
 8006dc6:	687b      	ldr	r3, [r7, #4]
 8006dc8:	681b      	ldr	r3, [r3, #0]
 8006dca:	4a21      	ldr	r2, [pc, #132]	; (8006e50 <HAL_TIMEx_ConfigBreakDeadTime+0x160>)
 8006dcc:	4293      	cmp	r3, r2
 8006dce:	d12b      	bne.n	8006e28 <HAL_TIMEx_ConfigBreakDeadTime+0x138>
    assert_param(IS_TIM_BREAK2_STATE(sBreakDeadTimeConfig->Break2State));
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 8006dd0:	68fb      	ldr	r3, [r7, #12]
 8006dd2:	f423 0270 	bic.w	r2, r3, #15728640	; 0xf00000
 8006dd6:	683b      	ldr	r3, [r7, #0]
 8006dd8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006dda:	051b      	lsls	r3, r3, #20
 8006ddc:	4313      	orrs	r3, r2
 8006dde:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 8006de0:	68fb      	ldr	r3, [r7, #12]
 8006de2:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 8006de6:	683b      	ldr	r3, [r7, #0]
 8006de8:	6a1b      	ldr	r3, [r3, #32]
 8006dea:	4313      	orrs	r3, r2
 8006dec:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 8006dee:	68fb      	ldr	r3, [r7, #12]
 8006df0:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 8006df4:	683b      	ldr	r3, [r7, #0]
 8006df6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006df8:	4313      	orrs	r3, r2
 8006dfa:	60fb      	str	r3, [r7, #12]

    if (IS_TIM_ADVANCED_INSTANCE(htim->Instance))
 8006dfc:	687b      	ldr	r3, [r7, #4]
 8006dfe:	681b      	ldr	r3, [r3, #0]
 8006e00:	4a11      	ldr	r2, [pc, #68]	; (8006e48 <HAL_TIMEx_ConfigBreakDeadTime+0x158>)
 8006e02:	4293      	cmp	r3, r2
 8006e04:	d009      	beq.n	8006e1a <HAL_TIMEx_ConfigBreakDeadTime+0x12a>
 8006e06:	687b      	ldr	r3, [r7, #4]
 8006e08:	681b      	ldr	r3, [r3, #0]
 8006e0a:	4a10      	ldr	r2, [pc, #64]	; (8006e4c <HAL_TIMEx_ConfigBreakDeadTime+0x15c>)
 8006e0c:	4293      	cmp	r3, r2
 8006e0e:	d004      	beq.n	8006e1a <HAL_TIMEx_ConfigBreakDeadTime+0x12a>
 8006e10:	687b      	ldr	r3, [r7, #4]
 8006e12:	681b      	ldr	r3, [r3, #0]
 8006e14:	4a0e      	ldr	r2, [pc, #56]	; (8006e50 <HAL_TIMEx_ConfigBreakDeadTime+0x160>)
 8006e16:	4293      	cmp	r3, r2
 8006e18:	d106      	bne.n	8006e28 <HAL_TIMEx_ConfigBreakDeadTime+0x138>
    {
      /* Check the parameters */
      assert_param(IS_TIM_BREAK2_AFMODE(sBreakDeadTimeConfig->Break2AFMode));

      /* Set BREAK2 AF mode */
      MODIFY_REG(tmpbdtr, TIM_BDTR_BK2BID, sBreakDeadTimeConfig->Break2AFMode);
 8006e1a:	68fb      	ldr	r3, [r7, #12]
 8006e1c:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
 8006e20:	683b      	ldr	r3, [r7, #0]
 8006e22:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006e24:	4313      	orrs	r3, r2
 8006e26:	60fb      	str	r3, [r7, #12]
    }
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8006e28:	687b      	ldr	r3, [r7, #4]
 8006e2a:	681b      	ldr	r3, [r3, #0]
 8006e2c:	68fa      	ldr	r2, [r7, #12]
 8006e2e:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 8006e30:	687b      	ldr	r3, [r7, #4]
 8006e32:	2200      	movs	r2, #0
 8006e34:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8006e38:	2300      	movs	r3, #0
}
 8006e3a:	4618      	mov	r0, r3
 8006e3c:	3714      	adds	r7, #20
 8006e3e:	46bd      	mov	sp, r7
 8006e40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e44:	4770      	bx	lr
 8006e46:	bf00      	nop
 8006e48:	40012c00 	.word	0x40012c00
 8006e4c:	40013400 	.word	0x40013400
 8006e50:	40015000 	.word	0x40015000

08006e54 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8006e54:	b480      	push	{r7}
 8006e56:	b083      	sub	sp, #12
 8006e58:	af00      	add	r7, sp, #0
 8006e5a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8006e5c:	bf00      	nop
 8006e5e:	370c      	adds	r7, #12
 8006e60:	46bd      	mov	sp, r7
 8006e62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e66:	4770      	bx	lr

08006e68 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8006e68:	b480      	push	{r7}
 8006e6a:	b083      	sub	sp, #12
 8006e6c:	af00      	add	r7, sp, #0
 8006e6e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8006e70:	bf00      	nop
 8006e72:	370c      	adds	r7, #12
 8006e74:	46bd      	mov	sp, r7
 8006e76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e7a:	4770      	bx	lr

08006e7c <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8006e7c:	b480      	push	{r7}
 8006e7e:	b083      	sub	sp, #12
 8006e80:	af00      	add	r7, sp, #0
 8006e82:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8006e84:	bf00      	nop
 8006e86:	370c      	adds	r7, #12
 8006e88:	46bd      	mov	sp, r7
 8006e8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e8e:	4770      	bx	lr

08006e90 <HAL_TIMEx_EncoderIndexCallback>:
  * @brief  Encoder index callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_EncoderIndexCallback(TIM_HandleTypeDef *htim)
{
 8006e90:	b480      	push	{r7}
 8006e92:	b083      	sub	sp, #12
 8006e94:	af00      	add	r7, sp, #0
 8006e96:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_EncoderIndexCallback could be implemented in the user file
   */
}
 8006e98:	bf00      	nop
 8006e9a:	370c      	adds	r7, #12
 8006e9c:	46bd      	mov	sp, r7
 8006e9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ea2:	4770      	bx	lr

08006ea4 <HAL_TIMEx_DirectionChangeCallback>:
  * @brief  Direction change callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_DirectionChangeCallback(TIM_HandleTypeDef *htim)
{
 8006ea4:	b480      	push	{r7}
 8006ea6:	b083      	sub	sp, #12
 8006ea8:	af00      	add	r7, sp, #0
 8006eaa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_DirectionChangeCallback could be implemented in the user file
   */
}
 8006eac:	bf00      	nop
 8006eae:	370c      	adds	r7, #12
 8006eb0:	46bd      	mov	sp, r7
 8006eb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006eb6:	4770      	bx	lr

08006eb8 <HAL_TIMEx_IndexErrorCallback>:
  * @brief  Index error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_IndexErrorCallback(TIM_HandleTypeDef *htim)
{
 8006eb8:	b480      	push	{r7}
 8006eba:	b083      	sub	sp, #12
 8006ebc:	af00      	add	r7, sp, #0
 8006ebe:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_IndexErrorCallback could be implemented in the user file
   */
}
 8006ec0:	bf00      	nop
 8006ec2:	370c      	adds	r7, #12
 8006ec4:	46bd      	mov	sp, r7
 8006ec6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006eca:	4770      	bx	lr

08006ecc <HAL_TIMEx_TransitionErrorCallback>:
  * @brief  Transition error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_TransitionErrorCallback(TIM_HandleTypeDef *htim)
{
 8006ecc:	b480      	push	{r7}
 8006ece:	b083      	sub	sp, #12
 8006ed0:	af00      	add	r7, sp, #0
 8006ed2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_TransitionErrorCallback could be implemented in the user file
   */
}
 8006ed4:	bf00      	nop
 8006ed6:	370c      	adds	r7, #12
 8006ed8:	46bd      	mov	sp, r7
 8006eda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ede:	4770      	bx	lr

08006ee0 <LL_EXTI_EnableIT_0_31>:
{
 8006ee0:	b480      	push	{r7}
 8006ee2:	b083      	sub	sp, #12
 8006ee4:	af00      	add	r7, sp, #0
 8006ee6:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->IMR1, ExtiLine);
 8006ee8:	4b05      	ldr	r3, [pc, #20]	; (8006f00 <LL_EXTI_EnableIT_0_31+0x20>)
 8006eea:	681a      	ldr	r2, [r3, #0]
 8006eec:	4904      	ldr	r1, [pc, #16]	; (8006f00 <LL_EXTI_EnableIT_0_31+0x20>)
 8006eee:	687b      	ldr	r3, [r7, #4]
 8006ef0:	4313      	orrs	r3, r2
 8006ef2:	600b      	str	r3, [r1, #0]
}
 8006ef4:	bf00      	nop
 8006ef6:	370c      	adds	r7, #12
 8006ef8:	46bd      	mov	sp, r7
 8006efa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006efe:	4770      	bx	lr
 8006f00:	40010400 	.word	0x40010400

08006f04 <LL_EXTI_EnableIT_32_63>:
{
 8006f04:	b480      	push	{r7}
 8006f06:	b083      	sub	sp, #12
 8006f08:	af00      	add	r7, sp, #0
 8006f0a:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->IMR2, ExtiLine);
 8006f0c:	4b05      	ldr	r3, [pc, #20]	; (8006f24 <LL_EXTI_EnableIT_32_63+0x20>)
 8006f0e:	6a1a      	ldr	r2, [r3, #32]
 8006f10:	4904      	ldr	r1, [pc, #16]	; (8006f24 <LL_EXTI_EnableIT_32_63+0x20>)
 8006f12:	687b      	ldr	r3, [r7, #4]
 8006f14:	4313      	orrs	r3, r2
 8006f16:	620b      	str	r3, [r1, #32]
}
 8006f18:	bf00      	nop
 8006f1a:	370c      	adds	r7, #12
 8006f1c:	46bd      	mov	sp, r7
 8006f1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f22:	4770      	bx	lr
 8006f24:	40010400 	.word	0x40010400

08006f28 <LL_EXTI_DisableIT_0_31>:
{
 8006f28:	b480      	push	{r7}
 8006f2a:	b083      	sub	sp, #12
 8006f2c:	af00      	add	r7, sp, #0
 8006f2e:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->IMR1, ExtiLine);
 8006f30:	4b06      	ldr	r3, [pc, #24]	; (8006f4c <LL_EXTI_DisableIT_0_31+0x24>)
 8006f32:	681a      	ldr	r2, [r3, #0]
 8006f34:	687b      	ldr	r3, [r7, #4]
 8006f36:	43db      	mvns	r3, r3
 8006f38:	4904      	ldr	r1, [pc, #16]	; (8006f4c <LL_EXTI_DisableIT_0_31+0x24>)
 8006f3a:	4013      	ands	r3, r2
 8006f3c:	600b      	str	r3, [r1, #0]
}
 8006f3e:	bf00      	nop
 8006f40:	370c      	adds	r7, #12
 8006f42:	46bd      	mov	sp, r7
 8006f44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f48:	4770      	bx	lr
 8006f4a:	bf00      	nop
 8006f4c:	40010400 	.word	0x40010400

08006f50 <LL_EXTI_DisableIT_32_63>:
{
 8006f50:	b480      	push	{r7}
 8006f52:	b083      	sub	sp, #12
 8006f54:	af00      	add	r7, sp, #0
 8006f56:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->IMR2, ExtiLine);
 8006f58:	4b06      	ldr	r3, [pc, #24]	; (8006f74 <LL_EXTI_DisableIT_32_63+0x24>)
 8006f5a:	6a1a      	ldr	r2, [r3, #32]
 8006f5c:	687b      	ldr	r3, [r7, #4]
 8006f5e:	43db      	mvns	r3, r3
 8006f60:	4904      	ldr	r1, [pc, #16]	; (8006f74 <LL_EXTI_DisableIT_32_63+0x24>)
 8006f62:	4013      	ands	r3, r2
 8006f64:	620b      	str	r3, [r1, #32]
}
 8006f66:	bf00      	nop
 8006f68:	370c      	adds	r7, #12
 8006f6a:	46bd      	mov	sp, r7
 8006f6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f70:	4770      	bx	lr
 8006f72:	bf00      	nop
 8006f74:	40010400 	.word	0x40010400

08006f78 <LL_EXTI_EnableEvent_0_31>:
{
 8006f78:	b480      	push	{r7}
 8006f7a:	b083      	sub	sp, #12
 8006f7c:	af00      	add	r7, sp, #0
 8006f7e:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->EMR1, ExtiLine);
 8006f80:	4b05      	ldr	r3, [pc, #20]	; (8006f98 <LL_EXTI_EnableEvent_0_31+0x20>)
 8006f82:	685a      	ldr	r2, [r3, #4]
 8006f84:	4904      	ldr	r1, [pc, #16]	; (8006f98 <LL_EXTI_EnableEvent_0_31+0x20>)
 8006f86:	687b      	ldr	r3, [r7, #4]
 8006f88:	4313      	orrs	r3, r2
 8006f8a:	604b      	str	r3, [r1, #4]
}
 8006f8c:	bf00      	nop
 8006f8e:	370c      	adds	r7, #12
 8006f90:	46bd      	mov	sp, r7
 8006f92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f96:	4770      	bx	lr
 8006f98:	40010400 	.word	0x40010400

08006f9c <LL_EXTI_EnableEvent_32_63>:
{
 8006f9c:	b480      	push	{r7}
 8006f9e:	b083      	sub	sp, #12
 8006fa0:	af00      	add	r7, sp, #0
 8006fa2:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->EMR2, ExtiLine);
 8006fa4:	4b05      	ldr	r3, [pc, #20]	; (8006fbc <LL_EXTI_EnableEvent_32_63+0x20>)
 8006fa6:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8006fa8:	4904      	ldr	r1, [pc, #16]	; (8006fbc <LL_EXTI_EnableEvent_32_63+0x20>)
 8006faa:	687b      	ldr	r3, [r7, #4]
 8006fac:	4313      	orrs	r3, r2
 8006fae:	624b      	str	r3, [r1, #36]	; 0x24
}
 8006fb0:	bf00      	nop
 8006fb2:	370c      	adds	r7, #12
 8006fb4:	46bd      	mov	sp, r7
 8006fb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fba:	4770      	bx	lr
 8006fbc:	40010400 	.word	0x40010400

08006fc0 <LL_EXTI_DisableEvent_0_31>:
{
 8006fc0:	b480      	push	{r7}
 8006fc2:	b083      	sub	sp, #12
 8006fc4:	af00      	add	r7, sp, #0
 8006fc6:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->EMR1, ExtiLine);
 8006fc8:	4b06      	ldr	r3, [pc, #24]	; (8006fe4 <LL_EXTI_DisableEvent_0_31+0x24>)
 8006fca:	685a      	ldr	r2, [r3, #4]
 8006fcc:	687b      	ldr	r3, [r7, #4]
 8006fce:	43db      	mvns	r3, r3
 8006fd0:	4904      	ldr	r1, [pc, #16]	; (8006fe4 <LL_EXTI_DisableEvent_0_31+0x24>)
 8006fd2:	4013      	ands	r3, r2
 8006fd4:	604b      	str	r3, [r1, #4]
}
 8006fd6:	bf00      	nop
 8006fd8:	370c      	adds	r7, #12
 8006fda:	46bd      	mov	sp, r7
 8006fdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fe0:	4770      	bx	lr
 8006fe2:	bf00      	nop
 8006fe4:	40010400 	.word	0x40010400

08006fe8 <LL_EXTI_DisableEvent_32_63>:
{
 8006fe8:	b480      	push	{r7}
 8006fea:	b083      	sub	sp, #12
 8006fec:	af00      	add	r7, sp, #0
 8006fee:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->EMR2, ExtiLine);
 8006ff0:	4b06      	ldr	r3, [pc, #24]	; (800700c <LL_EXTI_DisableEvent_32_63+0x24>)
 8006ff2:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8006ff4:	687b      	ldr	r3, [r7, #4]
 8006ff6:	43db      	mvns	r3, r3
 8006ff8:	4904      	ldr	r1, [pc, #16]	; (800700c <LL_EXTI_DisableEvent_32_63+0x24>)
 8006ffa:	4013      	ands	r3, r2
 8006ffc:	624b      	str	r3, [r1, #36]	; 0x24
}
 8006ffe:	bf00      	nop
 8007000:	370c      	adds	r7, #12
 8007002:	46bd      	mov	sp, r7
 8007004:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007008:	4770      	bx	lr
 800700a:	bf00      	nop
 800700c:	40010400 	.word	0x40010400

08007010 <LL_EXTI_EnableRisingTrig_0_31>:
{
 8007010:	b480      	push	{r7}
 8007012:	b083      	sub	sp, #12
 8007014:	af00      	add	r7, sp, #0
 8007016:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->RTSR1, ExtiLine);
 8007018:	4b05      	ldr	r3, [pc, #20]	; (8007030 <LL_EXTI_EnableRisingTrig_0_31+0x20>)
 800701a:	689a      	ldr	r2, [r3, #8]
 800701c:	4904      	ldr	r1, [pc, #16]	; (8007030 <LL_EXTI_EnableRisingTrig_0_31+0x20>)
 800701e:	687b      	ldr	r3, [r7, #4]
 8007020:	4313      	orrs	r3, r2
 8007022:	608b      	str	r3, [r1, #8]
}
 8007024:	bf00      	nop
 8007026:	370c      	adds	r7, #12
 8007028:	46bd      	mov	sp, r7
 800702a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800702e:	4770      	bx	lr
 8007030:	40010400 	.word	0x40010400

08007034 <LL_EXTI_EnableRisingTrig_32_63>:
{
 8007034:	b480      	push	{r7}
 8007036:	b083      	sub	sp, #12
 8007038:	af00      	add	r7, sp, #0
 800703a:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->RTSR2, ExtiLine);
 800703c:	4b05      	ldr	r3, [pc, #20]	; (8007054 <LL_EXTI_EnableRisingTrig_32_63+0x20>)
 800703e:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8007040:	4904      	ldr	r1, [pc, #16]	; (8007054 <LL_EXTI_EnableRisingTrig_32_63+0x20>)
 8007042:	687b      	ldr	r3, [r7, #4]
 8007044:	4313      	orrs	r3, r2
 8007046:	628b      	str	r3, [r1, #40]	; 0x28
}
 8007048:	bf00      	nop
 800704a:	370c      	adds	r7, #12
 800704c:	46bd      	mov	sp, r7
 800704e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007052:	4770      	bx	lr
 8007054:	40010400 	.word	0x40010400

08007058 <LL_EXTI_DisableRisingTrig_0_31>:
{
 8007058:	b480      	push	{r7}
 800705a:	b083      	sub	sp, #12
 800705c:	af00      	add	r7, sp, #0
 800705e:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->RTSR1, ExtiLine);
 8007060:	4b06      	ldr	r3, [pc, #24]	; (800707c <LL_EXTI_DisableRisingTrig_0_31+0x24>)
 8007062:	689a      	ldr	r2, [r3, #8]
 8007064:	687b      	ldr	r3, [r7, #4]
 8007066:	43db      	mvns	r3, r3
 8007068:	4904      	ldr	r1, [pc, #16]	; (800707c <LL_EXTI_DisableRisingTrig_0_31+0x24>)
 800706a:	4013      	ands	r3, r2
 800706c:	608b      	str	r3, [r1, #8]
}
 800706e:	bf00      	nop
 8007070:	370c      	adds	r7, #12
 8007072:	46bd      	mov	sp, r7
 8007074:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007078:	4770      	bx	lr
 800707a:	bf00      	nop
 800707c:	40010400 	.word	0x40010400

08007080 <LL_EXTI_DisableRisingTrig_32_63>:
{
 8007080:	b480      	push	{r7}
 8007082:	b083      	sub	sp, #12
 8007084:	af00      	add	r7, sp, #0
 8007086:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->RTSR2, ExtiLine);
 8007088:	4b06      	ldr	r3, [pc, #24]	; (80070a4 <LL_EXTI_DisableRisingTrig_32_63+0x24>)
 800708a:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800708c:	687b      	ldr	r3, [r7, #4]
 800708e:	43db      	mvns	r3, r3
 8007090:	4904      	ldr	r1, [pc, #16]	; (80070a4 <LL_EXTI_DisableRisingTrig_32_63+0x24>)
 8007092:	4013      	ands	r3, r2
 8007094:	628b      	str	r3, [r1, #40]	; 0x28
}
 8007096:	bf00      	nop
 8007098:	370c      	adds	r7, #12
 800709a:	46bd      	mov	sp, r7
 800709c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070a0:	4770      	bx	lr
 80070a2:	bf00      	nop
 80070a4:	40010400 	.word	0x40010400

080070a8 <LL_EXTI_EnableFallingTrig_0_31>:
{
 80070a8:	b480      	push	{r7}
 80070aa:	b083      	sub	sp, #12
 80070ac:	af00      	add	r7, sp, #0
 80070ae:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->FTSR1, ExtiLine);
 80070b0:	4b05      	ldr	r3, [pc, #20]	; (80070c8 <LL_EXTI_EnableFallingTrig_0_31+0x20>)
 80070b2:	68da      	ldr	r2, [r3, #12]
 80070b4:	4904      	ldr	r1, [pc, #16]	; (80070c8 <LL_EXTI_EnableFallingTrig_0_31+0x20>)
 80070b6:	687b      	ldr	r3, [r7, #4]
 80070b8:	4313      	orrs	r3, r2
 80070ba:	60cb      	str	r3, [r1, #12]
}
 80070bc:	bf00      	nop
 80070be:	370c      	adds	r7, #12
 80070c0:	46bd      	mov	sp, r7
 80070c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070c6:	4770      	bx	lr
 80070c8:	40010400 	.word	0x40010400

080070cc <LL_EXTI_EnableFallingTrig_32_63>:
{
 80070cc:	b480      	push	{r7}
 80070ce:	b083      	sub	sp, #12
 80070d0:	af00      	add	r7, sp, #0
 80070d2:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->FTSR2, ExtiLine);
 80070d4:	4b05      	ldr	r3, [pc, #20]	; (80070ec <LL_EXTI_EnableFallingTrig_32_63+0x20>)
 80070d6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80070d8:	4904      	ldr	r1, [pc, #16]	; (80070ec <LL_EXTI_EnableFallingTrig_32_63+0x20>)
 80070da:	687b      	ldr	r3, [r7, #4]
 80070dc:	4313      	orrs	r3, r2
 80070de:	62cb      	str	r3, [r1, #44]	; 0x2c
}
 80070e0:	bf00      	nop
 80070e2:	370c      	adds	r7, #12
 80070e4:	46bd      	mov	sp, r7
 80070e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070ea:	4770      	bx	lr
 80070ec:	40010400 	.word	0x40010400

080070f0 <LL_EXTI_DisableFallingTrig_0_31>:
{
 80070f0:	b480      	push	{r7}
 80070f2:	b083      	sub	sp, #12
 80070f4:	af00      	add	r7, sp, #0
 80070f6:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->FTSR1, ExtiLine);
 80070f8:	4b06      	ldr	r3, [pc, #24]	; (8007114 <LL_EXTI_DisableFallingTrig_0_31+0x24>)
 80070fa:	68da      	ldr	r2, [r3, #12]
 80070fc:	687b      	ldr	r3, [r7, #4]
 80070fe:	43db      	mvns	r3, r3
 8007100:	4904      	ldr	r1, [pc, #16]	; (8007114 <LL_EXTI_DisableFallingTrig_0_31+0x24>)
 8007102:	4013      	ands	r3, r2
 8007104:	60cb      	str	r3, [r1, #12]
}
 8007106:	bf00      	nop
 8007108:	370c      	adds	r7, #12
 800710a:	46bd      	mov	sp, r7
 800710c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007110:	4770      	bx	lr
 8007112:	bf00      	nop
 8007114:	40010400 	.word	0x40010400

08007118 <LL_EXTI_DisableFallingTrig_32_63>:
{
 8007118:	b480      	push	{r7}
 800711a:	b083      	sub	sp, #12
 800711c:	af00      	add	r7, sp, #0
 800711e:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->FTSR2, ExtiLine);
 8007120:	4b06      	ldr	r3, [pc, #24]	; (800713c <LL_EXTI_DisableFallingTrig_32_63+0x24>)
 8007122:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007124:	687b      	ldr	r3, [r7, #4]
 8007126:	43db      	mvns	r3, r3
 8007128:	4904      	ldr	r1, [pc, #16]	; (800713c <LL_EXTI_DisableFallingTrig_32_63+0x24>)
 800712a:	4013      	ands	r3, r2
 800712c:	62cb      	str	r3, [r1, #44]	; 0x2c
}
 800712e:	bf00      	nop
 8007130:	370c      	adds	r7, #12
 8007132:	46bd      	mov	sp, r7
 8007134:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007138:	4770      	bx	lr
 800713a:	bf00      	nop
 800713c:	40010400 	.word	0x40010400

08007140 <LL_EXTI_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - 0x00: EXTI registers are initialized
  *          - any other calue : wrong configuration
  */
uint32_t LL_EXTI_Init(LL_EXTI_InitTypeDef *EXTI_InitStruct)
{
 8007140:	b580      	push	{r7, lr}
 8007142:	b084      	sub	sp, #16
 8007144:	af00      	add	r7, sp, #0
 8007146:	6078      	str	r0, [r7, #4]
  uint32_t status = 0x00u;
 8007148:	2300      	movs	r3, #0
 800714a:	60fb      	str	r3, [r7, #12]
  assert_param(IS_LL_EXTI_LINE_32_63(EXTI_InitStruct->Line_32_63));
  assert_param(IS_FUNCTIONAL_STATE(EXTI_InitStruct->LineCommand));
  assert_param(IS_LL_EXTI_MODE(EXTI_InitStruct->Mode));

  /* ENABLE LineCommand */
  if (EXTI_InitStruct->LineCommand != DISABLE)
 800714c:	687b      	ldr	r3, [r7, #4]
 800714e:	7a1b      	ldrb	r3, [r3, #8]
 8007150:	2b00      	cmp	r3, #0
 8007152:	f000 80c8 	beq.w	80072e6 <LL_EXTI_Init+0x1a6>
  {
    assert_param(IS_LL_EXTI_TRIGGER(EXTI_InitStruct->Trigger));

    /* Configure EXTI Lines in range from 0 to 31 */
    if (EXTI_InitStruct->Line_0_31 != LL_EXTI_LINE_NONE)
 8007156:	687b      	ldr	r3, [r7, #4]
 8007158:	681b      	ldr	r3, [r3, #0]
 800715a:	2b00      	cmp	r3, #0
 800715c:	d05d      	beq.n	800721a <LL_EXTI_Init+0xda>
    {
      switch (EXTI_InitStruct->Mode)
 800715e:	687b      	ldr	r3, [r7, #4]
 8007160:	7a5b      	ldrb	r3, [r3, #9]
 8007162:	2b01      	cmp	r3, #1
 8007164:	d00e      	beq.n	8007184 <LL_EXTI_Init+0x44>
 8007166:	2b02      	cmp	r3, #2
 8007168:	d017      	beq.n	800719a <LL_EXTI_Init+0x5a>
 800716a:	2b00      	cmp	r3, #0
 800716c:	d120      	bne.n	80071b0 <LL_EXTI_Init+0x70>
      {
        case LL_EXTI_MODE_IT:
          /* First Disable Event on provided Lines */
          LL_EXTI_DisableEvent_0_31(EXTI_InitStruct->Line_0_31);
 800716e:	687b      	ldr	r3, [r7, #4]
 8007170:	681b      	ldr	r3, [r3, #0]
 8007172:	4618      	mov	r0, r3
 8007174:	f7ff ff24 	bl	8006fc0 <LL_EXTI_DisableEvent_0_31>
          /* Then Enable IT on provided Lines */
          LL_EXTI_EnableIT_0_31(EXTI_InitStruct->Line_0_31);
 8007178:	687b      	ldr	r3, [r7, #4]
 800717a:	681b      	ldr	r3, [r3, #0]
 800717c:	4618      	mov	r0, r3
 800717e:	f7ff feaf 	bl	8006ee0 <LL_EXTI_EnableIT_0_31>
          break;
 8007182:	e018      	b.n	80071b6 <LL_EXTI_Init+0x76>
        case LL_EXTI_MODE_EVENT:
          /* First Disable IT on provided Lines */
          LL_EXTI_DisableIT_0_31(EXTI_InitStruct->Line_0_31);
 8007184:	687b      	ldr	r3, [r7, #4]
 8007186:	681b      	ldr	r3, [r3, #0]
 8007188:	4618      	mov	r0, r3
 800718a:	f7ff fecd 	bl	8006f28 <LL_EXTI_DisableIT_0_31>
          /* Then Enable Event on provided Lines */
          LL_EXTI_EnableEvent_0_31(EXTI_InitStruct->Line_0_31);
 800718e:	687b      	ldr	r3, [r7, #4]
 8007190:	681b      	ldr	r3, [r3, #0]
 8007192:	4618      	mov	r0, r3
 8007194:	f7ff fef0 	bl	8006f78 <LL_EXTI_EnableEvent_0_31>
          break;
 8007198:	e00d      	b.n	80071b6 <LL_EXTI_Init+0x76>
        case LL_EXTI_MODE_IT_EVENT:
          /* Directly Enable IT on provided Lines */
          LL_EXTI_EnableIT_0_31(EXTI_InitStruct->Line_0_31);
 800719a:	687b      	ldr	r3, [r7, #4]
 800719c:	681b      	ldr	r3, [r3, #0]
 800719e:	4618      	mov	r0, r3
 80071a0:	f7ff fe9e 	bl	8006ee0 <LL_EXTI_EnableIT_0_31>
          /* Directly Enable Event on provided Lines */
          LL_EXTI_EnableEvent_0_31(EXTI_InitStruct->Line_0_31);
 80071a4:	687b      	ldr	r3, [r7, #4]
 80071a6:	681b      	ldr	r3, [r3, #0]
 80071a8:	4618      	mov	r0, r3
 80071aa:	f7ff fee5 	bl	8006f78 <LL_EXTI_EnableEvent_0_31>
          break;
 80071ae:	e002      	b.n	80071b6 <LL_EXTI_Init+0x76>
        default:
          status = 0x01u;
 80071b0:	2301      	movs	r3, #1
 80071b2:	60fb      	str	r3, [r7, #12]
          break;
 80071b4:	bf00      	nop
      }
      if (EXTI_InitStruct->Trigger != LL_EXTI_TRIGGER_NONE)
 80071b6:	687b      	ldr	r3, [r7, #4]
 80071b8:	7a9b      	ldrb	r3, [r3, #10]
 80071ba:	2b00      	cmp	r3, #0
 80071bc:	d02d      	beq.n	800721a <LL_EXTI_Init+0xda>
      {
        switch (EXTI_InitStruct->Trigger)
 80071be:	687b      	ldr	r3, [r7, #4]
 80071c0:	7a9b      	ldrb	r3, [r3, #10]
 80071c2:	2b02      	cmp	r3, #2
 80071c4:	d00e      	beq.n	80071e4 <LL_EXTI_Init+0xa4>
 80071c6:	2b03      	cmp	r3, #3
 80071c8:	d017      	beq.n	80071fa <LL_EXTI_Init+0xba>
 80071ca:	2b01      	cmp	r3, #1
 80071cc:	d120      	bne.n	8007210 <LL_EXTI_Init+0xd0>
        {
          case LL_EXTI_TRIGGER_RISING:
            /* First Disable Falling Trigger on provided Lines */
            LL_EXTI_DisableFallingTrig_0_31(EXTI_InitStruct->Line_0_31);
 80071ce:	687b      	ldr	r3, [r7, #4]
 80071d0:	681b      	ldr	r3, [r3, #0]
 80071d2:	4618      	mov	r0, r3
 80071d4:	f7ff ff8c 	bl	80070f0 <LL_EXTI_DisableFallingTrig_0_31>
            /* Then Enable Rising Trigger on provided Lines */
            LL_EXTI_EnableRisingTrig_0_31(EXTI_InitStruct->Line_0_31);
 80071d8:	687b      	ldr	r3, [r7, #4]
 80071da:	681b      	ldr	r3, [r3, #0]
 80071dc:	4618      	mov	r0, r3
 80071de:	f7ff ff17 	bl	8007010 <LL_EXTI_EnableRisingTrig_0_31>
            break;
 80071e2:	e01b      	b.n	800721c <LL_EXTI_Init+0xdc>
          case LL_EXTI_TRIGGER_FALLING:
            /* First Disable Rising Trigger on provided Lines */
            LL_EXTI_DisableRisingTrig_0_31(EXTI_InitStruct->Line_0_31);
 80071e4:	687b      	ldr	r3, [r7, #4]
 80071e6:	681b      	ldr	r3, [r3, #0]
 80071e8:	4618      	mov	r0, r3
 80071ea:	f7ff ff35 	bl	8007058 <LL_EXTI_DisableRisingTrig_0_31>
            /* Then Enable Falling Trigger on provided Lines */
            LL_EXTI_EnableFallingTrig_0_31(EXTI_InitStruct->Line_0_31);
 80071ee:	687b      	ldr	r3, [r7, #4]
 80071f0:	681b      	ldr	r3, [r3, #0]
 80071f2:	4618      	mov	r0, r3
 80071f4:	f7ff ff58 	bl	80070a8 <LL_EXTI_EnableFallingTrig_0_31>
            break;
 80071f8:	e010      	b.n	800721c <LL_EXTI_Init+0xdc>
          case LL_EXTI_TRIGGER_RISING_FALLING:
            /* Enable Rising Trigger on provided Lines */
            LL_EXTI_EnableRisingTrig_0_31(EXTI_InitStruct->Line_0_31);
 80071fa:	687b      	ldr	r3, [r7, #4]
 80071fc:	681b      	ldr	r3, [r3, #0]
 80071fe:	4618      	mov	r0, r3
 8007200:	f7ff ff06 	bl	8007010 <LL_EXTI_EnableRisingTrig_0_31>
            /* Enable Falling Trigger on provided Lines */
            LL_EXTI_EnableFallingTrig_0_31(EXTI_InitStruct->Line_0_31);
 8007204:	687b      	ldr	r3, [r7, #4]
 8007206:	681b      	ldr	r3, [r3, #0]
 8007208:	4618      	mov	r0, r3
 800720a:	f7ff ff4d 	bl	80070a8 <LL_EXTI_EnableFallingTrig_0_31>
            break;
 800720e:	e005      	b.n	800721c <LL_EXTI_Init+0xdc>
          default:
            status |= 0x02u;
 8007210:	68fb      	ldr	r3, [r7, #12]
 8007212:	f043 0302 	orr.w	r3, r3, #2
 8007216:	60fb      	str	r3, [r7, #12]
            break;
 8007218:	e000      	b.n	800721c <LL_EXTI_Init+0xdc>
        }
      }
 800721a:	bf00      	nop
    }
    /* Configure EXTI Lines in range from 32 to 63 */
    if (EXTI_InitStruct->Line_32_63 != LL_EXTI_LINE_NONE)
 800721c:	687b      	ldr	r3, [r7, #4]
 800721e:	685b      	ldr	r3, [r3, #4]
 8007220:	2b00      	cmp	r3, #0
 8007222:	d075      	beq.n	8007310 <LL_EXTI_Init+0x1d0>
    {
      switch (EXTI_InitStruct->Mode)
 8007224:	687b      	ldr	r3, [r7, #4]
 8007226:	7a5b      	ldrb	r3, [r3, #9]
 8007228:	2b01      	cmp	r3, #1
 800722a:	d00e      	beq.n	800724a <LL_EXTI_Init+0x10a>
 800722c:	2b02      	cmp	r3, #2
 800722e:	d017      	beq.n	8007260 <LL_EXTI_Init+0x120>
 8007230:	2b00      	cmp	r3, #0
 8007232:	d120      	bne.n	8007276 <LL_EXTI_Init+0x136>
      {
        case LL_EXTI_MODE_IT:
          /* First Disable Event on provided Lines */
          LL_EXTI_DisableEvent_32_63(EXTI_InitStruct->Line_32_63);
 8007234:	687b      	ldr	r3, [r7, #4]
 8007236:	685b      	ldr	r3, [r3, #4]
 8007238:	4618      	mov	r0, r3
 800723a:	f7ff fed5 	bl	8006fe8 <LL_EXTI_DisableEvent_32_63>
          /* Then Enable IT on provided Lines */
          LL_EXTI_EnableIT_32_63(EXTI_InitStruct->Line_32_63);
 800723e:	687b      	ldr	r3, [r7, #4]
 8007240:	685b      	ldr	r3, [r3, #4]
 8007242:	4618      	mov	r0, r3
 8007244:	f7ff fe5e 	bl	8006f04 <LL_EXTI_EnableIT_32_63>
          break;
 8007248:	e01a      	b.n	8007280 <LL_EXTI_Init+0x140>
        case LL_EXTI_MODE_EVENT:
          /* First Disable IT on provided Lines */
          LL_EXTI_DisableIT_32_63(EXTI_InitStruct->Line_32_63);
 800724a:	687b      	ldr	r3, [r7, #4]
 800724c:	685b      	ldr	r3, [r3, #4]
 800724e:	4618      	mov	r0, r3
 8007250:	f7ff fe7e 	bl	8006f50 <LL_EXTI_DisableIT_32_63>
          /* Then Enable Event on provided Lines */
          LL_EXTI_EnableEvent_32_63(EXTI_InitStruct->Line_32_63);
 8007254:	687b      	ldr	r3, [r7, #4]
 8007256:	685b      	ldr	r3, [r3, #4]
 8007258:	4618      	mov	r0, r3
 800725a:	f7ff fe9f 	bl	8006f9c <LL_EXTI_EnableEvent_32_63>
          break;
 800725e:	e00f      	b.n	8007280 <LL_EXTI_Init+0x140>
        case LL_EXTI_MODE_IT_EVENT:
          /* Directly Enable IT on provided Lines */
          LL_EXTI_EnableIT_32_63(EXTI_InitStruct->Line_32_63);
 8007260:	687b      	ldr	r3, [r7, #4]
 8007262:	685b      	ldr	r3, [r3, #4]
 8007264:	4618      	mov	r0, r3
 8007266:	f7ff fe4d 	bl	8006f04 <LL_EXTI_EnableIT_32_63>
          /* Directly Enable IT on provided Lines */
          LL_EXTI_EnableEvent_32_63(EXTI_InitStruct->Line_32_63);
 800726a:	687b      	ldr	r3, [r7, #4]
 800726c:	685b      	ldr	r3, [r3, #4]
 800726e:	4618      	mov	r0, r3
 8007270:	f7ff fe94 	bl	8006f9c <LL_EXTI_EnableEvent_32_63>
          break;
 8007274:	e004      	b.n	8007280 <LL_EXTI_Init+0x140>
        default:
          status |= 0x04u;
 8007276:	68fb      	ldr	r3, [r7, #12]
 8007278:	f043 0304 	orr.w	r3, r3, #4
 800727c:	60fb      	str	r3, [r7, #12]
          break;
 800727e:	bf00      	nop
      }
      if (EXTI_InitStruct->Trigger != LL_EXTI_TRIGGER_NONE)
 8007280:	687b      	ldr	r3, [r7, #4]
 8007282:	7a9b      	ldrb	r3, [r3, #10]
 8007284:	2b00      	cmp	r3, #0
 8007286:	d043      	beq.n	8007310 <LL_EXTI_Init+0x1d0>
      {
        switch (EXTI_InitStruct->Trigger)
 8007288:	687b      	ldr	r3, [r7, #4]
 800728a:	7a9b      	ldrb	r3, [r3, #10]
 800728c:	2b02      	cmp	r3, #2
 800728e:	d00e      	beq.n	80072ae <LL_EXTI_Init+0x16e>
 8007290:	2b03      	cmp	r3, #3
 8007292:	d017      	beq.n	80072c4 <LL_EXTI_Init+0x184>
 8007294:	2b01      	cmp	r3, #1
 8007296:	d120      	bne.n	80072da <LL_EXTI_Init+0x19a>
        {
          case LL_EXTI_TRIGGER_RISING:
            /* First Disable Falling Trigger on provided Lines */
            LL_EXTI_DisableFallingTrig_32_63(EXTI_InitStruct->Line_32_63);
 8007298:	687b      	ldr	r3, [r7, #4]
 800729a:	685b      	ldr	r3, [r3, #4]
 800729c:	4618      	mov	r0, r3
 800729e:	f7ff ff3b 	bl	8007118 <LL_EXTI_DisableFallingTrig_32_63>
            /* Then Enable IT on provided Lines */
            LL_EXTI_EnableRisingTrig_32_63(EXTI_InitStruct->Line_32_63);
 80072a2:	687b      	ldr	r3, [r7, #4]
 80072a4:	685b      	ldr	r3, [r3, #4]
 80072a6:	4618      	mov	r0, r3
 80072a8:	f7ff fec4 	bl	8007034 <LL_EXTI_EnableRisingTrig_32_63>
            break;
 80072ac:	e031      	b.n	8007312 <LL_EXTI_Init+0x1d2>
          case LL_EXTI_TRIGGER_FALLING:
            /* First Disable Rising Trigger on provided Lines */
            LL_EXTI_DisableRisingTrig_32_63(EXTI_InitStruct->Line_32_63);
 80072ae:	687b      	ldr	r3, [r7, #4]
 80072b0:	685b      	ldr	r3, [r3, #4]
 80072b2:	4618      	mov	r0, r3
 80072b4:	f7ff fee4 	bl	8007080 <LL_EXTI_DisableRisingTrig_32_63>
            /* Then Enable Falling Trigger on provided Lines */
            LL_EXTI_EnableFallingTrig_32_63(EXTI_InitStruct->Line_32_63);
 80072b8:	687b      	ldr	r3, [r7, #4]
 80072ba:	685b      	ldr	r3, [r3, #4]
 80072bc:	4618      	mov	r0, r3
 80072be:	f7ff ff05 	bl	80070cc <LL_EXTI_EnableFallingTrig_32_63>
            break;
 80072c2:	e026      	b.n	8007312 <LL_EXTI_Init+0x1d2>
          case LL_EXTI_TRIGGER_RISING_FALLING:
            /* Enable Rising Trigger on provided Lines */
            LL_EXTI_EnableRisingTrig_32_63(EXTI_InitStruct->Line_32_63);
 80072c4:	687b      	ldr	r3, [r7, #4]
 80072c6:	685b      	ldr	r3, [r3, #4]
 80072c8:	4618      	mov	r0, r3
 80072ca:	f7ff feb3 	bl	8007034 <LL_EXTI_EnableRisingTrig_32_63>
            /* Enable Falling Trigger on provided Lines */
            LL_EXTI_EnableFallingTrig_32_63(EXTI_InitStruct->Line_32_63);
 80072ce:	687b      	ldr	r3, [r7, #4]
 80072d0:	685b      	ldr	r3, [r3, #4]
 80072d2:	4618      	mov	r0, r3
 80072d4:	f7ff fefa 	bl	80070cc <LL_EXTI_EnableFallingTrig_32_63>
            break;
 80072d8:	e01b      	b.n	8007312 <LL_EXTI_Init+0x1d2>
          default:
            status |= 0x05u;
 80072da:	68fb      	ldr	r3, [r7, #12]
 80072dc:	f043 0305 	orr.w	r3, r3, #5
 80072e0:	60fb      	str	r3, [r7, #12]
            break;
 80072e2:	bf00      	nop
 80072e4:	e015      	b.n	8007312 <LL_EXTI_Init+0x1d2>
  }
  /* DISABLE LineCommand */
  else
  {
    /* De-configure IT EXTI Lines in range from 0 to 31 */
    LL_EXTI_DisableIT_0_31(EXTI_InitStruct->Line_0_31);
 80072e6:	687b      	ldr	r3, [r7, #4]
 80072e8:	681b      	ldr	r3, [r3, #0]
 80072ea:	4618      	mov	r0, r3
 80072ec:	f7ff fe1c 	bl	8006f28 <LL_EXTI_DisableIT_0_31>
    /* De-configure Event EXTI Lines in range from 0 to 31 */
    LL_EXTI_DisableEvent_0_31(EXTI_InitStruct->Line_0_31);
 80072f0:	687b      	ldr	r3, [r7, #4]
 80072f2:	681b      	ldr	r3, [r3, #0]
 80072f4:	4618      	mov	r0, r3
 80072f6:	f7ff fe63 	bl	8006fc0 <LL_EXTI_DisableEvent_0_31>
    /* De-configure IT EXTI Lines in range from 32 to 63 */
    LL_EXTI_DisableIT_32_63(EXTI_InitStruct->Line_32_63);
 80072fa:	687b      	ldr	r3, [r7, #4]
 80072fc:	685b      	ldr	r3, [r3, #4]
 80072fe:	4618      	mov	r0, r3
 8007300:	f7ff fe26 	bl	8006f50 <LL_EXTI_DisableIT_32_63>
    /* De-configure Event EXTI Lines in range from 32 to 63 */
    LL_EXTI_DisableEvent_32_63(EXTI_InitStruct->Line_32_63);
 8007304:	687b      	ldr	r3, [r7, #4]
 8007306:	685b      	ldr	r3, [r3, #4]
 8007308:	4618      	mov	r0, r3
 800730a:	f7ff fe6d 	bl	8006fe8 <LL_EXTI_DisableEvent_32_63>
 800730e:	e000      	b.n	8007312 <LL_EXTI_Init+0x1d2>
      }
 8007310:	bf00      	nop
  }

  return status;
 8007312:	68fb      	ldr	r3, [r7, #12]
}
 8007314:	4618      	mov	r0, r3
 8007316:	3710      	adds	r7, #16
 8007318:	46bd      	mov	sp, r7
 800731a:	bd80      	pop	{r7, pc}

0800731c <LL_GPIO_SetPinMode>:
{
 800731c:	b480      	push	{r7}
 800731e:	b089      	sub	sp, #36	; 0x24
 8007320:	af00      	add	r7, sp, #0
 8007322:	60f8      	str	r0, [r7, #12]
 8007324:	60b9      	str	r1, [r7, #8]
 8007326:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->MODER, (GPIO_MODER_MODE0 << (POSITION_VAL(Pin) * 2U)), (Mode << (POSITION_VAL(Pin) * 2U)));
 8007328:	68fb      	ldr	r3, [r7, #12]
 800732a:	681a      	ldr	r2, [r3, #0]
 800732c:	68bb      	ldr	r3, [r7, #8]
 800732e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8007330:	697b      	ldr	r3, [r7, #20]
 8007332:	fa93 f3a3 	rbit	r3, r3
 8007336:	613b      	str	r3, [r7, #16]
  return result;
 8007338:	693b      	ldr	r3, [r7, #16]
 800733a:	fab3 f383 	clz	r3, r3
 800733e:	b2db      	uxtb	r3, r3
 8007340:	005b      	lsls	r3, r3, #1
 8007342:	2103      	movs	r1, #3
 8007344:	fa01 f303 	lsl.w	r3, r1, r3
 8007348:	43db      	mvns	r3, r3
 800734a:	401a      	ands	r2, r3
 800734c:	68bb      	ldr	r3, [r7, #8]
 800734e:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8007350:	69fb      	ldr	r3, [r7, #28]
 8007352:	fa93 f3a3 	rbit	r3, r3
 8007356:	61bb      	str	r3, [r7, #24]
  return result;
 8007358:	69bb      	ldr	r3, [r7, #24]
 800735a:	fab3 f383 	clz	r3, r3
 800735e:	b2db      	uxtb	r3, r3
 8007360:	005b      	lsls	r3, r3, #1
 8007362:	6879      	ldr	r1, [r7, #4]
 8007364:	fa01 f303 	lsl.w	r3, r1, r3
 8007368:	431a      	orrs	r2, r3
 800736a:	68fb      	ldr	r3, [r7, #12]
 800736c:	601a      	str	r2, [r3, #0]
}
 800736e:	bf00      	nop
 8007370:	3724      	adds	r7, #36	; 0x24
 8007372:	46bd      	mov	sp, r7
 8007374:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007378:	4770      	bx	lr

0800737a <LL_GPIO_SetPinOutputType>:
{
 800737a:	b480      	push	{r7}
 800737c:	b085      	sub	sp, #20
 800737e:	af00      	add	r7, sp, #0
 8007380:	60f8      	str	r0, [r7, #12]
 8007382:	60b9      	str	r1, [r7, #8]
 8007384:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->OTYPER, PinMask, (PinMask * OutputType));
 8007386:	68fb      	ldr	r3, [r7, #12]
 8007388:	685a      	ldr	r2, [r3, #4]
 800738a:	68bb      	ldr	r3, [r7, #8]
 800738c:	43db      	mvns	r3, r3
 800738e:	401a      	ands	r2, r3
 8007390:	68bb      	ldr	r3, [r7, #8]
 8007392:	6879      	ldr	r1, [r7, #4]
 8007394:	fb01 f303 	mul.w	r3, r1, r3
 8007398:	431a      	orrs	r2, r3
 800739a:	68fb      	ldr	r3, [r7, #12]
 800739c:	605a      	str	r2, [r3, #4]
}
 800739e:	bf00      	nop
 80073a0:	3714      	adds	r7, #20
 80073a2:	46bd      	mov	sp, r7
 80073a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073a8:	4770      	bx	lr

080073aa <LL_GPIO_SetPinSpeed>:
{
 80073aa:	b480      	push	{r7}
 80073ac:	b089      	sub	sp, #36	; 0x24
 80073ae:	af00      	add	r7, sp, #0
 80073b0:	60f8      	str	r0, [r7, #12]
 80073b2:	60b9      	str	r1, [r7, #8]
 80073b4:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->OSPEEDR, (GPIO_OSPEEDR_OSPEED0 << (POSITION_VAL(Pin) * 2U)),
 80073b6:	68fb      	ldr	r3, [r7, #12]
 80073b8:	689a      	ldr	r2, [r3, #8]
 80073ba:	68bb      	ldr	r3, [r7, #8]
 80073bc:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80073be:	697b      	ldr	r3, [r7, #20]
 80073c0:	fa93 f3a3 	rbit	r3, r3
 80073c4:	613b      	str	r3, [r7, #16]
  return result;
 80073c6:	693b      	ldr	r3, [r7, #16]
 80073c8:	fab3 f383 	clz	r3, r3
 80073cc:	b2db      	uxtb	r3, r3
 80073ce:	005b      	lsls	r3, r3, #1
 80073d0:	2103      	movs	r1, #3
 80073d2:	fa01 f303 	lsl.w	r3, r1, r3
 80073d6:	43db      	mvns	r3, r3
 80073d8:	401a      	ands	r2, r3
 80073da:	68bb      	ldr	r3, [r7, #8]
 80073dc:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80073de:	69fb      	ldr	r3, [r7, #28]
 80073e0:	fa93 f3a3 	rbit	r3, r3
 80073e4:	61bb      	str	r3, [r7, #24]
  return result;
 80073e6:	69bb      	ldr	r3, [r7, #24]
 80073e8:	fab3 f383 	clz	r3, r3
 80073ec:	b2db      	uxtb	r3, r3
 80073ee:	005b      	lsls	r3, r3, #1
 80073f0:	6879      	ldr	r1, [r7, #4]
 80073f2:	fa01 f303 	lsl.w	r3, r1, r3
 80073f6:	431a      	orrs	r2, r3
 80073f8:	68fb      	ldr	r3, [r7, #12]
 80073fa:	609a      	str	r2, [r3, #8]
}
 80073fc:	bf00      	nop
 80073fe:	3724      	adds	r7, #36	; 0x24
 8007400:	46bd      	mov	sp, r7
 8007402:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007406:	4770      	bx	lr

08007408 <LL_GPIO_SetPinPull>:
{
 8007408:	b480      	push	{r7}
 800740a:	b089      	sub	sp, #36	; 0x24
 800740c:	af00      	add	r7, sp, #0
 800740e:	60f8      	str	r0, [r7, #12]
 8007410:	60b9      	str	r1, [r7, #8]
 8007412:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->PUPDR, (GPIO_PUPDR_PUPD0 << (POSITION_VAL(Pin) * 2U)), (Pull << (POSITION_VAL(Pin) * 2U)));
 8007414:	68fb      	ldr	r3, [r7, #12]
 8007416:	68da      	ldr	r2, [r3, #12]
 8007418:	68bb      	ldr	r3, [r7, #8]
 800741a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800741c:	697b      	ldr	r3, [r7, #20]
 800741e:	fa93 f3a3 	rbit	r3, r3
 8007422:	613b      	str	r3, [r7, #16]
  return result;
 8007424:	693b      	ldr	r3, [r7, #16]
 8007426:	fab3 f383 	clz	r3, r3
 800742a:	b2db      	uxtb	r3, r3
 800742c:	005b      	lsls	r3, r3, #1
 800742e:	2103      	movs	r1, #3
 8007430:	fa01 f303 	lsl.w	r3, r1, r3
 8007434:	43db      	mvns	r3, r3
 8007436:	401a      	ands	r2, r3
 8007438:	68bb      	ldr	r3, [r7, #8]
 800743a:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800743c:	69fb      	ldr	r3, [r7, #28]
 800743e:	fa93 f3a3 	rbit	r3, r3
 8007442:	61bb      	str	r3, [r7, #24]
  return result;
 8007444:	69bb      	ldr	r3, [r7, #24]
 8007446:	fab3 f383 	clz	r3, r3
 800744a:	b2db      	uxtb	r3, r3
 800744c:	005b      	lsls	r3, r3, #1
 800744e:	6879      	ldr	r1, [r7, #4]
 8007450:	fa01 f303 	lsl.w	r3, r1, r3
 8007454:	431a      	orrs	r2, r3
 8007456:	68fb      	ldr	r3, [r7, #12]
 8007458:	60da      	str	r2, [r3, #12]
}
 800745a:	bf00      	nop
 800745c:	3724      	adds	r7, #36	; 0x24
 800745e:	46bd      	mov	sp, r7
 8007460:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007464:	4770      	bx	lr

08007466 <LL_GPIO_SetAFPin_0_7>:
{
 8007466:	b480      	push	{r7}
 8007468:	b089      	sub	sp, #36	; 0x24
 800746a:	af00      	add	r7, sp, #0
 800746c:	60f8      	str	r0, [r7, #12]
 800746e:	60b9      	str	r1, [r7, #8]
 8007470:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->AFR[0], (GPIO_AFRL_AFSEL0 << (POSITION_VAL(Pin) * 4U)),
 8007472:	68fb      	ldr	r3, [r7, #12]
 8007474:	6a1a      	ldr	r2, [r3, #32]
 8007476:	68bb      	ldr	r3, [r7, #8]
 8007478:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800747a:	697b      	ldr	r3, [r7, #20]
 800747c:	fa93 f3a3 	rbit	r3, r3
 8007480:	613b      	str	r3, [r7, #16]
  return result;
 8007482:	693b      	ldr	r3, [r7, #16]
 8007484:	fab3 f383 	clz	r3, r3
 8007488:	b2db      	uxtb	r3, r3
 800748a:	009b      	lsls	r3, r3, #2
 800748c:	210f      	movs	r1, #15
 800748e:	fa01 f303 	lsl.w	r3, r1, r3
 8007492:	43db      	mvns	r3, r3
 8007494:	401a      	ands	r2, r3
 8007496:	68bb      	ldr	r3, [r7, #8]
 8007498:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800749a:	69fb      	ldr	r3, [r7, #28]
 800749c:	fa93 f3a3 	rbit	r3, r3
 80074a0:	61bb      	str	r3, [r7, #24]
  return result;
 80074a2:	69bb      	ldr	r3, [r7, #24]
 80074a4:	fab3 f383 	clz	r3, r3
 80074a8:	b2db      	uxtb	r3, r3
 80074aa:	009b      	lsls	r3, r3, #2
 80074ac:	6879      	ldr	r1, [r7, #4]
 80074ae:	fa01 f303 	lsl.w	r3, r1, r3
 80074b2:	431a      	orrs	r2, r3
 80074b4:	68fb      	ldr	r3, [r7, #12]
 80074b6:	621a      	str	r2, [r3, #32]
}
 80074b8:	bf00      	nop
 80074ba:	3724      	adds	r7, #36	; 0x24
 80074bc:	46bd      	mov	sp, r7
 80074be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074c2:	4770      	bx	lr

080074c4 <LL_GPIO_SetAFPin_8_15>:
{
 80074c4:	b480      	push	{r7}
 80074c6:	b089      	sub	sp, #36	; 0x24
 80074c8:	af00      	add	r7, sp, #0
 80074ca:	60f8      	str	r0, [r7, #12]
 80074cc:	60b9      	str	r1, [r7, #8]
 80074ce:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->AFR[1], (GPIO_AFRH_AFSEL8 << (POSITION_VAL(Pin >> 8U) * 4U)),
 80074d0:	68fb      	ldr	r3, [r7, #12]
 80074d2:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80074d4:	68bb      	ldr	r3, [r7, #8]
 80074d6:	0a1b      	lsrs	r3, r3, #8
 80074d8:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80074da:	697b      	ldr	r3, [r7, #20]
 80074dc:	fa93 f3a3 	rbit	r3, r3
 80074e0:	613b      	str	r3, [r7, #16]
  return result;
 80074e2:	693b      	ldr	r3, [r7, #16]
 80074e4:	fab3 f383 	clz	r3, r3
 80074e8:	b2db      	uxtb	r3, r3
 80074ea:	009b      	lsls	r3, r3, #2
 80074ec:	210f      	movs	r1, #15
 80074ee:	fa01 f303 	lsl.w	r3, r1, r3
 80074f2:	43db      	mvns	r3, r3
 80074f4:	401a      	ands	r2, r3
 80074f6:	68bb      	ldr	r3, [r7, #8]
 80074f8:	0a1b      	lsrs	r3, r3, #8
 80074fa:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80074fc:	69fb      	ldr	r3, [r7, #28]
 80074fe:	fa93 f3a3 	rbit	r3, r3
 8007502:	61bb      	str	r3, [r7, #24]
  return result;
 8007504:	69bb      	ldr	r3, [r7, #24]
 8007506:	fab3 f383 	clz	r3, r3
 800750a:	b2db      	uxtb	r3, r3
 800750c:	009b      	lsls	r3, r3, #2
 800750e:	6879      	ldr	r1, [r7, #4]
 8007510:	fa01 f303 	lsl.w	r3, r1, r3
 8007514:	431a      	orrs	r2, r3
 8007516:	68fb      	ldr	r3, [r7, #12]
 8007518:	625a      	str	r2, [r3, #36]	; 0x24
}
 800751a:	bf00      	nop
 800751c:	3724      	adds	r7, #36	; 0x24
 800751e:	46bd      	mov	sp, r7
 8007520:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007524:	4770      	bx	lr

08007526 <LL_GPIO_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: GPIO registers are initialized according to GPIO_InitStruct content
  *          - ERROR:   Not applicable
  */
ErrorStatus LL_GPIO_Init(GPIO_TypeDef *GPIOx, LL_GPIO_InitTypeDef *GPIO_InitStruct)
{
 8007526:	b580      	push	{r7, lr}
 8007528:	b086      	sub	sp, #24
 800752a:	af00      	add	r7, sp, #0
 800752c:	6078      	str	r0, [r7, #4]
 800752e:	6039      	str	r1, [r7, #0]
  assert_param(IS_LL_GPIO_MODE(GPIO_InitStruct->Mode));
  assert_param(IS_LL_GPIO_PULL(GPIO_InitStruct->Pull));

  /* ------------------------- Configure the port pins ---------------- */
  /* Initialize  pinpos on first pin set */
  pinpos = POSITION_VAL(GPIO_InitStruct->Pin);
 8007530:	683b      	ldr	r3, [r7, #0]
 8007532:	681b      	ldr	r3, [r3, #0]
 8007534:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8007536:	68fb      	ldr	r3, [r7, #12]
 8007538:	fa93 f3a3 	rbit	r3, r3
 800753c:	60bb      	str	r3, [r7, #8]
  return result;
 800753e:	68bb      	ldr	r3, [r7, #8]
 8007540:	fab3 f383 	clz	r3, r3
 8007544:	b2db      	uxtb	r3, r3
 8007546:	617b      	str	r3, [r7, #20]

  /* Configure the port pins */
  while (((GPIO_InitStruct->Pin) >> pinpos) != 0x00000000U)
 8007548:	e040      	b.n	80075cc <LL_GPIO_Init+0xa6>
  {
    /* Get current io position */
    currentpin = (GPIO_InitStruct->Pin) & (0x00000001UL << pinpos);
 800754a:	683b      	ldr	r3, [r7, #0]
 800754c:	681a      	ldr	r2, [r3, #0]
 800754e:	2101      	movs	r1, #1
 8007550:	697b      	ldr	r3, [r7, #20]
 8007552:	fa01 f303 	lsl.w	r3, r1, r3
 8007556:	4013      	ands	r3, r2
 8007558:	613b      	str	r3, [r7, #16]

    if (currentpin != 0x00u)
 800755a:	693b      	ldr	r3, [r7, #16]
 800755c:	2b00      	cmp	r3, #0
 800755e:	d032      	beq.n	80075c6 <LL_GPIO_Init+0xa0>
    {
      /* Pin Mode configuration */
      LL_GPIO_SetPinMode(GPIOx, currentpin, GPIO_InitStruct->Mode);
 8007560:	683b      	ldr	r3, [r7, #0]
 8007562:	685b      	ldr	r3, [r3, #4]
 8007564:	461a      	mov	r2, r3
 8007566:	6939      	ldr	r1, [r7, #16]
 8007568:	6878      	ldr	r0, [r7, #4]
 800756a:	f7ff fed7 	bl	800731c <LL_GPIO_SetPinMode>

      if ((GPIO_InitStruct->Mode == LL_GPIO_MODE_OUTPUT) || (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE))
 800756e:	683b      	ldr	r3, [r7, #0]
 8007570:	685b      	ldr	r3, [r3, #4]
 8007572:	2b01      	cmp	r3, #1
 8007574:	d003      	beq.n	800757e <LL_GPIO_Init+0x58>
 8007576:	683b      	ldr	r3, [r7, #0]
 8007578:	685b      	ldr	r3, [r3, #4]
 800757a:	2b02      	cmp	r3, #2
 800757c:	d106      	bne.n	800758c <LL_GPIO_Init+0x66>
      {
        /* Check Speed mode parameters */
        assert_param(IS_LL_GPIO_SPEED(GPIO_InitStruct->Speed));

        /* Speed mode configuration */
        LL_GPIO_SetPinSpeed(GPIOx, currentpin, GPIO_InitStruct->Speed);
 800757e:	683b      	ldr	r3, [r7, #0]
 8007580:	689b      	ldr	r3, [r3, #8]
 8007582:	461a      	mov	r2, r3
 8007584:	6939      	ldr	r1, [r7, #16]
 8007586:	6878      	ldr	r0, [r7, #4]
 8007588:	f7ff ff0f 	bl	80073aa <LL_GPIO_SetPinSpeed>
      }

      /* Pull-up Pull down resistor configuration*/
      LL_GPIO_SetPinPull(GPIOx, currentpin, GPIO_InitStruct->Pull);
 800758c:	683b      	ldr	r3, [r7, #0]
 800758e:	691b      	ldr	r3, [r3, #16]
 8007590:	461a      	mov	r2, r3
 8007592:	6939      	ldr	r1, [r7, #16]
 8007594:	6878      	ldr	r0, [r7, #4]
 8007596:	f7ff ff37 	bl	8007408 <LL_GPIO_SetPinPull>

      if (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE)
 800759a:	683b      	ldr	r3, [r7, #0]
 800759c:	685b      	ldr	r3, [r3, #4]
 800759e:	2b02      	cmp	r3, #2
 80075a0:	d111      	bne.n	80075c6 <LL_GPIO_Init+0xa0>
      {
        /* Check Alternate parameter */
        assert_param(IS_LL_GPIO_ALTERNATE(GPIO_InitStruct->Alternate));

        /* Speed mode configuration */
        if (currentpin < LL_GPIO_PIN_8)
 80075a2:	693b      	ldr	r3, [r7, #16]
 80075a4:	2bff      	cmp	r3, #255	; 0xff
 80075a6:	d807      	bhi.n	80075b8 <LL_GPIO_Init+0x92>
        {
          LL_GPIO_SetAFPin_0_7(GPIOx, currentpin, GPIO_InitStruct->Alternate);
 80075a8:	683b      	ldr	r3, [r7, #0]
 80075aa:	695b      	ldr	r3, [r3, #20]
 80075ac:	461a      	mov	r2, r3
 80075ae:	6939      	ldr	r1, [r7, #16]
 80075b0:	6878      	ldr	r0, [r7, #4]
 80075b2:	f7ff ff58 	bl	8007466 <LL_GPIO_SetAFPin_0_7>
 80075b6:	e006      	b.n	80075c6 <LL_GPIO_Init+0xa0>
        }
        else
        {
          LL_GPIO_SetAFPin_8_15(GPIOx, currentpin, GPIO_InitStruct->Alternate);
 80075b8:	683b      	ldr	r3, [r7, #0]
 80075ba:	695b      	ldr	r3, [r3, #20]
 80075bc:	461a      	mov	r2, r3
 80075be:	6939      	ldr	r1, [r7, #16]
 80075c0:	6878      	ldr	r0, [r7, #4]
 80075c2:	f7ff ff7f 	bl	80074c4 <LL_GPIO_SetAFPin_8_15>
        }
      }
    }
    pinpos++;
 80075c6:	697b      	ldr	r3, [r7, #20]
 80075c8:	3301      	adds	r3, #1
 80075ca:	617b      	str	r3, [r7, #20]
  while (((GPIO_InitStruct->Pin) >> pinpos) != 0x00000000U)
 80075cc:	683b      	ldr	r3, [r7, #0]
 80075ce:	681a      	ldr	r2, [r3, #0]
 80075d0:	697b      	ldr	r3, [r7, #20]
 80075d2:	fa22 f303 	lsr.w	r3, r2, r3
 80075d6:	2b00      	cmp	r3, #0
 80075d8:	d1b7      	bne.n	800754a <LL_GPIO_Init+0x24>
  }

  if ((GPIO_InitStruct->Mode == LL_GPIO_MODE_OUTPUT) || (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE))
 80075da:	683b      	ldr	r3, [r7, #0]
 80075dc:	685b      	ldr	r3, [r3, #4]
 80075de:	2b01      	cmp	r3, #1
 80075e0:	d003      	beq.n	80075ea <LL_GPIO_Init+0xc4>
 80075e2:	683b      	ldr	r3, [r7, #0]
 80075e4:	685b      	ldr	r3, [r3, #4]
 80075e6:	2b02      	cmp	r3, #2
 80075e8:	d107      	bne.n	80075fa <LL_GPIO_Init+0xd4>
  {
    /* Check Output mode parameters */
    assert_param(IS_LL_GPIO_OUTPUT_TYPE(GPIO_InitStruct->OutputType));

    /* Output mode configuration*/
    LL_GPIO_SetPinOutputType(GPIOx, GPIO_InitStruct->Pin, GPIO_InitStruct->OutputType);
 80075ea:	683b      	ldr	r3, [r7, #0]
 80075ec:	6819      	ldr	r1, [r3, #0]
 80075ee:	683b      	ldr	r3, [r7, #0]
 80075f0:	68db      	ldr	r3, [r3, #12]
 80075f2:	461a      	mov	r2, r3
 80075f4:	6878      	ldr	r0, [r7, #4]
 80075f6:	f7ff fec0 	bl	800737a <LL_GPIO_SetPinOutputType>

  }
  return (SUCCESS);
 80075fa:	2300      	movs	r3, #0
}
 80075fc:	4618      	mov	r0, r3
 80075fe:	3718      	adds	r7, #24
 8007600:	46bd      	mov	sp, r7
 8007602:	bd80      	pop	{r7, pc}

08007604 <ILI9341_Draw_Bordered_Filled_Rectangle_Coord>:
 *
 *
 */

void ILI9341_Draw_Bordered_Filled_Rectangle_Coord(uint16_t x, uint16_t y, uint16_t w, uint16_t h, uint16_t inner_colour, uint8_t border_weight, uint8_t border_colour)
{
 8007604:	b590      	push	{r4, r7, lr}
 8007606:	b087      	sub	sp, #28
 8007608:	af02      	add	r7, sp, #8
 800760a:	4604      	mov	r4, r0
 800760c:	4608      	mov	r0, r1
 800760e:	4611      	mov	r1, r2
 8007610:	461a      	mov	r2, r3
 8007612:	4623      	mov	r3, r4
 8007614:	80fb      	strh	r3, [r7, #6]
 8007616:	4603      	mov	r3, r0
 8007618:	80bb      	strh	r3, [r7, #4]
 800761a:	460b      	mov	r3, r1
 800761c:	807b      	strh	r3, [r7, #2]
 800761e:	4613      	mov	r3, r2
 8007620:	803b      	strh	r3, [r7, #0]

	// Draw inwards (and shorter) for each level of border weight
	for(uint8_t b = 0; ; b++)
 8007622:	2300      	movs	r3, #0
 8007624:	73fb      	strb	r3, [r7, #15]
	{


		if(b > border_weight)
 8007626:	7bfa      	ldrb	r2, [r7, #15]
 8007628:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 800762c:	429a      	cmp	r2, r3
 800762e:	d938      	bls.n	80076a2 <ILI9341_Draw_Bordered_Filled_Rectangle_Coord+0x9e>
		{

			// stop before the inner space reaches zero! (hard fault)
			if( ((y + b) == ((y + h) - b)) || ((x + b) == ((x + w) - b)) )
 8007630:	88ba      	ldrh	r2, [r7, #4]
 8007632:	7bfb      	ldrb	r3, [r7, #15]
 8007634:	441a      	add	r2, r3
 8007636:	88b9      	ldrh	r1, [r7, #4]
 8007638:	883b      	ldrh	r3, [r7, #0]
 800763a:	4419      	add	r1, r3
 800763c:	7bfb      	ldrb	r3, [r7, #15]
 800763e:	1acb      	subs	r3, r1, r3
 8007640:	429a      	cmp	r2, r3
 8007642:	f000 808e 	beq.w	8007762 <ILI9341_Draw_Bordered_Filled_Rectangle_Coord+0x15e>
 8007646:	88fa      	ldrh	r2, [r7, #6]
 8007648:	7bfb      	ldrb	r3, [r7, #15]
 800764a:	441a      	add	r2, r3
 800764c:	88f9      	ldrh	r1, [r7, #6]
 800764e:	887b      	ldrh	r3, [r7, #2]
 8007650:	4419      	add	r1, r3
 8007652:	7bfb      	ldrb	r3, [r7, #15]
 8007654:	1acb      	subs	r3, r1, r3
 8007656:	429a      	cmp	r2, r3
 8007658:	f000 8083 	beq.w	8007762 <ILI9341_Draw_Bordered_Filled_Rectangle_Coord+0x15e>
				// add final line?
				goto finish;
			}
			else
			{
				ILI9341_Draw_Rectangle(x + b, y + b, (w - (2*b)) + 1, (h - (2*b)) + 1, inner_colour);
 800765c:	7bfb      	ldrb	r3, [r7, #15]
 800765e:	b29a      	uxth	r2, r3
 8007660:	88fb      	ldrh	r3, [r7, #6]
 8007662:	4413      	add	r3, r2
 8007664:	b298      	uxth	r0, r3
 8007666:	7bfb      	ldrb	r3, [r7, #15]
 8007668:	b29a      	uxth	r2, r3
 800766a:	88bb      	ldrh	r3, [r7, #4]
 800766c:	4413      	add	r3, r2
 800766e:	b299      	uxth	r1, r3
 8007670:	7bfb      	ldrb	r3, [r7, #15]
 8007672:	b29b      	uxth	r3, r3
 8007674:	005b      	lsls	r3, r3, #1
 8007676:	b29b      	uxth	r3, r3
 8007678:	887a      	ldrh	r2, [r7, #2]
 800767a:	1ad3      	subs	r3, r2, r3
 800767c:	b29b      	uxth	r3, r3
 800767e:	3301      	adds	r3, #1
 8007680:	b29c      	uxth	r4, r3
 8007682:	7bfb      	ldrb	r3, [r7, #15]
 8007684:	b29b      	uxth	r3, r3
 8007686:	005b      	lsls	r3, r3, #1
 8007688:	b29b      	uxth	r3, r3
 800768a:	883a      	ldrh	r2, [r7, #0]
 800768c:	1ad3      	subs	r3, r2, r3
 800768e:	b29b      	uxth	r3, r3
 8007690:	3301      	adds	r3, #1
 8007692:	b29a      	uxth	r2, r3
 8007694:	8c3b      	ldrh	r3, [r7, #32]
 8007696:	9300      	str	r3, [sp, #0]
 8007698:	4613      	mov	r3, r2
 800769a:	4622      	mov	r2, r4
 800769c:	f000 fd2e 	bl	80080fc <ILI9341_Draw_Rectangle>
				goto finish;
 80076a0:	e060      	b.n	8007764 <ILI9341_Draw_Bordered_Filled_Rectangle_Coord+0x160>
			}
		}

		// Horizontal lines
		ILI9341_Draw_Horizontal_Line(	x + b,
 80076a2:	7bfb      	ldrb	r3, [r7, #15]
 80076a4:	b29a      	uxth	r2, r3
 80076a6:	88fb      	ldrh	r3, [r7, #6]
 80076a8:	4413      	add	r3, r2
 80076aa:	b298      	uxth	r0, r3
 80076ac:	7bfb      	ldrb	r3, [r7, #15]
 80076ae:	b29a      	uxth	r2, r3
 80076b0:	88bb      	ldrh	r3, [r7, #4]
 80076b2:	4413      	add	r3, r2
 80076b4:	b299      	uxth	r1, r3
 80076b6:	7bfb      	ldrb	r3, [r7, #15]
 80076b8:	b29b      	uxth	r3, r3
 80076ba:	005b      	lsls	r3, r3, #1
 80076bc:	b29b      	uxth	r3, r3
 80076be:	887a      	ldrh	r2, [r7, #2]
 80076c0:	1ad3      	subs	r3, r2, r3
 80076c2:	b29a      	uxth	r2, r3
 80076c4:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 80076c8:	b29b      	uxth	r3, r3
 80076ca:	f000 fd9d 	bl	8008208 <ILI9341_Draw_Horizontal_Line>
										y + b,
										w - (2*b),
										border_colour);

		ILI9341_Draw_Horizontal_Line(	x + b,
 80076ce:	7bfb      	ldrb	r3, [r7, #15]
 80076d0:	b29a      	uxth	r2, r3
 80076d2:	88fb      	ldrh	r3, [r7, #6]
 80076d4:	4413      	add	r3, r2
 80076d6:	b298      	uxth	r0, r3
										(y + h) - b,
 80076d8:	88ba      	ldrh	r2, [r7, #4]
 80076da:	883b      	ldrh	r3, [r7, #0]
 80076dc:	4413      	add	r3, r2
 80076de:	b29a      	uxth	r2, r3
		ILI9341_Draw_Horizontal_Line(	x + b,
 80076e0:	7bfb      	ldrb	r3, [r7, #15]
 80076e2:	b29b      	uxth	r3, r3
 80076e4:	1ad3      	subs	r3, r2, r3
 80076e6:	b299      	uxth	r1, r3
 80076e8:	7bfb      	ldrb	r3, [r7, #15]
 80076ea:	b29b      	uxth	r3, r3
 80076ec:	887a      	ldrh	r2, [r7, #2]
 80076ee:	1ad3      	subs	r3, r2, r3
 80076f0:	b29a      	uxth	r2, r3
 80076f2:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 80076f6:	b29b      	uxth	r3, r3
 80076f8:	f000 fd86 	bl	8008208 <ILI9341_Draw_Horizontal_Line>
										w - (b),
										border_colour);


		// Vertical lines
		ILI9341_Draw_Vertical_Line(		x + b,
 80076fc:	7bfb      	ldrb	r3, [r7, #15]
 80076fe:	b29a      	uxth	r2, r3
 8007700:	88fb      	ldrh	r3, [r7, #6]
 8007702:	4413      	add	r3, r2
 8007704:	b298      	uxth	r0, r3
 8007706:	7bfb      	ldrb	r3, [r7, #15]
 8007708:	b29a      	uxth	r2, r3
 800770a:	88bb      	ldrh	r3, [r7, #4]
 800770c:	4413      	add	r3, r2
 800770e:	b299      	uxth	r1, r3
 8007710:	7bfb      	ldrb	r3, [r7, #15]
 8007712:	b29b      	uxth	r3, r3
 8007714:	005b      	lsls	r3, r3, #1
 8007716:	b29b      	uxth	r3, r3
 8007718:	883a      	ldrh	r2, [r7, #0]
 800771a:	1ad3      	subs	r3, r2, r3
 800771c:	b29a      	uxth	r2, r3
 800771e:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8007722:	b29b      	uxth	r3, r3
 8007724:	f000 fdb8 	bl	8008298 <ILI9341_Draw_Vertical_Line>
										y + b,
										h - (2*b),
										border_colour);

		ILI9341_Draw_Vertical_Line(		(x + w) - b,
 8007728:	88fa      	ldrh	r2, [r7, #6]
 800772a:	887b      	ldrh	r3, [r7, #2]
 800772c:	4413      	add	r3, r2
 800772e:	b29a      	uxth	r2, r3
 8007730:	7bfb      	ldrb	r3, [r7, #15]
 8007732:	b29b      	uxth	r3, r3
 8007734:	1ad3      	subs	r3, r2, r3
 8007736:	b298      	uxth	r0, r3
 8007738:	7bfb      	ldrb	r3, [r7, #15]
 800773a:	b29a      	uxth	r2, r3
 800773c:	88bb      	ldrh	r3, [r7, #4]
 800773e:	4413      	add	r3, r2
 8007740:	b299      	uxth	r1, r3
 8007742:	7bfb      	ldrb	r3, [r7, #15]
 8007744:	b29b      	uxth	r3, r3
 8007746:	005b      	lsls	r3, r3, #1
 8007748:	b29b      	uxth	r3, r3
 800774a:	883a      	ldrh	r2, [r7, #0]
 800774c:	1ad3      	subs	r3, r2, r3
 800774e:	b29a      	uxth	r2, r3
 8007750:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8007754:	b29b      	uxth	r3, r3
 8007756:	f000 fd9f 	bl	8008298 <ILI9341_Draw_Vertical_Line>
	for(uint8_t b = 0; ; b++)
 800775a:	7bfb      	ldrb	r3, [r7, #15]
 800775c:	3301      	adds	r3, #1
 800775e:	73fb      	strb	r3, [r7, #15]
		if(b > border_weight)
 8007760:	e761      	b.n	8007626 <ILI9341_Draw_Bordered_Filled_Rectangle_Coord+0x22>
										h - (2*b),
										border_colour);

	}

	finish:
 8007762:	bf00      	nop
	// done
	return;
 8007764:	bf00      	nop
}
 8007766:	3714      	adds	r7, #20
 8007768:	46bd      	mov	sp, r7
 800776a:	bd90      	pop	{r4, r7, pc}

0800776c <ILI9341_Draw_Char>:
}

/*Draws a character (fonts imported from fonts.h) at x,Y location with specified font colour, size and Background colour*/
/*See fonts.h implementation of font on what is required for changing to a different font when switching fonts libraries*/
void ILI9341_Draw_Char(char character, uint16_t x, uint16_t y, uint16_t colour, uint16_t size, uint16_t bgcolour)
{
 800776c:	b590      	push	{r4, r7, lr}
 800776e:	b089      	sub	sp, #36	; 0x24
 8007770:	af02      	add	r7, sp, #8
 8007772:	4604      	mov	r4, r0
 8007774:	4608      	mov	r0, r1
 8007776:	4611      	mov	r1, r2
 8007778:	461a      	mov	r2, r3
 800777a:	4623      	mov	r3, r4
 800777c:	71fb      	strb	r3, [r7, #7]
 800777e:	4603      	mov	r3, r0
 8007780:	80bb      	strh	r3, [r7, #4]
 8007782:	460b      	mov	r3, r1
 8007784:	807b      	strh	r3, [r7, #2]
 8007786:	4613      	mov	r3, r2
 8007788:	803b      	strh	r3, [r7, #0]
    uint8_t 	i,j;
		



	function_char = character;
 800778a:	79fb      	ldrb	r3, [r7, #7]
 800778c:	75fb      	strb	r3, [r7, #23]
		
    if (function_char < ' ')
 800778e:	7dfb      	ldrb	r3, [r7, #23]
 8007790:	2b1f      	cmp	r3, #31
 8007792:	d802      	bhi.n	800779a <ILI9341_Draw_Char+0x2e>
    {
        character = 0;
 8007794:	2300      	movs	r3, #0
 8007796:	71fb      	strb	r3, [r7, #7]
 8007798:	e002      	b.n	80077a0 <ILI9341_Draw_Char+0x34>
    }
    else
    {
    	function_char -= 32;
 800779a:	7dfb      	ldrb	r3, [r7, #23]
 800779c:	3b20      	subs	r3, #32
 800779e:	75fb      	strb	r3, [r7, #23]
	}
   	
	char temp[CHAR_WIDTH];

	for(uint8_t k = 0; k<CHAR_WIDTH; k++)
 80077a0:	2300      	movs	r3, #0
 80077a2:	753b      	strb	r3, [r7, #20]
 80077a4:	e012      	b.n	80077cc <ILI9341_Draw_Char+0x60>
	{
		temp[k] = font[function_char][k];
 80077a6:	7dfa      	ldrb	r2, [r7, #23]
 80077a8:	7d38      	ldrb	r0, [r7, #20]
 80077aa:	7d39      	ldrb	r1, [r7, #20]
 80077ac:	4c46      	ldr	r4, [pc, #280]	; (80078c8 <ILI9341_Draw_Char+0x15c>)
 80077ae:	4613      	mov	r3, r2
 80077b0:	005b      	lsls	r3, r3, #1
 80077b2:	4413      	add	r3, r2
 80077b4:	005b      	lsls	r3, r3, #1
 80077b6:	4423      	add	r3, r4
 80077b8:	4403      	add	r3, r0
 80077ba:	781a      	ldrb	r2, [r3, #0]
 80077bc:	f107 0318 	add.w	r3, r7, #24
 80077c0:	440b      	add	r3, r1
 80077c2:	f803 2c0c 	strb.w	r2, [r3, #-12]
	for(uint8_t k = 0; k<CHAR_WIDTH; k++)
 80077c6:	7d3b      	ldrb	r3, [r7, #20]
 80077c8:	3301      	adds	r3, #1
 80077ca:	753b      	strb	r3, [r7, #20]
 80077cc:	7d3b      	ldrb	r3, [r7, #20]
 80077ce:	2b05      	cmp	r3, #5
 80077d0:	d9e9      	bls.n	80077a6 <ILI9341_Draw_Char+0x3a>
	}
		
    // Draw pixels
	//ILI9341_Draw_Rectangle(x, Y, CHAR_WIDTH*size, CHAR_HEIGHT*size, bgcolour);
    for (j=0; j<CHAR_WIDTH; j++)
 80077d2:	2300      	movs	r3, #0
 80077d4:	757b      	strb	r3, [r7, #21]
 80077d6:	e070      	b.n	80078ba <ILI9341_Draw_Char+0x14e>
    {
        for (i=0; i<CHAR_HEIGHT; i++)
 80077d8:	2300      	movs	r3, #0
 80077da:	75bb      	strb	r3, [r7, #22]
 80077dc:	e067      	b.n	80078ae <ILI9341_Draw_Char+0x142>
        {
            if (temp[j] & (1<<i))
 80077de:	7d7b      	ldrb	r3, [r7, #21]
 80077e0:	f107 0218 	add.w	r2, r7, #24
 80077e4:	4413      	add	r3, r2
 80077e6:	f813 3c0c 	ldrb.w	r3, [r3, #-12]
 80077ea:	461a      	mov	r2, r3
 80077ec:	7dbb      	ldrb	r3, [r7, #22]
 80077ee:	fa42 f303 	asr.w	r3, r2, r3
 80077f2:	f003 0301 	and.w	r3, r3, #1
 80077f6:	2b00      	cmp	r3, #0
 80077f8:	d02b      	beq.n	8007852 <ILI9341_Draw_Char+0xe6>
            {
            	if(size == 1)
 80077fa:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 80077fc:	2b01      	cmp	r3, #1
 80077fe:	d10e      	bne.n	800781e <ILI9341_Draw_Char+0xb2>
				{
            		ILI9341_Draw_Pixel(x+j, y+i, colour);
 8007800:	7d7b      	ldrb	r3, [r7, #21]
 8007802:	b29a      	uxth	r2, r3
 8007804:	88bb      	ldrh	r3, [r7, #4]
 8007806:	4413      	add	r3, r2
 8007808:	b298      	uxth	r0, r3
 800780a:	7dbb      	ldrb	r3, [r7, #22]
 800780c:	b29a      	uxth	r2, r3
 800780e:	887b      	ldrh	r3, [r7, #2]
 8007810:	4413      	add	r3, r2
 8007812:	b29b      	uxth	r3, r3
 8007814:	883a      	ldrh	r2, [r7, #0]
 8007816:	4619      	mov	r1, r3
 8007818:	f000 fb96 	bl	8007f48 <ILI9341_Draw_Pixel>
 800781c:	e044      	b.n	80078a8 <ILI9341_Draw_Char+0x13c>
				}
				else
				{
					ILI9341_Draw_Rectangle(x+(j*size), y+(i*size), size, size, colour);
 800781e:	7d7b      	ldrb	r3, [r7, #21]
 8007820:	b29b      	uxth	r3, r3
 8007822:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 8007824:	fb12 f303 	smulbb	r3, r2, r3
 8007828:	b29a      	uxth	r2, r3
 800782a:	88bb      	ldrh	r3, [r7, #4]
 800782c:	4413      	add	r3, r2
 800782e:	b298      	uxth	r0, r3
 8007830:	7dbb      	ldrb	r3, [r7, #22]
 8007832:	b29b      	uxth	r3, r3
 8007834:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 8007836:	fb12 f303 	smulbb	r3, r2, r3
 800783a:	b29a      	uxth	r2, r3
 800783c:	887b      	ldrh	r3, [r7, #2]
 800783e:	4413      	add	r3, r2
 8007840:	b299      	uxth	r1, r3
 8007842:	8d3c      	ldrh	r4, [r7, #40]	; 0x28
 8007844:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 8007846:	883b      	ldrh	r3, [r7, #0]
 8007848:	9300      	str	r3, [sp, #0]
 800784a:	4623      	mov	r3, r4
 800784c:	f000 fc56 	bl	80080fc <ILI9341_Draw_Rectangle>
 8007850:	e02a      	b.n	80078a8 <ILI9341_Draw_Char+0x13c>
				}
            }
            else
            {
               	if(size == 1)
 8007852:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8007854:	2b01      	cmp	r3, #1
 8007856:	d10e      	bne.n	8007876 <ILI9341_Draw_Char+0x10a>
				{
					ILI9341_Draw_Pixel(x+j, y+i, bgcolour);
 8007858:	7d7b      	ldrb	r3, [r7, #21]
 800785a:	b29a      	uxth	r2, r3
 800785c:	88bb      	ldrh	r3, [r7, #4]
 800785e:	4413      	add	r3, r2
 8007860:	b298      	uxth	r0, r3
 8007862:	7dbb      	ldrb	r3, [r7, #22]
 8007864:	b29a      	uxth	r2, r3
 8007866:	887b      	ldrh	r3, [r7, #2]
 8007868:	4413      	add	r3, r2
 800786a:	b29b      	uxth	r3, r3
 800786c:	8dba      	ldrh	r2, [r7, #44]	; 0x2c
 800786e:	4619      	mov	r1, r3
 8007870:	f000 fb6a 	bl	8007f48 <ILI9341_Draw_Pixel>
 8007874:	e018      	b.n	80078a8 <ILI9341_Draw_Char+0x13c>
				}
				else
				{
					ILI9341_Draw_Rectangle(x+(j*size), y+(i*size), size, size, bgcolour);
 8007876:	7d7b      	ldrb	r3, [r7, #21]
 8007878:	b29b      	uxth	r3, r3
 800787a:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 800787c:	fb12 f303 	smulbb	r3, r2, r3
 8007880:	b29a      	uxth	r2, r3
 8007882:	88bb      	ldrh	r3, [r7, #4]
 8007884:	4413      	add	r3, r2
 8007886:	b298      	uxth	r0, r3
 8007888:	7dbb      	ldrb	r3, [r7, #22]
 800788a:	b29b      	uxth	r3, r3
 800788c:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 800788e:	fb12 f303 	smulbb	r3, r2, r3
 8007892:	b29a      	uxth	r2, r3
 8007894:	887b      	ldrh	r3, [r7, #2]
 8007896:	4413      	add	r3, r2
 8007898:	b299      	uxth	r1, r3
 800789a:	8d3c      	ldrh	r4, [r7, #40]	; 0x28
 800789c:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 800789e:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 80078a0:	9300      	str	r3, [sp, #0]
 80078a2:	4623      	mov	r3, r4
 80078a4:	f000 fc2a 	bl	80080fc <ILI9341_Draw_Rectangle>
        for (i=0; i<CHAR_HEIGHT; i++)
 80078a8:	7dbb      	ldrb	r3, [r7, #22]
 80078aa:	3301      	adds	r3, #1
 80078ac:	75bb      	strb	r3, [r7, #22]
 80078ae:	7dbb      	ldrb	r3, [r7, #22]
 80078b0:	2b07      	cmp	r3, #7
 80078b2:	d994      	bls.n	80077de <ILI9341_Draw_Char+0x72>
    for (j=0; j<CHAR_WIDTH; j++)
 80078b4:	7d7b      	ldrb	r3, [r7, #21]
 80078b6:	3301      	adds	r3, #1
 80078b8:	757b      	strb	r3, [r7, #21]
 80078ba:	7d7b      	ldrb	r3, [r7, #21]
 80078bc:	2b05      	cmp	r3, #5
 80078be:	d98b      	bls.n	80077d8 <ILI9341_Draw_Char+0x6c>
				}
            }
        }
    }
}
 80078c0:	bf00      	nop
 80078c2:	371c      	adds	r7, #28
 80078c4:	46bd      	mov	sp, r7
 80078c6:	bd90      	pop	{r4, r7, pc}
 80078c8:	0800982c 	.word	0x0800982c

080078cc <ILI9341_Draw_Text>:

/*Draws an array of characters (fonts imported from fonts.h) at x,Y location with specified font colour, size and Background colour*/
/*See fonts.h implementation of font on what is required for changing to a different font when switching fonts libraries*/
void ILI9341_Draw_Text(const char* Text, uint16_t x, uint16_t y, uint16_t colour, uint16_t size, uint16_t bgcolour)
{
 80078cc:	b590      	push	{r4, r7, lr}
 80078ce:	b087      	sub	sp, #28
 80078d0:	af02      	add	r7, sp, #8
 80078d2:	60f8      	str	r0, [r7, #12]
 80078d4:	4608      	mov	r0, r1
 80078d6:	4611      	mov	r1, r2
 80078d8:	461a      	mov	r2, r3
 80078da:	4603      	mov	r3, r0
 80078dc:	817b      	strh	r3, [r7, #10]
 80078de:	460b      	mov	r3, r1
 80078e0:	813b      	strh	r3, [r7, #8]
 80078e2:	4613      	mov	r3, r2
 80078e4:	80fb      	strh	r3, [r7, #6]
    /*if(size & 1)
    {
    	size = ((size >> 1) * 2);
    }*/

    while (*Text) {
 80078e6:	e016      	b.n	8007916 <ILI9341_Draw_Text+0x4a>
        ILI9341_Draw_Char(*Text++, x, y, colour, size, bgcolour);
 80078e8:	68fb      	ldr	r3, [r7, #12]
 80078ea:	1c5a      	adds	r2, r3, #1
 80078ec:	60fa      	str	r2, [r7, #12]
 80078ee:	7818      	ldrb	r0, [r3, #0]
 80078f0:	88fc      	ldrh	r4, [r7, #6]
 80078f2:	893a      	ldrh	r2, [r7, #8]
 80078f4:	8979      	ldrh	r1, [r7, #10]
 80078f6:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80078f8:	9301      	str	r3, [sp, #4]
 80078fa:	8c3b      	ldrh	r3, [r7, #32]
 80078fc:	9300      	str	r3, [sp, #0]
 80078fe:	4623      	mov	r3, r4
 8007900:	f7ff ff34 	bl	800776c <ILI9341_Draw_Char>
        x += CHAR_WIDTH*size;
 8007904:	8c3b      	ldrh	r3, [r7, #32]
 8007906:	461a      	mov	r2, r3
 8007908:	0052      	lsls	r2, r2, #1
 800790a:	4413      	add	r3, r2
 800790c:	005b      	lsls	r3, r3, #1
 800790e:	b29a      	uxth	r2, r3
 8007910:	897b      	ldrh	r3, [r7, #10]
 8007912:	4413      	add	r3, r2
 8007914:	817b      	strh	r3, [r7, #10]
    while (*Text) {
 8007916:	68fb      	ldr	r3, [r7, #12]
 8007918:	781b      	ldrb	r3, [r3, #0]
 800791a:	2b00      	cmp	r3, #0
 800791c:	d1e4      	bne.n	80078e8 <ILI9341_Draw_Text+0x1c>
    }


}
 800791e:	bf00      	nop
 8007920:	3714      	adds	r7, #20
 8007922:	46bd      	mov	sp, r7
 8007924:	bd90      	pop	{r4, r7, pc}
	...

08007928 <ILI9341_SPI_Init>:



/* Initialize SPI */
void ILI9341_SPI_Init(void)
{
 8007928:	b480      	push	{r7}
 800792a:	af00      	add	r7, sp, #0

	//GPIO INIT
	LCD_CS_PORT->ODR &= ~(LCD_CS_PIN);
 800792c:	4b05      	ldr	r3, [pc, #20]	; (8007944 <ILI9341_SPI_Init+0x1c>)
 800792e:	695b      	ldr	r3, [r3, #20]
 8007930:	4a04      	ldr	r2, [pc, #16]	; (8007944 <ILI9341_SPI_Init+0x1c>)
 8007932:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8007936:	6153      	str	r3, [r2, #20]
}
 8007938:	bf00      	nop
 800793a:	46bd      	mov	sp, r7
 800793c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007940:	4770      	bx	lr
 8007942:	bf00      	nop
 8007944:	48000400 	.word	0x48000400

08007948 <ILI9341_SPI_Send>:

/*Send data (char) to LCD*/
void ILI9341_SPI_Send(unsigned char SPI_Data)
{
 8007948:	b580      	push	{r7, lr}
 800794a:	b084      	sub	sp, #16
 800794c:	af00      	add	r7, sp, #0
 800794e:	4603      	mov	r3, r0
 8007950:	71fb      	strb	r3, [r7, #7]
	HAL_StatusTypeDef res;

		if( ((res = HAL_SPI_Transmit(HSPI_INSTANCE, &SPI_Data, 1, 1)) != HAL_OK) )
 8007952:	1df9      	adds	r1, r7, #7
 8007954:	2301      	movs	r3, #1
 8007956:	2201      	movs	r2, #1
 8007958:	4804      	ldr	r0, [pc, #16]	; (800796c <ILI9341_SPI_Send+0x24>)
 800795a:	f7fe f86b 	bl	8005a34 <HAL_SPI_Transmit>
 800795e:	4603      	mov	r3, r0
 8007960:	73fb      	strb	r3, [r7, #15]
		{
			//printf("HAL_SPI_Transmit Error #%u, ", res);
		}


}
 8007962:	bf00      	nop
 8007964:	3710      	adds	r7, #16
 8007966:	46bd      	mov	sp, r7
 8007968:	bd80      	pop	{r7, pc}
 800796a:	bf00      	nop
 800796c:	200006ec 	.word	0x200006ec

08007970 <ILI9341_Write_Command>:

/* Send command (char) to LCD */
void ILI9341_Write_Command(uint8_t Command)
{
 8007970:	b580      	push	{r7, lr}
 8007972:	b082      	sub	sp, #8
 8007974:	af00      	add	r7, sp, #0
 8007976:	4603      	mov	r3, r0
 8007978:	71fb      	strb	r3, [r7, #7]
	LCD_CS_PORT->ODR &= ~(LCD_CS_PIN);
 800797a:	4b0d      	ldr	r3, [pc, #52]	; (80079b0 <ILI9341_Write_Command+0x40>)
 800797c:	695b      	ldr	r3, [r3, #20]
 800797e:	4a0c      	ldr	r2, [pc, #48]	; (80079b0 <ILI9341_Write_Command+0x40>)
 8007980:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8007984:	6153      	str	r3, [r2, #20]
	LCD_DC_PORT->ODR &= ~(LCD_DC_PIN);
 8007986:	4b0a      	ldr	r3, [pc, #40]	; (80079b0 <ILI9341_Write_Command+0x40>)
 8007988:	695b      	ldr	r3, [r3, #20]
 800798a:	4a09      	ldr	r2, [pc, #36]	; (80079b0 <ILI9341_Write_Command+0x40>)
 800798c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007990:	6153      	str	r3, [r2, #20]
	ILI9341_SPI_Send(Command);
 8007992:	79fb      	ldrb	r3, [r7, #7]
 8007994:	4618      	mov	r0, r3
 8007996:	f7ff ffd7 	bl	8007948 <ILI9341_SPI_Send>
	LCD_CS_PORT->ODR |= LCD_CS_PIN;
 800799a:	4b05      	ldr	r3, [pc, #20]	; (80079b0 <ILI9341_Write_Command+0x40>)
 800799c:	695b      	ldr	r3, [r3, #20]
 800799e:	4a04      	ldr	r2, [pc, #16]	; (80079b0 <ILI9341_Write_Command+0x40>)
 80079a0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80079a4:	6153      	str	r3, [r2, #20]
}
 80079a6:	bf00      	nop
 80079a8:	3708      	adds	r7, #8
 80079aa:	46bd      	mov	sp, r7
 80079ac:	bd80      	pop	{r7, pc}
 80079ae:	bf00      	nop
 80079b0:	48000400 	.word	0x48000400

080079b4 <ILI9341_Write_Data>:

/* Send Data (char) to LCD */
void ILI9341_Write_Data(uint8_t Data)
{
 80079b4:	b580      	push	{r7, lr}
 80079b6:	b082      	sub	sp, #8
 80079b8:	af00      	add	r7, sp, #0
 80079ba:	4603      	mov	r3, r0
 80079bc:	71fb      	strb	r3, [r7, #7]
	LCD_DC_PORT->ODR |= LCD_DC_PIN;
 80079be:	4b0d      	ldr	r3, [pc, #52]	; (80079f4 <ILI9341_Write_Data+0x40>)
 80079c0:	695b      	ldr	r3, [r3, #20]
 80079c2:	4a0c      	ldr	r2, [pc, #48]	; (80079f4 <ILI9341_Write_Data+0x40>)
 80079c4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80079c8:	6153      	str	r3, [r2, #20]
	LCD_CS_PORT->ODR &= ~(LCD_CS_PIN);
 80079ca:	4b0a      	ldr	r3, [pc, #40]	; (80079f4 <ILI9341_Write_Data+0x40>)
 80079cc:	695b      	ldr	r3, [r3, #20]
 80079ce:	4a09      	ldr	r2, [pc, #36]	; (80079f4 <ILI9341_Write_Data+0x40>)
 80079d0:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80079d4:	6153      	str	r3, [r2, #20]
	ILI9341_SPI_Send(Data);
 80079d6:	79fb      	ldrb	r3, [r7, #7]
 80079d8:	4618      	mov	r0, r3
 80079da:	f7ff ffb5 	bl	8007948 <ILI9341_SPI_Send>
	LCD_CS_PORT->ODR &= ~(LCD_CS_PIN);
 80079de:	4b05      	ldr	r3, [pc, #20]	; (80079f4 <ILI9341_Write_Data+0x40>)
 80079e0:	695b      	ldr	r3, [r3, #20]
 80079e2:	4a04      	ldr	r2, [pc, #16]	; (80079f4 <ILI9341_Write_Data+0x40>)
 80079e4:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80079e8:	6153      	str	r3, [r2, #20]
}
 80079ea:	bf00      	nop
 80079ec:	3708      	adds	r7, #8
 80079ee:	46bd      	mov	sp, r7
 80079f0:	bd80      	pop	{r7, pc}
 80079f2:	bf00      	nop
 80079f4:	48000400 	.word	0x48000400

080079f8 <ILI9341_Set_Address>:

/* Set Address - Location block - to draw into */
void ILI9341_Set_Address(uint16_t X1, uint16_t Y1, uint16_t X2, uint16_t Y2)
{
 80079f8:	b590      	push	{r4, r7, lr}
 80079fa:	b083      	sub	sp, #12
 80079fc:	af00      	add	r7, sp, #0
 80079fe:	4604      	mov	r4, r0
 8007a00:	4608      	mov	r0, r1
 8007a02:	4611      	mov	r1, r2
 8007a04:	461a      	mov	r2, r3
 8007a06:	4623      	mov	r3, r4
 8007a08:	80fb      	strh	r3, [r7, #6]
 8007a0a:	4603      	mov	r3, r0
 8007a0c:	80bb      	strh	r3, [r7, #4]
 8007a0e:	460b      	mov	r3, r1
 8007a10:	807b      	strh	r3, [r7, #2]
 8007a12:	4613      	mov	r3, r2
 8007a14:	803b      	strh	r3, [r7, #0]
	ILI9341_Write_Command(0x2A);
 8007a16:	202a      	movs	r0, #42	; 0x2a
 8007a18:	f7ff ffaa 	bl	8007970 <ILI9341_Write_Command>
	ILI9341_Write_Data(X1>>8);
 8007a1c:	88fb      	ldrh	r3, [r7, #6]
 8007a1e:	0a1b      	lsrs	r3, r3, #8
 8007a20:	b29b      	uxth	r3, r3
 8007a22:	b2db      	uxtb	r3, r3
 8007a24:	4618      	mov	r0, r3
 8007a26:	f7ff ffc5 	bl	80079b4 <ILI9341_Write_Data>
	ILI9341_Write_Data(X1);
 8007a2a:	88fb      	ldrh	r3, [r7, #6]
 8007a2c:	b2db      	uxtb	r3, r3
 8007a2e:	4618      	mov	r0, r3
 8007a30:	f7ff ffc0 	bl	80079b4 <ILI9341_Write_Data>
	ILI9341_Write_Data(X2>>8);
 8007a34:	887b      	ldrh	r3, [r7, #2]
 8007a36:	0a1b      	lsrs	r3, r3, #8
 8007a38:	b29b      	uxth	r3, r3
 8007a3a:	b2db      	uxtb	r3, r3
 8007a3c:	4618      	mov	r0, r3
 8007a3e:	f7ff ffb9 	bl	80079b4 <ILI9341_Write_Data>
	ILI9341_Write_Data(X2);
 8007a42:	887b      	ldrh	r3, [r7, #2]
 8007a44:	b2db      	uxtb	r3, r3
 8007a46:	4618      	mov	r0, r3
 8007a48:	f7ff ffb4 	bl	80079b4 <ILI9341_Write_Data>

	ILI9341_Write_Command(0x2B);
 8007a4c:	202b      	movs	r0, #43	; 0x2b
 8007a4e:	f7ff ff8f 	bl	8007970 <ILI9341_Write_Command>
	ILI9341_Write_Data(Y1>>8);
 8007a52:	88bb      	ldrh	r3, [r7, #4]
 8007a54:	0a1b      	lsrs	r3, r3, #8
 8007a56:	b29b      	uxth	r3, r3
 8007a58:	b2db      	uxtb	r3, r3
 8007a5a:	4618      	mov	r0, r3
 8007a5c:	f7ff ffaa 	bl	80079b4 <ILI9341_Write_Data>
	ILI9341_Write_Data(Y1);
 8007a60:	88bb      	ldrh	r3, [r7, #4]
 8007a62:	b2db      	uxtb	r3, r3
 8007a64:	4618      	mov	r0, r3
 8007a66:	f7ff ffa5 	bl	80079b4 <ILI9341_Write_Data>
	ILI9341_Write_Data(Y2>>8);
 8007a6a:	883b      	ldrh	r3, [r7, #0]
 8007a6c:	0a1b      	lsrs	r3, r3, #8
 8007a6e:	b29b      	uxth	r3, r3
 8007a70:	b2db      	uxtb	r3, r3
 8007a72:	4618      	mov	r0, r3
 8007a74:	f7ff ff9e 	bl	80079b4 <ILI9341_Write_Data>
	ILI9341_Write_Data(Y2);
 8007a78:	883b      	ldrh	r3, [r7, #0]
 8007a7a:	b2db      	uxtb	r3, r3
 8007a7c:	4618      	mov	r0, r3
 8007a7e:	f7ff ff99 	bl	80079b4 <ILI9341_Write_Data>

	ILI9341_Write_Command(0x2C);
 8007a82:	202c      	movs	r0, #44	; 0x2c
 8007a84:	f7ff ff74 	bl	8007970 <ILI9341_Write_Command>
}
 8007a88:	bf00      	nop
 8007a8a:	370c      	adds	r7, #12
 8007a8c:	46bd      	mov	sp, r7
 8007a8e:	bd90      	pop	{r4, r7, pc}

08007a90 <ILI9341_Reset>:

/*HARDWARE RESET*/
void ILI9341_Reset(void)
{
 8007a90:	b580      	push	{r7, lr}
 8007a92:	af00      	add	r7, sp, #0
	LCD_RST_PORT->ODR &= ~(LCD_RST_PIN);
 8007a94:	4b0c      	ldr	r3, [pc, #48]	; (8007ac8 <ILI9341_Reset+0x38>)
 8007a96:	695b      	ldr	r3, [r3, #20]
 8007a98:	4a0b      	ldr	r2, [pc, #44]	; (8007ac8 <ILI9341_Reset+0x38>)
 8007a9a:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8007a9e:	6153      	str	r3, [r2, #20]
	HAL_Delay(200);
 8007aa0:	20c8      	movs	r0, #200	; 0xc8
 8007aa2:	f7fa faf5 	bl	8002090 <HAL_Delay>
	LCD_CS_PORT->ODR &= ~(LCD_CS_PIN);
 8007aa6:	4b08      	ldr	r3, [pc, #32]	; (8007ac8 <ILI9341_Reset+0x38>)
 8007aa8:	695b      	ldr	r3, [r3, #20]
 8007aaa:	4a07      	ldr	r2, [pc, #28]	; (8007ac8 <ILI9341_Reset+0x38>)
 8007aac:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8007ab0:	6153      	str	r3, [r2, #20]
	HAL_Delay(200);
 8007ab2:	20c8      	movs	r0, #200	; 0xc8
 8007ab4:	f7fa faec 	bl	8002090 <HAL_Delay>
	LCD_RST_PORT->ODR |= LCD_RST_PIN;
 8007ab8:	4b03      	ldr	r3, [pc, #12]	; (8007ac8 <ILI9341_Reset+0x38>)
 8007aba:	695b      	ldr	r3, [r3, #20]
 8007abc:	4a02      	ldr	r2, [pc, #8]	; (8007ac8 <ILI9341_Reset+0x38>)
 8007abe:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8007ac2:	6153      	str	r3, [r2, #20]
}
 8007ac4:	bf00      	nop
 8007ac6:	bd80      	pop	{r7, pc}
 8007ac8:	48000400 	.word	0x48000400

08007acc <ILI9341_Set_Rotation>:

/*Ser rotation of the screen - changes x0 and y0*/
void ILI9341_Set_Rotation(uint8_t Rotation) 
{
 8007acc:	b580      	push	{r7, lr}
 8007ace:	b084      	sub	sp, #16
 8007ad0:	af00      	add	r7, sp, #0
 8007ad2:	4603      	mov	r3, r0
 8007ad4:	71fb      	strb	r3, [r7, #7]
	
	uint8_t screen_rotation = Rotation;
 8007ad6:	79fb      	ldrb	r3, [r7, #7]
 8007ad8:	73fb      	strb	r3, [r7, #15]
	
	ILI9341_Write_Command(0x36);
 8007ada:	2036      	movs	r0, #54	; 0x36
 8007adc:	f7ff ff48 	bl	8007970 <ILI9341_Write_Command>
	//HAL_Delay(1);

	switch(screen_rotation)
 8007ae0:	7bfb      	ldrb	r3, [r7, #15]
 8007ae2:	2b03      	cmp	r3, #3
 8007ae4:	d836      	bhi.n	8007b54 <ILI9341_Set_Rotation+0x88>
 8007ae6:	a201      	add	r2, pc, #4	; (adr r2, 8007aec <ILI9341_Set_Rotation+0x20>)
 8007ae8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007aec:	08007afd 	.word	0x08007afd
 8007af0:	08007b13 	.word	0x08007b13
 8007af4:	08007b29 	.word	0x08007b29
 8007af8:	08007b3f 	.word	0x08007b3f
	{
		case SCREEN_VERTICAL_1:
			ILI9341_Write_Data(0x40|0x08);
 8007afc:	2048      	movs	r0, #72	; 0x48
 8007afe:	f7ff ff59 	bl	80079b4 <ILI9341_Write_Data>
			LCD_WIDTH = 240;
 8007b02:	4b17      	ldr	r3, [pc, #92]	; (8007b60 <ILI9341_Set_Rotation+0x94>)
 8007b04:	22f0      	movs	r2, #240	; 0xf0
 8007b06:	801a      	strh	r2, [r3, #0]
			LCD_HEIGHT = 320;
 8007b08:	4b16      	ldr	r3, [pc, #88]	; (8007b64 <ILI9341_Set_Rotation+0x98>)
 8007b0a:	f44f 72a0 	mov.w	r2, #320	; 0x140
 8007b0e:	801a      	strh	r2, [r3, #0]
			break;
 8007b10:	e021      	b.n	8007b56 <ILI9341_Set_Rotation+0x8a>
		case SCREEN_HORIZONTAL_1:
			ILI9341_Write_Data(0x20|0x08);
 8007b12:	2028      	movs	r0, #40	; 0x28
 8007b14:	f7ff ff4e 	bl	80079b4 <ILI9341_Write_Data>
			LCD_WIDTH  = 320;
 8007b18:	4b11      	ldr	r3, [pc, #68]	; (8007b60 <ILI9341_Set_Rotation+0x94>)
 8007b1a:	f44f 72a0 	mov.w	r2, #320	; 0x140
 8007b1e:	801a      	strh	r2, [r3, #0]
			LCD_HEIGHT = 240;
 8007b20:	4b10      	ldr	r3, [pc, #64]	; (8007b64 <ILI9341_Set_Rotation+0x98>)
 8007b22:	22f0      	movs	r2, #240	; 0xf0
 8007b24:	801a      	strh	r2, [r3, #0]
			break;
 8007b26:	e016      	b.n	8007b56 <ILI9341_Set_Rotation+0x8a>
		case SCREEN_VERTICAL_2:
			ILI9341_Write_Data(0x80|0x08);
 8007b28:	2088      	movs	r0, #136	; 0x88
 8007b2a:	f7ff ff43 	bl	80079b4 <ILI9341_Write_Data>
			LCD_WIDTH  = 240;
 8007b2e:	4b0c      	ldr	r3, [pc, #48]	; (8007b60 <ILI9341_Set_Rotation+0x94>)
 8007b30:	22f0      	movs	r2, #240	; 0xf0
 8007b32:	801a      	strh	r2, [r3, #0]
			LCD_HEIGHT = 320;
 8007b34:	4b0b      	ldr	r3, [pc, #44]	; (8007b64 <ILI9341_Set_Rotation+0x98>)
 8007b36:	f44f 72a0 	mov.w	r2, #320	; 0x140
 8007b3a:	801a      	strh	r2, [r3, #0]
			break;
 8007b3c:	e00b      	b.n	8007b56 <ILI9341_Set_Rotation+0x8a>
		case SCREEN_HORIZONTAL_2:
			ILI9341_Write_Data(0x40|0x80|0x20|0x08);
 8007b3e:	20e8      	movs	r0, #232	; 0xe8
 8007b40:	f7ff ff38 	bl	80079b4 <ILI9341_Write_Data>
			LCD_WIDTH  = 320;
 8007b44:	4b06      	ldr	r3, [pc, #24]	; (8007b60 <ILI9341_Set_Rotation+0x94>)
 8007b46:	f44f 72a0 	mov.w	r2, #320	; 0x140
 8007b4a:	801a      	strh	r2, [r3, #0]
			LCD_HEIGHT = 240;
 8007b4c:	4b05      	ldr	r3, [pc, #20]	; (8007b64 <ILI9341_Set_Rotation+0x98>)
 8007b4e:	22f0      	movs	r2, #240	; 0xf0
 8007b50:	801a      	strh	r2, [r3, #0]
			break;
 8007b52:	e000      	b.n	8007b56 <ILI9341_Set_Rotation+0x8a>
		default:
			//EXIT IF SCREEN ROTATION NOT VALID!
			break;
 8007b54:	bf00      	nop
	}
}
 8007b56:	bf00      	nop
 8007b58:	3710      	adds	r7, #16
 8007b5a:	46bd      	mov	sp, r7
 8007b5c:	bd80      	pop	{r7, pc}
 8007b5e:	bf00      	nop
 8007b60:	200003d2 	.word	0x200003d2
 8007b64:	200003d0 	.word	0x200003d0

08007b68 <ILI9341_Enable>:

/*Enable LCD display*/
void ILI9341_Enable(void)
{
 8007b68:	b480      	push	{r7}
 8007b6a:	af00      	add	r7, sp, #0
	LCD_RST_PORT->ODR |= LCD_RST_PIN;
 8007b6c:	4b05      	ldr	r3, [pc, #20]	; (8007b84 <ILI9341_Enable+0x1c>)
 8007b6e:	695b      	ldr	r3, [r3, #20]
 8007b70:	4a04      	ldr	r2, [pc, #16]	; (8007b84 <ILI9341_Enable+0x1c>)
 8007b72:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8007b76:	6153      	str	r3, [r2, #20]
}
 8007b78:	bf00      	nop
 8007b7a:	46bd      	mov	sp, r7
 8007b7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b80:	4770      	bx	lr
 8007b82:	bf00      	nop
 8007b84:	48000400 	.word	0x48000400

08007b88 <ILI9341_Init>:

/*Initialize LCD display*/
void ILI9341_Init(void)
{
 8007b88:	b580      	push	{r7, lr}
 8007b8a:	af00      	add	r7, sp, #0

	ILI9341_Enable();
 8007b8c:	f7ff ffec 	bl	8007b68 <ILI9341_Enable>
	ILI9341_SPI_Init();
 8007b90:	f7ff feca 	bl	8007928 <ILI9341_SPI_Init>
	ILI9341_Reset();
 8007b94:	f7ff ff7c 	bl	8007a90 <ILI9341_Reset>

	//SOFTWARE RESET
	ILI9341_Write_Command(0x01);
 8007b98:	2001      	movs	r0, #1
 8007b9a:	f7ff fee9 	bl	8007970 <ILI9341_Write_Command>
	HAL_Delay(2000);
 8007b9e:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8007ba2:	f7fa fa75 	bl	8002090 <HAL_Delay>

	//POWER CONTROL A
	ILI9341_Write_Command(0xCB);
 8007ba6:	20cb      	movs	r0, #203	; 0xcb
 8007ba8:	f7ff fee2 	bl	8007970 <ILI9341_Write_Command>
	ILI9341_Write_Data(0x39);
 8007bac:	2039      	movs	r0, #57	; 0x39
 8007bae:	f7ff ff01 	bl	80079b4 <ILI9341_Write_Data>
	ILI9341_Write_Data(0x2C);
 8007bb2:	202c      	movs	r0, #44	; 0x2c
 8007bb4:	f7ff fefe 	bl	80079b4 <ILI9341_Write_Data>
	ILI9341_Write_Data(0x00);
 8007bb8:	2000      	movs	r0, #0
 8007bba:	f7ff fefb 	bl	80079b4 <ILI9341_Write_Data>
	ILI9341_Write_Data(0x34);
 8007bbe:	2034      	movs	r0, #52	; 0x34
 8007bc0:	f7ff fef8 	bl	80079b4 <ILI9341_Write_Data>
	ILI9341_Write_Data(0x02);
 8007bc4:	2002      	movs	r0, #2
 8007bc6:	f7ff fef5 	bl	80079b4 <ILI9341_Write_Data>

	//POWER CONTROL B
	ILI9341_Write_Command(0xCF);
 8007bca:	20cf      	movs	r0, #207	; 0xcf
 8007bcc:	f7ff fed0 	bl	8007970 <ILI9341_Write_Command>
	ILI9341_Write_Data(0x00);
 8007bd0:	2000      	movs	r0, #0
 8007bd2:	f7ff feef 	bl	80079b4 <ILI9341_Write_Data>
	ILI9341_Write_Data(0xC1);
 8007bd6:	20c1      	movs	r0, #193	; 0xc1
 8007bd8:	f7ff feec 	bl	80079b4 <ILI9341_Write_Data>
	ILI9341_Write_Data(0x30);
 8007bdc:	2030      	movs	r0, #48	; 0x30
 8007bde:	f7ff fee9 	bl	80079b4 <ILI9341_Write_Data>

	//DRIVER TIMING CONTROL A
	ILI9341_Write_Command(0xE8);
 8007be2:	20e8      	movs	r0, #232	; 0xe8
 8007be4:	f7ff fec4 	bl	8007970 <ILI9341_Write_Command>
	ILI9341_Write_Data(0x85);
 8007be8:	2085      	movs	r0, #133	; 0x85
 8007bea:	f7ff fee3 	bl	80079b4 <ILI9341_Write_Data>
	ILI9341_Write_Data(0x00);
 8007bee:	2000      	movs	r0, #0
 8007bf0:	f7ff fee0 	bl	80079b4 <ILI9341_Write_Data>
	ILI9341_Write_Data(0x78);
 8007bf4:	2078      	movs	r0, #120	; 0x78
 8007bf6:	f7ff fedd 	bl	80079b4 <ILI9341_Write_Data>

	//DRIVER TIMING CONTROL B
	ILI9341_Write_Command(0xEA);
 8007bfa:	20ea      	movs	r0, #234	; 0xea
 8007bfc:	f7ff feb8 	bl	8007970 <ILI9341_Write_Command>
	ILI9341_Write_Data(0x00);
 8007c00:	2000      	movs	r0, #0
 8007c02:	f7ff fed7 	bl	80079b4 <ILI9341_Write_Data>
	ILI9341_Write_Data(0x00);
 8007c06:	2000      	movs	r0, #0
 8007c08:	f7ff fed4 	bl	80079b4 <ILI9341_Write_Data>

	//POWER ON SEQUENCE CONTROL
	ILI9341_Write_Command(0xED);
 8007c0c:	20ed      	movs	r0, #237	; 0xed
 8007c0e:	f7ff feaf 	bl	8007970 <ILI9341_Write_Command>
	ILI9341_Write_Data(0x64);
 8007c12:	2064      	movs	r0, #100	; 0x64
 8007c14:	f7ff fece 	bl	80079b4 <ILI9341_Write_Data>
	ILI9341_Write_Data(0x03);
 8007c18:	2003      	movs	r0, #3
 8007c1a:	f7ff fecb 	bl	80079b4 <ILI9341_Write_Data>
	ILI9341_Write_Data(0x12);
 8007c1e:	2012      	movs	r0, #18
 8007c20:	f7ff fec8 	bl	80079b4 <ILI9341_Write_Data>
	ILI9341_Write_Data(0x81);
 8007c24:	2081      	movs	r0, #129	; 0x81
 8007c26:	f7ff fec5 	bl	80079b4 <ILI9341_Write_Data>

	//PUMP RATIO CONTROL
	ILI9341_Write_Command(0xF7);
 8007c2a:	20f7      	movs	r0, #247	; 0xf7
 8007c2c:	f7ff fea0 	bl	8007970 <ILI9341_Write_Command>
	ILI9341_Write_Data(0x20);
 8007c30:	2020      	movs	r0, #32
 8007c32:	f7ff febf 	bl	80079b4 <ILI9341_Write_Data>

	//POWER CONTROL,VRH[5:0]
	ILI9341_Write_Command(0xC0);
 8007c36:	20c0      	movs	r0, #192	; 0xc0
 8007c38:	f7ff fe9a 	bl	8007970 <ILI9341_Write_Command>
	ILI9341_Write_Data(0x23);
 8007c3c:	2023      	movs	r0, #35	; 0x23
 8007c3e:	f7ff feb9 	bl	80079b4 <ILI9341_Write_Data>

	//POWER CONTROL,SAP[2:0];BT[3:0]
	ILI9341_Write_Command(0xC1);
 8007c42:	20c1      	movs	r0, #193	; 0xc1
 8007c44:	f7ff fe94 	bl	8007970 <ILI9341_Write_Command>
	ILI9341_Write_Data(0x10);
 8007c48:	2010      	movs	r0, #16
 8007c4a:	f7ff feb3 	bl	80079b4 <ILI9341_Write_Data>

	//VCM CONTROL
	ILI9341_Write_Command(0xC5);
 8007c4e:	20c5      	movs	r0, #197	; 0xc5
 8007c50:	f7ff fe8e 	bl	8007970 <ILI9341_Write_Command>
	ILI9341_Write_Data(0x3E);
 8007c54:	203e      	movs	r0, #62	; 0x3e
 8007c56:	f7ff fead 	bl	80079b4 <ILI9341_Write_Data>
	ILI9341_Write_Data(0x28);
 8007c5a:	2028      	movs	r0, #40	; 0x28
 8007c5c:	f7ff feaa 	bl	80079b4 <ILI9341_Write_Data>

	//VCM CONTROL 2
	ILI9341_Write_Command(0xC7);
 8007c60:	20c7      	movs	r0, #199	; 0xc7
 8007c62:	f7ff fe85 	bl	8007970 <ILI9341_Write_Command>
	ILI9341_Write_Data(0x86);
 8007c66:	2086      	movs	r0, #134	; 0x86
 8007c68:	f7ff fea4 	bl	80079b4 <ILI9341_Write_Data>

	//MEMORY ACCESS CONTROL
	ILI9341_Write_Command(0x36);
 8007c6c:	2036      	movs	r0, #54	; 0x36
 8007c6e:	f7ff fe7f 	bl	8007970 <ILI9341_Write_Command>
	ILI9341_Write_Data(0x48);
 8007c72:	2048      	movs	r0, #72	; 0x48
 8007c74:	f7ff fe9e 	bl	80079b4 <ILI9341_Write_Data>


	//PIXEL FORMAT
	ILI9341_Write_Command(0x3A);
 8007c78:	203a      	movs	r0, #58	; 0x3a
 8007c7a:	f7ff fe79 	bl	8007970 <ILI9341_Write_Command>
	ILI9341_Write_Data(0x55);
 8007c7e:	2055      	movs	r0, #85	; 0x55
 8007c80:	f7ff fe98 	bl	80079b4 <ILI9341_Write_Data>

	//FRAME RATIO CONTROL, STANDARD RGB COLOR
	ILI9341_Write_Command(0xB1);
 8007c84:	20b1      	movs	r0, #177	; 0xb1
 8007c86:	f7ff fe73 	bl	8007970 <ILI9341_Write_Command>
	ILI9341_Write_Data(0x00);
 8007c8a:	2000      	movs	r0, #0
 8007c8c:	f7ff fe92 	bl	80079b4 <ILI9341_Write_Data>
	ILI9341_Write_Data(0x18);
 8007c90:	2018      	movs	r0, #24
 8007c92:	f7ff fe8f 	bl	80079b4 <ILI9341_Write_Data>

	//DISPLAY FUNCTION CONTROL
	ILI9341_Write_Command(0xB6);
 8007c96:	20b6      	movs	r0, #182	; 0xb6
 8007c98:	f7ff fe6a 	bl	8007970 <ILI9341_Write_Command>
	ILI9341_Write_Data(0x08);
 8007c9c:	2008      	movs	r0, #8
 8007c9e:	f7ff fe89 	bl	80079b4 <ILI9341_Write_Data>
	ILI9341_Write_Data(0x82);
 8007ca2:	2082      	movs	r0, #130	; 0x82
 8007ca4:	f7ff fe86 	bl	80079b4 <ILI9341_Write_Data>
	ILI9341_Write_Data(0x27);
 8007ca8:	2027      	movs	r0, #39	; 0x27
 8007caa:	f7ff fe83 	bl	80079b4 <ILI9341_Write_Data>


	//3GAMMA FUNCTION DISABLE
	ILI9341_Write_Command(0xF2);
 8007cae:	20f2      	movs	r0, #242	; 0xf2
 8007cb0:	f7ff fe5e 	bl	8007970 <ILI9341_Write_Command>
	ILI9341_Write_Data(0x00);
 8007cb4:	2000      	movs	r0, #0
 8007cb6:	f7ff fe7d 	bl	80079b4 <ILI9341_Write_Data>

	//GAMMA CURVE SELECTED
	ILI9341_Write_Command(0x26);
 8007cba:	2026      	movs	r0, #38	; 0x26
 8007cbc:	f7ff fe58 	bl	8007970 <ILI9341_Write_Command>
	ILI9341_Write_Data(0x01);
 8007cc0:	2001      	movs	r0, #1
 8007cc2:	f7ff fe77 	bl	80079b4 <ILI9341_Write_Data>

	//POSITIVE GAMMA CORRECTION
	ILI9341_Write_Command(0xE0);
 8007cc6:	20e0      	movs	r0, #224	; 0xe0
 8007cc8:	f7ff fe52 	bl	8007970 <ILI9341_Write_Command>
	ILI9341_Write_Data(0x0F);
 8007ccc:	200f      	movs	r0, #15
 8007cce:	f7ff fe71 	bl	80079b4 <ILI9341_Write_Data>
	ILI9341_Write_Data(0x31);
 8007cd2:	2031      	movs	r0, #49	; 0x31
 8007cd4:	f7ff fe6e 	bl	80079b4 <ILI9341_Write_Data>
	ILI9341_Write_Data(0x2B);
 8007cd8:	202b      	movs	r0, #43	; 0x2b
 8007cda:	f7ff fe6b 	bl	80079b4 <ILI9341_Write_Data>
	ILI9341_Write_Data(0x0C);
 8007cde:	200c      	movs	r0, #12
 8007ce0:	f7ff fe68 	bl	80079b4 <ILI9341_Write_Data>
	ILI9341_Write_Data(0x0E);
 8007ce4:	200e      	movs	r0, #14
 8007ce6:	f7ff fe65 	bl	80079b4 <ILI9341_Write_Data>
	ILI9341_Write_Data(0x08);
 8007cea:	2008      	movs	r0, #8
 8007cec:	f7ff fe62 	bl	80079b4 <ILI9341_Write_Data>
	ILI9341_Write_Data(0x4E);
 8007cf0:	204e      	movs	r0, #78	; 0x4e
 8007cf2:	f7ff fe5f 	bl	80079b4 <ILI9341_Write_Data>
	ILI9341_Write_Data(0xF1);
 8007cf6:	20f1      	movs	r0, #241	; 0xf1
 8007cf8:	f7ff fe5c 	bl	80079b4 <ILI9341_Write_Data>
	ILI9341_Write_Data(0x37);
 8007cfc:	2037      	movs	r0, #55	; 0x37
 8007cfe:	f7ff fe59 	bl	80079b4 <ILI9341_Write_Data>
	ILI9341_Write_Data(0x07);
 8007d02:	2007      	movs	r0, #7
 8007d04:	f7ff fe56 	bl	80079b4 <ILI9341_Write_Data>
	ILI9341_Write_Data(0x10);
 8007d08:	2010      	movs	r0, #16
 8007d0a:	f7ff fe53 	bl	80079b4 <ILI9341_Write_Data>
	ILI9341_Write_Data(0x03);
 8007d0e:	2003      	movs	r0, #3
 8007d10:	f7ff fe50 	bl	80079b4 <ILI9341_Write_Data>
	ILI9341_Write_Data(0x0E);
 8007d14:	200e      	movs	r0, #14
 8007d16:	f7ff fe4d 	bl	80079b4 <ILI9341_Write_Data>
	ILI9341_Write_Data(0x09);
 8007d1a:	2009      	movs	r0, #9
 8007d1c:	f7ff fe4a 	bl	80079b4 <ILI9341_Write_Data>
	ILI9341_Write_Data(0x00);
 8007d20:	2000      	movs	r0, #0
 8007d22:	f7ff fe47 	bl	80079b4 <ILI9341_Write_Data>

	//NEGATIVE GAMMA CORRECTION
	ILI9341_Write_Command(0xE1);
 8007d26:	20e1      	movs	r0, #225	; 0xe1
 8007d28:	f7ff fe22 	bl	8007970 <ILI9341_Write_Command>
	ILI9341_Write_Data(0x00);
 8007d2c:	2000      	movs	r0, #0
 8007d2e:	f7ff fe41 	bl	80079b4 <ILI9341_Write_Data>
	ILI9341_Write_Data(0x0E);
 8007d32:	200e      	movs	r0, #14
 8007d34:	f7ff fe3e 	bl	80079b4 <ILI9341_Write_Data>
	ILI9341_Write_Data(0x14);
 8007d38:	2014      	movs	r0, #20
 8007d3a:	f7ff fe3b 	bl	80079b4 <ILI9341_Write_Data>
	ILI9341_Write_Data(0x03);
 8007d3e:	2003      	movs	r0, #3
 8007d40:	f7ff fe38 	bl	80079b4 <ILI9341_Write_Data>
	ILI9341_Write_Data(0x11);
 8007d44:	2011      	movs	r0, #17
 8007d46:	f7ff fe35 	bl	80079b4 <ILI9341_Write_Data>
	ILI9341_Write_Data(0x07);
 8007d4a:	2007      	movs	r0, #7
 8007d4c:	f7ff fe32 	bl	80079b4 <ILI9341_Write_Data>
	ILI9341_Write_Data(0x31);
 8007d50:	2031      	movs	r0, #49	; 0x31
 8007d52:	f7ff fe2f 	bl	80079b4 <ILI9341_Write_Data>
	ILI9341_Write_Data(0xC1);
 8007d56:	20c1      	movs	r0, #193	; 0xc1
 8007d58:	f7ff fe2c 	bl	80079b4 <ILI9341_Write_Data>
	ILI9341_Write_Data(0x48);
 8007d5c:	2048      	movs	r0, #72	; 0x48
 8007d5e:	f7ff fe29 	bl	80079b4 <ILI9341_Write_Data>
	ILI9341_Write_Data(0x08);
 8007d62:	2008      	movs	r0, #8
 8007d64:	f7ff fe26 	bl	80079b4 <ILI9341_Write_Data>
	ILI9341_Write_Data(0x0F);
 8007d68:	200f      	movs	r0, #15
 8007d6a:	f7ff fe23 	bl	80079b4 <ILI9341_Write_Data>
	ILI9341_Write_Data(0x0C);
 8007d6e:	200c      	movs	r0, #12
 8007d70:	f7ff fe20 	bl	80079b4 <ILI9341_Write_Data>
	ILI9341_Write_Data(0x31);
 8007d74:	2031      	movs	r0, #49	; 0x31
 8007d76:	f7ff fe1d 	bl	80079b4 <ILI9341_Write_Data>
	ILI9341_Write_Data(0x36);
 8007d7a:	2036      	movs	r0, #54	; 0x36
 8007d7c:	f7ff fe1a 	bl	80079b4 <ILI9341_Write_Data>
	ILI9341_Write_Data(0x0F);
 8007d80:	200f      	movs	r0, #15
 8007d82:	f7ff fe17 	bl	80079b4 <ILI9341_Write_Data>

	//EXIT SLEEP
	ILI9341_Write_Command(0x11);
 8007d86:	2011      	movs	r0, #17
 8007d88:	f7ff fdf2 	bl	8007970 <ILI9341_Write_Command>
	HAL_Delay(240);
 8007d8c:	20f0      	movs	r0, #240	; 0xf0
 8007d8e:	f7fa f97f 	bl	8002090 <HAL_Delay>

	//TURN ON DISPLAY
	ILI9341_Write_Command(0x29);
 8007d92:	2029      	movs	r0, #41	; 0x29
 8007d94:	f7ff fdec 	bl	8007970 <ILI9341_Write_Command>
	
	//STARTING ROTATION
	ILI9341_Set_Rotation(SCREEN_VERTICAL_1);
 8007d98:	2000      	movs	r0, #0
 8007d9a:	f7ff fe97 	bl	8007acc <ILI9341_Set_Rotation>
}
 8007d9e:	bf00      	nop
 8007da0:	bd80      	pop	{r7, pc}
	...

08007da4 <ILI9341_Draw_colour_Burst>:
}

//INTERNAL FUNCTION OF LIBRARY
/*Sends block colour information to LCD*/
void ILI9341_Draw_colour_Burst(uint16_t xpos, uint16_t ypos, uint16_t colour, uint32_t size, CHUNK_Type block_type)
{
 8007da4:	b5b0      	push	{r4, r5, r7, lr}
 8007da6:	b08e      	sub	sp, #56	; 0x38
 8007da8:	af00      	add	r7, sp, #0
 8007daa:	607b      	str	r3, [r7, #4]
 8007dac:	4603      	mov	r3, r0
 8007dae:	81fb      	strh	r3, [r7, #14]
 8007db0:	460b      	mov	r3, r1
 8007db2:	81bb      	strh	r3, [r7, #12]
 8007db4:	4613      	mov	r3, r2
 8007db6:	817b      	strh	r3, [r7, #10]
 8007db8:	466b      	mov	r3, sp
 8007dba:	461d      	mov	r5, r3




	uint32_t buffer_size = 0;
 8007dbc:	2300      	movs	r3, #0
 8007dbe:	62fb      	str	r3, [r7, #44]	; 0x2c
	if((size*2) < BURST_MAX_SIZE)
 8007dc0:	687b      	ldr	r3, [r7, #4]
 8007dc2:	005b      	lsls	r3, r3, #1
 8007dc4:	4a48      	ldr	r2, [pc, #288]	; (8007ee8 <ILI9341_Draw_colour_Burst+0x144>)
 8007dc6:	8812      	ldrh	r2, [r2, #0]
 8007dc8:	4293      	cmp	r3, r2
 8007dca:	d202      	bcs.n	8007dd2 <ILI9341_Draw_colour_Burst+0x2e>
	{
		buffer_size = size;
 8007dcc:	687b      	ldr	r3, [r7, #4]
 8007dce:	62fb      	str	r3, [r7, #44]	; 0x2c
 8007dd0:	e002      	b.n	8007dd8 <ILI9341_Draw_colour_Burst+0x34>
	}
	else
	{
		buffer_size = BURST_MAX_SIZE;
 8007dd2:	4b45      	ldr	r3, [pc, #276]	; (8007ee8 <ILI9341_Draw_colour_Burst+0x144>)
 8007dd4:	881b      	ldrh	r3, [r3, #0]
 8007dd6:	62fb      	str	r3, [r7, #44]	; 0x2c
	}

	//HAL_GPIO_WritePin(LCD_DC_PORT, LCD_DC_PIN, GPIO_PIN_SET);
	LCD_DC_PORT->ODR |= LCD_DC_PIN;
 8007dd8:	4b44      	ldr	r3, [pc, #272]	; (8007eec <ILI9341_Draw_colour_Burst+0x148>)
 8007dda:	695b      	ldr	r3, [r3, #20]
 8007ddc:	4a43      	ldr	r2, [pc, #268]	; (8007eec <ILI9341_Draw_colour_Burst+0x148>)
 8007dde:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007de2:	6153      	str	r3, [r2, #20]
	//HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_RESET);
	LCD_CS_PORT->ODR &= ~(LCD_CS_PIN);
 8007de4:	4b41      	ldr	r3, [pc, #260]	; (8007eec <ILI9341_Draw_colour_Burst+0x148>)
 8007de6:	695b      	ldr	r3, [r3, #20]
 8007de8:	4a40      	ldr	r2, [pc, #256]	; (8007eec <ILI9341_Draw_colour_Burst+0x148>)
 8007dea:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8007dee:	6153      	str	r3, [r2, #20]


	unsigned char chifted = 	colour>>8;;
 8007df0:	897b      	ldrh	r3, [r7, #10]
 8007df2:	0a1b      	lsrs	r3, r3, #8
 8007df4:	b29b      	uxth	r3, r3
 8007df6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
	unsigned char burst_buffer[buffer_size];
 8007dfa:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8007dfc:	4603      	mov	r3, r0
 8007dfe:	3b01      	subs	r3, #1
 8007e00:	61fb      	str	r3, [r7, #28]
 8007e02:	4601      	mov	r1, r0
 8007e04:	f04f 0200 	mov.w	r2, #0
 8007e08:	f04f 0300 	mov.w	r3, #0
 8007e0c:	f04f 0400 	mov.w	r4, #0
 8007e10:	00d4      	lsls	r4, r2, #3
 8007e12:	ea44 7451 	orr.w	r4, r4, r1, lsr #29
 8007e16:	00cb      	lsls	r3, r1, #3
 8007e18:	4601      	mov	r1, r0
 8007e1a:	f04f 0200 	mov.w	r2, #0
 8007e1e:	f04f 0300 	mov.w	r3, #0
 8007e22:	f04f 0400 	mov.w	r4, #0
 8007e26:	00d4      	lsls	r4, r2, #3
 8007e28:	ea44 7451 	orr.w	r4, r4, r1, lsr #29
 8007e2c:	00cb      	lsls	r3, r1, #3
 8007e2e:	1dc3      	adds	r3, r0, #7
 8007e30:	08db      	lsrs	r3, r3, #3
 8007e32:	00db      	lsls	r3, r3, #3
 8007e34:	ebad 0d03 	sub.w	sp, sp, r3
 8007e38:	466b      	mov	r3, sp
 8007e3a:	3300      	adds	r3, #0
 8007e3c:	61bb      	str	r3, [r7, #24]
	for(uint32_t j = 0; j < buffer_size; j+=2)
 8007e3e:	2300      	movs	r3, #0
 8007e40:	633b      	str	r3, [r7, #48]	; 0x30
 8007e42:	e00e      	b.n	8007e62 <ILI9341_Draw_colour_Burst+0xbe>
	{
			burst_buffer[j] = 	chifted;
 8007e44:	69ba      	ldr	r2, [r7, #24]
 8007e46:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007e48:	4413      	add	r3, r2
 8007e4a:	f897 2023 	ldrb.w	r2, [r7, #35]	; 0x23
 8007e4e:	701a      	strb	r2, [r3, #0]
			burst_buffer[j+1] = colour;
 8007e50:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007e52:	3301      	adds	r3, #1
 8007e54:	897a      	ldrh	r2, [r7, #10]
 8007e56:	b2d1      	uxtb	r1, r2
 8007e58:	69ba      	ldr	r2, [r7, #24]
 8007e5a:	54d1      	strb	r1, [r2, r3]
	for(uint32_t j = 0; j < buffer_size; j+=2)
 8007e5c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007e5e:	3302      	adds	r3, #2
 8007e60:	633b      	str	r3, [r7, #48]	; 0x30
 8007e62:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007e64:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007e66:	429a      	cmp	r2, r3
 8007e68:	d3ec      	bcc.n	8007e44 <ILI9341_Draw_colour_Burst+0xa0>
	}
	
	uint32_t Sending_size = size*2;
 8007e6a:	687b      	ldr	r3, [r7, #4]
 8007e6c:	005b      	lsls	r3, r3, #1
 8007e6e:	617b      	str	r3, [r7, #20]

	// make sure we don't divide by size=0
	uint32_t Sending_in_Block = 1;
 8007e70:	2301      	movs	r3, #1
 8007e72:	637b      	str	r3, [r7, #52]	; 0x34
	uint32_t Remainder_from_block = 0;
 8007e74:	2300      	movs	r3, #0
 8007e76:	62bb      	str	r3, [r7, #40]	; 0x28
	if(size > 0)
 8007e78:	687b      	ldr	r3, [r7, #4]
 8007e7a:	2b00      	cmp	r3, #0
 8007e7c:	d00d      	beq.n	8007e9a <ILI9341_Draw_colour_Burst+0xf6>
	{
			Sending_in_Block 		= Sending_size/buffer_size;
 8007e7e:	697a      	ldr	r2, [r7, #20]
 8007e80:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007e82:	fbb2 f3f3 	udiv	r3, r2, r3
 8007e86:	637b      	str	r3, [r7, #52]	; 0x34
			Remainder_from_block 	= Sending_size%buffer_size;
 8007e88:	697b      	ldr	r3, [r7, #20]
 8007e8a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8007e8c:	fbb3 f2f2 	udiv	r2, r3, r2
 8007e90:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8007e92:	fb01 f202 	mul.w	r2, r1, r2
 8007e96:	1a9b      	subs	r3, r3, r2
 8007e98:	62bb      	str	r3, [r7, #40]	; 0x28
	}


	if(Sending_in_Block != 0)
 8007e9a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007e9c:	2b00      	cmp	r3, #0
 8007e9e:	d010      	beq.n	8007ec2 <ILI9341_Draw_colour_Burst+0x11e>
	{
		for(uint32_t j = 0; j < (Sending_in_Block); j++)
 8007ea0:	2300      	movs	r3, #0
 8007ea2:	627b      	str	r3, [r7, #36]	; 0x24
 8007ea4:	e009      	b.n	8007eba <ILI9341_Draw_colour_Burst+0x116>
		{
			HAL_SPI_Transmit(HSPI_INSTANCE, (unsigned char *)burst_buffer, buffer_size, 2);
 8007ea6:	69b9      	ldr	r1, [r7, #24]
 8007ea8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007eaa:	b29a      	uxth	r2, r3
 8007eac:	2302      	movs	r3, #2
 8007eae:	4810      	ldr	r0, [pc, #64]	; (8007ef0 <ILI9341_Draw_colour_Burst+0x14c>)
 8007eb0:	f7fd fdc0 	bl	8005a34 <HAL_SPI_Transmit>
		for(uint32_t j = 0; j < (Sending_in_Block); j++)
 8007eb4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007eb6:	3301      	adds	r3, #1
 8007eb8:	627b      	str	r3, [r7, #36]	; 0x24
 8007eba:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007ebc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007ebe:	429a      	cmp	r2, r3
 8007ec0:	d3f1      	bcc.n	8007ea6 <ILI9341_Draw_colour_Burst+0x102>
		}
	}

	//REMAINDER!
	HAL_SPI_Transmit(HSPI_INSTANCE, (unsigned char *)burst_buffer, Remainder_from_block, 2);
 8007ec2:	69b9      	ldr	r1, [r7, #24]
 8007ec4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007ec6:	b29a      	uxth	r2, r3
 8007ec8:	2302      	movs	r3, #2
 8007eca:	4809      	ldr	r0, [pc, #36]	; (8007ef0 <ILI9341_Draw_colour_Burst+0x14c>)
 8007ecc:	f7fd fdb2 	bl	8005a34 <HAL_SPI_Transmit>

	LCD_CS_PORT->ODR |= LCD_CS_PIN;
 8007ed0:	4b06      	ldr	r3, [pc, #24]	; (8007eec <ILI9341_Draw_colour_Burst+0x148>)
 8007ed2:	695b      	ldr	r3, [r3, #20]
 8007ed4:	4a05      	ldr	r2, [pc, #20]	; (8007eec <ILI9341_Draw_colour_Burst+0x148>)
 8007ed6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007eda:	6153      	str	r3, [r2, #20]
 8007edc:	46ad      	mov	sp, r5


}
 8007ede:	bf00      	nop
 8007ee0:	3738      	adds	r7, #56	; 0x38
 8007ee2:	46bd      	mov	sp, r7
 8007ee4:	bdb0      	pop	{r4, r5, r7, pc}
 8007ee6:	bf00      	nop
 8007ee8:	200003d4 	.word	0x200003d4
 8007eec:	48000400 	.word	0x48000400
 8007ef0:	200006ec 	.word	0x200006ec

08007ef4 <ILI9341_Fill_Screen>:

//FILL THE ENTIRE SCREEN WITH SELECTED COLOUR (either #define-d ones or custom 16bit)
/*Sets address (entire screen) and Sends height*width ammount of colour information to LCD*/
void ILI9341_Fill_Screen(uint16_t colour)
{
 8007ef4:	b580      	push	{r7, lr}
 8007ef6:	b084      	sub	sp, #16
 8007ef8:	af02      	add	r7, sp, #8
 8007efa:	4603      	mov	r3, r0
 8007efc:	80fb      	strh	r3, [r7, #6]
	ILI9341_Set_Address(0,0,LCD_WIDTH,LCD_HEIGHT);
 8007efe:	4b10      	ldr	r3, [pc, #64]	; (8007f40 <ILI9341_Fill_Screen+0x4c>)
 8007f00:	881b      	ldrh	r3, [r3, #0]
 8007f02:	b29a      	uxth	r2, r3
 8007f04:	4b0f      	ldr	r3, [pc, #60]	; (8007f44 <ILI9341_Fill_Screen+0x50>)
 8007f06:	881b      	ldrh	r3, [r3, #0]
 8007f08:	b29b      	uxth	r3, r3
 8007f0a:	2100      	movs	r1, #0
 8007f0c:	2000      	movs	r0, #0
 8007f0e:	f7ff fd73 	bl	80079f8 <ILI9341_Set_Address>
	ILI9341_Draw_colour_Burst(0, 0, colour, LCD_WIDTH*LCD_HEIGHT, AREA_CHUNK);
 8007f12:	4b0b      	ldr	r3, [pc, #44]	; (8007f40 <ILI9341_Fill_Screen+0x4c>)
 8007f14:	881b      	ldrh	r3, [r3, #0]
 8007f16:	b29b      	uxth	r3, r3
 8007f18:	461a      	mov	r2, r3
 8007f1a:	4b0a      	ldr	r3, [pc, #40]	; (8007f44 <ILI9341_Fill_Screen+0x50>)
 8007f1c:	881b      	ldrh	r3, [r3, #0]
 8007f1e:	b29b      	uxth	r3, r3
 8007f20:	fb03 f302 	mul.w	r3, r3, r2
 8007f24:	4619      	mov	r1, r3
 8007f26:	88fa      	ldrh	r2, [r7, #6]
 8007f28:	2304      	movs	r3, #4
 8007f2a:	9300      	str	r3, [sp, #0]
 8007f2c:	460b      	mov	r3, r1
 8007f2e:	2100      	movs	r1, #0
 8007f30:	2000      	movs	r0, #0
 8007f32:	f7ff ff37 	bl	8007da4 <ILI9341_Draw_colour_Burst>
}
 8007f36:	bf00      	nop
 8007f38:	3708      	adds	r7, #8
 8007f3a:	46bd      	mov	sp, r7
 8007f3c:	bd80      	pop	{r7, pc}
 8007f3e:	bf00      	nop
 8007f40:	200003d2 	.word	0x200003d2
 8007f44:	200003d0 	.word	0x200003d0

08007f48 <ILI9341_Draw_Pixel>:
//Location is dependant on screen orientation. x0 and y0 locations change with orientations.
//Using pixels to draw big simple structures is not recommended as it is really slow
//Try using either rectangles or lines if possible
//
void ILI9341_Draw_Pixel(uint16_t X,uint16_t Y,uint16_t colour)
{
 8007f48:	b580      	push	{r7, lr}
 8007f4a:	b086      	sub	sp, #24
 8007f4c:	af00      	add	r7, sp, #0
 8007f4e:	4603      	mov	r3, r0
 8007f50:	80fb      	strh	r3, [r7, #6]
 8007f52:	460b      	mov	r3, r1
 8007f54:	80bb      	strh	r3, [r7, #4]
 8007f56:	4613      	mov	r3, r2
 8007f58:	807b      	strh	r3, [r7, #2]
	if((X >=LCD_WIDTH) || (Y >=LCD_HEIGHT)) return;	//OUT OF BOUNDS!
 8007f5a:	4b64      	ldr	r3, [pc, #400]	; (80080ec <ILI9341_Draw_Pixel+0x1a4>)
 8007f5c:	881b      	ldrh	r3, [r3, #0]
 8007f5e:	b29b      	uxth	r3, r3
 8007f60:	88fa      	ldrh	r2, [r7, #6]
 8007f62:	429a      	cmp	r2, r3
 8007f64:	f080 80be 	bcs.w	80080e4 <ILI9341_Draw_Pixel+0x19c>
 8007f68:	4b61      	ldr	r3, [pc, #388]	; (80080f0 <ILI9341_Draw_Pixel+0x1a8>)
 8007f6a:	881b      	ldrh	r3, [r3, #0]
 8007f6c:	b29b      	uxth	r3, r3
 8007f6e:	88ba      	ldrh	r2, [r7, #4]
 8007f70:	429a      	cmp	r2, r3
 8007f72:	f080 80b7 	bcs.w	80080e4 <ILI9341_Draw_Pixel+0x19c>

	//ADDRESS
	LCD_DC_PORT->ODR &= ~(LCD_DC_PIN);
 8007f76:	4b5f      	ldr	r3, [pc, #380]	; (80080f4 <ILI9341_Draw_Pixel+0x1ac>)
 8007f78:	695b      	ldr	r3, [r3, #20]
 8007f7a:	4a5e      	ldr	r2, [pc, #376]	; (80080f4 <ILI9341_Draw_Pixel+0x1ac>)
 8007f7c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007f80:	6153      	str	r3, [r2, #20]
	LCD_CS_PORT->ODR &= ~(LCD_CS_PIN);
 8007f82:	4b5c      	ldr	r3, [pc, #368]	; (80080f4 <ILI9341_Draw_Pixel+0x1ac>)
 8007f84:	695b      	ldr	r3, [r3, #20]
 8007f86:	4a5b      	ldr	r2, [pc, #364]	; (80080f4 <ILI9341_Draw_Pixel+0x1ac>)
 8007f88:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8007f8c:	6153      	str	r3, [r2, #20]
	ILI9341_SPI_Send(0x2A);
 8007f8e:	202a      	movs	r0, #42	; 0x2a
 8007f90:	f7ff fcda 	bl	8007948 <ILI9341_SPI_Send>

	LCD_DC_PORT->ODR |= LCD_DC_PIN;
 8007f94:	4b57      	ldr	r3, [pc, #348]	; (80080f4 <ILI9341_Draw_Pixel+0x1ac>)
 8007f96:	695b      	ldr	r3, [r3, #20]
 8007f98:	4a56      	ldr	r2, [pc, #344]	; (80080f4 <ILI9341_Draw_Pixel+0x1ac>)
 8007f9a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007f9e:	6153      	str	r3, [r2, #20]
	LCD_CS_PORT->ODR |= LCD_CS_PIN;
 8007fa0:	4b54      	ldr	r3, [pc, #336]	; (80080f4 <ILI9341_Draw_Pixel+0x1ac>)
 8007fa2:	695b      	ldr	r3, [r3, #20]
 8007fa4:	4a53      	ldr	r2, [pc, #332]	; (80080f4 <ILI9341_Draw_Pixel+0x1ac>)
 8007fa6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007faa:	6153      	str	r3, [r2, #20]

	//XDATA
	LCD_CS_PORT->ODR &= ~(LCD_CS_PIN);
 8007fac:	4b51      	ldr	r3, [pc, #324]	; (80080f4 <ILI9341_Draw_Pixel+0x1ac>)
 8007fae:	695b      	ldr	r3, [r3, #20]
 8007fb0:	4a50      	ldr	r2, [pc, #320]	; (80080f4 <ILI9341_Draw_Pixel+0x1ac>)
 8007fb2:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8007fb6:	6153      	str	r3, [r2, #20]
	unsigned char Temp_Buffer[4] = {X>>8,X, (X+1)>>8, (X+1)};
 8007fb8:	88fb      	ldrh	r3, [r7, #6]
 8007fba:	0a1b      	lsrs	r3, r3, #8
 8007fbc:	b29b      	uxth	r3, r3
 8007fbe:	b2db      	uxtb	r3, r3
 8007fc0:	753b      	strb	r3, [r7, #20]
 8007fc2:	88fb      	ldrh	r3, [r7, #6]
 8007fc4:	b2db      	uxtb	r3, r3
 8007fc6:	757b      	strb	r3, [r7, #21]
 8007fc8:	88fb      	ldrh	r3, [r7, #6]
 8007fca:	3301      	adds	r3, #1
 8007fcc:	121b      	asrs	r3, r3, #8
 8007fce:	b2db      	uxtb	r3, r3
 8007fd0:	75bb      	strb	r3, [r7, #22]
 8007fd2:	88fb      	ldrh	r3, [r7, #6]
 8007fd4:	b2db      	uxtb	r3, r3
 8007fd6:	3301      	adds	r3, #1
 8007fd8:	b2db      	uxtb	r3, r3
 8007fda:	75fb      	strb	r3, [r7, #23]
	HAL_SPI_Transmit(HSPI_INSTANCE, Temp_Buffer, 4, 1);
 8007fdc:	f107 0114 	add.w	r1, r7, #20
 8007fe0:	2301      	movs	r3, #1
 8007fe2:	2204      	movs	r2, #4
 8007fe4:	4844      	ldr	r0, [pc, #272]	; (80080f8 <ILI9341_Draw_Pixel+0x1b0>)
 8007fe6:	f7fd fd25 	bl	8005a34 <HAL_SPI_Transmit>
	LCD_CS_PORT->ODR |= LCD_CS_PIN;
 8007fea:	4b42      	ldr	r3, [pc, #264]	; (80080f4 <ILI9341_Draw_Pixel+0x1ac>)
 8007fec:	695b      	ldr	r3, [r3, #20]
 8007fee:	4a41      	ldr	r2, [pc, #260]	; (80080f4 <ILI9341_Draw_Pixel+0x1ac>)
 8007ff0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007ff4:	6153      	str	r3, [r2, #20]

	//ADDRESS
	LCD_DC_PORT->ODR &= ~(LCD_DC_PIN);
 8007ff6:	4b3f      	ldr	r3, [pc, #252]	; (80080f4 <ILI9341_Draw_Pixel+0x1ac>)
 8007ff8:	695b      	ldr	r3, [r3, #20]
 8007ffa:	4a3e      	ldr	r2, [pc, #248]	; (80080f4 <ILI9341_Draw_Pixel+0x1ac>)
 8007ffc:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8008000:	6153      	str	r3, [r2, #20]
	LCD_CS_PORT->ODR &= ~(LCD_CS_PIN);
 8008002:	4b3c      	ldr	r3, [pc, #240]	; (80080f4 <ILI9341_Draw_Pixel+0x1ac>)
 8008004:	695b      	ldr	r3, [r3, #20]
 8008006:	4a3b      	ldr	r2, [pc, #236]	; (80080f4 <ILI9341_Draw_Pixel+0x1ac>)
 8008008:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800800c:	6153      	str	r3, [r2, #20]

	ILI9341_SPI_Send(0x2B);
 800800e:	202b      	movs	r0, #43	; 0x2b
 8008010:	f7ff fc9a 	bl	8007948 <ILI9341_SPI_Send>
	LCD_DC_PORT->ODR |= LCD_DC_PIN;
 8008014:	4b37      	ldr	r3, [pc, #220]	; (80080f4 <ILI9341_Draw_Pixel+0x1ac>)
 8008016:	695b      	ldr	r3, [r3, #20]
 8008018:	4a36      	ldr	r2, [pc, #216]	; (80080f4 <ILI9341_Draw_Pixel+0x1ac>)
 800801a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800801e:	6153      	str	r3, [r2, #20]
	LCD_CS_PORT->ODR |= LCD_CS_PIN;
 8008020:	4b34      	ldr	r3, [pc, #208]	; (80080f4 <ILI9341_Draw_Pixel+0x1ac>)
 8008022:	695b      	ldr	r3, [r3, #20]
 8008024:	4a33      	ldr	r2, [pc, #204]	; (80080f4 <ILI9341_Draw_Pixel+0x1ac>)
 8008026:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800802a:	6153      	str	r3, [r2, #20]

	//YDATA
	LCD_CS_PORT->ODR &= ~(LCD_CS_PIN);
 800802c:	4b31      	ldr	r3, [pc, #196]	; (80080f4 <ILI9341_Draw_Pixel+0x1ac>)
 800802e:	695b      	ldr	r3, [r3, #20]
 8008030:	4a30      	ldr	r2, [pc, #192]	; (80080f4 <ILI9341_Draw_Pixel+0x1ac>)
 8008032:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8008036:	6153      	str	r3, [r2, #20]
	unsigned char Temp_Buffer1[4] = {Y>>8,Y, (Y+1)>>8, (Y+1)};
 8008038:	88bb      	ldrh	r3, [r7, #4]
 800803a:	0a1b      	lsrs	r3, r3, #8
 800803c:	b29b      	uxth	r3, r3
 800803e:	b2db      	uxtb	r3, r3
 8008040:	743b      	strb	r3, [r7, #16]
 8008042:	88bb      	ldrh	r3, [r7, #4]
 8008044:	b2db      	uxtb	r3, r3
 8008046:	747b      	strb	r3, [r7, #17]
 8008048:	88bb      	ldrh	r3, [r7, #4]
 800804a:	3301      	adds	r3, #1
 800804c:	121b      	asrs	r3, r3, #8
 800804e:	b2db      	uxtb	r3, r3
 8008050:	74bb      	strb	r3, [r7, #18]
 8008052:	88bb      	ldrh	r3, [r7, #4]
 8008054:	b2db      	uxtb	r3, r3
 8008056:	3301      	adds	r3, #1
 8008058:	b2db      	uxtb	r3, r3
 800805a:	74fb      	strb	r3, [r7, #19]
	HAL_SPI_Transmit(HSPI_INSTANCE, Temp_Buffer1, 4, 1);
 800805c:	f107 0110 	add.w	r1, r7, #16
 8008060:	2301      	movs	r3, #1
 8008062:	2204      	movs	r2, #4
 8008064:	4824      	ldr	r0, [pc, #144]	; (80080f8 <ILI9341_Draw_Pixel+0x1b0>)
 8008066:	f7fd fce5 	bl	8005a34 <HAL_SPI_Transmit>
	LCD_CS_PORT->ODR |= LCD_CS_PIN;
 800806a:	4b22      	ldr	r3, [pc, #136]	; (80080f4 <ILI9341_Draw_Pixel+0x1ac>)
 800806c:	695b      	ldr	r3, [r3, #20]
 800806e:	4a21      	ldr	r2, [pc, #132]	; (80080f4 <ILI9341_Draw_Pixel+0x1ac>)
 8008070:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008074:	6153      	str	r3, [r2, #20]

	//ADDRESS
	LCD_DC_PORT->ODR &= ~(LCD_DC_PIN);
 8008076:	4b1f      	ldr	r3, [pc, #124]	; (80080f4 <ILI9341_Draw_Pixel+0x1ac>)
 8008078:	695b      	ldr	r3, [r3, #20]
 800807a:	4a1e      	ldr	r2, [pc, #120]	; (80080f4 <ILI9341_Draw_Pixel+0x1ac>)
 800807c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8008080:	6153      	str	r3, [r2, #20]
	LCD_CS_PORT->ODR &= ~(LCD_CS_PIN);
 8008082:	4b1c      	ldr	r3, [pc, #112]	; (80080f4 <ILI9341_Draw_Pixel+0x1ac>)
 8008084:	695b      	ldr	r3, [r3, #20]
 8008086:	4a1b      	ldr	r2, [pc, #108]	; (80080f4 <ILI9341_Draw_Pixel+0x1ac>)
 8008088:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800808c:	6153      	str	r3, [r2, #20]
	ILI9341_SPI_Send(0x2C);
 800808e:	202c      	movs	r0, #44	; 0x2c
 8008090:	f7ff fc5a 	bl	8007948 <ILI9341_SPI_Send>
	LCD_DC_PORT->ODR |= LCD_DC_PIN;
 8008094:	4b17      	ldr	r3, [pc, #92]	; (80080f4 <ILI9341_Draw_Pixel+0x1ac>)
 8008096:	695b      	ldr	r3, [r3, #20]
 8008098:	4a16      	ldr	r2, [pc, #88]	; (80080f4 <ILI9341_Draw_Pixel+0x1ac>)
 800809a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800809e:	6153      	str	r3, [r2, #20]
	LCD_CS_PORT->ODR |= LCD_CS_PIN;
 80080a0:	4b14      	ldr	r3, [pc, #80]	; (80080f4 <ILI9341_Draw_Pixel+0x1ac>)
 80080a2:	695b      	ldr	r3, [r3, #20]
 80080a4:	4a13      	ldr	r2, [pc, #76]	; (80080f4 <ILI9341_Draw_Pixel+0x1ac>)
 80080a6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80080aa:	6153      	str	r3, [r2, #20]
	
	//COLOUR
	LCD_CS_PORT->ODR &= ~(LCD_CS_PIN);
 80080ac:	4b11      	ldr	r3, [pc, #68]	; (80080f4 <ILI9341_Draw_Pixel+0x1ac>)
 80080ae:	695b      	ldr	r3, [r3, #20]
 80080b0:	4a10      	ldr	r2, [pc, #64]	; (80080f4 <ILI9341_Draw_Pixel+0x1ac>)
 80080b2:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80080b6:	6153      	str	r3, [r2, #20]
	unsigned char Temp_Buffer2[2] = {colour>>8, colour};
 80080b8:	887b      	ldrh	r3, [r7, #2]
 80080ba:	0a1b      	lsrs	r3, r3, #8
 80080bc:	b29b      	uxth	r3, r3
 80080be:	b2db      	uxtb	r3, r3
 80080c0:	733b      	strb	r3, [r7, #12]
 80080c2:	887b      	ldrh	r3, [r7, #2]
 80080c4:	b2db      	uxtb	r3, r3
 80080c6:	737b      	strb	r3, [r7, #13]
	HAL_SPI_Transmit(HSPI_INSTANCE, Temp_Buffer2, 2, 1);
 80080c8:	f107 010c 	add.w	r1, r7, #12
 80080cc:	2301      	movs	r3, #1
 80080ce:	2202      	movs	r2, #2
 80080d0:	4809      	ldr	r0, [pc, #36]	; (80080f8 <ILI9341_Draw_Pixel+0x1b0>)
 80080d2:	f7fd fcaf 	bl	8005a34 <HAL_SPI_Transmit>
	LCD_CS_PORT->ODR |= LCD_CS_PIN;
 80080d6:	4b07      	ldr	r3, [pc, #28]	; (80080f4 <ILI9341_Draw_Pixel+0x1ac>)
 80080d8:	695b      	ldr	r3, [r3, #20]
 80080da:	4a06      	ldr	r2, [pc, #24]	; (80080f4 <ILI9341_Draw_Pixel+0x1ac>)
 80080dc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80080e0:	6153      	str	r3, [r2, #20]
 80080e2:	e000      	b.n	80080e6 <ILI9341_Draw_Pixel+0x19e>
	if((X >=LCD_WIDTH) || (Y >=LCD_HEIGHT)) return;	//OUT OF BOUNDS!
 80080e4:	bf00      	nop

	
}
 80080e6:	3718      	adds	r7, #24
 80080e8:	46bd      	mov	sp, r7
 80080ea:	bd80      	pop	{r7, pc}
 80080ec:	200003d2 	.word	0x200003d2
 80080f0:	200003d0 	.word	0x200003d0
 80080f4:	48000400 	.word	0x48000400
 80080f8:	200006ec 	.word	0x200006ec

080080fc <ILI9341_Draw_Rectangle>:
 *
 *
 */

void ILI9341_Draw_Rectangle(uint16_t xpos, uint16_t ypos, uint16_t width, uint16_t height, uint16_t colour)
{
 80080fc:	b590      	push	{r4, r7, lr}
 80080fe:	b087      	sub	sp, #28
 8008100:	af02      	add	r7, sp, #8
 8008102:	4604      	mov	r4, r0
 8008104:	4608      	mov	r0, r1
 8008106:	4611      	mov	r1, r2
 8008108:	461a      	mov	r2, r3
 800810a:	4623      	mov	r3, r4
 800810c:	80fb      	strh	r3, [r7, #6]
 800810e:	4603      	mov	r3, r0
 8008110:	80bb      	strh	r3, [r7, #4]
 8008112:	460b      	mov	r3, r1
 8008114:	807b      	strh	r3, [r7, #2]
 8008116:	4613      	mov	r3, r2
 8008118:	803b      	strh	r3, [r7, #0]
	if((xpos >=LCD_WIDTH) || (ypos >=LCD_HEIGHT)) return;
 800811a:	4b39      	ldr	r3, [pc, #228]	; (8008200 <ILI9341_Draw_Rectangle+0x104>)
 800811c:	881b      	ldrh	r3, [r3, #0]
 800811e:	b29b      	uxth	r3, r3
 8008120:	88fa      	ldrh	r2, [r7, #6]
 8008122:	429a      	cmp	r2, r3
 8008124:	d267      	bcs.n	80081f6 <ILI9341_Draw_Rectangle+0xfa>
 8008126:	4b37      	ldr	r3, [pc, #220]	; (8008204 <ILI9341_Draw_Rectangle+0x108>)
 8008128:	881b      	ldrh	r3, [r3, #0]
 800812a:	b29b      	uxth	r3, r3
 800812c:	88ba      	ldrh	r2, [r7, #4]
 800812e:	429a      	cmp	r2, r3
 8008130:	d261      	bcs.n	80081f6 <ILI9341_Draw_Rectangle+0xfa>
	if((xpos+width-1)>=LCD_WIDTH)
 8008132:	88fa      	ldrh	r2, [r7, #6]
 8008134:	887b      	ldrh	r3, [r7, #2]
 8008136:	4413      	add	r3, r2
 8008138:	3b01      	subs	r3, #1
 800813a:	4a31      	ldr	r2, [pc, #196]	; (8008200 <ILI9341_Draw_Rectangle+0x104>)
 800813c:	8812      	ldrh	r2, [r2, #0]
 800813e:	b292      	uxth	r2, r2
 8008140:	4293      	cmp	r3, r2
 8008142:	db05      	blt.n	8008150 <ILI9341_Draw_Rectangle+0x54>
		{
			width=LCD_WIDTH-xpos;
 8008144:	4b2e      	ldr	r3, [pc, #184]	; (8008200 <ILI9341_Draw_Rectangle+0x104>)
 8008146:	881b      	ldrh	r3, [r3, #0]
 8008148:	b29a      	uxth	r2, r3
 800814a:	88fb      	ldrh	r3, [r7, #6]
 800814c:	1ad3      	subs	r3, r2, r3
 800814e:	807b      	strh	r3, [r7, #2]
		}
	if((ypos+height-1)>=LCD_HEIGHT)
 8008150:	88ba      	ldrh	r2, [r7, #4]
 8008152:	883b      	ldrh	r3, [r7, #0]
 8008154:	4413      	add	r3, r2
 8008156:	3b01      	subs	r3, #1
 8008158:	4a2a      	ldr	r2, [pc, #168]	; (8008204 <ILI9341_Draw_Rectangle+0x108>)
 800815a:	8812      	ldrh	r2, [r2, #0]
 800815c:	b292      	uxth	r2, r2
 800815e:	4293      	cmp	r3, r2
 8008160:	db05      	blt.n	800816e <ILI9341_Draw_Rectangle+0x72>
		{
			height=LCD_HEIGHT-ypos;
 8008162:	4b28      	ldr	r3, [pc, #160]	; (8008204 <ILI9341_Draw_Rectangle+0x108>)
 8008164:	881b      	ldrh	r3, [r3, #0]
 8008166:	b29a      	uxth	r2, r3
 8008168:	88bb      	ldrh	r3, [r7, #4]
 800816a:	1ad3      	subs	r3, r2, r3
 800816c:	803b      	strh	r3, [r7, #0]
		}
	ILI9341_Set_Address(xpos,
						ypos,
						(xpos + width) - 1,
 800816e:	88fa      	ldrh	r2, [r7, #6]
 8008170:	887b      	ldrh	r3, [r7, #2]
 8008172:	4413      	add	r3, r2
 8008174:	b29b      	uxth	r3, r3
	ILI9341_Set_Address(xpos,
 8008176:	3b01      	subs	r3, #1
 8008178:	b29c      	uxth	r4, r3
						(ypos + height) - 1);
 800817a:	88ba      	ldrh	r2, [r7, #4]
 800817c:	883b      	ldrh	r3, [r7, #0]
 800817e:	4413      	add	r3, r2
 8008180:	b29b      	uxth	r3, r3
	ILI9341_Set_Address(xpos,
 8008182:	3b01      	subs	r3, #1
 8008184:	b29b      	uxth	r3, r3
 8008186:	88b9      	ldrh	r1, [r7, #4]
 8008188:	88f8      	ldrh	r0, [r7, #6]
 800818a:	4622      	mov	r2, r4
 800818c:	f7ff fc34 	bl	80079f8 <ILI9341_Set_Address>
	// if odd numbered rect area is requested, we round down to nearest even number
	// to keep ILI9341_Draw_colour_Burst() happy.

	// Note, truncated pixel will be needed at function end.

	uint16_t size = height*width;
 8008190:	883a      	ldrh	r2, [r7, #0]
 8008192:	887b      	ldrh	r3, [r7, #2]
 8008194:	fb12 f303 	smulbb	r3, r2, r3
 8008198:	81fb      	strh	r3, [r7, #14]
	uint8_t truncated = 0;
 800819a:	2300      	movs	r3, #0
 800819c:	737b      	strb	r3, [r7, #13]

	if((size & 1) && (size > 1))		// don't round down to zero!
 800819e:	89fb      	ldrh	r3, [r7, #14]
 80081a0:	f003 0301 	and.w	r3, r3, #1
 80081a4:	2b00      	cmp	r3, #0
 80081a6:	d009      	beq.n	80081bc <ILI9341_Draw_Rectangle+0xc0>
 80081a8:	89fb      	ldrh	r3, [r7, #14]
 80081aa:	2b01      	cmp	r3, #1
 80081ac:	d906      	bls.n	80081bc <ILI9341_Draw_Rectangle+0xc0>
	{
		truncated = 1;
 80081ae:	2301      	movs	r3, #1
 80081b0:	737b      	strb	r3, [r7, #13]
	 	size = ((size >> 1) * 2);
 80081b2:	89fb      	ldrh	r3, [r7, #14]
 80081b4:	085b      	lsrs	r3, r3, #1
 80081b6:	b29b      	uxth	r3, r3
 80081b8:	005b      	lsls	r3, r3, #1
 80081ba:	81fb      	strh	r3, [r7, #14]
	}

	ILI9341_Draw_colour_Burst(	xpos,
 80081bc:	89fc      	ldrh	r4, [r7, #14]
 80081be:	8c3a      	ldrh	r2, [r7, #32]
 80081c0:	88b9      	ldrh	r1, [r7, #4]
 80081c2:	88f8      	ldrh	r0, [r7, #6]
 80081c4:	2304      	movs	r3, #4
 80081c6:	9300      	str	r3, [sp, #0]
 80081c8:	4623      	mov	r3, r4
 80081ca:	f7ff fdeb 	bl	8007da4 <ILI9341_Draw_colour_Burst>
								colour,
								size,
								AREA_CHUNK);

	// add the truncated pixel now
	if(truncated)
 80081ce:	7b7b      	ldrb	r3, [r7, #13]
 80081d0:	2b00      	cmp	r3, #0
 80081d2:	d011      	beq.n	80081f8 <ILI9341_Draw_Rectangle+0xfc>
	{
		ILI9341_Draw_Pixel(	(xpos + width) - 1,
 80081d4:	88fa      	ldrh	r2, [r7, #6]
 80081d6:	887b      	ldrh	r3, [r7, #2]
 80081d8:	4413      	add	r3, r2
 80081da:	b29b      	uxth	r3, r3
 80081dc:	3b01      	subs	r3, #1
 80081de:	b298      	uxth	r0, r3
							(ypos + height) - 1,
 80081e0:	88ba      	ldrh	r2, [r7, #4]
 80081e2:	883b      	ldrh	r3, [r7, #0]
 80081e4:	4413      	add	r3, r2
 80081e6:	b29b      	uxth	r3, r3
		ILI9341_Draw_Pixel(	(xpos + width) - 1,
 80081e8:	3b01      	subs	r3, #1
 80081ea:	b29b      	uxth	r3, r3
 80081ec:	8c3a      	ldrh	r2, [r7, #32]
 80081ee:	4619      	mov	r1, r3
 80081f0:	f7ff feaa 	bl	8007f48 <ILI9341_Draw_Pixel>
 80081f4:	e000      	b.n	80081f8 <ILI9341_Draw_Rectangle+0xfc>
	if((xpos >=LCD_WIDTH) || (ypos >=LCD_HEIGHT)) return;
 80081f6:	bf00      	nop
							colour);
	}
}
 80081f8:	3714      	adds	r7, #20
 80081fa:	46bd      	mov	sp, r7
 80081fc:	bd90      	pop	{r4, r7, pc}
 80081fe:	bf00      	nop
 8008200:	200003d2 	.word	0x200003d2
 8008204:	200003d0 	.word	0x200003d0

08008208 <ILI9341_Draw_Horizontal_Line>:
 *
 *
 */

void ILI9341_Draw_Horizontal_Line(uint16_t xpos, uint16_t ypos, uint16_t width, uint16_t colour)
{
 8008208:	b590      	push	{r4, r7, lr}
 800820a:	b085      	sub	sp, #20
 800820c:	af02      	add	r7, sp, #8
 800820e:	4604      	mov	r4, r0
 8008210:	4608      	mov	r0, r1
 8008212:	4611      	mov	r1, r2
 8008214:	461a      	mov	r2, r3
 8008216:	4623      	mov	r3, r4
 8008218:	80fb      	strh	r3, [r7, #6]
 800821a:	4603      	mov	r3, r0
 800821c:	80bb      	strh	r3, [r7, #4]
 800821e:	460b      	mov	r3, r1
 8008220:	807b      	strh	r3, [r7, #2]
 8008222:	4613      	mov	r3, r2
 8008224:	803b      	strh	r3, [r7, #0]
	if((xpos >=LCD_WIDTH) || (ypos >=LCD_HEIGHT)) return;
 8008226:	4b1a      	ldr	r3, [pc, #104]	; (8008290 <ILI9341_Draw_Horizontal_Line+0x88>)
 8008228:	881b      	ldrh	r3, [r3, #0]
 800822a:	b29b      	uxth	r3, r3
 800822c:	88fa      	ldrh	r2, [r7, #6]
 800822e:	429a      	cmp	r2, r3
 8008230:	d229      	bcs.n	8008286 <ILI9341_Draw_Horizontal_Line+0x7e>
 8008232:	4b18      	ldr	r3, [pc, #96]	; (8008294 <ILI9341_Draw_Horizontal_Line+0x8c>)
 8008234:	881b      	ldrh	r3, [r3, #0]
 8008236:	b29b      	uxth	r3, r3
 8008238:	88ba      	ldrh	r2, [r7, #4]
 800823a:	429a      	cmp	r2, r3
 800823c:	d223      	bcs.n	8008286 <ILI9341_Draw_Horizontal_Line+0x7e>
	if(((xpos + width) - 1 ) >= LCD_WIDTH)
 800823e:	88fa      	ldrh	r2, [r7, #6]
 8008240:	887b      	ldrh	r3, [r7, #2]
 8008242:	4413      	add	r3, r2
 8008244:	3b01      	subs	r3, #1
 8008246:	4a12      	ldr	r2, [pc, #72]	; (8008290 <ILI9341_Draw_Horizontal_Line+0x88>)
 8008248:	8812      	ldrh	r2, [r2, #0]
 800824a:	b292      	uxth	r2, r2
 800824c:	4293      	cmp	r3, r2
 800824e:	db05      	blt.n	800825c <ILI9341_Draw_Horizontal_Line+0x54>
		{
			width= LCD_WIDTH - xpos;
 8008250:	4b0f      	ldr	r3, [pc, #60]	; (8008290 <ILI9341_Draw_Horizontal_Line+0x88>)
 8008252:	881b      	ldrh	r3, [r3, #0]
 8008254:	b29a      	uxth	r2, r3
 8008256:	88fb      	ldrh	r3, [r7, #6]
 8008258:	1ad3      	subs	r3, r2, r3
 800825a:	807b      	strh	r3, [r7, #2]
		}
	ILI9341_Set_Address(	xpos,
							ypos,
							(xpos + width) - 1,
 800825c:	88fa      	ldrh	r2, [r7, #6]
 800825e:	887b      	ldrh	r3, [r7, #2]
 8008260:	4413      	add	r3, r2
 8008262:	b29b      	uxth	r3, r3
	ILI9341_Set_Address(	xpos,
 8008264:	3b01      	subs	r3, #1
 8008266:	b29a      	uxth	r2, r3
 8008268:	88bb      	ldrh	r3, [r7, #4]
 800826a:	88b9      	ldrh	r1, [r7, #4]
 800826c:	88f8      	ldrh	r0, [r7, #6]
 800826e:	f7ff fbc3 	bl	80079f8 <ILI9341_Set_Address>
							ypos);

	ILI9341_Draw_colour_Burst(xpos, ypos, colour, width, LINE_CHUNK);
 8008272:	887c      	ldrh	r4, [r7, #2]
 8008274:	883a      	ldrh	r2, [r7, #0]
 8008276:	88b9      	ldrh	r1, [r7, #4]
 8008278:	88f8      	ldrh	r0, [r7, #6]
 800827a:	2303      	movs	r3, #3
 800827c:	9300      	str	r3, [sp, #0]
 800827e:	4623      	mov	r3, r4
 8008280:	f7ff fd90 	bl	8007da4 <ILI9341_Draw_colour_Burst>
 8008284:	e000      	b.n	8008288 <ILI9341_Draw_Horizontal_Line+0x80>
	if((xpos >=LCD_WIDTH) || (ypos >=LCD_HEIGHT)) return;
 8008286:	bf00      	nop
}
 8008288:	370c      	adds	r7, #12
 800828a:	46bd      	mov	sp, r7
 800828c:	bd90      	pop	{r4, r7, pc}
 800828e:	bf00      	nop
 8008290:	200003d2 	.word	0x200003d2
 8008294:	200003d0 	.word	0x200003d0

08008298 <ILI9341_Draw_Vertical_Line>:

//DRAW LINE FROM X,Y LOCATION to X,Y+height LOCATION
void ILI9341_Draw_Vertical_Line(uint16_t xpos, uint16_t ypos, uint16_t height, uint16_t colour)
{
 8008298:	b590      	push	{r4, r7, lr}
 800829a:	b085      	sub	sp, #20
 800829c:	af02      	add	r7, sp, #8
 800829e:	4604      	mov	r4, r0
 80082a0:	4608      	mov	r0, r1
 80082a2:	4611      	mov	r1, r2
 80082a4:	461a      	mov	r2, r3
 80082a6:	4623      	mov	r3, r4
 80082a8:	80fb      	strh	r3, [r7, #6]
 80082aa:	4603      	mov	r3, r0
 80082ac:	80bb      	strh	r3, [r7, #4]
 80082ae:	460b      	mov	r3, r1
 80082b0:	807b      	strh	r3, [r7, #2]
 80082b2:	4613      	mov	r3, r2
 80082b4:	803b      	strh	r3, [r7, #0]
	if((xpos >= LCD_WIDTH) || (ypos >= LCD_HEIGHT)) return;
 80082b6:	4b1a      	ldr	r3, [pc, #104]	; (8008320 <ILI9341_Draw_Vertical_Line+0x88>)
 80082b8:	881b      	ldrh	r3, [r3, #0]
 80082ba:	b29b      	uxth	r3, r3
 80082bc:	88fa      	ldrh	r2, [r7, #6]
 80082be:	429a      	cmp	r2, r3
 80082c0:	d229      	bcs.n	8008316 <ILI9341_Draw_Vertical_Line+0x7e>
 80082c2:	4b18      	ldr	r3, [pc, #96]	; (8008324 <ILI9341_Draw_Vertical_Line+0x8c>)
 80082c4:	881b      	ldrh	r3, [r3, #0]
 80082c6:	b29b      	uxth	r3, r3
 80082c8:	88ba      	ldrh	r2, [r7, #4]
 80082ca:	429a      	cmp	r2, r3
 80082cc:	d223      	bcs.n	8008316 <ILI9341_Draw_Vertical_Line+0x7e>
	if(((ypos + height) - 1) >= LCD_HEIGHT)
 80082ce:	88ba      	ldrh	r2, [r7, #4]
 80082d0:	887b      	ldrh	r3, [r7, #2]
 80082d2:	4413      	add	r3, r2
 80082d4:	3b01      	subs	r3, #1
 80082d6:	4a13      	ldr	r2, [pc, #76]	; (8008324 <ILI9341_Draw_Vertical_Line+0x8c>)
 80082d8:	8812      	ldrh	r2, [r2, #0]
 80082da:	b292      	uxth	r2, r2
 80082dc:	4293      	cmp	r3, r2
 80082de:	db05      	blt.n	80082ec <ILI9341_Draw_Vertical_Line+0x54>
		{
			height= LCD_HEIGHT - ypos;
 80082e0:	4b10      	ldr	r3, [pc, #64]	; (8008324 <ILI9341_Draw_Vertical_Line+0x8c>)
 80082e2:	881b      	ldrh	r3, [r3, #0]
 80082e4:	b29a      	uxth	r2, r3
 80082e6:	88bb      	ldrh	r3, [r7, #4]
 80082e8:	1ad3      	subs	r3, r2, r3
 80082ea:	807b      	strh	r3, [r7, #2]
		}
	ILI9341_Set_Address(xpos, ypos, xpos, (ypos + height) - 1);
 80082ec:	88ba      	ldrh	r2, [r7, #4]
 80082ee:	887b      	ldrh	r3, [r7, #2]
 80082f0:	4413      	add	r3, r2
 80082f2:	b29b      	uxth	r3, r3
 80082f4:	3b01      	subs	r3, #1
 80082f6:	b29b      	uxth	r3, r3
 80082f8:	88fa      	ldrh	r2, [r7, #6]
 80082fa:	88b9      	ldrh	r1, [r7, #4]
 80082fc:	88f8      	ldrh	r0, [r7, #6]
 80082fe:	f7ff fb7b 	bl	80079f8 <ILI9341_Set_Address>
	ILI9341_Draw_colour_Burst(xpos, ypos, colour, height, LINE_CHUNK);
 8008302:	887c      	ldrh	r4, [r7, #2]
 8008304:	883a      	ldrh	r2, [r7, #0]
 8008306:	88b9      	ldrh	r1, [r7, #4]
 8008308:	88f8      	ldrh	r0, [r7, #6]
 800830a:	2303      	movs	r3, #3
 800830c:	9300      	str	r3, [sp, #0]
 800830e:	4623      	mov	r3, r4
 8008310:	f7ff fd48 	bl	8007da4 <ILI9341_Draw_colour_Burst>
 8008314:	e000      	b.n	8008318 <ILI9341_Draw_Vertical_Line+0x80>
	if((xpos >= LCD_WIDTH) || (ypos >= LCD_HEIGHT)) return;
 8008316:	bf00      	nop
}
 8008318:	370c      	adds	r7, #12
 800831a:	46bd      	mov	sp, r7
 800831c:	bd90      	pop	{r4, r7, pc}
 800831e:	bf00      	nop
 8008320:	200003d2 	.word	0x200003d2
 8008324:	200003d0 	.word	0x200003d0

08008328 <_GetEmptyRegEntry>:
 * 	@Brief search registry for empty registry entry. Internal use only.
 *
 * 	@Returns index of next empty entry, -1 if no empty registry entries are available
 */
int _GetEmptyRegEntry()
{
 8008328:	b480      	push	{r7}
 800832a:	b083      	sub	sp, #12
 800832c:	af00      	add	r7, sp, #0
	for(int i = 0; i < MAX_REG_INDEX; i++)
 800832e:	2300      	movs	r3, #0
 8008330:	607b      	str	r3, [r7, #4]
 8008332:	e031      	b.n	8008398 <_GetEmptyRegEntry+0x70>
	{
		if(	(strcmp(STRINGREG[i].text, "") == 0)	&&
 8008334:	687b      	ldr	r3, [r7, #4]
 8008336:	2226      	movs	r2, #38	; 0x26
 8008338:	fb02 f303 	mul.w	r3, r2, r3
 800833c:	4a1c      	ldr	r2, [pc, #112]	; (80083b0 <_GetEmptyRegEntry+0x88>)
 800833e:	4413      	add	r3, r2
 8008340:	781b      	ldrb	r3, [r3, #0]
 8008342:	2b00      	cmp	r3, #0
 8008344:	d125      	bne.n	8008392 <_GetEmptyRegEntry+0x6a>
			(STRINGREG[i].x 	== -1) 	&&
 8008346:	4a1a      	ldr	r2, [pc, #104]	; (80083b0 <_GetEmptyRegEntry+0x88>)
 8008348:	687b      	ldr	r3, [r7, #4]
 800834a:	2126      	movs	r1, #38	; 0x26
 800834c:	fb01 f303 	mul.w	r3, r1, r3
 8008350:	4413      	add	r3, r2
 8008352:	3320      	adds	r3, #32
 8008354:	f9b3 3000 	ldrsh.w	r3, [r3]
		if(	(strcmp(STRINGREG[i].text, "") == 0)	&&
 8008358:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800835c:	d119      	bne.n	8008392 <_GetEmptyRegEntry+0x6a>
			(STRINGREG[i].y 	== -1) 	&&
 800835e:	4a14      	ldr	r2, [pc, #80]	; (80083b0 <_GetEmptyRegEntry+0x88>)
 8008360:	687b      	ldr	r3, [r7, #4]
 8008362:	2126      	movs	r1, #38	; 0x26
 8008364:	fb01 f303 	mul.w	r3, r1, r3
 8008368:	4413      	add	r3, r2
 800836a:	3322      	adds	r3, #34	; 0x22
 800836c:	f9b3 3000 	ldrsh.w	r3, [r3]
			(STRINGREG[i].x 	== -1) 	&&
 8008370:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8008374:	d10d      	bne.n	8008392 <_GetEmptyRegEntry+0x6a>
			(STRINGREG[i].size == -1)
 8008376:	4a0e      	ldr	r2, [pc, #56]	; (80083b0 <_GetEmptyRegEntry+0x88>)
 8008378:	687b      	ldr	r3, [r7, #4]
 800837a:	2126      	movs	r1, #38	; 0x26
 800837c:	fb01 f303 	mul.w	r3, r1, r3
 8008380:	4413      	add	r3, r2
 8008382:	3324      	adds	r3, #36	; 0x24
 8008384:	f993 3000 	ldrsb.w	r3, [r3]
			(STRINGREG[i].y 	== -1) 	&&
 8008388:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800838c:	d101      	bne.n	8008392 <_GetEmptyRegEntry+0x6a>
		)
		{
			return i;
 800838e:	687b      	ldr	r3, [r7, #4]
 8008390:	e007      	b.n	80083a2 <_GetEmptyRegEntry+0x7a>
	for(int i = 0; i < MAX_REG_INDEX; i++)
 8008392:	687b      	ldr	r3, [r7, #4]
 8008394:	3301      	adds	r3, #1
 8008396:	607b      	str	r3, [r7, #4]
 8008398:	687b      	ldr	r3, [r7, #4]
 800839a:	2b03      	cmp	r3, #3
 800839c:	ddca      	ble.n	8008334 <_GetEmptyRegEntry+0xc>
		}
	}
	return -1;	// no space left!
 800839e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 80083a2:	4618      	mov	r0, r3
 80083a4:	370c      	adds	r7, #12
 80083a6:	46bd      	mov	sp, r7
 80083a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083ac:	4770      	bx	lr
 80083ae:	bf00      	nop
 80083b0:	200003d8 	.word	0x200003d8

080083b4 <TM_FindStringRegister>:
 * 	@Brief searches registry for matching text value
 *
 * 	@Returns index of found entry, -1 if no matching registry entries are found
 */
int TM_FindStringRegister(char* pSearch)
{
 80083b4:	b580      	push	{r7, lr}
 80083b6:	b084      	sub	sp, #16
 80083b8:	af00      	add	r7, sp, #0
 80083ba:	6078      	str	r0, [r7, #4]
	for(int i=0; i<MAX_REG_INDEX; i++)
 80083bc:	2300      	movs	r3, #0
 80083be:	60fb      	str	r3, [r7, #12]
 80083c0:	e011      	b.n	80083e6 <TM_FindStringRegister+0x32>
	{
		if(strcmp(pSearch, STRINGREG[i].text) == 0)
 80083c2:	68fb      	ldr	r3, [r7, #12]
 80083c4:	2226      	movs	r2, #38	; 0x26
 80083c6:	fb02 f303 	mul.w	r3, r2, r3
 80083ca:	4a0b      	ldr	r2, [pc, #44]	; (80083f8 <TM_FindStringRegister+0x44>)
 80083cc:	4413      	add	r3, r2
 80083ce:	4619      	mov	r1, r3
 80083d0:	6878      	ldr	r0, [r7, #4]
 80083d2:	f7f7 ff25 	bl	8000220 <strcmp>
 80083d6:	4603      	mov	r3, r0
 80083d8:	2b00      	cmp	r3, #0
 80083da:	d101      	bne.n	80083e0 <TM_FindStringRegister+0x2c>
		{
			return i;
 80083dc:	68fb      	ldr	r3, [r7, #12]
 80083de:	e007      	b.n	80083f0 <TM_FindStringRegister+0x3c>
	for(int i=0; i<MAX_REG_INDEX; i++)
 80083e0:	68fb      	ldr	r3, [r7, #12]
 80083e2:	3301      	adds	r3, #1
 80083e4:	60fb      	str	r3, [r7, #12]
 80083e6:	68fb      	ldr	r3, [r7, #12]
 80083e8:	2b03      	cmp	r3, #3
 80083ea:	ddea      	ble.n	80083c2 <TM_FindStringRegister+0xe>
		}

	}
	return -1;
 80083ec:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 80083f0:	4618      	mov	r0, r3
 80083f2:	3710      	adds	r7, #16
 80083f4:	46bd      	mov	sp, r7
 80083f6:	bd80      	pop	{r7, pc}
 80083f8:	200003d8 	.word	0x200003d8

080083fc <TM_RegisterString>:
 * 	@Brief allocates new data in registry
 *
 * 	@Returns index of new entry, -1 if no empty registry entries are available
 */
int TM_RegisterString(char* pText, int16_t pX, int16_t pY, int16_t pSize)
{
 80083fc:	b580      	push	{r7, lr}
 80083fe:	b086      	sub	sp, #24
 8008400:	af00      	add	r7, sp, #0
 8008402:	60f8      	str	r0, [r7, #12]
 8008404:	4608      	mov	r0, r1
 8008406:	4611      	mov	r1, r2
 8008408:	461a      	mov	r2, r3
 800840a:	4603      	mov	r3, r0
 800840c:	817b      	strh	r3, [r7, #10]
 800840e:	460b      	mov	r3, r1
 8008410:	813b      	strh	r3, [r7, #8]
 8008412:	4613      	mov	r3, r2
 8008414:	80fb      	strh	r3, [r7, #6]
	int res = _GetEmptyRegEntry();
 8008416:	f7ff ff87 	bl	8008328 <_GetEmptyRegEntry>
 800841a:	6178      	str	r0, [r7, #20]
	if(res < 0)
 800841c:	697b      	ldr	r3, [r7, #20]
 800841e:	2b00      	cmp	r3, #0
 8008420:	da02      	bge.n	8008428 <TM_RegisterString+0x2c>
	{
		return -1;
 8008422:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8008426:	e028      	b.n	800847a <TM_RegisterString+0x7e>
	}
	else
	{
		snprintf(STRINGREG[res].text, sizeof(STRINGREG[res].text), "%s", pText);
 8008428:	697b      	ldr	r3, [r7, #20]
 800842a:	2226      	movs	r2, #38	; 0x26
 800842c:	fb02 f303 	mul.w	r3, r2, r3
 8008430:	4a14      	ldr	r2, [pc, #80]	; (8008484 <TM_RegisterString+0x88>)
 8008432:	1898      	adds	r0, r3, r2
 8008434:	68fb      	ldr	r3, [r7, #12]
 8008436:	4a14      	ldr	r2, [pc, #80]	; (8008488 <TM_RegisterString+0x8c>)
 8008438:	2120      	movs	r1, #32
 800843a:	f000 f8d5 	bl	80085e8 <sniprintf>
		STRINGREG[res].x = pX;
 800843e:	4a11      	ldr	r2, [pc, #68]	; (8008484 <TM_RegisterString+0x88>)
 8008440:	697b      	ldr	r3, [r7, #20]
 8008442:	2126      	movs	r1, #38	; 0x26
 8008444:	fb01 f303 	mul.w	r3, r1, r3
 8008448:	4413      	add	r3, r2
 800844a:	3320      	adds	r3, #32
 800844c:	897a      	ldrh	r2, [r7, #10]
 800844e:	801a      	strh	r2, [r3, #0]
		STRINGREG[res].y = pY;
 8008450:	4a0c      	ldr	r2, [pc, #48]	; (8008484 <TM_RegisterString+0x88>)
 8008452:	697b      	ldr	r3, [r7, #20]
 8008454:	2126      	movs	r1, #38	; 0x26
 8008456:	fb01 f303 	mul.w	r3, r1, r3
 800845a:	4413      	add	r3, r2
 800845c:	3322      	adds	r3, #34	; 0x22
 800845e:	893a      	ldrh	r2, [r7, #8]
 8008460:	801a      	strh	r2, [r3, #0]
		STRINGREG[res].size = pSize;
 8008462:	88fb      	ldrh	r3, [r7, #6]
 8008464:	b258      	sxtb	r0, r3
 8008466:	4a07      	ldr	r2, [pc, #28]	; (8008484 <TM_RegisterString+0x88>)
 8008468:	697b      	ldr	r3, [r7, #20]
 800846a:	2126      	movs	r1, #38	; 0x26
 800846c:	fb01 f303 	mul.w	r3, r1, r3
 8008470:	4413      	add	r3, r2
 8008472:	3324      	adds	r3, #36	; 0x24
 8008474:	4602      	mov	r2, r0
 8008476:	701a      	strb	r2, [r3, #0]
	}
	return res;
 8008478:	697b      	ldr	r3, [r7, #20]
}
 800847a:	4618      	mov	r0, r3
 800847c:	3718      	adds	r7, #24
 800847e:	46bd      	mov	sp, r7
 8008480:	bd80      	pop	{r7, pc}
 8008482:	bf00      	nop
 8008484:	200003d8 	.word	0x200003d8
 8008488:	08009818 	.word	0x08009818

0800848c <__errno>:
 800848c:	4b01      	ldr	r3, [pc, #4]	; (8008494 <__errno+0x8>)
 800848e:	6818      	ldr	r0, [r3, #0]
 8008490:	4770      	bx	lr
 8008492:	bf00      	nop
 8008494:	20000470 	.word	0x20000470

08008498 <__libc_init_array>:
 8008498:	b570      	push	{r4, r5, r6, lr}
 800849a:	4e0d      	ldr	r6, [pc, #52]	; (80084d0 <__libc_init_array+0x38>)
 800849c:	4c0d      	ldr	r4, [pc, #52]	; (80084d4 <__libc_init_array+0x3c>)
 800849e:	1ba4      	subs	r4, r4, r6
 80084a0:	10a4      	asrs	r4, r4, #2
 80084a2:	2500      	movs	r5, #0
 80084a4:	42a5      	cmp	r5, r4
 80084a6:	d109      	bne.n	80084bc <__libc_init_array+0x24>
 80084a8:	4e0b      	ldr	r6, [pc, #44]	; (80084d8 <__libc_init_array+0x40>)
 80084aa:	4c0c      	ldr	r4, [pc, #48]	; (80084dc <__libc_init_array+0x44>)
 80084ac:	f001 f940 	bl	8009730 <_init>
 80084b0:	1ba4      	subs	r4, r4, r6
 80084b2:	10a4      	asrs	r4, r4, #2
 80084b4:	2500      	movs	r5, #0
 80084b6:	42a5      	cmp	r5, r4
 80084b8:	d105      	bne.n	80084c6 <__libc_init_array+0x2e>
 80084ba:	bd70      	pop	{r4, r5, r6, pc}
 80084bc:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80084c0:	4798      	blx	r3
 80084c2:	3501      	adds	r5, #1
 80084c4:	e7ee      	b.n	80084a4 <__libc_init_array+0xc>
 80084c6:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80084ca:	4798      	blx	r3
 80084cc:	3501      	adds	r5, #1
 80084ce:	e7f2      	b.n	80084b6 <__libc_init_array+0x1e>
 80084d0:	08009b04 	.word	0x08009b04
 80084d4:	08009b04 	.word	0x08009b04
 80084d8:	08009b04 	.word	0x08009b04
 80084dc:	08009b08 	.word	0x08009b08

080084e0 <memset>:
 80084e0:	4402      	add	r2, r0
 80084e2:	4603      	mov	r3, r0
 80084e4:	4293      	cmp	r3, r2
 80084e6:	d100      	bne.n	80084ea <memset+0xa>
 80084e8:	4770      	bx	lr
 80084ea:	f803 1b01 	strb.w	r1, [r3], #1
 80084ee:	e7f9      	b.n	80084e4 <memset+0x4>

080084f0 <iprintf>:
 80084f0:	b40f      	push	{r0, r1, r2, r3}
 80084f2:	4b0a      	ldr	r3, [pc, #40]	; (800851c <iprintf+0x2c>)
 80084f4:	b513      	push	{r0, r1, r4, lr}
 80084f6:	681c      	ldr	r4, [r3, #0]
 80084f8:	b124      	cbz	r4, 8008504 <iprintf+0x14>
 80084fa:	69a3      	ldr	r3, [r4, #24]
 80084fc:	b913      	cbnz	r3, 8008504 <iprintf+0x14>
 80084fe:	4620      	mov	r0, r4
 8008500:	f000 fa56 	bl	80089b0 <__sinit>
 8008504:	ab05      	add	r3, sp, #20
 8008506:	9a04      	ldr	r2, [sp, #16]
 8008508:	68a1      	ldr	r1, [r4, #8]
 800850a:	9301      	str	r3, [sp, #4]
 800850c:	4620      	mov	r0, r4
 800850e:	f000 fd61 	bl	8008fd4 <_vfiprintf_r>
 8008512:	b002      	add	sp, #8
 8008514:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8008518:	b004      	add	sp, #16
 800851a:	4770      	bx	lr
 800851c:	20000470 	.word	0x20000470

08008520 <_puts_r>:
 8008520:	b570      	push	{r4, r5, r6, lr}
 8008522:	460e      	mov	r6, r1
 8008524:	4605      	mov	r5, r0
 8008526:	b118      	cbz	r0, 8008530 <_puts_r+0x10>
 8008528:	6983      	ldr	r3, [r0, #24]
 800852a:	b90b      	cbnz	r3, 8008530 <_puts_r+0x10>
 800852c:	f000 fa40 	bl	80089b0 <__sinit>
 8008530:	69ab      	ldr	r3, [r5, #24]
 8008532:	68ac      	ldr	r4, [r5, #8]
 8008534:	b913      	cbnz	r3, 800853c <_puts_r+0x1c>
 8008536:	4628      	mov	r0, r5
 8008538:	f000 fa3a 	bl	80089b0 <__sinit>
 800853c:	4b23      	ldr	r3, [pc, #140]	; (80085cc <_puts_r+0xac>)
 800853e:	429c      	cmp	r4, r3
 8008540:	d117      	bne.n	8008572 <_puts_r+0x52>
 8008542:	686c      	ldr	r4, [r5, #4]
 8008544:	89a3      	ldrh	r3, [r4, #12]
 8008546:	071b      	lsls	r3, r3, #28
 8008548:	d51d      	bpl.n	8008586 <_puts_r+0x66>
 800854a:	6923      	ldr	r3, [r4, #16]
 800854c:	b1db      	cbz	r3, 8008586 <_puts_r+0x66>
 800854e:	3e01      	subs	r6, #1
 8008550:	68a3      	ldr	r3, [r4, #8]
 8008552:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8008556:	3b01      	subs	r3, #1
 8008558:	60a3      	str	r3, [r4, #8]
 800855a:	b9e9      	cbnz	r1, 8008598 <_puts_r+0x78>
 800855c:	2b00      	cmp	r3, #0
 800855e:	da2e      	bge.n	80085be <_puts_r+0x9e>
 8008560:	4622      	mov	r2, r4
 8008562:	210a      	movs	r1, #10
 8008564:	4628      	mov	r0, r5
 8008566:	f000 f873 	bl	8008650 <__swbuf_r>
 800856a:	3001      	adds	r0, #1
 800856c:	d011      	beq.n	8008592 <_puts_r+0x72>
 800856e:	200a      	movs	r0, #10
 8008570:	e011      	b.n	8008596 <_puts_r+0x76>
 8008572:	4b17      	ldr	r3, [pc, #92]	; (80085d0 <_puts_r+0xb0>)
 8008574:	429c      	cmp	r4, r3
 8008576:	d101      	bne.n	800857c <_puts_r+0x5c>
 8008578:	68ac      	ldr	r4, [r5, #8]
 800857a:	e7e3      	b.n	8008544 <_puts_r+0x24>
 800857c:	4b15      	ldr	r3, [pc, #84]	; (80085d4 <_puts_r+0xb4>)
 800857e:	429c      	cmp	r4, r3
 8008580:	bf08      	it	eq
 8008582:	68ec      	ldreq	r4, [r5, #12]
 8008584:	e7de      	b.n	8008544 <_puts_r+0x24>
 8008586:	4621      	mov	r1, r4
 8008588:	4628      	mov	r0, r5
 800858a:	f000 f8b3 	bl	80086f4 <__swsetup_r>
 800858e:	2800      	cmp	r0, #0
 8008590:	d0dd      	beq.n	800854e <_puts_r+0x2e>
 8008592:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8008596:	bd70      	pop	{r4, r5, r6, pc}
 8008598:	2b00      	cmp	r3, #0
 800859a:	da04      	bge.n	80085a6 <_puts_r+0x86>
 800859c:	69a2      	ldr	r2, [r4, #24]
 800859e:	429a      	cmp	r2, r3
 80085a0:	dc06      	bgt.n	80085b0 <_puts_r+0x90>
 80085a2:	290a      	cmp	r1, #10
 80085a4:	d004      	beq.n	80085b0 <_puts_r+0x90>
 80085a6:	6823      	ldr	r3, [r4, #0]
 80085a8:	1c5a      	adds	r2, r3, #1
 80085aa:	6022      	str	r2, [r4, #0]
 80085ac:	7019      	strb	r1, [r3, #0]
 80085ae:	e7cf      	b.n	8008550 <_puts_r+0x30>
 80085b0:	4622      	mov	r2, r4
 80085b2:	4628      	mov	r0, r5
 80085b4:	f000 f84c 	bl	8008650 <__swbuf_r>
 80085b8:	3001      	adds	r0, #1
 80085ba:	d1c9      	bne.n	8008550 <_puts_r+0x30>
 80085bc:	e7e9      	b.n	8008592 <_puts_r+0x72>
 80085be:	6823      	ldr	r3, [r4, #0]
 80085c0:	200a      	movs	r0, #10
 80085c2:	1c5a      	adds	r2, r3, #1
 80085c4:	6022      	str	r2, [r4, #0]
 80085c6:	7018      	strb	r0, [r3, #0]
 80085c8:	e7e5      	b.n	8008596 <_puts_r+0x76>
 80085ca:	bf00      	nop
 80085cc:	08009a90 	.word	0x08009a90
 80085d0:	08009ab0 	.word	0x08009ab0
 80085d4:	08009a70 	.word	0x08009a70

080085d8 <puts>:
 80085d8:	4b02      	ldr	r3, [pc, #8]	; (80085e4 <puts+0xc>)
 80085da:	4601      	mov	r1, r0
 80085dc:	6818      	ldr	r0, [r3, #0]
 80085de:	f7ff bf9f 	b.w	8008520 <_puts_r>
 80085e2:	bf00      	nop
 80085e4:	20000470 	.word	0x20000470

080085e8 <sniprintf>:
 80085e8:	b40c      	push	{r2, r3}
 80085ea:	b530      	push	{r4, r5, lr}
 80085ec:	4b17      	ldr	r3, [pc, #92]	; (800864c <sniprintf+0x64>)
 80085ee:	1e0c      	subs	r4, r1, #0
 80085f0:	b09d      	sub	sp, #116	; 0x74
 80085f2:	681d      	ldr	r5, [r3, #0]
 80085f4:	da08      	bge.n	8008608 <sniprintf+0x20>
 80085f6:	238b      	movs	r3, #139	; 0x8b
 80085f8:	602b      	str	r3, [r5, #0]
 80085fa:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80085fe:	b01d      	add	sp, #116	; 0x74
 8008600:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8008604:	b002      	add	sp, #8
 8008606:	4770      	bx	lr
 8008608:	f44f 7302 	mov.w	r3, #520	; 0x208
 800860c:	f8ad 3014 	strh.w	r3, [sp, #20]
 8008610:	bf14      	ite	ne
 8008612:	f104 33ff 	addne.w	r3, r4, #4294967295	; 0xffffffff
 8008616:	4623      	moveq	r3, r4
 8008618:	9304      	str	r3, [sp, #16]
 800861a:	9307      	str	r3, [sp, #28]
 800861c:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8008620:	9002      	str	r0, [sp, #8]
 8008622:	9006      	str	r0, [sp, #24]
 8008624:	f8ad 3016 	strh.w	r3, [sp, #22]
 8008628:	9a20      	ldr	r2, [sp, #128]	; 0x80
 800862a:	ab21      	add	r3, sp, #132	; 0x84
 800862c:	a902      	add	r1, sp, #8
 800862e:	4628      	mov	r0, r5
 8008630:	9301      	str	r3, [sp, #4]
 8008632:	f000 fbad 	bl	8008d90 <_svfiprintf_r>
 8008636:	1c43      	adds	r3, r0, #1
 8008638:	bfbc      	itt	lt
 800863a:	238b      	movlt	r3, #139	; 0x8b
 800863c:	602b      	strlt	r3, [r5, #0]
 800863e:	2c00      	cmp	r4, #0
 8008640:	d0dd      	beq.n	80085fe <sniprintf+0x16>
 8008642:	9b02      	ldr	r3, [sp, #8]
 8008644:	2200      	movs	r2, #0
 8008646:	701a      	strb	r2, [r3, #0]
 8008648:	e7d9      	b.n	80085fe <sniprintf+0x16>
 800864a:	bf00      	nop
 800864c:	20000470 	.word	0x20000470

08008650 <__swbuf_r>:
 8008650:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008652:	460e      	mov	r6, r1
 8008654:	4614      	mov	r4, r2
 8008656:	4605      	mov	r5, r0
 8008658:	b118      	cbz	r0, 8008662 <__swbuf_r+0x12>
 800865a:	6983      	ldr	r3, [r0, #24]
 800865c:	b90b      	cbnz	r3, 8008662 <__swbuf_r+0x12>
 800865e:	f000 f9a7 	bl	80089b0 <__sinit>
 8008662:	4b21      	ldr	r3, [pc, #132]	; (80086e8 <__swbuf_r+0x98>)
 8008664:	429c      	cmp	r4, r3
 8008666:	d12a      	bne.n	80086be <__swbuf_r+0x6e>
 8008668:	686c      	ldr	r4, [r5, #4]
 800866a:	69a3      	ldr	r3, [r4, #24]
 800866c:	60a3      	str	r3, [r4, #8]
 800866e:	89a3      	ldrh	r3, [r4, #12]
 8008670:	071a      	lsls	r2, r3, #28
 8008672:	d52e      	bpl.n	80086d2 <__swbuf_r+0x82>
 8008674:	6923      	ldr	r3, [r4, #16]
 8008676:	b363      	cbz	r3, 80086d2 <__swbuf_r+0x82>
 8008678:	6923      	ldr	r3, [r4, #16]
 800867a:	6820      	ldr	r0, [r4, #0]
 800867c:	1ac0      	subs	r0, r0, r3
 800867e:	6963      	ldr	r3, [r4, #20]
 8008680:	b2f6      	uxtb	r6, r6
 8008682:	4283      	cmp	r3, r0
 8008684:	4637      	mov	r7, r6
 8008686:	dc04      	bgt.n	8008692 <__swbuf_r+0x42>
 8008688:	4621      	mov	r1, r4
 800868a:	4628      	mov	r0, r5
 800868c:	f000 f926 	bl	80088dc <_fflush_r>
 8008690:	bb28      	cbnz	r0, 80086de <__swbuf_r+0x8e>
 8008692:	68a3      	ldr	r3, [r4, #8]
 8008694:	3b01      	subs	r3, #1
 8008696:	60a3      	str	r3, [r4, #8]
 8008698:	6823      	ldr	r3, [r4, #0]
 800869a:	1c5a      	adds	r2, r3, #1
 800869c:	6022      	str	r2, [r4, #0]
 800869e:	701e      	strb	r6, [r3, #0]
 80086a0:	6963      	ldr	r3, [r4, #20]
 80086a2:	3001      	adds	r0, #1
 80086a4:	4283      	cmp	r3, r0
 80086a6:	d004      	beq.n	80086b2 <__swbuf_r+0x62>
 80086a8:	89a3      	ldrh	r3, [r4, #12]
 80086aa:	07db      	lsls	r3, r3, #31
 80086ac:	d519      	bpl.n	80086e2 <__swbuf_r+0x92>
 80086ae:	2e0a      	cmp	r6, #10
 80086b0:	d117      	bne.n	80086e2 <__swbuf_r+0x92>
 80086b2:	4621      	mov	r1, r4
 80086b4:	4628      	mov	r0, r5
 80086b6:	f000 f911 	bl	80088dc <_fflush_r>
 80086ba:	b190      	cbz	r0, 80086e2 <__swbuf_r+0x92>
 80086bc:	e00f      	b.n	80086de <__swbuf_r+0x8e>
 80086be:	4b0b      	ldr	r3, [pc, #44]	; (80086ec <__swbuf_r+0x9c>)
 80086c0:	429c      	cmp	r4, r3
 80086c2:	d101      	bne.n	80086c8 <__swbuf_r+0x78>
 80086c4:	68ac      	ldr	r4, [r5, #8]
 80086c6:	e7d0      	b.n	800866a <__swbuf_r+0x1a>
 80086c8:	4b09      	ldr	r3, [pc, #36]	; (80086f0 <__swbuf_r+0xa0>)
 80086ca:	429c      	cmp	r4, r3
 80086cc:	bf08      	it	eq
 80086ce:	68ec      	ldreq	r4, [r5, #12]
 80086d0:	e7cb      	b.n	800866a <__swbuf_r+0x1a>
 80086d2:	4621      	mov	r1, r4
 80086d4:	4628      	mov	r0, r5
 80086d6:	f000 f80d 	bl	80086f4 <__swsetup_r>
 80086da:	2800      	cmp	r0, #0
 80086dc:	d0cc      	beq.n	8008678 <__swbuf_r+0x28>
 80086de:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 80086e2:	4638      	mov	r0, r7
 80086e4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80086e6:	bf00      	nop
 80086e8:	08009a90 	.word	0x08009a90
 80086ec:	08009ab0 	.word	0x08009ab0
 80086f0:	08009a70 	.word	0x08009a70

080086f4 <__swsetup_r>:
 80086f4:	4b32      	ldr	r3, [pc, #200]	; (80087c0 <__swsetup_r+0xcc>)
 80086f6:	b570      	push	{r4, r5, r6, lr}
 80086f8:	681d      	ldr	r5, [r3, #0]
 80086fa:	4606      	mov	r6, r0
 80086fc:	460c      	mov	r4, r1
 80086fe:	b125      	cbz	r5, 800870a <__swsetup_r+0x16>
 8008700:	69ab      	ldr	r3, [r5, #24]
 8008702:	b913      	cbnz	r3, 800870a <__swsetup_r+0x16>
 8008704:	4628      	mov	r0, r5
 8008706:	f000 f953 	bl	80089b0 <__sinit>
 800870a:	4b2e      	ldr	r3, [pc, #184]	; (80087c4 <__swsetup_r+0xd0>)
 800870c:	429c      	cmp	r4, r3
 800870e:	d10f      	bne.n	8008730 <__swsetup_r+0x3c>
 8008710:	686c      	ldr	r4, [r5, #4]
 8008712:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008716:	b29a      	uxth	r2, r3
 8008718:	0715      	lsls	r5, r2, #28
 800871a:	d42c      	bmi.n	8008776 <__swsetup_r+0x82>
 800871c:	06d0      	lsls	r0, r2, #27
 800871e:	d411      	bmi.n	8008744 <__swsetup_r+0x50>
 8008720:	2209      	movs	r2, #9
 8008722:	6032      	str	r2, [r6, #0]
 8008724:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008728:	81a3      	strh	r3, [r4, #12]
 800872a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800872e:	e03e      	b.n	80087ae <__swsetup_r+0xba>
 8008730:	4b25      	ldr	r3, [pc, #148]	; (80087c8 <__swsetup_r+0xd4>)
 8008732:	429c      	cmp	r4, r3
 8008734:	d101      	bne.n	800873a <__swsetup_r+0x46>
 8008736:	68ac      	ldr	r4, [r5, #8]
 8008738:	e7eb      	b.n	8008712 <__swsetup_r+0x1e>
 800873a:	4b24      	ldr	r3, [pc, #144]	; (80087cc <__swsetup_r+0xd8>)
 800873c:	429c      	cmp	r4, r3
 800873e:	bf08      	it	eq
 8008740:	68ec      	ldreq	r4, [r5, #12]
 8008742:	e7e6      	b.n	8008712 <__swsetup_r+0x1e>
 8008744:	0751      	lsls	r1, r2, #29
 8008746:	d512      	bpl.n	800876e <__swsetup_r+0x7a>
 8008748:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800874a:	b141      	cbz	r1, 800875e <__swsetup_r+0x6a>
 800874c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8008750:	4299      	cmp	r1, r3
 8008752:	d002      	beq.n	800875a <__swsetup_r+0x66>
 8008754:	4630      	mov	r0, r6
 8008756:	f000 fa19 	bl	8008b8c <_free_r>
 800875a:	2300      	movs	r3, #0
 800875c:	6363      	str	r3, [r4, #52]	; 0x34
 800875e:	89a3      	ldrh	r3, [r4, #12]
 8008760:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8008764:	81a3      	strh	r3, [r4, #12]
 8008766:	2300      	movs	r3, #0
 8008768:	6063      	str	r3, [r4, #4]
 800876a:	6923      	ldr	r3, [r4, #16]
 800876c:	6023      	str	r3, [r4, #0]
 800876e:	89a3      	ldrh	r3, [r4, #12]
 8008770:	f043 0308 	orr.w	r3, r3, #8
 8008774:	81a3      	strh	r3, [r4, #12]
 8008776:	6923      	ldr	r3, [r4, #16]
 8008778:	b94b      	cbnz	r3, 800878e <__swsetup_r+0x9a>
 800877a:	89a3      	ldrh	r3, [r4, #12]
 800877c:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8008780:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8008784:	d003      	beq.n	800878e <__swsetup_r+0x9a>
 8008786:	4621      	mov	r1, r4
 8008788:	4630      	mov	r0, r6
 800878a:	f000 f9bf 	bl	8008b0c <__smakebuf_r>
 800878e:	89a2      	ldrh	r2, [r4, #12]
 8008790:	f012 0301 	ands.w	r3, r2, #1
 8008794:	d00c      	beq.n	80087b0 <__swsetup_r+0xbc>
 8008796:	2300      	movs	r3, #0
 8008798:	60a3      	str	r3, [r4, #8]
 800879a:	6963      	ldr	r3, [r4, #20]
 800879c:	425b      	negs	r3, r3
 800879e:	61a3      	str	r3, [r4, #24]
 80087a0:	6923      	ldr	r3, [r4, #16]
 80087a2:	b953      	cbnz	r3, 80087ba <__swsetup_r+0xc6>
 80087a4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80087a8:	f013 0080 	ands.w	r0, r3, #128	; 0x80
 80087ac:	d1ba      	bne.n	8008724 <__swsetup_r+0x30>
 80087ae:	bd70      	pop	{r4, r5, r6, pc}
 80087b0:	0792      	lsls	r2, r2, #30
 80087b2:	bf58      	it	pl
 80087b4:	6963      	ldrpl	r3, [r4, #20]
 80087b6:	60a3      	str	r3, [r4, #8]
 80087b8:	e7f2      	b.n	80087a0 <__swsetup_r+0xac>
 80087ba:	2000      	movs	r0, #0
 80087bc:	e7f7      	b.n	80087ae <__swsetup_r+0xba>
 80087be:	bf00      	nop
 80087c0:	20000470 	.word	0x20000470
 80087c4:	08009a90 	.word	0x08009a90
 80087c8:	08009ab0 	.word	0x08009ab0
 80087cc:	08009a70 	.word	0x08009a70

080087d0 <__sflush_r>:
 80087d0:	898a      	ldrh	r2, [r1, #12]
 80087d2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80087d6:	4605      	mov	r5, r0
 80087d8:	0710      	lsls	r0, r2, #28
 80087da:	460c      	mov	r4, r1
 80087dc:	d458      	bmi.n	8008890 <__sflush_r+0xc0>
 80087de:	684b      	ldr	r3, [r1, #4]
 80087e0:	2b00      	cmp	r3, #0
 80087e2:	dc05      	bgt.n	80087f0 <__sflush_r+0x20>
 80087e4:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 80087e6:	2b00      	cmp	r3, #0
 80087e8:	dc02      	bgt.n	80087f0 <__sflush_r+0x20>
 80087ea:	2000      	movs	r0, #0
 80087ec:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80087f0:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80087f2:	2e00      	cmp	r6, #0
 80087f4:	d0f9      	beq.n	80087ea <__sflush_r+0x1a>
 80087f6:	2300      	movs	r3, #0
 80087f8:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 80087fc:	682f      	ldr	r7, [r5, #0]
 80087fe:	6a21      	ldr	r1, [r4, #32]
 8008800:	602b      	str	r3, [r5, #0]
 8008802:	d032      	beq.n	800886a <__sflush_r+0x9a>
 8008804:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8008806:	89a3      	ldrh	r3, [r4, #12]
 8008808:	075a      	lsls	r2, r3, #29
 800880a:	d505      	bpl.n	8008818 <__sflush_r+0x48>
 800880c:	6863      	ldr	r3, [r4, #4]
 800880e:	1ac0      	subs	r0, r0, r3
 8008810:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8008812:	b10b      	cbz	r3, 8008818 <__sflush_r+0x48>
 8008814:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8008816:	1ac0      	subs	r0, r0, r3
 8008818:	2300      	movs	r3, #0
 800881a:	4602      	mov	r2, r0
 800881c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800881e:	6a21      	ldr	r1, [r4, #32]
 8008820:	4628      	mov	r0, r5
 8008822:	47b0      	blx	r6
 8008824:	1c43      	adds	r3, r0, #1
 8008826:	89a3      	ldrh	r3, [r4, #12]
 8008828:	d106      	bne.n	8008838 <__sflush_r+0x68>
 800882a:	6829      	ldr	r1, [r5, #0]
 800882c:	291d      	cmp	r1, #29
 800882e:	d848      	bhi.n	80088c2 <__sflush_r+0xf2>
 8008830:	4a29      	ldr	r2, [pc, #164]	; (80088d8 <__sflush_r+0x108>)
 8008832:	40ca      	lsrs	r2, r1
 8008834:	07d6      	lsls	r6, r2, #31
 8008836:	d544      	bpl.n	80088c2 <__sflush_r+0xf2>
 8008838:	2200      	movs	r2, #0
 800883a:	6062      	str	r2, [r4, #4]
 800883c:	04d9      	lsls	r1, r3, #19
 800883e:	6922      	ldr	r2, [r4, #16]
 8008840:	6022      	str	r2, [r4, #0]
 8008842:	d504      	bpl.n	800884e <__sflush_r+0x7e>
 8008844:	1c42      	adds	r2, r0, #1
 8008846:	d101      	bne.n	800884c <__sflush_r+0x7c>
 8008848:	682b      	ldr	r3, [r5, #0]
 800884a:	b903      	cbnz	r3, 800884e <__sflush_r+0x7e>
 800884c:	6560      	str	r0, [r4, #84]	; 0x54
 800884e:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8008850:	602f      	str	r7, [r5, #0]
 8008852:	2900      	cmp	r1, #0
 8008854:	d0c9      	beq.n	80087ea <__sflush_r+0x1a>
 8008856:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800885a:	4299      	cmp	r1, r3
 800885c:	d002      	beq.n	8008864 <__sflush_r+0x94>
 800885e:	4628      	mov	r0, r5
 8008860:	f000 f994 	bl	8008b8c <_free_r>
 8008864:	2000      	movs	r0, #0
 8008866:	6360      	str	r0, [r4, #52]	; 0x34
 8008868:	e7c0      	b.n	80087ec <__sflush_r+0x1c>
 800886a:	2301      	movs	r3, #1
 800886c:	4628      	mov	r0, r5
 800886e:	47b0      	blx	r6
 8008870:	1c41      	adds	r1, r0, #1
 8008872:	d1c8      	bne.n	8008806 <__sflush_r+0x36>
 8008874:	682b      	ldr	r3, [r5, #0]
 8008876:	2b00      	cmp	r3, #0
 8008878:	d0c5      	beq.n	8008806 <__sflush_r+0x36>
 800887a:	2b1d      	cmp	r3, #29
 800887c:	d001      	beq.n	8008882 <__sflush_r+0xb2>
 800887e:	2b16      	cmp	r3, #22
 8008880:	d101      	bne.n	8008886 <__sflush_r+0xb6>
 8008882:	602f      	str	r7, [r5, #0]
 8008884:	e7b1      	b.n	80087ea <__sflush_r+0x1a>
 8008886:	89a3      	ldrh	r3, [r4, #12]
 8008888:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800888c:	81a3      	strh	r3, [r4, #12]
 800888e:	e7ad      	b.n	80087ec <__sflush_r+0x1c>
 8008890:	690f      	ldr	r7, [r1, #16]
 8008892:	2f00      	cmp	r7, #0
 8008894:	d0a9      	beq.n	80087ea <__sflush_r+0x1a>
 8008896:	0793      	lsls	r3, r2, #30
 8008898:	680e      	ldr	r6, [r1, #0]
 800889a:	bf08      	it	eq
 800889c:	694b      	ldreq	r3, [r1, #20]
 800889e:	600f      	str	r7, [r1, #0]
 80088a0:	bf18      	it	ne
 80088a2:	2300      	movne	r3, #0
 80088a4:	eba6 0807 	sub.w	r8, r6, r7
 80088a8:	608b      	str	r3, [r1, #8]
 80088aa:	f1b8 0f00 	cmp.w	r8, #0
 80088ae:	dd9c      	ble.n	80087ea <__sflush_r+0x1a>
 80088b0:	4643      	mov	r3, r8
 80088b2:	463a      	mov	r2, r7
 80088b4:	6a21      	ldr	r1, [r4, #32]
 80088b6:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 80088b8:	4628      	mov	r0, r5
 80088ba:	47b0      	blx	r6
 80088bc:	2800      	cmp	r0, #0
 80088be:	dc06      	bgt.n	80088ce <__sflush_r+0xfe>
 80088c0:	89a3      	ldrh	r3, [r4, #12]
 80088c2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80088c6:	81a3      	strh	r3, [r4, #12]
 80088c8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80088cc:	e78e      	b.n	80087ec <__sflush_r+0x1c>
 80088ce:	4407      	add	r7, r0
 80088d0:	eba8 0800 	sub.w	r8, r8, r0
 80088d4:	e7e9      	b.n	80088aa <__sflush_r+0xda>
 80088d6:	bf00      	nop
 80088d8:	20400001 	.word	0x20400001

080088dc <_fflush_r>:
 80088dc:	b538      	push	{r3, r4, r5, lr}
 80088de:	690b      	ldr	r3, [r1, #16]
 80088e0:	4605      	mov	r5, r0
 80088e2:	460c      	mov	r4, r1
 80088e4:	b1db      	cbz	r3, 800891e <_fflush_r+0x42>
 80088e6:	b118      	cbz	r0, 80088f0 <_fflush_r+0x14>
 80088e8:	6983      	ldr	r3, [r0, #24]
 80088ea:	b90b      	cbnz	r3, 80088f0 <_fflush_r+0x14>
 80088ec:	f000 f860 	bl	80089b0 <__sinit>
 80088f0:	4b0c      	ldr	r3, [pc, #48]	; (8008924 <_fflush_r+0x48>)
 80088f2:	429c      	cmp	r4, r3
 80088f4:	d109      	bne.n	800890a <_fflush_r+0x2e>
 80088f6:	686c      	ldr	r4, [r5, #4]
 80088f8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80088fc:	b17b      	cbz	r3, 800891e <_fflush_r+0x42>
 80088fe:	4621      	mov	r1, r4
 8008900:	4628      	mov	r0, r5
 8008902:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8008906:	f7ff bf63 	b.w	80087d0 <__sflush_r>
 800890a:	4b07      	ldr	r3, [pc, #28]	; (8008928 <_fflush_r+0x4c>)
 800890c:	429c      	cmp	r4, r3
 800890e:	d101      	bne.n	8008914 <_fflush_r+0x38>
 8008910:	68ac      	ldr	r4, [r5, #8]
 8008912:	e7f1      	b.n	80088f8 <_fflush_r+0x1c>
 8008914:	4b05      	ldr	r3, [pc, #20]	; (800892c <_fflush_r+0x50>)
 8008916:	429c      	cmp	r4, r3
 8008918:	bf08      	it	eq
 800891a:	68ec      	ldreq	r4, [r5, #12]
 800891c:	e7ec      	b.n	80088f8 <_fflush_r+0x1c>
 800891e:	2000      	movs	r0, #0
 8008920:	bd38      	pop	{r3, r4, r5, pc}
 8008922:	bf00      	nop
 8008924:	08009a90 	.word	0x08009a90
 8008928:	08009ab0 	.word	0x08009ab0
 800892c:	08009a70 	.word	0x08009a70

08008930 <std>:
 8008930:	2300      	movs	r3, #0
 8008932:	b510      	push	{r4, lr}
 8008934:	4604      	mov	r4, r0
 8008936:	e9c0 3300 	strd	r3, r3, [r0]
 800893a:	6083      	str	r3, [r0, #8]
 800893c:	8181      	strh	r1, [r0, #12]
 800893e:	6643      	str	r3, [r0, #100]	; 0x64
 8008940:	81c2      	strh	r2, [r0, #14]
 8008942:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8008946:	6183      	str	r3, [r0, #24]
 8008948:	4619      	mov	r1, r3
 800894a:	2208      	movs	r2, #8
 800894c:	305c      	adds	r0, #92	; 0x5c
 800894e:	f7ff fdc7 	bl	80084e0 <memset>
 8008952:	4b05      	ldr	r3, [pc, #20]	; (8008968 <std+0x38>)
 8008954:	6263      	str	r3, [r4, #36]	; 0x24
 8008956:	4b05      	ldr	r3, [pc, #20]	; (800896c <std+0x3c>)
 8008958:	62a3      	str	r3, [r4, #40]	; 0x28
 800895a:	4b05      	ldr	r3, [pc, #20]	; (8008970 <std+0x40>)
 800895c:	62e3      	str	r3, [r4, #44]	; 0x2c
 800895e:	4b05      	ldr	r3, [pc, #20]	; (8008974 <std+0x44>)
 8008960:	6224      	str	r4, [r4, #32]
 8008962:	6323      	str	r3, [r4, #48]	; 0x30
 8008964:	bd10      	pop	{r4, pc}
 8008966:	bf00      	nop
 8008968:	08009531 	.word	0x08009531
 800896c:	08009553 	.word	0x08009553
 8008970:	0800958b 	.word	0x0800958b
 8008974:	080095af 	.word	0x080095af

08008978 <_cleanup_r>:
 8008978:	4901      	ldr	r1, [pc, #4]	; (8008980 <_cleanup_r+0x8>)
 800897a:	f000 b885 	b.w	8008a88 <_fwalk_reent>
 800897e:	bf00      	nop
 8008980:	080088dd 	.word	0x080088dd

08008984 <__sfmoreglue>:
 8008984:	b570      	push	{r4, r5, r6, lr}
 8008986:	1e4a      	subs	r2, r1, #1
 8008988:	2568      	movs	r5, #104	; 0x68
 800898a:	4355      	muls	r5, r2
 800898c:	460e      	mov	r6, r1
 800898e:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8008992:	f000 f949 	bl	8008c28 <_malloc_r>
 8008996:	4604      	mov	r4, r0
 8008998:	b140      	cbz	r0, 80089ac <__sfmoreglue+0x28>
 800899a:	2100      	movs	r1, #0
 800899c:	e9c0 1600 	strd	r1, r6, [r0]
 80089a0:	300c      	adds	r0, #12
 80089a2:	60a0      	str	r0, [r4, #8]
 80089a4:	f105 0268 	add.w	r2, r5, #104	; 0x68
 80089a8:	f7ff fd9a 	bl	80084e0 <memset>
 80089ac:	4620      	mov	r0, r4
 80089ae:	bd70      	pop	{r4, r5, r6, pc}

080089b0 <__sinit>:
 80089b0:	6983      	ldr	r3, [r0, #24]
 80089b2:	b510      	push	{r4, lr}
 80089b4:	4604      	mov	r4, r0
 80089b6:	bb33      	cbnz	r3, 8008a06 <__sinit+0x56>
 80089b8:	e9c0 3312 	strd	r3, r3, [r0, #72]	; 0x48
 80089bc:	6503      	str	r3, [r0, #80]	; 0x50
 80089be:	4b12      	ldr	r3, [pc, #72]	; (8008a08 <__sinit+0x58>)
 80089c0:	4a12      	ldr	r2, [pc, #72]	; (8008a0c <__sinit+0x5c>)
 80089c2:	681b      	ldr	r3, [r3, #0]
 80089c4:	6282      	str	r2, [r0, #40]	; 0x28
 80089c6:	4298      	cmp	r0, r3
 80089c8:	bf04      	itt	eq
 80089ca:	2301      	moveq	r3, #1
 80089cc:	6183      	streq	r3, [r0, #24]
 80089ce:	f000 f81f 	bl	8008a10 <__sfp>
 80089d2:	6060      	str	r0, [r4, #4]
 80089d4:	4620      	mov	r0, r4
 80089d6:	f000 f81b 	bl	8008a10 <__sfp>
 80089da:	60a0      	str	r0, [r4, #8]
 80089dc:	4620      	mov	r0, r4
 80089de:	f000 f817 	bl	8008a10 <__sfp>
 80089e2:	2200      	movs	r2, #0
 80089e4:	60e0      	str	r0, [r4, #12]
 80089e6:	2104      	movs	r1, #4
 80089e8:	6860      	ldr	r0, [r4, #4]
 80089ea:	f7ff ffa1 	bl	8008930 <std>
 80089ee:	2201      	movs	r2, #1
 80089f0:	2109      	movs	r1, #9
 80089f2:	68a0      	ldr	r0, [r4, #8]
 80089f4:	f7ff ff9c 	bl	8008930 <std>
 80089f8:	2202      	movs	r2, #2
 80089fa:	2112      	movs	r1, #18
 80089fc:	68e0      	ldr	r0, [r4, #12]
 80089fe:	f7ff ff97 	bl	8008930 <std>
 8008a02:	2301      	movs	r3, #1
 8008a04:	61a3      	str	r3, [r4, #24]
 8008a06:	bd10      	pop	{r4, pc}
 8008a08:	08009a6c 	.word	0x08009a6c
 8008a0c:	08008979 	.word	0x08008979

08008a10 <__sfp>:
 8008a10:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008a12:	4b1b      	ldr	r3, [pc, #108]	; (8008a80 <__sfp+0x70>)
 8008a14:	681e      	ldr	r6, [r3, #0]
 8008a16:	69b3      	ldr	r3, [r6, #24]
 8008a18:	4607      	mov	r7, r0
 8008a1a:	b913      	cbnz	r3, 8008a22 <__sfp+0x12>
 8008a1c:	4630      	mov	r0, r6
 8008a1e:	f7ff ffc7 	bl	80089b0 <__sinit>
 8008a22:	3648      	adds	r6, #72	; 0x48
 8008a24:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8008a28:	3b01      	subs	r3, #1
 8008a2a:	d503      	bpl.n	8008a34 <__sfp+0x24>
 8008a2c:	6833      	ldr	r3, [r6, #0]
 8008a2e:	b133      	cbz	r3, 8008a3e <__sfp+0x2e>
 8008a30:	6836      	ldr	r6, [r6, #0]
 8008a32:	e7f7      	b.n	8008a24 <__sfp+0x14>
 8008a34:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8008a38:	b16d      	cbz	r5, 8008a56 <__sfp+0x46>
 8008a3a:	3468      	adds	r4, #104	; 0x68
 8008a3c:	e7f4      	b.n	8008a28 <__sfp+0x18>
 8008a3e:	2104      	movs	r1, #4
 8008a40:	4638      	mov	r0, r7
 8008a42:	f7ff ff9f 	bl	8008984 <__sfmoreglue>
 8008a46:	6030      	str	r0, [r6, #0]
 8008a48:	2800      	cmp	r0, #0
 8008a4a:	d1f1      	bne.n	8008a30 <__sfp+0x20>
 8008a4c:	230c      	movs	r3, #12
 8008a4e:	603b      	str	r3, [r7, #0]
 8008a50:	4604      	mov	r4, r0
 8008a52:	4620      	mov	r0, r4
 8008a54:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008a56:	4b0b      	ldr	r3, [pc, #44]	; (8008a84 <__sfp+0x74>)
 8008a58:	6665      	str	r5, [r4, #100]	; 0x64
 8008a5a:	e9c4 5500 	strd	r5, r5, [r4]
 8008a5e:	60a5      	str	r5, [r4, #8]
 8008a60:	e9c4 3503 	strd	r3, r5, [r4, #12]
 8008a64:	e9c4 5505 	strd	r5, r5, [r4, #20]
 8008a68:	2208      	movs	r2, #8
 8008a6a:	4629      	mov	r1, r5
 8008a6c:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8008a70:	f7ff fd36 	bl	80084e0 <memset>
 8008a74:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8008a78:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8008a7c:	e7e9      	b.n	8008a52 <__sfp+0x42>
 8008a7e:	bf00      	nop
 8008a80:	08009a6c 	.word	0x08009a6c
 8008a84:	ffff0001 	.word	0xffff0001

08008a88 <_fwalk_reent>:
 8008a88:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008a8c:	4680      	mov	r8, r0
 8008a8e:	4689      	mov	r9, r1
 8008a90:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8008a94:	2600      	movs	r6, #0
 8008a96:	b914      	cbnz	r4, 8008a9e <_fwalk_reent+0x16>
 8008a98:	4630      	mov	r0, r6
 8008a9a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8008a9e:	e9d4 7501 	ldrd	r7, r5, [r4, #4]
 8008aa2:	3f01      	subs	r7, #1
 8008aa4:	d501      	bpl.n	8008aaa <_fwalk_reent+0x22>
 8008aa6:	6824      	ldr	r4, [r4, #0]
 8008aa8:	e7f5      	b.n	8008a96 <_fwalk_reent+0xe>
 8008aaa:	89ab      	ldrh	r3, [r5, #12]
 8008aac:	2b01      	cmp	r3, #1
 8008aae:	d907      	bls.n	8008ac0 <_fwalk_reent+0x38>
 8008ab0:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8008ab4:	3301      	adds	r3, #1
 8008ab6:	d003      	beq.n	8008ac0 <_fwalk_reent+0x38>
 8008ab8:	4629      	mov	r1, r5
 8008aba:	4640      	mov	r0, r8
 8008abc:	47c8      	blx	r9
 8008abe:	4306      	orrs	r6, r0
 8008ac0:	3568      	adds	r5, #104	; 0x68
 8008ac2:	e7ee      	b.n	8008aa2 <_fwalk_reent+0x1a>

08008ac4 <__swhatbuf_r>:
 8008ac4:	b570      	push	{r4, r5, r6, lr}
 8008ac6:	460e      	mov	r6, r1
 8008ac8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008acc:	2900      	cmp	r1, #0
 8008ace:	b096      	sub	sp, #88	; 0x58
 8008ad0:	4614      	mov	r4, r2
 8008ad2:	461d      	mov	r5, r3
 8008ad4:	da07      	bge.n	8008ae6 <__swhatbuf_r+0x22>
 8008ad6:	2300      	movs	r3, #0
 8008ad8:	602b      	str	r3, [r5, #0]
 8008ada:	89b3      	ldrh	r3, [r6, #12]
 8008adc:	061a      	lsls	r2, r3, #24
 8008ade:	d410      	bmi.n	8008b02 <__swhatbuf_r+0x3e>
 8008ae0:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8008ae4:	e00e      	b.n	8008b04 <__swhatbuf_r+0x40>
 8008ae6:	466a      	mov	r2, sp
 8008ae8:	f000 fd88 	bl	80095fc <_fstat_r>
 8008aec:	2800      	cmp	r0, #0
 8008aee:	dbf2      	blt.n	8008ad6 <__swhatbuf_r+0x12>
 8008af0:	9a01      	ldr	r2, [sp, #4]
 8008af2:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8008af6:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8008afa:	425a      	negs	r2, r3
 8008afc:	415a      	adcs	r2, r3
 8008afe:	602a      	str	r2, [r5, #0]
 8008b00:	e7ee      	b.n	8008ae0 <__swhatbuf_r+0x1c>
 8008b02:	2340      	movs	r3, #64	; 0x40
 8008b04:	2000      	movs	r0, #0
 8008b06:	6023      	str	r3, [r4, #0]
 8008b08:	b016      	add	sp, #88	; 0x58
 8008b0a:	bd70      	pop	{r4, r5, r6, pc}

08008b0c <__smakebuf_r>:
 8008b0c:	898b      	ldrh	r3, [r1, #12]
 8008b0e:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8008b10:	079d      	lsls	r5, r3, #30
 8008b12:	4606      	mov	r6, r0
 8008b14:	460c      	mov	r4, r1
 8008b16:	d507      	bpl.n	8008b28 <__smakebuf_r+0x1c>
 8008b18:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8008b1c:	6023      	str	r3, [r4, #0]
 8008b1e:	6123      	str	r3, [r4, #16]
 8008b20:	2301      	movs	r3, #1
 8008b22:	6163      	str	r3, [r4, #20]
 8008b24:	b002      	add	sp, #8
 8008b26:	bd70      	pop	{r4, r5, r6, pc}
 8008b28:	ab01      	add	r3, sp, #4
 8008b2a:	466a      	mov	r2, sp
 8008b2c:	f7ff ffca 	bl	8008ac4 <__swhatbuf_r>
 8008b30:	9900      	ldr	r1, [sp, #0]
 8008b32:	4605      	mov	r5, r0
 8008b34:	4630      	mov	r0, r6
 8008b36:	f000 f877 	bl	8008c28 <_malloc_r>
 8008b3a:	b948      	cbnz	r0, 8008b50 <__smakebuf_r+0x44>
 8008b3c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008b40:	059a      	lsls	r2, r3, #22
 8008b42:	d4ef      	bmi.n	8008b24 <__smakebuf_r+0x18>
 8008b44:	f023 0303 	bic.w	r3, r3, #3
 8008b48:	f043 0302 	orr.w	r3, r3, #2
 8008b4c:	81a3      	strh	r3, [r4, #12]
 8008b4e:	e7e3      	b.n	8008b18 <__smakebuf_r+0xc>
 8008b50:	4b0d      	ldr	r3, [pc, #52]	; (8008b88 <__smakebuf_r+0x7c>)
 8008b52:	62b3      	str	r3, [r6, #40]	; 0x28
 8008b54:	89a3      	ldrh	r3, [r4, #12]
 8008b56:	6020      	str	r0, [r4, #0]
 8008b58:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008b5c:	81a3      	strh	r3, [r4, #12]
 8008b5e:	9b00      	ldr	r3, [sp, #0]
 8008b60:	6163      	str	r3, [r4, #20]
 8008b62:	9b01      	ldr	r3, [sp, #4]
 8008b64:	6120      	str	r0, [r4, #16]
 8008b66:	b15b      	cbz	r3, 8008b80 <__smakebuf_r+0x74>
 8008b68:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8008b6c:	4630      	mov	r0, r6
 8008b6e:	f000 fd57 	bl	8009620 <_isatty_r>
 8008b72:	b128      	cbz	r0, 8008b80 <__smakebuf_r+0x74>
 8008b74:	89a3      	ldrh	r3, [r4, #12]
 8008b76:	f023 0303 	bic.w	r3, r3, #3
 8008b7a:	f043 0301 	orr.w	r3, r3, #1
 8008b7e:	81a3      	strh	r3, [r4, #12]
 8008b80:	89a3      	ldrh	r3, [r4, #12]
 8008b82:	431d      	orrs	r5, r3
 8008b84:	81a5      	strh	r5, [r4, #12]
 8008b86:	e7cd      	b.n	8008b24 <__smakebuf_r+0x18>
 8008b88:	08008979 	.word	0x08008979

08008b8c <_free_r>:
 8008b8c:	b538      	push	{r3, r4, r5, lr}
 8008b8e:	4605      	mov	r5, r0
 8008b90:	2900      	cmp	r1, #0
 8008b92:	d045      	beq.n	8008c20 <_free_r+0x94>
 8008b94:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8008b98:	1f0c      	subs	r4, r1, #4
 8008b9a:	2b00      	cmp	r3, #0
 8008b9c:	bfb8      	it	lt
 8008b9e:	18e4      	addlt	r4, r4, r3
 8008ba0:	f000 fd84 	bl	80096ac <__malloc_lock>
 8008ba4:	4a1f      	ldr	r2, [pc, #124]	; (8008c24 <_free_r+0x98>)
 8008ba6:	6813      	ldr	r3, [r2, #0]
 8008ba8:	4610      	mov	r0, r2
 8008baa:	b933      	cbnz	r3, 8008bba <_free_r+0x2e>
 8008bac:	6063      	str	r3, [r4, #4]
 8008bae:	6014      	str	r4, [r2, #0]
 8008bb0:	4628      	mov	r0, r5
 8008bb2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8008bb6:	f000 bd7a 	b.w	80096ae <__malloc_unlock>
 8008bba:	42a3      	cmp	r3, r4
 8008bbc:	d90c      	bls.n	8008bd8 <_free_r+0x4c>
 8008bbe:	6821      	ldr	r1, [r4, #0]
 8008bc0:	1862      	adds	r2, r4, r1
 8008bc2:	4293      	cmp	r3, r2
 8008bc4:	bf04      	itt	eq
 8008bc6:	681a      	ldreq	r2, [r3, #0]
 8008bc8:	685b      	ldreq	r3, [r3, #4]
 8008bca:	6063      	str	r3, [r4, #4]
 8008bcc:	bf04      	itt	eq
 8008bce:	1852      	addeq	r2, r2, r1
 8008bd0:	6022      	streq	r2, [r4, #0]
 8008bd2:	6004      	str	r4, [r0, #0]
 8008bd4:	e7ec      	b.n	8008bb0 <_free_r+0x24>
 8008bd6:	4613      	mov	r3, r2
 8008bd8:	685a      	ldr	r2, [r3, #4]
 8008bda:	b10a      	cbz	r2, 8008be0 <_free_r+0x54>
 8008bdc:	42a2      	cmp	r2, r4
 8008bde:	d9fa      	bls.n	8008bd6 <_free_r+0x4a>
 8008be0:	6819      	ldr	r1, [r3, #0]
 8008be2:	1858      	adds	r0, r3, r1
 8008be4:	42a0      	cmp	r0, r4
 8008be6:	d10b      	bne.n	8008c00 <_free_r+0x74>
 8008be8:	6820      	ldr	r0, [r4, #0]
 8008bea:	4401      	add	r1, r0
 8008bec:	1858      	adds	r0, r3, r1
 8008bee:	4282      	cmp	r2, r0
 8008bf0:	6019      	str	r1, [r3, #0]
 8008bf2:	d1dd      	bne.n	8008bb0 <_free_r+0x24>
 8008bf4:	6810      	ldr	r0, [r2, #0]
 8008bf6:	6852      	ldr	r2, [r2, #4]
 8008bf8:	605a      	str	r2, [r3, #4]
 8008bfa:	4401      	add	r1, r0
 8008bfc:	6019      	str	r1, [r3, #0]
 8008bfe:	e7d7      	b.n	8008bb0 <_free_r+0x24>
 8008c00:	d902      	bls.n	8008c08 <_free_r+0x7c>
 8008c02:	230c      	movs	r3, #12
 8008c04:	602b      	str	r3, [r5, #0]
 8008c06:	e7d3      	b.n	8008bb0 <_free_r+0x24>
 8008c08:	6820      	ldr	r0, [r4, #0]
 8008c0a:	1821      	adds	r1, r4, r0
 8008c0c:	428a      	cmp	r2, r1
 8008c0e:	bf04      	itt	eq
 8008c10:	6811      	ldreq	r1, [r2, #0]
 8008c12:	6852      	ldreq	r2, [r2, #4]
 8008c14:	6062      	str	r2, [r4, #4]
 8008c16:	bf04      	itt	eq
 8008c18:	1809      	addeq	r1, r1, r0
 8008c1a:	6021      	streq	r1, [r4, #0]
 8008c1c:	605c      	str	r4, [r3, #4]
 8008c1e:	e7c7      	b.n	8008bb0 <_free_r+0x24>
 8008c20:	bd38      	pop	{r3, r4, r5, pc}
 8008c22:	bf00      	nop
 8008c24:	20000500 	.word	0x20000500

08008c28 <_malloc_r>:
 8008c28:	b570      	push	{r4, r5, r6, lr}
 8008c2a:	1ccd      	adds	r5, r1, #3
 8008c2c:	f025 0503 	bic.w	r5, r5, #3
 8008c30:	3508      	adds	r5, #8
 8008c32:	2d0c      	cmp	r5, #12
 8008c34:	bf38      	it	cc
 8008c36:	250c      	movcc	r5, #12
 8008c38:	2d00      	cmp	r5, #0
 8008c3a:	4606      	mov	r6, r0
 8008c3c:	db01      	blt.n	8008c42 <_malloc_r+0x1a>
 8008c3e:	42a9      	cmp	r1, r5
 8008c40:	d903      	bls.n	8008c4a <_malloc_r+0x22>
 8008c42:	230c      	movs	r3, #12
 8008c44:	6033      	str	r3, [r6, #0]
 8008c46:	2000      	movs	r0, #0
 8008c48:	bd70      	pop	{r4, r5, r6, pc}
 8008c4a:	f000 fd2f 	bl	80096ac <__malloc_lock>
 8008c4e:	4a21      	ldr	r2, [pc, #132]	; (8008cd4 <_malloc_r+0xac>)
 8008c50:	6814      	ldr	r4, [r2, #0]
 8008c52:	4621      	mov	r1, r4
 8008c54:	b991      	cbnz	r1, 8008c7c <_malloc_r+0x54>
 8008c56:	4c20      	ldr	r4, [pc, #128]	; (8008cd8 <_malloc_r+0xb0>)
 8008c58:	6823      	ldr	r3, [r4, #0]
 8008c5a:	b91b      	cbnz	r3, 8008c64 <_malloc_r+0x3c>
 8008c5c:	4630      	mov	r0, r6
 8008c5e:	f000 fc57 	bl	8009510 <_sbrk_r>
 8008c62:	6020      	str	r0, [r4, #0]
 8008c64:	4629      	mov	r1, r5
 8008c66:	4630      	mov	r0, r6
 8008c68:	f000 fc52 	bl	8009510 <_sbrk_r>
 8008c6c:	1c43      	adds	r3, r0, #1
 8008c6e:	d124      	bne.n	8008cba <_malloc_r+0x92>
 8008c70:	230c      	movs	r3, #12
 8008c72:	6033      	str	r3, [r6, #0]
 8008c74:	4630      	mov	r0, r6
 8008c76:	f000 fd1a 	bl	80096ae <__malloc_unlock>
 8008c7a:	e7e4      	b.n	8008c46 <_malloc_r+0x1e>
 8008c7c:	680b      	ldr	r3, [r1, #0]
 8008c7e:	1b5b      	subs	r3, r3, r5
 8008c80:	d418      	bmi.n	8008cb4 <_malloc_r+0x8c>
 8008c82:	2b0b      	cmp	r3, #11
 8008c84:	d90f      	bls.n	8008ca6 <_malloc_r+0x7e>
 8008c86:	600b      	str	r3, [r1, #0]
 8008c88:	50cd      	str	r5, [r1, r3]
 8008c8a:	18cc      	adds	r4, r1, r3
 8008c8c:	4630      	mov	r0, r6
 8008c8e:	f000 fd0e 	bl	80096ae <__malloc_unlock>
 8008c92:	f104 000b 	add.w	r0, r4, #11
 8008c96:	1d23      	adds	r3, r4, #4
 8008c98:	f020 0007 	bic.w	r0, r0, #7
 8008c9c:	1ac3      	subs	r3, r0, r3
 8008c9e:	d0d3      	beq.n	8008c48 <_malloc_r+0x20>
 8008ca0:	425a      	negs	r2, r3
 8008ca2:	50e2      	str	r2, [r4, r3]
 8008ca4:	e7d0      	b.n	8008c48 <_malloc_r+0x20>
 8008ca6:	428c      	cmp	r4, r1
 8008ca8:	684b      	ldr	r3, [r1, #4]
 8008caa:	bf16      	itet	ne
 8008cac:	6063      	strne	r3, [r4, #4]
 8008cae:	6013      	streq	r3, [r2, #0]
 8008cb0:	460c      	movne	r4, r1
 8008cb2:	e7eb      	b.n	8008c8c <_malloc_r+0x64>
 8008cb4:	460c      	mov	r4, r1
 8008cb6:	6849      	ldr	r1, [r1, #4]
 8008cb8:	e7cc      	b.n	8008c54 <_malloc_r+0x2c>
 8008cba:	1cc4      	adds	r4, r0, #3
 8008cbc:	f024 0403 	bic.w	r4, r4, #3
 8008cc0:	42a0      	cmp	r0, r4
 8008cc2:	d005      	beq.n	8008cd0 <_malloc_r+0xa8>
 8008cc4:	1a21      	subs	r1, r4, r0
 8008cc6:	4630      	mov	r0, r6
 8008cc8:	f000 fc22 	bl	8009510 <_sbrk_r>
 8008ccc:	3001      	adds	r0, #1
 8008cce:	d0cf      	beq.n	8008c70 <_malloc_r+0x48>
 8008cd0:	6025      	str	r5, [r4, #0]
 8008cd2:	e7db      	b.n	8008c8c <_malloc_r+0x64>
 8008cd4:	20000500 	.word	0x20000500
 8008cd8:	20000504 	.word	0x20000504

08008cdc <__ssputs_r>:
 8008cdc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008ce0:	688e      	ldr	r6, [r1, #8]
 8008ce2:	429e      	cmp	r6, r3
 8008ce4:	4682      	mov	sl, r0
 8008ce6:	460c      	mov	r4, r1
 8008ce8:	4690      	mov	r8, r2
 8008cea:	4699      	mov	r9, r3
 8008cec:	d837      	bhi.n	8008d5e <__ssputs_r+0x82>
 8008cee:	898a      	ldrh	r2, [r1, #12]
 8008cf0:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8008cf4:	d031      	beq.n	8008d5a <__ssputs_r+0x7e>
 8008cf6:	6825      	ldr	r5, [r4, #0]
 8008cf8:	6909      	ldr	r1, [r1, #16]
 8008cfa:	1a6f      	subs	r7, r5, r1
 8008cfc:	6965      	ldr	r5, [r4, #20]
 8008cfe:	2302      	movs	r3, #2
 8008d00:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8008d04:	fb95 f5f3 	sdiv	r5, r5, r3
 8008d08:	f109 0301 	add.w	r3, r9, #1
 8008d0c:	443b      	add	r3, r7
 8008d0e:	429d      	cmp	r5, r3
 8008d10:	bf38      	it	cc
 8008d12:	461d      	movcc	r5, r3
 8008d14:	0553      	lsls	r3, r2, #21
 8008d16:	d530      	bpl.n	8008d7a <__ssputs_r+0x9e>
 8008d18:	4629      	mov	r1, r5
 8008d1a:	f7ff ff85 	bl	8008c28 <_malloc_r>
 8008d1e:	4606      	mov	r6, r0
 8008d20:	b950      	cbnz	r0, 8008d38 <__ssputs_r+0x5c>
 8008d22:	230c      	movs	r3, #12
 8008d24:	f8ca 3000 	str.w	r3, [sl]
 8008d28:	89a3      	ldrh	r3, [r4, #12]
 8008d2a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008d2e:	81a3      	strh	r3, [r4, #12]
 8008d30:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8008d34:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008d38:	463a      	mov	r2, r7
 8008d3a:	6921      	ldr	r1, [r4, #16]
 8008d3c:	f000 fc92 	bl	8009664 <memcpy>
 8008d40:	89a3      	ldrh	r3, [r4, #12]
 8008d42:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8008d46:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008d4a:	81a3      	strh	r3, [r4, #12]
 8008d4c:	6126      	str	r6, [r4, #16]
 8008d4e:	6165      	str	r5, [r4, #20]
 8008d50:	443e      	add	r6, r7
 8008d52:	1bed      	subs	r5, r5, r7
 8008d54:	6026      	str	r6, [r4, #0]
 8008d56:	60a5      	str	r5, [r4, #8]
 8008d58:	464e      	mov	r6, r9
 8008d5a:	454e      	cmp	r6, r9
 8008d5c:	d900      	bls.n	8008d60 <__ssputs_r+0x84>
 8008d5e:	464e      	mov	r6, r9
 8008d60:	4632      	mov	r2, r6
 8008d62:	4641      	mov	r1, r8
 8008d64:	6820      	ldr	r0, [r4, #0]
 8008d66:	f000 fc88 	bl	800967a <memmove>
 8008d6a:	68a3      	ldr	r3, [r4, #8]
 8008d6c:	1b9b      	subs	r3, r3, r6
 8008d6e:	60a3      	str	r3, [r4, #8]
 8008d70:	6823      	ldr	r3, [r4, #0]
 8008d72:	441e      	add	r6, r3
 8008d74:	6026      	str	r6, [r4, #0]
 8008d76:	2000      	movs	r0, #0
 8008d78:	e7dc      	b.n	8008d34 <__ssputs_r+0x58>
 8008d7a:	462a      	mov	r2, r5
 8008d7c:	f000 fc98 	bl	80096b0 <_realloc_r>
 8008d80:	4606      	mov	r6, r0
 8008d82:	2800      	cmp	r0, #0
 8008d84:	d1e2      	bne.n	8008d4c <__ssputs_r+0x70>
 8008d86:	6921      	ldr	r1, [r4, #16]
 8008d88:	4650      	mov	r0, sl
 8008d8a:	f7ff feff 	bl	8008b8c <_free_r>
 8008d8e:	e7c8      	b.n	8008d22 <__ssputs_r+0x46>

08008d90 <_svfiprintf_r>:
 8008d90:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008d94:	461d      	mov	r5, r3
 8008d96:	898b      	ldrh	r3, [r1, #12]
 8008d98:	061f      	lsls	r7, r3, #24
 8008d9a:	b09d      	sub	sp, #116	; 0x74
 8008d9c:	4680      	mov	r8, r0
 8008d9e:	460c      	mov	r4, r1
 8008da0:	4616      	mov	r6, r2
 8008da2:	d50f      	bpl.n	8008dc4 <_svfiprintf_r+0x34>
 8008da4:	690b      	ldr	r3, [r1, #16]
 8008da6:	b96b      	cbnz	r3, 8008dc4 <_svfiprintf_r+0x34>
 8008da8:	2140      	movs	r1, #64	; 0x40
 8008daa:	f7ff ff3d 	bl	8008c28 <_malloc_r>
 8008dae:	6020      	str	r0, [r4, #0]
 8008db0:	6120      	str	r0, [r4, #16]
 8008db2:	b928      	cbnz	r0, 8008dc0 <_svfiprintf_r+0x30>
 8008db4:	230c      	movs	r3, #12
 8008db6:	f8c8 3000 	str.w	r3, [r8]
 8008dba:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8008dbe:	e0c8      	b.n	8008f52 <_svfiprintf_r+0x1c2>
 8008dc0:	2340      	movs	r3, #64	; 0x40
 8008dc2:	6163      	str	r3, [r4, #20]
 8008dc4:	2300      	movs	r3, #0
 8008dc6:	9309      	str	r3, [sp, #36]	; 0x24
 8008dc8:	2320      	movs	r3, #32
 8008dca:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8008dce:	2330      	movs	r3, #48	; 0x30
 8008dd0:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8008dd4:	9503      	str	r5, [sp, #12]
 8008dd6:	f04f 0b01 	mov.w	fp, #1
 8008dda:	4637      	mov	r7, r6
 8008ddc:	463d      	mov	r5, r7
 8008dde:	f815 3b01 	ldrb.w	r3, [r5], #1
 8008de2:	b10b      	cbz	r3, 8008de8 <_svfiprintf_r+0x58>
 8008de4:	2b25      	cmp	r3, #37	; 0x25
 8008de6:	d13e      	bne.n	8008e66 <_svfiprintf_r+0xd6>
 8008de8:	ebb7 0a06 	subs.w	sl, r7, r6
 8008dec:	d00b      	beq.n	8008e06 <_svfiprintf_r+0x76>
 8008dee:	4653      	mov	r3, sl
 8008df0:	4632      	mov	r2, r6
 8008df2:	4621      	mov	r1, r4
 8008df4:	4640      	mov	r0, r8
 8008df6:	f7ff ff71 	bl	8008cdc <__ssputs_r>
 8008dfa:	3001      	adds	r0, #1
 8008dfc:	f000 80a4 	beq.w	8008f48 <_svfiprintf_r+0x1b8>
 8008e00:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008e02:	4453      	add	r3, sl
 8008e04:	9309      	str	r3, [sp, #36]	; 0x24
 8008e06:	783b      	ldrb	r3, [r7, #0]
 8008e08:	2b00      	cmp	r3, #0
 8008e0a:	f000 809d 	beq.w	8008f48 <_svfiprintf_r+0x1b8>
 8008e0e:	2300      	movs	r3, #0
 8008e10:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8008e14:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8008e18:	9304      	str	r3, [sp, #16]
 8008e1a:	9307      	str	r3, [sp, #28]
 8008e1c:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8008e20:	931a      	str	r3, [sp, #104]	; 0x68
 8008e22:	462f      	mov	r7, r5
 8008e24:	2205      	movs	r2, #5
 8008e26:	f817 1b01 	ldrb.w	r1, [r7], #1
 8008e2a:	4850      	ldr	r0, [pc, #320]	; (8008f6c <_svfiprintf_r+0x1dc>)
 8008e2c:	f7f7 fa08 	bl	8000240 <memchr>
 8008e30:	9b04      	ldr	r3, [sp, #16]
 8008e32:	b9d0      	cbnz	r0, 8008e6a <_svfiprintf_r+0xda>
 8008e34:	06d9      	lsls	r1, r3, #27
 8008e36:	bf44      	itt	mi
 8008e38:	2220      	movmi	r2, #32
 8008e3a:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8008e3e:	071a      	lsls	r2, r3, #28
 8008e40:	bf44      	itt	mi
 8008e42:	222b      	movmi	r2, #43	; 0x2b
 8008e44:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8008e48:	782a      	ldrb	r2, [r5, #0]
 8008e4a:	2a2a      	cmp	r2, #42	; 0x2a
 8008e4c:	d015      	beq.n	8008e7a <_svfiprintf_r+0xea>
 8008e4e:	9a07      	ldr	r2, [sp, #28]
 8008e50:	462f      	mov	r7, r5
 8008e52:	2000      	movs	r0, #0
 8008e54:	250a      	movs	r5, #10
 8008e56:	4639      	mov	r1, r7
 8008e58:	f811 3b01 	ldrb.w	r3, [r1], #1
 8008e5c:	3b30      	subs	r3, #48	; 0x30
 8008e5e:	2b09      	cmp	r3, #9
 8008e60:	d94d      	bls.n	8008efe <_svfiprintf_r+0x16e>
 8008e62:	b1b8      	cbz	r0, 8008e94 <_svfiprintf_r+0x104>
 8008e64:	e00f      	b.n	8008e86 <_svfiprintf_r+0xf6>
 8008e66:	462f      	mov	r7, r5
 8008e68:	e7b8      	b.n	8008ddc <_svfiprintf_r+0x4c>
 8008e6a:	4a40      	ldr	r2, [pc, #256]	; (8008f6c <_svfiprintf_r+0x1dc>)
 8008e6c:	1a80      	subs	r0, r0, r2
 8008e6e:	fa0b f000 	lsl.w	r0, fp, r0
 8008e72:	4318      	orrs	r0, r3
 8008e74:	9004      	str	r0, [sp, #16]
 8008e76:	463d      	mov	r5, r7
 8008e78:	e7d3      	b.n	8008e22 <_svfiprintf_r+0x92>
 8008e7a:	9a03      	ldr	r2, [sp, #12]
 8008e7c:	1d11      	adds	r1, r2, #4
 8008e7e:	6812      	ldr	r2, [r2, #0]
 8008e80:	9103      	str	r1, [sp, #12]
 8008e82:	2a00      	cmp	r2, #0
 8008e84:	db01      	blt.n	8008e8a <_svfiprintf_r+0xfa>
 8008e86:	9207      	str	r2, [sp, #28]
 8008e88:	e004      	b.n	8008e94 <_svfiprintf_r+0x104>
 8008e8a:	4252      	negs	r2, r2
 8008e8c:	f043 0302 	orr.w	r3, r3, #2
 8008e90:	9207      	str	r2, [sp, #28]
 8008e92:	9304      	str	r3, [sp, #16]
 8008e94:	783b      	ldrb	r3, [r7, #0]
 8008e96:	2b2e      	cmp	r3, #46	; 0x2e
 8008e98:	d10c      	bne.n	8008eb4 <_svfiprintf_r+0x124>
 8008e9a:	787b      	ldrb	r3, [r7, #1]
 8008e9c:	2b2a      	cmp	r3, #42	; 0x2a
 8008e9e:	d133      	bne.n	8008f08 <_svfiprintf_r+0x178>
 8008ea0:	9b03      	ldr	r3, [sp, #12]
 8008ea2:	1d1a      	adds	r2, r3, #4
 8008ea4:	681b      	ldr	r3, [r3, #0]
 8008ea6:	9203      	str	r2, [sp, #12]
 8008ea8:	2b00      	cmp	r3, #0
 8008eaa:	bfb8      	it	lt
 8008eac:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 8008eb0:	3702      	adds	r7, #2
 8008eb2:	9305      	str	r3, [sp, #20]
 8008eb4:	4d2e      	ldr	r5, [pc, #184]	; (8008f70 <_svfiprintf_r+0x1e0>)
 8008eb6:	7839      	ldrb	r1, [r7, #0]
 8008eb8:	2203      	movs	r2, #3
 8008eba:	4628      	mov	r0, r5
 8008ebc:	f7f7 f9c0 	bl	8000240 <memchr>
 8008ec0:	b138      	cbz	r0, 8008ed2 <_svfiprintf_r+0x142>
 8008ec2:	2340      	movs	r3, #64	; 0x40
 8008ec4:	1b40      	subs	r0, r0, r5
 8008ec6:	fa03 f000 	lsl.w	r0, r3, r0
 8008eca:	9b04      	ldr	r3, [sp, #16]
 8008ecc:	4303      	orrs	r3, r0
 8008ece:	3701      	adds	r7, #1
 8008ed0:	9304      	str	r3, [sp, #16]
 8008ed2:	7839      	ldrb	r1, [r7, #0]
 8008ed4:	4827      	ldr	r0, [pc, #156]	; (8008f74 <_svfiprintf_r+0x1e4>)
 8008ed6:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8008eda:	2206      	movs	r2, #6
 8008edc:	1c7e      	adds	r6, r7, #1
 8008ede:	f7f7 f9af 	bl	8000240 <memchr>
 8008ee2:	2800      	cmp	r0, #0
 8008ee4:	d038      	beq.n	8008f58 <_svfiprintf_r+0x1c8>
 8008ee6:	4b24      	ldr	r3, [pc, #144]	; (8008f78 <_svfiprintf_r+0x1e8>)
 8008ee8:	bb13      	cbnz	r3, 8008f30 <_svfiprintf_r+0x1a0>
 8008eea:	9b03      	ldr	r3, [sp, #12]
 8008eec:	3307      	adds	r3, #7
 8008eee:	f023 0307 	bic.w	r3, r3, #7
 8008ef2:	3308      	adds	r3, #8
 8008ef4:	9303      	str	r3, [sp, #12]
 8008ef6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008ef8:	444b      	add	r3, r9
 8008efa:	9309      	str	r3, [sp, #36]	; 0x24
 8008efc:	e76d      	b.n	8008dda <_svfiprintf_r+0x4a>
 8008efe:	fb05 3202 	mla	r2, r5, r2, r3
 8008f02:	2001      	movs	r0, #1
 8008f04:	460f      	mov	r7, r1
 8008f06:	e7a6      	b.n	8008e56 <_svfiprintf_r+0xc6>
 8008f08:	2300      	movs	r3, #0
 8008f0a:	3701      	adds	r7, #1
 8008f0c:	9305      	str	r3, [sp, #20]
 8008f0e:	4619      	mov	r1, r3
 8008f10:	250a      	movs	r5, #10
 8008f12:	4638      	mov	r0, r7
 8008f14:	f810 2b01 	ldrb.w	r2, [r0], #1
 8008f18:	3a30      	subs	r2, #48	; 0x30
 8008f1a:	2a09      	cmp	r2, #9
 8008f1c:	d903      	bls.n	8008f26 <_svfiprintf_r+0x196>
 8008f1e:	2b00      	cmp	r3, #0
 8008f20:	d0c8      	beq.n	8008eb4 <_svfiprintf_r+0x124>
 8008f22:	9105      	str	r1, [sp, #20]
 8008f24:	e7c6      	b.n	8008eb4 <_svfiprintf_r+0x124>
 8008f26:	fb05 2101 	mla	r1, r5, r1, r2
 8008f2a:	2301      	movs	r3, #1
 8008f2c:	4607      	mov	r7, r0
 8008f2e:	e7f0      	b.n	8008f12 <_svfiprintf_r+0x182>
 8008f30:	ab03      	add	r3, sp, #12
 8008f32:	9300      	str	r3, [sp, #0]
 8008f34:	4622      	mov	r2, r4
 8008f36:	4b11      	ldr	r3, [pc, #68]	; (8008f7c <_svfiprintf_r+0x1ec>)
 8008f38:	a904      	add	r1, sp, #16
 8008f3a:	4640      	mov	r0, r8
 8008f3c:	f3af 8000 	nop.w
 8008f40:	f1b0 3fff 	cmp.w	r0, #4294967295	; 0xffffffff
 8008f44:	4681      	mov	r9, r0
 8008f46:	d1d6      	bne.n	8008ef6 <_svfiprintf_r+0x166>
 8008f48:	89a3      	ldrh	r3, [r4, #12]
 8008f4a:	065b      	lsls	r3, r3, #25
 8008f4c:	f53f af35 	bmi.w	8008dba <_svfiprintf_r+0x2a>
 8008f50:	9809      	ldr	r0, [sp, #36]	; 0x24
 8008f52:	b01d      	add	sp, #116	; 0x74
 8008f54:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008f58:	ab03      	add	r3, sp, #12
 8008f5a:	9300      	str	r3, [sp, #0]
 8008f5c:	4622      	mov	r2, r4
 8008f5e:	4b07      	ldr	r3, [pc, #28]	; (8008f7c <_svfiprintf_r+0x1ec>)
 8008f60:	a904      	add	r1, sp, #16
 8008f62:	4640      	mov	r0, r8
 8008f64:	f000 f9c2 	bl	80092ec <_printf_i>
 8008f68:	e7ea      	b.n	8008f40 <_svfiprintf_r+0x1b0>
 8008f6a:	bf00      	nop
 8008f6c:	08009ad0 	.word	0x08009ad0
 8008f70:	08009ad6 	.word	0x08009ad6
 8008f74:	08009ada 	.word	0x08009ada
 8008f78:	00000000 	.word	0x00000000
 8008f7c:	08008cdd 	.word	0x08008cdd

08008f80 <__sfputc_r>:
 8008f80:	6893      	ldr	r3, [r2, #8]
 8008f82:	3b01      	subs	r3, #1
 8008f84:	2b00      	cmp	r3, #0
 8008f86:	b410      	push	{r4}
 8008f88:	6093      	str	r3, [r2, #8]
 8008f8a:	da08      	bge.n	8008f9e <__sfputc_r+0x1e>
 8008f8c:	6994      	ldr	r4, [r2, #24]
 8008f8e:	42a3      	cmp	r3, r4
 8008f90:	db01      	blt.n	8008f96 <__sfputc_r+0x16>
 8008f92:	290a      	cmp	r1, #10
 8008f94:	d103      	bne.n	8008f9e <__sfputc_r+0x1e>
 8008f96:	f85d 4b04 	ldr.w	r4, [sp], #4
 8008f9a:	f7ff bb59 	b.w	8008650 <__swbuf_r>
 8008f9e:	6813      	ldr	r3, [r2, #0]
 8008fa0:	1c58      	adds	r0, r3, #1
 8008fa2:	6010      	str	r0, [r2, #0]
 8008fa4:	7019      	strb	r1, [r3, #0]
 8008fa6:	4608      	mov	r0, r1
 8008fa8:	f85d 4b04 	ldr.w	r4, [sp], #4
 8008fac:	4770      	bx	lr

08008fae <__sfputs_r>:
 8008fae:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008fb0:	4606      	mov	r6, r0
 8008fb2:	460f      	mov	r7, r1
 8008fb4:	4614      	mov	r4, r2
 8008fb6:	18d5      	adds	r5, r2, r3
 8008fb8:	42ac      	cmp	r4, r5
 8008fba:	d101      	bne.n	8008fc0 <__sfputs_r+0x12>
 8008fbc:	2000      	movs	r0, #0
 8008fbe:	e007      	b.n	8008fd0 <__sfputs_r+0x22>
 8008fc0:	463a      	mov	r2, r7
 8008fc2:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008fc6:	4630      	mov	r0, r6
 8008fc8:	f7ff ffda 	bl	8008f80 <__sfputc_r>
 8008fcc:	1c43      	adds	r3, r0, #1
 8008fce:	d1f3      	bne.n	8008fb8 <__sfputs_r+0xa>
 8008fd0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08008fd4 <_vfiprintf_r>:
 8008fd4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008fd8:	460c      	mov	r4, r1
 8008fda:	b09d      	sub	sp, #116	; 0x74
 8008fdc:	4617      	mov	r7, r2
 8008fde:	461d      	mov	r5, r3
 8008fe0:	4606      	mov	r6, r0
 8008fe2:	b118      	cbz	r0, 8008fec <_vfiprintf_r+0x18>
 8008fe4:	6983      	ldr	r3, [r0, #24]
 8008fe6:	b90b      	cbnz	r3, 8008fec <_vfiprintf_r+0x18>
 8008fe8:	f7ff fce2 	bl	80089b0 <__sinit>
 8008fec:	4b7c      	ldr	r3, [pc, #496]	; (80091e0 <_vfiprintf_r+0x20c>)
 8008fee:	429c      	cmp	r4, r3
 8008ff0:	d158      	bne.n	80090a4 <_vfiprintf_r+0xd0>
 8008ff2:	6874      	ldr	r4, [r6, #4]
 8008ff4:	89a3      	ldrh	r3, [r4, #12]
 8008ff6:	0718      	lsls	r0, r3, #28
 8008ff8:	d55e      	bpl.n	80090b8 <_vfiprintf_r+0xe4>
 8008ffa:	6923      	ldr	r3, [r4, #16]
 8008ffc:	2b00      	cmp	r3, #0
 8008ffe:	d05b      	beq.n	80090b8 <_vfiprintf_r+0xe4>
 8009000:	2300      	movs	r3, #0
 8009002:	9309      	str	r3, [sp, #36]	; 0x24
 8009004:	2320      	movs	r3, #32
 8009006:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800900a:	2330      	movs	r3, #48	; 0x30
 800900c:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8009010:	9503      	str	r5, [sp, #12]
 8009012:	f04f 0b01 	mov.w	fp, #1
 8009016:	46b8      	mov	r8, r7
 8009018:	4645      	mov	r5, r8
 800901a:	f815 3b01 	ldrb.w	r3, [r5], #1
 800901e:	b10b      	cbz	r3, 8009024 <_vfiprintf_r+0x50>
 8009020:	2b25      	cmp	r3, #37	; 0x25
 8009022:	d154      	bne.n	80090ce <_vfiprintf_r+0xfa>
 8009024:	ebb8 0a07 	subs.w	sl, r8, r7
 8009028:	d00b      	beq.n	8009042 <_vfiprintf_r+0x6e>
 800902a:	4653      	mov	r3, sl
 800902c:	463a      	mov	r2, r7
 800902e:	4621      	mov	r1, r4
 8009030:	4630      	mov	r0, r6
 8009032:	f7ff ffbc 	bl	8008fae <__sfputs_r>
 8009036:	3001      	adds	r0, #1
 8009038:	f000 80c2 	beq.w	80091c0 <_vfiprintf_r+0x1ec>
 800903c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800903e:	4453      	add	r3, sl
 8009040:	9309      	str	r3, [sp, #36]	; 0x24
 8009042:	f898 3000 	ldrb.w	r3, [r8]
 8009046:	2b00      	cmp	r3, #0
 8009048:	f000 80ba 	beq.w	80091c0 <_vfiprintf_r+0x1ec>
 800904c:	2300      	movs	r3, #0
 800904e:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8009052:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8009056:	9304      	str	r3, [sp, #16]
 8009058:	9307      	str	r3, [sp, #28]
 800905a:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800905e:	931a      	str	r3, [sp, #104]	; 0x68
 8009060:	46a8      	mov	r8, r5
 8009062:	2205      	movs	r2, #5
 8009064:	f818 1b01 	ldrb.w	r1, [r8], #1
 8009068:	485e      	ldr	r0, [pc, #376]	; (80091e4 <_vfiprintf_r+0x210>)
 800906a:	f7f7 f8e9 	bl	8000240 <memchr>
 800906e:	9b04      	ldr	r3, [sp, #16]
 8009070:	bb78      	cbnz	r0, 80090d2 <_vfiprintf_r+0xfe>
 8009072:	06d9      	lsls	r1, r3, #27
 8009074:	bf44      	itt	mi
 8009076:	2220      	movmi	r2, #32
 8009078:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 800907c:	071a      	lsls	r2, r3, #28
 800907e:	bf44      	itt	mi
 8009080:	222b      	movmi	r2, #43	; 0x2b
 8009082:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8009086:	782a      	ldrb	r2, [r5, #0]
 8009088:	2a2a      	cmp	r2, #42	; 0x2a
 800908a:	d02a      	beq.n	80090e2 <_vfiprintf_r+0x10e>
 800908c:	9a07      	ldr	r2, [sp, #28]
 800908e:	46a8      	mov	r8, r5
 8009090:	2000      	movs	r0, #0
 8009092:	250a      	movs	r5, #10
 8009094:	4641      	mov	r1, r8
 8009096:	f811 3b01 	ldrb.w	r3, [r1], #1
 800909a:	3b30      	subs	r3, #48	; 0x30
 800909c:	2b09      	cmp	r3, #9
 800909e:	d969      	bls.n	8009174 <_vfiprintf_r+0x1a0>
 80090a0:	b360      	cbz	r0, 80090fc <_vfiprintf_r+0x128>
 80090a2:	e024      	b.n	80090ee <_vfiprintf_r+0x11a>
 80090a4:	4b50      	ldr	r3, [pc, #320]	; (80091e8 <_vfiprintf_r+0x214>)
 80090a6:	429c      	cmp	r4, r3
 80090a8:	d101      	bne.n	80090ae <_vfiprintf_r+0xda>
 80090aa:	68b4      	ldr	r4, [r6, #8]
 80090ac:	e7a2      	b.n	8008ff4 <_vfiprintf_r+0x20>
 80090ae:	4b4f      	ldr	r3, [pc, #316]	; (80091ec <_vfiprintf_r+0x218>)
 80090b0:	429c      	cmp	r4, r3
 80090b2:	bf08      	it	eq
 80090b4:	68f4      	ldreq	r4, [r6, #12]
 80090b6:	e79d      	b.n	8008ff4 <_vfiprintf_r+0x20>
 80090b8:	4621      	mov	r1, r4
 80090ba:	4630      	mov	r0, r6
 80090bc:	f7ff fb1a 	bl	80086f4 <__swsetup_r>
 80090c0:	2800      	cmp	r0, #0
 80090c2:	d09d      	beq.n	8009000 <_vfiprintf_r+0x2c>
 80090c4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80090c8:	b01d      	add	sp, #116	; 0x74
 80090ca:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80090ce:	46a8      	mov	r8, r5
 80090d0:	e7a2      	b.n	8009018 <_vfiprintf_r+0x44>
 80090d2:	4a44      	ldr	r2, [pc, #272]	; (80091e4 <_vfiprintf_r+0x210>)
 80090d4:	1a80      	subs	r0, r0, r2
 80090d6:	fa0b f000 	lsl.w	r0, fp, r0
 80090da:	4318      	orrs	r0, r3
 80090dc:	9004      	str	r0, [sp, #16]
 80090de:	4645      	mov	r5, r8
 80090e0:	e7be      	b.n	8009060 <_vfiprintf_r+0x8c>
 80090e2:	9a03      	ldr	r2, [sp, #12]
 80090e4:	1d11      	adds	r1, r2, #4
 80090e6:	6812      	ldr	r2, [r2, #0]
 80090e8:	9103      	str	r1, [sp, #12]
 80090ea:	2a00      	cmp	r2, #0
 80090ec:	db01      	blt.n	80090f2 <_vfiprintf_r+0x11e>
 80090ee:	9207      	str	r2, [sp, #28]
 80090f0:	e004      	b.n	80090fc <_vfiprintf_r+0x128>
 80090f2:	4252      	negs	r2, r2
 80090f4:	f043 0302 	orr.w	r3, r3, #2
 80090f8:	9207      	str	r2, [sp, #28]
 80090fa:	9304      	str	r3, [sp, #16]
 80090fc:	f898 3000 	ldrb.w	r3, [r8]
 8009100:	2b2e      	cmp	r3, #46	; 0x2e
 8009102:	d10e      	bne.n	8009122 <_vfiprintf_r+0x14e>
 8009104:	f898 3001 	ldrb.w	r3, [r8, #1]
 8009108:	2b2a      	cmp	r3, #42	; 0x2a
 800910a:	d138      	bne.n	800917e <_vfiprintf_r+0x1aa>
 800910c:	9b03      	ldr	r3, [sp, #12]
 800910e:	1d1a      	adds	r2, r3, #4
 8009110:	681b      	ldr	r3, [r3, #0]
 8009112:	9203      	str	r2, [sp, #12]
 8009114:	2b00      	cmp	r3, #0
 8009116:	bfb8      	it	lt
 8009118:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 800911c:	f108 0802 	add.w	r8, r8, #2
 8009120:	9305      	str	r3, [sp, #20]
 8009122:	4d33      	ldr	r5, [pc, #204]	; (80091f0 <_vfiprintf_r+0x21c>)
 8009124:	f898 1000 	ldrb.w	r1, [r8]
 8009128:	2203      	movs	r2, #3
 800912a:	4628      	mov	r0, r5
 800912c:	f7f7 f888 	bl	8000240 <memchr>
 8009130:	b140      	cbz	r0, 8009144 <_vfiprintf_r+0x170>
 8009132:	2340      	movs	r3, #64	; 0x40
 8009134:	1b40      	subs	r0, r0, r5
 8009136:	fa03 f000 	lsl.w	r0, r3, r0
 800913a:	9b04      	ldr	r3, [sp, #16]
 800913c:	4303      	orrs	r3, r0
 800913e:	f108 0801 	add.w	r8, r8, #1
 8009142:	9304      	str	r3, [sp, #16]
 8009144:	f898 1000 	ldrb.w	r1, [r8]
 8009148:	482a      	ldr	r0, [pc, #168]	; (80091f4 <_vfiprintf_r+0x220>)
 800914a:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800914e:	2206      	movs	r2, #6
 8009150:	f108 0701 	add.w	r7, r8, #1
 8009154:	f7f7 f874 	bl	8000240 <memchr>
 8009158:	2800      	cmp	r0, #0
 800915a:	d037      	beq.n	80091cc <_vfiprintf_r+0x1f8>
 800915c:	4b26      	ldr	r3, [pc, #152]	; (80091f8 <_vfiprintf_r+0x224>)
 800915e:	bb1b      	cbnz	r3, 80091a8 <_vfiprintf_r+0x1d4>
 8009160:	9b03      	ldr	r3, [sp, #12]
 8009162:	3307      	adds	r3, #7
 8009164:	f023 0307 	bic.w	r3, r3, #7
 8009168:	3308      	adds	r3, #8
 800916a:	9303      	str	r3, [sp, #12]
 800916c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800916e:	444b      	add	r3, r9
 8009170:	9309      	str	r3, [sp, #36]	; 0x24
 8009172:	e750      	b.n	8009016 <_vfiprintf_r+0x42>
 8009174:	fb05 3202 	mla	r2, r5, r2, r3
 8009178:	2001      	movs	r0, #1
 800917a:	4688      	mov	r8, r1
 800917c:	e78a      	b.n	8009094 <_vfiprintf_r+0xc0>
 800917e:	2300      	movs	r3, #0
 8009180:	f108 0801 	add.w	r8, r8, #1
 8009184:	9305      	str	r3, [sp, #20]
 8009186:	4619      	mov	r1, r3
 8009188:	250a      	movs	r5, #10
 800918a:	4640      	mov	r0, r8
 800918c:	f810 2b01 	ldrb.w	r2, [r0], #1
 8009190:	3a30      	subs	r2, #48	; 0x30
 8009192:	2a09      	cmp	r2, #9
 8009194:	d903      	bls.n	800919e <_vfiprintf_r+0x1ca>
 8009196:	2b00      	cmp	r3, #0
 8009198:	d0c3      	beq.n	8009122 <_vfiprintf_r+0x14e>
 800919a:	9105      	str	r1, [sp, #20]
 800919c:	e7c1      	b.n	8009122 <_vfiprintf_r+0x14e>
 800919e:	fb05 2101 	mla	r1, r5, r1, r2
 80091a2:	2301      	movs	r3, #1
 80091a4:	4680      	mov	r8, r0
 80091a6:	e7f0      	b.n	800918a <_vfiprintf_r+0x1b6>
 80091a8:	ab03      	add	r3, sp, #12
 80091aa:	9300      	str	r3, [sp, #0]
 80091ac:	4622      	mov	r2, r4
 80091ae:	4b13      	ldr	r3, [pc, #76]	; (80091fc <_vfiprintf_r+0x228>)
 80091b0:	a904      	add	r1, sp, #16
 80091b2:	4630      	mov	r0, r6
 80091b4:	f3af 8000 	nop.w
 80091b8:	f1b0 3fff 	cmp.w	r0, #4294967295	; 0xffffffff
 80091bc:	4681      	mov	r9, r0
 80091be:	d1d5      	bne.n	800916c <_vfiprintf_r+0x198>
 80091c0:	89a3      	ldrh	r3, [r4, #12]
 80091c2:	065b      	lsls	r3, r3, #25
 80091c4:	f53f af7e 	bmi.w	80090c4 <_vfiprintf_r+0xf0>
 80091c8:	9809      	ldr	r0, [sp, #36]	; 0x24
 80091ca:	e77d      	b.n	80090c8 <_vfiprintf_r+0xf4>
 80091cc:	ab03      	add	r3, sp, #12
 80091ce:	9300      	str	r3, [sp, #0]
 80091d0:	4622      	mov	r2, r4
 80091d2:	4b0a      	ldr	r3, [pc, #40]	; (80091fc <_vfiprintf_r+0x228>)
 80091d4:	a904      	add	r1, sp, #16
 80091d6:	4630      	mov	r0, r6
 80091d8:	f000 f888 	bl	80092ec <_printf_i>
 80091dc:	e7ec      	b.n	80091b8 <_vfiprintf_r+0x1e4>
 80091de:	bf00      	nop
 80091e0:	08009a90 	.word	0x08009a90
 80091e4:	08009ad0 	.word	0x08009ad0
 80091e8:	08009ab0 	.word	0x08009ab0
 80091ec:	08009a70 	.word	0x08009a70
 80091f0:	08009ad6 	.word	0x08009ad6
 80091f4:	08009ada 	.word	0x08009ada
 80091f8:	00000000 	.word	0x00000000
 80091fc:	08008faf 	.word	0x08008faf

08009200 <_printf_common>:
 8009200:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009204:	4691      	mov	r9, r2
 8009206:	461f      	mov	r7, r3
 8009208:	688a      	ldr	r2, [r1, #8]
 800920a:	690b      	ldr	r3, [r1, #16]
 800920c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8009210:	4293      	cmp	r3, r2
 8009212:	bfb8      	it	lt
 8009214:	4613      	movlt	r3, r2
 8009216:	f8c9 3000 	str.w	r3, [r9]
 800921a:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800921e:	4606      	mov	r6, r0
 8009220:	460c      	mov	r4, r1
 8009222:	b112      	cbz	r2, 800922a <_printf_common+0x2a>
 8009224:	3301      	adds	r3, #1
 8009226:	f8c9 3000 	str.w	r3, [r9]
 800922a:	6823      	ldr	r3, [r4, #0]
 800922c:	0699      	lsls	r1, r3, #26
 800922e:	bf42      	ittt	mi
 8009230:	f8d9 3000 	ldrmi.w	r3, [r9]
 8009234:	3302      	addmi	r3, #2
 8009236:	f8c9 3000 	strmi.w	r3, [r9]
 800923a:	6825      	ldr	r5, [r4, #0]
 800923c:	f015 0506 	ands.w	r5, r5, #6
 8009240:	d107      	bne.n	8009252 <_printf_common+0x52>
 8009242:	f104 0a19 	add.w	sl, r4, #25
 8009246:	68e3      	ldr	r3, [r4, #12]
 8009248:	f8d9 2000 	ldr.w	r2, [r9]
 800924c:	1a9b      	subs	r3, r3, r2
 800924e:	42ab      	cmp	r3, r5
 8009250:	dc28      	bgt.n	80092a4 <_printf_common+0xa4>
 8009252:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 8009256:	6822      	ldr	r2, [r4, #0]
 8009258:	3300      	adds	r3, #0
 800925a:	bf18      	it	ne
 800925c:	2301      	movne	r3, #1
 800925e:	0692      	lsls	r2, r2, #26
 8009260:	d42d      	bmi.n	80092be <_printf_common+0xbe>
 8009262:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8009266:	4639      	mov	r1, r7
 8009268:	4630      	mov	r0, r6
 800926a:	47c0      	blx	r8
 800926c:	3001      	adds	r0, #1
 800926e:	d020      	beq.n	80092b2 <_printf_common+0xb2>
 8009270:	6823      	ldr	r3, [r4, #0]
 8009272:	68e5      	ldr	r5, [r4, #12]
 8009274:	f8d9 2000 	ldr.w	r2, [r9]
 8009278:	f003 0306 	and.w	r3, r3, #6
 800927c:	2b04      	cmp	r3, #4
 800927e:	bf08      	it	eq
 8009280:	1aad      	subeq	r5, r5, r2
 8009282:	68a3      	ldr	r3, [r4, #8]
 8009284:	6922      	ldr	r2, [r4, #16]
 8009286:	bf0c      	ite	eq
 8009288:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800928c:	2500      	movne	r5, #0
 800928e:	4293      	cmp	r3, r2
 8009290:	bfc4      	itt	gt
 8009292:	1a9b      	subgt	r3, r3, r2
 8009294:	18ed      	addgt	r5, r5, r3
 8009296:	f04f 0900 	mov.w	r9, #0
 800929a:	341a      	adds	r4, #26
 800929c:	454d      	cmp	r5, r9
 800929e:	d11a      	bne.n	80092d6 <_printf_common+0xd6>
 80092a0:	2000      	movs	r0, #0
 80092a2:	e008      	b.n	80092b6 <_printf_common+0xb6>
 80092a4:	2301      	movs	r3, #1
 80092a6:	4652      	mov	r2, sl
 80092a8:	4639      	mov	r1, r7
 80092aa:	4630      	mov	r0, r6
 80092ac:	47c0      	blx	r8
 80092ae:	3001      	adds	r0, #1
 80092b0:	d103      	bne.n	80092ba <_printf_common+0xba>
 80092b2:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80092b6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80092ba:	3501      	adds	r5, #1
 80092bc:	e7c3      	b.n	8009246 <_printf_common+0x46>
 80092be:	18e1      	adds	r1, r4, r3
 80092c0:	1c5a      	adds	r2, r3, #1
 80092c2:	2030      	movs	r0, #48	; 0x30
 80092c4:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80092c8:	4422      	add	r2, r4
 80092ca:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80092ce:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80092d2:	3302      	adds	r3, #2
 80092d4:	e7c5      	b.n	8009262 <_printf_common+0x62>
 80092d6:	2301      	movs	r3, #1
 80092d8:	4622      	mov	r2, r4
 80092da:	4639      	mov	r1, r7
 80092dc:	4630      	mov	r0, r6
 80092de:	47c0      	blx	r8
 80092e0:	3001      	adds	r0, #1
 80092e2:	d0e6      	beq.n	80092b2 <_printf_common+0xb2>
 80092e4:	f109 0901 	add.w	r9, r9, #1
 80092e8:	e7d8      	b.n	800929c <_printf_common+0x9c>
	...

080092ec <_printf_i>:
 80092ec:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80092f0:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 80092f4:	460c      	mov	r4, r1
 80092f6:	7e09      	ldrb	r1, [r1, #24]
 80092f8:	b085      	sub	sp, #20
 80092fa:	296e      	cmp	r1, #110	; 0x6e
 80092fc:	4617      	mov	r7, r2
 80092fe:	4606      	mov	r6, r0
 8009300:	4698      	mov	r8, r3
 8009302:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8009304:	f000 80b3 	beq.w	800946e <_printf_i+0x182>
 8009308:	d822      	bhi.n	8009350 <_printf_i+0x64>
 800930a:	2963      	cmp	r1, #99	; 0x63
 800930c:	d036      	beq.n	800937c <_printf_i+0x90>
 800930e:	d80a      	bhi.n	8009326 <_printf_i+0x3a>
 8009310:	2900      	cmp	r1, #0
 8009312:	f000 80b9 	beq.w	8009488 <_printf_i+0x19c>
 8009316:	2958      	cmp	r1, #88	; 0x58
 8009318:	f000 8083 	beq.w	8009422 <_printf_i+0x136>
 800931c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8009320:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 8009324:	e032      	b.n	800938c <_printf_i+0xa0>
 8009326:	2964      	cmp	r1, #100	; 0x64
 8009328:	d001      	beq.n	800932e <_printf_i+0x42>
 800932a:	2969      	cmp	r1, #105	; 0x69
 800932c:	d1f6      	bne.n	800931c <_printf_i+0x30>
 800932e:	6820      	ldr	r0, [r4, #0]
 8009330:	6813      	ldr	r3, [r2, #0]
 8009332:	0605      	lsls	r5, r0, #24
 8009334:	f103 0104 	add.w	r1, r3, #4
 8009338:	d52a      	bpl.n	8009390 <_printf_i+0xa4>
 800933a:	681b      	ldr	r3, [r3, #0]
 800933c:	6011      	str	r1, [r2, #0]
 800933e:	2b00      	cmp	r3, #0
 8009340:	da03      	bge.n	800934a <_printf_i+0x5e>
 8009342:	222d      	movs	r2, #45	; 0x2d
 8009344:	425b      	negs	r3, r3
 8009346:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 800934a:	486f      	ldr	r0, [pc, #444]	; (8009508 <_printf_i+0x21c>)
 800934c:	220a      	movs	r2, #10
 800934e:	e039      	b.n	80093c4 <_printf_i+0xd8>
 8009350:	2973      	cmp	r1, #115	; 0x73
 8009352:	f000 809d 	beq.w	8009490 <_printf_i+0x1a4>
 8009356:	d808      	bhi.n	800936a <_printf_i+0x7e>
 8009358:	296f      	cmp	r1, #111	; 0x6f
 800935a:	d020      	beq.n	800939e <_printf_i+0xb2>
 800935c:	2970      	cmp	r1, #112	; 0x70
 800935e:	d1dd      	bne.n	800931c <_printf_i+0x30>
 8009360:	6823      	ldr	r3, [r4, #0]
 8009362:	f043 0320 	orr.w	r3, r3, #32
 8009366:	6023      	str	r3, [r4, #0]
 8009368:	e003      	b.n	8009372 <_printf_i+0x86>
 800936a:	2975      	cmp	r1, #117	; 0x75
 800936c:	d017      	beq.n	800939e <_printf_i+0xb2>
 800936e:	2978      	cmp	r1, #120	; 0x78
 8009370:	d1d4      	bne.n	800931c <_printf_i+0x30>
 8009372:	2378      	movs	r3, #120	; 0x78
 8009374:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8009378:	4864      	ldr	r0, [pc, #400]	; (800950c <_printf_i+0x220>)
 800937a:	e055      	b.n	8009428 <_printf_i+0x13c>
 800937c:	6813      	ldr	r3, [r2, #0]
 800937e:	1d19      	adds	r1, r3, #4
 8009380:	681b      	ldr	r3, [r3, #0]
 8009382:	6011      	str	r1, [r2, #0]
 8009384:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8009388:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800938c:	2301      	movs	r3, #1
 800938e:	e08c      	b.n	80094aa <_printf_i+0x1be>
 8009390:	681b      	ldr	r3, [r3, #0]
 8009392:	6011      	str	r1, [r2, #0]
 8009394:	f010 0f40 	tst.w	r0, #64	; 0x40
 8009398:	bf18      	it	ne
 800939a:	b21b      	sxthne	r3, r3
 800939c:	e7cf      	b.n	800933e <_printf_i+0x52>
 800939e:	6813      	ldr	r3, [r2, #0]
 80093a0:	6825      	ldr	r5, [r4, #0]
 80093a2:	1d18      	adds	r0, r3, #4
 80093a4:	6010      	str	r0, [r2, #0]
 80093a6:	0628      	lsls	r0, r5, #24
 80093a8:	d501      	bpl.n	80093ae <_printf_i+0xc2>
 80093aa:	681b      	ldr	r3, [r3, #0]
 80093ac:	e002      	b.n	80093b4 <_printf_i+0xc8>
 80093ae:	0668      	lsls	r0, r5, #25
 80093b0:	d5fb      	bpl.n	80093aa <_printf_i+0xbe>
 80093b2:	881b      	ldrh	r3, [r3, #0]
 80093b4:	4854      	ldr	r0, [pc, #336]	; (8009508 <_printf_i+0x21c>)
 80093b6:	296f      	cmp	r1, #111	; 0x6f
 80093b8:	bf14      	ite	ne
 80093ba:	220a      	movne	r2, #10
 80093bc:	2208      	moveq	r2, #8
 80093be:	2100      	movs	r1, #0
 80093c0:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80093c4:	6865      	ldr	r5, [r4, #4]
 80093c6:	60a5      	str	r5, [r4, #8]
 80093c8:	2d00      	cmp	r5, #0
 80093ca:	f2c0 8095 	blt.w	80094f8 <_printf_i+0x20c>
 80093ce:	6821      	ldr	r1, [r4, #0]
 80093d0:	f021 0104 	bic.w	r1, r1, #4
 80093d4:	6021      	str	r1, [r4, #0]
 80093d6:	2b00      	cmp	r3, #0
 80093d8:	d13d      	bne.n	8009456 <_printf_i+0x16a>
 80093da:	2d00      	cmp	r5, #0
 80093dc:	f040 808e 	bne.w	80094fc <_printf_i+0x210>
 80093e0:	4665      	mov	r5, ip
 80093e2:	2a08      	cmp	r2, #8
 80093e4:	d10b      	bne.n	80093fe <_printf_i+0x112>
 80093e6:	6823      	ldr	r3, [r4, #0]
 80093e8:	07db      	lsls	r3, r3, #31
 80093ea:	d508      	bpl.n	80093fe <_printf_i+0x112>
 80093ec:	6923      	ldr	r3, [r4, #16]
 80093ee:	6862      	ldr	r2, [r4, #4]
 80093f0:	429a      	cmp	r2, r3
 80093f2:	bfde      	ittt	le
 80093f4:	2330      	movle	r3, #48	; 0x30
 80093f6:	f805 3c01 	strble.w	r3, [r5, #-1]
 80093fa:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 80093fe:	ebac 0305 	sub.w	r3, ip, r5
 8009402:	6123      	str	r3, [r4, #16]
 8009404:	f8cd 8000 	str.w	r8, [sp]
 8009408:	463b      	mov	r3, r7
 800940a:	aa03      	add	r2, sp, #12
 800940c:	4621      	mov	r1, r4
 800940e:	4630      	mov	r0, r6
 8009410:	f7ff fef6 	bl	8009200 <_printf_common>
 8009414:	3001      	adds	r0, #1
 8009416:	d14d      	bne.n	80094b4 <_printf_i+0x1c8>
 8009418:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800941c:	b005      	add	sp, #20
 800941e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8009422:	4839      	ldr	r0, [pc, #228]	; (8009508 <_printf_i+0x21c>)
 8009424:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 8009428:	6813      	ldr	r3, [r2, #0]
 800942a:	6821      	ldr	r1, [r4, #0]
 800942c:	1d1d      	adds	r5, r3, #4
 800942e:	681b      	ldr	r3, [r3, #0]
 8009430:	6015      	str	r5, [r2, #0]
 8009432:	060a      	lsls	r2, r1, #24
 8009434:	d50b      	bpl.n	800944e <_printf_i+0x162>
 8009436:	07ca      	lsls	r2, r1, #31
 8009438:	bf44      	itt	mi
 800943a:	f041 0120 	orrmi.w	r1, r1, #32
 800943e:	6021      	strmi	r1, [r4, #0]
 8009440:	b91b      	cbnz	r3, 800944a <_printf_i+0x15e>
 8009442:	6822      	ldr	r2, [r4, #0]
 8009444:	f022 0220 	bic.w	r2, r2, #32
 8009448:	6022      	str	r2, [r4, #0]
 800944a:	2210      	movs	r2, #16
 800944c:	e7b7      	b.n	80093be <_printf_i+0xd2>
 800944e:	064d      	lsls	r5, r1, #25
 8009450:	bf48      	it	mi
 8009452:	b29b      	uxthmi	r3, r3
 8009454:	e7ef      	b.n	8009436 <_printf_i+0x14a>
 8009456:	4665      	mov	r5, ip
 8009458:	fbb3 f1f2 	udiv	r1, r3, r2
 800945c:	fb02 3311 	mls	r3, r2, r1, r3
 8009460:	5cc3      	ldrb	r3, [r0, r3]
 8009462:	f805 3d01 	strb.w	r3, [r5, #-1]!
 8009466:	460b      	mov	r3, r1
 8009468:	2900      	cmp	r1, #0
 800946a:	d1f5      	bne.n	8009458 <_printf_i+0x16c>
 800946c:	e7b9      	b.n	80093e2 <_printf_i+0xf6>
 800946e:	6813      	ldr	r3, [r2, #0]
 8009470:	6825      	ldr	r5, [r4, #0]
 8009472:	6961      	ldr	r1, [r4, #20]
 8009474:	1d18      	adds	r0, r3, #4
 8009476:	6010      	str	r0, [r2, #0]
 8009478:	0628      	lsls	r0, r5, #24
 800947a:	681b      	ldr	r3, [r3, #0]
 800947c:	d501      	bpl.n	8009482 <_printf_i+0x196>
 800947e:	6019      	str	r1, [r3, #0]
 8009480:	e002      	b.n	8009488 <_printf_i+0x19c>
 8009482:	066a      	lsls	r2, r5, #25
 8009484:	d5fb      	bpl.n	800947e <_printf_i+0x192>
 8009486:	8019      	strh	r1, [r3, #0]
 8009488:	2300      	movs	r3, #0
 800948a:	6123      	str	r3, [r4, #16]
 800948c:	4665      	mov	r5, ip
 800948e:	e7b9      	b.n	8009404 <_printf_i+0x118>
 8009490:	6813      	ldr	r3, [r2, #0]
 8009492:	1d19      	adds	r1, r3, #4
 8009494:	6011      	str	r1, [r2, #0]
 8009496:	681d      	ldr	r5, [r3, #0]
 8009498:	6862      	ldr	r2, [r4, #4]
 800949a:	2100      	movs	r1, #0
 800949c:	4628      	mov	r0, r5
 800949e:	f7f6 fecf 	bl	8000240 <memchr>
 80094a2:	b108      	cbz	r0, 80094a8 <_printf_i+0x1bc>
 80094a4:	1b40      	subs	r0, r0, r5
 80094a6:	6060      	str	r0, [r4, #4]
 80094a8:	6863      	ldr	r3, [r4, #4]
 80094aa:	6123      	str	r3, [r4, #16]
 80094ac:	2300      	movs	r3, #0
 80094ae:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80094b2:	e7a7      	b.n	8009404 <_printf_i+0x118>
 80094b4:	6923      	ldr	r3, [r4, #16]
 80094b6:	462a      	mov	r2, r5
 80094b8:	4639      	mov	r1, r7
 80094ba:	4630      	mov	r0, r6
 80094bc:	47c0      	blx	r8
 80094be:	3001      	adds	r0, #1
 80094c0:	d0aa      	beq.n	8009418 <_printf_i+0x12c>
 80094c2:	6823      	ldr	r3, [r4, #0]
 80094c4:	079b      	lsls	r3, r3, #30
 80094c6:	d413      	bmi.n	80094f0 <_printf_i+0x204>
 80094c8:	68e0      	ldr	r0, [r4, #12]
 80094ca:	9b03      	ldr	r3, [sp, #12]
 80094cc:	4298      	cmp	r0, r3
 80094ce:	bfb8      	it	lt
 80094d0:	4618      	movlt	r0, r3
 80094d2:	e7a3      	b.n	800941c <_printf_i+0x130>
 80094d4:	2301      	movs	r3, #1
 80094d6:	464a      	mov	r2, r9
 80094d8:	4639      	mov	r1, r7
 80094da:	4630      	mov	r0, r6
 80094dc:	47c0      	blx	r8
 80094de:	3001      	adds	r0, #1
 80094e0:	d09a      	beq.n	8009418 <_printf_i+0x12c>
 80094e2:	3501      	adds	r5, #1
 80094e4:	68e3      	ldr	r3, [r4, #12]
 80094e6:	9a03      	ldr	r2, [sp, #12]
 80094e8:	1a9b      	subs	r3, r3, r2
 80094ea:	42ab      	cmp	r3, r5
 80094ec:	dcf2      	bgt.n	80094d4 <_printf_i+0x1e8>
 80094ee:	e7eb      	b.n	80094c8 <_printf_i+0x1dc>
 80094f0:	2500      	movs	r5, #0
 80094f2:	f104 0919 	add.w	r9, r4, #25
 80094f6:	e7f5      	b.n	80094e4 <_printf_i+0x1f8>
 80094f8:	2b00      	cmp	r3, #0
 80094fa:	d1ac      	bne.n	8009456 <_printf_i+0x16a>
 80094fc:	7803      	ldrb	r3, [r0, #0]
 80094fe:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8009502:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8009506:	e76c      	b.n	80093e2 <_printf_i+0xf6>
 8009508:	08009ae1 	.word	0x08009ae1
 800950c:	08009af2 	.word	0x08009af2

08009510 <_sbrk_r>:
 8009510:	b538      	push	{r3, r4, r5, lr}
 8009512:	4c06      	ldr	r4, [pc, #24]	; (800952c <_sbrk_r+0x1c>)
 8009514:	2300      	movs	r3, #0
 8009516:	4605      	mov	r5, r0
 8009518:	4608      	mov	r0, r1
 800951a:	6023      	str	r3, [r4, #0]
 800951c:	f7f8 f9f0 	bl	8001900 <_sbrk>
 8009520:	1c43      	adds	r3, r0, #1
 8009522:	d102      	bne.n	800952a <_sbrk_r+0x1a>
 8009524:	6823      	ldr	r3, [r4, #0]
 8009526:	b103      	cbz	r3, 800952a <_sbrk_r+0x1a>
 8009528:	602b      	str	r3, [r5, #0]
 800952a:	bd38      	pop	{r3, r4, r5, pc}
 800952c:	2000097c 	.word	0x2000097c

08009530 <__sread>:
 8009530:	b510      	push	{r4, lr}
 8009532:	460c      	mov	r4, r1
 8009534:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009538:	f000 f8e0 	bl	80096fc <_read_r>
 800953c:	2800      	cmp	r0, #0
 800953e:	bfab      	itete	ge
 8009540:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8009542:	89a3      	ldrhlt	r3, [r4, #12]
 8009544:	181b      	addge	r3, r3, r0
 8009546:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800954a:	bfac      	ite	ge
 800954c:	6563      	strge	r3, [r4, #84]	; 0x54
 800954e:	81a3      	strhlt	r3, [r4, #12]
 8009550:	bd10      	pop	{r4, pc}

08009552 <__swrite>:
 8009552:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009556:	461f      	mov	r7, r3
 8009558:	898b      	ldrh	r3, [r1, #12]
 800955a:	05db      	lsls	r3, r3, #23
 800955c:	4605      	mov	r5, r0
 800955e:	460c      	mov	r4, r1
 8009560:	4616      	mov	r6, r2
 8009562:	d505      	bpl.n	8009570 <__swrite+0x1e>
 8009564:	2302      	movs	r3, #2
 8009566:	2200      	movs	r2, #0
 8009568:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800956c:	f000 f868 	bl	8009640 <_lseek_r>
 8009570:	89a3      	ldrh	r3, [r4, #12]
 8009572:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8009576:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800957a:	81a3      	strh	r3, [r4, #12]
 800957c:	4632      	mov	r2, r6
 800957e:	463b      	mov	r3, r7
 8009580:	4628      	mov	r0, r5
 8009582:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8009586:	f000 b817 	b.w	80095b8 <_write_r>

0800958a <__sseek>:
 800958a:	b510      	push	{r4, lr}
 800958c:	460c      	mov	r4, r1
 800958e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009592:	f000 f855 	bl	8009640 <_lseek_r>
 8009596:	1c43      	adds	r3, r0, #1
 8009598:	89a3      	ldrh	r3, [r4, #12]
 800959a:	bf15      	itete	ne
 800959c:	6560      	strne	r0, [r4, #84]	; 0x54
 800959e:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 80095a2:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 80095a6:	81a3      	strheq	r3, [r4, #12]
 80095a8:	bf18      	it	ne
 80095aa:	81a3      	strhne	r3, [r4, #12]
 80095ac:	bd10      	pop	{r4, pc}

080095ae <__sclose>:
 80095ae:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80095b2:	f000 b813 	b.w	80095dc <_close_r>
	...

080095b8 <_write_r>:
 80095b8:	b538      	push	{r3, r4, r5, lr}
 80095ba:	4c07      	ldr	r4, [pc, #28]	; (80095d8 <_write_r+0x20>)
 80095bc:	4605      	mov	r5, r0
 80095be:	4608      	mov	r0, r1
 80095c0:	4611      	mov	r1, r2
 80095c2:	2200      	movs	r2, #0
 80095c4:	6022      	str	r2, [r4, #0]
 80095c6:	461a      	mov	r2, r3
 80095c8:	f7f7 fd81 	bl	80010ce <_write>
 80095cc:	1c43      	adds	r3, r0, #1
 80095ce:	d102      	bne.n	80095d6 <_write_r+0x1e>
 80095d0:	6823      	ldr	r3, [r4, #0]
 80095d2:	b103      	cbz	r3, 80095d6 <_write_r+0x1e>
 80095d4:	602b      	str	r3, [r5, #0]
 80095d6:	bd38      	pop	{r3, r4, r5, pc}
 80095d8:	2000097c 	.word	0x2000097c

080095dc <_close_r>:
 80095dc:	b538      	push	{r3, r4, r5, lr}
 80095de:	4c06      	ldr	r4, [pc, #24]	; (80095f8 <_close_r+0x1c>)
 80095e0:	2300      	movs	r3, #0
 80095e2:	4605      	mov	r5, r0
 80095e4:	4608      	mov	r0, r1
 80095e6:	6023      	str	r3, [r4, #0]
 80095e8:	f7f8 f955 	bl	8001896 <_close>
 80095ec:	1c43      	adds	r3, r0, #1
 80095ee:	d102      	bne.n	80095f6 <_close_r+0x1a>
 80095f0:	6823      	ldr	r3, [r4, #0]
 80095f2:	b103      	cbz	r3, 80095f6 <_close_r+0x1a>
 80095f4:	602b      	str	r3, [r5, #0]
 80095f6:	bd38      	pop	{r3, r4, r5, pc}
 80095f8:	2000097c 	.word	0x2000097c

080095fc <_fstat_r>:
 80095fc:	b538      	push	{r3, r4, r5, lr}
 80095fe:	4c07      	ldr	r4, [pc, #28]	; (800961c <_fstat_r+0x20>)
 8009600:	2300      	movs	r3, #0
 8009602:	4605      	mov	r5, r0
 8009604:	4608      	mov	r0, r1
 8009606:	4611      	mov	r1, r2
 8009608:	6023      	str	r3, [r4, #0]
 800960a:	f7f8 f950 	bl	80018ae <_fstat>
 800960e:	1c43      	adds	r3, r0, #1
 8009610:	d102      	bne.n	8009618 <_fstat_r+0x1c>
 8009612:	6823      	ldr	r3, [r4, #0]
 8009614:	b103      	cbz	r3, 8009618 <_fstat_r+0x1c>
 8009616:	602b      	str	r3, [r5, #0]
 8009618:	bd38      	pop	{r3, r4, r5, pc}
 800961a:	bf00      	nop
 800961c:	2000097c 	.word	0x2000097c

08009620 <_isatty_r>:
 8009620:	b538      	push	{r3, r4, r5, lr}
 8009622:	4c06      	ldr	r4, [pc, #24]	; (800963c <_isatty_r+0x1c>)
 8009624:	2300      	movs	r3, #0
 8009626:	4605      	mov	r5, r0
 8009628:	4608      	mov	r0, r1
 800962a:	6023      	str	r3, [r4, #0]
 800962c:	f7f8 f94f 	bl	80018ce <_isatty>
 8009630:	1c43      	adds	r3, r0, #1
 8009632:	d102      	bne.n	800963a <_isatty_r+0x1a>
 8009634:	6823      	ldr	r3, [r4, #0]
 8009636:	b103      	cbz	r3, 800963a <_isatty_r+0x1a>
 8009638:	602b      	str	r3, [r5, #0]
 800963a:	bd38      	pop	{r3, r4, r5, pc}
 800963c:	2000097c 	.word	0x2000097c

08009640 <_lseek_r>:
 8009640:	b538      	push	{r3, r4, r5, lr}
 8009642:	4c07      	ldr	r4, [pc, #28]	; (8009660 <_lseek_r+0x20>)
 8009644:	4605      	mov	r5, r0
 8009646:	4608      	mov	r0, r1
 8009648:	4611      	mov	r1, r2
 800964a:	2200      	movs	r2, #0
 800964c:	6022      	str	r2, [r4, #0]
 800964e:	461a      	mov	r2, r3
 8009650:	f7f8 f948 	bl	80018e4 <_lseek>
 8009654:	1c43      	adds	r3, r0, #1
 8009656:	d102      	bne.n	800965e <_lseek_r+0x1e>
 8009658:	6823      	ldr	r3, [r4, #0]
 800965a:	b103      	cbz	r3, 800965e <_lseek_r+0x1e>
 800965c:	602b      	str	r3, [r5, #0]
 800965e:	bd38      	pop	{r3, r4, r5, pc}
 8009660:	2000097c 	.word	0x2000097c

08009664 <memcpy>:
 8009664:	b510      	push	{r4, lr}
 8009666:	1e43      	subs	r3, r0, #1
 8009668:	440a      	add	r2, r1
 800966a:	4291      	cmp	r1, r2
 800966c:	d100      	bne.n	8009670 <memcpy+0xc>
 800966e:	bd10      	pop	{r4, pc}
 8009670:	f811 4b01 	ldrb.w	r4, [r1], #1
 8009674:	f803 4f01 	strb.w	r4, [r3, #1]!
 8009678:	e7f7      	b.n	800966a <memcpy+0x6>

0800967a <memmove>:
 800967a:	4288      	cmp	r0, r1
 800967c:	b510      	push	{r4, lr}
 800967e:	eb01 0302 	add.w	r3, r1, r2
 8009682:	d807      	bhi.n	8009694 <memmove+0x1a>
 8009684:	1e42      	subs	r2, r0, #1
 8009686:	4299      	cmp	r1, r3
 8009688:	d00a      	beq.n	80096a0 <memmove+0x26>
 800968a:	f811 4b01 	ldrb.w	r4, [r1], #1
 800968e:	f802 4f01 	strb.w	r4, [r2, #1]!
 8009692:	e7f8      	b.n	8009686 <memmove+0xc>
 8009694:	4283      	cmp	r3, r0
 8009696:	d9f5      	bls.n	8009684 <memmove+0xa>
 8009698:	1881      	adds	r1, r0, r2
 800969a:	1ad2      	subs	r2, r2, r3
 800969c:	42d3      	cmn	r3, r2
 800969e:	d100      	bne.n	80096a2 <memmove+0x28>
 80096a0:	bd10      	pop	{r4, pc}
 80096a2:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80096a6:	f801 4d01 	strb.w	r4, [r1, #-1]!
 80096aa:	e7f7      	b.n	800969c <memmove+0x22>

080096ac <__malloc_lock>:
 80096ac:	4770      	bx	lr

080096ae <__malloc_unlock>:
 80096ae:	4770      	bx	lr

080096b0 <_realloc_r>:
 80096b0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80096b2:	4607      	mov	r7, r0
 80096b4:	4614      	mov	r4, r2
 80096b6:	460e      	mov	r6, r1
 80096b8:	b921      	cbnz	r1, 80096c4 <_realloc_r+0x14>
 80096ba:	4611      	mov	r1, r2
 80096bc:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 80096c0:	f7ff bab2 	b.w	8008c28 <_malloc_r>
 80096c4:	b922      	cbnz	r2, 80096d0 <_realloc_r+0x20>
 80096c6:	f7ff fa61 	bl	8008b8c <_free_r>
 80096ca:	4625      	mov	r5, r4
 80096cc:	4628      	mov	r0, r5
 80096ce:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80096d0:	f000 f826 	bl	8009720 <_malloc_usable_size_r>
 80096d4:	42a0      	cmp	r0, r4
 80096d6:	d20f      	bcs.n	80096f8 <_realloc_r+0x48>
 80096d8:	4621      	mov	r1, r4
 80096da:	4638      	mov	r0, r7
 80096dc:	f7ff faa4 	bl	8008c28 <_malloc_r>
 80096e0:	4605      	mov	r5, r0
 80096e2:	2800      	cmp	r0, #0
 80096e4:	d0f2      	beq.n	80096cc <_realloc_r+0x1c>
 80096e6:	4631      	mov	r1, r6
 80096e8:	4622      	mov	r2, r4
 80096ea:	f7ff ffbb 	bl	8009664 <memcpy>
 80096ee:	4631      	mov	r1, r6
 80096f0:	4638      	mov	r0, r7
 80096f2:	f7ff fa4b 	bl	8008b8c <_free_r>
 80096f6:	e7e9      	b.n	80096cc <_realloc_r+0x1c>
 80096f8:	4635      	mov	r5, r6
 80096fa:	e7e7      	b.n	80096cc <_realloc_r+0x1c>

080096fc <_read_r>:
 80096fc:	b538      	push	{r3, r4, r5, lr}
 80096fe:	4c07      	ldr	r4, [pc, #28]	; (800971c <_read_r+0x20>)
 8009700:	4605      	mov	r5, r0
 8009702:	4608      	mov	r0, r1
 8009704:	4611      	mov	r1, r2
 8009706:	2200      	movs	r2, #0
 8009708:	6022      	str	r2, [r4, #0]
 800970a:	461a      	mov	r2, r3
 800970c:	f7f8 f8a6 	bl	800185c <_read>
 8009710:	1c43      	adds	r3, r0, #1
 8009712:	d102      	bne.n	800971a <_read_r+0x1e>
 8009714:	6823      	ldr	r3, [r4, #0]
 8009716:	b103      	cbz	r3, 800971a <_read_r+0x1e>
 8009718:	602b      	str	r3, [r5, #0]
 800971a:	bd38      	pop	{r3, r4, r5, pc}
 800971c:	2000097c 	.word	0x2000097c

08009720 <_malloc_usable_size_r>:
 8009720:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8009724:	1f18      	subs	r0, r3, #4
 8009726:	2b00      	cmp	r3, #0
 8009728:	bfbc      	itt	lt
 800972a:	580b      	ldrlt	r3, [r1, r0]
 800972c:	18c0      	addlt	r0, r0, r3
 800972e:	4770      	bx	lr

08009730 <_init>:
 8009730:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009732:	bf00      	nop
 8009734:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009736:	bc08      	pop	{r3}
 8009738:	469e      	mov	lr, r3
 800973a:	4770      	bx	lr

0800973c <_fini>:
 800973c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800973e:	bf00      	nop
 8009740:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009742:	bc08      	pop	{r3}
 8009744:	469e      	mov	lr, r3
 8009746:	4770      	bx	lr
